;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! da28c9@library-file-path->cache-path (unspecified)) (set! da28cb@read-annotated (unspecified)) (set! da28cd@annotation-stripped (unspecified)) (set! da28cf@annotation? (unspecified)) (set! da28d1@annotation-source (unspecified)) (set! da28d3@annotation-expression (unspecified)) (set! da28d5@scm->fasl (unspecified)) (set! da28d7@fasl-save (unspecified)) (set! da28d9@fasl-load (unspecified)) (set! da28db@verbose? (unspecified)) (set! da28dd@serialize-library (unspecified)) (set! da28df@load-serialized-library (unspecified)) (set! da28e1@make-record-printer (unspecified)) (set! da28e3@compile-core (unspecified)) (set! da28e5@read-library-source-file (unspecified)) (set! da28e7@make-parameter (unspecified)) (set! da28e9@mosh-cache-dir (unspecified)) (set! da297f@file-options-spec (unspecified)) (set! da28c9@library-file-path->cache-path (lambda (da2980@x) (call-with-values (lambda () (open-string-output-port)) (lambda (da2986@da2983 da2987@da2985) (let ((da298a@extract da2987@da2985) (da298b@p da2986@da2983)) (let ((da298f@display-hex '#f)) (begin (set! da298f@display-hex (lambda (da2998@n) (if (<= '0 da2998@n '9) (display da2998@n da298b@p) (display (integer->char (+ (char->integer '#\a) (- da2998@n '10))) da298b@p)))) (begin (let da2992@f ((da2990@ls (string-split da2980@x '#\/))) (if (not (null? da2990@ls)) (begin (display '"_" da298b@p) (for-each (lambda (da2994@c) (if (or (char<=? '#\a da2994@c '#\z) (char<=? '#\A da2994@c '#\Z) (char<=? '#\0 da2994@c '#\9) (memv da2994@c '(#\- #\. #\_ #\~))) (display da2994@c da298b@p) (begin (display '"%" da298b@p) (let ((da2996@n (char->integer da2994@c))) (begin (da298f@display-hex (quotient da2996@n '16)) (da298f@display-hex (remainder da2996@n '16))))))) (string->list (car da2990@ls))) (da2992@f (cdr da2990@ls))) (void))) (da298a@extract))))))))) (set! da29fa@da28c9@library-file-path->cache-path da28c9@library-file-path->cache-path) (set! da28cb@read-annotated read) (set! da29fb@da28cb@read-annotated da28cb@read-annotated) (set! da28cd@annotation-stripped (lambda (da299a@x) (da28d3@annotation-expression da299a@x))) (set! da29fc@da28cd@annotation-stripped da28cd@annotation-stripped) (set! da28cf@annotation? (lambda (da299c@x) (source-info da299c@x))) (set! da29fd@da28cf@annotation? da28cf@annotation?) (set! da28d1@annotation-source (lambda (da299e@x) (source-info da299e@x))) (set! da29fe@da28d1@annotation-source da28d1@annotation-source) (set! da28d3@annotation-expression (lambda (da29a0@x) (if (pair? da29a0@x) (cons (car da29a0@x) (cdr da29a0@x)) (if (procedure? da29a0@x) (set-source-info! da29a0@x '#f) da29a0@x)))) (set! da29ff@da28d3@annotation-expression da28d3@annotation-expression) (set! da28d5@scm->fasl (lambda (da29a2@filename) (string-append (da28e9@mosh-cache-dir) '"/" (da28c9@library-file-path->cache-path da29a2@filename) '".mosh-fasl"))) (set! da2a00@da28d5@scm->fasl da28d5@scm->fasl) (set! da28d7@fasl-save (lambda (da29a4@filename da29a5@obj) (call-with-port (open-file-output-port da29a4@filename) (lambda (da29a8@port) ((symbol-value 'fasl-write!) da29a5@obj da29a8@port))))) (set! da2a01@da28d7@fasl-save da28d7@fasl-save) (set! da28d9@fasl-load (lambda (da29aa@filename) (call-with-port (open-file-input-port da29aa@filename) (symbol-value 'fasl-read!)))) (set! da2a02@da28d9@fasl-load da28d9@fasl-load) (set! da28db@verbose? (symbol-value '%verbose)) (set! da2a03@da28db@verbose? da28db@verbose?) (set! da28dd@serialize-library (lambda (da29ac@filename da29ad@obj) (begin (if da28db@verbose? (format (current-error-port) '"serialize-library ~a\n..." da29ac@filename) (void)) (let ((da29b0@expanded2core (symbol-value 'expanded2core))) (let ((da29b2@compile (symbol-value 'compile-w/o-halt))) (let ((da29b4@code da29ad@obj)) (let ((da29b6@pivot (cddddr (cddddr da29b4@code)))) (let ((da29b8@visit (da29b2@compile (da29b0@expanded2core (car da29b6@pivot))))) (begin (set-car! da29b6@pivot da29b8@visit) (let ((da29ba@pivot (cdr da29b6@pivot))) (let ((da29bc@invoke (da29b2@compile (da29b0@expanded2core (car da29ba@pivot))))) (set-car! da29ba@pivot da29bc@invoke))))))))) (let ((da29be@fasl-file (da28d5@scm->fasl da29ac@filename))) (begin (if (file-exists? da29be@fasl-file) (delete-file da29be@fasl-file) (void)) ((call/cc (lambda (da29c2@da29c0) (lambda () (with-exception-handler (lambda (da29c4@c) ((call/cc (lambda (da29c6@da29c1) (da29c2@da29c0 (lambda () (if '#t (begin (if da28db@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" da29ac@filename) (void)) (if (file-exists? da29be@fasl-file) (delete-file da29be@fasl-file) (void)) '#f) (da29c6@da29c1 (lambda () (raise-continuable da29c4@c)))))))))) (lambda () (da28d7@fasl-save da29be@fasl-file da29ad@obj)))))))))))) (set! da2a04@da28dd@serialize-library da28dd@serialize-library) (set! da28df@load-serialized-library (lambda (da29c8@filename da29c9@obj) (and (da28e9@mosh-cache-dir) (let ((da29cc@fasl-file (da28d5@scm->fasl da29c8@filename))) (if (and (file-exists? da29cc@fasl-file) ((symbol-value 'file-newer?) da29cc@fasl-file da29c8@filename)) (let ((da29ce@expanded2core (symbol-value 'expanded2core))) (let ((da29d0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((da29d2@code (da28d9@fasl-load da29cc@fasl-file))) (let ((da29d4@pivot (cddddr (cddddr da29d2@code)))) (let ((da29d6@visit (car da29d4@pivot))) (let ((da29d8@visit-proc (lambda () (da29d0@eval-compiled-core da29d6@visit)))) (begin (set-car! da29d4@pivot da29d8@visit-proc) (let ((da29da@pivot (cdr da29d4@pivot))) (let ((da29dc@invoke (car da29da@pivot))) (begin (set-car! da29da@pivot (lambda () (da29d0@eval-compiled-core da29dc@invoke))) (apply da29c9@obj da29d2@code))))))))))) '#f))))) (set! da2a05@da28df@load-serialized-library da28df@load-serialized-library) (set! da28e1@make-record-printer (lambda (da29de@name da29df@printer) (lambda da29e2@x (begin (display '"record printer") (for-each display da29e2@x))))) (set! da2a06@da28e1@make-record-printer da28e1@make-record-printer) (set! da28e3@compile-core (lambda da29e4@x (apply error 'comile-core '"not implementated" da29e4@x))) (set! da2a07@da28e3@compile-core da28e3@compile-core) (set! da28e5@read-library-source-file (lambda (da29e6@file-name) (with-input-from-file da29e6@file-name da28cb@read-annotated))) (set! da2a08@da28e5@read-library-source-file da28e5@read-library-source-file) (set! da28e7@make-parameter (lambda da29f6 (let ((da29f7 (length da29f6))) (if (= da29f7 '1) (apply (lambda (da29e8@x) (da28e7@make-parameter da29e8@x (lambda (da29ea@x) da29ea@x))) da29f6) (if (= da29f7 '2) (apply (lambda (da29ec@x da29ed@fender) (let ((da29f0@x (da29ed@fender da29ec@x))) (lambda da29f4 (let ((da29f5 (length da29f4))) (if (= da29f5 '0) (apply (lambda () da29f0@x) da29f4) (if (= da29f5 '1) (apply (lambda (da29f2@v) (set! da29f0@x (da29ed@fender da29f2@v))) da29f4) (error 'apply '"invalid arg count"))))))) da29f6) (error 'apply '"invalid arg count")))))) (set! da2a09@da28e7@make-parameter da28e7@make-parameter) (set! da28e9@mosh-cache-dir (da28e7@make-parameter '#f)) (set! da2a0a@da28e9@mosh-cache-dir da28e9@mosh-cache-dir) (set! da297f@file-options-spec (lambda (da29f8@x) da29f8@x)) (set! da2a0b@da297f@file-options-spec da297f@file-options-spec) (void))
(begin (set! da2a11@current-primitive-locations (unspecified)) (set! da2a13@mutable? (unspecified)) (set! da2a15@rewriter (unspecified)) (set! da2a17@expanded->core (unspecified)) (set! da2a19@compile-core-expr (unspecified)) (set! da2a1b@pretty-print (unspecified)) (set! da2a1d@compile-core-expr-to-port (unspecified)) (set! da2a11@current-primitive-locations (da2a09@da28e7@make-parameter (lambda (da2a1e@x) '#f) (lambda (da2a20@p) da2a20@p))) (set! da2a5c@da2a11@current-primitive-locations da2a11@current-primitive-locations) (set! da2a13@mutable? (lambda (da2a22@x) (or (pair? da2a22@x) (vector? da2a22@x) (hashtable? da2a22@x)))) (set! da2a5d@da2a13@mutable? da2a13@mutable?) (set! da2a15@rewriter (lambda (da2a24@quote-hack?) (let ((da2a27@f '#f)) (begin (set! da2a27@f (lambda (da2a28@x) (if (pair? da2a28@x) (let ((da2a2a@t (car da2a28@x))) (if (memv da2a2a@t '(quote)) (if (and da2a24@quote-hack? (da2a13@mutable? (cadr da2a28@x))) (let ((da2a2c@g (gensym))) (begin (set-symbol-value! da2a2c@g (cadr da2a28@x)) da2a2c@g)) da2a28@x) (if (memv da2a2a@t '(case-lambda)) (cons 'case-lambda (map (lambda (da2a2e@x) (cons (car da2a2e@x) (map da2a27@f (cdr da2a2e@x)))) (cdr da2a28@x))) (if (memv da2a2a@t '(lambda)) (cons* 'lambda (cadr da2a28@x) (map da2a27@f (cddr da2a28@x))) (if (memv da2a2a@t '(letrec)) (let ((da2a30@bindings (cadr da2a28@x)) (da2a31@body* (cddr da2a28@x))) (let ((da2a34@lhs* (map car da2a30@bindings)) (da2a35@rhs* (map cadr da2a30@bindings))) (cons* 'letrec (map list da2a34@lhs* (map da2a27@f da2a35@rhs*)) (map da2a27@f da2a31@body*)))) (if (memv da2a2a@t '(letrec*)) (let ((da2a38@bindings (cadr da2a28@x)) (da2a39@body* (cddr da2a28@x))) (let ((da2a3c@lhs* (map car da2a38@bindings)) (da2a3d@rhs* (map cadr da2a38@bindings))) (cons* 'letrec* (map list da2a3c@lhs* (map da2a27@f da2a3d@rhs*)) (map da2a27@f da2a39@body*)))) (if (memv da2a2a@t '(library-letrec*)) (let ((da2a40@name (cadr da2a28@x)) (da2a41@x (cdr da2a28@x))) (let ((da2a44@bindings (cadr da2a41@x)) (da2a45@body* (cddr da2a41@x))) (let ((da2a48@lhs* (map car da2a44@bindings)) (da2a49@lhs** (map cadr da2a44@bindings)) (da2a4a@rhs* (map caddr da2a44@bindings))) (cons* 'library-letrec* da2a40@name (map list da2a48@lhs* da2a49@lhs** (map da2a27@f da2a4a@rhs*)) (map da2a27@f da2a45@body*))))) (if (memv da2a2a@t '(begin)) (cons 'begin (map da2a27@f (cdr da2a28@x))) (if (memv da2a2a@t '(set!)) (list 'set! (cadr da2a28@x) (da2a27@f (caddr da2a28@x))) (if (memv da2a2a@t '(primitive)) (let ((da2a4e@op (cadr da2a28@x))) (let ((da2a50@t ((da2a11@current-primitive-locations) da2a4e@op))) (if da2a50@t ((lambda (da2a52@loc) da2a52@loc) da2a50@t) da2a4e@op))) (if (memv da2a2a@t '(define)) da2a28@x (if (list? da2a28@x) (map da2a27@f da2a28@x) (error 'rewrite '"invalid form ~s ~s" da2a28@x (list? da2a28@x)))))))))))))) da2a28@x))) da2a27@f)))) (set! da2a5e@da2a15@rewriter da2a15@rewriter) (set! da2a17@expanded->core (lambda (da2a54@x) ((da2a15@rewriter '#f) da2a54@x))) (set! da2a5f@da2a17@expanded->core da2a17@expanded->core) (set! da2a19@compile-core-expr (lambda (da2a56@x) ((da2a15@rewriter '#f) da2a56@x))) (set! da2a60@da2a19@compile-core-expr da2a19@compile-core-expr) (set! da2a1b@pretty-print write) (set! da2a61@da2a1b@pretty-print da2a1b@pretty-print) (set! da2a1d@compile-core-expr-to-port (lambda (da2a58@x da2a59@p) (da2a1b@pretty-print ((da2a15@rewriter '#f) da2a58@x) da2a59@p))) (set! da2a62@da2a1d@compile-core-expr-to-port da2a1d@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! da2ab1@make-collection (unspecified)) (set! da2ab3@current-library-collection (unspecified)) (set! da2ab5@rp (unspecified)) (set! da2abf@library? (unspecified)) (set! da2ac1@library-id (unspecified)) (set! da2ac3@set-library-id! (unspecified)) (set! da2ac5@library-name (unspecified)) (set! da2ac7@set-library-name! (unspecified)) (set! da2ac9@library-version (unspecified)) (set! da2acb@set-library-version! (unspecified)) (set! da2acd@library-imp* (unspecified)) (set! da2acf@set-library-imp*! (unspecified)) (set! da2ad1@library-vis* (unspecified)) (set! da2ad3@set-library-vis*! (unspecified)) (set! da2ad5@library-inv* (unspecified)) (set! da2ad7@set-library-inv*! (unspecified)) (set! da2ad9@library-subst (unspecified)) (set! da2adb@set-library-subst! (unspecified)) (set! da2add@library-env (unspecified)) (set! da2adf@set-library-env! (unspecified)) (set! da2ae1@library-visit-state (unspecified)) (set! da2ae3@set-library-visit-state! (unspecified)) (set! da2ae5@library-invoke-state (unspecified)) (set! da2ae7@set-library-invoke-state! (unspecified)) (set! da2ae9@library-visit-code (unspecified)) (set! da2aeb@set-library-visit-code! (unspecified)) (set! da2aed@library-invoke-code (unspecified)) (set! da2aef@set-library-invoke-code! (unspecified)) (set! da2af1@library-visible? (unspecified)) (set! da2af3@set-library-visible?! (unspecified)) (set! da2af5@library-source-file-name (unspecified)) (set! da2af7@set-library-source-file-name! (unspecified)) (set! da2af9@dummy (unspecified)) (set! da2afb@find-dependencies (unspecified)) (set! da2afd@find-library-by (unspecified)) (set! da2aff@library-path (unspecified)) (set! da2b01@library-extensions (unspecified)) (set! da2b03@library-name->file-name (unspecified)) (set! da2b05@file-locator (unspecified)) (set! da2b07@serialize-all (unspecified)) (set! da2b09@current-precompiled-library-loader (unspecified)) (set! da2b0b@try-load-from-file (unspecified)) (set! da2b0d@library-loader (unspecified)) (set! da2b0f@current-library-expander (unspecified)) (set! da2b11@external-pending-libraries (unspecified)) (set! da2b13@find-external-library (unspecified)) (set! da2b15@find-library-by-name (unspecified)) (set! da2b17@library-exists? (unspecified)) (set! da2b19@find-library-by-spec/die (unspecified)) (set! da2b1b@label->binding-table (unspecified)) (set! da2b1d@install-library-record (unspecified)) (set! da2b1f@install-library (unspecified)) (set! da2b21@imported-label->binding (unspecified)) (set! da2b23@invoke-library (unspecified)) (set! da2b25@visit-library (unspecified)) (set! da2b27@invoke-library-by-spec (unspecified)) (set! da2b29@installed-libraries (unspecified)) (set! da2b2b@library-spec (unspecified)) (set! da2ab1@make-collection (lambda () (let ((da2b2c@set '())) (let ((da2b2f@set-cons '#f)) (begin (set! da2b2f@set-cons (lambda (da2b34@x da2b35@ls) (if (memq da2b34@x da2b35@ls) da2b35@ls (cons da2b34@x da2b35@ls)))) (lambda da2b32 (let ((da2b33 (length da2b32))) (if (= da2b33 '0) (apply (lambda () da2b2c@set) da2b32) (if (= da2b33 '1) (apply (lambda (da2b30@x) (set! da2b2c@set (da2b2f@set-cons da2b30@x da2b2c@set))) da2b32) (error 'apply '"invalid arg count")))))))))) (set! da2ca0@da2ab1@make-collection da2ab1@make-collection) (set! da2ab3@current-library-collection (da2a09@da28e7@make-parameter (da2ab1@make-collection) (lambda (da2b38@x) (begin (if (not (procedure? da2b38@x)) (assertion-violation 'current-library-collection '"not a procedure" da2b38@x) (void)) da2b38@x)))) (set! da2ca1@da2ab3@current-library-collection da2ab3@current-library-collection) (set! da2ab5@rp (da2a06@da28e1@make-record-printer 'library (lambda (da2b3a@x da2b3b@p da2b3c@wr) (begin (if (not (da2abf@library? da2b3a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (da2ac9@library-version da2b3a@x)) (da2ac5@library-name da2b3a@x) (append (da2ac5@library-name da2b3a@x) (list (da2ac9@library-version da2b3a@x))))) da2b3b@p))))) (set! da2ca2@da2ab5@rp da2ab5@rp) (set! da2abf@library? (lambda (da2b40@x) (and (simple-struct? da2b40@x) (eq? (simple-struct-name da2b40@x) 'library)))) (set! da2ca3@da2abf@library? da2abf@library?) (set! da2ac1@library-id (lambda (da2b42@x) (simple-struct-ref da2b42@x '0))) (set! da2ca4@da2ac1@library-id da2ac1@library-id) (set! da2ac3@set-library-id! (lambda (da2b44@x da2b45@val) (simple-struct-set! da2b44@x '0 da2b45@val))) (set! da2ca5@da2ac3@set-library-id! da2ac3@set-library-id!) (set! da2ac5@library-name (lambda (da2b48@x) (simple-struct-ref da2b48@x '1))) (set! da2ca6@da2ac5@library-name da2ac5@library-name) (set! da2ac7@set-library-name! (lambda (da2b4a@x da2b4b@val) (simple-struct-set! da2b4a@x '1 da2b4b@val))) (set! da2ca7@da2ac7@set-library-name! da2ac7@set-library-name!) (set! da2ac9@library-version (lambda (da2b4e@x) (simple-struct-ref da2b4e@x '2))) (set! da2ca8@da2ac9@library-version da2ac9@library-version) (set! da2acb@set-library-version! (lambda (da2b50@x da2b51@val) (simple-struct-set! da2b50@x '2 da2b51@val))) (set! da2ca9@da2acb@set-library-version! da2acb@set-library-version!) (set! da2acd@library-imp* (lambda (da2b54@x) (simple-struct-ref da2b54@x '3))) (set! da2caa@da2acd@library-imp* da2acd@library-imp*) (set! da2acf@set-library-imp*! (lambda (da2b56@x da2b57@val) (simple-struct-set! da2b56@x '3 da2b57@val))) (set! da2cab@da2acf@set-library-imp*! da2acf@set-library-imp*!) (set! da2ad1@library-vis* (lambda (da2b5a@x) (simple-struct-ref da2b5a@x '4))) (set! da2cac@da2ad1@library-vis* da2ad1@library-vis*) (set! da2ad3@set-library-vis*! (lambda (da2b5c@x da2b5d@val) (simple-struct-set! da2b5c@x '4 da2b5d@val))) (set! da2cad@da2ad3@set-library-vis*! da2ad3@set-library-vis*!) (set! da2ad5@library-inv* (lambda (da2b60@x) (simple-struct-ref da2b60@x '5))) (set! da2cae@da2ad5@library-inv* da2ad5@library-inv*) (set! da2ad7@set-library-inv*! (lambda (da2b62@x da2b63@val) (simple-struct-set! da2b62@x '5 da2b63@val))) (set! da2caf@da2ad7@set-library-inv*! da2ad7@set-library-inv*!) (set! da2ad9@library-subst (lambda (da2b66@x) (simple-struct-ref da2b66@x '6))) (set! da2cb0@da2ad9@library-subst da2ad9@library-subst) (set! da2adb@set-library-subst! (lambda (da2b68@x da2b69@val) (simple-struct-set! da2b68@x '6 da2b69@val))) (set! da2cb1@da2adb@set-library-subst! da2adb@set-library-subst!) (set! da2add@library-env (lambda (da2b6c@x) (simple-struct-ref da2b6c@x '7))) (set! da2cb2@da2add@library-env da2add@library-env) (set! da2adf@set-library-env! (lambda (da2b6e@x da2b6f@val) (simple-struct-set! da2b6e@x '7 da2b6f@val))) (set! da2cb3@da2adf@set-library-env! da2adf@set-library-env!) (set! da2ae1@library-visit-state (lambda (da2b72@x) (simple-struct-ref da2b72@x '8))) (set! da2cb4@da2ae1@library-visit-state da2ae1@library-visit-state) (set! da2ae3@set-library-visit-state! (lambda (da2b74@x da2b75@val) (simple-struct-set! da2b74@x '8 da2b75@val))) (set! da2cb5@da2ae3@set-library-visit-state! da2ae3@set-library-visit-state!) (set! da2ae5@library-invoke-state (lambda (da2b78@x) (simple-struct-ref da2b78@x '9))) (set! da2cb6@da2ae5@library-invoke-state da2ae5@library-invoke-state) (set! da2ae7@set-library-invoke-state! (lambda (da2b7a@x da2b7b@val) (simple-struct-set! da2b7a@x '9 da2b7b@val))) (set! da2cb7@da2ae7@set-library-invoke-state! da2ae7@set-library-invoke-state!) (set! da2ae9@library-visit-code (lambda (da2b7e@x) (simple-struct-ref da2b7e@x '10))) (set! da2cb8@da2ae9@library-visit-code da2ae9@library-visit-code) (set! da2aeb@set-library-visit-code! (lambda (da2b80@x da2b81@val) (simple-struct-set! da2b80@x '10 da2b81@val))) (set! da2cb9@da2aeb@set-library-visit-code! da2aeb@set-library-visit-code!) (set! da2aed@library-invoke-code (lambda (da2b84@x) (simple-struct-ref da2b84@x '11))) (set! da2cba@da2aed@library-invoke-code da2aed@library-invoke-code) (set! da2aef@set-library-invoke-code! (lambda (da2b86@x da2b87@val) (simple-struct-set! da2b86@x '11 da2b87@val))) (set! da2cbb@da2aef@set-library-invoke-code! da2aef@set-library-invoke-code!) (set! da2af1@library-visible? (lambda (da2b8a@x) (simple-struct-ref da2b8a@x '12))) (set! da2cbc@da2af1@library-visible? da2af1@library-visible?) (set! da2af3@set-library-visible?! (lambda (da2b8c@x da2b8d@val) (simple-struct-set! da2b8c@x '12 da2b8d@val))) (set! da2cbd@da2af3@set-library-visible?! da2af3@set-library-visible?!) (set! da2af5@library-source-file-name (lambda (da2b90@x) (simple-struct-ref da2b90@x '13))) (set! da2cbe@da2af5@library-source-file-name da2af5@library-source-file-name) (set! da2af7@set-library-source-file-name! (lambda (da2b92@x da2b93@val) (simple-struct-set! da2b92@x '13 da2b93@val))) (set! da2cbf@da2af7@set-library-source-file-name! da2af7@set-library-source-file-name!) (set! da2af9@dummy '3) (set! da2cc0@da2af9@dummy da2af9@dummy) (set! da2afb@find-dependencies (lambda (da2b96@ls) (if (null? da2b96@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! da2cc1@da2afb@find-dependencies da2afb@find-dependencies) (set! da2afd@find-library-by (lambda (da2b98@pred) (let da2b9c@f ((da2b9a@ls ((da2ab3@current-library-collection)))) (if (null? da2b9a@ls) '#f (if (da2b98@pred (car da2b9a@ls)) (car da2b9a@ls) (da2b9c@f (cdr da2b9a@ls))))))) (set! da2cc2@da2afd@find-library-by da2afd@find-library-by) (set! da2aff@library-path (da2a09@da28e7@make-parameter '(".") (lambda (da2b9e@x) (if (and (list? da2b9e@x) (for-all string? da2b9e@x)) (map (lambda (da2ba0@x) da2ba0@x) da2b9e@x) (assertion-violation 'library-path '"not a list of strings" da2b9e@x))))) (set! da2cc3@da2aff@library-path da2aff@library-path) (set! da2b01@library-extensions (da2a09@da28e7@make-parameter '(".sls" ".ss" ".scm") (lambda (da2ba2@x) (if (and (list? da2ba2@x) (for-all string? da2ba2@x)) (map (lambda (da2ba4@x) da2ba4@x) da2ba2@x) (assertion-violation 'library-extensions '"not a list of strings" da2ba2@x))))) (set! da2cc4@da2b01@library-extensions da2b01@library-extensions) (set! da2b03@library-name->file-name (lambda (da2ba6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (da2bac@da2ba9 da2bad@da2bab) (let ((da2bb0@extract da2bad@da2bab) (da2bb1@p da2bac@da2ba9)) (let ((da2bb5@display-hex '#f)) (begin (set! da2bb5@display-hex (lambda (da2bbe@n) (if (<= '0 da2bbe@n '9) (display da2bbe@n da2bb1@p) (display (integer->char (+ (char->integer '#\a) (- da2bbe@n '10))) da2bb1@p)))) (begin (let da2bb8@f ((da2bb6@ls da2ba6@x)) (if (not (null? da2bb6@ls)) (begin (display '"/" da2bb1@p) (for-each (lambda (da2bba@c) (if (or (char<=? '#\a da2bba@c '#\z) (char<=? '#\A da2bba@c '#\Z) (char<=? '#\0 da2bba@c '#\9) (memv da2bba@c '(#\- #\. #\_ #\~))) (display da2bba@c da2bb1@p) (begin (display '"%" da2bb1@p) (let ((da2bbc@n (char->integer da2bba@c))) (begin (da2bb5@display-hex (quotient da2bbc@n '16)) (da2bb5@display-hex (remainder da2bbc@n '16))))))) (string->list (symbol->string (car da2bb6@ls)))) (da2bb8@f (cdr da2bb6@ls))) (void))) (da2bb0@extract))))))))) (set! da2cc5@da2b03@library-name->file-name da2b03@library-name->file-name) (set! da2b05@file-locator (da2a09@da28e7@make-parameter (lambda (da2bc0@x) (let ((da2bc2@str (da2b03@library-name->file-name da2bc0@x))) (let da2bca@f ((da2bc4@ls (da2aff@library-path)) (da2bc5@exts (da2b01@library-extensions)) (da2bc6@failed-list '())) (if (null? da2bc4@ls) (let ((da2bd4@da2bcf '#f) (da2bd6@da2bd1 '#f) (da2bd8@da2bd0 '#f) (da2bdb@da2bce '#f) (da2bdd@make-library-resolution-condition '#f) (da2bdf@da2bcc '#f) (da2be1@da2bcd '#f) (da2be3@library-resolution-condition? '#f) (da2be5@condition-library '#f) (da2be7@condition-files '#f)) (begin (set! da2bd4@da2bcf (make-record-type-descriptor '&library-resolution da4edb@da4c22@&condition-rtd 'da2bd2 '#f '#f '#((immutable library) (immutable files)))) (set! da2bd6@da2bd1 '#f) (set! da2bd8@da2bd0 (make-record-constructor-descriptor da2bd4@da2bcf da4edc@da4c24@&condition-rcd da2bd6@da2bd1)) (set! da2bdb@da2bce (record-predicate da2bd4@da2bcf)) (set! da2bdd@make-library-resolution-condition (record-constructor da2bd8@da2bd0)) (set! da2bdf@da2bcc (record-accessor da2bd4@da2bcf '0)) (set! da2be1@da2bcd (record-accessor da2bd4@da2bcf '1)) (set! da2be3@library-resolution-condition? (condition-predicate da2bd4@da2bcf)) (set! da2be5@condition-library (condition-accessor da2bd4@da2bcf da2bdf@da2bcc)) (set! da2be7@condition-files (condition-accessor da2bd4@da2bcf da2be1@da2bcd)) (raise (condition (da4efb@da4cbc@make-error) (da4f1d@da4d18@make-who-condition 'expander) (da4ee1@da4c79@make-message-condition '"cannot locate library in library-path") (da2bdd@make-library-resolution-condition da2bc0@x (reverse da2bc6@failed-list)))))) (if (null? da2bc5@exts) (da2bca@f (cdr da2bc4@ls) (da2b01@library-extensions) da2bc6@failed-list) (let ((da2be8@name (string-append (car da2bc4@ls) da2bc2@str (car da2bc5@exts)))) (if (file-exists? da2be8@name) da2be8@name (da2bca@f da2bc4@ls (cdr da2bc5@exts) (cons da2be8@name da2bc6@failed-list))))))))) (lambda (da2bea@f) (if (procedure? da2bea@f) da2bea@f (assertion-violation 'file-locator '"not a procedure" da2bea@f))))) (set! da2cc6@da2b05@file-locator da2b05@file-locator) (set! da2b07@serialize-all (lambda (da2bec@serialize da2bed@compile) (let ((da2bf1@library-desc '#f)) (begin (set! da2bf1@library-desc (lambda (da2bf4@x) (list (da2ac1@library-id da2bf4@x) (da2ac5@library-name da2bf4@x)))) (for-each (lambda (da2bf2@x) (if (da2af5@library-source-file-name da2bf2@x) (da2bec@serialize (da2af5@library-source-file-name da2bf2@x) (list (da2ac1@library-id da2bf2@x) (da2ac5@library-name da2bf2@x) (da2ac9@library-version da2bf2@x) (map da2bf1@library-desc (da2acd@library-imp* da2bf2@x)) (map da2bf1@library-desc (da2ad1@library-vis* da2bf2@x)) (map da2bf1@library-desc (da2ad5@library-inv* da2bf2@x)) (da2ad9@library-subst da2bf2@x) (da2add@library-env da2bf2@x) (da2bed@compile (da2ae9@library-visit-code da2bf2@x)) (da2bed@compile (da2aed@library-invoke-code da2bf2@x)) (da2af1@library-visible? da2bf2@x))) (void))) ((da2ab3@current-library-collection))))))) (set! da2cc7@da2b07@serialize-all da2b07@serialize-all) (set! da2b09@current-precompiled-library-loader (da2a09@da28e7@make-parameter (lambda (da2bf6@filename da2bf7@sk) '#f))) (set! da2cc8@da2b09@current-precompiled-library-loader da2b09@current-precompiled-library-loader) (set! da2b0b@try-load-from-file (lambda (da2bfa@filename) ((da2b09@current-precompiled-library-loader) da2bfa@filename (lambda da2c20 (let ((da2c21 (length da2c20))) (if (= da2c21 '11) (apply (lambda (da2bfc@id da2bfd@name da2bfe@ver da2bff@imp* da2c00@vis* da2c01@inv* da2c02@exp-subst da2c03@exp-env da2c04@visit-proc da2c05@invoke-proc da2c06@visible?) (let da2c14@f ((da2c12@deps (append da2bff@imp* da2c00@vis* da2c01@inv*))) (if (null? da2c12@deps) (begin (da2b1f@install-library da2bfc@id da2bfd@name da2bfe@ver da2bff@imp* da2c00@vis* da2c01@inv* da2c02@exp-subst da2c03@exp-env da2c04@visit-proc da2c05@invoke-proc '#f '#f da2c06@visible? '#f) '#t) (let ((da2c16@d (car da2c12@deps))) (let ((da2c18@label (car da2c16@d)) (da2c19@dname (cadr da2c16@d))) (let ((da2c1c@l (da2b15@find-library-by-name da2c19@dname))) (if (and (da2abf@library? da2c1c@l) (eq? da2c18@label (da2ac1@library-id da2c1c@l))) (da2c14@f (cdr da2c12@deps)) (begin (if da2a03@da28db@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" da2bfd@name da2c19@dname da2bfa@filename da2c1c@l da2c18@label (da2ac1@library-id da2c1c@l)) (void)) '#f)))))))) da2c20) (if (>= da2c21 '0) (apply (lambda da2c1e@others '#f) da2c20) (error 'apply '"invalid arg count")))))))) (set! da2cc9@da2b0b@try-load-from-file da2b0b@try-load-from-file) (set! da2b0d@library-loader (da2a09@da28e7@make-parameter (lambda (da2c22@x) (let ((da2c24@file-name ((da2b05@file-locator) da2c22@x))) (if (not da2c24@file-name) (assertion-violation '#f '"cannot file library" da2c22@x) (or (da2b0b@try-load-from-file da2c24@file-name) ((da2b0f@current-library-expander) (da2a08@da28e5@read-library-source-file da2c24@file-name) da2c24@file-name (lambda (da2c26@name) (if (not (fast-equal? da2c26@name da2c22@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (da2c2c@da2c29 da2c2d@da2c2b) (let ((da2c30@e da2c2d@da2c2b) (da2c31@p da2c2c@da2c29)) (begin (display '"expected to find library " da2c31@p) (write da2c22@x da2c31@p) (display '" in file " da2c31@p) (display da2c24@file-name da2c31@p) (display '", found " da2c31@p) (write da2c26@name da2c31@p) (display '" instead" da2c31@p) (da2c30@e)))))) (void)))))))) (lambda (da2c34@f) (if (procedure? da2c34@f) da2c34@f (assertion-violation 'library-locator '"not a procedure" da2c34@f))))) (set! da2cca@da2b0d@library-loader da2b0d@library-loader) (set! da2b0f@current-library-expander (da2a09@da28e7@make-parameter (lambda (da2c36@x) (assertion-violation 'library-expander '"not initialized")) (lambda (da2c38@f) (if (procedure? da2c38@f) da2c38@f (assertion-violation 'library-expander '"not a procedure" da2c38@f))))) (set! da2ccb@da2b0f@current-library-expander da2b0f@current-library-expander) (set! da2b11@external-pending-libraries (da2a09@da28e7@make-parameter '())) (set! da2ccc@da2b11@external-pending-libraries da2b11@external-pending-libraries) (set! da2b13@find-external-library (lambda (da2c3a@name) (begin (if (member da2c3a@name (da2b11@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" da2c3a@name) (void)) (let ((da2c40@da2c3d da2b11@external-pending-libraries) (da2c41@da2c3f (cons da2c3a@name (da2b11@external-pending-libraries)))) (let ((da2c44@swap (lambda () (let ((da2c46@t (da2c40@da2c3d))) (begin (da2c40@da2c3d da2c41@da2c3f) (set! da2c41@da2c3f da2c46@t)))))) (dynamic-wind da2c44@swap (lambda () (begin ((da2b0d@library-loader) da2c3a@name) (or (da2afd@find-library-by (lambda (da2c48@x) (fast-equal? (da2ac5@library-name da2c48@x) da2c3a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" da2c3a@name)))) da2c44@swap)))))) (set! da2ccd@da2b13@find-external-library da2b13@find-external-library) (set! da2b15@find-library-by-name (lambda (da2c4a@name) (or (da2afd@find-library-by (lambda (da2c4c@x) (fast-equal? (da2ac5@library-name da2c4c@x) da2c4a@name))) (da2b13@find-external-library da2c4a@name)))) (set! da2cce@da2b15@find-library-by-name da2b15@find-library-by-name) (set! da2b17@library-exists? (lambda (da2c4e@name) (and (da2afd@find-library-by (lambda (da2c50@x) (fast-equal? (da2ac5@library-name da2c50@x) da2c4e@name))) '#t))) (set! da2ccf@da2b17@library-exists? da2b17@library-exists?) (set! da2b19@find-library-by-spec/die (lambda (da2c52@spec) (let ((da2c54@id (car da2c52@spec))) (or (da2afd@find-library-by (lambda (da2c56@x) (eq? da2c54@id (da2ac1@library-id da2c56@x)))) (assertion-violation '#f '"cannot find library with required spec" da2c52@spec))))) (set! da2cd0@da2b19@find-library-by-spec/die da2b19@find-library-by-spec/die) (set! da2b1b@label->binding-table (make-eq-hashtable)) (set! da2cd1@da2b1b@label->binding-table da2b1b@label->binding-table) (set! da2b1d@install-library-record (lambda (da2c58@lib) (begin (let ((da2c5a@exp-env (da2add@library-env da2c58@lib))) (for-each (lambda (da2c5c@x) (let ((da2c5e@label (car da2c5c@x)) (da2c5f@binding (cdr da2c5c@x))) (let ((da2c62@binding (let ((da2c64@t (car da2c5f@binding))) (if (memv da2c64@t '(global)) (cons 'global (cons da2c58@lib (cdr da2c5f@binding))) (if (memv da2c64@t '(global-macro)) (cons 'global-macro (cons da2c58@lib (cdr da2c5f@binding))) (if (memv da2c64@t '(global-macro!)) (cons 'global-macro! (cons da2c58@lib (cdr da2c5f@binding))) da2c5f@binding)))))) (begin (if (hashtable-ref da2b1b@label->binding-table da2c5e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" da2c5e@label (hashtable-ref da2b1b@label->binding-table da2c5e@label '#f) da2c62@binding) (exit)) (void)) (hashtable-set! da2b1b@label->binding-table da2c5e@label da2c62@binding))))) da2c5a@exp-env)) ((da2ab3@current-library-collection) da2c58@lib)))) (set! da2cd2@da2b1d@install-library-record da2b1d@install-library-record) (set! da2b1f@install-library (lambda (da2c66@id da2c67@name da2c68@ver da2c69@imp* da2c6a@vis* da2c6b@inv* da2c6c@exp-subst da2c6d@exp-env da2c6e@visit-proc da2c6f@invoke-proc da2c70@visit-code da2c71@invoke-code da2c72@visible? da2c73@source-file-name) (let ((da2c82@imp-lib* (map da2b19@find-library-by-spec/die da2c69@imp*)) (da2c83@vis-lib* (map da2b19@find-library-by-spec/die da2c6a@vis*)) (da2c84@inv-lib* (map da2b19@find-library-by-spec/die da2c6b@inv*))) (begin (if (not (and (symbol? da2c66@id) (list? da2c67@name) (list? da2c68@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" da2c66@id da2c67@name da2c68@ver) (void)) (if (da2b17@library-exists? da2c67@name) (assertion-violation 'install-library '"library is already installed" da2c67@name) (void)) (let ((da2c88@lib (make-simple-struct 'library '15 (list da2c66@id da2c67@name da2c68@ver da2c82@imp-lib* da2c83@vis-lib* da2c84@inv-lib* da2c6c@exp-subst da2c6d@exp-env da2c6e@visit-proc da2c6f@invoke-proc da2c70@visit-code da2c71@invoke-code da2c72@visible? da2c73@source-file-name)))) (da2b1d@install-library-record da2c88@lib)))))) (set! da2cd3@da2b1f@install-library da2b1f@install-library) (set! da2b21@imported-label->binding (lambda (da2c8a@lab) (hashtable-ref da2b1b@label->binding-table da2c8a@lab '#f))) (set! da2cd4@da2b21@imported-label->binding da2b21@imported-label->binding) (set! da2b23@invoke-library (lambda (da2c8c@lib) (let ((da2c8e@invoke (da2ae5@library-invoke-state da2c8c@lib))) (if (procedure? da2c8e@invoke) (begin (da2ae7@set-library-invoke-state! da2c8c@lib (lambda () (assertion-violation 'invoke '"circularity detected" da2c8c@lib))) (for-each da2b23@invoke-library (da2ad5@library-inv* da2c8c@lib)) (da2ae7@set-library-invoke-state! da2c8c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" da2c8c@lib))) (da2c8e@invoke) (da2ae7@set-library-invoke-state! da2c8c@lib '#t)) (void))))) (set! da2cd5@da2b23@invoke-library da2b23@invoke-library) (set! da2b25@visit-library (lambda (da2c90@lib) (let ((da2c92@visit (da2ae1@library-visit-state da2c90@lib))) (if (procedure? da2c92@visit) (begin (da2ae3@set-library-visit-state! da2c90@lib (lambda () (assertion-violation 'visit '"circularity detected" da2c90@lib))) (for-each da2b23@invoke-library (da2ad1@library-vis* da2c90@lib)) (da2ae3@set-library-visit-state! da2c90@lib (lambda () (assertion-violation 'invoke '"first visit did not return" da2c90@lib))) (da2c92@visit) (da2ae3@set-library-visit-state! da2c90@lib '#t)) (void))))) (set! da2cd6@da2b25@visit-library da2b25@visit-library) (set! da2b27@invoke-library-by-spec (lambda (da2c94@spec) (da2b23@invoke-library (da2b19@find-library-by-spec/die da2c94@spec)))) (set! da2cd7@da2b27@invoke-library-by-spec da2b27@invoke-library-by-spec) (set! da2b29@installed-libraries (lambda da2c9c (let ((da2c9d (length da2c9c))) (if (= da2c9d '1) (apply (lambda (da2c96@all?) (let da2c9a@f ((da2c98@ls ((da2ab3@current-library-collection)))) (if (null? da2c98@ls) '() (if (or da2c96@all? (da2af1@library-visible? (car da2c98@ls))) (cons (car da2c98@ls) (da2c9a@f (cdr da2c98@ls))) (da2c9a@f (cdr da2c98@ls)))))) da2c9c) (if (= da2c9d '0) (apply (lambda () (da2b29@installed-libraries '#f)) da2c9c) (error 'apply '"invalid arg count")))))) (set! da2cd8@da2b29@installed-libraries da2b29@installed-libraries) (set! da2b2b@library-spec (lambda (da2c9e@x) (begin (if (not (da2abf@library? da2c9e@x)) (assertion-violation 'library-spec '"not a library" da2c9e@x) (void)) (list (da2ac1@library-id da2c9e@x) (da2ac5@library-name da2c9e@x) (da2ac9@library-version da2c9e@x))))) (set! da2cd9@da2b2b@library-spec da2b2b@library-spec) (void))
(begin (set! da2cdd@build-global-define (unspecified)) (set! da2d4e@build-lambda (unspecified)) (set! da2d50@build-case-lambda (unspecified)) (set! da2d7e@build-sequence (unspecified)) (set! da2d80@build-void (unspecified)) (set! da2d82@build-letrec (unspecified)) (set! da2d84@build-let (unspecified)) (set! da2d86@build-named-let (unspecified)) (set! da2d88@build-letrec* (unspecified)) (set! da2d8a@build-library-letrec* (unspecified)) (set! da2d8c@build-receive (unspecified)) (set! da2cdd@build-global-define (lambda (da2d8d@x) (da2d80@build-void))) (set! da2e21@da2cdd@build-global-define da2cdd@build-global-define) (set! da2d4e@build-lambda (lambda (da2d8f@ae da2d90@vars da2d91@exp) (list 'lambda da2d90@vars da2d91@exp))) (set! da2e22@da2d4e@build-lambda da2d4e@build-lambda) (set! da2d50@build-case-lambda (lambda (da2d95@ae da2d96@vars* da2d97@exp*) (let ((da2d9c@build-error '#f) (da2d9e@build-pred '#f) (da2da0@build-apply '#f) (da2da2@expand-case-lambda '#f)) (begin (set! da2d9c@build-error (lambda (da2dd3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! da2d9e@build-pred (lambda (da2dbb@ae da2dbc@n da2dbd@vars) (call-with-values (lambda () (let da2dc9@f ((da2dc5@vars da2dbd@vars) (da2dc6@count '0)) (if (pair? da2dc5@vars) (da2dc9@f (cdr da2dc5@vars) (+ da2dc6@count '1)) (if (null? da2dc5@vars) (values da2dc6@count '=) (values da2dc6@count '>=))))) (lambda (da2dcb@da2dc2 da2dcc@da2dc4) (let ((da2dcf@pred da2dcc@da2dc4) (da2dd0@count da2dcb@da2dc2)) (list (list 'primitive da2dcf@pred) da2dbc@n (list 'quote da2dd0@count))))))) (set! da2da0@build-apply (lambda (da2db3@ae da2db4@g da2db5@vars da2db6@exp) (list '(primitive apply) (da2d4e@build-lambda da2db3@ae da2db5@vars da2db6@exp) da2db4@g))) (set! da2da2@expand-case-lambda (lambda (da2da3@ae da2da4@vars da2da5@exp*) (let ((da2da9@g (gensym)) (da2daa@n (gensym))) (list 'lambda da2da9@g (da2d84@build-let da2da3@ae (list da2daa@n) (list (list '(primitive length) da2da9@g)) (let da2db1@f ((da2dad@vars* da2d96@vars*) (da2dae@exp* da2da5@exp*)) (if (null? da2dad@vars*) (da2d9c@build-error da2da3@ae) (list 'if (da2d9e@build-pred da2da3@ae da2daa@n (car da2dad@vars*)) (da2da0@build-apply da2da3@ae da2da9@g (car da2dad@vars*) (car da2dae@exp*)) (da2db1@f (cdr da2dad@vars*) (cdr da2dae@exp*)))))))))) (if (= (length da2d97@exp*) '1) (da2d4e@build-lambda da2d95@ae (car da2d96@vars*) (car da2d97@exp*)) (da2da2@expand-case-lambda da2d95@ae da2d96@vars* da2d97@exp*)))))) (set! da2e23@da2d50@build-case-lambda da2d50@build-case-lambda) (set! da2d7e@build-sequence (lambda (da2dd5@ae da2dd6@exps) (let da2ddb@loop ((da2dd9@exps da2dd6@exps)) (if (null? (cdr da2dd9@exps)) (car da2dd9@exps) (if (equal? (car da2dd9@exps) (da2d80@build-void)) (da2ddb@loop (cdr da2dd9@exps)) (cons 'begin da2dd9@exps)))))) (set! da2e24@da2d7e@build-sequence da2d7e@build-sequence) (set! da2d80@build-void (lambda () '((primitive void)))) (set! da2e25@da2d80@build-void da2d80@build-void) (set! da2d82@build-letrec (lambda (da2ddd@ae da2dde@vars da2ddf@val-exps da2de0@body-exp) (if (null? da2dde@vars) da2de0@body-exp (list 'letrec (map list da2dde@vars da2ddf@val-exps) da2de0@body-exp)))) (set! da2e26@da2d82@build-letrec da2d82@build-letrec) (set! da2d84@build-let (lambda (da2de5@ae da2de6@vars da2de7@val-exps da2de8@body-exp) (if (null? da2de6@vars) da2de8@body-exp (list 'let (map list da2de6@vars da2de7@val-exps) da2de8@body-exp)))) (set! da2e27@da2d84@build-let da2d84@build-let) (set! da2d86@build-named-let (lambda (da2ded@ae da2dee@name da2def@vars da2df0@val-exps da2df1@body-exp) (list 'let da2dee@name (map list da2def@vars da2df0@val-exps) da2df1@body-exp))) (set! da2e28@da2d86@build-named-let da2d86@build-named-let) (set! da2d88@build-letrec* (lambda (da2df7@ae da2df8@vars da2df9@val-exps da2dfa@body-exp) (if (null? da2df8@vars) da2dfa@body-exp (da2d84@build-let da2df7@ae da2df8@vars (map (lambda (da2dff@x) (list 'quote '#f)) da2df8@vars) (da2d7e@build-sequence da2df7@ae (append (map (lambda (da2e01@lhs da2e02@rhs) (list 'set! da2e01@lhs da2e02@rhs)) da2df8@vars da2df9@val-exps) (list da2dfa@body-exp))))))) (set! da2e29@da2d88@build-letrec* da2d88@build-letrec*) (set! da2d8a@build-library-letrec* (lambda (da2e05@ae da2e06@name da2e07@vars da2e08@locs da2e09@val-exps da2e0a@body-exp) (cons 'begin (append (map (lambda (da2e11@var) (cons 'set! (cons da2e11@var '((unspecified))))) da2e07@vars) (append (apply append (map (lambda (da2e13@var da2e14@loc da2e15@val-exp) (list (list 'set! da2e13@var da2e15@val-exp) (list 'set! da2e14@loc da2e13@var))) da2e07@vars da2e08@locs da2e09@val-exps)) (list da2e0a@body-exp)))))) (set! da2e2a@da2d8a@build-library-letrec* da2d8a@build-library-letrec*) (set! da2d8c@build-receive (lambda (da2e19@ae da2e1a@vars da2e1b@producer da2e1c@body*) (begin (display '"************** in ") (cons 'receive (cons da2e1a@vars (cons da2e1b@producer da2e1c@body*)))))) (set! da2e2b@da2d8c@build-receive da2d8c@build-receive) (void))
(begin (set! da2e3a@file-options-macro (unspecified)) (set! da2e3c@set-cons (unspecified)) (set! da2e3e@set-union (unspecified)) (set! da2e43@top-mark* (unspecified)) (set! da2e45@top-marked? (unspecified)) (set! da2e47@gen-lexical (unspecified)) (set! da2e49@gen-global (unspecified)) (set! da2e4b@gen-label (unspecified)) (set! da2e4d@gen-top-level-label (unspecified)) (set! da2e4f@gen-define-label+loc (unspecified)) (set! da2e51@gen-define-label (unspecified)) (set! da2e5b@rib? (unspecified)) (set! da2e5d@rib-sym* (unspecified)) (set! da2e5f@set-rib-sym*! (unspecified)) (set! da2e61@rib-mark** (unspecified)) (set! da2e63@set-rib-mark**! (unspecified)) (set! da2e65@rib-label* (unspecified)) (set! da2e67@set-rib-label*! (unspecified)) (set! da2e69@rib-sealed/freq (unspecified)) (set! da2e6b@set-rib-sealed/freq! (unspecified)) (set! da2e6d@rib-cache (unspecified)) (set! da2e6f@set-rib-cache! (unspecified)) (set! da2e71@dummy (unspecified)) (set! da2e73@make-empty-rib (unspecified)) (set! da2e75@extend-rib! (unspecified)) (set! da2e77@extend-rib/nc! (unspecified)) (set! da2e79@make-rib-map (unspecified)) (set! da2e7b@seal-rib! (unspecified)) (set! da2e7d@unseal-rib! (unspecified)) (set! da2e7f@make-full-rib (unspecified)) (set! da2e81@rp (unspecified)) (set! da2e8b@stx? (unspecified)) (set! da2e8d@stx-expr (unspecified)) (set! da2e8f@set-stx-expr! (unspecified)) (set! da2e91@stx-mark* (unspecified)) (set! da2e93@set-stx-mark*! (unspecified)) (set! da2e95@stx-subst* (unspecified)) (set! da2e97@set-stx-subst*! (unspecified)) (set! da2e99@stx-ae* (unspecified)) (set! da2e9b@set-stx-ae*! (unspecified)) (set! da2e9d@dummy (unspecified)) (set! da2e9f@datum->stx (unspecified)) (set! da2ea1@gen-mark (unspecified)) (set! da2ea3@anti-mark (unspecified)) (set! da2ea5@anti-mark? (unspecified)) (set! da2ea7@mkstx (unspecified)) (set! da2ea9@add-mark (unspecified)) (set! da2eab@add-subst (unspecified)) (set! da2ead@syntax-kind? (unspecified)) (set! da2eaf@syntax-vector->list (unspecified)) (set! da2eb1@syntax-pair? (unspecified)) (set! da2eb3@syntax-vector? (unspecified)) (set! da2eb5@syntax-null? (unspecified)) (set! da2eb7@syntax-list? (unspecified)) (set! da2eb9@syntax-car (unspecified)) (set! da2ebb@syntax-cdr (unspecified)) (set! da2ebd@syntax->list (unspecified)) (set! da2ebf@id? (unspecified)) (set! da2ec1@id->sym (unspecified)) (set! da2ec3@bound-id=? (unspecified)) (set! da2ec5@free-id=? (unspecified)) (set! da2ec7@valid-bound-ids? (unspecified)) (set! da2ec9@distinct-bound-ids? (unspecified)) (set! da2ecb@bound-id-member? (unspecified)) (set! da2ecd@self-evaluating? (unspecified)) (set! da2ecf@strip-annotations (unspecified)) (set! da2ed1@strip (unspecified)) (set! da2ed3@stx->datum (unspecified)) (set! da2ed5@id->label (unspecified)) (set! da2ed7@label->binding (unspecified)) (set! da2ed9@make-binding (unspecified)) (set! da2edb@binding-type (unspecified)) (set! da2edd@binding-value (unspecified)) (set! da2edf@raise-unbound-error (unspecified)) (set! da2ee1@syntax-type (unspecified)) (set! da2eef@sanitize-binding (unspecified)) (set! da2ef1@make-variable-transformer (unspecified)) (set! da2ef3@variable-transformer? (unspecified)) (set! da2ef5@variable-transformer-procedure (unspecified)) (set! da2ef7@make-eval-transformer (unspecified)) (set! da3048@parse-define (unspecified)) (set! da304a@parse-define-syntax (unspecified)) (set! da304c@scheme-stx-hashtable (unspecified)) (set! da304e@scheme-stx (unspecified)) (set! da3050@lexical-var (unspecified)) (set! da3052@lexical-mutable? (unspecified)) (set! da3054@set-lexical-mutable! (unspecified)) (set! da3056@add-lexical (unspecified)) (set! da3058@add-lexicals (unspecified)) (set! da305a@letrec-helper (unspecified)) (set! da305c@let-transformer (unspecified)) (set! da305e@letrec-transformer (unspecified)) (set! da3060@letrec*-transformer (unspecified)) (set! da3062@fluid-let-syntax-transformer (unspecified)) (set! da3064@type-descriptor-transformer (unspecified)) (set! da3066@record-type-descriptor-transformer (unspecified)) (set! da3068@record-constructor-descriptor-transformer (unspecified)) (set! da306a@when-macro (unspecified)) (set! da306c@unless-macro (unspecified)) (set! da306e@if-transformer (unspecified)) (set! da3070@and-transformer (unspecified)) (set! da3072@or-transformer (unspecified)) (set! da3074@case-macro (unspecified)) (set! da3076@quote-transformer (unspecified)) (set! da3078@case-lambda-transformer (unspecified)) (set! da307a@lambda-transformer (unspecified)) (set! da307c@bless (unspecified)) (set! da307e@with-syntax-macro (unspecified)) (set! da3080@invalid-fmls-error (unspecified)) (set! da3082@let-macro (unspecified)) (set! da3084@let-values-macro (unspecified)) (set! da3086@let*-values-macro (unspecified)) (set! da3088@trace-lambda-macro (unspecified)) (set! da308a@trace-define-macro (unspecified)) (set! da308c@trace-define-syntax-macro (unspecified)) (set! da308e@trace-let/rec-syntax (unspecified)) (set! da3090@trace-let-syntax-macro (unspecified)) (set! da3092@trace-letrec-syntax-macro (unspecified)) (set! da3094@guard-macro (unspecified)) (set! da3096@define-enumeration-macro (unspecified)) (set! da3098@time-macro (unspecified)) (set! da309a@delay-macro (unspecified)) (set! da309c@assert-macro (unspecified)) (set! da309e@endianness-macro (unspecified)) (set! da30a0@identifier-syntax-macro (unspecified)) (set! da30a2@do-macro (unspecified)) (set! da30a4@let*-macro (unspecified)) (set! da30a6@or-macro (unspecified)) (set! da30a8@and-macro (unspecified)) (set! da30aa@cond-macro (unspecified)) (set! da30ac@do-include (unspecified)) (set! da30ae@include-macro (unspecified)) (set! da30b0@include-into-macro (unspecified)) (set! da30b2@syntax-rules-macro (unspecified)) (set! da30b4@quasiquote-macro (unspecified)) (set! da30b6@quasisyntax-macro (unspecified)) (set! da30b8@define-struct-macro (unspecified)) (set! da30ba@define-record-type-macro (unspecified)) (set! da30bc@define-condition-type-macro (unspecified)) (set! da30be@incorrect-usage-macro (unspecified)) (set! da30c0@parameterize-macro (unspecified)) (set! da30c2@foreign-call-transformer (unspecified)) (set! da30c4@convert-pattern (unspecified)) (set! da30c6@syntax-dispatch (unspecified)) (set! da30c8@ellipsis? (unspecified)) (set! da30ca@underscore? (unspecified)) (set! da30cc@verify-literals (unspecified)) (set! da30ce@syntax-case-transformer (unspecified)) (set! da30d0@ellipsis-map (unspecified)) (set! da30d2@syntax-transformer (unspecified)) (set! da30d4@core-macro-transformer (unspecified)) (set! da30d6@symbol-macro (unspecified)) (set! da30d8@macro-transformer (unspecified)) (set! da30da@local-macro-transformer (unspecified)) (set! da30dc@do-macro-call (unspecified)) (set! da30de@chi-macro (unspecified)) (set! da30e0@chi-local-macro (unspecified)) (set! da30e2@chi-global-macro (unspecified)) (set! da30e4@chi-expr* (unspecified)) (set! da30e6@chi-application (unspecified)) (set! da30e8@chi-expr (unspecified)) (set! da30ea@chi-set! (unspecified)) (set! da30ec@verify-formals (unspecified)) (set! da30ee@chi-lambda-clause (unspecified)) (set! da30f0@chi-lambda-clause* (unspecified)) (set! da30f2@chi-defun (unspecified)) (set! da30f4@chi-rhs (unspecified)) (set! da30f6@expand-interaction-rhs*/init* (unspecified)) (set! da30f8@chi-rhs* (unspecified)) (set! da30fa@find-bound=? (unspecified)) (set! da30fc@find-dups (unspecified)) (set! da30fe@chi-internal (unspecified)) (set! da3100@parse-module (unspecified)) (set! da310a@module-interface? (unspecified)) (set! da310c@module-interface-first-mark (unspecified)) (set! da310e@set-module-interface-first-mark! (unspecified)) (set! da3110@module-interface-exp-id-vec (unspecified)) (set! da3112@set-module-interface-exp-id-vec! (unspecified)) (set! da3114@module-interface-exp-lab-vec (unspecified)) (set! da3116@set-module-interface-exp-lab-vec! (unspecified)) (set! da3118@dummy (unspecified)) (set! da311a@module-interface-exp-id* (unspecified)) (set! da311c@chi-internal-module (unspecified)) (set! da311e@chi-body* (unspecified)) (set! da3120@expand-transformer (unspecified)) (set! da3122@parse-exports (unspecified)) (set! da3124@parse-library-name (unspecified)) (set! da3126@parse-library (unspecified)) (set! da3128@parse-import-spec* (unspecified)) (set! da312a@make-top-rib (unspecified)) (set! da312c@make-collector (unspecified)) (set! da312e@inv-collector (unspecified)) (set! da3130@vis-collector (unspecified)) (set! da3132@imp-collector (unspecified)) (set! da3134@chi-library-internal (unspecified)) (set! da3136@chi-interaction-expr (unspecified)) (set! da3138@library-body-expander (unspecified)) (set! da313a@core-library-expander (unspecified)) (set! da313c@parse-top-level-program (unspecified)) (set! da313e@top-level-expander (unspecified)) (set! da3140@rp (unspecified)) (set! da314a@env? (unspecified)) (set! da314c@env-names (unspecified)) (set! da314e@set-env-names! (unspecified)) (set! da3150@env-labels (unspecified)) (set! da3152@set-env-labels! (unspecified)) (set! da3154@env-itc (unspecified)) (set! da3156@set-env-itc! (unspecified)) (set! da3158@dummy (unspecified)) (set! da315a@rp (unspecified)) (set! da3164@interaction-env? (unspecified)) (set! da3166@interaction-env-rib (unspecified)) (set! da3168@set-interaction-env-rib! (unspecified)) (set! da316a@interaction-env-r (unspecified)) (set! da316c@set-interaction-env-r! (unspecified)) (set! da316e@interaction-env-locs (unspecified)) (set! da3170@set-interaction-env-locs! (unspecified)) (set! da3172@dummy (unspecified)) (set! da3174@interaction-environment-symbols (unspecified)) (set! da3176@environment-bindings (unspecified)) (set! da3178@parse-binding (unspecified)) (set! da317a@environment? (unspecified)) (set! da317c@environment-symbols (unspecified)) (set! da317e@environment (unspecified)) (set! da3180@null-environment (unspecified)) (set! da3182@scheme-report-environment (unspecified)) (set! da3184@expand (unspecified)) (set! da3186@eval (unspecified)) (set! da3188@library-expander (unspecified)) (set! da318a@boot-library-expand (unspecified)) (set! da318c@rev-map-append (unspecified)) (set! da318e@build-exports (unspecified)) (set! da3190@make-export-subst (unspecified)) (set! da3192@make-export-env/macros (unspecified)) (set! da3194@generate-temporaries (unspecified)) (set! da3196@free-identifier=? (unspecified)) (set! da3198@bound-identifier=? (unspecified)) (set! da319a@make-source-condition (unspecified)) (set! da319c@extract-position-condition (unspecified)) (set! da319e@expression-position (unspecified)) (set! da31a0@assertion-error (unspecified)) (set! da31a2@syntax-error (unspecified)) (set! da31a4@syntax-violation* (unspecified)) (set! da31a6@syntax-violation (unspecified)) (set! da31a8@identifier? (unspecified)) (set! da31aa@datum->syntax (unspecified)) (set! da31ac@syntax->datum (unspecified)) (set! da31ae@ungensym-all (unspecified)) (set! da31b0@compile-r6rs-top-level (unspecified)) (set! da31b2@pre-compile-r6rs-top-level (unspecified)) (set! da31b4@interaction-environment (unspecified)) (set! da31b6@top-level-context (unspecified)) (set! da2e3a@file-options-macro (lambda (da31b7@x) (let ((da31ba@valid-option? '#f)) (begin (set! da31ba@valid-option? (lambda (da31c3@x) (and (da2ebf@id? da31c3@x) (memq (da2ec1@id->sym da31c3@x) '(no-fail no-create no-truncate))))) (let ((da31bb@t da31b7@x)) (let ((da31bd@ls/false (da30c6@syntax-dispatch da31bb@t '(_ . each-any)))) (if (and da31bd@ls/false (apply (lambda (da31bf@opt*) (for-all da31ba@valid-option? da31bf@opt*)) da31bd@ls/false)) (apply (lambda (da31c1@opt*) (da307c@bless (list 'make-file-options (list 'quote da31c1@opt*)))) da31bd@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da31bb@t)))))))) (set! da4b0d@da2e3a@file-options-macro da2e3a@file-options-macro) (set! da2e3c@set-cons (lambda (da31c5@x da31c6@ls) (if (memq da31c5@x da31c6@ls) da31c6@ls (cons da31c5@x da31c6@ls)))) (set! da4b0e@da2e3c@set-cons da2e3c@set-cons) (set! da2e3e@set-union (lambda (da31c9@ls1 da31ca@ls2) (if (null? da31c9@ls1) da31ca@ls2 (if (memq (car da31c9@ls1) da31ca@ls2) (da2e3e@set-union (cdr da31c9@ls1) da31ca@ls2) (cons (car da31c9@ls1) (da2e3e@set-union (cdr da31c9@ls1) da31ca@ls2)))))) (set! da4b0f@da2e3e@set-union da2e3e@set-union) (set! da2e43@top-mark* '(top)) (set! da4b10@da2e43@top-mark* da2e43@top-mark*) (set! da2e45@top-marked? (lambda (da31cd@m*) (memq 'top da31cd@m*))) (set! da4b11@da2e45@top-marked? da2e45@top-marked?) (set! da2e47@gen-lexical (lambda (da31cf@sym) (if (symbol? da31cf@sym) (gensym da31cf@sym) (if (da2e8b@stx? da31cf@sym) (da2e47@gen-lexical (da2ec1@id->sym da31cf@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" da31cf@sym))))) (set! da4b12@da2e47@gen-lexical da2e47@gen-lexical) (set! da2e49@gen-global (lambda (da31d1@x) (da2e47@gen-lexical da31d1@x))) (set! da4b13@da2e49@gen-global da2e49@gen-global) (set! da2e4b@gen-label (lambda (da31d3@_) (gensym))) (set! da4b14@da2e4b@gen-label da2e4b@gen-label) (set! da2e4d@gen-top-level-label (lambda (da31d5@id da31d6@rib) (let ((da31da@find '#f)) (begin (set! da31da@find (lambda (da31e5@sym da31e6@mark* da31e7@sym* da31e8@mark** da31e9@label*) (and (pair? da31e7@sym*) (if (and (eq? da31e5@sym (car da31e7@sym*)) (same-marks? da31e6@mark* (car da31e8@mark**))) (car da31e9@label*) (da31da@find da31e5@sym da31e6@mark* (cdr da31e7@sym*) (cdr da31e8@mark**) (cdr da31e9@label*)))))) (let ((da31db@sym (da2ec1@id->sym da31d5@id)) (da31dc@mark* (da2e91@stx-mark* da31d5@id))) (let ((da31df@sym* (da2e5d@rib-sym* da31d6@rib))) (let ((da31e1@t (and (memq da31db@sym (da2e5d@rib-sym* da31d6@rib)) (da31da@find da31db@sym da31dc@mark* da31df@sym* (da2e61@rib-mark** da31d6@rib) (da2e65@rib-label* da31d6@rib))))) (if da31e1@t ((lambda (da31e3@label) (if (da2cd4@da2b21@imported-label->binding da31e3@label) (gensym) da31e3@label)) da31e1@t) (gensym))))))))) (set! da4b15@da2e4d@gen-top-level-label da2e4d@gen-top-level-label) (set! da2e4f@gen-define-label+loc (lambda (da31ef@id da31f0@rib) (let ((da31f3@t (da31b6@top-level-context))) (if da31f3@t ((lambda (da31f5@env) (let ((da31f7@label (da2e4d@gen-top-level-label da31ef@id da31f0@rib)) (da31f8@locs (da316e@interaction-env-locs da31f5@env))) (values da31f7@label (let ((da31fb@t (assq da31f7@label da31f8@locs))) (if da31fb@t (cdr da31fb@t) (let ((da31fd@loc (da2e47@gen-lexical da31ef@id))) (begin (da3170@set-interaction-env-locs! da31f5@env (cons (cons da31f7@label da31fd@loc) da31f8@locs)) da31fd@loc))))))) da31f3@t) (values (gensym) (da2e47@gen-lexical da31ef@id)))))) (set! da4b16@da2e4f@gen-define-label+loc da2e4f@gen-define-label+loc) (set! da2e51@gen-define-label (lambda (da31ff@id da3200@rib) (if (da31b6@top-level-context) (da2e4d@gen-top-level-label da31ff@id da3200@rib) (gensym)))) (set! da4b17@da2e51@gen-define-label da2e51@gen-define-label) (set! da2e5b@rib? (lambda (da3203@x) (and (simple-struct? da3203@x) (eq? (simple-struct-name da3203@x) 'rib)))) (set! da4b18@da2e5b@rib? da2e5b@rib?) (set! da2e5d@rib-sym* (lambda (da3205@x) (simple-struct-ref da3205@x '0))) (set! da4b19@da2e5d@rib-sym* da2e5d@rib-sym*) (set! da2e5f@set-rib-sym*! (lambda (da3207@x da3208@val) (simple-struct-set! da3207@x '0 da3208@val))) (set! da4b1a@da2e5f@set-rib-sym*! da2e5f@set-rib-sym*!) (set! da2e61@rib-mark** (lambda (da320b@x) (simple-struct-ref da320b@x '1))) (set! da4b1b@da2e61@rib-mark** da2e61@rib-mark**) (set! da2e63@set-rib-mark**! (lambda (da320d@x da320e@val) (simple-struct-set! da320d@x '1 da320e@val))) (set! da4b1c@da2e63@set-rib-mark**! da2e63@set-rib-mark**!) (set! da2e65@rib-label* (lambda (da3211@x) (simple-struct-ref da3211@x '2))) (set! da4b1d@da2e65@rib-label* da2e65@rib-label*) (set! da2e67@set-rib-label*! (lambda (da3213@x da3214@val) (simple-struct-set! da3213@x '2 da3214@val))) (set! da4b1e@da2e67@set-rib-label*! da2e67@set-rib-label*!) (set! da2e69@rib-sealed/freq (lambda (da3217@x) (simple-struct-ref da3217@x '3))) (set! da4b1f@da2e69@rib-sealed/freq da2e69@rib-sealed/freq) (set! da2e6b@set-rib-sealed/freq! (lambda (da3219@x da321a@val) (simple-struct-set! da3219@x '3 da321a@val))) (set! da4b20@da2e6b@set-rib-sealed/freq! da2e6b@set-rib-sealed/freq!) (set! da2e6d@rib-cache (lambda (da321d@x) (simple-struct-ref da321d@x '4))) (set! da4b21@da2e6d@rib-cache da2e6d@rib-cache) (set! da2e6f@set-rib-cache! (lambda (da321f@x da3220@val) (simple-struct-set! da321f@x '4 da3220@val))) (set! da4b22@da2e6f@set-rib-cache! da2e6f@set-rib-cache!) (set! da2e71@dummy '3) (set! da4b23@da2e71@dummy da2e71@dummy) (set! da2e73@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! da4b24@da2e73@make-empty-rib da2e73@make-empty-rib) (set! da2e75@extend-rib! (lambda (da3223@rib da3224@id da3225@label) (let ((da322a@find '#f)) (begin (set! da322a@find (lambda (da3237@sym da3238@mark* da3239@sym* da323a@mark** da323b@label*) (and (pair? da3239@sym*) (if (and (eq? da3237@sym (car da3239@sym*)) (same-marks? da3238@mark* (car da323a@mark**))) da323b@label* (da322a@find da3237@sym da3238@mark* (cdr da3239@sym*) (cdr da323a@mark**) (cdr da323b@label*)))))) (begin (if (da2e69@rib-sealed/freq da3223@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" da3223@rib) (void)) (let ((da322b@sym (da2ec1@id->sym da3224@id)) (da322c@mark* (da2e91@stx-mark* da3224@id))) (let ((da322f@sym* (da2e5d@rib-sym* da3223@rib))) (let ((da3231@t (and (memq da322b@sym (da2e5d@rib-sym* da3223@rib)) (da322a@find da322b@sym da322c@mark* da322f@sym* (da2e61@rib-mark** da3223@rib) (da2e65@rib-label* da3223@rib))))) (if da3231@t ((lambda (da3233@p) (if (not (eq? da3225@label (car da3233@p))) (if (da31b6@top-level-context) (set-car! da3233@p da3225@label) (da31a6@syntax-violation '#f '"multiple definitions of identifier" da3224@id)) (void))) da3231@t) (begin (if (da2e6d@rib-cache da3223@rib) (hashtable-update! (da2e6d@rib-cache da3223@rib) da322b@sym (lambda (da3235@e) (cons (cons da322c@mark* da3225@label) da3235@e)) '()) (void)) (da2e5f@set-rib-sym*! da3223@rib (cons da322b@sym da322f@sym*)) (da2e63@set-rib-mark**! da3223@rib (cons da322c@mark* (da2e61@rib-mark** da3223@rib))) (da2e67@set-rib-label*! da3223@rib (cons da3225@label (da2e65@rib-label* da3223@rib))))))))))))) (set! da4b25@da2e75@extend-rib! da2e75@extend-rib!) (set! da2e77@extend-rib/nc! (lambda (da3241@rib da3242@id da3243@label) (let ((da3247@sym (da2ec1@id->sym da3242@id)) (da3248@mark* (da2e91@stx-mark* da3242@id))) (let ((da324b@sym* (da2e5d@rib-sym* da3241@rib))) (begin (if (da2e6d@rib-cache da3241@rib) (hashtable-update! (da2e6d@rib-cache da3241@rib) da3247@sym (lambda (da324d@e) (cons (cons da3248@mark* da3243@label) da324d@e)) '()) (void)) (da2e5f@set-rib-sym*! da3241@rib (cons da3247@sym da324b@sym*)) (da2e63@set-rib-mark**! da3241@rib (cons da3248@mark* (da2e61@rib-mark** da3241@rib))) (da2e67@set-rib-label*! da3241@rib (cons da3243@label (da2e65@rib-label* da3241@rib)))))))) (set! da4b26@da2e77@extend-rib/nc! da2e77@extend-rib/nc!) (set! da2e79@make-rib-map (lambda (da324f@sym*) (let ((da3251@ht (make-eq-hashtable))) (let da3257@f ((da3253@i '0) (da3254@sym* da324f@sym*)) (if (null? da3254@sym*) da3251@ht (begin (hashtable-update! da3251@ht (car da3254@sym*) (lambda (da3259@x) (cons da3253@i da3259@x)) '()) (da3257@f (+ da3253@i '1) (cdr da3254@sym*)))))))) (set! da4b27@da2e79@make-rib-map da2e79@make-rib-map) (set! da2e7b@seal-rib! (lambda (da325b@rib) (let ((da325d@sym* (da2e5d@rib-sym* da325b@rib))) (if (not (null? da325d@sym*)) (begin (da2e5f@set-rib-sym*! da325b@rib (list->vector da325d@sym*)) (da2e63@set-rib-mark**! da325b@rib (list->vector (da2e61@rib-mark** da325b@rib))) (da2e67@set-rib-label*! da325b@rib (list->vector (da2e65@rib-label* da325b@rib))) (da2e6b@set-rib-sealed/freq! da325b@rib (da2e79@make-rib-map da325d@sym*))) (void))))) (set! da4b28@da2e7b@seal-rib! da2e7b@seal-rib!) (set! da2e7d@unseal-rib! (lambda (da325f@rib) (if (da2e69@rib-sealed/freq da325f@rib) (begin (da2e6b@set-rib-sealed/freq! da325f@rib '#f) (da2e5f@set-rib-sym*! da325f@rib (vector->list (da2e5d@rib-sym* da325f@rib))) (da2e63@set-rib-mark**! da325f@rib (vector->list (da2e61@rib-mark** da325f@rib))) (da2e67@set-rib-label*! da325f@rib (vector->list (da2e65@rib-label* da325f@rib)))) (void)))) (set! da4b29@da2e7d@unseal-rib! da2e7d@unseal-rib!) (set! da2e7f@make-full-rib (lambda (da3261@id* da3262@label*) (let ((da3265@r (make-simple-struct 'rib '6 (list (map da2ec1@id->sym da3261@id*) (map da2e91@stx-mark* da3261@id*) da3262@label* '#f '#f)))) (begin (da2e7b@seal-rib! da3265@r) da3265@r)))) (set! da4b2a@da2e7f@make-full-rib da2e7f@make-full-rib) (set! da2e81@rp (da2a06@da28e1@make-record-printer 'stx (lambda (da3267@x da3268@p da3269@wr) (begin (display '"#<syntax " da3268@p) (write (da2ed3@stx->datum da3267@x) da3268@p) (let ((da326d@expr (da2e8d@stx-expr da3267@x))) (if (da29fd@da28cf@annotation? da326d@expr) (let ((da326f@src (da29fe@da28d1@annotation-source da326d@expr))) (if (pair? da326f@src) (begin (display '" [" da3268@p) (display (cdr da326f@src) da3268@p) (display '" of " da3268@p) (display (car da326f@src) da3268@p) (display '"]" da3268@p)) (void))) (void))) (display '">" da3268@p))))) (set! da4b2b@da2e81@rp da2e81@rp) (set! da2e8b@stx? (lambda (da3271@x) (and (simple-struct? da3271@x) (eq? (simple-struct-name da3271@x) 'stx)))) (set! da4b2c@da2e8b@stx? da2e8b@stx?) (set! da2e8d@stx-expr (lambda (da3273@x) (simple-struct-ref da3273@x '0))) (set! da4b2d@da2e8d@stx-expr da2e8d@stx-expr) (set! da2e8f@set-stx-expr! (lambda (da3275@x da3276@val) (simple-struct-set! da3275@x '0 da3276@val))) (set! da4b2e@da2e8f@set-stx-expr! da2e8f@set-stx-expr!) (set! da2e91@stx-mark* (lambda (da3279@x) (simple-struct-ref da3279@x '1))) (set! da4b2f@da2e91@stx-mark* da2e91@stx-mark*) (set! da2e93@set-stx-mark*! (lambda (da327b@x da327c@val) (simple-struct-set! da327b@x '1 da327c@val))) (set! da4b30@da2e93@set-stx-mark*! da2e93@set-stx-mark*!) (set! da2e95@stx-subst* (lambda (da327f@x) (simple-struct-ref da327f@x '2))) (set! da4b31@da2e95@stx-subst* da2e95@stx-subst*) (set! da2e97@set-stx-subst*! (lambda (da3281@x da3282@val) (simple-struct-set! da3281@x '2 da3282@val))) (set! da4b32@da2e97@set-stx-subst*! da2e97@set-stx-subst*!) (set! da2e99@stx-ae* (lambda (da3285@x) (simple-struct-ref da3285@x '3))) (set! da4b33@da2e99@stx-ae* da2e99@stx-ae*) (set! da2e9b@set-stx-ae*! (lambda (da3287@x da3288@val) (simple-struct-set! da3287@x '3 da3288@val))) (set! da4b34@da2e9b@set-stx-ae*! da2e9b@set-stx-ae*!) (set! da2e9d@dummy '3) (set! da4b35@da2e9d@dummy da2e9d@dummy) (set! da2e9f@datum->stx (lambda (da328b@id da328c@datum) (make-simple-struct 'stx '5 (list da328c@datum (da2e91@stx-mark* da328b@id) (da2e95@stx-subst* da328b@id) (da2e99@stx-ae* da328b@id))))) (set! da4b36@da2e9f@datum->stx da2e9f@datum->stx) (set! da2ea1@gen-mark (lambda () (string '#\m))) (set! da4b37@da2ea1@gen-mark da2ea1@gen-mark) (set! da2ea3@anti-mark '#f) (set! da4b38@da2ea3@anti-mark da2ea3@anti-mark) (set! da2ea5@anti-mark? not) (set! da4b39@da2ea5@anti-mark? da2ea5@anti-mark?) (set! da2ea7@mkstx (lambda (da328f@e da3290@m* da3291@s* da3292@ae*) (if (and (da2e8b@stx? da328f@e) (not (da2e45@top-marked? da3290@m*))) (call-with-values (lambda () (join-wraps da3290@m* da3291@s* da3292@ae* da328f@e)) (lambda (da329d@da3298 da329e@da329a da329f@da329c) (let ((da32a3@ae* da329f@da329c) (da32a4@s* da329e@da329a) (da32a5@m* da329d@da3298)) (make-simple-struct 'stx '5 (list (da2e8d@stx-expr da328f@e) da32a5@m* da32a4@s* da32a3@ae*))))) (make-simple-struct 'stx '5 (list da328f@e da3290@m* da3291@s* da3292@ae*))))) (set! da4b3a@da2ea7@mkstx da2ea7@mkstx) (set! da2ea9@add-mark (lambda (da32a9@m da32aa@e da32ab@ae) (da2ea7@mkstx da32aa@e (list da32a9@m) '(shift) (list da32ab@ae)))) (set! da4b3b@da2ea9@add-mark da2ea9@add-mark) (set! da2eab@add-subst (lambda (da32af@subst da32b0@e) (da2ea7@mkstx da32b0@e '() (list da32af@subst) '()))) (set! da4b3c@da2eab@add-subst da2eab@add-subst) (set! da2ead@syntax-kind? (lambda (da32b3@x da32b4@p?) (if (da2e8b@stx? da32b3@x) (da2ead@syntax-kind? (da2e8d@stx-expr da32b3@x) da32b4@p?) (if (da29fd@da28cf@annotation? da32b3@x) (da2ead@syntax-kind? (da29ff@da28d3@annotation-expression da32b3@x) da32b4@p?) (da32b4@p? da32b3@x))))) (set! da4b3d@da2ead@syntax-kind? da2ead@syntax-kind?) (set! da2eaf@syntax-vector->list (lambda (da32b7@x) (if (da2e8b@stx? da32b7@x) (let ((da32b9@ls (da2eaf@syntax-vector->list (da2e8d@stx-expr da32b7@x))) (da32ba@m* (da2e91@stx-mark* da32b7@x)) (da32bb@s* (da2e95@stx-subst* da32b7@x)) (da32bc@ae* (da2e99@stx-ae* da32b7@x))) (map (lambda (da32c1@x) (da2ea7@mkstx da32c1@x da32ba@m* da32bb@s* da32bc@ae*)) da32b9@ls)) (if (da29fd@da28cf@annotation? da32b7@x) (da2eaf@syntax-vector->list (da29ff@da28d3@annotation-expression da32b7@x)) (if (vector? da32b7@x) (vector->list da32b7@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" da32b7@x)))))) (set! da4b3e@da2eaf@syntax-vector->list da2eaf@syntax-vector->list) (set! da2eb1@syntax-pair? (lambda (da32c3@x) (da2ead@syntax-kind? da32c3@x pair?))) (set! da4b3f@da2eb1@syntax-pair? da2eb1@syntax-pair?) (set! da2eb3@syntax-vector? (lambda (da32c5@x) (da2ead@syntax-kind? da32c5@x vector?))) (set! da4b40@da2eb3@syntax-vector? da2eb3@syntax-vector?) (set! da2eb5@syntax-null? (lambda (da32c7@x) (da2ead@syntax-kind? da32c7@x null?))) (set! da4b41@da2eb5@syntax-null? da2eb5@syntax-null?) (set! da2eb7@syntax-list? (lambda (da32c9@x) (or (da2eb5@syntax-null? da32c9@x) (and (da2eb1@syntax-pair? da32c9@x) (da2eb7@syntax-list? (da2ebb@syntax-cdr da32c9@x)))))) (set! da4b42@da2eb7@syntax-list? da2eb7@syntax-list?) (set! da2eb9@syntax-car (lambda (da32cb@x) (if (da2e8b@stx? da32cb@x) (da2ea7@mkstx (da2eb9@syntax-car (da2e8d@stx-expr da32cb@x)) (da2e91@stx-mark* da32cb@x) (da2e95@stx-subst* da32cb@x) (da2e99@stx-ae* da32cb@x)) (if (da29fd@da28cf@annotation? da32cb@x) (da2eb9@syntax-car (da29ff@da28d3@annotation-expression da32cb@x)) (if (pair? da32cb@x) (car da32cb@x) (assertion-violation 'syntax-car '"BUG: not a pair" da32cb@x)))))) (set! da4b43@da2eb9@syntax-car da2eb9@syntax-car) (set! da2ebb@syntax-cdr (lambda (da32cd@x) (if (da2e8b@stx? da32cd@x) (da2ea7@mkstx (da2ebb@syntax-cdr (da2e8d@stx-expr da32cd@x)) (da2e91@stx-mark* da32cd@x) (da2e95@stx-subst* da32cd@x) (da2e99@stx-ae* da32cd@x)) (if (da29fd@da28cf@annotation? da32cd@x) (da2ebb@syntax-cdr (da29ff@da28d3@annotation-expression da32cd@x)) (if (pair? da32cd@x) (cdr da32cd@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" da32cd@x)))))) (set! da4b44@da2ebb@syntax-cdr da2ebb@syntax-cdr) (set! da2ebd@syntax->list (lambda (da32cf@x) (if (da2eb1@syntax-pair? da32cf@x) (cons (da2eb9@syntax-car da32cf@x) (da2ebd@syntax->list (da2ebb@syntax-cdr da32cf@x))) (if (da2eb5@syntax-null? da32cf@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" da32cf@x))))) (set! da4b45@da2ebd@syntax->list da2ebd@syntax->list) (set! da2ebf@id? (lambda (da32d1@x) (and (da2e8b@stx? da32d1@x) (symbol? (da2e8d@stx-expr da32d1@x))))) (set! da4b46@da2ebf@id? da2ebf@id?) (set! da2ec1@id->sym (lambda (da32d3@x) (da2e8d@stx-expr da32d3@x))) (set! da4b47@da2ec1@id->sym da2ec1@id->sym) (set! da2ec3@bound-id=? (lambda (da32d5@x da32d6@y) (and (eq? (da2ec1@id->sym da32d5@x) (da2ec1@id->sym da32d6@y)) (same-marks? (da2e91@stx-mark* da32d5@x) (da2e91@stx-mark* da32d6@y))))) (set! da4b48@da2ec3@bound-id=? da2ec3@bound-id=?) (set! da2ec5@free-id=? (lambda (da32d9@i da32da@j) (let ((da32dd@t0 (id->real-label da32d9@i)) (da32de@t1 (id->real-label da32da@j))) (if (or da32dd@t0 da32de@t1) (eq? da32dd@t0 da32de@t1) (eq? (da2ec1@id->sym da32d9@i) (da2ec1@id->sym da32da@j)))))) (set! da4b49@da2ec5@free-id=? da2ec5@free-id=?) (set! da2ec7@valid-bound-ids? (lambda (da32e1@id*) (and (for-all da2ebf@id? da32e1@id*) (da2ec9@distinct-bound-ids? da32e1@id*)))) (set! da4b4a@da2ec7@valid-bound-ids? da2ec7@valid-bound-ids?) (set! da2ec9@distinct-bound-ids? (lambda (da32e3@id*) (or (null? da32e3@id*) (and (not (da2ecb@bound-id-member? (car da32e3@id*) (cdr da32e3@id*))) (da2ec9@distinct-bound-ids? (cdr da32e3@id*)))))) (set! da4b4b@da2ec9@distinct-bound-ids? da2ec9@distinct-bound-ids?) (set! da2ecb@bound-id-member? (lambda (da32e5@id da32e6@id*) (and (pair? da32e6@id*) (or (da2ec3@bound-id=? da32e5@id (car da32e6@id*)) (da2ecb@bound-id-member? da32e5@id (cdr da32e6@id*)))))) (set! da4b4c@da2ecb@bound-id-member? da2ecb@bound-id-member?) (set! da2ecd@self-evaluating? (lambda (da32e9@x) (or (number? da32e9@x) (string? da32e9@x) (char? da32e9@x) (boolean? da32e9@x) (regexp? da32e9@x) (bytevector? da32e9@x)))) (set! da4b4d@da2ecd@self-evaluating? da2ecd@self-evaluating?) (set! da2ecf@strip-annotations (lambda (da32eb@x) (if (pair? da32eb@x) (cons (da2ecf@strip-annotations (car da32eb@x)) (da2ecf@strip-annotations (cdr da32eb@x))) (if (vector? da32eb@x) (vector-map da2ecf@strip-annotations da32eb@x) (if (da29fd@da28cf@annotation? da32eb@x) (da29fc@da28cd@annotation-stripped da32eb@x) da32eb@x))))) (set! da4b4e@da2ecf@strip-annotations da2ecf@strip-annotations) (set! da2ed1@strip (lambda (da32ed@x da32ee@m*) (if (da2e45@top-marked? da32ee@m*) (if (or (da29fd@da28cf@annotation? da32ed@x) (and (pair? da32ed@x) (da29fd@da28cf@annotation? (car da32ed@x))) (and (vector? da32ed@x) (> (vector-length da32ed@x) '0) (da29fd@da28cf@annotation? (vector-ref da32ed@x '0)))) (da2ecf@strip-annotations da32ed@x) da32ed@x) (let da32f3@f ((da32f1@x da32ed@x)) (if (da2e8b@stx? da32f1@x) (da2ed1@strip (da2e8d@stx-expr da32f1@x) (da2e91@stx-mark* da32f1@x)) (if (da29fd@da28cf@annotation? da32f1@x) (da29fc@da28cd@annotation-stripped da32f1@x) (if (pair? da32f1@x) (let ((da32f5@a (da32f3@f (car da32f1@x))) (da32f6@d (da32f3@f (cdr da32f1@x)))) (if (and (eq? da32f5@a (car da32f1@x)) (eq? da32f6@d (cdr da32f1@x))) da32f1@x (cons da32f5@a da32f6@d))) (if (vector? da32f1@x) (let ((da32f9@old (vector->list da32f1@x))) (let ((da32fb@new (map da32f3@f da32f9@old))) (if (for-all eq? da32f9@old da32fb@new) da32f1@x (list->vector da32fb@new)))) da32f1@x)))))))) (set! da4b4f@da2ed1@strip da2ed1@strip) (set! da2ed3@stx->datum (lambda (da32fd@x) (da2ed1@strip da32fd@x '()))) (set! da4b50@da2ed3@stx->datum da2ed3@stx->datum) (set! da2ed5@id->label (lambda (da32ff@id) (or (id->real-label da32ff@id) (let ((da3301@t (da31b6@top-level-context))) (if da3301@t ((lambda (da3303@env) (let ((da3305@rib (da3166@interaction-env-rib da3303@env))) (call-with-values (lambda () (da2e4f@gen-define-label+loc da32ff@id da3305@rib)) (lambda (da330b@da3308 da330c@da330a) (let ((da330f@loc_ da330c@da330a) (da3310@lab da330b@da3308)) (begin (da2e75@extend-rib! da3305@rib da32ff@id da3310@lab) da3310@lab)))))) da3301@t) '#f))))) (set! da4b51@da2ed5@id->label da2ed5@id->label) (set! da2ed7@label->binding (lambda (da3313@x da3314@r) (let ((da3317@t (da2cd4@da2b21@imported-label->binding da3313@x))) (if da3317@t ((lambda (da3319@b) (if (and (pair? da3319@b) (eq? (car da3319@b) '$core-rtd)) (cons '$rtd (map da307c@bless (cdr da3319@b))) (if (and (pair? da3319@b) (eq? (car da3319@b) 'global-rtd)) (let ((da331b@lib (cadr da3319@b)) (da331c@loc (cddr da3319@b))) (cons '$rtd (symbol-value da331c@loc))) da3319@b))) da3317@t) (let ((da331f@t (assq da3313@x da3314@r))) (if da331f@t (cdr da331f@t) (let ((da3321@t (da31b6@top-level-context))) (if da3321@t ((lambda (da3323@env) (let ((da3325@t (assq da3313@x (da316e@interaction-env-locs da3323@env)))) (if da3325@t ((lambda (da3327@p) (cons* 'lexical (cdr da3327@p) '#f)) da3325@t) '(displaced-lexical . #f)))) da3321@t) '(displaced-lexical . #f))))))))) (set! da4b52@da2ed7@label->binding da2ed7@label->binding) (set! da2ed9@make-binding cons) (set! da4b53@da2ed9@make-binding da2ed9@make-binding) (set! da2edb@binding-type car) (set! da4b54@da2edb@binding-type da2edb@binding-type) (set! da2edd@binding-value cdr) (set! da4b55@da2edd@binding-value da2edd@binding-value) (set! da2edf@raise-unbound-error (lambda (da3329@id) (da31a4@syntax-violation* '#f '"unbound identifier" da3329@id (da4f4b@da4d91@make-undefined-violation)))) (set! da4b56@da2edf@raise-unbound-error da2edf@raise-unbound-error) (set! da2ee1@syntax-type (lambda (da332b@e da332c@r) (if (da2ebf@id? da332b@e) (let ((da332f@id da332b@e)) (let ((da3331@label (da2ed5@id->label da332f@id))) (let ((da3333@b (da2ed7@label->binding da3331@label da332c@r))) (let ((da3335@type (da2edb@binding-type da3333@b))) (begin (if (not da3331@label) (da2edf@raise-unbound-error da332f@id) (void)) (let ((da3337@t da3335@type)) (if (memv da3337@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values da3335@type (da2edd@binding-value da3333@b) da332f@id) (values 'other '#f '#f)))))))) (if (da2eb1@syntax-pair? da332b@e) (let ((da3339@id (da2eb9@syntax-car da332b@e))) (if (da2ebf@id? da3339@id) (let ((da333b@label (da2ed5@id->label da3339@id))) (let ((da333d@b (da2ed7@label->binding da333b@label da332c@r))) (let ((da333f@type (da2edb@binding-type da333d@b))) (begin (if (not da333b@label) (da2edf@raise-unbound-error da3339@id) (void)) (let ((da3341@t da333f@type)) (if (memv da3341@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values da333f@type (da2edd@binding-value da333d@b) da3339@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((da3343@d (da2ed3@stx->datum da332b@e))) (if (da2ecd@self-evaluating? da3343@d) (values 'constant da3343@d '#f) (values 'other '#f '#f))))))) (set! da4b57@da2ee1@syntax-type da2ee1@syntax-type) (set! da2eef@sanitize-binding (lambda (da3345@x da3346@src) (if (procedure? da3345@x) (cons* 'local-macro da3345@x da3346@src) (if (and (pair? da3345@x) (eq? (car da3345@x) 'macro!) (procedure? (cdr da3345@x))) (cons* 'local-macro! (cdr da3345@x) da3346@src) (if (and (pair? da3345@x) (eq? (car da3345@x) '$rtd)) da3345@x (assertion-violation 'expand '"invalid transformer" da3345@x)))))) (set! da4b58@da2eef@sanitize-binding da2eef@sanitize-binding) (set! da2ef1@make-variable-transformer (lambda (da3349@x) (if (procedure? da3349@x) (cons 'macro! da3349@x) (assertion-violation 'make-variable-transformer '"not a procedure" da3349@x)))) (set! da4b59@da2ef1@make-variable-transformer da2ef1@make-variable-transformer) (set! da2ef3@variable-transformer? (lambda (da334b@x) (and (pair? da334b@x) (eq? (car da334b@x) 'macro!) (procedure? (cdr da334b@x))))) (set! da4b5a@da2ef3@variable-transformer? da2ef3@variable-transformer?) (set! da2ef5@variable-transformer-procedure (lambda (da334d@x) (if (da2ef3@variable-transformer? da334d@x) (cdr da334d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" da334d@x)))) (set! da4b5b@da2ef5@variable-transformer-procedure da2ef5@variable-transformer-procedure) (set! da2ef7@make-eval-transformer (lambda (da334f@x) (da2eef@sanitize-binding (eval-core (da2a5f@da2a17@expanded->core da334f@x)) da334f@x))) (set! da4b5c@da2ef7@make-eval-transformer da2ef7@make-eval-transformer) (set! da3048@parse-define (lambda (da3351@x) (let ((da3353@t da3351@x)) (let ((da3355@ls/false (da30c6@syntax-dispatch da3353@t '(_ (any . any) any . each-any)))) (if (and da3355@ls/false (apply (lambda (da3357@id da3358@fmls da3359@b da335a@b*) (da2ebf@id? da3357@id)) da3355@ls/false)) (apply (lambda (da335f@id da3360@fmls da3361@b da3362@b*) (begin (da30ec@verify-formals da3360@fmls da3351@x) (values da335f@id (cons 'defun (cons da3360@fmls (cons da3361@b da3362@b*)))))) da3355@ls/false) (let ((da3367@t da3353@t)) (let ((da3369@ls/false (da30c6@syntax-dispatch da3367@t '(_ any any)))) (if (and da3369@ls/false (apply (lambda (da336b@id da336c@val) (da2ebf@id? da336b@id)) da3369@ls/false)) (apply (lambda (da336f@id da3370@val) (values da336f@id (cons 'expr da3370@val))) da3369@ls/false) (let ((da3373@t da3367@t)) (let ((da3375@ls/false (da30c6@syntax-dispatch da3373@t '(_ any)))) (if (and da3375@ls/false (apply (lambda (da3377@id) (da2ebf@id? da3377@id)) da3375@ls/false)) (apply (lambda (da3379@id) (values da3379@id (cons 'expr (da307c@bless '(void))))) da3375@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3373@t)))))))))))) (set! da4b5d@da3048@parse-define da3048@parse-define) (set! da304a@parse-define-syntax (lambda (da337b@x) (let ((da337d@t da337b@x)) (let ((da337f@ls/false (da30c6@syntax-dispatch da337d@t '(_ any any)))) (if (and da337f@ls/false (apply (lambda (da3381@id da3382@val) (da2ebf@id? da3381@id)) da337f@ls/false)) (apply (lambda (da3385@id da3386@val) (values da3385@id da3386@val)) da337f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da337d@t)))))) (set! da4b5e@da304a@parse-define-syntax da304a@parse-define-syntax) (set! da304c@scheme-stx-hashtable (make-eq-hashtable)) (set! da4b5f@da304c@scheme-stx-hashtable da304c@scheme-stx-hashtable) (set! da304e@scheme-stx (lambda (da3389@sym) (or (hashtable-ref da304c@scheme-stx-hashtable da3389@sym '#f) (let ((da338b@subst (da2cb0@da2ad9@library-subst (da2cce@da2b15@find-library-by-name '(psyntax system $all))))) (let ((da338d@stx (make-simple-struct 'stx '5 (list da3389@sym da2e43@top-mark* '() '())))) (let ((da338f@stx (let ((da3391@t (assq da3389@sym da338b@subst))) (if da3391@t ((lambda (da3393@x) (let ((da3395@name (car da3393@x)) (da3396@label (cdr da3393@x))) (da2eab@add-subst (make-simple-struct 'rib '6 (list (list da3395@name) (list da2e43@top-mark*) (list da3396@label) '#f '#f)) da338d@stx))) da3391@t) da338d@stx)))) (begin (hashtable-set! da304c@scheme-stx-hashtable da3389@sym da338f@stx) da338f@stx))))))) (set! da4b60@da304e@scheme-stx da304e@scheme-stx) (set! da3050@lexical-var car) (set! da4b61@da3050@lexical-var da3050@lexical-var) (set! da3052@lexical-mutable? cdr) (set! da4b62@da3052@lexical-mutable? da3052@lexical-mutable?) (set! da3054@set-lexical-mutable! set-cdr!) (set! da4b63@da3054@set-lexical-mutable! da3054@set-lexical-mutable!) (set! da3056@add-lexical (lambda (da3399@lab da339a@lex da339b@r) (cons (cons* da3399@lab 'lexical da339a@lex '#f) da339b@r))) (set! da4b64@da3056@add-lexical da3056@add-lexical) (set! da3058@add-lexicals (lambda (da339f@lab* da33a0@lex* da33a1@r) (if (null? da339f@lab*) da33a1@r (da3058@add-lexicals (cdr da339f@lab*) (cdr da33a0@lex*) (da3056@add-lexical (car da339f@lab*) (car da33a0@lex*) da33a1@r))))) (set! da4b65@da3058@add-lexicals da3058@add-lexicals) (set! da305a@letrec-helper (lambda (da33a5@e da33a6@r da33a7@mr da33a8@build) (let ((da33ad@t da33a5@e)) (let ((da33af@ls/false (da30c6@syntax-dispatch da33ad@t '(_ #(each (any any)) any . each-any)))) (if da33af@ls/false (apply (lambda (da33b1@lhs* da33b2@rhs* da33b3@b da33b4@b*) (if (not (da2ec7@valid-bound-ids? da33b1@lhs*)) (da3080@invalid-fmls-error da33a5@e da33b1@lhs*) (let ((da33b9@lex* (map da2e47@gen-lexical da33b1@lhs*)) (da33ba@lab* (map da2e4b@gen-label da33b1@lhs*))) (let ((da33bd@rib (da2e7f@make-full-rib da33b1@lhs* da33ba@lab*)) (da33be@r (da3058@add-lexicals da33ba@lab* da33b9@lex* da33a6@r))) (let ((da33c1@body (da30fe@chi-internal (da2eab@add-subst da33bd@rib (cons da33b3@b da33b4@b*)) da33be@r da33a7@mr)) (da33c2@rhs* (da30e4@chi-expr* (map (lambda (da33c5@x) (da2eab@add-subst da33bd@rib da33c5@x)) da33b2@rhs*) da33be@r da33a7@mr))) (da33a8@build '#f da33b9@lex* da33c2@rhs* da33c1@body)))))) da33af@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da33ad@t)))))) (set! da4b66@da305a@letrec-helper da305a@letrec-helper) (set! da305c@let-transformer (lambda (da33c7@e da33c8@r da33c9@mr) (let ((da33cd@t da33c7@e)) (let ((da33cf@ls/false (da30c6@syntax-dispatch da33cd@t '(_ #(each (any any)) any . each-any)))) (if da33cf@ls/false (apply (lambda (da33d1@lhs* da33d2@rhs* da33d3@b da33d4@b*) (if (not (da2ec7@valid-bound-ids? da33d1@lhs*)) (da3080@invalid-fmls-error da33c7@e da33d1@lhs*) (let ((da33d9@lex* (map da2e47@gen-lexical da33d1@lhs*)) (da33da@lab* (map da2e4b@gen-label da33d1@lhs*)) (da33db@rhs* (da30e4@chi-expr* da33d2@rhs* da33c8@r da33c9@mr))) (let ((da33df@rib (da2e7f@make-full-rib da33d1@lhs* da33da@lab*)) (da33e0@r (da3058@add-lexicals da33da@lab* da33d9@lex* da33c8@r))) (let ((da33e3@body (da30fe@chi-internal (da2eab@add-subst da33df@rib (cons da33d3@b da33d4@b*)) da33e0@r da33c9@mr))) (da2e27@da2d84@build-let '#f da33d9@lex* da33db@rhs* da33e3@body)))))) da33cf@ls/false) (let ((da33e5@t da33cd@t)) (let ((da33e7@ls/false (da30c6@syntax-dispatch da33e5@t '(_ any #(each (any any)) any . each-any)))) (if da33e7@ls/false (apply (lambda (da33e9@loop da33ea@lhs* da33eb@rhs* da33ec@b da33ed@b*) (if (not (da2ec7@valid-bound-ids? da33ea@lhs*)) (da3080@invalid-fmls-error da33c7@e da33ea@lhs*) (let ((da33f3@lex* (map da2e47@gen-lexical da33ea@lhs*)) (da33f4@lab* (map da2e4b@gen-label da33ea@lhs*)) (da33f5@rhs* (da30e4@chi-expr* da33eb@rhs* da33c8@r da33c9@mr)) (da33f6@loop-lex (da2e47@gen-lexical da33e9@loop)) (da33f7@loop-lab (da2e4b@gen-label da33e9@loop))) (let ((da33fd@loop-rib (da2e7f@make-full-rib (list da33e9@loop) (list da33f7@loop-lab))) (da33fe@rib (da2e7f@make-full-rib da33ea@lhs* da33f4@lab*)) (da33ff@r (da3058@add-lexicals (cons da33f7@loop-lab da33f4@lab*) (cons da33f6@loop-lex da33f3@lex*) da33c8@r))) (let ((da3403@body (da30fe@chi-internal (da2eab@add-subst da33fd@loop-rib (da2eab@add-subst da33fe@rib (cons da33ec@b da33ed@b*))) da33ff@r da33c9@mr))) (da2e28@da2d86@build-named-let '#f da33f6@loop-lex da33f3@lex* da33f5@rhs* da3403@body)))))) da33e7@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da33e5@t))))))))) (set! da4b67@da305c@let-transformer da305c@let-transformer) (set! da305e@letrec-transformer (lambda (da3405@e da3406@r da3407@mr) (da305a@letrec-helper da3405@e da3406@r da3407@mr da2e26@da2d82@build-letrec))) (set! da4b68@da305e@letrec-transformer da305e@letrec-transformer) (set! da3060@letrec*-transformer (lambda (da340b@e da340c@r da340d@mr) (da305a@letrec-helper da340b@e da340c@r da340d@mr da2e29@da2d88@build-letrec*))) (set! da4b69@da3060@letrec*-transformer da3060@letrec*-transformer) (set! da3062@fluid-let-syntax-transformer (lambda (da3411@e da3412@r da3413@mr) (let ((da3418@lookup '#f)) (begin (set! da3418@lookup (lambda (da342b@x) (or (da2ed5@id->label da342b@x) (da31a6@syntax-violation '#f '"unbound identifier" da3411@e da342b@x)))) (let ((da3419@t da3411@e)) (let ((da341b@ls/false (da30c6@syntax-dispatch da3419@t '(_ #(each (any any)) any . each-any)))) (if da341b@ls/false (apply (lambda (da341d@lhs* da341e@rhs* da341f@b da3420@b*) (if (not (da2ec7@valid-bound-ids? da341d@lhs*)) (da3080@invalid-fmls-error da3411@e da341d@lhs*) (let ((da3425@lab* (map da3418@lookup da341d@lhs*)) (da3426@rhs* (map (lambda (da3429@x) (da2ef7@make-eval-transformer (da3120@expand-transformer da3429@x da3413@mr))) da341e@rhs*))) (da30fe@chi-internal (cons da341f@b da3420@b*) (append (map cons da3425@lab* da3426@rhs*) da3412@r) (append (map cons da3425@lab* da3426@rhs*) da3413@mr))))) da341b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3419@t)))))))) (set! da4b6a@da3062@fluid-let-syntax-transformer da3062@fluid-let-syntax-transformer) (set! da3064@type-descriptor-transformer (lambda (da342d@e da342e@r da342f@mr) (let ((da3433@t da342d@e)) (let ((da3435@ls/false (da30c6@syntax-dispatch da3433@t '(_ any)))) (if (and da3435@ls/false (apply (lambda (da3437@id) (da2ebf@id? da3437@id)) da3435@ls/false)) (apply (lambda (da3439@id) (let ((da343b@lab (da2ed5@id->label da3439@id))) (let ((da343d@b (da2ed7@label->binding da343b@lab da342e@r))) (let ((da343f@type (da2edb@binding-type da343d@b))) (begin (if (not da343b@lab) (da2edf@raise-unbound-error da3439@id) (void)) (if (not (and (eq? da343f@type '$rtd) (not (list? (da2edd@binding-value da343d@b))))) (da31a6@syntax-violation '#f '"not a record type" da342d@e) (void)) (list 'quote (da2edd@binding-value da343d@b))))))) da3435@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3433@t)))))) (set! da4b6b@da3064@type-descriptor-transformer da3064@type-descriptor-transformer) (set! da3066@record-type-descriptor-transformer (lambda (da3441@e da3442@r da3443@mr) (let ((da3447@t da3441@e)) (let ((da3449@ls/false (da30c6@syntax-dispatch da3447@t '(_ any)))) (if (and da3449@ls/false (apply (lambda (da344b@id) (da2ebf@id? da344b@id)) da3449@ls/false)) (apply (lambda (da344d@id) (let ((da344f@lab (da2ed5@id->label da344d@id))) (let ((da3451@b (da2ed7@label->binding da344f@lab da3442@r))) (let ((da3453@type (da2edb@binding-type da3451@b))) (begin (if (not da344f@lab) (da2edf@raise-unbound-error da344d@id) (void)) (if (not (and (eq? da3453@type '$rtd) (list? (da2edd@binding-value da3451@b)))) (da31a6@syntax-violation '#f '"not a record type" da3441@e) (void)) (da30e8@chi-expr (car (da2edd@binding-value da3451@b)) da3442@r da3443@mr)))))) da3449@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3447@t)))))) (set! da4b6c@da3066@record-type-descriptor-transformer da3066@record-type-descriptor-transformer) (set! da3068@record-constructor-descriptor-transformer (lambda (da3455@e da3456@r da3457@mr) (let ((da345b@t da3455@e)) (let ((da345d@ls/false (da30c6@syntax-dispatch da345b@t '(_ any)))) (if (and da345d@ls/false (apply (lambda (da345f@id) (da2ebf@id? da345f@id)) da345d@ls/false)) (apply (lambda (da3461@id) (let ((da3463@lab (da2ed5@id->label da3461@id))) (let ((da3465@b (da2ed7@label->binding da3463@lab da3456@r))) (let ((da3467@type (da2edb@binding-type da3465@b))) (begin (if (not da3463@lab) (da2edf@raise-unbound-error da3461@id) (void)) (if (not (and (eq? da3467@type '$rtd) (list? (da2edd@binding-value da3465@b)))) (da31a6@syntax-violation '#f '"invalid type" da3455@e) (void)) (da30e8@chi-expr (cadr (da2edd@binding-value da3465@b)) da3456@r da3457@mr)))))) da345d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da345b@t)))))) (set! da4b6d@da3068@record-constructor-descriptor-transformer da3068@record-constructor-descriptor-transformer) (set! da306a@when-macro (lambda (da3469@e) (let ((da346b@t da3469@e)) (let ((da346d@ls/false (da30c6@syntax-dispatch da346b@t '(_ any any . each-any)))) (if da346d@ls/false (apply (lambda (da346f@test da3470@e da3471@e*) (da307c@bless (list 'if da346f@test (cons 'begin (cons da3470@e da3471@e*))))) da346d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da346b@t)))))) (set! da4b6e@da306a@when-macro da306a@when-macro) (set! da306c@unless-macro (lambda (da3475@e) (let ((da3477@t da3475@e)) (let ((da3479@ls/false (da30c6@syntax-dispatch da3477@t '(_ any any . each-any)))) (if da3479@ls/false (apply (lambda (da347b@test da347c@e da347d@e*) (da307c@bless (list 'if (list 'not da347b@test) (cons 'begin (cons da347c@e da347d@e*))))) da3479@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3477@t)))))) (set! da4b6f@da306c@unless-macro da306c@unless-macro) (set! da306e@if-transformer (lambda (da3481@e da3482@r da3483@mr) (let ((da3487@t da3481@e)) (let ((da3489@ls/false (da30c6@syntax-dispatch da3487@t '(_ any any any)))) (if da3489@ls/false (apply (lambda (da348b@e0 da348c@e1 da348d@e2) (list 'if (da30e8@chi-expr da348b@e0 da3482@r da3483@mr) (da30e8@chi-expr da348c@e1 da3482@r da3483@mr) (da30e8@chi-expr da348d@e2 da3482@r da3483@mr))) da3489@ls/false) (let ((da3491@t da3487@t)) (let ((da3493@ls/false (da30c6@syntax-dispatch da3491@t '(_ any any)))) (if da3493@ls/false (apply (lambda (da3495@e0 da3496@e1) (list 'if (da30e8@chi-expr da3495@e0 da3482@r da3483@mr) (da30e8@chi-expr da3496@e1 da3482@r da3483@mr) (da2e25@da2d80@build-void))) da3493@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3491@t))))))))) (set! da4b70@da306e@if-transformer da306e@if-transformer) (set! da3070@and-transformer (lambda (da3499@e da349a@r da349b@mr) (let ((da349f@t da3499@e)) (let ((da34a1@ls/false (da30c6@syntax-dispatch da349f@t '(_ . each-any)))) (if da34a1@ls/false (apply (lambda (da34a3@e*) (cons 'and (da30e4@chi-expr* da34a3@e* da349a@r da349b@mr))) da34a1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da349f@t)))))) (set! da4b71@da3070@and-transformer da3070@and-transformer) (set! da3072@or-transformer (lambda (da34a5@e da34a6@r da34a7@mr) (let ((da34ab@t da34a5@e)) (let ((da34ad@ls/false (da30c6@syntax-dispatch da34ab@t '(_ . each-any)))) (if da34ad@ls/false (apply (lambda (da34af@e*) (cons 'or (da30e4@chi-expr* da34af@e* da34a6@r da34a7@mr))) da34ad@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34ab@t)))))) (set! da4b72@da3072@or-transformer da3072@or-transformer) (set! da3074@case-macro (lambda (da34b1@e) (let ((da34b4@build-last '#f) (da34b6@build-one '#f)) (begin (set! da34b4@build-last (lambda (da34db@cls) (let ((da34dd@t da34db@cls)) (let ((da34df@ls/false (da30c6@syntax-dispatch da34dd@t '(#(scheme-id else) any . each-any)))) (if da34df@ls/false (apply (lambda (da34e1@e da34e2@e*) (cons 'begin (cons da34e1@e da34e2@e*))) da34df@ls/false) (let ((da34e5@t da34dd@t)) (let ((da34e7@ls/false (da30c6@syntax-dispatch da34e5@t '_))) (if da34e7@ls/false (apply (lambda () (da34b6@build-one da34db@cls '(if #f #f))) da34e7@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34e5@t))))))))) (set! da34b6@build-one (lambda (da34cd@cls da34ce@k) (let ((da34d1@t da34cd@cls)) (let ((da34d3@ls/false (da30c6@syntax-dispatch da34d1@t '(each-any any . each-any)))) (if da34d3@ls/false (apply (lambda (da34d5@d* da34d6@e da34d7@e*) (list 'if (list 'memv 't (list 'quote da34d5@d*)) (cons 'begin (cons da34d6@e da34d7@e*)) da34ce@k)) da34d3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34d1@t)))))) (let ((da34b7@t da34b1@e)) (let ((da34b9@ls/false (da30c6@syntax-dispatch da34b7@t '(_ any)))) (if da34b9@ls/false (apply (lambda (da34bb@expr) (da307c@bless (cons 'let (cons (list (list 't da34bb@expr)) '((if #f #f)))))) da34b9@ls/false) (let ((da34bd@t da34b7@t)) (let ((da34bf@ls/false (da30c6@syntax-dispatch da34bd@t '(_ any any . each-any)))) (if da34bf@ls/false (apply (lambda (da34c1@expr da34c2@cls da34c3@cls*) (da307c@bless (list 'let (list (list 't da34c1@expr)) (let da34cb@f ((da34c7@cls da34c2@cls) (da34c8@cls* da34c3@cls*)) (if (null? da34c8@cls*) (da34b4@build-last da34c7@cls) (da34b6@build-one da34c7@cls (da34cb@f (car da34c8@cls*) (cdr da34c8@cls*)))))))) da34bf@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34bd@t))))))))))) (set! da4b73@da3074@case-macro da3074@case-macro) (set! da3076@quote-transformer (lambda (da34e9@e da34ea@r da34eb@mr) (let ((da34ef@t da34e9@e)) (let ((da34f1@ls/false (da30c6@syntax-dispatch da34ef@t '(_ any)))) (if da34f1@ls/false (apply (lambda (da34f3@datum) (list 'quote (da2ed3@stx->datum da34f3@datum))) da34f1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34ef@t)))))) (set! da4b74@da3076@quote-transformer da3076@quote-transformer) (set! da3078@case-lambda-transformer (lambda (da34f5@e da34f6@r da34f7@mr) (let ((da34fb@t da34f5@e)) (let ((da34fd@ls/false (da30c6@syntax-dispatch da34fb@t '(_ . #(each (any any . each-any)))))) (if da34fd@ls/false (apply (lambda (da34ff@fmls* da3500@b* da3501@b**) (call-with-values (lambda () (da30f0@chi-lambda-clause* da34f5@e da34ff@fmls* (map cons da3500@b* da3501@b**) da34f6@r da34f7@mr)) (lambda (da3509@da3506 da350a@da3508) (let ((da350d@body* da350a@da3508) (da350e@fmls* da3509@da3506)) (da2e23@da2d50@build-case-lambda '#f da350e@fmls* da350d@body*))))) da34fd@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da34fb@t)))))) (set! da4b75@da3078@case-lambda-transformer da3078@case-lambda-transformer) (set! da307a@lambda-transformer (lambda (da3511@e da3512@r da3513@mr) (let ((da3517@t da3511@e)) (let ((da3519@ls/false (da30c6@syntax-dispatch da3517@t '(_ any any . each-any)))) (if da3519@ls/false (apply (lambda (da351b@fmls da351c@b da351d@b*) (call-with-values (lambda () (da30ee@chi-lambda-clause da3511@e da351b@fmls (cons da351c@b da351d@b*) da3512@r da3513@mr)) (lambda (da3525@da3522 da3526@da3524) (let ((da3529@body da3526@da3524) (da352a@fmls da3525@da3522)) (da2e22@da2d4e@build-lambda '#f da352a@fmls da3529@body))))) da3519@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3517@t)))))) (set! da4b76@da307a@lambda-transformer da307a@lambda-transformer) (set! da307c@bless (lambda (da352d@x) (da2ea7@mkstx (let da3531@f ((da352f@x da352d@x)) (if (da2e8b@stx? da352f@x) da352f@x (if (pair? da352f@x) (cons (da3531@f (car da352f@x)) (da3531@f (cdr da352f@x))) (if (symbol? da352f@x) (da304e@scheme-stx da352f@x) (if (vector? da352f@x) (vector-map da3531@f da352f@x) da352f@x))))) '() '() '()))) (set! da4b77@da307c@bless da307c@bless) (set! da307e@with-syntax-macro (lambda (da3533@e) (let ((da3535@t da3533@e)) (let ((da3537@ls/false (da30c6@syntax-dispatch da3535@t '(_ #(each (any any)) any . each-any)))) (if da3537@ls/false (apply (lambda (da3539@pat* da353a@expr* da353b@b da353c@b*) (let ((da3541@idn* (let da3545@f ((da3543@pat* da3539@pat*)) (if (null? da3543@pat*) '() (call-with-values (lambda () (da30c4@convert-pattern (car da3543@pat*) '())) (lambda (da354b@da3548 da354c@da354a) (let ((da354f@idn* da354c@da354a) (da3550@pat da354b@da3548)) (append da354f@idn* (da3545@f (cdr da3543@pat*)))))))))) (begin (da30ec@verify-formals (map car da3541@idn*) da3533@e) (let ((da3553@t* (da3194@generate-temporaries da353a@expr*))) (da307c@bless (list 'let (map list da3553@t* da353a@expr*) (let da3559@f ((da3555@pat* da3539@pat*) (da3556@t* da3553@t*)) (if (null? da3555@pat*) (cons 'begin (cons '#f (cons da353b@b da353c@b*))) (list 'syntax-case (car da3556@t*) '() (list (car da3555@pat*) (da3559@f (cdr da3555@pat*) (cdr da3556@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car da3555@pat*)) (car da3556@t*)))))))))))) da3537@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3535@t)))))) (set! da4b78@da307e@with-syntax-macro da307e@with-syntax-macro) (set! da3080@invalid-fmls-error (lambda (da355b@stx da355c@fmls) (let ((da355f@t da355c@fmls)) (let ((da3561@ls/false (da30c6@syntax-dispatch da355f@t '#(each+ any () any)))) (if da3561@ls/false (apply (lambda (da3563@id* da3564@last) (let da3569@f ((da3567@id* (if (da2ebf@id? da3564@last) (cons da3564@last da3563@id*) (if (da2eb5@syntax-null? da3564@last) da3563@id* (da31a6@syntax-violation '#f '"not an identifier" da355b@stx da3564@last))))) (if (null? da3567@id*) (values) (if (not (da2ebf@id? (car da3567@id*))) (da31a6@syntax-violation '#f '"not an identifier" da355b@stx (car da3567@id*)) (begin (da3569@f (cdr da3567@id*)) (if (da2ecb@bound-id-member? (car da3567@id*) (cdr da3567@id*)) (da31a6@syntax-violation '#f '"duplicate binding" da355b@stx (car da3567@id*)) (void))))))) da3561@ls/false) (let ((da356b@t da355f@t)) (let ((da356d@ls/false (da30c6@syntax-dispatch da356b@t '_))) (if da356d@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"malformed binding form" da355b@stx da355c@fmls)) da356d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da356b@t))))))))) (set! da4b79@da3080@invalid-fmls-error da3080@invalid-fmls-error) (set! da3082@let-macro (lambda (da356f@stx) (let ((da3571@t da356f@stx)) (let ((da3573@ls/false (da30c6@syntax-dispatch da3571@t '(_ #(each (any any)) any . each-any)))) (if da3573@ls/false (apply (lambda (da3575@lhs* da3576@rhs* da3577@b da3578@b*) (if (da2ec7@valid-bound-ids? da3575@lhs*) (da307c@bless (cons (cons 'lambda (cons da3575@lhs* (cons da3577@b da3578@b*))) da3576@rhs*)) (da3080@invalid-fmls-error da356f@stx da3575@lhs*))) da3573@ls/false) (let ((da357d@t da3571@t)) (let ((da357f@ls/false (da30c6@syntax-dispatch da357d@t '(_ any #(each (any any)) any . each-any)))) (if (and da357f@ls/false (apply (lambda (da3581@f da3582@lhs* da3583@rhs* da3584@b da3585@b*) (da2ebf@id? da3581@f)) da357f@ls/false)) (apply (lambda (da358b@f da358c@lhs* da358d@rhs* da358e@b da358f@b*) (if (da2ec7@valid-bound-ids? da358c@lhs*) (da307c@bless (cons (list 'letrec (list (list da358b@f (cons 'lambda (cons da358c@lhs* (cons da358e@b da358f@b*))))) da358b@f) da358d@rhs*)) (da3080@invalid-fmls-error da356f@stx da358c@lhs*))) da357f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da357d@t))))))))) (set! da4b7a@da3082@let-macro da3082@let-macro) (set! da3084@let-values-macro (lambda (da3595@stx) (let ((da3598@rename '#f) (da359a@rename* '#f)) (begin (set! da3598@rename (lambda (da35fd@x da35fe@old* da35ff@new*) (begin (if (not (da2ebf@id? da35fd@x)) (da31a6@syntax-violation '#f '"not an indentifier" da3595@stx da35fd@x) (void)) (if (da2ecb@bound-id-member? da35fd@x da35fe@old*) (da31a6@syntax-violation '#f '"duplicate binding" da3595@stx da35fd@x) (void)) (let ((da3603@y (gensym (da31ac@syntax->datum da35fd@x)))) (values da3603@y (cons da35fd@x da35fe@old*) (cons da3603@y da35ff@new*)))))) (set! da359a@rename* (lambda (da35eb@x* da35ec@old* da35ed@new*) (if (null? da35eb@x*) (values '() da35ec@old* da35ed@new*) (call-with-values (lambda () (da3598@rename (car da35eb@x*) da35ec@old* da35ed@new*)) (lambda (da35f1@x da35f2@old* da35f3@new*) (call-with-values (lambda () (da359a@rename* (cdr da35eb@x*) da35f2@old* da35f3@new*)) (lambda (da35f7@x* da35f8@old* da35f9@new*) (values (cons da35f1@x da35f7@x*) da35f8@old* da35f9@new*)))))))) (let ((da359b@t da3595@stx)) (let ((da359d@ls/false (da30c6@syntax-dispatch da359b@t '(_ () any . each-any)))) (if da359d@ls/false (apply (lambda (da359f@b da35a0@b*) (cons* (da307c@bless 'let) '() da359f@b da35a0@b*)) da359d@ls/false) (let ((da35a3@t da359b@t)) (let ((da35a5@ls/false (da30c6@syntax-dispatch da35a3@t '(_ #(each (any any)) any . each-any)))) (if da35a5@ls/false (apply (lambda (da35a7@lhs* da35a8@rhs* da35a9@b da35aa@b*) (da307c@bless (let da35b7@f ((da35af@lhs* da35a7@lhs*) (da35b0@rhs* da35a8@rhs*) (da35b1@old* '()) (da35b2@new* '())) (if (null? da35af@lhs*) (cons 'let (cons (map list da35b1@old* da35b2@new*) (cons da35a9@b da35aa@b*))) (let ((da35b9@t (car da35af@lhs*))) (let ((da35bb@ls/false (da30c6@syntax-dispatch da35b9@t 'each-any))) (if da35bb@ls/false (apply (lambda (da35bd@x*) (call-with-values (lambda () (da359a@rename* da35bd@x* da35b1@old* da35b2@new*)) (lambda (da35c5@da35c0 da35c6@da35c2 da35c7@da35c4) (let ((da35cb@new* da35c7@da35c4) (da35cc@old* da35c6@da35c2) (da35cd@y* da35c5@da35c0)) (list 'call-with-values (list 'lambda '() (car da35b0@rhs*)) (list 'lambda da35cd@y* (da35b7@f (cdr da35af@lhs*) (cdr da35b0@rhs*) da35cc@old* da35cb@new*))))))) da35bb@ls/false) (let ((da35d1@t da35b9@t)) (let ((da35d3@ls/false (da30c6@syntax-dispatch da35d1@t '#(each+ any () any)))) (if da35d3@ls/false (apply (lambda (da35d5@x* da35d6@x) (call-with-values (lambda () (da3598@rename da35d6@x da35b1@old* da35b2@new*)) (lambda (da35d9@y da35da@old* da35db@new*) (call-with-values (lambda () (da359a@rename* da35d5@x* da35da@old* da35db@new*)) (lambda (da35df@y* da35e0@old* da35e1@new*) (list 'call-with-values (list 'lambda '() (car da35b0@rhs*)) (list 'lambda (append da35df@y* da35d9@y) (da35b7@f (cdr da35af@lhs*) (cdr da35b0@rhs*) da35e0@old* da35e1@new*)))))))) da35d3@ls/false) (let ((da35e5@t da35d1@t)) (let ((da35e7@ls/false (da30c6@syntax-dispatch da35e5@t 'any))) (if da35e7@ls/false (apply (lambda (da35e9@others) (da31a6@syntax-violation '#f '"malformed bindings" da3595@stx da35e9@others)) da35e7@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da35e5@t)))))))))))))) da35a5@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da35a3@t))))))))))) (set! da4b7b@da3084@let-values-macro da3084@let-values-macro) (set! da3086@let*-values-macro (lambda (da3605@stx) (let ((da3608@check '#f)) (begin (set! da3608@check (lambda (da3637@x*) (if (not (null? da3637@x*)) (let ((da3639@x (car da3637@x*))) (begin (if (not (da2ebf@id? da3639@x)) (da31a6@syntax-violation '#f '"not an identifier" da3605@stx da3639@x) (void)) (da3608@check (cdr da3637@x*)) (if (da2ecb@bound-id-member? da3639@x (cdr da3637@x*)) (da31a6@syntax-violation '#f '"duplicate identifier" da3605@stx da3639@x) (void)))) (void)))) (let ((da3609@t da3605@stx)) (let ((da360b@ls/false (da30c6@syntax-dispatch da3609@t '(_ () any . each-any)))) (if da360b@ls/false (apply (lambda (da360d@b da360e@b*) (cons* (da307c@bless 'let) '() da360d@b da360e@b*)) da360b@ls/false) (let ((da3611@t da3609@t)) (let ((da3613@ls/false (da30c6@syntax-dispatch da3611@t '(_ #(each (any any)) any . each-any)))) (if da3613@ls/false (apply (lambda (da3615@lhs* da3616@rhs* da3617@b da3618@b*) (da307c@bless (let da3621@f ((da361d@lhs* da3615@lhs*) (da361e@rhs* da3616@rhs*)) (if (null? da361d@lhs*) (cons 'begin (cons da3617@b da3618@b*)) (let ((da3623@t (car da361d@lhs*))) (let ((da3625@ls/false (da30c6@syntax-dispatch da3623@t 'each-any))) (if da3625@ls/false (apply (lambda (da3627@x*) (begin (da3608@check da3627@x*) (list 'call-with-values (list 'lambda '() (car da361e@rhs*)) (list 'lambda da3627@x* (da3621@f (cdr da361d@lhs*) (cdr da361e@rhs*)))))) da3625@ls/false) (let ((da3629@t da3623@t)) (let ((da362b@ls/false (da30c6@syntax-dispatch da3629@t '#(each+ any () any)))) (if da362b@ls/false (apply (lambda (da362d@x* da362e@x) (begin (da3608@check (cons da362e@x da362d@x*)) (list 'call-with-values (list 'lambda '() (car da361e@rhs*)) (list 'lambda (append da362d@x* da362e@x) (da3621@f (cdr da361d@lhs*) (cdr da361e@rhs*)))))) da362b@ls/false) (let ((da3631@t da3629@t)) (let ((da3633@ls/false (da30c6@syntax-dispatch da3631@t 'any))) (if da3633@ls/false (apply (lambda (da3635@others) (da31a6@syntax-violation '#f '"malformed bindings" da3605@stx da3635@others)) da3633@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3631@t)))))))))))))) da3613@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3611@t))))))))))) (set! da4b7c@da3086@let*-values-macro da3086@let*-values-macro) (set! da3088@trace-lambda-macro (lambda (da363b@stx) (let ((da363d@t da363b@stx)) (let ((da363f@ls/false (da30c6@syntax-dispatch da363d@t '(_ any each-any any . each-any)))) (if da363f@ls/false (apply (lambda (da3641@who da3642@fmls da3643@b da3644@b*) (if (da2ec7@valid-bound-ids? da3642@fmls) (da307c@bless (list 'make-traced-procedure (list 'quote da3641@who) (cons 'lambda (cons da3642@fmls (cons da3643@b da3644@b*))))) (da3080@invalid-fmls-error da363b@stx da3642@fmls))) da363f@ls/false) (let ((da3649@t da363d@t)) (let ((da364b@ls/false (da30c6@syntax-dispatch da3649@t '(_ any #(each+ any () any) any . each-any)))) (if da364b@ls/false (apply (lambda (da364d@who da364e@fmls da364f@last da3650@b da3651@b*) (if (da2ec7@valid-bound-ids? (cons da364f@last da364e@fmls)) (da307c@bless (list 'make-traced-procedure (list 'quote da364d@who) (cons 'lambda (cons (append da364e@fmls da364f@last) (cons da3650@b da3651@b*))))) (da3080@invalid-fmls-error da363b@stx (append da364e@fmls da364f@last)))) da364b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3649@t))))))))) (set! da4b7d@da3088@trace-lambda-macro da3088@trace-lambda-macro) (set! da308a@trace-define-macro (lambda (da3657@stx) (let ((da3659@t da3657@stx)) (let ((da365b@ls/false (da30c6@syntax-dispatch da3659@t '(_ (any . each-any) any . each-any)))) (if da365b@ls/false (apply (lambda (da365d@who da365e@fmls da365f@b da3660@b*) (if (da2ec7@valid-bound-ids? da365e@fmls) (da307c@bless (list 'define da365d@who (list 'make-traced-procedure (list 'quote da365d@who) (cons 'lambda (cons da365e@fmls (cons da365f@b da3660@b*)))))) (da3080@invalid-fmls-error da3657@stx da365e@fmls))) da365b@ls/false) (let ((da3665@t da3659@t)) (let ((da3667@ls/false (da30c6@syntax-dispatch da3665@t '(_ (any . #(each+ any () any)) any . each-any)))) (if da3667@ls/false (apply (lambda (da3669@who da366a@fmls da366b@last da366c@b da366d@b*) (if (da2ec7@valid-bound-ids? (cons da366b@last da366a@fmls)) (da307c@bless (list 'define da3669@who (list 'make-traced-procedure (list 'quote da3669@who) (cons 'lambda (cons (append da366a@fmls da366b@last) (cons da366c@b da366d@b*)))))) (da3080@invalid-fmls-error da3657@stx (append da366a@fmls da366b@last)))) da3667@ls/false) (let ((da3673@t da3665@t)) (let ((da3675@ls/false (da30c6@syntax-dispatch da3673@t '(_ any any)))) (if da3675@ls/false (apply (lambda (da3677@who da3678@expr) (if (da2ebf@id? da3677@who) (da307c@bless (list 'define da3677@who (list 'let (list (list 'v da3678@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote da3677@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (da31a6@syntax-violation '#f '"invalid name" da3657@stx))) da3675@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3673@t)))))))))))) (set! da4b7e@da308a@trace-define-macro da308a@trace-define-macro) (set! da308c@trace-define-syntax-macro (lambda (da367b@stx) (let ((da367d@t da367b@stx)) (let ((da367f@ls/false (da30c6@syntax-dispatch da367d@t '(_ any any)))) (if da367f@ls/false (apply (lambda (da3681@who da3682@expr) (if (da2ebf@id? da3681@who) (da307c@bless (list 'define-syntax da3681@who (list 'make-traced-macro (list 'quote da3681@who) da3682@expr))) (da31a6@syntax-violation '#f '"invalid name" da367b@stx))) da367f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da367d@t)))))) (set! da4b7f@da308c@trace-define-syntax-macro da308c@trace-define-syntax-macro) (set! da308e@trace-let/rec-syntax (lambda (da3685@who) (lambda (da3687@stx) (let ((da3689@t da3687@stx)) (let ((da368b@ls/false (da30c6@syntax-dispatch da3689@t '(_ #(each (any any)) any . each-any)))) (if da368b@ls/false (apply (lambda (da368d@lhs* da368e@rhs* da368f@b da3690@b*) (if (da2ec7@valid-bound-ids? da368d@lhs*) (let ((da3695@rhs* (map (lambda (da3697@lhs da3698@rhs) (list 'make-traced-macro (list 'quote da3697@lhs) da3698@rhs)) da368d@lhs* da368e@rhs*))) (da307c@bless (cons da3685@who (cons (map list da368d@lhs* da3695@rhs*) (cons da368f@b da3690@b*))))) (da3080@invalid-fmls-error da3687@stx da368d@lhs*))) da368b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3689@t))))))) (set! da4b80@da308e@trace-let/rec-syntax da308e@trace-let/rec-syntax) (set! da3090@trace-let-syntax-macro (da308e@trace-let/rec-syntax 'let-syntax)) (set! da4b81@da3090@trace-let-syntax-macro da3090@trace-let-syntax-macro) (set! da3092@trace-letrec-syntax-macro (da308e@trace-let/rec-syntax 'letrec-syntax)) (set! da4b82@da3092@trace-letrec-syntax-macro da3092@trace-letrec-syntax-macro) (set! da3094@guard-macro (lambda (da369b@x) (let ((da369e@gen-clauses '#f)) (begin (set! da369e@gen-clauses (lambda (da36b5@con da36b6@outerk da36b7@clause*) (let ((da36bc@f '#f) (da36be@f* '#f)) (begin (set! da36bc@f (lambda (da36f5@x da36f6@k) (let ((da36f9@t da36f5@x)) (let ((da36fb@ls/false (da30c6@syntax-dispatch da36f9@t '(any #(scheme-id =>) any)))) (if da36fb@ls/false (apply (lambda (da36fd@e da36fe@p) (let ((da3701@t (gensym))) (list 'let (list (list da3701@t da36fd@e)) (list 'if da3701@t (list da36fe@p da3701@t) da36f6@k)))) da36fb@ls/false) (let ((da3703@t da36f9@t)) (let ((da3705@ls/false (da30c6@syntax-dispatch da3703@t '(any)))) (if da3705@ls/false (apply (lambda (da3707@e) (let ((da3709@t (gensym))) (list 'let (list (list da3709@t da3707@e)) (list 'if da3709@t da3709@t da36f6@k)))) da3705@ls/false) (let ((da370b@t da3703@t)) (let ((da370d@ls/false (da30c6@syntax-dispatch da370b@t '(any any . each-any)))) (if da370d@ls/false (apply (lambda (da370f@e da3710@v da3711@v*) (list 'if da370f@e (cons 'begin (cons da3710@v da3711@v*)) da36f6@k)) da370d@ls/false) (let ((da3715@t da370b@t)) (let ((da3717@ls/false (da30c6@syntax-dispatch da3715@t '_))) (if da3717@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid guard clause" da36f5@x)) da3717@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3715@t))))))))))))))) (set! da36be@f* (lambda (da36cb@x*) (let ((da36cd@t da36cb@x*)) (let ((da36cf@ls/false (da30c6@syntax-dispatch da36cd@t '()))) (if da36cf@ls/false (apply (lambda () (let ((da36d1@g (gensym))) (values (list da36d1@g (list 'lambda '() (list 'raise-continuable da36b5@con))) da36d1@g))) da36cf@ls/false) (let ((da36d3@t da36cd@t)) (let ((da36d5@ls/false (da30c6@syntax-dispatch da36d3@t '((#(scheme-id else) any . each-any))))) (if da36d5@ls/false (apply (lambda (da36d7@e da36d8@e*) (values (cons 'begin (cons da36d7@e da36d8@e*)) '#f)) da36d5@ls/false) (let ((da36db@t da36d3@t)) (let ((da36dd@ls/false (da30c6@syntax-dispatch da36db@t '(any . any)))) (if da36dd@ls/false (apply (lambda (da36df@cls da36e0@cls*) (call-with-values (lambda () (da36be@f* da36e0@cls*)) (lambda (da36e7@da36e4 da36e8@da36e6) (let ((da36eb@g da36e8@da36e6) (da36ec@e da36e7@da36e4)) (values (da36bc@f da36df@cls da36ec@e) da36eb@g))))) da36dd@ls/false) (let ((da36ef@t da36db@t)) (let ((da36f1@ls/false (da30c6@syntax-dispatch da36ef@t 'any))) (if da36f1@ls/false (apply (lambda (da36f3@others) (da31a6@syntax-violation '#f '"invalid guard clause" da36f3@others)) da36f1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da36ef@t))))))))))))))) (call-with-values (lambda () (da36be@f* da36b7@clause*)) (lambda (da36c3@da36c0 da36c4@da36c2) (let ((da36c7@raisek da36c4@da36c2) (da36c8@code da36c3@da36c0)) (if da36c7@raisek (list (list 'call/cc (list 'lambda (list da36c7@raisek) (list da36b6@outerk (list 'lambda '() da36c8@code))))) (list da36b6@outerk (list 'lambda '() da36c8@code)))))))))) (let ((da369f@t da369b@x)) (let ((da36a1@ls/false (da30c6@syntax-dispatch da369f@t '(_ (any . each-any) any . each-any)))) (if (and da36a1@ls/false (apply (lambda (da36a3@con da36a4@clause* da36a5@b da36a6@b*) (da2ebf@id? da36a3@con)) da36a1@ls/false)) (apply (lambda (da36ab@con da36ac@clause* da36ad@b da36ae@b*) (let ((da36b3@outerk (gensym))) (da307c@bless (list (list 'call/cc (list 'lambda (list da36b3@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list da36ab@con) (da369e@gen-clauses da36ab@con da36b3@outerk da36ac@clause*)) (cons 'lambda (cons '() (cons da36ad@b da36ae@b*))))))))))) da36a1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da369f@t)))))))) (set! da4b83@da3094@guard-macro da3094@guard-macro) (set! da3096@define-enumeration-macro (lambda (da3719@stx) (let ((da371c@set? '#f) (da371e@remove-dups '#f)) (begin (set! da371c@set? (lambda (da3735@x) (or (null? da3735@x) (and (not (memq (car da3735@x) (cdr da3735@x))) (da371c@set? (cdr da3735@x)))))) (set! da371e@remove-dups (lambda (da3733@ls) (if (null? da3733@ls) '() (cons (car da3733@ls) (da371e@remove-dups (remq (car da3733@ls) (cdr da3733@ls))))))) (let ((da371f@t da3719@stx)) (let ((da3721@ls/false (da30c6@syntax-dispatch da371f@t '(_ any each-any any)))) (if (and da3721@ls/false (apply (lambda (da3723@name da3724@id* da3725@maker) (and (da2ebf@id? da3723@name) (da2ebf@id? da3725@maker) (for-all da2ebf@id? da3724@id*))) da3721@ls/false)) (apply (lambda (da3729@name da372a@id* da372b@maker) (let ((da372f@name* (da371e@remove-dups (da31ac@syntax->datum da372a@id*))) (da3730@mk (gensym))) (da307c@bless (list 'begin (list 'define da3730@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote da372f@name*)))) (list 'define-syntax da3729@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote da372f@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote da3729@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax da372b@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote da372b@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote da372f@name*)) (cons 'syntax-violation (cons (list 'quote da372b@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons da3730@mk '('(n* ...))))))))))))) da3721@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da371f@t)))))))) (set! da4b84@da3096@define-enumeration-macro da3096@define-enumeration-macro) (set! da3098@time-macro (lambda (da3737@stx) (let ((da3739@t da3737@stx)) (let ((da373b@ls/false (da30c6@syntax-dispatch da3739@t '(_ any)))) (if da373b@ls/false (apply (lambda (da373d@expr) (da307c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() da373d@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) da373b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3739@t)))))) (set! da4b85@da3098@time-macro da3098@time-macro) (set! da309a@delay-macro (lambda (da373f@stx) (let ((da3741@t da373f@stx)) (let ((da3743@ls/false (da30c6@syntax-dispatch da3741@t '(_ any)))) (if da3743@ls/false (apply (lambda (da3745@expr) (da307c@bless (list 'make-promise (list 'lambda '() da3745@expr)))) da3743@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3741@t)))))) (set! da4b86@da309a@delay-macro da309a@delay-macro) (set! da309c@assert-macro (lambda (da3747@stx) (let ((da3749@t da3747@stx)) (let ((da374b@ls/false (da30c6@syntax-dispatch da3749@t '(_ any)))) (if da374b@ls/false (apply (lambda (da374d@expr) (let ((da374f@pos (or (da319e@expression-position da3747@stx) (da319e@expression-position da374d@expr)))) (da307c@bless (list 'let (list (list 'x da374d@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote da374d@expr) (list 'quote da374f@pos))))))) da374b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3749@t)))))) (set! da4b87@da309c@assert-macro da309c@assert-macro) (set! da309e@endianness-macro (lambda (da3751@stx) (let ((da3753@t da3751@stx)) (let ((da3755@ls/false (da30c6@syntax-dispatch da3753@t '(_ any)))) (if da3755@ls/false (apply (lambda (da3757@e) (let ((da3759@t (da31ac@syntax->datum da3757@e))) (if (memv da3759@t '(little)) (da307c@bless ''little) (if (memv da3759@t '(big)) (da307c@bless ''big) (da31a6@syntax-violation '#f '"endianness must be big or little" da3751@stx))))) da3755@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3753@t)))))) (set! da4b88@da309e@endianness-macro da309e@endianness-macro) (set! da30a0@identifier-syntax-macro (lambda (da375b@stx) (let ((da375d@t da375b@stx)) (let ((da375f@ls/false (da30c6@syntax-dispatch da375d@t '(_ any)))) (if da375f@ls/false (apply (lambda (da3761@expr) (da307c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax da3761@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax da3761@expr) '((syntax (e* ...)))))))))) da375f@ls/false) (let ((da3763@t da375d@t)) (let ((da3765@ls/false (da30c6@syntax-dispatch da3763@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and da3765@ls/false (apply (lambda (da3767@id1 da3768@expr1 da3769@id2 da376a@expr2 da376b@expr3) (and (da2ebf@id? da3767@id1) (da2ebf@id? da3769@id2) (da2ebf@id? da376a@expr2))) da3765@ls/false)) (apply (lambda (da3771@id1 da3772@expr1 da3773@id2 da3774@expr2 da3775@expr3) (da307c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax da3772@expr1)) (list (list 'set! 'id da3774@expr2) (list 'syntax da3775@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons da3772@expr1 '(e* ...))))))))) da3765@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3763@t))))))))) (set! da4b89@da30a0@identifier-syntax-macro da30a0@identifier-syntax-macro) (set! da30a2@do-macro (lambda (da377b@stx) (let ((da377e@bind '#f)) (begin (set! da377e@bind (lambda (da3795@x) (let ((da3797@t da3795@x)) (let ((da3799@ls/false (da30c6@syntax-dispatch da3797@t '(any any)))) (if da3799@ls/false (apply (lambda (da379b@x da379c@init) (list da379b@x da379c@init da379b@x)) da3799@ls/false) (let ((da379f@t da3797@t)) (let ((da37a1@ls/false (da30c6@syntax-dispatch da379f@t '(any any any)))) (if da37a1@ls/false (apply (lambda (da37a3@x da37a4@init da37a5@step) (list da37a3@x da37a4@init da37a5@step)) da37a1@ls/false) (let ((da37a9@t da379f@t)) (let ((da37ab@ls/false (da30c6@syntax-dispatch da37a9@t '_))) (if da37ab@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid binding" da377b@stx)) da37ab@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da37a9@t)))))))))))) (let ((da377f@t da377b@stx)) (let ((da3781@ls/false (da30c6@syntax-dispatch da377f@t '(_ each-any (any . each-any) . each-any)))) (if da3781@ls/false (apply (lambda (da3783@binding* da3784@test da3785@expr* da3786@command*) (let ((da378b@t (map da377e@bind da3783@binding*))) (let ((da378d@ls/false (da30c6@syntax-dispatch da378b@t '#(each (any any any))))) (if da378d@ls/false (apply (lambda (da378f@x* da3790@init* da3791@step*) (if (da2ec7@valid-bound-ids? da378f@x*) (da307c@bless (list 'letrec (list (list 'loop (list 'lambda da378f@x* (list 'if da3784@test (cons 'begin (cons '(if #f #f) da3785@expr*)) (cons 'begin (append da3786@command* (list (cons 'loop da3791@step*)))))))) (cons 'loop da3790@init*))) (da31a6@syntax-violation '#f '"invalid bindings" da377b@stx))) da378d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da378b@t))))) da3781@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da377f@t)))))))) (set! da4b8a@da30a2@do-macro da30a2@do-macro) (set! da30a4@let*-macro (lambda (da37ad@stx) (let ((da37af@t da37ad@stx)) (let ((da37b1@ls/false (da30c6@syntax-dispatch da37af@t '(_ #(each (any any)) any . each-any)))) (if (and da37b1@ls/false (apply (lambda (da37b3@lhs* da37b4@rhs* da37b5@b da37b6@b*) (for-all da2ebf@id? da37b3@lhs*)) da37b1@ls/false)) (apply (lambda (da37bb@lhs* da37bc@rhs* da37bd@b da37be@b*) (da307c@bless (let da37c5@f ((da37c3@x* (map list da37bb@lhs* da37bc@rhs*))) (if (null? da37c3@x*) (cons 'let (cons '() (cons da37bd@b da37be@b*))) (list 'let (list (car da37c3@x*)) (da37c5@f (cdr da37c3@x*))))))) da37b1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da37af@t)))))) (set! da4b8b@da30a4@let*-macro da30a4@let*-macro) (set! da30a6@or-macro (lambda (da37c7@stx) (let ((da37c9@t da37c7@stx)) (let ((da37cb@ls/false (da30c6@syntax-dispatch da37c9@t '(_)))) (if da37cb@ls/false (apply (lambda () '#f) da37cb@ls/false) (let ((da37cd@t da37c9@t)) (let ((da37cf@ls/false (da30c6@syntax-dispatch da37cd@t '(_ any . each-any)))) (if da37cf@ls/false (apply (lambda (da37d1@e da37d2@e*) (da307c@bless (let da37d9@f ((da37d5@e da37d1@e) (da37d6@e* da37d2@e*)) (if (null? da37d6@e*) (list 'begin '#f da37d5@e) (list 'let (list (list 't da37d5@e)) (list 'if 't 't (da37d9@f (car da37d6@e*) (cdr da37d6@e*)))))))) da37cf@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da37cd@t))))))))) (set! da4b8c@da30a6@or-macro da30a6@or-macro) (set! da30a8@and-macro (lambda (da37db@stx) (let ((da37dd@t da37db@stx)) (let ((da37df@ls/false (da30c6@syntax-dispatch da37dd@t '(_)))) (if da37df@ls/false (apply (lambda () '#t) da37df@ls/false) (let ((da37e1@t da37dd@t)) (let ((da37e3@ls/false (da30c6@syntax-dispatch da37e1@t '(_ any . each-any)))) (if da37e3@ls/false (apply (lambda (da37e5@e da37e6@e*) (da307c@bless (let da37ed@f ((da37e9@e da37e5@e) (da37ea@e* da37e6@e*)) (if (null? da37ea@e*) (list 'begin '#f da37e9@e) (cons 'if (cons da37e9@e (cons (da37ed@f (car da37ea@e*) (cdr da37ea@e*)) '(#f)))))))) da37e3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da37e1@t))))))))) (set! da4b8d@da30a8@and-macro da30a8@and-macro) (set! da30aa@cond-macro (lambda (da37ef@stx) (let ((da37f1@t da37ef@stx)) (let ((da37f3@ls/false (da30c6@syntax-dispatch da37f1@t '(_ any . each-any)))) (if da37f3@ls/false (apply (lambda (da37f5@cls da37f6@cls*) (da307c@bless (let da37fd@f ((da37f9@cls da37f5@cls) (da37fa@cls* da37f6@cls*)) (if (null? da37fa@cls*) (let ((da37ff@t da37f9@cls)) (let ((da3801@ls/false (da30c6@syntax-dispatch da37ff@t '(#(scheme-id else) any . each-any)))) (if da3801@ls/false (apply (lambda (da3803@e da3804@e*) (cons 'begin (cons da3803@e da3804@e*))) da3801@ls/false) (let ((da3807@t da37ff@t)) (let ((da3809@ls/false (da30c6@syntax-dispatch da3807@t '(any #(scheme-id =>) any)))) (if da3809@ls/false (apply (lambda (da380b@e da380c@p) (list 'let (list (list 't da380b@e)) (list 'if 't (cons da380c@p '(t))))) da3809@ls/false) (let ((da380f@t da3807@t)) (let ((da3811@ls/false (da30c6@syntax-dispatch da380f@t '(any)))) (if da3811@ls/false (apply (lambda (da3813@e) (cons 'or (cons da3813@e '((if #f #f))))) da3811@ls/false) (let ((da3815@t da380f@t)) (let ((da3817@ls/false (da30c6@syntax-dispatch da3815@t '(any . each-any)))) (if da3817@ls/false (apply (lambda (da3819@e da381a@e*) (list 'if da3819@e (cons 'begin da381a@e*))) da3817@ls/false) (let ((da381d@t da3815@t)) (let ((da381f@ls/false (da30c6@syntax-dispatch da381d@t '_))) (if da381f@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid last clause" da37ef@stx)) da381f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da381d@t)))))))))))))))) (let ((da3821@t da37f9@cls)) (let ((da3823@ls/false (da30c6@syntax-dispatch da3821@t '(#(scheme-id else) any . each-any)))) (if da3823@ls/false (apply (lambda (da3825@e da3826@e*) (da31a6@syntax-violation '#f '"incorrect position of keyword else" da37ef@stx)) da3823@ls/false) (let ((da3829@t da3821@t)) (let ((da382b@ls/false (da30c6@syntax-dispatch da3829@t '(any #(scheme-id =>) any)))) (if da382b@ls/false (apply (lambda (da382d@e da382e@p) (list 'let (list (list 't da382d@e)) (list 'if 't (cons da382e@p '(t)) (da37fd@f (car da37fa@cls*) (cdr da37fa@cls*))))) da382b@ls/false) (let ((da3831@t da3829@t)) (let ((da3833@ls/false (da30c6@syntax-dispatch da3831@t '(any)))) (if da3833@ls/false (apply (lambda (da3835@e) (list 'or da3835@e (da37fd@f (car da37fa@cls*) (cdr da37fa@cls*)))) da3833@ls/false) (let ((da3837@t da3831@t)) (let ((da3839@ls/false (da30c6@syntax-dispatch da3837@t '(any . each-any)))) (if da3839@ls/false (apply (lambda (da383b@e da383c@e*) (list 'if da383b@e (cons 'begin da383c@e*) (da37fd@f (car da37fa@cls*) (cdr da37fa@cls*)))) da3839@ls/false) (let ((da383f@t da3837@t)) (let ((da3841@ls/false (da30c6@syntax-dispatch da383f@t '_))) (if da3841@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid last clause" da37ef@stx)) da3841@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da383f@t)))))))))))))))))))) da37f3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da37f1@t)))))) (set! da4b8e@da30aa@cond-macro da30aa@cond-macro) (set! da30ac@do-include (lambda (da3843@stx da3844@id da3845@filename) (let ((da3849@filename (da2ed3@stx->datum da3845@filename))) (begin (if (not (and (string? da3849@filename) (da2ebf@id? da3844@id))) (da31a6@syntax-violation '#f '"invalid syntax" da3843@stx) (void)) (cons (da307c@bless 'begin) (with-input-from-file da3849@filename (lambda () (let da384d@f ((da384b@ls '())) (let ((da384f@x (da29fb@da28cb@read-annotated))) (if (eof-object? da384f@x) (reverse da384b@ls) (da384d@f (cons (da2e9f@datum->stx da3844@id da384f@x) da384b@ls)))))))))))) (set! da4b8f@da30ac@do-include da30ac@do-include) (set! da30ae@include-macro (lambda (da3851@e) (let ((da3853@t da3851@e)) (let ((da3855@ls/false (da30c6@syntax-dispatch da3853@t '(any any)))) (if da3855@ls/false (apply (lambda (da3857@id da3858@filename) (da30ac@do-include da3851@e da3857@id da3858@filename)) da3855@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3853@t)))))) (set! da4b90@da30ae@include-macro da30ae@include-macro) (set! da30b0@include-into-macro (lambda (da385b@e) (let ((da385d@t da385b@e)) (let ((da385f@ls/false (da30c6@syntax-dispatch da385d@t '(_ any any)))) (if da385f@ls/false (apply (lambda (da3861@id da3862@filename) (da30ac@do-include da385b@e da3861@id da3862@filename)) da385f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da385d@t)))))) (set! da4b91@da30b0@include-into-macro da30b0@include-into-macro) (set! da30b2@syntax-rules-macro (lambda (da3865@e) (let ((da3867@t da3865@e)) (let ((da3869@ls/false (da30c6@syntax-dispatch da3867@t '(_ each-any . #(each (any any)))))) (if da3869@ls/false (apply (lambda (da386b@lits da386c@pat* da386d@tmp*) (begin (da30cc@verify-literals da386b@lits da3865@e) (da307c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons da386b@lits (map (lambda (da3871@pat da3872@tmp) (let ((da3875@t da3871@pat)) (let ((da3877@ls/false (da30c6@syntax-dispatch da3875@t '(_ . any)))) (if da3877@ls/false (apply (lambda (da3879@rest) (list (cons 'g da3879@rest) (list 'syntax da3872@tmp))) da3877@ls/false) (let ((da387b@t da3875@t)) (let ((da387d@ls/false (da30c6@syntax-dispatch da387b@t '_))) (if da387d@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid syntax-rules pattern" da3865@e da3871@pat)) da387d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da387b@t)))))))) da386c@pat* da386d@tmp*)))))))) da3869@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3867@t)))))) (set! da4b92@da30b2@syntax-rules-macro da30b2@syntax-rules-macro) (set! da30b4@quasiquote-macro (let ((da3880@datum '#f) (da389c@quasicons* '#f) (da389e@quasicons '#f) (da38a0@quasiappend '#f) (da38a2@quasivector '#f) (da38a4@vquasi '#f) (da38a6@quasi '#f)) (begin (set! da3880@datum (lambda (da3981@x) (list (da304e@scheme-stx 'quote) (da2ea7@mkstx da3981@x '() '() '())))) (set! da389c@quasicons* (lambda (da3979@x da397a@y) (let da397f@f ((da397d@x da3979@x)) (if (null? da397d@x) da397a@y (da389e@quasicons (car da397d@x) (da397f@f (cdr da397d@x))))))) (set! da389e@quasicons (lambda (da3953@x da3954@y) (let ((da3957@t da3954@y)) (let ((da3959@ls/false (da30c6@syntax-dispatch da3957@t '(#(scheme-id quote) any)))) (if da3959@ls/false (apply (lambda (da395b@dy) (let ((da395d@t da3953@x)) (let ((da395f@ls/false (da30c6@syntax-dispatch da395d@t '(#(scheme-id quote) any)))) (if da395f@ls/false (apply (lambda (da3961@dx) (list (da304e@scheme-stx 'quote) (cons da3961@dx da395b@dy))) da395f@ls/false) (let ((da3963@t da395d@t)) (let ((da3965@ls/false (da30c6@syntax-dispatch da3963@t '_))) (if da3965@ls/false (apply (lambda () (let ((da3967@t da395b@dy)) (let ((da3969@ls/false (da30c6@syntax-dispatch da3967@t '()))) (if da3969@ls/false (apply (lambda () (list (da304e@scheme-stx 'list) da3953@x)) da3969@ls/false) (let ((da396b@t da3967@t)) (let ((da396d@ls/false (da30c6@syntax-dispatch da396b@t '_))) (if da396d@ls/false (apply (lambda () (list (da304e@scheme-stx 'cons) da3953@x da3954@y)) da396d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da396b@t)))))))) da3965@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3963@t)))))))) da3959@ls/false) (let ((da396f@t da3957@t)) (let ((da3971@ls/false (da30c6@syntax-dispatch da396f@t '(#(scheme-id list) . each-any)))) (if da3971@ls/false (apply (lambda (da3973@stuff) (cons* (da304e@scheme-stx 'list) da3953@x da3973@stuff)) da3971@ls/false) (let ((da3975@t da396f@t)) (let ((da3977@ls/false (da30c6@syntax-dispatch da3975@t '_))) (if da3977@ls/false (apply (lambda () (list (da304e@scheme-stx 'cons) da3953@x da3954@y)) da3977@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3975@t)))))))))))) (set! da38a0@quasiappend (lambda (da3939@x da393a@y) (let ((da393d@ls (let da3941@f ((da393f@x da3939@x)) (if (null? da393f@x) (let ((da3943@t da393a@y)) (let ((da3945@ls/false (da30c6@syntax-dispatch da3943@t '(#(scheme-id quote) ())))) (if da3945@ls/false (apply (lambda () '()) da3945@ls/false) (let ((da3947@t da3943@t)) (let ((da3949@ls/false (da30c6@syntax-dispatch da3947@t '_))) (if da3949@ls/false (apply (lambda () (list da393a@y)) da3949@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3947@t))))))) (let ((da394b@t (car da393f@x))) (let ((da394d@ls/false (da30c6@syntax-dispatch da394b@t '(#(scheme-id quote) ())))) (if da394d@ls/false (apply (lambda () (da3941@f (cdr da393f@x))) da394d@ls/false) (let ((da394f@t da394b@t)) (let ((da3951@ls/false (da30c6@syntax-dispatch da394f@t '_))) (if da3951@ls/false (apply (lambda () (cons (car da393f@x) (da3941@f (cdr da393f@x)))) da3951@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da394f@t))))))))))) (if (null? da393d@ls) (list (da304e@scheme-stx 'quote) '()) (if (null? (cdr da393d@ls)) (car da393d@ls) (cons* (da304e@scheme-stx 'append) da393d@ls)))))) (set! da38a2@quasivector (lambda (da3907@x) (let ((da3909@pat-x da3907@x)) (let ((da390b@t da3909@pat-x)) (let ((da390d@ls/false (da30c6@syntax-dispatch da390b@t '(#(scheme-id quote) each-any)))) (if da390d@ls/false (apply (lambda (da390f@x*) (list (da304e@scheme-stx 'quote) (list->vector da390f@x*))) da390d@ls/false) (let ((da3911@t da390b@t)) (let ((da3913@ls/false (da30c6@syntax-dispatch da3911@t '_))) (if da3913@ls/false (apply (lambda () (let da391b@f ((da3915@x da3907@x) (da3916@k (lambda (da3919@ls) (cons* (da304e@scheme-stx 'vector) da3919@ls)))) (let ((da391d@t da3915@x)) (let ((da391f@ls/false (da30c6@syntax-dispatch da391d@t '(#(scheme-id quote) each-any)))) (if da391f@ls/false (apply (lambda (da3921@x*) (da3916@k (map (lambda (da3923@x) (list (da304e@scheme-stx 'quote) da3923@x)) da3921@x*))) da391f@ls/false) (let ((da3925@t da391d@t)) (let ((da3927@ls/false (da30c6@syntax-dispatch da3925@t '(#(scheme-id list) . each-any)))) (if da3927@ls/false (apply (lambda (da3929@x*) (da3916@k da3929@x*)) da3927@ls/false) (let ((da392b@t da3925@t)) (let ((da392d@ls/false (da30c6@syntax-dispatch da392b@t '(#(scheme-id cons) any any)))) (if da392d@ls/false (apply (lambda (da392f@x da3930@y) (da391b@f da3930@y (lambda (da3933@ls) (da3916@k (cons da392f@x da3933@ls))))) da392d@ls/false) (let ((da3935@t da392b@t)) (let ((da3937@ls/false (da30c6@syntax-dispatch da3935@t '_))) (if da3937@ls/false (apply (lambda () (list (da304e@scheme-stx 'list->vector) da3909@pat-x)) da3937@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3935@t))))))))))))))) da3913@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3911@t)))))))))) (set! da38a4@vquasi (lambda (da38e5@p da38e6@lev) (let ((da38e9@t da38e5@p)) (let ((da38eb@ls/false (da30c6@syntax-dispatch da38e9@t '(any . any)))) (if da38eb@ls/false (apply (lambda (da38ed@p da38ee@q) (let ((da38f1@t da38ed@p)) (let ((da38f3@ls/false (da30c6@syntax-dispatch da38f1@t '(#(scheme-id unquote) . each-any)))) (if da38f3@ls/false (apply (lambda (da38f5@p) (if (= da38e6@lev '0) (da389c@quasicons* da38f5@p (da38a4@vquasi da38ee@q da38e6@lev)) (da389e@quasicons (da389e@quasicons (da3880@datum 'unquote) (da38a6@quasi da38f5@p (- da38e6@lev '1))) (da38a4@vquasi da38ee@q da38e6@lev)))) da38f3@ls/false) (let ((da38f7@t da38f1@t)) (let ((da38f9@ls/false (da30c6@syntax-dispatch da38f7@t '(#(scheme-id unquote-splicing) . each-any)))) (if da38f9@ls/false (apply (lambda (da38fb@p) (if (= da38e6@lev '0) (da38a0@quasiappend da38fb@p (da38a4@vquasi da38ee@q da38e6@lev)) (da389e@quasicons (da389e@quasicons (da3880@datum 'unquote-splicing) (da38a6@quasi da38fb@p (- da38e6@lev '1))) (da38a4@vquasi da38ee@q da38e6@lev)))) da38f9@ls/false) (let ((da38fd@t da38f7@t)) (let ((da38ff@ls/false (da30c6@syntax-dispatch da38fd@t 'any))) (if da38ff@ls/false (apply (lambda (da3901@p) (da389e@quasicons (da38a6@quasi da3901@p da38e6@lev) (da38a4@vquasi da38ee@q da38e6@lev))) da38ff@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da38fd@t))))))))))) da38eb@ls/false) (let ((da3903@t da38e9@t)) (let ((da3905@ls/false (da30c6@syntax-dispatch da3903@t '()))) (if da3905@ls/false (apply (lambda () (list (da304e@scheme-stx 'quote) '())) da3905@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3903@t))))))))) (set! da38a6@quasi (lambda (da38af@p da38b0@lev) (let ((da38b3@t da38af@p)) (let ((da38b5@ls/false (da30c6@syntax-dispatch da38b3@t '(#(scheme-id unquote) any)))) (if da38b5@ls/false (apply (lambda (da38b7@p) (if (= da38b0@lev '0) da38b7@p (da389e@quasicons (da3880@datum 'unquote) (da38a6@quasi (list da38b7@p) (- da38b0@lev '1))))) da38b5@ls/false) (let ((da38b9@t da38b3@t)) (let ((da38bb@ls/false (da30c6@syntax-dispatch da38b9@t '((#(scheme-id unquote) . each-any) . any)))) (if da38bb@ls/false (apply (lambda (da38bd@p da38be@q) (if (= da38b0@lev '0) (da389c@quasicons* da38bd@p (da38a6@quasi da38be@q da38b0@lev)) (da389e@quasicons (da389e@quasicons (da3880@datum 'unquote) (da38a6@quasi da38bd@p (- da38b0@lev '1))) (da38a6@quasi da38be@q da38b0@lev)))) da38bb@ls/false) (let ((da38c1@t da38b9@t)) (let ((da38c3@ls/false (da30c6@syntax-dispatch da38c1@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if da38c3@ls/false (apply (lambda (da38c5@p da38c6@q) (if (= da38b0@lev '0) (da38a0@quasiappend da38c5@p (da38a6@quasi da38c6@q da38b0@lev)) (da389e@quasicons (da389e@quasicons (da3880@datum 'unquote-splicing) (da38a6@quasi da38c5@p (- da38b0@lev '1))) (da38a6@quasi da38c6@q da38b0@lev)))) da38c3@ls/false) (let ((da38c9@t da38c1@t)) (let ((da38cb@ls/false (da30c6@syntax-dispatch da38c9@t '(#(scheme-id quasiquote) any)))) (if da38cb@ls/false (apply (lambda (da38cd@p) (da389e@quasicons (da3880@datum 'quasiquote) (da38a6@quasi (list da38cd@p) (+ da38b0@lev '1)))) da38cb@ls/false) (let ((da38cf@t da38c9@t)) (let ((da38d1@ls/false (da30c6@syntax-dispatch da38cf@t '(any . any)))) (if da38d1@ls/false (apply (lambda (da38d3@p da38d4@q) (da389e@quasicons (da38a6@quasi da38d3@p da38b0@lev) (da38a6@quasi da38d4@q da38b0@lev))) da38d1@ls/false) (let ((da38d7@t da38cf@t)) (let ((da38d9@ls/false (da30c6@syntax-dispatch da38d7@t '#(vector each-any)))) (if (and da38d9@ls/false (apply (lambda (da38db@x) (not (da2e8b@stx? da38db@x))) da38d9@ls/false)) (apply (lambda (da38dd@x) (da38a2@quasivector (da38a4@vquasi da38dd@x da38b0@lev))) da38d9@ls/false) (let ((da38df@t da38d7@t)) (let ((da38e1@ls/false (da30c6@syntax-dispatch da38df@t 'any))) (if da38e1@ls/false (apply (lambda (da38e3@p) (list (da304e@scheme-stx 'quote) da38e3@p)) da38e1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da38df@t)))))))))))))))))))))))) (lambda (da38a7@x) (let ((da38a9@t da38a7@x)) (let ((da38ab@ls/false (da30c6@syntax-dispatch da38a9@t '(_ any)))) (if da38ab@ls/false (apply (lambda (da38ad@e) (da38a6@quasi da38ad@e '0)) da38ab@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da38a9@t)))))))) (set! da4b93@da30b4@quasiquote-macro da30b4@quasiquote-macro) (set! da30b6@quasisyntax-macro (let ((da3984@quasi '#f)) (begin (set! da3984@quasi (lambda (da399f@p da39a0@lev) (let ((da39a3@t da399f@p)) (let ((da39a5@ls/false (da30c6@syntax-dispatch da39a3@t '(#(scheme-id unsyntax) any)))) (if da39a5@ls/false (apply (lambda (da39a7@p) (if (= da39a0@lev '0) (let ((da39a9@g (gensym))) (values (list da39a9@g) (list da39a7@p) da39a9@g)) (call-with-values (lambda () (da3984@quasi da39a7@p (- da39a0@lev '1))) (lambda (da39b1@da39ac da39b2@da39ae da39b3@da39b0) (let ((da39b7@p da39b3@da39b0) (da39b8@rhs* da39b2@da39ae) (da39b9@lhs* da39b1@da39ac)) (values da39b9@lhs* da39b8@rhs* (list 'unsyntax da39b7@p))))))) da39a5@ls/false) (let ((da39bd@t da39a3@t)) (let ((da39bf@ls/false (da30c6@syntax-dispatch da39bd@t '#(scheme-id unsyntax)))) (if (and da39bf@ls/false (apply (lambda () (= da39a0@lev '0)) da39bf@ls/false)) (apply (lambda () (da31a6@syntax-violation '#f '"incorrect use of unsyntax" da399f@p)) da39bf@ls/false) (let ((da39c1@t da39bd@t)) (let ((da39c3@ls/false (da30c6@syntax-dispatch da39c1@t '((#(scheme-id unsyntax) . each-any) . any)))) (if da39c3@ls/false (apply (lambda (da39c5@p* da39c6@q) (call-with-values (lambda () (da3984@quasi da39c6@q da39a0@lev)) (lambda (da39cf@da39ca da39d0@da39cc da39d1@da39ce) (let ((da39d5@q da39d1@da39ce) (da39d6@rhs* da39d0@da39cc) (da39d7@lhs* da39cf@da39ca)) (if (= da39a0@lev '0) (let ((da39db@g* (map (lambda (da39dd@x) (gensym)) da39c5@p*))) (values (append da39db@g* da39d7@lhs*) (append da39c5@p* da39d6@rhs*) (append da39db@g* da39d5@q))) (call-with-values (lambda () (da3984@quasi da39c5@p* (- da39a0@lev '1))) (lambda (da39e5@da39e0 da39e6@da39e2 da39e7@da39e4) (let ((da39eb@p* da39e7@da39e4) (da39ec@rhs2* da39e6@da39e2) (da39ed@lhs2* da39e5@da39e0)) (values (append da39ed@lhs2* da39d7@lhs*) (append da39ec@rhs2* da39d6@rhs*) (cons (cons 'unsyntax da39eb@p*) da39d5@q)))))))))) da39c3@ls/false) (let ((da39f1@t da39c1@t)) (let ((da39f3@ls/false (da30c6@syntax-dispatch da39f1@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if da39f3@ls/false (apply (lambda (da39f5@p* da39f6@q) (call-with-values (lambda () (da3984@quasi da39f6@q da39a0@lev)) (lambda (da39ff@da39fa da3a00@da39fc da3a01@da39fe) (let ((da3a05@q da3a01@da39fe) (da3a06@rhs* da3a00@da39fc) (da3a07@lhs* da39ff@da39fa)) (if (= da39a0@lev '0) (let ((da3a0b@g* (map (lambda (da3a0d@x) (gensym)) da39f5@p*))) (values (append (map (lambda (da3a0f@g) (cons da3a0f@g '(...))) da3a0b@g*) da3a07@lhs*) (append da39f5@p* da3a06@rhs*) (append (apply append (map (lambda (da3a11@g) (cons da3a11@g '(...))) da3a0b@g*)) da3a05@q))) (call-with-values (lambda () (da3984@quasi da39f5@p* (- da39a0@lev '1))) (lambda (da3a19@da3a14 da3a1a@da3a16 da3a1b@da3a18) (let ((da3a1f@p* da3a1b@da3a18) (da3a20@rhs2* da3a1a@da3a16) (da3a21@lhs2* da3a19@da3a14)) (values (append da3a21@lhs2* da3a07@lhs*) (append da3a20@rhs2* da3a06@rhs*) (cons (cons 'unsyntax-splicing da3a1f@p*) da3a05@q)))))))))) da39f3@ls/false) (let ((da3a25@t da39f1@t)) (let ((da3a27@ls/false (da30c6@syntax-dispatch da3a25@t '#(scheme-id unsyntax-splicing)))) (if (and da3a27@ls/false (apply (lambda () (= da39a0@lev '0)) da3a27@ls/false)) (apply (lambda () (da31a6@syntax-violation '#f '"incorrect use of unsyntax-splicing" da399f@p)) da3a27@ls/false) (let ((da3a29@t da3a25@t)) (let ((da3a2b@ls/false (da30c6@syntax-dispatch da3a29@t '(#(scheme-id quasisyntax) any)))) (if da3a2b@ls/false (apply (lambda (da3a2d@p) (call-with-values (lambda () (da3984@quasi da3a2d@p (+ da39a0@lev '1))) (lambda (da3a35@da3a30 da3a36@da3a32 da3a37@da3a34) (let ((da3a3b@p da3a37@da3a34) (da3a3c@rhs* da3a36@da3a32) (da3a3d@lhs* da3a35@da3a30)) (values da3a3d@lhs* da3a3c@rhs* (list 'quasisyntax da3a3b@p)))))) da3a2b@ls/false) (let ((da3a41@t da3a29@t)) (let ((da3a43@ls/false (da30c6@syntax-dispatch da3a41@t '(any . any)))) (if da3a43@ls/false (apply (lambda (da3a45@p da3a46@q) (call-with-values (lambda () (da3984@quasi da3a45@p da39a0@lev)) (lambda (da3a55@da3a4a da3a56@da3a4c da3a57@da3a4e) (call-with-values (lambda () (da3984@quasi da3a46@q da39a0@lev)) (lambda (da3a5b@da3a50 da3a5c@da3a52 da3a5d@da3a54) (let ((da3a61@q da3a5d@da3a54) (da3a62@rhs2* da3a5c@da3a52) (da3a63@lhs2* da3a5b@da3a50) (da3a64@p da3a57@da3a4e) (da3a65@rhs* da3a56@da3a4c) (da3a66@lhs* da3a55@da3a4a)) (values (append da3a63@lhs2* da3a66@lhs*) (append da3a62@rhs2* da3a65@rhs*) (cons da3a64@p da3a61@q)))))))) da3a43@ls/false) (let ((da3a6d@t da3a41@t)) (let ((da3a6f@ls/false (da30c6@syntax-dispatch da3a6d@t '#(vector each-any)))) (if da3a6f@ls/false (apply (lambda (da3a71@x*) (call-with-values (lambda () (da3984@quasi da3a71@x* da39a0@lev)) (lambda (da3a79@da3a74 da3a7a@da3a76 da3a7b@da3a78) (let ((da3a7f@x* da3a7b@da3a78) (da3a80@rhs* da3a7a@da3a76) (da3a81@lhs* da3a79@da3a74)) (values da3a81@lhs* da3a80@rhs* (list->vector da3a7f@x*)))))) da3a6f@ls/false) (let ((da3a85@t da3a6d@t)) (let ((da3a87@ls/false (da30c6@syntax-dispatch da3a85@t '_))) (if da3a87@ls/false (apply (lambda () (values '() '() da399f@p)) da3a87@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3a85@t)))))))))))))))))))))))))))))) (lambda (da3985@x) (let ((da3987@t da3985@x)) (let ((da3989@ls/false (da30c6@syntax-dispatch da3987@t '(_ any)))) (if da3989@ls/false (apply (lambda (da398b@e) (call-with-values (lambda () (da3984@quasi da398b@e '0)) (lambda (da3993@da398e da3994@da3990 da3995@da3992) (let ((da3999@v da3995@da3992) (da399a@rhs* da3994@da3990) (da399b@lhs* da3993@da398e)) (da307c@bless (list 'syntax-case (cons 'list da399a@rhs*) '() (list da399b@lhs* (list 'syntax da3999@v)))))))) da3989@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3987@t)))))))) (set! da4b94@da30b6@quasisyntax-macro da30b6@quasisyntax-macro) (set! da30b8@define-struct-macro (lambda (da3a89@stx) (da31a6@syntax-violation '#f '"define-struct not supported" da3a89@stx))) (set! da4b95@da30b8@define-struct-macro da30b8@define-struct-macro) (set! da30ba@define-record-type-macro (lambda (da3a8b@x) (let ((da3a8e@id '#f) (da3a90@get-record-name '#f) (da3a92@get-record-constructor-name '#f) (da3a94@get-record-predicate-name '#f) (da3a96@get-clause '#f) (da3a98@foo-rtd-code '#f) (da3a9a@parent-rtd-code '#f) (da3a9c@parent-rcd-code '#f) (da3a9e@foo-rcd-code '#f) (da3aa0@get-protocol-code '#f) (da3aa2@get-fields '#f) (da3aa4@get-mutator-indices '#f) (da3aa6@get-mutators '#f) (da3aa8@get-accessors '#f) (da3aaa@enumerate '#f) (da3aac@do-define-record '#f) (da3aae@verify-clauses '#f)) (begin (set! da3a8e@id (lambda (da3c81@ctxt . da3c83@str*) (da31aa@datum->syntax da3c81@ctxt (string->symbol (apply string-append (map (lambda (da3c85@x) (if (symbol? da3c85@x) (symbol->string da3c85@x) (if (string? da3c85@x) da3c85@x (assertion-violation 'define-record-type '"BUG")))) da3c83@str*)))))) (set! da3a90@get-record-name (lambda (da3c6f@spec) (let ((da3c71@t da3c6f@spec)) (let ((da3c73@ls/false (da30c6@syntax-dispatch da3c71@t '(any any any)))) (if da3c73@ls/false (apply (lambda (da3c75@foo da3c76@make-foo da3c77@foo?) da3c75@foo) da3c73@ls/false) (let ((da3c7b@t da3c71@t)) (let ((da3c7d@ls/false (da30c6@syntax-dispatch da3c7b@t 'any))) (if da3c7d@ls/false (apply (lambda (da3c7f@foo) da3c7f@foo) da3c7d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c7b@t))))))))) (set! da3a92@get-record-constructor-name (lambda (da3c5b@spec) (let ((da3c5d@t da3c5b@spec)) (let ((da3c5f@ls/false (da30c6@syntax-dispatch da3c5d@t '(any any any)))) (if da3c5f@ls/false (apply (lambda (da3c61@foo da3c62@make-foo da3c63@foo?) da3c62@make-foo) da3c5f@ls/false) (let ((da3c67@t da3c5d@t)) (let ((da3c69@ls/false (da30c6@syntax-dispatch da3c67@t 'any))) (if (and da3c69@ls/false (apply (lambda (da3c6b@foo) (da2ebf@id? da3c6b@foo)) da3c69@ls/false)) (apply (lambda (da3c6d@foo) (da3a8e@id da3c6d@foo '"make-" (da2ed3@stx->datum da3c6d@foo))) da3c69@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c67@t))))))))) (set! da3a94@get-record-predicate-name (lambda (da3c47@spec) (let ((da3c49@t da3c47@spec)) (let ((da3c4b@ls/false (da30c6@syntax-dispatch da3c49@t '(any any any)))) (if da3c4b@ls/false (apply (lambda (da3c4d@foo da3c4e@make-foo da3c4f@foo?) da3c4f@foo?) da3c4b@ls/false) (let ((da3c53@t da3c49@t)) (let ((da3c55@ls/false (da30c6@syntax-dispatch da3c53@t 'any))) (if (and da3c55@ls/false (apply (lambda (da3c57@foo) (da2ebf@id? da3c57@foo)) da3c55@ls/false)) (apply (lambda (da3c59@foo) (da3a8e@id da3c59@foo (da2ed3@stx->datum da3c59@foo) '"?")) da3c55@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c53@t))))))))) (set! da3a96@get-clause (lambda (da3c35@id da3c36@ls) (let ((da3c39@t da3c36@ls)) (let ((da3c3b@ls/false (da30c6@syntax-dispatch da3c39@t '()))) (if da3c3b@ls/false (apply (lambda () '#f) da3c3b@ls/false) (let ((da3c3d@t da3c39@t)) (let ((da3c3f@ls/false (da30c6@syntax-dispatch da3c3d@t '((any . any) . any)))) (if da3c3f@ls/false (apply (lambda (da3c41@x da3c42@rest da3c43@ls) (if (da2ec5@free-id=? (da307c@bless da3c35@id) da3c41@x) (cons da3c41@x da3c42@rest) (da3a96@get-clause da3c35@id da3c43@ls))) da3c3f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c3d@t))))))))) (set! da3a98@foo-rtd-code (lambda (da3be3@name da3be4@clause* da3be5@parent-rtd-code) (let ((da3bea@convert-field-spec* '#f)) (begin (set! da3bea@convert-field-spec* (lambda (da3c1b@ls) (list->vector (map (lambda (da3c1d@x) (let ((da3c1f@t da3c1d@x)) (let ((da3c21@ls/false (da30c6@syntax-dispatch da3c1f@t '(#(scheme-id mutable) any . any)))) (if da3c21@ls/false (apply (lambda (da3c23@name da3c24@rest) (list 'mutable da3c23@name)) da3c21@ls/false) (let ((da3c27@t da3c1f@t)) (let ((da3c29@ls/false (da30c6@syntax-dispatch da3c27@t '(#(scheme-id immutable) any . any)))) (if da3c29@ls/false (apply (lambda (da3c2b@name da3c2c@rest) (list 'immutable da3c2b@name)) da3c29@ls/false) (let ((da3c2f@t da3c27@t)) (let ((da3c31@ls/false (da30c6@syntax-dispatch da3c2f@t 'any))) (if da3c31@ls/false (apply (lambda (da3c33@name) (list 'immutable da3c33@name)) da3c31@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c2f@t))))))))))) da3c1b@ls)))) (let ((da3beb@uid-code (let ((da3bf3@t (da3a96@get-clause 'nongenerative da3be4@clause*))) (let ((da3bf5@ls/false (da30c6@syntax-dispatch da3bf3@t '(_)))) (if da3bf5@ls/false (apply (lambda () (list 'quote (gensym))) da3bf5@ls/false) (let ((da3bf7@t da3bf3@t)) (let ((da3bf9@ls/false (da30c6@syntax-dispatch da3bf7@t '(_ any)))) (if da3bf9@ls/false (apply (lambda (da3bfb@uid) (list 'quote da3bfb@uid)) da3bf9@ls/false) (let ((da3bfd@t da3bf7@t)) (let ((da3bff@ls/false (da30c6@syntax-dispatch da3bfd@t '_))) (if da3bff@ls/false (apply (lambda () '#f) da3bff@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3bfd@t))))))))))) (da3bec@sealed? (let ((da3c01@t (da3a96@get-clause 'sealed da3be4@clause*))) (let ((da3c03@ls/false (da30c6@syntax-dispatch da3c01@t '(_ #(atom #t))))) (if da3c03@ls/false (apply (lambda () '#t) da3c03@ls/false) (let ((da3c05@t da3c01@t)) (let ((da3c07@ls/false (da30c6@syntax-dispatch da3c05@t '_))) (if da3c07@ls/false (apply (lambda () '#f) da3c07@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c05@t)))))))) (da3bed@opaque? (let ((da3c09@t (da3a96@get-clause 'opaque da3be4@clause*))) (let ((da3c0b@ls/false (da30c6@syntax-dispatch da3c09@t '(_ #(atom #t))))) (if da3c0b@ls/false (apply (lambda () '#t) da3c0b@ls/false) (let ((da3c0d@t da3c09@t)) (let ((da3c0f@ls/false (da30c6@syntax-dispatch da3c0d@t '_))) (if da3c0f@ls/false (apply (lambda () '#f) da3c0f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c0d@t)))))))) (da3bee@fields (let ((da3c11@t (da3a96@get-clause 'fields da3be4@clause*))) (let ((da3c13@ls/false (da30c6@syntax-dispatch da3c11@t '(_ . each-any)))) (if da3c13@ls/false (apply (lambda (da3c15@field-spec*) (list 'quote (da3bea@convert-field-spec* da3c15@field-spec*))) da3c13@ls/false) (let ((da3c17@t da3c11@t)) (let ((da3c19@ls/false (da30c6@syntax-dispatch da3c17@t '_))) (if da3c19@ls/false (apply (lambda () ''#()) da3c19@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c17@t))))))))) (da307c@bless (list 'make-record-type-descriptor (list 'quote da3be3@name) da3be5@parent-rtd-code da3beb@uid-code da3bec@sealed? da3bed@opaque? da3bee@fields))))))) (set! da3a9a@parent-rtd-code (lambda (da3bcb@clause*) (let ((da3bcd@t (da3a96@get-clause 'parent da3bcb@clause*))) (let ((da3bcf@ls/false (da30c6@syntax-dispatch da3bcd@t '(_ any)))) (if da3bcf@ls/false (apply (lambda (da3bd1@name) (list 'record-type-descriptor da3bd1@name)) da3bcf@ls/false) (let ((da3bd3@t da3bcd@t)) (let ((da3bd5@ls/false (da30c6@syntax-dispatch da3bd3@t '#(atom #f)))) (if da3bd5@ls/false (apply (lambda () (let ((da3bd7@t (da3a96@get-clause 'parent-rtd da3bcb@clause*))) (let ((da3bd9@ls/false (da30c6@syntax-dispatch da3bd7@t '(_ any any)))) (if da3bd9@ls/false (apply (lambda (da3bdb@rtd da3bdc@rcd) da3bdb@rtd) da3bd9@ls/false) (let ((da3bdf@t da3bd7@t)) (let ((da3be1@ls/false (da30c6@syntax-dispatch da3bdf@t '#(atom #f)))) (if da3be1@ls/false (apply (lambda () '#f) da3be1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3bdf@t)))))))) da3bd5@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3bd3@t))))))))) (set! da3a9c@parent-rcd-code (lambda (da3bb3@clause*) (let ((da3bb5@t (da3a96@get-clause 'parent da3bb3@clause*))) (let ((da3bb7@ls/false (da30c6@syntax-dispatch da3bb5@t '(_ any)))) (if da3bb7@ls/false (apply (lambda (da3bb9@name) (list 'record-constructor-descriptor da3bb9@name)) da3bb7@ls/false) (let ((da3bbb@t da3bb5@t)) (let ((da3bbd@ls/false (da30c6@syntax-dispatch da3bbb@t '#(atom #f)))) (if da3bbd@ls/false (apply (lambda () (let ((da3bbf@t (da3a96@get-clause 'parent-rtd da3bb3@clause*))) (let ((da3bc1@ls/false (da30c6@syntax-dispatch da3bbf@t '(_ any any)))) (if da3bc1@ls/false (apply (lambda (da3bc3@rtd da3bc4@rcd) da3bc4@rcd) da3bc1@ls/false) (let ((da3bc7@t da3bbf@t)) (let ((da3bc9@ls/false (da30c6@syntax-dispatch da3bc7@t '#(atom #f)))) (if da3bc9@ls/false (apply (lambda () '#f) da3bc9@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3bc7@t)))))))) da3bbd@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3bbb@t))))))))) (set! da3a9e@foo-rcd-code (lambda (da3bab@clause* da3bac@foo-rtd da3bad@protocol da3bae@parent-rcd-code) (list 'make-record-constructor-descriptor da3bac@foo-rtd da3bae@parent-rcd-code da3bad@protocol))) (set! da3aa0@get-protocol-code (lambda (da3b9f@clause*) (let ((da3ba1@t (da3a96@get-clause 'protocol da3b9f@clause*))) (let ((da3ba3@ls/false (da30c6@syntax-dispatch da3ba1@t '(_ any)))) (if da3ba3@ls/false (apply (lambda (da3ba5@expr) da3ba5@expr) da3ba3@ls/false) (let ((da3ba7@t da3ba1@t)) (let ((da3ba9@ls/false (da30c6@syntax-dispatch da3ba7@t '_))) (if da3ba9@ls/false (apply (lambda () '#f) da3ba9@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3ba7@t))))))))) (set! da3aa2@get-fields (lambda (da3b8d@clause*) (let ((da3b8f@t da3b8d@clause*)) (let ((da3b91@ls/false (da30c6@syntax-dispatch da3b8f@t '()))) (if da3b91@ls/false (apply (lambda () '()) da3b91@ls/false) (let ((da3b93@t da3b8f@t)) (let ((da3b95@ls/false (da30c6@syntax-dispatch da3b93@t '((#(scheme-id fields) . each-any) . _)))) (if da3b95@ls/false (apply (lambda (da3b97@f*) da3b97@f*) da3b95@ls/false) (let ((da3b99@t da3b93@t)) (let ((da3b9b@ls/false (da30c6@syntax-dispatch da3b99@t '(_ . any)))) (if da3b9b@ls/false (apply (lambda (da3b9d@rest) (da3aa2@get-fields da3b9d@rest)) da3b9b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3b99@t)))))))))))) (set! da3aa4@get-mutator-indices (lambda (da3b75@fields) (let da3b7b@f ((da3b77@fields da3b75@fields) (da3b78@i '0)) (let ((da3b7d@t da3b77@fields)) (let ((da3b7f@ls/false (da30c6@syntax-dispatch da3b7d@t '()))) (if da3b7f@ls/false (apply (lambda () '()) da3b7f@ls/false) (let ((da3b81@t da3b7d@t)) (let ((da3b83@ls/false (da30c6@syntax-dispatch da3b81@t '((#(scheme-id mutable) . _) . any)))) (if da3b83@ls/false (apply (lambda (da3b85@rest) (cons da3b78@i (da3b7b@f da3b85@rest (+ da3b78@i '1)))) da3b83@ls/false) (let ((da3b87@t da3b81@t)) (let ((da3b89@ls/false (da30c6@syntax-dispatch da3b87@t '(_ . any)))) (if da3b89@ls/false (apply (lambda (da3b8b@rest) (da3b7b@f da3b8b@rest (+ da3b78@i '1))) da3b89@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3b87@t))))))))))))) (set! da3aa6@get-mutators (lambda (da3b4b@foo da3b4c@fields) (let ((da3b50@gen-name '#f)) (begin (set! da3b50@gen-name (lambda (da3b73@x) (da31aa@datum->syntax da3b4b@foo (string->symbol (string-append (symbol->string (da31ac@syntax->datum da3b4b@foo)) '"-" (symbol->string (da31ac@syntax->datum da3b73@x)) '"-set!"))))) (let da3b53@f ((da3b51@fields da3b4c@fields)) (let ((da3b55@t da3b51@fields)) (let ((da3b57@ls/false (da30c6@syntax-dispatch da3b55@t '()))) (if da3b57@ls/false (apply (lambda () '()) da3b57@ls/false) (let ((da3b59@t da3b55@t)) (let ((da3b5b@ls/false (da30c6@syntax-dispatch da3b59@t '((#(scheme-id mutable) any any any) . any)))) (if da3b5b@ls/false (apply (lambda (da3b5d@name da3b5e@accessor da3b5f@mutator da3b60@rest) (cons da3b5f@mutator (da3b53@f da3b60@rest))) da3b5b@ls/false) (let ((da3b65@t da3b59@t)) (let ((da3b67@ls/false (da30c6@syntax-dispatch da3b65@t '((#(scheme-id mutable) any) . any)))) (if da3b67@ls/false (apply (lambda (da3b69@name da3b6a@rest) (cons (da3b50@gen-name da3b69@name) (da3b53@f da3b6a@rest))) da3b67@ls/false) (let ((da3b6d@t da3b65@t)) (let ((da3b6f@ls/false (da30c6@syntax-dispatch da3b6d@t '(_ . any)))) (if da3b6f@ls/false (apply (lambda (da3b71@rest) (da3b53@f da3b71@rest)) da3b6f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3b6d@t)))))))))))))))))) (set! da3aa8@get-accessors (lambda (da3b07@foo da3b08@fields) (let ((da3b0c@gen-name '#f)) (begin (set! da3b0c@gen-name (lambda (da3b49@x) (da31aa@datum->syntax da3b07@foo (string->symbol (string-append (symbol->string (da31ac@syntax->datum da3b07@foo)) '"-" (symbol->string (da31ac@syntax->datum da3b49@x))))))) (map (lambda (da3b0d@field) (let ((da3b0f@t da3b0d@field)) (let ((da3b11@ls/false (da30c6@syntax-dispatch da3b0f@t '(#(scheme-id mutable) any any any)))) (if (and da3b11@ls/false (apply (lambda (da3b13@name da3b14@accessor da3b15@mutator) (da2ebf@id? da3b14@accessor)) da3b11@ls/false)) (apply (lambda (da3b19@name da3b1a@accessor da3b1b@mutator) da3b1a@accessor) da3b11@ls/false) (let ((da3b1f@t da3b0f@t)) (let ((da3b21@ls/false (da30c6@syntax-dispatch da3b1f@t '(#(scheme-id immutable) any any)))) (if (and da3b21@ls/false (apply (lambda (da3b23@name da3b24@accessor) (da2ebf@id? da3b24@accessor)) da3b21@ls/false)) (apply (lambda (da3b27@name da3b28@accessor) da3b28@accessor) da3b21@ls/false) (let ((da3b2b@t da3b1f@t)) (let ((da3b2d@ls/false (da30c6@syntax-dispatch da3b2b@t '(#(scheme-id mutable) any)))) (if (and da3b2d@ls/false (apply (lambda (da3b2f@name) (da2ebf@id? da3b2f@name)) da3b2d@ls/false)) (apply (lambda (da3b31@name) (da3b0c@gen-name da3b31@name)) da3b2d@ls/false) (let ((da3b33@t da3b2b@t)) (let ((da3b35@ls/false (da30c6@syntax-dispatch da3b33@t '(#(scheme-id immutable) any)))) (if (and da3b35@ls/false (apply (lambda (da3b37@name) (da2ebf@id? da3b37@name)) da3b35@ls/false)) (apply (lambda (da3b39@name) (da3b0c@gen-name da3b39@name)) da3b35@ls/false) (let ((da3b3b@t da3b33@t)) (let ((da3b3d@ls/false (da30c6@syntax-dispatch da3b3b@t 'any))) (if (and da3b3d@ls/false (apply (lambda (da3b3f@name) (da2ebf@id? da3b3f@name)) da3b3d@ls/false)) (apply (lambda (da3b41@name) (da3b0c@gen-name da3b41@name)) da3b3d@ls/false) (let ((da3b43@t da3b3b@t)) (let ((da3b45@ls/false (da30c6@syntax-dispatch da3b43@t 'any))) (if da3b45@ls/false (apply (lambda (da3b47@others) (da31a6@syntax-violation '#f '"invalid field spec" da3b0d@field)) da3b45@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3b43@t)))))))))))))))))))) da3b08@fields))))) (set! da3aaa@enumerate (lambda (da3aff@ls) (let da3b05@f ((da3b01@ls da3aff@ls) (da3b02@i '0)) (if (null? da3b01@ls) '() (cons da3b02@i (da3b05@f (cdr da3b01@ls) (+ da3b02@i '1))))))) (set! da3aac@do-define-record (lambda (da3ad7@namespec da3ad8@clause*) (let ((da3adb@foo (da3a90@get-record-name da3ad7@namespec))) (let ((da3add@foo-rtd (gensym))) (let ((da3adf@foo-rcd (gensym))) (let ((da3ae1@protocol (gensym))) (let ((da3ae3@make-foo (da3a92@get-record-constructor-name da3ad7@namespec))) (let ((da3ae5@fields (da3aa2@get-fields da3ad8@clause*))) (let ((da3ae7@idx* (da3aaa@enumerate da3ae5@fields))) (let ((da3ae9@foo-x* (da3aa8@get-accessors da3adb@foo da3ae5@fields))) (let ((da3aeb@set-foo-x!* (da3aa6@get-mutators da3adb@foo da3ae5@fields))) (let ((da3aed@set-foo-idx* (da3aa4@get-mutator-indices da3ae5@fields))) (let ((da3aef@foo? (da3a94@get-record-predicate-name da3ad7@namespec))) (let ((da3af1@foo-rtd-code (da3a98@foo-rtd-code da3adb@foo da3ad8@clause* (da3a9a@parent-rtd-code da3ad8@clause*)))) (let ((da3af3@foo-rcd-code (da3a9e@foo-rcd-code da3ad8@clause* da3add@foo-rtd da3ae1@protocol (da3a9c@parent-rcd-code da3ad8@clause*)))) (let ((da3af5@protocol-code (da3aa0@get-protocol-code da3ad8@clause*))) (da307c@bless (cons 'begin (cons (list 'define da3add@foo-rtd da3af1@foo-rtd-code) (cons (list 'define da3ae1@protocol da3af5@protocol-code) (cons (list 'define da3adf@foo-rcd da3af3@foo-rcd-code) (cons (list 'define-syntax da3adb@foo (list 'list ''$rtd (list 'syntax da3add@foo-rtd) (list 'syntax da3adf@foo-rcd))) (cons (list 'define da3aef@foo? (list 'record-predicate da3add@foo-rtd)) (cons (list 'define da3ae3@make-foo (list 'record-constructor da3adf@foo-rcd)) (append (map (lambda (da3af7@foo-x da3af8@idx) (list 'define da3af7@foo-x (list 'record-accessor da3add@foo-rtd da3af8@idx))) da3ae9@foo-x* da3ae7@idx*) (map (lambda (da3afb@set-foo-x! da3afc@idx) (list 'define da3afb@set-foo-x! (list 'record-mutator da3add@foo-rtd da3afc@idx))) da3aeb@set-foo-x!* da3aed@set-foo-idx*)))))))))))))))))))))))))) (set! da3aae@verify-clauses (lambda (da3ab7@x da3ab8@cls*) (let ((da3abc@valid-kwds '#f) (da3abe@free-id-member? '#f)) (begin (set! da3abc@valid-kwds (map da307c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! da3abe@free-id-member? (lambda (da3ad3@x da3ad4@ls) (and (pair? da3ad4@ls) (or (da2ec5@free-id=? da3ad3@x (car da3ad4@ls)) (da3abe@free-id-member? da3ad3@x (cdr da3ad4@ls)))))) (let da3ac3@f ((da3abf@cls* da3ab8@cls*) (da3ac0@seen* '())) (if (not (null? da3abf@cls*)) (let ((da3ac5@t (car da3abf@cls*))) (let ((da3ac7@ls/false (da30c6@syntax-dispatch da3ac5@t '(any . any)))) (if da3ac7@ls/false (apply (lambda (da3ac9@kwd da3aca@rest) (if (or (not (da2ebf@id? da3ac9@kwd)) (not (da3abe@free-id-member? da3ac9@kwd da3abc@valid-kwds))) (da31a6@syntax-violation '#f '"not a valid define-record-type keyword" da3ac9@kwd) (if (da2ecb@bound-id-member? da3ac9@kwd da3ac0@seen*) (da31a6@syntax-violation '#f '"duplicate use of keyword " da3ab7@x da3ac9@kwd) (da3ac3@f (cdr da3abf@cls*) (cons da3ac9@kwd da3ac0@seen*))))) da3ac7@ls/false) (let ((da3acd@t da3ac5@t)) (let ((da3acf@ls/false (da30c6@syntax-dispatch da3acd@t 'any))) (if da3acf@ls/false (apply (lambda (da3ad1@cls) (da31a6@syntax-violation '#f '"malformed define-record-type clause" da3ad1@cls)) da3acf@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3acd@t))))))) (void))))))) (let ((da3aaf@t da3a8b@x)) (let ((da3ab1@ls/false (da30c6@syntax-dispatch da3aaf@t '(_ any . each-any)))) (if da3ab1@ls/false (apply (lambda (da3ab3@namespec da3ab4@clause*) (begin (da3aae@verify-clauses da3a8b@x da3ab4@clause*) (da3aac@do-define-record da3ab3@namespec da3ab4@clause*))) da3ab1@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3aaf@t)))))))) (set! da4b96@da30ba@define-record-type-macro da30ba@define-record-type-macro) (set! da30bc@define-condition-type-macro (lambda (da3c87@x) (let ((da3c8a@mkname '#f)) (begin (set! da3c8a@mkname (lambda (da3cb7@name da3cb8@suffix) (da31aa@datum->syntax da3cb7@name (string->symbol (string-append (symbol->string (da31ac@syntax->datum da3cb7@name)) da3cb8@suffix))))) (let ((da3c8b@t da3c87@x)) (let ((da3c8d@ls/false (da30c6@syntax-dispatch da3c8b@t '(any any any any any . #(each (any any)))))) (if (and da3c8d@ls/false (apply (lambda (da3c8f@ctxt da3c90@name da3c91@super da3c92@constructor da3c93@predicate da3c94@field* da3c95@accessor*) (and (da2ebf@id? da3c90@name) (da2ebf@id? da3c91@super) (da2ebf@id? da3c92@constructor) (da2ebf@id? da3c93@predicate) (for-all da2ebf@id? da3c94@field*) (for-all da2ebf@id? da3c95@accessor*))) da3c8d@ls/false)) (apply (lambda (da3c9d@ctxt da3c9e@name da3c9f@super da3ca0@constructor da3ca1@predicate da3ca2@field* da3ca3@accessor*) (let ((da3cab@aux-accessor* (map (lambda (da3cad@x) (gensym)) da3ca3@accessor*))) (da307c@bless (cons 'begin (cons (cons 'define-record-type (cons (list da3c9e@name da3ca0@constructor (gensym)) (cons (list 'parent da3c9f@super) (cons (cons 'fields (map (lambda (da3caf@field da3cb0@aux) (list 'immutable da3caf@field da3cb0@aux)) da3ca2@field* da3cab@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define da3ca1@predicate (list 'condition-predicate (list 'record-type-descriptor da3c9e@name))) (map (lambda (da3cb3@accessor da3cb4@aux) (list 'define da3cb3@accessor (list 'condition-accessor (list 'record-type-descriptor da3c9e@name) da3cb4@aux))) da3ca3@accessor* da3cab@aux-accessor*))))))) da3c8d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3c8b@t)))))))) (set! da4b97@da30bc@define-condition-type-macro da30bc@define-condition-type-macro) (set! da30be@incorrect-usage-macro (lambda (da3cbb@e) (da31a6@syntax-violation '#f '"incorrect usage of auxiliary keyword" da3cbb@e))) (set! da4b98@da30be@incorrect-usage-macro da30be@incorrect-usage-macro) (set! da30c0@parameterize-macro (lambda (da3cbd@e) (let ((da3cbf@t da3cbd@e)) (let ((da3cc1@ls/false (da30c6@syntax-dispatch da3cbf@t '(_ () any . each-any)))) (if da3cc1@ls/false (apply (lambda (da3cc3@b da3cc4@b*) (da307c@bless (cons 'let (cons '() (cons da3cc3@b da3cc4@b*))))) da3cc1@ls/false) (let ((da3cc7@t da3cbf@t)) (let ((da3cc9@ls/false (da30c6@syntax-dispatch da3cc7@t '(_ #(each (any any)) any . each-any)))) (if da3cc9@ls/false (apply (lambda (da3ccb@olhs* da3ccc@orhs* da3ccd@b da3cce@b*) (let ((da3cd3@lhs* (da3194@generate-temporaries da3ccb@olhs*)) (da3cd4@rhs* (da3194@generate-temporaries da3ccc@orhs*))) (da307c@bless (cons (list 'lambda (append da3cd3@lhs* da3cd4@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (da3cd7@lhs da3cd8@rhs) (list 'let (list (list 't (list da3cd7@lhs))) (list da3cd7@lhs da3cd8@rhs) (cons 'set! (cons da3cd8@rhs '(t))))) da3cd3@lhs* da3cd4@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons da3ccd@b da3cce@b*))) '(swap)))))) (append da3ccb@olhs* da3ccc@orhs*))))) da3cc9@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3cc7@t))))))))) (set! da4b99@da30c0@parameterize-macro da30c0@parameterize-macro) (set! da30c2@foreign-call-transformer (lambda (da3cdb@e da3cdc@r da3cdd@mr) (let ((da3ce1@t da3cdb@e)) (let ((da3ce3@ls/false (da30c6@syntax-dispatch da3ce1@t '(_ any . each-any)))) (if da3ce3@ls/false (apply (lambda (da3ce5@name da3ce6@arg*) (cons 'foreign-call (cons (da30e8@chi-expr da3ce5@name da3cdc@r da3cdd@mr) (da30e4@chi-expr* da3ce6@arg* da3cdc@r da3cdd@mr)))) da3ce3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3ce1@t)))))) (set! da4b9a@da30c2@foreign-call-transformer da30c2@foreign-call-transformer) (set! da30c4@convert-pattern (lambda (da3ce9@pattern da3cea@keys) (let ((da3cee@cvt* '#f) (da3cf0@cvt '#f)) (begin (set! da3cee@cvt* (lambda (da3d8d@p* da3d8e@n da3d8f@ids) (if (null? da3d8d@p*) (values '() da3d8f@ids) (call-with-values (lambda () (da3cee@cvt* (cdr da3d8d@p*) da3d8e@n da3d8f@ids)) (lambda (da3d97@da3d94 da3d98@da3d96) (let ((da3d9b@ids da3d98@da3d96) (da3d9c@y da3d97@da3d94)) (call-with-values (lambda () (da3cf0@cvt (car da3d8d@p*) da3d8e@n da3d9b@ids)) (lambda (da3da3@da3da0 da3da4@da3da2) (let ((da3da7@ids da3da4@da3da2) (da3da8@x da3da3@da3da0)) (values (cons da3da8@x da3d9c@y) da3da7@ids)))))))))) (set! da3cf0@cvt (lambda (da3cf1@p da3cf2@n da3cf3@ids) (let ((da3cf7@t da3cf1@p)) (let ((da3cf9@ls/false (da30c6@syntax-dispatch da3cf7@t 'any))) (if (and da3cf9@ls/false (apply (lambda (da3cfb@id) (da2ebf@id? da3cfb@id)) da3cf9@ls/false)) (apply (lambda (da3cfd@id) (if (da2ecb@bound-id-member? da3cf1@p da3cea@keys) (values (vector 'free-id da3cf1@p) da3cf3@ids) (if (da2ec5@free-id=? da3cf1@p (da304e@scheme-stx '_)) (values '_ da3cf3@ids) (values 'any (cons (cons da3cf1@p da3cf2@n) da3cf3@ids))))) da3cf9@ls/false) (let ((da3cff@t da3cf7@t)) (let ((da3d01@ls/false (da30c6@syntax-dispatch da3cff@t '(any any)))) (if (and da3d01@ls/false (apply (lambda (da3d03@p da3d04@dots) (da30c8@ellipsis? da3d04@dots)) da3d01@ls/false)) (apply (lambda (da3d07@p da3d08@dots) (call-with-values (lambda () (da3cf0@cvt da3d07@p (+ da3cf2@n '1) da3cf3@ids)) (lambda (da3d0f@da3d0c da3d10@da3d0e) (let ((da3d13@ids da3d10@da3d0e) (da3d14@p da3d0f@da3d0c)) (values (if (eq? da3d14@p 'any) 'each-any (vector 'each da3d14@p)) da3d13@ids))))) da3d01@ls/false) (let ((da3d17@t da3cff@t)) (let ((da3d19@ls/false (da30c6@syntax-dispatch da3d17@t '(any any . #(each+ any () any))))) (if (and da3d19@ls/false (apply (lambda (da3d1b@x da3d1c@dots da3d1d@ys da3d1e@z) (da30c8@ellipsis? da3d1c@dots)) da3d19@ls/false)) (apply (lambda (da3d23@x da3d24@dots da3d25@ys da3d26@z) (call-with-values (lambda () (da3cf0@cvt da3d26@z da3cf2@n da3cf3@ids)) (lambda (da3d2f@da3d2c da3d30@da3d2e) (let ((da3d33@ids da3d30@da3d2e) (da3d34@z da3d2f@da3d2c)) (call-with-values (lambda () (da3cee@cvt* da3d25@ys da3cf2@n da3d33@ids)) (lambda (da3d3b@da3d38 da3d3c@da3d3a) (let ((da3d3f@ids da3d3c@da3d3a) (da3d40@ys da3d3b@da3d38)) (call-with-values (lambda () (da3cf0@cvt da3d23@x (+ da3cf2@n '1) da3d3f@ids)) (lambda (da3d47@da3d44 da3d48@da3d46) (let ((da3d4b@ids da3d48@da3d46) (da3d4c@x da3d47@da3d44)) (values (vector 'each+ da3d4c@x (reverse da3d40@ys) da3d34@z) da3d4b@ids))))))))))) da3d19@ls/false) (let ((da3d4f@t da3d17@t)) (let ((da3d51@ls/false (da30c6@syntax-dispatch da3d4f@t '(any . any)))) (if da3d51@ls/false (apply (lambda (da3d53@x da3d54@y) (call-with-values (lambda () (da3cf0@cvt da3d54@y da3cf2@n da3cf3@ids)) (lambda (da3d5b@da3d58 da3d5c@da3d5a) (let ((da3d5f@ids da3d5c@da3d5a) (da3d60@y da3d5b@da3d58)) (call-with-values (lambda () (da3cf0@cvt da3d53@x da3cf2@n da3d5f@ids)) (lambda (da3d67@da3d64 da3d68@da3d66) (let ((da3d6b@ids da3d68@da3d66) (da3d6c@x da3d67@da3d64)) (values (cons da3d6c@x da3d60@y) da3d6b@ids)))))))) da3d51@ls/false) (let ((da3d6f@t da3d4f@t)) (let ((da3d71@ls/false (da30c6@syntax-dispatch da3d6f@t '()))) (if da3d71@ls/false (apply (lambda () (values '() da3cf3@ids)) da3d71@ls/false) (let ((da3d73@t da3d6f@t)) (let ((da3d75@ls/false (da30c6@syntax-dispatch da3d73@t '#(vector each-any)))) (if (and da3d75@ls/false (apply (lambda (da3d77@p) (not (da2e8b@stx? da3d77@p))) da3d75@ls/false)) (apply (lambda (da3d79@p) (call-with-values (lambda () (da3cf0@cvt da3d79@p da3cf2@n da3cf3@ids)) (lambda (da3d7f@da3d7c da3d80@da3d7e) (let ((da3d83@ids da3d80@da3d7e) (da3d84@p da3d7f@da3d7c)) (values (vector 'vector da3d84@p) da3d83@ids))))) da3d75@ls/false) (let ((da3d87@t da3d73@t)) (let ((da3d89@ls/false (da30c6@syntax-dispatch da3d87@t 'any))) (if da3d89@ls/false (apply (lambda (da3d8b@datum) (values (vector 'atom (da2ed3@stx->datum da3d8b@datum)) da3cf3@ids)) da3d89@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3d87@t)))))))))))))))))))))))) (da3cf0@cvt da3ce9@pattern '0 '()))))) (set! da4b9b@da30c4@convert-pattern da30c4@convert-pattern) (set! da30c6@syntax-dispatch (let ((da3dac@stx^ '#f) (da3dae@match-each '#f) (da3db0@match-each+ '#f) (da3db2@match-each-any '#f) (da3db4@match-empty '#f) (da3db6@combine '#f) (da3db8@match* '#f) (da3dba@match '#f)) (begin (set! da3dac@stx^ (lambda (da3e87@e da3e88@m* da3e89@s* da3e8a@ae*) (if (and (null? da3e88@m*) (null? da3e89@s*) (null? da3e8a@ae*)) da3e87@e (da2ea7@mkstx da3e87@e da3e88@m* da3e89@s* da3e8a@ae*)))) (set! da3dae@match-each (lambda (da3e67@e da3e68@p da3e69@m* da3e6a@s* da3e6b@ae*) (if (pair? da3e67@e) (let ((da3e71@first (da3dba@match (car da3e67@e) da3e68@p da3e69@m* da3e6a@s* da3e6b@ae* '()))) (and da3e71@first (let ((da3e73@rest (da3dae@match-each (cdr da3e67@e) da3e68@p da3e69@m* da3e6a@s* da3e6b@ae*))) (and da3e73@rest (cons da3e71@first da3e73@rest))))) (if (null? da3e67@e) '() (if (da2e8b@stx? da3e67@e) (and (not (da2e45@top-marked? da3e69@m*)) (call-with-values (lambda () (join-wraps da3e69@m* da3e6a@s* da3e6b@ae* da3e67@e)) (lambda (da3e7b@da3e76 da3e7c@da3e78 da3e7d@da3e7a) (let ((da3e81@ae* da3e7d@da3e7a) (da3e82@s* da3e7c@da3e78) (da3e83@m* da3e7b@da3e76)) (da3dae@match-each (da2e8d@stx-expr da3e67@e) da3e68@p da3e83@m* da3e82@s* da3e81@ae*))))) (if (da29fd@da28cf@annotation? da3e67@e) (da3dae@match-each (da29ff@da28d3@annotation-expression da3e67@e) da3e68@p da3e69@m* da3e6a@s* da3e6b@ae*) '#f)))))) (set! da3db0@match-each+ (lambda (da3e27@e da3e28@x-pat da3e29@y-pat da3e2a@z-pat da3e2b@m* da3e2c@s* da3e2d@ae* da3e2e@r) (let da3e3f@f ((da3e37@e da3e27@e) (da3e38@m* da3e2b@m*) (da3e39@s* da3e2c@s*) (da3e3a@ae* da3e2d@ae*)) (if (pair? da3e37@e) (call-with-values (lambda () (da3e3f@f (cdr da3e37@e) da3e38@m* da3e39@s* da3e3a@ae*)) (lambda (da3e47@da3e42 da3e48@da3e44 da3e49@da3e46) (let ((da3e4d@r da3e49@da3e46) (da3e4e@y-pat da3e48@da3e44) (da3e4f@xr* da3e47@da3e42)) (if da3e4d@r (if (null? da3e4e@y-pat) (let ((da3e53@xr (da3dba@match (car da3e37@e) da3e28@x-pat da3e38@m* da3e39@s* da3e3a@ae* '()))) (if da3e53@xr (values (cons da3e53@xr da3e4f@xr*) da3e4e@y-pat da3e4d@r) (values '#f '#f '#f))) (values '() (cdr da3e4e@y-pat) (da3dba@match (car da3e37@e) (car da3e4e@y-pat) da3e38@m* da3e39@s* da3e3a@ae* da3e4d@r))) (values '#f '#f '#f))))) (if (da2e8b@stx? da3e37@e) (if (da2e45@top-marked? da3e38@m*) (values '() da3e29@y-pat (da3dba@match da3e37@e da3e2a@z-pat da3e38@m* da3e39@s* da3e3a@ae* da3e2e@r)) (call-with-values (lambda () (join-wraps da3e38@m* da3e39@s* da3e3a@ae* da3e37@e)) (lambda (da3e5b@da3e56 da3e5c@da3e58 da3e5d@da3e5a) (let ((da3e61@ae* da3e5d@da3e5a) (da3e62@s* da3e5c@da3e58) (da3e63@m* da3e5b@da3e56)) (da3e3f@f (da2e8d@stx-expr da3e37@e) da3e63@m* da3e62@s* da3e61@ae*))))) (if (da29fd@da28cf@annotation? da3e37@e) (da3e3f@f (da29ff@da28d3@annotation-expression da3e37@e) da3e38@m* da3e39@s* da3e3a@ae*) (values '() da3e29@y-pat (da3dba@match da3e37@e da3e2a@z-pat da3e38@m* da3e39@s* da3e3a@ae* da3e2e@r)))))))) (set! da3db2@match-each-any (lambda (da3e0b@e da3e0c@m* da3e0d@s* da3e0e@ae*) (if (pair? da3e0b@e) (let ((da3e13@l (da3db2@match-each-any (cdr da3e0b@e) da3e0c@m* da3e0d@s* da3e0e@ae*))) (and da3e13@l (cons (da3dac@stx^ (car da3e0b@e) da3e0c@m* da3e0d@s* da3e0e@ae*) da3e13@l))) (if (null? da3e0b@e) '() (if (da2e8b@stx? da3e0b@e) (and (not (da2e45@top-marked? da3e0c@m*)) (call-with-values (lambda () (join-wraps da3e0c@m* da3e0d@s* da3e0e@ae* da3e0b@e)) (lambda (da3e1b@da3e16 da3e1c@da3e18 da3e1d@da3e1a) (let ((da3e21@ae* da3e1d@da3e1a) (da3e22@s* da3e1c@da3e18) (da3e23@m* da3e1b@da3e16)) (da3db2@match-each-any (da2e8d@stx-expr da3e0b@e) da3e23@m* da3e22@s* da3e21@ae*))))) (if (da29fd@da28cf@annotation? da3e0b@e) (da3db2@match-each-any (da29ff@da28d3@annotation-expression da3e0b@e) da3e0c@m* da3e0d@s* da3e0e@ae*) '#f)))))) (set! da3db4@match-empty (lambda (da3e05@p da3e06@r) (if (null? da3e05@p) da3e06@r (if (eq? da3e05@p '_) da3e06@r (if (eq? da3e05@p 'any) (cons '() da3e06@r) (if (pair? da3e05@p) (da3db4@match-empty (car da3e05@p) (da3db4@match-empty (cdr da3e05@p) da3e06@r)) (if (eq? da3e05@p 'each-any) (cons '() da3e06@r) (let ((da3e09@t (vector-ref da3e05@p '0))) (if (memv da3e09@t '(each)) (da3db4@match-empty (vector-ref da3e05@p '1) da3e06@r) (if (memv da3e09@t '(each+)) (da3db4@match-empty (vector-ref da3e05@p '1) (da3db4@match-empty (reverse (vector-ref da3e05@p '2)) (da3db4@match-empty (vector-ref da3e05@p '3) da3e06@r))) (if (memv da3e09@t '(free-id atom)) da3e06@r (if (memv da3e09@t '(scheme-id atom)) da3e06@r (if (memv da3e09@t '(vector)) (da3db4@match-empty (vector-ref da3e05@p '1) da3e06@r) (assertion-violation 'syntax-dispatch '"invalid pattern" da3e05@p)))))))))))))) (set! da3db6@combine (lambda (da3e01@r* da3e02@r) (if (null? (car da3e01@r*)) da3e02@r (cons (map car da3e01@r*) (da3db6@combine (map cdr da3e01@r*) da3e02@r))))) (set! da3db8@match* (lambda (da3ddd@e da3dde@p da3ddf@m* da3de0@s* da3de1@ae* da3de2@r) (if (null? da3dde@p) (and (null? da3ddd@e) da3de2@r) (if (pair? da3dde@p) (and (pair? da3ddd@e) (da3dba@match (car da3ddd@e) (car da3dde@p) da3ddf@m* da3de0@s* da3de1@ae* (da3dba@match (cdr da3ddd@e) (cdr da3dde@p) da3ddf@m* da3de0@s* da3de1@ae* da3de2@r))) (if (eq? da3dde@p 'each-any) (let ((da3de9@l (da3db2@match-each-any da3ddd@e da3ddf@m* da3de0@s* da3de1@ae*))) (and da3de9@l (cons da3de9@l da3de2@r))) (let ((da3deb@t (vector-ref da3dde@p '0))) (if (memv da3deb@t '(each)) (if (null? da3ddd@e) (da3db4@match-empty (vector-ref da3dde@p '1) da3de2@r) (let ((da3ded@r* (da3dae@match-each da3ddd@e (vector-ref da3dde@p '1) da3ddf@m* da3de0@s* da3de1@ae*))) (and da3ded@r* (da3db6@combine da3ded@r* da3de2@r)))) (if (memv da3deb@t '(free-id)) (and (symbol? da3ddd@e) (da2e45@top-marked? da3ddf@m*) (da2ec5@free-id=? (da3dac@stx^ da3ddd@e da3ddf@m* da3de0@s* da3de1@ae*) (vector-ref da3dde@p '1)) da3de2@r) (if (memv da3deb@t '(scheme-id)) (and (symbol? da3ddd@e) (da2e45@top-marked? da3ddf@m*) (da2ec5@free-id=? (da3dac@stx^ da3ddd@e da3ddf@m* da3de0@s* da3de1@ae*) (da304e@scheme-stx (vector-ref da3dde@p '1))) da3de2@r) (if (memv da3deb@t '(each+)) (call-with-values (lambda () (da3db0@match-each+ da3ddd@e (vector-ref da3dde@p '1) (vector-ref da3dde@p '2) (vector-ref da3dde@p '3) da3ddf@m* da3de0@s* da3de1@ae* da3de2@r)) (lambda (da3df5@da3df0 da3df6@da3df2 da3df7@da3df4) (let ((da3dfb@r da3df7@da3df4) (da3dfc@y-pat da3df6@da3df2) (da3dfd@xr* da3df5@da3df0)) (and da3dfb@r (null? da3dfc@y-pat) (if (null? da3dfd@xr*) (da3db4@match-empty (vector-ref da3dde@p '1) da3dfb@r) (da3db6@combine da3dfd@xr* da3dfb@r)))))) (if (memv da3deb@t '(atom)) (and (fast-equal? (vector-ref da3dde@p '1) (da2ed1@strip da3ddd@e da3ddf@m*)) da3de2@r) (if (memv da3deb@t '(vector)) (and (vector? da3ddd@e) (da3dba@match (vector->list da3ddd@e) (vector-ref da3dde@p '1) da3ddf@m* da3de0@s* da3de1@ae* da3de2@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" da3dde@p))))))))))))) (set! da3dba@match (lambda (da3dbf@e da3dc0@p da3dc1@m* da3dc2@s* da3dc3@ae* da3dc4@r) (if (not da3dc4@r) '#f (if (eq? da3dc0@p '_) da3dc4@r (if (eq? da3dc0@p 'any) (cons (da3dac@stx^ da3dbf@e da3dc1@m* da3dc2@s* da3dc3@ae*) da3dc4@r) (if (da2e8b@stx? da3dbf@e) (and (not (da2e45@top-marked? da3dc1@m*)) (call-with-values (lambda () (join-wraps da3dc1@m* da3dc2@s* da3dc3@ae* da3dbf@e)) (lambda (da3dd1@da3dcc da3dd2@da3dce da3dd3@da3dd0) (let ((da3dd7@ae* da3dd3@da3dd0) (da3dd8@s* da3dd2@da3dce) (da3dd9@m* da3dd1@da3dcc)) (da3dba@match (da2e8d@stx-expr da3dbf@e) da3dc0@p da3dd9@m* da3dd8@s* da3dd7@ae* da3dc4@r))))) (if (da29fd@da28cf@annotation? da3dbf@e) (da3dba@match (da29ff@da28d3@annotation-expression da3dbf@e) da3dc0@p da3dc1@m* da3dc2@s* da3dc3@ae* da3dc4@r) (da3db8@match* da3dbf@e da3dc0@p da3dc1@m* da3dc2@s* da3dc3@ae* da3dc4@r)))))))) (lambda (da3dbb@e da3dbc@p) (da3dba@match da3dbb@e da3dbc@p '() '() '() '()))))) (set! da4b9c@da30c6@syntax-dispatch da30c6@syntax-dispatch) (set! da30c8@ellipsis? (lambda (da3e8f@x) (and (da2ebf@id? da3e8f@x) (da2ec5@free-id=? da3e8f@x (da304e@scheme-stx '...))))) (set! da4b9d@da30c8@ellipsis? da30c8@ellipsis?) (set! da30ca@underscore? (lambda (da3e91@x) (and (da2ebf@id? da3e91@x) (da2ec5@free-id=? da3e91@x (da304e@scheme-stx '_))))) (set! da4b9e@da30ca@underscore? da30ca@underscore?) (set! da30cc@verify-literals (lambda (da3e93@lits da3e94@expr) (for-each (lambda (da3e97@x) (if (or (not (da2ebf@id? da3e97@x)) (da30c8@ellipsis? da3e97@x) (da30ca@underscore? da3e97@x)) (da31a6@syntax-violation '#f '"invalid literal" da3e94@expr da3e97@x) (void))) da3e93@lits))) (set! da4b9f@da30cc@verify-literals da30cc@verify-literals) (set! da30ce@syntax-case-transformer (let ((da3e9a@build-dispatch-call '#f) (da3e9c@invalid-ids-error '#f) (da3e9e@gen-clause '#f) (da3ea0@gen-syntax-case '#f)) (begin (set! da3e9a@build-dispatch-call (lambda (da3f0b@pvars da3f0c@expr da3f0d@y da3f0e@r da3f0f@mr) (let ((da3f15@ids (map car da3f0b@pvars)) (da3f16@levels (map cdr da3f0b@pvars))) (let ((da3f19@labels (map da2e4b@gen-label da3f15@ids)) (da3f1a@new-vars (map da2e47@gen-lexical da3f15@ids))) (let ((da3f1d@body (da30e8@chi-expr (da2eab@add-subst (da2e7f@make-full-rib da3f15@ids da3f19@labels) da3f0c@expr) (append (map (lambda (da3f1f@label da3f20@var da3f21@level) (cons da3f1f@label (da2ed9@make-binding 'syntax (cons da3f20@var da3f21@level)))) da3f19@labels da3f1a@new-vars (map cdr da3f0b@pvars)) da3f0e@r) da3f0f@mr))) (list '(primitive apply) (da2e22@da2d4e@build-lambda '#f da3f1a@new-vars da3f1d@body) da3f0d@y)))))) (set! da3e9c@invalid-ids-error (lambda (da3eff@id* da3f00@e da3f01@class) (let da3f09@find ((da3f05@id* da3eff@id*) (da3f06@ok* '())) (if (null? da3f05@id*) (da31a6@syntax-violation '#f '"invalid syntax" da3f00@e) (if (da2ebf@id? (car da3f05@id*)) (if (da2ecb@bound-id-member? (car da3f05@id*) da3f06@ok*) (da31a2@syntax-error (car da3f05@id*) '"duplicate " da3f01@class) (da3f09@find (cdr da3f05@id*) (cons (car da3f05@id*) da3f06@ok*))) (da31a2@syntax-error (car da3f05@id*) '"invalid " da3f01@class)))))) (set! da3e9e@gen-clause (lambda (da3ed7@x da3ed8@keys da3ed9@clauses da3eda@r da3edb@mr da3edc@pat da3edd@fender da3ede@expr) (call-with-values (lambda () (da30c4@convert-pattern da3edc@pat da3ed8@keys)) (lambda (da3eeb@da3ee8 da3eec@da3eea) (let ((da3eef@pvars da3eec@da3eea) (da3ef0@p da3eeb@da3ee8)) (if (not (da2ec9@distinct-bound-ids? (map car da3eef@pvars))) (da3e9c@invalid-ids-error (map car da3eef@pvars) da3edc@pat '"pattern variable") (if (not (for-all (lambda (da3ef3@x) (not (da30c8@ellipsis? (car da3ef3@x)))) da3eef@pvars)) (da31a6@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" da3edc@pat) (let ((da3ef5@y (da2e47@gen-lexical 'tmp))) (let ((da3ef7@test (if (eq? da3edd@fender '#t) da3ef5@y (let ((da3ef9@call (da3e9a@build-dispatch-call da3eef@pvars da3edd@fender da3ef5@y da3eda@r da3edb@mr))) (list 'if da3ef5@y da3ef9@call (list 'quote '#f)))))) (let ((da3efb@conseq (da3e9a@build-dispatch-call da3eef@pvars da3ede@expr da3ef5@y da3eda@r da3edb@mr))) (let ((da3efd@altern (da3ea0@gen-syntax-case da3ed7@x da3ed8@keys da3ed9@clauses da3eda@r da3edb@mr))) (list (da2e22@da2d4e@build-lambda '#f (list da3ef5@y) (list 'if da3ef7@test da3efb@conseq da3efd@altern)) (list '(primitive syntax-dispatch) da3ed7@x (list 'quote da3ef0@p)))))))))))))) (set! da3ea0@gen-syntax-case (lambda (da3eb5@x da3eb6@keys da3eb7@clauses da3eb8@r da3eb9@mr) (if (null? da3eb7@clauses) (list '(primitive syntax-error) da3eb5@x) (let ((da3ebf@t (car da3eb7@clauses))) (let ((da3ec1@ls/false (da30c6@syntax-dispatch da3ebf@t '(any any)))) (if da3ec1@ls/false (apply (lambda (da3ec3@pat da3ec4@expr) (if (and (da2ebf@id? da3ec3@pat) (not (da2ecb@bound-id-member? da3ec3@pat da3eb6@keys)) (not (da30c8@ellipsis? da3ec3@pat))) (if (da2ec5@free-id=? da3ec3@pat (da304e@scheme-stx '_)) (da30e8@chi-expr da3ec4@expr da3eb8@r da3eb9@mr) (let ((da3ec7@lab (da2e4b@gen-label da3ec3@pat)) (da3ec8@lex (da2e47@gen-lexical da3ec3@pat))) (let ((da3ecb@body (da30e8@chi-expr (da2eab@add-subst (da2e7f@make-full-rib (list da3ec3@pat) (list da3ec7@lab)) da3ec4@expr) (cons (cons da3ec7@lab (da2ed9@make-binding 'syntax (cons da3ec8@lex '0))) da3eb8@r) da3eb9@mr))) (list (da2e22@da2d4e@build-lambda '#f (list da3ec8@lex) da3ecb@body) da3eb5@x)))) (da3e9e@gen-clause da3eb5@x da3eb6@keys (cdr da3eb7@clauses) da3eb8@r da3eb9@mr da3ec3@pat '#t da3ec4@expr))) da3ec1@ls/false) (let ((da3ecd@t da3ebf@t)) (let ((da3ecf@ls/false (da30c6@syntax-dispatch da3ecd@t '(any any any)))) (if da3ecf@ls/false (apply (lambda (da3ed1@pat da3ed2@fender da3ed3@expr) (da3e9e@gen-clause da3eb5@x da3eb6@keys (cdr da3eb7@clauses) da3eb8@r da3eb9@mr da3ed1@pat da3ed2@fender da3ed3@expr)) da3ecf@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3ecd@t)))))))))) (lambda (da3ea1@e da3ea2@r da3ea3@mr) (let ((da3ea7@t da3ea1@e)) (let ((da3ea9@ls/false (da30c6@syntax-dispatch da3ea7@t '(_ any each-any . each-any)))) (if da3ea9@ls/false (apply (lambda (da3eab@expr da3eac@keys da3ead@clauses) (begin (da30cc@verify-literals da3eac@keys da3ea1@e) (let ((da3eb1@x (da2e47@gen-lexical 'tmp))) (let ((da3eb3@body (da3ea0@gen-syntax-case da3eb1@x da3eac@keys da3ead@clauses da3ea2@r da3ea3@mr))) (list (da2e22@da2d4e@build-lambda '#f (list da3eb1@x) da3eb3@body) (da30e8@chi-expr da3eab@expr da3ea2@r da3ea3@mr)))))) da3ea9@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3ea7@t)))))))) (set! da4ba0@da30ce@syntax-case-transformer da30ce@syntax-case-transformer) (set! da30d0@ellipsis-map (lambda (da3f25@proc da3f26@ls . da3f29@ls*) (let ((da3f2c@who '#f)) (begin (set! da3f2c@who '...) (begin (if (not (list? da3f26@ls)) (assertion-violation da3f2c@who '"not a list" da3f26@ls) (void)) (if (not (null? da3f29@ls*)) (let ((da3f2d@n (length da3f26@ls))) (for-each (lambda (da3f2f@x) (begin (if (not (list? da3f2f@x)) (assertion-violation da3f2c@who '"not a list" da3f2f@x) (void)) (if (not (= (length da3f2f@x) da3f2d@n)) (assertion-violation da3f2c@who '"length mismatch" da3f26@ls da3f2f@x) (void)))) da3f29@ls*)) (void)) (apply map da3f25@proc da3f26@ls da3f29@ls*)))))) (set! da4ba1@da30d0@ellipsis-map da30d0@ellipsis-map) (set! da30d2@syntax-transformer (let ((da3f32@gen-syntax '#f) (da3f34@gen-ref '#f) (da3f36@gen-append '#f) (da3f38@gen-mappend '#f) (da3f3a@gen-map '#f) (da3f3c@gen-cons '#f) (da3f3e@gen-vector '#f) (da3f40@regen '#f)) (begin (set! da3f32@gen-syntax (lambda (da3fa9@src da3faa@e da3fab@r da3fac@maps da3fad@ellipsis? da3fae@vec?) (let ((da3fb5@t da3faa@e)) (let ((da3fb7@ls/false (da30c6@syntax-dispatch da3fb5@t 'any))) (if (and da3fb7@ls/false (apply (lambda (da3fb9@dots) (da3fad@ellipsis? da3fb9@dots)) da3fb7@ls/false)) (apply (lambda (da3fbb@dots) (da31a6@syntax-violation '#f '"misplaced ellipsis in syntax form" da3fa9@src)) da3fb7@ls/false) (let ((da3fbd@t da3fb5@t)) (let ((da3fbf@ls/false (da30c6@syntax-dispatch da3fbd@t 'any))) (if (and da3fbf@ls/false (apply (lambda (da3fc1@id) (da2ebf@id? da3fc1@id)) da3fbf@ls/false)) (apply (lambda (da3fc3@id) (let ((da3fc5@label (da2ed5@id->label da3faa@e))) (let ((da3fc7@b (da2ed7@label->binding da3fc5@label da3fab@r))) (if (eq? (da2edb@binding-type da3fc7@b) 'syntax) (call-with-values (lambda () (let ((da3fcd@var.lev (da2edd@binding-value da3fc7@b))) (da3f34@gen-ref da3fa9@src (car da3fcd@var.lev) (cdr da3fcd@var.lev) da3fac@maps))) (lambda (da3fcf@da3fca da3fd0@da3fcc) (let ((da3fd3@maps da3fd0@da3fcc) (da3fd4@var da3fcf@da3fca)) (values (list 'ref da3fd4@var) da3fd3@maps)))) (values (list 'quote da3faa@e) da3fac@maps))))) da3fbf@ls/false) (let ((da3fd7@t da3fbd@t)) (let ((da3fd9@ls/false (da30c6@syntax-dispatch da3fd7@t '(any any)))) (if (and da3fd9@ls/false (apply (lambda (da3fdb@dots da3fdc@e) (da3fad@ellipsis? da3fdb@dots)) da3fd9@ls/false)) (apply (lambda (da3fdf@dots da3fe0@e) (if da3fae@vec? (da31a6@syntax-violation '#f '"misplaced ellipsis in syntax form" da3fa9@src) (da3f32@gen-syntax da3fa9@src da3fe0@e da3fab@r da3fac@maps (lambda (da3fe3@x) '#f) '#f))) da3fd9@ls/false) (let ((da3fe5@t da3fd7@t)) (let ((da3fe7@ls/false (da30c6@syntax-dispatch da3fe5@t '(any any . any)))) (if (and da3fe7@ls/false (apply (lambda (da3fe9@x da3fea@dots da3feb@y) (da3fad@ellipsis? da3fea@dots)) da3fe7@ls/false)) (apply (lambda (da3fef@x da3ff0@dots da3ff1@y) (let da4007@f ((da3ff5@y da3ff1@y) (da3ff6@k (lambda (da3ff9@maps) (call-with-values (lambda () (da3f32@gen-syntax da3fa9@src da3fef@x da3fab@r (cons '() da3ff9@maps) da3fad@ellipsis? '#f)) (lambda (da3fff@da3ffc da4000@da3ffe) (let ((da4003@maps da4000@da3ffe) (da4004@x da3fff@da3ffc)) (if (null? (car da4003@maps)) (da31a6@syntax-violation '#f '"extra ellipsis in syntax form" da3fa9@src) (values (da3f3a@gen-map da4004@x (car da4003@maps)) (cdr da4003@maps))))))))) (let ((da4009@t da3ff5@y)) (let ((da400b@ls/false (da30c6@syntax-dispatch da4009@t '()))) (if da400b@ls/false (apply (lambda () (da3ff6@k da3fac@maps)) da400b@ls/false) (let ((da400d@t da4009@t)) (let ((da400f@ls/false (da30c6@syntax-dispatch da400d@t '(any . any)))) (if (and da400f@ls/false (apply (lambda (da4011@dots da4012@y) (da3fad@ellipsis? da4011@dots)) da400f@ls/false)) (apply (lambda (da4015@dots da4016@y) (da4007@f da4016@y (lambda (da4019@maps) (call-with-values (lambda () (da3ff6@k (cons '() da4019@maps))) (lambda (da401f@da401c da4020@da401e) (let ((da4023@maps da4020@da401e) (da4024@x da401f@da401c)) (if (null? (car da4023@maps)) (da31a6@syntax-violation '#f '"extra ellipsis in syntax form" da3fa9@src) (values (da3f38@gen-mappend da4024@x (car da4023@maps)) (cdr da4023@maps))))))))) da400f@ls/false) (let ((da4027@t da400d@t)) (let ((da4029@ls/false (da30c6@syntax-dispatch da4027@t '_))) (if da4029@ls/false (apply (lambda () (call-with-values (lambda () (da3f32@gen-syntax da3fa9@src da3ff5@y da3fab@r da3fac@maps da3fad@ellipsis? da3fae@vec?)) (lambda (da402f@da402c da4030@da402e) (let ((da4033@maps da4030@da402e) (da4034@y da402f@da402c)) (call-with-values (lambda () (da3ff6@k da4033@maps)) (lambda (da403b@da4038 da403c@da403a) (let ((da403f@maps da403c@da403a) (da4040@x da403b@da4038)) (values (da3f36@gen-append da4040@x da4034@y) da403f@maps)))))))) da4029@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4027@t)))))))))))) da3fe7@ls/false) (let ((da4043@t da3fe5@t)) (let ((da4045@ls/false (da30c6@syntax-dispatch da4043@t '(any . any)))) (if da4045@ls/false (apply (lambda (da4047@x da4048@y) (call-with-values (lambda () (da3f32@gen-syntax da3fa9@src da4047@x da3fab@r da3fac@maps da3fad@ellipsis? '#f)) (lambda (da404f@da404c da4050@da404e) (let ((da4053@maps da4050@da404e) (da4054@xnew da404f@da404c)) (call-with-values (lambda () (da3f32@gen-syntax da3fa9@src da4048@y da3fab@r da4053@maps da3fad@ellipsis? da3fae@vec?)) (lambda (da405b@da4058 da405c@da405a) (let ((da405f@maps da405c@da405a) (da4060@ynew da405b@da4058)) (values (da3f3c@gen-cons da3faa@e da4047@x da4048@y da4054@xnew da4060@ynew) da405f@maps)))))))) da4045@ls/false) (let ((da4063@t da4043@t)) (let ((da4065@ls/false (da30c6@syntax-dispatch da4063@t '#(vector each-any)))) (if da4065@ls/false (apply (lambda (da4067@ls) (call-with-values (lambda () (da3f32@gen-syntax da3fa9@src da4067@ls da3fab@r da3fac@maps da3fad@ellipsis? '#t)) (lambda (da406d@da406a da406e@da406c) (let ((da4071@maps da406e@da406c) (da4072@lsnew da406d@da406a)) (values (da3f3e@gen-vector da3faa@e da4067@ls da4072@lsnew) da4071@maps))))) da4065@ls/false) (let ((da4075@t da4063@t)) (let ((da4077@ls/false (da30c6@syntax-dispatch da4075@t '_))) (if da4077@ls/false (apply (lambda () (values (list 'quote da3faa@e) da3fac@maps)) da4077@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4075@t)))))))))))))))))))))))) (set! da3f34@gen-ref (lambda (da3f8f@src da3f90@var da3f91@level da3f92@maps) (if (= da3f91@level '0) (values da3f90@var da3f92@maps) (if (null? da3f92@maps) (da31a6@syntax-violation '#f '"missing ellipsis in syntax form" da3f8f@src) (call-with-values (lambda () (da3f34@gen-ref da3f8f@src da3f90@var (- da3f91@level '1) (cdr da3f92@maps))) (lambda (da3f9b@da3f98 da3f9c@da3f9a) (let ((da3f9f@outer-maps da3f9c@da3f9a) (da3fa0@outer-var da3f9b@da3f98)) (let ((da3fa3@t (assq da3fa0@outer-var (car da3f92@maps)))) (if da3fa3@t ((lambda (da3fa5@b) (values (cdr da3fa5@b) da3f92@maps)) da3fa3@t) (let ((da3fa7@inner-var (da2e47@gen-lexical 'tmp))) (values da3fa7@inner-var (cons (cons (cons da3fa0@outer-var da3fa7@inner-var) (car da3f92@maps)) da3f9f@outer-maps)))))))))))) (set! da3f36@gen-append (lambda (da3f8b@x da3f8c@y) (if (fast-equal? da3f8c@y ''()) da3f8b@x (list 'append da3f8b@x da3f8c@y)))) (set! da3f38@gen-mappend (lambda (da3f87@e da3f88@map-env) (list 'apply '(primitive append) (da3f3a@gen-map da3f87@e da3f88@map-env)))) (set! da3f3a@gen-map (lambda (da3f75@e da3f76@map-env) (let ((da3f79@formals (map cdr da3f76@map-env)) (da3f7a@actuals (map (lambda (da3f7d@x) (list 'ref (car da3f7d@x))) da3f76@map-env))) (if (eq? (car da3f75@e) 'ref) (car da3f7a@actuals) (if (for-all (lambda (da3f7f@x) (and (eq? (car da3f7f@x) 'ref) (memq (cadr da3f7f@x) da3f79@formals))) (cdr da3f75@e)) (let ((da3f81@args (map (let ((da3f83@r (map cons da3f79@formals da3f7a@actuals))) (lambda (da3f85@x) (cdr (assq (cadr da3f85@x) da3f83@r)))) (cdr da3f75@e)))) (cons 'map (cons (list 'primitive (car da3f75@e)) da3f81@args))) (cons* 'map (list 'lambda da3f79@formals da3f75@e) da3f7a@actuals)))))) (set! da3f3c@gen-cons (lambda (da3f65@e da3f66@x da3f67@y da3f68@xnew da3f69@ynew) (let ((da3f6f@t (car da3f69@ynew))) (if (memv da3f6f@t '(quote)) (if (eq? (car da3f68@xnew) 'quote) (let ((da3f71@xnew (cadr da3f68@xnew)) (da3f72@ynew (cadr da3f69@ynew))) (if (and (eq? da3f71@xnew da3f66@x) (eq? da3f72@ynew da3f67@y)) (list 'quote da3f65@e) (list 'quote (cons da3f71@xnew da3f72@ynew)))) (if (null? (cadr da3f69@ynew)) (list 'list da3f68@xnew) (list 'cons da3f68@xnew da3f69@ynew))) (if (memv da3f6f@t '(list)) (cons 'list (cons da3f68@xnew (cdr da3f69@ynew))) (list 'cons da3f68@xnew da3f69@ynew)))))) (set! da3f3e@gen-vector (lambda (da3f5f@e da3f60@ls da3f61@lsnew) (if (eq? (car da3f61@lsnew) 'quote) (if (eq? (cadr da3f61@lsnew) da3f60@ls) (list 'quote da3f5f@e) (list 'quote (list->vector (cadr da3f61@lsnew)))) (if (eq? (car da3f61@lsnew) 'list) (cons 'vector (cdr da3f61@lsnew)) (list 'list->vector da3f61@lsnew))))) (set! da3f40@regen (lambda (da3f59@x) (let ((da3f5b@t (car da3f59@x))) (if (memv da3f5b@t '(ref)) (cadr da3f59@x) (if (memv da3f5b@t '(primitive)) (list 'primitive (cadr da3f59@x)) (if (memv da3f5b@t '(quote)) (list 'quote (cadr da3f59@x)) (if (memv da3f5b@t '(lambda)) (da2e22@da2d4e@build-lambda '#f (cadr da3f59@x) (da3f40@regen (caddr da3f59@x))) (if (memv da3f5b@t '(map)) (let ((da3f5d@ls (map da3f40@regen (cdr da3f59@x)))) (cons '(primitive ellipsis-map) da3f5d@ls)) (cons (list 'primitive (car da3f59@x)) (map da3f40@regen (cdr da3f59@x))))))))))) (lambda (da3f41@e da3f42@r da3f43@mr) (let ((da3f47@t da3f41@e)) (let ((da3f49@ls/false (da30c6@syntax-dispatch da3f47@t '(_ any)))) (if da3f49@ls/false (apply (lambda (da3f4b@x) (call-with-values (lambda () (da3f32@gen-syntax da3f41@e da3f4b@x da3f42@r '() da30c8@ellipsis? '#f)) (lambda (da3f51@da3f4e da3f52@da3f50) (let ((da3f55@maps da3f52@da3f50) (da3f56@e da3f51@da3f4e)) (da3f40@regen da3f56@e))))) da3f49@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da3f47@t)))))))) (set! da4ba2@da30d2@syntax-transformer da30d2@syntax-transformer) (set! da30d4@core-macro-transformer (lambda (da4079@name) (let ((da407b@t da4079@name)) (if (memv da407b@t '(quote)) da3076@quote-transformer (if (memv da407b@t '(lambda)) da307a@lambda-transformer (if (memv da407b@t '(case-lambda)) da3078@case-lambda-transformer (if (memv da407b@t '(letrec)) da305e@letrec-transformer (if (memv da407b@t '(letrec*)) da3060@letrec*-transformer (if (memv da407b@t '(let)) da305c@let-transformer (if (memv da407b@t '(if)) da306e@if-transformer (if (memv da407b@t '(and)) da3070@and-transformer (if (memv da407b@t '(or)) da3072@or-transformer (if (memv da407b@t '(foreign-call)) da30c2@foreign-call-transformer (if (memv da407b@t '(syntax-case)) da30ce@syntax-case-transformer (if (memv da407b@t '(syntax)) da30d2@syntax-transformer (if (memv da407b@t '(type-descriptor)) da3064@type-descriptor-transformer (if (memv da407b@t '(record-type-descriptor)) da3066@record-type-descriptor-transformer (if (memv da407b@t '(record-constructor-descriptor)) da3068@record-constructor-descriptor-transformer (if (memv da407b@t '(fluid-let-syntax)) da3062@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" da4079@name)))))))))))))))))))) (set! da4ba3@da30d4@core-macro-transformer da30d4@core-macro-transformer) (set! da30d6@symbol-macro (lambda (da407d@x da407e@set) (let ((da4081@t da407d@x)) (let ((da4083@ls/false (da30c6@syntax-dispatch da4081@t '(_ any)))) (if (and da4083@ls/false (apply (lambda (da4085@name) (and (da2ebf@id? da4085@name) (memq (da2ec1@id->sym da4085@name) da407e@set))) da4083@ls/false)) (apply (lambda (da4087@name) (da307c@bless (list 'quote da4087@name))) da4083@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4081@t)))))) (set! da4ba4@da30d6@symbol-macro da30d6@symbol-macro) (set! da30d8@macro-transformer (lambda (da4089@x) (if (procedure? da4089@x) da4089@x (if (symbol? da4089@x) (let ((da408b@t da4089@x)) (if (memv da408b@t '(define-record-type)) da30ba@define-record-type-macro (if (memv da408b@t '(define-struct)) da30b8@define-struct-macro (if (memv da408b@t '(include)) da30ae@include-macro (if (memv da408b@t '(cond)) da30aa@cond-macro (if (memv da408b@t '(let)) da3082@let-macro (if (memv da408b@t '(do)) da30a2@do-macro (if (memv da408b@t '(or)) da30a6@or-macro (if (memv da408b@t '(and)) da30a8@and-macro (if (memv da408b@t '(let*)) da30a4@let*-macro (if (memv da408b@t '(let-values)) da3084@let-values-macro (if (memv da408b@t '(let*-values)) da3086@let*-values-macro (if (memv da408b@t '(syntax-rules)) da30b2@syntax-rules-macro (if (memv da408b@t '(quasiquote)) da30b4@quasiquote-macro (if (memv da408b@t '(quasisyntax)) da30b6@quasisyntax-macro (if (memv da408b@t '(with-syntax)) da307e@with-syntax-macro (if (memv da408b@t '(when)) da306a@when-macro (if (memv da408b@t '(unless)) da306c@unless-macro (if (memv da408b@t '(case)) da3074@case-macro (if (memv da408b@t '(identifier-syntax)) da30a0@identifier-syntax-macro (if (memv da408b@t '(time)) da3098@time-macro (if (memv da408b@t '(delay)) da309a@delay-macro (if (memv da408b@t '(assert)) da309c@assert-macro (if (memv da408b@t '(endianness)) da309e@endianness-macro (if (memv da408b@t '(guard)) da3094@guard-macro (if (memv da408b@t '(define-enumeration)) da3096@define-enumeration-macro (if (memv da408b@t '(trace-lambda)) da3088@trace-lambda-macro (if (memv da408b@t '(trace-define)) da308a@trace-define-macro (if (memv da408b@t '(trace-define-syntax)) da308c@trace-define-syntax-macro (if (memv da408b@t '(trace-let-syntax)) da3090@trace-let-syntax-macro (if (memv da408b@t '(trace-letrec-syntax)) da3092@trace-letrec-syntax-macro (if (memv da408b@t '(define-condition-type)) da30bc@define-condition-type-macro (if (memv da408b@t '(parameterize)) da30c0@parameterize-macro (if (memv da408b@t '(include-into)) da30b0@include-into-macro (if (memv da408b@t '(eol-style)) (lambda (da408d@x) (da30d6@symbol-macro da408d@x '(none lf cr crlf nel crnel ls))) (if (memv da408b@t '(error-handling-mode)) (lambda (da408f@x) (da30d6@symbol-macro da408f@x '(ignore raise replace))) (if (memv da408b@t '(buffer-mode)) (lambda (da4091@x) (da30d6@symbol-macro da4091@x '(none line block))) (if (memv da408b@t '(file-options)) da2e3a@file-options-macro (if (memv da408b@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) da30be@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" da4089@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" da4089@x))))) (set! da4ba5@da30d8@macro-transformer da30d8@macro-transformer) (set! da30da@local-macro-transformer (lambda (da4093@x) (car da4093@x))) (set! da4ba6@da30da@local-macro-transformer da30da@local-macro-transformer) (set! da30dc@do-macro-call (lambda (da4095@transformer da4096@expr) (let ((da4099@out (da4095@transformer (da2ea9@add-mark da2ea3@anti-mark da4096@expr '#f)))) (begin (let da409d@f ((da409b@x da4099@out)) (if (not (da2e8b@stx? da409b@x)) (if (pair? da409b@x) (begin (da409d@f (car da409b@x)) (da409d@f (cdr da409b@x))) (if (vector? da409b@x) (vector-for-each da409d@f da409b@x) (if (symbol? da409b@x) (da31a6@syntax-violation '#f '"raw symbol encountered in output of macro" da4096@expr da409b@x) (void)))) (void))) (da2ea9@add-mark (da2ea1@gen-mark) da4099@out da4096@expr))))) (set! da4ba7@da30dc@do-macro-call da30dc@do-macro-call) (set! da30de@chi-macro (lambda (da409f@p da40a0@e) (da30dc@do-macro-call (da30d8@macro-transformer da409f@p) da40a0@e))) (set! da4ba8@da30de@chi-macro da30de@chi-macro) (set! da30e0@chi-local-macro (lambda (da40a3@p da40a4@e) (da30dc@do-macro-call (da30da@local-macro-transformer da40a3@p) da40a4@e))) (set! da4ba9@da30e0@chi-local-macro da30e0@chi-local-macro) (set! da30e2@chi-global-macro (lambda (da40a7@p da40a8@e) (let ((da40ab@lib (car da40a7@p)) (da40ac@loc (cdr da40a7@p))) (begin (da2cd6@da2b25@visit-library da40ab@lib) (let ((da40af@x (symbol-value da40ac@loc))) (let ((da40b1@transformer (if (procedure? da40af@x) da40af@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" da40af@x)))) (da30dc@do-macro-call da40b1@transformer da40a8@e))))))) (set! da4baa@da30e2@chi-global-macro da30e2@chi-global-macro) (set! da30e4@chi-expr* (lambda (da40b3@e* da40b4@r da40b5@mr) (if (null? da40b3@e*) '() (let ((da40b9@e (da30e8@chi-expr (car da40b3@e*) da40b4@r da40b5@mr))) (cons da40b9@e (da30e4@chi-expr* (cdr da40b3@e*) da40b4@r da40b5@mr)))))) (set! da4bab@da30e4@chi-expr* da30e4@chi-expr*) (set! da30e6@chi-application (lambda (da40bb@e da40bc@r da40bd@mr) (let ((da40c1@t da40bb@e)) (let ((da40c3@ls/false (da30c6@syntax-dispatch da40c1@t '(any . each-any)))) (if da40c3@ls/false (apply (lambda (da40c5@rator da40c6@rands) (let ((da40c9@rator (da30e8@chi-expr da40c5@rator da40bc@r da40bd@mr))) (cons da40c9@rator (da30e4@chi-expr* da40c6@rands da40bc@r da40bd@mr)))) da40c3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da40c1@t)))))) (set! da4bac@da30e6@chi-application da30e6@chi-application) (set! da30e8@chi-expr (lambda (da40cb@e da40cc@r da40cd@mr) (call-with-values (lambda () (da2ee1@syntax-type da40cb@e da40cc@r)) (lambda (da40d7@da40d2 da40d8@da40d4 da40d9@da40d6) (let ((da40dd@kwd da40d9@da40d6) (da40de@value da40d8@da40d4) (da40df@type da40d7@da40d2)) (let ((da40e3@t da40df@type)) (if (memv da40e3@t '(core-macro)) (let ((da40e5@transformer (da30d4@core-macro-transformer da40de@value))) (da40e5@transformer da40cb@e da40cc@r da40cd@mr)) (if (memv da40e3@t '(global)) (let ((da40e7@lib (car da40de@value))) (let ((da40e9@loc (cdr da40de@value))) (begin ((da312e@inv-collector) da40e7@lib) da40e9@loc))) (if (memv da40e3@t '(core-prim)) (let ((da40eb@name da40de@value)) (list 'primitive da40eb@name)) (if (memv da40e3@t '(call)) (da30e6@chi-application da40cb@e da40cc@r da40cd@mr) (if (memv da40e3@t '(lexical)) (let ((da40ed@lex (da3050@lexical-var da40de@value))) da40ed@lex) (if (memv da40e3@t '(global-macro global-macro!)) (da30e8@chi-expr (da30e2@chi-global-macro da40de@value da40cb@e) da40cc@r da40cd@mr) (if (memv da40e3@t '(local-macro local-macro!)) (da30e8@chi-expr (da30e0@chi-local-macro da40de@value da40cb@e) da40cc@r da40cd@mr) (if (memv da40e3@t '(macro macro!)) (da30e8@chi-expr (da30de@chi-macro da40de@value da40cb@e) da40cc@r da40cd@mr) (if (memv da40e3@t '(constant)) (let ((da40ef@datum da40de@value)) (list 'quote da40ef@datum)) (if (memv da40e3@t '(set!)) (da30ea@chi-set! da40cb@e da40cc@r da40cd@mr) (if (memv da40e3@t '(begin)) (let ((da40f1@t da40cb@e)) (let ((da40f3@ls/false (da30c6@syntax-dispatch da40f1@t '(_ any . each-any)))) (if da40f3@ls/false (apply (lambda (da40f5@x da40f6@x*) (da2e24@da2d7e@build-sequence '#f (da30e4@chi-expr* (cons da40f5@x da40f6@x*) da40cc@r da40cd@mr))) da40f3@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da40f1@t)))) (if (memv da40e3@t '(let-syntax letrec-syntax)) (let ((da40f9@t da40cb@e)) (let ((da40fb@ls/false (da30c6@syntax-dispatch da40f9@t '(_ #(each (any any)) any . each-any)))) (if (and da40fb@ls/false (apply (lambda (da40fd@xlhs* da40fe@xrhs* da40ff@xbody da4100@xbody*) (if (not (da2ec7@valid-bound-ids? da40fd@xlhs*)) (da31a6@syntax-violation '#f '"invalid identifiers" da40cb@e) (void))) da40fb@ls/false)) (apply (lambda (da4105@xlhs* da4106@xrhs* da4107@xbody da4108@xbody*) (let ((da410d@xlab* (map da2e4b@gen-label da4105@xlhs*))) (let ((da410f@xrib (da2e7f@make-full-rib da4105@xlhs* da410d@xlab*))) (let ((da4111@xb* (map (lambda (da4113@x) (da2ef7@make-eval-transformer (da3120@expand-transformer (if (eq? da40df@type 'let-syntax) da4113@x (da2eab@add-subst da410f@xrib da4113@x)) da40cd@mr))) da4106@xrhs*))) (da2e24@da2d7e@build-sequence '#f (da30e4@chi-expr* (map (lambda (da4115@x) (da2eab@add-subst da410f@xrib da4115@x)) (cons da4107@xbody da4108@xbody*)) (append (map cons da410d@xlab* da4111@xb*) da40cc@r) (append (map cons da410d@xlab* da4111@xb*) da40cd@mr))))))) da40fb@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da40f9@t)))) (if (memv da40e3@t '(displaced-lexical)) (da31a6@syntax-violation '#f '"identifier out of context" da40cb@e) (if (memv da40e3@t '(syntax)) (da31a6@syntax-violation '#f '"reference to pattern variable outside a syntax form" da40cb@e) (if (memv da40e3@t '(define define-syntax module import library)) (da31a6@syntax-violation '#f (string-append (let ((da4117@t da40df@type)) (if (memv da4117@t '(define)) '"a definition" (if (memv da4117@t '(define-syntax)) '"a define-syntax" (if (memv da4117@t '(module)) '"a module definition" (if (memv da4117@t '(library)) '"a library definition" (if (memv da4117@t '(import)) '"an import declaration" (if (memv da4117@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") da40cb@e) (if (memv da40e3@t '(mutable)) (da31a6@syntax-violation '#f '"attempt to reference an unexportable variable" da40cb@e) (da31a6@syntax-violation '#f '"invalid expression" da40cb@e))))))))))))))))))))))) (set! da4bad@da30e8@chi-expr da30e8@chi-expr) (set! da30ea@chi-set! (lambda (da4119@e da411a@r da411b@mr) (let ((da411f@t da4119@e)) (let ((da4121@ls/false (da30c6@syntax-dispatch da411f@t '(_ any any)))) (if (and da4121@ls/false (apply (lambda (da4123@x da4124@v) (da2ebf@id? da4123@x)) da4121@ls/false)) (apply (lambda (da4127@x da4128@v) (call-with-values (lambda () (da2ee1@syntax-type da4127@x da411a@r)) (lambda (da4131@da412c da4132@da412e da4133@da4130) (let ((da4137@kwd da4133@da4130) (da4138@value da4132@da412e) (da4139@type da4131@da412c)) (let ((da413d@t da4139@type)) (if (memv da413d@t '(lexical)) (begin (da3054@set-lexical-mutable! da4138@value '#t) (list 'set! (da3050@lexical-var da4138@value) (da30e8@chi-expr da4128@v da411a@r da411b@mr))) (if (memv da413d@t '(core-prim)) (da31a6@syntax-violation '#f '"cannot modify imported core primitive" da4119@e) (if (memv da413d@t '(global)) (da31a6@syntax-violation '#f '"attempt to modify imported binding" da4119@e) (if (memv da413d@t '(global-macro!)) (da30e8@chi-expr (da30e2@chi-global-macro da4138@value da4119@e) da411a@r da411b@mr) (if (memv da413d@t '(local-macro!)) (da30e8@chi-expr (da30e0@chi-local-macro da4138@value da4119@e) da411a@r da411b@mr) (if (memv da413d@t '(mutable)) (da31a6@syntax-violation '#f '"attempt to assign to an unexportable variable" da4119@e) (da31a6@syntax-violation '#f '"invalid syntax" da4119@e)))))))))))) da4121@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da411f@t)))))) (set! da4bae@da30ea@chi-set! da30ea@chi-set!) (set! da30ec@verify-formals (lambda (da413f@fmls da4140@stx) (let ((da4143@t da413f@fmls)) (let ((da4145@ls/false (da30c6@syntax-dispatch da4143@t 'each-any))) (if da4145@ls/false (apply (lambda (da4147@x*) (if (not (da2ec7@valid-bound-ids? da4147@x*)) (da3080@invalid-fmls-error da4140@stx da413f@fmls) (void))) da4145@ls/false) (let ((da4149@t da4143@t)) (let ((da414b@ls/false (da30c6@syntax-dispatch da4149@t '#(each+ any () any)))) (if da414b@ls/false (apply (lambda (da414d@x* da414e@x) (if (not (da2ec7@valid-bound-ids? (cons da414e@x da414d@x*))) (da3080@invalid-fmls-error da4140@stx da413f@fmls) (void))) da414b@ls/false) (let ((da4151@t da4149@t)) (let ((da4153@ls/false (da30c6@syntax-dispatch da4151@t '_))) (if da4153@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid syntax" da4140@stx)) da4153@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4151@t)))))))))))) (set! da4baf@da30ec@verify-formals da30ec@verify-formals) (set! da30ee@chi-lambda-clause (lambda (da4155@stx da4156@fmls da4157@body* da4158@r da4159@mr) (let ((da415f@t da4156@fmls)) (let ((da4161@ls/false (da30c6@syntax-dispatch da415f@t 'each-any))) (if da4161@ls/false (apply (lambda (da4163@x*) (begin (da30ec@verify-formals da4156@fmls da4155@stx) (let ((da4165@lex* (map da2e47@gen-lexical da4163@x*)) (da4166@lab* (map da2e4b@gen-label da4163@x*))) (values da4165@lex* (da30fe@chi-internal (da2eab@add-subst (da2e7f@make-full-rib da4163@x* da4166@lab*) da4157@body*) (da3058@add-lexicals da4166@lab* da4165@lex* da4158@r) da4159@mr))))) da4161@ls/false) (let ((da4169@t da415f@t)) (let ((da416b@ls/false (da30c6@syntax-dispatch da4169@t '#(each+ any () any)))) (if da416b@ls/false (apply (lambda (da416d@x* da416e@x) (begin (da30ec@verify-formals da4156@fmls da4155@stx) (let ((da4171@lex* (map da2e47@gen-lexical da416d@x*)) (da4172@lab* (map da2e4b@gen-label da416d@x*)) (da4173@lex (da2e47@gen-lexical da416e@x)) (da4174@lab (da2e4b@gen-label da416e@x))) (values (append da4171@lex* da4173@lex) (da30fe@chi-internal (da2eab@add-subst (da2e7f@make-full-rib (cons da416e@x da416d@x*) (cons da4174@lab da4172@lab*)) da4157@body*) (da3058@add-lexicals (cons da4174@lab da4172@lab*) (cons da4173@lex da4171@lex*) da4158@r) da4159@mr))))) da416b@ls/false) (let ((da4179@t da4169@t)) (let ((da417b@ls/false (da30c6@syntax-dispatch da4179@t '_))) (if da417b@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid syntax" da4156@fmls)) da417b@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4179@t)))))))))))) (set! da4bb0@da30ee@chi-lambda-clause da30ee@chi-lambda-clause) (set! da30f0@chi-lambda-clause* (lambda (da417d@stx da417e@fmls* da417f@body** da4180@r da4181@mr) (if (null? da417e@fmls*) (values '() '()) (call-with-values (lambda () (da30ee@chi-lambda-clause da417d@stx (car da417e@fmls*) (car da417f@body**) da4180@r da4181@mr)) (lambda (da418b@da4188 da418c@da418a) (let ((da418f@b da418c@da418a) (da4190@a da418b@da4188)) (call-with-values (lambda () (da30f0@chi-lambda-clause* da417d@stx (cdr da417e@fmls*) (cdr da417f@body**) da4180@r da4181@mr)) (lambda (da4197@da4194 da4198@da4196) (let ((da419b@b* da4198@da4196) (da419c@a* da4197@da4194)) (values (cons da4190@a da419c@a*) (cons da418f@b da419b@b*))))))))))) (set! da4bb1@da30f0@chi-lambda-clause* da30f0@chi-lambda-clause*) (set! da30f2@chi-defun (lambda (da419f@x da41a0@r da41a1@mr) (let ((da41a5@fmls (car da419f@x)) (da41a6@body* (cdr da419f@x))) (call-with-values (lambda () (da30ee@chi-lambda-clause da41a5@fmls da41a5@fmls da41a6@body* da41a0@r da41a1@mr)) (lambda (da41ad@da41aa da41ae@da41ac) (let ((da41b1@body da41ae@da41ac) (da41b2@fmls da41ad@da41aa)) (da2e22@da2d4e@build-lambda '#f da41b2@fmls da41b1@body))))))) (set! da4bb2@da30f2@chi-defun da30f2@chi-defun) (set! da30f4@chi-rhs (lambda (da41b5@rhs da41b6@r da41b7@mr) (let ((da41bb@t (car da41b5@rhs))) (if (memv da41bb@t '(defun)) (da30f2@chi-defun (cdr da41b5@rhs) da41b6@r da41b7@mr) (if (memv da41bb@t '(expr)) (let ((da41bd@expr (cdr da41b5@rhs))) (da30e8@chi-expr da41bd@expr da41b6@r da41b7@mr)) (if (memv da41bb@t '(top-expr)) (let ((da41bf@expr (cdr da41b5@rhs))) (da2e24@da2d7e@build-sequence '#f (list (da30e8@chi-expr da41bf@expr da41b6@r da41b7@mr) (da2e25@da2d80@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" da41b5@rhs))))))) (set! da4bb3@da30f4@chi-rhs da30f4@chi-rhs) (set! da30f6@expand-interaction-rhs*/init* (lambda (da41c1@lhs* da41c2@rhs* da41c3@init* da41c4@r da41c5@mr) (let da41cf@f ((da41cb@lhs* da41c1@lhs*) (da41cc@rhs* da41c2@rhs*)) (if (null? da41cb@lhs*) (map (lambda (da41d1@x) (da30e8@chi-expr da41d1@x da41c4@r da41c5@mr)) da41c3@init*) (let ((da41d3@lhs (car da41cb@lhs*)) (da41d4@rhs (car da41cc@rhs*))) (let ((da41d7@t (car da41d4@rhs))) (if (memv da41d7@t '(defun)) (let ((da41d9@rhs (da30f2@chi-defun (cdr da41d4@rhs) da41c4@r da41c5@mr))) (cons (list 'set! da41d3@lhs da41d9@rhs) (da41cf@f (cdr da41cb@lhs*) (cdr da41cc@rhs*)))) (if (memv da41d7@t '(expr)) (let ((da41db@rhs (da30e8@chi-expr (cdr da41d4@rhs) da41c4@r da41c5@mr))) (cons (list 'set! da41d3@lhs da41db@rhs) (da41cf@f (cdr da41cb@lhs*) (cdr da41cc@rhs*)))) (if (memv da41d7@t '(top-expr)) (let ((da41dd@e (da30e8@chi-expr (cdr da41d4@rhs) da41c4@r da41c5@mr))) (cons da41dd@e (da41cf@f (cdr da41cb@lhs*) (cdr da41cc@rhs*)))) (error 'expand-interaction '"invallid" da41d4@rhs)))))))))) (set! da4bb4@da30f6@expand-interaction-rhs*/init* da30f6@expand-interaction-rhs*/init*) (set! da30f8@chi-rhs* (lambda (da41df@rhs* da41e0@r da41e1@mr) (let da41e7@f ((da41e5@ls da41df@rhs*)) (if (null? da41e5@ls) '() (let ((da41e9@a (da30f4@chi-rhs (car da41e5@ls) da41e0@r da41e1@mr))) (cons da41e9@a (da41e7@f (cdr da41e5@ls)))))))) (set! da4bb5@da30f8@chi-rhs* da30f8@chi-rhs*) (set! da30fa@find-bound=? (lambda (da41eb@x da41ec@lhs* da41ed@rhs*) (if (null? da41ec@lhs*) '#f (if (da2ec3@bound-id=? da41eb@x (car da41ec@lhs*)) (car da41ed@rhs*) (da30fa@find-bound=? da41eb@x (cdr da41ec@lhs*) (cdr da41ed@rhs*)))))) (set! da4bb6@da30fa@find-bound=? da30fa@find-bound=?) (set! da30fc@find-dups (lambda (da41f1@ls) (let da41f7@f ((da41f3@ls da41f1@ls) (da41f4@dups '())) (if (null? da41f3@ls) da41f4@dups (let ((da41f9@t (da30fa@find-bound=? (car da41f3@ls) (cdr da41f3@ls) (cdr da41f3@ls)))) (if da41f9@t ((lambda (da41fb@x) (da41f7@f (cdr da41f3@ls) (cons (list (car da41f3@ls) da41fb@x) da41f4@dups))) da41f9@t) (da41f7@f (cdr da41f3@ls) da41f4@dups))))))) (set! da4bb7@da30fc@find-dups da30fc@find-dups) (set! da30fe@chi-internal (lambda (da41fd@e* da41fe@r da41ff@mr) (let ((da4203@rib (da2e73@make-empty-rib))) (call-with-values (lambda () (da311e@chi-body* (map (lambda (da4215@x) (da2eab@add-subst da4203@rib da4215@x)) (da2ebd@syntax->list da41fd@e*)) da41fe@r da41ff@mr '() '() '() '() '() da4203@rib '#f)) (lambda (da4217@da4206 da4218@da4208 da4219@da420a da421a@da420c da421b@da420e da421c@da4210 da421d@da4212 da421e@da4214) (let ((da4227@_exp* da421e@da4214) (da4228@kwd* da421d@da4212) (da4229@mod** da421c@da4210) (da422a@rhs* da421b@da420e) (da422b@lex* da421a@da420c) (da422c@mr da4219@da420a) (da422d@r da4218@da4208) (da422e@e* da4217@da4206)) (begin (if (null? da422e@e*) (da31a6@syntax-violation '#f '"no expression in body" da422e@e*) (void)) (let ((da4237@init* (da30e4@chi-expr* (append (apply append (reverse da4229@mod**)) da422e@e*) da422d@r da422c@mr))) (let ((da4239@rhs* (da30f8@chi-rhs* da422a@rhs* da422d@r da422c@mr))) (da2e29@da2d88@build-letrec* '#f (reverse da422b@lex*) (reverse da4239@rhs*) (da2e24@da2d7e@build-sequence '#f da4237@init*))))))))))) (set! da4bb8@da30fe@chi-internal da30fe@chi-internal) (set! da3100@parse-module (lambda (da423b@e) (let ((da423d@t da423b@e)) (let ((da423f@ls/false (da30c6@syntax-dispatch da423d@t '(_ each-any . each-any)))) (if da423f@ls/false (apply (lambda (da4241@export* da4242@b*) (begin (if (not (for-all da2ebf@id? da4241@export*)) (da31a6@syntax-violation '#f '"module exports must be identifiers" da423b@e) (void)) (values '#f (list->vector da4241@export*) da4242@b*))) da423f@ls/false) (let ((da4245@t da423d@t)) (let ((da4247@ls/false (da30c6@syntax-dispatch da4245@t '(_ any each-any . each-any)))) (if da4247@ls/false (apply (lambda (da4249@name da424a@export* da424b@b*) (begin (if (not (da2ebf@id? da4249@name)) (da31a6@syntax-violation '#f '"module name must be an identifier" da423b@e) (void)) (if (not (for-all da2ebf@id? da424a@export*)) (da31a6@syntax-violation '#f '"module exports must be identifiers" da423b@e) (void)) (values da4249@name (list->vector da424a@export*) da424b@b*))) da4247@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4245@t))))))))) (set! da4bb9@da3100@parse-module da3100@parse-module) (set! da310a@module-interface? (lambda (da424f@x) (and (simple-struct? da424f@x) (eq? (simple-struct-name da424f@x) 'module-interface)))) (set! da4bba@da310a@module-interface? da310a@module-interface?) (set! da310c@module-interface-first-mark (lambda (da4251@x) (simple-struct-ref da4251@x '0))) (set! da4bbb@da310c@module-interface-first-mark da310c@module-interface-first-mark) (set! da310e@set-module-interface-first-mark! (lambda (da4253@x da4254@val) (simple-struct-set! da4253@x '0 da4254@val))) (set! da4bbc@da310e@set-module-interface-first-mark! da310e@set-module-interface-first-mark!) (set! da3110@module-interface-exp-id-vec (lambda (da4257@x) (simple-struct-ref da4257@x '1))) (set! da4bbd@da3110@module-interface-exp-id-vec da3110@module-interface-exp-id-vec) (set! da3112@set-module-interface-exp-id-vec! (lambda (da4259@x da425a@val) (simple-struct-set! da4259@x '1 da425a@val))) (set! da4bbe@da3112@set-module-interface-exp-id-vec! da3112@set-module-interface-exp-id-vec!) (set! da3114@module-interface-exp-lab-vec (lambda (da425d@x) (simple-struct-ref da425d@x '2))) (set! da4bbf@da3114@module-interface-exp-lab-vec da3114@module-interface-exp-lab-vec) (set! da3116@set-module-interface-exp-lab-vec! (lambda (da425f@x da4260@val) (simple-struct-set! da425f@x '2 da4260@val))) (set! da4bc0@da3116@set-module-interface-exp-lab-vec! da3116@set-module-interface-exp-lab-vec!) (set! da3118@dummy '3) (set! da4bc1@da3118@dummy da3118@dummy) (set! da311a@module-interface-exp-id* (lambda (da4263@iface da4264@id) (let ((da4268@diff-marks '#f)) (begin (set! da4268@diff-marks (lambda (da426f@ls da4270@x) (begin (if (null? da426f@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((da4273@a (car da426f@ls))) (if (eq? da4273@a da4270@x) '() (cons da4273@a (da4268@diff-marks (cdr da426f@ls) da4270@x))))))) (let ((da4269@diff (da4268@diff-marks (da2e91@stx-mark* da4264@id) (da310c@module-interface-first-mark da4263@iface))) (da426a@id-vec (da3110@module-interface-exp-id-vec da4263@iface))) (if (null? da4269@diff) da426a@id-vec (vector-map (lambda (da426d@x) (make-simple-struct 'stx '5 (list (da2e8d@stx-expr da426d@x) (append da4269@diff (da2e91@stx-mark* da426d@x)) '() '()))) da426a@id-vec))))))) (set! da4bc2@da311a@module-interface-exp-id* da311a@module-interface-exp-id*) (set! da311c@chi-internal-module (lambda (da4275@e da4276@r da4277@mr da4278@lex* da4279@rhs* da427a@mod** da427b@kwd*) (call-with-values (lambda () (da3100@parse-module da4275@e)) (lambda (da4289@da4284 da428a@da4286 da428b@da4288) (let ((da428f@e* da428b@da4288) (da4290@exp-id* da428a@da4286) (da4291@name da4289@da4284)) (let ((da4295@rib (da2e73@make-empty-rib))) (let ((da4297@e* (map (lambda (da4299@x) (da2eab@add-subst da4295@rib da4299@x)) (da2ebd@syntax->list da428f@e*)))) (call-with-values (lambda () (da311e@chi-body* da4297@e* da4276@r da4277@mr da4278@lex* da4279@rhs* da427a@mod** da427b@kwd* '() da4295@rib '#f)) (lambda (da42ab@da429c da42ac@da429e da42ad@da42a0 da42ae@da42a2 da42af@da42a4 da42b0@da42a6 da42b1@da42a8 da42b2@da42aa) (let ((da42bb@_exp* da42b2@da42aa) (da42bc@kwd* da42b1@da42a8) (da42bd@mod** da42b0@da42a6) (da42be@rhs* da42af@da42a4) (da42bf@lex* da42ae@da42a2) (da42c0@mr da42ad@da42a0) (da42c1@r da42ac@da429e) (da42c2@e* da42ab@da429c)) (let ((da42cb@exp-lab* (vector-map (lambda (da42cf@x) (or (da2ed5@id->label (make-simple-struct 'stx '5 (list (da2ec1@id->sym da42cf@x) (da2e91@stx-mark* da42cf@x) (list da4295@rib) '()))) (da31a6@syntax-violation '#f '"cannot find module export" da42cf@x))) da4290@exp-id*)) (da42cc@mod** (cons da42c2@e* da42bd@mod**))) (if (not da4291@name) (values da42bf@lex* da42be@rhs* da4290@exp-id* da42cb@exp-lab* da42c1@r da42c0@mr da42cc@mod** da42bc@kwd*) (let ((da42d1@lab (da2e4b@gen-label 'module)) (da42d2@iface (make-simple-struct 'module-interface '4 (list (car (da2e91@stx-mark* da4291@name)) (vector-map (lambda (da42d5@x) (make-simple-struct 'stx '5 (list (da2e8d@stx-expr da42d5@x) (da2e91@stx-mark* da42d5@x) '() '()))) da4290@exp-id*) da42cb@exp-lab*)))) (values da42bf@lex* da42be@rhs* (vector da4291@name) (vector da42d1@lab) (cons (cons da42d1@lab (cons '$module da42d2@iface)) da42c1@r) (cons (cons da42d1@lab (cons '$module da42d2@iface)) da42c0@mr) da42cc@mod** da42bc@kwd*)))))))))))))) (set! da4bc3@da311c@chi-internal-module da311c@chi-internal-module) (set! da311e@chi-body* (lambda (da42d7@e* da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42dd@kwd* da42de@exp* da42df@rib da42e0@top?) (if (null? da42d7@e*) (values da42d7@e* da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42dd@kwd* da42de@exp*) (let ((da42eb@e (car da42d7@e*))) (call-with-values (lambda () (da2ee1@syntax-type da42eb@e da42d8@r)) (lambda (da42f3@da42ee da42f4@da42f0 da42f5@da42f2) (let ((da42f9@kwd da42f5@da42f2) (da42fa@value da42f4@da42f0) (da42fb@type da42f3@da42ee)) (let ((da42ff@kwd* (if (da2ebf@id? da42f9@kwd) (cons da42f9@kwd da42dd@kwd*) da42dd@kwd*))) (let ((da4301@t da42fb@type)) (if (memv da4301@t '(define)) (call-with-values (lambda () (da3048@parse-define da42eb@e)) (lambda (da4307@da4304 da4308@da4306) (let ((da430b@rhs da4308@da4306) (da430c@id da4307@da4304)) (begin (if (da2ecb@bound-id-member? da430c@id da42ff@kwd*) (da31a6@syntax-violation '#f '"cannot redefine keyword" da42eb@e) (void)) (call-with-values (lambda () (da2e4f@gen-define-label+loc da430c@id da42df@rib)) (lambda (da4313@da4310 da4314@da4312) (let ((da4317@lex da4314@da4312) (da4318@lab da4313@da4310)) (begin (da2e75@extend-rib! da42df@rib da430c@id da4318@lab) (da311e@chi-body* (cdr da42d7@e*) (da3056@add-lexical da4318@lab da4317@lex da42d8@r) da42d9@mr (cons da4317@lex da42da@lex*) (cons da430b@rhs da42db@rhs*) da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?))))))))) (if (memv da4301@t '(define-syntax)) (call-with-values (lambda () (da304a@parse-define-syntax da42eb@e)) (lambda (da431f@da431c da4320@da431e) (let ((da4323@rhs da4320@da431e) (da4324@id da431f@da431c)) (begin (if (da2ecb@bound-id-member? da4324@id da42ff@kwd*) (da31a6@syntax-violation '#f '"cannot redefine keyword" da42eb@e) (void)) (let ((da4327@lab (da2e51@gen-define-label da4324@id da42df@rib)) (da4328@expanded-rhs (da3120@expand-transformer da4323@rhs da42d9@mr))) (begin (da2e75@extend-rib! da42df@rib da4324@id da4327@lab) (let ((da432b@b (da2ef7@make-eval-transformer da4328@expanded-rhs))) (da311e@chi-body* (cdr da42d7@e*) (cons (cons da4327@lab da432b@b) da42d8@r) (cons (cons da4327@lab da432b@b) da42d9@mr) da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?)))))))) (if (memv da4301@t '(let-syntax letrec-syntax)) (let ((da432d@t da42eb@e)) (let ((da432f@ls/false (da30c6@syntax-dispatch da432d@t '(_ #(each (any any)) . each-any)))) (if (and da432f@ls/false (apply (lambda (da4331@xlhs* da4332@xrhs* da4333@xbody*) (if (not (da2ec7@valid-bound-ids? da4331@xlhs*)) (da31a6@syntax-violation '#f '"invalid identifiers" da42eb@e) (void))) da432f@ls/false)) (apply (lambda (da4337@xlhs* da4338@xrhs* da4339@xbody*) (let ((da433d@xlab* (map da2e4b@gen-label da4337@xlhs*))) (let ((da433f@xrib (da2e7f@make-full-rib da4337@xlhs* da433d@xlab*))) (let ((da4341@xb* (map (lambda (da4343@x) (da2ef7@make-eval-transformer (da3120@expand-transformer (if (eq? da42fb@type 'let-syntax) da4343@x (da2eab@add-subst da433f@xrib da4343@x)) da42d9@mr))) da4338@xrhs*))) (da311e@chi-body* (append (map (lambda (da4345@x) (da2eab@add-subst da433f@xrib da4345@x)) da4339@xbody*) (cdr da42d7@e*)) (append (map cons da433d@xlab* da4341@xb*) da42d8@r) (append (map cons da433d@xlab* da4341@xb*) da42d9@mr) da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?))))) da432f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da432d@t)))) (if (memv da4301@t '(begin)) (let ((da4347@t da42eb@e)) (let ((da4349@ls/false (da30c6@syntax-dispatch da4347@t '(_ . each-any)))) (if da4349@ls/false (apply (lambda (da434b@x*) (da311e@chi-body* (append da434b@x* (cdr da42d7@e*)) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?)) da4349@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4347@t)))) (if (memv da4301@t '(global-macro global-macro!)) (da311e@chi-body* (cons (da2eab@add-subst da42df@rib (da30e2@chi-global-macro da42fa@value da42eb@e)) (cdr da42d7@e*)) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?) (if (memv da4301@t '(local-macro local-macro!)) (da311e@chi-body* (cons (da2eab@add-subst da42df@rib (da30e0@chi-local-macro da42fa@value da42eb@e)) (cdr da42d7@e*)) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?) (if (memv da4301@t '(macro macro!)) (da311e@chi-body* (cons (da2eab@add-subst da42df@rib (da30de@chi-macro da42fa@value da42eb@e)) (cdr da42d7@e*)) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?) (if (memv da4301@t '(module)) (call-with-values (lambda () (da311c@chi-internal-module da42eb@e da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd*)) (lambda (da435d@da434e da435e@da4350 da435f@da4352 da4360@da4354 da4361@da4356 da4362@da4358 da4363@da435a da4364@da435c) (let ((da436d@kwd* da4364@da435c) (da436e@mod** da4363@da435a) (da436f@mr da4362@da4358) (da4370@r da4361@da4356) (da4371@m-exp-lab* da4360@da4354) (da4372@m-exp-id* da435f@da4352) (da4373@rhs* da435e@da4350) (da4374@lex* da435d@da434e)) (begin (vector-for-each (lambda (da437d@id da437e@lab) (da2e75@extend-rib! da42df@rib da437d@id da437e@lab)) da4372@m-exp-id* da4371@m-exp-lab*) (da311e@chi-body* (cdr da42d7@e*) da4370@r da436f@mr da4374@lex* da4373@rhs* da436e@mod** da436d@kwd* da42de@exp* da42df@rib da42e0@top?))))) (if (memv da4301@t '(library)) (begin (da3188@library-expander (da2ed3@stx->datum da42eb@e)) (da311e@chi-body* (cdr da42d7@e*) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?)) (if (memv da4301@t '(export)) (let ((da4381@t da42eb@e)) (let ((da4383@ls/false (da30c6@syntax-dispatch da4381@t '(_ . each-any)))) (if da4383@ls/false (apply (lambda (da4385@exp-decl*) (da311e@chi-body* (cdr da42d7@e*) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* (append da4385@exp-decl* da42de@exp*) da42df@rib da42e0@top?)) da4383@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4381@t)))) (if (memv da4301@t '(import)) (let ((da4388@module-import? '#f) (da438a@module-import '#f) (da438c@library-import '#f)) (begin (set! da4388@module-import? (lambda (da43db@e) (let ((da43dd@t da43db@e)) (let ((da43df@ls/false (da30c6@syntax-dispatch da43dd@t '(_ any)))) (if (and da43df@ls/false (apply (lambda (da43e1@id) (da2ebf@id? da43e1@id)) da43df@ls/false)) (apply (lambda (da43e3@id) '#t) da43df@ls/false) (let ((da43e5@t da43dd@t)) (let ((da43e7@ls/false (da30c6@syntax-dispatch da43e5@t '(_ . each-any)))) (if da43e7@ls/false (apply (lambda (da43e9@imp*) '#f) da43e7@ls/false) (let ((da43eb@t da43e5@t)) (let ((da43ed@ls/false (da30c6@syntax-dispatch da43eb@t '_))) (if da43ed@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"malformed import form" da43db@e)) da43ed@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da43eb@t)))))))))))) (set! da438a@module-import (lambda (da43b9@e da43ba@r) (let ((da43bd@t da43b9@e)) (let ((da43bf@ls/false (da30c6@syntax-dispatch da43bd@t '(_ any)))) (if (and da43bf@ls/false (apply (lambda (da43c1@id) (da2ebf@id? da43c1@id)) da43bf@ls/false)) (apply (lambda (da43c3@id) (call-with-values (lambda () (da2ee1@syntax-type da43c3@id da43ba@r)) (lambda (da43cb@da43c6 da43cc@da43c8 da43cd@da43ca) (let ((da43d1@kwd da43cd@da43ca) (da43d2@value da43cc@da43c8) (da43d3@type da43cb@da43c6)) (let ((da43d7@t da43d3@type)) (if (memv da43d7@t '($module)) (let ((da43d9@iface da43d2@value)) (values (da311a@module-interface-exp-id* da43d9@iface da43c3@id) (da3114@module-interface-exp-lab-vec da43d9@iface))) (da31a6@syntax-violation '#f '"invalid import" da43b9@e))))))) da43bf@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da43bd@t)))))) (set! da438c@library-import (lambda (da439d@e) (let ((da439f@t da439d@e)) (let ((da43a1@ls/false (da30c6@syntax-dispatch da439f@t '(any . each-any)))) (if da43a1@ls/false (apply (lambda (da43a3@ctxt da43a4@imp*) (call-with-values (lambda () (da3128@parse-import-spec* (da31ac@syntax->datum da43a4@imp*))) (lambda (da43ab@da43a8 da43ac@da43aa) (let ((da43af@subst-labels da43ac@da43aa) (da43b0@subst-names da43ab@da43a8)) (values (vector-map (lambda (da43b3@name) (da2e9f@datum->stx da43a3@ctxt da43b3@name)) da43b0@subst-names) da43af@subst-labels))))) da43a1@ls/false) (let ((da43b5@t da439f@t)) (let ((da43b7@ls/false (da30c6@syntax-dispatch da43b5@t '_))) (if da43b7@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid import form" da439d@e)) da43b7@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da43b5@t))))))))) (begin (call-with-values (lambda () (if (da4388@module-import? da42eb@e) (da438a@module-import da42eb@e da42d8@r) (da438c@library-import da42eb@e))) (lambda (da4391@da438e da4392@da4390) (let ((da4395@lab* da4392@da4390) (da4396@id* da4391@da438e)) (vector-for-each (lambda (da4399@id da439a@lab) (da2e75@extend-rib! da42df@rib da4399@id da439a@lab)) da4396@id* da4395@lab*)))) (da311e@chi-body* (cdr da42d7@e*) da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?)))) (if da42e0@top? (da311e@chi-body* (cdr da42d7@e*) da42d8@r da42d9@mr (cons (da2e47@gen-lexical 'dummy) da42da@lex*) (cons (cons 'top-expr da42eb@e) da42db@rhs*) da42dc@mod** da42ff@kwd* da42de@exp* da42df@rib da42e0@top?) (values da42d7@e* da42d8@r da42d9@mr da42da@lex* da42db@rhs* da42dc@mod** da42ff@kwd* da42de@exp*)))))))))))))))))))))) (set! da4bc4@da311e@chi-body* da311e@chi-body*) (set! da3120@expand-transformer (lambda (da43ef@expr da43f0@r) (let ((da43f3@rtc (da312c@make-collector))) (let ((da43f5@expanded-rhs (let ((da43ff@da43f8 da312e@inv-collector) (da4400@da43fa da3130@vis-collector) (da4401@da43fc da43f3@rtc) (da4402@da43fe (lambda (da4407@x) (values)))) (let ((da4409@swap (lambda () (begin (let ((da440b@t (da43ff@da43f8))) (begin (da43ff@da43f8 da4401@da43fc) (set! da4401@da43fc da440b@t))) (let ((da440d@t (da4400@da43fa))) (begin (da4400@da43fa da4402@da43fe) (set! da4402@da43fe da440d@t))))))) (dynamic-wind da4409@swap (lambda () (da30e8@chi-expr da43ef@expr da43f0@r da43f0@r)) da4409@swap))))) (begin (for-each (let ((da440f@mark-visit (da3130@vis-collector))) (lambda (da4411@x) (begin (da2cd5@da2b23@invoke-library da4411@x) (da440f@mark-visit da4411@x)))) (da43f3@rtc)) da43f5@expanded-rhs))))) (set! da4bc5@da3120@expand-transformer da3120@expand-transformer) (set! da3122@parse-exports (lambda (da4413@exp*) (let da441b@f ((da4415@exp* da4413@exp*) (da4416@int* '()) (da4417@ext* '())) (if (null? da4415@exp*) (begin (if (not (da2ec7@valid-bound-ids? da4417@ext*)) (da31a6@syntax-violation 'export '"invalid exports" (da30fc@find-dups da4417@ext*)) (void)) (values (map da31ac@syntax->datum da4417@ext*) da4416@int*)) (let ((da441d@t (car da4415@exp*))) (let ((da441f@ls/false (da30c6@syntax-dispatch da441d@t '(any . #(each (any any)))))) (if da441f@ls/false (apply (lambda (da4421@rename da4422@i* da4423@e*) (begin (if (not (and (eq? (da31ac@syntax->datum da4421@rename) 'rename) (for-all da2ebf@id? da4422@i*) (for-all da2ebf@id? da4423@e*))) (da31a6@syntax-violation 'export '"invalid export specifier" (car da4415@exp*)) (void)) (da441b@f (cdr da4415@exp*) (append da4422@i* da4416@int*) (append da4423@e* da4417@ext*)))) da441f@ls/false) (let ((da4427@t da441d@t)) (let ((da4429@ls/false (da30c6@syntax-dispatch da4427@t 'any))) (if da4429@ls/false (apply (lambda (da442b@ie) (begin (if (not (da2ebf@id? da442b@ie)) (da31a6@syntax-violation 'export '"invalid export" da442b@ie) (void)) (da441b@f (cdr da4415@exp*) (cons da442b@ie da4416@int*) (cons da442b@ie da4417@ext*)))) da4429@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4427@t))))))))))) (set! da4bc6@da3122@parse-exports da3122@parse-exports) (set! da3124@parse-library-name (lambda (da442d@spec) (let ((da4430@parse '#f)) (begin (set! da4430@parse (lambda (da443d@x) (let ((da443f@t da443d@x)) (let ((da4441@ls/false (da30c6@syntax-dispatch da443f@t '(each-any)))) (if (and da4441@ls/false (apply (lambda (da4443@v*) (for-all (lambda (da4445@x) (let ((da4447@x (da31ac@syntax->datum da4445@x))) (and (integer? da4447@x) (exact? da4447@x)))) da4443@v*)) da4441@ls/false)) (apply (lambda (da4449@v*) (values '() (map da31ac@syntax->datum da4449@v*))) da4441@ls/false) (let ((da444b@t da443f@t)) (let ((da444d@ls/false (da30c6@syntax-dispatch da444b@t '(any . any)))) (if (and da444d@ls/false (apply (lambda (da444f@x da4450@rest) (symbol? (da31ac@syntax->datum da444f@x))) da444d@ls/false)) (apply (lambda (da4453@x da4454@rest) (call-with-values (lambda () (da4430@parse da4454@rest)) (lambda (da445b@da4458 da445c@da445a) (let ((da445f@v* da445c@da445a) (da4460@x* da445b@da4458)) (values (cons (da31ac@syntax->datum da4453@x) da4460@x*) da445f@v*))))) da444d@ls/false) (let ((da4463@t da444b@t)) (let ((da4465@ls/false (da30c6@syntax-dispatch da4463@t '()))) (if da4465@ls/false (apply (lambda () (values '() '())) da4465@ls/false) (let ((da4467@t da4463@t)) (let ((da4469@ls/false (da30c6@syntax-dispatch da4467@t '_))) (if da4469@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid library name" da442d@spec)) da4469@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4467@t))))))))))))))) (call-with-values (lambda () (da4430@parse da442d@spec)) (lambda (da4435@da4432 da4436@da4434) (let ((da4439@ver* da4436@da4434) (da443a@name* da4435@da4432)) (begin (if (null? da443a@name*) (da31a6@syntax-violation '#f '"empty library name" da442d@spec) (void)) (values da443a@name* da4439@ver*))))))))) (set! da4bc7@da3124@parse-library-name da3124@parse-library-name) (set! da3126@parse-library (lambda (da446b@e) (let ((da446d@t da446b@e)) (let ((da446f@ls/false (da30c6@syntax-dispatch da446d@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and da446f@ls/false (apply (lambda (da4471@library da4472@name* da4473@export da4474@exp* da4475@import da4476@imp* da4477@b*) (and (eq? (da31ac@syntax->datum da4473@export) 'export) (eq? (da31ac@syntax->datum da4475@import) 'import) (eq? (da31ac@syntax->datum da4471@library) 'library))) da446f@ls/false)) (apply (lambda (da447f@library da4480@name* da4481@export da4482@exp* da4483@import da4484@imp* da4485@b*) (values da4480@name* da4482@exp* da4484@imp* da4485@b*)) da446f@ls/false) (let ((da448d@t da446d@t)) (let ((da448f@ls/false (da30c6@syntax-dispatch da448d@t '_))) (if da448f@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"malformed library" da446b@e)) da448f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da448d@t))))))))) (set! da4bc8@da3126@parse-library da3126@parse-library) (set! da3128@parse-import-spec* (let ((da4492@idsyn? '#f) (da4494@dup-error '#f) (da4496@merge-substs '#f) (da4498@exclude* '#f) (da449a@find* '#f) (da449c@rem* '#f) (da449e@remove-dups '#f) (da44a0@parse-library-name '#f) (da44a2@import-library '#f) (da44a4@get-import '#f) (da44a6@add-imports! '#f)) (begin (set! da4492@idsyn? (lambda (da469b@x) (symbol? (da31ac@syntax->datum da469b@x)))) (set! da4494@dup-error (lambda (da4699@name) (da31a6@syntax-violation 'import '"two imports with different bindings" da4699@name))) (set! da4496@merge-substs (lambda (da4687@s da4688@subst) (let ((da468c@insert-to-subst '#f)) (begin (set! da468c@insert-to-subst (lambda (da468d@a da468e@subst) (let ((da4691@name (car da468d@a)) (da4692@label (cdr da468d@a))) (let ((da4695@t (assq da4691@name da468e@subst))) (if da4695@t ((lambda (da4697@x) (if (eq? (cdr da4697@x) da4692@label) da468e@subst (da4494@dup-error da4691@name))) da4695@t) (cons da468d@a da468e@subst)))))) (if (null? da4687@s) da4688@subst (da468c@insert-to-subst (car da4687@s) (da4496@merge-substs (cdr da4687@s) da4688@subst))))))) (set! da4498@exclude* (lambda (da4657@sym* da4658@subst) (let ((da465c@exclude '#f)) (begin (set! da465c@exclude (lambda (da4675@sym da4676@subst) (if (null? da4676@subst) (da31a6@syntax-violation 'import '"cannot rename unbound identifier" da4675@sym) (if (eq? da4675@sym (caar da4676@subst)) (values (cdar da4676@subst) (cdr da4676@subst)) (let ((da4679@a (car da4676@subst))) (call-with-values (lambda () (da465c@exclude da4675@sym (cdr da4676@subst))) (lambda (da467f@da467c da4680@da467e) (let ((da4683@subst da4680@da467e) (da4684@old da467f@da467c)) (values da4684@old (cons da4679@a da4683@subst)))))))))) (if (null? da4657@sym*) (values '() da4658@subst) (call-with-values (lambda () (da465c@exclude (car da4657@sym*) da4658@subst)) (lambda (da4661@da465e da4662@da4660) (let ((da4665@subst da4662@da4660) (da4666@old da4661@da465e)) (call-with-values (lambda () (da4498@exclude* (cdr da4657@sym*) da4665@subst)) (lambda (da466d@da466a da466e@da466c) (let ((da4671@subst da466e@da466c) (da4672@old* da466d@da466a)) (values (cons da4666@old da4672@old*) da4671@subst)))))))))))) (set! da449a@find* (lambda (da464f@sym* da4650@subst) (map (lambda (da4653@x) (let ((da4655@t (assq da4653@x da4650@subst))) (if da4655@t (cdr da4655@t) (da31a6@syntax-violation 'import '"cannot find identifier" da4653@x)))) da464f@sym*))) (set! da449c@rem* (lambda (da4647@sym* da4648@subst) (let da464d@f ((da464b@subst da4648@subst)) (if (null? da464b@subst) '() (if (memq (caar da464b@subst) da4647@sym*) (da464d@f (cdr da464b@subst)) (cons (car da464b@subst) (da464d@f (cdr da464b@subst)))))))) (set! da449e@remove-dups (lambda (da4645@ls) (if (null? da4645@ls) '() (if (memq (car da4645@ls) (cdr da4645@ls)) (da449e@remove-dups (cdr da4645@ls)) (cons (car da4645@ls) (da449e@remove-dups (cdr da4645@ls))))))) (set! da44a0@parse-library-name (lambda (da455d@spec) (let ((da4560@subversion? '#f) (da4562@subversion-pred '#f) (da4564@version-pred '#f)) (begin (set! da4560@subversion? (lambda (da4641@x) (let ((da4643@x (da31ac@syntax->datum da4641@x))) (and (integer? da4643@x) (exact? da4643@x) (>= da4643@x '0))))) (set! da4562@subversion-pred (lambda (da45e1@x*) (let ((da45e3@t da45e1@x*)) (let ((da45e5@ls/false (da30c6@syntax-dispatch da45e3@t 'any))) (if (and da45e5@ls/false (apply (lambda (da45e7@n) (da4560@subversion? da45e7@n)) da45e5@ls/false)) (apply (lambda (da45e9@n) (lambda (da45eb@x) (= da45eb@x (da31ac@syntax->datum da45e9@n)))) da45e5@ls/false) (let ((da45ed@t da45e3@t)) (let ((da45ef@ls/false (da30c6@syntax-dispatch da45ed@t '(any . each-any)))) (if (and da45ef@ls/false (apply (lambda (da45f1@p? da45f2@sub*) (eq? (da31ac@syntax->datum da45f1@p?) 'and)) da45ef@ls/false)) (apply (lambda (da45f5@p? da45f6@sub*) (let ((da45f9@p* (map da4562@subversion-pred da45f6@sub*))) (lambda (da45fb@x) (for-all (lambda (da45fd@p) (da45fd@p da45fb@x)) da45f9@p*)))) da45ef@ls/false) (let ((da45ff@t da45ed@t)) (let ((da4601@ls/false (da30c6@syntax-dispatch da45ff@t '(any . each-any)))) (if (and da4601@ls/false (apply (lambda (da4603@p? da4604@sub*) (eq? (da31ac@syntax->datum da4603@p?) 'or)) da4601@ls/false)) (apply (lambda (da4607@p? da4608@sub*) (let ((da460b@p* (map da4562@subversion-pred da4608@sub*))) (lambda (da460d@x) (exists (lambda (da460f@p) (da460f@p da460d@x)) da460b@p*)))) da4601@ls/false) (let ((da4611@t da45ff@t)) (let ((da4613@ls/false (da30c6@syntax-dispatch da4611@t '(any any)))) (if (and da4613@ls/false (apply (lambda (da4615@p? da4616@sub) (eq? (da31ac@syntax->datum da4615@p?) 'not)) da4613@ls/false)) (apply (lambda (da4619@p? da461a@sub) (let ((da461d@p (da4562@subversion-pred da461a@sub))) (lambda (da461f@x) (not (da461d@p da461f@x))))) da4613@ls/false) (let ((da4621@t da4611@t)) (let ((da4623@ls/false (da30c6@syntax-dispatch da4621@t '(any any)))) (if (and da4623@ls/false (apply (lambda (da4625@p? da4626@n) (and (eq? (da31ac@syntax->datum da4625@p?) '<=) (da4560@subversion? da4626@n))) da4623@ls/false)) (apply (lambda (da4629@p? da462a@n) (lambda (da462d@x) (<= da462d@x (da31ac@syntax->datum da462a@n)))) da4623@ls/false) (let ((da462f@t da4621@t)) (let ((da4631@ls/false (da30c6@syntax-dispatch da462f@t '(any any)))) (if (and da4631@ls/false (apply (lambda (da4633@p? da4634@n) (and (eq? (da31ac@syntax->datum da4633@p?) '>=) (da4560@subversion? da4634@n))) da4631@ls/false)) (apply (lambda (da4637@p? da4638@n) (lambda (da463b@x) (>= da463b@x (da31ac@syntax->datum da4638@n)))) da4631@ls/false) (let ((da463d@t da462f@t)) (let ((da463f@ls/false (da30c6@syntax-dispatch da463d@t '_))) (if da463f@ls/false (apply (lambda () (da31a6@syntax-violation 'import '"invalid sub-version spec" da455d@spec da45e1@x*)) da463f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da463d@t)))))))))))))))))))))))) (set! da4564@version-pred (lambda (da4591@x*) (let ((da4593@t da4591@x*)) (let ((da4595@ls/false (da30c6@syntax-dispatch da4593@t '()))) (if da4595@ls/false (apply (lambda () (lambda (da4597@x) '#t)) da4595@ls/false) (let ((da4599@t da4593@t)) (let ((da459b@ls/false (da30c6@syntax-dispatch da4599@t '(any . each-any)))) (if (and da459b@ls/false (apply (lambda (da459d@c da459e@ver*) (eq? (da31ac@syntax->datum da459d@c) 'and)) da459b@ls/false)) (apply (lambda (da45a1@c da45a2@ver*) (let ((da45a5@p* (map da4564@version-pred da45a2@ver*))) (lambda (da45a7@x) (for-all (lambda (da45a9@p) (da45a9@p da45a7@x)) da45a5@p*)))) da459b@ls/false) (let ((da45ab@t da4599@t)) (let ((da45ad@ls/false (da30c6@syntax-dispatch da45ab@t '(any . each-any)))) (if (and da45ad@ls/false (apply (lambda (da45af@c da45b0@ver*) (eq? (da31ac@syntax->datum da45af@c) 'or)) da45ad@ls/false)) (apply (lambda (da45b3@c da45b4@ver*) (let ((da45b7@p* (map da4564@version-pred da45b4@ver*))) (lambda (da45b9@x) (exists (lambda (da45bb@p) (da45bb@p da45b9@x)) da45b7@p*)))) da45ad@ls/false) (let ((da45bd@t da45ab@t)) (let ((da45bf@ls/false (da30c6@syntax-dispatch da45bd@t '(any any)))) (if (and da45bf@ls/false (apply (lambda (da45c1@c da45c2@ver) (eq? (da31ac@syntax->datum da45c1@c) 'not)) da45bf@ls/false)) (apply (lambda (da45c5@c da45c6@ver) (let ((da45c9@p (da4564@version-pred da45c6@ver))) (lambda (da45cb@x) (not (da45c9@p da45cb@x))))) da45bf@ls/false) (let ((da45cd@t da45bd@t)) (let ((da45cf@ls/false (da30c6@syntax-dispatch da45cd@t 'each-any))) (if da45cf@ls/false (apply (lambda (da45d1@sub*) (let ((da45d3@p* (map da4562@subversion-pred da45d1@sub*))) (lambda (da45d5@x) (let da45db@f ((da45d7@p* da45d3@p*) (da45d8@x da45d5@x)) (if (null? da45d7@p*) '#t (if (null? da45d8@x) '#f (and ((car da45d7@p*) (car da45d8@x)) (da45db@f (cdr da45d7@p*) (cdr da45d8@x))))))))) da45cf@ls/false) (let ((da45dd@t da45cd@t)) (let ((da45df@ls/false (da30c6@syntax-dispatch da45dd@t '_))) (if da45df@ls/false (apply (lambda () (da31a6@syntax-violation 'import '"invalid version spec" da455d@spec da4591@x*)) da45df@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da45dd@t))))))))))))))))))))) (let da4567@f ((da4565@x da455d@spec)) (let ((da4569@t da4565@x)) (let ((da456b@ls/false (da30c6@syntax-dispatch da4569@t '(each-any)))) (if da456b@ls/false (apply (lambda (da456d@version-spec*) (values '() (da4564@version-pred da456d@version-spec*))) da456b@ls/false) (let ((da456f@t da4569@t)) (let ((da4571@ls/false (da30c6@syntax-dispatch da456f@t '(any . any)))) (if (and da4571@ls/false (apply (lambda (da4573@x da4574@x*) (da4492@idsyn? da4573@x)) da4571@ls/false)) (apply (lambda (da4577@x da4578@x*) (call-with-values (lambda () (da4567@f da4578@x*)) (lambda (da457f@da457c da4580@da457e) (let ((da4583@pred da4580@da457e) (da4584@name da457f@da457c)) (values (cons (da31ac@syntax->datum da4577@x) da4584@name) da4583@pred))))) da4571@ls/false) (let ((da4587@t da456f@t)) (let ((da4589@ls/false (da30c6@syntax-dispatch da4587@t '()))) (if da4589@ls/false (apply (lambda () (values '() (lambda (da458b@x) '#t))) da4589@ls/false) (let ((da458d@t da4587@t)) (let ((da458f@ls/false (da30c6@syntax-dispatch da458d@t '_))) (if da458f@ls/false (apply (lambda () (da31a6@syntax-violation '#f '"invalid import spec" da455d@spec)) da458f@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da458d@t)))))))))))))))))) (set! da44a2@import-library (lambda (da454d@spec*) (call-with-values (lambda () (da44a0@parse-library-name da454d@spec*)) (lambda (da4553@da4550 da4554@da4552) (let ((da4557@pred da4554@da4552) (da4558@name da4553@da4550)) (begin (if (null? da4558@name) (da31a6@syntax-violation 'import '"empty library name" da454d@spec*) (void)) (let ((da455b@lib (da2cce@da2b15@find-library-by-name da4558@name))) (begin (if (not da455b@lib) (da31a6@syntax-violation 'import '"cannot find library with required name" da4558@name) (void)) (if (not (da4557@pred (da2ca8@da2ac9@library-version da455b@lib))) (da31a6@syntax-violation 'import '"library does not satisfy version specification" da454d@spec* da455b@lib) (void)) ((da3132@imp-collector) da455b@lib) (da2cb0@da2ad9@library-subst da455b@lib))))))))) (set! da44a4@get-import (lambda (da44bf@spec) (let ((da44c1@t da44bf@spec)) (let ((da44c3@ls/false (da30c6@syntax-dispatch da44c1@t '(any . each-any)))) (if (and da44c3@ls/false (apply (lambda (da44c5@x da44c6@x*) (not (memq (da31ac@syntax->datum da44c5@x) '(for rename except only prefix library)))) da44c3@ls/false)) (apply (lambda (da44c9@x da44ca@x*) (da44a2@import-library (cons da44c9@x da44ca@x*))) da44c3@ls/false) (let ((da44cd@t da44c1@t)) (let ((da44cf@ls/false (da30c6@syntax-dispatch da44cd@t '(any any . #(each (any any)))))) (if (and da44cf@ls/false (apply (lambda (da44d1@rename da44d2@isp da44d3@old* da44d4@new*) (and (eq? (da31ac@syntax->datum da44d1@rename) 'rename) (for-all da4492@idsyn? da44d3@old*) (for-all da4492@idsyn? da44d4@new*))) da44cf@ls/false)) (apply (lambda (da44d9@rename da44da@isp da44db@old* da44dc@new*) (let ((da44e1@subst (da44a4@get-import da44da@isp)) (da44e2@old* (map da31ac@syntax->datum da44db@old*)) (da44e3@new* (map da31ac@syntax->datum da44dc@new*))) (let ((da44e7@old-label* (da449a@find* da44e2@old* da44e1@subst))) (let ((da44e9@subst (da449c@rem* da44e2@old* da44e1@subst))) (da4496@merge-substs (map cons da44e3@new* da44e7@old-label*) da44e9@subst))))) da44cf@ls/false) (let ((da44eb@t da44cd@t)) (let ((da44ed@ls/false (da30c6@syntax-dispatch da44eb@t '(any any . each-any)))) (if (and da44ed@ls/false (apply (lambda (da44ef@except da44f0@isp da44f1@sym*) (and (eq? (da31ac@syntax->datum da44ef@except) 'except) (for-all da4492@idsyn? da44f1@sym*))) da44ed@ls/false)) (apply (lambda (da44f5@except da44f6@isp da44f7@sym*) (let ((da44fb@subst (da44a4@get-import da44f6@isp))) (da449c@rem* (map da31ac@syntax->datum da44f7@sym*) da44fb@subst))) da44ed@ls/false) (let ((da44fd@t da44eb@t)) (let ((da44ff@ls/false (da30c6@syntax-dispatch da44fd@t '(any any . each-any)))) (if (and da44ff@ls/false (apply (lambda (da4501@only da4502@isp da4503@sym*) (and (eq? (da31ac@syntax->datum da4501@only) 'only) (for-all da4492@idsyn? da4503@sym*))) da44ff@ls/false)) (apply (lambda (da4507@only da4508@isp da4509@sym*) (let ((da450d@subst (da44a4@get-import da4508@isp)) (da450e@sym* (map da31ac@syntax->datum da4509@sym*))) (let ((da4511@sym* (da449e@remove-dups da450e@sym*))) (let ((da4513@lab* (da449a@find* da4511@sym* da450d@subst))) (map cons da4511@sym* da4513@lab*))))) da44ff@ls/false) (let ((da4515@t da44fd@t)) (let ((da4517@ls/false (da30c6@syntax-dispatch da4515@t '(any any any)))) (if (and da4517@ls/false (apply (lambda (da4519@prefix da451a@isp da451b@p) (and (eq? (da31ac@syntax->datum da4519@prefix) 'prefix) (da4492@idsyn? da451b@p))) da4517@ls/false)) (apply (lambda (da451f@prefix da4520@isp da4521@p) (let ((da4525@subst (da44a4@get-import da4520@isp)) (da4526@prefix (symbol->string (da31ac@syntax->datum da4521@p)))) (map (lambda (da4529@x) (cons (string->symbol (string-append da4526@prefix (symbol->string (car da4529@x)))) (cdr da4529@x))) da4525@subst))) da4517@ls/false) (let ((da452b@t da4515@t)) (let ((da452d@ls/false (da30c6@syntax-dispatch da452b@t '(any each-any)))) (if (and da452d@ls/false (apply (lambda (da452f@library da4530@spec*) (eq? (da31ac@syntax->datum da452f@library) 'library)) da452d@ls/false)) (apply (lambda (da4533@library da4534@spec*) (da44a2@import-library da4534@spec*)) da452d@ls/false) (let ((da4537@t da452b@t)) (let ((da4539@ls/false (da30c6@syntax-dispatch da4537@t '(any any . any)))) (if (and da4539@ls/false (apply (lambda (da453b@for da453c@isp da453d@rest) (eq? (da31ac@syntax->datum da453b@for) 'for)) da4539@ls/false)) (apply (lambda (da4541@for da4542@isp da4543@rest) (da44a4@get-import da4542@isp)) da4539@ls/false) (let ((da4547@t da4537@t)) (let ((da4549@ls/false (da30c6@syntax-dispatch da4547@t 'any))) (if da4549@ls/false (apply (lambda (da454b@spec) (da31a6@syntax-violation 'import '"invalid import spec" da454b@spec)) da4549@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4547@t))))))))))))))))))))))))))) (set! da44a6@add-imports! (lambda (da44af@imp da44b0@h) (let ((da44b3@subst (da44a4@get-import da44af@imp))) (for-each (lambda (da44b5@x) (let ((da44b7@name (car da44b5@x)) (da44b8@label (cdr da44b5@x))) (let ((da44bb@t (hashtable-ref da44b0@h da44b7@name '#f))) (if da44bb@t ((lambda (da44bd@l) (if (not (eq? da44bd@l da44b8@label)) (da4494@dup-error da44b7@name) (void))) da44bb@t) (hashtable-set! da44b0@h da44b7@name da44b8@label))))) da44b3@subst)))) (lambda (da44a7@imp*) (let da44ad@f ((da44a9@imp* da44a7@imp*) (da44aa@h (make-eq-hashtable))) (if (null? da44a9@imp*) (hashtable-entries da44aa@h) (begin (da44a6@add-imports! (car da44a9@imp*) da44aa@h) (da44ad@f (cdr da44a9@imp*) da44aa@h)))))))) (set! da4bc9@da3128@parse-import-spec* da3128@parse-import-spec*) (set! da312a@make-top-rib (lambda (da469d@names da469e@labels) (let ((da46a1@rib (da2e73@make-empty-rib))) (begin (vector-for-each (lambda (da46a3@name da46a4@label) (begin (if (not (symbol? da46a3@name)) (error 'make-top-rib '"BUG: not a symbol" da46a3@name) (void)) (da2e77@extend-rib/nc! da46a1@rib (make-simple-struct 'stx '5 (list da46a3@name da2e43@top-mark* '() '())) da46a4@label))) da469d@names da469e@labels) da46a1@rib)))) (set! da4bca@da312a@make-top-rib da312a@make-top-rib) (set! da312c@make-collector (lambda () (let ((da46a7@ls '())) (lambda da46ab (let ((da46ac (length da46ab))) (if (= da46ac '0) (apply (lambda () da46a7@ls) da46ab) (if (= da46ac '1) (apply (lambda (da46a9@x) (set! da46a7@ls (da2e3c@set-cons da46a9@x da46a7@ls))) da46ab) (error 'apply '"invalid arg count")))))))) (set! da4bcb@da312c@make-collector da312c@make-collector) (set! da312e@inv-collector (da2a09@da28e7@make-parameter (lambda da46ad@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (da46af@x) (begin (if (not (procedure? da46af@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" da46af@x) (void)) da46af@x)))) (set! da4bcc@da312e@inv-collector da312e@inv-collector) (set! da3130@vis-collector (da2a09@da28e7@make-parameter (lambda da46b1@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (da46b3@x) (begin (if (not (procedure? da46b3@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" da46b3@x) (void)) da46b3@x)))) (set! da4bcd@da3130@vis-collector da3130@vis-collector) (set! da3132@imp-collector (da2a09@da28e7@make-parameter (lambda da46b5@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (da46b7@x) (begin (if (not (procedure? da46b7@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" da46b7@x) (void)) da46b7@x)))) (set! da4bce@da3132@imp-collector da3132@imp-collector) (set! da3134@chi-library-internal (lambda (da46b9@e* da46ba@rib da46bb@top?) (call-with-values (lambda () (da311e@chi-body* da46b9@e* '() '() '() '() '() '() '() da46ba@rib da46bb@top?)) (lambda (da46cf@da46c0 da46d0@da46c2 da46d1@da46c4 da46d2@da46c6 da46d3@da46c8 da46d4@da46ca da46d5@da46cc da46d6@da46ce) (let ((da46df@exp* da46d6@da46ce) (da46e0@_kwd* da46d5@da46cc) (da46e1@mod** da46d4@da46ca) (da46e2@rhs* da46d3@da46c8) (da46e3@lex* da46d2@da46c6) (da46e4@mr da46d1@da46c4) (da46e5@r da46d0@da46c2) (da46e6@e* da46cf@da46c0)) (values (append (apply append (reverse da46e1@mod**)) da46e6@e*) da46e5@r da46e4@mr (reverse da46e3@lex*) (reverse da46e2@rhs*) da46df@exp*)))))) (set! da4bcf@da3134@chi-library-internal da3134@chi-library-internal) (set! da3136@chi-interaction-expr (lambda (da46ef@e da46f0@rib da46f1@r) (call-with-values (lambda () (da311e@chi-body* (list da46ef@e) da46f1@r da46f1@r '() '() '() '() '() da46f0@rib '#t)) (lambda (da4705@da46f6 da4706@da46f8 da4707@da46fa da4708@da46fc da4709@da46fe da470a@da4700 da470b@da4702 da470c@da4704) (let ((da4715@_exp* da470c@da4704) (da4716@_kwd* da470b@da4702) (da4717@mod** da470a@da4700) (da4718@rhs* da4709@da46fe) (da4719@lex* da4708@da46fc) (da471a@mr da4707@da46fa) (da471b@r da4706@da46f8) (da471c@e* da4705@da46f6)) (let ((da4725@e* (da30f6@expand-interaction-rhs*/init* (reverse da4719@lex*) (reverse da4718@rhs*) (append (apply append (reverse da4717@mod**)) da471c@e*) da471b@r da471a@mr))) (let ((da4727@e (if (null? da4725@e*) (da2e25@da2d80@build-void) (if (null? (cdr da4725@e*)) (car da4725@e*) (da2e24@da2d7e@build-sequence '#f da4725@e*))))) (values da4727@e da471b@r)))))))) (set! da4bd0@da3136@chi-interaction-expr da3136@chi-interaction-expr) (set! da3138@library-body-expander (lambda (da4729@name da472a@main-exp* da472b@imp* da472c@b* da472d@top?) (let ((da4734@itc '#f)) (begin (set! da4734@itc (da312c@make-collector)) (let ((da473d@da4736 da3132@imp-collector) (da473e@da4738 da31b6@top-level-context) (da473f@da473a da4734@itc) (da4740@da473c '#f)) (let ((da4745@swap (lambda () (begin (let ((da4747@t (da473d@da4736))) (begin (da473d@da4736 da473f@da473a) (set! da473f@da473a da4747@t))) (let ((da4749@t (da473e@da4738))) (begin (da473e@da4738 da4740@da473c) (set! da4740@da473c da4749@t))))))) (dynamic-wind da4745@swap (lambda () (call-with-values (lambda () (da3128@parse-import-spec* da472b@imp*)) (lambda (da474f@da474c da4750@da474e) (let ((da4753@subst-labels da4750@da474e) (da4754@subst-names da474f@da474c)) (let ((da4757@rib (da312a@make-top-rib da4754@subst-names da4753@subst-labels))) (let ((da475a@wrap '#f)) (begin (set! da475a@wrap (lambda (da47d5@x) (make-simple-struct 'stx '5 (list da47d5@x da2e43@top-mark* (list da4757@rib) '())))) (let ((da475b@b* (map da475a@wrap da472c@b*)) (da475c@main-exp* (map da475a@wrap da472a@main-exp*)) (da475d@rtc (da312c@make-collector)) (da475e@vtc (da312c@make-collector))) (let ((da476b@da4764 da312e@inv-collector) (da476c@da4766 da3130@vis-collector) (da476d@da4768 da475d@rtc) (da476e@da476a da475e@vtc)) (let ((da4773@swap (lambda () (begin (let ((da4775@t (da476b@da4764))) (begin (da476b@da4764 da476d@da4768) (set! da476d@da4768 da4775@t))) (let ((da4777@t (da476c@da4766))) (begin (da476c@da4766 da476e@da476a) (set! da476e@da476a da4777@t))))))) (dynamic-wind da4773@swap (lambda () (call-with-values (lambda () (da3134@chi-library-internal da475b@b* da4757@rib da472d@top?)) (lambda (da4785@da477a da4786@da477c da4787@da477e da4788@da4780 da4789@da4782 da478a@da4784) (let ((da4791@internal-exp* da478a@da4784) (da4792@rhs* da4789@da4782) (da4793@lex* da4788@da4780) (da4794@mr da4787@da477e) (da4795@r da4786@da477c) (da4796@init* da4785@da477a)) (call-with-values (lambda () (da3122@parse-exports (append da475c@main-exp* da4791@internal-exp*))) (lambda (da47a1@da479e da47a2@da47a0) (let ((da47a5@exp-id* da47a2@da47a0) (da47a6@exp-name* da47a1@da479e)) (begin (da2e7b@seal-rib! da4757@rib) (let ((da47a9@init* (da30e4@chi-expr* da4796@init* da4795@r da4794@mr))) (let ((da47ab@rhs* (da30f8@chi-rhs* da4792@rhs* da4795@r da4794@mr))) (begin (da2e7d@unseal-rib! da4757@rib) (let ((da47ad@loc* (map da2e49@gen-global da4793@lex*)) (da47ae@export-subst (da3190@make-export-subst da47a6@exp-name* da47a5@exp-id*))) (let ((da47b2@errstr '#f)) (begin (set! da47b2@errstr '"attempt to export mutated variable") (call-with-values (lambda () (da3192@make-export-env/macros da4793@lex* da47ad@loc* da4795@r)) (lambda (da47b9@da47b4 da47ba@da47b6 da47bb@da47b8) (let ((da47bf@macro* da47bb@da47b8) (da47c0@global* da47ba@da47b6) (da47c1@export-env da47b9@da47b4)) (begin (for-each (lambda (da47c5@s) (let ((da47c7@name (car da47c5@s)) (da47c8@label (cdr da47c5@s))) (let ((da47cb@p (assq da47c8@label da47c1@export-env))) (if da47cb@p (let ((da47cd@b (cdr da47cb@p))) (let ((da47cf@type (car da47cd@b))) (if (eq? da47cf@type 'mutable) (da31a6@syntax-violation 'export da47b2@errstr da47c7@name) (void)))) (void))))) da47ae@export-subst) (let ((da47d1@invoke-body (da2e2a@da2d8a@build-library-letrec* '#f da4729@name da4793@lex* da47ad@loc* da47ab@rhs* (if (null? da47a9@init*) (da2e25@da2d80@build-void) (da2e24@da2d7e@build-sequence '#f da47a9@init*)))) (da47d2@invoke-definitions (map da2e21@da2cdd@build-global-define (map cdr da47c0@global*)))) (values (da4734@itc) (da475d@rtc) (da475e@vtc) (da2e24@da2d7e@build-sequence '#f (append da47d2@invoke-definitions (list da47d1@invoke-body))) da47bf@macro* da47ae@export-subst da47c1@export-env)))))))))))))))))))) da4773@swap))))))))))) da4745@swap))))))) (set! da4bd1@da3138@library-body-expander da3138@library-body-expander) (set! da313a@core-library-expander (lambda (da47d7@e da47d8@verify-name) (call-with-values (lambda () (da3126@parse-library da47d7@e)) (lambda (da47e3@da47dc da47e4@da47de da47e5@da47e0 da47e6@da47e2) (let ((da47eb@b* da47e6@da47e2) (da47ec@imp* da47e5@da47e0) (da47ed@exp* da47e4@da47de) (da47ee@name* da47e3@da47dc)) (call-with-values (lambda () (da3124@parse-library-name da47ee@name*)) (lambda (da47f7@da47f4 da47f8@da47f6) (let ((da47fb@ver da47f8@da47f6) (da47fc@name da47f7@da47f4)) (begin (da47d8@verify-name da47fc@name) (call-with-values (lambda () (da3138@library-body-expander da47fc@name da47ed@exp* da47ec@imp* da47eb@b* '#f)) (lambda (da480d@da4800 da480e@da4802 da480f@da4804 da4810@da4806 da4811@da4808 da4812@da480a da4813@da480c) (let ((da481b@export-env da4813@da480c) (da481c@export-subst da4812@da480a) (da481d@visit-code da4811@da4808) (da481e@invoke-code da4810@da4806) (da481f@visit-req* da480f@da4804) (da4820@invoke-req* da480e@da4802) (da4821@imp* da480d@da4800)) (values da47fc@name da47fb@ver da4821@imp* da4820@invoke-req* da481f@visit-req* da481e@invoke-code da481d@visit-code da481c@export-subst da481b@export-env))))))))))))) (set! da4bd2@da313a@core-library-expander da313a@core-library-expander) (set! da313c@parse-top-level-program (lambda (da4829@e*) (let ((da482b@t da4829@e*)) (let ((da482d@ls/false (da30c6@syntax-dispatch da482b@t '((any . each-any) . each-any)))) (if (and da482d@ls/false (apply (lambda (da482f@import da4830@imp* da4831@b*) (eq? (da31ac@syntax->datum da482f@import) 'import)) da482d@ls/false)) (apply (lambda (da4835@import da4836@imp* da4837@b*) (values da4836@imp* da4837@b*)) da482d@ls/false) (let ((da483b@t da482b@t)) (let ((da483d@ls/false (da30c6@syntax-dispatch da483b@t '((any . any) . any)))) (if (and da483d@ls/false (apply (lambda (da483f@import da4840@x da4841@y) (eq? (da31ac@syntax->datum da483f@import) 'import)) da483d@ls/false)) (apply (lambda (da4845@import da4846@x da4847@y) (da31a6@syntax-violation 'expander '"invalid syntax of top-level program" (da2eb9@syntax-car da4829@e*))) da483d@ls/false) (let ((da484b@t da483b@t)) (let ((da484d@ls/false (da30c6@syntax-dispatch da484b@t '_))) (if da484d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) da484d@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da484b@t)))))))))))) (set! da4bd3@da313c@parse-top-level-program da313c@parse-top-level-program) (set! da313e@top-level-expander (lambda (da484f@e*) (call-with-values (lambda () (da313c@parse-top-level-program da484f@e*)) (lambda (da4855@da4852 da4856@da4854) (let ((da4859@b* da4856@da4854) (da485a@imp* da4855@da4852)) (call-with-values (lambda () (da3138@library-body-expander '() '() da485a@imp* da4859@b* '#t)) (lambda (da486b@da485e da486c@da4860 da486d@da4862 da486e@da4864 da486f@da4866 da4870@da4868 da4871@da486a) (let ((da4879@export-env da4871@da486a) (da487a@export-subst da4870@da4868) (da487b@visit-code da486f@da4866) (da487c@invoke-code da486e@da4864) (da487d@visit-req* da486d@da4862) (da487e@invoke-req* da486c@da4860) (da487f@imp* da486b@da485e)) (values da487e@invoke-req* da487c@invoke-code))))))))) (set! da4bd4@da313e@top-level-expander da313e@top-level-expander) (set! da3140@rp (da2a06@da28e1@make-record-printer 'env (lambda (da4887@x da4888@p da4889@wr) (display '"#<environment>" da4888@p)))) (set! da4bd5@da3140@rp da3140@rp) (set! da314a@env? (lambda (da488d@x) (and (simple-struct? da488d@x) (eq? (simple-struct-name da488d@x) 'env)))) (set! da4bd6@da314a@env? da314a@env?) (set! da314c@env-names (lambda (da488f@x) (simple-struct-ref da488f@x '0))) (set! da4bd7@da314c@env-names da314c@env-names) (set! da314e@set-env-names! (lambda (da4891@x da4892@val) (simple-struct-set! da4891@x '0 da4892@val))) (set! da4bd8@da314e@set-env-names! da314e@set-env-names!) (set! da3150@env-labels (lambda (da4895@x) (simple-struct-ref da4895@x '1))) (set! da4bd9@da3150@env-labels da3150@env-labels) (set! da3152@set-env-labels! (lambda (da4897@x da4898@val) (simple-struct-set! da4897@x '1 da4898@val))) (set! da4bda@da3152@set-env-labels! da3152@set-env-labels!) (set! da3154@env-itc (lambda (da489b@x) (simple-struct-ref da489b@x '2))) (set! da4bdb@da3154@env-itc da3154@env-itc) (set! da3156@set-env-itc! (lambda (da489d@x da489e@val) (simple-struct-set! da489d@x '2 da489e@val))) (set! da4bdc@da3156@set-env-itc! da3156@set-env-itc!) (set! da3158@dummy '3) (set! da4bdd@da3158@dummy da3158@dummy) (set! da315a@rp (da2a06@da28e1@make-record-printer 'interaction-env (lambda (da48a1@x da48a2@p da48a3@wr) (display '"#<environment>" da48a2@p)))) (set! da4bde@da315a@rp da315a@rp) (set! da3164@interaction-env? (lambda (da48a7@x) (and (simple-struct? da48a7@x) (eq? (simple-struct-name da48a7@x) 'interaction-env)))) (set! da4bdf@da3164@interaction-env? da3164@interaction-env?) (set! da3166@interaction-env-rib (lambda (da48a9@x) (simple-struct-ref da48a9@x '0))) (set! da4be0@da3166@interaction-env-rib da3166@interaction-env-rib) (set! da3168@set-interaction-env-rib! (lambda (da48ab@x da48ac@val) (simple-struct-set! da48ab@x '0 da48ac@val))) (set! da4be1@da3168@set-interaction-env-rib! da3168@set-interaction-env-rib!) (set! da316a@interaction-env-r (lambda (da48af@x) (simple-struct-ref da48af@x '1))) (set! da4be2@da316a@interaction-env-r da316a@interaction-env-r) (set! da316c@set-interaction-env-r! (lambda (da48b1@x da48b2@val) (simple-struct-set! da48b1@x '1 da48b2@val))) (set! da4be3@da316c@set-interaction-env-r! da316c@set-interaction-env-r!) (set! da316e@interaction-env-locs (lambda (da48b5@x) (simple-struct-ref da48b5@x '2))) (set! da4be4@da316e@interaction-env-locs da316e@interaction-env-locs) (set! da3170@set-interaction-env-locs! (lambda (da48b7@x da48b8@val) (simple-struct-set! da48b7@x '2 da48b8@val))) (set! da4be5@da3170@set-interaction-env-locs! da3170@set-interaction-env-locs!) (set! da3172@dummy '3) (set! da4be6@da3172@dummy da3172@dummy) (set! da3174@interaction-environment-symbols (lambda () (da317c@environment-symbols (da31b4@interaction-environment)))) (set! da4be7@da3174@interaction-environment-symbols da3174@interaction-environment-symbols) (set! da3176@environment-bindings (lambda (da48bb@e) (vector->list (vector-map (lambda (da48bd@name da48be@label) (da3178@parse-binding (cons da48bd@name (da2cd4@da2b21@imported-label->binding da48be@label)))) (da314c@env-names da48bb@e) (da3150@env-labels da48bb@e))))) (set! da4be8@da3176@environment-bindings da3176@environment-bindings) (set! da3178@parse-binding (lambda (da48c1@b) (cons (car da48c1@b) (let ((da48c3@t (cadr da48c1@b))) (if (memv da48c3@t '(core-prim global)) 'procedure (if (memv da48c3@t '(core-macro macro global-macro)) 'syntax (if (memv da48c3@t '($core-rtd)) 'record (if (eq? (car da48c1@b) (cadr da48c1@b)) 'syntax 'unknown)))))))) (set! da4be9@da3178@parse-binding da3178@parse-binding) (set! da317a@environment? (lambda (da48c5@x) (or (da314a@env? da48c5@x) (da3164@interaction-env? da48c5@x)))) (set! da4bea@da317a@environment? da317a@environment?) (set! da317c@environment-symbols (lambda (da48c7@x) (if (da314a@env? da48c7@x) (vector->list (da314c@env-names da48c7@x)) (if (da3164@interaction-env? da48c7@x) (map values (da2e5d@rib-sym* (da3166@interaction-env-rib da48c7@x))) (assertion-violation 'environment-symbols '"not an environment" da48c7@x))))) (set! da4beb@da317c@environment-symbols da317c@environment-symbols) (set! da317e@environment (lambda da48c9@imp* (let ((da48cb@itc (da312c@make-collector))) (let ((da48d1@da48ce da3132@imp-collector) (da48d2@da48d0 da48cb@itc)) (let ((da48d5@swap (lambda () (let ((da48d7@t (da48d1@da48ce))) (begin (da48d1@da48ce da48d2@da48d0) (set! da48d2@da48d0 da48d7@t)))))) (dynamic-wind da48d5@swap (lambda () (call-with-values (lambda () (da3128@parse-import-spec* da48c9@imp*)) (lambda (da48dd@da48da da48de@da48dc) (let ((da48e1@subst-labels da48de@da48dc) (da48e2@subst-names da48dd@da48da)) (make-simple-struct 'env '4 (list da48e2@subst-names da48e1@subst-labels da48cb@itc)))))) da48d5@swap)))))) (set! da4bec@da317e@environment da317e@environment) (set! da3180@null-environment (lambda (da48e5@n) (begin (if (not (eqv? da48e5@n '5)) (assertion-violation 'null-environment '"not 5" da48e5@n) (void)) (da317e@environment '(psyntax null-environment-5))))) (set! da4bed@da3180@null-environment da3180@null-environment) (set! da3182@scheme-report-environment (lambda (da48e7@n) (begin (if (not (eqv? da48e7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" da48e7@n) (void)) (da317e@environment '(psyntax scheme-report-environment-5))))) (set! da4bee@da3182@scheme-report-environment da3182@scheme-report-environment) (set! da3184@expand (lambda (da48e9@x da48ea@env) (if (da314a@env? da48ea@env) (let ((da48ed@rib (da312a@make-top-rib (da314c@env-names da48ea@env) (da3150@env-labels da48ea@env)))) (let ((da48ef@x (make-simple-struct 'stx '5 (list da48e9@x da2e43@top-mark* (list da48ed@rib) '()))) (da48f0@itc (da3154@env-itc da48ea@env)) (da48f1@rtc (da312c@make-collector)) (da48f2@vtc (da312c@make-collector))) (let ((da48f7@x (let ((da4909@da48fa da31b6@top-level-context) (da490a@da48fc da312e@inv-collector) (da490b@da48fe da3130@vis-collector) (da490c@da4900 da3132@imp-collector) (da490d@da4902 '#f) (da490e@da4904 da48f1@rtc) (da490f@da4906 da48f2@vtc) (da4910@da4908 da48f0@itc)) (let ((da4919@swap (lambda () (begin (let ((da491b@t (da4909@da48fa))) (begin (da4909@da48fa da490d@da4902) (set! da490d@da4902 da491b@t))) (let ((da491d@t (da490a@da48fc))) (begin (da490a@da48fc da490e@da4904) (set! da490e@da4904 da491d@t))) (let ((da491f@t (da490b@da48fe))) (begin (da490b@da48fe da490f@da4906) (set! da490f@da4906 da491f@t))) (let ((da4921@t (da490c@da4900))) (begin (da490c@da4900 da4910@da4908) (set! da4910@da4908 da4921@t))))))) (dynamic-wind da4919@swap (lambda () (da30e8@chi-expr da48ef@x '() '())) da4919@swap))))) (begin (da2e7b@seal-rib! da48ed@rib) (values da48f7@x (da48f1@rtc)))))) (if (da3164@interaction-env? da48ea@env) (let ((da4923@rib (da3166@interaction-env-rib da48ea@env)) (da4924@r (da316a@interaction-env-r da48ea@env)) (da4925@rtc (da312c@make-collector))) (let ((da4929@x (make-simple-struct 'stx '5 (list da48e9@x da2e43@top-mark* (list da4923@rib) '())))) (call-with-values (lambda () (let ((da493f@da4930 da31b6@top-level-context) (da4940@da4932 da312e@inv-collector) (da4941@da4934 da3130@vis-collector) (da4942@da4936 da3132@imp-collector) (da4943@da4938 da48ea@env) (da4944@da493a da4925@rtc) (da4945@da493c (da312c@make-collector)) (da4946@da493e (da312c@make-collector))) (let ((da494f@swap (lambda () (begin (let ((da4951@t (da493f@da4930))) (begin (da493f@da4930 da4943@da4938) (set! da4943@da4938 da4951@t))) (let ((da4953@t (da4940@da4932))) (begin (da4940@da4932 da4944@da493a) (set! da4944@da493a da4953@t))) (let ((da4955@t (da4941@da4934))) (begin (da4941@da4934 da4945@da493c) (set! da4945@da493c da4955@t))) (let ((da4957@t (da4942@da4936))) (begin (da4942@da4936 da4946@da493e) (set! da4946@da493e da4957@t))))))) (dynamic-wind da494f@swap (lambda () (da3136@chi-interaction-expr da4929@x da4923@rib da4924@r)) da494f@swap)))) (lambda (da4959@da492c da495a@da492e) (let ((da495d@r^ da495a@da492e) (da495e@e da4959@da492c)) (begin (da316c@set-interaction-env-r! da48ea@env da495d@r^) (values da495e@e (da4925@rtc)))))))) (assertion-violation 'expand '"not an environment" da48ea@env))))) (set! da4bef@da3184@expand da3184@expand) (set! da3186@eval (lambda (da4961@x da4962@env) (begin (if (not (da317a@environment? da4962@env)) (error 'eval '"not an environment" da4962@env) (void)) (call-with-values (lambda () (da3184@expand da4961@x da4962@env)) (lambda (da4969@da4966 da496a@da4968) (let ((da496d@invoke-req* da496a@da4968) (da496e@x da4969@da4966)) (begin (for-each da2cd5@da2b23@invoke-library da496d@invoke-req*) (eval-core (da2a5f@da2a17@expanded->core da496e@x))))))))) (set! da4bf0@da3186@eval da3186@eval) (set! da3188@library-expander (lambda da49df (let ((da49e0 (length da49df))) (if (= da49e0 '3) (apply (lambda (da4971@x da4972@filename da4973@verify-name) (let ((da4978@build-visit-code '#f) (da497a@visit! '#f)) (begin (set! da4978@build-visit-code (lambda (da49cd@macro*) (if (null? da49cd@macro*) (da2e25@da2d80@build-void) (da2e24@da2d7e@build-sequence '#f (map (lambda (da49cf@x) (let ((da49d1@loc (car da49cf@x)) (da49d2@src (cddr da49cf@x))) (list 'set! da49d1@loc da49d2@src))) da49cd@macro*))))) (set! da497a@visit! (lambda (da49c5@macro*) (for-each (lambda (da49c7@x) (let ((da49c9@loc (car da49c7@x)) (da49ca@proc (cadr da49c7@x))) (set-symbol-value! da49c9@loc da49ca@proc))) da49c5@macro*))) (call-with-values (lambda () (da313a@core-library-expander da4971@x da4973@verify-name)) (lambda (da498d@da497c da498e@da497e da498f@da4980 da4990@da4982 da4991@da4984 da4992@da4986 da4993@da4988 da4994@da498a da4995@da498c) (let ((da499f@export-env da4995@da498c) (da49a0@export-subst da4994@da498a) (da49a1@macro* da4993@da4988) (da49a2@invoke-code da4992@da4986) (da49a3@vis* da4991@da4984) (da49a4@inv* da4990@da4982) (da49a5@imp* da498f@da4980) (da49a6@ver da498e@da497e) (da49a7@name da498d@da497c)) (let ((da49b1@id (gensym)) (da49b2@name da49a7@name) (da49b3@ver da49a6@ver) (da49b4@imp* (map da2cd9@da2b2b@library-spec da49a5@imp*)) (da49b5@vis* (map da2cd9@da2b2b@library-spec da49a3@vis*)) (da49b6@inv* (map da2cd9@da2b2b@library-spec da49a4@inv*)) (da49b7@visit-proc (lambda () (da497a@visit! da49a1@macro*))) (da49b8@invoke-proc (lambda () (eval-core (da2a5f@da2a17@expanded->core da49a2@invoke-code)))) (da49b9@visit-code (da4978@build-visit-code da49a1@macro*)) (da49ba@invoke-code da49a2@invoke-code)) (begin (da2cd3@da2b1f@install-library da49b1@id da49b2@name da49b3@ver da49b4@imp* da49b5@vis* da49b6@inv* da49a0@export-subst da499f@export-env da49b7@visit-proc da49b8@invoke-proc da49b9@visit-code da49ba@invoke-code '#t da4972@filename) (values da49b1@id da49b2@name da49b3@ver da49b4@imp* da49b5@vis* da49b6@inv* da49ba@invoke-code da49b9@visit-code da49a0@export-subst da499f@export-env))))))))) da49df) (if (= da49e0 '2) (apply (lambda (da49d5@x da49d6@filename) (da3188@library-expander da49d5@x da49d6@filename (lambda (da49d9@x) (values)))) da49df) (if (= da49e0 '1) (apply (lambda (da49db@x) (da3188@library-expander da49db@x '#f (lambda (da49dd@x) (values)))) da49df) (error 'apply '"invalid arg count"))))))) (set! da4bf1@da3188@library-expander da3188@library-expander) (set! da318a@boot-library-expand (lambda (da49e1@x) (call-with-values (lambda () (da3188@library-expander da49e1@x)) (lambda (da49f7@da49e4 da49f8@da49e6 da49f9@da49e8 da49fa@da49ea da49fb@da49ec da49fc@da49ee da49fd@da49f0 da49fe@da49f2 da49ff@da49f4 da4a00@da49f6) (let ((da4a0b@export-env da4a00@da49f6) (da4a0c@export-subst da49ff@da49f4) (da4a0d@visit-code da49fe@da49f2) (da4a0e@invoke-code da49fd@da49f0) (da4a0f@inv* da49fc@da49ee) (da4a10@vis* da49fb@da49ec) (da4a11@imp* da49fa@da49ea) (da4a12@ver da49f9@da49e8) (da4a13@name da49f8@da49e6) (da4a14@id da49f7@da49e4)) (values da4a13@name da4a0e@invoke-code da4a0c@export-subst da4a0b@export-env)))))) (set! da4bf2@da318a@boot-library-expand da318a@boot-library-expand) (set! da318c@rev-map-append (lambda (da4a1f@f da4a20@ls da4a21@ac) (if (null? da4a20@ls) da4a21@ac (da318c@rev-map-append da4a1f@f (cdr da4a20@ls) (cons (da4a1f@f (car da4a20@ls)) da4a21@ac))))) (set! da4bf3@da318c@rev-map-append da318c@rev-map-append) (set! da318e@build-exports (lambda (da4a25@lex*+loc* da4a26@init*) (da2e24@da2d7e@build-sequence '#f (cons (da2e25@da2d80@build-void) (da318c@rev-map-append (lambda (da4a29@x) (list 'set! (cdr da4a29@x) (car da4a29@x))) da4a25@lex*+loc* da4a26@init*))))) (set! da4bf4@da318e@build-exports da318e@build-exports) (set! da3190@make-export-subst (lambda (da4a2b@name* da4a2c@id*) (map (lambda (da4a2f@name da4a30@id) (let ((da4a33@label (da2ed5@id->label da4a30@id))) (begin (if (not da4a33@label) (da31a6@syntax-violation '#f '"cannot export unbound identifier" da4a30@id) (void)) (cons da4a2f@name da4a33@label)))) da4a2b@name* da4a2c@id*))) (set! da4bf5@da3190@make-export-subst da3190@make-export-subst) (set! da3192@make-export-env/macros (lambda (da4a35@lex* da4a36@loc* da4a37@r) (let ((da4a3c@lookup '#f)) (begin (set! da4a3c@lookup (lambda (da4a59@x) (let da4a61@f ((da4a5b@x da4a59@x) (da4a5c@lex* da4a35@lex*) (da4a5d@loc* da4a36@loc*)) (if (pair? da4a5c@lex*) (if (eq? da4a5b@x (car da4a5c@lex*)) (car da4a5d@loc*) (da4a61@f da4a5b@x (cdr da4a5c@lex*) (cdr da4a5d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let da4a45@f ((da4a3d@r da4a37@r) (da4a3e@env '()) (da4a3f@global* '()) (da4a40@macro* '())) (if (null? da4a3d@r) (values da4a3e@env da4a3f@global* da4a40@macro*) (let ((da4a47@x (car da4a3d@r))) (let ((da4a49@label (car da4a47@x)) (da4a4a@b (cdr da4a47@x))) (let ((da4a4d@t (da2edb@binding-type da4a4a@b))) (if (memv da4a4d@t '(lexical)) (let ((da4a4f@v (da2edd@binding-value da4a4a@b))) (let ((da4a51@loc (da4a3c@lookup (da3050@lexical-var da4a4f@v))) (da4a52@type (if (da3052@lexical-mutable? da4a4f@v) 'mutable 'global))) (da4a45@f (cdr da4a3d@r) (cons (cons* da4a49@label da4a52@type da4a51@loc) da4a3e@env) (cons (cons (da3050@lexical-var da4a4f@v) da4a51@loc) da4a3f@global*) da4a40@macro*))) (if (memv da4a4d@t '(local-macro)) (let ((da4a55@loc (gensym))) (da4a45@f (cdr da4a3d@r) (cons (cons* da4a49@label 'global-macro da4a55@loc) da4a3e@env) da4a3f@global* (cons (cons da4a55@loc (da2edd@binding-value da4a4a@b)) da4a40@macro*))) (if (memv da4a4d@t '(local-macro!)) (let ((da4a57@loc (gensym))) (da4a45@f (cdr da4a3d@r) (cons (cons* da4a49@label 'global-macro! da4a57@loc) da4a3e@env) da4a3f@global* (cons (cons da4a57@loc (da2edd@binding-value da4a4a@b)) da4a40@macro*))) (if (memv da4a4d@t '($rtd $module)) (da4a45@f (cdr da4a3d@r) (cons da4a47@x da4a3e@env) da4a3f@global* da4a40@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (da2edb@binding-type da4a4a@b) (da2edd@binding-value da4a4a@b))))))))))))))) (set! da4bf6@da3192@make-export-env/macros da3192@make-export-env/macros) (set! da3194@generate-temporaries (lambda (da4a63@ls) (let ((da4a65@t da4a63@ls)) (let ((da4a67@ls/false (da30c6@syntax-dispatch da4a65@t 'each-any))) (if da4a67@ls/false (apply (lambda (da4a69@ls) (map (lambda (da4a6b@x) (make-simple-struct 'stx '5 (list (let ((da4a6d@x (da31ac@syntax->datum da4a6b@x))) (if (or (symbol? da4a6d@x) (string? da4a6d@x)) (gensym da4a6d@x) (gensym 't))) da2e43@top-mark* '() '()))) da4a69@ls)) da4a67@ls/false) (let ((da4a6f@t da4a65@t)) (let ((da4a71@ls/false (da30c6@syntax-dispatch da4a6f@t '_))) (if da4a71@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) da4a71@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4a6f@t))))))))) (set! da4bf7@da3194@generate-temporaries da3194@generate-temporaries) (set! da3196@free-identifier=? (lambda (da4a73@x da4a74@y) (if (da2ebf@id? da4a73@x) (if (da2ebf@id? da4a74@y) (da2ec5@free-id=? da4a73@x da4a74@y) (assertion-violation 'free-identifier=? '"not an identifier" da4a74@y)) (assertion-violation 'free-identifier=? '"not an identifier" da4a73@x)))) (set! da4bf8@da3196@free-identifier=? da3196@free-identifier=?) (set! da3198@bound-identifier=? (lambda (da4a77@x da4a78@y) (if (da2ebf@id? da4a77@x) (if (da2ebf@id? da4a78@y) (da2ec3@bound-id=? da4a77@x da4a78@y) (assertion-violation 'bound-identifier=? '"not an identifier" da4a78@y)) (assertion-violation 'bound-identifier=? '"not an identifier" da4a77@x)))) (set! da4bf9@da3198@bound-identifier=? da3198@bound-identifier=?) (set! da319a@make-source-condition (lambda (da4a7b@x) (let ((da4a85@da4a80 '#f) (da4a87@da4a82 '#f) (da4a89@da4a81 '#f) (da4a8c@da4a7f '#f) (da4a8e@make-source-condition '#f) (da4a90@da4a7d '#f) (da4a92@da4a7e '#f) (da4a94@source-condition? '#f) (da4a96@source-filename '#f) (da4a98@source-character '#f)) (begin (set! da4a85@da4a80 (make-record-type-descriptor '&source-information da4edb@da4c22@&condition-rtd 'da4a83 '#f '#f '#((immutable file-name) (immutable character)))) (set! da4a87@da4a82 '#f) (set! da4a89@da4a81 (make-record-constructor-descriptor da4a85@da4a80 da4edc@da4c24@&condition-rcd da4a87@da4a82)) (set! da4a8c@da4a7f (record-predicate da4a85@da4a80)) (set! da4a8e@make-source-condition (record-constructor da4a89@da4a81)) (set! da4a90@da4a7d (record-accessor da4a85@da4a80 '0)) (set! da4a92@da4a7e (record-accessor da4a85@da4a80 '1)) (set! da4a94@source-condition? (condition-predicate da4a85@da4a80)) (set! da4a96@source-filename (condition-accessor da4a85@da4a80 da4a90@da4a7d)) (set! da4a98@source-character (condition-accessor da4a85@da4a80 da4a92@da4a7e)) (if (pair? da4a7b@x) (da4a8e@make-source-condition (car da4a7b@x) (cdr da4a7b@x)) (condition)))))) (set! da4bfa@da319a@make-source-condition da319a@make-source-condition) (set! da319c@extract-position-condition (lambda (da4a99@x) (da319a@make-source-condition (da319e@expression-position da4a99@x)))) (set! da4bfb@da319c@extract-position-condition da319c@extract-position-condition) (set! da319e@expression-position (lambda (da4a9b@x) (and (da2e8b@stx? da4a9b@x) (let ((da4a9d@x (da2e8d@stx-expr da4a9b@x))) (and (da29fd@da28cf@annotation? da4a9d@x) (da29fe@da28d1@annotation-source da4a9d@x)))))) (set! da4bfc@da319e@expression-position da319e@expression-position) (set! da31a0@assertion-error (lambda (da4a9f@expr da4aa0@pos) (raise (condition (da4f0b@da4ce6@make-assertion-violation) (da4f1d@da4d18@make-who-condition 'assert) (da4ee1@da4c79@make-message-condition '"assertion failed") (da4f13@da4cfd@make-irritants-condition (list da4a9f@expr)) (da319a@make-source-condition da4aa0@pos))))) (set! da4bfd@da31a0@assertion-error da31a0@assertion-error) (set! da31a2@syntax-error (lambda (da4aa3@x . da4aa5@args) (begin (if (not (for-all string? da4aa5@args)) (assertion-violation 'syntax-error '"invalid argument" da4aa5@args) (void)) (raise (condition (da4ee1@da4c79@make-message-condition (if (null? da4aa5@args) '"invalid syntax" (apply string-append da4aa5@args))) (da4f3f@da4d74@make-syntax-violation (da31ac@syntax->datum da4aa3@x) '#f) (da319c@extract-position-condition da4aa3@x)))))) (set! da4bfe@da31a2@syntax-error da31a2@syntax-error) (set! da31a4@syntax-violation* (lambda (da4aa7@who da4aa8@msg da4aa9@form da4aaa@condition-object) (begin (if (not (string? da4aa8@msg)) (assertion-violation 'syntax-violation '"message is not a string" da4aa8@msg) (void)) (let ((da4aaf@who (if (or (string? da4aa7@who) (symbol? da4aa7@who)) da4aa7@who (if (not da4aa7@who) (let ((da4ab1@t da4aa9@form)) (let ((da4ab3@ls/false (da30c6@syntax-dispatch da4ab1@t 'any))) (if (and da4ab3@ls/false (apply (lambda (da4ab5@id) (da2ebf@id? da4ab5@id)) da4ab3@ls/false)) (apply (lambda (da4ab7@id) (da31ac@syntax->datum da4ab7@id)) da4ab3@ls/false) (let ((da4ab9@t da4ab1@t)) (let ((da4abb@ls/false (da30c6@syntax-dispatch da4ab9@t '(any . any)))) (if (and da4abb@ls/false (apply (lambda (da4abd@id da4abe@rest) (da2ebf@id? da4abd@id)) da4abb@ls/false)) (apply (lambda (da4ac1@id da4ac2@rest) (da31ac@syntax->datum da4ac1@id)) da4abb@ls/false) (let ((da4ac5@t da4ab9@t)) (let ((da4ac7@ls/false (da30c6@syntax-dispatch da4ac5@t '_))) (if da4ac7@ls/false (apply (lambda () '#f) da4ac7@ls/false) (da31a6@syntax-violation '#f '"invalid syntax" da4ac5@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" da4aa7@who))))) (raise (condition (if da4aaf@who (da4f1d@da4d18@make-who-condition da4aaf@who) (condition)) (da4ee1@da4c79@make-message-condition da4aa8@msg) da4aaa@condition-object (da319c@extract-position-condition da4aa9@form))))))) (set! da4bff@da31a4@syntax-violation* da31a4@syntax-violation*) (set! da31a6@syntax-violation (lambda da4ad7 (let ((da4ad8 (length da4ad7))) (if (= da4ad8 '3) (apply (lambda (da4ac9@who da4aca@msg da4acb@form) (da31a6@syntax-violation da4ac9@who da4aca@msg da4acb@form '#f)) da4ad7) (if (= da4ad8 '4) (apply (lambda (da4acf@who da4ad0@msg da4ad1@form da4ad2@subform) (da31a4@syntax-violation* da4acf@who da4ad0@msg da4ad1@form (da4f3f@da4d74@make-syntax-violation (da31ac@syntax->datum da4ad1@form) (da31ac@syntax->datum da4ad2@subform)))) da4ad7) (error 'apply '"invalid arg count")))))) (set! da4c00@da31a6@syntax-violation da31a6@syntax-violation) (set! da31a8@identifier? (lambda (da4ad9@x) (da2ebf@id? da4ad9@x))) (set! da4c01@da31a8@identifier? da31a8@identifier?) (set! da31aa@datum->syntax (lambda (da4adb@id da4adc@datum) (if (da2ebf@id? da4adb@id) (da2e9f@datum->stx da4adb@id da4adc@datum) (assertion-violation 'datum->syntax '"not an identifier" da4adb@id)))) (set! da4c02@da31aa@datum->syntax da31aa@datum->syntax) (set! da31ac@syntax->datum (lambda (da4adf@x) (da2ed3@stx->datum da4adf@x))) (set! da4c03@da31ac@syntax->datum da31ac@syntax->datum) (set! da31ae@ungensym-all (lambda (da4ae1@code) (if (pair? da4ae1@code) (cons (da31ae@ungensym-all (car da4ae1@code)) (da31ae@ungensym-all (cdr da4ae1@code))) (if (symbol? da4ae1@code) (ungensym da4ae1@code) da4ae1@code)))) (set! da4c04@da31ae@ungensym-all da31ae@ungensym-all) (set! da31b0@compile-r6rs-top-level (lambda (da4ae3@x*) (call-with-values (lambda () (da313e@top-level-expander da4ae3@x*)) (lambda (da4ae9@da4ae6 da4aea@da4ae8) (let ((da4aed@invoke-code da4aea@da4ae8) (da4aee@lib* da4ae9@da4ae6)) (lambda () (begin (for-each da2cd5@da2b23@invoke-library da4aee@lib*) (let ((da4af1@expanded (da2a5f@da2a17@expanded->core da4aed@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (da31ae@ungensym-all da4af1@expanded)) (void)) (eval-core da4af1@expanded)))))))))) (set! da4c05@da31b0@compile-r6rs-top-level da31b0@compile-r6rs-top-level) (set! da31b2@pre-compile-r6rs-top-level (lambda (da4af3@x*) (call-with-values (lambda () (da313e@top-level-expander da4af3@x*)) (lambda (da4af9@da4af6 da4afa@da4af8) (let ((da4afd@invoke-code da4afa@da4af8) (da4afe@lib* da4af9@da4af6)) (begin (for-each da2cd5@da2b23@invoke-library da4afe@lib*) (da2a07@da28e3@compile-core (da2a5f@da2a17@expanded->core da4afd@invoke-code)))))))) (set! da4c06@da31b2@pre-compile-r6rs-top-level da31b2@pre-compile-r6rs-top-level) (set! da31b4@interaction-environment (let ((da4b01@the-env '#f)) (lambda () (or da4b01@the-env (let ((da4b03@lib (da2cce@da2b15@find-library-by-name '(mosh interaction))) (da4b04@rib (da2e73@make-empty-rib))) (begin (let ((da4b07@subst (da2cb0@da2ad9@library-subst da4b03@lib))) (begin (da2e5f@set-rib-sym*! da4b04@rib (map car da4b07@subst)) (da2e63@set-rib-mark**! da4b04@rib (map (lambda (da4b09@x) da2e43@top-mark*) da4b07@subst)) (da2e67@set-rib-label*! da4b04@rib (map cdr da4b07@subst)))) (let ((da4b0b@env (make-simple-struct 'interaction-env '4 (list da4b04@rib '() '())))) (begin (set! da4b01@the-env da4b0b@env) da4b0b@env)))))))) (set! da4c07@da31b4@interaction-environment da31b4@interaction-environment) (set! da31b6@top-level-context (da2a09@da28e7@make-parameter '#f)) (set! da4c08@da31b6@top-level-context da31b6@top-level-context) (da2ccb@da2b0f@current-library-expander da3188@library-expander))
(begin (set! da4c17@da4c12 (unspecified)) (set! da4c19@da4c14 (unspecified)) (set! da4c1b@da4c13 (unspecified)) (set! da4c1e@&condition? (unspecified)) (set! da4c20@make-&condition (unspecified)) (set! da4c22@&condition-rtd (unspecified)) (set! da4c24@&condition-rcd (unspecified)) (set! da4c70@da4c6b (unspecified)) (set! da4c72@da4c6d (unspecified)) (set! da4c74@da4c6c (unspecified)) (set! da4c77@p? (unspecified)) (set! da4c79@make-message-condition (unspecified)) (set! da4c7b@da4c6a (unspecified)) (set! da4c7d@message-condition? (unspecified)) (set! da4c7f@condition-message (unspecified)) (set! da4c81@&message-rtd (unspecified)) (set! da4c83@&message-rcd (unspecified)) (set! da4c89@da4c84 (unspecified)) (set! da4c8b@da4c86 (unspecified)) (set! da4c8d@da4c85 (unspecified)) (set! da4c90@p? (unspecified)) (set! da4c92@make-warning (unspecified)) (set! da4c94@warning? (unspecified)) (set! da4c96@&warning-rtd (unspecified)) (set! da4c98@&warning-rcd (unspecified)) (set! da4c9e@da4c99 (unspecified)) (set! da4ca0@da4c9b (unspecified)) (set! da4ca2@da4c9a (unspecified)) (set! da4ca5@p? (unspecified)) (set! da4ca7@make-serious-condition (unspecified)) (set! da4ca9@serious-condition? (unspecified)) (set! da4cab@&serious-rtd (unspecified)) (set! da4cad@&serious-rcd (unspecified)) (set! da4cb3@da4cae (unspecified)) (set! da4cb5@da4cb0 (unspecified)) (set! da4cb7@da4caf (unspecified)) (set! da4cba@p? (unspecified)) (set! da4cbc@make-error (unspecified)) (set! da4cbe@error? (unspecified)) (set! da4cc0@&error-rtd (unspecified)) (set! da4cc2@&error-rcd (unspecified)) (set! da4cc8@da4cc3 (unspecified)) (set! da4cca@da4cc5 (unspecified)) (set! da4ccc@da4cc4 (unspecified)) (set! da4ccf@p? (unspecified)) (set! da4cd1@make-violation (unspecified)) (set! da4cd3@violation? (unspecified)) (set! da4cd5@&violation-rtd (unspecified)) (set! da4cd7@&violation-rcd (unspecified)) (set! da4cdd@da4cd8 (unspecified)) (set! da4cdf@da4cda (unspecified)) (set! da4ce1@da4cd9 (unspecified)) (set! da4ce4@p? (unspecified)) (set! da4ce6@make-assertion-violation (unspecified)) (set! da4ce8@assertion-violation? (unspecified)) (set! da4cea@&assertion-rtd (unspecified)) (set! da4cec@&assertion-rcd (unspecified)) (set! da4cf4@da4cef (unspecified)) (set! da4cf6@da4cf1 (unspecified)) (set! da4cf8@da4cf0 (unspecified)) (set! da4cfb@p? (unspecified)) (set! da4cfd@make-irritants-condition (unspecified)) (set! da4cff@da4cee (unspecified)) (set! da4d01@irritants-condition? (unspecified)) (set! da4d03@condition-irritants (unspecified)) (set! da4d05@&irritants-rtd (unspecified)) (set! da4d07@&irritants-rcd (unspecified)) (set! da4d0f@da4d0a (unspecified)) (set! da4d11@da4d0c (unspecified)) (set! da4d13@da4d0b (unspecified)) (set! da4d16@p? (unspecified)) (set! da4d18@make-who-condition (unspecified)) (set! da4d1a@da4d09 (unspecified)) (set! da4d1c@who-condition? (unspecified)) (set! da4d1e@condition-who (unspecified)) (set! da4d20@&who-rtd (unspecified)) (set! da4d22@&who-rcd (unspecified)) (set! da4d28@da4d23 (unspecified)) (set! da4d2a@da4d25 (unspecified)) (set! da4d2c@da4d24 (unspecified)) (set! da4d2f@p? (unspecified)) (set! da4d31@make-non-continuable-violation (unspecified)) (set! da4d33@non-continuable-violation? (unspecified)) (set! da4d35@&non-continuable-rtd (unspecified)) (set! da4d37@&non-continuable-rcd (unspecified)) (set! da4d3d@da4d38 (unspecified)) (set! da4d3f@da4d3a (unspecified)) (set! da4d41@da4d39 (unspecified)) (set! da4d44@p? (unspecified)) (set! da4d46@make-implementation-restriction-violation (unspecified)) (set! da4d48@implementation-restriction-violation? (unspecified)) (set! da4d4a@&implementation-restriction-rtd (unspecified)) (set! da4d4c@&implementation-restriction-rcd (unspecified)) (set! da4d52@da4d4d (unspecified)) (set! da4d54@da4d4f (unspecified)) (set! da4d56@da4d4e (unspecified)) (set! da4d59@p? (unspecified)) (set! da4d5b@make-lexical-violation (unspecified)) (set! da4d5d@lexical-violation? (unspecified)) (set! da4d5f@&lexical-rtd (unspecified)) (set! da4d61@&lexical-rcd (unspecified)) (set! da4d6b@da4d66 (unspecified)) (set! da4d6d@da4d68 (unspecified)) (set! da4d6f@da4d67 (unspecified)) (set! da4d72@p? (unspecified)) (set! da4d74@make-syntax-violation (unspecified)) (set! da4d76@da4d63 (unspecified)) (set! da4d78@da4d65 (unspecified)) (set! da4d7a@syntax-violation? (unspecified)) (set! da4d7c@syntax-violation-form (unspecified)) (set! da4d7e@syntax-violation-subform (unspecified)) (set! da4d80@&syntax-rtd (unspecified)) (set! da4d82@&syntax-rcd (unspecified)) (set! da4d88@da4d83 (unspecified)) (set! da4d8a@da4d85 (unspecified)) (set! da4d8c@da4d84 (unspecified)) (set! da4d8f@p? (unspecified)) (set! da4d91@make-undefined-violation (unspecified)) (set! da4d93@undefined-violation? (unspecified)) (set! da4d95@&undefined-rtd (unspecified)) (set! da4d97@&undefined-rcd (unspecified)) (set! da4d9d@da4d98 (unspecified)) (set! da4d9f@da4d9a (unspecified)) (set! da4da1@da4d99 (unspecified)) (set! da4da4@p? (unspecified)) (set! da4da6@make-i/o-error (unspecified)) (set! da4da8@i/o-error? (unspecified)) (set! da4daa@&i/o-rtd (unspecified)) (set! da4dac@&i/o-rcd (unspecified)) (set! da4db2@da4dad (unspecified)) (set! da4db4@da4daf (unspecified)) (set! da4db6@da4dae (unspecified)) (set! da4db9@p? (unspecified)) (set! da4dbb@make-i/o-read-error (unspecified)) (set! da4dbd@i/o-read-error? (unspecified)) (set! da4dbf@&i/o-read-rtd (unspecified)) (set! da4dc1@&i/o-read-rcd (unspecified)) (set! da4dc7@da4dc2 (unspecified)) (set! da4dc9@da4dc4 (unspecified)) (set! da4dcb@da4dc3 (unspecified)) (set! da4dce@p? (unspecified)) (set! da4dd0@make-i/o-write-error (unspecified)) (set! da4dd2@i/o-write-error? (unspecified)) (set! da4dd4@&i/o-write-rtd (unspecified)) (set! da4dd6@&i/o-write-rcd (unspecified)) (set! da4dde@da4dd9 (unspecified)) (set! da4de0@da4ddb (unspecified)) (set! da4de2@da4dda (unspecified)) (set! da4de5@p? (unspecified)) (set! da4de7@make-i/o-invalid-position-error (unspecified)) (set! da4de9@da4dd8 (unspecified)) (set! da4deb@i/o-invalid-position-error? (unspecified)) (set! da4ded@i/o-error-position (unspecified)) (set! da4def@&i/o-invalid-position-rtd (unspecified)) (set! da4df1@&i/o-invalid-position-rcd (unspecified)) (set! da4df9@da4df4 (unspecified)) (set! da4dfb@da4df6 (unspecified)) (set! da4dfd@da4df5 (unspecified)) (set! da4e00@p? (unspecified)) (set! da4e02@make-i/o-filename-error (unspecified)) (set! da4e04@da4df3 (unspecified)) (set! da4e06@i/o-filename-error? (unspecified)) (set! da4e08@i/o-error-filename (unspecified)) (set! da4e0a@&i/o-filename-rtd (unspecified)) (set! da4e0c@&i/o-filename-rcd (unspecified)) (set! da4e12@da4e0d (unspecified)) (set! da4e14@da4e0f (unspecified)) (set! da4e16@da4e0e (unspecified)) (set! da4e19@p? (unspecified)) (set! da4e1b@make-i/o-file-protection-error (unspecified)) (set! da4e1d@i/o-file-protection-error? (unspecified)) (set! da4e1f@&i/o-file-protection-rtd (unspecified)) (set! da4e21@&i/o-file-protection-rcd (unspecified)) (set! da4e27@da4e22 (unspecified)) (set! da4e29@da4e24 (unspecified)) (set! da4e2b@da4e23 (unspecified)) (set! da4e2e@p? (unspecified)) (set! da4e30@make-i/o-file-is-read-only-error (unspecified)) (set! da4e32@i/o-file-is-read-only-error? (unspecified)) (set! da4e34@&i/o-file-is-read-only-rtd (unspecified)) (set! da4e36@&i/o-file-is-read-only-rcd (unspecified)) (set! da4e3c@da4e37 (unspecified)) (set! da4e3e@da4e39 (unspecified)) (set! da4e40@da4e38 (unspecified)) (set! da4e43@p? (unspecified)) (set! da4e45@make-i/o-file-already-exists-error (unspecified)) (set! da4e47@i/o-file-already-exists-error? (unspecified)) (set! da4e49@&i/o-file-already-exists-rtd (unspecified)) (set! da4e4b@&i/o-file-already-exists-rcd (unspecified)) (set! da4e51@da4e4c (unspecified)) (set! da4e53@da4e4e (unspecified)) (set! da4e55@da4e4d (unspecified)) (set! da4e58@p? (unspecified)) (set! da4e5a@make-i/o-file-does-not-exist-error (unspecified)) (set! da4e5c@i/o-file-does-not-exist-error? (unspecified)) (set! da4e5e@&i/o-file-does-not-exist-rtd (unspecified)) (set! da4e60@&i/o-file-does-not-exist-rcd (unspecified)) (set! da4e68@da4e63 (unspecified)) (set! da4e6a@da4e65 (unspecified)) (set! da4e6c@da4e64 (unspecified)) (set! da4e6f@p? (unspecified)) (set! da4e71@make-i/o-port-error (unspecified)) (set! da4e73@da4e62 (unspecified)) (set! da4e75@i/o-port-error? (unspecified)) (set! da4e77@i/o-error-port (unspecified)) (set! da4e79@&i/o-port-rtd (unspecified)) (set! da4e7b@&i/o-port-rcd (unspecified)) (set! da4e81@da4e7c (unspecified)) (set! da4e83@da4e7e (unspecified)) (set! da4e85@da4e7d (unspecified)) (set! da4e88@p? (unspecified)) (set! da4e8a@make-i/o-decoding-error (unspecified)) (set! da4e8c@i/o-decoding-error? (unspecified)) (set! da4e8e@&i/o-decoding-rtd (unspecified)) (set! da4e90@&i/o-decoding-rcd (unspecified)) (set! da4e98@da4e93 (unspecified)) (set! da4e9a@da4e95 (unspecified)) (set! da4e9c@da4e94 (unspecified)) (set! da4e9f@p? (unspecified)) (set! da4ea1@make-i/o-encoding-error (unspecified)) (set! da4ea3@da4e92 (unspecified)) (set! da4ea5@i/o-encoding-error? (unspecified)) (set! da4ea7@i/o-encoding-error-char (unspecified)) (set! da4ea9@&i/o-encoding-rtd (unspecified)) (set! da4eab@&i/o-encoding-rcd (unspecified)) (set! da4eb1@da4eac (unspecified)) (set! da4eb3@da4eae (unspecified)) (set! da4eb5@da4ead (unspecified)) (set! da4eb8@p? (unspecified)) (set! da4eba@make-no-infinities-violation (unspecified)) (set! da4ebc@no-infinities-violation? (unspecified)) (set! da4ebe@&no-infinities-rtd (unspecified)) (set! da4ec0@&no-infinities-rcd (unspecified)) (set! da4ec6@da4ec1 (unspecified)) (set! da4ec8@da4ec3 (unspecified)) (set! da4eca@da4ec2 (unspecified)) (set! da4ecd@p? (unspecified)) (set! da4ecf@make-no-nans-violation (unspecified)) (set! da4ed1@no-nans-violation? (unspecified)) (set! da4ed3@&no-nans-rtd (unspecified)) (set! da4ed5@&no-nans-rcd (unspecified)) (set! da4c17@da4c12 (make-record-type-descriptor '&condition '#f 'da4c15 '#f '#f '#())) (set! da4ed6@da4c17@da4c12 da4c17@da4c12) (set! da4c19@da4c14 '#f) (set! da4ed7@da4c19@da4c14 da4c19@da4c14) (set! da4c1b@da4c13 (make-record-constructor-descriptor da4c17@da4c12 '#f da4c19@da4c14)) (set! da4ed8@da4c1b@da4c13 da4c1b@da4c13) (set! da4c1e@&condition? (record-predicate da4c17@da4c12)) (set! da4ed9@da4c1e@&condition? da4c1e@&condition?) (set! da4c20@make-&condition (record-constructor da4c1b@da4c13)) (set! da4eda@da4c20@make-&condition da4c20@make-&condition) (set! da4c22@&condition-rtd da4c17@da4c12) (set! da4edb@da4c22@&condition-rtd da4c22@&condition-rtd) (set! da4c24@&condition-rcd da4c1b@da4c13) (set! da4edc@da4c24@&condition-rcd da4c24@&condition-rcd) (set! da4c70@da4c6b (make-record-type-descriptor '&message da4c17@da4c12 'da4c6e '#f '#f '#((immutable message)))) (set! da4edd@da4c70@da4c6b da4c70@da4c6b) (set! da4c72@da4c6d '#f) (set! da4ede@da4c72@da4c6d da4c72@da4c6d) (set! da4c74@da4c6c (make-record-constructor-descriptor da4c70@da4c6b da4c1b@da4c13 da4c72@da4c6d)) (set! da4edf@da4c74@da4c6c da4c74@da4c6c) (set! da4c77@p? (record-predicate da4c70@da4c6b)) (set! da4ee0@da4c77@p? da4c77@p?) (set! da4c79@make-message-condition (record-constructor da4c74@da4c6c)) (set! da4ee1@da4c79@make-message-condition da4c79@make-message-condition) (set! da4c7b@da4c6a (record-accessor da4c70@da4c6b '0)) (set! da4ee2@da4c7b@da4c6a da4c7b@da4c6a) (set! da4c7d@message-condition? (condition-predicate da4c70@da4c6b)) (set! da4ee3@da4c7d@message-condition? da4c7d@message-condition?) (set! da4c7f@condition-message (condition-accessor da4c70@da4c6b da4c7b@da4c6a)) (set! da4ee4@da4c7f@condition-message da4c7f@condition-message) (set! da4c81@&message-rtd da4c70@da4c6b) (set! da4ee5@da4c81@&message-rtd da4c81@&message-rtd) (set! da4c83@&message-rcd da4c74@da4c6c) (set! da4ee6@da4c83@&message-rcd da4c83@&message-rcd) (set! da4c89@da4c84 (make-record-type-descriptor '&warning da4c17@da4c12 'da4c87 '#f '#f '#())) (set! da4ee7@da4c89@da4c84 da4c89@da4c84) (set! da4c8b@da4c86 '#f) (set! da4ee8@da4c8b@da4c86 da4c8b@da4c86) (set! da4c8d@da4c85 (make-record-constructor-descriptor da4c89@da4c84 da4c1b@da4c13 da4c8b@da4c86)) (set! da4ee9@da4c8d@da4c85 da4c8d@da4c85) (set! da4c90@p? (record-predicate da4c89@da4c84)) (set! da4eea@da4c90@p? da4c90@p?) (set! da4c92@make-warning (record-constructor da4c8d@da4c85)) (set! da4eeb@da4c92@make-warning da4c92@make-warning) (set! da4c94@warning? (condition-predicate da4c89@da4c84)) (set! da4eec@da4c94@warning? da4c94@warning?) (set! da4c96@&warning-rtd da4c89@da4c84) (set! da4eed@da4c96@&warning-rtd da4c96@&warning-rtd) (set! da4c98@&warning-rcd da4c8d@da4c85) (set! da4eee@da4c98@&warning-rcd da4c98@&warning-rcd) (set! da4c9e@da4c99 (make-record-type-descriptor '&serious da4c17@da4c12 'da4c9c '#f '#f '#())) (set! da4eef@da4c9e@da4c99 da4c9e@da4c99) (set! da4ca0@da4c9b '#f) (set! da4ef0@da4ca0@da4c9b da4ca0@da4c9b) (set! da4ca2@da4c9a (make-record-constructor-descriptor da4c9e@da4c99 da4c1b@da4c13 da4ca0@da4c9b)) (set! da4ef1@da4ca2@da4c9a da4ca2@da4c9a) (set! da4ca5@p? (record-predicate da4c9e@da4c99)) (set! da4ef2@da4ca5@p? da4ca5@p?) (set! da4ca7@make-serious-condition (record-constructor da4ca2@da4c9a)) (set! da4ef3@da4ca7@make-serious-condition da4ca7@make-serious-condition) (set! da4ca9@serious-condition? (condition-predicate da4c9e@da4c99)) (set! da4ef4@da4ca9@serious-condition? da4ca9@serious-condition?) (set! da4cab@&serious-rtd da4c9e@da4c99) (set! da4ef5@da4cab@&serious-rtd da4cab@&serious-rtd) (set! da4cad@&serious-rcd da4ca2@da4c9a) (set! da4ef6@da4cad@&serious-rcd da4cad@&serious-rcd) (set! da4cb3@da4cae (make-record-type-descriptor '&error da4c9e@da4c99 'da4cb1 '#f '#f '#())) (set! da4ef7@da4cb3@da4cae da4cb3@da4cae) (set! da4cb5@da4cb0 '#f) (set! da4ef8@da4cb5@da4cb0 da4cb5@da4cb0) (set! da4cb7@da4caf (make-record-constructor-descriptor da4cb3@da4cae da4ca2@da4c9a da4cb5@da4cb0)) (set! da4ef9@da4cb7@da4caf da4cb7@da4caf) (set! da4cba@p? (record-predicate da4cb3@da4cae)) (set! da4efa@da4cba@p? da4cba@p?) (set! da4cbc@make-error (record-constructor da4cb7@da4caf)) (set! da4efb@da4cbc@make-error da4cbc@make-error) (set! da4cbe@error? (condition-predicate da4cb3@da4cae)) (set! da4efc@da4cbe@error? da4cbe@error?) (set! da4cc0@&error-rtd da4cb3@da4cae) (set! da4efd@da4cc0@&error-rtd da4cc0@&error-rtd) (set! da4cc2@&error-rcd da4cb7@da4caf) (set! da4efe@da4cc2@&error-rcd da4cc2@&error-rcd) (set! da4cc8@da4cc3 (make-record-type-descriptor '&violation da4c9e@da4c99 'da4cc6 '#f '#f '#())) (set! da4eff@da4cc8@da4cc3 da4cc8@da4cc3) (set! da4cca@da4cc5 '#f) (set! da4f00@da4cca@da4cc5 da4cca@da4cc5) (set! da4ccc@da4cc4 (make-record-constructor-descriptor da4cc8@da4cc3 da4ca2@da4c9a da4cca@da4cc5)) (set! da4f01@da4ccc@da4cc4 da4ccc@da4cc4) (set! da4ccf@p? (record-predicate da4cc8@da4cc3)) (set! da4f02@da4ccf@p? da4ccf@p?) (set! da4cd1@make-violation (record-constructor da4ccc@da4cc4)) (set! da4f03@da4cd1@make-violation da4cd1@make-violation) (set! da4cd3@violation? (condition-predicate da4cc8@da4cc3)) (set! da4f04@da4cd3@violation? da4cd3@violation?) (set! da4cd5@&violation-rtd da4cc8@da4cc3) (set! da4f05@da4cd5@&violation-rtd da4cd5@&violation-rtd) (set! da4cd7@&violation-rcd da4ccc@da4cc4) (set! da4f06@da4cd7@&violation-rcd da4cd7@&violation-rcd) (set! da4cdd@da4cd8 (make-record-type-descriptor '&assertion da4cc8@da4cc3 'da4cdb '#f '#f '#())) (set! da4f07@da4cdd@da4cd8 da4cdd@da4cd8) (set! da4cdf@da4cda '#f) (set! da4f08@da4cdf@da4cda da4cdf@da4cda) (set! da4ce1@da4cd9 (make-record-constructor-descriptor da4cdd@da4cd8 da4ccc@da4cc4 da4cdf@da4cda)) (set! da4f09@da4ce1@da4cd9 da4ce1@da4cd9) (set! da4ce4@p? (record-predicate da4cdd@da4cd8)) (set! da4f0a@da4ce4@p? da4ce4@p?) (set! da4ce6@make-assertion-violation (record-constructor da4ce1@da4cd9)) (set! da4f0b@da4ce6@make-assertion-violation da4ce6@make-assertion-violation) (set! da4ce8@assertion-violation? (condition-predicate da4cdd@da4cd8)) (set! da4f0c@da4ce8@assertion-violation? da4ce8@assertion-violation?) (set! da4cea@&assertion-rtd da4cdd@da4cd8) (set! da4f0d@da4cea@&assertion-rtd da4cea@&assertion-rtd) (set! da4cec@&assertion-rcd da4ce1@da4cd9) (set! da4f0e@da4cec@&assertion-rcd da4cec@&assertion-rcd) (set! da4cf4@da4cef (make-record-type-descriptor '&irritants da4c17@da4c12 'da4cf2 '#f '#f '#((immutable irritants)))) (set! da4f0f@da4cf4@da4cef da4cf4@da4cef) (set! da4cf6@da4cf1 '#f) (set! da4f10@da4cf6@da4cf1 da4cf6@da4cf1) (set! da4cf8@da4cf0 (make-record-constructor-descriptor da4cf4@da4cef da4c1b@da4c13 da4cf6@da4cf1)) (set! da4f11@da4cf8@da4cf0 da4cf8@da4cf0) (set! da4cfb@p? (record-predicate da4cf4@da4cef)) (set! da4f12@da4cfb@p? da4cfb@p?) (set! da4cfd@make-irritants-condition (record-constructor da4cf8@da4cf0)) (set! da4f13@da4cfd@make-irritants-condition da4cfd@make-irritants-condition) (set! da4cff@da4cee (record-accessor da4cf4@da4cef '0)) (set! da4f14@da4cff@da4cee da4cff@da4cee) (set! da4d01@irritants-condition? (condition-predicate da4cf4@da4cef)) (set! da4f15@da4d01@irritants-condition? da4d01@irritants-condition?) (set! da4d03@condition-irritants (condition-accessor da4cf4@da4cef da4cff@da4cee)) (set! da4f16@da4d03@condition-irritants da4d03@condition-irritants) (set! da4d05@&irritants-rtd da4cf4@da4cef) (set! da4f17@da4d05@&irritants-rtd da4d05@&irritants-rtd) (set! da4d07@&irritants-rcd da4cf8@da4cf0) (set! da4f18@da4d07@&irritants-rcd da4d07@&irritants-rcd) (set! da4d0f@da4d0a (make-record-type-descriptor '&who da4c17@da4c12 'da4d0d '#f '#f '#((immutable who)))) (set! da4f19@da4d0f@da4d0a da4d0f@da4d0a) (set! da4d11@da4d0c '#f) (set! da4f1a@da4d11@da4d0c da4d11@da4d0c) (set! da4d13@da4d0b (make-record-constructor-descriptor da4d0f@da4d0a da4c1b@da4c13 da4d11@da4d0c)) (set! da4f1b@da4d13@da4d0b da4d13@da4d0b) (set! da4d16@p? (record-predicate da4d0f@da4d0a)) (set! da4f1c@da4d16@p? da4d16@p?) (set! da4d18@make-who-condition (record-constructor da4d13@da4d0b)) (set! da4f1d@da4d18@make-who-condition da4d18@make-who-condition) (set! da4d1a@da4d09 (record-accessor da4d0f@da4d0a '0)) (set! da4f1e@da4d1a@da4d09 da4d1a@da4d09) (set! da4d1c@who-condition? (condition-predicate da4d0f@da4d0a)) (set! da4f1f@da4d1c@who-condition? da4d1c@who-condition?) (set! da4d1e@condition-who (condition-accessor da4d0f@da4d0a da4d1a@da4d09)) (set! da4f20@da4d1e@condition-who da4d1e@condition-who) (set! da4d20@&who-rtd da4d0f@da4d0a) (set! da4f21@da4d20@&who-rtd da4d20@&who-rtd) (set! da4d22@&who-rcd da4d13@da4d0b) (set! da4f22@da4d22@&who-rcd da4d22@&who-rcd) (set! da4d28@da4d23 (make-record-type-descriptor '&non-continuable da4cc8@da4cc3 'da4d26 '#f '#f '#())) (set! da4f23@da4d28@da4d23 da4d28@da4d23) (set! da4d2a@da4d25 '#f) (set! da4f24@da4d2a@da4d25 da4d2a@da4d25) (set! da4d2c@da4d24 (make-record-constructor-descriptor da4d28@da4d23 da4ccc@da4cc4 da4d2a@da4d25)) (set! da4f25@da4d2c@da4d24 da4d2c@da4d24) (set! da4d2f@p? (record-predicate da4d28@da4d23)) (set! da4f26@da4d2f@p? da4d2f@p?) (set! da4d31@make-non-continuable-violation (record-constructor da4d2c@da4d24)) (set! da4f27@da4d31@make-non-continuable-violation da4d31@make-non-continuable-violation) (set! da4d33@non-continuable-violation? (condition-predicate da4d28@da4d23)) (set! da4f28@da4d33@non-continuable-violation? da4d33@non-continuable-violation?) (set! da4d35@&non-continuable-rtd da4d28@da4d23) (set! da4f29@da4d35@&non-continuable-rtd da4d35@&non-continuable-rtd) (set! da4d37@&non-continuable-rcd da4d2c@da4d24) (set! da4f2a@da4d37@&non-continuable-rcd da4d37@&non-continuable-rcd) (set! da4d3d@da4d38 (make-record-type-descriptor '&implementation-restriction da4cc8@da4cc3 'da4d3b '#f '#f '#())) (set! da4f2b@da4d3d@da4d38 da4d3d@da4d38) (set! da4d3f@da4d3a '#f) (set! da4f2c@da4d3f@da4d3a da4d3f@da4d3a) (set! da4d41@da4d39 (make-record-constructor-descriptor da4d3d@da4d38 da4ccc@da4cc4 da4d3f@da4d3a)) (set! da4f2d@da4d41@da4d39 da4d41@da4d39) (set! da4d44@p? (record-predicate da4d3d@da4d38)) (set! da4f2e@da4d44@p? da4d44@p?) (set! da4d46@make-implementation-restriction-violation (record-constructor da4d41@da4d39)) (set! da4f2f@da4d46@make-implementation-restriction-violation da4d46@make-implementation-restriction-violation) (set! da4d48@implementation-restriction-violation? (condition-predicate da4d3d@da4d38)) (set! da4f30@da4d48@implementation-restriction-violation? da4d48@implementation-restriction-violation?) (set! da4d4a@&implementation-restriction-rtd da4d3d@da4d38) (set! da4f31@da4d4a@&implementation-restriction-rtd da4d4a@&implementation-restriction-rtd) (set! da4d4c@&implementation-restriction-rcd da4d41@da4d39) (set! da4f32@da4d4c@&implementation-restriction-rcd da4d4c@&implementation-restriction-rcd) (set! da4d52@da4d4d (make-record-type-descriptor '&lexical da4cc8@da4cc3 'da4d50 '#f '#f '#())) (set! da4f33@da4d52@da4d4d da4d52@da4d4d) (set! da4d54@da4d4f '#f) (set! da4f34@da4d54@da4d4f da4d54@da4d4f) (set! da4d56@da4d4e (make-record-constructor-descriptor da4d52@da4d4d da4ccc@da4cc4 da4d54@da4d4f)) (set! da4f35@da4d56@da4d4e da4d56@da4d4e) (set! da4d59@p? (record-predicate da4d52@da4d4d)) (set! da4f36@da4d59@p? da4d59@p?) (set! da4d5b@make-lexical-violation (record-constructor da4d56@da4d4e)) (set! da4f37@da4d5b@make-lexical-violation da4d5b@make-lexical-violation) (set! da4d5d@lexical-violation? (condition-predicate da4d52@da4d4d)) (set! da4f38@da4d5d@lexical-violation? da4d5d@lexical-violation?) (set! da4d5f@&lexical-rtd da4d52@da4d4d) (set! da4f39@da4d5f@&lexical-rtd da4d5f@&lexical-rtd) (set! da4d61@&lexical-rcd da4d56@da4d4e) (set! da4f3a@da4d61@&lexical-rcd da4d61@&lexical-rcd) (set! da4d6b@da4d66 (make-record-type-descriptor '&syntax da4cc8@da4cc3 'da4d69 '#f '#f '#((immutable form) (immutable subform)))) (set! da4f3b@da4d6b@da4d66 da4d6b@da4d66) (set! da4d6d@da4d68 '#f) (set! da4f3c@da4d6d@da4d68 da4d6d@da4d68) (set! da4d6f@da4d67 (make-record-constructor-descriptor da4d6b@da4d66 da4ccc@da4cc4 da4d6d@da4d68)) (set! da4f3d@da4d6f@da4d67 da4d6f@da4d67) (set! da4d72@p? (record-predicate da4d6b@da4d66)) (set! da4f3e@da4d72@p? da4d72@p?) (set! da4d74@make-syntax-violation (record-constructor da4d6f@da4d67)) (set! da4f3f@da4d74@make-syntax-violation da4d74@make-syntax-violation) (set! da4d76@da4d63 (record-accessor da4d6b@da4d66 '0)) (set! da4f40@da4d76@da4d63 da4d76@da4d63) (set! da4d78@da4d65 (record-accessor da4d6b@da4d66 '1)) (set! da4f41@da4d78@da4d65 da4d78@da4d65) (set! da4d7a@syntax-violation? (condition-predicate da4d6b@da4d66)) (set! da4f42@da4d7a@syntax-violation? da4d7a@syntax-violation?) (set! da4d7c@syntax-violation-form (condition-accessor da4d6b@da4d66 da4d76@da4d63)) (set! da4f43@da4d7c@syntax-violation-form da4d7c@syntax-violation-form) (set! da4d7e@syntax-violation-subform (condition-accessor da4d6b@da4d66 da4d78@da4d65)) (set! da4f44@da4d7e@syntax-violation-subform da4d7e@syntax-violation-subform) (set! da4d80@&syntax-rtd da4d6b@da4d66) (set! da4f45@da4d80@&syntax-rtd da4d80@&syntax-rtd) (set! da4d82@&syntax-rcd da4d6f@da4d67) (set! da4f46@da4d82@&syntax-rcd da4d82@&syntax-rcd) (set! da4d88@da4d83 (make-record-type-descriptor '&undefined da4cc8@da4cc3 'da4d86 '#f '#f '#())) (set! da4f47@da4d88@da4d83 da4d88@da4d83) (set! da4d8a@da4d85 '#f) (set! da4f48@da4d8a@da4d85 da4d8a@da4d85) (set! da4d8c@da4d84 (make-record-constructor-descriptor da4d88@da4d83 da4ccc@da4cc4 da4d8a@da4d85)) (set! da4f49@da4d8c@da4d84 da4d8c@da4d84) (set! da4d8f@p? (record-predicate da4d88@da4d83)) (set! da4f4a@da4d8f@p? da4d8f@p?) (set! da4d91@make-undefined-violation (record-constructor da4d8c@da4d84)) (set! da4f4b@da4d91@make-undefined-violation da4d91@make-undefined-violation) (set! da4d93@undefined-violation? (condition-predicate da4d88@da4d83)) (set! da4f4c@da4d93@undefined-violation? da4d93@undefined-violation?) (set! da4d95@&undefined-rtd da4d88@da4d83) (set! da4f4d@da4d95@&undefined-rtd da4d95@&undefined-rtd) (set! da4d97@&undefined-rcd da4d8c@da4d84) (set! da4f4e@da4d97@&undefined-rcd da4d97@&undefined-rcd) (set! da4d9d@da4d98 (make-record-type-descriptor '&i/o da4cb3@da4cae 'da4d9b '#f '#f '#())) (set! da4f4f@da4d9d@da4d98 da4d9d@da4d98) (set! da4d9f@da4d9a '#f) (set! da4f50@da4d9f@da4d9a da4d9f@da4d9a) (set! da4da1@da4d99 (make-record-constructor-descriptor da4d9d@da4d98 da4cb7@da4caf da4d9f@da4d9a)) (set! da4f51@da4da1@da4d99 da4da1@da4d99) (set! da4da4@p? (record-predicate da4d9d@da4d98)) (set! da4f52@da4da4@p? da4da4@p?) (set! da4da6@make-i/o-error (record-constructor da4da1@da4d99)) (set! da4f53@da4da6@make-i/o-error da4da6@make-i/o-error) (set! da4da8@i/o-error? (condition-predicate da4d9d@da4d98)) (set! da4f54@da4da8@i/o-error? da4da8@i/o-error?) (set! da4daa@&i/o-rtd da4d9d@da4d98) (set! da4f55@da4daa@&i/o-rtd da4daa@&i/o-rtd) (set! da4dac@&i/o-rcd da4da1@da4d99) (set! da4f56@da4dac@&i/o-rcd da4dac@&i/o-rcd) (set! da4db2@da4dad (make-record-type-descriptor '&i/o-read da4d9d@da4d98 'da4db0 '#f '#f '#())) (set! da4f57@da4db2@da4dad da4db2@da4dad) (set! da4db4@da4daf '#f) (set! da4f58@da4db4@da4daf da4db4@da4daf) (set! da4db6@da4dae (make-record-constructor-descriptor da4db2@da4dad da4da1@da4d99 da4db4@da4daf)) (set! da4f59@da4db6@da4dae da4db6@da4dae) (set! da4db9@p? (record-predicate da4db2@da4dad)) (set! da4f5a@da4db9@p? da4db9@p?) (set! da4dbb@make-i/o-read-error (record-constructor da4db6@da4dae)) (set! da4f5b@da4dbb@make-i/o-read-error da4dbb@make-i/o-read-error) (set! da4dbd@i/o-read-error? (condition-predicate da4db2@da4dad)) (set! da4f5c@da4dbd@i/o-read-error? da4dbd@i/o-read-error?) (set! da4dbf@&i/o-read-rtd da4db2@da4dad) (set! da4f5d@da4dbf@&i/o-read-rtd da4dbf@&i/o-read-rtd) (set! da4dc1@&i/o-read-rcd da4db6@da4dae) (set! da4f5e@da4dc1@&i/o-read-rcd da4dc1@&i/o-read-rcd) (set! da4dc7@da4dc2 (make-record-type-descriptor '&i/o-write da4d9d@da4d98 'da4dc5 '#f '#f '#())) (set! da4f5f@da4dc7@da4dc2 da4dc7@da4dc2) (set! da4dc9@da4dc4 '#f) (set! da4f60@da4dc9@da4dc4 da4dc9@da4dc4) (set! da4dcb@da4dc3 (make-record-constructor-descriptor da4dc7@da4dc2 da4da1@da4d99 da4dc9@da4dc4)) (set! da4f61@da4dcb@da4dc3 da4dcb@da4dc3) (set! da4dce@p? (record-predicate da4dc7@da4dc2)) (set! da4f62@da4dce@p? da4dce@p?) (set! da4dd0@make-i/o-write-error (record-constructor da4dcb@da4dc3)) (set! da4f63@da4dd0@make-i/o-write-error da4dd0@make-i/o-write-error) (set! da4dd2@i/o-write-error? (condition-predicate da4dc7@da4dc2)) (set! da4f64@da4dd2@i/o-write-error? da4dd2@i/o-write-error?) (set! da4dd4@&i/o-write-rtd da4dc7@da4dc2) (set! da4f65@da4dd4@&i/o-write-rtd da4dd4@&i/o-write-rtd) (set! da4dd6@&i/o-write-rcd da4dcb@da4dc3) (set! da4f66@da4dd6@&i/o-write-rcd da4dd6@&i/o-write-rcd) (set! da4dde@da4dd9 (make-record-type-descriptor '&i/o-invalid-position da4d9d@da4d98 'da4ddc '#f '#f '#((immutable position)))) (set! da4f67@da4dde@da4dd9 da4dde@da4dd9) (set! da4de0@da4ddb '#f) (set! da4f68@da4de0@da4ddb da4de0@da4ddb) (set! da4de2@da4dda (make-record-constructor-descriptor da4dde@da4dd9 da4da1@da4d99 da4de0@da4ddb)) (set! da4f69@da4de2@da4dda da4de2@da4dda) (set! da4de5@p? (record-predicate da4dde@da4dd9)) (set! da4f6a@da4de5@p? da4de5@p?) (set! da4de7@make-i/o-invalid-position-error (record-constructor da4de2@da4dda)) (set! da4f6b@da4de7@make-i/o-invalid-position-error da4de7@make-i/o-invalid-position-error) (set! da4de9@da4dd8 (record-accessor da4dde@da4dd9 '0)) (set! da4f6c@da4de9@da4dd8 da4de9@da4dd8) (set! da4deb@i/o-invalid-position-error? (condition-predicate da4dde@da4dd9)) (set! da4f6d@da4deb@i/o-invalid-position-error? da4deb@i/o-invalid-position-error?) (set! da4ded@i/o-error-position (condition-accessor da4dde@da4dd9 da4de9@da4dd8)) (set! da4f6e@da4ded@i/o-error-position da4ded@i/o-error-position) (set! da4def@&i/o-invalid-position-rtd da4dde@da4dd9) (set! da4f6f@da4def@&i/o-invalid-position-rtd da4def@&i/o-invalid-position-rtd) (set! da4df1@&i/o-invalid-position-rcd da4de2@da4dda) (set! da4f70@da4df1@&i/o-invalid-position-rcd da4df1@&i/o-invalid-position-rcd) (set! da4df9@da4df4 (make-record-type-descriptor '&i/o-filename da4d9d@da4d98 'da4df7 '#f '#f '#((immutable filename)))) (set! da4f71@da4df9@da4df4 da4df9@da4df4) (set! da4dfb@da4df6 '#f) (set! da4f72@da4dfb@da4df6 da4dfb@da4df6) (set! da4dfd@da4df5 (make-record-constructor-descriptor da4df9@da4df4 da4da1@da4d99 da4dfb@da4df6)) (set! da4f73@da4dfd@da4df5 da4dfd@da4df5) (set! da4e00@p? (record-predicate da4df9@da4df4)) (set! da4f74@da4e00@p? da4e00@p?) (set! da4e02@make-i/o-filename-error (record-constructor da4dfd@da4df5)) (set! da4f75@da4e02@make-i/o-filename-error da4e02@make-i/o-filename-error) (set! da4e04@da4df3 (record-accessor da4df9@da4df4 '0)) (set! da4f76@da4e04@da4df3 da4e04@da4df3) (set! da4e06@i/o-filename-error? (condition-predicate da4df9@da4df4)) (set! da4f77@da4e06@i/o-filename-error? da4e06@i/o-filename-error?) (set! da4e08@i/o-error-filename (condition-accessor da4df9@da4df4 da4e04@da4df3)) (set! da4f78@da4e08@i/o-error-filename da4e08@i/o-error-filename) (set! da4e0a@&i/o-filename-rtd da4df9@da4df4) (set! da4f79@da4e0a@&i/o-filename-rtd da4e0a@&i/o-filename-rtd) (set! da4e0c@&i/o-filename-rcd da4dfd@da4df5) (set! da4f7a@da4e0c@&i/o-filename-rcd da4e0c@&i/o-filename-rcd) (set! da4e12@da4e0d (make-record-type-descriptor '&i/o-file-protection da4df9@da4df4 'da4e10 '#f '#f '#())) (set! da4f7b@da4e12@da4e0d da4e12@da4e0d) (set! da4e14@da4e0f '#f) (set! da4f7c@da4e14@da4e0f da4e14@da4e0f) (set! da4e16@da4e0e (make-record-constructor-descriptor da4e12@da4e0d da4dfd@da4df5 da4e14@da4e0f)) (set! da4f7d@da4e16@da4e0e da4e16@da4e0e) (set! da4e19@p? (record-predicate da4e12@da4e0d)) (set! da4f7e@da4e19@p? da4e19@p?) (set! da4e1b@make-i/o-file-protection-error (record-constructor da4e16@da4e0e)) (set! da4f7f@da4e1b@make-i/o-file-protection-error da4e1b@make-i/o-file-protection-error) (set! da4e1d@i/o-file-protection-error? (condition-predicate da4e12@da4e0d)) (set! da4f80@da4e1d@i/o-file-protection-error? da4e1d@i/o-file-protection-error?) (set! da4e1f@&i/o-file-protection-rtd da4e12@da4e0d) (set! da4f81@da4e1f@&i/o-file-protection-rtd da4e1f@&i/o-file-protection-rtd) (set! da4e21@&i/o-file-protection-rcd da4e16@da4e0e) (set! da4f82@da4e21@&i/o-file-protection-rcd da4e21@&i/o-file-protection-rcd) (set! da4e27@da4e22 (make-record-type-descriptor '&i/o-file-is-read-only da4e12@da4e0d 'da4e25 '#f '#f '#())) (set! da4f83@da4e27@da4e22 da4e27@da4e22) (set! da4e29@da4e24 '#f) (set! da4f84@da4e29@da4e24 da4e29@da4e24) (set! da4e2b@da4e23 (make-record-constructor-descriptor da4e27@da4e22 da4e16@da4e0e da4e29@da4e24)) (set! da4f85@da4e2b@da4e23 da4e2b@da4e23) (set! da4e2e@p? (record-predicate da4e27@da4e22)) (set! da4f86@da4e2e@p? da4e2e@p?) (set! da4e30@make-i/o-file-is-read-only-error (record-constructor da4e2b@da4e23)) (set! da4f87@da4e30@make-i/o-file-is-read-only-error da4e30@make-i/o-file-is-read-only-error) (set! da4e32@i/o-file-is-read-only-error? (condition-predicate da4e27@da4e22)) (set! da4f88@da4e32@i/o-file-is-read-only-error? da4e32@i/o-file-is-read-only-error?) (set! da4e34@&i/o-file-is-read-only-rtd da4e27@da4e22) (set! da4f89@da4e34@&i/o-file-is-read-only-rtd da4e34@&i/o-file-is-read-only-rtd) (set! da4e36@&i/o-file-is-read-only-rcd da4e2b@da4e23) (set! da4f8a@da4e36@&i/o-file-is-read-only-rcd da4e36@&i/o-file-is-read-only-rcd) (set! da4e3c@da4e37 (make-record-type-descriptor '&i/o-file-already-exists da4df9@da4df4 'da4e3a '#f '#f '#())) (set! da4f8b@da4e3c@da4e37 da4e3c@da4e37) (set! da4e3e@da4e39 '#f) (set! da4f8c@da4e3e@da4e39 da4e3e@da4e39) (set! da4e40@da4e38 (make-record-constructor-descriptor da4e3c@da4e37 da4dfd@da4df5 da4e3e@da4e39)) (set! da4f8d@da4e40@da4e38 da4e40@da4e38) (set! da4e43@p? (record-predicate da4e3c@da4e37)) (set! da4f8e@da4e43@p? da4e43@p?) (set! da4e45@make-i/o-file-already-exists-error (record-constructor da4e40@da4e38)) (set! da4f8f@da4e45@make-i/o-file-already-exists-error da4e45@make-i/o-file-already-exists-error) (set! da4e47@i/o-file-already-exists-error? (condition-predicate da4e3c@da4e37)) (set! da4f90@da4e47@i/o-file-already-exists-error? da4e47@i/o-file-already-exists-error?) (set! da4e49@&i/o-file-already-exists-rtd da4e3c@da4e37) (set! da4f91@da4e49@&i/o-file-already-exists-rtd da4e49@&i/o-file-already-exists-rtd) (set! da4e4b@&i/o-file-already-exists-rcd da4e40@da4e38) (set! da4f92@da4e4b@&i/o-file-already-exists-rcd da4e4b@&i/o-file-already-exists-rcd) (set! da4e51@da4e4c (make-record-type-descriptor '&i/o-file-does-not-exist da4df9@da4df4 'da4e4f '#f '#f '#())) (set! da4f93@da4e51@da4e4c da4e51@da4e4c) (set! da4e53@da4e4e '#f) (set! da4f94@da4e53@da4e4e da4e53@da4e4e) (set! da4e55@da4e4d (make-record-constructor-descriptor da4e51@da4e4c da4dfd@da4df5 da4e53@da4e4e)) (set! da4f95@da4e55@da4e4d da4e55@da4e4d) (set! da4e58@p? (record-predicate da4e51@da4e4c)) (set! da4f96@da4e58@p? da4e58@p?) (set! da4e5a@make-i/o-file-does-not-exist-error (record-constructor da4e55@da4e4d)) (set! da4f97@da4e5a@make-i/o-file-does-not-exist-error da4e5a@make-i/o-file-does-not-exist-error) (set! da4e5c@i/o-file-does-not-exist-error? (condition-predicate da4e51@da4e4c)) (set! da4f98@da4e5c@i/o-file-does-not-exist-error? da4e5c@i/o-file-does-not-exist-error?) (set! da4e5e@&i/o-file-does-not-exist-rtd da4e51@da4e4c) (set! da4f99@da4e5e@&i/o-file-does-not-exist-rtd da4e5e@&i/o-file-does-not-exist-rtd) (set! da4e60@&i/o-file-does-not-exist-rcd da4e55@da4e4d) (set! da4f9a@da4e60@&i/o-file-does-not-exist-rcd da4e60@&i/o-file-does-not-exist-rcd) (set! da4e68@da4e63 (make-record-type-descriptor '&i/o-port da4d9d@da4d98 'da4e66 '#f '#f '#((immutable port)))) (set! da4f9b@da4e68@da4e63 da4e68@da4e63) (set! da4e6a@da4e65 '#f) (set! da4f9c@da4e6a@da4e65 da4e6a@da4e65) (set! da4e6c@da4e64 (make-record-constructor-descriptor da4e68@da4e63 da4da1@da4d99 da4e6a@da4e65)) (set! da4f9d@da4e6c@da4e64 da4e6c@da4e64) (set! da4e6f@p? (record-predicate da4e68@da4e63)) (set! da4f9e@da4e6f@p? da4e6f@p?) (set! da4e71@make-i/o-port-error (record-constructor da4e6c@da4e64)) (set! da4f9f@da4e71@make-i/o-port-error da4e71@make-i/o-port-error) (set! da4e73@da4e62 (record-accessor da4e68@da4e63 '0)) (set! da4fa0@da4e73@da4e62 da4e73@da4e62) (set! da4e75@i/o-port-error? (condition-predicate da4e68@da4e63)) (set! da4fa1@da4e75@i/o-port-error? da4e75@i/o-port-error?) (set! da4e77@i/o-error-port (condition-accessor da4e68@da4e63 da4e73@da4e62)) (set! da4fa2@da4e77@i/o-error-port da4e77@i/o-error-port) (set! da4e79@&i/o-port-rtd da4e68@da4e63) (set! da4fa3@da4e79@&i/o-port-rtd da4e79@&i/o-port-rtd) (set! da4e7b@&i/o-port-rcd da4e6c@da4e64) (set! da4fa4@da4e7b@&i/o-port-rcd da4e7b@&i/o-port-rcd) (set! da4e81@da4e7c (make-record-type-descriptor '&i/o-decoding da4e68@da4e63 'da4e7f '#f '#f '#())) (set! da4fa5@da4e81@da4e7c da4e81@da4e7c) (set! da4e83@da4e7e '#f) (set! da4fa6@da4e83@da4e7e da4e83@da4e7e) (set! da4e85@da4e7d (make-record-constructor-descriptor da4e81@da4e7c da4e6c@da4e64 da4e83@da4e7e)) (set! da4fa7@da4e85@da4e7d da4e85@da4e7d) (set! da4e88@p? (record-predicate da4e81@da4e7c)) (set! da4fa8@da4e88@p? da4e88@p?) (set! da4e8a@make-i/o-decoding-error (record-constructor da4e85@da4e7d)) (set! da4fa9@da4e8a@make-i/o-decoding-error da4e8a@make-i/o-decoding-error) (set! da4e8c@i/o-decoding-error? (condition-predicate da4e81@da4e7c)) (set! da4faa@da4e8c@i/o-decoding-error? da4e8c@i/o-decoding-error?) (set! da4e8e@&i/o-decoding-rtd da4e81@da4e7c) (set! da4fab@da4e8e@&i/o-decoding-rtd da4e8e@&i/o-decoding-rtd) (set! da4e90@&i/o-decoding-rcd da4e85@da4e7d) (set! da4fac@da4e90@&i/o-decoding-rcd da4e90@&i/o-decoding-rcd) (set! da4e98@da4e93 (make-record-type-descriptor '&i/o-encoding da4e68@da4e63 'da4e96 '#f '#f '#((immutable char)))) (set! da4fad@da4e98@da4e93 da4e98@da4e93) (set! da4e9a@da4e95 '#f) (set! da4fae@da4e9a@da4e95 da4e9a@da4e95) (set! da4e9c@da4e94 (make-record-constructor-descriptor da4e98@da4e93 da4e6c@da4e64 da4e9a@da4e95)) (set! da4faf@da4e9c@da4e94 da4e9c@da4e94) (set! da4e9f@p? (record-predicate da4e98@da4e93)) (set! da4fb0@da4e9f@p? da4e9f@p?) (set! da4ea1@make-i/o-encoding-error (record-constructor da4e9c@da4e94)) (set! da4fb1@da4ea1@make-i/o-encoding-error da4ea1@make-i/o-encoding-error) (set! da4ea3@da4e92 (record-accessor da4e98@da4e93 '0)) (set! da4fb2@da4ea3@da4e92 da4ea3@da4e92) (set! da4ea5@i/o-encoding-error? (condition-predicate da4e98@da4e93)) (set! da4fb3@da4ea5@i/o-encoding-error? da4ea5@i/o-encoding-error?) (set! da4ea7@i/o-encoding-error-char (condition-accessor da4e98@da4e93 da4ea3@da4e92)) (set! da4fb4@da4ea7@i/o-encoding-error-char da4ea7@i/o-encoding-error-char) (set! da4ea9@&i/o-encoding-rtd da4e98@da4e93) (set! da4fb5@da4ea9@&i/o-encoding-rtd da4ea9@&i/o-encoding-rtd) (set! da4eab@&i/o-encoding-rcd da4e9c@da4e94) (set! da4fb6@da4eab@&i/o-encoding-rcd da4eab@&i/o-encoding-rcd) (set! da4eb1@da4eac (make-record-type-descriptor '&no-infinities da4d3d@da4d38 'da4eaf '#f '#f '#())) (set! da4fb7@da4eb1@da4eac da4eb1@da4eac) (set! da4eb3@da4eae '#f) (set! da4fb8@da4eb3@da4eae da4eb3@da4eae) (set! da4eb5@da4ead (make-record-constructor-descriptor da4eb1@da4eac da4d41@da4d39 da4eb3@da4eae)) (set! da4fb9@da4eb5@da4ead da4eb5@da4ead) (set! da4eb8@p? (record-predicate da4eb1@da4eac)) (set! da4fba@da4eb8@p? da4eb8@p?) (set! da4eba@make-no-infinities-violation (record-constructor da4eb5@da4ead)) (set! da4fbb@da4eba@make-no-infinities-violation da4eba@make-no-infinities-violation) (set! da4ebc@no-infinities-violation? (condition-predicate da4eb1@da4eac)) (set! da4fbc@da4ebc@no-infinities-violation? da4ebc@no-infinities-violation?) (set! da4ebe@&no-infinities-rtd da4eb1@da4eac) (set! da4fbd@da4ebe@&no-infinities-rtd da4ebe@&no-infinities-rtd) (set! da4ec0@&no-infinities-rcd da4eb5@da4ead) (set! da4fbe@da4ec0@&no-infinities-rcd da4ec0@&no-infinities-rcd) (set! da4ec6@da4ec1 (make-record-type-descriptor '&no-nans da4d3d@da4d38 'da4ec4 '#f '#f '#())) (set! da4fbf@da4ec6@da4ec1 da4ec6@da4ec1) (set! da4ec8@da4ec3 '#f) (set! da4fc0@da4ec8@da4ec3 da4ec8@da4ec3) (set! da4eca@da4ec2 (make-record-constructor-descriptor da4ec6@da4ec1 da4d41@da4d39 da4ec8@da4ec3)) (set! da4fc1@da4eca@da4ec2 da4eca@da4ec2) (set! da4ecd@p? (record-predicate da4ec6@da4ec1)) (set! da4fc2@da4ecd@p? da4ecd@p?) (set! da4ecf@make-no-nans-violation (record-constructor da4eca@da4ec2)) (set! da4fc3@da4ecf@make-no-nans-violation da4ecf@make-no-nans-violation) (set! da4ed1@no-nans-violation? (condition-predicate da4ec6@da4ec1)) (set! da4fc4@da4ed1@no-nans-violation? da4ed1@no-nans-violation?) (set! da4ed3@&no-nans-rtd da4ec6@da4ec1) (set! da4fc5@da4ed3@&no-nans-rtd da4ed3@&no-nans-rtd) (set! da4ed5@&no-nans-rcd da4eca@da4ec2) (set! da4fc6@da4ed5@&no-nans-rcd da4ed5@&no-nans-rcd) (void))
(begin (begin (da2a5c@da2a11@current-primitive-locations (lambda (da5491@x) (let ((da5493@t (assq da5491@x '((&no-nans-rcd . da4fc6@da4ed5@&no-nans-rcd) (&no-nans-rtd . da4fc5@da4ed3@&no-nans-rtd) (&no-infinities-rcd . da4fbe@da4ec0@&no-infinities-rcd) (&no-infinities-rtd . da4fbd@da4ebe@&no-infinities-rtd) (&i/o-encoding-rcd . da4fb6@da4eab@&i/o-encoding-rcd) (&i/o-encoding-rtd . da4fb5@da4ea9@&i/o-encoding-rtd) (&i/o-decoding-rcd . da4fac@da4e90@&i/o-decoding-rcd) (&i/o-decoding-rtd . da4fab@da4e8e@&i/o-decoding-rtd) (&i/o-port-rcd . da4fa4@da4e7b@&i/o-port-rcd) (&i/o-port-rtd . da4fa3@da4e79@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . da4f9a@da4e60@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . da4f99@da4e5e@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . da4f92@da4e4b@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . da4f91@da4e49@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . da4f8a@da4e36@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . da4f89@da4e34@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . da4f82@da4e21@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . da4f81@da4e1f@&i/o-file-protection-rtd) (&i/o-filename-rcd . da4f7a@da4e0c@&i/o-filename-rcd) (&i/o-filename-rtd . da4f79@da4e0a@&i/o-filename-rtd) (&i/o-invalid-position-rcd . da4f70@da4df1@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . da4f6f@da4def@&i/o-invalid-position-rtd) (&i/o-write-rcd . da4f66@da4dd6@&i/o-write-rcd) (&i/o-write-rtd . da4f65@da4dd4@&i/o-write-rtd) (&i/o-read-rcd . da4f5e@da4dc1@&i/o-read-rcd) (&i/o-read-rtd . da4f5d@da4dbf@&i/o-read-rtd) (&i/o-rcd . da4f56@da4dac@&i/o-rcd) (&i/o-rtd . da4f55@da4daa@&i/o-rtd) (&undefined-rcd . da4f4e@da4d97@&undefined-rcd) (&undefined-rtd . da4f4d@da4d95@&undefined-rtd) (&syntax-rcd . da4f46@da4d82@&syntax-rcd) (&syntax-rtd . da4f45@da4d80@&syntax-rtd) (&lexical-rcd . da4f3a@da4d61@&lexical-rcd) (&lexical-rtd . da4f39@da4d5f@&lexical-rtd) (&implementation-restriction-rcd . da4f32@da4d4c@&implementation-restriction-rcd) (&implementation-restriction-rtd . da4f31@da4d4a@&implementation-restriction-rtd) (&non-continuable-rcd . da4f2a@da4d37@&non-continuable-rcd) (&non-continuable-rtd . da4f29@da4d35@&non-continuable-rtd) (&who-rcd . da4f22@da4d22@&who-rcd) (&who-rtd . da4f21@da4d20@&who-rtd) (&irritants-rcd . da4f18@da4d07@&irritants-rcd) (&irritants-rtd . da4f17@da4d05@&irritants-rtd) (&assertion-rcd . da4f0e@da4cec@&assertion-rcd) (&assertion-rtd . da4f0d@da4cea@&assertion-rtd) (&violation-rcd . da4f06@da4cd7@&violation-rcd) (&violation-rtd . da4f05@da4cd5@&violation-rtd) (&error-rcd . da4efe@da4cc2@&error-rcd) (&error-rtd . da4efd@da4cc0@&error-rtd) (&serious-rcd . da4ef6@da4cad@&serious-rcd) (&serious-rtd . da4ef5@da4cab@&serious-rtd) (&warning-rcd . da4eee@da4c98@&warning-rcd) (&warning-rtd . da4eed@da4c96@&warning-rtd) (&message-rcd . da4ee6@da4c83@&message-rcd) (&message-rtd . da4ee5@da4c81@&message-rtd) (&condition-rcd . da4edc@da4c24@&condition-rcd) (&condition-rtd . da4edb@da4c22@&condition-rtd) (syntax-error . da4bfe@da31a2@syntax-error) (syntax-dispatch . da4b9c@da30c6@syntax-dispatch) (load . da513b@da4fe6@load) (interaction-environment . da4c07@da31b4@interaction-environment) (library-path . da2cc3@da2aff@library-path) (mosh-cache-dir . da2a0a@da28e9@mosh-cache-dir) (make-parameter . da2a09@da28e7@make-parameter) (make-variable-transformer . da4b59@da2ef1@make-variable-transformer) (identifier? . da4c01@da31a8@identifier?) (generate-temporaries . da4bf7@da3194@generate-temporaries) (free-identifier=? . da4bf8@da3196@free-identifier=?) (syntax->datum . da4c03@da31ac@syntax->datum) (datum->syntax . da4c02@da31aa@datum->syntax) (bound-identifier=? . da4bf9@da3198@bound-identifier=?) (make-i/o-write-error . da4f63@da4dd0@make-i/o-write-error) (make-i/o-read-error . da4f5b@da4dbb@make-i/o-read-error) (make-i/o-port-error . da4f9f@da4e71@make-i/o-port-error) (make-i/o-invalid-position-error . da4f6b@da4de7@make-i/o-invalid-position-error) (make-i/o-filename-error . da4f75@da4e02@make-i/o-filename-error) (make-i/o-file-protection-error . da4f7f@da4e1b@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . da4f87@da4e30@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . da4f97@da4e5a@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . da4f8f@da4e45@make-i/o-file-already-exists-error) (make-i/o-error . da4f53@da4da6@make-i/o-error) (make-i/o-encoding-error . da4fb1@da4ea1@make-i/o-encoding-error) (make-i/o-decoding-error . da4fa9@da4e8a@make-i/o-decoding-error) (i/o-write-error? . da4f64@da4dd2@i/o-write-error?) (i/o-read-error? . da4f5c@da4dbd@i/o-read-error?) (i/o-port-error? . da4fa1@da4e75@i/o-port-error?) (i/o-invalid-position-error? . da4f6d@da4deb@i/o-invalid-position-error?) (i/o-filename-error? . da4f77@da4e06@i/o-filename-error?) (i/o-file-protection-error? . da4f80@da4e1d@i/o-file-protection-error?) (i/o-file-is-read-only-error? . da4f88@da4e32@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . da4f98@da4e5c@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . da4f90@da4e47@i/o-file-already-exists-error?) (i/o-error? . da4f54@da4da8@i/o-error?) (i/o-error-position . da4f6e@da4ded@i/o-error-position) (i/o-error-port . da4fa2@da4e77@i/o-error-port) (i/o-error-filename . da4f78@da4e08@i/o-error-filename) (i/o-encoding-error? . da4fb3@da4ea5@i/o-encoding-error?) (i/o-encoding-error-char . da4fb4@da4ea7@i/o-encoding-error-char) (i/o-decoding-error? . da4faa@da4e8c@i/o-decoding-error?) (scheme-report-environment . da4bee@da3182@scheme-report-environment) (null-environment . da4bed@da3180@null-environment) (command-line . da5138@da4fe0@command-line) (eval . da4bf0@da3186@eval) (environment . da4bec@da317e@environment) (who-condition? . da4f1f@da4d1c@who-condition?) (warning? . da4eec@da4c94@warning?) (violation? . da4f04@da4cd3@violation?) (undefined-violation? . da4f4c@da4d93@undefined-violation?) (syntax-violation? . da4f42@da4d7a@syntax-violation?) (syntax-violation-subform . da4f44@da4d7e@syntax-violation-subform) (syntax-violation-form . da4f43@da4d7c@syntax-violation-form) (syntax-violation . da4c00@da31a6@syntax-violation) (serious-condition? . da4ef4@da4ca9@serious-condition?) (non-continuable-violation? . da4f28@da4d33@non-continuable-violation?) (message-condition? . da4ee3@da4c7d@message-condition?) (make-who-condition . da4f1d@da4d18@make-who-condition) (make-warning . da4eeb@da4c92@make-warning) (make-violation . da4f03@da4cd1@make-violation) (make-undefined-violation . da4f4b@da4d91@make-undefined-violation) (make-syntax-violation . da4f3f@da4d74@make-syntax-violation) (make-serious-condition . da4ef3@da4ca7@make-serious-condition) (make-non-continuable-violation . da4f27@da4d31@make-non-continuable-violation) (make-message-condition . da4ee1@da4c79@make-message-condition) (make-lexical-violation . da4f37@da4d5b@make-lexical-violation) (make-irritants-condition . da4f13@da4cfd@make-irritants-condition) (make-implementation-restriction-violation . da4f2f@da4d46@make-implementation-restriction-violation) (make-error . da4efb@da4cbc@make-error) (make-assertion-violation . da4f0b@da4ce6@make-assertion-violation) (lexical-violation? . da4f38@da4d5d@lexical-violation?) (irritants-condition? . da4f15@da4d01@irritants-condition?) (implementation-restriction-violation? . da4f30@da4d48@implementation-restriction-violation?) (error? . da4efc@da4cbe@error?) (condition-who . da4f20@da4d1e@condition-who) (condition-message . da4ee4@da4c7f@condition-message) (condition-irritants . da4f16@da4d03@condition-irritants) (assertion-violation? . da4f0c@da4ce8@assertion-violation?) (no-nans-violation? . da4fc4@da4ed1@no-nans-violation?) (no-infinities-violation? . da4fbc@da4ebc@no-infinities-violation?) (make-no-nans-violation . da4fc3@da4ecf@make-no-nans-violation) (make-no-infinities-violation . da4fbb@da4eba@make-no-infinities-violation) (assertion-error . da4bfd@da31a0@assertion-error))))) (if da5493@t (cdr da5493@t) '#f)))) (da2cd3@da2b1f@install-library 'da546e '(mosh interaction) '() '() '() '() '((regexp? . da5466) (alist->eq-hash-table . da5462) (format . da545f) (string-split . da5454) (call-process . da544e) (set-current-directory! . da544a) (expand-path . da5449) (current-directory . da5448) (%spawn . da5447) (%waitpid . da5446) (simple-struct-name . da5445) (simple-struct-set! . da5444) (simple-struct-ref . da5443) (make-simple-struct . da5442) (simple-struct? . da5441) (pointer-ref-c-int64 . da5440) (pointer-ref-c-int32 . da543f) (pointer-ref-c-int16 . da543e) (pointer-ref-c-int8 . da543d) (pointer-ref-c-uint64 . da543c) (pointer-ref-c-uint32 . da543b) (pointer-ref-c-uint16 . da543a) (pointer-ref-c-uint8 . da5439) (pointer-set-c-uint64! . da5438) (pointer-set-c-uint32! . da5437) (pointer-set-c-uint16! . da5436) (pointer-set-c-uint8! . da5435) (pointer-set-c-int64! . da5434) (pointer-set-c-int32! . da5433) (pointer-set-c-int16! . da5432) (pointer-set-c-int8! . da5431) (pointer-set-c-pointer! . da5430) (pointer-set-c-double! . da542f) (pointer-set-c-float! . da542e) (pointer-set-c-long-long! . da542d) (pointer-set-c-long! . da542c) (pointer-set-c-int! . da542b) (pointer-set-c-short! . da542a) (pointer-set-c-char! . da5429) (pointer-ref-c-pointer . da5428) (pointer-ref-c-double . da5427) (pointer-ref-c-float . da5426) (pointer-ref-c-unsigned-long-long . da5425) (pointer-ref-c-signed-long-long . da5424) (pointer-ref-c-unsigned-long . da5423) (pointer-ref-c-signed-long . da5422) (pointer-ref-c-unsigned-int . da5421) (pointer-ref-c-signed-int . da5420) (pointer-ref-c-unsigned-short . da541f) (pointer-ref-c-signed-short . da541e) (pointer-ref-c-unsigned-char . da541d) (pointer-ref-c-signed-char . da541c) (pointer->integer . da541b) (integer->pointer . da541a) (pointer? . da5419) (shared-errno . da5418) (%ffi-supported? . da5413) (%ffi-pointer->string . da5412) (%ffi-call . da5411) (%ffi-lookup . da5410) (%ffi-open . da540f) (null-terminated-utf8->string . da540e) (null-terminated-bytevector->string . da540d) (%fork . da540c) (%pipe . da540b) (p . da540a) (whereis . da53ee) (register . da53ed) (vm-join! . da53ec) (vm-set-value! . da53eb) (vm? . da53ea) (main-vm? . da53e9) (vm-eval . da53e8) (vm-self . da53e7) (vm-start! . da53e6) (make-vm . da53e5) (mutex-try-lock! . da53e4) (mutex-unlock! . da53e3) (mutex-lock! . da53e2) (mutex? . da53e1) (make-mutex . da53e0) (condition-variable-notify-all! . da53df) (condition-variable-notify! . da53de) (condition-variable-wait! . da53dd) (make-condition-variable . da53dc) (string-upcase . da53c4) (string-titlecase . da53c3) (string-normalize-nfkd . da53c2) (string-normalize-nfkc . da53c1) (string-normalize-nfd . da53c0) (string-normalize-nfc . da53bf) (string-foldcase . da53be) (string-downcase . da53bd) (string-ci>? . da53bc) (string-ci>=? . da53bb) (string-ci=? . da53ba) (string-ci<? . da53b9) (string-ci<=? . da53b8) (char-whitespace? . da53b7) (char-upper-case? . da53b6) (char-title-case? . da53b5) (char-numeric? . da53b4) (char-lower-case? . da53b3) (char-general-category . da53b2) (char-upcase . da53b1) (char-titlecase . da53b0) (char-foldcase . da53af) (char-downcase . da53ae) (char-ci>? . da53ad) (char-ci>=? . da53ac) (char-ci=? . da53ab) (char-ci<? . da53aa) (char-ci<=? . da53a9) (char-alphabetic? . da53a8) (make-variable-transformer . da2ef0) (identifier? . da31a7) (generate-temporaries . da3193) (free-identifier=? . da3195) (syntax->datum . da31ab) (datum->syntax . da31a9) (bound-identifier=? . da3197) (record-type-descriptor? . da53a7) (record-predicate . da53a6) (record-mutator . da53a5) (record-constructor . da53a4) (record-accessor . da53a3) (make-record-type-descriptor . da53a2) (make-record-constructor-descriptor . da53a1) (record? . da53a0) (record-type-uid . da539f) (record-type-sealed? . da539e) (record-type-parent . da539d) (record-type-opaque? . da539c) (record-type-name . da539b) (record-type-generative? . da539a) (record-type-field-names . da5399) (record-rtd . da5398) (record-field-mutable? . da5397) (delete-file . da5396) (file-exists? . da5395) (vector-sort! . da5394) (vector-sort . da5393) (list-sort . da5392) (symbol-hash . da5391) (string-ci-hash . da5390) (string-hash . da538f) (equal-hash . da538e) (hashtable-equivalence-function . da538d) (make-hashtable . da538c) (hashtable-hash-function . da538b) (make-eqv-hashtable . da538a) (make-eq-hashtable . da5389) (hashtable? . da5388) (hashtable-update! . da5387) (hashtable-size . da5386) (hashtable-set! . da5385) (hashtable-ref . da5384) (hashtable-mutable? . da5383) (hashtable-keys . da5382) (hashtable-entries . da5381) (hashtable-delete! . da5380) (hashtable-copy . da537f) (hashtable-contains? . da537e) (hashtable-clear! . da537d) (call-with-output-file . da537c) (call-with-input-file . da537b) (write-char . da537a) (write . da5379) (with-output-to-file . da5378) (with-input-from-file . da5377) (read-char . da5376) (read . da5375) (peek-char . da5374) (open-output-file . da5373) (open-input-file . da5372) (newline . da5371) (display . da5370) (close-output-port . da536f) (close-input-port . da536e) (eof-object? . da536d) (eof-object . da536c) (current-error-port . da536b) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (utf-8-codec . da5366) (utf-16-codec . da5365) (transcoder-error-handling-mode . da5364) (transcoder-eol-style . da5363) (transcoder-codec . da5362) (transcoded-port . da5361) (textual-port? . da5360) (string->bytevector . da535f) (standard-output-port . da535e) (standard-input-port . da535d) (standard-error-port . da535c) (set-port-position! . da535b) (put-u8 . da535a) (put-string . da5359) (put-datum . da5358) (put-char . da5357) (put-bytevector . da5356) (port? . da5355) (port-transcoder . da5354) (port-position . da5353) (port-has-set-port-position!? . da5352) (port-has-port-position? . da5351) (port-eof? . da5350) (output-port-buffer-mode . da534f) (open-string-output-port . da534e) (open-string-input-port . da534d) (open-file-output-port . da534c) (open-file-input/output-port . da534b) (open-file-input-port . da534a) (open-bytevector-output-port . da5349) (open-bytevector-input-port . da5348) (native-transcoder . da5347) (native-eol-style . da5346) (make-transcoder . da5345) (latin-1-codec . da5344) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (make-i/o-encoding-error . da4ea0) (make-i/o-decoding-error . da4e89) (make-custom-textual-output-port . da5343) (make-custom-textual-input/output-port . da5342) (make-custom-textual-input-port . da5341) (make-custom-binary-output-port . da5340) (make-custom-binary-input/output-port . da533f) (make-custom-binary-input-port . da533e) (make-bytevector . da533d) (lookahead-u8 . da533c) (lookahead-char . da533b) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (i/o-encoding-error? . da4ea4) (i/o-encoding-error-char . da4ea6) (i/o-decoding-error? . da4e8b) (get-u8 . da533a) (get-string-n! . da5339) (get-string-n . da5338) (get-string-all . da5337) (get-line . da5336) (get-datum . da5335) (get-char . da5334) (get-bytevector-some . da5333) (get-bytevector-n! . da5332) (get-bytevector-n . da5331) (get-bytevector-all . da5330) (flush-output-port . da532f) (close-port . da532e) (exit . da5326) (command-line . da4fdf) (string-fill! . da5325) (string-set! . da5324) (set-cdr! . da5323) (set-car! . da5322) (remove . da5321) (remv . da5320) (remp . da531f) (remq . da531e) (partition . da531d) (memv . da531c) (memq . da531b) (memp . da531a) (member . da5319) (exists . da5318) (for-all . da5317) (fold-right . da5316) (fold-left . da5315) (find . da5314) (filter . da5313) (cons* . da5312) (assv . da5311) (assq . da5310) (assp . da530f) (assoc . da530e) (call-with-string-output-port . da530d) (call-with-port . da530c) (call-with-bytevector-output-port . da530b) (bytevector->string . da530a) (buffer-mode? . da5309) (binary-port? . da5308) (with-exception-handler . da5307) (raise-continuable . da5306) (raise . da5305) (eval . da3185) (environment . da317d) (make-enumeration . da5304) (enum-set=? . da5303) (enum-set-universe . da5302) (enum-set-union . da5301) (enum-set-subset? . da5300) (enum-set-projection . da52ff) (enum-set-member? . da52fe) (enum-set-intersection . da52fd) (enum-set-indexer . da52fc) (enum-set-difference . da52fb) (enum-set-constructor . da52fa) (enum-set-complement . da52f9) (enum-set->list . da52f8) (who-condition? . da4d1b) (warning? . da4c93) (violation? . da4cd2) (undefined-violation? . da4d92) (syntax-violation? . da4d79) (syntax-violation-subform . da4d7d) (syntax-violation-form . da4d7b) (syntax-violation . da31a5) (simple-conditions . da52f7) (serious-condition? . da4ca8) (non-continuable-violation? . da4d32) (message-condition? . da4c7c) (make-who-condition . da4d17) (make-warning . da4c91) (make-violation . da4cd0) (make-undefined-violation . da4d90) (make-syntax-violation . da4d73) (make-serious-condition . da4ca6) (make-non-continuable-violation . da4d30) (make-message-condition . da4c78) (make-lexical-violation . da4d5a) (make-irritants-condition . da4cfc) (make-implementation-restriction-violation . da4d45) (make-error . da4cbb) (make-assertion-violation . da4ce5) (lexical-violation? . da4d5c) (irritants-condition? . da4d00) (implementation-restriction-violation? . da4d47) (error? . da4cbd) (condition-who . da4d1d) (condition-predicate . da52f6) (condition-message . da4c7e) (condition-irritants . da4d02) (condition-accessor . da52f5) (condition . da52f4) (assertion-violation? . da4ce7) (condition? . da52f3) (utf32->string . da52f2) (utf16->string . da52f1) (utf8->string . da52f0) (uint-list->bytevector . da52ef) (u8-list->bytevector . da52ee) (string->utf8 . da52ed) (string->utf32 . da52ec) (string->utf16 . da52eb) (sint-list->bytevector . da52ea) (native-endianness . da52e9) (bytevector? . da52e8) (bytevector=? . da52e7) (bytevector-uint-set! . da52e6) (bytevector-uint-ref . da52e5) (bytevector-u8-set! . da52e4) (bytevector-u8-ref . da52e3) (bytevector-u64-set! . da52e2) (bytevector-u64-ref . da52e1) (bytevector-u64-native-set! . da52e0) (bytevector-u64-native-ref . da52df) (bytevector-u32-set! . da52de) (bytevector-u32-ref . da52dd) (bytevector-u32-native-set! . da52dc) (bytevector-u32-native-ref . da52db) (bytevector-u16-set! . da52da) (bytevector-u16-ref . da52d9) (bytevector-u16-native-set! . da52d8) (bytevector-u16-native-ref . da52d7) (bytevector-sint-set! . da52d6) (bytevector-sint-ref . da52d5) (bytevector-s8-set! . da52d4) (bytevector-s8-ref . da52d3) (bytevector-s64-set! . da52d2) (bytevector-s64-ref . da52d1) (bytevector-s64-native-set! . da52d0) (bytevector-s64-native-ref . da52cf) (bytevector-s32-set! . da52ce) (bytevector-s32-ref . da52cd) (bytevector-s32-native-set! . da52cc) (bytevector-s32-native-ref . da52cb) (bytevector-s16-set! . da52ca) (bytevector-s16-ref . da52c9) (bytevector-s16-native-set! . da52c8) (bytevector-s16-native-ref . da52c7) (bytevector-length . da52c6) (bytevector-ieee-single-ref . da52c5) (bytevector-ieee-single-set! . da52c4) (bytevector-ieee-single-native-set! . da52c3) (bytevector-ieee-single-native-ref . da52c2) (bytevector-ieee-double-set! . da52c1) (bytevector-ieee-double-ref . da52c0) (bytevector-ieee-double-native-set! . da52bf) (bytevector-ieee-double-native-ref . da52be) (bytevector-fill! . da52bd) (bytevector-copy! . da52bc) (bytevector-copy . da52bb) (bytevector->uint-list . da52ba) (bytevector->u8-list . da52b9) (bytevector->sint-list . da52b8) (no-nans-violation? . da4ed0) (no-infinities-violation? . da4ebb) (make-no-nans-violation . da4ece) (make-no-infinities-violation . da4eb9) (real->flonum . da52b7) (flzero? . da52b6) (fltruncate . da52b5) (fltan . da52b4) (flsqrt . da52b3) (flsin . da52b2) (flround . da52b1) (flpositive? . da52b0) (flonum? . da52af) (flodd? . da52ae) (flnumerator . da52ad) (flnegative? . da52ac) (flnan? . da52ab) (flmod0 . da52aa) (flmod . da52a9) (flmin . da52a8) (flmax . da52a7) (fllog . da52a6) (flinteger? . da52a5) (flinfinite? . da52a4) (flfloor . da52a3) (flfinite? . da52a2) (flexpt . da52a1) (flexp . da52a0) (fleven? . da529f) (fldiv0-and-mod0 . da529e) (fldiv0 . da529d) (fldiv-and-mod . da529c) (fldiv . da529b) (fldenominator . da529a) (flcos . da5299) (flceiling . da5298) (flatan . da5297) (flasin . da5296) (flacos . da5295) (flabs . da5294) (fl>? . da5293) (fl>=? . da5292) (fl=? . da5291) (fl<? . da5290) (fl<=? . da528f) (fl/ . da528e) (fl- . da528d) (fl+ . da528c) (fl* . da528b) (fixnum->flonum . da528a) (fxzero? . da5289) (fxxor . da5288) (fxrotate-bit-field . da5287) (fxreverse-bit-field . da5286) (fxpositive? . da5285) (fxodd? . da5284) (fxnot . da5283) (fxnegative? . da5282) (fxmod0 . da5281) (fxmod . da5280) (fxmin . da527f) (fxmax . da527e) (fxlength . da527d) (fxior . da527c) (fxif . da527b) (fxfirst-bit-set . da527a) (fxeven? . da5279) (fxdiv0-and-mod0 . da5278) (fxdiv0 . da5277) (fxdiv-and-mod . da5276) (fxdiv . da5275) (fxcopy-bit-field . da5274) (fxcopy-bit . da5273) (fxbit-set? . da5272) (fxbit-field . da5271) (fxbit-count . da5270) (fxarithmetic-shift-right . da526f) (fxarithmetic-shift-left . da526e) (fxarithmetic-shift . da526d) (fxand . da526c) (fx>? . da526b) (fx>=? . da526a) (fx=? . da5269) (fx<? . da5268) (fx<=? . da5267) (fx-/carry . da5266) (fx- . da5265) (fx+/carry . da5264) (fx+ . da5263) (fx*/carry . da5262) (fx* . da5261) (greatest-fixnum . da5260) (least-fixnum . da525f) (fixnum-width . da525e) (fixnum? . da525d) (bitwise-rotate-bit-field . da525c) (bitwise-reverse-bit-field . da525b) (bitwise-length . da525a) (bitwise-if . da5259) (bitwise-first-bit-set . da5258) (bitwise-copy-bit-field . da5257) (bitwise-copy-bit . da5256) (bitwise-bit-set? . da5255) (bitwise-bit-field . da5254) (bitwise-bit-count . da5253) (bitwise-xor . da5252) (bitwise-ior . da5251) (bitwise-and . da5250) (bitwise-not . da524f) (bitwise-arithmetic-shift-right . da524e) (bitwise-arithmetic-shift-left . da524d) (bitwise-arithmetic-shift . da524c) (zero? . da524b) (vector? . da524a) (vector-set! . da5249) (vector-ref . da5248) (vector-map . da5247) (vector-length . da5246) (vector-for-each . da5245) (vector-fill! . da5244) (vector->list . da5243) (vector . da5242) (values . da5241) (truncate . da5240) (tan . da523f) (symbol? . da523e) (symbol=? . da523d) (symbol->string . da523c) (substring . da523b) (string? . da523a) (string>? . da5239) (string>=? . da5238) (string=? . da5237) (string<? . da5236) (string<=? . da5235) (string-ref . da5234) (string-length . da5233) (string-for-each . da5232) (string-copy . da5231) (string-append . da5230) (string->symbol . da522f) (string->number . da522e) (string->list . da522d) (string . da522c) (sqrt . da522b) (sin . da522a) (round . da5229) (reverse . da5228) (real? . da5227) (real-valued? . da5226) (real-part . da5225) (rationalize . da5224) (rational? . da5223) (rational-valued? . da5222) (procedure? . da5221) (positive? . da5220) (pair? . da521f) (odd? . da521e) (numerator . da521d) (number? . da521c) (number->string . da521b) (null? . da521a) (not . da5219) (negative? . da5218) (nan? . da5217) (min . da5216) (max . da5215) (map . da5214) (make-vector . da5213) (make-string . da5212) (make-rectangular . da5211) (make-polar . da5210) (magnitude . da520f) (log . da520e) (list? . da520d) (list-tail . da520c) (list-ref . da520b) (list->vector . da520a) (list->string . da5209) (list . da5208) (length . da5207) (lcm . da5206) (integer? . da5205) (integer-valued? . da5204) (integer->char . da5203) (infinite? . da5202) (inexact? . da5201) (inexact . da5200) (imag-part . da51ff) (gcd . da51fe) (for-each . da51fd) (floor . da51fc) (finite? . da51fb) (expt . da51fa) (exp . da51f9) (exact? . da51f8) (exact-integer-sqrt . da51f7) (exact . da51f6) (even? . da51f5) (error . da51f4) (eqv? . da51f3) (equal? . da51f2) (eq? . da51f1) (dynamic-wind . da51f0) (div0-and-mod0 . da51ef) (mod0 . da51ee) (div0 . da51ed) (div-and-mod . da51ec) (mod . da51eb) (div . da51ea) (denominator . da51e9) (cos . da51e8) (cons . da51e7) (complex? . da51e6) (char? . da51e5) (char>? . da51e4) (char>=? . da51e3) (char=? . da51e2) (char<? . da51e1) (char<=? . da51e0) (char->integer . da51df) (ceiling . da51de) (call-with-values . da51dd) (call/cc . da51dc) (call-with-current-continuation . da51db) (cddddr . da51da) (cdddar . da51d9) (cddadr . da51d8) (cddaar . da51d7) (cdaddr . da51d6) (cdadar . da51d5) (cdaadr . da51d4) (cdaaar . da51d3) (cadddr . da51d2) (caddar . da51d1) (cadadr . da51d0) (cadaar . da51cf) (caaddr . da51ce) (caadar . da51cd) (caaadr . da51cc) (caaaar . da51cb) (cdddr . da51ca) (cddar . da51c9) (cdadr . da51c8) (cdaar . da51c7) (caddr . da51c6) (cadar . da51c5) (caadr . da51c4) (caaar . da51c3) (cddr . da51c2) (cdar . da51c1) (cadr . da51c0) (caar . da51bf) (cdr . da51be) (car . da51bd) (boolean? . da51bc) (boolean=? . da51bb) (atan . da51ba) (assertion-violation . da51b9) (asin . da51b8) (apply . da51b7) (append . da51b6) (angle . da51b5) (acos . da51b4) (abs . da51b3) (/ . da51b2) (* . da51b1) (- . da51b0) (+ . da51af) (>= . da51ae) (> . da51ad) (= . da51ac) (<= . da51ab) (< . da51aa) (library . da51a9) (&no-nans . da51a8) (&no-infinities . da51a7) (&i/o-encoding . da51a6) (&i/o-decoding . da51a5) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b) (&undefined . da519a) (&syntax . da5199) (&lexical . da5198) (&implementation-restriction . da5197) (&non-continuable . da5196) (&who . da5195) (&irritants . da5194) (&assertion . da5193) (&violation . da5192) (&error . da5191) (&serious . da5190) (&warning . da518f) (&message . da518e) (&condition . da518d) (define-condition-type . da518c) (define-enumeration . da518b) (define-record-type . da518a) (parent-rtd . da5189) (nongenerative . da5188) (opaque . da5187) (sealed . da5186) (protocol . da5185) (parent . da5184) (immutable . da5183) (mutable . da5182) (fields . da5181) (error-handling-mode . da5180) (file-options . da517f) (buffer-mode . da517e) (eol-style . da517d) (guard . da517c) (unsyntax-splicing . da5179) (unsyntax . da5178) (unquote-splicing . da5177) (unquote . da5176) (_ . da5175) (else . da5174) (=> . da5173) (... . da5172) (assert . da5171) (endianness . da5170) (time . da516e) (do . da516d) (cond . da516c) (let* . da516b) (let*-values . da516a) (let-values . da5169) (identifier-syntax . da5168) (with-syntax . da5167) (quasisyntax . da5166) (quasiquote . da5165) (syntax-rules . da5164) (include . da5163) (record-constructor-descriptor . da5161) (record-type-descriptor . da5160) (case . da515f) (unless . da515d) (when . da515c) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec* . da5157) (letrec . da5156) (case-lambda . da5154) (lambda . da5153) (syntax . da5152) (syntax-case . da5151) (quote . da5150) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (import . da514b) (begin . da514a) (define-syntax . da5148) (define . da5147)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da546f '(psyntax null-environment-5) '() '() '() '() '((make-promise . da5327) (unquote-splicing . da5177) (unquote . da5176) (_ . da5175) (else . da5174) (=> . da5173) (... . da5172) (delay . da516f) (do . da516d) (cond . da516c) (let* . da516b) (quasiquote . da5165) (syntax-rules . da5164) (case . da515f) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec . da5156) (lambda . da5153) (quote . da5150) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (begin . da514a) (define-syntax . da5148) (define . da5147)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5470 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . da53bc) (string-ci>=? . da53bb) (string-ci=? . da53ba) (string-ci<? . da53b9) (string-ci<=? . da53b8) (char-whitespace? . da53b7) (char-upper-case? . da53b6) (char-numeric? . da53b4) (char-lower-case? . da53b3) (char-upcase . da53b1) (char-downcase . da53ae) (char-ci>? . da53ad) (char-ci>=? . da53ac) (char-ci=? . da53ab) (char-ci<? . da53aa) (char-ci<=? . da53a9) (char-alphabetic? . da53a8) (call-with-output-file . da537c) (call-with-input-file . da537b) (write-char . da537a) (write . da5379) (with-output-to-file . da5378) (with-input-from-file . da5377) (read-char . da5376) (read . da5375) (peek-char . da5374) (open-output-file . da5373) (open-input-file . da5372) (newline . da5371) (display . da5370) (close-output-port . da536f) (close-input-port . da536e) (eof-object . da536c) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (scheme-report-environment . da3181) (quotient . da532d) (null-environment . da317f) (remainder . da532c) (modulo . da532b) (inexact->exact . da532a) (force . da5329) (exact->inexact . da5328) (make-promise . da5327) (string-fill! . da5325) (string-set! . da5324) (set-cdr! . da5323) (set-car! . da5322) (memv . da531c) (memq . da531b) (member . da5319) (assv . da5311) (assq . da5310) (assoc . da530e) (eval . da3185) (zero? . da524b) (vector? . da524a) (vector-set! . da5249) (vector-ref . da5248) (vector-length . da5246) (vector-fill! . da5244) (vector->list . da5243) (vector . da5242) (values . da5241) (truncate . da5240) (tan . da523f) (symbol? . da523e) (symbol->string . da523c) (substring . da523b) (string? . da523a) (string>? . da5239) (string>=? . da5238) (string=? . da5237) (string<? . da5236) (string<=? . da5235) (string-ref . da5234) (string-length . da5233) (string-copy . da5231) (string-append . da5230) (string->symbol . da522f) (string->number . da522e) (string->list . da522d) (string . da522c) (sqrt . da522b) (sin . da522a) (round . da5229) (reverse . da5228) (real? . da5227) (real-part . da5225) (rationalize . da5224) (rational? . da5223) (procedure? . da5221) (positive? . da5220) (pair? . da521f) (odd? . da521e) (numerator . da521d) (number? . da521c) (number->string . da521b) (not . da5219) (negative? . da5218) (min . da5216) (max . da5215) (map . da5214) (make-vector . da5213) (make-string . da5212) (make-rectangular . da5211) (make-polar . da5210) (magnitude . da520f) (log . da520e) (list? . da520d) (list-tail . da520c) (list-ref . da520b) (list->vector . da520a) (list->string . da5209) (list . da5208) (length . da5207) (lcm . da5206) (integer? . da5205) (integer->char . da5203) (inexact? . da5201) (imag-part . da51ff) (gcd . da51fe) (for-each . da51fd) (floor . da51fc) (expt . da51fa) (exp . da51f9) (exact? . da51f8) (even? . da51f5) (eqv? . da51f3) (equal? . da51f2) (eq? . da51f1) (dynamic-wind . da51f0) (denominator . da51e9) (cos . da51e8) (cons . da51e7) (complex? . da51e6) (char? . da51e5) (char>? . da51e4) (char>=? . da51e3) (char=? . da51e2) (char<? . da51e1) (char<=? . da51e0) (char->integer . da51df) (ceiling . da51de) (call-with-values . da51dd) (call-with-current-continuation . da51db) (cddddr . da51da) (cdddar . da51d9) (cddadr . da51d8) (cddaar . da51d7) (cdaddr . da51d6) (cdadar . da51d5) (cdaadr . da51d4) (cdaaar . da51d3) (cadddr . da51d2) (caddar . da51d1) (cadadr . da51d0) (cadaar . da51cf) (caaddr . da51ce) (caadar . da51cd) (caaadr . da51cc) (caaaar . da51cb) (cdddr . da51ca) (cddar . da51c9) (cdadr . da51c8) (cdaar . da51c7) (caddr . da51c6) (cadar . da51c5) (caadr . da51c4) (caaar . da51c3) (cddr . da51c2) (cdar . da51c1) (cadr . da51c0) (caar . da51bf) (cdr . da51be) (car . da51bd) (boolean? . da51bc) (atan . da51ba) (asin . da51b8) (apply . da51b7) (append . da51b6) (angle . da51b5) (acos . da51b4) (abs . da51b3) (/ . da51b2) (* . da51b1) (- . da51b0) (+ . da51af) (>= . da51ae) (> . da51ad) (= . da51ac) (<= . da51ab) (< . da51aa) (unquote-splicing . da5177) (unquote . da5176) (else . da5174) (=> . da5173) (... . da5172) (delay . da516f) (do . da516d) (cond . da516c) (let* . da516b) (quasiquote . da5165) (syntax-rules . da5164) (case . da515f) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec . da5156) (lambda . da5153) (quote . da5150) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (begin . da514a) (define-syntax . da5148) (define . da5147)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5471 '(psyntax modules) '() '() '() '() '((module . da5149)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5472 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5473 '(rnrs) '(6) '() '() '() '((regexp? . da5466) (string-upcase . da53c4) (string-titlecase . da53c3) (string-normalize-nfkd . da53c2) (string-normalize-nfkc . da53c1) (string-normalize-nfd . da53c0) (string-normalize-nfc . da53bf) (string-foldcase . da53be) (string-downcase . da53bd) (string-ci>? . da53bc) (string-ci>=? . da53bb) (string-ci=? . da53ba) (string-ci<? . da53b9) (string-ci<=? . da53b8) (char-whitespace? . da53b7) (char-upper-case? . da53b6) (char-title-case? . da53b5) (char-numeric? . da53b4) (char-lower-case? . da53b3) (char-general-category . da53b2) (char-upcase . da53b1) (char-titlecase . da53b0) (char-foldcase . da53af) (char-downcase . da53ae) (char-ci>? . da53ad) (char-ci>=? . da53ac) (char-ci=? . da53ab) (char-ci<? . da53aa) (char-ci<=? . da53a9) (char-alphabetic? . da53a8) (make-variable-transformer . da2ef0) (identifier? . da31a7) (generate-temporaries . da3193) (free-identifier=? . da3195) (syntax->datum . da31ab) (datum->syntax . da31a9) (bound-identifier=? . da3197) (record-type-descriptor? . da53a7) (record-predicate . da53a6) (record-mutator . da53a5) (record-constructor . da53a4) (record-accessor . da53a3) (make-record-type-descriptor . da53a2) (make-record-constructor-descriptor . da53a1) (record? . da53a0) (record-type-uid . da539f) (record-type-sealed? . da539e) (record-type-parent . da539d) (record-type-opaque? . da539c) (record-type-name . da539b) (record-type-generative? . da539a) (record-type-field-names . da5399) (record-rtd . da5398) (record-field-mutable? . da5397) (delete-file . da5396) (file-exists? . da5395) (vector-sort! . da5394) (vector-sort . da5393) (list-sort . da5392) (symbol-hash . da5391) (string-ci-hash . da5390) (string-hash . da538f) (equal-hash . da538e) (hashtable-equivalence-function . da538d) (make-hashtable . da538c) (hashtable-hash-function . da538b) (make-eqv-hashtable . da538a) (make-eq-hashtable . da5389) (hashtable? . da5388) (hashtable-update! . da5387) (hashtable-size . da5386) (hashtable-set! . da5385) (hashtable-ref . da5384) (hashtable-mutable? . da5383) (hashtable-keys . da5382) (hashtable-entries . da5381) (hashtable-delete! . da5380) (hashtable-copy . da537f) (hashtable-contains? . da537e) (hashtable-clear! . da537d) (call-with-output-file . da537c) (call-with-input-file . da537b) (write-char . da537a) (write . da5379) (with-output-to-file . da5378) (with-input-from-file . da5377) (read-char . da5376) (read . da5375) (peek-char . da5374) (open-output-file . da5373) (open-input-file . da5372) (newline . da5371) (display . da5370) (close-output-port . da536f) (close-input-port . da536e) (eof-object? . da536d) (eof-object . da536c) (current-error-port . da536b) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (utf-8-codec . da5366) (utf-16-codec . da5365) (transcoder-error-handling-mode . da5364) (transcoder-eol-style . da5363) (transcoder-codec . da5362) (transcoded-port . da5361) (textual-port? . da5360) (string->bytevector . da535f) (standard-output-port . da535e) (standard-input-port . da535d) (standard-error-port . da535c) (set-port-position! . da535b) (put-u8 . da535a) (put-string . da5359) (put-datum . da5358) (put-char . da5357) (put-bytevector . da5356) (port? . da5355) (port-transcoder . da5354) (port-position . da5353) (port-has-set-port-position!? . da5352) (port-has-port-position? . da5351) (port-eof? . da5350) (output-port-buffer-mode . da534f) (open-string-output-port . da534e) (open-string-input-port . da534d) (open-file-output-port . da534c) (open-file-input/output-port . da534b) (open-file-input-port . da534a) (open-bytevector-output-port . da5349) (open-bytevector-input-port . da5348) (native-transcoder . da5347) (native-eol-style . da5346) (make-transcoder . da5345) (latin-1-codec . da5344) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (make-i/o-encoding-error . da4ea0) (make-i/o-decoding-error . da4e89) (make-custom-textual-output-port . da5343) (make-custom-textual-input/output-port . da5342) (make-custom-textual-input-port . da5341) (make-custom-binary-output-port . da5340) (make-custom-binary-input/output-port . da533f) (make-custom-binary-input-port . da533e) (make-bytevector . da533d) (lookahead-u8 . da533c) (lookahead-char . da533b) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (i/o-encoding-error? . da4ea4) (i/o-encoding-error-char . da4ea6) (i/o-decoding-error? . da4e8b) (get-u8 . da533a) (get-string-n! . da5339) (get-string-n . da5338) (get-string-all . da5337) (get-line . da5336) (get-datum . da5335) (get-char . da5334) (get-bytevector-some . da5333) (get-bytevector-n! . da5332) (get-bytevector-n . da5331) (get-bytevector-all . da5330) (flush-output-port . da532f) (close-port . da532e) (exit . da5326) (command-line . da4fdf) (remove . da5321) (remv . da5320) (remp . da531f) (remq . da531e) (partition . da531d) (memv . da531c) (memq . da531b) (memp . da531a) (member . da5319) (exists . da5318) (for-all . da5317) (fold-right . da5316) (fold-left . da5315) (find . da5314) (filter . da5313) (cons* . da5312) (assv . da5311) (assq . da5310) (assp . da530f) (assoc . da530e) (call-with-string-output-port . da530d) (call-with-port . da530c) (call-with-bytevector-output-port . da530b) (bytevector->string . da530a) (buffer-mode? . da5309) (binary-port? . da5308) (with-exception-handler . da5307) (raise-continuable . da5306) (raise . da5305) (make-enumeration . da5304) (enum-set=? . da5303) (enum-set-universe . da5302) (enum-set-union . da5301) (enum-set-subset? . da5300) (enum-set-projection . da52ff) (enum-set-member? . da52fe) (enum-set-intersection . da52fd) (enum-set-indexer . da52fc) (enum-set-difference . da52fb) (enum-set-constructor . da52fa) (enum-set-complement . da52f9) (enum-set->list . da52f8) (who-condition? . da4d1b) (warning? . da4c93) (violation? . da4cd2) (undefined-violation? . da4d92) (syntax-violation? . da4d79) (syntax-violation-subform . da4d7d) (syntax-violation-form . da4d7b) (syntax-violation . da31a5) (simple-conditions . da52f7) (serious-condition? . da4ca8) (non-continuable-violation? . da4d32) (message-condition? . da4c7c) (make-who-condition . da4d17) (make-warning . da4c91) (make-violation . da4cd0) (make-undefined-violation . da4d90) (make-syntax-violation . da4d73) (make-serious-condition . da4ca6) (make-non-continuable-violation . da4d30) (make-message-condition . da4c78) (make-lexical-violation . da4d5a) (make-irritants-condition . da4cfc) (make-implementation-restriction-violation . da4d45) (make-error . da4cbb) (make-assertion-violation . da4ce5) (lexical-violation? . da4d5c) (irritants-condition? . da4d00) (implementation-restriction-violation? . da4d47) (error? . da4cbd) (condition-who . da4d1d) (condition-predicate . da52f6) (condition-message . da4c7e) (condition-irritants . da4d02) (condition-accessor . da52f5) (condition . da52f4) (assertion-violation? . da4ce7) (condition? . da52f3) (utf32->string . da52f2) (utf16->string . da52f1) (utf8->string . da52f0) (uint-list->bytevector . da52ef) (u8-list->bytevector . da52ee) (string->utf8 . da52ed) (string->utf32 . da52ec) (string->utf16 . da52eb) (sint-list->bytevector . da52ea) (native-endianness . da52e9) (bytevector? . da52e8) (bytevector=? . da52e7) (bytevector-uint-set! . da52e6) (bytevector-uint-ref . da52e5) (bytevector-u8-set! . da52e4) (bytevector-u8-ref . da52e3) (bytevector-u64-set! . da52e2) (bytevector-u64-ref . da52e1) (bytevector-u64-native-set! . da52e0) (bytevector-u64-native-ref . da52df) (bytevector-u32-set! . da52de) (bytevector-u32-ref . da52dd) (bytevector-u32-native-set! . da52dc) (bytevector-u32-native-ref . da52db) (bytevector-u16-set! . da52da) (bytevector-u16-ref . da52d9) (bytevector-u16-native-set! . da52d8) (bytevector-u16-native-ref . da52d7) (bytevector-sint-set! . da52d6) (bytevector-sint-ref . da52d5) (bytevector-s8-set! . da52d4) (bytevector-s8-ref . da52d3) (bytevector-s64-set! . da52d2) (bytevector-s64-ref . da52d1) (bytevector-s64-native-set! . da52d0) (bytevector-s64-native-ref . da52cf) (bytevector-s32-set! . da52ce) (bytevector-s32-ref . da52cd) (bytevector-s32-native-set! . da52cc) (bytevector-s32-native-ref . da52cb) (bytevector-s16-set! . da52ca) (bytevector-s16-ref . da52c9) (bytevector-s16-native-set! . da52c8) (bytevector-s16-native-ref . da52c7) (bytevector-length . da52c6) (bytevector-ieee-single-ref . da52c5) (bytevector-ieee-single-set! . da52c4) (bytevector-ieee-single-native-set! . da52c3) (bytevector-ieee-single-native-ref . da52c2) (bytevector-ieee-double-set! . da52c1) (bytevector-ieee-double-ref . da52c0) (bytevector-ieee-double-native-set! . da52bf) (bytevector-ieee-double-native-ref . da52be) (bytevector-fill! . da52bd) (bytevector-copy! . da52bc) (bytevector-copy . da52bb) (bytevector->uint-list . da52ba) (bytevector->u8-list . da52b9) (bytevector->sint-list . da52b8) (no-nans-violation? . da4ed0) (no-infinities-violation? . da4ebb) (make-no-nans-violation . da4ece) (make-no-infinities-violation . da4eb9) (real->flonum . da52b7) (flzero? . da52b6) (fltruncate . da52b5) (fltan . da52b4) (flsqrt . da52b3) (flsin . da52b2) (flround . da52b1) (flpositive? . da52b0) (flonum? . da52af) (flodd? . da52ae) (flnumerator . da52ad) (flnegative? . da52ac) (flnan? . da52ab) (flmod0 . da52aa) (flmod . da52a9) (flmin . da52a8) (flmax . da52a7) (fllog . da52a6) (flinteger? . da52a5) (flinfinite? . da52a4) (flfloor . da52a3) (flfinite? . da52a2) (flexpt . da52a1) (flexp . da52a0) (fleven? . da529f) (fldiv0-and-mod0 . da529e) (fldiv0 . da529d) (fldiv-and-mod . da529c) (fldiv . da529b) (fldenominator . da529a) (flcos . da5299) (flceiling . da5298) (flatan . da5297) (flasin . da5296) (flacos . da5295) (flabs . da5294) (fl>? . da5293) (fl>=? . da5292) (fl=? . da5291) (fl<? . da5290) (fl<=? . da528f) (fl/ . da528e) (fl- . da528d) (fl+ . da528c) (fl* . da528b) (fixnum->flonum . da528a) (fxzero? . da5289) (fxxor . da5288) (fxrotate-bit-field . da5287) (fxreverse-bit-field . da5286) (fxpositive? . da5285) (fxodd? . da5284) (fxnot . da5283) (fxnegative? . da5282) (fxmod0 . da5281) (fxmod . da5280) (fxmin . da527f) (fxmax . da527e) (fxlength . da527d) (fxior . da527c) (fxif . da527b) (fxfirst-bit-set . da527a) (fxeven? . da5279) (fxdiv0-and-mod0 . da5278) (fxdiv0 . da5277) (fxdiv-and-mod . da5276) (fxdiv . da5275) (fxcopy-bit-field . da5274) (fxcopy-bit . da5273) (fxbit-set? . da5272) (fxbit-field . da5271) (fxbit-count . da5270) (fxarithmetic-shift-right . da526f) (fxarithmetic-shift-left . da526e) (fxarithmetic-shift . da526d) (fxand . da526c) (fx>? . da526b) (fx>=? . da526a) (fx=? . da5269) (fx<? . da5268) (fx<=? . da5267) (fx-/carry . da5266) (fx- . da5265) (fx+/carry . da5264) (fx+ . da5263) (fx*/carry . da5262) (fx* . da5261) (greatest-fixnum . da5260) (least-fixnum . da525f) (fixnum-width . da525e) (fixnum? . da525d) (bitwise-rotate-bit-field . da525c) (bitwise-reverse-bit-field . da525b) (bitwise-length . da525a) (bitwise-if . da5259) (bitwise-first-bit-set . da5258) (bitwise-copy-bit-field . da5257) (bitwise-copy-bit . da5256) (bitwise-bit-set? . da5255) (bitwise-bit-field . da5254) (bitwise-bit-count . da5253) (bitwise-xor . da5252) (bitwise-ior . da5251) (bitwise-and . da5250) (bitwise-not . da524f) (bitwise-arithmetic-shift-right . da524e) (bitwise-arithmetic-shift-left . da524d) (bitwise-arithmetic-shift . da524c) (zero? . da524b) (vector? . da524a) (vector-set! . da5249) (vector-ref . da5248) (vector-map . da5247) (vector-length . da5246) (vector-for-each . da5245) (vector-fill! . da5244) (vector->list . da5243) (vector . da5242) (values . da5241) (truncate . da5240) (tan . da523f) (symbol? . da523e) (symbol=? . da523d) (symbol->string . da523c) (substring . da523b) (string? . da523a) (string>? . da5239) (string>=? . da5238) (string=? . da5237) (string<? . da5236) (string<=? . da5235) (string-ref . da5234) (string-length . da5233) (string-for-each . da5232) (string-copy . da5231) (string-append . da5230) (string->symbol . da522f) (string->number . da522e) (string->list . da522d) (string . da522c) (sqrt . da522b) (sin . da522a) (round . da5229) (reverse . da5228) (real? . da5227) (real-valued? . da5226) (real-part . da5225) (rationalize . da5224) (rational? . da5223) (rational-valued? . da5222) (procedure? . da5221) (positive? . da5220) (pair? . da521f) (odd? . da521e) (numerator . da521d) (number? . da521c) (number->string . da521b) (null? . da521a) (not . da5219) (negative? . da5218) (nan? . da5217) (min . da5216) (max . da5215) (map . da5214) (make-vector . da5213) (make-string . da5212) (make-rectangular . da5211) (make-polar . da5210) (magnitude . da520f) (log . da520e) (list? . da520d) (list-tail . da520c) (list-ref . da520b) (list->vector . da520a) (list->string . da5209) (list . da5208) (length . da5207) (lcm . da5206) (integer? . da5205) (integer-valued? . da5204) (integer->char . da5203) (infinite? . da5202) (inexact? . da5201) (inexact . da5200) (imag-part . da51ff) (gcd . da51fe) (for-each . da51fd) (floor . da51fc) (finite? . da51fb) (expt . da51fa) (exp . da51f9) (exact? . da51f8) (exact-integer-sqrt . da51f7) (exact . da51f6) (even? . da51f5) (error . da51f4) (eqv? . da51f3) (equal? . da51f2) (eq? . da51f1) (dynamic-wind . da51f0) (div0-and-mod0 . da51ef) (mod0 . da51ee) (div0 . da51ed) (div-and-mod . da51ec) (mod . da51eb) (div . da51ea) (denominator . da51e9) (cos . da51e8) (cons . da51e7) (complex? . da51e6) (char? . da51e5) (char>? . da51e4) (char>=? . da51e3) (char=? . da51e2) (char<? . da51e1) (char<=? . da51e0) (char->integer . da51df) (ceiling . da51de) (call-with-values . da51dd) (call/cc . da51dc) (call-with-current-continuation . da51db) (cddddr . da51da) (cdddar . da51d9) (cddadr . da51d8) (cddaar . da51d7) (cdaddr . da51d6) (cdadar . da51d5) (cdaadr . da51d4) (cdaaar . da51d3) (cadddr . da51d2) (caddar . da51d1) (cadadr . da51d0) (cadaar . da51cf) (caaddr . da51ce) (caadar . da51cd) (caaadr . da51cc) (caaaar . da51cb) (cdddr . da51ca) (cddar . da51c9) (cdadr . da51c8) (cdaar . da51c7) (caddr . da51c6) (cadar . da51c5) (caadr . da51c4) (caaar . da51c3) (cddr . da51c2) (cdar . da51c1) (cadr . da51c0) (caar . da51bf) (cdr . da51be) (car . da51bd) (boolean? . da51bc) (boolean=? . da51bb) (atan . da51ba) (assertion-violation . da51b9) (asin . da51b8) (apply . da51b7) (append . da51b6) (angle . da51b5) (acos . da51b4) (abs . da51b3) (/ . da51b2) (* . da51b1) (- . da51b0) (+ . da51af) (>= . da51ae) (> . da51ad) (= . da51ac) (<= . da51ab) (< . da51aa) (&no-nans . da51a8) (&no-infinities . da51a7) (&i/o-encoding . da51a6) (&i/o-decoding . da51a5) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b) (&undefined . da519a) (&syntax . da5199) (&lexical . da5198) (&implementation-restriction . da5197) (&non-continuable . da5196) (&who . da5195) (&irritants . da5194) (&assertion . da5193) (&violation . da5192) (&error . da5191) (&serious . da5190) (&warning . da518f) (&message . da518e) (&condition . da518d) (define-condition-type . da518c) (define-enumeration . da518b) (define-record-type . da518a) (parent-rtd . da5189) (nongenerative . da5188) (opaque . da5187) (sealed . da5186) (protocol . da5185) (parent . da5184) (immutable . da5183) (mutable . da5182) (fields . da5181) (error-handling-mode . da5180) (file-options . da517f) (buffer-mode . da517e) (eol-style . da517d) (guard . da517c) (unsyntax-splicing . da5179) (unsyntax . da5178) (unquote-splicing . da5177) (unquote . da5176) (_ . da5175) (else . da5174) (=> . da5173) (... . da5172) (assert . da5171) (endianness . da5170) (do . da516d) (cond . da516c) (let* . da516b) (let*-values . da516a) (let-values . da5169) (identifier-syntax . da5168) (with-syntax . da5167) (quasisyntax . da5166) (quasiquote . da5165) (syntax-rules . da5164) (record-constructor-descriptor . da5161) (record-type-descriptor . da5160) (case . da515f) (unless . da515d) (when . da515c) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec* . da5157) (letrec . da5156) (case-lambda . da5154) (lambda . da5153) (syntax . da5152) (syntax-case . da5151) (quote . da5150) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (begin . da514a) (define-syntax . da5148) (define . da5147)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5474 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . da3181) (quotient . da532d) (null-environment . da317f) (remainder . da532c) (modulo . da532b) (inexact->exact . da532a) (force . da5329) (exact->inexact . da5328) (make-promise . da5327) (delay . da516f)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5475 '(rnrs control) '(6) '() '() '() '((do . da516d) (unless . da515d) (when . da515c) (case-lambda . da5154)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5476 '(rnrs eval) '(6) '() '() '() '((eval . da3185) (environment . da317d)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5477 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . da5323) (set-car! . da5322)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5478 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . da5325) (string-set! . da5324)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5479 '(rnrs programs) '(6) '() '() '() '((exit . da5326) (command-line . da4fdf)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . da2ef0) (identifier? . da31a7) (generate-temporaries . da3193) (free-identifier=? . da3195) (syntax->datum . da31ab) (datum->syntax . da31a9) (bound-identifier=? . da3197) (syntax-violation . da31a5) (unsyntax-splicing . da5179) (unsyntax . da5178) (_ . da5175) (... . da5172) (with-syntax . da5167) (quasisyntax . da5166) (syntax . da5152) (syntax-case . da5151)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547b '(rnrs files) '(6) '() '() '() '((delete-file . da5396) (file-exists? . da5395) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . da5394) (vector-sort . da5393) (list-sort . da5392)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547d '(rnrs base) '(6) '() '() '() '((zero? . da524b) (vector? . da524a) (vector-set! . da5249) (vector-ref . da5248) (vector-map . da5247) (vector-length . da5246) (vector-for-each . da5245) (vector-fill! . da5244) (vector->list . da5243) (vector . da5242) (values . da5241) (truncate . da5240) (tan . da523f) (symbol? . da523e) (symbol=? . da523d) (symbol->string . da523c) (substring . da523b) (string? . da523a) (string>? . da5239) (string>=? . da5238) (string=? . da5237) (string<? . da5236) (string<=? . da5235) (string-ref . da5234) (string-length . da5233) (string-for-each . da5232) (string-copy . da5231) (string-append . da5230) (string->symbol . da522f) (string->number . da522e) (string->list . da522d) (string . da522c) (sqrt . da522b) (sin . da522a) (round . da5229) (reverse . da5228) (real? . da5227) (real-valued? . da5226) (real-part . da5225) (rationalize . da5224) (rational? . da5223) (rational-valued? . da5222) (procedure? . da5221) (positive? . da5220) (pair? . da521f) (odd? . da521e) (numerator . da521d) (number? . da521c) (number->string . da521b) (null? . da521a) (not . da5219) (negative? . da5218) (nan? . da5217) (min . da5216) (max . da5215) (map . da5214) (make-vector . da5213) (make-string . da5212) (make-rectangular . da5211) (make-polar . da5210) (magnitude . da520f) (log . da520e) (list? . da520d) (list-tail . da520c) (list-ref . da520b) (list->vector . da520a) (list->string . da5209) (list . da5208) (length . da5207) (lcm . da5206) (integer? . da5205) (integer-valued? . da5204) (integer->char . da5203) (infinite? . da5202) (inexact? . da5201) (inexact . da5200) (imag-part . da51ff) (gcd . da51fe) (for-each . da51fd) (floor . da51fc) (finite? . da51fb) (expt . da51fa) (exp . da51f9) (exact? . da51f8) (exact-integer-sqrt . da51f7) (exact . da51f6) (even? . da51f5) (error . da51f4) (eqv? . da51f3) (equal? . da51f2) (eq? . da51f1) (dynamic-wind . da51f0) (div0-and-mod0 . da51ef) (mod0 . da51ee) (div0 . da51ed) (div-and-mod . da51ec) (mod . da51eb) (div . da51ea) (denominator . da51e9) (cos . da51e8) (cons . da51e7) (complex? . da51e6) (char? . da51e5) (char>? . da51e4) (char>=? . da51e3) (char=? . da51e2) (char<? . da51e1) (char<=? . da51e0) (char->integer . da51df) (ceiling . da51de) (call-with-values . da51dd) (call/cc . da51dc) (call-with-current-continuation . da51db) (cddddr . da51da) (cdddar . da51d9) (cddadr . da51d8) (cddaar . da51d7) (cdaddr . da51d6) (cdadar . da51d5) (cdaadr . da51d4) (cdaaar . da51d3) (cadddr . da51d2) (caddar . da51d1) (cadadr . da51d0) (cadaar . da51cf) (caaddr . da51ce) (caadar . da51cd) (caaadr . da51cc) (caaaar . da51cb) (cdddr . da51ca) (cddar . da51c9) (cdadr . da51c8) (cdaar . da51c7) (caddr . da51c6) (cadar . da51c5) (caadr . da51c4) (caaar . da51c3) (cddr . da51c2) (cdar . da51c1) (cadr . da51c0) (caar . da51bf) (cdr . da51be) (car . da51bd) (boolean? . da51bc) (boolean=? . da51bb) (atan . da51ba) (assertion-violation . da51b9) (asin . da51b8) (apply . da51b7) (append . da51b6) (angle . da51b5) (acos . da51b4) (abs . da51b3) (/ . da51b2) (* . da51b1) (- . da51b0) (+ . da51af) (>= . da51ae) (> . da51ad) (= . da51ac) (<= . da51ab) (< . da51aa) (unquote-splicing . da5177) (unquote . da5176) (_ . da5175) (else . da5174) (=> . da5173) (... . da5172) (assert . da5171) (cond . da516c) (let* . da516b) (let*-values . da516a) (let-values . da5169) (identifier-syntax . da5168) (quasiquote . da5165) (syntax-rules . da5164) (case . da515f) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec* . da5157) (letrec . da5156) (lambda . da5153) (quote . da5150) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (begin . da514a) (define-syntax . da5148) (define . da5147)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547e '(rnrs lists) '(6) '() '() '() '((remove . da5321) (remv . da5320) (remp . da531f) (remq . da531e) (partition . da531d) (memv . da531c) (memq . da531b) (memp . da531a) (member . da5319) (exists . da5318) (for-all . da5317) (fold-right . da5316) (fold-left . da5315) (find . da5314) (filter . da5313) (cons* . da5312) (assv . da5311) (assq . da5310) (assp . da530f) (assoc . da530e)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da547f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . da537c) (call-with-input-file . da537b) (write-char . da537a) (write . da5379) (with-output-to-file . da5378) (with-input-from-file . da5377) (read-char . da5376) (read . da5375) (peek-char . da5374) (open-output-file . da5373) (open-input-file . da5372) (newline . da5371) (display . da5370) (close-output-port . da536f) (close-input-port . da536e) (eof-object? . da536d) (eof-object . da536c) (current-error-port . da536b) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5480 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . da533d) (utf32->string . da52f2) (utf16->string . da52f1) (utf8->string . da52f0) (uint-list->bytevector . da52ef) (u8-list->bytevector . da52ee) (string->utf8 . da52ed) (string->utf32 . da52ec) (string->utf16 . da52eb) (sint-list->bytevector . da52ea) (native-endianness . da52e9) (bytevector? . da52e8) (bytevector=? . da52e7) (bytevector-uint-set! . da52e6) (bytevector-uint-ref . da52e5) (bytevector-u8-set! . da52e4) (bytevector-u8-ref . da52e3) (bytevector-u64-set! . da52e2) (bytevector-u64-ref . da52e1) (bytevector-u64-native-set! . da52e0) (bytevector-u64-native-ref . da52df) (bytevector-u32-set! . da52de) (bytevector-u32-ref . da52dd) (bytevector-u32-native-set! . da52dc) (bytevector-u32-native-ref . da52db) (bytevector-u16-set! . da52da) (bytevector-u16-ref . da52d9) (bytevector-u16-native-set! . da52d8) (bytevector-u16-native-ref . da52d7) (bytevector-sint-set! . da52d6) (bytevector-sint-ref . da52d5) (bytevector-s8-set! . da52d4) (bytevector-s8-ref . da52d3) (bytevector-s64-set! . da52d2) (bytevector-s64-ref . da52d1) (bytevector-s64-native-set! . da52d0) (bytevector-s64-native-ref . da52cf) (bytevector-s32-set! . da52ce) (bytevector-s32-ref . da52cd) (bytevector-s32-native-set! . da52cc) (bytevector-s32-native-ref . da52cb) (bytevector-s16-set! . da52ca) (bytevector-s16-ref . da52c9) (bytevector-s16-native-set! . da52c8) (bytevector-s16-native-ref . da52c7) (bytevector-length . da52c6) (bytevector-ieee-single-ref . da52c5) (bytevector-ieee-single-set! . da52c4) (bytevector-ieee-single-native-set! . da52c3) (bytevector-ieee-single-native-ref . da52c2) (bytevector-ieee-double-set! . da52c1) (bytevector-ieee-double-ref . da52c0) (bytevector-ieee-double-native-set! . da52bf) (bytevector-ieee-double-native-ref . da52be) (bytevector-fill! . da52bd) (bytevector-copy! . da52bc) (bytevector-copy . da52bb) (bytevector->uint-list . da52ba) (bytevector->u8-list . da52b9) (bytevector->sint-list . da52b8) (endianness . da5170)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5481 '(rnrs unicode) '(6) '() '() '() '((string-upcase . da53c4) (string-titlecase . da53c3) (string-normalize-nfkd . da53c2) (string-normalize-nfkc . da53c1) (string-normalize-nfd . da53c0) (string-normalize-nfc . da53bf) (string-foldcase . da53be) (string-downcase . da53bd) (string-ci>? . da53bc) (string-ci>=? . da53bb) (string-ci=? . da53ba) (string-ci<? . da53b9) (string-ci<=? . da53b8) (char-whitespace? . da53b7) (char-upper-case? . da53b6) (char-title-case? . da53b5) (char-numeric? . da53b4) (char-lower-case? . da53b3) (char-general-category . da53b2) (char-upcase . da53b1) (char-titlecase . da53b0) (char-foldcase . da53af) (char-downcase . da53ae) (char-ci>? . da53ad) (char-ci>=? . da53ac) (char-ci=? . da53ab) (char-ci<? . da53aa) (char-ci<=? . da53a9) (char-alphabetic? . da53a8)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5482 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . da5307) (raise-continuable . da5306) (raise . da5305) (guard . da517c) (else . da5174) (=> . da5173)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5483 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . da525c) (bitwise-reverse-bit-field . da525b) (bitwise-length . da525a) (bitwise-if . da5259) (bitwise-first-bit-set . da5258) (bitwise-copy-bit-field . da5257) (bitwise-copy-bit . da5256) (bitwise-bit-set? . da5255) (bitwise-bit-field . da5254) (bitwise-bit-count . da5253) (bitwise-xor . da5252) (bitwise-ior . da5251) (bitwise-and . da5250) (bitwise-not . da524f) (bitwise-arithmetic-shift-right . da524e) (bitwise-arithmetic-shift-left . da524d) (bitwise-arithmetic-shift . da524c)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5484 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . da5289) (fxxor . da5288) (fxrotate-bit-field . da5287) (fxreverse-bit-field . da5286) (fxpositive? . da5285) (fxodd? . da5284) (fxnot . da5283) (fxnegative? . da5282) (fxmod0 . da5281) (fxmod . da5280) (fxmin . da527f) (fxmax . da527e) (fxlength . da527d) (fxior . da527c) (fxif . da527b) (fxfirst-bit-set . da527a) (fxeven? . da5279) (fxdiv0-and-mod0 . da5278) (fxdiv0 . da5277) (fxdiv-and-mod . da5276) (fxdiv . da5275) (fxcopy-bit-field . da5274) (fxcopy-bit . da5273) (fxbit-set? . da5272) (fxbit-field . da5271) (fxbit-count . da5270) (fxarithmetic-shift-right . da526f) (fxarithmetic-shift-left . da526e) (fxarithmetic-shift . da526d) (fxand . da526c) (fx>? . da526b) (fx>=? . da526a) (fx=? . da5269) (fx<? . da5268) (fx<=? . da5267) (fx-/carry . da5266) (fx- . da5265) (fx+/carry . da5264) (fx+ . da5263) (fx*/carry . da5262) (fx* . da5261) (greatest-fixnum . da5260) (least-fixnum . da525f) (fixnum-width . da525e) (fixnum? . da525d)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5485 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . da4ed0) (no-infinities-violation? . da4ebb) (make-no-nans-violation . da4ece) (make-no-infinities-violation . da4eb9) (real->flonum . da52b7) (flzero? . da52b6) (fltruncate . da52b5) (fltan . da52b4) (flsqrt . da52b3) (flsin . da52b2) (flround . da52b1) (flpositive? . da52b0) (flonum? . da52af) (flodd? . da52ae) (flnumerator . da52ad) (flnegative? . da52ac) (flnan? . da52ab) (flmod0 . da52aa) (flmod . da52a9) (flmin . da52a8) (flmax . da52a7) (fllog . da52a6) (flinteger? . da52a5) (flinfinite? . da52a4) (flfloor . da52a3) (flfinite? . da52a2) (flexpt . da52a1) (flexp . da52a0) (fleven? . da529f) (fldiv0-and-mod0 . da529e) (fldiv0 . da529d) (fldiv-and-mod . da529c) (fldiv . da529b) (fldenominator . da529a) (flcos . da5299) (flceiling . da5298) (flatan . da5297) (flasin . da5296) (flacos . da5295) (flabs . da5294) (fl>? . da5293) (fl>=? . da5292) (fl=? . da5291) (fl<? . da5290) (fl<=? . da528f) (fl/ . da528e) (fl- . da528d) (fl+ . da528c) (fl* . da528b) (fixnum->flonum . da528a) (&no-nans . da51a8) (&no-infinities . da51a7)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5486 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . da5391) (string-ci-hash . da5390) (string-hash . da538f) (equal-hash . da538e) (hashtable-equivalence-function . da538d) (make-hashtable . da538c) (hashtable-hash-function . da538b) (make-eqv-hashtable . da538a) (make-eq-hashtable . da5389) (hashtable? . da5388) (hashtable-update! . da5387) (hashtable-size . da5386) (hashtable-set! . da5385) (hashtable-ref . da5384) (hashtable-mutable? . da5383) (hashtable-keys . da5382) (hashtable-entries . da5381) (hashtable-delete! . da5380) (hashtable-copy . da537f) (hashtable-contains? . da537e) (hashtable-clear! . da537d)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5487 '(rnrs io ports) '(6) '() '() '() '((eof-object? . da536d) (eof-object . da536c) (current-error-port . da536b) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (utf-8-codec . da5366) (utf-16-codec . da5365) (transcoder-error-handling-mode . da5364) (transcoder-eol-style . da5363) (transcoder-codec . da5362) (transcoded-port . da5361) (textual-port? . da5360) (string->bytevector . da535f) (standard-output-port . da535e) (standard-input-port . da535d) (standard-error-port . da535c) (set-port-position! . da535b) (put-u8 . da535a) (put-string . da5359) (put-datum . da5358) (put-char . da5357) (put-bytevector . da5356) (port? . da5355) (port-transcoder . da5354) (port-position . da5353) (port-has-set-port-position!? . da5352) (port-has-port-position? . da5351) (port-eof? . da5350) (output-port-buffer-mode . da534f) (open-string-output-port . da534e) (open-string-input-port . da534d) (open-file-output-port . da534c) (open-file-input/output-port . da534b) (open-file-input-port . da534a) (open-bytevector-output-port . da5349) (open-bytevector-input-port . da5348) (native-transcoder . da5347) (native-eol-style . da5346) (make-transcoder . da5345) (latin-1-codec . da5344) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (make-i/o-encoding-error . da4ea0) (make-i/o-decoding-error . da4e89) (make-custom-textual-output-port . da5343) (make-custom-textual-input/output-port . da5342) (make-custom-textual-input-port . da5341) (make-custom-binary-output-port . da5340) (make-custom-binary-input/output-port . da533f) (make-custom-binary-input-port . da533e) (lookahead-u8 . da533c) (lookahead-char . da533b) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (i/o-encoding-error? . da4ea4) (i/o-encoding-error-char . da4ea6) (i/o-decoding-error? . da4e8b) (get-u8 . da533a) (get-string-n! . da5339) (get-string-n . da5338) (get-string-all . da5337) (get-line . da5336) (get-datum . da5335) (get-char . da5334) (get-bytevector-some . da5333) (get-bytevector-n! . da5332) (get-bytevector-n . da5331) (get-bytevector-all . da5330) (flush-output-port . da532f) (close-port . da532e) (call-with-string-output-port . da530d) (call-with-port . da530c) (call-with-bytevector-output-port . da530b) (bytevector->string . da530a) (buffer-mode? . da5309) (binary-port? . da5308) (&i/o-encoding . da51a6) (&i/o-decoding . da51a5) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b) (error-handling-mode . da5180) (file-options . da517f) (buffer-mode . da517e) (eol-style . da517d)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5488 '(rnrs enums) '(6) '() '() '() '((make-enumeration . da5304) (enum-set=? . da5303) (enum-set-universe . da5302) (enum-set-union . da5301) (enum-set-subset? . da5300) (enum-set-projection . da52ff) (enum-set-member? . da52fe) (enum-set-intersection . da52fd) (enum-set-indexer . da52fc) (enum-set-difference . da52fb) (enum-set-constructor . da52fa) (enum-set-complement . da52f9) (enum-set->list . da52f8) (define-enumeration . da518b)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da5489 '(rnrs conditions) '(6) '() '() '() '((who-condition? . da4d1b) (warning? . da4c93) (violation? . da4cd2) (undefined-violation? . da4d92) (syntax-violation? . da4d79) (syntax-violation-subform . da4d7d) (syntax-violation-form . da4d7b) (syntax-violation . da31a5) (simple-conditions . da52f7) (serious-condition? . da4ca8) (non-continuable-violation? . da4d32) (message-condition? . da4c7c) (make-who-condition . da4d17) (make-warning . da4c91) (make-violation . da4cd0) (make-undefined-violation . da4d90) (make-syntax-violation . da4d73) (make-serious-condition . da4ca6) (make-non-continuable-violation . da4d30) (make-message-condition . da4c78) (make-lexical-violation . da4d5a) (make-irritants-condition . da4cfc) (make-implementation-restriction-violation . da4d45) (make-error . da4cbb) (make-assertion-violation . da4ce5) (lexical-violation? . da4d5c) (irritants-condition? . da4d00) (implementation-restriction-violation? . da4d47) (error? . da4cbd) (condition-who . da4d1d) (condition-predicate . da52f6) (condition-message . da4c7e) (condition-irritants . da4d02) (condition-accessor . da52f5) (condition . da52f4) (assertion-violation? . da4ce7) (condition? . da52f3) (&undefined . da519a) (&syntax . da5199) (&lexical . da5198) (&implementation-restriction . da5197) (&non-continuable . da5196) (&who . da5195) (&irritants . da5194) (&assertion . da5193) (&violation . da5192) (&error . da5191) (&serious . da5190) (&warning . da518f) (&message . da518e) (&condition . da518d) (define-condition-type . da518c)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da548a '(rnrs records inspection) '(6) '() '() '() '((record? . da53a0) (record-type-uid . da539f) (record-type-sealed? . da539e) (record-type-parent . da539d) (record-type-opaque? . da539c) (record-type-name . da539b) (record-type-generative? . da539a) (record-type-field-names . da5399) (record-rtd . da5398) (record-field-mutable? . da5397)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da548b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . da53a7) (record-predicate . da53a6) (record-mutator . da53a5) (record-constructor . da53a4) (record-accessor . da53a3) (make-record-type-descriptor . da53a2) (make-record-constructor-descriptor . da53a1)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da548c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . da518a) (parent-rtd . da5189) (nongenerative . da5188) (opaque . da5187) (sealed . da5186) (protocol . da5185) (parent . da5184) (immutable . da5183) (mutable . da5182) (fields . da5181) (record-constructor-descriptor . da5161) (record-type-descriptor . da5160)) '() values values '#f '#f '#t '#f) (da2cd3@da2b1f@install-library 'da548d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . da4ed4) (&no-nans-rtd . da4ed2) (&no-infinities-rcd . da4ebf) (&no-infinities-rtd . da4ebd) (&i/o-encoding-rcd . da4eaa) (&i/o-encoding-rtd . da4ea8) (&i/o-decoding-rcd . da4e8f) (&i/o-decoding-rtd . da4e8d) (&i/o-port-rcd . da4e7a) (&i/o-port-rtd . da4e78) (&i/o-file-does-not-exist-rcd . da4e5f) (&i/o-file-does-not-exist-rtd . da4e5d) (&i/o-file-already-exists-rcd . da4e4a) (&i/o-file-already-exists-rtd . da4e48) (&i/o-file-is-read-only-rcd . da4e35) (&i/o-file-is-read-only-rtd . da4e33) (&i/o-file-protection-rcd . da4e20) (&i/o-file-protection-rtd . da4e1e) (&i/o-filename-rcd . da4e0b) (&i/o-filename-rtd . da4e09) (&i/o-invalid-position-rcd . da4df0) (&i/o-invalid-position-rtd . da4dee) (&i/o-write-rcd . da4dd5) (&i/o-write-rtd . da4dd3) (&i/o-read-rcd . da4dc0) (&i/o-read-rtd . da4dbe) (&i/o-rcd . da4dab) (&i/o-rtd . da4da9) (&undefined-rcd . da4d96) (&undefined-rtd . da4d94) (&syntax-rcd . da4d81) (&syntax-rtd . da4d7f) (&lexical-rcd . da4d60) (&lexical-rtd . da4d5e) (&implementation-restriction-rcd . da4d4b) (&implementation-restriction-rtd . da4d49) (&non-continuable-rcd . da4d36) (&non-continuable-rtd . da4d34) (&who-rcd . da4d21) (&who-rtd . da4d1f) (&irritants-rcd . da4d06) (&irritants-rtd . da4d04) (&assertion-rcd . da4ceb) (&assertion-rtd . da4ce9) (&violation-rcd . da4cd6) (&violation-rtd . da4cd4) (&error-rcd . da4cc1) (&error-rtd . da4cbf) (&serious-rcd . da4cac) (&serious-rtd . da4caa) (&warning-rcd . da4c97) (&warning-rtd . da4c95) (&message-rcd . da4c82) (&message-rtd . da4c80) (&condition-rcd . da4c23) (&condition-rtd . da4c21) (syntax-error . da31a1) (syntax-dispatch . da30c5) (pretty-print . da546d) (eval-core . da546c) (set-symbol-value! . da546b) (symbol-value . da546a) (gensym . da5469) (void . da5468) (load . da4fe5) (interaction-environment . da31b3) (char-ready? . da5467) (regexp? . da5466) (read-line . da5465) (gensym-prefix-set! . da5464) (ungensym . da5463) (alist->eq-hash-table . da5462) (assoc-ref . da5461) (print . da5460) (format . da545f) (host-os . da545e) (library-path . da2afe) (standard-library-path . da545d) (file-newer? . da545c) (stat-mtime . da545b) (write-to-file . da545a) (file->list . da5459) (file->string . da5458) (digit->integer . da5457) (call-with-string-input-port . da5456) (call-with-string-io . da5455) (string-split . da5454) (bytevector-for-each . da5453) (string->regexp . da5452) (rxmatch . da5451) (regexp-replace-all . da5450) (hashtable-for-each . da544f) (mosh-cache-dir . da28e8) (call-process . da544e) (local-tz-offset . da544d) (microseconds . da544c) (directory-list . da544b) (set-current-directory! . da544a) (expand-path . da5449) (current-directory . da5448) (%spawn . da5447) (%waitpid . da5446) (simple-struct-name . da5445) (simple-struct-set! . da5444) (simple-struct-ref . da5443) (make-simple-struct . da5442) (simple-struct? . da5441) (pointer-ref-c-int64 . da5440) (pointer-ref-c-int32 . da543f) (pointer-ref-c-int16 . da543e) (pointer-ref-c-int8 . da543d) (pointer-ref-c-uint64 . da543c) (pointer-ref-c-uint32 . da543b) (pointer-ref-c-uint16 . da543a) (pointer-ref-c-uint8 . da5439) (pointer-set-c-uint64! . da5438) (pointer-set-c-uint32! . da5437) (pointer-set-c-uint16! . da5436) (pointer-set-c-uint8! . da5435) (pointer-set-c-int64! . da5434) (pointer-set-c-int32! . da5433) (pointer-set-c-int16! . da5432) (pointer-set-c-int8! . da5431) (pointer-set-c-pointer! . da5430) (pointer-set-c-double! . da542f) (pointer-set-c-float! . da542e) (pointer-set-c-long-long! . da542d) (pointer-set-c-long! . da542c) (pointer-set-c-int! . da542b) (pointer-set-c-short! . da542a) (pointer-set-c-char! . da5429) (pointer-ref-c-pointer . da5428) (pointer-ref-c-double . da5427) (pointer-ref-c-float . da5426) (pointer-ref-c-unsigned-long-long . da5425) (pointer-ref-c-signed-long-long . da5424) (pointer-ref-c-unsigned-long . da5423) (pointer-ref-c-signed-long . da5422) (pointer-ref-c-unsigned-int . da5421) (pointer-ref-c-signed-int . da5420) (pointer-ref-c-unsigned-short . da541f) (pointer-ref-c-signed-short . da541e) (pointer-ref-c-unsigned-char . da541d) (pointer-ref-c-signed-char . da541c) (pointer->integer . da541b) (integer->pointer . da541a) (pointer? . da5419) (shared-errno . da5418) (%ffi-free-c-callback-trampoline . da5417) (%ffi-make-c-callback-trampoline . da5416) (%ffi-free . da5415) (%ffi-malloc . da5414) (%ffi-supported? . da5413) (%ffi-pointer->string . da5412) (%ffi-call . da5411) (%ffi-lookup . da5410) (%ffi-open . da540f) (null-terminated-utf8->string . da540e) (null-terminated-bytevector->string . da540d) (%fork . da540c) (%pipe . da540b) (p . da540a) (open-output-string . da5409) (get-output-string . da5408) (file-stat-ctime . da5407) (file-stat-atime . da5406) (file-stat-mtime . da5405) (file-size-in-bytes . da5404) (file-writable? . da5403) (file-executable? . da5402) (file-readable? . da5401) (file-regular? . da5400) (file-symbolic-link? . da53ff) (file-directory? . da53fe) (create-symbolic-link . da53fd) (rename-file . da53fc) (delete-directory . da53fb) (create-directory . da53fa) (create-mosh-cache-dir . da53f9) (get-environment-variables . da53f8) (current-exception-handler . da53f7) (get-environment-variable . da53f6) (join-wraps . da53f5) (id->real-label . da53f4) (same-marks? . da53f3) (same-marks*? . da53f2) (get-timeofday . da53f1) (get-command-line . da53f0) (sys-display . da53ef) (whereis . da53ee) (register . da53ed) (vm-join! . da53ec) (vm-set-value! . da53eb) (vm? . da53ea) (main-vm? . da53e9) (vm-eval . da53e8) (vm-self . da53e7) (vm-start! . da53e6) (make-vm . da53e5) (mutex-try-lock! . da53e4) (mutex-unlock! . da53e3) (mutex-lock! . da53e2) (mutex? . da53e1) (make-mutex . da53e0) (condition-variable-notify-all! . da53df) (condition-variable-notify! . da53de) (condition-variable-wait! . da53dd) (make-condition-variable . da53dc) (mosh-executable-path . da53db) (make-file-options . da53da) (source-info . da53d9) (make-compiler-instruction . da53d8) (make-instruction . da53d7) (set-source-info! . da53d6) (bignum? . da53d5) (fast-equal? . da53d4) (fasl-read . da53d3) (fasl-write . da53d2) (time-usage . da53d1) (os-constant . da53d0) (disasm . da53cf) (make-parameter . da28e6) (socket-port . da53ce) (socket-shutdown . da53cd) (socket-close . da53cc) (socket-send . da53cb) (socket-recv! . da53ca) (socket-recv . da53c9) (make-server-socket . da53c8) (make-client-socket . da53c7) (socket-accept . da53c6) (socket? . da53c5) (string-upcase . da53c4) (string-titlecase . da53c3) (string-normalize-nfkd . da53c2) (string-normalize-nfkc . da53c1) (string-normalize-nfd . da53c0) (string-normalize-nfc . da53bf) (string-foldcase . da53be) (string-downcase . da53bd) (string-ci>? . da53bc) (string-ci>=? . da53bb) (string-ci=? . da53ba) (string-ci<? . da53b9) (string-ci<=? . da53b8) (char-whitespace? . da53b7) (char-upper-case? . da53b6) (char-title-case? . da53b5) (char-numeric? . da53b4) (char-lower-case? . da53b3) (char-general-category . da53b2) (char-upcase . da53b1) (char-titlecase . da53b0) (char-foldcase . da53af) (char-downcase . da53ae) (char-ci>? . da53ad) (char-ci>=? . da53ac) (char-ci=? . da53ab) (char-ci<? . da53aa) (char-ci<=? . da53a9) (char-alphabetic? . da53a8) (make-variable-transformer . da2ef0) (identifier? . da31a7) (generate-temporaries . da3193) (free-identifier=? . da3195) (syntax->datum . da31ab) (datum->syntax . da31a9) (bound-identifier=? . da3197) (record-type-descriptor? . da53a7) (record-predicate . da53a6) (record-mutator . da53a5) (record-constructor . da53a4) (record-accessor . da53a3) (make-record-type-descriptor . da53a2) (make-record-constructor-descriptor . da53a1) (record? . da53a0) (record-type-uid . da539f) (record-type-sealed? . da539e) (record-type-parent . da539d) (record-type-opaque? . da539c) (record-type-name . da539b) (record-type-generative? . da539a) (record-type-field-names . da5399) (record-rtd . da5398) (record-field-mutable? . da5397) (delete-file . da5396) (file-exists? . da5395) (vector-sort! . da5394) (vector-sort . da5393) (list-sort . da5392) (symbol-hash . da5391) (string-ci-hash . da5390) (string-hash . da538f) (equal-hash . da538e) (hashtable-equivalence-function . da538d) (make-hashtable . da538c) (hashtable-hash-function . da538b) (make-eqv-hashtable . da538a) (make-eq-hashtable . da5389) (hashtable? . da5388) (hashtable-update! . da5387) (hashtable-size . da5386) (hashtable-set! . da5385) (hashtable-ref . da5384) (hashtable-mutable? . da5383) (hashtable-keys . da5382) (hashtable-entries . da5381) (hashtable-delete! . da5380) (hashtable-copy . da537f) (hashtable-contains? . da537e) (hashtable-clear! . da537d) (call-with-output-file . da537c) (call-with-input-file . da537b) (write-char . da537a) (write . da5379) (with-output-to-file . da5378) (with-input-from-file . da5377) (read-char . da5376) (read . da5375) (peek-char . da5374) (open-output-file . da5373) (open-input-file . da5372) (newline . da5371) (display . da5370) (close-output-port . da536f) (close-input-port . da536e) (eof-object? . da536d) (eof-object . da536c) (current-error-port . da536b) (current-output-port . da536a) (current-input-port . da5369) (output-port? . da5368) (input-port? . da5367) (utf-8-codec . da5366) (utf-16-codec . da5365) (transcoder-error-handling-mode . da5364) (transcoder-eol-style . da5363) (transcoder-codec . da5362) (transcoded-port . da5361) (textual-port? . da5360) (string->bytevector . da535f) (standard-output-port . da535e) (standard-input-port . da535d) (standard-error-port . da535c) (set-port-position! . da535b) (put-u8 . da535a) (put-string . da5359) (put-datum . da5358) (put-char . da5357) (put-bytevector . da5356) (port? . da5355) (port-transcoder . da5354) (port-position . da5353) (port-has-set-port-position!? . da5352) (port-has-port-position? . da5351) (port-eof? . da5350) (output-port-buffer-mode . da534f) (open-string-output-port . da534e) (open-string-input-port . da534d) (open-file-output-port . da534c) (open-file-input/output-port . da534b) (open-file-input-port . da534a) (open-bytevector-output-port . da5349) (open-bytevector-input-port . da5348) (native-transcoder . da5347) (native-eol-style . da5346) (make-transcoder . da5345) (latin-1-codec . da5344) (make-i/o-write-error . da4dcf) (make-i/o-read-error . da4dba) (make-i/o-port-error . da4e70) (make-i/o-invalid-position-error . da4de6) (make-i/o-filename-error . da4e01) (make-i/o-file-protection-error . da4e1a) (make-i/o-file-is-read-only-error . da4e2f) (make-i/o-file-does-not-exist-error . da4e59) (make-i/o-file-already-exists-error . da4e44) (make-i/o-error . da4da5) (make-i/o-encoding-error . da4ea0) (make-i/o-decoding-error . da4e89) (make-custom-textual-output-port . da5343) (make-custom-textual-input/output-port . da5342) (make-custom-textual-input-port . da5341) (make-custom-binary-output-port . da5340) (make-custom-binary-input/output-port . da533f) (make-custom-binary-input-port . da533e) (make-bytevector . da533d) (lookahead-u8 . da533c) (lookahead-char . da533b) (i/o-write-error? . da4dd1) (i/o-read-error? . da4dbc) (i/o-port-error? . da4e74) (i/o-invalid-position-error? . da4dea) (i/o-filename-error? . da4e05) (i/o-file-protection-error? . da4e1c) (i/o-file-is-read-only-error? . da4e31) (i/o-file-does-not-exist-error? . da4e5b) (i/o-file-already-exists-error? . da4e46) (i/o-error? . da4da7) (i/o-error-position . da4dec) (i/o-error-port . da4e76) (i/o-error-filename . da4e07) (i/o-encoding-error? . da4ea4) (i/o-encoding-error-char . da4ea6) (i/o-decoding-error? . da4e8b) (get-u8 . da533a) (get-string-n! . da5339) (get-string-n . da5338) (get-string-all . da5337) (get-line . da5336) (get-datum . da5335) (get-char . da5334) (get-bytevector-some . da5333) (get-bytevector-n! . da5332) (get-bytevector-n . da5331) (get-bytevector-all . da5330) (flush-output-port . da532f) (close-port . da532e) (scheme-report-environment . da3181) (quotient . da532d) (null-environment . da317f) (remainder . da532c) (modulo . da532b) (inexact->exact . da532a) (force . da5329) (exact->inexact . da5328) (make-promise . da5327) (exit . da5326) (command-line . da4fdf) (string-fill! . da5325) (string-set! . da5324) (set-cdr! . da5323) (set-car! . da5322) (remove . da5321) (remv . da5320) (remp . da531f) (remq . da531e) (partition . da531d) (memv . da531c) (memq . da531b) (memp . da531a) (member . da5319) (exists . da5318) (for-all . da5317) (fold-right . da5316) (fold-left . da5315) (find . da5314) (filter . da5313) (cons* . da5312) (assv . da5311) (assq . da5310) (assp . da530f) (assoc . da530e) (call-with-string-output-port . da530d) (call-with-port . da530c) (call-with-bytevector-output-port . da530b) (bytevector->string . da530a) (buffer-mode? . da5309) (binary-port? . da5308) (with-exception-handler . da5307) (raise-continuable . da5306) (raise . da5305) (eval . da3185) (environment . da317d) (make-enumeration . da5304) (enum-set=? . da5303) (enum-set-universe . da5302) (enum-set-union . da5301) (enum-set-subset? . da5300) (enum-set-projection . da52ff) (enum-set-member? . da52fe) (enum-set-intersection . da52fd) (enum-set-indexer . da52fc) (enum-set-difference . da52fb) (enum-set-constructor . da52fa) (enum-set-complement . da52f9) (enum-set->list . da52f8) (who-condition? . da4d1b) (warning? . da4c93) (violation? . da4cd2) (undefined-violation? . da4d92) (syntax-violation? . da4d79) (syntax-violation-subform . da4d7d) (syntax-violation-form . da4d7b) (syntax-violation . da31a5) (simple-conditions . da52f7) (serious-condition? . da4ca8) (non-continuable-violation? . da4d32) (message-condition? . da4c7c) (make-who-condition . da4d17) (make-warning . da4c91) (make-violation . da4cd0) (make-undefined-violation . da4d90) (make-syntax-violation . da4d73) (make-serious-condition . da4ca6) (make-non-continuable-violation . da4d30) (make-message-condition . da4c78) (make-lexical-violation . da4d5a) (make-irritants-condition . da4cfc) (make-implementation-restriction-violation . da4d45) (make-error . da4cbb) (make-assertion-violation . da4ce5) (lexical-violation? . da4d5c) (irritants-condition? . da4d00) (implementation-restriction-violation? . da4d47) (error? . da4cbd) (condition-who . da4d1d) (condition-predicate . da52f6) (condition-message . da4c7e) (condition-irritants . da4d02) (condition-accessor . da52f5) (condition . da52f4) (assertion-violation? . da4ce7) (condition? . da52f3) (utf32->string . da52f2) (utf16->string . da52f1) (utf8->string . da52f0) (uint-list->bytevector . da52ef) (u8-list->bytevector . da52ee) (string->utf8 . da52ed) (string->utf32 . da52ec) (string->utf16 . da52eb) (sint-list->bytevector . da52ea) (native-endianness . da52e9) (bytevector? . da52e8) (bytevector=? . da52e7) (bytevector-uint-set! . da52e6) (bytevector-uint-ref . da52e5) (bytevector-u8-set! . da52e4) (bytevector-u8-ref . da52e3) (bytevector-u64-set! . da52e2) (bytevector-u64-ref . da52e1) (bytevector-u64-native-set! . da52e0) (bytevector-u64-native-ref . da52df) (bytevector-u32-set! . da52de) (bytevector-u32-ref . da52dd) (bytevector-u32-native-set! . da52dc) (bytevector-u32-native-ref . da52db) (bytevector-u16-set! . da52da) (bytevector-u16-ref . da52d9) (bytevector-u16-native-set! . da52d8) (bytevector-u16-native-ref . da52d7) (bytevector-sint-set! . da52d6) (bytevector-sint-ref . da52d5) (bytevector-s8-set! . da52d4) (bytevector-s8-ref . da52d3) (bytevector-s64-set! . da52d2) (bytevector-s64-ref . da52d1) (bytevector-s64-native-set! . da52d0) (bytevector-s64-native-ref . da52cf) (bytevector-s32-set! . da52ce) (bytevector-s32-ref . da52cd) (bytevector-s32-native-set! . da52cc) (bytevector-s32-native-ref . da52cb) (bytevector-s16-set! . da52ca) (bytevector-s16-ref . da52c9) (bytevector-s16-native-set! . da52c8) (bytevector-s16-native-ref . da52c7) (bytevector-length . da52c6) (bytevector-ieee-single-ref . da52c5) (bytevector-ieee-single-set! . da52c4) (bytevector-ieee-single-native-set! . da52c3) (bytevector-ieee-single-native-ref . da52c2) (bytevector-ieee-double-set! . da52c1) (bytevector-ieee-double-ref . da52c0) (bytevector-ieee-double-native-set! . da52bf) (bytevector-ieee-double-native-ref . da52be) (bytevector-fill! . da52bd) (bytevector-copy! . da52bc) (bytevector-copy . da52bb) (bytevector->uint-list . da52ba) (bytevector->u8-list . da52b9) (bytevector->sint-list . da52b8) (no-nans-violation? . da4ed0) (no-infinities-violation? . da4ebb) (make-no-nans-violation . da4ece) (make-no-infinities-violation . da4eb9) (real->flonum . da52b7) (flzero? . da52b6) (fltruncate . da52b5) (fltan . da52b4) (flsqrt . da52b3) (flsin . da52b2) (flround . da52b1) (flpositive? . da52b0) (flonum? . da52af) (flodd? . da52ae) (flnumerator . da52ad) (flnegative? . da52ac) (flnan? . da52ab) (flmod0 . da52aa) (flmod . da52a9) (flmin . da52a8) (flmax . da52a7) (fllog . da52a6) (flinteger? . da52a5) (flinfinite? . da52a4) (flfloor . da52a3) (flfinite? . da52a2) (flexpt . da52a1) (flexp . da52a0) (fleven? . da529f) (fldiv0-and-mod0 . da529e) (fldiv0 . da529d) (fldiv-and-mod . da529c) (fldiv . da529b) (fldenominator . da529a) (flcos . da5299) (flceiling . da5298) (flatan . da5297) (flasin . da5296) (flacos . da5295) (flabs . da5294) (fl>? . da5293) (fl>=? . da5292) (fl=? . da5291) (fl<? . da5290) (fl<=? . da528f) (fl/ . da528e) (fl- . da528d) (fl+ . da528c) (fl* . da528b) (fixnum->flonum . da528a) (fxzero? . da5289) (fxxor . da5288) (fxrotate-bit-field . da5287) (fxreverse-bit-field . da5286) (fxpositive? . da5285) (fxodd? . da5284) (fxnot . da5283) (fxnegative? . da5282) (fxmod0 . da5281) (fxmod . da5280) (fxmin . da527f) (fxmax . da527e) (fxlength . da527d) (fxior . da527c) (fxif . da527b) (fxfirst-bit-set . da527a) (fxeven? . da5279) (fxdiv0-and-mod0 . da5278) (fxdiv0 . da5277) (fxdiv-and-mod . da5276) (fxdiv . da5275) (fxcopy-bit-field . da5274) (fxcopy-bit . da5273) (fxbit-set? . da5272) (fxbit-field . da5271) (fxbit-count . da5270) (fxarithmetic-shift-right . da526f) (fxarithmetic-shift-left . da526e) (fxarithmetic-shift . da526d) (fxand . da526c) (fx>? . da526b) (fx>=? . da526a) (fx=? . da5269) (fx<? . da5268) (fx<=? . da5267) (fx-/carry . da5266) (fx- . da5265) (fx+/carry . da5264) (fx+ . da5263) (fx*/carry . da5262) (fx* . da5261) (greatest-fixnum . da5260) (least-fixnum . da525f) (fixnum-width . da525e) (fixnum? . da525d) (bitwise-rotate-bit-field . da525c) (bitwise-reverse-bit-field . da525b) (bitwise-length . da525a) (bitwise-if . da5259) (bitwise-first-bit-set . da5258) (bitwise-copy-bit-field . da5257) (bitwise-copy-bit . da5256) (bitwise-bit-set? . da5255) (bitwise-bit-field . da5254) (bitwise-bit-count . da5253) (bitwise-xor . da5252) (bitwise-ior . da5251) (bitwise-and . da5250) (bitwise-not . da524f) (bitwise-arithmetic-shift-right . da524e) (bitwise-arithmetic-shift-left . da524d) (bitwise-arithmetic-shift . da524c) (zero? . da524b) (vector? . da524a) (vector-set! . da5249) (vector-ref . da5248) (vector-map . da5247) (vector-length . da5246) (vector-for-each . da5245) (vector-fill! . da5244) (vector->list . da5243) (vector . da5242) (values . da5241) (truncate . da5240) (tan . da523f) (symbol? . da523e) (symbol=? . da523d) (symbol->string . da523c) (substring . da523b) (string? . da523a) (string>? . da5239) (string>=? . da5238) (string=? . da5237) (string<? . da5236) (string<=? . da5235) (string-ref . da5234) (string-length . da5233) (string-for-each . da5232) (string-copy . da5231) (string-append . da5230) (string->symbol . da522f) (string->number . da522e) (string->list . da522d) (string . da522c) (sqrt . da522b) (sin . da522a) (round . da5229) (reverse . da5228) (real? . da5227) (real-valued? . da5226) (real-part . da5225) (rationalize . da5224) (rational? . da5223) (rational-valued? . da5222) (procedure? . da5221) (positive? . da5220) (pair? . da521f) (odd? . da521e) (numerator . da521d) (number? . da521c) (number->string . da521b) (null? . da521a) (not . da5219) (negative? . da5218) (nan? . da5217) (min . da5216) (max . da5215) (map . da5214) (make-vector . da5213) (make-string . da5212) (make-rectangular . da5211) (make-polar . da5210) (magnitude . da520f) (log . da520e) (list? . da520d) (list-tail . da520c) (list-ref . da520b) (list->vector . da520a) (list->string . da5209) (list . da5208) (length . da5207) (lcm . da5206) (integer? . da5205) (integer-valued? . da5204) (integer->char . da5203) (infinite? . da5202) (inexact? . da5201) (inexact . da5200) (imag-part . da51ff) (gcd . da51fe) (for-each . da51fd) (floor . da51fc) (finite? . da51fb) (expt . da51fa) (exp . da51f9) (exact? . da51f8) (exact-integer-sqrt . da51f7) (exact . da51f6) (even? . da51f5) (error . da51f4) (eqv? . da51f3) (equal? . da51f2) (eq? . da51f1) (dynamic-wind . da51f0) (div0-and-mod0 . da51ef) (mod0 . da51ee) (div0 . da51ed) (div-and-mod . da51ec) (mod . da51eb) (div . da51ea) (denominator . da51e9) (cos . da51e8) (cons . da51e7) (complex? . da51e6) (char? . da51e5) (char>? . da51e4) (char>=? . da51e3) (char=? . da51e2) (char<? . da51e1) (char<=? . da51e0) (char->integer . da51df) (ceiling . da51de) (call-with-values . da51dd) (call/cc . da51dc) (call-with-current-continuation . da51db) (cddddr . da51da) (cdddar . da51d9) (cddadr . da51d8) (cddaar . da51d7) (cdaddr . da51d6) (cdadar . da51d5) (cdaadr . da51d4) (cdaaar . da51d3) (cadddr . da51d2) (caddar . da51d1) (cadadr . da51d0) (cadaar . da51cf) (caaddr . da51ce) (caadar . da51cd) (caaadr . da51cc) (caaaar . da51cb) (cdddr . da51ca) (cddar . da51c9) (cdadr . da51c8) (cdaar . da51c7) (caddr . da51c6) (cadar . da51c5) (caadr . da51c4) (caaar . da51c3) (cddr . da51c2) (cdar . da51c1) (cadr . da51c0) (caar . da51bf) (cdr . da51be) (car . da51bd) (boolean? . da51bc) (boolean=? . da51bb) (atan . da51ba) (assertion-violation . da51b9) (assertion-error . da319f) (asin . da51b8) (apply . da51b7) (append . da51b6) (angle . da51b5) (acos . da51b4) (abs . da51b3) (/ . da51b2) (* . da51b1) (- . da51b0) (+ . da51af) (>= . da51ae) (> . da51ad) (= . da51ac) (<= . da51ab) (< . da51aa) (library . da51a9) (&no-nans . da51a8) (&no-infinities . da51a7) (&i/o-encoding . da51a6) (&i/o-decoding . da51a5) (&i/o-port . da51a4) (&i/o-file-does-not-exist . da51a3) (&i/o-file-already-exists . da51a2) (&i/o-file-is-read-only . da51a1) (&i/o-file-protection . da51a0) (&i/o-filename . da519f) (&i/o-invalid-position . da519e) (&i/o-write . da519d) (&i/o-read . da519c) (&i/o . da519b) (&undefined . da519a) (&syntax . da5199) (&lexical . da5198) (&implementation-restriction . da5197) (&non-continuable . da5196) (&who . da5195) (&irritants . da5194) (&assertion . da5193) (&violation . da5192) (&error . da5191) (&serious . da5190) (&warning . da518f) (&message . da518e) (&condition . da518d) (define-condition-type . da518c) (define-enumeration . da518b) (define-record-type . da518a) (parent-rtd . da5189) (nongenerative . da5188) (opaque . da5187) (sealed . da5186) (protocol . da5185) (parent . da5184) (immutable . da5183) (mutable . da5182) (fields . da5181) (error-handling-mode . da5180) (file-options . da517f) (buffer-mode . da517e) (eol-style . da517d) (guard . da517c) (trace-define . da517b) (trace-lambda . da517a) (unsyntax-splicing . da5179) (unsyntax . da5178) (unquote-splicing . da5177) (unquote . da5176) (_ . da5175) (else . da5174) (=> . da5173) (... . da5172) (assert . da5171) (endianness . da5170) (delay . da516f) (time . da516e) (do . da516d) (cond . da516c) (let* . da516b) (let*-values . da516a) (let-values . da5169) (identifier-syntax . da5168) (with-syntax . da5167) (quasisyntax . da5166) (quasiquote . da5165) (syntax-rules . da5164) (include . da5163) (define-struct . da5162) (record-constructor-descriptor . da5161) (record-type-descriptor . da5160) (case . da515f) (parameterize . da515e) (unless . da515d) (when . da515c) (or . da515b) (and . da515a) (if . da5159) (let . da5158) (letrec* . da5157) (letrec . da5156) (type-descriptor . da5155) (case-lambda . da5154) (lambda . da5153) (syntax . da5152) (syntax-case . da5151) (quote . da5150) (foreign-call . da514f) (letrec-syntax . da514e) (let-syntax . da514d) (set! . da514c) (import . da514b) (begin . da514a) (module . da5149) (define-syntax . da5148) (define . da5147)) '((da4ed4 core-prim . &no-nans-rcd) (da4ed2 core-prim . &no-nans-rtd) (da4ebf core-prim . &no-infinities-rcd) (da4ebd core-prim . &no-infinities-rtd) (da4eaa core-prim . &i/o-encoding-rcd) (da4ea8 core-prim . &i/o-encoding-rtd) (da4e8f core-prim . &i/o-decoding-rcd) (da4e8d core-prim . &i/o-decoding-rtd) (da4e7a core-prim . &i/o-port-rcd) (da4e78 core-prim . &i/o-port-rtd) (da4e5f core-prim . &i/o-file-does-not-exist-rcd) (da4e5d core-prim . &i/o-file-does-not-exist-rtd) (da4e4a core-prim . &i/o-file-already-exists-rcd) (da4e48 core-prim . &i/o-file-already-exists-rtd) (da4e35 core-prim . &i/o-file-is-read-only-rcd) (da4e33 core-prim . &i/o-file-is-read-only-rtd) (da4e20 core-prim . &i/o-file-protection-rcd) (da4e1e core-prim . &i/o-file-protection-rtd) (da4e0b core-prim . &i/o-filename-rcd) (da4e09 core-prim . &i/o-filename-rtd) (da4df0 core-prim . &i/o-invalid-position-rcd) (da4dee core-prim . &i/o-invalid-position-rtd) (da4dd5 core-prim . &i/o-write-rcd) (da4dd3 core-prim . &i/o-write-rtd) (da4dc0 core-prim . &i/o-read-rcd) (da4dbe core-prim . &i/o-read-rtd) (da4dab core-prim . &i/o-rcd) (da4da9 core-prim . &i/o-rtd) (da4d96 core-prim . &undefined-rcd) (da4d94 core-prim . &undefined-rtd) (da4d81 core-prim . &syntax-rcd) (da4d7f core-prim . &syntax-rtd) (da4d60 core-prim . &lexical-rcd) (da4d5e core-prim . &lexical-rtd) (da4d4b core-prim . &implementation-restriction-rcd) (da4d49 core-prim . &implementation-restriction-rtd) (da4d36 core-prim . &non-continuable-rcd) (da4d34 core-prim . &non-continuable-rtd) (da4d21 core-prim . &who-rcd) (da4d1f core-prim . &who-rtd) (da4d06 core-prim . &irritants-rcd) (da4d04 core-prim . &irritants-rtd) (da4ceb core-prim . &assertion-rcd) (da4ce9 core-prim . &assertion-rtd) (da4cd6 core-prim . &violation-rcd) (da4cd4 core-prim . &violation-rtd) (da4cc1 core-prim . &error-rcd) (da4cbf core-prim . &error-rtd) (da4cac core-prim . &serious-rcd) (da4caa core-prim . &serious-rtd) (da4c97 core-prim . &warning-rcd) (da4c95 core-prim . &warning-rtd) (da4c82 core-prim . &message-rcd) (da4c80 core-prim . &message-rtd) (da4c23 core-prim . &condition-rcd) (da4c21 core-prim . &condition-rtd) (da31a1 core-prim . syntax-error) (da30c5 core-prim . syntax-dispatch) (da546d core-prim . pretty-print) (da546c core-prim . eval-core) (da546b core-prim . set-symbol-value!) (da546a core-prim . symbol-value) (da5469 core-prim . gensym) (da5468 core-prim . void) (da4fe5 core-prim . load) (da31b3 core-prim . interaction-environment) (da5467 core-prim . char-ready?) (da5466 core-prim . regexp?) (da5465 core-prim . read-line) (da5464 core-prim . gensym-prefix-set!) (da5463 core-prim . ungensym) (da5462 core-prim . alist->eq-hash-table) (da5461 core-prim . assoc-ref) (da5460 core-prim . print) (da545f core-prim . format) (da545e core-prim . host-os) (da2afe core-prim . library-path) (da545d core-prim . standard-library-path) (da545c core-prim . file-newer?) (da545b core-prim . stat-mtime) (da545a core-prim . write-to-file) (da5459 core-prim . file->list) (da5458 core-prim . file->string) (da5457 core-prim . digit->integer) (da5456 core-prim . call-with-string-input-port) (da5455 core-prim . call-with-string-io) (da5454 core-prim . string-split) (da5453 core-prim . bytevector-for-each) (da5452 core-prim . string->regexp) (da5451 core-prim . rxmatch) (da5450 core-prim . regexp-replace-all) (da544f core-prim . hashtable-for-each) (da28e8 core-prim . mosh-cache-dir) (da544e core-prim . call-process) (da544d core-prim . local-tz-offset) (da544c core-prim . microseconds) (da544b core-prim . directory-list) (da544a core-prim . set-current-directory!) (da5449 core-prim . expand-path) (da5448 core-prim . current-directory) (da5447 core-prim . %spawn) (da5446 core-prim . %waitpid) (da5445 core-prim . simple-struct-name) (da5444 core-prim . simple-struct-set!) (da5443 core-prim . simple-struct-ref) (da5442 core-prim . make-simple-struct) (da5441 core-prim . simple-struct?) (da5440 core-prim . pointer-ref-c-int64) (da543f core-prim . pointer-ref-c-int32) (da543e core-prim . pointer-ref-c-int16) (da543d core-prim . pointer-ref-c-int8) (da543c core-prim . pointer-ref-c-uint64) (da543b core-prim . pointer-ref-c-uint32) (da543a core-prim . pointer-ref-c-uint16) (da5439 core-prim . pointer-ref-c-uint8) (da5438 core-prim . pointer-set-c-uint64!) (da5437 core-prim . pointer-set-c-uint32!) (da5436 core-prim . pointer-set-c-uint16!) (da5435 core-prim . pointer-set-c-uint8!) (da5434 core-prim . pointer-set-c-int64!) (da5433 core-prim . pointer-set-c-int32!) (da5432 core-prim . pointer-set-c-int16!) (da5431 core-prim . pointer-set-c-int8!) (da5430 core-prim . pointer-set-c-pointer!) (da542f core-prim . pointer-set-c-double!) (da542e core-prim . pointer-set-c-float!) (da542d core-prim . pointer-set-c-long-long!) (da542c core-prim . pointer-set-c-long!) (da542b core-prim . pointer-set-c-int!) (da542a core-prim . pointer-set-c-short!) (da5429 core-prim . pointer-set-c-char!) (da5428 core-prim . pointer-ref-c-pointer) (da5427 core-prim . pointer-ref-c-double) (da5426 core-prim . pointer-ref-c-float) (da5425 core-prim . pointer-ref-c-unsigned-long-long) (da5424 core-prim . pointer-ref-c-signed-long-long) (da5423 core-prim . pointer-ref-c-unsigned-long) (da5422 core-prim . pointer-ref-c-signed-long) (da5421 core-prim . pointer-ref-c-unsigned-int) (da5420 core-prim . pointer-ref-c-signed-int) (da541f core-prim . pointer-ref-c-unsigned-short) (da541e core-prim . pointer-ref-c-signed-short) (da541d core-prim . pointer-ref-c-unsigned-char) (da541c core-prim . pointer-ref-c-signed-char) (da541b core-prim . pointer->integer) (da541a core-prim . integer->pointer) (da5419 core-prim . pointer?) (da5418 core-prim . shared-errno) (da5417 core-prim . %ffi-free-c-callback-trampoline) (da5416 core-prim . %ffi-make-c-callback-trampoline) (da5415 core-prim . %ffi-free) (da5414 core-prim . %ffi-malloc) (da5413 core-prim . %ffi-supported?) (da5412 core-prim . %ffi-pointer->string) (da5411 core-prim . %ffi-call) (da5410 core-prim . %ffi-lookup) (da540f core-prim . %ffi-open) (da540e core-prim . null-terminated-utf8->string) (da540d core-prim . null-terminated-bytevector->string) (da540c core-prim . %fork) (da540b core-prim . %pipe) (da540a core-prim . p) (da5409 core-prim . open-output-string) (da5408 core-prim . get-output-string) (da5407 core-prim . file-stat-ctime) (da5406 core-prim . file-stat-atime) (da5405 core-prim . file-stat-mtime) (da5404 core-prim . file-size-in-bytes) (da5403 core-prim . file-writable?) (da5402 core-prim . file-executable?) (da5401 core-prim . file-readable?) (da5400 core-prim . file-regular?) (da53ff core-prim . file-symbolic-link?) (da53fe core-prim . file-directory?) (da53fd core-prim . create-symbolic-link) (da53fc core-prim . rename-file) (da53fb core-prim . delete-directory) (da53fa core-prim . create-directory) (da53f9 core-prim . create-mosh-cache-dir) (da53f8 core-prim . get-environment-variables) (da53f7 core-prim . current-exception-handler) (da53f6 core-prim . get-environment-variable) (da53f5 core-prim . join-wraps) (da53f4 core-prim . id->real-label) (da53f3 core-prim . same-marks?) (da53f2 core-prim . same-marks*?) (da53f1 core-prim . get-timeofday) (da53f0 core-prim . get-command-line) (da53ef core-prim . sys-display) (da53ee core-prim . whereis) (da53ed core-prim . register) (da53ec core-prim . vm-join!) (da53eb core-prim . vm-set-value!) (da53ea core-prim . vm?) (da53e9 core-prim . main-vm?) (da53e8 core-prim . vm-eval) (da53e7 core-prim . vm-self) (da53e6 core-prim . vm-start!) (da53e5 core-prim . make-vm) (da53e4 core-prim . mutex-try-lock!) (da53e3 core-prim . mutex-unlock!) (da53e2 core-prim . mutex-lock!) (da53e1 core-prim . mutex?) (da53e0 core-prim . make-mutex) (da53df core-prim . condition-variable-notify-all!) (da53de core-prim . condition-variable-notify!) (da53dd core-prim . condition-variable-wait!) (da53dc core-prim . make-condition-variable) (da53db core-prim . mosh-executable-path) (da53da core-prim . make-file-options) (da53d9 core-prim . source-info) (da53d8 core-prim . make-compiler-instruction) (da53d7 core-prim . make-instruction) (da53d6 core-prim . set-source-info!) (da53d5 core-prim . bignum?) (da53d4 core-prim . fast-equal?) (da53d3 core-prim . fasl-read) (da53d2 core-prim . fasl-write) (da53d1 core-prim . time-usage) (da53d0 core-prim . os-constant) (da53cf core-prim . disasm) (da28e6 core-prim . make-parameter) (da53ce core-prim . socket-port) (da53cd core-prim . socket-shutdown) (da53cc core-prim . socket-close) (da53cb core-prim . socket-send) (da53ca core-prim . socket-recv!) (da53c9 core-prim . socket-recv) (da53c8 core-prim . make-server-socket) (da53c7 core-prim . make-client-socket) (da53c6 core-prim . socket-accept) (da53c5 core-prim . socket?) (da53c4 core-prim . string-upcase) (da53c3 core-prim . string-titlecase) (da53c2 core-prim . string-normalize-nfkd) (da53c1 core-prim . string-normalize-nfkc) (da53c0 core-prim . string-normalize-nfd) (da53bf core-prim . string-normalize-nfc) (da53be core-prim . string-foldcase) (da53bd core-prim . string-downcase) (da53bc core-prim . string-ci>?) (da53bb core-prim . string-ci>=?) (da53ba core-prim . string-ci=?) (da53b9 core-prim . string-ci<?) (da53b8 core-prim . string-ci<=?) (da53b7 core-prim . char-whitespace?) (da53b6 core-prim . char-upper-case?) (da53b5 core-prim . char-title-case?) (da53b4 core-prim . char-numeric?) (da53b3 core-prim . char-lower-case?) (da53b2 core-prim . char-general-category) (da53b1 core-prim . char-upcase) (da53b0 core-prim . char-titlecase) (da53af core-prim . char-foldcase) (da53ae core-prim . char-downcase) (da53ad core-prim . char-ci>?) (da53ac core-prim . char-ci>=?) (da53ab core-prim . char-ci=?) (da53aa core-prim . char-ci<?) (da53a9 core-prim . char-ci<=?) (da53a8 core-prim . char-alphabetic?) (da2ef0 core-prim . make-variable-transformer) (da31a7 core-prim . identifier?) (da3193 core-prim . generate-temporaries) (da3195 core-prim . free-identifier=?) (da31ab core-prim . syntax->datum) (da31a9 core-prim . datum->syntax) (da3197 core-prim . bound-identifier=?) (da53a7 core-prim . record-type-descriptor?) (da53a6 core-prim . record-predicate) (da53a5 core-prim . record-mutator) (da53a4 core-prim . record-constructor) (da53a3 core-prim . record-accessor) (da53a2 core-prim . make-record-type-descriptor) (da53a1 core-prim . make-record-constructor-descriptor) (da53a0 core-prim . record?) (da539f core-prim . record-type-uid) (da539e core-prim . record-type-sealed?) (da539d core-prim . record-type-parent) (da539c core-prim . record-type-opaque?) (da539b core-prim . record-type-name) (da539a core-prim . record-type-generative?) (da5399 core-prim . record-type-field-names) (da5398 core-prim . record-rtd) (da5397 core-prim . record-field-mutable?) (da5396 core-prim . delete-file) (da5395 core-prim . file-exists?) (da5394 core-prim . vector-sort!) (da5393 core-prim . vector-sort) (da5392 core-prim . list-sort) (da5391 core-prim . symbol-hash) (da5390 core-prim . string-ci-hash) (da538f core-prim . string-hash) (da538e core-prim . equal-hash) (da538d core-prim . hashtable-equivalence-function) (da538c core-prim . make-hashtable) (da538b core-prim . hashtable-hash-function) (da538a core-prim . make-eqv-hashtable) (da5389 core-prim . make-eq-hashtable) (da5388 core-prim . hashtable?) (da5387 core-prim . hashtable-update!) (da5386 core-prim . hashtable-size) (da5385 core-prim . hashtable-set!) (da5384 core-prim . hashtable-ref) (da5383 core-prim . hashtable-mutable?) (da5382 core-prim . hashtable-keys) (da5381 core-prim . hashtable-entries) (da5380 core-prim . hashtable-delete!) (da537f core-prim . hashtable-copy) (da537e core-prim . hashtable-contains?) (da537d core-prim . hashtable-clear!) (da537c core-prim . call-with-output-file) (da537b core-prim . call-with-input-file) (da537a core-prim . write-char) (da5379 core-prim . write) (da5378 core-prim . with-output-to-file) (da5377 core-prim . with-input-from-file) (da5376 core-prim . read-char) (da5375 core-prim . read) (da5374 core-prim . peek-char) (da5373 core-prim . open-output-file) (da5372 core-prim . open-input-file) (da5371 core-prim . newline) (da5370 core-prim . display) (da536f core-prim . close-output-port) (da536e core-prim . close-input-port) (da536d core-prim . eof-object?) (da536c core-prim . eof-object) (da536b core-prim . current-error-port) (da536a core-prim . current-output-port) (da5369 core-prim . current-input-port) (da5368 core-prim . output-port?) (da5367 core-prim . input-port?) (da5366 core-prim . utf-8-codec) (da5365 core-prim . utf-16-codec) (da5364 core-prim . transcoder-error-handling-mode) (da5363 core-prim . transcoder-eol-style) (da5362 core-prim . transcoder-codec) (da5361 core-prim . transcoded-port) (da5360 core-prim . textual-port?) (da535f core-prim . string->bytevector) (da535e core-prim . standard-output-port) (da535d core-prim . standard-input-port) (da535c core-prim . standard-error-port) (da535b core-prim . set-port-position!) (da535a core-prim . put-u8) (da5359 core-prim . put-string) (da5358 core-prim . put-datum) (da5357 core-prim . put-char) (da5356 core-prim . put-bytevector) (da5355 core-prim . port?) (da5354 core-prim . port-transcoder) (da5353 core-prim . port-position) (da5352 core-prim . port-has-set-port-position!?) (da5351 core-prim . port-has-port-position?) (da5350 core-prim . port-eof?) (da534f core-prim . output-port-buffer-mode) (da534e core-prim . open-string-output-port) (da534d core-prim . open-string-input-port) (da534c core-prim . open-file-output-port) (da534b core-prim . open-file-input/output-port) (da534a core-prim . open-file-input-port) (da5349 core-prim . open-bytevector-output-port) (da5348 core-prim . open-bytevector-input-port) (da5347 core-prim . native-transcoder) (da5346 core-prim . native-eol-style) (da5345 core-prim . make-transcoder) (da5344 core-prim . latin-1-codec) (da4dcf core-prim . make-i/o-write-error) (da4dba core-prim . make-i/o-read-error) (da4e70 core-prim . make-i/o-port-error) (da4de6 core-prim . make-i/o-invalid-position-error) (da4e01 core-prim . make-i/o-filename-error) (da4e1a core-prim . make-i/o-file-protection-error) (da4e2f core-prim . make-i/o-file-is-read-only-error) (da4e59 core-prim . make-i/o-file-does-not-exist-error) (da4e44 core-prim . make-i/o-file-already-exists-error) (da4da5 core-prim . make-i/o-error) (da4ea0 core-prim . make-i/o-encoding-error) (da4e89 core-prim . make-i/o-decoding-error) (da5343 core-prim . make-custom-textual-output-port) (da5342 core-prim . make-custom-textual-input/output-port) (da5341 core-prim . make-custom-textual-input-port) (da5340 core-prim . make-custom-binary-output-port) (da533f core-prim . make-custom-binary-input/output-port) (da533e core-prim . make-custom-binary-input-port) (da533d core-prim . make-bytevector) (da533c core-prim . lookahead-u8) (da533b core-prim . lookahead-char) (da4dd1 core-prim . i/o-write-error?) (da4dbc core-prim . i/o-read-error?) (da4e74 core-prim . i/o-port-error?) (da4dea core-prim . i/o-invalid-position-error?) (da4e05 core-prim . i/o-filename-error?) (da4e1c core-prim . i/o-file-protection-error?) (da4e31 core-prim . i/o-file-is-read-only-error?) (da4e5b core-prim . i/o-file-does-not-exist-error?) (da4e46 core-prim . i/o-file-already-exists-error?) (da4da7 core-prim . i/o-error?) (da4dec core-prim . i/o-error-position) (da4e76 core-prim . i/o-error-port) (da4e07 core-prim . i/o-error-filename) (da4ea4 core-prim . i/o-encoding-error?) (da4ea6 core-prim . i/o-encoding-error-char) (da4e8b core-prim . i/o-decoding-error?) (da533a core-prim . get-u8) (da5339 core-prim . get-string-n!) (da5338 core-prim . get-string-n) (da5337 core-prim . get-string-all) (da5336 core-prim . get-line) (da5335 core-prim . get-datum) (da5334 core-prim . get-char) (da5333 core-prim . get-bytevector-some) (da5332 core-prim . get-bytevector-n!) (da5331 core-prim . get-bytevector-n) (da5330 core-prim . get-bytevector-all) (da532f core-prim . flush-output-port) (da532e core-prim . close-port) (da3181 core-prim . scheme-report-environment) (da532d core-prim . quotient) (da317f core-prim . null-environment) (da532c core-prim . remainder) (da532b core-prim . modulo) (da532a core-prim . inexact->exact) (da5329 core-prim . force) (da5328 core-prim . exact->inexact) (da5327 core-prim . make-promise) (da5326 core-prim . exit) (da4fdf core-prim . command-line) (da5325 core-prim . string-fill!) (da5324 core-prim . string-set!) (da5323 core-prim . set-cdr!) (da5322 core-prim . set-car!) (da5321 core-prim . remove) (da5320 core-prim . remv) (da531f core-prim . remp) (da531e core-prim . remq) (da531d core-prim . partition) (da531c core-prim . memv) (da531b core-prim . memq) (da531a core-prim . memp) (da5319 core-prim . member) (da5318 core-prim . exists) (da5317 core-prim . for-all) (da5316 core-prim . fold-right) (da5315 core-prim . fold-left) (da5314 core-prim . find) (da5313 core-prim . filter) (da5312 core-prim . cons*) (da5311 core-prim . assv) (da5310 core-prim . assq) (da530f core-prim . assp) (da530e core-prim . assoc) (da530d core-prim . call-with-string-output-port) (da530c core-prim . call-with-port) (da530b core-prim . call-with-bytevector-output-port) (da530a core-prim . bytevector->string) (da5309 core-prim . buffer-mode?) (da5308 core-prim . binary-port?) (da5307 core-prim . with-exception-handler) (da5306 core-prim . raise-continuable) (da5305 core-prim . raise) (da3185 core-prim . eval) (da317d core-prim . environment) (da5304 core-prim . make-enumeration) (da5303 core-prim . enum-set=?) (da5302 core-prim . enum-set-universe) (da5301 core-prim . enum-set-union) (da5300 core-prim . enum-set-subset?) (da52ff core-prim . enum-set-projection) (da52fe core-prim . enum-set-member?) (da52fd core-prim . enum-set-intersection) (da52fc core-prim . enum-set-indexer) (da52fb core-prim . enum-set-difference) (da52fa core-prim . enum-set-constructor) (da52f9 core-prim . enum-set-complement) (da52f8 core-prim . enum-set->list) (da4d1b core-prim . who-condition?) (da4c93 core-prim . warning?) (da4cd2 core-prim . violation?) (da4d92 core-prim . undefined-violation?) (da4d79 core-prim . syntax-violation?) (da4d7d core-prim . syntax-violation-subform) (da4d7b core-prim . syntax-violation-form) (da31a5 core-prim . syntax-violation) (da52f7 core-prim . simple-conditions) (da4ca8 core-prim . serious-condition?) (da4d32 core-prim . non-continuable-violation?) (da4c7c core-prim . message-condition?) (da4d17 core-prim . make-who-condition) (da4c91 core-prim . make-warning) (da4cd0 core-prim . make-violation) (da4d90 core-prim . make-undefined-violation) (da4d73 core-prim . make-syntax-violation) (da4ca6 core-prim . make-serious-condition) (da4d30 core-prim . make-non-continuable-violation) (da4c78 core-prim . make-message-condition) (da4d5a core-prim . make-lexical-violation) (da4cfc core-prim . make-irritants-condition) (da4d45 core-prim . make-implementation-restriction-violation) (da4cbb core-prim . make-error) (da4ce5 core-prim . make-assertion-violation) (da4d5c core-prim . lexical-violation?) (da4d00 core-prim . irritants-condition?) (da4d47 core-prim . implementation-restriction-violation?) (da4cbd core-prim . error?) (da4d1d core-prim . condition-who) (da52f6 core-prim . condition-predicate) (da4c7e core-prim . condition-message) (da4d02 core-prim . condition-irritants) (da52f5 core-prim . condition-accessor) (da52f4 core-prim . condition) (da4ce7 core-prim . assertion-violation?) (da52f3 core-prim . condition?) (da52f2 core-prim . utf32->string) (da52f1 core-prim . utf16->string) (da52f0 core-prim . utf8->string) (da52ef core-prim . uint-list->bytevector) (da52ee core-prim . u8-list->bytevector) (da52ed core-prim . string->utf8) (da52ec core-prim . string->utf32) (da52eb core-prim . string->utf16) (da52ea core-prim . sint-list->bytevector) (da52e9 core-prim . native-endianness) (da52e8 core-prim . bytevector?) (da52e7 core-prim . bytevector=?) (da52e6 core-prim . bytevector-uint-set!) (da52e5 core-prim . bytevector-uint-ref) (da52e4 core-prim . bytevector-u8-set!) (da52e3 core-prim . bytevector-u8-ref) (da52e2 core-prim . bytevector-u64-set!) (da52e1 core-prim . bytevector-u64-ref) (da52e0 core-prim . bytevector-u64-native-set!) (da52df core-prim . bytevector-u64-native-ref) (da52de core-prim . bytevector-u32-set!) (da52dd core-prim . bytevector-u32-ref) (da52dc core-prim . bytevector-u32-native-set!) (da52db core-prim . bytevector-u32-native-ref) (da52da core-prim . bytevector-u16-set!) (da52d9 core-prim . bytevector-u16-ref) (da52d8 core-prim . bytevector-u16-native-set!) (da52d7 core-prim . bytevector-u16-native-ref) (da52d6 core-prim . bytevector-sint-set!) (da52d5 core-prim . bytevector-sint-ref) (da52d4 core-prim . bytevector-s8-set!) (da52d3 core-prim . bytevector-s8-ref) (da52d2 core-prim . bytevector-s64-set!) (da52d1 core-prim . bytevector-s64-ref) (da52d0 core-prim . bytevector-s64-native-set!) (da52cf core-prim . bytevector-s64-native-ref) (da52ce core-prim . bytevector-s32-set!) (da52cd core-prim . bytevector-s32-ref) (da52cc core-prim . bytevector-s32-native-set!) (da52cb core-prim . bytevector-s32-native-ref) (da52ca core-prim . bytevector-s16-set!) (da52c9 core-prim . bytevector-s16-ref) (da52c8 core-prim . bytevector-s16-native-set!) (da52c7 core-prim . bytevector-s16-native-ref) (da52c6 core-prim . bytevector-length) (da52c5 core-prim . bytevector-ieee-single-ref) (da52c4 core-prim . bytevector-ieee-single-set!) (da52c3 core-prim . bytevector-ieee-single-native-set!) (da52c2 core-prim . bytevector-ieee-single-native-ref) (da52c1 core-prim . bytevector-ieee-double-set!) (da52c0 core-prim . bytevector-ieee-double-ref) (da52bf core-prim . bytevector-ieee-double-native-set!) (da52be core-prim . bytevector-ieee-double-native-ref) (da52bd core-prim . bytevector-fill!) (da52bc core-prim . bytevector-copy!) (da52bb core-prim . bytevector-copy) (da52ba core-prim . bytevector->uint-list) (da52b9 core-prim . bytevector->u8-list) (da52b8 core-prim . bytevector->sint-list) (da4ed0 core-prim . no-nans-violation?) (da4ebb core-prim . no-infinities-violation?) (da4ece core-prim . make-no-nans-violation) (da4eb9 core-prim . make-no-infinities-violation) (da52b7 core-prim . real->flonum) (da52b6 core-prim . flzero?) (da52b5 core-prim . fltruncate) (da52b4 core-prim . fltan) (da52b3 core-prim . flsqrt) (da52b2 core-prim . flsin) (da52b1 core-prim . flround) (da52b0 core-prim . flpositive?) (da52af core-prim . flonum?) (da52ae core-prim . flodd?) (da52ad core-prim . flnumerator) (da52ac core-prim . flnegative?) (da52ab core-prim . flnan?) (da52aa core-prim . flmod0) (da52a9 core-prim . flmod) (da52a8 core-prim . flmin) (da52a7 core-prim . flmax) (da52a6 core-prim . fllog) (da52a5 core-prim . flinteger?) (da52a4 core-prim . flinfinite?) (da52a3 core-prim . flfloor) (da52a2 core-prim . flfinite?) (da52a1 core-prim . flexpt) (da52a0 core-prim . flexp) (da529f core-prim . fleven?) (da529e core-prim . fldiv0-and-mod0) (da529d core-prim . fldiv0) (da529c core-prim . fldiv-and-mod) (da529b core-prim . fldiv) (da529a core-prim . fldenominator) (da5299 core-prim . flcos) (da5298 core-prim . flceiling) (da5297 core-prim . flatan) (da5296 core-prim . flasin) (da5295 core-prim . flacos) (da5294 core-prim . flabs) (da5293 core-prim . fl>?) (da5292 core-prim . fl>=?) (da5291 core-prim . fl=?) (da5290 core-prim . fl<?) (da528f core-prim . fl<=?) (da528e core-prim . fl/) (da528d core-prim . fl-) (da528c core-prim . fl+) (da528b core-prim . fl*) (da528a core-prim . fixnum->flonum) (da5289 core-prim . fxzero?) (da5288 core-prim . fxxor) (da5287 core-prim . fxrotate-bit-field) (da5286 core-prim . fxreverse-bit-field) (da5285 core-prim . fxpositive?) (da5284 core-prim . fxodd?) (da5283 core-prim . fxnot) (da5282 core-prim . fxnegative?) (da5281 core-prim . fxmod0) (da5280 core-prim . fxmod) (da527f core-prim . fxmin) (da527e core-prim . fxmax) (da527d core-prim . fxlength) (da527c core-prim . fxior) (da527b core-prim . fxif) (da527a core-prim . fxfirst-bit-set) (da5279 core-prim . fxeven?) (da5278 core-prim . fxdiv0-and-mod0) (da5277 core-prim . fxdiv0) (da5276 core-prim . fxdiv-and-mod) (da5275 core-prim . fxdiv) (da5274 core-prim . fxcopy-bit-field) (da5273 core-prim . fxcopy-bit) (da5272 core-prim . fxbit-set?) (da5271 core-prim . fxbit-field) (da5270 core-prim . fxbit-count) (da526f core-prim . fxarithmetic-shift-right) (da526e core-prim . fxarithmetic-shift-left) (da526d core-prim . fxarithmetic-shift) (da526c core-prim . fxand) (da526b core-prim . fx>?) (da526a core-prim . fx>=?) (da5269 core-prim . fx=?) (da5268 core-prim . fx<?) (da5267 core-prim . fx<=?) (da5266 core-prim . fx-/carry) (da5265 core-prim . fx-) (da5264 core-prim . fx+/carry) (da5263 core-prim . fx+) (da5262 core-prim . fx*/carry) (da5261 core-prim . fx*) (da5260 core-prim . greatest-fixnum) (da525f core-prim . least-fixnum) (da525e core-prim . fixnum-width) (da525d core-prim . fixnum?) (da525c core-prim . bitwise-rotate-bit-field) (da525b core-prim . bitwise-reverse-bit-field) (da525a core-prim . bitwise-length) (da5259 core-prim . bitwise-if) (da5258 core-prim . bitwise-first-bit-set) (da5257 core-prim . bitwise-copy-bit-field) (da5256 core-prim . bitwise-copy-bit) (da5255 core-prim . bitwise-bit-set?) (da5254 core-prim . bitwise-bit-field) (da5253 core-prim . bitwise-bit-count) (da5252 core-prim . bitwise-xor) (da5251 core-prim . bitwise-ior) (da5250 core-prim . bitwise-and) (da524f core-prim . bitwise-not) (da524e core-prim . bitwise-arithmetic-shift-right) (da524d core-prim . bitwise-arithmetic-shift-left) (da524c core-prim . bitwise-arithmetic-shift) (da524b core-prim . zero?) (da524a core-prim . vector?) (da5249 core-prim . vector-set!) (da5248 core-prim . vector-ref) (da5247 core-prim . vector-map) (da5246 core-prim . vector-length) (da5245 core-prim . vector-for-each) (da5244 core-prim . vector-fill!) (da5243 core-prim . vector->list) (da5242 core-prim . vector) (da5241 core-prim . values) (da5240 core-prim . truncate) (da523f core-prim . tan) (da523e core-prim . symbol?) (da523d core-prim . symbol=?) (da523c core-prim . symbol->string) (da523b core-prim . substring) (da523a core-prim . string?) (da5239 core-prim . string>?) (da5238 core-prim . string>=?) (da5237 core-prim . string=?) (da5236 core-prim . string<?) (da5235 core-prim . string<=?) (da5234 core-prim . string-ref) (da5233 core-prim . string-length) (da5232 core-prim . string-for-each) (da5231 core-prim . string-copy) (da5230 core-prim . string-append) (da522f core-prim . string->symbol) (da522e core-prim . string->number) (da522d core-prim . string->list) (da522c core-prim . string) (da522b core-prim . sqrt) (da522a core-prim . sin) (da5229 core-prim . round) (da5228 core-prim . reverse) (da5227 core-prim . real?) (da5226 core-prim . real-valued?) (da5225 core-prim . real-part) (da5224 core-prim . rationalize) (da5223 core-prim . rational?) (da5222 core-prim . rational-valued?) (da5221 core-prim . procedure?) (da5220 core-prim . positive?) (da521f core-prim . pair?) (da521e core-prim . odd?) (da521d core-prim . numerator) (da521c core-prim . number?) (da521b core-prim . number->string) (da521a core-prim . null?) (da5219 core-prim . not) (da5218 core-prim . negative?) (da5217 core-prim . nan?) (da5216 core-prim . min) (da5215 core-prim . max) (da5214 core-prim . map) (da5213 core-prim . make-vector) (da5212 core-prim . make-string) (da5211 core-prim . make-rectangular) (da5210 core-prim . make-polar) (da520f core-prim . magnitude) (da520e core-prim . log) (da520d core-prim . list?) (da520c core-prim . list-tail) (da520b core-prim . list-ref) (da520a core-prim . list->vector) (da5209 core-prim . list->string) (da5208 core-prim . list) (da5207 core-prim . length) (da5206 core-prim . lcm) (da5205 core-prim . integer?) (da5204 core-prim . integer-valued?) (da5203 core-prim . integer->char) (da5202 core-prim . infinite?) (da5201 core-prim . inexact?) (da5200 core-prim . inexact) (da51ff core-prim . imag-part) (da51fe core-prim . gcd) (da51fd core-prim . for-each) (da51fc core-prim . floor) (da51fb core-prim . finite?) (da51fa core-prim . expt) (da51f9 core-prim . exp) (da51f8 core-prim . exact?) (da51f7 core-prim . exact-integer-sqrt) (da51f6 core-prim . exact) (da51f5 core-prim . even?) (da51f4 core-prim . error) (da51f3 core-prim . eqv?) (da51f2 core-prim . equal?) (da51f1 core-prim . eq?) (da51f0 core-prim . dynamic-wind) (da51ef core-prim . div0-and-mod0) (da51ee core-prim . mod0) (da51ed core-prim . div0) (da51ec core-prim . div-and-mod) (da51eb core-prim . mod) (da51ea core-prim . div) (da51e9 core-prim . denominator) (da51e8 core-prim . cos) (da51e7 core-prim . cons) (da51e6 core-prim . complex?) (da51e5 core-prim . char?) (da51e4 core-prim . char>?) (da51e3 core-prim . char>=?) (da51e2 core-prim . char=?) (da51e1 core-prim . char<?) (da51e0 core-prim . char<=?) (da51df core-prim . char->integer) (da51de core-prim . ceiling) (da51dd core-prim . call-with-values) (da51dc core-prim . call/cc) (da51db core-prim . call-with-current-continuation) (da51da core-prim . cddddr) (da51d9 core-prim . cdddar) (da51d8 core-prim . cddadr) (da51d7 core-prim . cddaar) (da51d6 core-prim . cdaddr) (da51d5 core-prim . cdadar) (da51d4 core-prim . cdaadr) (da51d3 core-prim . cdaaar) (da51d2 core-prim . cadddr) (da51d1 core-prim . caddar) (da51d0 core-prim . cadadr) (da51cf core-prim . cadaar) (da51ce core-prim . caaddr) (da51cd core-prim . caadar) (da51cc core-prim . caaadr) (da51cb core-prim . caaaar) (da51ca core-prim . cdddr) (da51c9 core-prim . cddar) (da51c8 core-prim . cdadr) (da51c7 core-prim . cdaar) (da51c6 core-prim . caddr) (da51c5 core-prim . cadar) (da51c4 core-prim . caadr) (da51c3 core-prim . caaar) (da51c2 core-prim . cddr) (da51c1 core-prim . cdar) (da51c0 core-prim . cadr) (da51bf core-prim . caar) (da51be core-prim . cdr) (da51bd core-prim . car) (da51bc core-prim . boolean?) (da51bb core-prim . boolean=?) (da51ba core-prim . atan) (da51b9 core-prim . assertion-violation) (da319f core-prim . assertion-error) (da51b8 core-prim . asin) (da51b7 core-prim . apply) (da51b6 core-prim . append) (da51b5 core-prim . angle) (da51b4 core-prim . acos) (da51b3 core-prim . abs) (da51b2 core-prim . /) (da51b1 core-prim . *) (da51b0 core-prim . -) (da51af core-prim . +) (da51ae core-prim . >=) (da51ad core-prim . >) (da51ac core-prim . =) (da51ab core-prim . <=) (da51aa core-prim . <) (da51a9 core-prim . library) (da51a8 $core-rtd &no-nans-rtd &no-nans-rcd) (da51a7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (da51a6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (da51a5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (da51a4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (da51a3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (da51a2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (da51a1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (da51a0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (da519f $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (da519e $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (da519d $core-rtd &i/o-write-rtd &i/o-write-rcd) (da519c $core-rtd &i/o-read-rtd &i/o-read-rcd) (da519b $core-rtd &i/o-rtd &i/o-rcd) (da519a $core-rtd &undefined-rtd &undefined-rcd) (da5199 $core-rtd &syntax-rtd &syntax-rcd) (da5198 $core-rtd &lexical-rtd &lexical-rcd) (da5197 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (da5196 $core-rtd &non-continuable-rtd &non-continuable-rcd) (da5195 $core-rtd &who-rtd &who-rcd) (da5194 $core-rtd &irritants-rtd &irritants-rcd) (da5193 $core-rtd &assertion-rtd &assertion-rcd) (da5192 $core-rtd &violation-rtd &violation-rcd) (da5191 $core-rtd &error-rtd &error-rcd) (da5190 $core-rtd &serious-rtd &serious-rcd) (da518f $core-rtd &warning-rtd &warning-rcd) (da518e $core-rtd &message-rtd &message-rcd) (da518d $core-rtd &condition-rtd &condition-rcd) (da518c macro . define-condition-type) (da518b macro . define-enumeration) (da518a macro . define-record-type) (da5189 macro . parent-rtd) (da5188 macro . nongenerative) (da5187 macro . opaque) (da5186 macro . sealed) (da5185 macro . protocol) (da5184 macro . parent) (da5183 macro . immutable) (da5182 macro . mutable) (da5181 macro . fields) (da5180 macro . error-handling-mode) (da517f macro . file-options) (da517e macro . buffer-mode) (da517d macro . eol-style) (da517c macro . guard) (da517b macro . trace-define) (da517a macro . trace-lambda) (da5179 macro . unsyntax-splicing) (da5178 macro . unsyntax) (da5177 macro . unquote-splicing) (da5176 macro . unquote) (da5175 macro . _) (da5174 macro . else) (da5173 macro . =>) (da5172 macro . ...) (da5171 macro . assert) (da5170 macro . endianness) (da516f macro . delay) (da516e macro . time) (da516d macro . do) (da516c macro . cond) (da516b macro . let*) (da516a macro . let*-values) (da5169 macro . let-values) (da5168 macro . identifier-syntax) (da5167 macro . with-syntax) (da5166 macro . quasisyntax) (da5165 macro . quasiquote) (da5164 macro . syntax-rules) (da5163 macro . include) (da5162 macro . define-struct) (da5161 core-macro . record-constructor-descriptor) (da5160 core-macro . record-type-descriptor) (da515f macro . case) (da515e macro . parameterize) (da515d macro . unless) (da515c macro . when) (da515b core-macro . or) (da515a core-macro . and) (da5159 core-macro . if) (da5158 core-macro . let) (da5157 core-macro . letrec*) (da5156 core-macro . letrec) (da5155 core-macro . type-descriptor) (da5154 core-macro . case-lambda) (da5153 core-macro . lambda) (da5152 core-macro . syntax) (da5151 core-macro . syntax-case) (da5150 core-macro . quote) (da514f core-macro . foreign-call) (da514e letrec-syntax) (da514d let-syntax) (da514c set!) (da514b import) (da514a begin) (da5149 module) (da5148 define-syntax) (da5147 define)) values values '#f '#f '#f '#f) (da2cd3@da2b1f@install-library 'da548e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . da546d) (eval-core . da546c) (set-symbol-value! . da546b) (symbol-value . da546a) (gensym . da5469) (void . da5468)) '() values values '#f '#f '#f '#f) (da2cd3@da2b1f@install-library 'da548f '(mosh) '() '() '() '() '((set-symbol-value! . da546b) (symbol-value . da546a) (regexp? . da5466) (read-line . da5465) (ungensym . da5463) (alist->eq-hash-table . da5462) (assoc-ref . da5461) (print . da5460) (format . da545f) (host-os . da545e) (library-path . da2afe) (standard-library-path . da545d) (file-newer? . da545c) (stat-mtime . da545b) (digit->integer . da5457) (call-with-string-input-port . da5456) (call-with-string-io . da5455) (string-split . da5454) (bytevector-for-each . da5453) (string->regexp . da5452) (rxmatch . da5451) (regexp-replace-all . da5450) (hashtable-for-each . da544f) (set-current-directory! . da544a) (expand-path . da5449) (current-directory . da5448) (p . da540a) (get-timeofday . da53f1) (get-command-line . da53f0) (sys-display . da53ef) (whereis . da53ee) (register . da53ed) (vm-join! . da53ec) (vm-set-value! . da53eb) (vm? . da53ea) (main-vm? . da53e9) (vm-eval . da53e8) (vm-self . da53e7) (vm-start! . da53e6) (make-vm . da53e5) (mutex-try-lock! . da53e4) (mutex-unlock! . da53e3) (mutex-lock! . da53e2) (mutex? . da53e1) (make-mutex . da53e0) (condition-variable-notify-all! . da53df) (condition-variable-notify! . da53de) (condition-variable-wait! . da53dd) (make-condition-variable . da53dc) (mosh-executable-path . da53db) (make-file-options . da53da) (source-info . da53d9) (make-compiler-instruction . da53d8) (make-instruction . da53d7) (set-source-info! . da53d6) (bignum? . da53d5) (fast-equal? . da53d4) (fasl-read . da53d3) (fasl-write . da53d2) (time-usage . da53d1) (os-constant . da53d0) (time . da516e) (include . da5163)) '() values values '#f '#f '#f '#f) (da2cd3@da2b1f@install-library 'da5490 '(system) '() '() '() '() '((gensym-prefix-set! . da5464) (write-to-file . da545a) (file->list . da5459) (file->string . da5458) (mosh-cache-dir . da28e8) (call-process . da544e) (local-tz-offset . da544d) (microseconds . da544c) (directory-list . da544b) (expand-path . da5449) (%spawn . da5447) (%waitpid . da5446) (simple-struct-name . da5445) (simple-struct-set! . da5444) (simple-struct-ref . da5443) (make-simple-struct . da5442) (simple-struct? . da5441) (pointer-ref-c-int64 . da5440) (pointer-ref-c-int32 . da543f) (pointer-ref-c-int16 . da543e) (pointer-ref-c-int8 . da543d) (pointer-ref-c-uint64 . da543c) (pointer-ref-c-uint32 . da543b) (pointer-ref-c-uint16 . da543a) (pointer-ref-c-uint8 . da5439) (pointer-set-c-uint64! . da5438) (pointer-set-c-uint32! . da5437) (pointer-set-c-uint16! . da5436) (pointer-set-c-uint8! . da5435) (pointer-set-c-int64! . da5434) (pointer-set-c-int32! . da5433) (pointer-set-c-int16! . da5432) (pointer-set-c-int8! . da5431) (pointer-set-c-pointer! . da5430) (pointer-set-c-double! . da542f) (pointer-set-c-float! . da542e) (pointer-set-c-long-long! . da542d) (pointer-set-c-long! . da542c) (pointer-set-c-int! . da542b) (pointer-set-c-short! . da542a) (pointer-set-c-char! . da5429) (pointer-ref-c-pointer . da5428) (pointer-ref-c-double . da5427) (pointer-ref-c-float . da5426) (pointer-ref-c-unsigned-long-long . da5425) (pointer-ref-c-signed-long-long . da5424) (pointer-ref-c-unsigned-long . da5423) (pointer-ref-c-signed-long . da5422) (pointer-ref-c-unsigned-int . da5421) (pointer-ref-c-signed-int . da5420) (pointer-ref-c-unsigned-short . da541f) (pointer-ref-c-signed-short . da541e) (pointer-ref-c-unsigned-char . da541d) (pointer-ref-c-signed-char . da541c) (pointer->integer . da541b) (integer->pointer . da541a) (pointer? . da5419) (shared-errno . da5418) (%ffi-free-c-callback-trampoline . da5417) (%ffi-make-c-callback-trampoline . da5416) (%ffi-free . da5415) (%ffi-malloc . da5414) (%ffi-supported? . da5413) (%ffi-pointer->string . da5412) (%ffi-call . da5411) (%ffi-lookup . da5410) (%ffi-open . da540f) (null-terminated-utf8->string . da540e) (null-terminated-bytevector->string . da540d) (%fork . da540c) (%pipe . da540b) (open-output-string . da5409) (get-output-string . da5408) (file-stat-ctime . da5407) (file-stat-atime . da5406) (file-stat-mtime . da5405) (file-size-in-bytes . da5404) (file-writable? . da5403) (file-executable? . da5402) (file-readable? . da5401) (file-regular? . da5400) (file-symbolic-link? . da53ff) (file-directory? . da53fe) (create-symbolic-link . da53fd) (rename-file . da53fc) (delete-directory . da53fb) (create-directory . da53fa) (create-mosh-cache-dir . da53f9) (get-environment-variables . da53f8) (current-exception-handler . da53f7) (get-environment-variable . da53f6) (join-wraps . da53f5) (id->real-label . da53f4) (same-marks? . da53f3) (same-marks*? . da53f2) (disasm . da53cf) (make-parameter . da28e6) (socket-port . da53ce) (socket-shutdown . da53cd) (socket-close . da53cc) (socket-send . da53cb) (socket-recv! . da53ca) (socket-recv . da53c9) (make-server-socket . da53c8) (make-client-socket . da53c7) (socket-accept . da53c6) (socket? . da53c5) (parameterize . da515e)) '() values values '#f '#f '#f '#f)))
(begin (set! da4fca@ref (unspecified)) (set! da4fcc@x* (unspecified)) (set! da4fce@add-library-path! (unspecified)) (set! da4fd0@parse-and-add-library-path (unspecified)) (set! da4fd2@for-each-with-index (unspecified)) (set! da4fd4@rpad (unspecified)) (set! da4fd6@condition-printer (unspecified)) (set! da4fd8@record->field-alist (unspecified)) (set! da4fda@map-with-index (unspecified)) (set! da4fdc@repl (unspecified)) (set! da4fde@trace-printer (unspecified)) (set! da4fe0@command-line (unspecified)) (set! da4fe2@local-library-path (unspecified)) (set! da4fe4@load/args (unspecified)) (set! da4fe6@load (unspecified)) (set! da4fe8@ironscheme-build (unspecified)) (set! da4fea@eval-top-level (unspecified)) (set! da4fec@compile-system-libraries (unspecified)) (set! da4fee@compile (unspecified)) (set! da4ff0@compile->closure (unspecified)) (set! da4ff2@pre-compile-r6rs-file (unspecified)) (set! da4ff4@load-r6rs-top-level (unspecified)) (set! da4ff6@load-r6rs-top-level-sexp (unspecified)) (set! da4ff8@prefix-inc (unspecified)) (set! da4ffa@prefix-inc! (unspecified)) (set! da4fca@ref (lambda (da5035@rtd da5036@i da5037@x) (let ((da503b@val ((record-accessor da5035@rtd da5036@i) da5037@x))) (if (symbol? da503b@val) (ungensym da503b@val) da503b@val)))) (set! da512d@da4fca@ref da4fca@ref) (set! da4fcc@x* '()) (set! da512e@da4fcc@x* da4fcc@x*) (set! da4fce@add-library-path! (lambda (da503d@path) (da2cc3@da2aff@library-path (append (da2cc3@da2aff@library-path) (list da503d@path))))) (set! da512f@da4fce@add-library-path! da4fce@add-library-path!) (set! da4fd0@parse-and-add-library-path (lambda (da503f@paths da5040@message) (let ((da5044@separator '#f)) (begin (set! da5044@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((da5045@t da503f@paths)) (if da5045@t ((lambda (da5047@paths) (for-each (lambda (da5049@path) (if (file-exists? da5049@path) (da4fce@add-library-path! (expand-path da5049@path)) (format (current-error-port) da5040@message da5049@path))) (string-split da5047@paths da5044@separator))) da5045@t) (void))))))) (set! da5130@da4fd0@parse-and-add-library-path da4fd0@parse-and-add-library-path) (set! da4fd2@for-each-with-index (lambda (da504b@proc da504c@lst) (letrec ((da504f@loop (lambda (da5051@i da5052@lst) (if (null? da5052@lst) (if '#f '#f (void)) (begin (da504b@proc da5051@i (car da5052@lst)) (da504f@loop (+ da5051@i '1) (cdr da5052@lst))))))) (da504f@loop '1 da504c@lst)))) (set! da5131@da4fd2@for-each-with-index da4fd2@for-each-with-index) (set! da4fd4@rpad (lambda (da5055@str da5056@pad da5057@n) (let ((da505b@rest (- da5057@n (string-length (format '"~a" da5055@str))))) (let da5061@loop ((da505d@rest da505b@rest) (da505e@ret (format '"~a" da5055@str))) (if (<= da505d@rest '0) da505e@ret (da5061@loop (- da505d@rest '1) (string-append da505e@ret da5056@pad))))))) (set! da5132@da4fd4@rpad da4fd4@rpad) (set! da4fd6@condition-printer (lambda (da5063@e da5064@port) (let ((da5068@max-condition-len '#f)) (begin (set! da5068@max-condition-len (apply max (map (lambda (da5079@c) (string-length (symbol->string (record-type-name (record-rtd da5079@c))))) (simple-conditions da5063@e)))) (begin (display '" Condition components:\n" da5064@port) (da4fd2@for-each-with-index (lambda (da5069@i da506a@x) (let ((da506d@rtd (record-rtd da506a@x)) (da506e@fields-alist (da4fd8@record->field-alist da506a@x))) (begin (format da5064@port '" ~d. ~a" da5069@i (da4fd4@rpad (symbol->string (record-type-name da506d@rtd)) '" " da5068@max-condition-len)) (if (null? da506e@fields-alist) (newline da5064@port) (void)) (let da5075@loop ((da5071@first '#t) (da5072@fields-alist da506e@fields-alist)) (if (null? da5072@fields-alist) '() (let ((da5077@field (car da5072@fields-alist))) (begin (if (not da5071@first) (display (da4fd4@rpad '"" '" " (+ '4 da5068@max-condition-len)) da5064@port) (void)) (display '"       " da5064@port) (display (car da5077@field) da5064@port) (display '": " da5064@port) (write (cdr da5077@field) da5064@port) (newline da5064@port) (da5075@loop '#f (cdr da5072@fields-alist))))))))) (simple-conditions da5063@e))))))) (set! da5133@da4fd6@condition-printer da4fd6@condition-printer) (set! da4fd8@record->field-alist (lambda (da507b@r) (let ((da507e@ref '#f)) (begin (set! da507e@ref (lambda (da5089@rtd da508a@i da508b@x) (let ((da508f@val ((record-accessor da5089@rtd da508a@i) da508b@x))) (if (symbol? da508f@val) (ungensym da508f@val) da508f@val)))) (let da5083@loop ((da507f@ret '()) (da5080@rtd (record-rtd da507b@r))) (if da5080@rtd (da5083@loop (append da507f@ret (da4fda@map-with-index (lambda (da5085@i da5086@field) (cons da5086@field (da507e@ref da5080@rtd da5085@i da507b@r))) (vector->list (record-type-field-names da5080@rtd)))) (record-type-parent da5080@rtd)) da507f@ret)))))) (set! da5134@da4fd8@record->field-alist da4fd8@record->field-alist) (set! da4fda@map-with-index (lambda (da5091@proc da5092@lst) (let da509b@loop ((da5095@i '0) (da5096@lst da5092@lst) (da5097@ret '())) (if (null? da5096@lst) (reverse da5097@ret) (da509b@loop (+ da5095@i '1) (cdr da5096@lst) (cons (da5091@proc da5095@i (car da5096@lst)) da5097@ret)))))) (set! da5135@da4fda@map-with-index da4fda@map-with-index) (set! da4fdc@repl (lambda da509d@x (let ((da50a0@rec '#f)) (begin (set! da50a0@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (da50a3@da50a1) (lambda () (with-exception-handler (lambda (da50a5@e) ((call/cc (lambda (da50a7@da50a2) (da50a3@da50a1 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? da50a5@e) (da4fd6@condition-printer da50a5@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" da50a5@e))) (da50a7@da50a2 (lambda () (raise-continuable da50a5@e)))))))))) (lambda () (let da50ad@loop ((da50a9@line (get-line (current-input-port))) (da50aa@accum '"")) (let ((da50b0@parentheses-ok? '#f) (da50b2@eval-string-print '#f)) (begin (set! da50b0@parentheses-ok? (lambda (da50b7@text) (let da50bf@loop ((da50b9@chars (string->list da50b7@text)) (da50ba@p0 '0) (da50bb@p1 '0)) (if (null? da50b9@chars) (= '0 da50ba@p0 da50bb@p1) (let ((da50c1@t (car da50b9@chars))) (if (memv da50c1@t '(#\()) (da50bf@loop (cdr da50b9@chars) (+ da50ba@p0 '1) da50bb@p1) (if (memv da50c1@t '(#\))) (da50bf@loop (cdr da50b9@chars) (- da50ba@p0 '1) da50bb@p1) (if (memv da50c1@t '(#\[)) (da50bf@loop (cdr da50b9@chars) da50ba@p0 (+ da50bb@p1 '1)) (if (memv da50c1@t '(#\])) (da50bf@loop (cdr da50b9@chars) da50ba@p0 (- da50bb@p1 '1)) (da50bf@loop (cdr da50b9@chars) da50ba@p0 da50bb@p1)))))))))) (set! da50b2@eval-string-print (lambda (da50b5@text) (if (not (or (string=? '"\n" da50b5@text) (= '0 (string-length da50b5@text)))) (write (da4fea@eval-top-level (call-with-port (open-string-input-port da50b5@text) read))) (void)))) (if (eof-object? da50a9@line) (begin (da50b2@eval-string-print da50aa@accum) (exit)) (let ((da50b3@current (string-append da50aa@accum da50a9@line))) (if (da50b0@parentheses-ok? da50b3@current) (da50b2@eval-string-print da50b3@current) (da50ad@loop (get-line (current-input-port)) da50b3@current))))))))))))) (newline) (da50a0@rec)))) (da50a0@rec))))) (set! da5136@da4fdc@repl da4fdc@repl) (set! da4fde@trace-printer (da2a09@da28e7@make-parameter write)) (set! da5137@da4fde@trace-printer da4fde@trace-printer) (set! da4fe0@command-line (da2a09@da28e7@make-parameter (get-command-line))) (set! da5138@da4fe0@command-line da4fe0@command-line) (set! da4fe2@local-library-path (lambda (da50c3@filename) (da2cc3@da2aff@library-path))) (set! da5139@da4fe2@local-library-path da4fe2@local-library-path) (set! da4fe4@load/args (lambda (da50c5@filename . da50c7@args) (begin (apply da4ff4@load-r6rs-top-level da50c5@filename 'load da50c7@args) (void)))) (set! da513a@da4fe4@load/args da4fe4@load/args) (set! da4fe6@load (lambda (da50c9@filename) (begin (apply da4ff4@load-r6rs-top-level da50c9@filename 'load (da4fe0@command-line)) (void)))) (set! da513b@da4fe6@load da4fe6@load) (set! da4fe8@ironscheme-build (lambda () (da4fe6@load '"ironscheme-buildscript.ss"))) (set! da513c@da4fe8@ironscheme-build da4fe8@ironscheme-build) (set! da4fea@eval-top-level (lambda (da50cb@x) (da4bf0@da3186@eval da50cb@x (da4c07@da31b4@interaction-environment)))) (set! da513d@da4fea@eval-top-level da4fea@eval-top-level) (set! da4fec@compile-system-libraries (lambda () (da4fea@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! da513e@da4fec@compile-system-libraries da4fec@compile-system-libraries) (set! da4fee@compile (lambda (da50cd@filename) (da4ff4@load-r6rs-top-level da50cd@filename 'compile))) (set! da513f@da4fee@compile da4fee@compile) (set! da4ff0@compile->closure (lambda (da50cf@filename) (da4ff4@load-r6rs-top-level da50cf@filename 'closure))) (set! da5140@da4ff0@compile->closure da4ff0@compile->closure) (set! da4ff2@pre-compile-r6rs-file (lambda (da50d1@filename) (da4ff4@load-r6rs-top-level da50d1@filename 'compile))) (set! da5141@da4ff2@pre-compile-r6rs-file da4ff2@pre-compile-r6rs-file) (set! da4ff4@load-r6rs-top-level (lambda (da50d3@filename da50d4@how . da50d7@args) (begin (da2cc3@da2aff@library-path (da4fe2@local-library-path da50d3@filename)) (let ((da50d9@x* (with-input-from-file da50d3@filename (lambda () (let da50db@f () (let ((da50dd@x (da29fb@da28cb@read-annotated))) (if (eof-object? da50dd@x) '() (cons da50dd@x (da50db@f))))))))) (let ((da50df@t da50d4@how)) (if (memv da50df@t '(closure)) (da4c06@da31b2@pre-compile-r6rs-top-level da50d9@x*) (if (memv da50df@t '(load)) (begin (da4fe0@command-line (cons da50d3@filename (car da50d7@args))) (da2a0a@da28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (da2a0a@da28e9@mosh-cache-dir) (gensym-prefix-set! (da4ffa@prefix-inc! (string-append (da2a0a@da28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (da50e1@file) ((call/cc (lambda (da50e5@da50e3) (lambda () (with-exception-handler (lambda (da50e7@c) ((call/cc (lambda (da50e9@da50e4) (da50e5@da50e3 (lambda () (if '#t '#t (da50e9@da50e4 (lambda () (raise-continuable da50e7@c)))))))))) (lambda () (delete-file (string-append (da2a0a@da28e9@mosh-cache-dir) '"/" da50e1@file))))))))) (directory-list (da2a0a@da28e9@mosh-cache-dir))) (void)) (let ((da50eb@compiled (da4c05@da31b0@compile-r6rs-top-level da50d9@x*))) (begin (if (and (da2a0a@da28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (da2cc7@da2b07@serialize-all da2a04@da28dd@serialize-library da2a60@da2a19@compile-core-expr) (void)) (da50eb@compiled)))) (if (memv da50df@t '(compile)) (begin (da4c05@da31b0@compile-r6rs-top-level da50d9@x*) (da2cc7@da2b07@serialize-all da2a04@da28dd@serialize-library da2a60@da2a19@compile-core-expr)) (if '#f '#f (void)))))))))) (set! da5142@da4ff4@load-r6rs-top-level da4ff4@load-r6rs-top-level) (set! da4ff6@load-r6rs-top-level-sexp (lambda (da50ed@import-spec da50ee@thunk) (let ((da50f9@da50f2 da2cc3@da2aff@library-path) (da50fa@da50f4 da2a0a@da28e9@mosh-cache-dir) (da50fb@da50f6 (da4fe2@local-library-path '"")) (da50fc@da50f8 (create-mosh-cache-dir))) (let ((da5101@swap (lambda () (begin (let ((da5103@t (da50f9@da50f2))) (begin (da50f9@da50f2 da50fb@da50f6) (set! da50fb@da50f6 da5103@t))) (let ((da5105@t (da50fa@da50f4))) (begin (da50fa@da50f4 da50fc@da50f8) (set! da50fc@da50f8 da5105@t))))))) (dynamic-wind da5101@swap (lambda () (begin (if (da2a0a@da28e9@mosh-cache-dir) (gensym-prefix-set! (da4ffa@prefix-inc! (string-append (da2a0a@da28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((da510b@da5108 da4fe0@command-line) (da510c@da510a '())) (let ((da510f@swap (lambda () (let ((da5111@t (da510b@da5108))) (begin (da510b@da5108 da510c@da510a) (set! da510c@da510a da5111@t)))))) (dynamic-wind da510f@swap (lambda () ((da4c05@da31b0@compile-r6rs-top-level (list (cons 'import da50ed@import-spec) (list da50ee@thunk))))) da510f@swap))))) da5101@swap))))) (set! da5143@da4ff6@load-r6rs-top-level-sexp da4ff6@load-r6rs-top-level-sexp) (set! da4ff8@prefix-inc (lambda (da5113@prefix-string) (let ((da5115@prefix (symbol->string da5113@prefix-string))) (let ((da5117@len (string-length da5115@prefix))) (let da511f@loop ((da5119@i (- da5117@len '1)) (da511a@carry? '#t) (da511b@accum '())) (if (< da5119@i '0) (string->symbol (list->string (if da511a@carry? (cons '#\a da511b@accum) da511b@accum))) (if da511a@carry? (let ((da5121@next-integer (+ '1 (char->integer (string-ref da5115@prefix da5119@i))))) (if (= da5121@next-integer '123) (da511f@loop (- da5119@i '1) '#f (cons '#\A da511b@accum)) (if (= da5121@next-integer '91) (da511f@loop (- da5119@i '1) '#t (cons '#\a da511b@accum)) (da511f@loop (- da5119@i '1) '#f (cons (integer->char da5121@next-integer) da511b@accum))))) (da511f@loop (- da5119@i '1) '#f (cons (string-ref da5115@prefix da5119@i) da511b@accum))))))))) (set! da5144@da4ff8@prefix-inc da4ff8@prefix-inc) (set! da4ffa@prefix-inc! (lambda (da5123@file) (begin (if (not (file-exists? da5123@file)) (call-with-output-file da5123@file (lambda (da5125@port) (write 'd da5125@port))) (void)) (let ((da5127@prefix (call-with-input-file da5123@file read))) (if (main-vm?) (let ((da5129@next-prefix (da4ff8@prefix-inc da5127@prefix))) (begin (call-with-port (open-file-output-port da5123@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (da512b@port) (write da5129@next-prefix da512b@port))) da5127@prefix)) da5127@prefix))))) (set! da5145@da4ffa@prefix-inc! da4ffa@prefix-inc!) (begin (da2cc8@da2b09@current-precompiled-library-loader da2a05@da28df@load-serialized-library) (set-symbol-value! 'load da4fe6@load) (set-symbol-value! 'pre-compile-r6rs-file da4ff2@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs da4fea@eval-top-level) (set-symbol-value! 'int-env-syms da4be7@da3174@interaction-environment-symbols) (set-symbol-value! 'expanded2core da2a5f@da2a17@expanded->core) (set-symbol-value! 'trace-printer da4fde@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (da4ffb@c) (condition (da4f27@da4d31@make-non-continuable-violation) (da4f1d@da4d18@make-who-condition 'raise) (da4ee1@da4c79@make-message-condition '"returned from non-continuable exception") (da4f13@da4cfd@make-irritants-condition (list da4ffb@c))))) (da4fd0@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (da4fd0@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (da4fce@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (da4fce@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (da4fce@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((da4ffd@prefix (lambda (da4fff@ext da5000@ls) (append (map (lambda (da5003@x) (string-append da4fff@ext da5003@x)) da5000@ls) da5000@ls)))) (da2cc4@da2b01@library-extensions (da4ffd@prefix '".mosh" (da2cc4@da2b01@library-extensions)))) (current-exception-handler (lambda (da5005@c) (begin (if (condition? da5005@c) (da4fd6@condition-printer da5005@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" da5005@c)) da5005@c))) (if ((call/cc (lambda (da5009@da5007) (lambda () (with-exception-handler (lambda (da500b@c) ((call/cc (lambda (da500d@da5008) (da5009@da5007 (lambda () (if '#t '#f (da500d@da5008 (lambda () (raise-continuable da500b@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (da4ff6@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (da4fe0@command-line)) (let ((da5017@da5010 da4fe0@command-line) (da5018@da5012 da2a0a@da28e9@mosh-cache-dir) (da5019@da5014 '()) (da501a@da5016 (create-mosh-cache-dir))) (let ((da501f@swap (lambda () (begin (let ((da5021@t (da5017@da5010))) (begin (da5017@da5010 da5019@da5014) (set! da5019@da5014 da5021@t))) (let ((da5023@t (da5018@da5012))) (begin (da5018@da5012 da501a@da5016) (set! da501a@da5016 da5023@t))))))) (dynamic-wind da501f@swap (lambda () (begin (if (da2a0a@da28e9@mosh-cache-dir) (gensym-prefix-set! (da4ffa@prefix-inc! (string-append (da2a0a@da28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (da4fdc@repl))) da501f@swap))) (begin (da2cc3@da2aff@library-path (da4fe2@local-library-path (car (da4fe0@command-line)))) (set! da4fcc@x* (with-input-from-file (car (da4fe0@command-line)) (lambda () (let da5025@f () (let ((da5027@x (da29fb@da28cb@read-annotated))) (if (eof-object? da5027@x) '() (cons da5027@x (da5025@f)))))))) (da4fe0@command-line (cons (car (da4fe0@command-line)) (cdr (da4fe0@command-line)))) (da2a0a@da28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (da2a0a@da28e9@mosh-cache-dir) (gensym-prefix-set! (da4ffa@prefix-inc! (string-append (da2a0a@da28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (da5029@file) ((call/cc (lambda (da502d@da502b) (lambda () (with-exception-handler (lambda (da502f@c) ((call/cc (lambda (da5031@da502c) (da502d@da502b (lambda () (if '#t '#t (da5031@da502c (lambda () (raise-continuable da502f@c)))))))))) (lambda () (delete-file (string-append (da2a0a@da28e9@mosh-cache-dir) '"/" da5029@file))))))))) (directory-list (da2a0a@da28e9@mosh-cache-dir))) (void)) (let ((da5033@compiled (da4c05@da31b0@compile-r6rs-top-level da4fcc@x*))) (begin (if (and (da2a0a@da28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (da2cc7@da2b07@serialize-all da2a04@da28dd@serialize-library da2a60@da2a19@compile-core-expr) (void)) (da5033@compiled))))))))
