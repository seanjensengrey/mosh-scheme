;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! h28c5@library-file-path->cache-path (unspecified)) (set! h28c7@read-annotated (unspecified)) (set! h28c9@annotation-stripped (unspecified)) (set! h28cb@annotation? (unspecified)) (set! h28cd@annotation-source (unspecified)) (set! h28cf@annotation-expression (unspecified)) (set! h28d1@scm->fasl (unspecified)) (set! h28d3@fasl-save (unspecified)) (set! h28d5@fasl-load (unspecified)) (set! h28d7@verbose? (unspecified)) (set! h28d9@serialize-library (unspecified)) (set! h28db@load-serialized-library (unspecified)) (set! h28dd@make-record-printer (unspecified)) (set! h28df@compile-core (unspecified)) (set! h28e1@read-library-source-file (unspecified)) (set! h28e3@make-parameter (unspecified)) (set! h28e5@mosh-cache-dir (unspecified)) (set! h297b@file-options-spec (unspecified)) (set! h28c5@library-file-path->cache-path (lambda (h297c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (h2982@h297f h2983@h2981) (let ((h2986@extract h2983@h2981) (h2987@p h2982@h297f)) (letrec* ((h298b@display-hex (lambda (h2994@n) (if (<= '0 h2994@n '9) (display h2994@n h2987@p) (display (integer->char (+ (char->integer '#\a) (- h2994@n '10))) h2987@p))))) (begin (let h298e@f ((h298c@ls (string-split h297c@x '#\/))) (if (not (null? h298c@ls)) (begin (display '"_" h2987@p) (for-each (lambda (h2990@c) (if (or (char<=? '#\a h2990@c '#\z) (char<=? '#\A h2990@c '#\Z) (char<=? '#\0 h2990@c '#\9) (memv h2990@c '(#\- #\. #\_ #\~))) (display h2990@c h2987@p) (begin (display '"%" h2987@p) (let ((h2992@n (char->integer h2990@c))) (begin (h298b@display-hex (quotient h2992@n '16)) (h298b@display-hex (remainder h2992@n '16))))))) (string->list (car h298c@ls))) (h298e@f (cdr h298c@ls))) (void))) (h2986@extract)))))))) (set! h29f6@h28c5@library-file-path->cache-path h28c5@library-file-path->cache-path) (set! h28c7@read-annotated read) (set! h29f7@h28c7@read-annotated h28c7@read-annotated) (set! h28c9@annotation-stripped (lambda (h2996@x) (h28cf@annotation-expression h2996@x))) (set! h29f8@h28c9@annotation-stripped h28c9@annotation-stripped) (set! h28cb@annotation? (lambda (h2998@x) (source-info h2998@x))) (set! h29f9@h28cb@annotation? h28cb@annotation?) (set! h28cd@annotation-source (lambda (h299a@x) (source-info h299a@x))) (set! h29fa@h28cd@annotation-source h28cd@annotation-source) (set! h28cf@annotation-expression (lambda (h299c@x) (if (pair? h299c@x) (cons (car h299c@x) (cdr h299c@x)) (if (procedure? h299c@x) (set-source-info! h299c@x '#f) h299c@x)))) (set! h29fb@h28cf@annotation-expression h28cf@annotation-expression) (set! h28d1@scm->fasl (lambda (h299e@filename) (string-append (h28e5@mosh-cache-dir) '"/" (h28c5@library-file-path->cache-path h299e@filename) '".mosh-fasl"))) (set! h29fc@h28d1@scm->fasl h28d1@scm->fasl) (set! h28d3@fasl-save (lambda (h29a0@filename h29a1@obj) (call-with-port (open-file-output-port h29a0@filename) (lambda (h29a4@port) ((symbol-value 'fasl-write!) h29a1@obj h29a4@port))))) (set! h29fd@h28d3@fasl-save h28d3@fasl-save) (set! h28d5@fasl-load (lambda (h29a6@filename) (call-with-port (open-file-input-port h29a6@filename) (symbol-value 'fasl-read!)))) (set! h29fe@h28d5@fasl-load h28d5@fasl-load) (set! h28d7@verbose? (symbol-value '%verbose)) (set! h29ff@h28d7@verbose? h28d7@verbose?) (set! h28d9@serialize-library (lambda (h29a8@filename h29a9@obj) (begin (if h28d7@verbose? (format (current-error-port) '"serialize-library ~a\n..." h29a8@filename) (void)) (let ((h29ac@expanded2core (symbol-value 'expanded2core))) (let ((h29ae@compile (symbol-value 'compile-w/o-halt))) (let ((h29b0@code h29a9@obj)) (let ((h29b2@pivot (cddddr (cddddr h29b0@code)))) (let ((h29b4@visit (h29ae@compile (h29ac@expanded2core (car h29b2@pivot))))) (begin (set-car! h29b2@pivot h29b4@visit) (let ((h29b6@pivot (cdr h29b2@pivot))) (let ((h29b8@invoke (h29ae@compile (h29ac@expanded2core (car h29b6@pivot))))) (set-car! h29b6@pivot h29b8@invoke))))))))) (let ((h29ba@fasl-file (h28d1@scm->fasl h29a8@filename))) (begin (if (file-exists? h29ba@fasl-file) (delete-file h29ba@fasl-file) (void)) ((call/cc (lambda (h29be@h29bc) (lambda () (with-exception-handler (lambda (h29c0@c) ((call/cc (lambda (h29c2@h29bd) (h29be@h29bc (lambda () (if '#t (begin (if h28d7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" h29a8@filename) (void)) (if (file-exists? h29ba@fasl-file) (delete-file h29ba@fasl-file) (void)) '#f) (h29c2@h29bd (lambda () (raise-continuable h29c0@c)))))))))) (lambda () (h28d3@fasl-save h29ba@fasl-file h29a9@obj)))))))))))) (set! h2a00@h28d9@serialize-library h28d9@serialize-library) (set! h28db@load-serialized-library (lambda (h29c4@filename h29c5@obj) (and (h28e5@mosh-cache-dir) (let ((h29c8@fasl-file (h28d1@scm->fasl h29c4@filename))) (if (and (file-exists? h29c8@fasl-file) ((symbol-value 'file-newer?) h29c8@fasl-file h29c4@filename)) (let ((h29ca@expanded2core (symbol-value 'expanded2core))) (let ((h29cc@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((h29ce@code (h28d5@fasl-load h29c8@fasl-file))) (let ((h29d0@pivot (cddddr (cddddr h29ce@code)))) (let ((h29d2@visit (car h29d0@pivot))) (let ((h29d4@visit-proc (lambda () (h29cc@eval-compiled-core h29d2@visit)))) (begin (set-car! h29d0@pivot h29d4@visit-proc) (let ((h29d6@pivot (cdr h29d0@pivot))) (let ((h29d8@invoke (car h29d6@pivot))) (begin (set-car! h29d6@pivot (lambda () (h29cc@eval-compiled-core h29d8@invoke))) (apply h29c5@obj h29ce@code))))))))))) '#f))))) (set! h2a01@h28db@load-serialized-library h28db@load-serialized-library) (set! h28dd@make-record-printer (lambda (h29da@name h29db@printer) (lambda h29de@x (begin (display '"record printer") (for-each display h29de@x))))) (set! h2a02@h28dd@make-record-printer h28dd@make-record-printer) (set! h28df@compile-core (lambda h29e0@x (apply error 'comile-core '"not implementated" h29e0@x))) (set! h2a03@h28df@compile-core h28df@compile-core) (set! h28e1@read-library-source-file (lambda (h29e2@file-name) (with-input-from-file h29e2@file-name h28c7@read-annotated))) (set! h2a04@h28e1@read-library-source-file h28e1@read-library-source-file) (set! h28e3@make-parameter (lambda h29f2 (let ((h29f3 (length h29f2))) (if (= h29f3 '1) (apply (lambda (h29e4@x) (h28e3@make-parameter h29e4@x (lambda (h29e6@x) h29e6@x))) h29f2) (if (= h29f3 '2) (apply (lambda (h29e8@x h29e9@fender) (let ((h29ec@x (h29e9@fender h29e8@x))) (lambda h29f0 (let ((h29f1 (length h29f0))) (if (= h29f1 '0) (apply (lambda () h29ec@x) h29f0) (if (= h29f1 '1) (apply (lambda (h29ee@v) (set! h29ec@x (h29e9@fender h29ee@v))) h29f0) (error 'apply '"invalid arg count"))))))) h29f2) (error 'apply '"invalid arg count")))))) (set! h2a05@h28e3@make-parameter h28e3@make-parameter) (set! h28e5@mosh-cache-dir (h28e3@make-parameter '#f)) (set! h2a06@h28e5@mosh-cache-dir h28e5@mosh-cache-dir) (set! h297b@file-options-spec (lambda (h29f4@x) h29f4@x)) (set! h2a07@h297b@file-options-spec h297b@file-options-spec) (void))
(begin (set! h2a0d@current-primitive-locations (unspecified)) (set! h2a0f@mutable? (unspecified)) (set! h2a11@rewriter (unspecified)) (set! h2a13@expanded->core (unspecified)) (set! h2a15@compile-core-expr (unspecified)) (set! h2a17@pretty-print (unspecified)) (set! h2a19@compile-core-expr-to-port (unspecified)) (set! h2a0d@current-primitive-locations (h2a05@h28e3@make-parameter (lambda (h2a1a@x) '#f) (lambda (h2a1c@p) h2a1c@p))) (set! h2a58@h2a0d@current-primitive-locations h2a0d@current-primitive-locations) (set! h2a0f@mutable? (lambda (h2a1e@x) (or (pair? h2a1e@x) (vector? h2a1e@x) (hashtable? h2a1e@x)))) (set! h2a59@h2a0f@mutable? h2a0f@mutable?) (set! h2a11@rewriter (lambda (h2a20@quote-hack?) (letrec* ((h2a23@f (lambda (h2a24@x) (if (pair? h2a24@x) (let ((h2a26@t (car h2a24@x))) (if (memv h2a26@t '(quote)) (if (and h2a20@quote-hack? (h2a0f@mutable? (cadr h2a24@x))) (let ((h2a28@g (gensym))) (begin (set-symbol-value! h2a28@g (cadr h2a24@x)) h2a28@g)) h2a24@x) (if (memv h2a26@t '(case-lambda)) (cons 'case-lambda (map (lambda (h2a2a@x) (cons (car h2a2a@x) (map h2a23@f (cdr h2a2a@x)))) (cdr h2a24@x))) (if (memv h2a26@t '(lambda)) (cons* 'lambda (cadr h2a24@x) (map h2a23@f (cddr h2a24@x))) (if (memv h2a26@t '(letrec)) (let ((h2a2c@bindings (cadr h2a24@x)) (h2a2d@body* (cddr h2a24@x))) (let ((h2a30@lhs* (map car h2a2c@bindings)) (h2a31@rhs* (map cadr h2a2c@bindings))) (cons* 'letrec (map list h2a30@lhs* (map h2a23@f h2a31@rhs*)) (map h2a23@f h2a2d@body*)))) (if (memv h2a26@t '(letrec*)) (let ((h2a34@bindings (cadr h2a24@x)) (h2a35@body* (cddr h2a24@x))) (let ((h2a38@lhs* (map car h2a34@bindings)) (h2a39@rhs* (map cadr h2a34@bindings))) (cons* 'letrec* (map list h2a38@lhs* (map h2a23@f h2a39@rhs*)) (map h2a23@f h2a35@body*)))) (if (memv h2a26@t '(library-letrec*)) (let ((h2a3c@name (cadr h2a24@x)) (h2a3d@x (cdr h2a24@x))) (let ((h2a40@bindings (cadr h2a3d@x)) (h2a41@body* (cddr h2a3d@x))) (let ((h2a44@lhs* (map car h2a40@bindings)) (h2a45@lhs** (map cadr h2a40@bindings)) (h2a46@rhs* (map caddr h2a40@bindings))) (cons* 'library-letrec* h2a3c@name (map list h2a44@lhs* h2a45@lhs** (map h2a23@f h2a46@rhs*)) (map h2a23@f h2a41@body*))))) (if (memv h2a26@t '(begin)) (cons 'begin (map h2a23@f (cdr h2a24@x))) (if (memv h2a26@t '(set!)) (list 'set! (cadr h2a24@x) (h2a23@f (caddr h2a24@x))) (if (memv h2a26@t '(primitive)) (let ((h2a4a@op (cadr h2a24@x))) (let ((h2a4c@t ((h2a0d@current-primitive-locations) h2a4a@op))) (if h2a4c@t ((lambda (h2a4e@loc) h2a4e@loc) h2a4c@t) h2a4a@op))) (if (memv h2a26@t '(define)) h2a24@x (if (list? h2a24@x) (map h2a23@f h2a24@x) (error 'rewrite '"invalid form ~s ~s" h2a24@x (list? h2a24@x)))))))))))))) h2a24@x)))) h2a23@f))) (set! h2a5a@h2a11@rewriter h2a11@rewriter) (set! h2a13@expanded->core (lambda (h2a50@x) ((h2a11@rewriter '#f) h2a50@x))) (set! h2a5b@h2a13@expanded->core h2a13@expanded->core) (set! h2a15@compile-core-expr (lambda (h2a52@x) ((h2a11@rewriter '#f) h2a52@x))) (set! h2a5c@h2a15@compile-core-expr h2a15@compile-core-expr) (set! h2a17@pretty-print write) (set! h2a5d@h2a17@pretty-print h2a17@pretty-print) (set! h2a19@compile-core-expr-to-port (lambda (h2a54@x h2a55@p) (h2a17@pretty-print ((h2a11@rewriter '#f) h2a54@x) h2a55@p))) (set! h2a5e@h2a19@compile-core-expr-to-port h2a19@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! h2aad@make-collection (unspecified)) (set! h2aaf@current-library-collection (unspecified)) (set! h2ab1@rp (unspecified)) (set! h2abb@library? (unspecified)) (set! h2abd@library-id (unspecified)) (set! h2abf@set-library-id! (unspecified)) (set! h2ac1@library-name (unspecified)) (set! h2ac3@set-library-name! (unspecified)) (set! h2ac5@library-version (unspecified)) (set! h2ac7@set-library-version! (unspecified)) (set! h2ac9@library-imp* (unspecified)) (set! h2acb@set-library-imp*! (unspecified)) (set! h2acd@library-vis* (unspecified)) (set! h2acf@set-library-vis*! (unspecified)) (set! h2ad1@library-inv* (unspecified)) (set! h2ad3@set-library-inv*! (unspecified)) (set! h2ad5@library-subst (unspecified)) (set! h2ad7@set-library-subst! (unspecified)) (set! h2ad9@library-env (unspecified)) (set! h2adb@set-library-env! (unspecified)) (set! h2add@library-visit-state (unspecified)) (set! h2adf@set-library-visit-state! (unspecified)) (set! h2ae1@library-invoke-state (unspecified)) (set! h2ae3@set-library-invoke-state! (unspecified)) (set! h2ae5@library-visit-code (unspecified)) (set! h2ae7@set-library-visit-code! (unspecified)) (set! h2ae9@library-invoke-code (unspecified)) (set! h2aeb@set-library-invoke-code! (unspecified)) (set! h2aed@library-visible? (unspecified)) (set! h2aef@set-library-visible?! (unspecified)) (set! h2af1@library-source-file-name (unspecified)) (set! h2af3@set-library-source-file-name! (unspecified)) (set! h2af5@dummy (unspecified)) (set! h2af7@find-dependencies (unspecified)) (set! h2af9@find-library-by (unspecified)) (set! h2afb@library-path (unspecified)) (set! h2afd@library-extensions (unspecified)) (set! h2aff@library-name->file-name (unspecified)) (set! h2b01@file-locator (unspecified)) (set! h2b03@serialize-all (unspecified)) (set! h2b05@current-precompiled-library-loader (unspecified)) (set! h2b07@try-load-from-file (unspecified)) (set! h2b09@library-loader (unspecified)) (set! h2b0b@current-library-expander (unspecified)) (set! h2b0d@external-pending-libraries (unspecified)) (set! h2b0f@find-external-library (unspecified)) (set! h2b11@find-library-by-name (unspecified)) (set! h2b13@library-exists? (unspecified)) (set! h2b15@find-library-by-spec/die (unspecified)) (set! h2b17@label->binding-table (unspecified)) (set! h2b19@install-library-record (unspecified)) (set! h2b1b@install-library (unspecified)) (set! h2b1d@imported-label->binding (unspecified)) (set! h2b1f@invoke-library (unspecified)) (set! h2b21@visit-library (unspecified)) (set! h2b23@invoke-library-by-spec (unspecified)) (set! h2b25@installed-libraries (unspecified)) (set! h2b27@library-spec (unspecified)) (set! h2aad@make-collection (lambda () (let ((h2b28@set '())) (letrec* ((h2b2b@set-cons (lambda (h2b30@x h2b31@ls) (if (memq h2b30@x h2b31@ls) h2b31@ls (cons h2b30@x h2b31@ls))))) (lambda h2b2e (let ((h2b2f (length h2b2e))) (if (= h2b2f '0) (apply (lambda () h2b28@set) h2b2e) (if (= h2b2f '1) (apply (lambda (h2b2c@x) (set! h2b28@set (h2b2b@set-cons h2b2c@x h2b28@set))) h2b2e) (error 'apply '"invalid arg count"))))))))) (set! h2c9c@h2aad@make-collection h2aad@make-collection) (set! h2aaf@current-library-collection (h2a05@h28e3@make-parameter (h2aad@make-collection) (lambda (h2b34@x) (begin (if (not (procedure? h2b34@x)) (assertion-violation 'current-library-collection '"not a procedure" h2b34@x) (void)) h2b34@x)))) (set! h2c9d@h2aaf@current-library-collection h2aaf@current-library-collection) (set! h2ab1@rp (h2a02@h28dd@make-record-printer 'library (lambda (h2b36@x h2b37@p h2b38@wr) (begin (if (not (h2abb@library? h2b36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (h2ac5@library-version h2b36@x)) (h2ac1@library-name h2b36@x) (append (h2ac1@library-name h2b36@x) (list (h2ac5@library-version h2b36@x))))) h2b37@p))))) (set! h2c9e@h2ab1@rp h2ab1@rp) (set! h2abb@library? (lambda (h2b3c@x) (and (simple-struct? h2b3c@x) (eq? (simple-struct-name h2b3c@x) 'library)))) (set! h2c9f@h2abb@library? h2abb@library?) (set! h2abd@library-id (lambda (h2b3e@x) (simple-struct-ref h2b3e@x '0))) (set! h2ca0@h2abd@library-id h2abd@library-id) (set! h2abf@set-library-id! (lambda (h2b40@x h2b41@val) (simple-struct-set! h2b40@x '0 h2b41@val))) (set! h2ca1@h2abf@set-library-id! h2abf@set-library-id!) (set! h2ac1@library-name (lambda (h2b44@x) (simple-struct-ref h2b44@x '1))) (set! h2ca2@h2ac1@library-name h2ac1@library-name) (set! h2ac3@set-library-name! (lambda (h2b46@x h2b47@val) (simple-struct-set! h2b46@x '1 h2b47@val))) (set! h2ca3@h2ac3@set-library-name! h2ac3@set-library-name!) (set! h2ac5@library-version (lambda (h2b4a@x) (simple-struct-ref h2b4a@x '2))) (set! h2ca4@h2ac5@library-version h2ac5@library-version) (set! h2ac7@set-library-version! (lambda (h2b4c@x h2b4d@val) (simple-struct-set! h2b4c@x '2 h2b4d@val))) (set! h2ca5@h2ac7@set-library-version! h2ac7@set-library-version!) (set! h2ac9@library-imp* (lambda (h2b50@x) (simple-struct-ref h2b50@x '3))) (set! h2ca6@h2ac9@library-imp* h2ac9@library-imp*) (set! h2acb@set-library-imp*! (lambda (h2b52@x h2b53@val) (simple-struct-set! h2b52@x '3 h2b53@val))) (set! h2ca7@h2acb@set-library-imp*! h2acb@set-library-imp*!) (set! h2acd@library-vis* (lambda (h2b56@x) (simple-struct-ref h2b56@x '4))) (set! h2ca8@h2acd@library-vis* h2acd@library-vis*) (set! h2acf@set-library-vis*! (lambda (h2b58@x h2b59@val) (simple-struct-set! h2b58@x '4 h2b59@val))) (set! h2ca9@h2acf@set-library-vis*! h2acf@set-library-vis*!) (set! h2ad1@library-inv* (lambda (h2b5c@x) (simple-struct-ref h2b5c@x '5))) (set! h2caa@h2ad1@library-inv* h2ad1@library-inv*) (set! h2ad3@set-library-inv*! (lambda (h2b5e@x h2b5f@val) (simple-struct-set! h2b5e@x '5 h2b5f@val))) (set! h2cab@h2ad3@set-library-inv*! h2ad3@set-library-inv*!) (set! h2ad5@library-subst (lambda (h2b62@x) (simple-struct-ref h2b62@x '6))) (set! h2cac@h2ad5@library-subst h2ad5@library-subst) (set! h2ad7@set-library-subst! (lambda (h2b64@x h2b65@val) (simple-struct-set! h2b64@x '6 h2b65@val))) (set! h2cad@h2ad7@set-library-subst! h2ad7@set-library-subst!) (set! h2ad9@library-env (lambda (h2b68@x) (simple-struct-ref h2b68@x '7))) (set! h2cae@h2ad9@library-env h2ad9@library-env) (set! h2adb@set-library-env! (lambda (h2b6a@x h2b6b@val) (simple-struct-set! h2b6a@x '7 h2b6b@val))) (set! h2caf@h2adb@set-library-env! h2adb@set-library-env!) (set! h2add@library-visit-state (lambda (h2b6e@x) (simple-struct-ref h2b6e@x '8))) (set! h2cb0@h2add@library-visit-state h2add@library-visit-state) (set! h2adf@set-library-visit-state! (lambda (h2b70@x h2b71@val) (simple-struct-set! h2b70@x '8 h2b71@val))) (set! h2cb1@h2adf@set-library-visit-state! h2adf@set-library-visit-state!) (set! h2ae1@library-invoke-state (lambda (h2b74@x) (simple-struct-ref h2b74@x '9))) (set! h2cb2@h2ae1@library-invoke-state h2ae1@library-invoke-state) (set! h2ae3@set-library-invoke-state! (lambda (h2b76@x h2b77@val) (simple-struct-set! h2b76@x '9 h2b77@val))) (set! h2cb3@h2ae3@set-library-invoke-state! h2ae3@set-library-invoke-state!) (set! h2ae5@library-visit-code (lambda (h2b7a@x) (simple-struct-ref h2b7a@x '10))) (set! h2cb4@h2ae5@library-visit-code h2ae5@library-visit-code) (set! h2ae7@set-library-visit-code! (lambda (h2b7c@x h2b7d@val) (simple-struct-set! h2b7c@x '10 h2b7d@val))) (set! h2cb5@h2ae7@set-library-visit-code! h2ae7@set-library-visit-code!) (set! h2ae9@library-invoke-code (lambda (h2b80@x) (simple-struct-ref h2b80@x '11))) (set! h2cb6@h2ae9@library-invoke-code h2ae9@library-invoke-code) (set! h2aeb@set-library-invoke-code! (lambda (h2b82@x h2b83@val) (simple-struct-set! h2b82@x '11 h2b83@val))) (set! h2cb7@h2aeb@set-library-invoke-code! h2aeb@set-library-invoke-code!) (set! h2aed@library-visible? (lambda (h2b86@x) (simple-struct-ref h2b86@x '12))) (set! h2cb8@h2aed@library-visible? h2aed@library-visible?) (set! h2aef@set-library-visible?! (lambda (h2b88@x h2b89@val) (simple-struct-set! h2b88@x '12 h2b89@val))) (set! h2cb9@h2aef@set-library-visible?! h2aef@set-library-visible?!) (set! h2af1@library-source-file-name (lambda (h2b8c@x) (simple-struct-ref h2b8c@x '13))) (set! h2cba@h2af1@library-source-file-name h2af1@library-source-file-name) (set! h2af3@set-library-source-file-name! (lambda (h2b8e@x h2b8f@val) (simple-struct-set! h2b8e@x '13 h2b8f@val))) (set! h2cbb@h2af3@set-library-source-file-name! h2af3@set-library-source-file-name!) (set! h2af5@dummy '3) (set! h2cbc@h2af5@dummy h2af5@dummy) (set! h2af7@find-dependencies (lambda (h2b92@ls) (if (null? h2b92@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! h2cbd@h2af7@find-dependencies h2af7@find-dependencies) (set! h2af9@find-library-by (lambda (h2b94@pred) (let h2b98@f ((h2b96@ls ((h2aaf@current-library-collection)))) (if (null? h2b96@ls) '#f (if (h2b94@pred (car h2b96@ls)) (car h2b96@ls) (h2b98@f (cdr h2b96@ls))))))) (set! h2cbe@h2af9@find-library-by h2af9@find-library-by) (set! h2afb@library-path (h2a05@h28e3@make-parameter '(".") (lambda (h2b9a@x) (if (and (list? h2b9a@x) (for-all string? h2b9a@x)) (map (lambda (h2b9c@x) h2b9c@x) h2b9a@x) (assertion-violation 'library-path '"not a list of strings" h2b9a@x))))) (set! h2cbf@h2afb@library-path h2afb@library-path) (set! h2afd@library-extensions (h2a05@h28e3@make-parameter '(".sls" ".ss" ".scm") (lambda (h2b9e@x) (if (and (list? h2b9e@x) (for-all string? h2b9e@x)) (map (lambda (h2ba0@x) h2ba0@x) h2b9e@x) (assertion-violation 'library-extensions '"not a list of strings" h2b9e@x))))) (set! h2cc0@h2afd@library-extensions h2afd@library-extensions) (set! h2aff@library-name->file-name (lambda (h2ba2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (h2ba8@h2ba5 h2ba9@h2ba7) (let ((h2bac@extract h2ba9@h2ba7) (h2bad@p h2ba8@h2ba5)) (letrec* ((h2bb1@display-hex (lambda (h2bba@n) (if (<= '0 h2bba@n '9) (display h2bba@n h2bad@p) (display (integer->char (+ (char->integer '#\a) (- h2bba@n '10))) h2bad@p))))) (begin (let h2bb4@f ((h2bb2@ls h2ba2@x)) (if (not (null? h2bb2@ls)) (begin (display '"/" h2bad@p) (for-each (lambda (h2bb6@c) (if (or (char<=? '#\a h2bb6@c '#\z) (char<=? '#\A h2bb6@c '#\Z) (char<=? '#\0 h2bb6@c '#\9) (memv h2bb6@c '(#\- #\. #\_ #\~))) (display h2bb6@c h2bad@p) (begin (display '"%" h2bad@p) (let ((h2bb8@n (char->integer h2bb6@c))) (begin (h2bb1@display-hex (quotient h2bb8@n '16)) (h2bb1@display-hex (remainder h2bb8@n '16))))))) (string->list (symbol->string (car h2bb2@ls)))) (h2bb4@f (cdr h2bb2@ls))) (void))) (h2bac@extract)))))))) (set! h2cc1@h2aff@library-name->file-name h2aff@library-name->file-name) (set! h2b01@file-locator (h2a05@h28e3@make-parameter (lambda (h2bbc@x) (let ((h2bbe@str (h2aff@library-name->file-name h2bbc@x))) (let h2bc6@f ((h2bc0@ls (h2afb@library-path)) (h2bc1@exts (h2afd@library-extensions)) (h2bc2@failed-list '())) (if (null? h2bc0@ls) (letrec* ((h2bd0@h2bcb (make-record-type-descriptor '&library-resolution &condition-rtd 'h2bce '#f '#f '#((immutable library) (immutable files)))) (h2bd2@h2bcd '#f) (h2bd4@h2bcc (make-record-constructor-descriptor h2bd0@h2bcb &condition-rcd h2bd2@h2bcd)) (h2bd7@h2bca (record-predicate h2bd0@h2bcb)) (h2bd9@make-library-resolution-condition (record-constructor h2bd4@h2bcc)) (h2bdb@h2bc8 (record-accessor h2bd0@h2bcb '0)) (h2bdd@h2bc9 (record-accessor h2bd0@h2bcb '1)) (h2bdf@library-resolution-condition? (condition-predicate h2bd0@h2bcb)) (h2be1@condition-library (condition-accessor h2bd0@h2bcb h2bdb@h2bc8)) (h2be3@condition-files (condition-accessor h2bd0@h2bcb h2bdd@h2bc9))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (h2bd9@make-library-resolution-condition h2bbc@x (reverse h2bc2@failed-list))))) (if (null? h2bc1@exts) (h2bc6@f (cdr h2bc0@ls) (h2afd@library-extensions) h2bc2@failed-list) (let ((h2be4@name (string-append (car h2bc0@ls) h2bbe@str (car h2bc1@exts)))) (if (file-exists? h2be4@name) h2be4@name (h2bc6@f h2bc0@ls (cdr h2bc1@exts) (cons h2be4@name h2bc2@failed-list))))))))) (lambda (h2be6@f) (if (procedure? h2be6@f) h2be6@f (assertion-violation 'file-locator '"not a procedure" h2be6@f))))) (set! h2cc2@h2b01@file-locator h2b01@file-locator) (set! h2b03@serialize-all (lambda (h2be8@serialize h2be9@compile) (letrec* ((h2bed@library-desc (lambda (h2bf0@x) (list (h2abd@library-id h2bf0@x) (h2ac1@library-name h2bf0@x))))) (for-each (lambda (h2bee@x) (if (h2af1@library-source-file-name h2bee@x) (h2be8@serialize (h2af1@library-source-file-name h2bee@x) (list (h2abd@library-id h2bee@x) (h2ac1@library-name h2bee@x) (h2ac5@library-version h2bee@x) (map h2bed@library-desc (h2ac9@library-imp* h2bee@x)) (map h2bed@library-desc (h2acd@library-vis* h2bee@x)) (map h2bed@library-desc (h2ad1@library-inv* h2bee@x)) (h2ad5@library-subst h2bee@x) (h2ad9@library-env h2bee@x) (h2be9@compile (h2ae5@library-visit-code h2bee@x)) (h2be9@compile (h2ae9@library-invoke-code h2bee@x)) (h2aed@library-visible? h2bee@x))) (void))) ((h2aaf@current-library-collection)))))) (set! h2cc3@h2b03@serialize-all h2b03@serialize-all) (set! h2b05@current-precompiled-library-loader (h2a05@h28e3@make-parameter (lambda (h2bf2@filename h2bf3@sk) '#f))) (set! h2cc4@h2b05@current-precompiled-library-loader h2b05@current-precompiled-library-loader) (set! h2b07@try-load-from-file (lambda (h2bf6@filename) ((h2b05@current-precompiled-library-loader) h2bf6@filename (lambda h2c1c (let ((h2c1d (length h2c1c))) (if (= h2c1d '11) (apply (lambda (h2bf8@id h2bf9@name h2bfa@ver h2bfb@imp* h2bfc@vis* h2bfd@inv* h2bfe@exp-subst h2bff@exp-env h2c00@visit-proc h2c01@invoke-proc h2c02@visible?) (let h2c10@f ((h2c0e@deps (append h2bfb@imp* h2bfc@vis* h2bfd@inv*))) (if (null? h2c0e@deps) (begin (h2b1b@install-library h2bf8@id h2bf9@name h2bfa@ver h2bfb@imp* h2bfc@vis* h2bfd@inv* h2bfe@exp-subst h2bff@exp-env h2c00@visit-proc h2c01@invoke-proc '#f '#f h2c02@visible? '#f) '#t) (let ((h2c12@d (car h2c0e@deps))) (let ((h2c14@label (car h2c12@d)) (h2c15@dname (cadr h2c12@d))) (let ((h2c18@l (h2b11@find-library-by-name h2c15@dname))) (if (and (h2abb@library? h2c18@l) (eq? h2c14@label (h2abd@library-id h2c18@l))) (h2c10@f (cdr h2c0e@deps)) (begin (if h29ff@h28d7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" h2bf9@name h2c15@dname h2bf6@filename h2c18@l h2c14@label (h2abd@library-id h2c18@l)) (void)) '#f)))))))) h2c1c) (if (>= h2c1d '0) (apply (lambda h2c1a@others '#f) h2c1c) (error 'apply '"invalid arg count")))))))) (set! h2cc5@h2b07@try-load-from-file h2b07@try-load-from-file) (set! h2b09@library-loader (h2a05@h28e3@make-parameter (lambda (h2c1e@x) (let ((h2c20@file-name ((h2b01@file-locator) h2c1e@x))) (if (not h2c20@file-name) (assertion-violation '#f '"cannot file library" h2c1e@x) (or (h2b07@try-load-from-file h2c20@file-name) ((h2b0b@current-library-expander) (h2a04@h28e1@read-library-source-file h2c20@file-name) h2c20@file-name (lambda (h2c22@name) (if (not (fast-equal? h2c22@name h2c1e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (h2c28@h2c25 h2c29@h2c27) (let ((h2c2c@e h2c29@h2c27) (h2c2d@p h2c28@h2c25)) (begin (display '"expected to find library " h2c2d@p) (write h2c1e@x h2c2d@p) (display '" in file " h2c2d@p) (display h2c20@file-name h2c2d@p) (display '", found " h2c2d@p) (write h2c22@name h2c2d@p) (display '" instead" h2c2d@p) (h2c2c@e)))))) (void)))))))) (lambda (h2c30@f) (if (procedure? h2c30@f) h2c30@f (assertion-violation 'library-locator '"not a procedure" h2c30@f))))) (set! h2cc6@h2b09@library-loader h2b09@library-loader) (set! h2b0b@current-library-expander (h2a05@h28e3@make-parameter (lambda (h2c32@x) (assertion-violation 'library-expander '"not initialized")) (lambda (h2c34@f) (if (procedure? h2c34@f) h2c34@f (assertion-violation 'library-expander '"not a procedure" h2c34@f))))) (set! h2cc7@h2b0b@current-library-expander h2b0b@current-library-expander) (set! h2b0d@external-pending-libraries (h2a05@h28e3@make-parameter '())) (set! h2cc8@h2b0d@external-pending-libraries h2b0d@external-pending-libraries) (set! h2b0f@find-external-library (lambda (h2c36@name) (begin (if (member h2c36@name (h2b0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" h2c36@name) (void)) (let ((h2c3c@h2c39 h2b0d@external-pending-libraries) (h2c3d@h2c3b (cons h2c36@name (h2b0d@external-pending-libraries)))) (let ((h2c40@swap (lambda () (let ((h2c42@t (h2c3c@h2c39))) (begin (h2c3c@h2c39 h2c3d@h2c3b) (set! h2c3d@h2c3b h2c42@t)))))) (dynamic-wind h2c40@swap (lambda () (begin ((h2b09@library-loader) h2c36@name) (or (h2af9@find-library-by (lambda (h2c44@x) (fast-equal? (h2ac1@library-name h2c44@x) h2c36@name))) (assertion-violation '#f '"handling external library did not yield the correct library" h2c36@name)))) h2c40@swap)))))) (set! h2cc9@h2b0f@find-external-library h2b0f@find-external-library) (set! h2b11@find-library-by-name (lambda (h2c46@name) (or (h2af9@find-library-by (lambda (h2c48@x) (fast-equal? (h2ac1@library-name h2c48@x) h2c46@name))) (h2b0f@find-external-library h2c46@name)))) (set! h2cca@h2b11@find-library-by-name h2b11@find-library-by-name) (set! h2b13@library-exists? (lambda (h2c4a@name) (and (h2af9@find-library-by (lambda (h2c4c@x) (fast-equal? (h2ac1@library-name h2c4c@x) h2c4a@name))) '#t))) (set! h2ccb@h2b13@library-exists? h2b13@library-exists?) (set! h2b15@find-library-by-spec/die (lambda (h2c4e@spec) (let ((h2c50@id (car h2c4e@spec))) (or (h2af9@find-library-by (lambda (h2c52@x) (eq? h2c50@id (h2abd@library-id h2c52@x)))) (assertion-violation '#f '"cannot find library with required spec" h2c4e@spec))))) (set! h2ccc@h2b15@find-library-by-spec/die h2b15@find-library-by-spec/die) (set! h2b17@label->binding-table (make-eq-hashtable)) (set! h2ccd@h2b17@label->binding-table h2b17@label->binding-table) (set! h2b19@install-library-record (lambda (h2c54@lib) (begin (let ((h2c56@exp-env (h2ad9@library-env h2c54@lib))) (for-each (lambda (h2c58@x) (let ((h2c5a@label (car h2c58@x)) (h2c5b@binding (cdr h2c58@x))) (let ((h2c5e@binding (let ((h2c60@t (car h2c5b@binding))) (if (memv h2c60@t '(global)) (cons 'global (cons h2c54@lib (cdr h2c5b@binding))) (if (memv h2c60@t '(global-macro)) (cons 'global-macro (cons h2c54@lib (cdr h2c5b@binding))) (if (memv h2c60@t '(global-macro!)) (cons 'global-macro! (cons h2c54@lib (cdr h2c5b@binding))) h2c5b@binding)))))) (begin (if (hashtable-ref h2b17@label->binding-table h2c5a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" h2c5a@label (hashtable-ref h2b17@label->binding-table h2c5a@label '#f) h2c5e@binding) (exit)) (void)) (hashtable-set! h2b17@label->binding-table h2c5a@label h2c5e@binding))))) h2c56@exp-env)) ((h2aaf@current-library-collection) h2c54@lib)))) (set! h2cce@h2b19@install-library-record h2b19@install-library-record) (set! h2b1b@install-library (lambda (h2c62@id h2c63@name h2c64@ver h2c65@imp* h2c66@vis* h2c67@inv* h2c68@exp-subst h2c69@exp-env h2c6a@visit-proc h2c6b@invoke-proc h2c6c@visit-code h2c6d@invoke-code h2c6e@visible? h2c6f@source-file-name) (let ((h2c7e@imp-lib* (map h2b15@find-library-by-spec/die h2c65@imp*)) (h2c7f@vis-lib* (map h2b15@find-library-by-spec/die h2c66@vis*)) (h2c80@inv-lib* (map h2b15@find-library-by-spec/die h2c67@inv*))) (begin (if (not (and (symbol? h2c62@id) (list? h2c63@name) (list? h2c64@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" h2c62@id h2c63@name h2c64@ver) (void)) (if (h2b13@library-exists? h2c63@name) (assertion-violation 'install-library '"library is already installed" h2c63@name) (void)) (let ((h2c84@lib (make-simple-struct 'library '15 (list h2c62@id h2c63@name h2c64@ver h2c7e@imp-lib* h2c7f@vis-lib* h2c80@inv-lib* h2c68@exp-subst h2c69@exp-env h2c6a@visit-proc h2c6b@invoke-proc h2c6c@visit-code h2c6d@invoke-code h2c6e@visible? h2c6f@source-file-name)))) (h2b19@install-library-record h2c84@lib)))))) (set! h2ccf@h2b1b@install-library h2b1b@install-library) (set! h2b1d@imported-label->binding (lambda (h2c86@lab) (hashtable-ref h2b17@label->binding-table h2c86@lab '#f))) (set! h2cd0@h2b1d@imported-label->binding h2b1d@imported-label->binding) (set! h2b1f@invoke-library (lambda (h2c88@lib) (let ((h2c8a@invoke (h2ae1@library-invoke-state h2c88@lib))) (if (procedure? h2c8a@invoke) (begin (h2ae3@set-library-invoke-state! h2c88@lib (lambda () (assertion-violation 'invoke '"circularity detected" h2c88@lib))) (for-each h2b1f@invoke-library (h2ad1@library-inv* h2c88@lib)) (h2ae3@set-library-invoke-state! h2c88@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" h2c88@lib))) (h2c8a@invoke) (h2ae3@set-library-invoke-state! h2c88@lib '#t)) (void))))) (set! h2cd1@h2b1f@invoke-library h2b1f@invoke-library) (set! h2b21@visit-library (lambda (h2c8c@lib) (let ((h2c8e@visit (h2add@library-visit-state h2c8c@lib))) (if (procedure? h2c8e@visit) (begin (h2adf@set-library-visit-state! h2c8c@lib (lambda () (assertion-violation 'visit '"circularity detected" h2c8c@lib))) (for-each h2b1f@invoke-library (h2acd@library-vis* h2c8c@lib)) (h2adf@set-library-visit-state! h2c8c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" h2c8c@lib))) (h2c8e@visit) (h2adf@set-library-visit-state! h2c8c@lib '#t)) (void))))) (set! h2cd2@h2b21@visit-library h2b21@visit-library) (set! h2b23@invoke-library-by-spec (lambda (h2c90@spec) (h2b1f@invoke-library (h2b15@find-library-by-spec/die h2c90@spec)))) (set! h2cd3@h2b23@invoke-library-by-spec h2b23@invoke-library-by-spec) (set! h2b25@installed-libraries (lambda h2c98 (let ((h2c99 (length h2c98))) (if (= h2c99 '1) (apply (lambda (h2c92@all?) (let h2c96@f ((h2c94@ls ((h2aaf@current-library-collection)))) (if (null? h2c94@ls) '() (if (or h2c92@all? (h2aed@library-visible? (car h2c94@ls))) (cons (car h2c94@ls) (h2c96@f (cdr h2c94@ls))) (h2c96@f (cdr h2c94@ls)))))) h2c98) (if (= h2c99 '0) (apply (lambda () (h2b25@installed-libraries '#f)) h2c98) (error 'apply '"invalid arg count")))))) (set! h2cd4@h2b25@installed-libraries h2b25@installed-libraries) (set! h2b27@library-spec (lambda (h2c9a@x) (begin (if (not (h2abb@library? h2c9a@x)) (assertion-violation 'library-spec '"not a library" h2c9a@x) (void)) (list (h2abd@library-id h2c9a@x) (h2ac1@library-name h2c9a@x) (h2ac5@library-version h2c9a@x))))) (set! h2cd5@h2b27@library-spec h2b27@library-spec) (void))
(begin (set! h2cd9@build-global-define (unspecified)) (set! h2d4a@build-lambda (unspecified)) (set! h2d4c@build-case-lambda (unspecified)) (set! h2d7a@build-sequence (unspecified)) (set! h2d7c@build-void (unspecified)) (set! h2d7e@build-letrec (unspecified)) (set! h2d80@build-let (unspecified)) (set! h2d82@build-named-let (unspecified)) (set! h2d84@build-letrec* (unspecified)) (set! h2d86@build-library-letrec* (unspecified)) (set! h2d88@build-receive (unspecified)) (set! h2cd9@build-global-define (lambda (h2d89@x) (h2d7c@build-void))) (set! h2e17@h2cd9@build-global-define h2cd9@build-global-define) (set! h2d4a@build-lambda (lambda (h2d8b@ae h2d8c@vars h2d8d@exp) (list 'lambda h2d8c@vars h2d8d@exp))) (set! h2e18@h2d4a@build-lambda h2d4a@build-lambda) (set! h2d4c@build-case-lambda (lambda (h2d91@ae h2d92@vars* h2d93@exp*) (letrec* ((h2d98@build-error (lambda (h2dcf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (h2d9a@build-pred (lambda (h2db7@ae h2db8@n h2db9@vars) (call-with-values (lambda () (let h2dc5@f ((h2dc1@vars h2db9@vars) (h2dc2@count '0)) (if (pair? h2dc1@vars) (h2dc5@f (cdr h2dc1@vars) (+ h2dc2@count '1)) (if (null? h2dc1@vars) (values h2dc2@count '=) (values h2dc2@count '>=))))) (lambda (h2dc7@h2dbe h2dc8@h2dc0) (let ((h2dcb@pred h2dc8@h2dc0) (h2dcc@count h2dc7@h2dbe)) (list (list 'primitive h2dcb@pred) h2db8@n (list 'quote h2dcc@count))))))) (h2d9c@build-apply (lambda (h2daf@ae h2db0@g h2db1@vars h2db2@exp) (list '(primitive apply) (h2d4a@build-lambda h2daf@ae h2db1@vars h2db2@exp) h2db0@g))) (h2d9e@expand-case-lambda (lambda (h2d9f@ae h2da0@vars h2da1@exp*) (let ((h2da5@g (gensym)) (h2da6@n (gensym))) (list 'lambda h2da5@g (h2d80@build-let h2d9f@ae (list h2da6@n) (list (list '(primitive length) h2da5@g)) (let h2dad@f ((h2da9@vars* h2d92@vars*) (h2daa@exp* h2da1@exp*)) (if (null? h2da9@vars*) (h2d98@build-error h2d9f@ae) (list 'if (h2d9a@build-pred h2d9f@ae h2da6@n (car h2da9@vars*)) (h2d9c@build-apply h2d9f@ae h2da5@g (car h2da9@vars*) (car h2daa@exp*)) (h2dad@f (cdr h2da9@vars*) (cdr h2daa@exp*))))))))))) (if (= (length h2d93@exp*) '1) (h2d4a@build-lambda h2d91@ae (car h2d92@vars*) (car h2d93@exp*)) (h2d9e@expand-case-lambda h2d91@ae h2d92@vars* h2d93@exp*))))) (set! h2e19@h2d4c@build-case-lambda h2d4c@build-case-lambda) (set! h2d7a@build-sequence (lambda (h2dd1@ae h2dd2@exps) (let h2dd7@loop ((h2dd5@exps h2dd2@exps)) (if (null? (cdr h2dd5@exps)) (car h2dd5@exps) (if (equal? (car h2dd5@exps) (h2d7c@build-void)) (h2dd7@loop (cdr h2dd5@exps)) (cons 'begin h2dd5@exps)))))) (set! h2e1a@h2d7a@build-sequence h2d7a@build-sequence) (set! h2d7c@build-void (lambda () '((primitive void)))) (set! h2e1b@h2d7c@build-void h2d7c@build-void) (set! h2d7e@build-letrec (lambda (h2dd9@ae h2dda@vars h2ddb@val-exps h2ddc@body-exp) (if (null? h2dda@vars) h2ddc@body-exp (list 'letrec (map list h2dda@vars h2ddb@val-exps) h2ddc@body-exp)))) (set! h2e1c@h2d7e@build-letrec h2d7e@build-letrec) (set! h2d80@build-let (lambda (h2de1@ae h2de2@vars h2de3@val-exps h2de4@body-exp) (if (null? h2de2@vars) h2de4@body-exp (list 'let (map list h2de2@vars h2de3@val-exps) h2de4@body-exp)))) (set! h2e1d@h2d80@build-let h2d80@build-let) (set! h2d82@build-named-let (lambda (h2de9@ae h2dea@name h2deb@vars h2dec@val-exps h2ded@body-exp) (list 'let h2dea@name (map list h2deb@vars h2dec@val-exps) h2ded@body-exp))) (set! h2e1e@h2d82@build-named-let h2d82@build-named-let) (set! h2d84@build-letrec* (lambda (h2df3@ae h2df4@vars h2df5@val-exps h2df6@body-exp) (if (null? h2df4@vars) h2df6@body-exp (list 'letrec* (map list h2df4@vars h2df5@val-exps) h2df6@body-exp)))) (set! h2e1f@h2d84@build-letrec* h2d84@build-letrec*) (set! h2d86@build-library-letrec* (lambda (h2dfb@ae h2dfc@name h2dfd@vars h2dfe@locs h2dff@val-exps h2e00@body-exp) (cons 'begin (append (map (lambda (h2e07@var) (cons 'set! (cons h2e07@var '((unspecified))))) h2dfd@vars) (append (apply append (map (lambda (h2e09@var h2e0a@loc h2e0b@val-exp) (list (list 'set! h2e09@var h2e0b@val-exp) (list 'set! h2e0a@loc h2e09@var))) h2dfd@vars h2dfe@locs h2dff@val-exps)) (list h2e00@body-exp)))))) (set! h2e20@h2d86@build-library-letrec* h2d86@build-library-letrec*) (set! h2d88@build-receive (lambda (h2e0f@ae h2e10@vars h2e11@producer h2e12@body*) (begin (display '"************** in ") (cons 'receive (cons h2e10@vars (cons h2e11@producer h2e12@body*)))))) (set! h2e21@h2d88@build-receive h2d88@build-receive) (void))
(begin (set! h2e30@file-options-macro (unspecified)) (set! h2e32@set-cons (unspecified)) (set! h2e34@set-union (unspecified)) (set! h2e39@top-mark* (unspecified)) (set! h2e3b@top-marked? (unspecified)) (set! h2e3d@gen-lexical (unspecified)) (set! h2e3f@gen-global (unspecified)) (set! h2e41@gen-label (unspecified)) (set! h2e43@gen-top-level-label (unspecified)) (set! h2e45@gen-define-label+loc (unspecified)) (set! h2e47@gen-define-label (unspecified)) (set! h2e51@rib? (unspecified)) (set! h2e53@rib-sym* (unspecified)) (set! h2e55@set-rib-sym*! (unspecified)) (set! h2e57@rib-mark** (unspecified)) (set! h2e59@set-rib-mark**! (unspecified)) (set! h2e5b@rib-label* (unspecified)) (set! h2e5d@set-rib-label*! (unspecified)) (set! h2e5f@rib-sealed/freq (unspecified)) (set! h2e61@set-rib-sealed/freq! (unspecified)) (set! h2e63@rib-cache (unspecified)) (set! h2e65@set-rib-cache! (unspecified)) (set! h2e67@dummy (unspecified)) (set! h2e69@make-empty-rib (unspecified)) (set! h2e6b@extend-rib! (unspecified)) (set! h2e6d@extend-rib/nc! (unspecified)) (set! h2e6f@make-rib-map (unspecified)) (set! h2e71@seal-rib! (unspecified)) (set! h2e73@unseal-rib! (unspecified)) (set! h2e75@make-full-rib (unspecified)) (set! h2e77@rp (unspecified)) (set! h2e81@stx? (unspecified)) (set! h2e83@stx-expr (unspecified)) (set! h2e85@set-stx-expr! (unspecified)) (set! h2e87@stx-mark* (unspecified)) (set! h2e89@set-stx-mark*! (unspecified)) (set! h2e8b@stx-subst* (unspecified)) (set! h2e8d@set-stx-subst*! (unspecified)) (set! h2e8f@stx-ae* (unspecified)) (set! h2e91@set-stx-ae*! (unspecified)) (set! h2e93@dummy (unspecified)) (set! h2e95@datum->stx (unspecified)) (set! h2e97@gen-mark (unspecified)) (set! h2e99@anti-mark (unspecified)) (set! h2e9b@anti-mark? (unspecified)) (set! h2e9d@mkstx (unspecified)) (set! h2e9f@add-mark (unspecified)) (set! h2ea1@add-subst (unspecified)) (set! h2ea3@syntax-kind? (unspecified)) (set! h2ea5@syntax-vector->list (unspecified)) (set! h2ea7@syntax-pair? (unspecified)) (set! h2ea9@syntax-vector? (unspecified)) (set! h2eab@syntax-null? (unspecified)) (set! h2ead@syntax-list? (unspecified)) (set! h2eaf@syntax-car (unspecified)) (set! h2eb1@syntax-cdr (unspecified)) (set! h2eb3@syntax->list (unspecified)) (set! h2eb5@id? (unspecified)) (set! h2eb7@id->sym (unspecified)) (set! h2eb9@bound-id=? (unspecified)) (set! h2ebb@free-id=? (unspecified)) (set! h2ebd@valid-bound-ids? (unspecified)) (set! h2ebf@distinct-bound-ids? (unspecified)) (set! h2ec1@bound-id-member? (unspecified)) (set! h2ec3@self-evaluating? (unspecified)) (set! h2ec5@strip-annotations (unspecified)) (set! h2ec7@strip (unspecified)) (set! h2ec9@stx->datum (unspecified)) (set! h2ecb@id->label (unspecified)) (set! h2ecd@label->binding (unspecified)) (set! h2ecf@make-binding (unspecified)) (set! h2ed1@binding-type (unspecified)) (set! h2ed3@binding-value (unspecified)) (set! h2ed5@raise-unbound-error (unspecified)) (set! h2ed7@syntax-type (unspecified)) (set! h2ee5@sanitize-binding (unspecified)) (set! h2ee7@make-variable-transformer (unspecified)) (set! h2ee9@variable-transformer? (unspecified)) (set! h2eeb@variable-transformer-procedure (unspecified)) (set! h2eed@make-eval-transformer (unspecified)) (set! h303e@parse-define (unspecified)) (set! h3040@parse-define-syntax (unspecified)) (set! h3042@scheme-stx-hashtable (unspecified)) (set! h3044@scheme-stx (unspecified)) (set! h3046@lexical-var (unspecified)) (set! h3048@lexical-mutable? (unspecified)) (set! h304a@set-lexical-mutable! (unspecified)) (set! h304c@add-lexical (unspecified)) (set! h304e@add-lexicals (unspecified)) (set! h3050@letrec-helper (unspecified)) (set! h3052@let-transformer (unspecified)) (set! h3054@letrec-transformer (unspecified)) (set! h3056@letrec*-transformer (unspecified)) (set! h3058@fluid-let-syntax-transformer (unspecified)) (set! h305a@type-descriptor-transformer (unspecified)) (set! h305c@record-type-descriptor-transformer (unspecified)) (set! h305e@record-constructor-descriptor-transformer (unspecified)) (set! h3060@when-macro (unspecified)) (set! h3062@unless-macro (unspecified)) (set! h3064@if-transformer (unspecified)) (set! h3066@and-transformer (unspecified)) (set! h3068@or-transformer (unspecified)) (set! h306a@case-macro (unspecified)) (set! h306c@quote-transformer (unspecified)) (set! h306e@case-lambda-transformer (unspecified)) (set! h3070@lambda-transformer (unspecified)) (set! h3072@bless (unspecified)) (set! h3074@with-syntax-macro (unspecified)) (set! h3076@invalid-fmls-error (unspecified)) (set! h3078@let-macro (unspecified)) (set! h307a@let-values-macro (unspecified)) (set! h307c@let*-values-macro (unspecified)) (set! h307e@trace-lambda-macro (unspecified)) (set! h3080@trace-define-macro (unspecified)) (set! h3082@trace-define-syntax-macro (unspecified)) (set! h3084@trace-let/rec-syntax (unspecified)) (set! h3086@trace-let-syntax-macro (unspecified)) (set! h3088@trace-letrec-syntax-macro (unspecified)) (set! h308a@guard-macro (unspecified)) (set! h308c@define-enumeration-macro (unspecified)) (set! h308e@time-macro (unspecified)) (set! h3090@delay-macro (unspecified)) (set! h3092@assert-macro (unspecified)) (set! h3094@endianness-macro (unspecified)) (set! h3096@identifier-syntax-macro (unspecified)) (set! h3098@do-macro (unspecified)) (set! h309a@let*-macro (unspecified)) (set! h309c@or-macro (unspecified)) (set! h309e@and-macro (unspecified)) (set! h30a0@cond-macro (unspecified)) (set! h30a2@do-include (unspecified)) (set! h30a4@include-macro (unspecified)) (set! h30a6@include-into-macro (unspecified)) (set! h30a8@syntax-rules-macro (unspecified)) (set! h30aa@quasiquote-macro (unspecified)) (set! h30ac@quasisyntax-macro (unspecified)) (set! h30ae@define-struct-macro (unspecified)) (set! h30b0@define-record-type-macro (unspecified)) (set! h30b2@define-condition-type-macro (unspecified)) (set! h30b4@incorrect-usage-macro (unspecified)) (set! h30b6@parameterize-macro (unspecified)) (set! h30b8@foreign-call-transformer (unspecified)) (set! h30ba@convert-pattern (unspecified)) (set! h30bc@syntax-dispatch (unspecified)) (set! h30be@ellipsis? (unspecified)) (set! h30c0@underscore? (unspecified)) (set! h30c2@verify-literals (unspecified)) (set! h30c4@syntax-case-transformer (unspecified)) (set! h30c6@ellipsis-map (unspecified)) (set! h30c8@syntax-transformer (unspecified)) (set! h30ca@core-macro-transformer (unspecified)) (set! h30cc@symbol-macro (unspecified)) (set! h30ce@macro-transformer (unspecified)) (set! h30d0@local-macro-transformer (unspecified)) (set! h30d2@do-macro-call (unspecified)) (set! h30d4@chi-macro (unspecified)) (set! h30d6@chi-local-macro (unspecified)) (set! h30d8@chi-global-macro (unspecified)) (set! h30da@chi-expr* (unspecified)) (set! h30dc@chi-application (unspecified)) (set! h30de@chi-expr (unspecified)) (set! h30e0@chi-set! (unspecified)) (set! h30e2@verify-formals (unspecified)) (set! h30e4@chi-lambda-clause (unspecified)) (set! h30e6@chi-lambda-clause* (unspecified)) (set! h30e8@chi-defun (unspecified)) (set! h30ea@chi-rhs (unspecified)) (set! h30ec@expand-interaction-rhs*/init* (unspecified)) (set! h30ee@chi-rhs* (unspecified)) (set! h30f0@find-bound=? (unspecified)) (set! h30f2@find-dups (unspecified)) (set! h30f4@chi-internal (unspecified)) (set! h30f6@parse-module (unspecified)) (set! h3100@module-interface? (unspecified)) (set! h3102@module-interface-first-mark (unspecified)) (set! h3104@set-module-interface-first-mark! (unspecified)) (set! h3106@module-interface-exp-id-vec (unspecified)) (set! h3108@set-module-interface-exp-id-vec! (unspecified)) (set! h310a@module-interface-exp-lab-vec (unspecified)) (set! h310c@set-module-interface-exp-lab-vec! (unspecified)) (set! h310e@dummy (unspecified)) (set! h3110@module-interface-exp-id* (unspecified)) (set! h3112@chi-internal-module (unspecified)) (set! h3114@chi-body* (unspecified)) (set! h3116@expand-transformer (unspecified)) (set! h3118@parse-exports (unspecified)) (set! h311a@parse-library-name (unspecified)) (set! h311c@parse-library (unspecified)) (set! h311e@parse-import-spec* (unspecified)) (set! h3120@make-top-rib (unspecified)) (set! h3122@make-collector (unspecified)) (set! h3124@inv-collector (unspecified)) (set! h3126@vis-collector (unspecified)) (set! h3128@imp-collector (unspecified)) (set! h312a@chi-library-internal (unspecified)) (set! h312c@chi-interaction-expr (unspecified)) (set! h312e@library-body-expander (unspecified)) (set! h3130@core-library-expander (unspecified)) (set! h3132@parse-top-level-program (unspecified)) (set! h3134@top-level-expander (unspecified)) (set! h3136@rp (unspecified)) (set! h3140@env? (unspecified)) (set! h3142@env-names (unspecified)) (set! h3144@set-env-names! (unspecified)) (set! h3146@env-labels (unspecified)) (set! h3148@set-env-labels! (unspecified)) (set! h314a@env-itc (unspecified)) (set! h314c@set-env-itc! (unspecified)) (set! h314e@dummy (unspecified)) (set! h3150@rp (unspecified)) (set! h315a@interaction-env? (unspecified)) (set! h315c@interaction-env-rib (unspecified)) (set! h315e@set-interaction-env-rib! (unspecified)) (set! h3160@interaction-env-r (unspecified)) (set! h3162@set-interaction-env-r! (unspecified)) (set! h3164@interaction-env-locs (unspecified)) (set! h3166@set-interaction-env-locs! (unspecified)) (set! h3168@dummy (unspecified)) (set! h316a@interaction-environment-symbols (unspecified)) (set! h316c@environment-bindings (unspecified)) (set! h316e@parse-binding (unspecified)) (set! h3170@environment? (unspecified)) (set! h3172@environment-symbols (unspecified)) (set! h3174@environment (unspecified)) (set! h3176@null-environment (unspecified)) (set! h3178@scheme-report-environment (unspecified)) (set! h317a@expand (unspecified)) (set! h317c@eval (unspecified)) (set! h317e@library-expander (unspecified)) (set! h3180@boot-library-expand (unspecified)) (set! h3182@rev-map-append (unspecified)) (set! h3184@build-exports (unspecified)) (set! h3186@make-export-subst (unspecified)) (set! h3188@make-export-env/macros (unspecified)) (set! h318a@generate-temporaries (unspecified)) (set! h318c@free-identifier=? (unspecified)) (set! h318e@bound-identifier=? (unspecified)) (set! h3190@make-source-condition (unspecified)) (set! h3192@extract-position-condition (unspecified)) (set! h3194@expression-position (unspecified)) (set! h3196@assertion-error (unspecified)) (set! h3198@syntax-error (unspecified)) (set! h319a@syntax-violation* (unspecified)) (set! h319c@syntax-violation (unspecified)) (set! h319e@identifier? (unspecified)) (set! h31a0@datum->syntax (unspecified)) (set! h31a2@syntax->datum (unspecified)) (set! h31a4@ungensym-all (unspecified)) (set! h31a6@compile-r6rs-top-level (unspecified)) (set! h31a8@pre-compile-r6rs-top-level (unspecified)) (set! h31aa@interaction-environment (unspecified)) (set! h31ac@top-level-context (unspecified)) (set! h2e30@file-options-macro (lambda (h31ad@x) (letrec* ((h31b0@valid-option? (lambda (h31b9@x) (and (h2eb5@id? h31b9@x) (memq (h2eb7@id->sym h31b9@x) '(no-fail no-create no-truncate)))))) (let ((h31b1@t h31ad@x)) (let ((h31b3@ls/false (h30bc@syntax-dispatch h31b1@t '(_ . each-any)))) (if (and h31b3@ls/false (apply (lambda (h31b5@opt*) (for-all h31b0@valid-option? h31b5@opt*)) h31b3@ls/false)) (apply (lambda (h31b7@opt*) (h3072@bless (list 'make-file-options (list 'quote h31b7@opt*)))) h31b3@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h31b1@t))))))) (set! h4b03@h2e30@file-options-macro h2e30@file-options-macro) (set! h2e32@set-cons (lambda (h31bb@x h31bc@ls) (if (memq h31bb@x h31bc@ls) h31bc@ls (cons h31bb@x h31bc@ls)))) (set! h4b04@h2e32@set-cons h2e32@set-cons) (set! h2e34@set-union (lambda (h31bf@ls1 h31c0@ls2) (if (null? h31bf@ls1) h31c0@ls2 (if (memq (car h31bf@ls1) h31c0@ls2) (h2e34@set-union (cdr h31bf@ls1) h31c0@ls2) (cons (car h31bf@ls1) (h2e34@set-union (cdr h31bf@ls1) h31c0@ls2)))))) (set! h4b05@h2e34@set-union h2e34@set-union) (set! h2e39@top-mark* '(top)) (set! h4b06@h2e39@top-mark* h2e39@top-mark*) (set! h2e3b@top-marked? (lambda (h31c3@m*) (memq 'top h31c3@m*))) (set! h4b07@h2e3b@top-marked? h2e3b@top-marked?) (set! h2e3d@gen-lexical (lambda (h31c5@sym) (if (symbol? h31c5@sym) (gensym h31c5@sym) (if (h2e81@stx? h31c5@sym) (h2e3d@gen-lexical (h2eb7@id->sym h31c5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" h31c5@sym))))) (set! h4b08@h2e3d@gen-lexical h2e3d@gen-lexical) (set! h2e3f@gen-global (lambda (h31c7@x) (h2e3d@gen-lexical h31c7@x))) (set! h4b09@h2e3f@gen-global h2e3f@gen-global) (set! h2e41@gen-label (lambda (h31c9@_) (gensym))) (set! h4b0a@h2e41@gen-label h2e41@gen-label) (set! h2e43@gen-top-level-label (lambda (h31cb@id h31cc@rib) (letrec* ((h31d0@find (lambda (h31db@sym h31dc@mark* h31dd@sym* h31de@mark** h31df@label*) (and (pair? h31dd@sym*) (if (and (eq? h31db@sym (car h31dd@sym*)) (same-marks? h31dc@mark* (car h31de@mark**))) (car h31df@label*) (h31d0@find h31db@sym h31dc@mark* (cdr h31dd@sym*) (cdr h31de@mark**) (cdr h31df@label*))))))) (let ((h31d1@sym (h2eb7@id->sym h31cb@id)) (h31d2@mark* (h2e87@stx-mark* h31cb@id))) (let ((h31d5@sym* (h2e53@rib-sym* h31cc@rib))) (let ((h31d7@t (and (memq h31d1@sym (h2e53@rib-sym* h31cc@rib)) (h31d0@find h31d1@sym h31d2@mark* h31d5@sym* (h2e57@rib-mark** h31cc@rib) (h2e5b@rib-label* h31cc@rib))))) (if h31d7@t ((lambda (h31d9@label) (if (h2cd0@h2b1d@imported-label->binding h31d9@label) (gensym) h31d9@label)) h31d7@t) (gensym)))))))) (set! h4b0b@h2e43@gen-top-level-label h2e43@gen-top-level-label) (set! h2e45@gen-define-label+loc (lambda (h31e5@id h31e6@rib) (let ((h31e9@t (h31ac@top-level-context))) (if h31e9@t ((lambda (h31eb@env) (let ((h31ed@label (h2e43@gen-top-level-label h31e5@id h31e6@rib)) (h31ee@locs (h3164@interaction-env-locs h31eb@env))) (values h31ed@label (let ((h31f1@t (assq h31ed@label h31ee@locs))) (if h31f1@t (cdr h31f1@t) (let ((h31f3@loc (h2e3d@gen-lexical h31e5@id))) (begin (h3166@set-interaction-env-locs! h31eb@env (cons (cons h31ed@label h31f3@loc) h31ee@locs)) h31f3@loc))))))) h31e9@t) (values (gensym) (h2e3d@gen-lexical h31e5@id)))))) (set! h4b0c@h2e45@gen-define-label+loc h2e45@gen-define-label+loc) (set! h2e47@gen-define-label (lambda (h31f5@id h31f6@rib) (if (h31ac@top-level-context) (h2e43@gen-top-level-label h31f5@id h31f6@rib) (gensym)))) (set! h4b0d@h2e47@gen-define-label h2e47@gen-define-label) (set! h2e51@rib? (lambda (h31f9@x) (and (simple-struct? h31f9@x) (eq? (simple-struct-name h31f9@x) 'rib)))) (set! h4b0e@h2e51@rib? h2e51@rib?) (set! h2e53@rib-sym* (lambda (h31fb@x) (simple-struct-ref h31fb@x '0))) (set! h4b0f@h2e53@rib-sym* h2e53@rib-sym*) (set! h2e55@set-rib-sym*! (lambda (h31fd@x h31fe@val) (simple-struct-set! h31fd@x '0 h31fe@val))) (set! h4b10@h2e55@set-rib-sym*! h2e55@set-rib-sym*!) (set! h2e57@rib-mark** (lambda (h3201@x) (simple-struct-ref h3201@x '1))) (set! h4b11@h2e57@rib-mark** h2e57@rib-mark**) (set! h2e59@set-rib-mark**! (lambda (h3203@x h3204@val) (simple-struct-set! h3203@x '1 h3204@val))) (set! h4b12@h2e59@set-rib-mark**! h2e59@set-rib-mark**!) (set! h2e5b@rib-label* (lambda (h3207@x) (simple-struct-ref h3207@x '2))) (set! h4b13@h2e5b@rib-label* h2e5b@rib-label*) (set! h2e5d@set-rib-label*! (lambda (h3209@x h320a@val) (simple-struct-set! h3209@x '2 h320a@val))) (set! h4b14@h2e5d@set-rib-label*! h2e5d@set-rib-label*!) (set! h2e5f@rib-sealed/freq (lambda (h320d@x) (simple-struct-ref h320d@x '3))) (set! h4b15@h2e5f@rib-sealed/freq h2e5f@rib-sealed/freq) (set! h2e61@set-rib-sealed/freq! (lambda (h320f@x h3210@val) (simple-struct-set! h320f@x '3 h3210@val))) (set! h4b16@h2e61@set-rib-sealed/freq! h2e61@set-rib-sealed/freq!) (set! h2e63@rib-cache (lambda (h3213@x) (simple-struct-ref h3213@x '4))) (set! h4b17@h2e63@rib-cache h2e63@rib-cache) (set! h2e65@set-rib-cache! (lambda (h3215@x h3216@val) (simple-struct-set! h3215@x '4 h3216@val))) (set! h4b18@h2e65@set-rib-cache! h2e65@set-rib-cache!) (set! h2e67@dummy '3) (set! h4b19@h2e67@dummy h2e67@dummy) (set! h2e69@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! h4b1a@h2e69@make-empty-rib h2e69@make-empty-rib) (set! h2e6b@extend-rib! (lambda (h3219@rib h321a@id h321b@label) (letrec* ((h3220@find (lambda (h322d@sym h322e@mark* h322f@sym* h3230@mark** h3231@label*) (and (pair? h322f@sym*) (if (and (eq? h322d@sym (car h322f@sym*)) (same-marks? h322e@mark* (car h3230@mark**))) h3231@label* (h3220@find h322d@sym h322e@mark* (cdr h322f@sym*) (cdr h3230@mark**) (cdr h3231@label*))))))) (begin (if (h2e5f@rib-sealed/freq h3219@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" h3219@rib) (void)) (let ((h3221@sym (h2eb7@id->sym h321a@id)) (h3222@mark* (h2e87@stx-mark* h321a@id))) (let ((h3225@sym* (h2e53@rib-sym* h3219@rib))) (let ((h3227@t (and (memq h3221@sym (h2e53@rib-sym* h3219@rib)) (h3220@find h3221@sym h3222@mark* h3225@sym* (h2e57@rib-mark** h3219@rib) (h2e5b@rib-label* h3219@rib))))) (if h3227@t ((lambda (h3229@p) (if (not (eq? h321b@label (car h3229@p))) (if (h31ac@top-level-context) (set-car! h3229@p h321b@label) (h319c@syntax-violation '#f '"multiple definitions of identifier" h321a@id)) (void))) h3227@t) (begin (if (h2e63@rib-cache h3219@rib) (hashtable-update! (h2e63@rib-cache h3219@rib) h3221@sym (lambda (h322b@e) (cons (cons h3222@mark* h321b@label) h322b@e)) '()) (void)) (h2e55@set-rib-sym*! h3219@rib (cons h3221@sym h3225@sym*)) (h2e59@set-rib-mark**! h3219@rib (cons h3222@mark* (h2e57@rib-mark** h3219@rib))) (h2e5d@set-rib-label*! h3219@rib (cons h321b@label (h2e5b@rib-label* h3219@rib)))))))))))) (set! h4b1b@h2e6b@extend-rib! h2e6b@extend-rib!) (set! h2e6d@extend-rib/nc! (lambda (h3237@rib h3238@id h3239@label) (let ((h323d@sym (h2eb7@id->sym h3238@id)) (h323e@mark* (h2e87@stx-mark* h3238@id))) (let ((h3241@sym* (h2e53@rib-sym* h3237@rib))) (begin (if (h2e63@rib-cache h3237@rib) (hashtable-update! (h2e63@rib-cache h3237@rib) h323d@sym (lambda (h3243@e) (cons (cons h323e@mark* h3239@label) h3243@e)) '()) (void)) (h2e55@set-rib-sym*! h3237@rib (cons h323d@sym h3241@sym*)) (h2e59@set-rib-mark**! h3237@rib (cons h323e@mark* (h2e57@rib-mark** h3237@rib))) (h2e5d@set-rib-label*! h3237@rib (cons h3239@label (h2e5b@rib-label* h3237@rib)))))))) (set! h4b1c@h2e6d@extend-rib/nc! h2e6d@extend-rib/nc!) (set! h2e6f@make-rib-map (lambda (h3245@sym*) (let ((h3247@ht (make-eq-hashtable))) (let h324d@f ((h3249@i '0) (h324a@sym* h3245@sym*)) (if (null? h324a@sym*) h3247@ht (begin (hashtable-update! h3247@ht (car h324a@sym*) (lambda (h324f@x) (cons h3249@i h324f@x)) '()) (h324d@f (+ h3249@i '1) (cdr h324a@sym*)))))))) (set! h4b1d@h2e6f@make-rib-map h2e6f@make-rib-map) (set! h2e71@seal-rib! (lambda (h3251@rib) (let ((h3253@sym* (h2e53@rib-sym* h3251@rib))) (if (not (null? h3253@sym*)) (begin (h2e55@set-rib-sym*! h3251@rib (list->vector h3253@sym*)) (h2e59@set-rib-mark**! h3251@rib (list->vector (h2e57@rib-mark** h3251@rib))) (h2e5d@set-rib-label*! h3251@rib (list->vector (h2e5b@rib-label* h3251@rib))) (h2e61@set-rib-sealed/freq! h3251@rib (h2e6f@make-rib-map h3253@sym*))) (void))))) (set! h4b1e@h2e71@seal-rib! h2e71@seal-rib!) (set! h2e73@unseal-rib! (lambda (h3255@rib) (if (h2e5f@rib-sealed/freq h3255@rib) (begin (h2e61@set-rib-sealed/freq! h3255@rib '#f) (h2e55@set-rib-sym*! h3255@rib (vector->list (h2e53@rib-sym* h3255@rib))) (h2e59@set-rib-mark**! h3255@rib (vector->list (h2e57@rib-mark** h3255@rib))) (h2e5d@set-rib-label*! h3255@rib (vector->list (h2e5b@rib-label* h3255@rib)))) (void)))) (set! h4b1f@h2e73@unseal-rib! h2e73@unseal-rib!) (set! h2e75@make-full-rib (lambda (h3257@id* h3258@label*) (let ((h325b@r (make-simple-struct 'rib '6 (list (map h2eb7@id->sym h3257@id*) (map h2e87@stx-mark* h3257@id*) h3258@label* '#f '#f)))) (begin (h2e71@seal-rib! h325b@r) h325b@r)))) (set! h4b20@h2e75@make-full-rib h2e75@make-full-rib) (set! h2e77@rp (h2a02@h28dd@make-record-printer 'stx (lambda (h325d@x h325e@p h325f@wr) (begin (display '"#<syntax " h325e@p) (write (h2ec9@stx->datum h325d@x) h325e@p) (let ((h3263@expr (h2e83@stx-expr h325d@x))) (if (h29f9@h28cb@annotation? h3263@expr) (let ((h3265@src (h29fa@h28cd@annotation-source h3263@expr))) (if (pair? h3265@src) (begin (display '" [" h325e@p) (display (cdr h3265@src) h325e@p) (display '" of " h325e@p) (display (car h3265@src) h325e@p) (display '"]" h325e@p)) (void))) (void))) (display '">" h325e@p))))) (set! h4b21@h2e77@rp h2e77@rp) (set! h2e81@stx? (lambda (h3267@x) (and (simple-struct? h3267@x) (eq? (simple-struct-name h3267@x) 'stx)))) (set! h4b22@h2e81@stx? h2e81@stx?) (set! h2e83@stx-expr (lambda (h3269@x) (simple-struct-ref h3269@x '0))) (set! h4b23@h2e83@stx-expr h2e83@stx-expr) (set! h2e85@set-stx-expr! (lambda (h326b@x h326c@val) (simple-struct-set! h326b@x '0 h326c@val))) (set! h4b24@h2e85@set-stx-expr! h2e85@set-stx-expr!) (set! h2e87@stx-mark* (lambda (h326f@x) (simple-struct-ref h326f@x '1))) (set! h4b25@h2e87@stx-mark* h2e87@stx-mark*) (set! h2e89@set-stx-mark*! (lambda (h3271@x h3272@val) (simple-struct-set! h3271@x '1 h3272@val))) (set! h4b26@h2e89@set-stx-mark*! h2e89@set-stx-mark*!) (set! h2e8b@stx-subst* (lambda (h3275@x) (simple-struct-ref h3275@x '2))) (set! h4b27@h2e8b@stx-subst* h2e8b@stx-subst*) (set! h2e8d@set-stx-subst*! (lambda (h3277@x h3278@val) (simple-struct-set! h3277@x '2 h3278@val))) (set! h4b28@h2e8d@set-stx-subst*! h2e8d@set-stx-subst*!) (set! h2e8f@stx-ae* (lambda (h327b@x) (simple-struct-ref h327b@x '3))) (set! h4b29@h2e8f@stx-ae* h2e8f@stx-ae*) (set! h2e91@set-stx-ae*! (lambda (h327d@x h327e@val) (simple-struct-set! h327d@x '3 h327e@val))) (set! h4b2a@h2e91@set-stx-ae*! h2e91@set-stx-ae*!) (set! h2e93@dummy '3) (set! h4b2b@h2e93@dummy h2e93@dummy) (set! h2e95@datum->stx (lambda (h3281@id h3282@datum) (make-simple-struct 'stx '5 (list h3282@datum (h2e87@stx-mark* h3281@id) (h2e8b@stx-subst* h3281@id) (h2e8f@stx-ae* h3281@id))))) (set! h4b2c@h2e95@datum->stx h2e95@datum->stx) (set! h2e97@gen-mark (lambda () (string '#\m))) (set! h4b2d@h2e97@gen-mark h2e97@gen-mark) (set! h2e99@anti-mark '#f) (set! h4b2e@h2e99@anti-mark h2e99@anti-mark) (set! h2e9b@anti-mark? not) (set! h4b2f@h2e9b@anti-mark? h2e9b@anti-mark?) (set! h2e9d@mkstx (lambda (h3285@e h3286@m* h3287@s* h3288@ae*) (if (and (h2e81@stx? h3285@e) (not (h2e3b@top-marked? h3286@m*))) (call-with-values (lambda () (join-wraps h3286@m* h3287@s* h3288@ae* h3285@e)) (lambda (h3293@h328e h3294@h3290 h3295@h3292) (let ((h3299@ae* h3295@h3292) (h329a@s* h3294@h3290) (h329b@m* h3293@h328e)) (make-simple-struct 'stx '5 (list (h2e83@stx-expr h3285@e) h329b@m* h329a@s* h3299@ae*))))) (make-simple-struct 'stx '5 (list h3285@e h3286@m* h3287@s* h3288@ae*))))) (set! h4b30@h2e9d@mkstx h2e9d@mkstx) (set! h2e9f@add-mark (lambda (h329f@m h32a0@e h32a1@ae) (h2e9d@mkstx h32a0@e (list h329f@m) '(shift) (list h32a1@ae)))) (set! h4b31@h2e9f@add-mark h2e9f@add-mark) (set! h2ea1@add-subst (lambda (h32a5@subst h32a6@e) (h2e9d@mkstx h32a6@e '() (list h32a5@subst) '()))) (set! h4b32@h2ea1@add-subst h2ea1@add-subst) (set! h2ea3@syntax-kind? (lambda (h32a9@x h32aa@p?) (if (h2e81@stx? h32a9@x) (h2ea3@syntax-kind? (h2e83@stx-expr h32a9@x) h32aa@p?) (if (h29f9@h28cb@annotation? h32a9@x) (h2ea3@syntax-kind? (h29fb@h28cf@annotation-expression h32a9@x) h32aa@p?) (h32aa@p? h32a9@x))))) (set! h4b33@h2ea3@syntax-kind? h2ea3@syntax-kind?) (set! h2ea5@syntax-vector->list (lambda (h32ad@x) (if (h2e81@stx? h32ad@x) (let ((h32af@ls (h2ea5@syntax-vector->list (h2e83@stx-expr h32ad@x))) (h32b0@m* (h2e87@stx-mark* h32ad@x)) (h32b1@s* (h2e8b@stx-subst* h32ad@x)) (h32b2@ae* (h2e8f@stx-ae* h32ad@x))) (map (lambda (h32b7@x) (h2e9d@mkstx h32b7@x h32b0@m* h32b1@s* h32b2@ae*)) h32af@ls)) (if (h29f9@h28cb@annotation? h32ad@x) (h2ea5@syntax-vector->list (h29fb@h28cf@annotation-expression h32ad@x)) (if (vector? h32ad@x) (vector->list h32ad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" h32ad@x)))))) (set! h4b34@h2ea5@syntax-vector->list h2ea5@syntax-vector->list) (set! h2ea7@syntax-pair? (lambda (h32b9@x) (h2ea3@syntax-kind? h32b9@x pair?))) (set! h4b35@h2ea7@syntax-pair? h2ea7@syntax-pair?) (set! h2ea9@syntax-vector? (lambda (h32bb@x) (h2ea3@syntax-kind? h32bb@x vector?))) (set! h4b36@h2ea9@syntax-vector? h2ea9@syntax-vector?) (set! h2eab@syntax-null? (lambda (h32bd@x) (h2ea3@syntax-kind? h32bd@x null?))) (set! h4b37@h2eab@syntax-null? h2eab@syntax-null?) (set! h2ead@syntax-list? (lambda (h32bf@x) (or (h2eab@syntax-null? h32bf@x) (and (h2ea7@syntax-pair? h32bf@x) (h2ead@syntax-list? (h2eb1@syntax-cdr h32bf@x)))))) (set! h4b38@h2ead@syntax-list? h2ead@syntax-list?) (set! h2eaf@syntax-car (lambda (h32c1@x) (if (h2e81@stx? h32c1@x) (h2e9d@mkstx (h2eaf@syntax-car (h2e83@stx-expr h32c1@x)) (h2e87@stx-mark* h32c1@x) (h2e8b@stx-subst* h32c1@x) (h2e8f@stx-ae* h32c1@x)) (if (h29f9@h28cb@annotation? h32c1@x) (h2eaf@syntax-car (h29fb@h28cf@annotation-expression h32c1@x)) (if (pair? h32c1@x) (car h32c1@x) (assertion-violation 'syntax-car '"BUG: not a pair" h32c1@x)))))) (set! h4b39@h2eaf@syntax-car h2eaf@syntax-car) (set! h2eb1@syntax-cdr (lambda (h32c3@x) (if (h2e81@stx? h32c3@x) (h2e9d@mkstx (h2eb1@syntax-cdr (h2e83@stx-expr h32c3@x)) (h2e87@stx-mark* h32c3@x) (h2e8b@stx-subst* h32c3@x) (h2e8f@stx-ae* h32c3@x)) (if (h29f9@h28cb@annotation? h32c3@x) (h2eb1@syntax-cdr (h29fb@h28cf@annotation-expression h32c3@x)) (if (pair? h32c3@x) (cdr h32c3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" h32c3@x)))))) (set! h4b3a@h2eb1@syntax-cdr h2eb1@syntax-cdr) (set! h2eb3@syntax->list (lambda (h32c5@x) (if (h2ea7@syntax-pair? h32c5@x) (cons (h2eaf@syntax-car h32c5@x) (h2eb3@syntax->list (h2eb1@syntax-cdr h32c5@x))) (if (h2eab@syntax-null? h32c5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" h32c5@x))))) (set! h4b3b@h2eb3@syntax->list h2eb3@syntax->list) (set! h2eb5@id? (lambda (h32c7@x) (and (h2e81@stx? h32c7@x) (symbol? (h2e83@stx-expr h32c7@x))))) (set! h4b3c@h2eb5@id? h2eb5@id?) (set! h2eb7@id->sym (lambda (h32c9@x) (h2e83@stx-expr h32c9@x))) (set! h4b3d@h2eb7@id->sym h2eb7@id->sym) (set! h2eb9@bound-id=? (lambda (h32cb@x h32cc@y) (and (eq? (h2eb7@id->sym h32cb@x) (h2eb7@id->sym h32cc@y)) (same-marks? (h2e87@stx-mark* h32cb@x) (h2e87@stx-mark* h32cc@y))))) (set! h4b3e@h2eb9@bound-id=? h2eb9@bound-id=?) (set! h2ebb@free-id=? (lambda (h32cf@i h32d0@j) (let ((h32d3@t0 (id->real-label h32cf@i)) (h32d4@t1 (id->real-label h32d0@j))) (if (or h32d3@t0 h32d4@t1) (eq? h32d3@t0 h32d4@t1) (eq? (h2eb7@id->sym h32cf@i) (h2eb7@id->sym h32d0@j)))))) (set! h4b3f@h2ebb@free-id=? h2ebb@free-id=?) (set! h2ebd@valid-bound-ids? (lambda (h32d7@id*) (and (for-all h2eb5@id? h32d7@id*) (h2ebf@distinct-bound-ids? h32d7@id*)))) (set! h4b40@h2ebd@valid-bound-ids? h2ebd@valid-bound-ids?) (set! h2ebf@distinct-bound-ids? (lambda (h32d9@id*) (or (null? h32d9@id*) (and (not (h2ec1@bound-id-member? (car h32d9@id*) (cdr h32d9@id*))) (h2ebf@distinct-bound-ids? (cdr h32d9@id*)))))) (set! h4b41@h2ebf@distinct-bound-ids? h2ebf@distinct-bound-ids?) (set! h2ec1@bound-id-member? (lambda (h32db@id h32dc@id*) (and (pair? h32dc@id*) (or (h2eb9@bound-id=? h32db@id (car h32dc@id*)) (h2ec1@bound-id-member? h32db@id (cdr h32dc@id*)))))) (set! h4b42@h2ec1@bound-id-member? h2ec1@bound-id-member?) (set! h2ec3@self-evaluating? (lambda (h32df@x) (or (number? h32df@x) (string? h32df@x) (char? h32df@x) (boolean? h32df@x) (regexp? h32df@x) (bytevector? h32df@x)))) (set! h4b43@h2ec3@self-evaluating? h2ec3@self-evaluating?) (set! h2ec5@strip-annotations (lambda (h32e1@x) (if (pair? h32e1@x) (cons (h2ec5@strip-annotations (car h32e1@x)) (h2ec5@strip-annotations (cdr h32e1@x))) (if (vector? h32e1@x) (vector-map h2ec5@strip-annotations h32e1@x) (if (h29f9@h28cb@annotation? h32e1@x) (h29f8@h28c9@annotation-stripped h32e1@x) h32e1@x))))) (set! h4b44@h2ec5@strip-annotations h2ec5@strip-annotations) (set! h2ec7@strip (lambda (h32e3@x h32e4@m*) (if (h2e3b@top-marked? h32e4@m*) (if (or (h29f9@h28cb@annotation? h32e3@x) (and (pair? h32e3@x) (h29f9@h28cb@annotation? (car h32e3@x))) (and (vector? h32e3@x) (> (vector-length h32e3@x) '0) (h29f9@h28cb@annotation? (vector-ref h32e3@x '0)))) (h2ec5@strip-annotations h32e3@x) h32e3@x) (let h32e9@f ((h32e7@x h32e3@x)) (if (h2e81@stx? h32e7@x) (begin (if (pair? (h2e83@stx-expr h32e7@x)) (begin (set-source-info! (h2e83@stx-expr h32e7@x) '#f) (set-source-info! (cdr (h2e83@stx-expr h32e7@x)) '#f) (set-source-info! (car (h2e83@stx-expr h32e7@x)) '#f)) (void)) (h2ec7@strip (h2e83@stx-expr h32e7@x) (h2e87@stx-mark* h32e7@x))) (if (h29f9@h28cb@annotation? h32e7@x) (h29f8@h28c9@annotation-stripped h32e7@x) (if (pair? h32e7@x) (let ((h32eb@a (h32e9@f (car h32e7@x))) (h32ec@d (h32e9@f (cdr h32e7@x)))) (if (and (eq? h32eb@a (car h32e7@x)) (eq? h32ec@d (cdr h32e7@x))) h32e7@x (cons h32eb@a h32ec@d))) (if (vector? h32e7@x) (let ((h32ef@old (vector->list h32e7@x))) (let ((h32f1@new (map h32e9@f h32ef@old))) (if (for-all eq? h32ef@old h32f1@new) h32e7@x (list->vector h32f1@new)))) h32e7@x)))))))) (set! h4b45@h2ec7@strip h2ec7@strip) (set! h2ec9@stx->datum (lambda (h32f3@x) (h2ec7@strip h32f3@x '()))) (set! h4b46@h2ec9@stx->datum h2ec9@stx->datum) (set! h2ecb@id->label (lambda (h32f5@id) (or (id->real-label h32f5@id) (let ((h32f7@t (h31ac@top-level-context))) (if h32f7@t ((lambda (h32f9@env) (let ((h32fb@rib (h315c@interaction-env-rib h32f9@env))) (call-with-values (lambda () (h2e45@gen-define-label+loc h32f5@id h32fb@rib)) (lambda (h3301@h32fe h3302@h3300) (let ((h3305@loc_ h3302@h3300) (h3306@lab h3301@h32fe)) (begin (h2e6b@extend-rib! h32fb@rib h32f5@id h3306@lab) h3306@lab)))))) h32f7@t) '#f))))) (set! h4b47@h2ecb@id->label h2ecb@id->label) (set! h2ecd@label->binding (lambda (h3309@x h330a@r) (let ((h330d@t (h2cd0@h2b1d@imported-label->binding h3309@x))) (if h330d@t ((lambda (h330f@b) (if (and (pair? h330f@b) (eq? (car h330f@b) '$core-rtd)) (cons '$rtd (map h3072@bless (cdr h330f@b))) (if (and (pair? h330f@b) (eq? (car h330f@b) 'global-rtd)) (let ((h3311@lib (cadr h330f@b)) (h3312@loc (cddr h330f@b))) (cons '$rtd (symbol-value h3312@loc))) h330f@b))) h330d@t) (let ((h3315@t (assq h3309@x h330a@r))) (if h3315@t (cdr h3315@t) (let ((h3317@t (h31ac@top-level-context))) (if h3317@t ((lambda (h3319@env) (let ((h331b@t (assq h3309@x (h3164@interaction-env-locs h3319@env)))) (if h331b@t ((lambda (h331d@p) (cons* 'lexical (cdr h331d@p) '#f)) h331b@t) '(displaced-lexical . #f)))) h3317@t) '(displaced-lexical . #f))))))))) (set! h4b48@h2ecd@label->binding h2ecd@label->binding) (set! h2ecf@make-binding cons) (set! h4b49@h2ecf@make-binding h2ecf@make-binding) (set! h2ed1@binding-type car) (set! h4b4a@h2ed1@binding-type h2ed1@binding-type) (set! h2ed3@binding-value cdr) (set! h4b4b@h2ed3@binding-value h2ed3@binding-value) (set! h2ed5@raise-unbound-error (lambda (h331f@id) (h319a@syntax-violation* '#f '"unbound identifier" h331f@id (make-undefined-violation)))) (set! h4b4c@h2ed5@raise-unbound-error h2ed5@raise-unbound-error) (set! h2ed7@syntax-type (lambda (h3321@e h3322@r) (if (h2eb5@id? h3321@e) (let ((h3325@id h3321@e)) (let ((h3327@label (h2ecb@id->label h3325@id))) (let ((h3329@b (h2ecd@label->binding h3327@label h3322@r))) (let ((h332b@type (h2ed1@binding-type h3329@b))) (begin (if (not h3327@label) (h2ed5@raise-unbound-error h3325@id) (void)) (let ((h332d@t h332b@type)) (if (memv h332d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values h332b@type (h2ed3@binding-value h3329@b) h3325@id) (values 'other '#f '#f)))))))) (if (h2ea7@syntax-pair? h3321@e) (let ((h332f@id (h2eaf@syntax-car h3321@e))) (if (h2eb5@id? h332f@id) (let ((h3331@label (h2ecb@id->label h332f@id))) (let ((h3333@b (h2ecd@label->binding h3331@label h3322@r))) (let ((h3335@type (h2ed1@binding-type h3333@b))) (begin (if (not h3331@label) (h2ed5@raise-unbound-error h332f@id) (void)) (let ((h3337@t h3335@type)) (if (memv h3337@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values h3335@type (h2ed3@binding-value h3333@b) h332f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((h3339@d (h2ec9@stx->datum h3321@e))) (if (h2ec3@self-evaluating? h3339@d) (values 'constant h3339@d '#f) (values 'other '#f '#f))))))) (set! h4b4d@h2ed7@syntax-type h2ed7@syntax-type) (set! h2ee5@sanitize-binding (lambda (h333b@x h333c@src) (if (procedure? h333b@x) (cons* 'local-macro h333b@x h333c@src) (if (and (pair? h333b@x) (eq? (car h333b@x) 'macro!) (procedure? (cdr h333b@x))) (cons* 'local-macro! (cdr h333b@x) h333c@src) (if (and (pair? h333b@x) (eq? (car h333b@x) '$rtd)) h333b@x (assertion-violation 'expand '"invalid transformer" h333b@x)))))) (set! h4b4e@h2ee5@sanitize-binding h2ee5@sanitize-binding) (set! h2ee7@make-variable-transformer (lambda (h333f@x) (if (procedure? h333f@x) (cons 'macro! h333f@x) (assertion-violation 'make-variable-transformer '"not a procedure" h333f@x)))) (set! h4b4f@h2ee7@make-variable-transformer h2ee7@make-variable-transformer) (set! h2ee9@variable-transformer? (lambda (h3341@x) (and (pair? h3341@x) (eq? (car h3341@x) 'macro!) (procedure? (cdr h3341@x))))) (set! h4b50@h2ee9@variable-transformer? h2ee9@variable-transformer?) (set! h2eeb@variable-transformer-procedure (lambda (h3343@x) (if (h2ee9@variable-transformer? h3343@x) (cdr h3343@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" h3343@x)))) (set! h4b51@h2eeb@variable-transformer-procedure h2eeb@variable-transformer-procedure) (set! h2eed@make-eval-transformer (lambda (h3345@x) (h2ee5@sanitize-binding (eval-core (h2a5b@h2a13@expanded->core h3345@x)) h3345@x))) (set! h4b52@h2eed@make-eval-transformer h2eed@make-eval-transformer) (set! h303e@parse-define (lambda (h3347@x) (let ((h3349@t h3347@x)) (let ((h334b@ls/false (h30bc@syntax-dispatch h3349@t '(_ (any . any) any . each-any)))) (if (and h334b@ls/false (apply (lambda (h334d@id h334e@fmls h334f@b h3350@b*) (h2eb5@id? h334d@id)) h334b@ls/false)) (apply (lambda (h3355@id h3356@fmls h3357@b h3358@b*) (begin (h30e2@verify-formals h3356@fmls h3347@x) (values h3355@id (cons 'defun (cons h3356@fmls (cons h3357@b h3358@b*)))))) h334b@ls/false) (let ((h335d@t h3349@t)) (let ((h335f@ls/false (h30bc@syntax-dispatch h335d@t '(_ any any)))) (if (and h335f@ls/false (apply (lambda (h3361@id h3362@val) (h2eb5@id? h3361@id)) h335f@ls/false)) (apply (lambda (h3365@id h3366@val) (values h3365@id (cons 'expr h3366@val))) h335f@ls/false) (let ((h3369@t h335d@t)) (let ((h336b@ls/false (h30bc@syntax-dispatch h3369@t '(_ any)))) (if (and h336b@ls/false (apply (lambda (h336d@id) (h2eb5@id? h336d@id)) h336b@ls/false)) (apply (lambda (h336f@id) (values h336f@id (cons 'expr (h3072@bless '(void))))) h336b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3369@t)))))))))))) (set! h4b53@h303e@parse-define h303e@parse-define) (set! h3040@parse-define-syntax (lambda (h3371@x) (let ((h3373@t h3371@x)) (let ((h3375@ls/false (h30bc@syntax-dispatch h3373@t '(_ any any)))) (if (and h3375@ls/false (apply (lambda (h3377@id h3378@val) (h2eb5@id? h3377@id)) h3375@ls/false)) (apply (lambda (h337b@id h337c@val) (values h337b@id h337c@val)) h3375@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3373@t)))))) (set! h4b54@h3040@parse-define-syntax h3040@parse-define-syntax) (set! h3042@scheme-stx-hashtable (make-eq-hashtable)) (set! h4b55@h3042@scheme-stx-hashtable h3042@scheme-stx-hashtable) (set! h3044@scheme-stx (lambda (h337f@sym) (or (hashtable-ref h3042@scheme-stx-hashtable h337f@sym '#f) (let ((h3381@subst (h2cac@h2ad5@library-subst (h2cca@h2b11@find-library-by-name '(psyntax system $all))))) (let ((h3383@stx (make-simple-struct 'stx '5 (list h337f@sym h2e39@top-mark* '() '())))) (let ((h3385@stx (let ((h3387@t (assq h337f@sym h3381@subst))) (if h3387@t ((lambda (h3389@x) (let ((h338b@name (car h3389@x)) (h338c@label (cdr h3389@x))) (h2ea1@add-subst (make-simple-struct 'rib '6 (list (list h338b@name) (list h2e39@top-mark*) (list h338c@label) '#f '#f)) h3383@stx))) h3387@t) h3383@stx)))) (begin (hashtable-set! h3042@scheme-stx-hashtable h337f@sym h3385@stx) h3385@stx))))))) (set! h4b56@h3044@scheme-stx h3044@scheme-stx) (set! h3046@lexical-var car) (set! h4b57@h3046@lexical-var h3046@lexical-var) (set! h3048@lexical-mutable? cdr) (set! h4b58@h3048@lexical-mutable? h3048@lexical-mutable?) (set! h304a@set-lexical-mutable! set-cdr!) (set! h4b59@h304a@set-lexical-mutable! h304a@set-lexical-mutable!) (set! h304c@add-lexical (lambda (h338f@lab h3390@lex h3391@r) (cons (cons* h338f@lab 'lexical h3390@lex '#f) h3391@r))) (set! h4b5a@h304c@add-lexical h304c@add-lexical) (set! h304e@add-lexicals (lambda (h3395@lab* h3396@lex* h3397@r) (if (null? h3395@lab*) h3397@r (h304e@add-lexicals (cdr h3395@lab*) (cdr h3396@lex*) (h304c@add-lexical (car h3395@lab*) (car h3396@lex*) h3397@r))))) (set! h4b5b@h304e@add-lexicals h304e@add-lexicals) (set! h3050@letrec-helper (lambda (h339b@e h339c@r h339d@mr h339e@build) (let ((h33a3@t h339b@e)) (let ((h33a5@ls/false (h30bc@syntax-dispatch h33a3@t '(_ #(each (any any)) any . each-any)))) (if h33a5@ls/false (apply (lambda (h33a7@lhs* h33a8@rhs* h33a9@b h33aa@b*) (if (not (h2ebd@valid-bound-ids? h33a7@lhs*)) (h3076@invalid-fmls-error h339b@e h33a7@lhs*) (let ((h33af@lex* (map h2e3d@gen-lexical h33a7@lhs*)) (h33b0@lab* (map h2e41@gen-label h33a7@lhs*))) (let ((h33b3@rib (h2e75@make-full-rib h33a7@lhs* h33b0@lab*)) (h33b4@r (h304e@add-lexicals h33b0@lab* h33af@lex* h339c@r))) (let ((h33b7@body (h30f4@chi-internal (h2ea1@add-subst h33b3@rib (cons h33a9@b h33aa@b*)) h33b4@r h339d@mr)) (h33b8@rhs* (h30da@chi-expr* (map (lambda (h33bb@x) (h2ea1@add-subst h33b3@rib h33bb@x)) h33a8@rhs*) h33b4@r h339d@mr))) (h339e@build '#f h33af@lex* h33b8@rhs* h33b7@body)))))) h33a5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h33a3@t)))))) (set! h4b5c@h3050@letrec-helper h3050@letrec-helper) (set! h3052@let-transformer (lambda (h33bd@e h33be@r h33bf@mr) (let ((h33c3@t h33bd@e)) (let ((h33c5@ls/false (h30bc@syntax-dispatch h33c3@t '(_ #(each (any any)) any . each-any)))) (if h33c5@ls/false (apply (lambda (h33c7@lhs* h33c8@rhs* h33c9@b h33ca@b*) (if (not (h2ebd@valid-bound-ids? h33c7@lhs*)) (h3076@invalid-fmls-error h33bd@e h33c7@lhs*) (let ((h33cf@lex* (map h2e3d@gen-lexical h33c7@lhs*)) (h33d0@lab* (map h2e41@gen-label h33c7@lhs*)) (h33d1@rhs* (h30da@chi-expr* h33c8@rhs* h33be@r h33bf@mr))) (let ((h33d5@rib (h2e75@make-full-rib h33c7@lhs* h33d0@lab*)) (h33d6@r (h304e@add-lexicals h33d0@lab* h33cf@lex* h33be@r))) (let ((h33d9@body (h30f4@chi-internal (h2ea1@add-subst h33d5@rib (cons h33c9@b h33ca@b*)) h33d6@r h33bf@mr))) (h2e1d@h2d80@build-let '#f h33cf@lex* h33d1@rhs* h33d9@body)))))) h33c5@ls/false) (let ((h33db@t h33c3@t)) (let ((h33dd@ls/false (h30bc@syntax-dispatch h33db@t '(_ any #(each (any any)) any . each-any)))) (if h33dd@ls/false (apply (lambda (h33df@loop h33e0@lhs* h33e1@rhs* h33e2@b h33e3@b*) (if (not (h2ebd@valid-bound-ids? h33e0@lhs*)) (h3076@invalid-fmls-error h33bd@e h33e0@lhs*) (let ((h33e9@lex* (map h2e3d@gen-lexical h33e0@lhs*)) (h33ea@lab* (map h2e41@gen-label h33e0@lhs*)) (h33eb@rhs* (h30da@chi-expr* h33e1@rhs* h33be@r h33bf@mr)) (h33ec@loop-lex (h2e3d@gen-lexical h33df@loop)) (h33ed@loop-lab (h2e41@gen-label h33df@loop))) (let ((h33f3@loop-rib (h2e75@make-full-rib (list h33df@loop) (list h33ed@loop-lab))) (h33f4@rib (h2e75@make-full-rib h33e0@lhs* h33ea@lab*)) (h33f5@r (h304e@add-lexicals (cons h33ed@loop-lab h33ea@lab*) (cons h33ec@loop-lex h33e9@lex*) h33be@r))) (let ((h33f9@body (h30f4@chi-internal (h2ea1@add-subst h33f3@loop-rib (h2ea1@add-subst h33f4@rib (cons h33e2@b h33e3@b*))) h33f5@r h33bf@mr))) (h2e1e@h2d82@build-named-let '#f h33ec@loop-lex h33e9@lex* h33eb@rhs* h33f9@body)))))) h33dd@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h33db@t))))))))) (set! h4b5d@h3052@let-transformer h3052@let-transformer) (set! h3054@letrec-transformer (lambda (h33fb@e h33fc@r h33fd@mr) (h3050@letrec-helper h33fb@e h33fc@r h33fd@mr h2e1c@h2d7e@build-letrec))) (set! h4b5e@h3054@letrec-transformer h3054@letrec-transformer) (set! h3056@letrec*-transformer (lambda (h3401@e h3402@r h3403@mr) (h3050@letrec-helper h3401@e h3402@r h3403@mr h2e1f@h2d84@build-letrec*))) (set! h4b5f@h3056@letrec*-transformer h3056@letrec*-transformer) (set! h3058@fluid-let-syntax-transformer (lambda (h3407@e h3408@r h3409@mr) (letrec* ((h340e@lookup (lambda (h3421@x) (or (h2ecb@id->label h3421@x) (h319c@syntax-violation '#f '"unbound identifier" h3407@e h3421@x))))) (let ((h340f@t h3407@e)) (let ((h3411@ls/false (h30bc@syntax-dispatch h340f@t '(_ #(each (any any)) any . each-any)))) (if h3411@ls/false (apply (lambda (h3413@lhs* h3414@rhs* h3415@b h3416@b*) (if (not (h2ebd@valid-bound-ids? h3413@lhs*)) (h3076@invalid-fmls-error h3407@e h3413@lhs*) (let ((h341b@lab* (map h340e@lookup h3413@lhs*)) (h341c@rhs* (map (lambda (h341f@x) (h2eed@make-eval-transformer (h3116@expand-transformer h341f@x h3409@mr))) h3414@rhs*))) (h30f4@chi-internal (cons h3415@b h3416@b*) (append (map cons h341b@lab* h341c@rhs*) h3408@r) (append (map cons h341b@lab* h341c@rhs*) h3409@mr))))) h3411@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h340f@t))))))) (set! h4b60@h3058@fluid-let-syntax-transformer h3058@fluid-let-syntax-transformer) (set! h305a@type-descriptor-transformer (lambda (h3423@e h3424@r h3425@mr) (let ((h3429@t h3423@e)) (let ((h342b@ls/false (h30bc@syntax-dispatch h3429@t '(_ any)))) (if (and h342b@ls/false (apply (lambda (h342d@id) (h2eb5@id? h342d@id)) h342b@ls/false)) (apply (lambda (h342f@id) (let ((h3431@lab (h2ecb@id->label h342f@id))) (let ((h3433@b (h2ecd@label->binding h3431@lab h3424@r))) (let ((h3435@type (h2ed1@binding-type h3433@b))) (begin (if (not h3431@lab) (h2ed5@raise-unbound-error h342f@id) (void)) (if (not (and (eq? h3435@type '$rtd) (not (list? (h2ed3@binding-value h3433@b))))) (h319c@syntax-violation '#f '"not a record type" h3423@e) (void)) (list 'quote (h2ed3@binding-value h3433@b))))))) h342b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3429@t)))))) (set! h4b61@h305a@type-descriptor-transformer h305a@type-descriptor-transformer) (set! h305c@record-type-descriptor-transformer (lambda (h3437@e h3438@r h3439@mr) (let ((h343d@t h3437@e)) (let ((h343f@ls/false (h30bc@syntax-dispatch h343d@t '(_ any)))) (if (and h343f@ls/false (apply (lambda (h3441@id) (h2eb5@id? h3441@id)) h343f@ls/false)) (apply (lambda (h3443@id) (let ((h3445@lab (h2ecb@id->label h3443@id))) (let ((h3447@b (h2ecd@label->binding h3445@lab h3438@r))) (let ((h3449@type (h2ed1@binding-type h3447@b))) (begin (if (not h3445@lab) (h2ed5@raise-unbound-error h3443@id) (void)) (if (not (and (eq? h3449@type '$rtd) (list? (h2ed3@binding-value h3447@b)))) (h319c@syntax-violation '#f '"not a record type" h3437@e) (void)) (h30de@chi-expr (car (h2ed3@binding-value h3447@b)) h3438@r h3439@mr)))))) h343f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h343d@t)))))) (set! h4b62@h305c@record-type-descriptor-transformer h305c@record-type-descriptor-transformer) (set! h305e@record-constructor-descriptor-transformer (lambda (h344b@e h344c@r h344d@mr) (let ((h3451@t h344b@e)) (let ((h3453@ls/false (h30bc@syntax-dispatch h3451@t '(_ any)))) (if (and h3453@ls/false (apply (lambda (h3455@id) (h2eb5@id? h3455@id)) h3453@ls/false)) (apply (lambda (h3457@id) (let ((h3459@lab (h2ecb@id->label h3457@id))) (let ((h345b@b (h2ecd@label->binding h3459@lab h344c@r))) (let ((h345d@type (h2ed1@binding-type h345b@b))) (begin (if (not h3459@lab) (h2ed5@raise-unbound-error h3457@id) (void)) (if (not (and (eq? h345d@type '$rtd) (list? (h2ed3@binding-value h345b@b)))) (h319c@syntax-violation '#f '"invalid type" h344b@e) (void)) (h30de@chi-expr (cadr (h2ed3@binding-value h345b@b)) h344c@r h344d@mr)))))) h3453@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3451@t)))))) (set! h4b63@h305e@record-constructor-descriptor-transformer h305e@record-constructor-descriptor-transformer) (set! h3060@when-macro (lambda (h345f@e) (let ((h3461@t h345f@e)) (let ((h3463@ls/false (h30bc@syntax-dispatch h3461@t '(_ any any . each-any)))) (if h3463@ls/false (apply (lambda (h3465@test h3466@e h3467@e*) (h3072@bless (list 'if h3465@test (cons 'begin (cons h3466@e h3467@e*))))) h3463@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3461@t)))))) (set! h4b64@h3060@when-macro h3060@when-macro) (set! h3062@unless-macro (lambda (h346b@e) (let ((h346d@t h346b@e)) (let ((h346f@ls/false (h30bc@syntax-dispatch h346d@t '(_ any any . each-any)))) (if h346f@ls/false (apply (lambda (h3471@test h3472@e h3473@e*) (h3072@bless (list 'if (list 'not h3471@test) (cons 'begin (cons h3472@e h3473@e*))))) h346f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h346d@t)))))) (set! h4b65@h3062@unless-macro h3062@unless-macro) (set! h3064@if-transformer (lambda (h3477@e h3478@r h3479@mr) (let ((h347d@t h3477@e)) (let ((h347f@ls/false (h30bc@syntax-dispatch h347d@t '(_ any any any)))) (if h347f@ls/false (apply (lambda (h3481@e0 h3482@e1 h3483@e2) (list 'if (h30de@chi-expr h3481@e0 h3478@r h3479@mr) (h30de@chi-expr h3482@e1 h3478@r h3479@mr) (h30de@chi-expr h3483@e2 h3478@r h3479@mr))) h347f@ls/false) (let ((h3487@t h347d@t)) (let ((h3489@ls/false (h30bc@syntax-dispatch h3487@t '(_ any any)))) (if h3489@ls/false (apply (lambda (h348b@e0 h348c@e1) (list 'if (h30de@chi-expr h348b@e0 h3478@r h3479@mr) (h30de@chi-expr h348c@e1 h3478@r h3479@mr) (h2e1b@h2d7c@build-void))) h3489@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3487@t))))))))) (set! h4b66@h3064@if-transformer h3064@if-transformer) (set! h3066@and-transformer (lambda (h348f@e h3490@r h3491@mr) (let ((h3495@t h348f@e)) (let ((h3497@ls/false (h30bc@syntax-dispatch h3495@t '(_ . each-any)))) (if h3497@ls/false (apply (lambda (h3499@e*) (cons 'and (h30da@chi-expr* h3499@e* h3490@r h3491@mr))) h3497@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3495@t)))))) (set! h4b67@h3066@and-transformer h3066@and-transformer) (set! h3068@or-transformer (lambda (h349b@e h349c@r h349d@mr) (let ((h34a1@t h349b@e)) (let ((h34a3@ls/false (h30bc@syntax-dispatch h34a1@t '(_ . each-any)))) (if h34a3@ls/false (apply (lambda (h34a5@e*) (cons 'or (h30da@chi-expr* h34a5@e* h349c@r h349d@mr))) h34a3@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34a1@t)))))) (set! h4b68@h3068@or-transformer h3068@or-transformer) (set! h306a@case-macro (lambda (h34a7@e) (letrec* ((h34aa@build-last (lambda (h34d1@cls) (let ((h34d3@t h34d1@cls)) (let ((h34d5@ls/false (h30bc@syntax-dispatch h34d3@t '(#(scheme-id else) any . each-any)))) (if h34d5@ls/false (apply (lambda (h34d7@e h34d8@e*) (cons 'begin (cons h34d7@e h34d8@e*))) h34d5@ls/false) (let ((h34db@t h34d3@t)) (let ((h34dd@ls/false (h30bc@syntax-dispatch h34db@t '_))) (if h34dd@ls/false (apply (lambda () (h34ac@build-one h34d1@cls '(if #f #f))) h34dd@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34db@t))))))))) (h34ac@build-one (lambda (h34c3@cls h34c4@k) (let ((h34c7@t h34c3@cls)) (let ((h34c9@ls/false (h30bc@syntax-dispatch h34c7@t '(each-any any . each-any)))) (if h34c9@ls/false (apply (lambda (h34cb@d* h34cc@e h34cd@e*) (list 'if (list 'memv 't (list 'quote h34cb@d*)) (cons 'begin (cons h34cc@e h34cd@e*)) h34c4@k)) h34c9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34c7@t))))))) (let ((h34ad@t h34a7@e)) (let ((h34af@ls/false (h30bc@syntax-dispatch h34ad@t '(_ any)))) (if h34af@ls/false (apply (lambda (h34b1@expr) (h3072@bless (cons 'let (cons (list (list 't h34b1@expr)) '((if #f #f)))))) h34af@ls/false) (let ((h34b3@t h34ad@t)) (let ((h34b5@ls/false (h30bc@syntax-dispatch h34b3@t '(_ any any . each-any)))) (if h34b5@ls/false (apply (lambda (h34b7@expr h34b8@cls h34b9@cls*) (h3072@bless (list 'let (list (list 't h34b7@expr)) (let h34c1@f ((h34bd@cls h34b8@cls) (h34be@cls* h34b9@cls*)) (if (null? h34be@cls*) (h34aa@build-last h34bd@cls) (h34ac@build-one h34bd@cls (h34c1@f (car h34be@cls*) (cdr h34be@cls*)))))))) h34b5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34b3@t)))))))))) (set! h4b69@h306a@case-macro h306a@case-macro) (set! h306c@quote-transformer (lambda (h34df@e h34e0@r h34e1@mr) (let ((h34e5@t h34df@e)) (let ((h34e7@ls/false (h30bc@syntax-dispatch h34e5@t '(_ any)))) (if h34e7@ls/false (apply (lambda (h34e9@datum) (list 'quote (h2ec9@stx->datum h34e9@datum))) h34e7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34e5@t)))))) (set! h4b6a@h306c@quote-transformer h306c@quote-transformer) (set! h306e@case-lambda-transformer (lambda (h34eb@e h34ec@r h34ed@mr) (let ((h34f1@t h34eb@e)) (let ((h34f3@ls/false (h30bc@syntax-dispatch h34f1@t '(_ . #(each (any any . each-any)))))) (if h34f3@ls/false (apply (lambda (h34f5@fmls* h34f6@b* h34f7@b**) (call-with-values (lambda () (h30e6@chi-lambda-clause* h34eb@e h34f5@fmls* (map cons h34f6@b* h34f7@b**) h34ec@r h34ed@mr)) (lambda (h34ff@h34fc h3500@h34fe) (let ((h3503@body* h3500@h34fe) (h3504@fmls* h34ff@h34fc)) (h2e19@h2d4c@build-case-lambda '#f h3504@fmls* h3503@body*))))) h34f3@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h34f1@t)))))) (set! h4b6b@h306e@case-lambda-transformer h306e@case-lambda-transformer) (set! h3070@lambda-transformer (lambda (h3507@e h3508@r h3509@mr) (let ((h350d@t h3507@e)) (let ((h350f@ls/false (h30bc@syntax-dispatch h350d@t '(_ any any . each-any)))) (if h350f@ls/false (apply (lambda (h3511@fmls h3512@b h3513@b*) (call-with-values (lambda () (h30e4@chi-lambda-clause h3507@e h3511@fmls (cons h3512@b h3513@b*) h3508@r h3509@mr)) (lambda (h351b@h3518 h351c@h351a) (let ((h351f@body h351c@h351a) (h3520@fmls h351b@h3518)) (h2e18@h2d4a@build-lambda '#f h3520@fmls h351f@body))))) h350f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h350d@t)))))) (set! h4b6c@h3070@lambda-transformer h3070@lambda-transformer) (set! h3072@bless (lambda (h3523@x) (h2e9d@mkstx (let h3527@f ((h3525@x h3523@x)) (if (h2e81@stx? h3525@x) h3525@x (if (pair? h3525@x) (cons (h3527@f (car h3525@x)) (h3527@f (cdr h3525@x))) (if (symbol? h3525@x) (h3044@scheme-stx h3525@x) (if (vector? h3525@x) (vector-map h3527@f h3525@x) h3525@x))))) '() '() '()))) (set! h4b6d@h3072@bless h3072@bless) (set! h3074@with-syntax-macro (lambda (h3529@e) (let ((h352b@t h3529@e)) (let ((h352d@ls/false (h30bc@syntax-dispatch h352b@t '(_ #(each (any any)) any . each-any)))) (if h352d@ls/false (apply (lambda (h352f@pat* h3530@expr* h3531@b h3532@b*) (let ((h3537@idn* (let h353b@f ((h3539@pat* h352f@pat*)) (if (null? h3539@pat*) '() (call-with-values (lambda () (h30ba@convert-pattern (car h3539@pat*) '())) (lambda (h3541@h353e h3542@h3540) (let ((h3545@idn* h3542@h3540) (h3546@pat h3541@h353e)) (append h3545@idn* (h353b@f (cdr h3539@pat*)))))))))) (begin (h30e2@verify-formals (map car h3537@idn*) h3529@e) (let ((h3549@t* (h318a@generate-temporaries h3530@expr*))) (h3072@bless (list 'let (map list h3549@t* h3530@expr*) (let h354f@f ((h354b@pat* h352f@pat*) (h354c@t* h3549@t*)) (if (null? h354b@pat*) (cons 'begin (cons '#f (cons h3531@b h3532@b*))) (list 'syntax-case (car h354c@t*) '() (list (car h354b@pat*) (h354f@f (cdr h354b@pat*) (cdr h354c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car h354b@pat*)) (car h354c@t*)))))))))))) h352d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h352b@t)))))) (set! h4b6e@h3074@with-syntax-macro h3074@with-syntax-macro) (set! h3076@invalid-fmls-error (lambda (h3551@stx h3552@fmls) (let ((h3555@t h3552@fmls)) (let ((h3557@ls/false (h30bc@syntax-dispatch h3555@t '#(each+ any () any)))) (if h3557@ls/false (apply (lambda (h3559@id* h355a@last) (let h355f@f ((h355d@id* (if (h2eb5@id? h355a@last) (cons h355a@last h3559@id*) (if (h2eab@syntax-null? h355a@last) h3559@id* (h319c@syntax-violation '#f '"not an identifier" h3551@stx h355a@last))))) (if (null? h355d@id*) (values) (if (not (h2eb5@id? (car h355d@id*))) (h319c@syntax-violation '#f '"not an identifier" h3551@stx (car h355d@id*)) (begin (h355f@f (cdr h355d@id*)) (if (h2ec1@bound-id-member? (car h355d@id*) (cdr h355d@id*)) (h319c@syntax-violation '#f '"duplicate binding" h3551@stx (car h355d@id*)) (void))))))) h3557@ls/false) (let ((h3561@t h3555@t)) (let ((h3563@ls/false (h30bc@syntax-dispatch h3561@t '_))) (if h3563@ls/false (apply (lambda () (h319c@syntax-violation '#f '"malformed binding form" h3551@stx h3552@fmls)) h3563@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3561@t))))))))) (set! h4b6f@h3076@invalid-fmls-error h3076@invalid-fmls-error) (set! h3078@let-macro (lambda (h3565@stx) (let ((h3567@t h3565@stx)) (let ((h3569@ls/false (h30bc@syntax-dispatch h3567@t '(_ #(each (any any)) any . each-any)))) (if h3569@ls/false (apply (lambda (h356b@lhs* h356c@rhs* h356d@b h356e@b*) (if (h2ebd@valid-bound-ids? h356b@lhs*) (h3072@bless (cons (cons 'lambda (cons h356b@lhs* (cons h356d@b h356e@b*))) h356c@rhs*)) (h3076@invalid-fmls-error h3565@stx h356b@lhs*))) h3569@ls/false) (let ((h3573@t h3567@t)) (let ((h3575@ls/false (h30bc@syntax-dispatch h3573@t '(_ any #(each (any any)) any . each-any)))) (if (and h3575@ls/false (apply (lambda (h3577@f h3578@lhs* h3579@rhs* h357a@b h357b@b*) (h2eb5@id? h3577@f)) h3575@ls/false)) (apply (lambda (h3581@f h3582@lhs* h3583@rhs* h3584@b h3585@b*) (if (h2ebd@valid-bound-ids? h3582@lhs*) (h3072@bless (cons (list 'letrec (list (list h3581@f (cons 'lambda (cons h3582@lhs* (cons h3584@b h3585@b*))))) h3581@f) h3583@rhs*)) (h3076@invalid-fmls-error h3565@stx h3582@lhs*))) h3575@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3573@t))))))))) (set! h4b70@h3078@let-macro h3078@let-macro) (set! h307a@let-values-macro (lambda (h358b@stx) (letrec* ((h358e@rename (lambda (h35f3@x h35f4@old* h35f5@new*) (begin (if (not (h2eb5@id? h35f3@x)) (h319c@syntax-violation '#f '"not an indentifier" h358b@stx h35f3@x) (void)) (if (h2ec1@bound-id-member? h35f3@x h35f4@old*) (h319c@syntax-violation '#f '"duplicate binding" h358b@stx h35f3@x) (void)) (let ((h35f9@y (gensym (h31a2@syntax->datum h35f3@x)))) (values h35f9@y (cons h35f3@x h35f4@old*) (cons h35f9@y h35f5@new*)))))) (h3590@rename* (lambda (h35e1@x* h35e2@old* h35e3@new*) (if (null? h35e1@x*) (values '() h35e2@old* h35e3@new*) (call-with-values (lambda () (h358e@rename (car h35e1@x*) h35e2@old* h35e3@new*)) (lambda (h35e7@x h35e8@old* h35e9@new*) (call-with-values (lambda () (h3590@rename* (cdr h35e1@x*) h35e8@old* h35e9@new*)) (lambda (h35ed@x* h35ee@old* h35ef@new*) (values (cons h35e7@x h35ed@x*) h35ee@old* h35ef@new*))))))))) (let ((h3591@t h358b@stx)) (let ((h3593@ls/false (h30bc@syntax-dispatch h3591@t '(_ () any . each-any)))) (if h3593@ls/false (apply (lambda (h3595@b h3596@b*) (cons* (h3072@bless 'let) '() h3595@b h3596@b*)) h3593@ls/false) (let ((h3599@t h3591@t)) (let ((h359b@ls/false (h30bc@syntax-dispatch h3599@t '(_ #(each (any any)) any . each-any)))) (if h359b@ls/false (apply (lambda (h359d@lhs* h359e@rhs* h359f@b h35a0@b*) (h3072@bless (let h35ad@f ((h35a5@lhs* h359d@lhs*) (h35a6@rhs* h359e@rhs*) (h35a7@old* '()) (h35a8@new* '())) (if (null? h35a5@lhs*) (cons 'let (cons (map list h35a7@old* h35a8@new*) (cons h359f@b h35a0@b*))) (let ((h35af@t (car h35a5@lhs*))) (let ((h35b1@ls/false (h30bc@syntax-dispatch h35af@t 'each-any))) (if h35b1@ls/false (apply (lambda (h35b3@x*) (call-with-values (lambda () (h3590@rename* h35b3@x* h35a7@old* h35a8@new*)) (lambda (h35bb@h35b6 h35bc@h35b8 h35bd@h35ba) (let ((h35c1@new* h35bd@h35ba) (h35c2@old* h35bc@h35b8) (h35c3@y* h35bb@h35b6)) (list 'call-with-values (list 'lambda '() (car h35a6@rhs*)) (list 'lambda h35c3@y* (h35ad@f (cdr h35a5@lhs*) (cdr h35a6@rhs*) h35c2@old* h35c1@new*))))))) h35b1@ls/false) (let ((h35c7@t h35af@t)) (let ((h35c9@ls/false (h30bc@syntax-dispatch h35c7@t '#(each+ any () any)))) (if h35c9@ls/false (apply (lambda (h35cb@x* h35cc@x) (call-with-values (lambda () (h358e@rename h35cc@x h35a7@old* h35a8@new*)) (lambda (h35cf@y h35d0@old* h35d1@new*) (call-with-values (lambda () (h3590@rename* h35cb@x* h35d0@old* h35d1@new*)) (lambda (h35d5@y* h35d6@old* h35d7@new*) (list 'call-with-values (list 'lambda '() (car h35a6@rhs*)) (list 'lambda (append h35d5@y* h35cf@y) (h35ad@f (cdr h35a5@lhs*) (cdr h35a6@rhs*) h35d6@old* h35d7@new*)))))))) h35c9@ls/false) (let ((h35db@t h35c7@t)) (let ((h35dd@ls/false (h30bc@syntax-dispatch h35db@t 'any))) (if h35dd@ls/false (apply (lambda (h35df@others) (h319c@syntax-violation '#f '"malformed bindings" h358b@stx h35df@others)) h35dd@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h35db@t)))))))))))))) h359b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3599@t)))))))))) (set! h4b71@h307a@let-values-macro h307a@let-values-macro) (set! h307c@let*-values-macro (lambda (h35fb@stx) (letrec* ((h35fe@check (lambda (h362d@x*) (if (not (null? h362d@x*)) (let ((h362f@x (car h362d@x*))) (begin (if (not (h2eb5@id? h362f@x)) (h319c@syntax-violation '#f '"not an identifier" h35fb@stx h362f@x) (void)) (h35fe@check (cdr h362d@x*)) (if (h2ec1@bound-id-member? h362f@x (cdr h362d@x*)) (h319c@syntax-violation '#f '"duplicate identifier" h35fb@stx h362f@x) (void)))) (void))))) (let ((h35ff@t h35fb@stx)) (let ((h3601@ls/false (h30bc@syntax-dispatch h35ff@t '(_ () any . each-any)))) (if h3601@ls/false (apply (lambda (h3603@b h3604@b*) (cons* (h3072@bless 'let) '() h3603@b h3604@b*)) h3601@ls/false) (let ((h3607@t h35ff@t)) (let ((h3609@ls/false (h30bc@syntax-dispatch h3607@t '(_ #(each (any any)) any . each-any)))) (if h3609@ls/false (apply (lambda (h360b@lhs* h360c@rhs* h360d@b h360e@b*) (h3072@bless (let h3617@f ((h3613@lhs* h360b@lhs*) (h3614@rhs* h360c@rhs*)) (if (null? h3613@lhs*) (cons 'begin (cons h360d@b h360e@b*)) (let ((h3619@t (car h3613@lhs*))) (let ((h361b@ls/false (h30bc@syntax-dispatch h3619@t 'each-any))) (if h361b@ls/false (apply (lambda (h361d@x*) (begin (h35fe@check h361d@x*) (list 'call-with-values (list 'lambda '() (car h3614@rhs*)) (list 'lambda h361d@x* (h3617@f (cdr h3613@lhs*) (cdr h3614@rhs*)))))) h361b@ls/false) (let ((h361f@t h3619@t)) (let ((h3621@ls/false (h30bc@syntax-dispatch h361f@t '#(each+ any () any)))) (if h3621@ls/false (apply (lambda (h3623@x* h3624@x) (begin (h35fe@check (cons h3624@x h3623@x*)) (list 'call-with-values (list 'lambda '() (car h3614@rhs*)) (list 'lambda (append h3623@x* h3624@x) (h3617@f (cdr h3613@lhs*) (cdr h3614@rhs*)))))) h3621@ls/false) (let ((h3627@t h361f@t)) (let ((h3629@ls/false (h30bc@syntax-dispatch h3627@t 'any))) (if h3629@ls/false (apply (lambda (h362b@others) (h319c@syntax-violation '#f '"malformed bindings" h35fb@stx h362b@others)) h3629@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3627@t)))))))))))))) h3609@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3607@t)))))))))) (set! h4b72@h307c@let*-values-macro h307c@let*-values-macro) (set! h307e@trace-lambda-macro (lambda (h3631@stx) (let ((h3633@t h3631@stx)) (let ((h3635@ls/false (h30bc@syntax-dispatch h3633@t '(_ any each-any any . each-any)))) (if h3635@ls/false (apply (lambda (h3637@who h3638@fmls h3639@b h363a@b*) (if (h2ebd@valid-bound-ids? h3638@fmls) (h3072@bless (list 'make-traced-procedure (list 'quote h3637@who) (cons 'lambda (cons h3638@fmls (cons h3639@b h363a@b*))))) (h3076@invalid-fmls-error h3631@stx h3638@fmls))) h3635@ls/false) (let ((h363f@t h3633@t)) (let ((h3641@ls/false (h30bc@syntax-dispatch h363f@t '(_ any #(each+ any () any) any . each-any)))) (if h3641@ls/false (apply (lambda (h3643@who h3644@fmls h3645@last h3646@b h3647@b*) (if (h2ebd@valid-bound-ids? (cons h3645@last h3644@fmls)) (h3072@bless (list 'make-traced-procedure (list 'quote h3643@who) (cons 'lambda (cons (append h3644@fmls h3645@last) (cons h3646@b h3647@b*))))) (h3076@invalid-fmls-error h3631@stx (append h3644@fmls h3645@last)))) h3641@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h363f@t))))))))) (set! h4b73@h307e@trace-lambda-macro h307e@trace-lambda-macro) (set! h3080@trace-define-macro (lambda (h364d@stx) (let ((h364f@t h364d@stx)) (let ((h3651@ls/false (h30bc@syntax-dispatch h364f@t '(_ (any . each-any) any . each-any)))) (if h3651@ls/false (apply (lambda (h3653@who h3654@fmls h3655@b h3656@b*) (if (h2ebd@valid-bound-ids? h3654@fmls) (h3072@bless (list 'define h3653@who (list 'make-traced-procedure (list 'quote h3653@who) (cons 'lambda (cons h3654@fmls (cons h3655@b h3656@b*)))))) (h3076@invalid-fmls-error h364d@stx h3654@fmls))) h3651@ls/false) (let ((h365b@t h364f@t)) (let ((h365d@ls/false (h30bc@syntax-dispatch h365b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if h365d@ls/false (apply (lambda (h365f@who h3660@fmls h3661@last h3662@b h3663@b*) (if (h2ebd@valid-bound-ids? (cons h3661@last h3660@fmls)) (h3072@bless (list 'define h365f@who (list 'make-traced-procedure (list 'quote h365f@who) (cons 'lambda (cons (append h3660@fmls h3661@last) (cons h3662@b h3663@b*)))))) (h3076@invalid-fmls-error h364d@stx (append h3660@fmls h3661@last)))) h365d@ls/false) (let ((h3669@t h365b@t)) (let ((h366b@ls/false (h30bc@syntax-dispatch h3669@t '(_ any any)))) (if h366b@ls/false (apply (lambda (h366d@who h366e@expr) (if (h2eb5@id? h366d@who) (h3072@bless (list 'define h366d@who (list 'let (list (list 'v h366e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote h366d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (h319c@syntax-violation '#f '"invalid name" h364d@stx))) h366b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3669@t)))))))))))) (set! h4b74@h3080@trace-define-macro h3080@trace-define-macro) (set! h3082@trace-define-syntax-macro (lambda (h3671@stx) (let ((h3673@t h3671@stx)) (let ((h3675@ls/false (h30bc@syntax-dispatch h3673@t '(_ any any)))) (if h3675@ls/false (apply (lambda (h3677@who h3678@expr) (if (h2eb5@id? h3677@who) (h3072@bless (list 'define-syntax h3677@who (list 'make-traced-macro (list 'quote h3677@who) h3678@expr))) (h319c@syntax-violation '#f '"invalid name" h3671@stx))) h3675@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3673@t)))))) (set! h4b75@h3082@trace-define-syntax-macro h3082@trace-define-syntax-macro) (set! h3084@trace-let/rec-syntax (lambda (h367b@who) (lambda (h367d@stx) (let ((h367f@t h367d@stx)) (let ((h3681@ls/false (h30bc@syntax-dispatch h367f@t '(_ #(each (any any)) any . each-any)))) (if h3681@ls/false (apply (lambda (h3683@lhs* h3684@rhs* h3685@b h3686@b*) (if (h2ebd@valid-bound-ids? h3683@lhs*) (let ((h368b@rhs* (map (lambda (h368d@lhs h368e@rhs) (list 'make-traced-macro (list 'quote h368d@lhs) h368e@rhs)) h3683@lhs* h3684@rhs*))) (h3072@bless (cons h367b@who (cons (map list h3683@lhs* h368b@rhs*) (cons h3685@b h3686@b*))))) (h3076@invalid-fmls-error h367d@stx h3683@lhs*))) h3681@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h367f@t))))))) (set! h4b76@h3084@trace-let/rec-syntax h3084@trace-let/rec-syntax) (set! h3086@trace-let-syntax-macro (h3084@trace-let/rec-syntax 'let-syntax)) (set! h4b77@h3086@trace-let-syntax-macro h3086@trace-let-syntax-macro) (set! h3088@trace-letrec-syntax-macro (h3084@trace-let/rec-syntax 'letrec-syntax)) (set! h4b78@h3088@trace-letrec-syntax-macro h3088@trace-letrec-syntax-macro) (set! h308a@guard-macro (lambda (h3691@x) (letrec* ((h3694@gen-clauses (lambda (h36ab@con h36ac@outerk h36ad@clause*) (letrec* ((h36b2@f (lambda (h36eb@x h36ec@k) (let ((h36ef@t h36eb@x)) (let ((h36f1@ls/false (h30bc@syntax-dispatch h36ef@t '(any #(scheme-id =>) any)))) (if h36f1@ls/false (apply (lambda (h36f3@e h36f4@p) (let ((h36f7@t (gensym))) (list 'let (list (list h36f7@t h36f3@e)) (list 'if h36f7@t (list h36f4@p h36f7@t) h36ec@k)))) h36f1@ls/false) (let ((h36f9@t h36ef@t)) (let ((h36fb@ls/false (h30bc@syntax-dispatch h36f9@t '(any)))) (if h36fb@ls/false (apply (lambda (h36fd@e) (let ((h36ff@t (gensym))) (list 'let (list (list h36ff@t h36fd@e)) (list 'if h36ff@t h36ff@t h36ec@k)))) h36fb@ls/false) (let ((h3701@t h36f9@t)) (let ((h3703@ls/false (h30bc@syntax-dispatch h3701@t '(any any . each-any)))) (if h3703@ls/false (apply (lambda (h3705@e h3706@v h3707@v*) (list 'if h3705@e (cons 'begin (cons h3706@v h3707@v*)) h36ec@k)) h3703@ls/false) (let ((h370b@t h3701@t)) (let ((h370d@ls/false (h30bc@syntax-dispatch h370b@t '_))) (if h370d@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid guard clause" h36eb@x)) h370d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h370b@t))))))))))))))) (h36b4@f* (lambda (h36c1@x*) (let ((h36c3@t h36c1@x*)) (let ((h36c5@ls/false (h30bc@syntax-dispatch h36c3@t '()))) (if h36c5@ls/false (apply (lambda () (let ((h36c7@g (gensym))) (values (list h36c7@g (list 'lambda '() (list 'raise-continuable h36ab@con))) h36c7@g))) h36c5@ls/false) (let ((h36c9@t h36c3@t)) (let ((h36cb@ls/false (h30bc@syntax-dispatch h36c9@t '((#(scheme-id else) any . each-any))))) (if h36cb@ls/false (apply (lambda (h36cd@e h36ce@e*) (values (cons 'begin (cons h36cd@e h36ce@e*)) '#f)) h36cb@ls/false) (let ((h36d1@t h36c9@t)) (let ((h36d3@ls/false (h30bc@syntax-dispatch h36d1@t '(any . any)))) (if h36d3@ls/false (apply (lambda (h36d5@cls h36d6@cls*) (call-with-values (lambda () (h36b4@f* h36d6@cls*)) (lambda (h36dd@h36da h36de@h36dc) (let ((h36e1@g h36de@h36dc) (h36e2@e h36dd@h36da)) (values (h36b2@f h36d5@cls h36e2@e) h36e1@g))))) h36d3@ls/false) (let ((h36e5@t h36d1@t)) (let ((h36e7@ls/false (h30bc@syntax-dispatch h36e5@t 'any))) (if h36e7@ls/false (apply (lambda (h36e9@others) (h319c@syntax-violation '#f '"invalid guard clause" h36e9@others)) h36e7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h36e5@t)))))))))))))))) (call-with-values (lambda () (h36b4@f* h36ad@clause*)) (lambda (h36b9@h36b6 h36ba@h36b8) (let ((h36bd@raisek h36ba@h36b8) (h36be@code h36b9@h36b6)) (if h36bd@raisek (list (list 'call/cc (list 'lambda (list h36bd@raisek) (list h36ac@outerk (list 'lambda '() h36be@code))))) (list h36ac@outerk (list 'lambda '() h36be@code)))))))))) (let ((h3695@t h3691@x)) (let ((h3697@ls/false (h30bc@syntax-dispatch h3695@t '(_ (any . each-any) any . each-any)))) (if (and h3697@ls/false (apply (lambda (h3699@con h369a@clause* h369b@b h369c@b*) (h2eb5@id? h3699@con)) h3697@ls/false)) (apply (lambda (h36a1@con h36a2@clause* h36a3@b h36a4@b*) (let ((h36a9@outerk (gensym))) (h3072@bless (list (list 'call/cc (list 'lambda (list h36a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list h36a1@con) (h3694@gen-clauses h36a1@con h36a9@outerk h36a2@clause*)) (cons 'lambda (cons '() (cons h36a3@b h36a4@b*))))))))))) h3697@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3695@t))))))) (set! h4b79@h308a@guard-macro h308a@guard-macro) (set! h308c@define-enumeration-macro (lambda (h370f@stx) (letrec* ((h3712@set? (lambda (h372b@x) (or (null? h372b@x) (and (not (memq (car h372b@x) (cdr h372b@x))) (h3712@set? (cdr h372b@x)))))) (h3714@remove-dups (lambda (h3729@ls) (if (null? h3729@ls) '() (cons (car h3729@ls) (h3714@remove-dups (remq (car h3729@ls) (cdr h3729@ls)))))))) (let ((h3715@t h370f@stx)) (let ((h3717@ls/false (h30bc@syntax-dispatch h3715@t '(_ any each-any any)))) (if (and h3717@ls/false (apply (lambda (h3719@name h371a@id* h371b@maker) (and (h2eb5@id? h3719@name) (h2eb5@id? h371b@maker) (for-all h2eb5@id? h371a@id*))) h3717@ls/false)) (apply (lambda (h371f@name h3720@id* h3721@maker) (let ((h3725@name* (h3714@remove-dups (h31a2@syntax->datum h3720@id*))) (h3726@mk (gensym))) (h3072@bless (list 'begin (list 'define h3726@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote h3725@name*)))) (list 'define-syntax h371f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote h3725@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote h371f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax h3721@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote h3721@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote h3725@name*)) (cons 'syntax-violation (cons (list 'quote h3721@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons h3726@mk '('(n* ...))))))))))))) h3717@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3715@t))))))) (set! h4b7a@h308c@define-enumeration-macro h308c@define-enumeration-macro) (set! h308e@time-macro (lambda (h372d@stx) (let ((h372f@t h372d@stx)) (let ((h3731@ls/false (h30bc@syntax-dispatch h372f@t '(_ any)))) (if h3731@ls/false (apply (lambda (h3733@expr) (h3072@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() h3733@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) h3731@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h372f@t)))))) (set! h4b7b@h308e@time-macro h308e@time-macro) (set! h3090@delay-macro (lambda (h3735@stx) (let ((h3737@t h3735@stx)) (let ((h3739@ls/false (h30bc@syntax-dispatch h3737@t '(_ any)))) (if h3739@ls/false (apply (lambda (h373b@expr) (h3072@bless (list 'make-promise (list 'lambda '() h373b@expr)))) h3739@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3737@t)))))) (set! h4b7c@h3090@delay-macro h3090@delay-macro) (set! h3092@assert-macro (lambda (h373d@stx) (let ((h373f@t h373d@stx)) (let ((h3741@ls/false (h30bc@syntax-dispatch h373f@t '(_ any)))) (if h3741@ls/false (apply (lambda (h3743@expr) (let ((h3745@pos (or (h3194@expression-position h373d@stx) (h3194@expression-position h3743@expr)))) (h3072@bless (list 'let (list (list 'x h3743@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote h3743@expr) (list 'quote h3745@pos))))))) h3741@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h373f@t)))))) (set! h4b7d@h3092@assert-macro h3092@assert-macro) (set! h3094@endianness-macro (lambda (h3747@stx) (let ((h3749@t h3747@stx)) (let ((h374b@ls/false (h30bc@syntax-dispatch h3749@t '(_ any)))) (if h374b@ls/false (apply (lambda (h374d@e) (let ((h374f@t (h31a2@syntax->datum h374d@e))) (if (memv h374f@t '(little)) (h3072@bless ''little) (if (memv h374f@t '(big)) (h3072@bless ''big) (h319c@syntax-violation '#f '"endianness must be big or little" h3747@stx))))) h374b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3749@t)))))) (set! h4b7e@h3094@endianness-macro h3094@endianness-macro) (set! h3096@identifier-syntax-macro (lambda (h3751@stx) (let ((h3753@t h3751@stx)) (let ((h3755@ls/false (h30bc@syntax-dispatch h3753@t '(_ any)))) (if h3755@ls/false (apply (lambda (h3757@expr) (h3072@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax h3757@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax h3757@expr) '((syntax (e* ...)))))))))) h3755@ls/false) (let ((h3759@t h3753@t)) (let ((h375b@ls/false (h30bc@syntax-dispatch h3759@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and h375b@ls/false (apply (lambda (h375d@id1 h375e@expr1 h375f@id2 h3760@expr2 h3761@expr3) (and (h2eb5@id? h375d@id1) (h2eb5@id? h375f@id2) (h2eb5@id? h3760@expr2))) h375b@ls/false)) (apply (lambda (h3767@id1 h3768@expr1 h3769@id2 h376a@expr2 h376b@expr3) (h3072@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax h3768@expr1)) (list (list 'set! 'id h376a@expr2) (list 'syntax h376b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons h3768@expr1 '(e* ...))))))))) h375b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3759@t))))))))) (set! h4b7f@h3096@identifier-syntax-macro h3096@identifier-syntax-macro) (set! h3098@do-macro (lambda (h3771@stx) (letrec* ((h3774@bind (lambda (h378b@x) (let ((h378d@t h378b@x)) (let ((h378f@ls/false (h30bc@syntax-dispatch h378d@t '(any any)))) (if h378f@ls/false (apply (lambda (h3791@x h3792@init) (list h3791@x h3792@init h3791@x)) h378f@ls/false) (let ((h3795@t h378d@t)) (let ((h3797@ls/false (h30bc@syntax-dispatch h3795@t '(any any any)))) (if h3797@ls/false (apply (lambda (h3799@x h379a@init h379b@step) (list h3799@x h379a@init h379b@step)) h3797@ls/false) (let ((h379f@t h3795@t)) (let ((h37a1@ls/false (h30bc@syntax-dispatch h379f@t '_))) (if h37a1@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid binding" h3771@stx)) h37a1@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h379f@t))))))))))))) (let ((h3775@t h3771@stx)) (let ((h3777@ls/false (h30bc@syntax-dispatch h3775@t '(_ each-any (any . each-any) . each-any)))) (if h3777@ls/false (apply (lambda (h3779@binding* h377a@test h377b@expr* h377c@command*) (let ((h3781@t (map h3774@bind h3779@binding*))) (let ((h3783@ls/false (h30bc@syntax-dispatch h3781@t '#(each (any any any))))) (if h3783@ls/false (apply (lambda (h3785@x* h3786@init* h3787@step*) (if (h2ebd@valid-bound-ids? h3785@x*) (h3072@bless (list 'letrec (list (list 'loop (list 'lambda h3785@x* (list 'if h377a@test (cons 'begin (cons '(if #f #f) h377b@expr*)) (cons 'begin (append h377c@command* (list (cons 'loop h3787@step*)))))))) (cons 'loop h3786@init*))) (h319c@syntax-violation '#f '"invalid bindings" h3771@stx))) h3783@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3781@t))))) h3777@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3775@t))))))) (set! h4b80@h3098@do-macro h3098@do-macro) (set! h309a@let*-macro (lambda (h37a3@stx) (let ((h37a5@t h37a3@stx)) (let ((h37a7@ls/false (h30bc@syntax-dispatch h37a5@t '(_ #(each (any any)) any . each-any)))) (if (and h37a7@ls/false (apply (lambda (h37a9@lhs* h37aa@rhs* h37ab@b h37ac@b*) (for-all h2eb5@id? h37a9@lhs*)) h37a7@ls/false)) (apply (lambda (h37b1@lhs* h37b2@rhs* h37b3@b h37b4@b*) (h3072@bless (let h37bb@f ((h37b9@x* (map list h37b1@lhs* h37b2@rhs*))) (if (null? h37b9@x*) (cons 'let (cons '() (cons h37b3@b h37b4@b*))) (list 'let (list (car h37b9@x*)) (h37bb@f (cdr h37b9@x*))))))) h37a7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h37a5@t)))))) (set! h4b81@h309a@let*-macro h309a@let*-macro) (set! h309c@or-macro (lambda (h37bd@stx) (let ((h37bf@t h37bd@stx)) (let ((h37c1@ls/false (h30bc@syntax-dispatch h37bf@t '(_)))) (if h37c1@ls/false (apply (lambda () '#f) h37c1@ls/false) (let ((h37c3@t h37bf@t)) (let ((h37c5@ls/false (h30bc@syntax-dispatch h37c3@t '(_ any . each-any)))) (if h37c5@ls/false (apply (lambda (h37c7@e h37c8@e*) (h3072@bless (let h37cf@f ((h37cb@e h37c7@e) (h37cc@e* h37c8@e*)) (if (null? h37cc@e*) (list 'begin '#f h37cb@e) (list 'let (list (list 't h37cb@e)) (list 'if 't 't (h37cf@f (car h37cc@e*) (cdr h37cc@e*)))))))) h37c5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h37c3@t))))))))) (set! h4b82@h309c@or-macro h309c@or-macro) (set! h309e@and-macro (lambda (h37d1@stx) (let ((h37d3@t h37d1@stx)) (let ((h37d5@ls/false (h30bc@syntax-dispatch h37d3@t '(_)))) (if h37d5@ls/false (apply (lambda () '#t) h37d5@ls/false) (let ((h37d7@t h37d3@t)) (let ((h37d9@ls/false (h30bc@syntax-dispatch h37d7@t '(_ any . each-any)))) (if h37d9@ls/false (apply (lambda (h37db@e h37dc@e*) (h3072@bless (let h37e3@f ((h37df@e h37db@e) (h37e0@e* h37dc@e*)) (if (null? h37e0@e*) (list 'begin '#f h37df@e) (cons 'if (cons h37df@e (cons (h37e3@f (car h37e0@e*) (cdr h37e0@e*)) '(#f)))))))) h37d9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h37d7@t))))))))) (set! h4b83@h309e@and-macro h309e@and-macro) (set! h30a0@cond-macro (lambda (h37e5@stx) (let ((h37e7@t h37e5@stx)) (let ((h37e9@ls/false (h30bc@syntax-dispatch h37e7@t '(_ any . each-any)))) (if h37e9@ls/false (apply (lambda (h37eb@cls h37ec@cls*) (h3072@bless (let h37f3@f ((h37ef@cls h37eb@cls) (h37f0@cls* h37ec@cls*)) (if (null? h37f0@cls*) (let ((h37f5@t h37ef@cls)) (let ((h37f7@ls/false (h30bc@syntax-dispatch h37f5@t '(#(scheme-id else) any . each-any)))) (if h37f7@ls/false (apply (lambda (h37f9@e h37fa@e*) (cons 'begin (cons h37f9@e h37fa@e*))) h37f7@ls/false) (let ((h37fd@t h37f5@t)) (let ((h37ff@ls/false (h30bc@syntax-dispatch h37fd@t '(any #(scheme-id =>) any)))) (if h37ff@ls/false (apply (lambda (h3801@e h3802@p) (list 'let (list (list 't h3801@e)) (list 'if 't (cons h3802@p '(t))))) h37ff@ls/false) (let ((h3805@t h37fd@t)) (let ((h3807@ls/false (h30bc@syntax-dispatch h3805@t '(any)))) (if h3807@ls/false (apply (lambda (h3809@e) (cons 'or (cons h3809@e '((if #f #f))))) h3807@ls/false) (let ((h380b@t h3805@t)) (let ((h380d@ls/false (h30bc@syntax-dispatch h380b@t '(any . each-any)))) (if h380d@ls/false (apply (lambda (h380f@e h3810@e*) (list 'if h380f@e (cons 'begin h3810@e*))) h380d@ls/false) (let ((h3813@t h380b@t)) (let ((h3815@ls/false (h30bc@syntax-dispatch h3813@t '_))) (if h3815@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid last clause" h37e5@stx)) h3815@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3813@t)))))))))))))))) (let ((h3817@t h37ef@cls)) (let ((h3819@ls/false (h30bc@syntax-dispatch h3817@t '(#(scheme-id else) any . each-any)))) (if h3819@ls/false (apply (lambda (h381b@e h381c@e*) (h319c@syntax-violation '#f '"incorrect position of keyword else" h37e5@stx)) h3819@ls/false) (let ((h381f@t h3817@t)) (let ((h3821@ls/false (h30bc@syntax-dispatch h381f@t '(any #(scheme-id =>) any)))) (if h3821@ls/false (apply (lambda (h3823@e h3824@p) (list 'let (list (list 't h3823@e)) (list 'if 't (cons h3824@p '(t)) (h37f3@f (car h37f0@cls*) (cdr h37f0@cls*))))) h3821@ls/false) (let ((h3827@t h381f@t)) (let ((h3829@ls/false (h30bc@syntax-dispatch h3827@t '(any)))) (if h3829@ls/false (apply (lambda (h382b@e) (list 'or h382b@e (h37f3@f (car h37f0@cls*) (cdr h37f0@cls*)))) h3829@ls/false) (let ((h382d@t h3827@t)) (let ((h382f@ls/false (h30bc@syntax-dispatch h382d@t '(any . each-any)))) (if h382f@ls/false (apply (lambda (h3831@e h3832@e*) (list 'if h3831@e (cons 'begin h3832@e*) (h37f3@f (car h37f0@cls*) (cdr h37f0@cls*)))) h382f@ls/false) (let ((h3835@t h382d@t)) (let ((h3837@ls/false (h30bc@syntax-dispatch h3835@t '_))) (if h3837@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid last clause" h37e5@stx)) h3837@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3835@t)))))))))))))))))))) h37e9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h37e7@t)))))) (set! h4b84@h30a0@cond-macro h30a0@cond-macro) (set! h30a2@do-include (lambda (h3839@stx h383a@id h383b@filename) (let ((h383f@filename (h2ec9@stx->datum h383b@filename))) (begin (if (not (and (string? h383f@filename) (h2eb5@id? h383a@id))) (h319c@syntax-violation '#f '"invalid syntax" h3839@stx) (void)) (cons (h3072@bless 'begin) (with-input-from-file h383f@filename (lambda () (let h3843@f ((h3841@ls '())) (let ((h3845@x (h29f7@h28c7@read-annotated))) (if (eof-object? h3845@x) (reverse h3841@ls) (h3843@f (cons (h2e95@datum->stx h383a@id h3845@x) h3841@ls)))))))))))) (set! h4b85@h30a2@do-include h30a2@do-include) (set! h30a4@include-macro (lambda (h3847@e) (let ((h3849@t h3847@e)) (let ((h384b@ls/false (h30bc@syntax-dispatch h3849@t '(any any)))) (if h384b@ls/false (apply (lambda (h384d@id h384e@filename) (h30a2@do-include h3847@e h384d@id h384e@filename)) h384b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3849@t)))))) (set! h4b86@h30a4@include-macro h30a4@include-macro) (set! h30a6@include-into-macro (lambda (h3851@e) (let ((h3853@t h3851@e)) (let ((h3855@ls/false (h30bc@syntax-dispatch h3853@t '(_ any any)))) (if h3855@ls/false (apply (lambda (h3857@id h3858@filename) (h30a2@do-include h3851@e h3857@id h3858@filename)) h3855@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3853@t)))))) (set! h4b87@h30a6@include-into-macro h30a6@include-into-macro) (set! h30a8@syntax-rules-macro (lambda (h385b@e) (let ((h385d@t h385b@e)) (let ((h385f@ls/false (h30bc@syntax-dispatch h385d@t '(_ each-any . #(each (any any)))))) (if h385f@ls/false (apply (lambda (h3861@lits h3862@pat* h3863@tmp*) (begin (h30c2@verify-literals h3861@lits h385b@e) (h3072@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons h3861@lits (map (lambda (h3867@pat h3868@tmp) (let ((h386b@t h3867@pat)) (let ((h386d@ls/false (h30bc@syntax-dispatch h386b@t '(_ . any)))) (if h386d@ls/false (apply (lambda (h386f@rest) (list (cons 'g h386f@rest) (list 'syntax h3868@tmp))) h386d@ls/false) (let ((h3871@t h386b@t)) (let ((h3873@ls/false (h30bc@syntax-dispatch h3871@t '_))) (if h3873@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid syntax-rules pattern" h385b@e h3867@pat)) h3873@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3871@t)))))))) h3862@pat* h3863@tmp*)))))))) h385f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h385d@t)))))) (set! h4b88@h30a8@syntax-rules-macro h30a8@syntax-rules-macro) (set! h30aa@quasiquote-macro (letrec* ((h3876@datum (lambda (h3977@x) (list (h3044@scheme-stx 'quote) (h2e9d@mkstx h3977@x '() '() '())))) (h3892@quasicons* (lambda (h396f@x h3970@y) (let h3975@f ((h3973@x h396f@x)) (if (null? h3973@x) h3970@y (h3894@quasicons (car h3973@x) (h3975@f (cdr h3973@x))))))) (h3894@quasicons (lambda (h3949@x h394a@y) (let ((h394d@t h394a@y)) (let ((h394f@ls/false (h30bc@syntax-dispatch h394d@t '(#(scheme-id quote) any)))) (if h394f@ls/false (apply (lambda (h3951@dy) (let ((h3953@t h3949@x)) (let ((h3955@ls/false (h30bc@syntax-dispatch h3953@t '(#(scheme-id quote) any)))) (if h3955@ls/false (apply (lambda (h3957@dx) (list (h3044@scheme-stx 'quote) (cons h3957@dx h3951@dy))) h3955@ls/false) (let ((h3959@t h3953@t)) (let ((h395b@ls/false (h30bc@syntax-dispatch h3959@t '_))) (if h395b@ls/false (apply (lambda () (let ((h395d@t h3951@dy)) (let ((h395f@ls/false (h30bc@syntax-dispatch h395d@t '()))) (if h395f@ls/false (apply (lambda () (list (h3044@scheme-stx 'list) h3949@x)) h395f@ls/false) (let ((h3961@t h395d@t)) (let ((h3963@ls/false (h30bc@syntax-dispatch h3961@t '_))) (if h3963@ls/false (apply (lambda () (list (h3044@scheme-stx 'cons) h3949@x h394a@y)) h3963@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3961@t)))))))) h395b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3959@t)))))))) h394f@ls/false) (let ((h3965@t h394d@t)) (let ((h3967@ls/false (h30bc@syntax-dispatch h3965@t '(#(scheme-id list) . each-any)))) (if h3967@ls/false (apply (lambda (h3969@stuff) (cons* (h3044@scheme-stx 'list) h3949@x h3969@stuff)) h3967@ls/false) (let ((h396b@t h3965@t)) (let ((h396d@ls/false (h30bc@syntax-dispatch h396b@t '_))) (if h396d@ls/false (apply (lambda () (list (h3044@scheme-stx 'cons) h3949@x h394a@y)) h396d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h396b@t)))))))))))) (h3896@quasiappend (lambda (h392f@x h3930@y) (let ((h3933@ls (let h3937@f ((h3935@x h392f@x)) (if (null? h3935@x) (let ((h3939@t h3930@y)) (let ((h393b@ls/false (h30bc@syntax-dispatch h3939@t '(#(scheme-id quote) ())))) (if h393b@ls/false (apply (lambda () '()) h393b@ls/false) (let ((h393d@t h3939@t)) (let ((h393f@ls/false (h30bc@syntax-dispatch h393d@t '_))) (if h393f@ls/false (apply (lambda () (list h3930@y)) h393f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h393d@t))))))) (let ((h3941@t (car h3935@x))) (let ((h3943@ls/false (h30bc@syntax-dispatch h3941@t '(#(scheme-id quote) ())))) (if h3943@ls/false (apply (lambda () (h3937@f (cdr h3935@x))) h3943@ls/false) (let ((h3945@t h3941@t)) (let ((h3947@ls/false (h30bc@syntax-dispatch h3945@t '_))) (if h3947@ls/false (apply (lambda () (cons (car h3935@x) (h3937@f (cdr h3935@x)))) h3947@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3945@t))))))))))) (if (null? h3933@ls) (list (h3044@scheme-stx 'quote) '()) (if (null? (cdr h3933@ls)) (car h3933@ls) (cons* (h3044@scheme-stx 'append) h3933@ls)))))) (h3898@quasivector (lambda (h38fd@x) (let ((h38ff@pat-x h38fd@x)) (let ((h3901@t h38ff@pat-x)) (let ((h3903@ls/false (h30bc@syntax-dispatch h3901@t '(#(scheme-id quote) each-any)))) (if h3903@ls/false (apply (lambda (h3905@x*) (list (h3044@scheme-stx 'quote) (list->vector h3905@x*))) h3903@ls/false) (let ((h3907@t h3901@t)) (let ((h3909@ls/false (h30bc@syntax-dispatch h3907@t '_))) (if h3909@ls/false (apply (lambda () (let h3911@f ((h390b@x h38fd@x) (h390c@k (lambda (h390f@ls) (cons* (h3044@scheme-stx 'vector) h390f@ls)))) (let ((h3913@t h390b@x)) (let ((h3915@ls/false (h30bc@syntax-dispatch h3913@t '(#(scheme-id quote) each-any)))) (if h3915@ls/false (apply (lambda (h3917@x*) (h390c@k (map (lambda (h3919@x) (list (h3044@scheme-stx 'quote) h3919@x)) h3917@x*))) h3915@ls/false) (let ((h391b@t h3913@t)) (let ((h391d@ls/false (h30bc@syntax-dispatch h391b@t '(#(scheme-id list) . each-any)))) (if h391d@ls/false (apply (lambda (h391f@x*) (h390c@k h391f@x*)) h391d@ls/false) (let ((h3921@t h391b@t)) (let ((h3923@ls/false (h30bc@syntax-dispatch h3921@t '(#(scheme-id cons) any any)))) (if h3923@ls/false (apply (lambda (h3925@x h3926@y) (h3911@f h3926@y (lambda (h3929@ls) (h390c@k (cons h3925@x h3929@ls))))) h3923@ls/false) (let ((h392b@t h3921@t)) (let ((h392d@ls/false (h30bc@syntax-dispatch h392b@t '_))) (if h392d@ls/false (apply (lambda () (list (h3044@scheme-stx 'list->vector) h38ff@pat-x)) h392d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h392b@t))))))))))))))) h3909@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3907@t)))))))))) (h389a@vquasi (lambda (h38db@p h38dc@lev) (let ((h38df@t h38db@p)) (let ((h38e1@ls/false (h30bc@syntax-dispatch h38df@t '(any . any)))) (if h38e1@ls/false (apply (lambda (h38e3@p h38e4@q) (let ((h38e7@t h38e3@p)) (let ((h38e9@ls/false (h30bc@syntax-dispatch h38e7@t '(#(scheme-id unquote) . each-any)))) (if h38e9@ls/false (apply (lambda (h38eb@p) (if (= h38dc@lev '0) (h3892@quasicons* h38eb@p (h389a@vquasi h38e4@q h38dc@lev)) (h3894@quasicons (h3894@quasicons (h3876@datum 'unquote) (h389c@quasi h38eb@p (- h38dc@lev '1))) (h389a@vquasi h38e4@q h38dc@lev)))) h38e9@ls/false) (let ((h38ed@t h38e7@t)) (let ((h38ef@ls/false (h30bc@syntax-dispatch h38ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if h38ef@ls/false (apply (lambda (h38f1@p) (if (= h38dc@lev '0) (h3896@quasiappend h38f1@p (h389a@vquasi h38e4@q h38dc@lev)) (h3894@quasicons (h3894@quasicons (h3876@datum 'unquote-splicing) (h389c@quasi h38f1@p (- h38dc@lev '1))) (h389a@vquasi h38e4@q h38dc@lev)))) h38ef@ls/false) (let ((h38f3@t h38ed@t)) (let ((h38f5@ls/false (h30bc@syntax-dispatch h38f3@t 'any))) (if h38f5@ls/false (apply (lambda (h38f7@p) (h3894@quasicons (h389c@quasi h38f7@p h38dc@lev) (h389a@vquasi h38e4@q h38dc@lev))) h38f5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h38f3@t))))))))))) h38e1@ls/false) (let ((h38f9@t h38df@t)) (let ((h38fb@ls/false (h30bc@syntax-dispatch h38f9@t '()))) (if h38fb@ls/false (apply (lambda () (list (h3044@scheme-stx 'quote) '())) h38fb@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h38f9@t))))))))) (h389c@quasi (lambda (h38a5@p h38a6@lev) (let ((h38a9@t h38a5@p)) (let ((h38ab@ls/false (h30bc@syntax-dispatch h38a9@t '(#(scheme-id unquote) any)))) (if h38ab@ls/false (apply (lambda (h38ad@p) (if (= h38a6@lev '0) h38ad@p (h3894@quasicons (h3876@datum 'unquote) (h389c@quasi (list h38ad@p) (- h38a6@lev '1))))) h38ab@ls/false) (let ((h38af@t h38a9@t)) (let ((h38b1@ls/false (h30bc@syntax-dispatch h38af@t '((#(scheme-id unquote) . each-any) . any)))) (if h38b1@ls/false (apply (lambda (h38b3@p h38b4@q) (if (= h38a6@lev '0) (h3892@quasicons* h38b3@p (h389c@quasi h38b4@q h38a6@lev)) (h3894@quasicons (h3894@quasicons (h3876@datum 'unquote) (h389c@quasi h38b3@p (- h38a6@lev '1))) (h389c@quasi h38b4@q h38a6@lev)))) h38b1@ls/false) (let ((h38b7@t h38af@t)) (let ((h38b9@ls/false (h30bc@syntax-dispatch h38b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if h38b9@ls/false (apply (lambda (h38bb@p h38bc@q) (if (= h38a6@lev '0) (h3896@quasiappend h38bb@p (h389c@quasi h38bc@q h38a6@lev)) (h3894@quasicons (h3894@quasicons (h3876@datum 'unquote-splicing) (h389c@quasi h38bb@p (- h38a6@lev '1))) (h389c@quasi h38bc@q h38a6@lev)))) h38b9@ls/false) (let ((h38bf@t h38b7@t)) (let ((h38c1@ls/false (h30bc@syntax-dispatch h38bf@t '(#(scheme-id quasiquote) any)))) (if h38c1@ls/false (apply (lambda (h38c3@p) (h3894@quasicons (h3876@datum 'quasiquote) (h389c@quasi (list h38c3@p) (+ h38a6@lev '1)))) h38c1@ls/false) (let ((h38c5@t h38bf@t)) (let ((h38c7@ls/false (h30bc@syntax-dispatch h38c5@t '(any . any)))) (if h38c7@ls/false (apply (lambda (h38c9@p h38ca@q) (h3894@quasicons (h389c@quasi h38c9@p h38a6@lev) (h389c@quasi h38ca@q h38a6@lev))) h38c7@ls/false) (let ((h38cd@t h38c5@t)) (let ((h38cf@ls/false (h30bc@syntax-dispatch h38cd@t '#(vector each-any)))) (if (and h38cf@ls/false (apply (lambda (h38d1@x) (not (h2e81@stx? h38d1@x))) h38cf@ls/false)) (apply (lambda (h38d3@x) (h3898@quasivector (h389a@vquasi h38d3@x h38a6@lev))) h38cf@ls/false) (let ((h38d5@t h38cd@t)) (let ((h38d7@ls/false (h30bc@syntax-dispatch h38d5@t 'any))) (if h38d7@ls/false (apply (lambda (h38d9@p) (list (h3044@scheme-stx 'quote) h38d9@p)) h38d7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h38d5@t))))))))))))))))))))))))) (lambda (h389d@x) (let ((h389f@t h389d@x)) (let ((h38a1@ls/false (h30bc@syntax-dispatch h389f@t '(_ any)))) (if h38a1@ls/false (apply (lambda (h38a3@e) (h389c@quasi h38a3@e '0)) h38a1@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h389f@t))))))) (set! h4b89@h30aa@quasiquote-macro h30aa@quasiquote-macro) (set! h30ac@quasisyntax-macro (letrec* ((h397a@quasi (lambda (h3995@p h3996@lev) (let ((h3999@t h3995@p)) (let ((h399b@ls/false (h30bc@syntax-dispatch h3999@t '(#(scheme-id unsyntax) any)))) (if h399b@ls/false (apply (lambda (h399d@p) (if (= h3996@lev '0) (let ((h399f@g (gensym))) (values (list h399f@g) (list h399d@p) h399f@g)) (call-with-values (lambda () (h397a@quasi h399d@p (- h3996@lev '1))) (lambda (h39a7@h39a2 h39a8@h39a4 h39a9@h39a6) (let ((h39ad@p h39a9@h39a6) (h39ae@rhs* h39a8@h39a4) (h39af@lhs* h39a7@h39a2)) (values h39af@lhs* h39ae@rhs* (list 'unsyntax h39ad@p))))))) h399b@ls/false) (let ((h39b3@t h3999@t)) (let ((h39b5@ls/false (h30bc@syntax-dispatch h39b3@t '#(scheme-id unsyntax)))) (if (and h39b5@ls/false (apply (lambda () (= h3996@lev '0)) h39b5@ls/false)) (apply (lambda () (h319c@syntax-violation '#f '"incorrect use of unsyntax" h3995@p)) h39b5@ls/false) (let ((h39b7@t h39b3@t)) (let ((h39b9@ls/false (h30bc@syntax-dispatch h39b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if h39b9@ls/false (apply (lambda (h39bb@p* h39bc@q) (call-with-values (lambda () (h397a@quasi h39bc@q h3996@lev)) (lambda (h39c5@h39c0 h39c6@h39c2 h39c7@h39c4) (let ((h39cb@q h39c7@h39c4) (h39cc@rhs* h39c6@h39c2) (h39cd@lhs* h39c5@h39c0)) (if (= h3996@lev '0) (let ((h39d1@g* (map (lambda (h39d3@x) (gensym)) h39bb@p*))) (values (append h39d1@g* h39cd@lhs*) (append h39bb@p* h39cc@rhs*) (append h39d1@g* h39cb@q))) (call-with-values (lambda () (h397a@quasi h39bb@p* (- h3996@lev '1))) (lambda (h39db@h39d6 h39dc@h39d8 h39dd@h39da) (let ((h39e1@p* h39dd@h39da) (h39e2@rhs2* h39dc@h39d8) (h39e3@lhs2* h39db@h39d6)) (values (append h39e3@lhs2* h39cd@lhs*) (append h39e2@rhs2* h39cc@rhs*) (cons (cons 'unsyntax h39e1@p*) h39cb@q)))))))))) h39b9@ls/false) (let ((h39e7@t h39b7@t)) (let ((h39e9@ls/false (h30bc@syntax-dispatch h39e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if h39e9@ls/false (apply (lambda (h39eb@p* h39ec@q) (call-with-values (lambda () (h397a@quasi h39ec@q h3996@lev)) (lambda (h39f5@h39f0 h39f6@h39f2 h39f7@h39f4) (let ((h39fb@q h39f7@h39f4) (h39fc@rhs* h39f6@h39f2) (h39fd@lhs* h39f5@h39f0)) (if (= h3996@lev '0) (let ((h3a01@g* (map (lambda (h3a03@x) (gensym)) h39eb@p*))) (values (append (map (lambda (h3a05@g) (cons h3a05@g '(...))) h3a01@g*) h39fd@lhs*) (append h39eb@p* h39fc@rhs*) (append (apply append (map (lambda (h3a07@g) (cons h3a07@g '(...))) h3a01@g*)) h39fb@q))) (call-with-values (lambda () (h397a@quasi h39eb@p* (- h3996@lev '1))) (lambda (h3a0f@h3a0a h3a10@h3a0c h3a11@h3a0e) (let ((h3a15@p* h3a11@h3a0e) (h3a16@rhs2* h3a10@h3a0c) (h3a17@lhs2* h3a0f@h3a0a)) (values (append h3a17@lhs2* h39fd@lhs*) (append h3a16@rhs2* h39fc@rhs*) (cons (cons 'unsyntax-splicing h3a15@p*) h39fb@q)))))))))) h39e9@ls/false) (let ((h3a1b@t h39e7@t)) (let ((h3a1d@ls/false (h30bc@syntax-dispatch h3a1b@t '#(scheme-id unsyntax-splicing)))) (if (and h3a1d@ls/false (apply (lambda () (= h3996@lev '0)) h3a1d@ls/false)) (apply (lambda () (h319c@syntax-violation '#f '"incorrect use of unsyntax-splicing" h3995@p)) h3a1d@ls/false) (let ((h3a1f@t h3a1b@t)) (let ((h3a21@ls/false (h30bc@syntax-dispatch h3a1f@t '(#(scheme-id quasisyntax) any)))) (if h3a21@ls/false (apply (lambda (h3a23@p) (call-with-values (lambda () (h397a@quasi h3a23@p (+ h3996@lev '1))) (lambda (h3a2b@h3a26 h3a2c@h3a28 h3a2d@h3a2a) (let ((h3a31@p h3a2d@h3a2a) (h3a32@rhs* h3a2c@h3a28) (h3a33@lhs* h3a2b@h3a26)) (values h3a33@lhs* h3a32@rhs* (list 'quasisyntax h3a31@p)))))) h3a21@ls/false) (let ((h3a37@t h3a1f@t)) (let ((h3a39@ls/false (h30bc@syntax-dispatch h3a37@t '(any . any)))) (if h3a39@ls/false (apply (lambda (h3a3b@p h3a3c@q) (call-with-values (lambda () (h397a@quasi h3a3b@p h3996@lev)) (lambda (h3a4b@h3a40 h3a4c@h3a42 h3a4d@h3a44) (call-with-values (lambda () (h397a@quasi h3a3c@q h3996@lev)) (lambda (h3a51@h3a46 h3a52@h3a48 h3a53@h3a4a) (let ((h3a57@q h3a53@h3a4a) (h3a58@rhs2* h3a52@h3a48) (h3a59@lhs2* h3a51@h3a46) (h3a5a@p h3a4d@h3a44) (h3a5b@rhs* h3a4c@h3a42) (h3a5c@lhs* h3a4b@h3a40)) (values (append h3a59@lhs2* h3a5c@lhs*) (append h3a58@rhs2* h3a5b@rhs*) (cons h3a5a@p h3a57@q)))))))) h3a39@ls/false) (let ((h3a63@t h3a37@t)) (let ((h3a65@ls/false (h30bc@syntax-dispatch h3a63@t '#(vector each-any)))) (if h3a65@ls/false (apply (lambda (h3a67@x*) (call-with-values (lambda () (h397a@quasi h3a67@x* h3996@lev)) (lambda (h3a6f@h3a6a h3a70@h3a6c h3a71@h3a6e) (let ((h3a75@x* h3a71@h3a6e) (h3a76@rhs* h3a70@h3a6c) (h3a77@lhs* h3a6f@h3a6a)) (values h3a77@lhs* h3a76@rhs* (list->vector h3a75@x*)))))) h3a65@ls/false) (let ((h3a7b@t h3a63@t)) (let ((h3a7d@ls/false (h30bc@syntax-dispatch h3a7b@t '_))) (if h3a7d@ls/false (apply (lambda () (values '() '() h3995@p)) h3a7d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3a7b@t))))))))))))))))))))))))))))))) (lambda (h397b@x) (let ((h397d@t h397b@x)) (let ((h397f@ls/false (h30bc@syntax-dispatch h397d@t '(_ any)))) (if h397f@ls/false (apply (lambda (h3981@e) (call-with-values (lambda () (h397a@quasi h3981@e '0)) (lambda (h3989@h3984 h398a@h3986 h398b@h3988) (let ((h398f@v h398b@h3988) (h3990@rhs* h398a@h3986) (h3991@lhs* h3989@h3984)) (h3072@bless (list 'syntax-case (cons 'list h3990@rhs*) '() (list h3991@lhs* (list 'syntax h398f@v)))))))) h397f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h397d@t))))))) (set! h4b8a@h30ac@quasisyntax-macro h30ac@quasisyntax-macro) (set! h30ae@define-struct-macro (lambda (h3a7f@stx) (h319c@syntax-violation '#f '"define-struct not supported" h3a7f@stx))) (set! h4b8b@h30ae@define-struct-macro h30ae@define-struct-macro) (set! h30b0@define-record-type-macro (lambda (h3a81@x) (letrec* ((h3a84@id (lambda (h3c77@ctxt . h3c79@str*) (h31a0@datum->syntax h3c77@ctxt (string->symbol (apply string-append (map (lambda (h3c7b@x) (if (symbol? h3c7b@x) (symbol->string h3c7b@x) (if (string? h3c7b@x) h3c7b@x (assertion-violation 'define-record-type '"BUG")))) h3c79@str*)))))) (h3a86@get-record-name (lambda (h3c65@spec) (let ((h3c67@t h3c65@spec)) (let ((h3c69@ls/false (h30bc@syntax-dispatch h3c67@t '(any any any)))) (if h3c69@ls/false (apply (lambda (h3c6b@foo h3c6c@make-foo h3c6d@foo?) h3c6b@foo) h3c69@ls/false) (let ((h3c71@t h3c67@t)) (let ((h3c73@ls/false (h30bc@syntax-dispatch h3c71@t 'any))) (if h3c73@ls/false (apply (lambda (h3c75@foo) h3c75@foo) h3c73@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c71@t))))))))) (h3a88@get-record-constructor-name (lambda (h3c51@spec) (let ((h3c53@t h3c51@spec)) (let ((h3c55@ls/false (h30bc@syntax-dispatch h3c53@t '(any any any)))) (if h3c55@ls/false (apply (lambda (h3c57@foo h3c58@make-foo h3c59@foo?) h3c58@make-foo) h3c55@ls/false) (let ((h3c5d@t h3c53@t)) (let ((h3c5f@ls/false (h30bc@syntax-dispatch h3c5d@t 'any))) (if (and h3c5f@ls/false (apply (lambda (h3c61@foo) (h2eb5@id? h3c61@foo)) h3c5f@ls/false)) (apply (lambda (h3c63@foo) (h3a84@id h3c63@foo '"make-" (h2ec9@stx->datum h3c63@foo))) h3c5f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c5d@t))))))))) (h3a8a@get-record-predicate-name (lambda (h3c3d@spec) (let ((h3c3f@t h3c3d@spec)) (let ((h3c41@ls/false (h30bc@syntax-dispatch h3c3f@t '(any any any)))) (if h3c41@ls/false (apply (lambda (h3c43@foo h3c44@make-foo h3c45@foo?) h3c45@foo?) h3c41@ls/false) (let ((h3c49@t h3c3f@t)) (let ((h3c4b@ls/false (h30bc@syntax-dispatch h3c49@t 'any))) (if (and h3c4b@ls/false (apply (lambda (h3c4d@foo) (h2eb5@id? h3c4d@foo)) h3c4b@ls/false)) (apply (lambda (h3c4f@foo) (h3a84@id h3c4f@foo (h2ec9@stx->datum h3c4f@foo) '"?")) h3c4b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c49@t))))))))) (h3a8c@get-clause (lambda (h3c2b@id h3c2c@ls) (let ((h3c2f@t h3c2c@ls)) (let ((h3c31@ls/false (h30bc@syntax-dispatch h3c2f@t '()))) (if h3c31@ls/false (apply (lambda () '#f) h3c31@ls/false) (let ((h3c33@t h3c2f@t)) (let ((h3c35@ls/false (h30bc@syntax-dispatch h3c33@t '((any . any) . any)))) (if h3c35@ls/false (apply (lambda (h3c37@x h3c38@rest h3c39@ls) (if (h2ebb@free-id=? (h3072@bless h3c2b@id) h3c37@x) (cons h3c37@x h3c38@rest) (h3a8c@get-clause h3c2b@id h3c39@ls))) h3c35@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c33@t))))))))) (h3a8e@foo-rtd-code (lambda (h3bd9@name h3bda@clause* h3bdb@parent-rtd-code) (letrec* ((h3be0@convert-field-spec* (lambda (h3c11@ls) (list->vector (map (lambda (h3c13@x) (let ((h3c15@t h3c13@x)) (let ((h3c17@ls/false (h30bc@syntax-dispatch h3c15@t '(#(scheme-id mutable) any . any)))) (if h3c17@ls/false (apply (lambda (h3c19@name h3c1a@rest) (list 'mutable h3c19@name)) h3c17@ls/false) (let ((h3c1d@t h3c15@t)) (let ((h3c1f@ls/false (h30bc@syntax-dispatch h3c1d@t '(#(scheme-id immutable) any . any)))) (if h3c1f@ls/false (apply (lambda (h3c21@name h3c22@rest) (list 'immutable h3c21@name)) h3c1f@ls/false) (let ((h3c25@t h3c1d@t)) (let ((h3c27@ls/false (h30bc@syntax-dispatch h3c25@t 'any))) (if h3c27@ls/false (apply (lambda (h3c29@name) (list 'immutable h3c29@name)) h3c27@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c25@t))))))))))) h3c11@ls))))) (let ((h3be1@uid-code (let ((h3be9@t (h3a8c@get-clause 'nongenerative h3bda@clause*))) (let ((h3beb@ls/false (h30bc@syntax-dispatch h3be9@t '(_)))) (if h3beb@ls/false (apply (lambda () (list 'quote (gensym))) h3beb@ls/false) (let ((h3bed@t h3be9@t)) (let ((h3bef@ls/false (h30bc@syntax-dispatch h3bed@t '(_ any)))) (if h3bef@ls/false (apply (lambda (h3bf1@uid) (list 'quote h3bf1@uid)) h3bef@ls/false) (let ((h3bf3@t h3bed@t)) (let ((h3bf5@ls/false (h30bc@syntax-dispatch h3bf3@t '_))) (if h3bf5@ls/false (apply (lambda () '#f) h3bf5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bf3@t))))))))))) (h3be2@sealed? (let ((h3bf7@t (h3a8c@get-clause 'sealed h3bda@clause*))) (let ((h3bf9@ls/false (h30bc@syntax-dispatch h3bf7@t '(_ #(atom #t))))) (if h3bf9@ls/false (apply (lambda () '#t) h3bf9@ls/false) (let ((h3bfb@t h3bf7@t)) (let ((h3bfd@ls/false (h30bc@syntax-dispatch h3bfb@t '_))) (if h3bfd@ls/false (apply (lambda () '#f) h3bfd@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bfb@t)))))))) (h3be3@opaque? (let ((h3bff@t (h3a8c@get-clause 'opaque h3bda@clause*))) (let ((h3c01@ls/false (h30bc@syntax-dispatch h3bff@t '(_ #(atom #t))))) (if h3c01@ls/false (apply (lambda () '#t) h3c01@ls/false) (let ((h3c03@t h3bff@t)) (let ((h3c05@ls/false (h30bc@syntax-dispatch h3c03@t '_))) (if h3c05@ls/false (apply (lambda () '#f) h3c05@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c03@t)))))))) (h3be4@fields (let ((h3c07@t (h3a8c@get-clause 'fields h3bda@clause*))) (let ((h3c09@ls/false (h30bc@syntax-dispatch h3c07@t '(_ . each-any)))) (if h3c09@ls/false (apply (lambda (h3c0b@field-spec*) (list 'quote (h3be0@convert-field-spec* h3c0b@field-spec*))) h3c09@ls/false) (let ((h3c0d@t h3c07@t)) (let ((h3c0f@ls/false (h30bc@syntax-dispatch h3c0d@t '_))) (if h3c0f@ls/false (apply (lambda () ''#()) h3c0f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c0d@t))))))))) (h3072@bless (list 'make-record-type-descriptor (list 'quote h3bd9@name) h3bdb@parent-rtd-code h3be1@uid-code h3be2@sealed? h3be3@opaque? h3be4@fields)))))) (h3a90@parent-rtd-code (lambda (h3bc1@clause*) (let ((h3bc3@t (h3a8c@get-clause 'parent h3bc1@clause*))) (let ((h3bc5@ls/false (h30bc@syntax-dispatch h3bc3@t '(_ any)))) (if h3bc5@ls/false (apply (lambda (h3bc7@name) (list 'record-type-descriptor h3bc7@name)) h3bc5@ls/false) (let ((h3bc9@t h3bc3@t)) (let ((h3bcb@ls/false (h30bc@syntax-dispatch h3bc9@t '#(atom #f)))) (if h3bcb@ls/false (apply (lambda () (let ((h3bcd@t (h3a8c@get-clause 'parent-rtd h3bc1@clause*))) (let ((h3bcf@ls/false (h30bc@syntax-dispatch h3bcd@t '(_ any any)))) (if h3bcf@ls/false (apply (lambda (h3bd1@rtd h3bd2@rcd) h3bd1@rtd) h3bcf@ls/false) (let ((h3bd5@t h3bcd@t)) (let ((h3bd7@ls/false (h30bc@syntax-dispatch h3bd5@t '#(atom #f)))) (if h3bd7@ls/false (apply (lambda () '#f) h3bd7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bd5@t)))))))) h3bcb@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bc9@t))))))))) (h3a92@parent-rcd-code (lambda (h3ba9@clause*) (let ((h3bab@t (h3a8c@get-clause 'parent h3ba9@clause*))) (let ((h3bad@ls/false (h30bc@syntax-dispatch h3bab@t '(_ any)))) (if h3bad@ls/false (apply (lambda (h3baf@name) (list 'record-constructor-descriptor h3baf@name)) h3bad@ls/false) (let ((h3bb1@t h3bab@t)) (let ((h3bb3@ls/false (h30bc@syntax-dispatch h3bb1@t '#(atom #f)))) (if h3bb3@ls/false (apply (lambda () (let ((h3bb5@t (h3a8c@get-clause 'parent-rtd h3ba9@clause*))) (let ((h3bb7@ls/false (h30bc@syntax-dispatch h3bb5@t '(_ any any)))) (if h3bb7@ls/false (apply (lambda (h3bb9@rtd h3bba@rcd) h3bba@rcd) h3bb7@ls/false) (let ((h3bbd@t h3bb5@t)) (let ((h3bbf@ls/false (h30bc@syntax-dispatch h3bbd@t '#(atom #f)))) (if h3bbf@ls/false (apply (lambda () '#f) h3bbf@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bbd@t)))))))) h3bb3@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3bb1@t))))))))) (h3a94@foo-rcd-code (lambda (h3ba1@clause* h3ba2@foo-rtd h3ba3@protocol h3ba4@parent-rcd-code) (list 'make-record-constructor-descriptor h3ba2@foo-rtd h3ba4@parent-rcd-code h3ba3@protocol))) (h3a96@get-protocol-code (lambda (h3b95@clause*) (let ((h3b97@t (h3a8c@get-clause 'protocol h3b95@clause*))) (let ((h3b99@ls/false (h30bc@syntax-dispatch h3b97@t '(_ any)))) (if h3b99@ls/false (apply (lambda (h3b9b@expr) h3b9b@expr) h3b99@ls/false) (let ((h3b9d@t h3b97@t)) (let ((h3b9f@ls/false (h30bc@syntax-dispatch h3b9d@t '_))) (if h3b9f@ls/false (apply (lambda () '#f) h3b9f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3b9d@t))))))))) (h3a98@get-fields (lambda (h3b83@clause*) (let ((h3b85@t h3b83@clause*)) (let ((h3b87@ls/false (h30bc@syntax-dispatch h3b85@t '()))) (if h3b87@ls/false (apply (lambda () '()) h3b87@ls/false) (let ((h3b89@t h3b85@t)) (let ((h3b8b@ls/false (h30bc@syntax-dispatch h3b89@t '((#(scheme-id fields) . each-any) . _)))) (if h3b8b@ls/false (apply (lambda (h3b8d@f*) h3b8d@f*) h3b8b@ls/false) (let ((h3b8f@t h3b89@t)) (let ((h3b91@ls/false (h30bc@syntax-dispatch h3b8f@t '(_ . any)))) (if h3b91@ls/false (apply (lambda (h3b93@rest) (h3a98@get-fields h3b93@rest)) h3b91@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3b8f@t)))))))))))) (h3a9a@get-mutator-indices (lambda (h3b6b@fields) (let h3b71@f ((h3b6d@fields h3b6b@fields) (h3b6e@i '0)) (let ((h3b73@t h3b6d@fields)) (let ((h3b75@ls/false (h30bc@syntax-dispatch h3b73@t '()))) (if h3b75@ls/false (apply (lambda () '()) h3b75@ls/false) (let ((h3b77@t h3b73@t)) (let ((h3b79@ls/false (h30bc@syntax-dispatch h3b77@t '((#(scheme-id mutable) . _) . any)))) (if h3b79@ls/false (apply (lambda (h3b7b@rest) (cons h3b6e@i (h3b71@f h3b7b@rest (+ h3b6e@i '1)))) h3b79@ls/false) (let ((h3b7d@t h3b77@t)) (let ((h3b7f@ls/false (h30bc@syntax-dispatch h3b7d@t '(_ . any)))) (if h3b7f@ls/false (apply (lambda (h3b81@rest) (h3b71@f h3b81@rest (+ h3b6e@i '1))) h3b7f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3b7d@t))))))))))))) (h3a9c@get-mutators (lambda (h3b41@foo h3b42@fields) (letrec* ((h3b46@gen-name (lambda (h3b69@x) (h31a0@datum->syntax h3b41@foo (string->symbol (string-append (symbol->string (h31a2@syntax->datum h3b41@foo)) '"-" (symbol->string (h31a2@syntax->datum h3b69@x)) '"-set!")))))) (let h3b49@f ((h3b47@fields h3b42@fields)) (let ((h3b4b@t h3b47@fields)) (let ((h3b4d@ls/false (h30bc@syntax-dispatch h3b4b@t '()))) (if h3b4d@ls/false (apply (lambda () '()) h3b4d@ls/false) (let ((h3b4f@t h3b4b@t)) (let ((h3b51@ls/false (h30bc@syntax-dispatch h3b4f@t '((#(scheme-id mutable) any any any) . any)))) (if h3b51@ls/false (apply (lambda (h3b53@name h3b54@accessor h3b55@mutator h3b56@rest) (cons h3b55@mutator (h3b49@f h3b56@rest))) h3b51@ls/false) (let ((h3b5b@t h3b4f@t)) (let ((h3b5d@ls/false (h30bc@syntax-dispatch h3b5b@t '((#(scheme-id mutable) any) . any)))) (if h3b5d@ls/false (apply (lambda (h3b5f@name h3b60@rest) (cons (h3b46@gen-name h3b5f@name) (h3b49@f h3b60@rest))) h3b5d@ls/false) (let ((h3b63@t h3b5b@t)) (let ((h3b65@ls/false (h30bc@syntax-dispatch h3b63@t '(_ . any)))) (if h3b65@ls/false (apply (lambda (h3b67@rest) (h3b49@f h3b67@rest)) h3b65@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3b63@t))))))))))))))))) (h3a9e@get-accessors (lambda (h3afd@foo h3afe@fields) (letrec* ((h3b02@gen-name (lambda (h3b3f@x) (h31a0@datum->syntax h3afd@foo (string->symbol (string-append (symbol->string (h31a2@syntax->datum h3afd@foo)) '"-" (symbol->string (h31a2@syntax->datum h3b3f@x)))))))) (map (lambda (h3b03@field) (let ((h3b05@t h3b03@field)) (let ((h3b07@ls/false (h30bc@syntax-dispatch h3b05@t '(#(scheme-id mutable) any any any)))) (if (and h3b07@ls/false (apply (lambda (h3b09@name h3b0a@accessor h3b0b@mutator) (h2eb5@id? h3b0a@accessor)) h3b07@ls/false)) (apply (lambda (h3b0f@name h3b10@accessor h3b11@mutator) h3b10@accessor) h3b07@ls/false) (let ((h3b15@t h3b05@t)) (let ((h3b17@ls/false (h30bc@syntax-dispatch h3b15@t '(#(scheme-id immutable) any any)))) (if (and h3b17@ls/false (apply (lambda (h3b19@name h3b1a@accessor) (h2eb5@id? h3b1a@accessor)) h3b17@ls/false)) (apply (lambda (h3b1d@name h3b1e@accessor) h3b1e@accessor) h3b17@ls/false) (let ((h3b21@t h3b15@t)) (let ((h3b23@ls/false (h30bc@syntax-dispatch h3b21@t '(#(scheme-id mutable) any)))) (if (and h3b23@ls/false (apply (lambda (h3b25@name) (h2eb5@id? h3b25@name)) h3b23@ls/false)) (apply (lambda (h3b27@name) (h3b02@gen-name h3b27@name)) h3b23@ls/false) (let ((h3b29@t h3b21@t)) (let ((h3b2b@ls/false (h30bc@syntax-dispatch h3b29@t '(#(scheme-id immutable) any)))) (if (and h3b2b@ls/false (apply (lambda (h3b2d@name) (h2eb5@id? h3b2d@name)) h3b2b@ls/false)) (apply (lambda (h3b2f@name) (h3b02@gen-name h3b2f@name)) h3b2b@ls/false) (let ((h3b31@t h3b29@t)) (let ((h3b33@ls/false (h30bc@syntax-dispatch h3b31@t 'any))) (if (and h3b33@ls/false (apply (lambda (h3b35@name) (h2eb5@id? h3b35@name)) h3b33@ls/false)) (apply (lambda (h3b37@name) (h3b02@gen-name h3b37@name)) h3b33@ls/false) (let ((h3b39@t h3b31@t)) (let ((h3b3b@ls/false (h30bc@syntax-dispatch h3b39@t 'any))) (if h3b3b@ls/false (apply (lambda (h3b3d@others) (h319c@syntax-violation '#f '"invalid field spec" h3b03@field)) h3b3b@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3b39@t)))))))))))))))))))) h3afe@fields)))) (h3aa0@enumerate (lambda (h3af5@ls) (let h3afb@f ((h3af7@ls h3af5@ls) (h3af8@i '0)) (if (null? h3af7@ls) '() (cons h3af8@i (h3afb@f (cdr h3af7@ls) (+ h3af8@i '1))))))) (h3aa2@do-define-record (lambda (h3acd@namespec h3ace@clause*) (let ((h3ad1@foo (h3a86@get-record-name h3acd@namespec))) (let ((h3ad3@foo-rtd (gensym))) (let ((h3ad5@foo-rcd (gensym))) (let ((h3ad7@protocol (gensym))) (let ((h3ad9@make-foo (h3a88@get-record-constructor-name h3acd@namespec))) (let ((h3adb@fields (h3a98@get-fields h3ace@clause*))) (let ((h3add@idx* (h3aa0@enumerate h3adb@fields))) (let ((h3adf@foo-x* (h3a9e@get-accessors h3ad1@foo h3adb@fields))) (let ((h3ae1@set-foo-x!* (h3a9c@get-mutators h3ad1@foo h3adb@fields))) (let ((h3ae3@set-foo-idx* (h3a9a@get-mutator-indices h3adb@fields))) (let ((h3ae5@foo? (h3a8a@get-record-predicate-name h3acd@namespec))) (let ((h3ae7@foo-rtd-code (h3a8e@foo-rtd-code h3ad1@foo h3ace@clause* (h3a90@parent-rtd-code h3ace@clause*)))) (let ((h3ae9@foo-rcd-code (h3a94@foo-rcd-code h3ace@clause* h3ad3@foo-rtd h3ad7@protocol (h3a92@parent-rcd-code h3ace@clause*)))) (let ((h3aeb@protocol-code (h3a96@get-protocol-code h3ace@clause*))) (h3072@bless (cons 'begin (cons (list 'define h3ad3@foo-rtd h3ae7@foo-rtd-code) (cons (list 'define h3ad7@protocol h3aeb@protocol-code) (cons (list 'define h3ad5@foo-rcd h3ae9@foo-rcd-code) (cons (list 'define-syntax h3ad1@foo (list 'list ''$rtd (list 'syntax h3ad3@foo-rtd) (list 'syntax h3ad5@foo-rcd))) (cons (list 'define h3ae5@foo? (list 'record-predicate h3ad3@foo-rtd)) (cons (list 'define h3ad9@make-foo (list 'record-constructor h3ad5@foo-rcd)) (append (map (lambda (h3aed@foo-x h3aee@idx) (list 'define h3aed@foo-x (list 'record-accessor h3ad3@foo-rtd h3aee@idx))) h3adf@foo-x* h3add@idx*) (map (lambda (h3af1@set-foo-x! h3af2@idx) (list 'define h3af1@set-foo-x! (list 'record-mutator h3ad3@foo-rtd h3af2@idx))) h3ae1@set-foo-x!* h3ae3@set-foo-idx*)))))))))))))))))))))))))) (h3aa4@verify-clauses (lambda (h3aad@x h3aae@cls*) (letrec* ((h3ab2@valid-kwds (map h3072@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (h3ab4@free-id-member? (lambda (h3ac9@x h3aca@ls) (and (pair? h3aca@ls) (or (h2ebb@free-id=? h3ac9@x (car h3aca@ls)) (h3ab4@free-id-member? h3ac9@x (cdr h3aca@ls))))))) (let h3ab9@f ((h3ab5@cls* h3aae@cls*) (h3ab6@seen* '())) (if (not (null? h3ab5@cls*)) (let ((h3abb@t (car h3ab5@cls*))) (let ((h3abd@ls/false (h30bc@syntax-dispatch h3abb@t '(any . any)))) (if h3abd@ls/false (apply (lambda (h3abf@kwd h3ac0@rest) (if (or (not (h2eb5@id? h3abf@kwd)) (not (h3ab4@free-id-member? h3abf@kwd h3ab2@valid-kwds))) (h319c@syntax-violation '#f '"not a valid define-record-type keyword" h3abf@kwd) (if (h2ec1@bound-id-member? h3abf@kwd h3ab6@seen*) (h319c@syntax-violation '#f '"duplicate use of keyword " h3aad@x h3abf@kwd) (h3ab9@f (cdr h3ab5@cls*) (cons h3abf@kwd h3ab6@seen*))))) h3abd@ls/false) (let ((h3ac3@t h3abb@t)) (let ((h3ac5@ls/false (h30bc@syntax-dispatch h3ac3@t 'any))) (if h3ac5@ls/false (apply (lambda (h3ac7@cls) (h319c@syntax-violation '#f '"malformed define-record-type clause" h3ac7@cls)) h3ac5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3ac3@t))))))) (void))))))) (let ((h3aa5@t h3a81@x)) (let ((h3aa7@ls/false (h30bc@syntax-dispatch h3aa5@t '(_ any . each-any)))) (if h3aa7@ls/false (apply (lambda (h3aa9@namespec h3aaa@clause*) (begin (h3aa4@verify-clauses h3a81@x h3aaa@clause*) (h3aa2@do-define-record h3aa9@namespec h3aaa@clause*))) h3aa7@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3aa5@t))))))) (set! h4b8c@h30b0@define-record-type-macro h30b0@define-record-type-macro) (set! h30b2@define-condition-type-macro (lambda (h3c7d@x) (letrec* ((h3c80@mkname (lambda (h3cad@name h3cae@suffix) (h31a0@datum->syntax h3cad@name (string->symbol (string-append (symbol->string (h31a2@syntax->datum h3cad@name)) h3cae@suffix)))))) (let ((h3c81@t h3c7d@x)) (let ((h3c83@ls/false (h30bc@syntax-dispatch h3c81@t '(any any any any any . #(each (any any)))))) (if (and h3c83@ls/false (apply (lambda (h3c85@ctxt h3c86@name h3c87@super h3c88@constructor h3c89@predicate h3c8a@field* h3c8b@accessor*) (and (h2eb5@id? h3c86@name) (h2eb5@id? h3c87@super) (h2eb5@id? h3c88@constructor) (h2eb5@id? h3c89@predicate) (for-all h2eb5@id? h3c8a@field*) (for-all h2eb5@id? h3c8b@accessor*))) h3c83@ls/false)) (apply (lambda (h3c93@ctxt h3c94@name h3c95@super h3c96@constructor h3c97@predicate h3c98@field* h3c99@accessor*) (let ((h3ca1@aux-accessor* (map (lambda (h3ca3@x) (gensym)) h3c99@accessor*))) (h3072@bless (cons 'begin (cons (cons 'define-record-type (cons (list h3c94@name h3c96@constructor (gensym)) (cons (list 'parent h3c95@super) (cons (cons 'fields (map (lambda (h3ca5@field h3ca6@aux) (list 'immutable h3ca5@field h3ca6@aux)) h3c98@field* h3ca1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define h3c97@predicate (list 'condition-predicate (list 'record-type-descriptor h3c94@name))) (map (lambda (h3ca9@accessor h3caa@aux) (list 'define h3ca9@accessor (list 'condition-accessor (list 'record-type-descriptor h3c94@name) h3caa@aux))) h3c99@accessor* h3ca1@aux-accessor*))))))) h3c83@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3c81@t))))))) (set! h4b8d@h30b2@define-condition-type-macro h30b2@define-condition-type-macro) (set! h30b4@incorrect-usage-macro (lambda (h3cb1@e) (h319c@syntax-violation '#f '"incorrect usage of auxiliary keyword" h3cb1@e))) (set! h4b8e@h30b4@incorrect-usage-macro h30b4@incorrect-usage-macro) (set! h30b6@parameterize-macro (lambda (h3cb3@e) (let ((h3cb5@t h3cb3@e)) (let ((h3cb7@ls/false (h30bc@syntax-dispatch h3cb5@t '(_ () any . each-any)))) (if h3cb7@ls/false (apply (lambda (h3cb9@b h3cba@b*) (h3072@bless (cons 'let (cons '() (cons h3cb9@b h3cba@b*))))) h3cb7@ls/false) (let ((h3cbd@t h3cb5@t)) (let ((h3cbf@ls/false (h30bc@syntax-dispatch h3cbd@t '(_ #(each (any any)) any . each-any)))) (if h3cbf@ls/false (apply (lambda (h3cc1@olhs* h3cc2@orhs* h3cc3@b h3cc4@b*) (let ((h3cc9@lhs* (h318a@generate-temporaries h3cc1@olhs*)) (h3cca@rhs* (h318a@generate-temporaries h3cc2@orhs*))) (h3072@bless (cons (list 'lambda (append h3cc9@lhs* h3cca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (h3ccd@lhs h3cce@rhs) (list 'let (list (list 't (list h3ccd@lhs))) (list h3ccd@lhs h3cce@rhs) (cons 'set! (cons h3cce@rhs '(t))))) h3cc9@lhs* h3cca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons h3cc3@b h3cc4@b*))) '(swap)))))) (append h3cc1@olhs* h3cc2@orhs*))))) h3cbf@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3cbd@t))))))))) (set! h4b8f@h30b6@parameterize-macro h30b6@parameterize-macro) (set! h30b8@foreign-call-transformer (lambda (h3cd1@e h3cd2@r h3cd3@mr) (let ((h3cd7@t h3cd1@e)) (let ((h3cd9@ls/false (h30bc@syntax-dispatch h3cd7@t '(_ any . each-any)))) (if h3cd9@ls/false (apply (lambda (h3cdb@name h3cdc@arg*) (cons 'foreign-call (cons (h30de@chi-expr h3cdb@name h3cd2@r h3cd3@mr) (h30da@chi-expr* h3cdc@arg* h3cd2@r h3cd3@mr)))) h3cd9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3cd7@t)))))) (set! h4b90@h30b8@foreign-call-transformer h30b8@foreign-call-transformer) (set! h30ba@convert-pattern (lambda (h3cdf@pattern h3ce0@keys) (letrec* ((h3ce4@cvt* (lambda (h3d83@p* h3d84@n h3d85@ids) (if (null? h3d83@p*) (values '() h3d85@ids) (call-with-values (lambda () (h3ce4@cvt* (cdr h3d83@p*) h3d84@n h3d85@ids)) (lambda (h3d8d@h3d8a h3d8e@h3d8c) (let ((h3d91@ids h3d8e@h3d8c) (h3d92@y h3d8d@h3d8a)) (call-with-values (lambda () (h3ce6@cvt (car h3d83@p*) h3d84@n h3d91@ids)) (lambda (h3d99@h3d96 h3d9a@h3d98) (let ((h3d9d@ids h3d9a@h3d98) (h3d9e@x h3d99@h3d96)) (values (cons h3d9e@x h3d92@y) h3d9d@ids)))))))))) (h3ce6@cvt (lambda (h3ce7@p h3ce8@n h3ce9@ids) (let ((h3ced@t h3ce7@p)) (let ((h3cef@ls/false (h30bc@syntax-dispatch h3ced@t 'any))) (if (and h3cef@ls/false (apply (lambda (h3cf1@id) (h2eb5@id? h3cf1@id)) h3cef@ls/false)) (apply (lambda (h3cf3@id) (if (h2ec1@bound-id-member? h3ce7@p h3ce0@keys) (values (vector 'free-id h3ce7@p) h3ce9@ids) (if (h2ebb@free-id=? h3ce7@p (h3044@scheme-stx '_)) (values '_ h3ce9@ids) (values 'any (cons (cons h3ce7@p h3ce8@n) h3ce9@ids))))) h3cef@ls/false) (let ((h3cf5@t h3ced@t)) (let ((h3cf7@ls/false (h30bc@syntax-dispatch h3cf5@t '(any any)))) (if (and h3cf7@ls/false (apply (lambda (h3cf9@p h3cfa@dots) (h30be@ellipsis? h3cfa@dots)) h3cf7@ls/false)) (apply (lambda (h3cfd@p h3cfe@dots) (call-with-values (lambda () (h3ce6@cvt h3cfd@p (+ h3ce8@n '1) h3ce9@ids)) (lambda (h3d05@h3d02 h3d06@h3d04) (let ((h3d09@ids h3d06@h3d04) (h3d0a@p h3d05@h3d02)) (values (if (eq? h3d0a@p 'any) 'each-any (vector 'each h3d0a@p)) h3d09@ids))))) h3cf7@ls/false) (let ((h3d0d@t h3cf5@t)) (let ((h3d0f@ls/false (h30bc@syntax-dispatch h3d0d@t '(any any . #(each+ any () any))))) (if (and h3d0f@ls/false (apply (lambda (h3d11@x h3d12@dots h3d13@ys h3d14@z) (h30be@ellipsis? h3d12@dots)) h3d0f@ls/false)) (apply (lambda (h3d19@x h3d1a@dots h3d1b@ys h3d1c@z) (call-with-values (lambda () (h3ce6@cvt h3d1c@z h3ce8@n h3ce9@ids)) (lambda (h3d25@h3d22 h3d26@h3d24) (let ((h3d29@ids h3d26@h3d24) (h3d2a@z h3d25@h3d22)) (call-with-values (lambda () (h3ce4@cvt* h3d1b@ys h3ce8@n h3d29@ids)) (lambda (h3d31@h3d2e h3d32@h3d30) (let ((h3d35@ids h3d32@h3d30) (h3d36@ys h3d31@h3d2e)) (call-with-values (lambda () (h3ce6@cvt h3d19@x (+ h3ce8@n '1) h3d35@ids)) (lambda (h3d3d@h3d3a h3d3e@h3d3c) (let ((h3d41@ids h3d3e@h3d3c) (h3d42@x h3d3d@h3d3a)) (values (vector 'each+ h3d42@x (reverse h3d36@ys) h3d2a@z) h3d41@ids))))))))))) h3d0f@ls/false) (let ((h3d45@t h3d0d@t)) (let ((h3d47@ls/false (h30bc@syntax-dispatch h3d45@t '(any . any)))) (if h3d47@ls/false (apply (lambda (h3d49@x h3d4a@y) (call-with-values (lambda () (h3ce6@cvt h3d4a@y h3ce8@n h3ce9@ids)) (lambda (h3d51@h3d4e h3d52@h3d50) (let ((h3d55@ids h3d52@h3d50) (h3d56@y h3d51@h3d4e)) (call-with-values (lambda () (h3ce6@cvt h3d49@x h3ce8@n h3d55@ids)) (lambda (h3d5d@h3d5a h3d5e@h3d5c) (let ((h3d61@ids h3d5e@h3d5c) (h3d62@x h3d5d@h3d5a)) (values (cons h3d62@x h3d56@y) h3d61@ids)))))))) h3d47@ls/false) (let ((h3d65@t h3d45@t)) (let ((h3d67@ls/false (h30bc@syntax-dispatch h3d65@t '()))) (if h3d67@ls/false (apply (lambda () (values '() h3ce9@ids)) h3d67@ls/false) (let ((h3d69@t h3d65@t)) (let ((h3d6b@ls/false (h30bc@syntax-dispatch h3d69@t '#(vector each-any)))) (if (and h3d6b@ls/false (apply (lambda (h3d6d@p) (not (h2e81@stx? h3d6d@p))) h3d6b@ls/false)) (apply (lambda (h3d6f@p) (call-with-values (lambda () (h3ce6@cvt h3d6f@p h3ce8@n h3ce9@ids)) (lambda (h3d75@h3d72 h3d76@h3d74) (let ((h3d79@ids h3d76@h3d74) (h3d7a@p h3d75@h3d72)) (values (vector 'vector h3d7a@p) h3d79@ids))))) h3d6b@ls/false) (let ((h3d7d@t h3d69@t)) (let ((h3d7f@ls/false (h30bc@syntax-dispatch h3d7d@t 'any))) (if h3d7f@ls/false (apply (lambda (h3d81@datum) (values (vector 'atom (h2ec9@stx->datum h3d81@datum)) h3ce9@ids)) h3d7f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3d7d@t))))))))))))))))))))))))) (h3ce6@cvt h3cdf@pattern '0 '())))) (set! h4b91@h30ba@convert-pattern h30ba@convert-pattern) (set! h30bc@syntax-dispatch (letrec* ((h3da2@stx^ (lambda (h3e7d@e h3e7e@m* h3e7f@s* h3e80@ae*) (if (and (null? h3e7e@m*) (null? h3e7f@s*) (null? h3e80@ae*)) h3e7d@e (h2e9d@mkstx h3e7d@e h3e7e@m* h3e7f@s* h3e80@ae*)))) (h3da4@match-each (lambda (h3e5d@e h3e5e@p h3e5f@m* h3e60@s* h3e61@ae*) (if (pair? h3e5d@e) (let ((h3e67@first (h3db0@match (car h3e5d@e) h3e5e@p h3e5f@m* h3e60@s* h3e61@ae* '()))) (and h3e67@first (let ((h3e69@rest (h3da4@match-each (cdr h3e5d@e) h3e5e@p h3e5f@m* h3e60@s* h3e61@ae*))) (and h3e69@rest (cons h3e67@first h3e69@rest))))) (if (null? h3e5d@e) '() (if (h2e81@stx? h3e5d@e) (and (not (h2e3b@top-marked? h3e5f@m*)) (call-with-values (lambda () (join-wraps h3e5f@m* h3e60@s* h3e61@ae* h3e5d@e)) (lambda (h3e71@h3e6c h3e72@h3e6e h3e73@h3e70) (let ((h3e77@ae* h3e73@h3e70) (h3e78@s* h3e72@h3e6e) (h3e79@m* h3e71@h3e6c)) (h3da4@match-each (h2e83@stx-expr h3e5d@e) h3e5e@p h3e79@m* h3e78@s* h3e77@ae*))))) (if (h29f9@h28cb@annotation? h3e5d@e) (h3da4@match-each (h29fb@h28cf@annotation-expression h3e5d@e) h3e5e@p h3e5f@m* h3e60@s* h3e61@ae*) '#f)))))) (h3da6@match-each+ (lambda (h3e1d@e h3e1e@x-pat h3e1f@y-pat h3e20@z-pat h3e21@m* h3e22@s* h3e23@ae* h3e24@r) (let h3e35@f ((h3e2d@e h3e1d@e) (h3e2e@m* h3e21@m*) (h3e2f@s* h3e22@s*) (h3e30@ae* h3e23@ae*)) (if (pair? h3e2d@e) (call-with-values (lambda () (h3e35@f (cdr h3e2d@e) h3e2e@m* h3e2f@s* h3e30@ae*)) (lambda (h3e3d@h3e38 h3e3e@h3e3a h3e3f@h3e3c) (let ((h3e43@r h3e3f@h3e3c) (h3e44@y-pat h3e3e@h3e3a) (h3e45@xr* h3e3d@h3e38)) (if h3e43@r (if (null? h3e44@y-pat) (let ((h3e49@xr (h3db0@match (car h3e2d@e) h3e1e@x-pat h3e2e@m* h3e2f@s* h3e30@ae* '()))) (if h3e49@xr (values (cons h3e49@xr h3e45@xr*) h3e44@y-pat h3e43@r) (values '#f '#f '#f))) (values '() (cdr h3e44@y-pat) (h3db0@match (car h3e2d@e) (car h3e44@y-pat) h3e2e@m* h3e2f@s* h3e30@ae* h3e43@r))) (values '#f '#f '#f))))) (if (h2e81@stx? h3e2d@e) (if (h2e3b@top-marked? h3e2e@m*) (values '() h3e1f@y-pat (h3db0@match h3e2d@e h3e20@z-pat h3e2e@m* h3e2f@s* h3e30@ae* h3e24@r)) (call-with-values (lambda () (join-wraps h3e2e@m* h3e2f@s* h3e30@ae* h3e2d@e)) (lambda (h3e51@h3e4c h3e52@h3e4e h3e53@h3e50) (let ((h3e57@ae* h3e53@h3e50) (h3e58@s* h3e52@h3e4e) (h3e59@m* h3e51@h3e4c)) (h3e35@f (h2e83@stx-expr h3e2d@e) h3e59@m* h3e58@s* h3e57@ae*))))) (if (h29f9@h28cb@annotation? h3e2d@e) (h3e35@f (h29fb@h28cf@annotation-expression h3e2d@e) h3e2e@m* h3e2f@s* h3e30@ae*) (values '() h3e1f@y-pat (h3db0@match h3e2d@e h3e20@z-pat h3e2e@m* h3e2f@s* h3e30@ae* h3e24@r)))))))) (h3da8@match-each-any (lambda (h3e01@e h3e02@m* h3e03@s* h3e04@ae*) (if (pair? h3e01@e) (let ((h3e09@l (h3da8@match-each-any (cdr h3e01@e) h3e02@m* h3e03@s* h3e04@ae*))) (and h3e09@l (cons (h3da2@stx^ (car h3e01@e) h3e02@m* h3e03@s* h3e04@ae*) h3e09@l))) (if (null? h3e01@e) '() (if (h2e81@stx? h3e01@e) (and (not (h2e3b@top-marked? h3e02@m*)) (call-with-values (lambda () (join-wraps h3e02@m* h3e03@s* h3e04@ae* h3e01@e)) (lambda (h3e11@h3e0c h3e12@h3e0e h3e13@h3e10) (let ((h3e17@ae* h3e13@h3e10) (h3e18@s* h3e12@h3e0e) (h3e19@m* h3e11@h3e0c)) (h3da8@match-each-any (h2e83@stx-expr h3e01@e) h3e19@m* h3e18@s* h3e17@ae*))))) (if (h29f9@h28cb@annotation? h3e01@e) (h3da8@match-each-any (h29fb@h28cf@annotation-expression h3e01@e) h3e02@m* h3e03@s* h3e04@ae*) '#f)))))) (h3daa@match-empty (lambda (h3dfb@p h3dfc@r) (if (null? h3dfb@p) h3dfc@r (if (eq? h3dfb@p '_) h3dfc@r (if (eq? h3dfb@p 'any) (cons '() h3dfc@r) (if (pair? h3dfb@p) (h3daa@match-empty (car h3dfb@p) (h3daa@match-empty (cdr h3dfb@p) h3dfc@r)) (if (eq? h3dfb@p 'each-any) (cons '() h3dfc@r) (let ((h3dff@t (vector-ref h3dfb@p '0))) (if (memv h3dff@t '(each)) (h3daa@match-empty (vector-ref h3dfb@p '1) h3dfc@r) (if (memv h3dff@t '(each+)) (h3daa@match-empty (vector-ref h3dfb@p '1) (h3daa@match-empty (reverse (vector-ref h3dfb@p '2)) (h3daa@match-empty (vector-ref h3dfb@p '3) h3dfc@r))) (if (memv h3dff@t '(free-id atom)) h3dfc@r (if (memv h3dff@t '(scheme-id atom)) h3dfc@r (if (memv h3dff@t '(vector)) (h3daa@match-empty (vector-ref h3dfb@p '1) h3dfc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" h3dfb@p)))))))))))))) (h3dac@combine (lambda (h3df7@r* h3df8@r) (if (null? (car h3df7@r*)) h3df8@r (cons (map car h3df7@r*) (h3dac@combine (map cdr h3df7@r*) h3df8@r))))) (h3dae@match* (lambda (h3dd3@e h3dd4@p h3dd5@m* h3dd6@s* h3dd7@ae* h3dd8@r) (if (null? h3dd4@p) (and (null? h3dd3@e) h3dd8@r) (if (pair? h3dd4@p) (and (pair? h3dd3@e) (h3db0@match (car h3dd3@e) (car h3dd4@p) h3dd5@m* h3dd6@s* h3dd7@ae* (h3db0@match (cdr h3dd3@e) (cdr h3dd4@p) h3dd5@m* h3dd6@s* h3dd7@ae* h3dd8@r))) (if (eq? h3dd4@p 'each-any) (let ((h3ddf@l (h3da8@match-each-any h3dd3@e h3dd5@m* h3dd6@s* h3dd7@ae*))) (and h3ddf@l (cons h3ddf@l h3dd8@r))) (let ((h3de1@t (vector-ref h3dd4@p '0))) (if (memv h3de1@t '(each)) (if (null? h3dd3@e) (h3daa@match-empty (vector-ref h3dd4@p '1) h3dd8@r) (let ((h3de3@r* (h3da4@match-each h3dd3@e (vector-ref h3dd4@p '1) h3dd5@m* h3dd6@s* h3dd7@ae*))) (and h3de3@r* (h3dac@combine h3de3@r* h3dd8@r)))) (if (memv h3de1@t '(free-id)) (and (symbol? h3dd3@e) (h2e3b@top-marked? h3dd5@m*) (h2ebb@free-id=? (h3da2@stx^ h3dd3@e h3dd5@m* h3dd6@s* h3dd7@ae*) (vector-ref h3dd4@p '1)) h3dd8@r) (if (memv h3de1@t '(scheme-id)) (and (symbol? h3dd3@e) (h2e3b@top-marked? h3dd5@m*) (h2ebb@free-id=? (h3da2@stx^ h3dd3@e h3dd5@m* h3dd6@s* h3dd7@ae*) (h3044@scheme-stx (vector-ref h3dd4@p '1))) h3dd8@r) (if (memv h3de1@t '(each+)) (call-with-values (lambda () (h3da6@match-each+ h3dd3@e (vector-ref h3dd4@p '1) (vector-ref h3dd4@p '2) (vector-ref h3dd4@p '3) h3dd5@m* h3dd6@s* h3dd7@ae* h3dd8@r)) (lambda (h3deb@h3de6 h3dec@h3de8 h3ded@h3dea) (let ((h3df1@r h3ded@h3dea) (h3df2@y-pat h3dec@h3de8) (h3df3@xr* h3deb@h3de6)) (and h3df1@r (null? h3df2@y-pat) (if (null? h3df3@xr*) (h3daa@match-empty (vector-ref h3dd4@p '1) h3df1@r) (h3dac@combine h3df3@xr* h3df1@r)))))) (if (memv h3de1@t '(atom)) (and (fast-equal? (vector-ref h3dd4@p '1) (h2ec7@strip h3dd3@e h3dd5@m*)) h3dd8@r) (if (memv h3de1@t '(vector)) (and (vector? h3dd3@e) (h3db0@match (vector->list h3dd3@e) (vector-ref h3dd4@p '1) h3dd5@m* h3dd6@s* h3dd7@ae* h3dd8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" h3dd4@p))))))))))))) (h3db0@match (lambda (h3db5@e h3db6@p h3db7@m* h3db8@s* h3db9@ae* h3dba@r) (if (not h3dba@r) '#f (if (eq? h3db6@p '_) h3dba@r (if (eq? h3db6@p 'any) (cons (h3da2@stx^ h3db5@e h3db7@m* h3db8@s* h3db9@ae*) h3dba@r) (if (h2e81@stx? h3db5@e) (and (not (h2e3b@top-marked? h3db7@m*)) (call-with-values (lambda () (join-wraps h3db7@m* h3db8@s* h3db9@ae* h3db5@e)) (lambda (h3dc7@h3dc2 h3dc8@h3dc4 h3dc9@h3dc6) (let ((h3dcd@ae* h3dc9@h3dc6) (h3dce@s* h3dc8@h3dc4) (h3dcf@m* h3dc7@h3dc2)) (h3db0@match (h2e83@stx-expr h3db5@e) h3db6@p h3dcf@m* h3dce@s* h3dcd@ae* h3dba@r))))) (if (h29f9@h28cb@annotation? h3db5@e) (h3db0@match (h29fb@h28cf@annotation-expression h3db5@e) h3db6@p h3db7@m* h3db8@s* h3db9@ae* h3dba@r) (h3dae@match* h3db5@e h3db6@p h3db7@m* h3db8@s* h3db9@ae* h3dba@r))))))))) (lambda (h3db1@e h3db2@p) (h3db0@match h3db1@e h3db2@p '() '() '() '())))) (set! h4b92@h30bc@syntax-dispatch h30bc@syntax-dispatch) (set! h30be@ellipsis? (lambda (h3e85@x) (and (h2eb5@id? h3e85@x) (h2ebb@free-id=? h3e85@x (h3044@scheme-stx '...))))) (set! h4b93@h30be@ellipsis? h30be@ellipsis?) (set! h30c0@underscore? (lambda (h3e87@x) (and (h2eb5@id? h3e87@x) (h2ebb@free-id=? h3e87@x (h3044@scheme-stx '_))))) (set! h4b94@h30c0@underscore? h30c0@underscore?) (set! h30c2@verify-literals (lambda (h3e89@lits h3e8a@expr) (for-each (lambda (h3e8d@x) (if (or (not (h2eb5@id? h3e8d@x)) (h30be@ellipsis? h3e8d@x) (h30c0@underscore? h3e8d@x)) (h319c@syntax-violation '#f '"invalid literal" h3e8a@expr h3e8d@x) (void))) h3e89@lits))) (set! h4b95@h30c2@verify-literals h30c2@verify-literals) (set! h30c4@syntax-case-transformer (letrec* ((h3e90@build-dispatch-call (lambda (h3f01@pvars h3f02@expr h3f03@y h3f04@r h3f05@mr) (let ((h3f0b@ids (map car h3f01@pvars)) (h3f0c@levels (map cdr h3f01@pvars))) (let ((h3f0f@labels (map h2e41@gen-label h3f0b@ids)) (h3f10@new-vars (map h2e3d@gen-lexical h3f0b@ids))) (let ((h3f13@body (h30de@chi-expr (h2ea1@add-subst (h2e75@make-full-rib h3f0b@ids h3f0f@labels) h3f02@expr) (append (map (lambda (h3f15@label h3f16@var h3f17@level) (cons h3f15@label (h2ecf@make-binding 'syntax (cons h3f16@var h3f17@level)))) h3f0f@labels h3f10@new-vars (map cdr h3f01@pvars)) h3f04@r) h3f05@mr))) (list '(primitive apply) (h2e18@h2d4a@build-lambda '#f h3f10@new-vars h3f13@body) h3f03@y)))))) (h3e92@invalid-ids-error (lambda (h3ef5@id* h3ef6@e h3ef7@class) (let h3eff@find ((h3efb@id* h3ef5@id*) (h3efc@ok* '())) (if (null? h3efb@id*) (h319c@syntax-violation '#f '"invalid syntax" h3ef6@e) (if (h2eb5@id? (car h3efb@id*)) (if (h2ec1@bound-id-member? (car h3efb@id*) h3efc@ok*) (h3198@syntax-error (car h3efb@id*) '"duplicate " h3ef7@class) (h3eff@find (cdr h3efb@id*) (cons (car h3efb@id*) h3efc@ok*))) (h3198@syntax-error (car h3efb@id*) '"invalid " h3ef7@class)))))) (h3e94@gen-clause (lambda (h3ecd@x h3ece@keys h3ecf@clauses h3ed0@r h3ed1@mr h3ed2@pat h3ed3@fender h3ed4@expr) (call-with-values (lambda () (h30ba@convert-pattern h3ed2@pat h3ece@keys)) (lambda (h3ee1@h3ede h3ee2@h3ee0) (let ((h3ee5@pvars h3ee2@h3ee0) (h3ee6@p h3ee1@h3ede)) (if (not (h2ebf@distinct-bound-ids? (map car h3ee5@pvars))) (h3e92@invalid-ids-error (map car h3ee5@pvars) h3ed2@pat '"pattern variable") (if (not (for-all (lambda (h3ee9@x) (not (h30be@ellipsis? (car h3ee9@x)))) h3ee5@pvars)) (h319c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" h3ed2@pat) (let ((h3eeb@y (h2e3d@gen-lexical 'tmp))) (let ((h3eed@test (if (eq? h3ed3@fender '#t) h3eeb@y (let ((h3eef@call (h3e90@build-dispatch-call h3ee5@pvars h3ed3@fender h3eeb@y h3ed0@r h3ed1@mr))) (list 'if h3eeb@y h3eef@call (list 'quote '#f)))))) (let ((h3ef1@conseq (h3e90@build-dispatch-call h3ee5@pvars h3ed4@expr h3eeb@y h3ed0@r h3ed1@mr))) (let ((h3ef3@altern (h3e96@gen-syntax-case h3ecd@x h3ece@keys h3ecf@clauses h3ed0@r h3ed1@mr))) (list (h2e18@h2d4a@build-lambda '#f (list h3eeb@y) (list 'if h3eed@test h3ef1@conseq h3ef3@altern)) (list '(primitive syntax-dispatch) h3ecd@x (list 'quote h3ee6@p)))))))))))))) (h3e96@gen-syntax-case (lambda (h3eab@x h3eac@keys h3ead@clauses h3eae@r h3eaf@mr) (if (null? h3ead@clauses) (list '(primitive syntax-error) h3eab@x) (let ((h3eb5@t (car h3ead@clauses))) (let ((h3eb7@ls/false (h30bc@syntax-dispatch h3eb5@t '(any any)))) (if h3eb7@ls/false (apply (lambda (h3eb9@pat h3eba@expr) (if (and (h2eb5@id? h3eb9@pat) (not (h2ec1@bound-id-member? h3eb9@pat h3eac@keys)) (not (h30be@ellipsis? h3eb9@pat))) (if (h2ebb@free-id=? h3eb9@pat (h3044@scheme-stx '_)) (h30de@chi-expr h3eba@expr h3eae@r h3eaf@mr) (let ((h3ebd@lab (h2e41@gen-label h3eb9@pat)) (h3ebe@lex (h2e3d@gen-lexical h3eb9@pat))) (let ((h3ec1@body (h30de@chi-expr (h2ea1@add-subst (h2e75@make-full-rib (list h3eb9@pat) (list h3ebd@lab)) h3eba@expr) (cons (cons h3ebd@lab (h2ecf@make-binding 'syntax (cons h3ebe@lex '0))) h3eae@r) h3eaf@mr))) (list (h2e18@h2d4a@build-lambda '#f (list h3ebe@lex) h3ec1@body) h3eab@x)))) (h3e94@gen-clause h3eab@x h3eac@keys (cdr h3ead@clauses) h3eae@r h3eaf@mr h3eb9@pat '#t h3eba@expr))) h3eb7@ls/false) (let ((h3ec3@t h3eb5@t)) (let ((h3ec5@ls/false (h30bc@syntax-dispatch h3ec3@t '(any any any)))) (if h3ec5@ls/false (apply (lambda (h3ec7@pat h3ec8@fender h3ec9@expr) (h3e94@gen-clause h3eab@x h3eac@keys (cdr h3ead@clauses) h3eae@r h3eaf@mr h3ec7@pat h3ec8@fender h3ec9@expr)) h3ec5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3ec3@t))))))))))) (lambda (h3e97@e h3e98@r h3e99@mr) (let ((h3e9d@t h3e97@e)) (let ((h3e9f@ls/false (h30bc@syntax-dispatch h3e9d@t '(_ any each-any . each-any)))) (if h3e9f@ls/false (apply (lambda (h3ea1@expr h3ea2@keys h3ea3@clauses) (begin (h30c2@verify-literals h3ea2@keys h3e97@e) (let ((h3ea7@x (h2e3d@gen-lexical 'tmp))) (let ((h3ea9@body (h3e96@gen-syntax-case h3ea7@x h3ea2@keys h3ea3@clauses h3e98@r h3e99@mr))) (list (h2e18@h2d4a@build-lambda '#f (list h3ea7@x) h3ea9@body) (h30de@chi-expr h3ea1@expr h3e98@r h3e99@mr)))))) h3e9f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3e9d@t))))))) (set! h4b96@h30c4@syntax-case-transformer h30c4@syntax-case-transformer) (set! h30c6@ellipsis-map (lambda (h3f1b@proc h3f1c@ls . h3f1f@ls*) (letrec* ((h3f22@who '...)) (begin (if (not (list? h3f1c@ls)) (assertion-violation h3f22@who '"not a list" h3f1c@ls) (void)) (if (not (null? h3f1f@ls*)) (let ((h3f23@n (length h3f1c@ls))) (for-each (lambda (h3f25@x) (begin (if (not (list? h3f25@x)) (assertion-violation h3f22@who '"not a list" h3f25@x) (void)) (if (not (= (length h3f25@x) h3f23@n)) (assertion-violation h3f22@who '"length mismatch" h3f1c@ls h3f25@x) (void)))) h3f1f@ls*)) (void)) (apply map h3f1b@proc h3f1c@ls h3f1f@ls*))))) (set! h4b97@h30c6@ellipsis-map h30c6@ellipsis-map) (set! h30c8@syntax-transformer (letrec* ((h3f28@gen-syntax (lambda (h3f9f@src h3fa0@e h3fa1@r h3fa2@maps h3fa3@ellipsis? h3fa4@vec?) (let ((h3fab@t h3fa0@e)) (let ((h3fad@ls/false (h30bc@syntax-dispatch h3fab@t 'any))) (if (and h3fad@ls/false (apply (lambda (h3faf@dots) (h3fa3@ellipsis? h3faf@dots)) h3fad@ls/false)) (apply (lambda (h3fb1@dots) (h319c@syntax-violation '#f '"misplaced ellipsis in syntax form" h3f9f@src)) h3fad@ls/false) (let ((h3fb3@t h3fab@t)) (let ((h3fb5@ls/false (h30bc@syntax-dispatch h3fb3@t 'any))) (if (and h3fb5@ls/false (apply (lambda (h3fb7@id) (h2eb5@id? h3fb7@id)) h3fb5@ls/false)) (apply (lambda (h3fb9@id) (let ((h3fbb@label (h2ecb@id->label h3fa0@e))) (let ((h3fbd@b (h2ecd@label->binding h3fbb@label h3fa1@r))) (if (eq? (h2ed1@binding-type h3fbd@b) 'syntax) (call-with-values (lambda () (let ((h3fc3@var.lev (h2ed3@binding-value h3fbd@b))) (h3f2a@gen-ref h3f9f@src (car h3fc3@var.lev) (cdr h3fc3@var.lev) h3fa2@maps))) (lambda (h3fc5@h3fc0 h3fc6@h3fc2) (let ((h3fc9@maps h3fc6@h3fc2) (h3fca@var h3fc5@h3fc0)) (values (list 'ref h3fca@var) h3fc9@maps)))) (values (list 'quote h3fa0@e) h3fa2@maps))))) h3fb5@ls/false) (let ((h3fcd@t h3fb3@t)) (let ((h3fcf@ls/false (h30bc@syntax-dispatch h3fcd@t '(any any)))) (if (and h3fcf@ls/false (apply (lambda (h3fd1@dots h3fd2@e) (h3fa3@ellipsis? h3fd1@dots)) h3fcf@ls/false)) (apply (lambda (h3fd5@dots h3fd6@e) (if h3fa4@vec? (h319c@syntax-violation '#f '"misplaced ellipsis in syntax form" h3f9f@src) (h3f28@gen-syntax h3f9f@src h3fd6@e h3fa1@r h3fa2@maps (lambda (h3fd9@x) '#f) '#f))) h3fcf@ls/false) (let ((h3fdb@t h3fcd@t)) (let ((h3fdd@ls/false (h30bc@syntax-dispatch h3fdb@t '(any any . any)))) (if (and h3fdd@ls/false (apply (lambda (h3fdf@x h3fe0@dots h3fe1@y) (h3fa3@ellipsis? h3fe0@dots)) h3fdd@ls/false)) (apply (lambda (h3fe5@x h3fe6@dots h3fe7@y) (let h3ffd@f ((h3feb@y h3fe7@y) (h3fec@k (lambda (h3fef@maps) (call-with-values (lambda () (h3f28@gen-syntax h3f9f@src h3fe5@x h3fa1@r (cons '() h3fef@maps) h3fa3@ellipsis? '#f)) (lambda (h3ff5@h3ff2 h3ff6@h3ff4) (let ((h3ff9@maps h3ff6@h3ff4) (h3ffa@x h3ff5@h3ff2)) (if (null? (car h3ff9@maps)) (h319c@syntax-violation '#f '"extra ellipsis in syntax form" h3f9f@src) (values (h3f30@gen-map h3ffa@x (car h3ff9@maps)) (cdr h3ff9@maps))))))))) (let ((h3fff@t h3feb@y)) (let ((h4001@ls/false (h30bc@syntax-dispatch h3fff@t '()))) (if h4001@ls/false (apply (lambda () (h3fec@k h3fa2@maps)) h4001@ls/false) (let ((h4003@t h3fff@t)) (let ((h4005@ls/false (h30bc@syntax-dispatch h4003@t '(any . any)))) (if (and h4005@ls/false (apply (lambda (h4007@dots h4008@y) (h3fa3@ellipsis? h4007@dots)) h4005@ls/false)) (apply (lambda (h400b@dots h400c@y) (h3ffd@f h400c@y (lambda (h400f@maps) (call-with-values (lambda () (h3fec@k (cons '() h400f@maps))) (lambda (h4015@h4012 h4016@h4014) (let ((h4019@maps h4016@h4014) (h401a@x h4015@h4012)) (if (null? (car h4019@maps)) (h319c@syntax-violation '#f '"extra ellipsis in syntax form" h3f9f@src) (values (h3f2e@gen-mappend h401a@x (car h4019@maps)) (cdr h4019@maps))))))))) h4005@ls/false) (let ((h401d@t h4003@t)) (let ((h401f@ls/false (h30bc@syntax-dispatch h401d@t '_))) (if h401f@ls/false (apply (lambda () (call-with-values (lambda () (h3f28@gen-syntax h3f9f@src h3feb@y h3fa1@r h3fa2@maps h3fa3@ellipsis? h3fa4@vec?)) (lambda (h4025@h4022 h4026@h4024) (let ((h4029@maps h4026@h4024) (h402a@y h4025@h4022)) (call-with-values (lambda () (h3fec@k h4029@maps)) (lambda (h4031@h402e h4032@h4030) (let ((h4035@maps h4032@h4030) (h4036@x h4031@h402e)) (values (h3f2c@gen-append h4036@x h402a@y) h4035@maps)))))))) h401f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h401d@t)))))))))))) h3fdd@ls/false) (let ((h4039@t h3fdb@t)) (let ((h403b@ls/false (h30bc@syntax-dispatch h4039@t '(any . any)))) (if h403b@ls/false (apply (lambda (h403d@x h403e@y) (call-with-values (lambda () (h3f28@gen-syntax h3f9f@src h403d@x h3fa1@r h3fa2@maps h3fa3@ellipsis? '#f)) (lambda (h4045@h4042 h4046@h4044) (let ((h4049@maps h4046@h4044) (h404a@xnew h4045@h4042)) (call-with-values (lambda () (h3f28@gen-syntax h3f9f@src h403e@y h3fa1@r h4049@maps h3fa3@ellipsis? h3fa4@vec?)) (lambda (h4051@h404e h4052@h4050) (let ((h4055@maps h4052@h4050) (h4056@ynew h4051@h404e)) (values (h3f32@gen-cons h3fa0@e h403d@x h403e@y h404a@xnew h4056@ynew) h4055@maps)))))))) h403b@ls/false) (let ((h4059@t h4039@t)) (let ((h405b@ls/false (h30bc@syntax-dispatch h4059@t '#(vector each-any)))) (if h405b@ls/false (apply (lambda (h405d@ls) (call-with-values (lambda () (h3f28@gen-syntax h3f9f@src h405d@ls h3fa1@r h3fa2@maps h3fa3@ellipsis? '#t)) (lambda (h4063@h4060 h4064@h4062) (let ((h4067@maps h4064@h4062) (h4068@lsnew h4063@h4060)) (values (h3f34@gen-vector h3fa0@e h405d@ls h4068@lsnew) h4067@maps))))) h405b@ls/false) (let ((h406b@t h4059@t)) (let ((h406d@ls/false (h30bc@syntax-dispatch h406b@t '_))) (if h406d@ls/false (apply (lambda () (values (list 'quote h3fa0@e) h3fa2@maps)) h406d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h406b@t)))))))))))))))))))))))) (h3f2a@gen-ref (lambda (h3f85@src h3f86@var h3f87@level h3f88@maps) (if (= h3f87@level '0) (values h3f86@var h3f88@maps) (if (null? h3f88@maps) (h319c@syntax-violation '#f '"missing ellipsis in syntax form" h3f85@src) (call-with-values (lambda () (h3f2a@gen-ref h3f85@src h3f86@var (- h3f87@level '1) (cdr h3f88@maps))) (lambda (h3f91@h3f8e h3f92@h3f90) (let ((h3f95@outer-maps h3f92@h3f90) (h3f96@outer-var h3f91@h3f8e)) (let ((h3f99@t (assq h3f96@outer-var (car h3f88@maps)))) (if h3f99@t ((lambda (h3f9b@b) (values (cdr h3f9b@b) h3f88@maps)) h3f99@t) (let ((h3f9d@inner-var (h2e3d@gen-lexical 'tmp))) (values h3f9d@inner-var (cons (cons (cons h3f96@outer-var h3f9d@inner-var) (car h3f88@maps)) h3f95@outer-maps)))))))))))) (h3f2c@gen-append (lambda (h3f81@x h3f82@y) (if (fast-equal? h3f82@y ''()) h3f81@x (list 'append h3f81@x h3f82@y)))) (h3f2e@gen-mappend (lambda (h3f7d@e h3f7e@map-env) (list 'apply '(primitive append) (h3f30@gen-map h3f7d@e h3f7e@map-env)))) (h3f30@gen-map (lambda (h3f6b@e h3f6c@map-env) (let ((h3f6f@formals (map cdr h3f6c@map-env)) (h3f70@actuals (map (lambda (h3f73@x) (list 'ref (car h3f73@x))) h3f6c@map-env))) (if (eq? (car h3f6b@e) 'ref) (car h3f70@actuals) (if (for-all (lambda (h3f75@x) (and (eq? (car h3f75@x) 'ref) (memq (cadr h3f75@x) h3f6f@formals))) (cdr h3f6b@e)) (let ((h3f77@args (map (let ((h3f79@r (map cons h3f6f@formals h3f70@actuals))) (lambda (h3f7b@x) (cdr (assq (cadr h3f7b@x) h3f79@r)))) (cdr h3f6b@e)))) (cons 'map (cons (list 'primitive (car h3f6b@e)) h3f77@args))) (cons* 'map (list 'lambda h3f6f@formals h3f6b@e) h3f70@actuals)))))) (h3f32@gen-cons (lambda (h3f5b@e h3f5c@x h3f5d@y h3f5e@xnew h3f5f@ynew) (let ((h3f65@t (car h3f5f@ynew))) (if (memv h3f65@t '(quote)) (if (eq? (car h3f5e@xnew) 'quote) (let ((h3f67@xnew (cadr h3f5e@xnew)) (h3f68@ynew (cadr h3f5f@ynew))) (if (and (eq? h3f67@xnew h3f5c@x) (eq? h3f68@ynew h3f5d@y)) (list 'quote h3f5b@e) (list 'quote (cons h3f67@xnew h3f68@ynew)))) (if (null? (cadr h3f5f@ynew)) (list 'list h3f5e@xnew) (list 'cons h3f5e@xnew h3f5f@ynew))) (if (memv h3f65@t '(list)) (cons 'list (cons h3f5e@xnew (cdr h3f5f@ynew))) (list 'cons h3f5e@xnew h3f5f@ynew)))))) (h3f34@gen-vector (lambda (h3f55@e h3f56@ls h3f57@lsnew) (if (eq? (car h3f57@lsnew) 'quote) (if (eq? (cadr h3f57@lsnew) h3f56@ls) (list 'quote h3f55@e) (list 'quote (list->vector (cadr h3f57@lsnew)))) (if (eq? (car h3f57@lsnew) 'list) (cons 'vector (cdr h3f57@lsnew)) (list 'list->vector h3f57@lsnew))))) (h3f36@regen (lambda (h3f4f@x) (let ((h3f51@t (car h3f4f@x))) (if (memv h3f51@t '(ref)) (cadr h3f4f@x) (if (memv h3f51@t '(primitive)) (list 'primitive (cadr h3f4f@x)) (if (memv h3f51@t '(quote)) (list 'quote (cadr h3f4f@x)) (if (memv h3f51@t '(lambda)) (h2e18@h2d4a@build-lambda '#f (cadr h3f4f@x) (h3f36@regen (caddr h3f4f@x))) (if (memv h3f51@t '(map)) (let ((h3f53@ls (map h3f36@regen (cdr h3f4f@x)))) (cons '(primitive ellipsis-map) h3f53@ls)) (cons (list 'primitive (car h3f4f@x)) (map h3f36@regen (cdr h3f4f@x)))))))))))) (lambda (h3f37@e h3f38@r h3f39@mr) (let ((h3f3d@t h3f37@e)) (let ((h3f3f@ls/false (h30bc@syntax-dispatch h3f3d@t '(_ any)))) (if h3f3f@ls/false (apply (lambda (h3f41@x) (call-with-values (lambda () (h3f28@gen-syntax h3f37@e h3f41@x h3f38@r '() h30be@ellipsis? '#f)) (lambda (h3f47@h3f44 h3f48@h3f46) (let ((h3f4b@maps h3f48@h3f46) (h3f4c@e h3f47@h3f44)) (h3f36@regen h3f4c@e))))) h3f3f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h3f3d@t))))))) (set! h4b98@h30c8@syntax-transformer h30c8@syntax-transformer) (set! h30ca@core-macro-transformer (lambda (h406f@name) (let ((h4071@t h406f@name)) (if (memv h4071@t '(quote)) h306c@quote-transformer (if (memv h4071@t '(lambda)) h3070@lambda-transformer (if (memv h4071@t '(case-lambda)) h306e@case-lambda-transformer (if (memv h4071@t '(letrec)) h3054@letrec-transformer (if (memv h4071@t '(letrec*)) h3056@letrec*-transformer (if (memv h4071@t '(let)) h3052@let-transformer (if (memv h4071@t '(if)) h3064@if-transformer (if (memv h4071@t '(and)) h3066@and-transformer (if (memv h4071@t '(or)) h3068@or-transformer (if (memv h4071@t '(foreign-call)) h30b8@foreign-call-transformer (if (memv h4071@t '(syntax-case)) h30c4@syntax-case-transformer (if (memv h4071@t '(syntax)) h30c8@syntax-transformer (if (memv h4071@t '(type-descriptor)) h305a@type-descriptor-transformer (if (memv h4071@t '(record-type-descriptor)) h305c@record-type-descriptor-transformer (if (memv h4071@t '(record-constructor-descriptor)) h305e@record-constructor-descriptor-transformer (if (memv h4071@t '(fluid-let-syntax)) h3058@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" h406f@name)))))))))))))))))))) (set! h4b99@h30ca@core-macro-transformer h30ca@core-macro-transformer) (set! h30cc@symbol-macro (lambda (h4073@x h4074@set) (let ((h4077@t h4073@x)) (let ((h4079@ls/false (h30bc@syntax-dispatch h4077@t '(_ any)))) (if (and h4079@ls/false (apply (lambda (h407b@name) (and (h2eb5@id? h407b@name) (memq (h2eb7@id->sym h407b@name) h4074@set))) h4079@ls/false)) (apply (lambda (h407d@name) (h3072@bless (list 'quote h407d@name))) h4079@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4077@t)))))) (set! h4b9a@h30cc@symbol-macro h30cc@symbol-macro) (set! h30ce@macro-transformer (lambda (h407f@x) (if (procedure? h407f@x) h407f@x (if (symbol? h407f@x) (let ((h4081@t h407f@x)) (if (memv h4081@t '(define-record-type)) h30b0@define-record-type-macro (if (memv h4081@t '(define-struct)) h30ae@define-struct-macro (if (memv h4081@t '(include)) h30a4@include-macro (if (memv h4081@t '(cond)) h30a0@cond-macro (if (memv h4081@t '(let)) h3078@let-macro (if (memv h4081@t '(do)) h3098@do-macro (if (memv h4081@t '(or)) h309c@or-macro (if (memv h4081@t '(and)) h309e@and-macro (if (memv h4081@t '(let*)) h309a@let*-macro (if (memv h4081@t '(let-values)) h307a@let-values-macro (if (memv h4081@t '(let*-values)) h307c@let*-values-macro (if (memv h4081@t '(syntax-rules)) h30a8@syntax-rules-macro (if (memv h4081@t '(quasiquote)) h30aa@quasiquote-macro (if (memv h4081@t '(quasisyntax)) h30ac@quasisyntax-macro (if (memv h4081@t '(with-syntax)) h3074@with-syntax-macro (if (memv h4081@t '(when)) h3060@when-macro (if (memv h4081@t '(unless)) h3062@unless-macro (if (memv h4081@t '(case)) h306a@case-macro (if (memv h4081@t '(identifier-syntax)) h3096@identifier-syntax-macro (if (memv h4081@t '(time)) h308e@time-macro (if (memv h4081@t '(delay)) h3090@delay-macro (if (memv h4081@t '(assert)) h3092@assert-macro (if (memv h4081@t '(endianness)) h3094@endianness-macro (if (memv h4081@t '(guard)) h308a@guard-macro (if (memv h4081@t '(define-enumeration)) h308c@define-enumeration-macro (if (memv h4081@t '(trace-lambda)) h307e@trace-lambda-macro (if (memv h4081@t '(trace-define)) h3080@trace-define-macro (if (memv h4081@t '(trace-define-syntax)) h3082@trace-define-syntax-macro (if (memv h4081@t '(trace-let-syntax)) h3086@trace-let-syntax-macro (if (memv h4081@t '(trace-letrec-syntax)) h3088@trace-letrec-syntax-macro (if (memv h4081@t '(define-condition-type)) h30b2@define-condition-type-macro (if (memv h4081@t '(parameterize)) h30b6@parameterize-macro (if (memv h4081@t '(include-into)) h30a6@include-into-macro (if (memv h4081@t '(eol-style)) (lambda (h4083@x) (h30cc@symbol-macro h4083@x '(none lf cr crlf nel crnel ls))) (if (memv h4081@t '(error-handling-mode)) (lambda (h4085@x) (h30cc@symbol-macro h4085@x '(ignore raise replace))) (if (memv h4081@t '(buffer-mode)) (lambda (h4087@x) (h30cc@symbol-macro h4087@x '(none line block))) (if (memv h4081@t '(file-options)) h2e30@file-options-macro (if (memv h4081@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) h30b4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" h407f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" h407f@x))))) (set! h4b9b@h30ce@macro-transformer h30ce@macro-transformer) (set! h30d0@local-macro-transformer (lambda (h4089@x) (car h4089@x))) (set! h4b9c@h30d0@local-macro-transformer h30d0@local-macro-transformer) (set! h30d2@do-macro-call (lambda (h408b@transformer h408c@expr) (let ((h408f@out (h408b@transformer (h2e9f@add-mark h2e99@anti-mark h408c@expr '#f)))) (begin (let h4093@f ((h4091@x h408f@out)) (if (not (h2e81@stx? h4091@x)) (if (pair? h4091@x) (begin (h4093@f (car h4091@x)) (h4093@f (cdr h4091@x))) (if (vector? h4091@x) (vector-for-each h4093@f h4091@x) (if (symbol? h4091@x) (h319c@syntax-violation '#f '"raw symbol encountered in output of macro" h408c@expr h4091@x) (void)))) (void))) (h2e9f@add-mark (h2e97@gen-mark) h408f@out h408c@expr))))) (set! h4b9d@h30d2@do-macro-call h30d2@do-macro-call) (set! h30d4@chi-macro (lambda (h4095@p h4096@e) (h30d2@do-macro-call (h30ce@macro-transformer h4095@p) h4096@e))) (set! h4b9e@h30d4@chi-macro h30d4@chi-macro) (set! h30d6@chi-local-macro (lambda (h4099@p h409a@e) (h30d2@do-macro-call (h30d0@local-macro-transformer h4099@p) h409a@e))) (set! h4b9f@h30d6@chi-local-macro h30d6@chi-local-macro) (set! h30d8@chi-global-macro (lambda (h409d@p h409e@e) (let ((h40a1@lib (car h409d@p)) (h40a2@loc (cdr h409d@p))) (begin (h2cd2@h2b21@visit-library h40a1@lib) (let ((h40a5@x (symbol-value h40a2@loc))) (let ((h40a7@transformer (if (procedure? h40a5@x) h40a5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" h40a5@x)))) (h30d2@do-macro-call h40a7@transformer h409e@e))))))) (set! h4ba0@h30d8@chi-global-macro h30d8@chi-global-macro) (set! h30da@chi-expr* (lambda (h40a9@e* h40aa@r h40ab@mr) (if (null? h40a9@e*) '() (let ((h40af@e (h30de@chi-expr (car h40a9@e*) h40aa@r h40ab@mr))) (cons h40af@e (h30da@chi-expr* (cdr h40a9@e*) h40aa@r h40ab@mr)))))) (set! h4ba1@h30da@chi-expr* h30da@chi-expr*) (set! h30dc@chi-application (lambda (h40b1@e h40b2@r h40b3@mr) (let ((h40b7@t h40b1@e)) (let ((h40b9@ls/false (h30bc@syntax-dispatch h40b7@t '(any . each-any)))) (if h40b9@ls/false (apply (lambda (h40bb@rator h40bc@rands) (let ((h40bf@rator (h30de@chi-expr h40bb@rator h40b2@r h40b3@mr))) (cons h40bf@rator (h30da@chi-expr* h40bc@rands h40b2@r h40b3@mr)))) h40b9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h40b7@t)))))) (set! h4ba2@h30dc@chi-application h30dc@chi-application) (set! h30de@chi-expr (lambda (h40c1@e h40c2@r h40c3@mr) (call-with-values (lambda () (h2ed7@syntax-type h40c1@e h40c2@r)) (lambda (h40cd@h40c8 h40ce@h40ca h40cf@h40cc) (let ((h40d3@kwd h40cf@h40cc) (h40d4@value h40ce@h40ca) (h40d5@type h40cd@h40c8)) (let ((h40d9@t h40d5@type)) (if (memv h40d9@t '(core-macro)) (let ((h40db@transformer (h30ca@core-macro-transformer h40d4@value))) (h40db@transformer h40c1@e h40c2@r h40c3@mr)) (if (memv h40d9@t '(global)) (let ((h40dd@lib (car h40d4@value))) (let ((h40df@loc (cdr h40d4@value))) (begin ((h3124@inv-collector) h40dd@lib) h40df@loc))) (if (memv h40d9@t '(core-prim)) (let ((h40e1@name h40d4@value)) (list 'primitive h40e1@name)) (if (memv h40d9@t '(call)) (h30dc@chi-application h40c1@e h40c2@r h40c3@mr) (if (memv h40d9@t '(lexical)) (let ((h40e3@lex (h3046@lexical-var h40d4@value))) h40e3@lex) (if (memv h40d9@t '(global-macro global-macro!)) (h30de@chi-expr (h30d8@chi-global-macro h40d4@value h40c1@e) h40c2@r h40c3@mr) (if (memv h40d9@t '(local-macro local-macro!)) (h30de@chi-expr (h30d6@chi-local-macro h40d4@value h40c1@e) h40c2@r h40c3@mr) (if (memv h40d9@t '(macro macro!)) (h30de@chi-expr (h30d4@chi-macro h40d4@value h40c1@e) h40c2@r h40c3@mr) (if (memv h40d9@t '(constant)) (let ((h40e5@datum h40d4@value)) (list 'quote h40e5@datum)) (if (memv h40d9@t '(set!)) (h30e0@chi-set! h40c1@e h40c2@r h40c3@mr) (if (memv h40d9@t '(begin)) (let ((h40e7@t h40c1@e)) (let ((h40e9@ls/false (h30bc@syntax-dispatch h40e7@t '(_ any . each-any)))) (if h40e9@ls/false (apply (lambda (h40eb@x h40ec@x*) (h2e1a@h2d7a@build-sequence '#f (h30da@chi-expr* (cons h40eb@x h40ec@x*) h40c2@r h40c3@mr))) h40e9@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h40e7@t)))) (if (memv h40d9@t '(let-syntax letrec-syntax)) (let ((h40ef@t h40c1@e)) (let ((h40f1@ls/false (h30bc@syntax-dispatch h40ef@t '(_ #(each (any any)) any . each-any)))) (if (and h40f1@ls/false (apply (lambda (h40f3@xlhs* h40f4@xrhs* h40f5@xbody h40f6@xbody*) (if (not (h2ebd@valid-bound-ids? h40f3@xlhs*)) (h319c@syntax-violation '#f '"invalid identifiers" h40c1@e) (void))) h40f1@ls/false)) (apply (lambda (h40fb@xlhs* h40fc@xrhs* h40fd@xbody h40fe@xbody*) (let ((h4103@xlab* (map h2e41@gen-label h40fb@xlhs*))) (let ((h4105@xrib (h2e75@make-full-rib h40fb@xlhs* h4103@xlab*))) (let ((h4107@xb* (map (lambda (h4109@x) (h2eed@make-eval-transformer (h3116@expand-transformer (if (eq? h40d5@type 'let-syntax) h4109@x (h2ea1@add-subst h4105@xrib h4109@x)) h40c3@mr))) h40fc@xrhs*))) (h2e1a@h2d7a@build-sequence '#f (h30da@chi-expr* (map (lambda (h410b@x) (h2ea1@add-subst h4105@xrib h410b@x)) (cons h40fd@xbody h40fe@xbody*)) (append (map cons h4103@xlab* h4107@xb*) h40c2@r) (append (map cons h4103@xlab* h4107@xb*) h40c3@mr))))))) h40f1@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h40ef@t)))) (if (memv h40d9@t '(displaced-lexical)) (h319c@syntax-violation '#f '"identifier out of context" h40c1@e) (if (memv h40d9@t '(syntax)) (h319c@syntax-violation '#f '"reference to pattern variable outside a syntax form" h40c1@e) (if (memv h40d9@t '(define define-syntax module import library)) (h319c@syntax-violation '#f (string-append (let ((h410d@t h40d5@type)) (if (memv h410d@t '(define)) '"a definition" (if (memv h410d@t '(define-syntax)) '"a define-syntax" (if (memv h410d@t '(module)) '"a module definition" (if (memv h410d@t '(library)) '"a library definition" (if (memv h410d@t '(import)) '"an import declaration" (if (memv h410d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") h40c1@e) (if (memv h40d9@t '(mutable)) (h319c@syntax-violation '#f '"attempt to reference an unexportable variable" h40c1@e) (h319c@syntax-violation '#f '"invalid expression" h40c1@e))))))))))))))))))))))) (set! h4ba3@h30de@chi-expr h30de@chi-expr) (set! h30e0@chi-set! (lambda (h410f@e h4110@r h4111@mr) (let ((h4115@t h410f@e)) (let ((h4117@ls/false (h30bc@syntax-dispatch h4115@t '(_ any any)))) (if (and h4117@ls/false (apply (lambda (h4119@x h411a@v) (h2eb5@id? h4119@x)) h4117@ls/false)) (apply (lambda (h411d@x h411e@v) (call-with-values (lambda () (h2ed7@syntax-type h411d@x h4110@r)) (lambda (h4127@h4122 h4128@h4124 h4129@h4126) (let ((h412d@kwd h4129@h4126) (h412e@value h4128@h4124) (h412f@type h4127@h4122)) (let ((h4133@t h412f@type)) (if (memv h4133@t '(lexical)) (begin (h304a@set-lexical-mutable! h412e@value '#t) (list 'set! (h3046@lexical-var h412e@value) (h30de@chi-expr h411e@v h4110@r h4111@mr))) (if (memv h4133@t '(core-prim)) (h319c@syntax-violation '#f '"cannot modify imported core primitive" h410f@e) (if (memv h4133@t '(global)) (h319c@syntax-violation '#f '"attempt to modify imported binding" h410f@e) (if (memv h4133@t '(global-macro!)) (h30de@chi-expr (h30d8@chi-global-macro h412e@value h410f@e) h4110@r h4111@mr) (if (memv h4133@t '(local-macro!)) (h30de@chi-expr (h30d6@chi-local-macro h412e@value h410f@e) h4110@r h4111@mr) (if (memv h4133@t '(mutable)) (h319c@syntax-violation '#f '"attempt to assign to an unexportable variable" h410f@e) (h319c@syntax-violation '#f '"invalid syntax" h410f@e)))))))))))) h4117@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4115@t)))))) (set! h4ba4@h30e0@chi-set! h30e0@chi-set!) (set! h30e2@verify-formals (lambda (h4135@fmls h4136@stx) (let ((h4139@t h4135@fmls)) (let ((h413b@ls/false (h30bc@syntax-dispatch h4139@t 'each-any))) (if h413b@ls/false (apply (lambda (h413d@x*) (if (not (h2ebd@valid-bound-ids? h413d@x*)) (h3076@invalid-fmls-error h4136@stx h4135@fmls) (void))) h413b@ls/false) (let ((h413f@t h4139@t)) (let ((h4141@ls/false (h30bc@syntax-dispatch h413f@t '#(each+ any () any)))) (if h4141@ls/false (apply (lambda (h4143@x* h4144@x) (if (not (h2ebd@valid-bound-ids? (cons h4144@x h4143@x*))) (h3076@invalid-fmls-error h4136@stx h4135@fmls) (void))) h4141@ls/false) (let ((h4147@t h413f@t)) (let ((h4149@ls/false (h30bc@syntax-dispatch h4147@t '_))) (if h4149@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid syntax" h4136@stx)) h4149@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4147@t)))))))))))) (set! h4ba5@h30e2@verify-formals h30e2@verify-formals) (set! h30e4@chi-lambda-clause (lambda (h414b@stx h414c@fmls h414d@body* h414e@r h414f@mr) (let ((h4155@t h414c@fmls)) (let ((h4157@ls/false (h30bc@syntax-dispatch h4155@t 'each-any))) (if h4157@ls/false (apply (lambda (h4159@x*) (begin (h30e2@verify-formals h414c@fmls h414b@stx) (let ((h415b@lex* (map h2e3d@gen-lexical h4159@x*)) (h415c@lab* (map h2e41@gen-label h4159@x*))) (values h415b@lex* (h30f4@chi-internal (h2ea1@add-subst (h2e75@make-full-rib h4159@x* h415c@lab*) h414d@body*) (h304e@add-lexicals h415c@lab* h415b@lex* h414e@r) h414f@mr))))) h4157@ls/false) (let ((h415f@t h4155@t)) (let ((h4161@ls/false (h30bc@syntax-dispatch h415f@t '#(each+ any () any)))) (if h4161@ls/false (apply (lambda (h4163@x* h4164@x) (begin (h30e2@verify-formals h414c@fmls h414b@stx) (let ((h4167@lex* (map h2e3d@gen-lexical h4163@x*)) (h4168@lab* (map h2e41@gen-label h4163@x*)) (h4169@lex (h2e3d@gen-lexical h4164@x)) (h416a@lab (h2e41@gen-label h4164@x))) (values (append h4167@lex* h4169@lex) (h30f4@chi-internal (h2ea1@add-subst (h2e75@make-full-rib (cons h4164@x h4163@x*) (cons h416a@lab h4168@lab*)) h414d@body*) (h304e@add-lexicals (cons h416a@lab h4168@lab*) (cons h4169@lex h4167@lex*) h414e@r) h414f@mr))))) h4161@ls/false) (let ((h416f@t h415f@t)) (let ((h4171@ls/false (h30bc@syntax-dispatch h416f@t '_))) (if h4171@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid syntax" h414c@fmls)) h4171@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h416f@t)))))))))))) (set! h4ba6@h30e4@chi-lambda-clause h30e4@chi-lambda-clause) (set! h30e6@chi-lambda-clause* (lambda (h4173@stx h4174@fmls* h4175@body** h4176@r h4177@mr) (if (null? h4174@fmls*) (values '() '()) (call-with-values (lambda () (h30e4@chi-lambda-clause h4173@stx (car h4174@fmls*) (car h4175@body**) h4176@r h4177@mr)) (lambda (h4181@h417e h4182@h4180) (let ((h4185@b h4182@h4180) (h4186@a h4181@h417e)) (call-with-values (lambda () (h30e6@chi-lambda-clause* h4173@stx (cdr h4174@fmls*) (cdr h4175@body**) h4176@r h4177@mr)) (lambda (h418d@h418a h418e@h418c) (let ((h4191@b* h418e@h418c) (h4192@a* h418d@h418a)) (values (cons h4186@a h4192@a*) (cons h4185@b h4191@b*))))))))))) (set! h4ba7@h30e6@chi-lambda-clause* h30e6@chi-lambda-clause*) (set! h30e8@chi-defun (lambda (h4195@x h4196@r h4197@mr) (let ((h419b@fmls (car h4195@x)) (h419c@body* (cdr h4195@x))) (call-with-values (lambda () (h30e4@chi-lambda-clause h419b@fmls h419b@fmls h419c@body* h4196@r h4197@mr)) (lambda (h41a3@h41a0 h41a4@h41a2) (let ((h41a7@body h41a4@h41a2) (h41a8@fmls h41a3@h41a0)) (h2e18@h2d4a@build-lambda '#f h41a8@fmls h41a7@body))))))) (set! h4ba8@h30e8@chi-defun h30e8@chi-defun) (set! h30ea@chi-rhs (lambda (h41ab@rhs h41ac@r h41ad@mr) (let ((h41b1@t (car h41ab@rhs))) (if (memv h41b1@t '(defun)) (h30e8@chi-defun (cdr h41ab@rhs) h41ac@r h41ad@mr) (if (memv h41b1@t '(expr)) (let ((h41b3@expr (cdr h41ab@rhs))) (h30de@chi-expr h41b3@expr h41ac@r h41ad@mr)) (if (memv h41b1@t '(top-expr)) (let ((h41b5@expr (cdr h41ab@rhs))) (h2e1a@h2d7a@build-sequence '#f (list (h30de@chi-expr h41b5@expr h41ac@r h41ad@mr) (h2e1b@h2d7c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" h41ab@rhs))))))) (set! h4ba9@h30ea@chi-rhs h30ea@chi-rhs) (set! h30ec@expand-interaction-rhs*/init* (lambda (h41b7@lhs* h41b8@rhs* h41b9@init* h41ba@r h41bb@mr) (let h41c5@f ((h41c1@lhs* h41b7@lhs*) (h41c2@rhs* h41b8@rhs*)) (if (null? h41c1@lhs*) (map (lambda (h41c7@x) (h30de@chi-expr h41c7@x h41ba@r h41bb@mr)) h41b9@init*) (let ((h41c9@lhs (car h41c1@lhs*)) (h41ca@rhs (car h41c2@rhs*))) (let ((h41cd@t (car h41ca@rhs))) (if (memv h41cd@t '(defun)) (let ((h41cf@rhs (h30e8@chi-defun (cdr h41ca@rhs) h41ba@r h41bb@mr))) (cons (list 'set! h41c9@lhs h41cf@rhs) (h41c5@f (cdr h41c1@lhs*) (cdr h41c2@rhs*)))) (if (memv h41cd@t '(expr)) (let ((h41d1@rhs (h30de@chi-expr (cdr h41ca@rhs) h41ba@r h41bb@mr))) (cons (list 'set! h41c9@lhs h41d1@rhs) (h41c5@f (cdr h41c1@lhs*) (cdr h41c2@rhs*)))) (if (memv h41cd@t '(top-expr)) (let ((h41d3@e (h30de@chi-expr (cdr h41ca@rhs) h41ba@r h41bb@mr))) (cons h41d3@e (h41c5@f (cdr h41c1@lhs*) (cdr h41c2@rhs*)))) (error 'expand-interaction '"invallid" h41ca@rhs)))))))))) (set! h4baa@h30ec@expand-interaction-rhs*/init* h30ec@expand-interaction-rhs*/init*) (set! h30ee@chi-rhs* (lambda (h41d5@rhs* h41d6@r h41d7@mr) (let h41dd@f ((h41db@ls h41d5@rhs*)) (if (null? h41db@ls) '() (let ((h41df@a (h30ea@chi-rhs (car h41db@ls) h41d6@r h41d7@mr))) (cons h41df@a (h41dd@f (cdr h41db@ls)))))))) (set! h4bab@h30ee@chi-rhs* h30ee@chi-rhs*) (set! h30f0@find-bound=? (lambda (h41e1@x h41e2@lhs* h41e3@rhs*) (if (null? h41e2@lhs*) '#f (if (h2eb9@bound-id=? h41e1@x (car h41e2@lhs*)) (car h41e3@rhs*) (h30f0@find-bound=? h41e1@x (cdr h41e2@lhs*) (cdr h41e3@rhs*)))))) (set! h4bac@h30f0@find-bound=? h30f0@find-bound=?) (set! h30f2@find-dups (lambda (h41e7@ls) (let h41ed@f ((h41e9@ls h41e7@ls) (h41ea@dups '())) (if (null? h41e9@ls) h41ea@dups (let ((h41ef@t (h30f0@find-bound=? (car h41e9@ls) (cdr h41e9@ls) (cdr h41e9@ls)))) (if h41ef@t ((lambda (h41f1@x) (h41ed@f (cdr h41e9@ls) (cons (list (car h41e9@ls) h41f1@x) h41ea@dups))) h41ef@t) (h41ed@f (cdr h41e9@ls) h41ea@dups))))))) (set! h4bad@h30f2@find-dups h30f2@find-dups) (set! h30f4@chi-internal (lambda (h41f3@e* h41f4@r h41f5@mr) (let ((h41f9@rib (h2e69@make-empty-rib))) (call-with-values (lambda () (h3114@chi-body* (map (lambda (h420b@x) (h2ea1@add-subst h41f9@rib h420b@x)) (h2eb3@syntax->list h41f3@e*)) h41f4@r h41f5@mr '() '() '() '() '() h41f9@rib '#f)) (lambda (h420d@h41fc h420e@h41fe h420f@h4200 h4210@h4202 h4211@h4204 h4212@h4206 h4213@h4208 h4214@h420a) (let ((h421d@_exp* h4214@h420a) (h421e@kwd* h4213@h4208) (h421f@mod** h4212@h4206) (h4220@rhs* h4211@h4204) (h4221@lex* h4210@h4202) (h4222@mr h420f@h4200) (h4223@r h420e@h41fe) (h4224@e* h420d@h41fc)) (begin (if (null? h4224@e*) (h319c@syntax-violation '#f '"no expression in body" h4224@e*) (void)) (let ((h422d@init* (h30da@chi-expr* (append (apply append (reverse h421f@mod**)) h4224@e*) h4223@r h4222@mr))) (let ((h422f@rhs* (h30ee@chi-rhs* h4220@rhs* h4223@r h4222@mr))) (h2e1f@h2d84@build-letrec* '#f (reverse h4221@lex*) (reverse h422f@rhs*) (h2e1a@h2d7a@build-sequence '#f h422d@init*))))))))))) (set! h4bae@h30f4@chi-internal h30f4@chi-internal) (set! h30f6@parse-module (lambda (h4231@e) (let ((h4233@t h4231@e)) (let ((h4235@ls/false (h30bc@syntax-dispatch h4233@t '(_ each-any . each-any)))) (if h4235@ls/false (apply (lambda (h4237@export* h4238@b*) (begin (if (not (for-all h2eb5@id? h4237@export*)) (h319c@syntax-violation '#f '"module exports must be identifiers" h4231@e) (void)) (values '#f (list->vector h4237@export*) h4238@b*))) h4235@ls/false) (let ((h423b@t h4233@t)) (let ((h423d@ls/false (h30bc@syntax-dispatch h423b@t '(_ any each-any . each-any)))) (if h423d@ls/false (apply (lambda (h423f@name h4240@export* h4241@b*) (begin (if (not (h2eb5@id? h423f@name)) (h319c@syntax-violation '#f '"module name must be an identifier" h4231@e) (void)) (if (not (for-all h2eb5@id? h4240@export*)) (h319c@syntax-violation '#f '"module exports must be identifiers" h4231@e) (void)) (values h423f@name (list->vector h4240@export*) h4241@b*))) h423d@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h423b@t))))))))) (set! h4baf@h30f6@parse-module h30f6@parse-module) (set! h3100@module-interface? (lambda (h4245@x) (and (simple-struct? h4245@x) (eq? (simple-struct-name h4245@x) 'module-interface)))) (set! h4bb0@h3100@module-interface? h3100@module-interface?) (set! h3102@module-interface-first-mark (lambda (h4247@x) (simple-struct-ref h4247@x '0))) (set! h4bb1@h3102@module-interface-first-mark h3102@module-interface-first-mark) (set! h3104@set-module-interface-first-mark! (lambda (h4249@x h424a@val) (simple-struct-set! h4249@x '0 h424a@val))) (set! h4bb2@h3104@set-module-interface-first-mark! h3104@set-module-interface-first-mark!) (set! h3106@module-interface-exp-id-vec (lambda (h424d@x) (simple-struct-ref h424d@x '1))) (set! h4bb3@h3106@module-interface-exp-id-vec h3106@module-interface-exp-id-vec) (set! h3108@set-module-interface-exp-id-vec! (lambda (h424f@x h4250@val) (simple-struct-set! h424f@x '1 h4250@val))) (set! h4bb4@h3108@set-module-interface-exp-id-vec! h3108@set-module-interface-exp-id-vec!) (set! h310a@module-interface-exp-lab-vec (lambda (h4253@x) (simple-struct-ref h4253@x '2))) (set! h4bb5@h310a@module-interface-exp-lab-vec h310a@module-interface-exp-lab-vec) (set! h310c@set-module-interface-exp-lab-vec! (lambda (h4255@x h4256@val) (simple-struct-set! h4255@x '2 h4256@val))) (set! h4bb6@h310c@set-module-interface-exp-lab-vec! h310c@set-module-interface-exp-lab-vec!) (set! h310e@dummy '3) (set! h4bb7@h310e@dummy h310e@dummy) (set! h3110@module-interface-exp-id* (lambda (h4259@iface h425a@id) (letrec* ((h425e@diff-marks (lambda (h4265@ls h4266@x) (begin (if (null? h4265@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((h4269@a (car h4265@ls))) (if (eq? h4269@a h4266@x) '() (cons h4269@a (h425e@diff-marks (cdr h4265@ls) h4266@x)))))))) (let ((h425f@diff (h425e@diff-marks (h2e87@stx-mark* h425a@id) (h3102@module-interface-first-mark h4259@iface))) (h4260@id-vec (h3106@module-interface-exp-id-vec h4259@iface))) (if (null? h425f@diff) h4260@id-vec (vector-map (lambda (h4263@x) (make-simple-struct 'stx '5 (list (h2e83@stx-expr h4263@x) (append h425f@diff (h2e87@stx-mark* h4263@x)) '() '()))) h4260@id-vec)))))) (set! h4bb8@h3110@module-interface-exp-id* h3110@module-interface-exp-id*) (set! h3112@chi-internal-module (lambda (h426b@e h426c@r h426d@mr h426e@lex* h426f@rhs* h4270@mod** h4271@kwd*) (call-with-values (lambda () (h30f6@parse-module h426b@e)) (lambda (h427f@h427a h4280@h427c h4281@h427e) (let ((h4285@e* h4281@h427e) (h4286@exp-id* h4280@h427c) (h4287@name h427f@h427a)) (let ((h428b@rib (h2e69@make-empty-rib))) (let ((h428d@e* (map (lambda (h428f@x) (h2ea1@add-subst h428b@rib h428f@x)) (h2eb3@syntax->list h4285@e*)))) (call-with-values (lambda () (h3114@chi-body* h428d@e* h426c@r h426d@mr h426e@lex* h426f@rhs* h4270@mod** h4271@kwd* '() h428b@rib '#f)) (lambda (h42a1@h4292 h42a2@h4294 h42a3@h4296 h42a4@h4298 h42a5@h429a h42a6@h429c h42a7@h429e h42a8@h42a0) (let ((h42b1@_exp* h42a8@h42a0) (h42b2@kwd* h42a7@h429e) (h42b3@mod** h42a6@h429c) (h42b4@rhs* h42a5@h429a) (h42b5@lex* h42a4@h4298) (h42b6@mr h42a3@h4296) (h42b7@r h42a2@h4294) (h42b8@e* h42a1@h4292)) (let ((h42c1@exp-lab* (vector-map (lambda (h42c5@x) (or (h2ecb@id->label (make-simple-struct 'stx '5 (list (h2eb7@id->sym h42c5@x) (h2e87@stx-mark* h42c5@x) (list h428b@rib) '()))) (h319c@syntax-violation '#f '"cannot find module export" h42c5@x))) h4286@exp-id*)) (h42c2@mod** (cons h42b8@e* h42b3@mod**))) (if (not h4287@name) (values h42b5@lex* h42b4@rhs* h4286@exp-id* h42c1@exp-lab* h42b7@r h42b6@mr h42c2@mod** h42b2@kwd*) (let ((h42c7@lab (h2e41@gen-label 'module)) (h42c8@iface (make-simple-struct 'module-interface '4 (list (car (h2e87@stx-mark* h4287@name)) (vector-map (lambda (h42cb@x) (make-simple-struct 'stx '5 (list (h2e83@stx-expr h42cb@x) (h2e87@stx-mark* h42cb@x) '() '()))) h4286@exp-id*) h42c1@exp-lab*)))) (values h42b5@lex* h42b4@rhs* (vector h4287@name) (vector h42c7@lab) (cons (cons h42c7@lab (cons '$module h42c8@iface)) h42b7@r) (cons (cons h42c7@lab (cons '$module h42c8@iface)) h42b6@mr) h42c2@mod** h42b2@kwd*)))))))))))))) (set! h4bb9@h3112@chi-internal-module h3112@chi-internal-module) (set! h3114@chi-body* (lambda (h42cd@e* h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42d3@kwd* h42d4@exp* h42d5@rib h42d6@top?) (if (null? h42cd@e*) (values h42cd@e* h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42d3@kwd* h42d4@exp*) (let ((h42e1@e (car h42cd@e*))) (call-with-values (lambda () (h2ed7@syntax-type h42e1@e h42ce@r)) (lambda (h42e9@h42e4 h42ea@h42e6 h42eb@h42e8) (let ((h42ef@kwd h42eb@h42e8) (h42f0@value h42ea@h42e6) (h42f1@type h42e9@h42e4)) (let ((h42f5@kwd* (if (h2eb5@id? h42ef@kwd) (cons h42ef@kwd h42d3@kwd*) h42d3@kwd*))) (let ((h42f7@t h42f1@type)) (if (memv h42f7@t '(define)) (call-with-values (lambda () (h303e@parse-define h42e1@e)) (lambda (h42fd@h42fa h42fe@h42fc) (let ((h4301@rhs h42fe@h42fc) (h4302@id h42fd@h42fa)) (begin (if (h2ec1@bound-id-member? h4302@id h42f5@kwd*) (h319c@syntax-violation '#f '"cannot redefine keyword" h42e1@e) (void)) (call-with-values (lambda () (h2e45@gen-define-label+loc h4302@id h42d5@rib)) (lambda (h4309@h4306 h430a@h4308) (let ((h430d@lex h430a@h4308) (h430e@lab h4309@h4306)) (begin (h2e6b@extend-rib! h42d5@rib h4302@id h430e@lab) (h3114@chi-body* (cdr h42cd@e*) (h304c@add-lexical h430e@lab h430d@lex h42ce@r) h42cf@mr (cons h430d@lex h42d0@lex*) (cons h4301@rhs h42d1@rhs*) h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?))))))))) (if (memv h42f7@t '(define-syntax)) (call-with-values (lambda () (h3040@parse-define-syntax h42e1@e)) (lambda (h4315@h4312 h4316@h4314) (let ((h4319@rhs h4316@h4314) (h431a@id h4315@h4312)) (begin (if (h2ec1@bound-id-member? h431a@id h42f5@kwd*) (h319c@syntax-violation '#f '"cannot redefine keyword" h42e1@e) (void)) (let ((h431d@lab (h2e47@gen-define-label h431a@id h42d5@rib)) (h431e@expanded-rhs (h3116@expand-transformer h4319@rhs h42cf@mr))) (begin (h2e6b@extend-rib! h42d5@rib h431a@id h431d@lab) (let ((h4321@b (h2eed@make-eval-transformer h431e@expanded-rhs))) (h3114@chi-body* (cdr h42cd@e*) (cons (cons h431d@lab h4321@b) h42ce@r) (cons (cons h431d@lab h4321@b) h42cf@mr) h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?)))))))) (if (memv h42f7@t '(let-syntax letrec-syntax)) (let ((h4323@t h42e1@e)) (let ((h4325@ls/false (h30bc@syntax-dispatch h4323@t '(_ #(each (any any)) . each-any)))) (if (and h4325@ls/false (apply (lambda (h4327@xlhs* h4328@xrhs* h4329@xbody*) (if (not (h2ebd@valid-bound-ids? h4327@xlhs*)) (h319c@syntax-violation '#f '"invalid identifiers" h42e1@e) (void))) h4325@ls/false)) (apply (lambda (h432d@xlhs* h432e@xrhs* h432f@xbody*) (let ((h4333@xlab* (map h2e41@gen-label h432d@xlhs*))) (let ((h4335@xrib (h2e75@make-full-rib h432d@xlhs* h4333@xlab*))) (let ((h4337@xb* (map (lambda (h4339@x) (h2eed@make-eval-transformer (h3116@expand-transformer (if (eq? h42f1@type 'let-syntax) h4339@x (h2ea1@add-subst h4335@xrib h4339@x)) h42cf@mr))) h432e@xrhs*))) (h3114@chi-body* (append (map (lambda (h433b@x) (h2ea1@add-subst h4335@xrib h433b@x)) h432f@xbody*) (cdr h42cd@e*)) (append (map cons h4333@xlab* h4337@xb*) h42ce@r) (append (map cons h4333@xlab* h4337@xb*) h42cf@mr) h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?))))) h4325@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4323@t)))) (if (memv h42f7@t '(begin)) (let ((h433d@t h42e1@e)) (let ((h433f@ls/false (h30bc@syntax-dispatch h433d@t '(_ . each-any)))) (if h433f@ls/false (apply (lambda (h4341@x*) (h3114@chi-body* (append h4341@x* (cdr h42cd@e*)) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?)) h433f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h433d@t)))) (if (memv h42f7@t '(global-macro global-macro!)) (h3114@chi-body* (cons (h2ea1@add-subst h42d5@rib (h30d8@chi-global-macro h42f0@value h42e1@e)) (cdr h42cd@e*)) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?) (if (memv h42f7@t '(local-macro local-macro!)) (h3114@chi-body* (cons (h2ea1@add-subst h42d5@rib (h30d6@chi-local-macro h42f0@value h42e1@e)) (cdr h42cd@e*)) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?) (if (memv h42f7@t '(macro macro!)) (h3114@chi-body* (cons (h2ea1@add-subst h42d5@rib (h30d4@chi-macro h42f0@value h42e1@e)) (cdr h42cd@e*)) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?) (if (memv h42f7@t '(module)) (call-with-values (lambda () (h3112@chi-internal-module h42e1@e h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd*)) (lambda (h4353@h4344 h4354@h4346 h4355@h4348 h4356@h434a h4357@h434c h4358@h434e h4359@h4350 h435a@h4352) (let ((h4363@kwd* h435a@h4352) (h4364@mod** h4359@h4350) (h4365@mr h4358@h434e) (h4366@r h4357@h434c) (h4367@m-exp-lab* h4356@h434a) (h4368@m-exp-id* h4355@h4348) (h4369@rhs* h4354@h4346) (h436a@lex* h4353@h4344)) (begin (vector-for-each (lambda (h4373@id h4374@lab) (h2e6b@extend-rib! h42d5@rib h4373@id h4374@lab)) h4368@m-exp-id* h4367@m-exp-lab*) (h3114@chi-body* (cdr h42cd@e*) h4366@r h4365@mr h436a@lex* h4369@rhs* h4364@mod** h4363@kwd* h42d4@exp* h42d5@rib h42d6@top?))))) (if (memv h42f7@t '(library)) (begin (h317e@library-expander (h2ec9@stx->datum h42e1@e)) (h3114@chi-body* (cdr h42cd@e*) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?)) (if (memv h42f7@t '(export)) (let ((h4377@t h42e1@e)) (let ((h4379@ls/false (h30bc@syntax-dispatch h4377@t '(_ . each-any)))) (if h4379@ls/false (apply (lambda (h437b@exp-decl*) (h3114@chi-body* (cdr h42cd@e*) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* (append h437b@exp-decl* h42d4@exp*) h42d5@rib h42d6@top?)) h4379@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4377@t)))) (if (memv h42f7@t '(import)) (letrec* ((h437e@module-import? (lambda (h43d1@e) (let ((h43d3@t h43d1@e)) (let ((h43d5@ls/false (h30bc@syntax-dispatch h43d3@t '(_ any)))) (if (and h43d5@ls/false (apply (lambda (h43d7@id) (h2eb5@id? h43d7@id)) h43d5@ls/false)) (apply (lambda (h43d9@id) '#t) h43d5@ls/false) (let ((h43db@t h43d3@t)) (let ((h43dd@ls/false (h30bc@syntax-dispatch h43db@t '(_ . each-any)))) (if h43dd@ls/false (apply (lambda (h43df@imp*) '#f) h43dd@ls/false) (let ((h43e1@t h43db@t)) (let ((h43e3@ls/false (h30bc@syntax-dispatch h43e1@t '_))) (if h43e3@ls/false (apply (lambda () (h319c@syntax-violation '#f '"malformed import form" h43d1@e)) h43e3@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h43e1@t)))))))))))) (h4380@module-import (lambda (h43af@e h43b0@r) (let ((h43b3@t h43af@e)) (let ((h43b5@ls/false (h30bc@syntax-dispatch h43b3@t '(_ any)))) (if (and h43b5@ls/false (apply (lambda (h43b7@id) (h2eb5@id? h43b7@id)) h43b5@ls/false)) (apply (lambda (h43b9@id) (call-with-values (lambda () (h2ed7@syntax-type h43b9@id h43b0@r)) (lambda (h43c1@h43bc h43c2@h43be h43c3@h43c0) (let ((h43c7@kwd h43c3@h43c0) (h43c8@value h43c2@h43be) (h43c9@type h43c1@h43bc)) (let ((h43cd@t h43c9@type)) (if (memv h43cd@t '($module)) (let ((h43cf@iface h43c8@value)) (values (h3110@module-interface-exp-id* h43cf@iface h43b9@id) (h310a@module-interface-exp-lab-vec h43cf@iface))) (h319c@syntax-violation '#f '"invalid import" h43af@e))))))) h43b5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h43b3@t)))))) (h4382@library-import (lambda (h4393@e) (let ((h4395@t h4393@e)) (let ((h4397@ls/false (h30bc@syntax-dispatch h4395@t '(any . each-any)))) (if h4397@ls/false (apply (lambda (h4399@ctxt h439a@imp*) (call-with-values (lambda () (h311e@parse-import-spec* (h31a2@syntax->datum h439a@imp*))) (lambda (h43a1@h439e h43a2@h43a0) (let ((h43a5@subst-labels h43a2@h43a0) (h43a6@subst-names h43a1@h439e)) (values (vector-map (lambda (h43a9@name) (h2e95@datum->stx h4399@ctxt h43a9@name)) h43a6@subst-names) h43a5@subst-labels))))) h4397@ls/false) (let ((h43ab@t h4395@t)) (let ((h43ad@ls/false (h30bc@syntax-dispatch h43ab@t '_))) (if h43ad@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid import form" h4393@e)) h43ad@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h43ab@t)))))))))) (begin (call-with-values (lambda () (if (h437e@module-import? h42e1@e) (h4380@module-import h42e1@e h42ce@r) (h4382@library-import h42e1@e))) (lambda (h4387@h4384 h4388@h4386) (let ((h438b@lab* h4388@h4386) (h438c@id* h4387@h4384)) (vector-for-each (lambda (h438f@id h4390@lab) (h2e6b@extend-rib! h42d5@rib h438f@id h4390@lab)) h438c@id* h438b@lab*)))) (h3114@chi-body* (cdr h42cd@e*) h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?))) (if h42d6@top? (h3114@chi-body* (cdr h42cd@e*) h42ce@r h42cf@mr (cons (h2e3d@gen-lexical 'dummy) h42d0@lex*) (cons (cons 'top-expr h42e1@e) h42d1@rhs*) h42d2@mod** h42f5@kwd* h42d4@exp* h42d5@rib h42d6@top?) (values h42cd@e* h42ce@r h42cf@mr h42d0@lex* h42d1@rhs* h42d2@mod** h42f5@kwd* h42d4@exp*)))))))))))))))))))))) (set! h4bba@h3114@chi-body* h3114@chi-body*) (set! h3116@expand-transformer (lambda (h43e5@expr h43e6@r) (let ((h43e9@rtc (h3122@make-collector))) (let ((h43eb@expanded-rhs (let ((h43f5@h43ee h3124@inv-collector) (h43f6@h43f0 h3126@vis-collector) (h43f7@h43f2 h43e9@rtc) (h43f8@h43f4 (lambda (h43fd@x) (values)))) (let ((h43ff@swap (lambda () (begin (let ((h4401@t (h43f5@h43ee))) (begin (h43f5@h43ee h43f7@h43f2) (set! h43f7@h43f2 h4401@t))) (let ((h4403@t (h43f6@h43f0))) (begin (h43f6@h43f0 h43f8@h43f4) (set! h43f8@h43f4 h4403@t))))))) (dynamic-wind h43ff@swap (lambda () (h30de@chi-expr h43e5@expr h43e6@r h43e6@r)) h43ff@swap))))) (begin (for-each (let ((h4405@mark-visit (h3126@vis-collector))) (lambda (h4407@x) (begin (h2cd1@h2b1f@invoke-library h4407@x) (h4405@mark-visit h4407@x)))) (h43e9@rtc)) h43eb@expanded-rhs))))) (set! h4bbb@h3116@expand-transformer h3116@expand-transformer) (set! h3118@parse-exports (lambda (h4409@exp*) (let h4411@f ((h440b@exp* h4409@exp*) (h440c@int* '()) (h440d@ext* '())) (if (null? h440b@exp*) (begin (if (not (h2ebd@valid-bound-ids? h440d@ext*)) (h319c@syntax-violation 'export '"invalid exports" (h30f2@find-dups h440d@ext*)) (void)) (values (map h31a2@syntax->datum h440d@ext*) h440c@int*)) (let ((h4413@t (car h440b@exp*))) (let ((h4415@ls/false (h30bc@syntax-dispatch h4413@t '(any . #(each (any any)))))) (if h4415@ls/false (apply (lambda (h4417@rename h4418@i* h4419@e*) (begin (if (not (and (eq? (h31a2@syntax->datum h4417@rename) 'rename) (for-all h2eb5@id? h4418@i*) (for-all h2eb5@id? h4419@e*))) (h319c@syntax-violation 'export '"invalid export specifier" (car h440b@exp*)) (void)) (h4411@f (cdr h440b@exp*) (append h4418@i* h440c@int*) (append h4419@e* h440d@ext*)))) h4415@ls/false) (let ((h441d@t h4413@t)) (let ((h441f@ls/false (h30bc@syntax-dispatch h441d@t 'any))) (if h441f@ls/false (apply (lambda (h4421@ie) (begin (if (not (h2eb5@id? h4421@ie)) (h319c@syntax-violation 'export '"invalid export" h4421@ie) (void)) (h4411@f (cdr h440b@exp*) (cons h4421@ie h440c@int*) (cons h4421@ie h440d@ext*)))) h441f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h441d@t))))))))))) (set! h4bbc@h3118@parse-exports h3118@parse-exports) (set! h311a@parse-library-name (lambda (h4423@spec) (letrec* ((h4426@parse (lambda (h4433@x) (let ((h4435@t h4433@x)) (let ((h4437@ls/false (h30bc@syntax-dispatch h4435@t '(each-any)))) (if (and h4437@ls/false (apply (lambda (h4439@v*) (for-all (lambda (h443b@x) (let ((h443d@x (h31a2@syntax->datum h443b@x))) (and (integer? h443d@x) (exact? h443d@x)))) h4439@v*)) h4437@ls/false)) (apply (lambda (h443f@v*) (values '() (map h31a2@syntax->datum h443f@v*))) h4437@ls/false) (let ((h4441@t h4435@t)) (let ((h4443@ls/false (h30bc@syntax-dispatch h4441@t '(any . any)))) (if (and h4443@ls/false (apply (lambda (h4445@x h4446@rest) (symbol? (h31a2@syntax->datum h4445@x))) h4443@ls/false)) (apply (lambda (h4449@x h444a@rest) (call-with-values (lambda () (h4426@parse h444a@rest)) (lambda (h4451@h444e h4452@h4450) (let ((h4455@v* h4452@h4450) (h4456@x* h4451@h444e)) (values (cons (h31a2@syntax->datum h4449@x) h4456@x*) h4455@v*))))) h4443@ls/false) (let ((h4459@t h4441@t)) (let ((h445b@ls/false (h30bc@syntax-dispatch h4459@t '()))) (if h445b@ls/false (apply (lambda () (values '() '())) h445b@ls/false) (let ((h445d@t h4459@t)) (let ((h445f@ls/false (h30bc@syntax-dispatch h445d@t '_))) (if h445f@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid library name" h4423@spec)) h445f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h445d@t)))))))))))))))) (call-with-values (lambda () (h4426@parse h4423@spec)) (lambda (h442b@h4428 h442c@h442a) (let ((h442f@ver* h442c@h442a) (h4430@name* h442b@h4428)) (begin (if (null? h4430@name*) (h319c@syntax-violation '#f '"empty library name" h4423@spec) (void)) (values h4430@name* h442f@ver*)))))))) (set! h4bbd@h311a@parse-library-name h311a@parse-library-name) (set! h311c@parse-library (lambda (h4461@e) (let ((h4463@t h4461@e)) (let ((h4465@ls/false (h30bc@syntax-dispatch h4463@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and h4465@ls/false (apply (lambda (h4467@library h4468@name* h4469@export h446a@exp* h446b@import h446c@imp* h446d@b*) (and (eq? (h31a2@syntax->datum h4469@export) 'export) (eq? (h31a2@syntax->datum h446b@import) 'import) (eq? (h31a2@syntax->datum h4467@library) 'library))) h4465@ls/false)) (apply (lambda (h4475@library h4476@name* h4477@export h4478@exp* h4479@import h447a@imp* h447b@b*) (values h4476@name* h4478@exp* h447a@imp* h447b@b*)) h4465@ls/false) (let ((h4483@t h4463@t)) (let ((h4485@ls/false (h30bc@syntax-dispatch h4483@t '_))) (if h4485@ls/false (apply (lambda () (h319c@syntax-violation '#f '"malformed library" h4461@e)) h4485@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4483@t))))))))) (set! h4bbe@h311c@parse-library h311c@parse-library) (set! h311e@parse-import-spec* (letrec* ((h4488@idsyn? (lambda (h4691@x) (symbol? (h31a2@syntax->datum h4691@x)))) (h448a@dup-error (lambda (h468f@name) (h319c@syntax-violation 'import '"two imports with different bindings" h468f@name))) (h448c@merge-substs (lambda (h467d@s h467e@subst) (letrec* ((h4682@insert-to-subst (lambda (h4683@a h4684@subst) (let ((h4687@name (car h4683@a)) (h4688@label (cdr h4683@a))) (let ((h468b@t (assq h4687@name h4684@subst))) (if h468b@t ((lambda (h468d@x) (if (eq? (cdr h468d@x) h4688@label) h4684@subst (h448a@dup-error h4687@name))) h468b@t) (cons h4683@a h4684@subst))))))) (if (null? h467d@s) h467e@subst (h4682@insert-to-subst (car h467d@s) (h448c@merge-substs (cdr h467d@s) h467e@subst)))))) (h448e@exclude* (lambda (h464d@sym* h464e@subst) (letrec* ((h4652@exclude (lambda (h466b@sym h466c@subst) (if (null? h466c@subst) (h319c@syntax-violation 'import '"cannot rename unbound identifier" h466b@sym) (if (eq? h466b@sym (caar h466c@subst)) (values (cdar h466c@subst) (cdr h466c@subst)) (let ((h466f@a (car h466c@subst))) (call-with-values (lambda () (h4652@exclude h466b@sym (cdr h466c@subst))) (lambda (h4675@h4672 h4676@h4674) (let ((h4679@subst h4676@h4674) (h467a@old h4675@h4672)) (values h467a@old (cons h466f@a h4679@subst))))))))))) (if (null? h464d@sym*) (values '() h464e@subst) (call-with-values (lambda () (h4652@exclude (car h464d@sym*) h464e@subst)) (lambda (h4657@h4654 h4658@h4656) (let ((h465b@subst h4658@h4656) (h465c@old h4657@h4654)) (call-with-values (lambda () (h448e@exclude* (cdr h464d@sym*) h465b@subst)) (lambda (h4663@h4660 h4664@h4662) (let ((h4667@subst h4664@h4662) (h4668@old* h4663@h4660)) (values (cons h465c@old h4668@old*) h4667@subst))))))))))) (h4490@find* (lambda (h4645@sym* h4646@subst) (map (lambda (h4649@x) (let ((h464b@t (assq h4649@x h4646@subst))) (if h464b@t (cdr h464b@t) (h319c@syntax-violation 'import '"cannot find identifier" h4649@x)))) h4645@sym*))) (h4492@rem* (lambda (h463d@sym* h463e@subst) (let h4643@f ((h4641@subst h463e@subst)) (if (null? h4641@subst) '() (if (memq (caar h4641@subst) h463d@sym*) (h4643@f (cdr h4641@subst)) (cons (car h4641@subst) (h4643@f (cdr h4641@subst)))))))) (h4494@remove-dups (lambda (h463b@ls) (if (null? h463b@ls) '() (if (memq (car h463b@ls) (cdr h463b@ls)) (h4494@remove-dups (cdr h463b@ls)) (cons (car h463b@ls) (h4494@remove-dups (cdr h463b@ls))))))) (h4496@parse-library-name (lambda (h4553@spec) (letrec* ((h4556@subversion? (lambda (h4637@x) (let ((h4639@x (h31a2@syntax->datum h4637@x))) (and (integer? h4639@x) (exact? h4639@x) (>= h4639@x '0))))) (h4558@subversion-pred (lambda (h45d7@x*) (let ((h45d9@t h45d7@x*)) (let ((h45db@ls/false (h30bc@syntax-dispatch h45d9@t 'any))) (if (and h45db@ls/false (apply (lambda (h45dd@n) (h4556@subversion? h45dd@n)) h45db@ls/false)) (apply (lambda (h45df@n) (lambda (h45e1@x) (= h45e1@x (h31a2@syntax->datum h45df@n)))) h45db@ls/false) (let ((h45e3@t h45d9@t)) (let ((h45e5@ls/false (h30bc@syntax-dispatch h45e3@t '(any . each-any)))) (if (and h45e5@ls/false (apply (lambda (h45e7@p? h45e8@sub*) (eq? (h31a2@syntax->datum h45e7@p?) 'and)) h45e5@ls/false)) (apply (lambda (h45eb@p? h45ec@sub*) (let ((h45ef@p* (map h4558@subversion-pred h45ec@sub*))) (lambda (h45f1@x) (for-all (lambda (h45f3@p) (h45f3@p h45f1@x)) h45ef@p*)))) h45e5@ls/false) (let ((h45f5@t h45e3@t)) (let ((h45f7@ls/false (h30bc@syntax-dispatch h45f5@t '(any . each-any)))) (if (and h45f7@ls/false (apply (lambda (h45f9@p? h45fa@sub*) (eq? (h31a2@syntax->datum h45f9@p?) 'or)) h45f7@ls/false)) (apply (lambda (h45fd@p? h45fe@sub*) (let ((h4601@p* (map h4558@subversion-pred h45fe@sub*))) (lambda (h4603@x) (exists (lambda (h4605@p) (h4605@p h4603@x)) h4601@p*)))) h45f7@ls/false) (let ((h4607@t h45f5@t)) (let ((h4609@ls/false (h30bc@syntax-dispatch h4607@t '(any any)))) (if (and h4609@ls/false (apply (lambda (h460b@p? h460c@sub) (eq? (h31a2@syntax->datum h460b@p?) 'not)) h4609@ls/false)) (apply (lambda (h460f@p? h4610@sub) (let ((h4613@p (h4558@subversion-pred h4610@sub))) (lambda (h4615@x) (not (h4613@p h4615@x))))) h4609@ls/false) (let ((h4617@t h4607@t)) (let ((h4619@ls/false (h30bc@syntax-dispatch h4617@t '(any any)))) (if (and h4619@ls/false (apply (lambda (h461b@p? h461c@n) (and (eq? (h31a2@syntax->datum h461b@p?) '<=) (h4556@subversion? h461c@n))) h4619@ls/false)) (apply (lambda (h461f@p? h4620@n) (lambda (h4623@x) (<= h4623@x (h31a2@syntax->datum h4620@n)))) h4619@ls/false) (let ((h4625@t h4617@t)) (let ((h4627@ls/false (h30bc@syntax-dispatch h4625@t '(any any)))) (if (and h4627@ls/false (apply (lambda (h4629@p? h462a@n) (and (eq? (h31a2@syntax->datum h4629@p?) '>=) (h4556@subversion? h462a@n))) h4627@ls/false)) (apply (lambda (h462d@p? h462e@n) (lambda (h4631@x) (>= h4631@x (h31a2@syntax->datum h462e@n)))) h4627@ls/false) (let ((h4633@t h4625@t)) (let ((h4635@ls/false (h30bc@syntax-dispatch h4633@t '_))) (if h4635@ls/false (apply (lambda () (h319c@syntax-violation 'import '"invalid sub-version spec" h4553@spec h45d7@x*)) h4635@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4633@t)))))))))))))))))))))))) (h455a@version-pred (lambda (h4587@x*) (let ((h4589@t h4587@x*)) (let ((h458b@ls/false (h30bc@syntax-dispatch h4589@t '()))) (if h458b@ls/false (apply (lambda () (lambda (h458d@x) '#t)) h458b@ls/false) (let ((h458f@t h4589@t)) (let ((h4591@ls/false (h30bc@syntax-dispatch h458f@t '(any . each-any)))) (if (and h4591@ls/false (apply (lambda (h4593@c h4594@ver*) (eq? (h31a2@syntax->datum h4593@c) 'and)) h4591@ls/false)) (apply (lambda (h4597@c h4598@ver*) (let ((h459b@p* (map h455a@version-pred h4598@ver*))) (lambda (h459d@x) (for-all (lambda (h459f@p) (h459f@p h459d@x)) h459b@p*)))) h4591@ls/false) (let ((h45a1@t h458f@t)) (let ((h45a3@ls/false (h30bc@syntax-dispatch h45a1@t '(any . each-any)))) (if (and h45a3@ls/false (apply (lambda (h45a5@c h45a6@ver*) (eq? (h31a2@syntax->datum h45a5@c) 'or)) h45a3@ls/false)) (apply (lambda (h45a9@c h45aa@ver*) (let ((h45ad@p* (map h455a@version-pred h45aa@ver*))) (lambda (h45af@x) (exists (lambda (h45b1@p) (h45b1@p h45af@x)) h45ad@p*)))) h45a3@ls/false) (let ((h45b3@t h45a1@t)) (let ((h45b5@ls/false (h30bc@syntax-dispatch h45b3@t '(any any)))) (if (and h45b5@ls/false (apply (lambda (h45b7@c h45b8@ver) (eq? (h31a2@syntax->datum h45b7@c) 'not)) h45b5@ls/false)) (apply (lambda (h45bb@c h45bc@ver) (let ((h45bf@p (h455a@version-pred h45bc@ver))) (lambda (h45c1@x) (not (h45bf@p h45c1@x))))) h45b5@ls/false) (let ((h45c3@t h45b3@t)) (let ((h45c5@ls/false (h30bc@syntax-dispatch h45c3@t 'each-any))) (if h45c5@ls/false (apply (lambda (h45c7@sub*) (let ((h45c9@p* (map h4558@subversion-pred h45c7@sub*))) (lambda (h45cb@x) (let h45d1@f ((h45cd@p* h45c9@p*) (h45ce@x h45cb@x)) (if (null? h45cd@p*) '#t (if (null? h45ce@x) '#f (and ((car h45cd@p*) (car h45ce@x)) (h45d1@f (cdr h45cd@p*) (cdr h45ce@x))))))))) h45c5@ls/false) (let ((h45d3@t h45c3@t)) (let ((h45d5@ls/false (h30bc@syntax-dispatch h45d3@t '_))) (if h45d5@ls/false (apply (lambda () (h319c@syntax-violation 'import '"invalid version spec" h4553@spec h4587@x*)) h45d5@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h45d3@t)))))))))))))))))))))) (let h455d@f ((h455b@x h4553@spec)) (let ((h455f@t h455b@x)) (let ((h4561@ls/false (h30bc@syntax-dispatch h455f@t '(each-any)))) (if h4561@ls/false (apply (lambda (h4563@version-spec*) (values '() (h455a@version-pred h4563@version-spec*))) h4561@ls/false) (let ((h4565@t h455f@t)) (let ((h4567@ls/false (h30bc@syntax-dispatch h4565@t '(any . any)))) (if (and h4567@ls/false (apply (lambda (h4569@x h456a@x*) (h4488@idsyn? h4569@x)) h4567@ls/false)) (apply (lambda (h456d@x h456e@x*) (call-with-values (lambda () (h455d@f h456e@x*)) (lambda (h4575@h4572 h4576@h4574) (let ((h4579@pred h4576@h4574) (h457a@name h4575@h4572)) (values (cons (h31a2@syntax->datum h456d@x) h457a@name) h4579@pred))))) h4567@ls/false) (let ((h457d@t h4565@t)) (let ((h457f@ls/false (h30bc@syntax-dispatch h457d@t '()))) (if h457f@ls/false (apply (lambda () (values '() (lambda (h4581@x) '#t))) h457f@ls/false) (let ((h4583@t h457d@t)) (let ((h4585@ls/false (h30bc@syntax-dispatch h4583@t '_))) (if h4585@ls/false (apply (lambda () (h319c@syntax-violation '#f '"invalid import spec" h4553@spec)) h4585@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4583@t))))))))))))))))) (h4498@import-library (lambda (h4543@spec*) (call-with-values (lambda () (h4496@parse-library-name h4543@spec*)) (lambda (h4549@h4546 h454a@h4548) (let ((h454d@pred h454a@h4548) (h454e@name h4549@h4546)) (begin (if (null? h454e@name) (h319c@syntax-violation 'import '"empty library name" h4543@spec*) (void)) (let ((h4551@lib (h2cca@h2b11@find-library-by-name h454e@name))) (begin (if (not h4551@lib) (h319c@syntax-violation 'import '"cannot find library with required name" h454e@name) (void)) (if (not (h454d@pred (h2ca4@h2ac5@library-version h4551@lib))) (h319c@syntax-violation 'import '"library does not satisfy version specification" h4543@spec* h4551@lib) (void)) ((h3128@imp-collector) h4551@lib) (h2cac@h2ad5@library-subst h4551@lib))))))))) (h449a@get-import (lambda (h44b5@spec) (let ((h44b7@t h44b5@spec)) (let ((h44b9@ls/false (h30bc@syntax-dispatch h44b7@t '(any . each-any)))) (if (and h44b9@ls/false (apply (lambda (h44bb@x h44bc@x*) (not (memq (h31a2@syntax->datum h44bb@x) '(for rename except only prefix library)))) h44b9@ls/false)) (apply (lambda (h44bf@x h44c0@x*) (h4498@import-library (cons h44bf@x h44c0@x*))) h44b9@ls/false) (let ((h44c3@t h44b7@t)) (let ((h44c5@ls/false (h30bc@syntax-dispatch h44c3@t '(any any . #(each (any any)))))) (if (and h44c5@ls/false (apply (lambda (h44c7@rename h44c8@isp h44c9@old* h44ca@new*) (and (eq? (h31a2@syntax->datum h44c7@rename) 'rename) (for-all h4488@idsyn? h44c9@old*) (for-all h4488@idsyn? h44ca@new*))) h44c5@ls/false)) (apply (lambda (h44cf@rename h44d0@isp h44d1@old* h44d2@new*) (let ((h44d7@subst (h449a@get-import h44d0@isp)) (h44d8@old* (map h31a2@syntax->datum h44d1@old*)) (h44d9@new* (map h31a2@syntax->datum h44d2@new*))) (let ((h44dd@old-label* (h4490@find* h44d8@old* h44d7@subst))) (let ((h44df@subst (h4492@rem* h44d8@old* h44d7@subst))) (h448c@merge-substs (map cons h44d9@new* h44dd@old-label*) h44df@subst))))) h44c5@ls/false) (let ((h44e1@t h44c3@t)) (let ((h44e3@ls/false (h30bc@syntax-dispatch h44e1@t '(any any . each-any)))) (if (and h44e3@ls/false (apply (lambda (h44e5@except h44e6@isp h44e7@sym*) (and (eq? (h31a2@syntax->datum h44e5@except) 'except) (for-all h4488@idsyn? h44e7@sym*))) h44e3@ls/false)) (apply (lambda (h44eb@except h44ec@isp h44ed@sym*) (let ((h44f1@subst (h449a@get-import h44ec@isp))) (h4492@rem* (map h31a2@syntax->datum h44ed@sym*) h44f1@subst))) h44e3@ls/false) (let ((h44f3@t h44e1@t)) (let ((h44f5@ls/false (h30bc@syntax-dispatch h44f3@t '(any any . each-any)))) (if (and h44f5@ls/false (apply (lambda (h44f7@only h44f8@isp h44f9@sym*) (and (eq? (h31a2@syntax->datum h44f7@only) 'only) (for-all h4488@idsyn? h44f9@sym*))) h44f5@ls/false)) (apply (lambda (h44fd@only h44fe@isp h44ff@sym*) (let ((h4503@subst (h449a@get-import h44fe@isp)) (h4504@sym* (map h31a2@syntax->datum h44ff@sym*))) (let ((h4507@sym* (h4494@remove-dups h4504@sym*))) (let ((h4509@lab* (h4490@find* h4507@sym* h4503@subst))) (map cons h4507@sym* h4509@lab*))))) h44f5@ls/false) (let ((h450b@t h44f3@t)) (let ((h450d@ls/false (h30bc@syntax-dispatch h450b@t '(any any any)))) (if (and h450d@ls/false (apply (lambda (h450f@prefix h4510@isp h4511@p) (and (eq? (h31a2@syntax->datum h450f@prefix) 'prefix) (h4488@idsyn? h4511@p))) h450d@ls/false)) (apply (lambda (h4515@prefix h4516@isp h4517@p) (let ((h451b@subst (h449a@get-import h4516@isp)) (h451c@prefix (symbol->string (h31a2@syntax->datum h4517@p)))) (map (lambda (h451f@x) (cons (string->symbol (string-append h451c@prefix (symbol->string (car h451f@x)))) (cdr h451f@x))) h451b@subst))) h450d@ls/false) (let ((h4521@t h450b@t)) (let ((h4523@ls/false (h30bc@syntax-dispatch h4521@t '(any each-any)))) (if (and h4523@ls/false (apply (lambda (h4525@library h4526@spec*) (eq? (h31a2@syntax->datum h4525@library) 'library)) h4523@ls/false)) (apply (lambda (h4529@library h452a@spec*) (h4498@import-library h452a@spec*)) h4523@ls/false) (let ((h452d@t h4521@t)) (let ((h452f@ls/false (h30bc@syntax-dispatch h452d@t '(any any . any)))) (if (and h452f@ls/false (apply (lambda (h4531@for h4532@isp h4533@rest) (eq? (h31a2@syntax->datum h4531@for) 'for)) h452f@ls/false)) (apply (lambda (h4537@for h4538@isp h4539@rest) (h449a@get-import h4538@isp)) h452f@ls/false) (let ((h453d@t h452d@t)) (let ((h453f@ls/false (h30bc@syntax-dispatch h453d@t 'any))) (if h453f@ls/false (apply (lambda (h4541@spec) (h319c@syntax-violation 'import '"invalid import spec" h4541@spec)) h453f@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h453d@t))))))))))))))))))))))))))) (h449c@add-imports! (lambda (h44a5@imp h44a6@h) (let ((h44a9@subst (h449a@get-import h44a5@imp))) (for-each (lambda (h44ab@x) (let ((h44ad@name (car h44ab@x)) (h44ae@label (cdr h44ab@x))) (let ((h44b1@t (hashtable-ref h44a6@h h44ad@name '#f))) (if h44b1@t ((lambda (h44b3@l) (if (not (eq? h44b3@l h44ae@label)) (h448a@dup-error h44ad@name) (void))) h44b1@t) (hashtable-set! h44a6@h h44ad@name h44ae@label))))) h44a9@subst))))) (lambda (h449d@imp*) (let h44a3@f ((h449f@imp* h449d@imp*) (h44a0@h (make-eq-hashtable))) (if (null? h449f@imp*) (hashtable-entries h44a0@h) (begin (h449c@add-imports! (car h449f@imp*) h44a0@h) (h44a3@f (cdr h449f@imp*) h44a0@h))))))) (set! h4bbf@h311e@parse-import-spec* h311e@parse-import-spec*) (set! h3120@make-top-rib (lambda (h4693@names h4694@labels) (let ((h4697@rib (h2e69@make-empty-rib))) (begin (vector-for-each (lambda (h4699@name h469a@label) (begin (if (not (symbol? h4699@name)) (error 'make-top-rib '"BUG: not a symbol" h4699@name) (void)) (h2e6d@extend-rib/nc! h4697@rib (make-simple-struct 'stx '5 (list h4699@name h2e39@top-mark* '() '())) h469a@label))) h4693@names h4694@labels) h4697@rib)))) (set! h4bc0@h3120@make-top-rib h3120@make-top-rib) (set! h3122@make-collector (lambda () (let ((h469d@ls '())) (lambda h46a1 (let ((h46a2 (length h46a1))) (if (= h46a2 '0) (apply (lambda () h469d@ls) h46a1) (if (= h46a2 '1) (apply (lambda (h469f@x) (set! h469d@ls (h2e32@set-cons h469f@x h469d@ls))) h46a1) (error 'apply '"invalid arg count")))))))) (set! h4bc1@h3122@make-collector h3122@make-collector) (set! h3124@inv-collector (h2a05@h28e3@make-parameter (lambda h46a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (h46a5@x) (begin (if (not (procedure? h46a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" h46a5@x) (void)) h46a5@x)))) (set! h4bc2@h3124@inv-collector h3124@inv-collector) (set! h3126@vis-collector (h2a05@h28e3@make-parameter (lambda h46a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (h46a9@x) (begin (if (not (procedure? h46a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" h46a9@x) (void)) h46a9@x)))) (set! h4bc3@h3126@vis-collector h3126@vis-collector) (set! h3128@imp-collector (h2a05@h28e3@make-parameter (lambda h46ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (h46ad@x) (begin (if (not (procedure? h46ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" h46ad@x) (void)) h46ad@x)))) (set! h4bc4@h3128@imp-collector h3128@imp-collector) (set! h312a@chi-library-internal (lambda (h46af@e* h46b0@rib h46b1@top?) (call-with-values (lambda () (h3114@chi-body* h46af@e* '() '() '() '() '() '() '() h46b0@rib h46b1@top?)) (lambda (h46c5@h46b6 h46c6@h46b8 h46c7@h46ba h46c8@h46bc h46c9@h46be h46ca@h46c0 h46cb@h46c2 h46cc@h46c4) (let ((h46d5@exp* h46cc@h46c4) (h46d6@_kwd* h46cb@h46c2) (h46d7@mod** h46ca@h46c0) (h46d8@rhs* h46c9@h46be) (h46d9@lex* h46c8@h46bc) (h46da@mr h46c7@h46ba) (h46db@r h46c6@h46b8) (h46dc@e* h46c5@h46b6)) (values (append (apply append (reverse h46d7@mod**)) h46dc@e*) h46db@r h46da@mr (reverse h46d9@lex*) (reverse h46d8@rhs*) h46d5@exp*)))))) (set! h4bc5@h312a@chi-library-internal h312a@chi-library-internal) (set! h312c@chi-interaction-expr (lambda (h46e5@e h46e6@rib h46e7@r) (call-with-values (lambda () (h3114@chi-body* (list h46e5@e) h46e7@r h46e7@r '() '() '() '() '() h46e6@rib '#t)) (lambda (h46fb@h46ec h46fc@h46ee h46fd@h46f0 h46fe@h46f2 h46ff@h46f4 h4700@h46f6 h4701@h46f8 h4702@h46fa) (let ((h470b@_exp* h4702@h46fa) (h470c@_kwd* h4701@h46f8) (h470d@mod** h4700@h46f6) (h470e@rhs* h46ff@h46f4) (h470f@lex* h46fe@h46f2) (h4710@mr h46fd@h46f0) (h4711@r h46fc@h46ee) (h4712@e* h46fb@h46ec)) (let ((h471b@e* (h30ec@expand-interaction-rhs*/init* (reverse h470f@lex*) (reverse h470e@rhs*) (append (apply append (reverse h470d@mod**)) h4712@e*) h4711@r h4710@mr))) (let ((h471d@e (if (null? h471b@e*) (h2e1b@h2d7c@build-void) (if (null? (cdr h471b@e*)) (car h471b@e*) (h2e1a@h2d7a@build-sequence '#f h471b@e*))))) (values h471d@e h4711@r)))))))) (set! h4bc6@h312c@chi-interaction-expr h312c@chi-interaction-expr) (set! h312e@library-body-expander (lambda (h471f@name h4720@main-exp* h4721@imp* h4722@b* h4723@top?) (letrec* ((h472a@itc (h3122@make-collector))) (let ((h4733@h472c h3128@imp-collector) (h4734@h472e h31ac@top-level-context) (h4735@h4730 h472a@itc) (h4736@h4732 '#f)) (let ((h473b@swap (lambda () (begin (let ((h473d@t (h4733@h472c))) (begin (h4733@h472c h4735@h4730) (set! h4735@h4730 h473d@t))) (let ((h473f@t (h4734@h472e))) (begin (h4734@h472e h4736@h4732) (set! h4736@h4732 h473f@t))))))) (dynamic-wind h473b@swap (lambda () (call-with-values (lambda () (h311e@parse-import-spec* h4721@imp*)) (lambda (h4745@h4742 h4746@h4744) (let ((h4749@subst-labels h4746@h4744) (h474a@subst-names h4745@h4742)) (let ((h474d@rib (h3120@make-top-rib h474a@subst-names h4749@subst-labels))) (letrec* ((h4750@wrap (lambda (h47cb@x) (make-simple-struct 'stx '5 (list h47cb@x h2e39@top-mark* (list h474d@rib) '()))))) (let ((h4751@b* (map h4750@wrap h4722@b*)) (h4752@main-exp* (map h4750@wrap h4720@main-exp*)) (h4753@rtc (h3122@make-collector)) (h4754@vtc (h3122@make-collector))) (let ((h4761@h475a h3124@inv-collector) (h4762@h475c h3126@vis-collector) (h4763@h475e h4753@rtc) (h4764@h4760 h4754@vtc)) (let ((h4769@swap (lambda () (begin (let ((h476b@t (h4761@h475a))) (begin (h4761@h475a h4763@h475e) (set! h4763@h475e h476b@t))) (let ((h476d@t (h4762@h475c))) (begin (h4762@h475c h4764@h4760) (set! h4764@h4760 h476d@t))))))) (dynamic-wind h4769@swap (lambda () (call-with-values (lambda () (h312a@chi-library-internal h4751@b* h474d@rib h4723@top?)) (lambda (h477b@h4770 h477c@h4772 h477d@h4774 h477e@h4776 h477f@h4778 h4780@h477a) (let ((h4787@internal-exp* h4780@h477a) (h4788@rhs* h477f@h4778) (h4789@lex* h477e@h4776) (h478a@mr h477d@h4774) (h478b@r h477c@h4772) (h478c@init* h477b@h4770)) (call-with-values (lambda () (h3118@parse-exports (append h4752@main-exp* h4787@internal-exp*))) (lambda (h4797@h4794 h4798@h4796) (let ((h479b@exp-id* h4798@h4796) (h479c@exp-name* h4797@h4794)) (begin (h2e71@seal-rib! h474d@rib) (let ((h479f@init* (h30da@chi-expr* h478c@init* h478b@r h478a@mr))) (let ((h47a1@rhs* (h30ee@chi-rhs* h4788@rhs* h478b@r h478a@mr))) (begin (h2e73@unseal-rib! h474d@rib) (let ((h47a3@loc* (map h2e3f@gen-global h4789@lex*)) (h47a4@export-subst (h3186@make-export-subst h479c@exp-name* h479b@exp-id*))) (letrec* ((h47a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (h3188@make-export-env/macros h4789@lex* h47a3@loc* h478b@r)) (lambda (h47af@h47aa h47b0@h47ac h47b1@h47ae) (let ((h47b5@macro* h47b1@h47ae) (h47b6@global* h47b0@h47ac) (h47b7@export-env h47af@h47aa)) (begin (for-each (lambda (h47bb@s) (let ((h47bd@name (car h47bb@s)) (h47be@label (cdr h47bb@s))) (let ((h47c1@p (assq h47be@label h47b7@export-env))) (if h47c1@p (let ((h47c3@b (cdr h47c1@p))) (let ((h47c5@type (car h47c3@b))) (if (eq? h47c5@type 'mutable) (h319c@syntax-violation 'export h47a8@errstr h47bd@name) (void)))) (void))))) h47a4@export-subst) (let ((h47c7@invoke-body (h2e20@h2d86@build-library-letrec* '#f h471f@name h4789@lex* h47a3@loc* h47a1@rhs* (if (null? h479f@init*) (h2e1b@h2d7c@build-void) (h2e1a@h2d7a@build-sequence '#f h479f@init*)))) (h47c8@invoke-definitions (map h2e17@h2cd9@build-global-define (map cdr h47b6@global*)))) (values (h472a@itc) (h4753@rtc) (h4754@vtc) (h2e1a@h2d7a@build-sequence '#f (append h47c8@invoke-definitions (list h47c7@invoke-body))) h47b5@macro* h47a4@export-subst h47b7@export-env))))))))))))))))))) h4769@swap)))))))))) h473b@swap)))))) (set! h4bc7@h312e@library-body-expander h312e@library-body-expander) (set! h3130@core-library-expander (lambda (h47cd@e h47ce@verify-name) (call-with-values (lambda () (h311c@parse-library h47cd@e)) (lambda (h47d9@h47d2 h47da@h47d4 h47db@h47d6 h47dc@h47d8) (let ((h47e1@b* h47dc@h47d8) (h47e2@imp* h47db@h47d6) (h47e3@exp* h47da@h47d4) (h47e4@name* h47d9@h47d2)) (call-with-values (lambda () (h311a@parse-library-name h47e4@name*)) (lambda (h47ed@h47ea h47ee@h47ec) (let ((h47f1@ver h47ee@h47ec) (h47f2@name h47ed@h47ea)) (begin (h47ce@verify-name h47f2@name) (call-with-values (lambda () (h312e@library-body-expander h47f2@name h47e3@exp* h47e2@imp* h47e1@b* '#f)) (lambda (h4803@h47f6 h4804@h47f8 h4805@h47fa h4806@h47fc h4807@h47fe h4808@h4800 h4809@h4802) (let ((h4811@export-env h4809@h4802) (h4812@export-subst h4808@h4800) (h4813@visit-code h4807@h47fe) (h4814@invoke-code h4806@h47fc) (h4815@visit-req* h4805@h47fa) (h4816@invoke-req* h4804@h47f8) (h4817@imp* h4803@h47f6)) (values h47f2@name h47f1@ver h4817@imp* h4816@invoke-req* h4815@visit-req* h4814@invoke-code h4813@visit-code h4812@export-subst h4811@export-env))))))))))))) (set! h4bc8@h3130@core-library-expander h3130@core-library-expander) (set! h3132@parse-top-level-program (lambda (h481f@e*) (let ((h4821@t h481f@e*)) (let ((h4823@ls/false (h30bc@syntax-dispatch h4821@t '((any . each-any) . each-any)))) (if (and h4823@ls/false (apply (lambda (h4825@import h4826@imp* h4827@b*) (eq? (h31a2@syntax->datum h4825@import) 'import)) h4823@ls/false)) (apply (lambda (h482b@import h482c@imp* h482d@b*) (values h482c@imp* h482d@b*)) h4823@ls/false) (let ((h4831@t h4821@t)) (let ((h4833@ls/false (h30bc@syntax-dispatch h4831@t '((any . any) . any)))) (if (and h4833@ls/false (apply (lambda (h4835@import h4836@x h4837@y) (eq? (h31a2@syntax->datum h4835@import) 'import)) h4833@ls/false)) (apply (lambda (h483b@import h483c@x h483d@y) (h319c@syntax-violation 'expander '"invalid syntax of top-level program" (h2eaf@syntax-car h481f@e*))) h4833@ls/false) (let ((h4841@t h4831@t)) (let ((h4843@ls/false (h30bc@syntax-dispatch h4841@t '_))) (if h4843@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) h4843@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4841@t)))))))))))) (set! h4bc9@h3132@parse-top-level-program h3132@parse-top-level-program) (set! h3134@top-level-expander (lambda (h4845@e*) (call-with-values (lambda () (h3132@parse-top-level-program h4845@e*)) (lambda (h484b@h4848 h484c@h484a) (let ((h484f@b* h484c@h484a) (h4850@imp* h484b@h4848)) (call-with-values (lambda () (h312e@library-body-expander '() '() h4850@imp* h484f@b* '#t)) (lambda (h4861@h4854 h4862@h4856 h4863@h4858 h4864@h485a h4865@h485c h4866@h485e h4867@h4860) (let ((h486f@export-env h4867@h4860) (h4870@export-subst h4866@h485e) (h4871@visit-code h4865@h485c) (h4872@invoke-code h4864@h485a) (h4873@visit-req* h4863@h4858) (h4874@invoke-req* h4862@h4856) (h4875@imp* h4861@h4854)) (values h4874@invoke-req* h4872@invoke-code))))))))) (set! h4bca@h3134@top-level-expander h3134@top-level-expander) (set! h3136@rp (h2a02@h28dd@make-record-printer 'env (lambda (h487d@x h487e@p h487f@wr) (display '"#<environment>" h487e@p)))) (set! h4bcb@h3136@rp h3136@rp) (set! h3140@env? (lambda (h4883@x) (and (simple-struct? h4883@x) (eq? (simple-struct-name h4883@x) 'env)))) (set! h4bcc@h3140@env? h3140@env?) (set! h3142@env-names (lambda (h4885@x) (simple-struct-ref h4885@x '0))) (set! h4bcd@h3142@env-names h3142@env-names) (set! h3144@set-env-names! (lambda (h4887@x h4888@val) (simple-struct-set! h4887@x '0 h4888@val))) (set! h4bce@h3144@set-env-names! h3144@set-env-names!) (set! h3146@env-labels (lambda (h488b@x) (simple-struct-ref h488b@x '1))) (set! h4bcf@h3146@env-labels h3146@env-labels) (set! h3148@set-env-labels! (lambda (h488d@x h488e@val) (simple-struct-set! h488d@x '1 h488e@val))) (set! h4bd0@h3148@set-env-labels! h3148@set-env-labels!) (set! h314a@env-itc (lambda (h4891@x) (simple-struct-ref h4891@x '2))) (set! h4bd1@h314a@env-itc h314a@env-itc) (set! h314c@set-env-itc! (lambda (h4893@x h4894@val) (simple-struct-set! h4893@x '2 h4894@val))) (set! h4bd2@h314c@set-env-itc! h314c@set-env-itc!) (set! h314e@dummy '3) (set! h4bd3@h314e@dummy h314e@dummy) (set! h3150@rp (h2a02@h28dd@make-record-printer 'interaction-env (lambda (h4897@x h4898@p h4899@wr) (display '"#<environment>" h4898@p)))) (set! h4bd4@h3150@rp h3150@rp) (set! h315a@interaction-env? (lambda (h489d@x) (and (simple-struct? h489d@x) (eq? (simple-struct-name h489d@x) 'interaction-env)))) (set! h4bd5@h315a@interaction-env? h315a@interaction-env?) (set! h315c@interaction-env-rib (lambda (h489f@x) (simple-struct-ref h489f@x '0))) (set! h4bd6@h315c@interaction-env-rib h315c@interaction-env-rib) (set! h315e@set-interaction-env-rib! (lambda (h48a1@x h48a2@val) (simple-struct-set! h48a1@x '0 h48a2@val))) (set! h4bd7@h315e@set-interaction-env-rib! h315e@set-interaction-env-rib!) (set! h3160@interaction-env-r (lambda (h48a5@x) (simple-struct-ref h48a5@x '1))) (set! h4bd8@h3160@interaction-env-r h3160@interaction-env-r) (set! h3162@set-interaction-env-r! (lambda (h48a7@x h48a8@val) (simple-struct-set! h48a7@x '1 h48a8@val))) (set! h4bd9@h3162@set-interaction-env-r! h3162@set-interaction-env-r!) (set! h3164@interaction-env-locs (lambda (h48ab@x) (simple-struct-ref h48ab@x '2))) (set! h4bda@h3164@interaction-env-locs h3164@interaction-env-locs) (set! h3166@set-interaction-env-locs! (lambda (h48ad@x h48ae@val) (simple-struct-set! h48ad@x '2 h48ae@val))) (set! h4bdb@h3166@set-interaction-env-locs! h3166@set-interaction-env-locs!) (set! h3168@dummy '3) (set! h4bdc@h3168@dummy h3168@dummy) (set! h316a@interaction-environment-symbols (lambda () (h3172@environment-symbols (h31aa@interaction-environment)))) (set! h4bdd@h316a@interaction-environment-symbols h316a@interaction-environment-symbols) (set! h316c@environment-bindings (lambda (h48b1@e) (vector->list (vector-map (lambda (h48b3@name h48b4@label) (h316e@parse-binding (cons h48b3@name (h2cd0@h2b1d@imported-label->binding h48b4@label)))) (h3142@env-names h48b1@e) (h3146@env-labels h48b1@e))))) (set! h4bde@h316c@environment-bindings h316c@environment-bindings) (set! h316e@parse-binding (lambda (h48b7@b) (cons (car h48b7@b) (let ((h48b9@t (cadr h48b7@b))) (if (memv h48b9@t '(core-prim global)) 'procedure (if (memv h48b9@t '(core-macro macro global-macro)) 'syntax (if (memv h48b9@t '($core-rtd)) 'record (if (eq? (car h48b7@b) (cadr h48b7@b)) 'syntax 'unknown)))))))) (set! h4bdf@h316e@parse-binding h316e@parse-binding) (set! h3170@environment? (lambda (h48bb@x) (or (h3140@env? h48bb@x) (h315a@interaction-env? h48bb@x)))) (set! h4be0@h3170@environment? h3170@environment?) (set! h3172@environment-symbols (lambda (h48bd@x) (if (h3140@env? h48bd@x) (vector->list (h3142@env-names h48bd@x)) (if (h315a@interaction-env? h48bd@x) (map values (h2e53@rib-sym* (h315c@interaction-env-rib h48bd@x))) (assertion-violation 'environment-symbols '"not an environment" h48bd@x))))) (set! h4be1@h3172@environment-symbols h3172@environment-symbols) (set! h3174@environment (lambda h48bf@imp* (let ((h48c1@itc (h3122@make-collector))) (let ((h48c7@h48c4 h3128@imp-collector) (h48c8@h48c6 h48c1@itc)) (let ((h48cb@swap (lambda () (let ((h48cd@t (h48c7@h48c4))) (begin (h48c7@h48c4 h48c8@h48c6) (set! h48c8@h48c6 h48cd@t)))))) (dynamic-wind h48cb@swap (lambda () (call-with-values (lambda () (h311e@parse-import-spec* h48bf@imp*)) (lambda (h48d3@h48d0 h48d4@h48d2) (let ((h48d7@subst-labels h48d4@h48d2) (h48d8@subst-names h48d3@h48d0)) (make-simple-struct 'env '4 (list h48d8@subst-names h48d7@subst-labels h48c1@itc)))))) h48cb@swap)))))) (set! h4be2@h3174@environment h3174@environment) (set! h3176@null-environment (lambda (h48db@n) (begin (if (not (eqv? h48db@n '5)) (assertion-violation 'null-environment '"not 5" h48db@n) (void)) (h3174@environment '(psyntax null-environment-5))))) (set! h4be3@h3176@null-environment h3176@null-environment) (set! h3178@scheme-report-environment (lambda (h48dd@n) (begin (if (not (eqv? h48dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" h48dd@n) (void)) (h3174@environment '(psyntax scheme-report-environment-5))))) (set! h4be4@h3178@scheme-report-environment h3178@scheme-report-environment) (set! h317a@expand (lambda (h48df@x h48e0@env) (if (h3140@env? h48e0@env) (let ((h48e3@rib (h3120@make-top-rib (h3142@env-names h48e0@env) (h3146@env-labels h48e0@env)))) (let ((h48e5@x (make-simple-struct 'stx '5 (list h48df@x h2e39@top-mark* (list h48e3@rib) '()))) (h48e6@itc (h314a@env-itc h48e0@env)) (h48e7@rtc (h3122@make-collector)) (h48e8@vtc (h3122@make-collector))) (let ((h48ed@x (let ((h48ff@h48f0 h31ac@top-level-context) (h4900@h48f2 h3124@inv-collector) (h4901@h48f4 h3126@vis-collector) (h4902@h48f6 h3128@imp-collector) (h4903@h48f8 '#f) (h4904@h48fa h48e7@rtc) (h4905@h48fc h48e8@vtc) (h4906@h48fe h48e6@itc)) (let ((h490f@swap (lambda () (begin (let ((h4911@t (h48ff@h48f0))) (begin (h48ff@h48f0 h4903@h48f8) (set! h4903@h48f8 h4911@t))) (let ((h4913@t (h4900@h48f2))) (begin (h4900@h48f2 h4904@h48fa) (set! h4904@h48fa h4913@t))) (let ((h4915@t (h4901@h48f4))) (begin (h4901@h48f4 h4905@h48fc) (set! h4905@h48fc h4915@t))) (let ((h4917@t (h4902@h48f6))) (begin (h4902@h48f6 h4906@h48fe) (set! h4906@h48fe h4917@t))))))) (dynamic-wind h490f@swap (lambda () (h30de@chi-expr h48e5@x '() '())) h490f@swap))))) (begin (h2e71@seal-rib! h48e3@rib) (values h48ed@x (h48e7@rtc)))))) (if (h315a@interaction-env? h48e0@env) (let ((h4919@rib (h315c@interaction-env-rib h48e0@env)) (h491a@r (h3160@interaction-env-r h48e0@env)) (h491b@rtc (h3122@make-collector))) (let ((h491f@x (make-simple-struct 'stx '5 (list h48df@x h2e39@top-mark* (list h4919@rib) '())))) (call-with-values (lambda () (let ((h4935@h4926 h31ac@top-level-context) (h4936@h4928 h3124@inv-collector) (h4937@h492a h3126@vis-collector) (h4938@h492c h3128@imp-collector) (h4939@h492e h48e0@env) (h493a@h4930 h491b@rtc) (h493b@h4932 (h3122@make-collector)) (h493c@h4934 (h3122@make-collector))) (let ((h4945@swap (lambda () (begin (let ((h4947@t (h4935@h4926))) (begin (h4935@h4926 h4939@h492e) (set! h4939@h492e h4947@t))) (let ((h4949@t (h4936@h4928))) (begin (h4936@h4928 h493a@h4930) (set! h493a@h4930 h4949@t))) (let ((h494b@t (h4937@h492a))) (begin (h4937@h492a h493b@h4932) (set! h493b@h4932 h494b@t))) (let ((h494d@t (h4938@h492c))) (begin (h4938@h492c h493c@h4934) (set! h493c@h4934 h494d@t))))))) (dynamic-wind h4945@swap (lambda () (h312c@chi-interaction-expr h491f@x h4919@rib h491a@r)) h4945@swap)))) (lambda (h494f@h4922 h4950@h4924) (let ((h4953@r^ h4950@h4924) (h4954@e h494f@h4922)) (begin (h3162@set-interaction-env-r! h48e0@env h4953@r^) (values h4954@e (h491b@rtc)))))))) (assertion-violation 'expand '"not an environment" h48e0@env))))) (set! h4be5@h317a@expand h317a@expand) (set! h317c@eval (lambda (h4957@x h4958@env) (begin (if (not (h3170@environment? h4958@env)) (error 'eval '"not an environment" h4958@env) (void)) (call-with-values (lambda () (h317a@expand h4957@x h4958@env)) (lambda (h495f@h495c h4960@h495e) (let ((h4963@invoke-req* h4960@h495e) (h4964@x h495f@h495c)) (begin (for-each h2cd1@h2b1f@invoke-library h4963@invoke-req*) (eval-core (h2a5b@h2a13@expanded->core h4964@x))))))))) (set! h4be6@h317c@eval h317c@eval) (set! h317e@library-expander (lambda h49d5 (let ((h49d6 (length h49d5))) (if (= h49d6 '3) (apply (lambda (h4967@x h4968@filename h4969@verify-name) (letrec* ((h496e@build-visit-code (lambda (h49c3@macro*) (if (null? h49c3@macro*) (h2e1b@h2d7c@build-void) (h2e1a@h2d7a@build-sequence '#f (map (lambda (h49c5@x) (let ((h49c7@loc (car h49c5@x)) (h49c8@src (cddr h49c5@x))) (list 'set! h49c7@loc h49c8@src))) h49c3@macro*))))) (h4970@visit! (lambda (h49bb@macro*) (for-each (lambda (h49bd@x) (let ((h49bf@loc (car h49bd@x)) (h49c0@proc (cadr h49bd@x))) (set-symbol-value! h49bf@loc h49c0@proc))) h49bb@macro*)))) (call-with-values (lambda () (h3130@core-library-expander h4967@x h4969@verify-name)) (lambda (h4983@h4972 h4984@h4974 h4985@h4976 h4986@h4978 h4987@h497a h4988@h497c h4989@h497e h498a@h4980 h498b@h4982) (let ((h4995@export-env h498b@h4982) (h4996@export-subst h498a@h4980) (h4997@macro* h4989@h497e) (h4998@invoke-code h4988@h497c) (h4999@vis* h4987@h497a) (h499a@inv* h4986@h4978) (h499b@imp* h4985@h4976) (h499c@ver h4984@h4974) (h499d@name h4983@h4972)) (let ((h49a7@id (gensym)) (h49a8@name h499d@name) (h49a9@ver h499c@ver) (h49aa@imp* (map h2cd5@h2b27@library-spec h499b@imp*)) (h49ab@vis* (map h2cd5@h2b27@library-spec h4999@vis*)) (h49ac@inv* (map h2cd5@h2b27@library-spec h499a@inv*)) (h49ad@visit-proc (lambda () (h4970@visit! h4997@macro*))) (h49ae@invoke-proc (lambda () (eval-core (h2a5b@h2a13@expanded->core h4998@invoke-code)))) (h49af@visit-code (h496e@build-visit-code h4997@macro*)) (h49b0@invoke-code h4998@invoke-code)) (begin (h2ccf@h2b1b@install-library h49a7@id h49a8@name h49a9@ver h49aa@imp* h49ab@vis* h49ac@inv* h4996@export-subst h4995@export-env h49ad@visit-proc h49ae@invoke-proc h49af@visit-code h49b0@invoke-code '#t h4968@filename) (values h49a7@id h49a8@name h49a9@ver h49aa@imp* h49ab@vis* h49ac@inv* h49b0@invoke-code h49af@visit-code h4996@export-subst h4995@export-env)))))))) h49d5) (if (= h49d6 '2) (apply (lambda (h49cb@x h49cc@filename) (h317e@library-expander h49cb@x h49cc@filename (lambda (h49cf@x) (values)))) h49d5) (if (= h49d6 '1) (apply (lambda (h49d1@x) (h317e@library-expander h49d1@x '#f (lambda (h49d3@x) (values)))) h49d5) (error 'apply '"invalid arg count"))))))) (set! h4be7@h317e@library-expander h317e@library-expander) (set! h3180@boot-library-expand (lambda (h49d7@x) (call-with-values (lambda () (h317e@library-expander h49d7@x)) (lambda (h49ed@h49da h49ee@h49dc h49ef@h49de h49f0@h49e0 h49f1@h49e2 h49f2@h49e4 h49f3@h49e6 h49f4@h49e8 h49f5@h49ea h49f6@h49ec) (let ((h4a01@export-env h49f6@h49ec) (h4a02@export-subst h49f5@h49ea) (h4a03@visit-code h49f4@h49e8) (h4a04@invoke-code h49f3@h49e6) (h4a05@inv* h49f2@h49e4) (h4a06@vis* h49f1@h49e2) (h4a07@imp* h49f0@h49e0) (h4a08@ver h49ef@h49de) (h4a09@name h49ee@h49dc) (h4a0a@id h49ed@h49da)) (values h4a09@name h4a04@invoke-code h4a02@export-subst h4a01@export-env)))))) (set! h4be8@h3180@boot-library-expand h3180@boot-library-expand) (set! h3182@rev-map-append (lambda (h4a15@f h4a16@ls h4a17@ac) (if (null? h4a16@ls) h4a17@ac (h3182@rev-map-append h4a15@f (cdr h4a16@ls) (cons (h4a15@f (car h4a16@ls)) h4a17@ac))))) (set! h4be9@h3182@rev-map-append h3182@rev-map-append) (set! h3184@build-exports (lambda (h4a1b@lex*+loc* h4a1c@init*) (h2e1a@h2d7a@build-sequence '#f (cons (h2e1b@h2d7c@build-void) (h3182@rev-map-append (lambda (h4a1f@x) (list 'set! (cdr h4a1f@x) (car h4a1f@x))) h4a1b@lex*+loc* h4a1c@init*))))) (set! h4bea@h3184@build-exports h3184@build-exports) (set! h3186@make-export-subst (lambda (h4a21@name* h4a22@id*) (map (lambda (h4a25@name h4a26@id) (let ((h4a29@label (h2ecb@id->label h4a26@id))) (begin (if (not h4a29@label) (h319c@syntax-violation '#f '"cannot export unbound identifier" h4a26@id) (void)) (cons h4a25@name h4a29@label)))) h4a21@name* h4a22@id*))) (set! h4beb@h3186@make-export-subst h3186@make-export-subst) (set! h3188@make-export-env/macros (lambda (h4a2b@lex* h4a2c@loc* h4a2d@r) (letrec* ((h4a32@lookup (lambda (h4a4f@x) (let h4a57@f ((h4a51@x h4a4f@x) (h4a52@lex* h4a2b@lex*) (h4a53@loc* h4a2c@loc*)) (if (pair? h4a52@lex*) (if (eq? h4a51@x (car h4a52@lex*)) (car h4a53@loc*) (h4a57@f h4a51@x (cdr h4a52@lex*) (cdr h4a53@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let h4a3b@f ((h4a33@r h4a2d@r) (h4a34@env '()) (h4a35@global* '()) (h4a36@macro* '())) (if (null? h4a33@r) (values h4a34@env h4a35@global* h4a36@macro*) (let ((h4a3d@x (car h4a33@r))) (let ((h4a3f@label (car h4a3d@x)) (h4a40@b (cdr h4a3d@x))) (let ((h4a43@t (h2ed1@binding-type h4a40@b))) (if (memv h4a43@t '(lexical)) (let ((h4a45@v (h2ed3@binding-value h4a40@b))) (let ((h4a47@loc (h4a32@lookup (h3046@lexical-var h4a45@v))) (h4a48@type (if (h3048@lexical-mutable? h4a45@v) 'mutable 'global))) (h4a3b@f (cdr h4a33@r) (cons (cons* h4a3f@label h4a48@type h4a47@loc) h4a34@env) (cons (cons (h3046@lexical-var h4a45@v) h4a47@loc) h4a35@global*) h4a36@macro*))) (if (memv h4a43@t '(local-macro)) (let ((h4a4b@loc (gensym))) (h4a3b@f (cdr h4a33@r) (cons (cons* h4a3f@label 'global-macro h4a4b@loc) h4a34@env) h4a35@global* (cons (cons h4a4b@loc (h2ed3@binding-value h4a40@b)) h4a36@macro*))) (if (memv h4a43@t '(local-macro!)) (let ((h4a4d@loc (gensym))) (h4a3b@f (cdr h4a33@r) (cons (cons* h4a3f@label 'global-macro! h4a4d@loc) h4a34@env) h4a35@global* (cons (cons h4a4d@loc (h2ed3@binding-value h4a40@b)) h4a36@macro*))) (if (memv h4a43@t '($rtd $module)) (h4a3b@f (cdr h4a33@r) (cons h4a3d@x h4a34@env) h4a35@global* h4a36@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (h2ed1@binding-type h4a40@b) (h2ed3@binding-value h4a40@b)))))))))))))) (set! h4bec@h3188@make-export-env/macros h3188@make-export-env/macros) (set! h318a@generate-temporaries (lambda (h4a59@ls) (let ((h4a5b@t h4a59@ls)) (let ((h4a5d@ls/false (h30bc@syntax-dispatch h4a5b@t 'each-any))) (if h4a5d@ls/false (apply (lambda (h4a5f@ls) (map (lambda (h4a61@x) (make-simple-struct 'stx '5 (list (let ((h4a63@x (h31a2@syntax->datum h4a61@x))) (if (or (symbol? h4a63@x) (string? h4a63@x)) (gensym h4a63@x) (gensym 't))) h2e39@top-mark* '() '()))) h4a5f@ls)) h4a5d@ls/false) (let ((h4a65@t h4a5b@t)) (let ((h4a67@ls/false (h30bc@syntax-dispatch h4a65@t '_))) (if h4a67@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) h4a67@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4a65@t))))))))) (set! h4bed@h318a@generate-temporaries h318a@generate-temporaries) (set! h318c@free-identifier=? (lambda (h4a69@x h4a6a@y) (if (h2eb5@id? h4a69@x) (if (h2eb5@id? h4a6a@y) (h2ebb@free-id=? h4a69@x h4a6a@y) (assertion-violation 'free-identifier=? '"not an identifier" h4a6a@y)) (assertion-violation 'free-identifier=? '"not an identifier" h4a69@x)))) (set! h4bee@h318c@free-identifier=? h318c@free-identifier=?) (set! h318e@bound-identifier=? (lambda (h4a6d@x h4a6e@y) (if (h2eb5@id? h4a6d@x) (if (h2eb5@id? h4a6e@y) (h2eb9@bound-id=? h4a6d@x h4a6e@y) (assertion-violation 'bound-identifier=? '"not an identifier" h4a6e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" h4a6d@x)))) (set! h4bef@h318e@bound-identifier=? h318e@bound-identifier=?) (set! h3190@make-source-condition (lambda (h4a71@x) (letrec* ((h4a7b@h4a76 (make-record-type-descriptor '&source-information &condition-rtd 'h4a79 '#f '#f '#((immutable file-name) (immutable line)))) (h4a7d@h4a78 '#f) (h4a7f@h4a77 (make-record-constructor-descriptor h4a7b@h4a76 &condition-rcd h4a7d@h4a78)) (h4a82@h4a75 (record-predicate h4a7b@h4a76)) (h4a84@make-source-condition (record-constructor h4a7f@h4a77)) (h4a86@h4a73 (record-accessor h4a7b@h4a76 '0)) (h4a88@h4a74 (record-accessor h4a7b@h4a76 '1)) (h4a8a@source-condition? (condition-predicate h4a7b@h4a76)) (h4a8c@source-filename (condition-accessor h4a7b@h4a76 h4a86@h4a73)) (h4a8e@source-character (condition-accessor h4a7b@h4a76 h4a88@h4a74))) (if (and (pair? h4a71@x) (pair? (cdr h4a71@x))) (h4a84@make-source-condition (car h4a71@x) (cadr h4a71@x)) (condition))))) (set! h4bf0@h3190@make-source-condition h3190@make-source-condition) (set! h3192@extract-position-condition (lambda (h4a8f@x) (h3190@make-source-condition (h3194@expression-position h4a8f@x)))) (set! h4bf1@h3192@extract-position-condition h3192@extract-position-condition) (set! h3194@expression-position (lambda (h4a91@x) (and (h2e81@stx? h4a91@x) (let ((h4a93@x (h2e83@stx-expr h4a91@x))) (and (h29f9@h28cb@annotation? h4a93@x) (h29fa@h28cd@annotation-source h4a93@x)))))) (set! h4bf2@h3194@expression-position h3194@expression-position) (set! h3196@assertion-error (lambda (h4a95@expr h4a96@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list h4a95@expr)) (h3190@make-source-condition h4a96@pos))))) (set! h4bf3@h3196@assertion-error h3196@assertion-error) (set! h3198@syntax-error (lambda (h4a99@x . h4a9b@args) (begin (if (not (for-all string? h4a9b@args)) (assertion-violation 'syntax-error '"invalid argument" h4a9b@args) (void)) (raise (condition (make-message-condition (if (null? h4a9b@args) '"invalid syntax" (apply string-append h4a9b@args))) (make-syntax-violation (h31a2@syntax->datum h4a99@x) '#f) (h3192@extract-position-condition h4a99@x)))))) (set! h4bf4@h3198@syntax-error h3198@syntax-error) (set! h319a@syntax-violation* (lambda (h4a9d@who h4a9e@msg h4a9f@form h4aa0@condition-object) (begin (if (not (string? h4a9e@msg)) (assertion-violation 'syntax-violation '"message is not a string" h4a9e@msg) (void)) (let ((h4aa5@who (if (or (string? h4a9d@who) (symbol? h4a9d@who)) h4a9d@who (if (not h4a9d@who) (let ((h4aa7@t h4a9f@form)) (let ((h4aa9@ls/false (h30bc@syntax-dispatch h4aa7@t 'any))) (if (and h4aa9@ls/false (apply (lambda (h4aab@id) (h2eb5@id? h4aab@id)) h4aa9@ls/false)) (apply (lambda (h4aad@id) (h31a2@syntax->datum h4aad@id)) h4aa9@ls/false) (let ((h4aaf@t h4aa7@t)) (let ((h4ab1@ls/false (h30bc@syntax-dispatch h4aaf@t '(any . any)))) (if (and h4ab1@ls/false (apply (lambda (h4ab3@id h4ab4@rest) (h2eb5@id? h4ab3@id)) h4ab1@ls/false)) (apply (lambda (h4ab7@id h4ab8@rest) (h31a2@syntax->datum h4ab7@id)) h4ab1@ls/false) (let ((h4abb@t h4aaf@t)) (let ((h4abd@ls/false (h30bc@syntax-dispatch h4abb@t '_))) (if h4abd@ls/false (apply (lambda () '#f) h4abd@ls/false) (h319c@syntax-violation '#f '"invalid syntax" h4abb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" h4a9d@who))))) (raise (condition (if h4aa5@who (make-who-condition h4aa5@who) (condition)) (make-message-condition h4a9e@msg) h4aa0@condition-object (h3192@extract-position-condition h4a9f@form))))))) (set! h4bf5@h319a@syntax-violation* h319a@syntax-violation*) (set! h319c@syntax-violation (lambda h4acd (let ((h4ace (length h4acd))) (if (= h4ace '3) (apply (lambda (h4abf@who h4ac0@msg h4ac1@form) (h319c@syntax-violation h4abf@who h4ac0@msg h4ac1@form '#f)) h4acd) (if (= h4ace '4) (apply (lambda (h4ac5@who h4ac6@msg h4ac7@form h4ac8@subform) (h319a@syntax-violation* h4ac5@who h4ac6@msg h4ac7@form (make-syntax-violation (h31a2@syntax->datum h4ac7@form) (h31a2@syntax->datum h4ac8@subform)))) h4acd) (error 'apply '"invalid arg count")))))) (set! h4bf6@h319c@syntax-violation h319c@syntax-violation) (set! h319e@identifier? (lambda (h4acf@x) (h2eb5@id? h4acf@x))) (set! h4bf7@h319e@identifier? h319e@identifier?) (set! h31a0@datum->syntax (lambda (h4ad1@id h4ad2@datum) (if (h2eb5@id? h4ad1@id) (h2e95@datum->stx h4ad1@id h4ad2@datum) (assertion-violation 'datum->syntax '"not an identifier" h4ad1@id)))) (set! h4bf8@h31a0@datum->syntax h31a0@datum->syntax) (set! h31a2@syntax->datum (lambda (h4ad5@x) (h2ec9@stx->datum h4ad5@x))) (set! h4bf9@h31a2@syntax->datum h31a2@syntax->datum) (set! h31a4@ungensym-all (lambda (h4ad7@code) (if (pair? h4ad7@code) (cons (h31a4@ungensym-all (car h4ad7@code)) (h31a4@ungensym-all (cdr h4ad7@code))) (if (symbol? h4ad7@code) (ungensym h4ad7@code) h4ad7@code)))) (set! h4bfa@h31a4@ungensym-all h31a4@ungensym-all) (set! h31a6@compile-r6rs-top-level (lambda (h4ad9@x*) (call-with-values (lambda () (h3134@top-level-expander h4ad9@x*)) (lambda (h4adf@h4adc h4ae0@h4ade) (let ((h4ae3@invoke-code h4ae0@h4ade) (h4ae4@lib* h4adf@h4adc)) (lambda () (begin (for-each h2cd1@h2b1f@invoke-library h4ae4@lib*) (let ((h4ae7@expanded (h2a5b@h2a13@expanded->core h4ae3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (h31a4@ungensym-all h4ae7@expanded)) (void)) (eval-core h4ae7@expanded)))))))))) (set! h4bfb@h31a6@compile-r6rs-top-level h31a6@compile-r6rs-top-level) (set! h31a8@pre-compile-r6rs-top-level (lambda (h4ae9@x*) (call-with-values (lambda () (h3134@top-level-expander h4ae9@x*)) (lambda (h4aef@h4aec h4af0@h4aee) (let ((h4af3@invoke-code h4af0@h4aee) (h4af4@lib* h4aef@h4aec)) (begin (for-each h2cd1@h2b1f@invoke-library h4af4@lib*) (h2a03@h28df@compile-core (h2a5b@h2a13@expanded->core h4af3@invoke-code)))))))) (set! h4bfc@h31a8@pre-compile-r6rs-top-level h31a8@pre-compile-r6rs-top-level) (set! h31aa@interaction-environment (let ((h4af7@the-env '#f)) (lambda () (or h4af7@the-env (let ((h4af9@lib (h2cca@h2b11@find-library-by-name '(mosh interaction))) (h4afa@rib (h2e69@make-empty-rib))) (begin (let ((h4afd@subst (h2cac@h2ad5@library-subst h4af9@lib))) (begin (h2e55@set-rib-sym*! h4afa@rib (map car h4afd@subst)) (h2e59@set-rib-mark**! h4afa@rib (map (lambda (h4aff@x) h2e39@top-mark*) h4afd@subst)) (h2e5d@set-rib-label*! h4afa@rib (map cdr h4afd@subst)))) (let ((h4b01@env (make-simple-struct 'interaction-env '4 (list h4afa@rib '() '())))) (begin (set! h4af7@the-env h4b01@env) h4b01@env)))))))) (set! h4bfd@h31aa@interaction-environment h31aa@interaction-environment) (set! h31ac@top-level-context (h2a05@h28e3@make-parameter '#f)) (set! h4bfe@h31ac@top-level-context h31ac@top-level-context) (h2cc7@h2b0b@current-library-expander h317e@library-expander))
(begin (begin (h2a58@h2a0d@current-primitive-locations (lambda (h5149@x) (let ((h514b@t (assq h5149@x '((syntax-error . h4bf4@h3198@syntax-error) (syntax-dispatch . h4b92@h30bc@syntax-dispatch) (load . h4d7a@h4c25@load) (interaction-environment . h4bfd@h31aa@interaction-environment) (library-path . h2cbf@h2afb@library-path) (mosh-cache-dir . h2a06@h28e5@mosh-cache-dir) (make-parameter . h2a05@h28e3@make-parameter) (make-variable-transformer . h4b4f@h2ee7@make-variable-transformer) (identifier? . h4bf7@h319e@identifier?) (generate-temporaries . h4bed@h318a@generate-temporaries) (free-identifier=? . h4bee@h318c@free-identifier=?) (syntax->datum . h4bf9@h31a2@syntax->datum) (datum->syntax . h4bf8@h31a0@datum->syntax) (bound-identifier=? . h4bef@h318e@bound-identifier=?) (scheme-report-environment . h4be4@h3178@scheme-report-environment) (null-environment . h4be3@h3176@null-environment) (command-line . h4d77@h4c1f@command-line) (eval . h4be6@h317c@eval) (environment . h4be2@h3174@environment) (syntax-violation . h4bf6@h319c@syntax-violation) (assertion-error . h4bf3@h3196@assertion-error))))) (if h514b@t (cdr h514b@t) '#f)))) (h2ccf@h2b1b@install-library 'h5126 '(mosh interaction) '() '() '() '() '((regexp? . h50e6) (alist->eq-hash-table . h50e2) (format . h50df) (string-split . h50d4) (call-process . h50ce) (set-current-directory! . h50ca) (expand-path . h50c9) (current-directory . h50c8) (%spawn . h50c7) (%waitpid . h50c6) (simple-struct-name . h50c5) (simple-struct-set! . h50c4) (simple-struct-ref . h50c3) (make-simple-struct . h50c2) (simple-struct? . h50c1) (pointer-ref-c-int64 . h50c0) (pointer-ref-c-int32 . h50bf) (pointer-ref-c-int16 . h50be) (pointer-ref-c-int8 . h50bd) (pointer-ref-c-uint64 . h50bc) (pointer-ref-c-uint32 . h50bb) (pointer-ref-c-uint16 . h50ba) (pointer-ref-c-uint8 . h50b9) (pointer-set-c-uint64! . h50b8) (pointer-set-c-uint32! . h50b7) (pointer-set-c-uint16! . h50b6) (pointer-set-c-uint8! . h50b5) (pointer-set-c-int64! . h50b4) (pointer-set-c-int32! . h50b3) (pointer-set-c-int16! . h50b2) (pointer-set-c-int8! . h50b1) (pointer-set-c-pointer! . h50b0) (pointer-set-c-double! . h50af) (pointer-set-c-float! . h50ae) (pointer-set-c-long-long! . h50ad) (pointer-set-c-long! . h50ac) (pointer-set-c-int! . h50ab) (pointer-set-c-short! . h50aa) (pointer-set-c-char! . h50a9) (pointer-ref-c-pointer . h50a8) (pointer-ref-c-double . h50a7) (pointer-ref-c-float . h50a6) (pointer-ref-c-unsigned-long-long . h50a5) (pointer-ref-c-signed-long-long . h50a4) (pointer-ref-c-unsigned-long . h50a3) (pointer-ref-c-signed-long . h50a2) (pointer-ref-c-unsigned-int . h50a1) (pointer-ref-c-signed-int . h50a0) (pointer-ref-c-unsigned-short . h509f) (pointer-ref-c-signed-short . h509e) (pointer-ref-c-unsigned-char . h509d) (pointer-ref-c-signed-char . h509c) (pointer->integer . h509b) (integer->pointer . h509a) (pointer? . h5099) (shared-errno . h5098) (%ffi-supported? . h5093) (%ffi-pointer->string . h5092) (%ffi-call . h5091) (%ffi-lookup . h5090) (%ffi-open . h508f) (null-terminated-utf8->string . h508e) (null-terminated-bytevector->string . h508d) (%exec . h508c) (%fork . h508b) (%pipe . h508a) (p . h5089) (whereis . h506d) (register . h506c) (vm-join! . h506b) (vm-set-value! . h506a) (vm? . h5069) (main-vm? . h5068) (vm-eval . h5067) (vm-self . h5066) (vm-start! . h5065) (make-vm . h5064) (mutex-try-lock! . h5063) (mutex-unlock! . h5062) (mutex-lock! . h5061) (mutex? . h5060) (make-mutex . h505f) (condition-variable-notify-all! . h505e) (condition-variable-notify! . h505d) (condition-variable-wait! . h505c) (make-condition-variable . h505b) (write/ss . h505a) (string-upcase . h5042) (string-titlecase . h5041) (string-normalize-nfkd . h5040) (string-normalize-nfkc . h503f) (string-normalize-nfd . h503e) (string-normalize-nfc . h503d) (string-foldcase . h503c) (string-downcase . h503b) (string-ci>? . h503a) (string-ci>=? . h5039) (string-ci=? . h5038) (string-ci<? . h5037) (string-ci<=? . h5036) (char-whitespace? . h5035) (char-upper-case? . h5034) (char-title-case? . h5033) (char-numeric? . h5032) (char-lower-case? . h5031) (char-general-category . h5030) (char-upcase . h502f) (char-titlecase . h502e) (char-foldcase . h502d) (char-downcase . h502c) (char-ci>? . h502b) (char-ci>=? . h502a) (char-ci=? . h5029) (char-ci<? . h5028) (char-ci<=? . h5027) (char-alphabetic? . h5026) (make-variable-transformer . h2ee6) (identifier? . h319d) (generate-temporaries . h3189) (free-identifier=? . h318b) (syntax->datum . h31a1) (datum->syntax . h319f) (bound-identifier=? . h318d) (record-type-descriptor? . h5025) (record-predicate . h5024) (record-mutator . h5023) (record-constructor . h5022) (record-accessor . h5021) (make-record-type-descriptor . h5020) (make-record-constructor-descriptor . h501f) (record? . h501e) (record-type-uid . h501d) (record-type-sealed? . h501c) (record-type-parent . h501b) (record-type-opaque? . h501a) (record-type-name . h5019) (record-type-generative? . h5018) (record-type-field-names . h5017) (record-rtd . h5016) (record-field-mutable? . h5015) (delete-file . h5014) (file-exists? . h5013) (vector-sort! . h5012) (vector-sort . h5011) (list-sort . h5010) (symbol-hash . h500f) (string-ci-hash . h500e) (string-hash . h500d) (equal-hash . h500c) (hashtable-equivalence-function . h500b) (make-hashtable . h500a) (hashtable-hash-function . h5009) (make-eqv-hashtable . h5008) (make-eq-hashtable . h5007) (hashtable? . h5006) (hashtable-update! . h5005) (hashtable-size . h5004) (hashtable-set! . h5003) (hashtable-ref . h5002) (hashtable-mutable? . h5001) (hashtable-keys . h5000) (hashtable-entries . h4fff) (hashtable-delete! . h4ffe) (hashtable-copy . h4ffd) (hashtable-contains? . h4ffc) (hashtable-clear! . h4ffb) (call-with-output-file . h4ffa) (call-with-input-file . h4ff9) (write-char . h4ff8) (write . h4ff7) (with-output-to-file . h4ff6) (with-input-from-file . h4ff5) (read-char . h4ff4) (read . h4ff3) (peek-char . h4ff2) (open-output-file . h4ff1) (open-input-file . h4ff0) (newline . h4fef) (display . h4fee) (close-output-port . h4fed) (close-input-port . h4fec) (eof-object? . h4feb) (eof-object . h4fea) (current-error-port . h4fe9) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (utf-8-codec . h4fe4) (utf-16-codec . h4fe3) (transcoder-error-handling-mode . h4fe2) (transcoder-eol-style . h4fe1) (transcoder-codec . h4fe0) (transcoded-port . h4fdf) (textual-port? . h4fde) (string->bytevector . h4fdd) (standard-output-port . h4fdc) (standard-input-port . h4fdb) (standard-error-port . h4fda) (set-port-position! . h4fd9) (put-u8 . h4fd8) (put-string . h4fd7) (put-datum . h4fd6) (put-char . h4fd5) (put-bytevector . h4fd4) (port? . h4fd3) (port-transcoder . h4fd2) (port-position . h4fd1) (port-has-set-port-position!? . h4fd0) (port-has-port-position? . h4fcf) (port-eof? . h4fce) (output-port-buffer-mode . h4fcd) (open-string-output-port . h4fcc) (open-string-input-port . h4fcb) (open-file-output-port . h4fca) (open-file-input/output-port . h4fc9) (open-file-input-port . h4fc8) (open-bytevector-output-port . h4fc7) (open-bytevector-input-port . h4fc6) (native-transcoder . h4fc5) (native-eol-style . h4fc4) (make-transcoder . h4fc3) (latin-1-codec . h4fc2) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (make-i/o-encoding-error . h4fb7) (make-i/o-decoding-error . h4fb6) (make-custom-textual-output-port . h4fb5) (make-custom-textual-input/output-port . h4fb4) (make-custom-textual-input-port . h4fb3) (make-custom-binary-output-port . h4fb2) (make-custom-binary-input/output-port . h4fb1) (make-custom-binary-input-port . h4fb0) (make-bytevector . h4faf) (lookahead-u8 . h4fae) (lookahead-char . h4fad) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (i/o-encoding-error? . h4f9f) (i/o-encoding-error-char . h4f9e) (i/o-decoding-error? . h4f9d) (get-u8 . h4f9c) (get-string-n! . h4f9b) (get-string-n . h4f9a) (get-string-all . h4f99) (get-line . h4f98) (get-datum . h4f97) (get-char . h4f96) (get-bytevector-some . h4f95) (get-bytevector-n! . h4f94) (get-bytevector-n . h4f93) (get-bytevector-all . h4f92) (flush-output-port . h4f91) (close-port . h4f90) (exit . h4f88) (command-line . h4c1e) (string-fill! . h4f87) (string-set! . h4f86) (set-cdr! . h4f85) (set-car! . h4f84) (remove . h4f83) (remv . h4f82) (remp . h4f81) (remq . h4f80) (partition . h4f7f) (memv . h4f7e) (memq . h4f7d) (memp . h4f7c) (member . h4f7b) (exists . h4f7a) (for-all . h4f79) (fold-right . h4f78) (fold-left . h4f77) (find . h4f76) (filter . h4f75) (cons* . h4f74) (assv . h4f73) (assq . h4f72) (assp . h4f71) (assoc . h4f70) (call-with-string-output-port . h4f6f) (call-with-port . h4f6e) (call-with-bytevector-output-port . h4f6d) (bytevector->string . h4f6c) (buffer-mode? . h4f6b) (binary-port? . h4f6a) (with-exception-handler . h4f69) (raise-continuable . h4f68) (raise . h4f67) (eval . h317b) (environment . h3173) (make-enumeration . h4f66) (enum-set=? . h4f65) (enum-set-universe . h4f64) (enum-set-union . h4f63) (enum-set-subset? . h4f62) (enum-set-projection . h4f61) (enum-set-member? . h4f60) (enum-set-intersection . h4f5f) (enum-set-indexer . h4f5e) (enum-set-difference . h4f5d) (enum-set-constructor . h4f5c) (enum-set-complement . h4f5b) (enum-set->list . h4f5a) (who-condition? . h4f59) (warning? . h4f58) (violation? . h4f57) (undefined-violation? . h4f56) (syntax-violation? . h4f55) (syntax-violation-subform . h4f54) (syntax-violation-form . h4f53) (syntax-violation . h319b) (simple-conditions . h4f52) (serious-condition? . h4f51) (non-continuable-violation? . h4f50) (message-condition? . h4f4f) (make-who-condition . h4f4e) (make-warning . h4f4d) (make-violation . h4f4c) (make-undefined-violation . h4f4b) (make-syntax-violation . h4f4a) (make-serious-condition . h4f49) (make-non-continuable-violation . h4f48) (make-message-condition . h4f47) (make-lexical-violation . h4f46) (make-irritants-condition . h4f45) (make-implementation-restriction-violation . h4f44) (make-error . h4f43) (make-assertion-violation . h4f42) (lexical-violation? . h4f41) (irritants-condition? . h4f40) (implementation-restriction-violation? . h4f3f) (error? . h4f3e) (condition-who . h4f3d) (condition-predicate . h4f3c) (condition-message . h4f3b) (condition-irritants . h4f3a) (condition-accessor . h4f39) (condition . h4f38) (assertion-violation? . h4f37) (condition? . h4f36) (utf32->string . h4f35) (utf16->string . h4f34) (utf8->string . h4f33) (uint-list->bytevector . h4f32) (u8-list->bytevector . h4f31) (string->utf8 . h4f30) (string->utf32 . h4f2f) (string->utf16 . h4f2e) (sint-list->bytevector . h4f2d) (native-endianness . h4f2c) (bytevector? . h4f2b) (bytevector=? . h4f2a) (bytevector-uint-set! . h4f29) (bytevector-uint-ref . h4f28) (bytevector-u8-set! . h4f27) (bytevector-u8-ref . h4f26) (bytevector-u64-set! . h4f25) (bytevector-u64-ref . h4f24) (bytevector-u64-native-set! . h4f23) (bytevector-u64-native-ref . h4f22) (bytevector-u32-set! . h4f21) (bytevector-u32-ref . h4f20) (bytevector-u32-native-set! . h4f1f) (bytevector-u32-native-ref . h4f1e) (bytevector-u16-set! . h4f1d) (bytevector-u16-ref . h4f1c) (bytevector-u16-native-set! . h4f1b) (bytevector-u16-native-ref . h4f1a) (bytevector-sint-set! . h4f19) (bytevector-sint-ref . h4f18) (bytevector-s8-set! . h4f17) (bytevector-s8-ref . h4f16) (bytevector-s64-set! . h4f15) (bytevector-s64-ref . h4f14) (bytevector-s64-native-set! . h4f13) (bytevector-s64-native-ref . h4f12) (bytevector-s32-set! . h4f11) (bytevector-s32-ref . h4f10) (bytevector-s32-native-set! . h4f0f) (bytevector-s32-native-ref . h4f0e) (bytevector-s16-set! . h4f0d) (bytevector-s16-ref . h4f0c) (bytevector-s16-native-set! . h4f0b) (bytevector-s16-native-ref . h4f0a) (bytevector-length . h4f09) (bytevector-ieee-single-ref . h4f08) (bytevector-ieee-single-set! . h4f07) (bytevector-ieee-single-native-set! . h4f06) (bytevector-ieee-single-native-ref . h4f05) (bytevector-ieee-double-set! . h4f04) (bytevector-ieee-double-ref . h4f03) (bytevector-ieee-double-native-set! . h4f02) (bytevector-ieee-double-native-ref . h4f01) (bytevector-fill! . h4f00) (bytevector-copy! . h4eff) (bytevector-copy . h4efe) (bytevector->uint-list . h4efd) (bytevector->u8-list . h4efc) (bytevector->sint-list . h4efb) (no-nans-violation? . h4efa) (no-infinities-violation? . h4ef9) (make-no-nans-violation . h4ef8) (make-no-infinities-violation . h4ef7) (real->flonum . h4ef6) (flzero? . h4ef5) (fltruncate . h4ef4) (fltan . h4ef3) (flsqrt . h4ef2) (flsin . h4ef1) (flround . h4ef0) (flpositive? . h4eef) (flonum? . h4eee) (flodd? . h4eed) (flnumerator . h4eec) (flnegative? . h4eeb) (flnan? . h4eea) (flmod0 . h4ee9) (flmod . h4ee8) (flmin . h4ee7) (flmax . h4ee6) (fllog . h4ee5) (flinteger? . h4ee4) (flinfinite? . h4ee3) (flfloor . h4ee2) (flfinite? . h4ee1) (flexpt . h4ee0) (flexp . h4edf) (fleven? . h4ede) (fldiv0-and-mod0 . h4edd) (fldiv0 . h4edc) (fldiv-and-mod . h4edb) (fldiv . h4eda) (fldenominator . h4ed9) (flcos . h4ed8) (flceiling . h4ed7) (flatan . h4ed6) (flasin . h4ed5) (flacos . h4ed4) (flabs . h4ed3) (fl>? . h4ed2) (fl>=? . h4ed1) (fl=? . h4ed0) (fl<? . h4ecf) (fl<=? . h4ece) (fl/ . h4ecd) (fl- . h4ecc) (fl+ . h4ecb) (fl* . h4eca) (fixnum->flonum . h4ec9) (fxzero? . h4ec8) (fxxor . h4ec7) (fxrotate-bit-field . h4ec6) (fxreverse-bit-field . h4ec5) (fxpositive? . h4ec4) (fxodd? . h4ec3) (fxnot . h4ec2) (fxnegative? . h4ec1) (fxmod0 . h4ec0) (fxmod . h4ebf) (fxmin . h4ebe) (fxmax . h4ebd) (fxlength . h4ebc) (fxior . h4ebb) (fxif . h4eba) (fxfirst-bit-set . h4eb9) (fxeven? . h4eb8) (fxdiv0-and-mod0 . h4eb7) (fxdiv0 . h4eb6) (fxdiv-and-mod . h4eb5) (fxdiv . h4eb4) (fxcopy-bit-field . h4eb3) (fxcopy-bit . h4eb2) (fxbit-set? . h4eb1) (fxbit-field . h4eb0) (fxbit-count . h4eaf) (fxarithmetic-shift-right . h4eae) (fxarithmetic-shift-left . h4ead) (fxarithmetic-shift . h4eac) (fxand . h4eab) (fx>? . h4eaa) (fx>=? . h4ea9) (fx=? . h4ea8) (fx<? . h4ea7) (fx<=? . h4ea6) (fx-/carry . h4ea5) (fx- . h4ea4) (fx+/carry . h4ea3) (fx+ . h4ea2) (fx*/carry . h4ea1) (fx* . h4ea0) (greatest-fixnum . h4e9f) (least-fixnum . h4e9e) (fixnum-width . h4e9d) (fixnum? . h4e9c) (bitwise-rotate-bit-field . h4e9b) (bitwise-reverse-bit-field . h4e9a) (bitwise-length . h4e99) (bitwise-if . h4e98) (bitwise-first-bit-set . h4e97) (bitwise-copy-bit-field . h4e96) (bitwise-copy-bit . h4e95) (bitwise-bit-set? . h4e94) (bitwise-bit-field . h4e93) (bitwise-bit-count . h4e92) (bitwise-xor . h4e91) (bitwise-ior . h4e90) (bitwise-and . h4e8f) (bitwise-not . h4e8e) (bitwise-arithmetic-shift-right . h4e8d) (bitwise-arithmetic-shift-left . h4e8c) (bitwise-arithmetic-shift . h4e8b) (zero? . h4e8a) (vector? . h4e89) (vector-set! . h4e88) (vector-ref . h4e87) (vector-map . h4e86) (vector-length . h4e85) (vector-for-each . h4e84) (vector-fill! . h4e83) (vector->list . h4e82) (vector . h4e81) (values . h4e80) (truncate . h4e7f) (tan . h4e7e) (symbol? . h4e7d) (symbol=? . h4e7c) (symbol->string . h4e7b) (substring . h4e7a) (string? . h4e79) (string>? . h4e78) (string>=? . h4e77) (string=? . h4e76) (string<? . h4e75) (string<=? . h4e74) (string-ref . h4e73) (string-length . h4e72) (string-for-each . h4e71) (string-copy . h4e70) (string-append . h4e6f) (string->symbol . h4e6e) (string->number . h4e6d) (string->list . h4e6c) (string . h4e6b) (sqrt . h4e6a) (sin . h4e69) (round . h4e68) (reverse . h4e67) (real? . h4e66) (real-valued? . h4e65) (real-part . h4e64) (rationalize . h4e63) (rational? . h4e62) (rational-valued? . h4e61) (procedure? . h4e60) (positive? . h4e5f) (pair? . h4e5e) (odd? . h4e5d) (numerator . h4e5c) (number? . h4e5b) (number->string . h4e5a) (null? . h4e59) (not . h4e58) (negative? . h4e57) (nan? . h4e56) (min . h4e55) (max . h4e54) (map . h4e53) (make-vector . h4e52) (make-string . h4e51) (make-rectangular . h4e50) (make-polar . h4e4f) (magnitude . h4e4e) (log . h4e4d) (list? . h4e4c) (list-tail . h4e4b) (list-ref . h4e4a) (list->vector . h4e49) (list->string . h4e48) (list . h4e47) (length . h4e46) (lcm . h4e45) (integer? . h4e44) (integer-valued? . h4e43) (integer->char . h4e42) (infinite? . h4e41) (inexact? . h4e40) (inexact . h4e3f) (imag-part . h4e3e) (gcd . h4e3d) (for-each . h4e3c) (floor . h4e3b) (finite? . h4e3a) (expt . h4e39) (exp . h4e38) (exact? . h4e37) (exact-integer-sqrt . h4e36) (exact . h4e35) (even? . h4e34) (error . h4e33) (eqv? . h4e32) (equal? . h4e31) (eq? . h4e30) (dynamic-wind . h4e2f) (div0-and-mod0 . h4e2e) (mod0 . h4e2d) (div0 . h4e2c) (div-and-mod . h4e2b) (mod . h4e2a) (div . h4e29) (denominator . h4e28) (cos . h4e27) (cons . h4e26) (complex? . h4e25) (char? . h4e24) (char>? . h4e23) (char>=? . h4e22) (char=? . h4e21) (char<? . h4e20) (char<=? . h4e1f) (char->integer . h4e1e) (ceiling . h4e1d) (call-with-values . h4e1c) (call/cc . h4e1b) (call-with-current-continuation . h4e1a) (cddddr . h4e19) (cdddar . h4e18) (cddadr . h4e17) (cddaar . h4e16) (cdaddr . h4e15) (cdadar . h4e14) (cdaadr . h4e13) (cdaaar . h4e12) (cadddr . h4e11) (caddar . h4e10) (cadadr . h4e0f) (cadaar . h4e0e) (caaddr . h4e0d) (caadar . h4e0c) (caaadr . h4e0b) (caaaar . h4e0a) (cdddr . h4e09) (cddar . h4e08) (cdadr . h4e07) (cdaar . h4e06) (caddr . h4e05) (cadar . h4e04) (caadr . h4e03) (caaar . h4e02) (cddr . h4e01) (cdar . h4e00) (cadr . h4dff) (caar . h4dfe) (cdr . h4dfd) (car . h4dfc) (boolean? . h4dfb) (boolean=? . h4dfa) (atan . h4df9) (assertion-violation . h4df8) (asin . h4df7) (apply . h4df6) (append . h4df5) (angle . h4df4) (acos . h4df3) (abs . h4df2) (/ . h4df1) (* . h4df0) (- . h4def) (+ . h4dee) (>= . h4ded) (> . h4dec) (= . h4deb) (<= . h4dea) (< . h4de9) (library . h4de8) (&no-nans . h4de7) (&no-infinities . h4de6) (&i/o-encoding . h4de5) (&i/o-decoding . h4de4) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda) (&undefined . h4dd9) (&syntax . h4dd8) (&lexical . h4dd7) (&implementation-restriction . h4dd6) (&non-continuable . h4dd5) (&who . h4dd4) (&irritants . h4dd3) (&assertion . h4dd2) (&violation . h4dd1) (&error . h4dd0) (&serious . h4dcf) (&warning . h4dce) (&message . h4dcd) (&condition . h4dcc) (define-condition-type . h4dcb) (define-enumeration . h4dca) (define-record-type . h4dc9) (parent-rtd . h4dc8) (nongenerative . h4dc7) (opaque . h4dc6) (sealed . h4dc5) (protocol . h4dc4) (parent . h4dc3) (immutable . h4dc2) (mutable . h4dc1) (fields . h4dc0) (error-handling-mode . h4dbf) (file-options . h4dbe) (buffer-mode . h4dbd) (eol-style . h4dbc) (guard . h4dbb) (unsyntax-splicing . h4db8) (unsyntax . h4db7) (unquote-splicing . h4db6) (unquote . h4db5) (_ . h4db4) (else . h4db3) (=> . h4db2) (... . h4db1) (assert . h4db0) (endianness . h4daf) (time . h4dad) (do . h4dac) (cond . h4dab) (let* . h4daa) (let*-values . h4da9) (let-values . h4da8) (identifier-syntax . h4da7) (with-syntax . h4da6) (quasisyntax . h4da5) (quasiquote . h4da4) (syntax-rules . h4da3) (include . h4da2) (record-constructor-descriptor . h4da0) (record-type-descriptor . h4d9f) (case . h4d9e) (unless . h4d9c) (when . h4d9b) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec* . h4d96) (letrec . h4d95) (case-lambda . h4d93) (lambda . h4d92) (syntax . h4d91) (syntax-case . h4d90) (quote . h4d8f) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (import . h4d8a) (begin . h4d89) (define-syntax . h4d87) (define . h4d86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5127 '(psyntax null-environment-5) '() '() '() '() '((make-promise . h4f89) (unquote-splicing . h4db6) (unquote . h4db5) (_ . h4db4) (else . h4db3) (=> . h4db2) (... . h4db1) (delay . h4dae) (do . h4dac) (cond . h4dab) (let* . h4daa) (quasiquote . h4da4) (syntax-rules . h4da3) (case . h4d9e) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec . h4d95) (lambda . h4d92) (quote . h4d8f) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (begin . h4d89) (define-syntax . h4d87) (define . h4d86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5128 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . h503a) (string-ci>=? . h5039) (string-ci=? . h5038) (string-ci<? . h5037) (string-ci<=? . h5036) (char-whitespace? . h5035) (char-upper-case? . h5034) (char-numeric? . h5032) (char-lower-case? . h5031) (char-upcase . h502f) (char-downcase . h502c) (char-ci>? . h502b) (char-ci>=? . h502a) (char-ci=? . h5029) (char-ci<? . h5028) (char-ci<=? . h5027) (char-alphabetic? . h5026) (call-with-output-file . h4ffa) (call-with-input-file . h4ff9) (write-char . h4ff8) (write . h4ff7) (with-output-to-file . h4ff6) (with-input-from-file . h4ff5) (read-char . h4ff4) (read . h4ff3) (peek-char . h4ff2) (open-output-file . h4ff1) (open-input-file . h4ff0) (newline . h4fef) (display . h4fee) (close-output-port . h4fed) (close-input-port . h4fec) (eof-object . h4fea) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (scheme-report-environment . h3177) (quotient . h4f8f) (null-environment . h3175) (remainder . h4f8e) (modulo . h4f8d) (inexact->exact . h4f8c) (force . h4f8b) (exact->inexact . h4f8a) (make-promise . h4f89) (string-fill! . h4f87) (string-set! . h4f86) (set-cdr! . h4f85) (set-car! . h4f84) (memv . h4f7e) (memq . h4f7d) (member . h4f7b) (assv . h4f73) (assq . h4f72) (assoc . h4f70) (eval . h317b) (zero? . h4e8a) (vector? . h4e89) (vector-set! . h4e88) (vector-ref . h4e87) (vector-length . h4e85) (vector-fill! . h4e83) (vector->list . h4e82) (vector . h4e81) (values . h4e80) (truncate . h4e7f) (tan . h4e7e) (symbol? . h4e7d) (symbol->string . h4e7b) (substring . h4e7a) (string? . h4e79) (string>? . h4e78) (string>=? . h4e77) (string=? . h4e76) (string<? . h4e75) (string<=? . h4e74) (string-ref . h4e73) (string-length . h4e72) (string-copy . h4e70) (string-append . h4e6f) (string->symbol . h4e6e) (string->number . h4e6d) (string->list . h4e6c) (string . h4e6b) (sqrt . h4e6a) (sin . h4e69) (round . h4e68) (reverse . h4e67) (real? . h4e66) (real-part . h4e64) (rationalize . h4e63) (rational? . h4e62) (procedure? . h4e60) (positive? . h4e5f) (pair? . h4e5e) (odd? . h4e5d) (numerator . h4e5c) (number? . h4e5b) (number->string . h4e5a) (not . h4e58) (negative? . h4e57) (min . h4e55) (max . h4e54) (map . h4e53) (make-vector . h4e52) (make-string . h4e51) (make-rectangular . h4e50) (make-polar . h4e4f) (magnitude . h4e4e) (log . h4e4d) (list? . h4e4c) (list-tail . h4e4b) (list-ref . h4e4a) (list->vector . h4e49) (list->string . h4e48) (list . h4e47) (length . h4e46) (lcm . h4e45) (integer? . h4e44) (integer->char . h4e42) (inexact? . h4e40) (imag-part . h4e3e) (gcd . h4e3d) (for-each . h4e3c) (floor . h4e3b) (expt . h4e39) (exp . h4e38) (exact? . h4e37) (even? . h4e34) (eqv? . h4e32) (equal? . h4e31) (eq? . h4e30) (dynamic-wind . h4e2f) (denominator . h4e28) (cos . h4e27) (cons . h4e26) (complex? . h4e25) (char? . h4e24) (char>? . h4e23) (char>=? . h4e22) (char=? . h4e21) (char<? . h4e20) (char<=? . h4e1f) (char->integer . h4e1e) (ceiling . h4e1d) (call-with-values . h4e1c) (call-with-current-continuation . h4e1a) (cddddr . h4e19) (cdddar . h4e18) (cddadr . h4e17) (cddaar . h4e16) (cdaddr . h4e15) (cdadar . h4e14) (cdaadr . h4e13) (cdaaar . h4e12) (cadddr . h4e11) (caddar . h4e10) (cadadr . h4e0f) (cadaar . h4e0e) (caaddr . h4e0d) (caadar . h4e0c) (caaadr . h4e0b) (caaaar . h4e0a) (cdddr . h4e09) (cddar . h4e08) (cdadr . h4e07) (cdaar . h4e06) (caddr . h4e05) (cadar . h4e04) (caadr . h4e03) (caaar . h4e02) (cddr . h4e01) (cdar . h4e00) (cadr . h4dff) (caar . h4dfe) (cdr . h4dfd) (car . h4dfc) (boolean? . h4dfb) (atan . h4df9) (asin . h4df7) (apply . h4df6) (append . h4df5) (angle . h4df4) (acos . h4df3) (abs . h4df2) (/ . h4df1) (* . h4df0) (- . h4def) (+ . h4dee) (>= . h4ded) (> . h4dec) (= . h4deb) (<= . h4dea) (< . h4de9) (unquote-splicing . h4db6) (unquote . h4db5) (else . h4db3) (=> . h4db2) (... . h4db1) (delay . h4dae) (do . h4dac) (cond . h4dab) (let* . h4daa) (quasiquote . h4da4) (syntax-rules . h4da3) (case . h4d9e) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec . h4d95) (lambda . h4d92) (quote . h4d8f) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (begin . h4d89) (define-syntax . h4d87) (define . h4d86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5129 '(psyntax modules) '() '() '() '() '((module . h4d88)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512b '(rnrs) '(6) '() '() '() '((regexp? . h50e6) (string-upcase . h5042) (string-titlecase . h5041) (string-normalize-nfkd . h5040) (string-normalize-nfkc . h503f) (string-normalize-nfd . h503e) (string-normalize-nfc . h503d) (string-foldcase . h503c) (string-downcase . h503b) (string-ci>? . h503a) (string-ci>=? . h5039) (string-ci=? . h5038) (string-ci<? . h5037) (string-ci<=? . h5036) (char-whitespace? . h5035) (char-upper-case? . h5034) (char-title-case? . h5033) (char-numeric? . h5032) (char-lower-case? . h5031) (char-general-category . h5030) (char-upcase . h502f) (char-titlecase . h502e) (char-foldcase . h502d) (char-downcase . h502c) (char-ci>? . h502b) (char-ci>=? . h502a) (char-ci=? . h5029) (char-ci<? . h5028) (char-ci<=? . h5027) (char-alphabetic? . h5026) (make-variable-transformer . h2ee6) (identifier? . h319d) (generate-temporaries . h3189) (free-identifier=? . h318b) (syntax->datum . h31a1) (datum->syntax . h319f) (bound-identifier=? . h318d) (record-type-descriptor? . h5025) (record-predicate . h5024) (record-mutator . h5023) (record-constructor . h5022) (record-accessor . h5021) (make-record-type-descriptor . h5020) (make-record-constructor-descriptor . h501f) (record? . h501e) (record-type-uid . h501d) (record-type-sealed? . h501c) (record-type-parent . h501b) (record-type-opaque? . h501a) (record-type-name . h5019) (record-type-generative? . h5018) (record-type-field-names . h5017) (record-rtd . h5016) (record-field-mutable? . h5015) (delete-file . h5014) (file-exists? . h5013) (vector-sort! . h5012) (vector-sort . h5011) (list-sort . h5010) (symbol-hash . h500f) (string-ci-hash . h500e) (string-hash . h500d) (equal-hash . h500c) (hashtable-equivalence-function . h500b) (make-hashtable . h500a) (hashtable-hash-function . h5009) (make-eqv-hashtable . h5008) (make-eq-hashtable . h5007) (hashtable? . h5006) (hashtable-update! . h5005) (hashtable-size . h5004) (hashtable-set! . h5003) (hashtable-ref . h5002) (hashtable-mutable? . h5001) (hashtable-keys . h5000) (hashtable-entries . h4fff) (hashtable-delete! . h4ffe) (hashtable-copy . h4ffd) (hashtable-contains? . h4ffc) (hashtable-clear! . h4ffb) (call-with-output-file . h4ffa) (call-with-input-file . h4ff9) (write-char . h4ff8) (write . h4ff7) (with-output-to-file . h4ff6) (with-input-from-file . h4ff5) (read-char . h4ff4) (read . h4ff3) (peek-char . h4ff2) (open-output-file . h4ff1) (open-input-file . h4ff0) (newline . h4fef) (display . h4fee) (close-output-port . h4fed) (close-input-port . h4fec) (eof-object? . h4feb) (eof-object . h4fea) (current-error-port . h4fe9) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (utf-8-codec . h4fe4) (utf-16-codec . h4fe3) (transcoder-error-handling-mode . h4fe2) (transcoder-eol-style . h4fe1) (transcoder-codec . h4fe0) (transcoded-port . h4fdf) (textual-port? . h4fde) (string->bytevector . h4fdd) (standard-output-port . h4fdc) (standard-input-port . h4fdb) (standard-error-port . h4fda) (set-port-position! . h4fd9) (put-u8 . h4fd8) (put-string . h4fd7) (put-datum . h4fd6) (put-char . h4fd5) (put-bytevector . h4fd4) (port? . h4fd3) (port-transcoder . h4fd2) (port-position . h4fd1) (port-has-set-port-position!? . h4fd0) (port-has-port-position? . h4fcf) (port-eof? . h4fce) (output-port-buffer-mode . h4fcd) (open-string-output-port . h4fcc) (open-string-input-port . h4fcb) (open-file-output-port . h4fca) (open-file-input/output-port . h4fc9) (open-file-input-port . h4fc8) (open-bytevector-output-port . h4fc7) (open-bytevector-input-port . h4fc6) (native-transcoder . h4fc5) (native-eol-style . h4fc4) (make-transcoder . h4fc3) (latin-1-codec . h4fc2) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (make-i/o-encoding-error . h4fb7) (make-i/o-decoding-error . h4fb6) (make-custom-textual-output-port . h4fb5) (make-custom-textual-input/output-port . h4fb4) (make-custom-textual-input-port . h4fb3) (make-custom-binary-output-port . h4fb2) (make-custom-binary-input/output-port . h4fb1) (make-custom-binary-input-port . h4fb0) (make-bytevector . h4faf) (lookahead-u8 . h4fae) (lookahead-char . h4fad) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (i/o-encoding-error? . h4f9f) (i/o-encoding-error-char . h4f9e) (i/o-decoding-error? . h4f9d) (get-u8 . h4f9c) (get-string-n! . h4f9b) (get-string-n . h4f9a) (get-string-all . h4f99) (get-line . h4f98) (get-datum . h4f97) (get-char . h4f96) (get-bytevector-some . h4f95) (get-bytevector-n! . h4f94) (get-bytevector-n . h4f93) (get-bytevector-all . h4f92) (flush-output-port . h4f91) (close-port . h4f90) (exit . h4f88) (command-line . h4c1e) (remove . h4f83) (remv . h4f82) (remp . h4f81) (remq . h4f80) (partition . h4f7f) (memv . h4f7e) (memq . h4f7d) (memp . h4f7c) (member . h4f7b) (exists . h4f7a) (for-all . h4f79) (fold-right . h4f78) (fold-left . h4f77) (find . h4f76) (filter . h4f75) (cons* . h4f74) (assv . h4f73) (assq . h4f72) (assp . h4f71) (assoc . h4f70) (call-with-string-output-port . h4f6f) (call-with-port . h4f6e) (call-with-bytevector-output-port . h4f6d) (bytevector->string . h4f6c) (buffer-mode? . h4f6b) (binary-port? . h4f6a) (with-exception-handler . h4f69) (raise-continuable . h4f68) (raise . h4f67) (make-enumeration . h4f66) (enum-set=? . h4f65) (enum-set-universe . h4f64) (enum-set-union . h4f63) (enum-set-subset? . h4f62) (enum-set-projection . h4f61) (enum-set-member? . h4f60) (enum-set-intersection . h4f5f) (enum-set-indexer . h4f5e) (enum-set-difference . h4f5d) (enum-set-constructor . h4f5c) (enum-set-complement . h4f5b) (enum-set->list . h4f5a) (who-condition? . h4f59) (warning? . h4f58) (violation? . h4f57) (undefined-violation? . h4f56) (syntax-violation? . h4f55) (syntax-violation-subform . h4f54) (syntax-violation-form . h4f53) (syntax-violation . h319b) (simple-conditions . h4f52) (serious-condition? . h4f51) (non-continuable-violation? . h4f50) (message-condition? . h4f4f) (make-who-condition . h4f4e) (make-warning . h4f4d) (make-violation . h4f4c) (make-undefined-violation . h4f4b) (make-syntax-violation . h4f4a) (make-serious-condition . h4f49) (make-non-continuable-violation . h4f48) (make-message-condition . h4f47) (make-lexical-violation . h4f46) (make-irritants-condition . h4f45) (make-implementation-restriction-violation . h4f44) (make-error . h4f43) (make-assertion-violation . h4f42) (lexical-violation? . h4f41) (irritants-condition? . h4f40) (implementation-restriction-violation? . h4f3f) (error? . h4f3e) (condition-who . h4f3d) (condition-predicate . h4f3c) (condition-message . h4f3b) (condition-irritants . h4f3a) (condition-accessor . h4f39) (condition . h4f38) (assertion-violation? . h4f37) (condition? . h4f36) (utf32->string . h4f35) (utf16->string . h4f34) (utf8->string . h4f33) (uint-list->bytevector . h4f32) (u8-list->bytevector . h4f31) (string->utf8 . h4f30) (string->utf32 . h4f2f) (string->utf16 . h4f2e) (sint-list->bytevector . h4f2d) (native-endianness . h4f2c) (bytevector? . h4f2b) (bytevector=? . h4f2a) (bytevector-uint-set! . h4f29) (bytevector-uint-ref . h4f28) (bytevector-u8-set! . h4f27) (bytevector-u8-ref . h4f26) (bytevector-u64-set! . h4f25) (bytevector-u64-ref . h4f24) (bytevector-u64-native-set! . h4f23) (bytevector-u64-native-ref . h4f22) (bytevector-u32-set! . h4f21) (bytevector-u32-ref . h4f20) (bytevector-u32-native-set! . h4f1f) (bytevector-u32-native-ref . h4f1e) (bytevector-u16-set! . h4f1d) (bytevector-u16-ref . h4f1c) (bytevector-u16-native-set! . h4f1b) (bytevector-u16-native-ref . h4f1a) (bytevector-sint-set! . h4f19) (bytevector-sint-ref . h4f18) (bytevector-s8-set! . h4f17) (bytevector-s8-ref . h4f16) (bytevector-s64-set! . h4f15) (bytevector-s64-ref . h4f14) (bytevector-s64-native-set! . h4f13) (bytevector-s64-native-ref . h4f12) (bytevector-s32-set! . h4f11) (bytevector-s32-ref . h4f10) (bytevector-s32-native-set! . h4f0f) (bytevector-s32-native-ref . h4f0e) (bytevector-s16-set! . h4f0d) (bytevector-s16-ref . h4f0c) (bytevector-s16-native-set! . h4f0b) (bytevector-s16-native-ref . h4f0a) (bytevector-length . h4f09) (bytevector-ieee-single-ref . h4f08) (bytevector-ieee-single-set! . h4f07) (bytevector-ieee-single-native-set! . h4f06) (bytevector-ieee-single-native-ref . h4f05) (bytevector-ieee-double-set! . h4f04) (bytevector-ieee-double-ref . h4f03) (bytevector-ieee-double-native-set! . h4f02) (bytevector-ieee-double-native-ref . h4f01) (bytevector-fill! . h4f00) (bytevector-copy! . h4eff) (bytevector-copy . h4efe) (bytevector->uint-list . h4efd) (bytevector->u8-list . h4efc) (bytevector->sint-list . h4efb) (no-nans-violation? . h4efa) (no-infinities-violation? . h4ef9) (make-no-nans-violation . h4ef8) (make-no-infinities-violation . h4ef7) (real->flonum . h4ef6) (flzero? . h4ef5) (fltruncate . h4ef4) (fltan . h4ef3) (flsqrt . h4ef2) (flsin . h4ef1) (flround . h4ef0) (flpositive? . h4eef) (flonum? . h4eee) (flodd? . h4eed) (flnumerator . h4eec) (flnegative? . h4eeb) (flnan? . h4eea) (flmod0 . h4ee9) (flmod . h4ee8) (flmin . h4ee7) (flmax . h4ee6) (fllog . h4ee5) (flinteger? . h4ee4) (flinfinite? . h4ee3) (flfloor . h4ee2) (flfinite? . h4ee1) (flexpt . h4ee0) (flexp . h4edf) (fleven? . h4ede) (fldiv0-and-mod0 . h4edd) (fldiv0 . h4edc) (fldiv-and-mod . h4edb) (fldiv . h4eda) (fldenominator . h4ed9) (flcos . h4ed8) (flceiling . h4ed7) (flatan . h4ed6) (flasin . h4ed5) (flacos . h4ed4) (flabs . h4ed3) (fl>? . h4ed2) (fl>=? . h4ed1) (fl=? . h4ed0) (fl<? . h4ecf) (fl<=? . h4ece) (fl/ . h4ecd) (fl- . h4ecc) (fl+ . h4ecb) (fl* . h4eca) (fixnum->flonum . h4ec9) (fxzero? . h4ec8) (fxxor . h4ec7) (fxrotate-bit-field . h4ec6) (fxreverse-bit-field . h4ec5) (fxpositive? . h4ec4) (fxodd? . h4ec3) (fxnot . h4ec2) (fxnegative? . h4ec1) (fxmod0 . h4ec0) (fxmod . h4ebf) (fxmin . h4ebe) (fxmax . h4ebd) (fxlength . h4ebc) (fxior . h4ebb) (fxif . h4eba) (fxfirst-bit-set . h4eb9) (fxeven? . h4eb8) (fxdiv0-and-mod0 . h4eb7) (fxdiv0 . h4eb6) (fxdiv-and-mod . h4eb5) (fxdiv . h4eb4) (fxcopy-bit-field . h4eb3) (fxcopy-bit . h4eb2) (fxbit-set? . h4eb1) (fxbit-field . h4eb0) (fxbit-count . h4eaf) (fxarithmetic-shift-right . h4eae) (fxarithmetic-shift-left . h4ead) (fxarithmetic-shift . h4eac) (fxand . h4eab) (fx>? . h4eaa) (fx>=? . h4ea9) (fx=? . h4ea8) (fx<? . h4ea7) (fx<=? . h4ea6) (fx-/carry . h4ea5) (fx- . h4ea4) (fx+/carry . h4ea3) (fx+ . h4ea2) (fx*/carry . h4ea1) (fx* . h4ea0) (greatest-fixnum . h4e9f) (least-fixnum . h4e9e) (fixnum-width . h4e9d) (fixnum? . h4e9c) (bitwise-rotate-bit-field . h4e9b) (bitwise-reverse-bit-field . h4e9a) (bitwise-length . h4e99) (bitwise-if . h4e98) (bitwise-first-bit-set . h4e97) (bitwise-copy-bit-field . h4e96) (bitwise-copy-bit . h4e95) (bitwise-bit-set? . h4e94) (bitwise-bit-field . h4e93) (bitwise-bit-count . h4e92) (bitwise-xor . h4e91) (bitwise-ior . h4e90) (bitwise-and . h4e8f) (bitwise-not . h4e8e) (bitwise-arithmetic-shift-right . h4e8d) (bitwise-arithmetic-shift-left . h4e8c) (bitwise-arithmetic-shift . h4e8b) (zero? . h4e8a) (vector? . h4e89) (vector-set! . h4e88) (vector-ref . h4e87) (vector-map . h4e86) (vector-length . h4e85) (vector-for-each . h4e84) (vector-fill! . h4e83) (vector->list . h4e82) (vector . h4e81) (values . h4e80) (truncate . h4e7f) (tan . h4e7e) (symbol? . h4e7d) (symbol=? . h4e7c) (symbol->string . h4e7b) (substring . h4e7a) (string? . h4e79) (string>? . h4e78) (string>=? . h4e77) (string=? . h4e76) (string<? . h4e75) (string<=? . h4e74) (string-ref . h4e73) (string-length . h4e72) (string-for-each . h4e71) (string-copy . h4e70) (string-append . h4e6f) (string->symbol . h4e6e) (string->number . h4e6d) (string->list . h4e6c) (string . h4e6b) (sqrt . h4e6a) (sin . h4e69) (round . h4e68) (reverse . h4e67) (real? . h4e66) (real-valued? . h4e65) (real-part . h4e64) (rationalize . h4e63) (rational? . h4e62) (rational-valued? . h4e61) (procedure? . h4e60) (positive? . h4e5f) (pair? . h4e5e) (odd? . h4e5d) (numerator . h4e5c) (number? . h4e5b) (number->string . h4e5a) (null? . h4e59) (not . h4e58) (negative? . h4e57) (nan? . h4e56) (min . h4e55) (max . h4e54) (map . h4e53) (make-vector . h4e52) (make-string . h4e51) (make-rectangular . h4e50) (make-polar . h4e4f) (magnitude . h4e4e) (log . h4e4d) (list? . h4e4c) (list-tail . h4e4b) (list-ref . h4e4a) (list->vector . h4e49) (list->string . h4e48) (list . h4e47) (length . h4e46) (lcm . h4e45) (integer? . h4e44) (integer-valued? . h4e43) (integer->char . h4e42) (infinite? . h4e41) (inexact? . h4e40) (inexact . h4e3f) (imag-part . h4e3e) (gcd . h4e3d) (for-each . h4e3c) (floor . h4e3b) (finite? . h4e3a) (expt . h4e39) (exp . h4e38) (exact? . h4e37) (exact-integer-sqrt . h4e36) (exact . h4e35) (even? . h4e34) (error . h4e33) (eqv? . h4e32) (equal? . h4e31) (eq? . h4e30) (dynamic-wind . h4e2f) (div0-and-mod0 . h4e2e) (mod0 . h4e2d) (div0 . h4e2c) (div-and-mod . h4e2b) (mod . h4e2a) (div . h4e29) (denominator . h4e28) (cos . h4e27) (cons . h4e26) (complex? . h4e25) (char? . h4e24) (char>? . h4e23) (char>=? . h4e22) (char=? . h4e21) (char<? . h4e20) (char<=? . h4e1f) (char->integer . h4e1e) (ceiling . h4e1d) (call-with-values . h4e1c) (call/cc . h4e1b) (call-with-current-continuation . h4e1a) (cddddr . h4e19) (cdddar . h4e18) (cddadr . h4e17) (cddaar . h4e16) (cdaddr . h4e15) (cdadar . h4e14) (cdaadr . h4e13) (cdaaar . h4e12) (cadddr . h4e11) (caddar . h4e10) (cadadr . h4e0f) (cadaar . h4e0e) (caaddr . h4e0d) (caadar . h4e0c) (caaadr . h4e0b) (caaaar . h4e0a) (cdddr . h4e09) (cddar . h4e08) (cdadr . h4e07) (cdaar . h4e06) (caddr . h4e05) (cadar . h4e04) (caadr . h4e03) (caaar . h4e02) (cddr . h4e01) (cdar . h4e00) (cadr . h4dff) (caar . h4dfe) (cdr . h4dfd) (car . h4dfc) (boolean? . h4dfb) (boolean=? . h4dfa) (atan . h4df9) (assertion-violation . h4df8) (asin . h4df7) (apply . h4df6) (append . h4df5) (angle . h4df4) (acos . h4df3) (abs . h4df2) (/ . h4df1) (* . h4df0) (- . h4def) (+ . h4dee) (>= . h4ded) (> . h4dec) (= . h4deb) (<= . h4dea) (< . h4de9) (&no-nans . h4de7) (&no-infinities . h4de6) (&i/o-encoding . h4de5) (&i/o-decoding . h4de4) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda) (&undefined . h4dd9) (&syntax . h4dd8) (&lexical . h4dd7) (&implementation-restriction . h4dd6) (&non-continuable . h4dd5) (&who . h4dd4) (&irritants . h4dd3) (&assertion . h4dd2) (&violation . h4dd1) (&error . h4dd0) (&serious . h4dcf) (&warning . h4dce) (&message . h4dcd) (&condition . h4dcc) (define-condition-type . h4dcb) (define-enumeration . h4dca) (define-record-type . h4dc9) (parent-rtd . h4dc8) (nongenerative . h4dc7) (opaque . h4dc6) (sealed . h4dc5) (protocol . h4dc4) (parent . h4dc3) (immutable . h4dc2) (mutable . h4dc1) (fields . h4dc0) (error-handling-mode . h4dbf) (file-options . h4dbe) (buffer-mode . h4dbd) (eol-style . h4dbc) (guard . h4dbb) (unsyntax-splicing . h4db8) (unsyntax . h4db7) (unquote-splicing . h4db6) (unquote . h4db5) (_ . h4db4) (else . h4db3) (=> . h4db2) (... . h4db1) (assert . h4db0) (endianness . h4daf) (do . h4dac) (cond . h4dab) (let* . h4daa) (let*-values . h4da9) (let-values . h4da8) (identifier-syntax . h4da7) (with-syntax . h4da6) (quasisyntax . h4da5) (quasiquote . h4da4) (syntax-rules . h4da3) (record-constructor-descriptor . h4da0) (record-type-descriptor . h4d9f) (case . h4d9e) (unless . h4d9c) (when . h4d9b) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec* . h4d96) (letrec . h4d95) (case-lambda . h4d93) (lambda . h4d92) (syntax . h4d91) (syntax-case . h4d90) (quote . h4d8f) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (begin . h4d89) (define-syntax . h4d87) (define . h4d86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . h3177) (quotient . h4f8f) (null-environment . h3175) (remainder . h4f8e) (modulo . h4f8d) (inexact->exact . h4f8c) (force . h4f8b) (exact->inexact . h4f8a) (make-promise . h4f89) (delay . h4dae)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512d '(rnrs control) '(6) '() '() '() '((do . h4dac) (unless . h4d9c) (when . h4d9b) (case-lambda . h4d93)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512e '(rnrs eval) '(6) '() '() '() '((eval . h317b) (environment . h3173)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h512f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . h4f85) (set-car! . h4f84)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5130 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . h4f87) (string-set! . h4f86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5131 '(rnrs programs) '(6) '() '() '() '((exit . h4f88) (command-line . h4c1e)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5132 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . h2ee6) (identifier? . h319d) (generate-temporaries . h3189) (free-identifier=? . h318b) (syntax->datum . h31a1) (datum->syntax . h319f) (bound-identifier=? . h318d) (syntax-violation . h319b) (unsyntax-splicing . h4db8) (unsyntax . h4db7) (_ . h4db4) (... . h4db1) (with-syntax . h4da6) (quasisyntax . h4da5) (syntax . h4d91) (syntax-case . h4d90)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5133 '(rnrs files) '(6) '() '() '() '((delete-file . h5014) (file-exists? . h5013) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5134 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . h5012) (vector-sort . h5011) (list-sort . h5010)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5135 '(rnrs base) '(6) '() '() '() '((zero? . h4e8a) (vector? . h4e89) (vector-set! . h4e88) (vector-ref . h4e87) (vector-map . h4e86) (vector-length . h4e85) (vector-for-each . h4e84) (vector-fill! . h4e83) (vector->list . h4e82) (vector . h4e81) (values . h4e80) (truncate . h4e7f) (tan . h4e7e) (symbol? . h4e7d) (symbol=? . h4e7c) (symbol->string . h4e7b) (substring . h4e7a) (string? . h4e79) (string>? . h4e78) (string>=? . h4e77) (string=? . h4e76) (string<? . h4e75) (string<=? . h4e74) (string-ref . h4e73) (string-length . h4e72) (string-for-each . h4e71) (string-copy . h4e70) (string-append . h4e6f) (string->symbol . h4e6e) (string->number . h4e6d) (string->list . h4e6c) (string . h4e6b) (sqrt . h4e6a) (sin . h4e69) (round . h4e68) (reverse . h4e67) (real? . h4e66) (real-valued? . h4e65) (real-part . h4e64) (rationalize . h4e63) (rational? . h4e62) (rational-valued? . h4e61) (procedure? . h4e60) (positive? . h4e5f) (pair? . h4e5e) (odd? . h4e5d) (numerator . h4e5c) (number? . h4e5b) (number->string . h4e5a) (null? . h4e59) (not . h4e58) (negative? . h4e57) (nan? . h4e56) (min . h4e55) (max . h4e54) (map . h4e53) (make-vector . h4e52) (make-string . h4e51) (make-rectangular . h4e50) (make-polar . h4e4f) (magnitude . h4e4e) (log . h4e4d) (list? . h4e4c) (list-tail . h4e4b) (list-ref . h4e4a) (list->vector . h4e49) (list->string . h4e48) (list . h4e47) (length . h4e46) (lcm . h4e45) (integer? . h4e44) (integer-valued? . h4e43) (integer->char . h4e42) (infinite? . h4e41) (inexact? . h4e40) (inexact . h4e3f) (imag-part . h4e3e) (gcd . h4e3d) (for-each . h4e3c) (floor . h4e3b) (finite? . h4e3a) (expt . h4e39) (exp . h4e38) (exact? . h4e37) (exact-integer-sqrt . h4e36) (exact . h4e35) (even? . h4e34) (error . h4e33) (eqv? . h4e32) (equal? . h4e31) (eq? . h4e30) (dynamic-wind . h4e2f) (div0-and-mod0 . h4e2e) (mod0 . h4e2d) (div0 . h4e2c) (div-and-mod . h4e2b) (mod . h4e2a) (div . h4e29) (denominator . h4e28) (cos . h4e27) (cons . h4e26) (complex? . h4e25) (char? . h4e24) (char>? . h4e23) (char>=? . h4e22) (char=? . h4e21) (char<? . h4e20) (char<=? . h4e1f) (char->integer . h4e1e) (ceiling . h4e1d) (call-with-values . h4e1c) (call/cc . h4e1b) (call-with-current-continuation . h4e1a) (cddddr . h4e19) (cdddar . h4e18) (cddadr . h4e17) (cddaar . h4e16) (cdaddr . h4e15) (cdadar . h4e14) (cdaadr . h4e13) (cdaaar . h4e12) (cadddr . h4e11) (caddar . h4e10) (cadadr . h4e0f) (cadaar . h4e0e) (caaddr . h4e0d) (caadar . h4e0c) (caaadr . h4e0b) (caaaar . h4e0a) (cdddr . h4e09) (cddar . h4e08) (cdadr . h4e07) (cdaar . h4e06) (caddr . h4e05) (cadar . h4e04) (caadr . h4e03) (caaar . h4e02) (cddr . h4e01) (cdar . h4e00) (cadr . h4dff) (caar . h4dfe) (cdr . h4dfd) (car . h4dfc) (boolean? . h4dfb) (boolean=? . h4dfa) (atan . h4df9) (assertion-violation . h4df8) (asin . h4df7) (apply . h4df6) (append . h4df5) (angle . h4df4) (acos . h4df3) (abs . h4df2) (/ . h4df1) (* . h4df0) (- . h4def) (+ . h4dee) (>= . h4ded) (> . h4dec) (= . h4deb) (<= . h4dea) (< . h4de9) (unquote-splicing . h4db6) (unquote . h4db5) (_ . h4db4) (else . h4db3) (=> . h4db2) (... . h4db1) (assert . h4db0) (cond . h4dab) (let* . h4daa) (let*-values . h4da9) (let-values . h4da8) (identifier-syntax . h4da7) (quasiquote . h4da4) (syntax-rules . h4da3) (case . h4d9e) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec* . h4d96) (letrec . h4d95) (lambda . h4d92) (quote . h4d8f) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (begin . h4d89) (define-syntax . h4d87) (define . h4d86)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5136 '(rnrs lists) '(6) '() '() '() '((remove . h4f83) (remv . h4f82) (remp . h4f81) (remq . h4f80) (partition . h4f7f) (memv . h4f7e) (memq . h4f7d) (memp . h4f7c) (member . h4f7b) (exists . h4f7a) (for-all . h4f79) (fold-right . h4f78) (fold-left . h4f77) (find . h4f76) (filter . h4f75) (cons* . h4f74) (assv . h4f73) (assq . h4f72) (assp . h4f71) (assoc . h4f70)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5137 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . h4ffa) (call-with-input-file . h4ff9) (write-char . h4ff8) (write . h4ff7) (with-output-to-file . h4ff6) (with-input-from-file . h4ff5) (read-char . h4ff4) (read . h4ff3) (peek-char . h4ff2) (open-output-file . h4ff1) (open-input-file . h4ff0) (newline . h4fef) (display . h4fee) (close-output-port . h4fed) (close-input-port . h4fec) (eof-object? . h4feb) (eof-object . h4fea) (current-error-port . h4fe9) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5138 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . h4faf) (utf32->string . h4f35) (utf16->string . h4f34) (utf8->string . h4f33) (uint-list->bytevector . h4f32) (u8-list->bytevector . h4f31) (string->utf8 . h4f30) (string->utf32 . h4f2f) (string->utf16 . h4f2e) (sint-list->bytevector . h4f2d) (native-endianness . h4f2c) (bytevector? . h4f2b) (bytevector=? . h4f2a) (bytevector-uint-set! . h4f29) (bytevector-uint-ref . h4f28) (bytevector-u8-set! . h4f27) (bytevector-u8-ref . h4f26) (bytevector-u64-set! . h4f25) (bytevector-u64-ref . h4f24) (bytevector-u64-native-set! . h4f23) (bytevector-u64-native-ref . h4f22) (bytevector-u32-set! . h4f21) (bytevector-u32-ref . h4f20) (bytevector-u32-native-set! . h4f1f) (bytevector-u32-native-ref . h4f1e) (bytevector-u16-set! . h4f1d) (bytevector-u16-ref . h4f1c) (bytevector-u16-native-set! . h4f1b) (bytevector-u16-native-ref . h4f1a) (bytevector-sint-set! . h4f19) (bytevector-sint-ref . h4f18) (bytevector-s8-set! . h4f17) (bytevector-s8-ref . h4f16) (bytevector-s64-set! . h4f15) (bytevector-s64-ref . h4f14) (bytevector-s64-native-set! . h4f13) (bytevector-s64-native-ref . h4f12) (bytevector-s32-set! . h4f11) (bytevector-s32-ref . h4f10) (bytevector-s32-native-set! . h4f0f) (bytevector-s32-native-ref . h4f0e) (bytevector-s16-set! . h4f0d) (bytevector-s16-ref . h4f0c) (bytevector-s16-native-set! . h4f0b) (bytevector-s16-native-ref . h4f0a) (bytevector-length . h4f09) (bytevector-ieee-single-ref . h4f08) (bytevector-ieee-single-set! . h4f07) (bytevector-ieee-single-native-set! . h4f06) (bytevector-ieee-single-native-ref . h4f05) (bytevector-ieee-double-set! . h4f04) (bytevector-ieee-double-ref . h4f03) (bytevector-ieee-double-native-set! . h4f02) (bytevector-ieee-double-native-ref . h4f01) (bytevector-fill! . h4f00) (bytevector-copy! . h4eff) (bytevector-copy . h4efe) (bytevector->uint-list . h4efd) (bytevector->u8-list . h4efc) (bytevector->sint-list . h4efb) (endianness . h4daf)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5139 '(rnrs unicode) '(6) '() '() '() '((string-upcase . h5042) (string-titlecase . h5041) (string-normalize-nfkd . h5040) (string-normalize-nfkc . h503f) (string-normalize-nfd . h503e) (string-normalize-nfc . h503d) (string-foldcase . h503c) (string-downcase . h503b) (string-ci>? . h503a) (string-ci>=? . h5039) (string-ci=? . h5038) (string-ci<? . h5037) (string-ci<=? . h5036) (char-whitespace? . h5035) (char-upper-case? . h5034) (char-title-case? . h5033) (char-numeric? . h5032) (char-lower-case? . h5031) (char-general-category . h5030) (char-upcase . h502f) (char-titlecase . h502e) (char-foldcase . h502d) (char-downcase . h502c) (char-ci>? . h502b) (char-ci>=? . h502a) (char-ci=? . h5029) (char-ci<? . h5028) (char-ci<=? . h5027) (char-alphabetic? . h5026)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . h4f69) (raise-continuable . h4f68) (raise . h4f67) (guard . h4dbb) (else . h4db3) (=> . h4db2)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . h4e9b) (bitwise-reverse-bit-field . h4e9a) (bitwise-length . h4e99) (bitwise-if . h4e98) (bitwise-first-bit-set . h4e97) (bitwise-copy-bit-field . h4e96) (bitwise-copy-bit . h4e95) (bitwise-bit-set? . h4e94) (bitwise-bit-field . h4e93) (bitwise-bit-count . h4e92) (bitwise-xor . h4e91) (bitwise-ior . h4e90) (bitwise-and . h4e8f) (bitwise-not . h4e8e) (bitwise-arithmetic-shift-right . h4e8d) (bitwise-arithmetic-shift-left . h4e8c) (bitwise-arithmetic-shift . h4e8b)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . h4ec8) (fxxor . h4ec7) (fxrotate-bit-field . h4ec6) (fxreverse-bit-field . h4ec5) (fxpositive? . h4ec4) (fxodd? . h4ec3) (fxnot . h4ec2) (fxnegative? . h4ec1) (fxmod0 . h4ec0) (fxmod . h4ebf) (fxmin . h4ebe) (fxmax . h4ebd) (fxlength . h4ebc) (fxior . h4ebb) (fxif . h4eba) (fxfirst-bit-set . h4eb9) (fxeven? . h4eb8) (fxdiv0-and-mod0 . h4eb7) (fxdiv0 . h4eb6) (fxdiv-and-mod . h4eb5) (fxdiv . h4eb4) (fxcopy-bit-field . h4eb3) (fxcopy-bit . h4eb2) (fxbit-set? . h4eb1) (fxbit-field . h4eb0) (fxbit-count . h4eaf) (fxarithmetic-shift-right . h4eae) (fxarithmetic-shift-left . h4ead) (fxarithmetic-shift . h4eac) (fxand . h4eab) (fx>? . h4eaa) (fx>=? . h4ea9) (fx=? . h4ea8) (fx<? . h4ea7) (fx<=? . h4ea6) (fx-/carry . h4ea5) (fx- . h4ea4) (fx+/carry . h4ea3) (fx+ . h4ea2) (fx*/carry . h4ea1) (fx* . h4ea0) (greatest-fixnum . h4e9f) (least-fixnum . h4e9e) (fixnum-width . h4e9d) (fixnum? . h4e9c)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . h4efa) (no-infinities-violation? . h4ef9) (make-no-nans-violation . h4ef8) (make-no-infinities-violation . h4ef7) (real->flonum . h4ef6) (flzero? . h4ef5) (fltruncate . h4ef4) (fltan . h4ef3) (flsqrt . h4ef2) (flsin . h4ef1) (flround . h4ef0) (flpositive? . h4eef) (flonum? . h4eee) (flodd? . h4eed) (flnumerator . h4eec) (flnegative? . h4eeb) (flnan? . h4eea) (flmod0 . h4ee9) (flmod . h4ee8) (flmin . h4ee7) (flmax . h4ee6) (fllog . h4ee5) (flinteger? . h4ee4) (flinfinite? . h4ee3) (flfloor . h4ee2) (flfinite? . h4ee1) (flexpt . h4ee0) (flexp . h4edf) (fleven? . h4ede) (fldiv0-and-mod0 . h4edd) (fldiv0 . h4edc) (fldiv-and-mod . h4edb) (fldiv . h4eda) (fldenominator . h4ed9) (flcos . h4ed8) (flceiling . h4ed7) (flatan . h4ed6) (flasin . h4ed5) (flacos . h4ed4) (flabs . h4ed3) (fl>? . h4ed2) (fl>=? . h4ed1) (fl=? . h4ed0) (fl<? . h4ecf) (fl<=? . h4ece) (fl/ . h4ecd) (fl- . h4ecc) (fl+ . h4ecb) (fl* . h4eca) (fixnum->flonum . h4ec9) (&no-nans . h4de7) (&no-infinities . h4de6)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . h500f) (string-ci-hash . h500e) (string-hash . h500d) (equal-hash . h500c) (hashtable-equivalence-function . h500b) (make-hashtable . h500a) (hashtable-hash-function . h5009) (make-eqv-hashtable . h5008) (make-eq-hashtable . h5007) (hashtable? . h5006) (hashtable-update! . h5005) (hashtable-size . h5004) (hashtable-set! . h5003) (hashtable-ref . h5002) (hashtable-mutable? . h5001) (hashtable-keys . h5000) (hashtable-entries . h4fff) (hashtable-delete! . h4ffe) (hashtable-copy . h4ffd) (hashtable-contains? . h4ffc) (hashtable-clear! . h4ffb)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h513f '(rnrs io ports) '(6) '() '() '() '((eof-object? . h4feb) (eof-object . h4fea) (current-error-port . h4fe9) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (utf-8-codec . h4fe4) (utf-16-codec . h4fe3) (transcoder-error-handling-mode . h4fe2) (transcoder-eol-style . h4fe1) (transcoder-codec . h4fe0) (transcoded-port . h4fdf) (textual-port? . h4fde) (string->bytevector . h4fdd) (standard-output-port . h4fdc) (standard-input-port . h4fdb) (standard-error-port . h4fda) (set-port-position! . h4fd9) (put-u8 . h4fd8) (put-string . h4fd7) (put-datum . h4fd6) (put-char . h4fd5) (put-bytevector . h4fd4) (port? . h4fd3) (port-transcoder . h4fd2) (port-position . h4fd1) (port-has-set-port-position!? . h4fd0) (port-has-port-position? . h4fcf) (port-eof? . h4fce) (output-port-buffer-mode . h4fcd) (open-string-output-port . h4fcc) (open-string-input-port . h4fcb) (open-file-output-port . h4fca) (open-file-input/output-port . h4fc9) (open-file-input-port . h4fc8) (open-bytevector-output-port . h4fc7) (open-bytevector-input-port . h4fc6) (native-transcoder . h4fc5) (native-eol-style . h4fc4) (make-transcoder . h4fc3) (latin-1-codec . h4fc2) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (make-i/o-encoding-error . h4fb7) (make-i/o-decoding-error . h4fb6) (make-custom-textual-output-port . h4fb5) (make-custom-textual-input/output-port . h4fb4) (make-custom-textual-input-port . h4fb3) (make-custom-binary-output-port . h4fb2) (make-custom-binary-input/output-port . h4fb1) (make-custom-binary-input-port . h4fb0) (lookahead-u8 . h4fae) (lookahead-char . h4fad) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (i/o-encoding-error? . h4f9f) (i/o-encoding-error-char . h4f9e) (i/o-decoding-error? . h4f9d) (get-u8 . h4f9c) (get-string-n! . h4f9b) (get-string-n . h4f9a) (get-string-all . h4f99) (get-line . h4f98) (get-datum . h4f97) (get-char . h4f96) (get-bytevector-some . h4f95) (get-bytevector-n! . h4f94) (get-bytevector-n . h4f93) (get-bytevector-all . h4f92) (flush-output-port . h4f91) (close-port . h4f90) (call-with-string-output-port . h4f6f) (call-with-port . h4f6e) (call-with-bytevector-output-port . h4f6d) (bytevector->string . h4f6c) (buffer-mode? . h4f6b) (binary-port? . h4f6a) (&i/o-encoding . h4de5) (&i/o-decoding . h4de4) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda) (error-handling-mode . h4dbf) (file-options . h4dbe) (buffer-mode . h4dbd) (eol-style . h4dbc)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5140 '(rnrs enums) '(6) '() '() '() '((make-enumeration . h4f66) (enum-set=? . h4f65) (enum-set-universe . h4f64) (enum-set-union . h4f63) (enum-set-subset? . h4f62) (enum-set-projection . h4f61) (enum-set-member? . h4f60) (enum-set-intersection . h4f5f) (enum-set-indexer . h4f5e) (enum-set-difference . h4f5d) (enum-set-constructor . h4f5c) (enum-set-complement . h4f5b) (enum-set->list . h4f5a) (define-enumeration . h4dca)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5141 '(rnrs conditions) '(6) '() '() '() '((who-condition? . h4f59) (warning? . h4f58) (violation? . h4f57) (undefined-violation? . h4f56) (syntax-violation? . h4f55) (syntax-violation-subform . h4f54) (syntax-violation-form . h4f53) (syntax-violation . h319b) (simple-conditions . h4f52) (serious-condition? . h4f51) (non-continuable-violation? . h4f50) (message-condition? . h4f4f) (make-who-condition . h4f4e) (make-warning . h4f4d) (make-violation . h4f4c) (make-undefined-violation . h4f4b) (make-syntax-violation . h4f4a) (make-serious-condition . h4f49) (make-non-continuable-violation . h4f48) (make-message-condition . h4f47) (make-lexical-violation . h4f46) (make-irritants-condition . h4f45) (make-implementation-restriction-violation . h4f44) (make-error . h4f43) (make-assertion-violation . h4f42) (lexical-violation? . h4f41) (irritants-condition? . h4f40) (implementation-restriction-violation? . h4f3f) (error? . h4f3e) (condition-who . h4f3d) (condition-predicate . h4f3c) (condition-message . h4f3b) (condition-irritants . h4f3a) (condition-accessor . h4f39) (condition . h4f38) (assertion-violation? . h4f37) (condition? . h4f36) (&undefined . h4dd9) (&syntax . h4dd8) (&lexical . h4dd7) (&implementation-restriction . h4dd6) (&non-continuable . h4dd5) (&who . h4dd4) (&irritants . h4dd3) (&assertion . h4dd2) (&violation . h4dd1) (&error . h4dd0) (&serious . h4dcf) (&warning . h4dce) (&message . h4dcd) (&condition . h4dcc) (define-condition-type . h4dcb)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5142 '(rnrs records inspection) '(6) '() '() '() '((record? . h501e) (record-type-uid . h501d) (record-type-sealed? . h501c) (record-type-parent . h501b) (record-type-opaque? . h501a) (record-type-name . h5019) (record-type-generative? . h5018) (record-type-field-names . h5017) (record-rtd . h5016) (record-field-mutable? . h5015)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5143 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . h5025) (record-predicate . h5024) (record-mutator . h5023) (record-constructor . h5022) (record-accessor . h5021) (make-record-type-descriptor . h5020) (make-record-constructor-descriptor . h501f)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5144 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . h4dc9) (parent-rtd . h4dc8) (nongenerative . h4dc7) (opaque . h4dc6) (sealed . h4dc5) (protocol . h4dc4) (parent . h4dc3) (immutable . h4dc2) (mutable . h4dc1) (fields . h4dc0) (record-constructor-descriptor . h4da0) (record-type-descriptor . h4d9f)) '() values values '#f '#f '#t '#f) (h2ccf@h2b1b@install-library 'h5145 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . h5125) (&no-nans-rtd . h5124) (&no-infinities-rcd . h5123) (&no-infinities-rtd . h5122) (&i/o-encoding-rcd . h5121) (&i/o-encoding-rtd . h5120) (&i/o-decoding-rcd . h511f) (&i/o-decoding-rtd . h511e) (&i/o-port-rcd . h511d) (&i/o-port-rtd . h511c) (&i/o-file-does-not-exist-rcd . h511b) (&i/o-file-does-not-exist-rtd . h511a) (&i/o-file-already-exists-rcd . h5119) (&i/o-file-already-exists-rtd . h5118) (&i/o-file-is-read-only-rcd . h5117) (&i/o-file-is-read-only-rtd . h5116) (&i/o-file-protection-rcd . h5115) (&i/o-file-protection-rtd . h5114) (&i/o-filename-rcd . h5113) (&i/o-filename-rtd . h5112) (&i/o-invalid-position-rcd . h5111) (&i/o-invalid-position-rtd . h5110) (&i/o-write-rcd . h510f) (&i/o-write-rtd . h510e) (&i/o-read-rcd . h510d) (&i/o-read-rtd . h510c) (&i/o-rcd . h510b) (&i/o-rtd . h510a) (&undefined-rcd . h5109) (&undefined-rtd . h5108) (&syntax-rcd . h5107) (&syntax-rtd . h5106) (&lexical-rcd . h5105) (&lexical-rtd . h5104) (&implementation-restriction-rcd . h5103) (&implementation-restriction-rtd . h5102) (&non-continuable-rcd . h5101) (&non-continuable-rtd . h5100) (&who-rcd . h50ff) (&who-rtd . h50fe) (&irritants-rcd . h50fd) (&irritants-rtd . h50fc) (&assertion-rcd . h50fb) (&assertion-rtd . h50fa) (&violation-rcd . h50f9) (&violation-rtd . h50f8) (&error-rcd . h50f7) (&error-rtd . h50f6) (&serious-rcd . h50f5) (&serious-rtd . h50f4) (&warning-rcd . h50f3) (&warning-rtd . h50f2) (&message-rcd . h50f1) (&message-rtd . h50f0) (&condition-rcd . h50ef) (&condition-rtd . h50ee) (syntax-error . h3197) (syntax-dispatch . h30bb) (pretty-print . h50ed) (eval-core . h50ec) (set-symbol-value! . h50eb) (symbol-value . h50ea) (gensym . h50e9) (void . h50e8) (load . h4c24) (interaction-environment . h31a9) (char-ready? . h50e7) (regexp? . h50e6) (read-line . h50e5) (gensym-prefix-set! . h50e4) (ungensym . h50e3) (alist->eq-hash-table . h50e2) (assoc-ref . h50e1) (print . h50e0) (format . h50df) (host-os . h50de) (library-path . h2afa) (standard-library-path . h50dd) (file-newer? . h50dc) (stat-mtime . h50db) (write-to-file . h50da) (file->list . h50d9) (file->string . h50d8) (digit->integer . h50d7) (call-with-string-input-port . h50d6) (call-with-string-io . h50d5) (string-split . h50d4) (bytevector-for-each . h50d3) (string->regexp . h50d2) (rxmatch . h50d1) (regexp-replace-all . h50d0) (hashtable-for-each . h50cf) (mosh-cache-dir . h28e4) (call-process . h50ce) (local-tz-offset . h50cd) (microseconds . h50cc) (directory-list . h50cb) (set-current-directory! . h50ca) (expand-path . h50c9) (current-directory . h50c8) (%spawn . h50c7) (%waitpid . h50c6) (simple-struct-name . h50c5) (simple-struct-set! . h50c4) (simple-struct-ref . h50c3) (make-simple-struct . h50c2) (simple-struct? . h50c1) (pointer-ref-c-int64 . h50c0) (pointer-ref-c-int32 . h50bf) (pointer-ref-c-int16 . h50be) (pointer-ref-c-int8 . h50bd) (pointer-ref-c-uint64 . h50bc) (pointer-ref-c-uint32 . h50bb) (pointer-ref-c-uint16 . h50ba) (pointer-ref-c-uint8 . h50b9) (pointer-set-c-uint64! . h50b8) (pointer-set-c-uint32! . h50b7) (pointer-set-c-uint16! . h50b6) (pointer-set-c-uint8! . h50b5) (pointer-set-c-int64! . h50b4) (pointer-set-c-int32! . h50b3) (pointer-set-c-int16! . h50b2) (pointer-set-c-int8! . h50b1) (pointer-set-c-pointer! . h50b0) (pointer-set-c-double! . h50af) (pointer-set-c-float! . h50ae) (pointer-set-c-long-long! . h50ad) (pointer-set-c-long! . h50ac) (pointer-set-c-int! . h50ab) (pointer-set-c-short! . h50aa) (pointer-set-c-char! . h50a9) (pointer-ref-c-pointer . h50a8) (pointer-ref-c-double . h50a7) (pointer-ref-c-float . h50a6) (pointer-ref-c-unsigned-long-long . h50a5) (pointer-ref-c-signed-long-long . h50a4) (pointer-ref-c-unsigned-long . h50a3) (pointer-ref-c-signed-long . h50a2) (pointer-ref-c-unsigned-int . h50a1) (pointer-ref-c-signed-int . h50a0) (pointer-ref-c-unsigned-short . h509f) (pointer-ref-c-signed-short . h509e) (pointer-ref-c-unsigned-char . h509d) (pointer-ref-c-signed-char . h509c) (pointer->integer . h509b) (integer->pointer . h509a) (pointer? . h5099) (shared-errno . h5098) (%ffi-free-c-callback-trampoline . h5097) (%ffi-make-c-callback-trampoline . h5096) (%ffi-free . h5095) (%ffi-malloc . h5094) (%ffi-supported? . h5093) (%ffi-pointer->string . h5092) (%ffi-call . h5091) (%ffi-lookup . h5090) (%ffi-open . h508f) (null-terminated-utf8->string . h508e) (null-terminated-bytevector->string . h508d) (%exec . h508c) (%fork . h508b) (%pipe . h508a) (p . h5089) (open-output-string . h5088) (get-output-string . h5087) (file-stat-ctime . h5086) (file-stat-atime . h5085) (file-stat-mtime . h5084) (file-size-in-bytes . h5083) (file-writable? . h5082) (file-executable? . h5081) (file-readable? . h5080) (file-regular? . h507f) (file-symbolic-link? . h507e) (file-directory? . h507d) (create-symbolic-link . h507c) (rename-file . h507b) (delete-directory . h507a) (create-directory . h5079) (create-mosh-cache-dir . h5078) (get-environment-variables . h5077) (current-exception-handler . h5076) (get-environment-variable . h5075) (join-wraps . h5074) (id->real-label . h5073) (same-marks? . h5072) (same-marks*? . h5071) (get-timeofday . h5070) (get-command-line . h506f) (sys-display . h506e) (whereis . h506d) (register . h506c) (vm-join! . h506b) (vm-set-value! . h506a) (vm? . h5069) (main-vm? . h5068) (vm-eval . h5067) (vm-self . h5066) (vm-start! . h5065) (make-vm . h5064) (mutex-try-lock! . h5063) (mutex-unlock! . h5062) (mutex-lock! . h5061) (mutex? . h5060) (make-mutex . h505f) (condition-variable-notify-all! . h505e) (condition-variable-notify! . h505d) (condition-variable-wait! . h505c) (make-condition-variable . h505b) (write/ss . h505a) (mosh-executable-path . h5059) (make-file-options . h5058) (source-info . h5057) (make-compiler-instruction . h5056) (make-instruction . h5055) (set-source-info! . h5054) (bignum? . h5053) (fast-equal? . h5052) (fasl-read . h5051) (fasl-write . h5050) (time-usage . h504f) (os-constant . h504e) (disasm . h504d) (make-parameter . h28e2) (socket-port . h504c) (socket-shutdown . h504b) (socket-close . h504a) (socket-send . h5049) (socket-recv! . h5048) (socket-recv . h5047) (make-server-socket . h5046) (make-client-socket . h5045) (socket-accept . h5044) (socket? . h5043) (string-upcase . h5042) (string-titlecase . h5041) (string-normalize-nfkd . h5040) (string-normalize-nfkc . h503f) (string-normalize-nfd . h503e) (string-normalize-nfc . h503d) (string-foldcase . h503c) (string-downcase . h503b) (string-ci>? . h503a) (string-ci>=? . h5039) (string-ci=? . h5038) (string-ci<? . h5037) (string-ci<=? . h5036) (char-whitespace? . h5035) (char-upper-case? . h5034) (char-title-case? . h5033) (char-numeric? . h5032) (char-lower-case? . h5031) (char-general-category . h5030) (char-upcase . h502f) (char-titlecase . h502e) (char-foldcase . h502d) (char-downcase . h502c) (char-ci>? . h502b) (char-ci>=? . h502a) (char-ci=? . h5029) (char-ci<? . h5028) (char-ci<=? . h5027) (char-alphabetic? . h5026) (make-variable-transformer . h2ee6) (identifier? . h319d) (generate-temporaries . h3189) (free-identifier=? . h318b) (syntax->datum . h31a1) (datum->syntax . h319f) (bound-identifier=? . h318d) (record-type-descriptor? . h5025) (record-predicate . h5024) (record-mutator . h5023) (record-constructor . h5022) (record-accessor . h5021) (make-record-type-descriptor . h5020) (make-record-constructor-descriptor . h501f) (record? . h501e) (record-type-uid . h501d) (record-type-sealed? . h501c) (record-type-parent . h501b) (record-type-opaque? . h501a) (record-type-name . h5019) (record-type-generative? . h5018) (record-type-field-names . h5017) (record-rtd . h5016) (record-field-mutable? . h5015) (delete-file . h5014) (file-exists? . h5013) (vector-sort! . h5012) (vector-sort . h5011) (list-sort . h5010) (symbol-hash . h500f) (string-ci-hash . h500e) (string-hash . h500d) (equal-hash . h500c) (hashtable-equivalence-function . h500b) (make-hashtable . h500a) (hashtable-hash-function . h5009) (make-eqv-hashtable . h5008) (make-eq-hashtable . h5007) (hashtable? . h5006) (hashtable-update! . h5005) (hashtable-size . h5004) (hashtable-set! . h5003) (hashtable-ref . h5002) (hashtable-mutable? . h5001) (hashtable-keys . h5000) (hashtable-entries . h4fff) (hashtable-delete! . h4ffe) (hashtable-copy . h4ffd) (hashtable-contains? . h4ffc) (hashtable-clear! . h4ffb) (call-with-output-file . h4ffa) (call-with-input-file . h4ff9) (write-char . h4ff8) (write . h4ff7) (with-output-to-file . h4ff6) (with-input-from-file . h4ff5) (read-char . h4ff4) (read . h4ff3) (peek-char . h4ff2) (open-output-file . h4ff1) (open-input-file . h4ff0) (newline . h4fef) (display . h4fee) (close-output-port . h4fed) (close-input-port . h4fec) (eof-object? . h4feb) (eof-object . h4fea) (current-error-port . h4fe9) (current-output-port . h4fe8) (current-input-port . h4fe7) (output-port? . h4fe6) (input-port? . h4fe5) (utf-8-codec . h4fe4) (utf-16-codec . h4fe3) (transcoder-error-handling-mode . h4fe2) (transcoder-eol-style . h4fe1) (transcoder-codec . h4fe0) (transcoded-port . h4fdf) (textual-port? . h4fde) (string->bytevector . h4fdd) (standard-output-port . h4fdc) (standard-input-port . h4fdb) (standard-error-port . h4fda) (set-port-position! . h4fd9) (put-u8 . h4fd8) (put-string . h4fd7) (put-datum . h4fd6) (put-char . h4fd5) (put-bytevector . h4fd4) (port? . h4fd3) (port-transcoder . h4fd2) (port-position . h4fd1) (port-has-set-port-position!? . h4fd0) (port-has-port-position? . h4fcf) (port-eof? . h4fce) (output-port-buffer-mode . h4fcd) (open-string-output-port . h4fcc) (open-string-input-port . h4fcb) (open-file-output-port . h4fca) (open-file-input/output-port . h4fc9) (open-file-input-port . h4fc8) (open-bytevector-output-port . h4fc7) (open-bytevector-input-port . h4fc6) (native-transcoder . h4fc5) (native-eol-style . h4fc4) (make-transcoder . h4fc3) (latin-1-codec . h4fc2) (make-i/o-write-error . h4fc1) (make-i/o-read-error . h4fc0) (make-i/o-port-error . h4fbf) (make-i/o-invalid-position-error . h4fbe) (make-i/o-filename-error . h4fbd) (make-i/o-file-protection-error . h4fbc) (make-i/o-file-is-read-only-error . h4fbb) (make-i/o-file-does-not-exist-error . h4fba) (make-i/o-file-already-exists-error . h4fb9) (make-i/o-error . h4fb8) (make-i/o-encoding-error . h4fb7) (make-i/o-decoding-error . h4fb6) (make-custom-textual-output-port . h4fb5) (make-custom-textual-input/output-port . h4fb4) (make-custom-textual-input-port . h4fb3) (make-custom-binary-output-port . h4fb2) (make-custom-binary-input/output-port . h4fb1) (make-custom-binary-input-port . h4fb0) (make-bytevector . h4faf) (lookahead-u8 . h4fae) (lookahead-char . h4fad) (i/o-write-error? . h4fac) (i/o-read-error? . h4fab) (i/o-port-error? . h4faa) (i/o-invalid-position-error? . h4fa9) (i/o-filename-error? . h4fa8) (i/o-file-protection-error? . h4fa7) (i/o-file-is-read-only-error? . h4fa6) (i/o-file-does-not-exist-error? . h4fa5) (i/o-file-already-exists-error? . h4fa4) (i/o-error? . h4fa3) (i/o-error-position . h4fa2) (i/o-error-port . h4fa1) (i/o-error-filename . h4fa0) (i/o-encoding-error? . h4f9f) (i/o-encoding-error-char . h4f9e) (i/o-decoding-error? . h4f9d) (get-u8 . h4f9c) (get-string-n! . h4f9b) (get-string-n . h4f9a) (get-string-all . h4f99) (get-line . h4f98) (get-datum . h4f97) (get-char . h4f96) (get-bytevector-some . h4f95) (get-bytevector-n! . h4f94) (get-bytevector-n . h4f93) (get-bytevector-all . h4f92) (flush-output-port . h4f91) (close-port . h4f90) (scheme-report-environment . h3177) (quotient . h4f8f) (null-environment . h3175) (remainder . h4f8e) (modulo . h4f8d) (inexact->exact . h4f8c) (force . h4f8b) (exact->inexact . h4f8a) (make-promise . h4f89) (exit . h4f88) (command-line . h4c1e) (string-fill! . h4f87) (string-set! . h4f86) (set-cdr! . h4f85) (set-car! . h4f84) (remove . h4f83) (remv . h4f82) (remp . h4f81) (remq . h4f80) (partition . h4f7f) (memv . h4f7e) (memq . h4f7d) (memp . h4f7c) (member . h4f7b) (exists . h4f7a) (for-all . h4f79) (fold-right . h4f78) (fold-left . h4f77) (find . h4f76) (filter . h4f75) (cons* . h4f74) (assv . h4f73) (assq . h4f72) (assp . h4f71) (assoc . h4f70) (call-with-string-output-port . h4f6f) (call-with-port . h4f6e) (call-with-bytevector-output-port . h4f6d) (bytevector->string . h4f6c) (buffer-mode? . h4f6b) (binary-port? . h4f6a) (with-exception-handler . h4f69) (raise-continuable . h4f68) (raise . h4f67) (eval . h317b) (environment . h3173) (make-enumeration . h4f66) (enum-set=? . h4f65) (enum-set-universe . h4f64) (enum-set-union . h4f63) (enum-set-subset? . h4f62) (enum-set-projection . h4f61) (enum-set-member? . h4f60) (enum-set-intersection . h4f5f) (enum-set-indexer . h4f5e) (enum-set-difference . h4f5d) (enum-set-constructor . h4f5c) (enum-set-complement . h4f5b) (enum-set->list . h4f5a) (who-condition? . h4f59) (warning? . h4f58) (violation? . h4f57) (undefined-violation? . h4f56) (syntax-violation? . h4f55) (syntax-violation-subform . h4f54) (syntax-violation-form . h4f53) (syntax-violation . h319b) (simple-conditions . h4f52) (serious-condition? . h4f51) (non-continuable-violation? . h4f50) (message-condition? . h4f4f) (make-who-condition . h4f4e) (make-warning . h4f4d) (make-violation . h4f4c) (make-undefined-violation . h4f4b) (make-syntax-violation . h4f4a) (make-serious-condition . h4f49) (make-non-continuable-violation . h4f48) (make-message-condition . h4f47) (make-lexical-violation . h4f46) (make-irritants-condition . h4f45) (make-implementation-restriction-violation . h4f44) (make-error . h4f43) (make-assertion-violation . h4f42) (lexical-violation? . h4f41) (irritants-condition? . h4f40) (implementation-restriction-violation? . h4f3f) (error? . h4f3e) (condition-who . h4f3d) (condition-predicate . h4f3c) (condition-message . h4f3b) (condition-irritants . h4f3a) (condition-accessor . h4f39) (condition . h4f38) (assertion-violation? . h4f37) (condition? . h4f36) (utf32->string . h4f35) (utf16->string . h4f34) (utf8->string . h4f33) (uint-list->bytevector . h4f32) (u8-list->bytevector . h4f31) (string->utf8 . h4f30) (string->utf32 . h4f2f) (string->utf16 . h4f2e) (sint-list->bytevector . h4f2d) (native-endianness . h4f2c) (bytevector? . h4f2b) (bytevector=? . h4f2a) (bytevector-uint-set! . h4f29) (bytevector-uint-ref . h4f28) (bytevector-u8-set! . h4f27) (bytevector-u8-ref . h4f26) (bytevector-u64-set! . h4f25) (bytevector-u64-ref . h4f24) (bytevector-u64-native-set! . h4f23) (bytevector-u64-native-ref . h4f22) (bytevector-u32-set! . h4f21) (bytevector-u32-ref . h4f20) (bytevector-u32-native-set! . h4f1f) (bytevector-u32-native-ref . h4f1e) (bytevector-u16-set! . h4f1d) (bytevector-u16-ref . h4f1c) (bytevector-u16-native-set! . h4f1b) (bytevector-u16-native-ref . h4f1a) (bytevector-sint-set! . h4f19) (bytevector-sint-ref . h4f18) (bytevector-s8-set! . h4f17) (bytevector-s8-ref . h4f16) (bytevector-s64-set! . h4f15) (bytevector-s64-ref . h4f14) (bytevector-s64-native-set! . h4f13) (bytevector-s64-native-ref . h4f12) (bytevector-s32-set! . h4f11) (bytevector-s32-ref . h4f10) (bytevector-s32-native-set! . h4f0f) (bytevector-s32-native-ref . h4f0e) (bytevector-s16-set! . h4f0d) (bytevector-s16-ref . h4f0c) (bytevector-s16-native-set! . h4f0b) (bytevector-s16-native-ref . h4f0a) (bytevector-length . h4f09) (bytevector-ieee-single-ref . h4f08) (bytevector-ieee-single-set! . h4f07) (bytevector-ieee-single-native-set! . h4f06) (bytevector-ieee-single-native-ref . h4f05) (bytevector-ieee-double-set! . h4f04) (bytevector-ieee-double-ref . h4f03) (bytevector-ieee-double-native-set! . h4f02) (bytevector-ieee-double-native-ref . h4f01) (bytevector-fill! . h4f00) (bytevector-copy! . h4eff) (bytevector-copy . h4efe) (bytevector->uint-list . h4efd) (bytevector->u8-list . h4efc) (bytevector->sint-list . h4efb) (no-nans-violation? . h4efa) (no-infinities-violation? . h4ef9) (make-no-nans-violation . h4ef8) (make-no-infinities-violation . h4ef7) (real->flonum . h4ef6) (flzero? . h4ef5) (fltruncate . h4ef4) (fltan . h4ef3) (flsqrt . h4ef2) (flsin . h4ef1) (flround . h4ef0) (flpositive? . h4eef) (flonum? . h4eee) (flodd? . h4eed) (flnumerator . h4eec) (flnegative? . h4eeb) (flnan? . h4eea) (flmod0 . h4ee9) (flmod . h4ee8) (flmin . h4ee7) (flmax . h4ee6) (fllog . h4ee5) (flinteger? . h4ee4) (flinfinite? . h4ee3) (flfloor . h4ee2) (flfinite? . h4ee1) (flexpt . h4ee0) (flexp . h4edf) (fleven? . h4ede) (fldiv0-and-mod0 . h4edd) (fldiv0 . h4edc) (fldiv-and-mod . h4edb) (fldiv . h4eda) (fldenominator . h4ed9) (flcos . h4ed8) (flceiling . h4ed7) (flatan . h4ed6) (flasin . h4ed5) (flacos . h4ed4) (flabs . h4ed3) (fl>? . h4ed2) (fl>=? . h4ed1) (fl=? . h4ed0) (fl<? . h4ecf) (fl<=? . h4ece) (fl/ . h4ecd) (fl- . h4ecc) (fl+ . h4ecb) (fl* . h4eca) (fixnum->flonum . h4ec9) (fxzero? . h4ec8) (fxxor . h4ec7) (fxrotate-bit-field . h4ec6) (fxreverse-bit-field . h4ec5) (fxpositive? . h4ec4) (fxodd? . h4ec3) (fxnot . h4ec2) (fxnegative? . h4ec1) (fxmod0 . h4ec0) (fxmod . h4ebf) (fxmin . h4ebe) (fxmax . h4ebd) (fxlength . h4ebc) (fxior . h4ebb) (fxif . h4eba) (fxfirst-bit-set . h4eb9) (fxeven? . h4eb8) (fxdiv0-and-mod0 . h4eb7) (fxdiv0 . h4eb6) (fxdiv-and-mod . h4eb5) (fxdiv . h4eb4) (fxcopy-bit-field . h4eb3) (fxcopy-bit . h4eb2) (fxbit-set? . h4eb1) (fxbit-field . h4eb0) (fxbit-count . h4eaf) (fxarithmetic-shift-right . h4eae) (fxarithmetic-shift-left . h4ead) (fxarithmetic-shift . h4eac) (fxand . h4eab) (fx>? . h4eaa) (fx>=? . h4ea9) (fx=? . h4ea8) (fx<? . h4ea7) (fx<=? . h4ea6) (fx-/carry . h4ea5) (fx- . h4ea4) (fx+/carry . h4ea3) (fx+ . h4ea2) (fx*/carry . h4ea1) (fx* . h4ea0) (greatest-fixnum . h4e9f) (least-fixnum . h4e9e) (fixnum-width . h4e9d) (fixnum? . h4e9c) (bitwise-rotate-bit-field . h4e9b) (bitwise-reverse-bit-field . h4e9a) (bitwise-length . h4e99) (bitwise-if . h4e98) (bitwise-first-bit-set . h4e97) (bitwise-copy-bit-field . h4e96) (bitwise-copy-bit . h4e95) (bitwise-bit-set? . h4e94) (bitwise-bit-field . h4e93) (bitwise-bit-count . h4e92) (bitwise-xor . h4e91) (bitwise-ior . h4e90) (bitwise-and . h4e8f) (bitwise-not . h4e8e) (bitwise-arithmetic-shift-right . h4e8d) (bitwise-arithmetic-shift-left . h4e8c) (bitwise-arithmetic-shift . h4e8b) (zero? . h4e8a) (vector? . h4e89) (vector-set! . h4e88) (vector-ref . h4e87) (vector-map . h4e86) (vector-length . h4e85) (vector-for-each . h4e84) (vector-fill! . h4e83) (vector->list . h4e82) (vector . h4e81) (values . h4e80) (truncate . h4e7f) (tan . h4e7e) (symbol? . h4e7d) (symbol=? . h4e7c) (symbol->string . h4e7b) (substring . h4e7a) (string? . h4e79) (string>? . h4e78) (string>=? . h4e77) (string=? . h4e76) (string<? . h4e75) (string<=? . h4e74) (string-ref . h4e73) (string-length . h4e72) (string-for-each . h4e71) (string-copy . h4e70) (string-append . h4e6f) (string->symbol . h4e6e) (string->number . h4e6d) (string->list . h4e6c) (string . h4e6b) (sqrt . h4e6a) (sin . h4e69) (round . h4e68) (reverse . h4e67) (real? . h4e66) (real-valued? . h4e65) (real-part . h4e64) (rationalize . h4e63) (rational? . h4e62) (rational-valued? . h4e61) (procedure? . h4e60) (positive? . h4e5f) (pair? . h4e5e) (odd? . h4e5d) (numerator . h4e5c) (number? . h4e5b) (number->string . h4e5a) (null? . h4e59) (not . h4e58) (negative? . h4e57) (nan? . h4e56) (min . h4e55) (max . h4e54) (map . h4e53) (make-vector . h4e52) (make-string . h4e51) (make-rectangular . h4e50) (make-polar . h4e4f) (magnitude . h4e4e) (log . h4e4d) (list? . h4e4c) (list-tail . h4e4b) (list-ref . h4e4a) (list->vector . h4e49) (list->string . h4e48) (list . h4e47) (length . h4e46) (lcm . h4e45) (integer? . h4e44) (integer-valued? . h4e43) (integer->char . h4e42) (infinite? . h4e41) (inexact? . h4e40) (inexact . h4e3f) (imag-part . h4e3e) (gcd . h4e3d) (for-each . h4e3c) (floor . h4e3b) (finite? . h4e3a) (expt . h4e39) (exp . h4e38) (exact? . h4e37) (exact-integer-sqrt . h4e36) (exact . h4e35) (even? . h4e34) (error . h4e33) (eqv? . h4e32) (equal? . h4e31) (eq? . h4e30) (dynamic-wind . h4e2f) (div0-and-mod0 . h4e2e) (mod0 . h4e2d) (div0 . h4e2c) (div-and-mod . h4e2b) (mod . h4e2a) (div . h4e29) (denominator . h4e28) (cos . h4e27) (cons . h4e26) (complex? . h4e25) (char? . h4e24) (char>? . h4e23) (char>=? . h4e22) (char=? . h4e21) (char<? . h4e20) (char<=? . h4e1f) (char->integer . h4e1e) (ceiling . h4e1d) (call-with-values . h4e1c) (call/cc . h4e1b) (call-with-current-continuation . h4e1a) (cddddr . h4e19) (cdddar . h4e18) (cddadr . h4e17) (cddaar . h4e16) (cdaddr . h4e15) (cdadar . h4e14) (cdaadr . h4e13) (cdaaar . h4e12) (cadddr . h4e11) (caddar . h4e10) (cadadr . h4e0f) (cadaar . h4e0e) (caaddr . h4e0d) (caadar . h4e0c) (caaadr . h4e0b) (caaaar . h4e0a) (cdddr . h4e09) (cddar . h4e08) (cdadr . h4e07) (cdaar . h4e06) (caddr . h4e05) (cadar . h4e04) (caadr . h4e03) (caaar . h4e02) (cddr . h4e01) (cdar . h4e00) (cadr . h4dff) (caar . h4dfe) (cdr . h4dfd) (car . h4dfc) (boolean? . h4dfb) (boolean=? . h4dfa) (atan . h4df9) (assertion-violation . h4df8) (assertion-error . h3195) (asin . h4df7) (apply . h4df6) (append . h4df5) (angle . h4df4) (acos . h4df3) (abs . h4df2) (/ . h4df1) (* . h4df0) (- . h4def) (+ . h4dee) (>= . h4ded) (> . h4dec) (= . h4deb) (<= . h4dea) (< . h4de9) (library . h4de8) (&no-nans . h4de7) (&no-infinities . h4de6) (&i/o-encoding . h4de5) (&i/o-decoding . h4de4) (&i/o-port . h4de3) (&i/o-file-does-not-exist . h4de2) (&i/o-file-already-exists . h4de1) (&i/o-file-is-read-only . h4de0) (&i/o-file-protection . h4ddf) (&i/o-filename . h4dde) (&i/o-invalid-position . h4ddd) (&i/o-write . h4ddc) (&i/o-read . h4ddb) (&i/o . h4dda) (&undefined . h4dd9) (&syntax . h4dd8) (&lexical . h4dd7) (&implementation-restriction . h4dd6) (&non-continuable . h4dd5) (&who . h4dd4) (&irritants . h4dd3) (&assertion . h4dd2) (&violation . h4dd1) (&error . h4dd0) (&serious . h4dcf) (&warning . h4dce) (&message . h4dcd) (&condition . h4dcc) (define-condition-type . h4dcb) (define-enumeration . h4dca) (define-record-type . h4dc9) (parent-rtd . h4dc8) (nongenerative . h4dc7) (opaque . h4dc6) (sealed . h4dc5) (protocol . h4dc4) (parent . h4dc3) (immutable . h4dc2) (mutable . h4dc1) (fields . h4dc0) (error-handling-mode . h4dbf) (file-options . h4dbe) (buffer-mode . h4dbd) (eol-style . h4dbc) (guard . h4dbb) (trace-define . h4dba) (trace-lambda . h4db9) (unsyntax-splicing . h4db8) (unsyntax . h4db7) (unquote-splicing . h4db6) (unquote . h4db5) (_ . h4db4) (else . h4db3) (=> . h4db2) (... . h4db1) (assert . h4db0) (endianness . h4daf) (delay . h4dae) (time . h4dad) (do . h4dac) (cond . h4dab) (let* . h4daa) (let*-values . h4da9) (let-values . h4da8) (identifier-syntax . h4da7) (with-syntax . h4da6) (quasisyntax . h4da5) (quasiquote . h4da4) (syntax-rules . h4da3) (include . h4da2) (define-struct . h4da1) (record-constructor-descriptor . h4da0) (record-type-descriptor . h4d9f) (case . h4d9e) (parameterize . h4d9d) (unless . h4d9c) (when . h4d9b) (or . h4d9a) (and . h4d99) (if . h4d98) (let . h4d97) (letrec* . h4d96) (letrec . h4d95) (type-descriptor . h4d94) (case-lambda . h4d93) (lambda . h4d92) (syntax . h4d91) (syntax-case . h4d90) (quote . h4d8f) (foreign-call . h4d8e) (letrec-syntax . h4d8d) (let-syntax . h4d8c) (set! . h4d8b) (import . h4d8a) (begin . h4d89) (module . h4d88) (define-syntax . h4d87) (define . h4d86)) '((h5125 core-prim . &no-nans-rcd) (h5124 core-prim . &no-nans-rtd) (h5123 core-prim . &no-infinities-rcd) (h5122 core-prim . &no-infinities-rtd) (h5121 core-prim . &i/o-encoding-rcd) (h5120 core-prim . &i/o-encoding-rtd) (h511f core-prim . &i/o-decoding-rcd) (h511e core-prim . &i/o-decoding-rtd) (h511d core-prim . &i/o-port-rcd) (h511c core-prim . &i/o-port-rtd) (h511b core-prim . &i/o-file-does-not-exist-rcd) (h511a core-prim . &i/o-file-does-not-exist-rtd) (h5119 core-prim . &i/o-file-already-exists-rcd) (h5118 core-prim . &i/o-file-already-exists-rtd) (h5117 core-prim . &i/o-file-is-read-only-rcd) (h5116 core-prim . &i/o-file-is-read-only-rtd) (h5115 core-prim . &i/o-file-protection-rcd) (h5114 core-prim . &i/o-file-protection-rtd) (h5113 core-prim . &i/o-filename-rcd) (h5112 core-prim . &i/o-filename-rtd) (h5111 core-prim . &i/o-invalid-position-rcd) (h5110 core-prim . &i/o-invalid-position-rtd) (h510f core-prim . &i/o-write-rcd) (h510e core-prim . &i/o-write-rtd) (h510d core-prim . &i/o-read-rcd) (h510c core-prim . &i/o-read-rtd) (h510b core-prim . &i/o-rcd) (h510a core-prim . &i/o-rtd) (h5109 core-prim . &undefined-rcd) (h5108 core-prim . &undefined-rtd) (h5107 core-prim . &syntax-rcd) (h5106 core-prim . &syntax-rtd) (h5105 core-prim . &lexical-rcd) (h5104 core-prim . &lexical-rtd) (h5103 core-prim . &implementation-restriction-rcd) (h5102 core-prim . &implementation-restriction-rtd) (h5101 core-prim . &non-continuable-rcd) (h5100 core-prim . &non-continuable-rtd) (h50ff core-prim . &who-rcd) (h50fe core-prim . &who-rtd) (h50fd core-prim . &irritants-rcd) (h50fc core-prim . &irritants-rtd) (h50fb core-prim . &assertion-rcd) (h50fa core-prim . &assertion-rtd) (h50f9 core-prim . &violation-rcd) (h50f8 core-prim . &violation-rtd) (h50f7 core-prim . &error-rcd) (h50f6 core-prim . &error-rtd) (h50f5 core-prim . &serious-rcd) (h50f4 core-prim . &serious-rtd) (h50f3 core-prim . &warning-rcd) (h50f2 core-prim . &warning-rtd) (h50f1 core-prim . &message-rcd) (h50f0 core-prim . &message-rtd) (h50ef core-prim . &condition-rcd) (h50ee core-prim . &condition-rtd) (h3197 core-prim . syntax-error) (h30bb core-prim . syntax-dispatch) (h50ed core-prim . pretty-print) (h50ec core-prim . eval-core) (h50eb core-prim . set-symbol-value!) (h50ea core-prim . symbol-value) (h50e9 core-prim . gensym) (h50e8 core-prim . void) (h4c24 core-prim . load) (h31a9 core-prim . interaction-environment) (h50e7 core-prim . char-ready?) (h50e6 core-prim . regexp?) (h50e5 core-prim . read-line) (h50e4 core-prim . gensym-prefix-set!) (h50e3 core-prim . ungensym) (h50e2 core-prim . alist->eq-hash-table) (h50e1 core-prim . assoc-ref) (h50e0 core-prim . print) (h50df core-prim . format) (h50de core-prim . host-os) (h2afa core-prim . library-path) (h50dd core-prim . standard-library-path) (h50dc core-prim . file-newer?) (h50db core-prim . stat-mtime) (h50da core-prim . write-to-file) (h50d9 core-prim . file->list) (h50d8 core-prim . file->string) (h50d7 core-prim . digit->integer) (h50d6 core-prim . call-with-string-input-port) (h50d5 core-prim . call-with-string-io) (h50d4 core-prim . string-split) (h50d3 core-prim . bytevector-for-each) (h50d2 core-prim . string->regexp) (h50d1 core-prim . rxmatch) (h50d0 core-prim . regexp-replace-all) (h50cf core-prim . hashtable-for-each) (h28e4 core-prim . mosh-cache-dir) (h50ce core-prim . call-process) (h50cd core-prim . local-tz-offset) (h50cc core-prim . microseconds) (h50cb core-prim . directory-list) (h50ca core-prim . set-current-directory!) (h50c9 core-prim . expand-path) (h50c8 core-prim . current-directory) (h50c7 core-prim . %spawn) (h50c6 core-prim . %waitpid) (h50c5 core-prim . simple-struct-name) (h50c4 core-prim . simple-struct-set!) (h50c3 core-prim . simple-struct-ref) (h50c2 core-prim . make-simple-struct) (h50c1 core-prim . simple-struct?) (h50c0 core-prim . pointer-ref-c-int64) (h50bf core-prim . pointer-ref-c-int32) (h50be core-prim . pointer-ref-c-int16) (h50bd core-prim . pointer-ref-c-int8) (h50bc core-prim . pointer-ref-c-uint64) (h50bb core-prim . pointer-ref-c-uint32) (h50ba core-prim . pointer-ref-c-uint16) (h50b9 core-prim . pointer-ref-c-uint8) (h50b8 core-prim . pointer-set-c-uint64!) (h50b7 core-prim . pointer-set-c-uint32!) (h50b6 core-prim . pointer-set-c-uint16!) (h50b5 core-prim . pointer-set-c-uint8!) (h50b4 core-prim . pointer-set-c-int64!) (h50b3 core-prim . pointer-set-c-int32!) (h50b2 core-prim . pointer-set-c-int16!) (h50b1 core-prim . pointer-set-c-int8!) (h50b0 core-prim . pointer-set-c-pointer!) (h50af core-prim . pointer-set-c-double!) (h50ae core-prim . pointer-set-c-float!) (h50ad core-prim . pointer-set-c-long-long!) (h50ac core-prim . pointer-set-c-long!) (h50ab core-prim . pointer-set-c-int!) (h50aa core-prim . pointer-set-c-short!) (h50a9 core-prim . pointer-set-c-char!) (h50a8 core-prim . pointer-ref-c-pointer) (h50a7 core-prim . pointer-ref-c-double) (h50a6 core-prim . pointer-ref-c-float) (h50a5 core-prim . pointer-ref-c-unsigned-long-long) (h50a4 core-prim . pointer-ref-c-signed-long-long) (h50a3 core-prim . pointer-ref-c-unsigned-long) (h50a2 core-prim . pointer-ref-c-signed-long) (h50a1 core-prim . pointer-ref-c-unsigned-int) (h50a0 core-prim . pointer-ref-c-signed-int) (h509f core-prim . pointer-ref-c-unsigned-short) (h509e core-prim . pointer-ref-c-signed-short) (h509d core-prim . pointer-ref-c-unsigned-char) (h509c core-prim . pointer-ref-c-signed-char) (h509b core-prim . pointer->integer) (h509a core-prim . integer->pointer) (h5099 core-prim . pointer?) (h5098 core-prim . shared-errno) (h5097 core-prim . %ffi-free-c-callback-trampoline) (h5096 core-prim . %ffi-make-c-callback-trampoline) (h5095 core-prim . %ffi-free) (h5094 core-prim . %ffi-malloc) (h5093 core-prim . %ffi-supported?) (h5092 core-prim . %ffi-pointer->string) (h5091 core-prim . %ffi-call) (h5090 core-prim . %ffi-lookup) (h508f core-prim . %ffi-open) (h508e core-prim . null-terminated-utf8->string) (h508d core-prim . null-terminated-bytevector->string) (h508c core-prim . %exec) (h508b core-prim . %fork) (h508a core-prim . %pipe) (h5089 core-prim . p) (h5088 core-prim . open-output-string) (h5087 core-prim . get-output-string) (h5086 core-prim . file-stat-ctime) (h5085 core-prim . file-stat-atime) (h5084 core-prim . file-stat-mtime) (h5083 core-prim . file-size-in-bytes) (h5082 core-prim . file-writable?) (h5081 core-prim . file-executable?) (h5080 core-prim . file-readable?) (h507f core-prim . file-regular?) (h507e core-prim . file-symbolic-link?) (h507d core-prim . file-directory?) (h507c core-prim . create-symbolic-link) (h507b core-prim . rename-file) (h507a core-prim . delete-directory) (h5079 core-prim . create-directory) (h5078 core-prim . create-mosh-cache-dir) (h5077 core-prim . get-environment-variables) (h5076 core-prim . current-exception-handler) (h5075 core-prim . get-environment-variable) (h5074 core-prim . join-wraps) (h5073 core-prim . id->real-label) (h5072 core-prim . same-marks?) (h5071 core-prim . same-marks*?) (h5070 core-prim . get-timeofday) (h506f core-prim . get-command-line) (h506e core-prim . sys-display) (h506d core-prim . whereis) (h506c core-prim . register) (h506b core-prim . vm-join!) (h506a core-prim . vm-set-value!) (h5069 core-prim . vm?) (h5068 core-prim . main-vm?) (h5067 core-prim . vm-eval) (h5066 core-prim . vm-self) (h5065 core-prim . vm-start!) (h5064 core-prim . make-vm) (h5063 core-prim . mutex-try-lock!) (h5062 core-prim . mutex-unlock!) (h5061 core-prim . mutex-lock!) (h5060 core-prim . mutex?) (h505f core-prim . make-mutex) (h505e core-prim . condition-variable-notify-all!) (h505d core-prim . condition-variable-notify!) (h505c core-prim . condition-variable-wait!) (h505b core-prim . make-condition-variable) (h505a core-prim . write/ss) (h5059 core-prim . mosh-executable-path) (h5058 core-prim . make-file-options) (h5057 core-prim . source-info) (h5056 core-prim . make-compiler-instruction) (h5055 core-prim . make-instruction) (h5054 core-prim . set-source-info!) (h5053 core-prim . bignum?) (h5052 core-prim . fast-equal?) (h5051 core-prim . fasl-read) (h5050 core-prim . fasl-write) (h504f core-prim . time-usage) (h504e core-prim . os-constant) (h504d core-prim . disasm) (h28e2 core-prim . make-parameter) (h504c core-prim . socket-port) (h504b core-prim . socket-shutdown) (h504a core-prim . socket-close) (h5049 core-prim . socket-send) (h5048 core-prim . socket-recv!) (h5047 core-prim . socket-recv) (h5046 core-prim . make-server-socket) (h5045 core-prim . make-client-socket) (h5044 core-prim . socket-accept) (h5043 core-prim . socket?) (h5042 core-prim . string-upcase) (h5041 core-prim . string-titlecase) (h5040 core-prim . string-normalize-nfkd) (h503f core-prim . string-normalize-nfkc) (h503e core-prim . string-normalize-nfd) (h503d core-prim . string-normalize-nfc) (h503c core-prim . string-foldcase) (h503b core-prim . string-downcase) (h503a core-prim . string-ci>?) (h5039 core-prim . string-ci>=?) (h5038 core-prim . string-ci=?) (h5037 core-prim . string-ci<?) (h5036 core-prim . string-ci<=?) (h5035 core-prim . char-whitespace?) (h5034 core-prim . char-upper-case?) (h5033 core-prim . char-title-case?) (h5032 core-prim . char-numeric?) (h5031 core-prim . char-lower-case?) (h5030 core-prim . char-general-category) (h502f core-prim . char-upcase) (h502e core-prim . char-titlecase) (h502d core-prim . char-foldcase) (h502c core-prim . char-downcase) (h502b core-prim . char-ci>?) (h502a core-prim . char-ci>=?) (h5029 core-prim . char-ci=?) (h5028 core-prim . char-ci<?) (h5027 core-prim . char-ci<=?) (h5026 core-prim . char-alphabetic?) (h2ee6 core-prim . make-variable-transformer) (h319d core-prim . identifier?) (h3189 core-prim . generate-temporaries) (h318b core-prim . free-identifier=?) (h31a1 core-prim . syntax->datum) (h319f core-prim . datum->syntax) (h318d core-prim . bound-identifier=?) (h5025 core-prim . record-type-descriptor?) (h5024 core-prim . record-predicate) (h5023 core-prim . record-mutator) (h5022 core-prim . record-constructor) (h5021 core-prim . record-accessor) (h5020 core-prim . make-record-type-descriptor) (h501f core-prim . make-record-constructor-descriptor) (h501e core-prim . record?) (h501d core-prim . record-type-uid) (h501c core-prim . record-type-sealed?) (h501b core-prim . record-type-parent) (h501a core-prim . record-type-opaque?) (h5019 core-prim . record-type-name) (h5018 core-prim . record-type-generative?) (h5017 core-prim . record-type-field-names) (h5016 core-prim . record-rtd) (h5015 core-prim . record-field-mutable?) (h5014 core-prim . delete-file) (h5013 core-prim . file-exists?) (h5012 core-prim . vector-sort!) (h5011 core-prim . vector-sort) (h5010 core-prim . list-sort) (h500f core-prim . symbol-hash) (h500e core-prim . string-ci-hash) (h500d core-prim . string-hash) (h500c core-prim . equal-hash) (h500b core-prim . hashtable-equivalence-function) (h500a core-prim . make-hashtable) (h5009 core-prim . hashtable-hash-function) (h5008 core-prim . make-eqv-hashtable) (h5007 core-prim . make-eq-hashtable) (h5006 core-prim . hashtable?) (h5005 core-prim . hashtable-update!) (h5004 core-prim . hashtable-size) (h5003 core-prim . hashtable-set!) (h5002 core-prim . hashtable-ref) (h5001 core-prim . hashtable-mutable?) (h5000 core-prim . hashtable-keys) (h4fff core-prim . hashtable-entries) (h4ffe core-prim . hashtable-delete!) (h4ffd core-prim . hashtable-copy) (h4ffc core-prim . hashtable-contains?) (h4ffb core-prim . hashtable-clear!) (h4ffa core-prim . call-with-output-file) (h4ff9 core-prim . call-with-input-file) (h4ff8 core-prim . write-char) (h4ff7 core-prim . write) (h4ff6 core-prim . with-output-to-file) (h4ff5 core-prim . with-input-from-file) (h4ff4 core-prim . read-char) (h4ff3 core-prim . read) (h4ff2 core-prim . peek-char) (h4ff1 core-prim . open-output-file) (h4ff0 core-prim . open-input-file) (h4fef core-prim . newline) (h4fee core-prim . display) (h4fed core-prim . close-output-port) (h4fec core-prim . close-input-port) (h4feb core-prim . eof-object?) (h4fea core-prim . eof-object) (h4fe9 core-prim . current-error-port) (h4fe8 core-prim . current-output-port) (h4fe7 core-prim . current-input-port) (h4fe6 core-prim . output-port?) (h4fe5 core-prim . input-port?) (h4fe4 core-prim . utf-8-codec) (h4fe3 core-prim . utf-16-codec) (h4fe2 core-prim . transcoder-error-handling-mode) (h4fe1 core-prim . transcoder-eol-style) (h4fe0 core-prim . transcoder-codec) (h4fdf core-prim . transcoded-port) (h4fde core-prim . textual-port?) (h4fdd core-prim . string->bytevector) (h4fdc core-prim . standard-output-port) (h4fdb core-prim . standard-input-port) (h4fda core-prim . standard-error-port) (h4fd9 core-prim . set-port-position!) (h4fd8 core-prim . put-u8) (h4fd7 core-prim . put-string) (h4fd6 core-prim . put-datum) (h4fd5 core-prim . put-char) (h4fd4 core-prim . put-bytevector) (h4fd3 core-prim . port?) (h4fd2 core-prim . port-transcoder) (h4fd1 core-prim . port-position) (h4fd0 core-prim . port-has-set-port-position!?) (h4fcf core-prim . port-has-port-position?) (h4fce core-prim . port-eof?) (h4fcd core-prim . output-port-buffer-mode) (h4fcc core-prim . open-string-output-port) (h4fcb core-prim . open-string-input-port) (h4fca core-prim . open-file-output-port) (h4fc9 core-prim . open-file-input/output-port) (h4fc8 core-prim . open-file-input-port) (h4fc7 core-prim . open-bytevector-output-port) (h4fc6 core-prim . open-bytevector-input-port) (h4fc5 core-prim . native-transcoder) (h4fc4 core-prim . native-eol-style) (h4fc3 core-prim . make-transcoder) (h4fc2 core-prim . latin-1-codec) (h4fc1 core-prim . make-i/o-write-error) (h4fc0 core-prim . make-i/o-read-error) (h4fbf core-prim . make-i/o-port-error) (h4fbe core-prim . make-i/o-invalid-position-error) (h4fbd core-prim . make-i/o-filename-error) (h4fbc core-prim . make-i/o-file-protection-error) (h4fbb core-prim . make-i/o-file-is-read-only-error) (h4fba core-prim . make-i/o-file-does-not-exist-error) (h4fb9 core-prim . make-i/o-file-already-exists-error) (h4fb8 core-prim . make-i/o-error) (h4fb7 core-prim . make-i/o-encoding-error) (h4fb6 core-prim . make-i/o-decoding-error) (h4fb5 core-prim . make-custom-textual-output-port) (h4fb4 core-prim . make-custom-textual-input/output-port) (h4fb3 core-prim . make-custom-textual-input-port) (h4fb2 core-prim . make-custom-binary-output-port) (h4fb1 core-prim . make-custom-binary-input/output-port) (h4fb0 core-prim . make-custom-binary-input-port) (h4faf core-prim . make-bytevector) (h4fae core-prim . lookahead-u8) (h4fad core-prim . lookahead-char) (h4fac core-prim . i/o-write-error?) (h4fab core-prim . i/o-read-error?) (h4faa core-prim . i/o-port-error?) (h4fa9 core-prim . i/o-invalid-position-error?) (h4fa8 core-prim . i/o-filename-error?) (h4fa7 core-prim . i/o-file-protection-error?) (h4fa6 core-prim . i/o-file-is-read-only-error?) (h4fa5 core-prim . i/o-file-does-not-exist-error?) (h4fa4 core-prim . i/o-file-already-exists-error?) (h4fa3 core-prim . i/o-error?) (h4fa2 core-prim . i/o-error-position) (h4fa1 core-prim . i/o-error-port) (h4fa0 core-prim . i/o-error-filename) (h4f9f core-prim . i/o-encoding-error?) (h4f9e core-prim . i/o-encoding-error-char) (h4f9d core-prim . i/o-decoding-error?) (h4f9c core-prim . get-u8) (h4f9b core-prim . get-string-n!) (h4f9a core-prim . get-string-n) (h4f99 core-prim . get-string-all) (h4f98 core-prim . get-line) (h4f97 core-prim . get-datum) (h4f96 core-prim . get-char) (h4f95 core-prim . get-bytevector-some) (h4f94 core-prim . get-bytevector-n!) (h4f93 core-prim . get-bytevector-n) (h4f92 core-prim . get-bytevector-all) (h4f91 core-prim . flush-output-port) (h4f90 core-prim . close-port) (h3177 core-prim . scheme-report-environment) (h4f8f core-prim . quotient) (h3175 core-prim . null-environment) (h4f8e core-prim . remainder) (h4f8d core-prim . modulo) (h4f8c core-prim . inexact->exact) (h4f8b core-prim . force) (h4f8a core-prim . exact->inexact) (h4f89 core-prim . make-promise) (h4f88 core-prim . exit) (h4c1e core-prim . command-line) (h4f87 core-prim . string-fill!) (h4f86 core-prim . string-set!) (h4f85 core-prim . set-cdr!) (h4f84 core-prim . set-car!) (h4f83 core-prim . remove) (h4f82 core-prim . remv) (h4f81 core-prim . remp) (h4f80 core-prim . remq) (h4f7f core-prim . partition) (h4f7e core-prim . memv) (h4f7d core-prim . memq) (h4f7c core-prim . memp) (h4f7b core-prim . member) (h4f7a core-prim . exists) (h4f79 core-prim . for-all) (h4f78 core-prim . fold-right) (h4f77 core-prim . fold-left) (h4f76 core-prim . find) (h4f75 core-prim . filter) (h4f74 core-prim . cons*) (h4f73 core-prim . assv) (h4f72 core-prim . assq) (h4f71 core-prim . assp) (h4f70 core-prim . assoc) (h4f6f core-prim . call-with-string-output-port) (h4f6e core-prim . call-with-port) (h4f6d core-prim . call-with-bytevector-output-port) (h4f6c core-prim . bytevector->string) (h4f6b core-prim . buffer-mode?) (h4f6a core-prim . binary-port?) (h4f69 core-prim . with-exception-handler) (h4f68 core-prim . raise-continuable) (h4f67 core-prim . raise) (h317b core-prim . eval) (h3173 core-prim . environment) (h4f66 core-prim . make-enumeration) (h4f65 core-prim . enum-set=?) (h4f64 core-prim . enum-set-universe) (h4f63 core-prim . enum-set-union) (h4f62 core-prim . enum-set-subset?) (h4f61 core-prim . enum-set-projection) (h4f60 core-prim . enum-set-member?) (h4f5f core-prim . enum-set-intersection) (h4f5e core-prim . enum-set-indexer) (h4f5d core-prim . enum-set-difference) (h4f5c core-prim . enum-set-constructor) (h4f5b core-prim . enum-set-complement) (h4f5a core-prim . enum-set->list) (h4f59 core-prim . who-condition?) (h4f58 core-prim . warning?) (h4f57 core-prim . violation?) (h4f56 core-prim . undefined-violation?) (h4f55 core-prim . syntax-violation?) (h4f54 core-prim . syntax-violation-subform) (h4f53 core-prim . syntax-violation-form) (h319b core-prim . syntax-violation) (h4f52 core-prim . simple-conditions) (h4f51 core-prim . serious-condition?) (h4f50 core-prim . non-continuable-violation?) (h4f4f core-prim . message-condition?) (h4f4e core-prim . make-who-condition) (h4f4d core-prim . make-warning) (h4f4c core-prim . make-violation) (h4f4b core-prim . make-undefined-violation) (h4f4a core-prim . make-syntax-violation) (h4f49 core-prim . make-serious-condition) (h4f48 core-prim . make-non-continuable-violation) (h4f47 core-prim . make-message-condition) (h4f46 core-prim . make-lexical-violation) (h4f45 core-prim . make-irritants-condition) (h4f44 core-prim . make-implementation-restriction-violation) (h4f43 core-prim . make-error) (h4f42 core-prim . make-assertion-violation) (h4f41 core-prim . lexical-violation?) (h4f40 core-prim . irritants-condition?) (h4f3f core-prim . implementation-restriction-violation?) (h4f3e core-prim . error?) (h4f3d core-prim . condition-who) (h4f3c core-prim . condition-predicate) (h4f3b core-prim . condition-message) (h4f3a core-prim . condition-irritants) (h4f39 core-prim . condition-accessor) (h4f38 core-prim . condition) (h4f37 core-prim . assertion-violation?) (h4f36 core-prim . condition?) (h4f35 core-prim . utf32->string) (h4f34 core-prim . utf16->string) (h4f33 core-prim . utf8->string) (h4f32 core-prim . uint-list->bytevector) (h4f31 core-prim . u8-list->bytevector) (h4f30 core-prim . string->utf8) (h4f2f core-prim . string->utf32) (h4f2e core-prim . string->utf16) (h4f2d core-prim . sint-list->bytevector) (h4f2c core-prim . native-endianness) (h4f2b core-prim . bytevector?) (h4f2a core-prim . bytevector=?) (h4f29 core-prim . bytevector-uint-set!) (h4f28 core-prim . bytevector-uint-ref) (h4f27 core-prim . bytevector-u8-set!) (h4f26 core-prim . bytevector-u8-ref) (h4f25 core-prim . bytevector-u64-set!) (h4f24 core-prim . bytevector-u64-ref) (h4f23 core-prim . bytevector-u64-native-set!) (h4f22 core-prim . bytevector-u64-native-ref) (h4f21 core-prim . bytevector-u32-set!) (h4f20 core-prim . bytevector-u32-ref) (h4f1f core-prim . bytevector-u32-native-set!) (h4f1e core-prim . bytevector-u32-native-ref) (h4f1d core-prim . bytevector-u16-set!) (h4f1c core-prim . bytevector-u16-ref) (h4f1b core-prim . bytevector-u16-native-set!) (h4f1a core-prim . bytevector-u16-native-ref) (h4f19 core-prim . bytevector-sint-set!) (h4f18 core-prim . bytevector-sint-ref) (h4f17 core-prim . bytevector-s8-set!) (h4f16 core-prim . bytevector-s8-ref) (h4f15 core-prim . bytevector-s64-set!) (h4f14 core-prim . bytevector-s64-ref) (h4f13 core-prim . bytevector-s64-native-set!) (h4f12 core-prim . bytevector-s64-native-ref) (h4f11 core-prim . bytevector-s32-set!) (h4f10 core-prim . bytevector-s32-ref) (h4f0f core-prim . bytevector-s32-native-set!) (h4f0e core-prim . bytevector-s32-native-ref) (h4f0d core-prim . bytevector-s16-set!) (h4f0c core-prim . bytevector-s16-ref) (h4f0b core-prim . bytevector-s16-native-set!) (h4f0a core-prim . bytevector-s16-native-ref) (h4f09 core-prim . bytevector-length) (h4f08 core-prim . bytevector-ieee-single-ref) (h4f07 core-prim . bytevector-ieee-single-set!) (h4f06 core-prim . bytevector-ieee-single-native-set!) (h4f05 core-prim . bytevector-ieee-single-native-ref) (h4f04 core-prim . bytevector-ieee-double-set!) (h4f03 core-prim . bytevector-ieee-double-ref) (h4f02 core-prim . bytevector-ieee-double-native-set!) (h4f01 core-prim . bytevector-ieee-double-native-ref) (h4f00 core-prim . bytevector-fill!) (h4eff core-prim . bytevector-copy!) (h4efe core-prim . bytevector-copy) (h4efd core-prim . bytevector->uint-list) (h4efc core-prim . bytevector->u8-list) (h4efb core-prim . bytevector->sint-list) (h4efa core-prim . no-nans-violation?) (h4ef9 core-prim . no-infinities-violation?) (h4ef8 core-prim . make-no-nans-violation) (h4ef7 core-prim . make-no-infinities-violation) (h4ef6 core-prim . real->flonum) (h4ef5 core-prim . flzero?) (h4ef4 core-prim . fltruncate) (h4ef3 core-prim . fltan) (h4ef2 core-prim . flsqrt) (h4ef1 core-prim . flsin) (h4ef0 core-prim . flround) (h4eef core-prim . flpositive?) (h4eee core-prim . flonum?) (h4eed core-prim . flodd?) (h4eec core-prim . flnumerator) (h4eeb core-prim . flnegative?) (h4eea core-prim . flnan?) (h4ee9 core-prim . flmod0) (h4ee8 core-prim . flmod) (h4ee7 core-prim . flmin) (h4ee6 core-prim . flmax) (h4ee5 core-prim . fllog) (h4ee4 core-prim . flinteger?) (h4ee3 core-prim . flinfinite?) (h4ee2 core-prim . flfloor) (h4ee1 core-prim . flfinite?) (h4ee0 core-prim . flexpt) (h4edf core-prim . flexp) (h4ede core-prim . fleven?) (h4edd core-prim . fldiv0-and-mod0) (h4edc core-prim . fldiv0) (h4edb core-prim . fldiv-and-mod) (h4eda core-prim . fldiv) (h4ed9 core-prim . fldenominator) (h4ed8 core-prim . flcos) (h4ed7 core-prim . flceiling) (h4ed6 core-prim . flatan) (h4ed5 core-prim . flasin) (h4ed4 core-prim . flacos) (h4ed3 core-prim . flabs) (h4ed2 core-prim . fl>?) (h4ed1 core-prim . fl>=?) (h4ed0 core-prim . fl=?) (h4ecf core-prim . fl<?) (h4ece core-prim . fl<=?) (h4ecd core-prim . fl/) (h4ecc core-prim . fl-) (h4ecb core-prim . fl+) (h4eca core-prim . fl*) (h4ec9 core-prim . fixnum->flonum) (h4ec8 core-prim . fxzero?) (h4ec7 core-prim . fxxor) (h4ec6 core-prim . fxrotate-bit-field) (h4ec5 core-prim . fxreverse-bit-field) (h4ec4 core-prim . fxpositive?) (h4ec3 core-prim . fxodd?) (h4ec2 core-prim . fxnot) (h4ec1 core-prim . fxnegative?) (h4ec0 core-prim . fxmod0) (h4ebf core-prim . fxmod) (h4ebe core-prim . fxmin) (h4ebd core-prim . fxmax) (h4ebc core-prim . fxlength) (h4ebb core-prim . fxior) (h4eba core-prim . fxif) (h4eb9 core-prim . fxfirst-bit-set) (h4eb8 core-prim . fxeven?) (h4eb7 core-prim . fxdiv0-and-mod0) (h4eb6 core-prim . fxdiv0) (h4eb5 core-prim . fxdiv-and-mod) (h4eb4 core-prim . fxdiv) (h4eb3 core-prim . fxcopy-bit-field) (h4eb2 core-prim . fxcopy-bit) (h4eb1 core-prim . fxbit-set?) (h4eb0 core-prim . fxbit-field) (h4eaf core-prim . fxbit-count) (h4eae core-prim . fxarithmetic-shift-right) (h4ead core-prim . fxarithmetic-shift-left) (h4eac core-prim . fxarithmetic-shift) (h4eab core-prim . fxand) (h4eaa core-prim . fx>?) (h4ea9 core-prim . fx>=?) (h4ea8 core-prim . fx=?) (h4ea7 core-prim . fx<?) (h4ea6 core-prim . fx<=?) (h4ea5 core-prim . fx-/carry) (h4ea4 core-prim . fx-) (h4ea3 core-prim . fx+/carry) (h4ea2 core-prim . fx+) (h4ea1 core-prim . fx*/carry) (h4ea0 core-prim . fx*) (h4e9f core-prim . greatest-fixnum) (h4e9e core-prim . least-fixnum) (h4e9d core-prim . fixnum-width) (h4e9c core-prim . fixnum?) (h4e9b core-prim . bitwise-rotate-bit-field) (h4e9a core-prim . bitwise-reverse-bit-field) (h4e99 core-prim . bitwise-length) (h4e98 core-prim . bitwise-if) (h4e97 core-prim . bitwise-first-bit-set) (h4e96 core-prim . bitwise-copy-bit-field) (h4e95 core-prim . bitwise-copy-bit) (h4e94 core-prim . bitwise-bit-set?) (h4e93 core-prim . bitwise-bit-field) (h4e92 core-prim . bitwise-bit-count) (h4e91 core-prim . bitwise-xor) (h4e90 core-prim . bitwise-ior) (h4e8f core-prim . bitwise-and) (h4e8e core-prim . bitwise-not) (h4e8d core-prim . bitwise-arithmetic-shift-right) (h4e8c core-prim . bitwise-arithmetic-shift-left) (h4e8b core-prim . bitwise-arithmetic-shift) (h4e8a core-prim . zero?) (h4e89 core-prim . vector?) (h4e88 core-prim . vector-set!) (h4e87 core-prim . vector-ref) (h4e86 core-prim . vector-map) (h4e85 core-prim . vector-length) (h4e84 core-prim . vector-for-each) (h4e83 core-prim . vector-fill!) (h4e82 core-prim . vector->list) (h4e81 core-prim . vector) (h4e80 core-prim . values) (h4e7f core-prim . truncate) (h4e7e core-prim . tan) (h4e7d core-prim . symbol?) (h4e7c core-prim . symbol=?) (h4e7b core-prim . symbol->string) (h4e7a core-prim . substring) (h4e79 core-prim . string?) (h4e78 core-prim . string>?) (h4e77 core-prim . string>=?) (h4e76 core-prim . string=?) (h4e75 core-prim . string<?) (h4e74 core-prim . string<=?) (h4e73 core-prim . string-ref) (h4e72 core-prim . string-length) (h4e71 core-prim . string-for-each) (h4e70 core-prim . string-copy) (h4e6f core-prim . string-append) (h4e6e core-prim . string->symbol) (h4e6d core-prim . string->number) (h4e6c core-prim . string->list) (h4e6b core-prim . string) (h4e6a core-prim . sqrt) (h4e69 core-prim . sin) (h4e68 core-prim . round) (h4e67 core-prim . reverse) (h4e66 core-prim . real?) (h4e65 core-prim . real-valued?) (h4e64 core-prim . real-part) (h4e63 core-prim . rationalize) (h4e62 core-prim . rational?) (h4e61 core-prim . rational-valued?) (h4e60 core-prim . procedure?) (h4e5f core-prim . positive?) (h4e5e core-prim . pair?) (h4e5d core-prim . odd?) (h4e5c core-prim . numerator) (h4e5b core-prim . number?) (h4e5a core-prim . number->string) (h4e59 core-prim . null?) (h4e58 core-prim . not) (h4e57 core-prim . negative?) (h4e56 core-prim . nan?) (h4e55 core-prim . min) (h4e54 core-prim . max) (h4e53 core-prim . map) (h4e52 core-prim . make-vector) (h4e51 core-prim . make-string) (h4e50 core-prim . make-rectangular) (h4e4f core-prim . make-polar) (h4e4e core-prim . magnitude) (h4e4d core-prim . log) (h4e4c core-prim . list?) (h4e4b core-prim . list-tail) (h4e4a core-prim . list-ref) (h4e49 core-prim . list->vector) (h4e48 core-prim . list->string) (h4e47 core-prim . list) (h4e46 core-prim . length) (h4e45 core-prim . lcm) (h4e44 core-prim . integer?) (h4e43 core-prim . integer-valued?) (h4e42 core-prim . integer->char) (h4e41 core-prim . infinite?) (h4e40 core-prim . inexact?) (h4e3f core-prim . inexact) (h4e3e core-prim . imag-part) (h4e3d core-prim . gcd) (h4e3c core-prim . for-each) (h4e3b core-prim . floor) (h4e3a core-prim . finite?) (h4e39 core-prim . expt) (h4e38 core-prim . exp) (h4e37 core-prim . exact?) (h4e36 core-prim . exact-integer-sqrt) (h4e35 core-prim . exact) (h4e34 core-prim . even?) (h4e33 core-prim . error) (h4e32 core-prim . eqv?) (h4e31 core-prim . equal?) (h4e30 core-prim . eq?) (h4e2f core-prim . dynamic-wind) (h4e2e core-prim . div0-and-mod0) (h4e2d core-prim . mod0) (h4e2c core-prim . div0) (h4e2b core-prim . div-and-mod) (h4e2a core-prim . mod) (h4e29 core-prim . div) (h4e28 core-prim . denominator) (h4e27 core-prim . cos) (h4e26 core-prim . cons) (h4e25 core-prim . complex?) (h4e24 core-prim . char?) (h4e23 core-prim . char>?) (h4e22 core-prim . char>=?) (h4e21 core-prim . char=?) (h4e20 core-prim . char<?) (h4e1f core-prim . char<=?) (h4e1e core-prim . char->integer) (h4e1d core-prim . ceiling) (h4e1c core-prim . call-with-values) (h4e1b core-prim . call/cc) (h4e1a core-prim . call-with-current-continuation) (h4e19 core-prim . cddddr) (h4e18 core-prim . cdddar) (h4e17 core-prim . cddadr) (h4e16 core-prim . cddaar) (h4e15 core-prim . cdaddr) (h4e14 core-prim . cdadar) (h4e13 core-prim . cdaadr) (h4e12 core-prim . cdaaar) (h4e11 core-prim . cadddr) (h4e10 core-prim . caddar) (h4e0f core-prim . cadadr) (h4e0e core-prim . cadaar) (h4e0d core-prim . caaddr) (h4e0c core-prim . caadar) (h4e0b core-prim . caaadr) (h4e0a core-prim . caaaar) (h4e09 core-prim . cdddr) (h4e08 core-prim . cddar) (h4e07 core-prim . cdadr) (h4e06 core-prim . cdaar) (h4e05 core-prim . caddr) (h4e04 core-prim . cadar) (h4e03 core-prim . caadr) (h4e02 core-prim . caaar) (h4e01 core-prim . cddr) (h4e00 core-prim . cdar) (h4dff core-prim . cadr) (h4dfe core-prim . caar) (h4dfd core-prim . cdr) (h4dfc core-prim . car) (h4dfb core-prim . boolean?) (h4dfa core-prim . boolean=?) (h4df9 core-prim . atan) (h4df8 core-prim . assertion-violation) (h3195 core-prim . assertion-error) (h4df7 core-prim . asin) (h4df6 core-prim . apply) (h4df5 core-prim . append) (h4df4 core-prim . angle) (h4df3 core-prim . acos) (h4df2 core-prim . abs) (h4df1 core-prim . /) (h4df0 core-prim . *) (h4def core-prim . -) (h4dee core-prim . +) (h4ded core-prim . >=) (h4dec core-prim . >) (h4deb core-prim . =) (h4dea core-prim . <=) (h4de9 core-prim . <) (h4de8 core-prim . library) (h4de7 $core-rtd &no-nans-rtd &no-nans-rcd) (h4de6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (h4de5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (h4de4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (h4de3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (h4de2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (h4de1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (h4de0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (h4ddf $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (h4dde $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (h4ddd $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (h4ddc $core-rtd &i/o-write-rtd &i/o-write-rcd) (h4ddb $core-rtd &i/o-read-rtd &i/o-read-rcd) (h4dda $core-rtd &i/o-rtd &i/o-rcd) (h4dd9 $core-rtd &undefined-rtd &undefined-rcd) (h4dd8 $core-rtd &syntax-rtd &syntax-rcd) (h4dd7 $core-rtd &lexical-rtd &lexical-rcd) (h4dd6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (h4dd5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (h4dd4 $core-rtd &who-rtd &who-rcd) (h4dd3 $core-rtd &irritants-rtd &irritants-rcd) (h4dd2 $core-rtd &assertion-rtd &assertion-rcd) (h4dd1 $core-rtd &violation-rtd &violation-rcd) (h4dd0 $core-rtd &error-rtd &error-rcd) (h4dcf $core-rtd &serious-rtd &serious-rcd) (h4dce $core-rtd &warning-rtd &warning-rcd) (h4dcd $core-rtd &message-rtd &message-rcd) (h4dcc $core-rtd &condition-rtd &condition-rcd) (h4dcb macro . define-condition-type) (h4dca macro . define-enumeration) (h4dc9 macro . define-record-type) (h4dc8 macro . parent-rtd) (h4dc7 macro . nongenerative) (h4dc6 macro . opaque) (h4dc5 macro . sealed) (h4dc4 macro . protocol) (h4dc3 macro . parent) (h4dc2 macro . immutable) (h4dc1 macro . mutable) (h4dc0 macro . fields) (h4dbf macro . error-handling-mode) (h4dbe macro . file-options) (h4dbd macro . buffer-mode) (h4dbc macro . eol-style) (h4dbb macro . guard) (h4dba macro . trace-define) (h4db9 macro . trace-lambda) (h4db8 macro . unsyntax-splicing) (h4db7 macro . unsyntax) (h4db6 macro . unquote-splicing) (h4db5 macro . unquote) (h4db4 macro . _) (h4db3 macro . else) (h4db2 macro . =>) (h4db1 macro . ...) (h4db0 macro . assert) (h4daf macro . endianness) (h4dae macro . delay) (h4dad macro . time) (h4dac macro . do) (h4dab macro . cond) (h4daa macro . let*) (h4da9 macro . let*-values) (h4da8 macro . let-values) (h4da7 macro . identifier-syntax) (h4da6 macro . with-syntax) (h4da5 macro . quasisyntax) (h4da4 macro . quasiquote) (h4da3 macro . syntax-rules) (h4da2 macro . include) (h4da1 macro . define-struct) (h4da0 core-macro . record-constructor-descriptor) (h4d9f core-macro . record-type-descriptor) (h4d9e macro . case) (h4d9d macro . parameterize) (h4d9c macro . unless) (h4d9b macro . when) (h4d9a core-macro . or) (h4d99 core-macro . and) (h4d98 core-macro . if) (h4d97 core-macro . let) (h4d96 core-macro . letrec*) (h4d95 core-macro . letrec) (h4d94 core-macro . type-descriptor) (h4d93 core-macro . case-lambda) (h4d92 core-macro . lambda) (h4d91 core-macro . syntax) (h4d90 core-macro . syntax-case) (h4d8f core-macro . quote) (h4d8e core-macro . foreign-call) (h4d8d letrec-syntax) (h4d8c let-syntax) (h4d8b set!) (h4d8a import) (h4d89 begin) (h4d88 module) (h4d87 define-syntax) (h4d86 define)) values values '#f '#f '#f '#f) (h2ccf@h2b1b@install-library 'h5146 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . h50ed) (eval-core . h50ec) (set-symbol-value! . h50eb) (symbol-value . h50ea) (gensym . h50e9) (void . h50e8)) '() values values '#f '#f '#f '#f) (h2ccf@h2b1b@install-library 'h5147 '(mosh) '() '() '() '() '((set-symbol-value! . h50eb) (symbol-value . h50ea) (regexp? . h50e6) (read-line . h50e5) (ungensym . h50e3) (alist->eq-hash-table . h50e2) (assoc-ref . h50e1) (print . h50e0) (format . h50df) (host-os . h50de) (library-path . h2afa) (standard-library-path . h50dd) (file-newer? . h50dc) (stat-mtime . h50db) (digit->integer . h50d7) (call-with-string-input-port . h50d6) (call-with-string-io . h50d5) (string-split . h50d4) (bytevector-for-each . h50d3) (string->regexp . h50d2) (rxmatch . h50d1) (regexp-replace-all . h50d0) (hashtable-for-each . h50cf) (set-current-directory! . h50ca) (expand-path . h50c9) (current-directory . h50c8) (p . h5089) (get-timeofday . h5070) (get-command-line . h506f) (sys-display . h506e) (whereis . h506d) (register . h506c) (vm-join! . h506b) (vm-set-value! . h506a) (vm? . h5069) (main-vm? . h5068) (vm-eval . h5067) (vm-self . h5066) (vm-start! . h5065) (make-vm . h5064) (mutex-try-lock! . h5063) (mutex-unlock! . h5062) (mutex-lock! . h5061) (mutex? . h5060) (make-mutex . h505f) (condition-variable-notify-all! . h505e) (condition-variable-notify! . h505d) (condition-variable-wait! . h505c) (make-condition-variable . h505b) (write/ss . h505a) (mosh-executable-path . h5059) (make-file-options . h5058) (source-info . h5057) (make-compiler-instruction . h5056) (make-instruction . h5055) (set-source-info! . h5054) (bignum? . h5053) (fast-equal? . h5052) (fasl-read . h5051) (fasl-write . h5050) (time-usage . h504f) (os-constant . h504e) (time . h4dad) (include . h4da2)) '() values values '#f '#f '#f '#f) (h2ccf@h2b1b@install-library 'h5148 '(system) '() '() '() '() '((gensym-prefix-set! . h50e4) (write-to-file . h50da) (file->list . h50d9) (file->string . h50d8) (mosh-cache-dir . h28e4) (call-process . h50ce) (local-tz-offset . h50cd) (microseconds . h50cc) (directory-list . h50cb) (expand-path . h50c9) (%spawn . h50c7) (%waitpid . h50c6) (simple-struct-name . h50c5) (simple-struct-set! . h50c4) (simple-struct-ref . h50c3) (make-simple-struct . h50c2) (simple-struct? . h50c1) (pointer-ref-c-int64 . h50c0) (pointer-ref-c-int32 . h50bf) (pointer-ref-c-int16 . h50be) (pointer-ref-c-int8 . h50bd) (pointer-ref-c-uint64 . h50bc) (pointer-ref-c-uint32 . h50bb) (pointer-ref-c-uint16 . h50ba) (pointer-ref-c-uint8 . h50b9) (pointer-set-c-uint64! . h50b8) (pointer-set-c-uint32! . h50b7) (pointer-set-c-uint16! . h50b6) (pointer-set-c-uint8! . h50b5) (pointer-set-c-int64! . h50b4) (pointer-set-c-int32! . h50b3) (pointer-set-c-int16! . h50b2) (pointer-set-c-int8! . h50b1) (pointer-set-c-pointer! . h50b0) (pointer-set-c-double! . h50af) (pointer-set-c-float! . h50ae) (pointer-set-c-long-long! . h50ad) (pointer-set-c-long! . h50ac) (pointer-set-c-int! . h50ab) (pointer-set-c-short! . h50aa) (pointer-set-c-char! . h50a9) (pointer-ref-c-pointer . h50a8) (pointer-ref-c-double . h50a7) (pointer-ref-c-float . h50a6) (pointer-ref-c-unsigned-long-long . h50a5) (pointer-ref-c-signed-long-long . h50a4) (pointer-ref-c-unsigned-long . h50a3) (pointer-ref-c-signed-long . h50a2) (pointer-ref-c-unsigned-int . h50a1) (pointer-ref-c-signed-int . h50a0) (pointer-ref-c-unsigned-short . h509f) (pointer-ref-c-signed-short . h509e) (pointer-ref-c-unsigned-char . h509d) (pointer-ref-c-signed-char . h509c) (pointer->integer . h509b) (integer->pointer . h509a) (pointer? . h5099) (shared-errno . h5098) (%ffi-free-c-callback-trampoline . h5097) (%ffi-make-c-callback-trampoline . h5096) (%ffi-free . h5095) (%ffi-malloc . h5094) (%ffi-supported? . h5093) (%ffi-pointer->string . h5092) (%ffi-call . h5091) (%ffi-lookup . h5090) (%ffi-open . h508f) (null-terminated-utf8->string . h508e) (null-terminated-bytevector->string . h508d) (%exec . h508c) (%fork . h508b) (%pipe . h508a) (open-output-string . h5088) (get-output-string . h5087) (file-stat-ctime . h5086) (file-stat-atime . h5085) (file-stat-mtime . h5084) (file-size-in-bytes . h5083) (file-writable? . h5082) (file-executable? . h5081) (file-readable? . h5080) (file-regular? . h507f) (file-symbolic-link? . h507e) (file-directory? . h507d) (create-symbolic-link . h507c) (rename-file . h507b) (delete-directory . h507a) (create-directory . h5079) (create-mosh-cache-dir . h5078) (get-environment-variables . h5077) (current-exception-handler . h5076) (get-environment-variable . h5075) (join-wraps . h5074) (id->real-label . h5073) (same-marks? . h5072) (same-marks*? . h5071) (disasm . h504d) (make-parameter . h28e2) (socket-port . h504c) (socket-shutdown . h504b) (socket-close . h504a) (socket-send . h5049) (socket-recv! . h5048) (socket-recv . h5047) (make-server-socket . h5046) (make-client-socket . h5045) (socket-accept . h5044) (socket? . h5043) (parameterize . h4d9d)) '() values values '#f '#f '#f '#f)))
(begin (set! h4c09@ref (unspecified)) (set! h4c0b@x* (unspecified)) (set! h4c0d@add-library-path! (unspecified)) (set! h4c0f@parse-and-add-library-path (unspecified)) (set! h4c11@for-each-with-index (unspecified)) (set! h4c13@rpad (unspecified)) (set! h4c15@condition-printer (unspecified)) (set! h4c17@record->field-alist (unspecified)) (set! h4c19@map-with-index (unspecified)) (set! h4c1b@repl (unspecified)) (set! h4c1d@trace-printer (unspecified)) (set! h4c1f@command-line (unspecified)) (set! h4c21@local-library-path (unspecified)) (set! h4c23@load/args (unspecified)) (set! h4c25@load (unspecified)) (set! h4c27@ironscheme-build (unspecified)) (set! h4c29@eval-top-level (unspecified)) (set! h4c2b@compile-system-libraries (unspecified)) (set! h4c2d@compile (unspecified)) (set! h4c2f@compile->closure (unspecified)) (set! h4c31@pre-compile-r6rs-file (unspecified)) (set! h4c33@load-r6rs-top-level (unspecified)) (set! h4c35@load-r6rs-top-level-sexp (unspecified)) (set! h4c37@prefix-inc (unspecified)) (set! h4c39@prefix-inc! (unspecified)) (set! h4c09@ref (lambda (h4c74@rtd h4c75@i h4c76@x) (let ((h4c7a@val ((record-accessor h4c74@rtd h4c75@i) h4c76@x))) (if (symbol? h4c7a@val) (ungensym h4c7a@val) h4c7a@val)))) (set! h4d6c@h4c09@ref h4c09@ref) (set! h4c0b@x* '()) (set! h4d6d@h4c0b@x* h4c0b@x*) (set! h4c0d@add-library-path! (lambda (h4c7c@path) (h2cbf@h2afb@library-path (append (h2cbf@h2afb@library-path) (list h4c7c@path))))) (set! h4d6e@h4c0d@add-library-path! h4c0d@add-library-path!) (set! h4c0f@parse-and-add-library-path (lambda (h4c7e@paths h4c7f@message) (letrec* ((h4c83@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((h4c84@t h4c7e@paths)) (if h4c84@t ((lambda (h4c86@paths) (for-each (lambda (h4c88@path) (if (file-exists? h4c88@path) (h4c0d@add-library-path! (expand-path h4c88@path)) (format (current-error-port) h4c7f@message h4c88@path))) (string-split h4c86@paths h4c83@separator))) h4c84@t) (void)))))) (set! h4d6f@h4c0f@parse-and-add-library-path h4c0f@parse-and-add-library-path) (set! h4c11@for-each-with-index (lambda (h4c8a@proc h4c8b@lst) (letrec ((h4c8e@loop (lambda (h4c90@i h4c91@lst) (if (null? h4c91@lst) (if '#f '#f (void)) (begin (h4c8a@proc h4c90@i (car h4c91@lst)) (h4c8e@loop (+ h4c90@i '1) (cdr h4c91@lst))))))) (h4c8e@loop '1 h4c8b@lst)))) (set! h4d70@h4c11@for-each-with-index h4c11@for-each-with-index) (set! h4c13@rpad (lambda (h4c94@str h4c95@pad h4c96@n) (let ((h4c9a@rest (- h4c96@n (string-length (format '"~w" h4c94@str))))) (let h4ca0@loop ((h4c9c@rest h4c9a@rest) (h4c9d@ret (format '"~w" h4c94@str))) (if (<= h4c9c@rest '0) h4c9d@ret (h4ca0@loop (- h4c9c@rest '1) (string-append h4c9d@ret h4c95@pad))))))) (set! h4d71@h4c13@rpad h4c13@rpad) (set! h4c15@condition-printer (lambda (h4ca2@e h4ca3@port) (letrec* ((h4ca7@max-condition-len (apply max (map (lambda (h4cb8@c) (string-length (symbol->string (record-type-name (record-rtd h4cb8@c))))) (simple-conditions h4ca2@e))))) (begin (display '" Condition components:\n" h4ca3@port) (h4c11@for-each-with-index (lambda (h4ca8@i h4ca9@x) (let ((h4cac@rtd (record-rtd h4ca9@x)) (h4cad@fields-alist (h4c17@record->field-alist h4ca9@x))) (begin (format h4ca3@port '" ~d. ~w" h4ca8@i (h4c13@rpad (symbol->string (record-type-name h4cac@rtd)) '" " h4ca7@max-condition-len)) (if (null? h4cad@fields-alist) (newline h4ca3@port) (void)) (let h4cb4@loop ((h4cb0@first '#t) (h4cb1@fields-alist h4cad@fields-alist)) (if (null? h4cb1@fields-alist) '() (let ((h4cb6@field (car h4cb1@fields-alist))) (begin (if (not h4cb0@first) (display (h4c13@rpad '"" '" " (+ '4 h4ca7@max-condition-len)) h4ca3@port) (void)) (display '"       " h4ca3@port) (display (car h4cb6@field) h4ca3@port) (display '": " h4ca3@port) (write (cdr h4cb6@field) h4ca3@port) (newline h4ca3@port) (h4cb4@loop '#f (cdr h4cb1@fields-alist))))))))) (simple-conditions h4ca2@e)))))) (set! h4d72@h4c15@condition-printer h4c15@condition-printer) (set! h4c17@record->field-alist (lambda (h4cba@r) (letrec* ((h4cbd@ref (lambda (h4cc8@rtd h4cc9@i h4cca@x) (let ((h4cce@val ((record-accessor h4cc8@rtd h4cc9@i) h4cca@x))) (if (symbol? h4cce@val) (ungensym h4cce@val) h4cce@val))))) (let h4cc2@loop ((h4cbe@ret '()) (h4cbf@rtd (record-rtd h4cba@r))) (if h4cbf@rtd (h4cc2@loop (append h4cbe@ret (h4c19@map-with-index (lambda (h4cc4@i h4cc5@field) (cons h4cc5@field (h4cbd@ref h4cbf@rtd h4cc4@i h4cba@r))) (vector->list (record-type-field-names h4cbf@rtd)))) (record-type-parent h4cbf@rtd)) h4cbe@ret))))) (set! h4d73@h4c17@record->field-alist h4c17@record->field-alist) (set! h4c19@map-with-index (lambda (h4cd0@proc h4cd1@lst) (let h4cda@loop ((h4cd4@i '0) (h4cd5@lst h4cd1@lst) (h4cd6@ret '())) (if (null? h4cd5@lst) (reverse h4cd6@ret) (h4cda@loop (+ h4cd4@i '1) (cdr h4cd5@lst) (cons (h4cd0@proc h4cd4@i (car h4cd5@lst)) h4cd6@ret)))))) (set! h4d74@h4c19@map-with-index h4c19@map-with-index) (set! h4c1b@repl (lambda h4cdc@x (letrec* ((h4cdf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (h4ce2@h4ce0) (lambda () (with-exception-handler (lambda (h4ce4@e) ((call/cc (lambda (h4ce6@h4ce1) (h4ce2@h4ce0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? h4ce4@e) (h4c15@condition-printer h4ce4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~w\n" h4ce4@e))) (h4ce6@h4ce1 (lambda () (raise-continuable h4ce4@e)))))))))) (lambda () (let h4cec@loop ((h4ce8@line (get-line (current-input-port))) (h4ce9@accum '"")) (letrec* ((h4cef@parentheses-ok? (lambda (h4cf6@text) (let h4cfe@loop ((h4cf8@chars (string->list h4cf6@text)) (h4cf9@p0 '0) (h4cfa@p1 '0)) (if (null? h4cf8@chars) (= '0 h4cf9@p0 h4cfa@p1) (let ((h4d00@t (car h4cf8@chars))) (if (memv h4d00@t '(#\()) (h4cfe@loop (cdr h4cf8@chars) (+ h4cf9@p0 '1) h4cfa@p1) (if (memv h4d00@t '(#\))) (h4cfe@loop (cdr h4cf8@chars) (- h4cf9@p0 '1) h4cfa@p1) (if (memv h4d00@t '(#\[)) (h4cfe@loop (cdr h4cf8@chars) h4cf9@p0 (+ h4cfa@p1 '1)) (if (memv h4d00@t '(#\])) (h4cfe@loop (cdr h4cf8@chars) h4cf9@p0 (- h4cfa@p1 '1)) (h4cfe@loop (cdr h4cf8@chars) h4cf9@p0 h4cfa@p1)))))))))) (h4cf1@eval-string-print (lambda (h4cf4@text) (if (not (or (string=? '"\n" h4cf4@text) (= '0 (string-length h4cf4@text)))) (write (h4c29@eval-top-level (call-with-port (open-string-input-port h4cf4@text) read))) (void))))) (if (eof-object? h4ce8@line) (begin (h4cf1@eval-string-print h4ce9@accum) (exit)) (let ((h4cf2@current (string-append h4ce9@accum h4ce8@line))) (if (h4cef@parentheses-ok? h4cf2@current) (h4cf1@eval-string-print h4cf2@current) (h4cec@loop (get-line (current-input-port)) h4cf2@current)))))))))))) (newline) (h4cdf@rec))))) (h4cdf@rec)))) (set! h4d75@h4c1b@repl h4c1b@repl) (set! h4c1d@trace-printer (h2a05@h28e3@make-parameter write)) (set! h4d76@h4c1d@trace-printer h4c1d@trace-printer) (set! h4c1f@command-line (h2a05@h28e3@make-parameter (get-command-line))) (set! h4d77@h4c1f@command-line h4c1f@command-line) (set! h4c21@local-library-path (lambda (h4d02@filename) (h2cbf@h2afb@library-path))) (set! h4d78@h4c21@local-library-path h4c21@local-library-path) (set! h4c23@load/args (lambda (h4d04@filename . h4d06@args) (begin (apply h4c33@load-r6rs-top-level h4d04@filename 'load h4d06@args) (void)))) (set! h4d79@h4c23@load/args h4c23@load/args) (set! h4c25@load (lambda (h4d08@filename) (begin (apply h4c33@load-r6rs-top-level h4d08@filename 'load (h4c1f@command-line)) (void)))) (set! h4d7a@h4c25@load h4c25@load) (set! h4c27@ironscheme-build (lambda () (h4c25@load '"ironscheme-buildscript.ss"))) (set! h4d7b@h4c27@ironscheme-build h4c27@ironscheme-build) (set! h4c29@eval-top-level (lambda (h4d0a@x) (h4be6@h317c@eval h4d0a@x (h4bfd@h31aa@interaction-environment)))) (set! h4d7c@h4c29@eval-top-level h4c29@eval-top-level) (set! h4c2b@compile-system-libraries (lambda () (h4c29@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! h4d7d@h4c2b@compile-system-libraries h4c2b@compile-system-libraries) (set! h4c2d@compile (lambda (h4d0c@filename) (h4c33@load-r6rs-top-level h4d0c@filename 'compile))) (set! h4d7e@h4c2d@compile h4c2d@compile) (set! h4c2f@compile->closure (lambda (h4d0e@filename) (h4c33@load-r6rs-top-level h4d0e@filename 'closure))) (set! h4d7f@h4c2f@compile->closure h4c2f@compile->closure) (set! h4c31@pre-compile-r6rs-file (lambda (h4d10@filename) (h4c33@load-r6rs-top-level h4d10@filename 'compile))) (set! h4d80@h4c31@pre-compile-r6rs-file h4c31@pre-compile-r6rs-file) (set! h4c33@load-r6rs-top-level (lambda (h4d12@filename h4d13@how . h4d16@args) (begin (h2cbf@h2afb@library-path (h4c21@local-library-path h4d12@filename)) (let ((h4d18@x* (with-input-from-file h4d12@filename (lambda () (let h4d1a@f () (let ((h4d1c@x (h29f7@h28c7@read-annotated))) (if (eof-object? h4d1c@x) '() (cons h4d1c@x (h4d1a@f))))))))) (let ((h4d1e@t h4d13@how)) (if (memv h4d1e@t '(closure)) (h4bfc@h31a8@pre-compile-r6rs-top-level h4d18@x*) (if (memv h4d1e@t '(load)) (begin (h4c1f@command-line (cons h4d12@filename (car h4d16@args))) (h2a06@h28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (h2a06@h28e5@mosh-cache-dir) (gensym-prefix-set! (h4c39@prefix-inc! (string-append (h2a06@h28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (h4d20@file) ((call/cc (lambda (h4d24@h4d22) (lambda () (with-exception-handler (lambda (h4d26@c) ((call/cc (lambda (h4d28@h4d23) (h4d24@h4d22 (lambda () (if '#t '#t (h4d28@h4d23 (lambda () (raise-continuable h4d26@c)))))))))) (lambda () (delete-file (string-append (h2a06@h28e5@mosh-cache-dir) '"/" h4d20@file))))))))) (directory-list (h2a06@h28e5@mosh-cache-dir))) (void)) (let ((h4d2a@compiled (h4bfb@h31a6@compile-r6rs-top-level h4d18@x*))) (begin (if (and (h2a06@h28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (h2cc3@h2b03@serialize-all h2a00@h28d9@serialize-library h2a5c@h2a15@compile-core-expr) (void)) (h4d2a@compiled)))) (if (memv h4d1e@t '(compile)) (begin (h4bfb@h31a6@compile-r6rs-top-level h4d18@x*) (h2cc3@h2b03@serialize-all h2a00@h28d9@serialize-library h2a5c@h2a15@compile-core-expr)) (if '#f '#f (void)))))))))) (set! h4d81@h4c33@load-r6rs-top-level h4c33@load-r6rs-top-level) (set! h4c35@load-r6rs-top-level-sexp (lambda (h4d2c@import-spec h4d2d@thunk) (let ((h4d38@h4d31 h2cbf@h2afb@library-path) (h4d39@h4d33 h2a06@h28e5@mosh-cache-dir) (h4d3a@h4d35 (h4c21@local-library-path '"")) (h4d3b@h4d37 (create-mosh-cache-dir))) (let ((h4d40@swap (lambda () (begin (let ((h4d42@t (h4d38@h4d31))) (begin (h4d38@h4d31 h4d3a@h4d35) (set! h4d3a@h4d35 h4d42@t))) (let ((h4d44@t (h4d39@h4d33))) (begin (h4d39@h4d33 h4d3b@h4d37) (set! h4d3b@h4d37 h4d44@t))))))) (dynamic-wind h4d40@swap (lambda () (begin (if (h2a06@h28e5@mosh-cache-dir) (gensym-prefix-set! (h4c39@prefix-inc! (string-append (h2a06@h28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((h4d4a@h4d47 h4c1f@command-line) (h4d4b@h4d49 '())) (let ((h4d4e@swap (lambda () (let ((h4d50@t (h4d4a@h4d47))) (begin (h4d4a@h4d47 h4d4b@h4d49) (set! h4d4b@h4d49 h4d50@t)))))) (dynamic-wind h4d4e@swap (lambda () ((h4bfb@h31a6@compile-r6rs-top-level (list (cons 'import h4d2c@import-spec) (list h4d2d@thunk))))) h4d4e@swap))))) h4d40@swap))))) (set! h4d82@h4c35@load-r6rs-top-level-sexp h4c35@load-r6rs-top-level-sexp) (set! h4c37@prefix-inc (lambda (h4d52@prefix-string) (let ((h4d54@prefix (symbol->string h4d52@prefix-string))) (let ((h4d56@len (string-length h4d54@prefix))) (let h4d5e@loop ((h4d58@i (- h4d56@len '1)) (h4d59@carry? '#t) (h4d5a@accum '())) (if (< h4d58@i '0) (string->symbol (list->string (if h4d59@carry? (cons '#\a h4d5a@accum) h4d5a@accum))) (if h4d59@carry? (let ((h4d60@next-integer (+ '1 (char->integer (string-ref h4d54@prefix h4d58@i))))) (if (= h4d60@next-integer '123) (h4d5e@loop (- h4d58@i '1) '#f (cons '#\A h4d5a@accum)) (if (= h4d60@next-integer '91) (h4d5e@loop (- h4d58@i '1) '#t (cons '#\a h4d5a@accum)) (h4d5e@loop (- h4d58@i '1) '#f (cons (integer->char h4d60@next-integer) h4d5a@accum))))) (h4d5e@loop (- h4d58@i '1) '#f (cons (string-ref h4d54@prefix h4d58@i) h4d5a@accum))))))))) (set! h4d83@h4c37@prefix-inc h4c37@prefix-inc) (set! h4c39@prefix-inc! (lambda (h4d62@file) (begin (if (not (file-exists? h4d62@file)) (call-with-output-file h4d62@file (lambda (h4d64@port) (write 'd h4d64@port))) (void)) (let ((h4d66@prefix (call-with-input-file h4d62@file read))) (if (main-vm?) (let ((h4d68@next-prefix (h4c37@prefix-inc h4d66@prefix))) (begin (call-with-port (open-file-output-port h4d62@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (h4d6a@port) (write h4d68@next-prefix h4d6a@port))) h4d66@prefix)) h4d66@prefix))))) (set! h4d84@h4c39@prefix-inc! h4c39@prefix-inc!) (begin (h2cc4@h2b05@current-precompiled-library-loader h2a01@h28db@load-serialized-library) (set-symbol-value! 'load h4c25@load) (set-symbol-value! 'pre-compile-r6rs-file h4c31@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs h4c29@eval-top-level) (set-symbol-value! 'int-env-syms h4bdd@h316a@interaction-environment-symbols) (set-symbol-value! 'expanded2core h2a5b@h2a13@expanded->core) (set-symbol-value! 'trace-printer h4c1d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (h4c3a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list h4c3a@c))))) (h4c0f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (h4c0f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (h4c0d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (h4c0d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (h4c0d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((h4c3c@prefix (lambda (h4c3e@ext h4c3f@ls) (append (map (lambda (h4c42@x) (string-append h4c3e@ext h4c42@x)) h4c3f@ls) h4c3f@ls)))) (h2cc0@h2afd@library-extensions (h4c3c@prefix '".mosh" (h2cc0@h2afd@library-extensions)))) (current-exception-handler (lambda (h4c44@c) (begin (if (condition? h4c44@c) (h4c15@condition-printer h4c44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~w\n" h4c44@c)) h4c44@c))) (if ((call/cc (lambda (h4c48@h4c46) (lambda () (with-exception-handler (lambda (h4c4a@c) ((call/cc (lambda (h4c4c@h4c47) (h4c48@h4c46 (lambda () (if '#t '#f (h4c4c@h4c47 (lambda () (raise-continuable h4c4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (h4c35@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (h4c1f@command-line)) (let ((h4c56@h4c4f h4c1f@command-line) (h4c57@h4c51 h2a06@h28e5@mosh-cache-dir) (h4c58@h4c53 '()) (h4c59@h4c55 (create-mosh-cache-dir))) (let ((h4c5e@swap (lambda () (begin (let ((h4c60@t (h4c56@h4c4f))) (begin (h4c56@h4c4f h4c58@h4c53) (set! h4c58@h4c53 h4c60@t))) (let ((h4c62@t (h4c57@h4c51))) (begin (h4c57@h4c51 h4c59@h4c55) (set! h4c59@h4c55 h4c62@t))))))) (dynamic-wind h4c5e@swap (lambda () (begin (if (h2a06@h28e5@mosh-cache-dir) (gensym-prefix-set! (h4c39@prefix-inc! (string-append (h2a06@h28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (h4c1b@repl))) h4c5e@swap))) (begin (h2cbf@h2afb@library-path (h4c21@local-library-path (car (h4c1f@command-line)))) (set! h4c0b@x* (with-input-from-file (car (h4c1f@command-line)) (lambda () (let h4c64@f () (let ((h4c66@x (h29f7@h28c7@read-annotated))) (if (eof-object? h4c66@x) '() (cons h4c66@x (h4c64@f)))))))) (h4c1f@command-line (cons (car (h4c1f@command-line)) (cdr (h4c1f@command-line)))) (h2a06@h28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (h2a06@h28e5@mosh-cache-dir) (gensym-prefix-set! (h4c39@prefix-inc! (string-append (h2a06@h28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (h4c68@file) ((call/cc (lambda (h4c6c@h4c6a) (lambda () (with-exception-handler (lambda (h4c6e@c) ((call/cc (lambda (h4c70@h4c6b) (h4c6c@h4c6a (lambda () (if '#t '#t (h4c70@h4c6b (lambda () (raise-continuable h4c6e@c)))))))))) (lambda () (delete-file (string-append (h2a06@h28e5@mosh-cache-dir) '"/" h4c68@file))))))))) (directory-list (h2a06@h28e5@mosh-cache-dir))) (void)) (let ((h4c72@compiled (h4bfb@h31a6@compile-r6rs-top-level h4c0b@x*))) (begin (if (and (h2a06@h28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (h2cc3@h2b03@serialize-all h2a00@h28d9@serialize-library h2a5c@h2a15@compile-core-expr) (void)) (h4c72@compiled))))))))
