;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bs588@library-file-path->cache-path (unspecified)) (set! bs58a@read-annotated (unspecified)) (set! bs58c@annotation-stripped (unspecified)) (set! bs58e@annotation? (unspecified)) (set! bs590@annotation-source (unspecified)) (set! bs592@annotation-expression (unspecified)) (set! bs594@scm->fasl (unspecified)) (set! bs596@fasl-save (unspecified)) (set! bs598@fasl-load (unspecified)) (set! bs59a@verbose? (unspecified)) (set! bs59c@serialize-library (unspecified)) (set! bs59e@load-serialized-library (unspecified)) (set! bs5a0@make-record-printer (unspecified)) (set! bs5a2@compile-core (unspecified)) (set! bs5a4@read-library-source-file (unspecified)) (set! bs5a6@make-parameter (unspecified)) (set! bs5a8@mosh-cache-dir (unspecified)) (set! bs63e@file-options-spec (unspecified)) (set! bs588@library-file-path->cache-path (lambda (bs63f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bs645@bs642 bs646@bs644) (let ((bs649@extract bs646@bs644) (bs64a@p bs645@bs642)) (letrec* ((bs64e@display-hex (lambda (bs657@n) (if (<= '0 bs657@n '9) (display bs657@n bs64a@p) (display (integer->char (+ (char->integer '#\a) (- bs657@n '10))) bs64a@p))))) (begin (let bs651@f ((bs64f@ls (string-split bs63f@x '#\/))) (if (not (null? bs64f@ls)) (begin (display '"_" bs64a@p) (for-each (lambda (bs653@c) (if (or (char<=? '#\a bs653@c '#\z) (char<=? '#\A bs653@c '#\Z) (char<=? '#\0 bs653@c '#\9) (memv bs653@c '(#\- #\. #\_ #\~))) (display bs653@c bs64a@p) (begin (display '"%" bs64a@p) (let ((bs655@n (char->integer bs653@c))) (begin (bs64e@display-hex (quotient bs655@n '16)) (bs64e@display-hex (remainder bs655@n '16))))))) (string->list (car bs64f@ls))) (bs651@f (cdr bs64f@ls))) (void))) (bs649@extract)))))))) (set! bs6b9@bs588@library-file-path->cache-path bs588@library-file-path->cache-path) (set! bs58a@read-annotated read) (set! bs6ba@bs58a@read-annotated bs58a@read-annotated) (set! bs58c@annotation-stripped (lambda (bs659@x) (bs592@annotation-expression bs659@x))) (set! bs6bb@bs58c@annotation-stripped bs58c@annotation-stripped) (set! bs58e@annotation? (lambda (bs65b@x) (source-info bs65b@x))) (set! bs6bc@bs58e@annotation? bs58e@annotation?) (set! bs590@annotation-source (lambda (bs65d@x) (source-info bs65d@x))) (set! bs6bd@bs590@annotation-source bs590@annotation-source) (set! bs592@annotation-expression (lambda (bs65f@x) (if (pair? bs65f@x) (cons (car bs65f@x) (cdr bs65f@x)) (if (procedure? bs65f@x) (set-source-info! bs65f@x '#f) bs65f@x)))) (set! bs6be@bs592@annotation-expression bs592@annotation-expression) (set! bs594@scm->fasl (lambda (bs661@filename) (string-append (bs5a8@mosh-cache-dir) '"/" (bs588@library-file-path->cache-path bs661@filename) '".mosh-fasl"))) (set! bs6bf@bs594@scm->fasl bs594@scm->fasl) (set! bs596@fasl-save (lambda (bs663@filename bs664@obj) (call-with-port (open-file-output-port bs663@filename) (lambda (bs667@port) ((symbol-value 'fasl-write!) bs664@obj bs667@port))))) (set! bs6c0@bs596@fasl-save bs596@fasl-save) (set! bs598@fasl-load (lambda (bs669@filename) (call-with-port (open-file-input-port bs669@filename) (symbol-value 'fasl-read!)))) (set! bs6c1@bs598@fasl-load bs598@fasl-load) (set! bs59a@verbose? (symbol-value '%verbose)) (set! bs6c2@bs59a@verbose? bs59a@verbose?) (set! bs59c@serialize-library (lambda (bs66b@filename bs66c@obj) (begin (if bs59a@verbose? (format (current-error-port) '"serialize-library ~a\n..." bs66b@filename) (void)) (let ((bs66f@expanded2core (symbol-value 'expanded2core))) (let ((bs671@compile (symbol-value 'compile-w/o-halt))) (let ((bs673@code bs66c@obj)) (let ((bs675@pivot (cddddr (cddddr bs673@code)))) (let ((bs677@visit (bs671@compile (bs66f@expanded2core (car bs675@pivot))))) (begin (set-car! bs675@pivot bs677@visit) (let ((bs679@pivot (cdr bs675@pivot))) (let ((bs67b@invoke (bs671@compile (bs66f@expanded2core (car bs679@pivot))))) (set-car! bs679@pivot bs67b@invoke))))))))) (let ((bs67d@fasl-file (bs594@scm->fasl bs66b@filename))) (begin (if (file-exists? bs67d@fasl-file) (delete-file bs67d@fasl-file) (void)) ((call/cc (lambda (bs681@bs67f) (lambda () (with-exception-handler (lambda (bs683@c) ((call/cc (lambda (bs685@bs680) (bs681@bs67f (lambda () (if '#t (begin (if bs59a@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" bs66b@filename) (void)) (if (file-exists? bs67d@fasl-file) (delete-file bs67d@fasl-file) (void)) '#f) (bs685@bs680 (lambda () (raise-continuable bs683@c)))))))))) (lambda () (bs596@fasl-save bs67d@fasl-file bs66c@obj)))))))))))) (set! bs6c3@bs59c@serialize-library bs59c@serialize-library) (set! bs59e@load-serialized-library (lambda (bs687@filename bs688@obj) (and (bs5a8@mosh-cache-dir) (let ((bs68b@fasl-file (bs594@scm->fasl bs687@filename))) (if (and (file-exists? bs68b@fasl-file) ((symbol-value 'file-newer?) bs68b@fasl-file bs687@filename)) (let ((bs68d@expanded2core (symbol-value 'expanded2core))) (let ((bs68f@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bs691@code (bs598@fasl-load bs68b@fasl-file))) (let ((bs693@pivot (cddddr (cddddr bs691@code)))) (let ((bs695@visit (car bs693@pivot))) (let ((bs697@visit-proc (lambda () (bs68f@eval-compiled-core bs695@visit)))) (begin (set-car! bs693@pivot bs697@visit-proc) (let ((bs699@pivot (cdr bs693@pivot))) (let ((bs69b@invoke (car bs699@pivot))) (begin (set-car! bs699@pivot (lambda () (bs68f@eval-compiled-core bs69b@invoke))) (apply bs688@obj bs691@code))))))))))) '#f))))) (set! bs6c4@bs59e@load-serialized-library bs59e@load-serialized-library) (set! bs5a0@make-record-printer (lambda (bs69d@name bs69e@printer) (lambda bs6a1@x (begin (display '"record printer") (for-each display bs6a1@x))))) (set! bs6c5@bs5a0@make-record-printer bs5a0@make-record-printer) (set! bs5a2@compile-core (lambda bs6a3@x (apply error 'comile-core '"not implementated" bs6a3@x))) (set! bs6c6@bs5a2@compile-core bs5a2@compile-core) (set! bs5a4@read-library-source-file (lambda (bs6a5@file-name) (with-input-from-file bs6a5@file-name bs58a@read-annotated))) (set! bs6c7@bs5a4@read-library-source-file bs5a4@read-library-source-file) (set! bs5a6@make-parameter (lambda bs6b5 (let ((bs6b6 (length bs6b5))) (if (= bs6b6 '1) (apply (lambda (bs6a7@x) (bs5a6@make-parameter bs6a7@x (lambda (bs6a9@x) bs6a9@x))) bs6b5) (if (= bs6b6 '2) (apply (lambda (bs6ab@x bs6ac@fender) (let ((bs6af@x (bs6ac@fender bs6ab@x))) (lambda bs6b3 (let ((bs6b4 (length bs6b3))) (if (= bs6b4 '0) (apply (lambda () bs6af@x) bs6b3) (if (= bs6b4 '1) (apply (lambda (bs6b1@v) (set! bs6af@x (bs6ac@fender bs6b1@v))) bs6b3) (error 'apply '"invalid arg count"))))))) bs6b5) (error 'apply '"invalid arg count")))))) (set! bs6c8@bs5a6@make-parameter bs5a6@make-parameter) (set! bs5a8@mosh-cache-dir (bs5a6@make-parameter '#f)) (set! bs6c9@bs5a8@mosh-cache-dir bs5a8@mosh-cache-dir) (set! bs63e@file-options-spec (lambda (bs6b7@x) bs6b7@x)) (set! bs6ca@bs63e@file-options-spec bs63e@file-options-spec) (void))
(begin (set! bs6d0@current-primitive-locations (unspecified)) (set! bs6d2@mutable? (unspecified)) (set! bs6d4@rewriter (unspecified)) (set! bs6d6@expanded->core (unspecified)) (set! bs6d8@compile-core-expr (unspecified)) (set! bs6da@pretty-print (unspecified)) (set! bs6dc@compile-core-expr-to-port (unspecified)) (set! bs6d0@current-primitive-locations (bs6c8@bs5a6@make-parameter (lambda (bs6dd@x) '#f) (lambda (bs6df@p) bs6df@p))) (set! bs71b@bs6d0@current-primitive-locations bs6d0@current-primitive-locations) (set! bs6d2@mutable? (lambda (bs6e1@x) (or (pair? bs6e1@x) (vector? bs6e1@x) (hashtable? bs6e1@x)))) (set! bs71c@bs6d2@mutable? bs6d2@mutable?) (set! bs6d4@rewriter (lambda (bs6e3@quote-hack?) (letrec* ((bs6e6@f (lambda (bs6e7@x) (if (pair? bs6e7@x) (let ((bs6e9@t (car bs6e7@x))) (if (memv bs6e9@t '(quote)) (if (and bs6e3@quote-hack? (bs6d2@mutable? (cadr bs6e7@x))) (let ((bs6eb@g (gensym))) (begin (set-symbol-value! bs6eb@g (cadr bs6e7@x)) bs6eb@g)) bs6e7@x) (if (memv bs6e9@t '(case-lambda)) (cons 'case-lambda (map (lambda (bs6ed@x) (cons (car bs6ed@x) (map bs6e6@f (cdr bs6ed@x)))) (cdr bs6e7@x))) (if (memv bs6e9@t '(lambda)) (cons* 'lambda (cadr bs6e7@x) (map bs6e6@f (cddr bs6e7@x))) (if (memv bs6e9@t '(letrec)) (let ((bs6ef@bindings (cadr bs6e7@x)) (bs6f0@body* (cddr bs6e7@x))) (let ((bs6f3@lhs* (map car bs6ef@bindings)) (bs6f4@rhs* (map cadr bs6ef@bindings))) (cons* 'letrec (map list bs6f3@lhs* (map bs6e6@f bs6f4@rhs*)) (map bs6e6@f bs6f0@body*)))) (if (memv bs6e9@t '(letrec*)) (let ((bs6f7@bindings (cadr bs6e7@x)) (bs6f8@body* (cddr bs6e7@x))) (let ((bs6fb@lhs* (map car bs6f7@bindings)) (bs6fc@rhs* (map cadr bs6f7@bindings))) (cons* 'letrec* (map list bs6fb@lhs* (map bs6e6@f bs6fc@rhs*)) (map bs6e6@f bs6f8@body*)))) (if (memv bs6e9@t '(library-letrec*)) (let ((bs6ff@name (cadr bs6e7@x)) (bs700@x (cdr bs6e7@x))) (let ((bs703@bindings (cadr bs700@x)) (bs704@body* (cddr bs700@x))) (let ((bs707@lhs* (map car bs703@bindings)) (bs708@lhs** (map cadr bs703@bindings)) (bs709@rhs* (map caddr bs703@bindings))) (cons* 'library-letrec* bs6ff@name (map list bs707@lhs* bs708@lhs** (map bs6e6@f bs709@rhs*)) (map bs6e6@f bs704@body*))))) (if (memv bs6e9@t '(begin)) (cons 'begin (map bs6e6@f (cdr bs6e7@x))) (if (memv bs6e9@t '(set!)) (list 'set! (cadr bs6e7@x) (bs6e6@f (caddr bs6e7@x))) (if (memv bs6e9@t '(primitive)) (let ((bs70d@op (cadr bs6e7@x))) (let ((bs70f@t ((bs6d0@current-primitive-locations) bs70d@op))) (if bs70f@t ((lambda (bs711@loc) bs711@loc) bs70f@t) bs70d@op))) (if (memv bs6e9@t '(define)) bs6e7@x (if (list? bs6e7@x) (map bs6e6@f bs6e7@x) (error 'rewrite '"invalid form ~s ~s" bs6e7@x (list? bs6e7@x)))))))))))))) bs6e7@x)))) bs6e6@f))) (set! bs71d@bs6d4@rewriter bs6d4@rewriter) (set! bs6d6@expanded->core (lambda (bs713@x) ((bs6d4@rewriter '#f) bs713@x))) (set! bs71e@bs6d6@expanded->core bs6d6@expanded->core) (set! bs6d8@compile-core-expr (lambda (bs715@x) ((bs6d4@rewriter '#f) bs715@x))) (set! bs71f@bs6d8@compile-core-expr bs6d8@compile-core-expr) (set! bs6da@pretty-print write) (set! bs720@bs6da@pretty-print bs6da@pretty-print) (set! bs6dc@compile-core-expr-to-port (lambda (bs717@x bs718@p) (bs6da@pretty-print ((bs6d4@rewriter '#f) bs717@x) bs718@p))) (set! bs721@bs6dc@compile-core-expr-to-port bs6dc@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bs770@make-collection (unspecified)) (set! bs772@current-library-collection (unspecified)) (set! bs774@rp (unspecified)) (set! bs77e@library? (unspecified)) (set! bs780@library-id (unspecified)) (set! bs782@set-library-id! (unspecified)) (set! bs784@library-name (unspecified)) (set! bs786@set-library-name! (unspecified)) (set! bs788@library-version (unspecified)) (set! bs78a@set-library-version! (unspecified)) (set! bs78c@library-imp* (unspecified)) (set! bs78e@set-library-imp*! (unspecified)) (set! bs790@library-vis* (unspecified)) (set! bs792@set-library-vis*! (unspecified)) (set! bs794@library-inv* (unspecified)) (set! bs796@set-library-inv*! (unspecified)) (set! bs798@library-subst (unspecified)) (set! bs79a@set-library-subst! (unspecified)) (set! bs79c@library-env (unspecified)) (set! bs79e@set-library-env! (unspecified)) (set! bs7a0@library-visit-state (unspecified)) (set! bs7a2@set-library-visit-state! (unspecified)) (set! bs7a4@library-invoke-state (unspecified)) (set! bs7a6@set-library-invoke-state! (unspecified)) (set! bs7a8@library-visit-code (unspecified)) (set! bs7aa@set-library-visit-code! (unspecified)) (set! bs7ac@library-invoke-code (unspecified)) (set! bs7ae@set-library-invoke-code! (unspecified)) (set! bs7b0@library-visible? (unspecified)) (set! bs7b2@set-library-visible?! (unspecified)) (set! bs7b4@library-source-file-name (unspecified)) (set! bs7b6@set-library-source-file-name! (unspecified)) (set! bs7b8@dummy (unspecified)) (set! bs7ba@find-dependencies (unspecified)) (set! bs7bc@find-library-by (unspecified)) (set! bs7be@library-path (unspecified)) (set! bs7c0@library-extensions (unspecified)) (set! bs7c2@library-name->file-name (unspecified)) (set! bs7c4@file-locator (unspecified)) (set! bs7c6@serialize-all (unspecified)) (set! bs7c8@current-precompiled-library-loader (unspecified)) (set! bs7ca@try-load-from-file (unspecified)) (set! bs7cc@library-loader (unspecified)) (set! bs7ce@current-library-expander (unspecified)) (set! bs7d0@external-pending-libraries (unspecified)) (set! bs7d2@find-external-library (unspecified)) (set! bs7d4@find-library-by-name (unspecified)) (set! bs7d6@library-exists? (unspecified)) (set! bs7d8@find-library-by-spec/die (unspecified)) (set! bs7da@label->binding-table (unspecified)) (set! bs7dc@install-library-record (unspecified)) (set! bs7de@install-library (unspecified)) (set! bs7e0@imported-label->binding (unspecified)) (set! bs7e2@invoke-library (unspecified)) (set! bs7e4@visit-library (unspecified)) (set! bs7e6@invoke-library-by-spec (unspecified)) (set! bs7e8@installed-libraries (unspecified)) (set! bs7ea@library-spec (unspecified)) (set! bs770@make-collection (lambda () (let ((bs7eb@set '())) (letrec* ((bs7ee@set-cons (lambda (bs7f3@x bs7f4@ls) (if (memq bs7f3@x bs7f4@ls) bs7f4@ls (cons bs7f3@x bs7f4@ls))))) (lambda bs7f1 (let ((bs7f2 (length bs7f1))) (if (= bs7f2 '0) (apply (lambda () bs7eb@set) bs7f1) (if (= bs7f2 '1) (apply (lambda (bs7ef@x) (set! bs7eb@set (bs7ee@set-cons bs7ef@x bs7eb@set))) bs7f1) (error 'apply '"invalid arg count"))))))))) (set! bs95f@bs770@make-collection bs770@make-collection) (set! bs772@current-library-collection (bs6c8@bs5a6@make-parameter (bs770@make-collection) (lambda (bs7f7@x) (begin (if (not (procedure? bs7f7@x)) (assertion-violation 'current-library-collection '"not a procedure" bs7f7@x) (void)) bs7f7@x)))) (set! bs960@bs772@current-library-collection bs772@current-library-collection) (set! bs774@rp (bs6c5@bs5a0@make-record-printer 'library (lambda (bs7f9@x bs7fa@p bs7fb@wr) (begin (if (not (bs77e@library? bs7f9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bs788@library-version bs7f9@x)) (bs784@library-name bs7f9@x) (append (bs784@library-name bs7f9@x) (list (bs788@library-version bs7f9@x))))) bs7fa@p))))) (set! bs961@bs774@rp bs774@rp) (set! bs77e@library? (lambda (bs7ff@x) (and (simple-struct? bs7ff@x) (eq? (simple-struct-name bs7ff@x) 'library)))) (set! bs962@bs77e@library? bs77e@library?) (set! bs780@library-id (lambda (bs801@x) (simple-struct-ref bs801@x '0))) (set! bs963@bs780@library-id bs780@library-id) (set! bs782@set-library-id! (lambda (bs803@x bs804@val) (simple-struct-set! bs803@x '0 bs804@val))) (set! bs964@bs782@set-library-id! bs782@set-library-id!) (set! bs784@library-name (lambda (bs807@x) (simple-struct-ref bs807@x '1))) (set! bs965@bs784@library-name bs784@library-name) (set! bs786@set-library-name! (lambda (bs809@x bs80a@val) (simple-struct-set! bs809@x '1 bs80a@val))) (set! bs966@bs786@set-library-name! bs786@set-library-name!) (set! bs788@library-version (lambda (bs80d@x) (simple-struct-ref bs80d@x '2))) (set! bs967@bs788@library-version bs788@library-version) (set! bs78a@set-library-version! (lambda (bs80f@x bs810@val) (simple-struct-set! bs80f@x '2 bs810@val))) (set! bs968@bs78a@set-library-version! bs78a@set-library-version!) (set! bs78c@library-imp* (lambda (bs813@x) (simple-struct-ref bs813@x '3))) (set! bs969@bs78c@library-imp* bs78c@library-imp*) (set! bs78e@set-library-imp*! (lambda (bs815@x bs816@val) (simple-struct-set! bs815@x '3 bs816@val))) (set! bs96a@bs78e@set-library-imp*! bs78e@set-library-imp*!) (set! bs790@library-vis* (lambda (bs819@x) (simple-struct-ref bs819@x '4))) (set! bs96b@bs790@library-vis* bs790@library-vis*) (set! bs792@set-library-vis*! (lambda (bs81b@x bs81c@val) (simple-struct-set! bs81b@x '4 bs81c@val))) (set! bs96c@bs792@set-library-vis*! bs792@set-library-vis*!) (set! bs794@library-inv* (lambda (bs81f@x) (simple-struct-ref bs81f@x '5))) (set! bs96d@bs794@library-inv* bs794@library-inv*) (set! bs796@set-library-inv*! (lambda (bs821@x bs822@val) (simple-struct-set! bs821@x '5 bs822@val))) (set! bs96e@bs796@set-library-inv*! bs796@set-library-inv*!) (set! bs798@library-subst (lambda (bs825@x) (simple-struct-ref bs825@x '6))) (set! bs96f@bs798@library-subst bs798@library-subst) (set! bs79a@set-library-subst! (lambda (bs827@x bs828@val) (simple-struct-set! bs827@x '6 bs828@val))) (set! bs970@bs79a@set-library-subst! bs79a@set-library-subst!) (set! bs79c@library-env (lambda (bs82b@x) (simple-struct-ref bs82b@x '7))) (set! bs971@bs79c@library-env bs79c@library-env) (set! bs79e@set-library-env! (lambda (bs82d@x bs82e@val) (simple-struct-set! bs82d@x '7 bs82e@val))) (set! bs972@bs79e@set-library-env! bs79e@set-library-env!) (set! bs7a0@library-visit-state (lambda (bs831@x) (simple-struct-ref bs831@x '8))) (set! bs973@bs7a0@library-visit-state bs7a0@library-visit-state) (set! bs7a2@set-library-visit-state! (lambda (bs833@x bs834@val) (simple-struct-set! bs833@x '8 bs834@val))) (set! bs974@bs7a2@set-library-visit-state! bs7a2@set-library-visit-state!) (set! bs7a4@library-invoke-state (lambda (bs837@x) (simple-struct-ref bs837@x '9))) (set! bs975@bs7a4@library-invoke-state bs7a4@library-invoke-state) (set! bs7a6@set-library-invoke-state! (lambda (bs839@x bs83a@val) (simple-struct-set! bs839@x '9 bs83a@val))) (set! bs976@bs7a6@set-library-invoke-state! bs7a6@set-library-invoke-state!) (set! bs7a8@library-visit-code (lambda (bs83d@x) (simple-struct-ref bs83d@x '10))) (set! bs977@bs7a8@library-visit-code bs7a8@library-visit-code) (set! bs7aa@set-library-visit-code! (lambda (bs83f@x bs840@val) (simple-struct-set! bs83f@x '10 bs840@val))) (set! bs978@bs7aa@set-library-visit-code! bs7aa@set-library-visit-code!) (set! bs7ac@library-invoke-code (lambda (bs843@x) (simple-struct-ref bs843@x '11))) (set! bs979@bs7ac@library-invoke-code bs7ac@library-invoke-code) (set! bs7ae@set-library-invoke-code! (lambda (bs845@x bs846@val) (simple-struct-set! bs845@x '11 bs846@val))) (set! bs97a@bs7ae@set-library-invoke-code! bs7ae@set-library-invoke-code!) (set! bs7b0@library-visible? (lambda (bs849@x) (simple-struct-ref bs849@x '12))) (set! bs97b@bs7b0@library-visible? bs7b0@library-visible?) (set! bs7b2@set-library-visible?! (lambda (bs84b@x bs84c@val) (simple-struct-set! bs84b@x '12 bs84c@val))) (set! bs97c@bs7b2@set-library-visible?! bs7b2@set-library-visible?!) (set! bs7b4@library-source-file-name (lambda (bs84f@x) (simple-struct-ref bs84f@x '13))) (set! bs97d@bs7b4@library-source-file-name bs7b4@library-source-file-name) (set! bs7b6@set-library-source-file-name! (lambda (bs851@x bs852@val) (simple-struct-set! bs851@x '13 bs852@val))) (set! bs97e@bs7b6@set-library-source-file-name! bs7b6@set-library-source-file-name!) (set! bs7b8@dummy '3) (set! bs97f@bs7b8@dummy bs7b8@dummy) (set! bs7ba@find-dependencies (lambda (bs855@ls) (if (null? bs855@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bs980@bs7ba@find-dependencies bs7ba@find-dependencies) (set! bs7bc@find-library-by (lambda (bs857@pred) (let bs85b@f ((bs859@ls ((bs772@current-library-collection)))) (if (null? bs859@ls) '#f (if (bs857@pred (car bs859@ls)) (car bs859@ls) (bs85b@f (cdr bs859@ls))))))) (set! bs981@bs7bc@find-library-by bs7bc@find-library-by) (set! bs7be@library-path (bs6c8@bs5a6@make-parameter '(".") (lambda (bs85d@x) (if (and (list? bs85d@x) (for-all string? bs85d@x)) (map (lambda (bs85f@x) bs85f@x) bs85d@x) (assertion-violation 'library-path '"not a list of strings" bs85d@x))))) (set! bs982@bs7be@library-path bs7be@library-path) (set! bs7c0@library-extensions (bs6c8@bs5a6@make-parameter '(".sls" ".ss" ".scm") (lambda (bs861@x) (if (and (list? bs861@x) (for-all string? bs861@x)) (map (lambda (bs863@x) bs863@x) bs861@x) (assertion-violation 'library-extensions '"not a list of strings" bs861@x))))) (set! bs983@bs7c0@library-extensions bs7c0@library-extensions) (set! bs7c2@library-name->file-name (lambda (bs865@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bs86b@bs868 bs86c@bs86a) (let ((bs86f@extract bs86c@bs86a) (bs870@p bs86b@bs868)) (letrec* ((bs874@display-hex (lambda (bs87d@n) (if (<= '0 bs87d@n '9) (display bs87d@n bs870@p) (display (integer->char (+ (char->integer '#\a) (- bs87d@n '10))) bs870@p))))) (begin (let bs877@f ((bs875@ls bs865@x)) (if (not (null? bs875@ls)) (begin (display '"/" bs870@p) (for-each (lambda (bs879@c) (if (or (char<=? '#\a bs879@c '#\z) (char<=? '#\A bs879@c '#\Z) (char<=? '#\0 bs879@c '#\9) (memv bs879@c '(#\- #\. #\_ #\~))) (display bs879@c bs870@p) (begin (display '"%" bs870@p) (let ((bs87b@n (char->integer bs879@c))) (begin (bs874@display-hex (quotient bs87b@n '16)) (bs874@display-hex (remainder bs87b@n '16))))))) (string->list (symbol->string (car bs875@ls)))) (bs877@f (cdr bs875@ls))) (void))) (bs86f@extract)))))))) (set! bs984@bs7c2@library-name->file-name bs7c2@library-name->file-name) (set! bs7c4@file-locator (bs6c8@bs5a6@make-parameter (lambda (bs87f@x) (let ((bs881@str (bs7c2@library-name->file-name bs87f@x))) (let bs889@f ((bs883@ls (bs7be@library-path)) (bs884@exts (bs7c0@library-extensions)) (bs885@failed-list '())) (if (null? bs883@ls) (letrec* ((bs893@bs88e (make-record-type-descriptor '&library-resolution &condition-rtd 'bs891 '#f '#f '#((immutable library) (immutable files)))) (bs895@bs890 '#f) (bs897@bs88f (make-record-constructor-descriptor bs893@bs88e &condition-rcd bs895@bs890)) (bs89a@bs88d (record-predicate bs893@bs88e)) (bs89c@make-library-resolution-condition (record-constructor bs897@bs88f)) (bs89e@bs88b (record-accessor bs893@bs88e '0)) (bs8a0@bs88c (record-accessor bs893@bs88e '1)) (bs8a2@library-resolution-condition? (condition-predicate bs893@bs88e)) (bs8a4@condition-library (condition-accessor bs893@bs88e bs89e@bs88b)) (bs8a6@condition-files (condition-accessor bs893@bs88e bs8a0@bs88c))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (bs89c@make-library-resolution-condition bs87f@x (reverse bs885@failed-list))))) (if (null? bs884@exts) (bs889@f (cdr bs883@ls) (bs7c0@library-extensions) bs885@failed-list) (let ((bs8a7@name (string-append (car bs883@ls) bs881@str (car bs884@exts)))) (if (file-exists? bs8a7@name) bs8a7@name (bs889@f bs883@ls (cdr bs884@exts) (cons bs8a7@name bs885@failed-list))))))))) (lambda (bs8a9@f) (if (procedure? bs8a9@f) bs8a9@f (assertion-violation 'file-locator '"not a procedure" bs8a9@f))))) (set! bs985@bs7c4@file-locator bs7c4@file-locator) (set! bs7c6@serialize-all (lambda (bs8ab@serialize bs8ac@compile) (letrec* ((bs8b0@library-desc (lambda (bs8b3@x) (list (bs780@library-id bs8b3@x) (bs784@library-name bs8b3@x))))) (for-each (lambda (bs8b1@x) (if (bs7b4@library-source-file-name bs8b1@x) (bs8ab@serialize (bs7b4@library-source-file-name bs8b1@x) (list (bs780@library-id bs8b1@x) (bs784@library-name bs8b1@x) (bs788@library-version bs8b1@x) (map bs8b0@library-desc (bs78c@library-imp* bs8b1@x)) (map bs8b0@library-desc (bs790@library-vis* bs8b1@x)) (map bs8b0@library-desc (bs794@library-inv* bs8b1@x)) (bs798@library-subst bs8b1@x) (bs79c@library-env bs8b1@x) (bs8ac@compile (bs7a8@library-visit-code bs8b1@x)) (bs8ac@compile (bs7ac@library-invoke-code bs8b1@x)) (bs7b0@library-visible? bs8b1@x))) (void))) ((bs772@current-library-collection)))))) (set! bs986@bs7c6@serialize-all bs7c6@serialize-all) (set! bs7c8@current-precompiled-library-loader (bs6c8@bs5a6@make-parameter (lambda (bs8b5@filename bs8b6@sk) '#f))) (set! bs987@bs7c8@current-precompiled-library-loader bs7c8@current-precompiled-library-loader) (set! bs7ca@try-load-from-file (lambda (bs8b9@filename) ((bs7c8@current-precompiled-library-loader) bs8b9@filename (lambda bs8df (let ((bs8e0 (length bs8df))) (if (= bs8e0 '11) (apply (lambda (bs8bb@id bs8bc@name bs8bd@ver bs8be@imp* bs8bf@vis* bs8c0@inv* bs8c1@exp-subst bs8c2@exp-env bs8c3@visit-proc bs8c4@invoke-proc bs8c5@visible?) (let bs8d3@f ((bs8d1@deps (append bs8be@imp* bs8bf@vis* bs8c0@inv*))) (if (null? bs8d1@deps) (begin (bs7de@install-library bs8bb@id bs8bc@name bs8bd@ver bs8be@imp* bs8bf@vis* bs8c0@inv* bs8c1@exp-subst bs8c2@exp-env bs8c3@visit-proc bs8c4@invoke-proc '#f '#f bs8c5@visible? '#f) '#t) (let ((bs8d5@d (car bs8d1@deps))) (let ((bs8d7@label (car bs8d5@d)) (bs8d8@dname (cadr bs8d5@d))) (let ((bs8db@l (bs7d4@find-library-by-name bs8d8@dname))) (if (and (bs77e@library? bs8db@l) (eq? bs8d7@label (bs780@library-id bs8db@l))) (bs8d3@f (cdr bs8d1@deps)) (begin (if bs6c2@bs59a@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" bs8bc@name bs8d8@dname bs8b9@filename) (void)) '#f)))))))) bs8df) (if (>= bs8e0 '0) (apply (lambda bs8dd@others '#f) bs8df) (error 'apply '"invalid arg count")))))))) (set! bs988@bs7ca@try-load-from-file bs7ca@try-load-from-file) (set! bs7cc@library-loader (bs6c8@bs5a6@make-parameter (lambda (bs8e1@x) (let ((bs8e3@file-name ((bs7c4@file-locator) bs8e1@x))) (if (not bs8e3@file-name) (assertion-violation '#f '"cannot file library" bs8e1@x) (or (bs7ca@try-load-from-file bs8e3@file-name) ((bs7ce@current-library-expander) (bs6c7@bs5a4@read-library-source-file bs8e3@file-name) bs8e3@file-name (lambda (bs8e5@name) (if (not (fast-equal? bs8e5@name bs8e1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bs8eb@bs8e8 bs8ec@bs8ea) (let ((bs8ef@e bs8ec@bs8ea) (bs8f0@p bs8eb@bs8e8)) (begin (display '"expected to find library " bs8f0@p) (write bs8e1@x bs8f0@p) (display '" in file " bs8f0@p) (display bs8e3@file-name bs8f0@p) (display '", found " bs8f0@p) (write bs8e5@name bs8f0@p) (display '" instead" bs8f0@p) (bs8ef@e)))))) (void)))))))) (lambda (bs8f3@f) (if (procedure? bs8f3@f) bs8f3@f (assertion-violation 'library-locator '"not a procedure" bs8f3@f))))) (set! bs989@bs7cc@library-loader bs7cc@library-loader) (set! bs7ce@current-library-expander (bs6c8@bs5a6@make-parameter (lambda (bs8f5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bs8f7@f) (if (procedure? bs8f7@f) bs8f7@f (assertion-violation 'library-expander '"not a procedure" bs8f7@f))))) (set! bs98a@bs7ce@current-library-expander bs7ce@current-library-expander) (set! bs7d0@external-pending-libraries (bs6c8@bs5a6@make-parameter '())) (set! bs98b@bs7d0@external-pending-libraries bs7d0@external-pending-libraries) (set! bs7d2@find-external-library (lambda (bs8f9@name) (begin (if (member bs8f9@name (bs7d0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bs8f9@name) (void)) (let ((bs8ff@bs8fc bs7d0@external-pending-libraries) (bs900@bs8fe (cons bs8f9@name (bs7d0@external-pending-libraries)))) (let ((bs903@swap (lambda () (let ((bs905@t (bs8ff@bs8fc))) (begin (bs8ff@bs8fc bs900@bs8fe) (set! bs900@bs8fe bs905@t)))))) (dynamic-wind bs903@swap (lambda () (begin ((bs7cc@library-loader) bs8f9@name) (or (bs7bc@find-library-by (lambda (bs907@x) (fast-equal? (bs784@library-name bs907@x) bs8f9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bs8f9@name)))) bs903@swap)))))) (set! bs98c@bs7d2@find-external-library bs7d2@find-external-library) (set! bs7d4@find-library-by-name (lambda (bs909@name) (or (bs7bc@find-library-by (lambda (bs90b@x) (fast-equal? (bs784@library-name bs90b@x) bs909@name))) (bs7d2@find-external-library bs909@name)))) (set! bs98d@bs7d4@find-library-by-name bs7d4@find-library-by-name) (set! bs7d6@library-exists? (lambda (bs90d@name) (and (bs7bc@find-library-by (lambda (bs90f@x) (fast-equal? (bs784@library-name bs90f@x) bs90d@name))) '#t))) (set! bs98e@bs7d6@library-exists? bs7d6@library-exists?) (set! bs7d8@find-library-by-spec/die (lambda (bs911@spec) (let ((bs913@id (car bs911@spec))) (or (bs7bc@find-library-by (lambda (bs915@x) (eq? bs913@id (bs780@library-id bs915@x)))) (assertion-violation '#f '"cannot find library with required spec" bs911@spec))))) (set! bs98f@bs7d8@find-library-by-spec/die bs7d8@find-library-by-spec/die) (set! bs7da@label->binding-table (make-eq-hashtable)) (set! bs990@bs7da@label->binding-table bs7da@label->binding-table) (set! bs7dc@install-library-record (lambda (bs917@lib) (begin (let ((bs919@exp-env (bs79c@library-env bs917@lib))) (for-each (lambda (bs91b@x) (let ((bs91d@label (car bs91b@x)) (bs91e@binding (cdr bs91b@x))) (let ((bs921@binding (let ((bs923@t (car bs91e@binding))) (if (memv bs923@t '(global)) (cons 'global (cons bs917@lib (cdr bs91e@binding))) (if (memv bs923@t '(global-macro)) (cons 'global-macro (cons bs917@lib (cdr bs91e@binding))) (if (memv bs923@t '(global-macro!)) (cons 'global-macro! (cons bs917@lib (cdr bs91e@binding))) bs91e@binding)))))) (begin (if (hashtable-ref bs7da@label->binding-table bs91d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bs91d@label (hashtable-ref bs7da@label->binding-table bs91d@label '#f) bs921@binding) (exit)) (void)) (hashtable-set! bs7da@label->binding-table bs91d@label bs921@binding))))) bs919@exp-env)) ((bs772@current-library-collection) bs917@lib)))) (set! bs991@bs7dc@install-library-record bs7dc@install-library-record) (set! bs7de@install-library (lambda (bs925@id bs926@name bs927@ver bs928@imp* bs929@vis* bs92a@inv* bs92b@exp-subst bs92c@exp-env bs92d@visit-proc bs92e@invoke-proc bs92f@visit-code bs930@invoke-code bs931@visible? bs932@source-file-name) (let ((bs941@imp-lib* (map bs7d8@find-library-by-spec/die bs928@imp*)) (bs942@vis-lib* (map bs7d8@find-library-by-spec/die bs929@vis*)) (bs943@inv-lib* (map bs7d8@find-library-by-spec/die bs92a@inv*))) (begin (if (not (and (symbol? bs925@id) (list? bs926@name) (list? bs927@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bs925@id bs926@name bs927@ver) (void)) (if (bs7d6@library-exists? bs926@name) (assertion-violation 'install-library '"library is already installed" bs926@name) (void)) (let ((bs947@lib (make-simple-struct 'library '15 (list bs925@id bs926@name bs927@ver bs941@imp-lib* bs942@vis-lib* bs943@inv-lib* bs92b@exp-subst bs92c@exp-env bs92d@visit-proc bs92e@invoke-proc bs92f@visit-code bs930@invoke-code bs931@visible? bs932@source-file-name)))) (bs7dc@install-library-record bs947@lib)))))) (set! bs992@bs7de@install-library bs7de@install-library) (set! bs7e0@imported-label->binding (lambda (bs949@lab) (hashtable-ref bs7da@label->binding-table bs949@lab '#f))) (set! bs993@bs7e0@imported-label->binding bs7e0@imported-label->binding) (set! bs7e2@invoke-library (lambda (bs94b@lib) (let ((bs94d@invoke (bs7a4@library-invoke-state bs94b@lib))) (if (procedure? bs94d@invoke) (begin (bs7a6@set-library-invoke-state! bs94b@lib (lambda () (assertion-violation 'invoke '"circularity detected" bs94b@lib))) (for-each bs7e2@invoke-library (bs794@library-inv* bs94b@lib)) (bs7a6@set-library-invoke-state! bs94b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bs94b@lib))) (bs94d@invoke) (bs7a6@set-library-invoke-state! bs94b@lib '#t)) (void))))) (set! bs994@bs7e2@invoke-library bs7e2@invoke-library) (set! bs7e4@visit-library (lambda (bs94f@lib) (let ((bs951@visit (bs7a0@library-visit-state bs94f@lib))) (if (procedure? bs951@visit) (begin (bs7a2@set-library-visit-state! bs94f@lib (lambda () (assertion-violation 'visit '"circularity detected" bs94f@lib))) (for-each bs7e2@invoke-library (bs790@library-vis* bs94f@lib)) (bs7a2@set-library-visit-state! bs94f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bs94f@lib))) (bs951@visit) (bs7a2@set-library-visit-state! bs94f@lib '#t)) (void))))) (set! bs995@bs7e4@visit-library bs7e4@visit-library) (set! bs7e6@invoke-library-by-spec (lambda (bs953@spec) (bs7e2@invoke-library (bs7d8@find-library-by-spec/die bs953@spec)))) (set! bs996@bs7e6@invoke-library-by-spec bs7e6@invoke-library-by-spec) (set! bs7e8@installed-libraries (lambda bs95b (let ((bs95c (length bs95b))) (if (= bs95c '1) (apply (lambda (bs955@all?) (let bs959@f ((bs957@ls ((bs772@current-library-collection)))) (if (null? bs957@ls) '() (if (or bs955@all? (bs7b0@library-visible? (car bs957@ls))) (cons (car bs957@ls) (bs959@f (cdr bs957@ls))) (bs959@f (cdr bs957@ls)))))) bs95b) (if (= bs95c '0) (apply (lambda () (bs7e8@installed-libraries '#f)) bs95b) (error 'apply '"invalid arg count")))))) (set! bs997@bs7e8@installed-libraries bs7e8@installed-libraries) (set! bs7ea@library-spec (lambda (bs95d@x) (begin (if (not (bs77e@library? bs95d@x)) (assertion-violation 'library-spec '"not a library" bs95d@x) (void)) (list (bs780@library-id bs95d@x) (bs784@library-name bs95d@x) (bs788@library-version bs95d@x))))) (set! bs998@bs7ea@library-spec bs7ea@library-spec) (void))
(begin (set! bs99c@build-global-define (unspecified)) (set! bsa0d@build-lambda (unspecified)) (set! bsa0f@build-case-lambda (unspecified)) (set! bsa3d@build-sequence (unspecified)) (set! bsa3f@build-void (unspecified)) (set! bsa41@build-letrec (unspecified)) (set! bsa43@build-let (unspecified)) (set! bsa45@build-named-let (unspecified)) (set! bsa47@build-letrec* (unspecified)) (set! bsa49@build-library-letrec* (unspecified)) (set! bsa4b@build-receive (unspecified)) (set! bs99c@build-global-define (lambda (bsa4c@x) (bsa3f@build-void))) (set! bsada@bs99c@build-global-define bs99c@build-global-define) (set! bsa0d@build-lambda (lambda (bsa4e@ae bsa4f@vars bsa50@exp) (list 'lambda bsa4f@vars bsa50@exp))) (set! bsadb@bsa0d@build-lambda bsa0d@build-lambda) (set! bsa0f@build-case-lambda (lambda (bsa54@ae bsa55@vars* bsa56@exp*) (letrec* ((bsa5b@build-error (lambda (bsa92@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (bsa5d@build-pred (lambda (bsa7a@ae bsa7b@n bsa7c@vars) (call-with-values (lambda () (let bsa88@f ((bsa84@vars bsa7c@vars) (bsa85@count '0)) (if (pair? bsa84@vars) (bsa88@f (cdr bsa84@vars) (+ bsa85@count '1)) (if (null? bsa84@vars) (values bsa85@count '=) (values bsa85@count '>=))))) (lambda (bsa8a@bsa81 bsa8b@bsa83) (let ((bsa8e@pred bsa8b@bsa83) (bsa8f@count bsa8a@bsa81)) (list (list 'primitive bsa8e@pred) bsa7b@n (list 'quote bsa8f@count))))))) (bsa5f@build-apply (lambda (bsa72@ae bsa73@g bsa74@vars bsa75@exp) (list '(primitive apply) (bsa0d@build-lambda bsa72@ae bsa74@vars bsa75@exp) bsa73@g))) (bsa61@expand-case-lambda (lambda (bsa62@ae bsa63@vars bsa64@exp*) (let ((bsa68@g (gensym)) (bsa69@n (gensym))) (list 'lambda bsa68@g (bsa43@build-let bsa62@ae (list bsa69@n) (list (list '(primitive length) bsa68@g)) (let bsa70@f ((bsa6c@vars* bsa55@vars*) (bsa6d@exp* bsa64@exp*)) (if (null? bsa6c@vars*) (bsa5b@build-error bsa62@ae) (list 'if (bsa5d@build-pred bsa62@ae bsa69@n (car bsa6c@vars*)) (bsa5f@build-apply bsa62@ae bsa68@g (car bsa6c@vars*) (car bsa6d@exp*)) (bsa70@f (cdr bsa6c@vars*) (cdr bsa6d@exp*))))))))))) (if (= (length bsa56@exp*) '1) (bsa0d@build-lambda bsa54@ae (car bsa55@vars*) (car bsa56@exp*)) (bsa61@expand-case-lambda bsa54@ae bsa55@vars* bsa56@exp*))))) (set! bsadc@bsa0f@build-case-lambda bsa0f@build-case-lambda) (set! bsa3d@build-sequence (lambda (bsa94@ae bsa95@exps) (let bsa9a@loop ((bsa98@exps bsa95@exps)) (if (null? (cdr bsa98@exps)) (car bsa98@exps) (if (equal? (car bsa98@exps) (bsa3f@build-void)) (bsa9a@loop (cdr bsa98@exps)) (cons 'begin bsa98@exps)))))) (set! bsadd@bsa3d@build-sequence bsa3d@build-sequence) (set! bsa3f@build-void (lambda () '((primitive void)))) (set! bsade@bsa3f@build-void bsa3f@build-void) (set! bsa41@build-letrec (lambda (bsa9c@ae bsa9d@vars bsa9e@val-exps bsa9f@body-exp) (if (null? bsa9d@vars) bsa9f@body-exp (list 'letrec (map list bsa9d@vars bsa9e@val-exps) bsa9f@body-exp)))) (set! bsadf@bsa41@build-letrec bsa41@build-letrec) (set! bsa43@build-let (lambda (bsaa4@ae bsaa5@vars bsaa6@val-exps bsaa7@body-exp) (if (null? bsaa5@vars) bsaa7@body-exp (list 'let (map list bsaa5@vars bsaa6@val-exps) bsaa7@body-exp)))) (set! bsae0@bsa43@build-let bsa43@build-let) (set! bsa45@build-named-let (lambda (bsaac@ae bsaad@name bsaae@vars bsaaf@val-exps bsab0@body-exp) (list 'let bsaad@name (map list bsaae@vars bsaaf@val-exps) bsab0@body-exp))) (set! bsae1@bsa45@build-named-let bsa45@build-named-let) (set! bsa47@build-letrec* (lambda (bsab6@ae bsab7@vars bsab8@val-exps bsab9@body-exp) (if (null? bsab7@vars) bsab9@body-exp (list 'letrec* (map list bsab7@vars bsab8@val-exps) bsab9@body-exp)))) (set! bsae2@bsa47@build-letrec* bsa47@build-letrec*) (set! bsa49@build-library-letrec* (lambda (bsabe@ae bsabf@name bsac0@vars bsac1@locs bsac2@val-exps bsac3@body-exp) (cons 'begin (append (map (lambda (bsaca@var) (cons 'set! (cons bsaca@var '((unspecified))))) bsac0@vars) (append (apply append (map (lambda (bsacc@var bsacd@loc bsace@val-exp) (list (list 'set! bsacc@var bsace@val-exp) (list 'set! bsacd@loc bsacc@var))) bsac0@vars bsac1@locs bsac2@val-exps)) (list bsac3@body-exp)))))) (set! bsae3@bsa49@build-library-letrec* bsa49@build-library-letrec*) (set! bsa4b@build-receive (lambda (bsad2@ae bsad3@vars bsad4@producer bsad5@body*) (begin (display '"************** in ") (cons 'receive (cons bsad3@vars (cons bsad4@producer bsad5@body*)))))) (set! bsae4@bsa4b@build-receive bsa4b@build-receive) (void))
(begin (set! bsaf3@file-options-macro (unspecified)) (set! bsaf5@set-cons (unspecified)) (set! bsaf7@set-union (unspecified)) (set! bsafc@top-mark* (unspecified)) (set! bsafe@top-marked? (unspecified)) (set! bsb00@gen-lexical (unspecified)) (set! bsb02@gen-global (unspecified)) (set! bsb04@gen-label (unspecified)) (set! bsb06@gen-top-level-label (unspecified)) (set! bsb08@gen-define-label+loc (unspecified)) (set! bsb0a@gen-define-label (unspecified)) (set! bsb14@rib? (unspecified)) (set! bsb16@rib-sym* (unspecified)) (set! bsb18@set-rib-sym*! (unspecified)) (set! bsb1a@rib-mark** (unspecified)) (set! bsb1c@set-rib-mark**! (unspecified)) (set! bsb1e@rib-label* (unspecified)) (set! bsb20@set-rib-label*! (unspecified)) (set! bsb22@rib-sealed/freq (unspecified)) (set! bsb24@set-rib-sealed/freq! (unspecified)) (set! bsb26@rib-cache (unspecified)) (set! bsb28@set-rib-cache! (unspecified)) (set! bsb2a@dummy (unspecified)) (set! bsb2c@make-empty-rib (unspecified)) (set! bsb2e@extend-rib! (unspecified)) (set! bsb30@extend-rib/nc! (unspecified)) (set! bsb32@make-rib-map (unspecified)) (set! bsb34@seal-rib! (unspecified)) (set! bsb36@unseal-rib! (unspecified)) (set! bsb38@make-full-rib (unspecified)) (set! bsb3a@rp (unspecified)) (set! bsb44@stx? (unspecified)) (set! bsb46@stx-expr (unspecified)) (set! bsb48@set-stx-expr! (unspecified)) (set! bsb4a@stx-mark* (unspecified)) (set! bsb4c@set-stx-mark*! (unspecified)) (set! bsb4e@stx-subst* (unspecified)) (set! bsb50@set-stx-subst*! (unspecified)) (set! bsb52@stx-ae* (unspecified)) (set! bsb54@set-stx-ae*! (unspecified)) (set! bsb56@dummy (unspecified)) (set! bsb58@datum->stx (unspecified)) (set! bsb5a@gen-mark (unspecified)) (set! bsb5c@anti-mark (unspecified)) (set! bsb5e@anti-mark? (unspecified)) (set! bsb60@mkstx (unspecified)) (set! bsb62@add-subst (unspecified)) (set! bsb64@add-mark (unspecified)) (set! bsb66@syntax-kind? (unspecified)) (set! bsb68@syntax-vector->list (unspecified)) (set! bsb6a@syntax-pair? (unspecified)) (set! bsb6c@syntax-vector? (unspecified)) (set! bsb6e@syntax-null? (unspecified)) (set! bsb70@syntax-list? (unspecified)) (set! bsb72@syntax-car (unspecified)) (set! bsb74@syntax-cdr (unspecified)) (set! bsb76@syntax->list (unspecified)) (set! bsb78@id? (unspecified)) (set! bsb7a@id->sym (unspecified)) (set! bsb7c@bound-id=? (unspecified)) (set! bsb7e@free-id=? (unspecified)) (set! bsb80@valid-bound-ids? (unspecified)) (set! bsb82@distinct-bound-ids? (unspecified)) (set! bsb84@bound-id-member? (unspecified)) (set! bsb86@self-evaluating? (unspecified)) (set! bsb88@strip-annotations (unspecified)) (set! bsb8a@strip (unspecified)) (set! bsb8c@stx->datum (unspecified)) (set! bsb8e@id->label (unspecified)) (set! bsb90@label->binding (unspecified)) (set! bsb92@make-binding (unspecified)) (set! bsb94@binding-type (unspecified)) (set! bsb96@binding-value (unspecified)) (set! bsb98@raise-unbound-error (unspecified)) (set! bsb9a@syntax-type (unspecified)) (set! bsba8@sanitize-binding (unspecified)) (set! bsbaa@make-variable-transformer (unspecified)) (set! bsbac@variable-transformer? (unspecified)) (set! bsbae@variable-transformer-procedure (unspecified)) (set! bsbb0@make-eval-transformer (unspecified)) (set! bsd01@parse-define (unspecified)) (set! bsd03@parse-define-syntax (unspecified)) (set! bsd05@scheme-stx-hashtable (unspecified)) (set! bsd07@scheme-stx (unspecified)) (set! bsd09@lexical-var (unspecified)) (set! bsd0b@lexical-mutable? (unspecified)) (set! bsd0d@set-lexical-mutable! (unspecified)) (set! bsd0f@add-lexical (unspecified)) (set! bsd11@add-lexicals (unspecified)) (set! bsd13@letrec-helper (unspecified)) (set! bsd15@let-transformer (unspecified)) (set! bsd17@letrec-transformer (unspecified)) (set! bsd19@letrec*-transformer (unspecified)) (set! bsd1b@fluid-let-syntax-transformer (unspecified)) (set! bsd1d@type-descriptor-transformer (unspecified)) (set! bsd1f@record-type-descriptor-transformer (unspecified)) (set! bsd21@record-constructor-descriptor-transformer (unspecified)) (set! bsd23@when-macro (unspecified)) (set! bsd25@unless-macro (unspecified)) (set! bsd27@if-transformer (unspecified)) (set! bsd29@and-transformer (unspecified)) (set! bsd2b@or-transformer (unspecified)) (set! bsd2d@case-macro (unspecified)) (set! bsd2f@quote-transformer (unspecified)) (set! bsd31@case-lambda-transformer (unspecified)) (set! bsd33@lambda-transformer (unspecified)) (set! bsd35@bless (unspecified)) (set! bsd37@with-syntax-macro (unspecified)) (set! bsd39@invalid-fmls-error (unspecified)) (set! bsd3b@let-macro (unspecified)) (set! bsd3d@let-values-macro (unspecified)) (set! bsd3f@let*-values-macro (unspecified)) (set! bsd41@trace-lambda-macro (unspecified)) (set! bsd43@trace-define-macro (unspecified)) (set! bsd45@trace-define-syntax-macro (unspecified)) (set! bsd47@trace-let/rec-syntax (unspecified)) (set! bsd49@trace-let-syntax-macro (unspecified)) (set! bsd4b@trace-letrec-syntax-macro (unspecified)) (set! bsd4d@guard-macro (unspecified)) (set! bsd4f@define-enumeration-macro (unspecified)) (set! bsd51@time-macro (unspecified)) (set! bsd53@delay-macro (unspecified)) (set! bsd55@assert-macro (unspecified)) (set! bsd57@endianness-macro (unspecified)) (set! bsd59@identifier-syntax-macro (unspecified)) (set! bsd5b@do-macro (unspecified)) (set! bsd5d@let*-macro (unspecified)) (set! bsd5f@or-macro (unspecified)) (set! bsd61@and-macro (unspecified)) (set! bsd63@cond-macro (unspecified)) (set! bsd65@do-include (unspecified)) (set! bsd67@include-macro (unspecified)) (set! bsd69@include-into-macro (unspecified)) (set! bsd6b@syntax-rules-macro (unspecified)) (set! bsd6d@quasiquote-macro (unspecified)) (set! bsd6f@quasisyntax-macro (unspecified)) (set! bsd71@define-struct-macro (unspecified)) (set! bsd73@define-record-type-macro (unspecified)) (set! bsd75@define-condition-type-macro (unspecified)) (set! bsd77@incorrect-usage-macro (unspecified)) (set! bsd79@parameterize-macro (unspecified)) (set! bsd7b@foreign-call-transformer (unspecified)) (set! bsd7d@convert-pattern (unspecified)) (set! bsd7f@syntax-dispatch (unspecified)) (set! bsd81@ellipsis? (unspecified)) (set! bsd83@underscore? (unspecified)) (set! bsd85@verify-literals (unspecified)) (set! bsd87@syntax-case-transformer (unspecified)) (set! bsd89@ellipsis-map (unspecified)) (set! bsd8b@syntax-transformer (unspecified)) (set! bsd8d@core-macro-transformer (unspecified)) (set! bsd8f@symbol-macro (unspecified)) (set! bsd91@macro-transformer (unspecified)) (set! bsd93@local-macro-transformer (unspecified)) (set! bsd95@do-macro-call (unspecified)) (set! bsd97@chi-macro (unspecified)) (set! bsd99@chi-local-macro (unspecified)) (set! bsd9b@chi-global-macro (unspecified)) (set! bsd9d@chi-expr* (unspecified)) (set! bsd9f@chi-application (unspecified)) (set! bsda1@chi-expr (unspecified)) (set! bsda3@chi-set! (unspecified)) (set! bsda5@verify-formals (unspecified)) (set! bsda7@chi-lambda-clause (unspecified)) (set! bsda9@chi-lambda-clause* (unspecified)) (set! bsdab@chi-defun (unspecified)) (set! bsdad@chi-rhs (unspecified)) (set! bsdaf@expand-interaction-rhs*/init* (unspecified)) (set! bsdb1@chi-rhs* (unspecified)) (set! bsdb3@find-bound=? (unspecified)) (set! bsdb5@find-dups (unspecified)) (set! bsdb7@chi-internal (unspecified)) (set! bsdb9@parse-module (unspecified)) (set! bsdc3@module-interface? (unspecified)) (set! bsdc5@module-interface-first-mark (unspecified)) (set! bsdc7@set-module-interface-first-mark! (unspecified)) (set! bsdc9@module-interface-exp-id-vec (unspecified)) (set! bsdcb@set-module-interface-exp-id-vec! (unspecified)) (set! bsdcd@module-interface-exp-lab-vec (unspecified)) (set! bsdcf@set-module-interface-exp-lab-vec! (unspecified)) (set! bsdd1@dummy (unspecified)) (set! bsdd3@module-interface-exp-id* (unspecified)) (set! bsdd5@chi-internal-module (unspecified)) (set! bsdd7@chi-body* (unspecified)) (set! bsdd9@expand-transformer (unspecified)) (set! bsddb@parse-exports (unspecified)) (set! bsddd@parse-library-name (unspecified)) (set! bsddf@parse-library (unspecified)) (set! bsde1@parse-import-spec* (unspecified)) (set! bsde3@make-top-rib (unspecified)) (set! bsde5@make-collector (unspecified)) (set! bsde7@inv-collector (unspecified)) (set! bsde9@vis-collector (unspecified)) (set! bsdeb@imp-collector (unspecified)) (set! bsded@chi-library-internal (unspecified)) (set! bsdef@chi-interaction-expr (unspecified)) (set! bsdf1@library-body-expander (unspecified)) (set! bsdf3@core-library-expander (unspecified)) (set! bsdf5@parse-top-level-program (unspecified)) (set! bsdf7@top-level-expander (unspecified)) (set! bsdf9@rp (unspecified)) (set! bse03@env? (unspecified)) (set! bse05@env-names (unspecified)) (set! bse07@set-env-names! (unspecified)) (set! bse09@env-labels (unspecified)) (set! bse0b@set-env-labels! (unspecified)) (set! bse0d@env-itc (unspecified)) (set! bse0f@set-env-itc! (unspecified)) (set! bse11@dummy (unspecified)) (set! bse13@rp (unspecified)) (set! bse1d@interaction-env? (unspecified)) (set! bse1f@interaction-env-rib (unspecified)) (set! bse21@set-interaction-env-rib! (unspecified)) (set! bse23@interaction-env-r (unspecified)) (set! bse25@set-interaction-env-r! (unspecified)) (set! bse27@interaction-env-locs (unspecified)) (set! bse29@set-interaction-env-locs! (unspecified)) (set! bse2b@dummy (unspecified)) (set! bse2d@interaction-environment-symbols (unspecified)) (set! bse2f@environment-bindings (unspecified)) (set! bse31@parse-binding (unspecified)) (set! bse33@environment? (unspecified)) (set! bse35@environment-symbols (unspecified)) (set! bse37@environment (unspecified)) (set! bse39@null-environment (unspecified)) (set! bse3b@scheme-report-environment (unspecified)) (set! bse3d@expand (unspecified)) (set! bse3f@eval (unspecified)) (set! bse41@library-expander (unspecified)) (set! bse43@boot-library-expand (unspecified)) (set! bse45@rev-map-append (unspecified)) (set! bse47@build-exports (unspecified)) (set! bse49@make-export-subst (unspecified)) (set! bse4b@make-export-env/macros (unspecified)) (set! bse4d@generate-temporaries (unspecified)) (set! bse4f@free-identifier=? (unspecified)) (set! bse51@bound-identifier=? (unspecified)) (set! bse53@make-source-condition (unspecified)) (set! bse55@extract-position-condition (unspecified)) (set! bse57@expression-position (unspecified)) (set! bse59@assertion-error (unspecified)) (set! bse5b@syntax-error (unspecified)) (set! bse5d@syntax-violation* (unspecified)) (set! bse5f@syntax-violation (unspecified)) (set! bse61@identifier? (unspecified)) (set! bse63@datum->syntax (unspecified)) (set! bse65@syntax->datum (unspecified)) (set! bse67@ungensym-all (unspecified)) (set! bse69@compile-r6rs-top-level (unspecified)) (set! bse6b@pre-compile-r6rs-top-level (unspecified)) (set! bse6d@interaction-environment (unspecified)) (set! bse6f@top-level-context (unspecified)) (set! bsaf3@file-options-macro (lambda (bse70@x) (letrec* ((bse73@valid-option? (lambda (bse7c@x) (and (bsb78@id? bse7c@x) (memq (bsb7a@id->sym bse7c@x) '(no-fail no-create no-truncate)))))) (let ((bse74@t bse70@x)) (let ((bse76@ls/false (bsd7f@syntax-dispatch bse74@t '(_ . each-any)))) (if (and bse76@ls/false (apply (lambda (bse78@opt*) (for-all bse73@valid-option? bse78@opt*)) bse76@ls/false)) (apply (lambda (bse7a@opt*) (bsd35@bless (list 'make-file-options (list 'quote bse7a@opt*)))) bse76@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bse74@t))))))) (set! bs27fc@bsaf3@file-options-macro bsaf3@file-options-macro) (set! bsaf5@set-cons (lambda (bse7e@x bse7f@ls) (if (memq bse7e@x bse7f@ls) bse7f@ls (cons bse7e@x bse7f@ls)))) (set! bs27fd@bsaf5@set-cons bsaf5@set-cons) (set! bsaf7@set-union (lambda (bse82@ls1 bse83@ls2) (if (null? bse82@ls1) bse83@ls2 (if (memq (car bse82@ls1) bse83@ls2) (bsaf7@set-union (cdr bse82@ls1) bse83@ls2) (cons (car bse82@ls1) (bsaf7@set-union (cdr bse82@ls1) bse83@ls2)))))) (set! bs27fe@bsaf7@set-union bsaf7@set-union) (set! bsafc@top-mark* '(top)) (set! bs27ff@bsafc@top-mark* bsafc@top-mark*) (set! bsafe@top-marked? (lambda (bse86@m*) (memq 'top bse86@m*))) (set! bs2800@bsafe@top-marked? bsafe@top-marked?) (set! bsb00@gen-lexical (lambda (bse88@sym) (if (symbol? bse88@sym) (gensym bse88@sym) (if (bsb44@stx? bse88@sym) (bsb00@gen-lexical (bsb7a@id->sym bse88@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bse88@sym))))) (set! bs2801@bsb00@gen-lexical bsb00@gen-lexical) (set! bsb02@gen-global (lambda (bse8a@x) (bsb00@gen-lexical bse8a@x))) (set! bs2802@bsb02@gen-global bsb02@gen-global) (set! bsb04@gen-label (lambda (bse8c@_) (gensym))) (set! bs2803@bsb04@gen-label bsb04@gen-label) (set! bsb06@gen-top-level-label (lambda (bse8e@id bse8f@rib) (letrec* ((bse93@find (lambda (bse9e@sym bse9f@mark* bsea0@sym* bsea1@mark** bsea2@label*) (and (pair? bsea0@sym*) (if (and (eq? bse9e@sym (car bsea0@sym*)) (same-marks? bse9f@mark* (car bsea1@mark**))) (car bsea2@label*) (bse93@find bse9e@sym bse9f@mark* (cdr bsea0@sym*) (cdr bsea1@mark**) (cdr bsea2@label*))))))) (let ((bse94@sym (bsb7a@id->sym bse8e@id)) (bse95@mark* (bsb4a@stx-mark* bse8e@id))) (let ((bse98@sym* (bsb16@rib-sym* bse8f@rib))) (let ((bse9a@t (and (memq bse94@sym (bsb16@rib-sym* bse8f@rib)) (bse93@find bse94@sym bse95@mark* bse98@sym* (bsb1a@rib-mark** bse8f@rib) (bsb1e@rib-label* bse8f@rib))))) (if bse9a@t ((lambda (bse9c@label) (if (bs993@bs7e0@imported-label->binding bse9c@label) (gensym) bse9c@label)) bse9a@t) (gensym)))))))) (set! bs2804@bsb06@gen-top-level-label bsb06@gen-top-level-label) (set! bsb08@gen-define-label+loc (lambda (bsea8@id bsea9@rib) (let ((bseac@t (bse6f@top-level-context))) (if bseac@t ((lambda (bseae@env) (let ((bseb0@label (bsb06@gen-top-level-label bsea8@id bsea9@rib)) (bseb1@locs (bse27@interaction-env-locs bseae@env))) (values bseb0@label (let ((bseb4@t (assq bseb0@label bseb1@locs))) (if bseb4@t (cdr bseb4@t) (let ((bseb6@loc (bsb00@gen-lexical bsea8@id))) (begin (bse29@set-interaction-env-locs! bseae@env (cons (cons bseb0@label bseb6@loc) bseb1@locs)) bseb6@loc))))))) bseac@t) (values (gensym) (bsb00@gen-lexical bsea8@id)))))) (set! bs2805@bsb08@gen-define-label+loc bsb08@gen-define-label+loc) (set! bsb0a@gen-define-label (lambda (bseb8@id bseb9@rib) (if (bse6f@top-level-context) (bsb06@gen-top-level-label bseb8@id bseb9@rib) (gensym)))) (set! bs2806@bsb0a@gen-define-label bsb0a@gen-define-label) (set! bsb14@rib? (lambda (bsebc@x) (and (simple-struct? bsebc@x) (eq? (simple-struct-name bsebc@x) 'rib)))) (set! bs2807@bsb14@rib? bsb14@rib?) (set! bsb16@rib-sym* (lambda (bsebe@x) (simple-struct-ref bsebe@x '0))) (set! bs2808@bsb16@rib-sym* bsb16@rib-sym*) (set! bsb18@set-rib-sym*! (lambda (bsec0@x bsec1@val) (simple-struct-set! bsec0@x '0 bsec1@val))) (set! bs2809@bsb18@set-rib-sym*! bsb18@set-rib-sym*!) (set! bsb1a@rib-mark** (lambda (bsec4@x) (simple-struct-ref bsec4@x '1))) (set! bs280a@bsb1a@rib-mark** bsb1a@rib-mark**) (set! bsb1c@set-rib-mark**! (lambda (bsec6@x bsec7@val) (simple-struct-set! bsec6@x '1 bsec7@val))) (set! bs280b@bsb1c@set-rib-mark**! bsb1c@set-rib-mark**!) (set! bsb1e@rib-label* (lambda (bseca@x) (simple-struct-ref bseca@x '2))) (set! bs280c@bsb1e@rib-label* bsb1e@rib-label*) (set! bsb20@set-rib-label*! (lambda (bsecc@x bsecd@val) (simple-struct-set! bsecc@x '2 bsecd@val))) (set! bs280d@bsb20@set-rib-label*! bsb20@set-rib-label*!) (set! bsb22@rib-sealed/freq (lambda (bsed0@x) (simple-struct-ref bsed0@x '3))) (set! bs280e@bsb22@rib-sealed/freq bsb22@rib-sealed/freq) (set! bsb24@set-rib-sealed/freq! (lambda (bsed2@x bsed3@val) (simple-struct-set! bsed2@x '3 bsed3@val))) (set! bs280f@bsb24@set-rib-sealed/freq! bsb24@set-rib-sealed/freq!) (set! bsb26@rib-cache (lambda (bsed6@x) (simple-struct-ref bsed6@x '4))) (set! bs2810@bsb26@rib-cache bsb26@rib-cache) (set! bsb28@set-rib-cache! (lambda (bsed8@x bsed9@val) (simple-struct-set! bsed8@x '4 bsed9@val))) (set! bs2811@bsb28@set-rib-cache! bsb28@set-rib-cache!) (set! bsb2a@dummy '3) (set! bs2812@bsb2a@dummy bsb2a@dummy) (set! bsb2c@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bs2813@bsb2c@make-empty-rib bsb2c@make-empty-rib) (set! bsb2e@extend-rib! (lambda (bsedc@rib bsedd@id bsede@label) (letrec* ((bsee3@find (lambda (bsef0@sym bsef1@mark* bsef2@sym* bsef3@mark** bsef4@label*) (and (pair? bsef2@sym*) (if (and (eq? bsef0@sym (car bsef2@sym*)) (same-marks? bsef1@mark* (car bsef3@mark**))) bsef4@label* (bsee3@find bsef0@sym bsef1@mark* (cdr bsef2@sym*) (cdr bsef3@mark**) (cdr bsef4@label*))))))) (begin (if (bsb22@rib-sealed/freq bsedc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bsedc@rib) (void)) (let ((bsee4@sym (bsb7a@id->sym bsedd@id)) (bsee5@mark* (bsb4a@stx-mark* bsedd@id))) (let ((bsee8@sym* (bsb16@rib-sym* bsedc@rib))) (let ((bseea@t (and (memq bsee4@sym (bsb16@rib-sym* bsedc@rib)) (bsee3@find bsee4@sym bsee5@mark* bsee8@sym* (bsb1a@rib-mark** bsedc@rib) (bsb1e@rib-label* bsedc@rib))))) (if bseea@t ((lambda (bseec@p) (if (not (eq? bsede@label (car bseec@p))) (if (bse6f@top-level-context) (set-car! bseec@p bsede@label) (bse5f@syntax-violation '#f '"multiple definitions of identifier" bsedd@id)) (void))) bseea@t) (begin (if (bsb26@rib-cache bsedc@rib) (hashtable-update! (bsb26@rib-cache bsedc@rib) bsee4@sym (lambda (bseee@e) (cons (cons bsee5@mark* bsede@label) bseee@e)) '()) (void)) (bsb18@set-rib-sym*! bsedc@rib (cons bsee4@sym bsee8@sym*)) (bsb1c@set-rib-mark**! bsedc@rib (cons bsee5@mark* (bsb1a@rib-mark** bsedc@rib))) (bsb20@set-rib-label*! bsedc@rib (cons bsede@label (bsb1e@rib-label* bsedc@rib)))))))))))) (set! bs2814@bsb2e@extend-rib! bsb2e@extend-rib!) (set! bsb30@extend-rib/nc! (lambda (bsefa@rib bsefb@id bsefc@label) (let ((bsf00@sym (bsb7a@id->sym bsefb@id)) (bsf01@mark* (bsb4a@stx-mark* bsefb@id))) (let ((bsf04@sym* (bsb16@rib-sym* bsefa@rib))) (begin (if (bsb26@rib-cache bsefa@rib) (hashtable-update! (bsb26@rib-cache bsefa@rib) bsf00@sym (lambda (bsf06@e) (cons (cons bsf01@mark* bsefc@label) bsf06@e)) '()) (void)) (bsb18@set-rib-sym*! bsefa@rib (cons bsf00@sym bsf04@sym*)) (bsb1c@set-rib-mark**! bsefa@rib (cons bsf01@mark* (bsb1a@rib-mark** bsefa@rib))) (bsb20@set-rib-label*! bsefa@rib (cons bsefc@label (bsb1e@rib-label* bsefa@rib)))))))) (set! bs2815@bsb30@extend-rib/nc! bsb30@extend-rib/nc!) (set! bsb32@make-rib-map (lambda (bsf08@sym*) (let ((bsf0a@ht (make-eq-hashtable))) (let bsf10@f ((bsf0c@i '0) (bsf0d@sym* bsf08@sym*)) (if (null? bsf0d@sym*) bsf0a@ht (begin (hashtable-update! bsf0a@ht (car bsf0d@sym*) (lambda (bsf12@x) (cons bsf0c@i bsf12@x)) '()) (bsf10@f (+ bsf0c@i '1) (cdr bsf0d@sym*)))))))) (set! bs2816@bsb32@make-rib-map bsb32@make-rib-map) (set! bsb34@seal-rib! (lambda (bsf14@rib) (let ((bsf16@sym* (bsb16@rib-sym* bsf14@rib))) (if (not (null? bsf16@sym*)) (begin (bsb18@set-rib-sym*! bsf14@rib (list->vector bsf16@sym*)) (bsb1c@set-rib-mark**! bsf14@rib (list->vector (bsb1a@rib-mark** bsf14@rib))) (bsb20@set-rib-label*! bsf14@rib (list->vector (bsb1e@rib-label* bsf14@rib))) (bsb24@set-rib-sealed/freq! bsf14@rib (bsb32@make-rib-map bsf16@sym*))) (void))))) (set! bs2817@bsb34@seal-rib! bsb34@seal-rib!) (set! bsb36@unseal-rib! (lambda (bsf18@rib) (if (bsb22@rib-sealed/freq bsf18@rib) (begin (bsb24@set-rib-sealed/freq! bsf18@rib '#f) (bsb18@set-rib-sym*! bsf18@rib (vector->list (bsb16@rib-sym* bsf18@rib))) (bsb1c@set-rib-mark**! bsf18@rib (vector->list (bsb1a@rib-mark** bsf18@rib))) (bsb20@set-rib-label*! bsf18@rib (vector->list (bsb1e@rib-label* bsf18@rib)))) (void)))) (set! bs2818@bsb36@unseal-rib! bsb36@unseal-rib!) (set! bsb38@make-full-rib (lambda (bsf1a@id* bsf1b@label*) (let ((bsf1e@r (make-simple-struct 'rib '6 (list (map bsb7a@id->sym bsf1a@id*) (map bsb4a@stx-mark* bsf1a@id*) bsf1b@label* '#f '#f)))) (begin (bsb34@seal-rib! bsf1e@r) bsf1e@r)))) (set! bs2819@bsb38@make-full-rib bsb38@make-full-rib) (set! bsb3a@rp (bs6c5@bs5a0@make-record-printer 'stx (lambda (bsf20@x bsf21@p bsf22@wr) (begin (display '"#<syntax " bsf21@p) (write (bsb8c@stx->datum bsf20@x) bsf21@p) (let ((bsf26@expr (bsb46@stx-expr bsf20@x))) (if (bs6bc@bs58e@annotation? bsf26@expr) (let ((bsf28@src (bs6bd@bs590@annotation-source bsf26@expr))) (if (pair? bsf28@src) (begin (display '" [" bsf21@p) (display (cdr bsf28@src) bsf21@p) (display '" of " bsf21@p) (display (car bsf28@src) bsf21@p) (display '"]" bsf21@p)) (void))) (void))) (display '">" bsf21@p))))) (set! bs281a@bsb3a@rp bsb3a@rp) (set! bsb44@stx? (lambda (bsf2a@x) (and (simple-struct? bsf2a@x) (eq? (simple-struct-name bsf2a@x) 'stx)))) (set! bs281b@bsb44@stx? bsb44@stx?) (set! bsb46@stx-expr (lambda (bsf2c@x) (simple-struct-ref bsf2c@x '0))) (set! bs281c@bsb46@stx-expr bsb46@stx-expr) (set! bsb48@set-stx-expr! (lambda (bsf2e@x bsf2f@val) (simple-struct-set! bsf2e@x '0 bsf2f@val))) (set! bs281d@bsb48@set-stx-expr! bsb48@set-stx-expr!) (set! bsb4a@stx-mark* (lambda (bsf32@x) (simple-struct-ref bsf32@x '1))) (set! bs281e@bsb4a@stx-mark* bsb4a@stx-mark*) (set! bsb4c@set-stx-mark*! (lambda (bsf34@x bsf35@val) (simple-struct-set! bsf34@x '1 bsf35@val))) (set! bs281f@bsb4c@set-stx-mark*! bsb4c@set-stx-mark*!) (set! bsb4e@stx-subst* (lambda (bsf38@x) (simple-struct-ref bsf38@x '2))) (set! bs2820@bsb4e@stx-subst* bsb4e@stx-subst*) (set! bsb50@set-stx-subst*! (lambda (bsf3a@x bsf3b@val) (simple-struct-set! bsf3a@x '2 bsf3b@val))) (set! bs2821@bsb50@set-stx-subst*! bsb50@set-stx-subst*!) (set! bsb52@stx-ae* (lambda (bsf3e@x) (simple-struct-ref bsf3e@x '3))) (set! bs2822@bsb52@stx-ae* bsb52@stx-ae*) (set! bsb54@set-stx-ae*! (lambda (bsf40@x bsf41@val) (simple-struct-set! bsf40@x '3 bsf41@val))) (set! bs2823@bsb54@set-stx-ae*! bsb54@set-stx-ae*!) (set! bsb56@dummy '3) (set! bs2824@bsb56@dummy bsb56@dummy) (set! bsb58@datum->stx (lambda (bsf44@id bsf45@datum) (make-simple-struct 'stx '5 (list bsf45@datum (bsb4a@stx-mark* bsf44@id) (bsb4e@stx-subst* bsf44@id) (bsb52@stx-ae* bsf44@id))))) (set! bs2825@bsb58@datum->stx bsb58@datum->stx) (set! bsb5a@gen-mark (lambda () (string '#\m))) (set! bs2826@bsb5a@gen-mark bsb5a@gen-mark) (set! bsb5c@anti-mark '#f) (set! bs2827@bsb5c@anti-mark bsb5c@anti-mark) (set! bsb5e@anti-mark? not) (set! bs2828@bsb5e@anti-mark? bsb5e@anti-mark?) (set! bsb60@mkstx (lambda (bsf48@e bsf49@m* bsf4a@s* bsf4b@ae*) (if (and (bsb44@stx? bsf48@e) (not (bsafe@top-marked? bsf49@m*))) (call-with-values (lambda () (join-wraps bsf49@m* bsf4a@s* bsf4b@ae* bsf48@e)) (lambda (bsf56@bsf51 bsf57@bsf53 bsf58@bsf55) (let ((bsf5c@ae* bsf58@bsf55) (bsf5d@s* bsf57@bsf53) (bsf5e@m* bsf56@bsf51)) (make-simple-struct 'stx '5 (list (bsb46@stx-expr bsf48@e) bsf5e@m* bsf5d@s* bsf5c@ae*))))) (make-simple-struct 'stx '5 (list bsf48@e bsf49@m* bsf4a@s* bsf4b@ae*))))) (set! bs2829@bsb60@mkstx bsb60@mkstx) (set! bsb62@add-subst (lambda (bsf62@subst bsf63@e) (bsb60@mkstx bsf63@e '() (list bsf62@subst) '()))) (set! bs282a@bsb62@add-subst bsb62@add-subst) (set! bsb64@add-mark (lambda (bsf66@mark bsf67@subst bsf68@expr bsf69@ae) (letrec* ((bsf6f@merge-ae* (lambda (bsf96@ls1 bsf97@ls2) (if (and (pair? bsf96@ls1) (pair? bsf97@ls2) (not (car bsf97@ls2))) (bsf71@cancel bsf96@ls1 bsf97@ls2) (append bsf96@ls1 bsf97@ls2)))) (bsf71@cancel (lambda (bsf8c@ls1 bsf8d@ls2) (let bsf94@f ((bsf90@x (car bsf8c@ls1)) (bsf91@ls1 (cdr bsf8c@ls1))) (if (null? bsf91@ls1) (cdr bsf8d@ls2) (cons bsf90@x (bsf94@f (car bsf91@ls1) (cdr bsf91@ls1))))))) (bsf73@f (lambda (bsf74@e bsf75@m bsf76@s1* bsf77@ae*) (if (pair? bsf74@e) (let ((bsf7c@a (bsf73@f (car bsf74@e) bsf75@m bsf76@s1* bsf77@ae*)) (bsf7d@d (bsf73@f (cdr bsf74@e) bsf75@m bsf76@s1* bsf77@ae*))) (if (eq? bsf7c@a bsf7d@d) bsf74@e (cons bsf7c@a bsf7d@d))) (if (vector? bsf74@e) (let ((bsf80@ls1 (vector->list bsf74@e))) (let ((bsf82@ls2 (map (lambda (bsf84@x) (bsf73@f bsf84@x bsf75@m bsf76@s1* bsf77@ae*)) bsf80@ls1))) (if (for-all eq? bsf80@ls1 bsf82@ls2) bsf74@e (list->vector bsf82@ls2)))) (if (bsb44@stx? bsf74@e) (let ((bsf86@m* (bsb4a@stx-mark* bsf74@e)) (bsf87@s2* (bsb4e@stx-subst* bsf74@e))) (if (null? bsf86@m*) (bsf73@f (bsb46@stx-expr bsf74@e) bsf75@m (append bsf76@s1* bsf87@s2*) (bsf6f@merge-ae* bsf77@ae* (bsb52@stx-ae* bsf74@e))) (if (eq? (car bsf86@m*) bsb5c@anti-mark) (make-simple-struct 'stx '5 (list (bsb46@stx-expr bsf74@e) (cdr bsf86@m*) (cdr (append bsf76@s1* bsf87@s2*)) (bsf6f@merge-ae* bsf77@ae* (bsb52@stx-ae* bsf74@e)))) (make-simple-struct 'stx '5 (list (bsb46@stx-expr bsf74@e) (cons bsf75@m bsf86@m*) (let ((bsf8a@s* (cons 'shift (append bsf76@s1* bsf87@s2*)))) (if bsf67@subst (cons bsf67@subst bsf8a@s*) bsf8a@s*)) (bsf6f@merge-ae* bsf77@ae* (bsb52@stx-ae* bsf74@e))))))) (if (symbol? bsf74@e) (bse5f@syntax-violation '#f '"raw symbol encountered in output of macro" bsf68@expr bsf74@e) (make-simple-struct 'stx '5 (list bsf74@e (list bsf75@m) bsf76@s1* bsf77@ae*))))))))) (bsb60@mkstx (bsf73@f bsf68@expr bsf66@mark '() '()) '() '() (list bsf69@ae))))) (set! bs282b@bsb64@add-mark bsb64@add-mark) (set! bsb66@syntax-kind? (lambda (bsf9a@x bsf9b@p?) (if (bsb44@stx? bsf9a@x) (bsb66@syntax-kind? (bsb46@stx-expr bsf9a@x) bsf9b@p?) (if (bs6bc@bs58e@annotation? bsf9a@x) (bsb66@syntax-kind? (bs6be@bs592@annotation-expression bsf9a@x) bsf9b@p?) (bsf9b@p? bsf9a@x))))) (set! bs282c@bsb66@syntax-kind? bsb66@syntax-kind?) (set! bsb68@syntax-vector->list (lambda (bsf9e@x) (if (bsb44@stx? bsf9e@x) (let ((bsfa0@ls (bsb68@syntax-vector->list (bsb46@stx-expr bsf9e@x))) (bsfa1@m* (bsb4a@stx-mark* bsf9e@x)) (bsfa2@s* (bsb4e@stx-subst* bsf9e@x)) (bsfa3@ae* (bsb52@stx-ae* bsf9e@x))) (map (lambda (bsfa8@x) (bsb60@mkstx bsfa8@x bsfa1@m* bsfa2@s* bsfa3@ae*)) bsfa0@ls)) (if (bs6bc@bs58e@annotation? bsf9e@x) (bsb68@syntax-vector->list (bs6be@bs592@annotation-expression bsf9e@x)) (if (vector? bsf9e@x) (vector->list bsf9e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bsf9e@x)))))) (set! bs282d@bsb68@syntax-vector->list bsb68@syntax-vector->list) (set! bsb6a@syntax-pair? (lambda (bsfaa@x) (bsb66@syntax-kind? bsfaa@x pair?))) (set! bs282e@bsb6a@syntax-pair? bsb6a@syntax-pair?) (set! bsb6c@syntax-vector? (lambda (bsfac@x) (bsb66@syntax-kind? bsfac@x vector?))) (set! bs282f@bsb6c@syntax-vector? bsb6c@syntax-vector?) (set! bsb6e@syntax-null? (lambda (bsfae@x) (bsb66@syntax-kind? bsfae@x null?))) (set! bs2830@bsb6e@syntax-null? bsb6e@syntax-null?) (set! bsb70@syntax-list? (lambda (bsfb0@x) (or (bsb6e@syntax-null? bsfb0@x) (and (bsb6a@syntax-pair? bsfb0@x) (bsb70@syntax-list? (bsb74@syntax-cdr bsfb0@x)))))) (set! bs2831@bsb70@syntax-list? bsb70@syntax-list?) (set! bsb72@syntax-car (lambda (bsfb2@x) (if (bsb44@stx? bsfb2@x) (bsb60@mkstx (bsb72@syntax-car (bsb46@stx-expr bsfb2@x)) (bsb4a@stx-mark* bsfb2@x) (bsb4e@stx-subst* bsfb2@x) (bsb52@stx-ae* bsfb2@x)) (if (bs6bc@bs58e@annotation? bsfb2@x) (bsb72@syntax-car (bs6be@bs592@annotation-expression bsfb2@x)) (if (pair? bsfb2@x) (car bsfb2@x) (assertion-violation 'syntax-car '"BUG: not a pair" bsfb2@x)))))) (set! bs2832@bsb72@syntax-car bsb72@syntax-car) (set! bsb74@syntax-cdr (lambda (bsfb4@x) (if (bsb44@stx? bsfb4@x) (bsb60@mkstx (bsb74@syntax-cdr (bsb46@stx-expr bsfb4@x)) (bsb4a@stx-mark* bsfb4@x) (bsb4e@stx-subst* bsfb4@x) (bsb52@stx-ae* bsfb4@x)) (if (bs6bc@bs58e@annotation? bsfb4@x) (bsb74@syntax-cdr (bs6be@bs592@annotation-expression bsfb4@x)) (if (pair? bsfb4@x) (cdr bsfb4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bsfb4@x)))))) (set! bs2833@bsb74@syntax-cdr bsb74@syntax-cdr) (set! bsb76@syntax->list (lambda (bsfb6@x) (if (bsb6a@syntax-pair? bsfb6@x) (cons (bsb72@syntax-car bsfb6@x) (bsb76@syntax->list (bsb74@syntax-cdr bsfb6@x))) (if (bsb6e@syntax-null? bsfb6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bsfb6@x))))) (set! bs2834@bsb76@syntax->list bsb76@syntax->list) (set! bsb78@id? (lambda (bsfb8@x) (and (bsb44@stx? bsfb8@x) (symbol? (bsb46@stx-expr bsfb8@x))))) (set! bs2835@bsb78@id? bsb78@id?) (set! bsb7a@id->sym (lambda (bsfba@x) (bsb46@stx-expr bsfba@x))) (set! bs2836@bsb7a@id->sym bsb7a@id->sym) (set! bsb7c@bound-id=? (lambda (bsfbc@x bsfbd@y) (and (eq? (bsb7a@id->sym bsfbc@x) (bsb7a@id->sym bsfbd@y)) (same-marks? (bsb4a@stx-mark* bsfbc@x) (bsb4a@stx-mark* bsfbd@y))))) (set! bs2837@bsb7c@bound-id=? bsb7c@bound-id=?) (set! bsb7e@free-id=? (lambda (bsfc0@i bsfc1@j) (let ((bsfc4@t0 (id->real-label bsfc0@i)) (bsfc5@t1 (id->real-label bsfc1@j))) (if (or bsfc4@t0 bsfc5@t1) (eq? bsfc4@t0 bsfc5@t1) (eq? (bsb7a@id->sym bsfc0@i) (bsb7a@id->sym bsfc1@j)))))) (set! bs2838@bsb7e@free-id=? bsb7e@free-id=?) (set! bsb80@valid-bound-ids? (lambda (bsfc8@id*) (and (for-all bsb78@id? bsfc8@id*) (bsb82@distinct-bound-ids? bsfc8@id*)))) (set! bs2839@bsb80@valid-bound-ids? bsb80@valid-bound-ids?) (set! bsb82@distinct-bound-ids? (lambda (bsfca@id*) (or (null? bsfca@id*) (and (not (bsb84@bound-id-member? (car bsfca@id*) (cdr bsfca@id*))) (bsb82@distinct-bound-ids? (cdr bsfca@id*)))))) (set! bs283a@bsb82@distinct-bound-ids? bsb82@distinct-bound-ids?) (set! bsb84@bound-id-member? (lambda (bsfcc@id bsfcd@id*) (and (pair? bsfcd@id*) (or (bsb7c@bound-id=? bsfcc@id (car bsfcd@id*)) (bsb84@bound-id-member? bsfcc@id (cdr bsfcd@id*)))))) (set! bs283b@bsb84@bound-id-member? bsb84@bound-id-member?) (set! bsb86@self-evaluating? (lambda (bsfd0@x) (or (number? bsfd0@x) (string? bsfd0@x) (char? bsfd0@x) (boolean? bsfd0@x) (regexp? bsfd0@x) (bytevector? bsfd0@x)))) (set! bs283c@bsb86@self-evaluating? bsb86@self-evaluating?) (set! bsb88@strip-annotations (lambda (bsfd2@x) (if (pair? bsfd2@x) (cons (bsb88@strip-annotations (car bsfd2@x)) (bsb88@strip-annotations (cdr bsfd2@x))) (if (vector? bsfd2@x) (vector-map bsb88@strip-annotations bsfd2@x) (if (bs6bc@bs58e@annotation? bsfd2@x) (bs6bb@bs58c@annotation-stripped bsfd2@x) bsfd2@x))))) (set! bs283d@bsb88@strip-annotations bsb88@strip-annotations) (set! bsb8a@strip (lambda (bsfd4@x bsfd5@m*) (if (bsafe@top-marked? bsfd5@m*) (if (or (bs6bc@bs58e@annotation? bsfd4@x) (and (pair? bsfd4@x) (bs6bc@bs58e@annotation? (car bsfd4@x))) (and (vector? bsfd4@x) (> (vector-length bsfd4@x) '0) (bs6bc@bs58e@annotation? (vector-ref bsfd4@x '0)))) (bsb88@strip-annotations bsfd4@x) bsfd4@x) (let bsfda@f ((bsfd8@x bsfd4@x)) (if (bsb44@stx? bsfd8@x) (begin (if (pair? (bsb46@stx-expr bsfd8@x)) (begin (set-source-info! (bsb46@stx-expr bsfd8@x) '#f) (set-source-info! (cdr (bsb46@stx-expr bsfd8@x)) '#f) (set-source-info! (car (bsb46@stx-expr bsfd8@x)) '#f)) (void)) (bsb8a@strip (bsb46@stx-expr bsfd8@x) (bsb4a@stx-mark* bsfd8@x))) (if (bs6bc@bs58e@annotation? bsfd8@x) (bs6bb@bs58c@annotation-stripped bsfd8@x) (if (pair? bsfd8@x) (let ((bsfdc@a (bsfda@f (car bsfd8@x))) (bsfdd@d (bsfda@f (cdr bsfd8@x)))) (if (and (eq? bsfdc@a (car bsfd8@x)) (eq? bsfdd@d (cdr bsfd8@x))) bsfd8@x (cons bsfdc@a bsfdd@d))) (if (vector? bsfd8@x) (let ((bsfe0@old (vector->list bsfd8@x))) (let ((bsfe2@new (map bsfda@f bsfe0@old))) (if (for-all eq? bsfe0@old bsfe2@new) bsfd8@x (list->vector bsfe2@new)))) bsfd8@x)))))))) (set! bs283e@bsb8a@strip bsb8a@strip) (set! bsb8c@stx->datum (lambda (bsfe4@x) (bsb8a@strip bsfe4@x '()))) (set! bs283f@bsb8c@stx->datum bsb8c@stx->datum) (set! bsb8e@id->label (lambda (bsfe6@id) (or (id->real-label bsfe6@id) (let ((bsfe8@t (bse6f@top-level-context))) (if bsfe8@t ((lambda (bsfea@env) (let ((bsfec@rib (bse1f@interaction-env-rib bsfea@env))) (call-with-values (lambda () (bsb08@gen-define-label+loc bsfe6@id bsfec@rib)) (lambda (bsff2@bsfef bsff3@bsff1) (let ((bsff6@loc_ bsff3@bsff1) (bsff7@lab bsff2@bsfef)) (begin (bsb2e@extend-rib! bsfec@rib bsfe6@id bsff7@lab) bsff7@lab)))))) bsfe8@t) '#f))))) (set! bs2840@bsb8e@id->label bsb8e@id->label) (set! bsb90@label->binding (lambda (bsffa@x bsffb@r) (let ((bsffe@t (bs993@bs7e0@imported-label->binding bsffa@x))) (if bsffe@t ((lambda (bs1000@b) (if (and (pair? bs1000@b) (eq? (car bs1000@b) '$core-rtd)) (cons '$rtd (map bsd35@bless (cdr bs1000@b))) (if (and (pair? bs1000@b) (eq? (car bs1000@b) 'global-rtd)) (let ((bs1002@lib (cadr bs1000@b)) (bs1003@loc (cddr bs1000@b))) (cons '$rtd (symbol-value bs1003@loc))) bs1000@b))) bsffe@t) (let ((bs1006@t (assq bsffa@x bsffb@r))) (if bs1006@t (cdr bs1006@t) (let ((bs1008@t (bse6f@top-level-context))) (if bs1008@t ((lambda (bs100a@env) (let ((bs100c@t (assq bsffa@x (bse27@interaction-env-locs bs100a@env)))) (if bs100c@t ((lambda (bs100e@p) (cons* 'lexical (cdr bs100e@p) '#f)) bs100c@t) '(displaced-lexical . #f)))) bs1008@t) '(displaced-lexical . #f))))))))) (set! bs2841@bsb90@label->binding bsb90@label->binding) (set! bsb92@make-binding cons) (set! bs2842@bsb92@make-binding bsb92@make-binding) (set! bsb94@binding-type car) (set! bs2843@bsb94@binding-type bsb94@binding-type) (set! bsb96@binding-value cdr) (set! bs2844@bsb96@binding-value bsb96@binding-value) (set! bsb98@raise-unbound-error (lambda (bs1010@id) (bse5d@syntax-violation* '#f '"unbound identifier" bs1010@id (make-undefined-violation)))) (set! bs2845@bsb98@raise-unbound-error bsb98@raise-unbound-error) (set! bsb9a@syntax-type (lambda (bs1012@e bs1013@r) (if (bsb78@id? bs1012@e) (let ((bs1016@id bs1012@e)) (let ((bs1018@label (bsb8e@id->label bs1016@id))) (let ((bs101a@b (bsb90@label->binding bs1018@label bs1013@r))) (let ((bs101c@type (bsb94@binding-type bs101a@b))) (begin (if (not bs1018@label) (bsb98@raise-unbound-error bs1016@id) (void)) (let ((bs101e@t bs101c@type)) (if (memv bs101e@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bs101c@type (bsb96@binding-value bs101a@b) bs1016@id) (values 'other '#f '#f)))))))) (if (bsb6a@syntax-pair? bs1012@e) (let ((bs1020@id (bsb72@syntax-car bs1012@e))) (if (bsb78@id? bs1020@id) (let ((bs1022@label (bsb8e@id->label bs1020@id))) (let ((bs1024@b (bsb90@label->binding bs1022@label bs1013@r))) (let ((bs1026@type (bsb94@binding-type bs1024@b))) (begin (if (not bs1022@label) (bsb98@raise-unbound-error bs1020@id) (void)) (let ((bs1028@t bs1026@type)) (if (memv bs1028@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bs1026@type (bsb96@binding-value bs1024@b) bs1020@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bs102a@d (bsb8c@stx->datum bs1012@e))) (if (bsb86@self-evaluating? bs102a@d) (values 'constant bs102a@d '#f) (values 'other '#f '#f))))))) (set! bs2846@bsb9a@syntax-type bsb9a@syntax-type) (set! bsba8@sanitize-binding (lambda (bs102c@x bs102d@src) (if (procedure? bs102c@x) (cons* 'local-macro bs102c@x bs102d@src) (if (and (pair? bs102c@x) (eq? (car bs102c@x) 'macro!) (procedure? (cdr bs102c@x))) (cons* 'local-macro! (cdr bs102c@x) bs102d@src) (if (and (pair? bs102c@x) (eq? (car bs102c@x) '$rtd)) bs102c@x (assertion-violation 'expand '"invalid transformer" bs102c@x)))))) (set! bs2847@bsba8@sanitize-binding bsba8@sanitize-binding) (set! bsbaa@make-variable-transformer (lambda (bs1030@x) (if (procedure? bs1030@x) (cons 'macro! bs1030@x) (assertion-violation 'make-variable-transformer '"not a procedure" bs1030@x)))) (set! bs2848@bsbaa@make-variable-transformer bsbaa@make-variable-transformer) (set! bsbac@variable-transformer? (lambda (bs1032@x) (and (pair? bs1032@x) (eq? (car bs1032@x) 'macro!) (procedure? (cdr bs1032@x))))) (set! bs2849@bsbac@variable-transformer? bsbac@variable-transformer?) (set! bsbae@variable-transformer-procedure (lambda (bs1034@x) (if (bsbac@variable-transformer? bs1034@x) (cdr bs1034@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bs1034@x)))) (set! bs284a@bsbae@variable-transformer-procedure bsbae@variable-transformer-procedure) (set! bsbb0@make-eval-transformer (lambda (bs1036@x) (bsba8@sanitize-binding (eval-core (bs71e@bs6d6@expanded->core bs1036@x)) bs1036@x))) (set! bs284b@bsbb0@make-eval-transformer bsbb0@make-eval-transformer) (set! bsd01@parse-define (lambda (bs1038@x) (let ((bs103a@t bs1038@x)) (let ((bs103c@ls/false (bsd7f@syntax-dispatch bs103a@t '(_ (any . any) any . each-any)))) (if (and bs103c@ls/false (apply (lambda (bs103e@id bs103f@fmls bs1040@b bs1041@b*) (bsb78@id? bs103e@id)) bs103c@ls/false)) (apply (lambda (bs1046@id bs1047@fmls bs1048@b bs1049@b*) (begin (bsda5@verify-formals bs1047@fmls bs1038@x) (values bs1046@id (cons 'defun (cons bs1047@fmls (cons bs1048@b bs1049@b*)))))) bs103c@ls/false) (let ((bs104e@t bs103a@t)) (let ((bs1050@ls/false (bsd7f@syntax-dispatch bs104e@t '(_ any any)))) (if (and bs1050@ls/false (apply (lambda (bs1052@id bs1053@val) (bsb78@id? bs1052@id)) bs1050@ls/false)) (apply (lambda (bs1056@id bs1057@val) (values bs1056@id (cons 'expr bs1057@val))) bs1050@ls/false) (let ((bs105a@t bs104e@t)) (let ((bs105c@ls/false (bsd7f@syntax-dispatch bs105a@t '(_ any)))) (if (and bs105c@ls/false (apply (lambda (bs105e@id) (bsb78@id? bs105e@id)) bs105c@ls/false)) (apply (lambda (bs1060@id) (values bs1060@id (cons 'expr (bsd35@bless '(void))))) bs105c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs105a@t)))))))))))) (set! bs284c@bsd01@parse-define bsd01@parse-define) (set! bsd03@parse-define-syntax (lambda (bs1062@x) (let ((bs1064@t bs1062@x)) (let ((bs1066@ls/false (bsd7f@syntax-dispatch bs1064@t '(_ any any)))) (if (and bs1066@ls/false (apply (lambda (bs1068@id bs1069@val) (bsb78@id? bs1068@id)) bs1066@ls/false)) (apply (lambda (bs106c@id bs106d@val) (values bs106c@id bs106d@val)) bs1066@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1064@t)))))) (set! bs284d@bsd03@parse-define-syntax bsd03@parse-define-syntax) (set! bsd05@scheme-stx-hashtable (make-eq-hashtable)) (set! bs284e@bsd05@scheme-stx-hashtable bsd05@scheme-stx-hashtable) (set! bsd07@scheme-stx (lambda (bs1070@sym) (or (hashtable-ref bsd05@scheme-stx-hashtable bs1070@sym '#f) (let ((bs1072@subst (bs96f@bs798@library-subst (bs98d@bs7d4@find-library-by-name '(psyntax system $all))))) (let ((bs1074@stx (make-simple-struct 'stx '5 (list bs1070@sym bsafc@top-mark* '() '())))) (let ((bs1076@stx (let ((bs1078@t (assq bs1070@sym bs1072@subst))) (if bs1078@t ((lambda (bs107a@x) (let ((bs107c@name (car bs107a@x)) (bs107d@label (cdr bs107a@x))) (bsb62@add-subst (make-simple-struct 'rib '6 (list (list bs107c@name) (list bsafc@top-mark*) (list bs107d@label) '#f '#f)) bs1074@stx))) bs1078@t) bs1074@stx)))) (begin (hashtable-set! bsd05@scheme-stx-hashtable bs1070@sym bs1076@stx) bs1076@stx))))))) (set! bs284f@bsd07@scheme-stx bsd07@scheme-stx) (set! bsd09@lexical-var car) (set! bs2850@bsd09@lexical-var bsd09@lexical-var) (set! bsd0b@lexical-mutable? cdr) (set! bs2851@bsd0b@lexical-mutable? bsd0b@lexical-mutable?) (set! bsd0d@set-lexical-mutable! set-cdr!) (set! bs2852@bsd0d@set-lexical-mutable! bsd0d@set-lexical-mutable!) (set! bsd0f@add-lexical (lambda (bs1080@lab bs1081@lex bs1082@r) (cons (cons* bs1080@lab 'lexical bs1081@lex '#f) bs1082@r))) (set! bs2853@bsd0f@add-lexical bsd0f@add-lexical) (set! bsd11@add-lexicals (lambda (bs1086@lab* bs1087@lex* bs1088@r) (if (null? bs1086@lab*) bs1088@r (bsd11@add-lexicals (cdr bs1086@lab*) (cdr bs1087@lex*) (bsd0f@add-lexical (car bs1086@lab*) (car bs1087@lex*) bs1088@r))))) (set! bs2854@bsd11@add-lexicals bsd11@add-lexicals) (set! bsd13@letrec-helper (lambda (bs108c@e bs108d@r bs108e@mr bs108f@build) (let ((bs1094@t bs108c@e)) (let ((bs1096@ls/false (bsd7f@syntax-dispatch bs1094@t '(_ #(each (any any)) any . each-any)))) (if bs1096@ls/false (apply (lambda (bs1098@lhs* bs1099@rhs* bs109a@b bs109b@b*) (if (not (bsb80@valid-bound-ids? bs1098@lhs*)) (bsd39@invalid-fmls-error bs108c@e bs1098@lhs*) (let ((bs10a0@lex* (map bsb00@gen-lexical bs1098@lhs*)) (bs10a1@lab* (map bsb04@gen-label bs1098@lhs*))) (let ((bs10a4@rib (bsb38@make-full-rib bs1098@lhs* bs10a1@lab*)) (bs10a5@r (bsd11@add-lexicals bs10a1@lab* bs10a0@lex* bs108d@r))) (let ((bs10a8@body (bsdb7@chi-internal (bsb62@add-subst bs10a4@rib (cons bs109a@b bs109b@b*)) bs10a5@r bs108e@mr)) (bs10a9@rhs* (bsd9d@chi-expr* (map (lambda (bs10ac@x) (bsb62@add-subst bs10a4@rib bs10ac@x)) bs1099@rhs*) bs10a5@r bs108e@mr))) (bs108f@build '#f bs10a0@lex* bs10a9@rhs* bs10a8@body)))))) bs1096@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1094@t)))))) (set! bs2855@bsd13@letrec-helper bsd13@letrec-helper) (set! bsd15@let-transformer (lambda (bs10ae@e bs10af@r bs10b0@mr) (let ((bs10b4@t bs10ae@e)) (let ((bs10b6@ls/false (bsd7f@syntax-dispatch bs10b4@t '(_ #(each (any any)) any . each-any)))) (if bs10b6@ls/false (apply (lambda (bs10b8@lhs* bs10b9@rhs* bs10ba@b bs10bb@b*) (if (not (bsb80@valid-bound-ids? bs10b8@lhs*)) (bsd39@invalid-fmls-error bs10ae@e bs10b8@lhs*) (let ((bs10c0@lex* (map bsb00@gen-lexical bs10b8@lhs*)) (bs10c1@lab* (map bsb04@gen-label bs10b8@lhs*)) (bs10c2@rhs* (bsd9d@chi-expr* bs10b9@rhs* bs10af@r bs10b0@mr))) (let ((bs10c6@rib (bsb38@make-full-rib bs10b8@lhs* bs10c1@lab*)) (bs10c7@r (bsd11@add-lexicals bs10c1@lab* bs10c0@lex* bs10af@r))) (let ((bs10ca@body (bsdb7@chi-internal (bsb62@add-subst bs10c6@rib (cons bs10ba@b bs10bb@b*)) bs10c7@r bs10b0@mr))) (bsae0@bsa43@build-let '#f bs10c0@lex* bs10c2@rhs* bs10ca@body)))))) bs10b6@ls/false) (let ((bs10cc@t bs10b4@t)) (let ((bs10ce@ls/false (bsd7f@syntax-dispatch bs10cc@t '(_ any #(each (any any)) any . each-any)))) (if bs10ce@ls/false (apply (lambda (bs10d0@loop bs10d1@lhs* bs10d2@rhs* bs10d3@b bs10d4@b*) (if (not (bsb80@valid-bound-ids? bs10d1@lhs*)) (bsd39@invalid-fmls-error bs10ae@e bs10d1@lhs*) (let ((bs10da@lex* (map bsb00@gen-lexical bs10d1@lhs*)) (bs10db@lab* (map bsb04@gen-label bs10d1@lhs*)) (bs10dc@rhs* (bsd9d@chi-expr* bs10d2@rhs* bs10af@r bs10b0@mr)) (bs10dd@loop-lex (bsb00@gen-lexical bs10d0@loop)) (bs10de@loop-lab (bsb04@gen-label bs10d0@loop))) (let ((bs10e4@loop-rib (bsb38@make-full-rib (list bs10d0@loop) (list bs10de@loop-lab))) (bs10e5@rib (bsb38@make-full-rib bs10d1@lhs* bs10db@lab*)) (bs10e6@r (bsd11@add-lexicals (cons bs10de@loop-lab bs10db@lab*) (cons bs10dd@loop-lex bs10da@lex*) bs10af@r))) (let ((bs10ea@body (bsdb7@chi-internal (bsb62@add-subst bs10e4@loop-rib (bsb62@add-subst bs10e5@rib (cons bs10d3@b bs10d4@b*))) bs10e6@r bs10b0@mr))) (bsae1@bsa45@build-named-let '#f bs10dd@loop-lex bs10da@lex* bs10dc@rhs* bs10ea@body)))))) bs10ce@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs10cc@t))))))))) (set! bs2856@bsd15@let-transformer bsd15@let-transformer) (set! bsd17@letrec-transformer (lambda (bs10ec@e bs10ed@r bs10ee@mr) (bsd13@letrec-helper bs10ec@e bs10ed@r bs10ee@mr bsadf@bsa41@build-letrec))) (set! bs2857@bsd17@letrec-transformer bsd17@letrec-transformer) (set! bsd19@letrec*-transformer (lambda (bs10f2@e bs10f3@r bs10f4@mr) (bsd13@letrec-helper bs10f2@e bs10f3@r bs10f4@mr bsae2@bsa47@build-letrec*))) (set! bs2858@bsd19@letrec*-transformer bsd19@letrec*-transformer) (set! bsd1b@fluid-let-syntax-transformer (lambda (bs10f8@e bs10f9@r bs10fa@mr) (letrec* ((bs10ff@lookup (lambda (bs1112@x) (or (bsb8e@id->label bs1112@x) (bse5f@syntax-violation '#f '"unbound identifier" bs10f8@e bs1112@x))))) (let ((bs1100@t bs10f8@e)) (let ((bs1102@ls/false (bsd7f@syntax-dispatch bs1100@t '(_ #(each (any any)) any . each-any)))) (if bs1102@ls/false (apply (lambda (bs1104@lhs* bs1105@rhs* bs1106@b bs1107@b*) (if (not (bsb80@valid-bound-ids? bs1104@lhs*)) (bsd39@invalid-fmls-error bs10f8@e bs1104@lhs*) (let ((bs110c@lab* (map bs10ff@lookup bs1104@lhs*)) (bs110d@rhs* (map (lambda (bs1110@x) (bsbb0@make-eval-transformer (bsdd9@expand-transformer bs1110@x bs10fa@mr))) bs1105@rhs*))) (bsdb7@chi-internal (cons bs1106@b bs1107@b*) (append (map cons bs110c@lab* bs110d@rhs*) bs10f9@r) (append (map cons bs110c@lab* bs110d@rhs*) bs10fa@mr))))) bs1102@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1100@t))))))) (set! bs2859@bsd1b@fluid-let-syntax-transformer bsd1b@fluid-let-syntax-transformer) (set! bsd1d@type-descriptor-transformer (lambda (bs1114@e bs1115@r bs1116@mr) (let ((bs111a@t bs1114@e)) (let ((bs111c@ls/false (bsd7f@syntax-dispatch bs111a@t '(_ any)))) (if (and bs111c@ls/false (apply (lambda (bs111e@id) (bsb78@id? bs111e@id)) bs111c@ls/false)) (apply (lambda (bs1120@id) (let ((bs1122@lab (bsb8e@id->label bs1120@id))) (let ((bs1124@b (bsb90@label->binding bs1122@lab bs1115@r))) (let ((bs1126@type (bsb94@binding-type bs1124@b))) (begin (if (not bs1122@lab) (bsb98@raise-unbound-error bs1120@id) (void)) (if (not (and (eq? bs1126@type '$rtd) (not (list? (bsb96@binding-value bs1124@b))))) (bse5f@syntax-violation '#f '"not a record type" bs1114@e) (void)) (list 'quote (bsb96@binding-value bs1124@b))))))) bs111c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs111a@t)))))) (set! bs285a@bsd1d@type-descriptor-transformer bsd1d@type-descriptor-transformer) (set! bsd1f@record-type-descriptor-transformer (lambda (bs1128@e bs1129@r bs112a@mr) (let ((bs112e@t bs1128@e)) (let ((bs1130@ls/false (bsd7f@syntax-dispatch bs112e@t '(_ any)))) (if (and bs1130@ls/false (apply (lambda (bs1132@id) (bsb78@id? bs1132@id)) bs1130@ls/false)) (apply (lambda (bs1134@id) (let ((bs1136@lab (bsb8e@id->label bs1134@id))) (let ((bs1138@b (bsb90@label->binding bs1136@lab bs1129@r))) (let ((bs113a@type (bsb94@binding-type bs1138@b))) (begin (if (not bs1136@lab) (bsb98@raise-unbound-error bs1134@id) (void)) (if (not (and (eq? bs113a@type '$rtd) (list? (bsb96@binding-value bs1138@b)))) (bse5f@syntax-violation '#f '"not a record type" bs1128@e) (void)) (bsda1@chi-expr (car (bsb96@binding-value bs1138@b)) bs1129@r bs112a@mr)))))) bs1130@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs112e@t)))))) (set! bs285b@bsd1f@record-type-descriptor-transformer bsd1f@record-type-descriptor-transformer) (set! bsd21@record-constructor-descriptor-transformer (lambda (bs113c@e bs113d@r bs113e@mr) (let ((bs1142@t bs113c@e)) (let ((bs1144@ls/false (bsd7f@syntax-dispatch bs1142@t '(_ any)))) (if (and bs1144@ls/false (apply (lambda (bs1146@id) (bsb78@id? bs1146@id)) bs1144@ls/false)) (apply (lambda (bs1148@id) (let ((bs114a@lab (bsb8e@id->label bs1148@id))) (let ((bs114c@b (bsb90@label->binding bs114a@lab bs113d@r))) (let ((bs114e@type (bsb94@binding-type bs114c@b))) (begin (if (not bs114a@lab) (bsb98@raise-unbound-error bs1148@id) (void)) (if (not (and (eq? bs114e@type '$rtd) (list? (bsb96@binding-value bs114c@b)))) (bse5f@syntax-violation '#f '"invalid type" bs113c@e) (void)) (bsda1@chi-expr (cadr (bsb96@binding-value bs114c@b)) bs113d@r bs113e@mr)))))) bs1144@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1142@t)))))) (set! bs285c@bsd21@record-constructor-descriptor-transformer bsd21@record-constructor-descriptor-transformer) (set! bsd23@when-macro (lambda (bs1150@e) (let ((bs1152@t bs1150@e)) (let ((bs1154@ls/false (bsd7f@syntax-dispatch bs1152@t '(_ any any . each-any)))) (if bs1154@ls/false (apply (lambda (bs1156@test bs1157@e bs1158@e*) (bsd35@bless (list 'if bs1156@test (cons 'begin (cons bs1157@e bs1158@e*))))) bs1154@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1152@t)))))) (set! bs285d@bsd23@when-macro bsd23@when-macro) (set! bsd25@unless-macro (lambda (bs115c@e) (let ((bs115e@t bs115c@e)) (let ((bs1160@ls/false (bsd7f@syntax-dispatch bs115e@t '(_ any any . each-any)))) (if bs1160@ls/false (apply (lambda (bs1162@test bs1163@e bs1164@e*) (bsd35@bless (list 'if (list 'not bs1162@test) (cons 'begin (cons bs1163@e bs1164@e*))))) bs1160@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs115e@t)))))) (set! bs285e@bsd25@unless-macro bsd25@unless-macro) (set! bsd27@if-transformer (lambda (bs1168@e bs1169@r bs116a@mr) (let ((bs116e@t bs1168@e)) (let ((bs1170@ls/false (bsd7f@syntax-dispatch bs116e@t '(_ any any any)))) (if bs1170@ls/false (apply (lambda (bs1172@e0 bs1173@e1 bs1174@e2) (list 'if (bsda1@chi-expr bs1172@e0 bs1169@r bs116a@mr) (bsda1@chi-expr bs1173@e1 bs1169@r bs116a@mr) (bsda1@chi-expr bs1174@e2 bs1169@r bs116a@mr))) bs1170@ls/false) (let ((bs1178@t bs116e@t)) (let ((bs117a@ls/false (bsd7f@syntax-dispatch bs1178@t '(_ any any)))) (if bs117a@ls/false (apply (lambda (bs117c@e0 bs117d@e1) (list 'if (bsda1@chi-expr bs117c@e0 bs1169@r bs116a@mr) (bsda1@chi-expr bs117d@e1 bs1169@r bs116a@mr) (bsade@bsa3f@build-void))) bs117a@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1178@t))))))))) (set! bs285f@bsd27@if-transformer bsd27@if-transformer) (set! bsd29@and-transformer (lambda (bs1180@e bs1181@r bs1182@mr) (let ((bs1186@t bs1180@e)) (let ((bs1188@ls/false (bsd7f@syntax-dispatch bs1186@t '(_ . each-any)))) (if bs1188@ls/false (apply (lambda (bs118a@e*) (cons 'and (bsd9d@chi-expr* bs118a@e* bs1181@r bs1182@mr))) bs1188@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1186@t)))))) (set! bs2860@bsd29@and-transformer bsd29@and-transformer) (set! bsd2b@or-transformer (lambda (bs118c@e bs118d@r bs118e@mr) (let ((bs1192@t bs118c@e)) (let ((bs1194@ls/false (bsd7f@syntax-dispatch bs1192@t '(_ . each-any)))) (if bs1194@ls/false (apply (lambda (bs1196@e*) (cons 'or (bsd9d@chi-expr* bs1196@e* bs118d@r bs118e@mr))) bs1194@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1192@t)))))) (set! bs2861@bsd2b@or-transformer bsd2b@or-transformer) (set! bsd2d@case-macro (lambda (bs1198@e) (letrec* ((bs119b@build-last (lambda (bs11c2@cls) (let ((bs11c4@t bs11c2@cls)) (let ((bs11c6@ls/false (bsd7f@syntax-dispatch bs11c4@t '(#(scheme-id else) any . each-any)))) (if bs11c6@ls/false (apply (lambda (bs11c8@e bs11c9@e*) (cons 'begin (cons bs11c8@e bs11c9@e*))) bs11c6@ls/false) (let ((bs11cc@t bs11c4@t)) (let ((bs11ce@ls/false (bsd7f@syntax-dispatch bs11cc@t '_))) (if bs11ce@ls/false (apply (lambda () (bs119d@build-one bs11c2@cls '(if #f #f))) bs11ce@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11cc@t))))))))) (bs119d@build-one (lambda (bs11b4@cls bs11b5@k) (let ((bs11b8@t bs11b4@cls)) (let ((bs11ba@ls/false (bsd7f@syntax-dispatch bs11b8@t '(each-any any . each-any)))) (if bs11ba@ls/false (apply (lambda (bs11bc@d* bs11bd@e bs11be@e*) (list 'if (list 'memv 't (list 'quote bs11bc@d*)) (cons 'begin (cons bs11bd@e bs11be@e*)) bs11b5@k)) bs11ba@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11b8@t))))))) (let ((bs119e@t bs1198@e)) (let ((bs11a0@ls/false (bsd7f@syntax-dispatch bs119e@t '(_ any)))) (if bs11a0@ls/false (apply (lambda (bs11a2@expr) (bsd35@bless (cons 'let (cons (list (list 't bs11a2@expr)) '((if #f #f)))))) bs11a0@ls/false) (let ((bs11a4@t bs119e@t)) (let ((bs11a6@ls/false (bsd7f@syntax-dispatch bs11a4@t '(_ any any . each-any)))) (if bs11a6@ls/false (apply (lambda (bs11a8@expr bs11a9@cls bs11aa@cls*) (bsd35@bless (list 'let (list (list 't bs11a8@expr)) (let bs11b2@f ((bs11ae@cls bs11a9@cls) (bs11af@cls* bs11aa@cls*)) (if (null? bs11af@cls*) (bs119b@build-last bs11ae@cls) (bs119d@build-one bs11ae@cls (bs11b2@f (car bs11af@cls*) (cdr bs11af@cls*)))))))) bs11a6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11a4@t)))))))))) (set! bs2862@bsd2d@case-macro bsd2d@case-macro) (set! bsd2f@quote-transformer (lambda (bs11d0@e bs11d1@r bs11d2@mr) (let ((bs11d6@t bs11d0@e)) (let ((bs11d8@ls/false (bsd7f@syntax-dispatch bs11d6@t '(_ any)))) (if bs11d8@ls/false (apply (lambda (bs11da@datum) (list 'quote (bsb8c@stx->datum bs11da@datum))) bs11d8@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11d6@t)))))) (set! bs2863@bsd2f@quote-transformer bsd2f@quote-transformer) (set! bsd31@case-lambda-transformer (lambda (bs11dc@e bs11dd@r bs11de@mr) (let ((bs11e2@t bs11dc@e)) (let ((bs11e4@ls/false (bsd7f@syntax-dispatch bs11e2@t '(_ . #(each (any any . each-any)))))) (if bs11e4@ls/false (apply (lambda (bs11e6@fmls* bs11e7@b* bs11e8@b**) (call-with-values (lambda () (bsda9@chi-lambda-clause* bs11dc@e bs11e6@fmls* (map cons bs11e7@b* bs11e8@b**) bs11dd@r bs11de@mr)) (lambda (bs11f0@bs11ed bs11f1@bs11ef) (let ((bs11f4@body* bs11f1@bs11ef) (bs11f5@fmls* bs11f0@bs11ed)) (bsadc@bsa0f@build-case-lambda '#f bs11f5@fmls* bs11f4@body*))))) bs11e4@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11e2@t)))))) (set! bs2864@bsd31@case-lambda-transformer bsd31@case-lambda-transformer) (set! bsd33@lambda-transformer (lambda (bs11f8@e bs11f9@r bs11fa@mr) (let ((bs11fe@t bs11f8@e)) (let ((bs1200@ls/false (bsd7f@syntax-dispatch bs11fe@t '(_ any any . each-any)))) (if bs1200@ls/false (apply (lambda (bs1202@fmls bs1203@b bs1204@b*) (call-with-values (lambda () (bsda7@chi-lambda-clause bs11f8@e bs1202@fmls (cons bs1203@b bs1204@b*) bs11f9@r bs11fa@mr)) (lambda (bs120c@bs1209 bs120d@bs120b) (let ((bs1210@body bs120d@bs120b) (bs1211@fmls bs120c@bs1209)) (bsadb@bsa0d@build-lambda '#f bs1211@fmls bs1210@body))))) bs1200@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs11fe@t)))))) (set! bs2865@bsd33@lambda-transformer bsd33@lambda-transformer) (set! bsd35@bless (lambda (bs1214@x) (bsb60@mkstx (let bs1218@f ((bs1216@x bs1214@x)) (if (bsb44@stx? bs1216@x) bs1216@x (if (pair? bs1216@x) (cons (bs1218@f (car bs1216@x)) (bs1218@f (cdr bs1216@x))) (if (symbol? bs1216@x) (bsd07@scheme-stx bs1216@x) (if (vector? bs1216@x) (vector-map bs1218@f bs1216@x) bs1216@x))))) '() '() '()))) (set! bs2866@bsd35@bless bsd35@bless) (set! bsd37@with-syntax-macro (lambda (bs121a@e) (let ((bs121c@t bs121a@e)) (let ((bs121e@ls/false (bsd7f@syntax-dispatch bs121c@t '(_ #(each (any any)) any . each-any)))) (if bs121e@ls/false (apply (lambda (bs1220@pat* bs1221@expr* bs1222@b bs1223@b*) (let ((bs1228@idn* (let bs122c@f ((bs122a@pat* bs1220@pat*)) (if (null? bs122a@pat*) '() (call-with-values (lambda () (bsd7d@convert-pattern (car bs122a@pat*) '())) (lambda (bs1232@bs122f bs1233@bs1231) (let ((bs1236@idn* bs1233@bs1231) (bs1237@pat bs1232@bs122f)) (append bs1236@idn* (bs122c@f (cdr bs122a@pat*)))))))))) (begin (bsda5@verify-formals (map car bs1228@idn*) bs121a@e) (let ((bs123a@t* (bse4d@generate-temporaries bs1221@expr*))) (bsd35@bless (list 'let (map list bs123a@t* bs1221@expr*) (let bs1240@f ((bs123c@pat* bs1220@pat*) (bs123d@t* bs123a@t*)) (if (null? bs123c@pat*) (cons 'let (cons '() (cons bs1222@b bs1223@b*))) (list 'syntax-case (car bs123d@t*) '() (list (car bs123c@pat*) (bs1240@f (cdr bs123c@pat*) (cdr bs123d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bs123c@pat*)) (car bs123d@t*)))))))))))) bs121e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs121c@t)))))) (set! bs2867@bsd37@with-syntax-macro bsd37@with-syntax-macro) (set! bsd39@invalid-fmls-error (lambda (bs1242@stx bs1243@fmls) (let ((bs1246@t bs1243@fmls)) (let ((bs1248@ls/false (bsd7f@syntax-dispatch bs1246@t '#(each+ any () any)))) (if bs1248@ls/false (apply (lambda (bs124a@id* bs124b@last) (let bs1250@f ((bs124e@id* (if (bsb78@id? bs124b@last) (cons bs124b@last bs124a@id*) (if (bsb6e@syntax-null? bs124b@last) bs124a@id* (bse5f@syntax-violation '#f '"not an identifier" bs1242@stx bs124b@last))))) (if (null? bs124e@id*) (values) (if (not (bsb78@id? (car bs124e@id*))) (bse5f@syntax-violation '#f '"not an identifier" bs1242@stx (car bs124e@id*)) (begin (bs1250@f (cdr bs124e@id*)) (if (bsb84@bound-id-member? (car bs124e@id*) (cdr bs124e@id*)) (bse5f@syntax-violation '#f '"duplicate binding" bs1242@stx (car bs124e@id*)) (void))))))) bs1248@ls/false) (let ((bs1252@t bs1246@t)) (let ((bs1254@ls/false (bsd7f@syntax-dispatch bs1252@t '_))) (if bs1254@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"malformed binding form" bs1242@stx bs1243@fmls)) bs1254@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1252@t))))))))) (set! bs2868@bsd39@invalid-fmls-error bsd39@invalid-fmls-error) (set! bsd3b@let-macro (lambda (bs1256@stx) (let ((bs1258@t bs1256@stx)) (let ((bs125a@ls/false (bsd7f@syntax-dispatch bs1258@t '(_ #(each (any any)) any . each-any)))) (if bs125a@ls/false (apply (lambda (bs125c@lhs* bs125d@rhs* bs125e@b bs125f@b*) (if (bsb80@valid-bound-ids? bs125c@lhs*) (bsd35@bless (cons (cons 'lambda (cons bs125c@lhs* (cons bs125e@b bs125f@b*))) bs125d@rhs*)) (bsd39@invalid-fmls-error bs1256@stx bs125c@lhs*))) bs125a@ls/false) (let ((bs1264@t bs1258@t)) (let ((bs1266@ls/false (bsd7f@syntax-dispatch bs1264@t '(_ any #(each (any any)) any . each-any)))) (if (and bs1266@ls/false (apply (lambda (bs1268@f bs1269@lhs* bs126a@rhs* bs126b@b bs126c@b*) (bsb78@id? bs1268@f)) bs1266@ls/false)) (apply (lambda (bs1272@f bs1273@lhs* bs1274@rhs* bs1275@b bs1276@b*) (if (bsb80@valid-bound-ids? bs1273@lhs*) (bsd35@bless (cons (list 'letrec (list (list bs1272@f (cons 'lambda (cons bs1273@lhs* (cons bs1275@b bs1276@b*))))) bs1272@f) bs1274@rhs*)) (bsd39@invalid-fmls-error bs1256@stx bs1273@lhs*))) bs1266@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1264@t))))))))) (set! bs2869@bsd3b@let-macro bsd3b@let-macro) (set! bsd3d@let-values-macro (lambda (bs127c@stx) (letrec* ((bs127f@rename (lambda (bs12e4@x bs12e5@old* bs12e6@new*) (begin (if (not (bsb78@id? bs12e4@x)) (bse5f@syntax-violation '#f '"not an indentifier" bs127c@stx bs12e4@x) (void)) (if (bsb84@bound-id-member? bs12e4@x bs12e5@old*) (bse5f@syntax-violation '#f '"duplicate binding" bs127c@stx bs12e4@x) (void)) (let ((bs12ea@y (gensym (bse65@syntax->datum bs12e4@x)))) (values bs12ea@y (cons bs12e4@x bs12e5@old*) (cons bs12ea@y bs12e6@new*)))))) (bs1281@rename* (lambda (bs12d2@x* bs12d3@old* bs12d4@new*) (if (null? bs12d2@x*) (values '() bs12d3@old* bs12d4@new*) (call-with-values (lambda () (bs127f@rename (car bs12d2@x*) bs12d3@old* bs12d4@new*)) (lambda (bs12d8@x bs12d9@old* bs12da@new*) (call-with-values (lambda () (bs1281@rename* (cdr bs12d2@x*) bs12d9@old* bs12da@new*)) (lambda (bs12de@x* bs12df@old* bs12e0@new*) (values (cons bs12d8@x bs12de@x*) bs12df@old* bs12e0@new*))))))))) (let ((bs1282@t bs127c@stx)) (let ((bs1284@ls/false (bsd7f@syntax-dispatch bs1282@t '(_ () any . each-any)))) (if bs1284@ls/false (apply (lambda (bs1286@b bs1287@b*) (cons* (bsd35@bless 'let) '() bs1286@b bs1287@b*)) bs1284@ls/false) (let ((bs128a@t bs1282@t)) (let ((bs128c@ls/false (bsd7f@syntax-dispatch bs128a@t '(_ #(each (any any)) any . each-any)))) (if bs128c@ls/false (apply (lambda (bs128e@lhs* bs128f@rhs* bs1290@b bs1291@b*) (bsd35@bless (let bs129e@f ((bs1296@lhs* bs128e@lhs*) (bs1297@rhs* bs128f@rhs*) (bs1298@old* '()) (bs1299@new* '())) (if (null? bs1296@lhs*) (cons 'let (cons (map list bs1298@old* bs1299@new*) (cons bs1290@b bs1291@b*))) (let ((bs12a0@t (car bs1296@lhs*))) (let ((bs12a2@ls/false (bsd7f@syntax-dispatch bs12a0@t 'each-any))) (if bs12a2@ls/false (apply (lambda (bs12a4@x*) (call-with-values (lambda () (bs1281@rename* bs12a4@x* bs1298@old* bs1299@new*)) (lambda (bs12ac@bs12a7 bs12ad@bs12a9 bs12ae@bs12ab) (let ((bs12b2@new* bs12ae@bs12ab) (bs12b3@old* bs12ad@bs12a9) (bs12b4@y* bs12ac@bs12a7)) (list 'call-with-values (list 'lambda '() (car bs1297@rhs*)) (list 'lambda bs12b4@y* (bs129e@f (cdr bs1296@lhs*) (cdr bs1297@rhs*) bs12b3@old* bs12b2@new*))))))) bs12a2@ls/false) (let ((bs12b8@t bs12a0@t)) (let ((bs12ba@ls/false (bsd7f@syntax-dispatch bs12b8@t '#(each+ any () any)))) (if bs12ba@ls/false (apply (lambda (bs12bc@x* bs12bd@x) (call-with-values (lambda () (bs127f@rename bs12bd@x bs1298@old* bs1299@new*)) (lambda (bs12c0@y bs12c1@old* bs12c2@new*) (call-with-values (lambda () (bs1281@rename* bs12bc@x* bs12c1@old* bs12c2@new*)) (lambda (bs12c6@y* bs12c7@old* bs12c8@new*) (list 'call-with-values (list 'lambda '() (car bs1297@rhs*)) (list 'lambda (append bs12c6@y* bs12c0@y) (bs129e@f (cdr bs1296@lhs*) (cdr bs1297@rhs*) bs12c7@old* bs12c8@new*)))))))) bs12ba@ls/false) (let ((bs12cc@t bs12b8@t)) (let ((bs12ce@ls/false (bsd7f@syntax-dispatch bs12cc@t 'any))) (if bs12ce@ls/false (apply (lambda (bs12d0@others) (bse5f@syntax-violation '#f '"malformed bindings" bs127c@stx bs12d0@others)) bs12ce@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs12cc@t)))))))))))))) bs128c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs128a@t)))))))))) (set! bs286a@bsd3d@let-values-macro bsd3d@let-values-macro) (set! bsd3f@let*-values-macro (lambda (bs12ec@stx) (letrec* ((bs12ef@check (lambda (bs131e@x*) (if (not (null? bs131e@x*)) (let ((bs1320@x (car bs131e@x*))) (begin (if (not (bsb78@id? bs1320@x)) (bse5f@syntax-violation '#f '"not an identifier" bs12ec@stx bs1320@x) (void)) (bs12ef@check (cdr bs131e@x*)) (if (bsb84@bound-id-member? bs1320@x (cdr bs131e@x*)) (bse5f@syntax-violation '#f '"duplicate identifier" bs12ec@stx bs1320@x) (void)))) (void))))) (let ((bs12f0@t bs12ec@stx)) (let ((bs12f2@ls/false (bsd7f@syntax-dispatch bs12f0@t '(_ () any . each-any)))) (if bs12f2@ls/false (apply (lambda (bs12f4@b bs12f5@b*) (cons* (bsd35@bless 'let) '() bs12f4@b bs12f5@b*)) bs12f2@ls/false) (let ((bs12f8@t bs12f0@t)) (let ((bs12fa@ls/false (bsd7f@syntax-dispatch bs12f8@t '(_ #(each (any any)) any . each-any)))) (if bs12fa@ls/false (apply (lambda (bs12fc@lhs* bs12fd@rhs* bs12fe@b bs12ff@b*) (bsd35@bless (let bs1308@f ((bs1304@lhs* bs12fc@lhs*) (bs1305@rhs* bs12fd@rhs*)) (if (null? bs1304@lhs*) (cons 'begin (cons bs12fe@b bs12ff@b*)) (let ((bs130a@t (car bs1304@lhs*))) (let ((bs130c@ls/false (bsd7f@syntax-dispatch bs130a@t 'each-any))) (if bs130c@ls/false (apply (lambda (bs130e@x*) (begin (bs12ef@check bs130e@x*) (list 'call-with-values (list 'lambda '() (car bs1305@rhs*)) (list 'lambda bs130e@x* (bs1308@f (cdr bs1304@lhs*) (cdr bs1305@rhs*)))))) bs130c@ls/false) (let ((bs1310@t bs130a@t)) (let ((bs1312@ls/false (bsd7f@syntax-dispatch bs1310@t '#(each+ any () any)))) (if bs1312@ls/false (apply (lambda (bs1314@x* bs1315@x) (begin (bs12ef@check (cons bs1315@x bs1314@x*)) (list 'call-with-values (list 'lambda '() (car bs1305@rhs*)) (list 'lambda (append bs1314@x* bs1315@x) (bs1308@f (cdr bs1304@lhs*) (cdr bs1305@rhs*)))))) bs1312@ls/false) (let ((bs1318@t bs1310@t)) (let ((bs131a@ls/false (bsd7f@syntax-dispatch bs1318@t 'any))) (if bs131a@ls/false (apply (lambda (bs131c@others) (bse5f@syntax-violation '#f '"malformed bindings" bs12ec@stx bs131c@others)) bs131a@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1318@t)))))))))))))) bs12fa@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs12f8@t)))))))))) (set! bs286b@bsd3f@let*-values-macro bsd3f@let*-values-macro) (set! bsd41@trace-lambda-macro (lambda (bs1322@stx) (let ((bs1324@t bs1322@stx)) (let ((bs1326@ls/false (bsd7f@syntax-dispatch bs1324@t '(_ any each-any any . each-any)))) (if bs1326@ls/false (apply (lambda (bs1328@who bs1329@fmls bs132a@b bs132b@b*) (if (bsb80@valid-bound-ids? bs1329@fmls) (bsd35@bless (list 'make-traced-procedure (list 'quote bs1328@who) (cons 'lambda (cons bs1329@fmls (cons bs132a@b bs132b@b*))))) (bsd39@invalid-fmls-error bs1322@stx bs1329@fmls))) bs1326@ls/false) (let ((bs1330@t bs1324@t)) (let ((bs1332@ls/false (bsd7f@syntax-dispatch bs1330@t '(_ any #(each+ any () any) any . each-any)))) (if bs1332@ls/false (apply (lambda (bs1334@who bs1335@fmls bs1336@last bs1337@b bs1338@b*) (if (bsb80@valid-bound-ids? (cons bs1336@last bs1335@fmls)) (bsd35@bless (list 'make-traced-procedure (list 'quote bs1334@who) (cons 'lambda (cons (append bs1335@fmls bs1336@last) (cons bs1337@b bs1338@b*))))) (bsd39@invalid-fmls-error bs1322@stx (append bs1335@fmls bs1336@last)))) bs1332@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1330@t))))))))) (set! bs286c@bsd41@trace-lambda-macro bsd41@trace-lambda-macro) (set! bsd43@trace-define-macro (lambda (bs133e@stx) (let ((bs1340@t bs133e@stx)) (let ((bs1342@ls/false (bsd7f@syntax-dispatch bs1340@t '(_ (any . each-any) any . each-any)))) (if bs1342@ls/false (apply (lambda (bs1344@who bs1345@fmls bs1346@b bs1347@b*) (if (bsb80@valid-bound-ids? bs1345@fmls) (bsd35@bless (list 'define bs1344@who (list 'make-traced-procedure (list 'quote bs1344@who) (cons 'lambda (cons bs1345@fmls (cons bs1346@b bs1347@b*)))))) (bsd39@invalid-fmls-error bs133e@stx bs1345@fmls))) bs1342@ls/false) (let ((bs134c@t bs1340@t)) (let ((bs134e@ls/false (bsd7f@syntax-dispatch bs134c@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bs134e@ls/false (apply (lambda (bs1350@who bs1351@fmls bs1352@last bs1353@b bs1354@b*) (if (bsb80@valid-bound-ids? (cons bs1352@last bs1351@fmls)) (bsd35@bless (list 'define bs1350@who (list 'make-traced-procedure (list 'quote bs1350@who) (cons 'lambda (cons (append bs1351@fmls bs1352@last) (cons bs1353@b bs1354@b*)))))) (bsd39@invalid-fmls-error bs133e@stx (append bs1351@fmls bs1352@last)))) bs134e@ls/false) (let ((bs135a@t bs134c@t)) (let ((bs135c@ls/false (bsd7f@syntax-dispatch bs135a@t '(_ any any)))) (if bs135c@ls/false (apply (lambda (bs135e@who bs135f@expr) (if (bsb78@id? bs135e@who) (bsd35@bless (list 'define bs135e@who (list 'let (list (list 'v bs135f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bs135e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bse5f@syntax-violation '#f '"invalid name" bs133e@stx))) bs135c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs135a@t)))))))))))) (set! bs286d@bsd43@trace-define-macro bsd43@trace-define-macro) (set! bsd45@trace-define-syntax-macro (lambda (bs1362@stx) (let ((bs1364@t bs1362@stx)) (let ((bs1366@ls/false (bsd7f@syntax-dispatch bs1364@t '(_ any any)))) (if bs1366@ls/false (apply (lambda (bs1368@who bs1369@expr) (if (bsb78@id? bs1368@who) (bsd35@bless (list 'define-syntax bs1368@who (list 'make-traced-macro (list 'quote bs1368@who) bs1369@expr))) (bse5f@syntax-violation '#f '"invalid name" bs1362@stx))) bs1366@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1364@t)))))) (set! bs286e@bsd45@trace-define-syntax-macro bsd45@trace-define-syntax-macro) (set! bsd47@trace-let/rec-syntax (lambda (bs136c@who) (lambda (bs136e@stx) (let ((bs1370@t bs136e@stx)) (let ((bs1372@ls/false (bsd7f@syntax-dispatch bs1370@t '(_ #(each (any any)) any . each-any)))) (if bs1372@ls/false (apply (lambda (bs1374@lhs* bs1375@rhs* bs1376@b bs1377@b*) (if (bsb80@valid-bound-ids? bs1374@lhs*) (let ((bs137c@rhs* (map (lambda (bs137e@lhs bs137f@rhs) (list 'make-traced-macro (list 'quote bs137e@lhs) bs137f@rhs)) bs1374@lhs* bs1375@rhs*))) (bsd35@bless (cons bs136c@who (cons (map list bs1374@lhs* bs137c@rhs*) (cons bs1376@b bs1377@b*))))) (bsd39@invalid-fmls-error bs136e@stx bs1374@lhs*))) bs1372@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1370@t))))))) (set! bs286f@bsd47@trace-let/rec-syntax bsd47@trace-let/rec-syntax) (set! bsd49@trace-let-syntax-macro (bsd47@trace-let/rec-syntax 'let-syntax)) (set! bs2870@bsd49@trace-let-syntax-macro bsd49@trace-let-syntax-macro) (set! bsd4b@trace-letrec-syntax-macro (bsd47@trace-let/rec-syntax 'letrec-syntax)) (set! bs2871@bsd4b@trace-letrec-syntax-macro bsd4b@trace-letrec-syntax-macro) (set! bsd4d@guard-macro (lambda (bs1382@x) (letrec* ((bs1385@gen-clauses (lambda (bs139c@con bs139d@outerk bs139e@clause*) (letrec* ((bs13a3@f (lambda (bs13dc@x bs13dd@k) (let ((bs13e0@t bs13dc@x)) (let ((bs13e2@ls/false (bsd7f@syntax-dispatch bs13e0@t '(any #(scheme-id =>) any)))) (if bs13e2@ls/false (apply (lambda (bs13e4@e bs13e5@p) (let ((bs13e8@t (gensym))) (list 'let (list (list bs13e8@t bs13e4@e)) (list 'if bs13e8@t (list bs13e5@p bs13e8@t) bs13dd@k)))) bs13e2@ls/false) (let ((bs13ea@t bs13e0@t)) (let ((bs13ec@ls/false (bsd7f@syntax-dispatch bs13ea@t '(any)))) (if bs13ec@ls/false (apply (lambda (bs13ee@e) (let ((bs13f0@t (gensym))) (list 'let (list (list bs13f0@t bs13ee@e)) (list 'if bs13f0@t bs13f0@t bs13dd@k)))) bs13ec@ls/false) (let ((bs13f2@t bs13ea@t)) (let ((bs13f4@ls/false (bsd7f@syntax-dispatch bs13f2@t '(any any . each-any)))) (if bs13f4@ls/false (apply (lambda (bs13f6@e bs13f7@v bs13f8@v*) (list 'if bs13f6@e (cons 'begin (cons bs13f7@v bs13f8@v*)) bs13dd@k)) bs13f4@ls/false) (let ((bs13fc@t bs13f2@t)) (let ((bs13fe@ls/false (bsd7f@syntax-dispatch bs13fc@t '_))) (if bs13fe@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid guard clause" bs13dc@x)) bs13fe@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs13fc@t))))))))))))))) (bs13a5@f* (lambda (bs13b2@x*) (let ((bs13b4@t bs13b2@x*)) (let ((bs13b6@ls/false (bsd7f@syntax-dispatch bs13b4@t '()))) (if bs13b6@ls/false (apply (lambda () (let ((bs13b8@g (gensym))) (values (list bs13b8@g (list 'lambda '() (list 'raise-continuable bs139c@con))) bs13b8@g))) bs13b6@ls/false) (let ((bs13ba@t bs13b4@t)) (let ((bs13bc@ls/false (bsd7f@syntax-dispatch bs13ba@t '((#(scheme-id else) any . each-any))))) (if bs13bc@ls/false (apply (lambda (bs13be@e bs13bf@e*) (values (cons 'begin (cons bs13be@e bs13bf@e*)) '#f)) bs13bc@ls/false) (let ((bs13c2@t bs13ba@t)) (let ((bs13c4@ls/false (bsd7f@syntax-dispatch bs13c2@t '(any . any)))) (if bs13c4@ls/false (apply (lambda (bs13c6@cls bs13c7@cls*) (call-with-values (lambda () (bs13a5@f* bs13c7@cls*)) (lambda (bs13ce@bs13cb bs13cf@bs13cd) (let ((bs13d2@g bs13cf@bs13cd) (bs13d3@e bs13ce@bs13cb)) (values (bs13a3@f bs13c6@cls bs13d3@e) bs13d2@g))))) bs13c4@ls/false) (let ((bs13d6@t bs13c2@t)) (let ((bs13d8@ls/false (bsd7f@syntax-dispatch bs13d6@t 'any))) (if bs13d8@ls/false (apply (lambda (bs13da@others) (bse5f@syntax-violation '#f '"invalid guard clause" bs13da@others)) bs13d8@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs13d6@t)))))))))))))))) (call-with-values (lambda () (bs13a5@f* bs139e@clause*)) (lambda (bs13aa@bs13a7 bs13ab@bs13a9) (let ((bs13ae@raisek bs13ab@bs13a9) (bs13af@code bs13aa@bs13a7)) (if bs13ae@raisek (list (list 'call/cc (list 'lambda (list bs13ae@raisek) (list bs139d@outerk (list 'lambda '() bs13af@code))))) (list bs139d@outerk (list 'lambda '() bs13af@code)))))))))) (let ((bs1386@t bs1382@x)) (let ((bs1388@ls/false (bsd7f@syntax-dispatch bs1386@t '(_ (any . each-any) any . each-any)))) (if (and bs1388@ls/false (apply (lambda (bs138a@con bs138b@clause* bs138c@b bs138d@b*) (bsb78@id? bs138a@con)) bs1388@ls/false)) (apply (lambda (bs1392@con bs1393@clause* bs1394@b bs1395@b*) (let ((bs139a@outerk (gensym))) (bsd35@bless (list (list 'call/cc (list 'lambda (list bs139a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bs1392@con) (bs1385@gen-clauses bs1392@con bs139a@outerk bs1393@clause*)) (cons 'lambda (cons '() (cons bs1394@b bs1395@b*))))))))))) bs1388@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1386@t))))))) (set! bs2872@bsd4d@guard-macro bsd4d@guard-macro) (set! bsd4f@define-enumeration-macro (lambda (bs1400@stx) (letrec* ((bs1403@set? (lambda (bs141c@x) (or (null? bs141c@x) (and (not (memq (car bs141c@x) (cdr bs141c@x))) (bs1403@set? (cdr bs141c@x)))))) (bs1405@remove-dups (lambda (bs141a@ls) (if (null? bs141a@ls) '() (cons (car bs141a@ls) (bs1405@remove-dups (remq (car bs141a@ls) (cdr bs141a@ls)))))))) (let ((bs1406@t bs1400@stx)) (let ((bs1408@ls/false (bsd7f@syntax-dispatch bs1406@t '(_ any each-any any)))) (if (and bs1408@ls/false (apply (lambda (bs140a@name bs140b@id* bs140c@maker) (and (bsb78@id? bs140a@name) (bsb78@id? bs140c@maker) (for-all bsb78@id? bs140b@id*))) bs1408@ls/false)) (apply (lambda (bs1410@name bs1411@id* bs1412@maker) (let ((bs1416@name* (bs1405@remove-dups (bse65@syntax->datum bs1411@id*))) (bs1417@mk (gensym))) (bsd35@bless (list 'begin (list 'define bs1417@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bs1416@name*)))) (list 'define-syntax bs1410@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bs1416@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bs1410@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bs1412@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bs1412@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bs1416@name*)) (cons 'syntax-violation (cons (list 'quote bs1412@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bs1417@mk '('(n* ...))))))))))))) bs1408@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1406@t))))))) (set! bs2873@bsd4f@define-enumeration-macro bsd4f@define-enumeration-macro) (set! bsd51@time-macro (lambda (bs141e@stx) (let ((bs1420@t bs141e@stx)) (let ((bs1422@ls/false (bsd7f@syntax-dispatch bs1420@t '(_ any)))) (if bs1422@ls/false (apply (lambda (bs1424@expr) (bsd35@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bs1424@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bs1422@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1420@t)))))) (set! bs2874@bsd51@time-macro bsd51@time-macro) (set! bsd53@delay-macro (lambda (bs1426@stx) (let ((bs1428@t bs1426@stx)) (let ((bs142a@ls/false (bsd7f@syntax-dispatch bs1428@t '(_ any)))) (if bs142a@ls/false (apply (lambda (bs142c@expr) (bsd35@bless (list 'make-promise (list 'lambda '() bs142c@expr)))) bs142a@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1428@t)))))) (set! bs2875@bsd53@delay-macro bsd53@delay-macro) (set! bsd55@assert-macro (lambda (bs142e@stx) (let ((bs1430@t bs142e@stx)) (let ((bs1432@ls/false (bsd7f@syntax-dispatch bs1430@t '(_ any)))) (if bs1432@ls/false (apply (lambda (bs1434@expr) (let ((bs1436@pos (or (bse57@expression-position bs142e@stx) (bse57@expression-position bs1434@expr)))) (bsd35@bless (list 'let (list (list 'x bs1434@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote bs1434@expr) (list 'quote bs1436@pos))))))) bs1432@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1430@t)))))) (set! bs2876@bsd55@assert-macro bsd55@assert-macro) (set! bsd57@endianness-macro (lambda (bs1438@stx) (let ((bs143a@t bs1438@stx)) (let ((bs143c@ls/false (bsd7f@syntax-dispatch bs143a@t '(_ any)))) (if bs143c@ls/false (apply (lambda (bs143e@e) (let ((bs1440@t (bse65@syntax->datum bs143e@e))) (if (memv bs1440@t '(little)) (bsd35@bless ''little) (if (memv bs1440@t '(big)) (bsd35@bless ''big) (bse5f@syntax-violation '#f '"endianness must be big or little" bs1438@stx))))) bs143c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs143a@t)))))) (set! bs2877@bsd57@endianness-macro bsd57@endianness-macro) (set! bsd59@identifier-syntax-macro (lambda (bs1442@stx) (let ((bs1444@t bs1442@stx)) (let ((bs1446@ls/false (bsd7f@syntax-dispatch bs1444@t '(_ any)))) (if bs1446@ls/false (apply (lambda (bs1448@expr) (bsd35@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bs1448@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bs1448@expr) '((syntax (e* ...)))))))))) bs1446@ls/false) (let ((bs144a@t bs1444@t)) (let ((bs144c@ls/false (bsd7f@syntax-dispatch bs144a@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bs144c@ls/false (apply (lambda (bs144e@id1 bs144f@expr1 bs1450@id2 bs1451@expr2 bs1452@expr3) (and (bsb78@id? bs144e@id1) (bsb78@id? bs1450@id2) (bsb78@id? bs1451@expr2))) bs144c@ls/false)) (apply (lambda (bs1458@id1 bs1459@expr1 bs145a@id2 bs145b@expr2 bs145c@expr3) (bsd35@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bs1459@expr1)) (list (list 'set! 'id bs145b@expr2) (list 'syntax bs145c@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bs1459@expr1 '(e* ...))))))))) bs144c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs144a@t))))))))) (set! bs2878@bsd59@identifier-syntax-macro bsd59@identifier-syntax-macro) (set! bsd5b@do-macro (lambda (bs1462@stx) (letrec* ((bs1465@bind (lambda (bs147c@x) (let ((bs147e@t bs147c@x)) (let ((bs1480@ls/false (bsd7f@syntax-dispatch bs147e@t '(any any)))) (if bs1480@ls/false (apply (lambda (bs1482@x bs1483@init) (list bs1482@x bs1483@init bs1482@x)) bs1480@ls/false) (let ((bs1486@t bs147e@t)) (let ((bs1488@ls/false (bsd7f@syntax-dispatch bs1486@t '(any any any)))) (if bs1488@ls/false (apply (lambda (bs148a@x bs148b@init bs148c@step) (list bs148a@x bs148b@init bs148c@step)) bs1488@ls/false) (let ((bs1490@t bs1486@t)) (let ((bs1492@ls/false (bsd7f@syntax-dispatch bs1490@t '_))) (if bs1492@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid binding" bs1462@stx)) bs1492@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1490@t))))))))))))) (let ((bs1466@t bs1462@stx)) (let ((bs1468@ls/false (bsd7f@syntax-dispatch bs1466@t '(_ each-any (any . each-any) . each-any)))) (if bs1468@ls/false (apply (lambda (bs146a@binding* bs146b@test bs146c@expr* bs146d@command*) (let ((bs1472@t (map bs1465@bind bs146a@binding*))) (let ((bs1474@ls/false (bsd7f@syntax-dispatch bs1472@t '#(each (any any any))))) (if bs1474@ls/false (apply (lambda (bs1476@x* bs1477@init* bs1478@step*) (if (bsb80@valid-bound-ids? bs1476@x*) (bsd35@bless (list 'letrec (list (list 'loop (list 'lambda bs1476@x* (list 'if bs146b@test (cons 'begin (cons '(if #f #f) bs146c@expr*)) (cons 'begin (append bs146d@command* (list (cons 'loop bs1478@step*)))))))) (cons 'loop bs1477@init*))) (bse5f@syntax-violation '#f '"invalid bindings" bs1462@stx))) bs1474@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1472@t))))) bs1468@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1466@t))))))) (set! bs2879@bsd5b@do-macro bsd5b@do-macro) (set! bsd5d@let*-macro (lambda (bs1494@stx) (let ((bs1496@t bs1494@stx)) (let ((bs1498@ls/false (bsd7f@syntax-dispatch bs1496@t '(_ #(each (any any)) any . each-any)))) (if (and bs1498@ls/false (apply (lambda (bs149a@lhs* bs149b@rhs* bs149c@b bs149d@b*) (for-all bsb78@id? bs149a@lhs*)) bs1498@ls/false)) (apply (lambda (bs14a2@lhs* bs14a3@rhs* bs14a4@b bs14a5@b*) (bsd35@bless (let bs14ac@f ((bs14aa@x* (map list bs14a2@lhs* bs14a3@rhs*))) (if (null? bs14aa@x*) (cons 'let (cons '() (cons bs14a4@b bs14a5@b*))) (list 'let (list (car bs14aa@x*)) (bs14ac@f (cdr bs14aa@x*))))))) bs1498@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1496@t)))))) (set! bs287a@bsd5d@let*-macro bsd5d@let*-macro) (set! bsd5f@or-macro (lambda (bs14ae@stx) (let ((bs14b0@t bs14ae@stx)) (let ((bs14b2@ls/false (bsd7f@syntax-dispatch bs14b0@t '(_)))) (if bs14b2@ls/false (apply (lambda () '#f) bs14b2@ls/false) (let ((bs14b4@t bs14b0@t)) (let ((bs14b6@ls/false (bsd7f@syntax-dispatch bs14b4@t '(_ any . each-any)))) (if bs14b6@ls/false (apply (lambda (bs14b8@e bs14b9@e*) (bsd35@bless (let bs14c0@f ((bs14bc@e bs14b8@e) (bs14bd@e* bs14b9@e*)) (if (null? bs14bd@e*) (list 'begin '#f bs14bc@e) (list 'let (list (list 't bs14bc@e)) (list 'if 't 't (bs14c0@f (car bs14bd@e*) (cdr bs14bd@e*)))))))) bs14b6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs14b4@t))))))))) (set! bs287b@bsd5f@or-macro bsd5f@or-macro) (set! bsd61@and-macro (lambda (bs14c2@stx) (let ((bs14c4@t bs14c2@stx)) (let ((bs14c6@ls/false (bsd7f@syntax-dispatch bs14c4@t '(_)))) (if bs14c6@ls/false (apply (lambda () '#t) bs14c6@ls/false) (let ((bs14c8@t bs14c4@t)) (let ((bs14ca@ls/false (bsd7f@syntax-dispatch bs14c8@t '(_ any . each-any)))) (if bs14ca@ls/false (apply (lambda (bs14cc@e bs14cd@e*) (bsd35@bless (let bs14d4@f ((bs14d0@e bs14cc@e) (bs14d1@e* bs14cd@e*)) (if (null? bs14d1@e*) (list 'begin '#f bs14d0@e) (cons 'if (cons bs14d0@e (cons (bs14d4@f (car bs14d1@e*) (cdr bs14d1@e*)) '(#f)))))))) bs14ca@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs14c8@t))))))))) (set! bs287c@bsd61@and-macro bsd61@and-macro) (set! bsd63@cond-macro (lambda (bs14d6@stx) (let ((bs14d8@t bs14d6@stx)) (let ((bs14da@ls/false (bsd7f@syntax-dispatch bs14d8@t '(_ any . each-any)))) (if bs14da@ls/false (apply (lambda (bs14dc@cls bs14dd@cls*) (bsd35@bless (let bs14e4@f ((bs14e0@cls bs14dc@cls) (bs14e1@cls* bs14dd@cls*)) (if (null? bs14e1@cls*) (let ((bs14e6@t bs14e0@cls)) (let ((bs14e8@ls/false (bsd7f@syntax-dispatch bs14e6@t '(#(scheme-id else) any . each-any)))) (if bs14e8@ls/false (apply (lambda (bs14ea@e bs14eb@e*) (cons 'begin (cons bs14ea@e bs14eb@e*))) bs14e8@ls/false) (let ((bs14ee@t bs14e6@t)) (let ((bs14f0@ls/false (bsd7f@syntax-dispatch bs14ee@t '(any #(scheme-id =>) any)))) (if bs14f0@ls/false (apply (lambda (bs14f2@e bs14f3@p) (list 'let (list (list 't bs14f2@e)) (list 'if 't (cons bs14f3@p '(t))))) bs14f0@ls/false) (let ((bs14f6@t bs14ee@t)) (let ((bs14f8@ls/false (bsd7f@syntax-dispatch bs14f6@t '(any)))) (if bs14f8@ls/false (apply (lambda (bs14fa@e) (cons 'or (cons bs14fa@e '((if #f #f))))) bs14f8@ls/false) (let ((bs14fc@t bs14f6@t)) (let ((bs14fe@ls/false (bsd7f@syntax-dispatch bs14fc@t '(any . each-any)))) (if bs14fe@ls/false (apply (lambda (bs1500@e bs1501@e*) (list 'if bs1500@e (cons 'begin bs1501@e*))) bs14fe@ls/false) (let ((bs1504@t bs14fc@t)) (let ((bs1506@ls/false (bsd7f@syntax-dispatch bs1504@t '_))) (if bs1506@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid last clause" bs14d6@stx)) bs1506@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1504@t)))))))))))))))) (let ((bs1508@t bs14e0@cls)) (let ((bs150a@ls/false (bsd7f@syntax-dispatch bs1508@t '(#(scheme-id else) any . each-any)))) (if bs150a@ls/false (apply (lambda (bs150c@e bs150d@e*) (bse5f@syntax-violation '#f '"incorrect position of keyword else" bs14d6@stx)) bs150a@ls/false) (let ((bs1510@t bs1508@t)) (let ((bs1512@ls/false (bsd7f@syntax-dispatch bs1510@t '(any #(scheme-id =>) any)))) (if bs1512@ls/false (apply (lambda (bs1514@e bs1515@p) (list 'let (list (list 't bs1514@e)) (list 'if 't (cons bs1515@p '(t)) (bs14e4@f (car bs14e1@cls*) (cdr bs14e1@cls*))))) bs1512@ls/false) (let ((bs1518@t bs1510@t)) (let ((bs151a@ls/false (bsd7f@syntax-dispatch bs1518@t '(any)))) (if bs151a@ls/false (apply (lambda (bs151c@e) (list 'or bs151c@e (bs14e4@f (car bs14e1@cls*) (cdr bs14e1@cls*)))) bs151a@ls/false) (let ((bs151e@t bs1518@t)) (let ((bs1520@ls/false (bsd7f@syntax-dispatch bs151e@t '(any . each-any)))) (if bs1520@ls/false (apply (lambda (bs1522@e bs1523@e*) (list 'if bs1522@e (cons 'begin bs1523@e*) (bs14e4@f (car bs14e1@cls*) (cdr bs14e1@cls*)))) bs1520@ls/false) (let ((bs1526@t bs151e@t)) (let ((bs1528@ls/false (bsd7f@syntax-dispatch bs1526@t '_))) (if bs1528@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid last clause" bs14d6@stx)) bs1528@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1526@t)))))))))))))))))))) bs14da@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs14d8@t)))))) (set! bs287d@bsd63@cond-macro bsd63@cond-macro) (set! bsd65@do-include (lambda (bs152a@stx bs152b@id bs152c@filename) (let ((bs1530@filename (bsb8c@stx->datum bs152c@filename))) (begin (if (not (and (string? bs1530@filename) (bsb78@id? bs152b@id))) (bse5f@syntax-violation '#f '"invalid syntax" bs152a@stx) (void)) (cons (bsd35@bless 'begin) (with-input-from-file bs1530@filename (lambda () (let bs1534@f ((bs1532@ls '())) (let ((bs1536@x (bs6ba@bs58a@read-annotated))) (if (eof-object? bs1536@x) (reverse bs1532@ls) (bs1534@f (cons (bsb58@datum->stx bs152b@id bs1536@x) bs1532@ls)))))))))))) (set! bs287e@bsd65@do-include bsd65@do-include) (set! bsd67@include-macro (lambda (bs1538@e) (let ((bs153a@t bs1538@e)) (let ((bs153c@ls/false (bsd7f@syntax-dispatch bs153a@t '(any any)))) (if bs153c@ls/false (apply (lambda (bs153e@id bs153f@filename) (bsd65@do-include bs1538@e bs153e@id bs153f@filename)) bs153c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs153a@t)))))) (set! bs287f@bsd67@include-macro bsd67@include-macro) (set! bsd69@include-into-macro (lambda (bs1542@e) (let ((bs1544@t bs1542@e)) (let ((bs1546@ls/false (bsd7f@syntax-dispatch bs1544@t '(_ any any)))) (if bs1546@ls/false (apply (lambda (bs1548@id bs1549@filename) (bsd65@do-include bs1542@e bs1548@id bs1549@filename)) bs1546@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1544@t)))))) (set! bs2880@bsd69@include-into-macro bsd69@include-into-macro) (set! bsd6b@syntax-rules-macro (lambda (bs154c@e) (let ((bs154e@t bs154c@e)) (let ((bs1550@ls/false (bsd7f@syntax-dispatch bs154e@t '(_ each-any . #(each (any any)))))) (if bs1550@ls/false (apply (lambda (bs1552@lits bs1553@pat* bs1554@tmp*) (begin (bsd85@verify-literals bs1552@lits bs154c@e) (bsd35@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bs1552@lits (map (lambda (bs1558@pat bs1559@tmp) (let ((bs155c@t bs1558@pat)) (let ((bs155e@ls/false (bsd7f@syntax-dispatch bs155c@t '(_ . any)))) (if bs155e@ls/false (apply (lambda (bs1560@rest) (list (cons 'g bs1560@rest) (list 'syntax bs1559@tmp))) bs155e@ls/false) (let ((bs1562@t bs155c@t)) (let ((bs1564@ls/false (bsd7f@syntax-dispatch bs1562@t '_))) (if bs1564@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid syntax-rules pattern" bs154c@e bs1558@pat)) bs1564@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1562@t)))))))) bs1553@pat* bs1554@tmp*)))))))) bs1550@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs154e@t)))))) (set! bs2881@bsd6b@syntax-rules-macro bsd6b@syntax-rules-macro) (set! bsd6d@quasiquote-macro (letrec* ((bs1567@datum (lambda (bs1668@x) (list (bsd07@scheme-stx 'quote) (bsb60@mkstx bs1668@x bsafc@top-mark* '() '())))) (bs1583@quasicons* (lambda (bs1660@x bs1661@y) (let bs1666@f ((bs1664@x bs1660@x)) (if (null? bs1664@x) bs1661@y (bs1585@quasicons (car bs1664@x) (bs1666@f (cdr bs1664@x))))))) (bs1585@quasicons (lambda (bs163a@x bs163b@y) (let ((bs163e@t bs163b@y)) (let ((bs1640@ls/false (bsd7f@syntax-dispatch bs163e@t '(#(scheme-id quote) any)))) (if bs1640@ls/false (apply (lambda (bs1642@dy) (let ((bs1644@t bs163a@x)) (let ((bs1646@ls/false (bsd7f@syntax-dispatch bs1644@t '(#(scheme-id quote) any)))) (if bs1646@ls/false (apply (lambda (bs1648@dx) (list (bsd07@scheme-stx 'quote) (cons bs1648@dx bs1642@dy))) bs1646@ls/false) (let ((bs164a@t bs1644@t)) (let ((bs164c@ls/false (bsd7f@syntax-dispatch bs164a@t '_))) (if bs164c@ls/false (apply (lambda () (let ((bs164e@t bs1642@dy)) (let ((bs1650@ls/false (bsd7f@syntax-dispatch bs164e@t '()))) (if bs1650@ls/false (apply (lambda () (list (bsd07@scheme-stx 'list) bs163a@x)) bs1650@ls/false) (let ((bs1652@t bs164e@t)) (let ((bs1654@ls/false (bsd7f@syntax-dispatch bs1652@t '_))) (if bs1654@ls/false (apply (lambda () (list (bsd07@scheme-stx 'cons) bs163a@x bs163b@y)) bs1654@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1652@t)))))))) bs164c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs164a@t)))))))) bs1640@ls/false) (let ((bs1656@t bs163e@t)) (let ((bs1658@ls/false (bsd7f@syntax-dispatch bs1656@t '(#(scheme-id list) . each-any)))) (if bs1658@ls/false (apply (lambda (bs165a@stuff) (cons* (bsd07@scheme-stx 'list) bs163a@x bs165a@stuff)) bs1658@ls/false) (let ((bs165c@t bs1656@t)) (let ((bs165e@ls/false (bsd7f@syntax-dispatch bs165c@t '_))) (if bs165e@ls/false (apply (lambda () (list (bsd07@scheme-stx 'cons) bs163a@x bs163b@y)) bs165e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs165c@t)))))))))))) (bs1587@quasiappend (lambda (bs1620@x bs1621@y) (let ((bs1624@ls (let bs1628@f ((bs1626@x bs1620@x)) (if (null? bs1626@x) (let ((bs162a@t bs1621@y)) (let ((bs162c@ls/false (bsd7f@syntax-dispatch bs162a@t '(#(scheme-id quote) ())))) (if bs162c@ls/false (apply (lambda () '()) bs162c@ls/false) (let ((bs162e@t bs162a@t)) (let ((bs1630@ls/false (bsd7f@syntax-dispatch bs162e@t '_))) (if bs1630@ls/false (apply (lambda () (list bs1621@y)) bs1630@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs162e@t))))))) (let ((bs1632@t (car bs1626@x))) (let ((bs1634@ls/false (bsd7f@syntax-dispatch bs1632@t '(#(scheme-id quote) ())))) (if bs1634@ls/false (apply (lambda () (bs1628@f (cdr bs1626@x))) bs1634@ls/false) (let ((bs1636@t bs1632@t)) (let ((bs1638@ls/false (bsd7f@syntax-dispatch bs1636@t '_))) (if bs1638@ls/false (apply (lambda () (cons (car bs1626@x) (bs1628@f (cdr bs1626@x)))) bs1638@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1636@t))))))))))) (if (null? bs1624@ls) (list (bsd07@scheme-stx 'quote) '()) (if (null? (cdr bs1624@ls)) (car bs1624@ls) (cons* (bsd07@scheme-stx 'append) bs1624@ls)))))) (bs1589@quasivector (lambda (bs15ee@x) (let ((bs15f0@pat-x bs15ee@x)) (let ((bs15f2@t bs15f0@pat-x)) (let ((bs15f4@ls/false (bsd7f@syntax-dispatch bs15f2@t '(#(scheme-id quote) each-any)))) (if bs15f4@ls/false (apply (lambda (bs15f6@x*) (list (bsd07@scheme-stx 'quote) (list->vector bs15f6@x*))) bs15f4@ls/false) (let ((bs15f8@t bs15f2@t)) (let ((bs15fa@ls/false (bsd7f@syntax-dispatch bs15f8@t '_))) (if bs15fa@ls/false (apply (lambda () (let bs1602@f ((bs15fc@x bs15ee@x) (bs15fd@k (lambda (bs1600@ls) (cons* (bsd07@scheme-stx 'vector) bs1600@ls)))) (let ((bs1604@t bs15fc@x)) (let ((bs1606@ls/false (bsd7f@syntax-dispatch bs1604@t '(#(scheme-id quote) each-any)))) (if bs1606@ls/false (apply (lambda (bs1608@x*) (bs15fd@k (map (lambda (bs160a@x) (list (bsd07@scheme-stx 'quote) bs160a@x)) bs1608@x*))) bs1606@ls/false) (let ((bs160c@t bs1604@t)) (let ((bs160e@ls/false (bsd7f@syntax-dispatch bs160c@t '(#(scheme-id list) . each-any)))) (if bs160e@ls/false (apply (lambda (bs1610@x*) (bs15fd@k bs1610@x*)) bs160e@ls/false) (let ((bs1612@t bs160c@t)) (let ((bs1614@ls/false (bsd7f@syntax-dispatch bs1612@t '(#(scheme-id cons) any any)))) (if bs1614@ls/false (apply (lambda (bs1616@x bs1617@y) (bs1602@f bs1617@y (lambda (bs161a@ls) (bs15fd@k (cons bs1616@x bs161a@ls))))) bs1614@ls/false) (let ((bs161c@t bs1612@t)) (let ((bs161e@ls/false (bsd7f@syntax-dispatch bs161c@t '_))) (if bs161e@ls/false (apply (lambda () (list (bsd07@scheme-stx 'list->vector) bs15f0@pat-x)) bs161e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs161c@t))))))))))))))) bs15fa@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs15f8@t)))))))))) (bs158b@vquasi (lambda (bs15cc@p bs15cd@lev) (let ((bs15d0@t bs15cc@p)) (let ((bs15d2@ls/false (bsd7f@syntax-dispatch bs15d0@t '(any . any)))) (if bs15d2@ls/false (apply (lambda (bs15d4@p bs15d5@q) (let ((bs15d8@t bs15d4@p)) (let ((bs15da@ls/false (bsd7f@syntax-dispatch bs15d8@t '(#(scheme-id unquote) . each-any)))) (if bs15da@ls/false (apply (lambda (bs15dc@p) (if (= bs15cd@lev '0) (bs1583@quasicons* bs15dc@p (bs158b@vquasi bs15d5@q bs15cd@lev)) (bs1585@quasicons (bs1585@quasicons (bs1567@datum 'unquote) (bs158d@quasi bs15dc@p (- bs15cd@lev '1))) (bs158b@vquasi bs15d5@q bs15cd@lev)))) bs15da@ls/false) (let ((bs15de@t bs15d8@t)) (let ((bs15e0@ls/false (bsd7f@syntax-dispatch bs15de@t '(#(scheme-id unquote-splicing) . each-any)))) (if bs15e0@ls/false (apply (lambda (bs15e2@p) (if (= bs15cd@lev '0) (bs1587@quasiappend bs15e2@p (bs158b@vquasi bs15d5@q bs15cd@lev)) (bs1585@quasicons (bs1585@quasicons (bs1567@datum 'unquote-splicing) (bs158d@quasi bs15e2@p (- bs15cd@lev '1))) (bs158b@vquasi bs15d5@q bs15cd@lev)))) bs15e0@ls/false) (let ((bs15e4@t bs15de@t)) (let ((bs15e6@ls/false (bsd7f@syntax-dispatch bs15e4@t 'any))) (if bs15e6@ls/false (apply (lambda (bs15e8@p) (bs1585@quasicons (bs158d@quasi bs15e8@p bs15cd@lev) (bs158b@vquasi bs15d5@q bs15cd@lev))) bs15e6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs15e4@t))))))))))) bs15d2@ls/false) (let ((bs15ea@t bs15d0@t)) (let ((bs15ec@ls/false (bsd7f@syntax-dispatch bs15ea@t '()))) (if bs15ec@ls/false (apply (lambda () (list (bsd07@scheme-stx 'quote) '())) bs15ec@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs15ea@t))))))))) (bs158d@quasi (lambda (bs1596@p bs1597@lev) (let ((bs159a@t bs1596@p)) (let ((bs159c@ls/false (bsd7f@syntax-dispatch bs159a@t '(#(scheme-id unquote) any)))) (if bs159c@ls/false (apply (lambda (bs159e@p) (if (= bs1597@lev '0) bs159e@p (bs1585@quasicons (bs1567@datum 'unquote) (bs158d@quasi (list bs159e@p) (- bs1597@lev '1))))) bs159c@ls/false) (let ((bs15a0@t bs159a@t)) (let ((bs15a2@ls/false (bsd7f@syntax-dispatch bs15a0@t '((#(scheme-id unquote) . each-any) . any)))) (if bs15a2@ls/false (apply (lambda (bs15a4@p bs15a5@q) (if (= bs1597@lev '0) (bs1583@quasicons* bs15a4@p (bs158d@quasi bs15a5@q bs1597@lev)) (bs1585@quasicons (bs1585@quasicons (bs1567@datum 'unquote) (bs158d@quasi bs15a4@p (- bs1597@lev '1))) (bs158d@quasi bs15a5@q bs1597@lev)))) bs15a2@ls/false) (let ((bs15a8@t bs15a0@t)) (let ((bs15aa@ls/false (bsd7f@syntax-dispatch bs15a8@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bs15aa@ls/false (apply (lambda (bs15ac@p bs15ad@q) (if (= bs1597@lev '0) (bs1587@quasiappend bs15ac@p (bs158d@quasi bs15ad@q bs1597@lev)) (bs1585@quasicons (bs1585@quasicons (bs1567@datum 'unquote-splicing) (bs158d@quasi bs15ac@p (- bs1597@lev '1))) (bs158d@quasi bs15ad@q bs1597@lev)))) bs15aa@ls/false) (let ((bs15b0@t bs15a8@t)) (let ((bs15b2@ls/false (bsd7f@syntax-dispatch bs15b0@t '(#(scheme-id quasiquote) any)))) (if bs15b2@ls/false (apply (lambda (bs15b4@p) (bs1585@quasicons (bs1567@datum 'quasiquote) (bs158d@quasi (list bs15b4@p) (+ bs1597@lev '1)))) bs15b2@ls/false) (let ((bs15b6@t bs15b0@t)) (let ((bs15b8@ls/false (bsd7f@syntax-dispatch bs15b6@t '(any . any)))) (if bs15b8@ls/false (apply (lambda (bs15ba@p bs15bb@q) (bs1585@quasicons (bs158d@quasi bs15ba@p bs1597@lev) (bs158d@quasi bs15bb@q bs1597@lev))) bs15b8@ls/false) (let ((bs15be@t bs15b6@t)) (let ((bs15c0@ls/false (bsd7f@syntax-dispatch bs15be@t '#(vector each-any)))) (if (and bs15c0@ls/false (apply (lambda (bs15c2@x) (not (bsb44@stx? bs15c2@x))) bs15c0@ls/false)) (apply (lambda (bs15c4@x) (bs1589@quasivector (bs158b@vquasi bs15c4@x bs1597@lev))) bs15c0@ls/false) (let ((bs15c6@t bs15be@t)) (let ((bs15c8@ls/false (bsd7f@syntax-dispatch bs15c6@t 'any))) (if bs15c8@ls/false (apply (lambda (bs15ca@p) (list (bsd07@scheme-stx 'quote) bs15ca@p)) bs15c8@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs15c6@t))))))))))))))))))))))))) (lambda (bs158e@x) (let ((bs1590@t bs158e@x)) (let ((bs1592@ls/false (bsd7f@syntax-dispatch bs1590@t '(_ any)))) (if bs1592@ls/false (apply (lambda (bs1594@e) (bs158d@quasi bs1594@e '0)) bs1592@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1590@t))))))) (set! bs2882@bsd6d@quasiquote-macro bsd6d@quasiquote-macro) (set! bsd6f@quasisyntax-macro (letrec* ((bs166b@quasi (lambda (bs1686@p bs1687@lev) (let ((bs168a@t bs1686@p)) (let ((bs168c@ls/false (bsd7f@syntax-dispatch bs168a@t '(#(scheme-id unsyntax) any)))) (if bs168c@ls/false (apply (lambda (bs168e@p) (if (= bs1687@lev '0) (let ((bs1690@g (gensym))) (values (list bs1690@g) (list bs168e@p) bs1690@g)) (call-with-values (lambda () (bs166b@quasi bs168e@p (- bs1687@lev '1))) (lambda (bs1698@bs1693 bs1699@bs1695 bs169a@bs1697) (let ((bs169e@p bs169a@bs1697) (bs169f@rhs* bs1699@bs1695) (bs16a0@lhs* bs1698@bs1693)) (values bs16a0@lhs* bs169f@rhs* (list 'unsyntax bs169e@p))))))) bs168c@ls/false) (let ((bs16a4@t bs168a@t)) (let ((bs16a6@ls/false (bsd7f@syntax-dispatch bs16a4@t '#(scheme-id unsyntax)))) (if (and bs16a6@ls/false (apply (lambda () (= bs1687@lev '0)) bs16a6@ls/false)) (apply (lambda () (bse5f@syntax-violation '#f '"incorrect use of unsyntax" bs1686@p)) bs16a6@ls/false) (let ((bs16a8@t bs16a4@t)) (let ((bs16aa@ls/false (bsd7f@syntax-dispatch bs16a8@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bs16aa@ls/false (apply (lambda (bs16ac@p* bs16ad@q) (call-with-values (lambda () (bs166b@quasi bs16ad@q bs1687@lev)) (lambda (bs16b6@bs16b1 bs16b7@bs16b3 bs16b8@bs16b5) (let ((bs16bc@q bs16b8@bs16b5) (bs16bd@rhs* bs16b7@bs16b3) (bs16be@lhs* bs16b6@bs16b1)) (if (= bs1687@lev '0) (let ((bs16c2@g* (map (lambda (bs16c4@x) (gensym)) bs16ac@p*))) (values (append bs16c2@g* bs16be@lhs*) (append bs16ac@p* bs16bd@rhs*) (append bs16c2@g* bs16bc@q))) (call-with-values (lambda () (bs166b@quasi bs16ac@p* (- bs1687@lev '1))) (lambda (bs16cc@bs16c7 bs16cd@bs16c9 bs16ce@bs16cb) (let ((bs16d2@p* bs16ce@bs16cb) (bs16d3@rhs2* bs16cd@bs16c9) (bs16d4@lhs2* bs16cc@bs16c7)) (values (append bs16d4@lhs2* bs16be@lhs*) (append bs16d3@rhs2* bs16bd@rhs*) (cons (cons 'unsyntax bs16d2@p*) bs16bc@q)))))))))) bs16aa@ls/false) (let ((bs16d8@t bs16a8@t)) (let ((bs16da@ls/false (bsd7f@syntax-dispatch bs16d8@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bs16da@ls/false (apply (lambda (bs16dc@p* bs16dd@q) (call-with-values (lambda () (bs166b@quasi bs16dd@q bs1687@lev)) (lambda (bs16e6@bs16e1 bs16e7@bs16e3 bs16e8@bs16e5) (let ((bs16ec@q bs16e8@bs16e5) (bs16ed@rhs* bs16e7@bs16e3) (bs16ee@lhs* bs16e6@bs16e1)) (if (= bs1687@lev '0) (let ((bs16f2@g* (map (lambda (bs16f4@x) (gensym)) bs16dc@p*))) (values (append (map (lambda (bs16f6@g) (cons bs16f6@g '(...))) bs16f2@g*) bs16ee@lhs*) (append bs16dc@p* bs16ed@rhs*) (append (apply append (map (lambda (bs16f8@g) (cons bs16f8@g '(...))) bs16f2@g*)) bs16ec@q))) (call-with-values (lambda () (bs166b@quasi bs16dc@p* (- bs1687@lev '1))) (lambda (bs1700@bs16fb bs1701@bs16fd bs1702@bs16ff) (let ((bs1706@p* bs1702@bs16ff) (bs1707@rhs2* bs1701@bs16fd) (bs1708@lhs2* bs1700@bs16fb)) (values (append bs1708@lhs2* bs16ee@lhs*) (append bs1707@rhs2* bs16ed@rhs*) (cons (cons 'unsyntax-splicing bs1706@p*) bs16ec@q)))))))))) bs16da@ls/false) (let ((bs170c@t bs16d8@t)) (let ((bs170e@ls/false (bsd7f@syntax-dispatch bs170c@t '#(scheme-id unsyntax-splicing)))) (if (and bs170e@ls/false (apply (lambda () (= bs1687@lev '0)) bs170e@ls/false)) (apply (lambda () (bse5f@syntax-violation '#f '"incorrect use of unsyntax-splicing" bs1686@p)) bs170e@ls/false) (let ((bs1710@t bs170c@t)) (let ((bs1712@ls/false (bsd7f@syntax-dispatch bs1710@t '(#(scheme-id quasisyntax) any)))) (if bs1712@ls/false (apply (lambda (bs1714@p) (call-with-values (lambda () (bs166b@quasi bs1714@p (+ bs1687@lev '1))) (lambda (bs171c@bs1717 bs171d@bs1719 bs171e@bs171b) (let ((bs1722@p bs171e@bs171b) (bs1723@rhs* bs171d@bs1719) (bs1724@lhs* bs171c@bs1717)) (values bs1724@lhs* bs1723@rhs* (list 'quasisyntax bs1722@p)))))) bs1712@ls/false) (let ((bs1728@t bs1710@t)) (let ((bs172a@ls/false (bsd7f@syntax-dispatch bs1728@t '(any . any)))) (if bs172a@ls/false (apply (lambda (bs172c@p bs172d@q) (call-with-values (lambda () (bs166b@quasi bs172c@p bs1687@lev)) (lambda (bs173c@bs1731 bs173d@bs1733 bs173e@bs1735) (call-with-values (lambda () (bs166b@quasi bs172d@q bs1687@lev)) (lambda (bs1742@bs1737 bs1743@bs1739 bs1744@bs173b) (let ((bs1748@q bs1744@bs173b) (bs1749@rhs2* bs1743@bs1739) (bs174a@lhs2* bs1742@bs1737) (bs174b@p bs173e@bs1735) (bs174c@rhs* bs173d@bs1733) (bs174d@lhs* bs173c@bs1731)) (values (append bs174a@lhs2* bs174d@lhs*) (append bs1749@rhs2* bs174c@rhs*) (cons bs174b@p bs1748@q)))))))) bs172a@ls/false) (let ((bs1754@t bs1728@t)) (let ((bs1756@ls/false (bsd7f@syntax-dispatch bs1754@t '#(vector each-any)))) (if bs1756@ls/false (apply (lambda (bs1758@x*) (call-with-values (lambda () (bs166b@quasi bs1758@x* bs1687@lev)) (lambda (bs1760@bs175b bs1761@bs175d bs1762@bs175f) (let ((bs1766@x* bs1762@bs175f) (bs1767@rhs* bs1761@bs175d) (bs1768@lhs* bs1760@bs175b)) (values bs1768@lhs* bs1767@rhs* (list->vector bs1766@x*)))))) bs1756@ls/false) (let ((bs176c@t bs1754@t)) (let ((bs176e@ls/false (bsd7f@syntax-dispatch bs176c@t '_))) (if bs176e@ls/false (apply (lambda () (values '() '() bs1686@p)) bs176e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs176c@t))))))))))))))))))))))))))))))) (lambda (bs166c@x) (let ((bs166e@t bs166c@x)) (let ((bs1670@ls/false (bsd7f@syntax-dispatch bs166e@t '(_ any)))) (if bs1670@ls/false (apply (lambda (bs1672@e) (call-with-values (lambda () (bs166b@quasi bs1672@e '0)) (lambda (bs167a@bs1675 bs167b@bs1677 bs167c@bs1679) (let ((bs1680@v bs167c@bs1679) (bs1681@rhs* bs167b@bs1677) (bs1682@lhs* bs167a@bs1675)) (bsd35@bless (list 'syntax-case (cons 'list bs1681@rhs*) '() (list bs1682@lhs* (list 'syntax bs1680@v)))))))) bs1670@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs166e@t))))))) (set! bs2883@bsd6f@quasisyntax-macro bsd6f@quasisyntax-macro) (set! bsd71@define-struct-macro (lambda (bs1770@stx) (bse5f@syntax-violation '#f '"define-struct not supported" bs1770@stx))) (set! bs2884@bsd71@define-struct-macro bsd71@define-struct-macro) (set! bsd73@define-record-type-macro (lambda (bs1772@x) (letrec* ((bs1775@id (lambda (bs1968@ctxt . bs196a@str*) (bse63@datum->syntax bs1968@ctxt (string->symbol (apply string-append (map (lambda (bs196c@x) (if (symbol? bs196c@x) (symbol->string bs196c@x) (if (string? bs196c@x) bs196c@x (assertion-violation 'define-record-type '"BUG")))) bs196a@str*)))))) (bs1777@get-record-name (lambda (bs1956@spec) (let ((bs1958@t bs1956@spec)) (let ((bs195a@ls/false (bsd7f@syntax-dispatch bs1958@t '(any any any)))) (if bs195a@ls/false (apply (lambda (bs195c@foo bs195d@make-foo bs195e@foo?) bs195c@foo) bs195a@ls/false) (let ((bs1962@t bs1958@t)) (let ((bs1964@ls/false (bsd7f@syntax-dispatch bs1962@t 'any))) (if bs1964@ls/false (apply (lambda (bs1966@foo) bs1966@foo) bs1964@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1962@t))))))))) (bs1779@get-record-constructor-name (lambda (bs1942@spec) (let ((bs1944@t bs1942@spec)) (let ((bs1946@ls/false (bsd7f@syntax-dispatch bs1944@t '(any any any)))) (if bs1946@ls/false (apply (lambda (bs1948@foo bs1949@make-foo bs194a@foo?) bs1949@make-foo) bs1946@ls/false) (let ((bs194e@t bs1944@t)) (let ((bs1950@ls/false (bsd7f@syntax-dispatch bs194e@t 'any))) (if (and bs1950@ls/false (apply (lambda (bs1952@foo) (bsb78@id? bs1952@foo)) bs1950@ls/false)) (apply (lambda (bs1954@foo) (bs1775@id bs1954@foo '"make-" (bsb8c@stx->datum bs1954@foo))) bs1950@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs194e@t))))))))) (bs177b@get-record-predicate-name (lambda (bs192e@spec) (let ((bs1930@t bs192e@spec)) (let ((bs1932@ls/false (bsd7f@syntax-dispatch bs1930@t '(any any any)))) (if bs1932@ls/false (apply (lambda (bs1934@foo bs1935@make-foo bs1936@foo?) bs1936@foo?) bs1932@ls/false) (let ((bs193a@t bs1930@t)) (let ((bs193c@ls/false (bsd7f@syntax-dispatch bs193a@t 'any))) (if (and bs193c@ls/false (apply (lambda (bs193e@foo) (bsb78@id? bs193e@foo)) bs193c@ls/false)) (apply (lambda (bs1940@foo) (bs1775@id bs1940@foo (bsb8c@stx->datum bs1940@foo) '"?")) bs193c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs193a@t))))))))) (bs177d@get-clause (lambda (bs191c@id bs191d@ls) (let ((bs1920@t bs191d@ls)) (let ((bs1922@ls/false (bsd7f@syntax-dispatch bs1920@t '()))) (if bs1922@ls/false (apply (lambda () '#f) bs1922@ls/false) (let ((bs1924@t bs1920@t)) (let ((bs1926@ls/false (bsd7f@syntax-dispatch bs1924@t '((any . any) . any)))) (if bs1926@ls/false (apply (lambda (bs1928@x bs1929@rest bs192a@ls) (if (bsb7e@free-id=? (bsd35@bless bs191c@id) bs1928@x) (cons bs1928@x bs1929@rest) (bs177d@get-clause bs191c@id bs192a@ls))) bs1926@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1924@t))))))))) (bs177f@foo-rtd-code (lambda (bs18ca@name bs18cb@clause* bs18cc@parent-rtd-code) (letrec* ((bs18d1@convert-field-spec* (lambda (bs1902@ls) (list->vector (map (lambda (bs1904@x) (let ((bs1906@t bs1904@x)) (let ((bs1908@ls/false (bsd7f@syntax-dispatch bs1906@t '(#(scheme-id mutable) any . any)))) (if bs1908@ls/false (apply (lambda (bs190a@name bs190b@rest) (list 'mutable bs190a@name)) bs1908@ls/false) (let ((bs190e@t bs1906@t)) (let ((bs1910@ls/false (bsd7f@syntax-dispatch bs190e@t '(#(scheme-id immutable) any . any)))) (if bs1910@ls/false (apply (lambda (bs1912@name bs1913@rest) (list 'immutable bs1912@name)) bs1910@ls/false) (let ((bs1916@t bs190e@t)) (let ((bs1918@ls/false (bsd7f@syntax-dispatch bs1916@t 'any))) (if bs1918@ls/false (apply (lambda (bs191a@name) (list 'immutable bs191a@name)) bs1918@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1916@t))))))))))) bs1902@ls))))) (let ((bs18d2@uid-code (let ((bs18da@t (bs177d@get-clause 'nongenerative bs18cb@clause*))) (let ((bs18dc@ls/false (bsd7f@syntax-dispatch bs18da@t '(_)))) (if bs18dc@ls/false (apply (lambda () (list 'quote (gensym))) bs18dc@ls/false) (let ((bs18de@t bs18da@t)) (let ((bs18e0@ls/false (bsd7f@syntax-dispatch bs18de@t '(_ any)))) (if bs18e0@ls/false (apply (lambda (bs18e2@uid) (list 'quote bs18e2@uid)) bs18e0@ls/false) (let ((bs18e4@t bs18de@t)) (let ((bs18e6@ls/false (bsd7f@syntax-dispatch bs18e4@t '_))) (if bs18e6@ls/false (apply (lambda () '#f) bs18e6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18e4@t))))))))))) (bs18d3@sealed? (let ((bs18e8@t (bs177d@get-clause 'sealed bs18cb@clause*))) (let ((bs18ea@ls/false (bsd7f@syntax-dispatch bs18e8@t '(_ #(atom #t))))) (if bs18ea@ls/false (apply (lambda () '#t) bs18ea@ls/false) (let ((bs18ec@t bs18e8@t)) (let ((bs18ee@ls/false (bsd7f@syntax-dispatch bs18ec@t '_))) (if bs18ee@ls/false (apply (lambda () '#f) bs18ee@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18ec@t)))))))) (bs18d4@opaque? (let ((bs18f0@t (bs177d@get-clause 'opaque bs18cb@clause*))) (let ((bs18f2@ls/false (bsd7f@syntax-dispatch bs18f0@t '(_ #(atom #t))))) (if bs18f2@ls/false (apply (lambda () '#t) bs18f2@ls/false) (let ((bs18f4@t bs18f0@t)) (let ((bs18f6@ls/false (bsd7f@syntax-dispatch bs18f4@t '_))) (if bs18f6@ls/false (apply (lambda () '#f) bs18f6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18f4@t)))))))) (bs18d5@fields (let ((bs18f8@t (bs177d@get-clause 'fields bs18cb@clause*))) (let ((bs18fa@ls/false (bsd7f@syntax-dispatch bs18f8@t '(_ . each-any)))) (if bs18fa@ls/false (apply (lambda (bs18fc@field-spec*) (list 'quote (bs18d1@convert-field-spec* bs18fc@field-spec*))) bs18fa@ls/false) (let ((bs18fe@t bs18f8@t)) (let ((bs1900@ls/false (bsd7f@syntax-dispatch bs18fe@t '_))) (if bs1900@ls/false (apply (lambda () ''#()) bs1900@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18fe@t))))))))) (bsd35@bless (list 'make-record-type-descriptor (list 'quote bs18ca@name) bs18cc@parent-rtd-code bs18d2@uid-code bs18d3@sealed? bs18d4@opaque? bs18d5@fields)))))) (bs1781@parent-rtd-code (lambda (bs18b2@clause*) (let ((bs18b4@t (bs177d@get-clause 'parent bs18b2@clause*))) (let ((bs18b6@ls/false (bsd7f@syntax-dispatch bs18b4@t '(_ any)))) (if bs18b6@ls/false (apply (lambda (bs18b8@name) (list 'record-type-descriptor bs18b8@name)) bs18b6@ls/false) (let ((bs18ba@t bs18b4@t)) (let ((bs18bc@ls/false (bsd7f@syntax-dispatch bs18ba@t '#(atom #f)))) (if bs18bc@ls/false (apply (lambda () (let ((bs18be@t (bs177d@get-clause 'parent-rtd bs18b2@clause*))) (let ((bs18c0@ls/false (bsd7f@syntax-dispatch bs18be@t '(_ any any)))) (if bs18c0@ls/false (apply (lambda (bs18c2@rtd bs18c3@rcd) bs18c2@rtd) bs18c0@ls/false) (let ((bs18c6@t bs18be@t)) (let ((bs18c8@ls/false (bsd7f@syntax-dispatch bs18c6@t '#(atom #f)))) (if bs18c8@ls/false (apply (lambda () '#f) bs18c8@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18c6@t)))))))) bs18bc@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18ba@t))))))))) (bs1783@parent-rcd-code (lambda (bs189a@clause*) (let ((bs189c@t (bs177d@get-clause 'parent bs189a@clause*))) (let ((bs189e@ls/false (bsd7f@syntax-dispatch bs189c@t '(_ any)))) (if bs189e@ls/false (apply (lambda (bs18a0@name) (list 'record-constructor-descriptor bs18a0@name)) bs189e@ls/false) (let ((bs18a2@t bs189c@t)) (let ((bs18a4@ls/false (bsd7f@syntax-dispatch bs18a2@t '#(atom #f)))) (if bs18a4@ls/false (apply (lambda () (let ((bs18a6@t (bs177d@get-clause 'parent-rtd bs189a@clause*))) (let ((bs18a8@ls/false (bsd7f@syntax-dispatch bs18a6@t '(_ any any)))) (if bs18a8@ls/false (apply (lambda (bs18aa@rtd bs18ab@rcd) bs18ab@rcd) bs18a8@ls/false) (let ((bs18ae@t bs18a6@t)) (let ((bs18b0@ls/false (bsd7f@syntax-dispatch bs18ae@t '#(atom #f)))) (if bs18b0@ls/false (apply (lambda () '#f) bs18b0@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18ae@t)))))))) bs18a4@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs18a2@t))))))))) (bs1785@foo-rcd-code (lambda (bs1892@clause* bs1893@foo-rtd bs1894@protocol bs1895@parent-rcd-code) (list 'make-record-constructor-descriptor bs1893@foo-rtd bs1895@parent-rcd-code bs1894@protocol))) (bs1787@get-protocol-code (lambda (bs1886@clause*) (let ((bs1888@t (bs177d@get-clause 'protocol bs1886@clause*))) (let ((bs188a@ls/false (bsd7f@syntax-dispatch bs1888@t '(_ any)))) (if bs188a@ls/false (apply (lambda (bs188c@expr) bs188c@expr) bs188a@ls/false) (let ((bs188e@t bs1888@t)) (let ((bs1890@ls/false (bsd7f@syntax-dispatch bs188e@t '_))) (if bs1890@ls/false (apply (lambda () '#f) bs1890@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs188e@t))))))))) (bs1789@get-fields (lambda (bs1874@clause*) (let ((bs1876@t bs1874@clause*)) (let ((bs1878@ls/false (bsd7f@syntax-dispatch bs1876@t '()))) (if bs1878@ls/false (apply (lambda () '()) bs1878@ls/false) (let ((bs187a@t bs1876@t)) (let ((bs187c@ls/false (bsd7f@syntax-dispatch bs187a@t '((#(scheme-id fields) . each-any) . _)))) (if bs187c@ls/false (apply (lambda (bs187e@f*) bs187e@f*) bs187c@ls/false) (let ((bs1880@t bs187a@t)) (let ((bs1882@ls/false (bsd7f@syntax-dispatch bs1880@t '(_ . any)))) (if bs1882@ls/false (apply (lambda (bs1884@rest) (bs1789@get-fields bs1884@rest)) bs1882@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1880@t)))))))))))) (bs178b@get-mutator-indices (lambda (bs185c@fields) (let bs1862@f ((bs185e@fields bs185c@fields) (bs185f@i '0)) (let ((bs1864@t bs185e@fields)) (let ((bs1866@ls/false (bsd7f@syntax-dispatch bs1864@t '()))) (if bs1866@ls/false (apply (lambda () '()) bs1866@ls/false) (let ((bs1868@t bs1864@t)) (let ((bs186a@ls/false (bsd7f@syntax-dispatch bs1868@t '((#(scheme-id mutable) . _) . any)))) (if bs186a@ls/false (apply (lambda (bs186c@rest) (cons bs185f@i (bs1862@f bs186c@rest (+ bs185f@i '1)))) bs186a@ls/false) (let ((bs186e@t bs1868@t)) (let ((bs1870@ls/false (bsd7f@syntax-dispatch bs186e@t '(_ . any)))) (if bs1870@ls/false (apply (lambda (bs1872@rest) (bs1862@f bs1872@rest (+ bs185f@i '1))) bs1870@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs186e@t))))))))))))) (bs178d@get-mutators (lambda (bs1832@foo bs1833@fields) (letrec* ((bs1837@gen-name (lambda (bs185a@x) (bse63@datum->syntax bs1832@foo (string->symbol (string-append (symbol->string (bse65@syntax->datum bs1832@foo)) '"-" (symbol->string (bse65@syntax->datum bs185a@x)) '"-set!")))))) (let bs183a@f ((bs1838@fields bs1833@fields)) (let ((bs183c@t bs1838@fields)) (let ((bs183e@ls/false (bsd7f@syntax-dispatch bs183c@t '()))) (if bs183e@ls/false (apply (lambda () '()) bs183e@ls/false) (let ((bs1840@t bs183c@t)) (let ((bs1842@ls/false (bsd7f@syntax-dispatch bs1840@t '((#(scheme-id mutable) any any any) . any)))) (if bs1842@ls/false (apply (lambda (bs1844@name bs1845@accessor bs1846@mutator bs1847@rest) (cons bs1846@mutator (bs183a@f bs1847@rest))) bs1842@ls/false) (let ((bs184c@t bs1840@t)) (let ((bs184e@ls/false (bsd7f@syntax-dispatch bs184c@t '((#(scheme-id mutable) any) . any)))) (if bs184e@ls/false (apply (lambda (bs1850@name bs1851@rest) (cons (bs1837@gen-name bs1850@name) (bs183a@f bs1851@rest))) bs184e@ls/false) (let ((bs1854@t bs184c@t)) (let ((bs1856@ls/false (bsd7f@syntax-dispatch bs1854@t '(_ . any)))) (if bs1856@ls/false (apply (lambda (bs1858@rest) (bs183a@f bs1858@rest)) bs1856@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1854@t))))))))))))))))) (bs178f@get-accessors (lambda (bs17ee@foo bs17ef@fields) (letrec* ((bs17f3@gen-name (lambda (bs1830@x) (bse63@datum->syntax bs17ee@foo (string->symbol (string-append (symbol->string (bse65@syntax->datum bs17ee@foo)) '"-" (symbol->string (bse65@syntax->datum bs1830@x)))))))) (map (lambda (bs17f4@field) (let ((bs17f6@t bs17f4@field)) (let ((bs17f8@ls/false (bsd7f@syntax-dispatch bs17f6@t '(#(scheme-id mutable) any any any)))) (if (and bs17f8@ls/false (apply (lambda (bs17fa@name bs17fb@accessor bs17fc@mutator) (bsb78@id? bs17fb@accessor)) bs17f8@ls/false)) (apply (lambda (bs1800@name bs1801@accessor bs1802@mutator) bs1801@accessor) bs17f8@ls/false) (let ((bs1806@t bs17f6@t)) (let ((bs1808@ls/false (bsd7f@syntax-dispatch bs1806@t '(#(scheme-id immutable) any any)))) (if (and bs1808@ls/false (apply (lambda (bs180a@name bs180b@accessor) (bsb78@id? bs180b@accessor)) bs1808@ls/false)) (apply (lambda (bs180e@name bs180f@accessor) bs180f@accessor) bs1808@ls/false) (let ((bs1812@t bs1806@t)) (let ((bs1814@ls/false (bsd7f@syntax-dispatch bs1812@t '(#(scheme-id mutable) any)))) (if (and bs1814@ls/false (apply (lambda (bs1816@name) (bsb78@id? bs1816@name)) bs1814@ls/false)) (apply (lambda (bs1818@name) (bs17f3@gen-name bs1818@name)) bs1814@ls/false) (let ((bs181a@t bs1812@t)) (let ((bs181c@ls/false (bsd7f@syntax-dispatch bs181a@t '(#(scheme-id immutable) any)))) (if (and bs181c@ls/false (apply (lambda (bs181e@name) (bsb78@id? bs181e@name)) bs181c@ls/false)) (apply (lambda (bs1820@name) (bs17f3@gen-name bs1820@name)) bs181c@ls/false) (let ((bs1822@t bs181a@t)) (let ((bs1824@ls/false (bsd7f@syntax-dispatch bs1822@t 'any))) (if (and bs1824@ls/false (apply (lambda (bs1826@name) (bsb78@id? bs1826@name)) bs1824@ls/false)) (apply (lambda (bs1828@name) (bs17f3@gen-name bs1828@name)) bs1824@ls/false) (let ((bs182a@t bs1822@t)) (let ((bs182c@ls/false (bsd7f@syntax-dispatch bs182a@t 'any))) (if bs182c@ls/false (apply (lambda (bs182e@others) (bse5f@syntax-violation '#f '"invalid field spec" bs17f4@field)) bs182c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs182a@t)))))))))))))))))))) bs17ef@fields)))) (bs1791@enumerate (lambda (bs17e6@ls) (let bs17ec@f ((bs17e8@ls bs17e6@ls) (bs17e9@i '0)) (if (null? bs17e8@ls) '() (cons bs17e9@i (bs17ec@f (cdr bs17e8@ls) (+ bs17e9@i '1))))))) (bs1793@do-define-record (lambda (bs17be@namespec bs17bf@clause*) (let ((bs17c2@foo (bs1777@get-record-name bs17be@namespec))) (let ((bs17c4@foo-rtd (gensym))) (let ((bs17c6@foo-rcd (gensym))) (let ((bs17c8@protocol (gensym))) (let ((bs17ca@make-foo (bs1779@get-record-constructor-name bs17be@namespec))) (let ((bs17cc@fields (bs1789@get-fields bs17bf@clause*))) (let ((bs17ce@idx* (bs1791@enumerate bs17cc@fields))) (let ((bs17d0@foo-x* (bs178f@get-accessors bs17c2@foo bs17cc@fields))) (let ((bs17d2@set-foo-x!* (bs178d@get-mutators bs17c2@foo bs17cc@fields))) (let ((bs17d4@set-foo-idx* (bs178b@get-mutator-indices bs17cc@fields))) (let ((bs17d6@foo? (bs177b@get-record-predicate-name bs17be@namespec))) (let ((bs17d8@foo-rtd-code (bs177f@foo-rtd-code bs17c2@foo bs17bf@clause* (bs1781@parent-rtd-code bs17bf@clause*)))) (let ((bs17da@foo-rcd-code (bs1785@foo-rcd-code bs17bf@clause* bs17c4@foo-rtd bs17c8@protocol (bs1783@parent-rcd-code bs17bf@clause*)))) (let ((bs17dc@protocol-code (bs1787@get-protocol-code bs17bf@clause*))) (bsd35@bless (cons 'begin (cons (list 'define bs17c4@foo-rtd bs17d8@foo-rtd-code) (cons (list 'define bs17c8@protocol bs17dc@protocol-code) (cons (list 'define bs17c6@foo-rcd bs17da@foo-rcd-code) (cons (list 'define-syntax bs17c2@foo (list 'list ''$rtd (list 'syntax bs17c4@foo-rtd) (list 'syntax bs17c6@foo-rcd))) (cons (list 'define bs17d6@foo? (list 'record-predicate bs17c4@foo-rtd)) (cons (list 'define bs17ca@make-foo (list 'record-constructor bs17c6@foo-rcd)) (append (map (lambda (bs17de@foo-x bs17df@idx) (list 'define bs17de@foo-x (list 'record-accessor bs17c4@foo-rtd bs17df@idx))) bs17d0@foo-x* bs17ce@idx*) (map (lambda (bs17e2@set-foo-x! bs17e3@idx) (list 'define bs17e2@set-foo-x! (list 'record-mutator bs17c4@foo-rtd bs17e3@idx))) bs17d2@set-foo-x!* bs17d4@set-foo-idx*)))))))))))))))))))))))))) (bs1795@verify-clauses (lambda (bs179e@x bs179f@cls*) (letrec* ((bs17a3@valid-kwds (map bsd35@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (bs17a5@free-id-member? (lambda (bs17ba@x bs17bb@ls) (and (pair? bs17bb@ls) (or (bsb7e@free-id=? bs17ba@x (car bs17bb@ls)) (bs17a5@free-id-member? bs17ba@x (cdr bs17bb@ls))))))) (let bs17aa@f ((bs17a6@cls* bs179f@cls*) (bs17a7@seen* '())) (if (not (null? bs17a6@cls*)) (let ((bs17ac@t (car bs17a6@cls*))) (let ((bs17ae@ls/false (bsd7f@syntax-dispatch bs17ac@t '(any . any)))) (if bs17ae@ls/false (apply (lambda (bs17b0@kwd bs17b1@rest) (if (or (not (bsb78@id? bs17b0@kwd)) (not (bs17a5@free-id-member? bs17b0@kwd bs17a3@valid-kwds))) (bse5f@syntax-violation '#f '"not a valid define-record-type keyword" bs17b0@kwd) (if (bsb84@bound-id-member? bs17b0@kwd bs17a7@seen*) (bse5f@syntax-violation '#f '"duplicate use of keyword " bs179e@x bs17b0@kwd) (bs17aa@f (cdr bs17a6@cls*) (cons bs17b0@kwd bs17a7@seen*))))) bs17ae@ls/false) (let ((bs17b4@t bs17ac@t)) (let ((bs17b6@ls/false (bsd7f@syntax-dispatch bs17b4@t 'any))) (if bs17b6@ls/false (apply (lambda (bs17b8@cls) (bse5f@syntax-violation '#f '"malformed define-record-type clause" bs17b8@cls)) bs17b6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs17b4@t))))))) (void))))))) (let ((bs1796@t bs1772@x)) (let ((bs1798@ls/false (bsd7f@syntax-dispatch bs1796@t '(_ any . each-any)))) (if bs1798@ls/false (apply (lambda (bs179a@namespec bs179b@clause*) (begin (bs1795@verify-clauses bs1772@x bs179b@clause*) (bs1793@do-define-record bs179a@namespec bs179b@clause*))) bs1798@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1796@t))))))) (set! bs2885@bsd73@define-record-type-macro bsd73@define-record-type-macro) (set! bsd75@define-condition-type-macro (lambda (bs196e@x) (letrec* ((bs1971@mkname (lambda (bs199e@name bs199f@suffix) (bse63@datum->syntax bs199e@name (string->symbol (string-append (symbol->string (bse65@syntax->datum bs199e@name)) bs199f@suffix)))))) (let ((bs1972@t bs196e@x)) (let ((bs1974@ls/false (bsd7f@syntax-dispatch bs1972@t '(any any any any any . #(each (any any)))))) (if (and bs1974@ls/false (apply (lambda (bs1976@ctxt bs1977@name bs1978@super bs1979@constructor bs197a@predicate bs197b@field* bs197c@accessor*) (and (bsb78@id? bs1977@name) (bsb78@id? bs1978@super) (bsb78@id? bs1979@constructor) (bsb78@id? bs197a@predicate) (for-all bsb78@id? bs197b@field*) (for-all bsb78@id? bs197c@accessor*))) bs1974@ls/false)) (apply (lambda (bs1984@ctxt bs1985@name bs1986@super bs1987@constructor bs1988@predicate bs1989@field* bs198a@accessor*) (let ((bs1992@aux-accessor* (map (lambda (bs1994@x) (gensym)) bs198a@accessor*))) (bsd35@bless (cons 'begin (cons (cons 'define-record-type (cons (list bs1985@name bs1987@constructor (gensym)) (cons (list 'parent bs1986@super) (cons (cons 'fields (map (lambda (bs1996@field bs1997@aux) (list 'immutable bs1996@field bs1997@aux)) bs1989@field* bs1992@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bs1988@predicate (list 'condition-predicate (list 'record-type-descriptor bs1985@name))) (map (lambda (bs199a@accessor bs199b@aux) (list 'define bs199a@accessor (list 'condition-accessor (list 'record-type-descriptor bs1985@name) bs199b@aux))) bs198a@accessor* bs1992@aux-accessor*))))))) bs1974@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1972@t))))))) (set! bs2886@bsd75@define-condition-type-macro bsd75@define-condition-type-macro) (set! bsd77@incorrect-usage-macro (lambda (bs19a2@e) (bse5f@syntax-violation '#f '"incorrect usage of auxiliary keyword" bs19a2@e))) (set! bs2887@bsd77@incorrect-usage-macro bsd77@incorrect-usage-macro) (set! bsd79@parameterize-macro (lambda (bs19a4@e) (let ((bs19a6@t bs19a4@e)) (let ((bs19a8@ls/false (bsd7f@syntax-dispatch bs19a6@t '(_ () any . each-any)))) (if bs19a8@ls/false (apply (lambda (bs19aa@b bs19ab@b*) (bsd35@bless (cons 'let (cons '() (cons bs19aa@b bs19ab@b*))))) bs19a8@ls/false) (let ((bs19ae@t bs19a6@t)) (let ((bs19b0@ls/false (bsd7f@syntax-dispatch bs19ae@t '(_ #(each (any any)) any . each-any)))) (if bs19b0@ls/false (apply (lambda (bs19b2@olhs* bs19b3@orhs* bs19b4@b bs19b5@b*) (let ((bs19ba@lhs* (bse4d@generate-temporaries bs19b2@olhs*)) (bs19bb@rhs* (bse4d@generate-temporaries bs19b3@orhs*))) (bsd35@bless (cons (list 'lambda (append bs19ba@lhs* bs19bb@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bs19be@lhs bs19bf@rhs) (list 'let (list (list 't (list bs19be@lhs))) (list bs19be@lhs bs19bf@rhs) (cons 'set! (cons bs19bf@rhs '(t))))) bs19ba@lhs* bs19bb@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bs19b4@b bs19b5@b*))) '(swap)))))) (append bs19b2@olhs* bs19b3@orhs*))))) bs19b0@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs19ae@t))))))))) (set! bs2888@bsd79@parameterize-macro bsd79@parameterize-macro) (set! bsd7b@foreign-call-transformer (lambda (bs19c2@e bs19c3@r bs19c4@mr) (let ((bs19c8@t bs19c2@e)) (let ((bs19ca@ls/false (bsd7f@syntax-dispatch bs19c8@t '(_ any . each-any)))) (if bs19ca@ls/false (apply (lambda (bs19cc@name bs19cd@arg*) (cons 'foreign-call (cons (bsda1@chi-expr bs19cc@name bs19c3@r bs19c4@mr) (bsd9d@chi-expr* bs19cd@arg* bs19c3@r bs19c4@mr)))) bs19ca@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs19c8@t)))))) (set! bs2889@bsd7b@foreign-call-transformer bsd7b@foreign-call-transformer) (set! bsd7d@convert-pattern (lambda (bs19d0@pattern bs19d1@keys) (letrec* ((bs19d5@cvt* (lambda (bs1a74@p* bs1a75@n bs1a76@ids) (if (null? bs1a74@p*) (values '() bs1a76@ids) (call-with-values (lambda () (bs19d5@cvt* (cdr bs1a74@p*) bs1a75@n bs1a76@ids)) (lambda (bs1a7e@bs1a7b bs1a7f@bs1a7d) (let ((bs1a82@ids bs1a7f@bs1a7d) (bs1a83@y bs1a7e@bs1a7b)) (call-with-values (lambda () (bs19d7@cvt (car bs1a74@p*) bs1a75@n bs1a82@ids)) (lambda (bs1a8a@bs1a87 bs1a8b@bs1a89) (let ((bs1a8e@ids bs1a8b@bs1a89) (bs1a8f@x bs1a8a@bs1a87)) (values (cons bs1a8f@x bs1a83@y) bs1a8e@ids)))))))))) (bs19d7@cvt (lambda (bs19d8@p bs19d9@n bs19da@ids) (let ((bs19de@t bs19d8@p)) (let ((bs19e0@ls/false (bsd7f@syntax-dispatch bs19de@t 'any))) (if (and bs19e0@ls/false (apply (lambda (bs19e2@id) (bsb78@id? bs19e2@id)) bs19e0@ls/false)) (apply (lambda (bs19e4@id) (if (bsb84@bound-id-member? bs19d8@p bs19d1@keys) (values (vector 'free-id bs19d8@p) bs19da@ids) (if (bsb7e@free-id=? bs19d8@p (bsd07@scheme-stx '_)) (values '_ bs19da@ids) (values 'any (cons (cons bs19d8@p bs19d9@n) bs19da@ids))))) bs19e0@ls/false) (let ((bs19e6@t bs19de@t)) (let ((bs19e8@ls/false (bsd7f@syntax-dispatch bs19e6@t '(any any)))) (if (and bs19e8@ls/false (apply (lambda (bs19ea@p bs19eb@dots) (bsd81@ellipsis? bs19eb@dots)) bs19e8@ls/false)) (apply (lambda (bs19ee@p bs19ef@dots) (call-with-values (lambda () (bs19d7@cvt bs19ee@p (+ bs19d9@n '1) bs19da@ids)) (lambda (bs19f6@bs19f3 bs19f7@bs19f5) (let ((bs19fa@ids bs19f7@bs19f5) (bs19fb@p bs19f6@bs19f3)) (values (if (eq? bs19fb@p 'any) 'each-any (vector 'each bs19fb@p)) bs19fa@ids))))) bs19e8@ls/false) (let ((bs19fe@t bs19e6@t)) (let ((bs1a00@ls/false (bsd7f@syntax-dispatch bs19fe@t '(any any . #(each+ any () any))))) (if (and bs1a00@ls/false (apply (lambda (bs1a02@x bs1a03@dots bs1a04@ys bs1a05@z) (bsd81@ellipsis? bs1a03@dots)) bs1a00@ls/false)) (apply (lambda (bs1a0a@x bs1a0b@dots bs1a0c@ys bs1a0d@z) (call-with-values (lambda () (bs19d7@cvt bs1a0d@z bs19d9@n bs19da@ids)) (lambda (bs1a16@bs1a13 bs1a17@bs1a15) (let ((bs1a1a@ids bs1a17@bs1a15) (bs1a1b@z bs1a16@bs1a13)) (call-with-values (lambda () (bs19d5@cvt* bs1a0c@ys bs19d9@n bs1a1a@ids)) (lambda (bs1a22@bs1a1f bs1a23@bs1a21) (let ((bs1a26@ids bs1a23@bs1a21) (bs1a27@ys bs1a22@bs1a1f)) (call-with-values (lambda () (bs19d7@cvt bs1a0a@x (+ bs19d9@n '1) bs1a26@ids)) (lambda (bs1a2e@bs1a2b bs1a2f@bs1a2d) (let ((bs1a32@ids bs1a2f@bs1a2d) (bs1a33@x bs1a2e@bs1a2b)) (values (vector 'each+ bs1a33@x (reverse bs1a27@ys) bs1a1b@z) bs1a32@ids))))))))))) bs1a00@ls/false) (let ((bs1a36@t bs19fe@t)) (let ((bs1a38@ls/false (bsd7f@syntax-dispatch bs1a36@t '(any . any)))) (if bs1a38@ls/false (apply (lambda (bs1a3a@x bs1a3b@y) (call-with-values (lambda () (bs19d7@cvt bs1a3b@y bs19d9@n bs19da@ids)) (lambda (bs1a42@bs1a3f bs1a43@bs1a41) (let ((bs1a46@ids bs1a43@bs1a41) (bs1a47@y bs1a42@bs1a3f)) (call-with-values (lambda () (bs19d7@cvt bs1a3a@x bs19d9@n bs1a46@ids)) (lambda (bs1a4e@bs1a4b bs1a4f@bs1a4d) (let ((bs1a52@ids bs1a4f@bs1a4d) (bs1a53@x bs1a4e@bs1a4b)) (values (cons bs1a53@x bs1a47@y) bs1a52@ids)))))))) bs1a38@ls/false) (let ((bs1a56@t bs1a36@t)) (let ((bs1a58@ls/false (bsd7f@syntax-dispatch bs1a56@t '()))) (if bs1a58@ls/false (apply (lambda () (values '() bs19da@ids)) bs1a58@ls/false) (let ((bs1a5a@t bs1a56@t)) (let ((bs1a5c@ls/false (bsd7f@syntax-dispatch bs1a5a@t '#(vector each-any)))) (if (and bs1a5c@ls/false (apply (lambda (bs1a5e@p) (not (bsb44@stx? bs1a5e@p))) bs1a5c@ls/false)) (apply (lambda (bs1a60@p) (call-with-values (lambda () (bs19d7@cvt bs1a60@p bs19d9@n bs19da@ids)) (lambda (bs1a66@bs1a63 bs1a67@bs1a65) (let ((bs1a6a@ids bs1a67@bs1a65) (bs1a6b@p bs1a66@bs1a63)) (values (vector 'vector bs1a6b@p) bs1a6a@ids))))) bs1a5c@ls/false) (let ((bs1a6e@t bs1a5a@t)) (let ((bs1a70@ls/false (bsd7f@syntax-dispatch bs1a6e@t 'any))) (if bs1a70@ls/false (apply (lambda (bs1a72@datum) (values (vector 'atom (bsb8c@stx->datum bs1a72@datum)) bs19da@ids)) bs1a70@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1a6e@t))))))))))))))))))))))))) (bs19d7@cvt bs19d0@pattern '0 '())))) (set! bs288a@bsd7d@convert-pattern bsd7d@convert-pattern) (set! bsd7f@syntax-dispatch (letrec* ((bs1a93@stx^ (lambda (bs1b6e@e bs1b6f@m* bs1b70@s* bs1b71@ae*) (if (and (null? bs1b6f@m*) (null? bs1b70@s*) (null? bs1b71@ae*)) bs1b6e@e (bsb60@mkstx bs1b6e@e bs1b6f@m* bs1b70@s* bs1b71@ae*)))) (bs1a95@match-each (lambda (bs1b4e@e bs1b4f@p bs1b50@m* bs1b51@s* bs1b52@ae*) (if (pair? bs1b4e@e) (let ((bs1b58@first (bs1aa1@match (car bs1b4e@e) bs1b4f@p bs1b50@m* bs1b51@s* bs1b52@ae* '()))) (and bs1b58@first (let ((bs1b5a@rest (bs1a95@match-each (cdr bs1b4e@e) bs1b4f@p bs1b50@m* bs1b51@s* bs1b52@ae*))) (and bs1b5a@rest (cons bs1b58@first bs1b5a@rest))))) (if (null? bs1b4e@e) '() (if (bsb44@stx? bs1b4e@e) (and (not (bsafe@top-marked? bs1b50@m*)) (call-with-values (lambda () (join-wraps bs1b50@m* bs1b51@s* bs1b52@ae* bs1b4e@e)) (lambda (bs1b62@bs1b5d bs1b63@bs1b5f bs1b64@bs1b61) (let ((bs1b68@ae* bs1b64@bs1b61) (bs1b69@s* bs1b63@bs1b5f) (bs1b6a@m* bs1b62@bs1b5d)) (bs1a95@match-each (bsb46@stx-expr bs1b4e@e) bs1b4f@p bs1b6a@m* bs1b69@s* bs1b68@ae*))))) (if (bs6bc@bs58e@annotation? bs1b4e@e) (bs1a95@match-each (bs6be@bs592@annotation-expression bs1b4e@e) bs1b4f@p bs1b50@m* bs1b51@s* bs1b52@ae*) '#f)))))) (bs1a97@match-each+ (lambda (bs1b0e@e bs1b0f@x-pat bs1b10@y-pat bs1b11@z-pat bs1b12@m* bs1b13@s* bs1b14@ae* bs1b15@r) (let bs1b26@f ((bs1b1e@e bs1b0e@e) (bs1b1f@m* bs1b12@m*) (bs1b20@s* bs1b13@s*) (bs1b21@ae* bs1b14@ae*)) (if (pair? bs1b1e@e) (call-with-values (lambda () (bs1b26@f (cdr bs1b1e@e) bs1b1f@m* bs1b20@s* bs1b21@ae*)) (lambda (bs1b2e@bs1b29 bs1b2f@bs1b2b bs1b30@bs1b2d) (let ((bs1b34@r bs1b30@bs1b2d) (bs1b35@y-pat bs1b2f@bs1b2b) (bs1b36@xr* bs1b2e@bs1b29)) (if bs1b34@r (if (null? bs1b35@y-pat) (let ((bs1b3a@xr (bs1aa1@match (car bs1b1e@e) bs1b0f@x-pat bs1b1f@m* bs1b20@s* bs1b21@ae* '()))) (if bs1b3a@xr (values (cons bs1b3a@xr bs1b36@xr*) bs1b35@y-pat bs1b34@r) (values '#f '#f '#f))) (values '() (cdr bs1b35@y-pat) (bs1aa1@match (car bs1b1e@e) (car bs1b35@y-pat) bs1b1f@m* bs1b20@s* bs1b21@ae* bs1b34@r))) (values '#f '#f '#f))))) (if (bsb44@stx? bs1b1e@e) (if (bsafe@top-marked? bs1b1f@m*) (values '() bs1b10@y-pat (bs1aa1@match bs1b1e@e bs1b11@z-pat bs1b1f@m* bs1b20@s* bs1b21@ae* bs1b15@r)) (call-with-values (lambda () (join-wraps bs1b1f@m* bs1b20@s* bs1b21@ae* bs1b1e@e)) (lambda (bs1b42@bs1b3d bs1b43@bs1b3f bs1b44@bs1b41) (let ((bs1b48@ae* bs1b44@bs1b41) (bs1b49@s* bs1b43@bs1b3f) (bs1b4a@m* bs1b42@bs1b3d)) (bs1b26@f (bsb46@stx-expr bs1b1e@e) bs1b4a@m* bs1b49@s* bs1b48@ae*))))) (if (bs6bc@bs58e@annotation? bs1b1e@e) (bs1b26@f (bs6be@bs592@annotation-expression bs1b1e@e) bs1b1f@m* bs1b20@s* bs1b21@ae*) (values '() bs1b10@y-pat (bs1aa1@match bs1b1e@e bs1b11@z-pat bs1b1f@m* bs1b20@s* bs1b21@ae* bs1b15@r)))))))) (bs1a99@match-each-any (lambda (bs1af2@e bs1af3@m* bs1af4@s* bs1af5@ae*) (if (pair? bs1af2@e) (let ((bs1afa@l (bs1a99@match-each-any (cdr bs1af2@e) bs1af3@m* bs1af4@s* bs1af5@ae*))) (and bs1afa@l (cons (bs1a93@stx^ (car bs1af2@e) bs1af3@m* bs1af4@s* bs1af5@ae*) bs1afa@l))) (if (null? bs1af2@e) '() (if (bsb44@stx? bs1af2@e) (and (not (bsafe@top-marked? bs1af3@m*)) (call-with-values (lambda () (join-wraps bs1af3@m* bs1af4@s* bs1af5@ae* bs1af2@e)) (lambda (bs1b02@bs1afd bs1b03@bs1aff bs1b04@bs1b01) (let ((bs1b08@ae* bs1b04@bs1b01) (bs1b09@s* bs1b03@bs1aff) (bs1b0a@m* bs1b02@bs1afd)) (bs1a99@match-each-any (bsb46@stx-expr bs1af2@e) bs1b0a@m* bs1b09@s* bs1b08@ae*))))) (if (bs6bc@bs58e@annotation? bs1af2@e) (bs1a99@match-each-any (bs6be@bs592@annotation-expression bs1af2@e) bs1af3@m* bs1af4@s* bs1af5@ae*) '#f)))))) (bs1a9b@match-empty (lambda (bs1aec@p bs1aed@r) (if (null? bs1aec@p) bs1aed@r (if (eq? bs1aec@p '_) bs1aed@r (if (eq? bs1aec@p 'any) (cons '() bs1aed@r) (if (pair? bs1aec@p) (bs1a9b@match-empty (car bs1aec@p) (bs1a9b@match-empty (cdr bs1aec@p) bs1aed@r)) (if (eq? bs1aec@p 'each-any) (cons '() bs1aed@r) (let ((bs1af0@t (vector-ref bs1aec@p '0))) (if (memv bs1af0@t '(each)) (bs1a9b@match-empty (vector-ref bs1aec@p '1) bs1aed@r) (if (memv bs1af0@t '(each+)) (bs1a9b@match-empty (vector-ref bs1aec@p '1) (bs1a9b@match-empty (reverse (vector-ref bs1aec@p '2)) (bs1a9b@match-empty (vector-ref bs1aec@p '3) bs1aed@r))) (if (memv bs1af0@t '(free-id atom)) bs1aed@r (if (memv bs1af0@t '(scheme-id atom)) bs1aed@r (if (memv bs1af0@t '(vector)) (bs1a9b@match-empty (vector-ref bs1aec@p '1) bs1aed@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bs1aec@p)))))))))))))) (bs1a9d@combine (lambda (bs1ae8@r* bs1ae9@r) (if (null? (car bs1ae8@r*)) bs1ae9@r (cons (map car bs1ae8@r*) (bs1a9d@combine (map cdr bs1ae8@r*) bs1ae9@r))))) (bs1a9f@match* (lambda (bs1ac4@e bs1ac5@p bs1ac6@m* bs1ac7@s* bs1ac8@ae* bs1ac9@r) (if (null? bs1ac5@p) (and (null? bs1ac4@e) bs1ac9@r) (if (pair? bs1ac5@p) (and (pair? bs1ac4@e) (bs1aa1@match (car bs1ac4@e) (car bs1ac5@p) bs1ac6@m* bs1ac7@s* bs1ac8@ae* (bs1aa1@match (cdr bs1ac4@e) (cdr bs1ac5@p) bs1ac6@m* bs1ac7@s* bs1ac8@ae* bs1ac9@r))) (if (eq? bs1ac5@p 'each-any) (let ((bs1ad0@l (bs1a99@match-each-any bs1ac4@e bs1ac6@m* bs1ac7@s* bs1ac8@ae*))) (and bs1ad0@l (cons bs1ad0@l bs1ac9@r))) (let ((bs1ad2@t (vector-ref bs1ac5@p '0))) (if (memv bs1ad2@t '(each)) (if (null? bs1ac4@e) (bs1a9b@match-empty (vector-ref bs1ac5@p '1) bs1ac9@r) (let ((bs1ad4@r* (bs1a95@match-each bs1ac4@e (vector-ref bs1ac5@p '1) bs1ac6@m* bs1ac7@s* bs1ac8@ae*))) (and bs1ad4@r* (bs1a9d@combine bs1ad4@r* bs1ac9@r)))) (if (memv bs1ad2@t '(free-id)) (and (symbol? bs1ac4@e) (bsafe@top-marked? bs1ac6@m*) (bsb7e@free-id=? (bs1a93@stx^ bs1ac4@e bs1ac6@m* bs1ac7@s* bs1ac8@ae*) (vector-ref bs1ac5@p '1)) bs1ac9@r) (if (memv bs1ad2@t '(scheme-id)) (and (symbol? bs1ac4@e) (bsafe@top-marked? bs1ac6@m*) (bsb7e@free-id=? (bs1a93@stx^ bs1ac4@e bs1ac6@m* bs1ac7@s* bs1ac8@ae*) (bsd07@scheme-stx (vector-ref bs1ac5@p '1))) bs1ac9@r) (if (memv bs1ad2@t '(each+)) (call-with-values (lambda () (bs1a97@match-each+ bs1ac4@e (vector-ref bs1ac5@p '1) (vector-ref bs1ac5@p '2) (vector-ref bs1ac5@p '3) bs1ac6@m* bs1ac7@s* bs1ac8@ae* bs1ac9@r)) (lambda (bs1adc@bs1ad7 bs1add@bs1ad9 bs1ade@bs1adb) (let ((bs1ae2@r bs1ade@bs1adb) (bs1ae3@y-pat bs1add@bs1ad9) (bs1ae4@xr* bs1adc@bs1ad7)) (and bs1ae2@r (null? bs1ae3@y-pat) (if (null? bs1ae4@xr*) (bs1a9b@match-empty (vector-ref bs1ac5@p '1) bs1ae2@r) (bs1a9d@combine bs1ae4@xr* bs1ae2@r)))))) (if (memv bs1ad2@t '(atom)) (and (fast-equal? (vector-ref bs1ac5@p '1) (bsb8a@strip bs1ac4@e bs1ac6@m*)) bs1ac9@r) (if (memv bs1ad2@t '(vector)) (and (vector? bs1ac4@e) (bs1aa1@match (vector->list bs1ac4@e) (vector-ref bs1ac5@p '1) bs1ac6@m* bs1ac7@s* bs1ac8@ae* bs1ac9@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bs1ac5@p))))))))))))) (bs1aa1@match (lambda (bs1aa6@e bs1aa7@p bs1aa8@m* bs1aa9@s* bs1aaa@ae* bs1aab@r) (if (not bs1aab@r) '#f (if (eq? bs1aa7@p '_) bs1aab@r (if (eq? bs1aa7@p 'any) (cons (bs1a93@stx^ bs1aa6@e bs1aa8@m* bs1aa9@s* bs1aaa@ae*) bs1aab@r) (if (bsb44@stx? bs1aa6@e) (and (not (bsafe@top-marked? bs1aa8@m*)) (call-with-values (lambda () (join-wraps bs1aa8@m* bs1aa9@s* bs1aaa@ae* bs1aa6@e)) (lambda (bs1ab8@bs1ab3 bs1ab9@bs1ab5 bs1aba@bs1ab7) (let ((bs1abe@ae* bs1aba@bs1ab7) (bs1abf@s* bs1ab9@bs1ab5) (bs1ac0@m* bs1ab8@bs1ab3)) (bs1aa1@match (bsb46@stx-expr bs1aa6@e) bs1aa7@p bs1ac0@m* bs1abf@s* bs1abe@ae* bs1aab@r))))) (if (bs6bc@bs58e@annotation? bs1aa6@e) (bs1aa1@match (bs6be@bs592@annotation-expression bs1aa6@e) bs1aa7@p bs1aa8@m* bs1aa9@s* bs1aaa@ae* bs1aab@r) (bs1a9f@match* bs1aa6@e bs1aa7@p bs1aa8@m* bs1aa9@s* bs1aaa@ae* bs1aab@r))))))))) (lambda (bs1aa2@e bs1aa3@p) (bs1aa1@match bs1aa2@e bs1aa3@p '() '() '() '())))) (set! bs288b@bsd7f@syntax-dispatch bsd7f@syntax-dispatch) (set! bsd81@ellipsis? (lambda (bs1b76@x) (and (bsb78@id? bs1b76@x) (bsb7e@free-id=? bs1b76@x (bsd07@scheme-stx '...))))) (set! bs288c@bsd81@ellipsis? bsd81@ellipsis?) (set! bsd83@underscore? (lambda (bs1b78@x) (and (bsb78@id? bs1b78@x) (bsb7e@free-id=? bs1b78@x (bsd07@scheme-stx '_))))) (set! bs288d@bsd83@underscore? bsd83@underscore?) (set! bsd85@verify-literals (lambda (bs1b7a@lits bs1b7b@expr) (for-each (lambda (bs1b7e@x) (if (or (not (bsb78@id? bs1b7e@x)) (bsd81@ellipsis? bs1b7e@x) (bsd83@underscore? bs1b7e@x)) (bse5f@syntax-violation '#f '"invalid literal" bs1b7b@expr bs1b7e@x) (void))) bs1b7a@lits))) (set! bs288e@bsd85@verify-literals bsd85@verify-literals) (set! bsd87@syntax-case-transformer (letrec* ((bs1b81@build-dispatch-call (lambda (bs1bf2@pvars bs1bf3@expr bs1bf4@y bs1bf5@r bs1bf6@mr) (let ((bs1bfc@ids (map car bs1bf2@pvars)) (bs1bfd@levels (map cdr bs1bf2@pvars))) (let ((bs1c00@labels (map bsb04@gen-label bs1bfc@ids)) (bs1c01@new-vars (map bsb00@gen-lexical bs1bfc@ids))) (let ((bs1c04@body (bsda1@chi-expr (bsb62@add-subst (bsb38@make-full-rib bs1bfc@ids bs1c00@labels) bs1bf3@expr) (append (map (lambda (bs1c06@label bs1c07@var bs1c08@level) (cons bs1c06@label (bsb92@make-binding 'syntax (cons bs1c07@var bs1c08@level)))) bs1c00@labels bs1c01@new-vars (map cdr bs1bf2@pvars)) bs1bf5@r) bs1bf6@mr))) (list '(primitive apply) (bsadb@bsa0d@build-lambda '#f bs1c01@new-vars bs1c04@body) bs1bf4@y)))))) (bs1b83@invalid-ids-error (lambda (bs1be6@id* bs1be7@e bs1be8@class) (let bs1bf0@find ((bs1bec@id* bs1be6@id*) (bs1bed@ok* '())) (if (null? bs1bec@id*) (bse5f@syntax-violation '#f '"invalid syntax" bs1be7@e) (if (bsb78@id? (car bs1bec@id*)) (if (bsb84@bound-id-member? (car bs1bec@id*) bs1bed@ok*) (bse5b@syntax-error (car bs1bec@id*) '"duplicate " bs1be8@class) (bs1bf0@find (cdr bs1bec@id*) (cons (car bs1bec@id*) bs1bed@ok*))) (bse5b@syntax-error (car bs1bec@id*) '"invalid " bs1be8@class)))))) (bs1b85@gen-clause (lambda (bs1bbe@x bs1bbf@keys bs1bc0@clauses bs1bc1@r bs1bc2@mr bs1bc3@pat bs1bc4@fender bs1bc5@expr) (call-with-values (lambda () (bsd7d@convert-pattern bs1bc3@pat bs1bbf@keys)) (lambda (bs1bd2@bs1bcf bs1bd3@bs1bd1) (let ((bs1bd6@pvars bs1bd3@bs1bd1) (bs1bd7@p bs1bd2@bs1bcf)) (if (not (bsb82@distinct-bound-ids? (map car bs1bd6@pvars))) (bs1b83@invalid-ids-error (map car bs1bd6@pvars) bs1bc3@pat '"pattern variable") (if (not (for-all (lambda (bs1bda@x) (not (bsd81@ellipsis? (car bs1bda@x)))) bs1bd6@pvars)) (bse5f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bs1bc3@pat) (let ((bs1bdc@y (bsb00@gen-lexical 'tmp))) (let ((bs1bde@test (if (eq? bs1bc4@fender '#t) bs1bdc@y (let ((bs1be0@call (bs1b81@build-dispatch-call bs1bd6@pvars bs1bc4@fender bs1bdc@y bs1bc1@r bs1bc2@mr))) (list 'if bs1bdc@y bs1be0@call (list 'quote '#f)))))) (let ((bs1be2@conseq (bs1b81@build-dispatch-call bs1bd6@pvars bs1bc5@expr bs1bdc@y bs1bc1@r bs1bc2@mr))) (let ((bs1be4@altern (bs1b87@gen-syntax-case bs1bbe@x bs1bbf@keys bs1bc0@clauses bs1bc1@r bs1bc2@mr))) (list (bsadb@bsa0d@build-lambda '#f (list bs1bdc@y) (list 'if bs1bde@test bs1be2@conseq bs1be4@altern)) (list '(primitive syntax-dispatch) bs1bbe@x (list 'quote bs1bd7@p)))))))))))))) (bs1b87@gen-syntax-case (lambda (bs1b9c@x bs1b9d@keys bs1b9e@clauses bs1b9f@r bs1ba0@mr) (if (null? bs1b9e@clauses) (list '(primitive syntax-error) bs1b9c@x) (let ((bs1ba6@t (car bs1b9e@clauses))) (let ((bs1ba8@ls/false (bsd7f@syntax-dispatch bs1ba6@t '(any any)))) (if bs1ba8@ls/false (apply (lambda (bs1baa@pat bs1bab@expr) (if (and (bsb78@id? bs1baa@pat) (not (bsb84@bound-id-member? bs1baa@pat bs1b9d@keys)) (not (bsd81@ellipsis? bs1baa@pat))) (if (bsb7e@free-id=? bs1baa@pat (bsd07@scheme-stx '_)) (bsda1@chi-expr bs1bab@expr bs1b9f@r bs1ba0@mr) (let ((bs1bae@lab (bsb04@gen-label bs1baa@pat)) (bs1baf@lex (bsb00@gen-lexical bs1baa@pat))) (let ((bs1bb2@body (bsda1@chi-expr (bsb62@add-subst (bsb38@make-full-rib (list bs1baa@pat) (list bs1bae@lab)) bs1bab@expr) (cons (cons bs1bae@lab (bsb92@make-binding 'syntax (cons bs1baf@lex '0))) bs1b9f@r) bs1ba0@mr))) (list (bsadb@bsa0d@build-lambda '#f (list bs1baf@lex) bs1bb2@body) bs1b9c@x)))) (bs1b85@gen-clause bs1b9c@x bs1b9d@keys (cdr bs1b9e@clauses) bs1b9f@r bs1ba0@mr bs1baa@pat '#t bs1bab@expr))) bs1ba8@ls/false) (let ((bs1bb4@t bs1ba6@t)) (let ((bs1bb6@ls/false (bsd7f@syntax-dispatch bs1bb4@t '(any any any)))) (if bs1bb6@ls/false (apply (lambda (bs1bb8@pat bs1bb9@fender bs1bba@expr) (bs1b85@gen-clause bs1b9c@x bs1b9d@keys (cdr bs1b9e@clauses) bs1b9f@r bs1ba0@mr bs1bb8@pat bs1bb9@fender bs1bba@expr)) bs1bb6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1bb4@t))))))))))) (lambda (bs1b88@e bs1b89@r bs1b8a@mr) (let ((bs1b8e@t bs1b88@e)) (let ((bs1b90@ls/false (bsd7f@syntax-dispatch bs1b8e@t '(_ any each-any . each-any)))) (if bs1b90@ls/false (apply (lambda (bs1b92@expr bs1b93@keys bs1b94@clauses) (begin (bsd85@verify-literals bs1b93@keys bs1b88@e) (let ((bs1b98@x (bsb00@gen-lexical 'tmp))) (let ((bs1b9a@body (bs1b87@gen-syntax-case bs1b98@x bs1b93@keys bs1b94@clauses bs1b89@r bs1b8a@mr))) (list (bsadb@bsa0d@build-lambda '#f (list bs1b98@x) bs1b9a@body) (bsda1@chi-expr bs1b92@expr bs1b89@r bs1b8a@mr)))))) bs1b90@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1b8e@t))))))) (set! bs288f@bsd87@syntax-case-transformer bsd87@syntax-case-transformer) (set! bsd89@ellipsis-map (lambda (bs1c0c@proc bs1c0d@ls . bs1c10@ls*) (letrec* ((bs1c13@who '...)) (begin (if (not (list? bs1c0d@ls)) (assertion-violation bs1c13@who '"not a list" bs1c0d@ls) (void)) (if (not (null? bs1c10@ls*)) (let ((bs1c14@n (length bs1c0d@ls))) (for-each (lambda (bs1c16@x) (begin (if (not (list? bs1c16@x)) (assertion-violation bs1c13@who '"not a list" bs1c16@x) (void)) (if (not (= (length bs1c16@x) bs1c14@n)) (assertion-violation bs1c13@who '"length mismatch" bs1c0d@ls bs1c16@x) (void)))) bs1c10@ls*)) (void)) (apply map bs1c0c@proc bs1c0d@ls bs1c10@ls*))))) (set! bs2890@bsd89@ellipsis-map bsd89@ellipsis-map) (set! bsd8b@syntax-transformer (letrec* ((bs1c19@gen-syntax (lambda (bs1c90@src bs1c91@e bs1c92@r bs1c93@maps bs1c94@ellipsis? bs1c95@vec?) (let ((bs1c9c@t bs1c91@e)) (let ((bs1c9e@ls/false (bsd7f@syntax-dispatch bs1c9c@t 'any))) (if (and bs1c9e@ls/false (apply (lambda (bs1ca0@dots) (bs1c94@ellipsis? bs1ca0@dots)) bs1c9e@ls/false)) (apply (lambda (bs1ca2@dots) (bse5f@syntax-violation '#f '"misplaced ellipsis in syntax form" bs1c90@src)) bs1c9e@ls/false) (let ((bs1ca4@t bs1c9c@t)) (let ((bs1ca6@ls/false (bsd7f@syntax-dispatch bs1ca4@t 'any))) (if (and bs1ca6@ls/false (apply (lambda (bs1ca8@id) (bsb78@id? bs1ca8@id)) bs1ca6@ls/false)) (apply (lambda (bs1caa@id) (let ((bs1cac@label (bsb8e@id->label bs1c91@e))) (let ((bs1cae@b (bsb90@label->binding bs1cac@label bs1c92@r))) (if (eq? (bsb94@binding-type bs1cae@b) 'syntax) (call-with-values (lambda () (let ((bs1cb4@var.lev (bsb96@binding-value bs1cae@b))) (bs1c1b@gen-ref bs1c90@src (car bs1cb4@var.lev) (cdr bs1cb4@var.lev) bs1c93@maps))) (lambda (bs1cb6@bs1cb1 bs1cb7@bs1cb3) (let ((bs1cba@maps bs1cb7@bs1cb3) (bs1cbb@var bs1cb6@bs1cb1)) (values (list 'ref bs1cbb@var) bs1cba@maps)))) (values (list 'quote bs1c91@e) bs1c93@maps))))) bs1ca6@ls/false) (let ((bs1cbe@t bs1ca4@t)) (let ((bs1cc0@ls/false (bsd7f@syntax-dispatch bs1cbe@t '(any any)))) (if (and bs1cc0@ls/false (apply (lambda (bs1cc2@dots bs1cc3@e) (bs1c94@ellipsis? bs1cc2@dots)) bs1cc0@ls/false)) (apply (lambda (bs1cc6@dots bs1cc7@e) (if bs1c95@vec? (bse5f@syntax-violation '#f '"misplaced ellipsis in syntax form" bs1c90@src) (bs1c19@gen-syntax bs1c90@src bs1cc7@e bs1c92@r bs1c93@maps (lambda (bs1cca@x) '#f) '#f))) bs1cc0@ls/false) (let ((bs1ccc@t bs1cbe@t)) (let ((bs1cce@ls/false (bsd7f@syntax-dispatch bs1ccc@t '(any any . any)))) (if (and bs1cce@ls/false (apply (lambda (bs1cd0@x bs1cd1@dots bs1cd2@y) (bs1c94@ellipsis? bs1cd1@dots)) bs1cce@ls/false)) (apply (lambda (bs1cd6@x bs1cd7@dots bs1cd8@y) (let bs1cee@f ((bs1cdc@y bs1cd8@y) (bs1cdd@k (lambda (bs1ce0@maps) (call-with-values (lambda () (bs1c19@gen-syntax bs1c90@src bs1cd6@x bs1c92@r (cons '() bs1ce0@maps) bs1c94@ellipsis? '#f)) (lambda (bs1ce6@bs1ce3 bs1ce7@bs1ce5) (let ((bs1cea@maps bs1ce7@bs1ce5) (bs1ceb@x bs1ce6@bs1ce3)) (if (null? (car bs1cea@maps)) (bse5f@syntax-violation '#f '"extra ellipsis in syntax form" bs1c90@src) (values (bs1c21@gen-map bs1ceb@x (car bs1cea@maps)) (cdr bs1cea@maps))))))))) (let ((bs1cf0@t bs1cdc@y)) (let ((bs1cf2@ls/false (bsd7f@syntax-dispatch bs1cf0@t '()))) (if bs1cf2@ls/false (apply (lambda () (bs1cdd@k bs1c93@maps)) bs1cf2@ls/false) (let ((bs1cf4@t bs1cf0@t)) (let ((bs1cf6@ls/false (bsd7f@syntax-dispatch bs1cf4@t '(any . any)))) (if (and bs1cf6@ls/false (apply (lambda (bs1cf8@dots bs1cf9@y) (bs1c94@ellipsis? bs1cf8@dots)) bs1cf6@ls/false)) (apply (lambda (bs1cfc@dots bs1cfd@y) (bs1cee@f bs1cfd@y (lambda (bs1d00@maps) (call-with-values (lambda () (bs1cdd@k (cons '() bs1d00@maps))) (lambda (bs1d06@bs1d03 bs1d07@bs1d05) (let ((bs1d0a@maps bs1d07@bs1d05) (bs1d0b@x bs1d06@bs1d03)) (if (null? (car bs1d0a@maps)) (bse5f@syntax-violation '#f '"extra ellipsis in syntax form" bs1c90@src) (values (bs1c1f@gen-mappend bs1d0b@x (car bs1d0a@maps)) (cdr bs1d0a@maps))))))))) bs1cf6@ls/false) (let ((bs1d0e@t bs1cf4@t)) (let ((bs1d10@ls/false (bsd7f@syntax-dispatch bs1d0e@t '_))) (if bs1d10@ls/false (apply (lambda () (call-with-values (lambda () (bs1c19@gen-syntax bs1c90@src bs1cdc@y bs1c92@r bs1c93@maps bs1c94@ellipsis? bs1c95@vec?)) (lambda (bs1d16@bs1d13 bs1d17@bs1d15) (let ((bs1d1a@maps bs1d17@bs1d15) (bs1d1b@y bs1d16@bs1d13)) (call-with-values (lambda () (bs1cdd@k bs1d1a@maps)) (lambda (bs1d22@bs1d1f bs1d23@bs1d21) (let ((bs1d26@maps bs1d23@bs1d21) (bs1d27@x bs1d22@bs1d1f)) (values (bs1c1d@gen-append bs1d27@x bs1d1b@y) bs1d26@maps)))))))) bs1d10@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1d0e@t)))))))))))) bs1cce@ls/false) (let ((bs1d2a@t bs1ccc@t)) (let ((bs1d2c@ls/false (bsd7f@syntax-dispatch bs1d2a@t '(any . any)))) (if bs1d2c@ls/false (apply (lambda (bs1d2e@x bs1d2f@y) (call-with-values (lambda () (bs1c19@gen-syntax bs1c90@src bs1d2e@x bs1c92@r bs1c93@maps bs1c94@ellipsis? '#f)) (lambda (bs1d36@bs1d33 bs1d37@bs1d35) (let ((bs1d3a@maps bs1d37@bs1d35) (bs1d3b@xnew bs1d36@bs1d33)) (call-with-values (lambda () (bs1c19@gen-syntax bs1c90@src bs1d2f@y bs1c92@r bs1d3a@maps bs1c94@ellipsis? bs1c95@vec?)) (lambda (bs1d42@bs1d3f bs1d43@bs1d41) (let ((bs1d46@maps bs1d43@bs1d41) (bs1d47@ynew bs1d42@bs1d3f)) (values (bs1c23@gen-cons bs1c91@e bs1d2e@x bs1d2f@y bs1d3b@xnew bs1d47@ynew) bs1d46@maps)))))))) bs1d2c@ls/false) (let ((bs1d4a@t bs1d2a@t)) (let ((bs1d4c@ls/false (bsd7f@syntax-dispatch bs1d4a@t '#(vector each-any)))) (if bs1d4c@ls/false (apply (lambda (bs1d4e@ls) (call-with-values (lambda () (bs1c19@gen-syntax bs1c90@src bs1d4e@ls bs1c92@r bs1c93@maps bs1c94@ellipsis? '#t)) (lambda (bs1d54@bs1d51 bs1d55@bs1d53) (let ((bs1d58@maps bs1d55@bs1d53) (bs1d59@lsnew bs1d54@bs1d51)) (values (bs1c25@gen-vector bs1c91@e bs1d4e@ls bs1d59@lsnew) bs1d58@maps))))) bs1d4c@ls/false) (let ((bs1d5c@t bs1d4a@t)) (let ((bs1d5e@ls/false (bsd7f@syntax-dispatch bs1d5c@t '_))) (if bs1d5e@ls/false (apply (lambda () (values (list 'quote bs1c91@e) bs1c93@maps)) bs1d5e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1d5c@t)))))))))))))))))))))))) (bs1c1b@gen-ref (lambda (bs1c76@src bs1c77@var bs1c78@level bs1c79@maps) (if (= bs1c78@level '0) (values bs1c77@var bs1c79@maps) (if (null? bs1c79@maps) (bse5f@syntax-violation '#f '"missing ellipsis in syntax form" bs1c76@src) (call-with-values (lambda () (bs1c1b@gen-ref bs1c76@src bs1c77@var (- bs1c78@level '1) (cdr bs1c79@maps))) (lambda (bs1c82@bs1c7f bs1c83@bs1c81) (let ((bs1c86@outer-maps bs1c83@bs1c81) (bs1c87@outer-var bs1c82@bs1c7f)) (let ((bs1c8a@t (assq bs1c87@outer-var (car bs1c79@maps)))) (if bs1c8a@t ((lambda (bs1c8c@b) (values (cdr bs1c8c@b) bs1c79@maps)) bs1c8a@t) (let ((bs1c8e@inner-var (bsb00@gen-lexical 'tmp))) (values bs1c8e@inner-var (cons (cons (cons bs1c87@outer-var bs1c8e@inner-var) (car bs1c79@maps)) bs1c86@outer-maps)))))))))))) (bs1c1d@gen-append (lambda (bs1c72@x bs1c73@y) (if (fast-equal? bs1c73@y ''()) bs1c72@x (list 'append bs1c72@x bs1c73@y)))) (bs1c1f@gen-mappend (lambda (bs1c6e@e bs1c6f@map-env) (list 'apply '(primitive append) (bs1c21@gen-map bs1c6e@e bs1c6f@map-env)))) (bs1c21@gen-map (lambda (bs1c5c@e bs1c5d@map-env) (let ((bs1c60@formals (map cdr bs1c5d@map-env)) (bs1c61@actuals (map (lambda (bs1c64@x) (list 'ref (car bs1c64@x))) bs1c5d@map-env))) (if (eq? (car bs1c5c@e) 'ref) (car bs1c61@actuals) (if (for-all (lambda (bs1c66@x) (and (eq? (car bs1c66@x) 'ref) (memq (cadr bs1c66@x) bs1c60@formals))) (cdr bs1c5c@e)) (let ((bs1c68@args (map (let ((bs1c6a@r (map cons bs1c60@formals bs1c61@actuals))) (lambda (bs1c6c@x) (cdr (assq (cadr bs1c6c@x) bs1c6a@r)))) (cdr bs1c5c@e)))) (cons 'map (cons (list 'primitive (car bs1c5c@e)) bs1c68@args))) (cons* 'map (list 'lambda bs1c60@formals bs1c5c@e) bs1c61@actuals)))))) (bs1c23@gen-cons (lambda (bs1c4c@e bs1c4d@x bs1c4e@y bs1c4f@xnew bs1c50@ynew) (let ((bs1c56@t (car bs1c50@ynew))) (if (memv bs1c56@t '(quote)) (if (eq? (car bs1c4f@xnew) 'quote) (let ((bs1c58@xnew (cadr bs1c4f@xnew)) (bs1c59@ynew (cadr bs1c50@ynew))) (if (and (eq? bs1c58@xnew bs1c4d@x) (eq? bs1c59@ynew bs1c4e@y)) (list 'quote bs1c4c@e) (list 'quote (cons bs1c58@xnew bs1c59@ynew)))) (if (null? (cadr bs1c50@ynew)) (list 'list bs1c4f@xnew) (list 'cons bs1c4f@xnew bs1c50@ynew))) (if (memv bs1c56@t '(list)) (cons 'list (cons bs1c4f@xnew (cdr bs1c50@ynew))) (list 'cons bs1c4f@xnew bs1c50@ynew)))))) (bs1c25@gen-vector (lambda (bs1c46@e bs1c47@ls bs1c48@lsnew) (if (eq? (car bs1c48@lsnew) 'quote) (if (eq? (cadr bs1c48@lsnew) bs1c47@ls) (list 'quote bs1c46@e) (list 'quote (list->vector (cadr bs1c48@lsnew)))) (if (eq? (car bs1c48@lsnew) 'list) (cons 'vector (cdr bs1c48@lsnew)) (list 'list->vector bs1c48@lsnew))))) (bs1c27@regen (lambda (bs1c40@x) (let ((bs1c42@t (car bs1c40@x))) (if (memv bs1c42@t '(ref)) (cadr bs1c40@x) (if (memv bs1c42@t '(primitive)) (list 'primitive (cadr bs1c40@x)) (if (memv bs1c42@t '(quote)) (list 'quote (cadr bs1c40@x)) (if (memv bs1c42@t '(lambda)) (bsadb@bsa0d@build-lambda '#f (cadr bs1c40@x) (bs1c27@regen (caddr bs1c40@x))) (if (memv bs1c42@t '(map)) (let ((bs1c44@ls (map bs1c27@regen (cdr bs1c40@x)))) (cons '(primitive ellipsis-map) bs1c44@ls)) (cons (list 'primitive (car bs1c40@x)) (map bs1c27@regen (cdr bs1c40@x)))))))))))) (lambda (bs1c28@e bs1c29@r bs1c2a@mr) (let ((bs1c2e@t bs1c28@e)) (let ((bs1c30@ls/false (bsd7f@syntax-dispatch bs1c2e@t '(_ any)))) (if bs1c30@ls/false (apply (lambda (bs1c32@x) (call-with-values (lambda () (bs1c19@gen-syntax bs1c28@e bs1c32@x bs1c29@r '() bsd81@ellipsis? '#f)) (lambda (bs1c38@bs1c35 bs1c39@bs1c37) (let ((bs1c3c@maps bs1c39@bs1c37) (bs1c3d@e bs1c38@bs1c35)) (bs1c27@regen bs1c3d@e))))) bs1c30@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1c2e@t))))))) (set! bs2891@bsd8b@syntax-transformer bsd8b@syntax-transformer) (set! bsd8d@core-macro-transformer (lambda (bs1d60@name) (let ((bs1d62@t bs1d60@name)) (if (memv bs1d62@t '(quote)) bsd2f@quote-transformer (if (memv bs1d62@t '(lambda)) bsd33@lambda-transformer (if (memv bs1d62@t '(case-lambda)) bsd31@case-lambda-transformer (if (memv bs1d62@t '(letrec)) bsd17@letrec-transformer (if (memv bs1d62@t '(letrec*)) bsd19@letrec*-transformer (if (memv bs1d62@t '(let)) bsd15@let-transformer (if (memv bs1d62@t '(if)) bsd27@if-transformer (if (memv bs1d62@t '(and)) bsd29@and-transformer (if (memv bs1d62@t '(or)) bsd2b@or-transformer (if (memv bs1d62@t '(foreign-call)) bsd7b@foreign-call-transformer (if (memv bs1d62@t '(syntax-case)) bsd87@syntax-case-transformer (if (memv bs1d62@t '(syntax)) bsd8b@syntax-transformer (if (memv bs1d62@t '(type-descriptor)) bsd1d@type-descriptor-transformer (if (memv bs1d62@t '(record-type-descriptor)) bsd1f@record-type-descriptor-transformer (if (memv bs1d62@t '(record-constructor-descriptor)) bsd21@record-constructor-descriptor-transformer (if (memv bs1d62@t '(fluid-let-syntax)) bsd1b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bs1d60@name)))))))))))))))))))) (set! bs2892@bsd8d@core-macro-transformer bsd8d@core-macro-transformer) (set! bsd8f@symbol-macro (lambda (bs1d64@x bs1d65@set) (let ((bs1d68@t bs1d64@x)) (let ((bs1d6a@ls/false (bsd7f@syntax-dispatch bs1d68@t '(_ any)))) (if (and bs1d6a@ls/false (apply (lambda (bs1d6c@name) (and (bsb78@id? bs1d6c@name) (memq (bsb7a@id->sym bs1d6c@name) bs1d65@set))) bs1d6a@ls/false)) (apply (lambda (bs1d6e@name) (bsd35@bless (list 'quote bs1d6e@name))) bs1d6a@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1d68@t)))))) (set! bs2893@bsd8f@symbol-macro bsd8f@symbol-macro) (set! bsd91@macro-transformer (lambda (bs1d70@x) (if (procedure? bs1d70@x) bs1d70@x (if (symbol? bs1d70@x) (let ((bs1d72@t bs1d70@x)) (if (memv bs1d72@t '(define-record-type)) bsd73@define-record-type-macro (if (memv bs1d72@t '(define-struct)) bsd71@define-struct-macro (if (memv bs1d72@t '(include)) bsd67@include-macro (if (memv bs1d72@t '(cond)) bsd63@cond-macro (if (memv bs1d72@t '(let)) bsd3b@let-macro (if (memv bs1d72@t '(do)) bsd5b@do-macro (if (memv bs1d72@t '(or)) bsd5f@or-macro (if (memv bs1d72@t '(and)) bsd61@and-macro (if (memv bs1d72@t '(let*)) bsd5d@let*-macro (if (memv bs1d72@t '(let-values)) bsd3d@let-values-macro (if (memv bs1d72@t '(let*-values)) bsd3f@let*-values-macro (if (memv bs1d72@t '(syntax-rules)) bsd6b@syntax-rules-macro (if (memv bs1d72@t '(quasiquote)) bsd6d@quasiquote-macro (if (memv bs1d72@t '(quasisyntax)) bsd6f@quasisyntax-macro (if (memv bs1d72@t '(with-syntax)) bsd37@with-syntax-macro (if (memv bs1d72@t '(when)) bsd23@when-macro (if (memv bs1d72@t '(unless)) bsd25@unless-macro (if (memv bs1d72@t '(case)) bsd2d@case-macro (if (memv bs1d72@t '(identifier-syntax)) bsd59@identifier-syntax-macro (if (memv bs1d72@t '(time)) bsd51@time-macro (if (memv bs1d72@t '(delay)) bsd53@delay-macro (if (memv bs1d72@t '(assert)) bsd55@assert-macro (if (memv bs1d72@t '(endianness)) bsd57@endianness-macro (if (memv bs1d72@t '(guard)) bsd4d@guard-macro (if (memv bs1d72@t '(define-enumeration)) bsd4f@define-enumeration-macro (if (memv bs1d72@t '(trace-lambda)) bsd41@trace-lambda-macro (if (memv bs1d72@t '(trace-define)) bsd43@trace-define-macro (if (memv bs1d72@t '(trace-define-syntax)) bsd45@trace-define-syntax-macro (if (memv bs1d72@t '(trace-let-syntax)) bsd49@trace-let-syntax-macro (if (memv bs1d72@t '(trace-letrec-syntax)) bsd4b@trace-letrec-syntax-macro (if (memv bs1d72@t '(define-condition-type)) bsd75@define-condition-type-macro (if (memv bs1d72@t '(parameterize)) bsd79@parameterize-macro (if (memv bs1d72@t '(include-into)) bsd69@include-into-macro (if (memv bs1d72@t '(eol-style)) (lambda (bs1d74@x) (bsd8f@symbol-macro bs1d74@x '(none lf cr crlf nel crnel ls))) (if (memv bs1d72@t '(error-handling-mode)) (lambda (bs1d76@x) (bsd8f@symbol-macro bs1d76@x '(ignore raise replace))) (if (memv bs1d72@t '(buffer-mode)) (lambda (bs1d78@x) (bsd8f@symbol-macro bs1d78@x '(none line block))) (if (memv bs1d72@t '(file-options)) bsaf3@file-options-macro (if (memv bs1d72@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bsd77@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bs1d70@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bs1d70@x))))) (set! bs2894@bsd91@macro-transformer bsd91@macro-transformer) (set! bsd93@local-macro-transformer (lambda (bs1d7a@x) (car bs1d7a@x))) (set! bs2895@bsd93@local-macro-transformer bsd93@local-macro-transformer) (set! bsd95@do-macro-call (lambda (bs1d7c@transformer bs1d7d@expr bs1d7e@rib) (let ((bs1d82@out (bs1d7c@transformer (bsb64@add-mark bsb5c@anti-mark '#f bs1d7d@expr '#f)))) (begin (let bs1d86@f ((bs1d84@x bs1d82@out)) (if (not (bsb44@stx? bs1d84@x)) (if (pair? bs1d84@x) (begin (bs1d86@f (car bs1d84@x)) (bs1d86@f (cdr bs1d84@x))) (if (vector? bs1d84@x) (vector-for-each bs1d86@f bs1d84@x) (if (symbol? bs1d84@x) (bse5f@syntax-violation '#f '"raw symbol encountered in output of macro" bs1d7d@expr bs1d84@x) (void)))) (void))) (bsb64@add-mark (bsb5a@gen-mark) bs1d7e@rib bs1d82@out bs1d7d@expr))))) (set! bs2896@bsd95@do-macro-call bsd95@do-macro-call) (set! bsd97@chi-macro (lambda (bs1d88@p bs1d89@e bs1d8a@rib) (bsd95@do-macro-call (bsd91@macro-transformer bs1d88@p) bs1d89@e bs1d8a@rib))) (set! bs2897@bsd97@chi-macro bsd97@chi-macro) (set! bsd99@chi-local-macro (lambda (bs1d8e@p bs1d8f@e bs1d90@rib) (bsd95@do-macro-call (bsd93@local-macro-transformer bs1d8e@p) bs1d8f@e bs1d90@rib))) (set! bs2898@bsd99@chi-local-macro bsd99@chi-local-macro) (set! bsd9b@chi-global-macro (lambda (bs1d94@p bs1d95@e bs1d96@rib) (let ((bs1d9a@lib (car bs1d94@p)) (bs1d9b@loc (cdr bs1d94@p))) (begin (bs995@bs7e4@visit-library bs1d9a@lib) (let ((bs1d9e@x (symbol-value bs1d9b@loc))) (let ((bs1da0@transformer (if (procedure? bs1d9e@x) bs1d9e@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bs1d9e@x)))) (bsd95@do-macro-call bs1da0@transformer bs1d95@e bs1d96@rib))))))) (set! bs2899@bsd9b@chi-global-macro bsd9b@chi-global-macro) (set! bsd9d@chi-expr* (lambda (bs1da2@e* bs1da3@r bs1da4@mr) (if (null? bs1da2@e*) '() (let ((bs1da8@e (bsda1@chi-expr (car bs1da2@e*) bs1da3@r bs1da4@mr))) (cons bs1da8@e (bsd9d@chi-expr* (cdr bs1da2@e*) bs1da3@r bs1da4@mr)))))) (set! bs289a@bsd9d@chi-expr* bsd9d@chi-expr*) (set! bsd9f@chi-application (lambda (bs1daa@e bs1dab@r bs1dac@mr) (let ((bs1db0@t bs1daa@e)) (let ((bs1db2@ls/false (bsd7f@syntax-dispatch bs1db0@t '(any . each-any)))) (if bs1db2@ls/false (apply (lambda (bs1db4@rator bs1db5@rands) (let ((bs1db8@rator (bsda1@chi-expr bs1db4@rator bs1dab@r bs1dac@mr))) (cons bs1db8@rator (bsd9d@chi-expr* bs1db5@rands bs1dab@r bs1dac@mr)))) bs1db2@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1db0@t)))))) (set! bs289b@bsd9f@chi-application bsd9f@chi-application) (set! bsda1@chi-expr (lambda (bs1dba@e bs1dbb@r bs1dbc@mr) (call-with-values (lambda () (bsb9a@syntax-type bs1dba@e bs1dbb@r)) (lambda (bs1dc6@bs1dc1 bs1dc7@bs1dc3 bs1dc8@bs1dc5) (let ((bs1dcc@kwd bs1dc8@bs1dc5) (bs1dcd@value bs1dc7@bs1dc3) (bs1dce@type bs1dc6@bs1dc1)) (let ((bs1dd2@t bs1dce@type)) (if (memv bs1dd2@t '(core-macro)) (let ((bs1dd4@transformer (bsd8d@core-macro-transformer bs1dcd@value))) (bs1dd4@transformer bs1dba@e bs1dbb@r bs1dbc@mr)) (if (memv bs1dd2@t '(global)) (let ((bs1dd6@lib (car bs1dcd@value))) (let ((bs1dd8@loc (cdr bs1dcd@value))) (begin ((bsde7@inv-collector) bs1dd6@lib) bs1dd8@loc))) (if (memv bs1dd2@t '(core-prim)) (let ((bs1dda@name bs1dcd@value)) (list 'primitive bs1dda@name)) (if (memv bs1dd2@t '(call)) (bsd9f@chi-application bs1dba@e bs1dbb@r bs1dbc@mr) (if (memv bs1dd2@t '(lexical)) (let ((bs1ddc@lex (bsd09@lexical-var bs1dcd@value))) bs1ddc@lex) (if (memv bs1dd2@t '(global-macro global-macro!)) (bsda1@chi-expr (bsd9b@chi-global-macro bs1dcd@value bs1dba@e '#f) bs1dbb@r bs1dbc@mr) (if (memv bs1dd2@t '(local-macro local-macro!)) (bsda1@chi-expr (bsd99@chi-local-macro bs1dcd@value bs1dba@e '#f) bs1dbb@r bs1dbc@mr) (if (memv bs1dd2@t '(macro macro!)) (bsda1@chi-expr (bsd97@chi-macro bs1dcd@value bs1dba@e '#f) bs1dbb@r bs1dbc@mr) (if (memv bs1dd2@t '(constant)) (let ((bs1dde@datum bs1dcd@value)) (list 'quote bs1dde@datum)) (if (memv bs1dd2@t '(set!)) (bsda3@chi-set! bs1dba@e bs1dbb@r bs1dbc@mr) (if (memv bs1dd2@t '(begin)) (let ((bs1de0@t bs1dba@e)) (let ((bs1de2@ls/false (bsd7f@syntax-dispatch bs1de0@t '(_ any . each-any)))) (if bs1de2@ls/false (apply (lambda (bs1de4@x bs1de5@x*) (bsadd@bsa3d@build-sequence '#f (bsd9d@chi-expr* (cons bs1de4@x bs1de5@x*) bs1dbb@r bs1dbc@mr))) bs1de2@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1de0@t)))) (if (memv bs1dd2@t '(let-syntax letrec-syntax)) (let ((bs1de8@t bs1dba@e)) (let ((bs1dea@ls/false (bsd7f@syntax-dispatch bs1de8@t '(_ #(each (any any)) any . each-any)))) (if (and bs1dea@ls/false (apply (lambda (bs1dec@xlhs* bs1ded@xrhs* bs1dee@xbody bs1def@xbody*) (if (not (bsb80@valid-bound-ids? bs1dec@xlhs*)) (bse5f@syntax-violation '#f '"invalid identifiers" bs1dba@e) (void))) bs1dea@ls/false)) (apply (lambda (bs1df4@xlhs* bs1df5@xrhs* bs1df6@xbody bs1df7@xbody*) (let ((bs1dfc@xlab* (map bsb04@gen-label bs1df4@xlhs*))) (let ((bs1dfe@xrib (bsb38@make-full-rib bs1df4@xlhs* bs1dfc@xlab*))) (let ((bs1e00@xb* (map (lambda (bs1e02@x) (bsbb0@make-eval-transformer (bsdd9@expand-transformer (if (eq? bs1dce@type 'let-syntax) bs1e02@x (bsb62@add-subst bs1dfe@xrib bs1e02@x)) bs1dbc@mr))) bs1df5@xrhs*))) (bsadd@bsa3d@build-sequence '#f (bsd9d@chi-expr* (map (lambda (bs1e04@x) (bsb62@add-subst bs1dfe@xrib bs1e04@x)) (cons bs1df6@xbody bs1df7@xbody*)) (append (map cons bs1dfc@xlab* bs1e00@xb*) bs1dbb@r) (append (map cons bs1dfc@xlab* bs1e00@xb*) bs1dbc@mr))))))) bs1dea@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1de8@t)))) (if (memv bs1dd2@t '(displaced-lexical)) (bse5f@syntax-violation '#f '"identifier out of context" bs1dba@e) (if (memv bs1dd2@t '(syntax)) (bse5f@syntax-violation '#f '"reference to pattern variable outside a syntax form" bs1dba@e) (if (memv bs1dd2@t '(define define-syntax module import library)) (bse5f@syntax-violation '#f (string-append (let ((bs1e06@t bs1dce@type)) (if (memv bs1e06@t '(define)) '"a definition" (if (memv bs1e06@t '(define-syntax)) '"a define-syntax" (if (memv bs1e06@t '(module)) '"a module definition" (if (memv bs1e06@t '(library)) '"a library definition" (if (memv bs1e06@t '(import)) '"an import declaration" (if (memv bs1e06@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bs1dba@e) (if (memv bs1dd2@t '(mutable)) (bse5f@syntax-violation '#f '"attempt to reference an unexportable variable" bs1dba@e) (bse5f@syntax-violation '#f '"invalid expression" bs1dba@e))))))))))))))))))))))) (set! bs289c@bsda1@chi-expr bsda1@chi-expr) (set! bsda3@chi-set! (lambda (bs1e08@e bs1e09@r bs1e0a@mr) (let ((bs1e0e@t bs1e08@e)) (let ((bs1e10@ls/false (bsd7f@syntax-dispatch bs1e0e@t '(_ any any)))) (if (and bs1e10@ls/false (apply (lambda (bs1e12@x bs1e13@v) (bsb78@id? bs1e12@x)) bs1e10@ls/false)) (apply (lambda (bs1e16@x bs1e17@v) (call-with-values (lambda () (bsb9a@syntax-type bs1e16@x bs1e09@r)) (lambda (bs1e20@bs1e1b bs1e21@bs1e1d bs1e22@bs1e1f) (let ((bs1e26@kwd bs1e22@bs1e1f) (bs1e27@value bs1e21@bs1e1d) (bs1e28@type bs1e20@bs1e1b)) (let ((bs1e2c@t bs1e28@type)) (if (memv bs1e2c@t '(lexical)) (begin (bsd0d@set-lexical-mutable! bs1e27@value '#t) (list 'set! (bsd09@lexical-var bs1e27@value) (bsda1@chi-expr bs1e17@v bs1e09@r bs1e0a@mr))) (if (memv bs1e2c@t '(core-prim)) (bse5f@syntax-violation '#f '"cannot modify imported core primitive" bs1e08@e) (if (memv bs1e2c@t '(global)) (bse5f@syntax-violation '#f '"attempt to modify imported binding" bs1e08@e) (if (memv bs1e2c@t '(global-macro!)) (bsda1@chi-expr (bsd9b@chi-global-macro bs1e27@value bs1e08@e '#f) bs1e09@r bs1e0a@mr) (if (memv bs1e2c@t '(local-macro!)) (bsda1@chi-expr (bsd99@chi-local-macro bs1e27@value bs1e08@e '#f) bs1e09@r bs1e0a@mr) (if (memv bs1e2c@t '(mutable)) (bse5f@syntax-violation '#f '"attempt to assign to an unexportable variable" bs1e08@e) (bse5f@syntax-violation '#f '"invalid syntax" bs1e08@e)))))))))))) bs1e10@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1e0e@t)))))) (set! bs289d@bsda3@chi-set! bsda3@chi-set!) (set! bsda5@verify-formals (lambda (bs1e2e@fmls bs1e2f@stx) (let ((bs1e32@t bs1e2e@fmls)) (let ((bs1e34@ls/false (bsd7f@syntax-dispatch bs1e32@t 'each-any))) (if bs1e34@ls/false (apply (lambda (bs1e36@x*) (if (not (bsb80@valid-bound-ids? bs1e36@x*)) (bsd39@invalid-fmls-error bs1e2f@stx bs1e2e@fmls) (void))) bs1e34@ls/false) (let ((bs1e38@t bs1e32@t)) (let ((bs1e3a@ls/false (bsd7f@syntax-dispatch bs1e38@t '#(each+ any () any)))) (if bs1e3a@ls/false (apply (lambda (bs1e3c@x* bs1e3d@x) (if (not (bsb80@valid-bound-ids? (cons bs1e3d@x bs1e3c@x*))) (bsd39@invalid-fmls-error bs1e2f@stx bs1e2e@fmls) (void))) bs1e3a@ls/false) (let ((bs1e40@t bs1e38@t)) (let ((bs1e42@ls/false (bsd7f@syntax-dispatch bs1e40@t '_))) (if bs1e42@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid syntax" bs1e2f@stx)) bs1e42@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1e40@t)))))))))))) (set! bs289e@bsda5@verify-formals bsda5@verify-formals) (set! bsda7@chi-lambda-clause (lambda (bs1e44@stx bs1e45@fmls bs1e46@body* bs1e47@r bs1e48@mr) (let ((bs1e4e@t bs1e45@fmls)) (let ((bs1e50@ls/false (bsd7f@syntax-dispatch bs1e4e@t 'each-any))) (if bs1e50@ls/false (apply (lambda (bs1e52@x*) (begin (bsda5@verify-formals bs1e45@fmls bs1e44@stx) (let ((bs1e54@lex* (map bsb00@gen-lexical bs1e52@x*)) (bs1e55@lab* (map bsb04@gen-label bs1e52@x*))) (values bs1e54@lex* (bsdb7@chi-internal (bsb62@add-subst (bsb38@make-full-rib bs1e52@x* bs1e55@lab*) bs1e46@body*) (bsd11@add-lexicals bs1e55@lab* bs1e54@lex* bs1e47@r) bs1e48@mr))))) bs1e50@ls/false) (let ((bs1e58@t bs1e4e@t)) (let ((bs1e5a@ls/false (bsd7f@syntax-dispatch bs1e58@t '#(each+ any () any)))) (if bs1e5a@ls/false (apply (lambda (bs1e5c@x* bs1e5d@x) (begin (bsda5@verify-formals bs1e45@fmls bs1e44@stx) (let ((bs1e60@lex* (map bsb00@gen-lexical bs1e5c@x*)) (bs1e61@lab* (map bsb04@gen-label bs1e5c@x*)) (bs1e62@lex (bsb00@gen-lexical bs1e5d@x)) (bs1e63@lab (bsb04@gen-label bs1e5d@x))) (values (append bs1e60@lex* bs1e62@lex) (bsdb7@chi-internal (bsb62@add-subst (bsb38@make-full-rib (cons bs1e5d@x bs1e5c@x*) (cons bs1e63@lab bs1e61@lab*)) bs1e46@body*) (bsd11@add-lexicals (cons bs1e63@lab bs1e61@lab*) (cons bs1e62@lex bs1e60@lex*) bs1e47@r) bs1e48@mr))))) bs1e5a@ls/false) (let ((bs1e68@t bs1e58@t)) (let ((bs1e6a@ls/false (bsd7f@syntax-dispatch bs1e68@t '_))) (if bs1e6a@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid syntax" bs1e45@fmls)) bs1e6a@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1e68@t)))))))))))) (set! bs289f@bsda7@chi-lambda-clause bsda7@chi-lambda-clause) (set! bsda9@chi-lambda-clause* (lambda (bs1e6c@stx bs1e6d@fmls* bs1e6e@body** bs1e6f@r bs1e70@mr) (if (null? bs1e6d@fmls*) (values '() '()) (call-with-values (lambda () (bsda7@chi-lambda-clause bs1e6c@stx (car bs1e6d@fmls*) (car bs1e6e@body**) bs1e6f@r bs1e70@mr)) (lambda (bs1e7a@bs1e77 bs1e7b@bs1e79) (let ((bs1e7e@b bs1e7b@bs1e79) (bs1e7f@a bs1e7a@bs1e77)) (call-with-values (lambda () (bsda9@chi-lambda-clause* bs1e6c@stx (cdr bs1e6d@fmls*) (cdr bs1e6e@body**) bs1e6f@r bs1e70@mr)) (lambda (bs1e86@bs1e83 bs1e87@bs1e85) (let ((bs1e8a@b* bs1e87@bs1e85) (bs1e8b@a* bs1e86@bs1e83)) (values (cons bs1e7f@a bs1e8b@a*) (cons bs1e7e@b bs1e8a@b*))))))))))) (set! bs28a0@bsda9@chi-lambda-clause* bsda9@chi-lambda-clause*) (set! bsdab@chi-defun (lambda (bs1e8e@x bs1e8f@r bs1e90@mr) (let ((bs1e94@fmls (car bs1e8e@x)) (bs1e95@body* (cdr bs1e8e@x))) (call-with-values (lambda () (bsda7@chi-lambda-clause bs1e94@fmls bs1e94@fmls bs1e95@body* bs1e8f@r bs1e90@mr)) (lambda (bs1e9c@bs1e99 bs1e9d@bs1e9b) (let ((bs1ea0@body bs1e9d@bs1e9b) (bs1ea1@fmls bs1e9c@bs1e99)) (bsadb@bsa0d@build-lambda '#f bs1ea1@fmls bs1ea0@body))))))) (set! bs28a1@bsdab@chi-defun bsdab@chi-defun) (set! bsdad@chi-rhs (lambda (bs1ea4@rhs bs1ea5@r bs1ea6@mr) (let ((bs1eaa@t (car bs1ea4@rhs))) (if (memv bs1eaa@t '(defun)) (bsdab@chi-defun (cdr bs1ea4@rhs) bs1ea5@r bs1ea6@mr) (if (memv bs1eaa@t '(expr)) (let ((bs1eac@expr (cdr bs1ea4@rhs))) (bsda1@chi-expr bs1eac@expr bs1ea5@r bs1ea6@mr)) (if (memv bs1eaa@t '(top-expr)) (let ((bs1eae@expr (cdr bs1ea4@rhs))) (bsadd@bsa3d@build-sequence '#f (list (bsda1@chi-expr bs1eae@expr bs1ea5@r bs1ea6@mr) (bsade@bsa3f@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bs1ea4@rhs))))))) (set! bs28a2@bsdad@chi-rhs bsdad@chi-rhs) (set! bsdaf@expand-interaction-rhs*/init* (lambda (bs1eb0@lhs* bs1eb1@rhs* bs1eb2@init* bs1eb3@r bs1eb4@mr) (let bs1ebe@f ((bs1eba@lhs* bs1eb0@lhs*) (bs1ebb@rhs* bs1eb1@rhs*)) (if (null? bs1eba@lhs*) (map (lambda (bs1ec0@x) (bsda1@chi-expr bs1ec0@x bs1eb3@r bs1eb4@mr)) bs1eb2@init*) (let ((bs1ec2@lhs (car bs1eba@lhs*)) (bs1ec3@rhs (car bs1ebb@rhs*))) (let ((bs1ec6@t (car bs1ec3@rhs))) (if (memv bs1ec6@t '(defun)) (let ((bs1ec8@rhs (bsdab@chi-defun (cdr bs1ec3@rhs) bs1eb3@r bs1eb4@mr))) (cons (list 'set! bs1ec2@lhs bs1ec8@rhs) (bs1ebe@f (cdr bs1eba@lhs*) (cdr bs1ebb@rhs*)))) (if (memv bs1ec6@t '(expr)) (let ((bs1eca@rhs (bsda1@chi-expr (cdr bs1ec3@rhs) bs1eb3@r bs1eb4@mr))) (cons (list 'set! bs1ec2@lhs bs1eca@rhs) (bs1ebe@f (cdr bs1eba@lhs*) (cdr bs1ebb@rhs*)))) (if (memv bs1ec6@t '(top-expr)) (let ((bs1ecc@e (bsda1@chi-expr (cdr bs1ec3@rhs) bs1eb3@r bs1eb4@mr))) (cons bs1ecc@e (bs1ebe@f (cdr bs1eba@lhs*) (cdr bs1ebb@rhs*)))) (error 'expand-interaction '"invallid" bs1ec3@rhs)))))))))) (set! bs28a3@bsdaf@expand-interaction-rhs*/init* bsdaf@expand-interaction-rhs*/init*) (set! bsdb1@chi-rhs* (lambda (bs1ece@rhs* bs1ecf@r bs1ed0@mr) (let bs1ed6@f ((bs1ed4@ls bs1ece@rhs*)) (if (null? bs1ed4@ls) '() (let ((bs1ed8@a (bsdad@chi-rhs (car bs1ed4@ls) bs1ecf@r bs1ed0@mr))) (cons bs1ed8@a (bs1ed6@f (cdr bs1ed4@ls)))))))) (set! bs28a4@bsdb1@chi-rhs* bsdb1@chi-rhs*) (set! bsdb3@find-bound=? (lambda (bs1eda@x bs1edb@lhs* bs1edc@rhs*) (if (null? bs1edb@lhs*) '#f (if (bsb7c@bound-id=? bs1eda@x (car bs1edb@lhs*)) (car bs1edc@rhs*) (bsdb3@find-bound=? bs1eda@x (cdr bs1edb@lhs*) (cdr bs1edc@rhs*)))))) (set! bs28a5@bsdb3@find-bound=? bsdb3@find-bound=?) (set! bsdb5@find-dups (lambda (bs1ee0@ls) (let bs1ee6@f ((bs1ee2@ls bs1ee0@ls) (bs1ee3@dups '())) (if (null? bs1ee2@ls) bs1ee3@dups (let ((bs1ee8@t (bsdb3@find-bound=? (car bs1ee2@ls) (cdr bs1ee2@ls) (cdr bs1ee2@ls)))) (if bs1ee8@t ((lambda (bs1eea@x) (bs1ee6@f (cdr bs1ee2@ls) (cons (list (car bs1ee2@ls) bs1eea@x) bs1ee3@dups))) bs1ee8@t) (bs1ee6@f (cdr bs1ee2@ls) bs1ee3@dups))))))) (set! bs28a6@bsdb5@find-dups bsdb5@find-dups) (set! bsdb7@chi-internal (lambda (bs1eec@e* bs1eed@r bs1eee@mr) (let ((bs1ef2@rib (bsb2c@make-empty-rib))) (call-with-values (lambda () (bsdd7@chi-body* (map (lambda (bs1f04@x) (bsb62@add-subst bs1ef2@rib bs1f04@x)) (bsb76@syntax->list bs1eec@e*)) bs1eed@r bs1eee@mr '() '() '() '() '() bs1ef2@rib '#f)) (lambda (bs1f06@bs1ef5 bs1f07@bs1ef7 bs1f08@bs1ef9 bs1f09@bs1efb bs1f0a@bs1efd bs1f0b@bs1eff bs1f0c@bs1f01 bs1f0d@bs1f03) (let ((bs1f16@_exp* bs1f0d@bs1f03) (bs1f17@kwd* bs1f0c@bs1f01) (bs1f18@mod** bs1f0b@bs1eff) (bs1f19@rhs* bs1f0a@bs1efd) (bs1f1a@lex* bs1f09@bs1efb) (bs1f1b@mr bs1f08@bs1ef9) (bs1f1c@r bs1f07@bs1ef7) (bs1f1d@e* bs1f06@bs1ef5)) (begin (if (null? bs1f1d@e*) (bse5f@syntax-violation '#f '"no expression in body" bs1f1d@e*) (void)) (let ((bs1f26@init* (bsd9d@chi-expr* (append (apply append (reverse bs1f18@mod**)) bs1f1d@e*) bs1f1c@r bs1f1b@mr))) (let ((bs1f28@rhs* (bsdb1@chi-rhs* bs1f19@rhs* bs1f1c@r bs1f1b@mr))) (bsae2@bsa47@build-letrec* '#f (reverse bs1f1a@lex*) (reverse bs1f28@rhs*) (bsadd@bsa3d@build-sequence '#f bs1f26@init*))))))))))) (set! bs28a7@bsdb7@chi-internal bsdb7@chi-internal) (set! bsdb9@parse-module (lambda (bs1f2a@e) (let ((bs1f2c@t bs1f2a@e)) (let ((bs1f2e@ls/false (bsd7f@syntax-dispatch bs1f2c@t '(_ each-any . each-any)))) (if bs1f2e@ls/false (apply (lambda (bs1f30@export* bs1f31@b*) (begin (if (not (for-all bsb78@id? bs1f30@export*)) (bse5f@syntax-violation '#f '"module exports must be identifiers" bs1f2a@e) (void)) (values '#f (list->vector bs1f30@export*) bs1f31@b*))) bs1f2e@ls/false) (let ((bs1f34@t bs1f2c@t)) (let ((bs1f36@ls/false (bsd7f@syntax-dispatch bs1f34@t '(_ any each-any . each-any)))) (if bs1f36@ls/false (apply (lambda (bs1f38@name bs1f39@export* bs1f3a@b*) (begin (if (not (bsb78@id? bs1f38@name)) (bse5f@syntax-violation '#f '"module name must be an identifier" bs1f2a@e) (void)) (if (not (for-all bsb78@id? bs1f39@export*)) (bse5f@syntax-violation '#f '"module exports must be identifiers" bs1f2a@e) (void)) (values bs1f38@name (list->vector bs1f39@export*) bs1f3a@b*))) bs1f36@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs1f34@t))))))))) (set! bs28a8@bsdb9@parse-module bsdb9@parse-module) (set! bsdc3@module-interface? (lambda (bs1f3e@x) (and (simple-struct? bs1f3e@x) (eq? (simple-struct-name bs1f3e@x) 'module-interface)))) (set! bs28a9@bsdc3@module-interface? bsdc3@module-interface?) (set! bsdc5@module-interface-first-mark (lambda (bs1f40@x) (simple-struct-ref bs1f40@x '0))) (set! bs28aa@bsdc5@module-interface-first-mark bsdc5@module-interface-first-mark) (set! bsdc7@set-module-interface-first-mark! (lambda (bs1f42@x bs1f43@val) (simple-struct-set! bs1f42@x '0 bs1f43@val))) (set! bs28ab@bsdc7@set-module-interface-first-mark! bsdc7@set-module-interface-first-mark!) (set! bsdc9@module-interface-exp-id-vec (lambda (bs1f46@x) (simple-struct-ref bs1f46@x '1))) (set! bs28ac@bsdc9@module-interface-exp-id-vec bsdc9@module-interface-exp-id-vec) (set! bsdcb@set-module-interface-exp-id-vec! (lambda (bs1f48@x bs1f49@val) (simple-struct-set! bs1f48@x '1 bs1f49@val))) (set! bs28ad@bsdcb@set-module-interface-exp-id-vec! bsdcb@set-module-interface-exp-id-vec!) (set! bsdcd@module-interface-exp-lab-vec (lambda (bs1f4c@x) (simple-struct-ref bs1f4c@x '2))) (set! bs28ae@bsdcd@module-interface-exp-lab-vec bsdcd@module-interface-exp-lab-vec) (set! bsdcf@set-module-interface-exp-lab-vec! (lambda (bs1f4e@x bs1f4f@val) (simple-struct-set! bs1f4e@x '2 bs1f4f@val))) (set! bs28af@bsdcf@set-module-interface-exp-lab-vec! bsdcf@set-module-interface-exp-lab-vec!) (set! bsdd1@dummy '3) (set! bs28b0@bsdd1@dummy bsdd1@dummy) (set! bsdd3@module-interface-exp-id* (lambda (bs1f52@iface bs1f53@id) (letrec* ((bs1f57@diff-marks (lambda (bs1f5e@ls bs1f5f@x) (begin (if (null? bs1f5e@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bs1f62@a (car bs1f5e@ls))) (if (eq? bs1f62@a bs1f5f@x) '() (cons bs1f62@a (bs1f57@diff-marks (cdr bs1f5e@ls) bs1f5f@x)))))))) (let ((bs1f58@diff (bs1f57@diff-marks (bsb4a@stx-mark* bs1f53@id) (bsdc5@module-interface-first-mark bs1f52@iface))) (bs1f59@id-vec (bsdc9@module-interface-exp-id-vec bs1f52@iface))) (if (null? bs1f58@diff) bs1f59@id-vec (vector-map (lambda (bs1f5c@x) (make-simple-struct 'stx '5 (list (bsb46@stx-expr bs1f5c@x) (append bs1f58@diff (bsb4a@stx-mark* bs1f5c@x)) '() '()))) bs1f59@id-vec)))))) (set! bs28b1@bsdd3@module-interface-exp-id* bsdd3@module-interface-exp-id*) (set! bsdd5@chi-internal-module (lambda (bs1f64@e bs1f65@r bs1f66@mr bs1f67@lex* bs1f68@rhs* bs1f69@mod** bs1f6a@kwd*) (call-with-values (lambda () (bsdb9@parse-module bs1f64@e)) (lambda (bs1f78@bs1f73 bs1f79@bs1f75 bs1f7a@bs1f77) (let ((bs1f7e@e* bs1f7a@bs1f77) (bs1f7f@exp-id* bs1f79@bs1f75) (bs1f80@name bs1f78@bs1f73)) (let ((bs1f84@rib (bsb2c@make-empty-rib))) (let ((bs1f86@e* (map (lambda (bs1f88@x) (bsb62@add-subst bs1f84@rib bs1f88@x)) (bsb76@syntax->list bs1f7e@e*)))) (call-with-values (lambda () (bsdd7@chi-body* bs1f86@e* bs1f65@r bs1f66@mr bs1f67@lex* bs1f68@rhs* bs1f69@mod** bs1f6a@kwd* '() bs1f84@rib '#f)) (lambda (bs1f9a@bs1f8b bs1f9b@bs1f8d bs1f9c@bs1f8f bs1f9d@bs1f91 bs1f9e@bs1f93 bs1f9f@bs1f95 bs1fa0@bs1f97 bs1fa1@bs1f99) (let ((bs1faa@_exp* bs1fa1@bs1f99) (bs1fab@kwd* bs1fa0@bs1f97) (bs1fac@mod** bs1f9f@bs1f95) (bs1fad@rhs* bs1f9e@bs1f93) (bs1fae@lex* bs1f9d@bs1f91) (bs1faf@mr bs1f9c@bs1f8f) (bs1fb0@r bs1f9b@bs1f8d) (bs1fb1@e* bs1f9a@bs1f8b)) (let ((bs1fba@exp-lab* (vector-map (lambda (bs1fbe@x) (or (bsb8e@id->label (make-simple-struct 'stx '5 (list (bsb7a@id->sym bs1fbe@x) (bsb4a@stx-mark* bs1fbe@x) (list bs1f84@rib) '()))) (bse5f@syntax-violation '#f '"cannot find module export" bs1fbe@x))) bs1f7f@exp-id*)) (bs1fbb@mod** (cons bs1fb1@e* bs1fac@mod**))) (if (not bs1f80@name) (values bs1fae@lex* bs1fad@rhs* bs1f7f@exp-id* bs1fba@exp-lab* bs1fb0@r bs1faf@mr bs1fbb@mod** bs1fab@kwd*) (let ((bs1fc0@lab (bsb04@gen-label 'module)) (bs1fc1@iface (make-simple-struct 'module-interface '4 (list (car (bsb4a@stx-mark* bs1f80@name)) (vector-map (lambda (bs1fc4@x) (make-simple-struct 'stx '5 (list (bsb46@stx-expr bs1fc4@x) (bsb4a@stx-mark* bs1fc4@x) '() '()))) bs1f7f@exp-id*) bs1fba@exp-lab*)))) (values bs1fae@lex* bs1fad@rhs* (vector bs1f80@name) (vector bs1fc0@lab) (cons (cons bs1fc0@lab (cons '$module bs1fc1@iface)) bs1fb0@r) (cons (cons bs1fc0@lab (cons '$module bs1fc1@iface)) bs1faf@mr) bs1fbb@mod** bs1fab@kwd*)))))))))))))) (set! bs28b2@bsdd5@chi-internal-module bsdd5@chi-internal-module) (set! bsdd7@chi-body* (lambda (bs1fc6@e* bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fcc@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?) (if (null? bs1fc6@e*) (values bs1fc6@e* bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fcc@kwd* bs1fcd@exp*) (let ((bs1fda@e (car bs1fc6@e*))) (call-with-values (lambda () (bsb9a@syntax-type bs1fda@e bs1fc7@r)) (lambda (bs1fe2@bs1fdd bs1fe3@bs1fdf bs1fe4@bs1fe1) (let ((bs1fe8@kwd bs1fe4@bs1fe1) (bs1fe9@value bs1fe3@bs1fdf) (bs1fea@type bs1fe2@bs1fdd)) (let ((bs1fee@kwd* (if (bsb78@id? bs1fe8@kwd) (cons bs1fe8@kwd bs1fcc@kwd*) bs1fcc@kwd*))) (let ((bs1ff0@t bs1fea@type)) (if (memv bs1ff0@t '(define)) (call-with-values (lambda () (bsd01@parse-define bs1fda@e)) (lambda (bs1ff6@bs1ff3 bs1ff7@bs1ff5) (let ((bs1ffa@rhs bs1ff7@bs1ff5) (bs1ffb@id bs1ff6@bs1ff3)) (begin (if (bsb84@bound-id-member? bs1ffb@id bs1fee@kwd*) (bse5f@syntax-violation '#f '"cannot redefine keyword" bs1fda@e) (void)) (call-with-values (lambda () (bsb08@gen-define-label+loc bs1ffb@id bs1fce@rib)) (lambda (bs2002@bs1fff bs2003@bs2001) (let ((bs2006@lex bs2003@bs2001) (bs2007@lab bs2002@bs1fff)) (begin (bsb2e@extend-rib! bs1fce@rib bs1ffb@id bs2007@lab) (bsdd7@chi-body* (cdr bs1fc6@e*) (bsd0f@add-lexical bs2007@lab bs2006@lex bs1fc7@r) bs1fc8@mr (cons bs2006@lex bs1fc9@lex*) (cons bs1ffa@rhs bs1fca@rhs*) bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?))))))))) (if (memv bs1ff0@t '(define-syntax)) (call-with-values (lambda () (bsd03@parse-define-syntax bs1fda@e)) (lambda (bs200e@bs200b bs200f@bs200d) (let ((bs2012@rhs bs200f@bs200d) (bs2013@id bs200e@bs200b)) (begin (if (bsb84@bound-id-member? bs2013@id bs1fee@kwd*) (bse5f@syntax-violation '#f '"cannot redefine keyword" bs1fda@e) (void)) (let ((bs2016@lab (bsb0a@gen-define-label bs2013@id bs1fce@rib)) (bs2017@expanded-rhs (bsdd9@expand-transformer bs2012@rhs bs1fc8@mr))) (begin (bsb2e@extend-rib! bs1fce@rib bs2013@id bs2016@lab) (let ((bs201a@b (bsbb0@make-eval-transformer bs2017@expanded-rhs))) (bsdd7@chi-body* (cdr bs1fc6@e*) (cons (cons bs2016@lab bs201a@b) bs1fc7@r) (cons (cons bs2016@lab bs201a@b) bs1fc8@mr) bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?)))))))) (if (memv bs1ff0@t '(let-syntax letrec-syntax)) (let ((bs201c@t bs1fda@e)) (let ((bs201e@ls/false (bsd7f@syntax-dispatch bs201c@t '(_ #(each (any any)) . each-any)))) (if (and bs201e@ls/false (apply (lambda (bs2020@xlhs* bs2021@xrhs* bs2022@xbody*) (if (not (bsb80@valid-bound-ids? bs2020@xlhs*)) (bse5f@syntax-violation '#f '"invalid identifiers" bs1fda@e) (void))) bs201e@ls/false)) (apply (lambda (bs2026@xlhs* bs2027@xrhs* bs2028@xbody*) (let ((bs202c@xlab* (map bsb04@gen-label bs2026@xlhs*))) (let ((bs202e@xrib (bsb38@make-full-rib bs2026@xlhs* bs202c@xlab*))) (let ((bs2030@xb* (map (lambda (bs2032@x) (bsbb0@make-eval-transformer (bsdd9@expand-transformer (if (eq? bs1fea@type 'let-syntax) bs2032@x (bsb62@add-subst bs202e@xrib bs2032@x)) bs1fc8@mr))) bs2027@xrhs*))) (bsdd7@chi-body* (append (map (lambda (bs2034@x) (bsb62@add-subst bs202e@xrib bs2034@x)) bs2028@xbody*) (cdr bs1fc6@e*)) (append (map cons bs202c@xlab* bs2030@xb*) bs1fc7@r) (append (map cons bs202c@xlab* bs2030@xb*) bs1fc8@mr) bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?))))) bs201e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs201c@t)))) (if (memv bs1ff0@t '(begin)) (let ((bs2036@t bs1fda@e)) (let ((bs2038@ls/false (bsd7f@syntax-dispatch bs2036@t '(_ . each-any)))) (if bs2038@ls/false (apply (lambda (bs203a@x*) (bsdd7@chi-body* (append bs203a@x* (cdr bs1fc6@e*)) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?)) bs2038@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs2036@t)))) (if (memv bs1ff0@t '(global-macro global-macro!)) (bsdd7@chi-body* (cons (bsd9b@chi-global-macro bs1fe9@value bs1fda@e bs1fce@rib) (cdr bs1fc6@e*)) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?) (if (memv bs1ff0@t '(local-macro local-macro!)) (bsdd7@chi-body* (cons (bsd99@chi-local-macro bs1fe9@value bs1fda@e bs1fce@rib) (cdr bs1fc6@e*)) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?) (if (memv bs1ff0@t '(macro macro!)) (bsdd7@chi-body* (cons (bsd97@chi-macro bs1fe9@value bs1fda@e bs1fce@rib) (cdr bs1fc6@e*)) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?) (if (memv bs1ff0@t '(module)) (call-with-values (lambda () (bsdd5@chi-internal-module bs1fda@e bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd*)) (lambda (bs204c@bs203d bs204d@bs203f bs204e@bs2041 bs204f@bs2043 bs2050@bs2045 bs2051@bs2047 bs2052@bs2049 bs2053@bs204b) (let ((bs205c@kwd* bs2053@bs204b) (bs205d@mod** bs2052@bs2049) (bs205e@mr bs2051@bs2047) (bs205f@r bs2050@bs2045) (bs2060@m-exp-lab* bs204f@bs2043) (bs2061@m-exp-id* bs204e@bs2041) (bs2062@rhs* bs204d@bs203f) (bs2063@lex* bs204c@bs203d)) (begin (vector-for-each (lambda (bs206c@id bs206d@lab) (bsb2e@extend-rib! bs1fce@rib bs206c@id bs206d@lab)) bs2061@m-exp-id* bs2060@m-exp-lab*) (bsdd7@chi-body* (cdr bs1fc6@e*) bs205f@r bs205e@mr bs2063@lex* bs2062@rhs* bs205d@mod** bs205c@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?))))) (if (memv bs1ff0@t '(library)) (begin (bse41@library-expander (bsb8c@stx->datum bs1fda@e)) (bsdd7@chi-body* (cdr bs1fc6@e*) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?)) (if (memv bs1ff0@t '(export)) (let ((bs2070@t bs1fda@e)) (let ((bs2072@ls/false (bsd7f@syntax-dispatch bs2070@t '(_ . each-any)))) (if bs2072@ls/false (apply (lambda (bs2074@exp-decl*) (bsdd7@chi-body* (cdr bs1fc6@e*) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* (append bs2074@exp-decl* bs1fcd@exp*) bs1fce@rib bs1fcf@top?)) bs2072@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs2070@t)))) (if (memv bs1ff0@t '(import)) (letrec* ((bs2077@module-import? (lambda (bs20ca@e) (let ((bs20cc@t bs20ca@e)) (let ((bs20ce@ls/false (bsd7f@syntax-dispatch bs20cc@t '(_ any)))) (if (and bs20ce@ls/false (apply (lambda (bs20d0@id) (bsb78@id? bs20d0@id)) bs20ce@ls/false)) (apply (lambda (bs20d2@id) '#t) bs20ce@ls/false) (let ((bs20d4@t bs20cc@t)) (let ((bs20d6@ls/false (bsd7f@syntax-dispatch bs20d4@t '(_ . each-any)))) (if bs20d6@ls/false (apply (lambda (bs20d8@imp*) '#f) bs20d6@ls/false) (let ((bs20da@t bs20d4@t)) (let ((bs20dc@ls/false (bsd7f@syntax-dispatch bs20da@t '_))) (if bs20dc@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"malformed import form" bs20ca@e)) bs20dc@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs20da@t)))))))))))) (bs2079@module-import (lambda (bs20a8@e bs20a9@r) (let ((bs20ac@t bs20a8@e)) (let ((bs20ae@ls/false (bsd7f@syntax-dispatch bs20ac@t '(_ any)))) (if (and bs20ae@ls/false (apply (lambda (bs20b0@id) (bsb78@id? bs20b0@id)) bs20ae@ls/false)) (apply (lambda (bs20b2@id) (call-with-values (lambda () (bsb9a@syntax-type bs20b2@id bs20a9@r)) (lambda (bs20ba@bs20b5 bs20bb@bs20b7 bs20bc@bs20b9) (let ((bs20c0@kwd bs20bc@bs20b9) (bs20c1@value bs20bb@bs20b7) (bs20c2@type bs20ba@bs20b5)) (let ((bs20c6@t bs20c2@type)) (if (memv bs20c6@t '($module)) (let ((bs20c8@iface bs20c1@value)) (values (bsdd3@module-interface-exp-id* bs20c8@iface bs20b2@id) (bsdcd@module-interface-exp-lab-vec bs20c8@iface))) (bse5f@syntax-violation '#f '"invalid import" bs20a8@e))))))) bs20ae@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs20ac@t)))))) (bs207b@library-import (lambda (bs208c@e) (let ((bs208e@t bs208c@e)) (let ((bs2090@ls/false (bsd7f@syntax-dispatch bs208e@t '(any . each-any)))) (if bs2090@ls/false (apply (lambda (bs2092@ctxt bs2093@imp*) (call-with-values (lambda () (bsde1@parse-import-spec* (bse65@syntax->datum bs2093@imp*))) (lambda (bs209a@bs2097 bs209b@bs2099) (let ((bs209e@subst-labels bs209b@bs2099) (bs209f@subst-names bs209a@bs2097)) (values (vector-map (lambda (bs20a2@name) (bsb58@datum->stx bs2092@ctxt bs20a2@name)) bs209f@subst-names) bs209e@subst-labels))))) bs2090@ls/false) (let ((bs20a4@t bs208e@t)) (let ((bs20a6@ls/false (bsd7f@syntax-dispatch bs20a4@t '_))) (if bs20a6@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid import form" bs208c@e)) bs20a6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs20a4@t)))))))))) (begin (call-with-values (lambda () (if (bs2077@module-import? bs1fda@e) (bs2079@module-import bs1fda@e bs1fc7@r) (bs207b@library-import bs1fda@e))) (lambda (bs2080@bs207d bs2081@bs207f) (let ((bs2084@lab* bs2081@bs207f) (bs2085@id* bs2080@bs207d)) (vector-for-each (lambda (bs2088@id bs2089@lab) (bsb2e@extend-rib! bs1fce@rib bs2088@id bs2089@lab)) bs2085@id* bs2084@lab*)))) (bsdd7@chi-body* (cdr bs1fc6@e*) bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?))) (if bs1fcf@top? (bsdd7@chi-body* (cdr bs1fc6@e*) bs1fc7@r bs1fc8@mr (cons (bsb00@gen-lexical 'dummy) bs1fc9@lex*) (cons (cons 'top-expr bs1fda@e) bs1fca@rhs*) bs1fcb@mod** bs1fee@kwd* bs1fcd@exp* bs1fce@rib bs1fcf@top?) (values bs1fc6@e* bs1fc7@r bs1fc8@mr bs1fc9@lex* bs1fca@rhs* bs1fcb@mod** bs1fee@kwd* bs1fcd@exp*)))))))))))))))))))))) (set! bs28b3@bsdd7@chi-body* bsdd7@chi-body*) (set! bsdd9@expand-transformer (lambda (bs20de@expr bs20df@r) (let ((bs20e2@rtc (bsde5@make-collector))) (let ((bs20e4@expanded-rhs (let ((bs20ee@bs20e7 bsde7@inv-collector) (bs20ef@bs20e9 bsde9@vis-collector) (bs20f0@bs20eb bs20e2@rtc) (bs20f1@bs20ed (lambda (bs20f6@x) (values)))) (let ((bs20f8@swap (lambda () (begin (let ((bs20fa@t (bs20ee@bs20e7))) (begin (bs20ee@bs20e7 bs20f0@bs20eb) (set! bs20f0@bs20eb bs20fa@t))) (let ((bs20fc@t (bs20ef@bs20e9))) (begin (bs20ef@bs20e9 bs20f1@bs20ed) (set! bs20f1@bs20ed bs20fc@t))))))) (dynamic-wind bs20f8@swap (lambda () (bsda1@chi-expr bs20de@expr bs20df@r bs20df@r)) bs20f8@swap))))) (begin (for-each (let ((bs20fe@mark-visit (bsde9@vis-collector))) (lambda (bs2100@x) (begin (bs994@bs7e2@invoke-library bs2100@x) (bs20fe@mark-visit bs2100@x)))) (bs20e2@rtc)) bs20e4@expanded-rhs))))) (set! bs28b4@bsdd9@expand-transformer bsdd9@expand-transformer) (set! bsddb@parse-exports (lambda (bs2102@exp*) (let bs210a@f ((bs2104@exp* bs2102@exp*) (bs2105@int* '()) (bs2106@ext* '())) (if (null? bs2104@exp*) (begin (if (not (bsb80@valid-bound-ids? bs2106@ext*)) (bse5f@syntax-violation 'export '"invalid exports" (bsdb5@find-dups bs2106@ext*)) (void)) (values (map bse65@syntax->datum bs2106@ext*) bs2105@int*)) (let ((bs210c@t (car bs2104@exp*))) (let ((bs210e@ls/false (bsd7f@syntax-dispatch bs210c@t '(any . #(each (any any)))))) (if bs210e@ls/false (apply (lambda (bs2110@rename bs2111@i* bs2112@e*) (begin (if (not (and (eq? (bse65@syntax->datum bs2110@rename) 'rename) (for-all bsb78@id? bs2111@i*) (for-all bsb78@id? bs2112@e*))) (bse5f@syntax-violation 'export '"invalid export specifier" (car bs2104@exp*)) (void)) (bs210a@f (cdr bs2104@exp*) (append bs2111@i* bs2105@int*) (append bs2112@e* bs2106@ext*)))) bs210e@ls/false) (let ((bs2116@t bs210c@t)) (let ((bs2118@ls/false (bsd7f@syntax-dispatch bs2116@t 'any))) (if bs2118@ls/false (apply (lambda (bs211a@ie) (begin (if (not (bsb78@id? bs211a@ie)) (bse5f@syntax-violation 'export '"invalid export" bs211a@ie) (void)) (bs210a@f (cdr bs2104@exp*) (cons bs211a@ie bs2105@int*) (cons bs211a@ie bs2106@ext*)))) bs2118@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs2116@t))))))))))) (set! bs28b5@bsddb@parse-exports bsddb@parse-exports) (set! bsddd@parse-library-name (lambda (bs211c@spec) (letrec* ((bs211f@parse (lambda (bs212c@x) (let ((bs212e@t bs212c@x)) (let ((bs2130@ls/false (bsd7f@syntax-dispatch bs212e@t '(each-any)))) (if (and bs2130@ls/false (apply (lambda (bs2132@v*) (for-all (lambda (bs2134@x) (let ((bs2136@x (bse65@syntax->datum bs2134@x))) (and (integer? bs2136@x) (exact? bs2136@x)))) bs2132@v*)) bs2130@ls/false)) (apply (lambda (bs2138@v*) (values '() (map bse65@syntax->datum bs2138@v*))) bs2130@ls/false) (let ((bs213a@t bs212e@t)) (let ((bs213c@ls/false (bsd7f@syntax-dispatch bs213a@t '(any . any)))) (if (and bs213c@ls/false (apply (lambda (bs213e@x bs213f@rest) (symbol? (bse65@syntax->datum bs213e@x))) bs213c@ls/false)) (apply (lambda (bs2142@x bs2143@rest) (call-with-values (lambda () (bs211f@parse bs2143@rest)) (lambda (bs214a@bs2147 bs214b@bs2149) (let ((bs214e@v* bs214b@bs2149) (bs214f@x* bs214a@bs2147)) (values (cons (bse65@syntax->datum bs2142@x) bs214f@x*) bs214e@v*))))) bs213c@ls/false) (let ((bs2152@t bs213a@t)) (let ((bs2154@ls/false (bsd7f@syntax-dispatch bs2152@t '()))) (if bs2154@ls/false (apply (lambda () (values '() '())) bs2154@ls/false) (let ((bs2156@t bs2152@t)) (let ((bs2158@ls/false (bsd7f@syntax-dispatch bs2156@t '_))) (if bs2158@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid library name" bs211c@spec)) bs2158@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs2156@t)))))))))))))))) (call-with-values (lambda () (bs211f@parse bs211c@spec)) (lambda (bs2124@bs2121 bs2125@bs2123) (let ((bs2128@ver* bs2125@bs2123) (bs2129@name* bs2124@bs2121)) (begin (if (null? bs2129@name*) (bse5f@syntax-violation '#f '"empty library name" bs211c@spec) (void)) (values bs2129@name* bs2128@ver*)))))))) (set! bs28b6@bsddd@parse-library-name bsddd@parse-library-name) (set! bsddf@parse-library (lambda (bs215a@e) (let ((bs215c@t bs215a@e)) (let ((bs215e@ls/false (bsd7f@syntax-dispatch bs215c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bs215e@ls/false (apply (lambda (bs2160@library bs2161@name* bs2162@export bs2163@exp* bs2164@import bs2165@imp* bs2166@b*) (and (eq? (bse65@syntax->datum bs2162@export) 'export) (eq? (bse65@syntax->datum bs2164@import) 'import) (eq? (bse65@syntax->datum bs2160@library) 'library))) bs215e@ls/false)) (apply (lambda (bs216e@library bs216f@name* bs2170@export bs2171@exp* bs2172@import bs2173@imp* bs2174@b*) (values bs216f@name* bs2171@exp* bs2173@imp* bs2174@b*)) bs215e@ls/false) (let ((bs217c@t bs215c@t)) (let ((bs217e@ls/false (bsd7f@syntax-dispatch bs217c@t '_))) (if bs217e@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"malformed library" bs215a@e)) bs217e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs217c@t))))))))) (set! bs28b7@bsddf@parse-library bsddf@parse-library) (set! bsde1@parse-import-spec* (letrec* ((bs2181@idsyn? (lambda (bs238a@x) (symbol? (bse65@syntax->datum bs238a@x)))) (bs2183@dup-error (lambda (bs2388@name) (bse5f@syntax-violation 'import '"two imports with different bindings" bs2388@name))) (bs2185@merge-substs (lambda (bs2376@s bs2377@subst) (letrec* ((bs237b@insert-to-subst (lambda (bs237c@a bs237d@subst) (let ((bs2380@name (car bs237c@a)) (bs2381@label (cdr bs237c@a))) (let ((bs2384@t (assq bs2380@name bs237d@subst))) (if bs2384@t ((lambda (bs2386@x) (if (eq? (cdr bs2386@x) bs2381@label) bs237d@subst (bs2183@dup-error bs2380@name))) bs2384@t) (cons bs237c@a bs237d@subst))))))) (if (null? bs2376@s) bs2377@subst (bs237b@insert-to-subst (car bs2376@s) (bs2185@merge-substs (cdr bs2376@s) bs2377@subst)))))) (bs2187@exclude* (lambda (bs2346@sym* bs2347@subst) (letrec* ((bs234b@exclude (lambda (bs2364@sym bs2365@subst) (if (null? bs2365@subst) (bse5f@syntax-violation 'import '"cannot rename unbound identifier" bs2364@sym) (if (eq? bs2364@sym (caar bs2365@subst)) (values (cdar bs2365@subst) (cdr bs2365@subst)) (let ((bs2368@a (car bs2365@subst))) (call-with-values (lambda () (bs234b@exclude bs2364@sym (cdr bs2365@subst))) (lambda (bs236e@bs236b bs236f@bs236d) (let ((bs2372@subst bs236f@bs236d) (bs2373@old bs236e@bs236b)) (values bs2373@old (cons bs2368@a bs2372@subst))))))))))) (if (null? bs2346@sym*) (values '() bs2347@subst) (call-with-values (lambda () (bs234b@exclude (car bs2346@sym*) bs2347@subst)) (lambda (bs2350@bs234d bs2351@bs234f) (let ((bs2354@subst bs2351@bs234f) (bs2355@old bs2350@bs234d)) (call-with-values (lambda () (bs2187@exclude* (cdr bs2346@sym*) bs2354@subst)) (lambda (bs235c@bs2359 bs235d@bs235b) (let ((bs2360@subst bs235d@bs235b) (bs2361@old* bs235c@bs2359)) (values (cons bs2355@old bs2361@old*) bs2360@subst))))))))))) (bs2189@find* (lambda (bs233e@sym* bs233f@subst) (map (lambda (bs2342@x) (let ((bs2344@t (assq bs2342@x bs233f@subst))) (if bs2344@t (cdr bs2344@t) (bse5f@syntax-violation 'import '"cannot find identifier" bs2342@x)))) bs233e@sym*))) (bs218b@rem* (lambda (bs2336@sym* bs2337@subst) (let bs233c@f ((bs233a@subst bs2337@subst)) (if (null? bs233a@subst) '() (if (memq (caar bs233a@subst) bs2336@sym*) (bs233c@f (cdr bs233a@subst)) (cons (car bs233a@subst) (bs233c@f (cdr bs233a@subst)))))))) (bs218d@remove-dups (lambda (bs2334@ls) (if (null? bs2334@ls) '() (if (memq (car bs2334@ls) (cdr bs2334@ls)) (bs218d@remove-dups (cdr bs2334@ls)) (cons (car bs2334@ls) (bs218d@remove-dups (cdr bs2334@ls))))))) (bs218f@parse-library-name (lambda (bs224c@spec) (letrec* ((bs224f@subversion? (lambda (bs2330@x) (let ((bs2332@x (bse65@syntax->datum bs2330@x))) (and (integer? bs2332@x) (exact? bs2332@x) (>= bs2332@x '0))))) (bs2251@subversion-pred (lambda (bs22d0@x*) (let ((bs22d2@t bs22d0@x*)) (let ((bs22d4@ls/false (bsd7f@syntax-dispatch bs22d2@t 'any))) (if (and bs22d4@ls/false (apply (lambda (bs22d6@n) (bs224f@subversion? bs22d6@n)) bs22d4@ls/false)) (apply (lambda (bs22d8@n) (lambda (bs22da@x) (= bs22da@x (bse65@syntax->datum bs22d8@n)))) bs22d4@ls/false) (let ((bs22dc@t bs22d2@t)) (let ((bs22de@ls/false (bsd7f@syntax-dispatch bs22dc@t '(any . each-any)))) (if (and bs22de@ls/false (apply (lambda (bs22e0@p? bs22e1@sub*) (eq? (bse65@syntax->datum bs22e0@p?) 'and)) bs22de@ls/false)) (apply (lambda (bs22e4@p? bs22e5@sub*) (let ((bs22e8@p* (map bs2251@subversion-pred bs22e5@sub*))) (lambda (bs22ea@x) (for-all (lambda (bs22ec@p) (bs22ec@p bs22ea@x)) bs22e8@p*)))) bs22de@ls/false) (let ((bs22ee@t bs22dc@t)) (let ((bs22f0@ls/false (bsd7f@syntax-dispatch bs22ee@t '(any . each-any)))) (if (and bs22f0@ls/false (apply (lambda (bs22f2@p? bs22f3@sub*) (eq? (bse65@syntax->datum bs22f2@p?) 'or)) bs22f0@ls/false)) (apply (lambda (bs22f6@p? bs22f7@sub*) (let ((bs22fa@p* (map bs2251@subversion-pred bs22f7@sub*))) (lambda (bs22fc@x) (exists (lambda (bs22fe@p) (bs22fe@p bs22fc@x)) bs22fa@p*)))) bs22f0@ls/false) (let ((bs2300@t bs22ee@t)) (let ((bs2302@ls/false (bsd7f@syntax-dispatch bs2300@t '(any any)))) (if (and bs2302@ls/false (apply (lambda (bs2304@p? bs2305@sub) (eq? (bse65@syntax->datum bs2304@p?) 'not)) bs2302@ls/false)) (apply (lambda (bs2308@p? bs2309@sub) (let ((bs230c@p (bs2251@subversion-pred bs2309@sub))) (lambda (bs230e@x) (not (bs230c@p bs230e@x))))) bs2302@ls/false) (let ((bs2310@t bs2300@t)) (let ((bs2312@ls/false (bsd7f@syntax-dispatch bs2310@t '(any any)))) (if (and bs2312@ls/false (apply (lambda (bs2314@p? bs2315@n) (and (eq? (bse65@syntax->datum bs2314@p?) '<=) (bs224f@subversion? bs2315@n))) bs2312@ls/false)) (apply (lambda (bs2318@p? bs2319@n) (lambda (bs231c@x) (<= bs231c@x (bse65@syntax->datum bs2319@n)))) bs2312@ls/false) (let ((bs231e@t bs2310@t)) (let ((bs2320@ls/false (bsd7f@syntax-dispatch bs231e@t '(any any)))) (if (and bs2320@ls/false (apply (lambda (bs2322@p? bs2323@n) (and (eq? (bse65@syntax->datum bs2322@p?) '>=) (bs224f@subversion? bs2323@n))) bs2320@ls/false)) (apply (lambda (bs2326@p? bs2327@n) (lambda (bs232a@x) (>= bs232a@x (bse65@syntax->datum bs2327@n)))) bs2320@ls/false) (let ((bs232c@t bs231e@t)) (let ((bs232e@ls/false (bsd7f@syntax-dispatch bs232c@t '_))) (if bs232e@ls/false (apply (lambda () (bse5f@syntax-violation 'import '"invalid sub-version spec" bs224c@spec bs22d0@x*)) bs232e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs232c@t)))))))))))))))))))))))) (bs2253@version-pred (lambda (bs2280@x*) (let ((bs2282@t bs2280@x*)) (let ((bs2284@ls/false (bsd7f@syntax-dispatch bs2282@t '()))) (if bs2284@ls/false (apply (lambda () (lambda (bs2286@x) '#t)) bs2284@ls/false) (let ((bs2288@t bs2282@t)) (let ((bs228a@ls/false (bsd7f@syntax-dispatch bs2288@t '(any . each-any)))) (if (and bs228a@ls/false (apply (lambda (bs228c@c bs228d@ver*) (eq? (bse65@syntax->datum bs228c@c) 'and)) bs228a@ls/false)) (apply (lambda (bs2290@c bs2291@ver*) (let ((bs2294@p* (map bs2253@version-pred bs2291@ver*))) (lambda (bs2296@x) (for-all (lambda (bs2298@p) (bs2298@p bs2296@x)) bs2294@p*)))) bs228a@ls/false) (let ((bs229a@t bs2288@t)) (let ((bs229c@ls/false (bsd7f@syntax-dispatch bs229a@t '(any . each-any)))) (if (and bs229c@ls/false (apply (lambda (bs229e@c bs229f@ver*) (eq? (bse65@syntax->datum bs229e@c) 'or)) bs229c@ls/false)) (apply (lambda (bs22a2@c bs22a3@ver*) (let ((bs22a6@p* (map bs2253@version-pred bs22a3@ver*))) (lambda (bs22a8@x) (exists (lambda (bs22aa@p) (bs22aa@p bs22a8@x)) bs22a6@p*)))) bs229c@ls/false) (let ((bs22ac@t bs229a@t)) (let ((bs22ae@ls/false (bsd7f@syntax-dispatch bs22ac@t '(any any)))) (if (and bs22ae@ls/false (apply (lambda (bs22b0@c bs22b1@ver) (eq? (bse65@syntax->datum bs22b0@c) 'not)) bs22ae@ls/false)) (apply (lambda (bs22b4@c bs22b5@ver) (let ((bs22b8@p (bs2253@version-pred bs22b5@ver))) (lambda (bs22ba@x) (not (bs22b8@p bs22ba@x))))) bs22ae@ls/false) (let ((bs22bc@t bs22ac@t)) (let ((bs22be@ls/false (bsd7f@syntax-dispatch bs22bc@t 'each-any))) (if bs22be@ls/false (apply (lambda (bs22c0@sub*) (let ((bs22c2@p* (map bs2251@subversion-pred bs22c0@sub*))) (lambda (bs22c4@x) (let bs22ca@f ((bs22c6@p* bs22c2@p*) (bs22c7@x bs22c4@x)) (if (null? bs22c6@p*) '#t (if (null? bs22c7@x) '#f (and ((car bs22c6@p*) (car bs22c7@x)) (bs22ca@f (cdr bs22c6@p*) (cdr bs22c7@x))))))))) bs22be@ls/false) (let ((bs22cc@t bs22bc@t)) (let ((bs22ce@ls/false (bsd7f@syntax-dispatch bs22cc@t '_))) (if bs22ce@ls/false (apply (lambda () (bse5f@syntax-violation 'import '"invalid version spec" bs224c@spec bs2280@x*)) bs22ce@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs22cc@t)))))))))))))))))))))) (let bs2256@f ((bs2254@x bs224c@spec)) (let ((bs2258@t bs2254@x)) (let ((bs225a@ls/false (bsd7f@syntax-dispatch bs2258@t '(each-any)))) (if bs225a@ls/false (apply (lambda (bs225c@version-spec*) (values '() (bs2253@version-pred bs225c@version-spec*))) bs225a@ls/false) (let ((bs225e@t bs2258@t)) (let ((bs2260@ls/false (bsd7f@syntax-dispatch bs225e@t '(any . any)))) (if (and bs2260@ls/false (apply (lambda (bs2262@x bs2263@x*) (bs2181@idsyn? bs2262@x)) bs2260@ls/false)) (apply (lambda (bs2266@x bs2267@x*) (call-with-values (lambda () (bs2256@f bs2267@x*)) (lambda (bs226e@bs226b bs226f@bs226d) (let ((bs2272@pred bs226f@bs226d) (bs2273@name bs226e@bs226b)) (values (cons (bse65@syntax->datum bs2266@x) bs2273@name) bs2272@pred))))) bs2260@ls/false) (let ((bs2276@t bs225e@t)) (let ((bs2278@ls/false (bsd7f@syntax-dispatch bs2276@t '()))) (if bs2278@ls/false (apply (lambda () (values '() (lambda (bs227a@x) '#t))) bs2278@ls/false) (let ((bs227c@t bs2276@t)) (let ((bs227e@ls/false (bsd7f@syntax-dispatch bs227c@t '_))) (if bs227e@ls/false (apply (lambda () (bse5f@syntax-violation '#f '"invalid import spec" bs224c@spec)) bs227e@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs227c@t))))))))))))))))) (bs2191@import-library (lambda (bs223c@spec*) (call-with-values (lambda () (bs218f@parse-library-name bs223c@spec*)) (lambda (bs2242@bs223f bs2243@bs2241) (let ((bs2246@pred bs2243@bs2241) (bs2247@name bs2242@bs223f)) (begin (if (null? bs2247@name) (bse5f@syntax-violation 'import '"empty library name" bs223c@spec*) (void)) (let ((bs224a@lib (bs98d@bs7d4@find-library-by-name bs2247@name))) (begin (if (not bs224a@lib) (bse5f@syntax-violation 'import '"cannot find library with required name" bs2247@name) (void)) (if (not (bs2246@pred (bs967@bs788@library-version bs224a@lib))) (bse5f@syntax-violation 'import '"library does not satisfy version specification" bs223c@spec* bs224a@lib) (void)) ((bsdeb@imp-collector) bs224a@lib) (bs96f@bs798@library-subst bs224a@lib))))))))) (bs2193@get-import (lambda (bs21ae@spec) (let ((bs21b0@t bs21ae@spec)) (let ((bs21b2@ls/false (bsd7f@syntax-dispatch bs21b0@t '(any . each-any)))) (if (and bs21b2@ls/false (apply (lambda (bs21b4@x bs21b5@x*) (not (memq (bse65@syntax->datum bs21b4@x) '(for rename except only prefix library)))) bs21b2@ls/false)) (apply (lambda (bs21b8@x bs21b9@x*) (bs2191@import-library (cons bs21b8@x bs21b9@x*))) bs21b2@ls/false) (let ((bs21bc@t bs21b0@t)) (let ((bs21be@ls/false (bsd7f@syntax-dispatch bs21bc@t '(any any . #(each (any any)))))) (if (and bs21be@ls/false (apply (lambda (bs21c0@rename bs21c1@isp bs21c2@old* bs21c3@new*) (and (eq? (bse65@syntax->datum bs21c0@rename) 'rename) (for-all bs2181@idsyn? bs21c2@old*) (for-all bs2181@idsyn? bs21c3@new*))) bs21be@ls/false)) (apply (lambda (bs21c8@rename bs21c9@isp bs21ca@old* bs21cb@new*) (let ((bs21d0@subst (bs2193@get-import bs21c9@isp)) (bs21d1@old* (map bse65@syntax->datum bs21ca@old*)) (bs21d2@new* (map bse65@syntax->datum bs21cb@new*))) (let ((bs21d6@old-label* (bs2189@find* bs21d1@old* bs21d0@subst))) (let ((bs21d8@subst (bs218b@rem* bs21d1@old* bs21d0@subst))) (bs2185@merge-substs (map cons bs21d2@new* bs21d6@old-label*) bs21d8@subst))))) bs21be@ls/false) (let ((bs21da@t bs21bc@t)) (let ((bs21dc@ls/false (bsd7f@syntax-dispatch bs21da@t '(any any . each-any)))) (if (and bs21dc@ls/false (apply (lambda (bs21de@except bs21df@isp bs21e0@sym*) (and (eq? (bse65@syntax->datum bs21de@except) 'except) (for-all bs2181@idsyn? bs21e0@sym*))) bs21dc@ls/false)) (apply (lambda (bs21e4@except bs21e5@isp bs21e6@sym*) (let ((bs21ea@subst (bs2193@get-import bs21e5@isp))) (bs218b@rem* (map bse65@syntax->datum bs21e6@sym*) bs21ea@subst))) bs21dc@ls/false) (let ((bs21ec@t bs21da@t)) (let ((bs21ee@ls/false (bsd7f@syntax-dispatch bs21ec@t '(any any . each-any)))) (if (and bs21ee@ls/false (apply (lambda (bs21f0@only bs21f1@isp bs21f2@sym*) (and (eq? (bse65@syntax->datum bs21f0@only) 'only) (for-all bs2181@idsyn? bs21f2@sym*))) bs21ee@ls/false)) (apply (lambda (bs21f6@only bs21f7@isp bs21f8@sym*) (let ((bs21fc@subst (bs2193@get-import bs21f7@isp)) (bs21fd@sym* (map bse65@syntax->datum bs21f8@sym*))) (let ((bs2200@sym* (bs218d@remove-dups bs21fd@sym*))) (let ((bs2202@lab* (bs2189@find* bs2200@sym* bs21fc@subst))) (map cons bs2200@sym* bs2202@lab*))))) bs21ee@ls/false) (let ((bs2204@t bs21ec@t)) (let ((bs2206@ls/false (bsd7f@syntax-dispatch bs2204@t '(any any any)))) (if (and bs2206@ls/false (apply (lambda (bs2208@prefix bs2209@isp bs220a@p) (and (eq? (bse65@syntax->datum bs2208@prefix) 'prefix) (bs2181@idsyn? bs220a@p))) bs2206@ls/false)) (apply (lambda (bs220e@prefix bs220f@isp bs2210@p) (let ((bs2214@subst (bs2193@get-import bs220f@isp)) (bs2215@prefix (symbol->string (bse65@syntax->datum bs2210@p)))) (map (lambda (bs2218@x) (cons (string->symbol (string-append bs2215@prefix (symbol->string (car bs2218@x)))) (cdr bs2218@x))) bs2214@subst))) bs2206@ls/false) (let ((bs221a@t bs2204@t)) (let ((bs221c@ls/false (bsd7f@syntax-dispatch bs221a@t '(any each-any)))) (if (and bs221c@ls/false (apply (lambda (bs221e@library bs221f@spec*) (eq? (bse65@syntax->datum bs221e@library) 'library)) bs221c@ls/false)) (apply (lambda (bs2222@library bs2223@spec*) (bs2191@import-library bs2223@spec*)) bs221c@ls/false) (let ((bs2226@t bs221a@t)) (let ((bs2228@ls/false (bsd7f@syntax-dispatch bs2226@t '(any any . any)))) (if (and bs2228@ls/false (apply (lambda (bs222a@for bs222b@isp bs222c@rest) (eq? (bse65@syntax->datum bs222a@for) 'for)) bs2228@ls/false)) (apply (lambda (bs2230@for bs2231@isp bs2232@rest) (bs2193@get-import bs2231@isp)) bs2228@ls/false) (let ((bs2236@t bs2226@t)) (let ((bs2238@ls/false (bsd7f@syntax-dispatch bs2236@t 'any))) (if bs2238@ls/false (apply (lambda (bs223a@spec) (bse5f@syntax-violation 'import '"invalid import spec" bs223a@spec)) bs2238@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs2236@t))))))))))))))))))))))))))) (bs2195@add-imports! (lambda (bs219e@imp bs219f@h) (let ((bs21a2@subst (bs2193@get-import bs219e@imp))) (for-each (lambda (bs21a4@x) (let ((bs21a6@name (car bs21a4@x)) (bs21a7@label (cdr bs21a4@x))) (let ((bs21aa@t (hashtable-ref bs219f@h bs21a6@name '#f))) (if bs21aa@t ((lambda (bs21ac@l) (if (not (eq? bs21ac@l bs21a7@label)) (bs2183@dup-error bs21a6@name) (void))) bs21aa@t) (hashtable-set! bs219f@h bs21a6@name bs21a7@label))))) bs21a2@subst))))) (lambda (bs2196@imp*) (let bs219c@f ((bs2198@imp* bs2196@imp*) (bs2199@h (make-eq-hashtable))) (if (null? bs2198@imp*) (hashtable-entries bs2199@h) (begin (bs2195@add-imports! (car bs2198@imp*) bs2199@h) (bs219c@f (cdr bs2198@imp*) bs2199@h))))))) (set! bs28b8@bsde1@parse-import-spec* bsde1@parse-import-spec*) (set! bsde3@make-top-rib (lambda (bs238c@names bs238d@labels) (let ((bs2390@rib (bsb2c@make-empty-rib))) (begin (vector-for-each (lambda (bs2392@name bs2393@label) (begin (if (not (symbol? bs2392@name)) (error 'make-top-rib '"BUG: not a symbol" bs2392@name) (void)) (bsb30@extend-rib/nc! bs2390@rib (make-simple-struct 'stx '5 (list bs2392@name bsafc@top-mark* '() '())) bs2393@label))) bs238c@names bs238d@labels) bs2390@rib)))) (set! bs28b9@bsde3@make-top-rib bsde3@make-top-rib) (set! bsde5@make-collector (lambda () (let ((bs2396@ls '())) (lambda bs239a (let ((bs239b (length bs239a))) (if (= bs239b '0) (apply (lambda () bs2396@ls) bs239a) (if (= bs239b '1) (apply (lambda (bs2398@x) (set! bs2396@ls (bsaf5@set-cons bs2398@x bs2396@ls))) bs239a) (error 'apply '"invalid arg count")))))))) (set! bs28ba@bsde5@make-collector bsde5@make-collector) (set! bsde7@inv-collector (bs6c8@bs5a6@make-parameter (lambda bs239c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bs239e@x) (begin (if (not (procedure? bs239e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bs239e@x) (void)) bs239e@x)))) (set! bs28bb@bsde7@inv-collector bsde7@inv-collector) (set! bsde9@vis-collector (bs6c8@bs5a6@make-parameter (lambda bs23a0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bs23a2@x) (begin (if (not (procedure? bs23a2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bs23a2@x) (void)) bs23a2@x)))) (set! bs28bc@bsde9@vis-collector bsde9@vis-collector) (set! bsdeb@imp-collector (bs6c8@bs5a6@make-parameter (lambda bs23a4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bs23a6@x) (begin (if (not (procedure? bs23a6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bs23a6@x) (void)) bs23a6@x)))) (set! bs28bd@bsdeb@imp-collector bsdeb@imp-collector) (set! bsded@chi-library-internal (lambda (bs23a8@e* bs23a9@rib bs23aa@top?) (call-with-values (lambda () (bsdd7@chi-body* bs23a8@e* '() '() '() '() '() '() '() bs23a9@rib bs23aa@top?)) (lambda (bs23be@bs23af bs23bf@bs23b1 bs23c0@bs23b3 bs23c1@bs23b5 bs23c2@bs23b7 bs23c3@bs23b9 bs23c4@bs23bb bs23c5@bs23bd) (let ((bs23ce@exp* bs23c5@bs23bd) (bs23cf@_kwd* bs23c4@bs23bb) (bs23d0@mod** bs23c3@bs23b9) (bs23d1@rhs* bs23c2@bs23b7) (bs23d2@lex* bs23c1@bs23b5) (bs23d3@mr bs23c0@bs23b3) (bs23d4@r bs23bf@bs23b1) (bs23d5@e* bs23be@bs23af)) (values (append (apply append (reverse bs23d0@mod**)) bs23d5@e*) bs23d4@r bs23d3@mr (reverse bs23d2@lex*) (reverse bs23d1@rhs*) bs23ce@exp*)))))) (set! bs28be@bsded@chi-library-internal bsded@chi-library-internal) (set! bsdef@chi-interaction-expr (lambda (bs23de@e bs23df@rib bs23e0@r) (call-with-values (lambda () (bsdd7@chi-body* (list bs23de@e) bs23e0@r bs23e0@r '() '() '() '() '() bs23df@rib '#t)) (lambda (bs23f4@bs23e5 bs23f5@bs23e7 bs23f6@bs23e9 bs23f7@bs23eb bs23f8@bs23ed bs23f9@bs23ef bs23fa@bs23f1 bs23fb@bs23f3) (let ((bs2404@_exp* bs23fb@bs23f3) (bs2405@_kwd* bs23fa@bs23f1) (bs2406@mod** bs23f9@bs23ef) (bs2407@rhs* bs23f8@bs23ed) (bs2408@lex* bs23f7@bs23eb) (bs2409@mr bs23f6@bs23e9) (bs240a@r bs23f5@bs23e7) (bs240b@e* bs23f4@bs23e5)) (let ((bs2414@e* (bsdaf@expand-interaction-rhs*/init* (reverse bs2408@lex*) (reverse bs2407@rhs*) (append (apply append (reverse bs2406@mod**)) bs240b@e*) bs240a@r bs2409@mr))) (let ((bs2416@e (if (null? bs2414@e*) (bsade@bsa3f@build-void) (if (null? (cdr bs2414@e*)) (car bs2414@e*) (bsadd@bsa3d@build-sequence '#f bs2414@e*))))) (values bs2416@e bs240a@r)))))))) (set! bs28bf@bsdef@chi-interaction-expr bsdef@chi-interaction-expr) (set! bsdf1@library-body-expander (lambda (bs2418@name bs2419@main-exp* bs241a@imp* bs241b@b* bs241c@top?) (letrec* ((bs2423@itc (bsde5@make-collector))) (let ((bs242c@bs2425 bsdeb@imp-collector) (bs242d@bs2427 bse6f@top-level-context) (bs242e@bs2429 bs2423@itc) (bs242f@bs242b '#f)) (let ((bs2434@swap (lambda () (begin (let ((bs2436@t (bs242c@bs2425))) (begin (bs242c@bs2425 bs242e@bs2429) (set! bs242e@bs2429 bs2436@t))) (let ((bs2438@t (bs242d@bs2427))) (begin (bs242d@bs2427 bs242f@bs242b) (set! bs242f@bs242b bs2438@t))))))) (dynamic-wind bs2434@swap (lambda () (call-with-values (lambda () (bsde1@parse-import-spec* bs241a@imp*)) (lambda (bs243e@bs243b bs243f@bs243d) (let ((bs2442@subst-labels bs243f@bs243d) (bs2443@subst-names bs243e@bs243b)) (let ((bs2446@rib (bsde3@make-top-rib bs2443@subst-names bs2442@subst-labels))) (letrec* ((bs2449@wrap (lambda (bs24c4@x) (make-simple-struct 'stx '5 (list bs24c4@x bsafc@top-mark* (list bs2446@rib) '()))))) (let ((bs244a@b* (map bs2449@wrap bs241b@b*)) (bs244b@main-exp* (map bs2449@wrap bs2419@main-exp*)) (bs244c@rtc (bsde5@make-collector)) (bs244d@vtc (bsde5@make-collector))) (let ((bs245a@bs2453 bsde7@inv-collector) (bs245b@bs2455 bsde9@vis-collector) (bs245c@bs2457 bs244c@rtc) (bs245d@bs2459 bs244d@vtc)) (let ((bs2462@swap (lambda () (begin (let ((bs2464@t (bs245a@bs2453))) (begin (bs245a@bs2453 bs245c@bs2457) (set! bs245c@bs2457 bs2464@t))) (let ((bs2466@t (bs245b@bs2455))) (begin (bs245b@bs2455 bs245d@bs2459) (set! bs245d@bs2459 bs2466@t))))))) (dynamic-wind bs2462@swap (lambda () (call-with-values (lambda () (bsded@chi-library-internal bs244a@b* bs2446@rib bs241c@top?)) (lambda (bs2474@bs2469 bs2475@bs246b bs2476@bs246d bs2477@bs246f bs2478@bs2471 bs2479@bs2473) (let ((bs2480@internal-exp* bs2479@bs2473) (bs2481@rhs* bs2478@bs2471) (bs2482@lex* bs2477@bs246f) (bs2483@mr bs2476@bs246d) (bs2484@r bs2475@bs246b) (bs2485@init* bs2474@bs2469)) (call-with-values (lambda () (bsddb@parse-exports (append bs244b@main-exp* bs2480@internal-exp*))) (lambda (bs2490@bs248d bs2491@bs248f) (let ((bs2494@exp-id* bs2491@bs248f) (bs2495@exp-name* bs2490@bs248d)) (begin (bsb34@seal-rib! bs2446@rib) (let ((bs2498@init* (bsd9d@chi-expr* bs2485@init* bs2484@r bs2483@mr))) (let ((bs249a@rhs* (bsdb1@chi-rhs* bs2481@rhs* bs2484@r bs2483@mr))) (begin (bsb36@unseal-rib! bs2446@rib) (let ((bs249c@loc* (map bsb02@gen-global bs2482@lex*)) (bs249d@export-subst (bse49@make-export-subst bs2495@exp-name* bs2494@exp-id*))) (letrec* ((bs24a1@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (bse4b@make-export-env/macros bs2482@lex* bs249c@loc* bs2484@r)) (lambda (bs24a8@bs24a3 bs24a9@bs24a5 bs24aa@bs24a7) (let ((bs24ae@macro* bs24aa@bs24a7) (bs24af@global* bs24a9@bs24a5) (bs24b0@export-env bs24a8@bs24a3)) (begin (for-each (lambda (bs24b4@s) (let ((bs24b6@name (car bs24b4@s)) (bs24b7@label (cdr bs24b4@s))) (let ((bs24ba@p (assq bs24b7@label bs24b0@export-env))) (if bs24ba@p (let ((bs24bc@b (cdr bs24ba@p))) (let ((bs24be@type (car bs24bc@b))) (if (eq? bs24be@type 'mutable) (bse5f@syntax-violation 'export bs24a1@errstr bs24b6@name) (void)))) (void))))) bs249d@export-subst) (let ((bs24c0@invoke-body (bsae3@bsa49@build-library-letrec* '#f bs2418@name bs2482@lex* bs249c@loc* bs249a@rhs* (if (null? bs2498@init*) (bsade@bsa3f@build-void) (bsadd@bsa3d@build-sequence '#f bs2498@init*)))) (bs24c1@invoke-definitions (map bsada@bs99c@build-global-define (map cdr bs24af@global*)))) (values (bs2423@itc) (bs244c@rtc) (bs244d@vtc) (bsadd@bsa3d@build-sequence '#f (append bs24c1@invoke-definitions (list bs24c0@invoke-body))) bs24ae@macro* bs249d@export-subst bs24b0@export-env))))))))))))))))))) bs2462@swap)))))))))) bs2434@swap)))))) (set! bs28c0@bsdf1@library-body-expander bsdf1@library-body-expander) (set! bsdf3@core-library-expander (lambda (bs24c6@e bs24c7@verify-name) (call-with-values (lambda () (bsddf@parse-library bs24c6@e)) (lambda (bs24d2@bs24cb bs24d3@bs24cd bs24d4@bs24cf bs24d5@bs24d1) (let ((bs24da@b* bs24d5@bs24d1) (bs24db@imp* bs24d4@bs24cf) (bs24dc@exp* bs24d3@bs24cd) (bs24dd@name* bs24d2@bs24cb)) (call-with-values (lambda () (bsddd@parse-library-name bs24dd@name*)) (lambda (bs24e6@bs24e3 bs24e7@bs24e5) (let ((bs24ea@ver bs24e7@bs24e5) (bs24eb@name bs24e6@bs24e3)) (begin (bs24c7@verify-name bs24eb@name) (call-with-values (lambda () (bsdf1@library-body-expander bs24eb@name bs24dc@exp* bs24db@imp* bs24da@b* '#f)) (lambda (bs24fc@bs24ef bs24fd@bs24f1 bs24fe@bs24f3 bs24ff@bs24f5 bs2500@bs24f7 bs2501@bs24f9 bs2502@bs24fb) (let ((bs250a@export-env bs2502@bs24fb) (bs250b@export-subst bs2501@bs24f9) (bs250c@visit-code bs2500@bs24f7) (bs250d@invoke-code bs24ff@bs24f5) (bs250e@visit-req* bs24fe@bs24f3) (bs250f@invoke-req* bs24fd@bs24f1) (bs2510@imp* bs24fc@bs24ef)) (values bs24eb@name bs24ea@ver bs2510@imp* bs250f@invoke-req* bs250e@visit-req* bs250d@invoke-code bs250c@visit-code bs250b@export-subst bs250a@export-env))))))))))))) (set! bs28c1@bsdf3@core-library-expander bsdf3@core-library-expander) (set! bsdf5@parse-top-level-program (lambda (bs2518@e*) (let ((bs251a@t bs2518@e*)) (let ((bs251c@ls/false (bsd7f@syntax-dispatch bs251a@t '((any . each-any) . each-any)))) (if (and bs251c@ls/false (apply (lambda (bs251e@import bs251f@imp* bs2520@b*) (eq? (bse65@syntax->datum bs251e@import) 'import)) bs251c@ls/false)) (apply (lambda (bs2524@import bs2525@imp* bs2526@b*) (values bs2525@imp* bs2526@b*)) bs251c@ls/false) (let ((bs252a@t bs251a@t)) (let ((bs252c@ls/false (bsd7f@syntax-dispatch bs252a@t '((any . any) . any)))) (if (and bs252c@ls/false (apply (lambda (bs252e@import bs252f@x bs2530@y) (eq? (bse65@syntax->datum bs252e@import) 'import)) bs252c@ls/false)) (apply (lambda (bs2534@import bs2535@x bs2536@y) (bse5f@syntax-violation 'expander '"invalid syntax of top-level program" (bsb72@syntax-car bs2518@e*))) bs252c@ls/false) (let ((bs253a@t bs252a@t)) (let ((bs253c@ls/false (bsd7f@syntax-dispatch bs253a@t '_))) (if bs253c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bs253c@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs253a@t)))))))))))) (set! bs28c2@bsdf5@parse-top-level-program bsdf5@parse-top-level-program) (set! bsdf7@top-level-expander (lambda (bs253e@e*) (call-with-values (lambda () (bsdf5@parse-top-level-program bs253e@e*)) (lambda (bs2544@bs2541 bs2545@bs2543) (let ((bs2548@b* bs2545@bs2543) (bs2549@imp* bs2544@bs2541)) (call-with-values (lambda () (bsdf1@library-body-expander '() '() bs2549@imp* bs2548@b* '#t)) (lambda (bs255a@bs254d bs255b@bs254f bs255c@bs2551 bs255d@bs2553 bs255e@bs2555 bs255f@bs2557 bs2560@bs2559) (let ((bs2568@export-env bs2560@bs2559) (bs2569@export-subst bs255f@bs2557) (bs256a@visit-code bs255e@bs2555) (bs256b@invoke-code bs255d@bs2553) (bs256c@visit-req* bs255c@bs2551) (bs256d@invoke-req* bs255b@bs254f) (bs256e@imp* bs255a@bs254d)) (values bs256d@invoke-req* bs256b@invoke-code))))))))) (set! bs28c3@bsdf7@top-level-expander bsdf7@top-level-expander) (set! bsdf9@rp (bs6c5@bs5a0@make-record-printer 'env (lambda (bs2576@x bs2577@p bs2578@wr) (display '"#<environment>" bs2577@p)))) (set! bs28c4@bsdf9@rp bsdf9@rp) (set! bse03@env? (lambda (bs257c@x) (and (simple-struct? bs257c@x) (eq? (simple-struct-name bs257c@x) 'env)))) (set! bs28c5@bse03@env? bse03@env?) (set! bse05@env-names (lambda (bs257e@x) (simple-struct-ref bs257e@x '0))) (set! bs28c6@bse05@env-names bse05@env-names) (set! bse07@set-env-names! (lambda (bs2580@x bs2581@val) (simple-struct-set! bs2580@x '0 bs2581@val))) (set! bs28c7@bse07@set-env-names! bse07@set-env-names!) (set! bse09@env-labels (lambda (bs2584@x) (simple-struct-ref bs2584@x '1))) (set! bs28c8@bse09@env-labels bse09@env-labels) (set! bse0b@set-env-labels! (lambda (bs2586@x bs2587@val) (simple-struct-set! bs2586@x '1 bs2587@val))) (set! bs28c9@bse0b@set-env-labels! bse0b@set-env-labels!) (set! bse0d@env-itc (lambda (bs258a@x) (simple-struct-ref bs258a@x '2))) (set! bs28ca@bse0d@env-itc bse0d@env-itc) (set! bse0f@set-env-itc! (lambda (bs258c@x bs258d@val) (simple-struct-set! bs258c@x '2 bs258d@val))) (set! bs28cb@bse0f@set-env-itc! bse0f@set-env-itc!) (set! bse11@dummy '3) (set! bs28cc@bse11@dummy bse11@dummy) (set! bse13@rp (bs6c5@bs5a0@make-record-printer 'interaction-env (lambda (bs2590@x bs2591@p bs2592@wr) (display '"#<environment>" bs2591@p)))) (set! bs28cd@bse13@rp bse13@rp) (set! bse1d@interaction-env? (lambda (bs2596@x) (and (simple-struct? bs2596@x) (eq? (simple-struct-name bs2596@x) 'interaction-env)))) (set! bs28ce@bse1d@interaction-env? bse1d@interaction-env?) (set! bse1f@interaction-env-rib (lambda (bs2598@x) (simple-struct-ref bs2598@x '0))) (set! bs28cf@bse1f@interaction-env-rib bse1f@interaction-env-rib) (set! bse21@set-interaction-env-rib! (lambda (bs259a@x bs259b@val) (simple-struct-set! bs259a@x '0 bs259b@val))) (set! bs28d0@bse21@set-interaction-env-rib! bse21@set-interaction-env-rib!) (set! bse23@interaction-env-r (lambda (bs259e@x) (simple-struct-ref bs259e@x '1))) (set! bs28d1@bse23@interaction-env-r bse23@interaction-env-r) (set! bse25@set-interaction-env-r! (lambda (bs25a0@x bs25a1@val) (simple-struct-set! bs25a0@x '1 bs25a1@val))) (set! bs28d2@bse25@set-interaction-env-r! bse25@set-interaction-env-r!) (set! bse27@interaction-env-locs (lambda (bs25a4@x) (simple-struct-ref bs25a4@x '2))) (set! bs28d3@bse27@interaction-env-locs bse27@interaction-env-locs) (set! bse29@set-interaction-env-locs! (lambda (bs25a6@x bs25a7@val) (simple-struct-set! bs25a6@x '2 bs25a7@val))) (set! bs28d4@bse29@set-interaction-env-locs! bse29@set-interaction-env-locs!) (set! bse2b@dummy '3) (set! bs28d5@bse2b@dummy bse2b@dummy) (set! bse2d@interaction-environment-symbols (lambda () (bse35@environment-symbols (bse6d@interaction-environment)))) (set! bs28d6@bse2d@interaction-environment-symbols bse2d@interaction-environment-symbols) (set! bse2f@environment-bindings (lambda (bs25aa@e) (vector->list (vector-map (lambda (bs25ac@name bs25ad@label) (bse31@parse-binding (cons bs25ac@name (bs993@bs7e0@imported-label->binding bs25ad@label)))) (bse05@env-names bs25aa@e) (bse09@env-labels bs25aa@e))))) (set! bs28d7@bse2f@environment-bindings bse2f@environment-bindings) (set! bse31@parse-binding (lambda (bs25b0@b) (cons (car bs25b0@b) (let ((bs25b2@t (cadr bs25b0@b))) (if (memv bs25b2@t '(core-prim global)) 'procedure (if (memv bs25b2@t '(core-macro macro global-macro)) 'syntax (if (memv bs25b2@t '($core-rtd)) 'record (if (eq? (car bs25b0@b) (cadr bs25b0@b)) 'syntax 'unknown)))))))) (set! bs28d8@bse31@parse-binding bse31@parse-binding) (set! bse33@environment? (lambda (bs25b4@x) (or (bse03@env? bs25b4@x) (bse1d@interaction-env? bs25b4@x)))) (set! bs28d9@bse33@environment? bse33@environment?) (set! bse35@environment-symbols (lambda (bs25b6@x) (if (bse03@env? bs25b6@x) (vector->list (bse05@env-names bs25b6@x)) (if (bse1d@interaction-env? bs25b6@x) (map values (bsb16@rib-sym* (bse1f@interaction-env-rib bs25b6@x))) (assertion-violation 'environment-symbols '"not an environment" bs25b6@x))))) (set! bs28da@bse35@environment-symbols bse35@environment-symbols) (set! bse37@environment (lambda bs25b8@imp* (let ((bs25ba@itc (bsde5@make-collector))) (let ((bs25c0@bs25bd bsdeb@imp-collector) (bs25c1@bs25bf bs25ba@itc)) (let ((bs25c4@swap (lambda () (let ((bs25c6@t (bs25c0@bs25bd))) (begin (bs25c0@bs25bd bs25c1@bs25bf) (set! bs25c1@bs25bf bs25c6@t)))))) (dynamic-wind bs25c4@swap (lambda () (call-with-values (lambda () (bsde1@parse-import-spec* bs25b8@imp*)) (lambda (bs25cc@bs25c9 bs25cd@bs25cb) (let ((bs25d0@subst-labels bs25cd@bs25cb) (bs25d1@subst-names bs25cc@bs25c9)) (make-simple-struct 'env '4 (list bs25d1@subst-names bs25d0@subst-labels bs25ba@itc)))))) bs25c4@swap)))))) (set! bs28db@bse37@environment bse37@environment) (set! bse39@null-environment (lambda (bs25d4@n) (begin (if (not (eqv? bs25d4@n '5)) (assertion-violation 'null-environment '"not 5" bs25d4@n) (void)) (bse37@environment '(psyntax null-environment-5))))) (set! bs28dc@bse39@null-environment bse39@null-environment) (set! bse3b@scheme-report-environment (lambda (bs25d6@n) (begin (if (not (eqv? bs25d6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bs25d6@n) (void)) (bse37@environment '(psyntax scheme-report-environment-5))))) (set! bs28dd@bse3b@scheme-report-environment bse3b@scheme-report-environment) (set! bse3d@expand (lambda (bs25d8@x bs25d9@env) (if (bse03@env? bs25d9@env) (let ((bs25dc@rib (bsde3@make-top-rib (bse05@env-names bs25d9@env) (bse09@env-labels bs25d9@env)))) (let ((bs25de@x (make-simple-struct 'stx '5 (list bs25d8@x bsafc@top-mark* (list bs25dc@rib) '()))) (bs25df@itc (bse0d@env-itc bs25d9@env)) (bs25e0@rtc (bsde5@make-collector)) (bs25e1@vtc (bsde5@make-collector))) (let ((bs25e6@x (let ((bs25f8@bs25e9 bse6f@top-level-context) (bs25f9@bs25eb bsde7@inv-collector) (bs25fa@bs25ed bsde9@vis-collector) (bs25fb@bs25ef bsdeb@imp-collector) (bs25fc@bs25f1 '#f) (bs25fd@bs25f3 bs25e0@rtc) (bs25fe@bs25f5 bs25e1@vtc) (bs25ff@bs25f7 bs25df@itc)) (let ((bs2608@swap (lambda () (begin (let ((bs260a@t (bs25f8@bs25e9))) (begin (bs25f8@bs25e9 bs25fc@bs25f1) (set! bs25fc@bs25f1 bs260a@t))) (let ((bs260c@t (bs25f9@bs25eb))) (begin (bs25f9@bs25eb bs25fd@bs25f3) (set! bs25fd@bs25f3 bs260c@t))) (let ((bs260e@t (bs25fa@bs25ed))) (begin (bs25fa@bs25ed bs25fe@bs25f5) (set! bs25fe@bs25f5 bs260e@t))) (let ((bs2610@t (bs25fb@bs25ef))) (begin (bs25fb@bs25ef bs25ff@bs25f7) (set! bs25ff@bs25f7 bs2610@t))))))) (dynamic-wind bs2608@swap (lambda () (bsda1@chi-expr bs25de@x '() '())) bs2608@swap))))) (begin (bsb34@seal-rib! bs25dc@rib) (values bs25e6@x (bs25e0@rtc)))))) (if (bse1d@interaction-env? bs25d9@env) (let ((bs2612@rib (bse1f@interaction-env-rib bs25d9@env)) (bs2613@r (bse23@interaction-env-r bs25d9@env)) (bs2614@rtc (bsde5@make-collector))) (let ((bs2618@x (make-simple-struct 'stx '5 (list bs25d8@x bsafc@top-mark* (list bs2612@rib) '())))) (call-with-values (lambda () (let ((bs262e@bs261f bse6f@top-level-context) (bs262f@bs2621 bsde7@inv-collector) (bs2630@bs2623 bsde9@vis-collector) (bs2631@bs2625 bsdeb@imp-collector) (bs2632@bs2627 bs25d9@env) (bs2633@bs2629 bs2614@rtc) (bs2634@bs262b (bsde5@make-collector)) (bs2635@bs262d (bsde5@make-collector))) (let ((bs263e@swap (lambda () (begin (let ((bs2640@t (bs262e@bs261f))) (begin (bs262e@bs261f bs2632@bs2627) (set! bs2632@bs2627 bs2640@t))) (let ((bs2642@t (bs262f@bs2621))) (begin (bs262f@bs2621 bs2633@bs2629) (set! bs2633@bs2629 bs2642@t))) (let ((bs2644@t (bs2630@bs2623))) (begin (bs2630@bs2623 bs2634@bs262b) (set! bs2634@bs262b bs2644@t))) (let ((bs2646@t (bs2631@bs2625))) (begin (bs2631@bs2625 bs2635@bs262d) (set! bs2635@bs262d bs2646@t))))))) (dynamic-wind bs263e@swap (lambda () (bsdef@chi-interaction-expr bs2618@x bs2612@rib bs2613@r)) bs263e@swap)))) (lambda (bs2648@bs261b bs2649@bs261d) (let ((bs264c@r^ bs2649@bs261d) (bs264d@e bs2648@bs261b)) (begin (bse25@set-interaction-env-r! bs25d9@env bs264c@r^) (values bs264d@e (bs2614@rtc)))))))) (assertion-violation 'expand '"not an environment" bs25d9@env))))) (set! bs28de@bse3d@expand bse3d@expand) (set! bse3f@eval (lambda (bs2650@x bs2651@env) (begin (if (not (bse33@environment? bs2651@env)) (error 'eval '"not an environment" bs2651@env) (void)) (call-with-values (lambda () (bse3d@expand bs2650@x bs2651@env)) (lambda (bs2658@bs2655 bs2659@bs2657) (let ((bs265c@invoke-req* bs2659@bs2657) (bs265d@x bs2658@bs2655)) (begin (for-each bs994@bs7e2@invoke-library bs265c@invoke-req*) (eval-core (bs71e@bs6d6@expanded->core bs265d@x))))))))) (set! bs28df@bse3f@eval bse3f@eval) (set! bse41@library-expander (lambda bs26ce (let ((bs26cf (length bs26ce))) (if (= bs26cf '3) (apply (lambda (bs2660@x bs2661@filename bs2662@verify-name) (letrec* ((bs2667@build-visit-code (lambda (bs26bc@macro*) (if (null? bs26bc@macro*) (bsade@bsa3f@build-void) (bsadd@bsa3d@build-sequence '#f (map (lambda (bs26be@x) (let ((bs26c0@loc (car bs26be@x)) (bs26c1@src (cddr bs26be@x))) (list 'set! bs26c0@loc bs26c1@src))) bs26bc@macro*))))) (bs2669@visit! (lambda (bs26b4@macro*) (for-each (lambda (bs26b6@x) (let ((bs26b8@loc (car bs26b6@x)) (bs26b9@proc (cadr bs26b6@x))) (set-symbol-value! bs26b8@loc bs26b9@proc))) bs26b4@macro*)))) (call-with-values (lambda () (bsdf3@core-library-expander bs2660@x bs2662@verify-name)) (lambda (bs267c@bs266b bs267d@bs266d bs267e@bs266f bs267f@bs2671 bs2680@bs2673 bs2681@bs2675 bs2682@bs2677 bs2683@bs2679 bs2684@bs267b) (let ((bs268e@export-env bs2684@bs267b) (bs268f@export-subst bs2683@bs2679) (bs2690@macro* bs2682@bs2677) (bs2691@invoke-code bs2681@bs2675) (bs2692@vis* bs2680@bs2673) (bs2693@inv* bs267f@bs2671) (bs2694@imp* bs267e@bs266f) (bs2695@ver bs267d@bs266d) (bs2696@name bs267c@bs266b)) (let ((bs26a0@id (gensym)) (bs26a1@name bs2696@name) (bs26a2@ver bs2695@ver) (bs26a3@imp* (map bs998@bs7ea@library-spec bs2694@imp*)) (bs26a4@vis* (map bs998@bs7ea@library-spec bs2692@vis*)) (bs26a5@inv* (map bs998@bs7ea@library-spec bs2693@inv*)) (bs26a6@visit-proc (lambda () (bs2669@visit! bs2690@macro*))) (bs26a7@invoke-proc (lambda () (eval-core (bs71e@bs6d6@expanded->core bs2691@invoke-code)))) (bs26a8@visit-code (bs2667@build-visit-code bs2690@macro*)) (bs26a9@invoke-code bs2691@invoke-code)) (begin (bs992@bs7de@install-library bs26a0@id bs26a1@name bs26a2@ver bs26a3@imp* bs26a4@vis* bs26a5@inv* bs268f@export-subst bs268e@export-env bs26a6@visit-proc bs26a7@invoke-proc bs26a8@visit-code bs26a9@invoke-code '#t bs2661@filename) (values bs26a0@id bs26a1@name bs26a2@ver bs26a3@imp* bs26a4@vis* bs26a5@inv* bs26a9@invoke-code bs26a8@visit-code bs268f@export-subst bs268e@export-env)))))))) bs26ce) (if (= bs26cf '2) (apply (lambda (bs26c4@x bs26c5@filename) (bse41@library-expander bs26c4@x bs26c5@filename (lambda (bs26c8@x) (values)))) bs26ce) (if (= bs26cf '1) (apply (lambda (bs26ca@x) (bse41@library-expander bs26ca@x '#f (lambda (bs26cc@x) (values)))) bs26ce) (error 'apply '"invalid arg count"))))))) (set! bs28e0@bse41@library-expander bse41@library-expander) (set! bse43@boot-library-expand (lambda (bs26d0@x) (call-with-values (lambda () (bse41@library-expander bs26d0@x)) (lambda (bs26e6@bs26d3 bs26e7@bs26d5 bs26e8@bs26d7 bs26e9@bs26d9 bs26ea@bs26db bs26eb@bs26dd bs26ec@bs26df bs26ed@bs26e1 bs26ee@bs26e3 bs26ef@bs26e5) (let ((bs26fa@export-env bs26ef@bs26e5) (bs26fb@export-subst bs26ee@bs26e3) (bs26fc@visit-code bs26ed@bs26e1) (bs26fd@invoke-code bs26ec@bs26df) (bs26fe@inv* bs26eb@bs26dd) (bs26ff@vis* bs26ea@bs26db) (bs2700@imp* bs26e9@bs26d9) (bs2701@ver bs26e8@bs26d7) (bs2702@name bs26e7@bs26d5) (bs2703@id bs26e6@bs26d3)) (values bs2702@name bs26fd@invoke-code bs26fb@export-subst bs26fa@export-env)))))) (set! bs28e1@bse43@boot-library-expand bse43@boot-library-expand) (set! bse45@rev-map-append (lambda (bs270e@f bs270f@ls bs2710@ac) (if (null? bs270f@ls) bs2710@ac (bse45@rev-map-append bs270e@f (cdr bs270f@ls) (cons (bs270e@f (car bs270f@ls)) bs2710@ac))))) (set! bs28e2@bse45@rev-map-append bse45@rev-map-append) (set! bse47@build-exports (lambda (bs2714@lex*+loc* bs2715@init*) (bsadd@bsa3d@build-sequence '#f (cons (bsade@bsa3f@build-void) (bse45@rev-map-append (lambda (bs2718@x) (list 'set! (cdr bs2718@x) (car bs2718@x))) bs2714@lex*+loc* bs2715@init*))))) (set! bs28e3@bse47@build-exports bse47@build-exports) (set! bse49@make-export-subst (lambda (bs271a@name* bs271b@id*) (map (lambda (bs271e@name bs271f@id) (let ((bs2722@label (bsb8e@id->label bs271f@id))) (begin (if (not bs2722@label) (bse5f@syntax-violation '#f '"cannot export unbound identifier" bs271f@id) (void)) (cons bs271e@name bs2722@label)))) bs271a@name* bs271b@id*))) (set! bs28e4@bse49@make-export-subst bse49@make-export-subst) (set! bse4b@make-export-env/macros (lambda (bs2724@lex* bs2725@loc* bs2726@r) (letrec* ((bs272b@lookup (lambda (bs2748@x) (let bs2750@f ((bs274a@x bs2748@x) (bs274b@lex* bs2724@lex*) (bs274c@loc* bs2725@loc*)) (if (pair? bs274b@lex*) (if (eq? bs274a@x (car bs274b@lex*)) (car bs274c@loc*) (bs2750@f bs274a@x (cdr bs274b@lex*) (cdr bs274c@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let bs2734@f ((bs272c@r bs2726@r) (bs272d@env '()) (bs272e@global* '()) (bs272f@macro* '())) (if (null? bs272c@r) (values bs272d@env bs272e@global* bs272f@macro*) (let ((bs2736@x (car bs272c@r))) (let ((bs2738@label (car bs2736@x)) (bs2739@b (cdr bs2736@x))) (let ((bs273c@t (bsb94@binding-type bs2739@b))) (if (memv bs273c@t '(lexical)) (let ((bs273e@v (bsb96@binding-value bs2739@b))) (let ((bs2740@loc (bs272b@lookup (bsd09@lexical-var bs273e@v))) (bs2741@type (if (bsd0b@lexical-mutable? bs273e@v) 'mutable 'global))) (bs2734@f (cdr bs272c@r) (cons (cons* bs2738@label bs2741@type bs2740@loc) bs272d@env) (cons (cons (bsd09@lexical-var bs273e@v) bs2740@loc) bs272e@global*) bs272f@macro*))) (if (memv bs273c@t '(local-macro)) (let ((bs2744@loc (gensym))) (bs2734@f (cdr bs272c@r) (cons (cons* bs2738@label 'global-macro bs2744@loc) bs272d@env) bs272e@global* (cons (cons bs2744@loc (bsb96@binding-value bs2739@b)) bs272f@macro*))) (if (memv bs273c@t '(local-macro!)) (let ((bs2746@loc (gensym))) (bs2734@f (cdr bs272c@r) (cons (cons* bs2738@label 'global-macro! bs2746@loc) bs272d@env) bs272e@global* (cons (cons bs2746@loc (bsb96@binding-value bs2739@b)) bs272f@macro*))) (if (memv bs273c@t '($rtd $module)) (bs2734@f (cdr bs272c@r) (cons bs2736@x bs272d@env) bs272e@global* bs272f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bsb94@binding-type bs2739@b) (bsb96@binding-value bs2739@b)))))))))))))) (set! bs28e5@bse4b@make-export-env/macros bse4b@make-export-env/macros) (set! bse4d@generate-temporaries (lambda (bs2752@ls) (let ((bs2754@t bs2752@ls)) (let ((bs2756@ls/false (bsd7f@syntax-dispatch bs2754@t 'each-any))) (if bs2756@ls/false (apply (lambda (bs2758@ls) (map (lambda (bs275a@x) (make-simple-struct 'stx '5 (list (let ((bs275c@x (bse65@syntax->datum bs275a@x))) (if (or (symbol? bs275c@x) (string? bs275c@x)) (gensym bs275c@x) (gensym 't))) bsafc@top-mark* '() '()))) bs2758@ls)) bs2756@ls/false) (let ((bs275e@t bs2754@t)) (let ((bs2760@ls/false (bsd7f@syntax-dispatch bs275e@t '_))) (if bs2760@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bs2760@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs275e@t))))))))) (set! bs28e6@bse4d@generate-temporaries bse4d@generate-temporaries) (set! bse4f@free-identifier=? (lambda (bs2762@x bs2763@y) (if (bsb78@id? bs2762@x) (if (bsb78@id? bs2763@y) (bsb7e@free-id=? bs2762@x bs2763@y) (assertion-violation 'free-identifier=? '"not an identifier" bs2763@y)) (assertion-violation 'free-identifier=? '"not an identifier" bs2762@x)))) (set! bs28e7@bse4f@free-identifier=? bse4f@free-identifier=?) (set! bse51@bound-identifier=? (lambda (bs2766@x bs2767@y) (if (bsb78@id? bs2766@x) (if (bsb78@id? bs2767@y) (bsb7c@bound-id=? bs2766@x bs2767@y) (assertion-violation 'bound-identifier=? '"not an identifier" bs2767@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bs2766@x)))) (set! bs28e8@bse51@bound-identifier=? bse51@bound-identifier=?) (set! bse53@make-source-condition (lambda (bs276a@x) (letrec* ((bs2774@bs276f (make-record-type-descriptor '&source-information &condition-rtd 'bs2772 '#f '#f '#((immutable file-name) (immutable line)))) (bs2776@bs2771 '#f) (bs2778@bs2770 (make-record-constructor-descriptor bs2774@bs276f &condition-rcd bs2776@bs2771)) (bs277b@bs276e (record-predicate bs2774@bs276f)) (bs277d@make-source-condition (record-constructor bs2778@bs2770)) (bs277f@bs276c (record-accessor bs2774@bs276f '0)) (bs2781@bs276d (record-accessor bs2774@bs276f '1)) (bs2783@source-condition? (condition-predicate bs2774@bs276f)) (bs2785@source-filename (condition-accessor bs2774@bs276f bs277f@bs276c)) (bs2787@source-character (condition-accessor bs2774@bs276f bs2781@bs276d))) (if (and (pair? bs276a@x) (pair? (cdr bs276a@x))) (bs277d@make-source-condition (car bs276a@x) (cadr bs276a@x)) (condition))))) (set! bs28e9@bse53@make-source-condition bse53@make-source-condition) (set! bse55@extract-position-condition (lambda (bs2788@x) (bse53@make-source-condition (bse57@expression-position bs2788@x)))) (set! bs28ea@bse55@extract-position-condition bse55@extract-position-condition) (set! bse57@expression-position (lambda (bs278a@x) (and (bsb44@stx? bs278a@x) (let ((bs278c@x (bsb46@stx-expr bs278a@x))) (and (bs6bc@bs58e@annotation? bs278c@x) (bs6bd@bs590@annotation-source bs278c@x)))))) (set! bs28eb@bse57@expression-position bse57@expression-position) (set! bse59@assertion-error (lambda (bs278e@expr bs278f@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list bs278e@expr)) (bse53@make-source-condition bs278f@pos))))) (set! bs28ec@bse59@assertion-error bse59@assertion-error) (set! bse5b@syntax-error (lambda (bs2792@x . bs2794@args) (begin (if (not (for-all string? bs2794@args)) (assertion-violation 'syntax-error '"invalid argument" bs2794@args) (void)) (raise (condition (make-message-condition (if (null? bs2794@args) '"invalid syntax" (apply string-append bs2794@args))) (make-syntax-violation (bse65@syntax->datum bs2792@x) '#f) (bse55@extract-position-condition bs2792@x)))))) (set! bs28ed@bse5b@syntax-error bse5b@syntax-error) (set! bse5d@syntax-violation* (lambda (bs2796@who bs2797@msg bs2798@form bs2799@condition-object) (begin (if (not (string? bs2797@msg)) (assertion-violation 'syntax-violation '"message is not a string" bs2797@msg) (void)) (let ((bs279e@who (if (or (string? bs2796@who) (symbol? bs2796@who)) bs2796@who (if (not bs2796@who) (let ((bs27a0@t bs2798@form)) (let ((bs27a2@ls/false (bsd7f@syntax-dispatch bs27a0@t 'any))) (if (and bs27a2@ls/false (apply (lambda (bs27a4@id) (bsb78@id? bs27a4@id)) bs27a2@ls/false)) (apply (lambda (bs27a6@id) (bse65@syntax->datum bs27a6@id)) bs27a2@ls/false) (let ((bs27a8@t bs27a0@t)) (let ((bs27aa@ls/false (bsd7f@syntax-dispatch bs27a8@t '(any . any)))) (if (and bs27aa@ls/false (apply (lambda (bs27ac@id bs27ad@rest) (bsb78@id? bs27ac@id)) bs27aa@ls/false)) (apply (lambda (bs27b0@id bs27b1@rest) (bse65@syntax->datum bs27b0@id)) bs27aa@ls/false) (let ((bs27b4@t bs27a8@t)) (let ((bs27b6@ls/false (bsd7f@syntax-dispatch bs27b4@t '_))) (if bs27b6@ls/false (apply (lambda () '#f) bs27b6@ls/false) (bse5f@syntax-violation '#f '"invalid syntax" bs27b4@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bs2796@who))))) (raise (condition (if bs279e@who (make-who-condition bs279e@who) (condition)) (make-message-condition bs2797@msg) bs2799@condition-object (bse55@extract-position-condition bs2798@form))))))) (set! bs28ee@bse5d@syntax-violation* bse5d@syntax-violation*) (set! bse5f@syntax-violation (lambda bs27c6 (let ((bs27c7 (length bs27c6))) (if (= bs27c7 '3) (apply (lambda (bs27b8@who bs27b9@msg bs27ba@form) (bse5f@syntax-violation bs27b8@who bs27b9@msg bs27ba@form '#f)) bs27c6) (if (= bs27c7 '4) (apply (lambda (bs27be@who bs27bf@msg bs27c0@form bs27c1@subform) (bse5d@syntax-violation* bs27be@who bs27bf@msg bs27c0@form (make-syntax-violation (bse65@syntax->datum bs27c0@form) (bse65@syntax->datum bs27c1@subform)))) bs27c6) (error 'apply '"invalid arg count")))))) (set! bs28ef@bse5f@syntax-violation bse5f@syntax-violation) (set! bse61@identifier? (lambda (bs27c8@x) (bsb78@id? bs27c8@x))) (set! bs28f0@bse61@identifier? bse61@identifier?) (set! bse63@datum->syntax (lambda (bs27ca@id bs27cb@datum) (if (bsb78@id? bs27ca@id) (bsb58@datum->stx bs27ca@id bs27cb@datum) (assertion-violation 'datum->syntax '"not an identifier" bs27ca@id)))) (set! bs28f1@bse63@datum->syntax bse63@datum->syntax) (set! bse65@syntax->datum (lambda (bs27ce@x) (bsb8c@stx->datum bs27ce@x))) (set! bs28f2@bse65@syntax->datum bse65@syntax->datum) (set! bse67@ungensym-all (lambda (bs27d0@code) (if (pair? bs27d0@code) (cons (bse67@ungensym-all (car bs27d0@code)) (bse67@ungensym-all (cdr bs27d0@code))) (if (symbol? bs27d0@code) (ungensym bs27d0@code) bs27d0@code)))) (set! bs28f3@bse67@ungensym-all bse67@ungensym-all) (set! bse69@compile-r6rs-top-level (lambda (bs27d2@x*) (call-with-values (lambda () (bsdf7@top-level-expander bs27d2@x*)) (lambda (bs27d8@bs27d5 bs27d9@bs27d7) (let ((bs27dc@invoke-code bs27d9@bs27d7) (bs27dd@lib* bs27d8@bs27d5)) (lambda () (begin (for-each bs994@bs7e2@invoke-library bs27dd@lib*) (let ((bs27e0@expanded (bs71e@bs6d6@expanded->core bs27dc@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bse67@ungensym-all bs27e0@expanded)) (void)) (eval-core bs27e0@expanded)))))))))) (set! bs28f4@bse69@compile-r6rs-top-level bse69@compile-r6rs-top-level) (set! bse6b@pre-compile-r6rs-top-level (lambda (bs27e2@x*) (call-with-values (lambda () (bsdf7@top-level-expander bs27e2@x*)) (lambda (bs27e8@bs27e5 bs27e9@bs27e7) (let ((bs27ec@invoke-code bs27e9@bs27e7) (bs27ed@lib* bs27e8@bs27e5)) (begin (for-each bs994@bs7e2@invoke-library bs27ed@lib*) (bs6c6@bs5a2@compile-core (bs71e@bs6d6@expanded->core bs27ec@invoke-code)))))))) (set! bs28f5@bse6b@pre-compile-r6rs-top-level bse6b@pre-compile-r6rs-top-level) (set! bse6d@interaction-environment (let ((bs27f0@the-env '#f)) (lambda () (or bs27f0@the-env (let ((bs27f2@lib (bs98d@bs7d4@find-library-by-name '(mosh interaction))) (bs27f3@rib (bsb2c@make-empty-rib))) (begin (let ((bs27f6@subst (bs96f@bs798@library-subst bs27f2@lib))) (begin (bsb18@set-rib-sym*! bs27f3@rib (map car bs27f6@subst)) (bsb1c@set-rib-mark**! bs27f3@rib (map (lambda (bs27f8@x) bsafc@top-mark*) bs27f6@subst)) (bsb20@set-rib-label*! bs27f3@rib (map cdr bs27f6@subst)))) (let ((bs27fa@env (make-simple-struct 'interaction-env '4 (list bs27f3@rib '() '())))) (begin (set! bs27f0@the-env bs27fa@env) bs27fa@env)))))))) (set! bs28f6@bse6d@interaction-environment bse6d@interaction-environment) (set! bse6f@top-level-context (bs6c8@bs5a6@make-parameter '#f)) (set! bs28f7@bse6f@top-level-context bse6f@top-level-context) (bs98a@bs7ce@current-library-expander bse41@library-expander))
(begin (begin (bs71b@bs6d0@current-primitive-locations (lambda (bs2e4d@x) (let ((bs2e4f@t (assq bs2e4d@x '((syntax-error . bs28ed@bse5b@syntax-error) (syntax-dispatch . bs288b@bsd7f@syntax-dispatch) (load . bs2a77@bs291e@load) (interaction-environment . bs28f6@bse6d@interaction-environment) (library-path . bs982@bs7be@library-path) (mosh-cache-dir . bs6c9@bs5a8@mosh-cache-dir) (make-parameter . bs6c8@bs5a6@make-parameter) (make-variable-transformer . bs2848@bsbaa@make-variable-transformer) (identifier? . bs28f0@bse61@identifier?) (generate-temporaries . bs28e6@bse4d@generate-temporaries) (free-identifier=? . bs28e7@bse4f@free-identifier=?) (syntax->datum . bs28f2@bse65@syntax->datum) (datum->syntax . bs28f1@bse63@datum->syntax) (bound-identifier=? . bs28e8@bse51@bound-identifier=?) (scheme-report-environment . bs28dd@bse3b@scheme-report-environment) (null-environment . bs28dc@bse39@null-environment) (command-line . bs2a74@bs2918@command-line) (eval . bs28df@bse3f@eval) (environment . bs28db@bse37@environment) (syntax-violation . bs28ef@bse5f@syntax-violation) (assertion-error . bs28ec@bse59@assertion-error))))) (if bs2e4f@t (cdr bs2e4f@t) '#f)))) (bs992@bs7de@install-library 'bs2e2a '(mosh interaction) '() '() '() '() '((regexp? . bs2dea) (alist->eq-hash-table . bs2de6) (format . bs2de3) (string-split . bs2dd3) (call-process . bs2dcc) (set-current-directory! . bs2dc8) (expand-path . bs2dc7) (current-directory . bs2dc6) (%spawn . bs2dc5) (%waitpid . bs2dc4) (simple-struct-name . bs2dc3) (simple-struct-set! . bs2dc2) (simple-struct-ref . bs2dc1) (make-simple-struct . bs2dc0) (simple-struct? . bs2dbf) (pointer-ref-c-int64 . bs2dbe) (pointer-ref-c-int32 . bs2dbd) (pointer-ref-c-int16 . bs2dbc) (pointer-ref-c-int8 . bs2dbb) (pointer-ref-c-uint64 . bs2dba) (pointer-ref-c-uint32 . bs2db9) (pointer-ref-c-uint16 . bs2db8) (pointer-ref-c-uint8 . bs2db7) (pointer-set-c-uint64! . bs2db6) (pointer-set-c-uint32! . bs2db5) (pointer-set-c-uint16! . bs2db4) (pointer-set-c-uint8! . bs2db3) (pointer-set-c-int64! . bs2db2) (pointer-set-c-int32! . bs2db1) (pointer-set-c-int16! . bs2db0) (pointer-set-c-int8! . bs2daf) (pointer-set-c-pointer! . bs2dae) (pointer-set-c-double! . bs2dad) (pointer-set-c-float! . bs2dac) (pointer-set-c-long-long! . bs2dab) (pointer-set-c-long! . bs2daa) (pointer-set-c-int! . bs2da9) (pointer-set-c-short! . bs2da8) (pointer-set-c-char! . bs2da7) (pointer-ref-c-pointer . bs2da6) (pointer-ref-c-double . bs2da5) (pointer-ref-c-float . bs2da4) (pointer-ref-c-unsigned-long-long . bs2da3) (pointer-ref-c-signed-long-long . bs2da2) (pointer-ref-c-unsigned-long . bs2da1) (pointer-ref-c-signed-long . bs2da0) (pointer-ref-c-unsigned-int . bs2d9f) (pointer-ref-c-signed-int . bs2d9e) (pointer-ref-c-unsigned-short . bs2d9d) (pointer-ref-c-signed-short . bs2d9c) (pointer-ref-c-unsigned-char . bs2d9b) (pointer-ref-c-signed-char . bs2d9a) (pointer->integer . bs2d99) (integer->pointer . bs2d98) (pointer? . bs2d97) (shared-errno . bs2d96) (%ffi-supported? . bs2d91) (%ffi-pointer->string . bs2d90) (%ffi-call . bs2d8f) (%ffi-lookup . bs2d8e) (%ffi-open . bs2d8d) (null-terminated-utf8->string . bs2d8c) (null-terminated-bytevector->string . bs2d8b) (%exec . bs2d8a) (%fork . bs2d89) (%pipe . bs2d88) (p . bs2d87) (whereis . bs2d6b) (register . bs2d6a) (vm-join! . bs2d69) (vm-set-value! . bs2d68) (vm? . bs2d67) (main-vm? . bs2d66) (vm-eval . bs2d65) (vm-self . bs2d64) (vm-start! . bs2d63) (make-vm . bs2d62) (mutex-try-lock! . bs2d61) (mutex-unlock! . bs2d60) (mutex-lock! . bs2d5f) (mutex? . bs2d5e) (make-mutex . bs2d5d) (condition-variable-notify-all! . bs2d5c) (condition-variable-notify! . bs2d5b) (condition-variable-wait! . bs2d5a) (make-condition-variable . bs2d59) (write/ss . bs2d58) (string-upcase . bs2d3f) (string-titlecase . bs2d3e) (string-normalize-nfkd . bs2d3d) (string-normalize-nfkc . bs2d3c) (string-normalize-nfd . bs2d3b) (string-normalize-nfc . bs2d3a) (string-foldcase . bs2d39) (string-downcase . bs2d38) (string-ci>? . bs2d37) (string-ci>=? . bs2d36) (string-ci=? . bs2d35) (string-ci<? . bs2d34) (string-ci<=? . bs2d33) (char-whitespace? . bs2d32) (char-upper-case? . bs2d31) (char-title-case? . bs2d30) (char-numeric? . bs2d2f) (char-lower-case? . bs2d2e) (char-general-category . bs2d2d) (char-upcase . bs2d2c) (char-titlecase . bs2d2b) (char-foldcase . bs2d2a) (char-downcase . bs2d29) (char-ci>? . bs2d28) (char-ci>=? . bs2d27) (char-ci=? . bs2d26) (char-ci<? . bs2d25) (char-ci<=? . bs2d24) (char-alphabetic? . bs2d23) (make-variable-transformer . bsba9) (identifier? . bse60) (generate-temporaries . bse4c) (free-identifier=? . bse4e) (syntax->datum . bse64) (datum->syntax . bse62) (bound-identifier=? . bse50) (record-type-descriptor? . bs2d22) (record-predicate . bs2d21) (record-mutator . bs2d20) (record-constructor . bs2d1f) (record-accessor . bs2d1e) (make-record-type-descriptor . bs2d1d) (make-record-constructor-descriptor . bs2d1c) (record? . bs2d1b) (record-type-uid . bs2d1a) (record-type-sealed? . bs2d19) (record-type-parent . bs2d18) (record-type-opaque? . bs2d17) (record-type-name . bs2d16) (record-type-generative? . bs2d15) (record-type-field-names . bs2d14) (record-rtd . bs2d13) (record-field-mutable? . bs2d12) (delete-file . bs2d11) (file-exists? . bs2d10) (vector-sort! . bs2d0f) (vector-sort . bs2d0e) (list-sort . bs2d0d) (symbol-hash . bs2d0c) (string-ci-hash . bs2d0b) (string-hash . bs2d0a) (equal-hash . bs2d09) (hashtable-equivalence-function . bs2d08) (make-hashtable . bs2d07) (hashtable-hash-function . bs2d06) (make-eqv-hashtable . bs2d05) (make-eq-hashtable . bs2d04) (hashtable? . bs2d03) (hashtable-update! . bs2d02) (hashtable-size . bs2d01) (hashtable-set! . bs2d00) (hashtable-ref . bs2cff) (hashtable-mutable? . bs2cfe) (hashtable-keys . bs2cfd) (hashtable-entries . bs2cfc) (hashtable-delete! . bs2cfb) (hashtable-copy . bs2cfa) (hashtable-contains? . bs2cf9) (hashtable-clear! . bs2cf8) (call-with-output-file . bs2cf7) (call-with-input-file . bs2cf6) (write-char . bs2cf5) (write . bs2cf4) (with-output-to-file . bs2cf3) (with-input-from-file . bs2cf2) (read-char . bs2cf1) (read . bs2cf0) (peek-char . bs2cef) (open-output-file . bs2cee) (open-input-file . bs2ced) (newline . bs2cec) (display . bs2ceb) (close-output-port . bs2cea) (close-input-port . bs2ce9) (eof-object? . bs2ce8) (eof-object . bs2ce7) (current-error-port . bs2ce6) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (utf-8-codec . bs2ce1) (utf-16-codec . bs2ce0) (transcoder-error-handling-mode . bs2cdf) (transcoder-eol-style . bs2cde) (transcoder-codec . bs2cdd) (transcoded-port . bs2cdc) (textual-port? . bs2cdb) (string->bytevector . bs2cda) (standard-output-port . bs2cd9) (standard-input-port . bs2cd8) (standard-error-port . bs2cd7) (set-port-position! . bs2cd6) (put-u8 . bs2cd5) (put-string . bs2cd4) (put-datum . bs2cd3) (put-char . bs2cd2) (put-bytevector . bs2cd1) (port? . bs2cd0) (port-transcoder . bs2ccf) (port-position . bs2cce) (port-has-set-port-position!? . bs2ccd) (port-has-port-position? . bs2ccc) (port-eof? . bs2ccb) (output-port-buffer-mode . bs2cca) (open-string-output-port . bs2cc9) (open-string-input-port . bs2cc8) (open-file-output-port . bs2cc7) (open-file-input/output-port . bs2cc6) (open-file-input-port . bs2cc5) (open-bytevector-output-port . bs2cc4) (open-bytevector-input-port . bs2cc3) (native-transcoder . bs2cc2) (native-eol-style . bs2cc1) (make-transcoder . bs2cc0) (latin-1-codec . bs2cbf) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (make-i/o-encoding-error . bs2cb4) (make-i/o-decoding-error . bs2cb3) (make-custom-textual-output-port . bs2cb2) (make-custom-textual-input/output-port . bs2cb1) (make-custom-textual-input-port . bs2cb0) (make-custom-binary-output-port . bs2caf) (make-custom-binary-input/output-port . bs2cae) (make-custom-binary-input-port . bs2cad) (make-bytevector . bs2cac) (lookahead-u8 . bs2cab) (lookahead-char . bs2caa) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (i/o-encoding-error? . bs2c9c) (i/o-encoding-error-char . bs2c9b) (i/o-decoding-error? . bs2c9a) (get-u8 . bs2c99) (get-string-n! . bs2c98) (get-string-n . bs2c97) (get-string-all . bs2c96) (get-line . bs2c95) (get-datum . bs2c94) (get-char . bs2c93) (get-bytevector-some . bs2c92) (get-bytevector-n! . bs2c91) (get-bytevector-n . bs2c90) (get-bytevector-all . bs2c8f) (flush-output-port . bs2c8e) (close-port . bs2c8d) (exit . bs2c85) (command-line . bs2917) (string-fill! . bs2c84) (string-set! . bs2c83) (set-cdr! . bs2c82) (set-car! . bs2c81) (remove . bs2c80) (remv . bs2c7f) (remp . bs2c7e) (remq . bs2c7d) (partition . bs2c7c) (memv . bs2c7b) (memq . bs2c7a) (memp . bs2c79) (member . bs2c78) (exists . bs2c77) (for-all . bs2c76) (fold-right . bs2c75) (fold-left . bs2c74) (find . bs2c73) (filter . bs2c72) (cons* . bs2c71) (assv . bs2c70) (assq . bs2c6f) (assp . bs2c6e) (assoc . bs2c6d) (call-with-string-output-port . bs2c6c) (call-with-port . bs2c6b) (call-with-bytevector-output-port . bs2c6a) (bytevector->string . bs2c69) (buffer-mode? . bs2c68) (binary-port? . bs2c67) (with-exception-handler . bs2c66) (raise-continuable . bs2c65) (raise . bs2c64) (eval . bse3e) (environment . bse36) (make-enumeration . bs2c63) (enum-set=? . bs2c62) (enum-set-universe . bs2c61) (enum-set-union . bs2c60) (enum-set-subset? . bs2c5f) (enum-set-projection . bs2c5e) (enum-set-member? . bs2c5d) (enum-set-intersection . bs2c5c) (enum-set-indexer . bs2c5b) (enum-set-difference . bs2c5a) (enum-set-constructor . bs2c59) (enum-set-complement . bs2c58) (enum-set->list . bs2c57) (who-condition? . bs2c56) (warning? . bs2c55) (violation? . bs2c54) (undefined-violation? . bs2c53) (syntax-violation? . bs2c52) (syntax-violation-subform . bs2c51) (syntax-violation-form . bs2c50) (syntax-violation . bse5e) (simple-conditions . bs2c4f) (serious-condition? . bs2c4e) (non-continuable-violation? . bs2c4d) (message-condition? . bs2c4c) (make-who-condition . bs2c4b) (make-warning . bs2c4a) (make-violation . bs2c49) (make-undefined-violation . bs2c48) (make-syntax-violation . bs2c47) (make-serious-condition . bs2c46) (make-non-continuable-violation . bs2c45) (make-message-condition . bs2c44) (make-lexical-violation . bs2c43) (make-irritants-condition . bs2c42) (make-implementation-restriction-violation . bs2c41) (make-error . bs2c40) (make-assertion-violation . bs2c3f) (lexical-violation? . bs2c3e) (irritants-condition? . bs2c3d) (implementation-restriction-violation? . bs2c3c) (error? . bs2c3b) (condition-who . bs2c3a) (condition-predicate . bs2c39) (condition-message . bs2c38) (condition-irritants . bs2c37) (condition-accessor . bs2c36) (condition . bs2c35) (assertion-violation? . bs2c34) (condition? . bs2c33) (utf32->string . bs2c32) (utf16->string . bs2c31) (utf8->string . bs2c30) (uint-list->bytevector . bs2c2f) (u8-list->bytevector . bs2c2e) (string->utf8 . bs2c2d) (string->utf32 . bs2c2c) (string->utf16 . bs2c2b) (sint-list->bytevector . bs2c2a) (native-endianness . bs2c29) (bytevector? . bs2c28) (bytevector=? . bs2c27) (bytevector-uint-set! . bs2c26) (bytevector-uint-ref . bs2c25) (bytevector-u8-set! . bs2c24) (bytevector-u8-ref . bs2c23) (bytevector-u64-set! . bs2c22) (bytevector-u64-ref . bs2c21) (bytevector-u64-native-set! . bs2c20) (bytevector-u64-native-ref . bs2c1f) (bytevector-u32-set! . bs2c1e) (bytevector-u32-ref . bs2c1d) (bytevector-u32-native-set! . bs2c1c) (bytevector-u32-native-ref . bs2c1b) (bytevector-u16-set! . bs2c1a) (bytevector-u16-ref . bs2c19) (bytevector-u16-native-set! . bs2c18) (bytevector-u16-native-ref . bs2c17) (bytevector-sint-set! . bs2c16) (bytevector-sint-ref . bs2c15) (bytevector-s8-set! . bs2c14) (bytevector-s8-ref . bs2c13) (bytevector-s64-set! . bs2c12) (bytevector-s64-ref . bs2c11) (bytevector-s64-native-set! . bs2c10) (bytevector-s64-native-ref . bs2c0f) (bytevector-s32-set! . bs2c0e) (bytevector-s32-ref . bs2c0d) (bytevector-s32-native-set! . bs2c0c) (bytevector-s32-native-ref . bs2c0b) (bytevector-s16-set! . bs2c0a) (bytevector-s16-ref . bs2c09) (bytevector-s16-native-set! . bs2c08) (bytevector-s16-native-ref . bs2c07) (bytevector-length . bs2c06) (bytevector-ieee-single-ref . bs2c05) (bytevector-ieee-single-set! . bs2c04) (bytevector-ieee-single-native-set! . bs2c03) (bytevector-ieee-single-native-ref . bs2c02) (bytevector-ieee-double-set! . bs2c01) (bytevector-ieee-double-ref . bs2c00) (bytevector-ieee-double-native-set! . bs2bff) (bytevector-ieee-double-native-ref . bs2bfe) (bytevector-fill! . bs2bfd) (bytevector-copy! . bs2bfc) (bytevector-copy . bs2bfb) (bytevector->uint-list . bs2bfa) (bytevector->u8-list . bs2bf9) (bytevector->sint-list . bs2bf8) (no-nans-violation? . bs2bf7) (no-infinities-violation? . bs2bf6) (make-no-nans-violation . bs2bf5) (make-no-infinities-violation . bs2bf4) (real->flonum . bs2bf3) (flzero? . bs2bf2) (fltruncate . bs2bf1) (fltan . bs2bf0) (flsqrt . bs2bef) (flsin . bs2bee) (flround . bs2bed) (flpositive? . bs2bec) (flonum? . bs2beb) (flodd? . bs2bea) (flnumerator . bs2be9) (flnegative? . bs2be8) (flnan? . bs2be7) (flmod0 . bs2be6) (flmod . bs2be5) (flmin . bs2be4) (flmax . bs2be3) (fllog . bs2be2) (flinteger? . bs2be1) (flinfinite? . bs2be0) (flfloor . bs2bdf) (flfinite? . bs2bde) (flexpt . bs2bdd) (flexp . bs2bdc) (fleven? . bs2bdb) (fldiv0-and-mod0 . bs2bda) (fldiv0 . bs2bd9) (fldiv-and-mod . bs2bd8) (fldiv . bs2bd7) (fldenominator . bs2bd6) (flcos . bs2bd5) (flceiling . bs2bd4) (flatan . bs2bd3) (flasin . bs2bd2) (flacos . bs2bd1) (flabs . bs2bd0) (fl>? . bs2bcf) (fl>=? . bs2bce) (fl=? . bs2bcd) (fl<? . bs2bcc) (fl<=? . bs2bcb) (fl/ . bs2bca) (fl- . bs2bc9) (fl+ . bs2bc8) (fl* . bs2bc7) (fixnum->flonum . bs2bc6) (fxzero? . bs2bc5) (fxxor . bs2bc4) (fxrotate-bit-field . bs2bc3) (fxreverse-bit-field . bs2bc2) (fxpositive? . bs2bc1) (fxodd? . bs2bc0) (fxnot . bs2bbf) (fxnegative? . bs2bbe) (fxmod0 . bs2bbd) (fxmod . bs2bbc) (fxmin . bs2bbb) (fxmax . bs2bba) (fxlength . bs2bb9) (fxior . bs2bb8) (fxif . bs2bb7) (fxfirst-bit-set . bs2bb6) (fxeven? . bs2bb5) (fxdiv0-and-mod0 . bs2bb4) (fxdiv0 . bs2bb3) (fxdiv-and-mod . bs2bb2) (fxdiv . bs2bb1) (fxcopy-bit-field . bs2bb0) (fxcopy-bit . bs2baf) (fxbit-set? . bs2bae) (fxbit-field . bs2bad) (fxbit-count . bs2bac) (fxarithmetic-shift-right . bs2bab) (fxarithmetic-shift-left . bs2baa) (fxarithmetic-shift . bs2ba9) (fxand . bs2ba8) (fx>? . bs2ba7) (fx>=? . bs2ba6) (fx=? . bs2ba5) (fx<? . bs2ba4) (fx<=? . bs2ba3) (fx-/carry . bs2ba2) (fx- . bs2ba1) (fx+/carry . bs2ba0) (fx+ . bs2b9f) (fx*/carry . bs2b9e) (fx* . bs2b9d) (greatest-fixnum . bs2b9c) (least-fixnum . bs2b9b) (fixnum-width . bs2b9a) (fixnum? . bs2b99) (bitwise-rotate-bit-field . bs2b98) (bitwise-reverse-bit-field . bs2b97) (bitwise-length . bs2b96) (bitwise-if . bs2b95) (bitwise-first-bit-set . bs2b94) (bitwise-copy-bit-field . bs2b93) (bitwise-copy-bit . bs2b92) (bitwise-bit-set? . bs2b91) (bitwise-bit-field . bs2b90) (bitwise-bit-count . bs2b8f) (bitwise-xor . bs2b8e) (bitwise-ior . bs2b8d) (bitwise-and . bs2b8c) (bitwise-not . bs2b8b) (bitwise-arithmetic-shift-right . bs2b8a) (bitwise-arithmetic-shift-left . bs2b89) (bitwise-arithmetic-shift . bs2b88) (zero? . bs2b87) (vector? . bs2b86) (vector-set! . bs2b85) (vector-ref . bs2b84) (vector-map . bs2b83) (vector-length . bs2b82) (vector-for-each . bs2b81) (vector-fill! . bs2b80) (vector->list . bs2b7f) (vector . bs2b7e) (values . bs2b7d) (truncate . bs2b7c) (tan . bs2b7b) (symbol? . bs2b7a) (symbol=? . bs2b79) (symbol->string . bs2b78) (substring . bs2b77) (string? . bs2b76) (string>? . bs2b75) (string>=? . bs2b74) (string=? . bs2b73) (string<? . bs2b72) (string<=? . bs2b71) (string-ref . bs2b70) (string-length . bs2b6f) (string-for-each . bs2b6e) (string-copy . bs2b6d) (string-append . bs2b6c) (string->symbol . bs2b6b) (string->number . bs2b6a) (string->list . bs2b69) (string . bs2b68) (sqrt . bs2b67) (sin . bs2b66) (round . bs2b65) (reverse . bs2b64) (real? . bs2b63) (real-valued? . bs2b62) (real-part . bs2b61) (rationalize . bs2b60) (rational? . bs2b5f) (rational-valued? . bs2b5e) (procedure? . bs2b5d) (positive? . bs2b5c) (pair? . bs2b5b) (odd? . bs2b5a) (numerator . bs2b59) (number? . bs2b58) (number->string . bs2b57) (null? . bs2b56) (not . bs2b55) (negative? . bs2b54) (nan? . bs2b53) (min . bs2b52) (max . bs2b51) (map . bs2b50) (make-vector . bs2b4f) (make-string . bs2b4e) (make-rectangular . bs2b4d) (make-polar . bs2b4c) (magnitude . bs2b4b) (log . bs2b4a) (list? . bs2b49) (list-tail . bs2b48) (list-ref . bs2b47) (list->vector . bs2b46) (list->string . bs2b45) (list . bs2b44) (length . bs2b43) (lcm . bs2b42) (integer? . bs2b41) (integer-valued? . bs2b40) (integer->char . bs2b3f) (infinite? . bs2b3e) (inexact? . bs2b3d) (inexact . bs2b3c) (imag-part . bs2b3b) (gcd . bs2b3a) (for-each . bs2b39) (floor . bs2b38) (finite? . bs2b37) (expt . bs2b36) (exp . bs2b35) (exact? . bs2b34) (exact-integer-sqrt . bs2b33) (exact . bs2b32) (even? . bs2b31) (error . bs2b30) (eqv? . bs2b2f) (equal? . bs2b2e) (eq? . bs2b2d) (dynamic-wind . bs2b2c) (div0-and-mod0 . bs2b2b) (mod0 . bs2b2a) (div0 . bs2b29) (div-and-mod . bs2b28) (mod . bs2b27) (div . bs2b26) (denominator . bs2b25) (cos . bs2b24) (cons . bs2b23) (complex? . bs2b22) (char? . bs2b21) (char>? . bs2b20) (char>=? . bs2b1f) (char=? . bs2b1e) (char<? . bs2b1d) (char<=? . bs2b1c) (char->integer . bs2b1b) (ceiling . bs2b1a) (call-with-values . bs2b19) (call/cc . bs2b18) (call-with-current-continuation . bs2b17) (cddddr . bs2b16) (cdddar . bs2b15) (cddadr . bs2b14) (cddaar . bs2b13) (cdaddr . bs2b12) (cdadar . bs2b11) (cdaadr . bs2b10) (cdaaar . bs2b0f) (cadddr . bs2b0e) (caddar . bs2b0d) (cadadr . bs2b0c) (cadaar . bs2b0b) (caaddr . bs2b0a) (caadar . bs2b09) (caaadr . bs2b08) (caaaar . bs2b07) (cdddr . bs2b06) (cddar . bs2b05) (cdadr . bs2b04) (cdaar . bs2b03) (caddr . bs2b02) (cadar . bs2b01) (caadr . bs2b00) (caaar . bs2aff) (cddr . bs2afe) (cdar . bs2afd) (cadr . bs2afc) (caar . bs2afb) (cdr . bs2afa) (car . bs2af9) (boolean? . bs2af8) (boolean=? . bs2af7) (atan . bs2af6) (assertion-violation . bs2af5) (asin . bs2af4) (apply . bs2af3) (append . bs2af2) (angle . bs2af1) (acos . bs2af0) (abs . bs2aef) (/ . bs2aee) (* . bs2aed) (- . bs2aec) (+ . bs2aeb) (>= . bs2aea) (> . bs2ae9) (= . bs2ae8) (<= . bs2ae7) (< . bs2ae6) (library . bs2ae5) (&no-nans . bs2ae4) (&no-infinities . bs2ae3) (&i/o-encoding . bs2ae2) (&i/o-decoding . bs2ae1) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7) (&undefined . bs2ad6) (&syntax . bs2ad5) (&lexical . bs2ad4) (&implementation-restriction . bs2ad3) (&non-continuable . bs2ad2) (&who . bs2ad1) (&irritants . bs2ad0) (&assertion . bs2acf) (&violation . bs2ace) (&error . bs2acd) (&serious . bs2acc) (&warning . bs2acb) (&message . bs2aca) (&condition . bs2ac9) (define-condition-type . bs2ac8) (define-enumeration . bs2ac7) (define-record-type . bs2ac6) (parent-rtd . bs2ac5) (nongenerative . bs2ac4) (opaque . bs2ac3) (sealed . bs2ac2) (protocol . bs2ac1) (parent . bs2ac0) (immutable . bs2abf) (mutable . bs2abe) (fields . bs2abd) (error-handling-mode . bs2abc) (file-options . bs2abb) (buffer-mode . bs2aba) (eol-style . bs2ab9) (guard . bs2ab8) (unsyntax-splicing . bs2ab5) (unsyntax . bs2ab4) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (_ . bs2ab1) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (assert . bs2aad) (endianness . bs2aac) (time . bs2aaa) (do . bs2aa9) (cond . bs2aa8) (let* . bs2aa7) (let*-values . bs2aa6) (let-values . bs2aa5) (identifier-syntax . bs2aa4) (with-syntax . bs2aa3) (quasisyntax . bs2aa2) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (include . bs2a9f) (record-constructor-descriptor . bs2a9d) (record-type-descriptor . bs2a9c) (case . bs2a9b) (unless . bs2a99) (when . bs2a98) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec* . bs2a93) (letrec . bs2a92) (case-lambda . bs2a90) (lambda . bs2a8f) (syntax . bs2a8e) (syntax-case . bs2a8d) (quote . bs2a8c) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (import . bs2a87) (begin . bs2a86) (define-syntax . bs2a84) (define . bs2a83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e2b '(psyntax null-environment-5) '() '() '() '() '((make-promise . bs2c86) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (_ . bs2ab1) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (delay . bs2aab) (do . bs2aa9) (cond . bs2aa8) (let* . bs2aa7) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (case . bs2a9b) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec . bs2a92) (lambda . bs2a8f) (quote . bs2a8c) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (begin . bs2a86) (define-syntax . bs2a84) (define . bs2a83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e2c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bs2d37) (string-ci>=? . bs2d36) (string-ci=? . bs2d35) (string-ci<? . bs2d34) (string-ci<=? . bs2d33) (char-whitespace? . bs2d32) (char-upper-case? . bs2d31) (char-numeric? . bs2d2f) (char-lower-case? . bs2d2e) (char-upcase . bs2d2c) (char-downcase . bs2d29) (char-ci>? . bs2d28) (char-ci>=? . bs2d27) (char-ci=? . bs2d26) (char-ci<? . bs2d25) (char-ci<=? . bs2d24) (char-alphabetic? . bs2d23) (call-with-output-file . bs2cf7) (call-with-input-file . bs2cf6) (write-char . bs2cf5) (write . bs2cf4) (with-output-to-file . bs2cf3) (with-input-from-file . bs2cf2) (read-char . bs2cf1) (read . bs2cf0) (peek-char . bs2cef) (open-output-file . bs2cee) (open-input-file . bs2ced) (newline . bs2cec) (display . bs2ceb) (close-output-port . bs2cea) (close-input-port . bs2ce9) (eof-object . bs2ce7) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (scheme-report-environment . bse3a) (quotient . bs2c8c) (null-environment . bse38) (remainder . bs2c8b) (modulo . bs2c8a) (inexact->exact . bs2c89) (force . bs2c88) (exact->inexact . bs2c87) (make-promise . bs2c86) (string-fill! . bs2c84) (string-set! . bs2c83) (set-cdr! . bs2c82) (set-car! . bs2c81) (memv . bs2c7b) (memq . bs2c7a) (member . bs2c78) (assv . bs2c70) (assq . bs2c6f) (assoc . bs2c6d) (eval . bse3e) (zero? . bs2b87) (vector? . bs2b86) (vector-set! . bs2b85) (vector-ref . bs2b84) (vector-length . bs2b82) (vector-fill! . bs2b80) (vector->list . bs2b7f) (vector . bs2b7e) (values . bs2b7d) (truncate . bs2b7c) (tan . bs2b7b) (symbol? . bs2b7a) (symbol->string . bs2b78) (substring . bs2b77) (string? . bs2b76) (string>? . bs2b75) (string>=? . bs2b74) (string=? . bs2b73) (string<? . bs2b72) (string<=? . bs2b71) (string-ref . bs2b70) (string-length . bs2b6f) (string-copy . bs2b6d) (string-append . bs2b6c) (string->symbol . bs2b6b) (string->number . bs2b6a) (string->list . bs2b69) (string . bs2b68) (sqrt . bs2b67) (sin . bs2b66) (round . bs2b65) (reverse . bs2b64) (real? . bs2b63) (real-part . bs2b61) (rationalize . bs2b60) (rational? . bs2b5f) (procedure? . bs2b5d) (positive? . bs2b5c) (pair? . bs2b5b) (odd? . bs2b5a) (numerator . bs2b59) (number? . bs2b58) (number->string . bs2b57) (not . bs2b55) (negative? . bs2b54) (min . bs2b52) (max . bs2b51) (map . bs2b50) (make-vector . bs2b4f) (make-string . bs2b4e) (make-rectangular . bs2b4d) (make-polar . bs2b4c) (magnitude . bs2b4b) (log . bs2b4a) (list? . bs2b49) (list-tail . bs2b48) (list-ref . bs2b47) (list->vector . bs2b46) (list->string . bs2b45) (list . bs2b44) (length . bs2b43) (lcm . bs2b42) (integer? . bs2b41) (integer->char . bs2b3f) (inexact? . bs2b3d) (imag-part . bs2b3b) (gcd . bs2b3a) (for-each . bs2b39) (floor . bs2b38) (expt . bs2b36) (exp . bs2b35) (exact? . bs2b34) (even? . bs2b31) (eqv? . bs2b2f) (equal? . bs2b2e) (eq? . bs2b2d) (dynamic-wind . bs2b2c) (denominator . bs2b25) (cos . bs2b24) (cons . bs2b23) (complex? . bs2b22) (char? . bs2b21) (char>? . bs2b20) (char>=? . bs2b1f) (char=? . bs2b1e) (char<? . bs2b1d) (char<=? . bs2b1c) (char->integer . bs2b1b) (ceiling . bs2b1a) (call-with-values . bs2b19) (call-with-current-continuation . bs2b17) (cddddr . bs2b16) (cdddar . bs2b15) (cddadr . bs2b14) (cddaar . bs2b13) (cdaddr . bs2b12) (cdadar . bs2b11) (cdaadr . bs2b10) (cdaaar . bs2b0f) (cadddr . bs2b0e) (caddar . bs2b0d) (cadadr . bs2b0c) (cadaar . bs2b0b) (caaddr . bs2b0a) (caadar . bs2b09) (caaadr . bs2b08) (caaaar . bs2b07) (cdddr . bs2b06) (cddar . bs2b05) (cdadr . bs2b04) (cdaar . bs2b03) (caddr . bs2b02) (cadar . bs2b01) (caadr . bs2b00) (caaar . bs2aff) (cddr . bs2afe) (cdar . bs2afd) (cadr . bs2afc) (caar . bs2afb) (cdr . bs2afa) (car . bs2af9) (boolean? . bs2af8) (atan . bs2af6) (asin . bs2af4) (apply . bs2af3) (append . bs2af2) (angle . bs2af1) (acos . bs2af0) (abs . bs2aef) (/ . bs2aee) (* . bs2aed) (- . bs2aec) (+ . bs2aeb) (>= . bs2aea) (> . bs2ae9) (= . bs2ae8) (<= . bs2ae7) (< . bs2ae6) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (delay . bs2aab) (do . bs2aa9) (cond . bs2aa8) (let* . bs2aa7) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (case . bs2a9b) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec . bs2a92) (lambda . bs2a8f) (quote . bs2a8c) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (begin . bs2a86) (define-syntax . bs2a84) (define . bs2a83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e2d '(psyntax modules) '() '() '() '() '((module . bs2a85)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e2e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e2f '(rnrs) '(6) '() '() '() '((regexp? . bs2dea) (string-upcase . bs2d3f) (string-titlecase . bs2d3e) (string-normalize-nfkd . bs2d3d) (string-normalize-nfkc . bs2d3c) (string-normalize-nfd . bs2d3b) (string-normalize-nfc . bs2d3a) (string-foldcase . bs2d39) (string-downcase . bs2d38) (string-ci>? . bs2d37) (string-ci>=? . bs2d36) (string-ci=? . bs2d35) (string-ci<? . bs2d34) (string-ci<=? . bs2d33) (char-whitespace? . bs2d32) (char-upper-case? . bs2d31) (char-title-case? . bs2d30) (char-numeric? . bs2d2f) (char-lower-case? . bs2d2e) (char-general-category . bs2d2d) (char-upcase . bs2d2c) (char-titlecase . bs2d2b) (char-foldcase . bs2d2a) (char-downcase . bs2d29) (char-ci>? . bs2d28) (char-ci>=? . bs2d27) (char-ci=? . bs2d26) (char-ci<? . bs2d25) (char-ci<=? . bs2d24) (char-alphabetic? . bs2d23) (make-variable-transformer . bsba9) (identifier? . bse60) (generate-temporaries . bse4c) (free-identifier=? . bse4e) (syntax->datum . bse64) (datum->syntax . bse62) (bound-identifier=? . bse50) (record-type-descriptor? . bs2d22) (record-predicate . bs2d21) (record-mutator . bs2d20) (record-constructor . bs2d1f) (record-accessor . bs2d1e) (make-record-type-descriptor . bs2d1d) (make-record-constructor-descriptor . bs2d1c) (record? . bs2d1b) (record-type-uid . bs2d1a) (record-type-sealed? . bs2d19) (record-type-parent . bs2d18) (record-type-opaque? . bs2d17) (record-type-name . bs2d16) (record-type-generative? . bs2d15) (record-type-field-names . bs2d14) (record-rtd . bs2d13) (record-field-mutable? . bs2d12) (delete-file . bs2d11) (file-exists? . bs2d10) (vector-sort! . bs2d0f) (vector-sort . bs2d0e) (list-sort . bs2d0d) (symbol-hash . bs2d0c) (string-ci-hash . bs2d0b) (string-hash . bs2d0a) (equal-hash . bs2d09) (hashtable-equivalence-function . bs2d08) (make-hashtable . bs2d07) (hashtable-hash-function . bs2d06) (make-eqv-hashtable . bs2d05) (make-eq-hashtable . bs2d04) (hashtable? . bs2d03) (hashtable-update! . bs2d02) (hashtable-size . bs2d01) (hashtable-set! . bs2d00) (hashtable-ref . bs2cff) (hashtable-mutable? . bs2cfe) (hashtable-keys . bs2cfd) (hashtable-entries . bs2cfc) (hashtable-delete! . bs2cfb) (hashtable-copy . bs2cfa) (hashtable-contains? . bs2cf9) (hashtable-clear! . bs2cf8) (call-with-output-file . bs2cf7) (call-with-input-file . bs2cf6) (write-char . bs2cf5) (write . bs2cf4) (with-output-to-file . bs2cf3) (with-input-from-file . bs2cf2) (read-char . bs2cf1) (read . bs2cf0) (peek-char . bs2cef) (open-output-file . bs2cee) (open-input-file . bs2ced) (newline . bs2cec) (display . bs2ceb) (close-output-port . bs2cea) (close-input-port . bs2ce9) (eof-object? . bs2ce8) (eof-object . bs2ce7) (current-error-port . bs2ce6) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (utf-8-codec . bs2ce1) (utf-16-codec . bs2ce0) (transcoder-error-handling-mode . bs2cdf) (transcoder-eol-style . bs2cde) (transcoder-codec . bs2cdd) (transcoded-port . bs2cdc) (textual-port? . bs2cdb) (string->bytevector . bs2cda) (standard-output-port . bs2cd9) (standard-input-port . bs2cd8) (standard-error-port . bs2cd7) (set-port-position! . bs2cd6) (put-u8 . bs2cd5) (put-string . bs2cd4) (put-datum . bs2cd3) (put-char . bs2cd2) (put-bytevector . bs2cd1) (port? . bs2cd0) (port-transcoder . bs2ccf) (port-position . bs2cce) (port-has-set-port-position!? . bs2ccd) (port-has-port-position? . bs2ccc) (port-eof? . bs2ccb) (output-port-buffer-mode . bs2cca) (open-string-output-port . bs2cc9) (open-string-input-port . bs2cc8) (open-file-output-port . bs2cc7) (open-file-input/output-port . bs2cc6) (open-file-input-port . bs2cc5) (open-bytevector-output-port . bs2cc4) (open-bytevector-input-port . bs2cc3) (native-transcoder . bs2cc2) (native-eol-style . bs2cc1) (make-transcoder . bs2cc0) (latin-1-codec . bs2cbf) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (make-i/o-encoding-error . bs2cb4) (make-i/o-decoding-error . bs2cb3) (make-custom-textual-output-port . bs2cb2) (make-custom-textual-input/output-port . bs2cb1) (make-custom-textual-input-port . bs2cb0) (make-custom-binary-output-port . bs2caf) (make-custom-binary-input/output-port . bs2cae) (make-custom-binary-input-port . bs2cad) (make-bytevector . bs2cac) (lookahead-u8 . bs2cab) (lookahead-char . bs2caa) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (i/o-encoding-error? . bs2c9c) (i/o-encoding-error-char . bs2c9b) (i/o-decoding-error? . bs2c9a) (get-u8 . bs2c99) (get-string-n! . bs2c98) (get-string-n . bs2c97) (get-string-all . bs2c96) (get-line . bs2c95) (get-datum . bs2c94) (get-char . bs2c93) (get-bytevector-some . bs2c92) (get-bytevector-n! . bs2c91) (get-bytevector-n . bs2c90) (get-bytevector-all . bs2c8f) (flush-output-port . bs2c8e) (close-port . bs2c8d) (exit . bs2c85) (command-line . bs2917) (remove . bs2c80) (remv . bs2c7f) (remp . bs2c7e) (remq . bs2c7d) (partition . bs2c7c) (memv . bs2c7b) (memq . bs2c7a) (memp . bs2c79) (member . bs2c78) (exists . bs2c77) (for-all . bs2c76) (fold-right . bs2c75) (fold-left . bs2c74) (find . bs2c73) (filter . bs2c72) (cons* . bs2c71) (assv . bs2c70) (assq . bs2c6f) (assp . bs2c6e) (assoc . bs2c6d) (call-with-string-output-port . bs2c6c) (call-with-port . bs2c6b) (call-with-bytevector-output-port . bs2c6a) (bytevector->string . bs2c69) (buffer-mode? . bs2c68) (binary-port? . bs2c67) (with-exception-handler . bs2c66) (raise-continuable . bs2c65) (raise . bs2c64) (make-enumeration . bs2c63) (enum-set=? . bs2c62) (enum-set-universe . bs2c61) (enum-set-union . bs2c60) (enum-set-subset? . bs2c5f) (enum-set-projection . bs2c5e) (enum-set-member? . bs2c5d) (enum-set-intersection . bs2c5c) (enum-set-indexer . bs2c5b) (enum-set-difference . bs2c5a) (enum-set-constructor . bs2c59) (enum-set-complement . bs2c58) (enum-set->list . bs2c57) (who-condition? . bs2c56) (warning? . bs2c55) (violation? . bs2c54) (undefined-violation? . bs2c53) (syntax-violation? . bs2c52) (syntax-violation-subform . bs2c51) (syntax-violation-form . bs2c50) (syntax-violation . bse5e) (simple-conditions . bs2c4f) (serious-condition? . bs2c4e) (non-continuable-violation? . bs2c4d) (message-condition? . bs2c4c) (make-who-condition . bs2c4b) (make-warning . bs2c4a) (make-violation . bs2c49) (make-undefined-violation . bs2c48) (make-syntax-violation . bs2c47) (make-serious-condition . bs2c46) (make-non-continuable-violation . bs2c45) (make-message-condition . bs2c44) (make-lexical-violation . bs2c43) (make-irritants-condition . bs2c42) (make-implementation-restriction-violation . bs2c41) (make-error . bs2c40) (make-assertion-violation . bs2c3f) (lexical-violation? . bs2c3e) (irritants-condition? . bs2c3d) (implementation-restriction-violation? . bs2c3c) (error? . bs2c3b) (condition-who . bs2c3a) (condition-predicate . bs2c39) (condition-message . bs2c38) (condition-irritants . bs2c37) (condition-accessor . bs2c36) (condition . bs2c35) (assertion-violation? . bs2c34) (condition? . bs2c33) (utf32->string . bs2c32) (utf16->string . bs2c31) (utf8->string . bs2c30) (uint-list->bytevector . bs2c2f) (u8-list->bytevector . bs2c2e) (string->utf8 . bs2c2d) (string->utf32 . bs2c2c) (string->utf16 . bs2c2b) (sint-list->bytevector . bs2c2a) (native-endianness . bs2c29) (bytevector? . bs2c28) (bytevector=? . bs2c27) (bytevector-uint-set! . bs2c26) (bytevector-uint-ref . bs2c25) (bytevector-u8-set! . bs2c24) (bytevector-u8-ref . bs2c23) (bytevector-u64-set! . bs2c22) (bytevector-u64-ref . bs2c21) (bytevector-u64-native-set! . bs2c20) (bytevector-u64-native-ref . bs2c1f) (bytevector-u32-set! . bs2c1e) (bytevector-u32-ref . bs2c1d) (bytevector-u32-native-set! . bs2c1c) (bytevector-u32-native-ref . bs2c1b) (bytevector-u16-set! . bs2c1a) (bytevector-u16-ref . bs2c19) (bytevector-u16-native-set! . bs2c18) (bytevector-u16-native-ref . bs2c17) (bytevector-sint-set! . bs2c16) (bytevector-sint-ref . bs2c15) (bytevector-s8-set! . bs2c14) (bytevector-s8-ref . bs2c13) (bytevector-s64-set! . bs2c12) (bytevector-s64-ref . bs2c11) (bytevector-s64-native-set! . bs2c10) (bytevector-s64-native-ref . bs2c0f) (bytevector-s32-set! . bs2c0e) (bytevector-s32-ref . bs2c0d) (bytevector-s32-native-set! . bs2c0c) (bytevector-s32-native-ref . bs2c0b) (bytevector-s16-set! . bs2c0a) (bytevector-s16-ref . bs2c09) (bytevector-s16-native-set! . bs2c08) (bytevector-s16-native-ref . bs2c07) (bytevector-length . bs2c06) (bytevector-ieee-single-ref . bs2c05) (bytevector-ieee-single-set! . bs2c04) (bytevector-ieee-single-native-set! . bs2c03) (bytevector-ieee-single-native-ref . bs2c02) (bytevector-ieee-double-set! . bs2c01) (bytevector-ieee-double-ref . bs2c00) (bytevector-ieee-double-native-set! . bs2bff) (bytevector-ieee-double-native-ref . bs2bfe) (bytevector-fill! . bs2bfd) (bytevector-copy! . bs2bfc) (bytevector-copy . bs2bfb) (bytevector->uint-list . bs2bfa) (bytevector->u8-list . bs2bf9) (bytevector->sint-list . bs2bf8) (no-nans-violation? . bs2bf7) (no-infinities-violation? . bs2bf6) (make-no-nans-violation . bs2bf5) (make-no-infinities-violation . bs2bf4) (real->flonum . bs2bf3) (flzero? . bs2bf2) (fltruncate . bs2bf1) (fltan . bs2bf0) (flsqrt . bs2bef) (flsin . bs2bee) (flround . bs2bed) (flpositive? . bs2bec) (flonum? . bs2beb) (flodd? . bs2bea) (flnumerator . bs2be9) (flnegative? . bs2be8) (flnan? . bs2be7) (flmod0 . bs2be6) (flmod . bs2be5) (flmin . bs2be4) (flmax . bs2be3) (fllog . bs2be2) (flinteger? . bs2be1) (flinfinite? . bs2be0) (flfloor . bs2bdf) (flfinite? . bs2bde) (flexpt . bs2bdd) (flexp . bs2bdc) (fleven? . bs2bdb) (fldiv0-and-mod0 . bs2bda) (fldiv0 . bs2bd9) (fldiv-and-mod . bs2bd8) (fldiv . bs2bd7) (fldenominator . bs2bd6) (flcos . bs2bd5) (flceiling . bs2bd4) (flatan . bs2bd3) (flasin . bs2bd2) (flacos . bs2bd1) (flabs . bs2bd0) (fl>? . bs2bcf) (fl>=? . bs2bce) (fl=? . bs2bcd) (fl<? . bs2bcc) (fl<=? . bs2bcb) (fl/ . bs2bca) (fl- . bs2bc9) (fl+ . bs2bc8) (fl* . bs2bc7) (fixnum->flonum . bs2bc6) (fxzero? . bs2bc5) (fxxor . bs2bc4) (fxrotate-bit-field . bs2bc3) (fxreverse-bit-field . bs2bc2) (fxpositive? . bs2bc1) (fxodd? . bs2bc0) (fxnot . bs2bbf) (fxnegative? . bs2bbe) (fxmod0 . bs2bbd) (fxmod . bs2bbc) (fxmin . bs2bbb) (fxmax . bs2bba) (fxlength . bs2bb9) (fxior . bs2bb8) (fxif . bs2bb7) (fxfirst-bit-set . bs2bb6) (fxeven? . bs2bb5) (fxdiv0-and-mod0 . bs2bb4) (fxdiv0 . bs2bb3) (fxdiv-and-mod . bs2bb2) (fxdiv . bs2bb1) (fxcopy-bit-field . bs2bb0) (fxcopy-bit . bs2baf) (fxbit-set? . bs2bae) (fxbit-field . bs2bad) (fxbit-count . bs2bac) (fxarithmetic-shift-right . bs2bab) (fxarithmetic-shift-left . bs2baa) (fxarithmetic-shift . bs2ba9) (fxand . bs2ba8) (fx>? . bs2ba7) (fx>=? . bs2ba6) (fx=? . bs2ba5) (fx<? . bs2ba4) (fx<=? . bs2ba3) (fx-/carry . bs2ba2) (fx- . bs2ba1) (fx+/carry . bs2ba0) (fx+ . bs2b9f) (fx*/carry . bs2b9e) (fx* . bs2b9d) (greatest-fixnum . bs2b9c) (least-fixnum . bs2b9b) (fixnum-width . bs2b9a) (fixnum? . bs2b99) (bitwise-rotate-bit-field . bs2b98) (bitwise-reverse-bit-field . bs2b97) (bitwise-length . bs2b96) (bitwise-if . bs2b95) (bitwise-first-bit-set . bs2b94) (bitwise-copy-bit-field . bs2b93) (bitwise-copy-bit . bs2b92) (bitwise-bit-set? . bs2b91) (bitwise-bit-field . bs2b90) (bitwise-bit-count . bs2b8f) (bitwise-xor . bs2b8e) (bitwise-ior . bs2b8d) (bitwise-and . bs2b8c) (bitwise-not . bs2b8b) (bitwise-arithmetic-shift-right . bs2b8a) (bitwise-arithmetic-shift-left . bs2b89) (bitwise-arithmetic-shift . bs2b88) (zero? . bs2b87) (vector? . bs2b86) (vector-set! . bs2b85) (vector-ref . bs2b84) (vector-map . bs2b83) (vector-length . bs2b82) (vector-for-each . bs2b81) (vector-fill! . bs2b80) (vector->list . bs2b7f) (vector . bs2b7e) (values . bs2b7d) (truncate . bs2b7c) (tan . bs2b7b) (symbol? . bs2b7a) (symbol=? . bs2b79) (symbol->string . bs2b78) (substring . bs2b77) (string? . bs2b76) (string>? . bs2b75) (string>=? . bs2b74) (string=? . bs2b73) (string<? . bs2b72) (string<=? . bs2b71) (string-ref . bs2b70) (string-length . bs2b6f) (string-for-each . bs2b6e) (string-copy . bs2b6d) (string-append . bs2b6c) (string->symbol . bs2b6b) (string->number . bs2b6a) (string->list . bs2b69) (string . bs2b68) (sqrt . bs2b67) (sin . bs2b66) (round . bs2b65) (reverse . bs2b64) (real? . bs2b63) (real-valued? . bs2b62) (real-part . bs2b61) (rationalize . bs2b60) (rational? . bs2b5f) (rational-valued? . bs2b5e) (procedure? . bs2b5d) (positive? . bs2b5c) (pair? . bs2b5b) (odd? . bs2b5a) (numerator . bs2b59) (number? . bs2b58) (number->string . bs2b57) (null? . bs2b56) (not . bs2b55) (negative? . bs2b54) (nan? . bs2b53) (min . bs2b52) (max . bs2b51) (map . bs2b50) (make-vector . bs2b4f) (make-string . bs2b4e) (make-rectangular . bs2b4d) (make-polar . bs2b4c) (magnitude . bs2b4b) (log . bs2b4a) (list? . bs2b49) (list-tail . bs2b48) (list-ref . bs2b47) (list->vector . bs2b46) (list->string . bs2b45) (list . bs2b44) (length . bs2b43) (lcm . bs2b42) (integer? . bs2b41) (integer-valued? . bs2b40) (integer->char . bs2b3f) (infinite? . bs2b3e) (inexact? . bs2b3d) (inexact . bs2b3c) (imag-part . bs2b3b) (gcd . bs2b3a) (for-each . bs2b39) (floor . bs2b38) (finite? . bs2b37) (expt . bs2b36) (exp . bs2b35) (exact? . bs2b34) (exact-integer-sqrt . bs2b33) (exact . bs2b32) (even? . bs2b31) (error . bs2b30) (eqv? . bs2b2f) (equal? . bs2b2e) (eq? . bs2b2d) (dynamic-wind . bs2b2c) (div0-and-mod0 . bs2b2b) (mod0 . bs2b2a) (div0 . bs2b29) (div-and-mod . bs2b28) (mod . bs2b27) (div . bs2b26) (denominator . bs2b25) (cos . bs2b24) (cons . bs2b23) (complex? . bs2b22) (char? . bs2b21) (char>? . bs2b20) (char>=? . bs2b1f) (char=? . bs2b1e) (char<? . bs2b1d) (char<=? . bs2b1c) (char->integer . bs2b1b) (ceiling . bs2b1a) (call-with-values . bs2b19) (call/cc . bs2b18) (call-with-current-continuation . bs2b17) (cddddr . bs2b16) (cdddar . bs2b15) (cddadr . bs2b14) (cddaar . bs2b13) (cdaddr . bs2b12) (cdadar . bs2b11) (cdaadr . bs2b10) (cdaaar . bs2b0f) (cadddr . bs2b0e) (caddar . bs2b0d) (cadadr . bs2b0c) (cadaar . bs2b0b) (caaddr . bs2b0a) (caadar . bs2b09) (caaadr . bs2b08) (caaaar . bs2b07) (cdddr . bs2b06) (cddar . bs2b05) (cdadr . bs2b04) (cdaar . bs2b03) (caddr . bs2b02) (cadar . bs2b01) (caadr . bs2b00) (caaar . bs2aff) (cddr . bs2afe) (cdar . bs2afd) (cadr . bs2afc) (caar . bs2afb) (cdr . bs2afa) (car . bs2af9) (boolean? . bs2af8) (boolean=? . bs2af7) (atan . bs2af6) (assertion-violation . bs2af5) (asin . bs2af4) (apply . bs2af3) (append . bs2af2) (angle . bs2af1) (acos . bs2af0) (abs . bs2aef) (/ . bs2aee) (* . bs2aed) (- . bs2aec) (+ . bs2aeb) (>= . bs2aea) (> . bs2ae9) (= . bs2ae8) (<= . bs2ae7) (< . bs2ae6) (&no-nans . bs2ae4) (&no-infinities . bs2ae3) (&i/o-encoding . bs2ae2) (&i/o-decoding . bs2ae1) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7) (&undefined . bs2ad6) (&syntax . bs2ad5) (&lexical . bs2ad4) (&implementation-restriction . bs2ad3) (&non-continuable . bs2ad2) (&who . bs2ad1) (&irritants . bs2ad0) (&assertion . bs2acf) (&violation . bs2ace) (&error . bs2acd) (&serious . bs2acc) (&warning . bs2acb) (&message . bs2aca) (&condition . bs2ac9) (define-condition-type . bs2ac8) (define-enumeration . bs2ac7) (define-record-type . bs2ac6) (parent-rtd . bs2ac5) (nongenerative . bs2ac4) (opaque . bs2ac3) (sealed . bs2ac2) (protocol . bs2ac1) (parent . bs2ac0) (immutable . bs2abf) (mutable . bs2abe) (fields . bs2abd) (error-handling-mode . bs2abc) (file-options . bs2abb) (buffer-mode . bs2aba) (eol-style . bs2ab9) (guard . bs2ab8) (unsyntax-splicing . bs2ab5) (unsyntax . bs2ab4) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (_ . bs2ab1) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (assert . bs2aad) (endianness . bs2aac) (do . bs2aa9) (cond . bs2aa8) (let* . bs2aa7) (let*-values . bs2aa6) (let-values . bs2aa5) (identifier-syntax . bs2aa4) (with-syntax . bs2aa3) (quasisyntax . bs2aa2) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (record-constructor-descriptor . bs2a9d) (record-type-descriptor . bs2a9c) (case . bs2a9b) (unless . bs2a99) (when . bs2a98) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec* . bs2a93) (letrec . bs2a92) (case-lambda . bs2a90) (lambda . bs2a8f) (syntax . bs2a8e) (syntax-case . bs2a8d) (quote . bs2a8c) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (begin . bs2a86) (define-syntax . bs2a84) (define . bs2a83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e30 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bse3a) (quotient . bs2c8c) (null-environment . bse38) (remainder . bs2c8b) (modulo . bs2c8a) (inexact->exact . bs2c89) (force . bs2c88) (exact->inexact . bs2c87) (make-promise . bs2c86) (delay . bs2aab)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e31 '(rnrs control) '(6) '() '() '() '((do . bs2aa9) (unless . bs2a99) (when . bs2a98) (case-lambda . bs2a90)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e32 '(rnrs eval) '(6) '() '() '() '((eval . bse3e) (environment . bse36)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e33 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bs2c82) (set-car! . bs2c81)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e34 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bs2c84) (string-set! . bs2c83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e35 '(rnrs programs) '(6) '() '() '() '((exit . bs2c85) (command-line . bs2917)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e36 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bsba9) (identifier? . bse60) (generate-temporaries . bse4c) (free-identifier=? . bse4e) (syntax->datum . bse64) (datum->syntax . bse62) (bound-identifier=? . bse50) (syntax-violation . bse5e) (unsyntax-splicing . bs2ab5) (unsyntax . bs2ab4) (_ . bs2ab1) (... . bs2aae) (with-syntax . bs2aa3) (quasisyntax . bs2aa2) (syntax . bs2a8e) (syntax-case . bs2a8d)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e37 '(rnrs files) '(6) '() '() '() '((delete-file . bs2d11) (file-exists? . bs2d10) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e38 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bs2d0f) (vector-sort . bs2d0e) (list-sort . bs2d0d)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e39 '(rnrs base) '(6) '() '() '() '((zero? . bs2b87) (vector? . bs2b86) (vector-set! . bs2b85) (vector-ref . bs2b84) (vector-map . bs2b83) (vector-length . bs2b82) (vector-for-each . bs2b81) (vector-fill! . bs2b80) (vector->list . bs2b7f) (vector . bs2b7e) (values . bs2b7d) (truncate . bs2b7c) (tan . bs2b7b) (symbol? . bs2b7a) (symbol=? . bs2b79) (symbol->string . bs2b78) (substring . bs2b77) (string? . bs2b76) (string>? . bs2b75) (string>=? . bs2b74) (string=? . bs2b73) (string<? . bs2b72) (string<=? . bs2b71) (string-ref . bs2b70) (string-length . bs2b6f) (string-for-each . bs2b6e) (string-copy . bs2b6d) (string-append . bs2b6c) (string->symbol . bs2b6b) (string->number . bs2b6a) (string->list . bs2b69) (string . bs2b68) (sqrt . bs2b67) (sin . bs2b66) (round . bs2b65) (reverse . bs2b64) (real? . bs2b63) (real-valued? . bs2b62) (real-part . bs2b61) (rationalize . bs2b60) (rational? . bs2b5f) (rational-valued? . bs2b5e) (procedure? . bs2b5d) (positive? . bs2b5c) (pair? . bs2b5b) (odd? . bs2b5a) (numerator . bs2b59) (number? . bs2b58) (number->string . bs2b57) (null? . bs2b56) (not . bs2b55) (negative? . bs2b54) (nan? . bs2b53) (min . bs2b52) (max . bs2b51) (map . bs2b50) (make-vector . bs2b4f) (make-string . bs2b4e) (make-rectangular . bs2b4d) (make-polar . bs2b4c) (magnitude . bs2b4b) (log . bs2b4a) (list? . bs2b49) (list-tail . bs2b48) (list-ref . bs2b47) (list->vector . bs2b46) (list->string . bs2b45) (list . bs2b44) (length . bs2b43) (lcm . bs2b42) (integer? . bs2b41) (integer-valued? . bs2b40) (integer->char . bs2b3f) (infinite? . bs2b3e) (inexact? . bs2b3d) (inexact . bs2b3c) (imag-part . bs2b3b) (gcd . bs2b3a) (for-each . bs2b39) (floor . bs2b38) (finite? . bs2b37) (expt . bs2b36) (exp . bs2b35) (exact? . bs2b34) (exact-integer-sqrt . bs2b33) (exact . bs2b32) (even? . bs2b31) (error . bs2b30) (eqv? . bs2b2f) (equal? . bs2b2e) (eq? . bs2b2d) (dynamic-wind . bs2b2c) (div0-and-mod0 . bs2b2b) (mod0 . bs2b2a) (div0 . bs2b29) (div-and-mod . bs2b28) (mod . bs2b27) (div . bs2b26) (denominator . bs2b25) (cos . bs2b24) (cons . bs2b23) (complex? . bs2b22) (char? . bs2b21) (char>? . bs2b20) (char>=? . bs2b1f) (char=? . bs2b1e) (char<? . bs2b1d) (char<=? . bs2b1c) (char->integer . bs2b1b) (ceiling . bs2b1a) (call-with-values . bs2b19) (call/cc . bs2b18) (call-with-current-continuation . bs2b17) (cddddr . bs2b16) (cdddar . bs2b15) (cddadr . bs2b14) (cddaar . bs2b13) (cdaddr . bs2b12) (cdadar . bs2b11) (cdaadr . bs2b10) (cdaaar . bs2b0f) (cadddr . bs2b0e) (caddar . bs2b0d) (cadadr . bs2b0c) (cadaar . bs2b0b) (caaddr . bs2b0a) (caadar . bs2b09) (caaadr . bs2b08) (caaaar . bs2b07) (cdddr . bs2b06) (cddar . bs2b05) (cdadr . bs2b04) (cdaar . bs2b03) (caddr . bs2b02) (cadar . bs2b01) (caadr . bs2b00) (caaar . bs2aff) (cddr . bs2afe) (cdar . bs2afd) (cadr . bs2afc) (caar . bs2afb) (cdr . bs2afa) (car . bs2af9) (boolean? . bs2af8) (boolean=? . bs2af7) (atan . bs2af6) (assertion-violation . bs2af5) (asin . bs2af4) (apply . bs2af3) (append . bs2af2) (angle . bs2af1) (acos . bs2af0) (abs . bs2aef) (/ . bs2aee) (* . bs2aed) (- . bs2aec) (+ . bs2aeb) (>= . bs2aea) (> . bs2ae9) (= . bs2ae8) (<= . bs2ae7) (< . bs2ae6) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (_ . bs2ab1) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (assert . bs2aad) (cond . bs2aa8) (let* . bs2aa7) (let*-values . bs2aa6) (let-values . bs2aa5) (identifier-syntax . bs2aa4) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (case . bs2a9b) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec* . bs2a93) (letrec . bs2a92) (lambda . bs2a8f) (quote . bs2a8c) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (begin . bs2a86) (define-syntax . bs2a84) (define . bs2a83)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3a '(rnrs lists) '(6) '() '() '() '((remove . bs2c80) (remv . bs2c7f) (remp . bs2c7e) (remq . bs2c7d) (partition . bs2c7c) (memv . bs2c7b) (memq . bs2c7a) (memp . bs2c79) (member . bs2c78) (exists . bs2c77) (for-all . bs2c76) (fold-right . bs2c75) (fold-left . bs2c74) (find . bs2c73) (filter . bs2c72) (cons* . bs2c71) (assv . bs2c70) (assq . bs2c6f) (assp . bs2c6e) (assoc . bs2c6d)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bs2cf7) (call-with-input-file . bs2cf6) (write-char . bs2cf5) (write . bs2cf4) (with-output-to-file . bs2cf3) (with-input-from-file . bs2cf2) (read-char . bs2cf1) (read . bs2cf0) (peek-char . bs2cef) (open-output-file . bs2cee) (open-input-file . bs2ced) (newline . bs2cec) (display . bs2ceb) (close-output-port . bs2cea) (close-input-port . bs2ce9) (eof-object? . bs2ce8) (eof-object . bs2ce7) (current-error-port . bs2ce6) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bs2cac) (utf32->string . bs2c32) (utf16->string . bs2c31) (utf8->string . bs2c30) (uint-list->bytevector . bs2c2f) (u8-list->bytevector . bs2c2e) (string->utf8 . bs2c2d) (string->utf32 . bs2c2c) (string->utf16 . bs2c2b) (sint-list->bytevector . bs2c2a) (native-endianness . bs2c29) (bytevector? . bs2c28) (bytevector=? . bs2c27) (bytevector-uint-set! . bs2c26) (bytevector-uint-ref . bs2c25) (bytevector-u8-set! . bs2c24) (bytevector-u8-ref . bs2c23) (bytevector-u64-set! . bs2c22) (bytevector-u64-ref . bs2c21) (bytevector-u64-native-set! . bs2c20) (bytevector-u64-native-ref . bs2c1f) (bytevector-u32-set! . bs2c1e) (bytevector-u32-ref . bs2c1d) (bytevector-u32-native-set! . bs2c1c) (bytevector-u32-native-ref . bs2c1b) (bytevector-u16-set! . bs2c1a) (bytevector-u16-ref . bs2c19) (bytevector-u16-native-set! . bs2c18) (bytevector-u16-native-ref . bs2c17) (bytevector-sint-set! . bs2c16) (bytevector-sint-ref . bs2c15) (bytevector-s8-set! . bs2c14) (bytevector-s8-ref . bs2c13) (bytevector-s64-set! . bs2c12) (bytevector-s64-ref . bs2c11) (bytevector-s64-native-set! . bs2c10) (bytevector-s64-native-ref . bs2c0f) (bytevector-s32-set! . bs2c0e) (bytevector-s32-ref . bs2c0d) (bytevector-s32-native-set! . bs2c0c) (bytevector-s32-native-ref . bs2c0b) (bytevector-s16-set! . bs2c0a) (bytevector-s16-ref . bs2c09) (bytevector-s16-native-set! . bs2c08) (bytevector-s16-native-ref . bs2c07) (bytevector-length . bs2c06) (bytevector-ieee-single-ref . bs2c05) (bytevector-ieee-single-set! . bs2c04) (bytevector-ieee-single-native-set! . bs2c03) (bytevector-ieee-single-native-ref . bs2c02) (bytevector-ieee-double-set! . bs2c01) (bytevector-ieee-double-ref . bs2c00) (bytevector-ieee-double-native-set! . bs2bff) (bytevector-ieee-double-native-ref . bs2bfe) (bytevector-fill! . bs2bfd) (bytevector-copy! . bs2bfc) (bytevector-copy . bs2bfb) (bytevector->uint-list . bs2bfa) (bytevector->u8-list . bs2bf9) (bytevector->sint-list . bs2bf8) (endianness . bs2aac)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3d '(rnrs unicode) '(6) '() '() '() '((string-upcase . bs2d3f) (string-titlecase . bs2d3e) (string-normalize-nfkd . bs2d3d) (string-normalize-nfkc . bs2d3c) (string-normalize-nfd . bs2d3b) (string-normalize-nfc . bs2d3a) (string-foldcase . bs2d39) (string-downcase . bs2d38) (string-ci>? . bs2d37) (string-ci>=? . bs2d36) (string-ci=? . bs2d35) (string-ci<? . bs2d34) (string-ci<=? . bs2d33) (char-whitespace? . bs2d32) (char-upper-case? . bs2d31) (char-title-case? . bs2d30) (char-numeric? . bs2d2f) (char-lower-case? . bs2d2e) (char-general-category . bs2d2d) (char-upcase . bs2d2c) (char-titlecase . bs2d2b) (char-foldcase . bs2d2a) (char-downcase . bs2d29) (char-ci>? . bs2d28) (char-ci>=? . bs2d27) (char-ci=? . bs2d26) (char-ci<? . bs2d25) (char-ci<=? . bs2d24) (char-alphabetic? . bs2d23)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bs2c66) (raise-continuable . bs2c65) (raise . bs2c64) (guard . bs2ab8) (else . bs2ab0) (=> . bs2aaf)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e3f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bs2b98) (bitwise-reverse-bit-field . bs2b97) (bitwise-length . bs2b96) (bitwise-if . bs2b95) (bitwise-first-bit-set . bs2b94) (bitwise-copy-bit-field . bs2b93) (bitwise-copy-bit . bs2b92) (bitwise-bit-set? . bs2b91) (bitwise-bit-field . bs2b90) (bitwise-bit-count . bs2b8f) (bitwise-xor . bs2b8e) (bitwise-ior . bs2b8d) (bitwise-and . bs2b8c) (bitwise-not . bs2b8b) (bitwise-arithmetic-shift-right . bs2b8a) (bitwise-arithmetic-shift-left . bs2b89) (bitwise-arithmetic-shift . bs2b88)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e40 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bs2bc5) (fxxor . bs2bc4) (fxrotate-bit-field . bs2bc3) (fxreverse-bit-field . bs2bc2) (fxpositive? . bs2bc1) (fxodd? . bs2bc0) (fxnot . bs2bbf) (fxnegative? . bs2bbe) (fxmod0 . bs2bbd) (fxmod . bs2bbc) (fxmin . bs2bbb) (fxmax . bs2bba) (fxlength . bs2bb9) (fxior . bs2bb8) (fxif . bs2bb7) (fxfirst-bit-set . bs2bb6) (fxeven? . bs2bb5) (fxdiv0-and-mod0 . bs2bb4) (fxdiv0 . bs2bb3) (fxdiv-and-mod . bs2bb2) (fxdiv . bs2bb1) (fxcopy-bit-field . bs2bb0) (fxcopy-bit . bs2baf) (fxbit-set? . bs2bae) (fxbit-field . bs2bad) (fxbit-count . bs2bac) (fxarithmetic-shift-right . bs2bab) (fxarithmetic-shift-left . bs2baa) (fxarithmetic-shift . bs2ba9) (fxand . bs2ba8) (fx>? . bs2ba7) (fx>=? . bs2ba6) (fx=? . bs2ba5) (fx<? . bs2ba4) (fx<=? . bs2ba3) (fx-/carry . bs2ba2) (fx- . bs2ba1) (fx+/carry . bs2ba0) (fx+ . bs2b9f) (fx*/carry . bs2b9e) (fx* . bs2b9d) (greatest-fixnum . bs2b9c) (least-fixnum . bs2b9b) (fixnum-width . bs2b9a) (fixnum? . bs2b99)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e41 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bs2bf7) (no-infinities-violation? . bs2bf6) (make-no-nans-violation . bs2bf5) (make-no-infinities-violation . bs2bf4) (real->flonum . bs2bf3) (flzero? . bs2bf2) (fltruncate . bs2bf1) (fltan . bs2bf0) (flsqrt . bs2bef) (flsin . bs2bee) (flround . bs2bed) (flpositive? . bs2bec) (flonum? . bs2beb) (flodd? . bs2bea) (flnumerator . bs2be9) (flnegative? . bs2be8) (flnan? . bs2be7) (flmod0 . bs2be6) (flmod . bs2be5) (flmin . bs2be4) (flmax . bs2be3) (fllog . bs2be2) (flinteger? . bs2be1) (flinfinite? . bs2be0) (flfloor . bs2bdf) (flfinite? . bs2bde) (flexpt . bs2bdd) (flexp . bs2bdc) (fleven? . bs2bdb) (fldiv0-and-mod0 . bs2bda) (fldiv0 . bs2bd9) (fldiv-and-mod . bs2bd8) (fldiv . bs2bd7) (fldenominator . bs2bd6) (flcos . bs2bd5) (flceiling . bs2bd4) (flatan . bs2bd3) (flasin . bs2bd2) (flacos . bs2bd1) (flabs . bs2bd0) (fl>? . bs2bcf) (fl>=? . bs2bce) (fl=? . bs2bcd) (fl<? . bs2bcc) (fl<=? . bs2bcb) (fl/ . bs2bca) (fl- . bs2bc9) (fl+ . bs2bc8) (fl* . bs2bc7) (fixnum->flonum . bs2bc6) (&no-nans . bs2ae4) (&no-infinities . bs2ae3)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e42 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bs2d0c) (string-ci-hash . bs2d0b) (string-hash . bs2d0a) (equal-hash . bs2d09) (hashtable-equivalence-function . bs2d08) (make-hashtable . bs2d07) (hashtable-hash-function . bs2d06) (make-eqv-hashtable . bs2d05) (make-eq-hashtable . bs2d04) (hashtable? . bs2d03) (hashtable-update! . bs2d02) (hashtable-size . bs2d01) (hashtable-set! . bs2d00) (hashtable-ref . bs2cff) (hashtable-mutable? . bs2cfe) (hashtable-keys . bs2cfd) (hashtable-entries . bs2cfc) (hashtable-delete! . bs2cfb) (hashtable-copy . bs2cfa) (hashtable-contains? . bs2cf9) (hashtable-clear! . bs2cf8)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e43 '(rnrs io ports) '(6) '() '() '() '((eof-object? . bs2ce8) (eof-object . bs2ce7) (current-error-port . bs2ce6) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (utf-8-codec . bs2ce1) (utf-16-codec . bs2ce0) (transcoder-error-handling-mode . bs2cdf) (transcoder-eol-style . bs2cde) (transcoder-codec . bs2cdd) (transcoded-port . bs2cdc) (textual-port? . bs2cdb) (string->bytevector . bs2cda) (standard-output-port . bs2cd9) (standard-input-port . bs2cd8) (standard-error-port . bs2cd7) (set-port-position! . bs2cd6) (put-u8 . bs2cd5) (put-string . bs2cd4) (put-datum . bs2cd3) (put-char . bs2cd2) (put-bytevector . bs2cd1) (port? . bs2cd0) (port-transcoder . bs2ccf) (port-position . bs2cce) (port-has-set-port-position!? . bs2ccd) (port-has-port-position? . bs2ccc) (port-eof? . bs2ccb) (output-port-buffer-mode . bs2cca) (open-string-output-port . bs2cc9) (open-string-input-port . bs2cc8) (open-file-output-port . bs2cc7) (open-file-input/output-port . bs2cc6) (open-file-input-port . bs2cc5) (open-bytevector-output-port . bs2cc4) (open-bytevector-input-port . bs2cc3) (native-transcoder . bs2cc2) (native-eol-style . bs2cc1) (make-transcoder . bs2cc0) (latin-1-codec . bs2cbf) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (make-i/o-encoding-error . bs2cb4) (make-i/o-decoding-error . bs2cb3) (make-custom-textual-output-port . bs2cb2) (make-custom-textual-input/output-port . bs2cb1) (make-custom-textual-input-port . bs2cb0) (make-custom-binary-output-port . bs2caf) (make-custom-binary-input/output-port . bs2cae) (make-custom-binary-input-port . bs2cad) (lookahead-u8 . bs2cab) (lookahead-char . bs2caa) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (i/o-encoding-error? . bs2c9c) (i/o-encoding-error-char . bs2c9b) (i/o-decoding-error? . bs2c9a) (get-u8 . bs2c99) (get-string-n! . bs2c98) (get-string-n . bs2c97) (get-string-all . bs2c96) (get-line . bs2c95) (get-datum . bs2c94) (get-char . bs2c93) (get-bytevector-some . bs2c92) (get-bytevector-n! . bs2c91) (get-bytevector-n . bs2c90) (get-bytevector-all . bs2c8f) (flush-output-port . bs2c8e) (close-port . bs2c8d) (call-with-string-output-port . bs2c6c) (call-with-port . bs2c6b) (call-with-bytevector-output-port . bs2c6a) (bytevector->string . bs2c69) (buffer-mode? . bs2c68) (binary-port? . bs2c67) (&i/o-encoding . bs2ae2) (&i/o-decoding . bs2ae1) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7) (error-handling-mode . bs2abc) (file-options . bs2abb) (buffer-mode . bs2aba) (eol-style . bs2ab9)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e44 '(rnrs enums) '(6) '() '() '() '((make-enumeration . bs2c63) (enum-set=? . bs2c62) (enum-set-universe . bs2c61) (enum-set-union . bs2c60) (enum-set-subset? . bs2c5f) (enum-set-projection . bs2c5e) (enum-set-member? . bs2c5d) (enum-set-intersection . bs2c5c) (enum-set-indexer . bs2c5b) (enum-set-difference . bs2c5a) (enum-set-constructor . bs2c59) (enum-set-complement . bs2c58) (enum-set->list . bs2c57) (define-enumeration . bs2ac7)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e45 '(rnrs conditions) '(6) '() '() '() '((who-condition? . bs2c56) (warning? . bs2c55) (violation? . bs2c54) (undefined-violation? . bs2c53) (syntax-violation? . bs2c52) (syntax-violation-subform . bs2c51) (syntax-violation-form . bs2c50) (syntax-violation . bse5e) (simple-conditions . bs2c4f) (serious-condition? . bs2c4e) (non-continuable-violation? . bs2c4d) (message-condition? . bs2c4c) (make-who-condition . bs2c4b) (make-warning . bs2c4a) (make-violation . bs2c49) (make-undefined-violation . bs2c48) (make-syntax-violation . bs2c47) (make-serious-condition . bs2c46) (make-non-continuable-violation . bs2c45) (make-message-condition . bs2c44) (make-lexical-violation . bs2c43) (make-irritants-condition . bs2c42) (make-implementation-restriction-violation . bs2c41) (make-error . bs2c40) (make-assertion-violation . bs2c3f) (lexical-violation? . bs2c3e) (irritants-condition? . bs2c3d) (implementation-restriction-violation? . bs2c3c) (error? . bs2c3b) (condition-who . bs2c3a) (condition-predicate . bs2c39) (condition-message . bs2c38) (condition-irritants . bs2c37) (condition-accessor . bs2c36) (condition . bs2c35) (assertion-violation? . bs2c34) (condition? . bs2c33) (&undefined . bs2ad6) (&syntax . bs2ad5) (&lexical . bs2ad4) (&implementation-restriction . bs2ad3) (&non-continuable . bs2ad2) (&who . bs2ad1) (&irritants . bs2ad0) (&assertion . bs2acf) (&violation . bs2ace) (&error . bs2acd) (&serious . bs2acc) (&warning . bs2acb) (&message . bs2aca) (&condition . bs2ac9) (define-condition-type . bs2ac8)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e46 '(rnrs records inspection) '(6) '() '() '() '((record? . bs2d1b) (record-type-uid . bs2d1a) (record-type-sealed? . bs2d19) (record-type-parent . bs2d18) (record-type-opaque? . bs2d17) (record-type-name . bs2d16) (record-type-generative? . bs2d15) (record-type-field-names . bs2d14) (record-rtd . bs2d13) (record-field-mutable? . bs2d12)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e47 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bs2d22) (record-predicate . bs2d21) (record-mutator . bs2d20) (record-constructor . bs2d1f) (record-accessor . bs2d1e) (make-record-type-descriptor . bs2d1d) (make-record-constructor-descriptor . bs2d1c)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e48 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bs2ac6) (parent-rtd . bs2ac5) (nongenerative . bs2ac4) (opaque . bs2ac3) (sealed . bs2ac2) (protocol . bs2ac1) (parent . bs2ac0) (immutable . bs2abf) (mutable . bs2abe) (fields . bs2abd) (record-constructor-descriptor . bs2a9d) (record-type-descriptor . bs2a9c)) '() values values '#f '#f '#t '#f) (bs992@bs7de@install-library 'bs2e49 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bs2e29) (&no-nans-rtd . bs2e28) (&no-infinities-rcd . bs2e27) (&no-infinities-rtd . bs2e26) (&i/o-encoding-rcd . bs2e25) (&i/o-encoding-rtd . bs2e24) (&i/o-decoding-rcd . bs2e23) (&i/o-decoding-rtd . bs2e22) (&i/o-port-rcd . bs2e21) (&i/o-port-rtd . bs2e20) (&i/o-file-does-not-exist-rcd . bs2e1f) (&i/o-file-does-not-exist-rtd . bs2e1e) (&i/o-file-already-exists-rcd . bs2e1d) (&i/o-file-already-exists-rtd . bs2e1c) (&i/o-file-is-read-only-rcd . bs2e1b) (&i/o-file-is-read-only-rtd . bs2e1a) (&i/o-file-protection-rcd . bs2e19) (&i/o-file-protection-rtd . bs2e18) (&i/o-filename-rcd . bs2e17) (&i/o-filename-rtd . bs2e16) (&i/o-invalid-position-rcd . bs2e15) (&i/o-invalid-position-rtd . bs2e14) (&i/o-write-rcd . bs2e13) (&i/o-write-rtd . bs2e12) (&i/o-read-rcd . bs2e11) (&i/o-read-rtd . bs2e10) (&i/o-rcd . bs2e0f) (&i/o-rtd . bs2e0e) (&undefined-rcd . bs2e0d) (&undefined-rtd . bs2e0c) (&syntax-rcd . bs2e0b) (&syntax-rtd . bs2e0a) (&lexical-rcd . bs2e09) (&lexical-rtd . bs2e08) (&implementation-restriction-rcd . bs2e07) (&implementation-restriction-rtd . bs2e06) (&non-continuable-rcd . bs2e05) (&non-continuable-rtd . bs2e04) (&who-rcd . bs2e03) (&who-rtd . bs2e02) (&irritants-rcd . bs2e01) (&irritants-rtd . bs2e00) (&assertion-rcd . bs2dff) (&assertion-rtd . bs2dfe) (&violation-rcd . bs2dfd) (&violation-rtd . bs2dfc) (&error-rcd . bs2dfb) (&error-rtd . bs2dfa) (&serious-rcd . bs2df9) (&serious-rtd . bs2df8) (&warning-rcd . bs2df7) (&warning-rtd . bs2df6) (&message-rcd . bs2df5) (&message-rtd . bs2df4) (&condition-rcd . bs2df3) (&condition-rtd . bs2df2) (syntax-error . bse5a) (syntax-dispatch . bsd7e) (pretty-print . bs2df1) (eval-core . bs2df0) (set-symbol-value! . bs2def) (symbol-value . bs2dee) (gensym . bs2ded) (void . bs2dec) (load . bs291d) (interaction-environment . bse6c) (char-ready? . bs2deb) (regexp? . bs2dea) (read-line . bs2de9) (gensym-prefix-set! . bs2de8) (ungensym . bs2de7) (alist->eq-hash-table . bs2de6) (assoc-ref . bs2de5) (print . bs2de4) (format . bs2de3) (host-os . bs2de2) (library-path . bs7bd) (standard-library-path . bs2de1) (ssl-supported? . bs2de0) (ssl-socket? . bs2ddf) (socket-sslize! . bs2dde) (%monapi-name-whereis . bs2ddd) (%monapi-message-send . bs2ddc) (file-newer? . bs2ddb) (stat-mtime . bs2dda) (write-to-file . bs2dd9) (file->list . bs2dd8) (file->string . bs2dd7) (digit->integer . bs2dd6) (call-with-string-input-port . bs2dd5) (call-with-string-io . bs2dd4) (string-split . bs2dd3) (bytevector-for-each . bs2dd2) (string->regexp . bs2dd1) (rxmatch . bs2dd0) (regexp-replace-all . bs2dcf) (hashtable-fold-left . bs2dce) (hashtable-for-each . bs2dcd) (mosh-cache-dir . bs5a7) (call-process . bs2dcc) (local-tz-offset . bs2dcb) (microseconds . bs2dca) (directory-list . bs2dc9) (set-current-directory! . bs2dc8) (expand-path . bs2dc7) (current-directory . bs2dc6) (%spawn . bs2dc5) (%waitpid . bs2dc4) (simple-struct-name . bs2dc3) (simple-struct-set! . bs2dc2) (simple-struct-ref . bs2dc1) (make-simple-struct . bs2dc0) (simple-struct? . bs2dbf) (pointer-ref-c-int64 . bs2dbe) (pointer-ref-c-int32 . bs2dbd) (pointer-ref-c-int16 . bs2dbc) (pointer-ref-c-int8 . bs2dbb) (pointer-ref-c-uint64 . bs2dba) (pointer-ref-c-uint32 . bs2db9) (pointer-ref-c-uint16 . bs2db8) (pointer-ref-c-uint8 . bs2db7) (pointer-set-c-uint64! . bs2db6) (pointer-set-c-uint32! . bs2db5) (pointer-set-c-uint16! . bs2db4) (pointer-set-c-uint8! . bs2db3) (pointer-set-c-int64! . bs2db2) (pointer-set-c-int32! . bs2db1) (pointer-set-c-int16! . bs2db0) (pointer-set-c-int8! . bs2daf) (pointer-set-c-pointer! . bs2dae) (pointer-set-c-double! . bs2dad) (pointer-set-c-float! . bs2dac) (pointer-set-c-long-long! . bs2dab) (pointer-set-c-long! . bs2daa) (pointer-set-c-int! . bs2da9) (pointer-set-c-short! . bs2da8) (pointer-set-c-char! . bs2da7) (pointer-ref-c-pointer . bs2da6) (pointer-ref-c-double . bs2da5) (pointer-ref-c-float . bs2da4) (pointer-ref-c-unsigned-long-long . bs2da3) (pointer-ref-c-signed-long-long . bs2da2) (pointer-ref-c-unsigned-long . bs2da1) (pointer-ref-c-signed-long . bs2da0) (pointer-ref-c-unsigned-int . bs2d9f) (pointer-ref-c-signed-int . bs2d9e) (pointer-ref-c-unsigned-short . bs2d9d) (pointer-ref-c-signed-short . bs2d9c) (pointer-ref-c-unsigned-char . bs2d9b) (pointer-ref-c-signed-char . bs2d9a) (pointer->integer . bs2d99) (integer->pointer . bs2d98) (pointer? . bs2d97) (shared-errno . bs2d96) (%ffi-free-c-callback-trampoline . bs2d95) (%ffi-make-c-callback-trampoline . bs2d94) (%ffi-free . bs2d93) (%ffi-malloc . bs2d92) (%ffi-supported? . bs2d91) (%ffi-pointer->string . bs2d90) (%ffi-call . bs2d8f) (%ffi-lookup . bs2d8e) (%ffi-open . bs2d8d) (null-terminated-utf8->string . bs2d8c) (null-terminated-bytevector->string . bs2d8b) (%exec . bs2d8a) (%fork . bs2d89) (%pipe . bs2d88) (p . bs2d87) (open-output-string . bs2d86) (get-output-string . bs2d85) (file-stat-ctime . bs2d84) (file-stat-atime . bs2d83) (file-stat-mtime . bs2d82) (file-size-in-bytes . bs2d81) (file-writable? . bs2d80) (file-executable? . bs2d7f) (file-readable? . bs2d7e) (file-regular? . bs2d7d) (file-symbolic-link? . bs2d7c) (file-directory? . bs2d7b) (create-symbolic-link . bs2d7a) (rename-file . bs2d79) (delete-directory . bs2d78) (create-directory . bs2d77) (create-mosh-cache-dir . bs2d76) (get-environment-variables . bs2d75) (current-exception-handler . bs2d74) (get-environment-variable . bs2d73) (join-wraps . bs2d72) (id->real-label . bs2d71) (same-marks? . bs2d70) (same-marks*? . bs2d6f) (get-timeofday . bs2d6e) (get-command-line . bs2d6d) (sys-display . bs2d6c) (whereis . bs2d6b) (register . bs2d6a) (vm-join! . bs2d69) (vm-set-value! . bs2d68) (vm? . bs2d67) (main-vm? . bs2d66) (vm-eval . bs2d65) (vm-self . bs2d64) (vm-start! . bs2d63) (make-vm . bs2d62) (mutex-try-lock! . bs2d61) (mutex-unlock! . bs2d60) (mutex-lock! . bs2d5f) (mutex? . bs2d5e) (make-mutex . bs2d5d) (condition-variable-notify-all! . bs2d5c) (condition-variable-notify! . bs2d5b) (condition-variable-wait! . bs2d5a) (make-condition-variable . bs2d59) (write/ss . bs2d58) (mosh-executable-path . bs2d57) (make-file-options . bs2d56) (source-info . bs2d55) (make-compiler-instruction . bs2d54) (make-instruction . bs2d53) (set-source-info! . bs2d52) (bignum? . bs2d51) (fast-equal? . bs2d50) (fasl-read . bs2d4f) (fasl-write . bs2d4e) (time-usage . bs2d4d) (os-constant . bs2d4c) (condition-printer . bs2d4b) (disasm . bs2d4a) (make-parameter . bs5a5) (socket-port . bs2d49) (socket-shutdown . bs2d48) (socket-close . bs2d47) (socket-send . bs2d46) (socket-recv! . bs2d45) (socket-recv . bs2d44) (make-server-socket . bs2d43) (make-client-socket . bs2d42) (socket-accept . bs2d41) (socket? . bs2d40) (string-upcase . bs2d3f) (string-titlecase . bs2d3e) (string-normalize-nfkd . bs2d3d) (string-normalize-nfkc . bs2d3c) (string-normalize-nfd . bs2d3b) (string-normalize-nfc . bs2d3a) (string-foldcase . bs2d39) (string-downcase . bs2d38) (string-ci>? . bs2d37) (string-ci>=? . bs2d36) (string-ci=? . bs2d35) (string-ci<? . bs2d34) (string-ci<=? . bs2d33) (char-whitespace? . bs2d32) (char-upper-case? . bs2d31) (char-title-case? . bs2d30) (char-numeric? . bs2d2f) (char-lower-case? . bs2d2e) (char-general-category . bs2d2d) (char-upcase . bs2d2c) (char-titlecase . bs2d2b) (char-foldcase . bs2d2a) (char-downcase . bs2d29) (char-ci>? . bs2d28) (char-ci>=? . bs2d27) (char-ci=? . bs2d26) (char-ci<? . bs2d25) (char-ci<=? . bs2d24) (char-alphabetic? . bs2d23) (make-variable-transformer . bsba9) (identifier? . bse60) (generate-temporaries . bse4c) (free-identifier=? . bse4e) (syntax->datum . bse64) (datum->syntax . bse62) (bound-identifier=? . bse50) (record-type-descriptor? . bs2d22) (record-predicate . bs2d21) (record-mutator . bs2d20) (record-constructor . bs2d1f) (record-accessor . bs2d1e) (make-record-type-descriptor . bs2d1d) (make-record-constructor-descriptor . bs2d1c) (record? . bs2d1b) (record-type-uid . bs2d1a) (record-type-sealed? . bs2d19) (record-type-parent . bs2d18) (record-type-opaque? . bs2d17) (record-type-name . bs2d16) (record-type-generative? . bs2d15) (record-type-field-names . bs2d14) (record-rtd . bs2d13) (record-field-mutable? . bs2d12) (delete-file . bs2d11) (file-exists? . bs2d10) (vector-sort! . bs2d0f) (vector-sort . bs2d0e) (list-sort . bs2d0d) (symbol-hash . bs2d0c) (string-ci-hash . bs2d0b) (string-hash . bs2d0a) (equal-hash . bs2d09) (hashtable-equivalence-function . bs2d08) (make-hashtable . bs2d07) (hashtable-hash-function . bs2d06) (make-eqv-hashtable . bs2d05) (make-eq-hashtable . bs2d04) (hashtable? . bs2d03) (hashtable-update! . bs2d02) (hashtable-size . bs2d01) (hashtable-set! . bs2d00) (hashtable-ref . bs2cff) (hashtable-mutable? . bs2cfe) (hashtable-keys . bs2cfd) (hashtable-entries . bs2cfc) (hashtable-delete! . bs2cfb) (hashtable-copy . bs2cfa) (hashtable-contains? . bs2cf9) (hashtable-clear! . bs2cf8) (call-with-output-file . bs2cf7) (call-with-input-file . bs2cf6) (write-char . bs2cf5) (write . bs2cf4) (with-output-to-file . bs2cf3) (with-input-from-file . bs2cf2) (read-char . bs2cf1) (read . bs2cf0) (peek-char . bs2cef) (open-output-file . bs2cee) (open-input-file . bs2ced) (newline . bs2cec) (display . bs2ceb) (close-output-port . bs2cea) (close-input-port . bs2ce9) (eof-object? . bs2ce8) (eof-object . bs2ce7) (current-error-port . bs2ce6) (current-output-port . bs2ce5) (current-input-port . bs2ce4) (output-port? . bs2ce3) (input-port? . bs2ce2) (utf-8-codec . bs2ce1) (utf-16-codec . bs2ce0) (transcoder-error-handling-mode . bs2cdf) (transcoder-eol-style . bs2cde) (transcoder-codec . bs2cdd) (transcoded-port . bs2cdc) (textual-port? . bs2cdb) (string->bytevector . bs2cda) (standard-output-port . bs2cd9) (standard-input-port . bs2cd8) (standard-error-port . bs2cd7) (set-port-position! . bs2cd6) (put-u8 . bs2cd5) (put-string . bs2cd4) (put-datum . bs2cd3) (put-char . bs2cd2) (put-bytevector . bs2cd1) (port? . bs2cd0) (port-transcoder . bs2ccf) (port-position . bs2cce) (port-has-set-port-position!? . bs2ccd) (port-has-port-position? . bs2ccc) (port-eof? . bs2ccb) (output-port-buffer-mode . bs2cca) (open-string-output-port . bs2cc9) (open-string-input-port . bs2cc8) (open-file-output-port . bs2cc7) (open-file-input/output-port . bs2cc6) (open-file-input-port . bs2cc5) (open-bytevector-output-port . bs2cc4) (open-bytevector-input-port . bs2cc3) (native-transcoder . bs2cc2) (native-eol-style . bs2cc1) (make-transcoder . bs2cc0) (latin-1-codec . bs2cbf) (make-i/o-write-error . bs2cbe) (make-i/o-read-error . bs2cbd) (make-i/o-port-error . bs2cbc) (make-i/o-invalid-position-error . bs2cbb) (make-i/o-filename-error . bs2cba) (make-i/o-file-protection-error . bs2cb9) (make-i/o-file-is-read-only-error . bs2cb8) (make-i/o-file-does-not-exist-error . bs2cb7) (make-i/o-file-already-exists-error . bs2cb6) (make-i/o-error . bs2cb5) (make-i/o-encoding-error . bs2cb4) (make-i/o-decoding-error . bs2cb3) (make-custom-textual-output-port . bs2cb2) (make-custom-textual-input/output-port . bs2cb1) (make-custom-textual-input-port . bs2cb0) (make-custom-binary-output-port . bs2caf) (make-custom-binary-input/output-port . bs2cae) (make-custom-binary-input-port . bs2cad) (make-bytevector . bs2cac) (lookahead-u8 . bs2cab) (lookahead-char . bs2caa) (i/o-write-error? . bs2ca9) (i/o-read-error? . bs2ca8) (i/o-port-error? . bs2ca7) (i/o-invalid-position-error? . bs2ca6) (i/o-filename-error? . bs2ca5) (i/o-file-protection-error? . bs2ca4) (i/o-file-is-read-only-error? . bs2ca3) (i/o-file-does-not-exist-error? . bs2ca2) (i/o-file-already-exists-error? . bs2ca1) (i/o-error? . bs2ca0) (i/o-error-position . bs2c9f) (i/o-error-port . bs2c9e) (i/o-error-filename . bs2c9d) (i/o-encoding-error? . bs2c9c) (i/o-encoding-error-char . bs2c9b) (i/o-decoding-error? . bs2c9a) (get-u8 . bs2c99) (get-string-n! . bs2c98) (get-string-n . bs2c97) (get-string-all . bs2c96) (get-line . bs2c95) (get-datum . bs2c94) (get-char . bs2c93) (get-bytevector-some . bs2c92) (get-bytevector-n! . bs2c91) (get-bytevector-n . bs2c90) (get-bytevector-all . bs2c8f) (flush-output-port . bs2c8e) (close-port . bs2c8d) (scheme-report-environment . bse3a) (quotient . bs2c8c) (null-environment . bse38) (remainder . bs2c8b) (modulo . bs2c8a) (inexact->exact . bs2c89) (force . bs2c88) (exact->inexact . bs2c87) (make-promise . bs2c86) (exit . bs2c85) (command-line . bs2917) (string-fill! . bs2c84) (string-set! . bs2c83) (set-cdr! . bs2c82) (set-car! . bs2c81) (remove . bs2c80) (remv . bs2c7f) (remp . bs2c7e) (remq . bs2c7d) (partition . bs2c7c) (memv . bs2c7b) (memq . bs2c7a) (memp . bs2c79) (member . bs2c78) (exists . bs2c77) (for-all . bs2c76) (fold-right . bs2c75) (fold-left . bs2c74) (find . bs2c73) (filter . bs2c72) (cons* . bs2c71) (assv . bs2c70) (assq . bs2c6f) (assp . bs2c6e) (assoc . bs2c6d) (call-with-string-output-port . bs2c6c) (call-with-port . bs2c6b) (call-with-bytevector-output-port . bs2c6a) (bytevector->string . bs2c69) (buffer-mode? . bs2c68) (binary-port? . bs2c67) (with-exception-handler . bs2c66) (raise-continuable . bs2c65) (raise . bs2c64) (eval . bse3e) (environment . bse36) (make-enumeration . bs2c63) (enum-set=? . bs2c62) (enum-set-universe . bs2c61) (enum-set-union . bs2c60) (enum-set-subset? . bs2c5f) (enum-set-projection . bs2c5e) (enum-set-member? . bs2c5d) (enum-set-intersection . bs2c5c) (enum-set-indexer . bs2c5b) (enum-set-difference . bs2c5a) (enum-set-constructor . bs2c59) (enum-set-complement . bs2c58) (enum-set->list . bs2c57) (who-condition? . bs2c56) (warning? . bs2c55) (violation? . bs2c54) (undefined-violation? . bs2c53) (syntax-violation? . bs2c52) (syntax-violation-subform . bs2c51) (syntax-violation-form . bs2c50) (syntax-violation . bse5e) (simple-conditions . bs2c4f) (serious-condition? . bs2c4e) (non-continuable-violation? . bs2c4d) (message-condition? . bs2c4c) (make-who-condition . bs2c4b) (make-warning . bs2c4a) (make-violation . bs2c49) (make-undefined-violation . bs2c48) (make-syntax-violation . bs2c47) (make-serious-condition . bs2c46) (make-non-continuable-violation . bs2c45) (make-message-condition . bs2c44) (make-lexical-violation . bs2c43) (make-irritants-condition . bs2c42) (make-implementation-restriction-violation . bs2c41) (make-error . bs2c40) (make-assertion-violation . bs2c3f) (lexical-violation? . bs2c3e) (irritants-condition? . bs2c3d) (implementation-restriction-violation? . bs2c3c) (error? . bs2c3b) (condition-who . bs2c3a) (condition-predicate . bs2c39) (condition-message . bs2c38) (condition-irritants . bs2c37) (condition-accessor . bs2c36) (condition . bs2c35) (assertion-violation? . bs2c34) (condition? . bs2c33) (utf32->string . bs2c32) (utf16->string . bs2c31) (utf8->string . bs2c30) (uint-list->bytevector . bs2c2f) (u8-list->bytevector . bs2c2e) (string->utf8 . bs2c2d) (string->utf32 . bs2c2c) (string->utf16 . bs2c2b) (sint-list->bytevector . bs2c2a) (native-endianness . bs2c29) (bytevector? . bs2c28) (bytevector=? . bs2c27) (bytevector-uint-set! . bs2c26) (bytevector-uint-ref . bs2c25) (bytevector-u8-set! . bs2c24) (bytevector-u8-ref . bs2c23) (bytevector-u64-set! . bs2c22) (bytevector-u64-ref . bs2c21) (bytevector-u64-native-set! . bs2c20) (bytevector-u64-native-ref . bs2c1f) (bytevector-u32-set! . bs2c1e) (bytevector-u32-ref . bs2c1d) (bytevector-u32-native-set! . bs2c1c) (bytevector-u32-native-ref . bs2c1b) (bytevector-u16-set! . bs2c1a) (bytevector-u16-ref . bs2c19) (bytevector-u16-native-set! . bs2c18) (bytevector-u16-native-ref . bs2c17) (bytevector-sint-set! . bs2c16) (bytevector-sint-ref . bs2c15) (bytevector-s8-set! . bs2c14) (bytevector-s8-ref . bs2c13) (bytevector-s64-set! . bs2c12) (bytevector-s64-ref . bs2c11) (bytevector-s64-native-set! . bs2c10) (bytevector-s64-native-ref . bs2c0f) (bytevector-s32-set! . bs2c0e) (bytevector-s32-ref . bs2c0d) (bytevector-s32-native-set! . bs2c0c) (bytevector-s32-native-ref . bs2c0b) (bytevector-s16-set! . bs2c0a) (bytevector-s16-ref . bs2c09) (bytevector-s16-native-set! . bs2c08) (bytevector-s16-native-ref . bs2c07) (bytevector-length . bs2c06) (bytevector-ieee-single-ref . bs2c05) (bytevector-ieee-single-set! . bs2c04) (bytevector-ieee-single-native-set! . bs2c03) (bytevector-ieee-single-native-ref . bs2c02) (bytevector-ieee-double-set! . bs2c01) (bytevector-ieee-double-ref . bs2c00) (bytevector-ieee-double-native-set! . bs2bff) (bytevector-ieee-double-native-ref . bs2bfe) (bytevector-fill! . bs2bfd) (bytevector-copy! . bs2bfc) (bytevector-copy . bs2bfb) (bytevector->uint-list . bs2bfa) (bytevector->u8-list . bs2bf9) (bytevector->sint-list . bs2bf8) (no-nans-violation? . bs2bf7) (no-infinities-violation? . bs2bf6) (make-no-nans-violation . bs2bf5) (make-no-infinities-violation . bs2bf4) (real->flonum . bs2bf3) (flzero? . bs2bf2) (fltruncate . bs2bf1) (fltan . bs2bf0) (flsqrt . bs2bef) (flsin . bs2bee) (flround . bs2bed) (flpositive? . bs2bec) (flonum? . bs2beb) (flodd? . bs2bea) (flnumerator . bs2be9) (flnegative? . bs2be8) (flnan? . bs2be7) (flmod0 . bs2be6) (flmod . bs2be5) (flmin . bs2be4) (flmax . bs2be3) (fllog . bs2be2) (flinteger? . bs2be1) (flinfinite? . bs2be0) (flfloor . bs2bdf) (flfinite? . bs2bde) (flexpt . bs2bdd) (flexp . bs2bdc) (fleven? . bs2bdb) (fldiv0-and-mod0 . bs2bda) (fldiv0 . bs2bd9) (fldiv-and-mod . bs2bd8) (fldiv . bs2bd7) (fldenominator . bs2bd6) (flcos . bs2bd5) (flceiling . bs2bd4) (flatan . bs2bd3) (flasin . bs2bd2) (flacos . bs2bd1) (flabs . bs2bd0) (fl>? . bs2bcf) (fl>=? . bs2bce) (fl=? . bs2bcd) (fl<? . bs2bcc) (fl<=? . bs2bcb) (fl/ . bs2bca) (fl- . bs2bc9) (fl+ . bs2bc8) (fl* . bs2bc7) (fixnum->flonum . bs2bc6) (fxzero? . bs2bc5) (fxxor . bs2bc4) (fxrotate-bit-field . bs2bc3) (fxreverse-bit-field . bs2bc2) (fxpositive? . bs2bc1) (fxodd? . bs2bc0) (fxnot . bs2bbf) (fxnegative? . bs2bbe) (fxmod0 . bs2bbd) (fxmod . bs2bbc) (fxmin . bs2bbb) (fxmax . bs2bba) (fxlength . bs2bb9) (fxior . bs2bb8) (fxif . bs2bb7) (fxfirst-bit-set . bs2bb6) (fxeven? . bs2bb5) (fxdiv0-and-mod0 . bs2bb4) (fxdiv0 . bs2bb3) (fxdiv-and-mod . bs2bb2) (fxdiv . bs2bb1) (fxcopy-bit-field . bs2bb0) (fxcopy-bit . bs2baf) (fxbit-set? . bs2bae) (fxbit-field . bs2bad) (fxbit-count . bs2bac) (fxarithmetic-shift-right . bs2bab) (fxarithmetic-shift-left . bs2baa) (fxarithmetic-shift . bs2ba9) (fxand . bs2ba8) (fx>? . bs2ba7) (fx>=? . bs2ba6) (fx=? . bs2ba5) (fx<? . bs2ba4) (fx<=? . bs2ba3) (fx-/carry . bs2ba2) (fx- . bs2ba1) (fx+/carry . bs2ba0) (fx+ . bs2b9f) (fx*/carry . bs2b9e) (fx* . bs2b9d) (greatest-fixnum . bs2b9c) (least-fixnum . bs2b9b) (fixnum-width . bs2b9a) (fixnum? . bs2b99) (bitwise-rotate-bit-field . bs2b98) (bitwise-reverse-bit-field . bs2b97) (bitwise-length . bs2b96) (bitwise-if . bs2b95) (bitwise-first-bit-set . bs2b94) (bitwise-copy-bit-field . bs2b93) (bitwise-copy-bit . bs2b92) (bitwise-bit-set? . bs2b91) (bitwise-bit-field . bs2b90) (bitwise-bit-count . bs2b8f) (bitwise-xor . bs2b8e) (bitwise-ior . bs2b8d) (bitwise-and . bs2b8c) (bitwise-not . bs2b8b) (bitwise-arithmetic-shift-right . bs2b8a) (bitwise-arithmetic-shift-left . bs2b89) (bitwise-arithmetic-shift . bs2b88) (zero? . bs2b87) (vector? . bs2b86) (vector-set! . bs2b85) (vector-ref . bs2b84) (vector-map . bs2b83) (vector-length . bs2b82) (vector-for-each . bs2b81) (vector-fill! . bs2b80) (vector->list . bs2b7f) (vector . bs2b7e) (values . bs2b7d) (truncate . bs2b7c) (tan . bs2b7b) (symbol? . bs2b7a) (symbol=? . bs2b79) (symbol->string . bs2b78) (substring . bs2b77) (string? . bs2b76) (string>? . bs2b75) (string>=? . bs2b74) (string=? . bs2b73) (string<? . bs2b72) (string<=? . bs2b71) (string-ref . bs2b70) (string-length . bs2b6f) (string-for-each . bs2b6e) (string-copy . bs2b6d) (string-append . bs2b6c) (string->symbol . bs2b6b) (string->number . bs2b6a) (string->list . bs2b69) (string . bs2b68) (sqrt . bs2b67) (sin . bs2b66) (round . bs2b65) (reverse . bs2b64) (real? . bs2b63) (real-valued? . bs2b62) (real-part . bs2b61) (rationalize . bs2b60) (rational? . bs2b5f) (rational-valued? . bs2b5e) (procedure? . bs2b5d) (positive? . bs2b5c) (pair? . bs2b5b) (odd? . bs2b5a) (numerator . bs2b59) (number? . bs2b58) (number->string . bs2b57) (null? . bs2b56) (not . bs2b55) (negative? . bs2b54) (nan? . bs2b53) (min . bs2b52) (max . bs2b51) (map . bs2b50) (make-vector . bs2b4f) (make-string . bs2b4e) (make-rectangular . bs2b4d) (make-polar . bs2b4c) (magnitude . bs2b4b) (log . bs2b4a) (list? . bs2b49) (list-tail . bs2b48) (list-ref . bs2b47) (list->vector . bs2b46) (list->string . bs2b45) (list . bs2b44) (length . bs2b43) (lcm . bs2b42) (integer? . bs2b41) (integer-valued? . bs2b40) (integer->char . bs2b3f) (infinite? . bs2b3e) (inexact? . bs2b3d) (inexact . bs2b3c) (imag-part . bs2b3b) (gcd . bs2b3a) (for-each . bs2b39) (floor . bs2b38) (finite? . bs2b37) (expt . bs2b36) (exp . bs2b35) (exact? . bs2b34) (exact-integer-sqrt . bs2b33) (exact . bs2b32) (even? . bs2b31) (error . bs2b30) (eqv? . bs2b2f) (equal? . bs2b2e) (eq? . bs2b2d) (dynamic-wind . bs2b2c) (div0-and-mod0 . bs2b2b) (mod0 . bs2b2a) (div0 . bs2b29) (div-and-mod . bs2b28) (mod . bs2b27) (div . bs2b26) (denominator . bs2b25) (cos . bs2b24) (cons . bs2b23) (complex? . bs2b22) (char? . bs2b21) (char>? . bs2b20) (char>=? . bs2b1f) (char=? . bs2b1e) (char<? . bs2b1d) (char<=? . bs2b1c) (char->integer . bs2b1b) (ceiling . bs2b1a) (call-with-values . bs2b19) (call/cc . bs2b18) (call-with-current-continuation . bs2b17) (cddddr . bs2b16) (cdddar . bs2b15) (cddadr . bs2b14) (cddaar . bs2b13) (cdaddr . bs2b12) (cdadar . bs2b11) (cdaadr . bs2b10) (cdaaar . bs2b0f) (cadddr . bs2b0e) (caddar . bs2b0d) (cadadr . bs2b0c) (cadaar . bs2b0b) (caaddr . bs2b0a) (caadar . bs2b09) (caaadr . bs2b08) (caaaar . bs2b07) (cdddr . bs2b06) (cddar . bs2b05) (cdadr . bs2b04) (cdaar . bs2b03) (caddr . bs2b02) (cadar . bs2b01) (caadr . bs2b00) (caaar . bs2aff) (cddr . bs2afe) (cdar . bs2afd) (cadr . bs2afc) (caar . bs2afb) (cdr . bs2afa) (car . bs2af9) (boolean? . bs2af8) (boolean=? . bs2af7) (atan . bs2af6) (assertion-violation . bs2af5) (assertion-error . bse58) (asin . bs2af4) (apply . bs2af3) (append . bs2af2) (angle . bs2af1) (acos . bs2af0) (abs . bs2aef) (/ . bs2aee) (* . bs2aed) (- . bs2aec) (+ . bs2aeb) (>= . bs2aea) (> . bs2ae9) (= . bs2ae8) (<= . bs2ae7) (< . bs2ae6) (library . bs2ae5) (&no-nans . bs2ae4) (&no-infinities . bs2ae3) (&i/o-encoding . bs2ae2) (&i/o-decoding . bs2ae1) (&i/o-port . bs2ae0) (&i/o-file-does-not-exist . bs2adf) (&i/o-file-already-exists . bs2ade) (&i/o-file-is-read-only . bs2add) (&i/o-file-protection . bs2adc) (&i/o-filename . bs2adb) (&i/o-invalid-position . bs2ada) (&i/o-write . bs2ad9) (&i/o-read . bs2ad8) (&i/o . bs2ad7) (&undefined . bs2ad6) (&syntax . bs2ad5) (&lexical . bs2ad4) (&implementation-restriction . bs2ad3) (&non-continuable . bs2ad2) (&who . bs2ad1) (&irritants . bs2ad0) (&assertion . bs2acf) (&violation . bs2ace) (&error . bs2acd) (&serious . bs2acc) (&warning . bs2acb) (&message . bs2aca) (&condition . bs2ac9) (define-condition-type . bs2ac8) (define-enumeration . bs2ac7) (define-record-type . bs2ac6) (parent-rtd . bs2ac5) (nongenerative . bs2ac4) (opaque . bs2ac3) (sealed . bs2ac2) (protocol . bs2ac1) (parent . bs2ac0) (immutable . bs2abf) (mutable . bs2abe) (fields . bs2abd) (error-handling-mode . bs2abc) (file-options . bs2abb) (buffer-mode . bs2aba) (eol-style . bs2ab9) (guard . bs2ab8) (trace-define . bs2ab7) (trace-lambda . bs2ab6) (unsyntax-splicing . bs2ab5) (unsyntax . bs2ab4) (unquote-splicing . bs2ab3) (unquote . bs2ab2) (_ . bs2ab1) (else . bs2ab0) (=> . bs2aaf) (... . bs2aae) (assert . bs2aad) (endianness . bs2aac) (delay . bs2aab) (time . bs2aaa) (do . bs2aa9) (cond . bs2aa8) (let* . bs2aa7) (let*-values . bs2aa6) (let-values . bs2aa5) (identifier-syntax . bs2aa4) (with-syntax . bs2aa3) (quasisyntax . bs2aa2) (quasiquote . bs2aa1) (syntax-rules . bs2aa0) (include . bs2a9f) (define-struct . bs2a9e) (record-constructor-descriptor . bs2a9d) (record-type-descriptor . bs2a9c) (case . bs2a9b) (parameterize . bs2a9a) (unless . bs2a99) (when . bs2a98) (or . bs2a97) (and . bs2a96) (if . bs2a95) (let . bs2a94) (letrec* . bs2a93) (letrec . bs2a92) (type-descriptor . bs2a91) (case-lambda . bs2a90) (lambda . bs2a8f) (syntax . bs2a8e) (syntax-case . bs2a8d) (quote . bs2a8c) (foreign-call . bs2a8b) (letrec-syntax . bs2a8a) (let-syntax . bs2a89) (set! . bs2a88) (import . bs2a87) (begin . bs2a86) (module . bs2a85) (define-syntax . bs2a84) (define . bs2a83)) '((bs2e29 core-prim . &no-nans-rcd) (bs2e28 core-prim . &no-nans-rtd) (bs2e27 core-prim . &no-infinities-rcd) (bs2e26 core-prim . &no-infinities-rtd) (bs2e25 core-prim . &i/o-encoding-rcd) (bs2e24 core-prim . &i/o-encoding-rtd) (bs2e23 core-prim . &i/o-decoding-rcd) (bs2e22 core-prim . &i/o-decoding-rtd) (bs2e21 core-prim . &i/o-port-rcd) (bs2e20 core-prim . &i/o-port-rtd) (bs2e1f core-prim . &i/o-file-does-not-exist-rcd) (bs2e1e core-prim . &i/o-file-does-not-exist-rtd) (bs2e1d core-prim . &i/o-file-already-exists-rcd) (bs2e1c core-prim . &i/o-file-already-exists-rtd) (bs2e1b core-prim . &i/o-file-is-read-only-rcd) (bs2e1a core-prim . &i/o-file-is-read-only-rtd) (bs2e19 core-prim . &i/o-file-protection-rcd) (bs2e18 core-prim . &i/o-file-protection-rtd) (bs2e17 core-prim . &i/o-filename-rcd) (bs2e16 core-prim . &i/o-filename-rtd) (bs2e15 core-prim . &i/o-invalid-position-rcd) (bs2e14 core-prim . &i/o-invalid-position-rtd) (bs2e13 core-prim . &i/o-write-rcd) (bs2e12 core-prim . &i/o-write-rtd) (bs2e11 core-prim . &i/o-read-rcd) (bs2e10 core-prim . &i/o-read-rtd) (bs2e0f core-prim . &i/o-rcd) (bs2e0e core-prim . &i/o-rtd) (bs2e0d core-prim . &undefined-rcd) (bs2e0c core-prim . &undefined-rtd) (bs2e0b core-prim . &syntax-rcd) (bs2e0a core-prim . &syntax-rtd) (bs2e09 core-prim . &lexical-rcd) (bs2e08 core-prim . &lexical-rtd) (bs2e07 core-prim . &implementation-restriction-rcd) (bs2e06 core-prim . &implementation-restriction-rtd) (bs2e05 core-prim . &non-continuable-rcd) (bs2e04 core-prim . &non-continuable-rtd) (bs2e03 core-prim . &who-rcd) (bs2e02 core-prim . &who-rtd) (bs2e01 core-prim . &irritants-rcd) (bs2e00 core-prim . &irritants-rtd) (bs2dff core-prim . &assertion-rcd) (bs2dfe core-prim . &assertion-rtd) (bs2dfd core-prim . &violation-rcd) (bs2dfc core-prim . &violation-rtd) (bs2dfb core-prim . &error-rcd) (bs2dfa core-prim . &error-rtd) (bs2df9 core-prim . &serious-rcd) (bs2df8 core-prim . &serious-rtd) (bs2df7 core-prim . &warning-rcd) (bs2df6 core-prim . &warning-rtd) (bs2df5 core-prim . &message-rcd) (bs2df4 core-prim . &message-rtd) (bs2df3 core-prim . &condition-rcd) (bs2df2 core-prim . &condition-rtd) (bse5a core-prim . syntax-error) (bsd7e core-prim . syntax-dispatch) (bs2df1 core-prim . pretty-print) (bs2df0 core-prim . eval-core) (bs2def core-prim . set-symbol-value!) (bs2dee core-prim . symbol-value) (bs2ded core-prim . gensym) (bs2dec core-prim . void) (bs291d core-prim . load) (bse6c core-prim . interaction-environment) (bs2deb core-prim . char-ready?) (bs2dea core-prim . regexp?) (bs2de9 core-prim . read-line) (bs2de8 core-prim . gensym-prefix-set!) (bs2de7 core-prim . ungensym) (bs2de6 core-prim . alist->eq-hash-table) (bs2de5 core-prim . assoc-ref) (bs2de4 core-prim . print) (bs2de3 core-prim . format) (bs2de2 core-prim . host-os) (bs7bd core-prim . library-path) (bs2de1 core-prim . standard-library-path) (bs2de0 core-prim . ssl-supported?) (bs2ddf core-prim . ssl-socket?) (bs2dde core-prim . socket-sslize!) (bs2ddd core-prim . %monapi-name-whereis) (bs2ddc core-prim . %monapi-message-send) (bs2ddb core-prim . file-newer?) (bs2dda core-prim . stat-mtime) (bs2dd9 core-prim . write-to-file) (bs2dd8 core-prim . file->list) (bs2dd7 core-prim . file->string) (bs2dd6 core-prim . digit->integer) (bs2dd5 core-prim . call-with-string-input-port) (bs2dd4 core-prim . call-with-string-io) (bs2dd3 core-prim . string-split) (bs2dd2 core-prim . bytevector-for-each) (bs2dd1 core-prim . string->regexp) (bs2dd0 core-prim . rxmatch) (bs2dcf core-prim . regexp-replace-all) (bs2dce core-prim . hashtable-fold-left) (bs2dcd core-prim . hashtable-for-each) (bs5a7 core-prim . mosh-cache-dir) (bs2dcc core-prim . call-process) (bs2dcb core-prim . local-tz-offset) (bs2dca core-prim . microseconds) (bs2dc9 core-prim . directory-list) (bs2dc8 core-prim . set-current-directory!) (bs2dc7 core-prim . expand-path) (bs2dc6 core-prim . current-directory) (bs2dc5 core-prim . %spawn) (bs2dc4 core-prim . %waitpid) (bs2dc3 core-prim . simple-struct-name) (bs2dc2 core-prim . simple-struct-set!) (bs2dc1 core-prim . simple-struct-ref) (bs2dc0 core-prim . make-simple-struct) (bs2dbf core-prim . simple-struct?) (bs2dbe core-prim . pointer-ref-c-int64) (bs2dbd core-prim . pointer-ref-c-int32) (bs2dbc core-prim . pointer-ref-c-int16) (bs2dbb core-prim . pointer-ref-c-int8) (bs2dba core-prim . pointer-ref-c-uint64) (bs2db9 core-prim . pointer-ref-c-uint32) (bs2db8 core-prim . pointer-ref-c-uint16) (bs2db7 core-prim . pointer-ref-c-uint8) (bs2db6 core-prim . pointer-set-c-uint64!) (bs2db5 core-prim . pointer-set-c-uint32!) (bs2db4 core-prim . pointer-set-c-uint16!) (bs2db3 core-prim . pointer-set-c-uint8!) (bs2db2 core-prim . pointer-set-c-int64!) (bs2db1 core-prim . pointer-set-c-int32!) (bs2db0 core-prim . pointer-set-c-int16!) (bs2daf core-prim . pointer-set-c-int8!) (bs2dae core-prim . pointer-set-c-pointer!) (bs2dad core-prim . pointer-set-c-double!) (bs2dac core-prim . pointer-set-c-float!) (bs2dab core-prim . pointer-set-c-long-long!) (bs2daa core-prim . pointer-set-c-long!) (bs2da9 core-prim . pointer-set-c-int!) (bs2da8 core-prim . pointer-set-c-short!) (bs2da7 core-prim . pointer-set-c-char!) (bs2da6 core-prim . pointer-ref-c-pointer) (bs2da5 core-prim . pointer-ref-c-double) (bs2da4 core-prim . pointer-ref-c-float) (bs2da3 core-prim . pointer-ref-c-unsigned-long-long) (bs2da2 core-prim . pointer-ref-c-signed-long-long) (bs2da1 core-prim . pointer-ref-c-unsigned-long) (bs2da0 core-prim . pointer-ref-c-signed-long) (bs2d9f core-prim . pointer-ref-c-unsigned-int) (bs2d9e core-prim . pointer-ref-c-signed-int) (bs2d9d core-prim . pointer-ref-c-unsigned-short) (bs2d9c core-prim . pointer-ref-c-signed-short) (bs2d9b core-prim . pointer-ref-c-unsigned-char) (bs2d9a core-prim . pointer-ref-c-signed-char) (bs2d99 core-prim . pointer->integer) (bs2d98 core-prim . integer->pointer) (bs2d97 core-prim . pointer?) (bs2d96 core-prim . shared-errno) (bs2d95 core-prim . %ffi-free-c-callback-trampoline) (bs2d94 core-prim . %ffi-make-c-callback-trampoline) (bs2d93 core-prim . %ffi-free) (bs2d92 core-prim . %ffi-malloc) (bs2d91 core-prim . %ffi-supported?) (bs2d90 core-prim . %ffi-pointer->string) (bs2d8f core-prim . %ffi-call) (bs2d8e core-prim . %ffi-lookup) (bs2d8d core-prim . %ffi-open) (bs2d8c core-prim . null-terminated-utf8->string) (bs2d8b core-prim . null-terminated-bytevector->string) (bs2d8a core-prim . %exec) (bs2d89 core-prim . %fork) (bs2d88 core-prim . %pipe) (bs2d87 core-prim . p) (bs2d86 core-prim . open-output-string) (bs2d85 core-prim . get-output-string) (bs2d84 core-prim . file-stat-ctime) (bs2d83 core-prim . file-stat-atime) (bs2d82 core-prim . file-stat-mtime) (bs2d81 core-prim . file-size-in-bytes) (bs2d80 core-prim . file-writable?) (bs2d7f core-prim . file-executable?) (bs2d7e core-prim . file-readable?) (bs2d7d core-prim . file-regular?) (bs2d7c core-prim . file-symbolic-link?) (bs2d7b core-prim . file-directory?) (bs2d7a core-prim . create-symbolic-link) (bs2d79 core-prim . rename-file) (bs2d78 core-prim . delete-directory) (bs2d77 core-prim . create-directory) (bs2d76 core-prim . create-mosh-cache-dir) (bs2d75 core-prim . get-environment-variables) (bs2d74 core-prim . current-exception-handler) (bs2d73 core-prim . get-environment-variable) (bs2d72 core-prim . join-wraps) (bs2d71 core-prim . id->real-label) (bs2d70 core-prim . same-marks?) (bs2d6f core-prim . same-marks*?) (bs2d6e core-prim . get-timeofday) (bs2d6d core-prim . get-command-line) (bs2d6c core-prim . sys-display) (bs2d6b core-prim . whereis) (bs2d6a core-prim . register) (bs2d69 core-prim . vm-join!) (bs2d68 core-prim . vm-set-value!) (bs2d67 core-prim . vm?) (bs2d66 core-prim . main-vm?) (bs2d65 core-prim . vm-eval) (bs2d64 core-prim . vm-self) (bs2d63 core-prim . vm-start!) (bs2d62 core-prim . make-vm) (bs2d61 core-prim . mutex-try-lock!) (bs2d60 core-prim . mutex-unlock!) (bs2d5f core-prim . mutex-lock!) (bs2d5e core-prim . mutex?) (bs2d5d core-prim . make-mutex) (bs2d5c core-prim . condition-variable-notify-all!) (bs2d5b core-prim . condition-variable-notify!) (bs2d5a core-prim . condition-variable-wait!) (bs2d59 core-prim . make-condition-variable) (bs2d58 core-prim . write/ss) (bs2d57 core-prim . mosh-executable-path) (bs2d56 core-prim . make-file-options) (bs2d55 core-prim . source-info) (bs2d54 core-prim . make-compiler-instruction) (bs2d53 core-prim . make-instruction) (bs2d52 core-prim . set-source-info!) (bs2d51 core-prim . bignum?) (bs2d50 core-prim . fast-equal?) (bs2d4f core-prim . fasl-read) (bs2d4e core-prim . fasl-write) (bs2d4d core-prim . time-usage) (bs2d4c core-prim . os-constant) (bs2d4b core-prim . condition-printer) (bs2d4a core-prim . disasm) (bs5a5 core-prim . make-parameter) (bs2d49 core-prim . socket-port) (bs2d48 core-prim . socket-shutdown) (bs2d47 core-prim . socket-close) (bs2d46 core-prim . socket-send) (bs2d45 core-prim . socket-recv!) (bs2d44 core-prim . socket-recv) (bs2d43 core-prim . make-server-socket) (bs2d42 core-prim . make-client-socket) (bs2d41 core-prim . socket-accept) (bs2d40 core-prim . socket?) (bs2d3f core-prim . string-upcase) (bs2d3e core-prim . string-titlecase) (bs2d3d core-prim . string-normalize-nfkd) (bs2d3c core-prim . string-normalize-nfkc) (bs2d3b core-prim . string-normalize-nfd) (bs2d3a core-prim . string-normalize-nfc) (bs2d39 core-prim . string-foldcase) (bs2d38 core-prim . string-downcase) (bs2d37 core-prim . string-ci>?) (bs2d36 core-prim . string-ci>=?) (bs2d35 core-prim . string-ci=?) (bs2d34 core-prim . string-ci<?) (bs2d33 core-prim . string-ci<=?) (bs2d32 core-prim . char-whitespace?) (bs2d31 core-prim . char-upper-case?) (bs2d30 core-prim . char-title-case?) (bs2d2f core-prim . char-numeric?) (bs2d2e core-prim . char-lower-case?) (bs2d2d core-prim . char-general-category) (bs2d2c core-prim . char-upcase) (bs2d2b core-prim . char-titlecase) (bs2d2a core-prim . char-foldcase) (bs2d29 core-prim . char-downcase) (bs2d28 core-prim . char-ci>?) (bs2d27 core-prim . char-ci>=?) (bs2d26 core-prim . char-ci=?) (bs2d25 core-prim . char-ci<?) (bs2d24 core-prim . char-ci<=?) (bs2d23 core-prim . char-alphabetic?) (bsba9 core-prim . make-variable-transformer) (bse60 core-prim . identifier?) (bse4c core-prim . generate-temporaries) (bse4e core-prim . free-identifier=?) (bse64 core-prim . syntax->datum) (bse62 core-prim . datum->syntax) (bse50 core-prim . bound-identifier=?) (bs2d22 core-prim . record-type-descriptor?) (bs2d21 core-prim . record-predicate) (bs2d20 core-prim . record-mutator) (bs2d1f core-prim . record-constructor) (bs2d1e core-prim . record-accessor) (bs2d1d core-prim . make-record-type-descriptor) (bs2d1c core-prim . make-record-constructor-descriptor) (bs2d1b core-prim . record?) (bs2d1a core-prim . record-type-uid) (bs2d19 core-prim . record-type-sealed?) (bs2d18 core-prim . record-type-parent) (bs2d17 core-prim . record-type-opaque?) (bs2d16 core-prim . record-type-name) (bs2d15 core-prim . record-type-generative?) (bs2d14 core-prim . record-type-field-names) (bs2d13 core-prim . record-rtd) (bs2d12 core-prim . record-field-mutable?) (bs2d11 core-prim . delete-file) (bs2d10 core-prim . file-exists?) (bs2d0f core-prim . vector-sort!) (bs2d0e core-prim . vector-sort) (bs2d0d core-prim . list-sort) (bs2d0c core-prim . symbol-hash) (bs2d0b core-prim . string-ci-hash) (bs2d0a core-prim . string-hash) (bs2d09 core-prim . equal-hash) (bs2d08 core-prim . hashtable-equivalence-function) (bs2d07 core-prim . make-hashtable) (bs2d06 core-prim . hashtable-hash-function) (bs2d05 core-prim . make-eqv-hashtable) (bs2d04 core-prim . make-eq-hashtable) (bs2d03 core-prim . hashtable?) (bs2d02 core-prim . hashtable-update!) (bs2d01 core-prim . hashtable-size) (bs2d00 core-prim . hashtable-set!) (bs2cff core-prim . hashtable-ref) (bs2cfe core-prim . hashtable-mutable?) (bs2cfd core-prim . hashtable-keys) (bs2cfc core-prim . hashtable-entries) (bs2cfb core-prim . hashtable-delete!) (bs2cfa core-prim . hashtable-copy) (bs2cf9 core-prim . hashtable-contains?) (bs2cf8 core-prim . hashtable-clear!) (bs2cf7 core-prim . call-with-output-file) (bs2cf6 core-prim . call-with-input-file) (bs2cf5 core-prim . write-char) (bs2cf4 core-prim . write) (bs2cf3 core-prim . with-output-to-file) (bs2cf2 core-prim . with-input-from-file) (bs2cf1 core-prim . read-char) (bs2cf0 core-prim . read) (bs2cef core-prim . peek-char) (bs2cee core-prim . open-output-file) (bs2ced core-prim . open-input-file) (bs2cec core-prim . newline) (bs2ceb core-prim . display) (bs2cea core-prim . close-output-port) (bs2ce9 core-prim . close-input-port) (bs2ce8 core-prim . eof-object?) (bs2ce7 core-prim . eof-object) (bs2ce6 core-prim . current-error-port) (bs2ce5 core-prim . current-output-port) (bs2ce4 core-prim . current-input-port) (bs2ce3 core-prim . output-port?) (bs2ce2 core-prim . input-port?) (bs2ce1 core-prim . utf-8-codec) (bs2ce0 core-prim . utf-16-codec) (bs2cdf core-prim . transcoder-error-handling-mode) (bs2cde core-prim . transcoder-eol-style) (bs2cdd core-prim . transcoder-codec) (bs2cdc core-prim . transcoded-port) (bs2cdb core-prim . textual-port?) (bs2cda core-prim . string->bytevector) (bs2cd9 core-prim . standard-output-port) (bs2cd8 core-prim . standard-input-port) (bs2cd7 core-prim . standard-error-port) (bs2cd6 core-prim . set-port-position!) (bs2cd5 core-prim . put-u8) (bs2cd4 core-prim . put-string) (bs2cd3 core-prim . put-datum) (bs2cd2 core-prim . put-char) (bs2cd1 core-prim . put-bytevector) (bs2cd0 core-prim . port?) (bs2ccf core-prim . port-transcoder) (bs2cce core-prim . port-position) (bs2ccd core-prim . port-has-set-port-position!?) (bs2ccc core-prim . port-has-port-position?) (bs2ccb core-prim . port-eof?) (bs2cca core-prim . output-port-buffer-mode) (bs2cc9 core-prim . open-string-output-port) (bs2cc8 core-prim . open-string-input-port) (bs2cc7 core-prim . open-file-output-port) (bs2cc6 core-prim . open-file-input/output-port) (bs2cc5 core-prim . open-file-input-port) (bs2cc4 core-prim . open-bytevector-output-port) (bs2cc3 core-prim . open-bytevector-input-port) (bs2cc2 core-prim . native-transcoder) (bs2cc1 core-prim . native-eol-style) (bs2cc0 core-prim . make-transcoder) (bs2cbf core-prim . latin-1-codec) (bs2cbe core-prim . make-i/o-write-error) (bs2cbd core-prim . make-i/o-read-error) (bs2cbc core-prim . make-i/o-port-error) (bs2cbb core-prim . make-i/o-invalid-position-error) (bs2cba core-prim . make-i/o-filename-error) (bs2cb9 core-prim . make-i/o-file-protection-error) (bs2cb8 core-prim . make-i/o-file-is-read-only-error) (bs2cb7 core-prim . make-i/o-file-does-not-exist-error) (bs2cb6 core-prim . make-i/o-file-already-exists-error) (bs2cb5 core-prim . make-i/o-error) (bs2cb4 core-prim . make-i/o-encoding-error) (bs2cb3 core-prim . make-i/o-decoding-error) (bs2cb2 core-prim . make-custom-textual-output-port) (bs2cb1 core-prim . make-custom-textual-input/output-port) (bs2cb0 core-prim . make-custom-textual-input-port) (bs2caf core-prim . make-custom-binary-output-port) (bs2cae core-prim . make-custom-binary-input/output-port) (bs2cad core-prim . make-custom-binary-input-port) (bs2cac core-prim . make-bytevector) (bs2cab core-prim . lookahead-u8) (bs2caa core-prim . lookahead-char) (bs2ca9 core-prim . i/o-write-error?) (bs2ca8 core-prim . i/o-read-error?) (bs2ca7 core-prim . i/o-port-error?) (bs2ca6 core-prim . i/o-invalid-position-error?) (bs2ca5 core-prim . i/o-filename-error?) (bs2ca4 core-prim . i/o-file-protection-error?) (bs2ca3 core-prim . i/o-file-is-read-only-error?) (bs2ca2 core-prim . i/o-file-does-not-exist-error?) (bs2ca1 core-prim . i/o-file-already-exists-error?) (bs2ca0 core-prim . i/o-error?) (bs2c9f core-prim . i/o-error-position) (bs2c9e core-prim . i/o-error-port) (bs2c9d core-prim . i/o-error-filename) (bs2c9c core-prim . i/o-encoding-error?) (bs2c9b core-prim . i/o-encoding-error-char) (bs2c9a core-prim . i/o-decoding-error?) (bs2c99 core-prim . get-u8) (bs2c98 core-prim . get-string-n!) (bs2c97 core-prim . get-string-n) (bs2c96 core-prim . get-string-all) (bs2c95 core-prim . get-line) (bs2c94 core-prim . get-datum) (bs2c93 core-prim . get-char) (bs2c92 core-prim . get-bytevector-some) (bs2c91 core-prim . get-bytevector-n!) (bs2c90 core-prim . get-bytevector-n) (bs2c8f core-prim . get-bytevector-all) (bs2c8e core-prim . flush-output-port) (bs2c8d core-prim . close-port) (bse3a core-prim . scheme-report-environment) (bs2c8c core-prim . quotient) (bse38 core-prim . null-environment) (bs2c8b core-prim . remainder) (bs2c8a core-prim . modulo) (bs2c89 core-prim . inexact->exact) (bs2c88 core-prim . force) (bs2c87 core-prim . exact->inexact) (bs2c86 core-prim . make-promise) (bs2c85 core-prim . exit) (bs2917 core-prim . command-line) (bs2c84 core-prim . string-fill!) (bs2c83 core-prim . string-set!) (bs2c82 core-prim . set-cdr!) (bs2c81 core-prim . set-car!) (bs2c80 core-prim . remove) (bs2c7f core-prim . remv) (bs2c7e core-prim . remp) (bs2c7d core-prim . remq) (bs2c7c core-prim . partition) (bs2c7b core-prim . memv) (bs2c7a core-prim . memq) (bs2c79 core-prim . memp) (bs2c78 core-prim . member) (bs2c77 core-prim . exists) (bs2c76 core-prim . for-all) (bs2c75 core-prim . fold-right) (bs2c74 core-prim . fold-left) (bs2c73 core-prim . find) (bs2c72 core-prim . filter) (bs2c71 core-prim . cons*) (bs2c70 core-prim . assv) (bs2c6f core-prim . assq) (bs2c6e core-prim . assp) (bs2c6d core-prim . assoc) (bs2c6c core-prim . call-with-string-output-port) (bs2c6b core-prim . call-with-port) (bs2c6a core-prim . call-with-bytevector-output-port) (bs2c69 core-prim . bytevector->string) (bs2c68 core-prim . buffer-mode?) (bs2c67 core-prim . binary-port?) (bs2c66 core-prim . with-exception-handler) (bs2c65 core-prim . raise-continuable) (bs2c64 core-prim . raise) (bse3e core-prim . eval) (bse36 core-prim . environment) (bs2c63 core-prim . make-enumeration) (bs2c62 core-prim . enum-set=?) (bs2c61 core-prim . enum-set-universe) (bs2c60 core-prim . enum-set-union) (bs2c5f core-prim . enum-set-subset?) (bs2c5e core-prim . enum-set-projection) (bs2c5d core-prim . enum-set-member?) (bs2c5c core-prim . enum-set-intersection) (bs2c5b core-prim . enum-set-indexer) (bs2c5a core-prim . enum-set-difference) (bs2c59 core-prim . enum-set-constructor) (bs2c58 core-prim . enum-set-complement) (bs2c57 core-prim . enum-set->list) (bs2c56 core-prim . who-condition?) (bs2c55 core-prim . warning?) (bs2c54 core-prim . violation?) (bs2c53 core-prim . undefined-violation?) (bs2c52 core-prim . syntax-violation?) (bs2c51 core-prim . syntax-violation-subform) (bs2c50 core-prim . syntax-violation-form) (bse5e core-prim . syntax-violation) (bs2c4f core-prim . simple-conditions) (bs2c4e core-prim . serious-condition?) (bs2c4d core-prim . non-continuable-violation?) (bs2c4c core-prim . message-condition?) (bs2c4b core-prim . make-who-condition) (bs2c4a core-prim . make-warning) (bs2c49 core-prim . make-violation) (bs2c48 core-prim . make-undefined-violation) (bs2c47 core-prim . make-syntax-violation) (bs2c46 core-prim . make-serious-condition) (bs2c45 core-prim . make-non-continuable-violation) (bs2c44 core-prim . make-message-condition) (bs2c43 core-prim . make-lexical-violation) (bs2c42 core-prim . make-irritants-condition) (bs2c41 core-prim . make-implementation-restriction-violation) (bs2c40 core-prim . make-error) (bs2c3f core-prim . make-assertion-violation) (bs2c3e core-prim . lexical-violation?) (bs2c3d core-prim . irritants-condition?) (bs2c3c core-prim . implementation-restriction-violation?) (bs2c3b core-prim . error?) (bs2c3a core-prim . condition-who) (bs2c39 core-prim . condition-predicate) (bs2c38 core-prim . condition-message) (bs2c37 core-prim . condition-irritants) (bs2c36 core-prim . condition-accessor) (bs2c35 core-prim . condition) (bs2c34 core-prim . assertion-violation?) (bs2c33 core-prim . condition?) (bs2c32 core-prim . utf32->string) (bs2c31 core-prim . utf16->string) (bs2c30 core-prim . utf8->string) (bs2c2f core-prim . uint-list->bytevector) (bs2c2e core-prim . u8-list->bytevector) (bs2c2d core-prim . string->utf8) (bs2c2c core-prim . string->utf32) (bs2c2b core-prim . string->utf16) (bs2c2a core-prim . sint-list->bytevector) (bs2c29 core-prim . native-endianness) (bs2c28 core-prim . bytevector?) (bs2c27 core-prim . bytevector=?) (bs2c26 core-prim . bytevector-uint-set!) (bs2c25 core-prim . bytevector-uint-ref) (bs2c24 core-prim . bytevector-u8-set!) (bs2c23 core-prim . bytevector-u8-ref) (bs2c22 core-prim . bytevector-u64-set!) (bs2c21 core-prim . bytevector-u64-ref) (bs2c20 core-prim . bytevector-u64-native-set!) (bs2c1f core-prim . bytevector-u64-native-ref) (bs2c1e core-prim . bytevector-u32-set!) (bs2c1d core-prim . bytevector-u32-ref) (bs2c1c core-prim . bytevector-u32-native-set!) (bs2c1b core-prim . bytevector-u32-native-ref) (bs2c1a core-prim . bytevector-u16-set!) (bs2c19 core-prim . bytevector-u16-ref) (bs2c18 core-prim . bytevector-u16-native-set!) (bs2c17 core-prim . bytevector-u16-native-ref) (bs2c16 core-prim . bytevector-sint-set!) (bs2c15 core-prim . bytevector-sint-ref) (bs2c14 core-prim . bytevector-s8-set!) (bs2c13 core-prim . bytevector-s8-ref) (bs2c12 core-prim . bytevector-s64-set!) (bs2c11 core-prim . bytevector-s64-ref) (bs2c10 core-prim . bytevector-s64-native-set!) (bs2c0f core-prim . bytevector-s64-native-ref) (bs2c0e core-prim . bytevector-s32-set!) (bs2c0d core-prim . bytevector-s32-ref) (bs2c0c core-prim . bytevector-s32-native-set!) (bs2c0b core-prim . bytevector-s32-native-ref) (bs2c0a core-prim . bytevector-s16-set!) (bs2c09 core-prim . bytevector-s16-ref) (bs2c08 core-prim . bytevector-s16-native-set!) (bs2c07 core-prim . bytevector-s16-native-ref) (bs2c06 core-prim . bytevector-length) (bs2c05 core-prim . bytevector-ieee-single-ref) (bs2c04 core-prim . bytevector-ieee-single-set!) (bs2c03 core-prim . bytevector-ieee-single-native-set!) (bs2c02 core-prim . bytevector-ieee-single-native-ref) (bs2c01 core-prim . bytevector-ieee-double-set!) (bs2c00 core-prim . bytevector-ieee-double-ref) (bs2bff core-prim . bytevector-ieee-double-native-set!) (bs2bfe core-prim . bytevector-ieee-double-native-ref) (bs2bfd core-prim . bytevector-fill!) (bs2bfc core-prim . bytevector-copy!) (bs2bfb core-prim . bytevector-copy) (bs2bfa core-prim . bytevector->uint-list) (bs2bf9 core-prim . bytevector->u8-list) (bs2bf8 core-prim . bytevector->sint-list) (bs2bf7 core-prim . no-nans-violation?) (bs2bf6 core-prim . no-infinities-violation?) (bs2bf5 core-prim . make-no-nans-violation) (bs2bf4 core-prim . make-no-infinities-violation) (bs2bf3 core-prim . real->flonum) (bs2bf2 core-prim . flzero?) (bs2bf1 core-prim . fltruncate) (bs2bf0 core-prim . fltan) (bs2bef core-prim . flsqrt) (bs2bee core-prim . flsin) (bs2bed core-prim . flround) (bs2bec core-prim . flpositive?) (bs2beb core-prim . flonum?) (bs2bea core-prim . flodd?) (bs2be9 core-prim . flnumerator) (bs2be8 core-prim . flnegative?) (bs2be7 core-prim . flnan?) (bs2be6 core-prim . flmod0) (bs2be5 core-prim . flmod) (bs2be4 core-prim . flmin) (bs2be3 core-prim . flmax) (bs2be2 core-prim . fllog) (bs2be1 core-prim . flinteger?) (bs2be0 core-prim . flinfinite?) (bs2bdf core-prim . flfloor) (bs2bde core-prim . flfinite?) (bs2bdd core-prim . flexpt) (bs2bdc core-prim . flexp) (bs2bdb core-prim . fleven?) (bs2bda core-prim . fldiv0-and-mod0) (bs2bd9 core-prim . fldiv0) (bs2bd8 core-prim . fldiv-and-mod) (bs2bd7 core-prim . fldiv) (bs2bd6 core-prim . fldenominator) (bs2bd5 core-prim . flcos) (bs2bd4 core-prim . flceiling) (bs2bd3 core-prim . flatan) (bs2bd2 core-prim . flasin) (bs2bd1 core-prim . flacos) (bs2bd0 core-prim . flabs) (bs2bcf core-prim . fl>?) (bs2bce core-prim . fl>=?) (bs2bcd core-prim . fl=?) (bs2bcc core-prim . fl<?) (bs2bcb core-prim . fl<=?) (bs2bca core-prim . fl/) (bs2bc9 core-prim . fl-) (bs2bc8 core-prim . fl+) (bs2bc7 core-prim . fl*) (bs2bc6 core-prim . fixnum->flonum) (bs2bc5 core-prim . fxzero?) (bs2bc4 core-prim . fxxor) (bs2bc3 core-prim . fxrotate-bit-field) (bs2bc2 core-prim . fxreverse-bit-field) (bs2bc1 core-prim . fxpositive?) (bs2bc0 core-prim . fxodd?) (bs2bbf core-prim . fxnot) (bs2bbe core-prim . fxnegative?) (bs2bbd core-prim . fxmod0) (bs2bbc core-prim . fxmod) (bs2bbb core-prim . fxmin) (bs2bba core-prim . fxmax) (bs2bb9 core-prim . fxlength) (bs2bb8 core-prim . fxior) (bs2bb7 core-prim . fxif) (bs2bb6 core-prim . fxfirst-bit-set) (bs2bb5 core-prim . fxeven?) (bs2bb4 core-prim . fxdiv0-and-mod0) (bs2bb3 core-prim . fxdiv0) (bs2bb2 core-prim . fxdiv-and-mod) (bs2bb1 core-prim . fxdiv) (bs2bb0 core-prim . fxcopy-bit-field) (bs2baf core-prim . fxcopy-bit) (bs2bae core-prim . fxbit-set?) (bs2bad core-prim . fxbit-field) (bs2bac core-prim . fxbit-count) (bs2bab core-prim . fxarithmetic-shift-right) (bs2baa core-prim . fxarithmetic-shift-left) (bs2ba9 core-prim . fxarithmetic-shift) (bs2ba8 core-prim . fxand) (bs2ba7 core-prim . fx>?) (bs2ba6 core-prim . fx>=?) (bs2ba5 core-prim . fx=?) (bs2ba4 core-prim . fx<?) (bs2ba3 core-prim . fx<=?) (bs2ba2 core-prim . fx-/carry) (bs2ba1 core-prim . fx-) (bs2ba0 core-prim . fx+/carry) (bs2b9f core-prim . fx+) (bs2b9e core-prim . fx*/carry) (bs2b9d core-prim . fx*) (bs2b9c core-prim . greatest-fixnum) (bs2b9b core-prim . least-fixnum) (bs2b9a core-prim . fixnum-width) (bs2b99 core-prim . fixnum?) (bs2b98 core-prim . bitwise-rotate-bit-field) (bs2b97 core-prim . bitwise-reverse-bit-field) (bs2b96 core-prim . bitwise-length) (bs2b95 core-prim . bitwise-if) (bs2b94 core-prim . bitwise-first-bit-set) (bs2b93 core-prim . bitwise-copy-bit-field) (bs2b92 core-prim . bitwise-copy-bit) (bs2b91 core-prim . bitwise-bit-set?) (bs2b90 core-prim . bitwise-bit-field) (bs2b8f core-prim . bitwise-bit-count) (bs2b8e core-prim . bitwise-xor) (bs2b8d core-prim . bitwise-ior) (bs2b8c core-prim . bitwise-and) (bs2b8b core-prim . bitwise-not) (bs2b8a core-prim . bitwise-arithmetic-shift-right) (bs2b89 core-prim . bitwise-arithmetic-shift-left) (bs2b88 core-prim . bitwise-arithmetic-shift) (bs2b87 core-prim . zero?) (bs2b86 core-prim . vector?) (bs2b85 core-prim . vector-set!) (bs2b84 core-prim . vector-ref) (bs2b83 core-prim . vector-map) (bs2b82 core-prim . vector-length) (bs2b81 core-prim . vector-for-each) (bs2b80 core-prim . vector-fill!) (bs2b7f core-prim . vector->list) (bs2b7e core-prim . vector) (bs2b7d core-prim . values) (bs2b7c core-prim . truncate) (bs2b7b core-prim . tan) (bs2b7a core-prim . symbol?) (bs2b79 core-prim . symbol=?) (bs2b78 core-prim . symbol->string) (bs2b77 core-prim . substring) (bs2b76 core-prim . string?) (bs2b75 core-prim . string>?) (bs2b74 core-prim . string>=?) (bs2b73 core-prim . string=?) (bs2b72 core-prim . string<?) (bs2b71 core-prim . string<=?) (bs2b70 core-prim . string-ref) (bs2b6f core-prim . string-length) (bs2b6e core-prim . string-for-each) (bs2b6d core-prim . string-copy) (bs2b6c core-prim . string-append) (bs2b6b core-prim . string->symbol) (bs2b6a core-prim . string->number) (bs2b69 core-prim . string->list) (bs2b68 core-prim . string) (bs2b67 core-prim . sqrt) (bs2b66 core-prim . sin) (bs2b65 core-prim . round) (bs2b64 core-prim . reverse) (bs2b63 core-prim . real?) (bs2b62 core-prim . real-valued?) (bs2b61 core-prim . real-part) (bs2b60 core-prim . rationalize) (bs2b5f core-prim . rational?) (bs2b5e core-prim . rational-valued?) (bs2b5d core-prim . procedure?) (bs2b5c core-prim . positive?) (bs2b5b core-prim . pair?) (bs2b5a core-prim . odd?) (bs2b59 core-prim . numerator) (bs2b58 core-prim . number?) (bs2b57 core-prim . number->string) (bs2b56 core-prim . null?) (bs2b55 core-prim . not) (bs2b54 core-prim . negative?) (bs2b53 core-prim . nan?) (bs2b52 core-prim . min) (bs2b51 core-prim . max) (bs2b50 core-prim . map) (bs2b4f core-prim . make-vector) (bs2b4e core-prim . make-string) (bs2b4d core-prim . make-rectangular) (bs2b4c core-prim . make-polar) (bs2b4b core-prim . magnitude) (bs2b4a core-prim . log) (bs2b49 core-prim . list?) (bs2b48 core-prim . list-tail) (bs2b47 core-prim . list-ref) (bs2b46 core-prim . list->vector) (bs2b45 core-prim . list->string) (bs2b44 core-prim . list) (bs2b43 core-prim . length) (bs2b42 core-prim . lcm) (bs2b41 core-prim . integer?) (bs2b40 core-prim . integer-valued?) (bs2b3f core-prim . integer->char) (bs2b3e core-prim . infinite?) (bs2b3d core-prim . inexact?) (bs2b3c core-prim . inexact) (bs2b3b core-prim . imag-part) (bs2b3a core-prim . gcd) (bs2b39 core-prim . for-each) (bs2b38 core-prim . floor) (bs2b37 core-prim . finite?) (bs2b36 core-prim . expt) (bs2b35 core-prim . exp) (bs2b34 core-prim . exact?) (bs2b33 core-prim . exact-integer-sqrt) (bs2b32 core-prim . exact) (bs2b31 core-prim . even?) (bs2b30 core-prim . error) (bs2b2f core-prim . eqv?) (bs2b2e core-prim . equal?) (bs2b2d core-prim . eq?) (bs2b2c core-prim . dynamic-wind) (bs2b2b core-prim . div0-and-mod0) (bs2b2a core-prim . mod0) (bs2b29 core-prim . div0) (bs2b28 core-prim . div-and-mod) (bs2b27 core-prim . mod) (bs2b26 core-prim . div) (bs2b25 core-prim . denominator) (bs2b24 core-prim . cos) (bs2b23 core-prim . cons) (bs2b22 core-prim . complex?) (bs2b21 core-prim . char?) (bs2b20 core-prim . char>?) (bs2b1f core-prim . char>=?) (bs2b1e core-prim . char=?) (bs2b1d core-prim . char<?) (bs2b1c core-prim . char<=?) (bs2b1b core-prim . char->integer) (bs2b1a core-prim . ceiling) (bs2b19 core-prim . call-with-values) (bs2b18 core-prim . call/cc) (bs2b17 core-prim . call-with-current-continuation) (bs2b16 core-prim . cddddr) (bs2b15 core-prim . cdddar) (bs2b14 core-prim . cddadr) (bs2b13 core-prim . cddaar) (bs2b12 core-prim . cdaddr) (bs2b11 core-prim . cdadar) (bs2b10 core-prim . cdaadr) (bs2b0f core-prim . cdaaar) (bs2b0e core-prim . cadddr) (bs2b0d core-prim . caddar) (bs2b0c core-prim . cadadr) (bs2b0b core-prim . cadaar) (bs2b0a core-prim . caaddr) (bs2b09 core-prim . caadar) (bs2b08 core-prim . caaadr) (bs2b07 core-prim . caaaar) (bs2b06 core-prim . cdddr) (bs2b05 core-prim . cddar) (bs2b04 core-prim . cdadr) (bs2b03 core-prim . cdaar) (bs2b02 core-prim . caddr) (bs2b01 core-prim . cadar) (bs2b00 core-prim . caadr) (bs2aff core-prim . caaar) (bs2afe core-prim . cddr) (bs2afd core-prim . cdar) (bs2afc core-prim . cadr) (bs2afb core-prim . caar) (bs2afa core-prim . cdr) (bs2af9 core-prim . car) (bs2af8 core-prim . boolean?) (bs2af7 core-prim . boolean=?) (bs2af6 core-prim . atan) (bs2af5 core-prim . assertion-violation) (bse58 core-prim . assertion-error) (bs2af4 core-prim . asin) (bs2af3 core-prim . apply) (bs2af2 core-prim . append) (bs2af1 core-prim . angle) (bs2af0 core-prim . acos) (bs2aef core-prim . abs) (bs2aee core-prim . /) (bs2aed core-prim . *) (bs2aec core-prim . -) (bs2aeb core-prim . +) (bs2aea core-prim . >=) (bs2ae9 core-prim . >) (bs2ae8 core-prim . =) (bs2ae7 core-prim . <=) (bs2ae6 core-prim . <) (bs2ae5 core-prim . library) (bs2ae4 $core-rtd &no-nans-rtd &no-nans-rcd) (bs2ae3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (bs2ae2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bs2ae1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bs2ae0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (bs2adf $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bs2ade $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bs2add $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bs2adc $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bs2adb $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bs2ada $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bs2ad9 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bs2ad8 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bs2ad7 $core-rtd &i/o-rtd &i/o-rcd) (bs2ad6 $core-rtd &undefined-rtd &undefined-rcd) (bs2ad5 $core-rtd &syntax-rtd &syntax-rcd) (bs2ad4 $core-rtd &lexical-rtd &lexical-rcd) (bs2ad3 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bs2ad2 $core-rtd &non-continuable-rtd &non-continuable-rcd) (bs2ad1 $core-rtd &who-rtd &who-rcd) (bs2ad0 $core-rtd &irritants-rtd &irritants-rcd) (bs2acf $core-rtd &assertion-rtd &assertion-rcd) (bs2ace $core-rtd &violation-rtd &violation-rcd) (bs2acd $core-rtd &error-rtd &error-rcd) (bs2acc $core-rtd &serious-rtd &serious-rcd) (bs2acb $core-rtd &warning-rtd &warning-rcd) (bs2aca $core-rtd &message-rtd &message-rcd) (bs2ac9 $core-rtd &condition-rtd &condition-rcd) (bs2ac8 macro . define-condition-type) (bs2ac7 macro . define-enumeration) (bs2ac6 macro . define-record-type) (bs2ac5 macro . parent-rtd) (bs2ac4 macro . nongenerative) (bs2ac3 macro . opaque) (bs2ac2 macro . sealed) (bs2ac1 macro . protocol) (bs2ac0 macro . parent) (bs2abf macro . immutable) (bs2abe macro . mutable) (bs2abd macro . fields) (bs2abc macro . error-handling-mode) (bs2abb macro . file-options) (bs2aba macro . buffer-mode) (bs2ab9 macro . eol-style) (bs2ab8 macro . guard) (bs2ab7 macro . trace-define) (bs2ab6 macro . trace-lambda) (bs2ab5 macro . unsyntax-splicing) (bs2ab4 macro . unsyntax) (bs2ab3 macro . unquote-splicing) (bs2ab2 macro . unquote) (bs2ab1 macro . _) (bs2ab0 macro . else) (bs2aaf macro . =>) (bs2aae macro . ...) (bs2aad macro . assert) (bs2aac macro . endianness) (bs2aab macro . delay) (bs2aaa macro . time) (bs2aa9 macro . do) (bs2aa8 macro . cond) (bs2aa7 macro . let*) (bs2aa6 macro . let*-values) (bs2aa5 macro . let-values) (bs2aa4 macro . identifier-syntax) (bs2aa3 macro . with-syntax) (bs2aa2 macro . quasisyntax) (bs2aa1 macro . quasiquote) (bs2aa0 macro . syntax-rules) (bs2a9f macro . include) (bs2a9e macro . define-struct) (bs2a9d core-macro . record-constructor-descriptor) (bs2a9c core-macro . record-type-descriptor) (bs2a9b macro . case) (bs2a9a macro . parameterize) (bs2a99 macro . unless) (bs2a98 macro . when) (bs2a97 core-macro . or) (bs2a96 core-macro . and) (bs2a95 core-macro . if) (bs2a94 core-macro . let) (bs2a93 core-macro . letrec*) (bs2a92 core-macro . letrec) (bs2a91 core-macro . type-descriptor) (bs2a90 core-macro . case-lambda) (bs2a8f core-macro . lambda) (bs2a8e core-macro . syntax) (bs2a8d core-macro . syntax-case) (bs2a8c core-macro . quote) (bs2a8b core-macro . foreign-call) (bs2a8a letrec-syntax) (bs2a89 let-syntax) (bs2a88 set!) (bs2a87 import) (bs2a86 begin) (bs2a85 module) (bs2a84 define-syntax) (bs2a83 define)) values values '#f '#f '#f '#f) (bs992@bs7de@install-library 'bs2e4a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bs2df1) (eval-core . bs2df0) (set-symbol-value! . bs2def) (symbol-value . bs2dee) (gensym . bs2ded) (void . bs2dec)) '() values values '#f '#f '#f '#f) (bs992@bs7de@install-library 'bs2e4b '(mosh) '() '() '() '() '((set-symbol-value! . bs2def) (symbol-value . bs2dee) (regexp? . bs2dea) (read-line . bs2de9) (ungensym . bs2de7) (alist->eq-hash-table . bs2de6) (assoc-ref . bs2de5) (print . bs2de4) (format . bs2de3) (host-os . bs2de2) (library-path . bs7bd) (standard-library-path . bs2de1) (file-newer? . bs2ddb) (stat-mtime . bs2dda) (digit->integer . bs2dd6) (call-with-string-input-port . bs2dd5) (call-with-string-io . bs2dd4) (string-split . bs2dd3) (bytevector-for-each . bs2dd2) (string->regexp . bs2dd1) (rxmatch . bs2dd0) (regexp-replace-all . bs2dcf) (hashtable-fold-left . bs2dce) (hashtable-for-each . bs2dcd) (set-current-directory! . bs2dc8) (expand-path . bs2dc7) (current-directory . bs2dc6) (p . bs2d87) (get-timeofday . bs2d6e) (get-command-line . bs2d6d) (sys-display . bs2d6c) (whereis . bs2d6b) (register . bs2d6a) (vm-join! . bs2d69) (vm-set-value! . bs2d68) (vm? . bs2d67) (main-vm? . bs2d66) (vm-eval . bs2d65) (vm-self . bs2d64) (vm-start! . bs2d63) (make-vm . bs2d62) (mutex-try-lock! . bs2d61) (mutex-unlock! . bs2d60) (mutex-lock! . bs2d5f) (mutex? . bs2d5e) (make-mutex . bs2d5d) (condition-variable-notify-all! . bs2d5c) (condition-variable-notify! . bs2d5b) (condition-variable-wait! . bs2d5a) (make-condition-variable . bs2d59) (write/ss . bs2d58) (mosh-executable-path . bs2d57) (make-file-options . bs2d56) (source-info . bs2d55) (make-compiler-instruction . bs2d54) (make-instruction . bs2d53) (set-source-info! . bs2d52) (bignum? . bs2d51) (fast-equal? . bs2d50) (fasl-read . bs2d4f) (fasl-write . bs2d4e) (time-usage . bs2d4d) (os-constant . bs2d4c) (condition-printer . bs2d4b) (time . bs2aaa) (include . bs2a9f)) '() values values '#f '#f '#f '#f) (bs992@bs7de@install-library 'bs2e4c '(system) '() '() '() '() '((gensym-prefix-set! . bs2de8) (ssl-supported? . bs2de0) (ssl-socket? . bs2ddf) (socket-sslize! . bs2dde) (%monapi-name-whereis . bs2ddd) (%monapi-message-send . bs2ddc) (write-to-file . bs2dd9) (file->list . bs2dd8) (file->string . bs2dd7) (mosh-cache-dir . bs5a7) (call-process . bs2dcc) (local-tz-offset . bs2dcb) (microseconds . bs2dca) (directory-list . bs2dc9) (expand-path . bs2dc7) (%spawn . bs2dc5) (%waitpid . bs2dc4) (simple-struct-name . bs2dc3) (simple-struct-set! . bs2dc2) (simple-struct-ref . bs2dc1) (make-simple-struct . bs2dc0) (simple-struct? . bs2dbf) (pointer-ref-c-int64 . bs2dbe) (pointer-ref-c-int32 . bs2dbd) (pointer-ref-c-int16 . bs2dbc) (pointer-ref-c-int8 . bs2dbb) (pointer-ref-c-uint64 . bs2dba) (pointer-ref-c-uint32 . bs2db9) (pointer-ref-c-uint16 . bs2db8) (pointer-ref-c-uint8 . bs2db7) (pointer-set-c-uint64! . bs2db6) (pointer-set-c-uint32! . bs2db5) (pointer-set-c-uint16! . bs2db4) (pointer-set-c-uint8! . bs2db3) (pointer-set-c-int64! . bs2db2) (pointer-set-c-int32! . bs2db1) (pointer-set-c-int16! . bs2db0) (pointer-set-c-int8! . bs2daf) (pointer-set-c-pointer! . bs2dae) (pointer-set-c-double! . bs2dad) (pointer-set-c-float! . bs2dac) (pointer-set-c-long-long! . bs2dab) (pointer-set-c-long! . bs2daa) (pointer-set-c-int! . bs2da9) (pointer-set-c-short! . bs2da8) (pointer-set-c-char! . bs2da7) (pointer-ref-c-pointer . bs2da6) (pointer-ref-c-double . bs2da5) (pointer-ref-c-float . bs2da4) (pointer-ref-c-unsigned-long-long . bs2da3) (pointer-ref-c-signed-long-long . bs2da2) (pointer-ref-c-unsigned-long . bs2da1) (pointer-ref-c-signed-long . bs2da0) (pointer-ref-c-unsigned-int . bs2d9f) (pointer-ref-c-signed-int . bs2d9e) (pointer-ref-c-unsigned-short . bs2d9d) (pointer-ref-c-signed-short . bs2d9c) (pointer-ref-c-unsigned-char . bs2d9b) (pointer-ref-c-signed-char . bs2d9a) (pointer->integer . bs2d99) (integer->pointer . bs2d98) (pointer? . bs2d97) (shared-errno . bs2d96) (%ffi-free-c-callback-trampoline . bs2d95) (%ffi-make-c-callback-trampoline . bs2d94) (%ffi-free . bs2d93) (%ffi-malloc . bs2d92) (%ffi-supported? . bs2d91) (%ffi-pointer->string . bs2d90) (%ffi-call . bs2d8f) (%ffi-lookup . bs2d8e) (%ffi-open . bs2d8d) (null-terminated-utf8->string . bs2d8c) (null-terminated-bytevector->string . bs2d8b) (%exec . bs2d8a) (%fork . bs2d89) (%pipe . bs2d88) (open-output-string . bs2d86) (get-output-string . bs2d85) (file-stat-ctime . bs2d84) (file-stat-atime . bs2d83) (file-stat-mtime . bs2d82) (file-size-in-bytes . bs2d81) (file-writable? . bs2d80) (file-executable? . bs2d7f) (file-readable? . bs2d7e) (file-regular? . bs2d7d) (file-symbolic-link? . bs2d7c) (file-directory? . bs2d7b) (create-symbolic-link . bs2d7a) (rename-file . bs2d79) (delete-directory . bs2d78) (create-directory . bs2d77) (create-mosh-cache-dir . bs2d76) (get-environment-variables . bs2d75) (current-exception-handler . bs2d74) (get-environment-variable . bs2d73) (join-wraps . bs2d72) (id->real-label . bs2d71) (same-marks? . bs2d70) (same-marks*? . bs2d6f) (disasm . bs2d4a) (make-parameter . bs5a5) (socket-port . bs2d49) (socket-shutdown . bs2d48) (socket-close . bs2d47) (socket-send . bs2d46) (socket-recv! . bs2d45) (socket-recv . bs2d44) (make-server-socket . bs2d43) (make-client-socket . bs2d42) (socket-accept . bs2d41) (socket? . bs2d40) (parameterize . bs2a9a)) '() values values '#f '#f '#f '#f)))
(begin (set! bs2902@ref (unspecified)) (set! bs2904@x* (unspecified)) (set! bs2906@add-library-path! (unspecified)) (set! bs2908@parse-and-add-library-path (unspecified)) (set! bs290a@for-each-with-index (unspecified)) (set! bs290c@rpad (unspecified)) (set! bs290e@condition-printer/p (unspecified)) (set! bs2910@record->field-alist (unspecified)) (set! bs2912@map-with-index (unspecified)) (set! bs2914@repl (unspecified)) (set! bs2916@trace-printer (unspecified)) (set! bs2918@command-line (unspecified)) (set! bs291a@local-library-path (unspecified)) (set! bs291c@load/args (unspecified)) (set! bs291e@load (unspecified)) (set! bs2920@ironscheme-build (unspecified)) (set! bs2922@eval-top-level (unspecified)) (set! bs2924@compile-system-libraries (unspecified)) (set! bs2926@compile (unspecified)) (set! bs2928@compile->closure (unspecified)) (set! bs292a@pre-compile-r6rs-file (unspecified)) (set! bs292c@load-r6rs-top-level (unspecified)) (set! bs292e@load-r6rs-top-level-sexp (unspecified)) (set! bs2930@prefix-inc (unspecified)) (set! bs2932@prefix-inc! (unspecified)) (set! bs2902@ref (lambda (bs296d@rtd bs296e@i bs296f@x) (let ((bs2973@val ((record-accessor bs296d@rtd bs296e@i) bs296f@x))) (if (symbol? bs2973@val) (ungensym bs2973@val) bs2973@val)))) (set! bs2a69@bs2902@ref bs2902@ref) (set! bs2904@x* '()) (set! bs2a6a@bs2904@x* bs2904@x*) (set! bs2906@add-library-path! (lambda (bs2975@path) (bs982@bs7be@library-path (append (bs982@bs7be@library-path) (list bs2975@path))))) (set! bs2a6b@bs2906@add-library-path! bs2906@add-library-path!) (set! bs2908@parse-and-add-library-path (lambda (bs2977@paths bs2978@message) (letrec* ((bs297c@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((bs297d@t bs2977@paths)) (if bs297d@t ((lambda (bs297f@paths) (for-each (lambda (bs2981@path) (if (file-exists? bs2981@path) (bs2906@add-library-path! (expand-path bs2981@path)) (format (current-error-port) bs2978@message bs2981@path))) (string-split bs297f@paths bs297c@separator))) bs297d@t) (void)))))) (set! bs2a6c@bs2908@parse-and-add-library-path bs2908@parse-and-add-library-path) (set! bs290a@for-each-with-index (lambda (bs2983@proc bs2984@lst) (letrec ((bs2987@loop (lambda (bs2989@i bs298a@lst) (if (null? bs298a@lst) (if '#f '#f (void)) (begin (bs2983@proc bs2989@i (car bs298a@lst)) (bs2987@loop (+ bs2989@i '1) (cdr bs298a@lst))))))) (bs2987@loop '1 bs2984@lst)))) (set! bs2a6d@bs290a@for-each-with-index bs290a@for-each-with-index) (set! bs290c@rpad (lambda (bs298d@str bs298e@pad bs298f@n) (let ((bs2993@rest (- bs298f@n (string-length (format '"~a" bs298d@str))))) (let bs2999@loop ((bs2995@rest bs2993@rest) (bs2996@ret (format '"~a" bs298d@str))) (if (<= bs2995@rest '0) bs2996@ret (bs2999@loop (- bs2995@rest '1) (string-append bs2996@ret bs298e@pad))))))) (set! bs2a6e@bs290c@rpad bs290c@rpad) (set! bs290e@condition-printer/p (lambda (bs299b@e bs299c@port) (letrec* ((bs29a0@max-condition-len (apply max (map (lambda (bs29b1@c) (string-length (symbol->string (record-type-name (record-rtd bs29b1@c))))) (simple-conditions bs299b@e))))) (begin (display '" Condition components:\n" bs299c@port) (bs290a@for-each-with-index (lambda (bs29a1@i bs29a2@x) (let ((bs29a5@rtd (record-rtd bs29a2@x)) (bs29a6@fields-alist (bs2910@record->field-alist bs29a2@x))) (begin (format bs299c@port '" ~d. ~a" bs29a1@i (bs290c@rpad (symbol->string (record-type-name bs29a5@rtd)) '" " bs29a0@max-condition-len)) (if (null? bs29a6@fields-alist) (newline bs299c@port) (void)) (let bs29ad@loop ((bs29a9@first '#t) (bs29aa@fields-alist bs29a6@fields-alist)) (if (null? bs29aa@fields-alist) '() (let ((bs29af@field (car bs29aa@fields-alist))) (begin (if (not bs29a9@first) (display (bs290c@rpad '"" '" " (+ '4 bs29a0@max-condition-len)) bs299c@port) (void)) (display '"       " bs299c@port) (display (car bs29af@field) bs299c@port) (display '": " bs299c@port) (write (cdr bs29af@field) bs299c@port) (newline bs299c@port) (bs29ad@loop '#f (cdr bs29aa@fields-alist))))))))) (simple-conditions bs299b@e)))))) (set! bs2a6f@bs290e@condition-printer/p bs290e@condition-printer/p) (set! bs2910@record->field-alist (lambda (bs29b3@r) (letrec* ((bs29b6@ref (lambda (bs29c1@rtd bs29c2@i bs29c3@x) (let ((bs29c7@val ((record-accessor bs29c1@rtd bs29c2@i) bs29c3@x))) (if (symbol? bs29c7@val) (ungensym bs29c7@val) bs29c7@val))))) (let bs29bb@loop ((bs29b7@ret '()) (bs29b8@rtd (record-rtd bs29b3@r))) (if bs29b8@rtd (bs29bb@loop (append bs29b7@ret (bs2912@map-with-index (lambda (bs29bd@i bs29be@field) (cons bs29be@field (bs29b6@ref bs29b8@rtd bs29bd@i bs29b3@r))) (vector->list (record-type-field-names bs29b8@rtd)))) (record-type-parent bs29b8@rtd)) bs29b7@ret))))) (set! bs2a70@bs2910@record->field-alist bs2910@record->field-alist) (set! bs2912@map-with-index (lambda (bs29c9@proc bs29ca@lst) (let bs29d3@loop ((bs29cd@i '0) (bs29ce@lst bs29ca@lst) (bs29cf@ret '())) (if (null? bs29ce@lst) (reverse bs29cf@ret) (bs29d3@loop (+ bs29cd@i '1) (cdr bs29ce@lst) (cons (bs29c9@proc bs29cd@i (car bs29ce@lst)) bs29cf@ret)))))) (set! bs2a71@bs2912@map-with-index bs2912@map-with-index) (set! bs2914@repl (lambda bs29d5@x (letrec* ((bs29d8@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bs29db@bs29d9) (lambda () (with-exception-handler (lambda (bs29dd@e) ((call/cc (lambda (bs29df@bs29da) (bs29db@bs29d9 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bs29dd@e) (bs290e@condition-printer/p bs29dd@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bs29dd@e))) (bs29df@bs29da (lambda () (raise-continuable bs29dd@e)))))))))) (lambda () (let bs29e5@loop ((bs29e1@line (get-line (current-input-port))) (bs29e2@accum '"")) (letrec* ((bs29e8@parentheses-ok? (lambda (bs29f3@text) (let bs29fb@loop ((bs29f5@chars (string->list bs29f3@text)) (bs29f6@p0 '0) (bs29f7@p1 '0)) (if (null? bs29f5@chars) (= '0 bs29f6@p0 bs29f7@p1) (let ((bs29fd@t (car bs29f5@chars))) (if (memv bs29fd@t '(#\()) (bs29fb@loop (cdr bs29f5@chars) (+ bs29f6@p0 '1) bs29f7@p1) (if (memv bs29fd@t '(#\))) (bs29fb@loop (cdr bs29f5@chars) (- bs29f6@p0 '1) bs29f7@p1) (if (memv bs29fd@t '(#\[)) (bs29fb@loop (cdr bs29f5@chars) bs29f6@p0 (+ bs29f7@p1 '1)) (if (memv bs29fd@t '(#\])) (bs29fb@loop (cdr bs29f5@chars) bs29f6@p0 (- bs29f7@p1 '1)) (bs29fb@loop (cdr bs29f5@chars) bs29f6@p0 bs29f7@p1)))))))))) (bs29ea@eval-string-print (lambda (bs29ed@text) (if (not (or (string=? '"\n" bs29ed@text) (= '0 (string-length bs29ed@text)))) (call-with-values (lambda () (bs2922@eval-top-level (call-with-port (open-string-input-port bs29ed@text) read))) (lambda bs29ef@out* (for-each (lambda (bs29f1@out) (begin (write bs29f1@out) (newline))) bs29ef@out*))) (void))))) (if (eof-object? bs29e1@line) (begin (bs29ea@eval-string-print bs29e2@accum) (exit)) (let ((bs29eb@current (string-append bs29e2@accum bs29e1@line))) (if (bs29e8@parentheses-ok? bs29eb@current) (bs29ea@eval-string-print bs29eb@current) (bs29e5@loop (get-line (current-input-port)) bs29eb@current)))))))))))) (newline) (bs29d8@rec))))) (bs29d8@rec)))) (set! bs2a72@bs2914@repl bs2914@repl) (set! bs2916@trace-printer (bs6c8@bs5a6@make-parameter write)) (set! bs2a73@bs2916@trace-printer bs2916@trace-printer) (set! bs2918@command-line (bs6c8@bs5a6@make-parameter (get-command-line))) (set! bs2a74@bs2918@command-line bs2918@command-line) (set! bs291a@local-library-path (lambda (bs29ff@filename) (bs982@bs7be@library-path))) (set! bs2a75@bs291a@local-library-path bs291a@local-library-path) (set! bs291c@load/args (lambda (bs2a01@filename . bs2a03@args) (begin (apply bs292c@load-r6rs-top-level bs2a01@filename 'load bs2a03@args) (void)))) (set! bs2a76@bs291c@load/args bs291c@load/args) (set! bs291e@load (lambda (bs2a05@filename) (begin (apply bs292c@load-r6rs-top-level bs2a05@filename 'load (bs2918@command-line)) (void)))) (set! bs2a77@bs291e@load bs291e@load) (set! bs2920@ironscheme-build (lambda () (bs291e@load '"ironscheme-buildscript.ss"))) (set! bs2a78@bs2920@ironscheme-build bs2920@ironscheme-build) (set! bs2922@eval-top-level (lambda (bs2a07@x) (bs28df@bse3f@eval bs2a07@x (bs28f6@bse6d@interaction-environment)))) (set! bs2a79@bs2922@eval-top-level bs2922@eval-top-level) (set! bs2924@compile-system-libraries (lambda () (bs2922@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bs2a7a@bs2924@compile-system-libraries bs2924@compile-system-libraries) (set! bs2926@compile (lambda (bs2a09@filename) (bs292c@load-r6rs-top-level bs2a09@filename 'compile))) (set! bs2a7b@bs2926@compile bs2926@compile) (set! bs2928@compile->closure (lambda (bs2a0b@filename) (bs292c@load-r6rs-top-level bs2a0b@filename 'closure))) (set! bs2a7c@bs2928@compile->closure bs2928@compile->closure) (set! bs292a@pre-compile-r6rs-file (lambda (bs2a0d@filename) (bs292c@load-r6rs-top-level bs2a0d@filename 'compile))) (set! bs2a7d@bs292a@pre-compile-r6rs-file bs292a@pre-compile-r6rs-file) (set! bs292c@load-r6rs-top-level (lambda (bs2a0f@filename bs2a10@how . bs2a13@args) (begin (bs982@bs7be@library-path (bs291a@local-library-path bs2a0f@filename)) (let ((bs2a15@x* (with-input-from-file bs2a0f@filename (lambda () (let bs2a17@f () (let ((bs2a19@x (bs6ba@bs58a@read-annotated))) (if (eof-object? bs2a19@x) '() (cons bs2a19@x (bs2a17@f))))))))) (let ((bs2a1b@t bs2a10@how)) (if (memv bs2a1b@t '(closure)) (bs28f5@bse6b@pre-compile-r6rs-top-level bs2a15@x*) (if (memv bs2a1b@t '(load)) (begin (bs2918@command-line (cons bs2a0f@filename (car bs2a13@args))) (bs6c9@bs5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (bs6c9@bs5a8@mosh-cache-dir) (gensym-prefix-set! (bs2932@prefix-inc! (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bs2a1d@file) ((call/cc (lambda (bs2a21@bs2a1f) (lambda () (with-exception-handler (lambda (bs2a23@c) ((call/cc (lambda (bs2a25@bs2a20) (bs2a21@bs2a1f (lambda () (if '#t '#t (bs2a25@bs2a20 (lambda () (raise-continuable bs2a23@c)))))))))) (lambda () (delete-file (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/" bs2a1d@file))))))))) (directory-list (bs6c9@bs5a8@mosh-cache-dir))) (void)) (let ((bs2a27@compiled (bs28f4@bse69@compile-r6rs-top-level bs2a15@x*))) (begin (if (and (bs6c9@bs5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bs986@bs7c6@serialize-all bs6c3@bs59c@serialize-library bs71f@bs6d8@compile-core-expr) (void)) (bs2a27@compiled)))) (if (memv bs2a1b@t '(compile)) (begin (bs28f4@bse69@compile-r6rs-top-level bs2a15@x*) (bs986@bs7c6@serialize-all bs6c3@bs59c@serialize-library bs71f@bs6d8@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bs2a7e@bs292c@load-r6rs-top-level bs292c@load-r6rs-top-level) (set! bs292e@load-r6rs-top-level-sexp (lambda (bs2a29@import-spec bs2a2a@thunk) (let ((bs2a35@bs2a2e bs982@bs7be@library-path) (bs2a36@bs2a30 bs6c9@bs5a8@mosh-cache-dir) (bs2a37@bs2a32 (bs291a@local-library-path '"")) (bs2a38@bs2a34 (create-mosh-cache-dir))) (let ((bs2a3d@swap (lambda () (begin (let ((bs2a3f@t (bs2a35@bs2a2e))) (begin (bs2a35@bs2a2e bs2a37@bs2a32) (set! bs2a37@bs2a32 bs2a3f@t))) (let ((bs2a41@t (bs2a36@bs2a30))) (begin (bs2a36@bs2a30 bs2a38@bs2a34) (set! bs2a38@bs2a34 bs2a41@t))))))) (dynamic-wind bs2a3d@swap (lambda () (begin (if (bs6c9@bs5a8@mosh-cache-dir) (gensym-prefix-set! (bs2932@prefix-inc! (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bs2a47@bs2a44 bs2918@command-line) (bs2a48@bs2a46 '())) (let ((bs2a4b@swap (lambda () (let ((bs2a4d@t (bs2a47@bs2a44))) (begin (bs2a47@bs2a44 bs2a48@bs2a46) (set! bs2a48@bs2a46 bs2a4d@t)))))) (dynamic-wind bs2a4b@swap (lambda () ((bs28f4@bse69@compile-r6rs-top-level (list (cons 'import bs2a29@import-spec) (list bs2a2a@thunk))))) bs2a4b@swap))))) bs2a3d@swap))))) (set! bs2a7f@bs292e@load-r6rs-top-level-sexp bs292e@load-r6rs-top-level-sexp) (set! bs2930@prefix-inc (lambda (bs2a4f@prefix-string) (let ((bs2a51@prefix (symbol->string bs2a4f@prefix-string))) (let ((bs2a53@len (string-length bs2a51@prefix))) (let bs2a5b@loop ((bs2a55@i (- bs2a53@len '1)) (bs2a56@carry? '#t) (bs2a57@accum '())) (if (< bs2a55@i '0) (string->symbol (list->string (if bs2a56@carry? (cons '#\a bs2a57@accum) bs2a57@accum))) (if bs2a56@carry? (let ((bs2a5d@next-integer (+ '1 (char->integer (string-ref bs2a51@prefix bs2a55@i))))) (if (= bs2a5d@next-integer '123) (bs2a5b@loop (- bs2a55@i '1) '#f (cons '#\A bs2a57@accum)) (if (= bs2a5d@next-integer '91) (bs2a5b@loop (- bs2a55@i '1) '#t (cons '#\a bs2a57@accum)) (bs2a5b@loop (- bs2a55@i '1) '#f (cons (integer->char bs2a5d@next-integer) bs2a57@accum))))) (bs2a5b@loop (- bs2a55@i '1) '#f (cons (string-ref bs2a51@prefix bs2a55@i) bs2a57@accum))))))))) (set! bs2a80@bs2930@prefix-inc bs2930@prefix-inc) (set! bs2932@prefix-inc! (lambda (bs2a5f@file) (begin (if (not (file-exists? bs2a5f@file)) (call-with-output-file bs2a5f@file (lambda (bs2a61@port) (write 'd bs2a61@port))) (void)) (let ((bs2a63@prefix (call-with-input-file bs2a5f@file read))) (if (main-vm?) (let ((bs2a65@next-prefix (bs2930@prefix-inc bs2a63@prefix))) (begin (call-with-port (open-file-output-port bs2a5f@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bs2a67@port) (write bs2a65@next-prefix bs2a67@port))) bs2a63@prefix)) bs2a63@prefix))))) (set! bs2a81@bs2932@prefix-inc! bs2932@prefix-inc!) (begin (bs987@bs7c8@current-precompiled-library-loader bs6c4@bs59e@load-serialized-library) (set-symbol-value! 'load bs291e@load) (set-symbol-value! 'pre-compile-r6rs-file bs292a@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bs2922@eval-top-level) (set-symbol-value! 'int-env-syms bs28d6@bse2d@interaction-environment-symbols) (set-symbol-value! 'expanded2core bs71e@bs6d6@expanded->core) (set-symbol-value! 'trace-printer bs2916@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bs2933@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list bs2933@c))))) (bs2908@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bs2908@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bs2906@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bs2906@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bs2906@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bs2935@prefix (lambda (bs2937@ext bs2938@ls) (append (map (lambda (bs293b@x) (string-append bs2937@ext bs293b@x)) bs2938@ls) bs2938@ls)))) (bs983@bs7c0@library-extensions (bs2935@prefix '".mosh" (bs983@bs7c0@library-extensions)))) (current-exception-handler (lambda (bs293d@c) (begin (if (condition? bs293d@c) (bs290e@condition-printer/p bs293d@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bs293d@c)) bs293d@c))) (if ((call/cc (lambda (bs2941@bs293f) (lambda () (with-exception-handler (lambda (bs2943@c) ((call/cc (lambda (bs2945@bs2940) (bs2941@bs293f (lambda () (if '#t '#f (bs2945@bs2940 (lambda () (raise-continuable bs2943@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bs292e@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bs2918@command-line)) (let ((bs294f@bs2948 bs2918@command-line) (bs2950@bs294a bs6c9@bs5a8@mosh-cache-dir) (bs2951@bs294c '()) (bs2952@bs294e (create-mosh-cache-dir))) (let ((bs2957@swap (lambda () (begin (let ((bs2959@t (bs294f@bs2948))) (begin (bs294f@bs2948 bs2951@bs294c) (set! bs2951@bs294c bs2959@t))) (let ((bs295b@t (bs2950@bs294a))) (begin (bs2950@bs294a bs2952@bs294e) (set! bs2952@bs294e bs295b@t))))))) (dynamic-wind bs2957@swap (lambda () (begin (if (bs6c9@bs5a8@mosh-cache-dir) (gensym-prefix-set! (bs2932@prefix-inc! (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (bs2914@repl))) bs2957@swap))) (begin (bs982@bs7be@library-path (bs291a@local-library-path (car (bs2918@command-line)))) (set! bs2904@x* (with-input-from-file (car (bs2918@command-line)) (lambda () (let bs295d@f () (let ((bs295f@x (bs6ba@bs58a@read-annotated))) (if (eof-object? bs295f@x) '() (cons bs295f@x (bs295d@f)))))))) (bs2918@command-line (cons (car (bs2918@command-line)) (cdr (bs2918@command-line)))) (bs6c9@bs5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (bs6c9@bs5a8@mosh-cache-dir) (gensym-prefix-set! (bs2932@prefix-inc! (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bs2961@file) ((call/cc (lambda (bs2965@bs2963) (lambda () (with-exception-handler (lambda (bs2967@c) ((call/cc (lambda (bs2969@bs2964) (bs2965@bs2963 (lambda () (if '#t '#t (bs2969@bs2964 (lambda () (raise-continuable bs2967@c)))))))))) (lambda () (delete-file (string-append (bs6c9@bs5a8@mosh-cache-dir) '"/" bs2961@file))))))))) (directory-list (bs6c9@bs5a8@mosh-cache-dir))) (void)) (let ((bs296b@compiled (bs28f4@bse69@compile-r6rs-top-level bs2904@x*))) (begin (if (and (bs6c9@bs5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bs986@bs7c6@serialize-all bs6c3@bs59c@serialize-library bs71f@bs6d8@compile-core-expr) (void)) (bs296b@compiled))))))))
