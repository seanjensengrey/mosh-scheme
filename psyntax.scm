;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! N2926@library-file-path->cache-path (unspecified)) (set! N2928@read-annotated (unspecified)) (set! N292a@annotation-stripped (unspecified)) (set! N292c@annotation? (unspecified)) (set! N292e@annotation-source (unspecified)) (set! N2930@annotation-expression (unspecified)) (set! N2932@scm->fasl (unspecified)) (set! N2934@fasl-save (unspecified)) (set! N2936@fasl-load (unspecified)) (set! N2938@verbose? (unspecified)) (set! N293a@serialize-library (unspecified)) (set! N293c@load-serialized-library (unspecified)) (set! N293e@make-record-printer (unspecified)) (set! N2940@compile-core (unspecified)) (set! N2942@read-library-source-file (unspecified)) (set! N2944@make-parameter (unspecified)) (set! N2946@mosh-cache-dir (unspecified)) (set! N29dc@file-options-spec (unspecified)) (set! N2926@library-file-path->cache-path (lambda (N29dd@x) (call-with-values (lambda () (open-string-output-port)) (lambda (N29e3@N29e0 N29e4@N29e2) (let ((N29e7@extract N29e4@N29e2) (N29e8@p N29e3@N29e0)) (letrec* ((N29ec@display-hex (lambda (N29f5@n) (if (<= '0 N29f5@n '9) (display N29f5@n N29e8@p) (display (integer->char (+ (char->integer '#\a) (- N29f5@n '10))) N29e8@p))))) (begin (let N29ef@f ((N29ed@ls (string-split N29dd@x '#\/))) (if (not (null? N29ed@ls)) (begin (display '"_" N29e8@p) (for-each (lambda (N29f1@c) (if (or (char<=? '#\a N29f1@c '#\z) (char<=? '#\A N29f1@c '#\Z) (char<=? '#\0 N29f1@c '#\9) (memv N29f1@c '(#\- #\. #\_ #\~))) (display N29f1@c N29e8@p) (begin (display '"%" N29e8@p) (let ((N29f3@n (char->integer N29f1@c))) (begin (N29ec@display-hex (quotient N29f3@n '16)) (N29ec@display-hex (remainder N29f3@n '16))))))) (string->list (car N29ed@ls))) (N29ef@f (cdr N29ed@ls))) (void))) (N29e7@extract)))))))) (set! N2a57@N2926@library-file-path->cache-path N2926@library-file-path->cache-path) (set! N2928@read-annotated read) (set! N2a58@N2928@read-annotated N2928@read-annotated) (set! N292a@annotation-stripped (lambda (N29f7@x) (N2930@annotation-expression N29f7@x))) (set! N2a59@N292a@annotation-stripped N292a@annotation-stripped) (set! N292c@annotation? (lambda (N29f9@x) (source-info N29f9@x))) (set! N2a5a@N292c@annotation? N292c@annotation?) (set! N292e@annotation-source (lambda (N29fb@x) (source-info N29fb@x))) (set! N2a5b@N292e@annotation-source N292e@annotation-source) (set! N2930@annotation-expression (lambda (N29fd@x) (if (pair? N29fd@x) (cons (car N29fd@x) (cdr N29fd@x)) (if (procedure? N29fd@x) (set-source-info! N29fd@x '#f) N29fd@x)))) (set! N2a5c@N2930@annotation-expression N2930@annotation-expression) (set! N2932@scm->fasl (lambda (N29ff@filename) (string-append (N2946@mosh-cache-dir) '"/" (N2926@library-file-path->cache-path N29ff@filename) '".mosh-fasl"))) (set! N2a5d@N2932@scm->fasl N2932@scm->fasl) (set! N2934@fasl-save (lambda (N2a01@filename N2a02@obj) (call-with-port (open-file-output-port N2a01@filename) (lambda (N2a05@port) ((symbol-value 'fasl-write!) N2a02@obj N2a05@port))))) (set! N2a5e@N2934@fasl-save N2934@fasl-save) (set! N2936@fasl-load (lambda (N2a07@filename) (call-with-port (open-file-input-port N2a07@filename) (symbol-value 'fasl-read!)))) (set! N2a5f@N2936@fasl-load N2936@fasl-load) (set! N2938@verbose? (symbol-value '%verbose)) (set! N2a60@N2938@verbose? N2938@verbose?) (set! N293a@serialize-library (lambda (N2a09@filename N2a0a@obj) (begin (if N2938@verbose? (format (current-error-port) '"serialize-library ~a\n..." N2a09@filename) (void)) (let ((N2a0d@expanded2core (symbol-value 'expanded2core))) (let ((N2a0f@compile (symbol-value 'compile-w/o-halt))) (let ((N2a11@code N2a0a@obj)) (let ((N2a13@pivot (cddddr (cddddr N2a11@code)))) (let ((N2a15@visit (N2a0f@compile (N2a0d@expanded2core (car N2a13@pivot))))) (begin (set-car! N2a13@pivot N2a15@visit) (let ((N2a17@pivot (cdr N2a13@pivot))) (let ((N2a19@invoke (N2a0f@compile (N2a0d@expanded2core (car N2a17@pivot))))) (set-car! N2a17@pivot N2a19@invoke))))))))) (let ((N2a1b@fasl-file (N2932@scm->fasl N2a09@filename))) (begin (if (file-exists? N2a1b@fasl-file) (delete-file N2a1b@fasl-file) (void)) ((call/cc (lambda (N2a1f@N2a1d) (lambda () (with-exception-handler (lambda (N2a21@c) ((call/cc (lambda (N2a23@N2a1e) (N2a1f@N2a1d (lambda () (if '#t (begin (if N2938@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" N2a09@filename) (void)) (if (file-exists? N2a1b@fasl-file) (delete-file N2a1b@fasl-file) (void)) '#f) (N2a23@N2a1e (lambda () (raise-continuable N2a21@c)))))))))) (lambda () (N2934@fasl-save N2a1b@fasl-file N2a0a@obj)))))))))))) (set! N2a61@N293a@serialize-library N293a@serialize-library) (set! N293c@load-serialized-library (lambda (N2a25@filename N2a26@obj) (and (N2946@mosh-cache-dir) (let ((N2a29@fasl-file (N2932@scm->fasl N2a25@filename))) (if (and (file-exists? N2a29@fasl-file) ((symbol-value 'file-newer?) N2a29@fasl-file N2a25@filename)) (let ((N2a2b@expanded2core (symbol-value 'expanded2core))) (let ((N2a2d@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((N2a2f@code (N2936@fasl-load N2a29@fasl-file))) (let ((N2a31@pivot (cddddr (cddddr N2a2f@code)))) (let ((N2a33@visit (car N2a31@pivot))) (let ((N2a35@visit-proc (lambda () (N2a2d@eval-compiled-core N2a33@visit)))) (begin (set-car! N2a31@pivot N2a35@visit-proc) (let ((N2a37@pivot (cdr N2a31@pivot))) (let ((N2a39@invoke (car N2a37@pivot))) (begin (set-car! N2a37@pivot (lambda () (N2a2d@eval-compiled-core N2a39@invoke))) (apply N2a26@obj N2a2f@code))))))))))) '#f))))) (set! N2a62@N293c@load-serialized-library N293c@load-serialized-library) (set! N293e@make-record-printer (lambda (N2a3b@name N2a3c@printer) (lambda N2a3f@x (begin (display '"record printer") (for-each display N2a3f@x))))) (set! N2a63@N293e@make-record-printer N293e@make-record-printer) (set! N2940@compile-core (lambda N2a41@x (apply error 'comile-core '"not implementated" N2a41@x))) (set! N2a64@N2940@compile-core N2940@compile-core) (set! N2942@read-library-source-file (lambda (N2a43@file-name) (with-input-from-file N2a43@file-name N2928@read-annotated))) (set! N2a65@N2942@read-library-source-file N2942@read-library-source-file) (set! N2944@make-parameter (lambda N2a53 (let ((N2a54 (length N2a53))) (if (= N2a54 '1) (apply (lambda (N2a45@x) (N2944@make-parameter N2a45@x (lambda (N2a47@x) N2a47@x))) N2a53) (if (= N2a54 '2) (apply (lambda (N2a49@x N2a4a@fender) (let ((N2a4d@x (N2a4a@fender N2a49@x))) (lambda N2a51 (let ((N2a52 (length N2a51))) (if (= N2a52 '0) (apply (lambda () N2a4d@x) N2a51) (if (= N2a52 '1) (apply (lambda (N2a4f@v) (set! N2a4d@x (N2a4a@fender N2a4f@v))) N2a51) (error 'apply '"invalid arg count"))))))) N2a53) (error 'apply '"invalid arg count")))))) (set! N2a66@N2944@make-parameter N2944@make-parameter) (set! N2946@mosh-cache-dir (N2944@make-parameter '#f)) (set! N2a67@N2946@mosh-cache-dir N2946@mosh-cache-dir) (set! N29dc@file-options-spec (lambda (N2a55@x) N2a55@x)) (set! N2a68@N29dc@file-options-spec N29dc@file-options-spec) (void))
(begin (set! N2a6e@current-primitive-locations (unspecified)) (set! N2a70@mutable? (unspecified)) (set! N2a72@rewriter (unspecified)) (set! N2a74@expanded->core (unspecified)) (set! N2a76@compile-core-expr (unspecified)) (set! N2a78@pretty-print (unspecified)) (set! N2a7a@compile-core-expr-to-port (unspecified)) (set! N2a6e@current-primitive-locations (N2a66@N2944@make-parameter (lambda (N2a7b@x) '#f) (lambda (N2a7d@p) N2a7d@p))) (set! N2ab9@N2a6e@current-primitive-locations N2a6e@current-primitive-locations) (set! N2a70@mutable? (lambda (N2a7f@x) (or (pair? N2a7f@x) (vector? N2a7f@x) (hashtable? N2a7f@x)))) (set! N2aba@N2a70@mutable? N2a70@mutable?) (set! N2a72@rewriter (lambda (N2a81@quote-hack?) (letrec* ((N2a84@f (lambda (N2a85@x) (if (pair? N2a85@x) (let ((N2a87@t (car N2a85@x))) (if (memv N2a87@t '(quote)) (if (and N2a81@quote-hack? (N2a70@mutable? (cadr N2a85@x))) (let ((N2a89@g (gensym))) (begin (set-symbol-value! N2a89@g (cadr N2a85@x)) N2a89@g)) N2a85@x) (if (memv N2a87@t '(case-lambda)) (cons 'case-lambda (map (lambda (N2a8b@x) (cons (car N2a8b@x) (map N2a84@f (cdr N2a8b@x)))) (cdr N2a85@x))) (if (memv N2a87@t '(lambda)) (cons* 'lambda (cadr N2a85@x) (map N2a84@f (cddr N2a85@x))) (if (memv N2a87@t '(letrec)) (let ((N2a8d@bindings (cadr N2a85@x)) (N2a8e@body* (cddr N2a85@x))) (let ((N2a91@lhs* (map car N2a8d@bindings)) (N2a92@rhs* (map cadr N2a8d@bindings))) (cons* 'letrec (map list N2a91@lhs* (map N2a84@f N2a92@rhs*)) (map N2a84@f N2a8e@body*)))) (if (memv N2a87@t '(letrec*)) (let ((N2a95@bindings (cadr N2a85@x)) (N2a96@body* (cddr N2a85@x))) (let ((N2a99@lhs* (map car N2a95@bindings)) (N2a9a@rhs* (map cadr N2a95@bindings))) (cons* 'letrec* (map list N2a99@lhs* (map N2a84@f N2a9a@rhs*)) (map N2a84@f N2a96@body*)))) (if (memv N2a87@t '(library-letrec*)) (let ((N2a9d@name (cadr N2a85@x)) (N2a9e@x (cdr N2a85@x))) (let ((N2aa1@bindings (cadr N2a9e@x)) (N2aa2@body* (cddr N2a9e@x))) (let ((N2aa5@lhs* (map car N2aa1@bindings)) (N2aa6@lhs** (map cadr N2aa1@bindings)) (N2aa7@rhs* (map caddr N2aa1@bindings))) (cons* 'library-letrec* N2a9d@name (map list N2aa5@lhs* N2aa6@lhs** (map N2a84@f N2aa7@rhs*)) (map N2a84@f N2aa2@body*))))) (if (memv N2a87@t '(begin)) (cons 'begin (map N2a84@f (cdr N2a85@x))) (if (memv N2a87@t '(set!)) (list 'set! (cadr N2a85@x) (N2a84@f (caddr N2a85@x))) (if (memv N2a87@t '(primitive)) (let ((N2aab@op (cadr N2a85@x))) (let ((N2aad@t ((N2a6e@current-primitive-locations) N2aab@op))) (if N2aad@t ((lambda (N2aaf@loc) N2aaf@loc) N2aad@t) N2aab@op))) (if (memv N2a87@t '(define)) N2a85@x (if (list? N2a85@x) (map N2a84@f N2a85@x) (error 'rewrite '"invalid form ~s ~s" N2a85@x (list? N2a85@x)))))))))))))) N2a85@x)))) N2a84@f))) (set! N2abb@N2a72@rewriter N2a72@rewriter) (set! N2a74@expanded->core (lambda (N2ab1@x) ((N2a72@rewriter '#f) N2ab1@x))) (set! N2abc@N2a74@expanded->core N2a74@expanded->core) (set! N2a76@compile-core-expr (lambda (N2ab3@x) ((N2a72@rewriter '#f) N2ab3@x))) (set! N2abd@N2a76@compile-core-expr N2a76@compile-core-expr) (set! N2a78@pretty-print write) (set! N2abe@N2a78@pretty-print N2a78@pretty-print) (set! N2a7a@compile-core-expr-to-port (lambda (N2ab5@x N2ab6@p) (N2a78@pretty-print ((N2a72@rewriter '#f) N2ab5@x) N2ab6@p))) (set! N2abf@N2a7a@compile-core-expr-to-port N2a7a@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! N2b0e@make-collection (unspecified)) (set! N2b10@current-library-collection (unspecified)) (set! N2b12@rp (unspecified)) (set! N2b1c@library? (unspecified)) (set! N2b1e@library-id (unspecified)) (set! N2b20@set-library-id! (unspecified)) (set! N2b22@library-name (unspecified)) (set! N2b24@set-library-name! (unspecified)) (set! N2b26@library-version (unspecified)) (set! N2b28@set-library-version! (unspecified)) (set! N2b2a@library-imp* (unspecified)) (set! N2b2c@set-library-imp*! (unspecified)) (set! N2b2e@library-vis* (unspecified)) (set! N2b30@set-library-vis*! (unspecified)) (set! N2b32@library-inv* (unspecified)) (set! N2b34@set-library-inv*! (unspecified)) (set! N2b36@library-subst (unspecified)) (set! N2b38@set-library-subst! (unspecified)) (set! N2b3a@library-env (unspecified)) (set! N2b3c@set-library-env! (unspecified)) (set! N2b3e@library-visit-state (unspecified)) (set! N2b40@set-library-visit-state! (unspecified)) (set! N2b42@library-invoke-state (unspecified)) (set! N2b44@set-library-invoke-state! (unspecified)) (set! N2b46@library-visit-code (unspecified)) (set! N2b48@set-library-visit-code! (unspecified)) (set! N2b4a@library-invoke-code (unspecified)) (set! N2b4c@set-library-invoke-code! (unspecified)) (set! N2b4e@library-visible? (unspecified)) (set! N2b50@set-library-visible?! (unspecified)) (set! N2b52@library-source-file-name (unspecified)) (set! N2b54@set-library-source-file-name! (unspecified)) (set! N2b56@dummy (unspecified)) (set! N2b58@find-dependencies (unspecified)) (set! N2b5a@find-library-by (unspecified)) (set! N2b5c@library-path (unspecified)) (set! N2b5e@library-extensions (unspecified)) (set! N2b60@library-name->file-name (unspecified)) (set! N2b62@file-locator (unspecified)) (set! N2b64@serialize-all (unspecified)) (set! N2b66@current-precompiled-library-loader (unspecified)) (set! N2b68@try-load-from-file (unspecified)) (set! N2b6a@library-loader (unspecified)) (set! N2b6c@current-library-expander (unspecified)) (set! N2b6e@external-pending-libraries (unspecified)) (set! N2b70@find-external-library (unspecified)) (set! N2b72@find-library-by-name (unspecified)) (set! N2b74@library-exists? (unspecified)) (set! N2b76@find-library-by-spec/die (unspecified)) (set! N2b78@label->binding-table (unspecified)) (set! N2b7a@install-library-record (unspecified)) (set! N2b7c@install-library (unspecified)) (set! N2b7e@imported-label->binding (unspecified)) (set! N2b80@invoke-library (unspecified)) (set! N2b82@visit-library (unspecified)) (set! N2b84@invoke-library-by-spec (unspecified)) (set! N2b86@installed-libraries (unspecified)) (set! N2b88@library-spec (unspecified)) (set! N2b0e@make-collection (lambda () (let ((N2b89@set '())) (letrec* ((N2b8c@set-cons (lambda (N2b91@x N2b92@ls) (if (memq N2b91@x N2b92@ls) N2b92@ls (cons N2b91@x N2b92@ls))))) (lambda N2b8f (let ((N2b90 (length N2b8f))) (if (= N2b90 '0) (apply (lambda () N2b89@set) N2b8f) (if (= N2b90 '1) (apply (lambda (N2b8d@x) (set! N2b89@set (N2b8c@set-cons N2b8d@x N2b89@set))) N2b8f) (error 'apply '"invalid arg count"))))))))) (set! N2cfd@N2b0e@make-collection N2b0e@make-collection) (set! N2b10@current-library-collection (N2a66@N2944@make-parameter (N2b0e@make-collection) (lambda (N2b95@x) (begin (if (not (procedure? N2b95@x)) (assertion-violation 'current-library-collection '"not a procedure" N2b95@x) (void)) N2b95@x)))) (set! N2cfe@N2b10@current-library-collection N2b10@current-library-collection) (set! N2b12@rp (N2a63@N293e@make-record-printer 'library (lambda (N2b97@x N2b98@p N2b99@wr) (begin (if (not (N2b1c@library? N2b97@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (N2b26@library-version N2b97@x)) (N2b22@library-name N2b97@x) (append (N2b22@library-name N2b97@x) (list (N2b26@library-version N2b97@x))))) N2b98@p))))) (set! N2cff@N2b12@rp N2b12@rp) (set! N2b1c@library? (lambda (N2b9d@x) (and (simple-struct? N2b9d@x) (eq? (simple-struct-name N2b9d@x) 'library)))) (set! N2d00@N2b1c@library? N2b1c@library?) (set! N2b1e@library-id (lambda (N2b9f@x) (simple-struct-ref N2b9f@x '0))) (set! N2d01@N2b1e@library-id N2b1e@library-id) (set! N2b20@set-library-id! (lambda (N2ba1@x N2ba2@val) (simple-struct-set! N2ba1@x '0 N2ba2@val))) (set! N2d02@N2b20@set-library-id! N2b20@set-library-id!) (set! N2b22@library-name (lambda (N2ba5@x) (simple-struct-ref N2ba5@x '1))) (set! N2d03@N2b22@library-name N2b22@library-name) (set! N2b24@set-library-name! (lambda (N2ba7@x N2ba8@val) (simple-struct-set! N2ba7@x '1 N2ba8@val))) (set! N2d04@N2b24@set-library-name! N2b24@set-library-name!) (set! N2b26@library-version (lambda (N2bab@x) (simple-struct-ref N2bab@x '2))) (set! N2d05@N2b26@library-version N2b26@library-version) (set! N2b28@set-library-version! (lambda (N2bad@x N2bae@val) (simple-struct-set! N2bad@x '2 N2bae@val))) (set! N2d06@N2b28@set-library-version! N2b28@set-library-version!) (set! N2b2a@library-imp* (lambda (N2bb1@x) (simple-struct-ref N2bb1@x '3))) (set! N2d07@N2b2a@library-imp* N2b2a@library-imp*) (set! N2b2c@set-library-imp*! (lambda (N2bb3@x N2bb4@val) (simple-struct-set! N2bb3@x '3 N2bb4@val))) (set! N2d08@N2b2c@set-library-imp*! N2b2c@set-library-imp*!) (set! N2b2e@library-vis* (lambda (N2bb7@x) (simple-struct-ref N2bb7@x '4))) (set! N2d09@N2b2e@library-vis* N2b2e@library-vis*) (set! N2b30@set-library-vis*! (lambda (N2bb9@x N2bba@val) (simple-struct-set! N2bb9@x '4 N2bba@val))) (set! N2d0a@N2b30@set-library-vis*! N2b30@set-library-vis*!) (set! N2b32@library-inv* (lambda (N2bbd@x) (simple-struct-ref N2bbd@x '5))) (set! N2d0b@N2b32@library-inv* N2b32@library-inv*) (set! N2b34@set-library-inv*! (lambda (N2bbf@x N2bc0@val) (simple-struct-set! N2bbf@x '5 N2bc0@val))) (set! N2d0c@N2b34@set-library-inv*! N2b34@set-library-inv*!) (set! N2b36@library-subst (lambda (N2bc3@x) (simple-struct-ref N2bc3@x '6))) (set! N2d0d@N2b36@library-subst N2b36@library-subst) (set! N2b38@set-library-subst! (lambda (N2bc5@x N2bc6@val) (simple-struct-set! N2bc5@x '6 N2bc6@val))) (set! N2d0e@N2b38@set-library-subst! N2b38@set-library-subst!) (set! N2b3a@library-env (lambda (N2bc9@x) (simple-struct-ref N2bc9@x '7))) (set! N2d0f@N2b3a@library-env N2b3a@library-env) (set! N2b3c@set-library-env! (lambda (N2bcb@x N2bcc@val) (simple-struct-set! N2bcb@x '7 N2bcc@val))) (set! N2d10@N2b3c@set-library-env! N2b3c@set-library-env!) (set! N2b3e@library-visit-state (lambda (N2bcf@x) (simple-struct-ref N2bcf@x '8))) (set! N2d11@N2b3e@library-visit-state N2b3e@library-visit-state) (set! N2b40@set-library-visit-state! (lambda (N2bd1@x N2bd2@val) (simple-struct-set! N2bd1@x '8 N2bd2@val))) (set! N2d12@N2b40@set-library-visit-state! N2b40@set-library-visit-state!) (set! N2b42@library-invoke-state (lambda (N2bd5@x) (simple-struct-ref N2bd5@x '9))) (set! N2d13@N2b42@library-invoke-state N2b42@library-invoke-state) (set! N2b44@set-library-invoke-state! (lambda (N2bd7@x N2bd8@val) (simple-struct-set! N2bd7@x '9 N2bd8@val))) (set! N2d14@N2b44@set-library-invoke-state! N2b44@set-library-invoke-state!) (set! N2b46@library-visit-code (lambda (N2bdb@x) (simple-struct-ref N2bdb@x '10))) (set! N2d15@N2b46@library-visit-code N2b46@library-visit-code) (set! N2b48@set-library-visit-code! (lambda (N2bdd@x N2bde@val) (simple-struct-set! N2bdd@x '10 N2bde@val))) (set! N2d16@N2b48@set-library-visit-code! N2b48@set-library-visit-code!) (set! N2b4a@library-invoke-code (lambda (N2be1@x) (simple-struct-ref N2be1@x '11))) (set! N2d17@N2b4a@library-invoke-code N2b4a@library-invoke-code) (set! N2b4c@set-library-invoke-code! (lambda (N2be3@x N2be4@val) (simple-struct-set! N2be3@x '11 N2be4@val))) (set! N2d18@N2b4c@set-library-invoke-code! N2b4c@set-library-invoke-code!) (set! N2b4e@library-visible? (lambda (N2be7@x) (simple-struct-ref N2be7@x '12))) (set! N2d19@N2b4e@library-visible? N2b4e@library-visible?) (set! N2b50@set-library-visible?! (lambda (N2be9@x N2bea@val) (simple-struct-set! N2be9@x '12 N2bea@val))) (set! N2d1a@N2b50@set-library-visible?! N2b50@set-library-visible?!) (set! N2b52@library-source-file-name (lambda (N2bed@x) (simple-struct-ref N2bed@x '13))) (set! N2d1b@N2b52@library-source-file-name N2b52@library-source-file-name) (set! N2b54@set-library-source-file-name! (lambda (N2bef@x N2bf0@val) (simple-struct-set! N2bef@x '13 N2bf0@val))) (set! N2d1c@N2b54@set-library-source-file-name! N2b54@set-library-source-file-name!) (set! N2b56@dummy '3) (set! N2d1d@N2b56@dummy N2b56@dummy) (set! N2b58@find-dependencies (lambda (N2bf3@ls) (if (null? N2bf3@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! N2d1e@N2b58@find-dependencies N2b58@find-dependencies) (set! N2b5a@find-library-by (lambda (N2bf5@pred) (let N2bf9@f ((N2bf7@ls ((N2b10@current-library-collection)))) (if (null? N2bf7@ls) '#f (if (N2bf5@pred (car N2bf7@ls)) (car N2bf7@ls) (N2bf9@f (cdr N2bf7@ls))))))) (set! N2d1f@N2b5a@find-library-by N2b5a@find-library-by) (set! N2b5c@library-path (N2a66@N2944@make-parameter '(".") (lambda (N2bfb@x) (if (and (list? N2bfb@x) (for-all string? N2bfb@x)) (map (lambda (N2bfd@x) N2bfd@x) N2bfb@x) (assertion-violation 'library-path '"not a list of strings" N2bfb@x))))) (set! N2d20@N2b5c@library-path N2b5c@library-path) (set! N2b5e@library-extensions (N2a66@N2944@make-parameter '(".sls" ".ss" ".scm") (lambda (N2bff@x) (if (and (list? N2bff@x) (for-all string? N2bff@x)) (map (lambda (N2c01@x) N2c01@x) N2bff@x) (assertion-violation 'library-extensions '"not a list of strings" N2bff@x))))) (set! N2d21@N2b5e@library-extensions N2b5e@library-extensions) (set! N2b60@library-name->file-name (lambda (N2c03@x) (call-with-values (lambda () (open-string-output-port)) (lambda (N2c09@N2c06 N2c0a@N2c08) (let ((N2c0d@extract N2c0a@N2c08) (N2c0e@p N2c09@N2c06)) (letrec* ((N2c12@display-hex (lambda (N2c1b@n) (if (<= '0 N2c1b@n '9) (display N2c1b@n N2c0e@p) (display (integer->char (+ (char->integer '#\a) (- N2c1b@n '10))) N2c0e@p))))) (begin (let N2c15@f ((N2c13@ls N2c03@x)) (if (not (null? N2c13@ls)) (begin (display '"/" N2c0e@p) (for-each (lambda (N2c17@c) (if (or (char<=? '#\a N2c17@c '#\z) (char<=? '#\A N2c17@c '#\Z) (char<=? '#\0 N2c17@c '#\9) (memv N2c17@c '(#\- #\. #\_ #\~))) (display N2c17@c N2c0e@p) (begin (display '"%" N2c0e@p) (let ((N2c19@n (char->integer N2c17@c))) (begin (N2c12@display-hex (quotient N2c19@n '16)) (N2c12@display-hex (remainder N2c19@n '16))))))) (string->list (symbol->string (car N2c13@ls)))) (N2c15@f (cdr N2c13@ls))) (void))) (N2c0d@extract)))))))) (set! N2d22@N2b60@library-name->file-name N2b60@library-name->file-name) (set! N2b62@file-locator (N2a66@N2944@make-parameter (lambda (N2c1d@x) (let ((N2c1f@str (N2b60@library-name->file-name N2c1d@x))) (let N2c27@f ((N2c21@ls (N2b5c@library-path)) (N2c22@exts (N2b5e@library-extensions)) (N2c23@failed-list '())) (if (null? N2c21@ls) (letrec* ((N2c31@N2c2c (make-record-type-descriptor '&library-resolution &condition-rtd 'N2c2f '#f '#f '#((immutable library) (immutable files)))) (N2c33@N2c2e '#f) (N2c35@N2c2d (make-record-constructor-descriptor N2c31@N2c2c &condition-rcd N2c33@N2c2e)) (N2c38@N2c2b (record-predicate N2c31@N2c2c)) (N2c3a@make-library-resolution-condition (record-constructor N2c35@N2c2d)) (N2c3c@N2c29 (record-accessor N2c31@N2c2c '0)) (N2c3e@N2c2a (record-accessor N2c31@N2c2c '1)) (N2c40@library-resolution-condition? (condition-predicate N2c31@N2c2c)) (N2c42@condition-library (condition-accessor N2c31@N2c2c N2c3c@N2c29)) (N2c44@condition-files (condition-accessor N2c31@N2c2c N2c3e@N2c2a))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (N2c3a@make-library-resolution-condition N2c1d@x (reverse N2c23@failed-list))))) (if (null? N2c22@exts) (N2c27@f (cdr N2c21@ls) (N2b5e@library-extensions) N2c23@failed-list) (let ((N2c45@name (string-append (car N2c21@ls) N2c1f@str (car N2c22@exts)))) (if (file-exists? N2c45@name) N2c45@name (N2c27@f N2c21@ls (cdr N2c22@exts) (cons N2c45@name N2c23@failed-list))))))))) (lambda (N2c47@f) (if (procedure? N2c47@f) N2c47@f (assertion-violation 'file-locator '"not a procedure" N2c47@f))))) (set! N2d23@N2b62@file-locator N2b62@file-locator) (set! N2b64@serialize-all (lambda (N2c49@serialize N2c4a@compile) (letrec* ((N2c4e@library-desc (lambda (N2c51@x) (list (N2b1e@library-id N2c51@x) (N2b22@library-name N2c51@x))))) (for-each (lambda (N2c4f@x) (if (N2b52@library-source-file-name N2c4f@x) (N2c49@serialize (N2b52@library-source-file-name N2c4f@x) (list (N2b1e@library-id N2c4f@x) (N2b22@library-name N2c4f@x) (N2b26@library-version N2c4f@x) (map N2c4e@library-desc (N2b2a@library-imp* N2c4f@x)) (map N2c4e@library-desc (N2b2e@library-vis* N2c4f@x)) (map N2c4e@library-desc (N2b32@library-inv* N2c4f@x)) (N2b36@library-subst N2c4f@x) (N2b3a@library-env N2c4f@x) (N2c4a@compile (N2b46@library-visit-code N2c4f@x)) (N2c4a@compile (N2b4a@library-invoke-code N2c4f@x)) (N2b4e@library-visible? N2c4f@x))) (void))) ((N2b10@current-library-collection)))))) (set! N2d24@N2b64@serialize-all N2b64@serialize-all) (set! N2b66@current-precompiled-library-loader (N2a66@N2944@make-parameter (lambda (N2c53@filename N2c54@sk) '#f))) (set! N2d25@N2b66@current-precompiled-library-loader N2b66@current-precompiled-library-loader) (set! N2b68@try-load-from-file (lambda (N2c57@filename) ((N2b66@current-precompiled-library-loader) N2c57@filename (lambda N2c7d (let ((N2c7e (length N2c7d))) (if (= N2c7e '11) (apply (lambda (N2c59@id N2c5a@name N2c5b@ver N2c5c@imp* N2c5d@vis* N2c5e@inv* N2c5f@exp-subst N2c60@exp-env N2c61@visit-proc N2c62@invoke-proc N2c63@visible?) (let N2c71@f ((N2c6f@deps (append N2c5c@imp* N2c5d@vis* N2c5e@inv*))) (if (null? N2c6f@deps) (begin (N2b7c@install-library N2c59@id N2c5a@name N2c5b@ver N2c5c@imp* N2c5d@vis* N2c5e@inv* N2c5f@exp-subst N2c60@exp-env N2c61@visit-proc N2c62@invoke-proc '#f '#f N2c63@visible? '#f) '#t) (let ((N2c73@d (car N2c6f@deps))) (let ((N2c75@label (car N2c73@d)) (N2c76@dname (cadr N2c73@d))) (let ((N2c79@l (N2b72@find-library-by-name N2c76@dname))) (if (and (N2b1c@library? N2c79@l) (eq? N2c75@label (N2b1e@library-id N2c79@l))) (N2c71@f (cdr N2c6f@deps)) (begin (if N2a60@N2938@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" N2c5a@name N2c76@dname N2c57@filename) (void)) '#f)))))))) N2c7d) (if (>= N2c7e '0) (apply (lambda N2c7b@others '#f) N2c7d) (error 'apply '"invalid arg count")))))))) (set! N2d26@N2b68@try-load-from-file N2b68@try-load-from-file) (set! N2b6a@library-loader (N2a66@N2944@make-parameter (lambda (N2c7f@x) (let ((N2c81@file-name ((N2b62@file-locator) N2c7f@x))) (if (not N2c81@file-name) (assertion-violation '#f '"cannot file library" N2c7f@x) (or (N2b68@try-load-from-file N2c81@file-name) ((N2b6c@current-library-expander) (N2a65@N2942@read-library-source-file N2c81@file-name) N2c81@file-name (lambda (N2c83@name) (if (not (fast-equal? N2c83@name N2c7f@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (N2c89@N2c86 N2c8a@N2c88) (let ((N2c8d@e N2c8a@N2c88) (N2c8e@p N2c89@N2c86)) (begin (display '"expected to find library " N2c8e@p) (write N2c7f@x N2c8e@p) (display '" in file " N2c8e@p) (display N2c81@file-name N2c8e@p) (display '", found " N2c8e@p) (write N2c83@name N2c8e@p) (display '" instead" N2c8e@p) (N2c8d@e)))))) (void)))))))) (lambda (N2c91@f) (if (procedure? N2c91@f) N2c91@f (assertion-violation 'library-locator '"not a procedure" N2c91@f))))) (set! N2d27@N2b6a@library-loader N2b6a@library-loader) (set! N2b6c@current-library-expander (N2a66@N2944@make-parameter (lambda (N2c93@x) (assertion-violation 'library-expander '"not initialized")) (lambda (N2c95@f) (if (procedure? N2c95@f) N2c95@f (assertion-violation 'library-expander '"not a procedure" N2c95@f))))) (set! N2d28@N2b6c@current-library-expander N2b6c@current-library-expander) (set! N2b6e@external-pending-libraries (N2a66@N2944@make-parameter '())) (set! N2d29@N2b6e@external-pending-libraries N2b6e@external-pending-libraries) (set! N2b70@find-external-library (lambda (N2c97@name) (begin (if (member N2c97@name (N2b6e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" N2c97@name) (void)) (let ((N2c9d@N2c9a N2b6e@external-pending-libraries) (N2c9e@N2c9c (cons N2c97@name (N2b6e@external-pending-libraries)))) (let ((N2ca1@swap (lambda () (let ((N2ca3@t (N2c9d@N2c9a))) (begin (N2c9d@N2c9a N2c9e@N2c9c) (set! N2c9e@N2c9c N2ca3@t)))))) (dynamic-wind N2ca1@swap (lambda () (begin ((N2b6a@library-loader) N2c97@name) (or (N2b5a@find-library-by (lambda (N2ca5@x) (fast-equal? (N2b22@library-name N2ca5@x) N2c97@name))) (assertion-violation '#f '"handling external library did not yield the correct library" N2c97@name)))) N2ca1@swap)))))) (set! N2d2a@N2b70@find-external-library N2b70@find-external-library) (set! N2b72@find-library-by-name (lambda (N2ca7@name) (or (N2b5a@find-library-by (lambda (N2ca9@x) (fast-equal? (N2b22@library-name N2ca9@x) N2ca7@name))) (N2b70@find-external-library N2ca7@name)))) (set! N2d2b@N2b72@find-library-by-name N2b72@find-library-by-name) (set! N2b74@library-exists? (lambda (N2cab@name) (and (N2b5a@find-library-by (lambda (N2cad@x) (fast-equal? (N2b22@library-name N2cad@x) N2cab@name))) '#t))) (set! N2d2c@N2b74@library-exists? N2b74@library-exists?) (set! N2b76@find-library-by-spec/die (lambda (N2caf@spec) (let ((N2cb1@id (car N2caf@spec))) (or (N2b5a@find-library-by (lambda (N2cb3@x) (eq? N2cb1@id (N2b1e@library-id N2cb3@x)))) (assertion-violation '#f '"cannot find library with required spec" N2caf@spec))))) (set! N2d2d@N2b76@find-library-by-spec/die N2b76@find-library-by-spec/die) (set! N2b78@label->binding-table (make-eq-hashtable)) (set! N2d2e@N2b78@label->binding-table N2b78@label->binding-table) (set! N2b7a@install-library-record (lambda (N2cb5@lib) (begin (let ((N2cb7@exp-env (N2b3a@library-env N2cb5@lib))) (for-each (lambda (N2cb9@x) (let ((N2cbb@label (car N2cb9@x)) (N2cbc@binding (cdr N2cb9@x))) (let ((N2cbf@binding (let ((N2cc1@t (car N2cbc@binding))) (if (memv N2cc1@t '(global)) (cons 'global (cons N2cb5@lib (cdr N2cbc@binding))) (if (memv N2cc1@t '(global-macro)) (cons 'global-macro (cons N2cb5@lib (cdr N2cbc@binding))) (if (memv N2cc1@t '(global-macro!)) (cons 'global-macro! (cons N2cb5@lib (cdr N2cbc@binding))) N2cbc@binding)))))) (begin (if (hashtable-ref N2b78@label->binding-table N2cbb@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" N2cbb@label (hashtable-ref N2b78@label->binding-table N2cbb@label '#f) N2cbf@binding) (exit)) (void)) (hashtable-set! N2b78@label->binding-table N2cbb@label N2cbf@binding))))) N2cb7@exp-env)) ((N2b10@current-library-collection) N2cb5@lib)))) (set! N2d2f@N2b7a@install-library-record N2b7a@install-library-record) (set! N2b7c@install-library (lambda (N2cc3@id N2cc4@name N2cc5@ver N2cc6@imp* N2cc7@vis* N2cc8@inv* N2cc9@exp-subst N2cca@exp-env N2ccb@visit-proc N2ccc@invoke-proc N2ccd@visit-code N2cce@invoke-code N2ccf@visible? N2cd0@source-file-name) (let ((N2cdf@imp-lib* (map N2b76@find-library-by-spec/die N2cc6@imp*)) (N2ce0@vis-lib* (map N2b76@find-library-by-spec/die N2cc7@vis*)) (N2ce1@inv-lib* (map N2b76@find-library-by-spec/die N2cc8@inv*))) (begin (if (not (and (symbol? N2cc3@id) (list? N2cc4@name) (list? N2cc5@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" N2cc3@id N2cc4@name N2cc5@ver) (void)) (if (N2b74@library-exists? N2cc4@name) (assertion-violation 'install-library '"library is already installed" N2cc4@name) (void)) (let ((N2ce5@lib (make-simple-struct 'library '15 (list N2cc3@id N2cc4@name N2cc5@ver N2cdf@imp-lib* N2ce0@vis-lib* N2ce1@inv-lib* N2cc9@exp-subst N2cca@exp-env N2ccb@visit-proc N2ccc@invoke-proc N2ccd@visit-code N2cce@invoke-code N2ccf@visible? N2cd0@source-file-name)))) (N2b7a@install-library-record N2ce5@lib)))))) (set! N2d30@N2b7c@install-library N2b7c@install-library) (set! N2b7e@imported-label->binding (lambda (N2ce7@lab) (hashtable-ref N2b78@label->binding-table N2ce7@lab '#f))) (set! N2d31@N2b7e@imported-label->binding N2b7e@imported-label->binding) (set! N2b80@invoke-library (lambda (N2ce9@lib) (let ((N2ceb@invoke (N2b42@library-invoke-state N2ce9@lib))) (if (procedure? N2ceb@invoke) (begin (N2b44@set-library-invoke-state! N2ce9@lib (lambda () (assertion-violation 'invoke '"circularity detected" N2ce9@lib))) (for-each N2b80@invoke-library (N2b32@library-inv* N2ce9@lib)) (N2b44@set-library-invoke-state! N2ce9@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" N2ce9@lib))) (N2ceb@invoke) (N2b44@set-library-invoke-state! N2ce9@lib '#t)) (void))))) (set! N2d32@N2b80@invoke-library N2b80@invoke-library) (set! N2b82@visit-library (lambda (N2ced@lib) (let ((N2cef@visit (N2b3e@library-visit-state N2ced@lib))) (if (procedure? N2cef@visit) (begin (N2b40@set-library-visit-state! N2ced@lib (lambda () (assertion-violation 'visit '"circularity detected" N2ced@lib))) (for-each N2b80@invoke-library (N2b2e@library-vis* N2ced@lib)) (N2b40@set-library-visit-state! N2ced@lib (lambda () (assertion-violation 'invoke '"first visit did not return" N2ced@lib))) (N2cef@visit) (N2b40@set-library-visit-state! N2ced@lib '#t)) (void))))) (set! N2d33@N2b82@visit-library N2b82@visit-library) (set! N2b84@invoke-library-by-spec (lambda (N2cf1@spec) (N2b80@invoke-library (N2b76@find-library-by-spec/die N2cf1@spec)))) (set! N2d34@N2b84@invoke-library-by-spec N2b84@invoke-library-by-spec) (set! N2b86@installed-libraries (lambda N2cf9 (let ((N2cfa (length N2cf9))) (if (= N2cfa '1) (apply (lambda (N2cf3@all?) (let N2cf7@f ((N2cf5@ls ((N2b10@current-library-collection)))) (if (null? N2cf5@ls) '() (if (or N2cf3@all? (N2b4e@library-visible? (car N2cf5@ls))) (cons (car N2cf5@ls) (N2cf7@f (cdr N2cf5@ls))) (N2cf7@f (cdr N2cf5@ls)))))) N2cf9) (if (= N2cfa '0) (apply (lambda () (N2b86@installed-libraries '#f)) N2cf9) (error 'apply '"invalid arg count")))))) (set! N2d35@N2b86@installed-libraries N2b86@installed-libraries) (set! N2b88@library-spec (lambda (N2cfb@x) (begin (if (not (N2b1c@library? N2cfb@x)) (assertion-violation 'library-spec '"not a library" N2cfb@x) (void)) (list (N2b1e@library-id N2cfb@x) (N2b22@library-name N2cfb@x) (N2b26@library-version N2cfb@x))))) (set! N2d36@N2b88@library-spec N2b88@library-spec) (void))
(begin (set! N2d3a@build-global-define (unspecified)) (set! N2dab@build-lambda (unspecified)) (set! N2dad@build-case-lambda (unspecified)) (set! N2ddb@build-sequence (unspecified)) (set! N2ddd@build-void (unspecified)) (set! N2ddf@build-letrec (unspecified)) (set! N2de1@build-let (unspecified)) (set! N2de3@build-named-let (unspecified)) (set! N2de5@build-letrec* (unspecified)) (set! N2de7@build-library-letrec* (unspecified)) (set! N2de9@build-receive (unspecified)) (set! N2d3a@build-global-define (lambda (N2dea@x) (N2ddd@build-void))) (set! N2e78@N2d3a@build-global-define N2d3a@build-global-define) (set! N2dab@build-lambda (lambda (N2dec@ae N2ded@vars N2dee@exp) (list 'lambda N2ded@vars N2dee@exp))) (set! N2e79@N2dab@build-lambda N2dab@build-lambda) (set! N2dad@build-case-lambda (lambda (N2df2@ae N2df3@vars* N2df4@exp*) (letrec* ((N2df9@build-error (lambda (N2e30@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (N2dfb@build-pred (lambda (N2e18@ae N2e19@n N2e1a@vars) (call-with-values (lambda () (let N2e26@f ((N2e22@vars N2e1a@vars) (N2e23@count '0)) (if (pair? N2e22@vars) (N2e26@f (cdr N2e22@vars) (+ N2e23@count '1)) (if (null? N2e22@vars) (values N2e23@count '=) (values N2e23@count '>=))))) (lambda (N2e28@N2e1f N2e29@N2e21) (let ((N2e2c@pred N2e29@N2e21) (N2e2d@count N2e28@N2e1f)) (list (list 'primitive N2e2c@pred) N2e19@n (list 'quote N2e2d@count))))))) (N2dfd@build-apply (lambda (N2e10@ae N2e11@g N2e12@vars N2e13@exp) (list '(primitive apply) (N2dab@build-lambda N2e10@ae N2e12@vars N2e13@exp) N2e11@g))) (N2dff@expand-case-lambda (lambda (N2e00@ae N2e01@vars N2e02@exp*) (let ((N2e06@g (gensym)) (N2e07@n (gensym))) (list 'lambda N2e06@g (N2de1@build-let N2e00@ae (list N2e07@n) (list (list '(primitive length) N2e06@g)) (let N2e0e@f ((N2e0a@vars* N2df3@vars*) (N2e0b@exp* N2e02@exp*)) (if (null? N2e0a@vars*) (N2df9@build-error N2e00@ae) (list 'if (N2dfb@build-pred N2e00@ae N2e07@n (car N2e0a@vars*)) (N2dfd@build-apply N2e00@ae N2e06@g (car N2e0a@vars*) (car N2e0b@exp*)) (N2e0e@f (cdr N2e0a@vars*) (cdr N2e0b@exp*))))))))))) (if (= (length N2df4@exp*) '1) (N2dab@build-lambda N2df2@ae (car N2df3@vars*) (car N2df4@exp*)) (N2dff@expand-case-lambda N2df2@ae N2df3@vars* N2df4@exp*))))) (set! N2e7a@N2dad@build-case-lambda N2dad@build-case-lambda) (set! N2ddb@build-sequence (lambda (N2e32@ae N2e33@exps) (let N2e38@loop ((N2e36@exps N2e33@exps)) (if (null? (cdr N2e36@exps)) (car N2e36@exps) (if (equal? (car N2e36@exps) (N2ddd@build-void)) (N2e38@loop (cdr N2e36@exps)) (cons 'begin N2e36@exps)))))) (set! N2e7b@N2ddb@build-sequence N2ddb@build-sequence) (set! N2ddd@build-void (lambda () '((primitive void)))) (set! N2e7c@N2ddd@build-void N2ddd@build-void) (set! N2ddf@build-letrec (lambda (N2e3a@ae N2e3b@vars N2e3c@val-exps N2e3d@body-exp) (if (null? N2e3b@vars) N2e3d@body-exp (list 'letrec (map list N2e3b@vars N2e3c@val-exps) N2e3d@body-exp)))) (set! N2e7d@N2ddf@build-letrec N2ddf@build-letrec) (set! N2de1@build-let (lambda (N2e42@ae N2e43@vars N2e44@val-exps N2e45@body-exp) (if (null? N2e43@vars) N2e45@body-exp (list 'let (map list N2e43@vars N2e44@val-exps) N2e45@body-exp)))) (set! N2e7e@N2de1@build-let N2de1@build-let) (set! N2de3@build-named-let (lambda (N2e4a@ae N2e4b@name N2e4c@vars N2e4d@val-exps N2e4e@body-exp) (list 'let N2e4b@name (map list N2e4c@vars N2e4d@val-exps) N2e4e@body-exp))) (set! N2e7f@N2de3@build-named-let N2de3@build-named-let) (set! N2de5@build-letrec* (lambda (N2e54@ae N2e55@vars N2e56@val-exps N2e57@body-exp) (if (null? N2e55@vars) N2e57@body-exp (list 'letrec* (map list N2e55@vars N2e56@val-exps) N2e57@body-exp)))) (set! N2e80@N2de5@build-letrec* N2de5@build-letrec*) (set! N2de7@build-library-letrec* (lambda (N2e5c@ae N2e5d@name N2e5e@vars N2e5f@locs N2e60@val-exps N2e61@body-exp) (cons 'begin (append (map (lambda (N2e68@var) (cons 'set! (cons N2e68@var '((unspecified))))) N2e5e@vars) (append (apply append (map (lambda (N2e6a@var N2e6b@loc N2e6c@val-exp) (list (list 'set! N2e6a@var N2e6c@val-exp) (list 'set! N2e6b@loc N2e6a@var))) N2e5e@vars N2e5f@locs N2e60@val-exps)) (list N2e61@body-exp)))))) (set! N2e81@N2de7@build-library-letrec* N2de7@build-library-letrec*) (set! N2de9@build-receive (lambda (N2e70@ae N2e71@vars N2e72@producer N2e73@body*) (begin (display '"************** in ") (cons 'receive (cons N2e71@vars (cons N2e72@producer N2e73@body*)))))) (set! N2e82@N2de9@build-receive N2de9@build-receive) (void))
(begin (set! N2e91@file-options-macro (unspecified)) (set! N2e93@set-cons (unspecified)) (set! N2e95@set-union (unspecified)) (set! N2e9a@top-mark* (unspecified)) (set! N2e9c@top-marked? (unspecified)) (set! N2e9e@gen-lexical (unspecified)) (set! N2ea0@gen-global (unspecified)) (set! N2ea2@gen-label (unspecified)) (set! N2ea4@gen-top-level-label (unspecified)) (set! N2ea6@gen-define-label+loc (unspecified)) (set! N2ea8@gen-define-label (unspecified)) (set! N2eb2@rib? (unspecified)) (set! N2eb4@rib-sym* (unspecified)) (set! N2eb6@set-rib-sym*! (unspecified)) (set! N2eb8@rib-mark** (unspecified)) (set! N2eba@set-rib-mark**! (unspecified)) (set! N2ebc@rib-label* (unspecified)) (set! N2ebe@set-rib-label*! (unspecified)) (set! N2ec0@rib-sealed/freq (unspecified)) (set! N2ec2@set-rib-sealed/freq! (unspecified)) (set! N2ec4@rib-cache (unspecified)) (set! N2ec6@set-rib-cache! (unspecified)) (set! N2ec8@dummy (unspecified)) (set! N2eca@make-empty-rib (unspecified)) (set! N2ecc@extend-rib! (unspecified)) (set! N2ece@extend-rib/nc! (unspecified)) (set! N2ed0@make-rib-map (unspecified)) (set! N2ed2@seal-rib! (unspecified)) (set! N2ed4@unseal-rib! (unspecified)) (set! N2ed6@make-full-rib (unspecified)) (set! N2ed8@rp (unspecified)) (set! N2ee2@stx? (unspecified)) (set! N2ee4@stx-expr (unspecified)) (set! N2ee6@set-stx-expr! (unspecified)) (set! N2ee8@stx-mark* (unspecified)) (set! N2eea@set-stx-mark*! (unspecified)) (set! N2eec@stx-subst* (unspecified)) (set! N2eee@set-stx-subst*! (unspecified)) (set! N2ef0@stx-ae* (unspecified)) (set! N2ef2@set-stx-ae*! (unspecified)) (set! N2ef4@dummy (unspecified)) (set! N2ef6@datum->stx (unspecified)) (set! N2ef8@gen-mark (unspecified)) (set! N2efa@anti-mark (unspecified)) (set! N2efc@anti-mark? (unspecified)) (set! N2efe@mkstx (unspecified)) (set! N2f00@add-mark (unspecified)) (set! N2f02@add-subst (unspecified)) (set! N2f04@syntax-kind? (unspecified)) (set! N2f06@syntax-vector->list (unspecified)) (set! N2f08@syntax-pair? (unspecified)) (set! N2f0a@syntax-vector? (unspecified)) (set! N2f0c@syntax-null? (unspecified)) (set! N2f0e@syntax-list? (unspecified)) (set! N2f10@syntax-car (unspecified)) (set! N2f12@syntax-cdr (unspecified)) (set! N2f14@syntax->list (unspecified)) (set! N2f16@id? (unspecified)) (set! N2f18@id->sym (unspecified)) (set! N2f1a@bound-id=? (unspecified)) (set! N2f1c@free-id=? (unspecified)) (set! N2f1e@valid-bound-ids? (unspecified)) (set! N2f20@distinct-bound-ids? (unspecified)) (set! N2f22@bound-id-member? (unspecified)) (set! N2f24@self-evaluating? (unspecified)) (set! N2f26@strip-annotations (unspecified)) (set! N2f28@strip (unspecified)) (set! N2f2a@stx->datum (unspecified)) (set! N2f2c@id->label (unspecified)) (set! N2f2e@label->binding (unspecified)) (set! N2f30@make-binding (unspecified)) (set! N2f32@binding-type (unspecified)) (set! N2f34@binding-value (unspecified)) (set! N2f36@raise-unbound-error (unspecified)) (set! N2f38@syntax-type (unspecified)) (set! N2f46@sanitize-binding (unspecified)) (set! N2f48@make-variable-transformer (unspecified)) (set! N2f4a@variable-transformer? (unspecified)) (set! N2f4c@variable-transformer-procedure (unspecified)) (set! N2f4e@make-eval-transformer (unspecified)) (set! N309f@parse-define (unspecified)) (set! N30a1@parse-define-syntax (unspecified)) (set! N30a3@scheme-stx-hashtable (unspecified)) (set! N30a5@scheme-stx (unspecified)) (set! N30a7@lexical-var (unspecified)) (set! N30a9@lexical-mutable? (unspecified)) (set! N30ab@set-lexical-mutable! (unspecified)) (set! N30ad@add-lexical (unspecified)) (set! N30af@add-lexicals (unspecified)) (set! N30b1@letrec-helper (unspecified)) (set! N30b3@let-transformer (unspecified)) (set! N30b5@letrec-transformer (unspecified)) (set! N30b7@letrec*-transformer (unspecified)) (set! N30b9@fluid-let-syntax-transformer (unspecified)) (set! N30bb@type-descriptor-transformer (unspecified)) (set! N30bd@record-type-descriptor-transformer (unspecified)) (set! N30bf@record-constructor-descriptor-transformer (unspecified)) (set! N30c1@when-macro (unspecified)) (set! N30c3@unless-macro (unspecified)) (set! N30c5@if-transformer (unspecified)) (set! N30c7@and-transformer (unspecified)) (set! N30c9@or-transformer (unspecified)) (set! N30cb@case-macro (unspecified)) (set! N30cd@quote-transformer (unspecified)) (set! N30cf@case-lambda-transformer (unspecified)) (set! N30d1@lambda-transformer (unspecified)) (set! N30d3@bless (unspecified)) (set! N30d5@with-syntax-macro (unspecified)) (set! N30d7@invalid-fmls-error (unspecified)) (set! N30d9@let-macro (unspecified)) (set! N30db@let-values-macro (unspecified)) (set! N30dd@let*-values-macro (unspecified)) (set! N30df@trace-lambda-macro (unspecified)) (set! N30e1@trace-define-macro (unspecified)) (set! N30e3@trace-define-syntax-macro (unspecified)) (set! N30e5@trace-let/rec-syntax (unspecified)) (set! N30e7@trace-let-syntax-macro (unspecified)) (set! N30e9@trace-letrec-syntax-macro (unspecified)) (set! N30eb@guard-macro (unspecified)) (set! N30ed@define-enumeration-macro (unspecified)) (set! N30ef@time-macro (unspecified)) (set! N30f1@delay-macro (unspecified)) (set! N30f3@assert-macro (unspecified)) (set! N30f5@endianness-macro (unspecified)) (set! N30f7@identifier-syntax-macro (unspecified)) (set! N30f9@do-macro (unspecified)) (set! N30fb@let*-macro (unspecified)) (set! N30fd@or-macro (unspecified)) (set! N30ff@and-macro (unspecified)) (set! N3101@cond-macro (unspecified)) (set! N3103@do-include (unspecified)) (set! N3105@include-macro (unspecified)) (set! N3107@include-into-macro (unspecified)) (set! N3109@syntax-rules-macro (unspecified)) (set! N310b@quasiquote-macro (unspecified)) (set! N310d@quasisyntax-macro (unspecified)) (set! N310f@define-struct-macro (unspecified)) (set! N3111@define-record-type-macro (unspecified)) (set! N3113@define-condition-type-macro (unspecified)) (set! N3115@incorrect-usage-macro (unspecified)) (set! N3117@parameterize-macro (unspecified)) (set! N3119@foreign-call-transformer (unspecified)) (set! N311b@convert-pattern (unspecified)) (set! N311d@syntax-dispatch (unspecified)) (set! N311f@ellipsis? (unspecified)) (set! N3121@underscore? (unspecified)) (set! N3123@verify-literals (unspecified)) (set! N3125@syntax-case-transformer (unspecified)) (set! N3127@ellipsis-map (unspecified)) (set! N3129@syntax-transformer (unspecified)) (set! N312b@core-macro-transformer (unspecified)) (set! N312d@symbol-macro (unspecified)) (set! N312f@macro-transformer (unspecified)) (set! N3131@local-macro-transformer (unspecified)) (set! N3133@do-macro-call (unspecified)) (set! N3135@chi-macro (unspecified)) (set! N3137@chi-local-macro (unspecified)) (set! N3139@chi-global-macro (unspecified)) (set! N313b@chi-expr* (unspecified)) (set! N313d@chi-application (unspecified)) (set! N313f@chi-expr (unspecified)) (set! N3141@chi-set! (unspecified)) (set! N3143@verify-formals (unspecified)) (set! N3145@chi-lambda-clause (unspecified)) (set! N3147@chi-lambda-clause* (unspecified)) (set! N3149@chi-defun (unspecified)) (set! N314b@chi-rhs (unspecified)) (set! N314d@expand-interaction-rhs*/init* (unspecified)) (set! N314f@chi-rhs* (unspecified)) (set! N3151@find-bound=? (unspecified)) (set! N3153@find-dups (unspecified)) (set! N3155@chi-internal (unspecified)) (set! N3157@parse-module (unspecified)) (set! N3161@module-interface? (unspecified)) (set! N3163@module-interface-first-mark (unspecified)) (set! N3165@set-module-interface-first-mark! (unspecified)) (set! N3167@module-interface-exp-id-vec (unspecified)) (set! N3169@set-module-interface-exp-id-vec! (unspecified)) (set! N316b@module-interface-exp-lab-vec (unspecified)) (set! N316d@set-module-interface-exp-lab-vec! (unspecified)) (set! N316f@dummy (unspecified)) (set! N3171@module-interface-exp-id* (unspecified)) (set! N3173@chi-internal-module (unspecified)) (set! N3175@copy-rib-contents! (unspecified)) (set! N3177@chi-body*-macro (unspecified)) (set! N3179@chi-body* (unspecified)) (set! N317b@expand-transformer (unspecified)) (set! N317d@parse-exports (unspecified)) (set! N317f@parse-library-name (unspecified)) (set! N3181@parse-library (unspecified)) (set! N3183@parse-import-spec* (unspecified)) (set! N3185@make-top-rib (unspecified)) (set! N3187@make-collector (unspecified)) (set! N3189@inv-collector (unspecified)) (set! N318b@vis-collector (unspecified)) (set! N318d@imp-collector (unspecified)) (set! N318f@chi-library-internal (unspecified)) (set! N3191@chi-interaction-expr (unspecified)) (set! N3193@library-body-expander (unspecified)) (set! N3195@core-library-expander (unspecified)) (set! N3197@parse-top-level-program (unspecified)) (set! N3199@top-level-expander (unspecified)) (set! N319b@rp (unspecified)) (set! N31a5@env? (unspecified)) (set! N31a7@env-names (unspecified)) (set! N31a9@set-env-names! (unspecified)) (set! N31ab@env-labels (unspecified)) (set! N31ad@set-env-labels! (unspecified)) (set! N31af@env-itc (unspecified)) (set! N31b1@set-env-itc! (unspecified)) (set! N31b3@dummy (unspecified)) (set! N31b5@rp (unspecified)) (set! N31bf@interaction-env? (unspecified)) (set! N31c1@interaction-env-rib (unspecified)) (set! N31c3@set-interaction-env-rib! (unspecified)) (set! N31c5@interaction-env-r (unspecified)) (set! N31c7@set-interaction-env-r! (unspecified)) (set! N31c9@interaction-env-locs (unspecified)) (set! N31cb@set-interaction-env-locs! (unspecified)) (set! N31cd@dummy (unspecified)) (set! N31cf@interaction-environment-symbols (unspecified)) (set! N31d1@environment-bindings (unspecified)) (set! N31d3@parse-binding (unspecified)) (set! N31d5@environment? (unspecified)) (set! N31d7@environment-symbols (unspecified)) (set! N31d9@environment (unspecified)) (set! N31db@null-environment (unspecified)) (set! N31dd@scheme-report-environment (unspecified)) (set! N31df@expand (unspecified)) (set! N31e1@eval (unspecified)) (set! N31e3@library-expander (unspecified)) (set! N31e5@boot-library-expand (unspecified)) (set! N31e7@rev-map-append (unspecified)) (set! N31e9@build-exports (unspecified)) (set! N31eb@make-export-subst (unspecified)) (set! N31ed@make-export-env/macros (unspecified)) (set! N31ef@generate-temporaries (unspecified)) (set! N31f1@free-identifier=? (unspecified)) (set! N31f3@bound-identifier=? (unspecified)) (set! N31f5@make-source-condition (unspecified)) (set! N31f7@extract-position-condition (unspecified)) (set! N31f9@expression-position (unspecified)) (set! N31fb@assertion-error (unspecified)) (set! N31fd@syntax-error (unspecified)) (set! N31ff@syntax-violation* (unspecified)) (set! N3201@syntax-violation (unspecified)) (set! N3203@identifier? (unspecified)) (set! N3205@datum->syntax (unspecified)) (set! N3207@syntax->datum (unspecified)) (set! N3209@ungensym-all (unspecified)) (set! N320b@compile-r6rs-top-level (unspecified)) (set! N320d@pre-compile-r6rs-top-level (unspecified)) (set! N320f@interaction-environment (unspecified)) (set! N3211@top-level-context (unspecified)) (set! N2e91@file-options-macro (lambda (N3212@x) (letrec* ((N3215@valid-option? (lambda (N321e@x) (and (N2f16@id? N321e@x) (memq (N2f18@id->sym N321e@x) '(no-fail no-create no-truncate)))))) (let ((N3216@t N3212@x)) (let ((N3218@ls/false (N311d@syntax-dispatch N3216@t '(_ . each-any)))) (if (and N3218@ls/false (apply (lambda (N321a@opt*) (for-all N3215@valid-option? N321a@opt*)) N3218@ls/false)) (apply (lambda (N321c@opt*) (N30d3@bless (list 'make-file-options (list 'quote N321c@opt*)))) N3218@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3216@t))))))) (set! N4bbc@N2e91@file-options-macro N2e91@file-options-macro) (set! N2e93@set-cons (lambda (N3220@x N3221@ls) (if (memq N3220@x N3221@ls) N3221@ls (cons N3220@x N3221@ls)))) (set! N4bbd@N2e93@set-cons N2e93@set-cons) (set! N2e95@set-union (lambda (N3224@ls1 N3225@ls2) (if (null? N3224@ls1) N3225@ls2 (if (memq (car N3224@ls1) N3225@ls2) (N2e95@set-union (cdr N3224@ls1) N3225@ls2) (cons (car N3224@ls1) (N2e95@set-union (cdr N3224@ls1) N3225@ls2)))))) (set! N4bbe@N2e95@set-union N2e95@set-union) (set! N2e9a@top-mark* '(top)) (set! N4bbf@N2e9a@top-mark* N2e9a@top-mark*) (set! N2e9c@top-marked? (lambda (N3228@m*) (memq 'top N3228@m*))) (set! N4bc0@N2e9c@top-marked? N2e9c@top-marked?) (set! N2e9e@gen-lexical (lambda (N322a@sym) (if (symbol? N322a@sym) (gensym N322a@sym) (if (N2ee2@stx? N322a@sym) (N2e9e@gen-lexical (N2f18@id->sym N322a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" N322a@sym))))) (set! N4bc1@N2e9e@gen-lexical N2e9e@gen-lexical) (set! N2ea0@gen-global (lambda (N322c@x) (N2e9e@gen-lexical N322c@x))) (set! N4bc2@N2ea0@gen-global N2ea0@gen-global) (set! N2ea2@gen-label (lambda (N322e@_) (gensym))) (set! N4bc3@N2ea2@gen-label N2ea2@gen-label) (set! N2ea4@gen-top-level-label (lambda (N3230@id N3231@rib) (letrec* ((N3235@find (lambda (N3240@sym N3241@mark* N3242@sym* N3243@mark** N3244@label*) (and (pair? N3242@sym*) (if (and (eq? N3240@sym (car N3242@sym*)) (same-marks? N3241@mark* (car N3243@mark**))) (car N3244@label*) (N3235@find N3240@sym N3241@mark* (cdr N3242@sym*) (cdr N3243@mark**) (cdr N3244@label*))))))) (let ((N3236@sym (N2f18@id->sym N3230@id)) (N3237@mark* (N2ee8@stx-mark* N3230@id))) (let ((N323a@sym* (N2eb4@rib-sym* N3231@rib))) (let ((N323c@t (and (memq N3236@sym (N2eb4@rib-sym* N3231@rib)) (N3235@find N3236@sym N3237@mark* N323a@sym* (N2eb8@rib-mark** N3231@rib) (N2ebc@rib-label* N3231@rib))))) (if N323c@t ((lambda (N323e@label) (if (N2d31@N2b7e@imported-label->binding N323e@label) (gensym) N323e@label)) N323c@t) (gensym)))))))) (set! N4bc4@N2ea4@gen-top-level-label N2ea4@gen-top-level-label) (set! N2ea6@gen-define-label+loc (lambda (N324a@id N324b@rib) (let ((N324e@t (N3211@top-level-context))) (if N324e@t ((lambda (N3250@env) (let ((N3252@label (N2ea4@gen-top-level-label N324a@id N324b@rib)) (N3253@locs (N31c9@interaction-env-locs N3250@env))) (values N3252@label (let ((N3256@t (assq N3252@label N3253@locs))) (if N3256@t (cdr N3256@t) (let ((N3258@loc (N2e9e@gen-lexical N324a@id))) (begin (N31cb@set-interaction-env-locs! N3250@env (cons (cons N3252@label N3258@loc) N3253@locs)) N3258@loc))))))) N324e@t) (values (gensym) (N2e9e@gen-lexical N324a@id)))))) (set! N4bc5@N2ea6@gen-define-label+loc N2ea6@gen-define-label+loc) (set! N2ea8@gen-define-label (lambda (N325a@id N325b@rib) (if (N3211@top-level-context) (N2ea4@gen-top-level-label N325a@id N325b@rib) (gensym)))) (set! N4bc6@N2ea8@gen-define-label N2ea8@gen-define-label) (set! N2eb2@rib? (lambda (N325e@x) (and (simple-struct? N325e@x) (eq? (simple-struct-name N325e@x) 'rib)))) (set! N4bc7@N2eb2@rib? N2eb2@rib?) (set! N2eb4@rib-sym* (lambda (N3260@x) (simple-struct-ref N3260@x '0))) (set! N4bc8@N2eb4@rib-sym* N2eb4@rib-sym*) (set! N2eb6@set-rib-sym*! (lambda (N3262@x N3263@val) (simple-struct-set! N3262@x '0 N3263@val))) (set! N4bc9@N2eb6@set-rib-sym*! N2eb6@set-rib-sym*!) (set! N2eb8@rib-mark** (lambda (N3266@x) (simple-struct-ref N3266@x '1))) (set! N4bca@N2eb8@rib-mark** N2eb8@rib-mark**) (set! N2eba@set-rib-mark**! (lambda (N3268@x N3269@val) (simple-struct-set! N3268@x '1 N3269@val))) (set! N4bcb@N2eba@set-rib-mark**! N2eba@set-rib-mark**!) (set! N2ebc@rib-label* (lambda (N326c@x) (simple-struct-ref N326c@x '2))) (set! N4bcc@N2ebc@rib-label* N2ebc@rib-label*) (set! N2ebe@set-rib-label*! (lambda (N326e@x N326f@val) (simple-struct-set! N326e@x '2 N326f@val))) (set! N4bcd@N2ebe@set-rib-label*! N2ebe@set-rib-label*!) (set! N2ec0@rib-sealed/freq (lambda (N3272@x) (simple-struct-ref N3272@x '3))) (set! N4bce@N2ec0@rib-sealed/freq N2ec0@rib-sealed/freq) (set! N2ec2@set-rib-sealed/freq! (lambda (N3274@x N3275@val) (simple-struct-set! N3274@x '3 N3275@val))) (set! N4bcf@N2ec2@set-rib-sealed/freq! N2ec2@set-rib-sealed/freq!) (set! N2ec4@rib-cache (lambda (N3278@x) (simple-struct-ref N3278@x '4))) (set! N4bd0@N2ec4@rib-cache N2ec4@rib-cache) (set! N2ec6@set-rib-cache! (lambda (N327a@x N327b@val) (simple-struct-set! N327a@x '4 N327b@val))) (set! N4bd1@N2ec6@set-rib-cache! N2ec6@set-rib-cache!) (set! N2ec8@dummy '3) (set! N4bd2@N2ec8@dummy N2ec8@dummy) (set! N2eca@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! N4bd3@N2eca@make-empty-rib N2eca@make-empty-rib) (set! N2ecc@extend-rib! (lambda (N327e@rib N327f@id N3280@label) (letrec* ((N3285@find (lambda (N3292@sym N3293@mark* N3294@sym* N3295@mark** N3296@label*) (and (pair? N3294@sym*) (if (and (eq? N3292@sym (car N3294@sym*)) (same-marks? N3293@mark* (car N3295@mark**))) N3296@label* (N3285@find N3292@sym N3293@mark* (cdr N3294@sym*) (cdr N3295@mark**) (cdr N3296@label*))))))) (begin (if (N2ec0@rib-sealed/freq N327e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" N327e@rib) (void)) (let ((N3286@sym (N2f18@id->sym N327f@id)) (N3287@mark* (N2ee8@stx-mark* N327f@id))) (let ((N328a@sym* (N2eb4@rib-sym* N327e@rib))) (let ((N328c@t (and (memq N3286@sym (N2eb4@rib-sym* N327e@rib)) (N3285@find N3286@sym N3287@mark* N328a@sym* (N2eb8@rib-mark** N327e@rib) (N2ebc@rib-label* N327e@rib))))) (if N328c@t ((lambda (N328e@p) (if (not (eq? N3280@label (car N328e@p))) (if (N3211@top-level-context) (set-car! N328e@p N3280@label) (N3201@syntax-violation '#f '"multiple definitions of identifier" N327f@id)) (void))) N328c@t) (begin (if (N2ec4@rib-cache N327e@rib) (hashtable-update! (N2ec4@rib-cache N327e@rib) N3286@sym (lambda (N3290@e) (cons (cons N3287@mark* N3280@label) N3290@e)) '()) (void)) (N2eb6@set-rib-sym*! N327e@rib (cons N3286@sym N328a@sym*)) (N2eba@set-rib-mark**! N327e@rib (cons N3287@mark* (N2eb8@rib-mark** N327e@rib))) (N2ebe@set-rib-label*! N327e@rib (cons N3280@label (N2ebc@rib-label* N327e@rib)))))))))))) (set! N4bd4@N2ecc@extend-rib! N2ecc@extend-rib!) (set! N2ece@extend-rib/nc! (lambda (N329c@rib N329d@id N329e@label) (let ((N32a2@sym (N2f18@id->sym N329d@id)) (N32a3@mark* (N2ee8@stx-mark* N329d@id))) (let ((N32a6@sym* (N2eb4@rib-sym* N329c@rib))) (begin (if (N2ec4@rib-cache N329c@rib) (hashtable-update! (N2ec4@rib-cache N329c@rib) N32a2@sym (lambda (N32a8@e) (cons (cons N32a3@mark* N329e@label) N32a8@e)) '()) (void)) (N2eb6@set-rib-sym*! N329c@rib (cons N32a2@sym N32a6@sym*)) (N2eba@set-rib-mark**! N329c@rib (cons N32a3@mark* (N2eb8@rib-mark** N329c@rib))) (N2ebe@set-rib-label*! N329c@rib (cons N329e@label (N2ebc@rib-label* N329c@rib)))))))) (set! N4bd5@N2ece@extend-rib/nc! N2ece@extend-rib/nc!) (set! N2ed0@make-rib-map (lambda (N32aa@sym*) (let ((N32ac@ht (make-eq-hashtable))) (let N32b2@f ((N32ae@i '0) (N32af@sym* N32aa@sym*)) (if (null? N32af@sym*) N32ac@ht (begin (hashtable-update! N32ac@ht (car N32af@sym*) (lambda (N32b4@x) (cons N32ae@i N32b4@x)) '()) (N32b2@f (+ N32ae@i '1) (cdr N32af@sym*)))))))) (set! N4bd6@N2ed0@make-rib-map N2ed0@make-rib-map) (set! N2ed2@seal-rib! (lambda (N32b6@rib) (let ((N32b8@sym* (N2eb4@rib-sym* N32b6@rib))) (if (not (null? N32b8@sym*)) (begin (N2eb6@set-rib-sym*! N32b6@rib (list->vector N32b8@sym*)) (N2eba@set-rib-mark**! N32b6@rib (list->vector (N2eb8@rib-mark** N32b6@rib))) (N2ebe@set-rib-label*! N32b6@rib (list->vector (N2ebc@rib-label* N32b6@rib))) (N2ec2@set-rib-sealed/freq! N32b6@rib (N2ed0@make-rib-map N32b8@sym*))) (void))))) (set! N4bd7@N2ed2@seal-rib! N2ed2@seal-rib!) (set! N2ed4@unseal-rib! (lambda (N32ba@rib) (if (N2ec0@rib-sealed/freq N32ba@rib) (begin (N2ec2@set-rib-sealed/freq! N32ba@rib '#f) (N2eb6@set-rib-sym*! N32ba@rib (vector->list (N2eb4@rib-sym* N32ba@rib))) (N2eba@set-rib-mark**! N32ba@rib (vector->list (N2eb8@rib-mark** N32ba@rib))) (N2ebe@set-rib-label*! N32ba@rib (vector->list (N2ebc@rib-label* N32ba@rib)))) (void)))) (set! N4bd8@N2ed4@unseal-rib! N2ed4@unseal-rib!) (set! N2ed6@make-full-rib (lambda (N32bc@id* N32bd@label*) (let ((N32c0@r (make-simple-struct 'rib '6 (list (map N2f18@id->sym N32bc@id*) (map N2ee8@stx-mark* N32bc@id*) N32bd@label* '#f '#f)))) (begin (N2ed2@seal-rib! N32c0@r) N32c0@r)))) (set! N4bd9@N2ed6@make-full-rib N2ed6@make-full-rib) (set! N2ed8@rp (N2a63@N293e@make-record-printer 'stx (lambda (N32c2@x N32c3@p N32c4@wr) (begin (display '"#<syntax " N32c3@p) (write (N2f2a@stx->datum N32c2@x) N32c3@p) (let ((N32c8@expr (N2ee4@stx-expr N32c2@x))) (if (N2a5a@N292c@annotation? N32c8@expr) (let ((N32ca@src (N2a5b@N292e@annotation-source N32c8@expr))) (if (pair? N32ca@src) (begin (display '" [" N32c3@p) (display (cdr N32ca@src) N32c3@p) (display '" of " N32c3@p) (display (car N32ca@src) N32c3@p) (display '"]" N32c3@p)) (void))) (void))) (display '">" N32c3@p))))) (set! N4bda@N2ed8@rp N2ed8@rp) (set! N2ee2@stx? (lambda (N32cc@x) (and (simple-struct? N32cc@x) (eq? (simple-struct-name N32cc@x) 'stx)))) (set! N4bdb@N2ee2@stx? N2ee2@stx?) (set! N2ee4@stx-expr (lambda (N32ce@x) (simple-struct-ref N32ce@x '0))) (set! N4bdc@N2ee4@stx-expr N2ee4@stx-expr) (set! N2ee6@set-stx-expr! (lambda (N32d0@x N32d1@val) (simple-struct-set! N32d0@x '0 N32d1@val))) (set! N4bdd@N2ee6@set-stx-expr! N2ee6@set-stx-expr!) (set! N2ee8@stx-mark* (lambda (N32d4@x) (simple-struct-ref N32d4@x '1))) (set! N4bde@N2ee8@stx-mark* N2ee8@stx-mark*) (set! N2eea@set-stx-mark*! (lambda (N32d6@x N32d7@val) (simple-struct-set! N32d6@x '1 N32d7@val))) (set! N4bdf@N2eea@set-stx-mark*! N2eea@set-stx-mark*!) (set! N2eec@stx-subst* (lambda (N32da@x) (simple-struct-ref N32da@x '2))) (set! N4be0@N2eec@stx-subst* N2eec@stx-subst*) (set! N2eee@set-stx-subst*! (lambda (N32dc@x N32dd@val) (simple-struct-set! N32dc@x '2 N32dd@val))) (set! N4be1@N2eee@set-stx-subst*! N2eee@set-stx-subst*!) (set! N2ef0@stx-ae* (lambda (N32e0@x) (simple-struct-ref N32e0@x '3))) (set! N4be2@N2ef0@stx-ae* N2ef0@stx-ae*) (set! N2ef2@set-stx-ae*! (lambda (N32e2@x N32e3@val) (simple-struct-set! N32e2@x '3 N32e3@val))) (set! N4be3@N2ef2@set-stx-ae*! N2ef2@set-stx-ae*!) (set! N2ef4@dummy '3) (set! N4be4@N2ef4@dummy N2ef4@dummy) (set! N2ef6@datum->stx (lambda (N32e6@id N32e7@datum) (make-simple-struct 'stx '5 (list N32e7@datum (N2ee8@stx-mark* N32e6@id) (N2eec@stx-subst* N32e6@id) (N2ef0@stx-ae* N32e6@id))))) (set! N4be5@N2ef6@datum->stx N2ef6@datum->stx) (set! N2ef8@gen-mark (lambda () (string '#\m))) (set! N4be6@N2ef8@gen-mark N2ef8@gen-mark) (set! N2efa@anti-mark '#f) (set! N4be7@N2efa@anti-mark N2efa@anti-mark) (set! N2efc@anti-mark? not) (set! N4be8@N2efc@anti-mark? N2efc@anti-mark?) (set! N2efe@mkstx (lambda (N32ea@e N32eb@m* N32ec@s* N32ed@ae*) (if (and (N2ee2@stx? N32ea@e) (not (N2e9c@top-marked? N32eb@m*))) (call-with-values (lambda () (join-wraps N32eb@m* N32ec@s* N32ed@ae* N32ea@e)) (lambda (N32f8@N32f3 N32f9@N32f5 N32fa@N32f7) (let ((N32fe@ae* N32fa@N32f7) (N32ff@s* N32f9@N32f5) (N3300@m* N32f8@N32f3)) (make-simple-struct 'stx '5 (list (N2ee4@stx-expr N32ea@e) N3300@m* N32ff@s* N32fe@ae*))))) (make-simple-struct 'stx '5 (list N32ea@e N32eb@m* N32ec@s* N32ed@ae*))))) (set! N4be9@N2efe@mkstx N2efe@mkstx) (set! N2f00@add-mark (lambda (N3304@m N3305@e N3306@ae) (N2efe@mkstx N3305@e (list N3304@m) '(shift) (list N3306@ae)))) (set! N4bea@N2f00@add-mark N2f00@add-mark) (set! N2f02@add-subst (lambda (N330a@subst N330b@e) (N2efe@mkstx N330b@e '() (list N330a@subst) '()))) (set! N4beb@N2f02@add-subst N2f02@add-subst) (set! N2f04@syntax-kind? (lambda (N330e@x N330f@p?) (if (N2ee2@stx? N330e@x) (N2f04@syntax-kind? (N2ee4@stx-expr N330e@x) N330f@p?) (if (N2a5a@N292c@annotation? N330e@x) (N2f04@syntax-kind? (N2a5c@N2930@annotation-expression N330e@x) N330f@p?) (N330f@p? N330e@x))))) (set! N4bec@N2f04@syntax-kind? N2f04@syntax-kind?) (set! N2f06@syntax-vector->list (lambda (N3312@x) (if (N2ee2@stx? N3312@x) (let ((N3314@ls (N2f06@syntax-vector->list (N2ee4@stx-expr N3312@x))) (N3315@m* (N2ee8@stx-mark* N3312@x)) (N3316@s* (N2eec@stx-subst* N3312@x)) (N3317@ae* (N2ef0@stx-ae* N3312@x))) (map (lambda (N331c@x) (N2efe@mkstx N331c@x N3315@m* N3316@s* N3317@ae*)) N3314@ls)) (if (N2a5a@N292c@annotation? N3312@x) (N2f06@syntax-vector->list (N2a5c@N2930@annotation-expression N3312@x)) (if (vector? N3312@x) (vector->list N3312@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" N3312@x)))))) (set! N4bed@N2f06@syntax-vector->list N2f06@syntax-vector->list) (set! N2f08@syntax-pair? (lambda (N331e@x) (N2f04@syntax-kind? N331e@x pair?))) (set! N4bee@N2f08@syntax-pair? N2f08@syntax-pair?) (set! N2f0a@syntax-vector? (lambda (N3320@x) (N2f04@syntax-kind? N3320@x vector?))) (set! N4bef@N2f0a@syntax-vector? N2f0a@syntax-vector?) (set! N2f0c@syntax-null? (lambda (N3322@x) (N2f04@syntax-kind? N3322@x null?))) (set! N4bf0@N2f0c@syntax-null? N2f0c@syntax-null?) (set! N2f0e@syntax-list? (lambda (N3324@x) (or (N2f0c@syntax-null? N3324@x) (and (N2f08@syntax-pair? N3324@x) (N2f0e@syntax-list? (N2f12@syntax-cdr N3324@x)))))) (set! N4bf1@N2f0e@syntax-list? N2f0e@syntax-list?) (set! N2f10@syntax-car (lambda (N3326@x) (if (N2ee2@stx? N3326@x) (N2efe@mkstx (N2f10@syntax-car (N2ee4@stx-expr N3326@x)) (N2ee8@stx-mark* N3326@x) (N2eec@stx-subst* N3326@x) (N2ef0@stx-ae* N3326@x)) (if (N2a5a@N292c@annotation? N3326@x) (N2f10@syntax-car (N2a5c@N2930@annotation-expression N3326@x)) (if (pair? N3326@x) (car N3326@x) (assertion-violation 'syntax-car '"BUG: not a pair" N3326@x)))))) (set! N4bf2@N2f10@syntax-car N2f10@syntax-car) (set! N2f12@syntax-cdr (lambda (N3328@x) (if (N2ee2@stx? N3328@x) (N2efe@mkstx (N2f12@syntax-cdr (N2ee4@stx-expr N3328@x)) (N2ee8@stx-mark* N3328@x) (N2eec@stx-subst* N3328@x) (N2ef0@stx-ae* N3328@x)) (if (N2a5a@N292c@annotation? N3328@x) (N2f12@syntax-cdr (N2a5c@N2930@annotation-expression N3328@x)) (if (pair? N3328@x) (cdr N3328@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" N3328@x)))))) (set! N4bf3@N2f12@syntax-cdr N2f12@syntax-cdr) (set! N2f14@syntax->list (lambda (N332a@x) (if (N2f08@syntax-pair? N332a@x) (cons (N2f10@syntax-car N332a@x) (N2f14@syntax->list (N2f12@syntax-cdr N332a@x))) (if (N2f0c@syntax-null? N332a@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" N332a@x))))) (set! N4bf4@N2f14@syntax->list N2f14@syntax->list) (set! N2f16@id? (lambda (N332c@x) (and (N2ee2@stx? N332c@x) (symbol? (N2ee4@stx-expr N332c@x))))) (set! N4bf5@N2f16@id? N2f16@id?) (set! N2f18@id->sym (lambda (N332e@x) (N2ee4@stx-expr N332e@x))) (set! N4bf6@N2f18@id->sym N2f18@id->sym) (set! N2f1a@bound-id=? (lambda (N3330@x N3331@y) (and (eq? (N2f18@id->sym N3330@x) (N2f18@id->sym N3331@y)) (same-marks? (N2ee8@stx-mark* N3330@x) (N2ee8@stx-mark* N3331@y))))) (set! N4bf7@N2f1a@bound-id=? N2f1a@bound-id=?) (set! N2f1c@free-id=? (lambda (N3334@i N3335@j) (let ((N3338@t0 (id->real-label N3334@i)) (N3339@t1 (id->real-label N3335@j))) (if (or N3338@t0 N3339@t1) (eq? N3338@t0 N3339@t1) (eq? (N2f18@id->sym N3334@i) (N2f18@id->sym N3335@j)))))) (set! N4bf8@N2f1c@free-id=? N2f1c@free-id=?) (set! N2f1e@valid-bound-ids? (lambda (N333c@id*) (and (for-all N2f16@id? N333c@id*) (N2f20@distinct-bound-ids? N333c@id*)))) (set! N4bf9@N2f1e@valid-bound-ids? N2f1e@valid-bound-ids?) (set! N2f20@distinct-bound-ids? (lambda (N333e@id*) (or (null? N333e@id*) (and (not (N2f22@bound-id-member? (car N333e@id*) (cdr N333e@id*))) (N2f20@distinct-bound-ids? (cdr N333e@id*)))))) (set! N4bfa@N2f20@distinct-bound-ids? N2f20@distinct-bound-ids?) (set! N2f22@bound-id-member? (lambda (N3340@id N3341@id*) (and (pair? N3341@id*) (or (N2f1a@bound-id=? N3340@id (car N3341@id*)) (N2f22@bound-id-member? N3340@id (cdr N3341@id*)))))) (set! N4bfb@N2f22@bound-id-member? N2f22@bound-id-member?) (set! N2f24@self-evaluating? (lambda (N3344@x) (or (number? N3344@x) (string? N3344@x) (char? N3344@x) (boolean? N3344@x) (regexp? N3344@x) (bytevector? N3344@x)))) (set! N4bfc@N2f24@self-evaluating? N2f24@self-evaluating?) (set! N2f26@strip-annotations (lambda (N3346@x) (if (pair? N3346@x) (cons (N2f26@strip-annotations (car N3346@x)) (N2f26@strip-annotations (cdr N3346@x))) (if (vector? N3346@x) (vector-map N2f26@strip-annotations N3346@x) (if (N2a5a@N292c@annotation? N3346@x) (N2a59@N292a@annotation-stripped N3346@x) N3346@x))))) (set! N4bfd@N2f26@strip-annotations N2f26@strip-annotations) (set! N2f28@strip (lambda (N3348@x N3349@m*) (if (N2e9c@top-marked? N3349@m*) (if (or (N2a5a@N292c@annotation? N3348@x) (and (pair? N3348@x) (N2a5a@N292c@annotation? (car N3348@x))) (and (vector? N3348@x) (> (vector-length N3348@x) '0) (N2a5a@N292c@annotation? (vector-ref N3348@x '0)))) (N2f26@strip-annotations N3348@x) N3348@x) (let N334e@f ((N334c@x N3348@x)) (if (N2ee2@stx? N334c@x) (begin (if (pair? (N2ee4@stx-expr N334c@x)) (begin (set-source-info! (N2ee4@stx-expr N334c@x) '#f) (set-source-info! (cdr (N2ee4@stx-expr N334c@x)) '#f) (set-source-info! (car (N2ee4@stx-expr N334c@x)) '#f)) (void)) (N2f28@strip (N2ee4@stx-expr N334c@x) (N2ee8@stx-mark* N334c@x))) (if (N2a5a@N292c@annotation? N334c@x) (N2a59@N292a@annotation-stripped N334c@x) (if (pair? N334c@x) (let ((N3350@a (N334e@f (car N334c@x))) (N3351@d (N334e@f (cdr N334c@x)))) (if (and (eq? N3350@a (car N334c@x)) (eq? N3351@d (cdr N334c@x))) N334c@x (cons N3350@a N3351@d))) (if (vector? N334c@x) (let ((N3354@old (vector->list N334c@x))) (let ((N3356@new (map N334e@f N3354@old))) (if (for-all eq? N3354@old N3356@new) N334c@x (list->vector N3356@new)))) N334c@x)))))))) (set! N4bfe@N2f28@strip N2f28@strip) (set! N2f2a@stx->datum (lambda (N3358@x) (N2f28@strip N3358@x '()))) (set! N4bff@N2f2a@stx->datum N2f2a@stx->datum) (set! N2f2c@id->label (lambda (N335a@id) (or (id->real-label N335a@id) (let ((N335c@t (N3211@top-level-context))) (if N335c@t ((lambda (N335e@env) (let ((N3360@rib (N31c1@interaction-env-rib N335e@env))) (call-with-values (lambda () (N2ea6@gen-define-label+loc N335a@id N3360@rib)) (lambda (N3366@N3363 N3367@N3365) (let ((N336a@loc_ N3367@N3365) (N336b@lab N3366@N3363)) (begin (N2ecc@extend-rib! N3360@rib N335a@id N336b@lab) N336b@lab)))))) N335c@t) '#f))))) (set! N4c00@N2f2c@id->label N2f2c@id->label) (set! N2f2e@label->binding (lambda (N336e@x N336f@r) (let ((N3372@t (N2d31@N2b7e@imported-label->binding N336e@x))) (if N3372@t ((lambda (N3374@b) (if (and (pair? N3374@b) (eq? (car N3374@b) '$core-rtd)) (cons '$rtd (map N30d3@bless (cdr N3374@b))) (if (and (pair? N3374@b) (eq? (car N3374@b) 'global-rtd)) (let ((N3376@lib (cadr N3374@b)) (N3377@loc (cddr N3374@b))) (cons '$rtd (symbol-value N3377@loc))) N3374@b))) N3372@t) (let ((N337a@t (assq N336e@x N336f@r))) (if N337a@t (cdr N337a@t) (let ((N337c@t (N3211@top-level-context))) (if N337c@t ((lambda (N337e@env) (let ((N3380@t (assq N336e@x (N31c9@interaction-env-locs N337e@env)))) (if N3380@t ((lambda (N3382@p) (cons* 'lexical (cdr N3382@p) '#f)) N3380@t) '(displaced-lexical . #f)))) N337c@t) '(displaced-lexical . #f))))))))) (set! N4c01@N2f2e@label->binding N2f2e@label->binding) (set! N2f30@make-binding cons) (set! N4c02@N2f30@make-binding N2f30@make-binding) (set! N2f32@binding-type car) (set! N4c03@N2f32@binding-type N2f32@binding-type) (set! N2f34@binding-value cdr) (set! N4c04@N2f34@binding-value N2f34@binding-value) (set! N2f36@raise-unbound-error (lambda (N3384@id) (N31ff@syntax-violation* '#f '"unbound identifier" N3384@id (make-undefined-violation)))) (set! N4c05@N2f36@raise-unbound-error N2f36@raise-unbound-error) (set! N2f38@syntax-type (lambda (N3386@e N3387@r) (if (N2f16@id? N3386@e) (let ((N338a@id N3386@e)) (let ((N338c@label (N2f2c@id->label N338a@id))) (let ((N338e@b (N2f2e@label->binding N338c@label N3387@r))) (let ((N3390@type (N2f32@binding-type N338e@b))) (begin (if (not N338c@label) (N2f36@raise-unbound-error N338a@id) (void)) (let ((N3392@t N3390@type)) (if (memv N3392@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values N3390@type (N2f34@binding-value N338e@b) N338a@id) (values 'other '#f '#f)))))))) (if (N2f08@syntax-pair? N3386@e) (let ((N3394@id (N2f10@syntax-car N3386@e))) (if (N2f16@id? N3394@id) (let ((N3396@label (N2f2c@id->label N3394@id))) (let ((N3398@b (N2f2e@label->binding N3396@label N3387@r))) (let ((N339a@type (N2f32@binding-type N3398@b))) (begin (if (not N3396@label) (N2f36@raise-unbound-error N3394@id) (void)) (let ((N339c@t N339a@type)) (if (memv N339c@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values N339a@type (N2f34@binding-value N3398@b) N3394@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((N339e@d (N2f2a@stx->datum N3386@e))) (if (N2f24@self-evaluating? N339e@d) (values 'constant N339e@d '#f) (values 'other '#f '#f))))))) (set! N4c06@N2f38@syntax-type N2f38@syntax-type) (set! N2f46@sanitize-binding (lambda (N33a0@x N33a1@src) (if (procedure? N33a0@x) (cons* 'local-macro N33a0@x N33a1@src) (if (and (pair? N33a0@x) (eq? (car N33a0@x) 'macro!) (procedure? (cdr N33a0@x))) (cons* 'local-macro! (cdr N33a0@x) N33a1@src) (if (and (pair? N33a0@x) (eq? (car N33a0@x) '$rtd)) N33a0@x (assertion-violation 'expand '"invalid transformer" N33a0@x)))))) (set! N4c07@N2f46@sanitize-binding N2f46@sanitize-binding) (set! N2f48@make-variable-transformer (lambda (N33a4@x) (if (procedure? N33a4@x) (cons 'macro! N33a4@x) (assertion-violation 'make-variable-transformer '"not a procedure" N33a4@x)))) (set! N4c08@N2f48@make-variable-transformer N2f48@make-variable-transformer) (set! N2f4a@variable-transformer? (lambda (N33a6@x) (and (pair? N33a6@x) (eq? (car N33a6@x) 'macro!) (procedure? (cdr N33a6@x))))) (set! N4c09@N2f4a@variable-transformer? N2f4a@variable-transformer?) (set! N2f4c@variable-transformer-procedure (lambda (N33a8@x) (if (N2f4a@variable-transformer? N33a8@x) (cdr N33a8@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" N33a8@x)))) (set! N4c0a@N2f4c@variable-transformer-procedure N2f4c@variable-transformer-procedure) (set! N2f4e@make-eval-transformer (lambda (N33aa@x) (N2f46@sanitize-binding (eval-core (N2abc@N2a74@expanded->core N33aa@x)) N33aa@x))) (set! N4c0b@N2f4e@make-eval-transformer N2f4e@make-eval-transformer) (set! N309f@parse-define (lambda (N33ac@x) (let ((N33ae@t N33ac@x)) (let ((N33b0@ls/false (N311d@syntax-dispatch N33ae@t '(_ (any . any) any . each-any)))) (if (and N33b0@ls/false (apply (lambda (N33b2@id N33b3@fmls N33b4@b N33b5@b*) (N2f16@id? N33b2@id)) N33b0@ls/false)) (apply (lambda (N33ba@id N33bb@fmls N33bc@b N33bd@b*) (begin (N3143@verify-formals N33bb@fmls N33ac@x) (values N33ba@id (cons 'defun (cons N33bb@fmls (cons N33bc@b N33bd@b*)))))) N33b0@ls/false) (let ((N33c2@t N33ae@t)) (let ((N33c4@ls/false (N311d@syntax-dispatch N33c2@t '(_ any any)))) (if (and N33c4@ls/false (apply (lambda (N33c6@id N33c7@val) (N2f16@id? N33c6@id)) N33c4@ls/false)) (apply (lambda (N33ca@id N33cb@val) (values N33ca@id (cons 'expr N33cb@val))) N33c4@ls/false) (let ((N33ce@t N33c2@t)) (let ((N33d0@ls/false (N311d@syntax-dispatch N33ce@t '(_ any)))) (if (and N33d0@ls/false (apply (lambda (N33d2@id) (N2f16@id? N33d2@id)) N33d0@ls/false)) (apply (lambda (N33d4@id) (values N33d4@id (cons 'expr (N30d3@bless '(void))))) N33d0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N33ce@t)))))))))))) (set! N4c0c@N309f@parse-define N309f@parse-define) (set! N30a1@parse-define-syntax (lambda (N33d6@x) (let ((N33d8@t N33d6@x)) (let ((N33da@ls/false (N311d@syntax-dispatch N33d8@t '(_ any any)))) (if (and N33da@ls/false (apply (lambda (N33dc@id N33dd@val) (N2f16@id? N33dc@id)) N33da@ls/false)) (apply (lambda (N33e0@id N33e1@val) (values N33e0@id N33e1@val)) N33da@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N33d8@t)))))) (set! N4c0d@N30a1@parse-define-syntax N30a1@parse-define-syntax) (set! N30a3@scheme-stx-hashtable (make-eq-hashtable)) (set! N4c0e@N30a3@scheme-stx-hashtable N30a3@scheme-stx-hashtable) (set! N30a5@scheme-stx (lambda (N33e4@sym) (or (hashtable-ref N30a3@scheme-stx-hashtable N33e4@sym '#f) (let ((N33e6@subst (N2d0d@N2b36@library-subst (N2d2b@N2b72@find-library-by-name '(psyntax system $all))))) (let ((N33e8@stx (make-simple-struct 'stx '5 (list N33e4@sym N2e9a@top-mark* '() '())))) (let ((N33ea@stx (let ((N33ec@t (assq N33e4@sym N33e6@subst))) (if N33ec@t ((lambda (N33ee@x) (let ((N33f0@name (car N33ee@x)) (N33f1@label (cdr N33ee@x))) (N2f02@add-subst (make-simple-struct 'rib '6 (list (list N33f0@name) (list N2e9a@top-mark*) (list N33f1@label) '#f '#f)) N33e8@stx))) N33ec@t) N33e8@stx)))) (begin (hashtable-set! N30a3@scheme-stx-hashtable N33e4@sym N33ea@stx) N33ea@stx))))))) (set! N4c0f@N30a5@scheme-stx N30a5@scheme-stx) (set! N30a7@lexical-var car) (set! N4c10@N30a7@lexical-var N30a7@lexical-var) (set! N30a9@lexical-mutable? cdr) (set! N4c11@N30a9@lexical-mutable? N30a9@lexical-mutable?) (set! N30ab@set-lexical-mutable! set-cdr!) (set! N4c12@N30ab@set-lexical-mutable! N30ab@set-lexical-mutable!) (set! N30ad@add-lexical (lambda (N33f4@lab N33f5@lex N33f6@r) (cons (cons* N33f4@lab 'lexical N33f5@lex '#f) N33f6@r))) (set! N4c13@N30ad@add-lexical N30ad@add-lexical) (set! N30af@add-lexicals (lambda (N33fa@lab* N33fb@lex* N33fc@r) (if (null? N33fa@lab*) N33fc@r (N30af@add-lexicals (cdr N33fa@lab*) (cdr N33fb@lex*) (N30ad@add-lexical (car N33fa@lab*) (car N33fb@lex*) N33fc@r))))) (set! N4c14@N30af@add-lexicals N30af@add-lexicals) (set! N30b1@letrec-helper (lambda (N3400@e N3401@r N3402@mr N3403@build) (let ((N3408@t N3400@e)) (let ((N340a@ls/false (N311d@syntax-dispatch N3408@t '(_ #(each (any any)) any . each-any)))) (if N340a@ls/false (apply (lambda (N340c@lhs* N340d@rhs* N340e@b N340f@b*) (if (not (N2f1e@valid-bound-ids? N340c@lhs*)) (N30d7@invalid-fmls-error N3400@e N340c@lhs*) (let ((N3414@lex* (map N2e9e@gen-lexical N340c@lhs*)) (N3415@lab* (map N2ea2@gen-label N340c@lhs*))) (let ((N3418@rib (N2ed6@make-full-rib N340c@lhs* N3415@lab*)) (N3419@r (N30af@add-lexicals N3415@lab* N3414@lex* N3401@r))) (let ((N341c@body (N3155@chi-internal (N2f02@add-subst N3418@rib (cons N340e@b N340f@b*)) N3419@r N3402@mr)) (N341d@rhs* (N313b@chi-expr* (map (lambda (N3420@x) (N2f02@add-subst N3418@rib N3420@x)) N340d@rhs*) N3419@r N3402@mr))) (N3403@build '#f N3414@lex* N341d@rhs* N341c@body)))))) N340a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3408@t)))))) (set! N4c15@N30b1@letrec-helper N30b1@letrec-helper) (set! N30b3@let-transformer (lambda (N3422@e N3423@r N3424@mr) (let ((N3428@t N3422@e)) (let ((N342a@ls/false (N311d@syntax-dispatch N3428@t '(_ #(each (any any)) any . each-any)))) (if N342a@ls/false (apply (lambda (N342c@lhs* N342d@rhs* N342e@b N342f@b*) (if (not (N2f1e@valid-bound-ids? N342c@lhs*)) (N30d7@invalid-fmls-error N3422@e N342c@lhs*) (let ((N3434@lex* (map N2e9e@gen-lexical N342c@lhs*)) (N3435@lab* (map N2ea2@gen-label N342c@lhs*)) (N3436@rhs* (N313b@chi-expr* N342d@rhs* N3423@r N3424@mr))) (let ((N343a@rib (N2ed6@make-full-rib N342c@lhs* N3435@lab*)) (N343b@r (N30af@add-lexicals N3435@lab* N3434@lex* N3423@r))) (let ((N343e@body (N3155@chi-internal (N2f02@add-subst N343a@rib (cons N342e@b N342f@b*)) N343b@r N3424@mr))) (N2e7e@N2de1@build-let '#f N3434@lex* N3436@rhs* N343e@body)))))) N342a@ls/false) (let ((N3440@t N3428@t)) (let ((N3442@ls/false (N311d@syntax-dispatch N3440@t '(_ any #(each (any any)) any . each-any)))) (if N3442@ls/false (apply (lambda (N3444@loop N3445@lhs* N3446@rhs* N3447@b N3448@b*) (if (not (N2f1e@valid-bound-ids? N3445@lhs*)) (N30d7@invalid-fmls-error N3422@e N3445@lhs*) (let ((N344e@lex* (map N2e9e@gen-lexical N3445@lhs*)) (N344f@lab* (map N2ea2@gen-label N3445@lhs*)) (N3450@rhs* (N313b@chi-expr* N3446@rhs* N3423@r N3424@mr)) (N3451@loop-lex (N2e9e@gen-lexical N3444@loop)) (N3452@loop-lab (N2ea2@gen-label N3444@loop))) (let ((N3458@loop-rib (N2ed6@make-full-rib (list N3444@loop) (list N3452@loop-lab))) (N3459@rib (N2ed6@make-full-rib N3445@lhs* N344f@lab*)) (N345a@r (N30af@add-lexicals (cons N3452@loop-lab N344f@lab*) (cons N3451@loop-lex N344e@lex*) N3423@r))) (let ((N345e@body (N3155@chi-internal (N2f02@add-subst N3458@loop-rib (N2f02@add-subst N3459@rib (cons N3447@b N3448@b*))) N345a@r N3424@mr))) (N2e7f@N2de3@build-named-let '#f N3451@loop-lex N344e@lex* N3450@rhs* N345e@body)))))) N3442@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3440@t))))))))) (set! N4c16@N30b3@let-transformer N30b3@let-transformer) (set! N30b5@letrec-transformer (lambda (N3460@e N3461@r N3462@mr) (N30b1@letrec-helper N3460@e N3461@r N3462@mr N2e7d@N2ddf@build-letrec))) (set! N4c17@N30b5@letrec-transformer N30b5@letrec-transformer) (set! N30b7@letrec*-transformer (lambda (N3466@e N3467@r N3468@mr) (N30b1@letrec-helper N3466@e N3467@r N3468@mr N2e80@N2de5@build-letrec*))) (set! N4c18@N30b7@letrec*-transformer N30b7@letrec*-transformer) (set! N30b9@fluid-let-syntax-transformer (lambda (N346c@e N346d@r N346e@mr) (letrec* ((N3473@lookup (lambda (N3486@x) (or (N2f2c@id->label N3486@x) (N3201@syntax-violation '#f '"unbound identifier" N346c@e N3486@x))))) (let ((N3474@t N346c@e)) (let ((N3476@ls/false (N311d@syntax-dispatch N3474@t '(_ #(each (any any)) any . each-any)))) (if N3476@ls/false (apply (lambda (N3478@lhs* N3479@rhs* N347a@b N347b@b*) (if (not (N2f1e@valid-bound-ids? N3478@lhs*)) (N30d7@invalid-fmls-error N346c@e N3478@lhs*) (let ((N3480@lab* (map N3473@lookup N3478@lhs*)) (N3481@rhs* (map (lambda (N3484@x) (N2f4e@make-eval-transformer (N317b@expand-transformer N3484@x N346e@mr))) N3479@rhs*))) (N3155@chi-internal (cons N347a@b N347b@b*) (append (map cons N3480@lab* N3481@rhs*) N346d@r) (append (map cons N3480@lab* N3481@rhs*) N346e@mr))))) N3476@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3474@t))))))) (set! N4c19@N30b9@fluid-let-syntax-transformer N30b9@fluid-let-syntax-transformer) (set! N30bb@type-descriptor-transformer (lambda (N3488@e N3489@r N348a@mr) (let ((N348e@t N3488@e)) (let ((N3490@ls/false (N311d@syntax-dispatch N348e@t '(_ any)))) (if (and N3490@ls/false (apply (lambda (N3492@id) (N2f16@id? N3492@id)) N3490@ls/false)) (apply (lambda (N3494@id) (let ((N3496@lab (N2f2c@id->label N3494@id))) (let ((N3498@b (N2f2e@label->binding N3496@lab N3489@r))) (let ((N349a@type (N2f32@binding-type N3498@b))) (begin (if (not N3496@lab) (N2f36@raise-unbound-error N3494@id) (void)) (if (not (and (eq? N349a@type '$rtd) (not (list? (N2f34@binding-value N3498@b))))) (N3201@syntax-violation '#f '"not a record type" N3488@e) (void)) (list 'quote (N2f34@binding-value N3498@b))))))) N3490@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N348e@t)))))) (set! N4c1a@N30bb@type-descriptor-transformer N30bb@type-descriptor-transformer) (set! N30bd@record-type-descriptor-transformer (lambda (N349c@e N349d@r N349e@mr) (let ((N34a2@t N349c@e)) (let ((N34a4@ls/false (N311d@syntax-dispatch N34a2@t '(_ any)))) (if (and N34a4@ls/false (apply (lambda (N34a6@id) (N2f16@id? N34a6@id)) N34a4@ls/false)) (apply (lambda (N34a8@id) (let ((N34aa@lab (N2f2c@id->label N34a8@id))) (let ((N34ac@b (N2f2e@label->binding N34aa@lab N349d@r))) (let ((N34ae@type (N2f32@binding-type N34ac@b))) (begin (if (not N34aa@lab) (N2f36@raise-unbound-error N34a8@id) (void)) (if (not (and (eq? N34ae@type '$rtd) (list? (N2f34@binding-value N34ac@b)))) (N3201@syntax-violation '#f '"not a record type" N349c@e) (void)) (N313f@chi-expr (car (N2f34@binding-value N34ac@b)) N349d@r N349e@mr)))))) N34a4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34a2@t)))))) (set! N4c1b@N30bd@record-type-descriptor-transformer N30bd@record-type-descriptor-transformer) (set! N30bf@record-constructor-descriptor-transformer (lambda (N34b0@e N34b1@r N34b2@mr) (let ((N34b6@t N34b0@e)) (let ((N34b8@ls/false (N311d@syntax-dispatch N34b6@t '(_ any)))) (if (and N34b8@ls/false (apply (lambda (N34ba@id) (N2f16@id? N34ba@id)) N34b8@ls/false)) (apply (lambda (N34bc@id) (let ((N34be@lab (N2f2c@id->label N34bc@id))) (let ((N34c0@b (N2f2e@label->binding N34be@lab N34b1@r))) (let ((N34c2@type (N2f32@binding-type N34c0@b))) (begin (if (not N34be@lab) (N2f36@raise-unbound-error N34bc@id) (void)) (if (not (and (eq? N34c2@type '$rtd) (list? (N2f34@binding-value N34c0@b)))) (N3201@syntax-violation '#f '"invalid type" N34b0@e) (void)) (N313f@chi-expr (cadr (N2f34@binding-value N34c0@b)) N34b1@r N34b2@mr)))))) N34b8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34b6@t)))))) (set! N4c1c@N30bf@record-constructor-descriptor-transformer N30bf@record-constructor-descriptor-transformer) (set! N30c1@when-macro (lambda (N34c4@e) (let ((N34c6@t N34c4@e)) (let ((N34c8@ls/false (N311d@syntax-dispatch N34c6@t '(_ any any . each-any)))) (if N34c8@ls/false (apply (lambda (N34ca@test N34cb@e N34cc@e*) (N30d3@bless (list 'if N34ca@test (cons 'begin (cons N34cb@e N34cc@e*))))) N34c8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34c6@t)))))) (set! N4c1d@N30c1@when-macro N30c1@when-macro) (set! N30c3@unless-macro (lambda (N34d0@e) (let ((N34d2@t N34d0@e)) (let ((N34d4@ls/false (N311d@syntax-dispatch N34d2@t '(_ any any . each-any)))) (if N34d4@ls/false (apply (lambda (N34d6@test N34d7@e N34d8@e*) (N30d3@bless (list 'if (list 'not N34d6@test) (cons 'begin (cons N34d7@e N34d8@e*))))) N34d4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34d2@t)))))) (set! N4c1e@N30c3@unless-macro N30c3@unless-macro) (set! N30c5@if-transformer (lambda (N34dc@e N34dd@r N34de@mr) (let ((N34e2@t N34dc@e)) (let ((N34e4@ls/false (N311d@syntax-dispatch N34e2@t '(_ any any any)))) (if N34e4@ls/false (apply (lambda (N34e6@e0 N34e7@e1 N34e8@e2) (list 'if (N313f@chi-expr N34e6@e0 N34dd@r N34de@mr) (N313f@chi-expr N34e7@e1 N34dd@r N34de@mr) (N313f@chi-expr N34e8@e2 N34dd@r N34de@mr))) N34e4@ls/false) (let ((N34ec@t N34e2@t)) (let ((N34ee@ls/false (N311d@syntax-dispatch N34ec@t '(_ any any)))) (if N34ee@ls/false (apply (lambda (N34f0@e0 N34f1@e1) (list 'if (N313f@chi-expr N34f0@e0 N34dd@r N34de@mr) (N313f@chi-expr N34f1@e1 N34dd@r N34de@mr) (N2e7c@N2ddd@build-void))) N34ee@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34ec@t))))))))) (set! N4c1f@N30c5@if-transformer N30c5@if-transformer) (set! N30c7@and-transformer (lambda (N34f4@e N34f5@r N34f6@mr) (let ((N34fa@t N34f4@e)) (let ((N34fc@ls/false (N311d@syntax-dispatch N34fa@t '(_ . each-any)))) (if N34fc@ls/false (apply (lambda (N34fe@e*) (cons 'and (N313b@chi-expr* N34fe@e* N34f5@r N34f6@mr))) N34fc@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N34fa@t)))))) (set! N4c20@N30c7@and-transformer N30c7@and-transformer) (set! N30c9@or-transformer (lambda (N3500@e N3501@r N3502@mr) (let ((N3506@t N3500@e)) (let ((N3508@ls/false (N311d@syntax-dispatch N3506@t '(_ . each-any)))) (if N3508@ls/false (apply (lambda (N350a@e*) (cons 'or (N313b@chi-expr* N350a@e* N3501@r N3502@mr))) N3508@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3506@t)))))) (set! N4c21@N30c9@or-transformer N30c9@or-transformer) (set! N30cb@case-macro (lambda (N350c@e) (letrec* ((N350f@build-last (lambda (N3536@cls) (let ((N3538@t N3536@cls)) (let ((N353a@ls/false (N311d@syntax-dispatch N3538@t '(#(scheme-id else) any . each-any)))) (if N353a@ls/false (apply (lambda (N353c@e N353d@e*) (cons 'begin (cons N353c@e N353d@e*))) N353a@ls/false) (let ((N3540@t N3538@t)) (let ((N3542@ls/false (N311d@syntax-dispatch N3540@t '_))) (if N3542@ls/false (apply (lambda () (N3511@build-one N3536@cls '(if #f #f))) N3542@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3540@t))))))))) (N3511@build-one (lambda (N3528@cls N3529@k) (let ((N352c@t N3528@cls)) (let ((N352e@ls/false (N311d@syntax-dispatch N352c@t '(each-any any . each-any)))) (if N352e@ls/false (apply (lambda (N3530@d* N3531@e N3532@e*) (list 'if (list 'memv 't (list 'quote N3530@d*)) (cons 'begin (cons N3531@e N3532@e*)) N3529@k)) N352e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N352c@t))))))) (let ((N3512@t N350c@e)) (let ((N3514@ls/false (N311d@syntax-dispatch N3512@t '(_ any)))) (if N3514@ls/false (apply (lambda (N3516@expr) (N30d3@bless (cons 'let (cons (list (list 't N3516@expr)) '((if #f #f)))))) N3514@ls/false) (let ((N3518@t N3512@t)) (let ((N351a@ls/false (N311d@syntax-dispatch N3518@t '(_ any any . each-any)))) (if N351a@ls/false (apply (lambda (N351c@expr N351d@cls N351e@cls*) (N30d3@bless (list 'let (list (list 't N351c@expr)) (let N3526@f ((N3522@cls N351d@cls) (N3523@cls* N351e@cls*)) (if (null? N3523@cls*) (N350f@build-last N3522@cls) (N3511@build-one N3522@cls (N3526@f (car N3523@cls*) (cdr N3523@cls*)))))))) N351a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3518@t)))))))))) (set! N4c22@N30cb@case-macro N30cb@case-macro) (set! N30cd@quote-transformer (lambda (N3544@e N3545@r N3546@mr) (let ((N354a@t N3544@e)) (let ((N354c@ls/false (N311d@syntax-dispatch N354a@t '(_ any)))) (if N354c@ls/false (apply (lambda (N354e@datum) (list 'quote (N2f2a@stx->datum N354e@datum))) N354c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N354a@t)))))) (set! N4c23@N30cd@quote-transformer N30cd@quote-transformer) (set! N30cf@case-lambda-transformer (lambda (N3550@e N3551@r N3552@mr) (let ((N3556@t N3550@e)) (let ((N3558@ls/false (N311d@syntax-dispatch N3556@t '(_ . #(each (any any . each-any)))))) (if N3558@ls/false (apply (lambda (N355a@fmls* N355b@b* N355c@b**) (call-with-values (lambda () (N3147@chi-lambda-clause* N3550@e N355a@fmls* (map cons N355b@b* N355c@b**) N3551@r N3552@mr)) (lambda (N3564@N3561 N3565@N3563) (let ((N3568@body* N3565@N3563) (N3569@fmls* N3564@N3561)) (N2e7a@N2dad@build-case-lambda '#f N3569@fmls* N3568@body*))))) N3558@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3556@t)))))) (set! N4c24@N30cf@case-lambda-transformer N30cf@case-lambda-transformer) (set! N30d1@lambda-transformer (lambda (N356c@e N356d@r N356e@mr) (let ((N3572@t N356c@e)) (let ((N3574@ls/false (N311d@syntax-dispatch N3572@t '(_ any any . each-any)))) (if N3574@ls/false (apply (lambda (N3576@fmls N3577@b N3578@b*) (call-with-values (lambda () (N3145@chi-lambda-clause N356c@e N3576@fmls (cons N3577@b N3578@b*) N356d@r N356e@mr)) (lambda (N3580@N357d N3581@N357f) (let ((N3584@body N3581@N357f) (N3585@fmls N3580@N357d)) (N2e79@N2dab@build-lambda '#f N3585@fmls N3584@body))))) N3574@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3572@t)))))) (set! N4c25@N30d1@lambda-transformer N30d1@lambda-transformer) (set! N30d3@bless (lambda (N3588@x) (N2efe@mkstx (let N358c@f ((N358a@x N3588@x)) (if (N2ee2@stx? N358a@x) N358a@x (if (pair? N358a@x) (cons (N358c@f (car N358a@x)) (N358c@f (cdr N358a@x))) (if (symbol? N358a@x) (N30a5@scheme-stx N358a@x) (if (vector? N358a@x) (vector-map N358c@f N358a@x) N358a@x))))) '() '() '()))) (set! N4c26@N30d3@bless N30d3@bless) (set! N30d5@with-syntax-macro (lambda (N358e@e) (let ((N3590@t N358e@e)) (let ((N3592@ls/false (N311d@syntax-dispatch N3590@t '(_ #(each (any any)) any . each-any)))) (if N3592@ls/false (apply (lambda (N3594@pat* N3595@expr* N3596@b N3597@b*) (let ((N359c@idn* (let N35a0@f ((N359e@pat* N3594@pat*)) (if (null? N359e@pat*) '() (call-with-values (lambda () (N311b@convert-pattern (car N359e@pat*) '())) (lambda (N35a6@N35a3 N35a7@N35a5) (let ((N35aa@idn* N35a7@N35a5) (N35ab@pat N35a6@N35a3)) (append N35aa@idn* (N35a0@f (cdr N359e@pat*)))))))))) (begin (N3143@verify-formals (map car N359c@idn*) N358e@e) (let ((N35ae@t* (N31ef@generate-temporaries N3595@expr*))) (N30d3@bless (list 'let (map list N35ae@t* N3595@expr*) (let N35b4@f ((N35b0@pat* N3594@pat*) (N35b1@t* N35ae@t*)) (if (null? N35b0@pat*) (cons 'begin (cons '#f (cons N3596@b N3597@b*))) (list 'syntax-case (car N35b1@t*) '() (list (car N35b0@pat*) (N35b4@f (cdr N35b0@pat*) (cdr N35b1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car N35b0@pat*)) (car N35b1@t*)))))))))))) N3592@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3590@t)))))) (set! N4c27@N30d5@with-syntax-macro N30d5@with-syntax-macro) (set! N30d7@invalid-fmls-error (lambda (N35b6@stx N35b7@fmls) (let ((N35ba@t N35b7@fmls)) (let ((N35bc@ls/false (N311d@syntax-dispatch N35ba@t '#(each+ any () any)))) (if N35bc@ls/false (apply (lambda (N35be@id* N35bf@last) (let N35c4@f ((N35c2@id* (if (N2f16@id? N35bf@last) (cons N35bf@last N35be@id*) (if (N2f0c@syntax-null? N35bf@last) N35be@id* (N3201@syntax-violation '#f '"not an identifier" N35b6@stx N35bf@last))))) (if (null? N35c2@id*) (values) (if (not (N2f16@id? (car N35c2@id*))) (N3201@syntax-violation '#f '"not an identifier" N35b6@stx (car N35c2@id*)) (begin (N35c4@f (cdr N35c2@id*)) (if (N2f22@bound-id-member? (car N35c2@id*) (cdr N35c2@id*)) (N3201@syntax-violation '#f '"duplicate binding" N35b6@stx (car N35c2@id*)) (void))))))) N35bc@ls/false) (let ((N35c6@t N35ba@t)) (let ((N35c8@ls/false (N311d@syntax-dispatch N35c6@t '_))) (if N35c8@ls/false (apply (lambda () (N3201@syntax-violation '#f '"malformed binding form" N35b6@stx N35b7@fmls)) N35c8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N35c6@t))))))))) (set! N4c28@N30d7@invalid-fmls-error N30d7@invalid-fmls-error) (set! N30d9@let-macro (lambda (N35ca@stx) (let ((N35cc@t N35ca@stx)) (let ((N35ce@ls/false (N311d@syntax-dispatch N35cc@t '(_ #(each (any any)) any . each-any)))) (if N35ce@ls/false (apply (lambda (N35d0@lhs* N35d1@rhs* N35d2@b N35d3@b*) (if (N2f1e@valid-bound-ids? N35d0@lhs*) (N30d3@bless (cons (cons 'lambda (cons N35d0@lhs* (cons N35d2@b N35d3@b*))) N35d1@rhs*)) (N30d7@invalid-fmls-error N35ca@stx N35d0@lhs*))) N35ce@ls/false) (let ((N35d8@t N35cc@t)) (let ((N35da@ls/false (N311d@syntax-dispatch N35d8@t '(_ any #(each (any any)) any . each-any)))) (if (and N35da@ls/false (apply (lambda (N35dc@f N35dd@lhs* N35de@rhs* N35df@b N35e0@b*) (N2f16@id? N35dc@f)) N35da@ls/false)) (apply (lambda (N35e6@f N35e7@lhs* N35e8@rhs* N35e9@b N35ea@b*) (if (N2f1e@valid-bound-ids? N35e7@lhs*) (N30d3@bless (cons (list 'letrec (list (list N35e6@f (cons 'lambda (cons N35e7@lhs* (cons N35e9@b N35ea@b*))))) N35e6@f) N35e8@rhs*)) (N30d7@invalid-fmls-error N35ca@stx N35e7@lhs*))) N35da@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N35d8@t))))))))) (set! N4c29@N30d9@let-macro N30d9@let-macro) (set! N30db@let-values-macro (lambda (N35f0@stx) (letrec* ((N35f3@rename (lambda (N3658@x N3659@old* N365a@new*) (begin (if (not (N2f16@id? N3658@x)) (N3201@syntax-violation '#f '"not an indentifier" N35f0@stx N3658@x) (void)) (if (N2f22@bound-id-member? N3658@x N3659@old*) (N3201@syntax-violation '#f '"duplicate binding" N35f0@stx N3658@x) (void)) (let ((N365e@y (gensym (N3207@syntax->datum N3658@x)))) (values N365e@y (cons N3658@x N3659@old*) (cons N365e@y N365a@new*)))))) (N35f5@rename* (lambda (N3646@x* N3647@old* N3648@new*) (if (null? N3646@x*) (values '() N3647@old* N3648@new*) (call-with-values (lambda () (N35f3@rename (car N3646@x*) N3647@old* N3648@new*)) (lambda (N364c@x N364d@old* N364e@new*) (call-with-values (lambda () (N35f5@rename* (cdr N3646@x*) N364d@old* N364e@new*)) (lambda (N3652@x* N3653@old* N3654@new*) (values (cons N364c@x N3652@x*) N3653@old* N3654@new*))))))))) (let ((N35f6@t N35f0@stx)) (let ((N35f8@ls/false (N311d@syntax-dispatch N35f6@t '(_ () any . each-any)))) (if N35f8@ls/false (apply (lambda (N35fa@b N35fb@b*) (cons* (N30d3@bless 'let) '() N35fa@b N35fb@b*)) N35f8@ls/false) (let ((N35fe@t N35f6@t)) (let ((N3600@ls/false (N311d@syntax-dispatch N35fe@t '(_ #(each (any any)) any . each-any)))) (if N3600@ls/false (apply (lambda (N3602@lhs* N3603@rhs* N3604@b N3605@b*) (N30d3@bless (let N3612@f ((N360a@lhs* N3602@lhs*) (N360b@rhs* N3603@rhs*) (N360c@old* '()) (N360d@new* '())) (if (null? N360a@lhs*) (cons 'let (cons (map list N360c@old* N360d@new*) (cons N3604@b N3605@b*))) (let ((N3614@t (car N360a@lhs*))) (let ((N3616@ls/false (N311d@syntax-dispatch N3614@t 'each-any))) (if N3616@ls/false (apply (lambda (N3618@x*) (call-with-values (lambda () (N35f5@rename* N3618@x* N360c@old* N360d@new*)) (lambda (N3620@N361b N3621@N361d N3622@N361f) (let ((N3626@new* N3622@N361f) (N3627@old* N3621@N361d) (N3628@y* N3620@N361b)) (list 'call-with-values (list 'lambda '() (car N360b@rhs*)) (list 'lambda N3628@y* (N3612@f (cdr N360a@lhs*) (cdr N360b@rhs*) N3627@old* N3626@new*))))))) N3616@ls/false) (let ((N362c@t N3614@t)) (let ((N362e@ls/false (N311d@syntax-dispatch N362c@t '#(each+ any () any)))) (if N362e@ls/false (apply (lambda (N3630@x* N3631@x) (call-with-values (lambda () (N35f3@rename N3631@x N360c@old* N360d@new*)) (lambda (N3634@y N3635@old* N3636@new*) (call-with-values (lambda () (N35f5@rename* N3630@x* N3635@old* N3636@new*)) (lambda (N363a@y* N363b@old* N363c@new*) (list 'call-with-values (list 'lambda '() (car N360b@rhs*)) (list 'lambda (append N363a@y* N3634@y) (N3612@f (cdr N360a@lhs*) (cdr N360b@rhs*) N363b@old* N363c@new*)))))))) N362e@ls/false) (let ((N3640@t N362c@t)) (let ((N3642@ls/false (N311d@syntax-dispatch N3640@t 'any))) (if N3642@ls/false (apply (lambda (N3644@others) (N3201@syntax-violation '#f '"malformed bindings" N35f0@stx N3644@others)) N3642@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3640@t)))))))))))))) N3600@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N35fe@t)))))))))) (set! N4c2a@N30db@let-values-macro N30db@let-values-macro) (set! N30dd@let*-values-macro (lambda (N3660@stx) (letrec* ((N3663@check (lambda (N3692@x*) (if (not (null? N3692@x*)) (let ((N3694@x (car N3692@x*))) (begin (if (not (N2f16@id? N3694@x)) (N3201@syntax-violation '#f '"not an identifier" N3660@stx N3694@x) (void)) (N3663@check (cdr N3692@x*)) (if (N2f22@bound-id-member? N3694@x (cdr N3692@x*)) (N3201@syntax-violation '#f '"duplicate identifier" N3660@stx N3694@x) (void)))) (void))))) (let ((N3664@t N3660@stx)) (let ((N3666@ls/false (N311d@syntax-dispatch N3664@t '(_ () any . each-any)))) (if N3666@ls/false (apply (lambda (N3668@b N3669@b*) (cons* (N30d3@bless 'let) '() N3668@b N3669@b*)) N3666@ls/false) (let ((N366c@t N3664@t)) (let ((N366e@ls/false (N311d@syntax-dispatch N366c@t '(_ #(each (any any)) any . each-any)))) (if N366e@ls/false (apply (lambda (N3670@lhs* N3671@rhs* N3672@b N3673@b*) (N30d3@bless (let N367c@f ((N3678@lhs* N3670@lhs*) (N3679@rhs* N3671@rhs*)) (if (null? N3678@lhs*) (cons 'begin (cons N3672@b N3673@b*)) (let ((N367e@t (car N3678@lhs*))) (let ((N3680@ls/false (N311d@syntax-dispatch N367e@t 'each-any))) (if N3680@ls/false (apply (lambda (N3682@x*) (begin (N3663@check N3682@x*) (list 'call-with-values (list 'lambda '() (car N3679@rhs*)) (list 'lambda N3682@x* (N367c@f (cdr N3678@lhs*) (cdr N3679@rhs*)))))) N3680@ls/false) (let ((N3684@t N367e@t)) (let ((N3686@ls/false (N311d@syntax-dispatch N3684@t '#(each+ any () any)))) (if N3686@ls/false (apply (lambda (N3688@x* N3689@x) (begin (N3663@check (cons N3689@x N3688@x*)) (list 'call-with-values (list 'lambda '() (car N3679@rhs*)) (list 'lambda (append N3688@x* N3689@x) (N367c@f (cdr N3678@lhs*) (cdr N3679@rhs*)))))) N3686@ls/false) (let ((N368c@t N3684@t)) (let ((N368e@ls/false (N311d@syntax-dispatch N368c@t 'any))) (if N368e@ls/false (apply (lambda (N3690@others) (N3201@syntax-violation '#f '"malformed bindings" N3660@stx N3690@others)) N368e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N368c@t)))))))))))))) N366e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N366c@t)))))))))) (set! N4c2b@N30dd@let*-values-macro N30dd@let*-values-macro) (set! N30df@trace-lambda-macro (lambda (N3696@stx) (let ((N3698@t N3696@stx)) (let ((N369a@ls/false (N311d@syntax-dispatch N3698@t '(_ any each-any any . each-any)))) (if N369a@ls/false (apply (lambda (N369c@who N369d@fmls N369e@b N369f@b*) (if (N2f1e@valid-bound-ids? N369d@fmls) (N30d3@bless (list 'make-traced-procedure (list 'quote N369c@who) (cons 'lambda (cons N369d@fmls (cons N369e@b N369f@b*))))) (N30d7@invalid-fmls-error N3696@stx N369d@fmls))) N369a@ls/false) (let ((N36a4@t N3698@t)) (let ((N36a6@ls/false (N311d@syntax-dispatch N36a4@t '(_ any #(each+ any () any) any . each-any)))) (if N36a6@ls/false (apply (lambda (N36a8@who N36a9@fmls N36aa@last N36ab@b N36ac@b*) (if (N2f1e@valid-bound-ids? (cons N36aa@last N36a9@fmls)) (N30d3@bless (list 'make-traced-procedure (list 'quote N36a8@who) (cons 'lambda (cons (append N36a9@fmls N36aa@last) (cons N36ab@b N36ac@b*))))) (N30d7@invalid-fmls-error N3696@stx (append N36a9@fmls N36aa@last)))) N36a6@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N36a4@t))))))))) (set! N4c2c@N30df@trace-lambda-macro N30df@trace-lambda-macro) (set! N30e1@trace-define-macro (lambda (N36b2@stx) (let ((N36b4@t N36b2@stx)) (let ((N36b6@ls/false (N311d@syntax-dispatch N36b4@t '(_ (any . each-any) any . each-any)))) (if N36b6@ls/false (apply (lambda (N36b8@who N36b9@fmls N36ba@b N36bb@b*) (if (N2f1e@valid-bound-ids? N36b9@fmls) (N30d3@bless (list 'define N36b8@who (list 'make-traced-procedure (list 'quote N36b8@who) (cons 'lambda (cons N36b9@fmls (cons N36ba@b N36bb@b*)))))) (N30d7@invalid-fmls-error N36b2@stx N36b9@fmls))) N36b6@ls/false) (let ((N36c0@t N36b4@t)) (let ((N36c2@ls/false (N311d@syntax-dispatch N36c0@t '(_ (any . #(each+ any () any)) any . each-any)))) (if N36c2@ls/false (apply (lambda (N36c4@who N36c5@fmls N36c6@last N36c7@b N36c8@b*) (if (N2f1e@valid-bound-ids? (cons N36c6@last N36c5@fmls)) (N30d3@bless (list 'define N36c4@who (list 'make-traced-procedure (list 'quote N36c4@who) (cons 'lambda (cons (append N36c5@fmls N36c6@last) (cons N36c7@b N36c8@b*)))))) (N30d7@invalid-fmls-error N36b2@stx (append N36c5@fmls N36c6@last)))) N36c2@ls/false) (let ((N36ce@t N36c0@t)) (let ((N36d0@ls/false (N311d@syntax-dispatch N36ce@t '(_ any any)))) (if N36d0@ls/false (apply (lambda (N36d2@who N36d3@expr) (if (N2f16@id? N36d2@who) (N30d3@bless (list 'define N36d2@who (list 'let (list (list 'v N36d3@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote N36d2@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (N3201@syntax-violation '#f '"invalid name" N36b2@stx))) N36d0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N36ce@t)))))))))))) (set! N4c2d@N30e1@trace-define-macro N30e1@trace-define-macro) (set! N30e3@trace-define-syntax-macro (lambda (N36d6@stx) (let ((N36d8@t N36d6@stx)) (let ((N36da@ls/false (N311d@syntax-dispatch N36d8@t '(_ any any)))) (if N36da@ls/false (apply (lambda (N36dc@who N36dd@expr) (if (N2f16@id? N36dc@who) (N30d3@bless (list 'define-syntax N36dc@who (list 'make-traced-macro (list 'quote N36dc@who) N36dd@expr))) (N3201@syntax-violation '#f '"invalid name" N36d6@stx))) N36da@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N36d8@t)))))) (set! N4c2e@N30e3@trace-define-syntax-macro N30e3@trace-define-syntax-macro) (set! N30e5@trace-let/rec-syntax (lambda (N36e0@who) (lambda (N36e2@stx) (let ((N36e4@t N36e2@stx)) (let ((N36e6@ls/false (N311d@syntax-dispatch N36e4@t '(_ #(each (any any)) any . each-any)))) (if N36e6@ls/false (apply (lambda (N36e8@lhs* N36e9@rhs* N36ea@b N36eb@b*) (if (N2f1e@valid-bound-ids? N36e8@lhs*) (let ((N36f0@rhs* (map (lambda (N36f2@lhs N36f3@rhs) (list 'make-traced-macro (list 'quote N36f2@lhs) N36f3@rhs)) N36e8@lhs* N36e9@rhs*))) (N30d3@bless (cons N36e0@who (cons (map list N36e8@lhs* N36f0@rhs*) (cons N36ea@b N36eb@b*))))) (N30d7@invalid-fmls-error N36e2@stx N36e8@lhs*))) N36e6@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N36e4@t))))))) (set! N4c2f@N30e5@trace-let/rec-syntax N30e5@trace-let/rec-syntax) (set! N30e7@trace-let-syntax-macro (N30e5@trace-let/rec-syntax 'let-syntax)) (set! N4c30@N30e7@trace-let-syntax-macro N30e7@trace-let-syntax-macro) (set! N30e9@trace-letrec-syntax-macro (N30e5@trace-let/rec-syntax 'letrec-syntax)) (set! N4c31@N30e9@trace-letrec-syntax-macro N30e9@trace-letrec-syntax-macro) (set! N30eb@guard-macro (lambda (N36f6@x) (letrec* ((N36f9@gen-clauses (lambda (N3710@con N3711@outerk N3712@clause*) (letrec* ((N3717@f (lambda (N3750@x N3751@k) (let ((N3754@t N3750@x)) (let ((N3756@ls/false (N311d@syntax-dispatch N3754@t '(any #(scheme-id =>) any)))) (if N3756@ls/false (apply (lambda (N3758@e N3759@p) (let ((N375c@t (gensym))) (list 'let (list (list N375c@t N3758@e)) (list 'if N375c@t (list N3759@p N375c@t) N3751@k)))) N3756@ls/false) (let ((N375e@t N3754@t)) (let ((N3760@ls/false (N311d@syntax-dispatch N375e@t '(any)))) (if N3760@ls/false (apply (lambda (N3762@e) (let ((N3764@t (gensym))) (list 'let (list (list N3764@t N3762@e)) (list 'if N3764@t N3764@t N3751@k)))) N3760@ls/false) (let ((N3766@t N375e@t)) (let ((N3768@ls/false (N311d@syntax-dispatch N3766@t '(any any . each-any)))) (if N3768@ls/false (apply (lambda (N376a@e N376b@v N376c@v*) (list 'if N376a@e (cons 'begin (cons N376b@v N376c@v*)) N3751@k)) N3768@ls/false) (let ((N3770@t N3766@t)) (let ((N3772@ls/false (N311d@syntax-dispatch N3770@t '_))) (if N3772@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid guard clause" N3750@x)) N3772@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3770@t))))))))))))))) (N3719@f* (lambda (N3726@x*) (let ((N3728@t N3726@x*)) (let ((N372a@ls/false (N311d@syntax-dispatch N3728@t '()))) (if N372a@ls/false (apply (lambda () (let ((N372c@g (gensym))) (values (list N372c@g (list 'lambda '() (list 'raise-continuable N3710@con))) N372c@g))) N372a@ls/false) (let ((N372e@t N3728@t)) (let ((N3730@ls/false (N311d@syntax-dispatch N372e@t '((#(scheme-id else) any . each-any))))) (if N3730@ls/false (apply (lambda (N3732@e N3733@e*) (values (cons 'begin (cons N3732@e N3733@e*)) '#f)) N3730@ls/false) (let ((N3736@t N372e@t)) (let ((N3738@ls/false (N311d@syntax-dispatch N3736@t '(any . any)))) (if N3738@ls/false (apply (lambda (N373a@cls N373b@cls*) (call-with-values (lambda () (N3719@f* N373b@cls*)) (lambda (N3742@N373f N3743@N3741) (let ((N3746@g N3743@N3741) (N3747@e N3742@N373f)) (values (N3717@f N373a@cls N3747@e) N3746@g))))) N3738@ls/false) (let ((N374a@t N3736@t)) (let ((N374c@ls/false (N311d@syntax-dispatch N374a@t 'any))) (if N374c@ls/false (apply (lambda (N374e@others) (N3201@syntax-violation '#f '"invalid guard clause" N374e@others)) N374c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N374a@t)))))))))))))))) (call-with-values (lambda () (N3719@f* N3712@clause*)) (lambda (N371e@N371b N371f@N371d) (let ((N3722@raisek N371f@N371d) (N3723@code N371e@N371b)) (if N3722@raisek (list (list 'call/cc (list 'lambda (list N3722@raisek) (list N3711@outerk (list 'lambda '() N3723@code))))) (list N3711@outerk (list 'lambda '() N3723@code)))))))))) (let ((N36fa@t N36f6@x)) (let ((N36fc@ls/false (N311d@syntax-dispatch N36fa@t '(_ (any . each-any) any . each-any)))) (if (and N36fc@ls/false (apply (lambda (N36fe@con N36ff@clause* N3700@b N3701@b*) (N2f16@id? N36fe@con)) N36fc@ls/false)) (apply (lambda (N3706@con N3707@clause* N3708@b N3709@b*) (let ((N370e@outerk (gensym))) (N30d3@bless (list (list 'call/cc (list 'lambda (list N370e@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list N3706@con) (N36f9@gen-clauses N3706@con N370e@outerk N3707@clause*)) (cons 'lambda (cons '() (cons N3708@b N3709@b*))))))))))) N36fc@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N36fa@t))))))) (set! N4c32@N30eb@guard-macro N30eb@guard-macro) (set! N30ed@define-enumeration-macro (lambda (N3774@stx) (letrec* ((N3777@set? (lambda (N3790@x) (or (null? N3790@x) (and (not (memq (car N3790@x) (cdr N3790@x))) (N3777@set? (cdr N3790@x)))))) (N3779@remove-dups (lambda (N378e@ls) (if (null? N378e@ls) '() (cons (car N378e@ls) (N3779@remove-dups (remq (car N378e@ls) (cdr N378e@ls)))))))) (let ((N377a@t N3774@stx)) (let ((N377c@ls/false (N311d@syntax-dispatch N377a@t '(_ any each-any any)))) (if (and N377c@ls/false (apply (lambda (N377e@name N377f@id* N3780@maker) (and (N2f16@id? N377e@name) (N2f16@id? N3780@maker) (for-all N2f16@id? N377f@id*))) N377c@ls/false)) (apply (lambda (N3784@name N3785@id* N3786@maker) (let ((N378a@name* (N3779@remove-dups (N3207@syntax->datum N3785@id*))) (N378b@mk (gensym))) (N30d3@bless (list 'begin (list 'define N378b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote N378a@name*)))) (list 'define-syntax N3784@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote N378a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote N3784@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax N3786@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote N3786@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote N378a@name*)) (cons 'syntax-violation (cons (list 'quote N3786@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons N378b@mk '('(n* ...))))))))))))) N377c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N377a@t))))))) (set! N4c33@N30ed@define-enumeration-macro N30ed@define-enumeration-macro) (set! N30ef@time-macro (lambda (N3792@stx) (let ((N3794@t N3792@stx)) (let ((N3796@ls/false (N311d@syntax-dispatch N3794@t '(_ any)))) (if N3796@ls/false (apply (lambda (N3798@expr) (N30d3@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() N3798@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) N3796@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3794@t)))))) (set! N4c34@N30ef@time-macro N30ef@time-macro) (set! N30f1@delay-macro (lambda (N379a@stx) (let ((N379c@t N379a@stx)) (let ((N379e@ls/false (N311d@syntax-dispatch N379c@t '(_ any)))) (if N379e@ls/false (apply (lambda (N37a0@expr) (N30d3@bless (list 'make-promise (list 'lambda '() N37a0@expr)))) N379e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N379c@t)))))) (set! N4c35@N30f1@delay-macro N30f1@delay-macro) (set! N30f3@assert-macro (lambda (N37a2@stx) (let ((N37a4@t N37a2@stx)) (let ((N37a6@ls/false (N311d@syntax-dispatch N37a4@t '(_ any)))) (if N37a6@ls/false (apply (lambda (N37a8@expr) (let ((N37aa@pos (or (N31f9@expression-position N37a2@stx) (N31f9@expression-position N37a8@expr)))) (N30d3@bless (list 'let (list (list 'x N37a8@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote N37a8@expr) (list 'quote N37aa@pos))))))) N37a6@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N37a4@t)))))) (set! N4c36@N30f3@assert-macro N30f3@assert-macro) (set! N30f5@endianness-macro (lambda (N37ac@stx) (let ((N37ae@t N37ac@stx)) (let ((N37b0@ls/false (N311d@syntax-dispatch N37ae@t '(_ any)))) (if N37b0@ls/false (apply (lambda (N37b2@e) (let ((N37b4@t (N3207@syntax->datum N37b2@e))) (if (memv N37b4@t '(little)) (N30d3@bless ''little) (if (memv N37b4@t '(big)) (N30d3@bless ''big) (N3201@syntax-violation '#f '"endianness must be big or little" N37ac@stx))))) N37b0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N37ae@t)))))) (set! N4c37@N30f5@endianness-macro N30f5@endianness-macro) (set! N30f7@identifier-syntax-macro (lambda (N37b6@stx) (let ((N37b8@t N37b6@stx)) (let ((N37ba@ls/false (N311d@syntax-dispatch N37b8@t '(_ any)))) (if N37ba@ls/false (apply (lambda (N37bc@expr) (N30d3@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax N37bc@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax N37bc@expr) '((syntax (e* ...)))))))))) N37ba@ls/false) (let ((N37be@t N37b8@t)) (let ((N37c0@ls/false (N311d@syntax-dispatch N37be@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and N37c0@ls/false (apply (lambda (N37c2@id1 N37c3@expr1 N37c4@id2 N37c5@expr2 N37c6@expr3) (and (N2f16@id? N37c2@id1) (N2f16@id? N37c4@id2) (N2f16@id? N37c5@expr2))) N37c0@ls/false)) (apply (lambda (N37cc@id1 N37cd@expr1 N37ce@id2 N37cf@expr2 N37d0@expr3) (N30d3@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax N37cd@expr1)) (list (list 'set! 'id N37cf@expr2) (list 'syntax N37d0@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons N37cd@expr1 '(e* ...))))))))) N37c0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N37be@t))))))))) (set! N4c38@N30f7@identifier-syntax-macro N30f7@identifier-syntax-macro) (set! N30f9@do-macro (lambda (N37d6@stx) (letrec* ((N37d9@bind (lambda (N37f0@x) (let ((N37f2@t N37f0@x)) (let ((N37f4@ls/false (N311d@syntax-dispatch N37f2@t '(any any)))) (if N37f4@ls/false (apply (lambda (N37f6@x N37f7@init) (list N37f6@x N37f7@init N37f6@x)) N37f4@ls/false) (let ((N37fa@t N37f2@t)) (let ((N37fc@ls/false (N311d@syntax-dispatch N37fa@t '(any any any)))) (if N37fc@ls/false (apply (lambda (N37fe@x N37ff@init N3800@step) (list N37fe@x N37ff@init N3800@step)) N37fc@ls/false) (let ((N3804@t N37fa@t)) (let ((N3806@ls/false (N311d@syntax-dispatch N3804@t '_))) (if N3806@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid binding" N37d6@stx)) N3806@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3804@t))))))))))))) (let ((N37da@t N37d6@stx)) (let ((N37dc@ls/false (N311d@syntax-dispatch N37da@t '(_ each-any (any . each-any) . each-any)))) (if N37dc@ls/false (apply (lambda (N37de@binding* N37df@test N37e0@expr* N37e1@command*) (let ((N37e6@t (map N37d9@bind N37de@binding*))) (let ((N37e8@ls/false (N311d@syntax-dispatch N37e6@t '#(each (any any any))))) (if N37e8@ls/false (apply (lambda (N37ea@x* N37eb@init* N37ec@step*) (if (N2f1e@valid-bound-ids? N37ea@x*) (N30d3@bless (list 'letrec (list (list 'loop (list 'lambda N37ea@x* (list 'if N37df@test (cons 'begin (cons '(if #f #f) N37e0@expr*)) (cons 'begin (append N37e1@command* (list (cons 'loop N37ec@step*)))))))) (cons 'loop N37eb@init*))) (N3201@syntax-violation '#f '"invalid bindings" N37d6@stx))) N37e8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N37e6@t))))) N37dc@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N37da@t))))))) (set! N4c39@N30f9@do-macro N30f9@do-macro) (set! N30fb@let*-macro (lambda (N3808@stx) (let ((N380a@t N3808@stx)) (let ((N380c@ls/false (N311d@syntax-dispatch N380a@t '(_ #(each (any any)) any . each-any)))) (if (and N380c@ls/false (apply (lambda (N380e@lhs* N380f@rhs* N3810@b N3811@b*) (for-all N2f16@id? N380e@lhs*)) N380c@ls/false)) (apply (lambda (N3816@lhs* N3817@rhs* N3818@b N3819@b*) (N30d3@bless (let N3820@f ((N381e@x* (map list N3816@lhs* N3817@rhs*))) (if (null? N381e@x*) (cons 'let (cons '() (cons N3818@b N3819@b*))) (list 'let (list (car N381e@x*)) (N3820@f (cdr N381e@x*))))))) N380c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N380a@t)))))) (set! N4c3a@N30fb@let*-macro N30fb@let*-macro) (set! N30fd@or-macro (lambda (N3822@stx) (let ((N3824@t N3822@stx)) (let ((N3826@ls/false (N311d@syntax-dispatch N3824@t '(_)))) (if N3826@ls/false (apply (lambda () '#f) N3826@ls/false) (let ((N3828@t N3824@t)) (let ((N382a@ls/false (N311d@syntax-dispatch N3828@t '(_ any . each-any)))) (if N382a@ls/false (apply (lambda (N382c@e N382d@e*) (N30d3@bless (let N3834@f ((N3830@e N382c@e) (N3831@e* N382d@e*)) (if (null? N3831@e*) (list 'begin '#f N3830@e) (list 'let (list (list 't N3830@e)) (list 'if 't 't (N3834@f (car N3831@e*) (cdr N3831@e*)))))))) N382a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3828@t))))))))) (set! N4c3b@N30fd@or-macro N30fd@or-macro) (set! N30ff@and-macro (lambda (N3836@stx) (let ((N3838@t N3836@stx)) (let ((N383a@ls/false (N311d@syntax-dispatch N3838@t '(_)))) (if N383a@ls/false (apply (lambda () '#t) N383a@ls/false) (let ((N383c@t N3838@t)) (let ((N383e@ls/false (N311d@syntax-dispatch N383c@t '(_ any . each-any)))) (if N383e@ls/false (apply (lambda (N3840@e N3841@e*) (N30d3@bless (let N3848@f ((N3844@e N3840@e) (N3845@e* N3841@e*)) (if (null? N3845@e*) (list 'begin '#f N3844@e) (cons 'if (cons N3844@e (cons (N3848@f (car N3845@e*) (cdr N3845@e*)) '(#f)))))))) N383e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N383c@t))))))))) (set! N4c3c@N30ff@and-macro N30ff@and-macro) (set! N3101@cond-macro (lambda (N384a@stx) (let ((N384c@t N384a@stx)) (let ((N384e@ls/false (N311d@syntax-dispatch N384c@t '(_ any . each-any)))) (if N384e@ls/false (apply (lambda (N3850@cls N3851@cls*) (N30d3@bless (let N3858@f ((N3854@cls N3850@cls) (N3855@cls* N3851@cls*)) (if (null? N3855@cls*) (let ((N385a@t N3854@cls)) (let ((N385c@ls/false (N311d@syntax-dispatch N385a@t '(#(scheme-id else) any . each-any)))) (if N385c@ls/false (apply (lambda (N385e@e N385f@e*) (cons 'begin (cons N385e@e N385f@e*))) N385c@ls/false) (let ((N3862@t N385a@t)) (let ((N3864@ls/false (N311d@syntax-dispatch N3862@t '(any #(scheme-id =>) any)))) (if N3864@ls/false (apply (lambda (N3866@e N3867@p) (list 'let (list (list 't N3866@e)) (list 'if 't (cons N3867@p '(t))))) N3864@ls/false) (let ((N386a@t N3862@t)) (let ((N386c@ls/false (N311d@syntax-dispatch N386a@t '(any)))) (if N386c@ls/false (apply (lambda (N386e@e) (cons 'or (cons N386e@e '((if #f #f))))) N386c@ls/false) (let ((N3870@t N386a@t)) (let ((N3872@ls/false (N311d@syntax-dispatch N3870@t '(any . each-any)))) (if N3872@ls/false (apply (lambda (N3874@e N3875@e*) (list 'if N3874@e (cons 'begin N3875@e*))) N3872@ls/false) (let ((N3878@t N3870@t)) (let ((N387a@ls/false (N311d@syntax-dispatch N3878@t '_))) (if N387a@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid last clause" N384a@stx)) N387a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3878@t)))))))))))))))) (let ((N387c@t N3854@cls)) (let ((N387e@ls/false (N311d@syntax-dispatch N387c@t '(#(scheme-id else) any . each-any)))) (if N387e@ls/false (apply (lambda (N3880@e N3881@e*) (N3201@syntax-violation '#f '"incorrect position of keyword else" N384a@stx)) N387e@ls/false) (let ((N3884@t N387c@t)) (let ((N3886@ls/false (N311d@syntax-dispatch N3884@t '(any #(scheme-id =>) any)))) (if N3886@ls/false (apply (lambda (N3888@e N3889@p) (list 'let (list (list 't N3888@e)) (list 'if 't (cons N3889@p '(t)) (N3858@f (car N3855@cls*) (cdr N3855@cls*))))) N3886@ls/false) (let ((N388c@t N3884@t)) (let ((N388e@ls/false (N311d@syntax-dispatch N388c@t '(any)))) (if N388e@ls/false (apply (lambda (N3890@e) (list 'or N3890@e (N3858@f (car N3855@cls*) (cdr N3855@cls*)))) N388e@ls/false) (let ((N3892@t N388c@t)) (let ((N3894@ls/false (N311d@syntax-dispatch N3892@t '(any . each-any)))) (if N3894@ls/false (apply (lambda (N3896@e N3897@e*) (list 'if N3896@e (cons 'begin N3897@e*) (N3858@f (car N3855@cls*) (cdr N3855@cls*)))) N3894@ls/false) (let ((N389a@t N3892@t)) (let ((N389c@ls/false (N311d@syntax-dispatch N389a@t '_))) (if N389c@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid last clause" N384a@stx)) N389c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N389a@t)))))))))))))))))))) N384e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N384c@t)))))) (set! N4c3d@N3101@cond-macro N3101@cond-macro) (set! N3103@do-include (lambda (N389e@stx N389f@id N38a0@filename) (let ((N38a4@filename (N2f2a@stx->datum N38a0@filename))) (begin (if (not (and (string? N38a4@filename) (N2f16@id? N389f@id))) (N3201@syntax-violation '#f '"invalid syntax" N389e@stx) (void)) (cons (N30d3@bless 'begin) (with-input-from-file N38a4@filename (lambda () (let N38a8@f ((N38a6@ls '())) (let ((N38aa@x (N2a58@N2928@read-annotated))) (if (eof-object? N38aa@x) (reverse N38a6@ls) (N38a8@f (cons (N2ef6@datum->stx N389f@id N38aa@x) N38a6@ls)))))))))))) (set! N4c3e@N3103@do-include N3103@do-include) (set! N3105@include-macro (lambda (N38ac@e) (let ((N38ae@t N38ac@e)) (let ((N38b0@ls/false (N311d@syntax-dispatch N38ae@t '(any any)))) (if N38b0@ls/false (apply (lambda (N38b2@id N38b3@filename) (N3103@do-include N38ac@e N38b2@id N38b3@filename)) N38b0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N38ae@t)))))) (set! N4c3f@N3105@include-macro N3105@include-macro) (set! N3107@include-into-macro (lambda (N38b6@e) (let ((N38b8@t N38b6@e)) (let ((N38ba@ls/false (N311d@syntax-dispatch N38b8@t '(_ any any)))) (if N38ba@ls/false (apply (lambda (N38bc@id N38bd@filename) (N3103@do-include N38b6@e N38bc@id N38bd@filename)) N38ba@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N38b8@t)))))) (set! N4c40@N3107@include-into-macro N3107@include-into-macro) (set! N3109@syntax-rules-macro (lambda (N38c0@e) (let ((N38c2@t N38c0@e)) (let ((N38c4@ls/false (N311d@syntax-dispatch N38c2@t '(_ each-any . #(each (any any)))))) (if N38c4@ls/false (apply (lambda (N38c6@lits N38c7@pat* N38c8@tmp*) (begin (N3123@verify-literals N38c6@lits N38c0@e) (N30d3@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons N38c6@lits (map (lambda (N38cc@pat N38cd@tmp) (let ((N38d0@t N38cc@pat)) (let ((N38d2@ls/false (N311d@syntax-dispatch N38d0@t '(_ . any)))) (if N38d2@ls/false (apply (lambda (N38d4@rest) (list (cons 'g N38d4@rest) (list 'syntax N38cd@tmp))) N38d2@ls/false) (let ((N38d6@t N38d0@t)) (let ((N38d8@ls/false (N311d@syntax-dispatch N38d6@t '_))) (if N38d8@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid syntax-rules pattern" N38c0@e N38cc@pat)) N38d8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N38d6@t)))))))) N38c7@pat* N38c8@tmp*)))))))) N38c4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N38c2@t)))))) (set! N4c41@N3109@syntax-rules-macro N3109@syntax-rules-macro) (set! N310b@quasiquote-macro (letrec* ((N38db@datum (lambda (N39dc@x) (list (N30a5@scheme-stx 'quote) (N2efe@mkstx N39dc@x '() '() '())))) (N38f7@quasicons* (lambda (N39d4@x N39d5@y) (let N39da@f ((N39d8@x N39d4@x)) (if (null? N39d8@x) N39d5@y (N38f9@quasicons (car N39d8@x) (N39da@f (cdr N39d8@x))))))) (N38f9@quasicons (lambda (N39ae@x N39af@y) (let ((N39b2@t N39af@y)) (let ((N39b4@ls/false (N311d@syntax-dispatch N39b2@t '(#(scheme-id quote) any)))) (if N39b4@ls/false (apply (lambda (N39b6@dy) (let ((N39b8@t N39ae@x)) (let ((N39ba@ls/false (N311d@syntax-dispatch N39b8@t '(#(scheme-id quote) any)))) (if N39ba@ls/false (apply (lambda (N39bc@dx) (list (N30a5@scheme-stx 'quote) (cons N39bc@dx N39b6@dy))) N39ba@ls/false) (let ((N39be@t N39b8@t)) (let ((N39c0@ls/false (N311d@syntax-dispatch N39be@t '_))) (if N39c0@ls/false (apply (lambda () (let ((N39c2@t N39b6@dy)) (let ((N39c4@ls/false (N311d@syntax-dispatch N39c2@t '()))) (if N39c4@ls/false (apply (lambda () (list (N30a5@scheme-stx 'list) N39ae@x)) N39c4@ls/false) (let ((N39c6@t N39c2@t)) (let ((N39c8@ls/false (N311d@syntax-dispatch N39c6@t '_))) (if N39c8@ls/false (apply (lambda () (list (N30a5@scheme-stx 'cons) N39ae@x N39af@y)) N39c8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39c6@t)))))))) N39c0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39be@t)))))))) N39b4@ls/false) (let ((N39ca@t N39b2@t)) (let ((N39cc@ls/false (N311d@syntax-dispatch N39ca@t '(#(scheme-id list) . each-any)))) (if N39cc@ls/false (apply (lambda (N39ce@stuff) (cons* (N30a5@scheme-stx 'list) N39ae@x N39ce@stuff)) N39cc@ls/false) (let ((N39d0@t N39ca@t)) (let ((N39d2@ls/false (N311d@syntax-dispatch N39d0@t '_))) (if N39d2@ls/false (apply (lambda () (list (N30a5@scheme-stx 'cons) N39ae@x N39af@y)) N39d2@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39d0@t)))))))))))) (N38fb@quasiappend (lambda (N3994@x N3995@y) (let ((N3998@ls (let N399c@f ((N399a@x N3994@x)) (if (null? N399a@x) (let ((N399e@t N3995@y)) (let ((N39a0@ls/false (N311d@syntax-dispatch N399e@t '(#(scheme-id quote) ())))) (if N39a0@ls/false (apply (lambda () '()) N39a0@ls/false) (let ((N39a2@t N399e@t)) (let ((N39a4@ls/false (N311d@syntax-dispatch N39a2@t '_))) (if N39a4@ls/false (apply (lambda () (list N3995@y)) N39a4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39a2@t))))))) (let ((N39a6@t (car N399a@x))) (let ((N39a8@ls/false (N311d@syntax-dispatch N39a6@t '(#(scheme-id quote) ())))) (if N39a8@ls/false (apply (lambda () (N399c@f (cdr N399a@x))) N39a8@ls/false) (let ((N39aa@t N39a6@t)) (let ((N39ac@ls/false (N311d@syntax-dispatch N39aa@t '_))) (if N39ac@ls/false (apply (lambda () (cons (car N399a@x) (N399c@f (cdr N399a@x)))) N39ac@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39aa@t))))))))))) (if (null? N3998@ls) (list (N30a5@scheme-stx 'quote) '()) (if (null? (cdr N3998@ls)) (car N3998@ls) (cons* (N30a5@scheme-stx 'append) N3998@ls)))))) (N38fd@quasivector (lambda (N3962@x) (let ((N3964@pat-x N3962@x)) (let ((N3966@t N3964@pat-x)) (let ((N3968@ls/false (N311d@syntax-dispatch N3966@t '(#(scheme-id quote) each-any)))) (if N3968@ls/false (apply (lambda (N396a@x*) (list (N30a5@scheme-stx 'quote) (list->vector N396a@x*))) N3968@ls/false) (let ((N396c@t N3966@t)) (let ((N396e@ls/false (N311d@syntax-dispatch N396c@t '_))) (if N396e@ls/false (apply (lambda () (let N3976@f ((N3970@x N3962@x) (N3971@k (lambda (N3974@ls) (cons* (N30a5@scheme-stx 'vector) N3974@ls)))) (let ((N3978@t N3970@x)) (let ((N397a@ls/false (N311d@syntax-dispatch N3978@t '(#(scheme-id quote) each-any)))) (if N397a@ls/false (apply (lambda (N397c@x*) (N3971@k (map (lambda (N397e@x) (list (N30a5@scheme-stx 'quote) N397e@x)) N397c@x*))) N397a@ls/false) (let ((N3980@t N3978@t)) (let ((N3982@ls/false (N311d@syntax-dispatch N3980@t '(#(scheme-id list) . each-any)))) (if N3982@ls/false (apply (lambda (N3984@x*) (N3971@k N3984@x*)) N3982@ls/false) (let ((N3986@t N3980@t)) (let ((N3988@ls/false (N311d@syntax-dispatch N3986@t '(#(scheme-id cons) any any)))) (if N3988@ls/false (apply (lambda (N398a@x N398b@y) (N3976@f N398b@y (lambda (N398e@ls) (N3971@k (cons N398a@x N398e@ls))))) N3988@ls/false) (let ((N3990@t N3986@t)) (let ((N3992@ls/false (N311d@syntax-dispatch N3990@t '_))) (if N3992@ls/false (apply (lambda () (list (N30a5@scheme-stx 'list->vector) N3964@pat-x)) N3992@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3990@t))))))))))))))) N396e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N396c@t)))))))))) (N38ff@vquasi (lambda (N3940@p N3941@lev) (let ((N3944@t N3940@p)) (let ((N3946@ls/false (N311d@syntax-dispatch N3944@t '(any . any)))) (if N3946@ls/false (apply (lambda (N3948@p N3949@q) (let ((N394c@t N3948@p)) (let ((N394e@ls/false (N311d@syntax-dispatch N394c@t '(#(scheme-id unquote) . each-any)))) (if N394e@ls/false (apply (lambda (N3950@p) (if (= N3941@lev '0) (N38f7@quasicons* N3950@p (N38ff@vquasi N3949@q N3941@lev)) (N38f9@quasicons (N38f9@quasicons (N38db@datum 'unquote) (N3901@quasi N3950@p (- N3941@lev '1))) (N38ff@vquasi N3949@q N3941@lev)))) N394e@ls/false) (let ((N3952@t N394c@t)) (let ((N3954@ls/false (N311d@syntax-dispatch N3952@t '(#(scheme-id unquote-splicing) . each-any)))) (if N3954@ls/false (apply (lambda (N3956@p) (if (= N3941@lev '0) (N38fb@quasiappend N3956@p (N38ff@vquasi N3949@q N3941@lev)) (N38f9@quasicons (N38f9@quasicons (N38db@datum 'unquote-splicing) (N3901@quasi N3956@p (- N3941@lev '1))) (N38ff@vquasi N3949@q N3941@lev)))) N3954@ls/false) (let ((N3958@t N3952@t)) (let ((N395a@ls/false (N311d@syntax-dispatch N3958@t 'any))) (if N395a@ls/false (apply (lambda (N395c@p) (N38f9@quasicons (N3901@quasi N395c@p N3941@lev) (N38ff@vquasi N3949@q N3941@lev))) N395a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3958@t))))))))))) N3946@ls/false) (let ((N395e@t N3944@t)) (let ((N3960@ls/false (N311d@syntax-dispatch N395e@t '()))) (if N3960@ls/false (apply (lambda () (list (N30a5@scheme-stx 'quote) '())) N3960@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N395e@t))))))))) (N3901@quasi (lambda (N390a@p N390b@lev) (let ((N390e@t N390a@p)) (let ((N3910@ls/false (N311d@syntax-dispatch N390e@t '(#(scheme-id unquote) any)))) (if N3910@ls/false (apply (lambda (N3912@p) (if (= N390b@lev '0) N3912@p (N38f9@quasicons (N38db@datum 'unquote) (N3901@quasi (list N3912@p) (- N390b@lev '1))))) N3910@ls/false) (let ((N3914@t N390e@t)) (let ((N3916@ls/false (N311d@syntax-dispatch N3914@t '((#(scheme-id unquote) . each-any) . any)))) (if N3916@ls/false (apply (lambda (N3918@p N3919@q) (if (= N390b@lev '0) (N38f7@quasicons* N3918@p (N3901@quasi N3919@q N390b@lev)) (N38f9@quasicons (N38f9@quasicons (N38db@datum 'unquote) (N3901@quasi N3918@p (- N390b@lev '1))) (N3901@quasi N3919@q N390b@lev)))) N3916@ls/false) (let ((N391c@t N3914@t)) (let ((N391e@ls/false (N311d@syntax-dispatch N391c@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if N391e@ls/false (apply (lambda (N3920@p N3921@q) (if (= N390b@lev '0) (N38fb@quasiappend N3920@p (N3901@quasi N3921@q N390b@lev)) (N38f9@quasicons (N38f9@quasicons (N38db@datum 'unquote-splicing) (N3901@quasi N3920@p (- N390b@lev '1))) (N3901@quasi N3921@q N390b@lev)))) N391e@ls/false) (let ((N3924@t N391c@t)) (let ((N3926@ls/false (N311d@syntax-dispatch N3924@t '(#(scheme-id quasiquote) any)))) (if N3926@ls/false (apply (lambda (N3928@p) (N38f9@quasicons (N38db@datum 'quasiquote) (N3901@quasi (list N3928@p) (+ N390b@lev '1)))) N3926@ls/false) (let ((N392a@t N3924@t)) (let ((N392c@ls/false (N311d@syntax-dispatch N392a@t '(any . any)))) (if N392c@ls/false (apply (lambda (N392e@p N392f@q) (N38f9@quasicons (N3901@quasi N392e@p N390b@lev) (N3901@quasi N392f@q N390b@lev))) N392c@ls/false) (let ((N3932@t N392a@t)) (let ((N3934@ls/false (N311d@syntax-dispatch N3932@t '#(vector each-any)))) (if (and N3934@ls/false (apply (lambda (N3936@x) (not (N2ee2@stx? N3936@x))) N3934@ls/false)) (apply (lambda (N3938@x) (N38fd@quasivector (N38ff@vquasi N3938@x N390b@lev))) N3934@ls/false) (let ((N393a@t N3932@t)) (let ((N393c@ls/false (N311d@syntax-dispatch N393a@t 'any))) (if N393c@ls/false (apply (lambda (N393e@p) (list (N30a5@scheme-stx 'quote) N393e@p)) N393c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N393a@t))))))))))))))))))))))))) (lambda (N3902@x) (let ((N3904@t N3902@x)) (let ((N3906@ls/false (N311d@syntax-dispatch N3904@t '(_ any)))) (if N3906@ls/false (apply (lambda (N3908@e) (N3901@quasi N3908@e '0)) N3906@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3904@t))))))) (set! N4c42@N310b@quasiquote-macro N310b@quasiquote-macro) (set! N310d@quasisyntax-macro (letrec* ((N39df@quasi (lambda (N39fa@p N39fb@lev) (let ((N39fe@t N39fa@p)) (let ((N3a00@ls/false (N311d@syntax-dispatch N39fe@t '(#(scheme-id unsyntax) any)))) (if N3a00@ls/false (apply (lambda (N3a02@p) (if (= N39fb@lev '0) (let ((N3a04@g (gensym))) (values (list N3a04@g) (list N3a02@p) N3a04@g)) (call-with-values (lambda () (N39df@quasi N3a02@p (- N39fb@lev '1))) (lambda (N3a0c@N3a07 N3a0d@N3a09 N3a0e@N3a0b) (let ((N3a12@p N3a0e@N3a0b) (N3a13@rhs* N3a0d@N3a09) (N3a14@lhs* N3a0c@N3a07)) (values N3a14@lhs* N3a13@rhs* (list 'unsyntax N3a12@p))))))) N3a00@ls/false) (let ((N3a18@t N39fe@t)) (let ((N3a1a@ls/false (N311d@syntax-dispatch N3a18@t '#(scheme-id unsyntax)))) (if (and N3a1a@ls/false (apply (lambda () (= N39fb@lev '0)) N3a1a@ls/false)) (apply (lambda () (N3201@syntax-violation '#f '"incorrect use of unsyntax" N39fa@p)) N3a1a@ls/false) (let ((N3a1c@t N3a18@t)) (let ((N3a1e@ls/false (N311d@syntax-dispatch N3a1c@t '((#(scheme-id unsyntax) . each-any) . any)))) (if N3a1e@ls/false (apply (lambda (N3a20@p* N3a21@q) (call-with-values (lambda () (N39df@quasi N3a21@q N39fb@lev)) (lambda (N3a2a@N3a25 N3a2b@N3a27 N3a2c@N3a29) (let ((N3a30@q N3a2c@N3a29) (N3a31@rhs* N3a2b@N3a27) (N3a32@lhs* N3a2a@N3a25)) (if (= N39fb@lev '0) (let ((N3a36@g* (map (lambda (N3a38@x) (gensym)) N3a20@p*))) (values (append N3a36@g* N3a32@lhs*) (append N3a20@p* N3a31@rhs*) (append N3a36@g* N3a30@q))) (call-with-values (lambda () (N39df@quasi N3a20@p* (- N39fb@lev '1))) (lambda (N3a40@N3a3b N3a41@N3a3d N3a42@N3a3f) (let ((N3a46@p* N3a42@N3a3f) (N3a47@rhs2* N3a41@N3a3d) (N3a48@lhs2* N3a40@N3a3b)) (values (append N3a48@lhs2* N3a32@lhs*) (append N3a47@rhs2* N3a31@rhs*) (cons (cons 'unsyntax N3a46@p*) N3a30@q)))))))))) N3a1e@ls/false) (let ((N3a4c@t N3a1c@t)) (let ((N3a4e@ls/false (N311d@syntax-dispatch N3a4c@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if N3a4e@ls/false (apply (lambda (N3a50@p* N3a51@q) (call-with-values (lambda () (N39df@quasi N3a51@q N39fb@lev)) (lambda (N3a5a@N3a55 N3a5b@N3a57 N3a5c@N3a59) (let ((N3a60@q N3a5c@N3a59) (N3a61@rhs* N3a5b@N3a57) (N3a62@lhs* N3a5a@N3a55)) (if (= N39fb@lev '0) (let ((N3a66@g* (map (lambda (N3a68@x) (gensym)) N3a50@p*))) (values (append (map (lambda (N3a6a@g) (cons N3a6a@g '(...))) N3a66@g*) N3a62@lhs*) (append N3a50@p* N3a61@rhs*) (append (apply append (map (lambda (N3a6c@g) (cons N3a6c@g '(...))) N3a66@g*)) N3a60@q))) (call-with-values (lambda () (N39df@quasi N3a50@p* (- N39fb@lev '1))) (lambda (N3a74@N3a6f N3a75@N3a71 N3a76@N3a73) (let ((N3a7a@p* N3a76@N3a73) (N3a7b@rhs2* N3a75@N3a71) (N3a7c@lhs2* N3a74@N3a6f)) (values (append N3a7c@lhs2* N3a62@lhs*) (append N3a7b@rhs2* N3a61@rhs*) (cons (cons 'unsyntax-splicing N3a7a@p*) N3a60@q)))))))))) N3a4e@ls/false) (let ((N3a80@t N3a4c@t)) (let ((N3a82@ls/false (N311d@syntax-dispatch N3a80@t '#(scheme-id unsyntax-splicing)))) (if (and N3a82@ls/false (apply (lambda () (= N39fb@lev '0)) N3a82@ls/false)) (apply (lambda () (N3201@syntax-violation '#f '"incorrect use of unsyntax-splicing" N39fa@p)) N3a82@ls/false) (let ((N3a84@t N3a80@t)) (let ((N3a86@ls/false (N311d@syntax-dispatch N3a84@t '(#(scheme-id quasisyntax) any)))) (if N3a86@ls/false (apply (lambda (N3a88@p) (call-with-values (lambda () (N39df@quasi N3a88@p (+ N39fb@lev '1))) (lambda (N3a90@N3a8b N3a91@N3a8d N3a92@N3a8f) (let ((N3a96@p N3a92@N3a8f) (N3a97@rhs* N3a91@N3a8d) (N3a98@lhs* N3a90@N3a8b)) (values N3a98@lhs* N3a97@rhs* (list 'quasisyntax N3a96@p)))))) N3a86@ls/false) (let ((N3a9c@t N3a84@t)) (let ((N3a9e@ls/false (N311d@syntax-dispatch N3a9c@t '(any . any)))) (if N3a9e@ls/false (apply (lambda (N3aa0@p N3aa1@q) (call-with-values (lambda () (N39df@quasi N3aa0@p N39fb@lev)) (lambda (N3ab0@N3aa5 N3ab1@N3aa7 N3ab2@N3aa9) (call-with-values (lambda () (N39df@quasi N3aa1@q N39fb@lev)) (lambda (N3ab6@N3aab N3ab7@N3aad N3ab8@N3aaf) (let ((N3abc@q N3ab8@N3aaf) (N3abd@rhs2* N3ab7@N3aad) (N3abe@lhs2* N3ab6@N3aab) (N3abf@p N3ab2@N3aa9) (N3ac0@rhs* N3ab1@N3aa7) (N3ac1@lhs* N3ab0@N3aa5)) (values (append N3abe@lhs2* N3ac1@lhs*) (append N3abd@rhs2* N3ac0@rhs*) (cons N3abf@p N3abc@q)))))))) N3a9e@ls/false) (let ((N3ac8@t N3a9c@t)) (let ((N3aca@ls/false (N311d@syntax-dispatch N3ac8@t '#(vector each-any)))) (if N3aca@ls/false (apply (lambda (N3acc@x*) (call-with-values (lambda () (N39df@quasi N3acc@x* N39fb@lev)) (lambda (N3ad4@N3acf N3ad5@N3ad1 N3ad6@N3ad3) (let ((N3ada@x* N3ad6@N3ad3) (N3adb@rhs* N3ad5@N3ad1) (N3adc@lhs* N3ad4@N3acf)) (values N3adc@lhs* N3adb@rhs* (list->vector N3ada@x*)))))) N3aca@ls/false) (let ((N3ae0@t N3ac8@t)) (let ((N3ae2@ls/false (N311d@syntax-dispatch N3ae0@t '_))) (if N3ae2@ls/false (apply (lambda () (values '() '() N39fa@p)) N3ae2@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3ae0@t))))))))))))))))))))))))))))))) (lambda (N39e0@x) (let ((N39e2@t N39e0@x)) (let ((N39e4@ls/false (N311d@syntax-dispatch N39e2@t '(_ any)))) (if N39e4@ls/false (apply (lambda (N39e6@e) (call-with-values (lambda () (N39df@quasi N39e6@e '0)) (lambda (N39ee@N39e9 N39ef@N39eb N39f0@N39ed) (let ((N39f4@v N39f0@N39ed) (N39f5@rhs* N39ef@N39eb) (N39f6@lhs* N39ee@N39e9)) (N30d3@bless (list 'syntax-case (cons 'list N39f5@rhs*) '() (list N39f6@lhs* (list 'syntax N39f4@v)))))))) N39e4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N39e2@t))))))) (set! N4c43@N310d@quasisyntax-macro N310d@quasisyntax-macro) (set! N310f@define-struct-macro (lambda (N3ae4@stx) (N3201@syntax-violation '#f '"define-struct not supported" N3ae4@stx))) (set! N4c44@N310f@define-struct-macro N310f@define-struct-macro) (set! N3111@define-record-type-macro (lambda (N3ae6@x) (letrec* ((N3ae9@id (lambda (N3cdc@ctxt . N3cde@str*) (N3205@datum->syntax N3cdc@ctxt (string->symbol (apply string-append (map (lambda (N3ce0@x) (if (symbol? N3ce0@x) (symbol->string N3ce0@x) (if (string? N3ce0@x) N3ce0@x (assertion-violation 'define-record-type '"BUG")))) N3cde@str*)))))) (N3aeb@get-record-name (lambda (N3cca@spec) (let ((N3ccc@t N3cca@spec)) (let ((N3cce@ls/false (N311d@syntax-dispatch N3ccc@t '(any any any)))) (if N3cce@ls/false (apply (lambda (N3cd0@foo N3cd1@make-foo N3cd2@foo?) N3cd0@foo) N3cce@ls/false) (let ((N3cd6@t N3ccc@t)) (let ((N3cd8@ls/false (N311d@syntax-dispatch N3cd6@t 'any))) (if N3cd8@ls/false (apply (lambda (N3cda@foo) N3cda@foo) N3cd8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3cd6@t))))))))) (N3aed@get-record-constructor-name (lambda (N3cb6@spec) (let ((N3cb8@t N3cb6@spec)) (let ((N3cba@ls/false (N311d@syntax-dispatch N3cb8@t '(any any any)))) (if N3cba@ls/false (apply (lambda (N3cbc@foo N3cbd@make-foo N3cbe@foo?) N3cbd@make-foo) N3cba@ls/false) (let ((N3cc2@t N3cb8@t)) (let ((N3cc4@ls/false (N311d@syntax-dispatch N3cc2@t 'any))) (if (and N3cc4@ls/false (apply (lambda (N3cc6@foo) (N2f16@id? N3cc6@foo)) N3cc4@ls/false)) (apply (lambda (N3cc8@foo) (N3ae9@id N3cc8@foo '"make-" (N2f2a@stx->datum N3cc8@foo))) N3cc4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3cc2@t))))))))) (N3aef@get-record-predicate-name (lambda (N3ca2@spec) (let ((N3ca4@t N3ca2@spec)) (let ((N3ca6@ls/false (N311d@syntax-dispatch N3ca4@t '(any any any)))) (if N3ca6@ls/false (apply (lambda (N3ca8@foo N3ca9@make-foo N3caa@foo?) N3caa@foo?) N3ca6@ls/false) (let ((N3cae@t N3ca4@t)) (let ((N3cb0@ls/false (N311d@syntax-dispatch N3cae@t 'any))) (if (and N3cb0@ls/false (apply (lambda (N3cb2@foo) (N2f16@id? N3cb2@foo)) N3cb0@ls/false)) (apply (lambda (N3cb4@foo) (N3ae9@id N3cb4@foo (N2f2a@stx->datum N3cb4@foo) '"?")) N3cb0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3cae@t))))))))) (N3af1@get-clause (lambda (N3c90@id N3c91@ls) (let ((N3c94@t N3c91@ls)) (let ((N3c96@ls/false (N311d@syntax-dispatch N3c94@t '()))) (if N3c96@ls/false (apply (lambda () '#f) N3c96@ls/false) (let ((N3c98@t N3c94@t)) (let ((N3c9a@ls/false (N311d@syntax-dispatch N3c98@t '((any . any) . any)))) (if N3c9a@ls/false (apply (lambda (N3c9c@x N3c9d@rest N3c9e@ls) (if (N2f1c@free-id=? (N30d3@bless N3c90@id) N3c9c@x) (cons N3c9c@x N3c9d@rest) (N3af1@get-clause N3c90@id N3c9e@ls))) N3c9a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c98@t))))))))) (N3af3@foo-rtd-code (lambda (N3c3e@name N3c3f@clause* N3c40@parent-rtd-code) (letrec* ((N3c45@convert-field-spec* (lambda (N3c76@ls) (list->vector (map (lambda (N3c78@x) (let ((N3c7a@t N3c78@x)) (let ((N3c7c@ls/false (N311d@syntax-dispatch N3c7a@t '(#(scheme-id mutable) any . any)))) (if N3c7c@ls/false (apply (lambda (N3c7e@name N3c7f@rest) (list 'mutable N3c7e@name)) N3c7c@ls/false) (let ((N3c82@t N3c7a@t)) (let ((N3c84@ls/false (N311d@syntax-dispatch N3c82@t '(#(scheme-id immutable) any . any)))) (if N3c84@ls/false (apply (lambda (N3c86@name N3c87@rest) (list 'immutable N3c86@name)) N3c84@ls/false) (let ((N3c8a@t N3c82@t)) (let ((N3c8c@ls/false (N311d@syntax-dispatch N3c8a@t 'any))) (if N3c8c@ls/false (apply (lambda (N3c8e@name) (list 'immutable N3c8e@name)) N3c8c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c8a@t))))))))))) N3c76@ls))))) (let ((N3c46@uid-code (let ((N3c4e@t (N3af1@get-clause 'nongenerative N3c3f@clause*))) (let ((N3c50@ls/false (N311d@syntax-dispatch N3c4e@t '(_)))) (if N3c50@ls/false (apply (lambda () (list 'quote (gensym))) N3c50@ls/false) (let ((N3c52@t N3c4e@t)) (let ((N3c54@ls/false (N311d@syntax-dispatch N3c52@t '(_ any)))) (if N3c54@ls/false (apply (lambda (N3c56@uid) (list 'quote N3c56@uid)) N3c54@ls/false) (let ((N3c58@t N3c52@t)) (let ((N3c5a@ls/false (N311d@syntax-dispatch N3c58@t '_))) (if N3c5a@ls/false (apply (lambda () '#f) N3c5a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c58@t))))))))))) (N3c47@sealed? (let ((N3c5c@t (N3af1@get-clause 'sealed N3c3f@clause*))) (let ((N3c5e@ls/false (N311d@syntax-dispatch N3c5c@t '(_ #(atom #t))))) (if N3c5e@ls/false (apply (lambda () '#t) N3c5e@ls/false) (let ((N3c60@t N3c5c@t)) (let ((N3c62@ls/false (N311d@syntax-dispatch N3c60@t '_))) (if N3c62@ls/false (apply (lambda () '#f) N3c62@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c60@t)))))))) (N3c48@opaque? (let ((N3c64@t (N3af1@get-clause 'opaque N3c3f@clause*))) (let ((N3c66@ls/false (N311d@syntax-dispatch N3c64@t '(_ #(atom #t))))) (if N3c66@ls/false (apply (lambda () '#t) N3c66@ls/false) (let ((N3c68@t N3c64@t)) (let ((N3c6a@ls/false (N311d@syntax-dispatch N3c68@t '_))) (if N3c6a@ls/false (apply (lambda () '#f) N3c6a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c68@t)))))))) (N3c49@fields (let ((N3c6c@t (N3af1@get-clause 'fields N3c3f@clause*))) (let ((N3c6e@ls/false (N311d@syntax-dispatch N3c6c@t '(_ . each-any)))) (if N3c6e@ls/false (apply (lambda (N3c70@field-spec*) (list 'quote (N3c45@convert-field-spec* N3c70@field-spec*))) N3c6e@ls/false) (let ((N3c72@t N3c6c@t)) (let ((N3c74@ls/false (N311d@syntax-dispatch N3c72@t '_))) (if N3c74@ls/false (apply (lambda () ''#()) N3c74@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c72@t))))))))) (N30d3@bless (list 'make-record-type-descriptor (list 'quote N3c3e@name) N3c40@parent-rtd-code N3c46@uid-code N3c47@sealed? N3c48@opaque? N3c49@fields)))))) (N3af5@parent-rtd-code (lambda (N3c26@clause*) (let ((N3c28@t (N3af1@get-clause 'parent N3c26@clause*))) (let ((N3c2a@ls/false (N311d@syntax-dispatch N3c28@t '(_ any)))) (if N3c2a@ls/false (apply (lambda (N3c2c@name) (list 'record-type-descriptor N3c2c@name)) N3c2a@ls/false) (let ((N3c2e@t N3c28@t)) (let ((N3c30@ls/false (N311d@syntax-dispatch N3c2e@t '#(atom #f)))) (if N3c30@ls/false (apply (lambda () (let ((N3c32@t (N3af1@get-clause 'parent-rtd N3c26@clause*))) (let ((N3c34@ls/false (N311d@syntax-dispatch N3c32@t '(_ any any)))) (if N3c34@ls/false (apply (lambda (N3c36@rtd N3c37@rcd) N3c36@rtd) N3c34@ls/false) (let ((N3c3a@t N3c32@t)) (let ((N3c3c@ls/false (N311d@syntax-dispatch N3c3a@t '#(atom #f)))) (if N3c3c@ls/false (apply (lambda () '#f) N3c3c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c3a@t)))))))) N3c30@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c2e@t))))))))) (N3af7@parent-rcd-code (lambda (N3c0e@clause*) (let ((N3c10@t (N3af1@get-clause 'parent N3c0e@clause*))) (let ((N3c12@ls/false (N311d@syntax-dispatch N3c10@t '(_ any)))) (if N3c12@ls/false (apply (lambda (N3c14@name) (list 'record-constructor-descriptor N3c14@name)) N3c12@ls/false) (let ((N3c16@t N3c10@t)) (let ((N3c18@ls/false (N311d@syntax-dispatch N3c16@t '#(atom #f)))) (if N3c18@ls/false (apply (lambda () (let ((N3c1a@t (N3af1@get-clause 'parent-rtd N3c0e@clause*))) (let ((N3c1c@ls/false (N311d@syntax-dispatch N3c1a@t '(_ any any)))) (if N3c1c@ls/false (apply (lambda (N3c1e@rtd N3c1f@rcd) N3c1f@rcd) N3c1c@ls/false) (let ((N3c22@t N3c1a@t)) (let ((N3c24@ls/false (N311d@syntax-dispatch N3c22@t '#(atom #f)))) (if N3c24@ls/false (apply (lambda () '#f) N3c24@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c22@t)))))))) N3c18@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c16@t))))))))) (N3af9@foo-rcd-code (lambda (N3c06@clause* N3c07@foo-rtd N3c08@protocol N3c09@parent-rcd-code) (list 'make-record-constructor-descriptor N3c07@foo-rtd N3c09@parent-rcd-code N3c08@protocol))) (N3afb@get-protocol-code (lambda (N3bfa@clause*) (let ((N3bfc@t (N3af1@get-clause 'protocol N3bfa@clause*))) (let ((N3bfe@ls/false (N311d@syntax-dispatch N3bfc@t '(_ any)))) (if N3bfe@ls/false (apply (lambda (N3c00@expr) N3c00@expr) N3bfe@ls/false) (let ((N3c02@t N3bfc@t)) (let ((N3c04@ls/false (N311d@syntax-dispatch N3c02@t '_))) (if N3c04@ls/false (apply (lambda () '#f) N3c04@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3c02@t))))))))) (N3afd@get-fields (lambda (N3be8@clause*) (let ((N3bea@t N3be8@clause*)) (let ((N3bec@ls/false (N311d@syntax-dispatch N3bea@t '()))) (if N3bec@ls/false (apply (lambda () '()) N3bec@ls/false) (let ((N3bee@t N3bea@t)) (let ((N3bf0@ls/false (N311d@syntax-dispatch N3bee@t '((#(scheme-id fields) . each-any) . _)))) (if N3bf0@ls/false (apply (lambda (N3bf2@f*) N3bf2@f*) N3bf0@ls/false) (let ((N3bf4@t N3bee@t)) (let ((N3bf6@ls/false (N311d@syntax-dispatch N3bf4@t '(_ . any)))) (if N3bf6@ls/false (apply (lambda (N3bf8@rest) (N3afd@get-fields N3bf8@rest)) N3bf6@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3bf4@t)))))))))))) (N3aff@get-mutator-indices (lambda (N3bd0@fields) (let N3bd6@f ((N3bd2@fields N3bd0@fields) (N3bd3@i '0)) (let ((N3bd8@t N3bd2@fields)) (let ((N3bda@ls/false (N311d@syntax-dispatch N3bd8@t '()))) (if N3bda@ls/false (apply (lambda () '()) N3bda@ls/false) (let ((N3bdc@t N3bd8@t)) (let ((N3bde@ls/false (N311d@syntax-dispatch N3bdc@t '((#(scheme-id mutable) . _) . any)))) (if N3bde@ls/false (apply (lambda (N3be0@rest) (cons N3bd3@i (N3bd6@f N3be0@rest (+ N3bd3@i '1)))) N3bde@ls/false) (let ((N3be2@t N3bdc@t)) (let ((N3be4@ls/false (N311d@syntax-dispatch N3be2@t '(_ . any)))) (if N3be4@ls/false (apply (lambda (N3be6@rest) (N3bd6@f N3be6@rest (+ N3bd3@i '1))) N3be4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3be2@t))))))))))))) (N3b01@get-mutators (lambda (N3ba6@foo N3ba7@fields) (letrec* ((N3bab@gen-name (lambda (N3bce@x) (N3205@datum->syntax N3ba6@foo (string->symbol (string-append (symbol->string (N3207@syntax->datum N3ba6@foo)) '"-" (symbol->string (N3207@syntax->datum N3bce@x)) '"-set!")))))) (let N3bae@f ((N3bac@fields N3ba7@fields)) (let ((N3bb0@t N3bac@fields)) (let ((N3bb2@ls/false (N311d@syntax-dispatch N3bb0@t '()))) (if N3bb2@ls/false (apply (lambda () '()) N3bb2@ls/false) (let ((N3bb4@t N3bb0@t)) (let ((N3bb6@ls/false (N311d@syntax-dispatch N3bb4@t '((#(scheme-id mutable) any any any) . any)))) (if N3bb6@ls/false (apply (lambda (N3bb8@name N3bb9@accessor N3bba@mutator N3bbb@rest) (cons N3bba@mutator (N3bae@f N3bbb@rest))) N3bb6@ls/false) (let ((N3bc0@t N3bb4@t)) (let ((N3bc2@ls/false (N311d@syntax-dispatch N3bc0@t '((#(scheme-id mutable) any) . any)))) (if N3bc2@ls/false (apply (lambda (N3bc4@name N3bc5@rest) (cons (N3bab@gen-name N3bc4@name) (N3bae@f N3bc5@rest))) N3bc2@ls/false) (let ((N3bc8@t N3bc0@t)) (let ((N3bca@ls/false (N311d@syntax-dispatch N3bc8@t '(_ . any)))) (if N3bca@ls/false (apply (lambda (N3bcc@rest) (N3bae@f N3bcc@rest)) N3bca@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3bc8@t))))))))))))))))) (N3b03@get-accessors (lambda (N3b62@foo N3b63@fields) (letrec* ((N3b67@gen-name (lambda (N3ba4@x) (N3205@datum->syntax N3b62@foo (string->symbol (string-append (symbol->string (N3207@syntax->datum N3b62@foo)) '"-" (symbol->string (N3207@syntax->datum N3ba4@x)))))))) (map (lambda (N3b68@field) (let ((N3b6a@t N3b68@field)) (let ((N3b6c@ls/false (N311d@syntax-dispatch N3b6a@t '(#(scheme-id mutable) any any any)))) (if (and N3b6c@ls/false (apply (lambda (N3b6e@name N3b6f@accessor N3b70@mutator) (N2f16@id? N3b6f@accessor)) N3b6c@ls/false)) (apply (lambda (N3b74@name N3b75@accessor N3b76@mutator) N3b75@accessor) N3b6c@ls/false) (let ((N3b7a@t N3b6a@t)) (let ((N3b7c@ls/false (N311d@syntax-dispatch N3b7a@t '(#(scheme-id immutable) any any)))) (if (and N3b7c@ls/false (apply (lambda (N3b7e@name N3b7f@accessor) (N2f16@id? N3b7f@accessor)) N3b7c@ls/false)) (apply (lambda (N3b82@name N3b83@accessor) N3b83@accessor) N3b7c@ls/false) (let ((N3b86@t N3b7a@t)) (let ((N3b88@ls/false (N311d@syntax-dispatch N3b86@t '(#(scheme-id mutable) any)))) (if (and N3b88@ls/false (apply (lambda (N3b8a@name) (N2f16@id? N3b8a@name)) N3b88@ls/false)) (apply (lambda (N3b8c@name) (N3b67@gen-name N3b8c@name)) N3b88@ls/false) (let ((N3b8e@t N3b86@t)) (let ((N3b90@ls/false (N311d@syntax-dispatch N3b8e@t '(#(scheme-id immutable) any)))) (if (and N3b90@ls/false (apply (lambda (N3b92@name) (N2f16@id? N3b92@name)) N3b90@ls/false)) (apply (lambda (N3b94@name) (N3b67@gen-name N3b94@name)) N3b90@ls/false) (let ((N3b96@t N3b8e@t)) (let ((N3b98@ls/false (N311d@syntax-dispatch N3b96@t 'any))) (if (and N3b98@ls/false (apply (lambda (N3b9a@name) (N2f16@id? N3b9a@name)) N3b98@ls/false)) (apply (lambda (N3b9c@name) (N3b67@gen-name N3b9c@name)) N3b98@ls/false) (let ((N3b9e@t N3b96@t)) (let ((N3ba0@ls/false (N311d@syntax-dispatch N3b9e@t 'any))) (if N3ba0@ls/false (apply (lambda (N3ba2@others) (N3201@syntax-violation '#f '"invalid field spec" N3b68@field)) N3ba0@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3b9e@t)))))))))))))))))))) N3b63@fields)))) (N3b05@enumerate (lambda (N3b5a@ls) (let N3b60@f ((N3b5c@ls N3b5a@ls) (N3b5d@i '0)) (if (null? N3b5c@ls) '() (cons N3b5d@i (N3b60@f (cdr N3b5c@ls) (+ N3b5d@i '1))))))) (N3b07@do-define-record (lambda (N3b32@namespec N3b33@clause*) (let ((N3b36@foo (N3aeb@get-record-name N3b32@namespec))) (let ((N3b38@foo-rtd (gensym))) (let ((N3b3a@foo-rcd (gensym))) (let ((N3b3c@protocol (gensym))) (let ((N3b3e@make-foo (N3aed@get-record-constructor-name N3b32@namespec))) (let ((N3b40@fields (N3afd@get-fields N3b33@clause*))) (let ((N3b42@idx* (N3b05@enumerate N3b40@fields))) (let ((N3b44@foo-x* (N3b03@get-accessors N3b36@foo N3b40@fields))) (let ((N3b46@set-foo-x!* (N3b01@get-mutators N3b36@foo N3b40@fields))) (let ((N3b48@set-foo-idx* (N3aff@get-mutator-indices N3b40@fields))) (let ((N3b4a@foo? (N3aef@get-record-predicate-name N3b32@namespec))) (let ((N3b4c@foo-rtd-code (N3af3@foo-rtd-code N3b36@foo N3b33@clause* (N3af5@parent-rtd-code N3b33@clause*)))) (let ((N3b4e@foo-rcd-code (N3af9@foo-rcd-code N3b33@clause* N3b38@foo-rtd N3b3c@protocol (N3af7@parent-rcd-code N3b33@clause*)))) (let ((N3b50@protocol-code (N3afb@get-protocol-code N3b33@clause*))) (N30d3@bless (cons 'begin (cons (list 'define N3b38@foo-rtd N3b4c@foo-rtd-code) (cons (list 'define N3b3c@protocol N3b50@protocol-code) (cons (list 'define N3b3a@foo-rcd N3b4e@foo-rcd-code) (cons (list 'define-syntax N3b36@foo (list 'list ''$rtd (list 'syntax N3b38@foo-rtd) (list 'syntax N3b3a@foo-rcd))) (cons (list 'define N3b4a@foo? (list 'record-predicate N3b38@foo-rtd)) (cons (list 'define N3b3e@make-foo (list 'record-constructor N3b3a@foo-rcd)) (append (map (lambda (N3b52@foo-x N3b53@idx) (list 'define N3b52@foo-x (list 'record-accessor N3b38@foo-rtd N3b53@idx))) N3b44@foo-x* N3b42@idx*) (map (lambda (N3b56@set-foo-x! N3b57@idx) (list 'define N3b56@set-foo-x! (list 'record-mutator N3b38@foo-rtd N3b57@idx))) N3b46@set-foo-x!* N3b48@set-foo-idx*)))))))))))))))))))))))))) (N3b09@verify-clauses (lambda (N3b12@x N3b13@cls*) (letrec* ((N3b17@valid-kwds (map N30d3@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (N3b19@free-id-member? (lambda (N3b2e@x N3b2f@ls) (and (pair? N3b2f@ls) (or (N2f1c@free-id=? N3b2e@x (car N3b2f@ls)) (N3b19@free-id-member? N3b2e@x (cdr N3b2f@ls))))))) (let N3b1e@f ((N3b1a@cls* N3b13@cls*) (N3b1b@seen* '())) (if (not (null? N3b1a@cls*)) (let ((N3b20@t (car N3b1a@cls*))) (let ((N3b22@ls/false (N311d@syntax-dispatch N3b20@t '(any . any)))) (if N3b22@ls/false (apply (lambda (N3b24@kwd N3b25@rest) (if (or (not (N2f16@id? N3b24@kwd)) (not (N3b19@free-id-member? N3b24@kwd N3b17@valid-kwds))) (N3201@syntax-violation '#f '"not a valid define-record-type keyword" N3b24@kwd) (if (N2f22@bound-id-member? N3b24@kwd N3b1b@seen*) (N3201@syntax-violation '#f '"duplicate use of keyword " N3b12@x N3b24@kwd) (N3b1e@f (cdr N3b1a@cls*) (cons N3b24@kwd N3b1b@seen*))))) N3b22@ls/false) (let ((N3b28@t N3b20@t)) (let ((N3b2a@ls/false (N311d@syntax-dispatch N3b28@t 'any))) (if N3b2a@ls/false (apply (lambda (N3b2c@cls) (N3201@syntax-violation '#f '"malformed define-record-type clause" N3b2c@cls)) N3b2a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3b28@t))))))) (void))))))) (let ((N3b0a@t N3ae6@x)) (let ((N3b0c@ls/false (N311d@syntax-dispatch N3b0a@t '(_ any . each-any)))) (if N3b0c@ls/false (apply (lambda (N3b0e@namespec N3b0f@clause*) (begin (N3b09@verify-clauses N3ae6@x N3b0f@clause*) (N3b07@do-define-record N3b0e@namespec N3b0f@clause*))) N3b0c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3b0a@t))))))) (set! N4c45@N3111@define-record-type-macro N3111@define-record-type-macro) (set! N3113@define-condition-type-macro (lambda (N3ce2@x) (letrec* ((N3ce5@mkname (lambda (N3d12@name N3d13@suffix) (N3205@datum->syntax N3d12@name (string->symbol (string-append (symbol->string (N3207@syntax->datum N3d12@name)) N3d13@suffix)))))) (let ((N3ce6@t N3ce2@x)) (let ((N3ce8@ls/false (N311d@syntax-dispatch N3ce6@t '(any any any any any . #(each (any any)))))) (if (and N3ce8@ls/false (apply (lambda (N3cea@ctxt N3ceb@name N3cec@super N3ced@constructor N3cee@predicate N3cef@field* N3cf0@accessor*) (and (N2f16@id? N3ceb@name) (N2f16@id? N3cec@super) (N2f16@id? N3ced@constructor) (N2f16@id? N3cee@predicate) (for-all N2f16@id? N3cef@field*) (for-all N2f16@id? N3cf0@accessor*))) N3ce8@ls/false)) (apply (lambda (N3cf8@ctxt N3cf9@name N3cfa@super N3cfb@constructor N3cfc@predicate N3cfd@field* N3cfe@accessor*) (let ((N3d06@aux-accessor* (map (lambda (N3d08@x) (gensym)) N3cfe@accessor*))) (N30d3@bless (cons 'begin (cons (cons 'define-record-type (cons (list N3cf9@name N3cfb@constructor (gensym)) (cons (list 'parent N3cfa@super) (cons (cons 'fields (map (lambda (N3d0a@field N3d0b@aux) (list 'immutable N3d0a@field N3d0b@aux)) N3cfd@field* N3d06@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define N3cfc@predicate (list 'condition-predicate (list 'record-type-descriptor N3cf9@name))) (map (lambda (N3d0e@accessor N3d0f@aux) (list 'define N3d0e@accessor (list 'condition-accessor (list 'record-type-descriptor N3cf9@name) N3d0f@aux))) N3cfe@accessor* N3d06@aux-accessor*))))))) N3ce8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3ce6@t))))))) (set! N4c46@N3113@define-condition-type-macro N3113@define-condition-type-macro) (set! N3115@incorrect-usage-macro (lambda (N3d16@e) (N3201@syntax-violation '#f '"incorrect usage of auxiliary keyword" N3d16@e))) (set! N4c47@N3115@incorrect-usage-macro N3115@incorrect-usage-macro) (set! N3117@parameterize-macro (lambda (N3d18@e) (let ((N3d1a@t N3d18@e)) (let ((N3d1c@ls/false (N311d@syntax-dispatch N3d1a@t '(_ () any . each-any)))) (if N3d1c@ls/false (apply (lambda (N3d1e@b N3d1f@b*) (N30d3@bless (cons 'let (cons '() (cons N3d1e@b N3d1f@b*))))) N3d1c@ls/false) (let ((N3d22@t N3d1a@t)) (let ((N3d24@ls/false (N311d@syntax-dispatch N3d22@t '(_ #(each (any any)) any . each-any)))) (if N3d24@ls/false (apply (lambda (N3d26@olhs* N3d27@orhs* N3d28@b N3d29@b*) (let ((N3d2e@lhs* (N31ef@generate-temporaries N3d26@olhs*)) (N3d2f@rhs* (N31ef@generate-temporaries N3d27@orhs*))) (N30d3@bless (cons (list 'lambda (append N3d2e@lhs* N3d2f@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (N3d32@lhs N3d33@rhs) (list 'let (list (list 't (list N3d32@lhs))) (list N3d32@lhs N3d33@rhs) (cons 'set! (cons N3d33@rhs '(t))))) N3d2e@lhs* N3d2f@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons N3d28@b N3d29@b*))) '(swap)))))) (append N3d26@olhs* N3d27@orhs*))))) N3d24@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3d22@t))))))))) (set! N4c48@N3117@parameterize-macro N3117@parameterize-macro) (set! N3119@foreign-call-transformer (lambda (N3d36@e N3d37@r N3d38@mr) (let ((N3d3c@t N3d36@e)) (let ((N3d3e@ls/false (N311d@syntax-dispatch N3d3c@t '(_ any . each-any)))) (if N3d3e@ls/false (apply (lambda (N3d40@name N3d41@arg*) (cons 'foreign-call (cons (N313f@chi-expr N3d40@name N3d37@r N3d38@mr) (N313b@chi-expr* N3d41@arg* N3d37@r N3d38@mr)))) N3d3e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3d3c@t)))))) (set! N4c49@N3119@foreign-call-transformer N3119@foreign-call-transformer) (set! N311b@convert-pattern (lambda (N3d44@pattern N3d45@keys) (letrec* ((N3d49@cvt* (lambda (N3de8@p* N3de9@n N3dea@ids) (if (null? N3de8@p*) (values '() N3dea@ids) (call-with-values (lambda () (N3d49@cvt* (cdr N3de8@p*) N3de9@n N3dea@ids)) (lambda (N3df2@N3def N3df3@N3df1) (let ((N3df6@ids N3df3@N3df1) (N3df7@y N3df2@N3def)) (call-with-values (lambda () (N3d4b@cvt (car N3de8@p*) N3de9@n N3df6@ids)) (lambda (N3dfe@N3dfb N3dff@N3dfd) (let ((N3e02@ids N3dff@N3dfd) (N3e03@x N3dfe@N3dfb)) (values (cons N3e03@x N3df7@y) N3e02@ids)))))))))) (N3d4b@cvt (lambda (N3d4c@p N3d4d@n N3d4e@ids) (let ((N3d52@t N3d4c@p)) (let ((N3d54@ls/false (N311d@syntax-dispatch N3d52@t 'any))) (if (and N3d54@ls/false (apply (lambda (N3d56@id) (N2f16@id? N3d56@id)) N3d54@ls/false)) (apply (lambda (N3d58@id) (if (N2f22@bound-id-member? N3d4c@p N3d45@keys) (values (vector 'free-id N3d4c@p) N3d4e@ids) (if (N2f1c@free-id=? N3d4c@p (N30a5@scheme-stx '_)) (values '_ N3d4e@ids) (values 'any (cons (cons N3d4c@p N3d4d@n) N3d4e@ids))))) N3d54@ls/false) (let ((N3d5a@t N3d52@t)) (let ((N3d5c@ls/false (N311d@syntax-dispatch N3d5a@t '(any any)))) (if (and N3d5c@ls/false (apply (lambda (N3d5e@p N3d5f@dots) (N311f@ellipsis? N3d5f@dots)) N3d5c@ls/false)) (apply (lambda (N3d62@p N3d63@dots) (call-with-values (lambda () (N3d4b@cvt N3d62@p (+ N3d4d@n '1) N3d4e@ids)) (lambda (N3d6a@N3d67 N3d6b@N3d69) (let ((N3d6e@ids N3d6b@N3d69) (N3d6f@p N3d6a@N3d67)) (values (if (eq? N3d6f@p 'any) 'each-any (vector 'each N3d6f@p)) N3d6e@ids))))) N3d5c@ls/false) (let ((N3d72@t N3d5a@t)) (let ((N3d74@ls/false (N311d@syntax-dispatch N3d72@t '(any any . #(each+ any () any))))) (if (and N3d74@ls/false (apply (lambda (N3d76@x N3d77@dots N3d78@ys N3d79@z) (N311f@ellipsis? N3d77@dots)) N3d74@ls/false)) (apply (lambda (N3d7e@x N3d7f@dots N3d80@ys N3d81@z) (call-with-values (lambda () (N3d4b@cvt N3d81@z N3d4d@n N3d4e@ids)) (lambda (N3d8a@N3d87 N3d8b@N3d89) (let ((N3d8e@ids N3d8b@N3d89) (N3d8f@z N3d8a@N3d87)) (call-with-values (lambda () (N3d49@cvt* N3d80@ys N3d4d@n N3d8e@ids)) (lambda (N3d96@N3d93 N3d97@N3d95) (let ((N3d9a@ids N3d97@N3d95) (N3d9b@ys N3d96@N3d93)) (call-with-values (lambda () (N3d4b@cvt N3d7e@x (+ N3d4d@n '1) N3d9a@ids)) (lambda (N3da2@N3d9f N3da3@N3da1) (let ((N3da6@ids N3da3@N3da1) (N3da7@x N3da2@N3d9f)) (values (vector 'each+ N3da7@x (reverse N3d9b@ys) N3d8f@z) N3da6@ids))))))))))) N3d74@ls/false) (let ((N3daa@t N3d72@t)) (let ((N3dac@ls/false (N311d@syntax-dispatch N3daa@t '(any . any)))) (if N3dac@ls/false (apply (lambda (N3dae@x N3daf@y) (call-with-values (lambda () (N3d4b@cvt N3daf@y N3d4d@n N3d4e@ids)) (lambda (N3db6@N3db3 N3db7@N3db5) (let ((N3dba@ids N3db7@N3db5) (N3dbb@y N3db6@N3db3)) (call-with-values (lambda () (N3d4b@cvt N3dae@x N3d4d@n N3dba@ids)) (lambda (N3dc2@N3dbf N3dc3@N3dc1) (let ((N3dc6@ids N3dc3@N3dc1) (N3dc7@x N3dc2@N3dbf)) (values (cons N3dc7@x N3dbb@y) N3dc6@ids)))))))) N3dac@ls/false) (let ((N3dca@t N3daa@t)) (let ((N3dcc@ls/false (N311d@syntax-dispatch N3dca@t '()))) (if N3dcc@ls/false (apply (lambda () (values '() N3d4e@ids)) N3dcc@ls/false) (let ((N3dce@t N3dca@t)) (let ((N3dd0@ls/false (N311d@syntax-dispatch N3dce@t '#(vector each-any)))) (if (and N3dd0@ls/false (apply (lambda (N3dd2@p) (not (N2ee2@stx? N3dd2@p))) N3dd0@ls/false)) (apply (lambda (N3dd4@p) (call-with-values (lambda () (N3d4b@cvt N3dd4@p N3d4d@n N3d4e@ids)) (lambda (N3dda@N3dd7 N3ddb@N3dd9) (let ((N3dde@ids N3ddb@N3dd9) (N3ddf@p N3dda@N3dd7)) (values (vector 'vector N3ddf@p) N3dde@ids))))) N3dd0@ls/false) (let ((N3de2@t N3dce@t)) (let ((N3de4@ls/false (N311d@syntax-dispatch N3de2@t 'any))) (if N3de4@ls/false (apply (lambda (N3de6@datum) (values (vector 'atom (N2f2a@stx->datum N3de6@datum)) N3d4e@ids)) N3de4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3de2@t))))))))))))))))))))))))) (N3d4b@cvt N3d44@pattern '0 '())))) (set! N4c4a@N311b@convert-pattern N311b@convert-pattern) (set! N311d@syntax-dispatch (letrec* ((N3e07@stx^ (lambda (N3ee2@e N3ee3@m* N3ee4@s* N3ee5@ae*) (if (and (null? N3ee3@m*) (null? N3ee4@s*) (null? N3ee5@ae*)) N3ee2@e (N2efe@mkstx N3ee2@e N3ee3@m* N3ee4@s* N3ee5@ae*)))) (N3e09@match-each (lambda (N3ec2@e N3ec3@p N3ec4@m* N3ec5@s* N3ec6@ae*) (if (pair? N3ec2@e) (let ((N3ecc@first (N3e15@match (car N3ec2@e) N3ec3@p N3ec4@m* N3ec5@s* N3ec6@ae* '()))) (and N3ecc@first (let ((N3ece@rest (N3e09@match-each (cdr N3ec2@e) N3ec3@p N3ec4@m* N3ec5@s* N3ec6@ae*))) (and N3ece@rest (cons N3ecc@first N3ece@rest))))) (if (null? N3ec2@e) '() (if (N2ee2@stx? N3ec2@e) (and (not (N2e9c@top-marked? N3ec4@m*)) (call-with-values (lambda () (join-wraps N3ec4@m* N3ec5@s* N3ec6@ae* N3ec2@e)) (lambda (N3ed6@N3ed1 N3ed7@N3ed3 N3ed8@N3ed5) (let ((N3edc@ae* N3ed8@N3ed5) (N3edd@s* N3ed7@N3ed3) (N3ede@m* N3ed6@N3ed1)) (N3e09@match-each (N2ee4@stx-expr N3ec2@e) N3ec3@p N3ede@m* N3edd@s* N3edc@ae*))))) (if (N2a5a@N292c@annotation? N3ec2@e) (N3e09@match-each (N2a5c@N2930@annotation-expression N3ec2@e) N3ec3@p N3ec4@m* N3ec5@s* N3ec6@ae*) '#f)))))) (N3e0b@match-each+ (lambda (N3e82@e N3e83@x-pat N3e84@y-pat N3e85@z-pat N3e86@m* N3e87@s* N3e88@ae* N3e89@r) (let N3e9a@f ((N3e92@e N3e82@e) (N3e93@m* N3e86@m*) (N3e94@s* N3e87@s*) (N3e95@ae* N3e88@ae*)) (if (pair? N3e92@e) (call-with-values (lambda () (N3e9a@f (cdr N3e92@e) N3e93@m* N3e94@s* N3e95@ae*)) (lambda (N3ea2@N3e9d N3ea3@N3e9f N3ea4@N3ea1) (let ((N3ea8@r N3ea4@N3ea1) (N3ea9@y-pat N3ea3@N3e9f) (N3eaa@xr* N3ea2@N3e9d)) (if N3ea8@r (if (null? N3ea9@y-pat) (let ((N3eae@xr (N3e15@match (car N3e92@e) N3e83@x-pat N3e93@m* N3e94@s* N3e95@ae* '()))) (if N3eae@xr (values (cons N3eae@xr N3eaa@xr*) N3ea9@y-pat N3ea8@r) (values '#f '#f '#f))) (values '() (cdr N3ea9@y-pat) (N3e15@match (car N3e92@e) (car N3ea9@y-pat) N3e93@m* N3e94@s* N3e95@ae* N3ea8@r))) (values '#f '#f '#f))))) (if (N2ee2@stx? N3e92@e) (if (N2e9c@top-marked? N3e93@m*) (values '() N3e84@y-pat (N3e15@match N3e92@e N3e85@z-pat N3e93@m* N3e94@s* N3e95@ae* N3e89@r)) (call-with-values (lambda () (join-wraps N3e93@m* N3e94@s* N3e95@ae* N3e92@e)) (lambda (N3eb6@N3eb1 N3eb7@N3eb3 N3eb8@N3eb5) (let ((N3ebc@ae* N3eb8@N3eb5) (N3ebd@s* N3eb7@N3eb3) (N3ebe@m* N3eb6@N3eb1)) (N3e9a@f (N2ee4@stx-expr N3e92@e) N3ebe@m* N3ebd@s* N3ebc@ae*))))) (if (N2a5a@N292c@annotation? N3e92@e) (N3e9a@f (N2a5c@N2930@annotation-expression N3e92@e) N3e93@m* N3e94@s* N3e95@ae*) (values '() N3e84@y-pat (N3e15@match N3e92@e N3e85@z-pat N3e93@m* N3e94@s* N3e95@ae* N3e89@r)))))))) (N3e0d@match-each-any (lambda (N3e66@e N3e67@m* N3e68@s* N3e69@ae*) (if (pair? N3e66@e) (let ((N3e6e@l (N3e0d@match-each-any (cdr N3e66@e) N3e67@m* N3e68@s* N3e69@ae*))) (and N3e6e@l (cons (N3e07@stx^ (car N3e66@e) N3e67@m* N3e68@s* N3e69@ae*) N3e6e@l))) (if (null? N3e66@e) '() (if (N2ee2@stx? N3e66@e) (and (not (N2e9c@top-marked? N3e67@m*)) (call-with-values (lambda () (join-wraps N3e67@m* N3e68@s* N3e69@ae* N3e66@e)) (lambda (N3e76@N3e71 N3e77@N3e73 N3e78@N3e75) (let ((N3e7c@ae* N3e78@N3e75) (N3e7d@s* N3e77@N3e73) (N3e7e@m* N3e76@N3e71)) (N3e0d@match-each-any (N2ee4@stx-expr N3e66@e) N3e7e@m* N3e7d@s* N3e7c@ae*))))) (if (N2a5a@N292c@annotation? N3e66@e) (N3e0d@match-each-any (N2a5c@N2930@annotation-expression N3e66@e) N3e67@m* N3e68@s* N3e69@ae*) '#f)))))) (N3e0f@match-empty (lambda (N3e60@p N3e61@r) (if (null? N3e60@p) N3e61@r (if (eq? N3e60@p '_) N3e61@r (if (eq? N3e60@p 'any) (cons '() N3e61@r) (if (pair? N3e60@p) (N3e0f@match-empty (car N3e60@p) (N3e0f@match-empty (cdr N3e60@p) N3e61@r)) (if (eq? N3e60@p 'each-any) (cons '() N3e61@r) (let ((N3e64@t (vector-ref N3e60@p '0))) (if (memv N3e64@t '(each)) (N3e0f@match-empty (vector-ref N3e60@p '1) N3e61@r) (if (memv N3e64@t '(each+)) (N3e0f@match-empty (vector-ref N3e60@p '1) (N3e0f@match-empty (reverse (vector-ref N3e60@p '2)) (N3e0f@match-empty (vector-ref N3e60@p '3) N3e61@r))) (if (memv N3e64@t '(free-id atom)) N3e61@r (if (memv N3e64@t '(scheme-id atom)) N3e61@r (if (memv N3e64@t '(vector)) (N3e0f@match-empty (vector-ref N3e60@p '1) N3e61@r) (assertion-violation 'syntax-dispatch '"invalid pattern" N3e60@p)))))))))))))) (N3e11@combine (lambda (N3e5c@r* N3e5d@r) (if (null? (car N3e5c@r*)) N3e5d@r (cons (map car N3e5c@r*) (N3e11@combine (map cdr N3e5c@r*) N3e5d@r))))) (N3e13@match* (lambda (N3e38@e N3e39@p N3e3a@m* N3e3b@s* N3e3c@ae* N3e3d@r) (if (null? N3e39@p) (and (null? N3e38@e) N3e3d@r) (if (pair? N3e39@p) (and (pair? N3e38@e) (N3e15@match (car N3e38@e) (car N3e39@p) N3e3a@m* N3e3b@s* N3e3c@ae* (N3e15@match (cdr N3e38@e) (cdr N3e39@p) N3e3a@m* N3e3b@s* N3e3c@ae* N3e3d@r))) (if (eq? N3e39@p 'each-any) (let ((N3e44@l (N3e0d@match-each-any N3e38@e N3e3a@m* N3e3b@s* N3e3c@ae*))) (and N3e44@l (cons N3e44@l N3e3d@r))) (let ((N3e46@t (vector-ref N3e39@p '0))) (if (memv N3e46@t '(each)) (if (null? N3e38@e) (N3e0f@match-empty (vector-ref N3e39@p '1) N3e3d@r) (let ((N3e48@r* (N3e09@match-each N3e38@e (vector-ref N3e39@p '1) N3e3a@m* N3e3b@s* N3e3c@ae*))) (and N3e48@r* (N3e11@combine N3e48@r* N3e3d@r)))) (if (memv N3e46@t '(free-id)) (and (symbol? N3e38@e) (N2e9c@top-marked? N3e3a@m*) (N2f1c@free-id=? (N3e07@stx^ N3e38@e N3e3a@m* N3e3b@s* N3e3c@ae*) (vector-ref N3e39@p '1)) N3e3d@r) (if (memv N3e46@t '(scheme-id)) (and (symbol? N3e38@e) (N2e9c@top-marked? N3e3a@m*) (N2f1c@free-id=? (N3e07@stx^ N3e38@e N3e3a@m* N3e3b@s* N3e3c@ae*) (N30a5@scheme-stx (vector-ref N3e39@p '1))) N3e3d@r) (if (memv N3e46@t '(each+)) (call-with-values (lambda () (N3e0b@match-each+ N3e38@e (vector-ref N3e39@p '1) (vector-ref N3e39@p '2) (vector-ref N3e39@p '3) N3e3a@m* N3e3b@s* N3e3c@ae* N3e3d@r)) (lambda (N3e50@N3e4b N3e51@N3e4d N3e52@N3e4f) (let ((N3e56@r N3e52@N3e4f) (N3e57@y-pat N3e51@N3e4d) (N3e58@xr* N3e50@N3e4b)) (and N3e56@r (null? N3e57@y-pat) (if (null? N3e58@xr*) (N3e0f@match-empty (vector-ref N3e39@p '1) N3e56@r) (N3e11@combine N3e58@xr* N3e56@r)))))) (if (memv N3e46@t '(atom)) (and (fast-equal? (vector-ref N3e39@p '1) (N2f28@strip N3e38@e N3e3a@m*)) N3e3d@r) (if (memv N3e46@t '(vector)) (and (vector? N3e38@e) (N3e15@match (vector->list N3e38@e) (vector-ref N3e39@p '1) N3e3a@m* N3e3b@s* N3e3c@ae* N3e3d@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" N3e39@p))))))))))))) (N3e15@match (lambda (N3e1a@e N3e1b@p N3e1c@m* N3e1d@s* N3e1e@ae* N3e1f@r) (if (not N3e1f@r) '#f (if (eq? N3e1b@p '_) N3e1f@r (if (eq? N3e1b@p 'any) (cons (N3e07@stx^ N3e1a@e N3e1c@m* N3e1d@s* N3e1e@ae*) N3e1f@r) (if (N2ee2@stx? N3e1a@e) (and (not (N2e9c@top-marked? N3e1c@m*)) (call-with-values (lambda () (join-wraps N3e1c@m* N3e1d@s* N3e1e@ae* N3e1a@e)) (lambda (N3e2c@N3e27 N3e2d@N3e29 N3e2e@N3e2b) (let ((N3e32@ae* N3e2e@N3e2b) (N3e33@s* N3e2d@N3e29) (N3e34@m* N3e2c@N3e27)) (N3e15@match (N2ee4@stx-expr N3e1a@e) N3e1b@p N3e34@m* N3e33@s* N3e32@ae* N3e1f@r))))) (if (N2a5a@N292c@annotation? N3e1a@e) (N3e15@match (N2a5c@N2930@annotation-expression N3e1a@e) N3e1b@p N3e1c@m* N3e1d@s* N3e1e@ae* N3e1f@r) (N3e13@match* N3e1a@e N3e1b@p N3e1c@m* N3e1d@s* N3e1e@ae* N3e1f@r))))))))) (lambda (N3e16@e N3e17@p) (N3e15@match N3e16@e N3e17@p '() '() '() '())))) (set! N4c4b@N311d@syntax-dispatch N311d@syntax-dispatch) (set! N311f@ellipsis? (lambda (N3eea@x) (and (N2f16@id? N3eea@x) (N2f1c@free-id=? N3eea@x (N30a5@scheme-stx '...))))) (set! N4c4c@N311f@ellipsis? N311f@ellipsis?) (set! N3121@underscore? (lambda (N3eec@x) (and (N2f16@id? N3eec@x) (N2f1c@free-id=? N3eec@x (N30a5@scheme-stx '_))))) (set! N4c4d@N3121@underscore? N3121@underscore?) (set! N3123@verify-literals (lambda (N3eee@lits N3eef@expr) (for-each (lambda (N3ef2@x) (if (or (not (N2f16@id? N3ef2@x)) (N311f@ellipsis? N3ef2@x) (N3121@underscore? N3ef2@x)) (N3201@syntax-violation '#f '"invalid literal" N3eef@expr N3ef2@x) (void))) N3eee@lits))) (set! N4c4e@N3123@verify-literals N3123@verify-literals) (set! N3125@syntax-case-transformer (letrec* ((N3ef5@build-dispatch-call (lambda (N3f66@pvars N3f67@expr N3f68@y N3f69@r N3f6a@mr) (let ((N3f70@ids (map car N3f66@pvars)) (N3f71@levels (map cdr N3f66@pvars))) (let ((N3f74@labels (map N2ea2@gen-label N3f70@ids)) (N3f75@new-vars (map N2e9e@gen-lexical N3f70@ids))) (let ((N3f78@body (N313f@chi-expr (N2f02@add-subst (N2ed6@make-full-rib N3f70@ids N3f74@labels) N3f67@expr) (append (map (lambda (N3f7a@label N3f7b@var N3f7c@level) (cons N3f7a@label (N2f30@make-binding 'syntax (cons N3f7b@var N3f7c@level)))) N3f74@labels N3f75@new-vars (map cdr N3f66@pvars)) N3f69@r) N3f6a@mr))) (list '(primitive apply) (N2e79@N2dab@build-lambda '#f N3f75@new-vars N3f78@body) N3f68@y)))))) (N3ef7@invalid-ids-error (lambda (N3f5a@id* N3f5b@e N3f5c@class) (let N3f64@find ((N3f60@id* N3f5a@id*) (N3f61@ok* '())) (if (null? N3f60@id*) (N3201@syntax-violation '#f '"invalid syntax" N3f5b@e) (if (N2f16@id? (car N3f60@id*)) (if (N2f22@bound-id-member? (car N3f60@id*) N3f61@ok*) (N31fd@syntax-error (car N3f60@id*) '"duplicate " N3f5c@class) (N3f64@find (cdr N3f60@id*) (cons (car N3f60@id*) N3f61@ok*))) (N31fd@syntax-error (car N3f60@id*) '"invalid " N3f5c@class)))))) (N3ef9@gen-clause (lambda (N3f32@x N3f33@keys N3f34@clauses N3f35@r N3f36@mr N3f37@pat N3f38@fender N3f39@expr) (call-with-values (lambda () (N311b@convert-pattern N3f37@pat N3f33@keys)) (lambda (N3f46@N3f43 N3f47@N3f45) (let ((N3f4a@pvars N3f47@N3f45) (N3f4b@p N3f46@N3f43)) (if (not (N2f20@distinct-bound-ids? (map car N3f4a@pvars))) (N3ef7@invalid-ids-error (map car N3f4a@pvars) N3f37@pat '"pattern variable") (if (not (for-all (lambda (N3f4e@x) (not (N311f@ellipsis? (car N3f4e@x)))) N3f4a@pvars)) (N3201@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" N3f37@pat) (let ((N3f50@y (N2e9e@gen-lexical 'tmp))) (let ((N3f52@test (if (eq? N3f38@fender '#t) N3f50@y (let ((N3f54@call (N3ef5@build-dispatch-call N3f4a@pvars N3f38@fender N3f50@y N3f35@r N3f36@mr))) (list 'if N3f50@y N3f54@call (list 'quote '#f)))))) (let ((N3f56@conseq (N3ef5@build-dispatch-call N3f4a@pvars N3f39@expr N3f50@y N3f35@r N3f36@mr))) (let ((N3f58@altern (N3efb@gen-syntax-case N3f32@x N3f33@keys N3f34@clauses N3f35@r N3f36@mr))) (list (N2e79@N2dab@build-lambda '#f (list N3f50@y) (list 'if N3f52@test N3f56@conseq N3f58@altern)) (list '(primitive syntax-dispatch) N3f32@x (list 'quote N3f4b@p)))))))))))))) (N3efb@gen-syntax-case (lambda (N3f10@x N3f11@keys N3f12@clauses N3f13@r N3f14@mr) (if (null? N3f12@clauses) (list '(primitive syntax-error) N3f10@x) (let ((N3f1a@t (car N3f12@clauses))) (let ((N3f1c@ls/false (N311d@syntax-dispatch N3f1a@t '(any any)))) (if N3f1c@ls/false (apply (lambda (N3f1e@pat N3f1f@expr) (if (and (N2f16@id? N3f1e@pat) (not (N2f22@bound-id-member? N3f1e@pat N3f11@keys)) (not (N311f@ellipsis? N3f1e@pat))) (if (N2f1c@free-id=? N3f1e@pat (N30a5@scheme-stx '_)) (N313f@chi-expr N3f1f@expr N3f13@r N3f14@mr) (let ((N3f22@lab (N2ea2@gen-label N3f1e@pat)) (N3f23@lex (N2e9e@gen-lexical N3f1e@pat))) (let ((N3f26@body (N313f@chi-expr (N2f02@add-subst (N2ed6@make-full-rib (list N3f1e@pat) (list N3f22@lab)) N3f1f@expr) (cons (cons N3f22@lab (N2f30@make-binding 'syntax (cons N3f23@lex '0))) N3f13@r) N3f14@mr))) (list (N2e79@N2dab@build-lambda '#f (list N3f23@lex) N3f26@body) N3f10@x)))) (N3ef9@gen-clause N3f10@x N3f11@keys (cdr N3f12@clauses) N3f13@r N3f14@mr N3f1e@pat '#t N3f1f@expr))) N3f1c@ls/false) (let ((N3f28@t N3f1a@t)) (let ((N3f2a@ls/false (N311d@syntax-dispatch N3f28@t '(any any any)))) (if N3f2a@ls/false (apply (lambda (N3f2c@pat N3f2d@fender N3f2e@expr) (N3ef9@gen-clause N3f10@x N3f11@keys (cdr N3f12@clauses) N3f13@r N3f14@mr N3f2c@pat N3f2d@fender N3f2e@expr)) N3f2a@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3f28@t))))))))))) (lambda (N3efc@e N3efd@r N3efe@mr) (let ((N3f02@t N3efc@e)) (let ((N3f04@ls/false (N311d@syntax-dispatch N3f02@t '(_ any each-any . each-any)))) (if N3f04@ls/false (apply (lambda (N3f06@expr N3f07@keys N3f08@clauses) (begin (N3123@verify-literals N3f07@keys N3efc@e) (let ((N3f0c@x (N2e9e@gen-lexical 'tmp))) (let ((N3f0e@body (N3efb@gen-syntax-case N3f0c@x N3f07@keys N3f08@clauses N3efd@r N3efe@mr))) (list (N2e79@N2dab@build-lambda '#f (list N3f0c@x) N3f0e@body) (N313f@chi-expr N3f06@expr N3efd@r N3efe@mr)))))) N3f04@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3f02@t))))))) (set! N4c4f@N3125@syntax-case-transformer N3125@syntax-case-transformer) (set! N3127@ellipsis-map (lambda (N3f80@proc N3f81@ls . N3f84@ls*) (letrec* ((N3f87@who '...)) (begin (if (not (list? N3f81@ls)) (assertion-violation N3f87@who '"not a list" N3f81@ls) (void)) (if (not (null? N3f84@ls*)) (let ((N3f88@n (length N3f81@ls))) (for-each (lambda (N3f8a@x) (begin (if (not (list? N3f8a@x)) (assertion-violation N3f87@who '"not a list" N3f8a@x) (void)) (if (not (= (length N3f8a@x) N3f88@n)) (assertion-violation N3f87@who '"length mismatch" N3f81@ls N3f8a@x) (void)))) N3f84@ls*)) (void)) (apply map N3f80@proc N3f81@ls N3f84@ls*))))) (set! N4c50@N3127@ellipsis-map N3127@ellipsis-map) (set! N3129@syntax-transformer (letrec* ((N3f8d@gen-syntax (lambda (N4004@src N4005@e N4006@r N4007@maps N4008@ellipsis? N4009@vec?) (let ((N4010@t N4005@e)) (let ((N4012@ls/false (N311d@syntax-dispatch N4010@t 'any))) (if (and N4012@ls/false (apply (lambda (N4014@dots) (N4008@ellipsis? N4014@dots)) N4012@ls/false)) (apply (lambda (N4016@dots) (N3201@syntax-violation '#f '"misplaced ellipsis in syntax form" N4004@src)) N4012@ls/false) (let ((N4018@t N4010@t)) (let ((N401a@ls/false (N311d@syntax-dispatch N4018@t 'any))) (if (and N401a@ls/false (apply (lambda (N401c@id) (N2f16@id? N401c@id)) N401a@ls/false)) (apply (lambda (N401e@id) (let ((N4020@label (N2f2c@id->label N4005@e))) (let ((N4022@b (N2f2e@label->binding N4020@label N4006@r))) (if (eq? (N2f32@binding-type N4022@b) 'syntax) (call-with-values (lambda () (let ((N4028@var.lev (N2f34@binding-value N4022@b))) (N3f8f@gen-ref N4004@src (car N4028@var.lev) (cdr N4028@var.lev) N4007@maps))) (lambda (N402a@N4025 N402b@N4027) (let ((N402e@maps N402b@N4027) (N402f@var N402a@N4025)) (values (list 'ref N402f@var) N402e@maps)))) (values (list 'quote N4005@e) N4007@maps))))) N401a@ls/false) (let ((N4032@t N4018@t)) (let ((N4034@ls/false (N311d@syntax-dispatch N4032@t '(any any)))) (if (and N4034@ls/false (apply (lambda (N4036@dots N4037@e) (N4008@ellipsis? N4036@dots)) N4034@ls/false)) (apply (lambda (N403a@dots N403b@e) (if N4009@vec? (N3201@syntax-violation '#f '"misplaced ellipsis in syntax form" N4004@src) (N3f8d@gen-syntax N4004@src N403b@e N4006@r N4007@maps (lambda (N403e@x) '#f) '#f))) N4034@ls/false) (let ((N4040@t N4032@t)) (let ((N4042@ls/false (N311d@syntax-dispatch N4040@t '(any any . any)))) (if (and N4042@ls/false (apply (lambda (N4044@x N4045@dots N4046@y) (N4008@ellipsis? N4045@dots)) N4042@ls/false)) (apply (lambda (N404a@x N404b@dots N404c@y) (let N4062@f ((N4050@y N404c@y) (N4051@k (lambda (N4054@maps) (call-with-values (lambda () (N3f8d@gen-syntax N4004@src N404a@x N4006@r (cons '() N4054@maps) N4008@ellipsis? '#f)) (lambda (N405a@N4057 N405b@N4059) (let ((N405e@maps N405b@N4059) (N405f@x N405a@N4057)) (if (null? (car N405e@maps)) (N3201@syntax-violation '#f '"extra ellipsis in syntax form" N4004@src) (values (N3f95@gen-map N405f@x (car N405e@maps)) (cdr N405e@maps))))))))) (let ((N4064@t N4050@y)) (let ((N4066@ls/false (N311d@syntax-dispatch N4064@t '()))) (if N4066@ls/false (apply (lambda () (N4051@k N4007@maps)) N4066@ls/false) (let ((N4068@t N4064@t)) (let ((N406a@ls/false (N311d@syntax-dispatch N4068@t '(any . any)))) (if (and N406a@ls/false (apply (lambda (N406c@dots N406d@y) (N4008@ellipsis? N406c@dots)) N406a@ls/false)) (apply (lambda (N4070@dots N4071@y) (N4062@f N4071@y (lambda (N4074@maps) (call-with-values (lambda () (N4051@k (cons '() N4074@maps))) (lambda (N407a@N4077 N407b@N4079) (let ((N407e@maps N407b@N4079) (N407f@x N407a@N4077)) (if (null? (car N407e@maps)) (N3201@syntax-violation '#f '"extra ellipsis in syntax form" N4004@src) (values (N3f93@gen-mappend N407f@x (car N407e@maps)) (cdr N407e@maps))))))))) N406a@ls/false) (let ((N4082@t N4068@t)) (let ((N4084@ls/false (N311d@syntax-dispatch N4082@t '_))) (if N4084@ls/false (apply (lambda () (call-with-values (lambda () (N3f8d@gen-syntax N4004@src N4050@y N4006@r N4007@maps N4008@ellipsis? N4009@vec?)) (lambda (N408a@N4087 N408b@N4089) (let ((N408e@maps N408b@N4089) (N408f@y N408a@N4087)) (call-with-values (lambda () (N4051@k N408e@maps)) (lambda (N4096@N4093 N4097@N4095) (let ((N409a@maps N4097@N4095) (N409b@x N4096@N4093)) (values (N3f91@gen-append N409b@x N408f@y) N409a@maps)))))))) N4084@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4082@t)))))))))))) N4042@ls/false) (let ((N409e@t N4040@t)) (let ((N40a0@ls/false (N311d@syntax-dispatch N409e@t '(any . any)))) (if N40a0@ls/false (apply (lambda (N40a2@x N40a3@y) (call-with-values (lambda () (N3f8d@gen-syntax N4004@src N40a2@x N4006@r N4007@maps N4008@ellipsis? '#f)) (lambda (N40aa@N40a7 N40ab@N40a9) (let ((N40ae@maps N40ab@N40a9) (N40af@xnew N40aa@N40a7)) (call-with-values (lambda () (N3f8d@gen-syntax N4004@src N40a3@y N4006@r N40ae@maps N4008@ellipsis? N4009@vec?)) (lambda (N40b6@N40b3 N40b7@N40b5) (let ((N40ba@maps N40b7@N40b5) (N40bb@ynew N40b6@N40b3)) (values (N3f97@gen-cons N4005@e N40a2@x N40a3@y N40af@xnew N40bb@ynew) N40ba@maps)))))))) N40a0@ls/false) (let ((N40be@t N409e@t)) (let ((N40c0@ls/false (N311d@syntax-dispatch N40be@t '#(vector each-any)))) (if N40c0@ls/false (apply (lambda (N40c2@ls) (call-with-values (lambda () (N3f8d@gen-syntax N4004@src N40c2@ls N4006@r N4007@maps N4008@ellipsis? '#t)) (lambda (N40c8@N40c5 N40c9@N40c7) (let ((N40cc@maps N40c9@N40c7) (N40cd@lsnew N40c8@N40c5)) (values (N3f99@gen-vector N4005@e N40c2@ls N40cd@lsnew) N40cc@maps))))) N40c0@ls/false) (let ((N40d0@t N40be@t)) (let ((N40d2@ls/false (N311d@syntax-dispatch N40d0@t '_))) (if N40d2@ls/false (apply (lambda () (values (list 'quote N4005@e) N4007@maps)) N40d2@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N40d0@t)))))))))))))))))))))))) (N3f8f@gen-ref (lambda (N3fea@src N3feb@var N3fec@level N3fed@maps) (if (= N3fec@level '0) (values N3feb@var N3fed@maps) (if (null? N3fed@maps) (N3201@syntax-violation '#f '"missing ellipsis in syntax form" N3fea@src) (call-with-values (lambda () (N3f8f@gen-ref N3fea@src N3feb@var (- N3fec@level '1) (cdr N3fed@maps))) (lambda (N3ff6@N3ff3 N3ff7@N3ff5) (let ((N3ffa@outer-maps N3ff7@N3ff5) (N3ffb@outer-var N3ff6@N3ff3)) (let ((N3ffe@t (assq N3ffb@outer-var (car N3fed@maps)))) (if N3ffe@t ((lambda (N4000@b) (values (cdr N4000@b) N3fed@maps)) N3ffe@t) (let ((N4002@inner-var (N2e9e@gen-lexical 'tmp))) (values N4002@inner-var (cons (cons (cons N3ffb@outer-var N4002@inner-var) (car N3fed@maps)) N3ffa@outer-maps)))))))))))) (N3f91@gen-append (lambda (N3fe6@x N3fe7@y) (if (fast-equal? N3fe7@y ''()) N3fe6@x (list 'append N3fe6@x N3fe7@y)))) (N3f93@gen-mappend (lambda (N3fe2@e N3fe3@map-env) (list 'apply '(primitive append) (N3f95@gen-map N3fe2@e N3fe3@map-env)))) (N3f95@gen-map (lambda (N3fd0@e N3fd1@map-env) (let ((N3fd4@formals (map cdr N3fd1@map-env)) (N3fd5@actuals (map (lambda (N3fd8@x) (list 'ref (car N3fd8@x))) N3fd1@map-env))) (if (eq? (car N3fd0@e) 'ref) (car N3fd5@actuals) (if (for-all (lambda (N3fda@x) (and (eq? (car N3fda@x) 'ref) (memq (cadr N3fda@x) N3fd4@formals))) (cdr N3fd0@e)) (let ((N3fdc@args (map (let ((N3fde@r (map cons N3fd4@formals N3fd5@actuals))) (lambda (N3fe0@x) (cdr (assq (cadr N3fe0@x) N3fde@r)))) (cdr N3fd0@e)))) (cons 'map (cons (list 'primitive (car N3fd0@e)) N3fdc@args))) (cons* 'map (list 'lambda N3fd4@formals N3fd0@e) N3fd5@actuals)))))) (N3f97@gen-cons (lambda (N3fc0@e N3fc1@x N3fc2@y N3fc3@xnew N3fc4@ynew) (let ((N3fca@t (car N3fc4@ynew))) (if (memv N3fca@t '(quote)) (if (eq? (car N3fc3@xnew) 'quote) (let ((N3fcc@xnew (cadr N3fc3@xnew)) (N3fcd@ynew (cadr N3fc4@ynew))) (if (and (eq? N3fcc@xnew N3fc1@x) (eq? N3fcd@ynew N3fc2@y)) (list 'quote N3fc0@e) (list 'quote (cons N3fcc@xnew N3fcd@ynew)))) (if (null? (cadr N3fc4@ynew)) (list 'list N3fc3@xnew) (list 'cons N3fc3@xnew N3fc4@ynew))) (if (memv N3fca@t '(list)) (cons 'list (cons N3fc3@xnew (cdr N3fc4@ynew))) (list 'cons N3fc3@xnew N3fc4@ynew)))))) (N3f99@gen-vector (lambda (N3fba@e N3fbb@ls N3fbc@lsnew) (if (eq? (car N3fbc@lsnew) 'quote) (if (eq? (cadr N3fbc@lsnew) N3fbb@ls) (list 'quote N3fba@e) (list 'quote (list->vector (cadr N3fbc@lsnew)))) (if (eq? (car N3fbc@lsnew) 'list) (cons 'vector (cdr N3fbc@lsnew)) (list 'list->vector N3fbc@lsnew))))) (N3f9b@regen (lambda (N3fb4@x) (let ((N3fb6@t (car N3fb4@x))) (if (memv N3fb6@t '(ref)) (cadr N3fb4@x) (if (memv N3fb6@t '(primitive)) (list 'primitive (cadr N3fb4@x)) (if (memv N3fb6@t '(quote)) (list 'quote (cadr N3fb4@x)) (if (memv N3fb6@t '(lambda)) (N2e79@N2dab@build-lambda '#f (cadr N3fb4@x) (N3f9b@regen (caddr N3fb4@x))) (if (memv N3fb6@t '(map)) (let ((N3fb8@ls (map N3f9b@regen (cdr N3fb4@x)))) (cons '(primitive ellipsis-map) N3fb8@ls)) (cons (list 'primitive (car N3fb4@x)) (map N3f9b@regen (cdr N3fb4@x)))))))))))) (lambda (N3f9c@e N3f9d@r N3f9e@mr) (let ((N3fa2@t N3f9c@e)) (let ((N3fa4@ls/false (N311d@syntax-dispatch N3fa2@t '(_ any)))) (if N3fa4@ls/false (apply (lambda (N3fa6@x) (call-with-values (lambda () (N3f8d@gen-syntax N3f9c@e N3fa6@x N3f9d@r '() N311f@ellipsis? '#f)) (lambda (N3fac@N3fa9 N3fad@N3fab) (let ((N3fb0@maps N3fad@N3fab) (N3fb1@e N3fac@N3fa9)) (N3f9b@regen N3fb1@e))))) N3fa4@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N3fa2@t))))))) (set! N4c51@N3129@syntax-transformer N3129@syntax-transformer) (set! N312b@core-macro-transformer (lambda (N40d4@name) (let ((N40d6@t N40d4@name)) (if (memv N40d6@t '(quote)) N30cd@quote-transformer (if (memv N40d6@t '(lambda)) N30d1@lambda-transformer (if (memv N40d6@t '(case-lambda)) N30cf@case-lambda-transformer (if (memv N40d6@t '(letrec)) N30b5@letrec-transformer (if (memv N40d6@t '(letrec*)) N30b7@letrec*-transformer (if (memv N40d6@t '(let)) N30b3@let-transformer (if (memv N40d6@t '(if)) N30c5@if-transformer (if (memv N40d6@t '(and)) N30c7@and-transformer (if (memv N40d6@t '(or)) N30c9@or-transformer (if (memv N40d6@t '(foreign-call)) N3119@foreign-call-transformer (if (memv N40d6@t '(syntax-case)) N3125@syntax-case-transformer (if (memv N40d6@t '(syntax)) N3129@syntax-transformer (if (memv N40d6@t '(type-descriptor)) N30bb@type-descriptor-transformer (if (memv N40d6@t '(record-type-descriptor)) N30bd@record-type-descriptor-transformer (if (memv N40d6@t '(record-constructor-descriptor)) N30bf@record-constructor-descriptor-transformer (if (memv N40d6@t '(fluid-let-syntax)) N30b9@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" N40d4@name)))))))))))))))))))) (set! N4c52@N312b@core-macro-transformer N312b@core-macro-transformer) (set! N312d@symbol-macro (lambda (N40d8@x N40d9@set) (let ((N40dc@t N40d8@x)) (let ((N40de@ls/false (N311d@syntax-dispatch N40dc@t '(_ any)))) (if (and N40de@ls/false (apply (lambda (N40e0@name) (and (N2f16@id? N40e0@name) (memq (N2f18@id->sym N40e0@name) N40d9@set))) N40de@ls/false)) (apply (lambda (N40e2@name) (N30d3@bless (list 'quote N40e2@name))) N40de@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N40dc@t)))))) (set! N4c53@N312d@symbol-macro N312d@symbol-macro) (set! N312f@macro-transformer (lambda (N40e4@x) (if (procedure? N40e4@x) N40e4@x (if (symbol? N40e4@x) (let ((N40e6@t N40e4@x)) (if (memv N40e6@t '(define-record-type)) N3111@define-record-type-macro (if (memv N40e6@t '(define-struct)) N310f@define-struct-macro (if (memv N40e6@t '(include)) N3105@include-macro (if (memv N40e6@t '(cond)) N3101@cond-macro (if (memv N40e6@t '(let)) N30d9@let-macro (if (memv N40e6@t '(do)) N30f9@do-macro (if (memv N40e6@t '(or)) N30fd@or-macro (if (memv N40e6@t '(and)) N30ff@and-macro (if (memv N40e6@t '(let*)) N30fb@let*-macro (if (memv N40e6@t '(let-values)) N30db@let-values-macro (if (memv N40e6@t '(let*-values)) N30dd@let*-values-macro (if (memv N40e6@t '(syntax-rules)) N3109@syntax-rules-macro (if (memv N40e6@t '(quasiquote)) N310b@quasiquote-macro (if (memv N40e6@t '(quasisyntax)) N310d@quasisyntax-macro (if (memv N40e6@t '(with-syntax)) N30d5@with-syntax-macro (if (memv N40e6@t '(when)) N30c1@when-macro (if (memv N40e6@t '(unless)) N30c3@unless-macro (if (memv N40e6@t '(case)) N30cb@case-macro (if (memv N40e6@t '(identifier-syntax)) N30f7@identifier-syntax-macro (if (memv N40e6@t '(time)) N30ef@time-macro (if (memv N40e6@t '(delay)) N30f1@delay-macro (if (memv N40e6@t '(assert)) N30f3@assert-macro (if (memv N40e6@t '(endianness)) N30f5@endianness-macro (if (memv N40e6@t '(guard)) N30eb@guard-macro (if (memv N40e6@t '(define-enumeration)) N30ed@define-enumeration-macro (if (memv N40e6@t '(trace-lambda)) N30df@trace-lambda-macro (if (memv N40e6@t '(trace-define)) N30e1@trace-define-macro (if (memv N40e6@t '(trace-define-syntax)) N30e3@trace-define-syntax-macro (if (memv N40e6@t '(trace-let-syntax)) N30e7@trace-let-syntax-macro (if (memv N40e6@t '(trace-letrec-syntax)) N30e9@trace-letrec-syntax-macro (if (memv N40e6@t '(define-condition-type)) N3113@define-condition-type-macro (if (memv N40e6@t '(parameterize)) N3117@parameterize-macro (if (memv N40e6@t '(include-into)) N3107@include-into-macro (if (memv N40e6@t '(eol-style)) (lambda (N40e8@x) (N312d@symbol-macro N40e8@x '(none lf cr crlf nel crnel ls))) (if (memv N40e6@t '(error-handling-mode)) (lambda (N40ea@x) (N312d@symbol-macro N40ea@x '(ignore raise replace))) (if (memv N40e6@t '(buffer-mode)) (lambda (N40ec@x) (N312d@symbol-macro N40ec@x '(none line block))) (if (memv N40e6@t '(file-options)) N2e91@file-options-macro (if (memv N40e6@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) N3115@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" N40e4@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" N40e4@x))))) (set! N4c54@N312f@macro-transformer N312f@macro-transformer) (set! N3131@local-macro-transformer (lambda (N40ee@x) (car N40ee@x))) (set! N4c55@N3131@local-macro-transformer N3131@local-macro-transformer) (set! N3133@do-macro-call (lambda (N40f0@transformer N40f1@expr) (let ((N40f4@out (N40f0@transformer (N2f00@add-mark N2efa@anti-mark N40f1@expr '#f)))) (begin (let N40f8@f ((N40f6@x N40f4@out)) (if (not (N2ee2@stx? N40f6@x)) (if (pair? N40f6@x) (begin (N40f8@f (car N40f6@x)) (N40f8@f (cdr N40f6@x))) (if (vector? N40f6@x) (vector-for-each N40f8@f N40f6@x) (if (symbol? N40f6@x) (N3201@syntax-violation '#f '"raw symbol encountered in output of macro" N40f1@expr N40f6@x) (void)))) (void))) (N2f00@add-mark (N2ef8@gen-mark) N40f4@out N40f1@expr))))) (set! N4c56@N3133@do-macro-call N3133@do-macro-call) (set! N3135@chi-macro (lambda (N40fa@p N40fb@e) (N3133@do-macro-call (N312f@macro-transformer N40fa@p) N40fb@e))) (set! N4c57@N3135@chi-macro N3135@chi-macro) (set! N3137@chi-local-macro (lambda (N40fe@p N40ff@e) (N3133@do-macro-call (N3131@local-macro-transformer N40fe@p) N40ff@e))) (set! N4c58@N3137@chi-local-macro N3137@chi-local-macro) (set! N3139@chi-global-macro (lambda (N4102@p N4103@e) (let ((N4106@lib (car N4102@p)) (N4107@loc (cdr N4102@p))) (begin (N2d33@N2b82@visit-library N4106@lib) (let ((N410a@x (symbol-value N4107@loc))) (let ((N410c@transformer (if (procedure? N410a@x) N410a@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" N410a@x)))) (N3133@do-macro-call N410c@transformer N4103@e))))))) (set! N4c59@N3139@chi-global-macro N3139@chi-global-macro) (set! N313b@chi-expr* (lambda (N410e@e* N410f@r N4110@mr) (if (null? N410e@e*) '() (let ((N4114@e (N313f@chi-expr (car N410e@e*) N410f@r N4110@mr))) (cons N4114@e (N313b@chi-expr* (cdr N410e@e*) N410f@r N4110@mr)))))) (set! N4c5a@N313b@chi-expr* N313b@chi-expr*) (set! N313d@chi-application (lambda (N4116@e N4117@r N4118@mr) (let ((N411c@t N4116@e)) (let ((N411e@ls/false (N311d@syntax-dispatch N411c@t '(any . each-any)))) (if N411e@ls/false (apply (lambda (N4120@rator N4121@rands) (let ((N4124@rator (N313f@chi-expr N4120@rator N4117@r N4118@mr))) (cons N4124@rator (N313b@chi-expr* N4121@rands N4117@r N4118@mr)))) N411e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N411c@t)))))) (set! N4c5b@N313d@chi-application N313d@chi-application) (set! N313f@chi-expr (lambda (N4126@e N4127@r N4128@mr) (call-with-values (lambda () (N2f38@syntax-type N4126@e N4127@r)) (lambda (N4132@N412d N4133@N412f N4134@N4131) (let ((N4138@kwd N4134@N4131) (N4139@value N4133@N412f) (N413a@type N4132@N412d)) (let ((N413e@t N413a@type)) (if (memv N413e@t '(core-macro)) (let ((N4140@transformer (N312b@core-macro-transformer N4139@value))) (N4140@transformer N4126@e N4127@r N4128@mr)) (if (memv N413e@t '(global)) (let ((N4142@lib (car N4139@value))) (let ((N4144@loc (cdr N4139@value))) (begin ((N3189@inv-collector) N4142@lib) N4144@loc))) (if (memv N413e@t '(core-prim)) (let ((N4146@name N4139@value)) (list 'primitive N4146@name)) (if (memv N413e@t '(call)) (N313d@chi-application N4126@e N4127@r N4128@mr) (if (memv N413e@t '(lexical)) (let ((N4148@lex (N30a7@lexical-var N4139@value))) N4148@lex) (if (memv N413e@t '(global-macro global-macro!)) (N313f@chi-expr (N3139@chi-global-macro N4139@value N4126@e) N4127@r N4128@mr) (if (memv N413e@t '(local-macro local-macro!)) (N313f@chi-expr (N3137@chi-local-macro N4139@value N4126@e) N4127@r N4128@mr) (if (memv N413e@t '(macro macro!)) (N313f@chi-expr (N3135@chi-macro N4139@value N4126@e) N4127@r N4128@mr) (if (memv N413e@t '(constant)) (let ((N414a@datum N4139@value)) (list 'quote N414a@datum)) (if (memv N413e@t '(set!)) (N3141@chi-set! N4126@e N4127@r N4128@mr) (if (memv N413e@t '(begin)) (let ((N414c@t N4126@e)) (let ((N414e@ls/false (N311d@syntax-dispatch N414c@t '(_ any . each-any)))) (if N414e@ls/false (apply (lambda (N4150@x N4151@x*) (N2e7b@N2ddb@build-sequence '#f (N313b@chi-expr* (cons N4150@x N4151@x*) N4127@r N4128@mr))) N414e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N414c@t)))) (if (memv N413e@t '(let-syntax letrec-syntax)) (let ((N4154@t N4126@e)) (let ((N4156@ls/false (N311d@syntax-dispatch N4154@t '(_ #(each (any any)) any . each-any)))) (if (and N4156@ls/false (apply (lambda (N4158@xlhs* N4159@xrhs* N415a@xbody N415b@xbody*) (if (not (N2f1e@valid-bound-ids? N4158@xlhs*)) (N3201@syntax-violation '#f '"invalid identifiers" N4126@e) (void))) N4156@ls/false)) (apply (lambda (N4160@xlhs* N4161@xrhs* N4162@xbody N4163@xbody*) (let ((N4168@xlab* (map N2ea2@gen-label N4160@xlhs*))) (let ((N416a@xrib (N2ed6@make-full-rib N4160@xlhs* N4168@xlab*))) (let ((N416c@xb* (map (lambda (N416e@x) (N2f4e@make-eval-transformer (N317b@expand-transformer (if (eq? N413a@type 'let-syntax) N416e@x (N2f02@add-subst N416a@xrib N416e@x)) N4128@mr))) N4161@xrhs*))) (N2e7b@N2ddb@build-sequence '#f (N313b@chi-expr* (map (lambda (N4170@x) (N2f02@add-subst N416a@xrib N4170@x)) (cons N4162@xbody N4163@xbody*)) (append (map cons N4168@xlab* N416c@xb*) N4127@r) (append (map cons N4168@xlab* N416c@xb*) N4128@mr))))))) N4156@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4154@t)))) (if (memv N413e@t '(displaced-lexical)) (N3201@syntax-violation '#f '"identifier out of context" N4126@e) (if (memv N413e@t '(syntax)) (N3201@syntax-violation '#f '"reference to pattern variable outside a syntax form" N4126@e) (if (memv N413e@t '(define define-syntax module import library)) (N3201@syntax-violation '#f (string-append (let ((N4172@t N413a@type)) (if (memv N4172@t '(define)) '"a definition" (if (memv N4172@t '(define-syntax)) '"a define-syntax" (if (memv N4172@t '(module)) '"a module definition" (if (memv N4172@t '(library)) '"a library definition" (if (memv N4172@t '(import)) '"an import declaration" (if (memv N4172@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") N4126@e) (if (memv N413e@t '(mutable)) (N3201@syntax-violation '#f '"attempt to reference an unexportable variable" N4126@e) (N3201@syntax-violation '#f '"invalid expression" N4126@e))))))))))))))))))))))) (set! N4c5c@N313f@chi-expr N313f@chi-expr) (set! N3141@chi-set! (lambda (N4174@e N4175@r N4176@mr) (let ((N417a@t N4174@e)) (let ((N417c@ls/false (N311d@syntax-dispatch N417a@t '(_ any any)))) (if (and N417c@ls/false (apply (lambda (N417e@x N417f@v) (N2f16@id? N417e@x)) N417c@ls/false)) (apply (lambda (N4182@x N4183@v) (call-with-values (lambda () (N2f38@syntax-type N4182@x N4175@r)) (lambda (N418c@N4187 N418d@N4189 N418e@N418b) (let ((N4192@kwd N418e@N418b) (N4193@value N418d@N4189) (N4194@type N418c@N4187)) (let ((N4198@t N4194@type)) (if (memv N4198@t '(lexical)) (begin (N30ab@set-lexical-mutable! N4193@value '#t) (list 'set! (N30a7@lexical-var N4193@value) (N313f@chi-expr N4183@v N4175@r N4176@mr))) (if (memv N4198@t '(core-prim)) (N3201@syntax-violation '#f '"cannot modify imported core primitive" N4174@e) (if (memv N4198@t '(global)) (N3201@syntax-violation '#f '"attempt to modify imported binding" N4174@e) (if (memv N4198@t '(global-macro!)) (N313f@chi-expr (N3139@chi-global-macro N4193@value N4174@e) N4175@r N4176@mr) (if (memv N4198@t '(local-macro!)) (N313f@chi-expr (N3137@chi-local-macro N4193@value N4174@e) N4175@r N4176@mr) (if (memv N4198@t '(mutable)) (N3201@syntax-violation '#f '"attempt to assign to an unexportable variable" N4174@e) (N3201@syntax-violation '#f '"invalid syntax" N4174@e)))))))))))) N417c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N417a@t)))))) (set! N4c5d@N3141@chi-set! N3141@chi-set!) (set! N3143@verify-formals (lambda (N419a@fmls N419b@stx) (let ((N419e@t N419a@fmls)) (let ((N41a0@ls/false (N311d@syntax-dispatch N419e@t 'each-any))) (if N41a0@ls/false (apply (lambda (N41a2@x*) (if (not (N2f1e@valid-bound-ids? N41a2@x*)) (N30d7@invalid-fmls-error N419b@stx N419a@fmls) (void))) N41a0@ls/false) (let ((N41a4@t N419e@t)) (let ((N41a6@ls/false (N311d@syntax-dispatch N41a4@t '#(each+ any () any)))) (if N41a6@ls/false (apply (lambda (N41a8@x* N41a9@x) (if (not (N2f1e@valid-bound-ids? (cons N41a9@x N41a8@x*))) (N30d7@invalid-fmls-error N419b@stx N419a@fmls) (void))) N41a6@ls/false) (let ((N41ac@t N41a4@t)) (let ((N41ae@ls/false (N311d@syntax-dispatch N41ac@t '_))) (if N41ae@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid syntax" N419b@stx)) N41ae@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N41ac@t)))))))))))) (set! N4c5e@N3143@verify-formals N3143@verify-formals) (set! N3145@chi-lambda-clause (lambda (N41b0@stx N41b1@fmls N41b2@body* N41b3@r N41b4@mr) (let ((N41ba@t N41b1@fmls)) (let ((N41bc@ls/false (N311d@syntax-dispatch N41ba@t 'each-any))) (if N41bc@ls/false (apply (lambda (N41be@x*) (begin (N3143@verify-formals N41b1@fmls N41b0@stx) (let ((N41c0@lex* (map N2e9e@gen-lexical N41be@x*)) (N41c1@lab* (map N2ea2@gen-label N41be@x*))) (values N41c0@lex* (N3155@chi-internal (N2f02@add-subst (N2ed6@make-full-rib N41be@x* N41c1@lab*) N41b2@body*) (N30af@add-lexicals N41c1@lab* N41c0@lex* N41b3@r) N41b4@mr))))) N41bc@ls/false) (let ((N41c4@t N41ba@t)) (let ((N41c6@ls/false (N311d@syntax-dispatch N41c4@t '#(each+ any () any)))) (if N41c6@ls/false (apply (lambda (N41c8@x* N41c9@x) (begin (N3143@verify-formals N41b1@fmls N41b0@stx) (let ((N41cc@lex* (map N2e9e@gen-lexical N41c8@x*)) (N41cd@lab* (map N2ea2@gen-label N41c8@x*)) (N41ce@lex (N2e9e@gen-lexical N41c9@x)) (N41cf@lab (N2ea2@gen-label N41c9@x))) (values (append N41cc@lex* N41ce@lex) (N3155@chi-internal (N2f02@add-subst (N2ed6@make-full-rib (cons N41c9@x N41c8@x*) (cons N41cf@lab N41cd@lab*)) N41b2@body*) (N30af@add-lexicals (cons N41cf@lab N41cd@lab*) (cons N41ce@lex N41cc@lex*) N41b3@r) N41b4@mr))))) N41c6@ls/false) (let ((N41d4@t N41c4@t)) (let ((N41d6@ls/false (N311d@syntax-dispatch N41d4@t '_))) (if N41d6@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid syntax" N41b1@fmls)) N41d6@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N41d4@t)))))))))))) (set! N4c5f@N3145@chi-lambda-clause N3145@chi-lambda-clause) (set! N3147@chi-lambda-clause* (lambda (N41d8@stx N41d9@fmls* N41da@body** N41db@r N41dc@mr) (if (null? N41d9@fmls*) (values '() '()) (call-with-values (lambda () (N3145@chi-lambda-clause N41d8@stx (car N41d9@fmls*) (car N41da@body**) N41db@r N41dc@mr)) (lambda (N41e6@N41e3 N41e7@N41e5) (let ((N41ea@b N41e7@N41e5) (N41eb@a N41e6@N41e3)) (call-with-values (lambda () (N3147@chi-lambda-clause* N41d8@stx (cdr N41d9@fmls*) (cdr N41da@body**) N41db@r N41dc@mr)) (lambda (N41f2@N41ef N41f3@N41f1) (let ((N41f6@b* N41f3@N41f1) (N41f7@a* N41f2@N41ef)) (values (cons N41eb@a N41f7@a*) (cons N41ea@b N41f6@b*))))))))))) (set! N4c60@N3147@chi-lambda-clause* N3147@chi-lambda-clause*) (set! N3149@chi-defun (lambda (N41fa@x N41fb@r N41fc@mr) (let ((N4200@fmls (car N41fa@x)) (N4201@body* (cdr N41fa@x))) (call-with-values (lambda () (N3145@chi-lambda-clause N4200@fmls N4200@fmls N4201@body* N41fb@r N41fc@mr)) (lambda (N4208@N4205 N4209@N4207) (let ((N420c@body N4209@N4207) (N420d@fmls N4208@N4205)) (N2e79@N2dab@build-lambda '#f N420d@fmls N420c@body))))))) (set! N4c61@N3149@chi-defun N3149@chi-defun) (set! N314b@chi-rhs (lambda (N4210@rhs N4211@r N4212@mr) (let ((N4216@t (car N4210@rhs))) (if (memv N4216@t '(defun)) (N3149@chi-defun (cdr N4210@rhs) N4211@r N4212@mr) (if (memv N4216@t '(expr)) (let ((N4218@expr (cdr N4210@rhs))) (N313f@chi-expr N4218@expr N4211@r N4212@mr)) (if (memv N4216@t '(top-expr)) (let ((N421a@expr (cdr N4210@rhs))) (N2e7b@N2ddb@build-sequence '#f (list (N313f@chi-expr N421a@expr N4211@r N4212@mr) (N2e7c@N2ddd@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" N4210@rhs))))))) (set! N4c62@N314b@chi-rhs N314b@chi-rhs) (set! N314d@expand-interaction-rhs*/init* (lambda (N421c@lhs* N421d@rhs* N421e@init* N421f@r N4220@mr) (let N422a@f ((N4226@lhs* N421c@lhs*) (N4227@rhs* N421d@rhs*)) (if (null? N4226@lhs*) (map (lambda (N422c@x) (N313f@chi-expr N422c@x N421f@r N4220@mr)) N421e@init*) (let ((N422e@lhs (car N4226@lhs*)) (N422f@rhs (car N4227@rhs*))) (let ((N4232@t (car N422f@rhs))) (if (memv N4232@t '(defun)) (let ((N4234@rhs (N3149@chi-defun (cdr N422f@rhs) N421f@r N4220@mr))) (cons (list 'set! N422e@lhs N4234@rhs) (N422a@f (cdr N4226@lhs*) (cdr N4227@rhs*)))) (if (memv N4232@t '(expr)) (let ((N4236@rhs (N313f@chi-expr (cdr N422f@rhs) N421f@r N4220@mr))) (cons (list 'set! N422e@lhs N4236@rhs) (N422a@f (cdr N4226@lhs*) (cdr N4227@rhs*)))) (if (memv N4232@t '(top-expr)) (let ((N4238@e (N313f@chi-expr (cdr N422f@rhs) N421f@r N4220@mr))) (cons N4238@e (N422a@f (cdr N4226@lhs*) (cdr N4227@rhs*)))) (error 'expand-interaction '"invallid" N422f@rhs)))))))))) (set! N4c63@N314d@expand-interaction-rhs*/init* N314d@expand-interaction-rhs*/init*) (set! N314f@chi-rhs* (lambda (N423a@rhs* N423b@r N423c@mr) (let N4242@f ((N4240@ls N423a@rhs*)) (if (null? N4240@ls) '() (let ((N4244@a (N314b@chi-rhs (car N4240@ls) N423b@r N423c@mr))) (cons N4244@a (N4242@f (cdr N4240@ls)))))))) (set! N4c64@N314f@chi-rhs* N314f@chi-rhs*) (set! N3151@find-bound=? (lambda (N4246@x N4247@lhs* N4248@rhs*) (if (null? N4247@lhs*) '#f (if (N2f1a@bound-id=? N4246@x (car N4247@lhs*)) (car N4248@rhs*) (N3151@find-bound=? N4246@x (cdr N4247@lhs*) (cdr N4248@rhs*)))))) (set! N4c65@N3151@find-bound=? N3151@find-bound=?) (set! N3153@find-dups (lambda (N424c@ls) (let N4252@f ((N424e@ls N424c@ls) (N424f@dups '())) (if (null? N424e@ls) N424f@dups (let ((N4254@t (N3151@find-bound=? (car N424e@ls) (cdr N424e@ls) (cdr N424e@ls)))) (if N4254@t ((lambda (N4256@x) (N4252@f (cdr N424e@ls) (cons (list (car N424e@ls) N4256@x) N424f@dups))) N4254@t) (N4252@f (cdr N424e@ls) N424f@dups))))))) (set! N4c66@N3153@find-dups N3153@find-dups) (set! N3155@chi-internal (lambda (N4258@e* N4259@r N425a@mr) (let ((N425e@rib (N2eca@make-empty-rib))) (call-with-values (lambda () (N3179@chi-body* (map (lambda (N4270@x) (N2f02@add-subst N425e@rib N4270@x)) (N2f14@syntax->list N4258@e*)) N4259@r N425a@mr '() '() '() '() '() N425e@rib '#f)) (lambda (N4272@N4261 N4273@N4263 N4274@N4265 N4275@N4267 N4276@N4269 N4277@N426b N4278@N426d N4279@N426f) (let ((N4282@_exp* N4279@N426f) (N4283@kwd* N4278@N426d) (N4284@mod** N4277@N426b) (N4285@rhs* N4276@N4269) (N4286@lex* N4275@N4267) (N4287@mr N4274@N4265) (N4288@r N4273@N4263) (N4289@e* N4272@N4261)) (begin (if (null? N4289@e*) (N3201@syntax-violation '#f '"no expression in body" N4289@e*) (void)) (let ((N4292@init* (N313b@chi-expr* (append (apply append (reverse N4284@mod**)) N4289@e*) N4288@r N4287@mr))) (let ((N4294@rhs* (N314f@chi-rhs* N4285@rhs* N4288@r N4287@mr))) (N2e80@N2de5@build-letrec* '#f (reverse N4286@lex*) (reverse N4294@rhs*) (N2e7b@N2ddb@build-sequence '#f N4292@init*))))))))))) (set! N4c67@N3155@chi-internal N3155@chi-internal) (set! N3157@parse-module (lambda (N4296@e) (let ((N4298@t N4296@e)) (let ((N429a@ls/false (N311d@syntax-dispatch N4298@t '(_ each-any . each-any)))) (if N429a@ls/false (apply (lambda (N429c@export* N429d@b*) (begin (if (not (for-all N2f16@id? N429c@export*)) (N3201@syntax-violation '#f '"module exports must be identifiers" N4296@e) (void)) (values '#f (list->vector N429c@export*) N429d@b*))) N429a@ls/false) (let ((N42a0@t N4298@t)) (let ((N42a2@ls/false (N311d@syntax-dispatch N42a0@t '(_ any each-any . each-any)))) (if N42a2@ls/false (apply (lambda (N42a4@name N42a5@export* N42a6@b*) (begin (if (not (N2f16@id? N42a4@name)) (N3201@syntax-violation '#f '"module name must be an identifier" N4296@e) (void)) (if (not (for-all N2f16@id? N42a5@export*)) (N3201@syntax-violation '#f '"module exports must be identifiers" N4296@e) (void)) (values N42a4@name (list->vector N42a5@export*) N42a6@b*))) N42a2@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N42a0@t))))))))) (set! N4c68@N3157@parse-module N3157@parse-module) (set! N3161@module-interface? (lambda (N42aa@x) (and (simple-struct? N42aa@x) (eq? (simple-struct-name N42aa@x) 'module-interface)))) (set! N4c69@N3161@module-interface? N3161@module-interface?) (set! N3163@module-interface-first-mark (lambda (N42ac@x) (simple-struct-ref N42ac@x '0))) (set! N4c6a@N3163@module-interface-first-mark N3163@module-interface-first-mark) (set! N3165@set-module-interface-first-mark! (lambda (N42ae@x N42af@val) (simple-struct-set! N42ae@x '0 N42af@val))) (set! N4c6b@N3165@set-module-interface-first-mark! N3165@set-module-interface-first-mark!) (set! N3167@module-interface-exp-id-vec (lambda (N42b2@x) (simple-struct-ref N42b2@x '1))) (set! N4c6c@N3167@module-interface-exp-id-vec N3167@module-interface-exp-id-vec) (set! N3169@set-module-interface-exp-id-vec! (lambda (N42b4@x N42b5@val) (simple-struct-set! N42b4@x '1 N42b5@val))) (set! N4c6d@N3169@set-module-interface-exp-id-vec! N3169@set-module-interface-exp-id-vec!) (set! N316b@module-interface-exp-lab-vec (lambda (N42b8@x) (simple-struct-ref N42b8@x '2))) (set! N4c6e@N316b@module-interface-exp-lab-vec N316b@module-interface-exp-lab-vec) (set! N316d@set-module-interface-exp-lab-vec! (lambda (N42ba@x N42bb@val) (simple-struct-set! N42ba@x '2 N42bb@val))) (set! N4c6f@N316d@set-module-interface-exp-lab-vec! N316d@set-module-interface-exp-lab-vec!) (set! N316f@dummy '3) (set! N4c70@N316f@dummy N316f@dummy) (set! N3171@module-interface-exp-id* (lambda (N42be@iface N42bf@id) (letrec* ((N42c3@diff-marks (lambda (N42ca@ls N42cb@x) (begin (if (null? N42ca@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((N42ce@a (car N42ca@ls))) (if (eq? N42ce@a N42cb@x) '() (cons N42ce@a (N42c3@diff-marks (cdr N42ca@ls) N42cb@x)))))))) (let ((N42c4@diff (N42c3@diff-marks (N2ee8@stx-mark* N42bf@id) (N3163@module-interface-first-mark N42be@iface))) (N42c5@id-vec (N3167@module-interface-exp-id-vec N42be@iface))) (if (null? N42c4@diff) N42c5@id-vec (vector-map (lambda (N42c8@x) (make-simple-struct 'stx '5 (list (N2ee4@stx-expr N42c8@x) (append N42c4@diff (N2ee8@stx-mark* N42c8@x)) '() '()))) N42c5@id-vec)))))) (set! N4c71@N3171@module-interface-exp-id* N3171@module-interface-exp-id*) (set! N3173@chi-internal-module (lambda (N42d0@e N42d1@r N42d2@mr N42d3@lex* N42d4@rhs* N42d5@mod** N42d6@kwd*) (call-with-values (lambda () (N3157@parse-module N42d0@e)) (lambda (N42e4@N42df N42e5@N42e1 N42e6@N42e3) (let ((N42ea@e* N42e6@N42e3) (N42eb@exp-id* N42e5@N42e1) (N42ec@name N42e4@N42df)) (let ((N42f0@rib (N2eca@make-empty-rib))) (let ((N42f2@e* (map (lambda (N42f4@x) (N2f02@add-subst N42f0@rib N42f4@x)) (N2f14@syntax->list N42ea@e*)))) (call-with-values (lambda () (N3179@chi-body* N42f2@e* N42d1@r N42d2@mr N42d3@lex* N42d4@rhs* N42d5@mod** N42d6@kwd* '() N42f0@rib '#f)) (lambda (N4306@N42f7 N4307@N42f9 N4308@N42fb N4309@N42fd N430a@N42ff N430b@N4301 N430c@N4303 N430d@N4305) (let ((N4316@_exp* N430d@N4305) (N4317@kwd* N430c@N4303) (N4318@mod** N430b@N4301) (N4319@rhs* N430a@N42ff) (N431a@lex* N4309@N42fd) (N431b@mr N4308@N42fb) (N431c@r N4307@N42f9) (N431d@e* N4306@N42f7)) (let ((N4326@exp-lab* (vector-map (lambda (N432a@x) (or (N2f2c@id->label (make-simple-struct 'stx '5 (list (N2f18@id->sym N432a@x) (N2ee8@stx-mark* N432a@x) (list N42f0@rib) '()))) (N3201@syntax-violation '#f '"cannot find module export" N432a@x))) N42eb@exp-id*)) (N4327@mod** (cons N431d@e* N4318@mod**))) (if (not N42ec@name) (values N431a@lex* N4319@rhs* N42eb@exp-id* N4326@exp-lab* N431c@r N431b@mr N4327@mod** N4317@kwd*) (let ((N432c@lab (N2ea2@gen-label 'module)) (N432d@iface (make-simple-struct 'module-interface '4 (list (car (N2ee8@stx-mark* N42ec@name)) (vector-map (lambda (N4330@x) (make-simple-struct 'stx '5 (list (N2ee4@stx-expr N4330@x) (N2ee8@stx-mark* N4330@x) '() '()))) N42eb@exp-id*) N4326@exp-lab*)))) (values N431a@lex* N4319@rhs* (vector N42ec@name) (vector N432c@lab) (cons (cons N432c@lab (cons '$module N432d@iface)) N431c@r) (cons (cons N432c@lab (cons '$module N432d@iface)) N431b@mr) N4327@mod** N4317@kwd*)))))))))))))) (set! N4c72@N3173@chi-internal-module N3173@chi-internal-module) (set! N3175@copy-rib-contents! (lambda (N4332@from-rib N4333@to-rib) (for-each (lambda (N4336@sym N4337@mark* N4338@label) (let ((N433c@id (make-simple-struct 'stx '5 (list N4336@sym N4337@mark* '() '())))) (N2ecc@extend-rib! N4333@to-rib N433c@id N4338@label))) (N2eb4@rib-sym* N4332@from-rib) (N2eb8@rib-mark** N4332@from-rib) (N2ebc@rib-label* N4332@from-rib)))) (set! N4c73@N3175@copy-rib-contents! N3175@copy-rib-contents!) (set! N3177@chi-body*-macro (lambda (N433e@e* N433f@r N4340@mr N4341@lex* N4342@rhs* N4343@mod** N4344@kwd* N4345@exp* N4346@rib N4347@top? N4348@e) (let ((N4354@rib2 (N2eca@make-empty-rib))) (call-with-values (lambda () (N3179@chi-body* (list (N2f02@add-subst N4354@rib2 N4348@e)) N433f@r N4340@mr N4341@lex* N4342@rhs* N4343@mod** N4344@kwd* N4345@exp* N4354@rib2 N4347@top?)) (lambda (N4366@N4357 N4367@N4359 N4368@N435b N4369@N435d N436a@N435f N436b@N4361 N436c@N4363 N436d@N4365) (let ((N4376@exp* N436d@N4365) (N4377@kwd* N436c@N4363) (N4378@mod** N436b@N4361) (N4379@rhs* N436a@N435f) (N437a@lex* N4369@N435d) (N437b@mr N4368@N435b) (N437c@r N4367@N4359) (N437d@e1* N4366@N4357)) (begin (N3175@copy-rib-contents! N4354@rib2 N4346@rib) (if (null? N437d@e1*) (N3179@chi-body* N433e@e* N437c@r N437b@mr N437a@lex* N4379@rhs* N4378@mod** N4377@kwd* N4376@exp* N4346@rib N4347@top?) (values (append N437d@e1* N433e@e*) N437c@r N437b@mr N437a@lex* N4379@rhs* N4378@mod** N4377@kwd* N4376@exp*))))))))) (set! N4c74@N3177@chi-body*-macro N3177@chi-body*-macro) (set! N3179@chi-body* (lambda (N4386@e* N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N438c@kwd* N438d@exp* N438e@rib N438f@top?) (if (null? N4386@e*) (values N4386@e* N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N438c@kwd* N438d@exp*) (let ((N439a@e (car N4386@e*))) (call-with-values (lambda () (N2f38@syntax-type N439a@e N4387@r)) (lambda (N43a2@N439d N43a3@N439f N43a4@N43a1) (let ((N43a8@kwd N43a4@N43a1) (N43a9@value N43a3@N439f) (N43aa@type N43a2@N439d)) (let ((N43ae@kwd* (if (N2f16@id? N43a8@kwd) (cons N43a8@kwd N438c@kwd*) N438c@kwd*))) (let ((N43b0@t N43aa@type)) (if (memv N43b0@t '(define)) (call-with-values (lambda () (N309f@parse-define N439a@e)) (lambda (N43b6@N43b3 N43b7@N43b5) (let ((N43ba@rhs N43b7@N43b5) (N43bb@id N43b6@N43b3)) (begin (if (N2f22@bound-id-member? N43bb@id N43ae@kwd*) (N3201@syntax-violation '#f '"cannot redefine keyword" N439a@e) (void)) (call-with-values (lambda () (N2ea6@gen-define-label+loc N43bb@id N438e@rib)) (lambda (N43c2@N43bf N43c3@N43c1) (let ((N43c6@lex N43c3@N43c1) (N43c7@lab N43c2@N43bf)) (begin (N2ecc@extend-rib! N438e@rib N43bb@id N43c7@lab) (N3179@chi-body* (cdr N4386@e*) (N30ad@add-lexical N43c7@lab N43c6@lex N4387@r) N4388@mr (cons N43c6@lex N4389@lex*) (cons N43ba@rhs N438a@rhs*) N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?))))))))) (if (memv N43b0@t '(define-syntax)) (call-with-values (lambda () (N30a1@parse-define-syntax N439a@e)) (lambda (N43ce@N43cb N43cf@N43cd) (let ((N43d2@rhs N43cf@N43cd) (N43d3@id N43ce@N43cb)) (begin (if (N2f22@bound-id-member? N43d3@id N43ae@kwd*) (N3201@syntax-violation '#f '"cannot redefine keyword" N439a@e) (void)) (let ((N43d6@lab (N2ea8@gen-define-label N43d3@id N438e@rib)) (N43d7@expanded-rhs (N317b@expand-transformer N43d2@rhs N4388@mr))) (begin (N2ecc@extend-rib! N438e@rib N43d3@id N43d6@lab) (let ((N43da@b (N2f4e@make-eval-transformer N43d7@expanded-rhs))) (N3179@chi-body* (cdr N4386@e*) (cons (cons N43d6@lab N43da@b) N4387@r) (cons (cons N43d6@lab N43da@b) N4388@mr) N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?)))))))) (if (memv N43b0@t '(let-syntax letrec-syntax)) (let ((N43dc@t N439a@e)) (let ((N43de@ls/false (N311d@syntax-dispatch N43dc@t '(_ #(each (any any)) . each-any)))) (if (and N43de@ls/false (apply (lambda (N43e0@xlhs* N43e1@xrhs* N43e2@xbody*) (if (not (N2f1e@valid-bound-ids? N43e0@xlhs*)) (N3201@syntax-violation '#f '"invalid identifiers" N439a@e) (void))) N43de@ls/false)) (apply (lambda (N43e6@xlhs* N43e7@xrhs* N43e8@xbody*) (let ((N43ec@xlab* (map N2ea2@gen-label N43e6@xlhs*))) (let ((N43ee@xrib (N2ed6@make-full-rib N43e6@xlhs* N43ec@xlab*))) (let ((N43f0@xb* (map (lambda (N43f2@x) (N2f4e@make-eval-transformer (N317b@expand-transformer (if (eq? N43aa@type 'let-syntax) N43f2@x (N2f02@add-subst N43ee@xrib N43f2@x)) N4388@mr))) N43e7@xrhs*))) (N3179@chi-body* (append (map (lambda (N43f4@x) (N2f02@add-subst N43ee@xrib N43f4@x)) N43e8@xbody*) (cdr N4386@e*)) (append (map cons N43ec@xlab* N43f0@xb*) N4387@r) (append (map cons N43ec@xlab* N43f0@xb*) N4388@mr) N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?))))) N43de@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N43dc@t)))) (if (memv N43b0@t '(begin)) (let ((N43f6@t N439a@e)) (let ((N43f8@ls/false (N311d@syntax-dispatch N43f6@t '(_ . each-any)))) (if N43f8@ls/false (apply (lambda (N43fa@x*) (N3179@chi-body* (append N43fa@x* (cdr N4386@e*)) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?)) N43f8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N43f6@t)))) (if (memv N43b0@t '(global-macro global-macro!)) (N3177@chi-body*-macro (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top? (N3139@chi-global-macro N43a9@value N439a@e)) (if (memv N43b0@t '(local-macro local-macro!)) (N3177@chi-body*-macro (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top? (N3137@chi-local-macro N43a9@value N439a@e)) (if (memv N43b0@t '(macro macro!)) (N3177@chi-body*-macro (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top? (N3135@chi-macro N43a9@value N439a@e)) (if (memv N43b0@t '(module)) (call-with-values (lambda () (N3173@chi-internal-module N439a@e N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd*)) (lambda (N440c@N43fd N440d@N43ff N440e@N4401 N440f@N4403 N4410@N4405 N4411@N4407 N4412@N4409 N4413@N440b) (let ((N441c@kwd* N4413@N440b) (N441d@mod** N4412@N4409) (N441e@mr N4411@N4407) (N441f@r N4410@N4405) (N4420@m-exp-lab* N440f@N4403) (N4421@m-exp-id* N440e@N4401) (N4422@rhs* N440d@N43ff) (N4423@lex* N440c@N43fd)) (begin (vector-for-each (lambda (N442c@id N442d@lab) (N2ecc@extend-rib! N438e@rib N442c@id N442d@lab)) N4421@m-exp-id* N4420@m-exp-lab*) (N3179@chi-body* (cdr N4386@e*) N441f@r N441e@mr N4423@lex* N4422@rhs* N441d@mod** N441c@kwd* N438d@exp* N438e@rib N438f@top?))))) (if (memv N43b0@t '(library)) (begin (N31e3@library-expander (N2f2a@stx->datum N439a@e)) (N3179@chi-body* (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?)) (if (memv N43b0@t '(export)) (let ((N4430@t N439a@e)) (let ((N4432@ls/false (N311d@syntax-dispatch N4430@t '(_ . each-any)))) (if N4432@ls/false (apply (lambda (N4434@exp-decl*) (N3179@chi-body* (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* (append N4434@exp-decl* N438d@exp*) N438e@rib N438f@top?)) N4432@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4430@t)))) (if (memv N43b0@t '(import)) (letrec* ((N4437@module-import? (lambda (N448a@e) (let ((N448c@t N448a@e)) (let ((N448e@ls/false (N311d@syntax-dispatch N448c@t '(_ any)))) (if (and N448e@ls/false (apply (lambda (N4490@id) (N2f16@id? N4490@id)) N448e@ls/false)) (apply (lambda (N4492@id) '#t) N448e@ls/false) (let ((N4494@t N448c@t)) (let ((N4496@ls/false (N311d@syntax-dispatch N4494@t '(_ . each-any)))) (if N4496@ls/false (apply (lambda (N4498@imp*) '#f) N4496@ls/false) (let ((N449a@t N4494@t)) (let ((N449c@ls/false (N311d@syntax-dispatch N449a@t '_))) (if N449c@ls/false (apply (lambda () (N3201@syntax-violation '#f '"malformed import form" N448a@e)) N449c@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N449a@t)))))))))))) (N4439@module-import (lambda (N4468@e N4469@r) (let ((N446c@t N4468@e)) (let ((N446e@ls/false (N311d@syntax-dispatch N446c@t '(_ any)))) (if (and N446e@ls/false (apply (lambda (N4470@id) (N2f16@id? N4470@id)) N446e@ls/false)) (apply (lambda (N4472@id) (call-with-values (lambda () (N2f38@syntax-type N4472@id N4469@r)) (lambda (N447a@N4475 N447b@N4477 N447c@N4479) (let ((N4480@kwd N447c@N4479) (N4481@value N447b@N4477) (N4482@type N447a@N4475)) (let ((N4486@t N4482@type)) (if (memv N4486@t '($module)) (let ((N4488@iface N4481@value)) (values (N3171@module-interface-exp-id* N4488@iface N4472@id) (N316b@module-interface-exp-lab-vec N4488@iface))) (N3201@syntax-violation '#f '"invalid import" N4468@e))))))) N446e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N446c@t)))))) (N443b@library-import (lambda (N444c@e) (let ((N444e@t N444c@e)) (let ((N4450@ls/false (N311d@syntax-dispatch N444e@t '(any . each-any)))) (if N4450@ls/false (apply (lambda (N4452@ctxt N4453@imp*) (call-with-values (lambda () (N3183@parse-import-spec* (N3207@syntax->datum N4453@imp*))) (lambda (N445a@N4457 N445b@N4459) (let ((N445e@subst-labels N445b@N4459) (N445f@subst-names N445a@N4457)) (values (vector-map (lambda (N4462@name) (N2ef6@datum->stx N4452@ctxt N4462@name)) N445f@subst-names) N445e@subst-labels))))) N4450@ls/false) (let ((N4464@t N444e@t)) (let ((N4466@ls/false (N311d@syntax-dispatch N4464@t '_))) (if N4466@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid import form" N444c@e)) N4466@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4464@t)))))))))) (begin (call-with-values (lambda () (if (N4437@module-import? N439a@e) (N4439@module-import N439a@e N4387@r) (N443b@library-import N439a@e))) (lambda (N4440@N443d N4441@N443f) (let ((N4444@lab* N4441@N443f) (N4445@id* N4440@N443d)) (vector-for-each (lambda (N4448@id N4449@lab) (N2ecc@extend-rib! N438e@rib N4448@id N4449@lab)) N4445@id* N4444@lab*)))) (N3179@chi-body* (cdr N4386@e*) N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?))) (if N438f@top? (N3179@chi-body* (cdr N4386@e*) N4387@r N4388@mr (cons (N2e9e@gen-lexical 'dummy) N4389@lex*) (cons (cons 'top-expr N439a@e) N438a@rhs*) N438b@mod** N43ae@kwd* N438d@exp* N438e@rib N438f@top?) (values N4386@e* N4387@r N4388@mr N4389@lex* N438a@rhs* N438b@mod** N43ae@kwd* N438d@exp*)))))))))))))))))))))) (set! N4c75@N3179@chi-body* N3179@chi-body*) (set! N317b@expand-transformer (lambda (N449e@expr N449f@r) (let ((N44a2@rtc (N3187@make-collector))) (let ((N44a4@expanded-rhs (let ((N44ae@N44a7 N3189@inv-collector) (N44af@N44a9 N318b@vis-collector) (N44b0@N44ab N44a2@rtc) (N44b1@N44ad (lambda (N44b6@x) (values)))) (let ((N44b8@swap (lambda () (begin (let ((N44ba@t (N44ae@N44a7))) (begin (N44ae@N44a7 N44b0@N44ab) (set! N44b0@N44ab N44ba@t))) (let ((N44bc@t (N44af@N44a9))) (begin (N44af@N44a9 N44b1@N44ad) (set! N44b1@N44ad N44bc@t))))))) (dynamic-wind N44b8@swap (lambda () (N313f@chi-expr N449e@expr N449f@r N449f@r)) N44b8@swap))))) (begin (for-each (let ((N44be@mark-visit (N318b@vis-collector))) (lambda (N44c0@x) (begin (N2d32@N2b80@invoke-library N44c0@x) (N44be@mark-visit N44c0@x)))) (N44a2@rtc)) N44a4@expanded-rhs))))) (set! N4c76@N317b@expand-transformer N317b@expand-transformer) (set! N317d@parse-exports (lambda (N44c2@exp*) (let N44ca@f ((N44c4@exp* N44c2@exp*) (N44c5@int* '()) (N44c6@ext* '())) (if (null? N44c4@exp*) (begin (if (not (N2f1e@valid-bound-ids? N44c6@ext*)) (N3201@syntax-violation 'export '"invalid exports" (N3153@find-dups N44c6@ext*)) (void)) (values (map N3207@syntax->datum N44c6@ext*) N44c5@int*)) (let ((N44cc@t (car N44c4@exp*))) (let ((N44ce@ls/false (N311d@syntax-dispatch N44cc@t '(any . #(each (any any)))))) (if N44ce@ls/false (apply (lambda (N44d0@rename N44d1@i* N44d2@e*) (begin (if (not (and (eq? (N3207@syntax->datum N44d0@rename) 'rename) (for-all N2f16@id? N44d1@i*) (for-all N2f16@id? N44d2@e*))) (N3201@syntax-violation 'export '"invalid export specifier" (car N44c4@exp*)) (void)) (N44ca@f (cdr N44c4@exp*) (append N44d1@i* N44c5@int*) (append N44d2@e* N44c6@ext*)))) N44ce@ls/false) (let ((N44d6@t N44cc@t)) (let ((N44d8@ls/false (N311d@syntax-dispatch N44d6@t 'any))) (if N44d8@ls/false (apply (lambda (N44da@ie) (begin (if (not (N2f16@id? N44da@ie)) (N3201@syntax-violation 'export '"invalid export" N44da@ie) (void)) (N44ca@f (cdr N44c4@exp*) (cons N44da@ie N44c5@int*) (cons N44da@ie N44c6@ext*)))) N44d8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N44d6@t))))))))))) (set! N4c77@N317d@parse-exports N317d@parse-exports) (set! N317f@parse-library-name (lambda (N44dc@spec) (letrec* ((N44df@parse (lambda (N44ec@x) (let ((N44ee@t N44ec@x)) (let ((N44f0@ls/false (N311d@syntax-dispatch N44ee@t '(each-any)))) (if (and N44f0@ls/false (apply (lambda (N44f2@v*) (for-all (lambda (N44f4@x) (let ((N44f6@x (N3207@syntax->datum N44f4@x))) (and (integer? N44f6@x) (exact? N44f6@x)))) N44f2@v*)) N44f0@ls/false)) (apply (lambda (N44f8@v*) (values '() (map N3207@syntax->datum N44f8@v*))) N44f0@ls/false) (let ((N44fa@t N44ee@t)) (let ((N44fc@ls/false (N311d@syntax-dispatch N44fa@t '(any . any)))) (if (and N44fc@ls/false (apply (lambda (N44fe@x N44ff@rest) (symbol? (N3207@syntax->datum N44fe@x))) N44fc@ls/false)) (apply (lambda (N4502@x N4503@rest) (call-with-values (lambda () (N44df@parse N4503@rest)) (lambda (N450a@N4507 N450b@N4509) (let ((N450e@v* N450b@N4509) (N450f@x* N450a@N4507)) (values (cons (N3207@syntax->datum N4502@x) N450f@x*) N450e@v*))))) N44fc@ls/false) (let ((N4512@t N44fa@t)) (let ((N4514@ls/false (N311d@syntax-dispatch N4512@t '()))) (if N4514@ls/false (apply (lambda () (values '() '())) N4514@ls/false) (let ((N4516@t N4512@t)) (let ((N4518@ls/false (N311d@syntax-dispatch N4516@t '_))) (if N4518@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid library name" N44dc@spec)) N4518@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4516@t)))))))))))))))) (call-with-values (lambda () (N44df@parse N44dc@spec)) (lambda (N44e4@N44e1 N44e5@N44e3) (let ((N44e8@ver* N44e5@N44e3) (N44e9@name* N44e4@N44e1)) (begin (if (null? N44e9@name*) (N3201@syntax-violation '#f '"empty library name" N44dc@spec) (void)) (values N44e9@name* N44e8@ver*)))))))) (set! N4c78@N317f@parse-library-name N317f@parse-library-name) (set! N3181@parse-library (lambda (N451a@e) (let ((N451c@t N451a@e)) (let ((N451e@ls/false (N311d@syntax-dispatch N451c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and N451e@ls/false (apply (lambda (N4520@library N4521@name* N4522@export N4523@exp* N4524@import N4525@imp* N4526@b*) (and (eq? (N3207@syntax->datum N4522@export) 'export) (eq? (N3207@syntax->datum N4524@import) 'import) (eq? (N3207@syntax->datum N4520@library) 'library))) N451e@ls/false)) (apply (lambda (N452e@library N452f@name* N4530@export N4531@exp* N4532@import N4533@imp* N4534@b*) (values N452f@name* N4531@exp* N4533@imp* N4534@b*)) N451e@ls/false) (let ((N453c@t N451c@t)) (let ((N453e@ls/false (N311d@syntax-dispatch N453c@t '_))) (if N453e@ls/false (apply (lambda () (N3201@syntax-violation '#f '"malformed library" N451a@e)) N453e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N453c@t))))))))) (set! N4c79@N3181@parse-library N3181@parse-library) (set! N3183@parse-import-spec* (letrec* ((N4541@idsyn? (lambda (N474a@x) (symbol? (N3207@syntax->datum N474a@x)))) (N4543@dup-error (lambda (N4748@name) (N3201@syntax-violation 'import '"two imports with different bindings" N4748@name))) (N4545@merge-substs (lambda (N4736@s N4737@subst) (letrec* ((N473b@insert-to-subst (lambda (N473c@a N473d@subst) (let ((N4740@name (car N473c@a)) (N4741@label (cdr N473c@a))) (let ((N4744@t (assq N4740@name N473d@subst))) (if N4744@t ((lambda (N4746@x) (if (eq? (cdr N4746@x) N4741@label) N473d@subst (N4543@dup-error N4740@name))) N4744@t) (cons N473c@a N473d@subst))))))) (if (null? N4736@s) N4737@subst (N473b@insert-to-subst (car N4736@s) (N4545@merge-substs (cdr N4736@s) N4737@subst)))))) (N4547@exclude* (lambda (N4706@sym* N4707@subst) (letrec* ((N470b@exclude (lambda (N4724@sym N4725@subst) (if (null? N4725@subst) (N3201@syntax-violation 'import '"cannot rename unbound identifier" N4724@sym) (if (eq? N4724@sym (caar N4725@subst)) (values (cdar N4725@subst) (cdr N4725@subst)) (let ((N4728@a (car N4725@subst))) (call-with-values (lambda () (N470b@exclude N4724@sym (cdr N4725@subst))) (lambda (N472e@N472b N472f@N472d) (let ((N4732@subst N472f@N472d) (N4733@old N472e@N472b)) (values N4733@old (cons N4728@a N4732@subst))))))))))) (if (null? N4706@sym*) (values '() N4707@subst) (call-with-values (lambda () (N470b@exclude (car N4706@sym*) N4707@subst)) (lambda (N4710@N470d N4711@N470f) (let ((N4714@subst N4711@N470f) (N4715@old N4710@N470d)) (call-with-values (lambda () (N4547@exclude* (cdr N4706@sym*) N4714@subst)) (lambda (N471c@N4719 N471d@N471b) (let ((N4720@subst N471d@N471b) (N4721@old* N471c@N4719)) (values (cons N4715@old N4721@old*) N4720@subst))))))))))) (N4549@find* (lambda (N46fe@sym* N46ff@subst) (map (lambda (N4702@x) (let ((N4704@t (assq N4702@x N46ff@subst))) (if N4704@t (cdr N4704@t) (N3201@syntax-violation 'import '"cannot find identifier" N4702@x)))) N46fe@sym*))) (N454b@rem* (lambda (N46f6@sym* N46f7@subst) (let N46fc@f ((N46fa@subst N46f7@subst)) (if (null? N46fa@subst) '() (if (memq (caar N46fa@subst) N46f6@sym*) (N46fc@f (cdr N46fa@subst)) (cons (car N46fa@subst) (N46fc@f (cdr N46fa@subst)))))))) (N454d@remove-dups (lambda (N46f4@ls) (if (null? N46f4@ls) '() (if (memq (car N46f4@ls) (cdr N46f4@ls)) (N454d@remove-dups (cdr N46f4@ls)) (cons (car N46f4@ls) (N454d@remove-dups (cdr N46f4@ls))))))) (N454f@parse-library-name (lambda (N460c@spec) (letrec* ((N460f@subversion? (lambda (N46f0@x) (let ((N46f2@x (N3207@syntax->datum N46f0@x))) (and (integer? N46f2@x) (exact? N46f2@x) (>= N46f2@x '0))))) (N4611@subversion-pred (lambda (N4690@x*) (let ((N4692@t N4690@x*)) (let ((N4694@ls/false (N311d@syntax-dispatch N4692@t 'any))) (if (and N4694@ls/false (apply (lambda (N4696@n) (N460f@subversion? N4696@n)) N4694@ls/false)) (apply (lambda (N4698@n) (lambda (N469a@x) (= N469a@x (N3207@syntax->datum N4698@n)))) N4694@ls/false) (let ((N469c@t N4692@t)) (let ((N469e@ls/false (N311d@syntax-dispatch N469c@t '(any . each-any)))) (if (and N469e@ls/false (apply (lambda (N46a0@p? N46a1@sub*) (eq? (N3207@syntax->datum N46a0@p?) 'and)) N469e@ls/false)) (apply (lambda (N46a4@p? N46a5@sub*) (let ((N46a8@p* (map N4611@subversion-pred N46a5@sub*))) (lambda (N46aa@x) (for-all (lambda (N46ac@p) (N46ac@p N46aa@x)) N46a8@p*)))) N469e@ls/false) (let ((N46ae@t N469c@t)) (let ((N46b0@ls/false (N311d@syntax-dispatch N46ae@t '(any . each-any)))) (if (and N46b0@ls/false (apply (lambda (N46b2@p? N46b3@sub*) (eq? (N3207@syntax->datum N46b2@p?) 'or)) N46b0@ls/false)) (apply (lambda (N46b6@p? N46b7@sub*) (let ((N46ba@p* (map N4611@subversion-pred N46b7@sub*))) (lambda (N46bc@x) (exists (lambda (N46be@p) (N46be@p N46bc@x)) N46ba@p*)))) N46b0@ls/false) (let ((N46c0@t N46ae@t)) (let ((N46c2@ls/false (N311d@syntax-dispatch N46c0@t '(any any)))) (if (and N46c2@ls/false (apply (lambda (N46c4@p? N46c5@sub) (eq? (N3207@syntax->datum N46c4@p?) 'not)) N46c2@ls/false)) (apply (lambda (N46c8@p? N46c9@sub) (let ((N46cc@p (N4611@subversion-pred N46c9@sub))) (lambda (N46ce@x) (not (N46cc@p N46ce@x))))) N46c2@ls/false) (let ((N46d0@t N46c0@t)) (let ((N46d2@ls/false (N311d@syntax-dispatch N46d0@t '(any any)))) (if (and N46d2@ls/false (apply (lambda (N46d4@p? N46d5@n) (and (eq? (N3207@syntax->datum N46d4@p?) '<=) (N460f@subversion? N46d5@n))) N46d2@ls/false)) (apply (lambda (N46d8@p? N46d9@n) (lambda (N46dc@x) (<= N46dc@x (N3207@syntax->datum N46d9@n)))) N46d2@ls/false) (let ((N46de@t N46d0@t)) (let ((N46e0@ls/false (N311d@syntax-dispatch N46de@t '(any any)))) (if (and N46e0@ls/false (apply (lambda (N46e2@p? N46e3@n) (and (eq? (N3207@syntax->datum N46e2@p?) '>=) (N460f@subversion? N46e3@n))) N46e0@ls/false)) (apply (lambda (N46e6@p? N46e7@n) (lambda (N46ea@x) (>= N46ea@x (N3207@syntax->datum N46e7@n)))) N46e0@ls/false) (let ((N46ec@t N46de@t)) (let ((N46ee@ls/false (N311d@syntax-dispatch N46ec@t '_))) (if N46ee@ls/false (apply (lambda () (N3201@syntax-violation 'import '"invalid sub-version spec" N460c@spec N4690@x*)) N46ee@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N46ec@t)))))))))))))))))))))))) (N4613@version-pred (lambda (N4640@x*) (let ((N4642@t N4640@x*)) (let ((N4644@ls/false (N311d@syntax-dispatch N4642@t '()))) (if N4644@ls/false (apply (lambda () (lambda (N4646@x) '#t)) N4644@ls/false) (let ((N4648@t N4642@t)) (let ((N464a@ls/false (N311d@syntax-dispatch N4648@t '(any . each-any)))) (if (and N464a@ls/false (apply (lambda (N464c@c N464d@ver*) (eq? (N3207@syntax->datum N464c@c) 'and)) N464a@ls/false)) (apply (lambda (N4650@c N4651@ver*) (let ((N4654@p* (map N4613@version-pred N4651@ver*))) (lambda (N4656@x) (for-all (lambda (N4658@p) (N4658@p N4656@x)) N4654@p*)))) N464a@ls/false) (let ((N465a@t N4648@t)) (let ((N465c@ls/false (N311d@syntax-dispatch N465a@t '(any . each-any)))) (if (and N465c@ls/false (apply (lambda (N465e@c N465f@ver*) (eq? (N3207@syntax->datum N465e@c) 'or)) N465c@ls/false)) (apply (lambda (N4662@c N4663@ver*) (let ((N4666@p* (map N4613@version-pred N4663@ver*))) (lambda (N4668@x) (exists (lambda (N466a@p) (N466a@p N4668@x)) N4666@p*)))) N465c@ls/false) (let ((N466c@t N465a@t)) (let ((N466e@ls/false (N311d@syntax-dispatch N466c@t '(any any)))) (if (and N466e@ls/false (apply (lambda (N4670@c N4671@ver) (eq? (N3207@syntax->datum N4670@c) 'not)) N466e@ls/false)) (apply (lambda (N4674@c N4675@ver) (let ((N4678@p (N4613@version-pred N4675@ver))) (lambda (N467a@x) (not (N4678@p N467a@x))))) N466e@ls/false) (let ((N467c@t N466c@t)) (let ((N467e@ls/false (N311d@syntax-dispatch N467c@t 'each-any))) (if N467e@ls/false (apply (lambda (N4680@sub*) (let ((N4682@p* (map N4611@subversion-pred N4680@sub*))) (lambda (N4684@x) (let N468a@f ((N4686@p* N4682@p*) (N4687@x N4684@x)) (if (null? N4686@p*) '#t (if (null? N4687@x) '#f (and ((car N4686@p*) (car N4687@x)) (N468a@f (cdr N4686@p*) (cdr N4687@x))))))))) N467e@ls/false) (let ((N468c@t N467c@t)) (let ((N468e@ls/false (N311d@syntax-dispatch N468c@t '_))) (if N468e@ls/false (apply (lambda () (N3201@syntax-violation 'import '"invalid version spec" N460c@spec N4640@x*)) N468e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N468c@t)))))))))))))))))))))) (let N4616@f ((N4614@x N460c@spec)) (let ((N4618@t N4614@x)) (let ((N461a@ls/false (N311d@syntax-dispatch N4618@t '(each-any)))) (if N461a@ls/false (apply (lambda (N461c@version-spec*) (values '() (N4613@version-pred N461c@version-spec*))) N461a@ls/false) (let ((N461e@t N4618@t)) (let ((N4620@ls/false (N311d@syntax-dispatch N461e@t '(any . any)))) (if (and N4620@ls/false (apply (lambda (N4622@x N4623@x*) (N4541@idsyn? N4622@x)) N4620@ls/false)) (apply (lambda (N4626@x N4627@x*) (call-with-values (lambda () (N4616@f N4627@x*)) (lambda (N462e@N462b N462f@N462d) (let ((N4632@pred N462f@N462d) (N4633@name N462e@N462b)) (values (cons (N3207@syntax->datum N4626@x) N4633@name) N4632@pred))))) N4620@ls/false) (let ((N4636@t N461e@t)) (let ((N4638@ls/false (N311d@syntax-dispatch N4636@t '()))) (if N4638@ls/false (apply (lambda () (values '() (lambda (N463a@x) '#t))) N4638@ls/false) (let ((N463c@t N4636@t)) (let ((N463e@ls/false (N311d@syntax-dispatch N463c@t '_))) (if N463e@ls/false (apply (lambda () (N3201@syntax-violation '#f '"invalid import spec" N460c@spec)) N463e@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N463c@t))))))))))))))))) (N4551@import-library (lambda (N45fc@spec*) (call-with-values (lambda () (N454f@parse-library-name N45fc@spec*)) (lambda (N4602@N45ff N4603@N4601) (let ((N4606@pred N4603@N4601) (N4607@name N4602@N45ff)) (begin (if (null? N4607@name) (N3201@syntax-violation 'import '"empty library name" N45fc@spec*) (void)) (let ((N460a@lib (N2d2b@N2b72@find-library-by-name N4607@name))) (begin (if (not N460a@lib) (N3201@syntax-violation 'import '"cannot find library with required name" N4607@name) (void)) (if (not (N4606@pred (N2d05@N2b26@library-version N460a@lib))) (N3201@syntax-violation 'import '"library does not satisfy version specification" N45fc@spec* N460a@lib) (void)) ((N318d@imp-collector) N460a@lib) (N2d0d@N2b36@library-subst N460a@lib))))))))) (N4553@get-import (lambda (N456e@spec) (let ((N4570@t N456e@spec)) (let ((N4572@ls/false (N311d@syntax-dispatch N4570@t '(any . each-any)))) (if (and N4572@ls/false (apply (lambda (N4574@x N4575@x*) (not (memq (N3207@syntax->datum N4574@x) '(for rename except only prefix library)))) N4572@ls/false)) (apply (lambda (N4578@x N4579@x*) (N4551@import-library (cons N4578@x N4579@x*))) N4572@ls/false) (let ((N457c@t N4570@t)) (let ((N457e@ls/false (N311d@syntax-dispatch N457c@t '(any any . #(each (any any)))))) (if (and N457e@ls/false (apply (lambda (N4580@rename N4581@isp N4582@old* N4583@new*) (and (eq? (N3207@syntax->datum N4580@rename) 'rename) (for-all N4541@idsyn? N4582@old*) (for-all N4541@idsyn? N4583@new*))) N457e@ls/false)) (apply (lambda (N4588@rename N4589@isp N458a@old* N458b@new*) (let ((N4590@subst (N4553@get-import N4589@isp)) (N4591@old* (map N3207@syntax->datum N458a@old*)) (N4592@new* (map N3207@syntax->datum N458b@new*))) (let ((N4596@old-label* (N4549@find* N4591@old* N4590@subst))) (let ((N4598@subst (N454b@rem* N4591@old* N4590@subst))) (N4545@merge-substs (map cons N4592@new* N4596@old-label*) N4598@subst))))) N457e@ls/false) (let ((N459a@t N457c@t)) (let ((N459c@ls/false (N311d@syntax-dispatch N459a@t '(any any . each-any)))) (if (and N459c@ls/false (apply (lambda (N459e@except N459f@isp N45a0@sym*) (and (eq? (N3207@syntax->datum N459e@except) 'except) (for-all N4541@idsyn? N45a0@sym*))) N459c@ls/false)) (apply (lambda (N45a4@except N45a5@isp N45a6@sym*) (let ((N45aa@subst (N4553@get-import N45a5@isp))) (N454b@rem* (map N3207@syntax->datum N45a6@sym*) N45aa@subst))) N459c@ls/false) (let ((N45ac@t N459a@t)) (let ((N45ae@ls/false (N311d@syntax-dispatch N45ac@t '(any any . each-any)))) (if (and N45ae@ls/false (apply (lambda (N45b0@only N45b1@isp N45b2@sym*) (and (eq? (N3207@syntax->datum N45b0@only) 'only) (for-all N4541@idsyn? N45b2@sym*))) N45ae@ls/false)) (apply (lambda (N45b6@only N45b7@isp N45b8@sym*) (let ((N45bc@subst (N4553@get-import N45b7@isp)) (N45bd@sym* (map N3207@syntax->datum N45b8@sym*))) (let ((N45c0@sym* (N454d@remove-dups N45bd@sym*))) (let ((N45c2@lab* (N4549@find* N45c0@sym* N45bc@subst))) (map cons N45c0@sym* N45c2@lab*))))) N45ae@ls/false) (let ((N45c4@t N45ac@t)) (let ((N45c6@ls/false (N311d@syntax-dispatch N45c4@t '(any any any)))) (if (and N45c6@ls/false (apply (lambda (N45c8@prefix N45c9@isp N45ca@p) (and (eq? (N3207@syntax->datum N45c8@prefix) 'prefix) (N4541@idsyn? N45ca@p))) N45c6@ls/false)) (apply (lambda (N45ce@prefix N45cf@isp N45d0@p) (let ((N45d4@subst (N4553@get-import N45cf@isp)) (N45d5@prefix (symbol->string (N3207@syntax->datum N45d0@p)))) (map (lambda (N45d8@x) (cons (string->symbol (string-append N45d5@prefix (symbol->string (car N45d8@x)))) (cdr N45d8@x))) N45d4@subst))) N45c6@ls/false) (let ((N45da@t N45c4@t)) (let ((N45dc@ls/false (N311d@syntax-dispatch N45da@t '(any each-any)))) (if (and N45dc@ls/false (apply (lambda (N45de@library N45df@spec*) (eq? (N3207@syntax->datum N45de@library) 'library)) N45dc@ls/false)) (apply (lambda (N45e2@library N45e3@spec*) (N4551@import-library N45e3@spec*)) N45dc@ls/false) (let ((N45e6@t N45da@t)) (let ((N45e8@ls/false (N311d@syntax-dispatch N45e6@t '(any any . any)))) (if (and N45e8@ls/false (apply (lambda (N45ea@for N45eb@isp N45ec@rest) (eq? (N3207@syntax->datum N45ea@for) 'for)) N45e8@ls/false)) (apply (lambda (N45f0@for N45f1@isp N45f2@rest) (N4553@get-import N45f1@isp)) N45e8@ls/false) (let ((N45f6@t N45e6@t)) (let ((N45f8@ls/false (N311d@syntax-dispatch N45f6@t 'any))) (if N45f8@ls/false (apply (lambda (N45fa@spec) (N3201@syntax-violation 'import '"invalid import spec" N45fa@spec)) N45f8@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N45f6@t))))))))))))))))))))))))))) (N4555@add-imports! (lambda (N455e@imp N455f@h) (let ((N4562@subst (N4553@get-import N455e@imp))) (for-each (lambda (N4564@x) (let ((N4566@name (car N4564@x)) (N4567@label (cdr N4564@x))) (let ((N456a@t (hashtable-ref N455f@h N4566@name '#f))) (if N456a@t ((lambda (N456c@l) (if (not (eq? N456c@l N4567@label)) (N4543@dup-error N4566@name) (void))) N456a@t) (hashtable-set! N455f@h N4566@name N4567@label))))) N4562@subst))))) (lambda (N4556@imp*) (let N455c@f ((N4558@imp* N4556@imp*) (N4559@h (make-eq-hashtable))) (if (null? N4558@imp*) (hashtable-entries N4559@h) (begin (N4555@add-imports! (car N4558@imp*) N4559@h) (N455c@f (cdr N4558@imp*) N4559@h))))))) (set! N4c7a@N3183@parse-import-spec* N3183@parse-import-spec*) (set! N3185@make-top-rib (lambda (N474c@names N474d@labels) (let ((N4750@rib (N2eca@make-empty-rib))) (begin (vector-for-each (lambda (N4752@name N4753@label) (begin (if (not (symbol? N4752@name)) (error 'make-top-rib '"BUG: not a symbol" N4752@name) (void)) (N2ece@extend-rib/nc! N4750@rib (make-simple-struct 'stx '5 (list N4752@name N2e9a@top-mark* '() '())) N4753@label))) N474c@names N474d@labels) N4750@rib)))) (set! N4c7b@N3185@make-top-rib N3185@make-top-rib) (set! N3187@make-collector (lambda () (let ((N4756@ls '())) (lambda N475a (let ((N475b (length N475a))) (if (= N475b '0) (apply (lambda () N4756@ls) N475a) (if (= N475b '1) (apply (lambda (N4758@x) (set! N4756@ls (N2e93@set-cons N4758@x N4756@ls))) N475a) (error 'apply '"invalid arg count")))))))) (set! N4c7c@N3187@make-collector N3187@make-collector) (set! N3189@inv-collector (N2a66@N2944@make-parameter (lambda N475c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (N475e@x) (begin (if (not (procedure? N475e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" N475e@x) (void)) N475e@x)))) (set! N4c7d@N3189@inv-collector N3189@inv-collector) (set! N318b@vis-collector (N2a66@N2944@make-parameter (lambda N4760@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (N4762@x) (begin (if (not (procedure? N4762@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" N4762@x) (void)) N4762@x)))) (set! N4c7e@N318b@vis-collector N318b@vis-collector) (set! N318d@imp-collector (N2a66@N2944@make-parameter (lambda N4764@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (N4766@x) (begin (if (not (procedure? N4766@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" N4766@x) (void)) N4766@x)))) (set! N4c7f@N318d@imp-collector N318d@imp-collector) (set! N318f@chi-library-internal (lambda (N4768@e* N4769@rib N476a@top?) (call-with-values (lambda () (N3179@chi-body* N4768@e* '() '() '() '() '() '() '() N4769@rib N476a@top?)) (lambda (N477e@N476f N477f@N4771 N4780@N4773 N4781@N4775 N4782@N4777 N4783@N4779 N4784@N477b N4785@N477d) (let ((N478e@exp* N4785@N477d) (N478f@_kwd* N4784@N477b) (N4790@mod** N4783@N4779) (N4791@rhs* N4782@N4777) (N4792@lex* N4781@N4775) (N4793@mr N4780@N4773) (N4794@r N477f@N4771) (N4795@e* N477e@N476f)) (values (append (apply append (reverse N4790@mod**)) N4795@e*) N4794@r N4793@mr (reverse N4792@lex*) (reverse N4791@rhs*) N478e@exp*)))))) (set! N4c80@N318f@chi-library-internal N318f@chi-library-internal) (set! N3191@chi-interaction-expr (lambda (N479e@e N479f@rib N47a0@r) (call-with-values (lambda () (N3179@chi-body* (list N479e@e) N47a0@r N47a0@r '() '() '() '() '() N479f@rib '#t)) (lambda (N47b4@N47a5 N47b5@N47a7 N47b6@N47a9 N47b7@N47ab N47b8@N47ad N47b9@N47af N47ba@N47b1 N47bb@N47b3) (let ((N47c4@_exp* N47bb@N47b3) (N47c5@_kwd* N47ba@N47b1) (N47c6@mod** N47b9@N47af) (N47c7@rhs* N47b8@N47ad) (N47c8@lex* N47b7@N47ab) (N47c9@mr N47b6@N47a9) (N47ca@r N47b5@N47a7) (N47cb@e* N47b4@N47a5)) (let ((N47d4@e* (N314d@expand-interaction-rhs*/init* (reverse N47c8@lex*) (reverse N47c7@rhs*) (append (apply append (reverse N47c6@mod**)) N47cb@e*) N47ca@r N47c9@mr))) (let ((N47d6@e (if (null? N47d4@e*) (N2e7c@N2ddd@build-void) (if (null? (cdr N47d4@e*)) (car N47d4@e*) (N2e7b@N2ddb@build-sequence '#f N47d4@e*))))) (values N47d6@e N47ca@r)))))))) (set! N4c81@N3191@chi-interaction-expr N3191@chi-interaction-expr) (set! N3193@library-body-expander (lambda (N47d8@name N47d9@main-exp* N47da@imp* N47db@b* N47dc@top?) (letrec* ((N47e3@itc (N3187@make-collector))) (let ((N47ec@N47e5 N318d@imp-collector) (N47ed@N47e7 N3211@top-level-context) (N47ee@N47e9 N47e3@itc) (N47ef@N47eb '#f)) (let ((N47f4@swap (lambda () (begin (let ((N47f6@t (N47ec@N47e5))) (begin (N47ec@N47e5 N47ee@N47e9) (set! N47ee@N47e9 N47f6@t))) (let ((N47f8@t (N47ed@N47e7))) (begin (N47ed@N47e7 N47ef@N47eb) (set! N47ef@N47eb N47f8@t))))))) (dynamic-wind N47f4@swap (lambda () (call-with-values (lambda () (N3183@parse-import-spec* N47da@imp*)) (lambda (N47fe@N47fb N47ff@N47fd) (let ((N4802@subst-labels N47ff@N47fd) (N4803@subst-names N47fe@N47fb)) (let ((N4806@rib (N3185@make-top-rib N4803@subst-names N4802@subst-labels))) (letrec* ((N4809@wrap (lambda (N4884@x) (make-simple-struct 'stx '5 (list N4884@x N2e9a@top-mark* (list N4806@rib) '()))))) (let ((N480a@b* (map N4809@wrap N47db@b*)) (N480b@main-exp* (map N4809@wrap N47d9@main-exp*)) (N480c@rtc (N3187@make-collector)) (N480d@vtc (N3187@make-collector))) (let ((N481a@N4813 N3189@inv-collector) (N481b@N4815 N318b@vis-collector) (N481c@N4817 N480c@rtc) (N481d@N4819 N480d@vtc)) (let ((N4822@swap (lambda () (begin (let ((N4824@t (N481a@N4813))) (begin (N481a@N4813 N481c@N4817) (set! N481c@N4817 N4824@t))) (let ((N4826@t (N481b@N4815))) (begin (N481b@N4815 N481d@N4819) (set! N481d@N4819 N4826@t))))))) (dynamic-wind N4822@swap (lambda () (call-with-values (lambda () (N318f@chi-library-internal N480a@b* N4806@rib N47dc@top?)) (lambda (N4834@N4829 N4835@N482b N4836@N482d N4837@N482f N4838@N4831 N4839@N4833) (let ((N4840@internal-exp* N4839@N4833) (N4841@rhs* N4838@N4831) (N4842@lex* N4837@N482f) (N4843@mr N4836@N482d) (N4844@r N4835@N482b) (N4845@init* N4834@N4829)) (call-with-values (lambda () (N317d@parse-exports (append N480b@main-exp* N4840@internal-exp*))) (lambda (N4850@N484d N4851@N484f) (let ((N4854@exp-id* N4851@N484f) (N4855@exp-name* N4850@N484d)) (begin (N2ed2@seal-rib! N4806@rib) (let ((N4858@init* (N313b@chi-expr* N4845@init* N4844@r N4843@mr))) (let ((N485a@rhs* (N314f@chi-rhs* N4841@rhs* N4844@r N4843@mr))) (begin (N2ed4@unseal-rib! N4806@rib) (let ((N485c@loc* (map N2ea0@gen-global N4842@lex*)) (N485d@export-subst (N31eb@make-export-subst N4855@exp-name* N4854@exp-id*))) (letrec* ((N4861@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (N31ed@make-export-env/macros N4842@lex* N485c@loc* N4844@r)) (lambda (N4868@N4863 N4869@N4865 N486a@N4867) (let ((N486e@macro* N486a@N4867) (N486f@global* N4869@N4865) (N4870@export-env N4868@N4863)) (begin (for-each (lambda (N4874@s) (let ((N4876@name (car N4874@s)) (N4877@label (cdr N4874@s))) (let ((N487a@p (assq N4877@label N4870@export-env))) (if N487a@p (let ((N487c@b (cdr N487a@p))) (let ((N487e@type (car N487c@b))) (if (eq? N487e@type 'mutable) (N3201@syntax-violation 'export N4861@errstr N4876@name) (void)))) (void))))) N485d@export-subst) (let ((N4880@invoke-body (N2e81@N2de7@build-library-letrec* '#f N47d8@name N4842@lex* N485c@loc* N485a@rhs* (if (null? N4858@init*) (N2e7c@N2ddd@build-void) (N2e7b@N2ddb@build-sequence '#f N4858@init*)))) (N4881@invoke-definitions (map N2e78@N2d3a@build-global-define (map cdr N486f@global*)))) (values (N47e3@itc) (N480c@rtc) (N480d@vtc) (N2e7b@N2ddb@build-sequence '#f (append N4881@invoke-definitions (list N4880@invoke-body))) N486e@macro* N485d@export-subst N4870@export-env))))))))))))))))))) N4822@swap)))))))))) N47f4@swap)))))) (set! N4c82@N3193@library-body-expander N3193@library-body-expander) (set! N3195@core-library-expander (lambda (N4886@e N4887@verify-name) (call-with-values (lambda () (N3181@parse-library N4886@e)) (lambda (N4892@N488b N4893@N488d N4894@N488f N4895@N4891) (let ((N489a@b* N4895@N4891) (N489b@imp* N4894@N488f) (N489c@exp* N4893@N488d) (N489d@name* N4892@N488b)) (call-with-values (lambda () (N317f@parse-library-name N489d@name*)) (lambda (N48a6@N48a3 N48a7@N48a5) (let ((N48aa@ver N48a7@N48a5) (N48ab@name N48a6@N48a3)) (begin (N4887@verify-name N48ab@name) (call-with-values (lambda () (N3193@library-body-expander N48ab@name N489c@exp* N489b@imp* N489a@b* '#f)) (lambda (N48bc@N48af N48bd@N48b1 N48be@N48b3 N48bf@N48b5 N48c0@N48b7 N48c1@N48b9 N48c2@N48bb) (let ((N48ca@export-env N48c2@N48bb) (N48cb@export-subst N48c1@N48b9) (N48cc@visit-code N48c0@N48b7) (N48cd@invoke-code N48bf@N48b5) (N48ce@visit-req* N48be@N48b3) (N48cf@invoke-req* N48bd@N48b1) (N48d0@imp* N48bc@N48af)) (values N48ab@name N48aa@ver N48d0@imp* N48cf@invoke-req* N48ce@visit-req* N48cd@invoke-code N48cc@visit-code N48cb@export-subst N48ca@export-env))))))))))))) (set! N4c83@N3195@core-library-expander N3195@core-library-expander) (set! N3197@parse-top-level-program (lambda (N48d8@e*) (let ((N48da@t N48d8@e*)) (let ((N48dc@ls/false (N311d@syntax-dispatch N48da@t '((any . each-any) . each-any)))) (if (and N48dc@ls/false (apply (lambda (N48de@import N48df@imp* N48e0@b*) (eq? (N3207@syntax->datum N48de@import) 'import)) N48dc@ls/false)) (apply (lambda (N48e4@import N48e5@imp* N48e6@b*) (values N48e5@imp* N48e6@b*)) N48dc@ls/false) (let ((N48ea@t N48da@t)) (let ((N48ec@ls/false (N311d@syntax-dispatch N48ea@t '((any . any) . any)))) (if (and N48ec@ls/false (apply (lambda (N48ee@import N48ef@x N48f0@y) (eq? (N3207@syntax->datum N48ee@import) 'import)) N48ec@ls/false)) (apply (lambda (N48f4@import N48f5@x N48f6@y) (N3201@syntax-violation 'expander '"invalid syntax of top-level program" (N2f10@syntax-car N48d8@e*))) N48ec@ls/false) (let ((N48fa@t N48ea@t)) (let ((N48fc@ls/false (N311d@syntax-dispatch N48fa@t '_))) (if N48fc@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) N48fc@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N48fa@t)))))))))))) (set! N4c84@N3197@parse-top-level-program N3197@parse-top-level-program) (set! N3199@top-level-expander (lambda (N48fe@e*) (call-with-values (lambda () (N3197@parse-top-level-program N48fe@e*)) (lambda (N4904@N4901 N4905@N4903) (let ((N4908@b* N4905@N4903) (N4909@imp* N4904@N4901)) (call-with-values (lambda () (N3193@library-body-expander '() '() N4909@imp* N4908@b* '#t)) (lambda (N491a@N490d N491b@N490f N491c@N4911 N491d@N4913 N491e@N4915 N491f@N4917 N4920@N4919) (let ((N4928@export-env N4920@N4919) (N4929@export-subst N491f@N4917) (N492a@visit-code N491e@N4915) (N492b@invoke-code N491d@N4913) (N492c@visit-req* N491c@N4911) (N492d@invoke-req* N491b@N490f) (N492e@imp* N491a@N490d)) (values N492d@invoke-req* N492b@invoke-code))))))))) (set! N4c85@N3199@top-level-expander N3199@top-level-expander) (set! N319b@rp (N2a63@N293e@make-record-printer 'env (lambda (N4936@x N4937@p N4938@wr) (display '"#<environment>" N4937@p)))) (set! N4c86@N319b@rp N319b@rp) (set! N31a5@env? (lambda (N493c@x) (and (simple-struct? N493c@x) (eq? (simple-struct-name N493c@x) 'env)))) (set! N4c87@N31a5@env? N31a5@env?) (set! N31a7@env-names (lambda (N493e@x) (simple-struct-ref N493e@x '0))) (set! N4c88@N31a7@env-names N31a7@env-names) (set! N31a9@set-env-names! (lambda (N4940@x N4941@val) (simple-struct-set! N4940@x '0 N4941@val))) (set! N4c89@N31a9@set-env-names! N31a9@set-env-names!) (set! N31ab@env-labels (lambda (N4944@x) (simple-struct-ref N4944@x '1))) (set! N4c8a@N31ab@env-labels N31ab@env-labels) (set! N31ad@set-env-labels! (lambda (N4946@x N4947@val) (simple-struct-set! N4946@x '1 N4947@val))) (set! N4c8b@N31ad@set-env-labels! N31ad@set-env-labels!) (set! N31af@env-itc (lambda (N494a@x) (simple-struct-ref N494a@x '2))) (set! N4c8c@N31af@env-itc N31af@env-itc) (set! N31b1@set-env-itc! (lambda (N494c@x N494d@val) (simple-struct-set! N494c@x '2 N494d@val))) (set! N4c8d@N31b1@set-env-itc! N31b1@set-env-itc!) (set! N31b3@dummy '3) (set! N4c8e@N31b3@dummy N31b3@dummy) (set! N31b5@rp (N2a63@N293e@make-record-printer 'interaction-env (lambda (N4950@x N4951@p N4952@wr) (display '"#<environment>" N4951@p)))) (set! N4c8f@N31b5@rp N31b5@rp) (set! N31bf@interaction-env? (lambda (N4956@x) (and (simple-struct? N4956@x) (eq? (simple-struct-name N4956@x) 'interaction-env)))) (set! N4c90@N31bf@interaction-env? N31bf@interaction-env?) (set! N31c1@interaction-env-rib (lambda (N4958@x) (simple-struct-ref N4958@x '0))) (set! N4c91@N31c1@interaction-env-rib N31c1@interaction-env-rib) (set! N31c3@set-interaction-env-rib! (lambda (N495a@x N495b@val) (simple-struct-set! N495a@x '0 N495b@val))) (set! N4c92@N31c3@set-interaction-env-rib! N31c3@set-interaction-env-rib!) (set! N31c5@interaction-env-r (lambda (N495e@x) (simple-struct-ref N495e@x '1))) (set! N4c93@N31c5@interaction-env-r N31c5@interaction-env-r) (set! N31c7@set-interaction-env-r! (lambda (N4960@x N4961@val) (simple-struct-set! N4960@x '1 N4961@val))) (set! N4c94@N31c7@set-interaction-env-r! N31c7@set-interaction-env-r!) (set! N31c9@interaction-env-locs (lambda (N4964@x) (simple-struct-ref N4964@x '2))) (set! N4c95@N31c9@interaction-env-locs N31c9@interaction-env-locs) (set! N31cb@set-interaction-env-locs! (lambda (N4966@x N4967@val) (simple-struct-set! N4966@x '2 N4967@val))) (set! N4c96@N31cb@set-interaction-env-locs! N31cb@set-interaction-env-locs!) (set! N31cd@dummy '3) (set! N4c97@N31cd@dummy N31cd@dummy) (set! N31cf@interaction-environment-symbols (lambda () (N31d7@environment-symbols (N320f@interaction-environment)))) (set! N4c98@N31cf@interaction-environment-symbols N31cf@interaction-environment-symbols) (set! N31d1@environment-bindings (lambda (N496a@e) (vector->list (vector-map (lambda (N496c@name N496d@label) (N31d3@parse-binding (cons N496c@name (N2d31@N2b7e@imported-label->binding N496d@label)))) (N31a7@env-names N496a@e) (N31ab@env-labels N496a@e))))) (set! N4c99@N31d1@environment-bindings N31d1@environment-bindings) (set! N31d3@parse-binding (lambda (N4970@b) (cons (car N4970@b) (let ((N4972@t (cadr N4970@b))) (if (memv N4972@t '(core-prim global)) 'procedure (if (memv N4972@t '(core-macro macro global-macro)) 'syntax (if (memv N4972@t '($core-rtd)) 'record (if (eq? (car N4970@b) (cadr N4970@b)) 'syntax 'unknown)))))))) (set! N4c9a@N31d3@parse-binding N31d3@parse-binding) (set! N31d5@environment? (lambda (N4974@x) (or (N31a5@env? N4974@x) (N31bf@interaction-env? N4974@x)))) (set! N4c9b@N31d5@environment? N31d5@environment?) (set! N31d7@environment-symbols (lambda (N4976@x) (if (N31a5@env? N4976@x) (vector->list (N31a7@env-names N4976@x)) (if (N31bf@interaction-env? N4976@x) (map values (N2eb4@rib-sym* (N31c1@interaction-env-rib N4976@x))) (assertion-violation 'environment-symbols '"not an environment" N4976@x))))) (set! N4c9c@N31d7@environment-symbols N31d7@environment-symbols) (set! N31d9@environment (lambda N4978@imp* (let ((N497a@itc (N3187@make-collector))) (let ((N4980@N497d N318d@imp-collector) (N4981@N497f N497a@itc)) (let ((N4984@swap (lambda () (let ((N4986@t (N4980@N497d))) (begin (N4980@N497d N4981@N497f) (set! N4981@N497f N4986@t)))))) (dynamic-wind N4984@swap (lambda () (call-with-values (lambda () (N3183@parse-import-spec* N4978@imp*)) (lambda (N498c@N4989 N498d@N498b) (let ((N4990@subst-labels N498d@N498b) (N4991@subst-names N498c@N4989)) (make-simple-struct 'env '4 (list N4991@subst-names N4990@subst-labels N497a@itc)))))) N4984@swap)))))) (set! N4c9d@N31d9@environment N31d9@environment) (set! N31db@null-environment (lambda (N4994@n) (begin (if (not (eqv? N4994@n '5)) (assertion-violation 'null-environment '"not 5" N4994@n) (void)) (N31d9@environment '(psyntax null-environment-5))))) (set! N4c9e@N31db@null-environment N31db@null-environment) (set! N31dd@scheme-report-environment (lambda (N4996@n) (begin (if (not (eqv? N4996@n '5)) (assertion-violation 'scheme-report-environment '"not 5" N4996@n) (void)) (N31d9@environment '(psyntax scheme-report-environment-5))))) (set! N4c9f@N31dd@scheme-report-environment N31dd@scheme-report-environment) (set! N31df@expand (lambda (N4998@x N4999@env) (if (N31a5@env? N4999@env) (let ((N499c@rib (N3185@make-top-rib (N31a7@env-names N4999@env) (N31ab@env-labels N4999@env)))) (let ((N499e@x (make-simple-struct 'stx '5 (list N4998@x N2e9a@top-mark* (list N499c@rib) '()))) (N499f@itc (N31af@env-itc N4999@env)) (N49a0@rtc (N3187@make-collector)) (N49a1@vtc (N3187@make-collector))) (let ((N49a6@x (let ((N49b8@N49a9 N3211@top-level-context) (N49b9@N49ab N3189@inv-collector) (N49ba@N49ad N318b@vis-collector) (N49bb@N49af N318d@imp-collector) (N49bc@N49b1 '#f) (N49bd@N49b3 N49a0@rtc) (N49be@N49b5 N49a1@vtc) (N49bf@N49b7 N499f@itc)) (let ((N49c8@swap (lambda () (begin (let ((N49ca@t (N49b8@N49a9))) (begin (N49b8@N49a9 N49bc@N49b1) (set! N49bc@N49b1 N49ca@t))) (let ((N49cc@t (N49b9@N49ab))) (begin (N49b9@N49ab N49bd@N49b3) (set! N49bd@N49b3 N49cc@t))) (let ((N49ce@t (N49ba@N49ad))) (begin (N49ba@N49ad N49be@N49b5) (set! N49be@N49b5 N49ce@t))) (let ((N49d0@t (N49bb@N49af))) (begin (N49bb@N49af N49bf@N49b7) (set! N49bf@N49b7 N49d0@t))))))) (dynamic-wind N49c8@swap (lambda () (N313f@chi-expr N499e@x '() '())) N49c8@swap))))) (begin (N2ed2@seal-rib! N499c@rib) (values N49a6@x (N49a0@rtc)))))) (if (N31bf@interaction-env? N4999@env) (let ((N49d2@rib (N31c1@interaction-env-rib N4999@env)) (N49d3@r (N31c5@interaction-env-r N4999@env)) (N49d4@rtc (N3187@make-collector))) (let ((N49d8@x (make-simple-struct 'stx '5 (list N4998@x N2e9a@top-mark* (list N49d2@rib) '())))) (call-with-values (lambda () (let ((N49ee@N49df N3211@top-level-context) (N49ef@N49e1 N3189@inv-collector) (N49f0@N49e3 N318b@vis-collector) (N49f1@N49e5 N318d@imp-collector) (N49f2@N49e7 N4999@env) (N49f3@N49e9 N49d4@rtc) (N49f4@N49eb (N3187@make-collector)) (N49f5@N49ed (N3187@make-collector))) (let ((N49fe@swap (lambda () (begin (let ((N4a00@t (N49ee@N49df))) (begin (N49ee@N49df N49f2@N49e7) (set! N49f2@N49e7 N4a00@t))) (let ((N4a02@t (N49ef@N49e1))) (begin (N49ef@N49e1 N49f3@N49e9) (set! N49f3@N49e9 N4a02@t))) (let ((N4a04@t (N49f0@N49e3))) (begin (N49f0@N49e3 N49f4@N49eb) (set! N49f4@N49eb N4a04@t))) (let ((N4a06@t (N49f1@N49e5))) (begin (N49f1@N49e5 N49f5@N49ed) (set! N49f5@N49ed N4a06@t))))))) (dynamic-wind N49fe@swap (lambda () (N3191@chi-interaction-expr N49d8@x N49d2@rib N49d3@r)) N49fe@swap)))) (lambda (N4a08@N49db N4a09@N49dd) (let ((N4a0c@r^ N4a09@N49dd) (N4a0d@e N4a08@N49db)) (begin (N31c7@set-interaction-env-r! N4999@env N4a0c@r^) (values N4a0d@e (N49d4@rtc)))))))) (assertion-violation 'expand '"not an environment" N4999@env))))) (set! N4ca0@N31df@expand N31df@expand) (set! N31e1@eval (lambda (N4a10@x N4a11@env) (begin (if (not (N31d5@environment? N4a11@env)) (error 'eval '"not an environment" N4a11@env) (void)) (call-with-values (lambda () (N31df@expand N4a10@x N4a11@env)) (lambda (N4a18@N4a15 N4a19@N4a17) (let ((N4a1c@invoke-req* N4a19@N4a17) (N4a1d@x N4a18@N4a15)) (begin (for-each N2d32@N2b80@invoke-library N4a1c@invoke-req*) (eval-core (N2abc@N2a74@expanded->core N4a1d@x))))))))) (set! N4ca1@N31e1@eval N31e1@eval) (set! N31e3@library-expander (lambda N4a8e (let ((N4a8f (length N4a8e))) (if (= N4a8f '3) (apply (lambda (N4a20@x N4a21@filename N4a22@verify-name) (letrec* ((N4a27@build-visit-code (lambda (N4a7c@macro*) (if (null? N4a7c@macro*) (N2e7c@N2ddd@build-void) (N2e7b@N2ddb@build-sequence '#f (map (lambda (N4a7e@x) (let ((N4a80@loc (car N4a7e@x)) (N4a81@src (cddr N4a7e@x))) (list 'set! N4a80@loc N4a81@src))) N4a7c@macro*))))) (N4a29@visit! (lambda (N4a74@macro*) (for-each (lambda (N4a76@x) (let ((N4a78@loc (car N4a76@x)) (N4a79@proc (cadr N4a76@x))) (set-symbol-value! N4a78@loc N4a79@proc))) N4a74@macro*)))) (call-with-values (lambda () (N3195@core-library-expander N4a20@x N4a22@verify-name)) (lambda (N4a3c@N4a2b N4a3d@N4a2d N4a3e@N4a2f N4a3f@N4a31 N4a40@N4a33 N4a41@N4a35 N4a42@N4a37 N4a43@N4a39 N4a44@N4a3b) (let ((N4a4e@export-env N4a44@N4a3b) (N4a4f@export-subst N4a43@N4a39) (N4a50@macro* N4a42@N4a37) (N4a51@invoke-code N4a41@N4a35) (N4a52@vis* N4a40@N4a33) (N4a53@inv* N4a3f@N4a31) (N4a54@imp* N4a3e@N4a2f) (N4a55@ver N4a3d@N4a2d) (N4a56@name N4a3c@N4a2b)) (let ((N4a60@id (gensym)) (N4a61@name N4a56@name) (N4a62@ver N4a55@ver) (N4a63@imp* (map N2d36@N2b88@library-spec N4a54@imp*)) (N4a64@vis* (map N2d36@N2b88@library-spec N4a52@vis*)) (N4a65@inv* (map N2d36@N2b88@library-spec N4a53@inv*)) (N4a66@visit-proc (lambda () (N4a29@visit! N4a50@macro*))) (N4a67@invoke-proc (lambda () (eval-core (N2abc@N2a74@expanded->core N4a51@invoke-code)))) (N4a68@visit-code (N4a27@build-visit-code N4a50@macro*)) (N4a69@invoke-code N4a51@invoke-code)) (begin (N2d30@N2b7c@install-library N4a60@id N4a61@name N4a62@ver N4a63@imp* N4a64@vis* N4a65@inv* N4a4f@export-subst N4a4e@export-env N4a66@visit-proc N4a67@invoke-proc N4a68@visit-code N4a69@invoke-code '#t N4a21@filename) (values N4a60@id N4a61@name N4a62@ver N4a63@imp* N4a64@vis* N4a65@inv* N4a69@invoke-code N4a68@visit-code N4a4f@export-subst N4a4e@export-env)))))))) N4a8e) (if (= N4a8f '2) (apply (lambda (N4a84@x N4a85@filename) (N31e3@library-expander N4a84@x N4a85@filename (lambda (N4a88@x) (values)))) N4a8e) (if (= N4a8f '1) (apply (lambda (N4a8a@x) (N31e3@library-expander N4a8a@x '#f (lambda (N4a8c@x) (values)))) N4a8e) (error 'apply '"invalid arg count"))))))) (set! N4ca2@N31e3@library-expander N31e3@library-expander) (set! N31e5@boot-library-expand (lambda (N4a90@x) (call-with-values (lambda () (N31e3@library-expander N4a90@x)) (lambda (N4aa6@N4a93 N4aa7@N4a95 N4aa8@N4a97 N4aa9@N4a99 N4aaa@N4a9b N4aab@N4a9d N4aac@N4a9f N4aad@N4aa1 N4aae@N4aa3 N4aaf@N4aa5) (let ((N4aba@export-env N4aaf@N4aa5) (N4abb@export-subst N4aae@N4aa3) (N4abc@visit-code N4aad@N4aa1) (N4abd@invoke-code N4aac@N4a9f) (N4abe@inv* N4aab@N4a9d) (N4abf@vis* N4aaa@N4a9b) (N4ac0@imp* N4aa9@N4a99) (N4ac1@ver N4aa8@N4a97) (N4ac2@name N4aa7@N4a95) (N4ac3@id N4aa6@N4a93)) (values N4ac2@name N4abd@invoke-code N4abb@export-subst N4aba@export-env)))))) (set! N4ca3@N31e5@boot-library-expand N31e5@boot-library-expand) (set! N31e7@rev-map-append (lambda (N4ace@f N4acf@ls N4ad0@ac) (if (null? N4acf@ls) N4ad0@ac (N31e7@rev-map-append N4ace@f (cdr N4acf@ls) (cons (N4ace@f (car N4acf@ls)) N4ad0@ac))))) (set! N4ca4@N31e7@rev-map-append N31e7@rev-map-append) (set! N31e9@build-exports (lambda (N4ad4@lex*+loc* N4ad5@init*) (N2e7b@N2ddb@build-sequence '#f (cons (N2e7c@N2ddd@build-void) (N31e7@rev-map-append (lambda (N4ad8@x) (list 'set! (cdr N4ad8@x) (car N4ad8@x))) N4ad4@lex*+loc* N4ad5@init*))))) (set! N4ca5@N31e9@build-exports N31e9@build-exports) (set! N31eb@make-export-subst (lambda (N4ada@name* N4adb@id*) (map (lambda (N4ade@name N4adf@id) (let ((N4ae2@label (N2f2c@id->label N4adf@id))) (begin (if (not N4ae2@label) (N3201@syntax-violation '#f '"cannot export unbound identifier" N4adf@id) (void)) (cons N4ade@name N4ae2@label)))) N4ada@name* N4adb@id*))) (set! N4ca6@N31eb@make-export-subst N31eb@make-export-subst) (set! N31ed@make-export-env/macros (lambda (N4ae4@lex* N4ae5@loc* N4ae6@r) (letrec* ((N4aeb@lookup (lambda (N4b08@x) (let N4b10@f ((N4b0a@x N4b08@x) (N4b0b@lex* N4ae4@lex*) (N4b0c@loc* N4ae5@loc*)) (if (pair? N4b0b@lex*) (if (eq? N4b0a@x (car N4b0b@lex*)) (car N4b0c@loc*) (N4b10@f N4b0a@x (cdr N4b0b@lex*) (cdr N4b0c@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let N4af4@f ((N4aec@r N4ae6@r) (N4aed@env '()) (N4aee@global* '()) (N4aef@macro* '())) (if (null? N4aec@r) (values N4aed@env N4aee@global* N4aef@macro*) (let ((N4af6@x (car N4aec@r))) (let ((N4af8@label (car N4af6@x)) (N4af9@b (cdr N4af6@x))) (let ((N4afc@t (N2f32@binding-type N4af9@b))) (if (memv N4afc@t '(lexical)) (let ((N4afe@v (N2f34@binding-value N4af9@b))) (let ((N4b00@loc (N4aeb@lookup (N30a7@lexical-var N4afe@v))) (N4b01@type (if (N30a9@lexical-mutable? N4afe@v) 'mutable 'global))) (N4af4@f (cdr N4aec@r) (cons (cons* N4af8@label N4b01@type N4b00@loc) N4aed@env) (cons (cons (N30a7@lexical-var N4afe@v) N4b00@loc) N4aee@global*) N4aef@macro*))) (if (memv N4afc@t '(local-macro)) (let ((N4b04@loc (gensym))) (N4af4@f (cdr N4aec@r) (cons (cons* N4af8@label 'global-macro N4b04@loc) N4aed@env) N4aee@global* (cons (cons N4b04@loc (N2f34@binding-value N4af9@b)) N4aef@macro*))) (if (memv N4afc@t '(local-macro!)) (let ((N4b06@loc (gensym))) (N4af4@f (cdr N4aec@r) (cons (cons* N4af8@label 'global-macro! N4b06@loc) N4aed@env) N4aee@global* (cons (cons N4b06@loc (N2f34@binding-value N4af9@b)) N4aef@macro*))) (if (memv N4afc@t '($rtd $module)) (N4af4@f (cdr N4aec@r) (cons N4af6@x N4aed@env) N4aee@global* N4aef@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (N2f32@binding-type N4af9@b) (N2f34@binding-value N4af9@b)))))))))))))) (set! N4ca7@N31ed@make-export-env/macros N31ed@make-export-env/macros) (set! N31ef@generate-temporaries (lambda (N4b12@ls) (let ((N4b14@t N4b12@ls)) (let ((N4b16@ls/false (N311d@syntax-dispatch N4b14@t 'each-any))) (if N4b16@ls/false (apply (lambda (N4b18@ls) (map (lambda (N4b1a@x) (make-simple-struct 'stx '5 (list (let ((N4b1c@x (N3207@syntax->datum N4b1a@x))) (if (or (symbol? N4b1c@x) (string? N4b1c@x)) (gensym N4b1c@x) (gensym 't))) N2e9a@top-mark* '() '()))) N4b18@ls)) N4b16@ls/false) (let ((N4b1e@t N4b14@t)) (let ((N4b20@ls/false (N311d@syntax-dispatch N4b1e@t '_))) (if N4b20@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) N4b20@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4b1e@t))))))))) (set! N4ca8@N31ef@generate-temporaries N31ef@generate-temporaries) (set! N31f1@free-identifier=? (lambda (N4b22@x N4b23@y) (if (N2f16@id? N4b22@x) (if (N2f16@id? N4b23@y) (N2f1c@free-id=? N4b22@x N4b23@y) (assertion-violation 'free-identifier=? '"not an identifier" N4b23@y)) (assertion-violation 'free-identifier=? '"not an identifier" N4b22@x)))) (set! N4ca9@N31f1@free-identifier=? N31f1@free-identifier=?) (set! N31f3@bound-identifier=? (lambda (N4b26@x N4b27@y) (if (N2f16@id? N4b26@x) (if (N2f16@id? N4b27@y) (N2f1a@bound-id=? N4b26@x N4b27@y) (assertion-violation 'bound-identifier=? '"not an identifier" N4b27@y)) (assertion-violation 'bound-identifier=? '"not an identifier" N4b26@x)))) (set! N4caa@N31f3@bound-identifier=? N31f3@bound-identifier=?) (set! N31f5@make-source-condition (lambda (N4b2a@x) (letrec* ((N4b34@N4b2f (make-record-type-descriptor '&source-information &condition-rtd 'N4b32 '#f '#f '#((immutable file-name) (immutable line)))) (N4b36@N4b31 '#f) (N4b38@N4b30 (make-record-constructor-descriptor N4b34@N4b2f &condition-rcd N4b36@N4b31)) (N4b3b@N4b2e (record-predicate N4b34@N4b2f)) (N4b3d@make-source-condition (record-constructor N4b38@N4b30)) (N4b3f@N4b2c (record-accessor N4b34@N4b2f '0)) (N4b41@N4b2d (record-accessor N4b34@N4b2f '1)) (N4b43@source-condition? (condition-predicate N4b34@N4b2f)) (N4b45@source-filename (condition-accessor N4b34@N4b2f N4b3f@N4b2c)) (N4b47@source-character (condition-accessor N4b34@N4b2f N4b41@N4b2d))) (if (and (pair? N4b2a@x) (pair? (cdr N4b2a@x))) (N4b3d@make-source-condition (car N4b2a@x) (cadr N4b2a@x)) (condition))))) (set! N4cab@N31f5@make-source-condition N31f5@make-source-condition) (set! N31f7@extract-position-condition (lambda (N4b48@x) (N31f5@make-source-condition (N31f9@expression-position N4b48@x)))) (set! N4cac@N31f7@extract-position-condition N31f7@extract-position-condition) (set! N31f9@expression-position (lambda (N4b4a@x) (and (N2ee2@stx? N4b4a@x) (let ((N4b4c@x (N2ee4@stx-expr N4b4a@x))) (and (N2a5a@N292c@annotation? N4b4c@x) (N2a5b@N292e@annotation-source N4b4c@x)))))) (set! N4cad@N31f9@expression-position N31f9@expression-position) (set! N31fb@assertion-error (lambda (N4b4e@expr N4b4f@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list N4b4e@expr)) (N31f5@make-source-condition N4b4f@pos))))) (set! N4cae@N31fb@assertion-error N31fb@assertion-error) (set! N31fd@syntax-error (lambda (N4b52@x . N4b54@args) (begin (if (not (for-all string? N4b54@args)) (assertion-violation 'syntax-error '"invalid argument" N4b54@args) (void)) (raise (condition (make-message-condition (if (null? N4b54@args) '"invalid syntax" (apply string-append N4b54@args))) (make-syntax-violation (N3207@syntax->datum N4b52@x) '#f) (N31f7@extract-position-condition N4b52@x)))))) (set! N4caf@N31fd@syntax-error N31fd@syntax-error) (set! N31ff@syntax-violation* (lambda (N4b56@who N4b57@msg N4b58@form N4b59@condition-object) (begin (if (not (string? N4b57@msg)) (assertion-violation 'syntax-violation '"message is not a string" N4b57@msg) (void)) (let ((N4b5e@who (if (or (string? N4b56@who) (symbol? N4b56@who)) N4b56@who (if (not N4b56@who) (let ((N4b60@t N4b58@form)) (let ((N4b62@ls/false (N311d@syntax-dispatch N4b60@t 'any))) (if (and N4b62@ls/false (apply (lambda (N4b64@id) (N2f16@id? N4b64@id)) N4b62@ls/false)) (apply (lambda (N4b66@id) (N3207@syntax->datum N4b66@id)) N4b62@ls/false) (let ((N4b68@t N4b60@t)) (let ((N4b6a@ls/false (N311d@syntax-dispatch N4b68@t '(any . any)))) (if (and N4b6a@ls/false (apply (lambda (N4b6c@id N4b6d@rest) (N2f16@id? N4b6c@id)) N4b6a@ls/false)) (apply (lambda (N4b70@id N4b71@rest) (N3207@syntax->datum N4b70@id)) N4b6a@ls/false) (let ((N4b74@t N4b68@t)) (let ((N4b76@ls/false (N311d@syntax-dispatch N4b74@t '_))) (if N4b76@ls/false (apply (lambda () '#f) N4b76@ls/false) (N3201@syntax-violation '#f '"invalid syntax" N4b74@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" N4b56@who))))) (raise (condition (if N4b5e@who (make-who-condition N4b5e@who) (condition)) (make-message-condition N4b57@msg) N4b59@condition-object (N31f7@extract-position-condition N4b58@form))))))) (set! N4cb0@N31ff@syntax-violation* N31ff@syntax-violation*) (set! N3201@syntax-violation (lambda N4b86 (let ((N4b87 (length N4b86))) (if (= N4b87 '3) (apply (lambda (N4b78@who N4b79@msg N4b7a@form) (N3201@syntax-violation N4b78@who N4b79@msg N4b7a@form '#f)) N4b86) (if (= N4b87 '4) (apply (lambda (N4b7e@who N4b7f@msg N4b80@form N4b81@subform) (N31ff@syntax-violation* N4b7e@who N4b7f@msg N4b80@form (make-syntax-violation (N3207@syntax->datum N4b80@form) (N3207@syntax->datum N4b81@subform)))) N4b86) (error 'apply '"invalid arg count")))))) (set! N4cb1@N3201@syntax-violation N3201@syntax-violation) (set! N3203@identifier? (lambda (N4b88@x) (N2f16@id? N4b88@x))) (set! N4cb2@N3203@identifier? N3203@identifier?) (set! N3205@datum->syntax (lambda (N4b8a@id N4b8b@datum) (if (N2f16@id? N4b8a@id) (N2ef6@datum->stx N4b8a@id N4b8b@datum) (assertion-violation 'datum->syntax '"not an identifier" N4b8a@id)))) (set! N4cb3@N3205@datum->syntax N3205@datum->syntax) (set! N3207@syntax->datum (lambda (N4b8e@x) (N2f2a@stx->datum N4b8e@x))) (set! N4cb4@N3207@syntax->datum N3207@syntax->datum) (set! N3209@ungensym-all (lambda (N4b90@code) (if (pair? N4b90@code) (cons (N3209@ungensym-all (car N4b90@code)) (N3209@ungensym-all (cdr N4b90@code))) (if (symbol? N4b90@code) (ungensym N4b90@code) N4b90@code)))) (set! N4cb5@N3209@ungensym-all N3209@ungensym-all) (set! N320b@compile-r6rs-top-level (lambda (N4b92@x*) (call-with-values (lambda () (N3199@top-level-expander N4b92@x*)) (lambda (N4b98@N4b95 N4b99@N4b97) (let ((N4b9c@invoke-code N4b99@N4b97) (N4b9d@lib* N4b98@N4b95)) (lambda () (begin (for-each N2d32@N2b80@invoke-library N4b9d@lib*) (let ((N4ba0@expanded (N2abc@N2a74@expanded->core N4b9c@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (N3209@ungensym-all N4ba0@expanded)) (void)) (eval-core N4ba0@expanded)))))))))) (set! N4cb6@N320b@compile-r6rs-top-level N320b@compile-r6rs-top-level) (set! N320d@pre-compile-r6rs-top-level (lambda (N4ba2@x*) (call-with-values (lambda () (N3199@top-level-expander N4ba2@x*)) (lambda (N4ba8@N4ba5 N4ba9@N4ba7) (let ((N4bac@invoke-code N4ba9@N4ba7) (N4bad@lib* N4ba8@N4ba5)) (begin (for-each N2d32@N2b80@invoke-library N4bad@lib*) (N2a64@N2940@compile-core (N2abc@N2a74@expanded->core N4bac@invoke-code)))))))) (set! N4cb7@N320d@pre-compile-r6rs-top-level N320d@pre-compile-r6rs-top-level) (set! N320f@interaction-environment (let ((N4bb0@the-env '#f)) (lambda () (or N4bb0@the-env (let ((N4bb2@lib (N2d2b@N2b72@find-library-by-name '(mosh interaction))) (N4bb3@rib (N2eca@make-empty-rib))) (begin (let ((N4bb6@subst (N2d0d@N2b36@library-subst N4bb2@lib))) (begin (N2eb6@set-rib-sym*! N4bb3@rib (map car N4bb6@subst)) (N2eba@set-rib-mark**! N4bb3@rib (map (lambda (N4bb8@x) N2e9a@top-mark*) N4bb6@subst)) (N2ebe@set-rib-label*! N4bb3@rib (map cdr N4bb6@subst)))) (let ((N4bba@env (make-simple-struct 'interaction-env '4 (list N4bb3@rib '() '())))) (begin (set! N4bb0@the-env N4bba@env) N4bba@env)))))))) (set! N4cb8@N320f@interaction-environment N320f@interaction-environment) (set! N3211@top-level-context (N2a66@N2944@make-parameter '#f)) (set! N4cb9@N3211@top-level-context N3211@top-level-context) (N2d28@N2b6c@current-library-expander N31e3@library-expander))
(begin (begin (N2ab9@N2a6e@current-primitive-locations (lambda (N520f@x) (let ((N5211@t (assq N520f@x '((syntax-error . N4caf@N31fd@syntax-error) (syntax-dispatch . N4c4b@N311d@syntax-dispatch) (load . N4e39@N4ce0@load) (interaction-environment . N4cb8@N320f@interaction-environment) (library-path . N2d20@N2b5c@library-path) (mosh-cache-dir . N2a67@N2946@mosh-cache-dir) (make-parameter . N2a66@N2944@make-parameter) (make-variable-transformer . N4c08@N2f48@make-variable-transformer) (identifier? . N4cb2@N3203@identifier?) (generate-temporaries . N4ca8@N31ef@generate-temporaries) (free-identifier=? . N4ca9@N31f1@free-identifier=?) (syntax->datum . N4cb4@N3207@syntax->datum) (datum->syntax . N4cb3@N3205@datum->syntax) (bound-identifier=? . N4caa@N31f3@bound-identifier=?) (scheme-report-environment . N4c9f@N31dd@scheme-report-environment) (null-environment . N4c9e@N31db@null-environment) (command-line . N4e36@N4cda@command-line) (eval . N4ca1@N31e1@eval) (environment . N4c9d@N31d9@environment) (syntax-violation . N4cb1@N3201@syntax-violation) (assertion-error . N4cae@N31fb@assertion-error))))) (if N5211@t (cdr N5211@t) '#f)))) (N2d30@N2b7c@install-library 'N51ec '(mosh interaction) '() '() '() '() '((regexp? . N51ac) (alist->eq-hash-table . N51a8) (format . N51a5) (string-split . N5195) (call-process . N518e) (set-current-directory! . N518a) (expand-path . N5189) (current-directory . N5188) (%spawn . N5187) (%waitpid . N5186) (simple-struct-name . N5185) (simple-struct-set! . N5184) (simple-struct-ref . N5183) (make-simple-struct . N5182) (simple-struct? . N5181) (pointer-ref-c-int64 . N5180) (pointer-ref-c-int32 . N517f) (pointer-ref-c-int16 . N517e) (pointer-ref-c-int8 . N517d) (pointer-ref-c-uint64 . N517c) (pointer-ref-c-uint32 . N517b) (pointer-ref-c-uint16 . N517a) (pointer-ref-c-uint8 . N5179) (pointer-set-c-uint64! . N5178) (pointer-set-c-uint32! . N5177) (pointer-set-c-uint16! . N5176) (pointer-set-c-uint8! . N5175) (pointer-set-c-int64! . N5174) (pointer-set-c-int32! . N5173) (pointer-set-c-int16! . N5172) (pointer-set-c-int8! . N5171) (pointer-set-c-pointer! . N5170) (pointer-set-c-double! . N516f) (pointer-set-c-float! . N516e) (pointer-set-c-long-long! . N516d) (pointer-set-c-long! . N516c) (pointer-set-c-int! . N516b) (pointer-set-c-short! . N516a) (pointer-set-c-char! . N5169) (pointer-ref-c-pointer . N5168) (pointer-ref-c-double . N5167) (pointer-ref-c-float . N5166) (pointer-ref-c-unsigned-long-long . N5165) (pointer-ref-c-signed-long-long . N5164) (pointer-ref-c-unsigned-long . N5163) (pointer-ref-c-signed-long . N5162) (pointer-ref-c-unsigned-int . N5161) (pointer-ref-c-signed-int . N5160) (pointer-ref-c-unsigned-short . N515f) (pointer-ref-c-signed-short . N515e) (pointer-ref-c-unsigned-char . N515d) (pointer-ref-c-signed-char . N515c) (pointer->integer . N515b) (integer->pointer . N515a) (pointer? . N5159) (shared-errno . N5158) (%ffi-supported? . N5153) (%ffi-pointer->string . N5152) (%ffi-call . N5151) (%ffi-lookup . N5150) (%ffi-open . N514f) (null-terminated-utf8->string . N514e) (null-terminated-bytevector->string . N514d) (%exec . N514c) (%fork . N514b) (%pipe . N514a) (p . N5149) (whereis . N512d) (register . N512c) (vm-join! . N512b) (vm-set-value! . N512a) (vm? . N5129) (main-vm? . N5128) (vm-eval . N5127) (vm-self . N5126) (vm-start! . N5125) (make-vm . N5124) (mutex-try-lock! . N5123) (mutex-unlock! . N5122) (mutex-lock! . N5121) (mutex? . N5120) (make-mutex . N511f) (condition-variable-notify-all! . N511e) (condition-variable-notify! . N511d) (condition-variable-wait! . N511c) (make-condition-variable . N511b) (write/ss . N511a) (string-upcase . N5101) (string-titlecase . N5100) (string-normalize-nfkd . N50ff) (string-normalize-nfkc . N50fe) (string-normalize-nfd . N50fd) (string-normalize-nfc . N50fc) (string-foldcase . N50fb) (string-downcase . N50fa) (string-ci>? . N50f9) (string-ci>=? . N50f8) (string-ci=? . N50f7) (string-ci<? . N50f6) (string-ci<=? . N50f5) (char-whitespace? . N50f4) (char-upper-case? . N50f3) (char-title-case? . N50f2) (char-numeric? . N50f1) (char-lower-case? . N50f0) (char-general-category . N50ef) (char-upcase . N50ee) (char-titlecase . N50ed) (char-foldcase . N50ec) (char-downcase . N50eb) (char-ci>? . N50ea) (char-ci>=? . N50e9) (char-ci=? . N50e8) (char-ci<? . N50e7) (char-ci<=? . N50e6) (char-alphabetic? . N50e5) (make-variable-transformer . N2f47) (identifier? . N3202) (generate-temporaries . N31ee) (free-identifier=? . N31f0) (syntax->datum . N3206) (datum->syntax . N3204) (bound-identifier=? . N31f2) (record-type-descriptor? . N50e4) (record-predicate . N50e3) (record-mutator . N50e2) (record-constructor . N50e1) (record-accessor . N50e0) (make-record-type-descriptor . N50df) (make-record-constructor-descriptor . N50de) (record? . N50dd) (record-type-uid . N50dc) (record-type-sealed? . N50db) (record-type-parent . N50da) (record-type-opaque? . N50d9) (record-type-name . N50d8) (record-type-generative? . N50d7) (record-type-field-names . N50d6) (record-rtd . N50d5) (record-field-mutable? . N50d4) (delete-file . N50d3) (file-exists? . N50d2) (vector-sort! . N50d1) (vector-sort . N50d0) (list-sort . N50cf) (symbol-hash . N50ce) (string-ci-hash . N50cd) (string-hash . N50cc) (equal-hash . N50cb) (hashtable-equivalence-function . N50ca) (make-hashtable . N50c9) (hashtable-hash-function . N50c8) (make-eqv-hashtable . N50c7) (make-eq-hashtable . N50c6) (hashtable? . N50c5) (hashtable-update! . N50c4) (hashtable-size . N50c3) (hashtable-set! . N50c2) (hashtable-ref . N50c1) (hashtable-mutable? . N50c0) (hashtable-keys . N50bf) (hashtable-entries . N50be) (hashtable-delete! . N50bd) (hashtable-copy . N50bc) (hashtable-contains? . N50bb) (hashtable-clear! . N50ba) (call-with-output-file . N50b9) (call-with-input-file . N50b8) (write-char . N50b7) (write . N50b6) (with-output-to-file . N50b5) (with-input-from-file . N50b4) (read-char . N50b3) (read . N50b2) (peek-char . N50b1) (open-output-file . N50b0) (open-input-file . N50af) (newline . N50ae) (display . N50ad) (close-output-port . N50ac) (close-input-port . N50ab) (eof-object? . N50aa) (eof-object . N50a9) (current-error-port . N50a8) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (utf-8-codec . N50a3) (utf-16-codec . N50a2) (transcoder-error-handling-mode . N50a1) (transcoder-eol-style . N50a0) (transcoder-codec . N509f) (transcoded-port . N509e) (textual-port? . N509d) (string->bytevector . N509c) (standard-output-port . N509b) (standard-input-port . N509a) (standard-error-port . N5099) (set-port-position! . N5098) (put-u8 . N5097) (put-string . N5096) (put-datum . N5095) (put-char . N5094) (put-bytevector . N5093) (port? . N5092) (port-transcoder . N5091) (port-position . N5090) (port-has-set-port-position!? . N508f) (port-has-port-position? . N508e) (port-eof? . N508d) (output-port-buffer-mode . N508c) (open-string-output-port . N508b) (open-string-input-port . N508a) (open-file-output-port . N5089) (open-file-input/output-port . N5088) (open-file-input-port . N5087) (open-bytevector-output-port . N5086) (open-bytevector-input-port . N5085) (native-transcoder . N5084) (native-eol-style . N5083) (make-transcoder . N5082) (latin-1-codec . N5081) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (make-i/o-encoding-error . N5076) (make-i/o-decoding-error . N5075) (make-custom-textual-output-port . N5074) (make-custom-textual-input/output-port . N5073) (make-custom-textual-input-port . N5072) (make-custom-binary-output-port . N5071) (make-custom-binary-input/output-port . N5070) (make-custom-binary-input-port . N506f) (make-bytevector . N506e) (lookahead-u8 . N506d) (lookahead-char . N506c) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (i/o-encoding-error? . N505e) (i/o-encoding-error-char . N505d) (i/o-decoding-error? . N505c) (get-u8 . N505b) (get-string-n! . N505a) (get-string-n . N5059) (get-string-all . N5058) (get-line . N5057) (get-datum . N5056) (get-char . N5055) (get-bytevector-some . N5054) (get-bytevector-n! . N5053) (get-bytevector-n . N5052) (get-bytevector-all . N5051) (flush-output-port . N5050) (close-port . N504f) (exit . N5047) (command-line . N4cd9) (string-fill! . N5046) (string-set! . N5045) (set-cdr! . N5044) (set-car! . N5043) (remove . N5042) (remv . N5041) (remp . N5040) (remq . N503f) (partition . N503e) (memv . N503d) (memq . N503c) (memp . N503b) (member . N503a) (exists . N5039) (for-all . N5038) (fold-right . N5037) (fold-left . N5036) (find . N5035) (filter . N5034) (cons* . N5033) (assv . N5032) (assq . N5031) (assp . N5030) (assoc . N502f) (call-with-string-output-port . N502e) (call-with-port . N502d) (call-with-bytevector-output-port . N502c) (bytevector->string . N502b) (buffer-mode? . N502a) (binary-port? . N5029) (with-exception-handler . N5028) (raise-continuable . N5027) (raise . N5026) (eval . N31e0) (environment . N31d8) (make-enumeration . N5025) (enum-set=? . N5024) (enum-set-universe . N5023) (enum-set-union . N5022) (enum-set-subset? . N5021) (enum-set-projection . N5020) (enum-set-member? . N501f) (enum-set-intersection . N501e) (enum-set-indexer . N501d) (enum-set-difference . N501c) (enum-set-constructor . N501b) (enum-set-complement . N501a) (enum-set->list . N5019) (who-condition? . N5018) (warning? . N5017) (violation? . N5016) (undefined-violation? . N5015) (syntax-violation? . N5014) (syntax-violation-subform . N5013) (syntax-violation-form . N5012) (syntax-violation . N3200) (simple-conditions . N5011) (serious-condition? . N5010) (non-continuable-violation? . N500f) (message-condition? . N500e) (make-who-condition . N500d) (make-warning . N500c) (make-violation . N500b) (make-undefined-violation . N500a) (make-syntax-violation . N5009) (make-serious-condition . N5008) (make-non-continuable-violation . N5007) (make-message-condition . N5006) (make-lexical-violation . N5005) (make-irritants-condition . N5004) (make-implementation-restriction-violation . N5003) (make-error . N5002) (make-assertion-violation . N5001) (lexical-violation? . N5000) (irritants-condition? . N4fff) (implementation-restriction-violation? . N4ffe) (error? . N4ffd) (condition-who . N4ffc) (condition-predicate . N4ffb) (condition-message . N4ffa) (condition-irritants . N4ff9) (condition-accessor . N4ff8) (condition . N4ff7) (assertion-violation? . N4ff6) (condition? . N4ff5) (utf32->string . N4ff4) (utf16->string . N4ff3) (utf8->string . N4ff2) (uint-list->bytevector . N4ff1) (u8-list->bytevector . N4ff0) (string->utf8 . N4fef) (string->utf32 . N4fee) (string->utf16 . N4fed) (sint-list->bytevector . N4fec) (native-endianness . N4feb) (bytevector? . N4fea) (bytevector=? . N4fe9) (bytevector-uint-set! . N4fe8) (bytevector-uint-ref . N4fe7) (bytevector-u8-set! . N4fe6) (bytevector-u8-ref . N4fe5) (bytevector-u64-set! . N4fe4) (bytevector-u64-ref . N4fe3) (bytevector-u64-native-set! . N4fe2) (bytevector-u64-native-ref . N4fe1) (bytevector-u32-set! . N4fe0) (bytevector-u32-ref . N4fdf) (bytevector-u32-native-set! . N4fde) (bytevector-u32-native-ref . N4fdd) (bytevector-u16-set! . N4fdc) (bytevector-u16-ref . N4fdb) (bytevector-u16-native-set! . N4fda) (bytevector-u16-native-ref . N4fd9) (bytevector-sint-set! . N4fd8) (bytevector-sint-ref . N4fd7) (bytevector-s8-set! . N4fd6) (bytevector-s8-ref . N4fd5) (bytevector-s64-set! . N4fd4) (bytevector-s64-ref . N4fd3) (bytevector-s64-native-set! . N4fd2) (bytevector-s64-native-ref . N4fd1) (bytevector-s32-set! . N4fd0) (bytevector-s32-ref . N4fcf) (bytevector-s32-native-set! . N4fce) (bytevector-s32-native-ref . N4fcd) (bytevector-s16-set! . N4fcc) (bytevector-s16-ref . N4fcb) (bytevector-s16-native-set! . N4fca) (bytevector-s16-native-ref . N4fc9) (bytevector-length . N4fc8) (bytevector-ieee-single-ref . N4fc7) (bytevector-ieee-single-set! . N4fc6) (bytevector-ieee-single-native-set! . N4fc5) (bytevector-ieee-single-native-ref . N4fc4) (bytevector-ieee-double-set! . N4fc3) (bytevector-ieee-double-ref . N4fc2) (bytevector-ieee-double-native-set! . N4fc1) (bytevector-ieee-double-native-ref . N4fc0) (bytevector-fill! . N4fbf) (bytevector-copy! . N4fbe) (bytevector-copy . N4fbd) (bytevector->uint-list . N4fbc) (bytevector->u8-list . N4fbb) (bytevector->sint-list . N4fba) (no-nans-violation? . N4fb9) (no-infinities-violation? . N4fb8) (make-no-nans-violation . N4fb7) (make-no-infinities-violation . N4fb6) (real->flonum . N4fb5) (flzero? . N4fb4) (fltruncate . N4fb3) (fltan . N4fb2) (flsqrt . N4fb1) (flsin . N4fb0) (flround . N4faf) (flpositive? . N4fae) (flonum? . N4fad) (flodd? . N4fac) (flnumerator . N4fab) (flnegative? . N4faa) (flnan? . N4fa9) (flmod0 . N4fa8) (flmod . N4fa7) (flmin . N4fa6) (flmax . N4fa5) (fllog . N4fa4) (flinteger? . N4fa3) (flinfinite? . N4fa2) (flfloor . N4fa1) (flfinite? . N4fa0) (flexpt . N4f9f) (flexp . N4f9e) (fleven? . N4f9d) (fldiv0-and-mod0 . N4f9c) (fldiv0 . N4f9b) (fldiv-and-mod . N4f9a) (fldiv . N4f99) (fldenominator . N4f98) (flcos . N4f97) (flceiling . N4f96) (flatan . N4f95) (flasin . N4f94) (flacos . N4f93) (flabs . N4f92) (fl>? . N4f91) (fl>=? . N4f90) (fl=? . N4f8f) (fl<? . N4f8e) (fl<=? . N4f8d) (fl/ . N4f8c) (fl- . N4f8b) (fl+ . N4f8a) (fl* . N4f89) (fixnum->flonum . N4f88) (fxzero? . N4f87) (fxxor . N4f86) (fxrotate-bit-field . N4f85) (fxreverse-bit-field . N4f84) (fxpositive? . N4f83) (fxodd? . N4f82) (fxnot . N4f81) (fxnegative? . N4f80) (fxmod0 . N4f7f) (fxmod . N4f7e) (fxmin . N4f7d) (fxmax . N4f7c) (fxlength . N4f7b) (fxior . N4f7a) (fxif . N4f79) (fxfirst-bit-set . N4f78) (fxeven? . N4f77) (fxdiv0-and-mod0 . N4f76) (fxdiv0 . N4f75) (fxdiv-and-mod . N4f74) (fxdiv . N4f73) (fxcopy-bit-field . N4f72) (fxcopy-bit . N4f71) (fxbit-set? . N4f70) (fxbit-field . N4f6f) (fxbit-count . N4f6e) (fxarithmetic-shift-right . N4f6d) (fxarithmetic-shift-left . N4f6c) (fxarithmetic-shift . N4f6b) (fxand . N4f6a) (fx>? . N4f69) (fx>=? . N4f68) (fx=? . N4f67) (fx<? . N4f66) (fx<=? . N4f65) (fx-/carry . N4f64) (fx- . N4f63) (fx+/carry . N4f62) (fx+ . N4f61) (fx*/carry . N4f60) (fx* . N4f5f) (greatest-fixnum . N4f5e) (least-fixnum . N4f5d) (fixnum-width . N4f5c) (fixnum? . N4f5b) (bitwise-rotate-bit-field . N4f5a) (bitwise-reverse-bit-field . N4f59) (bitwise-length . N4f58) (bitwise-if . N4f57) (bitwise-first-bit-set . N4f56) (bitwise-copy-bit-field . N4f55) (bitwise-copy-bit . N4f54) (bitwise-bit-set? . N4f53) (bitwise-bit-field . N4f52) (bitwise-bit-count . N4f51) (bitwise-xor . N4f50) (bitwise-ior . N4f4f) (bitwise-and . N4f4e) (bitwise-not . N4f4d) (bitwise-arithmetic-shift-right . N4f4c) (bitwise-arithmetic-shift-left . N4f4b) (bitwise-arithmetic-shift . N4f4a) (zero? . N4f49) (vector? . N4f48) (vector-set! . N4f47) (vector-ref . N4f46) (vector-map . N4f45) (vector-length . N4f44) (vector-for-each . N4f43) (vector-fill! . N4f42) (vector->list . N4f41) (vector . N4f40) (values . N4f3f) (truncate . N4f3e) (tan . N4f3d) (symbol? . N4f3c) (symbol=? . N4f3b) (symbol->string . N4f3a) (substring . N4f39) (string? . N4f38) (string>? . N4f37) (string>=? . N4f36) (string=? . N4f35) (string<? . N4f34) (string<=? . N4f33) (string-ref . N4f32) (string-length . N4f31) (string-for-each . N4f30) (string-copy . N4f2f) (string-append . N4f2e) (string->symbol . N4f2d) (string->number . N4f2c) (string->list . N4f2b) (string . N4f2a) (sqrt . N4f29) (sin . N4f28) (round . N4f27) (reverse . N4f26) (real? . N4f25) (real-valued? . N4f24) (real-part . N4f23) (rationalize . N4f22) (rational? . N4f21) (rational-valued? . N4f20) (procedure? . N4f1f) (positive? . N4f1e) (pair? . N4f1d) (odd? . N4f1c) (numerator . N4f1b) (number? . N4f1a) (number->string . N4f19) (null? . N4f18) (not . N4f17) (negative? . N4f16) (nan? . N4f15) (min . N4f14) (max . N4f13) (map . N4f12) (make-vector . N4f11) (make-string . N4f10) (make-rectangular . N4f0f) (make-polar . N4f0e) (magnitude . N4f0d) (log . N4f0c) (list? . N4f0b) (list-tail . N4f0a) (list-ref . N4f09) (list->vector . N4f08) (list->string . N4f07) (list . N4f06) (length . N4f05) (lcm . N4f04) (integer? . N4f03) (integer-valued? . N4f02) (integer->char . N4f01) (infinite? . N4f00) (inexact? . N4eff) (inexact . N4efe) (imag-part . N4efd) (gcd . N4efc) (for-each . N4efb) (floor . N4efa) (finite? . N4ef9) (expt . N4ef8) (exp . N4ef7) (exact? . N4ef6) (exact-integer-sqrt . N4ef5) (exact . N4ef4) (even? . N4ef3) (error . N4ef2) (eqv? . N4ef1) (equal? . N4ef0) (eq? . N4eef) (dynamic-wind . N4eee) (div0-and-mod0 . N4eed) (mod0 . N4eec) (div0 . N4eeb) (div-and-mod . N4eea) (mod . N4ee9) (div . N4ee8) (denominator . N4ee7) (cos . N4ee6) (cons . N4ee5) (complex? . N4ee4) (char? . N4ee3) (char>? . N4ee2) (char>=? . N4ee1) (char=? . N4ee0) (char<? . N4edf) (char<=? . N4ede) (char->integer . N4edd) (ceiling . N4edc) (call-with-values . N4edb) (call/cc . N4eda) (call-with-current-continuation . N4ed9) (cddddr . N4ed8) (cdddar . N4ed7) (cddadr . N4ed6) (cddaar . N4ed5) (cdaddr . N4ed4) (cdadar . N4ed3) (cdaadr . N4ed2) (cdaaar . N4ed1) (cadddr . N4ed0) (caddar . N4ecf) (cadadr . N4ece) (cadaar . N4ecd) (caaddr . N4ecc) (caadar . N4ecb) (caaadr . N4eca) (caaaar . N4ec9) (cdddr . N4ec8) (cddar . N4ec7) (cdadr . N4ec6) (cdaar . N4ec5) (caddr . N4ec4) (cadar . N4ec3) (caadr . N4ec2) (caaar . N4ec1) (cddr . N4ec0) (cdar . N4ebf) (cadr . N4ebe) (caar . N4ebd) (cdr . N4ebc) (car . N4ebb) (boolean? . N4eba) (boolean=? . N4eb9) (atan . N4eb8) (assertion-violation . N4eb7) (asin . N4eb6) (apply . N4eb5) (append . N4eb4) (angle . N4eb3) (acos . N4eb2) (abs . N4eb1) (/ . N4eb0) (* . N4eaf) (- . N4eae) (+ . N4ead) (>= . N4eac) (> . N4eab) (= . N4eaa) (<= . N4ea9) (< . N4ea8) (library . N4ea7) (&no-nans . N4ea6) (&no-infinities . N4ea5) (&i/o-encoding . N4ea4) (&i/o-decoding . N4ea3) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99) (&undefined . N4e98) (&syntax . N4e97) (&lexical . N4e96) (&implementation-restriction . N4e95) (&non-continuable . N4e94) (&who . N4e93) (&irritants . N4e92) (&assertion . N4e91) (&violation . N4e90) (&error . N4e8f) (&serious . N4e8e) (&warning . N4e8d) (&message . N4e8c) (&condition . N4e8b) (define-condition-type . N4e8a) (define-enumeration . N4e89) (define-record-type . N4e88) (parent-rtd . N4e87) (nongenerative . N4e86) (opaque . N4e85) (sealed . N4e84) (protocol . N4e83) (parent . N4e82) (immutable . N4e81) (mutable . N4e80) (fields . N4e7f) (error-handling-mode . N4e7e) (file-options . N4e7d) (buffer-mode . N4e7c) (eol-style . N4e7b) (guard . N4e7a) (unsyntax-splicing . N4e77) (unsyntax . N4e76) (unquote-splicing . N4e75) (unquote . N4e74) (_ . N4e73) (else . N4e72) (=> . N4e71) (... . N4e70) (assert . N4e6f) (endianness . N4e6e) (time . N4e6c) (do . N4e6b) (cond . N4e6a) (let* . N4e69) (let*-values . N4e68) (let-values . N4e67) (identifier-syntax . N4e66) (with-syntax . N4e65) (quasisyntax . N4e64) (quasiquote . N4e63) (syntax-rules . N4e62) (include . N4e61) (record-constructor-descriptor . N4e5f) (record-type-descriptor . N4e5e) (case . N4e5d) (unless . N4e5b) (when . N4e5a) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec* . N4e55) (letrec . N4e54) (case-lambda . N4e52) (lambda . N4e51) (syntax . N4e50) (syntax-case . N4e4f) (quote . N4e4e) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (import . N4e49) (begin . N4e48) (define-syntax . N4e46) (define . N4e45)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51ed '(psyntax null-environment-5) '() '() '() '() '((make-promise . N5048) (unquote-splicing . N4e75) (unquote . N4e74) (_ . N4e73) (else . N4e72) (=> . N4e71) (... . N4e70) (delay . N4e6d) (do . N4e6b) (cond . N4e6a) (let* . N4e69) (quasiquote . N4e63) (syntax-rules . N4e62) (case . N4e5d) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec . N4e54) (lambda . N4e51) (quote . N4e4e) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (begin . N4e48) (define-syntax . N4e46) (define . N4e45)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51ee '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . N50f9) (string-ci>=? . N50f8) (string-ci=? . N50f7) (string-ci<? . N50f6) (string-ci<=? . N50f5) (char-whitespace? . N50f4) (char-upper-case? . N50f3) (char-numeric? . N50f1) (char-lower-case? . N50f0) (char-upcase . N50ee) (char-downcase . N50eb) (char-ci>? . N50ea) (char-ci>=? . N50e9) (char-ci=? . N50e8) (char-ci<? . N50e7) (char-ci<=? . N50e6) (char-alphabetic? . N50e5) (call-with-output-file . N50b9) (call-with-input-file . N50b8) (write-char . N50b7) (write . N50b6) (with-output-to-file . N50b5) (with-input-from-file . N50b4) (read-char . N50b3) (read . N50b2) (peek-char . N50b1) (open-output-file . N50b0) (open-input-file . N50af) (newline . N50ae) (display . N50ad) (close-output-port . N50ac) (close-input-port . N50ab) (eof-object . N50a9) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (scheme-report-environment . N31dc) (quotient . N504e) (null-environment . N31da) (remainder . N504d) (modulo . N504c) (inexact->exact . N504b) (force . N504a) (exact->inexact . N5049) (make-promise . N5048) (string-fill! . N5046) (string-set! . N5045) (set-cdr! . N5044) (set-car! . N5043) (memv . N503d) (memq . N503c) (member . N503a) (assv . N5032) (assq . N5031) (assoc . N502f) (eval . N31e0) (zero? . N4f49) (vector? . N4f48) (vector-set! . N4f47) (vector-ref . N4f46) (vector-length . N4f44) (vector-fill! . N4f42) (vector->list . N4f41) (vector . N4f40) (values . N4f3f) (truncate . N4f3e) (tan . N4f3d) (symbol? . N4f3c) (symbol->string . N4f3a) (substring . N4f39) (string? . N4f38) (string>? . N4f37) (string>=? . N4f36) (string=? . N4f35) (string<? . N4f34) (string<=? . N4f33) (string-ref . N4f32) (string-length . N4f31) (string-copy . N4f2f) (string-append . N4f2e) (string->symbol . N4f2d) (string->number . N4f2c) (string->list . N4f2b) (string . N4f2a) (sqrt . N4f29) (sin . N4f28) (round . N4f27) (reverse . N4f26) (real? . N4f25) (real-part . N4f23) (rationalize . N4f22) (rational? . N4f21) (procedure? . N4f1f) (positive? . N4f1e) (pair? . N4f1d) (odd? . N4f1c) (numerator . N4f1b) (number? . N4f1a) (number->string . N4f19) (not . N4f17) (negative? . N4f16) (min . N4f14) (max . N4f13) (map . N4f12) (make-vector . N4f11) (make-string . N4f10) (make-rectangular . N4f0f) (make-polar . N4f0e) (magnitude . N4f0d) (log . N4f0c) (list? . N4f0b) (list-tail . N4f0a) (list-ref . N4f09) (list->vector . N4f08) (list->string . N4f07) (list . N4f06) (length . N4f05) (lcm . N4f04) (integer? . N4f03) (integer->char . N4f01) (inexact? . N4eff) (imag-part . N4efd) (gcd . N4efc) (for-each . N4efb) (floor . N4efa) (expt . N4ef8) (exp . N4ef7) (exact? . N4ef6) (even? . N4ef3) (eqv? . N4ef1) (equal? . N4ef0) (eq? . N4eef) (dynamic-wind . N4eee) (denominator . N4ee7) (cos . N4ee6) (cons . N4ee5) (complex? . N4ee4) (char? . N4ee3) (char>? . N4ee2) (char>=? . N4ee1) (char=? . N4ee0) (char<? . N4edf) (char<=? . N4ede) (char->integer . N4edd) (ceiling . N4edc) (call-with-values . N4edb) (call-with-current-continuation . N4ed9) (cddddr . N4ed8) (cdddar . N4ed7) (cddadr . N4ed6) (cddaar . N4ed5) (cdaddr . N4ed4) (cdadar . N4ed3) (cdaadr . N4ed2) (cdaaar . N4ed1) (cadddr . N4ed0) (caddar . N4ecf) (cadadr . N4ece) (cadaar . N4ecd) (caaddr . N4ecc) (caadar . N4ecb) (caaadr . N4eca) (caaaar . N4ec9) (cdddr . N4ec8) (cddar . N4ec7) (cdadr . N4ec6) (cdaar . N4ec5) (caddr . N4ec4) (cadar . N4ec3) (caadr . N4ec2) (caaar . N4ec1) (cddr . N4ec0) (cdar . N4ebf) (cadr . N4ebe) (caar . N4ebd) (cdr . N4ebc) (car . N4ebb) (boolean? . N4eba) (atan . N4eb8) (asin . N4eb6) (apply . N4eb5) (append . N4eb4) (angle . N4eb3) (acos . N4eb2) (abs . N4eb1) (/ . N4eb0) (* . N4eaf) (- . N4eae) (+ . N4ead) (>= . N4eac) (> . N4eab) (= . N4eaa) (<= . N4ea9) (< . N4ea8) (unquote-splicing . N4e75) (unquote . N4e74) (else . N4e72) (=> . N4e71) (... . N4e70) (delay . N4e6d) (do . N4e6b) (cond . N4e6a) (let* . N4e69) (quasiquote . N4e63) (syntax-rules . N4e62) (case . N4e5d) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec . N4e54) (lambda . N4e51) (quote . N4e4e) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (begin . N4e48) (define-syntax . N4e46) (define . N4e45)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51ef '(psyntax modules) '() '() '() '() '((module . N4e47)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f0 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f1 '(rnrs) '(6) '() '() '() '((regexp? . N51ac) (string-upcase . N5101) (string-titlecase . N5100) (string-normalize-nfkd . N50ff) (string-normalize-nfkc . N50fe) (string-normalize-nfd . N50fd) (string-normalize-nfc . N50fc) (string-foldcase . N50fb) (string-downcase . N50fa) (string-ci>? . N50f9) (string-ci>=? . N50f8) (string-ci=? . N50f7) (string-ci<? . N50f6) (string-ci<=? . N50f5) (char-whitespace? . N50f4) (char-upper-case? . N50f3) (char-title-case? . N50f2) (char-numeric? . N50f1) (char-lower-case? . N50f0) (char-general-category . N50ef) (char-upcase . N50ee) (char-titlecase . N50ed) (char-foldcase . N50ec) (char-downcase . N50eb) (char-ci>? . N50ea) (char-ci>=? . N50e9) (char-ci=? . N50e8) (char-ci<? . N50e7) (char-ci<=? . N50e6) (char-alphabetic? . N50e5) (make-variable-transformer . N2f47) (identifier? . N3202) (generate-temporaries . N31ee) (free-identifier=? . N31f0) (syntax->datum . N3206) (datum->syntax . N3204) (bound-identifier=? . N31f2) (record-type-descriptor? . N50e4) (record-predicate . N50e3) (record-mutator . N50e2) (record-constructor . N50e1) (record-accessor . N50e0) (make-record-type-descriptor . N50df) (make-record-constructor-descriptor . N50de) (record? . N50dd) (record-type-uid . N50dc) (record-type-sealed? . N50db) (record-type-parent . N50da) (record-type-opaque? . N50d9) (record-type-name . N50d8) (record-type-generative? . N50d7) (record-type-field-names . N50d6) (record-rtd . N50d5) (record-field-mutable? . N50d4) (delete-file . N50d3) (file-exists? . N50d2) (vector-sort! . N50d1) (vector-sort . N50d0) (list-sort . N50cf) (symbol-hash . N50ce) (string-ci-hash . N50cd) (string-hash . N50cc) (equal-hash . N50cb) (hashtable-equivalence-function . N50ca) (make-hashtable . N50c9) (hashtable-hash-function . N50c8) (make-eqv-hashtable . N50c7) (make-eq-hashtable . N50c6) (hashtable? . N50c5) (hashtable-update! . N50c4) (hashtable-size . N50c3) (hashtable-set! . N50c2) (hashtable-ref . N50c1) (hashtable-mutable? . N50c0) (hashtable-keys . N50bf) (hashtable-entries . N50be) (hashtable-delete! . N50bd) (hashtable-copy . N50bc) (hashtable-contains? . N50bb) (hashtable-clear! . N50ba) (call-with-output-file . N50b9) (call-with-input-file . N50b8) (write-char . N50b7) (write . N50b6) (with-output-to-file . N50b5) (with-input-from-file . N50b4) (read-char . N50b3) (read . N50b2) (peek-char . N50b1) (open-output-file . N50b0) (open-input-file . N50af) (newline . N50ae) (display . N50ad) (close-output-port . N50ac) (close-input-port . N50ab) (eof-object? . N50aa) (eof-object . N50a9) (current-error-port . N50a8) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (utf-8-codec . N50a3) (utf-16-codec . N50a2) (transcoder-error-handling-mode . N50a1) (transcoder-eol-style . N50a0) (transcoder-codec . N509f) (transcoded-port . N509e) (textual-port? . N509d) (string->bytevector . N509c) (standard-output-port . N509b) (standard-input-port . N509a) (standard-error-port . N5099) (set-port-position! . N5098) (put-u8 . N5097) (put-string . N5096) (put-datum . N5095) (put-char . N5094) (put-bytevector . N5093) (port? . N5092) (port-transcoder . N5091) (port-position . N5090) (port-has-set-port-position!? . N508f) (port-has-port-position? . N508e) (port-eof? . N508d) (output-port-buffer-mode . N508c) (open-string-output-port . N508b) (open-string-input-port . N508a) (open-file-output-port . N5089) (open-file-input/output-port . N5088) (open-file-input-port . N5087) (open-bytevector-output-port . N5086) (open-bytevector-input-port . N5085) (native-transcoder . N5084) (native-eol-style . N5083) (make-transcoder . N5082) (latin-1-codec . N5081) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (make-i/o-encoding-error . N5076) (make-i/o-decoding-error . N5075) (make-custom-textual-output-port . N5074) (make-custom-textual-input/output-port . N5073) (make-custom-textual-input-port . N5072) (make-custom-binary-output-port . N5071) (make-custom-binary-input/output-port . N5070) (make-custom-binary-input-port . N506f) (make-bytevector . N506e) (lookahead-u8 . N506d) (lookahead-char . N506c) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (i/o-encoding-error? . N505e) (i/o-encoding-error-char . N505d) (i/o-decoding-error? . N505c) (get-u8 . N505b) (get-string-n! . N505a) (get-string-n . N5059) (get-string-all . N5058) (get-line . N5057) (get-datum . N5056) (get-char . N5055) (get-bytevector-some . N5054) (get-bytevector-n! . N5053) (get-bytevector-n . N5052) (get-bytevector-all . N5051) (flush-output-port . N5050) (close-port . N504f) (exit . N5047) (command-line . N4cd9) (remove . N5042) (remv . N5041) (remp . N5040) (remq . N503f) (partition . N503e) (memv . N503d) (memq . N503c) (memp . N503b) (member . N503a) (exists . N5039) (for-all . N5038) (fold-right . N5037) (fold-left . N5036) (find . N5035) (filter . N5034) (cons* . N5033) (assv . N5032) (assq . N5031) (assp . N5030) (assoc . N502f) (call-with-string-output-port . N502e) (call-with-port . N502d) (call-with-bytevector-output-port . N502c) (bytevector->string . N502b) (buffer-mode? . N502a) (binary-port? . N5029) (with-exception-handler . N5028) (raise-continuable . N5027) (raise . N5026) (make-enumeration . N5025) (enum-set=? . N5024) (enum-set-universe . N5023) (enum-set-union . N5022) (enum-set-subset? . N5021) (enum-set-projection . N5020) (enum-set-member? . N501f) (enum-set-intersection . N501e) (enum-set-indexer . N501d) (enum-set-difference . N501c) (enum-set-constructor . N501b) (enum-set-complement . N501a) (enum-set->list . N5019) (who-condition? . N5018) (warning? . N5017) (violation? . N5016) (undefined-violation? . N5015) (syntax-violation? . N5014) (syntax-violation-subform . N5013) (syntax-violation-form . N5012) (syntax-violation . N3200) (simple-conditions . N5011) (serious-condition? . N5010) (non-continuable-violation? . N500f) (message-condition? . N500e) (make-who-condition . N500d) (make-warning . N500c) (make-violation . N500b) (make-undefined-violation . N500a) (make-syntax-violation . N5009) (make-serious-condition . N5008) (make-non-continuable-violation . N5007) (make-message-condition . N5006) (make-lexical-violation . N5005) (make-irritants-condition . N5004) (make-implementation-restriction-violation . N5003) (make-error . N5002) (make-assertion-violation . N5001) (lexical-violation? . N5000) (irritants-condition? . N4fff) (implementation-restriction-violation? . N4ffe) (error? . N4ffd) (condition-who . N4ffc) (condition-predicate . N4ffb) (condition-message . N4ffa) (condition-irritants . N4ff9) (condition-accessor . N4ff8) (condition . N4ff7) (assertion-violation? . N4ff6) (condition? . N4ff5) (utf32->string . N4ff4) (utf16->string . N4ff3) (utf8->string . N4ff2) (uint-list->bytevector . N4ff1) (u8-list->bytevector . N4ff0) (string->utf8 . N4fef) (string->utf32 . N4fee) (string->utf16 . N4fed) (sint-list->bytevector . N4fec) (native-endianness . N4feb) (bytevector? . N4fea) (bytevector=? . N4fe9) (bytevector-uint-set! . N4fe8) (bytevector-uint-ref . N4fe7) (bytevector-u8-set! . N4fe6) (bytevector-u8-ref . N4fe5) (bytevector-u64-set! . N4fe4) (bytevector-u64-ref . N4fe3) (bytevector-u64-native-set! . N4fe2) (bytevector-u64-native-ref . N4fe1) (bytevector-u32-set! . N4fe0) (bytevector-u32-ref . N4fdf) (bytevector-u32-native-set! . N4fde) (bytevector-u32-native-ref . N4fdd) (bytevector-u16-set! . N4fdc) (bytevector-u16-ref . N4fdb) (bytevector-u16-native-set! . N4fda) (bytevector-u16-native-ref . N4fd9) (bytevector-sint-set! . N4fd8) (bytevector-sint-ref . N4fd7) (bytevector-s8-set! . N4fd6) (bytevector-s8-ref . N4fd5) (bytevector-s64-set! . N4fd4) (bytevector-s64-ref . N4fd3) (bytevector-s64-native-set! . N4fd2) (bytevector-s64-native-ref . N4fd1) (bytevector-s32-set! . N4fd0) (bytevector-s32-ref . N4fcf) (bytevector-s32-native-set! . N4fce) (bytevector-s32-native-ref . N4fcd) (bytevector-s16-set! . N4fcc) (bytevector-s16-ref . N4fcb) (bytevector-s16-native-set! . N4fca) (bytevector-s16-native-ref . N4fc9) (bytevector-length . N4fc8) (bytevector-ieee-single-ref . N4fc7) (bytevector-ieee-single-set! . N4fc6) (bytevector-ieee-single-native-set! . N4fc5) (bytevector-ieee-single-native-ref . N4fc4) (bytevector-ieee-double-set! . N4fc3) (bytevector-ieee-double-ref . N4fc2) (bytevector-ieee-double-native-set! . N4fc1) (bytevector-ieee-double-native-ref . N4fc0) (bytevector-fill! . N4fbf) (bytevector-copy! . N4fbe) (bytevector-copy . N4fbd) (bytevector->uint-list . N4fbc) (bytevector->u8-list . N4fbb) (bytevector->sint-list . N4fba) (no-nans-violation? . N4fb9) (no-infinities-violation? . N4fb8) (make-no-nans-violation . N4fb7) (make-no-infinities-violation . N4fb6) (real->flonum . N4fb5) (flzero? . N4fb4) (fltruncate . N4fb3) (fltan . N4fb2) (flsqrt . N4fb1) (flsin . N4fb0) (flround . N4faf) (flpositive? . N4fae) (flonum? . N4fad) (flodd? . N4fac) (flnumerator . N4fab) (flnegative? . N4faa) (flnan? . N4fa9) (flmod0 . N4fa8) (flmod . N4fa7) (flmin . N4fa6) (flmax . N4fa5) (fllog . N4fa4) (flinteger? . N4fa3) (flinfinite? . N4fa2) (flfloor . N4fa1) (flfinite? . N4fa0) (flexpt . N4f9f) (flexp . N4f9e) (fleven? . N4f9d) (fldiv0-and-mod0 . N4f9c) (fldiv0 . N4f9b) (fldiv-and-mod . N4f9a) (fldiv . N4f99) (fldenominator . N4f98) (flcos . N4f97) (flceiling . N4f96) (flatan . N4f95) (flasin . N4f94) (flacos . N4f93) (flabs . N4f92) (fl>? . N4f91) (fl>=? . N4f90) (fl=? . N4f8f) (fl<? . N4f8e) (fl<=? . N4f8d) (fl/ . N4f8c) (fl- . N4f8b) (fl+ . N4f8a) (fl* . N4f89) (fixnum->flonum . N4f88) (fxzero? . N4f87) (fxxor . N4f86) (fxrotate-bit-field . N4f85) (fxreverse-bit-field . N4f84) (fxpositive? . N4f83) (fxodd? . N4f82) (fxnot . N4f81) (fxnegative? . N4f80) (fxmod0 . N4f7f) (fxmod . N4f7e) (fxmin . N4f7d) (fxmax . N4f7c) (fxlength . N4f7b) (fxior . N4f7a) (fxif . N4f79) (fxfirst-bit-set . N4f78) (fxeven? . N4f77) (fxdiv0-and-mod0 . N4f76) (fxdiv0 . N4f75) (fxdiv-and-mod . N4f74) (fxdiv . N4f73) (fxcopy-bit-field . N4f72) (fxcopy-bit . N4f71) (fxbit-set? . N4f70) (fxbit-field . N4f6f) (fxbit-count . N4f6e) (fxarithmetic-shift-right . N4f6d) (fxarithmetic-shift-left . N4f6c) (fxarithmetic-shift . N4f6b) (fxand . N4f6a) (fx>? . N4f69) (fx>=? . N4f68) (fx=? . N4f67) (fx<? . N4f66) (fx<=? . N4f65) (fx-/carry . N4f64) (fx- . N4f63) (fx+/carry . N4f62) (fx+ . N4f61) (fx*/carry . N4f60) (fx* . N4f5f) (greatest-fixnum . N4f5e) (least-fixnum . N4f5d) (fixnum-width . N4f5c) (fixnum? . N4f5b) (bitwise-rotate-bit-field . N4f5a) (bitwise-reverse-bit-field . N4f59) (bitwise-length . N4f58) (bitwise-if . N4f57) (bitwise-first-bit-set . N4f56) (bitwise-copy-bit-field . N4f55) (bitwise-copy-bit . N4f54) (bitwise-bit-set? . N4f53) (bitwise-bit-field . N4f52) (bitwise-bit-count . N4f51) (bitwise-xor . N4f50) (bitwise-ior . N4f4f) (bitwise-and . N4f4e) (bitwise-not . N4f4d) (bitwise-arithmetic-shift-right . N4f4c) (bitwise-arithmetic-shift-left . N4f4b) (bitwise-arithmetic-shift . N4f4a) (zero? . N4f49) (vector? . N4f48) (vector-set! . N4f47) (vector-ref . N4f46) (vector-map . N4f45) (vector-length . N4f44) (vector-for-each . N4f43) (vector-fill! . N4f42) (vector->list . N4f41) (vector . N4f40) (values . N4f3f) (truncate . N4f3e) (tan . N4f3d) (symbol? . N4f3c) (symbol=? . N4f3b) (symbol->string . N4f3a) (substring . N4f39) (string? . N4f38) (string>? . N4f37) (string>=? . N4f36) (string=? . N4f35) (string<? . N4f34) (string<=? . N4f33) (string-ref . N4f32) (string-length . N4f31) (string-for-each . N4f30) (string-copy . N4f2f) (string-append . N4f2e) (string->symbol . N4f2d) (string->number . N4f2c) (string->list . N4f2b) (string . N4f2a) (sqrt . N4f29) (sin . N4f28) (round . N4f27) (reverse . N4f26) (real? . N4f25) (real-valued? . N4f24) (real-part . N4f23) (rationalize . N4f22) (rational? . N4f21) (rational-valued? . N4f20) (procedure? . N4f1f) (positive? . N4f1e) (pair? . N4f1d) (odd? . N4f1c) (numerator . N4f1b) (number? . N4f1a) (number->string . N4f19) (null? . N4f18) (not . N4f17) (negative? . N4f16) (nan? . N4f15) (min . N4f14) (max . N4f13) (map . N4f12) (make-vector . N4f11) (make-string . N4f10) (make-rectangular . N4f0f) (make-polar . N4f0e) (magnitude . N4f0d) (log . N4f0c) (list? . N4f0b) (list-tail . N4f0a) (list-ref . N4f09) (list->vector . N4f08) (list->string . N4f07) (list . N4f06) (length . N4f05) (lcm . N4f04) (integer? . N4f03) (integer-valued? . N4f02) (integer->char . N4f01) (infinite? . N4f00) (inexact? . N4eff) (inexact . N4efe) (imag-part . N4efd) (gcd . N4efc) (for-each . N4efb) (floor . N4efa) (finite? . N4ef9) (expt . N4ef8) (exp . N4ef7) (exact? . N4ef6) (exact-integer-sqrt . N4ef5) (exact . N4ef4) (even? . N4ef3) (error . N4ef2) (eqv? . N4ef1) (equal? . N4ef0) (eq? . N4eef) (dynamic-wind . N4eee) (div0-and-mod0 . N4eed) (mod0 . N4eec) (div0 . N4eeb) (div-and-mod . N4eea) (mod . N4ee9) (div . N4ee8) (denominator . N4ee7) (cos . N4ee6) (cons . N4ee5) (complex? . N4ee4) (char? . N4ee3) (char>? . N4ee2) (char>=? . N4ee1) (char=? . N4ee0) (char<? . N4edf) (char<=? . N4ede) (char->integer . N4edd) (ceiling . N4edc) (call-with-values . N4edb) (call/cc . N4eda) (call-with-current-continuation . N4ed9) (cddddr . N4ed8) (cdddar . N4ed7) (cddadr . N4ed6) (cddaar . N4ed5) (cdaddr . N4ed4) (cdadar . N4ed3) (cdaadr . N4ed2) (cdaaar . N4ed1) (cadddr . N4ed0) (caddar . N4ecf) (cadadr . N4ece) (cadaar . N4ecd) (caaddr . N4ecc) (caadar . N4ecb) (caaadr . N4eca) (caaaar . N4ec9) (cdddr . N4ec8) (cddar . N4ec7) (cdadr . N4ec6) (cdaar . N4ec5) (caddr . N4ec4) (cadar . N4ec3) (caadr . N4ec2) (caaar . N4ec1) (cddr . N4ec0) (cdar . N4ebf) (cadr . N4ebe) (caar . N4ebd) (cdr . N4ebc) (car . N4ebb) (boolean? . N4eba) (boolean=? . N4eb9) (atan . N4eb8) (assertion-violation . N4eb7) (asin . N4eb6) (apply . N4eb5) (append . N4eb4) (angle . N4eb3) (acos . N4eb2) (abs . N4eb1) (/ . N4eb0) (* . N4eaf) (- . N4eae) (+ . N4ead) (>= . N4eac) (> . N4eab) (= . N4eaa) (<= . N4ea9) (< . N4ea8) (&no-nans . N4ea6) (&no-infinities . N4ea5) (&i/o-encoding . N4ea4) (&i/o-decoding . N4ea3) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99) (&undefined . N4e98) (&syntax . N4e97) (&lexical . N4e96) (&implementation-restriction . N4e95) (&non-continuable . N4e94) (&who . N4e93) (&irritants . N4e92) (&assertion . N4e91) (&violation . N4e90) (&error . N4e8f) (&serious . N4e8e) (&warning . N4e8d) (&message . N4e8c) (&condition . N4e8b) (define-condition-type . N4e8a) (define-enumeration . N4e89) (define-record-type . N4e88) (parent-rtd . N4e87) (nongenerative . N4e86) (opaque . N4e85) (sealed . N4e84) (protocol . N4e83) (parent . N4e82) (immutable . N4e81) (mutable . N4e80) (fields . N4e7f) (error-handling-mode . N4e7e) (file-options . N4e7d) (buffer-mode . N4e7c) (eol-style . N4e7b) (guard . N4e7a) (unsyntax-splicing . N4e77) (unsyntax . N4e76) (unquote-splicing . N4e75) (unquote . N4e74) (_ . N4e73) (else . N4e72) (=> . N4e71) (... . N4e70) (assert . N4e6f) (endianness . N4e6e) (do . N4e6b) (cond . N4e6a) (let* . N4e69) (let*-values . N4e68) (let-values . N4e67) (identifier-syntax . N4e66) (with-syntax . N4e65) (quasisyntax . N4e64) (quasiquote . N4e63) (syntax-rules . N4e62) (record-constructor-descriptor . N4e5f) (record-type-descriptor . N4e5e) (case . N4e5d) (unless . N4e5b) (when . N4e5a) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec* . N4e55) (letrec . N4e54) (case-lambda . N4e52) (lambda . N4e51) (syntax . N4e50) (syntax-case . N4e4f) (quote . N4e4e) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (begin . N4e48) (define-syntax . N4e46) (define . N4e45)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f2 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . N31dc) (quotient . N504e) (null-environment . N31da) (remainder . N504d) (modulo . N504c) (inexact->exact . N504b) (force . N504a) (exact->inexact . N5049) (make-promise . N5048) (delay . N4e6d)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f3 '(rnrs control) '(6) '() '() '() '((do . N4e6b) (unless . N4e5b) (when . N4e5a) (case-lambda . N4e52)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f4 '(rnrs eval) '(6) '() '() '() '((eval . N31e0) (environment . N31d8)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f5 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . N5044) (set-car! . N5043)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f6 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . N5046) (string-set! . N5045)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f7 '(rnrs programs) '(6) '() '() '() '((exit . N5047) (command-line . N4cd9)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f8 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . N2f47) (identifier? . N3202) (generate-temporaries . N31ee) (free-identifier=? . N31f0) (syntax->datum . N3206) (datum->syntax . N3204) (bound-identifier=? . N31f2) (syntax-violation . N3200) (unsyntax-splicing . N4e77) (unsyntax . N4e76) (_ . N4e73) (... . N4e70) (with-syntax . N4e65) (quasisyntax . N4e64) (syntax . N4e50) (syntax-case . N4e4f)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51f9 '(rnrs files) '(6) '() '() '() '((delete-file . N50d3) (file-exists? . N50d2) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51fa '(rnrs sorting) '(6) '() '() '() '((vector-sort! . N50d1) (vector-sort . N50d0) (list-sort . N50cf)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51fb '(rnrs base) '(6) '() '() '() '((zero? . N4f49) (vector? . N4f48) (vector-set! . N4f47) (vector-ref . N4f46) (vector-map . N4f45) (vector-length . N4f44) (vector-for-each . N4f43) (vector-fill! . N4f42) (vector->list . N4f41) (vector . N4f40) (values . N4f3f) (truncate . N4f3e) (tan . N4f3d) (symbol? . N4f3c) (symbol=? . N4f3b) (symbol->string . N4f3a) (substring . N4f39) (string? . N4f38) (string>? . N4f37) (string>=? . N4f36) (string=? . N4f35) (string<? . N4f34) (string<=? . N4f33) (string-ref . N4f32) (string-length . N4f31) (string-for-each . N4f30) (string-copy . N4f2f) (string-append . N4f2e) (string->symbol . N4f2d) (string->number . N4f2c) (string->list . N4f2b) (string . N4f2a) (sqrt . N4f29) (sin . N4f28) (round . N4f27) (reverse . N4f26) (real? . N4f25) (real-valued? . N4f24) (real-part . N4f23) (rationalize . N4f22) (rational? . N4f21) (rational-valued? . N4f20) (procedure? . N4f1f) (positive? . N4f1e) (pair? . N4f1d) (odd? . N4f1c) (numerator . N4f1b) (number? . N4f1a) (number->string . N4f19) (null? . N4f18) (not . N4f17) (negative? . N4f16) (nan? . N4f15) (min . N4f14) (max . N4f13) (map . N4f12) (make-vector . N4f11) (make-string . N4f10) (make-rectangular . N4f0f) (make-polar . N4f0e) (magnitude . N4f0d) (log . N4f0c) (list? . N4f0b) (list-tail . N4f0a) (list-ref . N4f09) (list->vector . N4f08) (list->string . N4f07) (list . N4f06) (length . N4f05) (lcm . N4f04) (integer? . N4f03) (integer-valued? . N4f02) (integer->char . N4f01) (infinite? . N4f00) (inexact? . N4eff) (inexact . N4efe) (imag-part . N4efd) (gcd . N4efc) (for-each . N4efb) (floor . N4efa) (finite? . N4ef9) (expt . N4ef8) (exp . N4ef7) (exact? . N4ef6) (exact-integer-sqrt . N4ef5) (exact . N4ef4) (even? . N4ef3) (error . N4ef2) (eqv? . N4ef1) (equal? . N4ef0) (eq? . N4eef) (dynamic-wind . N4eee) (div0-and-mod0 . N4eed) (mod0 . N4eec) (div0 . N4eeb) (div-and-mod . N4eea) (mod . N4ee9) (div . N4ee8) (denominator . N4ee7) (cos . N4ee6) (cons . N4ee5) (complex? . N4ee4) (char? . N4ee3) (char>? . N4ee2) (char>=? . N4ee1) (char=? . N4ee0) (char<? . N4edf) (char<=? . N4ede) (char->integer . N4edd) (ceiling . N4edc) (call-with-values . N4edb) (call/cc . N4eda) (call-with-current-continuation . N4ed9) (cddddr . N4ed8) (cdddar . N4ed7) (cddadr . N4ed6) (cddaar . N4ed5) (cdaddr . N4ed4) (cdadar . N4ed3) (cdaadr . N4ed2) (cdaaar . N4ed1) (cadddr . N4ed0) (caddar . N4ecf) (cadadr . N4ece) (cadaar . N4ecd) (caaddr . N4ecc) (caadar . N4ecb) (caaadr . N4eca) (caaaar . N4ec9) (cdddr . N4ec8) (cddar . N4ec7) (cdadr . N4ec6) (cdaar . N4ec5) (caddr . N4ec4) (cadar . N4ec3) (caadr . N4ec2) (caaar . N4ec1) (cddr . N4ec0) (cdar . N4ebf) (cadr . N4ebe) (caar . N4ebd) (cdr . N4ebc) (car . N4ebb) (boolean? . N4eba) (boolean=? . N4eb9) (atan . N4eb8) (assertion-violation . N4eb7) (asin . N4eb6) (apply . N4eb5) (append . N4eb4) (angle . N4eb3) (acos . N4eb2) (abs . N4eb1) (/ . N4eb0) (* . N4eaf) (- . N4eae) (+ . N4ead) (>= . N4eac) (> . N4eab) (= . N4eaa) (<= . N4ea9) (< . N4ea8) (unquote-splicing . N4e75) (unquote . N4e74) (_ . N4e73) (else . N4e72) (=> . N4e71) (... . N4e70) (assert . N4e6f) (cond . N4e6a) (let* . N4e69) (let*-values . N4e68) (let-values . N4e67) (identifier-syntax . N4e66) (quasiquote . N4e63) (syntax-rules . N4e62) (case . N4e5d) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec* . N4e55) (letrec . N4e54) (lambda . N4e51) (quote . N4e4e) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (begin . N4e48) (define-syntax . N4e46) (define . N4e45)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51fc '(rnrs lists) '(6) '() '() '() '((remove . N5042) (remv . N5041) (remp . N5040) (remq . N503f) (partition . N503e) (memv . N503d) (memq . N503c) (memp . N503b) (member . N503a) (exists . N5039) (for-all . N5038) (fold-right . N5037) (fold-left . N5036) (find . N5035) (filter . N5034) (cons* . N5033) (assv . N5032) (assq . N5031) (assp . N5030) (assoc . N502f)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51fd '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . N50b9) (call-with-input-file . N50b8) (write-char . N50b7) (write . N50b6) (with-output-to-file . N50b5) (with-input-from-file . N50b4) (read-char . N50b3) (read . N50b2) (peek-char . N50b1) (open-output-file . N50b0) (open-input-file . N50af) (newline . N50ae) (display . N50ad) (close-output-port . N50ac) (close-input-port . N50ab) (eof-object? . N50aa) (eof-object . N50a9) (current-error-port . N50a8) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51fe '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . N506e) (utf32->string . N4ff4) (utf16->string . N4ff3) (utf8->string . N4ff2) (uint-list->bytevector . N4ff1) (u8-list->bytevector . N4ff0) (string->utf8 . N4fef) (string->utf32 . N4fee) (string->utf16 . N4fed) (sint-list->bytevector . N4fec) (native-endianness . N4feb) (bytevector? . N4fea) (bytevector=? . N4fe9) (bytevector-uint-set! . N4fe8) (bytevector-uint-ref . N4fe7) (bytevector-u8-set! . N4fe6) (bytevector-u8-ref . N4fe5) (bytevector-u64-set! . N4fe4) (bytevector-u64-ref . N4fe3) (bytevector-u64-native-set! . N4fe2) (bytevector-u64-native-ref . N4fe1) (bytevector-u32-set! . N4fe0) (bytevector-u32-ref . N4fdf) (bytevector-u32-native-set! . N4fde) (bytevector-u32-native-ref . N4fdd) (bytevector-u16-set! . N4fdc) (bytevector-u16-ref . N4fdb) (bytevector-u16-native-set! . N4fda) (bytevector-u16-native-ref . N4fd9) (bytevector-sint-set! . N4fd8) (bytevector-sint-ref . N4fd7) (bytevector-s8-set! . N4fd6) (bytevector-s8-ref . N4fd5) (bytevector-s64-set! . N4fd4) (bytevector-s64-ref . N4fd3) (bytevector-s64-native-set! . N4fd2) (bytevector-s64-native-ref . N4fd1) (bytevector-s32-set! . N4fd0) (bytevector-s32-ref . N4fcf) (bytevector-s32-native-set! . N4fce) (bytevector-s32-native-ref . N4fcd) (bytevector-s16-set! . N4fcc) (bytevector-s16-ref . N4fcb) (bytevector-s16-native-set! . N4fca) (bytevector-s16-native-ref . N4fc9) (bytevector-length . N4fc8) (bytevector-ieee-single-ref . N4fc7) (bytevector-ieee-single-set! . N4fc6) (bytevector-ieee-single-native-set! . N4fc5) (bytevector-ieee-single-native-ref . N4fc4) (bytevector-ieee-double-set! . N4fc3) (bytevector-ieee-double-ref . N4fc2) (bytevector-ieee-double-native-set! . N4fc1) (bytevector-ieee-double-native-ref . N4fc0) (bytevector-fill! . N4fbf) (bytevector-copy! . N4fbe) (bytevector-copy . N4fbd) (bytevector->uint-list . N4fbc) (bytevector->u8-list . N4fbb) (bytevector->sint-list . N4fba) (endianness . N4e6e)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N51ff '(rnrs unicode) '(6) '() '() '() '((string-upcase . N5101) (string-titlecase . N5100) (string-normalize-nfkd . N50ff) (string-normalize-nfkc . N50fe) (string-normalize-nfd . N50fd) (string-normalize-nfc . N50fc) (string-foldcase . N50fb) (string-downcase . N50fa) (string-ci>? . N50f9) (string-ci>=? . N50f8) (string-ci=? . N50f7) (string-ci<? . N50f6) (string-ci<=? . N50f5) (char-whitespace? . N50f4) (char-upper-case? . N50f3) (char-title-case? . N50f2) (char-numeric? . N50f1) (char-lower-case? . N50f0) (char-general-category . N50ef) (char-upcase . N50ee) (char-titlecase . N50ed) (char-foldcase . N50ec) (char-downcase . N50eb) (char-ci>? . N50ea) (char-ci>=? . N50e9) (char-ci=? . N50e8) (char-ci<? . N50e7) (char-ci<=? . N50e6) (char-alphabetic? . N50e5)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5200 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . N5028) (raise-continuable . N5027) (raise . N5026) (guard . N4e7a) (else . N4e72) (=> . N4e71)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5201 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . N4f5a) (bitwise-reverse-bit-field . N4f59) (bitwise-length . N4f58) (bitwise-if . N4f57) (bitwise-first-bit-set . N4f56) (bitwise-copy-bit-field . N4f55) (bitwise-copy-bit . N4f54) (bitwise-bit-set? . N4f53) (bitwise-bit-field . N4f52) (bitwise-bit-count . N4f51) (bitwise-xor . N4f50) (bitwise-ior . N4f4f) (bitwise-and . N4f4e) (bitwise-not . N4f4d) (bitwise-arithmetic-shift-right . N4f4c) (bitwise-arithmetic-shift-left . N4f4b) (bitwise-arithmetic-shift . N4f4a)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5202 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . N4f87) (fxxor . N4f86) (fxrotate-bit-field . N4f85) (fxreverse-bit-field . N4f84) (fxpositive? . N4f83) (fxodd? . N4f82) (fxnot . N4f81) (fxnegative? . N4f80) (fxmod0 . N4f7f) (fxmod . N4f7e) (fxmin . N4f7d) (fxmax . N4f7c) (fxlength . N4f7b) (fxior . N4f7a) (fxif . N4f79) (fxfirst-bit-set . N4f78) (fxeven? . N4f77) (fxdiv0-and-mod0 . N4f76) (fxdiv0 . N4f75) (fxdiv-and-mod . N4f74) (fxdiv . N4f73) (fxcopy-bit-field . N4f72) (fxcopy-bit . N4f71) (fxbit-set? . N4f70) (fxbit-field . N4f6f) (fxbit-count . N4f6e) (fxarithmetic-shift-right . N4f6d) (fxarithmetic-shift-left . N4f6c) (fxarithmetic-shift . N4f6b) (fxand . N4f6a) (fx>? . N4f69) (fx>=? . N4f68) (fx=? . N4f67) (fx<? . N4f66) (fx<=? . N4f65) (fx-/carry . N4f64) (fx- . N4f63) (fx+/carry . N4f62) (fx+ . N4f61) (fx*/carry . N4f60) (fx* . N4f5f) (greatest-fixnum . N4f5e) (least-fixnum . N4f5d) (fixnum-width . N4f5c) (fixnum? . N4f5b)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5203 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . N4fb9) (no-infinities-violation? . N4fb8) (make-no-nans-violation . N4fb7) (make-no-infinities-violation . N4fb6) (real->flonum . N4fb5) (flzero? . N4fb4) (fltruncate . N4fb3) (fltan . N4fb2) (flsqrt . N4fb1) (flsin . N4fb0) (flround . N4faf) (flpositive? . N4fae) (flonum? . N4fad) (flodd? . N4fac) (flnumerator . N4fab) (flnegative? . N4faa) (flnan? . N4fa9) (flmod0 . N4fa8) (flmod . N4fa7) (flmin . N4fa6) (flmax . N4fa5) (fllog . N4fa4) (flinteger? . N4fa3) (flinfinite? . N4fa2) (flfloor . N4fa1) (flfinite? . N4fa0) (flexpt . N4f9f) (flexp . N4f9e) (fleven? . N4f9d) (fldiv0-and-mod0 . N4f9c) (fldiv0 . N4f9b) (fldiv-and-mod . N4f9a) (fldiv . N4f99) (fldenominator . N4f98) (flcos . N4f97) (flceiling . N4f96) (flatan . N4f95) (flasin . N4f94) (flacos . N4f93) (flabs . N4f92) (fl>? . N4f91) (fl>=? . N4f90) (fl=? . N4f8f) (fl<? . N4f8e) (fl<=? . N4f8d) (fl/ . N4f8c) (fl- . N4f8b) (fl+ . N4f8a) (fl* . N4f89) (fixnum->flonum . N4f88) (&no-nans . N4ea6) (&no-infinities . N4ea5)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5204 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . N50ce) (string-ci-hash . N50cd) (string-hash . N50cc) (equal-hash . N50cb) (hashtable-equivalence-function . N50ca) (make-hashtable . N50c9) (hashtable-hash-function . N50c8) (make-eqv-hashtable . N50c7) (make-eq-hashtable . N50c6) (hashtable? . N50c5) (hashtable-update! . N50c4) (hashtable-size . N50c3) (hashtable-set! . N50c2) (hashtable-ref . N50c1) (hashtable-mutable? . N50c0) (hashtable-keys . N50bf) (hashtable-entries . N50be) (hashtable-delete! . N50bd) (hashtable-copy . N50bc) (hashtable-contains? . N50bb) (hashtable-clear! . N50ba)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5205 '(rnrs io ports) '(6) '() '() '() '((eof-object? . N50aa) (eof-object . N50a9) (current-error-port . N50a8) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (utf-8-codec . N50a3) (utf-16-codec . N50a2) (transcoder-error-handling-mode . N50a1) (transcoder-eol-style . N50a0) (transcoder-codec . N509f) (transcoded-port . N509e) (textual-port? . N509d) (string->bytevector . N509c) (standard-output-port . N509b) (standard-input-port . N509a) (standard-error-port . N5099) (set-port-position! . N5098) (put-u8 . N5097) (put-string . N5096) (put-datum . N5095) (put-char . N5094) (put-bytevector . N5093) (port? . N5092) (port-transcoder . N5091) (port-position . N5090) (port-has-set-port-position!? . N508f) (port-has-port-position? . N508e) (port-eof? . N508d) (output-port-buffer-mode . N508c) (open-string-output-port . N508b) (open-string-input-port . N508a) (open-file-output-port . N5089) (open-file-input/output-port . N5088) (open-file-input-port . N5087) (open-bytevector-output-port . N5086) (open-bytevector-input-port . N5085) (native-transcoder . N5084) (native-eol-style . N5083) (make-transcoder . N5082) (latin-1-codec . N5081) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (make-i/o-encoding-error . N5076) (make-i/o-decoding-error . N5075) (make-custom-textual-output-port . N5074) (make-custom-textual-input/output-port . N5073) (make-custom-textual-input-port . N5072) (make-custom-binary-output-port . N5071) (make-custom-binary-input/output-port . N5070) (make-custom-binary-input-port . N506f) (lookahead-u8 . N506d) (lookahead-char . N506c) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (i/o-encoding-error? . N505e) (i/o-encoding-error-char . N505d) (i/o-decoding-error? . N505c) (get-u8 . N505b) (get-string-n! . N505a) (get-string-n . N5059) (get-string-all . N5058) (get-line . N5057) (get-datum . N5056) (get-char . N5055) (get-bytevector-some . N5054) (get-bytevector-n! . N5053) (get-bytevector-n . N5052) (get-bytevector-all . N5051) (flush-output-port . N5050) (close-port . N504f) (call-with-string-output-port . N502e) (call-with-port . N502d) (call-with-bytevector-output-port . N502c) (bytevector->string . N502b) (buffer-mode? . N502a) (binary-port? . N5029) (&i/o-encoding . N4ea4) (&i/o-decoding . N4ea3) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99) (error-handling-mode . N4e7e) (file-options . N4e7d) (buffer-mode . N4e7c) (eol-style . N4e7b)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5206 '(rnrs enums) '(6) '() '() '() '((make-enumeration . N5025) (enum-set=? . N5024) (enum-set-universe . N5023) (enum-set-union . N5022) (enum-set-subset? . N5021) (enum-set-projection . N5020) (enum-set-member? . N501f) (enum-set-intersection . N501e) (enum-set-indexer . N501d) (enum-set-difference . N501c) (enum-set-constructor . N501b) (enum-set-complement . N501a) (enum-set->list . N5019) (define-enumeration . N4e89)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5207 '(rnrs conditions) '(6) '() '() '() '((who-condition? . N5018) (warning? . N5017) (violation? . N5016) (undefined-violation? . N5015) (syntax-violation? . N5014) (syntax-violation-subform . N5013) (syntax-violation-form . N5012) (syntax-violation . N3200) (simple-conditions . N5011) (serious-condition? . N5010) (non-continuable-violation? . N500f) (message-condition? . N500e) (make-who-condition . N500d) (make-warning . N500c) (make-violation . N500b) (make-undefined-violation . N500a) (make-syntax-violation . N5009) (make-serious-condition . N5008) (make-non-continuable-violation . N5007) (make-message-condition . N5006) (make-lexical-violation . N5005) (make-irritants-condition . N5004) (make-implementation-restriction-violation . N5003) (make-error . N5002) (make-assertion-violation . N5001) (lexical-violation? . N5000) (irritants-condition? . N4fff) (implementation-restriction-violation? . N4ffe) (error? . N4ffd) (condition-who . N4ffc) (condition-predicate . N4ffb) (condition-message . N4ffa) (condition-irritants . N4ff9) (condition-accessor . N4ff8) (condition . N4ff7) (assertion-violation? . N4ff6) (condition? . N4ff5) (&undefined . N4e98) (&syntax . N4e97) (&lexical . N4e96) (&implementation-restriction . N4e95) (&non-continuable . N4e94) (&who . N4e93) (&irritants . N4e92) (&assertion . N4e91) (&violation . N4e90) (&error . N4e8f) (&serious . N4e8e) (&warning . N4e8d) (&message . N4e8c) (&condition . N4e8b) (define-condition-type . N4e8a)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5208 '(rnrs records inspection) '(6) '() '() '() '((record? . N50dd) (record-type-uid . N50dc) (record-type-sealed? . N50db) (record-type-parent . N50da) (record-type-opaque? . N50d9) (record-type-name . N50d8) (record-type-generative? . N50d7) (record-type-field-names . N50d6) (record-rtd . N50d5) (record-field-mutable? . N50d4)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N5209 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . N50e4) (record-predicate . N50e3) (record-mutator . N50e2) (record-constructor . N50e1) (record-accessor . N50e0) (make-record-type-descriptor . N50df) (make-record-constructor-descriptor . N50de)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N520a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . N4e88) (parent-rtd . N4e87) (nongenerative . N4e86) (opaque . N4e85) (sealed . N4e84) (protocol . N4e83) (parent . N4e82) (immutable . N4e81) (mutable . N4e80) (fields . N4e7f) (record-constructor-descriptor . N4e5f) (record-type-descriptor . N4e5e)) '() values values '#f '#f '#t '#f) (N2d30@N2b7c@install-library 'N520b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . N51eb) (&no-nans-rtd . N51ea) (&no-infinities-rcd . N51e9) (&no-infinities-rtd . N51e8) (&i/o-encoding-rcd . N51e7) (&i/o-encoding-rtd . N51e6) (&i/o-decoding-rcd . N51e5) (&i/o-decoding-rtd . N51e4) (&i/o-port-rcd . N51e3) (&i/o-port-rtd . N51e2) (&i/o-file-does-not-exist-rcd . N51e1) (&i/o-file-does-not-exist-rtd . N51e0) (&i/o-file-already-exists-rcd . N51df) (&i/o-file-already-exists-rtd . N51de) (&i/o-file-is-read-only-rcd . N51dd) (&i/o-file-is-read-only-rtd . N51dc) (&i/o-file-protection-rcd . N51db) (&i/o-file-protection-rtd . N51da) (&i/o-filename-rcd . N51d9) (&i/o-filename-rtd . N51d8) (&i/o-invalid-position-rcd . N51d7) (&i/o-invalid-position-rtd . N51d6) (&i/o-write-rcd . N51d5) (&i/o-write-rtd . N51d4) (&i/o-read-rcd . N51d3) (&i/o-read-rtd . N51d2) (&i/o-rcd . N51d1) (&i/o-rtd . N51d0) (&undefined-rcd . N51cf) (&undefined-rtd . N51ce) (&syntax-rcd . N51cd) (&syntax-rtd . N51cc) (&lexical-rcd . N51cb) (&lexical-rtd . N51ca) (&implementation-restriction-rcd . N51c9) (&implementation-restriction-rtd . N51c8) (&non-continuable-rcd . N51c7) (&non-continuable-rtd . N51c6) (&who-rcd . N51c5) (&who-rtd . N51c4) (&irritants-rcd . N51c3) (&irritants-rtd . N51c2) (&assertion-rcd . N51c1) (&assertion-rtd . N51c0) (&violation-rcd . N51bf) (&violation-rtd . N51be) (&error-rcd . N51bd) (&error-rtd . N51bc) (&serious-rcd . N51bb) (&serious-rtd . N51ba) (&warning-rcd . N51b9) (&warning-rtd . N51b8) (&message-rcd . N51b7) (&message-rtd . N51b6) (&condition-rcd . N51b5) (&condition-rtd . N51b4) (syntax-error . N31fc) (syntax-dispatch . N311c) (pretty-print . N51b3) (eval-core . N51b2) (set-symbol-value! . N51b1) (symbol-value . N51b0) (gensym . N51af) (void . N51ae) (load . N4cdf) (interaction-environment . N320e) (char-ready? . N51ad) (regexp? . N51ac) (read-line . N51ab) (gensym-prefix-set! . N51aa) (ungensym . N51a9) (alist->eq-hash-table . N51a8) (assoc-ref . N51a7) (print . N51a6) (format . N51a5) (host-os . N51a4) (library-path . N2b5b) (standard-library-path . N51a3) (ssl-supported? . N51a2) (ssl-socket? . N51a1) (socket-sslize! . N51a0) (%monapi-name-whereis . N519f) (%monapi-message-send . N519e) (file-newer? . N519d) (stat-mtime . N519c) (write-to-file . N519b) (file->list . N519a) (file->string . N5199) (digit->integer . N5198) (call-with-string-input-port . N5197) (call-with-string-io . N5196) (string-split . N5195) (bytevector-for-each . N5194) (string->regexp . N5193) (rxmatch . N5192) (regexp-replace-all . N5191) (hashtable-fold-left . N5190) (hashtable-for-each . N518f) (mosh-cache-dir . N2945) (call-process . N518e) (local-tz-offset . N518d) (microseconds . N518c) (directory-list . N518b) (set-current-directory! . N518a) (expand-path . N5189) (current-directory . N5188) (%spawn . N5187) (%waitpid . N5186) (simple-struct-name . N5185) (simple-struct-set! . N5184) (simple-struct-ref . N5183) (make-simple-struct . N5182) (simple-struct? . N5181) (pointer-ref-c-int64 . N5180) (pointer-ref-c-int32 . N517f) (pointer-ref-c-int16 . N517e) (pointer-ref-c-int8 . N517d) (pointer-ref-c-uint64 . N517c) (pointer-ref-c-uint32 . N517b) (pointer-ref-c-uint16 . N517a) (pointer-ref-c-uint8 . N5179) (pointer-set-c-uint64! . N5178) (pointer-set-c-uint32! . N5177) (pointer-set-c-uint16! . N5176) (pointer-set-c-uint8! . N5175) (pointer-set-c-int64! . N5174) (pointer-set-c-int32! . N5173) (pointer-set-c-int16! . N5172) (pointer-set-c-int8! . N5171) (pointer-set-c-pointer! . N5170) (pointer-set-c-double! . N516f) (pointer-set-c-float! . N516e) (pointer-set-c-long-long! . N516d) (pointer-set-c-long! . N516c) (pointer-set-c-int! . N516b) (pointer-set-c-short! . N516a) (pointer-set-c-char! . N5169) (pointer-ref-c-pointer . N5168) (pointer-ref-c-double . N5167) (pointer-ref-c-float . N5166) (pointer-ref-c-unsigned-long-long . N5165) (pointer-ref-c-signed-long-long . N5164) (pointer-ref-c-unsigned-long . N5163) (pointer-ref-c-signed-long . N5162) (pointer-ref-c-unsigned-int . N5161) (pointer-ref-c-signed-int . N5160) (pointer-ref-c-unsigned-short . N515f) (pointer-ref-c-signed-short . N515e) (pointer-ref-c-unsigned-char . N515d) (pointer-ref-c-signed-char . N515c) (pointer->integer . N515b) (integer->pointer . N515a) (pointer? . N5159) (shared-errno . N5158) (%ffi-free-c-callback-trampoline . N5157) (%ffi-make-c-callback-trampoline . N5156) (%ffi-free . N5155) (%ffi-malloc . N5154) (%ffi-supported? . N5153) (%ffi-pointer->string . N5152) (%ffi-call . N5151) (%ffi-lookup . N5150) (%ffi-open . N514f) (null-terminated-utf8->string . N514e) (null-terminated-bytevector->string . N514d) (%exec . N514c) (%fork . N514b) (%pipe . N514a) (p . N5149) (open-output-string . N5148) (get-output-string . N5147) (file-stat-ctime . N5146) (file-stat-atime . N5145) (file-stat-mtime . N5144) (file-size-in-bytes . N5143) (file-writable? . N5142) (file-executable? . N5141) (file-readable? . N5140) (file-regular? . N513f) (file-symbolic-link? . N513e) (file-directory? . N513d) (create-symbolic-link . N513c) (rename-file . N513b) (delete-directory . N513a) (create-directory . N5139) (create-mosh-cache-dir . N5138) (get-environment-variables . N5137) (current-exception-handler . N5136) (get-environment-variable . N5135) (join-wraps . N5134) (id->real-label . N5133) (same-marks? . N5132) (same-marks*? . N5131) (get-timeofday . N5130) (get-command-line . N512f) (sys-display . N512e) (whereis . N512d) (register . N512c) (vm-join! . N512b) (vm-set-value! . N512a) (vm? . N5129) (main-vm? . N5128) (vm-eval . N5127) (vm-self . N5126) (vm-start! . N5125) (make-vm . N5124) (mutex-try-lock! . N5123) (mutex-unlock! . N5122) (mutex-lock! . N5121) (mutex? . N5120) (make-mutex . N511f) (condition-variable-notify-all! . N511e) (condition-variable-notify! . N511d) (condition-variable-wait! . N511c) (make-condition-variable . N511b) (write/ss . N511a) (mosh-executable-path . N5119) (make-file-options . N5118) (source-info . N5117) (make-compiler-instruction . N5116) (make-instruction . N5115) (set-source-info! . N5114) (bignum? . N5113) (fast-equal? . N5112) (fasl-read . N5111) (fasl-write . N5110) (time-usage . N510f) (os-constant . N510e) (condition-printer . N510d) (disasm . N510c) (make-parameter . N2943) (socket-port . N510b) (socket-shutdown . N510a) (socket-close . N5109) (socket-send . N5108) (socket-recv! . N5107) (socket-recv . N5106) (make-server-socket . N5105) (make-client-socket . N5104) (socket-accept . N5103) (socket? . N5102) (string-upcase . N5101) (string-titlecase . N5100) (string-normalize-nfkd . N50ff) (string-normalize-nfkc . N50fe) (string-normalize-nfd . N50fd) (string-normalize-nfc . N50fc) (string-foldcase . N50fb) (string-downcase . N50fa) (string-ci>? . N50f9) (string-ci>=? . N50f8) (string-ci=? . N50f7) (string-ci<? . N50f6) (string-ci<=? . N50f5) (char-whitespace? . N50f4) (char-upper-case? . N50f3) (char-title-case? . N50f2) (char-numeric? . N50f1) (char-lower-case? . N50f0) (char-general-category . N50ef) (char-upcase . N50ee) (char-titlecase . N50ed) (char-foldcase . N50ec) (char-downcase . N50eb) (char-ci>? . N50ea) (char-ci>=? . N50e9) (char-ci=? . N50e8) (char-ci<? . N50e7) (char-ci<=? . N50e6) (char-alphabetic? . N50e5) (make-variable-transformer . N2f47) (identifier? . N3202) (generate-temporaries . N31ee) (free-identifier=? . N31f0) (syntax->datum . N3206) (datum->syntax . N3204) (bound-identifier=? . N31f2) (record-type-descriptor? . N50e4) (record-predicate . N50e3) (record-mutator . N50e2) (record-constructor . N50e1) (record-accessor . N50e0) (make-record-type-descriptor . N50df) (make-record-constructor-descriptor . N50de) (record? . N50dd) (record-type-uid . N50dc) (record-type-sealed? . N50db) (record-type-parent . N50da) (record-type-opaque? . N50d9) (record-type-name . N50d8) (record-type-generative? . N50d7) (record-type-field-names . N50d6) (record-rtd . N50d5) (record-field-mutable? . N50d4) (delete-file . N50d3) (file-exists? . N50d2) (vector-sort! . N50d1) (vector-sort . N50d0) (list-sort . N50cf) (symbol-hash . N50ce) (string-ci-hash . N50cd) (string-hash . N50cc) (equal-hash . N50cb) (hashtable-equivalence-function . N50ca) (make-hashtable . N50c9) (hashtable-hash-function . N50c8) (make-eqv-hashtable . N50c7) (make-eq-hashtable . N50c6) (hashtable? . N50c5) (hashtable-update! . N50c4) (hashtable-size . N50c3) (hashtable-set! . N50c2) (hashtable-ref . N50c1) (hashtable-mutable? . N50c0) (hashtable-keys . N50bf) (hashtable-entries . N50be) (hashtable-delete! . N50bd) (hashtable-copy . N50bc) (hashtable-contains? . N50bb) (hashtable-clear! . N50ba) (call-with-output-file . N50b9) (call-with-input-file . N50b8) (write-char . N50b7) (write . N50b6) (with-output-to-file . N50b5) (with-input-from-file . N50b4) (read-char . N50b3) (read . N50b2) (peek-char . N50b1) (open-output-file . N50b0) (open-input-file . N50af) (newline . N50ae) (display . N50ad) (close-output-port . N50ac) (close-input-port . N50ab) (eof-object? . N50aa) (eof-object . N50a9) (current-error-port . N50a8) (current-output-port . N50a7) (current-input-port . N50a6) (output-port? . N50a5) (input-port? . N50a4) (utf-8-codec . N50a3) (utf-16-codec . N50a2) (transcoder-error-handling-mode . N50a1) (transcoder-eol-style . N50a0) (transcoder-codec . N509f) (transcoded-port . N509e) (textual-port? . N509d) (string->bytevector . N509c) (standard-output-port . N509b) (standard-input-port . N509a) (standard-error-port . N5099) (set-port-position! . N5098) (put-u8 . N5097) (put-string . N5096) (put-datum . N5095) (put-char . N5094) (put-bytevector . N5093) (port? . N5092) (port-transcoder . N5091) (port-position . N5090) (port-has-set-port-position!? . N508f) (port-has-port-position? . N508e) (port-eof? . N508d) (output-port-buffer-mode . N508c) (open-string-output-port . N508b) (open-string-input-port . N508a) (open-file-output-port . N5089) (open-file-input/output-port . N5088) (open-file-input-port . N5087) (open-bytevector-output-port . N5086) (open-bytevector-input-port . N5085) (native-transcoder . N5084) (native-eol-style . N5083) (make-transcoder . N5082) (latin-1-codec . N5081) (make-i/o-write-error . N5080) (make-i/o-read-error . N507f) (make-i/o-port-error . N507e) (make-i/o-invalid-position-error . N507d) (make-i/o-filename-error . N507c) (make-i/o-file-protection-error . N507b) (make-i/o-file-is-read-only-error . N507a) (make-i/o-file-does-not-exist-error . N5079) (make-i/o-file-already-exists-error . N5078) (make-i/o-error . N5077) (make-i/o-encoding-error . N5076) (make-i/o-decoding-error . N5075) (make-custom-textual-output-port . N5074) (make-custom-textual-input/output-port . N5073) (make-custom-textual-input-port . N5072) (make-custom-binary-output-port . N5071) (make-custom-binary-input/output-port . N5070) (make-custom-binary-input-port . N506f) (make-bytevector . N506e) (lookahead-u8 . N506d) (lookahead-char . N506c) (i/o-write-error? . N506b) (i/o-read-error? . N506a) (i/o-port-error? . N5069) (i/o-invalid-position-error? . N5068) (i/o-filename-error? . N5067) (i/o-file-protection-error? . N5066) (i/o-file-is-read-only-error? . N5065) (i/o-file-does-not-exist-error? . N5064) (i/o-file-already-exists-error? . N5063) (i/o-error? . N5062) (i/o-error-position . N5061) (i/o-error-port . N5060) (i/o-error-filename . N505f) (i/o-encoding-error? . N505e) (i/o-encoding-error-char . N505d) (i/o-decoding-error? . N505c) (get-u8 . N505b) (get-string-n! . N505a) (get-string-n . N5059) (get-string-all . N5058) (get-line . N5057) (get-datum . N5056) (get-char . N5055) (get-bytevector-some . N5054) (get-bytevector-n! . N5053) (get-bytevector-n . N5052) (get-bytevector-all . N5051) (flush-output-port . N5050) (close-port . N504f) (scheme-report-environment . N31dc) (quotient . N504e) (null-environment . N31da) (remainder . N504d) (modulo . N504c) (inexact->exact . N504b) (force . N504a) (exact->inexact . N5049) (make-promise . N5048) (exit . N5047) (command-line . N4cd9) (string-fill! . N5046) (string-set! . N5045) (set-cdr! . N5044) (set-car! . N5043) (remove . N5042) (remv . N5041) (remp . N5040) (remq . N503f) (partition . N503e) (memv . N503d) (memq . N503c) (memp . N503b) (member . N503a) (exists . N5039) (for-all . N5038) (fold-right . N5037) (fold-left . N5036) (find . N5035) (filter . N5034) (cons* . N5033) (assv . N5032) (assq . N5031) (assp . N5030) (assoc . N502f) (call-with-string-output-port . N502e) (call-with-port . N502d) (call-with-bytevector-output-port . N502c) (bytevector->string . N502b) (buffer-mode? . N502a) (binary-port? . N5029) (with-exception-handler . N5028) (raise-continuable . N5027) (raise . N5026) (eval . N31e0) (environment . N31d8) (make-enumeration . N5025) (enum-set=? . N5024) (enum-set-universe . N5023) (enum-set-union . N5022) (enum-set-subset? . N5021) (enum-set-projection . N5020) (enum-set-member? . N501f) (enum-set-intersection . N501e) (enum-set-indexer . N501d) (enum-set-difference . N501c) (enum-set-constructor . N501b) (enum-set-complement . N501a) (enum-set->list . N5019) (who-condition? . N5018) (warning? . N5017) (violation? . N5016) (undefined-violation? . N5015) (syntax-violation? . N5014) (syntax-violation-subform . N5013) (syntax-violation-form . N5012) (syntax-violation . N3200) (simple-conditions . N5011) (serious-condition? . N5010) (non-continuable-violation? . N500f) (message-condition? . N500e) (make-who-condition . N500d) (make-warning . N500c) (make-violation . N500b) (make-undefined-violation . N500a) (make-syntax-violation . N5009) (make-serious-condition . N5008) (make-non-continuable-violation . N5007) (make-message-condition . N5006) (make-lexical-violation . N5005) (make-irritants-condition . N5004) (make-implementation-restriction-violation . N5003) (make-error . N5002) (make-assertion-violation . N5001) (lexical-violation? . N5000) (irritants-condition? . N4fff) (implementation-restriction-violation? . N4ffe) (error? . N4ffd) (condition-who . N4ffc) (condition-predicate . N4ffb) (condition-message . N4ffa) (condition-irritants . N4ff9) (condition-accessor . N4ff8) (condition . N4ff7) (assertion-violation? . N4ff6) (condition? . N4ff5) (utf32->string . N4ff4) (utf16->string . N4ff3) (utf8->string . N4ff2) (uint-list->bytevector . N4ff1) (u8-list->bytevector . N4ff0) (string->utf8 . N4fef) (string->utf32 . N4fee) (string->utf16 . N4fed) (sint-list->bytevector . N4fec) (native-endianness . N4feb) (bytevector? . N4fea) (bytevector=? . N4fe9) (bytevector-uint-set! . N4fe8) (bytevector-uint-ref . N4fe7) (bytevector-u8-set! . N4fe6) (bytevector-u8-ref . N4fe5) (bytevector-u64-set! . N4fe4) (bytevector-u64-ref . N4fe3) (bytevector-u64-native-set! . N4fe2) (bytevector-u64-native-ref . N4fe1) (bytevector-u32-set! . N4fe0) (bytevector-u32-ref . N4fdf) (bytevector-u32-native-set! . N4fde) (bytevector-u32-native-ref . N4fdd) (bytevector-u16-set! . N4fdc) (bytevector-u16-ref . N4fdb) (bytevector-u16-native-set! . N4fda) (bytevector-u16-native-ref . N4fd9) (bytevector-sint-set! . N4fd8) (bytevector-sint-ref . N4fd7) (bytevector-s8-set! . N4fd6) (bytevector-s8-ref . N4fd5) (bytevector-s64-set! . N4fd4) (bytevector-s64-ref . N4fd3) (bytevector-s64-native-set! . N4fd2) (bytevector-s64-native-ref . N4fd1) (bytevector-s32-set! . N4fd0) (bytevector-s32-ref . N4fcf) (bytevector-s32-native-set! . N4fce) (bytevector-s32-native-ref . N4fcd) (bytevector-s16-set! . N4fcc) (bytevector-s16-ref . N4fcb) (bytevector-s16-native-set! . N4fca) (bytevector-s16-native-ref . N4fc9) (bytevector-length . N4fc8) (bytevector-ieee-single-ref . N4fc7) (bytevector-ieee-single-set! . N4fc6) (bytevector-ieee-single-native-set! . N4fc5) (bytevector-ieee-single-native-ref . N4fc4) (bytevector-ieee-double-set! . N4fc3) (bytevector-ieee-double-ref . N4fc2) (bytevector-ieee-double-native-set! . N4fc1) (bytevector-ieee-double-native-ref . N4fc0) (bytevector-fill! . N4fbf) (bytevector-copy! . N4fbe) (bytevector-copy . N4fbd) (bytevector->uint-list . N4fbc) (bytevector->u8-list . N4fbb) (bytevector->sint-list . N4fba) (no-nans-violation? . N4fb9) (no-infinities-violation? . N4fb8) (make-no-nans-violation . N4fb7) (make-no-infinities-violation . N4fb6) (real->flonum . N4fb5) (flzero? . N4fb4) (fltruncate . N4fb3) (fltan . N4fb2) (flsqrt . N4fb1) (flsin . N4fb0) (flround . N4faf) (flpositive? . N4fae) (flonum? . N4fad) (flodd? . N4fac) (flnumerator . N4fab) (flnegative? . N4faa) (flnan? . N4fa9) (flmod0 . N4fa8) (flmod . N4fa7) (flmin . N4fa6) (flmax . N4fa5) (fllog . N4fa4) (flinteger? . N4fa3) (flinfinite? . N4fa2) (flfloor . N4fa1) (flfinite? . N4fa0) (flexpt . N4f9f) (flexp . N4f9e) (fleven? . N4f9d) (fldiv0-and-mod0 . N4f9c) (fldiv0 . N4f9b) (fldiv-and-mod . N4f9a) (fldiv . N4f99) (fldenominator . N4f98) (flcos . N4f97) (flceiling . N4f96) (flatan . N4f95) (flasin . N4f94) (flacos . N4f93) (flabs . N4f92) (fl>? . N4f91) (fl>=? . N4f90) (fl=? . N4f8f) (fl<? . N4f8e) (fl<=? . N4f8d) (fl/ . N4f8c) (fl- . N4f8b) (fl+ . N4f8a) (fl* . N4f89) (fixnum->flonum . N4f88) (fxzero? . N4f87) (fxxor . N4f86) (fxrotate-bit-field . N4f85) (fxreverse-bit-field . N4f84) (fxpositive? . N4f83) (fxodd? . N4f82) (fxnot . N4f81) (fxnegative? . N4f80) (fxmod0 . N4f7f) (fxmod . N4f7e) (fxmin . N4f7d) (fxmax . N4f7c) (fxlength . N4f7b) (fxior . N4f7a) (fxif . N4f79) (fxfirst-bit-set . N4f78) (fxeven? . N4f77) (fxdiv0-and-mod0 . N4f76) (fxdiv0 . N4f75) (fxdiv-and-mod . N4f74) (fxdiv . N4f73) (fxcopy-bit-field . N4f72) (fxcopy-bit . N4f71) (fxbit-set? . N4f70) (fxbit-field . N4f6f) (fxbit-count . N4f6e) (fxarithmetic-shift-right . N4f6d) (fxarithmetic-shift-left . N4f6c) (fxarithmetic-shift . N4f6b) (fxand . N4f6a) (fx>? . N4f69) (fx>=? . N4f68) (fx=? . N4f67) (fx<? . N4f66) (fx<=? . N4f65) (fx-/carry . N4f64) (fx- . N4f63) (fx+/carry . N4f62) (fx+ . N4f61) (fx*/carry . N4f60) (fx* . N4f5f) (greatest-fixnum . N4f5e) (least-fixnum . N4f5d) (fixnum-width . N4f5c) (fixnum? . N4f5b) (bitwise-rotate-bit-field . N4f5a) (bitwise-reverse-bit-field . N4f59) (bitwise-length . N4f58) (bitwise-if . N4f57) (bitwise-first-bit-set . N4f56) (bitwise-copy-bit-field . N4f55) (bitwise-copy-bit . N4f54) (bitwise-bit-set? . N4f53) (bitwise-bit-field . N4f52) (bitwise-bit-count . N4f51) (bitwise-xor . N4f50) (bitwise-ior . N4f4f) (bitwise-and . N4f4e) (bitwise-not . N4f4d) (bitwise-arithmetic-shift-right . N4f4c) (bitwise-arithmetic-shift-left . N4f4b) (bitwise-arithmetic-shift . N4f4a) (zero? . N4f49) (vector? . N4f48) (vector-set! . N4f47) (vector-ref . N4f46) (vector-map . N4f45) (vector-length . N4f44) (vector-for-each . N4f43) (vector-fill! . N4f42) (vector->list . N4f41) (vector . N4f40) (values . N4f3f) (truncate . N4f3e) (tan . N4f3d) (symbol? . N4f3c) (symbol=? . N4f3b) (symbol->string . N4f3a) (substring . N4f39) (string? . N4f38) (string>? . N4f37) (string>=? . N4f36) (string=? . N4f35) (string<? . N4f34) (string<=? . N4f33) (string-ref . N4f32) (string-length . N4f31) (string-for-each . N4f30) (string-copy . N4f2f) (string-append . N4f2e) (string->symbol . N4f2d) (string->number . N4f2c) (string->list . N4f2b) (string . N4f2a) (sqrt . N4f29) (sin . N4f28) (round . N4f27) (reverse . N4f26) (real? . N4f25) (real-valued? . N4f24) (real-part . N4f23) (rationalize . N4f22) (rational? . N4f21) (rational-valued? . N4f20) (procedure? . N4f1f) (positive? . N4f1e) (pair? . N4f1d) (odd? . N4f1c) (numerator . N4f1b) (number? . N4f1a) (number->string . N4f19) (null? . N4f18) (not . N4f17) (negative? . N4f16) (nan? . N4f15) (min . N4f14) (max . N4f13) (map . N4f12) (make-vector . N4f11) (make-string . N4f10) (make-rectangular . N4f0f) (make-polar . N4f0e) (magnitude . N4f0d) (log . N4f0c) (list? . N4f0b) (list-tail . N4f0a) (list-ref . N4f09) (list->vector . N4f08) (list->string . N4f07) (list . N4f06) (length . N4f05) (lcm . N4f04) (integer? . N4f03) (integer-valued? . N4f02) (integer->char . N4f01) (infinite? . N4f00) (inexact? . N4eff) (inexact . N4efe) (imag-part . N4efd) (gcd . N4efc) (for-each . N4efb) (floor . N4efa) (finite? . N4ef9) (expt . N4ef8) (exp . N4ef7) (exact? . N4ef6) (exact-integer-sqrt . N4ef5) (exact . N4ef4) (even? . N4ef3) (error . N4ef2) (eqv? . N4ef1) (equal? . N4ef0) (eq? . N4eef) (dynamic-wind . N4eee) (div0-and-mod0 . N4eed) (mod0 . N4eec) (div0 . N4eeb) (div-and-mod . N4eea) (mod . N4ee9) (div . N4ee8) (denominator . N4ee7) (cos . N4ee6) (cons . N4ee5) (complex? . N4ee4) (char? . N4ee3) (char>? . N4ee2) (char>=? . N4ee1) (char=? . N4ee0) (char<? . N4edf) (char<=? . N4ede) (char->integer . N4edd) (ceiling . N4edc) (call-with-values . N4edb) (call/cc . N4eda) (call-with-current-continuation . N4ed9) (cddddr . N4ed8) (cdddar . N4ed7) (cddadr . N4ed6) (cddaar . N4ed5) (cdaddr . N4ed4) (cdadar . N4ed3) (cdaadr . N4ed2) (cdaaar . N4ed1) (cadddr . N4ed0) (caddar . N4ecf) (cadadr . N4ece) (cadaar . N4ecd) (caaddr . N4ecc) (caadar . N4ecb) (caaadr . N4eca) (caaaar . N4ec9) (cdddr . N4ec8) (cddar . N4ec7) (cdadr . N4ec6) (cdaar . N4ec5) (caddr . N4ec4) (cadar . N4ec3) (caadr . N4ec2) (caaar . N4ec1) (cddr . N4ec0) (cdar . N4ebf) (cadr . N4ebe) (caar . N4ebd) (cdr . N4ebc) (car . N4ebb) (boolean? . N4eba) (boolean=? . N4eb9) (atan . N4eb8) (assertion-violation . N4eb7) (assertion-error . N31fa) (asin . N4eb6) (apply . N4eb5) (append . N4eb4) (angle . N4eb3) (acos . N4eb2) (abs . N4eb1) (/ . N4eb0) (* . N4eaf) (- . N4eae) (+ . N4ead) (>= . N4eac) (> . N4eab) (= . N4eaa) (<= . N4ea9) (< . N4ea8) (library . N4ea7) (&no-nans . N4ea6) (&no-infinities . N4ea5) (&i/o-encoding . N4ea4) (&i/o-decoding . N4ea3) (&i/o-port . N4ea2) (&i/o-file-does-not-exist . N4ea1) (&i/o-file-already-exists . N4ea0) (&i/o-file-is-read-only . N4e9f) (&i/o-file-protection . N4e9e) (&i/o-filename . N4e9d) (&i/o-invalid-position . N4e9c) (&i/o-write . N4e9b) (&i/o-read . N4e9a) (&i/o . N4e99) (&undefined . N4e98) (&syntax . N4e97) (&lexical . N4e96) (&implementation-restriction . N4e95) (&non-continuable . N4e94) (&who . N4e93) (&irritants . N4e92) (&assertion . N4e91) (&violation . N4e90) (&error . N4e8f) (&serious . N4e8e) (&warning . N4e8d) (&message . N4e8c) (&condition . N4e8b) (define-condition-type . N4e8a) (define-enumeration . N4e89) (define-record-type . N4e88) (parent-rtd . N4e87) (nongenerative . N4e86) (opaque . N4e85) (sealed . N4e84) (protocol . N4e83) (parent . N4e82) (immutable . N4e81) (mutable . N4e80) (fields . N4e7f) (error-handling-mode . N4e7e) (file-options . N4e7d) (buffer-mode . N4e7c) (eol-style . N4e7b) (guard . N4e7a) (trace-define . N4e79) (trace-lambda . N4e78) (unsyntax-splicing . N4e77) (unsyntax . N4e76) (unquote-splicing . N4e75) (unquote . N4e74) (_ . N4e73) (else . N4e72) (=> . N4e71) (... . N4e70) (assert . N4e6f) (endianness . N4e6e) (delay . N4e6d) (time . N4e6c) (do . N4e6b) (cond . N4e6a) (let* . N4e69) (let*-values . N4e68) (let-values . N4e67) (identifier-syntax . N4e66) (with-syntax . N4e65) (quasisyntax . N4e64) (quasiquote . N4e63) (syntax-rules . N4e62) (include . N4e61) (define-struct . N4e60) (record-constructor-descriptor . N4e5f) (record-type-descriptor . N4e5e) (case . N4e5d) (parameterize . N4e5c) (unless . N4e5b) (when . N4e5a) (or . N4e59) (and . N4e58) (if . N4e57) (let . N4e56) (letrec* . N4e55) (letrec . N4e54) (type-descriptor . N4e53) (case-lambda . N4e52) (lambda . N4e51) (syntax . N4e50) (syntax-case . N4e4f) (quote . N4e4e) (foreign-call . N4e4d) (letrec-syntax . N4e4c) (let-syntax . N4e4b) (set! . N4e4a) (import . N4e49) (begin . N4e48) (module . N4e47) (define-syntax . N4e46) (define . N4e45)) '((N51eb core-prim . &no-nans-rcd) (N51ea core-prim . &no-nans-rtd) (N51e9 core-prim . &no-infinities-rcd) (N51e8 core-prim . &no-infinities-rtd) (N51e7 core-prim . &i/o-encoding-rcd) (N51e6 core-prim . &i/o-encoding-rtd) (N51e5 core-prim . &i/o-decoding-rcd) (N51e4 core-prim . &i/o-decoding-rtd) (N51e3 core-prim . &i/o-port-rcd) (N51e2 core-prim . &i/o-port-rtd) (N51e1 core-prim . &i/o-file-does-not-exist-rcd) (N51e0 core-prim . &i/o-file-does-not-exist-rtd) (N51df core-prim . &i/o-file-already-exists-rcd) (N51de core-prim . &i/o-file-already-exists-rtd) (N51dd core-prim . &i/o-file-is-read-only-rcd) (N51dc core-prim . &i/o-file-is-read-only-rtd) (N51db core-prim . &i/o-file-protection-rcd) (N51da core-prim . &i/o-file-protection-rtd) (N51d9 core-prim . &i/o-filename-rcd) (N51d8 core-prim . &i/o-filename-rtd) (N51d7 core-prim . &i/o-invalid-position-rcd) (N51d6 core-prim . &i/o-invalid-position-rtd) (N51d5 core-prim . &i/o-write-rcd) (N51d4 core-prim . &i/o-write-rtd) (N51d3 core-prim . &i/o-read-rcd) (N51d2 core-prim . &i/o-read-rtd) (N51d1 core-prim . &i/o-rcd) (N51d0 core-prim . &i/o-rtd) (N51cf core-prim . &undefined-rcd) (N51ce core-prim . &undefined-rtd) (N51cd core-prim . &syntax-rcd) (N51cc core-prim . &syntax-rtd) (N51cb core-prim . &lexical-rcd) (N51ca core-prim . &lexical-rtd) (N51c9 core-prim . &implementation-restriction-rcd) (N51c8 core-prim . &implementation-restriction-rtd) (N51c7 core-prim . &non-continuable-rcd) (N51c6 core-prim . &non-continuable-rtd) (N51c5 core-prim . &who-rcd) (N51c4 core-prim . &who-rtd) (N51c3 core-prim . &irritants-rcd) (N51c2 core-prim . &irritants-rtd) (N51c1 core-prim . &assertion-rcd) (N51c0 core-prim . &assertion-rtd) (N51bf core-prim . &violation-rcd) (N51be core-prim . &violation-rtd) (N51bd core-prim . &error-rcd) (N51bc core-prim . &error-rtd) (N51bb core-prim . &serious-rcd) (N51ba core-prim . &serious-rtd) (N51b9 core-prim . &warning-rcd) (N51b8 core-prim . &warning-rtd) (N51b7 core-prim . &message-rcd) (N51b6 core-prim . &message-rtd) (N51b5 core-prim . &condition-rcd) (N51b4 core-prim . &condition-rtd) (N31fc core-prim . syntax-error) (N311c core-prim . syntax-dispatch) (N51b3 core-prim . pretty-print) (N51b2 core-prim . eval-core) (N51b1 core-prim . set-symbol-value!) (N51b0 core-prim . symbol-value) (N51af core-prim . gensym) (N51ae core-prim . void) (N4cdf core-prim . load) (N320e core-prim . interaction-environment) (N51ad core-prim . char-ready?) (N51ac core-prim . regexp?) (N51ab core-prim . read-line) (N51aa core-prim . gensym-prefix-set!) (N51a9 core-prim . ungensym) (N51a8 core-prim . alist->eq-hash-table) (N51a7 core-prim . assoc-ref) (N51a6 core-prim . print) (N51a5 core-prim . format) (N51a4 core-prim . host-os) (N2b5b core-prim . library-path) (N51a3 core-prim . standard-library-path) (N51a2 core-prim . ssl-supported?) (N51a1 core-prim . ssl-socket?) (N51a0 core-prim . socket-sslize!) (N519f core-prim . %monapi-name-whereis) (N519e core-prim . %monapi-message-send) (N519d core-prim . file-newer?) (N519c core-prim . stat-mtime) (N519b core-prim . write-to-file) (N519a core-prim . file->list) (N5199 core-prim . file->string) (N5198 core-prim . digit->integer) (N5197 core-prim . call-with-string-input-port) (N5196 core-prim . call-with-string-io) (N5195 core-prim . string-split) (N5194 core-prim . bytevector-for-each) (N5193 core-prim . string->regexp) (N5192 core-prim . rxmatch) (N5191 core-prim . regexp-replace-all) (N5190 core-prim . hashtable-fold-left) (N518f core-prim . hashtable-for-each) (N2945 core-prim . mosh-cache-dir) (N518e core-prim . call-process) (N518d core-prim . local-tz-offset) (N518c core-prim . microseconds) (N518b core-prim . directory-list) (N518a core-prim . set-current-directory!) (N5189 core-prim . expand-path) (N5188 core-prim . current-directory) (N5187 core-prim . %spawn) (N5186 core-prim . %waitpid) (N5185 core-prim . simple-struct-name) (N5184 core-prim . simple-struct-set!) (N5183 core-prim . simple-struct-ref) (N5182 core-prim . make-simple-struct) (N5181 core-prim . simple-struct?) (N5180 core-prim . pointer-ref-c-int64) (N517f core-prim . pointer-ref-c-int32) (N517e core-prim . pointer-ref-c-int16) (N517d core-prim . pointer-ref-c-int8) (N517c core-prim . pointer-ref-c-uint64) (N517b core-prim . pointer-ref-c-uint32) (N517a core-prim . pointer-ref-c-uint16) (N5179 core-prim . pointer-ref-c-uint8) (N5178 core-prim . pointer-set-c-uint64!) (N5177 core-prim . pointer-set-c-uint32!) (N5176 core-prim . pointer-set-c-uint16!) (N5175 core-prim . pointer-set-c-uint8!) (N5174 core-prim . pointer-set-c-int64!) (N5173 core-prim . pointer-set-c-int32!) (N5172 core-prim . pointer-set-c-int16!) (N5171 core-prim . pointer-set-c-int8!) (N5170 core-prim . pointer-set-c-pointer!) (N516f core-prim . pointer-set-c-double!) (N516e core-prim . pointer-set-c-float!) (N516d core-prim . pointer-set-c-long-long!) (N516c core-prim . pointer-set-c-long!) (N516b core-prim . pointer-set-c-int!) (N516a core-prim . pointer-set-c-short!) (N5169 core-prim . pointer-set-c-char!) (N5168 core-prim . pointer-ref-c-pointer) (N5167 core-prim . pointer-ref-c-double) (N5166 core-prim . pointer-ref-c-float) (N5165 core-prim . pointer-ref-c-unsigned-long-long) (N5164 core-prim . pointer-ref-c-signed-long-long) (N5163 core-prim . pointer-ref-c-unsigned-long) (N5162 core-prim . pointer-ref-c-signed-long) (N5161 core-prim . pointer-ref-c-unsigned-int) (N5160 core-prim . pointer-ref-c-signed-int) (N515f core-prim . pointer-ref-c-unsigned-short) (N515e core-prim . pointer-ref-c-signed-short) (N515d core-prim . pointer-ref-c-unsigned-char) (N515c core-prim . pointer-ref-c-signed-char) (N515b core-prim . pointer->integer) (N515a core-prim . integer->pointer) (N5159 core-prim . pointer?) (N5158 core-prim . shared-errno) (N5157 core-prim . %ffi-free-c-callback-trampoline) (N5156 core-prim . %ffi-make-c-callback-trampoline) (N5155 core-prim . %ffi-free) (N5154 core-prim . %ffi-malloc) (N5153 core-prim . %ffi-supported?) (N5152 core-prim . %ffi-pointer->string) (N5151 core-prim . %ffi-call) (N5150 core-prim . %ffi-lookup) (N514f core-prim . %ffi-open) (N514e core-prim . null-terminated-utf8->string) (N514d core-prim . null-terminated-bytevector->string) (N514c core-prim . %exec) (N514b core-prim . %fork) (N514a core-prim . %pipe) (N5149 core-prim . p) (N5148 core-prim . open-output-string) (N5147 core-prim . get-output-string) (N5146 core-prim . file-stat-ctime) (N5145 core-prim . file-stat-atime) (N5144 core-prim . file-stat-mtime) (N5143 core-prim . file-size-in-bytes) (N5142 core-prim . file-writable?) (N5141 core-prim . file-executable?) (N5140 core-prim . file-readable?) (N513f core-prim . file-regular?) (N513e core-prim . file-symbolic-link?) (N513d core-prim . file-directory?) (N513c core-prim . create-symbolic-link) (N513b core-prim . rename-file) (N513a core-prim . delete-directory) (N5139 core-prim . create-directory) (N5138 core-prim . create-mosh-cache-dir) (N5137 core-prim . get-environment-variables) (N5136 core-prim . current-exception-handler) (N5135 core-prim . get-environment-variable) (N5134 core-prim . join-wraps) (N5133 core-prim . id->real-label) (N5132 core-prim . same-marks?) (N5131 core-prim . same-marks*?) (N5130 core-prim . get-timeofday) (N512f core-prim . get-command-line) (N512e core-prim . sys-display) (N512d core-prim . whereis) (N512c core-prim . register) (N512b core-prim . vm-join!) (N512a core-prim . vm-set-value!) (N5129 core-prim . vm?) (N5128 core-prim . main-vm?) (N5127 core-prim . vm-eval) (N5126 core-prim . vm-self) (N5125 core-prim . vm-start!) (N5124 core-prim . make-vm) (N5123 core-prim . mutex-try-lock!) (N5122 core-prim . mutex-unlock!) (N5121 core-prim . mutex-lock!) (N5120 core-prim . mutex?) (N511f core-prim . make-mutex) (N511e core-prim . condition-variable-notify-all!) (N511d core-prim . condition-variable-notify!) (N511c core-prim . condition-variable-wait!) (N511b core-prim . make-condition-variable) (N511a core-prim . write/ss) (N5119 core-prim . mosh-executable-path) (N5118 core-prim . make-file-options) (N5117 core-prim . source-info) (N5116 core-prim . make-compiler-instruction) (N5115 core-prim . make-instruction) (N5114 core-prim . set-source-info!) (N5113 core-prim . bignum?) (N5112 core-prim . fast-equal?) (N5111 core-prim . fasl-read) (N5110 core-prim . fasl-write) (N510f core-prim . time-usage) (N510e core-prim . os-constant) (N510d core-prim . condition-printer) (N510c core-prim . disasm) (N2943 core-prim . make-parameter) (N510b core-prim . socket-port) (N510a core-prim . socket-shutdown) (N5109 core-prim . socket-close) (N5108 core-prim . socket-send) (N5107 core-prim . socket-recv!) (N5106 core-prim . socket-recv) (N5105 core-prim . make-server-socket) (N5104 core-prim . make-client-socket) (N5103 core-prim . socket-accept) (N5102 core-prim . socket?) (N5101 core-prim . string-upcase) (N5100 core-prim . string-titlecase) (N50ff core-prim . string-normalize-nfkd) (N50fe core-prim . string-normalize-nfkc) (N50fd core-prim . string-normalize-nfd) (N50fc core-prim . string-normalize-nfc) (N50fb core-prim . string-foldcase) (N50fa core-prim . string-downcase) (N50f9 core-prim . string-ci>?) (N50f8 core-prim . string-ci>=?) (N50f7 core-prim . string-ci=?) (N50f6 core-prim . string-ci<?) (N50f5 core-prim . string-ci<=?) (N50f4 core-prim . char-whitespace?) (N50f3 core-prim . char-upper-case?) (N50f2 core-prim . char-title-case?) (N50f1 core-prim . char-numeric?) (N50f0 core-prim . char-lower-case?) (N50ef core-prim . char-general-category) (N50ee core-prim . char-upcase) (N50ed core-prim . char-titlecase) (N50ec core-prim . char-foldcase) (N50eb core-prim . char-downcase) (N50ea core-prim . char-ci>?) (N50e9 core-prim . char-ci>=?) (N50e8 core-prim . char-ci=?) (N50e7 core-prim . char-ci<?) (N50e6 core-prim . char-ci<=?) (N50e5 core-prim . char-alphabetic?) (N2f47 core-prim . make-variable-transformer) (N3202 core-prim . identifier?) (N31ee core-prim . generate-temporaries) (N31f0 core-prim . free-identifier=?) (N3206 core-prim . syntax->datum) (N3204 core-prim . datum->syntax) (N31f2 core-prim . bound-identifier=?) (N50e4 core-prim . record-type-descriptor?) (N50e3 core-prim . record-predicate) (N50e2 core-prim . record-mutator) (N50e1 core-prim . record-constructor) (N50e0 core-prim . record-accessor) (N50df core-prim . make-record-type-descriptor) (N50de core-prim . make-record-constructor-descriptor) (N50dd core-prim . record?) (N50dc core-prim . record-type-uid) (N50db core-prim . record-type-sealed?) (N50da core-prim . record-type-parent) (N50d9 core-prim . record-type-opaque?) (N50d8 core-prim . record-type-name) (N50d7 core-prim . record-type-generative?) (N50d6 core-prim . record-type-field-names) (N50d5 core-prim . record-rtd) (N50d4 core-prim . record-field-mutable?) (N50d3 core-prim . delete-file) (N50d2 core-prim . file-exists?) (N50d1 core-prim . vector-sort!) (N50d0 core-prim . vector-sort) (N50cf core-prim . list-sort) (N50ce core-prim . symbol-hash) (N50cd core-prim . string-ci-hash) (N50cc core-prim . string-hash) (N50cb core-prim . equal-hash) (N50ca core-prim . hashtable-equivalence-function) (N50c9 core-prim . make-hashtable) (N50c8 core-prim . hashtable-hash-function) (N50c7 core-prim . make-eqv-hashtable) (N50c6 core-prim . make-eq-hashtable) (N50c5 core-prim . hashtable?) (N50c4 core-prim . hashtable-update!) (N50c3 core-prim . hashtable-size) (N50c2 core-prim . hashtable-set!) (N50c1 core-prim . hashtable-ref) (N50c0 core-prim . hashtable-mutable?) (N50bf core-prim . hashtable-keys) (N50be core-prim . hashtable-entries) (N50bd core-prim . hashtable-delete!) (N50bc core-prim . hashtable-copy) (N50bb core-prim . hashtable-contains?) (N50ba core-prim . hashtable-clear!) (N50b9 core-prim . call-with-output-file) (N50b8 core-prim . call-with-input-file) (N50b7 core-prim . write-char) (N50b6 core-prim . write) (N50b5 core-prim . with-output-to-file) (N50b4 core-prim . with-input-from-file) (N50b3 core-prim . read-char) (N50b2 core-prim . read) (N50b1 core-prim . peek-char) (N50b0 core-prim . open-output-file) (N50af core-prim . open-input-file) (N50ae core-prim . newline) (N50ad core-prim . display) (N50ac core-prim . close-output-port) (N50ab core-prim . close-input-port) (N50aa core-prim . eof-object?) (N50a9 core-prim . eof-object) (N50a8 core-prim . current-error-port) (N50a7 core-prim . current-output-port) (N50a6 core-prim . current-input-port) (N50a5 core-prim . output-port?) (N50a4 core-prim . input-port?) (N50a3 core-prim . utf-8-codec) (N50a2 core-prim . utf-16-codec) (N50a1 core-prim . transcoder-error-handling-mode) (N50a0 core-prim . transcoder-eol-style) (N509f core-prim . transcoder-codec) (N509e core-prim . transcoded-port) (N509d core-prim . textual-port?) (N509c core-prim . string->bytevector) (N509b core-prim . standard-output-port) (N509a core-prim . standard-input-port) (N5099 core-prim . standard-error-port) (N5098 core-prim . set-port-position!) (N5097 core-prim . put-u8) (N5096 core-prim . put-string) (N5095 core-prim . put-datum) (N5094 core-prim . put-char) (N5093 core-prim . put-bytevector) (N5092 core-prim . port?) (N5091 core-prim . port-transcoder) (N5090 core-prim . port-position) (N508f core-prim . port-has-set-port-position!?) (N508e core-prim . port-has-port-position?) (N508d core-prim . port-eof?) (N508c core-prim . output-port-buffer-mode) (N508b core-prim . open-string-output-port) (N508a core-prim . open-string-input-port) (N5089 core-prim . open-file-output-port) (N5088 core-prim . open-file-input/output-port) (N5087 core-prim . open-file-input-port) (N5086 core-prim . open-bytevector-output-port) (N5085 core-prim . open-bytevector-input-port) (N5084 core-prim . native-transcoder) (N5083 core-prim . native-eol-style) (N5082 core-prim . make-transcoder) (N5081 core-prim . latin-1-codec) (N5080 core-prim . make-i/o-write-error) (N507f core-prim . make-i/o-read-error) (N507e core-prim . make-i/o-port-error) (N507d core-prim . make-i/o-invalid-position-error) (N507c core-prim . make-i/o-filename-error) (N507b core-prim . make-i/o-file-protection-error) (N507a core-prim . make-i/o-file-is-read-only-error) (N5079 core-prim . make-i/o-file-does-not-exist-error) (N5078 core-prim . make-i/o-file-already-exists-error) (N5077 core-prim . make-i/o-error) (N5076 core-prim . make-i/o-encoding-error) (N5075 core-prim . make-i/o-decoding-error) (N5074 core-prim . make-custom-textual-output-port) (N5073 core-prim . make-custom-textual-input/output-port) (N5072 core-prim . make-custom-textual-input-port) (N5071 core-prim . make-custom-binary-output-port) (N5070 core-prim . make-custom-binary-input/output-port) (N506f core-prim . make-custom-binary-input-port) (N506e core-prim . make-bytevector) (N506d core-prim . lookahead-u8) (N506c core-prim . lookahead-char) (N506b core-prim . i/o-write-error?) (N506a core-prim . i/o-read-error?) (N5069 core-prim . i/o-port-error?) (N5068 core-prim . i/o-invalid-position-error?) (N5067 core-prim . i/o-filename-error?) (N5066 core-prim . i/o-file-protection-error?) (N5065 core-prim . i/o-file-is-read-only-error?) (N5064 core-prim . i/o-file-does-not-exist-error?) (N5063 core-prim . i/o-file-already-exists-error?) (N5062 core-prim . i/o-error?) (N5061 core-prim . i/o-error-position) (N5060 core-prim . i/o-error-port) (N505f core-prim . i/o-error-filename) (N505e core-prim . i/o-encoding-error?) (N505d core-prim . i/o-encoding-error-char) (N505c core-prim . i/o-decoding-error?) (N505b core-prim . get-u8) (N505a core-prim . get-string-n!) (N5059 core-prim . get-string-n) (N5058 core-prim . get-string-all) (N5057 core-prim . get-line) (N5056 core-prim . get-datum) (N5055 core-prim . get-char) (N5054 core-prim . get-bytevector-some) (N5053 core-prim . get-bytevector-n!) (N5052 core-prim . get-bytevector-n) (N5051 core-prim . get-bytevector-all) (N5050 core-prim . flush-output-port) (N504f core-prim . close-port) (N31dc core-prim . scheme-report-environment) (N504e core-prim . quotient) (N31da core-prim . null-environment) (N504d core-prim . remainder) (N504c core-prim . modulo) (N504b core-prim . inexact->exact) (N504a core-prim . force) (N5049 core-prim . exact->inexact) (N5048 core-prim . make-promise) (N5047 core-prim . exit) (N4cd9 core-prim . command-line) (N5046 core-prim . string-fill!) (N5045 core-prim . string-set!) (N5044 core-prim . set-cdr!) (N5043 core-prim . set-car!) (N5042 core-prim . remove) (N5041 core-prim . remv) (N5040 core-prim . remp) (N503f core-prim . remq) (N503e core-prim . partition) (N503d core-prim . memv) (N503c core-prim . memq) (N503b core-prim . memp) (N503a core-prim . member) (N5039 core-prim . exists) (N5038 core-prim . for-all) (N5037 core-prim . fold-right) (N5036 core-prim . fold-left) (N5035 core-prim . find) (N5034 core-prim . filter) (N5033 core-prim . cons*) (N5032 core-prim . assv) (N5031 core-prim . assq) (N5030 core-prim . assp) (N502f core-prim . assoc) (N502e core-prim . call-with-string-output-port) (N502d core-prim . call-with-port) (N502c core-prim . call-with-bytevector-output-port) (N502b core-prim . bytevector->string) (N502a core-prim . buffer-mode?) (N5029 core-prim . binary-port?) (N5028 core-prim . with-exception-handler) (N5027 core-prim . raise-continuable) (N5026 core-prim . raise) (N31e0 core-prim . eval) (N31d8 core-prim . environment) (N5025 core-prim . make-enumeration) (N5024 core-prim . enum-set=?) (N5023 core-prim . enum-set-universe) (N5022 core-prim . enum-set-union) (N5021 core-prim . enum-set-subset?) (N5020 core-prim . enum-set-projection) (N501f core-prim . enum-set-member?) (N501e core-prim . enum-set-intersection) (N501d core-prim . enum-set-indexer) (N501c core-prim . enum-set-difference) (N501b core-prim . enum-set-constructor) (N501a core-prim . enum-set-complement) (N5019 core-prim . enum-set->list) (N5018 core-prim . who-condition?) (N5017 core-prim . warning?) (N5016 core-prim . violation?) (N5015 core-prim . undefined-violation?) (N5014 core-prim . syntax-violation?) (N5013 core-prim . syntax-violation-subform) (N5012 core-prim . syntax-violation-form) (N3200 core-prim . syntax-violation) (N5011 core-prim . simple-conditions) (N5010 core-prim . serious-condition?) (N500f core-prim . non-continuable-violation?) (N500e core-prim . message-condition?) (N500d core-prim . make-who-condition) (N500c core-prim . make-warning) (N500b core-prim . make-violation) (N500a core-prim . make-undefined-violation) (N5009 core-prim . make-syntax-violation) (N5008 core-prim . make-serious-condition) (N5007 core-prim . make-non-continuable-violation) (N5006 core-prim . make-message-condition) (N5005 core-prim . make-lexical-violation) (N5004 core-prim . make-irritants-condition) (N5003 core-prim . make-implementation-restriction-violation) (N5002 core-prim . make-error) (N5001 core-prim . make-assertion-violation) (N5000 core-prim . lexical-violation?) (N4fff core-prim . irritants-condition?) (N4ffe core-prim . implementation-restriction-violation?) (N4ffd core-prim . error?) (N4ffc core-prim . condition-who) (N4ffb core-prim . condition-predicate) (N4ffa core-prim . condition-message) (N4ff9 core-prim . condition-irritants) (N4ff8 core-prim . condition-accessor) (N4ff7 core-prim . condition) (N4ff6 core-prim . assertion-violation?) (N4ff5 core-prim . condition?) (N4ff4 core-prim . utf32->string) (N4ff3 core-prim . utf16->string) (N4ff2 core-prim . utf8->string) (N4ff1 core-prim . uint-list->bytevector) (N4ff0 core-prim . u8-list->bytevector) (N4fef core-prim . string->utf8) (N4fee core-prim . string->utf32) (N4fed core-prim . string->utf16) (N4fec core-prim . sint-list->bytevector) (N4feb core-prim . native-endianness) (N4fea core-prim . bytevector?) (N4fe9 core-prim . bytevector=?) (N4fe8 core-prim . bytevector-uint-set!) (N4fe7 core-prim . bytevector-uint-ref) (N4fe6 core-prim . bytevector-u8-set!) (N4fe5 core-prim . bytevector-u8-ref) (N4fe4 core-prim . bytevector-u64-set!) (N4fe3 core-prim . bytevector-u64-ref) (N4fe2 core-prim . bytevector-u64-native-set!) (N4fe1 core-prim . bytevector-u64-native-ref) (N4fe0 core-prim . bytevector-u32-set!) (N4fdf core-prim . bytevector-u32-ref) (N4fde core-prim . bytevector-u32-native-set!) (N4fdd core-prim . bytevector-u32-native-ref) (N4fdc core-prim . bytevector-u16-set!) (N4fdb core-prim . bytevector-u16-ref) (N4fda core-prim . bytevector-u16-native-set!) (N4fd9 core-prim . bytevector-u16-native-ref) (N4fd8 core-prim . bytevector-sint-set!) (N4fd7 core-prim . bytevector-sint-ref) (N4fd6 core-prim . bytevector-s8-set!) (N4fd5 core-prim . bytevector-s8-ref) (N4fd4 core-prim . bytevector-s64-set!) (N4fd3 core-prim . bytevector-s64-ref) (N4fd2 core-prim . bytevector-s64-native-set!) (N4fd1 core-prim . bytevector-s64-native-ref) (N4fd0 core-prim . bytevector-s32-set!) (N4fcf core-prim . bytevector-s32-ref) (N4fce core-prim . bytevector-s32-native-set!) (N4fcd core-prim . bytevector-s32-native-ref) (N4fcc core-prim . bytevector-s16-set!) (N4fcb core-prim . bytevector-s16-ref) (N4fca core-prim . bytevector-s16-native-set!) (N4fc9 core-prim . bytevector-s16-native-ref) (N4fc8 core-prim . bytevector-length) (N4fc7 core-prim . bytevector-ieee-single-ref) (N4fc6 core-prim . bytevector-ieee-single-set!) (N4fc5 core-prim . bytevector-ieee-single-native-set!) (N4fc4 core-prim . bytevector-ieee-single-native-ref) (N4fc3 core-prim . bytevector-ieee-double-set!) (N4fc2 core-prim . bytevector-ieee-double-ref) (N4fc1 core-prim . bytevector-ieee-double-native-set!) (N4fc0 core-prim . bytevector-ieee-double-native-ref) (N4fbf core-prim . bytevector-fill!) (N4fbe core-prim . bytevector-copy!) (N4fbd core-prim . bytevector-copy) (N4fbc core-prim . bytevector->uint-list) (N4fbb core-prim . bytevector->u8-list) (N4fba core-prim . bytevector->sint-list) (N4fb9 core-prim . no-nans-violation?) (N4fb8 core-prim . no-infinities-violation?) (N4fb7 core-prim . make-no-nans-violation) (N4fb6 core-prim . make-no-infinities-violation) (N4fb5 core-prim . real->flonum) (N4fb4 core-prim . flzero?) (N4fb3 core-prim . fltruncate) (N4fb2 core-prim . fltan) (N4fb1 core-prim . flsqrt) (N4fb0 core-prim . flsin) (N4faf core-prim . flround) (N4fae core-prim . flpositive?) (N4fad core-prim . flonum?) (N4fac core-prim . flodd?) (N4fab core-prim . flnumerator) (N4faa core-prim . flnegative?) (N4fa9 core-prim . flnan?) (N4fa8 core-prim . flmod0) (N4fa7 core-prim . flmod) (N4fa6 core-prim . flmin) (N4fa5 core-prim . flmax) (N4fa4 core-prim . fllog) (N4fa3 core-prim . flinteger?) (N4fa2 core-prim . flinfinite?) (N4fa1 core-prim . flfloor) (N4fa0 core-prim . flfinite?) (N4f9f core-prim . flexpt) (N4f9e core-prim . flexp) (N4f9d core-prim . fleven?) (N4f9c core-prim . fldiv0-and-mod0) (N4f9b core-prim . fldiv0) (N4f9a core-prim . fldiv-and-mod) (N4f99 core-prim . fldiv) (N4f98 core-prim . fldenominator) (N4f97 core-prim . flcos) (N4f96 core-prim . flceiling) (N4f95 core-prim . flatan) (N4f94 core-prim . flasin) (N4f93 core-prim . flacos) (N4f92 core-prim . flabs) (N4f91 core-prim . fl>?) (N4f90 core-prim . fl>=?) (N4f8f core-prim . fl=?) (N4f8e core-prim . fl<?) (N4f8d core-prim . fl<=?) (N4f8c core-prim . fl/) (N4f8b core-prim . fl-) (N4f8a core-prim . fl+) (N4f89 core-prim . fl*) (N4f88 core-prim . fixnum->flonum) (N4f87 core-prim . fxzero?) (N4f86 core-prim . fxxor) (N4f85 core-prim . fxrotate-bit-field) (N4f84 core-prim . fxreverse-bit-field) (N4f83 core-prim . fxpositive?) (N4f82 core-prim . fxodd?) (N4f81 core-prim . fxnot) (N4f80 core-prim . fxnegative?) (N4f7f core-prim . fxmod0) (N4f7e core-prim . fxmod) (N4f7d core-prim . fxmin) (N4f7c core-prim . fxmax) (N4f7b core-prim . fxlength) (N4f7a core-prim . fxior) (N4f79 core-prim . fxif) (N4f78 core-prim . fxfirst-bit-set) (N4f77 core-prim . fxeven?) (N4f76 core-prim . fxdiv0-and-mod0) (N4f75 core-prim . fxdiv0) (N4f74 core-prim . fxdiv-and-mod) (N4f73 core-prim . fxdiv) (N4f72 core-prim . fxcopy-bit-field) (N4f71 core-prim . fxcopy-bit) (N4f70 core-prim . fxbit-set?) (N4f6f core-prim . fxbit-field) (N4f6e core-prim . fxbit-count) (N4f6d core-prim . fxarithmetic-shift-right) (N4f6c core-prim . fxarithmetic-shift-left) (N4f6b core-prim . fxarithmetic-shift) (N4f6a core-prim . fxand) (N4f69 core-prim . fx>?) (N4f68 core-prim . fx>=?) (N4f67 core-prim . fx=?) (N4f66 core-prim . fx<?) (N4f65 core-prim . fx<=?) (N4f64 core-prim . fx-/carry) (N4f63 core-prim . fx-) (N4f62 core-prim . fx+/carry) (N4f61 core-prim . fx+) (N4f60 core-prim . fx*/carry) (N4f5f core-prim . fx*) (N4f5e core-prim . greatest-fixnum) (N4f5d core-prim . least-fixnum) (N4f5c core-prim . fixnum-width) (N4f5b core-prim . fixnum?) (N4f5a core-prim . bitwise-rotate-bit-field) (N4f59 core-prim . bitwise-reverse-bit-field) (N4f58 core-prim . bitwise-length) (N4f57 core-prim . bitwise-if) (N4f56 core-prim . bitwise-first-bit-set) (N4f55 core-prim . bitwise-copy-bit-field) (N4f54 core-prim . bitwise-copy-bit) (N4f53 core-prim . bitwise-bit-set?) (N4f52 core-prim . bitwise-bit-field) (N4f51 core-prim . bitwise-bit-count) (N4f50 core-prim . bitwise-xor) (N4f4f core-prim . bitwise-ior) (N4f4e core-prim . bitwise-and) (N4f4d core-prim . bitwise-not) (N4f4c core-prim . bitwise-arithmetic-shift-right) (N4f4b core-prim . bitwise-arithmetic-shift-left) (N4f4a core-prim . bitwise-arithmetic-shift) (N4f49 core-prim . zero?) (N4f48 core-prim . vector?) (N4f47 core-prim . vector-set!) (N4f46 core-prim . vector-ref) (N4f45 core-prim . vector-map) (N4f44 core-prim . vector-length) (N4f43 core-prim . vector-for-each) (N4f42 core-prim . vector-fill!) (N4f41 core-prim . vector->list) (N4f40 core-prim . vector) (N4f3f core-prim . values) (N4f3e core-prim . truncate) (N4f3d core-prim . tan) (N4f3c core-prim . symbol?) (N4f3b core-prim . symbol=?) (N4f3a core-prim . symbol->string) (N4f39 core-prim . substring) (N4f38 core-prim . string?) (N4f37 core-prim . string>?) (N4f36 core-prim . string>=?) (N4f35 core-prim . string=?) (N4f34 core-prim . string<?) (N4f33 core-prim . string<=?) (N4f32 core-prim . string-ref) (N4f31 core-prim . string-length) (N4f30 core-prim . string-for-each) (N4f2f core-prim . string-copy) (N4f2e core-prim . string-append) (N4f2d core-prim . string->symbol) (N4f2c core-prim . string->number) (N4f2b core-prim . string->list) (N4f2a core-prim . string) (N4f29 core-prim . sqrt) (N4f28 core-prim . sin) (N4f27 core-prim . round) (N4f26 core-prim . reverse) (N4f25 core-prim . real?) (N4f24 core-prim . real-valued?) (N4f23 core-prim . real-part) (N4f22 core-prim . rationalize) (N4f21 core-prim . rational?) (N4f20 core-prim . rational-valued?) (N4f1f core-prim . procedure?) (N4f1e core-prim . positive?) (N4f1d core-prim . pair?) (N4f1c core-prim . odd?) (N4f1b core-prim . numerator) (N4f1a core-prim . number?) (N4f19 core-prim . number->string) (N4f18 core-prim . null?) (N4f17 core-prim . not) (N4f16 core-prim . negative?) (N4f15 core-prim . nan?) (N4f14 core-prim . min) (N4f13 core-prim . max) (N4f12 core-prim . map) (N4f11 core-prim . make-vector) (N4f10 core-prim . make-string) (N4f0f core-prim . make-rectangular) (N4f0e core-prim . make-polar) (N4f0d core-prim . magnitude) (N4f0c core-prim . log) (N4f0b core-prim . list?) (N4f0a core-prim . list-tail) (N4f09 core-prim . list-ref) (N4f08 core-prim . list->vector) (N4f07 core-prim . list->string) (N4f06 core-prim . list) (N4f05 core-prim . length) (N4f04 core-prim . lcm) (N4f03 core-prim . integer?) (N4f02 core-prim . integer-valued?) (N4f01 core-prim . integer->char) (N4f00 core-prim . infinite?) (N4eff core-prim . inexact?) (N4efe core-prim . inexact) (N4efd core-prim . imag-part) (N4efc core-prim . gcd) (N4efb core-prim . for-each) (N4efa core-prim . floor) (N4ef9 core-prim . finite?) (N4ef8 core-prim . expt) (N4ef7 core-prim . exp) (N4ef6 core-prim . exact?) (N4ef5 core-prim . exact-integer-sqrt) (N4ef4 core-prim . exact) (N4ef3 core-prim . even?) (N4ef2 core-prim . error) (N4ef1 core-prim . eqv?) (N4ef0 core-prim . equal?) (N4eef core-prim . eq?) (N4eee core-prim . dynamic-wind) (N4eed core-prim . div0-and-mod0) (N4eec core-prim . mod0) (N4eeb core-prim . div0) (N4eea core-prim . div-and-mod) (N4ee9 core-prim . mod) (N4ee8 core-prim . div) (N4ee7 core-prim . denominator) (N4ee6 core-prim . cos) (N4ee5 core-prim . cons) (N4ee4 core-prim . complex?) (N4ee3 core-prim . char?) (N4ee2 core-prim . char>?) (N4ee1 core-prim . char>=?) (N4ee0 core-prim . char=?) (N4edf core-prim . char<?) (N4ede core-prim . char<=?) (N4edd core-prim . char->integer) (N4edc core-prim . ceiling) (N4edb core-prim . call-with-values) (N4eda core-prim . call/cc) (N4ed9 core-prim . call-with-current-continuation) (N4ed8 core-prim . cddddr) (N4ed7 core-prim . cdddar) (N4ed6 core-prim . cddadr) (N4ed5 core-prim . cddaar) (N4ed4 core-prim . cdaddr) (N4ed3 core-prim . cdadar) (N4ed2 core-prim . cdaadr) (N4ed1 core-prim . cdaaar) (N4ed0 core-prim . cadddr) (N4ecf core-prim . caddar) (N4ece core-prim . cadadr) (N4ecd core-prim . cadaar) (N4ecc core-prim . caaddr) (N4ecb core-prim . caadar) (N4eca core-prim . caaadr) (N4ec9 core-prim . caaaar) (N4ec8 core-prim . cdddr) (N4ec7 core-prim . cddar) (N4ec6 core-prim . cdadr) (N4ec5 core-prim . cdaar) (N4ec4 core-prim . caddr) (N4ec3 core-prim . cadar) (N4ec2 core-prim . caadr) (N4ec1 core-prim . caaar) (N4ec0 core-prim . cddr) (N4ebf core-prim . cdar) (N4ebe core-prim . cadr) (N4ebd core-prim . caar) (N4ebc core-prim . cdr) (N4ebb core-prim . car) (N4eba core-prim . boolean?) (N4eb9 core-prim . boolean=?) (N4eb8 core-prim . atan) (N4eb7 core-prim . assertion-violation) (N31fa core-prim . assertion-error) (N4eb6 core-prim . asin) (N4eb5 core-prim . apply) (N4eb4 core-prim . append) (N4eb3 core-prim . angle) (N4eb2 core-prim . acos) (N4eb1 core-prim . abs) (N4eb0 core-prim . /) (N4eaf core-prim . *) (N4eae core-prim . -) (N4ead core-prim . +) (N4eac core-prim . >=) (N4eab core-prim . >) (N4eaa core-prim . =) (N4ea9 core-prim . <=) (N4ea8 core-prim . <) (N4ea7 core-prim . library) (N4ea6 $core-rtd &no-nans-rtd &no-nans-rcd) (N4ea5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (N4ea4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (N4ea3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (N4ea2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (N4ea1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (N4ea0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (N4e9f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (N4e9e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (N4e9d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (N4e9c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (N4e9b $core-rtd &i/o-write-rtd &i/o-write-rcd) (N4e9a $core-rtd &i/o-read-rtd &i/o-read-rcd) (N4e99 $core-rtd &i/o-rtd &i/o-rcd) (N4e98 $core-rtd &undefined-rtd &undefined-rcd) (N4e97 $core-rtd &syntax-rtd &syntax-rcd) (N4e96 $core-rtd &lexical-rtd &lexical-rcd) (N4e95 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (N4e94 $core-rtd &non-continuable-rtd &non-continuable-rcd) (N4e93 $core-rtd &who-rtd &who-rcd) (N4e92 $core-rtd &irritants-rtd &irritants-rcd) (N4e91 $core-rtd &assertion-rtd &assertion-rcd) (N4e90 $core-rtd &violation-rtd &violation-rcd) (N4e8f $core-rtd &error-rtd &error-rcd) (N4e8e $core-rtd &serious-rtd &serious-rcd) (N4e8d $core-rtd &warning-rtd &warning-rcd) (N4e8c $core-rtd &message-rtd &message-rcd) (N4e8b $core-rtd &condition-rtd &condition-rcd) (N4e8a macro . define-condition-type) (N4e89 macro . define-enumeration) (N4e88 macro . define-record-type) (N4e87 macro . parent-rtd) (N4e86 macro . nongenerative) (N4e85 macro . opaque) (N4e84 macro . sealed) (N4e83 macro . protocol) (N4e82 macro . parent) (N4e81 macro . immutable) (N4e80 macro . mutable) (N4e7f macro . fields) (N4e7e macro . error-handling-mode) (N4e7d macro . file-options) (N4e7c macro . buffer-mode) (N4e7b macro . eol-style) (N4e7a macro . guard) (N4e79 macro . trace-define) (N4e78 macro . trace-lambda) (N4e77 macro . unsyntax-splicing) (N4e76 macro . unsyntax) (N4e75 macro . unquote-splicing) (N4e74 macro . unquote) (N4e73 macro . _) (N4e72 macro . else) (N4e71 macro . =>) (N4e70 macro . ...) (N4e6f macro . assert) (N4e6e macro . endianness) (N4e6d macro . delay) (N4e6c macro . time) (N4e6b macro . do) (N4e6a macro . cond) (N4e69 macro . let*) (N4e68 macro . let*-values) (N4e67 macro . let-values) (N4e66 macro . identifier-syntax) (N4e65 macro . with-syntax) (N4e64 macro . quasisyntax) (N4e63 macro . quasiquote) (N4e62 macro . syntax-rules) (N4e61 macro . include) (N4e60 macro . define-struct) (N4e5f core-macro . record-constructor-descriptor) (N4e5e core-macro . record-type-descriptor) (N4e5d macro . case) (N4e5c macro . parameterize) (N4e5b macro . unless) (N4e5a macro . when) (N4e59 core-macro . or) (N4e58 core-macro . and) (N4e57 core-macro . if) (N4e56 core-macro . let) (N4e55 core-macro . letrec*) (N4e54 core-macro . letrec) (N4e53 core-macro . type-descriptor) (N4e52 core-macro . case-lambda) (N4e51 core-macro . lambda) (N4e50 core-macro . syntax) (N4e4f core-macro . syntax-case) (N4e4e core-macro . quote) (N4e4d core-macro . foreign-call) (N4e4c letrec-syntax) (N4e4b let-syntax) (N4e4a set!) (N4e49 import) (N4e48 begin) (N4e47 module) (N4e46 define-syntax) (N4e45 define)) values values '#f '#f '#f '#f) (N2d30@N2b7c@install-library 'N520c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . N51b3) (eval-core . N51b2) (set-symbol-value! . N51b1) (symbol-value . N51b0) (gensym . N51af) (void . N51ae)) '() values values '#f '#f '#f '#f) (N2d30@N2b7c@install-library 'N520d '(mosh) '() '() '() '() '((set-symbol-value! . N51b1) (symbol-value . N51b0) (regexp? . N51ac) (read-line . N51ab) (ungensym . N51a9) (alist->eq-hash-table . N51a8) (assoc-ref . N51a7) (print . N51a6) (format . N51a5) (host-os . N51a4) (library-path . N2b5b) (standard-library-path . N51a3) (file-newer? . N519d) (stat-mtime . N519c) (digit->integer . N5198) (call-with-string-input-port . N5197) (call-with-string-io . N5196) (string-split . N5195) (bytevector-for-each . N5194) (string->regexp . N5193) (rxmatch . N5192) (regexp-replace-all . N5191) (hashtable-fold-left . N5190) (hashtable-for-each . N518f) (set-current-directory! . N518a) (expand-path . N5189) (current-directory . N5188) (p . N5149) (get-timeofday . N5130) (get-command-line . N512f) (sys-display . N512e) (whereis . N512d) (register . N512c) (vm-join! . N512b) (vm-set-value! . N512a) (vm? . N5129) (main-vm? . N5128) (vm-eval . N5127) (vm-self . N5126) (vm-start! . N5125) (make-vm . N5124) (mutex-try-lock! . N5123) (mutex-unlock! . N5122) (mutex-lock! . N5121) (mutex? . N5120) (make-mutex . N511f) (condition-variable-notify-all! . N511e) (condition-variable-notify! . N511d) (condition-variable-wait! . N511c) (make-condition-variable . N511b) (write/ss . N511a) (mosh-executable-path . N5119) (make-file-options . N5118) (source-info . N5117) (make-compiler-instruction . N5116) (make-instruction . N5115) (set-source-info! . N5114) (bignum? . N5113) (fast-equal? . N5112) (fasl-read . N5111) (fasl-write . N5110) (time-usage . N510f) (os-constant . N510e) (condition-printer . N510d) (time . N4e6c) (include . N4e61)) '() values values '#f '#f '#f '#f) (N2d30@N2b7c@install-library 'N520e '(system) '() '() '() '() '((gensym-prefix-set! . N51aa) (ssl-supported? . N51a2) (ssl-socket? . N51a1) (socket-sslize! . N51a0) (%monapi-name-whereis . N519f) (%monapi-message-send . N519e) (write-to-file . N519b) (file->list . N519a) (file->string . N5199) (mosh-cache-dir . N2945) (call-process . N518e) (local-tz-offset . N518d) (microseconds . N518c) (directory-list . N518b) (expand-path . N5189) (%spawn . N5187) (%waitpid . N5186) (simple-struct-name . N5185) (simple-struct-set! . N5184) (simple-struct-ref . N5183) (make-simple-struct . N5182) (simple-struct? . N5181) (pointer-ref-c-int64 . N5180) (pointer-ref-c-int32 . N517f) (pointer-ref-c-int16 . N517e) (pointer-ref-c-int8 . N517d) (pointer-ref-c-uint64 . N517c) (pointer-ref-c-uint32 . N517b) (pointer-ref-c-uint16 . N517a) (pointer-ref-c-uint8 . N5179) (pointer-set-c-uint64! . N5178) (pointer-set-c-uint32! . N5177) (pointer-set-c-uint16! . N5176) (pointer-set-c-uint8! . N5175) (pointer-set-c-int64! . N5174) (pointer-set-c-int32! . N5173) (pointer-set-c-int16! . N5172) (pointer-set-c-int8! . N5171) (pointer-set-c-pointer! . N5170) (pointer-set-c-double! . N516f) (pointer-set-c-float! . N516e) (pointer-set-c-long-long! . N516d) (pointer-set-c-long! . N516c) (pointer-set-c-int! . N516b) (pointer-set-c-short! . N516a) (pointer-set-c-char! . N5169) (pointer-ref-c-pointer . N5168) (pointer-ref-c-double . N5167) (pointer-ref-c-float . N5166) (pointer-ref-c-unsigned-long-long . N5165) (pointer-ref-c-signed-long-long . N5164) (pointer-ref-c-unsigned-long . N5163) (pointer-ref-c-signed-long . N5162) (pointer-ref-c-unsigned-int . N5161) (pointer-ref-c-signed-int . N5160) (pointer-ref-c-unsigned-short . N515f) (pointer-ref-c-signed-short . N515e) (pointer-ref-c-unsigned-char . N515d) (pointer-ref-c-signed-char . N515c) (pointer->integer . N515b) (integer->pointer . N515a) (pointer? . N5159) (shared-errno . N5158) (%ffi-free-c-callback-trampoline . N5157) (%ffi-make-c-callback-trampoline . N5156) (%ffi-free . N5155) (%ffi-malloc . N5154) (%ffi-supported? . N5153) (%ffi-pointer->string . N5152) (%ffi-call . N5151) (%ffi-lookup . N5150) (%ffi-open . N514f) (null-terminated-utf8->string . N514e) (null-terminated-bytevector->string . N514d) (%exec . N514c) (%fork . N514b) (%pipe . N514a) (open-output-string . N5148) (get-output-string . N5147) (file-stat-ctime . N5146) (file-stat-atime . N5145) (file-stat-mtime . N5144) (file-size-in-bytes . N5143) (file-writable? . N5142) (file-executable? . N5141) (file-readable? . N5140) (file-regular? . N513f) (file-symbolic-link? . N513e) (file-directory? . N513d) (create-symbolic-link . N513c) (rename-file . N513b) (delete-directory . N513a) (create-directory . N5139) (create-mosh-cache-dir . N5138) (get-environment-variables . N5137) (current-exception-handler . N5136) (get-environment-variable . N5135) (join-wraps . N5134) (id->real-label . N5133) (same-marks? . N5132) (same-marks*? . N5131) (disasm . N510c) (make-parameter . N2943) (socket-port . N510b) (socket-shutdown . N510a) (socket-close . N5109) (socket-send . N5108) (socket-recv! . N5107) (socket-recv . N5106) (make-server-socket . N5105) (make-client-socket . N5104) (socket-accept . N5103) (socket? . N5102) (parameterize . N4e5c)) '() values values '#f '#f '#f '#f)))
(begin (set! N4cc4@ref (unspecified)) (set! N4cc6@x* (unspecified)) (set! N4cc8@add-library-path! (unspecified)) (set! N4cca@parse-and-add-library-path (unspecified)) (set! N4ccc@for-each-with-index (unspecified)) (set! N4cce@rpad (unspecified)) (set! N4cd0@condition-printer/p (unspecified)) (set! N4cd2@record->field-alist (unspecified)) (set! N4cd4@map-with-index (unspecified)) (set! N4cd6@repl (unspecified)) (set! N4cd8@trace-printer (unspecified)) (set! N4cda@command-line (unspecified)) (set! N4cdc@local-library-path (unspecified)) (set! N4cde@load/args (unspecified)) (set! N4ce0@load (unspecified)) (set! N4ce2@ironscheme-build (unspecified)) (set! N4ce4@eval-top-level (unspecified)) (set! N4ce6@compile-system-libraries (unspecified)) (set! N4ce8@compile (unspecified)) (set! N4cea@compile->closure (unspecified)) (set! N4cec@pre-compile-r6rs-file (unspecified)) (set! N4cee@load-r6rs-top-level (unspecified)) (set! N4cf0@load-r6rs-top-level-sexp (unspecified)) (set! N4cf2@prefix-inc (unspecified)) (set! N4cf4@prefix-inc! (unspecified)) (set! N4cc4@ref (lambda (N4d2f@rtd N4d30@i N4d31@x) (let ((N4d35@val ((record-accessor N4d2f@rtd N4d30@i) N4d31@x))) (if (symbol? N4d35@val) (ungensym N4d35@val) N4d35@val)))) (set! N4e2b@N4cc4@ref N4cc4@ref) (set! N4cc6@x* '()) (set! N4e2c@N4cc6@x* N4cc6@x*) (set! N4cc8@add-library-path! (lambda (N4d37@path) (N2d20@N2b5c@library-path (append (N2d20@N2b5c@library-path) (list N4d37@path))))) (set! N4e2d@N4cc8@add-library-path! N4cc8@add-library-path!) (set! N4cca@parse-and-add-library-path (lambda (N4d39@paths N4d3a@message) (letrec* ((N4d3e@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((N4d3f@t N4d39@paths)) (if N4d3f@t ((lambda (N4d41@paths) (for-each (lambda (N4d43@path) (if (file-exists? N4d43@path) (N4cc8@add-library-path! (expand-path N4d43@path)) (format (current-error-port) N4d3a@message N4d43@path))) (string-split N4d41@paths N4d3e@separator))) N4d3f@t) (void)))))) (set! N4e2e@N4cca@parse-and-add-library-path N4cca@parse-and-add-library-path) (set! N4ccc@for-each-with-index (lambda (N4d45@proc N4d46@lst) (letrec ((N4d49@loop (lambda (N4d4b@i N4d4c@lst) (if (null? N4d4c@lst) (if '#f '#f (void)) (begin (N4d45@proc N4d4b@i (car N4d4c@lst)) (N4d49@loop (+ N4d4b@i '1) (cdr N4d4c@lst))))))) (N4d49@loop '1 N4d46@lst)))) (set! N4e2f@N4ccc@for-each-with-index N4ccc@for-each-with-index) (set! N4cce@rpad (lambda (N4d4f@str N4d50@pad N4d51@n) (let ((N4d55@rest (- N4d51@n (string-length (format '"~a" N4d4f@str))))) (let N4d5b@loop ((N4d57@rest N4d55@rest) (N4d58@ret (format '"~a" N4d4f@str))) (if (<= N4d57@rest '0) N4d58@ret (N4d5b@loop (- N4d57@rest '1) (string-append N4d58@ret N4d50@pad))))))) (set! N4e30@N4cce@rpad N4cce@rpad) (set! N4cd0@condition-printer/p (lambda (N4d5d@e N4d5e@port) (letrec* ((N4d62@max-condition-len (apply max (map (lambda (N4d73@c) (string-length (symbol->string (record-type-name (record-rtd N4d73@c))))) (simple-conditions N4d5d@e))))) (begin (display '" Condition components:\n" N4d5e@port) (N4ccc@for-each-with-index (lambda (N4d63@i N4d64@x) (let ((N4d67@rtd (record-rtd N4d64@x)) (N4d68@fields-alist (N4cd2@record->field-alist N4d64@x))) (begin (format N4d5e@port '" ~d. ~a" N4d63@i (N4cce@rpad (symbol->string (record-type-name N4d67@rtd)) '" " N4d62@max-condition-len)) (if (null? N4d68@fields-alist) (newline N4d5e@port) (void)) (let N4d6f@loop ((N4d6b@first '#t) (N4d6c@fields-alist N4d68@fields-alist)) (if (null? N4d6c@fields-alist) '() (let ((N4d71@field (car N4d6c@fields-alist))) (begin (if (not N4d6b@first) (display (N4cce@rpad '"" '" " (+ '4 N4d62@max-condition-len)) N4d5e@port) (void)) (display '"       " N4d5e@port) (display (car N4d71@field) N4d5e@port) (display '": " N4d5e@port) (write (cdr N4d71@field) N4d5e@port) (newline N4d5e@port) (N4d6f@loop '#f (cdr N4d6c@fields-alist))))))))) (simple-conditions N4d5d@e)))))) (set! N4e31@N4cd0@condition-printer/p N4cd0@condition-printer/p) (set! N4cd2@record->field-alist (lambda (N4d75@r) (letrec* ((N4d78@ref (lambda (N4d83@rtd N4d84@i N4d85@x) (let ((N4d89@val ((record-accessor N4d83@rtd N4d84@i) N4d85@x))) (if (symbol? N4d89@val) (ungensym N4d89@val) N4d89@val))))) (let N4d7d@loop ((N4d79@ret '()) (N4d7a@rtd (record-rtd N4d75@r))) (if N4d7a@rtd (N4d7d@loop (append N4d79@ret (N4cd4@map-with-index (lambda (N4d7f@i N4d80@field) (cons N4d80@field (N4d78@ref N4d7a@rtd N4d7f@i N4d75@r))) (vector->list (record-type-field-names N4d7a@rtd)))) (record-type-parent N4d7a@rtd)) N4d79@ret))))) (set! N4e32@N4cd2@record->field-alist N4cd2@record->field-alist) (set! N4cd4@map-with-index (lambda (N4d8b@proc N4d8c@lst) (let N4d95@loop ((N4d8f@i '0) (N4d90@lst N4d8c@lst) (N4d91@ret '())) (if (null? N4d90@lst) (reverse N4d91@ret) (N4d95@loop (+ N4d8f@i '1) (cdr N4d90@lst) (cons (N4d8b@proc N4d8f@i (car N4d90@lst)) N4d91@ret)))))) (set! N4e33@N4cd4@map-with-index N4cd4@map-with-index) (set! N4cd6@repl (lambda N4d97@x (letrec* ((N4d9a@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (N4d9d@N4d9b) (lambda () (with-exception-handler (lambda (N4d9f@e) ((call/cc (lambda (N4da1@N4d9c) (N4d9d@N4d9b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? N4d9f@e) (N4cd0@condition-printer/p N4d9f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" N4d9f@e))) (N4da1@N4d9c (lambda () (raise-continuable N4d9f@e)))))))))) (lambda () (let N4da7@loop ((N4da3@line (get-line (current-input-port))) (N4da4@accum '"")) (letrec* ((N4daa@parentheses-ok? (lambda (N4db5@text) (let N4dbd@loop ((N4db7@chars (string->list N4db5@text)) (N4db8@p0 '0) (N4db9@p1 '0)) (if (null? N4db7@chars) (= '0 N4db8@p0 N4db9@p1) (let ((N4dbf@t (car N4db7@chars))) (if (memv N4dbf@t '(#\()) (N4dbd@loop (cdr N4db7@chars) (+ N4db8@p0 '1) N4db9@p1) (if (memv N4dbf@t '(#\))) (N4dbd@loop (cdr N4db7@chars) (- N4db8@p0 '1) N4db9@p1) (if (memv N4dbf@t '(#\[)) (N4dbd@loop (cdr N4db7@chars) N4db8@p0 (+ N4db9@p1 '1)) (if (memv N4dbf@t '(#\])) (N4dbd@loop (cdr N4db7@chars) N4db8@p0 (- N4db9@p1 '1)) (N4dbd@loop (cdr N4db7@chars) N4db8@p0 N4db9@p1)))))))))) (N4dac@eval-string-print (lambda (N4daf@text) (if (not (or (string=? '"\n" N4daf@text) (= '0 (string-length N4daf@text)))) (call-with-values (lambda () (N4ce4@eval-top-level (call-with-port (open-string-input-port N4daf@text) read))) (lambda N4db1@out* (for-each (lambda (N4db3@out) (begin (write N4db3@out) (newline))) N4db1@out*))) (void))))) (if (eof-object? N4da3@line) (begin (N4dac@eval-string-print N4da4@accum) (exit)) (let ((N4dad@current (string-append N4da4@accum N4da3@line))) (if (N4daa@parentheses-ok? N4dad@current) (N4dac@eval-string-print N4dad@current) (N4da7@loop (get-line (current-input-port)) N4dad@current)))))))))))) (newline) (N4d9a@rec))))) (N4d9a@rec)))) (set! N4e34@N4cd6@repl N4cd6@repl) (set! N4cd8@trace-printer (N2a66@N2944@make-parameter write)) (set! N4e35@N4cd8@trace-printer N4cd8@trace-printer) (set! N4cda@command-line (N2a66@N2944@make-parameter (get-command-line))) (set! N4e36@N4cda@command-line N4cda@command-line) (set! N4cdc@local-library-path (lambda (N4dc1@filename) (N2d20@N2b5c@library-path))) (set! N4e37@N4cdc@local-library-path N4cdc@local-library-path) (set! N4cde@load/args (lambda (N4dc3@filename . N4dc5@args) (begin (apply N4cee@load-r6rs-top-level N4dc3@filename 'load N4dc5@args) (void)))) (set! N4e38@N4cde@load/args N4cde@load/args) (set! N4ce0@load (lambda (N4dc7@filename) (begin (apply N4cee@load-r6rs-top-level N4dc7@filename 'load (N4cda@command-line)) (void)))) (set! N4e39@N4ce0@load N4ce0@load) (set! N4ce2@ironscheme-build (lambda () (N4ce0@load '"ironscheme-buildscript.ss"))) (set! N4e3a@N4ce2@ironscheme-build N4ce2@ironscheme-build) (set! N4ce4@eval-top-level (lambda (N4dc9@x) (N4ca1@N31e1@eval N4dc9@x (N4cb8@N320f@interaction-environment)))) (set! N4e3b@N4ce4@eval-top-level N4ce4@eval-top-level) (set! N4ce6@compile-system-libraries (lambda () (N4ce4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! N4e3c@N4ce6@compile-system-libraries N4ce6@compile-system-libraries) (set! N4ce8@compile (lambda (N4dcb@filename) (N4cee@load-r6rs-top-level N4dcb@filename 'compile))) (set! N4e3d@N4ce8@compile N4ce8@compile) (set! N4cea@compile->closure (lambda (N4dcd@filename) (N4cee@load-r6rs-top-level N4dcd@filename 'closure))) (set! N4e3e@N4cea@compile->closure N4cea@compile->closure) (set! N4cec@pre-compile-r6rs-file (lambda (N4dcf@filename) (N4cee@load-r6rs-top-level N4dcf@filename 'compile))) (set! N4e3f@N4cec@pre-compile-r6rs-file N4cec@pre-compile-r6rs-file) (set! N4cee@load-r6rs-top-level (lambda (N4dd1@filename N4dd2@how . N4dd5@args) (begin (N2d20@N2b5c@library-path (N4cdc@local-library-path N4dd1@filename)) (let ((N4dd7@x* (with-input-from-file N4dd1@filename (lambda () (let N4dd9@f () (let ((N4ddb@x (N2a58@N2928@read-annotated))) (if (eof-object? N4ddb@x) '() (cons N4ddb@x (N4dd9@f))))))))) (let ((N4ddd@t N4dd2@how)) (if (memv N4ddd@t '(closure)) (N4cb7@N320d@pre-compile-r6rs-top-level N4dd7@x*) (if (memv N4ddd@t '(load)) (begin (N4cda@command-line (cons N4dd1@filename (car N4dd5@args))) (N2a67@N2946@mosh-cache-dir (create-mosh-cache-dir)) (if (N2a67@N2946@mosh-cache-dir) (gensym-prefix-set! (N4cf4@prefix-inc! (string-append (N2a67@N2946@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (N4ddf@file) ((call/cc (lambda (N4de3@N4de1) (lambda () (with-exception-handler (lambda (N4de5@c) ((call/cc (lambda (N4de7@N4de2) (N4de3@N4de1 (lambda () (if '#t '#t (N4de7@N4de2 (lambda () (raise-continuable N4de5@c)))))))))) (lambda () (delete-file (string-append (N2a67@N2946@mosh-cache-dir) '"/" N4ddf@file))))))))) (directory-list (N2a67@N2946@mosh-cache-dir))) (void)) (let ((N4de9@compiled (N4cb6@N320b@compile-r6rs-top-level N4dd7@x*))) (begin (if (and (N2a67@N2946@mosh-cache-dir) (not (symbol-value '%disable-acc))) (N2d24@N2b64@serialize-all N2a61@N293a@serialize-library N2abd@N2a76@compile-core-expr) (void)) (N4de9@compiled)))) (if (memv N4ddd@t '(compile)) (begin (N4cb6@N320b@compile-r6rs-top-level N4dd7@x*) (N2d24@N2b64@serialize-all N2a61@N293a@serialize-library N2abd@N2a76@compile-core-expr)) (if '#f '#f (void)))))))))) (set! N4e40@N4cee@load-r6rs-top-level N4cee@load-r6rs-top-level) (set! N4cf0@load-r6rs-top-level-sexp (lambda (N4deb@import-spec N4dec@thunk) (let ((N4df7@N4df0 N2d20@N2b5c@library-path) (N4df8@N4df2 N2a67@N2946@mosh-cache-dir) (N4df9@N4df4 (N4cdc@local-library-path '"")) (N4dfa@N4df6 (create-mosh-cache-dir))) (let ((N4dff@swap (lambda () (begin (let ((N4e01@t (N4df7@N4df0))) (begin (N4df7@N4df0 N4df9@N4df4) (set! N4df9@N4df4 N4e01@t))) (let ((N4e03@t (N4df8@N4df2))) (begin (N4df8@N4df2 N4dfa@N4df6) (set! N4dfa@N4df6 N4e03@t))))))) (dynamic-wind N4dff@swap (lambda () (begin (if (N2a67@N2946@mosh-cache-dir) (gensym-prefix-set! (N4cf4@prefix-inc! (string-append (N2a67@N2946@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((N4e09@N4e06 N4cda@command-line) (N4e0a@N4e08 '())) (let ((N4e0d@swap (lambda () (let ((N4e0f@t (N4e09@N4e06))) (begin (N4e09@N4e06 N4e0a@N4e08) (set! N4e0a@N4e08 N4e0f@t)))))) (dynamic-wind N4e0d@swap (lambda () ((N4cb6@N320b@compile-r6rs-top-level (list (cons 'import N4deb@import-spec) (list N4dec@thunk))))) N4e0d@swap))))) N4dff@swap))))) (set! N4e41@N4cf0@load-r6rs-top-level-sexp N4cf0@load-r6rs-top-level-sexp) (set! N4cf2@prefix-inc (lambda (N4e11@prefix-string) (let ((N4e13@prefix (symbol->string N4e11@prefix-string))) (let ((N4e15@len (string-length N4e13@prefix))) (let N4e1d@loop ((N4e17@i (- N4e15@len '1)) (N4e18@carry? '#t) (N4e19@accum '())) (if (< N4e17@i '0) (string->symbol (list->string (if N4e18@carry? (cons '#\a N4e19@accum) N4e19@accum))) (if N4e18@carry? (let ((N4e1f@next-integer (+ '1 (char->integer (string-ref N4e13@prefix N4e17@i))))) (if (= N4e1f@next-integer '123) (N4e1d@loop (- N4e17@i '1) '#f (cons '#\A N4e19@accum)) (if (= N4e1f@next-integer '91) (N4e1d@loop (- N4e17@i '1) '#t (cons '#\a N4e19@accum)) (N4e1d@loop (- N4e17@i '1) '#f (cons (integer->char N4e1f@next-integer) N4e19@accum))))) (N4e1d@loop (- N4e17@i '1) '#f (cons (string-ref N4e13@prefix N4e17@i) N4e19@accum))))))))) (set! N4e42@N4cf2@prefix-inc N4cf2@prefix-inc) (set! N4cf4@prefix-inc! (lambda (N4e21@file) (begin (if (not (file-exists? N4e21@file)) (call-with-output-file N4e21@file (lambda (N4e23@port) (write 'd N4e23@port))) (void)) (let ((N4e25@prefix (call-with-input-file N4e21@file read))) (if (main-vm?) (let ((N4e27@next-prefix (N4cf2@prefix-inc N4e25@prefix))) (begin (call-with-port (open-file-output-port N4e21@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (N4e29@port) (write N4e27@next-prefix N4e29@port))) N4e25@prefix)) N4e25@prefix))))) (set! N4e43@N4cf4@prefix-inc! N4cf4@prefix-inc!) (begin (N2d25@N2b66@current-precompiled-library-loader N2a62@N293c@load-serialized-library) (set-symbol-value! 'load N4ce0@load) (set-symbol-value! 'pre-compile-r6rs-file N4cec@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs N4ce4@eval-top-level) (set-symbol-value! 'int-env-syms N4c98@N31cf@interaction-environment-symbols) (set-symbol-value! 'expanded2core N2abc@N2a74@expanded->core) (set-symbol-value! 'trace-printer N4cd8@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (N4cf5@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list N4cf5@c))))) (N4cca@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (N4cca@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (N4cc8@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (N4cc8@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (N4cc8@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((N4cf7@prefix (lambda (N4cf9@ext N4cfa@ls) (append (map (lambda (N4cfd@x) (string-append N4cf9@ext N4cfd@x)) N4cfa@ls) N4cfa@ls)))) (N2d21@N2b5e@library-extensions (N4cf7@prefix '".mosh" (N2d21@N2b5e@library-extensions)))) (current-exception-handler (lambda (N4cff@c) (begin (if (condition? N4cff@c) (N4cd0@condition-printer/p N4cff@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" N4cff@c)) N4cff@c))) (if ((call/cc (lambda (N4d03@N4d01) (lambda () (with-exception-handler (lambda (N4d05@c) ((call/cc (lambda (N4d07@N4d02) (N4d03@N4d01 (lambda () (if '#t '#f (N4d07@N4d02 (lambda () (raise-continuable N4d05@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (N4cf0@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (N4cda@command-line)) (let ((N4d11@N4d0a N4cda@command-line) (N4d12@N4d0c N2a67@N2946@mosh-cache-dir) (N4d13@N4d0e '()) (N4d14@N4d10 (create-mosh-cache-dir))) (let ((N4d19@swap (lambda () (begin (let ((N4d1b@t (N4d11@N4d0a))) (begin (N4d11@N4d0a N4d13@N4d0e) (set! N4d13@N4d0e N4d1b@t))) (let ((N4d1d@t (N4d12@N4d0c))) (begin (N4d12@N4d0c N4d14@N4d10) (set! N4d14@N4d10 N4d1d@t))))))) (dynamic-wind N4d19@swap (lambda () (begin (if (N2a67@N2946@mosh-cache-dir) (gensym-prefix-set! (N4cf4@prefix-inc! (string-append (N2a67@N2946@mosh-cache-dir) '"/prefix.txt"))) (void)) (N4cd6@repl))) N4d19@swap))) (begin (N2d20@N2b5c@library-path (N4cdc@local-library-path (car (N4cda@command-line)))) (set! N4cc6@x* (with-input-from-file (car (N4cda@command-line)) (lambda () (let N4d1f@f () (let ((N4d21@x (N2a58@N2928@read-annotated))) (if (eof-object? N4d21@x) '() (cons N4d21@x (N4d1f@f)))))))) (N4cda@command-line (cons (car (N4cda@command-line)) (cdr (N4cda@command-line)))) (N2a67@N2946@mosh-cache-dir (create-mosh-cache-dir)) (if (N2a67@N2946@mosh-cache-dir) (gensym-prefix-set! (N4cf4@prefix-inc! (string-append (N2a67@N2946@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (N4d23@file) ((call/cc (lambda (N4d27@N4d25) (lambda () (with-exception-handler (lambda (N4d29@c) ((call/cc (lambda (N4d2b@N4d26) (N4d27@N4d25 (lambda () (if '#t '#t (N4d2b@N4d26 (lambda () (raise-continuable N4d29@c)))))))))) (lambda () (delete-file (string-append (N2a67@N2946@mosh-cache-dir) '"/" N4d23@file))))))))) (directory-list (N2a67@N2946@mosh-cache-dir))) (void)) (let ((N4d2d@compiled (N4cb6@N320b@compile-r6rs-top-level N4cc6@x*))) (begin (if (and (N2a67@N2946@mosh-cache-dir) (not (symbol-value '%disable-acc))) (N2d24@N2b64@serialize-all N2a61@N293a@serialize-library N2abd@N2a76@compile-core-expr) (void)) (N4d2d@compiled))))))))
