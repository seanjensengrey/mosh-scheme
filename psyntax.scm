;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bm28c9@library-file-path->cache-path (unspecified)) (set! bm28cb@read-annotated (unspecified)) (set! bm28cd@annotation-stripped (unspecified)) (set! bm28cf@annotation? (unspecified)) (set! bm28d1@annotation-source (unspecified)) (set! bm28d3@annotation-expression (unspecified)) (set! bm28d5@scm->fasl (unspecified)) (set! bm28d7@fasl-save (unspecified)) (set! bm28d9@fasl-load (unspecified)) (set! bm28db@verbose? (unspecified)) (set! bm28dd@serialize-library (unspecified)) (set! bm28df@load-serialized-library (unspecified)) (set! bm28e1@make-record-printer (unspecified)) (set! bm28e3@compile-core (unspecified)) (set! bm28e5@read-library-source-file (unspecified)) (set! bm28e7@make-parameter (unspecified)) (set! bm28e9@mosh-cache-dir (unspecified)) (set! bm297f@file-options-spec (unspecified)) (set! bm28c9@library-file-path->cache-path (lambda (bm2980@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bm2986@bm2983 bm2987@bm2985) (let ((bm298a@extract bm2987@bm2985) (bm298b@p bm2986@bm2983)) (letrec* ((bm298f@display-hex (lambda (bm2998@n) (if (<= '0 bm2998@n '9) (display bm2998@n bm298b@p) (display (integer->char (+ (char->integer '#\a) (- bm2998@n '10))) bm298b@p))))) (begin (let bm2992@f ((bm2990@ls (string-split bm2980@x '#\/))) (if (not (null? bm2990@ls)) (begin (display '"_" bm298b@p) (for-each (lambda (bm2994@c) (if (or (char<=? '#\a bm2994@c '#\z) (char<=? '#\A bm2994@c '#\Z) (char<=? '#\0 bm2994@c '#\9) (memv bm2994@c '(#\- #\. #\_ #\~))) (display bm2994@c bm298b@p) (begin (display '"%" bm298b@p) (let ((bm2996@n (char->integer bm2994@c))) (begin (bm298f@display-hex (quotient bm2996@n '16)) (bm298f@display-hex (remainder bm2996@n '16))))))) (string->list (car bm2990@ls))) (bm2992@f (cdr bm2990@ls))) (void))) (bm298a@extract)))))))) (set! bm29fa@bm28c9@library-file-path->cache-path bm28c9@library-file-path->cache-path) (set! bm28cb@read-annotated read) (set! bm29fb@bm28cb@read-annotated bm28cb@read-annotated) (set! bm28cd@annotation-stripped (lambda (bm299a@x) (bm28d3@annotation-expression bm299a@x))) (set! bm29fc@bm28cd@annotation-stripped bm28cd@annotation-stripped) (set! bm28cf@annotation? (lambda (bm299c@x) (source-info bm299c@x))) (set! bm29fd@bm28cf@annotation? bm28cf@annotation?) (set! bm28d1@annotation-source (lambda (bm299e@x) (source-info bm299e@x))) (set! bm29fe@bm28d1@annotation-source bm28d1@annotation-source) (set! bm28d3@annotation-expression (lambda (bm29a0@x) (if (pair? bm29a0@x) (cons (car bm29a0@x) (cdr bm29a0@x)) (if (procedure? bm29a0@x) (set-source-info! bm29a0@x '#f) bm29a0@x)))) (set! bm29ff@bm28d3@annotation-expression bm28d3@annotation-expression) (set! bm28d5@scm->fasl (lambda (bm29a2@filename) (string-append (bm28e9@mosh-cache-dir) '"/" (bm28c9@library-file-path->cache-path bm29a2@filename) '".mosh-fasl"))) (set! bm2a00@bm28d5@scm->fasl bm28d5@scm->fasl) (set! bm28d7@fasl-save (lambda (bm29a4@filename bm29a5@obj) (call-with-port (open-file-output-port bm29a4@filename) (lambda (bm29a8@port) ((symbol-value 'fasl-write!) bm29a5@obj bm29a8@port))))) (set! bm2a01@bm28d7@fasl-save bm28d7@fasl-save) (set! bm28d9@fasl-load (lambda (bm29aa@filename) (call-with-port (open-file-input-port bm29aa@filename) (symbol-value 'fasl-read!)))) (set! bm2a02@bm28d9@fasl-load bm28d9@fasl-load) (set! bm28db@verbose? (symbol-value '%verbose)) (set! bm2a03@bm28db@verbose? bm28db@verbose?) (set! bm28dd@serialize-library (lambda (bm29ac@filename bm29ad@obj) (begin (if bm28db@verbose? (format (current-error-port) '"serialize-library ~a\n..." bm29ac@filename) (void)) (let ((bm29b0@expanded2core (symbol-value 'expanded2core))) (let ((bm29b2@compile (symbol-value 'compile-w/o-halt))) (let ((bm29b4@code bm29ad@obj)) (let ((bm29b6@pivot (cddddr (cddddr bm29b4@code)))) (let ((bm29b8@visit (bm29b2@compile (bm29b0@expanded2core (car bm29b6@pivot))))) (begin (set-car! bm29b6@pivot bm29b8@visit) (let ((bm29ba@pivot (cdr bm29b6@pivot))) (let ((bm29bc@invoke (bm29b2@compile (bm29b0@expanded2core (car bm29ba@pivot))))) (set-car! bm29ba@pivot bm29bc@invoke))))))))) (let ((bm29be@fasl-file (bm28d5@scm->fasl bm29ac@filename))) (begin (if (file-exists? bm29be@fasl-file) (delete-file bm29be@fasl-file) (void)) ((call/cc (lambda (bm29c2@bm29c0) (lambda () (with-exception-handler (lambda (bm29c4@c) ((call/cc (lambda (bm29c6@bm29c1) (bm29c2@bm29c0 (lambda () (if '#t (begin (if bm28db@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" bm29ac@filename) (void)) (if (file-exists? bm29be@fasl-file) (delete-file bm29be@fasl-file) (void)) '#f) (bm29c6@bm29c1 (lambda () (raise-continuable bm29c4@c)))))))))) (lambda () (bm28d7@fasl-save bm29be@fasl-file bm29ad@obj)))))))))))) (set! bm2a04@bm28dd@serialize-library bm28dd@serialize-library) (set! bm28df@load-serialized-library (lambda (bm29c8@filename bm29c9@obj) (and (bm28e9@mosh-cache-dir) (let ((bm29cc@fasl-file (bm28d5@scm->fasl bm29c8@filename))) (if (and (file-exists? bm29cc@fasl-file) ((symbol-value 'file-newer?) bm29cc@fasl-file bm29c8@filename)) (let ((bm29ce@expanded2core (symbol-value 'expanded2core))) (let ((bm29d0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bm29d2@code (bm28d9@fasl-load bm29cc@fasl-file))) (let ((bm29d4@pivot (cddddr (cddddr bm29d2@code)))) (let ((bm29d6@visit (car bm29d4@pivot))) (let ((bm29d8@visit-proc (lambda () (bm29d0@eval-compiled-core bm29d6@visit)))) (begin (set-car! bm29d4@pivot bm29d8@visit-proc) (let ((bm29da@pivot (cdr bm29d4@pivot))) (let ((bm29dc@invoke (car bm29da@pivot))) (begin (set-car! bm29da@pivot (lambda () (bm29d0@eval-compiled-core bm29dc@invoke))) (apply bm29c9@obj bm29d2@code))))))))))) '#f))))) (set! bm2a05@bm28df@load-serialized-library bm28df@load-serialized-library) (set! bm28e1@make-record-printer (lambda (bm29de@name bm29df@printer) (lambda bm29e2@x (begin (display '"record printer") (for-each display bm29e2@x))))) (set! bm2a06@bm28e1@make-record-printer bm28e1@make-record-printer) (set! bm28e3@compile-core (lambda bm29e4@x (apply error 'comile-core '"not implementated" bm29e4@x))) (set! bm2a07@bm28e3@compile-core bm28e3@compile-core) (set! bm28e5@read-library-source-file (lambda (bm29e6@file-name) (with-input-from-file bm29e6@file-name bm28cb@read-annotated))) (set! bm2a08@bm28e5@read-library-source-file bm28e5@read-library-source-file) (set! bm28e7@make-parameter (lambda bm29f6 (let ((bm29f7 (length bm29f6))) (if (= bm29f7 '1) (apply (lambda (bm29e8@x) (bm28e7@make-parameter bm29e8@x (lambda (bm29ea@x) bm29ea@x))) bm29f6) (if (= bm29f7 '2) (apply (lambda (bm29ec@x bm29ed@fender) (let ((bm29f0@x (bm29ed@fender bm29ec@x))) (lambda bm29f4 (let ((bm29f5 (length bm29f4))) (if (= bm29f5 '0) (apply (lambda () bm29f0@x) bm29f4) (if (= bm29f5 '1) (apply (lambda (bm29f2@v) (set! bm29f0@x (bm29ed@fender bm29f2@v))) bm29f4) (error 'apply '"invalid arg count"))))))) bm29f6) (error 'apply '"invalid arg count")))))) (set! bm2a09@bm28e7@make-parameter bm28e7@make-parameter) (set! bm28e9@mosh-cache-dir (bm28e7@make-parameter '#f)) (set! bm2a0a@bm28e9@mosh-cache-dir bm28e9@mosh-cache-dir) (set! bm297f@file-options-spec (lambda (bm29f8@x) bm29f8@x)) (set! bm2a0b@bm297f@file-options-spec bm297f@file-options-spec) (void))
(begin (set! bm2a11@current-primitive-locations (unspecified)) (set! bm2a13@mutable? (unspecified)) (set! bm2a15@rewriter (unspecified)) (set! bm2a17@expanded->core (unspecified)) (set! bm2a19@compile-core-expr (unspecified)) (set! bm2a1b@pretty-print (unspecified)) (set! bm2a1d@compile-core-expr-to-port (unspecified)) (set! bm2a11@current-primitive-locations (bm2a09@bm28e7@make-parameter (lambda (bm2a1e@x) '#f) (lambda (bm2a20@p) bm2a20@p))) (set! bm2a5c@bm2a11@current-primitive-locations bm2a11@current-primitive-locations) (set! bm2a13@mutable? (lambda (bm2a22@x) (or (pair? bm2a22@x) (vector? bm2a22@x) (hashtable? bm2a22@x)))) (set! bm2a5d@bm2a13@mutable? bm2a13@mutable?) (set! bm2a15@rewriter (lambda (bm2a24@quote-hack?) (letrec* ((bm2a27@f (lambda (bm2a28@x) (if (pair? bm2a28@x) (let ((bm2a2a@t (car bm2a28@x))) (if (memv bm2a2a@t '(quote)) (if (and bm2a24@quote-hack? (bm2a13@mutable? (cadr bm2a28@x))) (let ((bm2a2c@g (gensym))) (begin (set-symbol-value! bm2a2c@g (cadr bm2a28@x)) bm2a2c@g)) bm2a28@x) (if (memv bm2a2a@t '(case-lambda)) (cons 'case-lambda (map (lambda (bm2a2e@x) (cons (car bm2a2e@x) (map bm2a27@f (cdr bm2a2e@x)))) (cdr bm2a28@x))) (if (memv bm2a2a@t '(lambda)) (cons* 'lambda (cadr bm2a28@x) (map bm2a27@f (cddr bm2a28@x))) (if (memv bm2a2a@t '(letrec)) (let ((bm2a30@bindings (cadr bm2a28@x)) (bm2a31@body* (cddr bm2a28@x))) (let ((bm2a34@lhs* (map car bm2a30@bindings)) (bm2a35@rhs* (map cadr bm2a30@bindings))) (cons* 'letrec (map list bm2a34@lhs* (map bm2a27@f bm2a35@rhs*)) (map bm2a27@f bm2a31@body*)))) (if (memv bm2a2a@t '(letrec*)) (let ((bm2a38@bindings (cadr bm2a28@x)) (bm2a39@body* (cddr bm2a28@x))) (let ((bm2a3c@lhs* (map car bm2a38@bindings)) (bm2a3d@rhs* (map cadr bm2a38@bindings))) (cons* 'letrec* (map list bm2a3c@lhs* (map bm2a27@f bm2a3d@rhs*)) (map bm2a27@f bm2a39@body*)))) (if (memv bm2a2a@t '(library-letrec*)) (let ((bm2a40@name (cadr bm2a28@x)) (bm2a41@x (cdr bm2a28@x))) (let ((bm2a44@bindings (cadr bm2a41@x)) (bm2a45@body* (cddr bm2a41@x))) (let ((bm2a48@lhs* (map car bm2a44@bindings)) (bm2a49@lhs** (map cadr bm2a44@bindings)) (bm2a4a@rhs* (map caddr bm2a44@bindings))) (cons* 'library-letrec* bm2a40@name (map list bm2a48@lhs* bm2a49@lhs** (map bm2a27@f bm2a4a@rhs*)) (map bm2a27@f bm2a45@body*))))) (if (memv bm2a2a@t '(begin)) (cons 'begin (map bm2a27@f (cdr bm2a28@x))) (if (memv bm2a2a@t '(set!)) (list 'set! (cadr bm2a28@x) (bm2a27@f (caddr bm2a28@x))) (if (memv bm2a2a@t '(primitive)) (let ((bm2a4e@op (cadr bm2a28@x))) (let ((bm2a50@t ((bm2a11@current-primitive-locations) bm2a4e@op))) (if bm2a50@t ((lambda (bm2a52@loc) bm2a52@loc) bm2a50@t) bm2a4e@op))) (if (memv bm2a2a@t '(define)) bm2a28@x (if (list? bm2a28@x) (map bm2a27@f bm2a28@x) (error 'rewrite '"invalid form ~s ~s" bm2a28@x (list? bm2a28@x)))))))))))))) bm2a28@x)))) bm2a27@f))) (set! bm2a5e@bm2a15@rewriter bm2a15@rewriter) (set! bm2a17@expanded->core (lambda (bm2a54@x) ((bm2a15@rewriter '#f) bm2a54@x))) (set! bm2a5f@bm2a17@expanded->core bm2a17@expanded->core) (set! bm2a19@compile-core-expr (lambda (bm2a56@x) ((bm2a15@rewriter '#f) bm2a56@x))) (set! bm2a60@bm2a19@compile-core-expr bm2a19@compile-core-expr) (set! bm2a1b@pretty-print write) (set! bm2a61@bm2a1b@pretty-print bm2a1b@pretty-print) (set! bm2a1d@compile-core-expr-to-port (lambda (bm2a58@x bm2a59@p) (bm2a1b@pretty-print ((bm2a15@rewriter '#f) bm2a58@x) bm2a59@p))) (set! bm2a62@bm2a1d@compile-core-expr-to-port bm2a1d@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bm2ab1@make-collection (unspecified)) (set! bm2ab3@current-library-collection (unspecified)) (set! bm2ab5@rp (unspecified)) (set! bm2abf@library? (unspecified)) (set! bm2ac1@library-id (unspecified)) (set! bm2ac3@set-library-id! (unspecified)) (set! bm2ac5@library-name (unspecified)) (set! bm2ac7@set-library-name! (unspecified)) (set! bm2ac9@library-version (unspecified)) (set! bm2acb@set-library-version! (unspecified)) (set! bm2acd@library-imp* (unspecified)) (set! bm2acf@set-library-imp*! (unspecified)) (set! bm2ad1@library-vis* (unspecified)) (set! bm2ad3@set-library-vis*! (unspecified)) (set! bm2ad5@library-inv* (unspecified)) (set! bm2ad7@set-library-inv*! (unspecified)) (set! bm2ad9@library-subst (unspecified)) (set! bm2adb@set-library-subst! (unspecified)) (set! bm2add@library-env (unspecified)) (set! bm2adf@set-library-env! (unspecified)) (set! bm2ae1@library-visit-state (unspecified)) (set! bm2ae3@set-library-visit-state! (unspecified)) (set! bm2ae5@library-invoke-state (unspecified)) (set! bm2ae7@set-library-invoke-state! (unspecified)) (set! bm2ae9@library-visit-code (unspecified)) (set! bm2aeb@set-library-visit-code! (unspecified)) (set! bm2aed@library-invoke-code (unspecified)) (set! bm2aef@set-library-invoke-code! (unspecified)) (set! bm2af1@library-visible? (unspecified)) (set! bm2af3@set-library-visible?! (unspecified)) (set! bm2af5@library-source-file-name (unspecified)) (set! bm2af7@set-library-source-file-name! (unspecified)) (set! bm2af9@dummy (unspecified)) (set! bm2afb@find-dependencies (unspecified)) (set! bm2afd@find-library-by (unspecified)) (set! bm2aff@library-path (unspecified)) (set! bm2b01@library-extensions (unspecified)) (set! bm2b03@library-name->file-name (unspecified)) (set! bm2b05@file-locator (unspecified)) (set! bm2b07@serialize-all (unspecified)) (set! bm2b09@current-precompiled-library-loader (unspecified)) (set! bm2b0b@try-load-from-file (unspecified)) (set! bm2b0d@library-loader (unspecified)) (set! bm2b0f@current-library-expander (unspecified)) (set! bm2b11@external-pending-libraries (unspecified)) (set! bm2b13@find-external-library (unspecified)) (set! bm2b15@find-library-by-name (unspecified)) (set! bm2b17@library-exists? (unspecified)) (set! bm2b19@find-library-by-spec/die (unspecified)) (set! bm2b1b@label->binding-table (unspecified)) (set! bm2b1d@install-library-record (unspecified)) (set! bm2b1f@install-library (unspecified)) (set! bm2b21@imported-label->binding (unspecified)) (set! bm2b23@invoke-library (unspecified)) (set! bm2b25@visit-library (unspecified)) (set! bm2b27@invoke-library-by-spec (unspecified)) (set! bm2b29@installed-libraries (unspecified)) (set! bm2b2b@library-spec (unspecified)) (set! bm2ab1@make-collection (lambda () (let ((bm2b2c@set '())) (letrec* ((bm2b2f@set-cons (lambda (bm2b34@x bm2b35@ls) (if (memq bm2b34@x bm2b35@ls) bm2b35@ls (cons bm2b34@x bm2b35@ls))))) (lambda bm2b32 (let ((bm2b33 (length bm2b32))) (if (= bm2b33 '0) (apply (lambda () bm2b2c@set) bm2b32) (if (= bm2b33 '1) (apply (lambda (bm2b30@x) (set! bm2b2c@set (bm2b2f@set-cons bm2b30@x bm2b2c@set))) bm2b32) (error 'apply '"invalid arg count"))))))))) (set! bm2ca0@bm2ab1@make-collection bm2ab1@make-collection) (set! bm2ab3@current-library-collection (bm2a09@bm28e7@make-parameter (bm2ab1@make-collection) (lambda (bm2b38@x) (begin (if (not (procedure? bm2b38@x)) (assertion-violation 'current-library-collection '"not a procedure" bm2b38@x) (void)) bm2b38@x)))) (set! bm2ca1@bm2ab3@current-library-collection bm2ab3@current-library-collection) (set! bm2ab5@rp (bm2a06@bm28e1@make-record-printer 'library (lambda (bm2b3a@x bm2b3b@p bm2b3c@wr) (begin (if (not (bm2abf@library? bm2b3a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bm2ac9@library-version bm2b3a@x)) (bm2ac5@library-name bm2b3a@x) (append (bm2ac5@library-name bm2b3a@x) (list (bm2ac9@library-version bm2b3a@x))))) bm2b3b@p))))) (set! bm2ca2@bm2ab5@rp bm2ab5@rp) (set! bm2abf@library? (lambda (bm2b40@x) (and (simple-struct? bm2b40@x) (eq? (simple-struct-name bm2b40@x) 'library)))) (set! bm2ca3@bm2abf@library? bm2abf@library?) (set! bm2ac1@library-id (lambda (bm2b42@x) (simple-struct-ref bm2b42@x '0))) (set! bm2ca4@bm2ac1@library-id bm2ac1@library-id) (set! bm2ac3@set-library-id! (lambda (bm2b44@x bm2b45@val) (simple-struct-set! bm2b44@x '0 bm2b45@val))) (set! bm2ca5@bm2ac3@set-library-id! bm2ac3@set-library-id!) (set! bm2ac5@library-name (lambda (bm2b48@x) (simple-struct-ref bm2b48@x '1))) (set! bm2ca6@bm2ac5@library-name bm2ac5@library-name) (set! bm2ac7@set-library-name! (lambda (bm2b4a@x bm2b4b@val) (simple-struct-set! bm2b4a@x '1 bm2b4b@val))) (set! bm2ca7@bm2ac7@set-library-name! bm2ac7@set-library-name!) (set! bm2ac9@library-version (lambda (bm2b4e@x) (simple-struct-ref bm2b4e@x '2))) (set! bm2ca8@bm2ac9@library-version bm2ac9@library-version) (set! bm2acb@set-library-version! (lambda (bm2b50@x bm2b51@val) (simple-struct-set! bm2b50@x '2 bm2b51@val))) (set! bm2ca9@bm2acb@set-library-version! bm2acb@set-library-version!) (set! bm2acd@library-imp* (lambda (bm2b54@x) (simple-struct-ref bm2b54@x '3))) (set! bm2caa@bm2acd@library-imp* bm2acd@library-imp*) (set! bm2acf@set-library-imp*! (lambda (bm2b56@x bm2b57@val) (simple-struct-set! bm2b56@x '3 bm2b57@val))) (set! bm2cab@bm2acf@set-library-imp*! bm2acf@set-library-imp*!) (set! bm2ad1@library-vis* (lambda (bm2b5a@x) (simple-struct-ref bm2b5a@x '4))) (set! bm2cac@bm2ad1@library-vis* bm2ad1@library-vis*) (set! bm2ad3@set-library-vis*! (lambda (bm2b5c@x bm2b5d@val) (simple-struct-set! bm2b5c@x '4 bm2b5d@val))) (set! bm2cad@bm2ad3@set-library-vis*! bm2ad3@set-library-vis*!) (set! bm2ad5@library-inv* (lambda (bm2b60@x) (simple-struct-ref bm2b60@x '5))) (set! bm2cae@bm2ad5@library-inv* bm2ad5@library-inv*) (set! bm2ad7@set-library-inv*! (lambda (bm2b62@x bm2b63@val) (simple-struct-set! bm2b62@x '5 bm2b63@val))) (set! bm2caf@bm2ad7@set-library-inv*! bm2ad7@set-library-inv*!) (set! bm2ad9@library-subst (lambda (bm2b66@x) (simple-struct-ref bm2b66@x '6))) (set! bm2cb0@bm2ad9@library-subst bm2ad9@library-subst) (set! bm2adb@set-library-subst! (lambda (bm2b68@x bm2b69@val) (simple-struct-set! bm2b68@x '6 bm2b69@val))) (set! bm2cb1@bm2adb@set-library-subst! bm2adb@set-library-subst!) (set! bm2add@library-env (lambda (bm2b6c@x) (simple-struct-ref bm2b6c@x '7))) (set! bm2cb2@bm2add@library-env bm2add@library-env) (set! bm2adf@set-library-env! (lambda (bm2b6e@x bm2b6f@val) (simple-struct-set! bm2b6e@x '7 bm2b6f@val))) (set! bm2cb3@bm2adf@set-library-env! bm2adf@set-library-env!) (set! bm2ae1@library-visit-state (lambda (bm2b72@x) (simple-struct-ref bm2b72@x '8))) (set! bm2cb4@bm2ae1@library-visit-state bm2ae1@library-visit-state) (set! bm2ae3@set-library-visit-state! (lambda (bm2b74@x bm2b75@val) (simple-struct-set! bm2b74@x '8 bm2b75@val))) (set! bm2cb5@bm2ae3@set-library-visit-state! bm2ae3@set-library-visit-state!) (set! bm2ae5@library-invoke-state (lambda (bm2b78@x) (simple-struct-ref bm2b78@x '9))) (set! bm2cb6@bm2ae5@library-invoke-state bm2ae5@library-invoke-state) (set! bm2ae7@set-library-invoke-state! (lambda (bm2b7a@x bm2b7b@val) (simple-struct-set! bm2b7a@x '9 bm2b7b@val))) (set! bm2cb7@bm2ae7@set-library-invoke-state! bm2ae7@set-library-invoke-state!) (set! bm2ae9@library-visit-code (lambda (bm2b7e@x) (simple-struct-ref bm2b7e@x '10))) (set! bm2cb8@bm2ae9@library-visit-code bm2ae9@library-visit-code) (set! bm2aeb@set-library-visit-code! (lambda (bm2b80@x bm2b81@val) (simple-struct-set! bm2b80@x '10 bm2b81@val))) (set! bm2cb9@bm2aeb@set-library-visit-code! bm2aeb@set-library-visit-code!) (set! bm2aed@library-invoke-code (lambda (bm2b84@x) (simple-struct-ref bm2b84@x '11))) (set! bm2cba@bm2aed@library-invoke-code bm2aed@library-invoke-code) (set! bm2aef@set-library-invoke-code! (lambda (bm2b86@x bm2b87@val) (simple-struct-set! bm2b86@x '11 bm2b87@val))) (set! bm2cbb@bm2aef@set-library-invoke-code! bm2aef@set-library-invoke-code!) (set! bm2af1@library-visible? (lambda (bm2b8a@x) (simple-struct-ref bm2b8a@x '12))) (set! bm2cbc@bm2af1@library-visible? bm2af1@library-visible?) (set! bm2af3@set-library-visible?! (lambda (bm2b8c@x bm2b8d@val) (simple-struct-set! bm2b8c@x '12 bm2b8d@val))) (set! bm2cbd@bm2af3@set-library-visible?! bm2af3@set-library-visible?!) (set! bm2af5@library-source-file-name (lambda (bm2b90@x) (simple-struct-ref bm2b90@x '13))) (set! bm2cbe@bm2af5@library-source-file-name bm2af5@library-source-file-name) (set! bm2af7@set-library-source-file-name! (lambda (bm2b92@x bm2b93@val) (simple-struct-set! bm2b92@x '13 bm2b93@val))) (set! bm2cbf@bm2af7@set-library-source-file-name! bm2af7@set-library-source-file-name!) (set! bm2af9@dummy '3) (set! bm2cc0@bm2af9@dummy bm2af9@dummy) (set! bm2afb@find-dependencies (lambda (bm2b96@ls) (if (null? bm2b96@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bm2cc1@bm2afb@find-dependencies bm2afb@find-dependencies) (set! bm2afd@find-library-by (lambda (bm2b98@pred) (let bm2b9c@f ((bm2b9a@ls ((bm2ab3@current-library-collection)))) (if (null? bm2b9a@ls) '#f (if (bm2b98@pred (car bm2b9a@ls)) (car bm2b9a@ls) (bm2b9c@f (cdr bm2b9a@ls))))))) (set! bm2cc2@bm2afd@find-library-by bm2afd@find-library-by) (set! bm2aff@library-path (bm2a09@bm28e7@make-parameter '(".") (lambda (bm2b9e@x) (if (and (list? bm2b9e@x) (for-all string? bm2b9e@x)) (map (lambda (bm2ba0@x) bm2ba0@x) bm2b9e@x) (assertion-violation 'library-path '"not a list of strings" bm2b9e@x))))) (set! bm2cc3@bm2aff@library-path bm2aff@library-path) (set! bm2b01@library-extensions (bm2a09@bm28e7@make-parameter '(".sls" ".ss" ".scm") (lambda (bm2ba2@x) (if (and (list? bm2ba2@x) (for-all string? bm2ba2@x)) (map (lambda (bm2ba4@x) bm2ba4@x) bm2ba2@x) (assertion-violation 'library-extensions '"not a list of strings" bm2ba2@x))))) (set! bm2cc4@bm2b01@library-extensions bm2b01@library-extensions) (set! bm2b03@library-name->file-name (lambda (bm2ba6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bm2bac@bm2ba9 bm2bad@bm2bab) (let ((bm2bb0@extract bm2bad@bm2bab) (bm2bb1@p bm2bac@bm2ba9)) (letrec* ((bm2bb5@display-hex (lambda (bm2bbe@n) (if (<= '0 bm2bbe@n '9) (display bm2bbe@n bm2bb1@p) (display (integer->char (+ (char->integer '#\a) (- bm2bbe@n '10))) bm2bb1@p))))) (begin (let bm2bb8@f ((bm2bb6@ls bm2ba6@x)) (if (not (null? bm2bb6@ls)) (begin (display '"/" bm2bb1@p) (for-each (lambda (bm2bba@c) (if (or (char<=? '#\a bm2bba@c '#\z) (char<=? '#\A bm2bba@c '#\Z) (char<=? '#\0 bm2bba@c '#\9) (memv bm2bba@c '(#\- #\. #\_ #\~))) (display bm2bba@c bm2bb1@p) (begin (display '"%" bm2bb1@p) (let ((bm2bbc@n (char->integer bm2bba@c))) (begin (bm2bb5@display-hex (quotient bm2bbc@n '16)) (bm2bb5@display-hex (remainder bm2bbc@n '16))))))) (string->list (symbol->string (car bm2bb6@ls)))) (bm2bb8@f (cdr bm2bb6@ls))) (void))) (bm2bb0@extract)))))))) (set! bm2cc5@bm2b03@library-name->file-name bm2b03@library-name->file-name) (set! bm2b05@file-locator (bm2a09@bm28e7@make-parameter (lambda (bm2bc0@x) (let ((bm2bc2@str (bm2b03@library-name->file-name bm2bc0@x))) (let bm2bca@f ((bm2bc4@ls (bm2aff@library-path)) (bm2bc5@exts (bm2b01@library-extensions)) (bm2bc6@failed-list '())) (if (null? bm2bc4@ls) (letrec* ((bm2bd4@bm2bcf (make-record-type-descriptor '&library-resolution &condition-rtd 'bm2bd2 '#f '#f '#((immutable library) (immutable files)))) (bm2bd6@bm2bd1 '#f) (bm2bd8@bm2bd0 (make-record-constructor-descriptor bm2bd4@bm2bcf &condition-rcd bm2bd6@bm2bd1)) (bm2bdb@bm2bce (record-predicate bm2bd4@bm2bcf)) (bm2bdd@make-library-resolution-condition (record-constructor bm2bd8@bm2bd0)) (bm2bdf@bm2bcc (record-accessor bm2bd4@bm2bcf '0)) (bm2be1@bm2bcd (record-accessor bm2bd4@bm2bcf '1)) (bm2be3@library-resolution-condition? (condition-predicate bm2bd4@bm2bcf)) (bm2be5@condition-library (condition-accessor bm2bd4@bm2bcf bm2bdf@bm2bcc)) (bm2be7@condition-files (condition-accessor bm2bd4@bm2bcf bm2be1@bm2bcd))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (bm2bdd@make-library-resolution-condition bm2bc0@x (reverse bm2bc6@failed-list))))) (if (null? bm2bc5@exts) (bm2bca@f (cdr bm2bc4@ls) (bm2b01@library-extensions) bm2bc6@failed-list) (let ((bm2be8@name (string-append (car bm2bc4@ls) bm2bc2@str (car bm2bc5@exts)))) (if (file-exists? bm2be8@name) bm2be8@name (bm2bca@f bm2bc4@ls (cdr bm2bc5@exts) (cons bm2be8@name bm2bc6@failed-list))))))))) (lambda (bm2bea@f) (if (procedure? bm2bea@f) bm2bea@f (assertion-violation 'file-locator '"not a procedure" bm2bea@f))))) (set! bm2cc6@bm2b05@file-locator bm2b05@file-locator) (set! bm2b07@serialize-all (lambda (bm2bec@serialize bm2bed@compile) (letrec* ((bm2bf1@library-desc (lambda (bm2bf4@x) (list (bm2ac1@library-id bm2bf4@x) (bm2ac5@library-name bm2bf4@x))))) (for-each (lambda (bm2bf2@x) (if (bm2af5@library-source-file-name bm2bf2@x) (bm2bec@serialize (bm2af5@library-source-file-name bm2bf2@x) (list (bm2ac1@library-id bm2bf2@x) (bm2ac5@library-name bm2bf2@x) (bm2ac9@library-version bm2bf2@x) (map bm2bf1@library-desc (bm2acd@library-imp* bm2bf2@x)) (map bm2bf1@library-desc (bm2ad1@library-vis* bm2bf2@x)) (map bm2bf1@library-desc (bm2ad5@library-inv* bm2bf2@x)) (bm2ad9@library-subst bm2bf2@x) (bm2add@library-env bm2bf2@x) (bm2bed@compile (bm2ae9@library-visit-code bm2bf2@x)) (bm2bed@compile (bm2aed@library-invoke-code bm2bf2@x)) (bm2af1@library-visible? bm2bf2@x))) (void))) ((bm2ab3@current-library-collection)))))) (set! bm2cc7@bm2b07@serialize-all bm2b07@serialize-all) (set! bm2b09@current-precompiled-library-loader (bm2a09@bm28e7@make-parameter (lambda (bm2bf6@filename bm2bf7@sk) '#f))) (set! bm2cc8@bm2b09@current-precompiled-library-loader bm2b09@current-precompiled-library-loader) (set! bm2b0b@try-load-from-file (lambda (bm2bfa@filename) ((bm2b09@current-precompiled-library-loader) bm2bfa@filename (lambda bm2c20 (let ((bm2c21 (length bm2c20))) (if (= bm2c21 '11) (apply (lambda (bm2bfc@id bm2bfd@name bm2bfe@ver bm2bff@imp* bm2c00@vis* bm2c01@inv* bm2c02@exp-subst bm2c03@exp-env bm2c04@visit-proc bm2c05@invoke-proc bm2c06@visible?) (let bm2c14@f ((bm2c12@deps (append bm2bff@imp* bm2c00@vis* bm2c01@inv*))) (if (null? bm2c12@deps) (begin (bm2b1f@install-library bm2bfc@id bm2bfd@name bm2bfe@ver bm2bff@imp* bm2c00@vis* bm2c01@inv* bm2c02@exp-subst bm2c03@exp-env bm2c04@visit-proc bm2c05@invoke-proc '#f '#f bm2c06@visible? '#f) '#t) (let ((bm2c16@d (car bm2c12@deps))) (let ((bm2c18@label (car bm2c16@d)) (bm2c19@dname (cadr bm2c16@d))) (let ((bm2c1c@l (bm2b15@find-library-by-name bm2c19@dname))) (if (and (bm2abf@library? bm2c1c@l) (eq? bm2c18@label (bm2ac1@library-id bm2c1c@l))) (bm2c14@f (cdr bm2c12@deps)) (begin (if bm2a03@bm28db@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" bm2bfd@name bm2c19@dname bm2bfa@filename) (void)) '#f)))))))) bm2c20) (if (>= bm2c21 '0) (apply (lambda bm2c1e@others '#f) bm2c20) (error 'apply '"invalid arg count")))))))) (set! bm2cc9@bm2b0b@try-load-from-file bm2b0b@try-load-from-file) (set! bm2b0d@library-loader (bm2a09@bm28e7@make-parameter (lambda (bm2c22@x) (let ((bm2c24@file-name ((bm2b05@file-locator) bm2c22@x))) (if (not bm2c24@file-name) (assertion-violation '#f '"cannot file library" bm2c22@x) (or (bm2b0b@try-load-from-file bm2c24@file-name) ((bm2b0f@current-library-expander) (bm2a08@bm28e5@read-library-source-file bm2c24@file-name) bm2c24@file-name (lambda (bm2c26@name) (if (not (fast-equal? bm2c26@name bm2c22@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bm2c2c@bm2c29 bm2c2d@bm2c2b) (let ((bm2c30@e bm2c2d@bm2c2b) (bm2c31@p bm2c2c@bm2c29)) (begin (display '"expected to find library " bm2c31@p) (write bm2c22@x bm2c31@p) (display '" in file " bm2c31@p) (display bm2c24@file-name bm2c31@p) (display '", found " bm2c31@p) (write bm2c26@name bm2c31@p) (display '" instead" bm2c31@p) (bm2c30@e)))))) (void)))))))) (lambda (bm2c34@f) (if (procedure? bm2c34@f) bm2c34@f (assertion-violation 'library-locator '"not a procedure" bm2c34@f))))) (set! bm2cca@bm2b0d@library-loader bm2b0d@library-loader) (set! bm2b0f@current-library-expander (bm2a09@bm28e7@make-parameter (lambda (bm2c36@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bm2c38@f) (if (procedure? bm2c38@f) bm2c38@f (assertion-violation 'library-expander '"not a procedure" bm2c38@f))))) (set! bm2ccb@bm2b0f@current-library-expander bm2b0f@current-library-expander) (set! bm2b11@external-pending-libraries (bm2a09@bm28e7@make-parameter '())) (set! bm2ccc@bm2b11@external-pending-libraries bm2b11@external-pending-libraries) (set! bm2b13@find-external-library (lambda (bm2c3a@name) (begin (if (member bm2c3a@name (bm2b11@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bm2c3a@name) (void)) (let ((bm2c40@bm2c3d bm2b11@external-pending-libraries) (bm2c41@bm2c3f (cons bm2c3a@name (bm2b11@external-pending-libraries)))) (let ((bm2c44@swap (lambda () (let ((bm2c46@t (bm2c40@bm2c3d))) (begin (bm2c40@bm2c3d bm2c41@bm2c3f) (set! bm2c41@bm2c3f bm2c46@t)))))) (dynamic-wind bm2c44@swap (lambda () (begin ((bm2b0d@library-loader) bm2c3a@name) (or (bm2afd@find-library-by (lambda (bm2c48@x) (fast-equal? (bm2ac5@library-name bm2c48@x) bm2c3a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bm2c3a@name)))) bm2c44@swap)))))) (set! bm2ccd@bm2b13@find-external-library bm2b13@find-external-library) (set! bm2b15@find-library-by-name (lambda (bm2c4a@name) (or (bm2afd@find-library-by (lambda (bm2c4c@x) (fast-equal? (bm2ac5@library-name bm2c4c@x) bm2c4a@name))) (bm2b13@find-external-library bm2c4a@name)))) (set! bm2cce@bm2b15@find-library-by-name bm2b15@find-library-by-name) (set! bm2b17@library-exists? (lambda (bm2c4e@name) (and (bm2afd@find-library-by (lambda (bm2c50@x) (fast-equal? (bm2ac5@library-name bm2c50@x) bm2c4e@name))) '#t))) (set! bm2ccf@bm2b17@library-exists? bm2b17@library-exists?) (set! bm2b19@find-library-by-spec/die (lambda (bm2c52@spec) (let ((bm2c54@id (car bm2c52@spec))) (or (bm2afd@find-library-by (lambda (bm2c56@x) (eq? bm2c54@id (bm2ac1@library-id bm2c56@x)))) (assertion-violation '#f '"cannot find library with required spec" bm2c52@spec))))) (set! bm2cd0@bm2b19@find-library-by-spec/die bm2b19@find-library-by-spec/die) (set! bm2b1b@label->binding-table (make-eq-hashtable)) (set! bm2cd1@bm2b1b@label->binding-table bm2b1b@label->binding-table) (set! bm2b1d@install-library-record (lambda (bm2c58@lib) (begin (let ((bm2c5a@exp-env (bm2add@library-env bm2c58@lib))) (for-each (lambda (bm2c5c@x) (let ((bm2c5e@label (car bm2c5c@x)) (bm2c5f@binding (cdr bm2c5c@x))) (let ((bm2c62@binding (let ((bm2c64@t (car bm2c5f@binding))) (if (memv bm2c64@t '(global)) (cons 'global (cons bm2c58@lib (cdr bm2c5f@binding))) (if (memv bm2c64@t '(global-macro)) (cons 'global-macro (cons bm2c58@lib (cdr bm2c5f@binding))) (if (memv bm2c64@t '(global-macro!)) (cons 'global-macro! (cons bm2c58@lib (cdr bm2c5f@binding))) bm2c5f@binding)))))) (begin (if (hashtable-ref bm2b1b@label->binding-table bm2c5e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bm2c5e@label (hashtable-ref bm2b1b@label->binding-table bm2c5e@label '#f) bm2c62@binding) (exit)) (void)) (hashtable-set! bm2b1b@label->binding-table bm2c5e@label bm2c62@binding))))) bm2c5a@exp-env)) ((bm2ab3@current-library-collection) bm2c58@lib)))) (set! bm2cd2@bm2b1d@install-library-record bm2b1d@install-library-record) (set! bm2b1f@install-library (lambda (bm2c66@id bm2c67@name bm2c68@ver bm2c69@imp* bm2c6a@vis* bm2c6b@inv* bm2c6c@exp-subst bm2c6d@exp-env bm2c6e@visit-proc bm2c6f@invoke-proc bm2c70@visit-code bm2c71@invoke-code bm2c72@visible? bm2c73@source-file-name) (let ((bm2c82@imp-lib* (map bm2b19@find-library-by-spec/die bm2c69@imp*)) (bm2c83@vis-lib* (map bm2b19@find-library-by-spec/die bm2c6a@vis*)) (bm2c84@inv-lib* (map bm2b19@find-library-by-spec/die bm2c6b@inv*))) (begin (if (not (and (symbol? bm2c66@id) (list? bm2c67@name) (list? bm2c68@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bm2c66@id bm2c67@name bm2c68@ver) (void)) (if (bm2b17@library-exists? bm2c67@name) (assertion-violation 'install-library '"library is already installed" bm2c67@name) (void)) (let ((bm2c88@lib (make-simple-struct 'library '15 (list bm2c66@id bm2c67@name bm2c68@ver bm2c82@imp-lib* bm2c83@vis-lib* bm2c84@inv-lib* bm2c6c@exp-subst bm2c6d@exp-env bm2c6e@visit-proc bm2c6f@invoke-proc bm2c70@visit-code bm2c71@invoke-code bm2c72@visible? bm2c73@source-file-name)))) (bm2b1d@install-library-record bm2c88@lib)))))) (set! bm2cd3@bm2b1f@install-library bm2b1f@install-library) (set! bm2b21@imported-label->binding (lambda (bm2c8a@lab) (hashtable-ref bm2b1b@label->binding-table bm2c8a@lab '#f))) (set! bm2cd4@bm2b21@imported-label->binding bm2b21@imported-label->binding) (set! bm2b23@invoke-library (lambda (bm2c8c@lib) (let ((bm2c8e@invoke (bm2ae5@library-invoke-state bm2c8c@lib))) (if (procedure? bm2c8e@invoke) (begin (bm2ae7@set-library-invoke-state! bm2c8c@lib (lambda () (assertion-violation 'invoke '"circularity detected" bm2c8c@lib))) (for-each bm2b23@invoke-library (bm2ad5@library-inv* bm2c8c@lib)) (bm2ae7@set-library-invoke-state! bm2c8c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bm2c8c@lib))) (bm2c8e@invoke) (bm2ae7@set-library-invoke-state! bm2c8c@lib '#t)) (void))))) (set! bm2cd5@bm2b23@invoke-library bm2b23@invoke-library) (set! bm2b25@visit-library (lambda (bm2c90@lib) (let ((bm2c92@visit (bm2ae1@library-visit-state bm2c90@lib))) (if (procedure? bm2c92@visit) (begin (bm2ae3@set-library-visit-state! bm2c90@lib (lambda () (assertion-violation 'visit '"circularity detected" bm2c90@lib))) (for-each bm2b23@invoke-library (bm2ad1@library-vis* bm2c90@lib)) (bm2ae3@set-library-visit-state! bm2c90@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bm2c90@lib))) (bm2c92@visit) (bm2ae3@set-library-visit-state! bm2c90@lib '#t)) (void))))) (set! bm2cd6@bm2b25@visit-library bm2b25@visit-library) (set! bm2b27@invoke-library-by-spec (lambda (bm2c94@spec) (bm2b23@invoke-library (bm2b19@find-library-by-spec/die bm2c94@spec)))) (set! bm2cd7@bm2b27@invoke-library-by-spec bm2b27@invoke-library-by-spec) (set! bm2b29@installed-libraries (lambda bm2c9c (let ((bm2c9d (length bm2c9c))) (if (= bm2c9d '1) (apply (lambda (bm2c96@all?) (let bm2c9a@f ((bm2c98@ls ((bm2ab3@current-library-collection)))) (if (null? bm2c98@ls) '() (if (or bm2c96@all? (bm2af1@library-visible? (car bm2c98@ls))) (cons (car bm2c98@ls) (bm2c9a@f (cdr bm2c98@ls))) (bm2c9a@f (cdr bm2c98@ls)))))) bm2c9c) (if (= bm2c9d '0) (apply (lambda () (bm2b29@installed-libraries '#f)) bm2c9c) (error 'apply '"invalid arg count")))))) (set! bm2cd8@bm2b29@installed-libraries bm2b29@installed-libraries) (set! bm2b2b@library-spec (lambda (bm2c9e@x) (begin (if (not (bm2abf@library? bm2c9e@x)) (assertion-violation 'library-spec '"not a library" bm2c9e@x) (void)) (list (bm2ac1@library-id bm2c9e@x) (bm2ac5@library-name bm2c9e@x) (bm2ac9@library-version bm2c9e@x))))) (set! bm2cd9@bm2b2b@library-spec bm2b2b@library-spec) (void))
(begin (set! bm2cdd@build-global-define (unspecified)) (set! bm2d4e@build-lambda (unspecified)) (set! bm2d50@build-case-lambda (unspecified)) (set! bm2d7e@build-sequence (unspecified)) (set! bm2d80@build-void (unspecified)) (set! bm2d82@build-letrec (unspecified)) (set! bm2d84@build-let (unspecified)) (set! bm2d86@build-named-let (unspecified)) (set! bm2d88@build-letrec* (unspecified)) (set! bm2d8a@build-library-letrec* (unspecified)) (set! bm2d8c@build-receive (unspecified)) (set! bm2cdd@build-global-define (lambda (bm2d8d@x) (bm2d80@build-void))) (set! bm2e1b@bm2cdd@build-global-define bm2cdd@build-global-define) (set! bm2d4e@build-lambda (lambda (bm2d8f@ae bm2d90@vars bm2d91@exp) (list 'lambda bm2d90@vars bm2d91@exp))) (set! bm2e1c@bm2d4e@build-lambda bm2d4e@build-lambda) (set! bm2d50@build-case-lambda (lambda (bm2d95@ae bm2d96@vars* bm2d97@exp*) (letrec* ((bm2d9c@build-error (lambda (bm2dd3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (bm2d9e@build-pred (lambda (bm2dbb@ae bm2dbc@n bm2dbd@vars) (call-with-values (lambda () (let bm2dc9@f ((bm2dc5@vars bm2dbd@vars) (bm2dc6@count '0)) (if (pair? bm2dc5@vars) (bm2dc9@f (cdr bm2dc5@vars) (+ bm2dc6@count '1)) (if (null? bm2dc5@vars) (values bm2dc6@count '=) (values bm2dc6@count '>=))))) (lambda (bm2dcb@bm2dc2 bm2dcc@bm2dc4) (let ((bm2dcf@pred bm2dcc@bm2dc4) (bm2dd0@count bm2dcb@bm2dc2)) (list (list 'primitive bm2dcf@pred) bm2dbc@n (list 'quote bm2dd0@count))))))) (bm2da0@build-apply (lambda (bm2db3@ae bm2db4@g bm2db5@vars bm2db6@exp) (list '(primitive apply) (bm2d4e@build-lambda bm2db3@ae bm2db5@vars bm2db6@exp) bm2db4@g))) (bm2da2@expand-case-lambda (lambda (bm2da3@ae bm2da4@vars bm2da5@exp*) (let ((bm2da9@g (gensym)) (bm2daa@n (gensym))) (list 'lambda bm2da9@g (bm2d84@build-let bm2da3@ae (list bm2daa@n) (list (list '(primitive length) bm2da9@g)) (let bm2db1@f ((bm2dad@vars* bm2d96@vars*) (bm2dae@exp* bm2da5@exp*)) (if (null? bm2dad@vars*) (bm2d9c@build-error bm2da3@ae) (list 'if (bm2d9e@build-pred bm2da3@ae bm2daa@n (car bm2dad@vars*)) (bm2da0@build-apply bm2da3@ae bm2da9@g (car bm2dad@vars*) (car bm2dae@exp*)) (bm2db1@f (cdr bm2dad@vars*) (cdr bm2dae@exp*))))))))))) (if (= (length bm2d97@exp*) '1) (bm2d4e@build-lambda bm2d95@ae (car bm2d96@vars*) (car bm2d97@exp*)) (bm2da2@expand-case-lambda bm2d95@ae bm2d96@vars* bm2d97@exp*))))) (set! bm2e1d@bm2d50@build-case-lambda bm2d50@build-case-lambda) (set! bm2d7e@build-sequence (lambda (bm2dd5@ae bm2dd6@exps) (let bm2ddb@loop ((bm2dd9@exps bm2dd6@exps)) (if (null? (cdr bm2dd9@exps)) (car bm2dd9@exps) (if (equal? (car bm2dd9@exps) (bm2d80@build-void)) (bm2ddb@loop (cdr bm2dd9@exps)) (cons 'begin bm2dd9@exps)))))) (set! bm2e1e@bm2d7e@build-sequence bm2d7e@build-sequence) (set! bm2d80@build-void (lambda () '((primitive void)))) (set! bm2e1f@bm2d80@build-void bm2d80@build-void) (set! bm2d82@build-letrec (lambda (bm2ddd@ae bm2dde@vars bm2ddf@val-exps bm2de0@body-exp) (if (null? bm2dde@vars) bm2de0@body-exp (list 'letrec (map list bm2dde@vars bm2ddf@val-exps) bm2de0@body-exp)))) (set! bm2e20@bm2d82@build-letrec bm2d82@build-letrec) (set! bm2d84@build-let (lambda (bm2de5@ae bm2de6@vars bm2de7@val-exps bm2de8@body-exp) (if (null? bm2de6@vars) bm2de8@body-exp (list 'let (map list bm2de6@vars bm2de7@val-exps) bm2de8@body-exp)))) (set! bm2e21@bm2d84@build-let bm2d84@build-let) (set! bm2d86@build-named-let (lambda (bm2ded@ae bm2dee@name bm2def@vars bm2df0@val-exps bm2df1@body-exp) (list 'let bm2dee@name (map list bm2def@vars bm2df0@val-exps) bm2df1@body-exp))) (set! bm2e22@bm2d86@build-named-let bm2d86@build-named-let) (set! bm2d88@build-letrec* (lambda (bm2df7@ae bm2df8@vars bm2df9@val-exps bm2dfa@body-exp) (if (null? bm2df8@vars) bm2dfa@body-exp (list 'letrec* (map list bm2df8@vars bm2df9@val-exps) bm2dfa@body-exp)))) (set! bm2e23@bm2d88@build-letrec* bm2d88@build-letrec*) (set! bm2d8a@build-library-letrec* (lambda (bm2dff@ae bm2e00@name bm2e01@vars bm2e02@locs bm2e03@val-exps bm2e04@body-exp) (cons 'begin (append (map (lambda (bm2e0b@var) (cons 'set! (cons bm2e0b@var '((unspecified))))) bm2e01@vars) (append (apply append (map (lambda (bm2e0d@var bm2e0e@loc bm2e0f@val-exp) (list (list 'set! bm2e0d@var bm2e0f@val-exp) (list 'set! bm2e0e@loc bm2e0d@var))) bm2e01@vars bm2e02@locs bm2e03@val-exps)) (list bm2e04@body-exp)))))) (set! bm2e24@bm2d8a@build-library-letrec* bm2d8a@build-library-letrec*) (set! bm2d8c@build-receive (lambda (bm2e13@ae bm2e14@vars bm2e15@producer bm2e16@body*) (begin (display '"************** in ") (cons 'receive (cons bm2e14@vars (cons bm2e15@producer bm2e16@body*)))))) (set! bm2e25@bm2d8c@build-receive bm2d8c@build-receive) (void))
(begin (set! bm2e34@file-options-macro (unspecified)) (set! bm2e36@set-cons (unspecified)) (set! bm2e38@set-union (unspecified)) (set! bm2e3d@top-mark* (unspecified)) (set! bm2e3f@top-marked? (unspecified)) (set! bm2e41@gen-lexical (unspecified)) (set! bm2e43@gen-global (unspecified)) (set! bm2e45@gen-label (unspecified)) (set! bm2e47@gen-top-level-label (unspecified)) (set! bm2e49@gen-define-label+loc (unspecified)) (set! bm2e4b@gen-define-label (unspecified)) (set! bm2e55@rib? (unspecified)) (set! bm2e57@rib-sym* (unspecified)) (set! bm2e59@set-rib-sym*! (unspecified)) (set! bm2e5b@rib-mark** (unspecified)) (set! bm2e5d@set-rib-mark**! (unspecified)) (set! bm2e5f@rib-label* (unspecified)) (set! bm2e61@set-rib-label*! (unspecified)) (set! bm2e63@rib-sealed/freq (unspecified)) (set! bm2e65@set-rib-sealed/freq! (unspecified)) (set! bm2e67@rib-cache (unspecified)) (set! bm2e69@set-rib-cache! (unspecified)) (set! bm2e6b@dummy (unspecified)) (set! bm2e6d@make-empty-rib (unspecified)) (set! bm2e6f@extend-rib! (unspecified)) (set! bm2e71@extend-rib/nc! (unspecified)) (set! bm2e73@make-rib-map (unspecified)) (set! bm2e75@seal-rib! (unspecified)) (set! bm2e77@unseal-rib! (unspecified)) (set! bm2e79@make-full-rib (unspecified)) (set! bm2e7b@rp (unspecified)) (set! bm2e85@stx? (unspecified)) (set! bm2e87@stx-expr (unspecified)) (set! bm2e89@set-stx-expr! (unspecified)) (set! bm2e8b@stx-mark* (unspecified)) (set! bm2e8d@set-stx-mark*! (unspecified)) (set! bm2e8f@stx-subst* (unspecified)) (set! bm2e91@set-stx-subst*! (unspecified)) (set! bm2e93@stx-ae* (unspecified)) (set! bm2e95@set-stx-ae*! (unspecified)) (set! bm2e97@dummy (unspecified)) (set! bm2e99@datum->stx (unspecified)) (set! bm2e9b@gen-mark (unspecified)) (set! bm2e9d@anti-mark (unspecified)) (set! bm2e9f@anti-mark? (unspecified)) (set! bm2ea1@mkstx (unspecified)) (set! bm2ea3@add-mark (unspecified)) (set! bm2ea5@add-subst (unspecified)) (set! bm2ea7@syntax-kind? (unspecified)) (set! bm2ea9@syntax-vector->list (unspecified)) (set! bm2eab@syntax-pair? (unspecified)) (set! bm2ead@syntax-vector? (unspecified)) (set! bm2eaf@syntax-null? (unspecified)) (set! bm2eb1@syntax-list? (unspecified)) (set! bm2eb3@syntax-car (unspecified)) (set! bm2eb5@syntax-cdr (unspecified)) (set! bm2eb7@syntax->list (unspecified)) (set! bm2eb9@id? (unspecified)) (set! bm2ebb@id->sym (unspecified)) (set! bm2ebd@bound-id=? (unspecified)) (set! bm2ebf@free-id=? (unspecified)) (set! bm2ec1@valid-bound-ids? (unspecified)) (set! bm2ec3@distinct-bound-ids? (unspecified)) (set! bm2ec5@bound-id-member? (unspecified)) (set! bm2ec7@self-evaluating? (unspecified)) (set! bm2ec9@strip-annotations (unspecified)) (set! bm2ecb@strip (unspecified)) (set! bm2ecd@stx->datum (unspecified)) (set! bm2ecf@id->label (unspecified)) (set! bm2ed1@label->binding (unspecified)) (set! bm2ed3@make-binding (unspecified)) (set! bm2ed5@binding-type (unspecified)) (set! bm2ed7@binding-value (unspecified)) (set! bm2ed9@raise-unbound-error (unspecified)) (set! bm2edb@syntax-type (unspecified)) (set! bm2ee9@sanitize-binding (unspecified)) (set! bm2eeb@make-variable-transformer (unspecified)) (set! bm2eed@variable-transformer? (unspecified)) (set! bm2eef@variable-transformer-procedure (unspecified)) (set! bm2ef1@make-eval-transformer (unspecified)) (set! bm3042@parse-define (unspecified)) (set! bm3044@parse-define-syntax (unspecified)) (set! bm3046@scheme-stx-hashtable (unspecified)) (set! bm3048@scheme-stx (unspecified)) (set! bm304a@lexical-var (unspecified)) (set! bm304c@lexical-mutable? (unspecified)) (set! bm304e@set-lexical-mutable! (unspecified)) (set! bm3050@add-lexical (unspecified)) (set! bm3052@add-lexicals (unspecified)) (set! bm3054@letrec-helper (unspecified)) (set! bm3056@let-transformer (unspecified)) (set! bm3058@letrec-transformer (unspecified)) (set! bm305a@letrec*-transformer (unspecified)) (set! bm305c@fluid-let-syntax-transformer (unspecified)) (set! bm305e@type-descriptor-transformer (unspecified)) (set! bm3060@record-type-descriptor-transformer (unspecified)) (set! bm3062@record-constructor-descriptor-transformer (unspecified)) (set! bm3064@when-macro (unspecified)) (set! bm3066@unless-macro (unspecified)) (set! bm3068@if-transformer (unspecified)) (set! bm306a@and-transformer (unspecified)) (set! bm306c@or-transformer (unspecified)) (set! bm306e@case-macro (unspecified)) (set! bm3070@quote-transformer (unspecified)) (set! bm3072@case-lambda-transformer (unspecified)) (set! bm3074@lambda-transformer (unspecified)) (set! bm3076@bless (unspecified)) (set! bm3078@with-syntax-macro (unspecified)) (set! bm307a@invalid-fmls-error (unspecified)) (set! bm307c@let-macro (unspecified)) (set! bm307e@let-values-macro (unspecified)) (set! bm3080@let*-values-macro (unspecified)) (set! bm3082@trace-lambda-macro (unspecified)) (set! bm3084@trace-define-macro (unspecified)) (set! bm3086@trace-define-syntax-macro (unspecified)) (set! bm3088@trace-let/rec-syntax (unspecified)) (set! bm308a@trace-let-syntax-macro (unspecified)) (set! bm308c@trace-letrec-syntax-macro (unspecified)) (set! bm308e@guard-macro (unspecified)) (set! bm3090@define-enumeration-macro (unspecified)) (set! bm3092@time-macro (unspecified)) (set! bm3094@delay-macro (unspecified)) (set! bm3096@assert-macro (unspecified)) (set! bm3098@endianness-macro (unspecified)) (set! bm309a@identifier-syntax-macro (unspecified)) (set! bm309c@do-macro (unspecified)) (set! bm309e@let*-macro (unspecified)) (set! bm30a0@or-macro (unspecified)) (set! bm30a2@and-macro (unspecified)) (set! bm30a4@cond-macro (unspecified)) (set! bm30a6@do-include (unspecified)) (set! bm30a8@include-macro (unspecified)) (set! bm30aa@include-into-macro (unspecified)) (set! bm30ac@syntax-rules-macro (unspecified)) (set! bm30ae@quasiquote-macro (unspecified)) (set! bm30b0@quasisyntax-macro (unspecified)) (set! bm30b2@define-struct-macro (unspecified)) (set! bm30b4@define-record-type-macro (unspecified)) (set! bm30b6@define-condition-type-macro (unspecified)) (set! bm30b8@incorrect-usage-macro (unspecified)) (set! bm30ba@parameterize-macro (unspecified)) (set! bm30bc@foreign-call-transformer (unspecified)) (set! bm30be@convert-pattern (unspecified)) (set! bm30c0@syntax-dispatch (unspecified)) (set! bm30c2@ellipsis? (unspecified)) (set! bm30c4@underscore? (unspecified)) (set! bm30c6@verify-literals (unspecified)) (set! bm30c8@syntax-case-transformer (unspecified)) (set! bm30ca@ellipsis-map (unspecified)) (set! bm30cc@syntax-transformer (unspecified)) (set! bm30ce@core-macro-transformer (unspecified)) (set! bm30d0@symbol-macro (unspecified)) (set! bm30d2@macro-transformer (unspecified)) (set! bm30d4@local-macro-transformer (unspecified)) (set! bm30d6@do-macro-call (unspecified)) (set! bm30d8@chi-macro (unspecified)) (set! bm30da@chi-local-macro (unspecified)) (set! bm30dc@chi-global-macro (unspecified)) (set! bm30de@chi-expr* (unspecified)) (set! bm30e0@chi-application (unspecified)) (set! bm30e2@chi-expr (unspecified)) (set! bm30e4@chi-set! (unspecified)) (set! bm30e6@verify-formals (unspecified)) (set! bm30e8@chi-lambda-clause (unspecified)) (set! bm30ea@chi-lambda-clause* (unspecified)) (set! bm30ec@chi-defun (unspecified)) (set! bm30ee@chi-rhs (unspecified)) (set! bm30f0@expand-interaction-rhs*/init* (unspecified)) (set! bm30f2@chi-rhs* (unspecified)) (set! bm30f4@find-bound=? (unspecified)) (set! bm30f6@find-dups (unspecified)) (set! bm30f8@chi-internal (unspecified)) (set! bm30fa@parse-module (unspecified)) (set! bm3104@module-interface? (unspecified)) (set! bm3106@module-interface-first-mark (unspecified)) (set! bm3108@set-module-interface-first-mark! (unspecified)) (set! bm310a@module-interface-exp-id-vec (unspecified)) (set! bm310c@set-module-interface-exp-id-vec! (unspecified)) (set! bm310e@module-interface-exp-lab-vec (unspecified)) (set! bm3110@set-module-interface-exp-lab-vec! (unspecified)) (set! bm3112@dummy (unspecified)) (set! bm3114@module-interface-exp-id* (unspecified)) (set! bm3116@chi-internal-module (unspecified)) (set! bm3118@chi-body* (unspecified)) (set! bm311a@expand-transformer (unspecified)) (set! bm311c@parse-exports (unspecified)) (set! bm311e@parse-library-name (unspecified)) (set! bm3120@parse-library (unspecified)) (set! bm3122@parse-import-spec* (unspecified)) (set! bm3124@make-top-rib (unspecified)) (set! bm3126@make-collector (unspecified)) (set! bm3128@inv-collector (unspecified)) (set! bm312a@vis-collector (unspecified)) (set! bm312c@imp-collector (unspecified)) (set! bm312e@chi-library-internal (unspecified)) (set! bm3130@chi-interaction-expr (unspecified)) (set! bm3132@library-body-expander (unspecified)) (set! bm3134@core-library-expander (unspecified)) (set! bm3136@parse-top-level-program (unspecified)) (set! bm3138@top-level-expander (unspecified)) (set! bm313a@rp (unspecified)) (set! bm3144@env? (unspecified)) (set! bm3146@env-names (unspecified)) (set! bm3148@set-env-names! (unspecified)) (set! bm314a@env-labels (unspecified)) (set! bm314c@set-env-labels! (unspecified)) (set! bm314e@env-itc (unspecified)) (set! bm3150@set-env-itc! (unspecified)) (set! bm3152@dummy (unspecified)) (set! bm3154@rp (unspecified)) (set! bm315e@interaction-env? (unspecified)) (set! bm3160@interaction-env-rib (unspecified)) (set! bm3162@set-interaction-env-rib! (unspecified)) (set! bm3164@interaction-env-r (unspecified)) (set! bm3166@set-interaction-env-r! (unspecified)) (set! bm3168@interaction-env-locs (unspecified)) (set! bm316a@set-interaction-env-locs! (unspecified)) (set! bm316c@dummy (unspecified)) (set! bm316e@interaction-environment-symbols (unspecified)) (set! bm3170@environment-bindings (unspecified)) (set! bm3172@parse-binding (unspecified)) (set! bm3174@environment? (unspecified)) (set! bm3176@environment-symbols (unspecified)) (set! bm3178@environment (unspecified)) (set! bm317a@null-environment (unspecified)) (set! bm317c@scheme-report-environment (unspecified)) (set! bm317e@expand (unspecified)) (set! bm3180@eval (unspecified)) (set! bm3182@library-expander (unspecified)) (set! bm3184@boot-library-expand (unspecified)) (set! bm3186@rev-map-append (unspecified)) (set! bm3188@build-exports (unspecified)) (set! bm318a@make-export-subst (unspecified)) (set! bm318c@make-export-env/macros (unspecified)) (set! bm318e@generate-temporaries (unspecified)) (set! bm3190@free-identifier=? (unspecified)) (set! bm3192@bound-identifier=? (unspecified)) (set! bm3194@make-source-condition (unspecified)) (set! bm3196@extract-position-condition (unspecified)) (set! bm3198@expression-position (unspecified)) (set! bm319a@assertion-error (unspecified)) (set! bm319c@syntax-error (unspecified)) (set! bm319e@syntax-violation* (unspecified)) (set! bm31a0@syntax-violation (unspecified)) (set! bm31a2@identifier? (unspecified)) (set! bm31a4@datum->syntax (unspecified)) (set! bm31a6@syntax->datum (unspecified)) (set! bm31a8@ungensym-all (unspecified)) (set! bm31aa@compile-r6rs-top-level (unspecified)) (set! bm31ac@pre-compile-r6rs-top-level (unspecified)) (set! bm31ae@interaction-environment (unspecified)) (set! bm31b0@top-level-context (unspecified)) (set! bm2e34@file-options-macro (lambda (bm31b1@x) (letrec* ((bm31b4@valid-option? (lambda (bm31bd@x) (and (bm2eb9@id? bm31bd@x) (memq (bm2ebb@id->sym bm31bd@x) '(no-fail no-create no-truncate)))))) (let ((bm31b5@t bm31b1@x)) (let ((bm31b7@ls/false (bm30c0@syntax-dispatch bm31b5@t '(_ . each-any)))) (if (and bm31b7@ls/false (apply (lambda (bm31b9@opt*) (for-all bm31b4@valid-option? bm31b9@opt*)) bm31b7@ls/false)) (apply (lambda (bm31bb@opt*) (bm3076@bless (list 'make-file-options (list 'quote bm31bb@opt*)))) bm31b7@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm31b5@t))))))) (set! bm4b07@bm2e34@file-options-macro bm2e34@file-options-macro) (set! bm2e36@set-cons (lambda (bm31bf@x bm31c0@ls) (if (memq bm31bf@x bm31c0@ls) bm31c0@ls (cons bm31bf@x bm31c0@ls)))) (set! bm4b08@bm2e36@set-cons bm2e36@set-cons) (set! bm2e38@set-union (lambda (bm31c3@ls1 bm31c4@ls2) (if (null? bm31c3@ls1) bm31c4@ls2 (if (memq (car bm31c3@ls1) bm31c4@ls2) (bm2e38@set-union (cdr bm31c3@ls1) bm31c4@ls2) (cons (car bm31c3@ls1) (bm2e38@set-union (cdr bm31c3@ls1) bm31c4@ls2)))))) (set! bm4b09@bm2e38@set-union bm2e38@set-union) (set! bm2e3d@top-mark* '(top)) (set! bm4b0a@bm2e3d@top-mark* bm2e3d@top-mark*) (set! bm2e3f@top-marked? (lambda (bm31c7@m*) (memq 'top bm31c7@m*))) (set! bm4b0b@bm2e3f@top-marked? bm2e3f@top-marked?) (set! bm2e41@gen-lexical (lambda (bm31c9@sym) (if (symbol? bm31c9@sym) (gensym bm31c9@sym) (if (bm2e85@stx? bm31c9@sym) (bm2e41@gen-lexical (bm2ebb@id->sym bm31c9@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bm31c9@sym))))) (set! bm4b0c@bm2e41@gen-lexical bm2e41@gen-lexical) (set! bm2e43@gen-global (lambda (bm31cb@x) (bm2e41@gen-lexical bm31cb@x))) (set! bm4b0d@bm2e43@gen-global bm2e43@gen-global) (set! bm2e45@gen-label (lambda (bm31cd@_) (gensym))) (set! bm4b0e@bm2e45@gen-label bm2e45@gen-label) (set! bm2e47@gen-top-level-label (lambda (bm31cf@id bm31d0@rib) (letrec* ((bm31d4@find (lambda (bm31df@sym bm31e0@mark* bm31e1@sym* bm31e2@mark** bm31e3@label*) (and (pair? bm31e1@sym*) (if (and (eq? bm31df@sym (car bm31e1@sym*)) (same-marks? bm31e0@mark* (car bm31e2@mark**))) (car bm31e3@label*) (bm31d4@find bm31df@sym bm31e0@mark* (cdr bm31e1@sym*) (cdr bm31e2@mark**) (cdr bm31e3@label*))))))) (let ((bm31d5@sym (bm2ebb@id->sym bm31cf@id)) (bm31d6@mark* (bm2e8b@stx-mark* bm31cf@id))) (let ((bm31d9@sym* (bm2e57@rib-sym* bm31d0@rib))) (let ((bm31db@t (and (memq bm31d5@sym (bm2e57@rib-sym* bm31d0@rib)) (bm31d4@find bm31d5@sym bm31d6@mark* bm31d9@sym* (bm2e5b@rib-mark** bm31d0@rib) (bm2e5f@rib-label* bm31d0@rib))))) (if bm31db@t ((lambda (bm31dd@label) (if (bm2cd4@bm2b21@imported-label->binding bm31dd@label) (gensym) bm31dd@label)) bm31db@t) (gensym)))))))) (set! bm4b0f@bm2e47@gen-top-level-label bm2e47@gen-top-level-label) (set! bm2e49@gen-define-label+loc (lambda (bm31e9@id bm31ea@rib) (let ((bm31ed@t (bm31b0@top-level-context))) (if bm31ed@t ((lambda (bm31ef@env) (let ((bm31f1@label (bm2e47@gen-top-level-label bm31e9@id bm31ea@rib)) (bm31f2@locs (bm3168@interaction-env-locs bm31ef@env))) (values bm31f1@label (let ((bm31f5@t (assq bm31f1@label bm31f2@locs))) (if bm31f5@t (cdr bm31f5@t) (let ((bm31f7@loc (bm2e41@gen-lexical bm31e9@id))) (begin (bm316a@set-interaction-env-locs! bm31ef@env (cons (cons bm31f1@label bm31f7@loc) bm31f2@locs)) bm31f7@loc))))))) bm31ed@t) (values (gensym) (bm2e41@gen-lexical bm31e9@id)))))) (set! bm4b10@bm2e49@gen-define-label+loc bm2e49@gen-define-label+loc) (set! bm2e4b@gen-define-label (lambda (bm31f9@id bm31fa@rib) (if (bm31b0@top-level-context) (bm2e47@gen-top-level-label bm31f9@id bm31fa@rib) (gensym)))) (set! bm4b11@bm2e4b@gen-define-label bm2e4b@gen-define-label) (set! bm2e55@rib? (lambda (bm31fd@x) (and (simple-struct? bm31fd@x) (eq? (simple-struct-name bm31fd@x) 'rib)))) (set! bm4b12@bm2e55@rib? bm2e55@rib?) (set! bm2e57@rib-sym* (lambda (bm31ff@x) (simple-struct-ref bm31ff@x '0))) (set! bm4b13@bm2e57@rib-sym* bm2e57@rib-sym*) (set! bm2e59@set-rib-sym*! (lambda (bm3201@x bm3202@val) (simple-struct-set! bm3201@x '0 bm3202@val))) (set! bm4b14@bm2e59@set-rib-sym*! bm2e59@set-rib-sym*!) (set! bm2e5b@rib-mark** (lambda (bm3205@x) (simple-struct-ref bm3205@x '1))) (set! bm4b15@bm2e5b@rib-mark** bm2e5b@rib-mark**) (set! bm2e5d@set-rib-mark**! (lambda (bm3207@x bm3208@val) (simple-struct-set! bm3207@x '1 bm3208@val))) (set! bm4b16@bm2e5d@set-rib-mark**! bm2e5d@set-rib-mark**!) (set! bm2e5f@rib-label* (lambda (bm320b@x) (simple-struct-ref bm320b@x '2))) (set! bm4b17@bm2e5f@rib-label* bm2e5f@rib-label*) (set! bm2e61@set-rib-label*! (lambda (bm320d@x bm320e@val) (simple-struct-set! bm320d@x '2 bm320e@val))) (set! bm4b18@bm2e61@set-rib-label*! bm2e61@set-rib-label*!) (set! bm2e63@rib-sealed/freq (lambda (bm3211@x) (simple-struct-ref bm3211@x '3))) (set! bm4b19@bm2e63@rib-sealed/freq bm2e63@rib-sealed/freq) (set! bm2e65@set-rib-sealed/freq! (lambda (bm3213@x bm3214@val) (simple-struct-set! bm3213@x '3 bm3214@val))) (set! bm4b1a@bm2e65@set-rib-sealed/freq! bm2e65@set-rib-sealed/freq!) (set! bm2e67@rib-cache (lambda (bm3217@x) (simple-struct-ref bm3217@x '4))) (set! bm4b1b@bm2e67@rib-cache bm2e67@rib-cache) (set! bm2e69@set-rib-cache! (lambda (bm3219@x bm321a@val) (simple-struct-set! bm3219@x '4 bm321a@val))) (set! bm4b1c@bm2e69@set-rib-cache! bm2e69@set-rib-cache!) (set! bm2e6b@dummy '3) (set! bm4b1d@bm2e6b@dummy bm2e6b@dummy) (set! bm2e6d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bm4b1e@bm2e6d@make-empty-rib bm2e6d@make-empty-rib) (set! bm2e6f@extend-rib! (lambda (bm321d@rib bm321e@id bm321f@label) (letrec* ((bm3224@find (lambda (bm3231@sym bm3232@mark* bm3233@sym* bm3234@mark** bm3235@label*) (and (pair? bm3233@sym*) (if (and (eq? bm3231@sym (car bm3233@sym*)) (same-marks? bm3232@mark* (car bm3234@mark**))) bm3235@label* (bm3224@find bm3231@sym bm3232@mark* (cdr bm3233@sym*) (cdr bm3234@mark**) (cdr bm3235@label*))))))) (begin (if (bm2e63@rib-sealed/freq bm321d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bm321d@rib) (void)) (let ((bm3225@sym (bm2ebb@id->sym bm321e@id)) (bm3226@mark* (bm2e8b@stx-mark* bm321e@id))) (let ((bm3229@sym* (bm2e57@rib-sym* bm321d@rib))) (let ((bm322b@t (and (memq bm3225@sym (bm2e57@rib-sym* bm321d@rib)) (bm3224@find bm3225@sym bm3226@mark* bm3229@sym* (bm2e5b@rib-mark** bm321d@rib) (bm2e5f@rib-label* bm321d@rib))))) (if bm322b@t ((lambda (bm322d@p) (if (not (eq? bm321f@label (car bm322d@p))) (if (bm31b0@top-level-context) (set-car! bm322d@p bm321f@label) (bm31a0@syntax-violation '#f '"multiple definitions of identifier" bm321e@id)) (void))) bm322b@t) (begin (if (bm2e67@rib-cache bm321d@rib) (hashtable-update! (bm2e67@rib-cache bm321d@rib) bm3225@sym (lambda (bm322f@e) (cons (cons bm3226@mark* bm321f@label) bm322f@e)) '()) (void)) (bm2e59@set-rib-sym*! bm321d@rib (cons bm3225@sym bm3229@sym*)) (bm2e5d@set-rib-mark**! bm321d@rib (cons bm3226@mark* (bm2e5b@rib-mark** bm321d@rib))) (bm2e61@set-rib-label*! bm321d@rib (cons bm321f@label (bm2e5f@rib-label* bm321d@rib)))))))))))) (set! bm4b1f@bm2e6f@extend-rib! bm2e6f@extend-rib!) (set! bm2e71@extend-rib/nc! (lambda (bm323b@rib bm323c@id bm323d@label) (let ((bm3241@sym (bm2ebb@id->sym bm323c@id)) (bm3242@mark* (bm2e8b@stx-mark* bm323c@id))) (let ((bm3245@sym* (bm2e57@rib-sym* bm323b@rib))) (begin (if (bm2e67@rib-cache bm323b@rib) (hashtable-update! (bm2e67@rib-cache bm323b@rib) bm3241@sym (lambda (bm3247@e) (cons (cons bm3242@mark* bm323d@label) bm3247@e)) '()) (void)) (bm2e59@set-rib-sym*! bm323b@rib (cons bm3241@sym bm3245@sym*)) (bm2e5d@set-rib-mark**! bm323b@rib (cons bm3242@mark* (bm2e5b@rib-mark** bm323b@rib))) (bm2e61@set-rib-label*! bm323b@rib (cons bm323d@label (bm2e5f@rib-label* bm323b@rib)))))))) (set! bm4b20@bm2e71@extend-rib/nc! bm2e71@extend-rib/nc!) (set! bm2e73@make-rib-map (lambda (bm3249@sym*) (let ((bm324b@ht (make-eq-hashtable))) (let bm3251@f ((bm324d@i '0) (bm324e@sym* bm3249@sym*)) (if (null? bm324e@sym*) bm324b@ht (begin (hashtable-update! bm324b@ht (car bm324e@sym*) (lambda (bm3253@x) (cons bm324d@i bm3253@x)) '()) (bm3251@f (+ bm324d@i '1) (cdr bm324e@sym*)))))))) (set! bm4b21@bm2e73@make-rib-map bm2e73@make-rib-map) (set! bm2e75@seal-rib! (lambda (bm3255@rib) (let ((bm3257@sym* (bm2e57@rib-sym* bm3255@rib))) (if (not (null? bm3257@sym*)) (begin (bm2e59@set-rib-sym*! bm3255@rib (list->vector bm3257@sym*)) (bm2e5d@set-rib-mark**! bm3255@rib (list->vector (bm2e5b@rib-mark** bm3255@rib))) (bm2e61@set-rib-label*! bm3255@rib (list->vector (bm2e5f@rib-label* bm3255@rib))) (bm2e65@set-rib-sealed/freq! bm3255@rib (bm2e73@make-rib-map bm3257@sym*))) (void))))) (set! bm4b22@bm2e75@seal-rib! bm2e75@seal-rib!) (set! bm2e77@unseal-rib! (lambda (bm3259@rib) (if (bm2e63@rib-sealed/freq bm3259@rib) (begin (bm2e65@set-rib-sealed/freq! bm3259@rib '#f) (bm2e59@set-rib-sym*! bm3259@rib (vector->list (bm2e57@rib-sym* bm3259@rib))) (bm2e5d@set-rib-mark**! bm3259@rib (vector->list (bm2e5b@rib-mark** bm3259@rib))) (bm2e61@set-rib-label*! bm3259@rib (vector->list (bm2e5f@rib-label* bm3259@rib)))) (void)))) (set! bm4b23@bm2e77@unseal-rib! bm2e77@unseal-rib!) (set! bm2e79@make-full-rib (lambda (bm325b@id* bm325c@label*) (let ((bm325f@r (make-simple-struct 'rib '6 (list (map bm2ebb@id->sym bm325b@id*) (map bm2e8b@stx-mark* bm325b@id*) bm325c@label* '#f '#f)))) (begin (bm2e75@seal-rib! bm325f@r) bm325f@r)))) (set! bm4b24@bm2e79@make-full-rib bm2e79@make-full-rib) (set! bm2e7b@rp (bm2a06@bm28e1@make-record-printer 'stx (lambda (bm3261@x bm3262@p bm3263@wr) (begin (display '"#<syntax " bm3262@p) (write (bm2ecd@stx->datum bm3261@x) bm3262@p) (let ((bm3267@expr (bm2e87@stx-expr bm3261@x))) (if (bm29fd@bm28cf@annotation? bm3267@expr) (let ((bm3269@src (bm29fe@bm28d1@annotation-source bm3267@expr))) (if (pair? bm3269@src) (begin (display '" [" bm3262@p) (display (cdr bm3269@src) bm3262@p) (display '" of " bm3262@p) (display (car bm3269@src) bm3262@p) (display '"]" bm3262@p)) (void))) (void))) (display '">" bm3262@p))))) (set! bm4b25@bm2e7b@rp bm2e7b@rp) (set! bm2e85@stx? (lambda (bm326b@x) (and (simple-struct? bm326b@x) (eq? (simple-struct-name bm326b@x) 'stx)))) (set! bm4b26@bm2e85@stx? bm2e85@stx?) (set! bm2e87@stx-expr (lambda (bm326d@x) (simple-struct-ref bm326d@x '0))) (set! bm4b27@bm2e87@stx-expr bm2e87@stx-expr) (set! bm2e89@set-stx-expr! (lambda (bm326f@x bm3270@val) (simple-struct-set! bm326f@x '0 bm3270@val))) (set! bm4b28@bm2e89@set-stx-expr! bm2e89@set-stx-expr!) (set! bm2e8b@stx-mark* (lambda (bm3273@x) (simple-struct-ref bm3273@x '1))) (set! bm4b29@bm2e8b@stx-mark* bm2e8b@stx-mark*) (set! bm2e8d@set-stx-mark*! (lambda (bm3275@x bm3276@val) (simple-struct-set! bm3275@x '1 bm3276@val))) (set! bm4b2a@bm2e8d@set-stx-mark*! bm2e8d@set-stx-mark*!) (set! bm2e8f@stx-subst* (lambda (bm3279@x) (simple-struct-ref bm3279@x '2))) (set! bm4b2b@bm2e8f@stx-subst* bm2e8f@stx-subst*) (set! bm2e91@set-stx-subst*! (lambda (bm327b@x bm327c@val) (simple-struct-set! bm327b@x '2 bm327c@val))) (set! bm4b2c@bm2e91@set-stx-subst*! bm2e91@set-stx-subst*!) (set! bm2e93@stx-ae* (lambda (bm327f@x) (simple-struct-ref bm327f@x '3))) (set! bm4b2d@bm2e93@stx-ae* bm2e93@stx-ae*) (set! bm2e95@set-stx-ae*! (lambda (bm3281@x bm3282@val) (simple-struct-set! bm3281@x '3 bm3282@val))) (set! bm4b2e@bm2e95@set-stx-ae*! bm2e95@set-stx-ae*!) (set! bm2e97@dummy '3) (set! bm4b2f@bm2e97@dummy bm2e97@dummy) (set! bm2e99@datum->stx (lambda (bm3285@id bm3286@datum) (make-simple-struct 'stx '5 (list bm3286@datum (bm2e8b@stx-mark* bm3285@id) (bm2e8f@stx-subst* bm3285@id) (bm2e93@stx-ae* bm3285@id))))) (set! bm4b30@bm2e99@datum->stx bm2e99@datum->stx) (set! bm2e9b@gen-mark (lambda () (string '#\m))) (set! bm4b31@bm2e9b@gen-mark bm2e9b@gen-mark) (set! bm2e9d@anti-mark '#f) (set! bm4b32@bm2e9d@anti-mark bm2e9d@anti-mark) (set! bm2e9f@anti-mark? not) (set! bm4b33@bm2e9f@anti-mark? bm2e9f@anti-mark?) (set! bm2ea1@mkstx (lambda (bm3289@e bm328a@m* bm328b@s* bm328c@ae*) (if (and (bm2e85@stx? bm3289@e) (not (bm2e3f@top-marked? bm328a@m*))) (call-with-values (lambda () (join-wraps bm328a@m* bm328b@s* bm328c@ae* bm3289@e)) (lambda (bm3297@bm3292 bm3298@bm3294 bm3299@bm3296) (let ((bm329d@ae* bm3299@bm3296) (bm329e@s* bm3298@bm3294) (bm329f@m* bm3297@bm3292)) (make-simple-struct 'stx '5 (list (bm2e87@stx-expr bm3289@e) bm329f@m* bm329e@s* bm329d@ae*))))) (make-simple-struct 'stx '5 (list bm3289@e bm328a@m* bm328b@s* bm328c@ae*))))) (set! bm4b34@bm2ea1@mkstx bm2ea1@mkstx) (set! bm2ea3@add-mark (lambda (bm32a3@m bm32a4@e bm32a5@ae) (bm2ea1@mkstx bm32a4@e (list bm32a3@m) '(shift) (list bm32a5@ae)))) (set! bm4b35@bm2ea3@add-mark bm2ea3@add-mark) (set! bm2ea5@add-subst (lambda (bm32a9@subst bm32aa@e) (bm2ea1@mkstx bm32aa@e '() (list bm32a9@subst) '()))) (set! bm4b36@bm2ea5@add-subst bm2ea5@add-subst) (set! bm2ea7@syntax-kind? (lambda (bm32ad@x bm32ae@p?) (if (bm2e85@stx? bm32ad@x) (bm2ea7@syntax-kind? (bm2e87@stx-expr bm32ad@x) bm32ae@p?) (if (bm29fd@bm28cf@annotation? bm32ad@x) (bm2ea7@syntax-kind? (bm29ff@bm28d3@annotation-expression bm32ad@x) bm32ae@p?) (bm32ae@p? bm32ad@x))))) (set! bm4b37@bm2ea7@syntax-kind? bm2ea7@syntax-kind?) (set! bm2ea9@syntax-vector->list (lambda (bm32b1@x) (if (bm2e85@stx? bm32b1@x) (let ((bm32b3@ls (bm2ea9@syntax-vector->list (bm2e87@stx-expr bm32b1@x))) (bm32b4@m* (bm2e8b@stx-mark* bm32b1@x)) (bm32b5@s* (bm2e8f@stx-subst* bm32b1@x)) (bm32b6@ae* (bm2e93@stx-ae* bm32b1@x))) (map (lambda (bm32bb@x) (bm2ea1@mkstx bm32bb@x bm32b4@m* bm32b5@s* bm32b6@ae*)) bm32b3@ls)) (if (bm29fd@bm28cf@annotation? bm32b1@x) (bm2ea9@syntax-vector->list (bm29ff@bm28d3@annotation-expression bm32b1@x)) (if (vector? bm32b1@x) (vector->list bm32b1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bm32b1@x)))))) (set! bm4b38@bm2ea9@syntax-vector->list bm2ea9@syntax-vector->list) (set! bm2eab@syntax-pair? (lambda (bm32bd@x) (bm2ea7@syntax-kind? bm32bd@x pair?))) (set! bm4b39@bm2eab@syntax-pair? bm2eab@syntax-pair?) (set! bm2ead@syntax-vector? (lambda (bm32bf@x) (bm2ea7@syntax-kind? bm32bf@x vector?))) (set! bm4b3a@bm2ead@syntax-vector? bm2ead@syntax-vector?) (set! bm2eaf@syntax-null? (lambda (bm32c1@x) (bm2ea7@syntax-kind? bm32c1@x null?))) (set! bm4b3b@bm2eaf@syntax-null? bm2eaf@syntax-null?) (set! bm2eb1@syntax-list? (lambda (bm32c3@x) (or (bm2eaf@syntax-null? bm32c3@x) (and (bm2eab@syntax-pair? bm32c3@x) (bm2eb1@syntax-list? (bm2eb5@syntax-cdr bm32c3@x)))))) (set! bm4b3c@bm2eb1@syntax-list? bm2eb1@syntax-list?) (set! bm2eb3@syntax-car (lambda (bm32c5@x) (if (bm2e85@stx? bm32c5@x) (bm2ea1@mkstx (bm2eb3@syntax-car (bm2e87@stx-expr bm32c5@x)) (bm2e8b@stx-mark* bm32c5@x) (bm2e8f@stx-subst* bm32c5@x) (bm2e93@stx-ae* bm32c5@x)) (if (bm29fd@bm28cf@annotation? bm32c5@x) (bm2eb3@syntax-car (bm29ff@bm28d3@annotation-expression bm32c5@x)) (if (pair? bm32c5@x) (car bm32c5@x) (assertion-violation 'syntax-car '"BUG: not a pair" bm32c5@x)))))) (set! bm4b3d@bm2eb3@syntax-car bm2eb3@syntax-car) (set! bm2eb5@syntax-cdr (lambda (bm32c7@x) (if (bm2e85@stx? bm32c7@x) (bm2ea1@mkstx (bm2eb5@syntax-cdr (bm2e87@stx-expr bm32c7@x)) (bm2e8b@stx-mark* bm32c7@x) (bm2e8f@stx-subst* bm32c7@x) (bm2e93@stx-ae* bm32c7@x)) (if (bm29fd@bm28cf@annotation? bm32c7@x) (bm2eb5@syntax-cdr (bm29ff@bm28d3@annotation-expression bm32c7@x)) (if (pair? bm32c7@x) (cdr bm32c7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bm32c7@x)))))) (set! bm4b3e@bm2eb5@syntax-cdr bm2eb5@syntax-cdr) (set! bm2eb7@syntax->list (lambda (bm32c9@x) (if (bm2eab@syntax-pair? bm32c9@x) (cons (bm2eb3@syntax-car bm32c9@x) (bm2eb7@syntax->list (bm2eb5@syntax-cdr bm32c9@x))) (if (bm2eaf@syntax-null? bm32c9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bm32c9@x))))) (set! bm4b3f@bm2eb7@syntax->list bm2eb7@syntax->list) (set! bm2eb9@id? (lambda (bm32cb@x) (and (bm2e85@stx? bm32cb@x) (symbol? (bm2e87@stx-expr bm32cb@x))))) (set! bm4b40@bm2eb9@id? bm2eb9@id?) (set! bm2ebb@id->sym (lambda (bm32cd@x) (bm2e87@stx-expr bm32cd@x))) (set! bm4b41@bm2ebb@id->sym bm2ebb@id->sym) (set! bm2ebd@bound-id=? (lambda (bm32cf@x bm32d0@y) (and (eq? (bm2ebb@id->sym bm32cf@x) (bm2ebb@id->sym bm32d0@y)) (same-marks? (bm2e8b@stx-mark* bm32cf@x) (bm2e8b@stx-mark* bm32d0@y))))) (set! bm4b42@bm2ebd@bound-id=? bm2ebd@bound-id=?) (set! bm2ebf@free-id=? (lambda (bm32d3@i bm32d4@j) (let ((bm32d7@t0 (id->real-label bm32d3@i)) (bm32d8@t1 (id->real-label bm32d4@j))) (if (or bm32d7@t0 bm32d8@t1) (eq? bm32d7@t0 bm32d8@t1) (eq? (bm2ebb@id->sym bm32d3@i) (bm2ebb@id->sym bm32d4@j)))))) (set! bm4b43@bm2ebf@free-id=? bm2ebf@free-id=?) (set! bm2ec1@valid-bound-ids? (lambda (bm32db@id*) (and (for-all bm2eb9@id? bm32db@id*) (bm2ec3@distinct-bound-ids? bm32db@id*)))) (set! bm4b44@bm2ec1@valid-bound-ids? bm2ec1@valid-bound-ids?) (set! bm2ec3@distinct-bound-ids? (lambda (bm32dd@id*) (or (null? bm32dd@id*) (and (not (bm2ec5@bound-id-member? (car bm32dd@id*) (cdr bm32dd@id*))) (bm2ec3@distinct-bound-ids? (cdr bm32dd@id*)))))) (set! bm4b45@bm2ec3@distinct-bound-ids? bm2ec3@distinct-bound-ids?) (set! bm2ec5@bound-id-member? (lambda (bm32df@id bm32e0@id*) (and (pair? bm32e0@id*) (or (bm2ebd@bound-id=? bm32df@id (car bm32e0@id*)) (bm2ec5@bound-id-member? bm32df@id (cdr bm32e0@id*)))))) (set! bm4b46@bm2ec5@bound-id-member? bm2ec5@bound-id-member?) (set! bm2ec7@self-evaluating? (lambda (bm32e3@x) (or (number? bm32e3@x) (string? bm32e3@x) (char? bm32e3@x) (boolean? bm32e3@x) (regexp? bm32e3@x) (bytevector? bm32e3@x)))) (set! bm4b47@bm2ec7@self-evaluating? bm2ec7@self-evaluating?) (set! bm2ec9@strip-annotations (lambda (bm32e5@x) (if (pair? bm32e5@x) (cons (bm2ec9@strip-annotations (car bm32e5@x)) (bm2ec9@strip-annotations (cdr bm32e5@x))) (if (vector? bm32e5@x) (vector-map bm2ec9@strip-annotations bm32e5@x) (if (bm29fd@bm28cf@annotation? bm32e5@x) (bm29fc@bm28cd@annotation-stripped bm32e5@x) bm32e5@x))))) (set! bm4b48@bm2ec9@strip-annotations bm2ec9@strip-annotations) (set! bm2ecb@strip (lambda (bm32e7@x bm32e8@m*) (if (bm2e3f@top-marked? bm32e8@m*) (if (or (bm29fd@bm28cf@annotation? bm32e7@x) (and (pair? bm32e7@x) (bm29fd@bm28cf@annotation? (car bm32e7@x))) (and (vector? bm32e7@x) (> (vector-length bm32e7@x) '0) (bm29fd@bm28cf@annotation? (vector-ref bm32e7@x '0)))) (bm2ec9@strip-annotations bm32e7@x) bm32e7@x) (let bm32ed@f ((bm32eb@x bm32e7@x)) (if (bm2e85@stx? bm32eb@x) (begin (if (pair? (bm2e87@stx-expr bm32eb@x)) (begin (set-source-info! (bm2e87@stx-expr bm32eb@x) '#f) (set-source-info! (cdr (bm2e87@stx-expr bm32eb@x)) '#f) (set-source-info! (car (bm2e87@stx-expr bm32eb@x)) '#f)) (void)) (bm2ecb@strip (bm2e87@stx-expr bm32eb@x) (bm2e8b@stx-mark* bm32eb@x))) (if (bm29fd@bm28cf@annotation? bm32eb@x) (bm29fc@bm28cd@annotation-stripped bm32eb@x) (if (pair? bm32eb@x) (let ((bm32ef@a (bm32ed@f (car bm32eb@x))) (bm32f0@d (bm32ed@f (cdr bm32eb@x)))) (if (and (eq? bm32ef@a (car bm32eb@x)) (eq? bm32f0@d (cdr bm32eb@x))) bm32eb@x (cons bm32ef@a bm32f0@d))) (if (vector? bm32eb@x) (let ((bm32f3@old (vector->list bm32eb@x))) (let ((bm32f5@new (map bm32ed@f bm32f3@old))) (if (for-all eq? bm32f3@old bm32f5@new) bm32eb@x (list->vector bm32f5@new)))) bm32eb@x)))))))) (set! bm4b49@bm2ecb@strip bm2ecb@strip) (set! bm2ecd@stx->datum (lambda (bm32f7@x) (bm2ecb@strip bm32f7@x '()))) (set! bm4b4a@bm2ecd@stx->datum bm2ecd@stx->datum) (set! bm2ecf@id->label (lambda (bm32f9@id) (or (id->real-label bm32f9@id) (let ((bm32fb@t (bm31b0@top-level-context))) (if bm32fb@t ((lambda (bm32fd@env) (let ((bm32ff@rib (bm3160@interaction-env-rib bm32fd@env))) (call-with-values (lambda () (bm2e49@gen-define-label+loc bm32f9@id bm32ff@rib)) (lambda (bm3305@bm3302 bm3306@bm3304) (let ((bm3309@loc_ bm3306@bm3304) (bm330a@lab bm3305@bm3302)) (begin (bm2e6f@extend-rib! bm32ff@rib bm32f9@id bm330a@lab) bm330a@lab)))))) bm32fb@t) '#f))))) (set! bm4b4b@bm2ecf@id->label bm2ecf@id->label) (set! bm2ed1@label->binding (lambda (bm330d@x bm330e@r) (let ((bm3311@t (bm2cd4@bm2b21@imported-label->binding bm330d@x))) (if bm3311@t ((lambda (bm3313@b) (if (and (pair? bm3313@b) (eq? (car bm3313@b) '$core-rtd)) (cons '$rtd (map bm3076@bless (cdr bm3313@b))) (if (and (pair? bm3313@b) (eq? (car bm3313@b) 'global-rtd)) (let ((bm3315@lib (cadr bm3313@b)) (bm3316@loc (cddr bm3313@b))) (cons '$rtd (symbol-value bm3316@loc))) bm3313@b))) bm3311@t) (let ((bm3319@t (assq bm330d@x bm330e@r))) (if bm3319@t (cdr bm3319@t) (let ((bm331b@t (bm31b0@top-level-context))) (if bm331b@t ((lambda (bm331d@env) (let ((bm331f@t (assq bm330d@x (bm3168@interaction-env-locs bm331d@env)))) (if bm331f@t ((lambda (bm3321@p) (cons* 'lexical (cdr bm3321@p) '#f)) bm331f@t) '(displaced-lexical . #f)))) bm331b@t) '(displaced-lexical . #f))))))))) (set! bm4b4c@bm2ed1@label->binding bm2ed1@label->binding) (set! bm2ed3@make-binding cons) (set! bm4b4d@bm2ed3@make-binding bm2ed3@make-binding) (set! bm2ed5@binding-type car) (set! bm4b4e@bm2ed5@binding-type bm2ed5@binding-type) (set! bm2ed7@binding-value cdr) (set! bm4b4f@bm2ed7@binding-value bm2ed7@binding-value) (set! bm2ed9@raise-unbound-error (lambda (bm3323@id) (bm319e@syntax-violation* '#f '"unbound identifier" bm3323@id (make-undefined-violation)))) (set! bm4b50@bm2ed9@raise-unbound-error bm2ed9@raise-unbound-error) (set! bm2edb@syntax-type (lambda (bm3325@e bm3326@r) (if (bm2eb9@id? bm3325@e) (let ((bm3329@id bm3325@e)) (let ((bm332b@label (bm2ecf@id->label bm3329@id))) (let ((bm332d@b (bm2ed1@label->binding bm332b@label bm3326@r))) (let ((bm332f@type (bm2ed5@binding-type bm332d@b))) (begin (if (not bm332b@label) (bm2ed9@raise-unbound-error bm3329@id) (void)) (let ((bm3331@t bm332f@type)) (if (memv bm3331@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bm332f@type (bm2ed7@binding-value bm332d@b) bm3329@id) (values 'other '#f '#f)))))))) (if (bm2eab@syntax-pair? bm3325@e) (let ((bm3333@id (bm2eb3@syntax-car bm3325@e))) (if (bm2eb9@id? bm3333@id) (let ((bm3335@label (bm2ecf@id->label bm3333@id))) (let ((bm3337@b (bm2ed1@label->binding bm3335@label bm3326@r))) (let ((bm3339@type (bm2ed5@binding-type bm3337@b))) (begin (if (not bm3335@label) (bm2ed9@raise-unbound-error bm3333@id) (void)) (let ((bm333b@t bm3339@type)) (if (memv bm333b@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bm3339@type (bm2ed7@binding-value bm3337@b) bm3333@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bm333d@d (bm2ecd@stx->datum bm3325@e))) (if (bm2ec7@self-evaluating? bm333d@d) (values 'constant bm333d@d '#f) (values 'other '#f '#f))))))) (set! bm4b51@bm2edb@syntax-type bm2edb@syntax-type) (set! bm2ee9@sanitize-binding (lambda (bm333f@x bm3340@src) (if (procedure? bm333f@x) (cons* 'local-macro bm333f@x bm3340@src) (if (and (pair? bm333f@x) (eq? (car bm333f@x) 'macro!) (procedure? (cdr bm333f@x))) (cons* 'local-macro! (cdr bm333f@x) bm3340@src) (if (and (pair? bm333f@x) (eq? (car bm333f@x) '$rtd)) bm333f@x (assertion-violation 'expand '"invalid transformer" bm333f@x)))))) (set! bm4b52@bm2ee9@sanitize-binding bm2ee9@sanitize-binding) (set! bm2eeb@make-variable-transformer (lambda (bm3343@x) (if (procedure? bm3343@x) (cons 'macro! bm3343@x) (assertion-violation 'make-variable-transformer '"not a procedure" bm3343@x)))) (set! bm4b53@bm2eeb@make-variable-transformer bm2eeb@make-variable-transformer) (set! bm2eed@variable-transformer? (lambda (bm3345@x) (and (pair? bm3345@x) (eq? (car bm3345@x) 'macro!) (procedure? (cdr bm3345@x))))) (set! bm4b54@bm2eed@variable-transformer? bm2eed@variable-transformer?) (set! bm2eef@variable-transformer-procedure (lambda (bm3347@x) (if (bm2eed@variable-transformer? bm3347@x) (cdr bm3347@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bm3347@x)))) (set! bm4b55@bm2eef@variable-transformer-procedure bm2eef@variable-transformer-procedure) (set! bm2ef1@make-eval-transformer (lambda (bm3349@x) (bm2ee9@sanitize-binding (eval-core (bm2a5f@bm2a17@expanded->core bm3349@x)) bm3349@x))) (set! bm4b56@bm2ef1@make-eval-transformer bm2ef1@make-eval-transformer) (set! bm3042@parse-define (lambda (bm334b@x) (let ((bm334d@t bm334b@x)) (let ((bm334f@ls/false (bm30c0@syntax-dispatch bm334d@t '(_ (any . any) any . each-any)))) (if (and bm334f@ls/false (apply (lambda (bm3351@id bm3352@fmls bm3353@b bm3354@b*) (bm2eb9@id? bm3351@id)) bm334f@ls/false)) (apply (lambda (bm3359@id bm335a@fmls bm335b@b bm335c@b*) (begin (bm30e6@verify-formals bm335a@fmls bm334b@x) (values bm3359@id (cons 'defun (cons bm335a@fmls (cons bm335b@b bm335c@b*)))))) bm334f@ls/false) (let ((bm3361@t bm334d@t)) (let ((bm3363@ls/false (bm30c0@syntax-dispatch bm3361@t '(_ any any)))) (if (and bm3363@ls/false (apply (lambda (bm3365@id bm3366@val) (bm2eb9@id? bm3365@id)) bm3363@ls/false)) (apply (lambda (bm3369@id bm336a@val) (values bm3369@id (cons 'expr bm336a@val))) bm3363@ls/false) (let ((bm336d@t bm3361@t)) (let ((bm336f@ls/false (bm30c0@syntax-dispatch bm336d@t '(_ any)))) (if (and bm336f@ls/false (apply (lambda (bm3371@id) (bm2eb9@id? bm3371@id)) bm336f@ls/false)) (apply (lambda (bm3373@id) (values bm3373@id (cons 'expr (bm3076@bless '(void))))) bm336f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm336d@t)))))))))))) (set! bm4b57@bm3042@parse-define bm3042@parse-define) (set! bm3044@parse-define-syntax (lambda (bm3375@x) (let ((bm3377@t bm3375@x)) (let ((bm3379@ls/false (bm30c0@syntax-dispatch bm3377@t '(_ any any)))) (if (and bm3379@ls/false (apply (lambda (bm337b@id bm337c@val) (bm2eb9@id? bm337b@id)) bm3379@ls/false)) (apply (lambda (bm337f@id bm3380@val) (values bm337f@id bm3380@val)) bm3379@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3377@t)))))) (set! bm4b58@bm3044@parse-define-syntax bm3044@parse-define-syntax) (set! bm3046@scheme-stx-hashtable (make-eq-hashtable)) (set! bm4b59@bm3046@scheme-stx-hashtable bm3046@scheme-stx-hashtable) (set! bm3048@scheme-stx (lambda (bm3383@sym) (or (hashtable-ref bm3046@scheme-stx-hashtable bm3383@sym '#f) (let ((bm3385@subst (bm2cb0@bm2ad9@library-subst (bm2cce@bm2b15@find-library-by-name '(psyntax system $all))))) (let ((bm3387@stx (make-simple-struct 'stx '5 (list bm3383@sym bm2e3d@top-mark* '() '())))) (let ((bm3389@stx (let ((bm338b@t (assq bm3383@sym bm3385@subst))) (if bm338b@t ((lambda (bm338d@x) (let ((bm338f@name (car bm338d@x)) (bm3390@label (cdr bm338d@x))) (bm2ea5@add-subst (make-simple-struct 'rib '6 (list (list bm338f@name) (list bm2e3d@top-mark*) (list bm3390@label) '#f '#f)) bm3387@stx))) bm338b@t) bm3387@stx)))) (begin (hashtable-set! bm3046@scheme-stx-hashtable bm3383@sym bm3389@stx) bm3389@stx))))))) (set! bm4b5a@bm3048@scheme-stx bm3048@scheme-stx) (set! bm304a@lexical-var car) (set! bm4b5b@bm304a@lexical-var bm304a@lexical-var) (set! bm304c@lexical-mutable? cdr) (set! bm4b5c@bm304c@lexical-mutable? bm304c@lexical-mutable?) (set! bm304e@set-lexical-mutable! set-cdr!) (set! bm4b5d@bm304e@set-lexical-mutable! bm304e@set-lexical-mutable!) (set! bm3050@add-lexical (lambda (bm3393@lab bm3394@lex bm3395@r) (cons (cons* bm3393@lab 'lexical bm3394@lex '#f) bm3395@r))) (set! bm4b5e@bm3050@add-lexical bm3050@add-lexical) (set! bm3052@add-lexicals (lambda (bm3399@lab* bm339a@lex* bm339b@r) (if (null? bm3399@lab*) bm339b@r (bm3052@add-lexicals (cdr bm3399@lab*) (cdr bm339a@lex*) (bm3050@add-lexical (car bm3399@lab*) (car bm339a@lex*) bm339b@r))))) (set! bm4b5f@bm3052@add-lexicals bm3052@add-lexicals) (set! bm3054@letrec-helper (lambda (bm339f@e bm33a0@r bm33a1@mr bm33a2@build) (let ((bm33a7@t bm339f@e)) (let ((bm33a9@ls/false (bm30c0@syntax-dispatch bm33a7@t '(_ #(each (any any)) any . each-any)))) (if bm33a9@ls/false (apply (lambda (bm33ab@lhs* bm33ac@rhs* bm33ad@b bm33ae@b*) (if (not (bm2ec1@valid-bound-ids? bm33ab@lhs*)) (bm307a@invalid-fmls-error bm339f@e bm33ab@lhs*) (let ((bm33b3@lex* (map bm2e41@gen-lexical bm33ab@lhs*)) (bm33b4@lab* (map bm2e45@gen-label bm33ab@lhs*))) (let ((bm33b7@rib (bm2e79@make-full-rib bm33ab@lhs* bm33b4@lab*)) (bm33b8@r (bm3052@add-lexicals bm33b4@lab* bm33b3@lex* bm33a0@r))) (let ((bm33bb@body (bm30f8@chi-internal (bm2ea5@add-subst bm33b7@rib (cons bm33ad@b bm33ae@b*)) bm33b8@r bm33a1@mr)) (bm33bc@rhs* (bm30de@chi-expr* (map (lambda (bm33bf@x) (bm2ea5@add-subst bm33b7@rib bm33bf@x)) bm33ac@rhs*) bm33b8@r bm33a1@mr))) (bm33a2@build '#f bm33b3@lex* bm33bc@rhs* bm33bb@body)))))) bm33a9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm33a7@t)))))) (set! bm4b60@bm3054@letrec-helper bm3054@letrec-helper) (set! bm3056@let-transformer (lambda (bm33c1@e bm33c2@r bm33c3@mr) (let ((bm33c7@t bm33c1@e)) (let ((bm33c9@ls/false (bm30c0@syntax-dispatch bm33c7@t '(_ #(each (any any)) any . each-any)))) (if bm33c9@ls/false (apply (lambda (bm33cb@lhs* bm33cc@rhs* bm33cd@b bm33ce@b*) (if (not (bm2ec1@valid-bound-ids? bm33cb@lhs*)) (bm307a@invalid-fmls-error bm33c1@e bm33cb@lhs*) (let ((bm33d3@lex* (map bm2e41@gen-lexical bm33cb@lhs*)) (bm33d4@lab* (map bm2e45@gen-label bm33cb@lhs*)) (bm33d5@rhs* (bm30de@chi-expr* bm33cc@rhs* bm33c2@r bm33c3@mr))) (let ((bm33d9@rib (bm2e79@make-full-rib bm33cb@lhs* bm33d4@lab*)) (bm33da@r (bm3052@add-lexicals bm33d4@lab* bm33d3@lex* bm33c2@r))) (let ((bm33dd@body (bm30f8@chi-internal (bm2ea5@add-subst bm33d9@rib (cons bm33cd@b bm33ce@b*)) bm33da@r bm33c3@mr))) (bm2e21@bm2d84@build-let '#f bm33d3@lex* bm33d5@rhs* bm33dd@body)))))) bm33c9@ls/false) (let ((bm33df@t bm33c7@t)) (let ((bm33e1@ls/false (bm30c0@syntax-dispatch bm33df@t '(_ any #(each (any any)) any . each-any)))) (if bm33e1@ls/false (apply (lambda (bm33e3@loop bm33e4@lhs* bm33e5@rhs* bm33e6@b bm33e7@b*) (if (not (bm2ec1@valid-bound-ids? bm33e4@lhs*)) (bm307a@invalid-fmls-error bm33c1@e bm33e4@lhs*) (let ((bm33ed@lex* (map bm2e41@gen-lexical bm33e4@lhs*)) (bm33ee@lab* (map bm2e45@gen-label bm33e4@lhs*)) (bm33ef@rhs* (bm30de@chi-expr* bm33e5@rhs* bm33c2@r bm33c3@mr)) (bm33f0@loop-lex (bm2e41@gen-lexical bm33e3@loop)) (bm33f1@loop-lab (bm2e45@gen-label bm33e3@loop))) (let ((bm33f7@loop-rib (bm2e79@make-full-rib (list bm33e3@loop) (list bm33f1@loop-lab))) (bm33f8@rib (bm2e79@make-full-rib bm33e4@lhs* bm33ee@lab*)) (bm33f9@r (bm3052@add-lexicals (cons bm33f1@loop-lab bm33ee@lab*) (cons bm33f0@loop-lex bm33ed@lex*) bm33c2@r))) (let ((bm33fd@body (bm30f8@chi-internal (bm2ea5@add-subst bm33f7@loop-rib (bm2ea5@add-subst bm33f8@rib (cons bm33e6@b bm33e7@b*))) bm33f9@r bm33c3@mr))) (bm2e22@bm2d86@build-named-let '#f bm33f0@loop-lex bm33ed@lex* bm33ef@rhs* bm33fd@body)))))) bm33e1@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm33df@t))))))))) (set! bm4b61@bm3056@let-transformer bm3056@let-transformer) (set! bm3058@letrec-transformer (lambda (bm33ff@e bm3400@r bm3401@mr) (bm3054@letrec-helper bm33ff@e bm3400@r bm3401@mr bm2e20@bm2d82@build-letrec))) (set! bm4b62@bm3058@letrec-transformer bm3058@letrec-transformer) (set! bm305a@letrec*-transformer (lambda (bm3405@e bm3406@r bm3407@mr) (bm3054@letrec-helper bm3405@e bm3406@r bm3407@mr bm2e23@bm2d88@build-letrec*))) (set! bm4b63@bm305a@letrec*-transformer bm305a@letrec*-transformer) (set! bm305c@fluid-let-syntax-transformer (lambda (bm340b@e bm340c@r bm340d@mr) (letrec* ((bm3412@lookup (lambda (bm3425@x) (or (bm2ecf@id->label bm3425@x) (bm31a0@syntax-violation '#f '"unbound identifier" bm340b@e bm3425@x))))) (let ((bm3413@t bm340b@e)) (let ((bm3415@ls/false (bm30c0@syntax-dispatch bm3413@t '(_ #(each (any any)) any . each-any)))) (if bm3415@ls/false (apply (lambda (bm3417@lhs* bm3418@rhs* bm3419@b bm341a@b*) (if (not (bm2ec1@valid-bound-ids? bm3417@lhs*)) (bm307a@invalid-fmls-error bm340b@e bm3417@lhs*) (let ((bm341f@lab* (map bm3412@lookup bm3417@lhs*)) (bm3420@rhs* (map (lambda (bm3423@x) (bm2ef1@make-eval-transformer (bm311a@expand-transformer bm3423@x bm340d@mr))) bm3418@rhs*))) (bm30f8@chi-internal (cons bm3419@b bm341a@b*) (append (map cons bm341f@lab* bm3420@rhs*) bm340c@r) (append (map cons bm341f@lab* bm3420@rhs*) bm340d@mr))))) bm3415@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3413@t))))))) (set! bm4b64@bm305c@fluid-let-syntax-transformer bm305c@fluid-let-syntax-transformer) (set! bm305e@type-descriptor-transformer (lambda (bm3427@e bm3428@r bm3429@mr) (let ((bm342d@t bm3427@e)) (let ((bm342f@ls/false (bm30c0@syntax-dispatch bm342d@t '(_ any)))) (if (and bm342f@ls/false (apply (lambda (bm3431@id) (bm2eb9@id? bm3431@id)) bm342f@ls/false)) (apply (lambda (bm3433@id) (let ((bm3435@lab (bm2ecf@id->label bm3433@id))) (let ((bm3437@b (bm2ed1@label->binding bm3435@lab bm3428@r))) (let ((bm3439@type (bm2ed5@binding-type bm3437@b))) (begin (if (not bm3435@lab) (bm2ed9@raise-unbound-error bm3433@id) (void)) (if (not (and (eq? bm3439@type '$rtd) (not (list? (bm2ed7@binding-value bm3437@b))))) (bm31a0@syntax-violation '#f '"not a record type" bm3427@e) (void)) (list 'quote (bm2ed7@binding-value bm3437@b))))))) bm342f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm342d@t)))))) (set! bm4b65@bm305e@type-descriptor-transformer bm305e@type-descriptor-transformer) (set! bm3060@record-type-descriptor-transformer (lambda (bm343b@e bm343c@r bm343d@mr) (let ((bm3441@t bm343b@e)) (let ((bm3443@ls/false (bm30c0@syntax-dispatch bm3441@t '(_ any)))) (if (and bm3443@ls/false (apply (lambda (bm3445@id) (bm2eb9@id? bm3445@id)) bm3443@ls/false)) (apply (lambda (bm3447@id) (let ((bm3449@lab (bm2ecf@id->label bm3447@id))) (let ((bm344b@b (bm2ed1@label->binding bm3449@lab bm343c@r))) (let ((bm344d@type (bm2ed5@binding-type bm344b@b))) (begin (if (not bm3449@lab) (bm2ed9@raise-unbound-error bm3447@id) (void)) (if (not (and (eq? bm344d@type '$rtd) (list? (bm2ed7@binding-value bm344b@b)))) (bm31a0@syntax-violation '#f '"not a record type" bm343b@e) (void)) (bm30e2@chi-expr (car (bm2ed7@binding-value bm344b@b)) bm343c@r bm343d@mr)))))) bm3443@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3441@t)))))) (set! bm4b66@bm3060@record-type-descriptor-transformer bm3060@record-type-descriptor-transformer) (set! bm3062@record-constructor-descriptor-transformer (lambda (bm344f@e bm3450@r bm3451@mr) (let ((bm3455@t bm344f@e)) (let ((bm3457@ls/false (bm30c0@syntax-dispatch bm3455@t '(_ any)))) (if (and bm3457@ls/false (apply (lambda (bm3459@id) (bm2eb9@id? bm3459@id)) bm3457@ls/false)) (apply (lambda (bm345b@id) (let ((bm345d@lab (bm2ecf@id->label bm345b@id))) (let ((bm345f@b (bm2ed1@label->binding bm345d@lab bm3450@r))) (let ((bm3461@type (bm2ed5@binding-type bm345f@b))) (begin (if (not bm345d@lab) (bm2ed9@raise-unbound-error bm345b@id) (void)) (if (not (and (eq? bm3461@type '$rtd) (list? (bm2ed7@binding-value bm345f@b)))) (bm31a0@syntax-violation '#f '"invalid type" bm344f@e) (void)) (bm30e2@chi-expr (cadr (bm2ed7@binding-value bm345f@b)) bm3450@r bm3451@mr)))))) bm3457@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3455@t)))))) (set! bm4b67@bm3062@record-constructor-descriptor-transformer bm3062@record-constructor-descriptor-transformer) (set! bm3064@when-macro (lambda (bm3463@e) (let ((bm3465@t bm3463@e)) (let ((bm3467@ls/false (bm30c0@syntax-dispatch bm3465@t '(_ any any . each-any)))) (if bm3467@ls/false (apply (lambda (bm3469@test bm346a@e bm346b@e*) (bm3076@bless (list 'if bm3469@test (cons 'begin (cons bm346a@e bm346b@e*))))) bm3467@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3465@t)))))) (set! bm4b68@bm3064@when-macro bm3064@when-macro) (set! bm3066@unless-macro (lambda (bm346f@e) (let ((bm3471@t bm346f@e)) (let ((bm3473@ls/false (bm30c0@syntax-dispatch bm3471@t '(_ any any . each-any)))) (if bm3473@ls/false (apply (lambda (bm3475@test bm3476@e bm3477@e*) (bm3076@bless (list 'if (list 'not bm3475@test) (cons 'begin (cons bm3476@e bm3477@e*))))) bm3473@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3471@t)))))) (set! bm4b69@bm3066@unless-macro bm3066@unless-macro) (set! bm3068@if-transformer (lambda (bm347b@e bm347c@r bm347d@mr) (let ((bm3481@t bm347b@e)) (let ((bm3483@ls/false (bm30c0@syntax-dispatch bm3481@t '(_ any any any)))) (if bm3483@ls/false (apply (lambda (bm3485@e0 bm3486@e1 bm3487@e2) (list 'if (bm30e2@chi-expr bm3485@e0 bm347c@r bm347d@mr) (bm30e2@chi-expr bm3486@e1 bm347c@r bm347d@mr) (bm30e2@chi-expr bm3487@e2 bm347c@r bm347d@mr))) bm3483@ls/false) (let ((bm348b@t bm3481@t)) (let ((bm348d@ls/false (bm30c0@syntax-dispatch bm348b@t '(_ any any)))) (if bm348d@ls/false (apply (lambda (bm348f@e0 bm3490@e1) (list 'if (bm30e2@chi-expr bm348f@e0 bm347c@r bm347d@mr) (bm30e2@chi-expr bm3490@e1 bm347c@r bm347d@mr) (bm2e1f@bm2d80@build-void))) bm348d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm348b@t))))))))) (set! bm4b6a@bm3068@if-transformer bm3068@if-transformer) (set! bm306a@and-transformer (lambda (bm3493@e bm3494@r bm3495@mr) (let ((bm3499@t bm3493@e)) (let ((bm349b@ls/false (bm30c0@syntax-dispatch bm3499@t '(_ . each-any)))) (if bm349b@ls/false (apply (lambda (bm349d@e*) (cons 'and (bm30de@chi-expr* bm349d@e* bm3494@r bm3495@mr))) bm349b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3499@t)))))) (set! bm4b6b@bm306a@and-transformer bm306a@and-transformer) (set! bm306c@or-transformer (lambda (bm349f@e bm34a0@r bm34a1@mr) (let ((bm34a5@t bm349f@e)) (let ((bm34a7@ls/false (bm30c0@syntax-dispatch bm34a5@t '(_ . each-any)))) (if bm34a7@ls/false (apply (lambda (bm34a9@e*) (cons 'or (bm30de@chi-expr* bm34a9@e* bm34a0@r bm34a1@mr))) bm34a7@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34a5@t)))))) (set! bm4b6c@bm306c@or-transformer bm306c@or-transformer) (set! bm306e@case-macro (lambda (bm34ab@e) (letrec* ((bm34ae@build-last (lambda (bm34d5@cls) (let ((bm34d7@t bm34d5@cls)) (let ((bm34d9@ls/false (bm30c0@syntax-dispatch bm34d7@t '(#(scheme-id else) any . each-any)))) (if bm34d9@ls/false (apply (lambda (bm34db@e bm34dc@e*) (cons 'begin (cons bm34db@e bm34dc@e*))) bm34d9@ls/false) (let ((bm34df@t bm34d7@t)) (let ((bm34e1@ls/false (bm30c0@syntax-dispatch bm34df@t '_))) (if bm34e1@ls/false (apply (lambda () (bm34b0@build-one bm34d5@cls '(if #f #f))) bm34e1@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34df@t))))))))) (bm34b0@build-one (lambda (bm34c7@cls bm34c8@k) (let ((bm34cb@t bm34c7@cls)) (let ((bm34cd@ls/false (bm30c0@syntax-dispatch bm34cb@t '(each-any any . each-any)))) (if bm34cd@ls/false (apply (lambda (bm34cf@d* bm34d0@e bm34d1@e*) (list 'if (list 'memv 't (list 'quote bm34cf@d*)) (cons 'begin (cons bm34d0@e bm34d1@e*)) bm34c8@k)) bm34cd@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34cb@t))))))) (let ((bm34b1@t bm34ab@e)) (let ((bm34b3@ls/false (bm30c0@syntax-dispatch bm34b1@t '(_ any)))) (if bm34b3@ls/false (apply (lambda (bm34b5@expr) (bm3076@bless (cons 'let (cons (list (list 't bm34b5@expr)) '((if #f #f)))))) bm34b3@ls/false) (let ((bm34b7@t bm34b1@t)) (let ((bm34b9@ls/false (bm30c0@syntax-dispatch bm34b7@t '(_ any any . each-any)))) (if bm34b9@ls/false (apply (lambda (bm34bb@expr bm34bc@cls bm34bd@cls*) (bm3076@bless (list 'let (list (list 't bm34bb@expr)) (let bm34c5@f ((bm34c1@cls bm34bc@cls) (bm34c2@cls* bm34bd@cls*)) (if (null? bm34c2@cls*) (bm34ae@build-last bm34c1@cls) (bm34b0@build-one bm34c1@cls (bm34c5@f (car bm34c2@cls*) (cdr bm34c2@cls*)))))))) bm34b9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34b7@t)))))))))) (set! bm4b6d@bm306e@case-macro bm306e@case-macro) (set! bm3070@quote-transformer (lambda (bm34e3@e bm34e4@r bm34e5@mr) (let ((bm34e9@t bm34e3@e)) (let ((bm34eb@ls/false (bm30c0@syntax-dispatch bm34e9@t '(_ any)))) (if bm34eb@ls/false (apply (lambda (bm34ed@datum) (list 'quote (bm2ecd@stx->datum bm34ed@datum))) bm34eb@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34e9@t)))))) (set! bm4b6e@bm3070@quote-transformer bm3070@quote-transformer) (set! bm3072@case-lambda-transformer (lambda (bm34ef@e bm34f0@r bm34f1@mr) (let ((bm34f5@t bm34ef@e)) (let ((bm34f7@ls/false (bm30c0@syntax-dispatch bm34f5@t '(_ . #(each (any any . each-any)))))) (if bm34f7@ls/false (apply (lambda (bm34f9@fmls* bm34fa@b* bm34fb@b**) (call-with-values (lambda () (bm30ea@chi-lambda-clause* bm34ef@e bm34f9@fmls* (map cons bm34fa@b* bm34fb@b**) bm34f0@r bm34f1@mr)) (lambda (bm3503@bm3500 bm3504@bm3502) (let ((bm3507@body* bm3504@bm3502) (bm3508@fmls* bm3503@bm3500)) (bm2e1d@bm2d50@build-case-lambda '#f bm3508@fmls* bm3507@body*))))) bm34f7@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm34f5@t)))))) (set! bm4b6f@bm3072@case-lambda-transformer bm3072@case-lambda-transformer) (set! bm3074@lambda-transformer (lambda (bm350b@e bm350c@r bm350d@mr) (let ((bm3511@t bm350b@e)) (let ((bm3513@ls/false (bm30c0@syntax-dispatch bm3511@t '(_ any any . each-any)))) (if bm3513@ls/false (apply (lambda (bm3515@fmls bm3516@b bm3517@b*) (call-with-values (lambda () (bm30e8@chi-lambda-clause bm350b@e bm3515@fmls (cons bm3516@b bm3517@b*) bm350c@r bm350d@mr)) (lambda (bm351f@bm351c bm3520@bm351e) (let ((bm3523@body bm3520@bm351e) (bm3524@fmls bm351f@bm351c)) (bm2e1c@bm2d4e@build-lambda '#f bm3524@fmls bm3523@body))))) bm3513@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3511@t)))))) (set! bm4b70@bm3074@lambda-transformer bm3074@lambda-transformer) (set! bm3076@bless (lambda (bm3527@x) (bm2ea1@mkstx (let bm352b@f ((bm3529@x bm3527@x)) (if (bm2e85@stx? bm3529@x) bm3529@x (if (pair? bm3529@x) (cons (bm352b@f (car bm3529@x)) (bm352b@f (cdr bm3529@x))) (if (symbol? bm3529@x) (bm3048@scheme-stx bm3529@x) (if (vector? bm3529@x) (vector-map bm352b@f bm3529@x) bm3529@x))))) '() '() '()))) (set! bm4b71@bm3076@bless bm3076@bless) (set! bm3078@with-syntax-macro (lambda (bm352d@e) (let ((bm352f@t bm352d@e)) (let ((bm3531@ls/false (bm30c0@syntax-dispatch bm352f@t '(_ #(each (any any)) any . each-any)))) (if bm3531@ls/false (apply (lambda (bm3533@pat* bm3534@expr* bm3535@b bm3536@b*) (let ((bm353b@idn* (let bm353f@f ((bm353d@pat* bm3533@pat*)) (if (null? bm353d@pat*) '() (call-with-values (lambda () (bm30be@convert-pattern (car bm353d@pat*) '())) (lambda (bm3545@bm3542 bm3546@bm3544) (let ((bm3549@idn* bm3546@bm3544) (bm354a@pat bm3545@bm3542)) (append bm3549@idn* (bm353f@f (cdr bm353d@pat*)))))))))) (begin (bm30e6@verify-formals (map car bm353b@idn*) bm352d@e) (let ((bm354d@t* (bm318e@generate-temporaries bm3534@expr*))) (bm3076@bless (list 'let (map list bm354d@t* bm3534@expr*) (let bm3553@f ((bm354f@pat* bm3533@pat*) (bm3550@t* bm354d@t*)) (if (null? bm354f@pat*) (cons 'begin (cons '#f (cons bm3535@b bm3536@b*))) (list 'syntax-case (car bm3550@t*) '() (list (car bm354f@pat*) (bm3553@f (cdr bm354f@pat*) (cdr bm3550@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bm354f@pat*)) (car bm3550@t*)))))))))))) bm3531@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm352f@t)))))) (set! bm4b72@bm3078@with-syntax-macro bm3078@with-syntax-macro) (set! bm307a@invalid-fmls-error (lambda (bm3555@stx bm3556@fmls) (let ((bm3559@t bm3556@fmls)) (let ((bm355b@ls/false (bm30c0@syntax-dispatch bm3559@t '#(each+ any () any)))) (if bm355b@ls/false (apply (lambda (bm355d@id* bm355e@last) (let bm3563@f ((bm3561@id* (if (bm2eb9@id? bm355e@last) (cons bm355e@last bm355d@id*) (if (bm2eaf@syntax-null? bm355e@last) bm355d@id* (bm31a0@syntax-violation '#f '"not an identifier" bm3555@stx bm355e@last))))) (if (null? bm3561@id*) (values) (if (not (bm2eb9@id? (car bm3561@id*))) (bm31a0@syntax-violation '#f '"not an identifier" bm3555@stx (car bm3561@id*)) (begin (bm3563@f (cdr bm3561@id*)) (if (bm2ec5@bound-id-member? (car bm3561@id*) (cdr bm3561@id*)) (bm31a0@syntax-violation '#f '"duplicate binding" bm3555@stx (car bm3561@id*)) (void))))))) bm355b@ls/false) (let ((bm3565@t bm3559@t)) (let ((bm3567@ls/false (bm30c0@syntax-dispatch bm3565@t '_))) (if bm3567@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"malformed binding form" bm3555@stx bm3556@fmls)) bm3567@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3565@t))))))))) (set! bm4b73@bm307a@invalid-fmls-error bm307a@invalid-fmls-error) (set! bm307c@let-macro (lambda (bm3569@stx) (let ((bm356b@t bm3569@stx)) (let ((bm356d@ls/false (bm30c0@syntax-dispatch bm356b@t '(_ #(each (any any)) any . each-any)))) (if bm356d@ls/false (apply (lambda (bm356f@lhs* bm3570@rhs* bm3571@b bm3572@b*) (if (bm2ec1@valid-bound-ids? bm356f@lhs*) (bm3076@bless (cons (cons 'lambda (cons bm356f@lhs* (cons bm3571@b bm3572@b*))) bm3570@rhs*)) (bm307a@invalid-fmls-error bm3569@stx bm356f@lhs*))) bm356d@ls/false) (let ((bm3577@t bm356b@t)) (let ((bm3579@ls/false (bm30c0@syntax-dispatch bm3577@t '(_ any #(each (any any)) any . each-any)))) (if (and bm3579@ls/false (apply (lambda (bm357b@f bm357c@lhs* bm357d@rhs* bm357e@b bm357f@b*) (bm2eb9@id? bm357b@f)) bm3579@ls/false)) (apply (lambda (bm3585@f bm3586@lhs* bm3587@rhs* bm3588@b bm3589@b*) (if (bm2ec1@valid-bound-ids? bm3586@lhs*) (bm3076@bless (cons (list 'letrec (list (list bm3585@f (cons 'lambda (cons bm3586@lhs* (cons bm3588@b bm3589@b*))))) bm3585@f) bm3587@rhs*)) (bm307a@invalid-fmls-error bm3569@stx bm3586@lhs*))) bm3579@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3577@t))))))))) (set! bm4b74@bm307c@let-macro bm307c@let-macro) (set! bm307e@let-values-macro (lambda (bm358f@stx) (letrec* ((bm3592@rename (lambda (bm35f7@x bm35f8@old* bm35f9@new*) (begin (if (not (bm2eb9@id? bm35f7@x)) (bm31a0@syntax-violation '#f '"not an indentifier" bm358f@stx bm35f7@x) (void)) (if (bm2ec5@bound-id-member? bm35f7@x bm35f8@old*) (bm31a0@syntax-violation '#f '"duplicate binding" bm358f@stx bm35f7@x) (void)) (let ((bm35fd@y (gensym (bm31a6@syntax->datum bm35f7@x)))) (values bm35fd@y (cons bm35f7@x bm35f8@old*) (cons bm35fd@y bm35f9@new*)))))) (bm3594@rename* (lambda (bm35e5@x* bm35e6@old* bm35e7@new*) (if (null? bm35e5@x*) (values '() bm35e6@old* bm35e7@new*) (call-with-values (lambda () (bm3592@rename (car bm35e5@x*) bm35e6@old* bm35e7@new*)) (lambda (bm35eb@x bm35ec@old* bm35ed@new*) (call-with-values (lambda () (bm3594@rename* (cdr bm35e5@x*) bm35ec@old* bm35ed@new*)) (lambda (bm35f1@x* bm35f2@old* bm35f3@new*) (values (cons bm35eb@x bm35f1@x*) bm35f2@old* bm35f3@new*))))))))) (let ((bm3595@t bm358f@stx)) (let ((bm3597@ls/false (bm30c0@syntax-dispatch bm3595@t '(_ () any . each-any)))) (if bm3597@ls/false (apply (lambda (bm3599@b bm359a@b*) (cons* (bm3076@bless 'let) '() bm3599@b bm359a@b*)) bm3597@ls/false) (let ((bm359d@t bm3595@t)) (let ((bm359f@ls/false (bm30c0@syntax-dispatch bm359d@t '(_ #(each (any any)) any . each-any)))) (if bm359f@ls/false (apply (lambda (bm35a1@lhs* bm35a2@rhs* bm35a3@b bm35a4@b*) (bm3076@bless (let bm35b1@f ((bm35a9@lhs* bm35a1@lhs*) (bm35aa@rhs* bm35a2@rhs*) (bm35ab@old* '()) (bm35ac@new* '())) (if (null? bm35a9@lhs*) (cons 'let (cons (map list bm35ab@old* bm35ac@new*) (cons bm35a3@b bm35a4@b*))) (let ((bm35b3@t (car bm35a9@lhs*))) (let ((bm35b5@ls/false (bm30c0@syntax-dispatch bm35b3@t 'each-any))) (if bm35b5@ls/false (apply (lambda (bm35b7@x*) (call-with-values (lambda () (bm3594@rename* bm35b7@x* bm35ab@old* bm35ac@new*)) (lambda (bm35bf@bm35ba bm35c0@bm35bc bm35c1@bm35be) (let ((bm35c5@new* bm35c1@bm35be) (bm35c6@old* bm35c0@bm35bc) (bm35c7@y* bm35bf@bm35ba)) (list 'call-with-values (list 'lambda '() (car bm35aa@rhs*)) (list 'lambda bm35c7@y* (bm35b1@f (cdr bm35a9@lhs*) (cdr bm35aa@rhs*) bm35c6@old* bm35c5@new*))))))) bm35b5@ls/false) (let ((bm35cb@t bm35b3@t)) (let ((bm35cd@ls/false (bm30c0@syntax-dispatch bm35cb@t '#(each+ any () any)))) (if bm35cd@ls/false (apply (lambda (bm35cf@x* bm35d0@x) (call-with-values (lambda () (bm3592@rename bm35d0@x bm35ab@old* bm35ac@new*)) (lambda (bm35d3@y bm35d4@old* bm35d5@new*) (call-with-values (lambda () (bm3594@rename* bm35cf@x* bm35d4@old* bm35d5@new*)) (lambda (bm35d9@y* bm35da@old* bm35db@new*) (list 'call-with-values (list 'lambda '() (car bm35aa@rhs*)) (list 'lambda (append bm35d9@y* bm35d3@y) (bm35b1@f (cdr bm35a9@lhs*) (cdr bm35aa@rhs*) bm35da@old* bm35db@new*)))))))) bm35cd@ls/false) (let ((bm35df@t bm35cb@t)) (let ((bm35e1@ls/false (bm30c0@syntax-dispatch bm35df@t 'any))) (if bm35e1@ls/false (apply (lambda (bm35e3@others) (bm31a0@syntax-violation '#f '"malformed bindings" bm358f@stx bm35e3@others)) bm35e1@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm35df@t)))))))))))))) bm359f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm359d@t)))))))))) (set! bm4b75@bm307e@let-values-macro bm307e@let-values-macro) (set! bm3080@let*-values-macro (lambda (bm35ff@stx) (letrec* ((bm3602@check (lambda (bm3631@x*) (if (not (null? bm3631@x*)) (let ((bm3633@x (car bm3631@x*))) (begin (if (not (bm2eb9@id? bm3633@x)) (bm31a0@syntax-violation '#f '"not an identifier" bm35ff@stx bm3633@x) (void)) (bm3602@check (cdr bm3631@x*)) (if (bm2ec5@bound-id-member? bm3633@x (cdr bm3631@x*)) (bm31a0@syntax-violation '#f '"duplicate identifier" bm35ff@stx bm3633@x) (void)))) (void))))) (let ((bm3603@t bm35ff@stx)) (let ((bm3605@ls/false (bm30c0@syntax-dispatch bm3603@t '(_ () any . each-any)))) (if bm3605@ls/false (apply (lambda (bm3607@b bm3608@b*) (cons* (bm3076@bless 'let) '() bm3607@b bm3608@b*)) bm3605@ls/false) (let ((bm360b@t bm3603@t)) (let ((bm360d@ls/false (bm30c0@syntax-dispatch bm360b@t '(_ #(each (any any)) any . each-any)))) (if bm360d@ls/false (apply (lambda (bm360f@lhs* bm3610@rhs* bm3611@b bm3612@b*) (bm3076@bless (let bm361b@f ((bm3617@lhs* bm360f@lhs*) (bm3618@rhs* bm3610@rhs*)) (if (null? bm3617@lhs*) (cons 'begin (cons bm3611@b bm3612@b*)) (let ((bm361d@t (car bm3617@lhs*))) (let ((bm361f@ls/false (bm30c0@syntax-dispatch bm361d@t 'each-any))) (if bm361f@ls/false (apply (lambda (bm3621@x*) (begin (bm3602@check bm3621@x*) (list 'call-with-values (list 'lambda '() (car bm3618@rhs*)) (list 'lambda bm3621@x* (bm361b@f (cdr bm3617@lhs*) (cdr bm3618@rhs*)))))) bm361f@ls/false) (let ((bm3623@t bm361d@t)) (let ((bm3625@ls/false (bm30c0@syntax-dispatch bm3623@t '#(each+ any () any)))) (if bm3625@ls/false (apply (lambda (bm3627@x* bm3628@x) (begin (bm3602@check (cons bm3628@x bm3627@x*)) (list 'call-with-values (list 'lambda '() (car bm3618@rhs*)) (list 'lambda (append bm3627@x* bm3628@x) (bm361b@f (cdr bm3617@lhs*) (cdr bm3618@rhs*)))))) bm3625@ls/false) (let ((bm362b@t bm3623@t)) (let ((bm362d@ls/false (bm30c0@syntax-dispatch bm362b@t 'any))) (if bm362d@ls/false (apply (lambda (bm362f@others) (bm31a0@syntax-violation '#f '"malformed bindings" bm35ff@stx bm362f@others)) bm362d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm362b@t)))))))))))))) bm360d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm360b@t)))))))))) (set! bm4b76@bm3080@let*-values-macro bm3080@let*-values-macro) (set! bm3082@trace-lambda-macro (lambda (bm3635@stx) (let ((bm3637@t bm3635@stx)) (let ((bm3639@ls/false (bm30c0@syntax-dispatch bm3637@t '(_ any each-any any . each-any)))) (if bm3639@ls/false (apply (lambda (bm363b@who bm363c@fmls bm363d@b bm363e@b*) (if (bm2ec1@valid-bound-ids? bm363c@fmls) (bm3076@bless (list 'make-traced-procedure (list 'quote bm363b@who) (cons 'lambda (cons bm363c@fmls (cons bm363d@b bm363e@b*))))) (bm307a@invalid-fmls-error bm3635@stx bm363c@fmls))) bm3639@ls/false) (let ((bm3643@t bm3637@t)) (let ((bm3645@ls/false (bm30c0@syntax-dispatch bm3643@t '(_ any #(each+ any () any) any . each-any)))) (if bm3645@ls/false (apply (lambda (bm3647@who bm3648@fmls bm3649@last bm364a@b bm364b@b*) (if (bm2ec1@valid-bound-ids? (cons bm3649@last bm3648@fmls)) (bm3076@bless (list 'make-traced-procedure (list 'quote bm3647@who) (cons 'lambda (cons (append bm3648@fmls bm3649@last) (cons bm364a@b bm364b@b*))))) (bm307a@invalid-fmls-error bm3635@stx (append bm3648@fmls bm3649@last)))) bm3645@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3643@t))))))))) (set! bm4b77@bm3082@trace-lambda-macro bm3082@trace-lambda-macro) (set! bm3084@trace-define-macro (lambda (bm3651@stx) (let ((bm3653@t bm3651@stx)) (let ((bm3655@ls/false (bm30c0@syntax-dispatch bm3653@t '(_ (any . each-any) any . each-any)))) (if bm3655@ls/false (apply (lambda (bm3657@who bm3658@fmls bm3659@b bm365a@b*) (if (bm2ec1@valid-bound-ids? bm3658@fmls) (bm3076@bless (list 'define bm3657@who (list 'make-traced-procedure (list 'quote bm3657@who) (cons 'lambda (cons bm3658@fmls (cons bm3659@b bm365a@b*)))))) (bm307a@invalid-fmls-error bm3651@stx bm3658@fmls))) bm3655@ls/false) (let ((bm365f@t bm3653@t)) (let ((bm3661@ls/false (bm30c0@syntax-dispatch bm365f@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bm3661@ls/false (apply (lambda (bm3663@who bm3664@fmls bm3665@last bm3666@b bm3667@b*) (if (bm2ec1@valid-bound-ids? (cons bm3665@last bm3664@fmls)) (bm3076@bless (list 'define bm3663@who (list 'make-traced-procedure (list 'quote bm3663@who) (cons 'lambda (cons (append bm3664@fmls bm3665@last) (cons bm3666@b bm3667@b*)))))) (bm307a@invalid-fmls-error bm3651@stx (append bm3664@fmls bm3665@last)))) bm3661@ls/false) (let ((bm366d@t bm365f@t)) (let ((bm366f@ls/false (bm30c0@syntax-dispatch bm366d@t '(_ any any)))) (if bm366f@ls/false (apply (lambda (bm3671@who bm3672@expr) (if (bm2eb9@id? bm3671@who) (bm3076@bless (list 'define bm3671@who (list 'let (list (list 'v bm3672@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bm3671@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bm31a0@syntax-violation '#f '"invalid name" bm3651@stx))) bm366f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm366d@t)))))))))))) (set! bm4b78@bm3084@trace-define-macro bm3084@trace-define-macro) (set! bm3086@trace-define-syntax-macro (lambda (bm3675@stx) (let ((bm3677@t bm3675@stx)) (let ((bm3679@ls/false (bm30c0@syntax-dispatch bm3677@t '(_ any any)))) (if bm3679@ls/false (apply (lambda (bm367b@who bm367c@expr) (if (bm2eb9@id? bm367b@who) (bm3076@bless (list 'define-syntax bm367b@who (list 'make-traced-macro (list 'quote bm367b@who) bm367c@expr))) (bm31a0@syntax-violation '#f '"invalid name" bm3675@stx))) bm3679@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3677@t)))))) (set! bm4b79@bm3086@trace-define-syntax-macro bm3086@trace-define-syntax-macro) (set! bm3088@trace-let/rec-syntax (lambda (bm367f@who) (lambda (bm3681@stx) (let ((bm3683@t bm3681@stx)) (let ((bm3685@ls/false (bm30c0@syntax-dispatch bm3683@t '(_ #(each (any any)) any . each-any)))) (if bm3685@ls/false (apply (lambda (bm3687@lhs* bm3688@rhs* bm3689@b bm368a@b*) (if (bm2ec1@valid-bound-ids? bm3687@lhs*) (let ((bm368f@rhs* (map (lambda (bm3691@lhs bm3692@rhs) (list 'make-traced-macro (list 'quote bm3691@lhs) bm3692@rhs)) bm3687@lhs* bm3688@rhs*))) (bm3076@bless (cons bm367f@who (cons (map list bm3687@lhs* bm368f@rhs*) (cons bm3689@b bm368a@b*))))) (bm307a@invalid-fmls-error bm3681@stx bm3687@lhs*))) bm3685@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3683@t))))))) (set! bm4b7a@bm3088@trace-let/rec-syntax bm3088@trace-let/rec-syntax) (set! bm308a@trace-let-syntax-macro (bm3088@trace-let/rec-syntax 'let-syntax)) (set! bm4b7b@bm308a@trace-let-syntax-macro bm308a@trace-let-syntax-macro) (set! bm308c@trace-letrec-syntax-macro (bm3088@trace-let/rec-syntax 'letrec-syntax)) (set! bm4b7c@bm308c@trace-letrec-syntax-macro bm308c@trace-letrec-syntax-macro) (set! bm308e@guard-macro (lambda (bm3695@x) (letrec* ((bm3698@gen-clauses (lambda (bm36af@con bm36b0@outerk bm36b1@clause*) (letrec* ((bm36b6@f (lambda (bm36ef@x bm36f0@k) (let ((bm36f3@t bm36ef@x)) (let ((bm36f5@ls/false (bm30c0@syntax-dispatch bm36f3@t '(any #(scheme-id =>) any)))) (if bm36f5@ls/false (apply (lambda (bm36f7@e bm36f8@p) (let ((bm36fb@t (gensym))) (list 'let (list (list bm36fb@t bm36f7@e)) (list 'if bm36fb@t (list bm36f8@p bm36fb@t) bm36f0@k)))) bm36f5@ls/false) (let ((bm36fd@t bm36f3@t)) (let ((bm36ff@ls/false (bm30c0@syntax-dispatch bm36fd@t '(any)))) (if bm36ff@ls/false (apply (lambda (bm3701@e) (let ((bm3703@t (gensym))) (list 'let (list (list bm3703@t bm3701@e)) (list 'if bm3703@t bm3703@t bm36f0@k)))) bm36ff@ls/false) (let ((bm3705@t bm36fd@t)) (let ((bm3707@ls/false (bm30c0@syntax-dispatch bm3705@t '(any any . each-any)))) (if bm3707@ls/false (apply (lambda (bm3709@e bm370a@v bm370b@v*) (list 'if bm3709@e (cons 'begin (cons bm370a@v bm370b@v*)) bm36f0@k)) bm3707@ls/false) (let ((bm370f@t bm3705@t)) (let ((bm3711@ls/false (bm30c0@syntax-dispatch bm370f@t '_))) (if bm3711@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid guard clause" bm36ef@x)) bm3711@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm370f@t))))))))))))))) (bm36b8@f* (lambda (bm36c5@x*) (let ((bm36c7@t bm36c5@x*)) (let ((bm36c9@ls/false (bm30c0@syntax-dispatch bm36c7@t '()))) (if bm36c9@ls/false (apply (lambda () (let ((bm36cb@g (gensym))) (values (list bm36cb@g (list 'lambda '() (list 'raise-continuable bm36af@con))) bm36cb@g))) bm36c9@ls/false) (let ((bm36cd@t bm36c7@t)) (let ((bm36cf@ls/false (bm30c0@syntax-dispatch bm36cd@t '((#(scheme-id else) any . each-any))))) (if bm36cf@ls/false (apply (lambda (bm36d1@e bm36d2@e*) (values (cons 'begin (cons bm36d1@e bm36d2@e*)) '#f)) bm36cf@ls/false) (let ((bm36d5@t bm36cd@t)) (let ((bm36d7@ls/false (bm30c0@syntax-dispatch bm36d5@t '(any . any)))) (if bm36d7@ls/false (apply (lambda (bm36d9@cls bm36da@cls*) (call-with-values (lambda () (bm36b8@f* bm36da@cls*)) (lambda (bm36e1@bm36de bm36e2@bm36e0) (let ((bm36e5@g bm36e2@bm36e0) (bm36e6@e bm36e1@bm36de)) (values (bm36b6@f bm36d9@cls bm36e6@e) bm36e5@g))))) bm36d7@ls/false) (let ((bm36e9@t bm36d5@t)) (let ((bm36eb@ls/false (bm30c0@syntax-dispatch bm36e9@t 'any))) (if bm36eb@ls/false (apply (lambda (bm36ed@others) (bm31a0@syntax-violation '#f '"invalid guard clause" bm36ed@others)) bm36eb@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm36e9@t)))))))))))))))) (call-with-values (lambda () (bm36b8@f* bm36b1@clause*)) (lambda (bm36bd@bm36ba bm36be@bm36bc) (let ((bm36c1@raisek bm36be@bm36bc) (bm36c2@code bm36bd@bm36ba)) (if bm36c1@raisek (list (list 'call/cc (list 'lambda (list bm36c1@raisek) (list bm36b0@outerk (list 'lambda '() bm36c2@code))))) (list bm36b0@outerk (list 'lambda '() bm36c2@code)))))))))) (let ((bm3699@t bm3695@x)) (let ((bm369b@ls/false (bm30c0@syntax-dispatch bm3699@t '(_ (any . each-any) any . each-any)))) (if (and bm369b@ls/false (apply (lambda (bm369d@con bm369e@clause* bm369f@b bm36a0@b*) (bm2eb9@id? bm369d@con)) bm369b@ls/false)) (apply (lambda (bm36a5@con bm36a6@clause* bm36a7@b bm36a8@b*) (let ((bm36ad@outerk (gensym))) (bm3076@bless (list (list 'call/cc (list 'lambda (list bm36ad@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bm36a5@con) (bm3698@gen-clauses bm36a5@con bm36ad@outerk bm36a6@clause*)) (cons 'lambda (cons '() (cons bm36a7@b bm36a8@b*))))))))))) bm369b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3699@t))))))) (set! bm4b7d@bm308e@guard-macro bm308e@guard-macro) (set! bm3090@define-enumeration-macro (lambda (bm3713@stx) (letrec* ((bm3716@set? (lambda (bm372f@x) (or (null? bm372f@x) (and (not (memq (car bm372f@x) (cdr bm372f@x))) (bm3716@set? (cdr bm372f@x)))))) (bm3718@remove-dups (lambda (bm372d@ls) (if (null? bm372d@ls) '() (cons (car bm372d@ls) (bm3718@remove-dups (remq (car bm372d@ls) (cdr bm372d@ls)))))))) (let ((bm3719@t bm3713@stx)) (let ((bm371b@ls/false (bm30c0@syntax-dispatch bm3719@t '(_ any each-any any)))) (if (and bm371b@ls/false (apply (lambda (bm371d@name bm371e@id* bm371f@maker) (and (bm2eb9@id? bm371d@name) (bm2eb9@id? bm371f@maker) (for-all bm2eb9@id? bm371e@id*))) bm371b@ls/false)) (apply (lambda (bm3723@name bm3724@id* bm3725@maker) (let ((bm3729@name* (bm3718@remove-dups (bm31a6@syntax->datum bm3724@id*))) (bm372a@mk (gensym))) (bm3076@bless (list 'begin (list 'define bm372a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bm3729@name*)))) (list 'define-syntax bm3723@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bm3729@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bm3723@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bm3725@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bm3725@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bm3729@name*)) (cons 'syntax-violation (cons (list 'quote bm3725@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bm372a@mk '('(n* ...))))))))))))) bm371b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3719@t))))))) (set! bm4b7e@bm3090@define-enumeration-macro bm3090@define-enumeration-macro) (set! bm3092@time-macro (lambda (bm3731@stx) (let ((bm3733@t bm3731@stx)) (let ((bm3735@ls/false (bm30c0@syntax-dispatch bm3733@t '(_ any)))) (if bm3735@ls/false (apply (lambda (bm3737@expr) (bm3076@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bm3737@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bm3735@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3733@t)))))) (set! bm4b7f@bm3092@time-macro bm3092@time-macro) (set! bm3094@delay-macro (lambda (bm3739@stx) (let ((bm373b@t bm3739@stx)) (let ((bm373d@ls/false (bm30c0@syntax-dispatch bm373b@t '(_ any)))) (if bm373d@ls/false (apply (lambda (bm373f@expr) (bm3076@bless (list 'make-promise (list 'lambda '() bm373f@expr)))) bm373d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm373b@t)))))) (set! bm4b80@bm3094@delay-macro bm3094@delay-macro) (set! bm3096@assert-macro (lambda (bm3741@stx) (let ((bm3743@t bm3741@stx)) (let ((bm3745@ls/false (bm30c0@syntax-dispatch bm3743@t '(_ any)))) (if bm3745@ls/false (apply (lambda (bm3747@expr) (let ((bm3749@pos (or (bm3198@expression-position bm3741@stx) (bm3198@expression-position bm3747@expr)))) (bm3076@bless (list 'let (list (list 'x bm3747@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote bm3747@expr) (list 'quote bm3749@pos))))))) bm3745@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3743@t)))))) (set! bm4b81@bm3096@assert-macro bm3096@assert-macro) (set! bm3098@endianness-macro (lambda (bm374b@stx) (let ((bm374d@t bm374b@stx)) (let ((bm374f@ls/false (bm30c0@syntax-dispatch bm374d@t '(_ any)))) (if bm374f@ls/false (apply (lambda (bm3751@e) (let ((bm3753@t (bm31a6@syntax->datum bm3751@e))) (if (memv bm3753@t '(little)) (bm3076@bless ''little) (if (memv bm3753@t '(big)) (bm3076@bless ''big) (bm31a0@syntax-violation '#f '"endianness must be big or little" bm374b@stx))))) bm374f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm374d@t)))))) (set! bm4b82@bm3098@endianness-macro bm3098@endianness-macro) (set! bm309a@identifier-syntax-macro (lambda (bm3755@stx) (let ((bm3757@t bm3755@stx)) (let ((bm3759@ls/false (bm30c0@syntax-dispatch bm3757@t '(_ any)))) (if bm3759@ls/false (apply (lambda (bm375b@expr) (bm3076@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bm375b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bm375b@expr) '((syntax (e* ...)))))))))) bm3759@ls/false) (let ((bm375d@t bm3757@t)) (let ((bm375f@ls/false (bm30c0@syntax-dispatch bm375d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bm375f@ls/false (apply (lambda (bm3761@id1 bm3762@expr1 bm3763@id2 bm3764@expr2 bm3765@expr3) (and (bm2eb9@id? bm3761@id1) (bm2eb9@id? bm3763@id2) (bm2eb9@id? bm3764@expr2))) bm375f@ls/false)) (apply (lambda (bm376b@id1 bm376c@expr1 bm376d@id2 bm376e@expr2 bm376f@expr3) (bm3076@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bm376c@expr1)) (list (list 'set! 'id bm376e@expr2) (list 'syntax bm376f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bm376c@expr1 '(e* ...))))))))) bm375f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm375d@t))))))))) (set! bm4b83@bm309a@identifier-syntax-macro bm309a@identifier-syntax-macro) (set! bm309c@do-macro (lambda (bm3775@stx) (letrec* ((bm3778@bind (lambda (bm378f@x) (let ((bm3791@t bm378f@x)) (let ((bm3793@ls/false (bm30c0@syntax-dispatch bm3791@t '(any any)))) (if bm3793@ls/false (apply (lambda (bm3795@x bm3796@init) (list bm3795@x bm3796@init bm3795@x)) bm3793@ls/false) (let ((bm3799@t bm3791@t)) (let ((bm379b@ls/false (bm30c0@syntax-dispatch bm3799@t '(any any any)))) (if bm379b@ls/false (apply (lambda (bm379d@x bm379e@init bm379f@step) (list bm379d@x bm379e@init bm379f@step)) bm379b@ls/false) (let ((bm37a3@t bm3799@t)) (let ((bm37a5@ls/false (bm30c0@syntax-dispatch bm37a3@t '_))) (if bm37a5@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid binding" bm3775@stx)) bm37a5@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm37a3@t))))))))))))) (let ((bm3779@t bm3775@stx)) (let ((bm377b@ls/false (bm30c0@syntax-dispatch bm3779@t '(_ each-any (any . each-any) . each-any)))) (if bm377b@ls/false (apply (lambda (bm377d@binding* bm377e@test bm377f@expr* bm3780@command*) (let ((bm3785@t (map bm3778@bind bm377d@binding*))) (let ((bm3787@ls/false (bm30c0@syntax-dispatch bm3785@t '#(each (any any any))))) (if bm3787@ls/false (apply (lambda (bm3789@x* bm378a@init* bm378b@step*) (if (bm2ec1@valid-bound-ids? bm3789@x*) (bm3076@bless (list 'letrec (list (list 'loop (list 'lambda bm3789@x* (list 'if bm377e@test (cons 'begin (cons '(if #f #f) bm377f@expr*)) (cons 'begin (append bm3780@command* (list (cons 'loop bm378b@step*)))))))) (cons 'loop bm378a@init*))) (bm31a0@syntax-violation '#f '"invalid bindings" bm3775@stx))) bm3787@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3785@t))))) bm377b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3779@t))))))) (set! bm4b84@bm309c@do-macro bm309c@do-macro) (set! bm309e@let*-macro (lambda (bm37a7@stx) (let ((bm37a9@t bm37a7@stx)) (let ((bm37ab@ls/false (bm30c0@syntax-dispatch bm37a9@t '(_ #(each (any any)) any . each-any)))) (if (and bm37ab@ls/false (apply (lambda (bm37ad@lhs* bm37ae@rhs* bm37af@b bm37b0@b*) (for-all bm2eb9@id? bm37ad@lhs*)) bm37ab@ls/false)) (apply (lambda (bm37b5@lhs* bm37b6@rhs* bm37b7@b bm37b8@b*) (bm3076@bless (let bm37bf@f ((bm37bd@x* (map list bm37b5@lhs* bm37b6@rhs*))) (if (null? bm37bd@x*) (cons 'let (cons '() (cons bm37b7@b bm37b8@b*))) (list 'let (list (car bm37bd@x*)) (bm37bf@f (cdr bm37bd@x*))))))) bm37ab@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm37a9@t)))))) (set! bm4b85@bm309e@let*-macro bm309e@let*-macro) (set! bm30a0@or-macro (lambda (bm37c1@stx) (let ((bm37c3@t bm37c1@stx)) (let ((bm37c5@ls/false (bm30c0@syntax-dispatch bm37c3@t '(_)))) (if bm37c5@ls/false (apply (lambda () '#f) bm37c5@ls/false) (let ((bm37c7@t bm37c3@t)) (let ((bm37c9@ls/false (bm30c0@syntax-dispatch bm37c7@t '(_ any . each-any)))) (if bm37c9@ls/false (apply (lambda (bm37cb@e bm37cc@e*) (bm3076@bless (let bm37d3@f ((bm37cf@e bm37cb@e) (bm37d0@e* bm37cc@e*)) (if (null? bm37d0@e*) (list 'begin '#f bm37cf@e) (list 'let (list (list 't bm37cf@e)) (list 'if 't 't (bm37d3@f (car bm37d0@e*) (cdr bm37d0@e*)))))))) bm37c9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm37c7@t))))))))) (set! bm4b86@bm30a0@or-macro bm30a0@or-macro) (set! bm30a2@and-macro (lambda (bm37d5@stx) (let ((bm37d7@t bm37d5@stx)) (let ((bm37d9@ls/false (bm30c0@syntax-dispatch bm37d7@t '(_)))) (if bm37d9@ls/false (apply (lambda () '#t) bm37d9@ls/false) (let ((bm37db@t bm37d7@t)) (let ((bm37dd@ls/false (bm30c0@syntax-dispatch bm37db@t '(_ any . each-any)))) (if bm37dd@ls/false (apply (lambda (bm37df@e bm37e0@e*) (bm3076@bless (let bm37e7@f ((bm37e3@e bm37df@e) (bm37e4@e* bm37e0@e*)) (if (null? bm37e4@e*) (list 'begin '#f bm37e3@e) (cons 'if (cons bm37e3@e (cons (bm37e7@f (car bm37e4@e*) (cdr bm37e4@e*)) '(#f)))))))) bm37dd@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm37db@t))))))))) (set! bm4b87@bm30a2@and-macro bm30a2@and-macro) (set! bm30a4@cond-macro (lambda (bm37e9@stx) (let ((bm37eb@t bm37e9@stx)) (let ((bm37ed@ls/false (bm30c0@syntax-dispatch bm37eb@t '(_ any . each-any)))) (if bm37ed@ls/false (apply (lambda (bm37ef@cls bm37f0@cls*) (bm3076@bless (let bm37f7@f ((bm37f3@cls bm37ef@cls) (bm37f4@cls* bm37f0@cls*)) (if (null? bm37f4@cls*) (let ((bm37f9@t bm37f3@cls)) (let ((bm37fb@ls/false (bm30c0@syntax-dispatch bm37f9@t '(#(scheme-id else) any . each-any)))) (if bm37fb@ls/false (apply (lambda (bm37fd@e bm37fe@e*) (cons 'begin (cons bm37fd@e bm37fe@e*))) bm37fb@ls/false) (let ((bm3801@t bm37f9@t)) (let ((bm3803@ls/false (bm30c0@syntax-dispatch bm3801@t '(any #(scheme-id =>) any)))) (if bm3803@ls/false (apply (lambda (bm3805@e bm3806@p) (list 'let (list (list 't bm3805@e)) (list 'if 't (cons bm3806@p '(t))))) bm3803@ls/false) (let ((bm3809@t bm3801@t)) (let ((bm380b@ls/false (bm30c0@syntax-dispatch bm3809@t '(any)))) (if bm380b@ls/false (apply (lambda (bm380d@e) (cons 'or (cons bm380d@e '((if #f #f))))) bm380b@ls/false) (let ((bm380f@t bm3809@t)) (let ((bm3811@ls/false (bm30c0@syntax-dispatch bm380f@t '(any . each-any)))) (if bm3811@ls/false (apply (lambda (bm3813@e bm3814@e*) (list 'if bm3813@e (cons 'begin bm3814@e*))) bm3811@ls/false) (let ((bm3817@t bm380f@t)) (let ((bm3819@ls/false (bm30c0@syntax-dispatch bm3817@t '_))) (if bm3819@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid last clause" bm37e9@stx)) bm3819@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3817@t)))))))))))))))) (let ((bm381b@t bm37f3@cls)) (let ((bm381d@ls/false (bm30c0@syntax-dispatch bm381b@t '(#(scheme-id else) any . each-any)))) (if bm381d@ls/false (apply (lambda (bm381f@e bm3820@e*) (bm31a0@syntax-violation '#f '"incorrect position of keyword else" bm37e9@stx)) bm381d@ls/false) (let ((bm3823@t bm381b@t)) (let ((bm3825@ls/false (bm30c0@syntax-dispatch bm3823@t '(any #(scheme-id =>) any)))) (if bm3825@ls/false (apply (lambda (bm3827@e bm3828@p) (list 'let (list (list 't bm3827@e)) (list 'if 't (cons bm3828@p '(t)) (bm37f7@f (car bm37f4@cls*) (cdr bm37f4@cls*))))) bm3825@ls/false) (let ((bm382b@t bm3823@t)) (let ((bm382d@ls/false (bm30c0@syntax-dispatch bm382b@t '(any)))) (if bm382d@ls/false (apply (lambda (bm382f@e) (list 'or bm382f@e (bm37f7@f (car bm37f4@cls*) (cdr bm37f4@cls*)))) bm382d@ls/false) (let ((bm3831@t bm382b@t)) (let ((bm3833@ls/false (bm30c0@syntax-dispatch bm3831@t '(any . each-any)))) (if bm3833@ls/false (apply (lambda (bm3835@e bm3836@e*) (list 'if bm3835@e (cons 'begin bm3836@e*) (bm37f7@f (car bm37f4@cls*) (cdr bm37f4@cls*)))) bm3833@ls/false) (let ((bm3839@t bm3831@t)) (let ((bm383b@ls/false (bm30c0@syntax-dispatch bm3839@t '_))) (if bm383b@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid last clause" bm37e9@stx)) bm383b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3839@t)))))))))))))))))))) bm37ed@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm37eb@t)))))) (set! bm4b88@bm30a4@cond-macro bm30a4@cond-macro) (set! bm30a6@do-include (lambda (bm383d@stx bm383e@id bm383f@filename) (let ((bm3843@filename (bm2ecd@stx->datum bm383f@filename))) (begin (if (not (and (string? bm3843@filename) (bm2eb9@id? bm383e@id))) (bm31a0@syntax-violation '#f '"invalid syntax" bm383d@stx) (void)) (cons (bm3076@bless 'begin) (with-input-from-file bm3843@filename (lambda () (let bm3847@f ((bm3845@ls '())) (let ((bm3849@x (bm29fb@bm28cb@read-annotated))) (if (eof-object? bm3849@x) (reverse bm3845@ls) (bm3847@f (cons (bm2e99@datum->stx bm383e@id bm3849@x) bm3845@ls)))))))))))) (set! bm4b89@bm30a6@do-include bm30a6@do-include) (set! bm30a8@include-macro (lambda (bm384b@e) (let ((bm384d@t bm384b@e)) (let ((bm384f@ls/false (bm30c0@syntax-dispatch bm384d@t '(any any)))) (if bm384f@ls/false (apply (lambda (bm3851@id bm3852@filename) (bm30a6@do-include bm384b@e bm3851@id bm3852@filename)) bm384f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm384d@t)))))) (set! bm4b8a@bm30a8@include-macro bm30a8@include-macro) (set! bm30aa@include-into-macro (lambda (bm3855@e) (let ((bm3857@t bm3855@e)) (let ((bm3859@ls/false (bm30c0@syntax-dispatch bm3857@t '(_ any any)))) (if bm3859@ls/false (apply (lambda (bm385b@id bm385c@filename) (bm30a6@do-include bm3855@e bm385b@id bm385c@filename)) bm3859@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3857@t)))))) (set! bm4b8b@bm30aa@include-into-macro bm30aa@include-into-macro) (set! bm30ac@syntax-rules-macro (lambda (bm385f@e) (let ((bm3861@t bm385f@e)) (let ((bm3863@ls/false (bm30c0@syntax-dispatch bm3861@t '(_ each-any . #(each (any any)))))) (if bm3863@ls/false (apply (lambda (bm3865@lits bm3866@pat* bm3867@tmp*) (begin (bm30c6@verify-literals bm3865@lits bm385f@e) (bm3076@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bm3865@lits (map (lambda (bm386b@pat bm386c@tmp) (let ((bm386f@t bm386b@pat)) (let ((bm3871@ls/false (bm30c0@syntax-dispatch bm386f@t '(_ . any)))) (if bm3871@ls/false (apply (lambda (bm3873@rest) (list (cons 'g bm3873@rest) (list 'syntax bm386c@tmp))) bm3871@ls/false) (let ((bm3875@t bm386f@t)) (let ((bm3877@ls/false (bm30c0@syntax-dispatch bm3875@t '_))) (if bm3877@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid syntax-rules pattern" bm385f@e bm386b@pat)) bm3877@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3875@t)))))))) bm3866@pat* bm3867@tmp*)))))))) bm3863@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3861@t)))))) (set! bm4b8c@bm30ac@syntax-rules-macro bm30ac@syntax-rules-macro) (set! bm30ae@quasiquote-macro (letrec* ((bm387a@datum (lambda (bm397b@x) (list (bm3048@scheme-stx 'quote) (bm2ea1@mkstx bm397b@x '() '() '())))) (bm3896@quasicons* (lambda (bm3973@x bm3974@y) (let bm3979@f ((bm3977@x bm3973@x)) (if (null? bm3977@x) bm3974@y (bm3898@quasicons (car bm3977@x) (bm3979@f (cdr bm3977@x))))))) (bm3898@quasicons (lambda (bm394d@x bm394e@y) (let ((bm3951@t bm394e@y)) (let ((bm3953@ls/false (bm30c0@syntax-dispatch bm3951@t '(#(scheme-id quote) any)))) (if bm3953@ls/false (apply (lambda (bm3955@dy) (let ((bm3957@t bm394d@x)) (let ((bm3959@ls/false (bm30c0@syntax-dispatch bm3957@t '(#(scheme-id quote) any)))) (if bm3959@ls/false (apply (lambda (bm395b@dx) (list (bm3048@scheme-stx 'quote) (cons bm395b@dx bm3955@dy))) bm3959@ls/false) (let ((bm395d@t bm3957@t)) (let ((bm395f@ls/false (bm30c0@syntax-dispatch bm395d@t '_))) (if bm395f@ls/false (apply (lambda () (let ((bm3961@t bm3955@dy)) (let ((bm3963@ls/false (bm30c0@syntax-dispatch bm3961@t '()))) (if bm3963@ls/false (apply (lambda () (list (bm3048@scheme-stx 'list) bm394d@x)) bm3963@ls/false) (let ((bm3965@t bm3961@t)) (let ((bm3967@ls/false (bm30c0@syntax-dispatch bm3965@t '_))) (if bm3967@ls/false (apply (lambda () (list (bm3048@scheme-stx 'cons) bm394d@x bm394e@y)) bm3967@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3965@t)))))))) bm395f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm395d@t)))))))) bm3953@ls/false) (let ((bm3969@t bm3951@t)) (let ((bm396b@ls/false (bm30c0@syntax-dispatch bm3969@t '(#(scheme-id list) . each-any)))) (if bm396b@ls/false (apply (lambda (bm396d@stuff) (cons* (bm3048@scheme-stx 'list) bm394d@x bm396d@stuff)) bm396b@ls/false) (let ((bm396f@t bm3969@t)) (let ((bm3971@ls/false (bm30c0@syntax-dispatch bm396f@t '_))) (if bm3971@ls/false (apply (lambda () (list (bm3048@scheme-stx 'cons) bm394d@x bm394e@y)) bm3971@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm396f@t)))))))))))) (bm389a@quasiappend (lambda (bm3933@x bm3934@y) (let ((bm3937@ls (let bm393b@f ((bm3939@x bm3933@x)) (if (null? bm3939@x) (let ((bm393d@t bm3934@y)) (let ((bm393f@ls/false (bm30c0@syntax-dispatch bm393d@t '(#(scheme-id quote) ())))) (if bm393f@ls/false (apply (lambda () '()) bm393f@ls/false) (let ((bm3941@t bm393d@t)) (let ((bm3943@ls/false (bm30c0@syntax-dispatch bm3941@t '_))) (if bm3943@ls/false (apply (lambda () (list bm3934@y)) bm3943@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3941@t))))))) (let ((bm3945@t (car bm3939@x))) (let ((bm3947@ls/false (bm30c0@syntax-dispatch bm3945@t '(#(scheme-id quote) ())))) (if bm3947@ls/false (apply (lambda () (bm393b@f (cdr bm3939@x))) bm3947@ls/false) (let ((bm3949@t bm3945@t)) (let ((bm394b@ls/false (bm30c0@syntax-dispatch bm3949@t '_))) (if bm394b@ls/false (apply (lambda () (cons (car bm3939@x) (bm393b@f (cdr bm3939@x)))) bm394b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3949@t))))))))))) (if (null? bm3937@ls) (list (bm3048@scheme-stx 'quote) '()) (if (null? (cdr bm3937@ls)) (car bm3937@ls) (cons* (bm3048@scheme-stx 'append) bm3937@ls)))))) (bm389c@quasivector (lambda (bm3901@x) (let ((bm3903@pat-x bm3901@x)) (let ((bm3905@t bm3903@pat-x)) (let ((bm3907@ls/false (bm30c0@syntax-dispatch bm3905@t '(#(scheme-id quote) each-any)))) (if bm3907@ls/false (apply (lambda (bm3909@x*) (list (bm3048@scheme-stx 'quote) (list->vector bm3909@x*))) bm3907@ls/false) (let ((bm390b@t bm3905@t)) (let ((bm390d@ls/false (bm30c0@syntax-dispatch bm390b@t '_))) (if bm390d@ls/false (apply (lambda () (let bm3915@f ((bm390f@x bm3901@x) (bm3910@k (lambda (bm3913@ls) (cons* (bm3048@scheme-stx 'vector) bm3913@ls)))) (let ((bm3917@t bm390f@x)) (let ((bm3919@ls/false (bm30c0@syntax-dispatch bm3917@t '(#(scheme-id quote) each-any)))) (if bm3919@ls/false (apply (lambda (bm391b@x*) (bm3910@k (map (lambda (bm391d@x) (list (bm3048@scheme-stx 'quote) bm391d@x)) bm391b@x*))) bm3919@ls/false) (let ((bm391f@t bm3917@t)) (let ((bm3921@ls/false (bm30c0@syntax-dispatch bm391f@t '(#(scheme-id list) . each-any)))) (if bm3921@ls/false (apply (lambda (bm3923@x*) (bm3910@k bm3923@x*)) bm3921@ls/false) (let ((bm3925@t bm391f@t)) (let ((bm3927@ls/false (bm30c0@syntax-dispatch bm3925@t '(#(scheme-id cons) any any)))) (if bm3927@ls/false (apply (lambda (bm3929@x bm392a@y) (bm3915@f bm392a@y (lambda (bm392d@ls) (bm3910@k (cons bm3929@x bm392d@ls))))) bm3927@ls/false) (let ((bm392f@t bm3925@t)) (let ((bm3931@ls/false (bm30c0@syntax-dispatch bm392f@t '_))) (if bm3931@ls/false (apply (lambda () (list (bm3048@scheme-stx 'list->vector) bm3903@pat-x)) bm3931@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm392f@t))))))))))))))) bm390d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm390b@t)))))))))) (bm389e@vquasi (lambda (bm38df@p bm38e0@lev) (let ((bm38e3@t bm38df@p)) (let ((bm38e5@ls/false (bm30c0@syntax-dispatch bm38e3@t '(any . any)))) (if bm38e5@ls/false (apply (lambda (bm38e7@p bm38e8@q) (let ((bm38eb@t bm38e7@p)) (let ((bm38ed@ls/false (bm30c0@syntax-dispatch bm38eb@t '(#(scheme-id unquote) . each-any)))) (if bm38ed@ls/false (apply (lambda (bm38ef@p) (if (= bm38e0@lev '0) (bm3896@quasicons* bm38ef@p (bm389e@vquasi bm38e8@q bm38e0@lev)) (bm3898@quasicons (bm3898@quasicons (bm387a@datum 'unquote) (bm38a0@quasi bm38ef@p (- bm38e0@lev '1))) (bm389e@vquasi bm38e8@q bm38e0@lev)))) bm38ed@ls/false) (let ((bm38f1@t bm38eb@t)) (let ((bm38f3@ls/false (bm30c0@syntax-dispatch bm38f1@t '(#(scheme-id unquote-splicing) . each-any)))) (if bm38f3@ls/false (apply (lambda (bm38f5@p) (if (= bm38e0@lev '0) (bm389a@quasiappend bm38f5@p (bm389e@vquasi bm38e8@q bm38e0@lev)) (bm3898@quasicons (bm3898@quasicons (bm387a@datum 'unquote-splicing) (bm38a0@quasi bm38f5@p (- bm38e0@lev '1))) (bm389e@vquasi bm38e8@q bm38e0@lev)))) bm38f3@ls/false) (let ((bm38f7@t bm38f1@t)) (let ((bm38f9@ls/false (bm30c0@syntax-dispatch bm38f7@t 'any))) (if bm38f9@ls/false (apply (lambda (bm38fb@p) (bm3898@quasicons (bm38a0@quasi bm38fb@p bm38e0@lev) (bm389e@vquasi bm38e8@q bm38e0@lev))) bm38f9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm38f7@t))))))))))) bm38e5@ls/false) (let ((bm38fd@t bm38e3@t)) (let ((bm38ff@ls/false (bm30c0@syntax-dispatch bm38fd@t '()))) (if bm38ff@ls/false (apply (lambda () (list (bm3048@scheme-stx 'quote) '())) bm38ff@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm38fd@t))))))))) (bm38a0@quasi (lambda (bm38a9@p bm38aa@lev) (let ((bm38ad@t bm38a9@p)) (let ((bm38af@ls/false (bm30c0@syntax-dispatch bm38ad@t '(#(scheme-id unquote) any)))) (if bm38af@ls/false (apply (lambda (bm38b1@p) (if (= bm38aa@lev '0) bm38b1@p (bm3898@quasicons (bm387a@datum 'unquote) (bm38a0@quasi (list bm38b1@p) (- bm38aa@lev '1))))) bm38af@ls/false) (let ((bm38b3@t bm38ad@t)) (let ((bm38b5@ls/false (bm30c0@syntax-dispatch bm38b3@t '((#(scheme-id unquote) . each-any) . any)))) (if bm38b5@ls/false (apply (lambda (bm38b7@p bm38b8@q) (if (= bm38aa@lev '0) (bm3896@quasicons* bm38b7@p (bm38a0@quasi bm38b8@q bm38aa@lev)) (bm3898@quasicons (bm3898@quasicons (bm387a@datum 'unquote) (bm38a0@quasi bm38b7@p (- bm38aa@lev '1))) (bm38a0@quasi bm38b8@q bm38aa@lev)))) bm38b5@ls/false) (let ((bm38bb@t bm38b3@t)) (let ((bm38bd@ls/false (bm30c0@syntax-dispatch bm38bb@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bm38bd@ls/false (apply (lambda (bm38bf@p bm38c0@q) (if (= bm38aa@lev '0) (bm389a@quasiappend bm38bf@p (bm38a0@quasi bm38c0@q bm38aa@lev)) (bm3898@quasicons (bm3898@quasicons (bm387a@datum 'unquote-splicing) (bm38a0@quasi bm38bf@p (- bm38aa@lev '1))) (bm38a0@quasi bm38c0@q bm38aa@lev)))) bm38bd@ls/false) (let ((bm38c3@t bm38bb@t)) (let ((bm38c5@ls/false (bm30c0@syntax-dispatch bm38c3@t '(#(scheme-id quasiquote) any)))) (if bm38c5@ls/false (apply (lambda (bm38c7@p) (bm3898@quasicons (bm387a@datum 'quasiquote) (bm38a0@quasi (list bm38c7@p) (+ bm38aa@lev '1)))) bm38c5@ls/false) (let ((bm38c9@t bm38c3@t)) (let ((bm38cb@ls/false (bm30c0@syntax-dispatch bm38c9@t '(any . any)))) (if bm38cb@ls/false (apply (lambda (bm38cd@p bm38ce@q) (bm3898@quasicons (bm38a0@quasi bm38cd@p bm38aa@lev) (bm38a0@quasi bm38ce@q bm38aa@lev))) bm38cb@ls/false) (let ((bm38d1@t bm38c9@t)) (let ((bm38d3@ls/false (bm30c0@syntax-dispatch bm38d1@t '#(vector each-any)))) (if (and bm38d3@ls/false (apply (lambda (bm38d5@x) (not (bm2e85@stx? bm38d5@x))) bm38d3@ls/false)) (apply (lambda (bm38d7@x) (bm389c@quasivector (bm389e@vquasi bm38d7@x bm38aa@lev))) bm38d3@ls/false) (let ((bm38d9@t bm38d1@t)) (let ((bm38db@ls/false (bm30c0@syntax-dispatch bm38d9@t 'any))) (if bm38db@ls/false (apply (lambda (bm38dd@p) (list (bm3048@scheme-stx 'quote) bm38dd@p)) bm38db@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm38d9@t))))))))))))))))))))))))) (lambda (bm38a1@x) (let ((bm38a3@t bm38a1@x)) (let ((bm38a5@ls/false (bm30c0@syntax-dispatch bm38a3@t '(_ any)))) (if bm38a5@ls/false (apply (lambda (bm38a7@e) (bm38a0@quasi bm38a7@e '0)) bm38a5@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm38a3@t))))))) (set! bm4b8d@bm30ae@quasiquote-macro bm30ae@quasiquote-macro) (set! bm30b0@quasisyntax-macro (letrec* ((bm397e@quasi (lambda (bm3999@p bm399a@lev) (let ((bm399d@t bm3999@p)) (let ((bm399f@ls/false (bm30c0@syntax-dispatch bm399d@t '(#(scheme-id unsyntax) any)))) (if bm399f@ls/false (apply (lambda (bm39a1@p) (if (= bm399a@lev '0) (let ((bm39a3@g (gensym))) (values (list bm39a3@g) (list bm39a1@p) bm39a3@g)) (call-with-values (lambda () (bm397e@quasi bm39a1@p (- bm399a@lev '1))) (lambda (bm39ab@bm39a6 bm39ac@bm39a8 bm39ad@bm39aa) (let ((bm39b1@p bm39ad@bm39aa) (bm39b2@rhs* bm39ac@bm39a8) (bm39b3@lhs* bm39ab@bm39a6)) (values bm39b3@lhs* bm39b2@rhs* (list 'unsyntax bm39b1@p))))))) bm399f@ls/false) (let ((bm39b7@t bm399d@t)) (let ((bm39b9@ls/false (bm30c0@syntax-dispatch bm39b7@t '#(scheme-id unsyntax)))) (if (and bm39b9@ls/false (apply (lambda () (= bm399a@lev '0)) bm39b9@ls/false)) (apply (lambda () (bm31a0@syntax-violation '#f '"incorrect use of unsyntax" bm3999@p)) bm39b9@ls/false) (let ((bm39bb@t bm39b7@t)) (let ((bm39bd@ls/false (bm30c0@syntax-dispatch bm39bb@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bm39bd@ls/false (apply (lambda (bm39bf@p* bm39c0@q) (call-with-values (lambda () (bm397e@quasi bm39c0@q bm399a@lev)) (lambda (bm39c9@bm39c4 bm39ca@bm39c6 bm39cb@bm39c8) (let ((bm39cf@q bm39cb@bm39c8) (bm39d0@rhs* bm39ca@bm39c6) (bm39d1@lhs* bm39c9@bm39c4)) (if (= bm399a@lev '0) (let ((bm39d5@g* (map (lambda (bm39d7@x) (gensym)) bm39bf@p*))) (values (append bm39d5@g* bm39d1@lhs*) (append bm39bf@p* bm39d0@rhs*) (append bm39d5@g* bm39cf@q))) (call-with-values (lambda () (bm397e@quasi bm39bf@p* (- bm399a@lev '1))) (lambda (bm39df@bm39da bm39e0@bm39dc bm39e1@bm39de) (let ((bm39e5@p* bm39e1@bm39de) (bm39e6@rhs2* bm39e0@bm39dc) (bm39e7@lhs2* bm39df@bm39da)) (values (append bm39e7@lhs2* bm39d1@lhs*) (append bm39e6@rhs2* bm39d0@rhs*) (cons (cons 'unsyntax bm39e5@p*) bm39cf@q)))))))))) bm39bd@ls/false) (let ((bm39eb@t bm39bb@t)) (let ((bm39ed@ls/false (bm30c0@syntax-dispatch bm39eb@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bm39ed@ls/false (apply (lambda (bm39ef@p* bm39f0@q) (call-with-values (lambda () (bm397e@quasi bm39f0@q bm399a@lev)) (lambda (bm39f9@bm39f4 bm39fa@bm39f6 bm39fb@bm39f8) (let ((bm39ff@q bm39fb@bm39f8) (bm3a00@rhs* bm39fa@bm39f6) (bm3a01@lhs* bm39f9@bm39f4)) (if (= bm399a@lev '0) (let ((bm3a05@g* (map (lambda (bm3a07@x) (gensym)) bm39ef@p*))) (values (append (map (lambda (bm3a09@g) (cons bm3a09@g '(...))) bm3a05@g*) bm3a01@lhs*) (append bm39ef@p* bm3a00@rhs*) (append (apply append (map (lambda (bm3a0b@g) (cons bm3a0b@g '(...))) bm3a05@g*)) bm39ff@q))) (call-with-values (lambda () (bm397e@quasi bm39ef@p* (- bm399a@lev '1))) (lambda (bm3a13@bm3a0e bm3a14@bm3a10 bm3a15@bm3a12) (let ((bm3a19@p* bm3a15@bm3a12) (bm3a1a@rhs2* bm3a14@bm3a10) (bm3a1b@lhs2* bm3a13@bm3a0e)) (values (append bm3a1b@lhs2* bm3a01@lhs*) (append bm3a1a@rhs2* bm3a00@rhs*) (cons (cons 'unsyntax-splicing bm3a19@p*) bm39ff@q)))))))))) bm39ed@ls/false) (let ((bm3a1f@t bm39eb@t)) (let ((bm3a21@ls/false (bm30c0@syntax-dispatch bm3a1f@t '#(scheme-id unsyntax-splicing)))) (if (and bm3a21@ls/false (apply (lambda () (= bm399a@lev '0)) bm3a21@ls/false)) (apply (lambda () (bm31a0@syntax-violation '#f '"incorrect use of unsyntax-splicing" bm3999@p)) bm3a21@ls/false) (let ((bm3a23@t bm3a1f@t)) (let ((bm3a25@ls/false (bm30c0@syntax-dispatch bm3a23@t '(#(scheme-id quasisyntax) any)))) (if bm3a25@ls/false (apply (lambda (bm3a27@p) (call-with-values (lambda () (bm397e@quasi bm3a27@p (+ bm399a@lev '1))) (lambda (bm3a2f@bm3a2a bm3a30@bm3a2c bm3a31@bm3a2e) (let ((bm3a35@p bm3a31@bm3a2e) (bm3a36@rhs* bm3a30@bm3a2c) (bm3a37@lhs* bm3a2f@bm3a2a)) (values bm3a37@lhs* bm3a36@rhs* (list 'quasisyntax bm3a35@p)))))) bm3a25@ls/false) (let ((bm3a3b@t bm3a23@t)) (let ((bm3a3d@ls/false (bm30c0@syntax-dispatch bm3a3b@t '(any . any)))) (if bm3a3d@ls/false (apply (lambda (bm3a3f@p bm3a40@q) (call-with-values (lambda () (bm397e@quasi bm3a3f@p bm399a@lev)) (lambda (bm3a4f@bm3a44 bm3a50@bm3a46 bm3a51@bm3a48) (call-with-values (lambda () (bm397e@quasi bm3a40@q bm399a@lev)) (lambda (bm3a55@bm3a4a bm3a56@bm3a4c bm3a57@bm3a4e) (let ((bm3a5b@q bm3a57@bm3a4e) (bm3a5c@rhs2* bm3a56@bm3a4c) (bm3a5d@lhs2* bm3a55@bm3a4a) (bm3a5e@p bm3a51@bm3a48) (bm3a5f@rhs* bm3a50@bm3a46) (bm3a60@lhs* bm3a4f@bm3a44)) (values (append bm3a5d@lhs2* bm3a60@lhs*) (append bm3a5c@rhs2* bm3a5f@rhs*) (cons bm3a5e@p bm3a5b@q)))))))) bm3a3d@ls/false) (let ((bm3a67@t bm3a3b@t)) (let ((bm3a69@ls/false (bm30c0@syntax-dispatch bm3a67@t '#(vector each-any)))) (if bm3a69@ls/false (apply (lambda (bm3a6b@x*) (call-with-values (lambda () (bm397e@quasi bm3a6b@x* bm399a@lev)) (lambda (bm3a73@bm3a6e bm3a74@bm3a70 bm3a75@bm3a72) (let ((bm3a79@x* bm3a75@bm3a72) (bm3a7a@rhs* bm3a74@bm3a70) (bm3a7b@lhs* bm3a73@bm3a6e)) (values bm3a7b@lhs* bm3a7a@rhs* (list->vector bm3a79@x*)))))) bm3a69@ls/false) (let ((bm3a7f@t bm3a67@t)) (let ((bm3a81@ls/false (bm30c0@syntax-dispatch bm3a7f@t '_))) (if bm3a81@ls/false (apply (lambda () (values '() '() bm3999@p)) bm3a81@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3a7f@t))))))))))))))))))))))))))))))) (lambda (bm397f@x) (let ((bm3981@t bm397f@x)) (let ((bm3983@ls/false (bm30c0@syntax-dispatch bm3981@t '(_ any)))) (if bm3983@ls/false (apply (lambda (bm3985@e) (call-with-values (lambda () (bm397e@quasi bm3985@e '0)) (lambda (bm398d@bm3988 bm398e@bm398a bm398f@bm398c) (let ((bm3993@v bm398f@bm398c) (bm3994@rhs* bm398e@bm398a) (bm3995@lhs* bm398d@bm3988)) (bm3076@bless (list 'syntax-case (cons 'list bm3994@rhs*) '() (list bm3995@lhs* (list 'syntax bm3993@v)))))))) bm3983@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3981@t))))))) (set! bm4b8e@bm30b0@quasisyntax-macro bm30b0@quasisyntax-macro) (set! bm30b2@define-struct-macro (lambda (bm3a83@stx) (bm31a0@syntax-violation '#f '"define-struct not supported" bm3a83@stx))) (set! bm4b8f@bm30b2@define-struct-macro bm30b2@define-struct-macro) (set! bm30b4@define-record-type-macro (lambda (bm3a85@x) (letrec* ((bm3a88@id (lambda (bm3c7b@ctxt . bm3c7d@str*) (bm31a4@datum->syntax bm3c7b@ctxt (string->symbol (apply string-append (map (lambda (bm3c7f@x) (if (symbol? bm3c7f@x) (symbol->string bm3c7f@x) (if (string? bm3c7f@x) bm3c7f@x (assertion-violation 'define-record-type '"BUG")))) bm3c7d@str*)))))) (bm3a8a@get-record-name (lambda (bm3c69@spec) (let ((bm3c6b@t bm3c69@spec)) (let ((bm3c6d@ls/false (bm30c0@syntax-dispatch bm3c6b@t '(any any any)))) (if bm3c6d@ls/false (apply (lambda (bm3c6f@foo bm3c70@make-foo bm3c71@foo?) bm3c6f@foo) bm3c6d@ls/false) (let ((bm3c75@t bm3c6b@t)) (let ((bm3c77@ls/false (bm30c0@syntax-dispatch bm3c75@t 'any))) (if bm3c77@ls/false (apply (lambda (bm3c79@foo) bm3c79@foo) bm3c77@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c75@t))))))))) (bm3a8c@get-record-constructor-name (lambda (bm3c55@spec) (let ((bm3c57@t bm3c55@spec)) (let ((bm3c59@ls/false (bm30c0@syntax-dispatch bm3c57@t '(any any any)))) (if bm3c59@ls/false (apply (lambda (bm3c5b@foo bm3c5c@make-foo bm3c5d@foo?) bm3c5c@make-foo) bm3c59@ls/false) (let ((bm3c61@t bm3c57@t)) (let ((bm3c63@ls/false (bm30c0@syntax-dispatch bm3c61@t 'any))) (if (and bm3c63@ls/false (apply (lambda (bm3c65@foo) (bm2eb9@id? bm3c65@foo)) bm3c63@ls/false)) (apply (lambda (bm3c67@foo) (bm3a88@id bm3c67@foo '"make-" (bm2ecd@stx->datum bm3c67@foo))) bm3c63@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c61@t))))))))) (bm3a8e@get-record-predicate-name (lambda (bm3c41@spec) (let ((bm3c43@t bm3c41@spec)) (let ((bm3c45@ls/false (bm30c0@syntax-dispatch bm3c43@t '(any any any)))) (if bm3c45@ls/false (apply (lambda (bm3c47@foo bm3c48@make-foo bm3c49@foo?) bm3c49@foo?) bm3c45@ls/false) (let ((bm3c4d@t bm3c43@t)) (let ((bm3c4f@ls/false (bm30c0@syntax-dispatch bm3c4d@t 'any))) (if (and bm3c4f@ls/false (apply (lambda (bm3c51@foo) (bm2eb9@id? bm3c51@foo)) bm3c4f@ls/false)) (apply (lambda (bm3c53@foo) (bm3a88@id bm3c53@foo (bm2ecd@stx->datum bm3c53@foo) '"?")) bm3c4f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c4d@t))))))))) (bm3a90@get-clause (lambda (bm3c2f@id bm3c30@ls) (let ((bm3c33@t bm3c30@ls)) (let ((bm3c35@ls/false (bm30c0@syntax-dispatch bm3c33@t '()))) (if bm3c35@ls/false (apply (lambda () '#f) bm3c35@ls/false) (let ((bm3c37@t bm3c33@t)) (let ((bm3c39@ls/false (bm30c0@syntax-dispatch bm3c37@t '((any . any) . any)))) (if bm3c39@ls/false (apply (lambda (bm3c3b@x bm3c3c@rest bm3c3d@ls) (if (bm2ebf@free-id=? (bm3076@bless bm3c2f@id) bm3c3b@x) (cons bm3c3b@x bm3c3c@rest) (bm3a90@get-clause bm3c2f@id bm3c3d@ls))) bm3c39@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c37@t))))))))) (bm3a92@foo-rtd-code (lambda (bm3bdd@name bm3bde@clause* bm3bdf@parent-rtd-code) (letrec* ((bm3be4@convert-field-spec* (lambda (bm3c15@ls) (list->vector (map (lambda (bm3c17@x) (let ((bm3c19@t bm3c17@x)) (let ((bm3c1b@ls/false (bm30c0@syntax-dispatch bm3c19@t '(#(scheme-id mutable) any . any)))) (if bm3c1b@ls/false (apply (lambda (bm3c1d@name bm3c1e@rest) (list 'mutable bm3c1d@name)) bm3c1b@ls/false) (let ((bm3c21@t bm3c19@t)) (let ((bm3c23@ls/false (bm30c0@syntax-dispatch bm3c21@t '(#(scheme-id immutable) any . any)))) (if bm3c23@ls/false (apply (lambda (bm3c25@name bm3c26@rest) (list 'immutable bm3c25@name)) bm3c23@ls/false) (let ((bm3c29@t bm3c21@t)) (let ((bm3c2b@ls/false (bm30c0@syntax-dispatch bm3c29@t 'any))) (if bm3c2b@ls/false (apply (lambda (bm3c2d@name) (list 'immutable bm3c2d@name)) bm3c2b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c29@t))))))))))) bm3c15@ls))))) (let ((bm3be5@uid-code (let ((bm3bed@t (bm3a90@get-clause 'nongenerative bm3bde@clause*))) (let ((bm3bef@ls/false (bm30c0@syntax-dispatch bm3bed@t '(_)))) (if bm3bef@ls/false (apply (lambda () (list 'quote (gensym))) bm3bef@ls/false) (let ((bm3bf1@t bm3bed@t)) (let ((bm3bf3@ls/false (bm30c0@syntax-dispatch bm3bf1@t '(_ any)))) (if bm3bf3@ls/false (apply (lambda (bm3bf5@uid) (list 'quote bm3bf5@uid)) bm3bf3@ls/false) (let ((bm3bf7@t bm3bf1@t)) (let ((bm3bf9@ls/false (bm30c0@syntax-dispatch bm3bf7@t '_))) (if bm3bf9@ls/false (apply (lambda () '#f) bm3bf9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bf7@t))))))))))) (bm3be6@sealed? (let ((bm3bfb@t (bm3a90@get-clause 'sealed bm3bde@clause*))) (let ((bm3bfd@ls/false (bm30c0@syntax-dispatch bm3bfb@t '(_ #(atom #t))))) (if bm3bfd@ls/false (apply (lambda () '#t) bm3bfd@ls/false) (let ((bm3bff@t bm3bfb@t)) (let ((bm3c01@ls/false (bm30c0@syntax-dispatch bm3bff@t '_))) (if bm3c01@ls/false (apply (lambda () '#f) bm3c01@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bff@t)))))))) (bm3be7@opaque? (let ((bm3c03@t (bm3a90@get-clause 'opaque bm3bde@clause*))) (let ((bm3c05@ls/false (bm30c0@syntax-dispatch bm3c03@t '(_ #(atom #t))))) (if bm3c05@ls/false (apply (lambda () '#t) bm3c05@ls/false) (let ((bm3c07@t bm3c03@t)) (let ((bm3c09@ls/false (bm30c0@syntax-dispatch bm3c07@t '_))) (if bm3c09@ls/false (apply (lambda () '#f) bm3c09@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c07@t)))))))) (bm3be8@fields (let ((bm3c0b@t (bm3a90@get-clause 'fields bm3bde@clause*))) (let ((bm3c0d@ls/false (bm30c0@syntax-dispatch bm3c0b@t '(_ . each-any)))) (if bm3c0d@ls/false (apply (lambda (bm3c0f@field-spec*) (list 'quote (bm3be4@convert-field-spec* bm3c0f@field-spec*))) bm3c0d@ls/false) (let ((bm3c11@t bm3c0b@t)) (let ((bm3c13@ls/false (bm30c0@syntax-dispatch bm3c11@t '_))) (if bm3c13@ls/false (apply (lambda () ''#()) bm3c13@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c11@t))))))))) (bm3076@bless (list 'make-record-type-descriptor (list 'quote bm3bdd@name) bm3bdf@parent-rtd-code bm3be5@uid-code bm3be6@sealed? bm3be7@opaque? bm3be8@fields)))))) (bm3a94@parent-rtd-code (lambda (bm3bc5@clause*) (let ((bm3bc7@t (bm3a90@get-clause 'parent bm3bc5@clause*))) (let ((bm3bc9@ls/false (bm30c0@syntax-dispatch bm3bc7@t '(_ any)))) (if bm3bc9@ls/false (apply (lambda (bm3bcb@name) (list 'record-type-descriptor bm3bcb@name)) bm3bc9@ls/false) (let ((bm3bcd@t bm3bc7@t)) (let ((bm3bcf@ls/false (bm30c0@syntax-dispatch bm3bcd@t '#(atom #f)))) (if bm3bcf@ls/false (apply (lambda () (let ((bm3bd1@t (bm3a90@get-clause 'parent-rtd bm3bc5@clause*))) (let ((bm3bd3@ls/false (bm30c0@syntax-dispatch bm3bd1@t '(_ any any)))) (if bm3bd3@ls/false (apply (lambda (bm3bd5@rtd bm3bd6@rcd) bm3bd5@rtd) bm3bd3@ls/false) (let ((bm3bd9@t bm3bd1@t)) (let ((bm3bdb@ls/false (bm30c0@syntax-dispatch bm3bd9@t '#(atom #f)))) (if bm3bdb@ls/false (apply (lambda () '#f) bm3bdb@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bd9@t)))))))) bm3bcf@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bcd@t))))))))) (bm3a96@parent-rcd-code (lambda (bm3bad@clause*) (let ((bm3baf@t (bm3a90@get-clause 'parent bm3bad@clause*))) (let ((bm3bb1@ls/false (bm30c0@syntax-dispatch bm3baf@t '(_ any)))) (if bm3bb1@ls/false (apply (lambda (bm3bb3@name) (list 'record-constructor-descriptor bm3bb3@name)) bm3bb1@ls/false) (let ((bm3bb5@t bm3baf@t)) (let ((bm3bb7@ls/false (bm30c0@syntax-dispatch bm3bb5@t '#(atom #f)))) (if bm3bb7@ls/false (apply (lambda () (let ((bm3bb9@t (bm3a90@get-clause 'parent-rtd bm3bad@clause*))) (let ((bm3bbb@ls/false (bm30c0@syntax-dispatch bm3bb9@t '(_ any any)))) (if bm3bbb@ls/false (apply (lambda (bm3bbd@rtd bm3bbe@rcd) bm3bbe@rcd) bm3bbb@ls/false) (let ((bm3bc1@t bm3bb9@t)) (let ((bm3bc3@ls/false (bm30c0@syntax-dispatch bm3bc1@t '#(atom #f)))) (if bm3bc3@ls/false (apply (lambda () '#f) bm3bc3@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bc1@t)))))))) bm3bb7@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3bb5@t))))))))) (bm3a98@foo-rcd-code (lambda (bm3ba5@clause* bm3ba6@foo-rtd bm3ba7@protocol bm3ba8@parent-rcd-code) (list 'make-record-constructor-descriptor bm3ba6@foo-rtd bm3ba8@parent-rcd-code bm3ba7@protocol))) (bm3a9a@get-protocol-code (lambda (bm3b99@clause*) (let ((bm3b9b@t (bm3a90@get-clause 'protocol bm3b99@clause*))) (let ((bm3b9d@ls/false (bm30c0@syntax-dispatch bm3b9b@t '(_ any)))) (if bm3b9d@ls/false (apply (lambda (bm3b9f@expr) bm3b9f@expr) bm3b9d@ls/false) (let ((bm3ba1@t bm3b9b@t)) (let ((bm3ba3@ls/false (bm30c0@syntax-dispatch bm3ba1@t '_))) (if bm3ba3@ls/false (apply (lambda () '#f) bm3ba3@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3ba1@t))))))))) (bm3a9c@get-fields (lambda (bm3b87@clause*) (let ((bm3b89@t bm3b87@clause*)) (let ((bm3b8b@ls/false (bm30c0@syntax-dispatch bm3b89@t '()))) (if bm3b8b@ls/false (apply (lambda () '()) bm3b8b@ls/false) (let ((bm3b8d@t bm3b89@t)) (let ((bm3b8f@ls/false (bm30c0@syntax-dispatch bm3b8d@t '((#(scheme-id fields) . each-any) . _)))) (if bm3b8f@ls/false (apply (lambda (bm3b91@f*) bm3b91@f*) bm3b8f@ls/false) (let ((bm3b93@t bm3b8d@t)) (let ((bm3b95@ls/false (bm30c0@syntax-dispatch bm3b93@t '(_ . any)))) (if bm3b95@ls/false (apply (lambda (bm3b97@rest) (bm3a9c@get-fields bm3b97@rest)) bm3b95@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3b93@t)))))))))))) (bm3a9e@get-mutator-indices (lambda (bm3b6f@fields) (let bm3b75@f ((bm3b71@fields bm3b6f@fields) (bm3b72@i '0)) (let ((bm3b77@t bm3b71@fields)) (let ((bm3b79@ls/false (bm30c0@syntax-dispatch bm3b77@t '()))) (if bm3b79@ls/false (apply (lambda () '()) bm3b79@ls/false) (let ((bm3b7b@t bm3b77@t)) (let ((bm3b7d@ls/false (bm30c0@syntax-dispatch bm3b7b@t '((#(scheme-id mutable) . _) . any)))) (if bm3b7d@ls/false (apply (lambda (bm3b7f@rest) (cons bm3b72@i (bm3b75@f bm3b7f@rest (+ bm3b72@i '1)))) bm3b7d@ls/false) (let ((bm3b81@t bm3b7b@t)) (let ((bm3b83@ls/false (bm30c0@syntax-dispatch bm3b81@t '(_ . any)))) (if bm3b83@ls/false (apply (lambda (bm3b85@rest) (bm3b75@f bm3b85@rest (+ bm3b72@i '1))) bm3b83@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3b81@t))))))))))))) (bm3aa0@get-mutators (lambda (bm3b45@foo bm3b46@fields) (letrec* ((bm3b4a@gen-name (lambda (bm3b6d@x) (bm31a4@datum->syntax bm3b45@foo (string->symbol (string-append (symbol->string (bm31a6@syntax->datum bm3b45@foo)) '"-" (symbol->string (bm31a6@syntax->datum bm3b6d@x)) '"-set!")))))) (let bm3b4d@f ((bm3b4b@fields bm3b46@fields)) (let ((bm3b4f@t bm3b4b@fields)) (let ((bm3b51@ls/false (bm30c0@syntax-dispatch bm3b4f@t '()))) (if bm3b51@ls/false (apply (lambda () '()) bm3b51@ls/false) (let ((bm3b53@t bm3b4f@t)) (let ((bm3b55@ls/false (bm30c0@syntax-dispatch bm3b53@t '((#(scheme-id mutable) any any any) . any)))) (if bm3b55@ls/false (apply (lambda (bm3b57@name bm3b58@accessor bm3b59@mutator bm3b5a@rest) (cons bm3b59@mutator (bm3b4d@f bm3b5a@rest))) bm3b55@ls/false) (let ((bm3b5f@t bm3b53@t)) (let ((bm3b61@ls/false (bm30c0@syntax-dispatch bm3b5f@t '((#(scheme-id mutable) any) . any)))) (if bm3b61@ls/false (apply (lambda (bm3b63@name bm3b64@rest) (cons (bm3b4a@gen-name bm3b63@name) (bm3b4d@f bm3b64@rest))) bm3b61@ls/false) (let ((bm3b67@t bm3b5f@t)) (let ((bm3b69@ls/false (bm30c0@syntax-dispatch bm3b67@t '(_ . any)))) (if bm3b69@ls/false (apply (lambda (bm3b6b@rest) (bm3b4d@f bm3b6b@rest)) bm3b69@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3b67@t))))))))))))))))) (bm3aa2@get-accessors (lambda (bm3b01@foo bm3b02@fields) (letrec* ((bm3b06@gen-name (lambda (bm3b43@x) (bm31a4@datum->syntax bm3b01@foo (string->symbol (string-append (symbol->string (bm31a6@syntax->datum bm3b01@foo)) '"-" (symbol->string (bm31a6@syntax->datum bm3b43@x)))))))) (map (lambda (bm3b07@field) (let ((bm3b09@t bm3b07@field)) (let ((bm3b0b@ls/false (bm30c0@syntax-dispatch bm3b09@t '(#(scheme-id mutable) any any any)))) (if (and bm3b0b@ls/false (apply (lambda (bm3b0d@name bm3b0e@accessor bm3b0f@mutator) (bm2eb9@id? bm3b0e@accessor)) bm3b0b@ls/false)) (apply (lambda (bm3b13@name bm3b14@accessor bm3b15@mutator) bm3b14@accessor) bm3b0b@ls/false) (let ((bm3b19@t bm3b09@t)) (let ((bm3b1b@ls/false (bm30c0@syntax-dispatch bm3b19@t '(#(scheme-id immutable) any any)))) (if (and bm3b1b@ls/false (apply (lambda (bm3b1d@name bm3b1e@accessor) (bm2eb9@id? bm3b1e@accessor)) bm3b1b@ls/false)) (apply (lambda (bm3b21@name bm3b22@accessor) bm3b22@accessor) bm3b1b@ls/false) (let ((bm3b25@t bm3b19@t)) (let ((bm3b27@ls/false (bm30c0@syntax-dispatch bm3b25@t '(#(scheme-id mutable) any)))) (if (and bm3b27@ls/false (apply (lambda (bm3b29@name) (bm2eb9@id? bm3b29@name)) bm3b27@ls/false)) (apply (lambda (bm3b2b@name) (bm3b06@gen-name bm3b2b@name)) bm3b27@ls/false) (let ((bm3b2d@t bm3b25@t)) (let ((bm3b2f@ls/false (bm30c0@syntax-dispatch bm3b2d@t '(#(scheme-id immutable) any)))) (if (and bm3b2f@ls/false (apply (lambda (bm3b31@name) (bm2eb9@id? bm3b31@name)) bm3b2f@ls/false)) (apply (lambda (bm3b33@name) (bm3b06@gen-name bm3b33@name)) bm3b2f@ls/false) (let ((bm3b35@t bm3b2d@t)) (let ((bm3b37@ls/false (bm30c0@syntax-dispatch bm3b35@t 'any))) (if (and bm3b37@ls/false (apply (lambda (bm3b39@name) (bm2eb9@id? bm3b39@name)) bm3b37@ls/false)) (apply (lambda (bm3b3b@name) (bm3b06@gen-name bm3b3b@name)) bm3b37@ls/false) (let ((bm3b3d@t bm3b35@t)) (let ((bm3b3f@ls/false (bm30c0@syntax-dispatch bm3b3d@t 'any))) (if bm3b3f@ls/false (apply (lambda (bm3b41@others) (bm31a0@syntax-violation '#f '"invalid field spec" bm3b07@field)) bm3b3f@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3b3d@t)))))))))))))))))))) bm3b02@fields)))) (bm3aa4@enumerate (lambda (bm3af9@ls) (let bm3aff@f ((bm3afb@ls bm3af9@ls) (bm3afc@i '0)) (if (null? bm3afb@ls) '() (cons bm3afc@i (bm3aff@f (cdr bm3afb@ls) (+ bm3afc@i '1))))))) (bm3aa6@do-define-record (lambda (bm3ad1@namespec bm3ad2@clause*) (let ((bm3ad5@foo (bm3a8a@get-record-name bm3ad1@namespec))) (let ((bm3ad7@foo-rtd (gensym))) (let ((bm3ad9@foo-rcd (gensym))) (let ((bm3adb@protocol (gensym))) (let ((bm3add@make-foo (bm3a8c@get-record-constructor-name bm3ad1@namespec))) (let ((bm3adf@fields (bm3a9c@get-fields bm3ad2@clause*))) (let ((bm3ae1@idx* (bm3aa4@enumerate bm3adf@fields))) (let ((bm3ae3@foo-x* (bm3aa2@get-accessors bm3ad5@foo bm3adf@fields))) (let ((bm3ae5@set-foo-x!* (bm3aa0@get-mutators bm3ad5@foo bm3adf@fields))) (let ((bm3ae7@set-foo-idx* (bm3a9e@get-mutator-indices bm3adf@fields))) (let ((bm3ae9@foo? (bm3a8e@get-record-predicate-name bm3ad1@namespec))) (let ((bm3aeb@foo-rtd-code (bm3a92@foo-rtd-code bm3ad5@foo bm3ad2@clause* (bm3a94@parent-rtd-code bm3ad2@clause*)))) (let ((bm3aed@foo-rcd-code (bm3a98@foo-rcd-code bm3ad2@clause* bm3ad7@foo-rtd bm3adb@protocol (bm3a96@parent-rcd-code bm3ad2@clause*)))) (let ((bm3aef@protocol-code (bm3a9a@get-protocol-code bm3ad2@clause*))) (bm3076@bless (cons 'begin (cons (list 'define bm3ad7@foo-rtd bm3aeb@foo-rtd-code) (cons (list 'define bm3adb@protocol bm3aef@protocol-code) (cons (list 'define bm3ad9@foo-rcd bm3aed@foo-rcd-code) (cons (list 'define-syntax bm3ad5@foo (list 'list ''$rtd (list 'syntax bm3ad7@foo-rtd) (list 'syntax bm3ad9@foo-rcd))) (cons (list 'define bm3ae9@foo? (list 'record-predicate bm3ad7@foo-rtd)) (cons (list 'define bm3add@make-foo (list 'record-constructor bm3ad9@foo-rcd)) (append (map (lambda (bm3af1@foo-x bm3af2@idx) (list 'define bm3af1@foo-x (list 'record-accessor bm3ad7@foo-rtd bm3af2@idx))) bm3ae3@foo-x* bm3ae1@idx*) (map (lambda (bm3af5@set-foo-x! bm3af6@idx) (list 'define bm3af5@set-foo-x! (list 'record-mutator bm3ad7@foo-rtd bm3af6@idx))) bm3ae5@set-foo-x!* bm3ae7@set-foo-idx*)))))))))))))))))))))))))) (bm3aa8@verify-clauses (lambda (bm3ab1@x bm3ab2@cls*) (letrec* ((bm3ab6@valid-kwds (map bm3076@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (bm3ab8@free-id-member? (lambda (bm3acd@x bm3ace@ls) (and (pair? bm3ace@ls) (or (bm2ebf@free-id=? bm3acd@x (car bm3ace@ls)) (bm3ab8@free-id-member? bm3acd@x (cdr bm3ace@ls))))))) (let bm3abd@f ((bm3ab9@cls* bm3ab2@cls*) (bm3aba@seen* '())) (if (not (null? bm3ab9@cls*)) (let ((bm3abf@t (car bm3ab9@cls*))) (let ((bm3ac1@ls/false (bm30c0@syntax-dispatch bm3abf@t '(any . any)))) (if bm3ac1@ls/false (apply (lambda (bm3ac3@kwd bm3ac4@rest) (if (or (not (bm2eb9@id? bm3ac3@kwd)) (not (bm3ab8@free-id-member? bm3ac3@kwd bm3ab6@valid-kwds))) (bm31a0@syntax-violation '#f '"not a valid define-record-type keyword" bm3ac3@kwd) (if (bm2ec5@bound-id-member? bm3ac3@kwd bm3aba@seen*) (bm31a0@syntax-violation '#f '"duplicate use of keyword " bm3ab1@x bm3ac3@kwd) (bm3abd@f (cdr bm3ab9@cls*) (cons bm3ac3@kwd bm3aba@seen*))))) bm3ac1@ls/false) (let ((bm3ac7@t bm3abf@t)) (let ((bm3ac9@ls/false (bm30c0@syntax-dispatch bm3ac7@t 'any))) (if bm3ac9@ls/false (apply (lambda (bm3acb@cls) (bm31a0@syntax-violation '#f '"malformed define-record-type clause" bm3acb@cls)) bm3ac9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3ac7@t))))))) (void))))))) (let ((bm3aa9@t bm3a85@x)) (let ((bm3aab@ls/false (bm30c0@syntax-dispatch bm3aa9@t '(_ any . each-any)))) (if bm3aab@ls/false (apply (lambda (bm3aad@namespec bm3aae@clause*) (begin (bm3aa8@verify-clauses bm3a85@x bm3aae@clause*) (bm3aa6@do-define-record bm3aad@namespec bm3aae@clause*))) bm3aab@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3aa9@t))))))) (set! bm4b90@bm30b4@define-record-type-macro bm30b4@define-record-type-macro) (set! bm30b6@define-condition-type-macro (lambda (bm3c81@x) (letrec* ((bm3c84@mkname (lambda (bm3cb1@name bm3cb2@suffix) (bm31a4@datum->syntax bm3cb1@name (string->symbol (string-append (symbol->string (bm31a6@syntax->datum bm3cb1@name)) bm3cb2@suffix)))))) (let ((bm3c85@t bm3c81@x)) (let ((bm3c87@ls/false (bm30c0@syntax-dispatch bm3c85@t '(any any any any any . #(each (any any)))))) (if (and bm3c87@ls/false (apply (lambda (bm3c89@ctxt bm3c8a@name bm3c8b@super bm3c8c@constructor bm3c8d@predicate bm3c8e@field* bm3c8f@accessor*) (and (bm2eb9@id? bm3c8a@name) (bm2eb9@id? bm3c8b@super) (bm2eb9@id? bm3c8c@constructor) (bm2eb9@id? bm3c8d@predicate) (for-all bm2eb9@id? bm3c8e@field*) (for-all bm2eb9@id? bm3c8f@accessor*))) bm3c87@ls/false)) (apply (lambda (bm3c97@ctxt bm3c98@name bm3c99@super bm3c9a@constructor bm3c9b@predicate bm3c9c@field* bm3c9d@accessor*) (let ((bm3ca5@aux-accessor* (map (lambda (bm3ca7@x) (gensym)) bm3c9d@accessor*))) (bm3076@bless (cons 'begin (cons (cons 'define-record-type (cons (list bm3c98@name bm3c9a@constructor (gensym)) (cons (list 'parent bm3c99@super) (cons (cons 'fields (map (lambda (bm3ca9@field bm3caa@aux) (list 'immutable bm3ca9@field bm3caa@aux)) bm3c9c@field* bm3ca5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bm3c9b@predicate (list 'condition-predicate (list 'record-type-descriptor bm3c98@name))) (map (lambda (bm3cad@accessor bm3cae@aux) (list 'define bm3cad@accessor (list 'condition-accessor (list 'record-type-descriptor bm3c98@name) bm3cae@aux))) bm3c9d@accessor* bm3ca5@aux-accessor*))))))) bm3c87@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3c85@t))))))) (set! bm4b91@bm30b6@define-condition-type-macro bm30b6@define-condition-type-macro) (set! bm30b8@incorrect-usage-macro (lambda (bm3cb5@e) (bm31a0@syntax-violation '#f '"incorrect usage of auxiliary keyword" bm3cb5@e))) (set! bm4b92@bm30b8@incorrect-usage-macro bm30b8@incorrect-usage-macro) (set! bm30ba@parameterize-macro (lambda (bm3cb7@e) (let ((bm3cb9@t bm3cb7@e)) (let ((bm3cbb@ls/false (bm30c0@syntax-dispatch bm3cb9@t '(_ () any . each-any)))) (if bm3cbb@ls/false (apply (lambda (bm3cbd@b bm3cbe@b*) (bm3076@bless (cons 'let (cons '() (cons bm3cbd@b bm3cbe@b*))))) bm3cbb@ls/false) (let ((bm3cc1@t bm3cb9@t)) (let ((bm3cc3@ls/false (bm30c0@syntax-dispatch bm3cc1@t '(_ #(each (any any)) any . each-any)))) (if bm3cc3@ls/false (apply (lambda (bm3cc5@olhs* bm3cc6@orhs* bm3cc7@b bm3cc8@b*) (let ((bm3ccd@lhs* (bm318e@generate-temporaries bm3cc5@olhs*)) (bm3cce@rhs* (bm318e@generate-temporaries bm3cc6@orhs*))) (bm3076@bless (cons (list 'lambda (append bm3ccd@lhs* bm3cce@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bm3cd1@lhs bm3cd2@rhs) (list 'let (list (list 't (list bm3cd1@lhs))) (list bm3cd1@lhs bm3cd2@rhs) (cons 'set! (cons bm3cd2@rhs '(t))))) bm3ccd@lhs* bm3cce@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bm3cc7@b bm3cc8@b*))) '(swap)))))) (append bm3cc5@olhs* bm3cc6@orhs*))))) bm3cc3@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3cc1@t))))))))) (set! bm4b93@bm30ba@parameterize-macro bm30ba@parameterize-macro) (set! bm30bc@foreign-call-transformer (lambda (bm3cd5@e bm3cd6@r bm3cd7@mr) (let ((bm3cdb@t bm3cd5@e)) (let ((bm3cdd@ls/false (bm30c0@syntax-dispatch bm3cdb@t '(_ any . each-any)))) (if bm3cdd@ls/false (apply (lambda (bm3cdf@name bm3ce0@arg*) (cons 'foreign-call (cons (bm30e2@chi-expr bm3cdf@name bm3cd6@r bm3cd7@mr) (bm30de@chi-expr* bm3ce0@arg* bm3cd6@r bm3cd7@mr)))) bm3cdd@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3cdb@t)))))) (set! bm4b94@bm30bc@foreign-call-transformer bm30bc@foreign-call-transformer) (set! bm30be@convert-pattern (lambda (bm3ce3@pattern bm3ce4@keys) (letrec* ((bm3ce8@cvt* (lambda (bm3d87@p* bm3d88@n bm3d89@ids) (if (null? bm3d87@p*) (values '() bm3d89@ids) (call-with-values (lambda () (bm3ce8@cvt* (cdr bm3d87@p*) bm3d88@n bm3d89@ids)) (lambda (bm3d91@bm3d8e bm3d92@bm3d90) (let ((bm3d95@ids bm3d92@bm3d90) (bm3d96@y bm3d91@bm3d8e)) (call-with-values (lambda () (bm3cea@cvt (car bm3d87@p*) bm3d88@n bm3d95@ids)) (lambda (bm3d9d@bm3d9a bm3d9e@bm3d9c) (let ((bm3da1@ids bm3d9e@bm3d9c) (bm3da2@x bm3d9d@bm3d9a)) (values (cons bm3da2@x bm3d96@y) bm3da1@ids)))))))))) (bm3cea@cvt (lambda (bm3ceb@p bm3cec@n bm3ced@ids) (let ((bm3cf1@t bm3ceb@p)) (let ((bm3cf3@ls/false (bm30c0@syntax-dispatch bm3cf1@t 'any))) (if (and bm3cf3@ls/false (apply (lambda (bm3cf5@id) (bm2eb9@id? bm3cf5@id)) bm3cf3@ls/false)) (apply (lambda (bm3cf7@id) (if (bm2ec5@bound-id-member? bm3ceb@p bm3ce4@keys) (values (vector 'free-id bm3ceb@p) bm3ced@ids) (if (bm2ebf@free-id=? bm3ceb@p (bm3048@scheme-stx '_)) (values '_ bm3ced@ids) (values 'any (cons (cons bm3ceb@p bm3cec@n) bm3ced@ids))))) bm3cf3@ls/false) (let ((bm3cf9@t bm3cf1@t)) (let ((bm3cfb@ls/false (bm30c0@syntax-dispatch bm3cf9@t '(any any)))) (if (and bm3cfb@ls/false (apply (lambda (bm3cfd@p bm3cfe@dots) (bm30c2@ellipsis? bm3cfe@dots)) bm3cfb@ls/false)) (apply (lambda (bm3d01@p bm3d02@dots) (call-with-values (lambda () (bm3cea@cvt bm3d01@p (+ bm3cec@n '1) bm3ced@ids)) (lambda (bm3d09@bm3d06 bm3d0a@bm3d08) (let ((bm3d0d@ids bm3d0a@bm3d08) (bm3d0e@p bm3d09@bm3d06)) (values (if (eq? bm3d0e@p 'any) 'each-any (vector 'each bm3d0e@p)) bm3d0d@ids))))) bm3cfb@ls/false) (let ((bm3d11@t bm3cf9@t)) (let ((bm3d13@ls/false (bm30c0@syntax-dispatch bm3d11@t '(any any . #(each+ any () any))))) (if (and bm3d13@ls/false (apply (lambda (bm3d15@x bm3d16@dots bm3d17@ys bm3d18@z) (bm30c2@ellipsis? bm3d16@dots)) bm3d13@ls/false)) (apply (lambda (bm3d1d@x bm3d1e@dots bm3d1f@ys bm3d20@z) (call-with-values (lambda () (bm3cea@cvt bm3d20@z bm3cec@n bm3ced@ids)) (lambda (bm3d29@bm3d26 bm3d2a@bm3d28) (let ((bm3d2d@ids bm3d2a@bm3d28) (bm3d2e@z bm3d29@bm3d26)) (call-with-values (lambda () (bm3ce8@cvt* bm3d1f@ys bm3cec@n bm3d2d@ids)) (lambda (bm3d35@bm3d32 bm3d36@bm3d34) (let ((bm3d39@ids bm3d36@bm3d34) (bm3d3a@ys bm3d35@bm3d32)) (call-with-values (lambda () (bm3cea@cvt bm3d1d@x (+ bm3cec@n '1) bm3d39@ids)) (lambda (bm3d41@bm3d3e bm3d42@bm3d40) (let ((bm3d45@ids bm3d42@bm3d40) (bm3d46@x bm3d41@bm3d3e)) (values (vector 'each+ bm3d46@x (reverse bm3d3a@ys) bm3d2e@z) bm3d45@ids))))))))))) bm3d13@ls/false) (let ((bm3d49@t bm3d11@t)) (let ((bm3d4b@ls/false (bm30c0@syntax-dispatch bm3d49@t '(any . any)))) (if bm3d4b@ls/false (apply (lambda (bm3d4d@x bm3d4e@y) (call-with-values (lambda () (bm3cea@cvt bm3d4e@y bm3cec@n bm3ced@ids)) (lambda (bm3d55@bm3d52 bm3d56@bm3d54) (let ((bm3d59@ids bm3d56@bm3d54) (bm3d5a@y bm3d55@bm3d52)) (call-with-values (lambda () (bm3cea@cvt bm3d4d@x bm3cec@n bm3d59@ids)) (lambda (bm3d61@bm3d5e bm3d62@bm3d60) (let ((bm3d65@ids bm3d62@bm3d60) (bm3d66@x bm3d61@bm3d5e)) (values (cons bm3d66@x bm3d5a@y) bm3d65@ids)))))))) bm3d4b@ls/false) (let ((bm3d69@t bm3d49@t)) (let ((bm3d6b@ls/false (bm30c0@syntax-dispatch bm3d69@t '()))) (if bm3d6b@ls/false (apply (lambda () (values '() bm3ced@ids)) bm3d6b@ls/false) (let ((bm3d6d@t bm3d69@t)) (let ((bm3d6f@ls/false (bm30c0@syntax-dispatch bm3d6d@t '#(vector each-any)))) (if (and bm3d6f@ls/false (apply (lambda (bm3d71@p) (not (bm2e85@stx? bm3d71@p))) bm3d6f@ls/false)) (apply (lambda (bm3d73@p) (call-with-values (lambda () (bm3cea@cvt bm3d73@p bm3cec@n bm3ced@ids)) (lambda (bm3d79@bm3d76 bm3d7a@bm3d78) (let ((bm3d7d@ids bm3d7a@bm3d78) (bm3d7e@p bm3d79@bm3d76)) (values (vector 'vector bm3d7e@p) bm3d7d@ids))))) bm3d6f@ls/false) (let ((bm3d81@t bm3d6d@t)) (let ((bm3d83@ls/false (bm30c0@syntax-dispatch bm3d81@t 'any))) (if bm3d83@ls/false (apply (lambda (bm3d85@datum) (values (vector 'atom (bm2ecd@stx->datum bm3d85@datum)) bm3ced@ids)) bm3d83@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3d81@t))))))))))))))))))))))))) (bm3cea@cvt bm3ce3@pattern '0 '())))) (set! bm4b95@bm30be@convert-pattern bm30be@convert-pattern) (set! bm30c0@syntax-dispatch (letrec* ((bm3da6@stx^ (lambda (bm3e81@e bm3e82@m* bm3e83@s* bm3e84@ae*) (if (and (null? bm3e82@m*) (null? bm3e83@s*) (null? bm3e84@ae*)) bm3e81@e (bm2ea1@mkstx bm3e81@e bm3e82@m* bm3e83@s* bm3e84@ae*)))) (bm3da8@match-each (lambda (bm3e61@e bm3e62@p bm3e63@m* bm3e64@s* bm3e65@ae*) (if (pair? bm3e61@e) (let ((bm3e6b@first (bm3db4@match (car bm3e61@e) bm3e62@p bm3e63@m* bm3e64@s* bm3e65@ae* '()))) (and bm3e6b@first (let ((bm3e6d@rest (bm3da8@match-each (cdr bm3e61@e) bm3e62@p bm3e63@m* bm3e64@s* bm3e65@ae*))) (and bm3e6d@rest (cons bm3e6b@first bm3e6d@rest))))) (if (null? bm3e61@e) '() (if (bm2e85@stx? bm3e61@e) (and (not (bm2e3f@top-marked? bm3e63@m*)) (call-with-values (lambda () (join-wraps bm3e63@m* bm3e64@s* bm3e65@ae* bm3e61@e)) (lambda (bm3e75@bm3e70 bm3e76@bm3e72 bm3e77@bm3e74) (let ((bm3e7b@ae* bm3e77@bm3e74) (bm3e7c@s* bm3e76@bm3e72) (bm3e7d@m* bm3e75@bm3e70)) (bm3da8@match-each (bm2e87@stx-expr bm3e61@e) bm3e62@p bm3e7d@m* bm3e7c@s* bm3e7b@ae*))))) (if (bm29fd@bm28cf@annotation? bm3e61@e) (bm3da8@match-each (bm29ff@bm28d3@annotation-expression bm3e61@e) bm3e62@p bm3e63@m* bm3e64@s* bm3e65@ae*) '#f)))))) (bm3daa@match-each+ (lambda (bm3e21@e bm3e22@x-pat bm3e23@y-pat bm3e24@z-pat bm3e25@m* bm3e26@s* bm3e27@ae* bm3e28@r) (let bm3e39@f ((bm3e31@e bm3e21@e) (bm3e32@m* bm3e25@m*) (bm3e33@s* bm3e26@s*) (bm3e34@ae* bm3e27@ae*)) (if (pair? bm3e31@e) (call-with-values (lambda () (bm3e39@f (cdr bm3e31@e) bm3e32@m* bm3e33@s* bm3e34@ae*)) (lambda (bm3e41@bm3e3c bm3e42@bm3e3e bm3e43@bm3e40) (let ((bm3e47@r bm3e43@bm3e40) (bm3e48@y-pat bm3e42@bm3e3e) (bm3e49@xr* bm3e41@bm3e3c)) (if bm3e47@r (if (null? bm3e48@y-pat) (let ((bm3e4d@xr (bm3db4@match (car bm3e31@e) bm3e22@x-pat bm3e32@m* bm3e33@s* bm3e34@ae* '()))) (if bm3e4d@xr (values (cons bm3e4d@xr bm3e49@xr*) bm3e48@y-pat bm3e47@r) (values '#f '#f '#f))) (values '() (cdr bm3e48@y-pat) (bm3db4@match (car bm3e31@e) (car bm3e48@y-pat) bm3e32@m* bm3e33@s* bm3e34@ae* bm3e47@r))) (values '#f '#f '#f))))) (if (bm2e85@stx? bm3e31@e) (if (bm2e3f@top-marked? bm3e32@m*) (values '() bm3e23@y-pat (bm3db4@match bm3e31@e bm3e24@z-pat bm3e32@m* bm3e33@s* bm3e34@ae* bm3e28@r)) (call-with-values (lambda () (join-wraps bm3e32@m* bm3e33@s* bm3e34@ae* bm3e31@e)) (lambda (bm3e55@bm3e50 bm3e56@bm3e52 bm3e57@bm3e54) (let ((bm3e5b@ae* bm3e57@bm3e54) (bm3e5c@s* bm3e56@bm3e52) (bm3e5d@m* bm3e55@bm3e50)) (bm3e39@f (bm2e87@stx-expr bm3e31@e) bm3e5d@m* bm3e5c@s* bm3e5b@ae*))))) (if (bm29fd@bm28cf@annotation? bm3e31@e) (bm3e39@f (bm29ff@bm28d3@annotation-expression bm3e31@e) bm3e32@m* bm3e33@s* bm3e34@ae*) (values '() bm3e23@y-pat (bm3db4@match bm3e31@e bm3e24@z-pat bm3e32@m* bm3e33@s* bm3e34@ae* bm3e28@r)))))))) (bm3dac@match-each-any (lambda (bm3e05@e bm3e06@m* bm3e07@s* bm3e08@ae*) (if (pair? bm3e05@e) (let ((bm3e0d@l (bm3dac@match-each-any (cdr bm3e05@e) bm3e06@m* bm3e07@s* bm3e08@ae*))) (and bm3e0d@l (cons (bm3da6@stx^ (car bm3e05@e) bm3e06@m* bm3e07@s* bm3e08@ae*) bm3e0d@l))) (if (null? bm3e05@e) '() (if (bm2e85@stx? bm3e05@e) (and (not (bm2e3f@top-marked? bm3e06@m*)) (call-with-values (lambda () (join-wraps bm3e06@m* bm3e07@s* bm3e08@ae* bm3e05@e)) (lambda (bm3e15@bm3e10 bm3e16@bm3e12 bm3e17@bm3e14) (let ((bm3e1b@ae* bm3e17@bm3e14) (bm3e1c@s* bm3e16@bm3e12) (bm3e1d@m* bm3e15@bm3e10)) (bm3dac@match-each-any (bm2e87@stx-expr bm3e05@e) bm3e1d@m* bm3e1c@s* bm3e1b@ae*))))) (if (bm29fd@bm28cf@annotation? bm3e05@e) (bm3dac@match-each-any (bm29ff@bm28d3@annotation-expression bm3e05@e) bm3e06@m* bm3e07@s* bm3e08@ae*) '#f)))))) (bm3dae@match-empty (lambda (bm3dff@p bm3e00@r) (if (null? bm3dff@p) bm3e00@r (if (eq? bm3dff@p '_) bm3e00@r (if (eq? bm3dff@p 'any) (cons '() bm3e00@r) (if (pair? bm3dff@p) (bm3dae@match-empty (car bm3dff@p) (bm3dae@match-empty (cdr bm3dff@p) bm3e00@r)) (if (eq? bm3dff@p 'each-any) (cons '() bm3e00@r) (let ((bm3e03@t (vector-ref bm3dff@p '0))) (if (memv bm3e03@t '(each)) (bm3dae@match-empty (vector-ref bm3dff@p '1) bm3e00@r) (if (memv bm3e03@t '(each+)) (bm3dae@match-empty (vector-ref bm3dff@p '1) (bm3dae@match-empty (reverse (vector-ref bm3dff@p '2)) (bm3dae@match-empty (vector-ref bm3dff@p '3) bm3e00@r))) (if (memv bm3e03@t '(free-id atom)) bm3e00@r (if (memv bm3e03@t '(scheme-id atom)) bm3e00@r (if (memv bm3e03@t '(vector)) (bm3dae@match-empty (vector-ref bm3dff@p '1) bm3e00@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bm3dff@p)))))))))))))) (bm3db0@combine (lambda (bm3dfb@r* bm3dfc@r) (if (null? (car bm3dfb@r*)) bm3dfc@r (cons (map car bm3dfb@r*) (bm3db0@combine (map cdr bm3dfb@r*) bm3dfc@r))))) (bm3db2@match* (lambda (bm3dd7@e bm3dd8@p bm3dd9@m* bm3dda@s* bm3ddb@ae* bm3ddc@r) (if (null? bm3dd8@p) (and (null? bm3dd7@e) bm3ddc@r) (if (pair? bm3dd8@p) (and (pair? bm3dd7@e) (bm3db4@match (car bm3dd7@e) (car bm3dd8@p) bm3dd9@m* bm3dda@s* bm3ddb@ae* (bm3db4@match (cdr bm3dd7@e) (cdr bm3dd8@p) bm3dd9@m* bm3dda@s* bm3ddb@ae* bm3ddc@r))) (if (eq? bm3dd8@p 'each-any) (let ((bm3de3@l (bm3dac@match-each-any bm3dd7@e bm3dd9@m* bm3dda@s* bm3ddb@ae*))) (and bm3de3@l (cons bm3de3@l bm3ddc@r))) (let ((bm3de5@t (vector-ref bm3dd8@p '0))) (if (memv bm3de5@t '(each)) (if (null? bm3dd7@e) (bm3dae@match-empty (vector-ref bm3dd8@p '1) bm3ddc@r) (let ((bm3de7@r* (bm3da8@match-each bm3dd7@e (vector-ref bm3dd8@p '1) bm3dd9@m* bm3dda@s* bm3ddb@ae*))) (and bm3de7@r* (bm3db0@combine bm3de7@r* bm3ddc@r)))) (if (memv bm3de5@t '(free-id)) (and (symbol? bm3dd7@e) (bm2e3f@top-marked? bm3dd9@m*) (bm2ebf@free-id=? (bm3da6@stx^ bm3dd7@e bm3dd9@m* bm3dda@s* bm3ddb@ae*) (vector-ref bm3dd8@p '1)) bm3ddc@r) (if (memv bm3de5@t '(scheme-id)) (and (symbol? bm3dd7@e) (bm2e3f@top-marked? bm3dd9@m*) (bm2ebf@free-id=? (bm3da6@stx^ bm3dd7@e bm3dd9@m* bm3dda@s* bm3ddb@ae*) (bm3048@scheme-stx (vector-ref bm3dd8@p '1))) bm3ddc@r) (if (memv bm3de5@t '(each+)) (call-with-values (lambda () (bm3daa@match-each+ bm3dd7@e (vector-ref bm3dd8@p '1) (vector-ref bm3dd8@p '2) (vector-ref bm3dd8@p '3) bm3dd9@m* bm3dda@s* bm3ddb@ae* bm3ddc@r)) (lambda (bm3def@bm3dea bm3df0@bm3dec bm3df1@bm3dee) (let ((bm3df5@r bm3df1@bm3dee) (bm3df6@y-pat bm3df0@bm3dec) (bm3df7@xr* bm3def@bm3dea)) (and bm3df5@r (null? bm3df6@y-pat) (if (null? bm3df7@xr*) (bm3dae@match-empty (vector-ref bm3dd8@p '1) bm3df5@r) (bm3db0@combine bm3df7@xr* bm3df5@r)))))) (if (memv bm3de5@t '(atom)) (and (fast-equal? (vector-ref bm3dd8@p '1) (bm2ecb@strip bm3dd7@e bm3dd9@m*)) bm3ddc@r) (if (memv bm3de5@t '(vector)) (and (vector? bm3dd7@e) (bm3db4@match (vector->list bm3dd7@e) (vector-ref bm3dd8@p '1) bm3dd9@m* bm3dda@s* bm3ddb@ae* bm3ddc@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bm3dd8@p))))))))))))) (bm3db4@match (lambda (bm3db9@e bm3dba@p bm3dbb@m* bm3dbc@s* bm3dbd@ae* bm3dbe@r) (if (not bm3dbe@r) '#f (if (eq? bm3dba@p '_) bm3dbe@r (if (eq? bm3dba@p 'any) (cons (bm3da6@stx^ bm3db9@e bm3dbb@m* bm3dbc@s* bm3dbd@ae*) bm3dbe@r) (if (bm2e85@stx? bm3db9@e) (and (not (bm2e3f@top-marked? bm3dbb@m*)) (call-with-values (lambda () (join-wraps bm3dbb@m* bm3dbc@s* bm3dbd@ae* bm3db9@e)) (lambda (bm3dcb@bm3dc6 bm3dcc@bm3dc8 bm3dcd@bm3dca) (let ((bm3dd1@ae* bm3dcd@bm3dca) (bm3dd2@s* bm3dcc@bm3dc8) (bm3dd3@m* bm3dcb@bm3dc6)) (bm3db4@match (bm2e87@stx-expr bm3db9@e) bm3dba@p bm3dd3@m* bm3dd2@s* bm3dd1@ae* bm3dbe@r))))) (if (bm29fd@bm28cf@annotation? bm3db9@e) (bm3db4@match (bm29ff@bm28d3@annotation-expression bm3db9@e) bm3dba@p bm3dbb@m* bm3dbc@s* bm3dbd@ae* bm3dbe@r) (bm3db2@match* bm3db9@e bm3dba@p bm3dbb@m* bm3dbc@s* bm3dbd@ae* bm3dbe@r))))))))) (lambda (bm3db5@e bm3db6@p) (bm3db4@match bm3db5@e bm3db6@p '() '() '() '())))) (set! bm4b96@bm30c0@syntax-dispatch bm30c0@syntax-dispatch) (set! bm30c2@ellipsis? (lambda (bm3e89@x) (and (bm2eb9@id? bm3e89@x) (bm2ebf@free-id=? bm3e89@x (bm3048@scheme-stx '...))))) (set! bm4b97@bm30c2@ellipsis? bm30c2@ellipsis?) (set! bm30c4@underscore? (lambda (bm3e8b@x) (and (bm2eb9@id? bm3e8b@x) (bm2ebf@free-id=? bm3e8b@x (bm3048@scheme-stx '_))))) (set! bm4b98@bm30c4@underscore? bm30c4@underscore?) (set! bm30c6@verify-literals (lambda (bm3e8d@lits bm3e8e@expr) (for-each (lambda (bm3e91@x) (if (or (not (bm2eb9@id? bm3e91@x)) (bm30c2@ellipsis? bm3e91@x) (bm30c4@underscore? bm3e91@x)) (bm31a0@syntax-violation '#f '"invalid literal" bm3e8e@expr bm3e91@x) (void))) bm3e8d@lits))) (set! bm4b99@bm30c6@verify-literals bm30c6@verify-literals) (set! bm30c8@syntax-case-transformer (letrec* ((bm3e94@build-dispatch-call (lambda (bm3f05@pvars bm3f06@expr bm3f07@y bm3f08@r bm3f09@mr) (let ((bm3f0f@ids (map car bm3f05@pvars)) (bm3f10@levels (map cdr bm3f05@pvars))) (let ((bm3f13@labels (map bm2e45@gen-label bm3f0f@ids)) (bm3f14@new-vars (map bm2e41@gen-lexical bm3f0f@ids))) (let ((bm3f17@body (bm30e2@chi-expr (bm2ea5@add-subst (bm2e79@make-full-rib bm3f0f@ids bm3f13@labels) bm3f06@expr) (append (map (lambda (bm3f19@label bm3f1a@var bm3f1b@level) (cons bm3f19@label (bm2ed3@make-binding 'syntax (cons bm3f1a@var bm3f1b@level)))) bm3f13@labels bm3f14@new-vars (map cdr bm3f05@pvars)) bm3f08@r) bm3f09@mr))) (list '(primitive apply) (bm2e1c@bm2d4e@build-lambda '#f bm3f14@new-vars bm3f17@body) bm3f07@y)))))) (bm3e96@invalid-ids-error (lambda (bm3ef9@id* bm3efa@e bm3efb@class) (let bm3f03@find ((bm3eff@id* bm3ef9@id*) (bm3f00@ok* '())) (if (null? bm3eff@id*) (bm31a0@syntax-violation '#f '"invalid syntax" bm3efa@e) (if (bm2eb9@id? (car bm3eff@id*)) (if (bm2ec5@bound-id-member? (car bm3eff@id*) bm3f00@ok*) (bm319c@syntax-error (car bm3eff@id*) '"duplicate " bm3efb@class) (bm3f03@find (cdr bm3eff@id*) (cons (car bm3eff@id*) bm3f00@ok*))) (bm319c@syntax-error (car bm3eff@id*) '"invalid " bm3efb@class)))))) (bm3e98@gen-clause (lambda (bm3ed1@x bm3ed2@keys bm3ed3@clauses bm3ed4@r bm3ed5@mr bm3ed6@pat bm3ed7@fender bm3ed8@expr) (call-with-values (lambda () (bm30be@convert-pattern bm3ed6@pat bm3ed2@keys)) (lambda (bm3ee5@bm3ee2 bm3ee6@bm3ee4) (let ((bm3ee9@pvars bm3ee6@bm3ee4) (bm3eea@p bm3ee5@bm3ee2)) (if (not (bm2ec3@distinct-bound-ids? (map car bm3ee9@pvars))) (bm3e96@invalid-ids-error (map car bm3ee9@pvars) bm3ed6@pat '"pattern variable") (if (not (for-all (lambda (bm3eed@x) (not (bm30c2@ellipsis? (car bm3eed@x)))) bm3ee9@pvars)) (bm31a0@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bm3ed6@pat) (let ((bm3eef@y (bm2e41@gen-lexical 'tmp))) (let ((bm3ef1@test (if (eq? bm3ed7@fender '#t) bm3eef@y (let ((bm3ef3@call (bm3e94@build-dispatch-call bm3ee9@pvars bm3ed7@fender bm3eef@y bm3ed4@r bm3ed5@mr))) (list 'if bm3eef@y bm3ef3@call (list 'quote '#f)))))) (let ((bm3ef5@conseq (bm3e94@build-dispatch-call bm3ee9@pvars bm3ed8@expr bm3eef@y bm3ed4@r bm3ed5@mr))) (let ((bm3ef7@altern (bm3e9a@gen-syntax-case bm3ed1@x bm3ed2@keys bm3ed3@clauses bm3ed4@r bm3ed5@mr))) (list (bm2e1c@bm2d4e@build-lambda '#f (list bm3eef@y) (list 'if bm3ef1@test bm3ef5@conseq bm3ef7@altern)) (list '(primitive syntax-dispatch) bm3ed1@x (list 'quote bm3eea@p)))))))))))))) (bm3e9a@gen-syntax-case (lambda (bm3eaf@x bm3eb0@keys bm3eb1@clauses bm3eb2@r bm3eb3@mr) (if (null? bm3eb1@clauses) (list '(primitive syntax-error) bm3eaf@x) (let ((bm3eb9@t (car bm3eb1@clauses))) (let ((bm3ebb@ls/false (bm30c0@syntax-dispatch bm3eb9@t '(any any)))) (if bm3ebb@ls/false (apply (lambda (bm3ebd@pat bm3ebe@expr) (if (and (bm2eb9@id? bm3ebd@pat) (not (bm2ec5@bound-id-member? bm3ebd@pat bm3eb0@keys)) (not (bm30c2@ellipsis? bm3ebd@pat))) (if (bm2ebf@free-id=? bm3ebd@pat (bm3048@scheme-stx '_)) (bm30e2@chi-expr bm3ebe@expr bm3eb2@r bm3eb3@mr) (let ((bm3ec1@lab (bm2e45@gen-label bm3ebd@pat)) (bm3ec2@lex (bm2e41@gen-lexical bm3ebd@pat))) (let ((bm3ec5@body (bm30e2@chi-expr (bm2ea5@add-subst (bm2e79@make-full-rib (list bm3ebd@pat) (list bm3ec1@lab)) bm3ebe@expr) (cons (cons bm3ec1@lab (bm2ed3@make-binding 'syntax (cons bm3ec2@lex '0))) bm3eb2@r) bm3eb3@mr))) (list (bm2e1c@bm2d4e@build-lambda '#f (list bm3ec2@lex) bm3ec5@body) bm3eaf@x)))) (bm3e98@gen-clause bm3eaf@x bm3eb0@keys (cdr bm3eb1@clauses) bm3eb2@r bm3eb3@mr bm3ebd@pat '#t bm3ebe@expr))) bm3ebb@ls/false) (let ((bm3ec7@t bm3eb9@t)) (let ((bm3ec9@ls/false (bm30c0@syntax-dispatch bm3ec7@t '(any any any)))) (if bm3ec9@ls/false (apply (lambda (bm3ecb@pat bm3ecc@fender bm3ecd@expr) (bm3e98@gen-clause bm3eaf@x bm3eb0@keys (cdr bm3eb1@clauses) bm3eb2@r bm3eb3@mr bm3ecb@pat bm3ecc@fender bm3ecd@expr)) bm3ec9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3ec7@t))))))))))) (lambda (bm3e9b@e bm3e9c@r bm3e9d@mr) (let ((bm3ea1@t bm3e9b@e)) (let ((bm3ea3@ls/false (bm30c0@syntax-dispatch bm3ea1@t '(_ any each-any . each-any)))) (if bm3ea3@ls/false (apply (lambda (bm3ea5@expr bm3ea6@keys bm3ea7@clauses) (begin (bm30c6@verify-literals bm3ea6@keys bm3e9b@e) (let ((bm3eab@x (bm2e41@gen-lexical 'tmp))) (let ((bm3ead@body (bm3e9a@gen-syntax-case bm3eab@x bm3ea6@keys bm3ea7@clauses bm3e9c@r bm3e9d@mr))) (list (bm2e1c@bm2d4e@build-lambda '#f (list bm3eab@x) bm3ead@body) (bm30e2@chi-expr bm3ea5@expr bm3e9c@r bm3e9d@mr)))))) bm3ea3@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3ea1@t))))))) (set! bm4b9a@bm30c8@syntax-case-transformer bm30c8@syntax-case-transformer) (set! bm30ca@ellipsis-map (lambda (bm3f1f@proc bm3f20@ls . bm3f23@ls*) (letrec* ((bm3f26@who '...)) (begin (if (not (list? bm3f20@ls)) (assertion-violation bm3f26@who '"not a list" bm3f20@ls) (void)) (if (not (null? bm3f23@ls*)) (let ((bm3f27@n (length bm3f20@ls))) (for-each (lambda (bm3f29@x) (begin (if (not (list? bm3f29@x)) (assertion-violation bm3f26@who '"not a list" bm3f29@x) (void)) (if (not (= (length bm3f29@x) bm3f27@n)) (assertion-violation bm3f26@who '"length mismatch" bm3f20@ls bm3f29@x) (void)))) bm3f23@ls*)) (void)) (apply map bm3f1f@proc bm3f20@ls bm3f23@ls*))))) (set! bm4b9b@bm30ca@ellipsis-map bm30ca@ellipsis-map) (set! bm30cc@syntax-transformer (letrec* ((bm3f2c@gen-syntax (lambda (bm3fa3@src bm3fa4@e bm3fa5@r bm3fa6@maps bm3fa7@ellipsis? bm3fa8@vec?) (let ((bm3faf@t bm3fa4@e)) (let ((bm3fb1@ls/false (bm30c0@syntax-dispatch bm3faf@t 'any))) (if (and bm3fb1@ls/false (apply (lambda (bm3fb3@dots) (bm3fa7@ellipsis? bm3fb3@dots)) bm3fb1@ls/false)) (apply (lambda (bm3fb5@dots) (bm31a0@syntax-violation '#f '"misplaced ellipsis in syntax form" bm3fa3@src)) bm3fb1@ls/false) (let ((bm3fb7@t bm3faf@t)) (let ((bm3fb9@ls/false (bm30c0@syntax-dispatch bm3fb7@t 'any))) (if (and bm3fb9@ls/false (apply (lambda (bm3fbb@id) (bm2eb9@id? bm3fbb@id)) bm3fb9@ls/false)) (apply (lambda (bm3fbd@id) (let ((bm3fbf@label (bm2ecf@id->label bm3fa4@e))) (let ((bm3fc1@b (bm2ed1@label->binding bm3fbf@label bm3fa5@r))) (if (eq? (bm2ed5@binding-type bm3fc1@b) 'syntax) (call-with-values (lambda () (let ((bm3fc7@var.lev (bm2ed7@binding-value bm3fc1@b))) (bm3f2e@gen-ref bm3fa3@src (car bm3fc7@var.lev) (cdr bm3fc7@var.lev) bm3fa6@maps))) (lambda (bm3fc9@bm3fc4 bm3fca@bm3fc6) (let ((bm3fcd@maps bm3fca@bm3fc6) (bm3fce@var bm3fc9@bm3fc4)) (values (list 'ref bm3fce@var) bm3fcd@maps)))) (values (list 'quote bm3fa4@e) bm3fa6@maps))))) bm3fb9@ls/false) (let ((bm3fd1@t bm3fb7@t)) (let ((bm3fd3@ls/false (bm30c0@syntax-dispatch bm3fd1@t '(any any)))) (if (and bm3fd3@ls/false (apply (lambda (bm3fd5@dots bm3fd6@e) (bm3fa7@ellipsis? bm3fd5@dots)) bm3fd3@ls/false)) (apply (lambda (bm3fd9@dots bm3fda@e) (if bm3fa8@vec? (bm31a0@syntax-violation '#f '"misplaced ellipsis in syntax form" bm3fa3@src) (bm3f2c@gen-syntax bm3fa3@src bm3fda@e bm3fa5@r bm3fa6@maps (lambda (bm3fdd@x) '#f) '#f))) bm3fd3@ls/false) (let ((bm3fdf@t bm3fd1@t)) (let ((bm3fe1@ls/false (bm30c0@syntax-dispatch bm3fdf@t '(any any . any)))) (if (and bm3fe1@ls/false (apply (lambda (bm3fe3@x bm3fe4@dots bm3fe5@y) (bm3fa7@ellipsis? bm3fe4@dots)) bm3fe1@ls/false)) (apply (lambda (bm3fe9@x bm3fea@dots bm3feb@y) (let bm4001@f ((bm3fef@y bm3feb@y) (bm3ff0@k (lambda (bm3ff3@maps) (call-with-values (lambda () (bm3f2c@gen-syntax bm3fa3@src bm3fe9@x bm3fa5@r (cons '() bm3ff3@maps) bm3fa7@ellipsis? '#f)) (lambda (bm3ff9@bm3ff6 bm3ffa@bm3ff8) (let ((bm3ffd@maps bm3ffa@bm3ff8) (bm3ffe@x bm3ff9@bm3ff6)) (if (null? (car bm3ffd@maps)) (bm31a0@syntax-violation '#f '"extra ellipsis in syntax form" bm3fa3@src) (values (bm3f34@gen-map bm3ffe@x (car bm3ffd@maps)) (cdr bm3ffd@maps))))))))) (let ((bm4003@t bm3fef@y)) (let ((bm4005@ls/false (bm30c0@syntax-dispatch bm4003@t '()))) (if bm4005@ls/false (apply (lambda () (bm3ff0@k bm3fa6@maps)) bm4005@ls/false) (let ((bm4007@t bm4003@t)) (let ((bm4009@ls/false (bm30c0@syntax-dispatch bm4007@t '(any . any)))) (if (and bm4009@ls/false (apply (lambda (bm400b@dots bm400c@y) (bm3fa7@ellipsis? bm400b@dots)) bm4009@ls/false)) (apply (lambda (bm400f@dots bm4010@y) (bm4001@f bm4010@y (lambda (bm4013@maps) (call-with-values (lambda () (bm3ff0@k (cons '() bm4013@maps))) (lambda (bm4019@bm4016 bm401a@bm4018) (let ((bm401d@maps bm401a@bm4018) (bm401e@x bm4019@bm4016)) (if (null? (car bm401d@maps)) (bm31a0@syntax-violation '#f '"extra ellipsis in syntax form" bm3fa3@src) (values (bm3f32@gen-mappend bm401e@x (car bm401d@maps)) (cdr bm401d@maps))))))))) bm4009@ls/false) (let ((bm4021@t bm4007@t)) (let ((bm4023@ls/false (bm30c0@syntax-dispatch bm4021@t '_))) (if bm4023@ls/false (apply (lambda () (call-with-values (lambda () (bm3f2c@gen-syntax bm3fa3@src bm3fef@y bm3fa5@r bm3fa6@maps bm3fa7@ellipsis? bm3fa8@vec?)) (lambda (bm4029@bm4026 bm402a@bm4028) (let ((bm402d@maps bm402a@bm4028) (bm402e@y bm4029@bm4026)) (call-with-values (lambda () (bm3ff0@k bm402d@maps)) (lambda (bm4035@bm4032 bm4036@bm4034) (let ((bm4039@maps bm4036@bm4034) (bm403a@x bm4035@bm4032)) (values (bm3f30@gen-append bm403a@x bm402e@y) bm4039@maps)))))))) bm4023@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4021@t)))))))))))) bm3fe1@ls/false) (let ((bm403d@t bm3fdf@t)) (let ((bm403f@ls/false (bm30c0@syntax-dispatch bm403d@t '(any . any)))) (if bm403f@ls/false (apply (lambda (bm4041@x bm4042@y) (call-with-values (lambda () (bm3f2c@gen-syntax bm3fa3@src bm4041@x bm3fa5@r bm3fa6@maps bm3fa7@ellipsis? '#f)) (lambda (bm4049@bm4046 bm404a@bm4048) (let ((bm404d@maps bm404a@bm4048) (bm404e@xnew bm4049@bm4046)) (call-with-values (lambda () (bm3f2c@gen-syntax bm3fa3@src bm4042@y bm3fa5@r bm404d@maps bm3fa7@ellipsis? bm3fa8@vec?)) (lambda (bm4055@bm4052 bm4056@bm4054) (let ((bm4059@maps bm4056@bm4054) (bm405a@ynew bm4055@bm4052)) (values (bm3f36@gen-cons bm3fa4@e bm4041@x bm4042@y bm404e@xnew bm405a@ynew) bm4059@maps)))))))) bm403f@ls/false) (let ((bm405d@t bm403d@t)) (let ((bm405f@ls/false (bm30c0@syntax-dispatch bm405d@t '#(vector each-any)))) (if bm405f@ls/false (apply (lambda (bm4061@ls) (call-with-values (lambda () (bm3f2c@gen-syntax bm3fa3@src bm4061@ls bm3fa5@r bm3fa6@maps bm3fa7@ellipsis? '#t)) (lambda (bm4067@bm4064 bm4068@bm4066) (let ((bm406b@maps bm4068@bm4066) (bm406c@lsnew bm4067@bm4064)) (values (bm3f38@gen-vector bm3fa4@e bm4061@ls bm406c@lsnew) bm406b@maps))))) bm405f@ls/false) (let ((bm406f@t bm405d@t)) (let ((bm4071@ls/false (bm30c0@syntax-dispatch bm406f@t '_))) (if bm4071@ls/false (apply (lambda () (values (list 'quote bm3fa4@e) bm3fa6@maps)) bm4071@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm406f@t)))))))))))))))))))))))) (bm3f2e@gen-ref (lambda (bm3f89@src bm3f8a@var bm3f8b@level bm3f8c@maps) (if (= bm3f8b@level '0) (values bm3f8a@var bm3f8c@maps) (if (null? bm3f8c@maps) (bm31a0@syntax-violation '#f '"missing ellipsis in syntax form" bm3f89@src) (call-with-values (lambda () (bm3f2e@gen-ref bm3f89@src bm3f8a@var (- bm3f8b@level '1) (cdr bm3f8c@maps))) (lambda (bm3f95@bm3f92 bm3f96@bm3f94) (let ((bm3f99@outer-maps bm3f96@bm3f94) (bm3f9a@outer-var bm3f95@bm3f92)) (let ((bm3f9d@t (assq bm3f9a@outer-var (car bm3f8c@maps)))) (if bm3f9d@t ((lambda (bm3f9f@b) (values (cdr bm3f9f@b) bm3f8c@maps)) bm3f9d@t) (let ((bm3fa1@inner-var (bm2e41@gen-lexical 'tmp))) (values bm3fa1@inner-var (cons (cons (cons bm3f9a@outer-var bm3fa1@inner-var) (car bm3f8c@maps)) bm3f99@outer-maps)))))))))))) (bm3f30@gen-append (lambda (bm3f85@x bm3f86@y) (if (fast-equal? bm3f86@y ''()) bm3f85@x (list 'append bm3f85@x bm3f86@y)))) (bm3f32@gen-mappend (lambda (bm3f81@e bm3f82@map-env) (list 'apply '(primitive append) (bm3f34@gen-map bm3f81@e bm3f82@map-env)))) (bm3f34@gen-map (lambda (bm3f6f@e bm3f70@map-env) (let ((bm3f73@formals (map cdr bm3f70@map-env)) (bm3f74@actuals (map (lambda (bm3f77@x) (list 'ref (car bm3f77@x))) bm3f70@map-env))) (if (eq? (car bm3f6f@e) 'ref) (car bm3f74@actuals) (if (for-all (lambda (bm3f79@x) (and (eq? (car bm3f79@x) 'ref) (memq (cadr bm3f79@x) bm3f73@formals))) (cdr bm3f6f@e)) (let ((bm3f7b@args (map (let ((bm3f7d@r (map cons bm3f73@formals bm3f74@actuals))) (lambda (bm3f7f@x) (cdr (assq (cadr bm3f7f@x) bm3f7d@r)))) (cdr bm3f6f@e)))) (cons 'map (cons (list 'primitive (car bm3f6f@e)) bm3f7b@args))) (cons* 'map (list 'lambda bm3f73@formals bm3f6f@e) bm3f74@actuals)))))) (bm3f36@gen-cons (lambda (bm3f5f@e bm3f60@x bm3f61@y bm3f62@xnew bm3f63@ynew) (let ((bm3f69@t (car bm3f63@ynew))) (if (memv bm3f69@t '(quote)) (if (eq? (car bm3f62@xnew) 'quote) (let ((bm3f6b@xnew (cadr bm3f62@xnew)) (bm3f6c@ynew (cadr bm3f63@ynew))) (if (and (eq? bm3f6b@xnew bm3f60@x) (eq? bm3f6c@ynew bm3f61@y)) (list 'quote bm3f5f@e) (list 'quote (cons bm3f6b@xnew bm3f6c@ynew)))) (if (null? (cadr bm3f63@ynew)) (list 'list bm3f62@xnew) (list 'cons bm3f62@xnew bm3f63@ynew))) (if (memv bm3f69@t '(list)) (cons 'list (cons bm3f62@xnew (cdr bm3f63@ynew))) (list 'cons bm3f62@xnew bm3f63@ynew)))))) (bm3f38@gen-vector (lambda (bm3f59@e bm3f5a@ls bm3f5b@lsnew) (if (eq? (car bm3f5b@lsnew) 'quote) (if (eq? (cadr bm3f5b@lsnew) bm3f5a@ls) (list 'quote bm3f59@e) (list 'quote (list->vector (cadr bm3f5b@lsnew)))) (if (eq? (car bm3f5b@lsnew) 'list) (cons 'vector (cdr bm3f5b@lsnew)) (list 'list->vector bm3f5b@lsnew))))) (bm3f3a@regen (lambda (bm3f53@x) (let ((bm3f55@t (car bm3f53@x))) (if (memv bm3f55@t '(ref)) (cadr bm3f53@x) (if (memv bm3f55@t '(primitive)) (list 'primitive (cadr bm3f53@x)) (if (memv bm3f55@t '(quote)) (list 'quote (cadr bm3f53@x)) (if (memv bm3f55@t '(lambda)) (bm2e1c@bm2d4e@build-lambda '#f (cadr bm3f53@x) (bm3f3a@regen (caddr bm3f53@x))) (if (memv bm3f55@t '(map)) (let ((bm3f57@ls (map bm3f3a@regen (cdr bm3f53@x)))) (cons '(primitive ellipsis-map) bm3f57@ls)) (cons (list 'primitive (car bm3f53@x)) (map bm3f3a@regen (cdr bm3f53@x)))))))))))) (lambda (bm3f3b@e bm3f3c@r bm3f3d@mr) (let ((bm3f41@t bm3f3b@e)) (let ((bm3f43@ls/false (bm30c0@syntax-dispatch bm3f41@t '(_ any)))) (if bm3f43@ls/false (apply (lambda (bm3f45@x) (call-with-values (lambda () (bm3f2c@gen-syntax bm3f3b@e bm3f45@x bm3f3c@r '() bm30c2@ellipsis? '#f)) (lambda (bm3f4b@bm3f48 bm3f4c@bm3f4a) (let ((bm3f4f@maps bm3f4c@bm3f4a) (bm3f50@e bm3f4b@bm3f48)) (bm3f3a@regen bm3f50@e))))) bm3f43@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm3f41@t))))))) (set! bm4b9c@bm30cc@syntax-transformer bm30cc@syntax-transformer) (set! bm30ce@core-macro-transformer (lambda (bm4073@name) (let ((bm4075@t bm4073@name)) (if (memv bm4075@t '(quote)) bm3070@quote-transformer (if (memv bm4075@t '(lambda)) bm3074@lambda-transformer (if (memv bm4075@t '(case-lambda)) bm3072@case-lambda-transformer (if (memv bm4075@t '(letrec)) bm3058@letrec-transformer (if (memv bm4075@t '(letrec*)) bm305a@letrec*-transformer (if (memv bm4075@t '(let)) bm3056@let-transformer (if (memv bm4075@t '(if)) bm3068@if-transformer (if (memv bm4075@t '(and)) bm306a@and-transformer (if (memv bm4075@t '(or)) bm306c@or-transformer (if (memv bm4075@t '(foreign-call)) bm30bc@foreign-call-transformer (if (memv bm4075@t '(syntax-case)) bm30c8@syntax-case-transformer (if (memv bm4075@t '(syntax)) bm30cc@syntax-transformer (if (memv bm4075@t '(type-descriptor)) bm305e@type-descriptor-transformer (if (memv bm4075@t '(record-type-descriptor)) bm3060@record-type-descriptor-transformer (if (memv bm4075@t '(record-constructor-descriptor)) bm3062@record-constructor-descriptor-transformer (if (memv bm4075@t '(fluid-let-syntax)) bm305c@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bm4073@name)))))))))))))))))))) (set! bm4b9d@bm30ce@core-macro-transformer bm30ce@core-macro-transformer) (set! bm30d0@symbol-macro (lambda (bm4077@x bm4078@set) (let ((bm407b@t bm4077@x)) (let ((bm407d@ls/false (bm30c0@syntax-dispatch bm407b@t '(_ any)))) (if (and bm407d@ls/false (apply (lambda (bm407f@name) (and (bm2eb9@id? bm407f@name) (memq (bm2ebb@id->sym bm407f@name) bm4078@set))) bm407d@ls/false)) (apply (lambda (bm4081@name) (bm3076@bless (list 'quote bm4081@name))) bm407d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm407b@t)))))) (set! bm4b9e@bm30d0@symbol-macro bm30d0@symbol-macro) (set! bm30d2@macro-transformer (lambda (bm4083@x) (if (procedure? bm4083@x) bm4083@x (if (symbol? bm4083@x) (let ((bm4085@t bm4083@x)) (if (memv bm4085@t '(define-record-type)) bm30b4@define-record-type-macro (if (memv bm4085@t '(define-struct)) bm30b2@define-struct-macro (if (memv bm4085@t '(include)) bm30a8@include-macro (if (memv bm4085@t '(cond)) bm30a4@cond-macro (if (memv bm4085@t '(let)) bm307c@let-macro (if (memv bm4085@t '(do)) bm309c@do-macro (if (memv bm4085@t '(or)) bm30a0@or-macro (if (memv bm4085@t '(and)) bm30a2@and-macro (if (memv bm4085@t '(let*)) bm309e@let*-macro (if (memv bm4085@t '(let-values)) bm307e@let-values-macro (if (memv bm4085@t '(let*-values)) bm3080@let*-values-macro (if (memv bm4085@t '(syntax-rules)) bm30ac@syntax-rules-macro (if (memv bm4085@t '(quasiquote)) bm30ae@quasiquote-macro (if (memv bm4085@t '(quasisyntax)) bm30b0@quasisyntax-macro (if (memv bm4085@t '(with-syntax)) bm3078@with-syntax-macro (if (memv bm4085@t '(when)) bm3064@when-macro (if (memv bm4085@t '(unless)) bm3066@unless-macro (if (memv bm4085@t '(case)) bm306e@case-macro (if (memv bm4085@t '(identifier-syntax)) bm309a@identifier-syntax-macro (if (memv bm4085@t '(time)) bm3092@time-macro (if (memv bm4085@t '(delay)) bm3094@delay-macro (if (memv bm4085@t '(assert)) bm3096@assert-macro (if (memv bm4085@t '(endianness)) bm3098@endianness-macro (if (memv bm4085@t '(guard)) bm308e@guard-macro (if (memv bm4085@t '(define-enumeration)) bm3090@define-enumeration-macro (if (memv bm4085@t '(trace-lambda)) bm3082@trace-lambda-macro (if (memv bm4085@t '(trace-define)) bm3084@trace-define-macro (if (memv bm4085@t '(trace-define-syntax)) bm3086@trace-define-syntax-macro (if (memv bm4085@t '(trace-let-syntax)) bm308a@trace-let-syntax-macro (if (memv bm4085@t '(trace-letrec-syntax)) bm308c@trace-letrec-syntax-macro (if (memv bm4085@t '(define-condition-type)) bm30b6@define-condition-type-macro (if (memv bm4085@t '(parameterize)) bm30ba@parameterize-macro (if (memv bm4085@t '(include-into)) bm30aa@include-into-macro (if (memv bm4085@t '(eol-style)) (lambda (bm4087@x) (bm30d0@symbol-macro bm4087@x '(none lf cr crlf nel crnel ls))) (if (memv bm4085@t '(error-handling-mode)) (lambda (bm4089@x) (bm30d0@symbol-macro bm4089@x '(ignore raise replace))) (if (memv bm4085@t '(buffer-mode)) (lambda (bm408b@x) (bm30d0@symbol-macro bm408b@x '(none line block))) (if (memv bm4085@t '(file-options)) bm2e34@file-options-macro (if (memv bm4085@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bm30b8@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bm4083@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bm4083@x))))) (set! bm4b9f@bm30d2@macro-transformer bm30d2@macro-transformer) (set! bm30d4@local-macro-transformer (lambda (bm408d@x) (car bm408d@x))) (set! bm4ba0@bm30d4@local-macro-transformer bm30d4@local-macro-transformer) (set! bm30d6@do-macro-call (lambda (bm408f@transformer bm4090@expr) (let ((bm4093@out (bm408f@transformer (bm2ea3@add-mark bm2e9d@anti-mark bm4090@expr '#f)))) (begin (let bm4097@f ((bm4095@x bm4093@out)) (if (not (bm2e85@stx? bm4095@x)) (if (pair? bm4095@x) (begin (bm4097@f (car bm4095@x)) (bm4097@f (cdr bm4095@x))) (if (vector? bm4095@x) (vector-for-each bm4097@f bm4095@x) (if (symbol? bm4095@x) (bm31a0@syntax-violation '#f '"raw symbol encountered in output of macro" bm4090@expr bm4095@x) (void)))) (void))) (bm2ea3@add-mark (bm2e9b@gen-mark) bm4093@out bm4090@expr))))) (set! bm4ba1@bm30d6@do-macro-call bm30d6@do-macro-call) (set! bm30d8@chi-macro (lambda (bm4099@p bm409a@e) (bm30d6@do-macro-call (bm30d2@macro-transformer bm4099@p) bm409a@e))) (set! bm4ba2@bm30d8@chi-macro bm30d8@chi-macro) (set! bm30da@chi-local-macro (lambda (bm409d@p bm409e@e) (bm30d6@do-macro-call (bm30d4@local-macro-transformer bm409d@p) bm409e@e))) (set! bm4ba3@bm30da@chi-local-macro bm30da@chi-local-macro) (set! bm30dc@chi-global-macro (lambda (bm40a1@p bm40a2@e) (let ((bm40a5@lib (car bm40a1@p)) (bm40a6@loc (cdr bm40a1@p))) (begin (bm2cd6@bm2b25@visit-library bm40a5@lib) (let ((bm40a9@x (symbol-value bm40a6@loc))) (let ((bm40ab@transformer (if (procedure? bm40a9@x) bm40a9@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bm40a9@x)))) (bm30d6@do-macro-call bm40ab@transformer bm40a2@e))))))) (set! bm4ba4@bm30dc@chi-global-macro bm30dc@chi-global-macro) (set! bm30de@chi-expr* (lambda (bm40ad@e* bm40ae@r bm40af@mr) (if (null? bm40ad@e*) '() (let ((bm40b3@e (bm30e2@chi-expr (car bm40ad@e*) bm40ae@r bm40af@mr))) (cons bm40b3@e (bm30de@chi-expr* (cdr bm40ad@e*) bm40ae@r bm40af@mr)))))) (set! bm4ba5@bm30de@chi-expr* bm30de@chi-expr*) (set! bm30e0@chi-application (lambda (bm40b5@e bm40b6@r bm40b7@mr) (let ((bm40bb@t bm40b5@e)) (let ((bm40bd@ls/false (bm30c0@syntax-dispatch bm40bb@t '(any . each-any)))) (if bm40bd@ls/false (apply (lambda (bm40bf@rator bm40c0@rands) (let ((bm40c3@rator (bm30e2@chi-expr bm40bf@rator bm40b6@r bm40b7@mr))) (cons bm40c3@rator (bm30de@chi-expr* bm40c0@rands bm40b6@r bm40b7@mr)))) bm40bd@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm40bb@t)))))) (set! bm4ba6@bm30e0@chi-application bm30e0@chi-application) (set! bm30e2@chi-expr (lambda (bm40c5@e bm40c6@r bm40c7@mr) (call-with-values (lambda () (bm2edb@syntax-type bm40c5@e bm40c6@r)) (lambda (bm40d1@bm40cc bm40d2@bm40ce bm40d3@bm40d0) (let ((bm40d7@kwd bm40d3@bm40d0) (bm40d8@value bm40d2@bm40ce) (bm40d9@type bm40d1@bm40cc)) (let ((bm40dd@t bm40d9@type)) (if (memv bm40dd@t '(core-macro)) (let ((bm40df@transformer (bm30ce@core-macro-transformer bm40d8@value))) (bm40df@transformer bm40c5@e bm40c6@r bm40c7@mr)) (if (memv bm40dd@t '(global)) (let ((bm40e1@lib (car bm40d8@value))) (let ((bm40e3@loc (cdr bm40d8@value))) (begin ((bm3128@inv-collector) bm40e1@lib) bm40e3@loc))) (if (memv bm40dd@t '(core-prim)) (let ((bm40e5@name bm40d8@value)) (list 'primitive bm40e5@name)) (if (memv bm40dd@t '(call)) (bm30e0@chi-application bm40c5@e bm40c6@r bm40c7@mr) (if (memv bm40dd@t '(lexical)) (let ((bm40e7@lex (bm304a@lexical-var bm40d8@value))) bm40e7@lex) (if (memv bm40dd@t '(global-macro global-macro!)) (bm30e2@chi-expr (bm30dc@chi-global-macro bm40d8@value bm40c5@e) bm40c6@r bm40c7@mr) (if (memv bm40dd@t '(local-macro local-macro!)) (bm30e2@chi-expr (bm30da@chi-local-macro bm40d8@value bm40c5@e) bm40c6@r bm40c7@mr) (if (memv bm40dd@t '(macro macro!)) (bm30e2@chi-expr (bm30d8@chi-macro bm40d8@value bm40c5@e) bm40c6@r bm40c7@mr) (if (memv bm40dd@t '(constant)) (let ((bm40e9@datum bm40d8@value)) (list 'quote bm40e9@datum)) (if (memv bm40dd@t '(set!)) (bm30e4@chi-set! bm40c5@e bm40c6@r bm40c7@mr) (if (memv bm40dd@t '(begin)) (let ((bm40eb@t bm40c5@e)) (let ((bm40ed@ls/false (bm30c0@syntax-dispatch bm40eb@t '(_ any . each-any)))) (if bm40ed@ls/false (apply (lambda (bm40ef@x bm40f0@x*) (bm2e1e@bm2d7e@build-sequence '#f (bm30de@chi-expr* (cons bm40ef@x bm40f0@x*) bm40c6@r bm40c7@mr))) bm40ed@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm40eb@t)))) (if (memv bm40dd@t '(let-syntax letrec-syntax)) (let ((bm40f3@t bm40c5@e)) (let ((bm40f5@ls/false (bm30c0@syntax-dispatch bm40f3@t '(_ #(each (any any)) any . each-any)))) (if (and bm40f5@ls/false (apply (lambda (bm40f7@xlhs* bm40f8@xrhs* bm40f9@xbody bm40fa@xbody*) (if (not (bm2ec1@valid-bound-ids? bm40f7@xlhs*)) (bm31a0@syntax-violation '#f '"invalid identifiers" bm40c5@e) (void))) bm40f5@ls/false)) (apply (lambda (bm40ff@xlhs* bm4100@xrhs* bm4101@xbody bm4102@xbody*) (let ((bm4107@xlab* (map bm2e45@gen-label bm40ff@xlhs*))) (let ((bm4109@xrib (bm2e79@make-full-rib bm40ff@xlhs* bm4107@xlab*))) (let ((bm410b@xb* (map (lambda (bm410d@x) (bm2ef1@make-eval-transformer (bm311a@expand-transformer (if (eq? bm40d9@type 'let-syntax) bm410d@x (bm2ea5@add-subst bm4109@xrib bm410d@x)) bm40c7@mr))) bm4100@xrhs*))) (bm2e1e@bm2d7e@build-sequence '#f (bm30de@chi-expr* (map (lambda (bm410f@x) (bm2ea5@add-subst bm4109@xrib bm410f@x)) (cons bm4101@xbody bm4102@xbody*)) (append (map cons bm4107@xlab* bm410b@xb*) bm40c6@r) (append (map cons bm4107@xlab* bm410b@xb*) bm40c7@mr))))))) bm40f5@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm40f3@t)))) (if (memv bm40dd@t '(displaced-lexical)) (bm31a0@syntax-violation '#f '"identifier out of context" bm40c5@e) (if (memv bm40dd@t '(syntax)) (bm31a0@syntax-violation '#f '"reference to pattern variable outside a syntax form" bm40c5@e) (if (memv bm40dd@t '(define define-syntax module import library)) (bm31a0@syntax-violation '#f (string-append (let ((bm4111@t bm40d9@type)) (if (memv bm4111@t '(define)) '"a definition" (if (memv bm4111@t '(define-syntax)) '"a define-syntax" (if (memv bm4111@t '(module)) '"a module definition" (if (memv bm4111@t '(library)) '"a library definition" (if (memv bm4111@t '(import)) '"an import declaration" (if (memv bm4111@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bm40c5@e) (if (memv bm40dd@t '(mutable)) (bm31a0@syntax-violation '#f '"attempt to reference an unexportable variable" bm40c5@e) (bm31a0@syntax-violation '#f '"invalid expression" bm40c5@e))))))))))))))))))))))) (set! bm4ba7@bm30e2@chi-expr bm30e2@chi-expr) (set! bm30e4@chi-set! (lambda (bm4113@e bm4114@r bm4115@mr) (let ((bm4119@t bm4113@e)) (let ((bm411b@ls/false (bm30c0@syntax-dispatch bm4119@t '(_ any any)))) (if (and bm411b@ls/false (apply (lambda (bm411d@x bm411e@v) (bm2eb9@id? bm411d@x)) bm411b@ls/false)) (apply (lambda (bm4121@x bm4122@v) (call-with-values (lambda () (bm2edb@syntax-type bm4121@x bm4114@r)) (lambda (bm412b@bm4126 bm412c@bm4128 bm412d@bm412a) (let ((bm4131@kwd bm412d@bm412a) (bm4132@value bm412c@bm4128) (bm4133@type bm412b@bm4126)) (let ((bm4137@t bm4133@type)) (if (memv bm4137@t '(lexical)) (begin (bm304e@set-lexical-mutable! bm4132@value '#t) (list 'set! (bm304a@lexical-var bm4132@value) (bm30e2@chi-expr bm4122@v bm4114@r bm4115@mr))) (if (memv bm4137@t '(core-prim)) (bm31a0@syntax-violation '#f '"cannot modify imported core primitive" bm4113@e) (if (memv bm4137@t '(global)) (bm31a0@syntax-violation '#f '"attempt to modify imported binding" bm4113@e) (if (memv bm4137@t '(global-macro!)) (bm30e2@chi-expr (bm30dc@chi-global-macro bm4132@value bm4113@e) bm4114@r bm4115@mr) (if (memv bm4137@t '(local-macro!)) (bm30e2@chi-expr (bm30da@chi-local-macro bm4132@value bm4113@e) bm4114@r bm4115@mr) (if (memv bm4137@t '(mutable)) (bm31a0@syntax-violation '#f '"attempt to assign to an unexportable variable" bm4113@e) (bm31a0@syntax-violation '#f '"invalid syntax" bm4113@e)))))))))))) bm411b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4119@t)))))) (set! bm4ba8@bm30e4@chi-set! bm30e4@chi-set!) (set! bm30e6@verify-formals (lambda (bm4139@fmls bm413a@stx) (let ((bm413d@t bm4139@fmls)) (let ((bm413f@ls/false (bm30c0@syntax-dispatch bm413d@t 'each-any))) (if bm413f@ls/false (apply (lambda (bm4141@x*) (if (not (bm2ec1@valid-bound-ids? bm4141@x*)) (bm307a@invalid-fmls-error bm413a@stx bm4139@fmls) (void))) bm413f@ls/false) (let ((bm4143@t bm413d@t)) (let ((bm4145@ls/false (bm30c0@syntax-dispatch bm4143@t '#(each+ any () any)))) (if bm4145@ls/false (apply (lambda (bm4147@x* bm4148@x) (if (not (bm2ec1@valid-bound-ids? (cons bm4148@x bm4147@x*))) (bm307a@invalid-fmls-error bm413a@stx bm4139@fmls) (void))) bm4145@ls/false) (let ((bm414b@t bm4143@t)) (let ((bm414d@ls/false (bm30c0@syntax-dispatch bm414b@t '_))) (if bm414d@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid syntax" bm413a@stx)) bm414d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm414b@t)))))))))))) (set! bm4ba9@bm30e6@verify-formals bm30e6@verify-formals) (set! bm30e8@chi-lambda-clause (lambda (bm414f@stx bm4150@fmls bm4151@body* bm4152@r bm4153@mr) (let ((bm4159@t bm4150@fmls)) (let ((bm415b@ls/false (bm30c0@syntax-dispatch bm4159@t 'each-any))) (if bm415b@ls/false (apply (lambda (bm415d@x*) (begin (bm30e6@verify-formals bm4150@fmls bm414f@stx) (let ((bm415f@lex* (map bm2e41@gen-lexical bm415d@x*)) (bm4160@lab* (map bm2e45@gen-label bm415d@x*))) (values bm415f@lex* (bm30f8@chi-internal (bm2ea5@add-subst (bm2e79@make-full-rib bm415d@x* bm4160@lab*) bm4151@body*) (bm3052@add-lexicals bm4160@lab* bm415f@lex* bm4152@r) bm4153@mr))))) bm415b@ls/false) (let ((bm4163@t bm4159@t)) (let ((bm4165@ls/false (bm30c0@syntax-dispatch bm4163@t '#(each+ any () any)))) (if bm4165@ls/false (apply (lambda (bm4167@x* bm4168@x) (begin (bm30e6@verify-formals bm4150@fmls bm414f@stx) (let ((bm416b@lex* (map bm2e41@gen-lexical bm4167@x*)) (bm416c@lab* (map bm2e45@gen-label bm4167@x*)) (bm416d@lex (bm2e41@gen-lexical bm4168@x)) (bm416e@lab (bm2e45@gen-label bm4168@x))) (values (append bm416b@lex* bm416d@lex) (bm30f8@chi-internal (bm2ea5@add-subst (bm2e79@make-full-rib (cons bm4168@x bm4167@x*) (cons bm416e@lab bm416c@lab*)) bm4151@body*) (bm3052@add-lexicals (cons bm416e@lab bm416c@lab*) (cons bm416d@lex bm416b@lex*) bm4152@r) bm4153@mr))))) bm4165@ls/false) (let ((bm4173@t bm4163@t)) (let ((bm4175@ls/false (bm30c0@syntax-dispatch bm4173@t '_))) (if bm4175@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid syntax" bm4150@fmls)) bm4175@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4173@t)))))))))))) (set! bm4baa@bm30e8@chi-lambda-clause bm30e8@chi-lambda-clause) (set! bm30ea@chi-lambda-clause* (lambda (bm4177@stx bm4178@fmls* bm4179@body** bm417a@r bm417b@mr) (if (null? bm4178@fmls*) (values '() '()) (call-with-values (lambda () (bm30e8@chi-lambda-clause bm4177@stx (car bm4178@fmls*) (car bm4179@body**) bm417a@r bm417b@mr)) (lambda (bm4185@bm4182 bm4186@bm4184) (let ((bm4189@b bm4186@bm4184) (bm418a@a bm4185@bm4182)) (call-with-values (lambda () (bm30ea@chi-lambda-clause* bm4177@stx (cdr bm4178@fmls*) (cdr bm4179@body**) bm417a@r bm417b@mr)) (lambda (bm4191@bm418e bm4192@bm4190) (let ((bm4195@b* bm4192@bm4190) (bm4196@a* bm4191@bm418e)) (values (cons bm418a@a bm4196@a*) (cons bm4189@b bm4195@b*))))))))))) (set! bm4bab@bm30ea@chi-lambda-clause* bm30ea@chi-lambda-clause*) (set! bm30ec@chi-defun (lambda (bm4199@x bm419a@r bm419b@mr) (let ((bm419f@fmls (car bm4199@x)) (bm41a0@body* (cdr bm4199@x))) (call-with-values (lambda () (bm30e8@chi-lambda-clause bm419f@fmls bm419f@fmls bm41a0@body* bm419a@r bm419b@mr)) (lambda (bm41a7@bm41a4 bm41a8@bm41a6) (let ((bm41ab@body bm41a8@bm41a6) (bm41ac@fmls bm41a7@bm41a4)) (bm2e1c@bm2d4e@build-lambda '#f bm41ac@fmls bm41ab@body))))))) (set! bm4bac@bm30ec@chi-defun bm30ec@chi-defun) (set! bm30ee@chi-rhs (lambda (bm41af@rhs bm41b0@r bm41b1@mr) (let ((bm41b5@t (car bm41af@rhs))) (if (memv bm41b5@t '(defun)) (bm30ec@chi-defun (cdr bm41af@rhs) bm41b0@r bm41b1@mr) (if (memv bm41b5@t '(expr)) (let ((bm41b7@expr (cdr bm41af@rhs))) (bm30e2@chi-expr bm41b7@expr bm41b0@r bm41b1@mr)) (if (memv bm41b5@t '(top-expr)) (let ((bm41b9@expr (cdr bm41af@rhs))) (bm2e1e@bm2d7e@build-sequence '#f (list (bm30e2@chi-expr bm41b9@expr bm41b0@r bm41b1@mr) (bm2e1f@bm2d80@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bm41af@rhs))))))) (set! bm4bad@bm30ee@chi-rhs bm30ee@chi-rhs) (set! bm30f0@expand-interaction-rhs*/init* (lambda (bm41bb@lhs* bm41bc@rhs* bm41bd@init* bm41be@r bm41bf@mr) (let bm41c9@f ((bm41c5@lhs* bm41bb@lhs*) (bm41c6@rhs* bm41bc@rhs*)) (if (null? bm41c5@lhs*) (map (lambda (bm41cb@x) (bm30e2@chi-expr bm41cb@x bm41be@r bm41bf@mr)) bm41bd@init*) (let ((bm41cd@lhs (car bm41c5@lhs*)) (bm41ce@rhs (car bm41c6@rhs*))) (let ((bm41d1@t (car bm41ce@rhs))) (if (memv bm41d1@t '(defun)) (let ((bm41d3@rhs (bm30ec@chi-defun (cdr bm41ce@rhs) bm41be@r bm41bf@mr))) (cons (list 'set! bm41cd@lhs bm41d3@rhs) (bm41c9@f (cdr bm41c5@lhs*) (cdr bm41c6@rhs*)))) (if (memv bm41d1@t '(expr)) (let ((bm41d5@rhs (bm30e2@chi-expr (cdr bm41ce@rhs) bm41be@r bm41bf@mr))) (cons (list 'set! bm41cd@lhs bm41d5@rhs) (bm41c9@f (cdr bm41c5@lhs*) (cdr bm41c6@rhs*)))) (if (memv bm41d1@t '(top-expr)) (let ((bm41d7@e (bm30e2@chi-expr (cdr bm41ce@rhs) bm41be@r bm41bf@mr))) (cons bm41d7@e (bm41c9@f (cdr bm41c5@lhs*) (cdr bm41c6@rhs*)))) (error 'expand-interaction '"invallid" bm41ce@rhs)))))))))) (set! bm4bae@bm30f0@expand-interaction-rhs*/init* bm30f0@expand-interaction-rhs*/init*) (set! bm30f2@chi-rhs* (lambda (bm41d9@rhs* bm41da@r bm41db@mr) (let bm41e1@f ((bm41df@ls bm41d9@rhs*)) (if (null? bm41df@ls) '() (let ((bm41e3@a (bm30ee@chi-rhs (car bm41df@ls) bm41da@r bm41db@mr))) (cons bm41e3@a (bm41e1@f (cdr bm41df@ls)))))))) (set! bm4baf@bm30f2@chi-rhs* bm30f2@chi-rhs*) (set! bm30f4@find-bound=? (lambda (bm41e5@x bm41e6@lhs* bm41e7@rhs*) (if (null? bm41e6@lhs*) '#f (if (bm2ebd@bound-id=? bm41e5@x (car bm41e6@lhs*)) (car bm41e7@rhs*) (bm30f4@find-bound=? bm41e5@x (cdr bm41e6@lhs*) (cdr bm41e7@rhs*)))))) (set! bm4bb0@bm30f4@find-bound=? bm30f4@find-bound=?) (set! bm30f6@find-dups (lambda (bm41eb@ls) (let bm41f1@f ((bm41ed@ls bm41eb@ls) (bm41ee@dups '())) (if (null? bm41ed@ls) bm41ee@dups (let ((bm41f3@t (bm30f4@find-bound=? (car bm41ed@ls) (cdr bm41ed@ls) (cdr bm41ed@ls)))) (if bm41f3@t ((lambda (bm41f5@x) (bm41f1@f (cdr bm41ed@ls) (cons (list (car bm41ed@ls) bm41f5@x) bm41ee@dups))) bm41f3@t) (bm41f1@f (cdr bm41ed@ls) bm41ee@dups))))))) (set! bm4bb1@bm30f6@find-dups bm30f6@find-dups) (set! bm30f8@chi-internal (lambda (bm41f7@e* bm41f8@r bm41f9@mr) (let ((bm41fd@rib (bm2e6d@make-empty-rib))) (call-with-values (lambda () (bm3118@chi-body* (map (lambda (bm420f@x) (bm2ea5@add-subst bm41fd@rib bm420f@x)) (bm2eb7@syntax->list bm41f7@e*)) bm41f8@r bm41f9@mr '() '() '() '() '() bm41fd@rib '#f)) (lambda (bm4211@bm4200 bm4212@bm4202 bm4213@bm4204 bm4214@bm4206 bm4215@bm4208 bm4216@bm420a bm4217@bm420c bm4218@bm420e) (let ((bm4221@_exp* bm4218@bm420e) (bm4222@kwd* bm4217@bm420c) (bm4223@mod** bm4216@bm420a) (bm4224@rhs* bm4215@bm4208) (bm4225@lex* bm4214@bm4206) (bm4226@mr bm4213@bm4204) (bm4227@r bm4212@bm4202) (bm4228@e* bm4211@bm4200)) (begin (if (null? bm4228@e*) (bm31a0@syntax-violation '#f '"no expression in body" bm4228@e*) (void)) (let ((bm4231@init* (bm30de@chi-expr* (append (apply append (reverse bm4223@mod**)) bm4228@e*) bm4227@r bm4226@mr))) (let ((bm4233@rhs* (bm30f2@chi-rhs* bm4224@rhs* bm4227@r bm4226@mr))) (bm2e23@bm2d88@build-letrec* '#f (reverse bm4225@lex*) (reverse bm4233@rhs*) (bm2e1e@bm2d7e@build-sequence '#f bm4231@init*))))))))))) (set! bm4bb2@bm30f8@chi-internal bm30f8@chi-internal) (set! bm30fa@parse-module (lambda (bm4235@e) (let ((bm4237@t bm4235@e)) (let ((bm4239@ls/false (bm30c0@syntax-dispatch bm4237@t '(_ each-any . each-any)))) (if bm4239@ls/false (apply (lambda (bm423b@export* bm423c@b*) (begin (if (not (for-all bm2eb9@id? bm423b@export*)) (bm31a0@syntax-violation '#f '"module exports must be identifiers" bm4235@e) (void)) (values '#f (list->vector bm423b@export*) bm423c@b*))) bm4239@ls/false) (let ((bm423f@t bm4237@t)) (let ((bm4241@ls/false (bm30c0@syntax-dispatch bm423f@t '(_ any each-any . each-any)))) (if bm4241@ls/false (apply (lambda (bm4243@name bm4244@export* bm4245@b*) (begin (if (not (bm2eb9@id? bm4243@name)) (bm31a0@syntax-violation '#f '"module name must be an identifier" bm4235@e) (void)) (if (not (for-all bm2eb9@id? bm4244@export*)) (bm31a0@syntax-violation '#f '"module exports must be identifiers" bm4235@e) (void)) (values bm4243@name (list->vector bm4244@export*) bm4245@b*))) bm4241@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm423f@t))))))))) (set! bm4bb3@bm30fa@parse-module bm30fa@parse-module) (set! bm3104@module-interface? (lambda (bm4249@x) (and (simple-struct? bm4249@x) (eq? (simple-struct-name bm4249@x) 'module-interface)))) (set! bm4bb4@bm3104@module-interface? bm3104@module-interface?) (set! bm3106@module-interface-first-mark (lambda (bm424b@x) (simple-struct-ref bm424b@x '0))) (set! bm4bb5@bm3106@module-interface-first-mark bm3106@module-interface-first-mark) (set! bm3108@set-module-interface-first-mark! (lambda (bm424d@x bm424e@val) (simple-struct-set! bm424d@x '0 bm424e@val))) (set! bm4bb6@bm3108@set-module-interface-first-mark! bm3108@set-module-interface-first-mark!) (set! bm310a@module-interface-exp-id-vec (lambda (bm4251@x) (simple-struct-ref bm4251@x '1))) (set! bm4bb7@bm310a@module-interface-exp-id-vec bm310a@module-interface-exp-id-vec) (set! bm310c@set-module-interface-exp-id-vec! (lambda (bm4253@x bm4254@val) (simple-struct-set! bm4253@x '1 bm4254@val))) (set! bm4bb8@bm310c@set-module-interface-exp-id-vec! bm310c@set-module-interface-exp-id-vec!) (set! bm310e@module-interface-exp-lab-vec (lambda (bm4257@x) (simple-struct-ref bm4257@x '2))) (set! bm4bb9@bm310e@module-interface-exp-lab-vec bm310e@module-interface-exp-lab-vec) (set! bm3110@set-module-interface-exp-lab-vec! (lambda (bm4259@x bm425a@val) (simple-struct-set! bm4259@x '2 bm425a@val))) (set! bm4bba@bm3110@set-module-interface-exp-lab-vec! bm3110@set-module-interface-exp-lab-vec!) (set! bm3112@dummy '3) (set! bm4bbb@bm3112@dummy bm3112@dummy) (set! bm3114@module-interface-exp-id* (lambda (bm425d@iface bm425e@id) (letrec* ((bm4262@diff-marks (lambda (bm4269@ls bm426a@x) (begin (if (null? bm4269@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bm426d@a (car bm4269@ls))) (if (eq? bm426d@a bm426a@x) '() (cons bm426d@a (bm4262@diff-marks (cdr bm4269@ls) bm426a@x)))))))) (let ((bm4263@diff (bm4262@diff-marks (bm2e8b@stx-mark* bm425e@id) (bm3106@module-interface-first-mark bm425d@iface))) (bm4264@id-vec (bm310a@module-interface-exp-id-vec bm425d@iface))) (if (null? bm4263@diff) bm4264@id-vec (vector-map (lambda (bm4267@x) (make-simple-struct 'stx '5 (list (bm2e87@stx-expr bm4267@x) (append bm4263@diff (bm2e8b@stx-mark* bm4267@x)) '() '()))) bm4264@id-vec)))))) (set! bm4bbc@bm3114@module-interface-exp-id* bm3114@module-interface-exp-id*) (set! bm3116@chi-internal-module (lambda (bm426f@e bm4270@r bm4271@mr bm4272@lex* bm4273@rhs* bm4274@mod** bm4275@kwd*) (call-with-values (lambda () (bm30fa@parse-module bm426f@e)) (lambda (bm4283@bm427e bm4284@bm4280 bm4285@bm4282) (let ((bm4289@e* bm4285@bm4282) (bm428a@exp-id* bm4284@bm4280) (bm428b@name bm4283@bm427e)) (let ((bm428f@rib (bm2e6d@make-empty-rib))) (let ((bm4291@e* (map (lambda (bm4293@x) (bm2ea5@add-subst bm428f@rib bm4293@x)) (bm2eb7@syntax->list bm4289@e*)))) (call-with-values (lambda () (bm3118@chi-body* bm4291@e* bm4270@r bm4271@mr bm4272@lex* bm4273@rhs* bm4274@mod** bm4275@kwd* '() bm428f@rib '#f)) (lambda (bm42a5@bm4296 bm42a6@bm4298 bm42a7@bm429a bm42a8@bm429c bm42a9@bm429e bm42aa@bm42a0 bm42ab@bm42a2 bm42ac@bm42a4) (let ((bm42b5@_exp* bm42ac@bm42a4) (bm42b6@kwd* bm42ab@bm42a2) (bm42b7@mod** bm42aa@bm42a0) (bm42b8@rhs* bm42a9@bm429e) (bm42b9@lex* bm42a8@bm429c) (bm42ba@mr bm42a7@bm429a) (bm42bb@r bm42a6@bm4298) (bm42bc@e* bm42a5@bm4296)) (let ((bm42c5@exp-lab* (vector-map (lambda (bm42c9@x) (or (bm2ecf@id->label (make-simple-struct 'stx '5 (list (bm2ebb@id->sym bm42c9@x) (bm2e8b@stx-mark* bm42c9@x) (list bm428f@rib) '()))) (bm31a0@syntax-violation '#f '"cannot find module export" bm42c9@x))) bm428a@exp-id*)) (bm42c6@mod** (cons bm42bc@e* bm42b7@mod**))) (if (not bm428b@name) (values bm42b9@lex* bm42b8@rhs* bm428a@exp-id* bm42c5@exp-lab* bm42bb@r bm42ba@mr bm42c6@mod** bm42b6@kwd*) (let ((bm42cb@lab (bm2e45@gen-label 'module)) (bm42cc@iface (make-simple-struct 'module-interface '4 (list (car (bm2e8b@stx-mark* bm428b@name)) (vector-map (lambda (bm42cf@x) (make-simple-struct 'stx '5 (list (bm2e87@stx-expr bm42cf@x) (bm2e8b@stx-mark* bm42cf@x) '() '()))) bm428a@exp-id*) bm42c5@exp-lab*)))) (values bm42b9@lex* bm42b8@rhs* (vector bm428b@name) (vector bm42cb@lab) (cons (cons bm42cb@lab (cons '$module bm42cc@iface)) bm42bb@r) (cons (cons bm42cb@lab (cons '$module bm42cc@iface)) bm42ba@mr) bm42c6@mod** bm42b6@kwd*)))))))))))))) (set! bm4bbd@bm3116@chi-internal-module bm3116@chi-internal-module) (set! bm3118@chi-body* (lambda (bm42d1@e* bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42d7@kwd* bm42d8@exp* bm42d9@rib bm42da@top?) (if (null? bm42d1@e*) (values bm42d1@e* bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42d7@kwd* bm42d8@exp*) (let ((bm42e5@e (car bm42d1@e*))) (call-with-values (lambda () (bm2edb@syntax-type bm42e5@e bm42d2@r)) (lambda (bm42ed@bm42e8 bm42ee@bm42ea bm42ef@bm42ec) (let ((bm42f3@kwd bm42ef@bm42ec) (bm42f4@value bm42ee@bm42ea) (bm42f5@type bm42ed@bm42e8)) (let ((bm42f9@kwd* (if (bm2eb9@id? bm42f3@kwd) (cons bm42f3@kwd bm42d7@kwd*) bm42d7@kwd*))) (let ((bm42fb@t bm42f5@type)) (if (memv bm42fb@t '(define)) (call-with-values (lambda () (bm3042@parse-define bm42e5@e)) (lambda (bm4301@bm42fe bm4302@bm4300) (let ((bm4305@rhs bm4302@bm4300) (bm4306@id bm4301@bm42fe)) (begin (if (bm2ec5@bound-id-member? bm4306@id bm42f9@kwd*) (bm31a0@syntax-violation '#f '"cannot redefine keyword" bm42e5@e) (void)) (call-with-values (lambda () (bm2e49@gen-define-label+loc bm4306@id bm42d9@rib)) (lambda (bm430d@bm430a bm430e@bm430c) (let ((bm4311@lex bm430e@bm430c) (bm4312@lab bm430d@bm430a)) (begin (bm2e6f@extend-rib! bm42d9@rib bm4306@id bm4312@lab) (bm3118@chi-body* (cdr bm42d1@e*) (bm3050@add-lexical bm4312@lab bm4311@lex bm42d2@r) bm42d3@mr (cons bm4311@lex bm42d4@lex*) (cons bm4305@rhs bm42d5@rhs*) bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?))))))))) (if (memv bm42fb@t '(define-syntax)) (call-with-values (lambda () (bm3044@parse-define-syntax bm42e5@e)) (lambda (bm4319@bm4316 bm431a@bm4318) (let ((bm431d@rhs bm431a@bm4318) (bm431e@id bm4319@bm4316)) (begin (if (bm2ec5@bound-id-member? bm431e@id bm42f9@kwd*) (bm31a0@syntax-violation '#f '"cannot redefine keyword" bm42e5@e) (void)) (let ((bm4321@lab (bm2e4b@gen-define-label bm431e@id bm42d9@rib)) (bm4322@expanded-rhs (bm311a@expand-transformer bm431d@rhs bm42d3@mr))) (begin (bm2e6f@extend-rib! bm42d9@rib bm431e@id bm4321@lab) (let ((bm4325@b (bm2ef1@make-eval-transformer bm4322@expanded-rhs))) (bm3118@chi-body* (cdr bm42d1@e*) (cons (cons bm4321@lab bm4325@b) bm42d2@r) (cons (cons bm4321@lab bm4325@b) bm42d3@mr) bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?)))))))) (if (memv bm42fb@t '(let-syntax letrec-syntax)) (let ((bm4327@t bm42e5@e)) (let ((bm4329@ls/false (bm30c0@syntax-dispatch bm4327@t '(_ #(each (any any)) . each-any)))) (if (and bm4329@ls/false (apply (lambda (bm432b@xlhs* bm432c@xrhs* bm432d@xbody*) (if (not (bm2ec1@valid-bound-ids? bm432b@xlhs*)) (bm31a0@syntax-violation '#f '"invalid identifiers" bm42e5@e) (void))) bm4329@ls/false)) (apply (lambda (bm4331@xlhs* bm4332@xrhs* bm4333@xbody*) (let ((bm4337@xlab* (map bm2e45@gen-label bm4331@xlhs*))) (let ((bm4339@xrib (bm2e79@make-full-rib bm4331@xlhs* bm4337@xlab*))) (let ((bm433b@xb* (map (lambda (bm433d@x) (bm2ef1@make-eval-transformer (bm311a@expand-transformer (if (eq? bm42f5@type 'let-syntax) bm433d@x (bm2ea5@add-subst bm4339@xrib bm433d@x)) bm42d3@mr))) bm4332@xrhs*))) (bm3118@chi-body* (append (map (lambda (bm433f@x) (bm2ea5@add-subst bm4339@xrib bm433f@x)) bm4333@xbody*) (cdr bm42d1@e*)) (append (map cons bm4337@xlab* bm433b@xb*) bm42d2@r) (append (map cons bm4337@xlab* bm433b@xb*) bm42d3@mr) bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?))))) bm4329@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4327@t)))) (if (memv bm42fb@t '(begin)) (let ((bm4341@t bm42e5@e)) (let ((bm4343@ls/false (bm30c0@syntax-dispatch bm4341@t '(_ . each-any)))) (if bm4343@ls/false (apply (lambda (bm4345@x*) (bm3118@chi-body* (append bm4345@x* (cdr bm42d1@e*)) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?)) bm4343@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4341@t)))) (if (memv bm42fb@t '(global-macro global-macro!)) (bm3118@chi-body* (cons (bm2ea5@add-subst bm42d9@rib (bm30dc@chi-global-macro bm42f4@value bm42e5@e)) (cdr bm42d1@e*)) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?) (if (memv bm42fb@t '(local-macro local-macro!)) (bm3118@chi-body* (cons (bm2ea5@add-subst bm42d9@rib (bm30da@chi-local-macro bm42f4@value bm42e5@e)) (cdr bm42d1@e*)) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?) (if (memv bm42fb@t '(macro macro!)) (bm3118@chi-body* (cons (bm2ea5@add-subst bm42d9@rib (bm30d8@chi-macro bm42f4@value bm42e5@e)) (cdr bm42d1@e*)) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?) (if (memv bm42fb@t '(module)) (call-with-values (lambda () (bm3116@chi-internal-module bm42e5@e bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd*)) (lambda (bm4357@bm4348 bm4358@bm434a bm4359@bm434c bm435a@bm434e bm435b@bm4350 bm435c@bm4352 bm435d@bm4354 bm435e@bm4356) (let ((bm4367@kwd* bm435e@bm4356) (bm4368@mod** bm435d@bm4354) (bm4369@mr bm435c@bm4352) (bm436a@r bm435b@bm4350) (bm436b@m-exp-lab* bm435a@bm434e) (bm436c@m-exp-id* bm4359@bm434c) (bm436d@rhs* bm4358@bm434a) (bm436e@lex* bm4357@bm4348)) (begin (vector-for-each (lambda (bm4377@id bm4378@lab) (bm2e6f@extend-rib! bm42d9@rib bm4377@id bm4378@lab)) bm436c@m-exp-id* bm436b@m-exp-lab*) (bm3118@chi-body* (cdr bm42d1@e*) bm436a@r bm4369@mr bm436e@lex* bm436d@rhs* bm4368@mod** bm4367@kwd* bm42d8@exp* bm42d9@rib bm42da@top?))))) (if (memv bm42fb@t '(library)) (begin (bm3182@library-expander (bm2ecd@stx->datum bm42e5@e)) (bm3118@chi-body* (cdr bm42d1@e*) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?)) (if (memv bm42fb@t '(export)) (let ((bm437b@t bm42e5@e)) (let ((bm437d@ls/false (bm30c0@syntax-dispatch bm437b@t '(_ . each-any)))) (if bm437d@ls/false (apply (lambda (bm437f@exp-decl*) (bm3118@chi-body* (cdr bm42d1@e*) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* (append bm437f@exp-decl* bm42d8@exp*) bm42d9@rib bm42da@top?)) bm437d@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm437b@t)))) (if (memv bm42fb@t '(import)) (letrec* ((bm4382@module-import? (lambda (bm43d5@e) (let ((bm43d7@t bm43d5@e)) (let ((bm43d9@ls/false (bm30c0@syntax-dispatch bm43d7@t '(_ any)))) (if (and bm43d9@ls/false (apply (lambda (bm43db@id) (bm2eb9@id? bm43db@id)) bm43d9@ls/false)) (apply (lambda (bm43dd@id) '#t) bm43d9@ls/false) (let ((bm43df@t bm43d7@t)) (let ((bm43e1@ls/false (bm30c0@syntax-dispatch bm43df@t '(_ . each-any)))) (if bm43e1@ls/false (apply (lambda (bm43e3@imp*) '#f) bm43e1@ls/false) (let ((bm43e5@t bm43df@t)) (let ((bm43e7@ls/false (bm30c0@syntax-dispatch bm43e5@t '_))) (if bm43e7@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"malformed import form" bm43d5@e)) bm43e7@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm43e5@t)))))))))))) (bm4384@module-import (lambda (bm43b3@e bm43b4@r) (let ((bm43b7@t bm43b3@e)) (let ((bm43b9@ls/false (bm30c0@syntax-dispatch bm43b7@t '(_ any)))) (if (and bm43b9@ls/false (apply (lambda (bm43bb@id) (bm2eb9@id? bm43bb@id)) bm43b9@ls/false)) (apply (lambda (bm43bd@id) (call-with-values (lambda () (bm2edb@syntax-type bm43bd@id bm43b4@r)) (lambda (bm43c5@bm43c0 bm43c6@bm43c2 bm43c7@bm43c4) (let ((bm43cb@kwd bm43c7@bm43c4) (bm43cc@value bm43c6@bm43c2) (bm43cd@type bm43c5@bm43c0)) (let ((bm43d1@t bm43cd@type)) (if (memv bm43d1@t '($module)) (let ((bm43d3@iface bm43cc@value)) (values (bm3114@module-interface-exp-id* bm43d3@iface bm43bd@id) (bm310e@module-interface-exp-lab-vec bm43d3@iface))) (bm31a0@syntax-violation '#f '"invalid import" bm43b3@e))))))) bm43b9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm43b7@t)))))) (bm4386@library-import (lambda (bm4397@e) (let ((bm4399@t bm4397@e)) (let ((bm439b@ls/false (bm30c0@syntax-dispatch bm4399@t '(any . each-any)))) (if bm439b@ls/false (apply (lambda (bm439d@ctxt bm439e@imp*) (call-with-values (lambda () (bm3122@parse-import-spec* (bm31a6@syntax->datum bm439e@imp*))) (lambda (bm43a5@bm43a2 bm43a6@bm43a4) (let ((bm43a9@subst-labels bm43a6@bm43a4) (bm43aa@subst-names bm43a5@bm43a2)) (values (vector-map (lambda (bm43ad@name) (bm2e99@datum->stx bm439d@ctxt bm43ad@name)) bm43aa@subst-names) bm43a9@subst-labels))))) bm439b@ls/false) (let ((bm43af@t bm4399@t)) (let ((bm43b1@ls/false (bm30c0@syntax-dispatch bm43af@t '_))) (if bm43b1@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid import form" bm4397@e)) bm43b1@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm43af@t)))))))))) (begin (call-with-values (lambda () (if (bm4382@module-import? bm42e5@e) (bm4384@module-import bm42e5@e bm42d2@r) (bm4386@library-import bm42e5@e))) (lambda (bm438b@bm4388 bm438c@bm438a) (let ((bm438f@lab* bm438c@bm438a) (bm4390@id* bm438b@bm4388)) (vector-for-each (lambda (bm4393@id bm4394@lab) (bm2e6f@extend-rib! bm42d9@rib bm4393@id bm4394@lab)) bm4390@id* bm438f@lab*)))) (bm3118@chi-body* (cdr bm42d1@e*) bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?))) (if bm42da@top? (bm3118@chi-body* (cdr bm42d1@e*) bm42d2@r bm42d3@mr (cons (bm2e41@gen-lexical 'dummy) bm42d4@lex*) (cons (cons 'top-expr bm42e5@e) bm42d5@rhs*) bm42d6@mod** bm42f9@kwd* bm42d8@exp* bm42d9@rib bm42da@top?) (values bm42d1@e* bm42d2@r bm42d3@mr bm42d4@lex* bm42d5@rhs* bm42d6@mod** bm42f9@kwd* bm42d8@exp*)))))))))))))))))))))) (set! bm4bbe@bm3118@chi-body* bm3118@chi-body*) (set! bm311a@expand-transformer (lambda (bm43e9@expr bm43ea@r) (let ((bm43ed@rtc (bm3126@make-collector))) (let ((bm43ef@expanded-rhs (let ((bm43f9@bm43f2 bm3128@inv-collector) (bm43fa@bm43f4 bm312a@vis-collector) (bm43fb@bm43f6 bm43ed@rtc) (bm43fc@bm43f8 (lambda (bm4401@x) (values)))) (let ((bm4403@swap (lambda () (begin (let ((bm4405@t (bm43f9@bm43f2))) (begin (bm43f9@bm43f2 bm43fb@bm43f6) (set! bm43fb@bm43f6 bm4405@t))) (let ((bm4407@t (bm43fa@bm43f4))) (begin (bm43fa@bm43f4 bm43fc@bm43f8) (set! bm43fc@bm43f8 bm4407@t))))))) (dynamic-wind bm4403@swap (lambda () (bm30e2@chi-expr bm43e9@expr bm43ea@r bm43ea@r)) bm4403@swap))))) (begin (for-each (let ((bm4409@mark-visit (bm312a@vis-collector))) (lambda (bm440b@x) (begin (bm2cd5@bm2b23@invoke-library bm440b@x) (bm4409@mark-visit bm440b@x)))) (bm43ed@rtc)) bm43ef@expanded-rhs))))) (set! bm4bbf@bm311a@expand-transformer bm311a@expand-transformer) (set! bm311c@parse-exports (lambda (bm440d@exp*) (let bm4415@f ((bm440f@exp* bm440d@exp*) (bm4410@int* '()) (bm4411@ext* '())) (if (null? bm440f@exp*) (begin (if (not (bm2ec1@valid-bound-ids? bm4411@ext*)) (bm31a0@syntax-violation 'export '"invalid exports" (bm30f6@find-dups bm4411@ext*)) (void)) (values (map bm31a6@syntax->datum bm4411@ext*) bm4410@int*)) (let ((bm4417@t (car bm440f@exp*))) (let ((bm4419@ls/false (bm30c0@syntax-dispatch bm4417@t '(any . #(each (any any)))))) (if bm4419@ls/false (apply (lambda (bm441b@rename bm441c@i* bm441d@e*) (begin (if (not (and (eq? (bm31a6@syntax->datum bm441b@rename) 'rename) (for-all bm2eb9@id? bm441c@i*) (for-all bm2eb9@id? bm441d@e*))) (bm31a0@syntax-violation 'export '"invalid export specifier" (car bm440f@exp*)) (void)) (bm4415@f (cdr bm440f@exp*) (append bm441c@i* bm4410@int*) (append bm441d@e* bm4411@ext*)))) bm4419@ls/false) (let ((bm4421@t bm4417@t)) (let ((bm4423@ls/false (bm30c0@syntax-dispatch bm4421@t 'any))) (if bm4423@ls/false (apply (lambda (bm4425@ie) (begin (if (not (bm2eb9@id? bm4425@ie)) (bm31a0@syntax-violation 'export '"invalid export" bm4425@ie) (void)) (bm4415@f (cdr bm440f@exp*) (cons bm4425@ie bm4410@int*) (cons bm4425@ie bm4411@ext*)))) bm4423@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4421@t))))))))))) (set! bm4bc0@bm311c@parse-exports bm311c@parse-exports) (set! bm311e@parse-library-name (lambda (bm4427@spec) (letrec* ((bm442a@parse (lambda (bm4437@x) (let ((bm4439@t bm4437@x)) (let ((bm443b@ls/false (bm30c0@syntax-dispatch bm4439@t '(each-any)))) (if (and bm443b@ls/false (apply (lambda (bm443d@v*) (for-all (lambda (bm443f@x) (let ((bm4441@x (bm31a6@syntax->datum bm443f@x))) (and (integer? bm4441@x) (exact? bm4441@x)))) bm443d@v*)) bm443b@ls/false)) (apply (lambda (bm4443@v*) (values '() (map bm31a6@syntax->datum bm4443@v*))) bm443b@ls/false) (let ((bm4445@t bm4439@t)) (let ((bm4447@ls/false (bm30c0@syntax-dispatch bm4445@t '(any . any)))) (if (and bm4447@ls/false (apply (lambda (bm4449@x bm444a@rest) (symbol? (bm31a6@syntax->datum bm4449@x))) bm4447@ls/false)) (apply (lambda (bm444d@x bm444e@rest) (call-with-values (lambda () (bm442a@parse bm444e@rest)) (lambda (bm4455@bm4452 bm4456@bm4454) (let ((bm4459@v* bm4456@bm4454) (bm445a@x* bm4455@bm4452)) (values (cons (bm31a6@syntax->datum bm444d@x) bm445a@x*) bm4459@v*))))) bm4447@ls/false) (let ((bm445d@t bm4445@t)) (let ((bm445f@ls/false (bm30c0@syntax-dispatch bm445d@t '()))) (if bm445f@ls/false (apply (lambda () (values '() '())) bm445f@ls/false) (let ((bm4461@t bm445d@t)) (let ((bm4463@ls/false (bm30c0@syntax-dispatch bm4461@t '_))) (if bm4463@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid library name" bm4427@spec)) bm4463@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4461@t)))))))))))))))) (call-with-values (lambda () (bm442a@parse bm4427@spec)) (lambda (bm442f@bm442c bm4430@bm442e) (let ((bm4433@ver* bm4430@bm442e) (bm4434@name* bm442f@bm442c)) (begin (if (null? bm4434@name*) (bm31a0@syntax-violation '#f '"empty library name" bm4427@spec) (void)) (values bm4434@name* bm4433@ver*)))))))) (set! bm4bc1@bm311e@parse-library-name bm311e@parse-library-name) (set! bm3120@parse-library (lambda (bm4465@e) (let ((bm4467@t bm4465@e)) (let ((bm4469@ls/false (bm30c0@syntax-dispatch bm4467@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bm4469@ls/false (apply (lambda (bm446b@library bm446c@name* bm446d@export bm446e@exp* bm446f@import bm4470@imp* bm4471@b*) (and (eq? (bm31a6@syntax->datum bm446d@export) 'export) (eq? (bm31a6@syntax->datum bm446f@import) 'import) (eq? (bm31a6@syntax->datum bm446b@library) 'library))) bm4469@ls/false)) (apply (lambda (bm4479@library bm447a@name* bm447b@export bm447c@exp* bm447d@import bm447e@imp* bm447f@b*) (values bm447a@name* bm447c@exp* bm447e@imp* bm447f@b*)) bm4469@ls/false) (let ((bm4487@t bm4467@t)) (let ((bm4489@ls/false (bm30c0@syntax-dispatch bm4487@t '_))) (if bm4489@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"malformed library" bm4465@e)) bm4489@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4487@t))))))))) (set! bm4bc2@bm3120@parse-library bm3120@parse-library) (set! bm3122@parse-import-spec* (letrec* ((bm448c@idsyn? (lambda (bm4695@x) (symbol? (bm31a6@syntax->datum bm4695@x)))) (bm448e@dup-error (lambda (bm4693@name) (bm31a0@syntax-violation 'import '"two imports with different bindings" bm4693@name))) (bm4490@merge-substs (lambda (bm4681@s bm4682@subst) (letrec* ((bm4686@insert-to-subst (lambda (bm4687@a bm4688@subst) (let ((bm468b@name (car bm4687@a)) (bm468c@label (cdr bm4687@a))) (let ((bm468f@t (assq bm468b@name bm4688@subst))) (if bm468f@t ((lambda (bm4691@x) (if (eq? (cdr bm4691@x) bm468c@label) bm4688@subst (bm448e@dup-error bm468b@name))) bm468f@t) (cons bm4687@a bm4688@subst))))))) (if (null? bm4681@s) bm4682@subst (bm4686@insert-to-subst (car bm4681@s) (bm4490@merge-substs (cdr bm4681@s) bm4682@subst)))))) (bm4492@exclude* (lambda (bm4651@sym* bm4652@subst) (letrec* ((bm4656@exclude (lambda (bm466f@sym bm4670@subst) (if (null? bm4670@subst) (bm31a0@syntax-violation 'import '"cannot rename unbound identifier" bm466f@sym) (if (eq? bm466f@sym (caar bm4670@subst)) (values (cdar bm4670@subst) (cdr bm4670@subst)) (let ((bm4673@a (car bm4670@subst))) (call-with-values (lambda () (bm4656@exclude bm466f@sym (cdr bm4670@subst))) (lambda (bm4679@bm4676 bm467a@bm4678) (let ((bm467d@subst bm467a@bm4678) (bm467e@old bm4679@bm4676)) (values bm467e@old (cons bm4673@a bm467d@subst))))))))))) (if (null? bm4651@sym*) (values '() bm4652@subst) (call-with-values (lambda () (bm4656@exclude (car bm4651@sym*) bm4652@subst)) (lambda (bm465b@bm4658 bm465c@bm465a) (let ((bm465f@subst bm465c@bm465a) (bm4660@old bm465b@bm4658)) (call-with-values (lambda () (bm4492@exclude* (cdr bm4651@sym*) bm465f@subst)) (lambda (bm4667@bm4664 bm4668@bm4666) (let ((bm466b@subst bm4668@bm4666) (bm466c@old* bm4667@bm4664)) (values (cons bm4660@old bm466c@old*) bm466b@subst))))))))))) (bm4494@find* (lambda (bm4649@sym* bm464a@subst) (map (lambda (bm464d@x) (let ((bm464f@t (assq bm464d@x bm464a@subst))) (if bm464f@t (cdr bm464f@t) (bm31a0@syntax-violation 'import '"cannot find identifier" bm464d@x)))) bm4649@sym*))) (bm4496@rem* (lambda (bm4641@sym* bm4642@subst) (let bm4647@f ((bm4645@subst bm4642@subst)) (if (null? bm4645@subst) '() (if (memq (caar bm4645@subst) bm4641@sym*) (bm4647@f (cdr bm4645@subst)) (cons (car bm4645@subst) (bm4647@f (cdr bm4645@subst)))))))) (bm4498@remove-dups (lambda (bm463f@ls) (if (null? bm463f@ls) '() (if (memq (car bm463f@ls) (cdr bm463f@ls)) (bm4498@remove-dups (cdr bm463f@ls)) (cons (car bm463f@ls) (bm4498@remove-dups (cdr bm463f@ls))))))) (bm449a@parse-library-name (lambda (bm4557@spec) (letrec* ((bm455a@subversion? (lambda (bm463b@x) (let ((bm463d@x (bm31a6@syntax->datum bm463b@x))) (and (integer? bm463d@x) (exact? bm463d@x) (>= bm463d@x '0))))) (bm455c@subversion-pred (lambda (bm45db@x*) (let ((bm45dd@t bm45db@x*)) (let ((bm45df@ls/false (bm30c0@syntax-dispatch bm45dd@t 'any))) (if (and bm45df@ls/false (apply (lambda (bm45e1@n) (bm455a@subversion? bm45e1@n)) bm45df@ls/false)) (apply (lambda (bm45e3@n) (lambda (bm45e5@x) (= bm45e5@x (bm31a6@syntax->datum bm45e3@n)))) bm45df@ls/false) (let ((bm45e7@t bm45dd@t)) (let ((bm45e9@ls/false (bm30c0@syntax-dispatch bm45e7@t '(any . each-any)))) (if (and bm45e9@ls/false (apply (lambda (bm45eb@p? bm45ec@sub*) (eq? (bm31a6@syntax->datum bm45eb@p?) 'and)) bm45e9@ls/false)) (apply (lambda (bm45ef@p? bm45f0@sub*) (let ((bm45f3@p* (map bm455c@subversion-pred bm45f0@sub*))) (lambda (bm45f5@x) (for-all (lambda (bm45f7@p) (bm45f7@p bm45f5@x)) bm45f3@p*)))) bm45e9@ls/false) (let ((bm45f9@t bm45e7@t)) (let ((bm45fb@ls/false (bm30c0@syntax-dispatch bm45f9@t '(any . each-any)))) (if (and bm45fb@ls/false (apply (lambda (bm45fd@p? bm45fe@sub*) (eq? (bm31a6@syntax->datum bm45fd@p?) 'or)) bm45fb@ls/false)) (apply (lambda (bm4601@p? bm4602@sub*) (let ((bm4605@p* (map bm455c@subversion-pred bm4602@sub*))) (lambda (bm4607@x) (exists (lambda (bm4609@p) (bm4609@p bm4607@x)) bm4605@p*)))) bm45fb@ls/false) (let ((bm460b@t bm45f9@t)) (let ((bm460d@ls/false (bm30c0@syntax-dispatch bm460b@t '(any any)))) (if (and bm460d@ls/false (apply (lambda (bm460f@p? bm4610@sub) (eq? (bm31a6@syntax->datum bm460f@p?) 'not)) bm460d@ls/false)) (apply (lambda (bm4613@p? bm4614@sub) (let ((bm4617@p (bm455c@subversion-pred bm4614@sub))) (lambda (bm4619@x) (not (bm4617@p bm4619@x))))) bm460d@ls/false) (let ((bm461b@t bm460b@t)) (let ((bm461d@ls/false (bm30c0@syntax-dispatch bm461b@t '(any any)))) (if (and bm461d@ls/false (apply (lambda (bm461f@p? bm4620@n) (and (eq? (bm31a6@syntax->datum bm461f@p?) '<=) (bm455a@subversion? bm4620@n))) bm461d@ls/false)) (apply (lambda (bm4623@p? bm4624@n) (lambda (bm4627@x) (<= bm4627@x (bm31a6@syntax->datum bm4624@n)))) bm461d@ls/false) (let ((bm4629@t bm461b@t)) (let ((bm462b@ls/false (bm30c0@syntax-dispatch bm4629@t '(any any)))) (if (and bm462b@ls/false (apply (lambda (bm462d@p? bm462e@n) (and (eq? (bm31a6@syntax->datum bm462d@p?) '>=) (bm455a@subversion? bm462e@n))) bm462b@ls/false)) (apply (lambda (bm4631@p? bm4632@n) (lambda (bm4635@x) (>= bm4635@x (bm31a6@syntax->datum bm4632@n)))) bm462b@ls/false) (let ((bm4637@t bm4629@t)) (let ((bm4639@ls/false (bm30c0@syntax-dispatch bm4637@t '_))) (if bm4639@ls/false (apply (lambda () (bm31a0@syntax-violation 'import '"invalid sub-version spec" bm4557@spec bm45db@x*)) bm4639@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4637@t)))))))))))))))))))))))) (bm455e@version-pred (lambda (bm458b@x*) (let ((bm458d@t bm458b@x*)) (let ((bm458f@ls/false (bm30c0@syntax-dispatch bm458d@t '()))) (if bm458f@ls/false (apply (lambda () (lambda (bm4591@x) '#t)) bm458f@ls/false) (let ((bm4593@t bm458d@t)) (let ((bm4595@ls/false (bm30c0@syntax-dispatch bm4593@t '(any . each-any)))) (if (and bm4595@ls/false (apply (lambda (bm4597@c bm4598@ver*) (eq? (bm31a6@syntax->datum bm4597@c) 'and)) bm4595@ls/false)) (apply (lambda (bm459b@c bm459c@ver*) (let ((bm459f@p* (map bm455e@version-pred bm459c@ver*))) (lambda (bm45a1@x) (for-all (lambda (bm45a3@p) (bm45a3@p bm45a1@x)) bm459f@p*)))) bm4595@ls/false) (let ((bm45a5@t bm4593@t)) (let ((bm45a7@ls/false (bm30c0@syntax-dispatch bm45a5@t '(any . each-any)))) (if (and bm45a7@ls/false (apply (lambda (bm45a9@c bm45aa@ver*) (eq? (bm31a6@syntax->datum bm45a9@c) 'or)) bm45a7@ls/false)) (apply (lambda (bm45ad@c bm45ae@ver*) (let ((bm45b1@p* (map bm455e@version-pred bm45ae@ver*))) (lambda (bm45b3@x) (exists (lambda (bm45b5@p) (bm45b5@p bm45b3@x)) bm45b1@p*)))) bm45a7@ls/false) (let ((bm45b7@t bm45a5@t)) (let ((bm45b9@ls/false (bm30c0@syntax-dispatch bm45b7@t '(any any)))) (if (and bm45b9@ls/false (apply (lambda (bm45bb@c bm45bc@ver) (eq? (bm31a6@syntax->datum bm45bb@c) 'not)) bm45b9@ls/false)) (apply (lambda (bm45bf@c bm45c0@ver) (let ((bm45c3@p (bm455e@version-pred bm45c0@ver))) (lambda (bm45c5@x) (not (bm45c3@p bm45c5@x))))) bm45b9@ls/false) (let ((bm45c7@t bm45b7@t)) (let ((bm45c9@ls/false (bm30c0@syntax-dispatch bm45c7@t 'each-any))) (if bm45c9@ls/false (apply (lambda (bm45cb@sub*) (let ((bm45cd@p* (map bm455c@subversion-pred bm45cb@sub*))) (lambda (bm45cf@x) (let bm45d5@f ((bm45d1@p* bm45cd@p*) (bm45d2@x bm45cf@x)) (if (null? bm45d1@p*) '#t (if (null? bm45d2@x) '#f (and ((car bm45d1@p*) (car bm45d2@x)) (bm45d5@f (cdr bm45d1@p*) (cdr bm45d2@x))))))))) bm45c9@ls/false) (let ((bm45d7@t bm45c7@t)) (let ((bm45d9@ls/false (bm30c0@syntax-dispatch bm45d7@t '_))) (if bm45d9@ls/false (apply (lambda () (bm31a0@syntax-violation 'import '"invalid version spec" bm4557@spec bm458b@x*)) bm45d9@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm45d7@t)))))))))))))))))))))) (let bm4561@f ((bm455f@x bm4557@spec)) (let ((bm4563@t bm455f@x)) (let ((bm4565@ls/false (bm30c0@syntax-dispatch bm4563@t '(each-any)))) (if bm4565@ls/false (apply (lambda (bm4567@version-spec*) (values '() (bm455e@version-pred bm4567@version-spec*))) bm4565@ls/false) (let ((bm4569@t bm4563@t)) (let ((bm456b@ls/false (bm30c0@syntax-dispatch bm4569@t '(any . any)))) (if (and bm456b@ls/false (apply (lambda (bm456d@x bm456e@x*) (bm448c@idsyn? bm456d@x)) bm456b@ls/false)) (apply (lambda (bm4571@x bm4572@x*) (call-with-values (lambda () (bm4561@f bm4572@x*)) (lambda (bm4579@bm4576 bm457a@bm4578) (let ((bm457d@pred bm457a@bm4578) (bm457e@name bm4579@bm4576)) (values (cons (bm31a6@syntax->datum bm4571@x) bm457e@name) bm457d@pred))))) bm456b@ls/false) (let ((bm4581@t bm4569@t)) (let ((bm4583@ls/false (bm30c0@syntax-dispatch bm4581@t '()))) (if bm4583@ls/false (apply (lambda () (values '() (lambda (bm4585@x) '#t))) bm4583@ls/false) (let ((bm4587@t bm4581@t)) (let ((bm4589@ls/false (bm30c0@syntax-dispatch bm4587@t '_))) (if bm4589@ls/false (apply (lambda () (bm31a0@syntax-violation '#f '"invalid import spec" bm4557@spec)) bm4589@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4587@t))))))))))))))))) (bm449c@import-library (lambda (bm4547@spec*) (call-with-values (lambda () (bm449a@parse-library-name bm4547@spec*)) (lambda (bm454d@bm454a bm454e@bm454c) (let ((bm4551@pred bm454e@bm454c) (bm4552@name bm454d@bm454a)) (begin (if (null? bm4552@name) (bm31a0@syntax-violation 'import '"empty library name" bm4547@spec*) (void)) (let ((bm4555@lib (bm2cce@bm2b15@find-library-by-name bm4552@name))) (begin (if (not bm4555@lib) (bm31a0@syntax-violation 'import '"cannot find library with required name" bm4552@name) (void)) (if (not (bm4551@pred (bm2ca8@bm2ac9@library-version bm4555@lib))) (bm31a0@syntax-violation 'import '"library does not satisfy version specification" bm4547@spec* bm4555@lib) (void)) ((bm312c@imp-collector) bm4555@lib) (bm2cb0@bm2ad9@library-subst bm4555@lib))))))))) (bm449e@get-import (lambda (bm44b9@spec) (let ((bm44bb@t bm44b9@spec)) (let ((bm44bd@ls/false (bm30c0@syntax-dispatch bm44bb@t '(any . each-any)))) (if (and bm44bd@ls/false (apply (lambda (bm44bf@x bm44c0@x*) (not (memq (bm31a6@syntax->datum bm44bf@x) '(for rename except only prefix library)))) bm44bd@ls/false)) (apply (lambda (bm44c3@x bm44c4@x*) (bm449c@import-library (cons bm44c3@x bm44c4@x*))) bm44bd@ls/false) (let ((bm44c7@t bm44bb@t)) (let ((bm44c9@ls/false (bm30c0@syntax-dispatch bm44c7@t '(any any . #(each (any any)))))) (if (and bm44c9@ls/false (apply (lambda (bm44cb@rename bm44cc@isp bm44cd@old* bm44ce@new*) (and (eq? (bm31a6@syntax->datum bm44cb@rename) 'rename) (for-all bm448c@idsyn? bm44cd@old*) (for-all bm448c@idsyn? bm44ce@new*))) bm44c9@ls/false)) (apply (lambda (bm44d3@rename bm44d4@isp bm44d5@old* bm44d6@new*) (let ((bm44db@subst (bm449e@get-import bm44d4@isp)) (bm44dc@old* (map bm31a6@syntax->datum bm44d5@old*)) (bm44dd@new* (map bm31a6@syntax->datum bm44d6@new*))) (let ((bm44e1@old-label* (bm4494@find* bm44dc@old* bm44db@subst))) (let ((bm44e3@subst (bm4496@rem* bm44dc@old* bm44db@subst))) (bm4490@merge-substs (map cons bm44dd@new* bm44e1@old-label*) bm44e3@subst))))) bm44c9@ls/false) (let ((bm44e5@t bm44c7@t)) (let ((bm44e7@ls/false (bm30c0@syntax-dispatch bm44e5@t '(any any . each-any)))) (if (and bm44e7@ls/false (apply (lambda (bm44e9@except bm44ea@isp bm44eb@sym*) (and (eq? (bm31a6@syntax->datum bm44e9@except) 'except) (for-all bm448c@idsyn? bm44eb@sym*))) bm44e7@ls/false)) (apply (lambda (bm44ef@except bm44f0@isp bm44f1@sym*) (let ((bm44f5@subst (bm449e@get-import bm44f0@isp))) (bm4496@rem* (map bm31a6@syntax->datum bm44f1@sym*) bm44f5@subst))) bm44e7@ls/false) (let ((bm44f7@t bm44e5@t)) (let ((bm44f9@ls/false (bm30c0@syntax-dispatch bm44f7@t '(any any . each-any)))) (if (and bm44f9@ls/false (apply (lambda (bm44fb@only bm44fc@isp bm44fd@sym*) (and (eq? (bm31a6@syntax->datum bm44fb@only) 'only) (for-all bm448c@idsyn? bm44fd@sym*))) bm44f9@ls/false)) (apply (lambda (bm4501@only bm4502@isp bm4503@sym*) (let ((bm4507@subst (bm449e@get-import bm4502@isp)) (bm4508@sym* (map bm31a6@syntax->datum bm4503@sym*))) (let ((bm450b@sym* (bm4498@remove-dups bm4508@sym*))) (let ((bm450d@lab* (bm4494@find* bm450b@sym* bm4507@subst))) (map cons bm450b@sym* bm450d@lab*))))) bm44f9@ls/false) (let ((bm450f@t bm44f7@t)) (let ((bm4511@ls/false (bm30c0@syntax-dispatch bm450f@t '(any any any)))) (if (and bm4511@ls/false (apply (lambda (bm4513@prefix bm4514@isp bm4515@p) (and (eq? (bm31a6@syntax->datum bm4513@prefix) 'prefix) (bm448c@idsyn? bm4515@p))) bm4511@ls/false)) (apply (lambda (bm4519@prefix bm451a@isp bm451b@p) (let ((bm451f@subst (bm449e@get-import bm451a@isp)) (bm4520@prefix (symbol->string (bm31a6@syntax->datum bm451b@p)))) (map (lambda (bm4523@x) (cons (string->symbol (string-append bm4520@prefix (symbol->string (car bm4523@x)))) (cdr bm4523@x))) bm451f@subst))) bm4511@ls/false) (let ((bm4525@t bm450f@t)) (let ((bm4527@ls/false (bm30c0@syntax-dispatch bm4525@t '(any each-any)))) (if (and bm4527@ls/false (apply (lambda (bm4529@library bm452a@spec*) (eq? (bm31a6@syntax->datum bm4529@library) 'library)) bm4527@ls/false)) (apply (lambda (bm452d@library bm452e@spec*) (bm449c@import-library bm452e@spec*)) bm4527@ls/false) (let ((bm4531@t bm4525@t)) (let ((bm4533@ls/false (bm30c0@syntax-dispatch bm4531@t '(any any . any)))) (if (and bm4533@ls/false (apply (lambda (bm4535@for bm4536@isp bm4537@rest) (eq? (bm31a6@syntax->datum bm4535@for) 'for)) bm4533@ls/false)) (apply (lambda (bm453b@for bm453c@isp bm453d@rest) (bm449e@get-import bm453c@isp)) bm4533@ls/false) (let ((bm4541@t bm4531@t)) (let ((bm4543@ls/false (bm30c0@syntax-dispatch bm4541@t 'any))) (if bm4543@ls/false (apply (lambda (bm4545@spec) (bm31a0@syntax-violation 'import '"invalid import spec" bm4545@spec)) bm4543@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4541@t))))))))))))))))))))))))))) (bm44a0@add-imports! (lambda (bm44a9@imp bm44aa@h) (let ((bm44ad@subst (bm449e@get-import bm44a9@imp))) (for-each (lambda (bm44af@x) (let ((bm44b1@name (car bm44af@x)) (bm44b2@label (cdr bm44af@x))) (let ((bm44b5@t (hashtable-ref bm44aa@h bm44b1@name '#f))) (if bm44b5@t ((lambda (bm44b7@l) (if (not (eq? bm44b7@l bm44b2@label)) (bm448e@dup-error bm44b1@name) (void))) bm44b5@t) (hashtable-set! bm44aa@h bm44b1@name bm44b2@label))))) bm44ad@subst))))) (lambda (bm44a1@imp*) (let bm44a7@f ((bm44a3@imp* bm44a1@imp*) (bm44a4@h (make-eq-hashtable))) (if (null? bm44a3@imp*) (hashtable-entries bm44a4@h) (begin (bm44a0@add-imports! (car bm44a3@imp*) bm44a4@h) (bm44a7@f (cdr bm44a3@imp*) bm44a4@h))))))) (set! bm4bc3@bm3122@parse-import-spec* bm3122@parse-import-spec*) (set! bm3124@make-top-rib (lambda (bm4697@names bm4698@labels) (let ((bm469b@rib (bm2e6d@make-empty-rib))) (begin (vector-for-each (lambda (bm469d@name bm469e@label) (begin (if (not (symbol? bm469d@name)) (error 'make-top-rib '"BUG: not a symbol" bm469d@name) (void)) (bm2e71@extend-rib/nc! bm469b@rib (make-simple-struct 'stx '5 (list bm469d@name bm2e3d@top-mark* '() '())) bm469e@label))) bm4697@names bm4698@labels) bm469b@rib)))) (set! bm4bc4@bm3124@make-top-rib bm3124@make-top-rib) (set! bm3126@make-collector (lambda () (let ((bm46a1@ls '())) (lambda bm46a5 (let ((bm46a6 (length bm46a5))) (if (= bm46a6 '0) (apply (lambda () bm46a1@ls) bm46a5) (if (= bm46a6 '1) (apply (lambda (bm46a3@x) (set! bm46a1@ls (bm2e36@set-cons bm46a3@x bm46a1@ls))) bm46a5) (error 'apply '"invalid arg count")))))))) (set! bm4bc5@bm3126@make-collector bm3126@make-collector) (set! bm3128@inv-collector (bm2a09@bm28e7@make-parameter (lambda bm46a7@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bm46a9@x) (begin (if (not (procedure? bm46a9@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bm46a9@x) (void)) bm46a9@x)))) (set! bm4bc6@bm3128@inv-collector bm3128@inv-collector) (set! bm312a@vis-collector (bm2a09@bm28e7@make-parameter (lambda bm46ab@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bm46ad@x) (begin (if (not (procedure? bm46ad@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bm46ad@x) (void)) bm46ad@x)))) (set! bm4bc7@bm312a@vis-collector bm312a@vis-collector) (set! bm312c@imp-collector (bm2a09@bm28e7@make-parameter (lambda bm46af@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bm46b1@x) (begin (if (not (procedure? bm46b1@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bm46b1@x) (void)) bm46b1@x)))) (set! bm4bc8@bm312c@imp-collector bm312c@imp-collector) (set! bm312e@chi-library-internal (lambda (bm46b3@e* bm46b4@rib bm46b5@top?) (call-with-values (lambda () (bm3118@chi-body* bm46b3@e* '() '() '() '() '() '() '() bm46b4@rib bm46b5@top?)) (lambda (bm46c9@bm46ba bm46ca@bm46bc bm46cb@bm46be bm46cc@bm46c0 bm46cd@bm46c2 bm46ce@bm46c4 bm46cf@bm46c6 bm46d0@bm46c8) (let ((bm46d9@exp* bm46d0@bm46c8) (bm46da@_kwd* bm46cf@bm46c6) (bm46db@mod** bm46ce@bm46c4) (bm46dc@rhs* bm46cd@bm46c2) (bm46dd@lex* bm46cc@bm46c0) (bm46de@mr bm46cb@bm46be) (bm46df@r bm46ca@bm46bc) (bm46e0@e* bm46c9@bm46ba)) (values (append (apply append (reverse bm46db@mod**)) bm46e0@e*) bm46df@r bm46de@mr (reverse bm46dd@lex*) (reverse bm46dc@rhs*) bm46d9@exp*)))))) (set! bm4bc9@bm312e@chi-library-internal bm312e@chi-library-internal) (set! bm3130@chi-interaction-expr (lambda (bm46e9@e bm46ea@rib bm46eb@r) (call-with-values (lambda () (bm3118@chi-body* (list bm46e9@e) bm46eb@r bm46eb@r '() '() '() '() '() bm46ea@rib '#t)) (lambda (bm46ff@bm46f0 bm4700@bm46f2 bm4701@bm46f4 bm4702@bm46f6 bm4703@bm46f8 bm4704@bm46fa bm4705@bm46fc bm4706@bm46fe) (let ((bm470f@_exp* bm4706@bm46fe) (bm4710@_kwd* bm4705@bm46fc) (bm4711@mod** bm4704@bm46fa) (bm4712@rhs* bm4703@bm46f8) (bm4713@lex* bm4702@bm46f6) (bm4714@mr bm4701@bm46f4) (bm4715@r bm4700@bm46f2) (bm4716@e* bm46ff@bm46f0)) (let ((bm471f@e* (bm30f0@expand-interaction-rhs*/init* (reverse bm4713@lex*) (reverse bm4712@rhs*) (append (apply append (reverse bm4711@mod**)) bm4716@e*) bm4715@r bm4714@mr))) (let ((bm4721@e (if (null? bm471f@e*) (bm2e1f@bm2d80@build-void) (if (null? (cdr bm471f@e*)) (car bm471f@e*) (bm2e1e@bm2d7e@build-sequence '#f bm471f@e*))))) (values bm4721@e bm4715@r)))))))) (set! bm4bca@bm3130@chi-interaction-expr bm3130@chi-interaction-expr) (set! bm3132@library-body-expander (lambda (bm4723@name bm4724@main-exp* bm4725@imp* bm4726@b* bm4727@top?) (letrec* ((bm472e@itc (bm3126@make-collector))) (let ((bm4737@bm4730 bm312c@imp-collector) (bm4738@bm4732 bm31b0@top-level-context) (bm4739@bm4734 bm472e@itc) (bm473a@bm4736 '#f)) (let ((bm473f@swap (lambda () (begin (let ((bm4741@t (bm4737@bm4730))) (begin (bm4737@bm4730 bm4739@bm4734) (set! bm4739@bm4734 bm4741@t))) (let ((bm4743@t (bm4738@bm4732))) (begin (bm4738@bm4732 bm473a@bm4736) (set! bm473a@bm4736 bm4743@t))))))) (dynamic-wind bm473f@swap (lambda () (call-with-values (lambda () (bm3122@parse-import-spec* bm4725@imp*)) (lambda (bm4749@bm4746 bm474a@bm4748) (let ((bm474d@subst-labels bm474a@bm4748) (bm474e@subst-names bm4749@bm4746)) (let ((bm4751@rib (bm3124@make-top-rib bm474e@subst-names bm474d@subst-labels))) (letrec* ((bm4754@wrap (lambda (bm47cf@x) (make-simple-struct 'stx '5 (list bm47cf@x bm2e3d@top-mark* (list bm4751@rib) '()))))) (let ((bm4755@b* (map bm4754@wrap bm4726@b*)) (bm4756@main-exp* (map bm4754@wrap bm4724@main-exp*)) (bm4757@rtc (bm3126@make-collector)) (bm4758@vtc (bm3126@make-collector))) (let ((bm4765@bm475e bm3128@inv-collector) (bm4766@bm4760 bm312a@vis-collector) (bm4767@bm4762 bm4757@rtc) (bm4768@bm4764 bm4758@vtc)) (let ((bm476d@swap (lambda () (begin (let ((bm476f@t (bm4765@bm475e))) (begin (bm4765@bm475e bm4767@bm4762) (set! bm4767@bm4762 bm476f@t))) (let ((bm4771@t (bm4766@bm4760))) (begin (bm4766@bm4760 bm4768@bm4764) (set! bm4768@bm4764 bm4771@t))))))) (dynamic-wind bm476d@swap (lambda () (call-with-values (lambda () (bm312e@chi-library-internal bm4755@b* bm4751@rib bm4727@top?)) (lambda (bm477f@bm4774 bm4780@bm4776 bm4781@bm4778 bm4782@bm477a bm4783@bm477c bm4784@bm477e) (let ((bm478b@internal-exp* bm4784@bm477e) (bm478c@rhs* bm4783@bm477c) (bm478d@lex* bm4782@bm477a) (bm478e@mr bm4781@bm4778) (bm478f@r bm4780@bm4776) (bm4790@init* bm477f@bm4774)) (call-with-values (lambda () (bm311c@parse-exports (append bm4756@main-exp* bm478b@internal-exp*))) (lambda (bm479b@bm4798 bm479c@bm479a) (let ((bm479f@exp-id* bm479c@bm479a) (bm47a0@exp-name* bm479b@bm4798)) (begin (bm2e75@seal-rib! bm4751@rib) (let ((bm47a3@init* (bm30de@chi-expr* bm4790@init* bm478f@r bm478e@mr))) (let ((bm47a5@rhs* (bm30f2@chi-rhs* bm478c@rhs* bm478f@r bm478e@mr))) (begin (bm2e77@unseal-rib! bm4751@rib) (let ((bm47a7@loc* (map bm2e43@gen-global bm478d@lex*)) (bm47a8@export-subst (bm318a@make-export-subst bm47a0@exp-name* bm479f@exp-id*))) (letrec* ((bm47ac@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (bm318c@make-export-env/macros bm478d@lex* bm47a7@loc* bm478f@r)) (lambda (bm47b3@bm47ae bm47b4@bm47b0 bm47b5@bm47b2) (let ((bm47b9@macro* bm47b5@bm47b2) (bm47ba@global* bm47b4@bm47b0) (bm47bb@export-env bm47b3@bm47ae)) (begin (for-each (lambda (bm47bf@s) (let ((bm47c1@name (car bm47bf@s)) (bm47c2@label (cdr bm47bf@s))) (let ((bm47c5@p (assq bm47c2@label bm47bb@export-env))) (if bm47c5@p (let ((bm47c7@b (cdr bm47c5@p))) (let ((bm47c9@type (car bm47c7@b))) (if (eq? bm47c9@type 'mutable) (bm31a0@syntax-violation 'export bm47ac@errstr bm47c1@name) (void)))) (void))))) bm47a8@export-subst) (let ((bm47cb@invoke-body (bm2e24@bm2d8a@build-library-letrec* '#f bm4723@name bm478d@lex* bm47a7@loc* bm47a5@rhs* (if (null? bm47a3@init*) (bm2e1f@bm2d80@build-void) (bm2e1e@bm2d7e@build-sequence '#f bm47a3@init*)))) (bm47cc@invoke-definitions (map bm2e1b@bm2cdd@build-global-define (map cdr bm47ba@global*)))) (values (bm472e@itc) (bm4757@rtc) (bm4758@vtc) (bm2e1e@bm2d7e@build-sequence '#f (append bm47cc@invoke-definitions (list bm47cb@invoke-body))) bm47b9@macro* bm47a8@export-subst bm47bb@export-env))))))))))))))))))) bm476d@swap)))))))))) bm473f@swap)))))) (set! bm4bcb@bm3132@library-body-expander bm3132@library-body-expander) (set! bm3134@core-library-expander (lambda (bm47d1@e bm47d2@verify-name) (call-with-values (lambda () (bm3120@parse-library bm47d1@e)) (lambda (bm47dd@bm47d6 bm47de@bm47d8 bm47df@bm47da bm47e0@bm47dc) (let ((bm47e5@b* bm47e0@bm47dc) (bm47e6@imp* bm47df@bm47da) (bm47e7@exp* bm47de@bm47d8) (bm47e8@name* bm47dd@bm47d6)) (call-with-values (lambda () (bm311e@parse-library-name bm47e8@name*)) (lambda (bm47f1@bm47ee bm47f2@bm47f0) (let ((bm47f5@ver bm47f2@bm47f0) (bm47f6@name bm47f1@bm47ee)) (begin (bm47d2@verify-name bm47f6@name) (call-with-values (lambda () (bm3132@library-body-expander bm47f6@name bm47e7@exp* bm47e6@imp* bm47e5@b* '#f)) (lambda (bm4807@bm47fa bm4808@bm47fc bm4809@bm47fe bm480a@bm4800 bm480b@bm4802 bm480c@bm4804 bm480d@bm4806) (let ((bm4815@export-env bm480d@bm4806) (bm4816@export-subst bm480c@bm4804) (bm4817@visit-code bm480b@bm4802) (bm4818@invoke-code bm480a@bm4800) (bm4819@visit-req* bm4809@bm47fe) (bm481a@invoke-req* bm4808@bm47fc) (bm481b@imp* bm4807@bm47fa)) (values bm47f6@name bm47f5@ver bm481b@imp* bm481a@invoke-req* bm4819@visit-req* bm4818@invoke-code bm4817@visit-code bm4816@export-subst bm4815@export-env))))))))))))) (set! bm4bcc@bm3134@core-library-expander bm3134@core-library-expander) (set! bm3136@parse-top-level-program (lambda (bm4823@e*) (let ((bm4825@t bm4823@e*)) (let ((bm4827@ls/false (bm30c0@syntax-dispatch bm4825@t '((any . each-any) . each-any)))) (if (and bm4827@ls/false (apply (lambda (bm4829@import bm482a@imp* bm482b@b*) (eq? (bm31a6@syntax->datum bm4829@import) 'import)) bm4827@ls/false)) (apply (lambda (bm482f@import bm4830@imp* bm4831@b*) (values bm4830@imp* bm4831@b*)) bm4827@ls/false) (let ((bm4835@t bm4825@t)) (let ((bm4837@ls/false (bm30c0@syntax-dispatch bm4835@t '((any . any) . any)))) (if (and bm4837@ls/false (apply (lambda (bm4839@import bm483a@x bm483b@y) (eq? (bm31a6@syntax->datum bm4839@import) 'import)) bm4837@ls/false)) (apply (lambda (bm483f@import bm4840@x bm4841@y) (bm31a0@syntax-violation 'expander '"invalid syntax of top-level program" (bm2eb3@syntax-car bm4823@e*))) bm4837@ls/false) (let ((bm4845@t bm4835@t)) (let ((bm4847@ls/false (bm30c0@syntax-dispatch bm4845@t '_))) (if bm4847@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bm4847@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4845@t)))))))))))) (set! bm4bcd@bm3136@parse-top-level-program bm3136@parse-top-level-program) (set! bm3138@top-level-expander (lambda (bm4849@e*) (call-with-values (lambda () (bm3136@parse-top-level-program bm4849@e*)) (lambda (bm484f@bm484c bm4850@bm484e) (let ((bm4853@b* bm4850@bm484e) (bm4854@imp* bm484f@bm484c)) (call-with-values (lambda () (bm3132@library-body-expander '() '() bm4854@imp* bm4853@b* '#t)) (lambda (bm4865@bm4858 bm4866@bm485a bm4867@bm485c bm4868@bm485e bm4869@bm4860 bm486a@bm4862 bm486b@bm4864) (let ((bm4873@export-env bm486b@bm4864) (bm4874@export-subst bm486a@bm4862) (bm4875@visit-code bm4869@bm4860) (bm4876@invoke-code bm4868@bm485e) (bm4877@visit-req* bm4867@bm485c) (bm4878@invoke-req* bm4866@bm485a) (bm4879@imp* bm4865@bm4858)) (values bm4878@invoke-req* bm4876@invoke-code))))))))) (set! bm4bce@bm3138@top-level-expander bm3138@top-level-expander) (set! bm313a@rp (bm2a06@bm28e1@make-record-printer 'env (lambda (bm4881@x bm4882@p bm4883@wr) (display '"#<environment>" bm4882@p)))) (set! bm4bcf@bm313a@rp bm313a@rp) (set! bm3144@env? (lambda (bm4887@x) (and (simple-struct? bm4887@x) (eq? (simple-struct-name bm4887@x) 'env)))) (set! bm4bd0@bm3144@env? bm3144@env?) (set! bm3146@env-names (lambda (bm4889@x) (simple-struct-ref bm4889@x '0))) (set! bm4bd1@bm3146@env-names bm3146@env-names) (set! bm3148@set-env-names! (lambda (bm488b@x bm488c@val) (simple-struct-set! bm488b@x '0 bm488c@val))) (set! bm4bd2@bm3148@set-env-names! bm3148@set-env-names!) (set! bm314a@env-labels (lambda (bm488f@x) (simple-struct-ref bm488f@x '1))) (set! bm4bd3@bm314a@env-labels bm314a@env-labels) (set! bm314c@set-env-labels! (lambda (bm4891@x bm4892@val) (simple-struct-set! bm4891@x '1 bm4892@val))) (set! bm4bd4@bm314c@set-env-labels! bm314c@set-env-labels!) (set! bm314e@env-itc (lambda (bm4895@x) (simple-struct-ref bm4895@x '2))) (set! bm4bd5@bm314e@env-itc bm314e@env-itc) (set! bm3150@set-env-itc! (lambda (bm4897@x bm4898@val) (simple-struct-set! bm4897@x '2 bm4898@val))) (set! bm4bd6@bm3150@set-env-itc! bm3150@set-env-itc!) (set! bm3152@dummy '3) (set! bm4bd7@bm3152@dummy bm3152@dummy) (set! bm3154@rp (bm2a06@bm28e1@make-record-printer 'interaction-env (lambda (bm489b@x bm489c@p bm489d@wr) (display '"#<environment>" bm489c@p)))) (set! bm4bd8@bm3154@rp bm3154@rp) (set! bm315e@interaction-env? (lambda (bm48a1@x) (and (simple-struct? bm48a1@x) (eq? (simple-struct-name bm48a1@x) 'interaction-env)))) (set! bm4bd9@bm315e@interaction-env? bm315e@interaction-env?) (set! bm3160@interaction-env-rib (lambda (bm48a3@x) (simple-struct-ref bm48a3@x '0))) (set! bm4bda@bm3160@interaction-env-rib bm3160@interaction-env-rib) (set! bm3162@set-interaction-env-rib! (lambda (bm48a5@x bm48a6@val) (simple-struct-set! bm48a5@x '0 bm48a6@val))) (set! bm4bdb@bm3162@set-interaction-env-rib! bm3162@set-interaction-env-rib!) (set! bm3164@interaction-env-r (lambda (bm48a9@x) (simple-struct-ref bm48a9@x '1))) (set! bm4bdc@bm3164@interaction-env-r bm3164@interaction-env-r) (set! bm3166@set-interaction-env-r! (lambda (bm48ab@x bm48ac@val) (simple-struct-set! bm48ab@x '1 bm48ac@val))) (set! bm4bdd@bm3166@set-interaction-env-r! bm3166@set-interaction-env-r!) (set! bm3168@interaction-env-locs (lambda (bm48af@x) (simple-struct-ref bm48af@x '2))) (set! bm4bde@bm3168@interaction-env-locs bm3168@interaction-env-locs) (set! bm316a@set-interaction-env-locs! (lambda (bm48b1@x bm48b2@val) (simple-struct-set! bm48b1@x '2 bm48b2@val))) (set! bm4bdf@bm316a@set-interaction-env-locs! bm316a@set-interaction-env-locs!) (set! bm316c@dummy '3) (set! bm4be0@bm316c@dummy bm316c@dummy) (set! bm316e@interaction-environment-symbols (lambda () (bm3176@environment-symbols (bm31ae@interaction-environment)))) (set! bm4be1@bm316e@interaction-environment-symbols bm316e@interaction-environment-symbols) (set! bm3170@environment-bindings (lambda (bm48b5@e) (vector->list (vector-map (lambda (bm48b7@name bm48b8@label) (bm3172@parse-binding (cons bm48b7@name (bm2cd4@bm2b21@imported-label->binding bm48b8@label)))) (bm3146@env-names bm48b5@e) (bm314a@env-labels bm48b5@e))))) (set! bm4be2@bm3170@environment-bindings bm3170@environment-bindings) (set! bm3172@parse-binding (lambda (bm48bb@b) (cons (car bm48bb@b) (let ((bm48bd@t (cadr bm48bb@b))) (if (memv bm48bd@t '(core-prim global)) 'procedure (if (memv bm48bd@t '(core-macro macro global-macro)) 'syntax (if (memv bm48bd@t '($core-rtd)) 'record (if (eq? (car bm48bb@b) (cadr bm48bb@b)) 'syntax 'unknown)))))))) (set! bm4be3@bm3172@parse-binding bm3172@parse-binding) (set! bm3174@environment? (lambda (bm48bf@x) (or (bm3144@env? bm48bf@x) (bm315e@interaction-env? bm48bf@x)))) (set! bm4be4@bm3174@environment? bm3174@environment?) (set! bm3176@environment-symbols (lambda (bm48c1@x) (if (bm3144@env? bm48c1@x) (vector->list (bm3146@env-names bm48c1@x)) (if (bm315e@interaction-env? bm48c1@x) (map values (bm2e57@rib-sym* (bm3160@interaction-env-rib bm48c1@x))) (assertion-violation 'environment-symbols '"not an environment" bm48c1@x))))) (set! bm4be5@bm3176@environment-symbols bm3176@environment-symbols) (set! bm3178@environment (lambda bm48c3@imp* (let ((bm48c5@itc (bm3126@make-collector))) (let ((bm48cb@bm48c8 bm312c@imp-collector) (bm48cc@bm48ca bm48c5@itc)) (let ((bm48cf@swap (lambda () (let ((bm48d1@t (bm48cb@bm48c8))) (begin (bm48cb@bm48c8 bm48cc@bm48ca) (set! bm48cc@bm48ca bm48d1@t)))))) (dynamic-wind bm48cf@swap (lambda () (call-with-values (lambda () (bm3122@parse-import-spec* bm48c3@imp*)) (lambda (bm48d7@bm48d4 bm48d8@bm48d6) (let ((bm48db@subst-labels bm48d8@bm48d6) (bm48dc@subst-names bm48d7@bm48d4)) (make-simple-struct 'env '4 (list bm48dc@subst-names bm48db@subst-labels bm48c5@itc)))))) bm48cf@swap)))))) (set! bm4be6@bm3178@environment bm3178@environment) (set! bm317a@null-environment (lambda (bm48df@n) (begin (if (not (eqv? bm48df@n '5)) (assertion-violation 'null-environment '"not 5" bm48df@n) (void)) (bm3178@environment '(psyntax null-environment-5))))) (set! bm4be7@bm317a@null-environment bm317a@null-environment) (set! bm317c@scheme-report-environment (lambda (bm48e1@n) (begin (if (not (eqv? bm48e1@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bm48e1@n) (void)) (bm3178@environment '(psyntax scheme-report-environment-5))))) (set! bm4be8@bm317c@scheme-report-environment bm317c@scheme-report-environment) (set! bm317e@expand (lambda (bm48e3@x bm48e4@env) (if (bm3144@env? bm48e4@env) (let ((bm48e7@rib (bm3124@make-top-rib (bm3146@env-names bm48e4@env) (bm314a@env-labels bm48e4@env)))) (let ((bm48e9@x (make-simple-struct 'stx '5 (list bm48e3@x bm2e3d@top-mark* (list bm48e7@rib) '()))) (bm48ea@itc (bm314e@env-itc bm48e4@env)) (bm48eb@rtc (bm3126@make-collector)) (bm48ec@vtc (bm3126@make-collector))) (let ((bm48f1@x (let ((bm4903@bm48f4 bm31b0@top-level-context) (bm4904@bm48f6 bm3128@inv-collector) (bm4905@bm48f8 bm312a@vis-collector) (bm4906@bm48fa bm312c@imp-collector) (bm4907@bm48fc '#f) (bm4908@bm48fe bm48eb@rtc) (bm4909@bm4900 bm48ec@vtc) (bm490a@bm4902 bm48ea@itc)) (let ((bm4913@swap (lambda () (begin (let ((bm4915@t (bm4903@bm48f4))) (begin (bm4903@bm48f4 bm4907@bm48fc) (set! bm4907@bm48fc bm4915@t))) (let ((bm4917@t (bm4904@bm48f6))) (begin (bm4904@bm48f6 bm4908@bm48fe) (set! bm4908@bm48fe bm4917@t))) (let ((bm4919@t (bm4905@bm48f8))) (begin (bm4905@bm48f8 bm4909@bm4900) (set! bm4909@bm4900 bm4919@t))) (let ((bm491b@t (bm4906@bm48fa))) (begin (bm4906@bm48fa bm490a@bm4902) (set! bm490a@bm4902 bm491b@t))))))) (dynamic-wind bm4913@swap (lambda () (bm30e2@chi-expr bm48e9@x '() '())) bm4913@swap))))) (begin (bm2e75@seal-rib! bm48e7@rib) (values bm48f1@x (bm48eb@rtc)))))) (if (bm315e@interaction-env? bm48e4@env) (let ((bm491d@rib (bm3160@interaction-env-rib bm48e4@env)) (bm491e@r (bm3164@interaction-env-r bm48e4@env)) (bm491f@rtc (bm3126@make-collector))) (let ((bm4923@x (make-simple-struct 'stx '5 (list bm48e3@x bm2e3d@top-mark* (list bm491d@rib) '())))) (call-with-values (lambda () (let ((bm4939@bm492a bm31b0@top-level-context) (bm493a@bm492c bm3128@inv-collector) (bm493b@bm492e bm312a@vis-collector) (bm493c@bm4930 bm312c@imp-collector) (bm493d@bm4932 bm48e4@env) (bm493e@bm4934 bm491f@rtc) (bm493f@bm4936 (bm3126@make-collector)) (bm4940@bm4938 (bm3126@make-collector))) (let ((bm4949@swap (lambda () (begin (let ((bm494b@t (bm4939@bm492a))) (begin (bm4939@bm492a bm493d@bm4932) (set! bm493d@bm4932 bm494b@t))) (let ((bm494d@t (bm493a@bm492c))) (begin (bm493a@bm492c bm493e@bm4934) (set! bm493e@bm4934 bm494d@t))) (let ((bm494f@t (bm493b@bm492e))) (begin (bm493b@bm492e bm493f@bm4936) (set! bm493f@bm4936 bm494f@t))) (let ((bm4951@t (bm493c@bm4930))) (begin (bm493c@bm4930 bm4940@bm4938) (set! bm4940@bm4938 bm4951@t))))))) (dynamic-wind bm4949@swap (lambda () (bm3130@chi-interaction-expr bm4923@x bm491d@rib bm491e@r)) bm4949@swap)))) (lambda (bm4953@bm4926 bm4954@bm4928) (let ((bm4957@r^ bm4954@bm4928) (bm4958@e bm4953@bm4926)) (begin (bm3166@set-interaction-env-r! bm48e4@env bm4957@r^) (values bm4958@e (bm491f@rtc)))))))) (assertion-violation 'expand '"not an environment" bm48e4@env))))) (set! bm4be9@bm317e@expand bm317e@expand) (set! bm3180@eval (lambda (bm495b@x bm495c@env) (begin (if (not (bm3174@environment? bm495c@env)) (error 'eval '"not an environment" bm495c@env) (void)) (call-with-values (lambda () (bm317e@expand bm495b@x bm495c@env)) (lambda (bm4963@bm4960 bm4964@bm4962) (let ((bm4967@invoke-req* bm4964@bm4962) (bm4968@x bm4963@bm4960)) (begin (for-each bm2cd5@bm2b23@invoke-library bm4967@invoke-req*) (eval-core (bm2a5f@bm2a17@expanded->core bm4968@x))))))))) (set! bm4bea@bm3180@eval bm3180@eval) (set! bm3182@library-expander (lambda bm49d9 (let ((bm49da (length bm49d9))) (if (= bm49da '3) (apply (lambda (bm496b@x bm496c@filename bm496d@verify-name) (letrec* ((bm4972@build-visit-code (lambda (bm49c7@macro*) (if (null? bm49c7@macro*) (bm2e1f@bm2d80@build-void) (bm2e1e@bm2d7e@build-sequence '#f (map (lambda (bm49c9@x) (let ((bm49cb@loc (car bm49c9@x)) (bm49cc@src (cddr bm49c9@x))) (list 'set! bm49cb@loc bm49cc@src))) bm49c7@macro*))))) (bm4974@visit! (lambda (bm49bf@macro*) (for-each (lambda (bm49c1@x) (let ((bm49c3@loc (car bm49c1@x)) (bm49c4@proc (cadr bm49c1@x))) (set-symbol-value! bm49c3@loc bm49c4@proc))) bm49bf@macro*)))) (call-with-values (lambda () (bm3134@core-library-expander bm496b@x bm496d@verify-name)) (lambda (bm4987@bm4976 bm4988@bm4978 bm4989@bm497a bm498a@bm497c bm498b@bm497e bm498c@bm4980 bm498d@bm4982 bm498e@bm4984 bm498f@bm4986) (let ((bm4999@export-env bm498f@bm4986) (bm499a@export-subst bm498e@bm4984) (bm499b@macro* bm498d@bm4982) (bm499c@invoke-code bm498c@bm4980) (bm499d@vis* bm498b@bm497e) (bm499e@inv* bm498a@bm497c) (bm499f@imp* bm4989@bm497a) (bm49a0@ver bm4988@bm4978) (bm49a1@name bm4987@bm4976)) (let ((bm49ab@id (gensym)) (bm49ac@name bm49a1@name) (bm49ad@ver bm49a0@ver) (bm49ae@imp* (map bm2cd9@bm2b2b@library-spec bm499f@imp*)) (bm49af@vis* (map bm2cd9@bm2b2b@library-spec bm499d@vis*)) (bm49b0@inv* (map bm2cd9@bm2b2b@library-spec bm499e@inv*)) (bm49b1@visit-proc (lambda () (bm4974@visit! bm499b@macro*))) (bm49b2@invoke-proc (lambda () (eval-core (bm2a5f@bm2a17@expanded->core bm499c@invoke-code)))) (bm49b3@visit-code (bm4972@build-visit-code bm499b@macro*)) (bm49b4@invoke-code bm499c@invoke-code)) (begin (bm2cd3@bm2b1f@install-library bm49ab@id bm49ac@name bm49ad@ver bm49ae@imp* bm49af@vis* bm49b0@inv* bm499a@export-subst bm4999@export-env bm49b1@visit-proc bm49b2@invoke-proc bm49b3@visit-code bm49b4@invoke-code '#t bm496c@filename) (values bm49ab@id bm49ac@name bm49ad@ver bm49ae@imp* bm49af@vis* bm49b0@inv* bm49b4@invoke-code bm49b3@visit-code bm499a@export-subst bm4999@export-env)))))))) bm49d9) (if (= bm49da '2) (apply (lambda (bm49cf@x bm49d0@filename) (bm3182@library-expander bm49cf@x bm49d0@filename (lambda (bm49d3@x) (values)))) bm49d9) (if (= bm49da '1) (apply (lambda (bm49d5@x) (bm3182@library-expander bm49d5@x '#f (lambda (bm49d7@x) (values)))) bm49d9) (error 'apply '"invalid arg count"))))))) (set! bm4beb@bm3182@library-expander bm3182@library-expander) (set! bm3184@boot-library-expand (lambda (bm49db@x) (call-with-values (lambda () (bm3182@library-expander bm49db@x)) (lambda (bm49f1@bm49de bm49f2@bm49e0 bm49f3@bm49e2 bm49f4@bm49e4 bm49f5@bm49e6 bm49f6@bm49e8 bm49f7@bm49ea bm49f8@bm49ec bm49f9@bm49ee bm49fa@bm49f0) (let ((bm4a05@export-env bm49fa@bm49f0) (bm4a06@export-subst bm49f9@bm49ee) (bm4a07@visit-code bm49f8@bm49ec) (bm4a08@invoke-code bm49f7@bm49ea) (bm4a09@inv* bm49f6@bm49e8) (bm4a0a@vis* bm49f5@bm49e6) (bm4a0b@imp* bm49f4@bm49e4) (bm4a0c@ver bm49f3@bm49e2) (bm4a0d@name bm49f2@bm49e0) (bm4a0e@id bm49f1@bm49de)) (values bm4a0d@name bm4a08@invoke-code bm4a06@export-subst bm4a05@export-env)))))) (set! bm4bec@bm3184@boot-library-expand bm3184@boot-library-expand) (set! bm3186@rev-map-append (lambda (bm4a19@f bm4a1a@ls bm4a1b@ac) (if (null? bm4a1a@ls) bm4a1b@ac (bm3186@rev-map-append bm4a19@f (cdr bm4a1a@ls) (cons (bm4a19@f (car bm4a1a@ls)) bm4a1b@ac))))) (set! bm4bed@bm3186@rev-map-append bm3186@rev-map-append) (set! bm3188@build-exports (lambda (bm4a1f@lex*+loc* bm4a20@init*) (bm2e1e@bm2d7e@build-sequence '#f (cons (bm2e1f@bm2d80@build-void) (bm3186@rev-map-append (lambda (bm4a23@x) (list 'set! (cdr bm4a23@x) (car bm4a23@x))) bm4a1f@lex*+loc* bm4a20@init*))))) (set! bm4bee@bm3188@build-exports bm3188@build-exports) (set! bm318a@make-export-subst (lambda (bm4a25@name* bm4a26@id*) (map (lambda (bm4a29@name bm4a2a@id) (let ((bm4a2d@label (bm2ecf@id->label bm4a2a@id))) (begin (if (not bm4a2d@label) (bm31a0@syntax-violation '#f '"cannot export unbound identifier" bm4a2a@id) (void)) (cons bm4a29@name bm4a2d@label)))) bm4a25@name* bm4a26@id*))) (set! bm4bef@bm318a@make-export-subst bm318a@make-export-subst) (set! bm318c@make-export-env/macros (lambda (bm4a2f@lex* bm4a30@loc* bm4a31@r) (letrec* ((bm4a36@lookup (lambda (bm4a53@x) (let bm4a5b@f ((bm4a55@x bm4a53@x) (bm4a56@lex* bm4a2f@lex*) (bm4a57@loc* bm4a30@loc*)) (if (pair? bm4a56@lex*) (if (eq? bm4a55@x (car bm4a56@lex*)) (car bm4a57@loc*) (bm4a5b@f bm4a55@x (cdr bm4a56@lex*) (cdr bm4a57@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let bm4a3f@f ((bm4a37@r bm4a31@r) (bm4a38@env '()) (bm4a39@global* '()) (bm4a3a@macro* '())) (if (null? bm4a37@r) (values bm4a38@env bm4a39@global* bm4a3a@macro*) (let ((bm4a41@x (car bm4a37@r))) (let ((bm4a43@label (car bm4a41@x)) (bm4a44@b (cdr bm4a41@x))) (let ((bm4a47@t (bm2ed5@binding-type bm4a44@b))) (if (memv bm4a47@t '(lexical)) (let ((bm4a49@v (bm2ed7@binding-value bm4a44@b))) (let ((bm4a4b@loc (bm4a36@lookup (bm304a@lexical-var bm4a49@v))) (bm4a4c@type (if (bm304c@lexical-mutable? bm4a49@v) 'mutable 'global))) (bm4a3f@f (cdr bm4a37@r) (cons (cons* bm4a43@label bm4a4c@type bm4a4b@loc) bm4a38@env) (cons (cons (bm304a@lexical-var bm4a49@v) bm4a4b@loc) bm4a39@global*) bm4a3a@macro*))) (if (memv bm4a47@t '(local-macro)) (let ((bm4a4f@loc (gensym))) (bm4a3f@f (cdr bm4a37@r) (cons (cons* bm4a43@label 'global-macro bm4a4f@loc) bm4a38@env) bm4a39@global* (cons (cons bm4a4f@loc (bm2ed7@binding-value bm4a44@b)) bm4a3a@macro*))) (if (memv bm4a47@t '(local-macro!)) (let ((bm4a51@loc (gensym))) (bm4a3f@f (cdr bm4a37@r) (cons (cons* bm4a43@label 'global-macro! bm4a51@loc) bm4a38@env) bm4a39@global* (cons (cons bm4a51@loc (bm2ed7@binding-value bm4a44@b)) bm4a3a@macro*))) (if (memv bm4a47@t '($rtd $module)) (bm4a3f@f (cdr bm4a37@r) (cons bm4a41@x bm4a38@env) bm4a39@global* bm4a3a@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bm2ed5@binding-type bm4a44@b) (bm2ed7@binding-value bm4a44@b)))))))))))))) (set! bm4bf0@bm318c@make-export-env/macros bm318c@make-export-env/macros) (set! bm318e@generate-temporaries (lambda (bm4a5d@ls) (let ((bm4a5f@t bm4a5d@ls)) (let ((bm4a61@ls/false (bm30c0@syntax-dispatch bm4a5f@t 'each-any))) (if bm4a61@ls/false (apply (lambda (bm4a63@ls) (map (lambda (bm4a65@x) (make-simple-struct 'stx '5 (list (let ((bm4a67@x (bm31a6@syntax->datum bm4a65@x))) (if (or (symbol? bm4a67@x) (string? bm4a67@x)) (gensym bm4a67@x) (gensym 't))) bm2e3d@top-mark* '() '()))) bm4a63@ls)) bm4a61@ls/false) (let ((bm4a69@t bm4a5f@t)) (let ((bm4a6b@ls/false (bm30c0@syntax-dispatch bm4a69@t '_))) (if bm4a6b@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bm4a6b@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4a69@t))))))))) (set! bm4bf1@bm318e@generate-temporaries bm318e@generate-temporaries) (set! bm3190@free-identifier=? (lambda (bm4a6d@x bm4a6e@y) (if (bm2eb9@id? bm4a6d@x) (if (bm2eb9@id? bm4a6e@y) (bm2ebf@free-id=? bm4a6d@x bm4a6e@y) (assertion-violation 'free-identifier=? '"not an identifier" bm4a6e@y)) (assertion-violation 'free-identifier=? '"not an identifier" bm4a6d@x)))) (set! bm4bf2@bm3190@free-identifier=? bm3190@free-identifier=?) (set! bm3192@bound-identifier=? (lambda (bm4a71@x bm4a72@y) (if (bm2eb9@id? bm4a71@x) (if (bm2eb9@id? bm4a72@y) (bm2ebd@bound-id=? bm4a71@x bm4a72@y) (assertion-violation 'bound-identifier=? '"not an identifier" bm4a72@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bm4a71@x)))) (set! bm4bf3@bm3192@bound-identifier=? bm3192@bound-identifier=?) (set! bm3194@make-source-condition (lambda (bm4a75@x) (letrec* ((bm4a7f@bm4a7a (make-record-type-descriptor '&source-information &condition-rtd 'bm4a7d '#f '#f '#((immutable file-name) (immutable line)))) (bm4a81@bm4a7c '#f) (bm4a83@bm4a7b (make-record-constructor-descriptor bm4a7f@bm4a7a &condition-rcd bm4a81@bm4a7c)) (bm4a86@bm4a79 (record-predicate bm4a7f@bm4a7a)) (bm4a88@make-source-condition (record-constructor bm4a83@bm4a7b)) (bm4a8a@bm4a77 (record-accessor bm4a7f@bm4a7a '0)) (bm4a8c@bm4a78 (record-accessor bm4a7f@bm4a7a '1)) (bm4a8e@source-condition? (condition-predicate bm4a7f@bm4a7a)) (bm4a90@source-filename (condition-accessor bm4a7f@bm4a7a bm4a8a@bm4a77)) (bm4a92@source-character (condition-accessor bm4a7f@bm4a7a bm4a8c@bm4a78))) (if (and (pair? bm4a75@x) (pair? (cdr bm4a75@x))) (bm4a88@make-source-condition (car bm4a75@x) (cadr bm4a75@x)) (condition))))) (set! bm4bf4@bm3194@make-source-condition bm3194@make-source-condition) (set! bm3196@extract-position-condition (lambda (bm4a93@x) (bm3194@make-source-condition (bm3198@expression-position bm4a93@x)))) (set! bm4bf5@bm3196@extract-position-condition bm3196@extract-position-condition) (set! bm3198@expression-position (lambda (bm4a95@x) (and (bm2e85@stx? bm4a95@x) (let ((bm4a97@x (bm2e87@stx-expr bm4a95@x))) (and (bm29fd@bm28cf@annotation? bm4a97@x) (bm29fe@bm28d1@annotation-source bm4a97@x)))))) (set! bm4bf6@bm3198@expression-position bm3198@expression-position) (set! bm319a@assertion-error (lambda (bm4a99@expr bm4a9a@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list bm4a99@expr)) (bm3194@make-source-condition bm4a9a@pos))))) (set! bm4bf7@bm319a@assertion-error bm319a@assertion-error) (set! bm319c@syntax-error (lambda (bm4a9d@x . bm4a9f@args) (begin (if (not (for-all string? bm4a9f@args)) (assertion-violation 'syntax-error '"invalid argument" bm4a9f@args) (void)) (raise (condition (make-message-condition (if (null? bm4a9f@args) '"invalid syntax" (apply string-append bm4a9f@args))) (make-syntax-violation (bm31a6@syntax->datum bm4a9d@x) '#f) (bm3196@extract-position-condition bm4a9d@x)))))) (set! bm4bf8@bm319c@syntax-error bm319c@syntax-error) (set! bm319e@syntax-violation* (lambda (bm4aa1@who bm4aa2@msg bm4aa3@form bm4aa4@condition-object) (begin (if (not (string? bm4aa2@msg)) (assertion-violation 'syntax-violation '"message is not a string" bm4aa2@msg) (void)) (let ((bm4aa9@who (if (or (string? bm4aa1@who) (symbol? bm4aa1@who)) bm4aa1@who (if (not bm4aa1@who) (let ((bm4aab@t bm4aa3@form)) (let ((bm4aad@ls/false (bm30c0@syntax-dispatch bm4aab@t 'any))) (if (and bm4aad@ls/false (apply (lambda (bm4aaf@id) (bm2eb9@id? bm4aaf@id)) bm4aad@ls/false)) (apply (lambda (bm4ab1@id) (bm31a6@syntax->datum bm4ab1@id)) bm4aad@ls/false) (let ((bm4ab3@t bm4aab@t)) (let ((bm4ab5@ls/false (bm30c0@syntax-dispatch bm4ab3@t '(any . any)))) (if (and bm4ab5@ls/false (apply (lambda (bm4ab7@id bm4ab8@rest) (bm2eb9@id? bm4ab7@id)) bm4ab5@ls/false)) (apply (lambda (bm4abb@id bm4abc@rest) (bm31a6@syntax->datum bm4abb@id)) bm4ab5@ls/false) (let ((bm4abf@t bm4ab3@t)) (let ((bm4ac1@ls/false (bm30c0@syntax-dispatch bm4abf@t '_))) (if bm4ac1@ls/false (apply (lambda () '#f) bm4ac1@ls/false) (bm31a0@syntax-violation '#f '"invalid syntax" bm4abf@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bm4aa1@who))))) (raise (condition (if bm4aa9@who (make-who-condition bm4aa9@who) (condition)) (make-message-condition bm4aa2@msg) bm4aa4@condition-object (bm3196@extract-position-condition bm4aa3@form))))))) (set! bm4bf9@bm319e@syntax-violation* bm319e@syntax-violation*) (set! bm31a0@syntax-violation (lambda bm4ad1 (let ((bm4ad2 (length bm4ad1))) (if (= bm4ad2 '3) (apply (lambda (bm4ac3@who bm4ac4@msg bm4ac5@form) (bm31a0@syntax-violation bm4ac3@who bm4ac4@msg bm4ac5@form '#f)) bm4ad1) (if (= bm4ad2 '4) (apply (lambda (bm4ac9@who bm4aca@msg bm4acb@form bm4acc@subform) (bm319e@syntax-violation* bm4ac9@who bm4aca@msg bm4acb@form (make-syntax-violation (bm31a6@syntax->datum bm4acb@form) (bm31a6@syntax->datum bm4acc@subform)))) bm4ad1) (error 'apply '"invalid arg count")))))) (set! bm4bfa@bm31a0@syntax-violation bm31a0@syntax-violation) (set! bm31a2@identifier? (lambda (bm4ad3@x) (bm2eb9@id? bm4ad3@x))) (set! bm4bfb@bm31a2@identifier? bm31a2@identifier?) (set! bm31a4@datum->syntax (lambda (bm4ad5@id bm4ad6@datum) (if (bm2eb9@id? bm4ad5@id) (bm2e99@datum->stx bm4ad5@id bm4ad6@datum) (assertion-violation 'datum->syntax '"not an identifier" bm4ad5@id)))) (set! bm4bfc@bm31a4@datum->syntax bm31a4@datum->syntax) (set! bm31a6@syntax->datum (lambda (bm4ad9@x) (bm2ecd@stx->datum bm4ad9@x))) (set! bm4bfd@bm31a6@syntax->datum bm31a6@syntax->datum) (set! bm31a8@ungensym-all (lambda (bm4adb@code) (if (pair? bm4adb@code) (cons (bm31a8@ungensym-all (car bm4adb@code)) (bm31a8@ungensym-all (cdr bm4adb@code))) (if (symbol? bm4adb@code) (ungensym bm4adb@code) bm4adb@code)))) (set! bm4bfe@bm31a8@ungensym-all bm31a8@ungensym-all) (set! bm31aa@compile-r6rs-top-level (lambda (bm4add@x*) (call-with-values (lambda () (bm3138@top-level-expander bm4add@x*)) (lambda (bm4ae3@bm4ae0 bm4ae4@bm4ae2) (let ((bm4ae7@invoke-code bm4ae4@bm4ae2) (bm4ae8@lib* bm4ae3@bm4ae0)) (lambda () (begin (for-each bm2cd5@bm2b23@invoke-library bm4ae8@lib*) (let ((bm4aeb@expanded (bm2a5f@bm2a17@expanded->core bm4ae7@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bm31a8@ungensym-all bm4aeb@expanded)) (void)) (eval-core bm4aeb@expanded)))))))))) (set! bm4bff@bm31aa@compile-r6rs-top-level bm31aa@compile-r6rs-top-level) (set! bm31ac@pre-compile-r6rs-top-level (lambda (bm4aed@x*) (call-with-values (lambda () (bm3138@top-level-expander bm4aed@x*)) (lambda (bm4af3@bm4af0 bm4af4@bm4af2) (let ((bm4af7@invoke-code bm4af4@bm4af2) (bm4af8@lib* bm4af3@bm4af0)) (begin (for-each bm2cd5@bm2b23@invoke-library bm4af8@lib*) (bm2a07@bm28e3@compile-core (bm2a5f@bm2a17@expanded->core bm4af7@invoke-code)))))))) (set! bm4c00@bm31ac@pre-compile-r6rs-top-level bm31ac@pre-compile-r6rs-top-level) (set! bm31ae@interaction-environment (let ((bm4afb@the-env '#f)) (lambda () (or bm4afb@the-env (let ((bm4afd@lib (bm2cce@bm2b15@find-library-by-name '(mosh interaction))) (bm4afe@rib (bm2e6d@make-empty-rib))) (begin (let ((bm4b01@subst (bm2cb0@bm2ad9@library-subst bm4afd@lib))) (begin (bm2e59@set-rib-sym*! bm4afe@rib (map car bm4b01@subst)) (bm2e5d@set-rib-mark**! bm4afe@rib (map (lambda (bm4b03@x) bm2e3d@top-mark*) bm4b01@subst)) (bm2e61@set-rib-label*! bm4afe@rib (map cdr bm4b01@subst)))) (let ((bm4b05@env (make-simple-struct 'interaction-env '4 (list bm4afe@rib '() '())))) (begin (set! bm4afb@the-env bm4b05@env) bm4b05@env)))))))) (set! bm4c01@bm31ae@interaction-environment bm31ae@interaction-environment) (set! bm31b0@top-level-context (bm2a09@bm28e7@make-parameter '#f)) (set! bm4c02@bm31b0@top-level-context bm31b0@top-level-context) (bm2ccb@bm2b0f@current-library-expander bm3182@library-expander))
(begin (begin (bm2a5c@bm2a11@current-primitive-locations (lambda (bm5155@x) (let ((bm5157@t (assq bm5155@x '((syntax-error . bm4bf8@bm319c@syntax-error) (syntax-dispatch . bm4b96@bm30c0@syntax-dispatch) (load . bm4d82@bm4c29@load) (interaction-environment . bm4c01@bm31ae@interaction-environment) (library-path . bm2cc3@bm2aff@library-path) (mosh-cache-dir . bm2a0a@bm28e9@mosh-cache-dir) (make-parameter . bm2a09@bm28e7@make-parameter) (make-variable-transformer . bm4b53@bm2eeb@make-variable-transformer) (identifier? . bm4bfb@bm31a2@identifier?) (generate-temporaries . bm4bf1@bm318e@generate-temporaries) (free-identifier=? . bm4bf2@bm3190@free-identifier=?) (syntax->datum . bm4bfd@bm31a6@syntax->datum) (datum->syntax . bm4bfc@bm31a4@datum->syntax) (bound-identifier=? . bm4bf3@bm3192@bound-identifier=?) (scheme-report-environment . bm4be8@bm317c@scheme-report-environment) (null-environment . bm4be7@bm317a@null-environment) (command-line . bm4d7f@bm4c23@command-line) (eval . bm4bea@bm3180@eval) (environment . bm4be6@bm3178@environment) (syntax-violation . bm4bfa@bm31a0@syntax-violation) (assertion-error . bm4bf7@bm319a@assertion-error))))) (if bm5157@t (cdr bm5157@t) '#f)))) (bm2cd3@bm2b1f@install-library 'bm5132 '(mosh interaction) '() '() '() '() '((regexp? . bm50f2) (alist->eq-hash-table . bm50ee) (format . bm50eb) (string-split . bm50dc) (call-process . bm50d6) (set-current-directory! . bm50d2) (expand-path . bm50d1) (current-directory . bm50d0) (%spawn . bm50cf) (%waitpid . bm50ce) (simple-struct-name . bm50cd) (simple-struct-set! . bm50cc) (simple-struct-ref . bm50cb) (make-simple-struct . bm50ca) (simple-struct? . bm50c9) (pointer-ref-c-int64 . bm50c8) (pointer-ref-c-int32 . bm50c7) (pointer-ref-c-int16 . bm50c6) (pointer-ref-c-int8 . bm50c5) (pointer-ref-c-uint64 . bm50c4) (pointer-ref-c-uint32 . bm50c3) (pointer-ref-c-uint16 . bm50c2) (pointer-ref-c-uint8 . bm50c1) (pointer-set-c-uint64! . bm50c0) (pointer-set-c-uint32! . bm50bf) (pointer-set-c-uint16! . bm50be) (pointer-set-c-uint8! . bm50bd) (pointer-set-c-int64! . bm50bc) (pointer-set-c-int32! . bm50bb) (pointer-set-c-int16! . bm50ba) (pointer-set-c-int8! . bm50b9) (pointer-set-c-pointer! . bm50b8) (pointer-set-c-double! . bm50b7) (pointer-set-c-float! . bm50b6) (pointer-set-c-long-long! . bm50b5) (pointer-set-c-long! . bm50b4) (pointer-set-c-int! . bm50b3) (pointer-set-c-short! . bm50b2) (pointer-set-c-char! . bm50b1) (pointer-ref-c-pointer . bm50b0) (pointer-ref-c-double . bm50af) (pointer-ref-c-float . bm50ae) (pointer-ref-c-unsigned-long-long . bm50ad) (pointer-ref-c-signed-long-long . bm50ac) (pointer-ref-c-unsigned-long . bm50ab) (pointer-ref-c-signed-long . bm50aa) (pointer-ref-c-unsigned-int . bm50a9) (pointer-ref-c-signed-int . bm50a8) (pointer-ref-c-unsigned-short . bm50a7) (pointer-ref-c-signed-short . bm50a6) (pointer-ref-c-unsigned-char . bm50a5) (pointer-ref-c-signed-char . bm50a4) (pointer->integer . bm50a3) (integer->pointer . bm50a2) (pointer? . bm50a1) (shared-errno . bm50a0) (%ffi-supported? . bm509b) (%ffi-pointer->string . bm509a) (%ffi-call . bm5099) (%ffi-lookup . bm5098) (%ffi-open . bm5097) (null-terminated-utf8->string . bm5096) (null-terminated-bytevector->string . bm5095) (%exec . bm5094) (%fork . bm5093) (%pipe . bm5092) (p . bm5091) (whereis . bm5075) (register . bm5074) (vm-join! . bm5073) (vm-set-value! . bm5072) (vm? . bm5071) (main-vm? . bm5070) (vm-eval . bm506f) (vm-self . bm506e) (vm-start! . bm506d) (make-vm . bm506c) (mutex-try-lock! . bm506b) (mutex-unlock! . bm506a) (mutex-lock! . bm5069) (mutex? . bm5068) (make-mutex . bm5067) (condition-variable-notify-all! . bm5066) (condition-variable-notify! . bm5065) (condition-variable-wait! . bm5064) (make-condition-variable . bm5063) (write/ss . bm5062) (string-upcase . bm504a) (string-titlecase . bm5049) (string-normalize-nfkd . bm5048) (string-normalize-nfkc . bm5047) (string-normalize-nfd . bm5046) (string-normalize-nfc . bm5045) (string-foldcase . bm5044) (string-downcase . bm5043) (string-ci>? . bm5042) (string-ci>=? . bm5041) (string-ci=? . bm5040) (string-ci<? . bm503f) (string-ci<=? . bm503e) (char-whitespace? . bm503d) (char-upper-case? . bm503c) (char-title-case? . bm503b) (char-numeric? . bm503a) (char-lower-case? . bm5039) (char-general-category . bm5038) (char-upcase . bm5037) (char-titlecase . bm5036) (char-foldcase . bm5035) (char-downcase . bm5034) (char-ci>? . bm5033) (char-ci>=? . bm5032) (char-ci=? . bm5031) (char-ci<? . bm5030) (char-ci<=? . bm502f) (char-alphabetic? . bm502e) (make-variable-transformer . bm2eea) (identifier? . bm31a1) (generate-temporaries . bm318d) (free-identifier=? . bm318f) (syntax->datum . bm31a5) (datum->syntax . bm31a3) (bound-identifier=? . bm3191) (record-type-descriptor? . bm502d) (record-predicate . bm502c) (record-mutator . bm502b) (record-constructor . bm502a) (record-accessor . bm5029) (make-record-type-descriptor . bm5028) (make-record-constructor-descriptor . bm5027) (record? . bm5026) (record-type-uid . bm5025) (record-type-sealed? . bm5024) (record-type-parent . bm5023) (record-type-opaque? . bm5022) (record-type-name . bm5021) (record-type-generative? . bm5020) (record-type-field-names . bm501f) (record-rtd . bm501e) (record-field-mutable? . bm501d) (delete-file . bm501c) (file-exists? . bm501b) (vector-sort! . bm501a) (vector-sort . bm5019) (list-sort . bm5018) (symbol-hash . bm5017) (string-ci-hash . bm5016) (string-hash . bm5015) (equal-hash . bm5014) (hashtable-equivalence-function . bm5013) (make-hashtable . bm5012) (hashtable-hash-function . bm5011) (make-eqv-hashtable . bm5010) (make-eq-hashtable . bm500f) (hashtable? . bm500e) (hashtable-update! . bm500d) (hashtable-size . bm500c) (hashtable-set! . bm500b) (hashtable-ref . bm500a) (hashtable-mutable? . bm5009) (hashtable-keys . bm5008) (hashtable-entries . bm5007) (hashtable-delete! . bm5006) (hashtable-copy . bm5005) (hashtable-contains? . bm5004) (hashtable-clear! . bm5003) (call-with-output-file . bm5002) (call-with-input-file . bm5001) (write-char . bm5000) (write . bm4fff) (with-output-to-file . bm4ffe) (with-input-from-file . bm4ffd) (read-char . bm4ffc) (read . bm4ffb) (peek-char . bm4ffa) (open-output-file . bm4ff9) (open-input-file . bm4ff8) (newline . bm4ff7) (display . bm4ff6) (close-output-port . bm4ff5) (close-input-port . bm4ff4) (eof-object? . bm4ff3) (eof-object . bm4ff2) (current-error-port . bm4ff1) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (utf-8-codec . bm4fec) (utf-16-codec . bm4feb) (transcoder-error-handling-mode . bm4fea) (transcoder-eol-style . bm4fe9) (transcoder-codec . bm4fe8) (transcoded-port . bm4fe7) (textual-port? . bm4fe6) (string->bytevector . bm4fe5) (standard-output-port . bm4fe4) (standard-input-port . bm4fe3) (standard-error-port . bm4fe2) (set-port-position! . bm4fe1) (put-u8 . bm4fe0) (put-string . bm4fdf) (put-datum . bm4fde) (put-char . bm4fdd) (put-bytevector . bm4fdc) (port? . bm4fdb) (port-transcoder . bm4fda) (port-position . bm4fd9) (port-has-set-port-position!? . bm4fd8) (port-has-port-position? . bm4fd7) (port-eof? . bm4fd6) (output-port-buffer-mode . bm4fd5) (open-string-output-port . bm4fd4) (open-string-input-port . bm4fd3) (open-file-output-port . bm4fd2) (open-file-input/output-port . bm4fd1) (open-file-input-port . bm4fd0) (open-bytevector-output-port . bm4fcf) (open-bytevector-input-port . bm4fce) (native-transcoder . bm4fcd) (native-eol-style . bm4fcc) (make-transcoder . bm4fcb) (latin-1-codec . bm4fca) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (make-i/o-encoding-error . bm4fbf) (make-i/o-decoding-error . bm4fbe) (make-custom-textual-output-port . bm4fbd) (make-custom-textual-input/output-port . bm4fbc) (make-custom-textual-input-port . bm4fbb) (make-custom-binary-output-port . bm4fba) (make-custom-binary-input/output-port . bm4fb9) (make-custom-binary-input-port . bm4fb8) (make-bytevector . bm4fb7) (lookahead-u8 . bm4fb6) (lookahead-char . bm4fb5) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (i/o-encoding-error? . bm4fa7) (i/o-encoding-error-char . bm4fa6) (i/o-decoding-error? . bm4fa5) (get-u8 . bm4fa4) (get-string-n! . bm4fa3) (get-string-n . bm4fa2) (get-string-all . bm4fa1) (get-line . bm4fa0) (get-datum . bm4f9f) (get-char . bm4f9e) (get-bytevector-some . bm4f9d) (get-bytevector-n! . bm4f9c) (get-bytevector-n . bm4f9b) (get-bytevector-all . bm4f9a) (flush-output-port . bm4f99) (close-port . bm4f98) (exit . bm4f90) (command-line . bm4c22) (string-fill! . bm4f8f) (string-set! . bm4f8e) (set-cdr! . bm4f8d) (set-car! . bm4f8c) (remove . bm4f8b) (remv . bm4f8a) (remp . bm4f89) (remq . bm4f88) (partition . bm4f87) (memv . bm4f86) (memq . bm4f85) (memp . bm4f84) (member . bm4f83) (exists . bm4f82) (for-all . bm4f81) (fold-right . bm4f80) (fold-left . bm4f7f) (find . bm4f7e) (filter . bm4f7d) (cons* . bm4f7c) (assv . bm4f7b) (assq . bm4f7a) (assp . bm4f79) (assoc . bm4f78) (call-with-string-output-port . bm4f77) (call-with-port . bm4f76) (call-with-bytevector-output-port . bm4f75) (bytevector->string . bm4f74) (buffer-mode? . bm4f73) (binary-port? . bm4f72) (with-exception-handler . bm4f71) (raise-continuable . bm4f70) (raise . bm4f6f) (eval . bm317f) (environment . bm3177) (make-enumeration . bm4f6e) (enum-set=? . bm4f6d) (enum-set-universe . bm4f6c) (enum-set-union . bm4f6b) (enum-set-subset? . bm4f6a) (enum-set-projection . bm4f69) (enum-set-member? . bm4f68) (enum-set-intersection . bm4f67) (enum-set-indexer . bm4f66) (enum-set-difference . bm4f65) (enum-set-constructor . bm4f64) (enum-set-complement . bm4f63) (enum-set->list . bm4f62) (who-condition? . bm4f61) (warning? . bm4f60) (violation? . bm4f5f) (undefined-violation? . bm4f5e) (syntax-violation? . bm4f5d) (syntax-violation-subform . bm4f5c) (syntax-violation-form . bm4f5b) (syntax-violation . bm319f) (simple-conditions . bm4f5a) (serious-condition? . bm4f59) (non-continuable-violation? . bm4f58) (message-condition? . bm4f57) (make-who-condition . bm4f56) (make-warning . bm4f55) (make-violation . bm4f54) (make-undefined-violation . bm4f53) (make-syntax-violation . bm4f52) (make-serious-condition . bm4f51) (make-non-continuable-violation . bm4f50) (make-message-condition . bm4f4f) (make-lexical-violation . bm4f4e) (make-irritants-condition . bm4f4d) (make-implementation-restriction-violation . bm4f4c) (make-error . bm4f4b) (make-assertion-violation . bm4f4a) (lexical-violation? . bm4f49) (irritants-condition? . bm4f48) (implementation-restriction-violation? . bm4f47) (error? . bm4f46) (condition-who . bm4f45) (condition-predicate . bm4f44) (condition-message . bm4f43) (condition-irritants . bm4f42) (condition-accessor . bm4f41) (condition . bm4f40) (assertion-violation? . bm4f3f) (condition? . bm4f3e) (utf32->string . bm4f3d) (utf16->string . bm4f3c) (utf8->string . bm4f3b) (uint-list->bytevector . bm4f3a) (u8-list->bytevector . bm4f39) (string->utf8 . bm4f38) (string->utf32 . bm4f37) (string->utf16 . bm4f36) (sint-list->bytevector . bm4f35) (native-endianness . bm4f34) (bytevector? . bm4f33) (bytevector=? . bm4f32) (bytevector-uint-set! . bm4f31) (bytevector-uint-ref . bm4f30) (bytevector-u8-set! . bm4f2f) (bytevector-u8-ref . bm4f2e) (bytevector-u64-set! . bm4f2d) (bytevector-u64-ref . bm4f2c) (bytevector-u64-native-set! . bm4f2b) (bytevector-u64-native-ref . bm4f2a) (bytevector-u32-set! . bm4f29) (bytevector-u32-ref . bm4f28) (bytevector-u32-native-set! . bm4f27) (bytevector-u32-native-ref . bm4f26) (bytevector-u16-set! . bm4f25) (bytevector-u16-ref . bm4f24) (bytevector-u16-native-set! . bm4f23) (bytevector-u16-native-ref . bm4f22) (bytevector-sint-set! . bm4f21) (bytevector-sint-ref . bm4f20) (bytevector-s8-set! . bm4f1f) (bytevector-s8-ref . bm4f1e) (bytevector-s64-set! . bm4f1d) (bytevector-s64-ref . bm4f1c) (bytevector-s64-native-set! . bm4f1b) (bytevector-s64-native-ref . bm4f1a) (bytevector-s32-set! . bm4f19) (bytevector-s32-ref . bm4f18) (bytevector-s32-native-set! . bm4f17) (bytevector-s32-native-ref . bm4f16) (bytevector-s16-set! . bm4f15) (bytevector-s16-ref . bm4f14) (bytevector-s16-native-set! . bm4f13) (bytevector-s16-native-ref . bm4f12) (bytevector-length . bm4f11) (bytevector-ieee-single-ref . bm4f10) (bytevector-ieee-single-set! . bm4f0f) (bytevector-ieee-single-native-set! . bm4f0e) (bytevector-ieee-single-native-ref . bm4f0d) (bytevector-ieee-double-set! . bm4f0c) (bytevector-ieee-double-ref . bm4f0b) (bytevector-ieee-double-native-set! . bm4f0a) (bytevector-ieee-double-native-ref . bm4f09) (bytevector-fill! . bm4f08) (bytevector-copy! . bm4f07) (bytevector-copy . bm4f06) (bytevector->uint-list . bm4f05) (bytevector->u8-list . bm4f04) (bytevector->sint-list . bm4f03) (no-nans-violation? . bm4f02) (no-infinities-violation? . bm4f01) (make-no-nans-violation . bm4f00) (make-no-infinities-violation . bm4eff) (real->flonum . bm4efe) (flzero? . bm4efd) (fltruncate . bm4efc) (fltan . bm4efb) (flsqrt . bm4efa) (flsin . bm4ef9) (flround . bm4ef8) (flpositive? . bm4ef7) (flonum? . bm4ef6) (flodd? . bm4ef5) (flnumerator . bm4ef4) (flnegative? . bm4ef3) (flnan? . bm4ef2) (flmod0 . bm4ef1) (flmod . bm4ef0) (flmin . bm4eef) (flmax . bm4eee) (fllog . bm4eed) (flinteger? . bm4eec) (flinfinite? . bm4eeb) (flfloor . bm4eea) (flfinite? . bm4ee9) (flexpt . bm4ee8) (flexp . bm4ee7) (fleven? . bm4ee6) (fldiv0-and-mod0 . bm4ee5) (fldiv0 . bm4ee4) (fldiv-and-mod . bm4ee3) (fldiv . bm4ee2) (fldenominator . bm4ee1) (flcos . bm4ee0) (flceiling . bm4edf) (flatan . bm4ede) (flasin . bm4edd) (flacos . bm4edc) (flabs . bm4edb) (fl>? . bm4eda) (fl>=? . bm4ed9) (fl=? . bm4ed8) (fl<? . bm4ed7) (fl<=? . bm4ed6) (fl/ . bm4ed5) (fl- . bm4ed4) (fl+ . bm4ed3) (fl* . bm4ed2) (fixnum->flonum . bm4ed1) (fxzero? . bm4ed0) (fxxor . bm4ecf) (fxrotate-bit-field . bm4ece) (fxreverse-bit-field . bm4ecd) (fxpositive? . bm4ecc) (fxodd? . bm4ecb) (fxnot . bm4eca) (fxnegative? . bm4ec9) (fxmod0 . bm4ec8) (fxmod . bm4ec7) (fxmin . bm4ec6) (fxmax . bm4ec5) (fxlength . bm4ec4) (fxior . bm4ec3) (fxif . bm4ec2) (fxfirst-bit-set . bm4ec1) (fxeven? . bm4ec0) (fxdiv0-and-mod0 . bm4ebf) (fxdiv0 . bm4ebe) (fxdiv-and-mod . bm4ebd) (fxdiv . bm4ebc) (fxcopy-bit-field . bm4ebb) (fxcopy-bit . bm4eba) (fxbit-set? . bm4eb9) (fxbit-field . bm4eb8) (fxbit-count . bm4eb7) (fxarithmetic-shift-right . bm4eb6) (fxarithmetic-shift-left . bm4eb5) (fxarithmetic-shift . bm4eb4) (fxand . bm4eb3) (fx>? . bm4eb2) (fx>=? . bm4eb1) (fx=? . bm4eb0) (fx<? . bm4eaf) (fx<=? . bm4eae) (fx-/carry . bm4ead) (fx- . bm4eac) (fx+/carry . bm4eab) (fx+ . bm4eaa) (fx*/carry . bm4ea9) (fx* . bm4ea8) (greatest-fixnum . bm4ea7) (least-fixnum . bm4ea6) (fixnum-width . bm4ea5) (fixnum? . bm4ea4) (bitwise-rotate-bit-field . bm4ea3) (bitwise-reverse-bit-field . bm4ea2) (bitwise-length . bm4ea1) (bitwise-if . bm4ea0) (bitwise-first-bit-set . bm4e9f) (bitwise-copy-bit-field . bm4e9e) (bitwise-copy-bit . bm4e9d) (bitwise-bit-set? . bm4e9c) (bitwise-bit-field . bm4e9b) (bitwise-bit-count . bm4e9a) (bitwise-xor . bm4e99) (bitwise-ior . bm4e98) (bitwise-and . bm4e97) (bitwise-not . bm4e96) (bitwise-arithmetic-shift-right . bm4e95) (bitwise-arithmetic-shift-left . bm4e94) (bitwise-arithmetic-shift . bm4e93) (zero? . bm4e92) (vector? . bm4e91) (vector-set! . bm4e90) (vector-ref . bm4e8f) (vector-map . bm4e8e) (vector-length . bm4e8d) (vector-for-each . bm4e8c) (vector-fill! . bm4e8b) (vector->list . bm4e8a) (vector . bm4e89) (values . bm4e88) (truncate . bm4e87) (tan . bm4e86) (symbol? . bm4e85) (symbol=? . bm4e84) (symbol->string . bm4e83) (substring . bm4e82) (string? . bm4e81) (string>? . bm4e80) (string>=? . bm4e7f) (string=? . bm4e7e) (string<? . bm4e7d) (string<=? . bm4e7c) (string-ref . bm4e7b) (string-length . bm4e7a) (string-for-each . bm4e79) (string-copy . bm4e78) (string-append . bm4e77) (string->symbol . bm4e76) (string->number . bm4e75) (string->list . bm4e74) (string . bm4e73) (sqrt . bm4e72) (sin . bm4e71) (round . bm4e70) (reverse . bm4e6f) (real? . bm4e6e) (real-valued? . bm4e6d) (real-part . bm4e6c) (rationalize . bm4e6b) (rational? . bm4e6a) (rational-valued? . bm4e69) (procedure? . bm4e68) (positive? . bm4e67) (pair? . bm4e66) (odd? . bm4e65) (numerator . bm4e64) (number? . bm4e63) (number->string . bm4e62) (null? . bm4e61) (not . bm4e60) (negative? . bm4e5f) (nan? . bm4e5e) (min . bm4e5d) (max . bm4e5c) (map . bm4e5b) (make-vector . bm4e5a) (make-string . bm4e59) (make-rectangular . bm4e58) (make-polar . bm4e57) (magnitude . bm4e56) (log . bm4e55) (list? . bm4e54) (list-tail . bm4e53) (list-ref . bm4e52) (list->vector . bm4e51) (list->string . bm4e50) (list . bm4e4f) (length . bm4e4e) (lcm . bm4e4d) (integer? . bm4e4c) (integer-valued? . bm4e4b) (integer->char . bm4e4a) (infinite? . bm4e49) (inexact? . bm4e48) (inexact . bm4e47) (imag-part . bm4e46) (gcd . bm4e45) (for-each . bm4e44) (floor . bm4e43) (finite? . bm4e42) (expt . bm4e41) (exp . bm4e40) (exact? . bm4e3f) (exact-integer-sqrt . bm4e3e) (exact . bm4e3d) (even? . bm4e3c) (error . bm4e3b) (eqv? . bm4e3a) (equal? . bm4e39) (eq? . bm4e38) (dynamic-wind . bm4e37) (div0-and-mod0 . bm4e36) (mod0 . bm4e35) (div0 . bm4e34) (div-and-mod . bm4e33) (mod . bm4e32) (div . bm4e31) (denominator . bm4e30) (cos . bm4e2f) (cons . bm4e2e) (complex? . bm4e2d) (char? . bm4e2c) (char>? . bm4e2b) (char>=? . bm4e2a) (char=? . bm4e29) (char<? . bm4e28) (char<=? . bm4e27) (char->integer . bm4e26) (ceiling . bm4e25) (call-with-values . bm4e24) (call/cc . bm4e23) (call-with-current-continuation . bm4e22) (cddddr . bm4e21) (cdddar . bm4e20) (cddadr . bm4e1f) (cddaar . bm4e1e) (cdaddr . bm4e1d) (cdadar . bm4e1c) (cdaadr . bm4e1b) (cdaaar . bm4e1a) (cadddr . bm4e19) (caddar . bm4e18) (cadadr . bm4e17) (cadaar . bm4e16) (caaddr . bm4e15) (caadar . bm4e14) (caaadr . bm4e13) (caaaar . bm4e12) (cdddr . bm4e11) (cddar . bm4e10) (cdadr . bm4e0f) (cdaar . bm4e0e) (caddr . bm4e0d) (cadar . bm4e0c) (caadr . bm4e0b) (caaar . bm4e0a) (cddr . bm4e09) (cdar . bm4e08) (cadr . bm4e07) (caar . bm4e06) (cdr . bm4e05) (car . bm4e04) (boolean? . bm4e03) (boolean=? . bm4e02) (atan . bm4e01) (assertion-violation . bm4e00) (asin . bm4dff) (apply . bm4dfe) (append . bm4dfd) (angle . bm4dfc) (acos . bm4dfb) (abs . bm4dfa) (/ . bm4df9) (* . bm4df8) (- . bm4df7) (+ . bm4df6) (>= . bm4df5) (> . bm4df4) (= . bm4df3) (<= . bm4df2) (< . bm4df1) (library . bm4df0) (&no-nans . bm4def) (&no-infinities . bm4dee) (&i/o-encoding . bm4ded) (&i/o-decoding . bm4dec) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2) (&undefined . bm4de1) (&syntax . bm4de0) (&lexical . bm4ddf) (&implementation-restriction . bm4dde) (&non-continuable . bm4ddd) (&who . bm4ddc) (&irritants . bm4ddb) (&assertion . bm4dda) (&violation . bm4dd9) (&error . bm4dd8) (&serious . bm4dd7) (&warning . bm4dd6) (&message . bm4dd5) (&condition . bm4dd4) (define-condition-type . bm4dd3) (define-enumeration . bm4dd2) (define-record-type . bm4dd1) (parent-rtd . bm4dd0) (nongenerative . bm4dcf) (opaque . bm4dce) (sealed . bm4dcd) (protocol . bm4dcc) (parent . bm4dcb) (immutable . bm4dca) (mutable . bm4dc9) (fields . bm4dc8) (error-handling-mode . bm4dc7) (file-options . bm4dc6) (buffer-mode . bm4dc5) (eol-style . bm4dc4) (guard . bm4dc3) (unsyntax-splicing . bm4dc0) (unsyntax . bm4dbf) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (_ . bm4dbc) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (assert . bm4db8) (endianness . bm4db7) (time . bm4db5) (do . bm4db4) (cond . bm4db3) (let* . bm4db2) (let*-values . bm4db1) (let-values . bm4db0) (identifier-syntax . bm4daf) (with-syntax . bm4dae) (quasisyntax . bm4dad) (quasiquote . bm4dac) (syntax-rules . bm4dab) (include . bm4daa) (record-constructor-descriptor . bm4da8) (record-type-descriptor . bm4da7) (case . bm4da6) (unless . bm4da4) (when . bm4da3) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec* . bm4d9e) (letrec . bm4d9d) (case-lambda . bm4d9b) (lambda . bm4d9a) (syntax . bm4d99) (syntax-case . bm4d98) (quote . bm4d97) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (import . bm4d92) (begin . bm4d91) (define-syntax . bm4d8f) (define . bm4d8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5133 '(psyntax null-environment-5) '() '() '() '() '((make-promise . bm4f91) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (_ . bm4dbc) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (delay . bm4db6) (do . bm4db4) (cond . bm4db3) (let* . bm4db2) (quasiquote . bm4dac) (syntax-rules . bm4dab) (case . bm4da6) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec . bm4d9d) (lambda . bm4d9a) (quote . bm4d97) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (begin . bm4d91) (define-syntax . bm4d8f) (define . bm4d8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5134 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bm5042) (string-ci>=? . bm5041) (string-ci=? . bm5040) (string-ci<? . bm503f) (string-ci<=? . bm503e) (char-whitespace? . bm503d) (char-upper-case? . bm503c) (char-numeric? . bm503a) (char-lower-case? . bm5039) (char-upcase . bm5037) (char-downcase . bm5034) (char-ci>? . bm5033) (char-ci>=? . bm5032) (char-ci=? . bm5031) (char-ci<? . bm5030) (char-ci<=? . bm502f) (char-alphabetic? . bm502e) (call-with-output-file . bm5002) (call-with-input-file . bm5001) (write-char . bm5000) (write . bm4fff) (with-output-to-file . bm4ffe) (with-input-from-file . bm4ffd) (read-char . bm4ffc) (read . bm4ffb) (peek-char . bm4ffa) (open-output-file . bm4ff9) (open-input-file . bm4ff8) (newline . bm4ff7) (display . bm4ff6) (close-output-port . bm4ff5) (close-input-port . bm4ff4) (eof-object . bm4ff2) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (scheme-report-environment . bm317b) (quotient . bm4f97) (null-environment . bm3179) (remainder . bm4f96) (modulo . bm4f95) (inexact->exact . bm4f94) (force . bm4f93) (exact->inexact . bm4f92) (make-promise . bm4f91) (string-fill! . bm4f8f) (string-set! . bm4f8e) (set-cdr! . bm4f8d) (set-car! . bm4f8c) (memv . bm4f86) (memq . bm4f85) (member . bm4f83) (assv . bm4f7b) (assq . bm4f7a) (assoc . bm4f78) (eval . bm317f) (zero? . bm4e92) (vector? . bm4e91) (vector-set! . bm4e90) (vector-ref . bm4e8f) (vector-length . bm4e8d) (vector-fill! . bm4e8b) (vector->list . bm4e8a) (vector . bm4e89) (values . bm4e88) (truncate . bm4e87) (tan . bm4e86) (symbol? . bm4e85) (symbol->string . bm4e83) (substring . bm4e82) (string? . bm4e81) (string>? . bm4e80) (string>=? . bm4e7f) (string=? . bm4e7e) (string<? . bm4e7d) (string<=? . bm4e7c) (string-ref . bm4e7b) (string-length . bm4e7a) (string-copy . bm4e78) (string-append . bm4e77) (string->symbol . bm4e76) (string->number . bm4e75) (string->list . bm4e74) (string . bm4e73) (sqrt . bm4e72) (sin . bm4e71) (round . bm4e70) (reverse . bm4e6f) (real? . bm4e6e) (real-part . bm4e6c) (rationalize . bm4e6b) (rational? . bm4e6a) (procedure? . bm4e68) (positive? . bm4e67) (pair? . bm4e66) (odd? . bm4e65) (numerator . bm4e64) (number? . bm4e63) (number->string . bm4e62) (not . bm4e60) (negative? . bm4e5f) (min . bm4e5d) (max . bm4e5c) (map . bm4e5b) (make-vector . bm4e5a) (make-string . bm4e59) (make-rectangular . bm4e58) (make-polar . bm4e57) (magnitude . bm4e56) (log . bm4e55) (list? . bm4e54) (list-tail . bm4e53) (list-ref . bm4e52) (list->vector . bm4e51) (list->string . bm4e50) (list . bm4e4f) (length . bm4e4e) (lcm . bm4e4d) (integer? . bm4e4c) (integer->char . bm4e4a) (inexact? . bm4e48) (imag-part . bm4e46) (gcd . bm4e45) (for-each . bm4e44) (floor . bm4e43) (expt . bm4e41) (exp . bm4e40) (exact? . bm4e3f) (even? . bm4e3c) (eqv? . bm4e3a) (equal? . bm4e39) (eq? . bm4e38) (dynamic-wind . bm4e37) (denominator . bm4e30) (cos . bm4e2f) (cons . bm4e2e) (complex? . bm4e2d) (char? . bm4e2c) (char>? . bm4e2b) (char>=? . bm4e2a) (char=? . bm4e29) (char<? . bm4e28) (char<=? . bm4e27) (char->integer . bm4e26) (ceiling . bm4e25) (call-with-values . bm4e24) (call-with-current-continuation . bm4e22) (cddddr . bm4e21) (cdddar . bm4e20) (cddadr . bm4e1f) (cddaar . bm4e1e) (cdaddr . bm4e1d) (cdadar . bm4e1c) (cdaadr . bm4e1b) (cdaaar . bm4e1a) (cadddr . bm4e19) (caddar . bm4e18) (cadadr . bm4e17) (cadaar . bm4e16) (caaddr . bm4e15) (caadar . bm4e14) (caaadr . bm4e13) (caaaar . bm4e12) (cdddr . bm4e11) (cddar . bm4e10) (cdadr . bm4e0f) (cdaar . bm4e0e) (caddr . bm4e0d) (cadar . bm4e0c) (caadr . bm4e0b) (caaar . bm4e0a) (cddr . bm4e09) (cdar . bm4e08) (cadr . bm4e07) (caar . bm4e06) (cdr . bm4e05) (car . bm4e04) (boolean? . bm4e03) (atan . bm4e01) (asin . bm4dff) (apply . bm4dfe) (append . bm4dfd) (angle . bm4dfc) (acos . bm4dfb) (abs . bm4dfa) (/ . bm4df9) (* . bm4df8) (- . bm4df7) (+ . bm4df6) (>= . bm4df5) (> . bm4df4) (= . bm4df3) (<= . bm4df2) (< . bm4df1) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (delay . bm4db6) (do . bm4db4) (cond . bm4db3) (let* . bm4db2) (quasiquote . bm4dac) (syntax-rules . bm4dab) (case . bm4da6) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec . bm4d9d) (lambda . bm4d9a) (quote . bm4d97) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (begin . bm4d91) (define-syntax . bm4d8f) (define . bm4d8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5135 '(psyntax modules) '() '() '() '() '((module . bm4d90)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5136 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5137 '(rnrs) '(6) '() '() '() '((regexp? . bm50f2) (string-upcase . bm504a) (string-titlecase . bm5049) (string-normalize-nfkd . bm5048) (string-normalize-nfkc . bm5047) (string-normalize-nfd . bm5046) (string-normalize-nfc . bm5045) (string-foldcase . bm5044) (string-downcase . bm5043) (string-ci>? . bm5042) (string-ci>=? . bm5041) (string-ci=? . bm5040) (string-ci<? . bm503f) (string-ci<=? . bm503e) (char-whitespace? . bm503d) (char-upper-case? . bm503c) (char-title-case? . bm503b) (char-numeric? . bm503a) (char-lower-case? . bm5039) (char-general-category . bm5038) (char-upcase . bm5037) (char-titlecase . bm5036) (char-foldcase . bm5035) (char-downcase . bm5034) (char-ci>? . bm5033) (char-ci>=? . bm5032) (char-ci=? . bm5031) (char-ci<? . bm5030) (char-ci<=? . bm502f) (char-alphabetic? . bm502e) (make-variable-transformer . bm2eea) (identifier? . bm31a1) (generate-temporaries . bm318d) (free-identifier=? . bm318f) (syntax->datum . bm31a5) (datum->syntax . bm31a3) (bound-identifier=? . bm3191) (record-type-descriptor? . bm502d) (record-predicate . bm502c) (record-mutator . bm502b) (record-constructor . bm502a) (record-accessor . bm5029) (make-record-type-descriptor . bm5028) (make-record-constructor-descriptor . bm5027) (record? . bm5026) (record-type-uid . bm5025) (record-type-sealed? . bm5024) (record-type-parent . bm5023) (record-type-opaque? . bm5022) (record-type-name . bm5021) (record-type-generative? . bm5020) (record-type-field-names . bm501f) (record-rtd . bm501e) (record-field-mutable? . bm501d) (delete-file . bm501c) (file-exists? . bm501b) (vector-sort! . bm501a) (vector-sort . bm5019) (list-sort . bm5018) (symbol-hash . bm5017) (string-ci-hash . bm5016) (string-hash . bm5015) (equal-hash . bm5014) (hashtable-equivalence-function . bm5013) (make-hashtable . bm5012) (hashtable-hash-function . bm5011) (make-eqv-hashtable . bm5010) (make-eq-hashtable . bm500f) (hashtable? . bm500e) (hashtable-update! . bm500d) (hashtable-size . bm500c) (hashtable-set! . bm500b) (hashtable-ref . bm500a) (hashtable-mutable? . bm5009) (hashtable-keys . bm5008) (hashtable-entries . bm5007) (hashtable-delete! . bm5006) (hashtable-copy . bm5005) (hashtable-contains? . bm5004) (hashtable-clear! . bm5003) (call-with-output-file . bm5002) (call-with-input-file . bm5001) (write-char . bm5000) (write . bm4fff) (with-output-to-file . bm4ffe) (with-input-from-file . bm4ffd) (read-char . bm4ffc) (read . bm4ffb) (peek-char . bm4ffa) (open-output-file . bm4ff9) (open-input-file . bm4ff8) (newline . bm4ff7) (display . bm4ff6) (close-output-port . bm4ff5) (close-input-port . bm4ff4) (eof-object? . bm4ff3) (eof-object . bm4ff2) (current-error-port . bm4ff1) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (utf-8-codec . bm4fec) (utf-16-codec . bm4feb) (transcoder-error-handling-mode . bm4fea) (transcoder-eol-style . bm4fe9) (transcoder-codec . bm4fe8) (transcoded-port . bm4fe7) (textual-port? . bm4fe6) (string->bytevector . bm4fe5) (standard-output-port . bm4fe4) (standard-input-port . bm4fe3) (standard-error-port . bm4fe2) (set-port-position! . bm4fe1) (put-u8 . bm4fe0) (put-string . bm4fdf) (put-datum . bm4fde) (put-char . bm4fdd) (put-bytevector . bm4fdc) (port? . bm4fdb) (port-transcoder . bm4fda) (port-position . bm4fd9) (port-has-set-port-position!? . bm4fd8) (port-has-port-position? . bm4fd7) (port-eof? . bm4fd6) (output-port-buffer-mode . bm4fd5) (open-string-output-port . bm4fd4) (open-string-input-port . bm4fd3) (open-file-output-port . bm4fd2) (open-file-input/output-port . bm4fd1) (open-file-input-port . bm4fd0) (open-bytevector-output-port . bm4fcf) (open-bytevector-input-port . bm4fce) (native-transcoder . bm4fcd) (native-eol-style . bm4fcc) (make-transcoder . bm4fcb) (latin-1-codec . bm4fca) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (make-i/o-encoding-error . bm4fbf) (make-i/o-decoding-error . bm4fbe) (make-custom-textual-output-port . bm4fbd) (make-custom-textual-input/output-port . bm4fbc) (make-custom-textual-input-port . bm4fbb) (make-custom-binary-output-port . bm4fba) (make-custom-binary-input/output-port . bm4fb9) (make-custom-binary-input-port . bm4fb8) (make-bytevector . bm4fb7) (lookahead-u8 . bm4fb6) (lookahead-char . bm4fb5) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (i/o-encoding-error? . bm4fa7) (i/o-encoding-error-char . bm4fa6) (i/o-decoding-error? . bm4fa5) (get-u8 . bm4fa4) (get-string-n! . bm4fa3) (get-string-n . bm4fa2) (get-string-all . bm4fa1) (get-line . bm4fa0) (get-datum . bm4f9f) (get-char . bm4f9e) (get-bytevector-some . bm4f9d) (get-bytevector-n! . bm4f9c) (get-bytevector-n . bm4f9b) (get-bytevector-all . bm4f9a) (flush-output-port . bm4f99) (close-port . bm4f98) (exit . bm4f90) (command-line . bm4c22) (remove . bm4f8b) (remv . bm4f8a) (remp . bm4f89) (remq . bm4f88) (partition . bm4f87) (memv . bm4f86) (memq . bm4f85) (memp . bm4f84) (member . bm4f83) (exists . bm4f82) (for-all . bm4f81) (fold-right . bm4f80) (fold-left . bm4f7f) (find . bm4f7e) (filter . bm4f7d) (cons* . bm4f7c) (assv . bm4f7b) (assq . bm4f7a) (assp . bm4f79) (assoc . bm4f78) (call-with-string-output-port . bm4f77) (call-with-port . bm4f76) (call-with-bytevector-output-port . bm4f75) (bytevector->string . bm4f74) (buffer-mode? . bm4f73) (binary-port? . bm4f72) (with-exception-handler . bm4f71) (raise-continuable . bm4f70) (raise . bm4f6f) (make-enumeration . bm4f6e) (enum-set=? . bm4f6d) (enum-set-universe . bm4f6c) (enum-set-union . bm4f6b) (enum-set-subset? . bm4f6a) (enum-set-projection . bm4f69) (enum-set-member? . bm4f68) (enum-set-intersection . bm4f67) (enum-set-indexer . bm4f66) (enum-set-difference . bm4f65) (enum-set-constructor . bm4f64) (enum-set-complement . bm4f63) (enum-set->list . bm4f62) (who-condition? . bm4f61) (warning? . bm4f60) (violation? . bm4f5f) (undefined-violation? . bm4f5e) (syntax-violation? . bm4f5d) (syntax-violation-subform . bm4f5c) (syntax-violation-form . bm4f5b) (syntax-violation . bm319f) (simple-conditions . bm4f5a) (serious-condition? . bm4f59) (non-continuable-violation? . bm4f58) (message-condition? . bm4f57) (make-who-condition . bm4f56) (make-warning . bm4f55) (make-violation . bm4f54) (make-undefined-violation . bm4f53) (make-syntax-violation . bm4f52) (make-serious-condition . bm4f51) (make-non-continuable-violation . bm4f50) (make-message-condition . bm4f4f) (make-lexical-violation . bm4f4e) (make-irritants-condition . bm4f4d) (make-implementation-restriction-violation . bm4f4c) (make-error . bm4f4b) (make-assertion-violation . bm4f4a) (lexical-violation? . bm4f49) (irritants-condition? . bm4f48) (implementation-restriction-violation? . bm4f47) (error? . bm4f46) (condition-who . bm4f45) (condition-predicate . bm4f44) (condition-message . bm4f43) (condition-irritants . bm4f42) (condition-accessor . bm4f41) (condition . bm4f40) (assertion-violation? . bm4f3f) (condition? . bm4f3e) (utf32->string . bm4f3d) (utf16->string . bm4f3c) (utf8->string . bm4f3b) (uint-list->bytevector . bm4f3a) (u8-list->bytevector . bm4f39) (string->utf8 . bm4f38) (string->utf32 . bm4f37) (string->utf16 . bm4f36) (sint-list->bytevector . bm4f35) (native-endianness . bm4f34) (bytevector? . bm4f33) (bytevector=? . bm4f32) (bytevector-uint-set! . bm4f31) (bytevector-uint-ref . bm4f30) (bytevector-u8-set! . bm4f2f) (bytevector-u8-ref . bm4f2e) (bytevector-u64-set! . bm4f2d) (bytevector-u64-ref . bm4f2c) (bytevector-u64-native-set! . bm4f2b) (bytevector-u64-native-ref . bm4f2a) (bytevector-u32-set! . bm4f29) (bytevector-u32-ref . bm4f28) (bytevector-u32-native-set! . bm4f27) (bytevector-u32-native-ref . bm4f26) (bytevector-u16-set! . bm4f25) (bytevector-u16-ref . bm4f24) (bytevector-u16-native-set! . bm4f23) (bytevector-u16-native-ref . bm4f22) (bytevector-sint-set! . bm4f21) (bytevector-sint-ref . bm4f20) (bytevector-s8-set! . bm4f1f) (bytevector-s8-ref . bm4f1e) (bytevector-s64-set! . bm4f1d) (bytevector-s64-ref . bm4f1c) (bytevector-s64-native-set! . bm4f1b) (bytevector-s64-native-ref . bm4f1a) (bytevector-s32-set! . bm4f19) (bytevector-s32-ref . bm4f18) (bytevector-s32-native-set! . bm4f17) (bytevector-s32-native-ref . bm4f16) (bytevector-s16-set! . bm4f15) (bytevector-s16-ref . bm4f14) (bytevector-s16-native-set! . bm4f13) (bytevector-s16-native-ref . bm4f12) (bytevector-length . bm4f11) (bytevector-ieee-single-ref . bm4f10) (bytevector-ieee-single-set! . bm4f0f) (bytevector-ieee-single-native-set! . bm4f0e) (bytevector-ieee-single-native-ref . bm4f0d) (bytevector-ieee-double-set! . bm4f0c) (bytevector-ieee-double-ref . bm4f0b) (bytevector-ieee-double-native-set! . bm4f0a) (bytevector-ieee-double-native-ref . bm4f09) (bytevector-fill! . bm4f08) (bytevector-copy! . bm4f07) (bytevector-copy . bm4f06) (bytevector->uint-list . bm4f05) (bytevector->u8-list . bm4f04) (bytevector->sint-list . bm4f03) (no-nans-violation? . bm4f02) (no-infinities-violation? . bm4f01) (make-no-nans-violation . bm4f00) (make-no-infinities-violation . bm4eff) (real->flonum . bm4efe) (flzero? . bm4efd) (fltruncate . bm4efc) (fltan . bm4efb) (flsqrt . bm4efa) (flsin . bm4ef9) (flround . bm4ef8) (flpositive? . bm4ef7) (flonum? . bm4ef6) (flodd? . bm4ef5) (flnumerator . bm4ef4) (flnegative? . bm4ef3) (flnan? . bm4ef2) (flmod0 . bm4ef1) (flmod . bm4ef0) (flmin . bm4eef) (flmax . bm4eee) (fllog . bm4eed) (flinteger? . bm4eec) (flinfinite? . bm4eeb) (flfloor . bm4eea) (flfinite? . bm4ee9) (flexpt . bm4ee8) (flexp . bm4ee7) (fleven? . bm4ee6) (fldiv0-and-mod0 . bm4ee5) (fldiv0 . bm4ee4) (fldiv-and-mod . bm4ee3) (fldiv . bm4ee2) (fldenominator . bm4ee1) (flcos . bm4ee0) (flceiling . bm4edf) (flatan . bm4ede) (flasin . bm4edd) (flacos . bm4edc) (flabs . bm4edb) (fl>? . bm4eda) (fl>=? . bm4ed9) (fl=? . bm4ed8) (fl<? . bm4ed7) (fl<=? . bm4ed6) (fl/ . bm4ed5) (fl- . bm4ed4) (fl+ . bm4ed3) (fl* . bm4ed2) (fixnum->flonum . bm4ed1) (fxzero? . bm4ed0) (fxxor . bm4ecf) (fxrotate-bit-field . bm4ece) (fxreverse-bit-field . bm4ecd) (fxpositive? . bm4ecc) (fxodd? . bm4ecb) (fxnot . bm4eca) (fxnegative? . bm4ec9) (fxmod0 . bm4ec8) (fxmod . bm4ec7) (fxmin . bm4ec6) (fxmax . bm4ec5) (fxlength . bm4ec4) (fxior . bm4ec3) (fxif . bm4ec2) (fxfirst-bit-set . bm4ec1) (fxeven? . bm4ec0) (fxdiv0-and-mod0 . bm4ebf) (fxdiv0 . bm4ebe) (fxdiv-and-mod . bm4ebd) (fxdiv . bm4ebc) (fxcopy-bit-field . bm4ebb) (fxcopy-bit . bm4eba) (fxbit-set? . bm4eb9) (fxbit-field . bm4eb8) (fxbit-count . bm4eb7) (fxarithmetic-shift-right . bm4eb6) (fxarithmetic-shift-left . bm4eb5) (fxarithmetic-shift . bm4eb4) (fxand . bm4eb3) (fx>? . bm4eb2) (fx>=? . bm4eb1) (fx=? . bm4eb0) (fx<? . bm4eaf) (fx<=? . bm4eae) (fx-/carry . bm4ead) (fx- . bm4eac) (fx+/carry . bm4eab) (fx+ . bm4eaa) (fx*/carry . bm4ea9) (fx* . bm4ea8) (greatest-fixnum . bm4ea7) (least-fixnum . bm4ea6) (fixnum-width . bm4ea5) (fixnum? . bm4ea4) (bitwise-rotate-bit-field . bm4ea3) (bitwise-reverse-bit-field . bm4ea2) (bitwise-length . bm4ea1) (bitwise-if . bm4ea0) (bitwise-first-bit-set . bm4e9f) (bitwise-copy-bit-field . bm4e9e) (bitwise-copy-bit . bm4e9d) (bitwise-bit-set? . bm4e9c) (bitwise-bit-field . bm4e9b) (bitwise-bit-count . bm4e9a) (bitwise-xor . bm4e99) (bitwise-ior . bm4e98) (bitwise-and . bm4e97) (bitwise-not . bm4e96) (bitwise-arithmetic-shift-right . bm4e95) (bitwise-arithmetic-shift-left . bm4e94) (bitwise-arithmetic-shift . bm4e93) (zero? . bm4e92) (vector? . bm4e91) (vector-set! . bm4e90) (vector-ref . bm4e8f) (vector-map . bm4e8e) (vector-length . bm4e8d) (vector-for-each . bm4e8c) (vector-fill! . bm4e8b) (vector->list . bm4e8a) (vector . bm4e89) (values . bm4e88) (truncate . bm4e87) (tan . bm4e86) (symbol? . bm4e85) (symbol=? . bm4e84) (symbol->string . bm4e83) (substring . bm4e82) (string? . bm4e81) (string>? . bm4e80) (string>=? . bm4e7f) (string=? . bm4e7e) (string<? . bm4e7d) (string<=? . bm4e7c) (string-ref . bm4e7b) (string-length . bm4e7a) (string-for-each . bm4e79) (string-copy . bm4e78) (string-append . bm4e77) (string->symbol . bm4e76) (string->number . bm4e75) (string->list . bm4e74) (string . bm4e73) (sqrt . bm4e72) (sin . bm4e71) (round . bm4e70) (reverse . bm4e6f) (real? . bm4e6e) (real-valued? . bm4e6d) (real-part . bm4e6c) (rationalize . bm4e6b) (rational? . bm4e6a) (rational-valued? . bm4e69) (procedure? . bm4e68) (positive? . bm4e67) (pair? . bm4e66) (odd? . bm4e65) (numerator . bm4e64) (number? . bm4e63) (number->string . bm4e62) (null? . bm4e61) (not . bm4e60) (negative? . bm4e5f) (nan? . bm4e5e) (min . bm4e5d) (max . bm4e5c) (map . bm4e5b) (make-vector . bm4e5a) (make-string . bm4e59) (make-rectangular . bm4e58) (make-polar . bm4e57) (magnitude . bm4e56) (log . bm4e55) (list? . bm4e54) (list-tail . bm4e53) (list-ref . bm4e52) (list->vector . bm4e51) (list->string . bm4e50) (list . bm4e4f) (length . bm4e4e) (lcm . bm4e4d) (integer? . bm4e4c) (integer-valued? . bm4e4b) (integer->char . bm4e4a) (infinite? . bm4e49) (inexact? . bm4e48) (inexact . bm4e47) (imag-part . bm4e46) (gcd . bm4e45) (for-each . bm4e44) (floor . bm4e43) (finite? . bm4e42) (expt . bm4e41) (exp . bm4e40) (exact? . bm4e3f) (exact-integer-sqrt . bm4e3e) (exact . bm4e3d) (even? . bm4e3c) (error . bm4e3b) (eqv? . bm4e3a) (equal? . bm4e39) (eq? . bm4e38) (dynamic-wind . bm4e37) (div0-and-mod0 . bm4e36) (mod0 . bm4e35) (div0 . bm4e34) (div-and-mod . bm4e33) (mod . bm4e32) (div . bm4e31) (denominator . bm4e30) (cos . bm4e2f) (cons . bm4e2e) (complex? . bm4e2d) (char? . bm4e2c) (char>? . bm4e2b) (char>=? . bm4e2a) (char=? . bm4e29) (char<? . bm4e28) (char<=? . bm4e27) (char->integer . bm4e26) (ceiling . bm4e25) (call-with-values . bm4e24) (call/cc . bm4e23) (call-with-current-continuation . bm4e22) (cddddr . bm4e21) (cdddar . bm4e20) (cddadr . bm4e1f) (cddaar . bm4e1e) (cdaddr . bm4e1d) (cdadar . bm4e1c) (cdaadr . bm4e1b) (cdaaar . bm4e1a) (cadddr . bm4e19) (caddar . bm4e18) (cadadr . bm4e17) (cadaar . bm4e16) (caaddr . bm4e15) (caadar . bm4e14) (caaadr . bm4e13) (caaaar . bm4e12) (cdddr . bm4e11) (cddar . bm4e10) (cdadr . bm4e0f) (cdaar . bm4e0e) (caddr . bm4e0d) (cadar . bm4e0c) (caadr . bm4e0b) (caaar . bm4e0a) (cddr . bm4e09) (cdar . bm4e08) (cadr . bm4e07) (caar . bm4e06) (cdr . bm4e05) (car . bm4e04) (boolean? . bm4e03) (boolean=? . bm4e02) (atan . bm4e01) (assertion-violation . bm4e00) (asin . bm4dff) (apply . bm4dfe) (append . bm4dfd) (angle . bm4dfc) (acos . bm4dfb) (abs . bm4dfa) (/ . bm4df9) (* . bm4df8) (- . bm4df7) (+ . bm4df6) (>= . bm4df5) (> . bm4df4) (= . bm4df3) (<= . bm4df2) (< . bm4df1) (&no-nans . bm4def) (&no-infinities . bm4dee) (&i/o-encoding . bm4ded) (&i/o-decoding . bm4dec) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2) (&undefined . bm4de1) (&syntax . bm4de0) (&lexical . bm4ddf) (&implementation-restriction . bm4dde) (&non-continuable . bm4ddd) (&who . bm4ddc) (&irritants . bm4ddb) (&assertion . bm4dda) (&violation . bm4dd9) (&error . bm4dd8) (&serious . bm4dd7) (&warning . bm4dd6) (&message . bm4dd5) (&condition . bm4dd4) (define-condition-type . bm4dd3) (define-enumeration . bm4dd2) (define-record-type . bm4dd1) (parent-rtd . bm4dd0) (nongenerative . bm4dcf) (opaque . bm4dce) (sealed . bm4dcd) (protocol . bm4dcc) (parent . bm4dcb) (immutable . bm4dca) (mutable . bm4dc9) (fields . bm4dc8) (error-handling-mode . bm4dc7) (file-options . bm4dc6) (buffer-mode . bm4dc5) (eol-style . bm4dc4) (guard . bm4dc3) (unsyntax-splicing . bm4dc0) (unsyntax . bm4dbf) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (_ . bm4dbc) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (assert . bm4db8) (endianness . bm4db7) (do . bm4db4) (cond . bm4db3) (let* . bm4db2) (let*-values . bm4db1) (let-values . bm4db0) (identifier-syntax . bm4daf) (with-syntax . bm4dae) (quasisyntax . bm4dad) (quasiquote . bm4dac) (syntax-rules . bm4dab) (record-constructor-descriptor . bm4da8) (record-type-descriptor . bm4da7) (case . bm4da6) (unless . bm4da4) (when . bm4da3) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec* . bm4d9e) (letrec . bm4d9d) (case-lambda . bm4d9b) (lambda . bm4d9a) (syntax . bm4d99) (syntax-case . bm4d98) (quote . bm4d97) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (begin . bm4d91) (define-syntax . bm4d8f) (define . bm4d8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5138 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bm317b) (quotient . bm4f97) (null-environment . bm3179) (remainder . bm4f96) (modulo . bm4f95) (inexact->exact . bm4f94) (force . bm4f93) (exact->inexact . bm4f92) (make-promise . bm4f91) (delay . bm4db6)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5139 '(rnrs control) '(6) '() '() '() '((do . bm4db4) (unless . bm4da4) (when . bm4da3) (case-lambda . bm4d9b)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513a '(rnrs eval) '(6) '() '() '() '((eval . bm317f) (environment . bm3177)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bm4f8d) (set-car! . bm4f8c)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bm4f8f) (string-set! . bm4f8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513d '(rnrs programs) '(6) '() '() '() '((exit . bm4f90) (command-line . bm4c22)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bm2eea) (identifier? . bm31a1) (generate-temporaries . bm318d) (free-identifier=? . bm318f) (syntax->datum . bm31a5) (datum->syntax . bm31a3) (bound-identifier=? . bm3191) (syntax-violation . bm319f) (unsyntax-splicing . bm4dc0) (unsyntax . bm4dbf) (_ . bm4dbc) (... . bm4db9) (with-syntax . bm4dae) (quasisyntax . bm4dad) (syntax . bm4d99) (syntax-case . bm4d98)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm513f '(rnrs files) '(6) '() '() '() '((delete-file . bm501c) (file-exists? . bm501b) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5140 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bm501a) (vector-sort . bm5019) (list-sort . bm5018)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5141 '(rnrs base) '(6) '() '() '() '((zero? . bm4e92) (vector? . bm4e91) (vector-set! . bm4e90) (vector-ref . bm4e8f) (vector-map . bm4e8e) (vector-length . bm4e8d) (vector-for-each . bm4e8c) (vector-fill! . bm4e8b) (vector->list . bm4e8a) (vector . bm4e89) (values . bm4e88) (truncate . bm4e87) (tan . bm4e86) (symbol? . bm4e85) (symbol=? . bm4e84) (symbol->string . bm4e83) (substring . bm4e82) (string? . bm4e81) (string>? . bm4e80) (string>=? . bm4e7f) (string=? . bm4e7e) (string<? . bm4e7d) (string<=? . bm4e7c) (string-ref . bm4e7b) (string-length . bm4e7a) (string-for-each . bm4e79) (string-copy . bm4e78) (string-append . bm4e77) (string->symbol . bm4e76) (string->number . bm4e75) (string->list . bm4e74) (string . bm4e73) (sqrt . bm4e72) (sin . bm4e71) (round . bm4e70) (reverse . bm4e6f) (real? . bm4e6e) (real-valued? . bm4e6d) (real-part . bm4e6c) (rationalize . bm4e6b) (rational? . bm4e6a) (rational-valued? . bm4e69) (procedure? . bm4e68) (positive? . bm4e67) (pair? . bm4e66) (odd? . bm4e65) (numerator . bm4e64) (number? . bm4e63) (number->string . bm4e62) (null? . bm4e61) (not . bm4e60) (negative? . bm4e5f) (nan? . bm4e5e) (min . bm4e5d) (max . bm4e5c) (map . bm4e5b) (make-vector . bm4e5a) (make-string . bm4e59) (make-rectangular . bm4e58) (make-polar . bm4e57) (magnitude . bm4e56) (log . bm4e55) (list? . bm4e54) (list-tail . bm4e53) (list-ref . bm4e52) (list->vector . bm4e51) (list->string . bm4e50) (list . bm4e4f) (length . bm4e4e) (lcm . bm4e4d) (integer? . bm4e4c) (integer-valued? . bm4e4b) (integer->char . bm4e4a) (infinite? . bm4e49) (inexact? . bm4e48) (inexact . bm4e47) (imag-part . bm4e46) (gcd . bm4e45) (for-each . bm4e44) (floor . bm4e43) (finite? . bm4e42) (expt . bm4e41) (exp . bm4e40) (exact? . bm4e3f) (exact-integer-sqrt . bm4e3e) (exact . bm4e3d) (even? . bm4e3c) (error . bm4e3b) (eqv? . bm4e3a) (equal? . bm4e39) (eq? . bm4e38) (dynamic-wind . bm4e37) (div0-and-mod0 . bm4e36) (mod0 . bm4e35) (div0 . bm4e34) (div-and-mod . bm4e33) (mod . bm4e32) (div . bm4e31) (denominator . bm4e30) (cos . bm4e2f) (cons . bm4e2e) (complex? . bm4e2d) (char? . bm4e2c) (char>? . bm4e2b) (char>=? . bm4e2a) (char=? . bm4e29) (char<? . bm4e28) (char<=? . bm4e27) (char->integer . bm4e26) (ceiling . bm4e25) (call-with-values . bm4e24) (call/cc . bm4e23) (call-with-current-continuation . bm4e22) (cddddr . bm4e21) (cdddar . bm4e20) (cddadr . bm4e1f) (cddaar . bm4e1e) (cdaddr . bm4e1d) (cdadar . bm4e1c) (cdaadr . bm4e1b) (cdaaar . bm4e1a) (cadddr . bm4e19) (caddar . bm4e18) (cadadr . bm4e17) (cadaar . bm4e16) (caaddr . bm4e15) (caadar . bm4e14) (caaadr . bm4e13) (caaaar . bm4e12) (cdddr . bm4e11) (cddar . bm4e10) (cdadr . bm4e0f) (cdaar . bm4e0e) (caddr . bm4e0d) (cadar . bm4e0c) (caadr . bm4e0b) (caaar . bm4e0a) (cddr . bm4e09) (cdar . bm4e08) (cadr . bm4e07) (caar . bm4e06) (cdr . bm4e05) (car . bm4e04) (boolean? . bm4e03) (boolean=? . bm4e02) (atan . bm4e01) (assertion-violation . bm4e00) (asin . bm4dff) (apply . bm4dfe) (append . bm4dfd) (angle . bm4dfc) (acos . bm4dfb) (abs . bm4dfa) (/ . bm4df9) (* . bm4df8) (- . bm4df7) (+ . bm4df6) (>= . bm4df5) (> . bm4df4) (= . bm4df3) (<= . bm4df2) (< . bm4df1) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (_ . bm4dbc) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (assert . bm4db8) (cond . bm4db3) (let* . bm4db2) (let*-values . bm4db1) (let-values . bm4db0) (identifier-syntax . bm4daf) (quasiquote . bm4dac) (syntax-rules . bm4dab) (case . bm4da6) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec* . bm4d9e) (letrec . bm4d9d) (lambda . bm4d9a) (quote . bm4d97) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (begin . bm4d91) (define-syntax . bm4d8f) (define . bm4d8e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5142 '(rnrs lists) '(6) '() '() '() '((remove . bm4f8b) (remv . bm4f8a) (remp . bm4f89) (remq . bm4f88) (partition . bm4f87) (memv . bm4f86) (memq . bm4f85) (memp . bm4f84) (member . bm4f83) (exists . bm4f82) (for-all . bm4f81) (fold-right . bm4f80) (fold-left . bm4f7f) (find . bm4f7e) (filter . bm4f7d) (cons* . bm4f7c) (assv . bm4f7b) (assq . bm4f7a) (assp . bm4f79) (assoc . bm4f78)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5143 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bm5002) (call-with-input-file . bm5001) (write-char . bm5000) (write . bm4fff) (with-output-to-file . bm4ffe) (with-input-from-file . bm4ffd) (read-char . bm4ffc) (read . bm4ffb) (peek-char . bm4ffa) (open-output-file . bm4ff9) (open-input-file . bm4ff8) (newline . bm4ff7) (display . bm4ff6) (close-output-port . bm4ff5) (close-input-port . bm4ff4) (eof-object? . bm4ff3) (eof-object . bm4ff2) (current-error-port . bm4ff1) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5144 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bm4fb7) (utf32->string . bm4f3d) (utf16->string . bm4f3c) (utf8->string . bm4f3b) (uint-list->bytevector . bm4f3a) (u8-list->bytevector . bm4f39) (string->utf8 . bm4f38) (string->utf32 . bm4f37) (string->utf16 . bm4f36) (sint-list->bytevector . bm4f35) (native-endianness . bm4f34) (bytevector? . bm4f33) (bytevector=? . bm4f32) (bytevector-uint-set! . bm4f31) (bytevector-uint-ref . bm4f30) (bytevector-u8-set! . bm4f2f) (bytevector-u8-ref . bm4f2e) (bytevector-u64-set! . bm4f2d) (bytevector-u64-ref . bm4f2c) (bytevector-u64-native-set! . bm4f2b) (bytevector-u64-native-ref . bm4f2a) (bytevector-u32-set! . bm4f29) (bytevector-u32-ref . bm4f28) (bytevector-u32-native-set! . bm4f27) (bytevector-u32-native-ref . bm4f26) (bytevector-u16-set! . bm4f25) (bytevector-u16-ref . bm4f24) (bytevector-u16-native-set! . bm4f23) (bytevector-u16-native-ref . bm4f22) (bytevector-sint-set! . bm4f21) (bytevector-sint-ref . bm4f20) (bytevector-s8-set! . bm4f1f) (bytevector-s8-ref . bm4f1e) (bytevector-s64-set! . bm4f1d) (bytevector-s64-ref . bm4f1c) (bytevector-s64-native-set! . bm4f1b) (bytevector-s64-native-ref . bm4f1a) (bytevector-s32-set! . bm4f19) (bytevector-s32-ref . bm4f18) (bytevector-s32-native-set! . bm4f17) (bytevector-s32-native-ref . bm4f16) (bytevector-s16-set! . bm4f15) (bytevector-s16-ref . bm4f14) (bytevector-s16-native-set! . bm4f13) (bytevector-s16-native-ref . bm4f12) (bytevector-length . bm4f11) (bytevector-ieee-single-ref . bm4f10) (bytevector-ieee-single-set! . bm4f0f) (bytevector-ieee-single-native-set! . bm4f0e) (bytevector-ieee-single-native-ref . bm4f0d) (bytevector-ieee-double-set! . bm4f0c) (bytevector-ieee-double-ref . bm4f0b) (bytevector-ieee-double-native-set! . bm4f0a) (bytevector-ieee-double-native-ref . bm4f09) (bytevector-fill! . bm4f08) (bytevector-copy! . bm4f07) (bytevector-copy . bm4f06) (bytevector->uint-list . bm4f05) (bytevector->u8-list . bm4f04) (bytevector->sint-list . bm4f03) (endianness . bm4db7)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5145 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bm504a) (string-titlecase . bm5049) (string-normalize-nfkd . bm5048) (string-normalize-nfkc . bm5047) (string-normalize-nfd . bm5046) (string-normalize-nfc . bm5045) (string-foldcase . bm5044) (string-downcase . bm5043) (string-ci>? . bm5042) (string-ci>=? . bm5041) (string-ci=? . bm5040) (string-ci<? . bm503f) (string-ci<=? . bm503e) (char-whitespace? . bm503d) (char-upper-case? . bm503c) (char-title-case? . bm503b) (char-numeric? . bm503a) (char-lower-case? . bm5039) (char-general-category . bm5038) (char-upcase . bm5037) (char-titlecase . bm5036) (char-foldcase . bm5035) (char-downcase . bm5034) (char-ci>? . bm5033) (char-ci>=? . bm5032) (char-ci=? . bm5031) (char-ci<? . bm5030) (char-ci<=? . bm502f) (char-alphabetic? . bm502e)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5146 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bm4f71) (raise-continuable . bm4f70) (raise . bm4f6f) (guard . bm4dc3) (else . bm4dbb) (=> . bm4dba)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5147 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bm4ea3) (bitwise-reverse-bit-field . bm4ea2) (bitwise-length . bm4ea1) (bitwise-if . bm4ea0) (bitwise-first-bit-set . bm4e9f) (bitwise-copy-bit-field . bm4e9e) (bitwise-copy-bit . bm4e9d) (bitwise-bit-set? . bm4e9c) (bitwise-bit-field . bm4e9b) (bitwise-bit-count . bm4e9a) (bitwise-xor . bm4e99) (bitwise-ior . bm4e98) (bitwise-and . bm4e97) (bitwise-not . bm4e96) (bitwise-arithmetic-shift-right . bm4e95) (bitwise-arithmetic-shift-left . bm4e94) (bitwise-arithmetic-shift . bm4e93)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5148 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bm4ed0) (fxxor . bm4ecf) (fxrotate-bit-field . bm4ece) (fxreverse-bit-field . bm4ecd) (fxpositive? . bm4ecc) (fxodd? . bm4ecb) (fxnot . bm4eca) (fxnegative? . bm4ec9) (fxmod0 . bm4ec8) (fxmod . bm4ec7) (fxmin . bm4ec6) (fxmax . bm4ec5) (fxlength . bm4ec4) (fxior . bm4ec3) (fxif . bm4ec2) (fxfirst-bit-set . bm4ec1) (fxeven? . bm4ec0) (fxdiv0-and-mod0 . bm4ebf) (fxdiv0 . bm4ebe) (fxdiv-and-mod . bm4ebd) (fxdiv . bm4ebc) (fxcopy-bit-field . bm4ebb) (fxcopy-bit . bm4eba) (fxbit-set? . bm4eb9) (fxbit-field . bm4eb8) (fxbit-count . bm4eb7) (fxarithmetic-shift-right . bm4eb6) (fxarithmetic-shift-left . bm4eb5) (fxarithmetic-shift . bm4eb4) (fxand . bm4eb3) (fx>? . bm4eb2) (fx>=? . bm4eb1) (fx=? . bm4eb0) (fx<? . bm4eaf) (fx<=? . bm4eae) (fx-/carry . bm4ead) (fx- . bm4eac) (fx+/carry . bm4eab) (fx+ . bm4eaa) (fx*/carry . bm4ea9) (fx* . bm4ea8) (greatest-fixnum . bm4ea7) (least-fixnum . bm4ea6) (fixnum-width . bm4ea5) (fixnum? . bm4ea4)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5149 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bm4f02) (no-infinities-violation? . bm4f01) (make-no-nans-violation . bm4f00) (make-no-infinities-violation . bm4eff) (real->flonum . bm4efe) (flzero? . bm4efd) (fltruncate . bm4efc) (fltan . bm4efb) (flsqrt . bm4efa) (flsin . bm4ef9) (flround . bm4ef8) (flpositive? . bm4ef7) (flonum? . bm4ef6) (flodd? . bm4ef5) (flnumerator . bm4ef4) (flnegative? . bm4ef3) (flnan? . bm4ef2) (flmod0 . bm4ef1) (flmod . bm4ef0) (flmin . bm4eef) (flmax . bm4eee) (fllog . bm4eed) (flinteger? . bm4eec) (flinfinite? . bm4eeb) (flfloor . bm4eea) (flfinite? . bm4ee9) (flexpt . bm4ee8) (flexp . bm4ee7) (fleven? . bm4ee6) (fldiv0-and-mod0 . bm4ee5) (fldiv0 . bm4ee4) (fldiv-and-mod . bm4ee3) (fldiv . bm4ee2) (fldenominator . bm4ee1) (flcos . bm4ee0) (flceiling . bm4edf) (flatan . bm4ede) (flasin . bm4edd) (flacos . bm4edc) (flabs . bm4edb) (fl>? . bm4eda) (fl>=? . bm4ed9) (fl=? . bm4ed8) (fl<? . bm4ed7) (fl<=? . bm4ed6) (fl/ . bm4ed5) (fl- . bm4ed4) (fl+ . bm4ed3) (fl* . bm4ed2) (fixnum->flonum . bm4ed1) (&no-nans . bm4def) (&no-infinities . bm4dee)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bm5017) (string-ci-hash . bm5016) (string-hash . bm5015) (equal-hash . bm5014) (hashtable-equivalence-function . bm5013) (make-hashtable . bm5012) (hashtable-hash-function . bm5011) (make-eqv-hashtable . bm5010) (make-eq-hashtable . bm500f) (hashtable? . bm500e) (hashtable-update! . bm500d) (hashtable-size . bm500c) (hashtable-set! . bm500b) (hashtable-ref . bm500a) (hashtable-mutable? . bm5009) (hashtable-keys . bm5008) (hashtable-entries . bm5007) (hashtable-delete! . bm5006) (hashtable-copy . bm5005) (hashtable-contains? . bm5004) (hashtable-clear! . bm5003)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514b '(rnrs io ports) '(6) '() '() '() '((eof-object? . bm4ff3) (eof-object . bm4ff2) (current-error-port . bm4ff1) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (utf-8-codec . bm4fec) (utf-16-codec . bm4feb) (transcoder-error-handling-mode . bm4fea) (transcoder-eol-style . bm4fe9) (transcoder-codec . bm4fe8) (transcoded-port . bm4fe7) (textual-port? . bm4fe6) (string->bytevector . bm4fe5) (standard-output-port . bm4fe4) (standard-input-port . bm4fe3) (standard-error-port . bm4fe2) (set-port-position! . bm4fe1) (put-u8 . bm4fe0) (put-string . bm4fdf) (put-datum . bm4fde) (put-char . bm4fdd) (put-bytevector . bm4fdc) (port? . bm4fdb) (port-transcoder . bm4fda) (port-position . bm4fd9) (port-has-set-port-position!? . bm4fd8) (port-has-port-position? . bm4fd7) (port-eof? . bm4fd6) (output-port-buffer-mode . bm4fd5) (open-string-output-port . bm4fd4) (open-string-input-port . bm4fd3) (open-file-output-port . bm4fd2) (open-file-input/output-port . bm4fd1) (open-file-input-port . bm4fd0) (open-bytevector-output-port . bm4fcf) (open-bytevector-input-port . bm4fce) (native-transcoder . bm4fcd) (native-eol-style . bm4fcc) (make-transcoder . bm4fcb) (latin-1-codec . bm4fca) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (make-i/o-encoding-error . bm4fbf) (make-i/o-decoding-error . bm4fbe) (make-custom-textual-output-port . bm4fbd) (make-custom-textual-input/output-port . bm4fbc) (make-custom-textual-input-port . bm4fbb) (make-custom-binary-output-port . bm4fba) (make-custom-binary-input/output-port . bm4fb9) (make-custom-binary-input-port . bm4fb8) (lookahead-u8 . bm4fb6) (lookahead-char . bm4fb5) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (i/o-encoding-error? . bm4fa7) (i/o-encoding-error-char . bm4fa6) (i/o-decoding-error? . bm4fa5) (get-u8 . bm4fa4) (get-string-n! . bm4fa3) (get-string-n . bm4fa2) (get-string-all . bm4fa1) (get-line . bm4fa0) (get-datum . bm4f9f) (get-char . bm4f9e) (get-bytevector-some . bm4f9d) (get-bytevector-n! . bm4f9c) (get-bytevector-n . bm4f9b) (get-bytevector-all . bm4f9a) (flush-output-port . bm4f99) (close-port . bm4f98) (call-with-string-output-port . bm4f77) (call-with-port . bm4f76) (call-with-bytevector-output-port . bm4f75) (bytevector->string . bm4f74) (buffer-mode? . bm4f73) (binary-port? . bm4f72) (&i/o-encoding . bm4ded) (&i/o-decoding . bm4dec) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2) (error-handling-mode . bm4dc7) (file-options . bm4dc6) (buffer-mode . bm4dc5) (eol-style . bm4dc4)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514c '(rnrs enums) '(6) '() '() '() '((make-enumeration . bm4f6e) (enum-set=? . bm4f6d) (enum-set-universe . bm4f6c) (enum-set-union . bm4f6b) (enum-set-subset? . bm4f6a) (enum-set-projection . bm4f69) (enum-set-member? . bm4f68) (enum-set-intersection . bm4f67) (enum-set-indexer . bm4f66) (enum-set-difference . bm4f65) (enum-set-constructor . bm4f64) (enum-set-complement . bm4f63) (enum-set->list . bm4f62) (define-enumeration . bm4dd2)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514d '(rnrs conditions) '(6) '() '() '() '((who-condition? . bm4f61) (warning? . bm4f60) (violation? . bm4f5f) (undefined-violation? . bm4f5e) (syntax-violation? . bm4f5d) (syntax-violation-subform . bm4f5c) (syntax-violation-form . bm4f5b) (syntax-violation . bm319f) (simple-conditions . bm4f5a) (serious-condition? . bm4f59) (non-continuable-violation? . bm4f58) (message-condition? . bm4f57) (make-who-condition . bm4f56) (make-warning . bm4f55) (make-violation . bm4f54) (make-undefined-violation . bm4f53) (make-syntax-violation . bm4f52) (make-serious-condition . bm4f51) (make-non-continuable-violation . bm4f50) (make-message-condition . bm4f4f) (make-lexical-violation . bm4f4e) (make-irritants-condition . bm4f4d) (make-implementation-restriction-violation . bm4f4c) (make-error . bm4f4b) (make-assertion-violation . bm4f4a) (lexical-violation? . bm4f49) (irritants-condition? . bm4f48) (implementation-restriction-violation? . bm4f47) (error? . bm4f46) (condition-who . bm4f45) (condition-predicate . bm4f44) (condition-message . bm4f43) (condition-irritants . bm4f42) (condition-accessor . bm4f41) (condition . bm4f40) (assertion-violation? . bm4f3f) (condition? . bm4f3e) (&undefined . bm4de1) (&syntax . bm4de0) (&lexical . bm4ddf) (&implementation-restriction . bm4dde) (&non-continuable . bm4ddd) (&who . bm4ddc) (&irritants . bm4ddb) (&assertion . bm4dda) (&violation . bm4dd9) (&error . bm4dd8) (&serious . bm4dd7) (&warning . bm4dd6) (&message . bm4dd5) (&condition . bm4dd4) (define-condition-type . bm4dd3)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514e '(rnrs records inspection) '(6) '() '() '() '((record? . bm5026) (record-type-uid . bm5025) (record-type-sealed? . bm5024) (record-type-parent . bm5023) (record-type-opaque? . bm5022) (record-type-name . bm5021) (record-type-generative? . bm5020) (record-type-field-names . bm501f) (record-rtd . bm501e) (record-field-mutable? . bm501d)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm514f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bm502d) (record-predicate . bm502c) (record-mutator . bm502b) (record-constructor . bm502a) (record-accessor . bm5029) (make-record-type-descriptor . bm5028) (make-record-constructor-descriptor . bm5027)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5150 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bm4dd1) (parent-rtd . bm4dd0) (nongenerative . bm4dcf) (opaque . bm4dce) (sealed . bm4dcd) (protocol . bm4dcc) (parent . bm4dcb) (immutable . bm4dca) (mutable . bm4dc9) (fields . bm4dc8) (record-constructor-descriptor . bm4da8) (record-type-descriptor . bm4da7)) '() values values '#f '#f '#t '#f) (bm2cd3@bm2b1f@install-library 'bm5151 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bm5131) (&no-nans-rtd . bm5130) (&no-infinities-rcd . bm512f) (&no-infinities-rtd . bm512e) (&i/o-encoding-rcd . bm512d) (&i/o-encoding-rtd . bm512c) (&i/o-decoding-rcd . bm512b) (&i/o-decoding-rtd . bm512a) (&i/o-port-rcd . bm5129) (&i/o-port-rtd . bm5128) (&i/o-file-does-not-exist-rcd . bm5127) (&i/o-file-does-not-exist-rtd . bm5126) (&i/o-file-already-exists-rcd . bm5125) (&i/o-file-already-exists-rtd . bm5124) (&i/o-file-is-read-only-rcd . bm5123) (&i/o-file-is-read-only-rtd . bm5122) (&i/o-file-protection-rcd . bm5121) (&i/o-file-protection-rtd . bm5120) (&i/o-filename-rcd . bm511f) (&i/o-filename-rtd . bm511e) (&i/o-invalid-position-rcd . bm511d) (&i/o-invalid-position-rtd . bm511c) (&i/o-write-rcd . bm511b) (&i/o-write-rtd . bm511a) (&i/o-read-rcd . bm5119) (&i/o-read-rtd . bm5118) (&i/o-rcd . bm5117) (&i/o-rtd . bm5116) (&undefined-rcd . bm5115) (&undefined-rtd . bm5114) (&syntax-rcd . bm5113) (&syntax-rtd . bm5112) (&lexical-rcd . bm5111) (&lexical-rtd . bm5110) (&implementation-restriction-rcd . bm510f) (&implementation-restriction-rtd . bm510e) (&non-continuable-rcd . bm510d) (&non-continuable-rtd . bm510c) (&who-rcd . bm510b) (&who-rtd . bm510a) (&irritants-rcd . bm5109) (&irritants-rtd . bm5108) (&assertion-rcd . bm5107) (&assertion-rtd . bm5106) (&violation-rcd . bm5105) (&violation-rtd . bm5104) (&error-rcd . bm5103) (&error-rtd . bm5102) (&serious-rcd . bm5101) (&serious-rtd . bm5100) (&warning-rcd . bm50ff) (&warning-rtd . bm50fe) (&message-rcd . bm50fd) (&message-rtd . bm50fc) (&condition-rcd . bm50fb) (&condition-rtd . bm50fa) (syntax-error . bm319b) (syntax-dispatch . bm30bf) (pretty-print . bm50f9) (eval-core . bm50f8) (set-symbol-value! . bm50f7) (symbol-value . bm50f6) (gensym . bm50f5) (void . bm50f4) (load . bm4c28) (interaction-environment . bm31ad) (char-ready? . bm50f3) (regexp? . bm50f2) (read-line . bm50f1) (gensym-prefix-set! . bm50f0) (ungensym . bm50ef) (alist->eq-hash-table . bm50ee) (assoc-ref . bm50ed) (print . bm50ec) (format . bm50eb) (host-os . bm50ea) (library-path . bm2afe) (standard-library-path . bm50e9) (ssl-socket? . bm50e8) (socket-sslize! . bm50e7) (%monapi-name-whereis . bm50e6) (%monapi-message-send . bm50e5) (file-newer? . bm50e4) (stat-mtime . bm50e3) (write-to-file . bm50e2) (file->list . bm50e1) (file->string . bm50e0) (digit->integer . bm50df) (call-with-string-input-port . bm50de) (call-with-string-io . bm50dd) (string-split . bm50dc) (bytevector-for-each . bm50db) (string->regexp . bm50da) (rxmatch . bm50d9) (regexp-replace-all . bm50d8) (hashtable-for-each . bm50d7) (mosh-cache-dir . bm28e8) (call-process . bm50d6) (local-tz-offset . bm50d5) (microseconds . bm50d4) (directory-list . bm50d3) (set-current-directory! . bm50d2) (expand-path . bm50d1) (current-directory . bm50d0) (%spawn . bm50cf) (%waitpid . bm50ce) (simple-struct-name . bm50cd) (simple-struct-set! . bm50cc) (simple-struct-ref . bm50cb) (make-simple-struct . bm50ca) (simple-struct? . bm50c9) (pointer-ref-c-int64 . bm50c8) (pointer-ref-c-int32 . bm50c7) (pointer-ref-c-int16 . bm50c6) (pointer-ref-c-int8 . bm50c5) (pointer-ref-c-uint64 . bm50c4) (pointer-ref-c-uint32 . bm50c3) (pointer-ref-c-uint16 . bm50c2) (pointer-ref-c-uint8 . bm50c1) (pointer-set-c-uint64! . bm50c0) (pointer-set-c-uint32! . bm50bf) (pointer-set-c-uint16! . bm50be) (pointer-set-c-uint8! . bm50bd) (pointer-set-c-int64! . bm50bc) (pointer-set-c-int32! . bm50bb) (pointer-set-c-int16! . bm50ba) (pointer-set-c-int8! . bm50b9) (pointer-set-c-pointer! . bm50b8) (pointer-set-c-double! . bm50b7) (pointer-set-c-float! . bm50b6) (pointer-set-c-long-long! . bm50b5) (pointer-set-c-long! . bm50b4) (pointer-set-c-int! . bm50b3) (pointer-set-c-short! . bm50b2) (pointer-set-c-char! . bm50b1) (pointer-ref-c-pointer . bm50b0) (pointer-ref-c-double . bm50af) (pointer-ref-c-float . bm50ae) (pointer-ref-c-unsigned-long-long . bm50ad) (pointer-ref-c-signed-long-long . bm50ac) (pointer-ref-c-unsigned-long . bm50ab) (pointer-ref-c-signed-long . bm50aa) (pointer-ref-c-unsigned-int . bm50a9) (pointer-ref-c-signed-int . bm50a8) (pointer-ref-c-unsigned-short . bm50a7) (pointer-ref-c-signed-short . bm50a6) (pointer-ref-c-unsigned-char . bm50a5) (pointer-ref-c-signed-char . bm50a4) (pointer->integer . bm50a3) (integer->pointer . bm50a2) (pointer? . bm50a1) (shared-errno . bm50a0) (%ffi-free-c-callback-trampoline . bm509f) (%ffi-make-c-callback-trampoline . bm509e) (%ffi-free . bm509d) (%ffi-malloc . bm509c) (%ffi-supported? . bm509b) (%ffi-pointer->string . bm509a) (%ffi-call . bm5099) (%ffi-lookup . bm5098) (%ffi-open . bm5097) (null-terminated-utf8->string . bm5096) (null-terminated-bytevector->string . bm5095) (%exec . bm5094) (%fork . bm5093) (%pipe . bm5092) (p . bm5091) (open-output-string . bm5090) (get-output-string . bm508f) (file-stat-ctime . bm508e) (file-stat-atime . bm508d) (file-stat-mtime . bm508c) (file-size-in-bytes . bm508b) (file-writable? . bm508a) (file-executable? . bm5089) (file-readable? . bm5088) (file-regular? . bm5087) (file-symbolic-link? . bm5086) (file-directory? . bm5085) (create-symbolic-link . bm5084) (rename-file . bm5083) (delete-directory . bm5082) (create-directory . bm5081) (create-mosh-cache-dir . bm5080) (get-environment-variables . bm507f) (current-exception-handler . bm507e) (get-environment-variable . bm507d) (join-wraps . bm507c) (id->real-label . bm507b) (same-marks? . bm507a) (same-marks*? . bm5079) (get-timeofday . bm5078) (get-command-line . bm5077) (sys-display . bm5076) (whereis . bm5075) (register . bm5074) (vm-join! . bm5073) (vm-set-value! . bm5072) (vm? . bm5071) (main-vm? . bm5070) (vm-eval . bm506f) (vm-self . bm506e) (vm-start! . bm506d) (make-vm . bm506c) (mutex-try-lock! . bm506b) (mutex-unlock! . bm506a) (mutex-lock! . bm5069) (mutex? . bm5068) (make-mutex . bm5067) (condition-variable-notify-all! . bm5066) (condition-variable-notify! . bm5065) (condition-variable-wait! . bm5064) (make-condition-variable . bm5063) (write/ss . bm5062) (mosh-executable-path . bm5061) (make-file-options . bm5060) (source-info . bm505f) (make-compiler-instruction . bm505e) (make-instruction . bm505d) (set-source-info! . bm505c) (bignum? . bm505b) (fast-equal? . bm505a) (fasl-read . bm5059) (fasl-write . bm5058) (time-usage . bm5057) (os-constant . bm5056) (disasm . bm5055) (make-parameter . bm28e6) (socket-port . bm5054) (socket-shutdown . bm5053) (socket-close . bm5052) (socket-send . bm5051) (socket-recv! . bm5050) (socket-recv . bm504f) (make-server-socket . bm504e) (make-client-socket . bm504d) (socket-accept . bm504c) (socket? . bm504b) (string-upcase . bm504a) (string-titlecase . bm5049) (string-normalize-nfkd . bm5048) (string-normalize-nfkc . bm5047) (string-normalize-nfd . bm5046) (string-normalize-nfc . bm5045) (string-foldcase . bm5044) (string-downcase . bm5043) (string-ci>? . bm5042) (string-ci>=? . bm5041) (string-ci=? . bm5040) (string-ci<? . bm503f) (string-ci<=? . bm503e) (char-whitespace? . bm503d) (char-upper-case? . bm503c) (char-title-case? . bm503b) (char-numeric? . bm503a) (char-lower-case? . bm5039) (char-general-category . bm5038) (char-upcase . bm5037) (char-titlecase . bm5036) (char-foldcase . bm5035) (char-downcase . bm5034) (char-ci>? . bm5033) (char-ci>=? . bm5032) (char-ci=? . bm5031) (char-ci<? . bm5030) (char-ci<=? . bm502f) (char-alphabetic? . bm502e) (make-variable-transformer . bm2eea) (identifier? . bm31a1) (generate-temporaries . bm318d) (free-identifier=? . bm318f) (syntax->datum . bm31a5) (datum->syntax . bm31a3) (bound-identifier=? . bm3191) (record-type-descriptor? . bm502d) (record-predicate . bm502c) (record-mutator . bm502b) (record-constructor . bm502a) (record-accessor . bm5029) (make-record-type-descriptor . bm5028) (make-record-constructor-descriptor . bm5027) (record? . bm5026) (record-type-uid . bm5025) (record-type-sealed? . bm5024) (record-type-parent . bm5023) (record-type-opaque? . bm5022) (record-type-name . bm5021) (record-type-generative? . bm5020) (record-type-field-names . bm501f) (record-rtd . bm501e) (record-field-mutable? . bm501d) (delete-file . bm501c) (file-exists? . bm501b) (vector-sort! . bm501a) (vector-sort . bm5019) (list-sort . bm5018) (symbol-hash . bm5017) (string-ci-hash . bm5016) (string-hash . bm5015) (equal-hash . bm5014) (hashtable-equivalence-function . bm5013) (make-hashtable . bm5012) (hashtable-hash-function . bm5011) (make-eqv-hashtable . bm5010) (make-eq-hashtable . bm500f) (hashtable? . bm500e) (hashtable-update! . bm500d) (hashtable-size . bm500c) (hashtable-set! . bm500b) (hashtable-ref . bm500a) (hashtable-mutable? . bm5009) (hashtable-keys . bm5008) (hashtable-entries . bm5007) (hashtable-delete! . bm5006) (hashtable-copy . bm5005) (hashtable-contains? . bm5004) (hashtable-clear! . bm5003) (call-with-output-file . bm5002) (call-with-input-file . bm5001) (write-char . bm5000) (write . bm4fff) (with-output-to-file . bm4ffe) (with-input-from-file . bm4ffd) (read-char . bm4ffc) (read . bm4ffb) (peek-char . bm4ffa) (open-output-file . bm4ff9) (open-input-file . bm4ff8) (newline . bm4ff7) (display . bm4ff6) (close-output-port . bm4ff5) (close-input-port . bm4ff4) (eof-object? . bm4ff3) (eof-object . bm4ff2) (current-error-port . bm4ff1) (current-output-port . bm4ff0) (current-input-port . bm4fef) (output-port? . bm4fee) (input-port? . bm4fed) (utf-8-codec . bm4fec) (utf-16-codec . bm4feb) (transcoder-error-handling-mode . bm4fea) (transcoder-eol-style . bm4fe9) (transcoder-codec . bm4fe8) (transcoded-port . bm4fe7) (textual-port? . bm4fe6) (string->bytevector . bm4fe5) (standard-output-port . bm4fe4) (standard-input-port . bm4fe3) (standard-error-port . bm4fe2) (set-port-position! . bm4fe1) (put-u8 . bm4fe0) (put-string . bm4fdf) (put-datum . bm4fde) (put-char . bm4fdd) (put-bytevector . bm4fdc) (port? . bm4fdb) (port-transcoder . bm4fda) (port-position . bm4fd9) (port-has-set-port-position!? . bm4fd8) (port-has-port-position? . bm4fd7) (port-eof? . bm4fd6) (output-port-buffer-mode . bm4fd5) (open-string-output-port . bm4fd4) (open-string-input-port . bm4fd3) (open-file-output-port . bm4fd2) (open-file-input/output-port . bm4fd1) (open-file-input-port . bm4fd0) (open-bytevector-output-port . bm4fcf) (open-bytevector-input-port . bm4fce) (native-transcoder . bm4fcd) (native-eol-style . bm4fcc) (make-transcoder . bm4fcb) (latin-1-codec . bm4fca) (make-i/o-write-error . bm4fc9) (make-i/o-read-error . bm4fc8) (make-i/o-port-error . bm4fc7) (make-i/o-invalid-position-error . bm4fc6) (make-i/o-filename-error . bm4fc5) (make-i/o-file-protection-error . bm4fc4) (make-i/o-file-is-read-only-error . bm4fc3) (make-i/o-file-does-not-exist-error . bm4fc2) (make-i/o-file-already-exists-error . bm4fc1) (make-i/o-error . bm4fc0) (make-i/o-encoding-error . bm4fbf) (make-i/o-decoding-error . bm4fbe) (make-custom-textual-output-port . bm4fbd) (make-custom-textual-input/output-port . bm4fbc) (make-custom-textual-input-port . bm4fbb) (make-custom-binary-output-port . bm4fba) (make-custom-binary-input/output-port . bm4fb9) (make-custom-binary-input-port . bm4fb8) (make-bytevector . bm4fb7) (lookahead-u8 . bm4fb6) (lookahead-char . bm4fb5) (i/o-write-error? . bm4fb4) (i/o-read-error? . bm4fb3) (i/o-port-error? . bm4fb2) (i/o-invalid-position-error? . bm4fb1) (i/o-filename-error? . bm4fb0) (i/o-file-protection-error? . bm4faf) (i/o-file-is-read-only-error? . bm4fae) (i/o-file-does-not-exist-error? . bm4fad) (i/o-file-already-exists-error? . bm4fac) (i/o-error? . bm4fab) (i/o-error-position . bm4faa) (i/o-error-port . bm4fa9) (i/o-error-filename . bm4fa8) (i/o-encoding-error? . bm4fa7) (i/o-encoding-error-char . bm4fa6) (i/o-decoding-error? . bm4fa5) (get-u8 . bm4fa4) (get-string-n! . bm4fa3) (get-string-n . bm4fa2) (get-string-all . bm4fa1) (get-line . bm4fa0) (get-datum . bm4f9f) (get-char . bm4f9e) (get-bytevector-some . bm4f9d) (get-bytevector-n! . bm4f9c) (get-bytevector-n . bm4f9b) (get-bytevector-all . bm4f9a) (flush-output-port . bm4f99) (close-port . bm4f98) (scheme-report-environment . bm317b) (quotient . bm4f97) (null-environment . bm3179) (remainder . bm4f96) (modulo . bm4f95) (inexact->exact . bm4f94) (force . bm4f93) (exact->inexact . bm4f92) (make-promise . bm4f91) (exit . bm4f90) (command-line . bm4c22) (string-fill! . bm4f8f) (string-set! . bm4f8e) (set-cdr! . bm4f8d) (set-car! . bm4f8c) (remove . bm4f8b) (remv . bm4f8a) (remp . bm4f89) (remq . bm4f88) (partition . bm4f87) (memv . bm4f86) (memq . bm4f85) (memp . bm4f84) (member . bm4f83) (exists . bm4f82) (for-all . bm4f81) (fold-right . bm4f80) (fold-left . bm4f7f) (find . bm4f7e) (filter . bm4f7d) (cons* . bm4f7c) (assv . bm4f7b) (assq . bm4f7a) (assp . bm4f79) (assoc . bm4f78) (call-with-string-output-port . bm4f77) (call-with-port . bm4f76) (call-with-bytevector-output-port . bm4f75) (bytevector->string . bm4f74) (buffer-mode? . bm4f73) (binary-port? . bm4f72) (with-exception-handler . bm4f71) (raise-continuable . bm4f70) (raise . bm4f6f) (eval . bm317f) (environment . bm3177) (make-enumeration . bm4f6e) (enum-set=? . bm4f6d) (enum-set-universe . bm4f6c) (enum-set-union . bm4f6b) (enum-set-subset? . bm4f6a) (enum-set-projection . bm4f69) (enum-set-member? . bm4f68) (enum-set-intersection . bm4f67) (enum-set-indexer . bm4f66) (enum-set-difference . bm4f65) (enum-set-constructor . bm4f64) (enum-set-complement . bm4f63) (enum-set->list . bm4f62) (who-condition? . bm4f61) (warning? . bm4f60) (violation? . bm4f5f) (undefined-violation? . bm4f5e) (syntax-violation? . bm4f5d) (syntax-violation-subform . bm4f5c) (syntax-violation-form . bm4f5b) (syntax-violation . bm319f) (simple-conditions . bm4f5a) (serious-condition? . bm4f59) (non-continuable-violation? . bm4f58) (message-condition? . bm4f57) (make-who-condition . bm4f56) (make-warning . bm4f55) (make-violation . bm4f54) (make-undefined-violation . bm4f53) (make-syntax-violation . bm4f52) (make-serious-condition . bm4f51) (make-non-continuable-violation . bm4f50) (make-message-condition . bm4f4f) (make-lexical-violation . bm4f4e) (make-irritants-condition . bm4f4d) (make-implementation-restriction-violation . bm4f4c) (make-error . bm4f4b) (make-assertion-violation . bm4f4a) (lexical-violation? . bm4f49) (irritants-condition? . bm4f48) (implementation-restriction-violation? . bm4f47) (error? . bm4f46) (condition-who . bm4f45) (condition-predicate . bm4f44) (condition-message . bm4f43) (condition-irritants . bm4f42) (condition-accessor . bm4f41) (condition . bm4f40) (assertion-violation? . bm4f3f) (condition? . bm4f3e) (utf32->string . bm4f3d) (utf16->string . bm4f3c) (utf8->string . bm4f3b) (uint-list->bytevector . bm4f3a) (u8-list->bytevector . bm4f39) (string->utf8 . bm4f38) (string->utf32 . bm4f37) (string->utf16 . bm4f36) (sint-list->bytevector . bm4f35) (native-endianness . bm4f34) (bytevector? . bm4f33) (bytevector=? . bm4f32) (bytevector-uint-set! . bm4f31) (bytevector-uint-ref . bm4f30) (bytevector-u8-set! . bm4f2f) (bytevector-u8-ref . bm4f2e) (bytevector-u64-set! . bm4f2d) (bytevector-u64-ref . bm4f2c) (bytevector-u64-native-set! . bm4f2b) (bytevector-u64-native-ref . bm4f2a) (bytevector-u32-set! . bm4f29) (bytevector-u32-ref . bm4f28) (bytevector-u32-native-set! . bm4f27) (bytevector-u32-native-ref . bm4f26) (bytevector-u16-set! . bm4f25) (bytevector-u16-ref . bm4f24) (bytevector-u16-native-set! . bm4f23) (bytevector-u16-native-ref . bm4f22) (bytevector-sint-set! . bm4f21) (bytevector-sint-ref . bm4f20) (bytevector-s8-set! . bm4f1f) (bytevector-s8-ref . bm4f1e) (bytevector-s64-set! . bm4f1d) (bytevector-s64-ref . bm4f1c) (bytevector-s64-native-set! . bm4f1b) (bytevector-s64-native-ref . bm4f1a) (bytevector-s32-set! . bm4f19) (bytevector-s32-ref . bm4f18) (bytevector-s32-native-set! . bm4f17) (bytevector-s32-native-ref . bm4f16) (bytevector-s16-set! . bm4f15) (bytevector-s16-ref . bm4f14) (bytevector-s16-native-set! . bm4f13) (bytevector-s16-native-ref . bm4f12) (bytevector-length . bm4f11) (bytevector-ieee-single-ref . bm4f10) (bytevector-ieee-single-set! . bm4f0f) (bytevector-ieee-single-native-set! . bm4f0e) (bytevector-ieee-single-native-ref . bm4f0d) (bytevector-ieee-double-set! . bm4f0c) (bytevector-ieee-double-ref . bm4f0b) (bytevector-ieee-double-native-set! . bm4f0a) (bytevector-ieee-double-native-ref . bm4f09) (bytevector-fill! . bm4f08) (bytevector-copy! . bm4f07) (bytevector-copy . bm4f06) (bytevector->uint-list . bm4f05) (bytevector->u8-list . bm4f04) (bytevector->sint-list . bm4f03) (no-nans-violation? . bm4f02) (no-infinities-violation? . bm4f01) (make-no-nans-violation . bm4f00) (make-no-infinities-violation . bm4eff) (real->flonum . bm4efe) (flzero? . bm4efd) (fltruncate . bm4efc) (fltan . bm4efb) (flsqrt . bm4efa) (flsin . bm4ef9) (flround . bm4ef8) (flpositive? . bm4ef7) (flonum? . bm4ef6) (flodd? . bm4ef5) (flnumerator . bm4ef4) (flnegative? . bm4ef3) (flnan? . bm4ef2) (flmod0 . bm4ef1) (flmod . bm4ef0) (flmin . bm4eef) (flmax . bm4eee) (fllog . bm4eed) (flinteger? . bm4eec) (flinfinite? . bm4eeb) (flfloor . bm4eea) (flfinite? . bm4ee9) (flexpt . bm4ee8) (flexp . bm4ee7) (fleven? . bm4ee6) (fldiv0-and-mod0 . bm4ee5) (fldiv0 . bm4ee4) (fldiv-and-mod . bm4ee3) (fldiv . bm4ee2) (fldenominator . bm4ee1) (flcos . bm4ee0) (flceiling . bm4edf) (flatan . bm4ede) (flasin . bm4edd) (flacos . bm4edc) (flabs . bm4edb) (fl>? . bm4eda) (fl>=? . bm4ed9) (fl=? . bm4ed8) (fl<? . bm4ed7) (fl<=? . bm4ed6) (fl/ . bm4ed5) (fl- . bm4ed4) (fl+ . bm4ed3) (fl* . bm4ed2) (fixnum->flonum . bm4ed1) (fxzero? . bm4ed0) (fxxor . bm4ecf) (fxrotate-bit-field . bm4ece) (fxreverse-bit-field . bm4ecd) (fxpositive? . bm4ecc) (fxodd? . bm4ecb) (fxnot . bm4eca) (fxnegative? . bm4ec9) (fxmod0 . bm4ec8) (fxmod . bm4ec7) (fxmin . bm4ec6) (fxmax . bm4ec5) (fxlength . bm4ec4) (fxior . bm4ec3) (fxif . bm4ec2) (fxfirst-bit-set . bm4ec1) (fxeven? . bm4ec0) (fxdiv0-and-mod0 . bm4ebf) (fxdiv0 . bm4ebe) (fxdiv-and-mod . bm4ebd) (fxdiv . bm4ebc) (fxcopy-bit-field . bm4ebb) (fxcopy-bit . bm4eba) (fxbit-set? . bm4eb9) (fxbit-field . bm4eb8) (fxbit-count . bm4eb7) (fxarithmetic-shift-right . bm4eb6) (fxarithmetic-shift-left . bm4eb5) (fxarithmetic-shift . bm4eb4) (fxand . bm4eb3) (fx>? . bm4eb2) (fx>=? . bm4eb1) (fx=? . bm4eb0) (fx<? . bm4eaf) (fx<=? . bm4eae) (fx-/carry . bm4ead) (fx- . bm4eac) (fx+/carry . bm4eab) (fx+ . bm4eaa) (fx*/carry . bm4ea9) (fx* . bm4ea8) (greatest-fixnum . bm4ea7) (least-fixnum . bm4ea6) (fixnum-width . bm4ea5) (fixnum? . bm4ea4) (bitwise-rotate-bit-field . bm4ea3) (bitwise-reverse-bit-field . bm4ea2) (bitwise-length . bm4ea1) (bitwise-if . bm4ea0) (bitwise-first-bit-set . bm4e9f) (bitwise-copy-bit-field . bm4e9e) (bitwise-copy-bit . bm4e9d) (bitwise-bit-set? . bm4e9c) (bitwise-bit-field . bm4e9b) (bitwise-bit-count . bm4e9a) (bitwise-xor . bm4e99) (bitwise-ior . bm4e98) (bitwise-and . bm4e97) (bitwise-not . bm4e96) (bitwise-arithmetic-shift-right . bm4e95) (bitwise-arithmetic-shift-left . bm4e94) (bitwise-arithmetic-shift . bm4e93) (zero? . bm4e92) (vector? . bm4e91) (vector-set! . bm4e90) (vector-ref . bm4e8f) (vector-map . bm4e8e) (vector-length . bm4e8d) (vector-for-each . bm4e8c) (vector-fill! . bm4e8b) (vector->list . bm4e8a) (vector . bm4e89) (values . bm4e88) (truncate . bm4e87) (tan . bm4e86) (symbol? . bm4e85) (symbol=? . bm4e84) (symbol->string . bm4e83) (substring . bm4e82) (string? . bm4e81) (string>? . bm4e80) (string>=? . bm4e7f) (string=? . bm4e7e) (string<? . bm4e7d) (string<=? . bm4e7c) (string-ref . bm4e7b) (string-length . bm4e7a) (string-for-each . bm4e79) (string-copy . bm4e78) (string-append . bm4e77) (string->symbol . bm4e76) (string->number . bm4e75) (string->list . bm4e74) (string . bm4e73) (sqrt . bm4e72) (sin . bm4e71) (round . bm4e70) (reverse . bm4e6f) (real? . bm4e6e) (real-valued? . bm4e6d) (real-part . bm4e6c) (rationalize . bm4e6b) (rational? . bm4e6a) (rational-valued? . bm4e69) (procedure? . bm4e68) (positive? . bm4e67) (pair? . bm4e66) (odd? . bm4e65) (numerator . bm4e64) (number? . bm4e63) (number->string . bm4e62) (null? . bm4e61) (not . bm4e60) (negative? . bm4e5f) (nan? . bm4e5e) (min . bm4e5d) (max . bm4e5c) (map . bm4e5b) (make-vector . bm4e5a) (make-string . bm4e59) (make-rectangular . bm4e58) (make-polar . bm4e57) (magnitude . bm4e56) (log . bm4e55) (list? . bm4e54) (list-tail . bm4e53) (list-ref . bm4e52) (list->vector . bm4e51) (list->string . bm4e50) (list . bm4e4f) (length . bm4e4e) (lcm . bm4e4d) (integer? . bm4e4c) (integer-valued? . bm4e4b) (integer->char . bm4e4a) (infinite? . bm4e49) (inexact? . bm4e48) (inexact . bm4e47) (imag-part . bm4e46) (gcd . bm4e45) (for-each . bm4e44) (floor . bm4e43) (finite? . bm4e42) (expt . bm4e41) (exp . bm4e40) (exact? . bm4e3f) (exact-integer-sqrt . bm4e3e) (exact . bm4e3d) (even? . bm4e3c) (error . bm4e3b) (eqv? . bm4e3a) (equal? . bm4e39) (eq? . bm4e38) (dynamic-wind . bm4e37) (div0-and-mod0 . bm4e36) (mod0 . bm4e35) (div0 . bm4e34) (div-and-mod . bm4e33) (mod . bm4e32) (div . bm4e31) (denominator . bm4e30) (cos . bm4e2f) (cons . bm4e2e) (complex? . bm4e2d) (char? . bm4e2c) (char>? . bm4e2b) (char>=? . bm4e2a) (char=? . bm4e29) (char<? . bm4e28) (char<=? . bm4e27) (char->integer . bm4e26) (ceiling . bm4e25) (call-with-values . bm4e24) (call/cc . bm4e23) (call-with-current-continuation . bm4e22) (cddddr . bm4e21) (cdddar . bm4e20) (cddadr . bm4e1f) (cddaar . bm4e1e) (cdaddr . bm4e1d) (cdadar . bm4e1c) (cdaadr . bm4e1b) (cdaaar . bm4e1a) (cadddr . bm4e19) (caddar . bm4e18) (cadadr . bm4e17) (cadaar . bm4e16) (caaddr . bm4e15) (caadar . bm4e14) (caaadr . bm4e13) (caaaar . bm4e12) (cdddr . bm4e11) (cddar . bm4e10) (cdadr . bm4e0f) (cdaar . bm4e0e) (caddr . bm4e0d) (cadar . bm4e0c) (caadr . bm4e0b) (caaar . bm4e0a) (cddr . bm4e09) (cdar . bm4e08) (cadr . bm4e07) (caar . bm4e06) (cdr . bm4e05) (car . bm4e04) (boolean? . bm4e03) (boolean=? . bm4e02) (atan . bm4e01) (assertion-violation . bm4e00) (assertion-error . bm3199) (asin . bm4dff) (apply . bm4dfe) (append . bm4dfd) (angle . bm4dfc) (acos . bm4dfb) (abs . bm4dfa) (/ . bm4df9) (* . bm4df8) (- . bm4df7) (+ . bm4df6) (>= . bm4df5) (> . bm4df4) (= . bm4df3) (<= . bm4df2) (< . bm4df1) (library . bm4df0) (&no-nans . bm4def) (&no-infinities . bm4dee) (&i/o-encoding . bm4ded) (&i/o-decoding . bm4dec) (&i/o-port . bm4deb) (&i/o-file-does-not-exist . bm4dea) (&i/o-file-already-exists . bm4de9) (&i/o-file-is-read-only . bm4de8) (&i/o-file-protection . bm4de7) (&i/o-filename . bm4de6) (&i/o-invalid-position . bm4de5) (&i/o-write . bm4de4) (&i/o-read . bm4de3) (&i/o . bm4de2) (&undefined . bm4de1) (&syntax . bm4de0) (&lexical . bm4ddf) (&implementation-restriction . bm4dde) (&non-continuable . bm4ddd) (&who . bm4ddc) (&irritants . bm4ddb) (&assertion . bm4dda) (&violation . bm4dd9) (&error . bm4dd8) (&serious . bm4dd7) (&warning . bm4dd6) (&message . bm4dd5) (&condition . bm4dd4) (define-condition-type . bm4dd3) (define-enumeration . bm4dd2) (define-record-type . bm4dd1) (parent-rtd . bm4dd0) (nongenerative . bm4dcf) (opaque . bm4dce) (sealed . bm4dcd) (protocol . bm4dcc) (parent . bm4dcb) (immutable . bm4dca) (mutable . bm4dc9) (fields . bm4dc8) (error-handling-mode . bm4dc7) (file-options . bm4dc6) (buffer-mode . bm4dc5) (eol-style . bm4dc4) (guard . bm4dc3) (trace-define . bm4dc2) (trace-lambda . bm4dc1) (unsyntax-splicing . bm4dc0) (unsyntax . bm4dbf) (unquote-splicing . bm4dbe) (unquote . bm4dbd) (_ . bm4dbc) (else . bm4dbb) (=> . bm4dba) (... . bm4db9) (assert . bm4db8) (endianness . bm4db7) (delay . bm4db6) (time . bm4db5) (do . bm4db4) (cond . bm4db3) (let* . bm4db2) (let*-values . bm4db1) (let-values . bm4db0) (identifier-syntax . bm4daf) (with-syntax . bm4dae) (quasisyntax . bm4dad) (quasiquote . bm4dac) (syntax-rules . bm4dab) (include . bm4daa) (define-struct . bm4da9) (record-constructor-descriptor . bm4da8) (record-type-descriptor . bm4da7) (case . bm4da6) (parameterize . bm4da5) (unless . bm4da4) (when . bm4da3) (or . bm4da2) (and . bm4da1) (if . bm4da0) (let . bm4d9f) (letrec* . bm4d9e) (letrec . bm4d9d) (type-descriptor . bm4d9c) (case-lambda . bm4d9b) (lambda . bm4d9a) (syntax . bm4d99) (syntax-case . bm4d98) (quote . bm4d97) (foreign-call . bm4d96) (letrec-syntax . bm4d95) (let-syntax . bm4d94) (set! . bm4d93) (import . bm4d92) (begin . bm4d91) (module . bm4d90) (define-syntax . bm4d8f) (define . bm4d8e)) '((bm5131 core-prim . &no-nans-rcd) (bm5130 core-prim . &no-nans-rtd) (bm512f core-prim . &no-infinities-rcd) (bm512e core-prim . &no-infinities-rtd) (bm512d core-prim . &i/o-encoding-rcd) (bm512c core-prim . &i/o-encoding-rtd) (bm512b core-prim . &i/o-decoding-rcd) (bm512a core-prim . &i/o-decoding-rtd) (bm5129 core-prim . &i/o-port-rcd) (bm5128 core-prim . &i/o-port-rtd) (bm5127 core-prim . &i/o-file-does-not-exist-rcd) (bm5126 core-prim . &i/o-file-does-not-exist-rtd) (bm5125 core-prim . &i/o-file-already-exists-rcd) (bm5124 core-prim . &i/o-file-already-exists-rtd) (bm5123 core-prim . &i/o-file-is-read-only-rcd) (bm5122 core-prim . &i/o-file-is-read-only-rtd) (bm5121 core-prim . &i/o-file-protection-rcd) (bm5120 core-prim . &i/o-file-protection-rtd) (bm511f core-prim . &i/o-filename-rcd) (bm511e core-prim . &i/o-filename-rtd) (bm511d core-prim . &i/o-invalid-position-rcd) (bm511c core-prim . &i/o-invalid-position-rtd) (bm511b core-prim . &i/o-write-rcd) (bm511a core-prim . &i/o-write-rtd) (bm5119 core-prim . &i/o-read-rcd) (bm5118 core-prim . &i/o-read-rtd) (bm5117 core-prim . &i/o-rcd) (bm5116 core-prim . &i/o-rtd) (bm5115 core-prim . &undefined-rcd) (bm5114 core-prim . &undefined-rtd) (bm5113 core-prim . &syntax-rcd) (bm5112 core-prim . &syntax-rtd) (bm5111 core-prim . &lexical-rcd) (bm5110 core-prim . &lexical-rtd) (bm510f core-prim . &implementation-restriction-rcd) (bm510e core-prim . &implementation-restriction-rtd) (bm510d core-prim . &non-continuable-rcd) (bm510c core-prim . &non-continuable-rtd) (bm510b core-prim . &who-rcd) (bm510a core-prim . &who-rtd) (bm5109 core-prim . &irritants-rcd) (bm5108 core-prim . &irritants-rtd) (bm5107 core-prim . &assertion-rcd) (bm5106 core-prim . &assertion-rtd) (bm5105 core-prim . &violation-rcd) (bm5104 core-prim . &violation-rtd) (bm5103 core-prim . &error-rcd) (bm5102 core-prim . &error-rtd) (bm5101 core-prim . &serious-rcd) (bm5100 core-prim . &serious-rtd) (bm50ff core-prim . &warning-rcd) (bm50fe core-prim . &warning-rtd) (bm50fd core-prim . &message-rcd) (bm50fc core-prim . &message-rtd) (bm50fb core-prim . &condition-rcd) (bm50fa core-prim . &condition-rtd) (bm319b core-prim . syntax-error) (bm30bf core-prim . syntax-dispatch) (bm50f9 core-prim . pretty-print) (bm50f8 core-prim . eval-core) (bm50f7 core-prim . set-symbol-value!) (bm50f6 core-prim . symbol-value) (bm50f5 core-prim . gensym) (bm50f4 core-prim . void) (bm4c28 core-prim . load) (bm31ad core-prim . interaction-environment) (bm50f3 core-prim . char-ready?) (bm50f2 core-prim . regexp?) (bm50f1 core-prim . read-line) (bm50f0 core-prim . gensym-prefix-set!) (bm50ef core-prim . ungensym) (bm50ee core-prim . alist->eq-hash-table) (bm50ed core-prim . assoc-ref) (bm50ec core-prim . print) (bm50eb core-prim . format) (bm50ea core-prim . host-os) (bm2afe core-prim . library-path) (bm50e9 core-prim . standard-library-path) (bm50e8 core-prim . ssl-socket?) (bm50e7 core-prim . socket-sslize!) (bm50e6 core-prim . %monapi-name-whereis) (bm50e5 core-prim . %monapi-message-send) (bm50e4 core-prim . file-newer?) (bm50e3 core-prim . stat-mtime) (bm50e2 core-prim . write-to-file) (bm50e1 core-prim . file->list) (bm50e0 core-prim . file->string) (bm50df core-prim . digit->integer) (bm50de core-prim . call-with-string-input-port) (bm50dd core-prim . call-with-string-io) (bm50dc core-prim . string-split) (bm50db core-prim . bytevector-for-each) (bm50da core-prim . string->regexp) (bm50d9 core-prim . rxmatch) (bm50d8 core-prim . regexp-replace-all) (bm50d7 core-prim . hashtable-for-each) (bm28e8 core-prim . mosh-cache-dir) (bm50d6 core-prim . call-process) (bm50d5 core-prim . local-tz-offset) (bm50d4 core-prim . microseconds) (bm50d3 core-prim . directory-list) (bm50d2 core-prim . set-current-directory!) (bm50d1 core-prim . expand-path) (bm50d0 core-prim . current-directory) (bm50cf core-prim . %spawn) (bm50ce core-prim . %waitpid) (bm50cd core-prim . simple-struct-name) (bm50cc core-prim . simple-struct-set!) (bm50cb core-prim . simple-struct-ref) (bm50ca core-prim . make-simple-struct) (bm50c9 core-prim . simple-struct?) (bm50c8 core-prim . pointer-ref-c-int64) (bm50c7 core-prim . pointer-ref-c-int32) (bm50c6 core-prim . pointer-ref-c-int16) (bm50c5 core-prim . pointer-ref-c-int8) (bm50c4 core-prim . pointer-ref-c-uint64) (bm50c3 core-prim . pointer-ref-c-uint32) (bm50c2 core-prim . pointer-ref-c-uint16) (bm50c1 core-prim . pointer-ref-c-uint8) (bm50c0 core-prim . pointer-set-c-uint64!) (bm50bf core-prim . pointer-set-c-uint32!) (bm50be core-prim . pointer-set-c-uint16!) (bm50bd core-prim . pointer-set-c-uint8!) (bm50bc core-prim . pointer-set-c-int64!) (bm50bb core-prim . pointer-set-c-int32!) (bm50ba core-prim . pointer-set-c-int16!) (bm50b9 core-prim . pointer-set-c-int8!) (bm50b8 core-prim . pointer-set-c-pointer!) (bm50b7 core-prim . pointer-set-c-double!) (bm50b6 core-prim . pointer-set-c-float!) (bm50b5 core-prim . pointer-set-c-long-long!) (bm50b4 core-prim . pointer-set-c-long!) (bm50b3 core-prim . pointer-set-c-int!) (bm50b2 core-prim . pointer-set-c-short!) (bm50b1 core-prim . pointer-set-c-char!) (bm50b0 core-prim . pointer-ref-c-pointer) (bm50af core-prim . pointer-ref-c-double) (bm50ae core-prim . pointer-ref-c-float) (bm50ad core-prim . pointer-ref-c-unsigned-long-long) (bm50ac core-prim . pointer-ref-c-signed-long-long) (bm50ab core-prim . pointer-ref-c-unsigned-long) (bm50aa core-prim . pointer-ref-c-signed-long) (bm50a9 core-prim . pointer-ref-c-unsigned-int) (bm50a8 core-prim . pointer-ref-c-signed-int) (bm50a7 core-prim . pointer-ref-c-unsigned-short) (bm50a6 core-prim . pointer-ref-c-signed-short) (bm50a5 core-prim . pointer-ref-c-unsigned-char) (bm50a4 core-prim . pointer-ref-c-signed-char) (bm50a3 core-prim . pointer->integer) (bm50a2 core-prim . integer->pointer) (bm50a1 core-prim . pointer?) (bm50a0 core-prim . shared-errno) (bm509f core-prim . %ffi-free-c-callback-trampoline) (bm509e core-prim . %ffi-make-c-callback-trampoline) (bm509d core-prim . %ffi-free) (bm509c core-prim . %ffi-malloc) (bm509b core-prim . %ffi-supported?) (bm509a core-prim . %ffi-pointer->string) (bm5099 core-prim . %ffi-call) (bm5098 core-prim . %ffi-lookup) (bm5097 core-prim . %ffi-open) (bm5096 core-prim . null-terminated-utf8->string) (bm5095 core-prim . null-terminated-bytevector->string) (bm5094 core-prim . %exec) (bm5093 core-prim . %fork) (bm5092 core-prim . %pipe) (bm5091 core-prim . p) (bm5090 core-prim . open-output-string) (bm508f core-prim . get-output-string) (bm508e core-prim . file-stat-ctime) (bm508d core-prim . file-stat-atime) (bm508c core-prim . file-stat-mtime) (bm508b core-prim . file-size-in-bytes) (bm508a core-prim . file-writable?) (bm5089 core-prim . file-executable?) (bm5088 core-prim . file-readable?) (bm5087 core-prim . file-regular?) (bm5086 core-prim . file-symbolic-link?) (bm5085 core-prim . file-directory?) (bm5084 core-prim . create-symbolic-link) (bm5083 core-prim . rename-file) (bm5082 core-prim . delete-directory) (bm5081 core-prim . create-directory) (bm5080 core-prim . create-mosh-cache-dir) (bm507f core-prim . get-environment-variables) (bm507e core-prim . current-exception-handler) (bm507d core-prim . get-environment-variable) (bm507c core-prim . join-wraps) (bm507b core-prim . id->real-label) (bm507a core-prim . same-marks?) (bm5079 core-prim . same-marks*?) (bm5078 core-prim . get-timeofday) (bm5077 core-prim . get-command-line) (bm5076 core-prim . sys-display) (bm5075 core-prim . whereis) (bm5074 core-prim . register) (bm5073 core-prim . vm-join!) (bm5072 core-prim . vm-set-value!) (bm5071 core-prim . vm?) (bm5070 core-prim . main-vm?) (bm506f core-prim . vm-eval) (bm506e core-prim . vm-self) (bm506d core-prim . vm-start!) (bm506c core-prim . make-vm) (bm506b core-prim . mutex-try-lock!) (bm506a core-prim . mutex-unlock!) (bm5069 core-prim . mutex-lock!) (bm5068 core-prim . mutex?) (bm5067 core-prim . make-mutex) (bm5066 core-prim . condition-variable-notify-all!) (bm5065 core-prim . condition-variable-notify!) (bm5064 core-prim . condition-variable-wait!) (bm5063 core-prim . make-condition-variable) (bm5062 core-prim . write/ss) (bm5061 core-prim . mosh-executable-path) (bm5060 core-prim . make-file-options) (bm505f core-prim . source-info) (bm505e core-prim . make-compiler-instruction) (bm505d core-prim . make-instruction) (bm505c core-prim . set-source-info!) (bm505b core-prim . bignum?) (bm505a core-prim . fast-equal?) (bm5059 core-prim . fasl-read) (bm5058 core-prim . fasl-write) (bm5057 core-prim . time-usage) (bm5056 core-prim . os-constant) (bm5055 core-prim . disasm) (bm28e6 core-prim . make-parameter) (bm5054 core-prim . socket-port) (bm5053 core-prim . socket-shutdown) (bm5052 core-prim . socket-close) (bm5051 core-prim . socket-send) (bm5050 core-prim . socket-recv!) (bm504f core-prim . socket-recv) (bm504e core-prim . make-server-socket) (bm504d core-prim . make-client-socket) (bm504c core-prim . socket-accept) (bm504b core-prim . socket?) (bm504a core-prim . string-upcase) (bm5049 core-prim . string-titlecase) (bm5048 core-prim . string-normalize-nfkd) (bm5047 core-prim . string-normalize-nfkc) (bm5046 core-prim . string-normalize-nfd) (bm5045 core-prim . string-normalize-nfc) (bm5044 core-prim . string-foldcase) (bm5043 core-prim . string-downcase) (bm5042 core-prim . string-ci>?) (bm5041 core-prim . string-ci>=?) (bm5040 core-prim . string-ci=?) (bm503f core-prim . string-ci<?) (bm503e core-prim . string-ci<=?) (bm503d core-prim . char-whitespace?) (bm503c core-prim . char-upper-case?) (bm503b core-prim . char-title-case?) (bm503a core-prim . char-numeric?) (bm5039 core-prim . char-lower-case?) (bm5038 core-prim . char-general-category) (bm5037 core-prim . char-upcase) (bm5036 core-prim . char-titlecase) (bm5035 core-prim . char-foldcase) (bm5034 core-prim . char-downcase) (bm5033 core-prim . char-ci>?) (bm5032 core-prim . char-ci>=?) (bm5031 core-prim . char-ci=?) (bm5030 core-prim . char-ci<?) (bm502f core-prim . char-ci<=?) (bm502e core-prim . char-alphabetic?) (bm2eea core-prim . make-variable-transformer) (bm31a1 core-prim . identifier?) (bm318d core-prim . generate-temporaries) (bm318f core-prim . free-identifier=?) (bm31a5 core-prim . syntax->datum) (bm31a3 core-prim . datum->syntax) (bm3191 core-prim . bound-identifier=?) (bm502d core-prim . record-type-descriptor?) (bm502c core-prim . record-predicate) (bm502b core-prim . record-mutator) (bm502a core-prim . record-constructor) (bm5029 core-prim . record-accessor) (bm5028 core-prim . make-record-type-descriptor) (bm5027 core-prim . make-record-constructor-descriptor) (bm5026 core-prim . record?) (bm5025 core-prim . record-type-uid) (bm5024 core-prim . record-type-sealed?) (bm5023 core-prim . record-type-parent) (bm5022 core-prim . record-type-opaque?) (bm5021 core-prim . record-type-name) (bm5020 core-prim . record-type-generative?) (bm501f core-prim . record-type-field-names) (bm501e core-prim . record-rtd) (bm501d core-prim . record-field-mutable?) (bm501c core-prim . delete-file) (bm501b core-prim . file-exists?) (bm501a core-prim . vector-sort!) (bm5019 core-prim . vector-sort) (bm5018 core-prim . list-sort) (bm5017 core-prim . symbol-hash) (bm5016 core-prim . string-ci-hash) (bm5015 core-prim . string-hash) (bm5014 core-prim . equal-hash) (bm5013 core-prim . hashtable-equivalence-function) (bm5012 core-prim . make-hashtable) (bm5011 core-prim . hashtable-hash-function) (bm5010 core-prim . make-eqv-hashtable) (bm500f core-prim . make-eq-hashtable) (bm500e core-prim . hashtable?) (bm500d core-prim . hashtable-update!) (bm500c core-prim . hashtable-size) (bm500b core-prim . hashtable-set!) (bm500a core-prim . hashtable-ref) (bm5009 core-prim . hashtable-mutable?) (bm5008 core-prim . hashtable-keys) (bm5007 core-prim . hashtable-entries) (bm5006 core-prim . hashtable-delete!) (bm5005 core-prim . hashtable-copy) (bm5004 core-prim . hashtable-contains?) (bm5003 core-prim . hashtable-clear!) (bm5002 core-prim . call-with-output-file) (bm5001 core-prim . call-with-input-file) (bm5000 core-prim . write-char) (bm4fff core-prim . write) (bm4ffe core-prim . with-output-to-file) (bm4ffd core-prim . with-input-from-file) (bm4ffc core-prim . read-char) (bm4ffb core-prim . read) (bm4ffa core-prim . peek-char) (bm4ff9 core-prim . open-output-file) (bm4ff8 core-prim . open-input-file) (bm4ff7 core-prim . newline) (bm4ff6 core-prim . display) (bm4ff5 core-prim . close-output-port) (bm4ff4 core-prim . close-input-port) (bm4ff3 core-prim . eof-object?) (bm4ff2 core-prim . eof-object) (bm4ff1 core-prim . current-error-port) (bm4ff0 core-prim . current-output-port) (bm4fef core-prim . current-input-port) (bm4fee core-prim . output-port?) (bm4fed core-prim . input-port?) (bm4fec core-prim . utf-8-codec) (bm4feb core-prim . utf-16-codec) (bm4fea core-prim . transcoder-error-handling-mode) (bm4fe9 core-prim . transcoder-eol-style) (bm4fe8 core-prim . transcoder-codec) (bm4fe7 core-prim . transcoded-port) (bm4fe6 core-prim . textual-port?) (bm4fe5 core-prim . string->bytevector) (bm4fe4 core-prim . standard-output-port) (bm4fe3 core-prim . standard-input-port) (bm4fe2 core-prim . standard-error-port) (bm4fe1 core-prim . set-port-position!) (bm4fe0 core-prim . put-u8) (bm4fdf core-prim . put-string) (bm4fde core-prim . put-datum) (bm4fdd core-prim . put-char) (bm4fdc core-prim . put-bytevector) (bm4fdb core-prim . port?) (bm4fda core-prim . port-transcoder) (bm4fd9 core-prim . port-position) (bm4fd8 core-prim . port-has-set-port-position!?) (bm4fd7 core-prim . port-has-port-position?) (bm4fd6 core-prim . port-eof?) (bm4fd5 core-prim . output-port-buffer-mode) (bm4fd4 core-prim . open-string-output-port) (bm4fd3 core-prim . open-string-input-port) (bm4fd2 core-prim . open-file-output-port) (bm4fd1 core-prim . open-file-input/output-port) (bm4fd0 core-prim . open-file-input-port) (bm4fcf core-prim . open-bytevector-output-port) (bm4fce core-prim . open-bytevector-input-port) (bm4fcd core-prim . native-transcoder) (bm4fcc core-prim . native-eol-style) (bm4fcb core-prim . make-transcoder) (bm4fca core-prim . latin-1-codec) (bm4fc9 core-prim . make-i/o-write-error) (bm4fc8 core-prim . make-i/o-read-error) (bm4fc7 core-prim . make-i/o-port-error) (bm4fc6 core-prim . make-i/o-invalid-position-error) (bm4fc5 core-prim . make-i/o-filename-error) (bm4fc4 core-prim . make-i/o-file-protection-error) (bm4fc3 core-prim . make-i/o-file-is-read-only-error) (bm4fc2 core-prim . make-i/o-file-does-not-exist-error) (bm4fc1 core-prim . make-i/o-file-already-exists-error) (bm4fc0 core-prim . make-i/o-error) (bm4fbf core-prim . make-i/o-encoding-error) (bm4fbe core-prim . make-i/o-decoding-error) (bm4fbd core-prim . make-custom-textual-output-port) (bm4fbc core-prim . make-custom-textual-input/output-port) (bm4fbb core-prim . make-custom-textual-input-port) (bm4fba core-prim . make-custom-binary-output-port) (bm4fb9 core-prim . make-custom-binary-input/output-port) (bm4fb8 core-prim . make-custom-binary-input-port) (bm4fb7 core-prim . make-bytevector) (bm4fb6 core-prim . lookahead-u8) (bm4fb5 core-prim . lookahead-char) (bm4fb4 core-prim . i/o-write-error?) (bm4fb3 core-prim . i/o-read-error?) (bm4fb2 core-prim . i/o-port-error?) (bm4fb1 core-prim . i/o-invalid-position-error?) (bm4fb0 core-prim . i/o-filename-error?) (bm4faf core-prim . i/o-file-protection-error?) (bm4fae core-prim . i/o-file-is-read-only-error?) (bm4fad core-prim . i/o-file-does-not-exist-error?) (bm4fac core-prim . i/o-file-already-exists-error?) (bm4fab core-prim . i/o-error?) (bm4faa core-prim . i/o-error-position) (bm4fa9 core-prim . i/o-error-port) (bm4fa8 core-prim . i/o-error-filename) (bm4fa7 core-prim . i/o-encoding-error?) (bm4fa6 core-prim . i/o-encoding-error-char) (bm4fa5 core-prim . i/o-decoding-error?) (bm4fa4 core-prim . get-u8) (bm4fa3 core-prim . get-string-n!) (bm4fa2 core-prim . get-string-n) (bm4fa1 core-prim . get-string-all) (bm4fa0 core-prim . get-line) (bm4f9f core-prim . get-datum) (bm4f9e core-prim . get-char) (bm4f9d core-prim . get-bytevector-some) (bm4f9c core-prim . get-bytevector-n!) (bm4f9b core-prim . get-bytevector-n) (bm4f9a core-prim . get-bytevector-all) (bm4f99 core-prim . flush-output-port) (bm4f98 core-prim . close-port) (bm317b core-prim . scheme-report-environment) (bm4f97 core-prim . quotient) (bm3179 core-prim . null-environment) (bm4f96 core-prim . remainder) (bm4f95 core-prim . modulo) (bm4f94 core-prim . inexact->exact) (bm4f93 core-prim . force) (bm4f92 core-prim . exact->inexact) (bm4f91 core-prim . make-promise) (bm4f90 core-prim . exit) (bm4c22 core-prim . command-line) (bm4f8f core-prim . string-fill!) (bm4f8e core-prim . string-set!) (bm4f8d core-prim . set-cdr!) (bm4f8c core-prim . set-car!) (bm4f8b core-prim . remove) (bm4f8a core-prim . remv) (bm4f89 core-prim . remp) (bm4f88 core-prim . remq) (bm4f87 core-prim . partition) (bm4f86 core-prim . memv) (bm4f85 core-prim . memq) (bm4f84 core-prim . memp) (bm4f83 core-prim . member) (bm4f82 core-prim . exists) (bm4f81 core-prim . for-all) (bm4f80 core-prim . fold-right) (bm4f7f core-prim . fold-left) (bm4f7e core-prim . find) (bm4f7d core-prim . filter) (bm4f7c core-prim . cons*) (bm4f7b core-prim . assv) (bm4f7a core-prim . assq) (bm4f79 core-prim . assp) (bm4f78 core-prim . assoc) (bm4f77 core-prim . call-with-string-output-port) (bm4f76 core-prim . call-with-port) (bm4f75 core-prim . call-with-bytevector-output-port) (bm4f74 core-prim . bytevector->string) (bm4f73 core-prim . buffer-mode?) (bm4f72 core-prim . binary-port?) (bm4f71 core-prim . with-exception-handler) (bm4f70 core-prim . raise-continuable) (bm4f6f core-prim . raise) (bm317f core-prim . eval) (bm3177 core-prim . environment) (bm4f6e core-prim . make-enumeration) (bm4f6d core-prim . enum-set=?) (bm4f6c core-prim . enum-set-universe) (bm4f6b core-prim . enum-set-union) (bm4f6a core-prim . enum-set-subset?) (bm4f69 core-prim . enum-set-projection) (bm4f68 core-prim . enum-set-member?) (bm4f67 core-prim . enum-set-intersection) (bm4f66 core-prim . enum-set-indexer) (bm4f65 core-prim . enum-set-difference) (bm4f64 core-prim . enum-set-constructor) (bm4f63 core-prim . enum-set-complement) (bm4f62 core-prim . enum-set->list) (bm4f61 core-prim . who-condition?) (bm4f60 core-prim . warning?) (bm4f5f core-prim . violation?) (bm4f5e core-prim . undefined-violation?) (bm4f5d core-prim . syntax-violation?) (bm4f5c core-prim . syntax-violation-subform) (bm4f5b core-prim . syntax-violation-form) (bm319f core-prim . syntax-violation) (bm4f5a core-prim . simple-conditions) (bm4f59 core-prim . serious-condition?) (bm4f58 core-prim . non-continuable-violation?) (bm4f57 core-prim . message-condition?) (bm4f56 core-prim . make-who-condition) (bm4f55 core-prim . make-warning) (bm4f54 core-prim . make-violation) (bm4f53 core-prim . make-undefined-violation) (bm4f52 core-prim . make-syntax-violation) (bm4f51 core-prim . make-serious-condition) (bm4f50 core-prim . make-non-continuable-violation) (bm4f4f core-prim . make-message-condition) (bm4f4e core-prim . make-lexical-violation) (bm4f4d core-prim . make-irritants-condition) (bm4f4c core-prim . make-implementation-restriction-violation) (bm4f4b core-prim . make-error) (bm4f4a core-prim . make-assertion-violation) (bm4f49 core-prim . lexical-violation?) (bm4f48 core-prim . irritants-condition?) (bm4f47 core-prim . implementation-restriction-violation?) (bm4f46 core-prim . error?) (bm4f45 core-prim . condition-who) (bm4f44 core-prim . condition-predicate) (bm4f43 core-prim . condition-message) (bm4f42 core-prim . condition-irritants) (bm4f41 core-prim . condition-accessor) (bm4f40 core-prim . condition) (bm4f3f core-prim . assertion-violation?) (bm4f3e core-prim . condition?) (bm4f3d core-prim . utf32->string) (bm4f3c core-prim . utf16->string) (bm4f3b core-prim . utf8->string) (bm4f3a core-prim . uint-list->bytevector) (bm4f39 core-prim . u8-list->bytevector) (bm4f38 core-prim . string->utf8) (bm4f37 core-prim . string->utf32) (bm4f36 core-prim . string->utf16) (bm4f35 core-prim . sint-list->bytevector) (bm4f34 core-prim . native-endianness) (bm4f33 core-prim . bytevector?) (bm4f32 core-prim . bytevector=?) (bm4f31 core-prim . bytevector-uint-set!) (bm4f30 core-prim . bytevector-uint-ref) (bm4f2f core-prim . bytevector-u8-set!) (bm4f2e core-prim . bytevector-u8-ref) (bm4f2d core-prim . bytevector-u64-set!) (bm4f2c core-prim . bytevector-u64-ref) (bm4f2b core-prim . bytevector-u64-native-set!) (bm4f2a core-prim . bytevector-u64-native-ref) (bm4f29 core-prim . bytevector-u32-set!) (bm4f28 core-prim . bytevector-u32-ref) (bm4f27 core-prim . bytevector-u32-native-set!) (bm4f26 core-prim . bytevector-u32-native-ref) (bm4f25 core-prim . bytevector-u16-set!) (bm4f24 core-prim . bytevector-u16-ref) (bm4f23 core-prim . bytevector-u16-native-set!) (bm4f22 core-prim . bytevector-u16-native-ref) (bm4f21 core-prim . bytevector-sint-set!) (bm4f20 core-prim . bytevector-sint-ref) (bm4f1f core-prim . bytevector-s8-set!) (bm4f1e core-prim . bytevector-s8-ref) (bm4f1d core-prim . bytevector-s64-set!) (bm4f1c core-prim . bytevector-s64-ref) (bm4f1b core-prim . bytevector-s64-native-set!) (bm4f1a core-prim . bytevector-s64-native-ref) (bm4f19 core-prim . bytevector-s32-set!) (bm4f18 core-prim . bytevector-s32-ref) (bm4f17 core-prim . bytevector-s32-native-set!) (bm4f16 core-prim . bytevector-s32-native-ref) (bm4f15 core-prim . bytevector-s16-set!) (bm4f14 core-prim . bytevector-s16-ref) (bm4f13 core-prim . bytevector-s16-native-set!) (bm4f12 core-prim . bytevector-s16-native-ref) (bm4f11 core-prim . bytevector-length) (bm4f10 core-prim . bytevector-ieee-single-ref) (bm4f0f core-prim . bytevector-ieee-single-set!) (bm4f0e core-prim . bytevector-ieee-single-native-set!) (bm4f0d core-prim . bytevector-ieee-single-native-ref) (bm4f0c core-prim . bytevector-ieee-double-set!) (bm4f0b core-prim . bytevector-ieee-double-ref) (bm4f0a core-prim . bytevector-ieee-double-native-set!) (bm4f09 core-prim . bytevector-ieee-double-native-ref) (bm4f08 core-prim . bytevector-fill!) (bm4f07 core-prim . bytevector-copy!) (bm4f06 core-prim . bytevector-copy) (bm4f05 core-prim . bytevector->uint-list) (bm4f04 core-prim . bytevector->u8-list) (bm4f03 core-prim . bytevector->sint-list) (bm4f02 core-prim . no-nans-violation?) (bm4f01 core-prim . no-infinities-violation?) (bm4f00 core-prim . make-no-nans-violation) (bm4eff core-prim . make-no-infinities-violation) (bm4efe core-prim . real->flonum) (bm4efd core-prim . flzero?) (bm4efc core-prim . fltruncate) (bm4efb core-prim . fltan) (bm4efa core-prim . flsqrt) (bm4ef9 core-prim . flsin) (bm4ef8 core-prim . flround) (bm4ef7 core-prim . flpositive?) (bm4ef6 core-prim . flonum?) (bm4ef5 core-prim . flodd?) (bm4ef4 core-prim . flnumerator) (bm4ef3 core-prim . flnegative?) (bm4ef2 core-prim . flnan?) (bm4ef1 core-prim . flmod0) (bm4ef0 core-prim . flmod) (bm4eef core-prim . flmin) (bm4eee core-prim . flmax) (bm4eed core-prim . fllog) (bm4eec core-prim . flinteger?) (bm4eeb core-prim . flinfinite?) (bm4eea core-prim . flfloor) (bm4ee9 core-prim . flfinite?) (bm4ee8 core-prim . flexpt) (bm4ee7 core-prim . flexp) (bm4ee6 core-prim . fleven?) (bm4ee5 core-prim . fldiv0-and-mod0) (bm4ee4 core-prim . fldiv0) (bm4ee3 core-prim . fldiv-and-mod) (bm4ee2 core-prim . fldiv) (bm4ee1 core-prim . fldenominator) (bm4ee0 core-prim . flcos) (bm4edf core-prim . flceiling) (bm4ede core-prim . flatan) (bm4edd core-prim . flasin) (bm4edc core-prim . flacos) (bm4edb core-prim . flabs) (bm4eda core-prim . fl>?) (bm4ed9 core-prim . fl>=?) (bm4ed8 core-prim . fl=?) (bm4ed7 core-prim . fl<?) (bm4ed6 core-prim . fl<=?) (bm4ed5 core-prim . fl/) (bm4ed4 core-prim . fl-) (bm4ed3 core-prim . fl+) (bm4ed2 core-prim . fl*) (bm4ed1 core-prim . fixnum->flonum) (bm4ed0 core-prim . fxzero?) (bm4ecf core-prim . fxxor) (bm4ece core-prim . fxrotate-bit-field) (bm4ecd core-prim . fxreverse-bit-field) (bm4ecc core-prim . fxpositive?) (bm4ecb core-prim . fxodd?) (bm4eca core-prim . fxnot) (bm4ec9 core-prim . fxnegative?) (bm4ec8 core-prim . fxmod0) (bm4ec7 core-prim . fxmod) (bm4ec6 core-prim . fxmin) (bm4ec5 core-prim . fxmax) (bm4ec4 core-prim . fxlength) (bm4ec3 core-prim . fxior) (bm4ec2 core-prim . fxif) (bm4ec1 core-prim . fxfirst-bit-set) (bm4ec0 core-prim . fxeven?) (bm4ebf core-prim . fxdiv0-and-mod0) (bm4ebe core-prim . fxdiv0) (bm4ebd core-prim . fxdiv-and-mod) (bm4ebc core-prim . fxdiv) (bm4ebb core-prim . fxcopy-bit-field) (bm4eba core-prim . fxcopy-bit) (bm4eb9 core-prim . fxbit-set?) (bm4eb8 core-prim . fxbit-field) (bm4eb7 core-prim . fxbit-count) (bm4eb6 core-prim . fxarithmetic-shift-right) (bm4eb5 core-prim . fxarithmetic-shift-left) (bm4eb4 core-prim . fxarithmetic-shift) (bm4eb3 core-prim . fxand) (bm4eb2 core-prim . fx>?) (bm4eb1 core-prim . fx>=?) (bm4eb0 core-prim . fx=?) (bm4eaf core-prim . fx<?) (bm4eae core-prim . fx<=?) (bm4ead core-prim . fx-/carry) (bm4eac core-prim . fx-) (bm4eab core-prim . fx+/carry) (bm4eaa core-prim . fx+) (bm4ea9 core-prim . fx*/carry) (bm4ea8 core-prim . fx*) (bm4ea7 core-prim . greatest-fixnum) (bm4ea6 core-prim . least-fixnum) (bm4ea5 core-prim . fixnum-width) (bm4ea4 core-prim . fixnum?) (bm4ea3 core-prim . bitwise-rotate-bit-field) (bm4ea2 core-prim . bitwise-reverse-bit-field) (bm4ea1 core-prim . bitwise-length) (bm4ea0 core-prim . bitwise-if) (bm4e9f core-prim . bitwise-first-bit-set) (bm4e9e core-prim . bitwise-copy-bit-field) (bm4e9d core-prim . bitwise-copy-bit) (bm4e9c core-prim . bitwise-bit-set?) (bm4e9b core-prim . bitwise-bit-field) (bm4e9a core-prim . bitwise-bit-count) (bm4e99 core-prim . bitwise-xor) (bm4e98 core-prim . bitwise-ior) (bm4e97 core-prim . bitwise-and) (bm4e96 core-prim . bitwise-not) (bm4e95 core-prim . bitwise-arithmetic-shift-right) (bm4e94 core-prim . bitwise-arithmetic-shift-left) (bm4e93 core-prim . bitwise-arithmetic-shift) (bm4e92 core-prim . zero?) (bm4e91 core-prim . vector?) (bm4e90 core-prim . vector-set!) (bm4e8f core-prim . vector-ref) (bm4e8e core-prim . vector-map) (bm4e8d core-prim . vector-length) (bm4e8c core-prim . vector-for-each) (bm4e8b core-prim . vector-fill!) (bm4e8a core-prim . vector->list) (bm4e89 core-prim . vector) (bm4e88 core-prim . values) (bm4e87 core-prim . truncate) (bm4e86 core-prim . tan) (bm4e85 core-prim . symbol?) (bm4e84 core-prim . symbol=?) (bm4e83 core-prim . symbol->string) (bm4e82 core-prim . substring) (bm4e81 core-prim . string?) (bm4e80 core-prim . string>?) (bm4e7f core-prim . string>=?) (bm4e7e core-prim . string=?) (bm4e7d core-prim . string<?) (bm4e7c core-prim . string<=?) (bm4e7b core-prim . string-ref) (bm4e7a core-prim . string-length) (bm4e79 core-prim . string-for-each) (bm4e78 core-prim . string-copy) (bm4e77 core-prim . string-append) (bm4e76 core-prim . string->symbol) (bm4e75 core-prim . string->number) (bm4e74 core-prim . string->list) (bm4e73 core-prim . string) (bm4e72 core-prim . sqrt) (bm4e71 core-prim . sin) (bm4e70 core-prim . round) (bm4e6f core-prim . reverse) (bm4e6e core-prim . real?) (bm4e6d core-prim . real-valued?) (bm4e6c core-prim . real-part) (bm4e6b core-prim . rationalize) (bm4e6a core-prim . rational?) (bm4e69 core-prim . rational-valued?) (bm4e68 core-prim . procedure?) (bm4e67 core-prim . positive?) (bm4e66 core-prim . pair?) (bm4e65 core-prim . odd?) (bm4e64 core-prim . numerator) (bm4e63 core-prim . number?) (bm4e62 core-prim . number->string) (bm4e61 core-prim . null?) (bm4e60 core-prim . not) (bm4e5f core-prim . negative?) (bm4e5e core-prim . nan?) (bm4e5d core-prim . min) (bm4e5c core-prim . max) (bm4e5b core-prim . map) (bm4e5a core-prim . make-vector) (bm4e59 core-prim . make-string) (bm4e58 core-prim . make-rectangular) (bm4e57 core-prim . make-polar) (bm4e56 core-prim . magnitude) (bm4e55 core-prim . log) (bm4e54 core-prim . list?) (bm4e53 core-prim . list-tail) (bm4e52 core-prim . list-ref) (bm4e51 core-prim . list->vector) (bm4e50 core-prim . list->string) (bm4e4f core-prim . list) (bm4e4e core-prim . length) (bm4e4d core-prim . lcm) (bm4e4c core-prim . integer?) (bm4e4b core-prim . integer-valued?) (bm4e4a core-prim . integer->char) (bm4e49 core-prim . infinite?) (bm4e48 core-prim . inexact?) (bm4e47 core-prim . inexact) (bm4e46 core-prim . imag-part) (bm4e45 core-prim . gcd) (bm4e44 core-prim . for-each) (bm4e43 core-prim . floor) (bm4e42 core-prim . finite?) (bm4e41 core-prim . expt) (bm4e40 core-prim . exp) (bm4e3f core-prim . exact?) (bm4e3e core-prim . exact-integer-sqrt) (bm4e3d core-prim . exact) (bm4e3c core-prim . even?) (bm4e3b core-prim . error) (bm4e3a core-prim . eqv?) (bm4e39 core-prim . equal?) (bm4e38 core-prim . eq?) (bm4e37 core-prim . dynamic-wind) (bm4e36 core-prim . div0-and-mod0) (bm4e35 core-prim . mod0) (bm4e34 core-prim . div0) (bm4e33 core-prim . div-and-mod) (bm4e32 core-prim . mod) (bm4e31 core-prim . div) (bm4e30 core-prim . denominator) (bm4e2f core-prim . cos) (bm4e2e core-prim . cons) (bm4e2d core-prim . complex?) (bm4e2c core-prim . char?) (bm4e2b core-prim . char>?) (bm4e2a core-prim . char>=?) (bm4e29 core-prim . char=?) (bm4e28 core-prim . char<?) (bm4e27 core-prim . char<=?) (bm4e26 core-prim . char->integer) (bm4e25 core-prim . ceiling) (bm4e24 core-prim . call-with-values) (bm4e23 core-prim . call/cc) (bm4e22 core-prim . call-with-current-continuation) (bm4e21 core-prim . cddddr) (bm4e20 core-prim . cdddar) (bm4e1f core-prim . cddadr) (bm4e1e core-prim . cddaar) (bm4e1d core-prim . cdaddr) (bm4e1c core-prim . cdadar) (bm4e1b core-prim . cdaadr) (bm4e1a core-prim . cdaaar) (bm4e19 core-prim . cadddr) (bm4e18 core-prim . caddar) (bm4e17 core-prim . cadadr) (bm4e16 core-prim . cadaar) (bm4e15 core-prim . caaddr) (bm4e14 core-prim . caadar) (bm4e13 core-prim . caaadr) (bm4e12 core-prim . caaaar) (bm4e11 core-prim . cdddr) (bm4e10 core-prim . cddar) (bm4e0f core-prim . cdadr) (bm4e0e core-prim . cdaar) (bm4e0d core-prim . caddr) (bm4e0c core-prim . cadar) (bm4e0b core-prim . caadr) (bm4e0a core-prim . caaar) (bm4e09 core-prim . cddr) (bm4e08 core-prim . cdar) (bm4e07 core-prim . cadr) (bm4e06 core-prim . caar) (bm4e05 core-prim . cdr) (bm4e04 core-prim . car) (bm4e03 core-prim . boolean?) (bm4e02 core-prim . boolean=?) (bm4e01 core-prim . atan) (bm4e00 core-prim . assertion-violation) (bm3199 core-prim . assertion-error) (bm4dff core-prim . asin) (bm4dfe core-prim . apply) (bm4dfd core-prim . append) (bm4dfc core-prim . angle) (bm4dfb core-prim . acos) (bm4dfa core-prim . abs) (bm4df9 core-prim . /) (bm4df8 core-prim . *) (bm4df7 core-prim . -) (bm4df6 core-prim . +) (bm4df5 core-prim . >=) (bm4df4 core-prim . >) (bm4df3 core-prim . =) (bm4df2 core-prim . <=) (bm4df1 core-prim . <) (bm4df0 core-prim . library) (bm4def $core-rtd &no-nans-rtd &no-nans-rcd) (bm4dee $core-rtd &no-infinities-rtd &no-infinities-rcd) (bm4ded $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bm4dec $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bm4deb $core-rtd &i/o-port-rtd &i/o-port-rcd) (bm4dea $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bm4de9 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bm4de8 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bm4de7 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bm4de6 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bm4de5 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bm4de4 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bm4de3 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bm4de2 $core-rtd &i/o-rtd &i/o-rcd) (bm4de1 $core-rtd &undefined-rtd &undefined-rcd) (bm4de0 $core-rtd &syntax-rtd &syntax-rcd) (bm4ddf $core-rtd &lexical-rtd &lexical-rcd) (bm4dde $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bm4ddd $core-rtd &non-continuable-rtd &non-continuable-rcd) (bm4ddc $core-rtd &who-rtd &who-rcd) (bm4ddb $core-rtd &irritants-rtd &irritants-rcd) (bm4dda $core-rtd &assertion-rtd &assertion-rcd) (bm4dd9 $core-rtd &violation-rtd &violation-rcd) (bm4dd8 $core-rtd &error-rtd &error-rcd) (bm4dd7 $core-rtd &serious-rtd &serious-rcd) (bm4dd6 $core-rtd &warning-rtd &warning-rcd) (bm4dd5 $core-rtd &message-rtd &message-rcd) (bm4dd4 $core-rtd &condition-rtd &condition-rcd) (bm4dd3 macro . define-condition-type) (bm4dd2 macro . define-enumeration) (bm4dd1 macro . define-record-type) (bm4dd0 macro . parent-rtd) (bm4dcf macro . nongenerative) (bm4dce macro . opaque) (bm4dcd macro . sealed) (bm4dcc macro . protocol) (bm4dcb macro . parent) (bm4dca macro . immutable) (bm4dc9 macro . mutable) (bm4dc8 macro . fields) (bm4dc7 macro . error-handling-mode) (bm4dc6 macro . file-options) (bm4dc5 macro . buffer-mode) (bm4dc4 macro . eol-style) (bm4dc3 macro . guard) (bm4dc2 macro . trace-define) (bm4dc1 macro . trace-lambda) (bm4dc0 macro . unsyntax-splicing) (bm4dbf macro . unsyntax) (bm4dbe macro . unquote-splicing) (bm4dbd macro . unquote) (bm4dbc macro . _) (bm4dbb macro . else) (bm4dba macro . =>) (bm4db9 macro . ...) (bm4db8 macro . assert) (bm4db7 macro . endianness) (bm4db6 macro . delay) (bm4db5 macro . time) (bm4db4 macro . do) (bm4db3 macro . cond) (bm4db2 macro . let*) (bm4db1 macro . let*-values) (bm4db0 macro . let-values) (bm4daf macro . identifier-syntax) (bm4dae macro . with-syntax) (bm4dad macro . quasisyntax) (bm4dac macro . quasiquote) (bm4dab macro . syntax-rules) (bm4daa macro . include) (bm4da9 macro . define-struct) (bm4da8 core-macro . record-constructor-descriptor) (bm4da7 core-macro . record-type-descriptor) (bm4da6 macro . case) (bm4da5 macro . parameterize) (bm4da4 macro . unless) (bm4da3 macro . when) (bm4da2 core-macro . or) (bm4da1 core-macro . and) (bm4da0 core-macro . if) (bm4d9f core-macro . let) (bm4d9e core-macro . letrec*) (bm4d9d core-macro . letrec) (bm4d9c core-macro . type-descriptor) (bm4d9b core-macro . case-lambda) (bm4d9a core-macro . lambda) (bm4d99 core-macro . syntax) (bm4d98 core-macro . syntax-case) (bm4d97 core-macro . quote) (bm4d96 core-macro . foreign-call) (bm4d95 letrec-syntax) (bm4d94 let-syntax) (bm4d93 set!) (bm4d92 import) (bm4d91 begin) (bm4d90 module) (bm4d8f define-syntax) (bm4d8e define)) values values '#f '#f '#f '#f) (bm2cd3@bm2b1f@install-library 'bm5152 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bm50f9) (eval-core . bm50f8) (set-symbol-value! . bm50f7) (symbol-value . bm50f6) (gensym . bm50f5) (void . bm50f4)) '() values values '#f '#f '#f '#f) (bm2cd3@bm2b1f@install-library 'bm5153 '(mosh) '() '() '() '() '((set-symbol-value! . bm50f7) (symbol-value . bm50f6) (regexp? . bm50f2) (read-line . bm50f1) (ungensym . bm50ef) (alist->eq-hash-table . bm50ee) (assoc-ref . bm50ed) (print . bm50ec) (format . bm50eb) (host-os . bm50ea) (library-path . bm2afe) (standard-library-path . bm50e9) (file-newer? . bm50e4) (stat-mtime . bm50e3) (digit->integer . bm50df) (call-with-string-input-port . bm50de) (call-with-string-io . bm50dd) (string-split . bm50dc) (bytevector-for-each . bm50db) (string->regexp . bm50da) (rxmatch . bm50d9) (regexp-replace-all . bm50d8) (hashtable-for-each . bm50d7) (set-current-directory! . bm50d2) (expand-path . bm50d1) (current-directory . bm50d0) (p . bm5091) (get-timeofday . bm5078) (get-command-line . bm5077) (sys-display . bm5076) (whereis . bm5075) (register . bm5074) (vm-join! . bm5073) (vm-set-value! . bm5072) (vm? . bm5071) (main-vm? . bm5070) (vm-eval . bm506f) (vm-self . bm506e) (vm-start! . bm506d) (make-vm . bm506c) (mutex-try-lock! . bm506b) (mutex-unlock! . bm506a) (mutex-lock! . bm5069) (mutex? . bm5068) (make-mutex . bm5067) (condition-variable-notify-all! . bm5066) (condition-variable-notify! . bm5065) (condition-variable-wait! . bm5064) (make-condition-variable . bm5063) (write/ss . bm5062) (mosh-executable-path . bm5061) (make-file-options . bm5060) (source-info . bm505f) (make-compiler-instruction . bm505e) (make-instruction . bm505d) (set-source-info! . bm505c) (bignum? . bm505b) (fast-equal? . bm505a) (fasl-read . bm5059) (fasl-write . bm5058) (time-usage . bm5057) (os-constant . bm5056) (time . bm4db5) (include . bm4daa)) '() values values '#f '#f '#f '#f) (bm2cd3@bm2b1f@install-library 'bm5154 '(system) '() '() '() '() '((gensym-prefix-set! . bm50f0) (ssl-socket? . bm50e8) (socket-sslize! . bm50e7) (%monapi-name-whereis . bm50e6) (%monapi-message-send . bm50e5) (write-to-file . bm50e2) (file->list . bm50e1) (file->string . bm50e0) (mosh-cache-dir . bm28e8) (call-process . bm50d6) (local-tz-offset . bm50d5) (microseconds . bm50d4) (directory-list . bm50d3) (expand-path . bm50d1) (%spawn . bm50cf) (%waitpid . bm50ce) (simple-struct-name . bm50cd) (simple-struct-set! . bm50cc) (simple-struct-ref . bm50cb) (make-simple-struct . bm50ca) (simple-struct? . bm50c9) (pointer-ref-c-int64 . bm50c8) (pointer-ref-c-int32 . bm50c7) (pointer-ref-c-int16 . bm50c6) (pointer-ref-c-int8 . bm50c5) (pointer-ref-c-uint64 . bm50c4) (pointer-ref-c-uint32 . bm50c3) (pointer-ref-c-uint16 . bm50c2) (pointer-ref-c-uint8 . bm50c1) (pointer-set-c-uint64! . bm50c0) (pointer-set-c-uint32! . bm50bf) (pointer-set-c-uint16! . bm50be) (pointer-set-c-uint8! . bm50bd) (pointer-set-c-int64! . bm50bc) (pointer-set-c-int32! . bm50bb) (pointer-set-c-int16! . bm50ba) (pointer-set-c-int8! . bm50b9) (pointer-set-c-pointer! . bm50b8) (pointer-set-c-double! . bm50b7) (pointer-set-c-float! . bm50b6) (pointer-set-c-long-long! . bm50b5) (pointer-set-c-long! . bm50b4) (pointer-set-c-int! . bm50b3) (pointer-set-c-short! . bm50b2) (pointer-set-c-char! . bm50b1) (pointer-ref-c-pointer . bm50b0) (pointer-ref-c-double . bm50af) (pointer-ref-c-float . bm50ae) (pointer-ref-c-unsigned-long-long . bm50ad) (pointer-ref-c-signed-long-long . bm50ac) (pointer-ref-c-unsigned-long . bm50ab) (pointer-ref-c-signed-long . bm50aa) (pointer-ref-c-unsigned-int . bm50a9) (pointer-ref-c-signed-int . bm50a8) (pointer-ref-c-unsigned-short . bm50a7) (pointer-ref-c-signed-short . bm50a6) (pointer-ref-c-unsigned-char . bm50a5) (pointer-ref-c-signed-char . bm50a4) (pointer->integer . bm50a3) (integer->pointer . bm50a2) (pointer? . bm50a1) (shared-errno . bm50a0) (%ffi-free-c-callback-trampoline . bm509f) (%ffi-make-c-callback-trampoline . bm509e) (%ffi-free . bm509d) (%ffi-malloc . bm509c) (%ffi-supported? . bm509b) (%ffi-pointer->string . bm509a) (%ffi-call . bm5099) (%ffi-lookup . bm5098) (%ffi-open . bm5097) (null-terminated-utf8->string . bm5096) (null-terminated-bytevector->string . bm5095) (%exec . bm5094) (%fork . bm5093) (%pipe . bm5092) (open-output-string . bm5090) (get-output-string . bm508f) (file-stat-ctime . bm508e) (file-stat-atime . bm508d) (file-stat-mtime . bm508c) (file-size-in-bytes . bm508b) (file-writable? . bm508a) (file-executable? . bm5089) (file-readable? . bm5088) (file-regular? . bm5087) (file-symbolic-link? . bm5086) (file-directory? . bm5085) (create-symbolic-link . bm5084) (rename-file . bm5083) (delete-directory . bm5082) (create-directory . bm5081) (create-mosh-cache-dir . bm5080) (get-environment-variables . bm507f) (current-exception-handler . bm507e) (get-environment-variable . bm507d) (join-wraps . bm507c) (id->real-label . bm507b) (same-marks? . bm507a) (same-marks*? . bm5079) (disasm . bm5055) (make-parameter . bm28e6) (socket-port . bm5054) (socket-shutdown . bm5053) (socket-close . bm5052) (socket-send . bm5051) (socket-recv! . bm5050) (socket-recv . bm504f) (make-server-socket . bm504e) (make-client-socket . bm504d) (socket-accept . bm504c) (socket? . bm504b) (parameterize . bm4da5)) '() values values '#f '#f '#f '#f)))
(begin (set! bm4c0d@ref (unspecified)) (set! bm4c0f@x* (unspecified)) (set! bm4c11@add-library-path! (unspecified)) (set! bm4c13@parse-and-add-library-path (unspecified)) (set! bm4c15@for-each-with-index (unspecified)) (set! bm4c17@rpad (unspecified)) (set! bm4c19@condition-printer (unspecified)) (set! bm4c1b@record->field-alist (unspecified)) (set! bm4c1d@map-with-index (unspecified)) (set! bm4c1f@repl (unspecified)) (set! bm4c21@trace-printer (unspecified)) (set! bm4c23@command-line (unspecified)) (set! bm4c25@local-library-path (unspecified)) (set! bm4c27@load/args (unspecified)) (set! bm4c29@load (unspecified)) (set! bm4c2b@ironscheme-build (unspecified)) (set! bm4c2d@eval-top-level (unspecified)) (set! bm4c2f@compile-system-libraries (unspecified)) (set! bm4c31@compile (unspecified)) (set! bm4c33@compile->closure (unspecified)) (set! bm4c35@pre-compile-r6rs-file (unspecified)) (set! bm4c37@load-r6rs-top-level (unspecified)) (set! bm4c39@load-r6rs-top-level-sexp (unspecified)) (set! bm4c3b@prefix-inc (unspecified)) (set! bm4c3d@prefix-inc! (unspecified)) (set! bm4c0d@ref (lambda (bm4c78@rtd bm4c79@i bm4c7a@x) (let ((bm4c7e@val ((record-accessor bm4c78@rtd bm4c79@i) bm4c7a@x))) (if (symbol? bm4c7e@val) (ungensym bm4c7e@val) bm4c7e@val)))) (set! bm4d74@bm4c0d@ref bm4c0d@ref) (set! bm4c0f@x* '()) (set! bm4d75@bm4c0f@x* bm4c0f@x*) (set! bm4c11@add-library-path! (lambda (bm4c80@path) (bm2cc3@bm2aff@library-path (append (bm2cc3@bm2aff@library-path) (list bm4c80@path))))) (set! bm4d76@bm4c11@add-library-path! bm4c11@add-library-path!) (set! bm4c13@parse-and-add-library-path (lambda (bm4c82@paths bm4c83@message) (letrec* ((bm4c87@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((bm4c88@t bm4c82@paths)) (if bm4c88@t ((lambda (bm4c8a@paths) (for-each (lambda (bm4c8c@path) (if (file-exists? bm4c8c@path) (bm4c11@add-library-path! (expand-path bm4c8c@path)) (format (current-error-port) bm4c83@message bm4c8c@path))) (string-split bm4c8a@paths bm4c87@separator))) bm4c88@t) (void)))))) (set! bm4d77@bm4c13@parse-and-add-library-path bm4c13@parse-and-add-library-path) (set! bm4c15@for-each-with-index (lambda (bm4c8e@proc bm4c8f@lst) (letrec ((bm4c92@loop (lambda (bm4c94@i bm4c95@lst) (if (null? bm4c95@lst) (if '#f '#f (void)) (begin (bm4c8e@proc bm4c94@i (car bm4c95@lst)) (bm4c92@loop (+ bm4c94@i '1) (cdr bm4c95@lst))))))) (bm4c92@loop '1 bm4c8f@lst)))) (set! bm4d78@bm4c15@for-each-with-index bm4c15@for-each-with-index) (set! bm4c17@rpad (lambda (bm4c98@str bm4c99@pad bm4c9a@n) (let ((bm4c9e@rest (- bm4c9a@n (string-length (format '"~a" bm4c98@str))))) (let bm4ca4@loop ((bm4ca0@rest bm4c9e@rest) (bm4ca1@ret (format '"~a" bm4c98@str))) (if (<= bm4ca0@rest '0) bm4ca1@ret (bm4ca4@loop (- bm4ca0@rest '1) (string-append bm4ca1@ret bm4c99@pad))))))) (set! bm4d79@bm4c17@rpad bm4c17@rpad) (set! bm4c19@condition-printer (lambda (bm4ca6@e bm4ca7@port) (letrec* ((bm4cab@max-condition-len (apply max (map (lambda (bm4cbc@c) (string-length (symbol->string (record-type-name (record-rtd bm4cbc@c))))) (simple-conditions bm4ca6@e))))) (begin (display '" Condition components:\n" bm4ca7@port) (bm4c15@for-each-with-index (lambda (bm4cac@i bm4cad@x) (let ((bm4cb0@rtd (record-rtd bm4cad@x)) (bm4cb1@fields-alist (bm4c1b@record->field-alist bm4cad@x))) (begin (format bm4ca7@port '" ~d. ~a" bm4cac@i (bm4c17@rpad (symbol->string (record-type-name bm4cb0@rtd)) '" " bm4cab@max-condition-len)) (if (null? bm4cb1@fields-alist) (newline bm4ca7@port) (void)) (let bm4cb8@loop ((bm4cb4@first '#t) (bm4cb5@fields-alist bm4cb1@fields-alist)) (if (null? bm4cb5@fields-alist) '() (let ((bm4cba@field (car bm4cb5@fields-alist))) (begin (if (not bm4cb4@first) (display (bm4c17@rpad '"" '" " (+ '4 bm4cab@max-condition-len)) bm4ca7@port) (void)) (display '"       " bm4ca7@port) (display (car bm4cba@field) bm4ca7@port) (display '": " bm4ca7@port) (write (cdr bm4cba@field) bm4ca7@port) (newline bm4ca7@port) (bm4cb8@loop '#f (cdr bm4cb5@fields-alist))))))))) (simple-conditions bm4ca6@e)))))) (set! bm4d7a@bm4c19@condition-printer bm4c19@condition-printer) (set! bm4c1b@record->field-alist (lambda (bm4cbe@r) (letrec* ((bm4cc1@ref (lambda (bm4ccc@rtd bm4ccd@i bm4cce@x) (let ((bm4cd2@val ((record-accessor bm4ccc@rtd bm4ccd@i) bm4cce@x))) (if (symbol? bm4cd2@val) (ungensym bm4cd2@val) bm4cd2@val))))) (let bm4cc6@loop ((bm4cc2@ret '()) (bm4cc3@rtd (record-rtd bm4cbe@r))) (if bm4cc3@rtd (bm4cc6@loop (append bm4cc2@ret (bm4c1d@map-with-index (lambda (bm4cc8@i bm4cc9@field) (cons bm4cc9@field (bm4cc1@ref bm4cc3@rtd bm4cc8@i bm4cbe@r))) (vector->list (record-type-field-names bm4cc3@rtd)))) (record-type-parent bm4cc3@rtd)) bm4cc2@ret))))) (set! bm4d7b@bm4c1b@record->field-alist bm4c1b@record->field-alist) (set! bm4c1d@map-with-index (lambda (bm4cd4@proc bm4cd5@lst) (let bm4cde@loop ((bm4cd8@i '0) (bm4cd9@lst bm4cd5@lst) (bm4cda@ret '())) (if (null? bm4cd9@lst) (reverse bm4cda@ret) (bm4cde@loop (+ bm4cd8@i '1) (cdr bm4cd9@lst) (cons (bm4cd4@proc bm4cd8@i (car bm4cd9@lst)) bm4cda@ret)))))) (set! bm4d7c@bm4c1d@map-with-index bm4c1d@map-with-index) (set! bm4c1f@repl (lambda bm4ce0@x (letrec* ((bm4ce3@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bm4ce6@bm4ce4) (lambda () (with-exception-handler (lambda (bm4ce8@e) ((call/cc (lambda (bm4cea@bm4ce5) (bm4ce6@bm4ce4 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bm4ce8@e) (bm4c19@condition-printer bm4ce8@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bm4ce8@e))) (bm4cea@bm4ce5 (lambda () (raise-continuable bm4ce8@e)))))))))) (lambda () (let bm4cf0@loop ((bm4cec@line (get-line (current-input-port))) (bm4ced@accum '"")) (letrec* ((bm4cf3@parentheses-ok? (lambda (bm4cfe@text) (let bm4d06@loop ((bm4d00@chars (string->list bm4cfe@text)) (bm4d01@p0 '0) (bm4d02@p1 '0)) (if (null? bm4d00@chars) (= '0 bm4d01@p0 bm4d02@p1) (let ((bm4d08@t (car bm4d00@chars))) (if (memv bm4d08@t '(#\()) (bm4d06@loop (cdr bm4d00@chars) (+ bm4d01@p0 '1) bm4d02@p1) (if (memv bm4d08@t '(#\))) (bm4d06@loop (cdr bm4d00@chars) (- bm4d01@p0 '1) bm4d02@p1) (if (memv bm4d08@t '(#\[)) (bm4d06@loop (cdr bm4d00@chars) bm4d01@p0 (+ bm4d02@p1 '1)) (if (memv bm4d08@t '(#\])) (bm4d06@loop (cdr bm4d00@chars) bm4d01@p0 (- bm4d02@p1 '1)) (bm4d06@loop (cdr bm4d00@chars) bm4d01@p0 bm4d02@p1)))))))))) (bm4cf5@eval-string-print (lambda (bm4cf8@text) (if (not (or (string=? '"\n" bm4cf8@text) (= '0 (string-length bm4cf8@text)))) (call-with-values (lambda () (bm4c2d@eval-top-level (call-with-port (open-string-input-port bm4cf8@text) read))) (lambda bm4cfa@out* (for-each (lambda (bm4cfc@out) (begin (write bm4cfc@out) (newline))) bm4cfa@out*))) (void))))) (if (eof-object? bm4cec@line) (begin (bm4cf5@eval-string-print bm4ced@accum) (exit)) (let ((bm4cf6@current (string-append bm4ced@accum bm4cec@line))) (if (bm4cf3@parentheses-ok? bm4cf6@current) (bm4cf5@eval-string-print bm4cf6@current) (bm4cf0@loop (get-line (current-input-port)) bm4cf6@current)))))))))))) (newline) (bm4ce3@rec))))) (bm4ce3@rec)))) (set! bm4d7d@bm4c1f@repl bm4c1f@repl) (set! bm4c21@trace-printer (bm2a09@bm28e7@make-parameter write)) (set! bm4d7e@bm4c21@trace-printer bm4c21@trace-printer) (set! bm4c23@command-line (bm2a09@bm28e7@make-parameter (get-command-line))) (set! bm4d7f@bm4c23@command-line bm4c23@command-line) (set! bm4c25@local-library-path (lambda (bm4d0a@filename) (bm2cc3@bm2aff@library-path))) (set! bm4d80@bm4c25@local-library-path bm4c25@local-library-path) (set! bm4c27@load/args (lambda (bm4d0c@filename . bm4d0e@args) (begin (apply bm4c37@load-r6rs-top-level bm4d0c@filename 'load bm4d0e@args) (void)))) (set! bm4d81@bm4c27@load/args bm4c27@load/args) (set! bm4c29@load (lambda (bm4d10@filename) (begin (apply bm4c37@load-r6rs-top-level bm4d10@filename 'load (bm4c23@command-line)) (void)))) (set! bm4d82@bm4c29@load bm4c29@load) (set! bm4c2b@ironscheme-build (lambda () (bm4c29@load '"ironscheme-buildscript.ss"))) (set! bm4d83@bm4c2b@ironscheme-build bm4c2b@ironscheme-build) (set! bm4c2d@eval-top-level (lambda (bm4d12@x) (bm4bea@bm3180@eval bm4d12@x (bm4c01@bm31ae@interaction-environment)))) (set! bm4d84@bm4c2d@eval-top-level bm4c2d@eval-top-level) (set! bm4c2f@compile-system-libraries (lambda () (bm4c2d@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bm4d85@bm4c2f@compile-system-libraries bm4c2f@compile-system-libraries) (set! bm4c31@compile (lambda (bm4d14@filename) (bm4c37@load-r6rs-top-level bm4d14@filename 'compile))) (set! bm4d86@bm4c31@compile bm4c31@compile) (set! bm4c33@compile->closure (lambda (bm4d16@filename) (bm4c37@load-r6rs-top-level bm4d16@filename 'closure))) (set! bm4d87@bm4c33@compile->closure bm4c33@compile->closure) (set! bm4c35@pre-compile-r6rs-file (lambda (bm4d18@filename) (bm4c37@load-r6rs-top-level bm4d18@filename 'compile))) (set! bm4d88@bm4c35@pre-compile-r6rs-file bm4c35@pre-compile-r6rs-file) (set! bm4c37@load-r6rs-top-level (lambda (bm4d1a@filename bm4d1b@how . bm4d1e@args) (begin (bm2cc3@bm2aff@library-path (bm4c25@local-library-path bm4d1a@filename)) (let ((bm4d20@x* (with-input-from-file bm4d1a@filename (lambda () (let bm4d22@f () (let ((bm4d24@x (bm29fb@bm28cb@read-annotated))) (if (eof-object? bm4d24@x) '() (cons bm4d24@x (bm4d22@f))))))))) (let ((bm4d26@t bm4d1b@how)) (if (memv bm4d26@t '(closure)) (bm4c00@bm31ac@pre-compile-r6rs-top-level bm4d20@x*) (if (memv bm4d26@t '(load)) (begin (bm4c23@command-line (cons bm4d1a@filename (car bm4d1e@args))) (bm2a0a@bm28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (bm2a0a@bm28e9@mosh-cache-dir) (gensym-prefix-set! (bm4c3d@prefix-inc! (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bm4d28@file) ((call/cc (lambda (bm4d2c@bm4d2a) (lambda () (with-exception-handler (lambda (bm4d2e@c) ((call/cc (lambda (bm4d30@bm4d2b) (bm4d2c@bm4d2a (lambda () (if '#t '#t (bm4d30@bm4d2b (lambda () (raise-continuable bm4d2e@c)))))))))) (lambda () (delete-file (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/" bm4d28@file))))))))) (directory-list (bm2a0a@bm28e9@mosh-cache-dir))) (void)) (let ((bm4d32@compiled (bm4bff@bm31aa@compile-r6rs-top-level bm4d20@x*))) (begin (if (and (bm2a0a@bm28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bm2cc7@bm2b07@serialize-all bm2a04@bm28dd@serialize-library bm2a60@bm2a19@compile-core-expr) (void)) (bm4d32@compiled)))) (if (memv bm4d26@t '(compile)) (begin (bm4bff@bm31aa@compile-r6rs-top-level bm4d20@x*) (bm2cc7@bm2b07@serialize-all bm2a04@bm28dd@serialize-library bm2a60@bm2a19@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bm4d89@bm4c37@load-r6rs-top-level bm4c37@load-r6rs-top-level) (set! bm4c39@load-r6rs-top-level-sexp (lambda (bm4d34@import-spec bm4d35@thunk) (let ((bm4d40@bm4d39 bm2cc3@bm2aff@library-path) (bm4d41@bm4d3b bm2a0a@bm28e9@mosh-cache-dir) (bm4d42@bm4d3d (bm4c25@local-library-path '"")) (bm4d43@bm4d3f (create-mosh-cache-dir))) (let ((bm4d48@swap (lambda () (begin (let ((bm4d4a@t (bm4d40@bm4d39))) (begin (bm4d40@bm4d39 bm4d42@bm4d3d) (set! bm4d42@bm4d3d bm4d4a@t))) (let ((bm4d4c@t (bm4d41@bm4d3b))) (begin (bm4d41@bm4d3b bm4d43@bm4d3f) (set! bm4d43@bm4d3f bm4d4c@t))))))) (dynamic-wind bm4d48@swap (lambda () (begin (if (bm2a0a@bm28e9@mosh-cache-dir) (gensym-prefix-set! (bm4c3d@prefix-inc! (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bm4d52@bm4d4f bm4c23@command-line) (bm4d53@bm4d51 '())) (let ((bm4d56@swap (lambda () (let ((bm4d58@t (bm4d52@bm4d4f))) (begin (bm4d52@bm4d4f bm4d53@bm4d51) (set! bm4d53@bm4d51 bm4d58@t)))))) (dynamic-wind bm4d56@swap (lambda () ((bm4bff@bm31aa@compile-r6rs-top-level (list (cons 'import bm4d34@import-spec) (list bm4d35@thunk))))) bm4d56@swap))))) bm4d48@swap))))) (set! bm4d8a@bm4c39@load-r6rs-top-level-sexp bm4c39@load-r6rs-top-level-sexp) (set! bm4c3b@prefix-inc (lambda (bm4d5a@prefix-string) (let ((bm4d5c@prefix (symbol->string bm4d5a@prefix-string))) (let ((bm4d5e@len (string-length bm4d5c@prefix))) (let bm4d66@loop ((bm4d60@i (- bm4d5e@len '1)) (bm4d61@carry? '#t) (bm4d62@accum '())) (if (< bm4d60@i '0) (string->symbol (list->string (if bm4d61@carry? (cons '#\a bm4d62@accum) bm4d62@accum))) (if bm4d61@carry? (let ((bm4d68@next-integer (+ '1 (char->integer (string-ref bm4d5c@prefix bm4d60@i))))) (if (= bm4d68@next-integer '123) (bm4d66@loop (- bm4d60@i '1) '#f (cons '#\A bm4d62@accum)) (if (= bm4d68@next-integer '91) (bm4d66@loop (- bm4d60@i '1) '#t (cons '#\a bm4d62@accum)) (bm4d66@loop (- bm4d60@i '1) '#f (cons (integer->char bm4d68@next-integer) bm4d62@accum))))) (bm4d66@loop (- bm4d60@i '1) '#f (cons (string-ref bm4d5c@prefix bm4d60@i) bm4d62@accum))))))))) (set! bm4d8b@bm4c3b@prefix-inc bm4c3b@prefix-inc) (set! bm4c3d@prefix-inc! (lambda (bm4d6a@file) (begin (if (not (file-exists? bm4d6a@file)) (call-with-output-file bm4d6a@file (lambda (bm4d6c@port) (write 'd bm4d6c@port))) (void)) (let ((bm4d6e@prefix (call-with-input-file bm4d6a@file read))) (if (main-vm?) (let ((bm4d70@next-prefix (bm4c3b@prefix-inc bm4d6e@prefix))) (begin (call-with-port (open-file-output-port bm4d6a@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bm4d72@port) (write bm4d70@next-prefix bm4d72@port))) bm4d6e@prefix)) bm4d6e@prefix))))) (set! bm4d8c@bm4c3d@prefix-inc! bm4c3d@prefix-inc!) (begin (bm2cc8@bm2b09@current-precompiled-library-loader bm2a05@bm28df@load-serialized-library) (set-symbol-value! 'load bm4c29@load) (set-symbol-value! 'pre-compile-r6rs-file bm4c35@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bm4c2d@eval-top-level) (set-symbol-value! 'int-env-syms bm4be1@bm316e@interaction-environment-symbols) (set-symbol-value! 'expanded2core bm2a5f@bm2a17@expanded->core) (set-symbol-value! 'trace-printer bm4c21@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bm4c3e@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list bm4c3e@c))))) (bm4c13@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bm4c13@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bm4c11@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bm4c11@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bm4c11@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bm4c40@prefix (lambda (bm4c42@ext bm4c43@ls) (append (map (lambda (bm4c46@x) (string-append bm4c42@ext bm4c46@x)) bm4c43@ls) bm4c43@ls)))) (bm2cc4@bm2b01@library-extensions (bm4c40@prefix '".mosh" (bm2cc4@bm2b01@library-extensions)))) (current-exception-handler (lambda (bm4c48@c) (begin (if (condition? bm4c48@c) (bm4c19@condition-printer bm4c48@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bm4c48@c)) bm4c48@c))) (if ((call/cc (lambda (bm4c4c@bm4c4a) (lambda () (with-exception-handler (lambda (bm4c4e@c) ((call/cc (lambda (bm4c50@bm4c4b) (bm4c4c@bm4c4a (lambda () (if '#t '#f (bm4c50@bm4c4b (lambda () (raise-continuable bm4c4e@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bm4c39@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bm4c23@command-line)) (let ((bm4c5a@bm4c53 bm4c23@command-line) (bm4c5b@bm4c55 bm2a0a@bm28e9@mosh-cache-dir) (bm4c5c@bm4c57 '()) (bm4c5d@bm4c59 (create-mosh-cache-dir))) (let ((bm4c62@swap (lambda () (begin (let ((bm4c64@t (bm4c5a@bm4c53))) (begin (bm4c5a@bm4c53 bm4c5c@bm4c57) (set! bm4c5c@bm4c57 bm4c64@t))) (let ((bm4c66@t (bm4c5b@bm4c55))) (begin (bm4c5b@bm4c55 bm4c5d@bm4c59) (set! bm4c5d@bm4c59 bm4c66@t))))))) (dynamic-wind bm4c62@swap (lambda () (begin (if (bm2a0a@bm28e9@mosh-cache-dir) (gensym-prefix-set! (bm4c3d@prefix-inc! (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (bm4c1f@repl))) bm4c62@swap))) (begin (bm2cc3@bm2aff@library-path (bm4c25@local-library-path (car (bm4c23@command-line)))) (set! bm4c0f@x* (with-input-from-file (car (bm4c23@command-line)) (lambda () (let bm4c68@f () (let ((bm4c6a@x (bm29fb@bm28cb@read-annotated))) (if (eof-object? bm4c6a@x) '() (cons bm4c6a@x (bm4c68@f)))))))) (bm4c23@command-line (cons (car (bm4c23@command-line)) (cdr (bm4c23@command-line)))) (bm2a0a@bm28e9@mosh-cache-dir (create-mosh-cache-dir)) (if (bm2a0a@bm28e9@mosh-cache-dir) (gensym-prefix-set! (bm4c3d@prefix-inc! (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bm4c6c@file) ((call/cc (lambda (bm4c70@bm4c6e) (lambda () (with-exception-handler (lambda (bm4c72@c) ((call/cc (lambda (bm4c74@bm4c6f) (bm4c70@bm4c6e (lambda () (if '#t '#t (bm4c74@bm4c6f (lambda () (raise-continuable bm4c72@c)))))))))) (lambda () (delete-file (string-append (bm2a0a@bm28e9@mosh-cache-dir) '"/" bm4c6c@file))))))))) (directory-list (bm2a0a@bm28e9@mosh-cache-dir))) (void)) (let ((bm4c76@compiled (bm4bff@bm31aa@compile-r6rs-top-level bm4c0f@x*))) (begin (if (and (bm2a0a@bm28e9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bm2cc7@bm2b07@serialize-all bm2a04@bm28dd@serialize-library bm2a60@bm2a19@compile-core-expr) (void)) (bm4c76@compiled))))))))
