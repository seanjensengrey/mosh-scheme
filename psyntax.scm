;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! jO581@library-file-path->cache-path (unspecified)) (set! jO583@read-annotated (unspecified)) (set! jO585@annotation-stripped (unspecified)) (set! jO587@annotation? (unspecified)) (set! jO589@annotation-source (unspecified)) (set! jO58b@annotation-expression (unspecified)) (set! jO58d@scm->fasl (unspecified)) (set! jO58f@fasl-save (unspecified)) (set! jO591@fasl-load (unspecified)) (set! jO593@verbose? (unspecified)) (set! jO595@serialize-library (unspecified)) (set! jO597@load-serialized-library (unspecified)) (set! jO599@make-record-printer (unspecified)) (set! jO59b@compile-core (unspecified)) (set! jO59d@read-library-source-file (unspecified)) (set! jO59f@make-parameter (unspecified)) (set! jO5a1@mosh-cache-dir (unspecified)) (set! jO637@file-options-spec (unspecified)) (set! jO581@library-file-path->cache-path (lambda (jO638@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jO63e@jO63b jO63f@jO63d) (let ((jO642@extract jO63f@jO63d) (jO643@p jO63e@jO63b)) (letrec* ((jO647@display-hex (lambda (jO650@n) (if (<= '0 jO650@n '9) (display jO650@n jO643@p) (display (integer->char (+ (char->integer '#\a) (- jO650@n '10))) jO643@p))))) (begin (let jO64a@f ((jO648@ls (string-split jO638@x '#\/))) (if (not (null? jO648@ls)) (begin (display '"_" jO643@p) (for-each (lambda (jO64c@c) (if (or (char<=? '#\a jO64c@c '#\z) (char<=? '#\A jO64c@c '#\Z) (char<=? '#\0 jO64c@c '#\9) (memv jO64c@c '(#\- #\. #\_ #\~))) (display jO64c@c jO643@p) (begin (display '"%" jO643@p) (let ((jO64e@n (char->integer jO64c@c))) (begin (jO647@display-hex (quotient jO64e@n '16)) (jO647@display-hex (remainder jO64e@n '16))))))) (string->list (car jO648@ls))) (jO64a@f (cdr jO648@ls))) (void))) (jO642@extract)))))))) (set! jO6b2@jO581@library-file-path->cache-path jO581@library-file-path->cache-path) (set! jO583@read-annotated read) (set! jO6b3@jO583@read-annotated jO583@read-annotated) (set! jO585@annotation-stripped (lambda (jO652@x) (jO58b@annotation-expression jO652@x))) (set! jO6b4@jO585@annotation-stripped jO585@annotation-stripped) (set! jO587@annotation? (lambda (jO654@x) (source-info jO654@x))) (set! jO6b5@jO587@annotation? jO587@annotation?) (set! jO589@annotation-source (lambda (jO656@x) (source-info jO656@x))) (set! jO6b6@jO589@annotation-source jO589@annotation-source) (set! jO58b@annotation-expression (lambda (jO658@x) (if (pair? jO658@x) (cons (car jO658@x) (cdr jO658@x)) (if (procedure? jO658@x) (set-source-info! jO658@x '#f) jO658@x)))) (set! jO6b7@jO58b@annotation-expression jO58b@annotation-expression) (set! jO58d@scm->fasl (lambda (jO65a@filename) (string-append (jO5a1@mosh-cache-dir) '"/" (jO581@library-file-path->cache-path jO65a@filename) '".mosh-fasl"))) (set! jO6b8@jO58d@scm->fasl jO58d@scm->fasl) (set! jO58f@fasl-save (lambda (jO65c@filename jO65d@obj) (call-with-port (open-file-output-port jO65c@filename) (lambda (jO660@port) ((symbol-value 'fasl-write!) jO65d@obj jO660@port))))) (set! jO6b9@jO58f@fasl-save jO58f@fasl-save) (set! jO591@fasl-load (lambda (jO662@filename) (call-with-port (open-file-input-port jO662@filename) (symbol-value 'fasl-read!)))) (set! jO6ba@jO591@fasl-load jO591@fasl-load) (set! jO593@verbose? (symbol-value '%verbose)) (set! jO6bb@jO593@verbose? jO593@verbose?) (set! jO595@serialize-library (lambda (jO664@filename jO665@obj) (begin (if jO593@verbose? (format (current-error-port) '"serialize-library ~a\n..." jO664@filename) (void)) (let ((jO668@expanded2core (symbol-value 'expanded2core))) (let ((jO66a@compile (symbol-value 'compile-w/o-halt))) (let ((jO66c@code jO665@obj)) (let ((jO66e@pivot (cddddr (cddddr jO66c@code)))) (let ((jO670@visit (jO66a@compile (jO668@expanded2core (car jO66e@pivot))))) (begin (set-car! jO66e@pivot jO670@visit) (let ((jO672@pivot (cdr jO66e@pivot))) (let ((jO674@invoke (jO66a@compile (jO668@expanded2core (car jO672@pivot))))) (set-car! jO672@pivot jO674@invoke))))))))) (let ((jO676@fasl-file (jO58d@scm->fasl jO664@filename))) (begin (if (file-exists? jO676@fasl-file) (delete-file jO676@fasl-file) (void)) ((call/cc (lambda (jO67a@jO678) (lambda () (with-exception-handler (lambda (jO67c@c) ((call/cc (lambda (jO67e@jO679) (jO67a@jO678 (lambda () (if '#t (begin (if jO593@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" jO664@filename) (void)) (if (file-exists? jO676@fasl-file) (delete-file jO676@fasl-file) (void)) '#f) (jO67e@jO679 (lambda () (raise-continuable jO67c@c)))))))))) (lambda () (jO58f@fasl-save jO676@fasl-file jO665@obj)))))))))))) (set! jO6bc@jO595@serialize-library jO595@serialize-library) (set! jO597@load-serialized-library (lambda (jO680@filename jO681@obj) (and (jO5a1@mosh-cache-dir) (let ((jO684@fasl-file (jO58d@scm->fasl jO680@filename))) (if (and (file-exists? jO684@fasl-file) ((symbol-value 'file-newer?) jO684@fasl-file jO680@filename)) (let ((jO686@expanded2core (symbol-value 'expanded2core))) (let ((jO688@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((jO68a@code (jO591@fasl-load jO684@fasl-file))) (let ((jO68c@pivot (cddddr (cddddr jO68a@code)))) (let ((jO68e@visit (car jO68c@pivot))) (let ((jO690@visit-proc (lambda () (jO688@eval-compiled-core jO68e@visit)))) (begin (set-car! jO68c@pivot jO690@visit-proc) (let ((jO692@pivot (cdr jO68c@pivot))) (let ((jO694@invoke (car jO692@pivot))) (begin (set-car! jO692@pivot (lambda () (jO688@eval-compiled-core jO694@invoke))) (apply jO681@obj jO68a@code))))))))))) '#f))))) (set! jO6bd@jO597@load-serialized-library jO597@load-serialized-library) (set! jO599@make-record-printer (lambda (jO696@name jO697@printer) (lambda jO69a@x (begin (display '"record printer") (for-each display jO69a@x))))) (set! jO6be@jO599@make-record-printer jO599@make-record-printer) (set! jO59b@compile-core (lambda jO69c@x (apply error 'comile-core '"not implementated" jO69c@x))) (set! jO6bf@jO59b@compile-core jO59b@compile-core) (set! jO59d@read-library-source-file (lambda (jO69e@file-name) (with-input-from-file jO69e@file-name jO583@read-annotated))) (set! jO6c0@jO59d@read-library-source-file jO59d@read-library-source-file) (set! jO59f@make-parameter (lambda jO6ae (let ((jO6af (length jO6ae))) (if (= jO6af '1) (apply (lambda (jO6a0@x) (jO59f@make-parameter jO6a0@x (lambda (jO6a2@x) jO6a2@x))) jO6ae) (if (= jO6af '2) (apply (lambda (jO6a4@x jO6a5@fender) (let ((jO6a8@x (jO6a5@fender jO6a4@x))) (lambda jO6ac (let ((jO6ad (length jO6ac))) (if (= jO6ad '0) (apply (lambda () jO6a8@x) jO6ac) (if (= jO6ad '1) (apply (lambda (jO6aa@v) (set! jO6a8@x (jO6a5@fender jO6aa@v))) jO6ac) (error 'apply '"invalid arg count"))))))) jO6ae) (error 'apply '"invalid arg count")))))) (set! jO6c1@jO59f@make-parameter jO59f@make-parameter) (set! jO5a1@mosh-cache-dir (jO59f@make-parameter '#f)) (set! jO6c2@jO5a1@mosh-cache-dir jO5a1@mosh-cache-dir) (set! jO637@file-options-spec (lambda (jO6b0@x) jO6b0@x)) (set! jO6c3@jO637@file-options-spec jO637@file-options-spec) (void))
(begin (set! jO6c9@current-primitive-locations (unspecified)) (set! jO6cb@mutable? (unspecified)) (set! jO6cd@rewriter (unspecified)) (set! jO6cf@expanded->core (unspecified)) (set! jO6d1@compile-core-expr (unspecified)) (set! jO6d3@pretty-print (unspecified)) (set! jO6d5@compile-core-expr-to-port (unspecified)) (set! jO6c9@current-primitive-locations (jO6c1@jO59f@make-parameter (lambda (jO6d6@x) '#f) (lambda (jO6d8@p) jO6d8@p))) (set! jO714@jO6c9@current-primitive-locations jO6c9@current-primitive-locations) (set! jO6cb@mutable? (lambda (jO6da@x) (or (pair? jO6da@x) (vector? jO6da@x) (hashtable? jO6da@x)))) (set! jO715@jO6cb@mutable? jO6cb@mutable?) (set! jO6cd@rewriter (lambda (jO6dc@quote-hack?) (letrec* ((jO6df@f (lambda (jO6e0@x) (if (pair? jO6e0@x) (let ((jO6e2@t (car jO6e0@x))) (if (memv jO6e2@t '(quote)) (if (and jO6dc@quote-hack? (jO6cb@mutable? (cadr jO6e0@x))) (let ((jO6e4@g (gensym))) (begin (set-symbol-value! jO6e4@g (cadr jO6e0@x)) jO6e4@g)) jO6e0@x) (if (memv jO6e2@t '(case-lambda)) (cons 'case-lambda (map (lambda (jO6e6@x) (cons (car jO6e6@x) (map jO6df@f (cdr jO6e6@x)))) (cdr jO6e0@x))) (if (memv jO6e2@t '(lambda)) (cons* 'lambda (cadr jO6e0@x) (map jO6df@f (cddr jO6e0@x))) (if (memv jO6e2@t '(letrec)) (let ((jO6e8@bindings (cadr jO6e0@x)) (jO6e9@body* (cddr jO6e0@x))) (let ((jO6ec@lhs* (map car jO6e8@bindings)) (jO6ed@rhs* (map cadr jO6e8@bindings))) (cons* 'letrec (map list jO6ec@lhs* (map jO6df@f jO6ed@rhs*)) (map jO6df@f jO6e9@body*)))) (if (memv jO6e2@t '(letrec*)) (let ((jO6f0@bindings (cadr jO6e0@x)) (jO6f1@body* (cddr jO6e0@x))) (let ((jO6f4@lhs* (map car jO6f0@bindings)) (jO6f5@rhs* (map cadr jO6f0@bindings))) (cons* 'letrec* (map list jO6f4@lhs* (map jO6df@f jO6f5@rhs*)) (map jO6df@f jO6f1@body*)))) (if (memv jO6e2@t '(library-letrec*)) (let ((jO6f8@name (cadr jO6e0@x)) (jO6f9@x (cdr jO6e0@x))) (let ((jO6fc@bindings (cadr jO6f9@x)) (jO6fd@body* (cddr jO6f9@x))) (let ((jO700@lhs* (map car jO6fc@bindings)) (jO701@lhs** (map cadr jO6fc@bindings)) (jO702@rhs* (map caddr jO6fc@bindings))) (cons* 'library-letrec* jO6f8@name (map list jO700@lhs* jO701@lhs** (map jO6df@f jO702@rhs*)) (map jO6df@f jO6fd@body*))))) (if (memv jO6e2@t '(begin)) (cons 'begin (map jO6df@f (cdr jO6e0@x))) (if (memv jO6e2@t '(set!)) (list 'set! (cadr jO6e0@x) (jO6df@f (caddr jO6e0@x))) (if (memv jO6e2@t '(primitive)) (let ((jO706@op (cadr jO6e0@x))) (let ((jO708@t ((jO6c9@current-primitive-locations) jO706@op))) (if jO708@t ((lambda (jO70a@loc) jO70a@loc) jO708@t) jO706@op))) (if (memv jO6e2@t '(define)) jO6e0@x (if (list? jO6e0@x) (map jO6df@f jO6e0@x) (error 'rewrite '"invalid form ~s ~s" jO6e0@x (list? jO6e0@x)))))))))))))) jO6e0@x)))) jO6df@f))) (set! jO716@jO6cd@rewriter jO6cd@rewriter) (set! jO6cf@expanded->core (lambda (jO70c@x) ((jO6cd@rewriter '#f) jO70c@x))) (set! jO717@jO6cf@expanded->core jO6cf@expanded->core) (set! jO6d1@compile-core-expr (lambda (jO70e@x) ((jO6cd@rewriter '#f) jO70e@x))) (set! jO718@jO6d1@compile-core-expr jO6d1@compile-core-expr) (set! jO6d3@pretty-print write) (set! jO719@jO6d3@pretty-print jO6d3@pretty-print) (set! jO6d5@compile-core-expr-to-port (lambda (jO710@x jO711@p) (jO6d3@pretty-print ((jO6cd@rewriter '#f) jO710@x) jO711@p))) (set! jO71a@jO6d5@compile-core-expr-to-port jO6d5@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! jO769@make-collection (unspecified)) (set! jO76b@current-library-collection (unspecified)) (set! jO76d@rp (unspecified)) (set! jO777@library? (unspecified)) (set! jO779@library-id (unspecified)) (set! jO77b@set-library-id! (unspecified)) (set! jO77d@library-name (unspecified)) (set! jO77f@set-library-name! (unspecified)) (set! jO781@library-version (unspecified)) (set! jO783@set-library-version! (unspecified)) (set! jO785@library-imp* (unspecified)) (set! jO787@set-library-imp*! (unspecified)) (set! jO789@library-vis* (unspecified)) (set! jO78b@set-library-vis*! (unspecified)) (set! jO78d@library-inv* (unspecified)) (set! jO78f@set-library-inv*! (unspecified)) (set! jO791@library-subst (unspecified)) (set! jO793@set-library-subst! (unspecified)) (set! jO795@library-env (unspecified)) (set! jO797@set-library-env! (unspecified)) (set! jO799@library-visit-state (unspecified)) (set! jO79b@set-library-visit-state! (unspecified)) (set! jO79d@library-invoke-state (unspecified)) (set! jO79f@set-library-invoke-state! (unspecified)) (set! jO7a1@library-visit-code (unspecified)) (set! jO7a3@set-library-visit-code! (unspecified)) (set! jO7a5@library-invoke-code (unspecified)) (set! jO7a7@set-library-invoke-code! (unspecified)) (set! jO7a9@library-visible? (unspecified)) (set! jO7ab@set-library-visible?! (unspecified)) (set! jO7ad@library-source-file-name (unspecified)) (set! jO7af@set-library-source-file-name! (unspecified)) (set! jO7b1@dummy (unspecified)) (set! jO7b3@find-dependencies (unspecified)) (set! jO7b5@find-library-by (unspecified)) (set! jO7b7@library-path (unspecified)) (set! jO7b9@library-extensions (unspecified)) (set! jO7bb@library-name->file-name (unspecified)) (set! jO7bd@file-locator (unspecified)) (set! jO7bf@serialize-all (unspecified)) (set! jO7c1@current-precompiled-library-loader (unspecified)) (set! jO7c3@try-load-from-file (unspecified)) (set! jO7c5@library-loader (unspecified)) (set! jO7c7@current-library-expander (unspecified)) (set! jO7c9@external-pending-libraries (unspecified)) (set! jO7cb@find-external-library (unspecified)) (set! jO7cd@find-library-by-name (unspecified)) (set! jO7cf@library-exists? (unspecified)) (set! jO7d1@find-library-by-spec/die (unspecified)) (set! jO7d3@label->binding-table (unspecified)) (set! jO7d5@install-library-record (unspecified)) (set! jO7d7@install-library (unspecified)) (set! jO7d9@imported-label->binding (unspecified)) (set! jO7db@invoke-library (unspecified)) (set! jO7dd@visit-library (unspecified)) (set! jO7df@invoke-library-by-spec (unspecified)) (set! jO7e1@installed-libraries (unspecified)) (set! jO7e3@library-spec (unspecified)) (set! jO769@make-collection (lambda () (let ((jO7e4@set '())) (letrec* ((jO7e7@set-cons (lambda (jO7ec@x jO7ed@ls) (if (memq jO7ec@x jO7ed@ls) jO7ed@ls (cons jO7ec@x jO7ed@ls))))) (lambda jO7ea (let ((jO7eb (length jO7ea))) (if (= jO7eb '0) (apply (lambda () jO7e4@set) jO7ea) (if (= jO7eb '1) (apply (lambda (jO7e8@x) (set! jO7e4@set (jO7e7@set-cons jO7e8@x jO7e4@set))) jO7ea) (error 'apply '"invalid arg count"))))))))) (set! jO958@jO769@make-collection jO769@make-collection) (set! jO76b@current-library-collection (jO6c1@jO59f@make-parameter (jO769@make-collection) (lambda (jO7f0@x) (begin (if (not (procedure? jO7f0@x)) (assertion-violation 'current-library-collection '"not a procedure" jO7f0@x) (void)) jO7f0@x)))) (set! jO959@jO76b@current-library-collection jO76b@current-library-collection) (set! jO76d@rp (jO6be@jO599@make-record-printer 'library (lambda (jO7f2@x jO7f3@p jO7f4@wr) (begin (if (not (jO777@library? jO7f2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (jO781@library-version jO7f2@x)) (jO77d@library-name jO7f2@x) (append (jO77d@library-name jO7f2@x) (list (jO781@library-version jO7f2@x))))) jO7f3@p))))) (set! jO95a@jO76d@rp jO76d@rp) (set! jO777@library? (lambda (jO7f8@x) (and (simple-struct? jO7f8@x) (eq? (simple-struct-name jO7f8@x) 'library)))) (set! jO95b@jO777@library? jO777@library?) (set! jO779@library-id (lambda (jO7fa@x) (simple-struct-ref jO7fa@x '0))) (set! jO95c@jO779@library-id jO779@library-id) (set! jO77b@set-library-id! (lambda (jO7fc@x jO7fd@val) (simple-struct-set! jO7fc@x '0 jO7fd@val))) (set! jO95d@jO77b@set-library-id! jO77b@set-library-id!) (set! jO77d@library-name (lambda (jO800@x) (simple-struct-ref jO800@x '1))) (set! jO95e@jO77d@library-name jO77d@library-name) (set! jO77f@set-library-name! (lambda (jO802@x jO803@val) (simple-struct-set! jO802@x '1 jO803@val))) (set! jO95f@jO77f@set-library-name! jO77f@set-library-name!) (set! jO781@library-version (lambda (jO806@x) (simple-struct-ref jO806@x '2))) (set! jO960@jO781@library-version jO781@library-version) (set! jO783@set-library-version! (lambda (jO808@x jO809@val) (simple-struct-set! jO808@x '2 jO809@val))) (set! jO961@jO783@set-library-version! jO783@set-library-version!) (set! jO785@library-imp* (lambda (jO80c@x) (simple-struct-ref jO80c@x '3))) (set! jO962@jO785@library-imp* jO785@library-imp*) (set! jO787@set-library-imp*! (lambda (jO80e@x jO80f@val) (simple-struct-set! jO80e@x '3 jO80f@val))) (set! jO963@jO787@set-library-imp*! jO787@set-library-imp*!) (set! jO789@library-vis* (lambda (jO812@x) (simple-struct-ref jO812@x '4))) (set! jO964@jO789@library-vis* jO789@library-vis*) (set! jO78b@set-library-vis*! (lambda (jO814@x jO815@val) (simple-struct-set! jO814@x '4 jO815@val))) (set! jO965@jO78b@set-library-vis*! jO78b@set-library-vis*!) (set! jO78d@library-inv* (lambda (jO818@x) (simple-struct-ref jO818@x '5))) (set! jO966@jO78d@library-inv* jO78d@library-inv*) (set! jO78f@set-library-inv*! (lambda (jO81a@x jO81b@val) (simple-struct-set! jO81a@x '5 jO81b@val))) (set! jO967@jO78f@set-library-inv*! jO78f@set-library-inv*!) (set! jO791@library-subst (lambda (jO81e@x) (simple-struct-ref jO81e@x '6))) (set! jO968@jO791@library-subst jO791@library-subst) (set! jO793@set-library-subst! (lambda (jO820@x jO821@val) (simple-struct-set! jO820@x '6 jO821@val))) (set! jO969@jO793@set-library-subst! jO793@set-library-subst!) (set! jO795@library-env (lambda (jO824@x) (simple-struct-ref jO824@x '7))) (set! jO96a@jO795@library-env jO795@library-env) (set! jO797@set-library-env! (lambda (jO826@x jO827@val) (simple-struct-set! jO826@x '7 jO827@val))) (set! jO96b@jO797@set-library-env! jO797@set-library-env!) (set! jO799@library-visit-state (lambda (jO82a@x) (simple-struct-ref jO82a@x '8))) (set! jO96c@jO799@library-visit-state jO799@library-visit-state) (set! jO79b@set-library-visit-state! (lambda (jO82c@x jO82d@val) (simple-struct-set! jO82c@x '8 jO82d@val))) (set! jO96d@jO79b@set-library-visit-state! jO79b@set-library-visit-state!) (set! jO79d@library-invoke-state (lambda (jO830@x) (simple-struct-ref jO830@x '9))) (set! jO96e@jO79d@library-invoke-state jO79d@library-invoke-state) (set! jO79f@set-library-invoke-state! (lambda (jO832@x jO833@val) (simple-struct-set! jO832@x '9 jO833@val))) (set! jO96f@jO79f@set-library-invoke-state! jO79f@set-library-invoke-state!) (set! jO7a1@library-visit-code (lambda (jO836@x) (simple-struct-ref jO836@x '10))) (set! jO970@jO7a1@library-visit-code jO7a1@library-visit-code) (set! jO7a3@set-library-visit-code! (lambda (jO838@x jO839@val) (simple-struct-set! jO838@x '10 jO839@val))) (set! jO971@jO7a3@set-library-visit-code! jO7a3@set-library-visit-code!) (set! jO7a5@library-invoke-code (lambda (jO83c@x) (simple-struct-ref jO83c@x '11))) (set! jO972@jO7a5@library-invoke-code jO7a5@library-invoke-code) (set! jO7a7@set-library-invoke-code! (lambda (jO83e@x jO83f@val) (simple-struct-set! jO83e@x '11 jO83f@val))) (set! jO973@jO7a7@set-library-invoke-code! jO7a7@set-library-invoke-code!) (set! jO7a9@library-visible? (lambda (jO842@x) (simple-struct-ref jO842@x '12))) (set! jO974@jO7a9@library-visible? jO7a9@library-visible?) (set! jO7ab@set-library-visible?! (lambda (jO844@x jO845@val) (simple-struct-set! jO844@x '12 jO845@val))) (set! jO975@jO7ab@set-library-visible?! jO7ab@set-library-visible?!) (set! jO7ad@library-source-file-name (lambda (jO848@x) (simple-struct-ref jO848@x '13))) (set! jO976@jO7ad@library-source-file-name jO7ad@library-source-file-name) (set! jO7af@set-library-source-file-name! (lambda (jO84a@x jO84b@val) (simple-struct-set! jO84a@x '13 jO84b@val))) (set! jO977@jO7af@set-library-source-file-name! jO7af@set-library-source-file-name!) (set! jO7b1@dummy '3) (set! jO978@jO7b1@dummy jO7b1@dummy) (set! jO7b3@find-dependencies (lambda (jO84e@ls) (if (null? jO84e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! jO979@jO7b3@find-dependencies jO7b3@find-dependencies) (set! jO7b5@find-library-by (lambda (jO850@pred) (let jO854@f ((jO852@ls ((jO76b@current-library-collection)))) (if (null? jO852@ls) '#f (if (jO850@pred (car jO852@ls)) (car jO852@ls) (jO854@f (cdr jO852@ls))))))) (set! jO97a@jO7b5@find-library-by jO7b5@find-library-by) (set! jO7b7@library-path (jO6c1@jO59f@make-parameter '(".") (lambda (jO856@x) (if (and (list? jO856@x) (for-all string? jO856@x)) (map (lambda (jO858@x) jO858@x) jO856@x) (assertion-violation 'library-path '"not a list of strings" jO856@x))))) (set! jO97b@jO7b7@library-path jO7b7@library-path) (set! jO7b9@library-extensions (jO6c1@jO59f@make-parameter '(".sls" ".ss" ".scm") (lambda (jO85a@x) (if (and (list? jO85a@x) (for-all string? jO85a@x)) (map (lambda (jO85c@x) jO85c@x) jO85a@x) (assertion-violation 'library-extensions '"not a list of strings" jO85a@x))))) (set! jO97c@jO7b9@library-extensions jO7b9@library-extensions) (set! jO7bb@library-name->file-name (lambda (jO85e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jO864@jO861 jO865@jO863) (let ((jO868@extract jO865@jO863) (jO869@p jO864@jO861)) (letrec* ((jO86d@display-hex (lambda (jO876@n) (if (<= '0 jO876@n '9) (display jO876@n jO869@p) (display (integer->char (+ (char->integer '#\a) (- jO876@n '10))) jO869@p))))) (begin (let jO870@f ((jO86e@ls jO85e@x)) (if (not (null? jO86e@ls)) (begin (display '"/" jO869@p) (for-each (lambda (jO872@c) (if (or (char<=? '#\a jO872@c '#\z) (char<=? '#\A jO872@c '#\Z) (char<=? '#\0 jO872@c '#\9) (memv jO872@c '(#\- #\. #\_ #\~))) (display jO872@c jO869@p) (begin (display '"%" jO869@p) (let ((jO874@n (char->integer jO872@c))) (begin (jO86d@display-hex (quotient jO874@n '16)) (jO86d@display-hex (remainder jO874@n '16))))))) (string->list (symbol->string (car jO86e@ls)))) (jO870@f (cdr jO86e@ls))) (void))) (jO868@extract)))))))) (set! jO97d@jO7bb@library-name->file-name jO7bb@library-name->file-name) (set! jO7bd@file-locator (jO6c1@jO59f@make-parameter (lambda (jO878@x) (let ((jO87a@str (jO7bb@library-name->file-name jO878@x))) (let jO882@f ((jO87c@ls (jO7b7@library-path)) (jO87d@exts (jO7b9@library-extensions)) (jO87e@failed-list '())) (if (null? jO87c@ls) (letrec* ((jO88c@jO887 (make-record-type-descriptor '&library-resolution &condition-rtd 'jO88a '#f '#f '#((immutable library) (immutable files)))) (jO88e@jO889 '#f) (jO890@jO888 (make-record-constructor-descriptor jO88c@jO887 &condition-rcd jO88e@jO889)) (jO893@jO886 (record-predicate jO88c@jO887)) (jO895@make-library-resolution-condition (record-constructor jO890@jO888)) (jO897@jO884 (record-accessor jO88c@jO887 '0)) (jO899@jO885 (record-accessor jO88c@jO887 '1)) (jO89b@library-resolution-condition? (condition-predicate jO88c@jO887)) (jO89d@condition-library (condition-accessor jO88c@jO887 jO897@jO884)) (jO89f@condition-files (condition-accessor jO88c@jO887 jO899@jO885))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (jO895@make-library-resolution-condition jO878@x (reverse jO87e@failed-list))))) (if (null? jO87d@exts) (jO882@f (cdr jO87c@ls) (jO7b9@library-extensions) jO87e@failed-list) (let ((jO8a0@name (string-append (car jO87c@ls) jO87a@str (car jO87d@exts)))) (if (file-exists? jO8a0@name) jO8a0@name (jO882@f jO87c@ls (cdr jO87d@exts) (cons jO8a0@name jO87e@failed-list))))))))) (lambda (jO8a2@f) (if (procedure? jO8a2@f) jO8a2@f (assertion-violation 'file-locator '"not a procedure" jO8a2@f))))) (set! jO97e@jO7bd@file-locator jO7bd@file-locator) (set! jO7bf@serialize-all (lambda (jO8a4@serialize jO8a5@compile) (letrec* ((jO8a9@library-desc (lambda (jO8ac@x) (list (jO779@library-id jO8ac@x) (jO77d@library-name jO8ac@x))))) (for-each (lambda (jO8aa@x) (if (jO7ad@library-source-file-name jO8aa@x) (jO8a4@serialize (jO7ad@library-source-file-name jO8aa@x) (list (jO779@library-id jO8aa@x) (jO77d@library-name jO8aa@x) (jO781@library-version jO8aa@x) (map jO8a9@library-desc (jO785@library-imp* jO8aa@x)) (map jO8a9@library-desc (jO789@library-vis* jO8aa@x)) (map jO8a9@library-desc (jO78d@library-inv* jO8aa@x)) (jO791@library-subst jO8aa@x) (jO795@library-env jO8aa@x) (jO8a5@compile (jO7a1@library-visit-code jO8aa@x)) (jO8a5@compile (jO7a5@library-invoke-code jO8aa@x)) (jO7a9@library-visible? jO8aa@x))) (void))) ((jO76b@current-library-collection)))))) (set! jO97f@jO7bf@serialize-all jO7bf@serialize-all) (set! jO7c1@current-precompiled-library-loader (jO6c1@jO59f@make-parameter (lambda (jO8ae@filename jO8af@sk) '#f))) (set! jO980@jO7c1@current-precompiled-library-loader jO7c1@current-precompiled-library-loader) (set! jO7c3@try-load-from-file (lambda (jO8b2@filename) ((jO7c1@current-precompiled-library-loader) jO8b2@filename (lambda jO8d8 (let ((jO8d9 (length jO8d8))) (if (= jO8d9 '11) (apply (lambda (jO8b4@id jO8b5@name jO8b6@ver jO8b7@imp* jO8b8@vis* jO8b9@inv* jO8ba@exp-subst jO8bb@exp-env jO8bc@visit-proc jO8bd@invoke-proc jO8be@visible?) (let jO8cc@f ((jO8ca@deps (append jO8b7@imp* jO8b8@vis* jO8b9@inv*))) (if (null? jO8ca@deps) (begin (jO7d7@install-library jO8b4@id jO8b5@name jO8b6@ver jO8b7@imp* jO8b8@vis* jO8b9@inv* jO8ba@exp-subst jO8bb@exp-env jO8bc@visit-proc jO8bd@invoke-proc '#f '#f jO8be@visible? '#f) '#t) (let ((jO8ce@d (car jO8ca@deps))) (let ((jO8d0@label (car jO8ce@d)) (jO8d1@dname (cadr jO8ce@d))) (let ((jO8d4@l (jO7cd@find-library-by-name jO8d1@dname))) (if (and (jO777@library? jO8d4@l) (eq? jO8d0@label (jO779@library-id jO8d4@l))) (jO8cc@f (cdr jO8ca@deps)) (begin (if jO6bb@jO593@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. l=~e label=~e (library-id l)=~e\n" jO8b5@name jO8d1@dname jO8b2@filename jO8d4@l jO8d0@label (jO779@library-id jO8d4@l)) (void)) '#f)))))))) jO8d8) (if (>= jO8d9 '0) (apply (lambda jO8d6@others '#f) jO8d8) (error 'apply '"invalid arg count")))))))) (set! jO981@jO7c3@try-load-from-file jO7c3@try-load-from-file) (set! jO7c5@library-loader (jO6c1@jO59f@make-parameter (lambda (jO8da@x) (let ((jO8dc@file-name ((jO7bd@file-locator) jO8da@x))) (if (not jO8dc@file-name) (assertion-violation '#f '"cannot file library" jO8da@x) (or (jO7c3@try-load-from-file jO8dc@file-name) ((jO7c7@current-library-expander) (jO6c0@jO59d@read-library-source-file jO8dc@file-name) jO8dc@file-name (lambda (jO8de@name) (if (not (fast-equal? jO8de@name jO8da@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (jO8e4@jO8e1 jO8e5@jO8e3) (let ((jO8e8@e jO8e5@jO8e3) (jO8e9@p jO8e4@jO8e1)) (begin (display '"expected to find library " jO8e9@p) (write jO8da@x jO8e9@p) (display '" in file " jO8e9@p) (display jO8dc@file-name jO8e9@p) (display '", found " jO8e9@p) (write jO8de@name jO8e9@p) (display '" instead" jO8e9@p) (jO8e8@e)))))) (void)))))))) (lambda (jO8ec@f) (if (procedure? jO8ec@f) jO8ec@f (assertion-violation 'library-locator '"not a procedure" jO8ec@f))))) (set! jO982@jO7c5@library-loader jO7c5@library-loader) (set! jO7c7@current-library-expander (jO6c1@jO59f@make-parameter (lambda (jO8ee@x) (assertion-violation 'library-expander '"not initialized")) (lambda (jO8f0@f) (if (procedure? jO8f0@f) jO8f0@f (assertion-violation 'library-expander '"not a procedure" jO8f0@f))))) (set! jO983@jO7c7@current-library-expander jO7c7@current-library-expander) (set! jO7c9@external-pending-libraries (jO6c1@jO59f@make-parameter '())) (set! jO984@jO7c9@external-pending-libraries jO7c9@external-pending-libraries) (set! jO7cb@find-external-library (lambda (jO8f2@name) (begin (if (member jO8f2@name (jO7c9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" jO8f2@name) (void)) (let ((jO8f8@jO8f5 jO7c9@external-pending-libraries) (jO8f9@jO8f7 (cons jO8f2@name (jO7c9@external-pending-libraries)))) (let ((jO8fc@swap (lambda () (let ((jO8fe@t (jO8f8@jO8f5))) (begin (jO8f8@jO8f5 jO8f9@jO8f7) (set! jO8f9@jO8f7 jO8fe@t)))))) (dynamic-wind jO8fc@swap (lambda () (begin ((jO7c5@library-loader) jO8f2@name) (or (jO7b5@find-library-by (lambda (jO900@x) (fast-equal? (jO77d@library-name jO900@x) jO8f2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" jO8f2@name)))) jO8fc@swap)))))) (set! jO985@jO7cb@find-external-library jO7cb@find-external-library) (set! jO7cd@find-library-by-name (lambda (jO902@name) (or (jO7b5@find-library-by (lambda (jO904@x) (fast-equal? (jO77d@library-name jO904@x) jO902@name))) (jO7cb@find-external-library jO902@name)))) (set! jO986@jO7cd@find-library-by-name jO7cd@find-library-by-name) (set! jO7cf@library-exists? (lambda (jO906@name) (and (jO7b5@find-library-by (lambda (jO908@x) (fast-equal? (jO77d@library-name jO908@x) jO906@name))) '#t))) (set! jO987@jO7cf@library-exists? jO7cf@library-exists?) (set! jO7d1@find-library-by-spec/die (lambda (jO90a@spec) (let ((jO90c@id (car jO90a@spec))) (or (jO7b5@find-library-by (lambda (jO90e@x) (eq? jO90c@id (jO779@library-id jO90e@x)))) (assertion-violation '#f '"cannot find library with required spec" jO90a@spec))))) (set! jO988@jO7d1@find-library-by-spec/die jO7d1@find-library-by-spec/die) (set! jO7d3@label->binding-table (make-eq-hashtable)) (set! jO989@jO7d3@label->binding-table jO7d3@label->binding-table) (set! jO7d5@install-library-record (lambda (jO910@lib) (begin (let ((jO912@exp-env (jO795@library-env jO910@lib))) (for-each (lambda (jO914@x) (let ((jO916@label (car jO914@x)) (jO917@binding (cdr jO914@x))) (let ((jO91a@binding (let ((jO91c@t (car jO917@binding))) (if (memv jO91c@t '(global)) (cons 'global (cons jO910@lib (cdr jO917@binding))) (if (memv jO91c@t '(global-macro)) (cons 'global-macro (cons jO910@lib (cdr jO917@binding))) (if (memv jO91c@t '(global-macro!)) (cons 'global-macro! (cons jO910@lib (cdr jO917@binding))) jO917@binding)))))) (begin (if (hashtable-ref jO7d3@label->binding-table jO916@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" jO916@label (hashtable-ref jO7d3@label->binding-table jO916@label '#f) jO91a@binding) (exit)) (void)) (hashtable-set! jO7d3@label->binding-table jO916@label jO91a@binding))))) jO912@exp-env)) ((jO76b@current-library-collection) jO910@lib)))) (set! jO98a@jO7d5@install-library-record jO7d5@install-library-record) (set! jO7d7@install-library (lambda (jO91e@id jO91f@name jO920@ver jO921@imp* jO922@vis* jO923@inv* jO924@exp-subst jO925@exp-env jO926@visit-proc jO927@invoke-proc jO928@visit-code jO929@invoke-code jO92a@visible? jO92b@source-file-name) (let ((jO93a@imp-lib* (map jO7d1@find-library-by-spec/die jO921@imp*)) (jO93b@vis-lib* (map jO7d1@find-library-by-spec/die jO922@vis*)) (jO93c@inv-lib* (map jO7d1@find-library-by-spec/die jO923@inv*))) (begin (if (not (and (symbol? jO91e@id) (list? jO91f@name) (list? jO920@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" jO91e@id jO91f@name jO920@ver) (void)) (if (jO7cf@library-exists? jO91f@name) (assertion-violation 'install-library '"library is already installed" jO91f@name) (void)) (let ((jO940@lib (make-simple-struct 'library '15 (list jO91e@id jO91f@name jO920@ver jO93a@imp-lib* jO93b@vis-lib* jO93c@inv-lib* jO924@exp-subst jO925@exp-env jO926@visit-proc jO927@invoke-proc jO928@visit-code jO929@invoke-code jO92a@visible? jO92b@source-file-name)))) (jO7d5@install-library-record jO940@lib)))))) (set! jO98b@jO7d7@install-library jO7d7@install-library) (set! jO7d9@imported-label->binding (lambda (jO942@lab) (hashtable-ref jO7d3@label->binding-table jO942@lab '#f))) (set! jO98c@jO7d9@imported-label->binding jO7d9@imported-label->binding) (set! jO7db@invoke-library (lambda (jO944@lib) (let ((jO946@invoke (jO79d@library-invoke-state jO944@lib))) (if (procedure? jO946@invoke) (begin (jO79f@set-library-invoke-state! jO944@lib (lambda () (assertion-violation 'invoke '"circularity detected" jO944@lib))) (for-each jO7db@invoke-library (jO78d@library-inv* jO944@lib)) (jO79f@set-library-invoke-state! jO944@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" jO944@lib))) (jO946@invoke) (jO79f@set-library-invoke-state! jO944@lib '#t)) (void))))) (set! jO98d@jO7db@invoke-library jO7db@invoke-library) (set! jO7dd@visit-library (lambda (jO948@lib) (let ((jO94a@visit (jO799@library-visit-state jO948@lib))) (if (procedure? jO94a@visit) (begin (jO79b@set-library-visit-state! jO948@lib (lambda () (assertion-violation 'visit '"circularity detected" jO948@lib))) (for-each jO7db@invoke-library (jO789@library-vis* jO948@lib)) (jO79b@set-library-visit-state! jO948@lib (lambda () (assertion-violation 'invoke '"first visit did not return" jO948@lib))) (jO94a@visit) (jO79b@set-library-visit-state! jO948@lib '#t)) (void))))) (set! jO98e@jO7dd@visit-library jO7dd@visit-library) (set! jO7df@invoke-library-by-spec (lambda (jO94c@spec) (jO7db@invoke-library (jO7d1@find-library-by-spec/die jO94c@spec)))) (set! jO98f@jO7df@invoke-library-by-spec jO7df@invoke-library-by-spec) (set! jO7e1@installed-libraries (lambda jO954 (let ((jO955 (length jO954))) (if (= jO955 '1) (apply (lambda (jO94e@all?) (let jO952@f ((jO950@ls ((jO76b@current-library-collection)))) (if (null? jO950@ls) '() (if (or jO94e@all? (jO7a9@library-visible? (car jO950@ls))) (cons (car jO950@ls) (jO952@f (cdr jO950@ls))) (jO952@f (cdr jO950@ls)))))) jO954) (if (= jO955 '0) (apply (lambda () (jO7e1@installed-libraries '#f)) jO954) (error 'apply '"invalid arg count")))))) (set! jO990@jO7e1@installed-libraries jO7e1@installed-libraries) (set! jO7e3@library-spec (lambda (jO956@x) (begin (if (not (jO777@library? jO956@x)) (assertion-violation 'library-spec '"not a library" jO956@x) (void)) (list (jO779@library-id jO956@x) (jO77d@library-name jO956@x) (jO781@library-version jO956@x))))) (set! jO991@jO7e3@library-spec jO7e3@library-spec) (void))
(begin (set! jO995@build-global-define (unspecified)) (set! jOa06@build-lambda (unspecified)) (set! jOa08@build-case-lambda (unspecified)) (set! jOa36@build-sequence (unspecified)) (set! jOa38@build-void (unspecified)) (set! jOa3a@build-letrec (unspecified)) (set! jOa3c@build-let (unspecified)) (set! jOa3e@build-named-let (unspecified)) (set! jOa40@build-letrec* (unspecified)) (set! jOa42@build-library-letrec* (unspecified)) (set! jOa44@build-receive (unspecified)) (set! jO995@build-global-define (lambda (jOa45@x) (jOa38@build-void))) (set! jOad3@jO995@build-global-define jO995@build-global-define) (set! jOa06@build-lambda (lambda (jOa47@ae jOa48@vars jOa49@exp) (list 'lambda jOa48@vars jOa49@exp))) (set! jOad4@jOa06@build-lambda jOa06@build-lambda) (set! jOa08@build-case-lambda (lambda (jOa4d@ae jOa4e@vars* jOa4f@exp*) (letrec* ((jOa54@build-error (lambda (jOa8b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (jOa56@build-pred (lambda (jOa73@ae jOa74@n jOa75@vars) (call-with-values (lambda () (let jOa81@f ((jOa7d@vars jOa75@vars) (jOa7e@count '0)) (if (pair? jOa7d@vars) (jOa81@f (cdr jOa7d@vars) (+ jOa7e@count '1)) (if (null? jOa7d@vars) (values jOa7e@count '=) (values jOa7e@count '>=))))) (lambda (jOa83@jOa7a jOa84@jOa7c) (let ((jOa87@pred jOa84@jOa7c) (jOa88@count jOa83@jOa7a)) (list (list 'primitive jOa87@pred) jOa74@n (list 'quote jOa88@count))))))) (jOa58@build-apply (lambda (jOa6b@ae jOa6c@g jOa6d@vars jOa6e@exp) (list '(primitive apply) (jOa06@build-lambda jOa6b@ae jOa6d@vars jOa6e@exp) jOa6c@g))) (jOa5a@expand-case-lambda (lambda (jOa5b@ae jOa5c@vars jOa5d@exp*) (let ((jOa61@g (gensym)) (jOa62@n (gensym))) (list 'lambda jOa61@g (jOa3c@build-let jOa5b@ae (list jOa62@n) (list (list '(primitive length) jOa61@g)) (let jOa69@f ((jOa65@vars* jOa4e@vars*) (jOa66@exp* jOa5d@exp*)) (if (null? jOa65@vars*) (jOa54@build-error jOa5b@ae) (list 'if (jOa56@build-pred jOa5b@ae jOa62@n (car jOa65@vars*)) (jOa58@build-apply jOa5b@ae jOa61@g (car jOa65@vars*) (car jOa66@exp*)) (jOa69@f (cdr jOa65@vars*) (cdr jOa66@exp*))))))))))) (if (= (length jOa4f@exp*) '1) (jOa06@build-lambda jOa4d@ae (car jOa4e@vars*) (car jOa4f@exp*)) (jOa5a@expand-case-lambda jOa4d@ae jOa4e@vars* jOa4f@exp*))))) (set! jOad5@jOa08@build-case-lambda jOa08@build-case-lambda) (set! jOa36@build-sequence (lambda (jOa8d@ae jOa8e@exps) (let jOa93@loop ((jOa91@exps jOa8e@exps)) (if (null? (cdr jOa91@exps)) (car jOa91@exps) (if (equal? (car jOa91@exps) (jOa38@build-void)) (jOa93@loop (cdr jOa91@exps)) (cons 'begin jOa91@exps)))))) (set! jOad6@jOa36@build-sequence jOa36@build-sequence) (set! jOa38@build-void (lambda () '((primitive void)))) (set! jOad7@jOa38@build-void jOa38@build-void) (set! jOa3a@build-letrec (lambda (jOa95@ae jOa96@vars jOa97@val-exps jOa98@body-exp) (if (null? jOa96@vars) jOa98@body-exp (list 'letrec (map list jOa96@vars jOa97@val-exps) jOa98@body-exp)))) (set! jOad8@jOa3a@build-letrec jOa3a@build-letrec) (set! jOa3c@build-let (lambda (jOa9d@ae jOa9e@vars jOa9f@val-exps jOaa0@body-exp) (if (null? jOa9e@vars) jOaa0@body-exp (list 'let (map list jOa9e@vars jOa9f@val-exps) jOaa0@body-exp)))) (set! jOad9@jOa3c@build-let jOa3c@build-let) (set! jOa3e@build-named-let (lambda (jOaa5@ae jOaa6@name jOaa7@vars jOaa8@val-exps jOaa9@body-exp) (list 'let jOaa6@name (map list jOaa7@vars jOaa8@val-exps) jOaa9@body-exp))) (set! jOada@jOa3e@build-named-let jOa3e@build-named-let) (set! jOa40@build-letrec* (lambda (jOaaf@ae jOab0@vars jOab1@val-exps jOab2@body-exp) (if (null? jOab0@vars) jOab2@body-exp (list 'letrec* (map list jOab0@vars jOab1@val-exps) jOab2@body-exp)))) (set! jOadb@jOa40@build-letrec* jOa40@build-letrec*) (set! jOa42@build-library-letrec* (lambda (jOab7@ae jOab8@name jOab9@vars jOaba@locs jOabb@val-exps jOabc@body-exp) (cons 'begin (append (map (lambda (jOac3@var) (cons 'set! (cons jOac3@var '((unspecified))))) jOab9@vars) (append (apply append (map (lambda (jOac5@var jOac6@loc jOac7@val-exp) (list (list 'set! jOac5@var jOac7@val-exp) (list 'set! jOac6@loc jOac5@var))) jOab9@vars jOaba@locs jOabb@val-exps)) (list jOabc@body-exp)))))) (set! jOadc@jOa42@build-library-letrec* jOa42@build-library-letrec*) (set! jOa44@build-receive (lambda (jOacb@ae jOacc@vars jOacd@producer jOace@body*) (begin (display '"************** in ") (cons 'receive (cons jOacc@vars (cons jOacd@producer jOace@body*)))))) (set! jOadd@jOa44@build-receive jOa44@build-receive) (void))
(begin (set! jOaec@file-options-macro (unspecified)) (set! jOaee@set-cons (unspecified)) (set! jOaf0@set-union (unspecified)) (set! jOaf5@top-mark* (unspecified)) (set! jOaf7@top-marked? (unspecified)) (set! jOaf9@gen-lexical (unspecified)) (set! jOafb@gen-global (unspecified)) (set! jOafd@gen-label (unspecified)) (set! jOaff@gen-top-level-label (unspecified)) (set! jOb01@gen-define-label+loc (unspecified)) (set! jOb03@gen-define-label (unspecified)) (set! jOb0d@rib? (unspecified)) (set! jOb0f@rib-sym* (unspecified)) (set! jOb11@set-rib-sym*! (unspecified)) (set! jOb13@rib-mark** (unspecified)) (set! jOb15@set-rib-mark**! (unspecified)) (set! jOb17@rib-label* (unspecified)) (set! jOb19@set-rib-label*! (unspecified)) (set! jOb1b@rib-sealed/freq (unspecified)) (set! jOb1d@set-rib-sealed/freq! (unspecified)) (set! jOb1f@rib-cache (unspecified)) (set! jOb21@set-rib-cache! (unspecified)) (set! jOb23@dummy (unspecified)) (set! jOb25@make-empty-rib (unspecified)) (set! jOb27@extend-rib! (unspecified)) (set! jOb29@extend-rib/nc! (unspecified)) (set! jOb2b@make-rib-map (unspecified)) (set! jOb2d@seal-rib! (unspecified)) (set! jOb2f@unseal-rib! (unspecified)) (set! jOb31@make-full-rib (unspecified)) (set! jOb33@rp (unspecified)) (set! jOb3d@stx? (unspecified)) (set! jOb3f@stx-expr (unspecified)) (set! jOb41@set-stx-expr! (unspecified)) (set! jOb43@stx-mark* (unspecified)) (set! jOb45@set-stx-mark*! (unspecified)) (set! jOb47@stx-subst* (unspecified)) (set! jOb49@set-stx-subst*! (unspecified)) (set! jOb4b@stx-ae* (unspecified)) (set! jOb4d@set-stx-ae*! (unspecified)) (set! jOb4f@dummy (unspecified)) (set! jOb51@datum->stx (unspecified)) (set! jOb53@gen-mark (unspecified)) (set! jOb55@anti-mark (unspecified)) (set! jOb57@anti-mark? (unspecified)) (set! jOb59@mkstx (unspecified)) (set! jOb5b@add-mark (unspecified)) (set! jOb5d@add-subst (unspecified)) (set! jOb5f@syntax-kind? (unspecified)) (set! jOb61@syntax-vector->list (unspecified)) (set! jOb63@syntax-pair? (unspecified)) (set! jOb65@syntax-vector? (unspecified)) (set! jOb67@syntax-null? (unspecified)) (set! jOb69@syntax-list? (unspecified)) (set! jOb6b@syntax-car (unspecified)) (set! jOb6d@syntax-cdr (unspecified)) (set! jOb6f@syntax->list (unspecified)) (set! jOb71@id? (unspecified)) (set! jOb73@id->sym (unspecified)) (set! jOb75@bound-id=? (unspecified)) (set! jOb77@free-id=? (unspecified)) (set! jOb79@valid-bound-ids? (unspecified)) (set! jOb7b@distinct-bound-ids? (unspecified)) (set! jOb7d@bound-id-member? (unspecified)) (set! jOb7f@self-evaluating? (unspecified)) (set! jOb81@strip-annotations (unspecified)) (set! jOb83@strip (unspecified)) (set! jOb85@stx->datum (unspecified)) (set! jOb87@id->label (unspecified)) (set! jOb89@label->binding (unspecified)) (set! jOb8b@make-binding (unspecified)) (set! jOb8d@binding-type (unspecified)) (set! jOb8f@binding-value (unspecified)) (set! jOb91@raise-unbound-error (unspecified)) (set! jOb93@syntax-type (unspecified)) (set! jOba1@sanitize-binding (unspecified)) (set! jOba3@make-variable-transformer (unspecified)) (set! jOba5@variable-transformer? (unspecified)) (set! jOba7@variable-transformer-procedure (unspecified)) (set! jOba9@make-eval-transformer (unspecified)) (set! jOcfa@parse-define (unspecified)) (set! jOcfc@parse-define-syntax (unspecified)) (set! jOcfe@scheme-stx-hashtable (unspecified)) (set! jOd00@scheme-stx (unspecified)) (set! jOd02@lexical-var (unspecified)) (set! jOd04@lexical-mutable? (unspecified)) (set! jOd06@set-lexical-mutable! (unspecified)) (set! jOd08@add-lexical (unspecified)) (set! jOd0a@add-lexicals (unspecified)) (set! jOd0c@letrec-helper (unspecified)) (set! jOd0e@let-transformer (unspecified)) (set! jOd10@letrec-transformer (unspecified)) (set! jOd12@letrec*-transformer (unspecified)) (set! jOd14@fluid-let-syntax-transformer (unspecified)) (set! jOd16@type-descriptor-transformer (unspecified)) (set! jOd18@record-type-descriptor-transformer (unspecified)) (set! jOd1a@record-constructor-descriptor-transformer (unspecified)) (set! jOd1c@when-macro (unspecified)) (set! jOd1e@unless-macro (unspecified)) (set! jOd20@if-transformer (unspecified)) (set! jOd22@and-transformer (unspecified)) (set! jOd24@or-transformer (unspecified)) (set! jOd26@case-macro (unspecified)) (set! jOd28@quote-transformer (unspecified)) (set! jOd2a@case-lambda-transformer (unspecified)) (set! jOd2c@lambda-transformer (unspecified)) (set! jOd2e@bless (unspecified)) (set! jOd30@with-syntax-macro (unspecified)) (set! jOd32@invalid-fmls-error (unspecified)) (set! jOd34@let-macro (unspecified)) (set! jOd36@let-values-macro (unspecified)) (set! jOd38@let*-values-macro (unspecified)) (set! jOd3a@trace-lambda-macro (unspecified)) (set! jOd3c@trace-define-macro (unspecified)) (set! jOd3e@trace-define-syntax-macro (unspecified)) (set! jOd40@trace-let/rec-syntax (unspecified)) (set! jOd42@trace-let-syntax-macro (unspecified)) (set! jOd44@trace-letrec-syntax-macro (unspecified)) (set! jOd46@guard-macro (unspecified)) (set! jOd48@define-enumeration-macro (unspecified)) (set! jOd4a@time-macro (unspecified)) (set! jOd4c@delay-macro (unspecified)) (set! jOd4e@assert-macro (unspecified)) (set! jOd50@endianness-macro (unspecified)) (set! jOd52@identifier-syntax-macro (unspecified)) (set! jOd54@do-macro (unspecified)) (set! jOd56@let*-macro (unspecified)) (set! jOd58@or-macro (unspecified)) (set! jOd5a@and-macro (unspecified)) (set! jOd5c@cond-macro (unspecified)) (set! jOd5e@do-include (unspecified)) (set! jOd60@include-macro (unspecified)) (set! jOd62@include-into-macro (unspecified)) (set! jOd64@syntax-rules-macro (unspecified)) (set! jOd66@quasiquote-macro (unspecified)) (set! jOd68@quasisyntax-macro (unspecified)) (set! jOd6a@define-struct-macro (unspecified)) (set! jOd6c@define-record-type-macro (unspecified)) (set! jOd6e@define-condition-type-macro (unspecified)) (set! jOd70@incorrect-usage-macro (unspecified)) (set! jOd72@parameterize-macro (unspecified)) (set! jOd74@foreign-call-transformer (unspecified)) (set! jOd76@convert-pattern (unspecified)) (set! jOd78@syntax-dispatch (unspecified)) (set! jOd7a@ellipsis? (unspecified)) (set! jOd7c@underscore? (unspecified)) (set! jOd7e@verify-literals (unspecified)) (set! jOd80@syntax-case-transformer (unspecified)) (set! jOd82@ellipsis-map (unspecified)) (set! jOd84@syntax-transformer (unspecified)) (set! jOd86@core-macro-transformer (unspecified)) (set! jOd88@symbol-macro (unspecified)) (set! jOd8a@macro-transformer (unspecified)) (set! jOd8c@local-macro-transformer (unspecified)) (set! jOd8e@do-macro-call (unspecified)) (set! jOd90@chi-macro (unspecified)) (set! jOd92@chi-local-macro (unspecified)) (set! jOd94@chi-global-macro (unspecified)) (set! jOd96@chi-expr* (unspecified)) (set! jOd98@chi-application (unspecified)) (set! jOd9a@chi-expr (unspecified)) (set! jOd9c@chi-set! (unspecified)) (set! jOd9e@verify-formals (unspecified)) (set! jOda0@chi-lambda-clause (unspecified)) (set! jOda2@chi-lambda-clause* (unspecified)) (set! jOda4@chi-defun (unspecified)) (set! jOda6@chi-rhs (unspecified)) (set! jOda8@expand-interaction-rhs*/init* (unspecified)) (set! jOdaa@chi-rhs* (unspecified)) (set! jOdac@find-bound=? (unspecified)) (set! jOdae@find-dups (unspecified)) (set! jOdb0@chi-internal (unspecified)) (set! jOdb2@parse-module (unspecified)) (set! jOdbc@module-interface? (unspecified)) (set! jOdbe@module-interface-first-mark (unspecified)) (set! jOdc0@set-module-interface-first-mark! (unspecified)) (set! jOdc2@module-interface-exp-id-vec (unspecified)) (set! jOdc4@set-module-interface-exp-id-vec! (unspecified)) (set! jOdc6@module-interface-exp-lab-vec (unspecified)) (set! jOdc8@set-module-interface-exp-lab-vec! (unspecified)) (set! jOdca@dummy (unspecified)) (set! jOdcc@module-interface-exp-id* (unspecified)) (set! jOdce@chi-internal-module (unspecified)) (set! jOdd0@chi-body* (unspecified)) (set! jOdd2@expand-transformer (unspecified)) (set! jOdd4@parse-exports (unspecified)) (set! jOdd6@parse-library-name (unspecified)) (set! jOdd8@parse-library (unspecified)) (set! jOdda@parse-import-spec* (unspecified)) (set! jOddc@make-top-rib (unspecified)) (set! jOdde@make-collector (unspecified)) (set! jOde0@inv-collector (unspecified)) (set! jOde2@vis-collector (unspecified)) (set! jOde4@imp-collector (unspecified)) (set! jOde6@chi-library-internal (unspecified)) (set! jOde8@chi-interaction-expr (unspecified)) (set! jOdea@library-body-expander (unspecified)) (set! jOdec@core-library-expander (unspecified)) (set! jOdee@parse-top-level-program (unspecified)) (set! jOdf0@top-level-expander (unspecified)) (set! jOdf2@rp (unspecified)) (set! jOdfc@env? (unspecified)) (set! jOdfe@env-names (unspecified)) (set! jOe00@set-env-names! (unspecified)) (set! jOe02@env-labels (unspecified)) (set! jOe04@set-env-labels! (unspecified)) (set! jOe06@env-itc (unspecified)) (set! jOe08@set-env-itc! (unspecified)) (set! jOe0a@dummy (unspecified)) (set! jOe0c@rp (unspecified)) (set! jOe16@interaction-env? (unspecified)) (set! jOe18@interaction-env-rib (unspecified)) (set! jOe1a@set-interaction-env-rib! (unspecified)) (set! jOe1c@interaction-env-r (unspecified)) (set! jOe1e@set-interaction-env-r! (unspecified)) (set! jOe20@interaction-env-locs (unspecified)) (set! jOe22@set-interaction-env-locs! (unspecified)) (set! jOe24@dummy (unspecified)) (set! jOe26@interaction-environment-symbols (unspecified)) (set! jOe28@environment-bindings (unspecified)) (set! jOe2a@parse-binding (unspecified)) (set! jOe2c@environment? (unspecified)) (set! jOe2e@environment-symbols (unspecified)) (set! jOe30@environment (unspecified)) (set! jOe32@null-environment (unspecified)) (set! jOe34@scheme-report-environment (unspecified)) (set! jOe36@expand (unspecified)) (set! jOe38@eval (unspecified)) (set! jOe3a@library-expander (unspecified)) (set! jOe3c@boot-library-expand (unspecified)) (set! jOe3e@rev-map-append (unspecified)) (set! jOe40@build-exports (unspecified)) (set! jOe42@make-export-subst (unspecified)) (set! jOe44@make-export-env/macros (unspecified)) (set! jOe46@generate-temporaries (unspecified)) (set! jOe48@free-identifier=? (unspecified)) (set! jOe4a@bound-identifier=? (unspecified)) (set! jOe4c@make-source-condition (unspecified)) (set! jOe4e@extract-position-condition (unspecified)) (set! jOe50@expression-position (unspecified)) (set! jOe52@assertion-error (unspecified)) (set! jOe54@syntax-error (unspecified)) (set! jOe56@syntax-violation* (unspecified)) (set! jOe58@syntax-violation (unspecified)) (set! jOe5a@identifier? (unspecified)) (set! jOe5c@datum->syntax (unspecified)) (set! jOe5e@syntax->datum (unspecified)) (set! jOe60@ungensym-all (unspecified)) (set! jOe62@compile-r6rs-top-level (unspecified)) (set! jOe64@pre-compile-r6rs-top-level (unspecified)) (set! jOe66@interaction-environment (unspecified)) (set! jOe68@top-level-context (unspecified)) (set! jOaec@file-options-macro (lambda (jOe69@x) (letrec* ((jOe6c@valid-option? (lambda (jOe75@x) (and (jOb71@id? jOe75@x) (memq (jOb73@id->sym jOe75@x) '(no-fail no-create no-truncate)))))) (let ((jOe6d@t jOe69@x)) (let ((jOe6f@ls/false (jOd78@syntax-dispatch jOe6d@t '(_ . each-any)))) (if (and jOe6f@ls/false (apply (lambda (jOe71@opt*) (for-all jOe6c@valid-option? jOe71@opt*)) jOe6f@ls/false)) (apply (lambda (jOe73@opt*) (jOd2e@bless (list 'make-file-options (list 'quote jOe73@opt*)))) jOe6f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jOe6d@t))))))) (set! jO27bf@jOaec@file-options-macro jOaec@file-options-macro) (set! jOaee@set-cons (lambda (jOe77@x jOe78@ls) (if (memq jOe77@x jOe78@ls) jOe78@ls (cons jOe77@x jOe78@ls)))) (set! jO27c0@jOaee@set-cons jOaee@set-cons) (set! jOaf0@set-union (lambda (jOe7b@ls1 jOe7c@ls2) (if (null? jOe7b@ls1) jOe7c@ls2 (if (memq (car jOe7b@ls1) jOe7c@ls2) (jOaf0@set-union (cdr jOe7b@ls1) jOe7c@ls2) (cons (car jOe7b@ls1) (jOaf0@set-union (cdr jOe7b@ls1) jOe7c@ls2)))))) (set! jO27c1@jOaf0@set-union jOaf0@set-union) (set! jOaf5@top-mark* '(top)) (set! jO27c2@jOaf5@top-mark* jOaf5@top-mark*) (set! jOaf7@top-marked? (lambda (jOe7f@m*) (memq 'top jOe7f@m*))) (set! jO27c3@jOaf7@top-marked? jOaf7@top-marked?) (set! jOaf9@gen-lexical (lambda (jOe81@sym) (if (symbol? jOe81@sym) (gensym jOe81@sym) (if (jOb3d@stx? jOe81@sym) (jOaf9@gen-lexical (jOb73@id->sym jOe81@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" jOe81@sym))))) (set! jO27c4@jOaf9@gen-lexical jOaf9@gen-lexical) (set! jOafb@gen-global (lambda (jOe83@x) (jOaf9@gen-lexical jOe83@x))) (set! jO27c5@jOafb@gen-global jOafb@gen-global) (set! jOafd@gen-label (lambda (jOe85@_) (gensym))) (set! jO27c6@jOafd@gen-label jOafd@gen-label) (set! jOaff@gen-top-level-label (lambda (jOe87@id jOe88@rib) (letrec* ((jOe8c@find (lambda (jOe97@sym jOe98@mark* jOe99@sym* jOe9a@mark** jOe9b@label*) (and (pair? jOe99@sym*) (if (and (eq? jOe97@sym (car jOe99@sym*)) (same-marks? jOe98@mark* (car jOe9a@mark**))) (car jOe9b@label*) (jOe8c@find jOe97@sym jOe98@mark* (cdr jOe99@sym*) (cdr jOe9a@mark**) (cdr jOe9b@label*))))))) (let ((jOe8d@sym (jOb73@id->sym jOe87@id)) (jOe8e@mark* (jOb43@stx-mark* jOe87@id))) (let ((jOe91@sym* (jOb0f@rib-sym* jOe88@rib))) (let ((jOe93@t (and (memq jOe8d@sym (jOb0f@rib-sym* jOe88@rib)) (jOe8c@find jOe8d@sym jOe8e@mark* jOe91@sym* (jOb13@rib-mark** jOe88@rib) (jOb17@rib-label* jOe88@rib))))) (if jOe93@t ((lambda (jOe95@label) (if (jO98c@jO7d9@imported-label->binding jOe95@label) (gensym) jOe95@label)) jOe93@t) (gensym)))))))) (set! jO27c7@jOaff@gen-top-level-label jOaff@gen-top-level-label) (set! jOb01@gen-define-label+loc (lambda (jOea1@id jOea2@rib) (let ((jOea5@t (jOe68@top-level-context))) (if jOea5@t ((lambda (jOea7@env) (let ((jOea9@label (jOaff@gen-top-level-label jOea1@id jOea2@rib)) (jOeaa@locs (jOe20@interaction-env-locs jOea7@env))) (values jOea9@label (let ((jOead@t (assq jOea9@label jOeaa@locs))) (if jOead@t (cdr jOead@t) (let ((jOeaf@loc (jOaf9@gen-lexical jOea1@id))) (begin (jOe22@set-interaction-env-locs! jOea7@env (cons (cons jOea9@label jOeaf@loc) jOeaa@locs)) jOeaf@loc))))))) jOea5@t) (values (gensym) (jOaf9@gen-lexical jOea1@id)))))) (set! jO27c8@jOb01@gen-define-label+loc jOb01@gen-define-label+loc) (set! jOb03@gen-define-label (lambda (jOeb1@id jOeb2@rib) (if (jOe68@top-level-context) (jOaff@gen-top-level-label jOeb1@id jOeb2@rib) (gensym)))) (set! jO27c9@jOb03@gen-define-label jOb03@gen-define-label) (set! jOb0d@rib? (lambda (jOeb5@x) (and (simple-struct? jOeb5@x) (eq? (simple-struct-name jOeb5@x) 'rib)))) (set! jO27ca@jOb0d@rib? jOb0d@rib?) (set! jOb0f@rib-sym* (lambda (jOeb7@x) (simple-struct-ref jOeb7@x '0))) (set! jO27cb@jOb0f@rib-sym* jOb0f@rib-sym*) (set! jOb11@set-rib-sym*! (lambda (jOeb9@x jOeba@val) (simple-struct-set! jOeb9@x '0 jOeba@val))) (set! jO27cc@jOb11@set-rib-sym*! jOb11@set-rib-sym*!) (set! jOb13@rib-mark** (lambda (jOebd@x) (simple-struct-ref jOebd@x '1))) (set! jO27cd@jOb13@rib-mark** jOb13@rib-mark**) (set! jOb15@set-rib-mark**! (lambda (jOebf@x jOec0@val) (simple-struct-set! jOebf@x '1 jOec0@val))) (set! jO27ce@jOb15@set-rib-mark**! jOb15@set-rib-mark**!) (set! jOb17@rib-label* (lambda (jOec3@x) (simple-struct-ref jOec3@x '2))) (set! jO27cf@jOb17@rib-label* jOb17@rib-label*) (set! jOb19@set-rib-label*! (lambda (jOec5@x jOec6@val) (simple-struct-set! jOec5@x '2 jOec6@val))) (set! jO27d0@jOb19@set-rib-label*! jOb19@set-rib-label*!) (set! jOb1b@rib-sealed/freq (lambda (jOec9@x) (simple-struct-ref jOec9@x '3))) (set! jO27d1@jOb1b@rib-sealed/freq jOb1b@rib-sealed/freq) (set! jOb1d@set-rib-sealed/freq! (lambda (jOecb@x jOecc@val) (simple-struct-set! jOecb@x '3 jOecc@val))) (set! jO27d2@jOb1d@set-rib-sealed/freq! jOb1d@set-rib-sealed/freq!) (set! jOb1f@rib-cache (lambda (jOecf@x) (simple-struct-ref jOecf@x '4))) (set! jO27d3@jOb1f@rib-cache jOb1f@rib-cache) (set! jOb21@set-rib-cache! (lambda (jOed1@x jOed2@val) (simple-struct-set! jOed1@x '4 jOed2@val))) (set! jO27d4@jOb21@set-rib-cache! jOb21@set-rib-cache!) (set! jOb23@dummy '3) (set! jO27d5@jOb23@dummy jOb23@dummy) (set! jOb25@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jO27d6@jOb25@make-empty-rib jOb25@make-empty-rib) (set! jOb27@extend-rib! (lambda (jOed5@rib jOed6@id jOed7@label) (letrec* ((jOedc@find (lambda (jOee9@sym jOeea@mark* jOeeb@sym* jOeec@mark** jOeed@label*) (and (pair? jOeeb@sym*) (if (and (eq? jOee9@sym (car jOeeb@sym*)) (same-marks? jOeea@mark* (car jOeec@mark**))) jOeed@label* (jOedc@find jOee9@sym jOeea@mark* (cdr jOeeb@sym*) (cdr jOeec@mark**) (cdr jOeed@label*))))))) (begin (if (jOb1b@rib-sealed/freq jOed5@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jOed5@rib) (void)) (let ((jOedd@sym (jOb73@id->sym jOed6@id)) (jOede@mark* (jOb43@stx-mark* jOed6@id))) (let ((jOee1@sym* (jOb0f@rib-sym* jOed5@rib))) (let ((jOee3@t (and (memq jOedd@sym (jOb0f@rib-sym* jOed5@rib)) (jOedc@find jOedd@sym jOede@mark* jOee1@sym* (jOb13@rib-mark** jOed5@rib) (jOb17@rib-label* jOed5@rib))))) (if jOee3@t ((lambda (jOee5@p) (if (not (eq? jOed7@label (car jOee5@p))) (if (jOe68@top-level-context) (set-car! jOee5@p jOed7@label) (jOe58@syntax-violation '#f '"multiple definitions of identifier" jOed6@id)) (void))) jOee3@t) (begin (if (jOb1f@rib-cache jOed5@rib) (hashtable-update! (jOb1f@rib-cache jOed5@rib) jOedd@sym (lambda (jOee7@e) (cons (cons jOede@mark* jOed7@label) jOee7@e)) '()) (void)) (jOb11@set-rib-sym*! jOed5@rib (cons jOedd@sym jOee1@sym*)) (jOb15@set-rib-mark**! jOed5@rib (cons jOede@mark* (jOb13@rib-mark** jOed5@rib))) (jOb19@set-rib-label*! jOed5@rib (cons jOed7@label (jOb17@rib-label* jOed5@rib)))))))))))) (set! jO27d7@jOb27@extend-rib! jOb27@extend-rib!) (set! jOb29@extend-rib/nc! (lambda (jOef3@rib jOef4@id jOef5@label) (let ((jOef9@sym (jOb73@id->sym jOef4@id)) (jOefa@mark* (jOb43@stx-mark* jOef4@id))) (let ((jOefd@sym* (jOb0f@rib-sym* jOef3@rib))) (begin (if (jOb1f@rib-cache jOef3@rib) (hashtable-update! (jOb1f@rib-cache jOef3@rib) jOef9@sym (lambda (jOeff@e) (cons (cons jOefa@mark* jOef5@label) jOeff@e)) '()) (void)) (jOb11@set-rib-sym*! jOef3@rib (cons jOef9@sym jOefd@sym*)) (jOb15@set-rib-mark**! jOef3@rib (cons jOefa@mark* (jOb13@rib-mark** jOef3@rib))) (jOb19@set-rib-label*! jOef3@rib (cons jOef5@label (jOb17@rib-label* jOef3@rib)))))))) (set! jO27d8@jOb29@extend-rib/nc! jOb29@extend-rib/nc!) (set! jOb2b@make-rib-map (lambda (jOf01@sym*) (let ((jOf03@ht (make-eq-hashtable))) (let jOf09@f ((jOf05@i '0) (jOf06@sym* jOf01@sym*)) (if (null? jOf06@sym*) jOf03@ht (begin (hashtable-update! jOf03@ht (car jOf06@sym*) (lambda (jOf0b@x) (cons jOf05@i jOf0b@x)) '()) (jOf09@f (+ jOf05@i '1) (cdr jOf06@sym*)))))))) (set! jO27d9@jOb2b@make-rib-map jOb2b@make-rib-map) (set! jOb2d@seal-rib! (lambda (jOf0d@rib) (let ((jOf0f@sym* (jOb0f@rib-sym* jOf0d@rib))) (if (not (null? jOf0f@sym*)) (begin (jOb11@set-rib-sym*! jOf0d@rib (list->vector jOf0f@sym*)) (jOb15@set-rib-mark**! jOf0d@rib (list->vector (jOb13@rib-mark** jOf0d@rib))) (jOb19@set-rib-label*! jOf0d@rib (list->vector (jOb17@rib-label* jOf0d@rib))) (jOb1d@set-rib-sealed/freq! jOf0d@rib (jOb2b@make-rib-map jOf0f@sym*))) (void))))) (set! jO27da@jOb2d@seal-rib! jOb2d@seal-rib!) (set! jOb2f@unseal-rib! (lambda (jOf11@rib) (if (jOb1b@rib-sealed/freq jOf11@rib) (begin (jOb1d@set-rib-sealed/freq! jOf11@rib '#f) (jOb11@set-rib-sym*! jOf11@rib (vector->list (jOb0f@rib-sym* jOf11@rib))) (jOb15@set-rib-mark**! jOf11@rib (vector->list (jOb13@rib-mark** jOf11@rib))) (jOb19@set-rib-label*! jOf11@rib (vector->list (jOb17@rib-label* jOf11@rib)))) (void)))) (set! jO27db@jOb2f@unseal-rib! jOb2f@unseal-rib!) (set! jOb31@make-full-rib (lambda (jOf13@id* jOf14@label*) (let ((jOf17@r (make-simple-struct 'rib '6 (list (map jOb73@id->sym jOf13@id*) (map jOb43@stx-mark* jOf13@id*) jOf14@label* '#f '#f)))) (begin (jOb2d@seal-rib! jOf17@r) jOf17@r)))) (set! jO27dc@jOb31@make-full-rib jOb31@make-full-rib) (set! jOb33@rp (jO6be@jO599@make-record-printer 'stx (lambda (jOf19@x jOf1a@p jOf1b@wr) (begin (display '"#<syntax " jOf1a@p) (write (jOb85@stx->datum jOf19@x) jOf1a@p) (let ((jOf1f@expr (jOb3f@stx-expr jOf19@x))) (if (jO6b5@jO587@annotation? jOf1f@expr) (let ((jOf21@src (jO6b6@jO589@annotation-source jOf1f@expr))) (if (pair? jOf21@src) (begin (display '" [" jOf1a@p) (display (cdr jOf21@src) jOf1a@p) (display '" of " jOf1a@p) (display (car jOf21@src) jOf1a@p) (display '"]" jOf1a@p)) (void))) (void))) (display '">" jOf1a@p))))) (set! jO27dd@jOb33@rp jOb33@rp) (set! jOb3d@stx? (lambda (jOf23@x) (and (simple-struct? jOf23@x) (eq? (simple-struct-name jOf23@x) 'stx)))) (set! jO27de@jOb3d@stx? jOb3d@stx?) (set! jOb3f@stx-expr (lambda (jOf25@x) (simple-struct-ref jOf25@x '0))) (set! jO27df@jOb3f@stx-expr jOb3f@stx-expr) (set! jOb41@set-stx-expr! (lambda (jOf27@x jOf28@val) (simple-struct-set! jOf27@x '0 jOf28@val))) (set! jO27e0@jOb41@set-stx-expr! jOb41@set-stx-expr!) (set! jOb43@stx-mark* (lambda (jOf2b@x) (simple-struct-ref jOf2b@x '1))) (set! jO27e1@jOb43@stx-mark* jOb43@stx-mark*) (set! jOb45@set-stx-mark*! (lambda (jOf2d@x jOf2e@val) (simple-struct-set! jOf2d@x '1 jOf2e@val))) (set! jO27e2@jOb45@set-stx-mark*! jOb45@set-stx-mark*!) (set! jOb47@stx-subst* (lambda (jOf31@x) (simple-struct-ref jOf31@x '2))) (set! jO27e3@jOb47@stx-subst* jOb47@stx-subst*) (set! jOb49@set-stx-subst*! (lambda (jOf33@x jOf34@val) (simple-struct-set! jOf33@x '2 jOf34@val))) (set! jO27e4@jOb49@set-stx-subst*! jOb49@set-stx-subst*!) (set! jOb4b@stx-ae* (lambda (jOf37@x) (simple-struct-ref jOf37@x '3))) (set! jO27e5@jOb4b@stx-ae* jOb4b@stx-ae*) (set! jOb4d@set-stx-ae*! (lambda (jOf39@x jOf3a@val) (simple-struct-set! jOf39@x '3 jOf3a@val))) (set! jO27e6@jOb4d@set-stx-ae*! jOb4d@set-stx-ae*!) (set! jOb4f@dummy '3) (set! jO27e7@jOb4f@dummy jOb4f@dummy) (set! jOb51@datum->stx (lambda (jOf3d@id jOf3e@datum) (make-simple-struct 'stx '5 (list jOf3e@datum (jOb43@stx-mark* jOf3d@id) (jOb47@stx-subst* jOf3d@id) (jOb4b@stx-ae* jOf3d@id))))) (set! jO27e8@jOb51@datum->stx jOb51@datum->stx) (set! jOb53@gen-mark (lambda () (string '#\m))) (set! jO27e9@jOb53@gen-mark jOb53@gen-mark) (set! jOb55@anti-mark '#f) (set! jO27ea@jOb55@anti-mark jOb55@anti-mark) (set! jOb57@anti-mark? not) (set! jO27eb@jOb57@anti-mark? jOb57@anti-mark?) (set! jOb59@mkstx (lambda (jOf41@e jOf42@m* jOf43@s* jOf44@ae*) (if (and (jOb3d@stx? jOf41@e) (not (jOaf7@top-marked? jOf42@m*))) (call-with-values (lambda () (join-wraps jOf42@m* jOf43@s* jOf44@ae* jOf41@e)) (lambda (jOf4f@jOf4a jOf50@jOf4c jOf51@jOf4e) (let ((jOf55@ae* jOf51@jOf4e) (jOf56@s* jOf50@jOf4c) (jOf57@m* jOf4f@jOf4a)) (make-simple-struct 'stx '5 (list (jOb3f@stx-expr jOf41@e) jOf57@m* jOf56@s* jOf55@ae*))))) (make-simple-struct 'stx '5 (list jOf41@e jOf42@m* jOf43@s* jOf44@ae*))))) (set! jO27ec@jOb59@mkstx jOb59@mkstx) (set! jOb5b@add-mark (lambda (jOf5b@m jOf5c@e jOf5d@ae) (jOb59@mkstx jOf5c@e (list jOf5b@m) '(shift) (list jOf5d@ae)))) (set! jO27ed@jOb5b@add-mark jOb5b@add-mark) (set! jOb5d@add-subst (lambda (jOf61@subst jOf62@e) (jOb59@mkstx jOf62@e '() (list jOf61@subst) '()))) (set! jO27ee@jOb5d@add-subst jOb5d@add-subst) (set! jOb5f@syntax-kind? (lambda (jOf65@x jOf66@p?) (if (jOb3d@stx? jOf65@x) (jOb5f@syntax-kind? (jOb3f@stx-expr jOf65@x) jOf66@p?) (if (jO6b5@jO587@annotation? jOf65@x) (jOb5f@syntax-kind? (jO6b7@jO58b@annotation-expression jOf65@x) jOf66@p?) (jOf66@p? jOf65@x))))) (set! jO27ef@jOb5f@syntax-kind? jOb5f@syntax-kind?) (set! jOb61@syntax-vector->list (lambda (jOf69@x) (if (jOb3d@stx? jOf69@x) (let ((jOf6b@ls (jOb61@syntax-vector->list (jOb3f@stx-expr jOf69@x))) (jOf6c@m* (jOb43@stx-mark* jOf69@x)) (jOf6d@s* (jOb47@stx-subst* jOf69@x)) (jOf6e@ae* (jOb4b@stx-ae* jOf69@x))) (map (lambda (jOf73@x) (jOb59@mkstx jOf73@x jOf6c@m* jOf6d@s* jOf6e@ae*)) jOf6b@ls)) (if (jO6b5@jO587@annotation? jOf69@x) (jOb61@syntax-vector->list (jO6b7@jO58b@annotation-expression jOf69@x)) (if (vector? jOf69@x) (vector->list jOf69@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jOf69@x)))))) (set! jO27f0@jOb61@syntax-vector->list jOb61@syntax-vector->list) (set! jOb63@syntax-pair? (lambda (jOf75@x) (jOb5f@syntax-kind? jOf75@x pair?))) (set! jO27f1@jOb63@syntax-pair? jOb63@syntax-pair?) (set! jOb65@syntax-vector? (lambda (jOf77@x) (jOb5f@syntax-kind? jOf77@x vector?))) (set! jO27f2@jOb65@syntax-vector? jOb65@syntax-vector?) (set! jOb67@syntax-null? (lambda (jOf79@x) (jOb5f@syntax-kind? jOf79@x null?))) (set! jO27f3@jOb67@syntax-null? jOb67@syntax-null?) (set! jOb69@syntax-list? (lambda (jOf7b@x) (or (jOb67@syntax-null? jOf7b@x) (and (jOb63@syntax-pair? jOf7b@x) (jOb69@syntax-list? (jOb6d@syntax-cdr jOf7b@x)))))) (set! jO27f4@jOb69@syntax-list? jOb69@syntax-list?) (set! jOb6b@syntax-car (lambda (jOf7d@x) (if (jOb3d@stx? jOf7d@x) (jOb59@mkstx (jOb6b@syntax-car (jOb3f@stx-expr jOf7d@x)) (jOb43@stx-mark* jOf7d@x) (jOb47@stx-subst* jOf7d@x) (jOb4b@stx-ae* jOf7d@x)) (if (jO6b5@jO587@annotation? jOf7d@x) (jOb6b@syntax-car (jO6b7@jO58b@annotation-expression jOf7d@x)) (if (pair? jOf7d@x) (car jOf7d@x) (assertion-violation 'syntax-car '"BUG: not a pair" jOf7d@x)))))) (set! jO27f5@jOb6b@syntax-car jOb6b@syntax-car) (set! jOb6d@syntax-cdr (lambda (jOf7f@x) (if (jOb3d@stx? jOf7f@x) (jOb59@mkstx (jOb6d@syntax-cdr (jOb3f@stx-expr jOf7f@x)) (jOb43@stx-mark* jOf7f@x) (jOb47@stx-subst* jOf7f@x) (jOb4b@stx-ae* jOf7f@x)) (if (jO6b5@jO587@annotation? jOf7f@x) (jOb6d@syntax-cdr (jO6b7@jO58b@annotation-expression jOf7f@x)) (if (pair? jOf7f@x) (cdr jOf7f@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jOf7f@x)))))) (set! jO27f6@jOb6d@syntax-cdr jOb6d@syntax-cdr) (set! jOb6f@syntax->list (lambda (jOf81@x) (if (jOb63@syntax-pair? jOf81@x) (cons (jOb6b@syntax-car jOf81@x) (jOb6f@syntax->list (jOb6d@syntax-cdr jOf81@x))) (if (jOb67@syntax-null? jOf81@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jOf81@x))))) (set! jO27f7@jOb6f@syntax->list jOb6f@syntax->list) (set! jOb71@id? (lambda (jOf83@x) (and (jOb3d@stx? jOf83@x) (symbol? (jOb3f@stx-expr jOf83@x))))) (set! jO27f8@jOb71@id? jOb71@id?) (set! jOb73@id->sym (lambda (jOf85@x) (jOb3f@stx-expr jOf85@x))) (set! jO27f9@jOb73@id->sym jOb73@id->sym) (set! jOb75@bound-id=? (lambda (jOf87@x jOf88@y) (and (eq? (jOb73@id->sym jOf87@x) (jOb73@id->sym jOf88@y)) (same-marks? (jOb43@stx-mark* jOf87@x) (jOb43@stx-mark* jOf88@y))))) (set! jO27fa@jOb75@bound-id=? jOb75@bound-id=?) (set! jOb77@free-id=? (lambda (jOf8b@i jOf8c@j) (let ((jOf8f@t0 (id->real-label jOf8b@i)) (jOf90@t1 (id->real-label jOf8c@j))) (if (or jOf8f@t0 jOf90@t1) (eq? jOf8f@t0 jOf90@t1) (eq? (jOb73@id->sym jOf8b@i) (jOb73@id->sym jOf8c@j)))))) (set! jO27fb@jOb77@free-id=? jOb77@free-id=?) (set! jOb79@valid-bound-ids? (lambda (jOf93@id*) (and (for-all jOb71@id? jOf93@id*) (jOb7b@distinct-bound-ids? jOf93@id*)))) (set! jO27fc@jOb79@valid-bound-ids? jOb79@valid-bound-ids?) (set! jOb7b@distinct-bound-ids? (lambda (jOf95@id*) (or (null? jOf95@id*) (and (not (jOb7d@bound-id-member? (car jOf95@id*) (cdr jOf95@id*))) (jOb7b@distinct-bound-ids? (cdr jOf95@id*)))))) (set! jO27fd@jOb7b@distinct-bound-ids? jOb7b@distinct-bound-ids?) (set! jOb7d@bound-id-member? (lambda (jOf97@id jOf98@id*) (and (pair? jOf98@id*) (or (jOb75@bound-id=? jOf97@id (car jOf98@id*)) (jOb7d@bound-id-member? jOf97@id (cdr jOf98@id*)))))) (set! jO27fe@jOb7d@bound-id-member? jOb7d@bound-id-member?) (set! jOb7f@self-evaluating? (lambda (jOf9b@x) (or (number? jOf9b@x) (string? jOf9b@x) (char? jOf9b@x) (boolean? jOf9b@x) (regexp? jOf9b@x) (bytevector? jOf9b@x)))) (set! jO27ff@jOb7f@self-evaluating? jOb7f@self-evaluating?) (set! jOb81@strip-annotations (lambda (jOf9d@x) (if (pair? jOf9d@x) (cons (jOb81@strip-annotations (car jOf9d@x)) (jOb81@strip-annotations (cdr jOf9d@x))) (if (vector? jOf9d@x) (vector-map jOb81@strip-annotations jOf9d@x) (if (jO6b5@jO587@annotation? jOf9d@x) (jO6b4@jO585@annotation-stripped jOf9d@x) jOf9d@x))))) (set! jO2800@jOb81@strip-annotations jOb81@strip-annotations) (set! jOb83@strip (lambda (jOf9f@x jOfa0@m*) (if (jOaf7@top-marked? jOfa0@m*) (if (or (jO6b5@jO587@annotation? jOf9f@x) (and (pair? jOf9f@x) (jO6b5@jO587@annotation? (car jOf9f@x))) (and (vector? jOf9f@x) (> (vector-length jOf9f@x) '0) (jO6b5@jO587@annotation? (vector-ref jOf9f@x '0)))) (jOb81@strip-annotations jOf9f@x) jOf9f@x) (let jOfa5@f ((jOfa3@x jOf9f@x)) (if (jOb3d@stx? jOfa3@x) (begin (if (pair? (jOb3f@stx-expr jOfa3@x)) (begin (set-source-info! (jOb3f@stx-expr jOfa3@x) '#f) (set-source-info! (cdr (jOb3f@stx-expr jOfa3@x)) '#f) (set-source-info! (car (jOb3f@stx-expr jOfa3@x)) '#f)) (void)) (jOb83@strip (jOb3f@stx-expr jOfa3@x) (jOb43@stx-mark* jOfa3@x))) (if (jO6b5@jO587@annotation? jOfa3@x) (jO6b4@jO585@annotation-stripped jOfa3@x) (if (pair? jOfa3@x) (let ((jOfa7@a (jOfa5@f (car jOfa3@x))) (jOfa8@d (jOfa5@f (cdr jOfa3@x)))) (if (and (eq? jOfa7@a (car jOfa3@x)) (eq? jOfa8@d (cdr jOfa3@x))) jOfa3@x (cons jOfa7@a jOfa8@d))) (if (vector? jOfa3@x) (let ((jOfab@old (vector->list jOfa3@x))) (let ((jOfad@new (map jOfa5@f jOfab@old))) (if (for-all eq? jOfab@old jOfad@new) jOfa3@x (list->vector jOfad@new)))) jOfa3@x)))))))) (set! jO2801@jOb83@strip jOb83@strip) (set! jOb85@stx->datum (lambda (jOfaf@x) (jOb83@strip jOfaf@x '()))) (set! jO2802@jOb85@stx->datum jOb85@stx->datum) (set! jOb87@id->label (lambda (jOfb1@id) (or (id->real-label jOfb1@id) (let ((jOfb3@t (jOe68@top-level-context))) (if jOfb3@t ((lambda (jOfb5@env) (let ((jOfb7@rib (jOe18@interaction-env-rib jOfb5@env))) (call-with-values (lambda () (jOb01@gen-define-label+loc jOfb1@id jOfb7@rib)) (lambda (jOfbd@jOfba jOfbe@jOfbc) (let ((jOfc1@loc_ jOfbe@jOfbc) (jOfc2@lab jOfbd@jOfba)) (begin (jOb27@extend-rib! jOfb7@rib jOfb1@id jOfc2@lab) jOfc2@lab)))))) jOfb3@t) '#f))))) (set! jO2803@jOb87@id->label jOb87@id->label) (set! jOb89@label->binding (lambda (jOfc5@x jOfc6@r) (let ((jOfc9@t (jO98c@jO7d9@imported-label->binding jOfc5@x))) (if jOfc9@t ((lambda (jOfcb@b) (if (and (pair? jOfcb@b) (eq? (car jOfcb@b) '$core-rtd)) (cons '$rtd (map jOd2e@bless (cdr jOfcb@b))) (if (and (pair? jOfcb@b) (eq? (car jOfcb@b) 'global-rtd)) (let ((jOfcd@lib (cadr jOfcb@b)) (jOfce@loc (cddr jOfcb@b))) (cons '$rtd (symbol-value jOfce@loc))) jOfcb@b))) jOfc9@t) (let ((jOfd1@t (assq jOfc5@x jOfc6@r))) (if jOfd1@t (cdr jOfd1@t) (let ((jOfd3@t (jOe68@top-level-context))) (if jOfd3@t ((lambda (jOfd5@env) (let ((jOfd7@t (assq jOfc5@x (jOe20@interaction-env-locs jOfd5@env)))) (if jOfd7@t ((lambda (jOfd9@p) (cons* 'lexical (cdr jOfd9@p) '#f)) jOfd7@t) '(displaced-lexical . #f)))) jOfd3@t) '(displaced-lexical . #f))))))))) (set! jO2804@jOb89@label->binding jOb89@label->binding) (set! jOb8b@make-binding cons) (set! jO2805@jOb8b@make-binding jOb8b@make-binding) (set! jOb8d@binding-type car) (set! jO2806@jOb8d@binding-type jOb8d@binding-type) (set! jOb8f@binding-value cdr) (set! jO2807@jOb8f@binding-value jOb8f@binding-value) (set! jOb91@raise-unbound-error (lambda (jOfdb@id) (jOe56@syntax-violation* '#f '"unbound identifier" jOfdb@id (make-undefined-violation)))) (set! jO2808@jOb91@raise-unbound-error jOb91@raise-unbound-error) (set! jOb93@syntax-type (lambda (jOfdd@e jOfde@r) (if (jOb71@id? jOfdd@e) (let ((jOfe1@id jOfdd@e)) (let ((jOfe3@label (jOb87@id->label jOfe1@id))) (let ((jOfe5@b (jOb89@label->binding jOfe3@label jOfde@r))) (let ((jOfe7@type (jOb8d@binding-type jOfe5@b))) (begin (if (not jOfe3@label) (jOb91@raise-unbound-error jOfe1@id) (void)) (let ((jOfe9@t jOfe7@type)) (if (memv jOfe9@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jOfe7@type (jOb8f@binding-value jOfe5@b) jOfe1@id) (values 'other '#f '#f)))))))) (if (jOb63@syntax-pair? jOfdd@e) (let ((jOfeb@id (jOb6b@syntax-car jOfdd@e))) (if (jOb71@id? jOfeb@id) (let ((jOfed@label (jOb87@id->label jOfeb@id))) (let ((jOfef@b (jOb89@label->binding jOfed@label jOfde@r))) (let ((jOff1@type (jOb8d@binding-type jOfef@b))) (begin (if (not jOfed@label) (jOb91@raise-unbound-error jOfeb@id) (void)) (let ((jOff3@t jOff1@type)) (if (memv jOff3@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jOff1@type (jOb8f@binding-value jOfef@b) jOfeb@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((jOff5@d (jOb85@stx->datum jOfdd@e))) (if (jOb7f@self-evaluating? jOff5@d) (values 'constant jOff5@d '#f) (values 'other '#f '#f))))))) (set! jO2809@jOb93@syntax-type jOb93@syntax-type) (set! jOba1@sanitize-binding (lambda (jOff7@x jOff8@src) (if (procedure? jOff7@x) (cons* 'local-macro jOff7@x jOff8@src) (if (and (pair? jOff7@x) (eq? (car jOff7@x) 'macro!) (procedure? (cdr jOff7@x))) (cons* 'local-macro! (cdr jOff7@x) jOff8@src) (if (and (pair? jOff7@x) (eq? (car jOff7@x) '$rtd)) jOff7@x (assertion-violation 'expand '"invalid transformer" jOff7@x)))))) (set! jO280a@jOba1@sanitize-binding jOba1@sanitize-binding) (set! jOba3@make-variable-transformer (lambda (jOffb@x) (if (procedure? jOffb@x) (cons 'macro! jOffb@x) (assertion-violation 'make-variable-transformer '"not a procedure" jOffb@x)))) (set! jO280b@jOba3@make-variable-transformer jOba3@make-variable-transformer) (set! jOba5@variable-transformer? (lambda (jOffd@x) (and (pair? jOffd@x) (eq? (car jOffd@x) 'macro!) (procedure? (cdr jOffd@x))))) (set! jO280c@jOba5@variable-transformer? jOba5@variable-transformer?) (set! jOba7@variable-transformer-procedure (lambda (jOfff@x) (if (jOba5@variable-transformer? jOfff@x) (cdr jOfff@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jOfff@x)))) (set! jO280d@jOba7@variable-transformer-procedure jOba7@variable-transformer-procedure) (set! jOba9@make-eval-transformer (lambda (jO1001@x) (jOba1@sanitize-binding (eval-core (jO717@jO6cf@expanded->core jO1001@x)) jO1001@x))) (set! jO280e@jOba9@make-eval-transformer jOba9@make-eval-transformer) (set! jOcfa@parse-define (lambda (jO1003@x) (let ((jO1005@t jO1003@x)) (let ((jO1007@ls/false (jOd78@syntax-dispatch jO1005@t '(_ (any . any) any . each-any)))) (if (and jO1007@ls/false (apply (lambda (jO1009@id jO100a@fmls jO100b@b jO100c@b*) (jOb71@id? jO1009@id)) jO1007@ls/false)) (apply (lambda (jO1011@id jO1012@fmls jO1013@b jO1014@b*) (begin (jOd9e@verify-formals jO1012@fmls jO1003@x) (values jO1011@id (cons 'defun (cons jO1012@fmls (cons jO1013@b jO1014@b*)))))) jO1007@ls/false) (let ((jO1019@t jO1005@t)) (let ((jO101b@ls/false (jOd78@syntax-dispatch jO1019@t '(_ any any)))) (if (and jO101b@ls/false (apply (lambda (jO101d@id jO101e@val) (jOb71@id? jO101d@id)) jO101b@ls/false)) (apply (lambda (jO1021@id jO1022@val) (values jO1021@id (cons 'expr jO1022@val))) jO101b@ls/false) (let ((jO1025@t jO1019@t)) (let ((jO1027@ls/false (jOd78@syntax-dispatch jO1025@t '(_ any)))) (if (and jO1027@ls/false (apply (lambda (jO1029@id) (jOb71@id? jO1029@id)) jO1027@ls/false)) (apply (lambda (jO102b@id) (values jO102b@id (cons 'expr (jOd2e@bless '(void))))) jO1027@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1025@t)))))))))))) (set! jO280f@jOcfa@parse-define jOcfa@parse-define) (set! jOcfc@parse-define-syntax (lambda (jO102d@x) (let ((jO102f@t jO102d@x)) (let ((jO1031@ls/false (jOd78@syntax-dispatch jO102f@t '(_ any any)))) (if (and jO1031@ls/false (apply (lambda (jO1033@id jO1034@val) (jOb71@id? jO1033@id)) jO1031@ls/false)) (apply (lambda (jO1037@id jO1038@val) (values jO1037@id jO1038@val)) jO1031@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO102f@t)))))) (set! jO2810@jOcfc@parse-define-syntax jOcfc@parse-define-syntax) (set! jOcfe@scheme-stx-hashtable (make-eq-hashtable)) (set! jO2811@jOcfe@scheme-stx-hashtable jOcfe@scheme-stx-hashtable) (set! jOd00@scheme-stx (lambda (jO103b@sym) (or (hashtable-ref jOcfe@scheme-stx-hashtable jO103b@sym '#f) (let ((jO103d@subst (jO968@jO791@library-subst (jO986@jO7cd@find-library-by-name '(psyntax system $all))))) (let ((jO103f@stx (make-simple-struct 'stx '5 (list jO103b@sym jOaf5@top-mark* '() '())))) (let ((jO1041@stx (let ((jO1043@t (assq jO103b@sym jO103d@subst))) (if jO1043@t ((lambda (jO1045@x) (let ((jO1047@name (car jO1045@x)) (jO1048@label (cdr jO1045@x))) (jOb5d@add-subst (make-simple-struct 'rib '6 (list (list jO1047@name) (list jOaf5@top-mark*) (list jO1048@label) '#f '#f)) jO103f@stx))) jO1043@t) jO103f@stx)))) (begin (hashtable-set! jOcfe@scheme-stx-hashtable jO103b@sym jO1041@stx) jO1041@stx))))))) (set! jO2812@jOd00@scheme-stx jOd00@scheme-stx) (set! jOd02@lexical-var car) (set! jO2813@jOd02@lexical-var jOd02@lexical-var) (set! jOd04@lexical-mutable? cdr) (set! jO2814@jOd04@lexical-mutable? jOd04@lexical-mutable?) (set! jOd06@set-lexical-mutable! set-cdr!) (set! jO2815@jOd06@set-lexical-mutable! jOd06@set-lexical-mutable!) (set! jOd08@add-lexical (lambda (jO104b@lab jO104c@lex jO104d@r) (cons (cons* jO104b@lab 'lexical jO104c@lex '#f) jO104d@r))) (set! jO2816@jOd08@add-lexical jOd08@add-lexical) (set! jOd0a@add-lexicals (lambda (jO1051@lab* jO1052@lex* jO1053@r) (if (null? jO1051@lab*) jO1053@r (jOd0a@add-lexicals (cdr jO1051@lab*) (cdr jO1052@lex*) (jOd08@add-lexical (car jO1051@lab*) (car jO1052@lex*) jO1053@r))))) (set! jO2817@jOd0a@add-lexicals jOd0a@add-lexicals) (set! jOd0c@letrec-helper (lambda (jO1057@e jO1058@r jO1059@mr jO105a@build) (let ((jO105f@t jO1057@e)) (let ((jO1061@ls/false (jOd78@syntax-dispatch jO105f@t '(_ #(each (any any)) any . each-any)))) (if jO1061@ls/false (apply (lambda (jO1063@lhs* jO1064@rhs* jO1065@b jO1066@b*) (if (not (jOb79@valid-bound-ids? jO1063@lhs*)) (jOd32@invalid-fmls-error jO1057@e jO1063@lhs*) (let ((jO106b@lex* (map jOaf9@gen-lexical jO1063@lhs*)) (jO106c@lab* (map jOafd@gen-label jO1063@lhs*))) (let ((jO106f@rib (jOb31@make-full-rib jO1063@lhs* jO106c@lab*)) (jO1070@r (jOd0a@add-lexicals jO106c@lab* jO106b@lex* jO1058@r))) (let ((jO1073@body (jOdb0@chi-internal (jOb5d@add-subst jO106f@rib (cons jO1065@b jO1066@b*)) jO1070@r jO1059@mr)) (jO1074@rhs* (jOd96@chi-expr* (map (lambda (jO1077@x) (jOb5d@add-subst jO106f@rib jO1077@x)) jO1064@rhs*) jO1070@r jO1059@mr))) (jO105a@build '#f jO106b@lex* jO1074@rhs* jO1073@body)))))) jO1061@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO105f@t)))))) (set! jO2818@jOd0c@letrec-helper jOd0c@letrec-helper) (set! jOd0e@let-transformer (lambda (jO1079@e jO107a@r jO107b@mr) (let ((jO107f@t jO1079@e)) (let ((jO1081@ls/false (jOd78@syntax-dispatch jO107f@t '(_ #(each (any any)) any . each-any)))) (if jO1081@ls/false (apply (lambda (jO1083@lhs* jO1084@rhs* jO1085@b jO1086@b*) (if (not (jOb79@valid-bound-ids? jO1083@lhs*)) (jOd32@invalid-fmls-error jO1079@e jO1083@lhs*) (let ((jO108b@lex* (map jOaf9@gen-lexical jO1083@lhs*)) (jO108c@lab* (map jOafd@gen-label jO1083@lhs*)) (jO108d@rhs* (jOd96@chi-expr* jO1084@rhs* jO107a@r jO107b@mr))) (let ((jO1091@rib (jOb31@make-full-rib jO1083@lhs* jO108c@lab*)) (jO1092@r (jOd0a@add-lexicals jO108c@lab* jO108b@lex* jO107a@r))) (let ((jO1095@body (jOdb0@chi-internal (jOb5d@add-subst jO1091@rib (cons jO1085@b jO1086@b*)) jO1092@r jO107b@mr))) (jOad9@jOa3c@build-let '#f jO108b@lex* jO108d@rhs* jO1095@body)))))) jO1081@ls/false) (let ((jO1097@t jO107f@t)) (let ((jO1099@ls/false (jOd78@syntax-dispatch jO1097@t '(_ any #(each (any any)) any . each-any)))) (if jO1099@ls/false (apply (lambda (jO109b@loop jO109c@lhs* jO109d@rhs* jO109e@b jO109f@b*) (if (not (jOb79@valid-bound-ids? jO109c@lhs*)) (jOd32@invalid-fmls-error jO1079@e jO109c@lhs*) (let ((jO10a5@lex* (map jOaf9@gen-lexical jO109c@lhs*)) (jO10a6@lab* (map jOafd@gen-label jO109c@lhs*)) (jO10a7@rhs* (jOd96@chi-expr* jO109d@rhs* jO107a@r jO107b@mr)) (jO10a8@loop-lex (jOaf9@gen-lexical jO109b@loop)) (jO10a9@loop-lab (jOafd@gen-label jO109b@loop))) (let ((jO10af@loop-rib (jOb31@make-full-rib (list jO109b@loop) (list jO10a9@loop-lab))) (jO10b0@rib (jOb31@make-full-rib jO109c@lhs* jO10a6@lab*)) (jO10b1@r (jOd0a@add-lexicals (cons jO10a9@loop-lab jO10a6@lab*) (cons jO10a8@loop-lex jO10a5@lex*) jO107a@r))) (let ((jO10b5@body (jOdb0@chi-internal (jOb5d@add-subst jO10af@loop-rib (jOb5d@add-subst jO10b0@rib (cons jO109e@b jO109f@b*))) jO10b1@r jO107b@mr))) (jOada@jOa3e@build-named-let '#f jO10a8@loop-lex jO10a5@lex* jO10a7@rhs* jO10b5@body)))))) jO1099@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1097@t))))))))) (set! jO2819@jOd0e@let-transformer jOd0e@let-transformer) (set! jOd10@letrec-transformer (lambda (jO10b7@e jO10b8@r jO10b9@mr) (jOd0c@letrec-helper jO10b7@e jO10b8@r jO10b9@mr jOad8@jOa3a@build-letrec))) (set! jO281a@jOd10@letrec-transformer jOd10@letrec-transformer) (set! jOd12@letrec*-transformer (lambda (jO10bd@e jO10be@r jO10bf@mr) (jOd0c@letrec-helper jO10bd@e jO10be@r jO10bf@mr jOadb@jOa40@build-letrec*))) (set! jO281b@jOd12@letrec*-transformer jOd12@letrec*-transformer) (set! jOd14@fluid-let-syntax-transformer (lambda (jO10c3@e jO10c4@r jO10c5@mr) (letrec* ((jO10ca@lookup (lambda (jO10dd@x) (or (jOb87@id->label jO10dd@x) (jOe58@syntax-violation '#f '"unbound identifier" jO10c3@e jO10dd@x))))) (let ((jO10cb@t jO10c3@e)) (let ((jO10cd@ls/false (jOd78@syntax-dispatch jO10cb@t '(_ #(each (any any)) any . each-any)))) (if jO10cd@ls/false (apply (lambda (jO10cf@lhs* jO10d0@rhs* jO10d1@b jO10d2@b*) (if (not (jOb79@valid-bound-ids? jO10cf@lhs*)) (jOd32@invalid-fmls-error jO10c3@e jO10cf@lhs*) (let ((jO10d7@lab* (map jO10ca@lookup jO10cf@lhs*)) (jO10d8@rhs* (map (lambda (jO10db@x) (jOba9@make-eval-transformer (jOdd2@expand-transformer jO10db@x jO10c5@mr))) jO10d0@rhs*))) (jOdb0@chi-internal (cons jO10d1@b jO10d2@b*) (append (map cons jO10d7@lab* jO10d8@rhs*) jO10c4@r) (append (map cons jO10d7@lab* jO10d8@rhs*) jO10c5@mr))))) jO10cd@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO10cb@t))))))) (set! jO281c@jOd14@fluid-let-syntax-transformer jOd14@fluid-let-syntax-transformer) (set! jOd16@type-descriptor-transformer (lambda (jO10df@e jO10e0@r jO10e1@mr) (let ((jO10e5@t jO10df@e)) (let ((jO10e7@ls/false (jOd78@syntax-dispatch jO10e5@t '(_ any)))) (if (and jO10e7@ls/false (apply (lambda (jO10e9@id) (jOb71@id? jO10e9@id)) jO10e7@ls/false)) (apply (lambda (jO10eb@id) (let ((jO10ed@lab (jOb87@id->label jO10eb@id))) (let ((jO10ef@b (jOb89@label->binding jO10ed@lab jO10e0@r))) (let ((jO10f1@type (jOb8d@binding-type jO10ef@b))) (begin (if (not jO10ed@lab) (jOb91@raise-unbound-error jO10eb@id) (void)) (if (not (and (eq? jO10f1@type '$rtd) (not (list? (jOb8f@binding-value jO10ef@b))))) (jOe58@syntax-violation '#f '"not a record type" jO10df@e) (void)) (list 'quote (jOb8f@binding-value jO10ef@b))))))) jO10e7@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO10e5@t)))))) (set! jO281d@jOd16@type-descriptor-transformer jOd16@type-descriptor-transformer) (set! jOd18@record-type-descriptor-transformer (lambda (jO10f3@e jO10f4@r jO10f5@mr) (let ((jO10f9@t jO10f3@e)) (let ((jO10fb@ls/false (jOd78@syntax-dispatch jO10f9@t '(_ any)))) (if (and jO10fb@ls/false (apply (lambda (jO10fd@id) (jOb71@id? jO10fd@id)) jO10fb@ls/false)) (apply (lambda (jO10ff@id) (let ((jO1101@lab (jOb87@id->label jO10ff@id))) (let ((jO1103@b (jOb89@label->binding jO1101@lab jO10f4@r))) (let ((jO1105@type (jOb8d@binding-type jO1103@b))) (begin (if (not jO1101@lab) (jOb91@raise-unbound-error jO10ff@id) (void)) (if (not (and (eq? jO1105@type '$rtd) (list? (jOb8f@binding-value jO1103@b)))) (jOe58@syntax-violation '#f '"not a record type" jO10f3@e) (void)) (jOd9a@chi-expr (car (jOb8f@binding-value jO1103@b)) jO10f4@r jO10f5@mr)))))) jO10fb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO10f9@t)))))) (set! jO281e@jOd18@record-type-descriptor-transformer jOd18@record-type-descriptor-transformer) (set! jOd1a@record-constructor-descriptor-transformer (lambda (jO1107@e jO1108@r jO1109@mr) (let ((jO110d@t jO1107@e)) (let ((jO110f@ls/false (jOd78@syntax-dispatch jO110d@t '(_ any)))) (if (and jO110f@ls/false (apply (lambda (jO1111@id) (jOb71@id? jO1111@id)) jO110f@ls/false)) (apply (lambda (jO1113@id) (let ((jO1115@lab (jOb87@id->label jO1113@id))) (let ((jO1117@b (jOb89@label->binding jO1115@lab jO1108@r))) (let ((jO1119@type (jOb8d@binding-type jO1117@b))) (begin (if (not jO1115@lab) (jOb91@raise-unbound-error jO1113@id) (void)) (if (not (and (eq? jO1119@type '$rtd) (list? (jOb8f@binding-value jO1117@b)))) (jOe58@syntax-violation '#f '"invalid type" jO1107@e) (void)) (jOd9a@chi-expr (cadr (jOb8f@binding-value jO1117@b)) jO1108@r jO1109@mr)))))) jO110f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO110d@t)))))) (set! jO281f@jOd1a@record-constructor-descriptor-transformer jOd1a@record-constructor-descriptor-transformer) (set! jOd1c@when-macro (lambda (jO111b@e) (let ((jO111d@t jO111b@e)) (let ((jO111f@ls/false (jOd78@syntax-dispatch jO111d@t '(_ any any . each-any)))) (if jO111f@ls/false (apply (lambda (jO1121@test jO1122@e jO1123@e*) (jOd2e@bless (list 'if jO1121@test (cons 'begin (cons jO1122@e jO1123@e*))))) jO111f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO111d@t)))))) (set! jO2820@jOd1c@when-macro jOd1c@when-macro) (set! jOd1e@unless-macro (lambda (jO1127@e) (let ((jO1129@t jO1127@e)) (let ((jO112b@ls/false (jOd78@syntax-dispatch jO1129@t '(_ any any . each-any)))) (if jO112b@ls/false (apply (lambda (jO112d@test jO112e@e jO112f@e*) (jOd2e@bless (list 'if (list 'not jO112d@test) (cons 'begin (cons jO112e@e jO112f@e*))))) jO112b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1129@t)))))) (set! jO2821@jOd1e@unless-macro jOd1e@unless-macro) (set! jOd20@if-transformer (lambda (jO1133@e jO1134@r jO1135@mr) (let ((jO1139@t jO1133@e)) (let ((jO113b@ls/false (jOd78@syntax-dispatch jO1139@t '(_ any any any)))) (if jO113b@ls/false (apply (lambda (jO113d@e0 jO113e@e1 jO113f@e2) (list 'if (jOd9a@chi-expr jO113d@e0 jO1134@r jO1135@mr) (jOd9a@chi-expr jO113e@e1 jO1134@r jO1135@mr) (jOd9a@chi-expr jO113f@e2 jO1134@r jO1135@mr))) jO113b@ls/false) (let ((jO1143@t jO1139@t)) (let ((jO1145@ls/false (jOd78@syntax-dispatch jO1143@t '(_ any any)))) (if jO1145@ls/false (apply (lambda (jO1147@e0 jO1148@e1) (list 'if (jOd9a@chi-expr jO1147@e0 jO1134@r jO1135@mr) (jOd9a@chi-expr jO1148@e1 jO1134@r jO1135@mr) (jOad7@jOa38@build-void))) jO1145@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1143@t))))))))) (set! jO2822@jOd20@if-transformer jOd20@if-transformer) (set! jOd22@and-transformer (lambda (jO114b@e jO114c@r jO114d@mr) (let ((jO1151@t jO114b@e)) (let ((jO1153@ls/false (jOd78@syntax-dispatch jO1151@t '(_ . each-any)))) (if jO1153@ls/false (apply (lambda (jO1155@e*) (cons 'and (jOd96@chi-expr* jO1155@e* jO114c@r jO114d@mr))) jO1153@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1151@t)))))) (set! jO2823@jOd22@and-transformer jOd22@and-transformer) (set! jOd24@or-transformer (lambda (jO1157@e jO1158@r jO1159@mr) (let ((jO115d@t jO1157@e)) (let ((jO115f@ls/false (jOd78@syntax-dispatch jO115d@t '(_ . each-any)))) (if jO115f@ls/false (apply (lambda (jO1161@e*) (cons 'or (jOd96@chi-expr* jO1161@e* jO1158@r jO1159@mr))) jO115f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO115d@t)))))) (set! jO2824@jOd24@or-transformer jOd24@or-transformer) (set! jOd26@case-macro (lambda (jO1163@e) (letrec* ((jO1166@build-last (lambda (jO118d@cls) (let ((jO118f@t jO118d@cls)) (let ((jO1191@ls/false (jOd78@syntax-dispatch jO118f@t '(#(scheme-id else) any . each-any)))) (if jO1191@ls/false (apply (lambda (jO1193@e jO1194@e*) (cons 'begin (cons jO1193@e jO1194@e*))) jO1191@ls/false) (let ((jO1197@t jO118f@t)) (let ((jO1199@ls/false (jOd78@syntax-dispatch jO1197@t '_))) (if jO1199@ls/false (apply (lambda () (jO1168@build-one jO118d@cls '(if #f #f))) jO1199@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1197@t))))))))) (jO1168@build-one (lambda (jO117f@cls jO1180@k) (let ((jO1183@t jO117f@cls)) (let ((jO1185@ls/false (jOd78@syntax-dispatch jO1183@t '(each-any any . each-any)))) (if jO1185@ls/false (apply (lambda (jO1187@d* jO1188@e jO1189@e*) (list 'if (list 'memv 't (list 'quote jO1187@d*)) (cons 'begin (cons jO1188@e jO1189@e*)) jO1180@k)) jO1185@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1183@t))))))) (let ((jO1169@t jO1163@e)) (let ((jO116b@ls/false (jOd78@syntax-dispatch jO1169@t '(_ any)))) (if jO116b@ls/false (apply (lambda (jO116d@expr) (jOd2e@bless (cons 'let (cons (list (list 't jO116d@expr)) '((if #f #f)))))) jO116b@ls/false) (let ((jO116f@t jO1169@t)) (let ((jO1171@ls/false (jOd78@syntax-dispatch jO116f@t '(_ any any . each-any)))) (if jO1171@ls/false (apply (lambda (jO1173@expr jO1174@cls jO1175@cls*) (jOd2e@bless (list 'let (list (list 't jO1173@expr)) (let jO117d@f ((jO1179@cls jO1174@cls) (jO117a@cls* jO1175@cls*)) (if (null? jO117a@cls*) (jO1166@build-last jO1179@cls) (jO1168@build-one jO1179@cls (jO117d@f (car jO117a@cls*) (cdr jO117a@cls*)))))))) jO1171@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO116f@t)))))))))) (set! jO2825@jOd26@case-macro jOd26@case-macro) (set! jOd28@quote-transformer (lambda (jO119b@e jO119c@r jO119d@mr) (let ((jO11a1@t jO119b@e)) (let ((jO11a3@ls/false (jOd78@syntax-dispatch jO11a1@t '(_ any)))) (if jO11a3@ls/false (apply (lambda (jO11a5@datum) (list 'quote (jOb85@stx->datum jO11a5@datum))) jO11a3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO11a1@t)))))) (set! jO2826@jOd28@quote-transformer jOd28@quote-transformer) (set! jOd2a@case-lambda-transformer (lambda (jO11a7@e jO11a8@r jO11a9@mr) (let ((jO11ad@t jO11a7@e)) (let ((jO11af@ls/false (jOd78@syntax-dispatch jO11ad@t '(_ . #(each (any any . each-any)))))) (if jO11af@ls/false (apply (lambda (jO11b1@fmls* jO11b2@b* jO11b3@b**) (call-with-values (lambda () (jOda2@chi-lambda-clause* jO11a7@e jO11b1@fmls* (map cons jO11b2@b* jO11b3@b**) jO11a8@r jO11a9@mr)) (lambda (jO11bb@jO11b8 jO11bc@jO11ba) (let ((jO11bf@body* jO11bc@jO11ba) (jO11c0@fmls* jO11bb@jO11b8)) (jOad5@jOa08@build-case-lambda '#f jO11c0@fmls* jO11bf@body*))))) jO11af@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO11ad@t)))))) (set! jO2827@jOd2a@case-lambda-transformer jOd2a@case-lambda-transformer) (set! jOd2c@lambda-transformer (lambda (jO11c3@e jO11c4@r jO11c5@mr) (let ((jO11c9@t jO11c3@e)) (let ((jO11cb@ls/false (jOd78@syntax-dispatch jO11c9@t '(_ any any . each-any)))) (if jO11cb@ls/false (apply (lambda (jO11cd@fmls jO11ce@b jO11cf@b*) (call-with-values (lambda () (jOda0@chi-lambda-clause jO11c3@e jO11cd@fmls (cons jO11ce@b jO11cf@b*) jO11c4@r jO11c5@mr)) (lambda (jO11d7@jO11d4 jO11d8@jO11d6) (let ((jO11db@body jO11d8@jO11d6) (jO11dc@fmls jO11d7@jO11d4)) (jOad4@jOa06@build-lambda '#f jO11dc@fmls jO11db@body))))) jO11cb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO11c9@t)))))) (set! jO2828@jOd2c@lambda-transformer jOd2c@lambda-transformer) (set! jOd2e@bless (lambda (jO11df@x) (jOb59@mkstx (let jO11e3@f ((jO11e1@x jO11df@x)) (if (jOb3d@stx? jO11e1@x) jO11e1@x (if (pair? jO11e1@x) (cons (jO11e3@f (car jO11e1@x)) (jO11e3@f (cdr jO11e1@x))) (if (symbol? jO11e1@x) (jOd00@scheme-stx jO11e1@x) (if (vector? jO11e1@x) (vector-map jO11e3@f jO11e1@x) jO11e1@x))))) '() '() '()))) (set! jO2829@jOd2e@bless jOd2e@bless) (set! jOd30@with-syntax-macro (lambda (jO11e5@e) (let ((jO11e7@t jO11e5@e)) (let ((jO11e9@ls/false (jOd78@syntax-dispatch jO11e7@t '(_ #(each (any any)) any . each-any)))) (if jO11e9@ls/false (apply (lambda (jO11eb@pat* jO11ec@expr* jO11ed@b jO11ee@b*) (let ((jO11f3@idn* (let jO11f7@f ((jO11f5@pat* jO11eb@pat*)) (if (null? jO11f5@pat*) '() (call-with-values (lambda () (jOd76@convert-pattern (car jO11f5@pat*) '())) (lambda (jO11fd@jO11fa jO11fe@jO11fc) (let ((jO1201@idn* jO11fe@jO11fc) (jO1202@pat jO11fd@jO11fa)) (append jO1201@idn* (jO11f7@f (cdr jO11f5@pat*)))))))))) (begin (jOd9e@verify-formals (map car jO11f3@idn*) jO11e5@e) (let ((jO1205@t* (jOe46@generate-temporaries jO11ec@expr*))) (jOd2e@bless (list 'let (map list jO1205@t* jO11ec@expr*) (let jO120b@f ((jO1207@pat* jO11eb@pat*) (jO1208@t* jO1205@t*)) (if (null? jO1207@pat*) (cons 'begin (cons '#f (cons jO11ed@b jO11ee@b*))) (list 'syntax-case (car jO1208@t*) '() (list (car jO1207@pat*) (jO120b@f (cdr jO1207@pat*) (cdr jO1208@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car jO1207@pat*)) (car jO1208@t*)))))))))))) jO11e9@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO11e7@t)))))) (set! jO282a@jOd30@with-syntax-macro jOd30@with-syntax-macro) (set! jOd32@invalid-fmls-error (lambda (jO120d@stx jO120e@fmls) (let ((jO1211@t jO120e@fmls)) (let ((jO1213@ls/false (jOd78@syntax-dispatch jO1211@t '#(each+ any () any)))) (if jO1213@ls/false (apply (lambda (jO1215@id* jO1216@last) (let jO121b@f ((jO1219@id* (if (jOb71@id? jO1216@last) (cons jO1216@last jO1215@id*) (if (jOb67@syntax-null? jO1216@last) jO1215@id* (jOe58@syntax-violation '#f '"not an identifier" jO120d@stx jO1216@last))))) (if (null? jO1219@id*) (values) (if (not (jOb71@id? (car jO1219@id*))) (jOe58@syntax-violation '#f '"not an identifier" jO120d@stx (car jO1219@id*)) (begin (jO121b@f (cdr jO1219@id*)) (if (jOb7d@bound-id-member? (car jO1219@id*) (cdr jO1219@id*)) (jOe58@syntax-violation '#f '"duplicate binding" jO120d@stx (car jO1219@id*)) (void))))))) jO1213@ls/false) (let ((jO121d@t jO1211@t)) (let ((jO121f@ls/false (jOd78@syntax-dispatch jO121d@t '_))) (if jO121f@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"malformed binding form" jO120d@stx jO120e@fmls)) jO121f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO121d@t))))))))) (set! jO282b@jOd32@invalid-fmls-error jOd32@invalid-fmls-error) (set! jOd34@let-macro (lambda (jO1221@stx) (let ((jO1223@t jO1221@stx)) (let ((jO1225@ls/false (jOd78@syntax-dispatch jO1223@t '(_ #(each (any any)) any . each-any)))) (if jO1225@ls/false (apply (lambda (jO1227@lhs* jO1228@rhs* jO1229@b jO122a@b*) (if (jOb79@valid-bound-ids? jO1227@lhs*) (jOd2e@bless (cons (cons 'lambda (cons jO1227@lhs* (cons jO1229@b jO122a@b*))) jO1228@rhs*)) (jOd32@invalid-fmls-error jO1221@stx jO1227@lhs*))) jO1225@ls/false) (let ((jO122f@t jO1223@t)) (let ((jO1231@ls/false (jOd78@syntax-dispatch jO122f@t '(_ any #(each (any any)) any . each-any)))) (if (and jO1231@ls/false (apply (lambda (jO1233@f jO1234@lhs* jO1235@rhs* jO1236@b jO1237@b*) (jOb71@id? jO1233@f)) jO1231@ls/false)) (apply (lambda (jO123d@f jO123e@lhs* jO123f@rhs* jO1240@b jO1241@b*) (if (jOb79@valid-bound-ids? jO123e@lhs*) (jOd2e@bless (cons (list 'letrec (list (list jO123d@f (cons 'lambda (cons jO123e@lhs* (cons jO1240@b jO1241@b*))))) jO123d@f) jO123f@rhs*)) (jOd32@invalid-fmls-error jO1221@stx jO123e@lhs*))) jO1231@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO122f@t))))))))) (set! jO282c@jOd34@let-macro jOd34@let-macro) (set! jOd36@let-values-macro (lambda (jO1247@stx) (letrec* ((jO124a@rename (lambda (jO12af@x jO12b0@old* jO12b1@new*) (begin (if (not (jOb71@id? jO12af@x)) (jOe58@syntax-violation '#f '"not an indentifier" jO1247@stx jO12af@x) (void)) (if (jOb7d@bound-id-member? jO12af@x jO12b0@old*) (jOe58@syntax-violation '#f '"duplicate binding" jO1247@stx jO12af@x) (void)) (let ((jO12b5@y (gensym (jOe5e@syntax->datum jO12af@x)))) (values jO12b5@y (cons jO12af@x jO12b0@old*) (cons jO12b5@y jO12b1@new*)))))) (jO124c@rename* (lambda (jO129d@x* jO129e@old* jO129f@new*) (if (null? jO129d@x*) (values '() jO129e@old* jO129f@new*) (call-with-values (lambda () (jO124a@rename (car jO129d@x*) jO129e@old* jO129f@new*)) (lambda (jO12a3@x jO12a4@old* jO12a5@new*) (call-with-values (lambda () (jO124c@rename* (cdr jO129d@x*) jO12a4@old* jO12a5@new*)) (lambda (jO12a9@x* jO12aa@old* jO12ab@new*) (values (cons jO12a3@x jO12a9@x*) jO12aa@old* jO12ab@new*))))))))) (let ((jO124d@t jO1247@stx)) (let ((jO124f@ls/false (jOd78@syntax-dispatch jO124d@t '(_ () any . each-any)))) (if jO124f@ls/false (apply (lambda (jO1251@b jO1252@b*) (cons* (jOd2e@bless 'let) '() jO1251@b jO1252@b*)) jO124f@ls/false) (let ((jO1255@t jO124d@t)) (let ((jO1257@ls/false (jOd78@syntax-dispatch jO1255@t '(_ #(each (any any)) any . each-any)))) (if jO1257@ls/false (apply (lambda (jO1259@lhs* jO125a@rhs* jO125b@b jO125c@b*) (jOd2e@bless (let jO1269@f ((jO1261@lhs* jO1259@lhs*) (jO1262@rhs* jO125a@rhs*) (jO1263@old* '()) (jO1264@new* '())) (if (null? jO1261@lhs*) (cons 'let (cons (map list jO1263@old* jO1264@new*) (cons jO125b@b jO125c@b*))) (let ((jO126b@t (car jO1261@lhs*))) (let ((jO126d@ls/false (jOd78@syntax-dispatch jO126b@t 'each-any))) (if jO126d@ls/false (apply (lambda (jO126f@x*) (call-with-values (lambda () (jO124c@rename* jO126f@x* jO1263@old* jO1264@new*)) (lambda (jO1277@jO1272 jO1278@jO1274 jO1279@jO1276) (let ((jO127d@new* jO1279@jO1276) (jO127e@old* jO1278@jO1274) (jO127f@y* jO1277@jO1272)) (list 'call-with-values (list 'lambda '() (car jO1262@rhs*)) (list 'lambda jO127f@y* (jO1269@f (cdr jO1261@lhs*) (cdr jO1262@rhs*) jO127e@old* jO127d@new*))))))) jO126d@ls/false) (let ((jO1283@t jO126b@t)) (let ((jO1285@ls/false (jOd78@syntax-dispatch jO1283@t '#(each+ any () any)))) (if jO1285@ls/false (apply (lambda (jO1287@x* jO1288@x) (call-with-values (lambda () (jO124a@rename jO1288@x jO1263@old* jO1264@new*)) (lambda (jO128b@y jO128c@old* jO128d@new*) (call-with-values (lambda () (jO124c@rename* jO1287@x* jO128c@old* jO128d@new*)) (lambda (jO1291@y* jO1292@old* jO1293@new*) (list 'call-with-values (list 'lambda '() (car jO1262@rhs*)) (list 'lambda (append jO1291@y* jO128b@y) (jO1269@f (cdr jO1261@lhs*) (cdr jO1262@rhs*) jO1292@old* jO1293@new*)))))))) jO1285@ls/false) (let ((jO1297@t jO1283@t)) (let ((jO1299@ls/false (jOd78@syntax-dispatch jO1297@t 'any))) (if jO1299@ls/false (apply (lambda (jO129b@others) (jOe58@syntax-violation '#f '"malformed bindings" jO1247@stx jO129b@others)) jO1299@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1297@t)))))))))))))) jO1257@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1255@t)))))))))) (set! jO282d@jOd36@let-values-macro jOd36@let-values-macro) (set! jOd38@let*-values-macro (lambda (jO12b7@stx) (letrec* ((jO12ba@check (lambda (jO12e9@x*) (if (not (null? jO12e9@x*)) (let ((jO12eb@x (car jO12e9@x*))) (begin (if (not (jOb71@id? jO12eb@x)) (jOe58@syntax-violation '#f '"not an identifier" jO12b7@stx jO12eb@x) (void)) (jO12ba@check (cdr jO12e9@x*)) (if (jOb7d@bound-id-member? jO12eb@x (cdr jO12e9@x*)) (jOe58@syntax-violation '#f '"duplicate identifier" jO12b7@stx jO12eb@x) (void)))) (void))))) (let ((jO12bb@t jO12b7@stx)) (let ((jO12bd@ls/false (jOd78@syntax-dispatch jO12bb@t '(_ () any . each-any)))) (if jO12bd@ls/false (apply (lambda (jO12bf@b jO12c0@b*) (cons* (jOd2e@bless 'let) '() jO12bf@b jO12c0@b*)) jO12bd@ls/false) (let ((jO12c3@t jO12bb@t)) (let ((jO12c5@ls/false (jOd78@syntax-dispatch jO12c3@t '(_ #(each (any any)) any . each-any)))) (if jO12c5@ls/false (apply (lambda (jO12c7@lhs* jO12c8@rhs* jO12c9@b jO12ca@b*) (jOd2e@bless (let jO12d3@f ((jO12cf@lhs* jO12c7@lhs*) (jO12d0@rhs* jO12c8@rhs*)) (if (null? jO12cf@lhs*) (cons 'begin (cons jO12c9@b jO12ca@b*)) (let ((jO12d5@t (car jO12cf@lhs*))) (let ((jO12d7@ls/false (jOd78@syntax-dispatch jO12d5@t 'each-any))) (if jO12d7@ls/false (apply (lambda (jO12d9@x*) (begin (jO12ba@check jO12d9@x*) (list 'call-with-values (list 'lambda '() (car jO12d0@rhs*)) (list 'lambda jO12d9@x* (jO12d3@f (cdr jO12cf@lhs*) (cdr jO12d0@rhs*)))))) jO12d7@ls/false) (let ((jO12db@t jO12d5@t)) (let ((jO12dd@ls/false (jOd78@syntax-dispatch jO12db@t '#(each+ any () any)))) (if jO12dd@ls/false (apply (lambda (jO12df@x* jO12e0@x) (begin (jO12ba@check (cons jO12e0@x jO12df@x*)) (list 'call-with-values (list 'lambda '() (car jO12d0@rhs*)) (list 'lambda (append jO12df@x* jO12e0@x) (jO12d3@f (cdr jO12cf@lhs*) (cdr jO12d0@rhs*)))))) jO12dd@ls/false) (let ((jO12e3@t jO12db@t)) (let ((jO12e5@ls/false (jOd78@syntax-dispatch jO12e3@t 'any))) (if jO12e5@ls/false (apply (lambda (jO12e7@others) (jOe58@syntax-violation '#f '"malformed bindings" jO12b7@stx jO12e7@others)) jO12e5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO12e3@t)))))))))))))) jO12c5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO12c3@t)))))))))) (set! jO282e@jOd38@let*-values-macro jOd38@let*-values-macro) (set! jOd3a@trace-lambda-macro (lambda (jO12ed@stx) (let ((jO12ef@t jO12ed@stx)) (let ((jO12f1@ls/false (jOd78@syntax-dispatch jO12ef@t '(_ any each-any any . each-any)))) (if jO12f1@ls/false (apply (lambda (jO12f3@who jO12f4@fmls jO12f5@b jO12f6@b*) (if (jOb79@valid-bound-ids? jO12f4@fmls) (jOd2e@bless (list 'make-traced-procedure (list 'quote jO12f3@who) (cons 'lambda (cons jO12f4@fmls (cons jO12f5@b jO12f6@b*))))) (jOd32@invalid-fmls-error jO12ed@stx jO12f4@fmls))) jO12f1@ls/false) (let ((jO12fb@t jO12ef@t)) (let ((jO12fd@ls/false (jOd78@syntax-dispatch jO12fb@t '(_ any #(each+ any () any) any . each-any)))) (if jO12fd@ls/false (apply (lambda (jO12ff@who jO1300@fmls jO1301@last jO1302@b jO1303@b*) (if (jOb79@valid-bound-ids? (cons jO1301@last jO1300@fmls)) (jOd2e@bless (list 'make-traced-procedure (list 'quote jO12ff@who) (cons 'lambda (cons (append jO1300@fmls jO1301@last) (cons jO1302@b jO1303@b*))))) (jOd32@invalid-fmls-error jO12ed@stx (append jO1300@fmls jO1301@last)))) jO12fd@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO12fb@t))))))))) (set! jO282f@jOd3a@trace-lambda-macro jOd3a@trace-lambda-macro) (set! jOd3c@trace-define-macro (lambda (jO1309@stx) (let ((jO130b@t jO1309@stx)) (let ((jO130d@ls/false (jOd78@syntax-dispatch jO130b@t '(_ (any . each-any) any . each-any)))) (if jO130d@ls/false (apply (lambda (jO130f@who jO1310@fmls jO1311@b jO1312@b*) (if (jOb79@valid-bound-ids? jO1310@fmls) (jOd2e@bless (list 'define jO130f@who (list 'make-traced-procedure (list 'quote jO130f@who) (cons 'lambda (cons jO1310@fmls (cons jO1311@b jO1312@b*)))))) (jOd32@invalid-fmls-error jO1309@stx jO1310@fmls))) jO130d@ls/false) (let ((jO1317@t jO130b@t)) (let ((jO1319@ls/false (jOd78@syntax-dispatch jO1317@t '(_ (any . #(each+ any () any)) any . each-any)))) (if jO1319@ls/false (apply (lambda (jO131b@who jO131c@fmls jO131d@last jO131e@b jO131f@b*) (if (jOb79@valid-bound-ids? (cons jO131d@last jO131c@fmls)) (jOd2e@bless (list 'define jO131b@who (list 'make-traced-procedure (list 'quote jO131b@who) (cons 'lambda (cons (append jO131c@fmls jO131d@last) (cons jO131e@b jO131f@b*)))))) (jOd32@invalid-fmls-error jO1309@stx (append jO131c@fmls jO131d@last)))) jO1319@ls/false) (let ((jO1325@t jO1317@t)) (let ((jO1327@ls/false (jOd78@syntax-dispatch jO1325@t '(_ any any)))) (if jO1327@ls/false (apply (lambda (jO1329@who jO132a@expr) (if (jOb71@id? jO1329@who) (jOd2e@bless (list 'define jO1329@who (list 'let (list (list 'v jO132a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote jO1329@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (jOe58@syntax-violation '#f '"invalid name" jO1309@stx))) jO1327@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1325@t)))))))))))) (set! jO2830@jOd3c@trace-define-macro jOd3c@trace-define-macro) (set! jOd3e@trace-define-syntax-macro (lambda (jO132d@stx) (let ((jO132f@t jO132d@stx)) (let ((jO1331@ls/false (jOd78@syntax-dispatch jO132f@t '(_ any any)))) (if jO1331@ls/false (apply (lambda (jO1333@who jO1334@expr) (if (jOb71@id? jO1333@who) (jOd2e@bless (list 'define-syntax jO1333@who (list 'make-traced-macro (list 'quote jO1333@who) jO1334@expr))) (jOe58@syntax-violation '#f '"invalid name" jO132d@stx))) jO1331@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO132f@t)))))) (set! jO2831@jOd3e@trace-define-syntax-macro jOd3e@trace-define-syntax-macro) (set! jOd40@trace-let/rec-syntax (lambda (jO1337@who) (lambda (jO1339@stx) (let ((jO133b@t jO1339@stx)) (let ((jO133d@ls/false (jOd78@syntax-dispatch jO133b@t '(_ #(each (any any)) any . each-any)))) (if jO133d@ls/false (apply (lambda (jO133f@lhs* jO1340@rhs* jO1341@b jO1342@b*) (if (jOb79@valid-bound-ids? jO133f@lhs*) (let ((jO1347@rhs* (map (lambda (jO1349@lhs jO134a@rhs) (list 'make-traced-macro (list 'quote jO1349@lhs) jO134a@rhs)) jO133f@lhs* jO1340@rhs*))) (jOd2e@bless (cons jO1337@who (cons (map list jO133f@lhs* jO1347@rhs*) (cons jO1341@b jO1342@b*))))) (jOd32@invalid-fmls-error jO1339@stx jO133f@lhs*))) jO133d@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO133b@t))))))) (set! jO2832@jOd40@trace-let/rec-syntax jOd40@trace-let/rec-syntax) (set! jOd42@trace-let-syntax-macro (jOd40@trace-let/rec-syntax 'let-syntax)) (set! jO2833@jOd42@trace-let-syntax-macro jOd42@trace-let-syntax-macro) (set! jOd44@trace-letrec-syntax-macro (jOd40@trace-let/rec-syntax 'letrec-syntax)) (set! jO2834@jOd44@trace-letrec-syntax-macro jOd44@trace-letrec-syntax-macro) (set! jOd46@guard-macro (lambda (jO134d@x) (letrec* ((jO1350@gen-clauses (lambda (jO1367@con jO1368@outerk jO1369@clause*) (letrec* ((jO136e@f (lambda (jO13a7@x jO13a8@k) (let ((jO13ab@t jO13a7@x)) (let ((jO13ad@ls/false (jOd78@syntax-dispatch jO13ab@t '(any #(scheme-id =>) any)))) (if jO13ad@ls/false (apply (lambda (jO13af@e jO13b0@p) (let ((jO13b3@t (gensym))) (list 'let (list (list jO13b3@t jO13af@e)) (list 'if jO13b3@t (list jO13b0@p jO13b3@t) jO13a8@k)))) jO13ad@ls/false) (let ((jO13b5@t jO13ab@t)) (let ((jO13b7@ls/false (jOd78@syntax-dispatch jO13b5@t '(any)))) (if jO13b7@ls/false (apply (lambda (jO13b9@e) (let ((jO13bb@t (gensym))) (list 'let (list (list jO13bb@t jO13b9@e)) (list 'if jO13bb@t jO13bb@t jO13a8@k)))) jO13b7@ls/false) (let ((jO13bd@t jO13b5@t)) (let ((jO13bf@ls/false (jOd78@syntax-dispatch jO13bd@t '(any any . each-any)))) (if jO13bf@ls/false (apply (lambda (jO13c1@e jO13c2@v jO13c3@v*) (list 'if jO13c1@e (cons 'begin (cons jO13c2@v jO13c3@v*)) jO13a8@k)) jO13bf@ls/false) (let ((jO13c7@t jO13bd@t)) (let ((jO13c9@ls/false (jOd78@syntax-dispatch jO13c7@t '_))) (if jO13c9@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid guard clause" jO13a7@x)) jO13c9@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13c7@t))))))))))))))) (jO1370@f* (lambda (jO137d@x*) (let ((jO137f@t jO137d@x*)) (let ((jO1381@ls/false (jOd78@syntax-dispatch jO137f@t '()))) (if jO1381@ls/false (apply (lambda () (let ((jO1383@g (gensym))) (values (list jO1383@g (list 'lambda '() (list 'raise-continuable jO1367@con))) jO1383@g))) jO1381@ls/false) (let ((jO1385@t jO137f@t)) (let ((jO1387@ls/false (jOd78@syntax-dispatch jO1385@t '((#(scheme-id else) any . each-any))))) (if jO1387@ls/false (apply (lambda (jO1389@e jO138a@e*) (values (cons 'begin (cons jO1389@e jO138a@e*)) '#f)) jO1387@ls/false) (let ((jO138d@t jO1385@t)) (let ((jO138f@ls/false (jOd78@syntax-dispatch jO138d@t '(any . any)))) (if jO138f@ls/false (apply (lambda (jO1391@cls jO1392@cls*) (call-with-values (lambda () (jO1370@f* jO1392@cls*)) (lambda (jO1399@jO1396 jO139a@jO1398) (let ((jO139d@g jO139a@jO1398) (jO139e@e jO1399@jO1396)) (values (jO136e@f jO1391@cls jO139e@e) jO139d@g))))) jO138f@ls/false) (let ((jO13a1@t jO138d@t)) (let ((jO13a3@ls/false (jOd78@syntax-dispatch jO13a1@t 'any))) (if jO13a3@ls/false (apply (lambda (jO13a5@others) (jOe58@syntax-violation '#f '"invalid guard clause" jO13a5@others)) jO13a3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13a1@t)))))))))))))))) (call-with-values (lambda () (jO1370@f* jO1369@clause*)) (lambda (jO1375@jO1372 jO1376@jO1374) (let ((jO1379@raisek jO1376@jO1374) (jO137a@code jO1375@jO1372)) (if jO1379@raisek (list (list 'call/cc (list 'lambda (list jO1379@raisek) (list jO1368@outerk (list 'lambda '() jO137a@code))))) (list jO1368@outerk (list 'lambda '() jO137a@code)))))))))) (let ((jO1351@t jO134d@x)) (let ((jO1353@ls/false (jOd78@syntax-dispatch jO1351@t '(_ (any . each-any) any . each-any)))) (if (and jO1353@ls/false (apply (lambda (jO1355@con jO1356@clause* jO1357@b jO1358@b*) (jOb71@id? jO1355@con)) jO1353@ls/false)) (apply (lambda (jO135d@con jO135e@clause* jO135f@b jO1360@b*) (let ((jO1365@outerk (gensym))) (jOd2e@bless (list (list 'call/cc (list 'lambda (list jO1365@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list jO135d@con) (jO1350@gen-clauses jO135d@con jO1365@outerk jO135e@clause*)) (cons 'lambda (cons '() (cons jO135f@b jO1360@b*))))))))))) jO1353@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1351@t))))))) (set! jO2835@jOd46@guard-macro jOd46@guard-macro) (set! jOd48@define-enumeration-macro (lambda (jO13cb@stx) (letrec* ((jO13ce@set? (lambda (jO13e7@x) (or (null? jO13e7@x) (and (not (memq (car jO13e7@x) (cdr jO13e7@x))) (jO13ce@set? (cdr jO13e7@x)))))) (jO13d0@remove-dups (lambda (jO13e5@ls) (if (null? jO13e5@ls) '() (cons (car jO13e5@ls) (jO13d0@remove-dups (remq (car jO13e5@ls) (cdr jO13e5@ls)))))))) (let ((jO13d1@t jO13cb@stx)) (let ((jO13d3@ls/false (jOd78@syntax-dispatch jO13d1@t '(_ any each-any any)))) (if (and jO13d3@ls/false (apply (lambda (jO13d5@name jO13d6@id* jO13d7@maker) (and (jOb71@id? jO13d5@name) (jOb71@id? jO13d7@maker) (for-all jOb71@id? jO13d6@id*))) jO13d3@ls/false)) (apply (lambda (jO13db@name jO13dc@id* jO13dd@maker) (let ((jO13e1@name* (jO13d0@remove-dups (jOe5e@syntax->datum jO13dc@id*))) (jO13e2@mk (gensym))) (jOd2e@bless (list 'begin (list 'define jO13e2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote jO13e1@name*)))) (list 'define-syntax jO13db@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote jO13e1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote jO13db@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax jO13dd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote jO13dd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote jO13e1@name*)) (cons 'syntax-violation (cons (list 'quote jO13dd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons jO13e2@mk '('(n* ...))))))))))))) jO13d3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13d1@t))))))) (set! jO2836@jOd48@define-enumeration-macro jOd48@define-enumeration-macro) (set! jOd4a@time-macro (lambda (jO13e9@stx) (let ((jO13eb@t jO13e9@stx)) (let ((jO13ed@ls/false (jOd78@syntax-dispatch jO13eb@t '(_ any)))) (if jO13ed@ls/false (apply (lambda (jO13ef@expr) (jOd2e@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() jO13ef@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) jO13ed@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13eb@t)))))) (set! jO2837@jOd4a@time-macro jOd4a@time-macro) (set! jOd4c@delay-macro (lambda (jO13f1@stx) (let ((jO13f3@t jO13f1@stx)) (let ((jO13f5@ls/false (jOd78@syntax-dispatch jO13f3@t '(_ any)))) (if jO13f5@ls/false (apply (lambda (jO13f7@expr) (jOd2e@bless (list 'make-promise (list 'lambda '() jO13f7@expr)))) jO13f5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13f3@t)))))) (set! jO2838@jOd4c@delay-macro jOd4c@delay-macro) (set! jOd4e@assert-macro (lambda (jO13f9@stx) (let ((jO13fb@t jO13f9@stx)) (let ((jO13fd@ls/false (jOd78@syntax-dispatch jO13fb@t '(_ any)))) (if jO13fd@ls/false (apply (lambda (jO13ff@expr) (let ((jO1401@pos (or (jOe50@expression-position jO13f9@stx) (jOe50@expression-position jO13ff@expr)))) (jOd2e@bless (list 'let (list (list 'x jO13ff@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote jO13ff@expr) (list 'quote jO1401@pos))))))) jO13fd@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO13fb@t)))))) (set! jO2839@jOd4e@assert-macro jOd4e@assert-macro) (set! jOd50@endianness-macro (lambda (jO1403@stx) (let ((jO1405@t jO1403@stx)) (let ((jO1407@ls/false (jOd78@syntax-dispatch jO1405@t '(_ any)))) (if jO1407@ls/false (apply (lambda (jO1409@e) (let ((jO140b@t (jOe5e@syntax->datum jO1409@e))) (if (memv jO140b@t '(little)) (jOd2e@bless ''little) (if (memv jO140b@t '(big)) (jOd2e@bless ''big) (jOe58@syntax-violation '#f '"endianness must be big or little" jO1403@stx))))) jO1407@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1405@t)))))) (set! jO283a@jOd50@endianness-macro jOd50@endianness-macro) (set! jOd52@identifier-syntax-macro (lambda (jO140d@stx) (let ((jO140f@t jO140d@stx)) (let ((jO1411@ls/false (jOd78@syntax-dispatch jO140f@t '(_ any)))) (if jO1411@ls/false (apply (lambda (jO1413@expr) (jOd2e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax jO1413@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax jO1413@expr) '((syntax (e* ...)))))))))) jO1411@ls/false) (let ((jO1415@t jO140f@t)) (let ((jO1417@ls/false (jOd78@syntax-dispatch jO1415@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and jO1417@ls/false (apply (lambda (jO1419@id1 jO141a@expr1 jO141b@id2 jO141c@expr2 jO141d@expr3) (and (jOb71@id? jO1419@id1) (jOb71@id? jO141b@id2) (jOb71@id? jO141c@expr2))) jO1417@ls/false)) (apply (lambda (jO1423@id1 jO1424@expr1 jO1425@id2 jO1426@expr2 jO1427@expr3) (jOd2e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax jO1424@expr1)) (list (list 'set! 'id jO1426@expr2) (list 'syntax jO1427@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons jO1424@expr1 '(e* ...))))))))) jO1417@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1415@t))))))))) (set! jO283b@jOd52@identifier-syntax-macro jOd52@identifier-syntax-macro) (set! jOd54@do-macro (lambda (jO142d@stx) (letrec* ((jO1430@bind (lambda (jO1447@x) (let ((jO1449@t jO1447@x)) (let ((jO144b@ls/false (jOd78@syntax-dispatch jO1449@t '(any any)))) (if jO144b@ls/false (apply (lambda (jO144d@x jO144e@init) (list jO144d@x jO144e@init jO144d@x)) jO144b@ls/false) (let ((jO1451@t jO1449@t)) (let ((jO1453@ls/false (jOd78@syntax-dispatch jO1451@t '(any any any)))) (if jO1453@ls/false (apply (lambda (jO1455@x jO1456@init jO1457@step) (list jO1455@x jO1456@init jO1457@step)) jO1453@ls/false) (let ((jO145b@t jO1451@t)) (let ((jO145d@ls/false (jOd78@syntax-dispatch jO145b@t '_))) (if jO145d@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid binding" jO142d@stx)) jO145d@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO145b@t))))))))))))) (let ((jO1431@t jO142d@stx)) (let ((jO1433@ls/false (jOd78@syntax-dispatch jO1431@t '(_ each-any (any . each-any) . each-any)))) (if jO1433@ls/false (apply (lambda (jO1435@binding* jO1436@test jO1437@expr* jO1438@command*) (let ((jO143d@t (map jO1430@bind jO1435@binding*))) (let ((jO143f@ls/false (jOd78@syntax-dispatch jO143d@t '#(each (any any any))))) (if jO143f@ls/false (apply (lambda (jO1441@x* jO1442@init* jO1443@step*) (if (jOb79@valid-bound-ids? jO1441@x*) (jOd2e@bless (list 'letrec (list (list 'loop (list 'lambda jO1441@x* (list 'if jO1436@test (cons 'begin (cons '(if #f #f) jO1437@expr*)) (cons 'begin (append jO1438@command* (list (cons 'loop jO1443@step*)))))))) (cons 'loop jO1442@init*))) (jOe58@syntax-violation '#f '"invalid bindings" jO142d@stx))) jO143f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO143d@t))))) jO1433@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1431@t))))))) (set! jO283c@jOd54@do-macro jOd54@do-macro) (set! jOd56@let*-macro (lambda (jO145f@stx) (let ((jO1461@t jO145f@stx)) (let ((jO1463@ls/false (jOd78@syntax-dispatch jO1461@t '(_ #(each (any any)) any . each-any)))) (if (and jO1463@ls/false (apply (lambda (jO1465@lhs* jO1466@rhs* jO1467@b jO1468@b*) (for-all jOb71@id? jO1465@lhs*)) jO1463@ls/false)) (apply (lambda (jO146d@lhs* jO146e@rhs* jO146f@b jO1470@b*) (jOd2e@bless (let jO1477@f ((jO1475@x* (map list jO146d@lhs* jO146e@rhs*))) (if (null? jO1475@x*) (cons 'let (cons '() (cons jO146f@b jO1470@b*))) (list 'let (list (car jO1475@x*)) (jO1477@f (cdr jO1475@x*))))))) jO1463@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1461@t)))))) (set! jO283d@jOd56@let*-macro jOd56@let*-macro) (set! jOd58@or-macro (lambda (jO1479@stx) (let ((jO147b@t jO1479@stx)) (let ((jO147d@ls/false (jOd78@syntax-dispatch jO147b@t '(_)))) (if jO147d@ls/false (apply (lambda () '#f) jO147d@ls/false) (let ((jO147f@t jO147b@t)) (let ((jO1481@ls/false (jOd78@syntax-dispatch jO147f@t '(_ any . each-any)))) (if jO1481@ls/false (apply (lambda (jO1483@e jO1484@e*) (jOd2e@bless (let jO148b@f ((jO1487@e jO1483@e) (jO1488@e* jO1484@e*)) (if (null? jO1488@e*) (list 'begin '#f jO1487@e) (list 'let (list (list 't jO1487@e)) (list 'if 't 't (jO148b@f (car jO1488@e*) (cdr jO1488@e*)))))))) jO1481@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO147f@t))))))))) (set! jO283e@jOd58@or-macro jOd58@or-macro) (set! jOd5a@and-macro (lambda (jO148d@stx) (let ((jO148f@t jO148d@stx)) (let ((jO1491@ls/false (jOd78@syntax-dispatch jO148f@t '(_)))) (if jO1491@ls/false (apply (lambda () '#t) jO1491@ls/false) (let ((jO1493@t jO148f@t)) (let ((jO1495@ls/false (jOd78@syntax-dispatch jO1493@t '(_ any . each-any)))) (if jO1495@ls/false (apply (lambda (jO1497@e jO1498@e*) (jOd2e@bless (let jO149f@f ((jO149b@e jO1497@e) (jO149c@e* jO1498@e*)) (if (null? jO149c@e*) (list 'begin '#f jO149b@e) (cons 'if (cons jO149b@e (cons (jO149f@f (car jO149c@e*) (cdr jO149c@e*)) '(#f)))))))) jO1495@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1493@t))))))))) (set! jO283f@jOd5a@and-macro jOd5a@and-macro) (set! jOd5c@cond-macro (lambda (jO14a1@stx) (let ((jO14a3@t jO14a1@stx)) (let ((jO14a5@ls/false (jOd78@syntax-dispatch jO14a3@t '(_ any . each-any)))) (if jO14a5@ls/false (apply (lambda (jO14a7@cls jO14a8@cls*) (jOd2e@bless (let jO14af@f ((jO14ab@cls jO14a7@cls) (jO14ac@cls* jO14a8@cls*)) (if (null? jO14ac@cls*) (let ((jO14b1@t jO14ab@cls)) (let ((jO14b3@ls/false (jOd78@syntax-dispatch jO14b1@t '(#(scheme-id else) any . each-any)))) (if jO14b3@ls/false (apply (lambda (jO14b5@e jO14b6@e*) (cons 'begin (cons jO14b5@e jO14b6@e*))) jO14b3@ls/false) (let ((jO14b9@t jO14b1@t)) (let ((jO14bb@ls/false (jOd78@syntax-dispatch jO14b9@t '(any #(scheme-id =>) any)))) (if jO14bb@ls/false (apply (lambda (jO14bd@e jO14be@p) (list 'let (list (list 't jO14bd@e)) (list 'if 't (cons jO14be@p '(t))))) jO14bb@ls/false) (let ((jO14c1@t jO14b9@t)) (let ((jO14c3@ls/false (jOd78@syntax-dispatch jO14c1@t '(any)))) (if jO14c3@ls/false (apply (lambda (jO14c5@e) (cons 'or (cons jO14c5@e '((if #f #f))))) jO14c3@ls/false) (let ((jO14c7@t jO14c1@t)) (let ((jO14c9@ls/false (jOd78@syntax-dispatch jO14c7@t '(any . each-any)))) (if jO14c9@ls/false (apply (lambda (jO14cb@e jO14cc@e*) (list 'if jO14cb@e (cons 'begin jO14cc@e*))) jO14c9@ls/false) (let ((jO14cf@t jO14c7@t)) (let ((jO14d1@ls/false (jOd78@syntax-dispatch jO14cf@t '_))) (if jO14d1@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid last clause" jO14a1@stx)) jO14d1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO14cf@t)))))))))))))))) (let ((jO14d3@t jO14ab@cls)) (let ((jO14d5@ls/false (jOd78@syntax-dispatch jO14d3@t '(#(scheme-id else) any . each-any)))) (if jO14d5@ls/false (apply (lambda (jO14d7@e jO14d8@e*) (jOe58@syntax-violation '#f '"incorrect position of keyword else" jO14a1@stx)) jO14d5@ls/false) (let ((jO14db@t jO14d3@t)) (let ((jO14dd@ls/false (jOd78@syntax-dispatch jO14db@t '(any #(scheme-id =>) any)))) (if jO14dd@ls/false (apply (lambda (jO14df@e jO14e0@p) (list 'let (list (list 't jO14df@e)) (list 'if 't (cons jO14e0@p '(t)) (jO14af@f (car jO14ac@cls*) (cdr jO14ac@cls*))))) jO14dd@ls/false) (let ((jO14e3@t jO14db@t)) (let ((jO14e5@ls/false (jOd78@syntax-dispatch jO14e3@t '(any)))) (if jO14e5@ls/false (apply (lambda (jO14e7@e) (list 'or jO14e7@e (jO14af@f (car jO14ac@cls*) (cdr jO14ac@cls*)))) jO14e5@ls/false) (let ((jO14e9@t jO14e3@t)) (let ((jO14eb@ls/false (jOd78@syntax-dispatch jO14e9@t '(any . each-any)))) (if jO14eb@ls/false (apply (lambda (jO14ed@e jO14ee@e*) (list 'if jO14ed@e (cons 'begin jO14ee@e*) (jO14af@f (car jO14ac@cls*) (cdr jO14ac@cls*)))) jO14eb@ls/false) (let ((jO14f1@t jO14e9@t)) (let ((jO14f3@ls/false (jOd78@syntax-dispatch jO14f1@t '_))) (if jO14f3@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid last clause" jO14a1@stx)) jO14f3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO14f1@t)))))))))))))))))))) jO14a5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO14a3@t)))))) (set! jO2840@jOd5c@cond-macro jOd5c@cond-macro) (set! jOd5e@do-include (lambda (jO14f5@stx jO14f6@id jO14f7@filename) (let ((jO14fb@filename (jOb85@stx->datum jO14f7@filename))) (begin (if (not (and (string? jO14fb@filename) (jOb71@id? jO14f6@id))) (jOe58@syntax-violation '#f '"invalid syntax" jO14f5@stx) (void)) (cons (jOd2e@bless 'begin) (with-input-from-file jO14fb@filename (lambda () (let jO14ff@f ((jO14fd@ls '())) (let ((jO1501@x (jO6b3@jO583@read-annotated))) (if (eof-object? jO1501@x) (reverse jO14fd@ls) (jO14ff@f (cons (jOb51@datum->stx jO14f6@id jO1501@x) jO14fd@ls)))))))))))) (set! jO2841@jOd5e@do-include jOd5e@do-include) (set! jOd60@include-macro (lambda (jO1503@e) (let ((jO1505@t jO1503@e)) (let ((jO1507@ls/false (jOd78@syntax-dispatch jO1505@t '(any any)))) (if jO1507@ls/false (apply (lambda (jO1509@id jO150a@filename) (jOd5e@do-include jO1503@e jO1509@id jO150a@filename)) jO1507@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1505@t)))))) (set! jO2842@jOd60@include-macro jOd60@include-macro) (set! jOd62@include-into-macro (lambda (jO150d@e) (let ((jO150f@t jO150d@e)) (let ((jO1511@ls/false (jOd78@syntax-dispatch jO150f@t '(_ any any)))) (if jO1511@ls/false (apply (lambda (jO1513@id jO1514@filename) (jOd5e@do-include jO150d@e jO1513@id jO1514@filename)) jO1511@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO150f@t)))))) (set! jO2843@jOd62@include-into-macro jOd62@include-into-macro) (set! jOd64@syntax-rules-macro (lambda (jO1517@e) (let ((jO1519@t jO1517@e)) (let ((jO151b@ls/false (jOd78@syntax-dispatch jO1519@t '(_ each-any . #(each (any any)))))) (if jO151b@ls/false (apply (lambda (jO151d@lits jO151e@pat* jO151f@tmp*) (begin (jOd7e@verify-literals jO151d@lits jO1517@e) (jOd2e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons jO151d@lits (map (lambda (jO1523@pat jO1524@tmp) (let ((jO1527@t jO1523@pat)) (let ((jO1529@ls/false (jOd78@syntax-dispatch jO1527@t '(_ . any)))) (if jO1529@ls/false (apply (lambda (jO152b@rest) (list (cons 'g jO152b@rest) (list 'syntax jO1524@tmp))) jO1529@ls/false) (let ((jO152d@t jO1527@t)) (let ((jO152f@ls/false (jOd78@syntax-dispatch jO152d@t '_))) (if jO152f@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid syntax-rules pattern" jO1517@e jO1523@pat)) jO152f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO152d@t)))))))) jO151e@pat* jO151f@tmp*)))))))) jO151b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1519@t)))))) (set! jO2844@jOd64@syntax-rules-macro jOd64@syntax-rules-macro) (set! jOd66@quasiquote-macro (letrec* ((jO1532@datum (lambda (jO1633@x) (list (jOd00@scheme-stx 'quote) (jOb59@mkstx jO1633@x '() '() '())))) (jO154e@quasicons* (lambda (jO162b@x jO162c@y) (let jO1631@f ((jO162f@x jO162b@x)) (if (null? jO162f@x) jO162c@y (jO1550@quasicons (car jO162f@x) (jO1631@f (cdr jO162f@x))))))) (jO1550@quasicons (lambda (jO1605@x jO1606@y) (let ((jO1609@t jO1606@y)) (let ((jO160b@ls/false (jOd78@syntax-dispatch jO1609@t '(#(scheme-id quote) any)))) (if jO160b@ls/false (apply (lambda (jO160d@dy) (let ((jO160f@t jO1605@x)) (let ((jO1611@ls/false (jOd78@syntax-dispatch jO160f@t '(#(scheme-id quote) any)))) (if jO1611@ls/false (apply (lambda (jO1613@dx) (list (jOd00@scheme-stx 'quote) (cons jO1613@dx jO160d@dy))) jO1611@ls/false) (let ((jO1615@t jO160f@t)) (let ((jO1617@ls/false (jOd78@syntax-dispatch jO1615@t '_))) (if jO1617@ls/false (apply (lambda () (let ((jO1619@t jO160d@dy)) (let ((jO161b@ls/false (jOd78@syntax-dispatch jO1619@t '()))) (if jO161b@ls/false (apply (lambda () (list (jOd00@scheme-stx 'list) jO1605@x)) jO161b@ls/false) (let ((jO161d@t jO1619@t)) (let ((jO161f@ls/false (jOd78@syntax-dispatch jO161d@t '_))) (if jO161f@ls/false (apply (lambda () (list (jOd00@scheme-stx 'cons) jO1605@x jO1606@y)) jO161f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO161d@t)))))))) jO1617@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1615@t)))))))) jO160b@ls/false) (let ((jO1621@t jO1609@t)) (let ((jO1623@ls/false (jOd78@syntax-dispatch jO1621@t '(#(scheme-id list) . each-any)))) (if jO1623@ls/false (apply (lambda (jO1625@stuff) (cons* (jOd00@scheme-stx 'list) jO1605@x jO1625@stuff)) jO1623@ls/false) (let ((jO1627@t jO1621@t)) (let ((jO1629@ls/false (jOd78@syntax-dispatch jO1627@t '_))) (if jO1629@ls/false (apply (lambda () (list (jOd00@scheme-stx 'cons) jO1605@x jO1606@y)) jO1629@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1627@t)))))))))))) (jO1552@quasiappend (lambda (jO15eb@x jO15ec@y) (let ((jO15ef@ls (let jO15f3@f ((jO15f1@x jO15eb@x)) (if (null? jO15f1@x) (let ((jO15f5@t jO15ec@y)) (let ((jO15f7@ls/false (jOd78@syntax-dispatch jO15f5@t '(#(scheme-id quote) ())))) (if jO15f7@ls/false (apply (lambda () '()) jO15f7@ls/false) (let ((jO15f9@t jO15f5@t)) (let ((jO15fb@ls/false (jOd78@syntax-dispatch jO15f9@t '_))) (if jO15fb@ls/false (apply (lambda () (list jO15ec@y)) jO15fb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO15f9@t))))))) (let ((jO15fd@t (car jO15f1@x))) (let ((jO15ff@ls/false (jOd78@syntax-dispatch jO15fd@t '(#(scheme-id quote) ())))) (if jO15ff@ls/false (apply (lambda () (jO15f3@f (cdr jO15f1@x))) jO15ff@ls/false) (let ((jO1601@t jO15fd@t)) (let ((jO1603@ls/false (jOd78@syntax-dispatch jO1601@t '_))) (if jO1603@ls/false (apply (lambda () (cons (car jO15f1@x) (jO15f3@f (cdr jO15f1@x)))) jO1603@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1601@t))))))))))) (if (null? jO15ef@ls) (list (jOd00@scheme-stx 'quote) '()) (if (null? (cdr jO15ef@ls)) (car jO15ef@ls) (cons* (jOd00@scheme-stx 'append) jO15ef@ls)))))) (jO1554@quasivector (lambda (jO15b9@x) (let ((jO15bb@pat-x jO15b9@x)) (let ((jO15bd@t jO15bb@pat-x)) (let ((jO15bf@ls/false (jOd78@syntax-dispatch jO15bd@t '(#(scheme-id quote) each-any)))) (if jO15bf@ls/false (apply (lambda (jO15c1@x*) (list (jOd00@scheme-stx 'quote) (list->vector jO15c1@x*))) jO15bf@ls/false) (let ((jO15c3@t jO15bd@t)) (let ((jO15c5@ls/false (jOd78@syntax-dispatch jO15c3@t '_))) (if jO15c5@ls/false (apply (lambda () (let jO15cd@f ((jO15c7@x jO15b9@x) (jO15c8@k (lambda (jO15cb@ls) (cons* (jOd00@scheme-stx 'vector) jO15cb@ls)))) (let ((jO15cf@t jO15c7@x)) (let ((jO15d1@ls/false (jOd78@syntax-dispatch jO15cf@t '(#(scheme-id quote) each-any)))) (if jO15d1@ls/false (apply (lambda (jO15d3@x*) (jO15c8@k (map (lambda (jO15d5@x) (list (jOd00@scheme-stx 'quote) jO15d5@x)) jO15d3@x*))) jO15d1@ls/false) (let ((jO15d7@t jO15cf@t)) (let ((jO15d9@ls/false (jOd78@syntax-dispatch jO15d7@t '(#(scheme-id list) . each-any)))) (if jO15d9@ls/false (apply (lambda (jO15db@x*) (jO15c8@k jO15db@x*)) jO15d9@ls/false) (let ((jO15dd@t jO15d7@t)) (let ((jO15df@ls/false (jOd78@syntax-dispatch jO15dd@t '(#(scheme-id cons) any any)))) (if jO15df@ls/false (apply (lambda (jO15e1@x jO15e2@y) (jO15cd@f jO15e2@y (lambda (jO15e5@ls) (jO15c8@k (cons jO15e1@x jO15e5@ls))))) jO15df@ls/false) (let ((jO15e7@t jO15dd@t)) (let ((jO15e9@ls/false (jOd78@syntax-dispatch jO15e7@t '_))) (if jO15e9@ls/false (apply (lambda () (list (jOd00@scheme-stx 'list->vector) jO15bb@pat-x)) jO15e9@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO15e7@t))))))))))))))) jO15c5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO15c3@t)))))))))) (jO1556@vquasi (lambda (jO1597@p jO1598@lev) (let ((jO159b@t jO1597@p)) (let ((jO159d@ls/false (jOd78@syntax-dispatch jO159b@t '(any . any)))) (if jO159d@ls/false (apply (lambda (jO159f@p jO15a0@q) (let ((jO15a3@t jO159f@p)) (let ((jO15a5@ls/false (jOd78@syntax-dispatch jO15a3@t '(#(scheme-id unquote) . each-any)))) (if jO15a5@ls/false (apply (lambda (jO15a7@p) (if (= jO1598@lev '0) (jO154e@quasicons* jO15a7@p (jO1556@vquasi jO15a0@q jO1598@lev)) (jO1550@quasicons (jO1550@quasicons (jO1532@datum 'unquote) (jO1558@quasi jO15a7@p (- jO1598@lev '1))) (jO1556@vquasi jO15a0@q jO1598@lev)))) jO15a5@ls/false) (let ((jO15a9@t jO15a3@t)) (let ((jO15ab@ls/false (jOd78@syntax-dispatch jO15a9@t '(#(scheme-id unquote-splicing) . each-any)))) (if jO15ab@ls/false (apply (lambda (jO15ad@p) (if (= jO1598@lev '0) (jO1552@quasiappend jO15ad@p (jO1556@vquasi jO15a0@q jO1598@lev)) (jO1550@quasicons (jO1550@quasicons (jO1532@datum 'unquote-splicing) (jO1558@quasi jO15ad@p (- jO1598@lev '1))) (jO1556@vquasi jO15a0@q jO1598@lev)))) jO15ab@ls/false) (let ((jO15af@t jO15a9@t)) (let ((jO15b1@ls/false (jOd78@syntax-dispatch jO15af@t 'any))) (if jO15b1@ls/false (apply (lambda (jO15b3@p) (jO1550@quasicons (jO1558@quasi jO15b3@p jO1598@lev) (jO1556@vquasi jO15a0@q jO1598@lev))) jO15b1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO15af@t))))))))))) jO159d@ls/false) (let ((jO15b5@t jO159b@t)) (let ((jO15b7@ls/false (jOd78@syntax-dispatch jO15b5@t '()))) (if jO15b7@ls/false (apply (lambda () (list (jOd00@scheme-stx 'quote) '())) jO15b7@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO15b5@t))))))))) (jO1558@quasi (lambda (jO1561@p jO1562@lev) (let ((jO1565@t jO1561@p)) (let ((jO1567@ls/false (jOd78@syntax-dispatch jO1565@t '(#(scheme-id unquote) any)))) (if jO1567@ls/false (apply (lambda (jO1569@p) (if (= jO1562@lev '0) jO1569@p (jO1550@quasicons (jO1532@datum 'unquote) (jO1558@quasi (list jO1569@p) (- jO1562@lev '1))))) jO1567@ls/false) (let ((jO156b@t jO1565@t)) (let ((jO156d@ls/false (jOd78@syntax-dispatch jO156b@t '((#(scheme-id unquote) . each-any) . any)))) (if jO156d@ls/false (apply (lambda (jO156f@p jO1570@q) (if (= jO1562@lev '0) (jO154e@quasicons* jO156f@p (jO1558@quasi jO1570@q jO1562@lev)) (jO1550@quasicons (jO1550@quasicons (jO1532@datum 'unquote) (jO1558@quasi jO156f@p (- jO1562@lev '1))) (jO1558@quasi jO1570@q jO1562@lev)))) jO156d@ls/false) (let ((jO1573@t jO156b@t)) (let ((jO1575@ls/false (jOd78@syntax-dispatch jO1573@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if jO1575@ls/false (apply (lambda (jO1577@p jO1578@q) (if (= jO1562@lev '0) (jO1552@quasiappend jO1577@p (jO1558@quasi jO1578@q jO1562@lev)) (jO1550@quasicons (jO1550@quasicons (jO1532@datum 'unquote-splicing) (jO1558@quasi jO1577@p (- jO1562@lev '1))) (jO1558@quasi jO1578@q jO1562@lev)))) jO1575@ls/false) (let ((jO157b@t jO1573@t)) (let ((jO157d@ls/false (jOd78@syntax-dispatch jO157b@t '(#(scheme-id quasiquote) any)))) (if jO157d@ls/false (apply (lambda (jO157f@p) (jO1550@quasicons (jO1532@datum 'quasiquote) (jO1558@quasi (list jO157f@p) (+ jO1562@lev '1)))) jO157d@ls/false) (let ((jO1581@t jO157b@t)) (let ((jO1583@ls/false (jOd78@syntax-dispatch jO1581@t '(any . any)))) (if jO1583@ls/false (apply (lambda (jO1585@p jO1586@q) (jO1550@quasicons (jO1558@quasi jO1585@p jO1562@lev) (jO1558@quasi jO1586@q jO1562@lev))) jO1583@ls/false) (let ((jO1589@t jO1581@t)) (let ((jO158b@ls/false (jOd78@syntax-dispatch jO1589@t '#(vector each-any)))) (if (and jO158b@ls/false (apply (lambda (jO158d@x) (not (jOb3d@stx? jO158d@x))) jO158b@ls/false)) (apply (lambda (jO158f@x) (jO1554@quasivector (jO1556@vquasi jO158f@x jO1562@lev))) jO158b@ls/false) (let ((jO1591@t jO1589@t)) (let ((jO1593@ls/false (jOd78@syntax-dispatch jO1591@t 'any))) (if jO1593@ls/false (apply (lambda (jO1595@p) (list (jOd00@scheme-stx 'quote) jO1595@p)) jO1593@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1591@t))))))))))))))))))))))))) (lambda (jO1559@x) (let ((jO155b@t jO1559@x)) (let ((jO155d@ls/false (jOd78@syntax-dispatch jO155b@t '(_ any)))) (if jO155d@ls/false (apply (lambda (jO155f@e) (jO1558@quasi jO155f@e '0)) jO155d@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO155b@t))))))) (set! jO2845@jOd66@quasiquote-macro jOd66@quasiquote-macro) (set! jOd68@quasisyntax-macro (letrec* ((jO1636@quasi (lambda (jO1651@p jO1652@lev) (let ((jO1655@t jO1651@p)) (let ((jO1657@ls/false (jOd78@syntax-dispatch jO1655@t '(#(scheme-id unsyntax) any)))) (if jO1657@ls/false (apply (lambda (jO1659@p) (if (= jO1652@lev '0) (let ((jO165b@g (gensym))) (values (list jO165b@g) (list jO1659@p) jO165b@g)) (call-with-values (lambda () (jO1636@quasi jO1659@p (- jO1652@lev '1))) (lambda (jO1663@jO165e jO1664@jO1660 jO1665@jO1662) (let ((jO1669@p jO1665@jO1662) (jO166a@rhs* jO1664@jO1660) (jO166b@lhs* jO1663@jO165e)) (values jO166b@lhs* jO166a@rhs* (list 'unsyntax jO1669@p))))))) jO1657@ls/false) (let ((jO166f@t jO1655@t)) (let ((jO1671@ls/false (jOd78@syntax-dispatch jO166f@t '#(scheme-id unsyntax)))) (if (and jO1671@ls/false (apply (lambda () (= jO1652@lev '0)) jO1671@ls/false)) (apply (lambda () (jOe58@syntax-violation '#f '"incorrect use of unsyntax" jO1651@p)) jO1671@ls/false) (let ((jO1673@t jO166f@t)) (let ((jO1675@ls/false (jOd78@syntax-dispatch jO1673@t '((#(scheme-id unsyntax) . each-any) . any)))) (if jO1675@ls/false (apply (lambda (jO1677@p* jO1678@q) (call-with-values (lambda () (jO1636@quasi jO1678@q jO1652@lev)) (lambda (jO1681@jO167c jO1682@jO167e jO1683@jO1680) (let ((jO1687@q jO1683@jO1680) (jO1688@rhs* jO1682@jO167e) (jO1689@lhs* jO1681@jO167c)) (if (= jO1652@lev '0) (let ((jO168d@g* (map (lambda (jO168f@x) (gensym)) jO1677@p*))) (values (append jO168d@g* jO1689@lhs*) (append jO1677@p* jO1688@rhs*) (append jO168d@g* jO1687@q))) (call-with-values (lambda () (jO1636@quasi jO1677@p* (- jO1652@lev '1))) (lambda (jO1697@jO1692 jO1698@jO1694 jO1699@jO1696) (let ((jO169d@p* jO1699@jO1696) (jO169e@rhs2* jO1698@jO1694) (jO169f@lhs2* jO1697@jO1692)) (values (append jO169f@lhs2* jO1689@lhs*) (append jO169e@rhs2* jO1688@rhs*) (cons (cons 'unsyntax jO169d@p*) jO1687@q)))))))))) jO1675@ls/false) (let ((jO16a3@t jO1673@t)) (let ((jO16a5@ls/false (jOd78@syntax-dispatch jO16a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if jO16a5@ls/false (apply (lambda (jO16a7@p* jO16a8@q) (call-with-values (lambda () (jO1636@quasi jO16a8@q jO1652@lev)) (lambda (jO16b1@jO16ac jO16b2@jO16ae jO16b3@jO16b0) (let ((jO16b7@q jO16b3@jO16b0) (jO16b8@rhs* jO16b2@jO16ae) (jO16b9@lhs* jO16b1@jO16ac)) (if (= jO1652@lev '0) (let ((jO16bd@g* (map (lambda (jO16bf@x) (gensym)) jO16a7@p*))) (values (append (map (lambda (jO16c1@g) (cons jO16c1@g '(...))) jO16bd@g*) jO16b9@lhs*) (append jO16a7@p* jO16b8@rhs*) (append (apply append (map (lambda (jO16c3@g) (cons jO16c3@g '(...))) jO16bd@g*)) jO16b7@q))) (call-with-values (lambda () (jO1636@quasi jO16a7@p* (- jO1652@lev '1))) (lambda (jO16cb@jO16c6 jO16cc@jO16c8 jO16cd@jO16ca) (let ((jO16d1@p* jO16cd@jO16ca) (jO16d2@rhs2* jO16cc@jO16c8) (jO16d3@lhs2* jO16cb@jO16c6)) (values (append jO16d3@lhs2* jO16b9@lhs*) (append jO16d2@rhs2* jO16b8@rhs*) (cons (cons 'unsyntax-splicing jO16d1@p*) jO16b7@q)))))))))) jO16a5@ls/false) (let ((jO16d7@t jO16a3@t)) (let ((jO16d9@ls/false (jOd78@syntax-dispatch jO16d7@t '#(scheme-id unsyntax-splicing)))) (if (and jO16d9@ls/false (apply (lambda () (= jO1652@lev '0)) jO16d9@ls/false)) (apply (lambda () (jOe58@syntax-violation '#f '"incorrect use of unsyntax-splicing" jO1651@p)) jO16d9@ls/false) (let ((jO16db@t jO16d7@t)) (let ((jO16dd@ls/false (jOd78@syntax-dispatch jO16db@t '(#(scheme-id quasisyntax) any)))) (if jO16dd@ls/false (apply (lambda (jO16df@p) (call-with-values (lambda () (jO1636@quasi jO16df@p (+ jO1652@lev '1))) (lambda (jO16e7@jO16e2 jO16e8@jO16e4 jO16e9@jO16e6) (let ((jO16ed@p jO16e9@jO16e6) (jO16ee@rhs* jO16e8@jO16e4) (jO16ef@lhs* jO16e7@jO16e2)) (values jO16ef@lhs* jO16ee@rhs* (list 'quasisyntax jO16ed@p)))))) jO16dd@ls/false) (let ((jO16f3@t jO16db@t)) (let ((jO16f5@ls/false (jOd78@syntax-dispatch jO16f3@t '(any . any)))) (if jO16f5@ls/false (apply (lambda (jO16f7@p jO16f8@q) (call-with-values (lambda () (jO1636@quasi jO16f7@p jO1652@lev)) (lambda (jO1707@jO16fc jO1708@jO16fe jO1709@jO1700) (call-with-values (lambda () (jO1636@quasi jO16f8@q jO1652@lev)) (lambda (jO170d@jO1702 jO170e@jO1704 jO170f@jO1706) (let ((jO1713@q jO170f@jO1706) (jO1714@rhs2* jO170e@jO1704) (jO1715@lhs2* jO170d@jO1702) (jO1716@p jO1709@jO1700) (jO1717@rhs* jO1708@jO16fe) (jO1718@lhs* jO1707@jO16fc)) (values (append jO1715@lhs2* jO1718@lhs*) (append jO1714@rhs2* jO1717@rhs*) (cons jO1716@p jO1713@q)))))))) jO16f5@ls/false) (let ((jO171f@t jO16f3@t)) (let ((jO1721@ls/false (jOd78@syntax-dispatch jO171f@t '#(vector each-any)))) (if jO1721@ls/false (apply (lambda (jO1723@x*) (call-with-values (lambda () (jO1636@quasi jO1723@x* jO1652@lev)) (lambda (jO172b@jO1726 jO172c@jO1728 jO172d@jO172a) (let ((jO1731@x* jO172d@jO172a) (jO1732@rhs* jO172c@jO1728) (jO1733@lhs* jO172b@jO1726)) (values jO1733@lhs* jO1732@rhs* (list->vector jO1731@x*)))))) jO1721@ls/false) (let ((jO1737@t jO171f@t)) (let ((jO1739@ls/false (jOd78@syntax-dispatch jO1737@t '_))) (if jO1739@ls/false (apply (lambda () (values '() '() jO1651@p)) jO1739@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1737@t))))))))))))))))))))))))))))))) (lambda (jO1637@x) (let ((jO1639@t jO1637@x)) (let ((jO163b@ls/false (jOd78@syntax-dispatch jO1639@t '(_ any)))) (if jO163b@ls/false (apply (lambda (jO163d@e) (call-with-values (lambda () (jO1636@quasi jO163d@e '0)) (lambda (jO1645@jO1640 jO1646@jO1642 jO1647@jO1644) (let ((jO164b@v jO1647@jO1644) (jO164c@rhs* jO1646@jO1642) (jO164d@lhs* jO1645@jO1640)) (jOd2e@bless (list 'syntax-case (cons 'list jO164c@rhs*) '() (list jO164d@lhs* (list 'syntax jO164b@v)))))))) jO163b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1639@t))))))) (set! jO2846@jOd68@quasisyntax-macro jOd68@quasisyntax-macro) (set! jOd6a@define-struct-macro (lambda (jO173b@stx) (jOe58@syntax-violation '#f '"define-struct not supported" jO173b@stx))) (set! jO2847@jOd6a@define-struct-macro jOd6a@define-struct-macro) (set! jOd6c@define-record-type-macro (lambda (jO173d@x) (letrec* ((jO1740@id (lambda (jO1933@ctxt . jO1935@str*) (jOe5c@datum->syntax jO1933@ctxt (string->symbol (apply string-append (map (lambda (jO1937@x) (if (symbol? jO1937@x) (symbol->string jO1937@x) (if (string? jO1937@x) jO1937@x (assertion-violation 'define-record-type '"BUG")))) jO1935@str*)))))) (jO1742@get-record-name (lambda (jO1921@spec) (let ((jO1923@t jO1921@spec)) (let ((jO1925@ls/false (jOd78@syntax-dispatch jO1923@t '(any any any)))) (if jO1925@ls/false (apply (lambda (jO1927@foo jO1928@make-foo jO1929@foo?) jO1927@foo) jO1925@ls/false) (let ((jO192d@t jO1923@t)) (let ((jO192f@ls/false (jOd78@syntax-dispatch jO192d@t 'any))) (if jO192f@ls/false (apply (lambda (jO1931@foo) jO1931@foo) jO192f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO192d@t))))))))) (jO1744@get-record-constructor-name (lambda (jO190d@spec) (let ((jO190f@t jO190d@spec)) (let ((jO1911@ls/false (jOd78@syntax-dispatch jO190f@t '(any any any)))) (if jO1911@ls/false (apply (lambda (jO1913@foo jO1914@make-foo jO1915@foo?) jO1914@make-foo) jO1911@ls/false) (let ((jO1919@t jO190f@t)) (let ((jO191b@ls/false (jOd78@syntax-dispatch jO1919@t 'any))) (if (and jO191b@ls/false (apply (lambda (jO191d@foo) (jOb71@id? jO191d@foo)) jO191b@ls/false)) (apply (lambda (jO191f@foo) (jO1740@id jO191f@foo '"make-" (jOb85@stx->datum jO191f@foo))) jO191b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1919@t))))))))) (jO1746@get-record-predicate-name (lambda (jO18f9@spec) (let ((jO18fb@t jO18f9@spec)) (let ((jO18fd@ls/false (jOd78@syntax-dispatch jO18fb@t '(any any any)))) (if jO18fd@ls/false (apply (lambda (jO18ff@foo jO1900@make-foo jO1901@foo?) jO1901@foo?) jO18fd@ls/false) (let ((jO1905@t jO18fb@t)) (let ((jO1907@ls/false (jOd78@syntax-dispatch jO1905@t 'any))) (if (and jO1907@ls/false (apply (lambda (jO1909@foo) (jOb71@id? jO1909@foo)) jO1907@ls/false)) (apply (lambda (jO190b@foo) (jO1740@id jO190b@foo (jOb85@stx->datum jO190b@foo) '"?")) jO1907@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1905@t))))))))) (jO1748@get-clause (lambda (jO18e7@id jO18e8@ls) (let ((jO18eb@t jO18e8@ls)) (let ((jO18ed@ls/false (jOd78@syntax-dispatch jO18eb@t '()))) (if jO18ed@ls/false (apply (lambda () '#f) jO18ed@ls/false) (let ((jO18ef@t jO18eb@t)) (let ((jO18f1@ls/false (jOd78@syntax-dispatch jO18ef@t '((any . any) . any)))) (if jO18f1@ls/false (apply (lambda (jO18f3@x jO18f4@rest jO18f5@ls) (if (jOb77@free-id=? (jOd2e@bless jO18e7@id) jO18f3@x) (cons jO18f3@x jO18f4@rest) (jO1748@get-clause jO18e7@id jO18f5@ls))) jO18f1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18ef@t))))))))) (jO174a@foo-rtd-code (lambda (jO1895@name jO1896@clause* jO1897@parent-rtd-code) (letrec* ((jO189c@convert-field-spec* (lambda (jO18cd@ls) (list->vector (map (lambda (jO18cf@x) (let ((jO18d1@t jO18cf@x)) (let ((jO18d3@ls/false (jOd78@syntax-dispatch jO18d1@t '(#(scheme-id mutable) any . any)))) (if jO18d3@ls/false (apply (lambda (jO18d5@name jO18d6@rest) (list 'mutable jO18d5@name)) jO18d3@ls/false) (let ((jO18d9@t jO18d1@t)) (let ((jO18db@ls/false (jOd78@syntax-dispatch jO18d9@t '(#(scheme-id immutable) any . any)))) (if jO18db@ls/false (apply (lambda (jO18dd@name jO18de@rest) (list 'immutable jO18dd@name)) jO18db@ls/false) (let ((jO18e1@t jO18d9@t)) (let ((jO18e3@ls/false (jOd78@syntax-dispatch jO18e1@t 'any))) (if jO18e3@ls/false (apply (lambda (jO18e5@name) (list 'immutable jO18e5@name)) jO18e3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18e1@t))))))))))) jO18cd@ls))))) (let ((jO189d@uid-code (let ((jO18a5@t (jO1748@get-clause 'nongenerative jO1896@clause*))) (let ((jO18a7@ls/false (jOd78@syntax-dispatch jO18a5@t '(_)))) (if jO18a7@ls/false (apply (lambda () (list 'quote (gensym))) jO18a7@ls/false) (let ((jO18a9@t jO18a5@t)) (let ((jO18ab@ls/false (jOd78@syntax-dispatch jO18a9@t '(_ any)))) (if jO18ab@ls/false (apply (lambda (jO18ad@uid) (list 'quote jO18ad@uid)) jO18ab@ls/false) (let ((jO18af@t jO18a9@t)) (let ((jO18b1@ls/false (jOd78@syntax-dispatch jO18af@t '_))) (if jO18b1@ls/false (apply (lambda () '#f) jO18b1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18af@t))))))))))) (jO189e@sealed? (let ((jO18b3@t (jO1748@get-clause 'sealed jO1896@clause*))) (let ((jO18b5@ls/false (jOd78@syntax-dispatch jO18b3@t '(_ #(atom #t))))) (if jO18b5@ls/false (apply (lambda () '#t) jO18b5@ls/false) (let ((jO18b7@t jO18b3@t)) (let ((jO18b9@ls/false (jOd78@syntax-dispatch jO18b7@t '_))) (if jO18b9@ls/false (apply (lambda () '#f) jO18b9@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18b7@t)))))))) (jO189f@opaque? (let ((jO18bb@t (jO1748@get-clause 'opaque jO1896@clause*))) (let ((jO18bd@ls/false (jOd78@syntax-dispatch jO18bb@t '(_ #(atom #t))))) (if jO18bd@ls/false (apply (lambda () '#t) jO18bd@ls/false) (let ((jO18bf@t jO18bb@t)) (let ((jO18c1@ls/false (jOd78@syntax-dispatch jO18bf@t '_))) (if jO18c1@ls/false (apply (lambda () '#f) jO18c1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18bf@t)))))))) (jO18a0@fields (let ((jO18c3@t (jO1748@get-clause 'fields jO1896@clause*))) (let ((jO18c5@ls/false (jOd78@syntax-dispatch jO18c3@t '(_ . each-any)))) (if jO18c5@ls/false (apply (lambda (jO18c7@field-spec*) (list 'quote (jO189c@convert-field-spec* jO18c7@field-spec*))) jO18c5@ls/false) (let ((jO18c9@t jO18c3@t)) (let ((jO18cb@ls/false (jOd78@syntax-dispatch jO18c9@t '_))) (if jO18cb@ls/false (apply (lambda () ''#()) jO18cb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO18c9@t))))))))) (jOd2e@bless (list 'make-record-type-descriptor (list 'quote jO1895@name) jO1897@parent-rtd-code jO189d@uid-code jO189e@sealed? jO189f@opaque? jO18a0@fields)))))) (jO174c@parent-rtd-code (lambda (jO187d@clause*) (let ((jO187f@t (jO1748@get-clause 'parent jO187d@clause*))) (let ((jO1881@ls/false (jOd78@syntax-dispatch jO187f@t '(_ any)))) (if jO1881@ls/false (apply (lambda (jO1883@name) (list 'record-type-descriptor jO1883@name)) jO1881@ls/false) (let ((jO1885@t jO187f@t)) (let ((jO1887@ls/false (jOd78@syntax-dispatch jO1885@t '#(atom #f)))) (if jO1887@ls/false (apply (lambda () (let ((jO1889@t (jO1748@get-clause 'parent-rtd jO187d@clause*))) (let ((jO188b@ls/false (jOd78@syntax-dispatch jO1889@t '(_ any any)))) (if jO188b@ls/false (apply (lambda (jO188d@rtd jO188e@rcd) jO188d@rtd) jO188b@ls/false) (let ((jO1891@t jO1889@t)) (let ((jO1893@ls/false (jOd78@syntax-dispatch jO1891@t '#(atom #f)))) (if jO1893@ls/false (apply (lambda () '#f) jO1893@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1891@t)))))))) jO1887@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1885@t))))))))) (jO174e@parent-rcd-code (lambda (jO1865@clause*) (let ((jO1867@t (jO1748@get-clause 'parent jO1865@clause*))) (let ((jO1869@ls/false (jOd78@syntax-dispatch jO1867@t '(_ any)))) (if jO1869@ls/false (apply (lambda (jO186b@name) (list 'record-constructor-descriptor jO186b@name)) jO1869@ls/false) (let ((jO186d@t jO1867@t)) (let ((jO186f@ls/false (jOd78@syntax-dispatch jO186d@t '#(atom #f)))) (if jO186f@ls/false (apply (lambda () (let ((jO1871@t (jO1748@get-clause 'parent-rtd jO1865@clause*))) (let ((jO1873@ls/false (jOd78@syntax-dispatch jO1871@t '(_ any any)))) (if jO1873@ls/false (apply (lambda (jO1875@rtd jO1876@rcd) jO1876@rcd) jO1873@ls/false) (let ((jO1879@t jO1871@t)) (let ((jO187b@ls/false (jOd78@syntax-dispatch jO1879@t '#(atom #f)))) (if jO187b@ls/false (apply (lambda () '#f) jO187b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1879@t)))))))) jO186f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO186d@t))))))))) (jO1750@foo-rcd-code (lambda (jO185d@clause* jO185e@foo-rtd jO185f@protocol jO1860@parent-rcd-code) (list 'make-record-constructor-descriptor jO185e@foo-rtd jO1860@parent-rcd-code jO185f@protocol))) (jO1752@get-protocol-code (lambda (jO1851@clause*) (let ((jO1853@t (jO1748@get-clause 'protocol jO1851@clause*))) (let ((jO1855@ls/false (jOd78@syntax-dispatch jO1853@t '(_ any)))) (if jO1855@ls/false (apply (lambda (jO1857@expr) jO1857@expr) jO1855@ls/false) (let ((jO1859@t jO1853@t)) (let ((jO185b@ls/false (jOd78@syntax-dispatch jO1859@t '_))) (if jO185b@ls/false (apply (lambda () '#f) jO185b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1859@t))))))))) (jO1754@get-fields (lambda (jO183f@clause*) (let ((jO1841@t jO183f@clause*)) (let ((jO1843@ls/false (jOd78@syntax-dispatch jO1841@t '()))) (if jO1843@ls/false (apply (lambda () '()) jO1843@ls/false) (let ((jO1845@t jO1841@t)) (let ((jO1847@ls/false (jOd78@syntax-dispatch jO1845@t '((#(scheme-id fields) . each-any) . _)))) (if jO1847@ls/false (apply (lambda (jO1849@f*) jO1849@f*) jO1847@ls/false) (let ((jO184b@t jO1845@t)) (let ((jO184d@ls/false (jOd78@syntax-dispatch jO184b@t '(_ . any)))) (if jO184d@ls/false (apply (lambda (jO184f@rest) (jO1754@get-fields jO184f@rest)) jO184d@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO184b@t)))))))))))) (jO1756@get-mutator-indices (lambda (jO1827@fields) (let jO182d@f ((jO1829@fields jO1827@fields) (jO182a@i '0)) (let ((jO182f@t jO1829@fields)) (let ((jO1831@ls/false (jOd78@syntax-dispatch jO182f@t '()))) (if jO1831@ls/false (apply (lambda () '()) jO1831@ls/false) (let ((jO1833@t jO182f@t)) (let ((jO1835@ls/false (jOd78@syntax-dispatch jO1833@t '((#(scheme-id mutable) . _) . any)))) (if jO1835@ls/false (apply (lambda (jO1837@rest) (cons jO182a@i (jO182d@f jO1837@rest (+ jO182a@i '1)))) jO1835@ls/false) (let ((jO1839@t jO1833@t)) (let ((jO183b@ls/false (jOd78@syntax-dispatch jO1839@t '(_ . any)))) (if jO183b@ls/false (apply (lambda (jO183d@rest) (jO182d@f jO183d@rest (+ jO182a@i '1))) jO183b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1839@t))))))))))))) (jO1758@get-mutators (lambda (jO17fd@foo jO17fe@fields) (letrec* ((jO1802@gen-name (lambda (jO1825@x) (jOe5c@datum->syntax jO17fd@foo (string->symbol (string-append (symbol->string (jOe5e@syntax->datum jO17fd@foo)) '"-" (symbol->string (jOe5e@syntax->datum jO1825@x)) '"-set!")))))) (let jO1805@f ((jO1803@fields jO17fe@fields)) (let ((jO1807@t jO1803@fields)) (let ((jO1809@ls/false (jOd78@syntax-dispatch jO1807@t '()))) (if jO1809@ls/false (apply (lambda () '()) jO1809@ls/false) (let ((jO180b@t jO1807@t)) (let ((jO180d@ls/false (jOd78@syntax-dispatch jO180b@t '((#(scheme-id mutable) any any any) . any)))) (if jO180d@ls/false (apply (lambda (jO180f@name jO1810@accessor jO1811@mutator jO1812@rest) (cons jO1811@mutator (jO1805@f jO1812@rest))) jO180d@ls/false) (let ((jO1817@t jO180b@t)) (let ((jO1819@ls/false (jOd78@syntax-dispatch jO1817@t '((#(scheme-id mutable) any) . any)))) (if jO1819@ls/false (apply (lambda (jO181b@name jO181c@rest) (cons (jO1802@gen-name jO181b@name) (jO1805@f jO181c@rest))) jO1819@ls/false) (let ((jO181f@t jO1817@t)) (let ((jO1821@ls/false (jOd78@syntax-dispatch jO181f@t '(_ . any)))) (if jO1821@ls/false (apply (lambda (jO1823@rest) (jO1805@f jO1823@rest)) jO1821@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO181f@t))))))))))))))))) (jO175a@get-accessors (lambda (jO17b9@foo jO17ba@fields) (letrec* ((jO17be@gen-name (lambda (jO17fb@x) (jOe5c@datum->syntax jO17b9@foo (string->symbol (string-append (symbol->string (jOe5e@syntax->datum jO17b9@foo)) '"-" (symbol->string (jOe5e@syntax->datum jO17fb@x)))))))) (map (lambda (jO17bf@field) (let ((jO17c1@t jO17bf@field)) (let ((jO17c3@ls/false (jOd78@syntax-dispatch jO17c1@t '(#(scheme-id mutable) any any any)))) (if (and jO17c3@ls/false (apply (lambda (jO17c5@name jO17c6@accessor jO17c7@mutator) (jOb71@id? jO17c6@accessor)) jO17c3@ls/false)) (apply (lambda (jO17cb@name jO17cc@accessor jO17cd@mutator) jO17cc@accessor) jO17c3@ls/false) (let ((jO17d1@t jO17c1@t)) (let ((jO17d3@ls/false (jOd78@syntax-dispatch jO17d1@t '(#(scheme-id immutable) any any)))) (if (and jO17d3@ls/false (apply (lambda (jO17d5@name jO17d6@accessor) (jOb71@id? jO17d6@accessor)) jO17d3@ls/false)) (apply (lambda (jO17d9@name jO17da@accessor) jO17da@accessor) jO17d3@ls/false) (let ((jO17dd@t jO17d1@t)) (let ((jO17df@ls/false (jOd78@syntax-dispatch jO17dd@t '(#(scheme-id mutable) any)))) (if (and jO17df@ls/false (apply (lambda (jO17e1@name) (jOb71@id? jO17e1@name)) jO17df@ls/false)) (apply (lambda (jO17e3@name) (jO17be@gen-name jO17e3@name)) jO17df@ls/false) (let ((jO17e5@t jO17dd@t)) (let ((jO17e7@ls/false (jOd78@syntax-dispatch jO17e5@t '(#(scheme-id immutable) any)))) (if (and jO17e7@ls/false (apply (lambda (jO17e9@name) (jOb71@id? jO17e9@name)) jO17e7@ls/false)) (apply (lambda (jO17eb@name) (jO17be@gen-name jO17eb@name)) jO17e7@ls/false) (let ((jO17ed@t jO17e5@t)) (let ((jO17ef@ls/false (jOd78@syntax-dispatch jO17ed@t 'any))) (if (and jO17ef@ls/false (apply (lambda (jO17f1@name) (jOb71@id? jO17f1@name)) jO17ef@ls/false)) (apply (lambda (jO17f3@name) (jO17be@gen-name jO17f3@name)) jO17ef@ls/false) (let ((jO17f5@t jO17ed@t)) (let ((jO17f7@ls/false (jOd78@syntax-dispatch jO17f5@t 'any))) (if jO17f7@ls/false (apply (lambda (jO17f9@others) (jOe58@syntax-violation '#f '"invalid field spec" jO17bf@field)) jO17f7@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO17f5@t)))))))))))))))))))) jO17ba@fields)))) (jO175c@enumerate (lambda (jO17b1@ls) (let jO17b7@f ((jO17b3@ls jO17b1@ls) (jO17b4@i '0)) (if (null? jO17b3@ls) '() (cons jO17b4@i (jO17b7@f (cdr jO17b3@ls) (+ jO17b4@i '1))))))) (jO175e@do-define-record (lambda (jO1789@namespec jO178a@clause*) (let ((jO178d@foo (jO1742@get-record-name jO1789@namespec))) (let ((jO178f@foo-rtd (gensym))) (let ((jO1791@foo-rcd (gensym))) (let ((jO1793@protocol (gensym))) (let ((jO1795@make-foo (jO1744@get-record-constructor-name jO1789@namespec))) (let ((jO1797@fields (jO1754@get-fields jO178a@clause*))) (let ((jO1799@idx* (jO175c@enumerate jO1797@fields))) (let ((jO179b@foo-x* (jO175a@get-accessors jO178d@foo jO1797@fields))) (let ((jO179d@set-foo-x!* (jO1758@get-mutators jO178d@foo jO1797@fields))) (let ((jO179f@set-foo-idx* (jO1756@get-mutator-indices jO1797@fields))) (let ((jO17a1@foo? (jO1746@get-record-predicate-name jO1789@namespec))) (let ((jO17a3@foo-rtd-code (jO174a@foo-rtd-code jO178d@foo jO178a@clause* (jO174c@parent-rtd-code jO178a@clause*)))) (let ((jO17a5@foo-rcd-code (jO1750@foo-rcd-code jO178a@clause* jO178f@foo-rtd jO1793@protocol (jO174e@parent-rcd-code jO178a@clause*)))) (let ((jO17a7@protocol-code (jO1752@get-protocol-code jO178a@clause*))) (jOd2e@bless (cons 'begin (cons (list 'define jO178f@foo-rtd jO17a3@foo-rtd-code) (cons (list 'define jO1793@protocol jO17a7@protocol-code) (cons (list 'define jO1791@foo-rcd jO17a5@foo-rcd-code) (cons (list 'define-syntax jO178d@foo (list 'list ''$rtd (list 'syntax jO178f@foo-rtd) (list 'syntax jO1791@foo-rcd))) (cons (list 'define jO17a1@foo? (list 'record-predicate jO178f@foo-rtd)) (cons (list 'define jO1795@make-foo (list 'record-constructor jO1791@foo-rcd)) (append (map (lambda (jO17a9@foo-x jO17aa@idx) (list 'define jO17a9@foo-x (list 'record-accessor jO178f@foo-rtd jO17aa@idx))) jO179b@foo-x* jO1799@idx*) (map (lambda (jO17ad@set-foo-x! jO17ae@idx) (list 'define jO17ad@set-foo-x! (list 'record-mutator jO178f@foo-rtd jO17ae@idx))) jO179d@set-foo-x!* jO179f@set-foo-idx*)))))))))))))))))))))))))) (jO1760@verify-clauses (lambda (jO1769@x jO176a@cls*) (letrec* ((jO176e@valid-kwds (map jOd2e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (jO1770@free-id-member? (lambda (jO1785@x jO1786@ls) (and (pair? jO1786@ls) (or (jOb77@free-id=? jO1785@x (car jO1786@ls)) (jO1770@free-id-member? jO1785@x (cdr jO1786@ls))))))) (let jO1775@f ((jO1771@cls* jO176a@cls*) (jO1772@seen* '())) (if (not (null? jO1771@cls*)) (let ((jO1777@t (car jO1771@cls*))) (let ((jO1779@ls/false (jOd78@syntax-dispatch jO1777@t '(any . any)))) (if jO1779@ls/false (apply (lambda (jO177b@kwd jO177c@rest) (if (or (not (jOb71@id? jO177b@kwd)) (not (jO1770@free-id-member? jO177b@kwd jO176e@valid-kwds))) (jOe58@syntax-violation '#f '"not a valid define-record-type keyword" jO177b@kwd) (if (jOb7d@bound-id-member? jO177b@kwd jO1772@seen*) (jOe58@syntax-violation '#f '"duplicate use of keyword " jO1769@x jO177b@kwd) (jO1775@f (cdr jO1771@cls*) (cons jO177b@kwd jO1772@seen*))))) jO1779@ls/false) (let ((jO177f@t jO1777@t)) (let ((jO1781@ls/false (jOd78@syntax-dispatch jO177f@t 'any))) (if jO1781@ls/false (apply (lambda (jO1783@cls) (jOe58@syntax-violation '#f '"malformed define-record-type clause" jO1783@cls)) jO1781@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO177f@t))))))) (void))))))) (let ((jO1761@t jO173d@x)) (let ((jO1763@ls/false (jOd78@syntax-dispatch jO1761@t '(_ any . each-any)))) (if jO1763@ls/false (apply (lambda (jO1765@namespec jO1766@clause*) (begin (jO1760@verify-clauses jO173d@x jO1766@clause*) (jO175e@do-define-record jO1765@namespec jO1766@clause*))) jO1763@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1761@t))))))) (set! jO2848@jOd6c@define-record-type-macro jOd6c@define-record-type-macro) (set! jOd6e@define-condition-type-macro (lambda (jO1939@x) (letrec* ((jO193c@mkname (lambda (jO1969@name jO196a@suffix) (jOe5c@datum->syntax jO1969@name (string->symbol (string-append (symbol->string (jOe5e@syntax->datum jO1969@name)) jO196a@suffix)))))) (let ((jO193d@t jO1939@x)) (let ((jO193f@ls/false (jOd78@syntax-dispatch jO193d@t '(any any any any any . #(each (any any)))))) (if (and jO193f@ls/false (apply (lambda (jO1941@ctxt jO1942@name jO1943@super jO1944@constructor jO1945@predicate jO1946@field* jO1947@accessor*) (and (jOb71@id? jO1942@name) (jOb71@id? jO1943@super) (jOb71@id? jO1944@constructor) (jOb71@id? jO1945@predicate) (for-all jOb71@id? jO1946@field*) (for-all jOb71@id? jO1947@accessor*))) jO193f@ls/false)) (apply (lambda (jO194f@ctxt jO1950@name jO1951@super jO1952@constructor jO1953@predicate jO1954@field* jO1955@accessor*) (let ((jO195d@aux-accessor* (map (lambda (jO195f@x) (gensym)) jO1955@accessor*))) (jOd2e@bless (cons 'begin (cons (cons 'define-record-type (cons (list jO1950@name jO1952@constructor (gensym)) (cons (list 'parent jO1951@super) (cons (cons 'fields (map (lambda (jO1961@field jO1962@aux) (list 'immutable jO1961@field jO1962@aux)) jO1954@field* jO195d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define jO1953@predicate (list 'condition-predicate (list 'record-type-descriptor jO1950@name))) (map (lambda (jO1965@accessor jO1966@aux) (list 'define jO1965@accessor (list 'condition-accessor (list 'record-type-descriptor jO1950@name) jO1966@aux))) jO1955@accessor* jO195d@aux-accessor*))))))) jO193f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO193d@t))))))) (set! jO2849@jOd6e@define-condition-type-macro jOd6e@define-condition-type-macro) (set! jOd70@incorrect-usage-macro (lambda (jO196d@e) (jOe58@syntax-violation '#f '"incorrect usage of auxiliary keyword" jO196d@e))) (set! jO284a@jOd70@incorrect-usage-macro jOd70@incorrect-usage-macro) (set! jOd72@parameterize-macro (lambda (jO196f@e) (let ((jO1971@t jO196f@e)) (let ((jO1973@ls/false (jOd78@syntax-dispatch jO1971@t '(_ () any . each-any)))) (if jO1973@ls/false (apply (lambda (jO1975@b jO1976@b*) (jOd2e@bless (cons 'let (cons '() (cons jO1975@b jO1976@b*))))) jO1973@ls/false) (let ((jO1979@t jO1971@t)) (let ((jO197b@ls/false (jOd78@syntax-dispatch jO1979@t '(_ #(each (any any)) any . each-any)))) (if jO197b@ls/false (apply (lambda (jO197d@olhs* jO197e@orhs* jO197f@b jO1980@b*) (let ((jO1985@lhs* (jOe46@generate-temporaries jO197d@olhs*)) (jO1986@rhs* (jOe46@generate-temporaries jO197e@orhs*))) (jOd2e@bless (cons (list 'lambda (append jO1985@lhs* jO1986@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (jO1989@lhs jO198a@rhs) (list 'let (list (list 't (list jO1989@lhs))) (list jO1989@lhs jO198a@rhs) (cons 'set! (cons jO198a@rhs '(t))))) jO1985@lhs* jO1986@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons jO197f@b jO1980@b*))) '(swap)))))) (append jO197d@olhs* jO197e@orhs*))))) jO197b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1979@t))))))))) (set! jO284b@jOd72@parameterize-macro jOd72@parameterize-macro) (set! jOd74@foreign-call-transformer (lambda (jO198d@e jO198e@r jO198f@mr) (let ((jO1993@t jO198d@e)) (let ((jO1995@ls/false (jOd78@syntax-dispatch jO1993@t '(_ any . each-any)))) (if jO1995@ls/false (apply (lambda (jO1997@name jO1998@arg*) (cons 'foreign-call (cons (jOd9a@chi-expr jO1997@name jO198e@r jO198f@mr) (jOd96@chi-expr* jO1998@arg* jO198e@r jO198f@mr)))) jO1995@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1993@t)))))) (set! jO284c@jOd74@foreign-call-transformer jOd74@foreign-call-transformer) (set! jOd76@convert-pattern (lambda (jO199b@pattern jO199c@keys) (letrec* ((jO19a0@cvt* (lambda (jO1a3f@p* jO1a40@n jO1a41@ids) (if (null? jO1a3f@p*) (values '() jO1a41@ids) (call-with-values (lambda () (jO19a0@cvt* (cdr jO1a3f@p*) jO1a40@n jO1a41@ids)) (lambda (jO1a49@jO1a46 jO1a4a@jO1a48) (let ((jO1a4d@ids jO1a4a@jO1a48) (jO1a4e@y jO1a49@jO1a46)) (call-with-values (lambda () (jO19a2@cvt (car jO1a3f@p*) jO1a40@n jO1a4d@ids)) (lambda (jO1a55@jO1a52 jO1a56@jO1a54) (let ((jO1a59@ids jO1a56@jO1a54) (jO1a5a@x jO1a55@jO1a52)) (values (cons jO1a5a@x jO1a4e@y) jO1a59@ids)))))))))) (jO19a2@cvt (lambda (jO19a3@p jO19a4@n jO19a5@ids) (let ((jO19a9@t jO19a3@p)) (let ((jO19ab@ls/false (jOd78@syntax-dispatch jO19a9@t 'any))) (if (and jO19ab@ls/false (apply (lambda (jO19ad@id) (jOb71@id? jO19ad@id)) jO19ab@ls/false)) (apply (lambda (jO19af@id) (if (jOb7d@bound-id-member? jO19a3@p jO199c@keys) (values (vector 'free-id jO19a3@p) jO19a5@ids) (if (jOb77@free-id=? jO19a3@p (jOd00@scheme-stx '_)) (values '_ jO19a5@ids) (values 'any (cons (cons jO19a3@p jO19a4@n) jO19a5@ids))))) jO19ab@ls/false) (let ((jO19b1@t jO19a9@t)) (let ((jO19b3@ls/false (jOd78@syntax-dispatch jO19b1@t '(any any)))) (if (and jO19b3@ls/false (apply (lambda (jO19b5@p jO19b6@dots) (jOd7a@ellipsis? jO19b6@dots)) jO19b3@ls/false)) (apply (lambda (jO19b9@p jO19ba@dots) (call-with-values (lambda () (jO19a2@cvt jO19b9@p (+ jO19a4@n '1) jO19a5@ids)) (lambda (jO19c1@jO19be jO19c2@jO19c0) (let ((jO19c5@ids jO19c2@jO19c0) (jO19c6@p jO19c1@jO19be)) (values (if (eq? jO19c6@p 'any) 'each-any (vector 'each jO19c6@p)) jO19c5@ids))))) jO19b3@ls/false) (let ((jO19c9@t jO19b1@t)) (let ((jO19cb@ls/false (jOd78@syntax-dispatch jO19c9@t '(any any . #(each+ any () any))))) (if (and jO19cb@ls/false (apply (lambda (jO19cd@x jO19ce@dots jO19cf@ys jO19d0@z) (jOd7a@ellipsis? jO19ce@dots)) jO19cb@ls/false)) (apply (lambda (jO19d5@x jO19d6@dots jO19d7@ys jO19d8@z) (call-with-values (lambda () (jO19a2@cvt jO19d8@z jO19a4@n jO19a5@ids)) (lambda (jO19e1@jO19de jO19e2@jO19e0) (let ((jO19e5@ids jO19e2@jO19e0) (jO19e6@z jO19e1@jO19de)) (call-with-values (lambda () (jO19a0@cvt* jO19d7@ys jO19a4@n jO19e5@ids)) (lambda (jO19ed@jO19ea jO19ee@jO19ec) (let ((jO19f1@ids jO19ee@jO19ec) (jO19f2@ys jO19ed@jO19ea)) (call-with-values (lambda () (jO19a2@cvt jO19d5@x (+ jO19a4@n '1) jO19f1@ids)) (lambda (jO19f9@jO19f6 jO19fa@jO19f8) (let ((jO19fd@ids jO19fa@jO19f8) (jO19fe@x jO19f9@jO19f6)) (values (vector 'each+ jO19fe@x (reverse jO19f2@ys) jO19e6@z) jO19fd@ids))))))))))) jO19cb@ls/false) (let ((jO1a01@t jO19c9@t)) (let ((jO1a03@ls/false (jOd78@syntax-dispatch jO1a01@t '(any . any)))) (if jO1a03@ls/false (apply (lambda (jO1a05@x jO1a06@y) (call-with-values (lambda () (jO19a2@cvt jO1a06@y jO19a4@n jO19a5@ids)) (lambda (jO1a0d@jO1a0a jO1a0e@jO1a0c) (let ((jO1a11@ids jO1a0e@jO1a0c) (jO1a12@y jO1a0d@jO1a0a)) (call-with-values (lambda () (jO19a2@cvt jO1a05@x jO19a4@n jO1a11@ids)) (lambda (jO1a19@jO1a16 jO1a1a@jO1a18) (let ((jO1a1d@ids jO1a1a@jO1a18) (jO1a1e@x jO1a19@jO1a16)) (values (cons jO1a1e@x jO1a12@y) jO1a1d@ids)))))))) jO1a03@ls/false) (let ((jO1a21@t jO1a01@t)) (let ((jO1a23@ls/false (jOd78@syntax-dispatch jO1a21@t '()))) (if jO1a23@ls/false (apply (lambda () (values '() jO19a5@ids)) jO1a23@ls/false) (let ((jO1a25@t jO1a21@t)) (let ((jO1a27@ls/false (jOd78@syntax-dispatch jO1a25@t '#(vector each-any)))) (if (and jO1a27@ls/false (apply (lambda (jO1a29@p) (not (jOb3d@stx? jO1a29@p))) jO1a27@ls/false)) (apply (lambda (jO1a2b@p) (call-with-values (lambda () (jO19a2@cvt jO1a2b@p jO19a4@n jO19a5@ids)) (lambda (jO1a31@jO1a2e jO1a32@jO1a30) (let ((jO1a35@ids jO1a32@jO1a30) (jO1a36@p jO1a31@jO1a2e)) (values (vector 'vector jO1a36@p) jO1a35@ids))))) jO1a27@ls/false) (let ((jO1a39@t jO1a25@t)) (let ((jO1a3b@ls/false (jOd78@syntax-dispatch jO1a39@t 'any))) (if jO1a3b@ls/false (apply (lambda (jO1a3d@datum) (values (vector 'atom (jOb85@stx->datum jO1a3d@datum)) jO19a5@ids)) jO1a3b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1a39@t))))))))))))))))))))))))) (jO19a2@cvt jO199b@pattern '0 '())))) (set! jO284d@jOd76@convert-pattern jOd76@convert-pattern) (set! jOd78@syntax-dispatch (letrec* ((jO1a5e@stx^ (lambda (jO1b39@e jO1b3a@m* jO1b3b@s* jO1b3c@ae*) (if (and (null? jO1b3a@m*) (null? jO1b3b@s*) (null? jO1b3c@ae*)) jO1b39@e (jOb59@mkstx jO1b39@e jO1b3a@m* jO1b3b@s* jO1b3c@ae*)))) (jO1a60@match-each (lambda (jO1b19@e jO1b1a@p jO1b1b@m* jO1b1c@s* jO1b1d@ae*) (if (pair? jO1b19@e) (let ((jO1b23@first (jO1a6c@match (car jO1b19@e) jO1b1a@p jO1b1b@m* jO1b1c@s* jO1b1d@ae* '()))) (and jO1b23@first (let ((jO1b25@rest (jO1a60@match-each (cdr jO1b19@e) jO1b1a@p jO1b1b@m* jO1b1c@s* jO1b1d@ae*))) (and jO1b25@rest (cons jO1b23@first jO1b25@rest))))) (if (null? jO1b19@e) '() (if (jOb3d@stx? jO1b19@e) (and (not (jOaf7@top-marked? jO1b1b@m*)) (call-with-values (lambda () (join-wraps jO1b1b@m* jO1b1c@s* jO1b1d@ae* jO1b19@e)) (lambda (jO1b2d@jO1b28 jO1b2e@jO1b2a jO1b2f@jO1b2c) (let ((jO1b33@ae* jO1b2f@jO1b2c) (jO1b34@s* jO1b2e@jO1b2a) (jO1b35@m* jO1b2d@jO1b28)) (jO1a60@match-each (jOb3f@stx-expr jO1b19@e) jO1b1a@p jO1b35@m* jO1b34@s* jO1b33@ae*))))) (if (jO6b5@jO587@annotation? jO1b19@e) (jO1a60@match-each (jO6b7@jO58b@annotation-expression jO1b19@e) jO1b1a@p jO1b1b@m* jO1b1c@s* jO1b1d@ae*) '#f)))))) (jO1a62@match-each+ (lambda (jO1ad9@e jO1ada@x-pat jO1adb@y-pat jO1adc@z-pat jO1add@m* jO1ade@s* jO1adf@ae* jO1ae0@r) (let jO1af1@f ((jO1ae9@e jO1ad9@e) (jO1aea@m* jO1add@m*) (jO1aeb@s* jO1ade@s*) (jO1aec@ae* jO1adf@ae*)) (if (pair? jO1ae9@e) (call-with-values (lambda () (jO1af1@f (cdr jO1ae9@e) jO1aea@m* jO1aeb@s* jO1aec@ae*)) (lambda (jO1af9@jO1af4 jO1afa@jO1af6 jO1afb@jO1af8) (let ((jO1aff@r jO1afb@jO1af8) (jO1b00@y-pat jO1afa@jO1af6) (jO1b01@xr* jO1af9@jO1af4)) (if jO1aff@r (if (null? jO1b00@y-pat) (let ((jO1b05@xr (jO1a6c@match (car jO1ae9@e) jO1ada@x-pat jO1aea@m* jO1aeb@s* jO1aec@ae* '()))) (if jO1b05@xr (values (cons jO1b05@xr jO1b01@xr*) jO1b00@y-pat jO1aff@r) (values '#f '#f '#f))) (values '() (cdr jO1b00@y-pat) (jO1a6c@match (car jO1ae9@e) (car jO1b00@y-pat) jO1aea@m* jO1aeb@s* jO1aec@ae* jO1aff@r))) (values '#f '#f '#f))))) (if (jOb3d@stx? jO1ae9@e) (if (jOaf7@top-marked? jO1aea@m*) (values '() jO1adb@y-pat (jO1a6c@match jO1ae9@e jO1adc@z-pat jO1aea@m* jO1aeb@s* jO1aec@ae* jO1ae0@r)) (call-with-values (lambda () (join-wraps jO1aea@m* jO1aeb@s* jO1aec@ae* jO1ae9@e)) (lambda (jO1b0d@jO1b08 jO1b0e@jO1b0a jO1b0f@jO1b0c) (let ((jO1b13@ae* jO1b0f@jO1b0c) (jO1b14@s* jO1b0e@jO1b0a) (jO1b15@m* jO1b0d@jO1b08)) (jO1af1@f (jOb3f@stx-expr jO1ae9@e) jO1b15@m* jO1b14@s* jO1b13@ae*))))) (if (jO6b5@jO587@annotation? jO1ae9@e) (jO1af1@f (jO6b7@jO58b@annotation-expression jO1ae9@e) jO1aea@m* jO1aeb@s* jO1aec@ae*) (values '() jO1adb@y-pat (jO1a6c@match jO1ae9@e jO1adc@z-pat jO1aea@m* jO1aeb@s* jO1aec@ae* jO1ae0@r)))))))) (jO1a64@match-each-any (lambda (jO1abd@e jO1abe@m* jO1abf@s* jO1ac0@ae*) (if (pair? jO1abd@e) (let ((jO1ac5@l (jO1a64@match-each-any (cdr jO1abd@e) jO1abe@m* jO1abf@s* jO1ac0@ae*))) (and jO1ac5@l (cons (jO1a5e@stx^ (car jO1abd@e) jO1abe@m* jO1abf@s* jO1ac0@ae*) jO1ac5@l))) (if (null? jO1abd@e) '() (if (jOb3d@stx? jO1abd@e) (and (not (jOaf7@top-marked? jO1abe@m*)) (call-with-values (lambda () (join-wraps jO1abe@m* jO1abf@s* jO1ac0@ae* jO1abd@e)) (lambda (jO1acd@jO1ac8 jO1ace@jO1aca jO1acf@jO1acc) (let ((jO1ad3@ae* jO1acf@jO1acc) (jO1ad4@s* jO1ace@jO1aca) (jO1ad5@m* jO1acd@jO1ac8)) (jO1a64@match-each-any (jOb3f@stx-expr jO1abd@e) jO1ad5@m* jO1ad4@s* jO1ad3@ae*))))) (if (jO6b5@jO587@annotation? jO1abd@e) (jO1a64@match-each-any (jO6b7@jO58b@annotation-expression jO1abd@e) jO1abe@m* jO1abf@s* jO1ac0@ae*) '#f)))))) (jO1a66@match-empty (lambda (jO1ab7@p jO1ab8@r) (if (null? jO1ab7@p) jO1ab8@r (if (eq? jO1ab7@p '_) jO1ab8@r (if (eq? jO1ab7@p 'any) (cons '() jO1ab8@r) (if (pair? jO1ab7@p) (jO1a66@match-empty (car jO1ab7@p) (jO1a66@match-empty (cdr jO1ab7@p) jO1ab8@r)) (if (eq? jO1ab7@p 'each-any) (cons '() jO1ab8@r) (let ((jO1abb@t (vector-ref jO1ab7@p '0))) (if (memv jO1abb@t '(each)) (jO1a66@match-empty (vector-ref jO1ab7@p '1) jO1ab8@r) (if (memv jO1abb@t '(each+)) (jO1a66@match-empty (vector-ref jO1ab7@p '1) (jO1a66@match-empty (reverse (vector-ref jO1ab7@p '2)) (jO1a66@match-empty (vector-ref jO1ab7@p '3) jO1ab8@r))) (if (memv jO1abb@t '(free-id atom)) jO1ab8@r (if (memv jO1abb@t '(scheme-id atom)) jO1ab8@r (if (memv jO1abb@t '(vector)) (jO1a66@match-empty (vector-ref jO1ab7@p '1) jO1ab8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" jO1ab7@p)))))))))))))) (jO1a68@combine (lambda (jO1ab3@r* jO1ab4@r) (if (null? (car jO1ab3@r*)) jO1ab4@r (cons (map car jO1ab3@r*) (jO1a68@combine (map cdr jO1ab3@r*) jO1ab4@r))))) (jO1a6a@match* (lambda (jO1a8f@e jO1a90@p jO1a91@m* jO1a92@s* jO1a93@ae* jO1a94@r) (if (null? jO1a90@p) (and (null? jO1a8f@e) jO1a94@r) (if (pair? jO1a90@p) (and (pair? jO1a8f@e) (jO1a6c@match (car jO1a8f@e) (car jO1a90@p) jO1a91@m* jO1a92@s* jO1a93@ae* (jO1a6c@match (cdr jO1a8f@e) (cdr jO1a90@p) jO1a91@m* jO1a92@s* jO1a93@ae* jO1a94@r))) (if (eq? jO1a90@p 'each-any) (let ((jO1a9b@l (jO1a64@match-each-any jO1a8f@e jO1a91@m* jO1a92@s* jO1a93@ae*))) (and jO1a9b@l (cons jO1a9b@l jO1a94@r))) (let ((jO1a9d@t (vector-ref jO1a90@p '0))) (if (memv jO1a9d@t '(each)) (if (null? jO1a8f@e) (jO1a66@match-empty (vector-ref jO1a90@p '1) jO1a94@r) (let ((jO1a9f@r* (jO1a60@match-each jO1a8f@e (vector-ref jO1a90@p '1) jO1a91@m* jO1a92@s* jO1a93@ae*))) (and jO1a9f@r* (jO1a68@combine jO1a9f@r* jO1a94@r)))) (if (memv jO1a9d@t '(free-id)) (and (symbol? jO1a8f@e) (jOaf7@top-marked? jO1a91@m*) (jOb77@free-id=? (jO1a5e@stx^ jO1a8f@e jO1a91@m* jO1a92@s* jO1a93@ae*) (vector-ref jO1a90@p '1)) jO1a94@r) (if (memv jO1a9d@t '(scheme-id)) (and (symbol? jO1a8f@e) (jOaf7@top-marked? jO1a91@m*) (jOb77@free-id=? (jO1a5e@stx^ jO1a8f@e jO1a91@m* jO1a92@s* jO1a93@ae*) (jOd00@scheme-stx (vector-ref jO1a90@p '1))) jO1a94@r) (if (memv jO1a9d@t '(each+)) (call-with-values (lambda () (jO1a62@match-each+ jO1a8f@e (vector-ref jO1a90@p '1) (vector-ref jO1a90@p '2) (vector-ref jO1a90@p '3) jO1a91@m* jO1a92@s* jO1a93@ae* jO1a94@r)) (lambda (jO1aa7@jO1aa2 jO1aa8@jO1aa4 jO1aa9@jO1aa6) (let ((jO1aad@r jO1aa9@jO1aa6) (jO1aae@y-pat jO1aa8@jO1aa4) (jO1aaf@xr* jO1aa7@jO1aa2)) (and jO1aad@r (null? jO1aae@y-pat) (if (null? jO1aaf@xr*) (jO1a66@match-empty (vector-ref jO1a90@p '1) jO1aad@r) (jO1a68@combine jO1aaf@xr* jO1aad@r)))))) (if (memv jO1a9d@t '(atom)) (and (fast-equal? (vector-ref jO1a90@p '1) (jOb83@strip jO1a8f@e jO1a91@m*)) jO1a94@r) (if (memv jO1a9d@t '(vector)) (and (vector? jO1a8f@e) (jO1a6c@match (vector->list jO1a8f@e) (vector-ref jO1a90@p '1) jO1a91@m* jO1a92@s* jO1a93@ae* jO1a94@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" jO1a90@p))))))))))))) (jO1a6c@match (lambda (jO1a71@e jO1a72@p jO1a73@m* jO1a74@s* jO1a75@ae* jO1a76@r) (if (not jO1a76@r) '#f (if (eq? jO1a72@p '_) jO1a76@r (if (eq? jO1a72@p 'any) (cons (jO1a5e@stx^ jO1a71@e jO1a73@m* jO1a74@s* jO1a75@ae*) jO1a76@r) (if (jOb3d@stx? jO1a71@e) (and (not (jOaf7@top-marked? jO1a73@m*)) (call-with-values (lambda () (join-wraps jO1a73@m* jO1a74@s* jO1a75@ae* jO1a71@e)) (lambda (jO1a83@jO1a7e jO1a84@jO1a80 jO1a85@jO1a82) (let ((jO1a89@ae* jO1a85@jO1a82) (jO1a8a@s* jO1a84@jO1a80) (jO1a8b@m* jO1a83@jO1a7e)) (jO1a6c@match (jOb3f@stx-expr jO1a71@e) jO1a72@p jO1a8b@m* jO1a8a@s* jO1a89@ae* jO1a76@r))))) (if (jO6b5@jO587@annotation? jO1a71@e) (jO1a6c@match (jO6b7@jO58b@annotation-expression jO1a71@e) jO1a72@p jO1a73@m* jO1a74@s* jO1a75@ae* jO1a76@r) (jO1a6a@match* jO1a71@e jO1a72@p jO1a73@m* jO1a74@s* jO1a75@ae* jO1a76@r))))))))) (lambda (jO1a6d@e jO1a6e@p) (jO1a6c@match jO1a6d@e jO1a6e@p '() '() '() '())))) (set! jO284e@jOd78@syntax-dispatch jOd78@syntax-dispatch) (set! jOd7a@ellipsis? (lambda (jO1b41@x) (and (jOb71@id? jO1b41@x) (jOb77@free-id=? jO1b41@x (jOd00@scheme-stx '...))))) (set! jO284f@jOd7a@ellipsis? jOd7a@ellipsis?) (set! jOd7c@underscore? (lambda (jO1b43@x) (and (jOb71@id? jO1b43@x) (jOb77@free-id=? jO1b43@x (jOd00@scheme-stx '_))))) (set! jO2850@jOd7c@underscore? jOd7c@underscore?) (set! jOd7e@verify-literals (lambda (jO1b45@lits jO1b46@expr) (for-each (lambda (jO1b49@x) (if (or (not (jOb71@id? jO1b49@x)) (jOd7a@ellipsis? jO1b49@x) (jOd7c@underscore? jO1b49@x)) (jOe58@syntax-violation '#f '"invalid literal" jO1b46@expr jO1b49@x) (void))) jO1b45@lits))) (set! jO2851@jOd7e@verify-literals jOd7e@verify-literals) (set! jOd80@syntax-case-transformer (letrec* ((jO1b4c@build-dispatch-call (lambda (jO1bbd@pvars jO1bbe@expr jO1bbf@y jO1bc0@r jO1bc1@mr) (let ((jO1bc7@ids (map car jO1bbd@pvars)) (jO1bc8@levels (map cdr jO1bbd@pvars))) (let ((jO1bcb@labels (map jOafd@gen-label jO1bc7@ids)) (jO1bcc@new-vars (map jOaf9@gen-lexical jO1bc7@ids))) (let ((jO1bcf@body (jOd9a@chi-expr (jOb5d@add-subst (jOb31@make-full-rib jO1bc7@ids jO1bcb@labels) jO1bbe@expr) (append (map (lambda (jO1bd1@label jO1bd2@var jO1bd3@level) (cons jO1bd1@label (jOb8b@make-binding 'syntax (cons jO1bd2@var jO1bd3@level)))) jO1bcb@labels jO1bcc@new-vars (map cdr jO1bbd@pvars)) jO1bc0@r) jO1bc1@mr))) (list '(primitive apply) (jOad4@jOa06@build-lambda '#f jO1bcc@new-vars jO1bcf@body) jO1bbf@y)))))) (jO1b4e@invalid-ids-error (lambda (jO1bb1@id* jO1bb2@e jO1bb3@class) (let jO1bbb@find ((jO1bb7@id* jO1bb1@id*) (jO1bb8@ok* '())) (if (null? jO1bb7@id*) (jOe58@syntax-violation '#f '"invalid syntax" jO1bb2@e) (if (jOb71@id? (car jO1bb7@id*)) (if (jOb7d@bound-id-member? (car jO1bb7@id*) jO1bb8@ok*) (jOe54@syntax-error (car jO1bb7@id*) '"duplicate " jO1bb3@class) (jO1bbb@find (cdr jO1bb7@id*) (cons (car jO1bb7@id*) jO1bb8@ok*))) (jOe54@syntax-error (car jO1bb7@id*) '"invalid " jO1bb3@class)))))) (jO1b50@gen-clause (lambda (jO1b89@x jO1b8a@keys jO1b8b@clauses jO1b8c@r jO1b8d@mr jO1b8e@pat jO1b8f@fender jO1b90@expr) (call-with-values (lambda () (jOd76@convert-pattern jO1b8e@pat jO1b8a@keys)) (lambda (jO1b9d@jO1b9a jO1b9e@jO1b9c) (let ((jO1ba1@pvars jO1b9e@jO1b9c) (jO1ba2@p jO1b9d@jO1b9a)) (if (not (jOb7b@distinct-bound-ids? (map car jO1ba1@pvars))) (jO1b4e@invalid-ids-error (map car jO1ba1@pvars) jO1b8e@pat '"pattern variable") (if (not (for-all (lambda (jO1ba5@x) (not (jOd7a@ellipsis? (car jO1ba5@x)))) jO1ba1@pvars)) (jOe58@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" jO1b8e@pat) (let ((jO1ba7@y (jOaf9@gen-lexical 'tmp))) (let ((jO1ba9@test (if (eq? jO1b8f@fender '#t) jO1ba7@y (let ((jO1bab@call (jO1b4c@build-dispatch-call jO1ba1@pvars jO1b8f@fender jO1ba7@y jO1b8c@r jO1b8d@mr))) (list 'if jO1ba7@y jO1bab@call (list 'quote '#f)))))) (let ((jO1bad@conseq (jO1b4c@build-dispatch-call jO1ba1@pvars jO1b90@expr jO1ba7@y jO1b8c@r jO1b8d@mr))) (let ((jO1baf@altern (jO1b52@gen-syntax-case jO1b89@x jO1b8a@keys jO1b8b@clauses jO1b8c@r jO1b8d@mr))) (list (jOad4@jOa06@build-lambda '#f (list jO1ba7@y) (list 'if jO1ba9@test jO1bad@conseq jO1baf@altern)) (list '(primitive syntax-dispatch) jO1b89@x (list 'quote jO1ba2@p)))))))))))))) (jO1b52@gen-syntax-case (lambda (jO1b67@x jO1b68@keys jO1b69@clauses jO1b6a@r jO1b6b@mr) (if (null? jO1b69@clauses) (list '(primitive syntax-error) jO1b67@x) (let ((jO1b71@t (car jO1b69@clauses))) (let ((jO1b73@ls/false (jOd78@syntax-dispatch jO1b71@t '(any any)))) (if jO1b73@ls/false (apply (lambda (jO1b75@pat jO1b76@expr) (if (and (jOb71@id? jO1b75@pat) (not (jOb7d@bound-id-member? jO1b75@pat jO1b68@keys)) (not (jOd7a@ellipsis? jO1b75@pat))) (if (jOb77@free-id=? jO1b75@pat (jOd00@scheme-stx '_)) (jOd9a@chi-expr jO1b76@expr jO1b6a@r jO1b6b@mr) (let ((jO1b79@lab (jOafd@gen-label jO1b75@pat)) (jO1b7a@lex (jOaf9@gen-lexical jO1b75@pat))) (let ((jO1b7d@body (jOd9a@chi-expr (jOb5d@add-subst (jOb31@make-full-rib (list jO1b75@pat) (list jO1b79@lab)) jO1b76@expr) (cons (cons jO1b79@lab (jOb8b@make-binding 'syntax (cons jO1b7a@lex '0))) jO1b6a@r) jO1b6b@mr))) (list (jOad4@jOa06@build-lambda '#f (list jO1b7a@lex) jO1b7d@body) jO1b67@x)))) (jO1b50@gen-clause jO1b67@x jO1b68@keys (cdr jO1b69@clauses) jO1b6a@r jO1b6b@mr jO1b75@pat '#t jO1b76@expr))) jO1b73@ls/false) (let ((jO1b7f@t jO1b71@t)) (let ((jO1b81@ls/false (jOd78@syntax-dispatch jO1b7f@t '(any any any)))) (if jO1b81@ls/false (apply (lambda (jO1b83@pat jO1b84@fender jO1b85@expr) (jO1b50@gen-clause jO1b67@x jO1b68@keys (cdr jO1b69@clauses) jO1b6a@r jO1b6b@mr jO1b83@pat jO1b84@fender jO1b85@expr)) jO1b81@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1b7f@t))))))))))) (lambda (jO1b53@e jO1b54@r jO1b55@mr) (let ((jO1b59@t jO1b53@e)) (let ((jO1b5b@ls/false (jOd78@syntax-dispatch jO1b59@t '(_ any each-any . each-any)))) (if jO1b5b@ls/false (apply (lambda (jO1b5d@expr jO1b5e@keys jO1b5f@clauses) (begin (jOd7e@verify-literals jO1b5e@keys jO1b53@e) (let ((jO1b63@x (jOaf9@gen-lexical 'tmp))) (let ((jO1b65@body (jO1b52@gen-syntax-case jO1b63@x jO1b5e@keys jO1b5f@clauses jO1b54@r jO1b55@mr))) (list (jOad4@jOa06@build-lambda '#f (list jO1b63@x) jO1b65@body) (jOd9a@chi-expr jO1b5d@expr jO1b54@r jO1b55@mr)))))) jO1b5b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1b59@t))))))) (set! jO2852@jOd80@syntax-case-transformer jOd80@syntax-case-transformer) (set! jOd82@ellipsis-map (lambda (jO1bd7@proc jO1bd8@ls . jO1bdb@ls*) (letrec* ((jO1bde@who '...)) (begin (if (not (list? jO1bd8@ls)) (assertion-violation jO1bde@who '"not a list" jO1bd8@ls) (void)) (if (not (null? jO1bdb@ls*)) (let ((jO1bdf@n (length jO1bd8@ls))) (for-each (lambda (jO1be1@x) (begin (if (not (list? jO1be1@x)) (assertion-violation jO1bde@who '"not a list" jO1be1@x) (void)) (if (not (= (length jO1be1@x) jO1bdf@n)) (assertion-violation jO1bde@who '"length mismatch" jO1bd8@ls jO1be1@x) (void)))) jO1bdb@ls*)) (void)) (apply map jO1bd7@proc jO1bd8@ls jO1bdb@ls*))))) (set! jO2853@jOd82@ellipsis-map jOd82@ellipsis-map) (set! jOd84@syntax-transformer (letrec* ((jO1be4@gen-syntax (lambda (jO1c5b@src jO1c5c@e jO1c5d@r jO1c5e@maps jO1c5f@ellipsis? jO1c60@vec?) (let ((jO1c67@t jO1c5c@e)) (let ((jO1c69@ls/false (jOd78@syntax-dispatch jO1c67@t 'any))) (if (and jO1c69@ls/false (apply (lambda (jO1c6b@dots) (jO1c5f@ellipsis? jO1c6b@dots)) jO1c69@ls/false)) (apply (lambda (jO1c6d@dots) (jOe58@syntax-violation '#f '"misplaced ellipsis in syntax form" jO1c5b@src)) jO1c69@ls/false) (let ((jO1c6f@t jO1c67@t)) (let ((jO1c71@ls/false (jOd78@syntax-dispatch jO1c6f@t 'any))) (if (and jO1c71@ls/false (apply (lambda (jO1c73@id) (jOb71@id? jO1c73@id)) jO1c71@ls/false)) (apply (lambda (jO1c75@id) (let ((jO1c77@label (jOb87@id->label jO1c5c@e))) (let ((jO1c79@b (jOb89@label->binding jO1c77@label jO1c5d@r))) (if (eq? (jOb8d@binding-type jO1c79@b) 'syntax) (call-with-values (lambda () (let ((jO1c7f@var.lev (jOb8f@binding-value jO1c79@b))) (jO1be6@gen-ref jO1c5b@src (car jO1c7f@var.lev) (cdr jO1c7f@var.lev) jO1c5e@maps))) (lambda (jO1c81@jO1c7c jO1c82@jO1c7e) (let ((jO1c85@maps jO1c82@jO1c7e) (jO1c86@var jO1c81@jO1c7c)) (values (list 'ref jO1c86@var) jO1c85@maps)))) (values (list 'quote jO1c5c@e) jO1c5e@maps))))) jO1c71@ls/false) (let ((jO1c89@t jO1c6f@t)) (let ((jO1c8b@ls/false (jOd78@syntax-dispatch jO1c89@t '(any any)))) (if (and jO1c8b@ls/false (apply (lambda (jO1c8d@dots jO1c8e@e) (jO1c5f@ellipsis? jO1c8d@dots)) jO1c8b@ls/false)) (apply (lambda (jO1c91@dots jO1c92@e) (if jO1c60@vec? (jOe58@syntax-violation '#f '"misplaced ellipsis in syntax form" jO1c5b@src) (jO1be4@gen-syntax jO1c5b@src jO1c92@e jO1c5d@r jO1c5e@maps (lambda (jO1c95@x) '#f) '#f))) jO1c8b@ls/false) (let ((jO1c97@t jO1c89@t)) (let ((jO1c99@ls/false (jOd78@syntax-dispatch jO1c97@t '(any any . any)))) (if (and jO1c99@ls/false (apply (lambda (jO1c9b@x jO1c9c@dots jO1c9d@y) (jO1c5f@ellipsis? jO1c9c@dots)) jO1c99@ls/false)) (apply (lambda (jO1ca1@x jO1ca2@dots jO1ca3@y) (let jO1cb9@f ((jO1ca7@y jO1ca3@y) (jO1ca8@k (lambda (jO1cab@maps) (call-with-values (lambda () (jO1be4@gen-syntax jO1c5b@src jO1ca1@x jO1c5d@r (cons '() jO1cab@maps) jO1c5f@ellipsis? '#f)) (lambda (jO1cb1@jO1cae jO1cb2@jO1cb0) (let ((jO1cb5@maps jO1cb2@jO1cb0) (jO1cb6@x jO1cb1@jO1cae)) (if (null? (car jO1cb5@maps)) (jOe58@syntax-violation '#f '"extra ellipsis in syntax form" jO1c5b@src) (values (jO1bec@gen-map jO1cb6@x (car jO1cb5@maps)) (cdr jO1cb5@maps))))))))) (let ((jO1cbb@t jO1ca7@y)) (let ((jO1cbd@ls/false (jOd78@syntax-dispatch jO1cbb@t '()))) (if jO1cbd@ls/false (apply (lambda () (jO1ca8@k jO1c5e@maps)) jO1cbd@ls/false) (let ((jO1cbf@t jO1cbb@t)) (let ((jO1cc1@ls/false (jOd78@syntax-dispatch jO1cbf@t '(any . any)))) (if (and jO1cc1@ls/false (apply (lambda (jO1cc3@dots jO1cc4@y) (jO1c5f@ellipsis? jO1cc3@dots)) jO1cc1@ls/false)) (apply (lambda (jO1cc7@dots jO1cc8@y) (jO1cb9@f jO1cc8@y (lambda (jO1ccb@maps) (call-with-values (lambda () (jO1ca8@k (cons '() jO1ccb@maps))) (lambda (jO1cd1@jO1cce jO1cd2@jO1cd0) (let ((jO1cd5@maps jO1cd2@jO1cd0) (jO1cd6@x jO1cd1@jO1cce)) (if (null? (car jO1cd5@maps)) (jOe58@syntax-violation '#f '"extra ellipsis in syntax form" jO1c5b@src) (values (jO1bea@gen-mappend jO1cd6@x (car jO1cd5@maps)) (cdr jO1cd5@maps))))))))) jO1cc1@ls/false) (let ((jO1cd9@t jO1cbf@t)) (let ((jO1cdb@ls/false (jOd78@syntax-dispatch jO1cd9@t '_))) (if jO1cdb@ls/false (apply (lambda () (call-with-values (lambda () (jO1be4@gen-syntax jO1c5b@src jO1ca7@y jO1c5d@r jO1c5e@maps jO1c5f@ellipsis? jO1c60@vec?)) (lambda (jO1ce1@jO1cde jO1ce2@jO1ce0) (let ((jO1ce5@maps jO1ce2@jO1ce0) (jO1ce6@y jO1ce1@jO1cde)) (call-with-values (lambda () (jO1ca8@k jO1ce5@maps)) (lambda (jO1ced@jO1cea jO1cee@jO1cec) (let ((jO1cf1@maps jO1cee@jO1cec) (jO1cf2@x jO1ced@jO1cea)) (values (jO1be8@gen-append jO1cf2@x jO1ce6@y) jO1cf1@maps)))))))) jO1cdb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1cd9@t)))))))))))) jO1c99@ls/false) (let ((jO1cf5@t jO1c97@t)) (let ((jO1cf7@ls/false (jOd78@syntax-dispatch jO1cf5@t '(any . any)))) (if jO1cf7@ls/false (apply (lambda (jO1cf9@x jO1cfa@y) (call-with-values (lambda () (jO1be4@gen-syntax jO1c5b@src jO1cf9@x jO1c5d@r jO1c5e@maps jO1c5f@ellipsis? '#f)) (lambda (jO1d01@jO1cfe jO1d02@jO1d00) (let ((jO1d05@maps jO1d02@jO1d00) (jO1d06@xnew jO1d01@jO1cfe)) (call-with-values (lambda () (jO1be4@gen-syntax jO1c5b@src jO1cfa@y jO1c5d@r jO1d05@maps jO1c5f@ellipsis? jO1c60@vec?)) (lambda (jO1d0d@jO1d0a jO1d0e@jO1d0c) (let ((jO1d11@maps jO1d0e@jO1d0c) (jO1d12@ynew jO1d0d@jO1d0a)) (values (jO1bee@gen-cons jO1c5c@e jO1cf9@x jO1cfa@y jO1d06@xnew jO1d12@ynew) jO1d11@maps)))))))) jO1cf7@ls/false) (let ((jO1d15@t jO1cf5@t)) (let ((jO1d17@ls/false (jOd78@syntax-dispatch jO1d15@t '#(vector each-any)))) (if jO1d17@ls/false (apply (lambda (jO1d19@ls) (call-with-values (lambda () (jO1be4@gen-syntax jO1c5b@src jO1d19@ls jO1c5d@r jO1c5e@maps jO1c5f@ellipsis? '#t)) (lambda (jO1d1f@jO1d1c jO1d20@jO1d1e) (let ((jO1d23@maps jO1d20@jO1d1e) (jO1d24@lsnew jO1d1f@jO1d1c)) (values (jO1bf0@gen-vector jO1c5c@e jO1d19@ls jO1d24@lsnew) jO1d23@maps))))) jO1d17@ls/false) (let ((jO1d27@t jO1d15@t)) (let ((jO1d29@ls/false (jOd78@syntax-dispatch jO1d27@t '_))) (if jO1d29@ls/false (apply (lambda () (values (list 'quote jO1c5c@e) jO1c5e@maps)) jO1d29@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1d27@t)))))))))))))))))))))))) (jO1be6@gen-ref (lambda (jO1c41@src jO1c42@var jO1c43@level jO1c44@maps) (if (= jO1c43@level '0) (values jO1c42@var jO1c44@maps) (if (null? jO1c44@maps) (jOe58@syntax-violation '#f '"missing ellipsis in syntax form" jO1c41@src) (call-with-values (lambda () (jO1be6@gen-ref jO1c41@src jO1c42@var (- jO1c43@level '1) (cdr jO1c44@maps))) (lambda (jO1c4d@jO1c4a jO1c4e@jO1c4c) (let ((jO1c51@outer-maps jO1c4e@jO1c4c) (jO1c52@outer-var jO1c4d@jO1c4a)) (let ((jO1c55@t (assq jO1c52@outer-var (car jO1c44@maps)))) (if jO1c55@t ((lambda (jO1c57@b) (values (cdr jO1c57@b) jO1c44@maps)) jO1c55@t) (let ((jO1c59@inner-var (jOaf9@gen-lexical 'tmp))) (values jO1c59@inner-var (cons (cons (cons jO1c52@outer-var jO1c59@inner-var) (car jO1c44@maps)) jO1c51@outer-maps)))))))))))) (jO1be8@gen-append (lambda (jO1c3d@x jO1c3e@y) (if (fast-equal? jO1c3e@y ''()) jO1c3d@x (list 'append jO1c3d@x jO1c3e@y)))) (jO1bea@gen-mappend (lambda (jO1c39@e jO1c3a@map-env) (list 'apply '(primitive append) (jO1bec@gen-map jO1c39@e jO1c3a@map-env)))) (jO1bec@gen-map (lambda (jO1c27@e jO1c28@map-env) (let ((jO1c2b@formals (map cdr jO1c28@map-env)) (jO1c2c@actuals (map (lambda (jO1c2f@x) (list 'ref (car jO1c2f@x))) jO1c28@map-env))) (if (eq? (car jO1c27@e) 'ref) (car jO1c2c@actuals) (if (for-all (lambda (jO1c31@x) (and (eq? (car jO1c31@x) 'ref) (memq (cadr jO1c31@x) jO1c2b@formals))) (cdr jO1c27@e)) (let ((jO1c33@args (map (let ((jO1c35@r (map cons jO1c2b@formals jO1c2c@actuals))) (lambda (jO1c37@x) (cdr (assq (cadr jO1c37@x) jO1c35@r)))) (cdr jO1c27@e)))) (cons 'map (cons (list 'primitive (car jO1c27@e)) jO1c33@args))) (cons* 'map (list 'lambda jO1c2b@formals jO1c27@e) jO1c2c@actuals)))))) (jO1bee@gen-cons (lambda (jO1c17@e jO1c18@x jO1c19@y jO1c1a@xnew jO1c1b@ynew) (let ((jO1c21@t (car jO1c1b@ynew))) (if (memv jO1c21@t '(quote)) (if (eq? (car jO1c1a@xnew) 'quote) (let ((jO1c23@xnew (cadr jO1c1a@xnew)) (jO1c24@ynew (cadr jO1c1b@ynew))) (if (and (eq? jO1c23@xnew jO1c18@x) (eq? jO1c24@ynew jO1c19@y)) (list 'quote jO1c17@e) (list 'quote (cons jO1c23@xnew jO1c24@ynew)))) (if (null? (cadr jO1c1b@ynew)) (list 'list jO1c1a@xnew) (list 'cons jO1c1a@xnew jO1c1b@ynew))) (if (memv jO1c21@t '(list)) (cons 'list (cons jO1c1a@xnew (cdr jO1c1b@ynew))) (list 'cons jO1c1a@xnew jO1c1b@ynew)))))) (jO1bf0@gen-vector (lambda (jO1c11@e jO1c12@ls jO1c13@lsnew) (if (eq? (car jO1c13@lsnew) 'quote) (if (eq? (cadr jO1c13@lsnew) jO1c12@ls) (list 'quote jO1c11@e) (list 'quote (list->vector (cadr jO1c13@lsnew)))) (if (eq? (car jO1c13@lsnew) 'list) (cons 'vector (cdr jO1c13@lsnew)) (list 'list->vector jO1c13@lsnew))))) (jO1bf2@regen (lambda (jO1c0b@x) (let ((jO1c0d@t (car jO1c0b@x))) (if (memv jO1c0d@t '(ref)) (cadr jO1c0b@x) (if (memv jO1c0d@t '(primitive)) (list 'primitive (cadr jO1c0b@x)) (if (memv jO1c0d@t '(quote)) (list 'quote (cadr jO1c0b@x)) (if (memv jO1c0d@t '(lambda)) (jOad4@jOa06@build-lambda '#f (cadr jO1c0b@x) (jO1bf2@regen (caddr jO1c0b@x))) (if (memv jO1c0d@t '(map)) (let ((jO1c0f@ls (map jO1bf2@regen (cdr jO1c0b@x)))) (cons '(primitive ellipsis-map) jO1c0f@ls)) (cons (list 'primitive (car jO1c0b@x)) (map jO1bf2@regen (cdr jO1c0b@x)))))))))))) (lambda (jO1bf3@e jO1bf4@r jO1bf5@mr) (let ((jO1bf9@t jO1bf3@e)) (let ((jO1bfb@ls/false (jOd78@syntax-dispatch jO1bf9@t '(_ any)))) (if jO1bfb@ls/false (apply (lambda (jO1bfd@x) (call-with-values (lambda () (jO1be4@gen-syntax jO1bf3@e jO1bfd@x jO1bf4@r '() jOd7a@ellipsis? '#f)) (lambda (jO1c03@jO1c00 jO1c04@jO1c02) (let ((jO1c07@maps jO1c04@jO1c02) (jO1c08@e jO1c03@jO1c00)) (jO1bf2@regen jO1c08@e))))) jO1bfb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1bf9@t))))))) (set! jO2854@jOd84@syntax-transformer jOd84@syntax-transformer) (set! jOd86@core-macro-transformer (lambda (jO1d2b@name) (let ((jO1d2d@t jO1d2b@name)) (if (memv jO1d2d@t '(quote)) jOd28@quote-transformer (if (memv jO1d2d@t '(lambda)) jOd2c@lambda-transformer (if (memv jO1d2d@t '(case-lambda)) jOd2a@case-lambda-transformer (if (memv jO1d2d@t '(letrec)) jOd10@letrec-transformer (if (memv jO1d2d@t '(letrec*)) jOd12@letrec*-transformer (if (memv jO1d2d@t '(let)) jOd0e@let-transformer (if (memv jO1d2d@t '(if)) jOd20@if-transformer (if (memv jO1d2d@t '(and)) jOd22@and-transformer (if (memv jO1d2d@t '(or)) jOd24@or-transformer (if (memv jO1d2d@t '(foreign-call)) jOd74@foreign-call-transformer (if (memv jO1d2d@t '(syntax-case)) jOd80@syntax-case-transformer (if (memv jO1d2d@t '(syntax)) jOd84@syntax-transformer (if (memv jO1d2d@t '(type-descriptor)) jOd16@type-descriptor-transformer (if (memv jO1d2d@t '(record-type-descriptor)) jOd18@record-type-descriptor-transformer (if (memv jO1d2d@t '(record-constructor-descriptor)) jOd1a@record-constructor-descriptor-transformer (if (memv jO1d2d@t '(fluid-let-syntax)) jOd14@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" jO1d2b@name)))))))))))))))))))) (set! jO2855@jOd86@core-macro-transformer jOd86@core-macro-transformer) (set! jOd88@symbol-macro (lambda (jO1d2f@x jO1d30@set) (let ((jO1d33@t jO1d2f@x)) (let ((jO1d35@ls/false (jOd78@syntax-dispatch jO1d33@t '(_ any)))) (if (and jO1d35@ls/false (apply (lambda (jO1d37@name) (and (jOb71@id? jO1d37@name) (memq (jOb73@id->sym jO1d37@name) jO1d30@set))) jO1d35@ls/false)) (apply (lambda (jO1d39@name) (jOd2e@bless (list 'quote jO1d39@name))) jO1d35@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1d33@t)))))) (set! jO2856@jOd88@symbol-macro jOd88@symbol-macro) (set! jOd8a@macro-transformer (lambda (jO1d3b@x) (if (procedure? jO1d3b@x) jO1d3b@x (if (symbol? jO1d3b@x) (let ((jO1d3d@t jO1d3b@x)) (if (memv jO1d3d@t '(define-record-type)) jOd6c@define-record-type-macro (if (memv jO1d3d@t '(define-struct)) jOd6a@define-struct-macro (if (memv jO1d3d@t '(include)) jOd60@include-macro (if (memv jO1d3d@t '(cond)) jOd5c@cond-macro (if (memv jO1d3d@t '(let)) jOd34@let-macro (if (memv jO1d3d@t '(do)) jOd54@do-macro (if (memv jO1d3d@t '(or)) jOd58@or-macro (if (memv jO1d3d@t '(and)) jOd5a@and-macro (if (memv jO1d3d@t '(let*)) jOd56@let*-macro (if (memv jO1d3d@t '(let-values)) jOd36@let-values-macro (if (memv jO1d3d@t '(let*-values)) jOd38@let*-values-macro (if (memv jO1d3d@t '(syntax-rules)) jOd64@syntax-rules-macro (if (memv jO1d3d@t '(quasiquote)) jOd66@quasiquote-macro (if (memv jO1d3d@t '(quasisyntax)) jOd68@quasisyntax-macro (if (memv jO1d3d@t '(with-syntax)) jOd30@with-syntax-macro (if (memv jO1d3d@t '(when)) jOd1c@when-macro (if (memv jO1d3d@t '(unless)) jOd1e@unless-macro (if (memv jO1d3d@t '(case)) jOd26@case-macro (if (memv jO1d3d@t '(identifier-syntax)) jOd52@identifier-syntax-macro (if (memv jO1d3d@t '(time)) jOd4a@time-macro (if (memv jO1d3d@t '(delay)) jOd4c@delay-macro (if (memv jO1d3d@t '(assert)) jOd4e@assert-macro (if (memv jO1d3d@t '(endianness)) jOd50@endianness-macro (if (memv jO1d3d@t '(guard)) jOd46@guard-macro (if (memv jO1d3d@t '(define-enumeration)) jOd48@define-enumeration-macro (if (memv jO1d3d@t '(trace-lambda)) jOd3a@trace-lambda-macro (if (memv jO1d3d@t '(trace-define)) jOd3c@trace-define-macro (if (memv jO1d3d@t '(trace-define-syntax)) jOd3e@trace-define-syntax-macro (if (memv jO1d3d@t '(trace-let-syntax)) jOd42@trace-let-syntax-macro (if (memv jO1d3d@t '(trace-letrec-syntax)) jOd44@trace-letrec-syntax-macro (if (memv jO1d3d@t '(define-condition-type)) jOd6e@define-condition-type-macro (if (memv jO1d3d@t '(parameterize)) jOd72@parameterize-macro (if (memv jO1d3d@t '(include-into)) jOd62@include-into-macro (if (memv jO1d3d@t '(eol-style)) (lambda (jO1d3f@x) (jOd88@symbol-macro jO1d3f@x '(none lf cr crlf nel crnel ls))) (if (memv jO1d3d@t '(error-handling-mode)) (lambda (jO1d41@x) (jOd88@symbol-macro jO1d41@x '(ignore raise replace))) (if (memv jO1d3d@t '(buffer-mode)) (lambda (jO1d43@x) (jOd88@symbol-macro jO1d43@x '(none line block))) (if (memv jO1d3d@t '(file-options)) jOaec@file-options-macro (if (memv jO1d3d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jOd70@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" jO1d3b@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" jO1d3b@x))))) (set! jO2857@jOd8a@macro-transformer jOd8a@macro-transformer) (set! jOd8c@local-macro-transformer (lambda (jO1d45@x) (car jO1d45@x))) (set! jO2858@jOd8c@local-macro-transformer jOd8c@local-macro-transformer) (set! jOd8e@do-macro-call (lambda (jO1d47@transformer jO1d48@expr) (let ((jO1d4b@out (jO1d47@transformer (jOb5b@add-mark jOb55@anti-mark jO1d48@expr '#f)))) (begin (let jO1d4f@f ((jO1d4d@x jO1d4b@out)) (if (not (jOb3d@stx? jO1d4d@x)) (if (pair? jO1d4d@x) (begin (jO1d4f@f (car jO1d4d@x)) (jO1d4f@f (cdr jO1d4d@x))) (if (vector? jO1d4d@x) (vector-for-each jO1d4f@f jO1d4d@x) (if (symbol? jO1d4d@x) (jOe58@syntax-violation '#f '"raw symbol encountered in output of macro" jO1d48@expr jO1d4d@x) (void)))) (void))) (jOb5b@add-mark (jOb53@gen-mark) jO1d4b@out jO1d48@expr))))) (set! jO2859@jOd8e@do-macro-call jOd8e@do-macro-call) (set! jOd90@chi-macro (lambda (jO1d51@p jO1d52@e) (jOd8e@do-macro-call (jOd8a@macro-transformer jO1d51@p) jO1d52@e))) (set! jO285a@jOd90@chi-macro jOd90@chi-macro) (set! jOd92@chi-local-macro (lambda (jO1d55@p jO1d56@e) (jOd8e@do-macro-call (jOd8c@local-macro-transformer jO1d55@p) jO1d56@e))) (set! jO285b@jOd92@chi-local-macro jOd92@chi-local-macro) (set! jOd94@chi-global-macro (lambda (jO1d59@p jO1d5a@e) (let ((jO1d5d@lib (car jO1d59@p)) (jO1d5e@loc (cdr jO1d59@p))) (begin (jO98e@jO7dd@visit-library jO1d5d@lib) (let ((jO1d61@x (symbol-value jO1d5e@loc))) (let ((jO1d63@transformer (if (procedure? jO1d61@x) jO1d61@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" jO1d61@x)))) (jOd8e@do-macro-call jO1d63@transformer jO1d5a@e))))))) (set! jO285c@jOd94@chi-global-macro jOd94@chi-global-macro) (set! jOd96@chi-expr* (lambda (jO1d65@e* jO1d66@r jO1d67@mr) (if (null? jO1d65@e*) '() (let ((jO1d6b@e (jOd9a@chi-expr (car jO1d65@e*) jO1d66@r jO1d67@mr))) (cons jO1d6b@e (jOd96@chi-expr* (cdr jO1d65@e*) jO1d66@r jO1d67@mr)))))) (set! jO285d@jOd96@chi-expr* jOd96@chi-expr*) (set! jOd98@chi-application (lambda (jO1d6d@e jO1d6e@r jO1d6f@mr) (let ((jO1d73@t jO1d6d@e)) (let ((jO1d75@ls/false (jOd78@syntax-dispatch jO1d73@t '(any . each-any)))) (if jO1d75@ls/false (apply (lambda (jO1d77@rator jO1d78@rands) (let ((jO1d7b@rator (jOd9a@chi-expr jO1d77@rator jO1d6e@r jO1d6f@mr))) (cons jO1d7b@rator (jOd96@chi-expr* jO1d78@rands jO1d6e@r jO1d6f@mr)))) jO1d75@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1d73@t)))))) (set! jO285e@jOd98@chi-application jOd98@chi-application) (set! jOd9a@chi-expr (lambda (jO1d7d@e jO1d7e@r jO1d7f@mr) (call-with-values (lambda () (jOb93@syntax-type jO1d7d@e jO1d7e@r)) (lambda (jO1d89@jO1d84 jO1d8a@jO1d86 jO1d8b@jO1d88) (let ((jO1d8f@kwd jO1d8b@jO1d88) (jO1d90@value jO1d8a@jO1d86) (jO1d91@type jO1d89@jO1d84)) (let ((jO1d95@t jO1d91@type)) (if (memv jO1d95@t '(core-macro)) (let ((jO1d97@transformer (jOd86@core-macro-transformer jO1d90@value))) (jO1d97@transformer jO1d7d@e jO1d7e@r jO1d7f@mr)) (if (memv jO1d95@t '(global)) (let ((jO1d99@lib (car jO1d90@value))) (let ((jO1d9b@loc (cdr jO1d90@value))) (begin ((jOde0@inv-collector) jO1d99@lib) jO1d9b@loc))) (if (memv jO1d95@t '(core-prim)) (let ((jO1d9d@name jO1d90@value)) (list 'primitive jO1d9d@name)) (if (memv jO1d95@t '(call)) (jOd98@chi-application jO1d7d@e jO1d7e@r jO1d7f@mr) (if (memv jO1d95@t '(lexical)) (let ((jO1d9f@lex (jOd02@lexical-var jO1d90@value))) jO1d9f@lex) (if (memv jO1d95@t '(global-macro global-macro!)) (jOd9a@chi-expr (jOd94@chi-global-macro jO1d90@value jO1d7d@e) jO1d7e@r jO1d7f@mr) (if (memv jO1d95@t '(local-macro local-macro!)) (jOd9a@chi-expr (jOd92@chi-local-macro jO1d90@value jO1d7d@e) jO1d7e@r jO1d7f@mr) (if (memv jO1d95@t '(macro macro!)) (jOd9a@chi-expr (jOd90@chi-macro jO1d90@value jO1d7d@e) jO1d7e@r jO1d7f@mr) (if (memv jO1d95@t '(constant)) (let ((jO1da1@datum jO1d90@value)) (list 'quote jO1da1@datum)) (if (memv jO1d95@t '(set!)) (jOd9c@chi-set! jO1d7d@e jO1d7e@r jO1d7f@mr) (if (memv jO1d95@t '(begin)) (let ((jO1da3@t jO1d7d@e)) (let ((jO1da5@ls/false (jOd78@syntax-dispatch jO1da3@t '(_ any . each-any)))) (if jO1da5@ls/false (apply (lambda (jO1da7@x jO1da8@x*) (jOad6@jOa36@build-sequence '#f (jOd96@chi-expr* (cons jO1da7@x jO1da8@x*) jO1d7e@r jO1d7f@mr))) jO1da5@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1da3@t)))) (if (memv jO1d95@t '(let-syntax letrec-syntax)) (let ((jO1dab@t jO1d7d@e)) (let ((jO1dad@ls/false (jOd78@syntax-dispatch jO1dab@t '(_ #(each (any any)) any . each-any)))) (if (and jO1dad@ls/false (apply (lambda (jO1daf@xlhs* jO1db0@xrhs* jO1db1@xbody jO1db2@xbody*) (if (not (jOb79@valid-bound-ids? jO1daf@xlhs*)) (jOe58@syntax-violation '#f '"invalid identifiers" jO1d7d@e) (void))) jO1dad@ls/false)) (apply (lambda (jO1db7@xlhs* jO1db8@xrhs* jO1db9@xbody jO1dba@xbody*) (let ((jO1dbf@xlab* (map jOafd@gen-label jO1db7@xlhs*))) (let ((jO1dc1@xrib (jOb31@make-full-rib jO1db7@xlhs* jO1dbf@xlab*))) (let ((jO1dc3@xb* (map (lambda (jO1dc5@x) (jOba9@make-eval-transformer (jOdd2@expand-transformer (if (eq? jO1d91@type 'let-syntax) jO1dc5@x (jOb5d@add-subst jO1dc1@xrib jO1dc5@x)) jO1d7f@mr))) jO1db8@xrhs*))) (jOad6@jOa36@build-sequence '#f (jOd96@chi-expr* (map (lambda (jO1dc7@x) (jOb5d@add-subst jO1dc1@xrib jO1dc7@x)) (cons jO1db9@xbody jO1dba@xbody*)) (append (map cons jO1dbf@xlab* jO1dc3@xb*) jO1d7e@r) (append (map cons jO1dbf@xlab* jO1dc3@xb*) jO1d7f@mr))))))) jO1dad@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1dab@t)))) (if (memv jO1d95@t '(displaced-lexical)) (jOe58@syntax-violation '#f '"identifier out of context" jO1d7d@e) (if (memv jO1d95@t '(syntax)) (jOe58@syntax-violation '#f '"reference to pattern variable outside a syntax form" jO1d7d@e) (if (memv jO1d95@t '(define define-syntax module import library)) (jOe58@syntax-violation '#f (string-append (let ((jO1dc9@t jO1d91@type)) (if (memv jO1dc9@t '(define)) '"a definition" (if (memv jO1dc9@t '(define-syntax)) '"a define-syntax" (if (memv jO1dc9@t '(module)) '"a module definition" (if (memv jO1dc9@t '(library)) '"a library definition" (if (memv jO1dc9@t '(import)) '"an import declaration" (if (memv jO1dc9@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") jO1d7d@e) (if (memv jO1d95@t '(mutable)) (jOe58@syntax-violation '#f '"attempt to reference an unexportable variable" jO1d7d@e) (jOe58@syntax-violation '#f '"invalid expression" jO1d7d@e))))))))))))))))))))))) (set! jO285f@jOd9a@chi-expr jOd9a@chi-expr) (set! jOd9c@chi-set! (lambda (jO1dcb@e jO1dcc@r jO1dcd@mr) (let ((jO1dd1@t jO1dcb@e)) (let ((jO1dd3@ls/false (jOd78@syntax-dispatch jO1dd1@t '(_ any any)))) (if (and jO1dd3@ls/false (apply (lambda (jO1dd5@x jO1dd6@v) (jOb71@id? jO1dd5@x)) jO1dd3@ls/false)) (apply (lambda (jO1dd9@x jO1dda@v) (call-with-values (lambda () (jOb93@syntax-type jO1dd9@x jO1dcc@r)) (lambda (jO1de3@jO1dde jO1de4@jO1de0 jO1de5@jO1de2) (let ((jO1de9@kwd jO1de5@jO1de2) (jO1dea@value jO1de4@jO1de0) (jO1deb@type jO1de3@jO1dde)) (let ((jO1def@t jO1deb@type)) (if (memv jO1def@t '(lexical)) (begin (jOd06@set-lexical-mutable! jO1dea@value '#t) (list 'set! (jOd02@lexical-var jO1dea@value) (jOd9a@chi-expr jO1dda@v jO1dcc@r jO1dcd@mr))) (if (memv jO1def@t '(core-prim)) (jOe58@syntax-violation '#f '"cannot modify imported core primitive" jO1dcb@e) (if (memv jO1def@t '(global)) (jOe58@syntax-violation '#f '"attempt to modify imported binding" jO1dcb@e) (if (memv jO1def@t '(global-macro!)) (jOd9a@chi-expr (jOd94@chi-global-macro jO1dea@value jO1dcb@e) jO1dcc@r jO1dcd@mr) (if (memv jO1def@t '(local-macro!)) (jOd9a@chi-expr (jOd92@chi-local-macro jO1dea@value jO1dcb@e) jO1dcc@r jO1dcd@mr) (if (memv jO1def@t '(mutable)) (jOe58@syntax-violation '#f '"attempt to assign to an unexportable variable" jO1dcb@e) (jOe58@syntax-violation '#f '"invalid syntax" jO1dcb@e)))))))))))) jO1dd3@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1dd1@t)))))) (set! jO2860@jOd9c@chi-set! jOd9c@chi-set!) (set! jOd9e@verify-formals (lambda (jO1df1@fmls jO1df2@stx) (let ((jO1df5@t jO1df1@fmls)) (let ((jO1df7@ls/false (jOd78@syntax-dispatch jO1df5@t 'each-any))) (if jO1df7@ls/false (apply (lambda (jO1df9@x*) (if (not (jOb79@valid-bound-ids? jO1df9@x*)) (jOd32@invalid-fmls-error jO1df2@stx jO1df1@fmls) (void))) jO1df7@ls/false) (let ((jO1dfb@t jO1df5@t)) (let ((jO1dfd@ls/false (jOd78@syntax-dispatch jO1dfb@t '#(each+ any () any)))) (if jO1dfd@ls/false (apply (lambda (jO1dff@x* jO1e00@x) (if (not (jOb79@valid-bound-ids? (cons jO1e00@x jO1dff@x*))) (jOd32@invalid-fmls-error jO1df2@stx jO1df1@fmls) (void))) jO1dfd@ls/false) (let ((jO1e03@t jO1dfb@t)) (let ((jO1e05@ls/false (jOd78@syntax-dispatch jO1e03@t '_))) (if jO1e05@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid syntax" jO1df2@stx)) jO1e05@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1e03@t)))))))))))) (set! jO2861@jOd9e@verify-formals jOd9e@verify-formals) (set! jOda0@chi-lambda-clause (lambda (jO1e07@stx jO1e08@fmls jO1e09@body* jO1e0a@r jO1e0b@mr) (let ((jO1e11@t jO1e08@fmls)) (let ((jO1e13@ls/false (jOd78@syntax-dispatch jO1e11@t 'each-any))) (if jO1e13@ls/false (apply (lambda (jO1e15@x*) (begin (jOd9e@verify-formals jO1e08@fmls jO1e07@stx) (let ((jO1e17@lex* (map jOaf9@gen-lexical jO1e15@x*)) (jO1e18@lab* (map jOafd@gen-label jO1e15@x*))) (values jO1e17@lex* (jOdb0@chi-internal (jOb5d@add-subst (jOb31@make-full-rib jO1e15@x* jO1e18@lab*) jO1e09@body*) (jOd0a@add-lexicals jO1e18@lab* jO1e17@lex* jO1e0a@r) jO1e0b@mr))))) jO1e13@ls/false) (let ((jO1e1b@t jO1e11@t)) (let ((jO1e1d@ls/false (jOd78@syntax-dispatch jO1e1b@t '#(each+ any () any)))) (if jO1e1d@ls/false (apply (lambda (jO1e1f@x* jO1e20@x) (begin (jOd9e@verify-formals jO1e08@fmls jO1e07@stx) (let ((jO1e23@lex* (map jOaf9@gen-lexical jO1e1f@x*)) (jO1e24@lab* (map jOafd@gen-label jO1e1f@x*)) (jO1e25@lex (jOaf9@gen-lexical jO1e20@x)) (jO1e26@lab (jOafd@gen-label jO1e20@x))) (values (append jO1e23@lex* jO1e25@lex) (jOdb0@chi-internal (jOb5d@add-subst (jOb31@make-full-rib (cons jO1e20@x jO1e1f@x*) (cons jO1e26@lab jO1e24@lab*)) jO1e09@body*) (jOd0a@add-lexicals (cons jO1e26@lab jO1e24@lab*) (cons jO1e25@lex jO1e23@lex*) jO1e0a@r) jO1e0b@mr))))) jO1e1d@ls/false) (let ((jO1e2b@t jO1e1b@t)) (let ((jO1e2d@ls/false (jOd78@syntax-dispatch jO1e2b@t '_))) (if jO1e2d@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid syntax" jO1e08@fmls)) jO1e2d@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1e2b@t)))))))))))) (set! jO2862@jOda0@chi-lambda-clause jOda0@chi-lambda-clause) (set! jOda2@chi-lambda-clause* (lambda (jO1e2f@stx jO1e30@fmls* jO1e31@body** jO1e32@r jO1e33@mr) (if (null? jO1e30@fmls*) (values '() '()) (call-with-values (lambda () (jOda0@chi-lambda-clause jO1e2f@stx (car jO1e30@fmls*) (car jO1e31@body**) jO1e32@r jO1e33@mr)) (lambda (jO1e3d@jO1e3a jO1e3e@jO1e3c) (let ((jO1e41@b jO1e3e@jO1e3c) (jO1e42@a jO1e3d@jO1e3a)) (call-with-values (lambda () (jOda2@chi-lambda-clause* jO1e2f@stx (cdr jO1e30@fmls*) (cdr jO1e31@body**) jO1e32@r jO1e33@mr)) (lambda (jO1e49@jO1e46 jO1e4a@jO1e48) (let ((jO1e4d@b* jO1e4a@jO1e48) (jO1e4e@a* jO1e49@jO1e46)) (values (cons jO1e42@a jO1e4e@a*) (cons jO1e41@b jO1e4d@b*))))))))))) (set! jO2863@jOda2@chi-lambda-clause* jOda2@chi-lambda-clause*) (set! jOda4@chi-defun (lambda (jO1e51@x jO1e52@r jO1e53@mr) (let ((jO1e57@fmls (car jO1e51@x)) (jO1e58@body* (cdr jO1e51@x))) (call-with-values (lambda () (jOda0@chi-lambda-clause jO1e57@fmls jO1e57@fmls jO1e58@body* jO1e52@r jO1e53@mr)) (lambda (jO1e5f@jO1e5c jO1e60@jO1e5e) (let ((jO1e63@body jO1e60@jO1e5e) (jO1e64@fmls jO1e5f@jO1e5c)) (jOad4@jOa06@build-lambda '#f jO1e64@fmls jO1e63@body))))))) (set! jO2864@jOda4@chi-defun jOda4@chi-defun) (set! jOda6@chi-rhs (lambda (jO1e67@rhs jO1e68@r jO1e69@mr) (let ((jO1e6d@t (car jO1e67@rhs))) (if (memv jO1e6d@t '(defun)) (jOda4@chi-defun (cdr jO1e67@rhs) jO1e68@r jO1e69@mr) (if (memv jO1e6d@t '(expr)) (let ((jO1e6f@expr (cdr jO1e67@rhs))) (jOd9a@chi-expr jO1e6f@expr jO1e68@r jO1e69@mr)) (if (memv jO1e6d@t '(top-expr)) (let ((jO1e71@expr (cdr jO1e67@rhs))) (jOad6@jOa36@build-sequence '#f (list (jOd9a@chi-expr jO1e71@expr jO1e68@r jO1e69@mr) (jOad7@jOa38@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" jO1e67@rhs))))))) (set! jO2865@jOda6@chi-rhs jOda6@chi-rhs) (set! jOda8@expand-interaction-rhs*/init* (lambda (jO1e73@lhs* jO1e74@rhs* jO1e75@init* jO1e76@r jO1e77@mr) (let jO1e81@f ((jO1e7d@lhs* jO1e73@lhs*) (jO1e7e@rhs* jO1e74@rhs*)) (if (null? jO1e7d@lhs*) (map (lambda (jO1e83@x) (jOd9a@chi-expr jO1e83@x jO1e76@r jO1e77@mr)) jO1e75@init*) (let ((jO1e85@lhs (car jO1e7d@lhs*)) (jO1e86@rhs (car jO1e7e@rhs*))) (let ((jO1e89@t (car jO1e86@rhs))) (if (memv jO1e89@t '(defun)) (let ((jO1e8b@rhs (jOda4@chi-defun (cdr jO1e86@rhs) jO1e76@r jO1e77@mr))) (cons (list 'set! jO1e85@lhs jO1e8b@rhs) (jO1e81@f (cdr jO1e7d@lhs*) (cdr jO1e7e@rhs*)))) (if (memv jO1e89@t '(expr)) (let ((jO1e8d@rhs (jOd9a@chi-expr (cdr jO1e86@rhs) jO1e76@r jO1e77@mr))) (cons (list 'set! jO1e85@lhs jO1e8d@rhs) (jO1e81@f (cdr jO1e7d@lhs*) (cdr jO1e7e@rhs*)))) (if (memv jO1e89@t '(top-expr)) (let ((jO1e8f@e (jOd9a@chi-expr (cdr jO1e86@rhs) jO1e76@r jO1e77@mr))) (cons jO1e8f@e (jO1e81@f (cdr jO1e7d@lhs*) (cdr jO1e7e@rhs*)))) (error 'expand-interaction '"invallid" jO1e86@rhs)))))))))) (set! jO2866@jOda8@expand-interaction-rhs*/init* jOda8@expand-interaction-rhs*/init*) (set! jOdaa@chi-rhs* (lambda (jO1e91@rhs* jO1e92@r jO1e93@mr) (let jO1e99@f ((jO1e97@ls jO1e91@rhs*)) (if (null? jO1e97@ls) '() (let ((jO1e9b@a (jOda6@chi-rhs (car jO1e97@ls) jO1e92@r jO1e93@mr))) (cons jO1e9b@a (jO1e99@f (cdr jO1e97@ls)))))))) (set! jO2867@jOdaa@chi-rhs* jOdaa@chi-rhs*) (set! jOdac@find-bound=? (lambda (jO1e9d@x jO1e9e@lhs* jO1e9f@rhs*) (if (null? jO1e9e@lhs*) '#f (if (jOb75@bound-id=? jO1e9d@x (car jO1e9e@lhs*)) (car jO1e9f@rhs*) (jOdac@find-bound=? jO1e9d@x (cdr jO1e9e@lhs*) (cdr jO1e9f@rhs*)))))) (set! jO2868@jOdac@find-bound=? jOdac@find-bound=?) (set! jOdae@find-dups (lambda (jO1ea3@ls) (let jO1ea9@f ((jO1ea5@ls jO1ea3@ls) (jO1ea6@dups '())) (if (null? jO1ea5@ls) jO1ea6@dups (let ((jO1eab@t (jOdac@find-bound=? (car jO1ea5@ls) (cdr jO1ea5@ls) (cdr jO1ea5@ls)))) (if jO1eab@t ((lambda (jO1ead@x) (jO1ea9@f (cdr jO1ea5@ls) (cons (list (car jO1ea5@ls) jO1ead@x) jO1ea6@dups))) jO1eab@t) (jO1ea9@f (cdr jO1ea5@ls) jO1ea6@dups))))))) (set! jO2869@jOdae@find-dups jOdae@find-dups) (set! jOdb0@chi-internal (lambda (jO1eaf@e* jO1eb0@r jO1eb1@mr) (let ((jO1eb5@rib (jOb25@make-empty-rib))) (call-with-values (lambda () (jOdd0@chi-body* (map (lambda (jO1ec7@x) (jOb5d@add-subst jO1eb5@rib jO1ec7@x)) (jOb6f@syntax->list jO1eaf@e*)) jO1eb0@r jO1eb1@mr '() '() '() '() '() jO1eb5@rib '#f)) (lambda (jO1ec9@jO1eb8 jO1eca@jO1eba jO1ecb@jO1ebc jO1ecc@jO1ebe jO1ecd@jO1ec0 jO1ece@jO1ec2 jO1ecf@jO1ec4 jO1ed0@jO1ec6) (let ((jO1ed9@_exp* jO1ed0@jO1ec6) (jO1eda@kwd* jO1ecf@jO1ec4) (jO1edb@mod** jO1ece@jO1ec2) (jO1edc@rhs* jO1ecd@jO1ec0) (jO1edd@lex* jO1ecc@jO1ebe) (jO1ede@mr jO1ecb@jO1ebc) (jO1edf@r jO1eca@jO1eba) (jO1ee0@e* jO1ec9@jO1eb8)) (begin (if (null? jO1ee0@e*) (jOe58@syntax-violation '#f '"no expression in body" jO1ee0@e*) (void)) (let ((jO1ee9@init* (jOd96@chi-expr* (append (apply append (reverse jO1edb@mod**)) jO1ee0@e*) jO1edf@r jO1ede@mr))) (let ((jO1eeb@rhs* (jOdaa@chi-rhs* jO1edc@rhs* jO1edf@r jO1ede@mr))) (jOadb@jOa40@build-letrec* '#f (reverse jO1edd@lex*) (reverse jO1eeb@rhs*) (jOad6@jOa36@build-sequence '#f jO1ee9@init*))))))))))) (set! jO286a@jOdb0@chi-internal jOdb0@chi-internal) (set! jOdb2@parse-module (lambda (jO1eed@e) (let ((jO1eef@t jO1eed@e)) (let ((jO1ef1@ls/false (jOd78@syntax-dispatch jO1eef@t '(_ each-any . each-any)))) (if jO1ef1@ls/false (apply (lambda (jO1ef3@export* jO1ef4@b*) (begin (if (not (for-all jOb71@id? jO1ef3@export*)) (jOe58@syntax-violation '#f '"module exports must be identifiers" jO1eed@e) (void)) (values '#f (list->vector jO1ef3@export*) jO1ef4@b*))) jO1ef1@ls/false) (let ((jO1ef7@t jO1eef@t)) (let ((jO1ef9@ls/false (jOd78@syntax-dispatch jO1ef7@t '(_ any each-any . each-any)))) (if jO1ef9@ls/false (apply (lambda (jO1efb@name jO1efc@export* jO1efd@b*) (begin (if (not (jOb71@id? jO1efb@name)) (jOe58@syntax-violation '#f '"module name must be an identifier" jO1eed@e) (void)) (if (not (for-all jOb71@id? jO1efc@export*)) (jOe58@syntax-violation '#f '"module exports must be identifiers" jO1eed@e) (void)) (values jO1efb@name (list->vector jO1efc@export*) jO1efd@b*))) jO1ef9@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1ef7@t))))))))) (set! jO286b@jOdb2@parse-module jOdb2@parse-module) (set! jOdbc@module-interface? (lambda (jO1f01@x) (and (simple-struct? jO1f01@x) (eq? (simple-struct-name jO1f01@x) 'module-interface)))) (set! jO286c@jOdbc@module-interface? jOdbc@module-interface?) (set! jOdbe@module-interface-first-mark (lambda (jO1f03@x) (simple-struct-ref jO1f03@x '0))) (set! jO286d@jOdbe@module-interface-first-mark jOdbe@module-interface-first-mark) (set! jOdc0@set-module-interface-first-mark! (lambda (jO1f05@x jO1f06@val) (simple-struct-set! jO1f05@x '0 jO1f06@val))) (set! jO286e@jOdc0@set-module-interface-first-mark! jOdc0@set-module-interface-first-mark!) (set! jOdc2@module-interface-exp-id-vec (lambda (jO1f09@x) (simple-struct-ref jO1f09@x '1))) (set! jO286f@jOdc2@module-interface-exp-id-vec jOdc2@module-interface-exp-id-vec) (set! jOdc4@set-module-interface-exp-id-vec! (lambda (jO1f0b@x jO1f0c@val) (simple-struct-set! jO1f0b@x '1 jO1f0c@val))) (set! jO2870@jOdc4@set-module-interface-exp-id-vec! jOdc4@set-module-interface-exp-id-vec!) (set! jOdc6@module-interface-exp-lab-vec (lambda (jO1f0f@x) (simple-struct-ref jO1f0f@x '2))) (set! jO2871@jOdc6@module-interface-exp-lab-vec jOdc6@module-interface-exp-lab-vec) (set! jOdc8@set-module-interface-exp-lab-vec! (lambda (jO1f11@x jO1f12@val) (simple-struct-set! jO1f11@x '2 jO1f12@val))) (set! jO2872@jOdc8@set-module-interface-exp-lab-vec! jOdc8@set-module-interface-exp-lab-vec!) (set! jOdca@dummy '3) (set! jO2873@jOdca@dummy jOdca@dummy) (set! jOdcc@module-interface-exp-id* (lambda (jO1f15@iface jO1f16@id) (letrec* ((jO1f1a@diff-marks (lambda (jO1f21@ls jO1f22@x) (begin (if (null? jO1f21@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((jO1f25@a (car jO1f21@ls))) (if (eq? jO1f25@a jO1f22@x) '() (cons jO1f25@a (jO1f1a@diff-marks (cdr jO1f21@ls) jO1f22@x)))))))) (let ((jO1f1b@diff (jO1f1a@diff-marks (jOb43@stx-mark* jO1f16@id) (jOdbe@module-interface-first-mark jO1f15@iface))) (jO1f1c@id-vec (jOdc2@module-interface-exp-id-vec jO1f15@iface))) (if (null? jO1f1b@diff) jO1f1c@id-vec (vector-map (lambda (jO1f1f@x) (make-simple-struct 'stx '5 (list (jOb3f@stx-expr jO1f1f@x) (append jO1f1b@diff (jOb43@stx-mark* jO1f1f@x)) '() '()))) jO1f1c@id-vec)))))) (set! jO2874@jOdcc@module-interface-exp-id* jOdcc@module-interface-exp-id*) (set! jOdce@chi-internal-module (lambda (jO1f27@e jO1f28@r jO1f29@mr jO1f2a@lex* jO1f2b@rhs* jO1f2c@mod** jO1f2d@kwd*) (call-with-values (lambda () (jOdb2@parse-module jO1f27@e)) (lambda (jO1f3b@jO1f36 jO1f3c@jO1f38 jO1f3d@jO1f3a) (let ((jO1f41@e* jO1f3d@jO1f3a) (jO1f42@exp-id* jO1f3c@jO1f38) (jO1f43@name jO1f3b@jO1f36)) (let ((jO1f47@rib (jOb25@make-empty-rib))) (let ((jO1f49@e* (map (lambda (jO1f4b@x) (jOb5d@add-subst jO1f47@rib jO1f4b@x)) (jOb6f@syntax->list jO1f41@e*)))) (call-with-values (lambda () (jOdd0@chi-body* jO1f49@e* jO1f28@r jO1f29@mr jO1f2a@lex* jO1f2b@rhs* jO1f2c@mod** jO1f2d@kwd* '() jO1f47@rib '#f)) (lambda (jO1f5d@jO1f4e jO1f5e@jO1f50 jO1f5f@jO1f52 jO1f60@jO1f54 jO1f61@jO1f56 jO1f62@jO1f58 jO1f63@jO1f5a jO1f64@jO1f5c) (let ((jO1f6d@_exp* jO1f64@jO1f5c) (jO1f6e@kwd* jO1f63@jO1f5a) (jO1f6f@mod** jO1f62@jO1f58) (jO1f70@rhs* jO1f61@jO1f56) (jO1f71@lex* jO1f60@jO1f54) (jO1f72@mr jO1f5f@jO1f52) (jO1f73@r jO1f5e@jO1f50) (jO1f74@e* jO1f5d@jO1f4e)) (let ((jO1f7d@exp-lab* (vector-map (lambda (jO1f81@x) (or (jOb87@id->label (make-simple-struct 'stx '5 (list (jOb73@id->sym jO1f81@x) (jOb43@stx-mark* jO1f81@x) (list jO1f47@rib) '()))) (jOe58@syntax-violation '#f '"cannot find module export" jO1f81@x))) jO1f42@exp-id*)) (jO1f7e@mod** (cons jO1f74@e* jO1f6f@mod**))) (if (not jO1f43@name) (values jO1f71@lex* jO1f70@rhs* jO1f42@exp-id* jO1f7d@exp-lab* jO1f73@r jO1f72@mr jO1f7e@mod** jO1f6e@kwd*) (let ((jO1f83@lab (jOafd@gen-label 'module)) (jO1f84@iface (make-simple-struct 'module-interface '4 (list (car (jOb43@stx-mark* jO1f43@name)) (vector-map (lambda (jO1f87@x) (make-simple-struct 'stx '5 (list (jOb3f@stx-expr jO1f87@x) (jOb43@stx-mark* jO1f87@x) '() '()))) jO1f42@exp-id*) jO1f7d@exp-lab*)))) (values jO1f71@lex* jO1f70@rhs* (vector jO1f43@name) (vector jO1f83@lab) (cons (cons jO1f83@lab (cons '$module jO1f84@iface)) jO1f73@r) (cons (cons jO1f83@lab (cons '$module jO1f84@iface)) jO1f72@mr) jO1f7e@mod** jO1f6e@kwd*)))))))))))))) (set! jO2875@jOdce@chi-internal-module jOdce@chi-internal-module) (set! jOdd0@chi-body* (lambda (jO1f89@e* jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1f8f@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?) (if (null? jO1f89@e*) (values jO1f89@e* jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1f8f@kwd* jO1f90@exp*) (let ((jO1f9d@e (car jO1f89@e*))) (call-with-values (lambda () (jOb93@syntax-type jO1f9d@e jO1f8a@r)) (lambda (jO1fa5@jO1fa0 jO1fa6@jO1fa2 jO1fa7@jO1fa4) (let ((jO1fab@kwd jO1fa7@jO1fa4) (jO1fac@value jO1fa6@jO1fa2) (jO1fad@type jO1fa5@jO1fa0)) (let ((jO1fb1@kwd* (if (jOb71@id? jO1fab@kwd) (cons jO1fab@kwd jO1f8f@kwd*) jO1f8f@kwd*))) (let ((jO1fb3@t jO1fad@type)) (if (memv jO1fb3@t '(define)) (call-with-values (lambda () (jOcfa@parse-define jO1f9d@e)) (lambda (jO1fb9@jO1fb6 jO1fba@jO1fb8) (let ((jO1fbd@rhs jO1fba@jO1fb8) (jO1fbe@id jO1fb9@jO1fb6)) (begin (if (jOb7d@bound-id-member? jO1fbe@id jO1fb1@kwd*) (jOe58@syntax-violation '#f '"cannot redefine keyword" jO1f9d@e) (void)) (call-with-values (lambda () (jOb01@gen-define-label+loc jO1fbe@id jO1f91@rib)) (lambda (jO1fc5@jO1fc2 jO1fc6@jO1fc4) (let ((jO1fc9@lex jO1fc6@jO1fc4) (jO1fca@lab jO1fc5@jO1fc2)) (begin (jOb27@extend-rib! jO1f91@rib jO1fbe@id jO1fca@lab) (jOdd0@chi-body* (cdr jO1f89@e*) (jOd08@add-lexical jO1fca@lab jO1fc9@lex jO1f8a@r) jO1f8b@mr (cons jO1fc9@lex jO1f8c@lex*) (cons jO1fbd@rhs jO1f8d@rhs*) jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?))))))))) (if (memv jO1fb3@t '(define-syntax)) (call-with-values (lambda () (jOcfc@parse-define-syntax jO1f9d@e)) (lambda (jO1fd1@jO1fce jO1fd2@jO1fd0) (let ((jO1fd5@rhs jO1fd2@jO1fd0) (jO1fd6@id jO1fd1@jO1fce)) (begin (if (jOb7d@bound-id-member? jO1fd6@id jO1fb1@kwd*) (jOe58@syntax-violation '#f '"cannot redefine keyword" jO1f9d@e) (void)) (let ((jO1fd9@lab (jOb03@gen-define-label jO1fd6@id jO1f91@rib)) (jO1fda@expanded-rhs (jOdd2@expand-transformer jO1fd5@rhs jO1f8b@mr))) (begin (jOb27@extend-rib! jO1f91@rib jO1fd6@id jO1fd9@lab) (let ((jO1fdd@b (jOba9@make-eval-transformer jO1fda@expanded-rhs))) (jOdd0@chi-body* (cdr jO1f89@e*) (cons (cons jO1fd9@lab jO1fdd@b) jO1f8a@r) (cons (cons jO1fd9@lab jO1fdd@b) jO1f8b@mr) jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?)))))))) (if (memv jO1fb3@t '(let-syntax letrec-syntax)) (let ((jO1fdf@t jO1f9d@e)) (let ((jO1fe1@ls/false (jOd78@syntax-dispatch jO1fdf@t '(_ #(each (any any)) . each-any)))) (if (and jO1fe1@ls/false (apply (lambda (jO1fe3@xlhs* jO1fe4@xrhs* jO1fe5@xbody*) (if (not (jOb79@valid-bound-ids? jO1fe3@xlhs*)) (jOe58@syntax-violation '#f '"invalid identifiers" jO1f9d@e) (void))) jO1fe1@ls/false)) (apply (lambda (jO1fe9@xlhs* jO1fea@xrhs* jO1feb@xbody*) (let ((jO1fef@xlab* (map jOafd@gen-label jO1fe9@xlhs*))) (let ((jO1ff1@xrib (jOb31@make-full-rib jO1fe9@xlhs* jO1fef@xlab*))) (let ((jO1ff3@xb* (map (lambda (jO1ff5@x) (jOba9@make-eval-transformer (jOdd2@expand-transformer (if (eq? jO1fad@type 'let-syntax) jO1ff5@x (jOb5d@add-subst jO1ff1@xrib jO1ff5@x)) jO1f8b@mr))) jO1fea@xrhs*))) (jOdd0@chi-body* (append (map (lambda (jO1ff7@x) (jOb5d@add-subst jO1ff1@xrib jO1ff7@x)) jO1feb@xbody*) (cdr jO1f89@e*)) (append (map cons jO1fef@xlab* jO1ff3@xb*) jO1f8a@r) (append (map cons jO1fef@xlab* jO1ff3@xb*) jO1f8b@mr) jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?))))) jO1fe1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1fdf@t)))) (if (memv jO1fb3@t '(begin)) (let ((jO1ff9@t jO1f9d@e)) (let ((jO1ffb@ls/false (jOd78@syntax-dispatch jO1ff9@t '(_ . each-any)))) (if jO1ffb@ls/false (apply (lambda (jO1ffd@x*) (jOdd0@chi-body* (append jO1ffd@x* (cdr jO1f89@e*)) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?)) jO1ffb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO1ff9@t)))) (if (memv jO1fb3@t '(global-macro global-macro!)) (jOdd0@chi-body* (cons (jOb5d@add-subst jO1f91@rib (jOd94@chi-global-macro jO1fac@value jO1f9d@e)) (cdr jO1f89@e*)) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?) (if (memv jO1fb3@t '(local-macro local-macro!)) (jOdd0@chi-body* (cons (jOb5d@add-subst jO1f91@rib (jOd92@chi-local-macro jO1fac@value jO1f9d@e)) (cdr jO1f89@e*)) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?) (if (memv jO1fb3@t '(macro macro!)) (jOdd0@chi-body* (cons (jOb5d@add-subst jO1f91@rib (jOd90@chi-macro jO1fac@value jO1f9d@e)) (cdr jO1f89@e*)) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?) (if (memv jO1fb3@t '(module)) (call-with-values (lambda () (jOdce@chi-internal-module jO1f9d@e jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd*)) (lambda (jO200f@jO2000 jO2010@jO2002 jO2011@jO2004 jO2012@jO2006 jO2013@jO2008 jO2014@jO200a jO2015@jO200c jO2016@jO200e) (let ((jO201f@kwd* jO2016@jO200e) (jO2020@mod** jO2015@jO200c) (jO2021@mr jO2014@jO200a) (jO2022@r jO2013@jO2008) (jO2023@m-exp-lab* jO2012@jO2006) (jO2024@m-exp-id* jO2011@jO2004) (jO2025@rhs* jO2010@jO2002) (jO2026@lex* jO200f@jO2000)) (begin (vector-for-each (lambda (jO202f@id jO2030@lab) (jOb27@extend-rib! jO1f91@rib jO202f@id jO2030@lab)) jO2024@m-exp-id* jO2023@m-exp-lab*) (jOdd0@chi-body* (cdr jO1f89@e*) jO2022@r jO2021@mr jO2026@lex* jO2025@rhs* jO2020@mod** jO201f@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?))))) (if (memv jO1fb3@t '(library)) (begin (jOe3a@library-expander (jOb85@stx->datum jO1f9d@e)) (jOdd0@chi-body* (cdr jO1f89@e*) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?)) (if (memv jO1fb3@t '(export)) (let ((jO2033@t jO1f9d@e)) (let ((jO2035@ls/false (jOd78@syntax-dispatch jO2033@t '(_ . each-any)))) (if jO2035@ls/false (apply (lambda (jO2037@exp-decl*) (jOdd0@chi-body* (cdr jO1f89@e*) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* (append jO2037@exp-decl* jO1f90@exp*) jO1f91@rib jO1f92@top?)) jO2035@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO2033@t)))) (if (memv jO1fb3@t '(import)) (letrec* ((jO203a@module-import? (lambda (jO208d@e) (let ((jO208f@t jO208d@e)) (let ((jO2091@ls/false (jOd78@syntax-dispatch jO208f@t '(_ any)))) (if (and jO2091@ls/false (apply (lambda (jO2093@id) (jOb71@id? jO2093@id)) jO2091@ls/false)) (apply (lambda (jO2095@id) '#t) jO2091@ls/false) (let ((jO2097@t jO208f@t)) (let ((jO2099@ls/false (jOd78@syntax-dispatch jO2097@t '(_ . each-any)))) (if jO2099@ls/false (apply (lambda (jO209b@imp*) '#f) jO2099@ls/false) (let ((jO209d@t jO2097@t)) (let ((jO209f@ls/false (jOd78@syntax-dispatch jO209d@t '_))) (if jO209f@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"malformed import form" jO208d@e)) jO209f@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO209d@t)))))))))))) (jO203c@module-import (lambda (jO206b@e jO206c@r) (let ((jO206f@t jO206b@e)) (let ((jO2071@ls/false (jOd78@syntax-dispatch jO206f@t '(_ any)))) (if (and jO2071@ls/false (apply (lambda (jO2073@id) (jOb71@id? jO2073@id)) jO2071@ls/false)) (apply (lambda (jO2075@id) (call-with-values (lambda () (jOb93@syntax-type jO2075@id jO206c@r)) (lambda (jO207d@jO2078 jO207e@jO207a jO207f@jO207c) (let ((jO2083@kwd jO207f@jO207c) (jO2084@value jO207e@jO207a) (jO2085@type jO207d@jO2078)) (let ((jO2089@t jO2085@type)) (if (memv jO2089@t '($module)) (let ((jO208b@iface jO2084@value)) (values (jOdcc@module-interface-exp-id* jO208b@iface jO2075@id) (jOdc6@module-interface-exp-lab-vec jO208b@iface))) (jOe58@syntax-violation '#f '"invalid import" jO206b@e))))))) jO2071@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO206f@t)))))) (jO203e@library-import (lambda (jO204f@e) (let ((jO2051@t jO204f@e)) (let ((jO2053@ls/false (jOd78@syntax-dispatch jO2051@t '(any . each-any)))) (if jO2053@ls/false (apply (lambda (jO2055@ctxt jO2056@imp*) (call-with-values (lambda () (jOdda@parse-import-spec* (jOe5e@syntax->datum jO2056@imp*))) (lambda (jO205d@jO205a jO205e@jO205c) (let ((jO2061@subst-labels jO205e@jO205c) (jO2062@subst-names jO205d@jO205a)) (values (vector-map (lambda (jO2065@name) (jOb51@datum->stx jO2055@ctxt jO2065@name)) jO2062@subst-names) jO2061@subst-labels))))) jO2053@ls/false) (let ((jO2067@t jO2051@t)) (let ((jO2069@ls/false (jOd78@syntax-dispatch jO2067@t '_))) (if jO2069@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid import form" jO204f@e)) jO2069@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO2067@t)))))))))) (begin (call-with-values (lambda () (if (jO203a@module-import? jO1f9d@e) (jO203c@module-import jO1f9d@e jO1f8a@r) (jO203e@library-import jO1f9d@e))) (lambda (jO2043@jO2040 jO2044@jO2042) (let ((jO2047@lab* jO2044@jO2042) (jO2048@id* jO2043@jO2040)) (vector-for-each (lambda (jO204b@id jO204c@lab) (jOb27@extend-rib! jO1f91@rib jO204b@id jO204c@lab)) jO2048@id* jO2047@lab*)))) (jOdd0@chi-body* (cdr jO1f89@e*) jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?))) (if jO1f92@top? (jOdd0@chi-body* (cdr jO1f89@e*) jO1f8a@r jO1f8b@mr (cons (jOaf9@gen-lexical 'dummy) jO1f8c@lex*) (cons (cons 'top-expr jO1f9d@e) jO1f8d@rhs*) jO1f8e@mod** jO1fb1@kwd* jO1f90@exp* jO1f91@rib jO1f92@top?) (values jO1f89@e* jO1f8a@r jO1f8b@mr jO1f8c@lex* jO1f8d@rhs* jO1f8e@mod** jO1fb1@kwd* jO1f90@exp*)))))))))))))))))))))) (set! jO2876@jOdd0@chi-body* jOdd0@chi-body*) (set! jOdd2@expand-transformer (lambda (jO20a1@expr jO20a2@r) (let ((jO20a5@rtc (jOdde@make-collector))) (let ((jO20a7@expanded-rhs (let ((jO20b1@jO20aa jOde0@inv-collector) (jO20b2@jO20ac jOde2@vis-collector) (jO20b3@jO20ae jO20a5@rtc) (jO20b4@jO20b0 (lambda (jO20b9@x) (values)))) (let ((jO20bb@swap (lambda () (begin (let ((jO20bd@t (jO20b1@jO20aa))) (begin (jO20b1@jO20aa jO20b3@jO20ae) (set! jO20b3@jO20ae jO20bd@t))) (let ((jO20bf@t (jO20b2@jO20ac))) (begin (jO20b2@jO20ac jO20b4@jO20b0) (set! jO20b4@jO20b0 jO20bf@t))))))) (dynamic-wind jO20bb@swap (lambda () (jOd9a@chi-expr jO20a1@expr jO20a2@r jO20a2@r)) jO20bb@swap))))) (begin (for-each (let ((jO20c1@mark-visit (jOde2@vis-collector))) (lambda (jO20c3@x) (begin (jO98d@jO7db@invoke-library jO20c3@x) (jO20c1@mark-visit jO20c3@x)))) (jO20a5@rtc)) jO20a7@expanded-rhs))))) (set! jO2877@jOdd2@expand-transformer jOdd2@expand-transformer) (set! jOdd4@parse-exports (lambda (jO20c5@exp*) (let jO20cd@f ((jO20c7@exp* jO20c5@exp*) (jO20c8@int* '()) (jO20c9@ext* '())) (if (null? jO20c7@exp*) (begin (if (not (jOb79@valid-bound-ids? jO20c9@ext*)) (jOe58@syntax-violation 'export '"invalid exports" (jOdae@find-dups jO20c9@ext*)) (void)) (values (map jOe5e@syntax->datum jO20c9@ext*) jO20c8@int*)) (let ((jO20cf@t (car jO20c7@exp*))) (let ((jO20d1@ls/false (jOd78@syntax-dispatch jO20cf@t '(any . #(each (any any)))))) (if jO20d1@ls/false (apply (lambda (jO20d3@rename jO20d4@i* jO20d5@e*) (begin (if (not (and (eq? (jOe5e@syntax->datum jO20d3@rename) 'rename) (for-all jOb71@id? jO20d4@i*) (for-all jOb71@id? jO20d5@e*))) (jOe58@syntax-violation 'export '"invalid export specifier" (car jO20c7@exp*)) (void)) (jO20cd@f (cdr jO20c7@exp*) (append jO20d4@i* jO20c8@int*) (append jO20d5@e* jO20c9@ext*)))) jO20d1@ls/false) (let ((jO20d9@t jO20cf@t)) (let ((jO20db@ls/false (jOd78@syntax-dispatch jO20d9@t 'any))) (if jO20db@ls/false (apply (lambda (jO20dd@ie) (begin (if (not (jOb71@id? jO20dd@ie)) (jOe58@syntax-violation 'export '"invalid export" jO20dd@ie) (void)) (jO20cd@f (cdr jO20c7@exp*) (cons jO20dd@ie jO20c8@int*) (cons jO20dd@ie jO20c9@ext*)))) jO20db@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO20d9@t))))))))))) (set! jO2878@jOdd4@parse-exports jOdd4@parse-exports) (set! jOdd6@parse-library-name (lambda (jO20df@spec) (letrec* ((jO20e2@parse (lambda (jO20ef@x) (let ((jO20f1@t jO20ef@x)) (let ((jO20f3@ls/false (jOd78@syntax-dispatch jO20f1@t '(each-any)))) (if (and jO20f3@ls/false (apply (lambda (jO20f5@v*) (for-all (lambda (jO20f7@x) (let ((jO20f9@x (jOe5e@syntax->datum jO20f7@x))) (and (integer? jO20f9@x) (exact? jO20f9@x)))) jO20f5@v*)) jO20f3@ls/false)) (apply (lambda (jO20fb@v*) (values '() (map jOe5e@syntax->datum jO20fb@v*))) jO20f3@ls/false) (let ((jO20fd@t jO20f1@t)) (let ((jO20ff@ls/false (jOd78@syntax-dispatch jO20fd@t '(any . any)))) (if (and jO20ff@ls/false (apply (lambda (jO2101@x jO2102@rest) (symbol? (jOe5e@syntax->datum jO2101@x))) jO20ff@ls/false)) (apply (lambda (jO2105@x jO2106@rest) (call-with-values (lambda () (jO20e2@parse jO2106@rest)) (lambda (jO210d@jO210a jO210e@jO210c) (let ((jO2111@v* jO210e@jO210c) (jO2112@x* jO210d@jO210a)) (values (cons (jOe5e@syntax->datum jO2105@x) jO2112@x*) jO2111@v*))))) jO20ff@ls/false) (let ((jO2115@t jO20fd@t)) (let ((jO2117@ls/false (jOd78@syntax-dispatch jO2115@t '()))) (if jO2117@ls/false (apply (lambda () (values '() '())) jO2117@ls/false) (let ((jO2119@t jO2115@t)) (let ((jO211b@ls/false (jOd78@syntax-dispatch jO2119@t '_))) (if jO211b@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid library name" jO20df@spec)) jO211b@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO2119@t)))))))))))))))) (call-with-values (lambda () (jO20e2@parse jO20df@spec)) (lambda (jO20e7@jO20e4 jO20e8@jO20e6) (let ((jO20eb@ver* jO20e8@jO20e6) (jO20ec@name* jO20e7@jO20e4)) (begin (if (null? jO20ec@name*) (jOe58@syntax-violation '#f '"empty library name" jO20df@spec) (void)) (values jO20ec@name* jO20eb@ver*)))))))) (set! jO2879@jOdd6@parse-library-name jOdd6@parse-library-name) (set! jOdd8@parse-library (lambda (jO211d@e) (let ((jO211f@t jO211d@e)) (let ((jO2121@ls/false (jOd78@syntax-dispatch jO211f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and jO2121@ls/false (apply (lambda (jO2123@library jO2124@name* jO2125@export jO2126@exp* jO2127@import jO2128@imp* jO2129@b*) (and (eq? (jOe5e@syntax->datum jO2125@export) 'export) (eq? (jOe5e@syntax->datum jO2127@import) 'import) (eq? (jOe5e@syntax->datum jO2123@library) 'library))) jO2121@ls/false)) (apply (lambda (jO2131@library jO2132@name* jO2133@export jO2134@exp* jO2135@import jO2136@imp* jO2137@b*) (values jO2132@name* jO2134@exp* jO2136@imp* jO2137@b*)) jO2121@ls/false) (let ((jO213f@t jO211f@t)) (let ((jO2141@ls/false (jOd78@syntax-dispatch jO213f@t '_))) (if jO2141@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"malformed library" jO211d@e)) jO2141@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO213f@t))))))))) (set! jO287a@jOdd8@parse-library jOdd8@parse-library) (set! jOdda@parse-import-spec* (letrec* ((jO2144@idsyn? (lambda (jO234d@x) (symbol? (jOe5e@syntax->datum jO234d@x)))) (jO2146@dup-error (lambda (jO234b@name) (jOe58@syntax-violation 'import '"two imports with different bindings" jO234b@name))) (jO2148@merge-substs (lambda (jO2339@s jO233a@subst) (letrec* ((jO233e@insert-to-subst (lambda (jO233f@a jO2340@subst) (let ((jO2343@name (car jO233f@a)) (jO2344@label (cdr jO233f@a))) (let ((jO2347@t (assq jO2343@name jO2340@subst))) (if jO2347@t ((lambda (jO2349@x) (if (eq? (cdr jO2349@x) jO2344@label) jO2340@subst (jO2146@dup-error jO2343@name))) jO2347@t) (cons jO233f@a jO2340@subst))))))) (if (null? jO2339@s) jO233a@subst (jO233e@insert-to-subst (car jO2339@s) (jO2148@merge-substs (cdr jO2339@s) jO233a@subst)))))) (jO214a@exclude* (lambda (jO2309@sym* jO230a@subst) (letrec* ((jO230e@exclude (lambda (jO2327@sym jO2328@subst) (if (null? jO2328@subst) (jOe58@syntax-violation 'import '"cannot rename unbound identifier" jO2327@sym) (if (eq? jO2327@sym (caar jO2328@subst)) (values (cdar jO2328@subst) (cdr jO2328@subst)) (let ((jO232b@a (car jO2328@subst))) (call-with-values (lambda () (jO230e@exclude jO2327@sym (cdr jO2328@subst))) (lambda (jO2331@jO232e jO2332@jO2330) (let ((jO2335@subst jO2332@jO2330) (jO2336@old jO2331@jO232e)) (values jO2336@old (cons jO232b@a jO2335@subst))))))))))) (if (null? jO2309@sym*) (values '() jO230a@subst) (call-with-values (lambda () (jO230e@exclude (car jO2309@sym*) jO230a@subst)) (lambda (jO2313@jO2310 jO2314@jO2312) (let ((jO2317@subst jO2314@jO2312) (jO2318@old jO2313@jO2310)) (call-with-values (lambda () (jO214a@exclude* (cdr jO2309@sym*) jO2317@subst)) (lambda (jO231f@jO231c jO2320@jO231e) (let ((jO2323@subst jO2320@jO231e) (jO2324@old* jO231f@jO231c)) (values (cons jO2318@old jO2324@old*) jO2323@subst))))))))))) (jO214c@find* (lambda (jO2301@sym* jO2302@subst) (map (lambda (jO2305@x) (let ((jO2307@t (assq jO2305@x jO2302@subst))) (if jO2307@t (cdr jO2307@t) (jOe58@syntax-violation 'import '"cannot find identifier" jO2305@x)))) jO2301@sym*))) (jO214e@rem* (lambda (jO22f9@sym* jO22fa@subst) (let jO22ff@f ((jO22fd@subst jO22fa@subst)) (if (null? jO22fd@subst) '() (if (memq (caar jO22fd@subst) jO22f9@sym*) (jO22ff@f (cdr jO22fd@subst)) (cons (car jO22fd@subst) (jO22ff@f (cdr jO22fd@subst)))))))) (jO2150@remove-dups (lambda (jO22f7@ls) (if (null? jO22f7@ls) '() (if (memq (car jO22f7@ls) (cdr jO22f7@ls)) (jO2150@remove-dups (cdr jO22f7@ls)) (cons (car jO22f7@ls) (jO2150@remove-dups (cdr jO22f7@ls))))))) (jO2152@parse-library-name (lambda (jO220f@spec) (letrec* ((jO2212@subversion? (lambda (jO22f3@x) (let ((jO22f5@x (jOe5e@syntax->datum jO22f3@x))) (and (integer? jO22f5@x) (exact? jO22f5@x) (>= jO22f5@x '0))))) (jO2214@subversion-pred (lambda (jO2293@x*) (let ((jO2295@t jO2293@x*)) (let ((jO2297@ls/false (jOd78@syntax-dispatch jO2295@t 'any))) (if (and jO2297@ls/false (apply (lambda (jO2299@n) (jO2212@subversion? jO2299@n)) jO2297@ls/false)) (apply (lambda (jO229b@n) (lambda (jO229d@x) (= jO229d@x (jOe5e@syntax->datum jO229b@n)))) jO2297@ls/false) (let ((jO229f@t jO2295@t)) (let ((jO22a1@ls/false (jOd78@syntax-dispatch jO229f@t '(any . each-any)))) (if (and jO22a1@ls/false (apply (lambda (jO22a3@p? jO22a4@sub*) (eq? (jOe5e@syntax->datum jO22a3@p?) 'and)) jO22a1@ls/false)) (apply (lambda (jO22a7@p? jO22a8@sub*) (let ((jO22ab@p* (map jO2214@subversion-pred jO22a8@sub*))) (lambda (jO22ad@x) (for-all (lambda (jO22af@p) (jO22af@p jO22ad@x)) jO22ab@p*)))) jO22a1@ls/false) (let ((jO22b1@t jO229f@t)) (let ((jO22b3@ls/false (jOd78@syntax-dispatch jO22b1@t '(any . each-any)))) (if (and jO22b3@ls/false (apply (lambda (jO22b5@p? jO22b6@sub*) (eq? (jOe5e@syntax->datum jO22b5@p?) 'or)) jO22b3@ls/false)) (apply (lambda (jO22b9@p? jO22ba@sub*) (let ((jO22bd@p* (map jO2214@subversion-pred jO22ba@sub*))) (lambda (jO22bf@x) (exists (lambda (jO22c1@p) (jO22c1@p jO22bf@x)) jO22bd@p*)))) jO22b3@ls/false) (let ((jO22c3@t jO22b1@t)) (let ((jO22c5@ls/false (jOd78@syntax-dispatch jO22c3@t '(any any)))) (if (and jO22c5@ls/false (apply (lambda (jO22c7@p? jO22c8@sub) (eq? (jOe5e@syntax->datum jO22c7@p?) 'not)) jO22c5@ls/false)) (apply (lambda (jO22cb@p? jO22cc@sub) (let ((jO22cf@p (jO2214@subversion-pred jO22cc@sub))) (lambda (jO22d1@x) (not (jO22cf@p jO22d1@x))))) jO22c5@ls/false) (let ((jO22d3@t jO22c3@t)) (let ((jO22d5@ls/false (jOd78@syntax-dispatch jO22d3@t '(any any)))) (if (and jO22d5@ls/false (apply (lambda (jO22d7@p? jO22d8@n) (and (eq? (jOe5e@syntax->datum jO22d7@p?) '<=) (jO2212@subversion? jO22d8@n))) jO22d5@ls/false)) (apply (lambda (jO22db@p? jO22dc@n) (lambda (jO22df@x) (<= jO22df@x (jOe5e@syntax->datum jO22dc@n)))) jO22d5@ls/false) (let ((jO22e1@t jO22d3@t)) (let ((jO22e3@ls/false (jOd78@syntax-dispatch jO22e1@t '(any any)))) (if (and jO22e3@ls/false (apply (lambda (jO22e5@p? jO22e6@n) (and (eq? (jOe5e@syntax->datum jO22e5@p?) '>=) (jO2212@subversion? jO22e6@n))) jO22e3@ls/false)) (apply (lambda (jO22e9@p? jO22ea@n) (lambda (jO22ed@x) (>= jO22ed@x (jOe5e@syntax->datum jO22ea@n)))) jO22e3@ls/false) (let ((jO22ef@t jO22e1@t)) (let ((jO22f1@ls/false (jOd78@syntax-dispatch jO22ef@t '_))) (if jO22f1@ls/false (apply (lambda () (jOe58@syntax-violation 'import '"invalid sub-version spec" jO220f@spec jO2293@x*)) jO22f1@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO22ef@t)))))))))))))))))))))))) (jO2216@version-pred (lambda (jO2243@x*) (let ((jO2245@t jO2243@x*)) (let ((jO2247@ls/false (jOd78@syntax-dispatch jO2245@t '()))) (if jO2247@ls/false (apply (lambda () (lambda (jO2249@x) '#t)) jO2247@ls/false) (let ((jO224b@t jO2245@t)) (let ((jO224d@ls/false (jOd78@syntax-dispatch jO224b@t '(any . each-any)))) (if (and jO224d@ls/false (apply (lambda (jO224f@c jO2250@ver*) (eq? (jOe5e@syntax->datum jO224f@c) 'and)) jO224d@ls/false)) (apply (lambda (jO2253@c jO2254@ver*) (let ((jO2257@p* (map jO2216@version-pred jO2254@ver*))) (lambda (jO2259@x) (for-all (lambda (jO225b@p) (jO225b@p jO2259@x)) jO2257@p*)))) jO224d@ls/false) (let ((jO225d@t jO224b@t)) (let ((jO225f@ls/false (jOd78@syntax-dispatch jO225d@t '(any . each-any)))) (if (and jO225f@ls/false (apply (lambda (jO2261@c jO2262@ver*) (eq? (jOe5e@syntax->datum jO2261@c) 'or)) jO225f@ls/false)) (apply (lambda (jO2265@c jO2266@ver*) (let ((jO2269@p* (map jO2216@version-pred jO2266@ver*))) (lambda (jO226b@x) (exists (lambda (jO226d@p) (jO226d@p jO226b@x)) jO2269@p*)))) jO225f@ls/false) (let ((jO226f@t jO225d@t)) (let ((jO2271@ls/false (jOd78@syntax-dispatch jO226f@t '(any any)))) (if (and jO2271@ls/false (apply (lambda (jO2273@c jO2274@ver) (eq? (jOe5e@syntax->datum jO2273@c) 'not)) jO2271@ls/false)) (apply (lambda (jO2277@c jO2278@ver) (let ((jO227b@p (jO2216@version-pred jO2278@ver))) (lambda (jO227d@x) (not (jO227b@p jO227d@x))))) jO2271@ls/false) (let ((jO227f@t jO226f@t)) (let ((jO2281@ls/false (jOd78@syntax-dispatch jO227f@t 'each-any))) (if jO2281@ls/false (apply (lambda (jO2283@sub*) (let ((jO2285@p* (map jO2214@subversion-pred jO2283@sub*))) (lambda (jO2287@x) (let jO228d@f ((jO2289@p* jO2285@p*) (jO228a@x jO2287@x)) (if (null? jO2289@p*) '#t (if (null? jO228a@x) '#f (and ((car jO2289@p*) (car jO228a@x)) (jO228d@f (cdr jO2289@p*) (cdr jO228a@x))))))))) jO2281@ls/false) (let ((jO228f@t jO227f@t)) (let ((jO2291@ls/false (jOd78@syntax-dispatch jO228f@t '_))) (if jO2291@ls/false (apply (lambda () (jOe58@syntax-violation 'import '"invalid version spec" jO220f@spec jO2243@x*)) jO2291@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO228f@t)))))))))))))))))))))) (let jO2219@f ((jO2217@x jO220f@spec)) (let ((jO221b@t jO2217@x)) (let ((jO221d@ls/false (jOd78@syntax-dispatch jO221b@t '(each-any)))) (if jO221d@ls/false (apply (lambda (jO221f@version-spec*) (values '() (jO2216@version-pred jO221f@version-spec*))) jO221d@ls/false) (let ((jO2221@t jO221b@t)) (let ((jO2223@ls/false (jOd78@syntax-dispatch jO2221@t '(any . any)))) (if (and jO2223@ls/false (apply (lambda (jO2225@x jO2226@x*) (jO2144@idsyn? jO2225@x)) jO2223@ls/false)) (apply (lambda (jO2229@x jO222a@x*) (call-with-values (lambda () (jO2219@f jO222a@x*)) (lambda (jO2231@jO222e jO2232@jO2230) (let ((jO2235@pred jO2232@jO2230) (jO2236@name jO2231@jO222e)) (values (cons (jOe5e@syntax->datum jO2229@x) jO2236@name) jO2235@pred))))) jO2223@ls/false) (let ((jO2239@t jO2221@t)) (let ((jO223b@ls/false (jOd78@syntax-dispatch jO2239@t '()))) (if jO223b@ls/false (apply (lambda () (values '() (lambda (jO223d@x) '#t))) jO223b@ls/false) (let ((jO223f@t jO2239@t)) (let ((jO2241@ls/false (jOd78@syntax-dispatch jO223f@t '_))) (if jO2241@ls/false (apply (lambda () (jOe58@syntax-violation '#f '"invalid import spec" jO220f@spec)) jO2241@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO223f@t))))))))))))))))) (jO2154@import-library (lambda (jO21ff@spec*) (call-with-values (lambda () (jO2152@parse-library-name jO21ff@spec*)) (lambda (jO2205@jO2202 jO2206@jO2204) (let ((jO2209@pred jO2206@jO2204) (jO220a@name jO2205@jO2202)) (begin (if (null? jO220a@name) (jOe58@syntax-violation 'import '"empty library name" jO21ff@spec*) (void)) (let ((jO220d@lib (jO986@jO7cd@find-library-by-name jO220a@name))) (begin (if (not jO220d@lib) (jOe58@syntax-violation 'import '"cannot find library with required name" jO220a@name) (void)) (if (not (jO2209@pred (jO960@jO781@library-version jO220d@lib))) (jOe58@syntax-violation 'import '"library does not satisfy version specification" jO21ff@spec* jO220d@lib) (void)) ((jOde4@imp-collector) jO220d@lib) (jO968@jO791@library-subst jO220d@lib))))))))) (jO2156@get-import (lambda (jO2171@spec) (let ((jO2173@t jO2171@spec)) (let ((jO2175@ls/false (jOd78@syntax-dispatch jO2173@t '(any . each-any)))) (if (and jO2175@ls/false (apply (lambda (jO2177@x jO2178@x*) (not (memq (jOe5e@syntax->datum jO2177@x) '(for rename except only prefix library)))) jO2175@ls/false)) (apply (lambda (jO217b@x jO217c@x*) (jO2154@import-library (cons jO217b@x jO217c@x*))) jO2175@ls/false) (let ((jO217f@t jO2173@t)) (let ((jO2181@ls/false (jOd78@syntax-dispatch jO217f@t '(any any . #(each (any any)))))) (if (and jO2181@ls/false (apply (lambda (jO2183@rename jO2184@isp jO2185@old* jO2186@new*) (and (eq? (jOe5e@syntax->datum jO2183@rename) 'rename) (for-all jO2144@idsyn? jO2185@old*) (for-all jO2144@idsyn? jO2186@new*))) jO2181@ls/false)) (apply (lambda (jO218b@rename jO218c@isp jO218d@old* jO218e@new*) (let ((jO2193@subst (jO2156@get-import jO218c@isp)) (jO2194@old* (map jOe5e@syntax->datum jO218d@old*)) (jO2195@new* (map jOe5e@syntax->datum jO218e@new*))) (let ((jO2199@old-label* (jO214c@find* jO2194@old* jO2193@subst))) (let ((jO219b@subst (jO214e@rem* jO2194@old* jO2193@subst))) (jO2148@merge-substs (map cons jO2195@new* jO2199@old-label*) jO219b@subst))))) jO2181@ls/false) (let ((jO219d@t jO217f@t)) (let ((jO219f@ls/false (jOd78@syntax-dispatch jO219d@t '(any any . each-any)))) (if (and jO219f@ls/false (apply (lambda (jO21a1@except jO21a2@isp jO21a3@sym*) (and (eq? (jOe5e@syntax->datum jO21a1@except) 'except) (for-all jO2144@idsyn? jO21a3@sym*))) jO219f@ls/false)) (apply (lambda (jO21a7@except jO21a8@isp jO21a9@sym*) (let ((jO21ad@subst (jO2156@get-import jO21a8@isp))) (jO214e@rem* (map jOe5e@syntax->datum jO21a9@sym*) jO21ad@subst))) jO219f@ls/false) (let ((jO21af@t jO219d@t)) (let ((jO21b1@ls/false (jOd78@syntax-dispatch jO21af@t '(any any . each-any)))) (if (and jO21b1@ls/false (apply (lambda (jO21b3@only jO21b4@isp jO21b5@sym*) (and (eq? (jOe5e@syntax->datum jO21b3@only) 'only) (for-all jO2144@idsyn? jO21b5@sym*))) jO21b1@ls/false)) (apply (lambda (jO21b9@only jO21ba@isp jO21bb@sym*) (let ((jO21bf@subst (jO2156@get-import jO21ba@isp)) (jO21c0@sym* (map jOe5e@syntax->datum jO21bb@sym*))) (let ((jO21c3@sym* (jO2150@remove-dups jO21c0@sym*))) (let ((jO21c5@lab* (jO214c@find* jO21c3@sym* jO21bf@subst))) (map cons jO21c3@sym* jO21c5@lab*))))) jO21b1@ls/false) (let ((jO21c7@t jO21af@t)) (let ((jO21c9@ls/false (jOd78@syntax-dispatch jO21c7@t '(any any any)))) (if (and jO21c9@ls/false (apply (lambda (jO21cb@prefix jO21cc@isp jO21cd@p) (and (eq? (jOe5e@syntax->datum jO21cb@prefix) 'prefix) (jO2144@idsyn? jO21cd@p))) jO21c9@ls/false)) (apply (lambda (jO21d1@prefix jO21d2@isp jO21d3@p) (let ((jO21d7@subst (jO2156@get-import jO21d2@isp)) (jO21d8@prefix (symbol->string (jOe5e@syntax->datum jO21d3@p)))) (map (lambda (jO21db@x) (cons (string->symbol (string-append jO21d8@prefix (symbol->string (car jO21db@x)))) (cdr jO21db@x))) jO21d7@subst))) jO21c9@ls/false) (let ((jO21dd@t jO21c7@t)) (let ((jO21df@ls/false (jOd78@syntax-dispatch jO21dd@t '(any each-any)))) (if (and jO21df@ls/false (apply (lambda (jO21e1@library jO21e2@spec*) (eq? (jOe5e@syntax->datum jO21e1@library) 'library)) jO21df@ls/false)) (apply (lambda (jO21e5@library jO21e6@spec*) (jO2154@import-library jO21e6@spec*)) jO21df@ls/false) (let ((jO21e9@t jO21dd@t)) (let ((jO21eb@ls/false (jOd78@syntax-dispatch jO21e9@t '(any any . any)))) (if (and jO21eb@ls/false (apply (lambda (jO21ed@for jO21ee@isp jO21ef@rest) (eq? (jOe5e@syntax->datum jO21ed@for) 'for)) jO21eb@ls/false)) (apply (lambda (jO21f3@for jO21f4@isp jO21f5@rest) (jO2156@get-import jO21f4@isp)) jO21eb@ls/false) (let ((jO21f9@t jO21e9@t)) (let ((jO21fb@ls/false (jOd78@syntax-dispatch jO21f9@t 'any))) (if jO21fb@ls/false (apply (lambda (jO21fd@spec) (jOe58@syntax-violation 'import '"invalid import spec" jO21fd@spec)) jO21fb@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO21f9@t))))))))))))))))))))))))))) (jO2158@add-imports! (lambda (jO2161@imp jO2162@h) (let ((jO2165@subst (jO2156@get-import jO2161@imp))) (for-each (lambda (jO2167@x) (let ((jO2169@name (car jO2167@x)) (jO216a@label (cdr jO2167@x))) (let ((jO216d@t (hashtable-ref jO2162@h jO2169@name '#f))) (if jO216d@t ((lambda (jO216f@l) (if (not (eq? jO216f@l jO216a@label)) (jO2146@dup-error jO2169@name) (void))) jO216d@t) (hashtable-set! jO2162@h jO2169@name jO216a@label))))) jO2165@subst))))) (lambda (jO2159@imp*) (let jO215f@f ((jO215b@imp* jO2159@imp*) (jO215c@h (make-eq-hashtable))) (if (null? jO215b@imp*) (hashtable-entries jO215c@h) (begin (jO2158@add-imports! (car jO215b@imp*) jO215c@h) (jO215f@f (cdr jO215b@imp*) jO215c@h))))))) (set! jO287b@jOdda@parse-import-spec* jOdda@parse-import-spec*) (set! jOddc@make-top-rib (lambda (jO234f@names jO2350@labels) (let ((jO2353@rib (jOb25@make-empty-rib))) (begin (vector-for-each (lambda (jO2355@name jO2356@label) (begin (if (not (symbol? jO2355@name)) (error 'make-top-rib '"BUG: not a symbol" jO2355@name) (void)) (jOb29@extend-rib/nc! jO2353@rib (make-simple-struct 'stx '5 (list jO2355@name jOaf5@top-mark* '() '())) jO2356@label))) jO234f@names jO2350@labels) jO2353@rib)))) (set! jO287c@jOddc@make-top-rib jOddc@make-top-rib) (set! jOdde@make-collector (lambda () (let ((jO2359@ls '())) (lambda jO235d (let ((jO235e (length jO235d))) (if (= jO235e '0) (apply (lambda () jO2359@ls) jO235d) (if (= jO235e '1) (apply (lambda (jO235b@x) (set! jO2359@ls (jOaee@set-cons jO235b@x jO2359@ls))) jO235d) (error 'apply '"invalid arg count")))))))) (set! jO287d@jOdde@make-collector jOdde@make-collector) (set! jOde0@inv-collector (jO6c1@jO59f@make-parameter (lambda jO235f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (jO2361@x) (begin (if (not (procedure? jO2361@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" jO2361@x) (void)) jO2361@x)))) (set! jO287e@jOde0@inv-collector jOde0@inv-collector) (set! jOde2@vis-collector (jO6c1@jO59f@make-parameter (lambda jO2363@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (jO2365@x) (begin (if (not (procedure? jO2365@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" jO2365@x) (void)) jO2365@x)))) (set! jO287f@jOde2@vis-collector jOde2@vis-collector) (set! jOde4@imp-collector (jO6c1@jO59f@make-parameter (lambda jO2367@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (jO2369@x) (begin (if (not (procedure? jO2369@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" jO2369@x) (void)) jO2369@x)))) (set! jO2880@jOde4@imp-collector jOde4@imp-collector) (set! jOde6@chi-library-internal (lambda (jO236b@e* jO236c@rib jO236d@top?) (call-with-values (lambda () (jOdd0@chi-body* jO236b@e* '() '() '() '() '() '() '() jO236c@rib jO236d@top?)) (lambda (jO2381@jO2372 jO2382@jO2374 jO2383@jO2376 jO2384@jO2378 jO2385@jO237a jO2386@jO237c jO2387@jO237e jO2388@jO2380) (let ((jO2391@exp* jO2388@jO2380) (jO2392@_kwd* jO2387@jO237e) (jO2393@mod** jO2386@jO237c) (jO2394@rhs* jO2385@jO237a) (jO2395@lex* jO2384@jO2378) (jO2396@mr jO2383@jO2376) (jO2397@r jO2382@jO2374) (jO2398@e* jO2381@jO2372)) (values (append (apply append (reverse jO2393@mod**)) jO2398@e*) jO2397@r jO2396@mr (reverse jO2395@lex*) (reverse jO2394@rhs*) jO2391@exp*)))))) (set! jO2881@jOde6@chi-library-internal jOde6@chi-library-internal) (set! jOde8@chi-interaction-expr (lambda (jO23a1@e jO23a2@rib jO23a3@r) (call-with-values (lambda () (jOdd0@chi-body* (list jO23a1@e) jO23a3@r jO23a3@r '() '() '() '() '() jO23a2@rib '#t)) (lambda (jO23b7@jO23a8 jO23b8@jO23aa jO23b9@jO23ac jO23ba@jO23ae jO23bb@jO23b0 jO23bc@jO23b2 jO23bd@jO23b4 jO23be@jO23b6) (let ((jO23c7@_exp* jO23be@jO23b6) (jO23c8@_kwd* jO23bd@jO23b4) (jO23c9@mod** jO23bc@jO23b2) (jO23ca@rhs* jO23bb@jO23b0) (jO23cb@lex* jO23ba@jO23ae) (jO23cc@mr jO23b9@jO23ac) (jO23cd@r jO23b8@jO23aa) (jO23ce@e* jO23b7@jO23a8)) (let ((jO23d7@e* (jOda8@expand-interaction-rhs*/init* (reverse jO23cb@lex*) (reverse jO23ca@rhs*) (append (apply append (reverse jO23c9@mod**)) jO23ce@e*) jO23cd@r jO23cc@mr))) (let ((jO23d9@e (if (null? jO23d7@e*) (jOad7@jOa38@build-void) (if (null? (cdr jO23d7@e*)) (car jO23d7@e*) (jOad6@jOa36@build-sequence '#f jO23d7@e*))))) (values jO23d9@e jO23cd@r)))))))) (set! jO2882@jOde8@chi-interaction-expr jOde8@chi-interaction-expr) (set! jOdea@library-body-expander (lambda (jO23db@name jO23dc@main-exp* jO23dd@imp* jO23de@b* jO23df@top?) (letrec* ((jO23e6@itc (jOdde@make-collector))) (let ((jO23ef@jO23e8 jOde4@imp-collector) (jO23f0@jO23ea jOe68@top-level-context) (jO23f1@jO23ec jO23e6@itc) (jO23f2@jO23ee '#f)) (let ((jO23f7@swap (lambda () (begin (let ((jO23f9@t (jO23ef@jO23e8))) (begin (jO23ef@jO23e8 jO23f1@jO23ec) (set! jO23f1@jO23ec jO23f9@t))) (let ((jO23fb@t (jO23f0@jO23ea))) (begin (jO23f0@jO23ea jO23f2@jO23ee) (set! jO23f2@jO23ee jO23fb@t))))))) (dynamic-wind jO23f7@swap (lambda () (call-with-values (lambda () (jOdda@parse-import-spec* jO23dd@imp*)) (lambda (jO2401@jO23fe jO2402@jO2400) (let ((jO2405@subst-labels jO2402@jO2400) (jO2406@subst-names jO2401@jO23fe)) (let ((jO2409@rib (jOddc@make-top-rib jO2406@subst-names jO2405@subst-labels))) (letrec* ((jO240c@wrap (lambda (jO2487@x) (make-simple-struct 'stx '5 (list jO2487@x jOaf5@top-mark* (list jO2409@rib) '()))))) (let ((jO240d@b* (map jO240c@wrap jO23de@b*)) (jO240e@main-exp* (map jO240c@wrap jO23dc@main-exp*)) (jO240f@rtc (jOdde@make-collector)) (jO2410@vtc (jOdde@make-collector))) (let ((jO241d@jO2416 jOde0@inv-collector) (jO241e@jO2418 jOde2@vis-collector) (jO241f@jO241a jO240f@rtc) (jO2420@jO241c jO2410@vtc)) (let ((jO2425@swap (lambda () (begin (let ((jO2427@t (jO241d@jO2416))) (begin (jO241d@jO2416 jO241f@jO241a) (set! jO241f@jO241a jO2427@t))) (let ((jO2429@t (jO241e@jO2418))) (begin (jO241e@jO2418 jO2420@jO241c) (set! jO2420@jO241c jO2429@t))))))) (dynamic-wind jO2425@swap (lambda () (call-with-values (lambda () (jOde6@chi-library-internal jO240d@b* jO2409@rib jO23df@top?)) (lambda (jO2437@jO242c jO2438@jO242e jO2439@jO2430 jO243a@jO2432 jO243b@jO2434 jO243c@jO2436) (let ((jO2443@internal-exp* jO243c@jO2436) (jO2444@rhs* jO243b@jO2434) (jO2445@lex* jO243a@jO2432) (jO2446@mr jO2439@jO2430) (jO2447@r jO2438@jO242e) (jO2448@init* jO2437@jO242c)) (call-with-values (lambda () (jOdd4@parse-exports (append jO240e@main-exp* jO2443@internal-exp*))) (lambda (jO2453@jO2450 jO2454@jO2452) (let ((jO2457@exp-id* jO2454@jO2452) (jO2458@exp-name* jO2453@jO2450)) (begin (jOb2d@seal-rib! jO2409@rib) (let ((jO245b@init* (jOd96@chi-expr* jO2448@init* jO2447@r jO2446@mr))) (let ((jO245d@rhs* (jOdaa@chi-rhs* jO2444@rhs* jO2447@r jO2446@mr))) (begin (jOb2f@unseal-rib! jO2409@rib) (let ((jO245f@loc* (map jOafb@gen-global jO2445@lex*)) (jO2460@export-subst (jOe42@make-export-subst jO2458@exp-name* jO2457@exp-id*))) (letrec* ((jO2464@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (jOe44@make-export-env/macros jO2445@lex* jO245f@loc* jO2447@r)) (lambda (jO246b@jO2466 jO246c@jO2468 jO246d@jO246a) (let ((jO2471@macro* jO246d@jO246a) (jO2472@global* jO246c@jO2468) (jO2473@export-env jO246b@jO2466)) (begin (for-each (lambda (jO2477@s) (let ((jO2479@name (car jO2477@s)) (jO247a@label (cdr jO2477@s))) (let ((jO247d@p (assq jO247a@label jO2473@export-env))) (if jO247d@p (let ((jO247f@b (cdr jO247d@p))) (let ((jO2481@type (car jO247f@b))) (if (eq? jO2481@type 'mutable) (jOe58@syntax-violation 'export jO2464@errstr jO2479@name) (void)))) (void))))) jO2460@export-subst) (let ((jO2483@invoke-body (jOadc@jOa42@build-library-letrec* '#f jO23db@name jO2445@lex* jO245f@loc* jO245d@rhs* (if (null? jO245b@init*) (jOad7@jOa38@build-void) (jOad6@jOa36@build-sequence '#f jO245b@init*)))) (jO2484@invoke-definitions (map jOad3@jO995@build-global-define (map cdr jO2472@global*)))) (values (jO23e6@itc) (jO240f@rtc) (jO2410@vtc) (jOad6@jOa36@build-sequence '#f (append jO2484@invoke-definitions (list jO2483@invoke-body))) jO2471@macro* jO2460@export-subst jO2473@export-env))))))))))))))))))) jO2425@swap)))))))))) jO23f7@swap)))))) (set! jO2883@jOdea@library-body-expander jOdea@library-body-expander) (set! jOdec@core-library-expander (lambda (jO2489@e jO248a@verify-name) (call-with-values (lambda () (jOdd8@parse-library jO2489@e)) (lambda (jO2495@jO248e jO2496@jO2490 jO2497@jO2492 jO2498@jO2494) (let ((jO249d@b* jO2498@jO2494) (jO249e@imp* jO2497@jO2492) (jO249f@exp* jO2496@jO2490) (jO24a0@name* jO2495@jO248e)) (call-with-values (lambda () (jOdd6@parse-library-name jO24a0@name*)) (lambda (jO24a9@jO24a6 jO24aa@jO24a8) (let ((jO24ad@ver jO24aa@jO24a8) (jO24ae@name jO24a9@jO24a6)) (begin (jO248a@verify-name jO24ae@name) (call-with-values (lambda () (jOdea@library-body-expander jO24ae@name jO249f@exp* jO249e@imp* jO249d@b* '#f)) (lambda (jO24bf@jO24b2 jO24c0@jO24b4 jO24c1@jO24b6 jO24c2@jO24b8 jO24c3@jO24ba jO24c4@jO24bc jO24c5@jO24be) (let ((jO24cd@export-env jO24c5@jO24be) (jO24ce@export-subst jO24c4@jO24bc) (jO24cf@visit-code jO24c3@jO24ba) (jO24d0@invoke-code jO24c2@jO24b8) (jO24d1@visit-req* jO24c1@jO24b6) (jO24d2@invoke-req* jO24c0@jO24b4) (jO24d3@imp* jO24bf@jO24b2)) (values jO24ae@name jO24ad@ver jO24d3@imp* jO24d2@invoke-req* jO24d1@visit-req* jO24d0@invoke-code jO24cf@visit-code jO24ce@export-subst jO24cd@export-env))))))))))))) (set! jO2884@jOdec@core-library-expander jOdec@core-library-expander) (set! jOdee@parse-top-level-program (lambda (jO24db@e*) (let ((jO24dd@t jO24db@e*)) (let ((jO24df@ls/false (jOd78@syntax-dispatch jO24dd@t '((any . each-any) . each-any)))) (if (and jO24df@ls/false (apply (lambda (jO24e1@import jO24e2@imp* jO24e3@b*) (eq? (jOe5e@syntax->datum jO24e1@import) 'import)) jO24df@ls/false)) (apply (lambda (jO24e7@import jO24e8@imp* jO24e9@b*) (values jO24e8@imp* jO24e9@b*)) jO24df@ls/false) (let ((jO24ed@t jO24dd@t)) (let ((jO24ef@ls/false (jOd78@syntax-dispatch jO24ed@t '((any . any) . any)))) (if (and jO24ef@ls/false (apply (lambda (jO24f1@import jO24f2@x jO24f3@y) (eq? (jOe5e@syntax->datum jO24f1@import) 'import)) jO24ef@ls/false)) (apply (lambda (jO24f7@import jO24f8@x jO24f9@y) (jOe58@syntax-violation 'expander '"invalid syntax of top-level program" (jOb6b@syntax-car jO24db@e*))) jO24ef@ls/false) (let ((jO24fd@t jO24ed@t)) (let ((jO24ff@ls/false (jOd78@syntax-dispatch jO24fd@t '_))) (if jO24ff@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) jO24ff@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO24fd@t)))))))))))) (set! jO2885@jOdee@parse-top-level-program jOdee@parse-top-level-program) (set! jOdf0@top-level-expander (lambda (jO2501@e*) (call-with-values (lambda () (jOdee@parse-top-level-program jO2501@e*)) (lambda (jO2507@jO2504 jO2508@jO2506) (let ((jO250b@b* jO2508@jO2506) (jO250c@imp* jO2507@jO2504)) (call-with-values (lambda () (jOdea@library-body-expander '() '() jO250c@imp* jO250b@b* '#t)) (lambda (jO251d@jO2510 jO251e@jO2512 jO251f@jO2514 jO2520@jO2516 jO2521@jO2518 jO2522@jO251a jO2523@jO251c) (let ((jO252b@export-env jO2523@jO251c) (jO252c@export-subst jO2522@jO251a) (jO252d@visit-code jO2521@jO2518) (jO252e@invoke-code jO2520@jO2516) (jO252f@visit-req* jO251f@jO2514) (jO2530@invoke-req* jO251e@jO2512) (jO2531@imp* jO251d@jO2510)) (values jO2530@invoke-req* jO252e@invoke-code))))))))) (set! jO2886@jOdf0@top-level-expander jOdf0@top-level-expander) (set! jOdf2@rp (jO6be@jO599@make-record-printer 'env (lambda (jO2539@x jO253a@p jO253b@wr) (display '"#<environment>" jO253a@p)))) (set! jO2887@jOdf2@rp jOdf2@rp) (set! jOdfc@env? (lambda (jO253f@x) (and (simple-struct? jO253f@x) (eq? (simple-struct-name jO253f@x) 'env)))) (set! jO2888@jOdfc@env? jOdfc@env?) (set! jOdfe@env-names (lambda (jO2541@x) (simple-struct-ref jO2541@x '0))) (set! jO2889@jOdfe@env-names jOdfe@env-names) (set! jOe00@set-env-names! (lambda (jO2543@x jO2544@val) (simple-struct-set! jO2543@x '0 jO2544@val))) (set! jO288a@jOe00@set-env-names! jOe00@set-env-names!) (set! jOe02@env-labels (lambda (jO2547@x) (simple-struct-ref jO2547@x '1))) (set! jO288b@jOe02@env-labels jOe02@env-labels) (set! jOe04@set-env-labels! (lambda (jO2549@x jO254a@val) (simple-struct-set! jO2549@x '1 jO254a@val))) (set! jO288c@jOe04@set-env-labels! jOe04@set-env-labels!) (set! jOe06@env-itc (lambda (jO254d@x) (simple-struct-ref jO254d@x '2))) (set! jO288d@jOe06@env-itc jOe06@env-itc) (set! jOe08@set-env-itc! (lambda (jO254f@x jO2550@val) (simple-struct-set! jO254f@x '2 jO2550@val))) (set! jO288e@jOe08@set-env-itc! jOe08@set-env-itc!) (set! jOe0a@dummy '3) (set! jO288f@jOe0a@dummy jOe0a@dummy) (set! jOe0c@rp (jO6be@jO599@make-record-printer 'interaction-env (lambda (jO2553@x jO2554@p jO2555@wr) (display '"#<environment>" jO2554@p)))) (set! jO2890@jOe0c@rp jOe0c@rp) (set! jOe16@interaction-env? (lambda (jO2559@x) (and (simple-struct? jO2559@x) (eq? (simple-struct-name jO2559@x) 'interaction-env)))) (set! jO2891@jOe16@interaction-env? jOe16@interaction-env?) (set! jOe18@interaction-env-rib (lambda (jO255b@x) (simple-struct-ref jO255b@x '0))) (set! jO2892@jOe18@interaction-env-rib jOe18@interaction-env-rib) (set! jOe1a@set-interaction-env-rib! (lambda (jO255d@x jO255e@val) (simple-struct-set! jO255d@x '0 jO255e@val))) (set! jO2893@jOe1a@set-interaction-env-rib! jOe1a@set-interaction-env-rib!) (set! jOe1c@interaction-env-r (lambda (jO2561@x) (simple-struct-ref jO2561@x '1))) (set! jO2894@jOe1c@interaction-env-r jOe1c@interaction-env-r) (set! jOe1e@set-interaction-env-r! (lambda (jO2563@x jO2564@val) (simple-struct-set! jO2563@x '1 jO2564@val))) (set! jO2895@jOe1e@set-interaction-env-r! jOe1e@set-interaction-env-r!) (set! jOe20@interaction-env-locs (lambda (jO2567@x) (simple-struct-ref jO2567@x '2))) (set! jO2896@jOe20@interaction-env-locs jOe20@interaction-env-locs) (set! jOe22@set-interaction-env-locs! (lambda (jO2569@x jO256a@val) (simple-struct-set! jO2569@x '2 jO256a@val))) (set! jO2897@jOe22@set-interaction-env-locs! jOe22@set-interaction-env-locs!) (set! jOe24@dummy '3) (set! jO2898@jOe24@dummy jOe24@dummy) (set! jOe26@interaction-environment-symbols (lambda () (jOe2e@environment-symbols (jOe66@interaction-environment)))) (set! jO2899@jOe26@interaction-environment-symbols jOe26@interaction-environment-symbols) (set! jOe28@environment-bindings (lambda (jO256d@e) (vector->list (vector-map (lambda (jO256f@name jO2570@label) (jOe2a@parse-binding (cons jO256f@name (jO98c@jO7d9@imported-label->binding jO2570@label)))) (jOdfe@env-names jO256d@e) (jOe02@env-labels jO256d@e))))) (set! jO289a@jOe28@environment-bindings jOe28@environment-bindings) (set! jOe2a@parse-binding (lambda (jO2573@b) (cons (car jO2573@b) (let ((jO2575@t (cadr jO2573@b))) (if (memv jO2575@t '(core-prim global)) 'procedure (if (memv jO2575@t '(core-macro macro global-macro)) 'syntax (if (memv jO2575@t '($core-rtd)) 'record (if (eq? (car jO2573@b) (cadr jO2573@b)) 'syntax 'unknown)))))))) (set! jO289b@jOe2a@parse-binding jOe2a@parse-binding) (set! jOe2c@environment? (lambda (jO2577@x) (or (jOdfc@env? jO2577@x) (jOe16@interaction-env? jO2577@x)))) (set! jO289c@jOe2c@environment? jOe2c@environment?) (set! jOe2e@environment-symbols (lambda (jO2579@x) (if (jOdfc@env? jO2579@x) (vector->list (jOdfe@env-names jO2579@x)) (if (jOe16@interaction-env? jO2579@x) (map values (jOb0f@rib-sym* (jOe18@interaction-env-rib jO2579@x))) (assertion-violation 'environment-symbols '"not an environment" jO2579@x))))) (set! jO289d@jOe2e@environment-symbols jOe2e@environment-symbols) (set! jOe30@environment (lambda jO257b@imp* (let ((jO257d@itc (jOdde@make-collector))) (let ((jO2583@jO2580 jOde4@imp-collector) (jO2584@jO2582 jO257d@itc)) (let ((jO2587@swap (lambda () (let ((jO2589@t (jO2583@jO2580))) (begin (jO2583@jO2580 jO2584@jO2582) (set! jO2584@jO2582 jO2589@t)))))) (dynamic-wind jO2587@swap (lambda () (call-with-values (lambda () (jOdda@parse-import-spec* jO257b@imp*)) (lambda (jO258f@jO258c jO2590@jO258e) (let ((jO2593@subst-labels jO2590@jO258e) (jO2594@subst-names jO258f@jO258c)) (make-simple-struct 'env '4 (list jO2594@subst-names jO2593@subst-labels jO257d@itc)))))) jO2587@swap)))))) (set! jO289e@jOe30@environment jOe30@environment) (set! jOe32@null-environment (lambda (jO2597@n) (begin (if (not (eqv? jO2597@n '5)) (assertion-violation 'null-environment '"not 5" jO2597@n) (void)) (jOe30@environment '(psyntax null-environment-5))))) (set! jO289f@jOe32@null-environment jOe32@null-environment) (set! jOe34@scheme-report-environment (lambda (jO2599@n) (begin (if (not (eqv? jO2599@n '5)) (assertion-violation 'scheme-report-environment '"not 5" jO2599@n) (void)) (jOe30@environment '(psyntax scheme-report-environment-5))))) (set! jO28a0@jOe34@scheme-report-environment jOe34@scheme-report-environment) (set! jOe36@expand (lambda (jO259b@x jO259c@env) (if (jOdfc@env? jO259c@env) (let ((jO259f@rib (jOddc@make-top-rib (jOdfe@env-names jO259c@env) (jOe02@env-labels jO259c@env)))) (let ((jO25a1@x (make-simple-struct 'stx '5 (list jO259b@x jOaf5@top-mark* (list jO259f@rib) '()))) (jO25a2@itc (jOe06@env-itc jO259c@env)) (jO25a3@rtc (jOdde@make-collector)) (jO25a4@vtc (jOdde@make-collector))) (let ((jO25a9@x (let ((jO25bb@jO25ac jOe68@top-level-context) (jO25bc@jO25ae jOde0@inv-collector) (jO25bd@jO25b0 jOde2@vis-collector) (jO25be@jO25b2 jOde4@imp-collector) (jO25bf@jO25b4 '#f) (jO25c0@jO25b6 jO25a3@rtc) (jO25c1@jO25b8 jO25a4@vtc) (jO25c2@jO25ba jO25a2@itc)) (let ((jO25cb@swap (lambda () (begin (let ((jO25cd@t (jO25bb@jO25ac))) (begin (jO25bb@jO25ac jO25bf@jO25b4) (set! jO25bf@jO25b4 jO25cd@t))) (let ((jO25cf@t (jO25bc@jO25ae))) (begin (jO25bc@jO25ae jO25c0@jO25b6) (set! jO25c0@jO25b6 jO25cf@t))) (let ((jO25d1@t (jO25bd@jO25b0))) (begin (jO25bd@jO25b0 jO25c1@jO25b8) (set! jO25c1@jO25b8 jO25d1@t))) (let ((jO25d3@t (jO25be@jO25b2))) (begin (jO25be@jO25b2 jO25c2@jO25ba) (set! jO25c2@jO25ba jO25d3@t))))))) (dynamic-wind jO25cb@swap (lambda () (jOd9a@chi-expr jO25a1@x '() '())) jO25cb@swap))))) (begin (jOb2d@seal-rib! jO259f@rib) (values jO25a9@x (jO25a3@rtc)))))) (if (jOe16@interaction-env? jO259c@env) (let ((jO25d5@rib (jOe18@interaction-env-rib jO259c@env)) (jO25d6@r (jOe1c@interaction-env-r jO259c@env)) (jO25d7@rtc (jOdde@make-collector))) (let ((jO25db@x (make-simple-struct 'stx '5 (list jO259b@x jOaf5@top-mark* (list jO25d5@rib) '())))) (call-with-values (lambda () (let ((jO25f1@jO25e2 jOe68@top-level-context) (jO25f2@jO25e4 jOde0@inv-collector) (jO25f3@jO25e6 jOde2@vis-collector) (jO25f4@jO25e8 jOde4@imp-collector) (jO25f5@jO25ea jO259c@env) (jO25f6@jO25ec jO25d7@rtc) (jO25f7@jO25ee (jOdde@make-collector)) (jO25f8@jO25f0 (jOdde@make-collector))) (let ((jO2601@swap (lambda () (begin (let ((jO2603@t (jO25f1@jO25e2))) (begin (jO25f1@jO25e2 jO25f5@jO25ea) (set! jO25f5@jO25ea jO2603@t))) (let ((jO2605@t (jO25f2@jO25e4))) (begin (jO25f2@jO25e4 jO25f6@jO25ec) (set! jO25f6@jO25ec jO2605@t))) (let ((jO2607@t (jO25f3@jO25e6))) (begin (jO25f3@jO25e6 jO25f7@jO25ee) (set! jO25f7@jO25ee jO2607@t))) (let ((jO2609@t (jO25f4@jO25e8))) (begin (jO25f4@jO25e8 jO25f8@jO25f0) (set! jO25f8@jO25f0 jO2609@t))))))) (dynamic-wind jO2601@swap (lambda () (jOde8@chi-interaction-expr jO25db@x jO25d5@rib jO25d6@r)) jO2601@swap)))) (lambda (jO260b@jO25de jO260c@jO25e0) (let ((jO260f@r^ jO260c@jO25e0) (jO2610@e jO260b@jO25de)) (begin (jOe1e@set-interaction-env-r! jO259c@env jO260f@r^) (values jO2610@e (jO25d7@rtc)))))))) (assertion-violation 'expand '"not an environment" jO259c@env))))) (set! jO28a1@jOe36@expand jOe36@expand) (set! jOe38@eval (lambda (jO2613@x jO2614@env) (begin (if (not (jOe2c@environment? jO2614@env)) (error 'eval '"not an environment" jO2614@env) (void)) (call-with-values (lambda () (jOe36@expand jO2613@x jO2614@env)) (lambda (jO261b@jO2618 jO261c@jO261a) (let ((jO261f@invoke-req* jO261c@jO261a) (jO2620@x jO261b@jO2618)) (begin (for-each jO98d@jO7db@invoke-library jO261f@invoke-req*) (eval-core (jO717@jO6cf@expanded->core jO2620@x))))))))) (set! jO28a2@jOe38@eval jOe38@eval) (set! jOe3a@library-expander (lambda jO2691 (let ((jO2692 (length jO2691))) (if (= jO2692 '3) (apply (lambda (jO2623@x jO2624@filename jO2625@verify-name) (letrec* ((jO262a@build-visit-code (lambda (jO267f@macro*) (if (null? jO267f@macro*) (jOad7@jOa38@build-void) (jOad6@jOa36@build-sequence '#f (map (lambda (jO2681@x) (let ((jO2683@loc (car jO2681@x)) (jO2684@src (cddr jO2681@x))) (list 'set! jO2683@loc jO2684@src))) jO267f@macro*))))) (jO262c@visit! (lambda (jO2677@macro*) (for-each (lambda (jO2679@x) (let ((jO267b@loc (car jO2679@x)) (jO267c@proc (cadr jO2679@x))) (set-symbol-value! jO267b@loc jO267c@proc))) jO2677@macro*)))) (call-with-values (lambda () (jOdec@core-library-expander jO2623@x jO2625@verify-name)) (lambda (jO263f@jO262e jO2640@jO2630 jO2641@jO2632 jO2642@jO2634 jO2643@jO2636 jO2644@jO2638 jO2645@jO263a jO2646@jO263c jO2647@jO263e) (let ((jO2651@export-env jO2647@jO263e) (jO2652@export-subst jO2646@jO263c) (jO2653@macro* jO2645@jO263a) (jO2654@invoke-code jO2644@jO2638) (jO2655@vis* jO2643@jO2636) (jO2656@inv* jO2642@jO2634) (jO2657@imp* jO2641@jO2632) (jO2658@ver jO2640@jO2630) (jO2659@name jO263f@jO262e)) (let ((jO2663@id (gensym)) (jO2664@name jO2659@name) (jO2665@ver jO2658@ver) (jO2666@imp* (map jO991@jO7e3@library-spec jO2657@imp*)) (jO2667@vis* (map jO991@jO7e3@library-spec jO2655@vis*)) (jO2668@inv* (map jO991@jO7e3@library-spec jO2656@inv*)) (jO2669@visit-proc (lambda () (jO262c@visit! jO2653@macro*))) (jO266a@invoke-proc (lambda () (eval-core (jO717@jO6cf@expanded->core jO2654@invoke-code)))) (jO266b@visit-code (jO262a@build-visit-code jO2653@macro*)) (jO266c@invoke-code jO2654@invoke-code)) (begin (jO98b@jO7d7@install-library jO2663@id jO2664@name jO2665@ver jO2666@imp* jO2667@vis* jO2668@inv* jO2652@export-subst jO2651@export-env jO2669@visit-proc jO266a@invoke-proc jO266b@visit-code jO266c@invoke-code '#t jO2624@filename) (values jO2663@id jO2664@name jO2665@ver jO2666@imp* jO2667@vis* jO2668@inv* jO266c@invoke-code jO266b@visit-code jO2652@export-subst jO2651@export-env)))))))) jO2691) (if (= jO2692 '2) (apply (lambda (jO2687@x jO2688@filename) (jOe3a@library-expander jO2687@x jO2688@filename (lambda (jO268b@x) (values)))) jO2691) (if (= jO2692 '1) (apply (lambda (jO268d@x) (jOe3a@library-expander jO268d@x '#f (lambda (jO268f@x) (values)))) jO2691) (error 'apply '"invalid arg count"))))))) (set! jO28a3@jOe3a@library-expander jOe3a@library-expander) (set! jOe3c@boot-library-expand (lambda (jO2693@x) (call-with-values (lambda () (jOe3a@library-expander jO2693@x)) (lambda (jO26a9@jO2696 jO26aa@jO2698 jO26ab@jO269a jO26ac@jO269c jO26ad@jO269e jO26ae@jO26a0 jO26af@jO26a2 jO26b0@jO26a4 jO26b1@jO26a6 jO26b2@jO26a8) (let ((jO26bd@export-env jO26b2@jO26a8) (jO26be@export-subst jO26b1@jO26a6) (jO26bf@visit-code jO26b0@jO26a4) (jO26c0@invoke-code jO26af@jO26a2) (jO26c1@inv* jO26ae@jO26a0) (jO26c2@vis* jO26ad@jO269e) (jO26c3@imp* jO26ac@jO269c) (jO26c4@ver jO26ab@jO269a) (jO26c5@name jO26aa@jO2698) (jO26c6@id jO26a9@jO2696)) (values jO26c5@name jO26c0@invoke-code jO26be@export-subst jO26bd@export-env)))))) (set! jO28a4@jOe3c@boot-library-expand jOe3c@boot-library-expand) (set! jOe3e@rev-map-append (lambda (jO26d1@f jO26d2@ls jO26d3@ac) (if (null? jO26d2@ls) jO26d3@ac (jOe3e@rev-map-append jO26d1@f (cdr jO26d2@ls) (cons (jO26d1@f (car jO26d2@ls)) jO26d3@ac))))) (set! jO28a5@jOe3e@rev-map-append jOe3e@rev-map-append) (set! jOe40@build-exports (lambda (jO26d7@lex*+loc* jO26d8@init*) (jOad6@jOa36@build-sequence '#f (cons (jOad7@jOa38@build-void) (jOe3e@rev-map-append (lambda (jO26db@x) (list 'set! (cdr jO26db@x) (car jO26db@x))) jO26d7@lex*+loc* jO26d8@init*))))) (set! jO28a6@jOe40@build-exports jOe40@build-exports) (set! jOe42@make-export-subst (lambda (jO26dd@name* jO26de@id*) (map (lambda (jO26e1@name jO26e2@id) (let ((jO26e5@label (jOb87@id->label jO26e2@id))) (begin (if (not jO26e5@label) (jOe58@syntax-violation '#f '"cannot export unbound identifier" jO26e2@id) (void)) (cons jO26e1@name jO26e5@label)))) jO26dd@name* jO26de@id*))) (set! jO28a7@jOe42@make-export-subst jOe42@make-export-subst) (set! jOe44@make-export-env/macros (lambda (jO26e7@lex* jO26e8@loc* jO26e9@r) (letrec* ((jO26ee@lookup (lambda (jO270b@x) (let jO2713@f ((jO270d@x jO270b@x) (jO270e@lex* jO26e7@lex*) (jO270f@loc* jO26e8@loc*)) (if (pair? jO270e@lex*) (if (eq? jO270d@x (car jO270e@lex*)) (car jO270f@loc*) (jO2713@f jO270d@x (cdr jO270e@lex*) (cdr jO270f@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let jO26f7@f ((jO26ef@r jO26e9@r) (jO26f0@env '()) (jO26f1@global* '()) (jO26f2@macro* '())) (if (null? jO26ef@r) (values jO26f0@env jO26f1@global* jO26f2@macro*) (let ((jO26f9@x (car jO26ef@r))) (let ((jO26fb@label (car jO26f9@x)) (jO26fc@b (cdr jO26f9@x))) (let ((jO26ff@t (jOb8d@binding-type jO26fc@b))) (if (memv jO26ff@t '(lexical)) (let ((jO2701@v (jOb8f@binding-value jO26fc@b))) (let ((jO2703@loc (jO26ee@lookup (jOd02@lexical-var jO2701@v))) (jO2704@type (if (jOd04@lexical-mutable? jO2701@v) 'mutable 'global))) (jO26f7@f (cdr jO26ef@r) (cons (cons* jO26fb@label jO2704@type jO2703@loc) jO26f0@env) (cons (cons (jOd02@lexical-var jO2701@v) jO2703@loc) jO26f1@global*) jO26f2@macro*))) (if (memv jO26ff@t '(local-macro)) (let ((jO2707@loc (gensym))) (jO26f7@f (cdr jO26ef@r) (cons (cons* jO26fb@label 'global-macro jO2707@loc) jO26f0@env) jO26f1@global* (cons (cons jO2707@loc (jOb8f@binding-value jO26fc@b)) jO26f2@macro*))) (if (memv jO26ff@t '(local-macro!)) (let ((jO2709@loc (gensym))) (jO26f7@f (cdr jO26ef@r) (cons (cons* jO26fb@label 'global-macro! jO2709@loc) jO26f0@env) jO26f1@global* (cons (cons jO2709@loc (jOb8f@binding-value jO26fc@b)) jO26f2@macro*))) (if (memv jO26ff@t '($rtd $module)) (jO26f7@f (cdr jO26ef@r) (cons jO26f9@x jO26f0@env) jO26f1@global* jO26f2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jOb8d@binding-type jO26fc@b) (jOb8f@binding-value jO26fc@b)))))))))))))) (set! jO28a8@jOe44@make-export-env/macros jOe44@make-export-env/macros) (set! jOe46@generate-temporaries (lambda (jO2715@ls) (let ((jO2717@t jO2715@ls)) (let ((jO2719@ls/false (jOd78@syntax-dispatch jO2717@t 'each-any))) (if jO2719@ls/false (apply (lambda (jO271b@ls) (map (lambda (jO271d@x) (make-simple-struct 'stx '5 (list (let ((jO271f@x (jOe5e@syntax->datum jO271d@x))) (if (or (symbol? jO271f@x) (string? jO271f@x)) (gensym jO271f@x) (gensym 't))) jOaf5@top-mark* '() '()))) jO271b@ls)) jO2719@ls/false) (let ((jO2721@t jO2717@t)) (let ((jO2723@ls/false (jOd78@syntax-dispatch jO2721@t '_))) (if jO2723@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) jO2723@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO2721@t))))))))) (set! jO28a9@jOe46@generate-temporaries jOe46@generate-temporaries) (set! jOe48@free-identifier=? (lambda (jO2725@x jO2726@y) (if (jOb71@id? jO2725@x) (if (jOb71@id? jO2726@y) (jOb77@free-id=? jO2725@x jO2726@y) (assertion-violation 'free-identifier=? '"not an identifier" jO2726@y)) (assertion-violation 'free-identifier=? '"not an identifier" jO2725@x)))) (set! jO28aa@jOe48@free-identifier=? jOe48@free-identifier=?) (set! jOe4a@bound-identifier=? (lambda (jO2729@x jO272a@y) (if (jOb71@id? jO2729@x) (if (jOb71@id? jO272a@y) (jOb75@bound-id=? jO2729@x jO272a@y) (assertion-violation 'bound-identifier=? '"not an identifier" jO272a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" jO2729@x)))) (set! jO28ab@jOe4a@bound-identifier=? jOe4a@bound-identifier=?) (set! jOe4c@make-source-condition (lambda (jO272d@x) (letrec* ((jO2737@jO2732 (make-record-type-descriptor '&source-information &condition-rtd 'jO2735 '#f '#f '#((immutable file-name) (immutable line)))) (jO2739@jO2734 '#f) (jO273b@jO2733 (make-record-constructor-descriptor jO2737@jO2732 &condition-rcd jO2739@jO2734)) (jO273e@jO2731 (record-predicate jO2737@jO2732)) (jO2740@make-source-condition (record-constructor jO273b@jO2733)) (jO2742@jO272f (record-accessor jO2737@jO2732 '0)) (jO2744@jO2730 (record-accessor jO2737@jO2732 '1)) (jO2746@source-condition? (condition-predicate jO2737@jO2732)) (jO2748@source-filename (condition-accessor jO2737@jO2732 jO2742@jO272f)) (jO274a@source-character (condition-accessor jO2737@jO2732 jO2744@jO2730))) (if (and (pair? jO272d@x) (pair? (cdr jO272d@x))) (jO2740@make-source-condition (car jO272d@x) (cadr jO272d@x)) (condition))))) (set! jO28ac@jOe4c@make-source-condition jOe4c@make-source-condition) (set! jOe4e@extract-position-condition (lambda (jO274b@x) (jOe4c@make-source-condition (jOe50@expression-position jO274b@x)))) (set! jO28ad@jOe4e@extract-position-condition jOe4e@extract-position-condition) (set! jOe50@expression-position (lambda (jO274d@x) (and (jOb3d@stx? jO274d@x) (let ((jO274f@x (jOb3f@stx-expr jO274d@x))) (and (jO6b5@jO587@annotation? jO274f@x) (jO6b6@jO589@annotation-source jO274f@x)))))) (set! jO28ae@jOe50@expression-position jOe50@expression-position) (set! jOe52@assertion-error (lambda (jO2751@expr jO2752@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list jO2751@expr)) (jOe4c@make-source-condition jO2752@pos))))) (set! jO28af@jOe52@assertion-error jOe52@assertion-error) (set! jOe54@syntax-error (lambda (jO2755@x . jO2757@args) (begin (if (not (for-all string? jO2757@args)) (assertion-violation 'syntax-error '"invalid argument" jO2757@args) (void)) (raise (condition (make-message-condition (if (null? jO2757@args) '"invalid syntax" (apply string-append jO2757@args))) (make-syntax-violation (jOe5e@syntax->datum jO2755@x) '#f) (jOe4e@extract-position-condition jO2755@x)))))) (set! jO28b0@jOe54@syntax-error jOe54@syntax-error) (set! jOe56@syntax-violation* (lambda (jO2759@who jO275a@msg jO275b@form jO275c@condition-object) (begin (if (not (string? jO275a@msg)) (assertion-violation 'syntax-violation '"message is not a string" jO275a@msg) (void)) (let ((jO2761@who (if (or (string? jO2759@who) (symbol? jO2759@who)) jO2759@who (if (not jO2759@who) (let ((jO2763@t jO275b@form)) (let ((jO2765@ls/false (jOd78@syntax-dispatch jO2763@t 'any))) (if (and jO2765@ls/false (apply (lambda (jO2767@id) (jOb71@id? jO2767@id)) jO2765@ls/false)) (apply (lambda (jO2769@id) (jOe5e@syntax->datum jO2769@id)) jO2765@ls/false) (let ((jO276b@t jO2763@t)) (let ((jO276d@ls/false (jOd78@syntax-dispatch jO276b@t '(any . any)))) (if (and jO276d@ls/false (apply (lambda (jO276f@id jO2770@rest) (jOb71@id? jO276f@id)) jO276d@ls/false)) (apply (lambda (jO2773@id jO2774@rest) (jOe5e@syntax->datum jO2773@id)) jO276d@ls/false) (let ((jO2777@t jO276b@t)) (let ((jO2779@ls/false (jOd78@syntax-dispatch jO2777@t '_))) (if jO2779@ls/false (apply (lambda () '#f) jO2779@ls/false) (jOe58@syntax-violation '#f '"invalid syntax" jO2777@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" jO2759@who))))) (raise (condition (if jO2761@who (make-who-condition jO2761@who) (condition)) (make-message-condition jO275a@msg) jO275c@condition-object (jOe4e@extract-position-condition jO275b@form))))))) (set! jO28b1@jOe56@syntax-violation* jOe56@syntax-violation*) (set! jOe58@syntax-violation (lambda jO2789 (let ((jO278a (length jO2789))) (if (= jO278a '3) (apply (lambda (jO277b@who jO277c@msg jO277d@form) (jOe58@syntax-violation jO277b@who jO277c@msg jO277d@form '#f)) jO2789) (if (= jO278a '4) (apply (lambda (jO2781@who jO2782@msg jO2783@form jO2784@subform) (jOe56@syntax-violation* jO2781@who jO2782@msg jO2783@form (make-syntax-violation (jOe5e@syntax->datum jO2783@form) (jOe5e@syntax->datum jO2784@subform)))) jO2789) (error 'apply '"invalid arg count")))))) (set! jO28b2@jOe58@syntax-violation jOe58@syntax-violation) (set! jOe5a@identifier? (lambda (jO278b@x) (jOb71@id? jO278b@x))) (set! jO28b3@jOe5a@identifier? jOe5a@identifier?) (set! jOe5c@datum->syntax (lambda (jO278d@id jO278e@datum) (if (jOb71@id? jO278d@id) (jOb51@datum->stx jO278d@id jO278e@datum) (assertion-violation 'datum->syntax '"not an identifier" jO278d@id)))) (set! jO28b4@jOe5c@datum->syntax jOe5c@datum->syntax) (set! jOe5e@syntax->datum (lambda (jO2791@x) (jOb85@stx->datum jO2791@x))) (set! jO28b5@jOe5e@syntax->datum jOe5e@syntax->datum) (set! jOe60@ungensym-all (lambda (jO2793@code) (if (pair? jO2793@code) (cons (jOe60@ungensym-all (car jO2793@code)) (jOe60@ungensym-all (cdr jO2793@code))) (if (symbol? jO2793@code) (ungensym jO2793@code) jO2793@code)))) (set! jO28b6@jOe60@ungensym-all jOe60@ungensym-all) (set! jOe62@compile-r6rs-top-level (lambda (jO2795@x*) (call-with-values (lambda () (jOdf0@top-level-expander jO2795@x*)) (lambda (jO279b@jO2798 jO279c@jO279a) (let ((jO279f@invoke-code jO279c@jO279a) (jO27a0@lib* jO279b@jO2798)) (lambda () (begin (for-each jO98d@jO7db@invoke-library jO27a0@lib*) (let ((jO27a3@expanded (jO717@jO6cf@expanded->core jO279f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (jOe60@ungensym-all jO27a3@expanded)) (void)) (eval-core jO27a3@expanded)))))))))) (set! jO28b7@jOe62@compile-r6rs-top-level jOe62@compile-r6rs-top-level) (set! jOe64@pre-compile-r6rs-top-level (lambda (jO27a5@x*) (call-with-values (lambda () (jOdf0@top-level-expander jO27a5@x*)) (lambda (jO27ab@jO27a8 jO27ac@jO27aa) (let ((jO27af@invoke-code jO27ac@jO27aa) (jO27b0@lib* jO27ab@jO27a8)) (begin (for-each jO98d@jO7db@invoke-library jO27b0@lib*) (jO6bf@jO59b@compile-core (jO717@jO6cf@expanded->core jO27af@invoke-code)))))))) (set! jO28b8@jOe64@pre-compile-r6rs-top-level jOe64@pre-compile-r6rs-top-level) (set! jOe66@interaction-environment (let ((jO27b3@the-env '#f)) (lambda () (or jO27b3@the-env (let ((jO27b5@lib (jO986@jO7cd@find-library-by-name '(mosh interaction))) (jO27b6@rib (jOb25@make-empty-rib))) (begin (let ((jO27b9@subst (jO968@jO791@library-subst jO27b5@lib))) (begin (jOb11@set-rib-sym*! jO27b6@rib (map car jO27b9@subst)) (jOb15@set-rib-mark**! jO27b6@rib (map (lambda (jO27bb@x) jOaf5@top-mark*) jO27b9@subst)) (jOb19@set-rib-label*! jO27b6@rib (map cdr jO27b9@subst)))) (let ((jO27bd@env (make-simple-struct 'interaction-env '4 (list jO27b6@rib '() '())))) (begin (set! jO27b3@the-env jO27bd@env) jO27bd@env)))))))) (set! jO28b9@jOe66@interaction-environment jOe66@interaction-environment) (set! jOe68@top-level-context (jO6c1@jO59f@make-parameter '#f)) (set! jO28ba@jOe68@top-level-context jOe68@top-level-context) (jO983@jO7c7@current-library-expander jOe3a@library-expander))
(begin (begin (jO714@jO6c9@current-primitive-locations (lambda (jO2e09@x) (let ((jO2e0b@t (assq jO2e09@x '((syntax-error . jO28b0@jOe54@syntax-error) (syntax-dispatch . jO284e@jOd78@syntax-dispatch) (load . jO2a3a@jO28e1@load) (interaction-environment . jO28b9@jOe66@interaction-environment) (library-path . jO97b@jO7b7@library-path) (mosh-cache-dir . jO6c2@jO5a1@mosh-cache-dir) (make-parameter . jO6c1@jO59f@make-parameter) (make-variable-transformer . jO280b@jOba3@make-variable-transformer) (identifier? . jO28b3@jOe5a@identifier?) (generate-temporaries . jO28a9@jOe46@generate-temporaries) (free-identifier=? . jO28aa@jOe48@free-identifier=?) (syntax->datum . jO28b5@jOe5e@syntax->datum) (datum->syntax . jO28b4@jOe5c@datum->syntax) (bound-identifier=? . jO28ab@jOe4a@bound-identifier=?) (scheme-report-environment . jO28a0@jOe34@scheme-report-environment) (null-environment . jO289f@jOe32@null-environment) (command-line . jO2a37@jO28db@command-line) (eval . jO28a2@jOe38@eval) (environment . jO289e@jOe30@environment) (syntax-violation . jO28b2@jOe58@syntax-violation) (assertion-error . jO28af@jOe52@assertion-error))))) (if jO2e0b@t (cdr jO2e0b@t) '#f)))) (jO98b@jO7d7@install-library 'jO2de6 '(mosh interaction) '() '() '() '() '((regexp? . jO2da6) (alist->eq-hash-table . jO2da2) (format . jO2d9f) (string-split . jO2d94) (call-process . jO2d8e) (set-current-directory! . jO2d8a) (expand-path . jO2d89) (current-directory . jO2d88) (%spawn . jO2d87) (%waitpid . jO2d86) (simple-struct-name . jO2d85) (simple-struct-set! . jO2d84) (simple-struct-ref . jO2d83) (make-simple-struct . jO2d82) (simple-struct? . jO2d81) (pointer-ref-c-int64 . jO2d80) (pointer-ref-c-int32 . jO2d7f) (pointer-ref-c-int16 . jO2d7e) (pointer-ref-c-int8 . jO2d7d) (pointer-ref-c-uint64 . jO2d7c) (pointer-ref-c-uint32 . jO2d7b) (pointer-ref-c-uint16 . jO2d7a) (pointer-ref-c-uint8 . jO2d79) (pointer-set-c-uint64! . jO2d78) (pointer-set-c-uint32! . jO2d77) (pointer-set-c-uint16! . jO2d76) (pointer-set-c-uint8! . jO2d75) (pointer-set-c-int64! . jO2d74) (pointer-set-c-int32! . jO2d73) (pointer-set-c-int16! . jO2d72) (pointer-set-c-int8! . jO2d71) (pointer-set-c-pointer! . jO2d70) (pointer-set-c-double! . jO2d6f) (pointer-set-c-float! . jO2d6e) (pointer-set-c-long-long! . jO2d6d) (pointer-set-c-long! . jO2d6c) (pointer-set-c-int! . jO2d6b) (pointer-set-c-short! . jO2d6a) (pointer-set-c-char! . jO2d69) (pointer-ref-c-pointer . jO2d68) (pointer-ref-c-double . jO2d67) (pointer-ref-c-float . jO2d66) (pointer-ref-c-unsigned-long-long . jO2d65) (pointer-ref-c-signed-long-long . jO2d64) (pointer-ref-c-unsigned-long . jO2d63) (pointer-ref-c-signed-long . jO2d62) (pointer-ref-c-unsigned-int . jO2d61) (pointer-ref-c-signed-int . jO2d60) (pointer-ref-c-unsigned-short . jO2d5f) (pointer-ref-c-signed-short . jO2d5e) (pointer-ref-c-unsigned-char . jO2d5d) (pointer-ref-c-signed-char . jO2d5c) (pointer->integer . jO2d5b) (integer->pointer . jO2d5a) (pointer? . jO2d59) (shared-errno . jO2d58) (%ffi-supported? . jO2d53) (%ffi-pointer->string . jO2d52) (%ffi-call . jO2d51) (%ffi-lookup . jO2d50) (%ffi-open . jO2d4f) (null-terminated-utf8->string . jO2d4e) (null-terminated-bytevector->string . jO2d4d) (%exec . jO2d4c) (%fork . jO2d4b) (%pipe . jO2d4a) (p . jO2d49) (whereis . jO2d2d) (register . jO2d2c) (vm-join! . jO2d2b) (vm-set-value! . jO2d2a) (vm? . jO2d29) (main-vm? . jO2d28) (vm-eval . jO2d27) (vm-self . jO2d26) (vm-start! . jO2d25) (make-vm . jO2d24) (mutex-try-lock! . jO2d23) (mutex-unlock! . jO2d22) (mutex-lock! . jO2d21) (mutex? . jO2d20) (make-mutex . jO2d1f) (condition-variable-notify-all! . jO2d1e) (condition-variable-notify! . jO2d1d) (condition-variable-wait! . jO2d1c) (make-condition-variable . jO2d1b) (write/ss . jO2d1a) (string-upcase . jO2d02) (string-titlecase . jO2d01) (string-normalize-nfkd . jO2d00) (string-normalize-nfkc . jO2cff) (string-normalize-nfd . jO2cfe) (string-normalize-nfc . jO2cfd) (string-foldcase . jO2cfc) (string-downcase . jO2cfb) (string-ci>? . jO2cfa) (string-ci>=? . jO2cf9) (string-ci=? . jO2cf8) (string-ci<? . jO2cf7) (string-ci<=? . jO2cf6) (char-whitespace? . jO2cf5) (char-upper-case? . jO2cf4) (char-title-case? . jO2cf3) (char-numeric? . jO2cf2) (char-lower-case? . jO2cf1) (char-general-category . jO2cf0) (char-upcase . jO2cef) (char-titlecase . jO2cee) (char-foldcase . jO2ced) (char-downcase . jO2cec) (char-ci>? . jO2ceb) (char-ci>=? . jO2cea) (char-ci=? . jO2ce9) (char-ci<? . jO2ce8) (char-ci<=? . jO2ce7) (char-alphabetic? . jO2ce6) (make-variable-transformer . jOba2) (identifier? . jOe59) (generate-temporaries . jOe45) (free-identifier=? . jOe47) (syntax->datum . jOe5d) (datum->syntax . jOe5b) (bound-identifier=? . jOe49) (record-type-descriptor? . jO2ce5) (record-predicate . jO2ce4) (record-mutator . jO2ce3) (record-constructor . jO2ce2) (record-accessor . jO2ce1) (make-record-type-descriptor . jO2ce0) (make-record-constructor-descriptor . jO2cdf) (record? . jO2cde) (record-type-uid . jO2cdd) (record-type-sealed? . jO2cdc) (record-type-parent . jO2cdb) (record-type-opaque? . jO2cda) (record-type-name . jO2cd9) (record-type-generative? . jO2cd8) (record-type-field-names . jO2cd7) (record-rtd . jO2cd6) (record-field-mutable? . jO2cd5) (delete-file . jO2cd4) (file-exists? . jO2cd3) (vector-sort! . jO2cd2) (vector-sort . jO2cd1) (list-sort . jO2cd0) (symbol-hash . jO2ccf) (string-ci-hash . jO2cce) (string-hash . jO2ccd) (equal-hash . jO2ccc) (hashtable-equivalence-function . jO2ccb) (make-hashtable . jO2cca) (hashtable-hash-function . jO2cc9) (make-eqv-hashtable . jO2cc8) (make-eq-hashtable . jO2cc7) (hashtable? . jO2cc6) (hashtable-update! . jO2cc5) (hashtable-size . jO2cc4) (hashtable-set! . jO2cc3) (hashtable-ref . jO2cc2) (hashtable-mutable? . jO2cc1) (hashtable-keys . jO2cc0) (hashtable-entries . jO2cbf) (hashtable-delete! . jO2cbe) (hashtable-copy . jO2cbd) (hashtable-contains? . jO2cbc) (hashtable-clear! . jO2cbb) (call-with-output-file . jO2cba) (call-with-input-file . jO2cb9) (write-char . jO2cb8) (write . jO2cb7) (with-output-to-file . jO2cb6) (with-input-from-file . jO2cb5) (read-char . jO2cb4) (read . jO2cb3) (peek-char . jO2cb2) (open-output-file . jO2cb1) (open-input-file . jO2cb0) (newline . jO2caf) (display . jO2cae) (close-output-port . jO2cad) (close-input-port . jO2cac) (eof-object? . jO2cab) (eof-object . jO2caa) (current-error-port . jO2ca9) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (utf-8-codec . jO2ca4) (utf-16-codec . jO2ca3) (transcoder-error-handling-mode . jO2ca2) (transcoder-eol-style . jO2ca1) (transcoder-codec . jO2ca0) (transcoded-port . jO2c9f) (textual-port? . jO2c9e) (string->bytevector . jO2c9d) (standard-output-port . jO2c9c) (standard-input-port . jO2c9b) (standard-error-port . jO2c9a) (set-port-position! . jO2c99) (put-u8 . jO2c98) (put-string . jO2c97) (put-datum . jO2c96) (put-char . jO2c95) (put-bytevector . jO2c94) (port? . jO2c93) (port-transcoder . jO2c92) (port-position . jO2c91) (port-has-set-port-position!? . jO2c90) (port-has-port-position? . jO2c8f) (port-eof? . jO2c8e) (output-port-buffer-mode . jO2c8d) (open-string-output-port . jO2c8c) (open-string-input-port . jO2c8b) (open-file-output-port . jO2c8a) (open-file-input/output-port . jO2c89) (open-file-input-port . jO2c88) (open-bytevector-output-port . jO2c87) (open-bytevector-input-port . jO2c86) (native-transcoder . jO2c85) (native-eol-style . jO2c84) (make-transcoder . jO2c83) (latin-1-codec . jO2c82) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (make-i/o-encoding-error . jO2c77) (make-i/o-decoding-error . jO2c76) (make-custom-textual-output-port . jO2c75) (make-custom-textual-input/output-port . jO2c74) (make-custom-textual-input-port . jO2c73) (make-custom-binary-output-port . jO2c72) (make-custom-binary-input/output-port . jO2c71) (make-custom-binary-input-port . jO2c70) (make-bytevector . jO2c6f) (lookahead-u8 . jO2c6e) (lookahead-char . jO2c6d) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (i/o-encoding-error? . jO2c5f) (i/o-encoding-error-char . jO2c5e) (i/o-decoding-error? . jO2c5d) (get-u8 . jO2c5c) (get-string-n! . jO2c5b) (get-string-n . jO2c5a) (get-string-all . jO2c59) (get-line . jO2c58) (get-datum . jO2c57) (get-char . jO2c56) (get-bytevector-some . jO2c55) (get-bytevector-n! . jO2c54) (get-bytevector-n . jO2c53) (get-bytevector-all . jO2c52) (flush-output-port . jO2c51) (close-port . jO2c50) (exit . jO2c48) (command-line . jO28da) (string-fill! . jO2c47) (string-set! . jO2c46) (set-cdr! . jO2c45) (set-car! . jO2c44) (remove . jO2c43) (remv . jO2c42) (remp . jO2c41) (remq . jO2c40) (partition . jO2c3f) (memv . jO2c3e) (memq . jO2c3d) (memp . jO2c3c) (member . jO2c3b) (exists . jO2c3a) (for-all . jO2c39) (fold-right . jO2c38) (fold-left . jO2c37) (find . jO2c36) (filter . jO2c35) (cons* . jO2c34) (assv . jO2c33) (assq . jO2c32) (assp . jO2c31) (assoc . jO2c30) (call-with-string-output-port . jO2c2f) (call-with-port . jO2c2e) (call-with-bytevector-output-port . jO2c2d) (bytevector->string . jO2c2c) (buffer-mode? . jO2c2b) (binary-port? . jO2c2a) (with-exception-handler . jO2c29) (raise-continuable . jO2c28) (raise . jO2c27) (eval . jOe37) (environment . jOe2f) (make-enumeration . jO2c26) (enum-set=? . jO2c25) (enum-set-universe . jO2c24) (enum-set-union . jO2c23) (enum-set-subset? . jO2c22) (enum-set-projection . jO2c21) (enum-set-member? . jO2c20) (enum-set-intersection . jO2c1f) (enum-set-indexer . jO2c1e) (enum-set-difference . jO2c1d) (enum-set-constructor . jO2c1c) (enum-set-complement . jO2c1b) (enum-set->list . jO2c1a) (who-condition? . jO2c19) (warning? . jO2c18) (violation? . jO2c17) (undefined-violation? . jO2c16) (syntax-violation? . jO2c15) (syntax-violation-subform . jO2c14) (syntax-violation-form . jO2c13) (syntax-violation . jOe57) (simple-conditions . jO2c12) (serious-condition? . jO2c11) (non-continuable-violation? . jO2c10) (message-condition? . jO2c0f) (make-who-condition . jO2c0e) (make-warning . jO2c0d) (make-violation . jO2c0c) (make-undefined-violation . jO2c0b) (make-syntax-violation . jO2c0a) (make-serious-condition . jO2c09) (make-non-continuable-violation . jO2c08) (make-message-condition . jO2c07) (make-lexical-violation . jO2c06) (make-irritants-condition . jO2c05) (make-implementation-restriction-violation . jO2c04) (make-error . jO2c03) (make-assertion-violation . jO2c02) (lexical-violation? . jO2c01) (irritants-condition? . jO2c00) (implementation-restriction-violation? . jO2bff) (error? . jO2bfe) (condition-who . jO2bfd) (condition-predicate . jO2bfc) (condition-message . jO2bfb) (condition-irritants . jO2bfa) (condition-accessor . jO2bf9) (condition . jO2bf8) (assertion-violation? . jO2bf7) (condition? . jO2bf6) (utf32->string . jO2bf5) (utf16->string . jO2bf4) (utf8->string . jO2bf3) (uint-list->bytevector . jO2bf2) (u8-list->bytevector . jO2bf1) (string->utf8 . jO2bf0) (string->utf32 . jO2bef) (string->utf16 . jO2bee) (sint-list->bytevector . jO2bed) (native-endianness . jO2bec) (bytevector? . jO2beb) (bytevector=? . jO2bea) (bytevector-uint-set! . jO2be9) (bytevector-uint-ref . jO2be8) (bytevector-u8-set! . jO2be7) (bytevector-u8-ref . jO2be6) (bytevector-u64-set! . jO2be5) (bytevector-u64-ref . jO2be4) (bytevector-u64-native-set! . jO2be3) (bytevector-u64-native-ref . jO2be2) (bytevector-u32-set! . jO2be1) (bytevector-u32-ref . jO2be0) (bytevector-u32-native-set! . jO2bdf) (bytevector-u32-native-ref . jO2bde) (bytevector-u16-set! . jO2bdd) (bytevector-u16-ref . jO2bdc) (bytevector-u16-native-set! . jO2bdb) (bytevector-u16-native-ref . jO2bda) (bytevector-sint-set! . jO2bd9) (bytevector-sint-ref . jO2bd8) (bytevector-s8-set! . jO2bd7) (bytevector-s8-ref . jO2bd6) (bytevector-s64-set! . jO2bd5) (bytevector-s64-ref . jO2bd4) (bytevector-s64-native-set! . jO2bd3) (bytevector-s64-native-ref . jO2bd2) (bytevector-s32-set! . jO2bd1) (bytevector-s32-ref . jO2bd0) (bytevector-s32-native-set! . jO2bcf) (bytevector-s32-native-ref . jO2bce) (bytevector-s16-set! . jO2bcd) (bytevector-s16-ref . jO2bcc) (bytevector-s16-native-set! . jO2bcb) (bytevector-s16-native-ref . jO2bca) (bytevector-length . jO2bc9) (bytevector-ieee-single-ref . jO2bc8) (bytevector-ieee-single-set! . jO2bc7) (bytevector-ieee-single-native-set! . jO2bc6) (bytevector-ieee-single-native-ref . jO2bc5) (bytevector-ieee-double-set! . jO2bc4) (bytevector-ieee-double-ref . jO2bc3) (bytevector-ieee-double-native-set! . jO2bc2) (bytevector-ieee-double-native-ref . jO2bc1) (bytevector-fill! . jO2bc0) (bytevector-copy! . jO2bbf) (bytevector-copy . jO2bbe) (bytevector->uint-list . jO2bbd) (bytevector->u8-list . jO2bbc) (bytevector->sint-list . jO2bbb) (no-nans-violation? . jO2bba) (no-infinities-violation? . jO2bb9) (make-no-nans-violation . jO2bb8) (make-no-infinities-violation . jO2bb7) (real->flonum . jO2bb6) (flzero? . jO2bb5) (fltruncate . jO2bb4) (fltan . jO2bb3) (flsqrt . jO2bb2) (flsin . jO2bb1) (flround . jO2bb0) (flpositive? . jO2baf) (flonum? . jO2bae) (flodd? . jO2bad) (flnumerator . jO2bac) (flnegative? . jO2bab) (flnan? . jO2baa) (flmod0 . jO2ba9) (flmod . jO2ba8) (flmin . jO2ba7) (flmax . jO2ba6) (fllog . jO2ba5) (flinteger? . jO2ba4) (flinfinite? . jO2ba3) (flfloor . jO2ba2) (flfinite? . jO2ba1) (flexpt . jO2ba0) (flexp . jO2b9f) (fleven? . jO2b9e) (fldiv0-and-mod0 . jO2b9d) (fldiv0 . jO2b9c) (fldiv-and-mod . jO2b9b) (fldiv . jO2b9a) (fldenominator . jO2b99) (flcos . jO2b98) (flceiling . jO2b97) (flatan . jO2b96) (flasin . jO2b95) (flacos . jO2b94) (flabs . jO2b93) (fl>? . jO2b92) (fl>=? . jO2b91) (fl=? . jO2b90) (fl<? . jO2b8f) (fl<=? . jO2b8e) (fl/ . jO2b8d) (fl- . jO2b8c) (fl+ . jO2b8b) (fl* . jO2b8a) (fixnum->flonum . jO2b89) (fxzero? . jO2b88) (fxxor . jO2b87) (fxrotate-bit-field . jO2b86) (fxreverse-bit-field . jO2b85) (fxpositive? . jO2b84) (fxodd? . jO2b83) (fxnot . jO2b82) (fxnegative? . jO2b81) (fxmod0 . jO2b80) (fxmod . jO2b7f) (fxmin . jO2b7e) (fxmax . jO2b7d) (fxlength . jO2b7c) (fxior . jO2b7b) (fxif . jO2b7a) (fxfirst-bit-set . jO2b79) (fxeven? . jO2b78) (fxdiv0-and-mod0 . jO2b77) (fxdiv0 . jO2b76) (fxdiv-and-mod . jO2b75) (fxdiv . jO2b74) (fxcopy-bit-field . jO2b73) (fxcopy-bit . jO2b72) (fxbit-set? . jO2b71) (fxbit-field . jO2b70) (fxbit-count . jO2b6f) (fxarithmetic-shift-right . jO2b6e) (fxarithmetic-shift-left . jO2b6d) (fxarithmetic-shift . jO2b6c) (fxand . jO2b6b) (fx>? . jO2b6a) (fx>=? . jO2b69) (fx=? . jO2b68) (fx<? . jO2b67) (fx<=? . jO2b66) (fx-/carry . jO2b65) (fx- . jO2b64) (fx+/carry . jO2b63) (fx+ . jO2b62) (fx*/carry . jO2b61) (fx* . jO2b60) (greatest-fixnum . jO2b5f) (least-fixnum . jO2b5e) (fixnum-width . jO2b5d) (fixnum? . jO2b5c) (bitwise-rotate-bit-field . jO2b5b) (bitwise-reverse-bit-field . jO2b5a) (bitwise-length . jO2b59) (bitwise-if . jO2b58) (bitwise-first-bit-set . jO2b57) (bitwise-copy-bit-field . jO2b56) (bitwise-copy-bit . jO2b55) (bitwise-bit-set? . jO2b54) (bitwise-bit-field . jO2b53) (bitwise-bit-count . jO2b52) (bitwise-xor . jO2b51) (bitwise-ior . jO2b50) (bitwise-and . jO2b4f) (bitwise-not . jO2b4e) (bitwise-arithmetic-shift-right . jO2b4d) (bitwise-arithmetic-shift-left . jO2b4c) (bitwise-arithmetic-shift . jO2b4b) (zero? . jO2b4a) (vector? . jO2b49) (vector-set! . jO2b48) (vector-ref . jO2b47) (vector-map . jO2b46) (vector-length . jO2b45) (vector-for-each . jO2b44) (vector-fill! . jO2b43) (vector->list . jO2b42) (vector . jO2b41) (values . jO2b40) (truncate . jO2b3f) (tan . jO2b3e) (symbol? . jO2b3d) (symbol=? . jO2b3c) (symbol->string . jO2b3b) (substring . jO2b3a) (string? . jO2b39) (string>? . jO2b38) (string>=? . jO2b37) (string=? . jO2b36) (string<? . jO2b35) (string<=? . jO2b34) (string-ref . jO2b33) (string-length . jO2b32) (string-for-each . jO2b31) (string-copy . jO2b30) (string-append . jO2b2f) (string->symbol . jO2b2e) (string->number . jO2b2d) (string->list . jO2b2c) (string . jO2b2b) (sqrt . jO2b2a) (sin . jO2b29) (round . jO2b28) (reverse . jO2b27) (real? . jO2b26) (real-valued? . jO2b25) (real-part . jO2b24) (rationalize . jO2b23) (rational? . jO2b22) (rational-valued? . jO2b21) (procedure? . jO2b20) (positive? . jO2b1f) (pair? . jO2b1e) (odd? . jO2b1d) (numerator . jO2b1c) (number? . jO2b1b) (number->string . jO2b1a) (null? . jO2b19) (not . jO2b18) (negative? . jO2b17) (nan? . jO2b16) (min . jO2b15) (max . jO2b14) (map . jO2b13) (make-vector . jO2b12) (make-string . jO2b11) (make-rectangular . jO2b10) (make-polar . jO2b0f) (magnitude . jO2b0e) (log . jO2b0d) (list? . jO2b0c) (list-tail . jO2b0b) (list-ref . jO2b0a) (list->vector . jO2b09) (list->string . jO2b08) (list . jO2b07) (length . jO2b06) (lcm . jO2b05) (integer? . jO2b04) (integer-valued? . jO2b03) (integer->char . jO2b02) (infinite? . jO2b01) (inexact? . jO2b00) (inexact . jO2aff) (imag-part . jO2afe) (gcd . jO2afd) (for-each . jO2afc) (floor . jO2afb) (finite? . jO2afa) (expt . jO2af9) (exp . jO2af8) (exact? . jO2af7) (exact-integer-sqrt . jO2af6) (exact . jO2af5) (even? . jO2af4) (error . jO2af3) (eqv? . jO2af2) (equal? . jO2af1) (eq? . jO2af0) (dynamic-wind . jO2aef) (div0-and-mod0 . jO2aee) (mod0 . jO2aed) (div0 . jO2aec) (div-and-mod . jO2aeb) (mod . jO2aea) (div . jO2ae9) (denominator . jO2ae8) (cos . jO2ae7) (cons . jO2ae6) (complex? . jO2ae5) (char? . jO2ae4) (char>? . jO2ae3) (char>=? . jO2ae2) (char=? . jO2ae1) (char<? . jO2ae0) (char<=? . jO2adf) (char->integer . jO2ade) (ceiling . jO2add) (call-with-values . jO2adc) (call/cc . jO2adb) (call-with-current-continuation . jO2ada) (cddddr . jO2ad9) (cdddar . jO2ad8) (cddadr . jO2ad7) (cddaar . jO2ad6) (cdaddr . jO2ad5) (cdadar . jO2ad4) (cdaadr . jO2ad3) (cdaaar . jO2ad2) (cadddr . jO2ad1) (caddar . jO2ad0) (cadadr . jO2acf) (cadaar . jO2ace) (caaddr . jO2acd) (caadar . jO2acc) (caaadr . jO2acb) (caaaar . jO2aca) (cdddr . jO2ac9) (cddar . jO2ac8) (cdadr . jO2ac7) (cdaar . jO2ac6) (caddr . jO2ac5) (cadar . jO2ac4) (caadr . jO2ac3) (caaar . jO2ac2) (cddr . jO2ac1) (cdar . jO2ac0) (cadr . jO2abf) (caar . jO2abe) (cdr . jO2abd) (car . jO2abc) (boolean? . jO2abb) (boolean=? . jO2aba) (atan . jO2ab9) (assertion-violation . jO2ab8) (asin . jO2ab7) (apply . jO2ab6) (append . jO2ab5) (angle . jO2ab4) (acos . jO2ab3) (abs . jO2ab2) (/ . jO2ab1) (* . jO2ab0) (- . jO2aaf) (+ . jO2aae) (>= . jO2aad) (> . jO2aac) (= . jO2aab) (<= . jO2aaa) (< . jO2aa9) (library . jO2aa8) (&no-nans . jO2aa7) (&no-infinities . jO2aa6) (&i/o-encoding . jO2aa5) (&i/o-decoding . jO2aa4) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a) (&undefined . jO2a99) (&syntax . jO2a98) (&lexical . jO2a97) (&implementation-restriction . jO2a96) (&non-continuable . jO2a95) (&who . jO2a94) (&irritants . jO2a93) (&assertion . jO2a92) (&violation . jO2a91) (&error . jO2a90) (&serious . jO2a8f) (&warning . jO2a8e) (&message . jO2a8d) (&condition . jO2a8c) (define-condition-type . jO2a8b) (define-enumeration . jO2a8a) (define-record-type . jO2a89) (parent-rtd . jO2a88) (nongenerative . jO2a87) (opaque . jO2a86) (sealed . jO2a85) (protocol . jO2a84) (parent . jO2a83) (immutable . jO2a82) (mutable . jO2a81) (fields . jO2a80) (error-handling-mode . jO2a7f) (file-options . jO2a7e) (buffer-mode . jO2a7d) (eol-style . jO2a7c) (guard . jO2a7b) (unsyntax-splicing . jO2a78) (unsyntax . jO2a77) (unquote-splicing . jO2a76) (unquote . jO2a75) (_ . jO2a74) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (assert . jO2a70) (endianness . jO2a6f) (time . jO2a6d) (do . jO2a6c) (cond . jO2a6b) (let* . jO2a6a) (let*-values . jO2a69) (let-values . jO2a68) (identifier-syntax . jO2a67) (with-syntax . jO2a66) (quasisyntax . jO2a65) (quasiquote . jO2a64) (syntax-rules . jO2a63) (include . jO2a62) (record-constructor-descriptor . jO2a60) (record-type-descriptor . jO2a5f) (case . jO2a5e) (unless . jO2a5c) (when . jO2a5b) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec* . jO2a56) (letrec . jO2a55) (case-lambda . jO2a53) (lambda . jO2a52) (syntax . jO2a51) (syntax-case . jO2a50) (quote . jO2a4f) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (import . jO2a4a) (begin . jO2a49) (define-syntax . jO2a47) (define . jO2a46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2de7 '(psyntax null-environment-5) '() '() '() '() '((make-promise . jO2c49) (unquote-splicing . jO2a76) (unquote . jO2a75) (_ . jO2a74) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (delay . jO2a6e) (do . jO2a6c) (cond . jO2a6b) (let* . jO2a6a) (quasiquote . jO2a64) (syntax-rules . jO2a63) (case . jO2a5e) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec . jO2a55) (lambda . jO2a52) (quote . jO2a4f) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (begin . jO2a49) (define-syntax . jO2a47) (define . jO2a46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2de8 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . jO2cfa) (string-ci>=? . jO2cf9) (string-ci=? . jO2cf8) (string-ci<? . jO2cf7) (string-ci<=? . jO2cf6) (char-whitespace? . jO2cf5) (char-upper-case? . jO2cf4) (char-numeric? . jO2cf2) (char-lower-case? . jO2cf1) (char-upcase . jO2cef) (char-downcase . jO2cec) (char-ci>? . jO2ceb) (char-ci>=? . jO2cea) (char-ci=? . jO2ce9) (char-ci<? . jO2ce8) (char-ci<=? . jO2ce7) (char-alphabetic? . jO2ce6) (call-with-output-file . jO2cba) (call-with-input-file . jO2cb9) (write-char . jO2cb8) (write . jO2cb7) (with-output-to-file . jO2cb6) (with-input-from-file . jO2cb5) (read-char . jO2cb4) (read . jO2cb3) (peek-char . jO2cb2) (open-output-file . jO2cb1) (open-input-file . jO2cb0) (newline . jO2caf) (display . jO2cae) (close-output-port . jO2cad) (close-input-port . jO2cac) (eof-object . jO2caa) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (scheme-report-environment . jOe33) (quotient . jO2c4f) (null-environment . jOe31) (remainder . jO2c4e) (modulo . jO2c4d) (inexact->exact . jO2c4c) (force . jO2c4b) (exact->inexact . jO2c4a) (make-promise . jO2c49) (string-fill! . jO2c47) (string-set! . jO2c46) (set-cdr! . jO2c45) (set-car! . jO2c44) (memv . jO2c3e) (memq . jO2c3d) (member . jO2c3b) (assv . jO2c33) (assq . jO2c32) (assoc . jO2c30) (eval . jOe37) (zero? . jO2b4a) (vector? . jO2b49) (vector-set! . jO2b48) (vector-ref . jO2b47) (vector-length . jO2b45) (vector-fill! . jO2b43) (vector->list . jO2b42) (vector . jO2b41) (values . jO2b40) (truncate . jO2b3f) (tan . jO2b3e) (symbol? . jO2b3d) (symbol->string . jO2b3b) (substring . jO2b3a) (string? . jO2b39) (string>? . jO2b38) (string>=? . jO2b37) (string=? . jO2b36) (string<? . jO2b35) (string<=? . jO2b34) (string-ref . jO2b33) (string-length . jO2b32) (string-copy . jO2b30) (string-append . jO2b2f) (string->symbol . jO2b2e) (string->number . jO2b2d) (string->list . jO2b2c) (string . jO2b2b) (sqrt . jO2b2a) (sin . jO2b29) (round . jO2b28) (reverse . jO2b27) (real? . jO2b26) (real-part . jO2b24) (rationalize . jO2b23) (rational? . jO2b22) (procedure? . jO2b20) (positive? . jO2b1f) (pair? . jO2b1e) (odd? . jO2b1d) (numerator . jO2b1c) (number? . jO2b1b) (number->string . jO2b1a) (not . jO2b18) (negative? . jO2b17) (min . jO2b15) (max . jO2b14) (map . jO2b13) (make-vector . jO2b12) (make-string . jO2b11) (make-rectangular . jO2b10) (make-polar . jO2b0f) (magnitude . jO2b0e) (log . jO2b0d) (list? . jO2b0c) (list-tail . jO2b0b) (list-ref . jO2b0a) (list->vector . jO2b09) (list->string . jO2b08) (list . jO2b07) (length . jO2b06) (lcm . jO2b05) (integer? . jO2b04) (integer->char . jO2b02) (inexact? . jO2b00) (imag-part . jO2afe) (gcd . jO2afd) (for-each . jO2afc) (floor . jO2afb) (expt . jO2af9) (exp . jO2af8) (exact? . jO2af7) (even? . jO2af4) (eqv? . jO2af2) (equal? . jO2af1) (eq? . jO2af0) (dynamic-wind . jO2aef) (denominator . jO2ae8) (cos . jO2ae7) (cons . jO2ae6) (complex? . jO2ae5) (char? . jO2ae4) (char>? . jO2ae3) (char>=? . jO2ae2) (char=? . jO2ae1) (char<? . jO2ae0) (char<=? . jO2adf) (char->integer . jO2ade) (ceiling . jO2add) (call-with-values . jO2adc) (call-with-current-continuation . jO2ada) (cddddr . jO2ad9) (cdddar . jO2ad8) (cddadr . jO2ad7) (cddaar . jO2ad6) (cdaddr . jO2ad5) (cdadar . jO2ad4) (cdaadr . jO2ad3) (cdaaar . jO2ad2) (cadddr . jO2ad1) (caddar . jO2ad0) (cadadr . jO2acf) (cadaar . jO2ace) (caaddr . jO2acd) (caadar . jO2acc) (caaadr . jO2acb) (caaaar . jO2aca) (cdddr . jO2ac9) (cddar . jO2ac8) (cdadr . jO2ac7) (cdaar . jO2ac6) (caddr . jO2ac5) (cadar . jO2ac4) (caadr . jO2ac3) (caaar . jO2ac2) (cddr . jO2ac1) (cdar . jO2ac0) (cadr . jO2abf) (caar . jO2abe) (cdr . jO2abd) (car . jO2abc) (boolean? . jO2abb) (atan . jO2ab9) (asin . jO2ab7) (apply . jO2ab6) (append . jO2ab5) (angle . jO2ab4) (acos . jO2ab3) (abs . jO2ab2) (/ . jO2ab1) (* . jO2ab0) (- . jO2aaf) (+ . jO2aae) (>= . jO2aad) (> . jO2aac) (= . jO2aab) (<= . jO2aaa) (< . jO2aa9) (unquote-splicing . jO2a76) (unquote . jO2a75) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (delay . jO2a6e) (do . jO2a6c) (cond . jO2a6b) (let* . jO2a6a) (quasiquote . jO2a64) (syntax-rules . jO2a63) (case . jO2a5e) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec . jO2a55) (lambda . jO2a52) (quote . jO2a4f) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (begin . jO2a49) (define-syntax . jO2a47) (define . jO2a46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2de9 '(psyntax modules) '() '() '() '() '((module . jO2a48)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dea '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2deb '(rnrs) '(6) '() '() '() '((regexp? . jO2da6) (string-upcase . jO2d02) (string-titlecase . jO2d01) (string-normalize-nfkd . jO2d00) (string-normalize-nfkc . jO2cff) (string-normalize-nfd . jO2cfe) (string-normalize-nfc . jO2cfd) (string-foldcase . jO2cfc) (string-downcase . jO2cfb) (string-ci>? . jO2cfa) (string-ci>=? . jO2cf9) (string-ci=? . jO2cf8) (string-ci<? . jO2cf7) (string-ci<=? . jO2cf6) (char-whitespace? . jO2cf5) (char-upper-case? . jO2cf4) (char-title-case? . jO2cf3) (char-numeric? . jO2cf2) (char-lower-case? . jO2cf1) (char-general-category . jO2cf0) (char-upcase . jO2cef) (char-titlecase . jO2cee) (char-foldcase . jO2ced) (char-downcase . jO2cec) (char-ci>? . jO2ceb) (char-ci>=? . jO2cea) (char-ci=? . jO2ce9) (char-ci<? . jO2ce8) (char-ci<=? . jO2ce7) (char-alphabetic? . jO2ce6) (make-variable-transformer . jOba2) (identifier? . jOe59) (generate-temporaries . jOe45) (free-identifier=? . jOe47) (syntax->datum . jOe5d) (datum->syntax . jOe5b) (bound-identifier=? . jOe49) (record-type-descriptor? . jO2ce5) (record-predicate . jO2ce4) (record-mutator . jO2ce3) (record-constructor . jO2ce2) (record-accessor . jO2ce1) (make-record-type-descriptor . jO2ce0) (make-record-constructor-descriptor . jO2cdf) (record? . jO2cde) (record-type-uid . jO2cdd) (record-type-sealed? . jO2cdc) (record-type-parent . jO2cdb) (record-type-opaque? . jO2cda) (record-type-name . jO2cd9) (record-type-generative? . jO2cd8) (record-type-field-names . jO2cd7) (record-rtd . jO2cd6) (record-field-mutable? . jO2cd5) (delete-file . jO2cd4) (file-exists? . jO2cd3) (vector-sort! . jO2cd2) (vector-sort . jO2cd1) (list-sort . jO2cd0) (symbol-hash . jO2ccf) (string-ci-hash . jO2cce) (string-hash . jO2ccd) (equal-hash . jO2ccc) (hashtable-equivalence-function . jO2ccb) (make-hashtable . jO2cca) (hashtable-hash-function . jO2cc9) (make-eqv-hashtable . jO2cc8) (make-eq-hashtable . jO2cc7) (hashtable? . jO2cc6) (hashtable-update! . jO2cc5) (hashtable-size . jO2cc4) (hashtable-set! . jO2cc3) (hashtable-ref . jO2cc2) (hashtable-mutable? . jO2cc1) (hashtable-keys . jO2cc0) (hashtable-entries . jO2cbf) (hashtable-delete! . jO2cbe) (hashtable-copy . jO2cbd) (hashtable-contains? . jO2cbc) (hashtable-clear! . jO2cbb) (call-with-output-file . jO2cba) (call-with-input-file . jO2cb9) (write-char . jO2cb8) (write . jO2cb7) (with-output-to-file . jO2cb6) (with-input-from-file . jO2cb5) (read-char . jO2cb4) (read . jO2cb3) (peek-char . jO2cb2) (open-output-file . jO2cb1) (open-input-file . jO2cb0) (newline . jO2caf) (display . jO2cae) (close-output-port . jO2cad) (close-input-port . jO2cac) (eof-object? . jO2cab) (eof-object . jO2caa) (current-error-port . jO2ca9) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (utf-8-codec . jO2ca4) (utf-16-codec . jO2ca3) (transcoder-error-handling-mode . jO2ca2) (transcoder-eol-style . jO2ca1) (transcoder-codec . jO2ca0) (transcoded-port . jO2c9f) (textual-port? . jO2c9e) (string->bytevector . jO2c9d) (standard-output-port . jO2c9c) (standard-input-port . jO2c9b) (standard-error-port . jO2c9a) (set-port-position! . jO2c99) (put-u8 . jO2c98) (put-string . jO2c97) (put-datum . jO2c96) (put-char . jO2c95) (put-bytevector . jO2c94) (port? . jO2c93) (port-transcoder . jO2c92) (port-position . jO2c91) (port-has-set-port-position!? . jO2c90) (port-has-port-position? . jO2c8f) (port-eof? . jO2c8e) (output-port-buffer-mode . jO2c8d) (open-string-output-port . jO2c8c) (open-string-input-port . jO2c8b) (open-file-output-port . jO2c8a) (open-file-input/output-port . jO2c89) (open-file-input-port . jO2c88) (open-bytevector-output-port . jO2c87) (open-bytevector-input-port . jO2c86) (native-transcoder . jO2c85) (native-eol-style . jO2c84) (make-transcoder . jO2c83) (latin-1-codec . jO2c82) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (make-i/o-encoding-error . jO2c77) (make-i/o-decoding-error . jO2c76) (make-custom-textual-output-port . jO2c75) (make-custom-textual-input/output-port . jO2c74) (make-custom-textual-input-port . jO2c73) (make-custom-binary-output-port . jO2c72) (make-custom-binary-input/output-port . jO2c71) (make-custom-binary-input-port . jO2c70) (make-bytevector . jO2c6f) (lookahead-u8 . jO2c6e) (lookahead-char . jO2c6d) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (i/o-encoding-error? . jO2c5f) (i/o-encoding-error-char . jO2c5e) (i/o-decoding-error? . jO2c5d) (get-u8 . jO2c5c) (get-string-n! . jO2c5b) (get-string-n . jO2c5a) (get-string-all . jO2c59) (get-line . jO2c58) (get-datum . jO2c57) (get-char . jO2c56) (get-bytevector-some . jO2c55) (get-bytevector-n! . jO2c54) (get-bytevector-n . jO2c53) (get-bytevector-all . jO2c52) (flush-output-port . jO2c51) (close-port . jO2c50) (exit . jO2c48) (command-line . jO28da) (remove . jO2c43) (remv . jO2c42) (remp . jO2c41) (remq . jO2c40) (partition . jO2c3f) (memv . jO2c3e) (memq . jO2c3d) (memp . jO2c3c) (member . jO2c3b) (exists . jO2c3a) (for-all . jO2c39) (fold-right . jO2c38) (fold-left . jO2c37) (find . jO2c36) (filter . jO2c35) (cons* . jO2c34) (assv . jO2c33) (assq . jO2c32) (assp . jO2c31) (assoc . jO2c30) (call-with-string-output-port . jO2c2f) (call-with-port . jO2c2e) (call-with-bytevector-output-port . jO2c2d) (bytevector->string . jO2c2c) (buffer-mode? . jO2c2b) (binary-port? . jO2c2a) (with-exception-handler . jO2c29) (raise-continuable . jO2c28) (raise . jO2c27) (make-enumeration . jO2c26) (enum-set=? . jO2c25) (enum-set-universe . jO2c24) (enum-set-union . jO2c23) (enum-set-subset? . jO2c22) (enum-set-projection . jO2c21) (enum-set-member? . jO2c20) (enum-set-intersection . jO2c1f) (enum-set-indexer . jO2c1e) (enum-set-difference . jO2c1d) (enum-set-constructor . jO2c1c) (enum-set-complement . jO2c1b) (enum-set->list . jO2c1a) (who-condition? . jO2c19) (warning? . jO2c18) (violation? . jO2c17) (undefined-violation? . jO2c16) (syntax-violation? . jO2c15) (syntax-violation-subform . jO2c14) (syntax-violation-form . jO2c13) (syntax-violation . jOe57) (simple-conditions . jO2c12) (serious-condition? . jO2c11) (non-continuable-violation? . jO2c10) (message-condition? . jO2c0f) (make-who-condition . jO2c0e) (make-warning . jO2c0d) (make-violation . jO2c0c) (make-undefined-violation . jO2c0b) (make-syntax-violation . jO2c0a) (make-serious-condition . jO2c09) (make-non-continuable-violation . jO2c08) (make-message-condition . jO2c07) (make-lexical-violation . jO2c06) (make-irritants-condition . jO2c05) (make-implementation-restriction-violation . jO2c04) (make-error . jO2c03) (make-assertion-violation . jO2c02) (lexical-violation? . jO2c01) (irritants-condition? . jO2c00) (implementation-restriction-violation? . jO2bff) (error? . jO2bfe) (condition-who . jO2bfd) (condition-predicate . jO2bfc) (condition-message . jO2bfb) (condition-irritants . jO2bfa) (condition-accessor . jO2bf9) (condition . jO2bf8) (assertion-violation? . jO2bf7) (condition? . jO2bf6) (utf32->string . jO2bf5) (utf16->string . jO2bf4) (utf8->string . jO2bf3) (uint-list->bytevector . jO2bf2) (u8-list->bytevector . jO2bf1) (string->utf8 . jO2bf0) (string->utf32 . jO2bef) (string->utf16 . jO2bee) (sint-list->bytevector . jO2bed) (native-endianness . jO2bec) (bytevector? . jO2beb) (bytevector=? . jO2bea) (bytevector-uint-set! . jO2be9) (bytevector-uint-ref . jO2be8) (bytevector-u8-set! . jO2be7) (bytevector-u8-ref . jO2be6) (bytevector-u64-set! . jO2be5) (bytevector-u64-ref . jO2be4) (bytevector-u64-native-set! . jO2be3) (bytevector-u64-native-ref . jO2be2) (bytevector-u32-set! . jO2be1) (bytevector-u32-ref . jO2be0) (bytevector-u32-native-set! . jO2bdf) (bytevector-u32-native-ref . jO2bde) (bytevector-u16-set! . jO2bdd) (bytevector-u16-ref . jO2bdc) (bytevector-u16-native-set! . jO2bdb) (bytevector-u16-native-ref . jO2bda) (bytevector-sint-set! . jO2bd9) (bytevector-sint-ref . jO2bd8) (bytevector-s8-set! . jO2bd7) (bytevector-s8-ref . jO2bd6) (bytevector-s64-set! . jO2bd5) (bytevector-s64-ref . jO2bd4) (bytevector-s64-native-set! . jO2bd3) (bytevector-s64-native-ref . jO2bd2) (bytevector-s32-set! . jO2bd1) (bytevector-s32-ref . jO2bd0) (bytevector-s32-native-set! . jO2bcf) (bytevector-s32-native-ref . jO2bce) (bytevector-s16-set! . jO2bcd) (bytevector-s16-ref . jO2bcc) (bytevector-s16-native-set! . jO2bcb) (bytevector-s16-native-ref . jO2bca) (bytevector-length . jO2bc9) (bytevector-ieee-single-ref . jO2bc8) (bytevector-ieee-single-set! . jO2bc7) (bytevector-ieee-single-native-set! . jO2bc6) (bytevector-ieee-single-native-ref . jO2bc5) (bytevector-ieee-double-set! . jO2bc4) (bytevector-ieee-double-ref . jO2bc3) (bytevector-ieee-double-native-set! . jO2bc2) (bytevector-ieee-double-native-ref . jO2bc1) (bytevector-fill! . jO2bc0) (bytevector-copy! . jO2bbf) (bytevector-copy . jO2bbe) (bytevector->uint-list . jO2bbd) (bytevector->u8-list . jO2bbc) (bytevector->sint-list . jO2bbb) (no-nans-violation? . jO2bba) (no-infinities-violation? . jO2bb9) (make-no-nans-violation . jO2bb8) (make-no-infinities-violation . jO2bb7) (real->flonum . jO2bb6) (flzero? . jO2bb5) (fltruncate . jO2bb4) (fltan . jO2bb3) (flsqrt . jO2bb2) (flsin . jO2bb1) (flround . jO2bb0) (flpositive? . jO2baf) (flonum? . jO2bae) (flodd? . jO2bad) (flnumerator . jO2bac) (flnegative? . jO2bab) (flnan? . jO2baa) (flmod0 . jO2ba9) (flmod . jO2ba8) (flmin . jO2ba7) (flmax . jO2ba6) (fllog . jO2ba5) (flinteger? . jO2ba4) (flinfinite? . jO2ba3) (flfloor . jO2ba2) (flfinite? . jO2ba1) (flexpt . jO2ba0) (flexp . jO2b9f) (fleven? . jO2b9e) (fldiv0-and-mod0 . jO2b9d) (fldiv0 . jO2b9c) (fldiv-and-mod . jO2b9b) (fldiv . jO2b9a) (fldenominator . jO2b99) (flcos . jO2b98) (flceiling . jO2b97) (flatan . jO2b96) (flasin . jO2b95) (flacos . jO2b94) (flabs . jO2b93) (fl>? . jO2b92) (fl>=? . jO2b91) (fl=? . jO2b90) (fl<? . jO2b8f) (fl<=? . jO2b8e) (fl/ . jO2b8d) (fl- . jO2b8c) (fl+ . jO2b8b) (fl* . jO2b8a) (fixnum->flonum . jO2b89) (fxzero? . jO2b88) (fxxor . jO2b87) (fxrotate-bit-field . jO2b86) (fxreverse-bit-field . jO2b85) (fxpositive? . jO2b84) (fxodd? . jO2b83) (fxnot . jO2b82) (fxnegative? . jO2b81) (fxmod0 . jO2b80) (fxmod . jO2b7f) (fxmin . jO2b7e) (fxmax . jO2b7d) (fxlength . jO2b7c) (fxior . jO2b7b) (fxif . jO2b7a) (fxfirst-bit-set . jO2b79) (fxeven? . jO2b78) (fxdiv0-and-mod0 . jO2b77) (fxdiv0 . jO2b76) (fxdiv-and-mod . jO2b75) (fxdiv . jO2b74) (fxcopy-bit-field . jO2b73) (fxcopy-bit . jO2b72) (fxbit-set? . jO2b71) (fxbit-field . jO2b70) (fxbit-count . jO2b6f) (fxarithmetic-shift-right . jO2b6e) (fxarithmetic-shift-left . jO2b6d) (fxarithmetic-shift . jO2b6c) (fxand . jO2b6b) (fx>? . jO2b6a) (fx>=? . jO2b69) (fx=? . jO2b68) (fx<? . jO2b67) (fx<=? . jO2b66) (fx-/carry . jO2b65) (fx- . jO2b64) (fx+/carry . jO2b63) (fx+ . jO2b62) (fx*/carry . jO2b61) (fx* . jO2b60) (greatest-fixnum . jO2b5f) (least-fixnum . jO2b5e) (fixnum-width . jO2b5d) (fixnum? . jO2b5c) (bitwise-rotate-bit-field . jO2b5b) (bitwise-reverse-bit-field . jO2b5a) (bitwise-length . jO2b59) (bitwise-if . jO2b58) (bitwise-first-bit-set . jO2b57) (bitwise-copy-bit-field . jO2b56) (bitwise-copy-bit . jO2b55) (bitwise-bit-set? . jO2b54) (bitwise-bit-field . jO2b53) (bitwise-bit-count . jO2b52) (bitwise-xor . jO2b51) (bitwise-ior . jO2b50) (bitwise-and . jO2b4f) (bitwise-not . jO2b4e) (bitwise-arithmetic-shift-right . jO2b4d) (bitwise-arithmetic-shift-left . jO2b4c) (bitwise-arithmetic-shift . jO2b4b) (zero? . jO2b4a) (vector? . jO2b49) (vector-set! . jO2b48) (vector-ref . jO2b47) (vector-map . jO2b46) (vector-length . jO2b45) (vector-for-each . jO2b44) (vector-fill! . jO2b43) (vector->list . jO2b42) (vector . jO2b41) (values . jO2b40) (truncate . jO2b3f) (tan . jO2b3e) (symbol? . jO2b3d) (symbol=? . jO2b3c) (symbol->string . jO2b3b) (substring . jO2b3a) (string? . jO2b39) (string>? . jO2b38) (string>=? . jO2b37) (string=? . jO2b36) (string<? . jO2b35) (string<=? . jO2b34) (string-ref . jO2b33) (string-length . jO2b32) (string-for-each . jO2b31) (string-copy . jO2b30) (string-append . jO2b2f) (string->symbol . jO2b2e) (string->number . jO2b2d) (string->list . jO2b2c) (string . jO2b2b) (sqrt . jO2b2a) (sin . jO2b29) (round . jO2b28) (reverse . jO2b27) (real? . jO2b26) (real-valued? . jO2b25) (real-part . jO2b24) (rationalize . jO2b23) (rational? . jO2b22) (rational-valued? . jO2b21) (procedure? . jO2b20) (positive? . jO2b1f) (pair? . jO2b1e) (odd? . jO2b1d) (numerator . jO2b1c) (number? . jO2b1b) (number->string . jO2b1a) (null? . jO2b19) (not . jO2b18) (negative? . jO2b17) (nan? . jO2b16) (min . jO2b15) (max . jO2b14) (map . jO2b13) (make-vector . jO2b12) (make-string . jO2b11) (make-rectangular . jO2b10) (make-polar . jO2b0f) (magnitude . jO2b0e) (log . jO2b0d) (list? . jO2b0c) (list-tail . jO2b0b) (list-ref . jO2b0a) (list->vector . jO2b09) (list->string . jO2b08) (list . jO2b07) (length . jO2b06) (lcm . jO2b05) (integer? . jO2b04) (integer-valued? . jO2b03) (integer->char . jO2b02) (infinite? . jO2b01) (inexact? . jO2b00) (inexact . jO2aff) (imag-part . jO2afe) (gcd . jO2afd) (for-each . jO2afc) (floor . jO2afb) (finite? . jO2afa) (expt . jO2af9) (exp . jO2af8) (exact? . jO2af7) (exact-integer-sqrt . jO2af6) (exact . jO2af5) (even? . jO2af4) (error . jO2af3) (eqv? . jO2af2) (equal? . jO2af1) (eq? . jO2af0) (dynamic-wind . jO2aef) (div0-and-mod0 . jO2aee) (mod0 . jO2aed) (div0 . jO2aec) (div-and-mod . jO2aeb) (mod . jO2aea) (div . jO2ae9) (denominator . jO2ae8) (cos . jO2ae7) (cons . jO2ae6) (complex? . jO2ae5) (char? . jO2ae4) (char>? . jO2ae3) (char>=? . jO2ae2) (char=? . jO2ae1) (char<? . jO2ae0) (char<=? . jO2adf) (char->integer . jO2ade) (ceiling . jO2add) (call-with-values . jO2adc) (call/cc . jO2adb) (call-with-current-continuation . jO2ada) (cddddr . jO2ad9) (cdddar . jO2ad8) (cddadr . jO2ad7) (cddaar . jO2ad6) (cdaddr . jO2ad5) (cdadar . jO2ad4) (cdaadr . jO2ad3) (cdaaar . jO2ad2) (cadddr . jO2ad1) (caddar . jO2ad0) (cadadr . jO2acf) (cadaar . jO2ace) (caaddr . jO2acd) (caadar . jO2acc) (caaadr . jO2acb) (caaaar . jO2aca) (cdddr . jO2ac9) (cddar . jO2ac8) (cdadr . jO2ac7) (cdaar . jO2ac6) (caddr . jO2ac5) (cadar . jO2ac4) (caadr . jO2ac3) (caaar . jO2ac2) (cddr . jO2ac1) (cdar . jO2ac0) (cadr . jO2abf) (caar . jO2abe) (cdr . jO2abd) (car . jO2abc) (boolean? . jO2abb) (boolean=? . jO2aba) (atan . jO2ab9) (assertion-violation . jO2ab8) (asin . jO2ab7) (apply . jO2ab6) (append . jO2ab5) (angle . jO2ab4) (acos . jO2ab3) (abs . jO2ab2) (/ . jO2ab1) (* . jO2ab0) (- . jO2aaf) (+ . jO2aae) (>= . jO2aad) (> . jO2aac) (= . jO2aab) (<= . jO2aaa) (< . jO2aa9) (&no-nans . jO2aa7) (&no-infinities . jO2aa6) (&i/o-encoding . jO2aa5) (&i/o-decoding . jO2aa4) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a) (&undefined . jO2a99) (&syntax . jO2a98) (&lexical . jO2a97) (&implementation-restriction . jO2a96) (&non-continuable . jO2a95) (&who . jO2a94) (&irritants . jO2a93) (&assertion . jO2a92) (&violation . jO2a91) (&error . jO2a90) (&serious . jO2a8f) (&warning . jO2a8e) (&message . jO2a8d) (&condition . jO2a8c) (define-condition-type . jO2a8b) (define-enumeration . jO2a8a) (define-record-type . jO2a89) (parent-rtd . jO2a88) (nongenerative . jO2a87) (opaque . jO2a86) (sealed . jO2a85) (protocol . jO2a84) (parent . jO2a83) (immutable . jO2a82) (mutable . jO2a81) (fields . jO2a80) (error-handling-mode . jO2a7f) (file-options . jO2a7e) (buffer-mode . jO2a7d) (eol-style . jO2a7c) (guard . jO2a7b) (unsyntax-splicing . jO2a78) (unsyntax . jO2a77) (unquote-splicing . jO2a76) (unquote . jO2a75) (_ . jO2a74) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (assert . jO2a70) (endianness . jO2a6f) (do . jO2a6c) (cond . jO2a6b) (let* . jO2a6a) (let*-values . jO2a69) (let-values . jO2a68) (identifier-syntax . jO2a67) (with-syntax . jO2a66) (quasisyntax . jO2a65) (quasiquote . jO2a64) (syntax-rules . jO2a63) (record-constructor-descriptor . jO2a60) (record-type-descriptor . jO2a5f) (case . jO2a5e) (unless . jO2a5c) (when . jO2a5b) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec* . jO2a56) (letrec . jO2a55) (case-lambda . jO2a53) (lambda . jO2a52) (syntax . jO2a51) (syntax-case . jO2a50) (quote . jO2a4f) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (begin . jO2a49) (define-syntax . jO2a47) (define . jO2a46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dec '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . jOe33) (quotient . jO2c4f) (null-environment . jOe31) (remainder . jO2c4e) (modulo . jO2c4d) (inexact->exact . jO2c4c) (force . jO2c4b) (exact->inexact . jO2c4a) (make-promise . jO2c49) (delay . jO2a6e)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2ded '(rnrs control) '(6) '() '() '() '((do . jO2a6c) (unless . jO2a5c) (when . jO2a5b) (case-lambda . jO2a53)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dee '(rnrs eval) '(6) '() '() '() '((eval . jOe37) (environment . jOe2f)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2def '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . jO2c45) (set-car! . jO2c44)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df0 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . jO2c47) (string-set! . jO2c46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df1 '(rnrs programs) '(6) '() '() '() '((exit . jO2c48) (command-line . jO28da)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df2 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jOba2) (identifier? . jOe59) (generate-temporaries . jOe45) (free-identifier=? . jOe47) (syntax->datum . jOe5d) (datum->syntax . jOe5b) (bound-identifier=? . jOe49) (syntax-violation . jOe57) (unsyntax-splicing . jO2a78) (unsyntax . jO2a77) (_ . jO2a74) (... . jO2a71) (with-syntax . jO2a66) (quasisyntax . jO2a65) (syntax . jO2a51) (syntax-case . jO2a50)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df3 '(rnrs files) '(6) '() '() '() '((delete-file . jO2cd4) (file-exists? . jO2cd3) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df4 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . jO2cd2) (vector-sort . jO2cd1) (list-sort . jO2cd0)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df5 '(rnrs base) '(6) '() '() '() '((zero? . jO2b4a) (vector? . jO2b49) (vector-set! . jO2b48) (vector-ref . jO2b47) (vector-map . jO2b46) (vector-length . jO2b45) (vector-for-each . jO2b44) (vector-fill! . jO2b43) (vector->list . jO2b42) (vector . jO2b41) (values . jO2b40) (truncate . jO2b3f) (tan . jO2b3e) (symbol? . jO2b3d) (symbol=? . jO2b3c) (symbol->string . jO2b3b) (substring . jO2b3a) (string? . jO2b39) (string>? . jO2b38) (string>=? . jO2b37) (string=? . jO2b36) (string<? . jO2b35) (string<=? . jO2b34) (string-ref . jO2b33) (string-length . jO2b32) (string-for-each . jO2b31) (string-copy . jO2b30) (string-append . jO2b2f) (string->symbol . jO2b2e) (string->number . jO2b2d) (string->list . jO2b2c) (string . jO2b2b) (sqrt . jO2b2a) (sin . jO2b29) (round . jO2b28) (reverse . jO2b27) (real? . jO2b26) (real-valued? . jO2b25) (real-part . jO2b24) (rationalize . jO2b23) (rational? . jO2b22) (rational-valued? . jO2b21) (procedure? . jO2b20) (positive? . jO2b1f) (pair? . jO2b1e) (odd? . jO2b1d) (numerator . jO2b1c) (number? . jO2b1b) (number->string . jO2b1a) (null? . jO2b19) (not . jO2b18) (negative? . jO2b17) (nan? . jO2b16) (min . jO2b15) (max . jO2b14) (map . jO2b13) (make-vector . jO2b12) (make-string . jO2b11) (make-rectangular . jO2b10) (make-polar . jO2b0f) (magnitude . jO2b0e) (log . jO2b0d) (list? . jO2b0c) (list-tail . jO2b0b) (list-ref . jO2b0a) (list->vector . jO2b09) (list->string . jO2b08) (list . jO2b07) (length . jO2b06) (lcm . jO2b05) (integer? . jO2b04) (integer-valued? . jO2b03) (integer->char . jO2b02) (infinite? . jO2b01) (inexact? . jO2b00) (inexact . jO2aff) (imag-part . jO2afe) (gcd . jO2afd) (for-each . jO2afc) (floor . jO2afb) (finite? . jO2afa) (expt . jO2af9) (exp . jO2af8) (exact? . jO2af7) (exact-integer-sqrt . jO2af6) (exact . jO2af5) (even? . jO2af4) (error . jO2af3) (eqv? . jO2af2) (equal? . jO2af1) (eq? . jO2af0) (dynamic-wind . jO2aef) (div0-and-mod0 . jO2aee) (mod0 . jO2aed) (div0 . jO2aec) (div-and-mod . jO2aeb) (mod . jO2aea) (div . jO2ae9) (denominator . jO2ae8) (cos . jO2ae7) (cons . jO2ae6) (complex? . jO2ae5) (char? . jO2ae4) (char>? . jO2ae3) (char>=? . jO2ae2) (char=? . jO2ae1) (char<? . jO2ae0) (char<=? . jO2adf) (char->integer . jO2ade) (ceiling . jO2add) (call-with-values . jO2adc) (call/cc . jO2adb) (call-with-current-continuation . jO2ada) (cddddr . jO2ad9) (cdddar . jO2ad8) (cddadr . jO2ad7) (cddaar . jO2ad6) (cdaddr . jO2ad5) (cdadar . jO2ad4) (cdaadr . jO2ad3) (cdaaar . jO2ad2) (cadddr . jO2ad1) (caddar . jO2ad0) (cadadr . jO2acf) (cadaar . jO2ace) (caaddr . jO2acd) (caadar . jO2acc) (caaadr . jO2acb) (caaaar . jO2aca) (cdddr . jO2ac9) (cddar . jO2ac8) (cdadr . jO2ac7) (cdaar . jO2ac6) (caddr . jO2ac5) (cadar . jO2ac4) (caadr . jO2ac3) (caaar . jO2ac2) (cddr . jO2ac1) (cdar . jO2ac0) (cadr . jO2abf) (caar . jO2abe) (cdr . jO2abd) (car . jO2abc) (boolean? . jO2abb) (boolean=? . jO2aba) (atan . jO2ab9) (assertion-violation . jO2ab8) (asin . jO2ab7) (apply . jO2ab6) (append . jO2ab5) (angle . jO2ab4) (acos . jO2ab3) (abs . jO2ab2) (/ . jO2ab1) (* . jO2ab0) (- . jO2aaf) (+ . jO2aae) (>= . jO2aad) (> . jO2aac) (= . jO2aab) (<= . jO2aaa) (< . jO2aa9) (unquote-splicing . jO2a76) (unquote . jO2a75) (_ . jO2a74) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (assert . jO2a70) (cond . jO2a6b) (let* . jO2a6a) (let*-values . jO2a69) (let-values . jO2a68) (identifier-syntax . jO2a67) (quasiquote . jO2a64) (syntax-rules . jO2a63) (case . jO2a5e) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec* . jO2a56) (letrec . jO2a55) (lambda . jO2a52) (quote . jO2a4f) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (begin . jO2a49) (define-syntax . jO2a47) (define . jO2a46)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df6 '(rnrs lists) '(6) '() '() '() '((remove . jO2c43) (remv . jO2c42) (remp . jO2c41) (remq . jO2c40) (partition . jO2c3f) (memv . jO2c3e) (memq . jO2c3d) (memp . jO2c3c) (member . jO2c3b) (exists . jO2c3a) (for-all . jO2c39) (fold-right . jO2c38) (fold-left . jO2c37) (find . jO2c36) (filter . jO2c35) (cons* . jO2c34) (assv . jO2c33) (assq . jO2c32) (assp . jO2c31) (assoc . jO2c30)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df7 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . jO2cba) (call-with-input-file . jO2cb9) (write-char . jO2cb8) (write . jO2cb7) (with-output-to-file . jO2cb6) (with-input-from-file . jO2cb5) (read-char . jO2cb4) (read . jO2cb3) (peek-char . jO2cb2) (open-output-file . jO2cb1) (open-input-file . jO2cb0) (newline . jO2caf) (display . jO2cae) (close-output-port . jO2cad) (close-input-port . jO2cac) (eof-object? . jO2cab) (eof-object . jO2caa) (current-error-port . jO2ca9) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df8 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . jO2c6f) (utf32->string . jO2bf5) (utf16->string . jO2bf4) (utf8->string . jO2bf3) (uint-list->bytevector . jO2bf2) (u8-list->bytevector . jO2bf1) (string->utf8 . jO2bf0) (string->utf32 . jO2bef) (string->utf16 . jO2bee) (sint-list->bytevector . jO2bed) (native-endianness . jO2bec) (bytevector? . jO2beb) (bytevector=? . jO2bea) (bytevector-uint-set! . jO2be9) (bytevector-uint-ref . jO2be8) (bytevector-u8-set! . jO2be7) (bytevector-u8-ref . jO2be6) (bytevector-u64-set! . jO2be5) (bytevector-u64-ref . jO2be4) (bytevector-u64-native-set! . jO2be3) (bytevector-u64-native-ref . jO2be2) (bytevector-u32-set! . jO2be1) (bytevector-u32-ref . jO2be0) (bytevector-u32-native-set! . jO2bdf) (bytevector-u32-native-ref . jO2bde) (bytevector-u16-set! . jO2bdd) (bytevector-u16-ref . jO2bdc) (bytevector-u16-native-set! . jO2bdb) (bytevector-u16-native-ref . jO2bda) (bytevector-sint-set! . jO2bd9) (bytevector-sint-ref . jO2bd8) (bytevector-s8-set! . jO2bd7) (bytevector-s8-ref . jO2bd6) (bytevector-s64-set! . jO2bd5) (bytevector-s64-ref . jO2bd4) (bytevector-s64-native-set! . jO2bd3) (bytevector-s64-native-ref . jO2bd2) (bytevector-s32-set! . jO2bd1) (bytevector-s32-ref . jO2bd0) (bytevector-s32-native-set! . jO2bcf) (bytevector-s32-native-ref . jO2bce) (bytevector-s16-set! . jO2bcd) (bytevector-s16-ref . jO2bcc) (bytevector-s16-native-set! . jO2bcb) (bytevector-s16-native-ref . jO2bca) (bytevector-length . jO2bc9) (bytevector-ieee-single-ref . jO2bc8) (bytevector-ieee-single-set! . jO2bc7) (bytevector-ieee-single-native-set! . jO2bc6) (bytevector-ieee-single-native-ref . jO2bc5) (bytevector-ieee-double-set! . jO2bc4) (bytevector-ieee-double-ref . jO2bc3) (bytevector-ieee-double-native-set! . jO2bc2) (bytevector-ieee-double-native-ref . jO2bc1) (bytevector-fill! . jO2bc0) (bytevector-copy! . jO2bbf) (bytevector-copy . jO2bbe) (bytevector->uint-list . jO2bbd) (bytevector->u8-list . jO2bbc) (bytevector->sint-list . jO2bbb) (endianness . jO2a6f)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2df9 '(rnrs unicode) '(6) '() '() '() '((string-upcase . jO2d02) (string-titlecase . jO2d01) (string-normalize-nfkd . jO2d00) (string-normalize-nfkc . jO2cff) (string-normalize-nfd . jO2cfe) (string-normalize-nfc . jO2cfd) (string-foldcase . jO2cfc) (string-downcase . jO2cfb) (string-ci>? . jO2cfa) (string-ci>=? . jO2cf9) (string-ci=? . jO2cf8) (string-ci<? . jO2cf7) (string-ci<=? . jO2cf6) (char-whitespace? . jO2cf5) (char-upper-case? . jO2cf4) (char-title-case? . jO2cf3) (char-numeric? . jO2cf2) (char-lower-case? . jO2cf1) (char-general-category . jO2cf0) (char-upcase . jO2cef) (char-titlecase . jO2cee) (char-foldcase . jO2ced) (char-downcase . jO2cec) (char-ci>? . jO2ceb) (char-ci>=? . jO2cea) (char-ci=? . jO2ce9) (char-ci<? . jO2ce8) (char-ci<=? . jO2ce7) (char-alphabetic? . jO2ce6)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dfa '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . jO2c29) (raise-continuable . jO2c28) (raise . jO2c27) (guard . jO2a7b) (else . jO2a73) (=> . jO2a72)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dfb '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . jO2b5b) (bitwise-reverse-bit-field . jO2b5a) (bitwise-length . jO2b59) (bitwise-if . jO2b58) (bitwise-first-bit-set . jO2b57) (bitwise-copy-bit-field . jO2b56) (bitwise-copy-bit . jO2b55) (bitwise-bit-set? . jO2b54) (bitwise-bit-field . jO2b53) (bitwise-bit-count . jO2b52) (bitwise-xor . jO2b51) (bitwise-ior . jO2b50) (bitwise-and . jO2b4f) (bitwise-not . jO2b4e) (bitwise-arithmetic-shift-right . jO2b4d) (bitwise-arithmetic-shift-left . jO2b4c) (bitwise-arithmetic-shift . jO2b4b)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dfc '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . jO2b88) (fxxor . jO2b87) (fxrotate-bit-field . jO2b86) (fxreverse-bit-field . jO2b85) (fxpositive? . jO2b84) (fxodd? . jO2b83) (fxnot . jO2b82) (fxnegative? . jO2b81) (fxmod0 . jO2b80) (fxmod . jO2b7f) (fxmin . jO2b7e) (fxmax . jO2b7d) (fxlength . jO2b7c) (fxior . jO2b7b) (fxif . jO2b7a) (fxfirst-bit-set . jO2b79) (fxeven? . jO2b78) (fxdiv0-and-mod0 . jO2b77) (fxdiv0 . jO2b76) (fxdiv-and-mod . jO2b75) (fxdiv . jO2b74) (fxcopy-bit-field . jO2b73) (fxcopy-bit . jO2b72) (fxbit-set? . jO2b71) (fxbit-field . jO2b70) (fxbit-count . jO2b6f) (fxarithmetic-shift-right . jO2b6e) (fxarithmetic-shift-left . jO2b6d) (fxarithmetic-shift . jO2b6c) (fxand . jO2b6b) (fx>? . jO2b6a) (fx>=? . jO2b69) (fx=? . jO2b68) (fx<? . jO2b67) (fx<=? . jO2b66) (fx-/carry . jO2b65) (fx- . jO2b64) (fx+/carry . jO2b63) (fx+ . jO2b62) (fx*/carry . jO2b61) (fx* . jO2b60) (greatest-fixnum . jO2b5f) (least-fixnum . jO2b5e) (fixnum-width . jO2b5d) (fixnum? . jO2b5c)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dfd '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . jO2bba) (no-infinities-violation? . jO2bb9) (make-no-nans-violation . jO2bb8) (make-no-infinities-violation . jO2bb7) (real->flonum . jO2bb6) (flzero? . jO2bb5) (fltruncate . jO2bb4) (fltan . jO2bb3) (flsqrt . jO2bb2) (flsin . jO2bb1) (flround . jO2bb0) (flpositive? . jO2baf) (flonum? . jO2bae) (flodd? . jO2bad) (flnumerator . jO2bac) (flnegative? . jO2bab) (flnan? . jO2baa) (flmod0 . jO2ba9) (flmod . jO2ba8) (flmin . jO2ba7) (flmax . jO2ba6) (fllog . jO2ba5) (flinteger? . jO2ba4) (flinfinite? . jO2ba3) (flfloor . jO2ba2) (flfinite? . jO2ba1) (flexpt . jO2ba0) (flexp . jO2b9f) (fleven? . jO2b9e) (fldiv0-and-mod0 . jO2b9d) (fldiv0 . jO2b9c) (fldiv-and-mod . jO2b9b) (fldiv . jO2b9a) (fldenominator . jO2b99) (flcos . jO2b98) (flceiling . jO2b97) (flatan . jO2b96) (flasin . jO2b95) (flacos . jO2b94) (flabs . jO2b93) (fl>? . jO2b92) (fl>=? . jO2b91) (fl=? . jO2b90) (fl<? . jO2b8f) (fl<=? . jO2b8e) (fl/ . jO2b8d) (fl- . jO2b8c) (fl+ . jO2b8b) (fl* . jO2b8a) (fixnum->flonum . jO2b89) (&no-nans . jO2aa7) (&no-infinities . jO2aa6)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dfe '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . jO2ccf) (string-ci-hash . jO2cce) (string-hash . jO2ccd) (equal-hash . jO2ccc) (hashtable-equivalence-function . jO2ccb) (make-hashtable . jO2cca) (hashtable-hash-function . jO2cc9) (make-eqv-hashtable . jO2cc8) (make-eq-hashtable . jO2cc7) (hashtable? . jO2cc6) (hashtable-update! . jO2cc5) (hashtable-size . jO2cc4) (hashtable-set! . jO2cc3) (hashtable-ref . jO2cc2) (hashtable-mutable? . jO2cc1) (hashtable-keys . jO2cc0) (hashtable-entries . jO2cbf) (hashtable-delete! . jO2cbe) (hashtable-copy . jO2cbd) (hashtable-contains? . jO2cbc) (hashtable-clear! . jO2cbb)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2dff '(rnrs io ports) '(6) '() '() '() '((eof-object? . jO2cab) (eof-object . jO2caa) (current-error-port . jO2ca9) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (utf-8-codec . jO2ca4) (utf-16-codec . jO2ca3) (transcoder-error-handling-mode . jO2ca2) (transcoder-eol-style . jO2ca1) (transcoder-codec . jO2ca0) (transcoded-port . jO2c9f) (textual-port? . jO2c9e) (string->bytevector . jO2c9d) (standard-output-port . jO2c9c) (standard-input-port . jO2c9b) (standard-error-port . jO2c9a) (set-port-position! . jO2c99) (put-u8 . jO2c98) (put-string . jO2c97) (put-datum . jO2c96) (put-char . jO2c95) (put-bytevector . jO2c94) (port? . jO2c93) (port-transcoder . jO2c92) (port-position . jO2c91) (port-has-set-port-position!? . jO2c90) (port-has-port-position? . jO2c8f) (port-eof? . jO2c8e) (output-port-buffer-mode . jO2c8d) (open-string-output-port . jO2c8c) (open-string-input-port . jO2c8b) (open-file-output-port . jO2c8a) (open-file-input/output-port . jO2c89) (open-file-input-port . jO2c88) (open-bytevector-output-port . jO2c87) (open-bytevector-input-port . jO2c86) (native-transcoder . jO2c85) (native-eol-style . jO2c84) (make-transcoder . jO2c83) (latin-1-codec . jO2c82) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (make-i/o-encoding-error . jO2c77) (make-i/o-decoding-error . jO2c76) (make-custom-textual-output-port . jO2c75) (make-custom-textual-input/output-port . jO2c74) (make-custom-textual-input-port . jO2c73) (make-custom-binary-output-port . jO2c72) (make-custom-binary-input/output-port . jO2c71) (make-custom-binary-input-port . jO2c70) (lookahead-u8 . jO2c6e) (lookahead-char . jO2c6d) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (i/o-encoding-error? . jO2c5f) (i/o-encoding-error-char . jO2c5e) (i/o-decoding-error? . jO2c5d) (get-u8 . jO2c5c) (get-string-n! . jO2c5b) (get-string-n . jO2c5a) (get-string-all . jO2c59) (get-line . jO2c58) (get-datum . jO2c57) (get-char . jO2c56) (get-bytevector-some . jO2c55) (get-bytevector-n! . jO2c54) (get-bytevector-n . jO2c53) (get-bytevector-all . jO2c52) (flush-output-port . jO2c51) (close-port . jO2c50) (call-with-string-output-port . jO2c2f) (call-with-port . jO2c2e) (call-with-bytevector-output-port . jO2c2d) (bytevector->string . jO2c2c) (buffer-mode? . jO2c2b) (binary-port? . jO2c2a) (&i/o-encoding . jO2aa5) (&i/o-decoding . jO2aa4) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a) (error-handling-mode . jO2a7f) (file-options . jO2a7e) (buffer-mode . jO2a7d) (eol-style . jO2a7c)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e00 '(rnrs enums) '(6) '() '() '() '((make-enumeration . jO2c26) (enum-set=? . jO2c25) (enum-set-universe . jO2c24) (enum-set-union . jO2c23) (enum-set-subset? . jO2c22) (enum-set-projection . jO2c21) (enum-set-member? . jO2c20) (enum-set-intersection . jO2c1f) (enum-set-indexer . jO2c1e) (enum-set-difference . jO2c1d) (enum-set-constructor . jO2c1c) (enum-set-complement . jO2c1b) (enum-set->list . jO2c1a) (define-enumeration . jO2a8a)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e01 '(rnrs conditions) '(6) '() '() '() '((who-condition? . jO2c19) (warning? . jO2c18) (violation? . jO2c17) (undefined-violation? . jO2c16) (syntax-violation? . jO2c15) (syntax-violation-subform . jO2c14) (syntax-violation-form . jO2c13) (syntax-violation . jOe57) (simple-conditions . jO2c12) (serious-condition? . jO2c11) (non-continuable-violation? . jO2c10) (message-condition? . jO2c0f) (make-who-condition . jO2c0e) (make-warning . jO2c0d) (make-violation . jO2c0c) (make-undefined-violation . jO2c0b) (make-syntax-violation . jO2c0a) (make-serious-condition . jO2c09) (make-non-continuable-violation . jO2c08) (make-message-condition . jO2c07) (make-lexical-violation . jO2c06) (make-irritants-condition . jO2c05) (make-implementation-restriction-violation . jO2c04) (make-error . jO2c03) (make-assertion-violation . jO2c02) (lexical-violation? . jO2c01) (irritants-condition? . jO2c00) (implementation-restriction-violation? . jO2bff) (error? . jO2bfe) (condition-who . jO2bfd) (condition-predicate . jO2bfc) (condition-message . jO2bfb) (condition-irritants . jO2bfa) (condition-accessor . jO2bf9) (condition . jO2bf8) (assertion-violation? . jO2bf7) (condition? . jO2bf6) (&undefined . jO2a99) (&syntax . jO2a98) (&lexical . jO2a97) (&implementation-restriction . jO2a96) (&non-continuable . jO2a95) (&who . jO2a94) (&irritants . jO2a93) (&assertion . jO2a92) (&violation . jO2a91) (&error . jO2a90) (&serious . jO2a8f) (&warning . jO2a8e) (&message . jO2a8d) (&condition . jO2a8c) (define-condition-type . jO2a8b)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e02 '(rnrs records inspection) '(6) '() '() '() '((record? . jO2cde) (record-type-uid . jO2cdd) (record-type-sealed? . jO2cdc) (record-type-parent . jO2cdb) (record-type-opaque? . jO2cda) (record-type-name . jO2cd9) (record-type-generative? . jO2cd8) (record-type-field-names . jO2cd7) (record-rtd . jO2cd6) (record-field-mutable? . jO2cd5)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e03 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . jO2ce5) (record-predicate . jO2ce4) (record-mutator . jO2ce3) (record-constructor . jO2ce2) (record-accessor . jO2ce1) (make-record-type-descriptor . jO2ce0) (make-record-constructor-descriptor . jO2cdf)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e04 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . jO2a89) (parent-rtd . jO2a88) (nongenerative . jO2a87) (opaque . jO2a86) (sealed . jO2a85) (protocol . jO2a84) (parent . jO2a83) (immutable . jO2a82) (mutable . jO2a81) (fields . jO2a80) (record-constructor-descriptor . jO2a60) (record-type-descriptor . jO2a5f)) '() values values '#f '#f '#t '#f) (jO98b@jO7d7@install-library 'jO2e05 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . jO2de5) (&no-nans-rtd . jO2de4) (&no-infinities-rcd . jO2de3) (&no-infinities-rtd . jO2de2) (&i/o-encoding-rcd . jO2de1) (&i/o-encoding-rtd . jO2de0) (&i/o-decoding-rcd . jO2ddf) (&i/o-decoding-rtd . jO2dde) (&i/o-port-rcd . jO2ddd) (&i/o-port-rtd . jO2ddc) (&i/o-file-does-not-exist-rcd . jO2ddb) (&i/o-file-does-not-exist-rtd . jO2dda) (&i/o-file-already-exists-rcd . jO2dd9) (&i/o-file-already-exists-rtd . jO2dd8) (&i/o-file-is-read-only-rcd . jO2dd7) (&i/o-file-is-read-only-rtd . jO2dd6) (&i/o-file-protection-rcd . jO2dd5) (&i/o-file-protection-rtd . jO2dd4) (&i/o-filename-rcd . jO2dd3) (&i/o-filename-rtd . jO2dd2) (&i/o-invalid-position-rcd . jO2dd1) (&i/o-invalid-position-rtd . jO2dd0) (&i/o-write-rcd . jO2dcf) (&i/o-write-rtd . jO2dce) (&i/o-read-rcd . jO2dcd) (&i/o-read-rtd . jO2dcc) (&i/o-rcd . jO2dcb) (&i/o-rtd . jO2dca) (&undefined-rcd . jO2dc9) (&undefined-rtd . jO2dc8) (&syntax-rcd . jO2dc7) (&syntax-rtd . jO2dc6) (&lexical-rcd . jO2dc5) (&lexical-rtd . jO2dc4) (&implementation-restriction-rcd . jO2dc3) (&implementation-restriction-rtd . jO2dc2) (&non-continuable-rcd . jO2dc1) (&non-continuable-rtd . jO2dc0) (&who-rcd . jO2dbf) (&who-rtd . jO2dbe) (&irritants-rcd . jO2dbd) (&irritants-rtd . jO2dbc) (&assertion-rcd . jO2dbb) (&assertion-rtd . jO2dba) (&violation-rcd . jO2db9) (&violation-rtd . jO2db8) (&error-rcd . jO2db7) (&error-rtd . jO2db6) (&serious-rcd . jO2db5) (&serious-rtd . jO2db4) (&warning-rcd . jO2db3) (&warning-rtd . jO2db2) (&message-rcd . jO2db1) (&message-rtd . jO2db0) (&condition-rcd . jO2daf) (&condition-rtd . jO2dae) (syntax-error . jOe53) (syntax-dispatch . jOd77) (pretty-print . jO2dad) (eval-core . jO2dac) (set-symbol-value! . jO2dab) (symbol-value . jO2daa) (gensym . jO2da9) (void . jO2da8) (load . jO28e0) (interaction-environment . jOe65) (char-ready? . jO2da7) (regexp? . jO2da6) (read-line . jO2da5) (gensym-prefix-set! . jO2da4) (ungensym . jO2da3) (alist->eq-hash-table . jO2da2) (assoc-ref . jO2da1) (print . jO2da0) (format . jO2d9f) (host-os . jO2d9e) (library-path . jO7b6) (standard-library-path . jO2d9d) (file-newer? . jO2d9c) (stat-mtime . jO2d9b) (write-to-file . jO2d9a) (file->list . jO2d99) (file->string . jO2d98) (digit->integer . jO2d97) (call-with-string-input-port . jO2d96) (call-with-string-io . jO2d95) (string-split . jO2d94) (bytevector-for-each . jO2d93) (string->regexp . jO2d92) (rxmatch . jO2d91) (regexp-replace-all . jO2d90) (hashtable-for-each . jO2d8f) (mosh-cache-dir . jO5a0) (call-process . jO2d8e) (local-tz-offset . jO2d8d) (microseconds . jO2d8c) (directory-list . jO2d8b) (set-current-directory! . jO2d8a) (expand-path . jO2d89) (current-directory . jO2d88) (%spawn . jO2d87) (%waitpid . jO2d86) (simple-struct-name . jO2d85) (simple-struct-set! . jO2d84) (simple-struct-ref . jO2d83) (make-simple-struct . jO2d82) (simple-struct? . jO2d81) (pointer-ref-c-int64 . jO2d80) (pointer-ref-c-int32 . jO2d7f) (pointer-ref-c-int16 . jO2d7e) (pointer-ref-c-int8 . jO2d7d) (pointer-ref-c-uint64 . jO2d7c) (pointer-ref-c-uint32 . jO2d7b) (pointer-ref-c-uint16 . jO2d7a) (pointer-ref-c-uint8 . jO2d79) (pointer-set-c-uint64! . jO2d78) (pointer-set-c-uint32! . jO2d77) (pointer-set-c-uint16! . jO2d76) (pointer-set-c-uint8! . jO2d75) (pointer-set-c-int64! . jO2d74) (pointer-set-c-int32! . jO2d73) (pointer-set-c-int16! . jO2d72) (pointer-set-c-int8! . jO2d71) (pointer-set-c-pointer! . jO2d70) (pointer-set-c-double! . jO2d6f) (pointer-set-c-float! . jO2d6e) (pointer-set-c-long-long! . jO2d6d) (pointer-set-c-long! . jO2d6c) (pointer-set-c-int! . jO2d6b) (pointer-set-c-short! . jO2d6a) (pointer-set-c-char! . jO2d69) (pointer-ref-c-pointer . jO2d68) (pointer-ref-c-double . jO2d67) (pointer-ref-c-float . jO2d66) (pointer-ref-c-unsigned-long-long . jO2d65) (pointer-ref-c-signed-long-long . jO2d64) (pointer-ref-c-unsigned-long . jO2d63) (pointer-ref-c-signed-long . jO2d62) (pointer-ref-c-unsigned-int . jO2d61) (pointer-ref-c-signed-int . jO2d60) (pointer-ref-c-unsigned-short . jO2d5f) (pointer-ref-c-signed-short . jO2d5e) (pointer-ref-c-unsigned-char . jO2d5d) (pointer-ref-c-signed-char . jO2d5c) (pointer->integer . jO2d5b) (integer->pointer . jO2d5a) (pointer? . jO2d59) (shared-errno . jO2d58) (%ffi-free-c-callback-trampoline . jO2d57) (%ffi-make-c-callback-trampoline . jO2d56) (%ffi-free . jO2d55) (%ffi-malloc . jO2d54) (%ffi-supported? . jO2d53) (%ffi-pointer->string . jO2d52) (%ffi-call . jO2d51) (%ffi-lookup . jO2d50) (%ffi-open . jO2d4f) (null-terminated-utf8->string . jO2d4e) (null-terminated-bytevector->string . jO2d4d) (%exec . jO2d4c) (%fork . jO2d4b) (%pipe . jO2d4a) (p . jO2d49) (open-output-string . jO2d48) (get-output-string . jO2d47) (file-stat-ctime . jO2d46) (file-stat-atime . jO2d45) (file-stat-mtime . jO2d44) (file-size-in-bytes . jO2d43) (file-writable? . jO2d42) (file-executable? . jO2d41) (file-readable? . jO2d40) (file-regular? . jO2d3f) (file-symbolic-link? . jO2d3e) (file-directory? . jO2d3d) (create-symbolic-link . jO2d3c) (rename-file . jO2d3b) (delete-directory . jO2d3a) (create-directory . jO2d39) (create-mosh-cache-dir . jO2d38) (get-environment-variables . jO2d37) (current-exception-handler . jO2d36) (get-environment-variable . jO2d35) (join-wraps . jO2d34) (id->real-label . jO2d33) (same-marks? . jO2d32) (same-marks*? . jO2d31) (get-timeofday . jO2d30) (get-command-line . jO2d2f) (sys-display . jO2d2e) (whereis . jO2d2d) (register . jO2d2c) (vm-join! . jO2d2b) (vm-set-value! . jO2d2a) (vm? . jO2d29) (main-vm? . jO2d28) (vm-eval . jO2d27) (vm-self . jO2d26) (vm-start! . jO2d25) (make-vm . jO2d24) (mutex-try-lock! . jO2d23) (mutex-unlock! . jO2d22) (mutex-lock! . jO2d21) (mutex? . jO2d20) (make-mutex . jO2d1f) (condition-variable-notify-all! . jO2d1e) (condition-variable-notify! . jO2d1d) (condition-variable-wait! . jO2d1c) (make-condition-variable . jO2d1b) (write/ss . jO2d1a) (mosh-executable-path . jO2d19) (make-file-options . jO2d18) (source-info . jO2d17) (make-compiler-instruction . jO2d16) (make-instruction . jO2d15) (set-source-info! . jO2d14) (bignum? . jO2d13) (fast-equal? . jO2d12) (fasl-read . jO2d11) (fasl-write . jO2d10) (time-usage . jO2d0f) (os-constant . jO2d0e) (disasm . jO2d0d) (make-parameter . jO59e) (socket-port . jO2d0c) (socket-shutdown . jO2d0b) (socket-close . jO2d0a) (socket-send . jO2d09) (socket-recv! . jO2d08) (socket-recv . jO2d07) (make-server-socket . jO2d06) (make-client-socket . jO2d05) (socket-accept . jO2d04) (socket? . jO2d03) (string-upcase . jO2d02) (string-titlecase . jO2d01) (string-normalize-nfkd . jO2d00) (string-normalize-nfkc . jO2cff) (string-normalize-nfd . jO2cfe) (string-normalize-nfc . jO2cfd) (string-foldcase . jO2cfc) (string-downcase . jO2cfb) (string-ci>? . jO2cfa) (string-ci>=? . jO2cf9) (string-ci=? . jO2cf8) (string-ci<? . jO2cf7) (string-ci<=? . jO2cf6) (char-whitespace? . jO2cf5) (char-upper-case? . jO2cf4) (char-title-case? . jO2cf3) (char-numeric? . jO2cf2) (char-lower-case? . jO2cf1) (char-general-category . jO2cf0) (char-upcase . jO2cef) (char-titlecase . jO2cee) (char-foldcase . jO2ced) (char-downcase . jO2cec) (char-ci>? . jO2ceb) (char-ci>=? . jO2cea) (char-ci=? . jO2ce9) (char-ci<? . jO2ce8) (char-ci<=? . jO2ce7) (char-alphabetic? . jO2ce6) (make-variable-transformer . jOba2) (identifier? . jOe59) (generate-temporaries . jOe45) (free-identifier=? . jOe47) (syntax->datum . jOe5d) (datum->syntax . jOe5b) (bound-identifier=? . jOe49) (record-type-descriptor? . jO2ce5) (record-predicate . jO2ce4) (record-mutator . jO2ce3) (record-constructor . jO2ce2) (record-accessor . jO2ce1) (make-record-type-descriptor . jO2ce0) (make-record-constructor-descriptor . jO2cdf) (record? . jO2cde) (record-type-uid . jO2cdd) (record-type-sealed? . jO2cdc) (record-type-parent . jO2cdb) (record-type-opaque? . jO2cda) (record-type-name . jO2cd9) (record-type-generative? . jO2cd8) (record-type-field-names . jO2cd7) (record-rtd . jO2cd6) (record-field-mutable? . jO2cd5) (delete-file . jO2cd4) (file-exists? . jO2cd3) (vector-sort! . jO2cd2) (vector-sort . jO2cd1) (list-sort . jO2cd0) (symbol-hash . jO2ccf) (string-ci-hash . jO2cce) (string-hash . jO2ccd) (equal-hash . jO2ccc) (hashtable-equivalence-function . jO2ccb) (make-hashtable . jO2cca) (hashtable-hash-function . jO2cc9) (make-eqv-hashtable . jO2cc8) (make-eq-hashtable . jO2cc7) (hashtable? . jO2cc6) (hashtable-update! . jO2cc5) (hashtable-size . jO2cc4) (hashtable-set! . jO2cc3) (hashtable-ref . jO2cc2) (hashtable-mutable? . jO2cc1) (hashtable-keys . jO2cc0) (hashtable-entries . jO2cbf) (hashtable-delete! . jO2cbe) (hashtable-copy . jO2cbd) (hashtable-contains? . jO2cbc) (hashtable-clear! . jO2cbb) (call-with-output-file . jO2cba) (call-with-input-file . jO2cb9) (write-char . jO2cb8) (write . jO2cb7) (with-output-to-file . jO2cb6) (with-input-from-file . jO2cb5) (read-char . jO2cb4) (read . jO2cb3) (peek-char . jO2cb2) (open-output-file . jO2cb1) (open-input-file . jO2cb0) (newline . jO2caf) (display . jO2cae) (close-output-port . jO2cad) (close-input-port . jO2cac) (eof-object? . jO2cab) (eof-object . jO2caa) (current-error-port . jO2ca9) (current-output-port . jO2ca8) (current-input-port . jO2ca7) (output-port? . jO2ca6) (input-port? . jO2ca5) (utf-8-codec . jO2ca4) (utf-16-codec . jO2ca3) (transcoder-error-handling-mode . jO2ca2) (transcoder-eol-style . jO2ca1) (transcoder-codec . jO2ca0) (transcoded-port . jO2c9f) (textual-port? . jO2c9e) (string->bytevector . jO2c9d) (standard-output-port . jO2c9c) (standard-input-port . jO2c9b) (standard-error-port . jO2c9a) (set-port-position! . jO2c99) (put-u8 . jO2c98) (put-string . jO2c97) (put-datum . jO2c96) (put-char . jO2c95) (put-bytevector . jO2c94) (port? . jO2c93) (port-transcoder . jO2c92) (port-position . jO2c91) (port-has-set-port-position!? . jO2c90) (port-has-port-position? . jO2c8f) (port-eof? . jO2c8e) (output-port-buffer-mode . jO2c8d) (open-string-output-port . jO2c8c) (open-string-input-port . jO2c8b) (open-file-output-port . jO2c8a) (open-file-input/output-port . jO2c89) (open-file-input-port . jO2c88) (open-bytevector-output-port . jO2c87) (open-bytevector-input-port . jO2c86) (native-transcoder . jO2c85) (native-eol-style . jO2c84) (make-transcoder . jO2c83) (latin-1-codec . jO2c82) (make-i/o-write-error . jO2c81) (make-i/o-read-error . jO2c80) (make-i/o-port-error . jO2c7f) (make-i/o-invalid-position-error . jO2c7e) (make-i/o-filename-error . jO2c7d) (make-i/o-file-protection-error . jO2c7c) (make-i/o-file-is-read-only-error . jO2c7b) (make-i/o-file-does-not-exist-error . jO2c7a) (make-i/o-file-already-exists-error . jO2c79) (make-i/o-error . jO2c78) (make-i/o-encoding-error . jO2c77) (make-i/o-decoding-error . jO2c76) (make-custom-textual-output-port . jO2c75) (make-custom-textual-input/output-port . jO2c74) (make-custom-textual-input-port . jO2c73) (make-custom-binary-output-port . jO2c72) (make-custom-binary-input/output-port . jO2c71) (make-custom-binary-input-port . jO2c70) (make-bytevector . jO2c6f) (lookahead-u8 . jO2c6e) (lookahead-char . jO2c6d) (i/o-write-error? . jO2c6c) (i/o-read-error? . jO2c6b) (i/o-port-error? . jO2c6a) (i/o-invalid-position-error? . jO2c69) (i/o-filename-error? . jO2c68) (i/o-file-protection-error? . jO2c67) (i/o-file-is-read-only-error? . jO2c66) (i/o-file-does-not-exist-error? . jO2c65) (i/o-file-already-exists-error? . jO2c64) (i/o-error? . jO2c63) (i/o-error-position . jO2c62) (i/o-error-port . jO2c61) (i/o-error-filename . jO2c60) (i/o-encoding-error? . jO2c5f) (i/o-encoding-error-char . jO2c5e) (i/o-decoding-error? . jO2c5d) (get-u8 . jO2c5c) (get-string-n! . jO2c5b) (get-string-n . jO2c5a) (get-string-all . jO2c59) (get-line . jO2c58) (get-datum . jO2c57) (get-char . jO2c56) (get-bytevector-some . jO2c55) (get-bytevector-n! . jO2c54) (get-bytevector-n . jO2c53) (get-bytevector-all . jO2c52) (flush-output-port . jO2c51) (close-port . jO2c50) (scheme-report-environment . jOe33) (quotient . jO2c4f) (null-environment . jOe31) (remainder . jO2c4e) (modulo . jO2c4d) (inexact->exact . jO2c4c) (force . jO2c4b) (exact->inexact . jO2c4a) (make-promise . jO2c49) (exit . jO2c48) (command-line . jO28da) (string-fill! . jO2c47) (string-set! . jO2c46) (set-cdr! . jO2c45) (set-car! . jO2c44) (remove . jO2c43) (remv . jO2c42) (remp . jO2c41) (remq . jO2c40) (partition . jO2c3f) (memv . jO2c3e) (memq . jO2c3d) (memp . jO2c3c) (member . jO2c3b) (exists . jO2c3a) (for-all . jO2c39) (fold-right . jO2c38) (fold-left . jO2c37) (find . jO2c36) (filter . jO2c35) (cons* . jO2c34) (assv . jO2c33) (assq . jO2c32) (assp . jO2c31) (assoc . jO2c30) (call-with-string-output-port . jO2c2f) (call-with-port . jO2c2e) (call-with-bytevector-output-port . jO2c2d) (bytevector->string . jO2c2c) (buffer-mode? . jO2c2b) (binary-port? . jO2c2a) (with-exception-handler . jO2c29) (raise-continuable . jO2c28) (raise . jO2c27) (eval . jOe37) (environment . jOe2f) (make-enumeration . jO2c26) (enum-set=? . jO2c25) (enum-set-universe . jO2c24) (enum-set-union . jO2c23) (enum-set-subset? . jO2c22) (enum-set-projection . jO2c21) (enum-set-member? . jO2c20) (enum-set-intersection . jO2c1f) (enum-set-indexer . jO2c1e) (enum-set-difference . jO2c1d) (enum-set-constructor . jO2c1c) (enum-set-complement . jO2c1b) (enum-set->list . jO2c1a) (who-condition? . jO2c19) (warning? . jO2c18) (violation? . jO2c17) (undefined-violation? . jO2c16) (syntax-violation? . jO2c15) (syntax-violation-subform . jO2c14) (syntax-violation-form . jO2c13) (syntax-violation . jOe57) (simple-conditions . jO2c12) (serious-condition? . jO2c11) (non-continuable-violation? . jO2c10) (message-condition? . jO2c0f) (make-who-condition . jO2c0e) (make-warning . jO2c0d) (make-violation . jO2c0c) (make-undefined-violation . jO2c0b) (make-syntax-violation . jO2c0a) (make-serious-condition . jO2c09) (make-non-continuable-violation . jO2c08) (make-message-condition . jO2c07) (make-lexical-violation . jO2c06) (make-irritants-condition . jO2c05) (make-implementation-restriction-violation . jO2c04) (make-error . jO2c03) (make-assertion-violation . jO2c02) (lexical-violation? . jO2c01) (irritants-condition? . jO2c00) (implementation-restriction-violation? . jO2bff) (error? . jO2bfe) (condition-who . jO2bfd) (condition-predicate . jO2bfc) (condition-message . jO2bfb) (condition-irritants . jO2bfa) (condition-accessor . jO2bf9) (condition . jO2bf8) (assertion-violation? . jO2bf7) (condition? . jO2bf6) (utf32->string . jO2bf5) (utf16->string . jO2bf4) (utf8->string . jO2bf3) (uint-list->bytevector . jO2bf2) (u8-list->bytevector . jO2bf1) (string->utf8 . jO2bf0) (string->utf32 . jO2bef) (string->utf16 . jO2bee) (sint-list->bytevector . jO2bed) (native-endianness . jO2bec) (bytevector? . jO2beb) (bytevector=? . jO2bea) (bytevector-uint-set! . jO2be9) (bytevector-uint-ref . jO2be8) (bytevector-u8-set! . jO2be7) (bytevector-u8-ref . jO2be6) (bytevector-u64-set! . jO2be5) (bytevector-u64-ref . jO2be4) (bytevector-u64-native-set! . jO2be3) (bytevector-u64-native-ref . jO2be2) (bytevector-u32-set! . jO2be1) (bytevector-u32-ref . jO2be0) (bytevector-u32-native-set! . jO2bdf) (bytevector-u32-native-ref . jO2bde) (bytevector-u16-set! . jO2bdd) (bytevector-u16-ref . jO2bdc) (bytevector-u16-native-set! . jO2bdb) (bytevector-u16-native-ref . jO2bda) (bytevector-sint-set! . jO2bd9) (bytevector-sint-ref . jO2bd8) (bytevector-s8-set! . jO2bd7) (bytevector-s8-ref . jO2bd6) (bytevector-s64-set! . jO2bd5) (bytevector-s64-ref . jO2bd4) (bytevector-s64-native-set! . jO2bd3) (bytevector-s64-native-ref . jO2bd2) (bytevector-s32-set! . jO2bd1) (bytevector-s32-ref . jO2bd0) (bytevector-s32-native-set! . jO2bcf) (bytevector-s32-native-ref . jO2bce) (bytevector-s16-set! . jO2bcd) (bytevector-s16-ref . jO2bcc) (bytevector-s16-native-set! . jO2bcb) (bytevector-s16-native-ref . jO2bca) (bytevector-length . jO2bc9) (bytevector-ieee-single-ref . jO2bc8) (bytevector-ieee-single-set! . jO2bc7) (bytevector-ieee-single-native-set! . jO2bc6) (bytevector-ieee-single-native-ref . jO2bc5) (bytevector-ieee-double-set! . jO2bc4) (bytevector-ieee-double-ref . jO2bc3) (bytevector-ieee-double-native-set! . jO2bc2) (bytevector-ieee-double-native-ref . jO2bc1) (bytevector-fill! . jO2bc0) (bytevector-copy! . jO2bbf) (bytevector-copy . jO2bbe) (bytevector->uint-list . jO2bbd) (bytevector->u8-list . jO2bbc) (bytevector->sint-list . jO2bbb) (no-nans-violation? . jO2bba) (no-infinities-violation? . jO2bb9) (make-no-nans-violation . jO2bb8) (make-no-infinities-violation . jO2bb7) (real->flonum . jO2bb6) (flzero? . jO2bb5) (fltruncate . jO2bb4) (fltan . jO2bb3) (flsqrt . jO2bb2) (flsin . jO2bb1) (flround . jO2bb0) (flpositive? . jO2baf) (flonum? . jO2bae) (flodd? . jO2bad) (flnumerator . jO2bac) (flnegative? . jO2bab) (flnan? . jO2baa) (flmod0 . jO2ba9) (flmod . jO2ba8) (flmin . jO2ba7) (flmax . jO2ba6) (fllog . jO2ba5) (flinteger? . jO2ba4) (flinfinite? . jO2ba3) (flfloor . jO2ba2) (flfinite? . jO2ba1) (flexpt . jO2ba0) (flexp . jO2b9f) (fleven? . jO2b9e) (fldiv0-and-mod0 . jO2b9d) (fldiv0 . jO2b9c) (fldiv-and-mod . jO2b9b) (fldiv . jO2b9a) (fldenominator . jO2b99) (flcos . jO2b98) (flceiling . jO2b97) (flatan . jO2b96) (flasin . jO2b95) (flacos . jO2b94) (flabs . jO2b93) (fl>? . jO2b92) (fl>=? . jO2b91) (fl=? . jO2b90) (fl<? . jO2b8f) (fl<=? . jO2b8e) (fl/ . jO2b8d) (fl- . jO2b8c) (fl+ . jO2b8b) (fl* . jO2b8a) (fixnum->flonum . jO2b89) (fxzero? . jO2b88) (fxxor . jO2b87) (fxrotate-bit-field . jO2b86) (fxreverse-bit-field . jO2b85) (fxpositive? . jO2b84) (fxodd? . jO2b83) (fxnot . jO2b82) (fxnegative? . jO2b81) (fxmod0 . jO2b80) (fxmod . jO2b7f) (fxmin . jO2b7e) (fxmax . jO2b7d) (fxlength . jO2b7c) (fxior . jO2b7b) (fxif . jO2b7a) (fxfirst-bit-set . jO2b79) (fxeven? . jO2b78) (fxdiv0-and-mod0 . jO2b77) (fxdiv0 . jO2b76) (fxdiv-and-mod . jO2b75) (fxdiv . jO2b74) (fxcopy-bit-field . jO2b73) (fxcopy-bit . jO2b72) (fxbit-set? . jO2b71) (fxbit-field . jO2b70) (fxbit-count . jO2b6f) (fxarithmetic-shift-right . jO2b6e) (fxarithmetic-shift-left . jO2b6d) (fxarithmetic-shift . jO2b6c) (fxand . jO2b6b) (fx>? . jO2b6a) (fx>=? . jO2b69) (fx=? . jO2b68) (fx<? . jO2b67) (fx<=? . jO2b66) (fx-/carry . jO2b65) (fx- . jO2b64) (fx+/carry . jO2b63) (fx+ . jO2b62) (fx*/carry . jO2b61) (fx* . jO2b60) (greatest-fixnum . jO2b5f) (least-fixnum . jO2b5e) (fixnum-width . jO2b5d) (fixnum? . jO2b5c) (bitwise-rotate-bit-field . jO2b5b) (bitwise-reverse-bit-field . jO2b5a) (bitwise-length . jO2b59) (bitwise-if . jO2b58) (bitwise-first-bit-set . jO2b57) (bitwise-copy-bit-field . jO2b56) (bitwise-copy-bit . jO2b55) (bitwise-bit-set? . jO2b54) (bitwise-bit-field . jO2b53) (bitwise-bit-count . jO2b52) (bitwise-xor . jO2b51) (bitwise-ior . jO2b50) (bitwise-and . jO2b4f) (bitwise-not . jO2b4e) (bitwise-arithmetic-shift-right . jO2b4d) (bitwise-arithmetic-shift-left . jO2b4c) (bitwise-arithmetic-shift . jO2b4b) (zero? . jO2b4a) (vector? . jO2b49) (vector-set! . jO2b48) (vector-ref . jO2b47) (vector-map . jO2b46) (vector-length . jO2b45) (vector-for-each . jO2b44) (vector-fill! . jO2b43) (vector->list . jO2b42) (vector . jO2b41) (values . jO2b40) (truncate . jO2b3f) (tan . jO2b3e) (symbol? . jO2b3d) (symbol=? . jO2b3c) (symbol->string . jO2b3b) (substring . jO2b3a) (string? . jO2b39) (string>? . jO2b38) (string>=? . jO2b37) (string=? . jO2b36) (string<? . jO2b35) (string<=? . jO2b34) (string-ref . jO2b33) (string-length . jO2b32) (string-for-each . jO2b31) (string-copy . jO2b30) (string-append . jO2b2f) (string->symbol . jO2b2e) (string->number . jO2b2d) (string->list . jO2b2c) (string . jO2b2b) (sqrt . jO2b2a) (sin . jO2b29) (round . jO2b28) (reverse . jO2b27) (real? . jO2b26) (real-valued? . jO2b25) (real-part . jO2b24) (rationalize . jO2b23) (rational? . jO2b22) (rational-valued? . jO2b21) (procedure? . jO2b20) (positive? . jO2b1f) (pair? . jO2b1e) (odd? . jO2b1d) (numerator . jO2b1c) (number? . jO2b1b) (number->string . jO2b1a) (null? . jO2b19) (not . jO2b18) (negative? . jO2b17) (nan? . jO2b16) (min . jO2b15) (max . jO2b14) (map . jO2b13) (make-vector . jO2b12) (make-string . jO2b11) (make-rectangular . jO2b10) (make-polar . jO2b0f) (magnitude . jO2b0e) (log . jO2b0d) (list? . jO2b0c) (list-tail . jO2b0b) (list-ref . jO2b0a) (list->vector . jO2b09) (list->string . jO2b08) (list . jO2b07) (length . jO2b06) (lcm . jO2b05) (integer? . jO2b04) (integer-valued? . jO2b03) (integer->char . jO2b02) (infinite? . jO2b01) (inexact? . jO2b00) (inexact . jO2aff) (imag-part . jO2afe) (gcd . jO2afd) (for-each . jO2afc) (floor . jO2afb) (finite? . jO2afa) (expt . jO2af9) (exp . jO2af8) (exact? . jO2af7) (exact-integer-sqrt . jO2af6) (exact . jO2af5) (even? . jO2af4) (error . jO2af3) (eqv? . jO2af2) (equal? . jO2af1) (eq? . jO2af0) (dynamic-wind . jO2aef) (div0-and-mod0 . jO2aee) (mod0 . jO2aed) (div0 . jO2aec) (div-and-mod . jO2aeb) (mod . jO2aea) (div . jO2ae9) (denominator . jO2ae8) (cos . jO2ae7) (cons . jO2ae6) (complex? . jO2ae5) (char? . jO2ae4) (char>? . jO2ae3) (char>=? . jO2ae2) (char=? . jO2ae1) (char<? . jO2ae0) (char<=? . jO2adf) (char->integer . jO2ade) (ceiling . jO2add) (call-with-values . jO2adc) (call/cc . jO2adb) (call-with-current-continuation . jO2ada) (cddddr . jO2ad9) (cdddar . jO2ad8) (cddadr . jO2ad7) (cddaar . jO2ad6) (cdaddr . jO2ad5) (cdadar . jO2ad4) (cdaadr . jO2ad3) (cdaaar . jO2ad2) (cadddr . jO2ad1) (caddar . jO2ad0) (cadadr . jO2acf) (cadaar . jO2ace) (caaddr . jO2acd) (caadar . jO2acc) (caaadr . jO2acb) (caaaar . jO2aca) (cdddr . jO2ac9) (cddar . jO2ac8) (cdadr . jO2ac7) (cdaar . jO2ac6) (caddr . jO2ac5) (cadar . jO2ac4) (caadr . jO2ac3) (caaar . jO2ac2) (cddr . jO2ac1) (cdar . jO2ac0) (cadr . jO2abf) (caar . jO2abe) (cdr . jO2abd) (car . jO2abc) (boolean? . jO2abb) (boolean=? . jO2aba) (atan . jO2ab9) (assertion-violation . jO2ab8) (assertion-error . jOe51) (asin . jO2ab7) (apply . jO2ab6) (append . jO2ab5) (angle . jO2ab4) (acos . jO2ab3) (abs . jO2ab2) (/ . jO2ab1) (* . jO2ab0) (- . jO2aaf) (+ . jO2aae) (>= . jO2aad) (> . jO2aac) (= . jO2aab) (<= . jO2aaa) (< . jO2aa9) (library . jO2aa8) (&no-nans . jO2aa7) (&no-infinities . jO2aa6) (&i/o-encoding . jO2aa5) (&i/o-decoding . jO2aa4) (&i/o-port . jO2aa3) (&i/o-file-does-not-exist . jO2aa2) (&i/o-file-already-exists . jO2aa1) (&i/o-file-is-read-only . jO2aa0) (&i/o-file-protection . jO2a9f) (&i/o-filename . jO2a9e) (&i/o-invalid-position . jO2a9d) (&i/o-write . jO2a9c) (&i/o-read . jO2a9b) (&i/o . jO2a9a) (&undefined . jO2a99) (&syntax . jO2a98) (&lexical . jO2a97) (&implementation-restriction . jO2a96) (&non-continuable . jO2a95) (&who . jO2a94) (&irritants . jO2a93) (&assertion . jO2a92) (&violation . jO2a91) (&error . jO2a90) (&serious . jO2a8f) (&warning . jO2a8e) (&message . jO2a8d) (&condition . jO2a8c) (define-condition-type . jO2a8b) (define-enumeration . jO2a8a) (define-record-type . jO2a89) (parent-rtd . jO2a88) (nongenerative . jO2a87) (opaque . jO2a86) (sealed . jO2a85) (protocol . jO2a84) (parent . jO2a83) (immutable . jO2a82) (mutable . jO2a81) (fields . jO2a80) (error-handling-mode . jO2a7f) (file-options . jO2a7e) (buffer-mode . jO2a7d) (eol-style . jO2a7c) (guard . jO2a7b) (trace-define . jO2a7a) (trace-lambda . jO2a79) (unsyntax-splicing . jO2a78) (unsyntax . jO2a77) (unquote-splicing . jO2a76) (unquote . jO2a75) (_ . jO2a74) (else . jO2a73) (=> . jO2a72) (... . jO2a71) (assert . jO2a70) (endianness . jO2a6f) (delay . jO2a6e) (time . jO2a6d) (do . jO2a6c) (cond . jO2a6b) (let* . jO2a6a) (let*-values . jO2a69) (let-values . jO2a68) (identifier-syntax . jO2a67) (with-syntax . jO2a66) (quasisyntax . jO2a65) (quasiquote . jO2a64) (syntax-rules . jO2a63) (include . jO2a62) (define-struct . jO2a61) (record-constructor-descriptor . jO2a60) (record-type-descriptor . jO2a5f) (case . jO2a5e) (parameterize . jO2a5d) (unless . jO2a5c) (when . jO2a5b) (or . jO2a5a) (and . jO2a59) (if . jO2a58) (let . jO2a57) (letrec* . jO2a56) (letrec . jO2a55) (type-descriptor . jO2a54) (case-lambda . jO2a53) (lambda . jO2a52) (syntax . jO2a51) (syntax-case . jO2a50) (quote . jO2a4f) (foreign-call . jO2a4e) (letrec-syntax . jO2a4d) (let-syntax . jO2a4c) (set! . jO2a4b) (import . jO2a4a) (begin . jO2a49) (module . jO2a48) (define-syntax . jO2a47) (define . jO2a46)) '((jO2de5 core-prim . &no-nans-rcd) (jO2de4 core-prim . &no-nans-rtd) (jO2de3 core-prim . &no-infinities-rcd) (jO2de2 core-prim . &no-infinities-rtd) (jO2de1 core-prim . &i/o-encoding-rcd) (jO2de0 core-prim . &i/o-encoding-rtd) (jO2ddf core-prim . &i/o-decoding-rcd) (jO2dde core-prim . &i/o-decoding-rtd) (jO2ddd core-prim . &i/o-port-rcd) (jO2ddc core-prim . &i/o-port-rtd) (jO2ddb core-prim . &i/o-file-does-not-exist-rcd) (jO2dda core-prim . &i/o-file-does-not-exist-rtd) (jO2dd9 core-prim . &i/o-file-already-exists-rcd) (jO2dd8 core-prim . &i/o-file-already-exists-rtd) (jO2dd7 core-prim . &i/o-file-is-read-only-rcd) (jO2dd6 core-prim . &i/o-file-is-read-only-rtd) (jO2dd5 core-prim . &i/o-file-protection-rcd) (jO2dd4 core-prim . &i/o-file-protection-rtd) (jO2dd3 core-prim . &i/o-filename-rcd) (jO2dd2 core-prim . &i/o-filename-rtd) (jO2dd1 core-prim . &i/o-invalid-position-rcd) (jO2dd0 core-prim . &i/o-invalid-position-rtd) (jO2dcf core-prim . &i/o-write-rcd) (jO2dce core-prim . &i/o-write-rtd) (jO2dcd core-prim . &i/o-read-rcd) (jO2dcc core-prim . &i/o-read-rtd) (jO2dcb core-prim . &i/o-rcd) (jO2dca core-prim . &i/o-rtd) (jO2dc9 core-prim . &undefined-rcd) (jO2dc8 core-prim . &undefined-rtd) (jO2dc7 core-prim . &syntax-rcd) (jO2dc6 core-prim . &syntax-rtd) (jO2dc5 core-prim . &lexical-rcd) (jO2dc4 core-prim . &lexical-rtd) (jO2dc3 core-prim . &implementation-restriction-rcd) (jO2dc2 core-prim . &implementation-restriction-rtd) (jO2dc1 core-prim . &non-continuable-rcd) (jO2dc0 core-prim . &non-continuable-rtd) (jO2dbf core-prim . &who-rcd) (jO2dbe core-prim . &who-rtd) (jO2dbd core-prim . &irritants-rcd) (jO2dbc core-prim . &irritants-rtd) (jO2dbb core-prim . &assertion-rcd) (jO2dba core-prim . &assertion-rtd) (jO2db9 core-prim . &violation-rcd) (jO2db8 core-prim . &violation-rtd) (jO2db7 core-prim . &error-rcd) (jO2db6 core-prim . &error-rtd) (jO2db5 core-prim . &serious-rcd) (jO2db4 core-prim . &serious-rtd) (jO2db3 core-prim . &warning-rcd) (jO2db2 core-prim . &warning-rtd) (jO2db1 core-prim . &message-rcd) (jO2db0 core-prim . &message-rtd) (jO2daf core-prim . &condition-rcd) (jO2dae core-prim . &condition-rtd) (jOe53 core-prim . syntax-error) (jOd77 core-prim . syntax-dispatch) (jO2dad core-prim . pretty-print) (jO2dac core-prim . eval-core) (jO2dab core-prim . set-symbol-value!) (jO2daa core-prim . symbol-value) (jO2da9 core-prim . gensym) (jO2da8 core-prim . void) (jO28e0 core-prim . load) (jOe65 core-prim . interaction-environment) (jO2da7 core-prim . char-ready?) (jO2da6 core-prim . regexp?) (jO2da5 core-prim . read-line) (jO2da4 core-prim . gensym-prefix-set!) (jO2da3 core-prim . ungensym) (jO2da2 core-prim . alist->eq-hash-table) (jO2da1 core-prim . assoc-ref) (jO2da0 core-prim . print) (jO2d9f core-prim . format) (jO2d9e core-prim . host-os) (jO7b6 core-prim . library-path) (jO2d9d core-prim . standard-library-path) (jO2d9c core-prim . file-newer?) (jO2d9b core-prim . stat-mtime) (jO2d9a core-prim . write-to-file) (jO2d99 core-prim . file->list) (jO2d98 core-prim . file->string) (jO2d97 core-prim . digit->integer) (jO2d96 core-prim . call-with-string-input-port) (jO2d95 core-prim . call-with-string-io) (jO2d94 core-prim . string-split) (jO2d93 core-prim . bytevector-for-each) (jO2d92 core-prim . string->regexp) (jO2d91 core-prim . rxmatch) (jO2d90 core-prim . regexp-replace-all) (jO2d8f core-prim . hashtable-for-each) (jO5a0 core-prim . mosh-cache-dir) (jO2d8e core-prim . call-process) (jO2d8d core-prim . local-tz-offset) (jO2d8c core-prim . microseconds) (jO2d8b core-prim . directory-list) (jO2d8a core-prim . set-current-directory!) (jO2d89 core-prim . expand-path) (jO2d88 core-prim . current-directory) (jO2d87 core-prim . %spawn) (jO2d86 core-prim . %waitpid) (jO2d85 core-prim . simple-struct-name) (jO2d84 core-prim . simple-struct-set!) (jO2d83 core-prim . simple-struct-ref) (jO2d82 core-prim . make-simple-struct) (jO2d81 core-prim . simple-struct?) (jO2d80 core-prim . pointer-ref-c-int64) (jO2d7f core-prim . pointer-ref-c-int32) (jO2d7e core-prim . pointer-ref-c-int16) (jO2d7d core-prim . pointer-ref-c-int8) (jO2d7c core-prim . pointer-ref-c-uint64) (jO2d7b core-prim . pointer-ref-c-uint32) (jO2d7a core-prim . pointer-ref-c-uint16) (jO2d79 core-prim . pointer-ref-c-uint8) (jO2d78 core-prim . pointer-set-c-uint64!) (jO2d77 core-prim . pointer-set-c-uint32!) (jO2d76 core-prim . pointer-set-c-uint16!) (jO2d75 core-prim . pointer-set-c-uint8!) (jO2d74 core-prim . pointer-set-c-int64!) (jO2d73 core-prim . pointer-set-c-int32!) (jO2d72 core-prim . pointer-set-c-int16!) (jO2d71 core-prim . pointer-set-c-int8!) (jO2d70 core-prim . pointer-set-c-pointer!) (jO2d6f core-prim . pointer-set-c-double!) (jO2d6e core-prim . pointer-set-c-float!) (jO2d6d core-prim . pointer-set-c-long-long!) (jO2d6c core-prim . pointer-set-c-long!) (jO2d6b core-prim . pointer-set-c-int!) (jO2d6a core-prim . pointer-set-c-short!) (jO2d69 core-prim . pointer-set-c-char!) (jO2d68 core-prim . pointer-ref-c-pointer) (jO2d67 core-prim . pointer-ref-c-double) (jO2d66 core-prim . pointer-ref-c-float) (jO2d65 core-prim . pointer-ref-c-unsigned-long-long) (jO2d64 core-prim . pointer-ref-c-signed-long-long) (jO2d63 core-prim . pointer-ref-c-unsigned-long) (jO2d62 core-prim . pointer-ref-c-signed-long) (jO2d61 core-prim . pointer-ref-c-unsigned-int) (jO2d60 core-prim . pointer-ref-c-signed-int) (jO2d5f core-prim . pointer-ref-c-unsigned-short) (jO2d5e core-prim . pointer-ref-c-signed-short) (jO2d5d core-prim . pointer-ref-c-unsigned-char) (jO2d5c core-prim . pointer-ref-c-signed-char) (jO2d5b core-prim . pointer->integer) (jO2d5a core-prim . integer->pointer) (jO2d59 core-prim . pointer?) (jO2d58 core-prim . shared-errno) (jO2d57 core-prim . %ffi-free-c-callback-trampoline) (jO2d56 core-prim . %ffi-make-c-callback-trampoline) (jO2d55 core-prim . %ffi-free) (jO2d54 core-prim . %ffi-malloc) (jO2d53 core-prim . %ffi-supported?) (jO2d52 core-prim . %ffi-pointer->string) (jO2d51 core-prim . %ffi-call) (jO2d50 core-prim . %ffi-lookup) (jO2d4f core-prim . %ffi-open) (jO2d4e core-prim . null-terminated-utf8->string) (jO2d4d core-prim . null-terminated-bytevector->string) (jO2d4c core-prim . %exec) (jO2d4b core-prim . %fork) (jO2d4a core-prim . %pipe) (jO2d49 core-prim . p) (jO2d48 core-prim . open-output-string) (jO2d47 core-prim . get-output-string) (jO2d46 core-prim . file-stat-ctime) (jO2d45 core-prim . file-stat-atime) (jO2d44 core-prim . file-stat-mtime) (jO2d43 core-prim . file-size-in-bytes) (jO2d42 core-prim . file-writable?) (jO2d41 core-prim . file-executable?) (jO2d40 core-prim . file-readable?) (jO2d3f core-prim . file-regular?) (jO2d3e core-prim . file-symbolic-link?) (jO2d3d core-prim . file-directory?) (jO2d3c core-prim . create-symbolic-link) (jO2d3b core-prim . rename-file) (jO2d3a core-prim . delete-directory) (jO2d39 core-prim . create-directory) (jO2d38 core-prim . create-mosh-cache-dir) (jO2d37 core-prim . get-environment-variables) (jO2d36 core-prim . current-exception-handler) (jO2d35 core-prim . get-environment-variable) (jO2d34 core-prim . join-wraps) (jO2d33 core-prim . id->real-label) (jO2d32 core-prim . same-marks?) (jO2d31 core-prim . same-marks*?) (jO2d30 core-prim . get-timeofday) (jO2d2f core-prim . get-command-line) (jO2d2e core-prim . sys-display) (jO2d2d core-prim . whereis) (jO2d2c core-prim . register) (jO2d2b core-prim . vm-join!) (jO2d2a core-prim . vm-set-value!) (jO2d29 core-prim . vm?) (jO2d28 core-prim . main-vm?) (jO2d27 core-prim . vm-eval) (jO2d26 core-prim . vm-self) (jO2d25 core-prim . vm-start!) (jO2d24 core-prim . make-vm) (jO2d23 core-prim . mutex-try-lock!) (jO2d22 core-prim . mutex-unlock!) (jO2d21 core-prim . mutex-lock!) (jO2d20 core-prim . mutex?) (jO2d1f core-prim . make-mutex) (jO2d1e core-prim . condition-variable-notify-all!) (jO2d1d core-prim . condition-variable-notify!) (jO2d1c core-prim . condition-variable-wait!) (jO2d1b core-prim . make-condition-variable) (jO2d1a core-prim . write/ss) (jO2d19 core-prim . mosh-executable-path) (jO2d18 core-prim . make-file-options) (jO2d17 core-prim . source-info) (jO2d16 core-prim . make-compiler-instruction) (jO2d15 core-prim . make-instruction) (jO2d14 core-prim . set-source-info!) (jO2d13 core-prim . bignum?) (jO2d12 core-prim . fast-equal?) (jO2d11 core-prim . fasl-read) (jO2d10 core-prim . fasl-write) (jO2d0f core-prim . time-usage) (jO2d0e core-prim . os-constant) (jO2d0d core-prim . disasm) (jO59e core-prim . make-parameter) (jO2d0c core-prim . socket-port) (jO2d0b core-prim . socket-shutdown) (jO2d0a core-prim . socket-close) (jO2d09 core-prim . socket-send) (jO2d08 core-prim . socket-recv!) (jO2d07 core-prim . socket-recv) (jO2d06 core-prim . make-server-socket) (jO2d05 core-prim . make-client-socket) (jO2d04 core-prim . socket-accept) (jO2d03 core-prim . socket?) (jO2d02 core-prim . string-upcase) (jO2d01 core-prim . string-titlecase) (jO2d00 core-prim . string-normalize-nfkd) (jO2cff core-prim . string-normalize-nfkc) (jO2cfe core-prim . string-normalize-nfd) (jO2cfd core-prim . string-normalize-nfc) (jO2cfc core-prim . string-foldcase) (jO2cfb core-prim . string-downcase) (jO2cfa core-prim . string-ci>?) (jO2cf9 core-prim . string-ci>=?) (jO2cf8 core-prim . string-ci=?) (jO2cf7 core-prim . string-ci<?) (jO2cf6 core-prim . string-ci<=?) (jO2cf5 core-prim . char-whitespace?) (jO2cf4 core-prim . char-upper-case?) (jO2cf3 core-prim . char-title-case?) (jO2cf2 core-prim . char-numeric?) (jO2cf1 core-prim . char-lower-case?) (jO2cf0 core-prim . char-general-category) (jO2cef core-prim . char-upcase) (jO2cee core-prim . char-titlecase) (jO2ced core-prim . char-foldcase) (jO2cec core-prim . char-downcase) (jO2ceb core-prim . char-ci>?) (jO2cea core-prim . char-ci>=?) (jO2ce9 core-prim . char-ci=?) (jO2ce8 core-prim . char-ci<?) (jO2ce7 core-prim . char-ci<=?) (jO2ce6 core-prim . char-alphabetic?) (jOba2 core-prim . make-variable-transformer) (jOe59 core-prim . identifier?) (jOe45 core-prim . generate-temporaries) (jOe47 core-prim . free-identifier=?) (jOe5d core-prim . syntax->datum) (jOe5b core-prim . datum->syntax) (jOe49 core-prim . bound-identifier=?) (jO2ce5 core-prim . record-type-descriptor?) (jO2ce4 core-prim . record-predicate) (jO2ce3 core-prim . record-mutator) (jO2ce2 core-prim . record-constructor) (jO2ce1 core-prim . record-accessor) (jO2ce0 core-prim . make-record-type-descriptor) (jO2cdf core-prim . make-record-constructor-descriptor) (jO2cde core-prim . record?) (jO2cdd core-prim . record-type-uid) (jO2cdc core-prim . record-type-sealed?) (jO2cdb core-prim . record-type-parent) (jO2cda core-prim . record-type-opaque?) (jO2cd9 core-prim . record-type-name) (jO2cd8 core-prim . record-type-generative?) (jO2cd7 core-prim . record-type-field-names) (jO2cd6 core-prim . record-rtd) (jO2cd5 core-prim . record-field-mutable?) (jO2cd4 core-prim . delete-file) (jO2cd3 core-prim . file-exists?) (jO2cd2 core-prim . vector-sort!) (jO2cd1 core-prim . vector-sort) (jO2cd0 core-prim . list-sort) (jO2ccf core-prim . symbol-hash) (jO2cce core-prim . string-ci-hash) (jO2ccd core-prim . string-hash) (jO2ccc core-prim . equal-hash) (jO2ccb core-prim . hashtable-equivalence-function) (jO2cca core-prim . make-hashtable) (jO2cc9 core-prim . hashtable-hash-function) (jO2cc8 core-prim . make-eqv-hashtable) (jO2cc7 core-prim . make-eq-hashtable) (jO2cc6 core-prim . hashtable?) (jO2cc5 core-prim . hashtable-update!) (jO2cc4 core-prim . hashtable-size) (jO2cc3 core-prim . hashtable-set!) (jO2cc2 core-prim . hashtable-ref) (jO2cc1 core-prim . hashtable-mutable?) (jO2cc0 core-prim . hashtable-keys) (jO2cbf core-prim . hashtable-entries) (jO2cbe core-prim . hashtable-delete!) (jO2cbd core-prim . hashtable-copy) (jO2cbc core-prim . hashtable-contains?) (jO2cbb core-prim . hashtable-clear!) (jO2cba core-prim . call-with-output-file) (jO2cb9 core-prim . call-with-input-file) (jO2cb8 core-prim . write-char) (jO2cb7 core-prim . write) (jO2cb6 core-prim . with-output-to-file) (jO2cb5 core-prim . with-input-from-file) (jO2cb4 core-prim . read-char) (jO2cb3 core-prim . read) (jO2cb2 core-prim . peek-char) (jO2cb1 core-prim . open-output-file) (jO2cb0 core-prim . open-input-file) (jO2caf core-prim . newline) (jO2cae core-prim . display) (jO2cad core-prim . close-output-port) (jO2cac core-prim . close-input-port) (jO2cab core-prim . eof-object?) (jO2caa core-prim . eof-object) (jO2ca9 core-prim . current-error-port) (jO2ca8 core-prim . current-output-port) (jO2ca7 core-prim . current-input-port) (jO2ca6 core-prim . output-port?) (jO2ca5 core-prim . input-port?) (jO2ca4 core-prim . utf-8-codec) (jO2ca3 core-prim . utf-16-codec) (jO2ca2 core-prim . transcoder-error-handling-mode) (jO2ca1 core-prim . transcoder-eol-style) (jO2ca0 core-prim . transcoder-codec) (jO2c9f core-prim . transcoded-port) (jO2c9e core-prim . textual-port?) (jO2c9d core-prim . string->bytevector) (jO2c9c core-prim . standard-output-port) (jO2c9b core-prim . standard-input-port) (jO2c9a core-prim . standard-error-port) (jO2c99 core-prim . set-port-position!) (jO2c98 core-prim . put-u8) (jO2c97 core-prim . put-string) (jO2c96 core-prim . put-datum) (jO2c95 core-prim . put-char) (jO2c94 core-prim . put-bytevector) (jO2c93 core-prim . port?) (jO2c92 core-prim . port-transcoder) (jO2c91 core-prim . port-position) (jO2c90 core-prim . port-has-set-port-position!?) (jO2c8f core-prim . port-has-port-position?) (jO2c8e core-prim . port-eof?) (jO2c8d core-prim . output-port-buffer-mode) (jO2c8c core-prim . open-string-output-port) (jO2c8b core-prim . open-string-input-port) (jO2c8a core-prim . open-file-output-port) (jO2c89 core-prim . open-file-input/output-port) (jO2c88 core-prim . open-file-input-port) (jO2c87 core-prim . open-bytevector-output-port) (jO2c86 core-prim . open-bytevector-input-port) (jO2c85 core-prim . native-transcoder) (jO2c84 core-prim . native-eol-style) (jO2c83 core-prim . make-transcoder) (jO2c82 core-prim . latin-1-codec) (jO2c81 core-prim . make-i/o-write-error) (jO2c80 core-prim . make-i/o-read-error) (jO2c7f core-prim . make-i/o-port-error) (jO2c7e core-prim . make-i/o-invalid-position-error) (jO2c7d core-prim . make-i/o-filename-error) (jO2c7c core-prim . make-i/o-file-protection-error) (jO2c7b core-prim . make-i/o-file-is-read-only-error) (jO2c7a core-prim . make-i/o-file-does-not-exist-error) (jO2c79 core-prim . make-i/o-file-already-exists-error) (jO2c78 core-prim . make-i/o-error) (jO2c77 core-prim . make-i/o-encoding-error) (jO2c76 core-prim . make-i/o-decoding-error) (jO2c75 core-prim . make-custom-textual-output-port) (jO2c74 core-prim . make-custom-textual-input/output-port) (jO2c73 core-prim . make-custom-textual-input-port) (jO2c72 core-prim . make-custom-binary-output-port) (jO2c71 core-prim . make-custom-binary-input/output-port) (jO2c70 core-prim . make-custom-binary-input-port) (jO2c6f core-prim . make-bytevector) (jO2c6e core-prim . lookahead-u8) (jO2c6d core-prim . lookahead-char) (jO2c6c core-prim . i/o-write-error?) (jO2c6b core-prim . i/o-read-error?) (jO2c6a core-prim . i/o-port-error?) (jO2c69 core-prim . i/o-invalid-position-error?) (jO2c68 core-prim . i/o-filename-error?) (jO2c67 core-prim . i/o-file-protection-error?) (jO2c66 core-prim . i/o-file-is-read-only-error?) (jO2c65 core-prim . i/o-file-does-not-exist-error?) (jO2c64 core-prim . i/o-file-already-exists-error?) (jO2c63 core-prim . i/o-error?) (jO2c62 core-prim . i/o-error-position) (jO2c61 core-prim . i/o-error-port) (jO2c60 core-prim . i/o-error-filename) (jO2c5f core-prim . i/o-encoding-error?) (jO2c5e core-prim . i/o-encoding-error-char) (jO2c5d core-prim . i/o-decoding-error?) (jO2c5c core-prim . get-u8) (jO2c5b core-prim . get-string-n!) (jO2c5a core-prim . get-string-n) (jO2c59 core-prim . get-string-all) (jO2c58 core-prim . get-line) (jO2c57 core-prim . get-datum) (jO2c56 core-prim . get-char) (jO2c55 core-prim . get-bytevector-some) (jO2c54 core-prim . get-bytevector-n!) (jO2c53 core-prim . get-bytevector-n) (jO2c52 core-prim . get-bytevector-all) (jO2c51 core-prim . flush-output-port) (jO2c50 core-prim . close-port) (jOe33 core-prim . scheme-report-environment) (jO2c4f core-prim . quotient) (jOe31 core-prim . null-environment) (jO2c4e core-prim . remainder) (jO2c4d core-prim . modulo) (jO2c4c core-prim . inexact->exact) (jO2c4b core-prim . force) (jO2c4a core-prim . exact->inexact) (jO2c49 core-prim . make-promise) (jO2c48 core-prim . exit) (jO28da core-prim . command-line) (jO2c47 core-prim . string-fill!) (jO2c46 core-prim . string-set!) (jO2c45 core-prim . set-cdr!) (jO2c44 core-prim . set-car!) (jO2c43 core-prim . remove) (jO2c42 core-prim . remv) (jO2c41 core-prim . remp) (jO2c40 core-prim . remq) (jO2c3f core-prim . partition) (jO2c3e core-prim . memv) (jO2c3d core-prim . memq) (jO2c3c core-prim . memp) (jO2c3b core-prim . member) (jO2c3a core-prim . exists) (jO2c39 core-prim . for-all) (jO2c38 core-prim . fold-right) (jO2c37 core-prim . fold-left) (jO2c36 core-prim . find) (jO2c35 core-prim . filter) (jO2c34 core-prim . cons*) (jO2c33 core-prim . assv) (jO2c32 core-prim . assq) (jO2c31 core-prim . assp) (jO2c30 core-prim . assoc) (jO2c2f core-prim . call-with-string-output-port) (jO2c2e core-prim . call-with-port) (jO2c2d core-prim . call-with-bytevector-output-port) (jO2c2c core-prim . bytevector->string) (jO2c2b core-prim . buffer-mode?) (jO2c2a core-prim . binary-port?) (jO2c29 core-prim . with-exception-handler) (jO2c28 core-prim . raise-continuable) (jO2c27 core-prim . raise) (jOe37 core-prim . eval) (jOe2f core-prim . environment) (jO2c26 core-prim . make-enumeration) (jO2c25 core-prim . enum-set=?) (jO2c24 core-prim . enum-set-universe) (jO2c23 core-prim . enum-set-union) (jO2c22 core-prim . enum-set-subset?) (jO2c21 core-prim . enum-set-projection) (jO2c20 core-prim . enum-set-member?) (jO2c1f core-prim . enum-set-intersection) (jO2c1e core-prim . enum-set-indexer) (jO2c1d core-prim . enum-set-difference) (jO2c1c core-prim . enum-set-constructor) (jO2c1b core-prim . enum-set-complement) (jO2c1a core-prim . enum-set->list) (jO2c19 core-prim . who-condition?) (jO2c18 core-prim . warning?) (jO2c17 core-prim . violation?) (jO2c16 core-prim . undefined-violation?) (jO2c15 core-prim . syntax-violation?) (jO2c14 core-prim . syntax-violation-subform) (jO2c13 core-prim . syntax-violation-form) (jOe57 core-prim . syntax-violation) (jO2c12 core-prim . simple-conditions) (jO2c11 core-prim . serious-condition?) (jO2c10 core-prim . non-continuable-violation?) (jO2c0f core-prim . message-condition?) (jO2c0e core-prim . make-who-condition) (jO2c0d core-prim . make-warning) (jO2c0c core-prim . make-violation) (jO2c0b core-prim . make-undefined-violation) (jO2c0a core-prim . make-syntax-violation) (jO2c09 core-prim . make-serious-condition) (jO2c08 core-prim . make-non-continuable-violation) (jO2c07 core-prim . make-message-condition) (jO2c06 core-prim . make-lexical-violation) (jO2c05 core-prim . make-irritants-condition) (jO2c04 core-prim . make-implementation-restriction-violation) (jO2c03 core-prim . make-error) (jO2c02 core-prim . make-assertion-violation) (jO2c01 core-prim . lexical-violation?) (jO2c00 core-prim . irritants-condition?) (jO2bff core-prim . implementation-restriction-violation?) (jO2bfe core-prim . error?) (jO2bfd core-prim . condition-who) (jO2bfc core-prim . condition-predicate) (jO2bfb core-prim . condition-message) (jO2bfa core-prim . condition-irritants) (jO2bf9 core-prim . condition-accessor) (jO2bf8 core-prim . condition) (jO2bf7 core-prim . assertion-violation?) (jO2bf6 core-prim . condition?) (jO2bf5 core-prim . utf32->string) (jO2bf4 core-prim . utf16->string) (jO2bf3 core-prim . utf8->string) (jO2bf2 core-prim . uint-list->bytevector) (jO2bf1 core-prim . u8-list->bytevector) (jO2bf0 core-prim . string->utf8) (jO2bef core-prim . string->utf32) (jO2bee core-prim . string->utf16) (jO2bed core-prim . sint-list->bytevector) (jO2bec core-prim . native-endianness) (jO2beb core-prim . bytevector?) (jO2bea core-prim . bytevector=?) (jO2be9 core-prim . bytevector-uint-set!) (jO2be8 core-prim . bytevector-uint-ref) (jO2be7 core-prim . bytevector-u8-set!) (jO2be6 core-prim . bytevector-u8-ref) (jO2be5 core-prim . bytevector-u64-set!) (jO2be4 core-prim . bytevector-u64-ref) (jO2be3 core-prim . bytevector-u64-native-set!) (jO2be2 core-prim . bytevector-u64-native-ref) (jO2be1 core-prim . bytevector-u32-set!) (jO2be0 core-prim . bytevector-u32-ref) (jO2bdf core-prim . bytevector-u32-native-set!) (jO2bde core-prim . bytevector-u32-native-ref) (jO2bdd core-prim . bytevector-u16-set!) (jO2bdc core-prim . bytevector-u16-ref) (jO2bdb core-prim . bytevector-u16-native-set!) (jO2bda core-prim . bytevector-u16-native-ref) (jO2bd9 core-prim . bytevector-sint-set!) (jO2bd8 core-prim . bytevector-sint-ref) (jO2bd7 core-prim . bytevector-s8-set!) (jO2bd6 core-prim . bytevector-s8-ref) (jO2bd5 core-prim . bytevector-s64-set!) (jO2bd4 core-prim . bytevector-s64-ref) (jO2bd3 core-prim . bytevector-s64-native-set!) (jO2bd2 core-prim . bytevector-s64-native-ref) (jO2bd1 core-prim . bytevector-s32-set!) (jO2bd0 core-prim . bytevector-s32-ref) (jO2bcf core-prim . bytevector-s32-native-set!) (jO2bce core-prim . bytevector-s32-native-ref) (jO2bcd core-prim . bytevector-s16-set!) (jO2bcc core-prim . bytevector-s16-ref) (jO2bcb core-prim . bytevector-s16-native-set!) (jO2bca core-prim . bytevector-s16-native-ref) (jO2bc9 core-prim . bytevector-length) (jO2bc8 core-prim . bytevector-ieee-single-ref) (jO2bc7 core-prim . bytevector-ieee-single-set!) (jO2bc6 core-prim . bytevector-ieee-single-native-set!) (jO2bc5 core-prim . bytevector-ieee-single-native-ref) (jO2bc4 core-prim . bytevector-ieee-double-set!) (jO2bc3 core-prim . bytevector-ieee-double-ref) (jO2bc2 core-prim . bytevector-ieee-double-native-set!) (jO2bc1 core-prim . bytevector-ieee-double-native-ref) (jO2bc0 core-prim . bytevector-fill!) (jO2bbf core-prim . bytevector-copy!) (jO2bbe core-prim . bytevector-copy) (jO2bbd core-prim . bytevector->uint-list) (jO2bbc core-prim . bytevector->u8-list) (jO2bbb core-prim . bytevector->sint-list) (jO2bba core-prim . no-nans-violation?) (jO2bb9 core-prim . no-infinities-violation?) (jO2bb8 core-prim . make-no-nans-violation) (jO2bb7 core-prim . make-no-infinities-violation) (jO2bb6 core-prim . real->flonum) (jO2bb5 core-prim . flzero?) (jO2bb4 core-prim . fltruncate) (jO2bb3 core-prim . fltan) (jO2bb2 core-prim . flsqrt) (jO2bb1 core-prim . flsin) (jO2bb0 core-prim . flround) (jO2baf core-prim . flpositive?) (jO2bae core-prim . flonum?) (jO2bad core-prim . flodd?) (jO2bac core-prim . flnumerator) (jO2bab core-prim . flnegative?) (jO2baa core-prim . flnan?) (jO2ba9 core-prim . flmod0) (jO2ba8 core-prim . flmod) (jO2ba7 core-prim . flmin) (jO2ba6 core-prim . flmax) (jO2ba5 core-prim . fllog) (jO2ba4 core-prim . flinteger?) (jO2ba3 core-prim . flinfinite?) (jO2ba2 core-prim . flfloor) (jO2ba1 core-prim . flfinite?) (jO2ba0 core-prim . flexpt) (jO2b9f core-prim . flexp) (jO2b9e core-prim . fleven?) (jO2b9d core-prim . fldiv0-and-mod0) (jO2b9c core-prim . fldiv0) (jO2b9b core-prim . fldiv-and-mod) (jO2b9a core-prim . fldiv) (jO2b99 core-prim . fldenominator) (jO2b98 core-prim . flcos) (jO2b97 core-prim . flceiling) (jO2b96 core-prim . flatan) (jO2b95 core-prim . flasin) (jO2b94 core-prim . flacos) (jO2b93 core-prim . flabs) (jO2b92 core-prim . fl>?) (jO2b91 core-prim . fl>=?) (jO2b90 core-prim . fl=?) (jO2b8f core-prim . fl<?) (jO2b8e core-prim . fl<=?) (jO2b8d core-prim . fl/) (jO2b8c core-prim . fl-) (jO2b8b core-prim . fl+) (jO2b8a core-prim . fl*) (jO2b89 core-prim . fixnum->flonum) (jO2b88 core-prim . fxzero?) (jO2b87 core-prim . fxxor) (jO2b86 core-prim . fxrotate-bit-field) (jO2b85 core-prim . fxreverse-bit-field) (jO2b84 core-prim . fxpositive?) (jO2b83 core-prim . fxodd?) (jO2b82 core-prim . fxnot) (jO2b81 core-prim . fxnegative?) (jO2b80 core-prim . fxmod0) (jO2b7f core-prim . fxmod) (jO2b7e core-prim . fxmin) (jO2b7d core-prim . fxmax) (jO2b7c core-prim . fxlength) (jO2b7b core-prim . fxior) (jO2b7a core-prim . fxif) (jO2b79 core-prim . fxfirst-bit-set) (jO2b78 core-prim . fxeven?) (jO2b77 core-prim . fxdiv0-and-mod0) (jO2b76 core-prim . fxdiv0) (jO2b75 core-prim . fxdiv-and-mod) (jO2b74 core-prim . fxdiv) (jO2b73 core-prim . fxcopy-bit-field) (jO2b72 core-prim . fxcopy-bit) (jO2b71 core-prim . fxbit-set?) (jO2b70 core-prim . fxbit-field) (jO2b6f core-prim . fxbit-count) (jO2b6e core-prim . fxarithmetic-shift-right) (jO2b6d core-prim . fxarithmetic-shift-left) (jO2b6c core-prim . fxarithmetic-shift) (jO2b6b core-prim . fxand) (jO2b6a core-prim . fx>?) (jO2b69 core-prim . fx>=?) (jO2b68 core-prim . fx=?) (jO2b67 core-prim . fx<?) (jO2b66 core-prim . fx<=?) (jO2b65 core-prim . fx-/carry) (jO2b64 core-prim . fx-) (jO2b63 core-prim . fx+/carry) (jO2b62 core-prim . fx+) (jO2b61 core-prim . fx*/carry) (jO2b60 core-prim . fx*) (jO2b5f core-prim . greatest-fixnum) (jO2b5e core-prim . least-fixnum) (jO2b5d core-prim . fixnum-width) (jO2b5c core-prim . fixnum?) (jO2b5b core-prim . bitwise-rotate-bit-field) (jO2b5a core-prim . bitwise-reverse-bit-field) (jO2b59 core-prim . bitwise-length) (jO2b58 core-prim . bitwise-if) (jO2b57 core-prim . bitwise-first-bit-set) (jO2b56 core-prim . bitwise-copy-bit-field) (jO2b55 core-prim . bitwise-copy-bit) (jO2b54 core-prim . bitwise-bit-set?) (jO2b53 core-prim . bitwise-bit-field) (jO2b52 core-prim . bitwise-bit-count) (jO2b51 core-prim . bitwise-xor) (jO2b50 core-prim . bitwise-ior) (jO2b4f core-prim . bitwise-and) (jO2b4e core-prim . bitwise-not) (jO2b4d core-prim . bitwise-arithmetic-shift-right) (jO2b4c core-prim . bitwise-arithmetic-shift-left) (jO2b4b core-prim . bitwise-arithmetic-shift) (jO2b4a core-prim . zero?) (jO2b49 core-prim . vector?) (jO2b48 core-prim . vector-set!) (jO2b47 core-prim . vector-ref) (jO2b46 core-prim . vector-map) (jO2b45 core-prim . vector-length) (jO2b44 core-prim . vector-for-each) (jO2b43 core-prim . vector-fill!) (jO2b42 core-prim . vector->list) (jO2b41 core-prim . vector) (jO2b40 core-prim . values) (jO2b3f core-prim . truncate) (jO2b3e core-prim . tan) (jO2b3d core-prim . symbol?) (jO2b3c core-prim . symbol=?) (jO2b3b core-prim . symbol->string) (jO2b3a core-prim . substring) (jO2b39 core-prim . string?) (jO2b38 core-prim . string>?) (jO2b37 core-prim . string>=?) (jO2b36 core-prim . string=?) (jO2b35 core-prim . string<?) (jO2b34 core-prim . string<=?) (jO2b33 core-prim . string-ref) (jO2b32 core-prim . string-length) (jO2b31 core-prim . string-for-each) (jO2b30 core-prim . string-copy) (jO2b2f core-prim . string-append) (jO2b2e core-prim . string->symbol) (jO2b2d core-prim . string->number) (jO2b2c core-prim . string->list) (jO2b2b core-prim . string) (jO2b2a core-prim . sqrt) (jO2b29 core-prim . sin) (jO2b28 core-prim . round) (jO2b27 core-prim . reverse) (jO2b26 core-prim . real?) (jO2b25 core-prim . real-valued?) (jO2b24 core-prim . real-part) (jO2b23 core-prim . rationalize) (jO2b22 core-prim . rational?) (jO2b21 core-prim . rational-valued?) (jO2b20 core-prim . procedure?) (jO2b1f core-prim . positive?) (jO2b1e core-prim . pair?) (jO2b1d core-prim . odd?) (jO2b1c core-prim . numerator) (jO2b1b core-prim . number?) (jO2b1a core-prim . number->string) (jO2b19 core-prim . null?) (jO2b18 core-prim . not) (jO2b17 core-prim . negative?) (jO2b16 core-prim . nan?) (jO2b15 core-prim . min) (jO2b14 core-prim . max) (jO2b13 core-prim . map) (jO2b12 core-prim . make-vector) (jO2b11 core-prim . make-string) (jO2b10 core-prim . make-rectangular) (jO2b0f core-prim . make-polar) (jO2b0e core-prim . magnitude) (jO2b0d core-prim . log) (jO2b0c core-prim . list?) (jO2b0b core-prim . list-tail) (jO2b0a core-prim . list-ref) (jO2b09 core-prim . list->vector) (jO2b08 core-prim . list->string) (jO2b07 core-prim . list) (jO2b06 core-prim . length) (jO2b05 core-prim . lcm) (jO2b04 core-prim . integer?) (jO2b03 core-prim . integer-valued?) (jO2b02 core-prim . integer->char) (jO2b01 core-prim . infinite?) (jO2b00 core-prim . inexact?) (jO2aff core-prim . inexact) (jO2afe core-prim . imag-part) (jO2afd core-prim . gcd) (jO2afc core-prim . for-each) (jO2afb core-prim . floor) (jO2afa core-prim . finite?) (jO2af9 core-prim . expt) (jO2af8 core-prim . exp) (jO2af7 core-prim . exact?) (jO2af6 core-prim . exact-integer-sqrt) (jO2af5 core-prim . exact) (jO2af4 core-prim . even?) (jO2af3 core-prim . error) (jO2af2 core-prim . eqv?) (jO2af1 core-prim . equal?) (jO2af0 core-prim . eq?) (jO2aef core-prim . dynamic-wind) (jO2aee core-prim . div0-and-mod0) (jO2aed core-prim . mod0) (jO2aec core-prim . div0) (jO2aeb core-prim . div-and-mod) (jO2aea core-prim . mod) (jO2ae9 core-prim . div) (jO2ae8 core-prim . denominator) (jO2ae7 core-prim . cos) (jO2ae6 core-prim . cons) (jO2ae5 core-prim . complex?) (jO2ae4 core-prim . char?) (jO2ae3 core-prim . char>?) (jO2ae2 core-prim . char>=?) (jO2ae1 core-prim . char=?) (jO2ae0 core-prim . char<?) (jO2adf core-prim . char<=?) (jO2ade core-prim . char->integer) (jO2add core-prim . ceiling) (jO2adc core-prim . call-with-values) (jO2adb core-prim . call/cc) (jO2ada core-prim . call-with-current-continuation) (jO2ad9 core-prim . cddddr) (jO2ad8 core-prim . cdddar) (jO2ad7 core-prim . cddadr) (jO2ad6 core-prim . cddaar) (jO2ad5 core-prim . cdaddr) (jO2ad4 core-prim . cdadar) (jO2ad3 core-prim . cdaadr) (jO2ad2 core-prim . cdaaar) (jO2ad1 core-prim . cadddr) (jO2ad0 core-prim . caddar) (jO2acf core-prim . cadadr) (jO2ace core-prim . cadaar) (jO2acd core-prim . caaddr) (jO2acc core-prim . caadar) (jO2acb core-prim . caaadr) (jO2aca core-prim . caaaar) (jO2ac9 core-prim . cdddr) (jO2ac8 core-prim . cddar) (jO2ac7 core-prim . cdadr) (jO2ac6 core-prim . cdaar) (jO2ac5 core-prim . caddr) (jO2ac4 core-prim . cadar) (jO2ac3 core-prim . caadr) (jO2ac2 core-prim . caaar) (jO2ac1 core-prim . cddr) (jO2ac0 core-prim . cdar) (jO2abf core-prim . cadr) (jO2abe core-prim . caar) (jO2abd core-prim . cdr) (jO2abc core-prim . car) (jO2abb core-prim . boolean?) (jO2aba core-prim . boolean=?) (jO2ab9 core-prim . atan) (jO2ab8 core-prim . assertion-violation) (jOe51 core-prim . assertion-error) (jO2ab7 core-prim . asin) (jO2ab6 core-prim . apply) (jO2ab5 core-prim . append) (jO2ab4 core-prim . angle) (jO2ab3 core-prim . acos) (jO2ab2 core-prim . abs) (jO2ab1 core-prim . /) (jO2ab0 core-prim . *) (jO2aaf core-prim . -) (jO2aae core-prim . +) (jO2aad core-prim . >=) (jO2aac core-prim . >) (jO2aab core-prim . =) (jO2aaa core-prim . <=) (jO2aa9 core-prim . <) (jO2aa8 core-prim . library) (jO2aa7 $core-rtd &no-nans-rtd &no-nans-rcd) (jO2aa6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (jO2aa5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (jO2aa4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (jO2aa3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (jO2aa2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (jO2aa1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (jO2aa0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (jO2a9f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (jO2a9e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (jO2a9d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (jO2a9c $core-rtd &i/o-write-rtd &i/o-write-rcd) (jO2a9b $core-rtd &i/o-read-rtd &i/o-read-rcd) (jO2a9a $core-rtd &i/o-rtd &i/o-rcd) (jO2a99 $core-rtd &undefined-rtd &undefined-rcd) (jO2a98 $core-rtd &syntax-rtd &syntax-rcd) (jO2a97 $core-rtd &lexical-rtd &lexical-rcd) (jO2a96 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (jO2a95 $core-rtd &non-continuable-rtd &non-continuable-rcd) (jO2a94 $core-rtd &who-rtd &who-rcd) (jO2a93 $core-rtd &irritants-rtd &irritants-rcd) (jO2a92 $core-rtd &assertion-rtd &assertion-rcd) (jO2a91 $core-rtd &violation-rtd &violation-rcd) (jO2a90 $core-rtd &error-rtd &error-rcd) (jO2a8f $core-rtd &serious-rtd &serious-rcd) (jO2a8e $core-rtd &warning-rtd &warning-rcd) (jO2a8d $core-rtd &message-rtd &message-rcd) (jO2a8c $core-rtd &condition-rtd &condition-rcd) (jO2a8b macro . define-condition-type) (jO2a8a macro . define-enumeration) (jO2a89 macro . define-record-type) (jO2a88 macro . parent-rtd) (jO2a87 macro . nongenerative) (jO2a86 macro . opaque) (jO2a85 macro . sealed) (jO2a84 macro . protocol) (jO2a83 macro . parent) (jO2a82 macro . immutable) (jO2a81 macro . mutable) (jO2a80 macro . fields) (jO2a7f macro . error-handling-mode) (jO2a7e macro . file-options) (jO2a7d macro . buffer-mode) (jO2a7c macro . eol-style) (jO2a7b macro . guard) (jO2a7a macro . trace-define) (jO2a79 macro . trace-lambda) (jO2a78 macro . unsyntax-splicing) (jO2a77 macro . unsyntax) (jO2a76 macro . unquote-splicing) (jO2a75 macro . unquote) (jO2a74 macro . _) (jO2a73 macro . else) (jO2a72 macro . =>) (jO2a71 macro . ...) (jO2a70 macro . assert) (jO2a6f macro . endianness) (jO2a6e macro . delay) (jO2a6d macro . time) (jO2a6c macro . do) (jO2a6b macro . cond) (jO2a6a macro . let*) (jO2a69 macro . let*-values) (jO2a68 macro . let-values) (jO2a67 macro . identifier-syntax) (jO2a66 macro . with-syntax) (jO2a65 macro . quasisyntax) (jO2a64 macro . quasiquote) (jO2a63 macro . syntax-rules) (jO2a62 macro . include) (jO2a61 macro . define-struct) (jO2a60 core-macro . record-constructor-descriptor) (jO2a5f core-macro . record-type-descriptor) (jO2a5e macro . case) (jO2a5d macro . parameterize) (jO2a5c macro . unless) (jO2a5b macro . when) (jO2a5a core-macro . or) (jO2a59 core-macro . and) (jO2a58 core-macro . if) (jO2a57 core-macro . let) (jO2a56 core-macro . letrec*) (jO2a55 core-macro . letrec) (jO2a54 core-macro . type-descriptor) (jO2a53 core-macro . case-lambda) (jO2a52 core-macro . lambda) (jO2a51 core-macro . syntax) (jO2a50 core-macro . syntax-case) (jO2a4f core-macro . quote) (jO2a4e core-macro . foreign-call) (jO2a4d letrec-syntax) (jO2a4c let-syntax) (jO2a4b set!) (jO2a4a import) (jO2a49 begin) (jO2a48 module) (jO2a47 define-syntax) (jO2a46 define)) values values '#f '#f '#f '#f) (jO98b@jO7d7@install-library 'jO2e06 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . jO2dad) (eval-core . jO2dac) (set-symbol-value! . jO2dab) (symbol-value . jO2daa) (gensym . jO2da9) (void . jO2da8)) '() values values '#f '#f '#f '#f) (jO98b@jO7d7@install-library 'jO2e07 '(mosh) '() '() '() '() '((set-symbol-value! . jO2dab) (symbol-value . jO2daa) (regexp? . jO2da6) (read-line . jO2da5) (ungensym . jO2da3) (alist->eq-hash-table . jO2da2) (assoc-ref . jO2da1) (print . jO2da0) (format . jO2d9f) (host-os . jO2d9e) (library-path . jO7b6) (standard-library-path . jO2d9d) (file-newer? . jO2d9c) (stat-mtime . jO2d9b) (digit->integer . jO2d97) (call-with-string-input-port . jO2d96) (call-with-string-io . jO2d95) (string-split . jO2d94) (bytevector-for-each . jO2d93) (string->regexp . jO2d92) (rxmatch . jO2d91) (regexp-replace-all . jO2d90) (hashtable-for-each . jO2d8f) (set-current-directory! . jO2d8a) (expand-path . jO2d89) (current-directory . jO2d88) (p . jO2d49) (get-timeofday . jO2d30) (get-command-line . jO2d2f) (sys-display . jO2d2e) (whereis . jO2d2d) (register . jO2d2c) (vm-join! . jO2d2b) (vm-set-value! . jO2d2a) (vm? . jO2d29) (main-vm? . jO2d28) (vm-eval . jO2d27) (vm-self . jO2d26) (vm-start! . jO2d25) (make-vm . jO2d24) (mutex-try-lock! . jO2d23) (mutex-unlock! . jO2d22) (mutex-lock! . jO2d21) (mutex? . jO2d20) (make-mutex . jO2d1f) (condition-variable-notify-all! . jO2d1e) (condition-variable-notify! . jO2d1d) (condition-variable-wait! . jO2d1c) (make-condition-variable . jO2d1b) (write/ss . jO2d1a) (mosh-executable-path . jO2d19) (make-file-options . jO2d18) (source-info . jO2d17) (make-compiler-instruction . jO2d16) (make-instruction . jO2d15) (set-source-info! . jO2d14) (bignum? . jO2d13) (fast-equal? . jO2d12) (fasl-read . jO2d11) (fasl-write . jO2d10) (time-usage . jO2d0f) (os-constant . jO2d0e) (time . jO2a6d) (include . jO2a62)) '() values values '#f '#f '#f '#f) (jO98b@jO7d7@install-library 'jO2e08 '(system) '() '() '() '() '((gensym-prefix-set! . jO2da4) (write-to-file . jO2d9a) (file->list . jO2d99) (file->string . jO2d98) (mosh-cache-dir . jO5a0) (call-process . jO2d8e) (local-tz-offset . jO2d8d) (microseconds . jO2d8c) (directory-list . jO2d8b) (expand-path . jO2d89) (%spawn . jO2d87) (%waitpid . jO2d86) (simple-struct-name . jO2d85) (simple-struct-set! . jO2d84) (simple-struct-ref . jO2d83) (make-simple-struct . jO2d82) (simple-struct? . jO2d81) (pointer-ref-c-int64 . jO2d80) (pointer-ref-c-int32 . jO2d7f) (pointer-ref-c-int16 . jO2d7e) (pointer-ref-c-int8 . jO2d7d) (pointer-ref-c-uint64 . jO2d7c) (pointer-ref-c-uint32 . jO2d7b) (pointer-ref-c-uint16 . jO2d7a) (pointer-ref-c-uint8 . jO2d79) (pointer-set-c-uint64! . jO2d78) (pointer-set-c-uint32! . jO2d77) (pointer-set-c-uint16! . jO2d76) (pointer-set-c-uint8! . jO2d75) (pointer-set-c-int64! . jO2d74) (pointer-set-c-int32! . jO2d73) (pointer-set-c-int16! . jO2d72) (pointer-set-c-int8! . jO2d71) (pointer-set-c-pointer! . jO2d70) (pointer-set-c-double! . jO2d6f) (pointer-set-c-float! . jO2d6e) (pointer-set-c-long-long! . jO2d6d) (pointer-set-c-long! . jO2d6c) (pointer-set-c-int! . jO2d6b) (pointer-set-c-short! . jO2d6a) (pointer-set-c-char! . jO2d69) (pointer-ref-c-pointer . jO2d68) (pointer-ref-c-double . jO2d67) (pointer-ref-c-float . jO2d66) (pointer-ref-c-unsigned-long-long . jO2d65) (pointer-ref-c-signed-long-long . jO2d64) (pointer-ref-c-unsigned-long . jO2d63) (pointer-ref-c-signed-long . jO2d62) (pointer-ref-c-unsigned-int . jO2d61) (pointer-ref-c-signed-int . jO2d60) (pointer-ref-c-unsigned-short . jO2d5f) (pointer-ref-c-signed-short . jO2d5e) (pointer-ref-c-unsigned-char . jO2d5d) (pointer-ref-c-signed-char . jO2d5c) (pointer->integer . jO2d5b) (integer->pointer . jO2d5a) (pointer? . jO2d59) (shared-errno . jO2d58) (%ffi-free-c-callback-trampoline . jO2d57) (%ffi-make-c-callback-trampoline . jO2d56) (%ffi-free . jO2d55) (%ffi-malloc . jO2d54) (%ffi-supported? . jO2d53) (%ffi-pointer->string . jO2d52) (%ffi-call . jO2d51) (%ffi-lookup . jO2d50) (%ffi-open . jO2d4f) (null-terminated-utf8->string . jO2d4e) (null-terminated-bytevector->string . jO2d4d) (%exec . jO2d4c) (%fork . jO2d4b) (%pipe . jO2d4a) (open-output-string . jO2d48) (get-output-string . jO2d47) (file-stat-ctime . jO2d46) (file-stat-atime . jO2d45) (file-stat-mtime . jO2d44) (file-size-in-bytes . jO2d43) (file-writable? . jO2d42) (file-executable? . jO2d41) (file-readable? . jO2d40) (file-regular? . jO2d3f) (file-symbolic-link? . jO2d3e) (file-directory? . jO2d3d) (create-symbolic-link . jO2d3c) (rename-file . jO2d3b) (delete-directory . jO2d3a) (create-directory . jO2d39) (create-mosh-cache-dir . jO2d38) (get-environment-variables . jO2d37) (current-exception-handler . jO2d36) (get-environment-variable . jO2d35) (join-wraps . jO2d34) (id->real-label . jO2d33) (same-marks? . jO2d32) (same-marks*? . jO2d31) (disasm . jO2d0d) (make-parameter . jO59e) (socket-port . jO2d0c) (socket-shutdown . jO2d0b) (socket-close . jO2d0a) (socket-send . jO2d09) (socket-recv! . jO2d08) (socket-recv . jO2d07) (make-server-socket . jO2d06) (make-client-socket . jO2d05) (socket-accept . jO2d04) (socket? . jO2d03) (parameterize . jO2a5d)) '() values values '#f '#f '#f '#f)))
(begin (set! jO28c5@ref (unspecified)) (set! jO28c7@x* (unspecified)) (set! jO28c9@add-library-path! (unspecified)) (set! jO28cb@parse-and-add-library-path (unspecified)) (set! jO28cd@for-each-with-index (unspecified)) (set! jO28cf@rpad (unspecified)) (set! jO28d1@condition-printer (unspecified)) (set! jO28d3@record->field-alist (unspecified)) (set! jO28d5@map-with-index (unspecified)) (set! jO28d7@repl (unspecified)) (set! jO28d9@trace-printer (unspecified)) (set! jO28db@command-line (unspecified)) (set! jO28dd@local-library-path (unspecified)) (set! jO28df@load/args (unspecified)) (set! jO28e1@load (unspecified)) (set! jO28e3@ironscheme-build (unspecified)) (set! jO28e5@eval-top-level (unspecified)) (set! jO28e7@compile-system-libraries (unspecified)) (set! jO28e9@compile (unspecified)) (set! jO28eb@compile->closure (unspecified)) (set! jO28ed@pre-compile-r6rs-file (unspecified)) (set! jO28ef@load-r6rs-top-level (unspecified)) (set! jO28f1@load-r6rs-top-level-sexp (unspecified)) (set! jO28f3@prefix-inc (unspecified)) (set! jO28f5@prefix-inc! (unspecified)) (set! jO28c5@ref (lambda (jO2930@rtd jO2931@i jO2932@x) (let ((jO2936@val ((record-accessor jO2930@rtd jO2931@i) jO2932@x))) (if (symbol? jO2936@val) (ungensym jO2936@val) jO2936@val)))) (set! jO2a2c@jO28c5@ref jO28c5@ref) (set! jO28c7@x* '()) (set! jO2a2d@jO28c7@x* jO28c7@x*) (set! jO28c9@add-library-path! (lambda (jO2938@path) (jO97b@jO7b7@library-path (append (jO97b@jO7b7@library-path) (list jO2938@path))))) (set! jO2a2e@jO28c9@add-library-path! jO28c9@add-library-path!) (set! jO28cb@parse-and-add-library-path (lambda (jO293a@paths jO293b@message) (letrec* ((jO293f@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((jO2940@t jO293a@paths)) (if jO2940@t ((lambda (jO2942@paths) (for-each (lambda (jO2944@path) (if (file-exists? jO2944@path) (jO28c9@add-library-path! (expand-path jO2944@path)) (format (current-error-port) jO293b@message jO2944@path))) (string-split jO2942@paths jO293f@separator))) jO2940@t) (void)))))) (set! jO2a2f@jO28cb@parse-and-add-library-path jO28cb@parse-and-add-library-path) (set! jO28cd@for-each-with-index (lambda (jO2946@proc jO2947@lst) (letrec ((jO294a@loop (lambda (jO294c@i jO294d@lst) (if (null? jO294d@lst) (if '#f '#f (void)) (begin (jO2946@proc jO294c@i (car jO294d@lst)) (jO294a@loop (+ jO294c@i '1) (cdr jO294d@lst))))))) (jO294a@loop '1 jO2947@lst)))) (set! jO2a30@jO28cd@for-each-with-index jO28cd@for-each-with-index) (set! jO28cf@rpad (lambda (jO2950@str jO2951@pad jO2952@n) (let ((jO2956@rest (- jO2952@n (string-length (format '"~a" jO2950@str))))) (let jO295c@loop ((jO2958@rest jO2956@rest) (jO2959@ret (format '"~a" jO2950@str))) (if (<= jO2958@rest '0) jO2959@ret (jO295c@loop (- jO2958@rest '1) (string-append jO2959@ret jO2951@pad))))))) (set! jO2a31@jO28cf@rpad jO28cf@rpad) (set! jO28d1@condition-printer (lambda (jO295e@e jO295f@port) (letrec* ((jO2963@max-condition-len (apply max (map (lambda (jO2974@c) (string-length (symbol->string (record-type-name (record-rtd jO2974@c))))) (simple-conditions jO295e@e))))) (begin (display '" Condition components:\n" jO295f@port) (jO28cd@for-each-with-index (lambda (jO2964@i jO2965@x) (let ((jO2968@rtd (record-rtd jO2965@x)) (jO2969@fields-alist (jO28d3@record->field-alist jO2965@x))) (begin (format jO295f@port '" ~d. ~a" jO2964@i (jO28cf@rpad (symbol->string (record-type-name jO2968@rtd)) '" " jO2963@max-condition-len)) (if (null? jO2969@fields-alist) (newline jO295f@port) (void)) (let jO2970@loop ((jO296c@first '#t) (jO296d@fields-alist jO2969@fields-alist)) (if (null? jO296d@fields-alist) '() (let ((jO2972@field (car jO296d@fields-alist))) (begin (if (not jO296c@first) (display (jO28cf@rpad '"" '" " (+ '4 jO2963@max-condition-len)) jO295f@port) (void)) (display '"       " jO295f@port) (display (car jO2972@field) jO295f@port) (display '": " jO295f@port) (write (cdr jO2972@field) jO295f@port) (newline jO295f@port) (jO2970@loop '#f (cdr jO296d@fields-alist))))))))) (simple-conditions jO295e@e)))))) (set! jO2a32@jO28d1@condition-printer jO28d1@condition-printer) (set! jO28d3@record->field-alist (lambda (jO2976@r) (letrec* ((jO2979@ref (lambda (jO2984@rtd jO2985@i jO2986@x) (let ((jO298a@val ((record-accessor jO2984@rtd jO2985@i) jO2986@x))) (if (symbol? jO298a@val) (ungensym jO298a@val) jO298a@val))))) (let jO297e@loop ((jO297a@ret '()) (jO297b@rtd (record-rtd jO2976@r))) (if jO297b@rtd (jO297e@loop (append jO297a@ret (jO28d5@map-with-index (lambda (jO2980@i jO2981@field) (cons jO2981@field (jO2979@ref jO297b@rtd jO2980@i jO2976@r))) (vector->list (record-type-field-names jO297b@rtd)))) (record-type-parent jO297b@rtd)) jO297a@ret))))) (set! jO2a33@jO28d3@record->field-alist jO28d3@record->field-alist) (set! jO28d5@map-with-index (lambda (jO298c@proc jO298d@lst) (let jO2996@loop ((jO2990@i '0) (jO2991@lst jO298d@lst) (jO2992@ret '())) (if (null? jO2991@lst) (reverse jO2992@ret) (jO2996@loop (+ jO2990@i '1) (cdr jO2991@lst) (cons (jO298c@proc jO2990@i (car jO2991@lst)) jO2992@ret)))))) (set! jO2a34@jO28d5@map-with-index jO28d5@map-with-index) (set! jO28d7@repl (lambda jO2998@x (letrec* ((jO299b@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (jO299e@jO299c) (lambda () (with-exception-handler (lambda (jO29a0@e) ((call/cc (lambda (jO29a2@jO299d) (jO299e@jO299c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? jO29a0@e) (jO28d1@condition-printer jO29a0@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" jO29a0@e))) (jO29a2@jO299d (lambda () (raise-continuable jO29a0@e)))))))))) (lambda () (let jO29a8@loop ((jO29a4@line (get-line (current-input-port))) (jO29a5@accum '"")) (letrec* ((jO29ab@parentheses-ok? (lambda (jO29b6@text) (let jO29be@loop ((jO29b8@chars (string->list jO29b6@text)) (jO29b9@p0 '0) (jO29ba@p1 '0)) (if (null? jO29b8@chars) (= '0 jO29b9@p0 jO29ba@p1) (let ((jO29c0@t (car jO29b8@chars))) (if (memv jO29c0@t '(#\()) (jO29be@loop (cdr jO29b8@chars) (+ jO29b9@p0 '1) jO29ba@p1) (if (memv jO29c0@t '(#\))) (jO29be@loop (cdr jO29b8@chars) (- jO29b9@p0 '1) jO29ba@p1) (if (memv jO29c0@t '(#\[)) (jO29be@loop (cdr jO29b8@chars) jO29b9@p0 (+ jO29ba@p1 '1)) (if (memv jO29c0@t '(#\])) (jO29be@loop (cdr jO29b8@chars) jO29b9@p0 (- jO29ba@p1 '1)) (jO29be@loop (cdr jO29b8@chars) jO29b9@p0 jO29ba@p1)))))))))) (jO29ad@eval-string-print (lambda (jO29b0@text) (if (not (or (string=? '"\n" jO29b0@text) (= '0 (string-length jO29b0@text)))) (call-with-values (lambda () (jO28e5@eval-top-level (call-with-port (open-string-input-port jO29b0@text) read))) (lambda jO29b2@out* (for-each (lambda (jO29b4@out) (begin (write jO29b4@out) (newline))) jO29b2@out*))) (void))))) (if (eof-object? jO29a4@line) (begin (jO29ad@eval-string-print jO29a5@accum) (exit)) (let ((jO29ae@current (string-append jO29a5@accum jO29a4@line))) (if (jO29ab@parentheses-ok? jO29ae@current) (jO29ad@eval-string-print jO29ae@current) (jO29a8@loop (get-line (current-input-port)) jO29ae@current)))))))))))) (newline) (jO299b@rec))))) (jO299b@rec)))) (set! jO2a35@jO28d7@repl jO28d7@repl) (set! jO28d9@trace-printer (jO6c1@jO59f@make-parameter write)) (set! jO2a36@jO28d9@trace-printer jO28d9@trace-printer) (set! jO28db@command-line (jO6c1@jO59f@make-parameter (get-command-line))) (set! jO2a37@jO28db@command-line jO28db@command-line) (set! jO28dd@local-library-path (lambda (jO29c2@filename) (jO97b@jO7b7@library-path))) (set! jO2a38@jO28dd@local-library-path jO28dd@local-library-path) (set! jO28df@load/args (lambda (jO29c4@filename . jO29c6@args) (begin (apply jO28ef@load-r6rs-top-level jO29c4@filename 'load jO29c6@args) (void)))) (set! jO2a39@jO28df@load/args jO28df@load/args) (set! jO28e1@load (lambda (jO29c8@filename) (begin (apply jO28ef@load-r6rs-top-level jO29c8@filename 'load (jO28db@command-line)) (void)))) (set! jO2a3a@jO28e1@load jO28e1@load) (set! jO28e3@ironscheme-build (lambda () (jO28e1@load '"ironscheme-buildscript.ss"))) (set! jO2a3b@jO28e3@ironscheme-build jO28e3@ironscheme-build) (set! jO28e5@eval-top-level (lambda (jO29ca@x) (jO28a2@jOe38@eval jO29ca@x (jO28b9@jOe66@interaction-environment)))) (set! jO2a3c@jO28e5@eval-top-level jO28e5@eval-top-level) (set! jO28e7@compile-system-libraries (lambda () (jO28e5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! jO2a3d@jO28e7@compile-system-libraries jO28e7@compile-system-libraries) (set! jO28e9@compile (lambda (jO29cc@filename) (jO28ef@load-r6rs-top-level jO29cc@filename 'compile))) (set! jO2a3e@jO28e9@compile jO28e9@compile) (set! jO28eb@compile->closure (lambda (jO29ce@filename) (jO28ef@load-r6rs-top-level jO29ce@filename 'closure))) (set! jO2a3f@jO28eb@compile->closure jO28eb@compile->closure) (set! jO28ed@pre-compile-r6rs-file (lambda (jO29d0@filename) (jO28ef@load-r6rs-top-level jO29d0@filename 'compile))) (set! jO2a40@jO28ed@pre-compile-r6rs-file jO28ed@pre-compile-r6rs-file) (set! jO28ef@load-r6rs-top-level (lambda (jO29d2@filename jO29d3@how . jO29d6@args) (begin (jO97b@jO7b7@library-path (jO28dd@local-library-path jO29d2@filename)) (let ((jO29d8@x* (with-input-from-file jO29d2@filename (lambda () (let jO29da@f () (let ((jO29dc@x (jO6b3@jO583@read-annotated))) (if (eof-object? jO29dc@x) '() (cons jO29dc@x (jO29da@f))))))))) (let ((jO29de@t jO29d3@how)) (if (memv jO29de@t '(closure)) (jO28b8@jOe64@pre-compile-r6rs-top-level jO29d8@x*) (if (memv jO29de@t '(load)) (begin (jO28db@command-line (cons jO29d2@filename (car jO29d6@args))) (jO6c2@jO5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (jO6c2@jO5a1@mosh-cache-dir) (gensym-prefix-set! (jO28f5@prefix-inc! (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jO29e0@file) ((call/cc (lambda (jO29e4@jO29e2) (lambda () (with-exception-handler (lambda (jO29e6@c) ((call/cc (lambda (jO29e8@jO29e3) (jO29e4@jO29e2 (lambda () (if '#t '#t (jO29e8@jO29e3 (lambda () (raise-continuable jO29e6@c)))))))))) (lambda () (delete-file (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/" jO29e0@file))))))))) (directory-list (jO6c2@jO5a1@mosh-cache-dir))) (void)) (let ((jO29ea@compiled (jO28b7@jOe62@compile-r6rs-top-level jO29d8@x*))) (begin (if (and (jO6c2@jO5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jO97f@jO7bf@serialize-all jO6bc@jO595@serialize-library jO718@jO6d1@compile-core-expr) (void)) (jO29ea@compiled)))) (if (memv jO29de@t '(compile)) (begin (jO28b7@jOe62@compile-r6rs-top-level jO29d8@x*) (jO97f@jO7bf@serialize-all jO6bc@jO595@serialize-library jO718@jO6d1@compile-core-expr)) (if '#f '#f (void)))))))))) (set! jO2a41@jO28ef@load-r6rs-top-level jO28ef@load-r6rs-top-level) (set! jO28f1@load-r6rs-top-level-sexp (lambda (jO29ec@import-spec jO29ed@thunk) (let ((jO29f8@jO29f1 jO97b@jO7b7@library-path) (jO29f9@jO29f3 jO6c2@jO5a1@mosh-cache-dir) (jO29fa@jO29f5 (jO28dd@local-library-path '"")) (jO29fb@jO29f7 (create-mosh-cache-dir))) (let ((jO2a00@swap (lambda () (begin (let ((jO2a02@t (jO29f8@jO29f1))) (begin (jO29f8@jO29f1 jO29fa@jO29f5) (set! jO29fa@jO29f5 jO2a02@t))) (let ((jO2a04@t (jO29f9@jO29f3))) (begin (jO29f9@jO29f3 jO29fb@jO29f7) (set! jO29fb@jO29f7 jO2a04@t))))))) (dynamic-wind jO2a00@swap (lambda () (begin (if (jO6c2@jO5a1@mosh-cache-dir) (gensym-prefix-set! (jO28f5@prefix-inc! (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((jO2a0a@jO2a07 jO28db@command-line) (jO2a0b@jO2a09 '())) (let ((jO2a0e@swap (lambda () (let ((jO2a10@t (jO2a0a@jO2a07))) (begin (jO2a0a@jO2a07 jO2a0b@jO2a09) (set! jO2a0b@jO2a09 jO2a10@t)))))) (dynamic-wind jO2a0e@swap (lambda () ((jO28b7@jOe62@compile-r6rs-top-level (list (cons 'import jO29ec@import-spec) (list jO29ed@thunk))))) jO2a0e@swap))))) jO2a00@swap))))) (set! jO2a42@jO28f1@load-r6rs-top-level-sexp jO28f1@load-r6rs-top-level-sexp) (set! jO28f3@prefix-inc (lambda (jO2a12@prefix-string) (let ((jO2a14@prefix (symbol->string jO2a12@prefix-string))) (let ((jO2a16@len (string-length jO2a14@prefix))) (let jO2a1e@loop ((jO2a18@i (- jO2a16@len '1)) (jO2a19@carry? '#t) (jO2a1a@accum '())) (if (< jO2a18@i '0) (string->symbol (list->string (if jO2a19@carry? (cons '#\a jO2a1a@accum) jO2a1a@accum))) (if jO2a19@carry? (let ((jO2a20@next-integer (+ '1 (char->integer (string-ref jO2a14@prefix jO2a18@i))))) (if (= jO2a20@next-integer '123) (jO2a1e@loop (- jO2a18@i '1) '#f (cons '#\A jO2a1a@accum)) (if (= jO2a20@next-integer '91) (jO2a1e@loop (- jO2a18@i '1) '#t (cons '#\a jO2a1a@accum)) (jO2a1e@loop (- jO2a18@i '1) '#f (cons (integer->char jO2a20@next-integer) jO2a1a@accum))))) (jO2a1e@loop (- jO2a18@i '1) '#f (cons (string-ref jO2a14@prefix jO2a18@i) jO2a1a@accum))))))))) (set! jO2a43@jO28f3@prefix-inc jO28f3@prefix-inc) (set! jO28f5@prefix-inc! (lambda (jO2a22@file) (begin (if (not (file-exists? jO2a22@file)) (call-with-output-file jO2a22@file (lambda (jO2a24@port) (write 'd jO2a24@port))) (void)) (let ((jO2a26@prefix (call-with-input-file jO2a22@file read))) (if (main-vm?) (let ((jO2a28@next-prefix (jO28f3@prefix-inc jO2a26@prefix))) (begin (call-with-port (open-file-output-port jO2a22@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (jO2a2a@port) (write jO2a28@next-prefix jO2a2a@port))) jO2a26@prefix)) jO2a26@prefix))))) (set! jO2a44@jO28f5@prefix-inc! jO28f5@prefix-inc!) (begin (jO980@jO7c1@current-precompiled-library-loader jO6bd@jO597@load-serialized-library) (set-symbol-value! 'load jO28e1@load) (set-symbol-value! 'pre-compile-r6rs-file jO28ed@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs jO28e5@eval-top-level) (set-symbol-value! 'int-env-syms jO2899@jOe26@interaction-environment-symbols) (set-symbol-value! 'expanded2core jO717@jO6cf@expanded->core) (set-symbol-value! 'trace-printer jO28d9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (jO28f6@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list jO28f6@c))))) (jO28cb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (jO28cb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (jO28c9@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (jO28c9@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (jO28c9@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((jO28f8@prefix (lambda (jO28fa@ext jO28fb@ls) (append (map (lambda (jO28fe@x) (string-append jO28fa@ext jO28fe@x)) jO28fb@ls) jO28fb@ls)))) (jO97c@jO7b9@library-extensions (jO28f8@prefix '".mosh" (jO97c@jO7b9@library-extensions)))) (current-exception-handler (lambda (jO2900@c) (begin (if (condition? jO2900@c) (jO28d1@condition-printer jO2900@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" jO2900@c)) jO2900@c))) (if ((call/cc (lambda (jO2904@jO2902) (lambda () (with-exception-handler (lambda (jO2906@c) ((call/cc (lambda (jO2908@jO2903) (jO2904@jO2902 (lambda () (if '#t '#f (jO2908@jO2903 (lambda () (raise-continuable jO2906@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (jO28f1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (jO28db@command-line)) (let ((jO2912@jO290b jO28db@command-line) (jO2913@jO290d jO6c2@jO5a1@mosh-cache-dir) (jO2914@jO290f '()) (jO2915@jO2911 (create-mosh-cache-dir))) (let ((jO291a@swap (lambda () (begin (let ((jO291c@t (jO2912@jO290b))) (begin (jO2912@jO290b jO2914@jO290f) (set! jO2914@jO290f jO291c@t))) (let ((jO291e@t (jO2913@jO290d))) (begin (jO2913@jO290d jO2915@jO2911) (set! jO2915@jO2911 jO291e@t))))))) (dynamic-wind jO291a@swap (lambda () (begin (if (jO6c2@jO5a1@mosh-cache-dir) (gensym-prefix-set! (jO28f5@prefix-inc! (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (jO28d7@repl))) jO291a@swap))) (begin (jO97b@jO7b7@library-path (jO28dd@local-library-path (car (jO28db@command-line)))) (set! jO28c7@x* (with-input-from-file (car (jO28db@command-line)) (lambda () (let jO2920@f () (let ((jO2922@x (jO6b3@jO583@read-annotated))) (if (eof-object? jO2922@x) '() (cons jO2922@x (jO2920@f)))))))) (jO28db@command-line (cons (car (jO28db@command-line)) (cdr (jO28db@command-line)))) (jO6c2@jO5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (jO6c2@jO5a1@mosh-cache-dir) (gensym-prefix-set! (jO28f5@prefix-inc! (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jO2924@file) ((call/cc (lambda (jO2928@jO2926) (lambda () (with-exception-handler (lambda (jO292a@c) ((call/cc (lambda (jO292c@jO2927) (jO2928@jO2926 (lambda () (if '#t '#t (jO292c@jO2927 (lambda () (raise-continuable jO292a@c)))))))))) (lambda () (delete-file (string-append (jO6c2@jO5a1@mosh-cache-dir) '"/" jO2924@file))))))))) (directory-list (jO6c2@jO5a1@mosh-cache-dir))) (void)) (let ((jO292e@compiled (jO28b7@jOe62@compile-r6rs-top-level jO28c7@x*))) (begin (if (and (jO6c2@jO5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jO97f@jO7bf@serialize-all jO6bc@jO595@serialize-library jO718@jO6d1@compile-core-expr) (void)) (jO292e@compiled))))))))
