;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! cg28c4@library-file-path->cache-path (unspecified)) (set! cg28c6@read-annotated (unspecified)) (set! cg28c8@annotation-stripped (unspecified)) (set! cg28ca@annotation? (unspecified)) (set! cg28cc@annotation-source (unspecified)) (set! cg28ce@annotation-expression (unspecified)) (set! cg28d0@scm->fasl (unspecified)) (set! cg28d2@fasl-save (unspecified)) (set! cg28d4@fasl-load (unspecified)) (set! cg28d6@verbose? (unspecified)) (set! cg28d8@serialize-library (unspecified)) (set! cg28da@load-serialized-library (unspecified)) (set! cg28dc@make-record-printer (unspecified)) (set! cg28de@compile-core (unspecified)) (set! cg28e0@read-library-source-file (unspecified)) (set! cg28e2@make-parameter (unspecified)) (set! cg28e4@mosh-cache-dir (unspecified)) (set! cg297a@file-options-spec (unspecified)) (set! cg28c4@library-file-path->cache-path (lambda (cg297b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cg2981@cg297e cg2982@cg2980) (let ((cg2985@extract cg2982@cg2980) (cg2986@p cg2981@cg297e)) (letrec* ((cg298a@display-hex (lambda (cg2993@n) (if (<= '0 cg2993@n '9) (display cg2993@n cg2986@p) (display (integer->char (+ (char->integer '#\a) (- cg2993@n '10))) cg2986@p))))) (begin (let cg298d@f ((cg298b@ls (string-split cg297b@x '#\/))) (if (not (null? cg298b@ls)) (begin (display '"_" cg2986@p) (for-each (lambda (cg298f@c) (if (or (char<=? '#\a cg298f@c '#\z) (char<=? '#\A cg298f@c '#\Z) (char<=? '#\0 cg298f@c '#\9) (memv cg298f@c '(#\- #\. #\_ #\~))) (display cg298f@c cg2986@p) (begin (display '"%" cg2986@p) (let ((cg2991@n (char->integer cg298f@c))) (begin (cg298a@display-hex (quotient cg2991@n '16)) (cg298a@display-hex (remainder cg2991@n '16))))))) (string->list (car cg298b@ls))) (cg298d@f (cdr cg298b@ls))) (void))) (cg2985@extract)))))))) (set! cg29f5@cg28c4@library-file-path->cache-path cg28c4@library-file-path->cache-path) (set! cg28c6@read-annotated read) (set! cg29f6@cg28c6@read-annotated cg28c6@read-annotated) (set! cg28c8@annotation-stripped (lambda (cg2995@x) (cg28ce@annotation-expression cg2995@x))) (set! cg29f7@cg28c8@annotation-stripped cg28c8@annotation-stripped) (set! cg28ca@annotation? (lambda (cg2997@x) (source-info cg2997@x))) (set! cg29f8@cg28ca@annotation? cg28ca@annotation?) (set! cg28cc@annotation-source (lambda (cg2999@x) (source-info cg2999@x))) (set! cg29f9@cg28cc@annotation-source cg28cc@annotation-source) (set! cg28ce@annotation-expression (lambda (cg299b@x) (if (pair? cg299b@x) (cons (car cg299b@x) (cdr cg299b@x)) (if (procedure? cg299b@x) (set-source-info! cg299b@x '#f) cg299b@x)))) (set! cg29fa@cg28ce@annotation-expression cg28ce@annotation-expression) (set! cg28d0@scm->fasl (lambda (cg299d@filename) (string-append (cg28e4@mosh-cache-dir) '"/" (cg28c4@library-file-path->cache-path cg299d@filename) '".mosh-fasl"))) (set! cg29fb@cg28d0@scm->fasl cg28d0@scm->fasl) (set! cg28d2@fasl-save (lambda (cg299f@filename cg29a0@obj) (call-with-port (open-file-output-port cg299f@filename) (lambda (cg29a3@port) ((symbol-value 'fasl-write!) cg29a0@obj cg29a3@port))))) (set! cg29fc@cg28d2@fasl-save cg28d2@fasl-save) (set! cg28d4@fasl-load (lambda (cg29a5@filename) (call-with-port (open-file-input-port cg29a5@filename) (symbol-value 'fasl-read!)))) (set! cg29fd@cg28d4@fasl-load cg28d4@fasl-load) (set! cg28d6@verbose? (symbol-value '%verbose)) (set! cg29fe@cg28d6@verbose? cg28d6@verbose?) (set! cg28d8@serialize-library (lambda (cg29a7@filename cg29a8@obj) (begin (if cg28d6@verbose? (format (current-error-port) '"serialize-library ~a\n..." cg29a7@filename) (void)) (let ((cg29ab@expanded2core (symbol-value 'expanded2core))) (let ((cg29ad@compile (symbol-value 'compile-w/o-halt))) (let ((cg29af@code cg29a8@obj)) (let ((cg29b1@pivot (cddddr (cddddr cg29af@code)))) (let ((cg29b3@visit (cg29ad@compile (cg29ab@expanded2core (car cg29b1@pivot))))) (begin (set-car! cg29b1@pivot cg29b3@visit) (let ((cg29b5@pivot (cdr cg29b1@pivot))) (let ((cg29b7@invoke (cg29ad@compile (cg29ab@expanded2core (car cg29b5@pivot))))) (set-car! cg29b5@pivot cg29b7@invoke))))))))) (let ((cg29b9@fasl-file (cg28d0@scm->fasl cg29a7@filename))) (begin (if (file-exists? cg29b9@fasl-file) (delete-file cg29b9@fasl-file) (void)) ((call/cc (lambda (cg29bd@cg29bb) (lambda () (with-exception-handler (lambda (cg29bf@c) ((call/cc (lambda (cg29c1@cg29bc) (cg29bd@cg29bb (lambda () (if '#t (begin (if cg28d6@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" cg29a7@filename) (void)) (if (file-exists? cg29b9@fasl-file) (delete-file cg29b9@fasl-file) (void)) '#f) (cg29c1@cg29bc (lambda () (raise-continuable cg29bf@c)))))))))) (lambda () (cg28d2@fasl-save cg29b9@fasl-file cg29a8@obj)))))))))))) (set! cg29ff@cg28d8@serialize-library cg28d8@serialize-library) (set! cg28da@load-serialized-library (lambda (cg29c3@filename cg29c4@obj) (and (cg28e4@mosh-cache-dir) (let ((cg29c7@fasl-file (cg28d0@scm->fasl cg29c3@filename))) (if (and (file-exists? cg29c7@fasl-file) ((symbol-value 'file-newer?) cg29c7@fasl-file cg29c3@filename)) (let ((cg29c9@expanded2core (symbol-value 'expanded2core))) (let ((cg29cb@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((cg29cd@code (cg28d4@fasl-load cg29c7@fasl-file))) (let ((cg29cf@pivot (cddddr (cddddr cg29cd@code)))) (let ((cg29d1@visit (car cg29cf@pivot))) (let ((cg29d3@visit-proc (lambda () (cg29cb@eval-compiled-core cg29d1@visit)))) (begin (set-car! cg29cf@pivot cg29d3@visit-proc) (let ((cg29d5@pivot (cdr cg29cf@pivot))) (let ((cg29d7@invoke (car cg29d5@pivot))) (begin (set-car! cg29d5@pivot (lambda () (cg29cb@eval-compiled-core cg29d7@invoke))) (apply cg29c4@obj cg29cd@code))))))))))) '#f))))) (set! cg2a00@cg28da@load-serialized-library cg28da@load-serialized-library) (set! cg28dc@make-record-printer (lambda (cg29d9@name cg29da@printer) (lambda cg29dd@x (begin (display '"record printer") (for-each display cg29dd@x))))) (set! cg2a01@cg28dc@make-record-printer cg28dc@make-record-printer) (set! cg28de@compile-core (lambda cg29df@x (apply error 'comile-core '"not implementated" cg29df@x))) (set! cg2a02@cg28de@compile-core cg28de@compile-core) (set! cg28e0@read-library-source-file (lambda (cg29e1@file-name) (with-input-from-file cg29e1@file-name cg28c6@read-annotated))) (set! cg2a03@cg28e0@read-library-source-file cg28e0@read-library-source-file) (set! cg28e2@make-parameter (lambda cg29f1 (let ((cg29f2 (length cg29f1))) (if (= cg29f2 '1) (apply (lambda (cg29e3@x) (cg28e2@make-parameter cg29e3@x (lambda (cg29e5@x) cg29e5@x))) cg29f1) (if (= cg29f2 '2) (apply (lambda (cg29e7@x cg29e8@fender) (let ((cg29eb@x (cg29e8@fender cg29e7@x))) (lambda cg29ef (let ((cg29f0 (length cg29ef))) (if (= cg29f0 '0) (apply (lambda () cg29eb@x) cg29ef) (if (= cg29f0 '1) (apply (lambda (cg29ed@v) (set! cg29eb@x (cg29e8@fender cg29ed@v))) cg29ef) (error #1='apply '"invalid arg count"))))))) cg29f1) (error #1# '"invalid arg count")))))) (set! cg2a04@cg28e2@make-parameter cg28e2@make-parameter) (set! cg28e4@mosh-cache-dir (cg28e2@make-parameter '#f)) (set! cg2a05@cg28e4@mosh-cache-dir cg28e4@mosh-cache-dir) (set! cg297a@file-options-spec (lambda (cg29f3@x) cg29f3@x)) (set! cg2a06@cg297a@file-options-spec cg297a@file-options-spec) (void))
(begin (set! cg2a0c@current-primitive-locations (unspecified)) (set! cg2a0e@mutable? (unspecified)) (set! cg2a10@rewriter (unspecified)) (set! cg2a12@expanded->core (unspecified)) (set! cg2a14@compile-core-expr (unspecified)) (set! cg2a16@pretty-print (unspecified)) (set! cg2a18@compile-core-expr-to-port (unspecified)) (set! cg2a0c@current-primitive-locations (cg2a04@cg28e2@make-parameter (lambda (cg2a19@x) '#f) (lambda (cg2a1b@p) cg2a1b@p))) (set! cg2a57@cg2a0c@current-primitive-locations cg2a0c@current-primitive-locations) (set! cg2a0e@mutable? (lambda (cg2a1d@x) (or (pair? cg2a1d@x) (vector? cg2a1d@x) (hashtable? cg2a1d@x)))) (set! cg2a58@cg2a0e@mutable? cg2a0e@mutable?) (set! cg2a10@rewriter (lambda (cg2a1f@quote-hack?) (letrec* ((cg2a22@f (lambda (cg2a23@x) (if (pair? cg2a23@x) (let ((cg2a25@t (car cg2a23@x))) (if (memv cg2a25@t '(quote)) (if (and cg2a1f@quote-hack? (cg2a0e@mutable? (cadr cg2a23@x))) (let ((cg2a27@g (gensym))) (begin (set-symbol-value! cg2a27@g (cadr cg2a23@x)) cg2a27@g)) cg2a23@x) (if (memv cg2a25@t '(case-lambda)) (cons 'case-lambda (map (lambda (cg2a29@x) (cons (car cg2a29@x) (map cg2a22@f (cdr cg2a29@x)))) (cdr cg2a23@x))) (if (memv cg2a25@t '(lambda)) (cons* 'lambda (cadr cg2a23@x) (map cg2a22@f (cddr cg2a23@x))) (if (memv cg2a25@t '(letrec)) (let ((cg2a2b@bindings (cadr cg2a23@x)) (cg2a2c@body* (cddr cg2a23@x))) (let ((cg2a2f@lhs* (map car cg2a2b@bindings)) (cg2a30@rhs* (map cadr cg2a2b@bindings))) (cons* 'letrec (map list cg2a2f@lhs* (map cg2a22@f cg2a30@rhs*)) (map cg2a22@f cg2a2c@body*)))) (if (memv cg2a25@t '(letrec*)) (let ((cg2a33@bindings (cadr cg2a23@x)) (cg2a34@body* (cddr cg2a23@x))) (let ((cg2a37@lhs* (map car cg2a33@bindings)) (cg2a38@rhs* (map cadr cg2a33@bindings))) (cons* 'letrec* (map list cg2a37@lhs* (map cg2a22@f cg2a38@rhs*)) (map cg2a22@f cg2a34@body*)))) (if (memv cg2a25@t '(library-letrec*)) (let ((cg2a3b@name (cadr cg2a23@x)) (cg2a3c@x (cdr cg2a23@x))) (let ((cg2a3f@bindings (cadr cg2a3c@x)) (cg2a40@body* (cddr cg2a3c@x))) (let ((cg2a43@lhs* (map car cg2a3f@bindings)) (cg2a44@lhs** (map cadr cg2a3f@bindings)) (cg2a45@rhs* (map caddr cg2a3f@bindings))) (cons* 'library-letrec* cg2a3b@name (map list cg2a43@lhs* cg2a44@lhs** (map cg2a22@f cg2a45@rhs*)) (map cg2a22@f cg2a40@body*))))) (if (memv cg2a25@t '(begin)) (cons 'begin (map cg2a22@f (cdr cg2a23@x))) (if (memv cg2a25@t '(set!)) (list 'set! (cadr cg2a23@x) (cg2a22@f (caddr cg2a23@x))) (if (memv cg2a25@t '(primitive)) (let ((cg2a49@op (cadr cg2a23@x))) (let ((cg2a4b@t ((cg2a0c@current-primitive-locations) cg2a49@op))) (if cg2a4b@t ((lambda (cg2a4d@loc) cg2a4d@loc) cg2a4b@t) cg2a49@op))) (if (memv cg2a25@t '(define)) cg2a23@x (if (list? cg2a23@x) (map cg2a22@f cg2a23@x) (error 'rewrite '"invalid form ~s ~s" cg2a23@x (list? cg2a23@x)))))))))))))) cg2a23@x)))) cg2a22@f))) (set! cg2a59@cg2a10@rewriter cg2a10@rewriter) (set! cg2a12@expanded->core (lambda (cg2a4f@x) ((cg2a10@rewriter '#f) cg2a4f@x))) (set! cg2a5a@cg2a12@expanded->core cg2a12@expanded->core) (set! cg2a14@compile-core-expr (lambda (cg2a51@x) ((cg2a10@rewriter '#f) cg2a51@x))) (set! cg2a5b@cg2a14@compile-core-expr cg2a14@compile-core-expr) (set! cg2a16@pretty-print write) (set! cg2a5c@cg2a16@pretty-print cg2a16@pretty-print) (set! cg2a18@compile-core-expr-to-port (lambda (cg2a53@x cg2a54@p) (cg2a16@pretty-print ((cg2a10@rewriter '#f) cg2a53@x) cg2a54@p))) (set! cg2a5d@cg2a18@compile-core-expr-to-port cg2a18@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! cg2aac@make-collection (unspecified)) (set! cg2aae@current-library-collection (unspecified)) (set! cg2ab0@rp (unspecified)) (set! cg2aba@library? (unspecified)) (set! cg2abc@library-id (unspecified)) (set! cg2abe@set-library-id! (unspecified)) (set! cg2ac0@library-name (unspecified)) (set! cg2ac2@set-library-name! (unspecified)) (set! cg2ac4@library-version (unspecified)) (set! cg2ac6@set-library-version! (unspecified)) (set! cg2ac8@library-imp* (unspecified)) (set! cg2aca@set-library-imp*! (unspecified)) (set! cg2acc@library-vis* (unspecified)) (set! cg2ace@set-library-vis*! (unspecified)) (set! cg2ad0@library-inv* (unspecified)) (set! cg2ad2@set-library-inv*! (unspecified)) (set! cg2ad4@library-subst (unspecified)) (set! cg2ad6@set-library-subst! (unspecified)) (set! cg2ad8@library-env (unspecified)) (set! cg2ada@set-library-env! (unspecified)) (set! cg2adc@library-visit-state (unspecified)) (set! cg2ade@set-library-visit-state! (unspecified)) (set! cg2ae0@library-invoke-state (unspecified)) (set! cg2ae2@set-library-invoke-state! (unspecified)) (set! cg2ae4@library-visit-code (unspecified)) (set! cg2ae6@set-library-visit-code! (unspecified)) (set! cg2ae8@library-invoke-code (unspecified)) (set! cg2aea@set-library-invoke-code! (unspecified)) (set! cg2aec@library-visible? (unspecified)) (set! cg2aee@set-library-visible?! (unspecified)) (set! cg2af0@library-source-file-name (unspecified)) (set! cg2af2@set-library-source-file-name! (unspecified)) (set! cg2af4@dummy (unspecified)) (set! cg2af6@find-dependencies (unspecified)) (set! cg2af8@find-library-by (unspecified)) (set! cg2afa@library-path (unspecified)) (set! cg2afc@library-extensions (unspecified)) (set! cg2afe@library-name->file-name (unspecified)) (set! cg2b00@file-locator (unspecified)) (set! cg2b02@serialize-all (unspecified)) (set! cg2b04@current-precompiled-library-loader (unspecified)) (set! cg2b06@try-load-from-file (unspecified)) (set! cg2b08@library-loader (unspecified)) (set! cg2b0a@current-library-expander (unspecified)) (set! cg2b0c@external-pending-libraries (unspecified)) (set! cg2b0e@find-external-library (unspecified)) (set! cg2b10@find-library-by-name (unspecified)) (set! cg2b12@library-exists? (unspecified)) (set! cg2b14@find-library-by-spec/die (unspecified)) (set! cg2b16@label->binding-table (unspecified)) (set! cg2b18@install-library-record (unspecified)) (set! cg2b1a@install-library (unspecified)) (set! cg2b1c@imported-label->binding (unspecified)) (set! cg2b1e@invoke-library (unspecified)) (set! cg2b20@visit-library (unspecified)) (set! cg2b22@invoke-library-by-spec (unspecified)) (set! cg2b24@installed-libraries (unspecified)) (set! cg2b26@library-spec (unspecified)) (set! cg2aac@make-collection (lambda () (let ((cg2b27@set '())) (letrec* ((cg2b2a@set-cons (lambda (cg2b2f@x cg2b30@ls) (if (memq cg2b2f@x cg2b30@ls) cg2b30@ls (cons cg2b2f@x cg2b30@ls))))) (lambda cg2b2d (let ((cg2b2e (length cg2b2d))) (if (= cg2b2e '0) (apply (lambda () cg2b27@set) cg2b2d) (if (= cg2b2e '1) (apply (lambda (cg2b2b@x) (set! cg2b27@set (cg2b2a@set-cons cg2b2b@x cg2b27@set))) cg2b2d) (error #1='apply '"invalid arg count"))))))))) (set! cg2c9b@cg2aac@make-collection cg2aac@make-collection) (set! cg2aae@current-library-collection (cg2a04@cg28e2@make-parameter (cg2aac@make-collection) (lambda (cg2b33@x) (begin (if (not (procedure? cg2b33@x)) (assertion-violation 'current-library-collection '"not a procedure" cg2b33@x) (void)) cg2b33@x)))) (set! cg2c9c@cg2aae@current-library-collection cg2aae@current-library-collection) (set! cg2ab0@rp (cg2a01@cg28dc@make-record-printer 'library (lambda (cg2b35@x cg2b36@p cg2b37@wr) (begin (if (not (cg2aba@library? cg2b35@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (cg2ac4@library-version cg2b35@x)) (cg2ac0@library-name cg2b35@x) (append (cg2ac0@library-name cg2b35@x) (list (cg2ac4@library-version cg2b35@x))))) cg2b36@p))))) (set! cg2c9d@cg2ab0@rp cg2ab0@rp) (set! cg2aba@library? (lambda (cg2b3b@x) (and (simple-struct? cg2b3b@x) (eq? (simple-struct-name cg2b3b@x) 'library)))) (set! cg2c9e@cg2aba@library? cg2aba@library?) (set! cg2abc@library-id (lambda (cg2b3d@x) (simple-struct-ref cg2b3d@x '0))) (set! cg2c9f@cg2abc@library-id cg2abc@library-id) (set! cg2abe@set-library-id! (lambda (cg2b3f@x cg2b40@val) (simple-struct-set! cg2b3f@x '0 cg2b40@val))) (set! cg2ca0@cg2abe@set-library-id! cg2abe@set-library-id!) (set! cg2ac0@library-name (lambda (cg2b43@x) (simple-struct-ref cg2b43@x '1))) (set! cg2ca1@cg2ac0@library-name cg2ac0@library-name) (set! cg2ac2@set-library-name! (lambda (cg2b45@x cg2b46@val) (simple-struct-set! cg2b45@x '1 cg2b46@val))) (set! cg2ca2@cg2ac2@set-library-name! cg2ac2@set-library-name!) (set! cg2ac4@library-version (lambda (cg2b49@x) (simple-struct-ref cg2b49@x '2))) (set! cg2ca3@cg2ac4@library-version cg2ac4@library-version) (set! cg2ac6@set-library-version! (lambda (cg2b4b@x cg2b4c@val) (simple-struct-set! cg2b4b@x '2 cg2b4c@val))) (set! cg2ca4@cg2ac6@set-library-version! cg2ac6@set-library-version!) (set! cg2ac8@library-imp* (lambda (cg2b4f@x) (simple-struct-ref cg2b4f@x '3))) (set! cg2ca5@cg2ac8@library-imp* cg2ac8@library-imp*) (set! cg2aca@set-library-imp*! (lambda (cg2b51@x cg2b52@val) (simple-struct-set! cg2b51@x '3 cg2b52@val))) (set! cg2ca6@cg2aca@set-library-imp*! cg2aca@set-library-imp*!) (set! cg2acc@library-vis* (lambda (cg2b55@x) (simple-struct-ref cg2b55@x '4))) (set! cg2ca7@cg2acc@library-vis* cg2acc@library-vis*) (set! cg2ace@set-library-vis*! (lambda (cg2b57@x cg2b58@val) (simple-struct-set! cg2b57@x '4 cg2b58@val))) (set! cg2ca8@cg2ace@set-library-vis*! cg2ace@set-library-vis*!) (set! cg2ad0@library-inv* (lambda (cg2b5b@x) (simple-struct-ref cg2b5b@x '5))) (set! cg2ca9@cg2ad0@library-inv* cg2ad0@library-inv*) (set! cg2ad2@set-library-inv*! (lambda (cg2b5d@x cg2b5e@val) (simple-struct-set! cg2b5d@x '5 cg2b5e@val))) (set! cg2caa@cg2ad2@set-library-inv*! cg2ad2@set-library-inv*!) (set! cg2ad4@library-subst (lambda (cg2b61@x) (simple-struct-ref cg2b61@x '6))) (set! cg2cab@cg2ad4@library-subst cg2ad4@library-subst) (set! cg2ad6@set-library-subst! (lambda (cg2b63@x cg2b64@val) (simple-struct-set! cg2b63@x '6 cg2b64@val))) (set! cg2cac@cg2ad6@set-library-subst! cg2ad6@set-library-subst!) (set! cg2ad8@library-env (lambda (cg2b67@x) (simple-struct-ref cg2b67@x '7))) (set! cg2cad@cg2ad8@library-env cg2ad8@library-env) (set! cg2ada@set-library-env! (lambda (cg2b69@x cg2b6a@val) (simple-struct-set! cg2b69@x '7 cg2b6a@val))) (set! cg2cae@cg2ada@set-library-env! cg2ada@set-library-env!) (set! cg2adc@library-visit-state (lambda (cg2b6d@x) (simple-struct-ref cg2b6d@x '8))) (set! cg2caf@cg2adc@library-visit-state cg2adc@library-visit-state) (set! cg2ade@set-library-visit-state! (lambda (cg2b6f@x cg2b70@val) (simple-struct-set! cg2b6f@x '8 cg2b70@val))) (set! cg2cb0@cg2ade@set-library-visit-state! cg2ade@set-library-visit-state!) (set! cg2ae0@library-invoke-state (lambda (cg2b73@x) (simple-struct-ref cg2b73@x '9))) (set! cg2cb1@cg2ae0@library-invoke-state cg2ae0@library-invoke-state) (set! cg2ae2@set-library-invoke-state! (lambda (cg2b75@x cg2b76@val) (simple-struct-set! cg2b75@x '9 cg2b76@val))) (set! cg2cb2@cg2ae2@set-library-invoke-state! cg2ae2@set-library-invoke-state!) (set! cg2ae4@library-visit-code (lambda (cg2b79@x) (simple-struct-ref cg2b79@x '10))) (set! cg2cb3@cg2ae4@library-visit-code cg2ae4@library-visit-code) (set! cg2ae6@set-library-visit-code! (lambda (cg2b7b@x cg2b7c@val) (simple-struct-set! cg2b7b@x '10 cg2b7c@val))) (set! cg2cb4@cg2ae6@set-library-visit-code! cg2ae6@set-library-visit-code!) (set! cg2ae8@library-invoke-code (lambda (cg2b7f@x) (simple-struct-ref cg2b7f@x '11))) (set! cg2cb5@cg2ae8@library-invoke-code cg2ae8@library-invoke-code) (set! cg2aea@set-library-invoke-code! (lambda (cg2b81@x cg2b82@val) (simple-struct-set! cg2b81@x '11 cg2b82@val))) (set! cg2cb6@cg2aea@set-library-invoke-code! cg2aea@set-library-invoke-code!) (set! cg2aec@library-visible? (lambda (cg2b85@x) (simple-struct-ref cg2b85@x '12))) (set! cg2cb7@cg2aec@library-visible? cg2aec@library-visible?) (set! cg2aee@set-library-visible?! (lambda (cg2b87@x cg2b88@val) (simple-struct-set! cg2b87@x '12 cg2b88@val))) (set! cg2cb8@cg2aee@set-library-visible?! cg2aee@set-library-visible?!) (set! cg2af0@library-source-file-name (lambda (cg2b8b@x) (simple-struct-ref cg2b8b@x '13))) (set! cg2cb9@cg2af0@library-source-file-name cg2af0@library-source-file-name) (set! cg2af2@set-library-source-file-name! (lambda (cg2b8d@x cg2b8e@val) (simple-struct-set! cg2b8d@x '13 cg2b8e@val))) (set! cg2cba@cg2af2@set-library-source-file-name! cg2af2@set-library-source-file-name!) (set! cg2af4@dummy '3) (set! cg2cbb@cg2af4@dummy cg2af4@dummy) (set! cg2af6@find-dependencies (lambda (cg2b91@ls) (if (null? cg2b91@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! cg2cbc@cg2af6@find-dependencies cg2af6@find-dependencies) (set! cg2af8@find-library-by (lambda (cg2b93@pred) (let cg2b97@f ((cg2b95@ls ((cg2aae@current-library-collection)))) (if (null? cg2b95@ls) '#f (if (cg2b93@pred (car cg2b95@ls)) (car cg2b95@ls) (cg2b97@f (cdr cg2b95@ls))))))) (set! cg2cbd@cg2af8@find-library-by cg2af8@find-library-by) (set! cg2afa@library-path (cg2a04@cg28e2@make-parameter '(".") (lambda (cg2b99@x) (if (and (list? cg2b99@x) (for-all string? cg2b99@x)) (map (lambda (cg2b9b@x) cg2b9b@x) cg2b99@x) (assertion-violation 'library-path '"not a list of strings" cg2b99@x))))) (set! cg2cbe@cg2afa@library-path cg2afa@library-path) (set! cg2afc@library-extensions (cg2a04@cg28e2@make-parameter '(".sls" ".ss" ".scm") (lambda (cg2b9d@x) (if (and (list? cg2b9d@x) (for-all string? cg2b9d@x)) (map (lambda (cg2b9f@x) cg2b9f@x) cg2b9d@x) (assertion-violation 'library-extensions '"not a list of strings" cg2b9d@x))))) (set! cg2cbf@cg2afc@library-extensions cg2afc@library-extensions) (set! cg2afe@library-name->file-name (lambda (cg2ba1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cg2ba7@cg2ba4 cg2ba8@cg2ba6) (let ((cg2bab@extract cg2ba8@cg2ba6) (cg2bac@p cg2ba7@cg2ba4)) (letrec* ((cg2bb0@display-hex (lambda (cg2bb9@n) (if (<= '0 cg2bb9@n '9) (display cg2bb9@n cg2bac@p) (display (integer->char (+ (char->integer '#\a) (- cg2bb9@n '10))) cg2bac@p))))) (begin (let cg2bb3@f ((cg2bb1@ls cg2ba1@x)) (if (not (null? cg2bb1@ls)) (begin (display '"/" cg2bac@p) (for-each (lambda (cg2bb5@c) (if (or (char<=? '#\a cg2bb5@c '#\z) (char<=? '#\A cg2bb5@c '#\Z) (char<=? '#\0 cg2bb5@c '#\9) (memv cg2bb5@c '(#\- #\. #\_ #\~))) (display cg2bb5@c cg2bac@p) (begin (display '"%" cg2bac@p) (let ((cg2bb7@n (char->integer cg2bb5@c))) (begin (cg2bb0@display-hex (quotient cg2bb7@n '16)) (cg2bb0@display-hex (remainder cg2bb7@n '16))))))) (string->list (symbol->string (car cg2bb1@ls)))) (cg2bb3@f (cdr cg2bb1@ls))) (void))) (cg2bab@extract)))))))) (set! cg2cc0@cg2afe@library-name->file-name cg2afe@library-name->file-name) (set! cg2b00@file-locator (cg2a04@cg28e2@make-parameter (lambda (cg2bbb@x) (let ((cg2bbd@str (cg2afe@library-name->file-name cg2bbb@x))) (let cg2bc5@f ((cg2bbf@ls (cg2afa@library-path)) (cg2bc0@exts (cg2afc@library-extensions)) (cg2bc1@failed-list '())) (if (null? cg2bbf@ls) (letrec* ((cg2bcf@cg2bca (make-record-type-descriptor '&library-resolution &condition-rtd 'cg2bcd '#f '#f '#((immutable library) (immutable files)))) (cg2bd1@cg2bcc '#f) (cg2bd3@cg2bcb (make-record-constructor-descriptor cg2bcf@cg2bca &condition-rcd cg2bd1@cg2bcc)) (cg2bd6@cg2bc9 (record-predicate cg2bcf@cg2bca)) (cg2bd8@make-library-resolution-condition (record-constructor cg2bd3@cg2bcb)) (cg2bda@cg2bc7 (record-accessor cg2bcf@cg2bca '0)) (cg2bdc@cg2bc8 (record-accessor cg2bcf@cg2bca '1)) (cg2bde@library-resolution-condition? (condition-predicate cg2bcf@cg2bca)) (cg2be0@condition-library (condition-accessor cg2bcf@cg2bca cg2bda@cg2bc7)) (cg2be2@condition-files (condition-accessor cg2bcf@cg2bca cg2bdc@cg2bc8))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (cg2bd8@make-library-resolution-condition cg2bbb@x (reverse cg2bc1@failed-list))))) (if (null? cg2bc0@exts) (cg2bc5@f (cdr cg2bbf@ls) (cg2afc@library-extensions) cg2bc1@failed-list) (let ((cg2be3@name (string-append (car cg2bbf@ls) cg2bbd@str (car cg2bc0@exts)))) (if (file-exists? cg2be3@name) cg2be3@name (cg2bc5@f cg2bbf@ls (cdr cg2bc0@exts) (cons cg2be3@name cg2bc1@failed-list))))))))) (lambda (cg2be5@f) (if (procedure? cg2be5@f) cg2be5@f (assertion-violation 'file-locator '"not a procedure" cg2be5@f))))) (set! cg2cc1@cg2b00@file-locator cg2b00@file-locator) (set! cg2b02@serialize-all (lambda (cg2be7@serialize cg2be8@compile) (letrec* ((cg2bec@library-desc (lambda (cg2bef@x) (list (cg2abc@library-id cg2bef@x) (cg2ac0@library-name cg2bef@x))))) (for-each (lambda (cg2bed@x) (if (cg2af0@library-source-file-name cg2bed@x) (cg2be7@serialize (cg2af0@library-source-file-name cg2bed@x) (list (cg2abc@library-id cg2bed@x) (cg2ac0@library-name cg2bed@x) (cg2ac4@library-version cg2bed@x) (map cg2bec@library-desc (cg2ac8@library-imp* cg2bed@x)) (map cg2bec@library-desc (cg2acc@library-vis* cg2bed@x)) (map cg2bec@library-desc (cg2ad0@library-inv* cg2bed@x)) (cg2ad4@library-subst cg2bed@x) (cg2ad8@library-env cg2bed@x) (cg2be8@compile (cg2ae4@library-visit-code cg2bed@x)) (cg2be8@compile (cg2ae8@library-invoke-code cg2bed@x)) (cg2aec@library-visible? cg2bed@x))) (void))) ((cg2aae@current-library-collection)))))) (set! cg2cc2@cg2b02@serialize-all cg2b02@serialize-all) (set! cg2b04@current-precompiled-library-loader (cg2a04@cg28e2@make-parameter (lambda (cg2bf1@filename cg2bf2@sk) '#f))) (set! cg2cc3@cg2b04@current-precompiled-library-loader cg2b04@current-precompiled-library-loader) (set! cg2b06@try-load-from-file (lambda (cg2bf5@filename) ((cg2b04@current-precompiled-library-loader) cg2bf5@filename (lambda cg2c1b (let ((cg2c1c (length cg2c1b))) (if (= cg2c1c '11) (apply (lambda (cg2bf7@id cg2bf8@name cg2bf9@ver cg2bfa@imp* cg2bfb@vis* cg2bfc@inv* cg2bfd@exp-subst cg2bfe@exp-env cg2bff@visit-proc cg2c00@invoke-proc cg2c01@visible?) (let cg2c0f@f ((cg2c0d@deps (append cg2bfa@imp* cg2bfb@vis* cg2bfc@inv*))) (if (null? cg2c0d@deps) (begin (cg2b1a@install-library cg2bf7@id cg2bf8@name cg2bf9@ver cg2bfa@imp* cg2bfb@vis* cg2bfc@inv* cg2bfd@exp-subst cg2bfe@exp-env cg2bff@visit-proc cg2c00@invoke-proc '#f '#f cg2c01@visible? '#f) '#t) (let ((cg2c11@d (car cg2c0d@deps))) (let ((cg2c13@label (car cg2c11@d)) (cg2c14@dname (cadr cg2c11@d))) (let ((cg2c17@l (cg2b10@find-library-by-name cg2c14@dname))) (if (and (cg2aba@library? cg2c17@l) (eq? cg2c13@label (cg2abc@library-id cg2c17@l))) (cg2c0f@f (cdr cg2c0d@deps)) (begin (if cg29fe@cg28d6@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" cg2bf8@name cg2c14@dname cg2bf5@filename cg2c17@l cg2c13@label (cg2abc@library-id cg2c17@l)) (void)) '#f)))))))) cg2c1b) (if (>= cg2c1c '0) (apply (lambda cg2c19@others '#f) cg2c1b) (error #1# '"invalid arg count")))))))) (set! cg2cc4@cg2b06@try-load-from-file cg2b06@try-load-from-file) (set! cg2b08@library-loader (cg2a04@cg28e2@make-parameter (lambda (cg2c1d@x) (let ((cg2c1f@file-name ((cg2b00@file-locator) cg2c1d@x))) (if (not cg2c1f@file-name) (assertion-violation '#f '"cannot file library" cg2c1d@x) (or (cg2b06@try-load-from-file cg2c1f@file-name) ((cg2b0a@current-library-expander) (cg2a03@cg28e0@read-library-source-file cg2c1f@file-name) cg2c1f@file-name (lambda (cg2c21@name) (if (not (fast-equal? cg2c21@name cg2c1d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (cg2c27@cg2c24 cg2c28@cg2c26) (let ((cg2c2b@e cg2c28@cg2c26) (cg2c2c@p cg2c27@cg2c24)) (begin (display '"expected to find library " cg2c2c@p) (write cg2c1d@x cg2c2c@p) (display '" in file " cg2c2c@p) (display cg2c1f@file-name cg2c2c@p) (display '", found " cg2c2c@p) (write cg2c21@name cg2c2c@p) (display '" instead" cg2c2c@p) (cg2c2b@e)))))) (void)))))))) (lambda (cg2c2f@f) (if (procedure? cg2c2f@f) cg2c2f@f (assertion-violation 'library-locator '"not a procedure" cg2c2f@f))))) (set! cg2cc5@cg2b08@library-loader cg2b08@library-loader) (set! cg2b0a@current-library-expander (cg2a04@cg28e2@make-parameter (lambda (cg2c31@x) (assertion-violation 'library-expander '"not initialized")) (lambda (cg2c33@f) (if (procedure? cg2c33@f) cg2c33@f (assertion-violation 'library-expander '"not a procedure" cg2c33@f))))) (set! cg2cc6@cg2b0a@current-library-expander cg2b0a@current-library-expander) (set! cg2b0c@external-pending-libraries (cg2a04@cg28e2@make-parameter '())) (set! cg2cc7@cg2b0c@external-pending-libraries cg2b0c@external-pending-libraries) (set! cg2b0e@find-external-library (lambda (cg2c35@name) (begin (if (member cg2c35@name (cg2b0c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" cg2c35@name) (void)) (let ((cg2c3b@cg2c38 cg2b0c@external-pending-libraries) (cg2c3c@cg2c3a (cons cg2c35@name (cg2b0c@external-pending-libraries)))) (let ((cg2c3f@swap (lambda () (let ((cg2c41@t (cg2c3b@cg2c38))) (begin (cg2c3b@cg2c38 cg2c3c@cg2c3a) (set! cg2c3c@cg2c3a cg2c41@t)))))) (dynamic-wind cg2c3f@swap (lambda () (begin ((cg2b08@library-loader) cg2c35@name) (or (cg2af8@find-library-by (lambda (cg2c43@x) (fast-equal? (cg2ac0@library-name cg2c43@x) cg2c35@name))) (assertion-violation '#f '"handling external library did not yield the correct library" cg2c35@name)))) cg2c3f@swap)))))) (set! cg2cc8@cg2b0e@find-external-library cg2b0e@find-external-library) (set! cg2b10@find-library-by-name (lambda (cg2c45@name) (or (cg2af8@find-library-by (lambda (cg2c47@x) (fast-equal? (cg2ac0@library-name cg2c47@x) cg2c45@name))) (cg2b0e@find-external-library cg2c45@name)))) (set! cg2cc9@cg2b10@find-library-by-name cg2b10@find-library-by-name) (set! cg2b12@library-exists? (lambda (cg2c49@name) (and (cg2af8@find-library-by (lambda (cg2c4b@x) (fast-equal? (cg2ac0@library-name cg2c4b@x) cg2c49@name))) '#t))) (set! cg2cca@cg2b12@library-exists? cg2b12@library-exists?) (set! cg2b14@find-library-by-spec/die (lambda (cg2c4d@spec) (let ((cg2c4f@id (car cg2c4d@spec))) (or (cg2af8@find-library-by (lambda (cg2c51@x) (eq? cg2c4f@id (cg2abc@library-id cg2c51@x)))) (assertion-violation '#f '"cannot find library with required spec" cg2c4d@spec))))) (set! cg2ccb@cg2b14@find-library-by-spec/die cg2b14@find-library-by-spec/die) (set! cg2b16@label->binding-table (make-eq-hashtable)) (set! cg2ccc@cg2b16@label->binding-table cg2b16@label->binding-table) (set! cg2b18@install-library-record (lambda (cg2c53@lib) (begin (let ((cg2c55@exp-env (cg2ad8@library-env cg2c53@lib))) (for-each (lambda (cg2c57@x) (let ((cg2c59@label (car cg2c57@x)) (cg2c5a@binding (cdr cg2c57@x))) (let ((cg2c5d@binding (let ((cg2c5f@t (car cg2c5a@binding))) (if (memv cg2c5f@t '(global)) (cons 'global (cons cg2c53@lib (cdr cg2c5a@binding))) (if (memv cg2c5f@t '(global-macro)) (cons 'global-macro (cons cg2c53@lib (cdr cg2c5a@binding))) (if (memv cg2c5f@t '(global-macro!)) (cons 'global-macro! (cons cg2c53@lib (cdr cg2c5a@binding))) cg2c5a@binding)))))) (begin (if (hashtable-ref cg2b16@label->binding-table cg2c59@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" cg2c59@label (hashtable-ref cg2b16@label->binding-table cg2c59@label '#f) cg2c5d@binding) (exit)) (void)) (hashtable-set! cg2b16@label->binding-table cg2c59@label cg2c5d@binding))))) cg2c55@exp-env)) ((cg2aae@current-library-collection) cg2c53@lib)))) (set! cg2ccd@cg2b18@install-library-record cg2b18@install-library-record) (set! cg2b1a@install-library (lambda (cg2c61@id cg2c62@name cg2c63@ver cg2c64@imp* cg2c65@vis* cg2c66@inv* cg2c67@exp-subst cg2c68@exp-env cg2c69@visit-proc cg2c6a@invoke-proc cg2c6b@visit-code cg2c6c@invoke-code cg2c6d@visible? cg2c6e@source-file-name) (let ((cg2c7d@imp-lib* (map cg2b14@find-library-by-spec/die cg2c64@imp*)) (cg2c7e@vis-lib* (map cg2b14@find-library-by-spec/die cg2c65@vis*)) (cg2c7f@inv-lib* (map cg2b14@find-library-by-spec/die cg2c66@inv*))) (begin (if (not (and (symbol? cg2c61@id) (list? cg2c62@name) (list? cg2c63@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" cg2c61@id cg2c62@name cg2c63@ver) (void)) (if (cg2b12@library-exists? cg2c62@name) (assertion-violation 'install-library '"library is already installed" cg2c62@name) (void)) (let ((cg2c83@lib (make-simple-struct 'library '15 (list cg2c61@id cg2c62@name cg2c63@ver cg2c7d@imp-lib* cg2c7e@vis-lib* cg2c7f@inv-lib* cg2c67@exp-subst cg2c68@exp-env cg2c69@visit-proc cg2c6a@invoke-proc cg2c6b@visit-code cg2c6c@invoke-code cg2c6d@visible? cg2c6e@source-file-name)))) (cg2b18@install-library-record cg2c83@lib)))))) (set! cg2cce@cg2b1a@install-library cg2b1a@install-library) (set! cg2b1c@imported-label->binding (lambda (cg2c85@lab) (hashtable-ref cg2b16@label->binding-table cg2c85@lab '#f))) (set! cg2ccf@cg2b1c@imported-label->binding cg2b1c@imported-label->binding) (set! cg2b1e@invoke-library (lambda (cg2c87@lib) (let ((cg2c89@invoke (cg2ae0@library-invoke-state cg2c87@lib))) (if (procedure? cg2c89@invoke) (begin (cg2ae2@set-library-invoke-state! cg2c87@lib (lambda () (assertion-violation 'invoke '"circularity detected" cg2c87@lib))) (for-each cg2b1e@invoke-library (cg2ad0@library-inv* cg2c87@lib)) (cg2ae2@set-library-invoke-state! cg2c87@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" cg2c87@lib))) (cg2c89@invoke) (cg2ae2@set-library-invoke-state! cg2c87@lib '#t)) (void))))) (set! cg2cd0@cg2b1e@invoke-library cg2b1e@invoke-library) (set! cg2b20@visit-library (lambda (cg2c8b@lib) (let ((cg2c8d@visit (cg2adc@library-visit-state cg2c8b@lib))) (if (procedure? cg2c8d@visit) (begin (cg2ade@set-library-visit-state! cg2c8b@lib (lambda () (assertion-violation 'visit '"circularity detected" cg2c8b@lib))) (for-each cg2b1e@invoke-library (cg2acc@library-vis* cg2c8b@lib)) (cg2ade@set-library-visit-state! cg2c8b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" cg2c8b@lib))) (cg2c8d@visit) (cg2ade@set-library-visit-state! cg2c8b@lib '#t)) (void))))) (set! cg2cd1@cg2b20@visit-library cg2b20@visit-library) (set! cg2b22@invoke-library-by-spec (lambda (cg2c8f@spec) (cg2b1e@invoke-library (cg2b14@find-library-by-spec/die cg2c8f@spec)))) (set! cg2cd2@cg2b22@invoke-library-by-spec cg2b22@invoke-library-by-spec) (set! cg2b24@installed-libraries (lambda cg2c97 (let ((cg2c98 (length cg2c97))) (if (= cg2c98 '1) (apply (lambda (cg2c91@all?) (let cg2c95@f ((cg2c93@ls ((cg2aae@current-library-collection)))) (if (null? cg2c93@ls) '() (if (or cg2c91@all? (cg2aec@library-visible? (car cg2c93@ls))) (cons (car cg2c93@ls) (cg2c95@f (cdr cg2c93@ls))) (cg2c95@f (cdr cg2c93@ls)))))) cg2c97) (if (= cg2c98 '0) (apply (lambda () (cg2b24@installed-libraries '#f)) cg2c97) (error #1# '"invalid arg count")))))) (set! cg2cd3@cg2b24@installed-libraries cg2b24@installed-libraries) (set! cg2b26@library-spec (lambda (cg2c99@x) (begin (if (not (cg2aba@library? cg2c99@x)) (assertion-violation 'library-spec '"not a library" cg2c99@x) (void)) (list (cg2abc@library-id cg2c99@x) (cg2ac0@library-name cg2c99@x) (cg2ac4@library-version cg2c99@x))))) (set! cg2cd4@cg2b26@library-spec cg2b26@library-spec) (void))
(begin (set! cg2cd8@build-global-define (unspecified)) (set! cg2d49@build-lambda (unspecified)) (set! cg2d4b@build-case-lambda (unspecified)) (set! cg2d79@build-sequence (unspecified)) (set! cg2d7b@build-void (unspecified)) (set! cg2d7d@build-letrec (unspecified)) (set! cg2d7f@build-let (unspecified)) (set! cg2d81@build-named-let (unspecified)) (set! cg2d83@build-letrec* (unspecified)) (set! cg2d85@build-library-letrec* (unspecified)) (set! cg2d87@build-receive (unspecified)) (set! cg2cd8@build-global-define (lambda (cg2d88@x) (cg2d7b@build-void))) (set! cg2e16@cg2cd8@build-global-define cg2cd8@build-global-define) (set! cg2d49@build-lambda (lambda (cg2d8a@ae cg2d8b@vars cg2d8c@exp) (list 'lambda cg2d8b@vars cg2d8c@exp))) (set! cg2e17@cg2d49@build-lambda cg2d49@build-lambda) (set! cg2d4b@build-case-lambda (lambda (cg2d90@ae cg2d91@vars* cg2d92@exp*) (letrec* ((cg2d97@build-error (lambda (cg2dce@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (cg2d99@build-pred (lambda (cg2db6@ae cg2db7@n cg2db8@vars) (call-with-values (lambda () (let cg2dc4@f ((cg2dc0@vars cg2db8@vars) (cg2dc1@count '0)) (if (pair? cg2dc0@vars) (cg2dc4@f (cdr cg2dc0@vars) (+ cg2dc1@count '1)) (if (null? cg2dc0@vars) (values cg2dc1@count '=) (values cg2dc1@count '>=))))) (lambda (cg2dc6@cg2dbd cg2dc7@cg2dbf) (let ((cg2dca@pred cg2dc7@cg2dbf) (cg2dcb@count cg2dc6@cg2dbd)) (list (list 'primitive cg2dca@pred) cg2db7@n (list 'quote cg2dcb@count))))))) (cg2d9b@build-apply (lambda (cg2dae@ae cg2daf@g cg2db0@vars cg2db1@exp) (list '(primitive apply) (cg2d49@build-lambda cg2dae@ae cg2db0@vars cg2db1@exp) cg2daf@g))) (cg2d9d@expand-case-lambda (lambda (cg2d9e@ae cg2d9f@vars cg2da0@exp*) (let ((cg2da4@g (gensym)) (cg2da5@n (gensym))) (list 'lambda cg2da4@g (cg2d7f@build-let cg2d9e@ae (list cg2da5@n) (list (list '(primitive length) cg2da4@g)) (let cg2dac@f ((cg2da8@vars* cg2d91@vars*) (cg2da9@exp* cg2da0@exp*)) (if (null? cg2da8@vars*) (cg2d97@build-error cg2d9e@ae) (list 'if (cg2d99@build-pred cg2d9e@ae cg2da5@n (car cg2da8@vars*)) (cg2d9b@build-apply cg2d9e@ae cg2da4@g (car cg2da8@vars*) (car cg2da9@exp*)) (cg2dac@f (cdr cg2da8@vars*) (cdr cg2da9@exp*))))))))))) (if (= (length cg2d92@exp*) '1) (cg2d49@build-lambda cg2d90@ae (car cg2d91@vars*) (car cg2d92@exp*)) (cg2d9d@expand-case-lambda cg2d90@ae cg2d91@vars* cg2d92@exp*))))) (set! cg2e18@cg2d4b@build-case-lambda cg2d4b@build-case-lambda) (set! cg2d79@build-sequence (lambda (cg2dd0@ae cg2dd1@exps) (let cg2dd6@loop ((cg2dd4@exps cg2dd1@exps)) (if (null? (cdr cg2dd4@exps)) (car cg2dd4@exps) (if (equal? (car cg2dd4@exps) (cg2d7b@build-void)) (cg2dd6@loop (cdr cg2dd4@exps)) (cons 'begin cg2dd4@exps)))))) (set! cg2e19@cg2d79@build-sequence cg2d79@build-sequence) (set! cg2d7b@build-void (lambda () '((primitive void)))) (set! cg2e1a@cg2d7b@build-void cg2d7b@build-void) (set! cg2d7d@build-letrec (lambda (cg2dd8@ae cg2dd9@vars cg2dda@val-exps cg2ddb@body-exp) (if (null? cg2dd9@vars) cg2ddb@body-exp (list 'letrec (map list cg2dd9@vars cg2dda@val-exps) cg2ddb@body-exp)))) (set! cg2e1b@cg2d7d@build-letrec cg2d7d@build-letrec) (set! cg2d7f@build-let (lambda (cg2de0@ae cg2de1@vars cg2de2@val-exps cg2de3@body-exp) (if (null? cg2de1@vars) cg2de3@body-exp (list 'let (map list cg2de1@vars cg2de2@val-exps) cg2de3@body-exp)))) (set! cg2e1c@cg2d7f@build-let cg2d7f@build-let) (set! cg2d81@build-named-let (lambda (cg2de8@ae cg2de9@name cg2dea@vars cg2deb@val-exps cg2dec@body-exp) (list 'let cg2de9@name (map list cg2dea@vars cg2deb@val-exps) cg2dec@body-exp))) (set! cg2e1d@cg2d81@build-named-let cg2d81@build-named-let) (set! cg2d83@build-letrec* (lambda (cg2df2@ae cg2df3@vars cg2df4@val-exps cg2df5@body-exp) (if (null? cg2df3@vars) cg2df5@body-exp (list 'letrec* (map list cg2df3@vars cg2df4@val-exps) cg2df5@body-exp)))) (set! cg2e1e@cg2d83@build-letrec* cg2d83@build-letrec*) (set! cg2d85@build-library-letrec* (lambda (cg2dfa@ae cg2dfb@name cg2dfc@vars cg2dfd@locs cg2dfe@val-exps cg2dff@body-exp) (cons 'begin (append (map (lambda (cg2e06@var) (cons 'set! (cons cg2e06@var '((unspecified))))) cg2dfc@vars) (append (apply append (map (lambda (cg2e08@var cg2e09@loc cg2e0a@val-exp) (list (list 'set! cg2e08@var cg2e0a@val-exp) (list 'set! cg2e09@loc cg2e08@var))) cg2dfc@vars cg2dfd@locs cg2dfe@val-exps)) (list cg2dff@body-exp)))))) (set! cg2e1f@cg2d85@build-library-letrec* cg2d85@build-library-letrec*) (set! cg2d87@build-receive (lambda (cg2e0e@ae cg2e0f@vars cg2e10@producer cg2e11@body*) (begin (display '"************** in ") (cons 'receive (cons cg2e0f@vars (cons cg2e10@producer cg2e11@body*)))))) (set! cg2e20@cg2d87@build-receive cg2d87@build-receive) (void))
(begin (set! cg2e2f@file-options-macro (unspecified)) (set! cg2e31@set-cons (unspecified)) (set! cg2e33@set-union (unspecified)) (set! cg2e38@top-mark* (unspecified)) (set! cg2e3a@top-marked? (unspecified)) (set! cg2e3c@gen-lexical (unspecified)) (set! cg2e3e@gen-global (unspecified)) (set! cg2e40@gen-label (unspecified)) (set! cg2e42@gen-top-level-label (unspecified)) (set! cg2e44@gen-define-label+loc (unspecified)) (set! cg2e46@gen-define-label (unspecified)) (set! cg2e50@rib? (unspecified)) (set! cg2e52@rib-sym* (unspecified)) (set! cg2e54@set-rib-sym*! (unspecified)) (set! cg2e56@rib-mark** (unspecified)) (set! cg2e58@set-rib-mark**! (unspecified)) (set! cg2e5a@rib-label* (unspecified)) (set! cg2e5c@set-rib-label*! (unspecified)) (set! cg2e5e@rib-sealed/freq (unspecified)) (set! cg2e60@set-rib-sealed/freq! (unspecified)) (set! cg2e62@rib-cache (unspecified)) (set! cg2e64@set-rib-cache! (unspecified)) (set! cg2e66@dummy (unspecified)) (set! cg2e68@make-empty-rib (unspecified)) (set! cg2e6a@extend-rib! (unspecified)) (set! cg2e6c@extend-rib/nc! (unspecified)) (set! cg2e6e@make-rib-map (unspecified)) (set! cg2e70@seal-rib! (unspecified)) (set! cg2e72@unseal-rib! (unspecified)) (set! cg2e74@make-full-rib (unspecified)) (set! cg2e76@rp (unspecified)) (set! cg2e80@stx? (unspecified)) (set! cg2e82@stx-expr (unspecified)) (set! cg2e84@set-stx-expr! (unspecified)) (set! cg2e86@stx-mark* (unspecified)) (set! cg2e88@set-stx-mark*! (unspecified)) (set! cg2e8a@stx-subst* (unspecified)) (set! cg2e8c@set-stx-subst*! (unspecified)) (set! cg2e8e@stx-ae* (unspecified)) (set! cg2e90@set-stx-ae*! (unspecified)) (set! cg2e92@dummy (unspecified)) (set! cg2e94@datum->stx (unspecified)) (set! cg2e96@gen-mark (unspecified)) (set! cg2e98@anti-mark (unspecified)) (set! cg2e9a@anti-mark? (unspecified)) (set! cg2e9c@mkstx (unspecified)) (set! cg2e9e@add-mark (unspecified)) (set! cg2ea0@add-subst (unspecified)) (set! cg2ea2@syntax-kind? (unspecified)) (set! cg2ea4@syntax-vector->list (unspecified)) (set! cg2ea6@syntax-pair? (unspecified)) (set! cg2ea8@syntax-vector? (unspecified)) (set! cg2eaa@syntax-null? (unspecified)) (set! cg2eac@syntax-list? (unspecified)) (set! cg2eae@syntax-car (unspecified)) (set! cg2eb0@syntax-cdr (unspecified)) (set! cg2eb2@syntax->list (unspecified)) (set! cg2eb4@id? (unspecified)) (set! cg2eb6@id->sym (unspecified)) (set! cg2eb8@bound-id=? (unspecified)) (set! cg2eba@free-id=? (unspecified)) (set! cg2ebc@valid-bound-ids? (unspecified)) (set! cg2ebe@distinct-bound-ids? (unspecified)) (set! cg2ec0@bound-id-member? (unspecified)) (set! cg2ec2@self-evaluating? (unspecified)) (set! cg2ec4@strip-annotations (unspecified)) (set! cg2ec6@strip (unspecified)) (set! cg2ec8@stx->datum (unspecified)) (set! cg2eca@id->label (unspecified)) (set! cg2ecc@label->binding (unspecified)) (set! cg2ece@make-binding (unspecified)) (set! cg2ed0@binding-type (unspecified)) (set! cg2ed2@binding-value (unspecified)) (set! cg2ed4@raise-unbound-error (unspecified)) (set! cg2ed6@syntax-type (unspecified)) (set! cg2ee4@sanitize-binding (unspecified)) (set! cg2ee6@make-variable-transformer (unspecified)) (set! cg2ee8@variable-transformer? (unspecified)) (set! cg2eea@variable-transformer-procedure (unspecified)) (set! cg2eec@make-eval-transformer (unspecified)) (set! cg303d@parse-define (unspecified)) (set! cg303f@parse-define-syntax (unspecified)) (set! cg3041@scheme-stx-hashtable (unspecified)) (set! cg3043@scheme-stx (unspecified)) (set! cg3045@lexical-var (unspecified)) (set! cg3047@lexical-mutable? (unspecified)) (set! cg3049@set-lexical-mutable! (unspecified)) (set! cg304b@add-lexical (unspecified)) (set! cg304d@add-lexicals (unspecified)) (set! cg304f@letrec-helper (unspecified)) (set! cg3051@let-transformer (unspecified)) (set! cg3053@letrec-transformer (unspecified)) (set! cg3055@letrec*-transformer (unspecified)) (set! cg3057@fluid-let-syntax-transformer (unspecified)) (set! cg3059@type-descriptor-transformer (unspecified)) (set! cg305b@record-type-descriptor-transformer (unspecified)) (set! cg305d@record-constructor-descriptor-transformer (unspecified)) (set! cg305f@when-macro (unspecified)) (set! cg3061@unless-macro (unspecified)) (set! cg3063@if-transformer (unspecified)) (set! cg3065@and-transformer (unspecified)) (set! cg3067@or-transformer (unspecified)) (set! cg3069@case-macro (unspecified)) (set! cg306b@quote-transformer (unspecified)) (set! cg306d@case-lambda-transformer (unspecified)) (set! cg306f@lambda-transformer (unspecified)) (set! cg3071@bless (unspecified)) (set! cg3073@with-syntax-macro (unspecified)) (set! cg3075@invalid-fmls-error (unspecified)) (set! cg3077@let-macro (unspecified)) (set! cg3079@let-values-macro (unspecified)) (set! cg307b@let*-values-macro (unspecified)) (set! cg307d@trace-lambda-macro (unspecified)) (set! cg307f@trace-define-macro (unspecified)) (set! cg3081@trace-define-syntax-macro (unspecified)) (set! cg3083@trace-let/rec-syntax (unspecified)) (set! cg3085@trace-let-syntax-macro (unspecified)) (set! cg3087@trace-letrec-syntax-macro (unspecified)) (set! cg3089@guard-macro (unspecified)) (set! cg308b@define-enumeration-macro (unspecified)) (set! cg308d@time-macro (unspecified)) (set! cg308f@delay-macro (unspecified)) (set! cg3091@assert-macro (unspecified)) (set! cg3093@endianness-macro (unspecified)) (set! cg3095@identifier-syntax-macro (unspecified)) (set! cg3097@do-macro (unspecified)) (set! cg3099@let*-macro (unspecified)) (set! cg309b@or-macro (unspecified)) (set! cg309d@and-macro (unspecified)) (set! cg309f@cond-macro (unspecified)) (set! cg30a1@do-include (unspecified)) (set! cg30a3@include-macro (unspecified)) (set! cg30a5@include-into-macro (unspecified)) (set! cg30a7@syntax-rules-macro (unspecified)) (set! cg30a9@quasiquote-macro (unspecified)) (set! cg30ab@quasisyntax-macro (unspecified)) (set! cg30ad@define-struct-macro (unspecified)) (set! cg30af@define-record-type-macro (unspecified)) (set! cg30b1@define-condition-type-macro (unspecified)) (set! cg30b3@incorrect-usage-macro (unspecified)) (set! cg30b5@parameterize-macro (unspecified)) (set! cg30b7@foreign-call-transformer (unspecified)) (set! cg30b9@convert-pattern (unspecified)) (set! cg30bb@syntax-dispatch (unspecified)) (set! cg30bd@ellipsis? (unspecified)) (set! cg30bf@underscore? (unspecified)) (set! cg30c1@verify-literals (unspecified)) (set! cg30c3@syntax-case-transformer (unspecified)) (set! cg30c5@ellipsis-map (unspecified)) (set! cg30c7@syntax-transformer (unspecified)) (set! cg30c9@core-macro-transformer (unspecified)) (set! cg30cb@symbol-macro (unspecified)) (set! cg30cd@macro-transformer (unspecified)) (set! cg30cf@local-macro-transformer (unspecified)) (set! cg30d1@do-macro-call (unspecified)) (set! cg30d3@chi-macro (unspecified)) (set! cg30d5@chi-local-macro (unspecified)) (set! cg30d7@chi-global-macro (unspecified)) (set! cg30d9@chi-expr* (unspecified)) (set! cg30db@chi-application (unspecified)) (set! cg30dd@chi-expr (unspecified)) (set! cg30df@chi-set! (unspecified)) (set! cg30e1@verify-formals (unspecified)) (set! cg30e3@chi-lambda-clause (unspecified)) (set! cg30e5@chi-lambda-clause* (unspecified)) (set! cg30e7@chi-defun (unspecified)) (set! cg30e9@chi-rhs (unspecified)) (set! cg30eb@expand-interaction-rhs*/init* (unspecified)) (set! cg30ed@chi-rhs* (unspecified)) (set! cg30ef@find-bound=? (unspecified)) (set! cg30f1@find-dups (unspecified)) (set! cg30f3@chi-internal (unspecified)) (set! cg30f5@parse-module (unspecified)) (set! cg30ff@module-interface? (unspecified)) (set! cg3101@module-interface-first-mark (unspecified)) (set! cg3103@set-module-interface-first-mark! (unspecified)) (set! cg3105@module-interface-exp-id-vec (unspecified)) (set! cg3107@set-module-interface-exp-id-vec! (unspecified)) (set! cg3109@module-interface-exp-lab-vec (unspecified)) (set! cg310b@set-module-interface-exp-lab-vec! (unspecified)) (set! cg310d@dummy (unspecified)) (set! cg310f@module-interface-exp-id* (unspecified)) (set! cg3111@chi-internal-module (unspecified)) (set! cg3113@chi-body* (unspecified)) (set! cg3115@expand-transformer (unspecified)) (set! cg3117@parse-exports (unspecified)) (set! cg3119@parse-library-name (unspecified)) (set! cg311b@parse-library (unspecified)) (set! cg311d@parse-import-spec* (unspecified)) (set! cg311f@make-top-rib (unspecified)) (set! cg3121@make-collector (unspecified)) (set! cg3123@inv-collector (unspecified)) (set! cg3125@vis-collector (unspecified)) (set! cg3127@imp-collector (unspecified)) (set! cg3129@chi-library-internal (unspecified)) (set! cg312b@chi-interaction-expr (unspecified)) (set! cg312d@library-body-expander (unspecified)) (set! cg312f@core-library-expander (unspecified)) (set! cg3131@parse-top-level-program (unspecified)) (set! cg3133@top-level-expander (unspecified)) (set! cg3135@rp (unspecified)) (set! cg313f@env? (unspecified)) (set! cg3141@env-names (unspecified)) (set! cg3143@set-env-names! (unspecified)) (set! cg3145@env-labels (unspecified)) (set! cg3147@set-env-labels! (unspecified)) (set! cg3149@env-itc (unspecified)) (set! cg314b@set-env-itc! (unspecified)) (set! cg314d@dummy (unspecified)) (set! cg314f@rp (unspecified)) (set! cg3159@interaction-env? (unspecified)) (set! cg315b@interaction-env-rib (unspecified)) (set! cg315d@set-interaction-env-rib! (unspecified)) (set! cg315f@interaction-env-r (unspecified)) (set! cg3161@set-interaction-env-r! (unspecified)) (set! cg3163@interaction-env-locs (unspecified)) (set! cg3165@set-interaction-env-locs! (unspecified)) (set! cg3167@dummy (unspecified)) (set! cg3169@interaction-environment-symbols (unspecified)) (set! cg316b@environment-bindings (unspecified)) (set! cg316d@parse-binding (unspecified)) (set! cg316f@environment? (unspecified)) (set! cg3171@environment-symbols (unspecified)) (set! cg3173@environment (unspecified)) (set! cg3175@null-environment (unspecified)) (set! cg3177@scheme-report-environment (unspecified)) (set! cg3179@expand (unspecified)) (set! cg317b@eval (unspecified)) (set! cg317d@library-expander (unspecified)) (set! cg317f@boot-library-expand (unspecified)) (set! cg3181@rev-map-append (unspecified)) (set! cg3183@build-exports (unspecified)) (set! cg3185@make-export-subst (unspecified)) (set! cg3187@make-export-env/macros (unspecified)) (set! cg3189@generate-temporaries (unspecified)) (set! cg318b@free-identifier=? (unspecified)) (set! cg318d@bound-identifier=? (unspecified)) (set! cg318f@make-source-condition (unspecified)) (set! cg3191@extract-position-condition (unspecified)) (set! cg3193@expression-position (unspecified)) (set! cg3195@assertion-error (unspecified)) (set! cg3197@syntax-error (unspecified)) (set! cg3199@syntax-violation* (unspecified)) (set! cg319b@syntax-violation (unspecified)) (set! cg319d@identifier? (unspecified)) (set! cg319f@datum->syntax (unspecified)) (set! cg31a1@syntax->datum (unspecified)) (set! cg31a3@ungensym-all (unspecified)) (set! cg31a5@compile-r6rs-top-level (unspecified)) (set! cg31a7@pre-compile-r6rs-top-level (unspecified)) (set! cg31a9@interaction-environment (unspecified)) (set! cg31ab@top-level-context (unspecified)) (set! cg2e2f@file-options-macro (lambda (cg31ac@x) (letrec* ((cg31af@valid-option? (lambda (cg31b8@x) (and (cg2eb4@id? cg31b8@x) (memq (cg2eb6@id->sym cg31b8@x) '(no-fail no-create no-truncate)))))) (let ((cg31b0@t cg31ac@x)) (let ((cg31b2@ls/false (cg30bb@syntax-dispatch cg31b0@t '(_ . each-any)))) (if (and cg31b2@ls/false (apply (lambda (cg31b4@opt*) (for-all cg31af@valid-option? cg31b4@opt*)) cg31b2@ls/false)) (apply (lambda (cg31b6@opt*) (cg3071@bless (list 'make-file-options (list 'quote cg31b6@opt*)))) cg31b2@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg31b0@t))))))) (set! cg4b02@cg2e2f@file-options-macro cg2e2f@file-options-macro) (set! cg2e31@set-cons (lambda (cg31ba@x cg31bb@ls) (if (memq cg31ba@x cg31bb@ls) cg31bb@ls (cons cg31ba@x cg31bb@ls)))) (set! cg4b03@cg2e31@set-cons cg2e31@set-cons) (set! cg2e33@set-union (lambda (cg31be@ls1 cg31bf@ls2) (if (null? cg31be@ls1) cg31bf@ls2 (if (memq (car cg31be@ls1) cg31bf@ls2) (cg2e33@set-union (cdr cg31be@ls1) cg31bf@ls2) (cons (car cg31be@ls1) (cg2e33@set-union (cdr cg31be@ls1) cg31bf@ls2)))))) (set! cg4b04@cg2e33@set-union cg2e33@set-union) (set! cg2e38@top-mark* '(top)) (set! cg4b05@cg2e38@top-mark* cg2e38@top-mark*) (set! cg2e3a@top-marked? (lambda (cg31c2@m*) (memq 'top cg31c2@m*))) (set! cg4b06@cg2e3a@top-marked? cg2e3a@top-marked?) (set! cg2e3c@gen-lexical (lambda (cg31c4@sym) (if (symbol? cg31c4@sym) (gensym cg31c4@sym) (if (cg2e80@stx? cg31c4@sym) (cg2e3c@gen-lexical (cg2eb6@id->sym cg31c4@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" cg31c4@sym))))) (set! cg4b07@cg2e3c@gen-lexical cg2e3c@gen-lexical) (set! cg2e3e@gen-global (lambda (cg31c6@x) (cg2e3c@gen-lexical cg31c6@x))) (set! cg4b08@cg2e3e@gen-global cg2e3e@gen-global) (set! cg2e40@gen-label (lambda (cg31c8@_) (gensym))) (set! cg4b09@cg2e40@gen-label cg2e40@gen-label) (set! cg2e42@gen-top-level-label (lambda (cg31ca@id cg31cb@rib) (letrec* ((cg31cf@find (lambda (cg31da@sym cg31db@mark* cg31dc@sym* cg31dd@mark** cg31de@label*) (and (pair? cg31dc@sym*) (if (and (eq? cg31da@sym (car cg31dc@sym*)) (same-marks? cg31db@mark* (car cg31dd@mark**))) (car cg31de@label*) (cg31cf@find cg31da@sym cg31db@mark* (cdr cg31dc@sym*) (cdr cg31dd@mark**) (cdr cg31de@label*))))))) (let ((cg31d0@sym (cg2eb6@id->sym cg31ca@id)) (cg31d1@mark* (cg2e86@stx-mark* cg31ca@id))) (let ((cg31d4@sym* (cg2e52@rib-sym* cg31cb@rib))) (let ((cg31d6@t (and (memq cg31d0@sym (cg2e52@rib-sym* cg31cb@rib)) (cg31cf@find cg31d0@sym cg31d1@mark* cg31d4@sym* (cg2e56@rib-mark** cg31cb@rib) (cg2e5a@rib-label* cg31cb@rib))))) (if cg31d6@t ((lambda (cg31d8@label) (if (cg2ccf@cg2b1c@imported-label->binding cg31d8@label) (gensym) cg31d8@label)) cg31d6@t) (gensym)))))))) (set! cg4b0a@cg2e42@gen-top-level-label cg2e42@gen-top-level-label) (set! cg2e44@gen-define-label+loc (lambda (cg31e4@id cg31e5@rib) (let ((cg31e8@t (cg31ab@top-level-context))) (if cg31e8@t ((lambda (cg31ea@env) (let ((cg31ec@label (cg2e42@gen-top-level-label cg31e4@id cg31e5@rib)) (cg31ed@locs (cg3163@interaction-env-locs cg31ea@env))) (values cg31ec@label (let ((cg31f0@t (assq cg31ec@label cg31ed@locs))) (if cg31f0@t (cdr cg31f0@t) (let ((cg31f2@loc (cg2e3c@gen-lexical cg31e4@id))) (begin (cg3165@set-interaction-env-locs! cg31ea@env (cons (cons cg31ec@label cg31f2@loc) cg31ed@locs)) cg31f2@loc))))))) cg31e8@t) (values (gensym) (cg2e3c@gen-lexical cg31e4@id)))))) (set! cg4b0b@cg2e44@gen-define-label+loc cg2e44@gen-define-label+loc) (set! cg2e46@gen-define-label (lambda (cg31f4@id cg31f5@rib) (if (cg31ab@top-level-context) (cg2e42@gen-top-level-label cg31f4@id cg31f5@rib) (gensym)))) (set! cg4b0c@cg2e46@gen-define-label cg2e46@gen-define-label) (set! cg2e50@rib? (lambda (cg31f8@x) (and (simple-struct? cg31f8@x) (eq? (simple-struct-name cg31f8@x) 'rib)))) (set! cg4b0d@cg2e50@rib? cg2e50@rib?) (set! cg2e52@rib-sym* (lambda (cg31fa@x) (simple-struct-ref cg31fa@x '0))) (set! cg4b0e@cg2e52@rib-sym* cg2e52@rib-sym*) (set! cg2e54@set-rib-sym*! (lambda (cg31fc@x cg31fd@val) (simple-struct-set! cg31fc@x '0 cg31fd@val))) (set! cg4b0f@cg2e54@set-rib-sym*! cg2e54@set-rib-sym*!) (set! cg2e56@rib-mark** (lambda (cg3200@x) (simple-struct-ref cg3200@x '1))) (set! cg4b10@cg2e56@rib-mark** cg2e56@rib-mark**) (set! cg2e58@set-rib-mark**! (lambda (cg3202@x cg3203@val) (simple-struct-set! cg3202@x '1 cg3203@val))) (set! cg4b11@cg2e58@set-rib-mark**! cg2e58@set-rib-mark**!) (set! cg2e5a@rib-label* (lambda (cg3206@x) (simple-struct-ref cg3206@x '2))) (set! cg4b12@cg2e5a@rib-label* cg2e5a@rib-label*) (set! cg2e5c@set-rib-label*! (lambda (cg3208@x cg3209@val) (simple-struct-set! cg3208@x '2 cg3209@val))) (set! cg4b13@cg2e5c@set-rib-label*! cg2e5c@set-rib-label*!) (set! cg2e5e@rib-sealed/freq (lambda (cg320c@x) (simple-struct-ref cg320c@x '3))) (set! cg4b14@cg2e5e@rib-sealed/freq cg2e5e@rib-sealed/freq) (set! cg2e60@set-rib-sealed/freq! (lambda (cg320e@x cg320f@val) (simple-struct-set! cg320e@x '3 cg320f@val))) (set! cg4b15@cg2e60@set-rib-sealed/freq! cg2e60@set-rib-sealed/freq!) (set! cg2e62@rib-cache (lambda (cg3212@x) (simple-struct-ref cg3212@x '4))) (set! cg4b16@cg2e62@rib-cache cg2e62@rib-cache) (set! cg2e64@set-rib-cache! (lambda (cg3214@x cg3215@val) (simple-struct-set! cg3214@x '4 cg3215@val))) (set! cg4b17@cg2e64@set-rib-cache! cg2e64@set-rib-cache!) (set! cg2e66@dummy '3) (set! cg4b18@cg2e66@dummy cg2e66@dummy) (set! cg2e68@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! cg4b19@cg2e68@make-empty-rib cg2e68@make-empty-rib) (set! cg2e6a@extend-rib! (lambda (cg3218@rib cg3219@id cg321a@label) (letrec* ((cg321f@find (lambda (cg322c@sym cg322d@mark* cg322e@sym* cg322f@mark** cg3230@label*) (and (pair? cg322e@sym*) (if (and (eq? cg322c@sym (car cg322e@sym*)) (same-marks? cg322d@mark* (car cg322f@mark**))) cg3230@label* (cg321f@find cg322c@sym cg322d@mark* (cdr cg322e@sym*) (cdr cg322f@mark**) (cdr cg3230@label*))))))) (begin (if (cg2e5e@rib-sealed/freq cg3218@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" cg3218@rib) (void)) (let ((cg3220@sym (cg2eb6@id->sym cg3219@id)) (cg3221@mark* (cg2e86@stx-mark* cg3219@id))) (let ((cg3224@sym* (cg2e52@rib-sym* cg3218@rib))) (let ((cg3226@t (and (memq cg3220@sym (cg2e52@rib-sym* cg3218@rib)) (cg321f@find cg3220@sym cg3221@mark* cg3224@sym* (cg2e56@rib-mark** cg3218@rib) (cg2e5a@rib-label* cg3218@rib))))) (if cg3226@t ((lambda (cg3228@p) (if (not (eq? cg321a@label (car cg3228@p))) (if (cg31ab@top-level-context) (set-car! cg3228@p cg321a@label) (cg319b@syntax-violation '#f '"multiple definitions of identifier" cg3219@id)) (void))) cg3226@t) (begin (if (cg2e62@rib-cache cg3218@rib) (hashtable-update! (cg2e62@rib-cache cg3218@rib) cg3220@sym (lambda (cg322a@e) (cons (cons cg3221@mark* cg321a@label) cg322a@e)) '()) (void)) (cg2e54@set-rib-sym*! cg3218@rib (cons cg3220@sym cg3224@sym*)) (cg2e58@set-rib-mark**! cg3218@rib (cons cg3221@mark* (cg2e56@rib-mark** cg3218@rib))) (cg2e5c@set-rib-label*! cg3218@rib (cons cg321a@label (cg2e5a@rib-label* cg3218@rib)))))))))))) (set! cg4b1a@cg2e6a@extend-rib! cg2e6a@extend-rib!) (set! cg2e6c@extend-rib/nc! (lambda (cg3236@rib cg3237@id cg3238@label) (let ((cg323c@sym (cg2eb6@id->sym cg3237@id)) (cg323d@mark* (cg2e86@stx-mark* cg3237@id))) (let ((cg3240@sym* (cg2e52@rib-sym* cg3236@rib))) (begin (if (cg2e62@rib-cache cg3236@rib) (hashtable-update! (cg2e62@rib-cache cg3236@rib) cg323c@sym (lambda (cg3242@e) (cons (cons cg323d@mark* cg3238@label) cg3242@e)) '()) (void)) (cg2e54@set-rib-sym*! cg3236@rib (cons cg323c@sym cg3240@sym*)) (cg2e58@set-rib-mark**! cg3236@rib (cons cg323d@mark* (cg2e56@rib-mark** cg3236@rib))) (cg2e5c@set-rib-label*! cg3236@rib (cons cg3238@label (cg2e5a@rib-label* cg3236@rib)))))))) (set! cg4b1b@cg2e6c@extend-rib/nc! cg2e6c@extend-rib/nc!) (set! cg2e6e@make-rib-map (lambda (cg3244@sym*) (let ((cg3246@ht (make-eq-hashtable))) (let cg324c@f ((cg3248@i '0) (cg3249@sym* cg3244@sym*)) (if (null? cg3249@sym*) cg3246@ht (begin (hashtable-update! cg3246@ht (car cg3249@sym*) (lambda (cg324e@x) (cons cg3248@i cg324e@x)) '()) (cg324c@f (+ cg3248@i '1) (cdr cg3249@sym*)))))))) (set! cg4b1c@cg2e6e@make-rib-map cg2e6e@make-rib-map) (set! cg2e70@seal-rib! (lambda (cg3250@rib) (let ((cg3252@sym* (cg2e52@rib-sym* cg3250@rib))) (if (not (null? cg3252@sym*)) (begin (cg2e54@set-rib-sym*! cg3250@rib (list->vector cg3252@sym*)) (cg2e58@set-rib-mark**! cg3250@rib (list->vector (cg2e56@rib-mark** cg3250@rib))) (cg2e5c@set-rib-label*! cg3250@rib (list->vector (cg2e5a@rib-label* cg3250@rib))) (cg2e60@set-rib-sealed/freq! cg3250@rib (cg2e6e@make-rib-map cg3252@sym*))) (void))))) (set! cg4b1d@cg2e70@seal-rib! cg2e70@seal-rib!) (set! cg2e72@unseal-rib! (lambda (cg3254@rib) (if (cg2e5e@rib-sealed/freq cg3254@rib) (begin (cg2e60@set-rib-sealed/freq! cg3254@rib '#f) (cg2e54@set-rib-sym*! cg3254@rib (vector->list (cg2e52@rib-sym* cg3254@rib))) (cg2e58@set-rib-mark**! cg3254@rib (vector->list (cg2e56@rib-mark** cg3254@rib))) (cg2e5c@set-rib-label*! cg3254@rib (vector->list (cg2e5a@rib-label* cg3254@rib)))) (void)))) (set! cg4b1e@cg2e72@unseal-rib! cg2e72@unseal-rib!) (set! cg2e74@make-full-rib (lambda (cg3256@id* cg3257@label*) (let ((cg325a@r (make-simple-struct 'rib '6 (list (map cg2eb6@id->sym cg3256@id*) (map cg2e86@stx-mark* cg3256@id*) cg3257@label* '#f '#f)))) (begin (cg2e70@seal-rib! cg325a@r) cg325a@r)))) (set! cg4b1f@cg2e74@make-full-rib cg2e74@make-full-rib) (set! cg2e76@rp (cg2a01@cg28dc@make-record-printer 'stx (lambda (cg325c@x cg325d@p cg325e@wr) (begin (display '"#<syntax " cg325d@p) (write (cg2ec8@stx->datum cg325c@x) cg325d@p) (let ((cg3262@expr (cg2e82@stx-expr cg325c@x))) (if (cg29f8@cg28ca@annotation? cg3262@expr) (let ((cg3264@src (cg29f9@cg28cc@annotation-source cg3262@expr))) (if (pair? cg3264@src) (begin (display '" [" cg325d@p) (display (cdr cg3264@src) cg325d@p) (display '" of " cg325d@p) (display (car cg3264@src) cg325d@p) (display '"]" cg325d@p)) (void))) (void))) (display '">" cg325d@p))))) (set! cg4b20@cg2e76@rp cg2e76@rp) (set! cg2e80@stx? (lambda (cg3266@x) (and (simple-struct? cg3266@x) (eq? (simple-struct-name cg3266@x) 'stx)))) (set! cg4b21@cg2e80@stx? cg2e80@stx?) (set! cg2e82@stx-expr (lambda (cg3268@x) (simple-struct-ref cg3268@x '0))) (set! cg4b22@cg2e82@stx-expr cg2e82@stx-expr) (set! cg2e84@set-stx-expr! (lambda (cg326a@x cg326b@val) (simple-struct-set! cg326a@x '0 cg326b@val))) (set! cg4b23@cg2e84@set-stx-expr! cg2e84@set-stx-expr!) (set! cg2e86@stx-mark* (lambda (cg326e@x) (simple-struct-ref cg326e@x '1))) (set! cg4b24@cg2e86@stx-mark* cg2e86@stx-mark*) (set! cg2e88@set-stx-mark*! (lambda (cg3270@x cg3271@val) (simple-struct-set! cg3270@x '1 cg3271@val))) (set! cg4b25@cg2e88@set-stx-mark*! cg2e88@set-stx-mark*!) (set! cg2e8a@stx-subst* (lambda (cg3274@x) (simple-struct-ref cg3274@x '2))) (set! cg4b26@cg2e8a@stx-subst* cg2e8a@stx-subst*) (set! cg2e8c@set-stx-subst*! (lambda (cg3276@x cg3277@val) (simple-struct-set! cg3276@x '2 cg3277@val))) (set! cg4b27@cg2e8c@set-stx-subst*! cg2e8c@set-stx-subst*!) (set! cg2e8e@stx-ae* (lambda (cg327a@x) (simple-struct-ref cg327a@x '3))) (set! cg4b28@cg2e8e@stx-ae* cg2e8e@stx-ae*) (set! cg2e90@set-stx-ae*! (lambda (cg327c@x cg327d@val) (simple-struct-set! cg327c@x '3 cg327d@val))) (set! cg4b29@cg2e90@set-stx-ae*! cg2e90@set-stx-ae*!) (set! cg2e92@dummy '3) (set! cg4b2a@cg2e92@dummy cg2e92@dummy) (set! cg2e94@datum->stx (lambda (cg3280@id cg3281@datum) (make-simple-struct 'stx '5 (list cg3281@datum (cg2e86@stx-mark* cg3280@id) (cg2e8a@stx-subst* cg3280@id) (cg2e8e@stx-ae* cg3280@id))))) (set! cg4b2b@cg2e94@datum->stx cg2e94@datum->stx) (set! cg2e96@gen-mark (lambda () (string '#\m))) (set! cg4b2c@cg2e96@gen-mark cg2e96@gen-mark) (set! cg2e98@anti-mark '#f) (set! cg4b2d@cg2e98@anti-mark cg2e98@anti-mark) (set! cg2e9a@anti-mark? not) (set! cg4b2e@cg2e9a@anti-mark? cg2e9a@anti-mark?) (set! cg2e9c@mkstx (lambda (cg3284@e cg3285@m* cg3286@s* cg3287@ae*) (if (and (cg2e80@stx? cg3284@e) (not (cg2e3a@top-marked? cg3285@m*))) (call-with-values (lambda () (join-wraps cg3285@m* cg3286@s* cg3287@ae* cg3284@e)) (lambda (cg3292@cg328d cg3293@cg328f cg3294@cg3291) (let ((cg3298@ae* cg3294@cg3291) (cg3299@s* cg3293@cg328f) (cg329a@m* cg3292@cg328d)) (make-simple-struct 'stx '5 (list (cg2e82@stx-expr cg3284@e) cg329a@m* cg3299@s* cg3298@ae*))))) (make-simple-struct 'stx '5 (list cg3284@e cg3285@m* cg3286@s* cg3287@ae*))))) (set! cg4b2f@cg2e9c@mkstx cg2e9c@mkstx) (set! cg2e9e@add-mark (lambda (cg329e@m cg329f@e cg32a0@ae) (cg2e9c@mkstx cg329f@e (list cg329e@m) '(shift) (list cg32a0@ae)))) (set! cg4b30@cg2e9e@add-mark cg2e9e@add-mark) (set! cg2ea0@add-subst (lambda (cg32a4@subst cg32a5@e) (cg2e9c@mkstx cg32a5@e '() (list cg32a4@subst) '()))) (set! cg4b31@cg2ea0@add-subst cg2ea0@add-subst) (set! cg2ea2@syntax-kind? (lambda (cg32a8@x cg32a9@p?) (if (cg2e80@stx? cg32a8@x) (cg2ea2@syntax-kind? (cg2e82@stx-expr cg32a8@x) cg32a9@p?) (if (cg29f8@cg28ca@annotation? cg32a8@x) (cg2ea2@syntax-kind? (cg29fa@cg28ce@annotation-expression cg32a8@x) cg32a9@p?) (cg32a9@p? cg32a8@x))))) (set! cg4b32@cg2ea2@syntax-kind? cg2ea2@syntax-kind?) (set! cg2ea4@syntax-vector->list (lambda (cg32ac@x) (if (cg2e80@stx? cg32ac@x) (let ((cg32ae@ls (cg2ea4@syntax-vector->list (cg2e82@stx-expr cg32ac@x))) (cg32af@m* (cg2e86@stx-mark* cg32ac@x)) (cg32b0@s* (cg2e8a@stx-subst* cg32ac@x)) (cg32b1@ae* (cg2e8e@stx-ae* cg32ac@x))) (map (lambda (cg32b6@x) (cg2e9c@mkstx cg32b6@x cg32af@m* cg32b0@s* cg32b1@ae*)) cg32ae@ls)) (if (cg29f8@cg28ca@annotation? cg32ac@x) (cg2ea4@syntax-vector->list (cg29fa@cg28ce@annotation-expression cg32ac@x)) (if (vector? cg32ac@x) (vector->list cg32ac@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" cg32ac@x)))))) (set! cg4b33@cg2ea4@syntax-vector->list cg2ea4@syntax-vector->list) (set! cg2ea6@syntax-pair? (lambda (cg32b8@x) (cg2ea2@syntax-kind? cg32b8@x pair?))) (set! cg4b34@cg2ea6@syntax-pair? cg2ea6@syntax-pair?) (set! cg2ea8@syntax-vector? (lambda (cg32ba@x) (cg2ea2@syntax-kind? cg32ba@x vector?))) (set! cg4b35@cg2ea8@syntax-vector? cg2ea8@syntax-vector?) (set! cg2eaa@syntax-null? (lambda (cg32bc@x) (cg2ea2@syntax-kind? cg32bc@x null?))) (set! cg4b36@cg2eaa@syntax-null? cg2eaa@syntax-null?) (set! cg2eac@syntax-list? (lambda (cg32be@x) (or (cg2eaa@syntax-null? cg32be@x) (and (cg2ea6@syntax-pair? cg32be@x) (cg2eac@syntax-list? (cg2eb0@syntax-cdr cg32be@x)))))) (set! cg4b37@cg2eac@syntax-list? cg2eac@syntax-list?) (set! cg2eae@syntax-car (lambda (cg32c0@x) (if (cg2e80@stx? cg32c0@x) (cg2e9c@mkstx (cg2eae@syntax-car (cg2e82@stx-expr cg32c0@x)) (cg2e86@stx-mark* cg32c0@x) (cg2e8a@stx-subst* cg32c0@x) (cg2e8e@stx-ae* cg32c0@x)) (if (cg29f8@cg28ca@annotation? cg32c0@x) (cg2eae@syntax-car (cg29fa@cg28ce@annotation-expression cg32c0@x)) (if (pair? cg32c0@x) (car cg32c0@x) (assertion-violation 'syntax-car '"BUG: not a pair" cg32c0@x)))))) (set! cg4b38@cg2eae@syntax-car cg2eae@syntax-car) (set! cg2eb0@syntax-cdr (lambda (cg32c2@x) (if (cg2e80@stx? cg32c2@x) (cg2e9c@mkstx (cg2eb0@syntax-cdr (cg2e82@stx-expr cg32c2@x)) (cg2e86@stx-mark* cg32c2@x) (cg2e8a@stx-subst* cg32c2@x) (cg2e8e@stx-ae* cg32c2@x)) (if (cg29f8@cg28ca@annotation? cg32c2@x) (cg2eb0@syntax-cdr (cg29fa@cg28ce@annotation-expression cg32c2@x)) (if (pair? cg32c2@x) (cdr cg32c2@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" cg32c2@x)))))) (set! cg4b39@cg2eb0@syntax-cdr cg2eb0@syntax-cdr) (set! cg2eb2@syntax->list (lambda (cg32c4@x) (if (cg2ea6@syntax-pair? cg32c4@x) (cons (cg2eae@syntax-car cg32c4@x) (cg2eb2@syntax->list (cg2eb0@syntax-cdr cg32c4@x))) (if (cg2eaa@syntax-null? cg32c4@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" cg32c4@x))))) (set! cg4b3a@cg2eb2@syntax->list cg2eb2@syntax->list) (set! cg2eb4@id? (lambda (cg32c6@x) (and (cg2e80@stx? cg32c6@x) (symbol? (cg2e82@stx-expr cg32c6@x))))) (set! cg4b3b@cg2eb4@id? cg2eb4@id?) (set! cg2eb6@id->sym (lambda (cg32c8@x) (cg2e82@stx-expr cg32c8@x))) (set! cg4b3c@cg2eb6@id->sym cg2eb6@id->sym) (set! cg2eb8@bound-id=? (lambda (cg32ca@x cg32cb@y) (and (eq? (cg2eb6@id->sym cg32ca@x) (cg2eb6@id->sym cg32cb@y)) (same-marks? (cg2e86@stx-mark* cg32ca@x) (cg2e86@stx-mark* cg32cb@y))))) (set! cg4b3d@cg2eb8@bound-id=? cg2eb8@bound-id=?) (set! cg2eba@free-id=? (lambda (cg32ce@i cg32cf@j) (let ((cg32d2@t0 (id->real-label cg32ce@i)) (cg32d3@t1 (id->real-label cg32cf@j))) (if (or cg32d2@t0 cg32d3@t1) (eq? cg32d2@t0 cg32d3@t1) (eq? (cg2eb6@id->sym cg32ce@i) (cg2eb6@id->sym cg32cf@j)))))) (set! cg4b3e@cg2eba@free-id=? cg2eba@free-id=?) (set! cg2ebc@valid-bound-ids? (lambda (cg32d6@id*) (and (for-all cg2eb4@id? cg32d6@id*) (cg2ebe@distinct-bound-ids? cg32d6@id*)))) (set! cg4b3f@cg2ebc@valid-bound-ids? cg2ebc@valid-bound-ids?) (set! cg2ebe@distinct-bound-ids? (lambda (cg32d8@id*) (or (null? cg32d8@id*) (and (not (cg2ec0@bound-id-member? (car cg32d8@id*) (cdr cg32d8@id*))) (cg2ebe@distinct-bound-ids? (cdr cg32d8@id*)))))) (set! cg4b40@cg2ebe@distinct-bound-ids? cg2ebe@distinct-bound-ids?) (set! cg2ec0@bound-id-member? (lambda (cg32da@id cg32db@id*) (and (pair? cg32db@id*) (or (cg2eb8@bound-id=? cg32da@id (car cg32db@id*)) (cg2ec0@bound-id-member? cg32da@id (cdr cg32db@id*)))))) (set! cg4b41@cg2ec0@bound-id-member? cg2ec0@bound-id-member?) (set! cg2ec2@self-evaluating? (lambda (cg32de@x) (or (number? cg32de@x) (string? cg32de@x) (char? cg32de@x) (boolean? cg32de@x) (regexp? cg32de@x) (bytevector? cg32de@x)))) (set! cg4b42@cg2ec2@self-evaluating? cg2ec2@self-evaluating?) (set! cg2ec4@strip-annotations (lambda (cg32e0@x) (if (pair? cg32e0@x) (cons (cg2ec4@strip-annotations (car cg32e0@x)) (cg2ec4@strip-annotations (cdr cg32e0@x))) (if (vector? cg32e0@x) (vector-map cg2ec4@strip-annotations cg32e0@x) (if (cg29f8@cg28ca@annotation? cg32e0@x) (cg29f7@cg28c8@annotation-stripped cg32e0@x) cg32e0@x))))) (set! cg4b43@cg2ec4@strip-annotations cg2ec4@strip-annotations) (set! cg2ec6@strip (lambda (cg32e2@x cg32e3@m*) (if (cg2e3a@top-marked? cg32e3@m*) (if (or (cg29f8@cg28ca@annotation? cg32e2@x) (and (pair? cg32e2@x) (cg29f8@cg28ca@annotation? (car cg32e2@x))) (and (vector? cg32e2@x) (> (vector-length cg32e2@x) '0) (cg29f8@cg28ca@annotation? (vector-ref cg32e2@x '0)))) (cg2ec4@strip-annotations cg32e2@x) cg32e2@x) (let cg32e8@f ((cg32e6@x cg32e2@x)) (if (cg2e80@stx? cg32e6@x) (begin (if (pair? (cg2e82@stx-expr cg32e6@x)) (begin (set-source-info! (cg2e82@stx-expr cg32e6@x) '#f) (set-source-info! (cdr (cg2e82@stx-expr cg32e6@x)) '#f) (set-source-info! (car (cg2e82@stx-expr cg32e6@x)) '#f)) (void)) (cg2ec6@strip (cg2e82@stx-expr cg32e6@x) (cg2e86@stx-mark* cg32e6@x))) (if (cg29f8@cg28ca@annotation? cg32e6@x) (cg29f7@cg28c8@annotation-stripped cg32e6@x) (if (pair? cg32e6@x) (let ((cg32ea@a (cg32e8@f (car cg32e6@x))) (cg32eb@d (cg32e8@f (cdr cg32e6@x)))) (if (and (eq? cg32ea@a (car cg32e6@x)) (eq? cg32eb@d (cdr cg32e6@x))) cg32e6@x (cons cg32ea@a cg32eb@d))) (if (vector? cg32e6@x) (let ((cg32ee@old (vector->list cg32e6@x))) (let ((cg32f0@new (map cg32e8@f cg32ee@old))) (if (for-all eq? cg32ee@old cg32f0@new) cg32e6@x (list->vector cg32f0@new)))) cg32e6@x)))))))) (set! cg4b44@cg2ec6@strip cg2ec6@strip) (set! cg2ec8@stx->datum (lambda (cg32f2@x) (cg2ec6@strip cg32f2@x '()))) (set! cg4b45@cg2ec8@stx->datum cg2ec8@stx->datum) (set! cg2eca@id->label (lambda (cg32f4@id) (or (id->real-label cg32f4@id) (let ((cg32f6@t (cg31ab@top-level-context))) (if cg32f6@t ((lambda (cg32f8@env) (let ((cg32fa@rib (cg315b@interaction-env-rib cg32f8@env))) (call-with-values (lambda () (cg2e44@gen-define-label+loc cg32f4@id cg32fa@rib)) (lambda (cg3300@cg32fd cg3301@cg32ff) (let ((cg3304@loc_ cg3301@cg32ff) (cg3305@lab cg3300@cg32fd)) (begin (cg2e6a@extend-rib! cg32fa@rib cg32f4@id cg3305@lab) cg3305@lab)))))) cg32f6@t) '#f))))) (set! cg4b46@cg2eca@id->label cg2eca@id->label) (set! cg2ecc@label->binding (lambda (cg3308@x cg3309@r) (let ((cg330c@t (cg2ccf@cg2b1c@imported-label->binding cg3308@x))) (if cg330c@t ((lambda (cg330e@b) (if (and (pair? cg330e@b) (eq? (car cg330e@b) '$core-rtd)) (cons '$rtd (map cg3071@bless (cdr cg330e@b))) (if (and (pair? cg330e@b) (eq? (car cg330e@b) 'global-rtd)) (let ((cg3310@lib (cadr cg330e@b)) (cg3311@loc (cddr cg330e@b))) (cons '$rtd (symbol-value cg3311@loc))) cg330e@b))) cg330c@t) (let ((cg3314@t (assq cg3308@x cg3309@r))) (if cg3314@t (cdr cg3314@t) (let ((cg3316@t (cg31ab@top-level-context))) (if cg3316@t ((lambda (cg3318@env) (let ((cg331a@t (assq cg3308@x (cg3163@interaction-env-locs cg3318@env)))) (if cg331a@t ((lambda (cg331c@p) (cons* 'lexical (cdr cg331c@p) '#f)) cg331a@t) '(displaced-lexical . #f)))) cg3316@t) '(displaced-lexical . #f))))))))) (set! cg4b47@cg2ecc@label->binding cg2ecc@label->binding) (set! cg2ece@make-binding cons) (set! cg4b48@cg2ece@make-binding cg2ece@make-binding) (set! cg2ed0@binding-type car) (set! cg4b49@cg2ed0@binding-type cg2ed0@binding-type) (set! cg2ed2@binding-value cdr) (set! cg4b4a@cg2ed2@binding-value cg2ed2@binding-value) (set! cg2ed4@raise-unbound-error (lambda (cg331e@id) (cg3199@syntax-violation* '#f '"unbound identifier" cg331e@id (make-undefined-violation)))) (set! cg4b4b@cg2ed4@raise-unbound-error cg2ed4@raise-unbound-error) (set! cg2ed6@syntax-type (lambda (cg3320@e cg3321@r) (if (cg2eb4@id? cg3320@e) (let ((cg3324@id cg3320@e)) (let ((cg3326@label (cg2eca@id->label cg3324@id))) (let ((cg3328@b (cg2ecc@label->binding cg3326@label cg3321@r))) (let ((cg332a@type (cg2ed0@binding-type cg3328@b))) (begin (if (not cg3326@label) (cg2ed4@raise-unbound-error cg3324@id) (void)) (let ((cg332c@t cg332a@type)) (if (memv cg332c@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values cg332a@type (cg2ed2@binding-value cg3328@b) cg3324@id) (values 'other '#f '#f)))))))) (if (cg2ea6@syntax-pair? cg3320@e) (let ((cg332e@id (cg2eae@syntax-car cg3320@e))) (if (cg2eb4@id? cg332e@id) (let ((cg3330@label (cg2eca@id->label cg332e@id))) (let ((cg3332@b (cg2ecc@label->binding cg3330@label cg3321@r))) (let ((cg3334@type (cg2ed0@binding-type cg3332@b))) (begin (if (not cg3330@label) (cg2ed4@raise-unbound-error cg332e@id) (void)) (let ((cg3336@t cg3334@type)) (if (memv cg3336@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values cg3334@type (cg2ed2@binding-value cg3332@b) cg332e@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((cg3338@d (cg2ec8@stx->datum cg3320@e))) (if (cg2ec2@self-evaluating? cg3338@d) (values 'constant cg3338@d '#f) (values 'other '#f '#f))))))) (set! cg4b4c@cg2ed6@syntax-type cg2ed6@syntax-type) (set! cg2ee4@sanitize-binding (lambda (cg333a@x cg333b@src) (if (procedure? cg333a@x) (cons* 'local-macro cg333a@x cg333b@src) (if (and (pair? cg333a@x) (eq? (car cg333a@x) 'macro!) (procedure? (cdr cg333a@x))) (cons* 'local-macro! (cdr cg333a@x) cg333b@src) (if (and (pair? cg333a@x) (eq? (car cg333a@x) '$rtd)) cg333a@x (assertion-violation 'expand '"invalid transformer" cg333a@x)))))) (set! cg4b4d@cg2ee4@sanitize-binding cg2ee4@sanitize-binding) (set! cg2ee6@make-variable-transformer (lambda (cg333e@x) (if (procedure? cg333e@x) (cons 'macro! cg333e@x) (assertion-violation 'make-variable-transformer '"not a procedure" cg333e@x)))) (set! cg4b4e@cg2ee6@make-variable-transformer cg2ee6@make-variable-transformer) (set! cg2ee8@variable-transformer? (lambda (cg3340@x) (and (pair? cg3340@x) (eq? (car cg3340@x) 'macro!) (procedure? (cdr cg3340@x))))) (set! cg4b4f@cg2ee8@variable-transformer? cg2ee8@variable-transformer?) (set! cg2eea@variable-transformer-procedure (lambda (cg3342@x) (if (cg2ee8@variable-transformer? cg3342@x) (cdr cg3342@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" cg3342@x)))) (set! cg4b50@cg2eea@variable-transformer-procedure cg2eea@variable-transformer-procedure) (set! cg2eec@make-eval-transformer (lambda (cg3344@x) (cg2ee4@sanitize-binding (eval-core (cg2a5a@cg2a12@expanded->core cg3344@x)) cg3344@x))) (set! cg4b51@cg2eec@make-eval-transformer cg2eec@make-eval-transformer) (set! cg303d@parse-define (lambda (cg3346@x) (let ((cg3348@t cg3346@x)) (let ((cg334a@ls/false (cg30bb@syntax-dispatch cg3348@t '(_ (any . any) any . each-any)))) (if (and cg334a@ls/false (apply (lambda (cg334c@id cg334d@fmls cg334e@b cg334f@b*) (cg2eb4@id? cg334c@id)) cg334a@ls/false)) (apply (lambda (cg3354@id cg3355@fmls cg3356@b cg3357@b*) (begin (cg30e1@verify-formals cg3355@fmls cg3346@x) (values cg3354@id (cons 'defun (cons cg3355@fmls (cons cg3356@b cg3357@b*)))))) cg334a@ls/false) (let ((cg335c@t cg3348@t)) (let ((cg335e@ls/false (cg30bb@syntax-dispatch cg335c@t '(_ any any)))) (if (and cg335e@ls/false (apply (lambda (cg3360@id cg3361@val) (cg2eb4@id? cg3360@id)) cg335e@ls/false)) (apply (lambda (cg3364@id cg3365@val) (values cg3364@id (cons 'expr cg3365@val))) cg335e@ls/false) (let ((cg3368@t cg335c@t)) (let ((cg336a@ls/false (cg30bb@syntax-dispatch cg3368@t '(_ any)))) (if (and cg336a@ls/false (apply (lambda (cg336c@id) (cg2eb4@id? cg336c@id)) cg336a@ls/false)) (apply (lambda (cg336e@id) (values cg336e@id (cons 'expr (cg3071@bless '(void))))) cg336a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3368@t)))))))))))) (set! cg4b52@cg303d@parse-define cg303d@parse-define) (set! cg303f@parse-define-syntax (lambda (cg3370@x) (let ((cg3372@t cg3370@x)) (let ((cg3374@ls/false (cg30bb@syntax-dispatch cg3372@t '(_ any any)))) (if (and cg3374@ls/false (apply (lambda (cg3376@id cg3377@val) (cg2eb4@id? cg3376@id)) cg3374@ls/false)) (apply (lambda (cg337a@id cg337b@val) (values cg337a@id cg337b@val)) cg3374@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3372@t)))))) (set! cg4b53@cg303f@parse-define-syntax cg303f@parse-define-syntax) (set! cg3041@scheme-stx-hashtable (make-eq-hashtable)) (set! cg4b54@cg3041@scheme-stx-hashtable cg3041@scheme-stx-hashtable) (set! cg3043@scheme-stx (lambda (cg337e@sym) (or (hashtable-ref cg3041@scheme-stx-hashtable cg337e@sym '#f) (let ((cg3380@subst (cg2cab@cg2ad4@library-subst (cg2cc9@cg2b10@find-library-by-name '(psyntax system $all))))) (let ((cg3382@stx (make-simple-struct 'stx '5 (list cg337e@sym cg2e38@top-mark* '() '())))) (let ((cg3384@stx (let ((cg3386@t (assq cg337e@sym cg3380@subst))) (if cg3386@t ((lambda (cg3388@x) (let ((cg338a@name (car cg3388@x)) (cg338b@label (cdr cg3388@x))) (cg2ea0@add-subst (make-simple-struct 'rib '6 (list (list cg338a@name) (list cg2e38@top-mark*) (list cg338b@label) '#f '#f)) cg3382@stx))) cg3386@t) cg3382@stx)))) (begin (hashtable-set! cg3041@scheme-stx-hashtable cg337e@sym cg3384@stx) cg3384@stx))))))) (set! cg4b55@cg3043@scheme-stx cg3043@scheme-stx) (set! cg3045@lexical-var car) (set! cg4b56@cg3045@lexical-var cg3045@lexical-var) (set! cg3047@lexical-mutable? cdr) (set! cg4b57@cg3047@lexical-mutable? cg3047@lexical-mutable?) (set! cg3049@set-lexical-mutable! set-cdr!) (set! cg4b58@cg3049@set-lexical-mutable! cg3049@set-lexical-mutable!) (set! cg304b@add-lexical (lambda (cg338e@lab cg338f@lex cg3390@r) (cons (cons* cg338e@lab 'lexical cg338f@lex '#f) cg3390@r))) (set! cg4b59@cg304b@add-lexical cg304b@add-lexical) (set! cg304d@add-lexicals (lambda (cg3394@lab* cg3395@lex* cg3396@r) (if (null? cg3394@lab*) cg3396@r (cg304d@add-lexicals (cdr cg3394@lab*) (cdr cg3395@lex*) (cg304b@add-lexical (car cg3394@lab*) (car cg3395@lex*) cg3396@r))))) (set! cg4b5a@cg304d@add-lexicals cg304d@add-lexicals) (set! cg304f@letrec-helper (lambda (cg339a@e cg339b@r cg339c@mr cg339d@build) (let ((cg33a2@t cg339a@e)) (let ((cg33a4@ls/false (cg30bb@syntax-dispatch cg33a2@t '(_ #(each (any any)) any . each-any)))) (if cg33a4@ls/false (apply (lambda (cg33a6@lhs* cg33a7@rhs* cg33a8@b cg33a9@b*) (if (not (cg2ebc@valid-bound-ids? cg33a6@lhs*)) (cg3075@invalid-fmls-error cg339a@e cg33a6@lhs*) (let ((cg33ae@lex* (map cg2e3c@gen-lexical cg33a6@lhs*)) (cg33af@lab* (map cg2e40@gen-label cg33a6@lhs*))) (let ((cg33b2@rib (cg2e74@make-full-rib cg33a6@lhs* cg33af@lab*)) (cg33b3@r (cg304d@add-lexicals cg33af@lab* cg33ae@lex* cg339b@r))) (let ((cg33b6@body (cg30f3@chi-internal (cg2ea0@add-subst cg33b2@rib (cons cg33a8@b cg33a9@b*)) cg33b3@r cg339c@mr)) (cg33b7@rhs* (cg30d9@chi-expr* (map (lambda (cg33ba@x) (cg2ea0@add-subst cg33b2@rib cg33ba@x)) cg33a7@rhs*) cg33b3@r cg339c@mr))) (cg339d@build '#f cg33ae@lex* cg33b7@rhs* cg33b6@body)))))) cg33a4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg33a2@t)))))) (set! cg4b5b@cg304f@letrec-helper cg304f@letrec-helper) (set! cg3051@let-transformer (lambda (cg33bc@e cg33bd@r cg33be@mr) (let ((cg33c2@t cg33bc@e)) (let ((cg33c4@ls/false (cg30bb@syntax-dispatch cg33c2@t '(_ #(each (any any)) any . each-any)))) (if cg33c4@ls/false (apply (lambda (cg33c6@lhs* cg33c7@rhs* cg33c8@b cg33c9@b*) (if (not (cg2ebc@valid-bound-ids? cg33c6@lhs*)) (cg3075@invalid-fmls-error cg33bc@e cg33c6@lhs*) (let ((cg33ce@lex* (map cg2e3c@gen-lexical cg33c6@lhs*)) (cg33cf@lab* (map cg2e40@gen-label cg33c6@lhs*)) (cg33d0@rhs* (cg30d9@chi-expr* cg33c7@rhs* cg33bd@r cg33be@mr))) (let ((cg33d4@rib (cg2e74@make-full-rib cg33c6@lhs* cg33cf@lab*)) (cg33d5@r (cg304d@add-lexicals cg33cf@lab* cg33ce@lex* cg33bd@r))) (let ((cg33d8@body (cg30f3@chi-internal (cg2ea0@add-subst cg33d4@rib (cons cg33c8@b cg33c9@b*)) cg33d5@r cg33be@mr))) (cg2e1c@cg2d7f@build-let '#f cg33ce@lex* cg33d0@rhs* cg33d8@body)))))) cg33c4@ls/false) (let ((cg33da@t cg33c2@t)) (let ((cg33dc@ls/false (cg30bb@syntax-dispatch cg33da@t '(_ any #(each (any any)) any . each-any)))) (if cg33dc@ls/false (apply (lambda (cg33de@loop cg33df@lhs* cg33e0@rhs* cg33e1@b cg33e2@b*) (if (not (cg2ebc@valid-bound-ids? cg33df@lhs*)) (cg3075@invalid-fmls-error cg33bc@e cg33df@lhs*) (let ((cg33e8@lex* (map cg2e3c@gen-lexical cg33df@lhs*)) (cg33e9@lab* (map cg2e40@gen-label cg33df@lhs*)) (cg33ea@rhs* (cg30d9@chi-expr* cg33e0@rhs* cg33bd@r cg33be@mr)) (cg33eb@loop-lex (cg2e3c@gen-lexical cg33de@loop)) (cg33ec@loop-lab (cg2e40@gen-label cg33de@loop))) (let ((cg33f2@loop-rib (cg2e74@make-full-rib (list cg33de@loop) (list cg33ec@loop-lab))) (cg33f3@rib (cg2e74@make-full-rib cg33df@lhs* cg33e9@lab*)) (cg33f4@r (cg304d@add-lexicals (cons cg33ec@loop-lab cg33e9@lab*) (cons cg33eb@loop-lex cg33e8@lex*) cg33bd@r))) (let ((cg33f8@body (cg30f3@chi-internal (cg2ea0@add-subst cg33f2@loop-rib (cg2ea0@add-subst cg33f3@rib (cons cg33e1@b cg33e2@b*))) cg33f4@r cg33be@mr))) (cg2e1d@cg2d81@build-named-let '#f cg33eb@loop-lex cg33e8@lex* cg33ea@rhs* cg33f8@body)))))) cg33dc@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg33da@t))))))))) (set! cg4b5c@cg3051@let-transformer cg3051@let-transformer) (set! cg3053@letrec-transformer (lambda (cg33fa@e cg33fb@r cg33fc@mr) (cg304f@letrec-helper cg33fa@e cg33fb@r cg33fc@mr cg2e1b@cg2d7d@build-letrec))) (set! cg4b5d@cg3053@letrec-transformer cg3053@letrec-transformer) (set! cg3055@letrec*-transformer (lambda (cg3400@e cg3401@r cg3402@mr) (cg304f@letrec-helper cg3400@e cg3401@r cg3402@mr cg2e1e@cg2d83@build-letrec*))) (set! cg4b5e@cg3055@letrec*-transformer cg3055@letrec*-transformer) (set! cg3057@fluid-let-syntax-transformer (lambda (cg3406@e cg3407@r cg3408@mr) (letrec* ((cg340d@lookup (lambda (cg3420@x) (or (cg2eca@id->label cg3420@x) (cg319b@syntax-violation '#f '"unbound identifier" cg3406@e cg3420@x))))) (let ((cg340e@t cg3406@e)) (let ((cg3410@ls/false (cg30bb@syntax-dispatch cg340e@t '(_ #(each (any any)) any . each-any)))) (if cg3410@ls/false (apply (lambda (cg3412@lhs* cg3413@rhs* cg3414@b cg3415@b*) (if (not (cg2ebc@valid-bound-ids? cg3412@lhs*)) (cg3075@invalid-fmls-error cg3406@e cg3412@lhs*) (let ((cg341a@lab* (map cg340d@lookup cg3412@lhs*)) (cg341b@rhs* (map (lambda (cg341e@x) (cg2eec@make-eval-transformer (cg3115@expand-transformer cg341e@x cg3408@mr))) cg3413@rhs*))) (cg30f3@chi-internal (cons cg3414@b cg3415@b*) (append (map cons cg341a@lab* cg341b@rhs*) cg3407@r) (append (map cons cg341a@lab* cg341b@rhs*) cg3408@mr))))) cg3410@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg340e@t))))))) (set! cg4b5f@cg3057@fluid-let-syntax-transformer cg3057@fluid-let-syntax-transformer) (set! cg3059@type-descriptor-transformer (lambda (cg3422@e cg3423@r cg3424@mr) (let ((cg3428@t cg3422@e)) (let ((cg342a@ls/false (cg30bb@syntax-dispatch cg3428@t '(_ any)))) (if (and cg342a@ls/false (apply (lambda (cg342c@id) (cg2eb4@id? cg342c@id)) cg342a@ls/false)) (apply (lambda (cg342e@id) (let ((cg3430@lab (cg2eca@id->label cg342e@id))) (let ((cg3432@b (cg2ecc@label->binding cg3430@lab cg3423@r))) (let ((cg3434@type (cg2ed0@binding-type cg3432@b))) (begin (if (not cg3430@lab) (cg2ed4@raise-unbound-error cg342e@id) (void)) (if (not (and (eq? cg3434@type '$rtd) (not (list? (cg2ed2@binding-value cg3432@b))))) (cg319b@syntax-violation '#f '"not a record type" cg3422@e) (void)) (list 'quote (cg2ed2@binding-value cg3432@b))))))) cg342a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3428@t)))))) (set! cg4b60@cg3059@type-descriptor-transformer cg3059@type-descriptor-transformer) (set! cg305b@record-type-descriptor-transformer (lambda (cg3436@e cg3437@r cg3438@mr) (let ((cg343c@t cg3436@e)) (let ((cg343e@ls/false (cg30bb@syntax-dispatch cg343c@t '(_ any)))) (if (and cg343e@ls/false (apply (lambda (cg3440@id) (cg2eb4@id? cg3440@id)) cg343e@ls/false)) (apply (lambda (cg3442@id) (let ((cg3444@lab (cg2eca@id->label cg3442@id))) (let ((cg3446@b (cg2ecc@label->binding cg3444@lab cg3437@r))) (let ((cg3448@type (cg2ed0@binding-type cg3446@b))) (begin (if (not cg3444@lab) (cg2ed4@raise-unbound-error cg3442@id) (void)) (if (not (and (eq? cg3448@type '$rtd) (list? (cg2ed2@binding-value cg3446@b)))) (cg319b@syntax-violation '#f '"not a record type" cg3436@e) (void)) (cg30dd@chi-expr (car (cg2ed2@binding-value cg3446@b)) cg3437@r cg3438@mr)))))) cg343e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg343c@t)))))) (set! cg4b61@cg305b@record-type-descriptor-transformer cg305b@record-type-descriptor-transformer) (set! cg305d@record-constructor-descriptor-transformer (lambda (cg344a@e cg344b@r cg344c@mr) (let ((cg3450@t cg344a@e)) (let ((cg3452@ls/false (cg30bb@syntax-dispatch cg3450@t '(_ any)))) (if (and cg3452@ls/false (apply (lambda (cg3454@id) (cg2eb4@id? cg3454@id)) cg3452@ls/false)) (apply (lambda (cg3456@id) (let ((cg3458@lab (cg2eca@id->label cg3456@id))) (let ((cg345a@b (cg2ecc@label->binding cg3458@lab cg344b@r))) (let ((cg345c@type (cg2ed0@binding-type cg345a@b))) (begin (if (not cg3458@lab) (cg2ed4@raise-unbound-error cg3456@id) (void)) (if (not (and (eq? cg345c@type '$rtd) (list? (cg2ed2@binding-value cg345a@b)))) (cg319b@syntax-violation '#f '"invalid type" cg344a@e) (void)) (cg30dd@chi-expr (cadr (cg2ed2@binding-value cg345a@b)) cg344b@r cg344c@mr)))))) cg3452@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3450@t)))))) (set! cg4b62@cg305d@record-constructor-descriptor-transformer cg305d@record-constructor-descriptor-transformer) (set! cg305f@when-macro (lambda (cg345e@e) (let ((cg3460@t cg345e@e)) (let ((cg3462@ls/false (cg30bb@syntax-dispatch cg3460@t '(_ any any . each-any)))) (if cg3462@ls/false (apply (lambda (cg3464@test cg3465@e cg3466@e*) (cg3071@bless (list 'if cg3464@test (cons 'begin (cons cg3465@e cg3466@e*))))) cg3462@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3460@t)))))) (set! cg4b63@cg305f@when-macro cg305f@when-macro) (set! cg3061@unless-macro (lambda (cg346a@e) (let ((cg346c@t cg346a@e)) (let ((cg346e@ls/false (cg30bb@syntax-dispatch cg346c@t '(_ any any . each-any)))) (if cg346e@ls/false (apply (lambda (cg3470@test cg3471@e cg3472@e*) (cg3071@bless (list 'if (list 'not cg3470@test) (cons 'begin (cons cg3471@e cg3472@e*))))) cg346e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg346c@t)))))) (set! cg4b64@cg3061@unless-macro cg3061@unless-macro) (set! cg3063@if-transformer (lambda (cg3476@e cg3477@r cg3478@mr) (let ((cg347c@t cg3476@e)) (let ((cg347e@ls/false (cg30bb@syntax-dispatch cg347c@t '(_ any any any)))) (if cg347e@ls/false (apply (lambda (cg3480@e0 cg3481@e1 cg3482@e2) (list 'if (cg30dd@chi-expr cg3480@e0 cg3477@r cg3478@mr) (cg30dd@chi-expr cg3481@e1 cg3477@r cg3478@mr) (cg30dd@chi-expr cg3482@e2 cg3477@r cg3478@mr))) cg347e@ls/false) (let ((cg3486@t cg347c@t)) (let ((cg3488@ls/false (cg30bb@syntax-dispatch cg3486@t '(_ any any)))) (if cg3488@ls/false (apply (lambda (cg348a@e0 cg348b@e1) (list 'if (cg30dd@chi-expr cg348a@e0 cg3477@r cg3478@mr) (cg30dd@chi-expr cg348b@e1 cg3477@r cg3478@mr) (cg2e1a@cg2d7b@build-void))) cg3488@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3486@t))))))))) (set! cg4b65@cg3063@if-transformer cg3063@if-transformer) (set! cg3065@and-transformer (lambda (cg348e@e cg348f@r cg3490@mr) (let ((cg3494@t cg348e@e)) (let ((cg3496@ls/false (cg30bb@syntax-dispatch cg3494@t '(_ . each-any)))) (if cg3496@ls/false (apply (lambda (cg3498@e*) (cons 'and (cg30d9@chi-expr* cg3498@e* cg348f@r cg3490@mr))) cg3496@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3494@t)))))) (set! cg4b66@cg3065@and-transformer cg3065@and-transformer) (set! cg3067@or-transformer (lambda (cg349a@e cg349b@r cg349c@mr) (let ((cg34a0@t cg349a@e)) (let ((cg34a2@ls/false (cg30bb@syntax-dispatch cg34a0@t '(_ . each-any)))) (if cg34a2@ls/false (apply (lambda (cg34a4@e*) (cons 'or (cg30d9@chi-expr* cg34a4@e* cg349b@r cg349c@mr))) cg34a2@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34a0@t)))))) (set! cg4b67@cg3067@or-transformer cg3067@or-transformer) (set! cg3069@case-macro (lambda (cg34a6@e) (letrec* ((cg34a9@build-last (lambda (cg34d0@cls) (let ((cg34d2@t cg34d0@cls)) (let ((cg34d4@ls/false (cg30bb@syntax-dispatch cg34d2@t '(#(scheme-id else) any . each-any)))) (if cg34d4@ls/false (apply (lambda (cg34d6@e cg34d7@e*) (cons 'begin (cons cg34d6@e cg34d7@e*))) cg34d4@ls/false) (let ((cg34da@t cg34d2@t)) (let ((cg34dc@ls/false (cg30bb@syntax-dispatch cg34da@t '_))) (if cg34dc@ls/false (apply (lambda () (cg34ab@build-one cg34d0@cls '(if #f #f))) cg34dc@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34da@t))))))))) (cg34ab@build-one (lambda (cg34c2@cls cg34c3@k) (let ((cg34c6@t cg34c2@cls)) (let ((cg34c8@ls/false (cg30bb@syntax-dispatch cg34c6@t '(each-any any . each-any)))) (if cg34c8@ls/false (apply (lambda (cg34ca@d* cg34cb@e cg34cc@e*) (list 'if (list 'memv 't (list 'quote cg34ca@d*)) (cons 'begin (cons cg34cb@e cg34cc@e*)) cg34c3@k)) cg34c8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34c6@t))))))) (let ((cg34ac@t cg34a6@e)) (let ((cg34ae@ls/false (cg30bb@syntax-dispatch cg34ac@t '(_ any)))) (if cg34ae@ls/false (apply (lambda (cg34b0@expr) (cg3071@bless (cons 'let (cons (list (list 't cg34b0@expr)) '((if #f #f)))))) cg34ae@ls/false) (let ((cg34b2@t cg34ac@t)) (let ((cg34b4@ls/false (cg30bb@syntax-dispatch cg34b2@t '(_ any any . each-any)))) (if cg34b4@ls/false (apply (lambda (cg34b6@expr cg34b7@cls cg34b8@cls*) (cg3071@bless (list 'let (list (list 't cg34b6@expr)) (let cg34c0@f ((cg34bc@cls cg34b7@cls) (cg34bd@cls* cg34b8@cls*)) (if (null? cg34bd@cls*) (cg34a9@build-last cg34bc@cls) (cg34ab@build-one cg34bc@cls (cg34c0@f (car cg34bd@cls*) (cdr cg34bd@cls*)))))))) cg34b4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34b2@t)))))))))) (set! cg4b68@cg3069@case-macro cg3069@case-macro) (set! cg306b@quote-transformer (lambda (cg34de@e cg34df@r cg34e0@mr) (let ((cg34e4@t cg34de@e)) (let ((cg34e6@ls/false (cg30bb@syntax-dispatch cg34e4@t '(_ any)))) (if cg34e6@ls/false (apply (lambda (cg34e8@datum) (list 'quote (cg2ec8@stx->datum cg34e8@datum))) cg34e6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34e4@t)))))) (set! cg4b69@cg306b@quote-transformer cg306b@quote-transformer) (set! cg306d@case-lambda-transformer (lambda (cg34ea@e cg34eb@r cg34ec@mr) (let ((cg34f0@t cg34ea@e)) (let ((cg34f2@ls/false (cg30bb@syntax-dispatch cg34f0@t '(_ . #(each (any any . each-any)))))) (if cg34f2@ls/false (apply (lambda (cg34f4@fmls* cg34f5@b* cg34f6@b**) (call-with-values (lambda () (cg30e5@chi-lambda-clause* cg34ea@e cg34f4@fmls* (map cons cg34f5@b* cg34f6@b**) cg34eb@r cg34ec@mr)) (lambda (cg34fe@cg34fb cg34ff@cg34fd) (let ((cg3502@body* cg34ff@cg34fd) (cg3503@fmls* cg34fe@cg34fb)) (cg2e18@cg2d4b@build-case-lambda '#f cg3503@fmls* cg3502@body*))))) cg34f2@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg34f0@t)))))) (set! cg4b6a@cg306d@case-lambda-transformer cg306d@case-lambda-transformer) (set! cg306f@lambda-transformer (lambda (cg3506@e cg3507@r cg3508@mr) (let ((cg350c@t cg3506@e)) (let ((cg350e@ls/false (cg30bb@syntax-dispatch cg350c@t '(_ any any . each-any)))) (if cg350e@ls/false (apply (lambda (cg3510@fmls cg3511@b cg3512@b*) (call-with-values (lambda () (cg30e3@chi-lambda-clause cg3506@e cg3510@fmls (cons cg3511@b cg3512@b*) cg3507@r cg3508@mr)) (lambda (cg351a@cg3517 cg351b@cg3519) (let ((cg351e@body cg351b@cg3519) (cg351f@fmls cg351a@cg3517)) (cg2e17@cg2d49@build-lambda '#f cg351f@fmls cg351e@body))))) cg350e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg350c@t)))))) (set! cg4b6b@cg306f@lambda-transformer cg306f@lambda-transformer) (set! cg3071@bless (lambda (cg3522@x) (cg2e9c@mkstx (let cg3526@f ((cg3524@x cg3522@x)) (if (cg2e80@stx? cg3524@x) cg3524@x (if (pair? cg3524@x) (cons (cg3526@f (car cg3524@x)) (cg3526@f (cdr cg3524@x))) (if (symbol? cg3524@x) (cg3043@scheme-stx cg3524@x) (if (vector? cg3524@x) (vector-map cg3526@f cg3524@x) cg3524@x))))) '() '() '()))) (set! cg4b6c@cg3071@bless cg3071@bless) (set! cg3073@with-syntax-macro (lambda (cg3528@e) (let ((cg352a@t cg3528@e)) (let ((cg352c@ls/false (cg30bb@syntax-dispatch cg352a@t '(_ #(each (any any)) any . each-any)))) (if cg352c@ls/false (apply (lambda (cg352e@pat* cg352f@expr* cg3530@b cg3531@b*) (let ((cg3536@idn* (let cg353a@f ((cg3538@pat* cg352e@pat*)) (if (null? cg3538@pat*) '() (call-with-values (lambda () (cg30b9@convert-pattern (car cg3538@pat*) '())) (lambda (cg3540@cg353d cg3541@cg353f) (let ((cg3544@idn* cg3541@cg353f) (cg3545@pat cg3540@cg353d)) (append cg3544@idn* (cg353a@f (cdr cg3538@pat*)))))))))) (begin (cg30e1@verify-formals (map car cg3536@idn*) cg3528@e) (let ((cg3548@t* (cg3189@generate-temporaries cg352f@expr*))) (cg3071@bless (list 'let (map list cg3548@t* cg352f@expr*) (let cg354e@f ((cg354a@pat* cg352e@pat*) (cg354b@t* cg3548@t*)) (if (null? cg354a@pat*) (cons 'begin (cons '#f (cons cg3530@b cg3531@b*))) (list 'syntax-case (car cg354b@t*) '() (list (car cg354a@pat*) (cg354e@f (cdr cg354a@pat*) (cdr cg354b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car cg354a@pat*)) (car cg354b@t*)))))))))))) cg352c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg352a@t)))))) (set! cg4b6d@cg3073@with-syntax-macro cg3073@with-syntax-macro) (set! cg3075@invalid-fmls-error (lambda (cg3550@stx cg3551@fmls) (let ((cg3554@t cg3551@fmls)) (let ((cg3556@ls/false (cg30bb@syntax-dispatch cg3554@t '#(each+ any () any)))) (if cg3556@ls/false (apply (lambda (cg3558@id* cg3559@last) (let cg355e@f ((cg355c@id* (if (cg2eb4@id? cg3559@last) (cons cg3559@last cg3558@id*) (if (cg2eaa@syntax-null? cg3559@last) cg3558@id* (cg319b@syntax-violation '#f '"not an identifier" cg3550@stx cg3559@last))))) (if (null? cg355c@id*) (values) (if (not (cg2eb4@id? (car cg355c@id*))) (cg319b@syntax-violation '#f '"not an identifier" cg3550@stx (car cg355c@id*)) (begin (cg355e@f (cdr cg355c@id*)) (if (cg2ec0@bound-id-member? (car cg355c@id*) (cdr cg355c@id*)) (cg319b@syntax-violation '#f '"duplicate binding" cg3550@stx (car cg355c@id*)) (void))))))) cg3556@ls/false) (let ((cg3560@t cg3554@t)) (let ((cg3562@ls/false (cg30bb@syntax-dispatch cg3560@t '_))) (if cg3562@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"malformed binding form" cg3550@stx cg3551@fmls)) cg3562@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3560@t))))))))) (set! cg4b6e@cg3075@invalid-fmls-error cg3075@invalid-fmls-error) (set! cg3077@let-macro (lambda (cg3564@stx) (let ((cg3566@t cg3564@stx)) (let ((cg3568@ls/false (cg30bb@syntax-dispatch cg3566@t '(_ #(each (any any)) any . each-any)))) (if cg3568@ls/false (apply (lambda (cg356a@lhs* cg356b@rhs* cg356c@b cg356d@b*) (if (cg2ebc@valid-bound-ids? cg356a@lhs*) (cg3071@bless (cons (cons 'lambda (cons cg356a@lhs* (cons cg356c@b cg356d@b*))) cg356b@rhs*)) (cg3075@invalid-fmls-error cg3564@stx cg356a@lhs*))) cg3568@ls/false) (let ((cg3572@t cg3566@t)) (let ((cg3574@ls/false (cg30bb@syntax-dispatch cg3572@t '(_ any #(each (any any)) any . each-any)))) (if (and cg3574@ls/false (apply (lambda (cg3576@f cg3577@lhs* cg3578@rhs* cg3579@b cg357a@b*) (cg2eb4@id? cg3576@f)) cg3574@ls/false)) (apply (lambda (cg3580@f cg3581@lhs* cg3582@rhs* cg3583@b cg3584@b*) (if (cg2ebc@valid-bound-ids? cg3581@lhs*) (cg3071@bless (cons (list 'letrec (list (list cg3580@f (cons 'lambda (cons cg3581@lhs* (cons cg3583@b cg3584@b*))))) cg3580@f) cg3582@rhs*)) (cg3075@invalid-fmls-error cg3564@stx cg3581@lhs*))) cg3574@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3572@t))))))))) (set! cg4b6f@cg3077@let-macro cg3077@let-macro) (set! cg3079@let-values-macro (lambda (cg358a@stx) (letrec* ((cg358d@rename (lambda (cg35f2@x cg35f3@old* cg35f4@new*) (begin (if (not (cg2eb4@id? cg35f2@x)) (cg319b@syntax-violation '#f '"not an indentifier" cg358a@stx cg35f2@x) (void)) (if (cg2ec0@bound-id-member? cg35f2@x cg35f3@old*) (cg319b@syntax-violation '#f '"duplicate binding" cg358a@stx cg35f2@x) (void)) (let ((cg35f8@y (gensym (cg31a1@syntax->datum cg35f2@x)))) (values cg35f8@y (cons cg35f2@x cg35f3@old*) (cons cg35f8@y cg35f4@new*)))))) (cg358f@rename* (lambda (cg35e0@x* cg35e1@old* cg35e2@new*) (if (null? cg35e0@x*) (values '() cg35e1@old* cg35e2@new*) (call-with-values (lambda () (cg358d@rename (car cg35e0@x*) cg35e1@old* cg35e2@new*)) (lambda (cg35e6@x cg35e7@old* cg35e8@new*) (call-with-values (lambda () (cg358f@rename* (cdr cg35e0@x*) cg35e7@old* cg35e8@new*)) (lambda (cg35ec@x* cg35ed@old* cg35ee@new*) (values (cons cg35e6@x cg35ec@x*) cg35ed@old* cg35ee@new*))))))))) (let ((cg3590@t cg358a@stx)) (let ((cg3592@ls/false (cg30bb@syntax-dispatch cg3590@t '(_ () any . each-any)))) (if cg3592@ls/false (apply (lambda (cg3594@b cg3595@b*) (cons* (cg3071@bless 'let) '() cg3594@b cg3595@b*)) cg3592@ls/false) (let ((cg3598@t cg3590@t)) (let ((cg359a@ls/false (cg30bb@syntax-dispatch cg3598@t '(_ #(each (any any)) any . each-any)))) (if cg359a@ls/false (apply (lambda (cg359c@lhs* cg359d@rhs* cg359e@b cg359f@b*) (cg3071@bless (let cg35ac@f ((cg35a4@lhs* cg359c@lhs*) (cg35a5@rhs* cg359d@rhs*) (cg35a6@old* '()) (cg35a7@new* '())) (if (null? cg35a4@lhs*) (cons 'let (cons (map list cg35a6@old* cg35a7@new*) (cons cg359e@b cg359f@b*))) (let ((cg35ae@t (car cg35a4@lhs*))) (let ((cg35b0@ls/false (cg30bb@syntax-dispatch cg35ae@t 'each-any))) (if cg35b0@ls/false (apply (lambda (cg35b2@x*) (call-with-values (lambda () (cg358f@rename* cg35b2@x* cg35a6@old* cg35a7@new*)) (lambda (cg35ba@cg35b5 cg35bb@cg35b7 cg35bc@cg35b9) (let ((cg35c0@new* cg35bc@cg35b9) (cg35c1@old* cg35bb@cg35b7) (cg35c2@y* cg35ba@cg35b5)) (list 'call-with-values (list 'lambda '() (car cg35a5@rhs*)) (list 'lambda cg35c2@y* (cg35ac@f (cdr cg35a4@lhs*) (cdr cg35a5@rhs*) cg35c1@old* cg35c0@new*))))))) cg35b0@ls/false) (let ((cg35c6@t cg35ae@t)) (let ((cg35c8@ls/false (cg30bb@syntax-dispatch cg35c6@t '#(each+ any () any)))) (if cg35c8@ls/false (apply (lambda (cg35ca@x* cg35cb@x) (call-with-values (lambda () (cg358d@rename cg35cb@x cg35a6@old* cg35a7@new*)) (lambda (cg35ce@y cg35cf@old* cg35d0@new*) (call-with-values (lambda () (cg358f@rename* cg35ca@x* cg35cf@old* cg35d0@new*)) (lambda (cg35d4@y* cg35d5@old* cg35d6@new*) (list 'call-with-values (list 'lambda '() (car cg35a5@rhs*)) (list 'lambda (append cg35d4@y* cg35ce@y) (cg35ac@f (cdr cg35a4@lhs*) (cdr cg35a5@rhs*) cg35d5@old* cg35d6@new*)))))))) cg35c8@ls/false) (let ((cg35da@t cg35c6@t)) (let ((cg35dc@ls/false (cg30bb@syntax-dispatch cg35da@t 'any))) (if cg35dc@ls/false (apply (lambda (cg35de@others) (cg319b@syntax-violation '#f '"malformed bindings" cg358a@stx cg35de@others)) cg35dc@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg35da@t)))))))))))))) cg359a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3598@t)))))))))) (set! cg4b70@cg3079@let-values-macro cg3079@let-values-macro) (set! cg307b@let*-values-macro (lambda (cg35fa@stx) (letrec* ((cg35fd@check (lambda (cg362c@x*) (if (not (null? cg362c@x*)) (let ((cg362e@x (car cg362c@x*))) (begin (if (not (cg2eb4@id? cg362e@x)) (cg319b@syntax-violation '#f '"not an identifier" cg35fa@stx cg362e@x) (void)) (cg35fd@check (cdr cg362c@x*)) (if (cg2ec0@bound-id-member? cg362e@x (cdr cg362c@x*)) (cg319b@syntax-violation '#f '"duplicate identifier" cg35fa@stx cg362e@x) (void)))) (void))))) (let ((cg35fe@t cg35fa@stx)) (let ((cg3600@ls/false (cg30bb@syntax-dispatch cg35fe@t '(_ () any . each-any)))) (if cg3600@ls/false (apply (lambda (cg3602@b cg3603@b*) (cons* (cg3071@bless 'let) '() cg3602@b cg3603@b*)) cg3600@ls/false) (let ((cg3606@t cg35fe@t)) (let ((cg3608@ls/false (cg30bb@syntax-dispatch cg3606@t '(_ #(each (any any)) any . each-any)))) (if cg3608@ls/false (apply (lambda (cg360a@lhs* cg360b@rhs* cg360c@b cg360d@b*) (cg3071@bless (let cg3616@f ((cg3612@lhs* cg360a@lhs*) (cg3613@rhs* cg360b@rhs*)) (if (null? cg3612@lhs*) (cons 'begin (cons cg360c@b cg360d@b*)) (let ((cg3618@t (car cg3612@lhs*))) (let ((cg361a@ls/false (cg30bb@syntax-dispatch cg3618@t 'each-any))) (if cg361a@ls/false (apply (lambda (cg361c@x*) (begin (cg35fd@check cg361c@x*) (list 'call-with-values (list 'lambda '() (car cg3613@rhs*)) (list 'lambda cg361c@x* (cg3616@f (cdr cg3612@lhs*) (cdr cg3613@rhs*)))))) cg361a@ls/false) (let ((cg361e@t cg3618@t)) (let ((cg3620@ls/false (cg30bb@syntax-dispatch cg361e@t '#(each+ any () any)))) (if cg3620@ls/false (apply (lambda (cg3622@x* cg3623@x) (begin (cg35fd@check (cons cg3623@x cg3622@x*)) (list 'call-with-values (list 'lambda '() (car cg3613@rhs*)) (list 'lambda (append cg3622@x* cg3623@x) (cg3616@f (cdr cg3612@lhs*) (cdr cg3613@rhs*)))))) cg3620@ls/false) (let ((cg3626@t cg361e@t)) (let ((cg3628@ls/false (cg30bb@syntax-dispatch cg3626@t 'any))) (if cg3628@ls/false (apply (lambda (cg362a@others) (cg319b@syntax-violation '#f '"malformed bindings" cg35fa@stx cg362a@others)) cg3628@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3626@t)))))))))))))) cg3608@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3606@t)))))))))) (set! cg4b71@cg307b@let*-values-macro cg307b@let*-values-macro) (set! cg307d@trace-lambda-macro (lambda (cg3630@stx) (let ((cg3632@t cg3630@stx)) (let ((cg3634@ls/false (cg30bb@syntax-dispatch cg3632@t '(_ any each-any any . each-any)))) (if cg3634@ls/false (apply (lambda (cg3636@who cg3637@fmls cg3638@b cg3639@b*) (if (cg2ebc@valid-bound-ids? cg3637@fmls) (cg3071@bless (list 'make-traced-procedure (list 'quote cg3636@who) (cons 'lambda (cons cg3637@fmls (cons cg3638@b cg3639@b*))))) (cg3075@invalid-fmls-error cg3630@stx cg3637@fmls))) cg3634@ls/false) (let ((cg363e@t cg3632@t)) (let ((cg3640@ls/false (cg30bb@syntax-dispatch cg363e@t '(_ any #(each+ any () any) any . each-any)))) (if cg3640@ls/false (apply (lambda (cg3642@who cg3643@fmls cg3644@last cg3645@b cg3646@b*) (if (cg2ebc@valid-bound-ids? (cons cg3644@last cg3643@fmls)) (cg3071@bless (list 'make-traced-procedure (list 'quote cg3642@who) (cons 'lambda (cons (append cg3643@fmls cg3644@last) (cons cg3645@b cg3646@b*))))) (cg3075@invalid-fmls-error cg3630@stx (append cg3643@fmls cg3644@last)))) cg3640@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg363e@t))))))))) (set! cg4b72@cg307d@trace-lambda-macro cg307d@trace-lambda-macro) (set! cg307f@trace-define-macro (lambda (cg364c@stx) (let ((cg364e@t cg364c@stx)) (let ((cg3650@ls/false (cg30bb@syntax-dispatch cg364e@t '(_ (any . each-any) any . each-any)))) (if cg3650@ls/false (apply (lambda (cg3652@who cg3653@fmls cg3654@b cg3655@b*) (if (cg2ebc@valid-bound-ids? cg3653@fmls) (cg3071@bless (list 'define cg3652@who (list 'make-traced-procedure (list 'quote cg3652@who) (cons 'lambda (cons cg3653@fmls (cons cg3654@b cg3655@b*)))))) (cg3075@invalid-fmls-error cg364c@stx cg3653@fmls))) cg3650@ls/false) (let ((cg365a@t cg364e@t)) (let ((cg365c@ls/false (cg30bb@syntax-dispatch cg365a@t '(_ (any . #(each+ any () any)) any . each-any)))) (if cg365c@ls/false (apply (lambda (cg365e@who cg365f@fmls cg3660@last cg3661@b cg3662@b*) (if (cg2ebc@valid-bound-ids? (cons cg3660@last cg365f@fmls)) (cg3071@bless (list 'define cg365e@who (list 'make-traced-procedure (list 'quote cg365e@who) (cons 'lambda (cons (append cg365f@fmls cg3660@last) (cons cg3661@b cg3662@b*)))))) (cg3075@invalid-fmls-error cg364c@stx (append cg365f@fmls cg3660@last)))) cg365c@ls/false) (let ((cg3668@t cg365a@t)) (let ((cg366a@ls/false (cg30bb@syntax-dispatch cg3668@t '(_ any any)))) (if cg366a@ls/false (apply (lambda (cg366c@who cg366d@expr) (if (cg2eb4@id? cg366c@who) (cg3071@bless (list 'define cg366c@who (list 'let (list (list 'v cg366d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote cg366c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (cg319b@syntax-violation '#f '"invalid name" cg364c@stx))) cg366a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3668@t)))))))))))) (set! cg4b73@cg307f@trace-define-macro cg307f@trace-define-macro) (set! cg3081@trace-define-syntax-macro (lambda (cg3670@stx) (let ((cg3672@t cg3670@stx)) (let ((cg3674@ls/false (cg30bb@syntax-dispatch cg3672@t '(_ any any)))) (if cg3674@ls/false (apply (lambda (cg3676@who cg3677@expr) (if (cg2eb4@id? cg3676@who) (cg3071@bless (list 'define-syntax cg3676@who (list 'make-traced-macro (list 'quote cg3676@who) cg3677@expr))) (cg319b@syntax-violation '#f '"invalid name" cg3670@stx))) cg3674@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3672@t)))))) (set! cg4b74@cg3081@trace-define-syntax-macro cg3081@trace-define-syntax-macro) (set! cg3083@trace-let/rec-syntax (lambda (cg367a@who) (lambda (cg367c@stx) (let ((cg367e@t cg367c@stx)) (let ((cg3680@ls/false (cg30bb@syntax-dispatch cg367e@t '(_ #(each (any any)) any . each-any)))) (if cg3680@ls/false (apply (lambda (cg3682@lhs* cg3683@rhs* cg3684@b cg3685@b*) (if (cg2ebc@valid-bound-ids? cg3682@lhs*) (let ((cg368a@rhs* (map (lambda (cg368c@lhs cg368d@rhs) (list 'make-traced-macro (list 'quote cg368c@lhs) cg368d@rhs)) cg3682@lhs* cg3683@rhs*))) (cg3071@bless (cons cg367a@who (cons (map list cg3682@lhs* cg368a@rhs*) (cons cg3684@b cg3685@b*))))) (cg3075@invalid-fmls-error cg367c@stx cg3682@lhs*))) cg3680@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg367e@t))))))) (set! cg4b75@cg3083@trace-let/rec-syntax cg3083@trace-let/rec-syntax) (set! cg3085@trace-let-syntax-macro (cg3083@trace-let/rec-syntax 'let-syntax)) (set! cg4b76@cg3085@trace-let-syntax-macro cg3085@trace-let-syntax-macro) (set! cg3087@trace-letrec-syntax-macro (cg3083@trace-let/rec-syntax 'letrec-syntax)) (set! cg4b77@cg3087@trace-letrec-syntax-macro cg3087@trace-letrec-syntax-macro) (set! cg3089@guard-macro (lambda (cg3690@x) (letrec* ((cg3693@gen-clauses (lambda (cg36aa@con cg36ab@outerk cg36ac@clause*) (letrec* ((cg36b1@f (lambda (cg36ea@x cg36eb@k) (let ((cg36ee@t cg36ea@x)) (let ((cg36f0@ls/false (cg30bb@syntax-dispatch cg36ee@t '(any #(scheme-id =>) any)))) (if cg36f0@ls/false (apply (lambda (cg36f2@e cg36f3@p) (let ((cg36f6@t (gensym))) (list 'let (list (list cg36f6@t cg36f2@e)) (list 'if cg36f6@t (list cg36f3@p cg36f6@t) cg36eb@k)))) cg36f0@ls/false) (let ((cg36f8@t cg36ee@t)) (let ((cg36fa@ls/false (cg30bb@syntax-dispatch cg36f8@t '(any)))) (if cg36fa@ls/false (apply (lambda (cg36fc@e) (let ((cg36fe@t (gensym))) (list 'let (list (list cg36fe@t cg36fc@e)) (list 'if cg36fe@t cg36fe@t cg36eb@k)))) cg36fa@ls/false) (let ((cg3700@t cg36f8@t)) (let ((cg3702@ls/false (cg30bb@syntax-dispatch cg3700@t '(any any . each-any)))) (if cg3702@ls/false (apply (lambda (cg3704@e cg3705@v cg3706@v*) (list 'if cg3704@e (cons 'begin (cons cg3705@v cg3706@v*)) cg36eb@k)) cg3702@ls/false) (let ((cg370a@t cg3700@t)) (let ((cg370c@ls/false (cg30bb@syntax-dispatch cg370a@t '_))) (if cg370c@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid guard clause" cg36ea@x)) cg370c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg370a@t))))))))))))))) (cg36b3@f* (lambda (cg36c0@x*) (let ((cg36c2@t cg36c0@x*)) (let ((cg36c4@ls/false (cg30bb@syntax-dispatch cg36c2@t '()))) (if cg36c4@ls/false (apply (lambda () (let ((cg36c6@g (gensym))) (values (list cg36c6@g (list 'lambda '() (list 'raise-continuable cg36aa@con))) cg36c6@g))) cg36c4@ls/false) (let ((cg36c8@t cg36c2@t)) (let ((cg36ca@ls/false (cg30bb@syntax-dispatch cg36c8@t '((#(scheme-id else) any . each-any))))) (if cg36ca@ls/false (apply (lambda (cg36cc@e cg36cd@e*) (values (cons 'begin (cons cg36cc@e cg36cd@e*)) '#f)) cg36ca@ls/false) (let ((cg36d0@t cg36c8@t)) (let ((cg36d2@ls/false (cg30bb@syntax-dispatch cg36d0@t '(any . any)))) (if cg36d2@ls/false (apply (lambda (cg36d4@cls cg36d5@cls*) (call-with-values (lambda () (cg36b3@f* cg36d5@cls*)) (lambda (cg36dc@cg36d9 cg36dd@cg36db) (let ((cg36e0@g cg36dd@cg36db) (cg36e1@e cg36dc@cg36d9)) (values (cg36b1@f cg36d4@cls cg36e1@e) cg36e0@g))))) cg36d2@ls/false) (let ((cg36e4@t cg36d0@t)) (let ((cg36e6@ls/false (cg30bb@syntax-dispatch cg36e4@t 'any))) (if cg36e6@ls/false (apply (lambda (cg36e8@others) (cg319b@syntax-violation '#f '"invalid guard clause" cg36e8@others)) cg36e6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg36e4@t)))))))))))))))) (call-with-values (lambda () (cg36b3@f* cg36ac@clause*)) (lambda (cg36b8@cg36b5 cg36b9@cg36b7) (let ((cg36bc@raisek cg36b9@cg36b7) (cg36bd@code cg36b8@cg36b5)) (if cg36bc@raisek (list (list 'call/cc (list 'lambda (list cg36bc@raisek) (list cg36ab@outerk (list 'lambda '() cg36bd@code))))) (list cg36ab@outerk (list 'lambda '() cg36bd@code)))))))))) (let ((cg3694@t cg3690@x)) (let ((cg3696@ls/false (cg30bb@syntax-dispatch cg3694@t '(_ (any . each-any) any . each-any)))) (if (and cg3696@ls/false (apply (lambda (cg3698@con cg3699@clause* cg369a@b cg369b@b*) (cg2eb4@id? cg3698@con)) cg3696@ls/false)) (apply (lambda (cg36a0@con cg36a1@clause* cg36a2@b cg36a3@b*) (let ((cg36a8@outerk (gensym))) (cg3071@bless (list (list 'call/cc (list 'lambda (list cg36a8@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list cg36a0@con) (cg3693@gen-clauses cg36a0@con cg36a8@outerk cg36a1@clause*)) (cons 'lambda (cons '() (cons cg36a2@b cg36a3@b*))))))))))) cg3696@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3694@t))))))) (set! cg4b78@cg3089@guard-macro cg3089@guard-macro) (set! cg308b@define-enumeration-macro (lambda (cg370e@stx) (letrec* ((cg3711@set? (lambda (cg372a@x) (or (null? cg372a@x) (and (not (memq (car cg372a@x) (cdr cg372a@x))) (cg3711@set? (cdr cg372a@x)))))) (cg3713@remove-dups (lambda (cg3728@ls) (if (null? cg3728@ls) '() (cons (car cg3728@ls) (cg3713@remove-dups (remq (car cg3728@ls) (cdr cg3728@ls)))))))) (let ((cg3714@t cg370e@stx)) (let ((cg3716@ls/false (cg30bb@syntax-dispatch cg3714@t '(_ any each-any any)))) (if (and cg3716@ls/false (apply (lambda (cg3718@name cg3719@id* cg371a@maker) (and (cg2eb4@id? cg3718@name) (cg2eb4@id? cg371a@maker) (for-all cg2eb4@id? cg3719@id*))) cg3716@ls/false)) (apply (lambda (cg371e@name cg371f@id* cg3720@maker) (let ((cg3724@name* (cg3713@remove-dups (cg31a1@syntax->datum cg371f@id*))) (cg3725@mk (gensym))) (cg3071@bless (list 'begin (list 'define cg3725@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote cg3724@name*)))) (list 'define-syntax cg371e@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote cg3724@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote cg371e@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax cg3720@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote cg3720@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote cg3724@name*)) (cons 'syntax-violation (cons (list 'quote cg3720@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons cg3725@mk '('(n* ...))))))))))))) cg3716@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3714@t))))))) (set! cg4b79@cg308b@define-enumeration-macro cg308b@define-enumeration-macro) (set! cg308d@time-macro (lambda (cg372c@stx) (let ((cg372e@t cg372c@stx)) (let ((cg3730@ls/false (cg30bb@syntax-dispatch cg372e@t '(_ any)))) (if cg3730@ls/false (apply (lambda (cg3732@expr) (cg3071@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() cg3732@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) cg3730@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg372e@t)))))) (set! cg4b7a@cg308d@time-macro cg308d@time-macro) (set! cg308f@delay-macro (lambda (cg3734@stx) (let ((cg3736@t cg3734@stx)) (let ((cg3738@ls/false (cg30bb@syntax-dispatch cg3736@t '(_ any)))) (if cg3738@ls/false (apply (lambda (cg373a@expr) (cg3071@bless (list 'make-promise (list 'lambda '() cg373a@expr)))) cg3738@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3736@t)))))) (set! cg4b7b@cg308f@delay-macro cg308f@delay-macro) (set! cg3091@assert-macro (lambda (cg373c@stx) (let ((cg373e@t cg373c@stx)) (let ((cg3740@ls/false (cg30bb@syntax-dispatch cg373e@t '(_ any)))) (if cg3740@ls/false (apply (lambda (cg3742@expr) (let ((cg3744@pos (or (cg3193@expression-position cg373c@stx) (cg3193@expression-position cg3742@expr)))) (cg3071@bless (list 'let (list (list 'x cg3742@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote cg3742@expr) (list 'quote cg3744@pos))))))) cg3740@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg373e@t)))))) (set! cg4b7c@cg3091@assert-macro cg3091@assert-macro) (set! cg3093@endianness-macro (lambda (cg3746@stx) (let ((cg3748@t cg3746@stx)) (let ((cg374a@ls/false (cg30bb@syntax-dispatch cg3748@t '(_ any)))) (if cg374a@ls/false (apply (lambda (cg374c@e) (let ((cg374e@t (cg31a1@syntax->datum cg374c@e))) (if (memv cg374e@t '(little)) (cg3071@bless ''little) (if (memv cg374e@t '(big)) (cg3071@bless ''big) (cg319b@syntax-violation '#f '"endianness must be big or little" cg3746@stx))))) cg374a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3748@t)))))) (set! cg4b7d@cg3093@endianness-macro cg3093@endianness-macro) (set! cg3095@identifier-syntax-macro (lambda (cg3750@stx) (let ((cg3752@t cg3750@stx)) (let ((cg3754@ls/false (cg30bb@syntax-dispatch cg3752@t '(_ any)))) (if cg3754@ls/false (apply (lambda (cg3756@expr) (cg3071@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax cg3756@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax cg3756@expr) '((syntax (e* ...)))))))))) cg3754@ls/false) (let ((cg3758@t cg3752@t)) (let ((cg375a@ls/false (cg30bb@syntax-dispatch cg3758@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and cg375a@ls/false (apply (lambda (cg375c@id1 cg375d@expr1 cg375e@id2 cg375f@expr2 cg3760@expr3) (and (cg2eb4@id? cg375c@id1) (cg2eb4@id? cg375e@id2) (cg2eb4@id? cg375f@expr2))) cg375a@ls/false)) (apply (lambda (cg3766@id1 cg3767@expr1 cg3768@id2 cg3769@expr2 cg376a@expr3) (cg3071@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax cg3767@expr1)) (list (list 'set! 'id cg3769@expr2) (list 'syntax cg376a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons cg3767@expr1 '(e* ...))))))))) cg375a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3758@t))))))))) (set! cg4b7e@cg3095@identifier-syntax-macro cg3095@identifier-syntax-macro) (set! cg3097@do-macro (lambda (cg3770@stx) (letrec* ((cg3773@bind (lambda (cg378a@x) (let ((cg378c@t cg378a@x)) (let ((cg378e@ls/false (cg30bb@syntax-dispatch cg378c@t '(any any)))) (if cg378e@ls/false (apply (lambda (cg3790@x cg3791@init) (list cg3790@x cg3791@init cg3790@x)) cg378e@ls/false) (let ((cg3794@t cg378c@t)) (let ((cg3796@ls/false (cg30bb@syntax-dispatch cg3794@t '(any any any)))) (if cg3796@ls/false (apply (lambda (cg3798@x cg3799@init cg379a@step) (list cg3798@x cg3799@init cg379a@step)) cg3796@ls/false) (let ((cg379e@t cg3794@t)) (let ((cg37a0@ls/false (cg30bb@syntax-dispatch cg379e@t '_))) (if cg37a0@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid binding" cg3770@stx)) cg37a0@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg379e@t))))))))))))) (let ((cg3774@t cg3770@stx)) (let ((cg3776@ls/false (cg30bb@syntax-dispatch cg3774@t '(_ each-any (any . each-any) . each-any)))) (if cg3776@ls/false (apply (lambda (cg3778@binding* cg3779@test cg377a@expr* cg377b@command*) (let ((cg3780@t (map cg3773@bind cg3778@binding*))) (let ((cg3782@ls/false (cg30bb@syntax-dispatch cg3780@t '#(each (any any any))))) (if cg3782@ls/false (apply (lambda (cg3784@x* cg3785@init* cg3786@step*) (if (cg2ebc@valid-bound-ids? cg3784@x*) (cg3071@bless (list 'letrec (list (list 'loop (list 'lambda cg3784@x* (list 'if cg3779@test (cons 'begin (cons '(if #f #f) cg377a@expr*)) (cons 'begin (append cg377b@command* (list (cons 'loop cg3786@step*)))))))) (cons 'loop cg3785@init*))) (cg319b@syntax-violation '#f '"invalid bindings" cg3770@stx))) cg3782@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3780@t))))) cg3776@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3774@t))))))) (set! cg4b7f@cg3097@do-macro cg3097@do-macro) (set! cg3099@let*-macro (lambda (cg37a2@stx) (let ((cg37a4@t cg37a2@stx)) (let ((cg37a6@ls/false (cg30bb@syntax-dispatch cg37a4@t '(_ #(each (any any)) any . each-any)))) (if (and cg37a6@ls/false (apply (lambda (cg37a8@lhs* cg37a9@rhs* cg37aa@b cg37ab@b*) (for-all cg2eb4@id? cg37a8@lhs*)) cg37a6@ls/false)) (apply (lambda (cg37b0@lhs* cg37b1@rhs* cg37b2@b cg37b3@b*) (cg3071@bless (let cg37ba@f ((cg37b8@x* (map list cg37b0@lhs* cg37b1@rhs*))) (if (null? cg37b8@x*) (cons 'let (cons '() (cons cg37b2@b cg37b3@b*))) (list 'let (list (car cg37b8@x*)) (cg37ba@f (cdr cg37b8@x*))))))) cg37a6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg37a4@t)))))) (set! cg4b80@cg3099@let*-macro cg3099@let*-macro) (set! cg309b@or-macro (lambda (cg37bc@stx) (let ((cg37be@t cg37bc@stx)) (let ((cg37c0@ls/false (cg30bb@syntax-dispatch cg37be@t '(_)))) (if cg37c0@ls/false (apply (lambda () '#f) cg37c0@ls/false) (let ((cg37c2@t cg37be@t)) (let ((cg37c4@ls/false (cg30bb@syntax-dispatch cg37c2@t '(_ any . each-any)))) (if cg37c4@ls/false (apply (lambda (cg37c6@e cg37c7@e*) (cg3071@bless (let cg37ce@f ((cg37ca@e cg37c6@e) (cg37cb@e* cg37c7@e*)) (if (null? cg37cb@e*) (list 'begin '#f cg37ca@e) (list 'let (list (list 't cg37ca@e)) (list 'if 't 't (cg37ce@f (car cg37cb@e*) (cdr cg37cb@e*)))))))) cg37c4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg37c2@t))))))))) (set! cg4b81@cg309b@or-macro cg309b@or-macro) (set! cg309d@and-macro (lambda (cg37d0@stx) (let ((cg37d2@t cg37d0@stx)) (let ((cg37d4@ls/false (cg30bb@syntax-dispatch cg37d2@t '(_)))) (if cg37d4@ls/false (apply (lambda () '#t) cg37d4@ls/false) (let ((cg37d6@t cg37d2@t)) (let ((cg37d8@ls/false (cg30bb@syntax-dispatch cg37d6@t '(_ any . each-any)))) (if cg37d8@ls/false (apply (lambda (cg37da@e cg37db@e*) (cg3071@bless (let cg37e2@f ((cg37de@e cg37da@e) (cg37df@e* cg37db@e*)) (if (null? cg37df@e*) (list 'begin '#f cg37de@e) (cons 'if (cons cg37de@e (cons (cg37e2@f (car cg37df@e*) (cdr cg37df@e*)) '(#f)))))))) cg37d8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg37d6@t))))))))) (set! cg4b82@cg309d@and-macro cg309d@and-macro) (set! cg309f@cond-macro (lambda (cg37e4@stx) (let ((cg37e6@t cg37e4@stx)) (let ((cg37e8@ls/false (cg30bb@syntax-dispatch cg37e6@t '(_ any . each-any)))) (if cg37e8@ls/false (apply (lambda (cg37ea@cls cg37eb@cls*) (cg3071@bless (let cg37f2@f ((cg37ee@cls cg37ea@cls) (cg37ef@cls* cg37eb@cls*)) (if (null? cg37ef@cls*) (let ((cg37f4@t cg37ee@cls)) (let ((cg37f6@ls/false (cg30bb@syntax-dispatch cg37f4@t '(#(scheme-id else) any . each-any)))) (if cg37f6@ls/false (apply (lambda (cg37f8@e cg37f9@e*) (cons 'begin (cons cg37f8@e cg37f9@e*))) cg37f6@ls/false) (let ((cg37fc@t cg37f4@t)) (let ((cg37fe@ls/false (cg30bb@syntax-dispatch cg37fc@t '(any #(scheme-id =>) any)))) (if cg37fe@ls/false (apply (lambda (cg3800@e cg3801@p) (list 'let (list (list 't cg3800@e)) (list 'if 't (cons cg3801@p '(t))))) cg37fe@ls/false) (let ((cg3804@t cg37fc@t)) (let ((cg3806@ls/false (cg30bb@syntax-dispatch cg3804@t '(any)))) (if cg3806@ls/false (apply (lambda (cg3808@e) (cons 'or (cons cg3808@e '((if #f #f))))) cg3806@ls/false) (let ((cg380a@t cg3804@t)) (let ((cg380c@ls/false (cg30bb@syntax-dispatch cg380a@t '(any . each-any)))) (if cg380c@ls/false (apply (lambda (cg380e@e cg380f@e*) (list 'if cg380e@e (cons 'begin cg380f@e*))) cg380c@ls/false) (let ((cg3812@t cg380a@t)) (let ((cg3814@ls/false (cg30bb@syntax-dispatch cg3812@t '_))) (if cg3814@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid last clause" cg37e4@stx)) cg3814@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3812@t)))))))))))))))) (let ((cg3816@t cg37ee@cls)) (let ((cg3818@ls/false (cg30bb@syntax-dispatch cg3816@t '(#(scheme-id else) any . each-any)))) (if cg3818@ls/false (apply (lambda (cg381a@e cg381b@e*) (cg319b@syntax-violation '#f '"incorrect position of keyword else" cg37e4@stx)) cg3818@ls/false) (let ((cg381e@t cg3816@t)) (let ((cg3820@ls/false (cg30bb@syntax-dispatch cg381e@t '(any #(scheme-id =>) any)))) (if cg3820@ls/false (apply (lambda (cg3822@e cg3823@p) (list 'let (list (list 't cg3822@e)) (list 'if 't (cons cg3823@p '(t)) (cg37f2@f (car cg37ef@cls*) (cdr cg37ef@cls*))))) cg3820@ls/false) (let ((cg3826@t cg381e@t)) (let ((cg3828@ls/false (cg30bb@syntax-dispatch cg3826@t '(any)))) (if cg3828@ls/false (apply (lambda (cg382a@e) (list 'or cg382a@e (cg37f2@f (car cg37ef@cls*) (cdr cg37ef@cls*)))) cg3828@ls/false) (let ((cg382c@t cg3826@t)) (let ((cg382e@ls/false (cg30bb@syntax-dispatch cg382c@t '(any . each-any)))) (if cg382e@ls/false (apply (lambda (cg3830@e cg3831@e*) (list 'if cg3830@e (cons 'begin cg3831@e*) (cg37f2@f (car cg37ef@cls*) (cdr cg37ef@cls*)))) cg382e@ls/false) (let ((cg3834@t cg382c@t)) (let ((cg3836@ls/false (cg30bb@syntax-dispatch cg3834@t '_))) (if cg3836@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid last clause" cg37e4@stx)) cg3836@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3834@t)))))))))))))))))))) cg37e8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg37e6@t)))))) (set! cg4b83@cg309f@cond-macro cg309f@cond-macro) (set! cg30a1@do-include (lambda (cg3838@stx cg3839@id cg383a@filename) (let ((cg383e@filename (cg2ec8@stx->datum cg383a@filename))) (begin (if (not (and (string? cg383e@filename) (cg2eb4@id? cg3839@id))) (cg319b@syntax-violation '#f '"invalid syntax" cg3838@stx) (void)) (cons (cg3071@bless 'begin) (with-input-from-file cg383e@filename (lambda () (let cg3842@f ((cg3840@ls '())) (let ((cg3844@x (cg29f6@cg28c6@read-annotated))) (if (eof-object? cg3844@x) (reverse cg3840@ls) (cg3842@f (cons (cg2e94@datum->stx cg3839@id cg3844@x) cg3840@ls)))))))))))) (set! cg4b84@cg30a1@do-include cg30a1@do-include) (set! cg30a3@include-macro (lambda (cg3846@e) (let ((cg3848@t cg3846@e)) (let ((cg384a@ls/false (cg30bb@syntax-dispatch cg3848@t '(any any)))) (if cg384a@ls/false (apply (lambda (cg384c@id cg384d@filename) (cg30a1@do-include cg3846@e cg384c@id cg384d@filename)) cg384a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3848@t)))))) (set! cg4b85@cg30a3@include-macro cg30a3@include-macro) (set! cg30a5@include-into-macro (lambda (cg3850@e) (let ((cg3852@t cg3850@e)) (let ((cg3854@ls/false (cg30bb@syntax-dispatch cg3852@t '(_ any any)))) (if cg3854@ls/false (apply (lambda (cg3856@id cg3857@filename) (cg30a1@do-include cg3850@e cg3856@id cg3857@filename)) cg3854@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3852@t)))))) (set! cg4b86@cg30a5@include-into-macro cg30a5@include-into-macro) (set! cg30a7@syntax-rules-macro (lambda (cg385a@e) (let ((cg385c@t cg385a@e)) (let ((cg385e@ls/false (cg30bb@syntax-dispatch cg385c@t '(_ each-any . #(each (any any)))))) (if cg385e@ls/false (apply (lambda (cg3860@lits cg3861@pat* cg3862@tmp*) (begin (cg30c1@verify-literals cg3860@lits cg385a@e) (cg3071@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons cg3860@lits (map (lambda (cg3866@pat cg3867@tmp) (let ((cg386a@t cg3866@pat)) (let ((cg386c@ls/false (cg30bb@syntax-dispatch cg386a@t '(_ . any)))) (if cg386c@ls/false (apply (lambda (cg386e@rest) (list (cons 'g cg386e@rest) (list 'syntax cg3867@tmp))) cg386c@ls/false) (let ((cg3870@t cg386a@t)) (let ((cg3872@ls/false (cg30bb@syntax-dispatch cg3870@t '_))) (if cg3872@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid syntax-rules pattern" cg385a@e cg3866@pat)) cg3872@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3870@t)))))))) cg3861@pat* cg3862@tmp*)))))))) cg385e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg385c@t)))))) (set! cg4b87@cg30a7@syntax-rules-macro cg30a7@syntax-rules-macro) (set! cg30a9@quasiquote-macro (letrec* ((cg3875@datum (lambda (cg3976@x) (list (cg3043@scheme-stx 'quote) (cg2e9c@mkstx cg3976@x '() '() '())))) (cg3891@quasicons* (lambda (cg396e@x cg396f@y) (let cg3974@f ((cg3972@x cg396e@x)) (if (null? cg3972@x) cg396f@y (cg3893@quasicons (car cg3972@x) (cg3974@f (cdr cg3972@x))))))) (cg3893@quasicons (lambda (cg3948@x cg3949@y) (let ((cg394c@t cg3949@y)) (let ((cg394e@ls/false (cg30bb@syntax-dispatch cg394c@t '(#(scheme-id quote) any)))) (if cg394e@ls/false (apply (lambda (cg3950@dy) (let ((cg3952@t cg3948@x)) (let ((cg3954@ls/false (cg30bb@syntax-dispatch cg3952@t '(#(scheme-id quote) any)))) (if cg3954@ls/false (apply (lambda (cg3956@dx) (list (cg3043@scheme-stx 'quote) (cons cg3956@dx cg3950@dy))) cg3954@ls/false) (let ((cg3958@t cg3952@t)) (let ((cg395a@ls/false (cg30bb@syntax-dispatch cg3958@t '_))) (if cg395a@ls/false (apply (lambda () (let ((cg395c@t cg3950@dy)) (let ((cg395e@ls/false (cg30bb@syntax-dispatch cg395c@t '()))) (if cg395e@ls/false (apply (lambda () (list (cg3043@scheme-stx 'list) cg3948@x)) cg395e@ls/false) (let ((cg3960@t cg395c@t)) (let ((cg3962@ls/false (cg30bb@syntax-dispatch cg3960@t '_))) (if cg3962@ls/false (apply (lambda () (list (cg3043@scheme-stx 'cons) cg3948@x cg3949@y)) cg3962@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3960@t)))))))) cg395a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3958@t)))))))) cg394e@ls/false) (let ((cg3964@t cg394c@t)) (let ((cg3966@ls/false (cg30bb@syntax-dispatch cg3964@t '(#(scheme-id list) . each-any)))) (if cg3966@ls/false (apply (lambda (cg3968@stuff) (cons* (cg3043@scheme-stx 'list) cg3948@x cg3968@stuff)) cg3966@ls/false) (let ((cg396a@t cg3964@t)) (let ((cg396c@ls/false (cg30bb@syntax-dispatch cg396a@t '_))) (if cg396c@ls/false (apply (lambda () (list (cg3043@scheme-stx 'cons) cg3948@x cg3949@y)) cg396c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg396a@t)))))))))))) (cg3895@quasiappend (lambda (cg392e@x cg392f@y) (let ((cg3932@ls (let cg3936@f ((cg3934@x cg392e@x)) (if (null? cg3934@x) (let ((cg3938@t cg392f@y)) (let ((cg393a@ls/false (cg30bb@syntax-dispatch cg3938@t '(#(scheme-id quote) ())))) (if cg393a@ls/false (apply (lambda () '()) cg393a@ls/false) (let ((cg393c@t cg3938@t)) (let ((cg393e@ls/false (cg30bb@syntax-dispatch cg393c@t '_))) (if cg393e@ls/false (apply (lambda () (list cg392f@y)) cg393e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg393c@t))))))) (let ((cg3940@t (car cg3934@x))) (let ((cg3942@ls/false (cg30bb@syntax-dispatch cg3940@t '(#(scheme-id quote) ())))) (if cg3942@ls/false (apply (lambda () (cg3936@f (cdr cg3934@x))) cg3942@ls/false) (let ((cg3944@t cg3940@t)) (let ((cg3946@ls/false (cg30bb@syntax-dispatch cg3944@t '_))) (if cg3946@ls/false (apply (lambda () (cons (car cg3934@x) (cg3936@f (cdr cg3934@x)))) cg3946@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3944@t))))))))))) (if (null? cg3932@ls) (list (cg3043@scheme-stx 'quote) '()) (if (null? (cdr cg3932@ls)) (car cg3932@ls) (cons* (cg3043@scheme-stx 'append) cg3932@ls)))))) (cg3897@quasivector (lambda (cg38fc@x) (let ((cg38fe@pat-x cg38fc@x)) (let ((cg3900@t cg38fe@pat-x)) (let ((cg3902@ls/false (cg30bb@syntax-dispatch cg3900@t '(#(scheme-id quote) each-any)))) (if cg3902@ls/false (apply (lambda (cg3904@x*) (list (cg3043@scheme-stx 'quote) (list->vector cg3904@x*))) cg3902@ls/false) (let ((cg3906@t cg3900@t)) (let ((cg3908@ls/false (cg30bb@syntax-dispatch cg3906@t '_))) (if cg3908@ls/false (apply (lambda () (let cg3910@f ((cg390a@x cg38fc@x) (cg390b@k (lambda (cg390e@ls) (cons* (cg3043@scheme-stx 'vector) cg390e@ls)))) (let ((cg3912@t cg390a@x)) (let ((cg3914@ls/false (cg30bb@syntax-dispatch cg3912@t '(#(scheme-id quote) each-any)))) (if cg3914@ls/false (apply (lambda (cg3916@x*) (cg390b@k (map (lambda (cg3918@x) (list (cg3043@scheme-stx 'quote) cg3918@x)) cg3916@x*))) cg3914@ls/false) (let ((cg391a@t cg3912@t)) (let ((cg391c@ls/false (cg30bb@syntax-dispatch cg391a@t '(#(scheme-id list) . each-any)))) (if cg391c@ls/false (apply (lambda (cg391e@x*) (cg390b@k cg391e@x*)) cg391c@ls/false) (let ((cg3920@t cg391a@t)) (let ((cg3922@ls/false (cg30bb@syntax-dispatch cg3920@t '(#(scheme-id cons) any any)))) (if cg3922@ls/false (apply (lambda (cg3924@x cg3925@y) (cg3910@f cg3925@y (lambda (cg3928@ls) (cg390b@k (cons cg3924@x cg3928@ls))))) cg3922@ls/false) (let ((cg392a@t cg3920@t)) (let ((cg392c@ls/false (cg30bb@syntax-dispatch cg392a@t '_))) (if cg392c@ls/false (apply (lambda () (list (cg3043@scheme-stx 'list->vector) cg38fe@pat-x)) cg392c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg392a@t))))))))))))))) cg3908@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3906@t)))))))))) (cg3899@vquasi (lambda (cg38da@p cg38db@lev) (let ((cg38de@t cg38da@p)) (let ((cg38e0@ls/false (cg30bb@syntax-dispatch cg38de@t '(any . any)))) (if cg38e0@ls/false (apply (lambda (cg38e2@p cg38e3@q) (let ((cg38e6@t cg38e2@p)) (let ((cg38e8@ls/false (cg30bb@syntax-dispatch cg38e6@t '(#(scheme-id unquote) . each-any)))) (if cg38e8@ls/false (apply (lambda (cg38ea@p) (if (= cg38db@lev '0) (cg3891@quasicons* cg38ea@p (cg3899@vquasi cg38e3@q cg38db@lev)) (cg3893@quasicons (cg3893@quasicons (cg3875@datum 'unquote) (cg389b@quasi cg38ea@p (- cg38db@lev '1))) (cg3899@vquasi cg38e3@q cg38db@lev)))) cg38e8@ls/false) (let ((cg38ec@t cg38e6@t)) (let ((cg38ee@ls/false (cg30bb@syntax-dispatch cg38ec@t '(#(scheme-id unquote-splicing) . each-any)))) (if cg38ee@ls/false (apply (lambda (cg38f0@p) (if (= cg38db@lev '0) (cg3895@quasiappend cg38f0@p (cg3899@vquasi cg38e3@q cg38db@lev)) (cg3893@quasicons (cg3893@quasicons (cg3875@datum 'unquote-splicing) (cg389b@quasi cg38f0@p (- cg38db@lev '1))) (cg3899@vquasi cg38e3@q cg38db@lev)))) cg38ee@ls/false) (let ((cg38f2@t cg38ec@t)) (let ((cg38f4@ls/false (cg30bb@syntax-dispatch cg38f2@t 'any))) (if cg38f4@ls/false (apply (lambda (cg38f6@p) (cg3893@quasicons (cg389b@quasi cg38f6@p cg38db@lev) (cg3899@vquasi cg38e3@q cg38db@lev))) cg38f4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg38f2@t))))))))))) cg38e0@ls/false) (let ((cg38f8@t cg38de@t)) (let ((cg38fa@ls/false (cg30bb@syntax-dispatch cg38f8@t '()))) (if cg38fa@ls/false (apply (lambda () (list (cg3043@scheme-stx 'quote) '())) cg38fa@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg38f8@t))))))))) (cg389b@quasi (lambda (cg38a4@p cg38a5@lev) (let ((cg38a8@t cg38a4@p)) (let ((cg38aa@ls/false (cg30bb@syntax-dispatch cg38a8@t '(#(scheme-id unquote) any)))) (if cg38aa@ls/false (apply (lambda (cg38ac@p) (if (= cg38a5@lev '0) cg38ac@p (cg3893@quasicons (cg3875@datum 'unquote) (cg389b@quasi (list cg38ac@p) (- cg38a5@lev '1))))) cg38aa@ls/false) (let ((cg38ae@t cg38a8@t)) (let ((cg38b0@ls/false (cg30bb@syntax-dispatch cg38ae@t '((#(scheme-id unquote) . each-any) . any)))) (if cg38b0@ls/false (apply (lambda (cg38b2@p cg38b3@q) (if (= cg38a5@lev '0) (cg3891@quasicons* cg38b2@p (cg389b@quasi cg38b3@q cg38a5@lev)) (cg3893@quasicons (cg3893@quasicons (cg3875@datum 'unquote) (cg389b@quasi cg38b2@p (- cg38a5@lev '1))) (cg389b@quasi cg38b3@q cg38a5@lev)))) cg38b0@ls/false) (let ((cg38b6@t cg38ae@t)) (let ((cg38b8@ls/false (cg30bb@syntax-dispatch cg38b6@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if cg38b8@ls/false (apply (lambda (cg38ba@p cg38bb@q) (if (= cg38a5@lev '0) (cg3895@quasiappend cg38ba@p (cg389b@quasi cg38bb@q cg38a5@lev)) (cg3893@quasicons (cg3893@quasicons (cg3875@datum 'unquote-splicing) (cg389b@quasi cg38ba@p (- cg38a5@lev '1))) (cg389b@quasi cg38bb@q cg38a5@lev)))) cg38b8@ls/false) (let ((cg38be@t cg38b6@t)) (let ((cg38c0@ls/false (cg30bb@syntax-dispatch cg38be@t '(#(scheme-id quasiquote) any)))) (if cg38c0@ls/false (apply (lambda (cg38c2@p) (cg3893@quasicons (cg3875@datum 'quasiquote) (cg389b@quasi (list cg38c2@p) (+ cg38a5@lev '1)))) cg38c0@ls/false) (let ((cg38c4@t cg38be@t)) (let ((cg38c6@ls/false (cg30bb@syntax-dispatch cg38c4@t '(any . any)))) (if cg38c6@ls/false (apply (lambda (cg38c8@p cg38c9@q) (cg3893@quasicons (cg389b@quasi cg38c8@p cg38a5@lev) (cg389b@quasi cg38c9@q cg38a5@lev))) cg38c6@ls/false) (let ((cg38cc@t cg38c4@t)) (let ((cg38ce@ls/false (cg30bb@syntax-dispatch cg38cc@t '#(vector each-any)))) (if (and cg38ce@ls/false (apply (lambda (cg38d0@x) (not (cg2e80@stx? cg38d0@x))) cg38ce@ls/false)) (apply (lambda (cg38d2@x) (cg3897@quasivector (cg3899@vquasi cg38d2@x cg38a5@lev))) cg38ce@ls/false) (let ((cg38d4@t cg38cc@t)) (let ((cg38d6@ls/false (cg30bb@syntax-dispatch cg38d4@t 'any))) (if cg38d6@ls/false (apply (lambda (cg38d8@p) (list (cg3043@scheme-stx 'quote) cg38d8@p)) cg38d6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg38d4@t))))))))))))))))))))))))) (lambda (cg389c@x) (let ((cg389e@t cg389c@x)) (let ((cg38a0@ls/false (cg30bb@syntax-dispatch cg389e@t '(_ any)))) (if cg38a0@ls/false (apply (lambda (cg38a2@e) (cg389b@quasi cg38a2@e '0)) cg38a0@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg389e@t))))))) (set! cg4b88@cg30a9@quasiquote-macro cg30a9@quasiquote-macro) (set! cg30ab@quasisyntax-macro (letrec* ((cg3979@quasi (lambda (cg3994@p cg3995@lev) (let ((cg3998@t cg3994@p)) (let ((cg399a@ls/false (cg30bb@syntax-dispatch cg3998@t '(#(scheme-id unsyntax) any)))) (if cg399a@ls/false (apply (lambda (cg399c@p) (if (= cg3995@lev '0) (let ((cg399e@g (gensym))) (values (list cg399e@g) (list cg399c@p) cg399e@g)) (call-with-values (lambda () (cg3979@quasi cg399c@p (- cg3995@lev '1))) (lambda (cg39a6@cg39a1 cg39a7@cg39a3 cg39a8@cg39a5) (let ((cg39ac@p cg39a8@cg39a5) (cg39ad@rhs* cg39a7@cg39a3) (cg39ae@lhs* cg39a6@cg39a1)) (values cg39ae@lhs* cg39ad@rhs* (list 'unsyntax cg39ac@p))))))) cg399a@ls/false) (let ((cg39b2@t cg3998@t)) (let ((cg39b4@ls/false (cg30bb@syntax-dispatch cg39b2@t '#(scheme-id unsyntax)))) (if (and cg39b4@ls/false (apply (lambda () (= cg3995@lev '0)) cg39b4@ls/false)) (apply (lambda () (cg319b@syntax-violation '#f '"incorrect use of unsyntax" cg3994@p)) cg39b4@ls/false) (let ((cg39b6@t cg39b2@t)) (let ((cg39b8@ls/false (cg30bb@syntax-dispatch cg39b6@t '((#(scheme-id unsyntax) . each-any) . any)))) (if cg39b8@ls/false (apply (lambda (cg39ba@p* cg39bb@q) (call-with-values (lambda () (cg3979@quasi cg39bb@q cg3995@lev)) (lambda (cg39c4@cg39bf cg39c5@cg39c1 cg39c6@cg39c3) (let ((cg39ca@q cg39c6@cg39c3) (cg39cb@rhs* cg39c5@cg39c1) (cg39cc@lhs* cg39c4@cg39bf)) (if (= cg3995@lev '0) (let ((cg39d0@g* (map (lambda (cg39d2@x) (gensym)) cg39ba@p*))) (values (append cg39d0@g* cg39cc@lhs*) (append cg39ba@p* cg39cb@rhs*) (append cg39d0@g* cg39ca@q))) (call-with-values (lambda () (cg3979@quasi cg39ba@p* (- cg3995@lev '1))) (lambda (cg39da@cg39d5 cg39db@cg39d7 cg39dc@cg39d9) (let ((cg39e0@p* cg39dc@cg39d9) (cg39e1@rhs2* cg39db@cg39d7) (cg39e2@lhs2* cg39da@cg39d5)) (values (append cg39e2@lhs2* cg39cc@lhs*) (append cg39e1@rhs2* cg39cb@rhs*) (cons (cons 'unsyntax cg39e0@p*) cg39ca@q)))))))))) cg39b8@ls/false) (let ((cg39e6@t cg39b6@t)) (let ((cg39e8@ls/false (cg30bb@syntax-dispatch cg39e6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if cg39e8@ls/false (apply (lambda (cg39ea@p* cg39eb@q) (call-with-values (lambda () (cg3979@quasi cg39eb@q cg3995@lev)) (lambda (cg39f4@cg39ef cg39f5@cg39f1 cg39f6@cg39f3) (let ((cg39fa@q cg39f6@cg39f3) (cg39fb@rhs* cg39f5@cg39f1) (cg39fc@lhs* cg39f4@cg39ef)) (if (= cg3995@lev '0) (let ((cg3a00@g* (map (lambda (cg3a02@x) (gensym)) cg39ea@p*))) (values (append (map (lambda (cg3a04@g) (cons cg3a04@g '(...))) cg3a00@g*) cg39fc@lhs*) (append cg39ea@p* cg39fb@rhs*) (append (apply append (map (lambda (cg3a06@g) (cons cg3a06@g '(...))) cg3a00@g*)) cg39fa@q))) (call-with-values (lambda () (cg3979@quasi cg39ea@p* (- cg3995@lev '1))) (lambda (cg3a0e@cg3a09 cg3a0f@cg3a0b cg3a10@cg3a0d) (let ((cg3a14@p* cg3a10@cg3a0d) (cg3a15@rhs2* cg3a0f@cg3a0b) (cg3a16@lhs2* cg3a0e@cg3a09)) (values (append cg3a16@lhs2* cg39fc@lhs*) (append cg3a15@rhs2* cg39fb@rhs*) (cons (cons 'unsyntax-splicing cg3a14@p*) cg39fa@q)))))))))) cg39e8@ls/false) (let ((cg3a1a@t cg39e6@t)) (let ((cg3a1c@ls/false (cg30bb@syntax-dispatch cg3a1a@t '#(scheme-id unsyntax-splicing)))) (if (and cg3a1c@ls/false (apply (lambda () (= cg3995@lev '0)) cg3a1c@ls/false)) (apply (lambda () (cg319b@syntax-violation '#f '"incorrect use of unsyntax-splicing" cg3994@p)) cg3a1c@ls/false) (let ((cg3a1e@t cg3a1a@t)) (let ((cg3a20@ls/false (cg30bb@syntax-dispatch cg3a1e@t '(#(scheme-id quasisyntax) any)))) (if cg3a20@ls/false (apply (lambda (cg3a22@p) (call-with-values (lambda () (cg3979@quasi cg3a22@p (+ cg3995@lev '1))) (lambda (cg3a2a@cg3a25 cg3a2b@cg3a27 cg3a2c@cg3a29) (let ((cg3a30@p cg3a2c@cg3a29) (cg3a31@rhs* cg3a2b@cg3a27) (cg3a32@lhs* cg3a2a@cg3a25)) (values cg3a32@lhs* cg3a31@rhs* (list 'quasisyntax cg3a30@p)))))) cg3a20@ls/false) (let ((cg3a36@t cg3a1e@t)) (let ((cg3a38@ls/false (cg30bb@syntax-dispatch cg3a36@t '(any . any)))) (if cg3a38@ls/false (apply (lambda (cg3a3a@p cg3a3b@q) (call-with-values (lambda () (cg3979@quasi cg3a3a@p cg3995@lev)) (lambda (cg3a4a@cg3a3f cg3a4b@cg3a41 cg3a4c@cg3a43) (call-with-values (lambda () (cg3979@quasi cg3a3b@q cg3995@lev)) (lambda (cg3a50@cg3a45 cg3a51@cg3a47 cg3a52@cg3a49) (let ((cg3a56@q cg3a52@cg3a49) (cg3a57@rhs2* cg3a51@cg3a47) (cg3a58@lhs2* cg3a50@cg3a45) (cg3a59@p cg3a4c@cg3a43) (cg3a5a@rhs* cg3a4b@cg3a41) (cg3a5b@lhs* cg3a4a@cg3a3f)) (values (append cg3a58@lhs2* cg3a5b@lhs*) (append cg3a57@rhs2* cg3a5a@rhs*) (cons cg3a59@p cg3a56@q)))))))) cg3a38@ls/false) (let ((cg3a62@t cg3a36@t)) (let ((cg3a64@ls/false (cg30bb@syntax-dispatch cg3a62@t '#(vector each-any)))) (if cg3a64@ls/false (apply (lambda (cg3a66@x*) (call-with-values (lambda () (cg3979@quasi cg3a66@x* cg3995@lev)) (lambda (cg3a6e@cg3a69 cg3a6f@cg3a6b cg3a70@cg3a6d) (let ((cg3a74@x* cg3a70@cg3a6d) (cg3a75@rhs* cg3a6f@cg3a6b) (cg3a76@lhs* cg3a6e@cg3a69)) (values cg3a76@lhs* cg3a75@rhs* (list->vector cg3a74@x*)))))) cg3a64@ls/false) (let ((cg3a7a@t cg3a62@t)) (let ((cg3a7c@ls/false (cg30bb@syntax-dispatch cg3a7a@t '_))) (if cg3a7c@ls/false (apply (lambda () (values '() '() cg3994@p)) cg3a7c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3a7a@t))))))))))))))))))))))))))))))) (lambda (cg397a@x) (let ((cg397c@t cg397a@x)) (let ((cg397e@ls/false (cg30bb@syntax-dispatch cg397c@t '(_ any)))) (if cg397e@ls/false (apply (lambda (cg3980@e) (call-with-values (lambda () (cg3979@quasi cg3980@e '0)) (lambda (cg3988@cg3983 cg3989@cg3985 cg398a@cg3987) (let ((cg398e@v cg398a@cg3987) (cg398f@rhs* cg3989@cg3985) (cg3990@lhs* cg3988@cg3983)) (cg3071@bless (list 'syntax-case (cons 'list cg398f@rhs*) '() (list cg3990@lhs* (list 'syntax cg398e@v)))))))) cg397e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg397c@t))))))) (set! cg4b89@cg30ab@quasisyntax-macro cg30ab@quasisyntax-macro) (set! cg30ad@define-struct-macro (lambda (cg3a7e@stx) (cg319b@syntax-violation '#f '"define-struct not supported" cg3a7e@stx))) (set! cg4b8a@cg30ad@define-struct-macro cg30ad@define-struct-macro) (set! cg30af@define-record-type-macro (lambda (cg3a80@x) (letrec* ((cg3a83@id (lambda (cg3c76@ctxt . cg3c78@str*) (cg319f@datum->syntax cg3c76@ctxt (string->symbol (apply string-append (map (lambda (cg3c7a@x) (if (symbol? cg3c7a@x) (symbol->string cg3c7a@x) (if (string? cg3c7a@x) cg3c7a@x (assertion-violation 'define-record-type '"BUG")))) cg3c78@str*)))))) (cg3a85@get-record-name (lambda (cg3c64@spec) (let ((cg3c66@t cg3c64@spec)) (let ((cg3c68@ls/false (cg30bb@syntax-dispatch cg3c66@t '(any any any)))) (if cg3c68@ls/false (apply (lambda (cg3c6a@foo cg3c6b@make-foo cg3c6c@foo?) cg3c6a@foo) cg3c68@ls/false) (let ((cg3c70@t cg3c66@t)) (let ((cg3c72@ls/false (cg30bb@syntax-dispatch cg3c70@t 'any))) (if cg3c72@ls/false (apply (lambda (cg3c74@foo) cg3c74@foo) cg3c72@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c70@t))))))))) (cg3a87@get-record-constructor-name (lambda (cg3c50@spec) (let ((cg3c52@t cg3c50@spec)) (let ((cg3c54@ls/false (cg30bb@syntax-dispatch cg3c52@t '(any any any)))) (if cg3c54@ls/false (apply (lambda (cg3c56@foo cg3c57@make-foo cg3c58@foo?) cg3c57@make-foo) cg3c54@ls/false) (let ((cg3c5c@t cg3c52@t)) (let ((cg3c5e@ls/false (cg30bb@syntax-dispatch cg3c5c@t 'any))) (if (and cg3c5e@ls/false (apply (lambda (cg3c60@foo) (cg2eb4@id? cg3c60@foo)) cg3c5e@ls/false)) (apply (lambda (cg3c62@foo) (cg3a83@id cg3c62@foo '"make-" (cg2ec8@stx->datum cg3c62@foo))) cg3c5e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c5c@t))))))))) (cg3a89@get-record-predicate-name (lambda (cg3c3c@spec) (let ((cg3c3e@t cg3c3c@spec)) (let ((cg3c40@ls/false (cg30bb@syntax-dispatch cg3c3e@t '(any any any)))) (if cg3c40@ls/false (apply (lambda (cg3c42@foo cg3c43@make-foo cg3c44@foo?) cg3c44@foo?) cg3c40@ls/false) (let ((cg3c48@t cg3c3e@t)) (let ((cg3c4a@ls/false (cg30bb@syntax-dispatch cg3c48@t 'any))) (if (and cg3c4a@ls/false (apply (lambda (cg3c4c@foo) (cg2eb4@id? cg3c4c@foo)) cg3c4a@ls/false)) (apply (lambda (cg3c4e@foo) (cg3a83@id cg3c4e@foo (cg2ec8@stx->datum cg3c4e@foo) '"?")) cg3c4a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c48@t))))))))) (cg3a8b@get-clause (lambda (cg3c2a@id cg3c2b@ls) (let ((cg3c2e@t cg3c2b@ls)) (let ((cg3c30@ls/false (cg30bb@syntax-dispatch cg3c2e@t '()))) (if cg3c30@ls/false (apply (lambda () '#f) cg3c30@ls/false) (let ((cg3c32@t cg3c2e@t)) (let ((cg3c34@ls/false (cg30bb@syntax-dispatch cg3c32@t '((any . any) . any)))) (if cg3c34@ls/false (apply (lambda (cg3c36@x cg3c37@rest cg3c38@ls) (if (cg2eba@free-id=? (cg3071@bless cg3c2a@id) cg3c36@x) (cons cg3c36@x cg3c37@rest) (cg3a8b@get-clause cg3c2a@id cg3c38@ls))) cg3c34@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c32@t))))))))) (cg3a8d@foo-rtd-code (lambda (cg3bd8@name cg3bd9@clause* cg3bda@parent-rtd-code) (letrec* ((cg3bdf@convert-field-spec* (lambda (cg3c10@ls) (list->vector (map (lambda (cg3c12@x) (let ((cg3c14@t cg3c12@x)) (let ((cg3c16@ls/false (cg30bb@syntax-dispatch cg3c14@t '(#(scheme-id mutable) any . any)))) (if cg3c16@ls/false (apply (lambda (cg3c18@name cg3c19@rest) (list 'mutable cg3c18@name)) cg3c16@ls/false) (let ((cg3c1c@t cg3c14@t)) (let ((cg3c1e@ls/false (cg30bb@syntax-dispatch cg3c1c@t '(#(scheme-id immutable) any . any)))) (if cg3c1e@ls/false (apply (lambda (cg3c20@name cg3c21@rest) (list 'immutable cg3c20@name)) cg3c1e@ls/false) (let ((cg3c24@t cg3c1c@t)) (let ((cg3c26@ls/false (cg30bb@syntax-dispatch cg3c24@t 'any))) (if cg3c26@ls/false (apply (lambda (cg3c28@name) (list 'immutable cg3c28@name)) cg3c26@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c24@t))))))))))) cg3c10@ls))))) (let ((cg3be0@uid-code (let ((cg3be8@t (cg3a8b@get-clause 'nongenerative cg3bd9@clause*))) (let ((cg3bea@ls/false (cg30bb@syntax-dispatch cg3be8@t '(_)))) (if cg3bea@ls/false (apply (lambda () (list 'quote (gensym))) cg3bea@ls/false) (let ((cg3bec@t cg3be8@t)) (let ((cg3bee@ls/false (cg30bb@syntax-dispatch cg3bec@t '(_ any)))) (if cg3bee@ls/false (apply (lambda (cg3bf0@uid) (list 'quote cg3bf0@uid)) cg3bee@ls/false) (let ((cg3bf2@t cg3bec@t)) (let ((cg3bf4@ls/false (cg30bb@syntax-dispatch cg3bf2@t '_))) (if cg3bf4@ls/false (apply (lambda () '#f) cg3bf4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bf2@t))))))))))) (cg3be1@sealed? (let ((cg3bf6@t (cg3a8b@get-clause 'sealed cg3bd9@clause*))) (let ((cg3bf8@ls/false (cg30bb@syntax-dispatch cg3bf6@t '(_ #(atom #t))))) (if cg3bf8@ls/false (apply (lambda () '#t) cg3bf8@ls/false) (let ((cg3bfa@t cg3bf6@t)) (let ((cg3bfc@ls/false (cg30bb@syntax-dispatch cg3bfa@t '_))) (if cg3bfc@ls/false (apply (lambda () '#f) cg3bfc@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bfa@t)))))))) (cg3be2@opaque? (let ((cg3bfe@t (cg3a8b@get-clause 'opaque cg3bd9@clause*))) (let ((cg3c00@ls/false (cg30bb@syntax-dispatch cg3bfe@t '(_ #(atom #t))))) (if cg3c00@ls/false (apply (lambda () '#t) cg3c00@ls/false) (let ((cg3c02@t cg3bfe@t)) (let ((cg3c04@ls/false (cg30bb@syntax-dispatch cg3c02@t '_))) (if cg3c04@ls/false (apply (lambda () '#f) cg3c04@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c02@t)))))))) (cg3be3@fields (let ((cg3c06@t (cg3a8b@get-clause 'fields cg3bd9@clause*))) (let ((cg3c08@ls/false (cg30bb@syntax-dispatch cg3c06@t '(_ . each-any)))) (if cg3c08@ls/false (apply (lambda (cg3c0a@field-spec*) (list 'quote (cg3bdf@convert-field-spec* cg3c0a@field-spec*))) cg3c08@ls/false) (let ((cg3c0c@t cg3c06@t)) (let ((cg3c0e@ls/false (cg30bb@syntax-dispatch cg3c0c@t '_))) (if cg3c0e@ls/false (apply (lambda () ''#()) cg3c0e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c0c@t))))))))) (cg3071@bless (list 'make-record-type-descriptor (list 'quote cg3bd8@name) cg3bda@parent-rtd-code cg3be0@uid-code cg3be1@sealed? cg3be2@opaque? cg3be3@fields)))))) (cg3a8f@parent-rtd-code (lambda (cg3bc0@clause*) (let ((cg3bc2@t (cg3a8b@get-clause 'parent cg3bc0@clause*))) (let ((cg3bc4@ls/false (cg30bb@syntax-dispatch cg3bc2@t '(_ any)))) (if cg3bc4@ls/false (apply (lambda (cg3bc6@name) (list 'record-type-descriptor cg3bc6@name)) cg3bc4@ls/false) (let ((cg3bc8@t cg3bc2@t)) (let ((cg3bca@ls/false (cg30bb@syntax-dispatch cg3bc8@t '#(atom #f)))) (if cg3bca@ls/false (apply (lambda () (let ((cg3bcc@t (cg3a8b@get-clause 'parent-rtd cg3bc0@clause*))) (let ((cg3bce@ls/false (cg30bb@syntax-dispatch cg3bcc@t '(_ any any)))) (if cg3bce@ls/false (apply (lambda (cg3bd0@rtd cg3bd1@rcd) cg3bd0@rtd) cg3bce@ls/false) (let ((cg3bd4@t cg3bcc@t)) (let ((cg3bd6@ls/false (cg30bb@syntax-dispatch cg3bd4@t '#(atom #f)))) (if cg3bd6@ls/false (apply (lambda () '#f) cg3bd6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bd4@t)))))))) cg3bca@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bc8@t))))))))) (cg3a91@parent-rcd-code (lambda (cg3ba8@clause*) (let ((cg3baa@t (cg3a8b@get-clause 'parent cg3ba8@clause*))) (let ((cg3bac@ls/false (cg30bb@syntax-dispatch cg3baa@t '(_ any)))) (if cg3bac@ls/false (apply (lambda (cg3bae@name) (list 'record-constructor-descriptor cg3bae@name)) cg3bac@ls/false) (let ((cg3bb0@t cg3baa@t)) (let ((cg3bb2@ls/false (cg30bb@syntax-dispatch cg3bb0@t '#(atom #f)))) (if cg3bb2@ls/false (apply (lambda () (let ((cg3bb4@t (cg3a8b@get-clause 'parent-rtd cg3ba8@clause*))) (let ((cg3bb6@ls/false (cg30bb@syntax-dispatch cg3bb4@t '(_ any any)))) (if cg3bb6@ls/false (apply (lambda (cg3bb8@rtd cg3bb9@rcd) cg3bb9@rcd) cg3bb6@ls/false) (let ((cg3bbc@t cg3bb4@t)) (let ((cg3bbe@ls/false (cg30bb@syntax-dispatch cg3bbc@t '#(atom #f)))) (if cg3bbe@ls/false (apply (lambda () '#f) cg3bbe@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bbc@t)))))))) cg3bb2@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3bb0@t))))))))) (cg3a93@foo-rcd-code (lambda (cg3ba0@clause* cg3ba1@foo-rtd cg3ba2@protocol cg3ba3@parent-rcd-code) (list 'make-record-constructor-descriptor cg3ba1@foo-rtd cg3ba3@parent-rcd-code cg3ba2@protocol))) (cg3a95@get-protocol-code (lambda (cg3b94@clause*) (let ((cg3b96@t (cg3a8b@get-clause 'protocol cg3b94@clause*))) (let ((cg3b98@ls/false (cg30bb@syntax-dispatch cg3b96@t '(_ any)))) (if cg3b98@ls/false (apply (lambda (cg3b9a@expr) cg3b9a@expr) cg3b98@ls/false) (let ((cg3b9c@t cg3b96@t)) (let ((cg3b9e@ls/false (cg30bb@syntax-dispatch cg3b9c@t '_))) (if cg3b9e@ls/false (apply (lambda () '#f) cg3b9e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3b9c@t))))))))) (cg3a97@get-fields (lambda (cg3b82@clause*) (let ((cg3b84@t cg3b82@clause*)) (let ((cg3b86@ls/false (cg30bb@syntax-dispatch cg3b84@t '()))) (if cg3b86@ls/false (apply (lambda () '()) cg3b86@ls/false) (let ((cg3b88@t cg3b84@t)) (let ((cg3b8a@ls/false (cg30bb@syntax-dispatch cg3b88@t '((#(scheme-id fields) . each-any) . _)))) (if cg3b8a@ls/false (apply (lambda (cg3b8c@f*) cg3b8c@f*) cg3b8a@ls/false) (let ((cg3b8e@t cg3b88@t)) (let ((cg3b90@ls/false (cg30bb@syntax-dispatch cg3b8e@t '(_ . any)))) (if cg3b90@ls/false (apply (lambda (cg3b92@rest) (cg3a97@get-fields cg3b92@rest)) cg3b90@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3b8e@t)))))))))))) (cg3a99@get-mutator-indices (lambda (cg3b6a@fields) (let cg3b70@f ((cg3b6c@fields cg3b6a@fields) (cg3b6d@i '0)) (let ((cg3b72@t cg3b6c@fields)) (let ((cg3b74@ls/false (cg30bb@syntax-dispatch cg3b72@t '()))) (if cg3b74@ls/false (apply (lambda () '()) cg3b74@ls/false) (let ((cg3b76@t cg3b72@t)) (let ((cg3b78@ls/false (cg30bb@syntax-dispatch cg3b76@t '((#(scheme-id mutable) . _) . any)))) (if cg3b78@ls/false (apply (lambda (cg3b7a@rest) (cons cg3b6d@i (cg3b70@f cg3b7a@rest (+ cg3b6d@i '1)))) cg3b78@ls/false) (let ((cg3b7c@t cg3b76@t)) (let ((cg3b7e@ls/false (cg30bb@syntax-dispatch cg3b7c@t '(_ . any)))) (if cg3b7e@ls/false (apply (lambda (cg3b80@rest) (cg3b70@f cg3b80@rest (+ cg3b6d@i '1))) cg3b7e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3b7c@t))))))))))))) (cg3a9b@get-mutators (lambda (cg3b40@foo cg3b41@fields) (letrec* ((cg3b45@gen-name (lambda (cg3b68@x) (cg319f@datum->syntax cg3b40@foo (string->symbol (string-append (symbol->string (cg31a1@syntax->datum cg3b40@foo)) '"-" (symbol->string (cg31a1@syntax->datum cg3b68@x)) '"-set!")))))) (let cg3b48@f ((cg3b46@fields cg3b41@fields)) (let ((cg3b4a@t cg3b46@fields)) (let ((cg3b4c@ls/false (cg30bb@syntax-dispatch cg3b4a@t '()))) (if cg3b4c@ls/false (apply (lambda () '()) cg3b4c@ls/false) (let ((cg3b4e@t cg3b4a@t)) (let ((cg3b50@ls/false (cg30bb@syntax-dispatch cg3b4e@t '((#(scheme-id mutable) any any any) . any)))) (if cg3b50@ls/false (apply (lambda (cg3b52@name cg3b53@accessor cg3b54@mutator cg3b55@rest) (cons cg3b54@mutator (cg3b48@f cg3b55@rest))) cg3b50@ls/false) (let ((cg3b5a@t cg3b4e@t)) (let ((cg3b5c@ls/false (cg30bb@syntax-dispatch cg3b5a@t '((#(scheme-id mutable) any) . any)))) (if cg3b5c@ls/false (apply (lambda (cg3b5e@name cg3b5f@rest) (cons (cg3b45@gen-name cg3b5e@name) (cg3b48@f cg3b5f@rest))) cg3b5c@ls/false) (let ((cg3b62@t cg3b5a@t)) (let ((cg3b64@ls/false (cg30bb@syntax-dispatch cg3b62@t '(_ . any)))) (if cg3b64@ls/false (apply (lambda (cg3b66@rest) (cg3b48@f cg3b66@rest)) cg3b64@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3b62@t))))))))))))))))) (cg3a9d@get-accessors (lambda (cg3afc@foo cg3afd@fields) (letrec* ((cg3b01@gen-name (lambda (cg3b3e@x) (cg319f@datum->syntax cg3afc@foo (string->symbol (string-append (symbol->string (cg31a1@syntax->datum cg3afc@foo)) '"-" (symbol->string (cg31a1@syntax->datum cg3b3e@x)))))))) (map (lambda (cg3b02@field) (let ((cg3b04@t cg3b02@field)) (let ((cg3b06@ls/false (cg30bb@syntax-dispatch cg3b04@t '(#(scheme-id mutable) any any any)))) (if (and cg3b06@ls/false (apply (lambda (cg3b08@name cg3b09@accessor cg3b0a@mutator) (cg2eb4@id? cg3b09@accessor)) cg3b06@ls/false)) (apply (lambda (cg3b0e@name cg3b0f@accessor cg3b10@mutator) cg3b0f@accessor) cg3b06@ls/false) (let ((cg3b14@t cg3b04@t)) (let ((cg3b16@ls/false (cg30bb@syntax-dispatch cg3b14@t '(#(scheme-id immutable) any any)))) (if (and cg3b16@ls/false (apply (lambda (cg3b18@name cg3b19@accessor) (cg2eb4@id? cg3b19@accessor)) cg3b16@ls/false)) (apply (lambda (cg3b1c@name cg3b1d@accessor) cg3b1d@accessor) cg3b16@ls/false) (let ((cg3b20@t cg3b14@t)) (let ((cg3b22@ls/false (cg30bb@syntax-dispatch cg3b20@t '(#(scheme-id mutable) any)))) (if (and cg3b22@ls/false (apply (lambda (cg3b24@name) (cg2eb4@id? cg3b24@name)) cg3b22@ls/false)) (apply (lambda (cg3b26@name) (cg3b01@gen-name cg3b26@name)) cg3b22@ls/false) (let ((cg3b28@t cg3b20@t)) (let ((cg3b2a@ls/false (cg30bb@syntax-dispatch cg3b28@t '(#(scheme-id immutable) any)))) (if (and cg3b2a@ls/false (apply (lambda (cg3b2c@name) (cg2eb4@id? cg3b2c@name)) cg3b2a@ls/false)) (apply (lambda (cg3b2e@name) (cg3b01@gen-name cg3b2e@name)) cg3b2a@ls/false) (let ((cg3b30@t cg3b28@t)) (let ((cg3b32@ls/false (cg30bb@syntax-dispatch cg3b30@t 'any))) (if (and cg3b32@ls/false (apply (lambda (cg3b34@name) (cg2eb4@id? cg3b34@name)) cg3b32@ls/false)) (apply (lambda (cg3b36@name) (cg3b01@gen-name cg3b36@name)) cg3b32@ls/false) (let ((cg3b38@t cg3b30@t)) (let ((cg3b3a@ls/false (cg30bb@syntax-dispatch cg3b38@t 'any))) (if cg3b3a@ls/false (apply (lambda (cg3b3c@others) (cg319b@syntax-violation '#f '"invalid field spec" cg3b02@field)) cg3b3a@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3b38@t)))))))))))))))))))) cg3afd@fields)))) (cg3a9f@enumerate (lambda (cg3af4@ls) (let cg3afa@f ((cg3af6@ls cg3af4@ls) (cg3af7@i '0)) (if (null? cg3af6@ls) '() (cons cg3af7@i (cg3afa@f (cdr cg3af6@ls) (+ cg3af7@i '1))))))) (cg3aa1@do-define-record (lambda (cg3acc@namespec cg3acd@clause*) (let ((cg3ad0@foo (cg3a85@get-record-name cg3acc@namespec))) (let ((cg3ad2@foo-rtd (gensym))) (let ((cg3ad4@foo-rcd (gensym))) (let ((cg3ad6@protocol (gensym))) (let ((cg3ad8@make-foo (cg3a87@get-record-constructor-name cg3acc@namespec))) (let ((cg3ada@fields (cg3a97@get-fields cg3acd@clause*))) (let ((cg3adc@idx* (cg3a9f@enumerate cg3ada@fields))) (let ((cg3ade@foo-x* (cg3a9d@get-accessors cg3ad0@foo cg3ada@fields))) (let ((cg3ae0@set-foo-x!* (cg3a9b@get-mutators cg3ad0@foo cg3ada@fields))) (let ((cg3ae2@set-foo-idx* (cg3a99@get-mutator-indices cg3ada@fields))) (let ((cg3ae4@foo? (cg3a89@get-record-predicate-name cg3acc@namespec))) (let ((cg3ae6@foo-rtd-code (cg3a8d@foo-rtd-code cg3ad0@foo cg3acd@clause* (cg3a8f@parent-rtd-code cg3acd@clause*)))) (let ((cg3ae8@foo-rcd-code (cg3a93@foo-rcd-code cg3acd@clause* cg3ad2@foo-rtd cg3ad6@protocol (cg3a91@parent-rcd-code cg3acd@clause*)))) (let ((cg3aea@protocol-code (cg3a95@get-protocol-code cg3acd@clause*))) (cg3071@bless (cons 'begin (cons (list 'define cg3ad2@foo-rtd cg3ae6@foo-rtd-code) (cons (list 'define cg3ad6@protocol cg3aea@protocol-code) (cons (list 'define cg3ad4@foo-rcd cg3ae8@foo-rcd-code) (cons (list 'define-syntax cg3ad0@foo (list 'list ''$rtd (list 'syntax cg3ad2@foo-rtd) (list 'syntax cg3ad4@foo-rcd))) (cons (list 'define cg3ae4@foo? (list 'record-predicate cg3ad2@foo-rtd)) (cons (list 'define cg3ad8@make-foo (list 'record-constructor cg3ad4@foo-rcd)) (append (map (lambda (cg3aec@foo-x cg3aed@idx) (list 'define cg3aec@foo-x (list 'record-accessor cg3ad2@foo-rtd cg3aed@idx))) cg3ade@foo-x* cg3adc@idx*) (map (lambda (cg3af0@set-foo-x! cg3af1@idx) (list 'define cg3af0@set-foo-x! (list 'record-mutator cg3ad2@foo-rtd cg3af1@idx))) cg3ae0@set-foo-x!* cg3ae2@set-foo-idx*)))))))))))))))))))))))))) (cg3aa3@verify-clauses (lambda (cg3aac@x cg3aad@cls*) (letrec* ((cg3ab1@valid-kwds (map cg3071@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (cg3ab3@free-id-member? (lambda (cg3ac8@x cg3ac9@ls) (and (pair? cg3ac9@ls) (or (cg2eba@free-id=? cg3ac8@x (car cg3ac9@ls)) (cg3ab3@free-id-member? cg3ac8@x (cdr cg3ac9@ls))))))) (let cg3ab8@f ((cg3ab4@cls* cg3aad@cls*) (cg3ab5@seen* '())) (if (not (null? cg3ab4@cls*)) (let ((cg3aba@t (car cg3ab4@cls*))) (let ((cg3abc@ls/false (cg30bb@syntax-dispatch cg3aba@t '(any . any)))) (if cg3abc@ls/false (apply (lambda (cg3abe@kwd cg3abf@rest) (if (or (not (cg2eb4@id? cg3abe@kwd)) (not (cg3ab3@free-id-member? cg3abe@kwd cg3ab1@valid-kwds))) (cg319b@syntax-violation '#f '"not a valid define-record-type keyword" cg3abe@kwd) (if (cg2ec0@bound-id-member? cg3abe@kwd cg3ab5@seen*) (cg319b@syntax-violation '#f '"duplicate use of keyword " cg3aac@x cg3abe@kwd) (cg3ab8@f (cdr cg3ab4@cls*) (cons cg3abe@kwd cg3ab5@seen*))))) cg3abc@ls/false) (let ((cg3ac2@t cg3aba@t)) (let ((cg3ac4@ls/false (cg30bb@syntax-dispatch cg3ac2@t 'any))) (if cg3ac4@ls/false (apply (lambda (cg3ac6@cls) (cg319b@syntax-violation '#f '"malformed define-record-type clause" cg3ac6@cls)) cg3ac4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3ac2@t))))))) (void))))))) (let ((cg3aa4@t cg3a80@x)) (let ((cg3aa6@ls/false (cg30bb@syntax-dispatch cg3aa4@t '(_ any . each-any)))) (if cg3aa6@ls/false (apply (lambda (cg3aa8@namespec cg3aa9@clause*) (begin (cg3aa3@verify-clauses cg3a80@x cg3aa9@clause*) (cg3aa1@do-define-record cg3aa8@namespec cg3aa9@clause*))) cg3aa6@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3aa4@t))))))) (set! cg4b8b@cg30af@define-record-type-macro cg30af@define-record-type-macro) (set! cg30b1@define-condition-type-macro (lambda (cg3c7c@x) (letrec* ((cg3c7f@mkname (lambda (cg3cac@name cg3cad@suffix) (cg319f@datum->syntax cg3cac@name (string->symbol (string-append (symbol->string (cg31a1@syntax->datum cg3cac@name)) cg3cad@suffix)))))) (let ((cg3c80@t cg3c7c@x)) (let ((cg3c82@ls/false (cg30bb@syntax-dispatch cg3c80@t '(any any any any any . #(each (any any)))))) (if (and cg3c82@ls/false (apply (lambda (cg3c84@ctxt cg3c85@name cg3c86@super cg3c87@constructor cg3c88@predicate cg3c89@field* cg3c8a@accessor*) (and (cg2eb4@id? cg3c85@name) (cg2eb4@id? cg3c86@super) (cg2eb4@id? cg3c87@constructor) (cg2eb4@id? cg3c88@predicate) (for-all cg2eb4@id? cg3c89@field*) (for-all cg2eb4@id? cg3c8a@accessor*))) cg3c82@ls/false)) (apply (lambda (cg3c92@ctxt cg3c93@name cg3c94@super cg3c95@constructor cg3c96@predicate cg3c97@field* cg3c98@accessor*) (let ((cg3ca0@aux-accessor* (map (lambda (cg3ca2@x) (gensym)) cg3c98@accessor*))) (cg3071@bless (cons 'begin (cons (cons 'define-record-type (cons (list cg3c93@name cg3c95@constructor (gensym)) (cons (list 'parent cg3c94@super) (cons (cons 'fields (map (lambda (cg3ca4@field cg3ca5@aux) (list 'immutable cg3ca4@field cg3ca5@aux)) cg3c97@field* cg3ca0@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define cg3c96@predicate (list 'condition-predicate (list 'record-type-descriptor cg3c93@name))) (map (lambda (cg3ca8@accessor cg3ca9@aux) (list 'define cg3ca8@accessor (list 'condition-accessor (list 'record-type-descriptor cg3c93@name) cg3ca9@aux))) cg3c98@accessor* cg3ca0@aux-accessor*))))))) cg3c82@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3c80@t))))))) (set! cg4b8c@cg30b1@define-condition-type-macro cg30b1@define-condition-type-macro) (set! cg30b3@incorrect-usage-macro (lambda (cg3cb0@e) (cg319b@syntax-violation '#f '"incorrect usage of auxiliary keyword" cg3cb0@e))) (set! cg4b8d@cg30b3@incorrect-usage-macro cg30b3@incorrect-usage-macro) (set! cg30b5@parameterize-macro (lambda (cg3cb2@e) (let ((cg3cb4@t cg3cb2@e)) (let ((cg3cb6@ls/false (cg30bb@syntax-dispatch cg3cb4@t '(_ () any . each-any)))) (if cg3cb6@ls/false (apply (lambda (cg3cb8@b cg3cb9@b*) (cg3071@bless (cons 'let (cons '() (cons cg3cb8@b cg3cb9@b*))))) cg3cb6@ls/false) (let ((cg3cbc@t cg3cb4@t)) (let ((cg3cbe@ls/false (cg30bb@syntax-dispatch cg3cbc@t '(_ #(each (any any)) any . each-any)))) (if cg3cbe@ls/false (apply (lambda (cg3cc0@olhs* cg3cc1@orhs* cg3cc2@b cg3cc3@b*) (let ((cg3cc8@lhs* (cg3189@generate-temporaries cg3cc0@olhs*)) (cg3cc9@rhs* (cg3189@generate-temporaries cg3cc1@orhs*))) (cg3071@bless (cons (list 'lambda (append cg3cc8@lhs* cg3cc9@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (cg3ccc@lhs cg3ccd@rhs) (list 'let (list (list 't (list cg3ccc@lhs))) (list cg3ccc@lhs cg3ccd@rhs) (cons 'set! (cons cg3ccd@rhs '(t))))) cg3cc8@lhs* cg3cc9@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons cg3cc2@b cg3cc3@b*))) '(swap)))))) (append cg3cc0@olhs* cg3cc1@orhs*))))) cg3cbe@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3cbc@t))))))))) (set! cg4b8e@cg30b5@parameterize-macro cg30b5@parameterize-macro) (set! cg30b7@foreign-call-transformer (lambda (cg3cd0@e cg3cd1@r cg3cd2@mr) (let ((cg3cd6@t cg3cd0@e)) (let ((cg3cd8@ls/false (cg30bb@syntax-dispatch cg3cd6@t '(_ any . each-any)))) (if cg3cd8@ls/false (apply (lambda (cg3cda@name cg3cdb@arg*) (cons 'foreign-call (cons (cg30dd@chi-expr cg3cda@name cg3cd1@r cg3cd2@mr) (cg30d9@chi-expr* cg3cdb@arg* cg3cd1@r cg3cd2@mr)))) cg3cd8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3cd6@t)))))) (set! cg4b8f@cg30b7@foreign-call-transformer cg30b7@foreign-call-transformer) (set! cg30b9@convert-pattern (lambda (cg3cde@pattern cg3cdf@keys) (letrec* ((cg3ce3@cvt* (lambda (cg3d82@p* cg3d83@n cg3d84@ids) (if (null? cg3d82@p*) (values '() cg3d84@ids) (call-with-values (lambda () (cg3ce3@cvt* (cdr cg3d82@p*) cg3d83@n cg3d84@ids)) (lambda (cg3d8c@cg3d89 cg3d8d@cg3d8b) (let ((cg3d90@ids cg3d8d@cg3d8b) (cg3d91@y cg3d8c@cg3d89)) (call-with-values (lambda () (cg3ce5@cvt (car cg3d82@p*) cg3d83@n cg3d90@ids)) (lambda (cg3d98@cg3d95 cg3d99@cg3d97) (let ((cg3d9c@ids cg3d99@cg3d97) (cg3d9d@x cg3d98@cg3d95)) (values (cons cg3d9d@x cg3d91@y) cg3d9c@ids)))))))))) (cg3ce5@cvt (lambda (cg3ce6@p cg3ce7@n cg3ce8@ids) (let ((cg3cec@t cg3ce6@p)) (let ((cg3cee@ls/false (cg30bb@syntax-dispatch cg3cec@t 'any))) (if (and cg3cee@ls/false (apply (lambda (cg3cf0@id) (cg2eb4@id? cg3cf0@id)) cg3cee@ls/false)) (apply (lambda (cg3cf2@id) (if (cg2ec0@bound-id-member? cg3ce6@p cg3cdf@keys) (values (vector 'free-id cg3ce6@p) cg3ce8@ids) (if (cg2eba@free-id=? cg3ce6@p (cg3043@scheme-stx '_)) (values '_ cg3ce8@ids) (values 'any (cons (cons cg3ce6@p cg3ce7@n) cg3ce8@ids))))) cg3cee@ls/false) (let ((cg3cf4@t cg3cec@t)) (let ((cg3cf6@ls/false (cg30bb@syntax-dispatch cg3cf4@t '(any any)))) (if (and cg3cf6@ls/false (apply (lambda (cg3cf8@p cg3cf9@dots) (cg30bd@ellipsis? cg3cf9@dots)) cg3cf6@ls/false)) (apply (lambda (cg3cfc@p cg3cfd@dots) (call-with-values (lambda () (cg3ce5@cvt cg3cfc@p (+ cg3ce7@n '1) cg3ce8@ids)) (lambda (cg3d04@cg3d01 cg3d05@cg3d03) (let ((cg3d08@ids cg3d05@cg3d03) (cg3d09@p cg3d04@cg3d01)) (values (if (eq? cg3d09@p 'any) 'each-any (vector 'each cg3d09@p)) cg3d08@ids))))) cg3cf6@ls/false) (let ((cg3d0c@t cg3cf4@t)) (let ((cg3d0e@ls/false (cg30bb@syntax-dispatch cg3d0c@t '(any any . #(each+ any () any))))) (if (and cg3d0e@ls/false (apply (lambda (cg3d10@x cg3d11@dots cg3d12@ys cg3d13@z) (cg30bd@ellipsis? cg3d11@dots)) cg3d0e@ls/false)) (apply (lambda (cg3d18@x cg3d19@dots cg3d1a@ys cg3d1b@z) (call-with-values (lambda () (cg3ce5@cvt cg3d1b@z cg3ce7@n cg3ce8@ids)) (lambda (cg3d24@cg3d21 cg3d25@cg3d23) (let ((cg3d28@ids cg3d25@cg3d23) (cg3d29@z cg3d24@cg3d21)) (call-with-values (lambda () (cg3ce3@cvt* cg3d1a@ys cg3ce7@n cg3d28@ids)) (lambda (cg3d30@cg3d2d cg3d31@cg3d2f) (let ((cg3d34@ids cg3d31@cg3d2f) (cg3d35@ys cg3d30@cg3d2d)) (call-with-values (lambda () (cg3ce5@cvt cg3d18@x (+ cg3ce7@n '1) cg3d34@ids)) (lambda (cg3d3c@cg3d39 cg3d3d@cg3d3b) (let ((cg3d40@ids cg3d3d@cg3d3b) (cg3d41@x cg3d3c@cg3d39)) (values (vector 'each+ cg3d41@x (reverse cg3d35@ys) cg3d29@z) cg3d40@ids))))))))))) cg3d0e@ls/false) (let ((cg3d44@t cg3d0c@t)) (let ((cg3d46@ls/false (cg30bb@syntax-dispatch cg3d44@t '(any . any)))) (if cg3d46@ls/false (apply (lambda (cg3d48@x cg3d49@y) (call-with-values (lambda () (cg3ce5@cvt cg3d49@y cg3ce7@n cg3ce8@ids)) (lambda (cg3d50@cg3d4d cg3d51@cg3d4f) (let ((cg3d54@ids cg3d51@cg3d4f) (cg3d55@y cg3d50@cg3d4d)) (call-with-values (lambda () (cg3ce5@cvt cg3d48@x cg3ce7@n cg3d54@ids)) (lambda (cg3d5c@cg3d59 cg3d5d@cg3d5b) (let ((cg3d60@ids cg3d5d@cg3d5b) (cg3d61@x cg3d5c@cg3d59)) (values (cons cg3d61@x cg3d55@y) cg3d60@ids)))))))) cg3d46@ls/false) (let ((cg3d64@t cg3d44@t)) (let ((cg3d66@ls/false (cg30bb@syntax-dispatch cg3d64@t '()))) (if cg3d66@ls/false (apply (lambda () (values '() cg3ce8@ids)) cg3d66@ls/false) (let ((cg3d68@t cg3d64@t)) (let ((cg3d6a@ls/false (cg30bb@syntax-dispatch cg3d68@t '#(vector each-any)))) (if (and cg3d6a@ls/false (apply (lambda (cg3d6c@p) (not (cg2e80@stx? cg3d6c@p))) cg3d6a@ls/false)) (apply (lambda (cg3d6e@p) (call-with-values (lambda () (cg3ce5@cvt cg3d6e@p cg3ce7@n cg3ce8@ids)) (lambda (cg3d74@cg3d71 cg3d75@cg3d73) (let ((cg3d78@ids cg3d75@cg3d73) (cg3d79@p cg3d74@cg3d71)) (values (vector 'vector cg3d79@p) cg3d78@ids))))) cg3d6a@ls/false) (let ((cg3d7c@t cg3d68@t)) (let ((cg3d7e@ls/false (cg30bb@syntax-dispatch cg3d7c@t 'any))) (if cg3d7e@ls/false (apply (lambda (cg3d80@datum) (values (vector 'atom (cg2ec8@stx->datum cg3d80@datum)) cg3ce8@ids)) cg3d7e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3d7c@t))))))))))))))))))))))))) (cg3ce5@cvt cg3cde@pattern '0 '())))) (set! cg4b90@cg30b9@convert-pattern cg30b9@convert-pattern) (set! cg30bb@syntax-dispatch (letrec* ((cg3da1@stx^ (lambda (cg3e7c@e cg3e7d@m* cg3e7e@s* cg3e7f@ae*) (if (and (null? cg3e7d@m*) (null? cg3e7e@s*) (null? cg3e7f@ae*)) cg3e7c@e (cg2e9c@mkstx cg3e7c@e cg3e7d@m* cg3e7e@s* cg3e7f@ae*)))) (cg3da3@match-each (lambda (cg3e5c@e cg3e5d@p cg3e5e@m* cg3e5f@s* cg3e60@ae*) (if (pair? cg3e5c@e) (let ((cg3e66@first (cg3daf@match (car cg3e5c@e) cg3e5d@p cg3e5e@m* cg3e5f@s* cg3e60@ae* '()))) (and cg3e66@first (let ((cg3e68@rest (cg3da3@match-each (cdr cg3e5c@e) cg3e5d@p cg3e5e@m* cg3e5f@s* cg3e60@ae*))) (and cg3e68@rest (cons cg3e66@first cg3e68@rest))))) (if (null? cg3e5c@e) '() (if (cg2e80@stx? cg3e5c@e) (and (not (cg2e3a@top-marked? cg3e5e@m*)) (call-with-values (lambda () (join-wraps cg3e5e@m* cg3e5f@s* cg3e60@ae* cg3e5c@e)) (lambda (cg3e70@cg3e6b cg3e71@cg3e6d cg3e72@cg3e6f) (let ((cg3e76@ae* cg3e72@cg3e6f) (cg3e77@s* cg3e71@cg3e6d) (cg3e78@m* cg3e70@cg3e6b)) (cg3da3@match-each (cg2e82@stx-expr cg3e5c@e) cg3e5d@p cg3e78@m* cg3e77@s* cg3e76@ae*))))) (if (cg29f8@cg28ca@annotation? cg3e5c@e) (cg3da3@match-each (cg29fa@cg28ce@annotation-expression cg3e5c@e) cg3e5d@p cg3e5e@m* cg3e5f@s* cg3e60@ae*) '#f)))))) (cg3da5@match-each+ (lambda (cg3e1c@e cg3e1d@x-pat cg3e1e@y-pat cg3e1f@z-pat cg3e20@m* cg3e21@s* cg3e22@ae* cg3e23@r) (let cg3e34@f ((cg3e2c@e cg3e1c@e) (cg3e2d@m* cg3e20@m*) (cg3e2e@s* cg3e21@s*) (cg3e2f@ae* cg3e22@ae*)) (if (pair? cg3e2c@e) (call-with-values (lambda () (cg3e34@f (cdr cg3e2c@e) cg3e2d@m* cg3e2e@s* cg3e2f@ae*)) (lambda (cg3e3c@cg3e37 cg3e3d@cg3e39 cg3e3e@cg3e3b) (let ((cg3e42@r cg3e3e@cg3e3b) (cg3e43@y-pat cg3e3d@cg3e39) (cg3e44@xr* cg3e3c@cg3e37)) (if cg3e42@r (if (null? cg3e43@y-pat) (let ((cg3e48@xr (cg3daf@match (car cg3e2c@e) cg3e1d@x-pat cg3e2d@m* cg3e2e@s* cg3e2f@ae* '()))) (if cg3e48@xr (values (cons cg3e48@xr cg3e44@xr*) cg3e43@y-pat cg3e42@r) (values '#f '#f '#f))) (values '() (cdr cg3e43@y-pat) (cg3daf@match (car cg3e2c@e) (car cg3e43@y-pat) cg3e2d@m* cg3e2e@s* cg3e2f@ae* cg3e42@r))) (values '#f '#f '#f))))) (if (cg2e80@stx? cg3e2c@e) (if (cg2e3a@top-marked? cg3e2d@m*) (values '() cg3e1e@y-pat (cg3daf@match cg3e2c@e cg3e1f@z-pat cg3e2d@m* cg3e2e@s* cg3e2f@ae* cg3e23@r)) (call-with-values (lambda () (join-wraps cg3e2d@m* cg3e2e@s* cg3e2f@ae* cg3e2c@e)) (lambda (cg3e50@cg3e4b cg3e51@cg3e4d cg3e52@cg3e4f) (let ((cg3e56@ae* cg3e52@cg3e4f) (cg3e57@s* cg3e51@cg3e4d) (cg3e58@m* cg3e50@cg3e4b)) (cg3e34@f (cg2e82@stx-expr cg3e2c@e) cg3e58@m* cg3e57@s* cg3e56@ae*))))) (if (cg29f8@cg28ca@annotation? cg3e2c@e) (cg3e34@f (cg29fa@cg28ce@annotation-expression cg3e2c@e) cg3e2d@m* cg3e2e@s* cg3e2f@ae*) (values '() cg3e1e@y-pat (cg3daf@match cg3e2c@e cg3e1f@z-pat cg3e2d@m* cg3e2e@s* cg3e2f@ae* cg3e23@r)))))))) (cg3da7@match-each-any (lambda (cg3e00@e cg3e01@m* cg3e02@s* cg3e03@ae*) (if (pair? cg3e00@e) (let ((cg3e08@l (cg3da7@match-each-any (cdr cg3e00@e) cg3e01@m* cg3e02@s* cg3e03@ae*))) (and cg3e08@l (cons (cg3da1@stx^ (car cg3e00@e) cg3e01@m* cg3e02@s* cg3e03@ae*) cg3e08@l))) (if (null? cg3e00@e) '() (if (cg2e80@stx? cg3e00@e) (and (not (cg2e3a@top-marked? cg3e01@m*)) (call-with-values (lambda () (join-wraps cg3e01@m* cg3e02@s* cg3e03@ae* cg3e00@e)) (lambda (cg3e10@cg3e0b cg3e11@cg3e0d cg3e12@cg3e0f) (let ((cg3e16@ae* cg3e12@cg3e0f) (cg3e17@s* cg3e11@cg3e0d) (cg3e18@m* cg3e10@cg3e0b)) (cg3da7@match-each-any (cg2e82@stx-expr cg3e00@e) cg3e18@m* cg3e17@s* cg3e16@ae*))))) (if (cg29f8@cg28ca@annotation? cg3e00@e) (cg3da7@match-each-any (cg29fa@cg28ce@annotation-expression cg3e00@e) cg3e01@m* cg3e02@s* cg3e03@ae*) '#f)))))) (cg3da9@match-empty (lambda (cg3dfa@p cg3dfb@r) (if (null? cg3dfa@p) cg3dfb@r (if (eq? cg3dfa@p '_) cg3dfb@r (if (eq? cg3dfa@p 'any) (cons '() cg3dfb@r) (if (pair? cg3dfa@p) (cg3da9@match-empty (car cg3dfa@p) (cg3da9@match-empty (cdr cg3dfa@p) cg3dfb@r)) (if (eq? cg3dfa@p 'each-any) (cons '() cg3dfb@r) (let ((cg3dfe@t (vector-ref cg3dfa@p '0))) (if (memv cg3dfe@t '(each)) (cg3da9@match-empty (vector-ref cg3dfa@p '1) cg3dfb@r) (if (memv cg3dfe@t '(each+)) (cg3da9@match-empty (vector-ref cg3dfa@p '1) (cg3da9@match-empty (reverse (vector-ref cg3dfa@p '2)) (cg3da9@match-empty (vector-ref cg3dfa@p '3) cg3dfb@r))) (if (memv cg3dfe@t '(free-id atom)) cg3dfb@r (if (memv cg3dfe@t '(scheme-id atom)) cg3dfb@r (if (memv cg3dfe@t '(vector)) (cg3da9@match-empty (vector-ref cg3dfa@p '1) cg3dfb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" cg3dfa@p)))))))))))))) (cg3dab@combine (lambda (cg3df6@r* cg3df7@r) (if (null? (car cg3df6@r*)) cg3df7@r (cons (map car cg3df6@r*) (cg3dab@combine (map cdr cg3df6@r*) cg3df7@r))))) (cg3dad@match* (lambda (cg3dd2@e cg3dd3@p cg3dd4@m* cg3dd5@s* cg3dd6@ae* cg3dd7@r) (if (null? cg3dd3@p) (and (null? cg3dd2@e) cg3dd7@r) (if (pair? cg3dd3@p) (and (pair? cg3dd2@e) (cg3daf@match (car cg3dd2@e) (car cg3dd3@p) cg3dd4@m* cg3dd5@s* cg3dd6@ae* (cg3daf@match (cdr cg3dd2@e) (cdr cg3dd3@p) cg3dd4@m* cg3dd5@s* cg3dd6@ae* cg3dd7@r))) (if (eq? cg3dd3@p 'each-any) (let ((cg3dde@l (cg3da7@match-each-any cg3dd2@e cg3dd4@m* cg3dd5@s* cg3dd6@ae*))) (and cg3dde@l (cons cg3dde@l cg3dd7@r))) (let ((cg3de0@t (vector-ref cg3dd3@p '0))) (if (memv cg3de0@t '(each)) (if (null? cg3dd2@e) (cg3da9@match-empty (vector-ref cg3dd3@p '1) cg3dd7@r) (let ((cg3de2@r* (cg3da3@match-each cg3dd2@e (vector-ref cg3dd3@p '1) cg3dd4@m* cg3dd5@s* cg3dd6@ae*))) (and cg3de2@r* (cg3dab@combine cg3de2@r* cg3dd7@r)))) (if (memv cg3de0@t '(free-id)) (and (symbol? cg3dd2@e) (cg2e3a@top-marked? cg3dd4@m*) (cg2eba@free-id=? (cg3da1@stx^ cg3dd2@e cg3dd4@m* cg3dd5@s* cg3dd6@ae*) (vector-ref cg3dd3@p '1)) cg3dd7@r) (if (memv cg3de0@t '(scheme-id)) (and (symbol? cg3dd2@e) (cg2e3a@top-marked? cg3dd4@m*) (cg2eba@free-id=? (cg3da1@stx^ cg3dd2@e cg3dd4@m* cg3dd5@s* cg3dd6@ae*) (cg3043@scheme-stx (vector-ref cg3dd3@p '1))) cg3dd7@r) (if (memv cg3de0@t '(each+)) (call-with-values (lambda () (cg3da5@match-each+ cg3dd2@e (vector-ref cg3dd3@p '1) (vector-ref cg3dd3@p '2) (vector-ref cg3dd3@p '3) cg3dd4@m* cg3dd5@s* cg3dd6@ae* cg3dd7@r)) (lambda (cg3dea@cg3de5 cg3deb@cg3de7 cg3dec@cg3de9) (let ((cg3df0@r cg3dec@cg3de9) (cg3df1@y-pat cg3deb@cg3de7) (cg3df2@xr* cg3dea@cg3de5)) (and cg3df0@r (null? cg3df1@y-pat) (if (null? cg3df2@xr*) (cg3da9@match-empty (vector-ref cg3dd3@p '1) cg3df0@r) (cg3dab@combine cg3df2@xr* cg3df0@r)))))) (if (memv cg3de0@t '(atom)) (and (fast-equal? (vector-ref cg3dd3@p '1) (cg2ec6@strip cg3dd2@e cg3dd4@m*)) cg3dd7@r) (if (memv cg3de0@t '(vector)) (and (vector? cg3dd2@e) (cg3daf@match (vector->list cg3dd2@e) (vector-ref cg3dd3@p '1) cg3dd4@m* cg3dd5@s* cg3dd6@ae* cg3dd7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" cg3dd3@p))))))))))))) (cg3daf@match (lambda (cg3db4@e cg3db5@p cg3db6@m* cg3db7@s* cg3db8@ae* cg3db9@r) (if (not cg3db9@r) '#f (if (eq? cg3db5@p '_) cg3db9@r (if (eq? cg3db5@p 'any) (cons (cg3da1@stx^ cg3db4@e cg3db6@m* cg3db7@s* cg3db8@ae*) cg3db9@r) (if (cg2e80@stx? cg3db4@e) (and (not (cg2e3a@top-marked? cg3db6@m*)) (call-with-values (lambda () (join-wraps cg3db6@m* cg3db7@s* cg3db8@ae* cg3db4@e)) (lambda (cg3dc6@cg3dc1 cg3dc7@cg3dc3 cg3dc8@cg3dc5) (let ((cg3dcc@ae* cg3dc8@cg3dc5) (cg3dcd@s* cg3dc7@cg3dc3) (cg3dce@m* cg3dc6@cg3dc1)) (cg3daf@match (cg2e82@stx-expr cg3db4@e) cg3db5@p cg3dce@m* cg3dcd@s* cg3dcc@ae* cg3db9@r))))) (if (cg29f8@cg28ca@annotation? cg3db4@e) (cg3daf@match (cg29fa@cg28ce@annotation-expression cg3db4@e) cg3db5@p cg3db6@m* cg3db7@s* cg3db8@ae* cg3db9@r) (cg3dad@match* cg3db4@e cg3db5@p cg3db6@m* cg3db7@s* cg3db8@ae* cg3db9@r))))))))) (lambda (cg3db0@e cg3db1@p) (cg3daf@match cg3db0@e cg3db1@p '() '() '() '())))) (set! cg4b91@cg30bb@syntax-dispatch cg30bb@syntax-dispatch) (set! cg30bd@ellipsis? (lambda (cg3e84@x) (and (cg2eb4@id? cg3e84@x) (cg2eba@free-id=? cg3e84@x (cg3043@scheme-stx '...))))) (set! cg4b92@cg30bd@ellipsis? cg30bd@ellipsis?) (set! cg30bf@underscore? (lambda (cg3e86@x) (and (cg2eb4@id? cg3e86@x) (cg2eba@free-id=? cg3e86@x (cg3043@scheme-stx '_))))) (set! cg4b93@cg30bf@underscore? cg30bf@underscore?) (set! cg30c1@verify-literals (lambda (cg3e88@lits cg3e89@expr) (for-each (lambda (cg3e8c@x) (if (or (not (cg2eb4@id? cg3e8c@x)) (cg30bd@ellipsis? cg3e8c@x) (cg30bf@underscore? cg3e8c@x)) (cg319b@syntax-violation '#f '"invalid literal" cg3e89@expr cg3e8c@x) (void))) cg3e88@lits))) (set! cg4b94@cg30c1@verify-literals cg30c1@verify-literals) (set! cg30c3@syntax-case-transformer (letrec* ((cg3e8f@build-dispatch-call (lambda (cg3f00@pvars cg3f01@expr cg3f02@y cg3f03@r cg3f04@mr) (let ((cg3f0a@ids (map car cg3f00@pvars)) (cg3f0b@levels (map cdr cg3f00@pvars))) (let ((cg3f0e@labels (map cg2e40@gen-label cg3f0a@ids)) (cg3f0f@new-vars (map cg2e3c@gen-lexical cg3f0a@ids))) (let ((cg3f12@body (cg30dd@chi-expr (cg2ea0@add-subst (cg2e74@make-full-rib cg3f0a@ids cg3f0e@labels) cg3f01@expr) (append (map (lambda (cg3f14@label cg3f15@var cg3f16@level) (cons cg3f14@label (cg2ece@make-binding 'syntax (cons cg3f15@var cg3f16@level)))) cg3f0e@labels cg3f0f@new-vars (map cdr cg3f00@pvars)) cg3f03@r) cg3f04@mr))) (list '(primitive apply) (cg2e17@cg2d49@build-lambda '#f cg3f0f@new-vars cg3f12@body) cg3f02@y)))))) (cg3e91@invalid-ids-error (lambda (cg3ef4@id* cg3ef5@e cg3ef6@class) (let cg3efe@find ((cg3efa@id* cg3ef4@id*) (cg3efb@ok* '())) (if (null? cg3efa@id*) (cg319b@syntax-violation '#f '"invalid syntax" cg3ef5@e) (if (cg2eb4@id? (car cg3efa@id*)) (if (cg2ec0@bound-id-member? (car cg3efa@id*) cg3efb@ok*) (cg3197@syntax-error (car cg3efa@id*) '"duplicate " cg3ef6@class) (cg3efe@find (cdr cg3efa@id*) (cons (car cg3efa@id*) cg3efb@ok*))) (cg3197@syntax-error (car cg3efa@id*) '"invalid " cg3ef6@class)))))) (cg3e93@gen-clause (lambda (cg3ecc@x cg3ecd@keys cg3ece@clauses cg3ecf@r cg3ed0@mr cg3ed1@pat cg3ed2@fender cg3ed3@expr) (call-with-values (lambda () (cg30b9@convert-pattern cg3ed1@pat cg3ecd@keys)) (lambda (cg3ee0@cg3edd cg3ee1@cg3edf) (let ((cg3ee4@pvars cg3ee1@cg3edf) (cg3ee5@p cg3ee0@cg3edd)) (if (not (cg2ebe@distinct-bound-ids? (map car cg3ee4@pvars))) (cg3e91@invalid-ids-error (map car cg3ee4@pvars) cg3ed1@pat '"pattern variable") (if (not (for-all (lambda (cg3ee8@x) (not (cg30bd@ellipsis? (car cg3ee8@x)))) cg3ee4@pvars)) (cg319b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" cg3ed1@pat) (let ((cg3eea@y (cg2e3c@gen-lexical 'tmp))) (let ((cg3eec@test (if (eq? cg3ed2@fender '#t) cg3eea@y (let ((cg3eee@call (cg3e8f@build-dispatch-call cg3ee4@pvars cg3ed2@fender cg3eea@y cg3ecf@r cg3ed0@mr))) (list 'if cg3eea@y cg3eee@call (list 'quote '#f)))))) (let ((cg3ef0@conseq (cg3e8f@build-dispatch-call cg3ee4@pvars cg3ed3@expr cg3eea@y cg3ecf@r cg3ed0@mr))) (let ((cg3ef2@altern (cg3e95@gen-syntax-case cg3ecc@x cg3ecd@keys cg3ece@clauses cg3ecf@r cg3ed0@mr))) (list (cg2e17@cg2d49@build-lambda '#f (list cg3eea@y) (list 'if cg3eec@test cg3ef0@conseq cg3ef2@altern)) (list '(primitive syntax-dispatch) cg3ecc@x (list 'quote cg3ee5@p)))))))))))))) (cg3e95@gen-syntax-case (lambda (cg3eaa@x cg3eab@keys cg3eac@clauses cg3ead@r cg3eae@mr) (if (null? cg3eac@clauses) (list '(primitive syntax-error) cg3eaa@x) (let ((cg3eb4@t (car cg3eac@clauses))) (let ((cg3eb6@ls/false (cg30bb@syntax-dispatch cg3eb4@t '(any any)))) (if cg3eb6@ls/false (apply (lambda (cg3eb8@pat cg3eb9@expr) (if (and (cg2eb4@id? cg3eb8@pat) (not (cg2ec0@bound-id-member? cg3eb8@pat cg3eab@keys)) (not (cg30bd@ellipsis? cg3eb8@pat))) (if (cg2eba@free-id=? cg3eb8@pat (cg3043@scheme-stx '_)) (cg30dd@chi-expr cg3eb9@expr cg3ead@r cg3eae@mr) (let ((cg3ebc@lab (cg2e40@gen-label cg3eb8@pat)) (cg3ebd@lex (cg2e3c@gen-lexical cg3eb8@pat))) (let ((cg3ec0@body (cg30dd@chi-expr (cg2ea0@add-subst (cg2e74@make-full-rib (list cg3eb8@pat) (list cg3ebc@lab)) cg3eb9@expr) (cons (cons cg3ebc@lab (cg2ece@make-binding 'syntax (cons cg3ebd@lex '0))) cg3ead@r) cg3eae@mr))) (list (cg2e17@cg2d49@build-lambda '#f (list cg3ebd@lex) cg3ec0@body) cg3eaa@x)))) (cg3e93@gen-clause cg3eaa@x cg3eab@keys (cdr cg3eac@clauses) cg3ead@r cg3eae@mr cg3eb8@pat '#t cg3eb9@expr))) cg3eb6@ls/false) (let ((cg3ec2@t cg3eb4@t)) (let ((cg3ec4@ls/false (cg30bb@syntax-dispatch cg3ec2@t '(any any any)))) (if cg3ec4@ls/false (apply (lambda (cg3ec6@pat cg3ec7@fender cg3ec8@expr) (cg3e93@gen-clause cg3eaa@x cg3eab@keys (cdr cg3eac@clauses) cg3ead@r cg3eae@mr cg3ec6@pat cg3ec7@fender cg3ec8@expr)) cg3ec4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3ec2@t))))))))))) (lambda (cg3e96@e cg3e97@r cg3e98@mr) (let ((cg3e9c@t cg3e96@e)) (let ((cg3e9e@ls/false (cg30bb@syntax-dispatch cg3e9c@t '(_ any each-any . each-any)))) (if cg3e9e@ls/false (apply (lambda (cg3ea0@expr cg3ea1@keys cg3ea2@clauses) (begin (cg30c1@verify-literals cg3ea1@keys cg3e96@e) (let ((cg3ea6@x (cg2e3c@gen-lexical 'tmp))) (let ((cg3ea8@body (cg3e95@gen-syntax-case cg3ea6@x cg3ea1@keys cg3ea2@clauses cg3e97@r cg3e98@mr))) (list (cg2e17@cg2d49@build-lambda '#f (list cg3ea6@x) cg3ea8@body) (cg30dd@chi-expr cg3ea0@expr cg3e97@r cg3e98@mr)))))) cg3e9e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3e9c@t))))))) (set! cg4b95@cg30c3@syntax-case-transformer cg30c3@syntax-case-transformer) (set! cg30c5@ellipsis-map (lambda (cg3f1a@proc cg3f1b@ls . cg3f1e@ls*) (letrec* ((cg3f21@who '...)) (begin (if (not (list? cg3f1b@ls)) (assertion-violation cg3f21@who '"not a list" cg3f1b@ls) (void)) (if (not (null? cg3f1e@ls*)) (let ((cg3f22@n (length cg3f1b@ls))) (for-each (lambda (cg3f24@x) (begin (if (not (list? cg3f24@x)) (assertion-violation cg3f21@who '"not a list" cg3f24@x) (void)) (if (not (= (length cg3f24@x) cg3f22@n)) (assertion-violation cg3f21@who '"length mismatch" cg3f1b@ls cg3f24@x) (void)))) cg3f1e@ls*)) (void)) (apply map cg3f1a@proc cg3f1b@ls cg3f1e@ls*))))) (set! cg4b96@cg30c5@ellipsis-map cg30c5@ellipsis-map) (set! cg30c7@syntax-transformer (letrec* ((cg3f27@gen-syntax (lambda (cg3f9e@src cg3f9f@e cg3fa0@r cg3fa1@maps cg3fa2@ellipsis? cg3fa3@vec?) (let ((cg3faa@t cg3f9f@e)) (let ((cg3fac@ls/false (cg30bb@syntax-dispatch cg3faa@t 'any))) (if (and cg3fac@ls/false (apply (lambda (cg3fae@dots) (cg3fa2@ellipsis? cg3fae@dots)) cg3fac@ls/false)) (apply (lambda (cg3fb0@dots) (cg319b@syntax-violation '#f '"misplaced ellipsis in syntax form" cg3f9e@src)) cg3fac@ls/false) (let ((cg3fb2@t cg3faa@t)) (let ((cg3fb4@ls/false (cg30bb@syntax-dispatch cg3fb2@t 'any))) (if (and cg3fb4@ls/false (apply (lambda (cg3fb6@id) (cg2eb4@id? cg3fb6@id)) cg3fb4@ls/false)) (apply (lambda (cg3fb8@id) (let ((cg3fba@label (cg2eca@id->label cg3f9f@e))) (let ((cg3fbc@b (cg2ecc@label->binding cg3fba@label cg3fa0@r))) (if (eq? (cg2ed0@binding-type cg3fbc@b) 'syntax) (call-with-values (lambda () (let ((cg3fc2@var.lev (cg2ed2@binding-value cg3fbc@b))) (cg3f29@gen-ref cg3f9e@src (car cg3fc2@var.lev) (cdr cg3fc2@var.lev) cg3fa1@maps))) (lambda (cg3fc4@cg3fbf cg3fc5@cg3fc1) (let ((cg3fc8@maps cg3fc5@cg3fc1) (cg3fc9@var cg3fc4@cg3fbf)) (values (list 'ref cg3fc9@var) cg3fc8@maps)))) (values (list 'quote cg3f9f@e) cg3fa1@maps))))) cg3fb4@ls/false) (let ((cg3fcc@t cg3fb2@t)) (let ((cg3fce@ls/false (cg30bb@syntax-dispatch cg3fcc@t '(any any)))) (if (and cg3fce@ls/false (apply (lambda (cg3fd0@dots cg3fd1@e) (cg3fa2@ellipsis? cg3fd0@dots)) cg3fce@ls/false)) (apply (lambda (cg3fd4@dots cg3fd5@e) (if cg3fa3@vec? (cg319b@syntax-violation '#f '"misplaced ellipsis in syntax form" cg3f9e@src) (cg3f27@gen-syntax cg3f9e@src cg3fd5@e cg3fa0@r cg3fa1@maps (lambda (cg3fd8@x) '#f) '#f))) cg3fce@ls/false) (let ((cg3fda@t cg3fcc@t)) (let ((cg3fdc@ls/false (cg30bb@syntax-dispatch cg3fda@t '(any any . any)))) (if (and cg3fdc@ls/false (apply (lambda (cg3fde@x cg3fdf@dots cg3fe0@y) (cg3fa2@ellipsis? cg3fdf@dots)) cg3fdc@ls/false)) (apply (lambda (cg3fe4@x cg3fe5@dots cg3fe6@y) (let cg3ffc@f ((cg3fea@y cg3fe6@y) (cg3feb@k (lambda (cg3fee@maps) (call-with-values (lambda () (cg3f27@gen-syntax cg3f9e@src cg3fe4@x cg3fa0@r (cons '() cg3fee@maps) cg3fa2@ellipsis? '#f)) (lambda (cg3ff4@cg3ff1 cg3ff5@cg3ff3) (let ((cg3ff8@maps cg3ff5@cg3ff3) (cg3ff9@x cg3ff4@cg3ff1)) (if (null? (car cg3ff8@maps)) (cg319b@syntax-violation '#f '"extra ellipsis in syntax form" cg3f9e@src) (values (cg3f2f@gen-map cg3ff9@x (car cg3ff8@maps)) (cdr cg3ff8@maps))))))))) (let ((cg3ffe@t cg3fea@y)) (let ((cg4000@ls/false (cg30bb@syntax-dispatch cg3ffe@t '()))) (if cg4000@ls/false (apply (lambda () (cg3feb@k cg3fa1@maps)) cg4000@ls/false) (let ((cg4002@t cg3ffe@t)) (let ((cg4004@ls/false (cg30bb@syntax-dispatch cg4002@t '(any . any)))) (if (and cg4004@ls/false (apply (lambda (cg4006@dots cg4007@y) (cg3fa2@ellipsis? cg4006@dots)) cg4004@ls/false)) (apply (lambda (cg400a@dots cg400b@y) (cg3ffc@f cg400b@y (lambda (cg400e@maps) (call-with-values (lambda () (cg3feb@k (cons '() cg400e@maps))) (lambda (cg4014@cg4011 cg4015@cg4013) (let ((cg4018@maps cg4015@cg4013) (cg4019@x cg4014@cg4011)) (if (null? (car cg4018@maps)) (cg319b@syntax-violation '#f '"extra ellipsis in syntax form" cg3f9e@src) (values (cg3f2d@gen-mappend cg4019@x (car cg4018@maps)) (cdr cg4018@maps))))))))) cg4004@ls/false) (let ((cg401c@t cg4002@t)) (let ((cg401e@ls/false (cg30bb@syntax-dispatch cg401c@t '_))) (if cg401e@ls/false (apply (lambda () (call-with-values (lambda () (cg3f27@gen-syntax cg3f9e@src cg3fea@y cg3fa0@r cg3fa1@maps cg3fa2@ellipsis? cg3fa3@vec?)) (lambda (cg4024@cg4021 cg4025@cg4023) (let ((cg4028@maps cg4025@cg4023) (cg4029@y cg4024@cg4021)) (call-with-values (lambda () (cg3feb@k cg4028@maps)) (lambda (cg4030@cg402d cg4031@cg402f) (let ((cg4034@maps cg4031@cg402f) (cg4035@x cg4030@cg402d)) (values (cg3f2b@gen-append cg4035@x cg4029@y) cg4034@maps)))))))) cg401e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg401c@t)))))))))))) cg3fdc@ls/false) (let ((cg4038@t cg3fda@t)) (let ((cg403a@ls/false (cg30bb@syntax-dispatch cg4038@t '(any . any)))) (if cg403a@ls/false (apply (lambda (cg403c@x cg403d@y) (call-with-values (lambda () (cg3f27@gen-syntax cg3f9e@src cg403c@x cg3fa0@r cg3fa1@maps cg3fa2@ellipsis? '#f)) (lambda (cg4044@cg4041 cg4045@cg4043) (let ((cg4048@maps cg4045@cg4043) (cg4049@xnew cg4044@cg4041)) (call-with-values (lambda () (cg3f27@gen-syntax cg3f9e@src cg403d@y cg3fa0@r cg4048@maps cg3fa2@ellipsis? cg3fa3@vec?)) (lambda (cg4050@cg404d cg4051@cg404f) (let ((cg4054@maps cg4051@cg404f) (cg4055@ynew cg4050@cg404d)) (values (cg3f31@gen-cons cg3f9f@e cg403c@x cg403d@y cg4049@xnew cg4055@ynew) cg4054@maps)))))))) cg403a@ls/false) (let ((cg4058@t cg4038@t)) (let ((cg405a@ls/false (cg30bb@syntax-dispatch cg4058@t '#(vector each-any)))) (if cg405a@ls/false (apply (lambda (cg405c@ls) (call-with-values (lambda () (cg3f27@gen-syntax cg3f9e@src cg405c@ls cg3fa0@r cg3fa1@maps cg3fa2@ellipsis? '#t)) (lambda (cg4062@cg405f cg4063@cg4061) (let ((cg4066@maps cg4063@cg4061) (cg4067@lsnew cg4062@cg405f)) (values (cg3f33@gen-vector cg3f9f@e cg405c@ls cg4067@lsnew) cg4066@maps))))) cg405a@ls/false) (let ((cg406a@t cg4058@t)) (let ((cg406c@ls/false (cg30bb@syntax-dispatch cg406a@t '_))) (if cg406c@ls/false (apply (lambda () (values (list 'quote cg3f9f@e) cg3fa1@maps)) cg406c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg406a@t)))))))))))))))))))))))) (cg3f29@gen-ref (lambda (cg3f84@src cg3f85@var cg3f86@level cg3f87@maps) (if (= cg3f86@level '0) (values cg3f85@var cg3f87@maps) (if (null? cg3f87@maps) (cg319b@syntax-violation '#f '"missing ellipsis in syntax form" cg3f84@src) (call-with-values (lambda () (cg3f29@gen-ref cg3f84@src cg3f85@var (- cg3f86@level '1) (cdr cg3f87@maps))) (lambda (cg3f90@cg3f8d cg3f91@cg3f8f) (let ((cg3f94@outer-maps cg3f91@cg3f8f) (cg3f95@outer-var cg3f90@cg3f8d)) (let ((cg3f98@t (assq cg3f95@outer-var (car cg3f87@maps)))) (if cg3f98@t ((lambda (cg3f9a@b) (values (cdr cg3f9a@b) cg3f87@maps)) cg3f98@t) (let ((cg3f9c@inner-var (cg2e3c@gen-lexical 'tmp))) (values cg3f9c@inner-var (cons (cons (cons cg3f95@outer-var cg3f9c@inner-var) (car cg3f87@maps)) cg3f94@outer-maps)))))))))))) (cg3f2b@gen-append (lambda (cg3f80@x cg3f81@y) (if (fast-equal? cg3f81@y ''()) cg3f80@x (list 'append cg3f80@x cg3f81@y)))) (cg3f2d@gen-mappend (lambda (cg3f7c@e cg3f7d@map-env) (list 'apply '(primitive append) (cg3f2f@gen-map cg3f7c@e cg3f7d@map-env)))) (cg3f2f@gen-map (lambda (cg3f6a@e cg3f6b@map-env) (let ((cg3f6e@formals (map cdr cg3f6b@map-env)) (cg3f6f@actuals (map (lambda (cg3f72@x) (list 'ref (car cg3f72@x))) cg3f6b@map-env))) (if (eq? (car cg3f6a@e) 'ref) (car cg3f6f@actuals) (if (for-all (lambda (cg3f74@x) (and (eq? (car cg3f74@x) 'ref) (memq (cadr cg3f74@x) cg3f6e@formals))) (cdr cg3f6a@e)) (let ((cg3f76@args (map (let ((cg3f78@r (map cons cg3f6e@formals cg3f6f@actuals))) (lambda (cg3f7a@x) (cdr (assq (cadr cg3f7a@x) cg3f78@r)))) (cdr cg3f6a@e)))) (cons 'map (cons (list 'primitive (car cg3f6a@e)) cg3f76@args))) (cons* 'map (list 'lambda cg3f6e@formals cg3f6a@e) cg3f6f@actuals)))))) (cg3f31@gen-cons (lambda (cg3f5a@e cg3f5b@x cg3f5c@y cg3f5d@xnew cg3f5e@ynew) (let ((cg3f64@t (car cg3f5e@ynew))) (if (memv cg3f64@t '(quote)) (if (eq? (car cg3f5d@xnew) 'quote) (let ((cg3f66@xnew (cadr cg3f5d@xnew)) (cg3f67@ynew (cadr cg3f5e@ynew))) (if (and (eq? cg3f66@xnew cg3f5b@x) (eq? cg3f67@ynew cg3f5c@y)) (list 'quote cg3f5a@e) (list 'quote (cons cg3f66@xnew cg3f67@ynew)))) (if (null? (cadr cg3f5e@ynew)) (list 'list cg3f5d@xnew) (list 'cons cg3f5d@xnew cg3f5e@ynew))) (if (memv cg3f64@t '(list)) (cons 'list (cons cg3f5d@xnew (cdr cg3f5e@ynew))) (list 'cons cg3f5d@xnew cg3f5e@ynew)))))) (cg3f33@gen-vector (lambda (cg3f54@e cg3f55@ls cg3f56@lsnew) (if (eq? (car cg3f56@lsnew) 'quote) (if (eq? (cadr cg3f56@lsnew) cg3f55@ls) (list 'quote cg3f54@e) (list 'quote (list->vector (cadr cg3f56@lsnew)))) (if (eq? (car cg3f56@lsnew) 'list) (cons 'vector (cdr cg3f56@lsnew)) (list 'list->vector cg3f56@lsnew))))) (cg3f35@regen (lambda (cg3f4e@x) (let ((cg3f50@t (car cg3f4e@x))) (if (memv cg3f50@t '(ref)) (cadr cg3f4e@x) (if (memv cg3f50@t '(primitive)) (list 'primitive (cadr cg3f4e@x)) (if (memv cg3f50@t '(quote)) (list 'quote (cadr cg3f4e@x)) (if (memv cg3f50@t '(lambda)) (cg2e17@cg2d49@build-lambda '#f (cadr cg3f4e@x) (cg3f35@regen (caddr cg3f4e@x))) (if (memv cg3f50@t '(map)) (let ((cg3f52@ls (map cg3f35@regen (cdr cg3f4e@x)))) (cons '(primitive ellipsis-map) cg3f52@ls)) (cons (list 'primitive (car cg3f4e@x)) (map cg3f35@regen (cdr cg3f4e@x)))))))))))) (lambda (cg3f36@e cg3f37@r cg3f38@mr) (let ((cg3f3c@t cg3f36@e)) (let ((cg3f3e@ls/false (cg30bb@syntax-dispatch cg3f3c@t '(_ any)))) (if cg3f3e@ls/false (apply (lambda (cg3f40@x) (call-with-values (lambda () (cg3f27@gen-syntax cg3f36@e cg3f40@x cg3f37@r '() cg30bd@ellipsis? '#f)) (lambda (cg3f46@cg3f43 cg3f47@cg3f45) (let ((cg3f4a@maps cg3f47@cg3f45) (cg3f4b@e cg3f46@cg3f43)) (cg3f35@regen cg3f4b@e))))) cg3f3e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg3f3c@t))))))) (set! cg4b97@cg30c7@syntax-transformer cg30c7@syntax-transformer) (set! cg30c9@core-macro-transformer (lambda (cg406e@name) (let ((cg4070@t cg406e@name)) (if (memv cg4070@t '(quote)) cg306b@quote-transformer (if (memv cg4070@t '(lambda)) cg306f@lambda-transformer (if (memv cg4070@t '(case-lambda)) cg306d@case-lambda-transformer (if (memv cg4070@t '(letrec)) cg3053@letrec-transformer (if (memv cg4070@t '(letrec*)) cg3055@letrec*-transformer (if (memv cg4070@t '(let)) cg3051@let-transformer (if (memv cg4070@t '(if)) cg3063@if-transformer (if (memv cg4070@t '(and)) cg3065@and-transformer (if (memv cg4070@t '(or)) cg3067@or-transformer (if (memv cg4070@t '(foreign-call)) cg30b7@foreign-call-transformer (if (memv cg4070@t '(syntax-case)) cg30c3@syntax-case-transformer (if (memv cg4070@t '(syntax)) cg30c7@syntax-transformer (if (memv cg4070@t '(type-descriptor)) cg3059@type-descriptor-transformer (if (memv cg4070@t '(record-type-descriptor)) cg305b@record-type-descriptor-transformer (if (memv cg4070@t '(record-constructor-descriptor)) cg305d@record-constructor-descriptor-transformer (if (memv cg4070@t '(fluid-let-syntax)) cg3057@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" cg406e@name)))))))))))))))))))) (set! cg4b98@cg30c9@core-macro-transformer cg30c9@core-macro-transformer) (set! cg30cb@symbol-macro (lambda (cg4072@x cg4073@set) (let ((cg4076@t cg4072@x)) (let ((cg4078@ls/false (cg30bb@syntax-dispatch cg4076@t '(_ any)))) (if (and cg4078@ls/false (apply (lambda (cg407a@name) (and (cg2eb4@id? cg407a@name) (memq (cg2eb6@id->sym cg407a@name) cg4073@set))) cg4078@ls/false)) (apply (lambda (cg407c@name) (cg3071@bless (list 'quote cg407c@name))) cg4078@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4076@t)))))) (set! cg4b99@cg30cb@symbol-macro cg30cb@symbol-macro) (set! cg30cd@macro-transformer (lambda (cg407e@x) (if (procedure? cg407e@x) cg407e@x (if (symbol? cg407e@x) (let ((cg4080@t cg407e@x)) (if (memv cg4080@t '(define-record-type)) cg30af@define-record-type-macro (if (memv cg4080@t '(define-struct)) cg30ad@define-struct-macro (if (memv cg4080@t '(include)) cg30a3@include-macro (if (memv cg4080@t '(cond)) cg309f@cond-macro (if (memv cg4080@t '(let)) cg3077@let-macro (if (memv cg4080@t '(do)) cg3097@do-macro (if (memv cg4080@t '(or)) cg309b@or-macro (if (memv cg4080@t '(and)) cg309d@and-macro (if (memv cg4080@t '(let*)) cg3099@let*-macro (if (memv cg4080@t '(let-values)) cg3079@let-values-macro (if (memv cg4080@t '(let*-values)) cg307b@let*-values-macro (if (memv cg4080@t '(syntax-rules)) cg30a7@syntax-rules-macro (if (memv cg4080@t '(quasiquote)) cg30a9@quasiquote-macro (if (memv cg4080@t '(quasisyntax)) cg30ab@quasisyntax-macro (if (memv cg4080@t '(with-syntax)) cg3073@with-syntax-macro (if (memv cg4080@t '(when)) cg305f@when-macro (if (memv cg4080@t '(unless)) cg3061@unless-macro (if (memv cg4080@t '(case)) cg3069@case-macro (if (memv cg4080@t '(identifier-syntax)) cg3095@identifier-syntax-macro (if (memv cg4080@t '(time)) cg308d@time-macro (if (memv cg4080@t '(delay)) cg308f@delay-macro (if (memv cg4080@t '(assert)) cg3091@assert-macro (if (memv cg4080@t '(endianness)) cg3093@endianness-macro (if (memv cg4080@t '(guard)) cg3089@guard-macro (if (memv cg4080@t '(define-enumeration)) cg308b@define-enumeration-macro (if (memv cg4080@t '(trace-lambda)) cg307d@trace-lambda-macro (if (memv cg4080@t '(trace-define)) cg307f@trace-define-macro (if (memv cg4080@t '(trace-define-syntax)) cg3081@trace-define-syntax-macro (if (memv cg4080@t '(trace-let-syntax)) cg3085@trace-let-syntax-macro (if (memv cg4080@t '(trace-letrec-syntax)) cg3087@trace-letrec-syntax-macro (if (memv cg4080@t '(define-condition-type)) cg30b1@define-condition-type-macro (if (memv cg4080@t '(parameterize)) cg30b5@parameterize-macro (if (memv cg4080@t '(include-into)) cg30a5@include-into-macro (if (memv cg4080@t '(eol-style)) (lambda (cg4082@x) (cg30cb@symbol-macro cg4082@x '(none lf cr crlf nel crnel ls))) (if (memv cg4080@t '(error-handling-mode)) (lambda (cg4084@x) (cg30cb@symbol-macro cg4084@x '(ignore raise replace))) (if (memv cg4080@t '(buffer-mode)) (lambda (cg4086@x) (cg30cb@symbol-macro cg4086@x '(none line block))) (if (memv cg4080@t '(file-options)) cg2e2f@file-options-macro (if (memv cg4080@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) cg30b3@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" cg407e@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" cg407e@x))))) (set! cg4b9a@cg30cd@macro-transformer cg30cd@macro-transformer) (set! cg30cf@local-macro-transformer (lambda (cg4088@x) (car cg4088@x))) (set! cg4b9b@cg30cf@local-macro-transformer cg30cf@local-macro-transformer) (set! cg30d1@do-macro-call (lambda (cg408a@transformer cg408b@expr) (let ((cg408e@out (cg408a@transformer (cg2e9e@add-mark cg2e98@anti-mark cg408b@expr '#f)))) (begin (let cg4092@f ((cg4090@x cg408e@out)) (if (not (cg2e80@stx? cg4090@x)) (if (pair? cg4090@x) (begin (cg4092@f (car cg4090@x)) (cg4092@f (cdr cg4090@x))) (if (vector? cg4090@x) (vector-for-each cg4092@f cg4090@x) (if (symbol? cg4090@x) (cg319b@syntax-violation '#f '"raw symbol encountered in output of macro" cg408b@expr cg4090@x) (void)))) (void))) (cg2e9e@add-mark (cg2e96@gen-mark) cg408e@out cg408b@expr))))) (set! cg4b9c@cg30d1@do-macro-call cg30d1@do-macro-call) (set! cg30d3@chi-macro (lambda (cg4094@p cg4095@e) (cg30d1@do-macro-call (cg30cd@macro-transformer cg4094@p) cg4095@e))) (set! cg4b9d@cg30d3@chi-macro cg30d3@chi-macro) (set! cg30d5@chi-local-macro (lambda (cg4098@p cg4099@e) (cg30d1@do-macro-call (cg30cf@local-macro-transformer cg4098@p) cg4099@e))) (set! cg4b9e@cg30d5@chi-local-macro cg30d5@chi-local-macro) (set! cg30d7@chi-global-macro (lambda (cg409c@p cg409d@e) (let ((cg40a0@lib (car cg409c@p)) (cg40a1@loc (cdr cg409c@p))) (begin (cg2cd1@cg2b20@visit-library cg40a0@lib) (let ((cg40a4@x (symbol-value cg40a1@loc))) (let ((cg40a6@transformer (if (procedure? cg40a4@x) cg40a4@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" cg40a4@x)))) (cg30d1@do-macro-call cg40a6@transformer cg409d@e))))))) (set! cg4b9f@cg30d7@chi-global-macro cg30d7@chi-global-macro) (set! cg30d9@chi-expr* (lambda (cg40a8@e* cg40a9@r cg40aa@mr) (if (null? cg40a8@e*) '() (let ((cg40ae@e (cg30dd@chi-expr (car cg40a8@e*) cg40a9@r cg40aa@mr))) (cons cg40ae@e (cg30d9@chi-expr* (cdr cg40a8@e*) cg40a9@r cg40aa@mr)))))) (set! cg4ba0@cg30d9@chi-expr* cg30d9@chi-expr*) (set! cg30db@chi-application (lambda (cg40b0@e cg40b1@r cg40b2@mr) (let ((cg40b6@t cg40b0@e)) (let ((cg40b8@ls/false (cg30bb@syntax-dispatch cg40b6@t '(any . each-any)))) (if cg40b8@ls/false (apply (lambda (cg40ba@rator cg40bb@rands) (let ((cg40be@rator (cg30dd@chi-expr cg40ba@rator cg40b1@r cg40b2@mr))) (cons cg40be@rator (cg30d9@chi-expr* cg40bb@rands cg40b1@r cg40b2@mr)))) cg40b8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg40b6@t)))))) (set! cg4ba1@cg30db@chi-application cg30db@chi-application) (set! cg30dd@chi-expr (lambda (cg40c0@e cg40c1@r cg40c2@mr) (call-with-values (lambda () (cg2ed6@syntax-type cg40c0@e cg40c1@r)) (lambda (cg40cc@cg40c7 cg40cd@cg40c9 cg40ce@cg40cb) (let ((cg40d2@kwd cg40ce@cg40cb) (cg40d3@value cg40cd@cg40c9) (cg40d4@type cg40cc@cg40c7)) (let ((cg40d8@t cg40d4@type)) (if (memv cg40d8@t '(core-macro)) (let ((cg40da@transformer (cg30c9@core-macro-transformer cg40d3@value))) (cg40da@transformer cg40c0@e cg40c1@r cg40c2@mr)) (if (memv cg40d8@t '(global)) (let ((cg40dc@lib (car cg40d3@value))) (let ((cg40de@loc (cdr cg40d3@value))) (begin ((cg3123@inv-collector) cg40dc@lib) cg40de@loc))) (if (memv cg40d8@t '(core-prim)) (let ((cg40e0@name cg40d3@value)) (list 'primitive cg40e0@name)) (if (memv cg40d8@t '(call)) (cg30db@chi-application cg40c0@e cg40c1@r cg40c2@mr) (if (memv cg40d8@t '(lexical)) (let ((cg40e2@lex (cg3045@lexical-var cg40d3@value))) cg40e2@lex) (if (memv cg40d8@t '(global-macro global-macro!)) (cg30dd@chi-expr (cg30d7@chi-global-macro cg40d3@value cg40c0@e) cg40c1@r cg40c2@mr) (if (memv cg40d8@t '(local-macro local-macro!)) (cg30dd@chi-expr (cg30d5@chi-local-macro cg40d3@value cg40c0@e) cg40c1@r cg40c2@mr) (if (memv cg40d8@t '(macro macro!)) (cg30dd@chi-expr (cg30d3@chi-macro cg40d3@value cg40c0@e) cg40c1@r cg40c2@mr) (if (memv cg40d8@t '(constant)) (let ((cg40e4@datum cg40d3@value)) (list 'quote cg40e4@datum)) (if (memv cg40d8@t '(set!)) (cg30df@chi-set! cg40c0@e cg40c1@r cg40c2@mr) (if (memv cg40d8@t '(begin)) (let ((cg40e6@t cg40c0@e)) (let ((cg40e8@ls/false (cg30bb@syntax-dispatch cg40e6@t '(_ any . each-any)))) (if cg40e8@ls/false (apply (lambda (cg40ea@x cg40eb@x*) (cg2e19@cg2d79@build-sequence '#f (cg30d9@chi-expr* (cons cg40ea@x cg40eb@x*) cg40c1@r cg40c2@mr))) cg40e8@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg40e6@t)))) (if (memv cg40d8@t '(let-syntax letrec-syntax)) (let ((cg40ee@t cg40c0@e)) (let ((cg40f0@ls/false (cg30bb@syntax-dispatch cg40ee@t '(_ #(each (any any)) any . each-any)))) (if (and cg40f0@ls/false (apply (lambda (cg40f2@xlhs* cg40f3@xrhs* cg40f4@xbody cg40f5@xbody*) (if (not (cg2ebc@valid-bound-ids? cg40f2@xlhs*)) (cg319b@syntax-violation '#f '"invalid identifiers" cg40c0@e) (void))) cg40f0@ls/false)) (apply (lambda (cg40fa@xlhs* cg40fb@xrhs* cg40fc@xbody cg40fd@xbody*) (let ((cg4102@xlab* (map cg2e40@gen-label cg40fa@xlhs*))) (let ((cg4104@xrib (cg2e74@make-full-rib cg40fa@xlhs* cg4102@xlab*))) (let ((cg4106@xb* (map (lambda (cg4108@x) (cg2eec@make-eval-transformer (cg3115@expand-transformer (if (eq? cg40d4@type 'let-syntax) cg4108@x (cg2ea0@add-subst cg4104@xrib cg4108@x)) cg40c2@mr))) cg40fb@xrhs*))) (cg2e19@cg2d79@build-sequence '#f (cg30d9@chi-expr* (map (lambda (cg410a@x) (cg2ea0@add-subst cg4104@xrib cg410a@x)) (cons cg40fc@xbody cg40fd@xbody*)) (append (map cons cg4102@xlab* cg4106@xb*) cg40c1@r) (append (map cons cg4102@xlab* cg4106@xb*) cg40c2@mr))))))) cg40f0@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg40ee@t)))) (if (memv cg40d8@t '(displaced-lexical)) (cg319b@syntax-violation '#f '"identifier out of context" cg40c0@e) (if (memv cg40d8@t '(syntax)) (cg319b@syntax-violation '#f '"reference to pattern variable outside a syntax form" cg40c0@e) (if (memv cg40d8@t '(define define-syntax module import library)) (cg319b@syntax-violation '#f (string-append (let ((cg410c@t cg40d4@type)) (if (memv cg410c@t '(define)) '"a definition" (if (memv cg410c@t '(define-syntax)) '"a define-syntax" (if (memv cg410c@t '(module)) '"a module definition" (if (memv cg410c@t '(library)) '"a library definition" (if (memv cg410c@t '(import)) '"an import declaration" (if (memv cg410c@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") cg40c0@e) (if (memv cg40d8@t '(mutable)) (cg319b@syntax-violation '#f '"attempt to reference an unexportable variable" cg40c0@e) (cg319b@syntax-violation '#f '"invalid expression" cg40c0@e))))))))))))))))))))))) (set! cg4ba2@cg30dd@chi-expr cg30dd@chi-expr) (set! cg30df@chi-set! (lambda (cg410e@e cg410f@r cg4110@mr) (let ((cg4114@t cg410e@e)) (let ((cg4116@ls/false (cg30bb@syntax-dispatch cg4114@t '(_ any any)))) (if (and cg4116@ls/false (apply (lambda (cg4118@x cg4119@v) (cg2eb4@id? cg4118@x)) cg4116@ls/false)) (apply (lambda (cg411c@x cg411d@v) (call-with-values (lambda () (cg2ed6@syntax-type cg411c@x cg410f@r)) (lambda (cg4126@cg4121 cg4127@cg4123 cg4128@cg4125) (let ((cg412c@kwd cg4128@cg4125) (cg412d@value cg4127@cg4123) (cg412e@type cg4126@cg4121)) (let ((cg4132@t cg412e@type)) (if (memv cg4132@t '(lexical)) (begin (cg3049@set-lexical-mutable! cg412d@value '#t) (list 'set! (cg3045@lexical-var cg412d@value) (cg30dd@chi-expr cg411d@v cg410f@r cg4110@mr))) (if (memv cg4132@t '(core-prim)) (cg319b@syntax-violation '#f '"cannot modify imported core primitive" cg410e@e) (if (memv cg4132@t '(global)) (cg319b@syntax-violation '#f '"attempt to modify imported binding" cg410e@e) (if (memv cg4132@t '(global-macro!)) (cg30dd@chi-expr (cg30d7@chi-global-macro cg412d@value cg410e@e) cg410f@r cg4110@mr) (if (memv cg4132@t '(local-macro!)) (cg30dd@chi-expr (cg30d5@chi-local-macro cg412d@value cg410e@e) cg410f@r cg4110@mr) (if (memv cg4132@t '(mutable)) (cg319b@syntax-violation '#f '"attempt to assign to an unexportable variable" cg410e@e) (cg319b@syntax-violation '#f '"invalid syntax" cg410e@e)))))))))))) cg4116@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4114@t)))))) (set! cg4ba3@cg30df@chi-set! cg30df@chi-set!) (set! cg30e1@verify-formals (lambda (cg4134@fmls cg4135@stx) (let ((cg4138@t cg4134@fmls)) (let ((cg413a@ls/false (cg30bb@syntax-dispatch cg4138@t 'each-any))) (if cg413a@ls/false (apply (lambda (cg413c@x*) (if (not (cg2ebc@valid-bound-ids? cg413c@x*)) (cg3075@invalid-fmls-error cg4135@stx cg4134@fmls) (void))) cg413a@ls/false) (let ((cg413e@t cg4138@t)) (let ((cg4140@ls/false (cg30bb@syntax-dispatch cg413e@t '#(each+ any () any)))) (if cg4140@ls/false (apply (lambda (cg4142@x* cg4143@x) (if (not (cg2ebc@valid-bound-ids? (cons cg4143@x cg4142@x*))) (cg3075@invalid-fmls-error cg4135@stx cg4134@fmls) (void))) cg4140@ls/false) (let ((cg4146@t cg413e@t)) (let ((cg4148@ls/false (cg30bb@syntax-dispatch cg4146@t '_))) (if cg4148@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid syntax" cg4135@stx)) cg4148@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4146@t)))))))))))) (set! cg4ba4@cg30e1@verify-formals cg30e1@verify-formals) (set! cg30e3@chi-lambda-clause (lambda (cg414a@stx cg414b@fmls cg414c@body* cg414d@r cg414e@mr) (let ((cg4154@t cg414b@fmls)) (let ((cg4156@ls/false (cg30bb@syntax-dispatch cg4154@t 'each-any))) (if cg4156@ls/false (apply (lambda (cg4158@x*) (begin (cg30e1@verify-formals cg414b@fmls cg414a@stx) (let ((cg415a@lex* (map cg2e3c@gen-lexical cg4158@x*)) (cg415b@lab* (map cg2e40@gen-label cg4158@x*))) (values cg415a@lex* (cg30f3@chi-internal (cg2ea0@add-subst (cg2e74@make-full-rib cg4158@x* cg415b@lab*) cg414c@body*) (cg304d@add-lexicals cg415b@lab* cg415a@lex* cg414d@r) cg414e@mr))))) cg4156@ls/false) (let ((cg415e@t cg4154@t)) (let ((cg4160@ls/false (cg30bb@syntax-dispatch cg415e@t '#(each+ any () any)))) (if cg4160@ls/false (apply (lambda (cg4162@x* cg4163@x) (begin (cg30e1@verify-formals cg414b@fmls cg414a@stx) (let ((cg4166@lex* (map cg2e3c@gen-lexical cg4162@x*)) (cg4167@lab* (map cg2e40@gen-label cg4162@x*)) (cg4168@lex (cg2e3c@gen-lexical cg4163@x)) (cg4169@lab (cg2e40@gen-label cg4163@x))) (values (append cg4166@lex* cg4168@lex) (cg30f3@chi-internal (cg2ea0@add-subst (cg2e74@make-full-rib (cons cg4163@x cg4162@x*) (cons cg4169@lab cg4167@lab*)) cg414c@body*) (cg304d@add-lexicals (cons cg4169@lab cg4167@lab*) (cons cg4168@lex cg4166@lex*) cg414d@r) cg414e@mr))))) cg4160@ls/false) (let ((cg416e@t cg415e@t)) (let ((cg4170@ls/false (cg30bb@syntax-dispatch cg416e@t '_))) (if cg4170@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid syntax" cg414b@fmls)) cg4170@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg416e@t)))))))))))) (set! cg4ba5@cg30e3@chi-lambda-clause cg30e3@chi-lambda-clause) (set! cg30e5@chi-lambda-clause* (lambda (cg4172@stx cg4173@fmls* cg4174@body** cg4175@r cg4176@mr) (if (null? cg4173@fmls*) (values '() '()) (call-with-values (lambda () (cg30e3@chi-lambda-clause cg4172@stx (car cg4173@fmls*) (car cg4174@body**) cg4175@r cg4176@mr)) (lambda (cg4180@cg417d cg4181@cg417f) (let ((cg4184@b cg4181@cg417f) (cg4185@a cg4180@cg417d)) (call-with-values (lambda () (cg30e5@chi-lambda-clause* cg4172@stx (cdr cg4173@fmls*) (cdr cg4174@body**) cg4175@r cg4176@mr)) (lambda (cg418c@cg4189 cg418d@cg418b) (let ((cg4190@b* cg418d@cg418b) (cg4191@a* cg418c@cg4189)) (values (cons cg4185@a cg4191@a*) (cons cg4184@b cg4190@b*))))))))))) (set! cg4ba6@cg30e5@chi-lambda-clause* cg30e5@chi-lambda-clause*) (set! cg30e7@chi-defun (lambda (cg4194@x cg4195@r cg4196@mr) (let ((cg419a@fmls (car cg4194@x)) (cg419b@body* (cdr cg4194@x))) (call-with-values (lambda () (cg30e3@chi-lambda-clause cg419a@fmls cg419a@fmls cg419b@body* cg4195@r cg4196@mr)) (lambda (cg41a2@cg419f cg41a3@cg41a1) (let ((cg41a6@body cg41a3@cg41a1) (cg41a7@fmls cg41a2@cg419f)) (cg2e17@cg2d49@build-lambda '#f cg41a7@fmls cg41a6@body))))))) (set! cg4ba7@cg30e7@chi-defun cg30e7@chi-defun) (set! cg30e9@chi-rhs (lambda (cg41aa@rhs cg41ab@r cg41ac@mr) (let ((cg41b0@t (car cg41aa@rhs))) (if (memv cg41b0@t '(defun)) (cg30e7@chi-defun (cdr cg41aa@rhs) cg41ab@r cg41ac@mr) (if (memv cg41b0@t '(expr)) (let ((cg41b2@expr (cdr cg41aa@rhs))) (cg30dd@chi-expr cg41b2@expr cg41ab@r cg41ac@mr)) (if (memv cg41b0@t '(top-expr)) (let ((cg41b4@expr (cdr cg41aa@rhs))) (cg2e19@cg2d79@build-sequence '#f (list (cg30dd@chi-expr cg41b4@expr cg41ab@r cg41ac@mr) (cg2e1a@cg2d7b@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" cg41aa@rhs))))))) (set! cg4ba8@cg30e9@chi-rhs cg30e9@chi-rhs) (set! cg30eb@expand-interaction-rhs*/init* (lambda (cg41b6@lhs* cg41b7@rhs* cg41b8@init* cg41b9@r cg41ba@mr) (let cg41c4@f ((cg41c0@lhs* cg41b6@lhs*) (cg41c1@rhs* cg41b7@rhs*)) (if (null? cg41c0@lhs*) (map (lambda (cg41c6@x) (cg30dd@chi-expr cg41c6@x cg41b9@r cg41ba@mr)) cg41b8@init*) (let ((cg41c8@lhs (car cg41c0@lhs*)) (cg41c9@rhs (car cg41c1@rhs*))) (let ((cg41cc@t (car cg41c9@rhs))) (if (memv cg41cc@t '(defun)) (let ((cg41ce@rhs (cg30e7@chi-defun (cdr cg41c9@rhs) cg41b9@r cg41ba@mr))) (cons (list 'set! cg41c8@lhs cg41ce@rhs) (cg41c4@f (cdr cg41c0@lhs*) (cdr cg41c1@rhs*)))) (if (memv cg41cc@t '(expr)) (let ((cg41d0@rhs (cg30dd@chi-expr (cdr cg41c9@rhs) cg41b9@r cg41ba@mr))) (cons (list 'set! cg41c8@lhs cg41d0@rhs) (cg41c4@f (cdr cg41c0@lhs*) (cdr cg41c1@rhs*)))) (if (memv cg41cc@t '(top-expr)) (let ((cg41d2@e (cg30dd@chi-expr (cdr cg41c9@rhs) cg41b9@r cg41ba@mr))) (cons cg41d2@e (cg41c4@f (cdr cg41c0@lhs*) (cdr cg41c1@rhs*)))) (error 'expand-interaction '"invallid" cg41c9@rhs)))))))))) (set! cg4ba9@cg30eb@expand-interaction-rhs*/init* cg30eb@expand-interaction-rhs*/init*) (set! cg30ed@chi-rhs* (lambda (cg41d4@rhs* cg41d5@r cg41d6@mr) (let cg41dc@f ((cg41da@ls cg41d4@rhs*)) (if (null? cg41da@ls) '() (let ((cg41de@a (cg30e9@chi-rhs (car cg41da@ls) cg41d5@r cg41d6@mr))) (cons cg41de@a (cg41dc@f (cdr cg41da@ls)))))))) (set! cg4baa@cg30ed@chi-rhs* cg30ed@chi-rhs*) (set! cg30ef@find-bound=? (lambda (cg41e0@x cg41e1@lhs* cg41e2@rhs*) (if (null? cg41e1@lhs*) '#f (if (cg2eb8@bound-id=? cg41e0@x (car cg41e1@lhs*)) (car cg41e2@rhs*) (cg30ef@find-bound=? cg41e0@x (cdr cg41e1@lhs*) (cdr cg41e2@rhs*)))))) (set! cg4bab@cg30ef@find-bound=? cg30ef@find-bound=?) (set! cg30f1@find-dups (lambda (cg41e6@ls) (let cg41ec@f ((cg41e8@ls cg41e6@ls) (cg41e9@dups '())) (if (null? cg41e8@ls) cg41e9@dups (let ((cg41ee@t (cg30ef@find-bound=? (car cg41e8@ls) (cdr cg41e8@ls) (cdr cg41e8@ls)))) (if cg41ee@t ((lambda (cg41f0@x) (cg41ec@f (cdr cg41e8@ls) (cons (list (car cg41e8@ls) cg41f0@x) cg41e9@dups))) cg41ee@t) (cg41ec@f (cdr cg41e8@ls) cg41e9@dups))))))) (set! cg4bac@cg30f1@find-dups cg30f1@find-dups) (set! cg30f3@chi-internal (lambda (cg41f2@e* cg41f3@r cg41f4@mr) (let ((cg41f8@rib (cg2e68@make-empty-rib))) (call-with-values (lambda () (cg3113@chi-body* (map (lambda (cg420a@x) (cg2ea0@add-subst cg41f8@rib cg420a@x)) (cg2eb2@syntax->list cg41f2@e*)) cg41f3@r cg41f4@mr '() '() '() '() '() cg41f8@rib '#f)) (lambda (cg420c@cg41fb cg420d@cg41fd cg420e@cg41ff cg420f@cg4201 cg4210@cg4203 cg4211@cg4205 cg4212@cg4207 cg4213@cg4209) (let ((cg421c@_exp* cg4213@cg4209) (cg421d@kwd* cg4212@cg4207) (cg421e@mod** cg4211@cg4205) (cg421f@rhs* cg4210@cg4203) (cg4220@lex* cg420f@cg4201) (cg4221@mr cg420e@cg41ff) (cg4222@r cg420d@cg41fd) (cg4223@e* cg420c@cg41fb)) (begin (if (null? cg4223@e*) (cg319b@syntax-violation '#f '"no expression in body" cg4223@e*) (void)) (let ((cg422c@init* (cg30d9@chi-expr* (append (apply append (reverse cg421e@mod**)) cg4223@e*) cg4222@r cg4221@mr))) (let ((cg422e@rhs* (cg30ed@chi-rhs* cg421f@rhs* cg4222@r cg4221@mr))) (cg2e1e@cg2d83@build-letrec* '#f (reverse cg4220@lex*) (reverse cg422e@rhs*) (cg2e19@cg2d79@build-sequence '#f cg422c@init*))))))))))) (set! cg4bad@cg30f3@chi-internal cg30f3@chi-internal) (set! cg30f5@parse-module (lambda (cg4230@e) (let ((cg4232@t cg4230@e)) (let ((cg4234@ls/false (cg30bb@syntax-dispatch cg4232@t '(_ each-any . each-any)))) (if cg4234@ls/false (apply (lambda (cg4236@export* cg4237@b*) (begin (if (not (for-all cg2eb4@id? cg4236@export*)) (cg319b@syntax-violation '#f '"module exports must be identifiers" cg4230@e) (void)) (values '#f (list->vector cg4236@export*) cg4237@b*))) cg4234@ls/false) (let ((cg423a@t cg4232@t)) (let ((cg423c@ls/false (cg30bb@syntax-dispatch cg423a@t '(_ any each-any . each-any)))) (if cg423c@ls/false (apply (lambda (cg423e@name cg423f@export* cg4240@b*) (begin (if (not (cg2eb4@id? cg423e@name)) (cg319b@syntax-violation '#f '"module name must be an identifier" cg4230@e) (void)) (if (not (for-all cg2eb4@id? cg423f@export*)) (cg319b@syntax-violation '#f '"module exports must be identifiers" cg4230@e) (void)) (values cg423e@name (list->vector cg423f@export*) cg4240@b*))) cg423c@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg423a@t))))))))) (set! cg4bae@cg30f5@parse-module cg30f5@parse-module) (set! cg30ff@module-interface? (lambda (cg4244@x) (and (simple-struct? cg4244@x) (eq? (simple-struct-name cg4244@x) 'module-interface)))) (set! cg4baf@cg30ff@module-interface? cg30ff@module-interface?) (set! cg3101@module-interface-first-mark (lambda (cg4246@x) (simple-struct-ref cg4246@x '0))) (set! cg4bb0@cg3101@module-interface-first-mark cg3101@module-interface-first-mark) (set! cg3103@set-module-interface-first-mark! (lambda (cg4248@x cg4249@val) (simple-struct-set! cg4248@x '0 cg4249@val))) (set! cg4bb1@cg3103@set-module-interface-first-mark! cg3103@set-module-interface-first-mark!) (set! cg3105@module-interface-exp-id-vec (lambda (cg424c@x) (simple-struct-ref cg424c@x '1))) (set! cg4bb2@cg3105@module-interface-exp-id-vec cg3105@module-interface-exp-id-vec) (set! cg3107@set-module-interface-exp-id-vec! (lambda (cg424e@x cg424f@val) (simple-struct-set! cg424e@x '1 cg424f@val))) (set! cg4bb3@cg3107@set-module-interface-exp-id-vec! cg3107@set-module-interface-exp-id-vec!) (set! cg3109@module-interface-exp-lab-vec (lambda (cg4252@x) (simple-struct-ref cg4252@x '2))) (set! cg4bb4@cg3109@module-interface-exp-lab-vec cg3109@module-interface-exp-lab-vec) (set! cg310b@set-module-interface-exp-lab-vec! (lambda (cg4254@x cg4255@val) (simple-struct-set! cg4254@x '2 cg4255@val))) (set! cg4bb5@cg310b@set-module-interface-exp-lab-vec! cg310b@set-module-interface-exp-lab-vec!) (set! cg310d@dummy '3) (set! cg4bb6@cg310d@dummy cg310d@dummy) (set! cg310f@module-interface-exp-id* (lambda (cg4258@iface cg4259@id) (letrec* ((cg425d@diff-marks (lambda (cg4264@ls cg4265@x) (begin (if (null? cg4264@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((cg4268@a (car cg4264@ls))) (if (eq? cg4268@a cg4265@x) '() (cons cg4268@a (cg425d@diff-marks (cdr cg4264@ls) cg4265@x)))))))) (let ((cg425e@diff (cg425d@diff-marks (cg2e86@stx-mark* cg4259@id) (cg3101@module-interface-first-mark cg4258@iface))) (cg425f@id-vec (cg3105@module-interface-exp-id-vec cg4258@iface))) (if (null? cg425e@diff) cg425f@id-vec (vector-map (lambda (cg4262@x) (make-simple-struct 'stx '5 (list (cg2e82@stx-expr cg4262@x) (append cg425e@diff (cg2e86@stx-mark* cg4262@x)) '() '()))) cg425f@id-vec)))))) (set! cg4bb7@cg310f@module-interface-exp-id* cg310f@module-interface-exp-id*) (set! cg3111@chi-internal-module (lambda (cg426a@e cg426b@r cg426c@mr cg426d@lex* cg426e@rhs* cg426f@mod** cg4270@kwd*) (call-with-values (lambda () (cg30f5@parse-module cg426a@e)) (lambda (cg427e@cg4279 cg427f@cg427b cg4280@cg427d) (let ((cg4284@e* cg4280@cg427d) (cg4285@exp-id* cg427f@cg427b) (cg4286@name cg427e@cg4279)) (let ((cg428a@rib (cg2e68@make-empty-rib))) (let ((cg428c@e* (map (lambda (cg428e@x) (cg2ea0@add-subst cg428a@rib cg428e@x)) (cg2eb2@syntax->list cg4284@e*)))) (call-with-values (lambda () (cg3113@chi-body* cg428c@e* cg426b@r cg426c@mr cg426d@lex* cg426e@rhs* cg426f@mod** cg4270@kwd* '() cg428a@rib '#f)) (lambda (cg42a0@cg4291 cg42a1@cg4293 cg42a2@cg4295 cg42a3@cg4297 cg42a4@cg4299 cg42a5@cg429b cg42a6@cg429d cg42a7@cg429f) (let ((cg42b0@_exp* cg42a7@cg429f) (cg42b1@kwd* cg42a6@cg429d) (cg42b2@mod** cg42a5@cg429b) (cg42b3@rhs* cg42a4@cg4299) (cg42b4@lex* cg42a3@cg4297) (cg42b5@mr cg42a2@cg4295) (cg42b6@r cg42a1@cg4293) (cg42b7@e* cg42a0@cg4291)) (let ((cg42c0@exp-lab* (vector-map (lambda (cg42c4@x) (or (cg2eca@id->label (make-simple-struct 'stx '5 (list (cg2eb6@id->sym cg42c4@x) (cg2e86@stx-mark* cg42c4@x) (list cg428a@rib) '()))) (cg319b@syntax-violation '#f '"cannot find module export" cg42c4@x))) cg4285@exp-id*)) (cg42c1@mod** (cons cg42b7@e* cg42b2@mod**))) (if (not cg4286@name) (values cg42b4@lex* cg42b3@rhs* cg4285@exp-id* cg42c0@exp-lab* cg42b6@r cg42b5@mr cg42c1@mod** cg42b1@kwd*) (let ((cg42c6@lab (cg2e40@gen-label 'module)) (cg42c7@iface (make-simple-struct 'module-interface '4 (list (car (cg2e86@stx-mark* cg4286@name)) (vector-map (lambda (cg42ca@x) (make-simple-struct 'stx '5 (list (cg2e82@stx-expr cg42ca@x) (cg2e86@stx-mark* cg42ca@x) '() '()))) cg4285@exp-id*) cg42c0@exp-lab*)))) (values cg42b4@lex* cg42b3@rhs* (vector cg4286@name) (vector cg42c6@lab) (cons (cons cg42c6@lab (cons '$module cg42c7@iface)) cg42b6@r) (cons (cons cg42c6@lab (cons '$module cg42c7@iface)) cg42b5@mr) cg42c1@mod** cg42b1@kwd*)))))))))))))) (set! cg4bb8@cg3111@chi-internal-module cg3111@chi-internal-module) (set! cg3113@chi-body* (lambda (cg42cc@e* cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42d2@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?) (if (null? cg42cc@e*) (values cg42cc@e* cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42d2@kwd* cg42d3@exp*) (let ((cg42e0@e (car cg42cc@e*))) (call-with-values (lambda () (cg2ed6@syntax-type cg42e0@e cg42cd@r)) (lambda (cg42e8@cg42e3 cg42e9@cg42e5 cg42ea@cg42e7) (let ((cg42ee@kwd cg42ea@cg42e7) (cg42ef@value cg42e9@cg42e5) (cg42f0@type cg42e8@cg42e3)) (let ((cg42f4@kwd* (if (cg2eb4@id? cg42ee@kwd) (cons cg42ee@kwd cg42d2@kwd*) cg42d2@kwd*))) (let ((cg42f6@t cg42f0@type)) (if (memv cg42f6@t '(define)) (call-with-values (lambda () (cg303d@parse-define cg42e0@e)) (lambda (cg42fc@cg42f9 cg42fd@cg42fb) (let ((cg4300@rhs cg42fd@cg42fb) (cg4301@id cg42fc@cg42f9)) (begin (if (cg2ec0@bound-id-member? cg4301@id cg42f4@kwd*) (cg319b@syntax-violation '#f '"cannot redefine keyword" cg42e0@e) (void)) (call-with-values (lambda () (cg2e44@gen-define-label+loc cg4301@id cg42d4@rib)) (lambda (cg4308@cg4305 cg4309@cg4307) (let ((cg430c@lex cg4309@cg4307) (cg430d@lab cg4308@cg4305)) (begin (cg2e6a@extend-rib! cg42d4@rib cg4301@id cg430d@lab) (cg3113@chi-body* (cdr cg42cc@e*) (cg304b@add-lexical cg430d@lab cg430c@lex cg42cd@r) cg42ce@mr (cons cg430c@lex cg42cf@lex*) (cons cg4300@rhs cg42d0@rhs*) cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?))))))))) (if (memv cg42f6@t '(define-syntax)) (call-with-values (lambda () (cg303f@parse-define-syntax cg42e0@e)) (lambda (cg4314@cg4311 cg4315@cg4313) (let ((cg4318@rhs cg4315@cg4313) (cg4319@id cg4314@cg4311)) (begin (if (cg2ec0@bound-id-member? cg4319@id cg42f4@kwd*) (cg319b@syntax-violation '#f '"cannot redefine keyword" cg42e0@e) (void)) (let ((cg431c@lab (cg2e46@gen-define-label cg4319@id cg42d4@rib)) (cg431d@expanded-rhs (cg3115@expand-transformer cg4318@rhs cg42ce@mr))) (begin (cg2e6a@extend-rib! cg42d4@rib cg4319@id cg431c@lab) (let ((cg4320@b (cg2eec@make-eval-transformer cg431d@expanded-rhs))) (cg3113@chi-body* (cdr cg42cc@e*) (cons (cons cg431c@lab cg4320@b) cg42cd@r) (cons (cons cg431c@lab cg4320@b) cg42ce@mr) cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?)))))))) (if (memv cg42f6@t '(let-syntax letrec-syntax)) (let ((cg4322@t cg42e0@e)) (let ((cg4324@ls/false (cg30bb@syntax-dispatch cg4322@t '(_ #(each (any any)) . each-any)))) (if (and cg4324@ls/false (apply (lambda (cg4326@xlhs* cg4327@xrhs* cg4328@xbody*) (if (not (cg2ebc@valid-bound-ids? cg4326@xlhs*)) (cg319b@syntax-violation '#f '"invalid identifiers" cg42e0@e) (void))) cg4324@ls/false)) (apply (lambda (cg432c@xlhs* cg432d@xrhs* cg432e@xbody*) (let ((cg4332@xlab* (map cg2e40@gen-label cg432c@xlhs*))) (let ((cg4334@xrib (cg2e74@make-full-rib cg432c@xlhs* cg4332@xlab*))) (let ((cg4336@xb* (map (lambda (cg4338@x) (cg2eec@make-eval-transformer (cg3115@expand-transformer (if (eq? cg42f0@type 'let-syntax) cg4338@x (cg2ea0@add-subst cg4334@xrib cg4338@x)) cg42ce@mr))) cg432d@xrhs*))) (cg3113@chi-body* (append (map (lambda (cg433a@x) (cg2ea0@add-subst cg4334@xrib cg433a@x)) cg432e@xbody*) (cdr cg42cc@e*)) (append (map cons cg4332@xlab* cg4336@xb*) cg42cd@r) (append (map cons cg4332@xlab* cg4336@xb*) cg42ce@mr) cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?))))) cg4324@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4322@t)))) (if (memv cg42f6@t '(begin)) (let ((cg433c@t cg42e0@e)) (let ((cg433e@ls/false (cg30bb@syntax-dispatch cg433c@t '(_ . each-any)))) (if cg433e@ls/false (apply (lambda (cg4340@x*) (cg3113@chi-body* (append cg4340@x* (cdr cg42cc@e*)) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?)) cg433e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg433c@t)))) (if (memv cg42f6@t '(global-macro global-macro!)) (cg3113@chi-body* (cons (cg2ea0@add-subst cg42d4@rib (cg30d7@chi-global-macro cg42ef@value cg42e0@e)) (cdr cg42cc@e*)) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?) (if (memv cg42f6@t '(local-macro local-macro!)) (cg3113@chi-body* (cons (cg2ea0@add-subst cg42d4@rib (cg30d5@chi-local-macro cg42ef@value cg42e0@e)) (cdr cg42cc@e*)) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?) (if (memv cg42f6@t '(macro macro!)) (cg3113@chi-body* (cons (cg2ea0@add-subst cg42d4@rib (cg30d3@chi-macro cg42ef@value cg42e0@e)) (cdr cg42cc@e*)) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?) (if (memv cg42f6@t '(module)) (call-with-values (lambda () (cg3111@chi-internal-module cg42e0@e cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd*)) (lambda (cg4352@cg4343 cg4353@cg4345 cg4354@cg4347 cg4355@cg4349 cg4356@cg434b cg4357@cg434d cg4358@cg434f cg4359@cg4351) (let ((cg4362@kwd* cg4359@cg4351) (cg4363@mod** cg4358@cg434f) (cg4364@mr cg4357@cg434d) (cg4365@r cg4356@cg434b) (cg4366@m-exp-lab* cg4355@cg4349) (cg4367@m-exp-id* cg4354@cg4347) (cg4368@rhs* cg4353@cg4345) (cg4369@lex* cg4352@cg4343)) (begin (vector-for-each (lambda (cg4372@id cg4373@lab) (cg2e6a@extend-rib! cg42d4@rib cg4372@id cg4373@lab)) cg4367@m-exp-id* cg4366@m-exp-lab*) (cg3113@chi-body* (cdr cg42cc@e*) cg4365@r cg4364@mr cg4369@lex* cg4368@rhs* cg4363@mod** cg4362@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?))))) (if (memv cg42f6@t '(library)) (begin (cg317d@library-expander (cg2ec8@stx->datum cg42e0@e)) (cg3113@chi-body* (cdr cg42cc@e*) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?)) (if (memv cg42f6@t '(export)) (let ((cg4376@t cg42e0@e)) (let ((cg4378@ls/false (cg30bb@syntax-dispatch cg4376@t '(_ . each-any)))) (if cg4378@ls/false (apply (lambda (cg437a@exp-decl*) (cg3113@chi-body* (cdr cg42cc@e*) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* (append cg437a@exp-decl* cg42d3@exp*) cg42d4@rib cg42d5@top?)) cg4378@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4376@t)))) (if (memv cg42f6@t '(import)) (letrec* ((cg437d@module-import? (lambda (cg43d0@e) (let ((cg43d2@t cg43d0@e)) (let ((cg43d4@ls/false (cg30bb@syntax-dispatch cg43d2@t '(_ any)))) (if (and cg43d4@ls/false (apply (lambda (cg43d6@id) (cg2eb4@id? cg43d6@id)) cg43d4@ls/false)) (apply (lambda (cg43d8@id) '#t) cg43d4@ls/false) (let ((cg43da@t cg43d2@t)) (let ((cg43dc@ls/false (cg30bb@syntax-dispatch cg43da@t '(_ . each-any)))) (if cg43dc@ls/false (apply (lambda (cg43de@imp*) '#f) cg43dc@ls/false) (let ((cg43e0@t cg43da@t)) (let ((cg43e2@ls/false (cg30bb@syntax-dispatch cg43e0@t '_))) (if cg43e2@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"malformed import form" cg43d0@e)) cg43e2@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg43e0@t)))))))))))) (cg437f@module-import (lambda (cg43ae@e cg43af@r) (let ((cg43b2@t cg43ae@e)) (let ((cg43b4@ls/false (cg30bb@syntax-dispatch cg43b2@t '(_ any)))) (if (and cg43b4@ls/false (apply (lambda (cg43b6@id) (cg2eb4@id? cg43b6@id)) cg43b4@ls/false)) (apply (lambda (cg43b8@id) (call-with-values (lambda () (cg2ed6@syntax-type cg43b8@id cg43af@r)) (lambda (cg43c0@cg43bb cg43c1@cg43bd cg43c2@cg43bf) (let ((cg43c6@kwd cg43c2@cg43bf) (cg43c7@value cg43c1@cg43bd) (cg43c8@type cg43c0@cg43bb)) (let ((cg43cc@t cg43c8@type)) (if (memv cg43cc@t '($module)) (let ((cg43ce@iface cg43c7@value)) (values (cg310f@module-interface-exp-id* cg43ce@iface cg43b8@id) (cg3109@module-interface-exp-lab-vec cg43ce@iface))) (cg319b@syntax-violation '#f '"invalid import" cg43ae@e))))))) cg43b4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg43b2@t)))))) (cg4381@library-import (lambda (cg4392@e) (let ((cg4394@t cg4392@e)) (let ((cg4396@ls/false (cg30bb@syntax-dispatch cg4394@t '(any . each-any)))) (if cg4396@ls/false (apply (lambda (cg4398@ctxt cg4399@imp*) (call-with-values (lambda () (cg311d@parse-import-spec* (cg31a1@syntax->datum cg4399@imp*))) (lambda (cg43a0@cg439d cg43a1@cg439f) (let ((cg43a4@subst-labels cg43a1@cg439f) (cg43a5@subst-names cg43a0@cg439d)) (values (vector-map (lambda (cg43a8@name) (cg2e94@datum->stx cg4398@ctxt cg43a8@name)) cg43a5@subst-names) cg43a4@subst-labels))))) cg4396@ls/false) (let ((cg43aa@t cg4394@t)) (let ((cg43ac@ls/false (cg30bb@syntax-dispatch cg43aa@t '_))) (if cg43ac@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid import form" cg4392@e)) cg43ac@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg43aa@t)))))))))) (begin (call-with-values (lambda () (if (cg437d@module-import? cg42e0@e) (cg437f@module-import cg42e0@e cg42cd@r) (cg4381@library-import cg42e0@e))) (lambda (cg4386@cg4383 cg4387@cg4385) (let ((cg438a@lab* cg4387@cg4385) (cg438b@id* cg4386@cg4383)) (vector-for-each (lambda (cg438e@id cg438f@lab) (cg2e6a@extend-rib! cg42d4@rib cg438e@id cg438f@lab)) cg438b@id* cg438a@lab*)))) (cg3113@chi-body* (cdr cg42cc@e*) cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?))) (if cg42d5@top? (cg3113@chi-body* (cdr cg42cc@e*) cg42cd@r cg42ce@mr (cons (cg2e3c@gen-lexical 'dummy) cg42cf@lex*) (cons (cons 'top-expr cg42e0@e) cg42d0@rhs*) cg42d1@mod** cg42f4@kwd* cg42d3@exp* cg42d4@rib cg42d5@top?) (values cg42cc@e* cg42cd@r cg42ce@mr cg42cf@lex* cg42d0@rhs* cg42d1@mod** cg42f4@kwd* cg42d3@exp*)))))))))))))))))))))) (set! cg4bb9@cg3113@chi-body* cg3113@chi-body*) (set! cg3115@expand-transformer (lambda (cg43e4@expr cg43e5@r) (let ((cg43e8@rtc (cg3121@make-collector))) (let ((cg43ea@expanded-rhs (let ((cg43f4@cg43ed cg3123@inv-collector) (cg43f5@cg43ef cg3125@vis-collector) (cg43f6@cg43f1 cg43e8@rtc) (cg43f7@cg43f3 (lambda (cg43fc@x) (values)))) (let ((cg43fe@swap (lambda () (begin (let ((cg4400@t (cg43f4@cg43ed))) (begin (cg43f4@cg43ed cg43f6@cg43f1) (set! cg43f6@cg43f1 cg4400@t))) (let ((cg4402@t (cg43f5@cg43ef))) (begin (cg43f5@cg43ef cg43f7@cg43f3) (set! cg43f7@cg43f3 cg4402@t))))))) (dynamic-wind cg43fe@swap (lambda () (cg30dd@chi-expr cg43e4@expr cg43e5@r cg43e5@r)) cg43fe@swap))))) (begin (for-each (let ((cg4404@mark-visit (cg3125@vis-collector))) (lambda (cg4406@x) (begin (cg2cd0@cg2b1e@invoke-library cg4406@x) (cg4404@mark-visit cg4406@x)))) (cg43e8@rtc)) cg43ea@expanded-rhs))))) (set! cg4bba@cg3115@expand-transformer cg3115@expand-transformer) (set! cg3117@parse-exports (lambda (cg4408@exp*) (let cg4410@f ((cg440a@exp* cg4408@exp*) (cg440b@int* '()) (cg440c@ext* '())) (if (null? cg440a@exp*) (begin (if (not (cg2ebc@valid-bound-ids? cg440c@ext*)) (cg319b@syntax-violation 'export '"invalid exports" (cg30f1@find-dups cg440c@ext*)) (void)) (values (map cg31a1@syntax->datum cg440c@ext*) cg440b@int*)) (let ((cg4412@t (car cg440a@exp*))) (let ((cg4414@ls/false (cg30bb@syntax-dispatch cg4412@t '(any . #(each (any any)))))) (if cg4414@ls/false (apply (lambda (cg4416@rename cg4417@i* cg4418@e*) (begin (if (not (and (eq? (cg31a1@syntax->datum cg4416@rename) 'rename) (for-all cg2eb4@id? cg4417@i*) (for-all cg2eb4@id? cg4418@e*))) (cg319b@syntax-violation 'export '"invalid export specifier" (car cg440a@exp*)) (void)) (cg4410@f (cdr cg440a@exp*) (append cg4417@i* cg440b@int*) (append cg4418@e* cg440c@ext*)))) cg4414@ls/false) (let ((cg441c@t cg4412@t)) (let ((cg441e@ls/false (cg30bb@syntax-dispatch cg441c@t 'any))) (if cg441e@ls/false (apply (lambda (cg4420@ie) (begin (if (not (cg2eb4@id? cg4420@ie)) (cg319b@syntax-violation 'export '"invalid export" cg4420@ie) (void)) (cg4410@f (cdr cg440a@exp*) (cons cg4420@ie cg440b@int*) (cons cg4420@ie cg440c@ext*)))) cg441e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg441c@t))))))))))) (set! cg4bbb@cg3117@parse-exports cg3117@parse-exports) (set! cg3119@parse-library-name (lambda (cg4422@spec) (letrec* ((cg4425@parse (lambda (cg4432@x) (let ((cg4434@t cg4432@x)) (let ((cg4436@ls/false (cg30bb@syntax-dispatch cg4434@t '(each-any)))) (if (and cg4436@ls/false (apply (lambda (cg4438@v*) (for-all (lambda (cg443a@x) (let ((cg443c@x (cg31a1@syntax->datum cg443a@x))) (and (integer? cg443c@x) (exact? cg443c@x)))) cg4438@v*)) cg4436@ls/false)) (apply (lambda (cg443e@v*) (values '() (map cg31a1@syntax->datum cg443e@v*))) cg4436@ls/false) (let ((cg4440@t cg4434@t)) (let ((cg4442@ls/false (cg30bb@syntax-dispatch cg4440@t '(any . any)))) (if (and cg4442@ls/false (apply (lambda (cg4444@x cg4445@rest) (symbol? (cg31a1@syntax->datum cg4444@x))) cg4442@ls/false)) (apply (lambda (cg4448@x cg4449@rest) (call-with-values (lambda () (cg4425@parse cg4449@rest)) (lambda (cg4450@cg444d cg4451@cg444f) (let ((cg4454@v* cg4451@cg444f) (cg4455@x* cg4450@cg444d)) (values (cons (cg31a1@syntax->datum cg4448@x) cg4455@x*) cg4454@v*))))) cg4442@ls/false) (let ((cg4458@t cg4440@t)) (let ((cg445a@ls/false (cg30bb@syntax-dispatch cg4458@t '()))) (if cg445a@ls/false (apply (lambda () (values '() '())) cg445a@ls/false) (let ((cg445c@t cg4458@t)) (let ((cg445e@ls/false (cg30bb@syntax-dispatch cg445c@t '_))) (if cg445e@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid library name" cg4422@spec)) cg445e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg445c@t)))))))))))))))) (call-with-values (lambda () (cg4425@parse cg4422@spec)) (lambda (cg442a@cg4427 cg442b@cg4429) (let ((cg442e@ver* cg442b@cg4429) (cg442f@name* cg442a@cg4427)) (begin (if (null? cg442f@name*) (cg319b@syntax-violation '#f '"empty library name" cg4422@spec) (void)) (values cg442f@name* cg442e@ver*)))))))) (set! cg4bbc@cg3119@parse-library-name cg3119@parse-library-name) (set! cg311b@parse-library (lambda (cg4460@e) (let ((cg4462@t cg4460@e)) (let ((cg4464@ls/false (cg30bb@syntax-dispatch cg4462@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and cg4464@ls/false (apply (lambda (cg4466@library cg4467@name* cg4468@export cg4469@exp* cg446a@import cg446b@imp* cg446c@b*) (and (eq? (cg31a1@syntax->datum cg4468@export) 'export) (eq? (cg31a1@syntax->datum cg446a@import) 'import) (eq? (cg31a1@syntax->datum cg4466@library) 'library))) cg4464@ls/false)) (apply (lambda (cg4474@library cg4475@name* cg4476@export cg4477@exp* cg4478@import cg4479@imp* cg447a@b*) (values cg4475@name* cg4477@exp* cg4479@imp* cg447a@b*)) cg4464@ls/false) (let ((cg4482@t cg4462@t)) (let ((cg4484@ls/false (cg30bb@syntax-dispatch cg4482@t '_))) (if cg4484@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"malformed library" cg4460@e)) cg4484@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4482@t))))))))) (set! cg4bbd@cg311b@parse-library cg311b@parse-library) (set! cg311d@parse-import-spec* (letrec* ((cg4487@idsyn? (lambda (cg4690@x) (symbol? (cg31a1@syntax->datum cg4690@x)))) (cg4489@dup-error (lambda (cg468e@name) (cg319b@syntax-violation 'import '"two imports with different bindings" cg468e@name))) (cg448b@merge-substs (lambda (cg467c@s cg467d@subst) (letrec* ((cg4681@insert-to-subst (lambda (cg4682@a cg4683@subst) (let ((cg4686@name (car cg4682@a)) (cg4687@label (cdr cg4682@a))) (let ((cg468a@t (assq cg4686@name cg4683@subst))) (if cg468a@t ((lambda (cg468c@x) (if (eq? (cdr cg468c@x) cg4687@label) cg4683@subst (cg4489@dup-error cg4686@name))) cg468a@t) (cons cg4682@a cg4683@subst))))))) (if (null? cg467c@s) cg467d@subst (cg4681@insert-to-subst (car cg467c@s) (cg448b@merge-substs (cdr cg467c@s) cg467d@subst)))))) (cg448d@exclude* (lambda (cg464c@sym* cg464d@subst) (letrec* ((cg4651@exclude (lambda (cg466a@sym cg466b@subst) (if (null? cg466b@subst) (cg319b@syntax-violation 'import '"cannot rename unbound identifier" cg466a@sym) (if (eq? cg466a@sym (caar cg466b@subst)) (values (cdar cg466b@subst) (cdr cg466b@subst)) (let ((cg466e@a (car cg466b@subst))) (call-with-values (lambda () (cg4651@exclude cg466a@sym (cdr cg466b@subst))) (lambda (cg4674@cg4671 cg4675@cg4673) (let ((cg4678@subst cg4675@cg4673) (cg4679@old cg4674@cg4671)) (values cg4679@old (cons cg466e@a cg4678@subst))))))))))) (if (null? cg464c@sym*) (values '() cg464d@subst) (call-with-values (lambda () (cg4651@exclude (car cg464c@sym*) cg464d@subst)) (lambda (cg4656@cg4653 cg4657@cg4655) (let ((cg465a@subst cg4657@cg4655) (cg465b@old cg4656@cg4653)) (call-with-values (lambda () (cg448d@exclude* (cdr cg464c@sym*) cg465a@subst)) (lambda (cg4662@cg465f cg4663@cg4661) (let ((cg4666@subst cg4663@cg4661) (cg4667@old* cg4662@cg465f)) (values (cons cg465b@old cg4667@old*) cg4666@subst))))))))))) (cg448f@find* (lambda (cg4644@sym* cg4645@subst) (map (lambda (cg4648@x) (let ((cg464a@t (assq cg4648@x cg4645@subst))) (if cg464a@t (cdr cg464a@t) (cg319b@syntax-violation 'import '"cannot find identifier" cg4648@x)))) cg4644@sym*))) (cg4491@rem* (lambda (cg463c@sym* cg463d@subst) (let cg4642@f ((cg4640@subst cg463d@subst)) (if (null? cg4640@subst) '() (if (memq (caar cg4640@subst) cg463c@sym*) (cg4642@f (cdr cg4640@subst)) (cons (car cg4640@subst) (cg4642@f (cdr cg4640@subst)))))))) (cg4493@remove-dups (lambda (cg463a@ls) (if (null? cg463a@ls) '() (if (memq (car cg463a@ls) (cdr cg463a@ls)) (cg4493@remove-dups (cdr cg463a@ls)) (cons (car cg463a@ls) (cg4493@remove-dups (cdr cg463a@ls))))))) (cg4495@parse-library-name (lambda (cg4552@spec) (letrec* ((cg4555@subversion? (lambda (cg4636@x) (let ((cg4638@x (cg31a1@syntax->datum cg4636@x))) (and (integer? cg4638@x) (exact? cg4638@x) (>= cg4638@x '0))))) (cg4557@subversion-pred (lambda (cg45d6@x*) (let ((cg45d8@t cg45d6@x*)) (let ((cg45da@ls/false (cg30bb@syntax-dispatch cg45d8@t 'any))) (if (and cg45da@ls/false (apply (lambda (cg45dc@n) (cg4555@subversion? cg45dc@n)) cg45da@ls/false)) (apply (lambda (cg45de@n) (lambda (cg45e0@x) (= cg45e0@x (cg31a1@syntax->datum cg45de@n)))) cg45da@ls/false) (let ((cg45e2@t cg45d8@t)) (let ((cg45e4@ls/false (cg30bb@syntax-dispatch cg45e2@t '(any . each-any)))) (if (and cg45e4@ls/false (apply (lambda (cg45e6@p? cg45e7@sub*) (eq? (cg31a1@syntax->datum cg45e6@p?) 'and)) cg45e4@ls/false)) (apply (lambda (cg45ea@p? cg45eb@sub*) (let ((cg45ee@p* (map cg4557@subversion-pred cg45eb@sub*))) (lambda (cg45f0@x) (for-all (lambda (cg45f2@p) (cg45f2@p cg45f0@x)) cg45ee@p*)))) cg45e4@ls/false) (let ((cg45f4@t cg45e2@t)) (let ((cg45f6@ls/false (cg30bb@syntax-dispatch cg45f4@t '(any . each-any)))) (if (and cg45f6@ls/false (apply (lambda (cg45f8@p? cg45f9@sub*) (eq? (cg31a1@syntax->datum cg45f8@p?) 'or)) cg45f6@ls/false)) (apply (lambda (cg45fc@p? cg45fd@sub*) (let ((cg4600@p* (map cg4557@subversion-pred cg45fd@sub*))) (lambda (cg4602@x) (exists (lambda (cg4604@p) (cg4604@p cg4602@x)) cg4600@p*)))) cg45f6@ls/false) (let ((cg4606@t cg45f4@t)) (let ((cg4608@ls/false (cg30bb@syntax-dispatch cg4606@t '(any any)))) (if (and cg4608@ls/false (apply (lambda (cg460a@p? cg460b@sub) (eq? (cg31a1@syntax->datum cg460a@p?) 'not)) cg4608@ls/false)) (apply (lambda (cg460e@p? cg460f@sub) (let ((cg4612@p (cg4557@subversion-pred cg460f@sub))) (lambda (cg4614@x) (not (cg4612@p cg4614@x))))) cg4608@ls/false) (let ((cg4616@t cg4606@t)) (let ((cg4618@ls/false (cg30bb@syntax-dispatch cg4616@t '(any any)))) (if (and cg4618@ls/false (apply (lambda (cg461a@p? cg461b@n) (and (eq? (cg31a1@syntax->datum cg461a@p?) '<=) (cg4555@subversion? cg461b@n))) cg4618@ls/false)) (apply (lambda (cg461e@p? cg461f@n) (lambda (cg4622@x) (<= cg4622@x (cg31a1@syntax->datum cg461f@n)))) cg4618@ls/false) (let ((cg4624@t cg4616@t)) (let ((cg4626@ls/false (cg30bb@syntax-dispatch cg4624@t '(any any)))) (if (and cg4626@ls/false (apply (lambda (cg4628@p? cg4629@n) (and (eq? (cg31a1@syntax->datum cg4628@p?) '>=) (cg4555@subversion? cg4629@n))) cg4626@ls/false)) (apply (lambda (cg462c@p? cg462d@n) (lambda (cg4630@x) (>= cg4630@x (cg31a1@syntax->datum cg462d@n)))) cg4626@ls/false) (let ((cg4632@t cg4624@t)) (let ((cg4634@ls/false (cg30bb@syntax-dispatch cg4632@t '_))) (if cg4634@ls/false (apply (lambda () (cg319b@syntax-violation 'import '"invalid sub-version spec" cg4552@spec cg45d6@x*)) cg4634@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4632@t)))))))))))))))))))))))) (cg4559@version-pred (lambda (cg4586@x*) (let ((cg4588@t cg4586@x*)) (let ((cg458a@ls/false (cg30bb@syntax-dispatch cg4588@t '()))) (if cg458a@ls/false (apply (lambda () (lambda (cg458c@x) '#t)) cg458a@ls/false) (let ((cg458e@t cg4588@t)) (let ((cg4590@ls/false (cg30bb@syntax-dispatch cg458e@t '(any . each-any)))) (if (and cg4590@ls/false (apply (lambda (cg4592@c cg4593@ver*) (eq? (cg31a1@syntax->datum cg4592@c) 'and)) cg4590@ls/false)) (apply (lambda (cg4596@c cg4597@ver*) (let ((cg459a@p* (map cg4559@version-pred cg4597@ver*))) (lambda (cg459c@x) (for-all (lambda (cg459e@p) (cg459e@p cg459c@x)) cg459a@p*)))) cg4590@ls/false) (let ((cg45a0@t cg458e@t)) (let ((cg45a2@ls/false (cg30bb@syntax-dispatch cg45a0@t '(any . each-any)))) (if (and cg45a2@ls/false (apply (lambda (cg45a4@c cg45a5@ver*) (eq? (cg31a1@syntax->datum cg45a4@c) 'or)) cg45a2@ls/false)) (apply (lambda (cg45a8@c cg45a9@ver*) (let ((cg45ac@p* (map cg4559@version-pred cg45a9@ver*))) (lambda (cg45ae@x) (exists (lambda (cg45b0@p) (cg45b0@p cg45ae@x)) cg45ac@p*)))) cg45a2@ls/false) (let ((cg45b2@t cg45a0@t)) (let ((cg45b4@ls/false (cg30bb@syntax-dispatch cg45b2@t '(any any)))) (if (and cg45b4@ls/false (apply (lambda (cg45b6@c cg45b7@ver) (eq? (cg31a1@syntax->datum cg45b6@c) 'not)) cg45b4@ls/false)) (apply (lambda (cg45ba@c cg45bb@ver) (let ((cg45be@p (cg4559@version-pred cg45bb@ver))) (lambda (cg45c0@x) (not (cg45be@p cg45c0@x))))) cg45b4@ls/false) (let ((cg45c2@t cg45b2@t)) (let ((cg45c4@ls/false (cg30bb@syntax-dispatch cg45c2@t 'each-any))) (if cg45c4@ls/false (apply (lambda (cg45c6@sub*) (let ((cg45c8@p* (map cg4557@subversion-pred cg45c6@sub*))) (lambda (cg45ca@x) (let cg45d0@f ((cg45cc@p* cg45c8@p*) (cg45cd@x cg45ca@x)) (if (null? cg45cc@p*) '#t (if (null? cg45cd@x) '#f (and ((car cg45cc@p*) (car cg45cd@x)) (cg45d0@f (cdr cg45cc@p*) (cdr cg45cd@x))))))))) cg45c4@ls/false) (let ((cg45d2@t cg45c2@t)) (let ((cg45d4@ls/false (cg30bb@syntax-dispatch cg45d2@t '_))) (if cg45d4@ls/false (apply (lambda () (cg319b@syntax-violation 'import '"invalid version spec" cg4552@spec cg4586@x*)) cg45d4@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg45d2@t)))))))))))))))))))))) (let cg455c@f ((cg455a@x cg4552@spec)) (let ((cg455e@t cg455a@x)) (let ((cg4560@ls/false (cg30bb@syntax-dispatch cg455e@t '(each-any)))) (if cg4560@ls/false (apply (lambda (cg4562@version-spec*) (values '() (cg4559@version-pred cg4562@version-spec*))) cg4560@ls/false) (let ((cg4564@t cg455e@t)) (let ((cg4566@ls/false (cg30bb@syntax-dispatch cg4564@t '(any . any)))) (if (and cg4566@ls/false (apply (lambda (cg4568@x cg4569@x*) (cg4487@idsyn? cg4568@x)) cg4566@ls/false)) (apply (lambda (cg456c@x cg456d@x*) (call-with-values (lambda () (cg455c@f cg456d@x*)) (lambda (cg4574@cg4571 cg4575@cg4573) (let ((cg4578@pred cg4575@cg4573) (cg4579@name cg4574@cg4571)) (values (cons (cg31a1@syntax->datum cg456c@x) cg4579@name) cg4578@pred))))) cg4566@ls/false) (let ((cg457c@t cg4564@t)) (let ((cg457e@ls/false (cg30bb@syntax-dispatch cg457c@t '()))) (if cg457e@ls/false (apply (lambda () (values '() (lambda (cg4580@x) '#t))) cg457e@ls/false) (let ((cg4582@t cg457c@t)) (let ((cg4584@ls/false (cg30bb@syntax-dispatch cg4582@t '_))) (if cg4584@ls/false (apply (lambda () (cg319b@syntax-violation '#f '"invalid import spec" cg4552@spec)) cg4584@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4582@t))))))))))))))))) (cg4497@import-library (lambda (cg4542@spec*) (call-with-values (lambda () (cg4495@parse-library-name cg4542@spec*)) (lambda (cg4548@cg4545 cg4549@cg4547) (let ((cg454c@pred cg4549@cg4547) (cg454d@name cg4548@cg4545)) (begin (if (null? cg454d@name) (cg319b@syntax-violation 'import '"empty library name" cg4542@spec*) (void)) (let ((cg4550@lib (cg2cc9@cg2b10@find-library-by-name cg454d@name))) (begin (if (not cg4550@lib) (cg319b@syntax-violation 'import '"cannot find library with required name" cg454d@name) (void)) (if (not (cg454c@pred (cg2ca3@cg2ac4@library-version cg4550@lib))) (cg319b@syntax-violation 'import '"library does not satisfy version specification" cg4542@spec* cg4550@lib) (void)) ((cg3127@imp-collector) cg4550@lib) (cg2cab@cg2ad4@library-subst cg4550@lib))))))))) (cg4499@get-import (lambda (cg44b4@spec) (let ((cg44b6@t cg44b4@spec)) (let ((cg44b8@ls/false (cg30bb@syntax-dispatch cg44b6@t '(any . each-any)))) (if (and cg44b8@ls/false (apply (lambda (cg44ba@x cg44bb@x*) (not (memq (cg31a1@syntax->datum cg44ba@x) '(for rename except only prefix library)))) cg44b8@ls/false)) (apply (lambda (cg44be@x cg44bf@x*) (cg4497@import-library (cons cg44be@x cg44bf@x*))) cg44b8@ls/false) (let ((cg44c2@t cg44b6@t)) (let ((cg44c4@ls/false (cg30bb@syntax-dispatch cg44c2@t '(any any . #(each (any any)))))) (if (and cg44c4@ls/false (apply (lambda (cg44c6@rename cg44c7@isp cg44c8@old* cg44c9@new*) (and (eq? (cg31a1@syntax->datum cg44c6@rename) 'rename) (for-all cg4487@idsyn? cg44c8@old*) (for-all cg4487@idsyn? cg44c9@new*))) cg44c4@ls/false)) (apply (lambda (cg44ce@rename cg44cf@isp cg44d0@old* cg44d1@new*) (let ((cg44d6@subst (cg4499@get-import cg44cf@isp)) (cg44d7@old* (map cg31a1@syntax->datum cg44d0@old*)) (cg44d8@new* (map cg31a1@syntax->datum cg44d1@new*))) (let ((cg44dc@old-label* (cg448f@find* cg44d7@old* cg44d6@subst))) (let ((cg44de@subst (cg4491@rem* cg44d7@old* cg44d6@subst))) (cg448b@merge-substs (map cons cg44d8@new* cg44dc@old-label*) cg44de@subst))))) cg44c4@ls/false) (let ((cg44e0@t cg44c2@t)) (let ((cg44e2@ls/false (cg30bb@syntax-dispatch cg44e0@t '(any any . each-any)))) (if (and cg44e2@ls/false (apply (lambda (cg44e4@except cg44e5@isp cg44e6@sym*) (and (eq? (cg31a1@syntax->datum cg44e4@except) 'except) (for-all cg4487@idsyn? cg44e6@sym*))) cg44e2@ls/false)) (apply (lambda (cg44ea@except cg44eb@isp cg44ec@sym*) (let ((cg44f0@subst (cg4499@get-import cg44eb@isp))) (cg4491@rem* (map cg31a1@syntax->datum cg44ec@sym*) cg44f0@subst))) cg44e2@ls/false) (let ((cg44f2@t cg44e0@t)) (let ((cg44f4@ls/false (cg30bb@syntax-dispatch cg44f2@t '(any any . each-any)))) (if (and cg44f4@ls/false (apply (lambda (cg44f6@only cg44f7@isp cg44f8@sym*) (and (eq? (cg31a1@syntax->datum cg44f6@only) 'only) (for-all cg4487@idsyn? cg44f8@sym*))) cg44f4@ls/false)) (apply (lambda (cg44fc@only cg44fd@isp cg44fe@sym*) (let ((cg4502@subst (cg4499@get-import cg44fd@isp)) (cg4503@sym* (map cg31a1@syntax->datum cg44fe@sym*))) (let ((cg4506@sym* (cg4493@remove-dups cg4503@sym*))) (let ((cg4508@lab* (cg448f@find* cg4506@sym* cg4502@subst))) (map cons cg4506@sym* cg4508@lab*))))) cg44f4@ls/false) (let ((cg450a@t cg44f2@t)) (let ((cg450c@ls/false (cg30bb@syntax-dispatch cg450a@t '(any any any)))) (if (and cg450c@ls/false (apply (lambda (cg450e@prefix cg450f@isp cg4510@p) (and (eq? (cg31a1@syntax->datum cg450e@prefix) 'prefix) (cg4487@idsyn? cg4510@p))) cg450c@ls/false)) (apply (lambda (cg4514@prefix cg4515@isp cg4516@p) (let ((cg451a@subst (cg4499@get-import cg4515@isp)) (cg451b@prefix (symbol->string (cg31a1@syntax->datum cg4516@p)))) (map (lambda (cg451e@x) (cons (string->symbol (string-append cg451b@prefix (symbol->string (car cg451e@x)))) (cdr cg451e@x))) cg451a@subst))) cg450c@ls/false) (let ((cg4520@t cg450a@t)) (let ((cg4522@ls/false (cg30bb@syntax-dispatch cg4520@t '(any each-any)))) (if (and cg4522@ls/false (apply (lambda (cg4524@library cg4525@spec*) (eq? (cg31a1@syntax->datum cg4524@library) 'library)) cg4522@ls/false)) (apply (lambda (cg4528@library cg4529@spec*) (cg4497@import-library cg4529@spec*)) cg4522@ls/false) (let ((cg452c@t cg4520@t)) (let ((cg452e@ls/false (cg30bb@syntax-dispatch cg452c@t '(any any . any)))) (if (and cg452e@ls/false (apply (lambda (cg4530@for cg4531@isp cg4532@rest) (eq? (cg31a1@syntax->datum cg4530@for) 'for)) cg452e@ls/false)) (apply (lambda (cg4536@for cg4537@isp cg4538@rest) (cg4499@get-import cg4537@isp)) cg452e@ls/false) (let ((cg453c@t cg452c@t)) (let ((cg453e@ls/false (cg30bb@syntax-dispatch cg453c@t 'any))) (if cg453e@ls/false (apply (lambda (cg4540@spec) (cg319b@syntax-violation 'import '"invalid import spec" cg4540@spec)) cg453e@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg453c@t))))))))))))))))))))))))))) (cg449b@add-imports! (lambda (cg44a4@imp cg44a5@h) (let ((cg44a8@subst (cg4499@get-import cg44a4@imp))) (for-each (lambda (cg44aa@x) (let ((cg44ac@name (car cg44aa@x)) (cg44ad@label (cdr cg44aa@x))) (let ((cg44b0@t (hashtable-ref cg44a5@h cg44ac@name '#f))) (if cg44b0@t ((lambda (cg44b2@l) (if (not (eq? cg44b2@l cg44ad@label)) (cg4489@dup-error cg44ac@name) (void))) cg44b0@t) (hashtable-set! cg44a5@h cg44ac@name cg44ad@label))))) cg44a8@subst))))) (lambda (cg449c@imp*) (let cg44a2@f ((cg449e@imp* cg449c@imp*) (cg449f@h (make-eq-hashtable))) (if (null? cg449e@imp*) (hashtable-entries cg449f@h) (begin (cg449b@add-imports! (car cg449e@imp*) cg449f@h) (cg44a2@f (cdr cg449e@imp*) cg449f@h))))))) (set! cg4bbe@cg311d@parse-import-spec* cg311d@parse-import-spec*) (set! cg311f@make-top-rib (lambda (cg4692@names cg4693@labels) (let ((cg4696@rib (cg2e68@make-empty-rib))) (begin (vector-for-each (lambda (cg4698@name cg4699@label) (begin (if (not (symbol? cg4698@name)) (error 'make-top-rib '"BUG: not a symbol" cg4698@name) (void)) (cg2e6c@extend-rib/nc! cg4696@rib (make-simple-struct 'stx '5 (list cg4698@name cg2e38@top-mark* '() '())) cg4699@label))) cg4692@names cg4693@labels) cg4696@rib)))) (set! cg4bbf@cg311f@make-top-rib cg311f@make-top-rib) (set! cg3121@make-collector (lambda () (let ((cg469c@ls '())) (lambda cg46a0 (let ((cg46a1 (length cg46a0))) (if (= cg46a1 '0) (apply (lambda () cg469c@ls) cg46a0) (if (= cg46a1 '1) (apply (lambda (cg469e@x) (set! cg469c@ls (cg2e31@set-cons cg469e@x cg469c@ls))) cg46a0) (error #1='apply '"invalid arg count")))))))) (set! cg4bc0@cg3121@make-collector cg3121@make-collector) (set! cg3123@inv-collector (cg2a04@cg28e2@make-parameter (lambda cg46a2@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (cg46a4@x) (begin (if (not (procedure? cg46a4@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" cg46a4@x) (void)) cg46a4@x)))) (set! cg4bc1@cg3123@inv-collector cg3123@inv-collector) (set! cg3125@vis-collector (cg2a04@cg28e2@make-parameter (lambda cg46a6@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (cg46a8@x) (begin (if (not (procedure? cg46a8@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" cg46a8@x) (void)) cg46a8@x)))) (set! cg4bc2@cg3125@vis-collector cg3125@vis-collector) (set! cg3127@imp-collector (cg2a04@cg28e2@make-parameter (lambda cg46aa@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (cg46ac@x) (begin (if (not (procedure? cg46ac@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" cg46ac@x) (void)) cg46ac@x)))) (set! cg4bc3@cg3127@imp-collector cg3127@imp-collector) (set! cg3129@chi-library-internal (lambda (cg46ae@e* cg46af@rib cg46b0@top?) (call-with-values (lambda () (cg3113@chi-body* cg46ae@e* '() '() '() '() '() '() '() cg46af@rib cg46b0@top?)) (lambda (cg46c4@cg46b5 cg46c5@cg46b7 cg46c6@cg46b9 cg46c7@cg46bb cg46c8@cg46bd cg46c9@cg46bf cg46ca@cg46c1 cg46cb@cg46c3) (let ((cg46d4@exp* cg46cb@cg46c3) (cg46d5@_kwd* cg46ca@cg46c1) (cg46d6@mod** cg46c9@cg46bf) (cg46d7@rhs* cg46c8@cg46bd) (cg46d8@lex* cg46c7@cg46bb) (cg46d9@mr cg46c6@cg46b9) (cg46da@r cg46c5@cg46b7) (cg46db@e* cg46c4@cg46b5)) (values (append (apply append (reverse cg46d6@mod**)) cg46db@e*) cg46da@r cg46d9@mr (reverse cg46d8@lex*) (reverse cg46d7@rhs*) cg46d4@exp*)))))) (set! cg4bc4@cg3129@chi-library-internal cg3129@chi-library-internal) (set! cg312b@chi-interaction-expr (lambda (cg46e4@e cg46e5@rib cg46e6@r) (call-with-values (lambda () (cg3113@chi-body* (list cg46e4@e) cg46e6@r cg46e6@r '() '() '() '() '() cg46e5@rib '#t)) (lambda (cg46fa@cg46eb cg46fb@cg46ed cg46fc@cg46ef cg46fd@cg46f1 cg46fe@cg46f3 cg46ff@cg46f5 cg4700@cg46f7 cg4701@cg46f9) (let ((cg470a@_exp* cg4701@cg46f9) (cg470b@_kwd* cg4700@cg46f7) (cg470c@mod** cg46ff@cg46f5) (cg470d@rhs* cg46fe@cg46f3) (cg470e@lex* cg46fd@cg46f1) (cg470f@mr cg46fc@cg46ef) (cg4710@r cg46fb@cg46ed) (cg4711@e* cg46fa@cg46eb)) (let ((cg471a@e* (cg30eb@expand-interaction-rhs*/init* (reverse cg470e@lex*) (reverse cg470d@rhs*) (append (apply append (reverse cg470c@mod**)) cg4711@e*) cg4710@r cg470f@mr))) (let ((cg471c@e (if (null? cg471a@e*) (cg2e1a@cg2d7b@build-void) (if (null? (cdr cg471a@e*)) (car cg471a@e*) (cg2e19@cg2d79@build-sequence '#f cg471a@e*))))) (values cg471c@e cg4710@r)))))))) (set! cg4bc5@cg312b@chi-interaction-expr cg312b@chi-interaction-expr) (set! cg312d@library-body-expander (lambda (cg471e@name cg471f@main-exp* cg4720@imp* cg4721@b* cg4722@top?) (letrec* ((cg4729@itc (cg3121@make-collector))) (let ((cg4732@cg472b cg3127@imp-collector) (cg4733@cg472d cg31ab@top-level-context) (cg4734@cg472f cg4729@itc) (cg4735@cg4731 '#f)) (let ((cg473a@swap (lambda () (begin (let ((cg473c@t (cg4732@cg472b))) (begin (cg4732@cg472b cg4734@cg472f) (set! cg4734@cg472f cg473c@t))) (let ((cg473e@t (cg4733@cg472d))) (begin (cg4733@cg472d cg4735@cg4731) (set! cg4735@cg4731 cg473e@t))))))) (dynamic-wind cg473a@swap (lambda () (call-with-values (lambda () (cg311d@parse-import-spec* cg4720@imp*)) (lambda (cg4744@cg4741 cg4745@cg4743) (let ((cg4748@subst-labels cg4745@cg4743) (cg4749@subst-names cg4744@cg4741)) (let ((cg474c@rib (cg311f@make-top-rib cg4749@subst-names cg4748@subst-labels))) (letrec* ((cg474f@wrap (lambda (cg47ca@x) (make-simple-struct 'stx '5 (list cg47ca@x cg2e38@top-mark* (list cg474c@rib) '()))))) (let ((cg4750@b* (map cg474f@wrap cg4721@b*)) (cg4751@main-exp* (map cg474f@wrap cg471f@main-exp*)) (cg4752@rtc (cg3121@make-collector)) (cg4753@vtc (cg3121@make-collector))) (let ((cg4760@cg4759 cg3123@inv-collector) (cg4761@cg475b cg3125@vis-collector) (cg4762@cg475d cg4752@rtc) (cg4763@cg475f cg4753@vtc)) (let ((cg4768@swap (lambda () (begin (let ((cg476a@t (cg4760@cg4759))) (begin (cg4760@cg4759 cg4762@cg475d) (set! cg4762@cg475d cg476a@t))) (let ((cg476c@t (cg4761@cg475b))) (begin (cg4761@cg475b cg4763@cg475f) (set! cg4763@cg475f cg476c@t))))))) (dynamic-wind cg4768@swap (lambda () (call-with-values (lambda () (cg3129@chi-library-internal cg4750@b* cg474c@rib cg4722@top?)) (lambda (cg477a@cg476f cg477b@cg4771 cg477c@cg4773 cg477d@cg4775 cg477e@cg4777 cg477f@cg4779) (let ((cg4786@internal-exp* cg477f@cg4779) (cg4787@rhs* cg477e@cg4777) (cg4788@lex* cg477d@cg4775) (cg4789@mr cg477c@cg4773) (cg478a@r cg477b@cg4771) (cg478b@init* cg477a@cg476f)) (call-with-values (lambda () (cg3117@parse-exports (append cg4751@main-exp* cg4786@internal-exp*))) (lambda (cg4796@cg4793 cg4797@cg4795) (let ((cg479a@exp-id* cg4797@cg4795) (cg479b@exp-name* cg4796@cg4793)) (begin (cg2e70@seal-rib! cg474c@rib) (let ((cg479e@init* (cg30d9@chi-expr* cg478b@init* cg478a@r cg4789@mr))) (let ((cg47a0@rhs* (cg30ed@chi-rhs* cg4787@rhs* cg478a@r cg4789@mr))) (begin (cg2e72@unseal-rib! cg474c@rib) (let ((cg47a2@loc* (map cg2e3e@gen-global cg4788@lex*)) (cg47a3@export-subst (cg3185@make-export-subst cg479b@exp-name* cg479a@exp-id*))) (letrec* ((cg47a7@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (cg3187@make-export-env/macros cg4788@lex* cg47a2@loc* cg478a@r)) (lambda (cg47ae@cg47a9 cg47af@cg47ab cg47b0@cg47ad) (let ((cg47b4@macro* cg47b0@cg47ad) (cg47b5@global* cg47af@cg47ab) (cg47b6@export-env cg47ae@cg47a9)) (begin (for-each (lambda (cg47ba@s) (let ((cg47bc@name (car cg47ba@s)) (cg47bd@label (cdr cg47ba@s))) (let ((cg47c0@p (assq cg47bd@label cg47b6@export-env))) (if cg47c0@p (let ((cg47c2@b (cdr cg47c0@p))) (let ((cg47c4@type (car cg47c2@b))) (if (eq? cg47c4@type 'mutable) (cg319b@syntax-violation 'export cg47a7@errstr cg47bc@name) (void)))) (void))))) cg47a3@export-subst) (let ((cg47c6@invoke-body (cg2e1f@cg2d85@build-library-letrec* '#f cg471e@name cg4788@lex* cg47a2@loc* cg47a0@rhs* (if (null? cg479e@init*) (cg2e1a@cg2d7b@build-void) (cg2e19@cg2d79@build-sequence '#f cg479e@init*)))) (cg47c7@invoke-definitions (map cg2e16@cg2cd8@build-global-define (map cdr cg47b5@global*)))) (values (cg4729@itc) (cg4752@rtc) (cg4753@vtc) (cg2e19@cg2d79@build-sequence '#f (append cg47c7@invoke-definitions (list cg47c6@invoke-body))) cg47b4@macro* cg47a3@export-subst cg47b6@export-env))))))))))))))))))) cg4768@swap)))))))))) cg473a@swap)))))) (set! cg4bc6@cg312d@library-body-expander cg312d@library-body-expander) (set! cg312f@core-library-expander (lambda (cg47cc@e cg47cd@verify-name) (call-with-values (lambda () (cg311b@parse-library cg47cc@e)) (lambda (cg47d8@cg47d1 cg47d9@cg47d3 cg47da@cg47d5 cg47db@cg47d7) (let ((cg47e0@b* cg47db@cg47d7) (cg47e1@imp* cg47da@cg47d5) (cg47e2@exp* cg47d9@cg47d3) (cg47e3@name* cg47d8@cg47d1)) (call-with-values (lambda () (cg3119@parse-library-name cg47e3@name*)) (lambda (cg47ec@cg47e9 cg47ed@cg47eb) (let ((cg47f0@ver cg47ed@cg47eb) (cg47f1@name cg47ec@cg47e9)) (begin (cg47cd@verify-name cg47f1@name) (call-with-values (lambda () (cg312d@library-body-expander cg47f1@name cg47e2@exp* cg47e1@imp* cg47e0@b* '#f)) (lambda (cg4802@cg47f5 cg4803@cg47f7 cg4804@cg47f9 cg4805@cg47fb cg4806@cg47fd cg4807@cg47ff cg4808@cg4801) (let ((cg4810@export-env cg4808@cg4801) (cg4811@export-subst cg4807@cg47ff) (cg4812@visit-code cg4806@cg47fd) (cg4813@invoke-code cg4805@cg47fb) (cg4814@visit-req* cg4804@cg47f9) (cg4815@invoke-req* cg4803@cg47f7) (cg4816@imp* cg4802@cg47f5)) (values cg47f1@name cg47f0@ver cg4816@imp* cg4815@invoke-req* cg4814@visit-req* cg4813@invoke-code cg4812@visit-code cg4811@export-subst cg4810@export-env))))))))))))) (set! cg4bc7@cg312f@core-library-expander cg312f@core-library-expander) (set! cg3131@parse-top-level-program (lambda (cg481e@e*) (let ((cg4820@t cg481e@e*)) (let ((cg4822@ls/false (cg30bb@syntax-dispatch cg4820@t '((any . each-any) . each-any)))) (if (and cg4822@ls/false (apply (lambda (cg4824@import cg4825@imp* cg4826@b*) (eq? (cg31a1@syntax->datum cg4824@import) 'import)) cg4822@ls/false)) (apply (lambda (cg482a@import cg482b@imp* cg482c@b*) (values cg482b@imp* cg482c@b*)) cg4822@ls/false) (let ((cg4830@t cg4820@t)) (let ((cg4832@ls/false (cg30bb@syntax-dispatch cg4830@t '((any . any) . any)))) (if (and cg4832@ls/false (apply (lambda (cg4834@import cg4835@x cg4836@y) (eq? (cg31a1@syntax->datum cg4834@import) 'import)) cg4832@ls/false)) (apply (lambda (cg483a@import cg483b@x cg483c@y) (cg319b@syntax-violation 'expander '"invalid syntax of top-level program" (cg2eae@syntax-car cg481e@e*))) cg4832@ls/false) (let ((cg4840@t cg4830@t)) (let ((cg4842@ls/false (cg30bb@syntax-dispatch cg4840@t '_))) (if cg4842@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) cg4842@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4840@t)))))))))))) (set! cg4bc8@cg3131@parse-top-level-program cg3131@parse-top-level-program) (set! cg3133@top-level-expander (lambda (cg4844@e*) (call-with-values (lambda () (cg3131@parse-top-level-program cg4844@e*)) (lambda (cg484a@cg4847 cg484b@cg4849) (let ((cg484e@b* cg484b@cg4849) (cg484f@imp* cg484a@cg4847)) (call-with-values (lambda () (cg312d@library-body-expander '() '() cg484f@imp* cg484e@b* '#t)) (lambda (cg4860@cg4853 cg4861@cg4855 cg4862@cg4857 cg4863@cg4859 cg4864@cg485b cg4865@cg485d cg4866@cg485f) (let ((cg486e@export-env cg4866@cg485f) (cg486f@export-subst cg4865@cg485d) (cg4870@visit-code cg4864@cg485b) (cg4871@invoke-code cg4863@cg4859) (cg4872@visit-req* cg4862@cg4857) (cg4873@invoke-req* cg4861@cg4855) (cg4874@imp* cg4860@cg4853)) (values cg4873@invoke-req* cg4871@invoke-code))))))))) (set! cg4bc9@cg3133@top-level-expander cg3133@top-level-expander) (set! cg3135@rp (cg2a01@cg28dc@make-record-printer 'env (lambda (cg487c@x cg487d@p cg487e@wr) (display '"#<environment>" cg487d@p)))) (set! cg4bca@cg3135@rp cg3135@rp) (set! cg313f@env? (lambda (cg4882@x) (and (simple-struct? cg4882@x) (eq? (simple-struct-name cg4882@x) 'env)))) (set! cg4bcb@cg313f@env? cg313f@env?) (set! cg3141@env-names (lambda (cg4884@x) (simple-struct-ref cg4884@x '0))) (set! cg4bcc@cg3141@env-names cg3141@env-names) (set! cg3143@set-env-names! (lambda (cg4886@x cg4887@val) (simple-struct-set! cg4886@x '0 cg4887@val))) (set! cg4bcd@cg3143@set-env-names! cg3143@set-env-names!) (set! cg3145@env-labels (lambda (cg488a@x) (simple-struct-ref cg488a@x '1))) (set! cg4bce@cg3145@env-labels cg3145@env-labels) (set! cg3147@set-env-labels! (lambda (cg488c@x cg488d@val) (simple-struct-set! cg488c@x '1 cg488d@val))) (set! cg4bcf@cg3147@set-env-labels! cg3147@set-env-labels!) (set! cg3149@env-itc (lambda (cg4890@x) (simple-struct-ref cg4890@x '2))) (set! cg4bd0@cg3149@env-itc cg3149@env-itc) (set! cg314b@set-env-itc! (lambda (cg4892@x cg4893@val) (simple-struct-set! cg4892@x '2 cg4893@val))) (set! cg4bd1@cg314b@set-env-itc! cg314b@set-env-itc!) (set! cg314d@dummy '3) (set! cg4bd2@cg314d@dummy cg314d@dummy) (set! cg314f@rp (cg2a01@cg28dc@make-record-printer 'interaction-env (lambda (cg4896@x cg4897@p cg4898@wr) (display '"#<environment>" cg4897@p)))) (set! cg4bd3@cg314f@rp cg314f@rp) (set! cg3159@interaction-env? (lambda (cg489c@x) (and (simple-struct? cg489c@x) (eq? (simple-struct-name cg489c@x) 'interaction-env)))) (set! cg4bd4@cg3159@interaction-env? cg3159@interaction-env?) (set! cg315b@interaction-env-rib (lambda (cg489e@x) (simple-struct-ref cg489e@x '0))) (set! cg4bd5@cg315b@interaction-env-rib cg315b@interaction-env-rib) (set! cg315d@set-interaction-env-rib! (lambda (cg48a0@x cg48a1@val) (simple-struct-set! cg48a0@x '0 cg48a1@val))) (set! cg4bd6@cg315d@set-interaction-env-rib! cg315d@set-interaction-env-rib!) (set! cg315f@interaction-env-r (lambda (cg48a4@x) (simple-struct-ref cg48a4@x '1))) (set! cg4bd7@cg315f@interaction-env-r cg315f@interaction-env-r) (set! cg3161@set-interaction-env-r! (lambda (cg48a6@x cg48a7@val) (simple-struct-set! cg48a6@x '1 cg48a7@val))) (set! cg4bd8@cg3161@set-interaction-env-r! cg3161@set-interaction-env-r!) (set! cg3163@interaction-env-locs (lambda (cg48aa@x) (simple-struct-ref cg48aa@x '2))) (set! cg4bd9@cg3163@interaction-env-locs cg3163@interaction-env-locs) (set! cg3165@set-interaction-env-locs! (lambda (cg48ac@x cg48ad@val) (simple-struct-set! cg48ac@x '2 cg48ad@val))) (set! cg4bda@cg3165@set-interaction-env-locs! cg3165@set-interaction-env-locs!) (set! cg3167@dummy '3) (set! cg4bdb@cg3167@dummy cg3167@dummy) (set! cg3169@interaction-environment-symbols (lambda () (cg3171@environment-symbols (cg31a9@interaction-environment)))) (set! cg4bdc@cg3169@interaction-environment-symbols cg3169@interaction-environment-symbols) (set! cg316b@environment-bindings (lambda (cg48b0@e) (vector->list (vector-map (lambda (cg48b2@name cg48b3@label) (cg316d@parse-binding (cons cg48b2@name (cg2ccf@cg2b1c@imported-label->binding cg48b3@label)))) (cg3141@env-names cg48b0@e) (cg3145@env-labels cg48b0@e))))) (set! cg4bdd@cg316b@environment-bindings cg316b@environment-bindings) (set! cg316d@parse-binding (lambda (cg48b6@b) (cons (car cg48b6@b) (let ((cg48b8@t (cadr cg48b6@b))) (if (memv cg48b8@t '(core-prim global)) 'procedure (if (memv cg48b8@t '(core-macro macro global-macro)) 'syntax (if (memv cg48b8@t '($core-rtd)) 'record (if (eq? (car cg48b6@b) (cadr cg48b6@b)) 'syntax 'unknown)))))))) (set! cg4bde@cg316d@parse-binding cg316d@parse-binding) (set! cg316f@environment? (lambda (cg48ba@x) (or (cg313f@env? cg48ba@x) (cg3159@interaction-env? cg48ba@x)))) (set! cg4bdf@cg316f@environment? cg316f@environment?) (set! cg3171@environment-symbols (lambda (cg48bc@x) (if (cg313f@env? cg48bc@x) (vector->list (cg3141@env-names cg48bc@x)) (if (cg3159@interaction-env? cg48bc@x) (map values (cg2e52@rib-sym* (cg315b@interaction-env-rib cg48bc@x))) (assertion-violation 'environment-symbols '"not an environment" cg48bc@x))))) (set! cg4be0@cg3171@environment-symbols cg3171@environment-symbols) (set! cg3173@environment (lambda cg48be@imp* (let ((cg48c0@itc (cg3121@make-collector))) (let ((cg48c6@cg48c3 cg3127@imp-collector) (cg48c7@cg48c5 cg48c0@itc)) (let ((cg48ca@swap (lambda () (let ((cg48cc@t (cg48c6@cg48c3))) (begin (cg48c6@cg48c3 cg48c7@cg48c5) (set! cg48c7@cg48c5 cg48cc@t)))))) (dynamic-wind cg48ca@swap (lambda () (call-with-values (lambda () (cg311d@parse-import-spec* cg48be@imp*)) (lambda (cg48d2@cg48cf cg48d3@cg48d1) (let ((cg48d6@subst-labels cg48d3@cg48d1) (cg48d7@subst-names cg48d2@cg48cf)) (make-simple-struct 'env '4 (list cg48d7@subst-names cg48d6@subst-labels cg48c0@itc)))))) cg48ca@swap)))))) (set! cg4be1@cg3173@environment cg3173@environment) (set! cg3175@null-environment (lambda (cg48da@n) (begin (if (not (eqv? cg48da@n '5)) (assertion-violation 'null-environment '"not 5" cg48da@n) (void)) (cg3173@environment '(psyntax null-environment-5))))) (set! cg4be2@cg3175@null-environment cg3175@null-environment) (set! cg3177@scheme-report-environment (lambda (cg48dc@n) (begin (if (not (eqv? cg48dc@n '5)) (assertion-violation 'scheme-report-environment '"not 5" cg48dc@n) (void)) (cg3173@environment '(psyntax scheme-report-environment-5))))) (set! cg4be3@cg3177@scheme-report-environment cg3177@scheme-report-environment) (set! cg3179@expand (lambda (cg48de@x cg48df@env) (if (cg313f@env? cg48df@env) (let ((cg48e2@rib (cg311f@make-top-rib (cg3141@env-names cg48df@env) (cg3145@env-labels cg48df@env)))) (let ((cg48e4@x (make-simple-struct 'stx '5 (list cg48de@x cg2e38@top-mark* (list cg48e2@rib) '()))) (cg48e5@itc (cg3149@env-itc cg48df@env)) (cg48e6@rtc (cg3121@make-collector)) (cg48e7@vtc (cg3121@make-collector))) (let ((cg48ec@x (let ((cg48fe@cg48ef cg31ab@top-level-context) (cg48ff@cg48f1 cg3123@inv-collector) (cg4900@cg48f3 cg3125@vis-collector) (cg4901@cg48f5 cg3127@imp-collector) (cg4902@cg48f7 '#f) (cg4903@cg48f9 cg48e6@rtc) (cg4904@cg48fb cg48e7@vtc) (cg4905@cg48fd cg48e5@itc)) (let ((cg490e@swap (lambda () (begin (let ((cg4910@t (cg48fe@cg48ef))) (begin (cg48fe@cg48ef cg4902@cg48f7) (set! cg4902@cg48f7 cg4910@t))) (let ((cg4912@t (cg48ff@cg48f1))) (begin (cg48ff@cg48f1 cg4903@cg48f9) (set! cg4903@cg48f9 cg4912@t))) (let ((cg4914@t (cg4900@cg48f3))) (begin (cg4900@cg48f3 cg4904@cg48fb) (set! cg4904@cg48fb cg4914@t))) (let ((cg4916@t (cg4901@cg48f5))) (begin (cg4901@cg48f5 cg4905@cg48fd) (set! cg4905@cg48fd cg4916@t))))))) (dynamic-wind cg490e@swap (lambda () (cg30dd@chi-expr cg48e4@x '() '())) cg490e@swap))))) (begin (cg2e70@seal-rib! cg48e2@rib) (values cg48ec@x (cg48e6@rtc)))))) (if (cg3159@interaction-env? cg48df@env) (let ((cg4918@rib (cg315b@interaction-env-rib cg48df@env)) (cg4919@r (cg315f@interaction-env-r cg48df@env)) (cg491a@rtc (cg3121@make-collector))) (let ((cg491e@x (make-simple-struct 'stx '5 (list cg48de@x cg2e38@top-mark* (list cg4918@rib) '())))) (call-with-values (lambda () (let ((cg4934@cg4925 cg31ab@top-level-context) (cg4935@cg4927 cg3123@inv-collector) (cg4936@cg4929 cg3125@vis-collector) (cg4937@cg492b cg3127@imp-collector) (cg4938@cg492d cg48df@env) (cg4939@cg492f cg491a@rtc) (cg493a@cg4931 (cg3121@make-collector)) (cg493b@cg4933 (cg3121@make-collector))) (let ((cg4944@swap (lambda () (begin (let ((cg4946@t (cg4934@cg4925))) (begin (cg4934@cg4925 cg4938@cg492d) (set! cg4938@cg492d cg4946@t))) (let ((cg4948@t (cg4935@cg4927))) (begin (cg4935@cg4927 cg4939@cg492f) (set! cg4939@cg492f cg4948@t))) (let ((cg494a@t (cg4936@cg4929))) (begin (cg4936@cg4929 cg493a@cg4931) (set! cg493a@cg4931 cg494a@t))) (let ((cg494c@t (cg4937@cg492b))) (begin (cg4937@cg492b cg493b@cg4933) (set! cg493b@cg4933 cg494c@t))))))) (dynamic-wind cg4944@swap (lambda () (cg312b@chi-interaction-expr cg491e@x cg4918@rib cg4919@r)) cg4944@swap)))) (lambda (cg494e@cg4921 cg494f@cg4923) (let ((cg4952@r^ cg494f@cg4923) (cg4953@e cg494e@cg4921)) (begin (cg3161@set-interaction-env-r! cg48df@env cg4952@r^) (values cg4953@e (cg491a@rtc)))))))) (assertion-violation 'expand '"not an environment" cg48df@env))))) (set! cg4be4@cg3179@expand cg3179@expand) (set! cg317b@eval (lambda (cg4956@x cg4957@env) (begin (if (not (cg316f@environment? cg4957@env)) (error 'eval '"not an environment" cg4957@env) (void)) (call-with-values (lambda () (cg3179@expand cg4956@x cg4957@env)) (lambda (cg495e@cg495b cg495f@cg495d) (let ((cg4962@invoke-req* cg495f@cg495d) (cg4963@x cg495e@cg495b)) (begin (for-each cg2cd0@cg2b1e@invoke-library cg4962@invoke-req*) (eval-core (cg2a5a@cg2a12@expanded->core cg4963@x))))))))) (set! cg4be5@cg317b@eval cg317b@eval) (set! cg317d@library-expander (lambda cg49d4 (let ((cg49d5 (length cg49d4))) (if (= cg49d5 '3) (apply (lambda (cg4966@x cg4967@filename cg4968@verify-name) (letrec* ((cg496d@build-visit-code (lambda (cg49c2@macro*) (if (null? cg49c2@macro*) (cg2e1a@cg2d7b@build-void) (cg2e19@cg2d79@build-sequence '#f (map (lambda (cg49c4@x) (let ((cg49c6@loc (car cg49c4@x)) (cg49c7@src (cddr cg49c4@x))) (list 'set! cg49c6@loc cg49c7@src))) cg49c2@macro*))))) (cg496f@visit! (lambda (cg49ba@macro*) (for-each (lambda (cg49bc@x) (let ((cg49be@loc (car cg49bc@x)) (cg49bf@proc (cadr cg49bc@x))) (set-symbol-value! cg49be@loc cg49bf@proc))) cg49ba@macro*)))) (call-with-values (lambda () (cg312f@core-library-expander cg4966@x cg4968@verify-name)) (lambda (cg4982@cg4971 cg4983@cg4973 cg4984@cg4975 cg4985@cg4977 cg4986@cg4979 cg4987@cg497b cg4988@cg497d cg4989@cg497f cg498a@cg4981) (let ((cg4994@export-env cg498a@cg4981) (cg4995@export-subst cg4989@cg497f) (cg4996@macro* cg4988@cg497d) (cg4997@invoke-code cg4987@cg497b) (cg4998@vis* cg4986@cg4979) (cg4999@inv* cg4985@cg4977) (cg499a@imp* cg4984@cg4975) (cg499b@ver cg4983@cg4973) (cg499c@name cg4982@cg4971)) (let ((cg49a6@id (gensym)) (cg49a7@name cg499c@name) (cg49a8@ver cg499b@ver) (cg49a9@imp* (map cg2cd4@cg2b26@library-spec cg499a@imp*)) (cg49aa@vis* (map cg2cd4@cg2b26@library-spec cg4998@vis*)) (cg49ab@inv* (map cg2cd4@cg2b26@library-spec cg4999@inv*)) (cg49ac@visit-proc (lambda () (cg496f@visit! cg4996@macro*))) (cg49ad@invoke-proc (lambda () (eval-core (cg2a5a@cg2a12@expanded->core cg4997@invoke-code)))) (cg49ae@visit-code (cg496d@build-visit-code cg4996@macro*)) (cg49af@invoke-code cg4997@invoke-code)) (begin (cg2cce@cg2b1a@install-library cg49a6@id cg49a7@name cg49a8@ver cg49a9@imp* cg49aa@vis* cg49ab@inv* cg4995@export-subst cg4994@export-env cg49ac@visit-proc cg49ad@invoke-proc cg49ae@visit-code cg49af@invoke-code '#t cg4967@filename) (values cg49a6@id cg49a7@name cg49a8@ver cg49a9@imp* cg49aa@vis* cg49ab@inv* cg49af@invoke-code cg49ae@visit-code cg4995@export-subst cg4994@export-env)))))))) cg49d4) (if (= cg49d5 '2) (apply (lambda (cg49ca@x cg49cb@filename) (cg317d@library-expander cg49ca@x cg49cb@filename (lambda (cg49ce@x) (values)))) cg49d4) (if (= cg49d5 '1) (apply (lambda (cg49d0@x) (cg317d@library-expander cg49d0@x '#f (lambda (cg49d2@x) (values)))) cg49d4) (error #1# '"invalid arg count"))))))) (set! cg4be6@cg317d@library-expander cg317d@library-expander) (set! cg317f@boot-library-expand (lambda (cg49d6@x) (call-with-values (lambda () (cg317d@library-expander cg49d6@x)) (lambda (cg49ec@cg49d9 cg49ed@cg49db cg49ee@cg49dd cg49ef@cg49df cg49f0@cg49e1 cg49f1@cg49e3 cg49f2@cg49e5 cg49f3@cg49e7 cg49f4@cg49e9 cg49f5@cg49eb) (let ((cg4a00@export-env cg49f5@cg49eb) (cg4a01@export-subst cg49f4@cg49e9) (cg4a02@visit-code cg49f3@cg49e7) (cg4a03@invoke-code cg49f2@cg49e5) (cg4a04@inv* cg49f1@cg49e3) (cg4a05@vis* cg49f0@cg49e1) (cg4a06@imp* cg49ef@cg49df) (cg4a07@ver cg49ee@cg49dd) (cg4a08@name cg49ed@cg49db) (cg4a09@id cg49ec@cg49d9)) (values cg4a08@name cg4a03@invoke-code cg4a01@export-subst cg4a00@export-env)))))) (set! cg4be7@cg317f@boot-library-expand cg317f@boot-library-expand) (set! cg3181@rev-map-append (lambda (cg4a14@f cg4a15@ls cg4a16@ac) (if (null? cg4a15@ls) cg4a16@ac (cg3181@rev-map-append cg4a14@f (cdr cg4a15@ls) (cons (cg4a14@f (car cg4a15@ls)) cg4a16@ac))))) (set! cg4be8@cg3181@rev-map-append cg3181@rev-map-append) (set! cg3183@build-exports (lambda (cg4a1a@lex*+loc* cg4a1b@init*) (cg2e19@cg2d79@build-sequence '#f (cons (cg2e1a@cg2d7b@build-void) (cg3181@rev-map-append (lambda (cg4a1e@x) (list 'set! (cdr cg4a1e@x) (car cg4a1e@x))) cg4a1a@lex*+loc* cg4a1b@init*))))) (set! cg4be9@cg3183@build-exports cg3183@build-exports) (set! cg3185@make-export-subst (lambda (cg4a20@name* cg4a21@id*) (map (lambda (cg4a24@name cg4a25@id) (let ((cg4a28@label (cg2eca@id->label cg4a25@id))) (begin (if (not cg4a28@label) (cg319b@syntax-violation '#f '"cannot export unbound identifier" cg4a25@id) (void)) (cons cg4a24@name cg4a28@label)))) cg4a20@name* cg4a21@id*))) (set! cg4bea@cg3185@make-export-subst cg3185@make-export-subst) (set! cg3187@make-export-env/macros (lambda (cg4a2a@lex* cg4a2b@loc* cg4a2c@r) (letrec* ((cg4a31@lookup (lambda (cg4a4e@x) (let cg4a56@f ((cg4a50@x cg4a4e@x) (cg4a51@lex* cg4a2a@lex*) (cg4a52@loc* cg4a2b@loc*)) (if (pair? cg4a51@lex*) (if (eq? cg4a50@x (car cg4a51@lex*)) (car cg4a52@loc*) (cg4a56@f cg4a50@x (cdr cg4a51@lex*) (cdr cg4a52@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let cg4a3a@f ((cg4a32@r cg4a2c@r) (cg4a33@env '()) (cg4a34@global* '()) (cg4a35@macro* '())) (if (null? cg4a32@r) (values cg4a33@env cg4a34@global* cg4a35@macro*) (let ((cg4a3c@x (car cg4a32@r))) (let ((cg4a3e@label (car cg4a3c@x)) (cg4a3f@b (cdr cg4a3c@x))) (let ((cg4a42@t (cg2ed0@binding-type cg4a3f@b))) (if (memv cg4a42@t '(lexical)) (let ((cg4a44@v (cg2ed2@binding-value cg4a3f@b))) (let ((cg4a46@loc (cg4a31@lookup (cg3045@lexical-var cg4a44@v))) (cg4a47@type (if (cg3047@lexical-mutable? cg4a44@v) 'mutable 'global))) (cg4a3a@f (cdr cg4a32@r) (cons (cons* cg4a3e@label cg4a47@type cg4a46@loc) cg4a33@env) (cons (cons (cg3045@lexical-var cg4a44@v) cg4a46@loc) cg4a34@global*) cg4a35@macro*))) (if (memv cg4a42@t '(local-macro)) (let ((cg4a4a@loc (gensym))) (cg4a3a@f (cdr cg4a32@r) (cons (cons* cg4a3e@label 'global-macro cg4a4a@loc) cg4a33@env) cg4a34@global* (cons (cons cg4a4a@loc (cg2ed2@binding-value cg4a3f@b)) cg4a35@macro*))) (if (memv cg4a42@t '(local-macro!)) (let ((cg4a4c@loc (gensym))) (cg4a3a@f (cdr cg4a32@r) (cons (cons* cg4a3e@label 'global-macro! cg4a4c@loc) cg4a33@env) cg4a34@global* (cons (cons cg4a4c@loc (cg2ed2@binding-value cg4a3f@b)) cg4a35@macro*))) (if (memv cg4a42@t '($rtd $module)) (cg4a3a@f (cdr cg4a32@r) (cons cg4a3c@x cg4a33@env) cg4a34@global* cg4a35@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (cg2ed0@binding-type cg4a3f@b) (cg2ed2@binding-value cg4a3f@b)))))))))))))) (set! cg4beb@cg3187@make-export-env/macros cg3187@make-export-env/macros) (set! cg3189@generate-temporaries (lambda (cg4a58@ls) (let ((cg4a5a@t cg4a58@ls)) (let ((cg4a5c@ls/false (cg30bb@syntax-dispatch cg4a5a@t 'each-any))) (if cg4a5c@ls/false (apply (lambda (cg4a5e@ls) (map (lambda (cg4a60@x) (make-simple-struct 'stx '5 (list (let ((cg4a62@x (cg31a1@syntax->datum cg4a60@x))) (if (or (symbol? cg4a62@x) (string? cg4a62@x)) (gensym cg4a62@x) (gensym 't))) cg2e38@top-mark* '() '()))) cg4a5e@ls)) cg4a5c@ls/false) (let ((cg4a64@t cg4a5a@t)) (let ((cg4a66@ls/false (cg30bb@syntax-dispatch cg4a64@t '_))) (if cg4a66@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) cg4a66@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4a64@t))))))))) (set! cg4bec@cg3189@generate-temporaries cg3189@generate-temporaries) (set! cg318b@free-identifier=? (lambda (cg4a68@x cg4a69@y) (if (cg2eb4@id? cg4a68@x) (if (cg2eb4@id? cg4a69@y) (cg2eba@free-id=? cg4a68@x cg4a69@y) (assertion-violation 'free-identifier=? '"not an identifier" cg4a69@y)) (assertion-violation 'free-identifier=? '"not an identifier" cg4a68@x)))) (set! cg4bed@cg318b@free-identifier=? cg318b@free-identifier=?) (set! cg318d@bound-identifier=? (lambda (cg4a6c@x cg4a6d@y) (if (cg2eb4@id? cg4a6c@x) (if (cg2eb4@id? cg4a6d@y) (cg2eb8@bound-id=? cg4a6c@x cg4a6d@y) (assertion-violation 'bound-identifier=? '"not an identifier" cg4a6d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" cg4a6c@x)))) (set! cg4bee@cg318d@bound-identifier=? cg318d@bound-identifier=?) (set! cg318f@make-source-condition (lambda (cg4a70@x) (letrec* ((cg4a7a@cg4a75 (make-record-type-descriptor '&source-information &condition-rtd 'cg4a78 '#f '#f '#((immutable file-name) (immutable line)))) (cg4a7c@cg4a77 '#f) (cg4a7e@cg4a76 (make-record-constructor-descriptor cg4a7a@cg4a75 &condition-rcd cg4a7c@cg4a77)) (cg4a81@cg4a74 (record-predicate cg4a7a@cg4a75)) (cg4a83@make-source-condition (record-constructor cg4a7e@cg4a76)) (cg4a85@cg4a72 (record-accessor cg4a7a@cg4a75 '0)) (cg4a87@cg4a73 (record-accessor cg4a7a@cg4a75 '1)) (cg4a89@source-condition? (condition-predicate cg4a7a@cg4a75)) (cg4a8b@source-filename (condition-accessor cg4a7a@cg4a75 cg4a85@cg4a72)) (cg4a8d@source-character (condition-accessor cg4a7a@cg4a75 cg4a87@cg4a73))) (if (and (pair? cg4a70@x) (pair? (cdr cg4a70@x))) (cg4a83@make-source-condition (car cg4a70@x) (cadr cg4a70@x)) (condition))))) (set! cg4bef@cg318f@make-source-condition cg318f@make-source-condition) (set! cg3191@extract-position-condition (lambda (cg4a8e@x) (cg318f@make-source-condition (cg3193@expression-position cg4a8e@x)))) (set! cg4bf0@cg3191@extract-position-condition cg3191@extract-position-condition) (set! cg3193@expression-position (lambda (cg4a90@x) (and (cg2e80@stx? cg4a90@x) (let ((cg4a92@x (cg2e82@stx-expr cg4a90@x))) (and (cg29f8@cg28ca@annotation? cg4a92@x) (cg29f9@cg28cc@annotation-source cg4a92@x)))))) (set! cg4bf1@cg3193@expression-position cg3193@expression-position) (set! cg3195@assertion-error (lambda (cg4a94@expr cg4a95@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list cg4a94@expr)) (cg318f@make-source-condition cg4a95@pos))))) (set! cg4bf2@cg3195@assertion-error cg3195@assertion-error) (set! cg3197@syntax-error (lambda (cg4a98@x . cg4a9a@args) (begin (if (not (for-all string? cg4a9a@args)) (assertion-violation 'syntax-error '"invalid argument" cg4a9a@args) (void)) (raise (condition (make-message-condition (if (null? cg4a9a@args) '"invalid syntax" (apply string-append cg4a9a@args))) (make-syntax-violation (cg31a1@syntax->datum cg4a98@x) '#f) (cg3191@extract-position-condition cg4a98@x)))))) (set! cg4bf3@cg3197@syntax-error cg3197@syntax-error) (set! cg3199@syntax-violation* (lambda (cg4a9c@who cg4a9d@msg cg4a9e@form cg4a9f@condition-object) (begin (if (not (string? cg4a9d@msg)) (assertion-violation 'syntax-violation '"message is not a string" cg4a9d@msg) (void)) (let ((cg4aa4@who (if (or (string? cg4a9c@who) (symbol? cg4a9c@who)) cg4a9c@who (if (not cg4a9c@who) (let ((cg4aa6@t cg4a9e@form)) (let ((cg4aa8@ls/false (cg30bb@syntax-dispatch cg4aa6@t 'any))) (if (and cg4aa8@ls/false (apply (lambda (cg4aaa@id) (cg2eb4@id? cg4aaa@id)) cg4aa8@ls/false)) (apply (lambda (cg4aac@id) (cg31a1@syntax->datum cg4aac@id)) cg4aa8@ls/false) (let ((cg4aae@t cg4aa6@t)) (let ((cg4ab0@ls/false (cg30bb@syntax-dispatch cg4aae@t '(any . any)))) (if (and cg4ab0@ls/false (apply (lambda (cg4ab2@id cg4ab3@rest) (cg2eb4@id? cg4ab2@id)) cg4ab0@ls/false)) (apply (lambda (cg4ab6@id cg4ab7@rest) (cg31a1@syntax->datum cg4ab6@id)) cg4ab0@ls/false) (let ((cg4aba@t cg4aae@t)) (let ((cg4abc@ls/false (cg30bb@syntax-dispatch cg4aba@t '_))) (if cg4abc@ls/false (apply (lambda () '#f) cg4abc@ls/false) (cg319b@syntax-violation '#f '"invalid syntax" cg4aba@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" cg4a9c@who))))) (raise (condition (if cg4aa4@who (make-who-condition cg4aa4@who) (condition)) (make-message-condition cg4a9d@msg) cg4a9f@condition-object (cg3191@extract-position-condition cg4a9e@form))))))) (set! cg4bf4@cg3199@syntax-violation* cg3199@syntax-violation*) (set! cg319b@syntax-violation (lambda cg4acc (let ((cg4acd (length cg4acc))) (if (= cg4acd '3) (apply (lambda (cg4abe@who cg4abf@msg cg4ac0@form) (cg319b@syntax-violation cg4abe@who cg4abf@msg cg4ac0@form '#f)) cg4acc) (if (= cg4acd '4) (apply (lambda (cg4ac4@who cg4ac5@msg cg4ac6@form cg4ac7@subform) (cg3199@syntax-violation* cg4ac4@who cg4ac5@msg cg4ac6@form (make-syntax-violation (cg31a1@syntax->datum cg4ac6@form) (cg31a1@syntax->datum cg4ac7@subform)))) cg4acc) (error #1# '"invalid arg count")))))) (set! cg4bf5@cg319b@syntax-violation cg319b@syntax-violation) (set! cg319d@identifier? (lambda (cg4ace@x) (cg2eb4@id? cg4ace@x))) (set! cg4bf6@cg319d@identifier? cg319d@identifier?) (set! cg319f@datum->syntax (lambda (cg4ad0@id cg4ad1@datum) (if (cg2eb4@id? cg4ad0@id) (cg2e94@datum->stx cg4ad0@id cg4ad1@datum) (assertion-violation 'datum->syntax '"not an identifier" cg4ad0@id)))) (set! cg4bf7@cg319f@datum->syntax cg319f@datum->syntax) (set! cg31a1@syntax->datum (lambda (cg4ad4@x) (cg2ec8@stx->datum cg4ad4@x))) (set! cg4bf8@cg31a1@syntax->datum cg31a1@syntax->datum) (set! cg31a3@ungensym-all (lambda (cg4ad6@code) (if (pair? cg4ad6@code) (cons (cg31a3@ungensym-all (car cg4ad6@code)) (cg31a3@ungensym-all (cdr cg4ad6@code))) (if (symbol? cg4ad6@code) (ungensym cg4ad6@code) cg4ad6@code)))) (set! cg4bf9@cg31a3@ungensym-all cg31a3@ungensym-all) (set! cg31a5@compile-r6rs-top-level (lambda (cg4ad8@x*) (call-with-values (lambda () (cg3133@top-level-expander cg4ad8@x*)) (lambda (cg4ade@cg4adb cg4adf@cg4add) (let ((cg4ae2@invoke-code cg4adf@cg4add) (cg4ae3@lib* cg4ade@cg4adb)) (lambda () (begin (for-each cg2cd0@cg2b1e@invoke-library cg4ae3@lib*) (let ((cg4ae6@expanded (cg2a5a@cg2a12@expanded->core cg4ae2@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (cg31a3@ungensym-all cg4ae6@expanded)) (void)) (eval-core cg4ae6@expanded)))))))))) (set! cg4bfa@cg31a5@compile-r6rs-top-level cg31a5@compile-r6rs-top-level) (set! cg31a7@pre-compile-r6rs-top-level (lambda (cg4ae8@x*) (call-with-values (lambda () (cg3133@top-level-expander cg4ae8@x*)) (lambda (cg4aee@cg4aeb cg4aef@cg4aed) (let ((cg4af2@invoke-code cg4aef@cg4aed) (cg4af3@lib* cg4aee@cg4aeb)) (begin (for-each cg2cd0@cg2b1e@invoke-library cg4af3@lib*) (cg2a02@cg28de@compile-core (cg2a5a@cg2a12@expanded->core cg4af2@invoke-code)))))))) (set! cg4bfb@cg31a7@pre-compile-r6rs-top-level cg31a7@pre-compile-r6rs-top-level) (set! cg31a9@interaction-environment (let ((cg4af6@the-env '#f)) (lambda () (or cg4af6@the-env (let ((cg4af8@lib (cg2cc9@cg2b10@find-library-by-name '(mosh interaction))) (cg4af9@rib (cg2e68@make-empty-rib))) (begin (let ((cg4afc@subst (cg2cab@cg2ad4@library-subst cg4af8@lib))) (begin (cg2e54@set-rib-sym*! cg4af9@rib (map car cg4afc@subst)) (cg2e58@set-rib-mark**! cg4af9@rib (map (lambda (cg4afe@x) cg2e38@top-mark*) cg4afc@subst)) (cg2e5c@set-rib-label*! cg4af9@rib (map cdr cg4afc@subst)))) (let ((cg4b00@env (make-simple-struct 'interaction-env '4 (list cg4af9@rib '() '())))) (begin (set! cg4af6@the-env cg4b00@env) cg4b00@env)))))))) (set! cg4bfc@cg31a9@interaction-environment cg31a9@interaction-environment) (set! cg31ab@top-level-context (cg2a04@cg28e2@make-parameter '#f)) (set! cg4bfd@cg31ab@top-level-context cg31ab@top-level-context) (cg2cc6@cg2b0a@current-library-expander cg317d@library-expander))
(begin (begin (cg2a57@cg2a0c@current-primitive-locations (lambda (cg5147@x) (let ((cg5149@t (assq cg5147@x '((syntax-error . cg4bf3@cg3197@syntax-error) (syntax-dispatch . cg4b91@cg30bb@syntax-dispatch) (load . cg4d79@cg4c24@load) (interaction-environment . cg4bfc@cg31a9@interaction-environment) (library-path . cg2cbe@cg2afa@library-path) (mosh-cache-dir . cg2a05@cg28e4@mosh-cache-dir) (make-parameter . cg2a04@cg28e2@make-parameter) (make-variable-transformer . cg4b4e@cg2ee6@make-variable-transformer) (identifier? . cg4bf6@cg319d@identifier?) (generate-temporaries . cg4bec@cg3189@generate-temporaries) (free-identifier=? . cg4bed@cg318b@free-identifier=?) (syntax->datum . cg4bf8@cg31a1@syntax->datum) (datum->syntax . cg4bf7@cg319f@datum->syntax) (bound-identifier=? . cg4bee@cg318d@bound-identifier=?) (scheme-report-environment . cg4be3@cg3177@scheme-report-environment) (null-environment . cg4be2@cg3175@null-environment) (command-line . cg4d76@cg4c1e@command-line) (eval . cg4be5@cg317b@eval) (environment . cg4be1@cg3173@environment) (syntax-violation . cg4bf5@cg319b@syntax-violation) (assertion-error . cg4bf2@cg3195@assertion-error))))) (if cg5149@t (cdr cg5149@t) '#f)))) (cg2cce@cg2b1a@install-library 'cg5124 '(mosh interaction) '() '() '() '() '(#1=(regexp? . cg50e4) #2=(alist->eq-hash-table . cg50e0) #3=(format . cg50dd) #4=(string-split . cg50d2) #5=(call-process . cg50cc) #6=(set-current-directory! . cg50c8) #7=(expand-path . cg50c7) #8=(current-directory . cg50c6) #9=(%spawn . cg50c5) #10=(%waitpid . cg50c4) #11=(simple-struct-name . cg50c3) #12=(simple-struct-set! . cg50c2) #13=(simple-struct-ref . cg50c1) #14=(make-simple-struct . cg50c0) #15=(simple-struct? . cg50bf) #16=(pointer-ref-c-int64 . cg50be) #17=(pointer-ref-c-int32 . cg50bd) #18=(pointer-ref-c-int16 . cg50bc) #19=(pointer-ref-c-int8 . cg50bb) #20=(pointer-ref-c-uint64 . cg50ba) #21=(pointer-ref-c-uint32 . cg50b9) #22=(pointer-ref-c-uint16 . cg50b8) #23=(pointer-ref-c-uint8 . cg50b7) #24=(pointer-set-c-uint64! . cg50b6) #25=(pointer-set-c-uint32! . cg50b5) #26=(pointer-set-c-uint16! . cg50b4) #27=(pointer-set-c-uint8! . cg50b3) #28=(pointer-set-c-int64! . cg50b2) #29=(pointer-set-c-int32! . cg50b1) #30=(pointer-set-c-int16! . cg50b0) #31=(pointer-set-c-int8! . cg50af) #32=(pointer-set-c-pointer! . cg50ae) #33=(pointer-set-c-double! . cg50ad) #34=(pointer-set-c-float! . cg50ac) #35=(pointer-set-c-long-long! . cg50ab) #36=(pointer-set-c-long! . cg50aa) #37=(pointer-set-c-int! . cg50a9) #38=(pointer-set-c-short! . cg50a8) #39=(pointer-set-c-char! . cg50a7) #40=(pointer-ref-c-pointer . cg50a6) #41=(pointer-ref-c-double . cg50a5) #42=(pointer-ref-c-float . cg50a4) #43=(pointer-ref-c-unsigned-long-long . cg50a3) #44=(pointer-ref-c-signed-long-long . cg50a2) #45=(pointer-ref-c-unsigned-long . cg50a1) #46=(pointer-ref-c-signed-long . cg50a0) #47=(pointer-ref-c-unsigned-int . cg509f) #48=(pointer-ref-c-signed-int . cg509e) #49=(pointer-ref-c-unsigned-short . cg509d) #50=(pointer-ref-c-signed-short . cg509c) #51=(pointer-ref-c-unsigned-char . cg509b) #52=(pointer-ref-c-signed-char . cg509a) #53=(pointer->integer . cg5099) #54=(integer->pointer . cg5098) #55=(pointer? . cg5097) #56=(shared-errno . cg5096) #57=(%ffi-supported? . cg5091) #58=(%ffi-pointer->string . cg5090) #59=(%ffi-call . cg508f) #60=(%ffi-lookup . cg508e) #61=(%ffi-open . cg508d) #62=(null-terminated-utf8->string . cg508c) #63=(null-terminated-bytevector->string . cg508b) #64=(%exec . cg508a) #65=(%fork . cg5089) #66=(%pipe . cg5088) #67=(p . cg5087) #68=(whereis . cg506b) #69=(register . cg506a) #70=(vm-join! . cg5069) #71=(vm-set-value! . cg5068) #72=(vm? . cg5067) #73=(main-vm? . cg5066) #74=(vm-eval . cg5065) #75=(vm-self . cg5064) #76=(vm-start! . cg5063) #77=(make-vm . cg5062) #78=(mutex-try-lock! . cg5061) #79=(mutex-unlock! . cg5060) #80=(mutex-lock! . cg505f) #81=(mutex? . cg505e) #82=(make-mutex . cg505d) #83=(condition-variable-notify-all! . cg505c) #84=(condition-variable-notify! . cg505b) #85=(condition-variable-wait! . cg505a) #86=(make-condition-variable . cg5059) #87=(string-upcase . cg5041) #88=(string-titlecase . cg5040) #89=(string-normalize-nfkd . cg503f) #90=(string-normalize-nfkc . cg503e) #91=(string-normalize-nfd . cg503d) #92=(string-normalize-nfc . cg503c) #93=(string-foldcase . cg503b) #94=(string-downcase . cg503a) #95=(string-ci>? . cg5039) #96=(string-ci>=? . cg5038) #97=(string-ci=? . cg5037) #98=(string-ci<? . cg5036) #99=(string-ci<=? . cg5035) #100=(char-whitespace? . cg5034) #101=(char-upper-case? . cg5033) #102=(char-title-case? . cg5032) #103=(char-numeric? . cg5031) #104=(char-lower-case? . cg5030) #105=(char-general-category . cg502f) #106=(char-upcase . cg502e) #107=(char-titlecase . cg502d) #108=(char-foldcase . cg502c) #109=(char-downcase . cg502b) #110=(char-ci>? . cg502a) #111=(char-ci>=? . cg5029) #112=(char-ci=? . cg5028) #113=(char-ci<? . cg5027) #114=(char-ci<=? . cg5026) #115=(char-alphabetic? . cg5025) #116=(make-variable-transformer . cg2ee5) #117=(identifier? . cg319c) #118=(generate-temporaries . cg3188) #119=(free-identifier=? . cg318a) #120=(syntax->datum . cg31a0) #121=(datum->syntax . cg319e) #122=(bound-identifier=? . cg318c) #123=(record-type-descriptor? . cg5024) #124=(record-predicate . cg5023) #125=(record-mutator . cg5022) #126=(record-constructor . cg5021) #127=(record-accessor . cg5020) #128=(make-record-type-descriptor . cg501f) #129=(make-record-constructor-descriptor . cg501e) #130=(record? . cg501d) #131=(record-type-uid . cg501c) #132=(record-type-sealed? . cg501b) #133=(record-type-parent . cg501a) #134=(record-type-opaque? . cg5019) #135=(record-type-name . cg5018) #136=(record-type-generative? . cg5017) #137=(record-type-field-names . cg5016) #138=(record-rtd . cg5015) #139=(record-field-mutable? . cg5014) #140=(delete-file . cg5013) #141=(file-exists? . cg5012) #142=(vector-sort! . cg5011) #143=(vector-sort . cg5010) #144=(list-sort . cg500f) #145=(symbol-hash . cg500e) #146=(string-ci-hash . cg500d) #147=(string-hash . cg500c) #148=(equal-hash . cg500b) #149=(hashtable-equivalence-function . cg500a) #150=(make-hashtable . cg5009) #151=(hashtable-hash-function . cg5008) #152=(make-eqv-hashtable . cg5007) #153=(make-eq-hashtable . cg5006) #154=(hashtable? . cg5005) #155=(hashtable-update! . cg5004) #156=(hashtable-size . cg5003) #157=(hashtable-set! . cg5002) #158=(hashtable-ref . cg5001) #159=(hashtable-mutable? . cg5000) #160=(hashtable-keys . cg4fff) #161=(hashtable-entries . cg4ffe) #162=(hashtable-delete! . cg4ffd) #163=(hashtable-copy . cg4ffc) #164=(hashtable-contains? . cg4ffb) #165=(hashtable-clear! . cg4ffa) #166=(call-with-output-file . cg4ff9) #167=(call-with-input-file . cg4ff8) #168=(write-char . cg4ff7) #169=(write . cg4ff6) #170=(with-output-to-file . cg4ff5) #171=(with-input-from-file . cg4ff4) #172=(read-char . cg4ff3) #173=(read . cg4ff2) #174=(peek-char . cg4ff1) #175=(open-output-file . cg4ff0) #176=(open-input-file . cg4fef) #177=(newline . cg4fee) #178=(display . cg4fed) #179=(close-output-port . cg4fec) #180=(close-input-port . cg4feb) #181=(eof-object? . cg4fea) #182=(eof-object . cg4fe9) #183=(current-error-port . cg4fe8) #184=(current-output-port . cg4fe7) #185=(current-input-port . cg4fe6) #186=(output-port? . cg4fe5) #187=(input-port? . cg4fe4) #188=(utf-8-codec . cg4fe3) #189=(utf-16-codec . cg4fe2) #190=(transcoder-error-handling-mode . cg4fe1) #191=(transcoder-eol-style . cg4fe0) #192=(transcoder-codec . cg4fdf) #193=(transcoded-port . cg4fde) #194=(textual-port? . cg4fdd) #195=(string->bytevector . cg4fdc) #196=(standard-output-port . cg4fdb) #197=(standard-input-port . cg4fda) #198=(standard-error-port . cg4fd9) #199=(set-port-position! . cg4fd8) #200=(put-u8 . cg4fd7) #201=(put-string . cg4fd6) #202=(put-datum . cg4fd5) #203=(put-char . cg4fd4) #204=(put-bytevector . cg4fd3) #205=(port? . cg4fd2) #206=(port-transcoder . cg4fd1) #207=(port-position . cg4fd0) #208=(port-has-set-port-position!? . cg4fcf) #209=(port-has-port-position? . cg4fce) #210=(port-eof? . cg4fcd) #211=(output-port-buffer-mode . cg4fcc) #212=(open-string-output-port . cg4fcb) #213=(open-string-input-port . cg4fca) #214=(open-file-output-port . cg4fc9) #215=(open-file-input/output-port . cg4fc8) #216=(open-file-input-port . cg4fc7) #217=(open-bytevector-output-port . cg4fc6) #218=(open-bytevector-input-port . cg4fc5) #219=(native-transcoder . cg4fc4) #220=(native-eol-style . cg4fc3) #221=(make-transcoder . cg4fc2) #222=(latin-1-codec . cg4fc1) #223=(make-i/o-write-error . cg4fc0) #224=(make-i/o-read-error . cg4fbf) #225=(make-i/o-port-error . cg4fbe) #226=(make-i/o-invalid-position-error . cg4fbd) #227=(make-i/o-filename-error . cg4fbc) #228=(make-i/o-file-protection-error . cg4fbb) #229=(make-i/o-file-is-read-only-error . cg4fba) #230=(make-i/o-file-does-not-exist-error . cg4fb9) #231=(make-i/o-file-already-exists-error . cg4fb8) #232=(make-i/o-error . cg4fb7) #233=(make-i/o-encoding-error . cg4fb6) #234=(make-i/o-decoding-error . cg4fb5) #235=(make-custom-textual-output-port . cg4fb4) #236=(make-custom-textual-input/output-port . cg4fb3) #237=(make-custom-textual-input-port . cg4fb2) #238=(make-custom-binary-output-port . cg4fb1) #239=(make-custom-binary-input/output-port . cg4fb0) #240=(make-custom-binary-input-port . cg4faf) #241=(make-bytevector . cg4fae) #242=(lookahead-u8 . cg4fad) #243=(lookahead-char . cg4fac) #244=(i/o-write-error? . cg4fab) #245=(i/o-read-error? . cg4faa) #246=(i/o-port-error? . cg4fa9) #247=(i/o-invalid-position-error? . cg4fa8) #248=(i/o-filename-error? . cg4fa7) #249=(i/o-file-protection-error? . cg4fa6) #250=(i/o-file-is-read-only-error? . cg4fa5) #251=(i/o-file-does-not-exist-error? . cg4fa4) #252=(i/o-file-already-exists-error? . cg4fa3) #253=(i/o-error? . cg4fa2) #254=(i/o-error-position . cg4fa1) #255=(i/o-error-port . cg4fa0) #256=(i/o-error-filename . cg4f9f) #257=(i/o-encoding-error? . cg4f9e) #258=(i/o-encoding-error-char . cg4f9d) #259=(i/o-decoding-error? . cg4f9c) #260=(get-u8 . cg4f9b) #261=(get-string-n! . cg4f9a) #262=(get-string-n . cg4f99) #263=(get-string-all . cg4f98) #264=(get-line . cg4f97) #265=(get-datum . cg4f96) #266=(get-char . cg4f95) #267=(get-bytevector-some . cg4f94) #268=(get-bytevector-n! . cg4f93) #269=(get-bytevector-n . cg4f92) #270=(get-bytevector-all . cg4f91) #271=(flush-output-port . cg4f90) #272=(close-port . cg4f8f) #273=(exit . cg4f87) #274=(command-line . cg4c1d) #275=(string-fill! . cg4f86) #276=(string-set! . cg4f85) #277=(set-cdr! . cg4f84) #278=(set-car! . cg4f83) #279=(remove . cg4f82) #280=(remv . cg4f81) #281=(remp . cg4f80) #282=(remq . cg4f7f) #283=(partition . cg4f7e) #284=(memv . cg4f7d) #285=(memq . cg4f7c) #286=(memp . cg4f7b) #287=(member . cg4f7a) #288=(exists . cg4f79) #289=(for-all . cg4f78) #290=(fold-right . cg4f77) #291=(fold-left . cg4f76) #292=(find . cg4f75) #293=(filter . cg4f74) #294=(cons* . cg4f73) #295=(assv . cg4f72) #296=(assq . cg4f71) #297=(assp . cg4f70) #298=(assoc . cg4f6f) #299=(call-with-string-output-port . cg4f6e) #300=(call-with-port . cg4f6d) #301=(call-with-bytevector-output-port . cg4f6c) #302=(bytevector->string . cg4f6b) #303=(buffer-mode? . cg4f6a) #304=(binary-port? . cg4f69) #305=(with-exception-handler . cg4f68) #306=(raise-continuable . cg4f67) #307=(raise . cg4f66) #308=(eval . cg317a) #309=(environment . cg3172) #310=(make-enumeration . cg4f65) #311=(enum-set=? . cg4f64) #312=(enum-set-universe . cg4f63) #313=(enum-set-union . cg4f62) #314=(enum-set-subset? . cg4f61) #315=(enum-set-projection . cg4f60) #316=(enum-set-member? . cg4f5f) #317=(enum-set-intersection . cg4f5e) #318=(enum-set-indexer . cg4f5d) #319=(enum-set-difference . cg4f5c) #320=(enum-set-constructor . cg4f5b) #321=(enum-set-complement . cg4f5a) #322=(enum-set->list . cg4f59) #323=(who-condition? . cg4f58) #324=(warning? . cg4f57) #325=(violation? . cg4f56) #326=(undefined-violation? . cg4f55) #327=(syntax-violation? . cg4f54) #328=(syntax-violation-subform . cg4f53) #329=(syntax-violation-form . cg4f52) #330=(syntax-violation . cg319a) #331=(simple-conditions . cg4f51) #332=(serious-condition? . cg4f50) #333=(non-continuable-violation? . cg4f4f) #334=(message-condition? . cg4f4e) #335=(make-who-condition . cg4f4d) #336=(make-warning . cg4f4c) #337=(make-violation . cg4f4b) #338=(make-undefined-violation . cg4f4a) #339=(make-syntax-violation . cg4f49) #340=(make-serious-condition . cg4f48) #341=(make-non-continuable-violation . cg4f47) #342=(make-message-condition . cg4f46) #343=(make-lexical-violation . cg4f45) #344=(make-irritants-condition . cg4f44) #345=(make-implementation-restriction-violation . cg4f43) #346=(make-error . cg4f42) #347=(make-assertion-violation . cg4f41) #348=(lexical-violation? . cg4f40) #349=(irritants-condition? . cg4f3f) #350=(implementation-restriction-violation? . cg4f3e) #351=(error? . cg4f3d) #352=(condition-who . cg4f3c) #353=(condition-predicate . cg4f3b) #354=(condition-message . cg4f3a) #355=(condition-irritants . cg4f39) #356=(condition-accessor . cg4f38) #357=(condition . cg4f37) #358=(assertion-violation? . cg4f36) #359=(condition? . cg4f35) #360=(utf32->string . cg4f34) #361=(utf16->string . cg4f33) #362=(utf8->string . cg4f32) #363=(uint-list->bytevector . cg4f31) #364=(u8-list->bytevector . cg4f30) #365=(string->utf8 . cg4f2f) #366=(string->utf32 . cg4f2e) #367=(string->utf16 . cg4f2d) #368=(sint-list->bytevector . cg4f2c) #369=(native-endianness . cg4f2b) #370=(bytevector? . cg4f2a) #371=(bytevector=? . cg4f29) #372=(bytevector-uint-set! . cg4f28) #373=(bytevector-uint-ref . cg4f27) #374=(bytevector-u8-set! . cg4f26) #375=(bytevector-u8-ref . cg4f25) #376=(bytevector-u64-set! . cg4f24) #377=(bytevector-u64-ref . cg4f23) #378=(bytevector-u64-native-set! . cg4f22) #379=(bytevector-u64-native-ref . cg4f21) #380=(bytevector-u32-set! . cg4f20) #381=(bytevector-u32-ref . cg4f1f) #382=(bytevector-u32-native-set! . cg4f1e) #383=(bytevector-u32-native-ref . cg4f1d) #384=(bytevector-u16-set! . cg4f1c) #385=(bytevector-u16-ref . cg4f1b) #386=(bytevector-u16-native-set! . cg4f1a) #387=(bytevector-u16-native-ref . cg4f19) #388=(bytevector-sint-set! . cg4f18) #389=(bytevector-sint-ref . cg4f17) #390=(bytevector-s8-set! . cg4f16) #391=(bytevector-s8-ref . cg4f15) #392=(bytevector-s64-set! . cg4f14) #393=(bytevector-s64-ref . cg4f13) #394=(bytevector-s64-native-set! . cg4f12) #395=(bytevector-s64-native-ref . cg4f11) #396=(bytevector-s32-set! . cg4f10) #397=(bytevector-s32-ref . cg4f0f) #398=(bytevector-s32-native-set! . cg4f0e) #399=(bytevector-s32-native-ref . cg4f0d) #400=(bytevector-s16-set! . cg4f0c) #401=(bytevector-s16-ref . cg4f0b) #402=(bytevector-s16-native-set! . cg4f0a) #403=(bytevector-s16-native-ref . cg4f09) #404=(bytevector-length . cg4f08) #405=(bytevector-ieee-single-ref . cg4f07) #406=(bytevector-ieee-single-set! . cg4f06) #407=(bytevector-ieee-single-native-set! . cg4f05) #408=(bytevector-ieee-single-native-ref . cg4f04) #409=(bytevector-ieee-double-set! . cg4f03) #410=(bytevector-ieee-double-ref . cg4f02) #411=(bytevector-ieee-double-native-set! . cg4f01) #412=(bytevector-ieee-double-native-ref . cg4f00) #413=(bytevector-fill! . cg4eff) #414=(bytevector-copy! . cg4efe) #415=(bytevector-copy . cg4efd) #416=(bytevector->uint-list . cg4efc) #417=(bytevector->u8-list . cg4efb) #418=(bytevector->sint-list . cg4efa) #419=(no-nans-violation? . cg4ef9) #420=(no-infinities-violation? . cg4ef8) #421=(make-no-nans-violation . cg4ef7) #422=(make-no-infinities-violation . cg4ef6) #423=(real->flonum . cg4ef5) #424=(flzero? . cg4ef4) #425=(fltruncate . cg4ef3) #426=(fltan . cg4ef2) #427=(flsqrt . cg4ef1) #428=(flsin . cg4ef0) #429=(flround . cg4eef) #430=(flpositive? . cg4eee) #431=(flonum? . cg4eed) #432=(flodd? . cg4eec) #433=(flnumerator . cg4eeb) #434=(flnegative? . cg4eea) #435=(flnan? . cg4ee9) #436=(flmod0 . cg4ee8) #437=(flmod . cg4ee7) #438=(flmin . cg4ee6) #439=(flmax . cg4ee5) #440=(fllog . cg4ee4) #441=(flinteger? . cg4ee3) #442=(flinfinite? . cg4ee2) #443=(flfloor . cg4ee1) #444=(flfinite? . cg4ee0) #445=(flexpt . cg4edf) #446=(flexp . cg4ede) #447=(fleven? . cg4edd) #448=(fldiv0-and-mod0 . cg4edc) #449=(fldiv0 . cg4edb) #450=(fldiv-and-mod . cg4eda) #451=(fldiv . cg4ed9) #452=(fldenominator . cg4ed8) #453=(flcos . cg4ed7) #454=(flceiling . cg4ed6) #455=(flatan . cg4ed5) #456=(flasin . cg4ed4) #457=(flacos . cg4ed3) #458=(flabs . cg4ed2) #459=(fl>? . cg4ed1) #460=(fl>=? . cg4ed0) #461=(fl=? . cg4ecf) #462=(fl<? . cg4ece) #463=(fl<=? . cg4ecd) #464=(fl/ . cg4ecc) #465=(fl- . cg4ecb) #466=(fl+ . cg4eca) #467=(fl* . cg4ec9) #468=(fixnum->flonum . cg4ec8) #469=(fxzero? . cg4ec7) #470=(fxxor . cg4ec6) #471=(fxrotate-bit-field . cg4ec5) #472=(fxreverse-bit-field . cg4ec4) #473=(fxpositive? . cg4ec3) #474=(fxodd? . cg4ec2) #475=(fxnot . cg4ec1) #476=(fxnegative? . cg4ec0) #477=(fxmod0 . cg4ebf) #478=(fxmod . cg4ebe) #479=(fxmin . cg4ebd) #480=(fxmax . cg4ebc) #481=(fxlength . cg4ebb) #482=(fxior . cg4eba) #483=(fxif . cg4eb9) #484=(fxfirst-bit-set . cg4eb8) #485=(fxeven? . cg4eb7) #486=(fxdiv0-and-mod0 . cg4eb6) #487=(fxdiv0 . cg4eb5) #488=(fxdiv-and-mod . cg4eb4) #489=(fxdiv . cg4eb3) #490=(fxcopy-bit-field . cg4eb2) #491=(fxcopy-bit . cg4eb1) #492=(fxbit-set? . cg4eb0) #493=(fxbit-field . cg4eaf) #494=(fxbit-count . cg4eae) #495=(fxarithmetic-shift-right . cg4ead) #496=(fxarithmetic-shift-left . cg4eac) #497=(fxarithmetic-shift . cg4eab) #498=(fxand . cg4eaa) #499=(fx>? . cg4ea9) #500=(fx>=? . cg4ea8) #501=(fx=? . cg4ea7) #502=(fx<? . cg4ea6) #503=(fx<=? . cg4ea5) #504=(fx-/carry . cg4ea4) #505=(fx- . cg4ea3) #506=(fx+/carry . cg4ea2) #507=(fx+ . cg4ea1) #508=(fx*/carry . cg4ea0) #509=(fx* . cg4e9f) #510=(greatest-fixnum . cg4e9e) #511=(least-fixnum . cg4e9d) #512=(fixnum-width . cg4e9c) #513=(fixnum? . cg4e9b) #514=(bitwise-rotate-bit-field . cg4e9a) #515=(bitwise-reverse-bit-field . cg4e99) #516=(bitwise-length . cg4e98) #517=(bitwise-if . cg4e97) #518=(bitwise-first-bit-set . cg4e96) #519=(bitwise-copy-bit-field . cg4e95) #520=(bitwise-copy-bit . cg4e94) #521=(bitwise-bit-set? . cg4e93) #522=(bitwise-bit-field . cg4e92) #523=(bitwise-bit-count . cg4e91) #524=(bitwise-xor . cg4e90) #525=(bitwise-ior . cg4e8f) #526=(bitwise-and . cg4e8e) #527=(bitwise-not . cg4e8d) #528=(bitwise-arithmetic-shift-right . cg4e8c) #529=(bitwise-arithmetic-shift-left . cg4e8b) #530=(bitwise-arithmetic-shift . cg4e8a) #531=(zero? . cg4e89) #532=(vector? . cg4e88) #533=(vector-set! . cg4e87) #534=(vector-ref . cg4e86) #535=(vector-map . cg4e85) #536=(vector-length . cg4e84) #537=(vector-for-each . cg4e83) #538=(vector-fill! . cg4e82) #539=(vector->list . cg4e81) #540=(vector . cg4e80) #541=(values . cg4e7f) #542=(truncate . cg4e7e) #543=(tan . cg4e7d) #544=(symbol? . cg4e7c) #545=(symbol=? . cg4e7b) #546=(symbol->string . cg4e7a) #547=(substring . cg4e79) #548=(string? . cg4e78) #549=(string>? . cg4e77) #550=(string>=? . cg4e76) #551=(string=? . cg4e75) #552=(string<? . cg4e74) #553=(string<=? . cg4e73) #554=(string-ref . cg4e72) #555=(string-length . cg4e71) #556=(string-for-each . cg4e70) #557=(string-copy . cg4e6f) #558=(string-append . cg4e6e) #559=(string->symbol . cg4e6d) #560=(string->number . cg4e6c) #561=(string->list . cg4e6b) #562=(string . cg4e6a) #563=(sqrt . cg4e69) #564=(sin . cg4e68) #565=(round . cg4e67) #566=(reverse . cg4e66) #567=(real? . cg4e65) #568=(real-valued? . cg4e64) #569=(real-part . cg4e63) #570=(rationalize . cg4e62) #571=(rational? . cg4e61) #572=(rational-valued? . cg4e60) #573=(procedure? . cg4e5f) #574=(positive? . cg4e5e) #575=(pair? . cg4e5d) #576=(odd? . cg4e5c) #577=(numerator . cg4e5b) #578=(number? . cg4e5a) #579=(number->string . cg4e59) #580=(null? . cg4e58) #581=(not . cg4e57) #582=(negative? . cg4e56) #583=(nan? . cg4e55) #584=(min . cg4e54) #585=(max . cg4e53) #586=(map . cg4e52) #587=(make-vector . cg4e51) #588=(make-string . cg4e50) #589=(make-rectangular . cg4e4f) #590=(make-polar . cg4e4e) #591=(magnitude . cg4e4d) #592=(log . cg4e4c) #593=(list? . cg4e4b) #594=(list-tail . cg4e4a) #595=(list-ref . cg4e49) #596=(list->vector . cg4e48) #597=(list->string . cg4e47) #598=(list . cg4e46) #599=(length . cg4e45) #600=(lcm . cg4e44) #601=(integer? . cg4e43) #602=(integer-valued? . cg4e42) #603=(integer->char . cg4e41) #604=(infinite? . cg4e40) #605=(inexact? . cg4e3f) #606=(inexact . cg4e3e) #607=(imag-part . cg4e3d) #608=(gcd . cg4e3c) #609=(for-each . cg4e3b) #610=(floor . cg4e3a) #611=(finite? . cg4e39) #612=(expt . cg4e38) #613=(exp . cg4e37) #614=(exact? . cg4e36) #615=(exact-integer-sqrt . cg4e35) #616=(exact . cg4e34) #617=(even? . cg4e33) #618=(error . cg4e32) #619=(eqv? . cg4e31) #620=(equal? . cg4e30) #621=(eq? . cg4e2f) #622=(dynamic-wind . cg4e2e) #623=(div0-and-mod0 . cg4e2d) #624=(mod0 . cg4e2c) #625=(div0 . cg4e2b) #626=(div-and-mod . cg4e2a) #627=(mod . cg4e29) #628=(div . cg4e28) #629=(denominator . cg4e27) #630=(cos . cg4e26) #631=(cons . cg4e25) #632=(complex? . cg4e24) #633=(char? . cg4e23) #634=(char>? . cg4e22) #635=(char>=? . cg4e21) #636=(char=? . cg4e20) #637=(char<? . cg4e1f) #638=(char<=? . cg4e1e) #639=(char->integer . cg4e1d) #640=(ceiling . cg4e1c) #641=(call-with-values . cg4e1b) #642=(call/cc . cg4e1a) #643=(call-with-current-continuation . cg4e19) #644=(cddddr . cg4e18) #645=(cdddar . cg4e17) #646=(cddadr . cg4e16) #647=(cddaar . cg4e15) #648=(cdaddr . cg4e14) #649=(cdadar . cg4e13) #650=(cdaadr . cg4e12) #651=(cdaaar . cg4e11) #652=(cadddr . cg4e10) #653=(caddar . cg4e0f) #654=(cadadr . cg4e0e) #655=(cadaar . cg4e0d) #656=(caaddr . cg4e0c) #657=(caadar . cg4e0b) #658=(caaadr . cg4e0a) #659=(caaaar . cg4e09) #660=(cdddr . cg4e08) #661=(cddar . cg4e07) #662=(cdadr . cg4e06) #663=(cdaar . cg4e05) #664=(caddr . cg4e04) #665=(cadar . cg4e03) #666=(caadr . cg4e02) #667=(caaar . cg4e01) #668=(cddr . cg4e00) #669=(cdar . cg4dff) #670=(cadr . cg4dfe) #671=(caar . cg4dfd) #672=(cdr . cg4dfc) #673=(car . cg4dfb) #674=(boolean? . cg4dfa) #675=(boolean=? . cg4df9) #676=(atan . cg4df8) #677=(assertion-violation . cg4df7) #678=(asin . cg4df6) #679=(apply . cg4df5) #680=(append . cg4df4) #681=(angle . cg4df3) #682=(acos . cg4df2) #683=(abs . cg4df1) #684=(/ . cg4df0) #685=(* . cg4def) #686=(- . cg4dee) #687=(+ . cg4ded) #688=(>= . cg4dec) #689=(> . cg4deb) #690=(= . cg4dea) #691=(<= . cg4de9) #692=(< . cg4de8) #693=(library . cg4de7) #694=(&no-nans . cg4de6) #695=(&no-infinities . cg4de5) #696=(&i/o-encoding . cg4de4) #697=(&i/o-decoding . cg4de3) #698=(&i/o-port . cg4de2) #699=(&i/o-file-does-not-exist . cg4de1) #700=(&i/o-file-already-exists . cg4de0) #701=(&i/o-file-is-read-only . cg4ddf) #702=(&i/o-file-protection . cg4dde) #703=(&i/o-filename . cg4ddd) #704=(&i/o-invalid-position . cg4ddc) #705=(&i/o-write . cg4ddb) #706=(&i/o-read . cg4dda) #707=(&i/o . cg4dd9) #708=(&undefined . cg4dd8) #709=(&syntax . cg4dd7) #710=(&lexical . cg4dd6) #711=(&implementation-restriction . cg4dd5) #712=(&non-continuable . cg4dd4) #713=(&who . cg4dd3) #714=(&irritants . cg4dd2) #715=(&assertion . cg4dd1) #716=(&violation . cg4dd0) #717=(&error . cg4dcf) #718=(&serious . cg4dce) #719=(&warning . cg4dcd) #720=(&message . cg4dcc) #721=(&condition . cg4dcb) #722=(define-condition-type . cg4dca) #723=(define-enumeration . cg4dc9) #724=(define-record-type . cg4dc8) #725=(parent-rtd . cg4dc7) #726=(nongenerative . cg4dc6) #727=(opaque . cg4dc5) #728=(sealed . cg4dc4) #729=(protocol . cg4dc3) #730=(parent . cg4dc2) #731=(immutable . cg4dc1) #732=(mutable . cg4dc0) #733=(fields . cg4dbf) #734=(error-handling-mode . cg4dbe) #735=(file-options . cg4dbd) #736=(buffer-mode . cg4dbc) #737=(eol-style . cg4dbb) #738=(guard . cg4dba) #739=(unsyntax-splicing . cg4db7) #740=(unsyntax . cg4db6) #741=(unquote-splicing . cg4db5) #742=(unquote . cg4db4) #743=(_ . cg4db3) #744=(else . cg4db2) #745=(=> . cg4db1) #746=(... . cg4db0) #747=(assert . cg4daf) #748=(endianness . cg4dae) #749=(time . cg4dac) #750=(do . cg4dab) #751=(cond . cg4daa) #752=(let* . cg4da9) #753=(let*-values . cg4da8) #754=(let-values . cg4da7) #755=(identifier-syntax . cg4da6) #756=(with-syntax . cg4da5) #757=(quasisyntax . cg4da4) #758=(quasiquote . cg4da3) #759=(syntax-rules . cg4da2) #760=(include . cg4da1) #761=(record-constructor-descriptor . cg4d9f) #762=(record-type-descriptor . cg4d9e) #763=(case . cg4d9d) #764=(unless . cg4d9b) #765=(when . cg4d9a) #766=(or . cg4d99) #767=(and . cg4d98) #768=(if . cg4d97) #769=(let . cg4d96) #770=(letrec* . cg4d95) #771=(letrec . cg4d94) #772=(case-lambda . cg4d92) #773=(lambda . cg4d91) #774=(syntax . cg4d90) #775=(syntax-case . cg4d8f) #776=(quote . cg4d8e) #777=(letrec-syntax . cg4d8c) #778=(let-syntax . cg4d8b) #779=(set! . cg4d8a) #780=(import . cg4d89) #781=(begin . cg4d88) #782=(define-syntax . cg4d86) #783=(define . cg4d85)) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5125 '(psyntax null-environment-5) '() '() '() '() '(#784=(make-promise . cg4f88) #741# #742# #743# #744# #745# #746# #785=(delay . cg4dad) #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5126 '(psyntax scheme-report-environment-5) '() '() '() '() '(#95# #96# #97# #98# #99# #100# #101# #103# #104# #106# #109# #110# #111# #112# #113# #114# #115# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #182# #184# #185# #186# #187# #786=(scheme-report-environment . cg3176) #787=(quotient . cg4f8e) #788=(null-environment . cg3174) #789=(remainder . cg4f8d) #790=(modulo . cg4f8c) #791=(inexact->exact . cg4f8b) #792=(force . cg4f8a) #793=(exact->inexact . cg4f89) #784# #275# #276# #277# #278# #284# #285# #287# #295# #296# #298# #308# #531# #532# #533# #534# #536# #538# #539# #540# #541# #542# #543# #544# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #569# #570# #571# #573# #574# #575# #576# #577# #578# #579# #581# #582# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #603# #605# #607# #608# #609# #610# #612# #613# #614# #617# #619# #620# #621# #622# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #676# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #744# #745# #746# #785# #750# #751# #752# #758# #759# #763# #766# #767# #768# #769# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5127 '(psyntax modules) '() '() '() '() '(#794=(module . cg4d87)) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5128 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5129 '(rnrs) '#795=(6) '() '() '() '(#1# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115# #116# #117# #118# #119# #120# #121# #122# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #141# #142# #143# #144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #274# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #761# #762# #763# #764# #765# #766# #767# #768# #769# #770# #771# #772# #773# #774# #775# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512a '(rnrs r5rs) '#795# '() '() '() '(#786# #787# #788# #789# #790# #791# #792# #793# #784# #785#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512b '(rnrs control) '#795# '() '() '() '(#750# #764# #765# #772#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512c '(rnrs eval) '#795# '() '() '() '(#308# #309#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512d '(rnrs mutable-pairs) '#795# '() '() '() '(#277# #278#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512e '(rnrs mutable-strings) '#795# '() '() '() '(#275# #276#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg512f '(rnrs programs) '#795# '() '() '() '(#273# #274#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5130 '(rnrs syntax-case) '#795# '() '() '() '(#116# #117# #118# #119# #120# #121# #122# #330# #739# #740# #743# #746# #756# #757# #774# #775#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5131 '(rnrs files) '#795# '() '() '() '(#140# #141# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5132 '(rnrs sorting) '#795# '() '() '() '(#142# #143# #144#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5133 '(rnrs base) '#795# '() '() '() '(#531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #741# #742# #743# #744# #745# #746# #747# #751# #752# #753# #754# #755# #758# #759# #763# #766# #767# #768# #769# #770# #771# #773# #776# #777# #778# #779# #781# #782# #783#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5134 '(rnrs lists) '#795# '() '() '() '(#279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5135 '(rnrs io simple) '#795# '() '() '() '(#166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5136 '(rnrs bytevectors) '#795# '() '() '() '(#241# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #748#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5137 '(rnrs unicode) '#795# '() '() '() '(#87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5138 '(rnrs exceptions) '#795# '() '() '() '(#305# #306# #307# #738# #744# #745#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5139 '(rnrs arithmetic bitwise) '#795# '() '() '() '(#514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513a '(rnrs arithmetic fixnums) '#795# '() '() '() '(#469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513b '(rnrs arithmetic flonums) '#795# '() '() '() '(#419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #694# #695#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513c '(rnrs hashtables) '#795# '() '() '() '(#145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513d '(rnrs io ports) '#795# '() '() '() '(#181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #299# #300# #301# #302# #303# #304# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #734# #735# #736# #737#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513e '(rnrs enums) '#795# '() '() '() '(#310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #723#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg513f '(rnrs conditions) '#795# '() '() '() '(#323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5140 '(rnrs records inspection) '#795# '() '() '() '(#130# #131# #132# #133# #134# #135# #136# #137# #138# #139#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5141 '(rnrs records procedural) '#795# '() '() '() '(#123# #124# #125# #126# #127# #128# #129#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5142 '(rnrs records syntactic) '#795# '() '() '() '(#724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #761# #762#) '() values values '#f '#f '#t '#f) (cg2cce@cg2b1a@install-library 'cg5143 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . cg5123) (&no-nans-rtd . cg5122) (&no-infinities-rcd . cg5121) (&no-infinities-rtd . cg5120) (&i/o-encoding-rcd . cg511f) (&i/o-encoding-rtd . cg511e) (&i/o-decoding-rcd . cg511d) (&i/o-decoding-rtd . cg511c) (&i/o-port-rcd . cg511b) (&i/o-port-rtd . cg511a) (&i/o-file-does-not-exist-rcd . cg5119) (&i/o-file-does-not-exist-rtd . cg5118) (&i/o-file-already-exists-rcd . cg5117) (&i/o-file-already-exists-rtd . cg5116) (&i/o-file-is-read-only-rcd . cg5115) (&i/o-file-is-read-only-rtd . cg5114) (&i/o-file-protection-rcd . cg5113) (&i/o-file-protection-rtd . cg5112) (&i/o-filename-rcd . cg5111) (&i/o-filename-rtd . cg5110) (&i/o-invalid-position-rcd . cg510f) (&i/o-invalid-position-rtd . cg510e) (&i/o-write-rcd . cg510d) (&i/o-write-rtd . cg510c) (&i/o-read-rcd . cg510b) (&i/o-read-rtd . cg510a) (&i/o-rcd . cg5109) (&i/o-rtd . cg5108) (&undefined-rcd . cg5107) (&undefined-rtd . cg5106) (&syntax-rcd . cg5105) (&syntax-rtd . cg5104) (&lexical-rcd . cg5103) (&lexical-rtd . cg5102) (&implementation-restriction-rcd . cg5101) (&implementation-restriction-rtd . cg5100) (&non-continuable-rcd . cg50ff) (&non-continuable-rtd . cg50fe) (&who-rcd . cg50fd) (&who-rtd . cg50fc) (&irritants-rcd . cg50fb) (&irritants-rtd . cg50fa) (&assertion-rcd . cg50f9) (&assertion-rtd . cg50f8) (&violation-rcd . cg50f7) (&violation-rtd . cg50f6) (&error-rcd . cg50f5) (&error-rtd . cg50f4) (&serious-rcd . cg50f3) (&serious-rtd . cg50f2) (&warning-rcd . cg50f1) (&warning-rtd . cg50f0) (&message-rcd . cg50ef) (&message-rtd . cg50ee) (&condition-rcd . cg50ed) (&condition-rtd . cg50ec) (syntax-error . cg3196) (syntax-dispatch . cg30ba) #796=(pretty-print . cg50eb) #797=(eval-core . cg50ea) #798=(set-symbol-value! . cg50e9) #799=(symbol-value . cg50e8) #800=(gensym . cg50e7) #801=(void . cg50e6) (load . cg4c23) (interaction-environment . cg31a8) (char-ready? . cg50e5) #1# #802=(read-line . cg50e3) #803=(gensym-prefix-set! . cg50e2) #804=(ungensym . cg50e1) #2# #805=(assoc-ref . cg50df) #806=(print . cg50de) #3# #807=(host-os . cg50dc) #808=(library-path . cg2af9) #809=(standard-library-path . cg50db) #810=(file-newer? . cg50da) #811=(stat-mtime . cg50d9) #812=(write-to-file . cg50d8) #813=(file->list . cg50d7) #814=(file->string . cg50d6) #815=(digit->integer . cg50d5) #816=(call-with-string-input-port . cg50d4) #817=(call-with-string-io . cg50d3) #4# #818=(bytevector-for-each . cg50d1) #819=(string->regexp . cg50d0) #820=(rxmatch . cg50cf) #821=(regexp-replace-all . cg50ce) #822=(hashtable-for-each . cg50cd) #823=(mosh-cache-dir . cg28e3) #5# #824=(local-tz-offset . cg50cb) #825=(microseconds . cg50ca) #826=(directory-list . cg50c9) #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827=(%ffi-free-c-callback-trampoline . cg5095) #828=(%ffi-make-c-callback-trampoline . cg5094) #829=(%ffi-free . cg5093) #830=(%ffi-malloc . cg5092) #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #67# #831=(open-output-string . cg5086) #832=(get-output-string . cg5085) #833=(file-stat-ctime . cg5084) #834=(file-stat-atime . cg5083) #835=(file-stat-mtime . cg5082) #836=(file-size-in-bytes . cg5081) #837=(file-writable? . cg5080) #838=(file-executable? . cg507f) #839=(file-readable? . cg507e) #840=(file-regular? . cg507d) #841=(file-symbolic-link? . cg507c) #842=(file-directory? . cg507b) #843=(create-symbolic-link . cg507a) #844=(rename-file . cg5079) #845=(delete-directory . cg5078) #846=(create-directory . cg5077) #847=(create-mosh-cache-dir . cg5076) #848=(get-environment-variables . cg5075) #849=(current-exception-handler . cg5074) #850=(get-environment-variable . cg5073) #851=(join-wraps . cg5072) #852=(id->real-label . cg5071) #853=(same-marks? . cg5070) #854=(same-marks*? . cg506f) #855=(get-timeofday . cg506e) #856=(get-command-line . cg506d) #857=(sys-display . cg506c) #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858=(mosh-executable-path . cg5058) #859=(make-file-options . cg5057) #860=(source-info . cg5056) #861=(make-compiler-instruction . cg5055) #862=(make-instruction . cg5054) #863=(set-source-info! . cg5053) #864=(bignum? . cg5052) #865=(fast-equal? . cg5051) #866=(fasl-read . cg5050) #867=(fasl-write . cg504f) #868=(time-usage . cg504e) #869=(os-constant . cg504d) #870=(disasm . cg504c) #871=(make-parameter . cg28e1) #872=(socket-port . cg504b) #873=(socket-shutdown . cg504a) #874=(socket-close . cg5049) #875=(socket-send . cg5048) #876=(socket-recv! . cg5047) #877=(socket-recv . cg5046) #878=(make-server-socket . cg5045) #879=(make-client-socket . cg5044) #880=(socket-accept . cg5043) #881=(socket? . cgassertion-error . cg3194) #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# (trace-define . cg4db9) (trace-lambda . cg4db8) #739# #740# #741# #742# #743# #744# #745# #746# #747# #748# #785# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# #760# (define-struct . cg4da0) #761# #762# #763# #882=(parameterize . cg4d9c) #764# #765# #766# #767# #768# #769# #770# #771# (type-descriptor . cg4d93) #772# #773# #774# #775# #776# (foreign-call . cg4d8d) #777# #778# #779# #780# #781# #794# #782# #783#) '((cg5123 core-prim . &no-nans-rcd) (cg5122 core-prim . &no-nans-rtd) (cg5121 core-prim . &no-infinities-rcd) (cg5120 core-prim . &no-infinities-rtd) (cg511f core-prim . &i/o-encoding-rcd) (cg511e core-prim . &i/o-encoding-rtd) (cg511d core-prim . &i/o-decoding-rcd) (cg511c core-prim . &i/o-decoding-rtd) (cg511b core-prim . &i/o-port-rcd) (cg511a core-prim . &i/o-port-rtd) (cg5119 core-prim . &i/o-file-does-not-exist-rcd) (cg5118 core-prim . &i/o-file-does-not-exist-rtd) (cg5117 core-prim . &i/o-file-already-exists-rcd) (cg5116 core-prim . &i/o-file-already-exists-rtd) (cg5115 core-prim . &i/o-file-is-read-only-rcd) (cg5114 core-prim . &i/o-file-is-read-only-rtd) (cg5113 core-prim . &i/o-file-protection-rcd) (cg5112 core-prim . &i/o-file-protection-rtd) (cg5111 core-prim . &i/o-filename-rcd) (cg5110 core-prim . &i/o-filename-rtd) (cg510f core-prim . &i/o-invalid-position-rcd) (cg510e core-prim . &i/o-invalid-position-rtd) (cg510d core-prim . &i/o-write-rcd) (cg510c core-prim . &i/o-write-rtd) (cg510b core-prim . &i/o-read-rcd) (cg510a core-prim . &i/o-read-rtd) (cg5109 core-prim . &i/o-rcd) (cg5108 core-prim . &i/o-rtd) (cg5107 core-prim . &undefined-rcd) (cg5106 core-prim . &undefined-rtd) (cg5105 core-prim . &syntax-rcd) (cg5104 core-prim . &syntax-rtd) (cg5103 core-prim . &lexical-rcd) (cg5102 core-prim . &lexical-rtd) (cg5101 core-prim . &implementation-restriction-rcd) (cg5100 core-prim . &implementation-restriction-rtd) (cg50ff core-prim . &non-continuable-rcd) (cg50fe core-prim . &non-continuable-rtd) (cg50fd core-prim . &who-rcd) (cg50fc core-prim . &who-rtd) (cg50fb core-prim . &irritants-rcd) (cg50fa core-prim . &irritants-rtd) (cg50f9 core-prim . &assertion-rcd) (cg50f8 core-prim . &assertion-rtd) (cg50f7 core-prim . &violation-rcd) (cg50f6 core-prim . &violation-rtd) (cg50f5 core-prim . &error-rcd) (cg50f4 core-prim . &error-rtd) (cg50f3 core-prim . &serious-rcd) (cg50f2 core-prim . &serious-rtd) (cg50f1 core-prim . &warning-rcd) (cg50f0 core-prim . &warning-rtd) (cg50ef core-prim . &message-rcd) (cg50ee core-prim . &message-rtd) (cg50ed core-prim . &condition-rcd) (cg50ec core-prim . &condition-rtd) (cg3196 core-prim . syntax-error) (cg30ba core-prim . syntax-dispatch) (cg50eb core-prim . pretty-print) (cg50ea core-prim . eval-core) (cg50e9 core-prim . set-symbol-value!) (cg50e8 core-prim . symbol-value) (cg50e7 core-prim . gensym) (cg50e6 core-prim . void) (cg4c23 core-prim . load) (cg31a8 core-prim . interaction-environment) (cg50e5 core-prim . char-ready?) (cg50e4 core-prim . regexp?) (cg50e3 core-prim . read-line) (cg50e2 core-prim . gensym-prefix-set!) (cg50e1 core-prim . ungensym) (cg50e0 core-prim . alist->eq-hash-table) (cg50df core-prim . assoc-ref) (cg50de core-prim . print) (cg50dd core-prim . format) (cg50dc core-prim . host-os) (cg2af9 core-prim . library-path) (cg50db core-prim . standard-library-path) (cg50da core-prim . file-newer?) (cg50d9 core-prim . stat-mtime) (cg50d8 core-prim . write-to-file) (cg50d7 core-prim . file->list) (cg50d6 core-prim . file->string) (cg50d5 core-prim . digit->integer) (cg50d4 core-prim . call-with-string-input-port) (cg50d3 core-prim . call-with-string-io) (cg50d2 core-prim . string-split) (cg50d1 core-prim . bytevector-for-each) (cg50d0 core-prim . string->regexp) (cg50cf core-prim . rxmatch) (cg50ce core-prim . regexp-replace-all) (cg50cd core-prim . hashtable-for-each) (cg28e3 core-prim . mosh-cache-dir) (cg50cc core-prim . call-process) (cg50cb core-prim . local-tz-offset) (cg50ca core-prim . microseconds) (cg50c9 core-prim . directory-list) (cg50c8 core-prim . set-current-directory!) (cg50c7 core-prim . expand-path) (cg50c6 core-prim . current-directory) (cg50c5 core-prim . %spawn) (cg50c4 core-prim . %waitpid) (cg50c3 core-prim . simple-struct-name) (cg50c2 core-prim . simple-struct-set!) (cg50c1 core-prim . simple-struct-ref) (cg50c0 core-prim . make-simple-struct) (cg50bf core-prim . simple-struct?) (cg50be core-prim . pointer-ref-c-int64) (cg50bd core-prim . pointer-ref-c-int32) (cg50bc core-prim . pointer-ref-c-int16) (cg50bb core-prim . pointer-ref-c-int8) (cg50ba core-prim . pointer-ref-c-uint64) (cg50b9 core-prim . pointer-ref-c-uint32) (cg50b8 core-prim . pointer-ref-c-uint16) (cg50b7 core-prim . pointer-ref-c-uint8) (cg50b6 core-prim . pointer-set-c-uint64!) (cg50b5 core-prim . pointer-set-c-uint32!) (cg50b4 core-prim . pointer-set-c-uint16!) (cg50b3 core-prim . pointer-set-c-uint8!) (cg50b2 core-prim . pointer-set-c-int64!) (cg50b1 core-prim . pointer-set-c-int32!) (cg50b0 core-prim . pointer-set-c-int16!) (cg50af core-prim . pointer-set-c-int8!) (cg50ae core-prim . pointer-set-c-pointer!) (cg50ad core-prim . pointer-set-c-double!) (cg50ac core-prim . pointer-set-c-float!) (cg50ab core-prim . pointer-set-c-long-long!) (cg50aa core-prim . pointer-set-c-long!) (cg50a9 core-prim . pointer-set-c-int!) (cg50a8 core-prim . pointer-set-c-short!) (cg50a7 core-prim . pointer-set-c-char!) (cg50a6 core-prim . pointer-ref-c-pointer) (cg50a5 core-prim . pointer-ref-c-double) (cg50a4 core-prim . pointer-ref-c-float) (cg50a3 core-prim . pointer-ref-c-unsigned-long-long) (cg50a2 core-prim . pointer-ref-c-signed-long-long) (cg50a1 core-prim . pointer-ref-c-unsigned-long) (cg50a0 core-prim . pointer-ref-c-signed-long) (cg509f core-prim . pointer-ref-c-unsigned-int) (cg509e core-prim . pointer-ref-c-signed-int) (cg509d core-prim . pointer-ref-c-unsigned-short) (cg509c core-prim . pointer-ref-c-signed-short) (cg509b core-prim . pointer-ref-c-unsigned-char) (cg509a core-prim . pointer-ref-c-signed-char) (cg5099 core-prim . pointer->integer) (cg5098 core-prim . integer->pointer) (cg5097 core-prim . pointer?) (cg5096 core-prim . shared-errno) (cg5095 core-prim . %ffi-free-c-callback-trampoline) (cg5094 core-prim . %ffi-make-c-callback-trampoline) (cg5093 core-prim . %ffi-free) (cg5092 core-prim . %ffi-malloc) (cg5091 core-prim . %ffi-supported?) (cg5090 core-prim . %ffi-pointer->string) (cg508f core-prim . %ffi-call) (cg508e core-prim . %ffi-lookup) (cg508d core-prim . %ffi-open) (cg508c core-prim . null-terminated-utf8->string) (cg508b core-prim . null-terminated-bytevector->string) (cg508a core-prim . %exec) (cg5089 core-prim . %fork) (cg5088 core-prim . %pipe) (cg5087 core-prim . p) (cg5086 core-prim . open-output-string) (cg5085 core-prim . get-output-string) (cg5084 core-prim . file-stat-ctime) (cg5083 core-prim . file-stat-atime) (cg5082 core-prim . file-stat-mtime) (cg5081 core-prim . file-size-in-bytes) (cg5080 core-prim . file-writable?) (cg507f core-prim . file-executable?) (cg507e core-prim . file-readable?) (cg507d core-prim . file-regular?) (cg507c core-prim . file-symbolic-link?) (cg507b core-prim . file-directory?) (cg507a core-prim . create-symbolic-link) (cg5079 core-prim . rename-file) (cg5078 core-prim . delete-directory) (cg5077 core-prim . create-directory) (cg5076 core-prim . create-mosh-cache-dir) (cg5075 core-prim . get-environment-variables) (cg5074 core-prim . current-exception-handler) (cg5073 core-prim . get-environment-variable) (cg5072 core-prim . join-wraps) (cg5071 core-prim . id->real-label) (cg5070 core-prim . same-marks?) (cg506f core-prim . same-marks*?) (cg506e core-prim . get-timeofday) (cg506d core-prim . get-command-line) (cg506c core-prim . sys-display) (cg506b core-prim . whereis) (cg506a core-prim . register) (cg5069 core-prim . vm-join!) (cg5068 core-prim . vm-set-value!) (cg5067 core-prim . vm?) (cg5066 core-prim . main-vm?) (cg5065 core-prim . vm-eval) (cg5064 core-prim . vm-self) (cg5063 core-prim . vm-start!) (cg5062 core-prim . make-vm) (cg5061 core-prim . mutex-try-lock!) (cg5060 core-prim . mutex-unlock!) (cg505f core-prim . mutex-lock!) (cg505e core-prim . mutex?) (cg505d core-prim . make-mutex) (cg505c core-prim . condition-variable-notify-all!) (cg505b core-prim . condition-variable-notify!) (cg505a core-prim . condition-variable-wait!) (cg5059 core-prim . make-condition-variable) (cg5058 core-prim . mosh-executable-path) (cg5057 core-prim . make-file-options) (cg5056 core-prim . source-info) (cg5055 core-prim . make-compiler-instruction) (cg5054 core-prim . make-instruction) (cg5053 core-prim . set-source-info!) (cg5052 core-prim . bignum?) (cg5051 core-prim . fast-equal?) (cg5050 core-prim . fasl-read) (cg504f core-prim . fasl-write) (cg504e core-prim . time-usage) (cg504d core-prim . os-constant) (cg504c core-prim . disasm) (cg28e1 core-prim . make-parameter) (cg504b core-prim . socket-port) (cg504a core-prim . socket-shutdown) (cg5049 core-prim . socket-close) (cg5048 core-prim . socket-send) (cg5047 core-prim . socket-recv!) (cg5046 core-prim . socket-recv) (cg5045 core-prim . make-server-socket) (cg5044 core-prim . make-client-socket) (cg5043 core-prim . socket-accept) (cg5042 core-prim . socket?) (cg5041 core-prim . string-upcase) (cg5040 core-prim . string-titlecase) (cg503f core-prim . string-normalize-nfkd) (cg503e core-prim . string-normalize-nfkc) (cg503d core-prim . string-normalize-nfd) (cg503c core-prim . string-normalize-nfc) (cg503b core-prim . string-foldcase) (cg503a core-prim . string-downcase) (cg5039 core-prim . string-ci>?) (cg5038 core-prim . string-ci>=?) (cg5037 core-prim . string-ci=?) (cg5036 core-prim . string-ci<?) (cg5035 core-prim . string-ci<=?) (cg5034 core-prim . char-whitespace?) (cg5033 core-prim . char-upper-case?) (cg5032 core-prim . char-title-case?) (cg5031 core-prim . char-numeric?) (cg5030 core-prim . char-lower-case?) (cg502f core-prim . char-general-category) (cg502e core-prim . char-upcase) (cg502d core-prim . char-titlecase) (cg502c core-prim . char-foldcase) (cg502b core-prim . char-downcase) (cg502a core-prim . char-ci>?) (cg5029 core-prim . char-ci>=?) (cg5028 core-prim . char-ci=?) (cg5027 core-prim . char-ci<?) (cg5026 core-prim . char-ci<=?) (cg5025 core-prim . char-alphabetic?) (cg2ee5 core-prim . make-variable-transformer) (cg319c core-prim . identifier?) (cg3188 core-prim . generate-temporaries) (cg318a core-prim . free-identifier=?) (cg31a0 core-prim . syntax->datum) (cg319e core-prim . datum->syntax) (cg318c core-prim . bound-identifier=?) (cg5024 core-prim . record-type-descriptor?) (cg5023 core-prim . record-predicate) (cg5022 core-prim . record-mutator) (cg5021 core-prim . record-constructor) (cg5020 core-prim . record-accessor) (cg501f core-prim . make-record-type-descriptor) (cg501e core-prim . make-record-constructor-descriptor) (cg501d core-prim . record?) (cg501c core-prim . record-type-uid) (cg501b core-prim . record-type-sealed?) (cg501a core-prim . record-type-parent) (cg5019 core-prim . record-type-opaque?) (cg5018 core-prim . record-type-name) (cg5017 core-prim . record-type-generative?) (cg5016 core-prim . record-type-field-names) (cg5015 core-prim . record-rtd) (cg5014 core-prim . record-field-mutable?) (cg5013 core-prim . delete-file) (cg5012 core-prim . file-exists?) (cg5011 core-prim . vector-sort!) (cg5010 core-prim . vector-sort) (cg500f core-prim . list-sort) (cg500e core-prim . symbol-hash) (cg500d core-prim . string-ci-hash) (cg500c core-prim . string-hash) (cg500b core-prim . equal-hash) (cg500a core-prim . hashtable-equivalence-function) (cg5009 core-prim . make-hashtable) (cg5008 core-prim . hashtable-hash-function) (cg5007 core-prim . make-eqv-hashtable) (cg5006 core-prim . make-eq-hashtable) (cg5005 core-prim . hashtable?) (cg5004 core-prim . hashtable-update!) (cg5003 core-prim . hashtable-size) (cg5002 core-prim . hashtable-set!) (cg5001 core-prim . hashtable-ref) (cg5000 core-prim . hashtable-mutable?) (cg4fff core-prim . hashtable-keys) (cg4ffe core-prim . hashtable-entries) (cg4ffd core-prim . hashtable-delete!) (cg4ffc core-prim . hashtable-copy) (cg4ffb core-prim . hashtable-contains?) (cg4ffa core-prim . hashtable-clear!) (cg4ff9 core-prim . call-with-output-file) (cg4ff8 core-prim . call-with-input-file) (cg4ff7 core-prim . write-char) (cg4ff6 core-prim . write) (cg4ff5 core-prim . with-output-to-file) (cg4ff4 core-prim . with-input-from-file) (cg4ff3 core-prim . read-char) (cg4ff2 core-prim . read) (cg4ff1 core-prim . peek-char) (cg4ff0 core-prim . open-output-file) (cg4fef core-prim . open-input-file) (cg4fee core-prim . newline) (cg4fed core-prim . display) (cg4fec core-prim . close-output-port) (cg4feb core-prim . close-input-port) (cg4fea core-prim . eof-object?) (cg4fe9 core-prim . eof-object) (cg4fe8 core-prim . current-error-port) (cg4fe7 core-prim . current-output-port) (cg4fe6 core-prim . current-input-port) (cg4fe5 core-prim . output-port?) (cg4fe4 core-prim . input-port?) (cg4fe3 core-prim . utf-8-codec) (cg4fe2 core-prim . utf-16-codec) (cg4fe1 core-prim . transcoder-error-handling-mode) (cg4fe0 core-prim . transcoder-eol-style) (cg4fdf core-prim . transcoder-codec) (cg4fde core-prim . transcoded-port) (cg4fdd core-prim . textual-port?) (cg4fdc core-prim . string->bytevector) (cg4fdb core-prim . standard-output-port) (cg4fda core-prim . standard-input-port) (cg4fd9 core-prim . standard-error-port) (cg4fd8 core-prim . set-port-position!) (cg4fd7 core-prim . put-u8) (cg4fd6 core-prim . put-string) (cg4fd5 core-prim . put-datum) (cg4fd4 core-prim . put-char) (cg4fd3 core-prim . put-bytevector) (cg4fd2 core-prim . port?) (cg4fd1 core-prim . port-transcoder) (cg4fd0 core-prim . port-position) (cg4fcf core-prim . port-has-set-port-position!?) (cg4fce core-prim . port-has-port-position?) (cg4fcd core-prim . port-eof?) (cg4fcc core-prim . output-port-buffer-mode) (cg4fcb core-prim . open-string-output-port) (cg4fca core-prim . open-string-input-port) (cg4fc9 core-prim . open-file-output-port) (cg4fc8 core-prim . open-file-input/output-port) (cg4fc7 core-prim . open-file-input-port) (cg4fc6 core-prim . open-bytevector-output-port) (cg4fc5 core-prim . open-bytevector-input-port) (cg4fc4 core-prim . native-transcoder) (cg4fc3 core-prim . native-eol-style) (cg4fc2 core-prim . make-transcoder) (cg4fc1 core-prim . latin-1-codec) (cg4fc0 core-prim . make-i/o-write-error) (cg4fbf core-prim . make-i/o-read-error) (cg4fbe core-prim . make-i/o-port-error) (cg4fbd core-prim . make-i/o-invalid-position-error) (cg4fbc core-prim . make-i/o-filename-error) (cg4fbb core-prim . make-i/o-file-protection-error) (cg4fba core-prim . make-i/o-file-is-read-only-error) (cg4fb9 core-prim . make-i/o-file-does-not-exist-error) (cg4fb8 core-prim . make-i/o-file-already-exists-error) (cg4fb7 core-prim . make-i/o-error) (cg4fb6 core-prim . make-i/o-encoding-error) (cg4fb5 core-prim . make-i/o-decoding-error) (cg4fb4 core-prim . make-custom-textual-output-port) (cg4fb3 core-prim . make-custom-textual-input/output-port) (cg4fb2 core-prim . make-custom-textual-input-port) (cg4fb1 core-prim . make-custom-binary-output-port) (cg4fb0 core-prim . make-custom-binary-input/output-port) (cg4faf core-prim . make-custom-binary-input-port) (cg4fae core-prim . make-bytevector) (cg4fad core-prim . lookahead-u8) (cg4fac core-prim . lookahead-char) (cg4fab core-prim . i/o-write-error?) (cg4faa core-prim . i/o-read-error?) (cg4fa9 core-prim . i/o-port-error?) (cg4fa8 core-prim . i/o-invalid-position-error?) (cg4fa7 core-prim . i/o-filename-error?) (cg4fa6 core-prim . i/o-file-protection-error?) (cg4fa5 core-prim . i/o-file-is-read-only-error?) (cg4fa4 core-prim . i/o-file-does-not-exist-error?) (cg4fa3 core-prim . i/o-file-already-exists-error?) (cg4fa2 core-prim . i/o-error?) (cg4fa1 core-prim . i/o-error-position) (cg4fa0 core-prim . i/o-error-port) (cg4f9f core-prim . i/o-error-filename) (cg4f9e core-prim . i/o-encoding-error?) (cg4f9d core-prim . i/o-encoding-error-char) (cg4f9c core-prim . i/o-decoding-error?) (cg4f9b core-prim . get-u8) (cg4f9a core-prim . get-string-n!) (cg4f99 core-prim . get-string-n) (cg4f98 core-prim . get-string-all) (cg4f97 core-prim . get-line) (cg4f96 core-prim . get-datum) (cg4f95 core-prim . get-char) (cg4f94 core-prim . get-bytevector-some) (cg4f93 core-prim . get-bytevector-n!) (cg4f92 core-prim . get-bytevector-n) (cg4f91 core-prim . get-bytevector-all) (cg4f90 core-prim . flush-output-port) (cg4f8f core-prim . close-port) (cg3176 core-prim . scheme-report-environment) (cg4f8e core-prim . quotient) (cg3174 core-prim . null-environment) (cg4f8d core-prim . remainder) (cg4f8c core-prim . modulo) (cg4f8b core-prim . inexact->exact) (cg4f8a core-prim . force) (cg4f89 core-prim . exact->inexact) (cg4f88 core-prim . make-promise) (cg4f87 core-prim . exit) (cg4c1d core-prim . command-line) (cg4f86 core-prim . string-fill!) (cg4f85 core-prim . string-set!) (cg4f84 core-prim . set-cdr!) (cg4f83 core-prim . set-car!) (cg4f82 core-prim . remove) (cg4f81 core-prim . remv) (cg4f80 core-prim . remp) (cg4f7f core-prim . remq) (cg4f7e core-prim . partition) (cg4f7d core-prim . memv) (cg4f7c core-prim . memq) (cg4f7b core-prim . memp) (cg4f7a core-prim . member) (cg4f79 core-prim . exists) (cg4f78 core-prim . for-all) (cg4f77 core-prim . fold-right) (cg4f76 core-prim . fold-left) (cg4f75 core-prim . find) (cg4f74 core-prim . filter) (cg4f73 core-prim . cons*) (cg4f72 core-prim . assv) (cg4f71 core-prim . assq) (cg4f70 core-prim . assp) (cg4f6f core-prim . assoc) (cg4f6e core-prim . call-with-string-output-port) (cg4f6d core-prim . call-with-port) (cg4f6c core-prim . call-with-bytevector-output-port) (cg4f6b core-prim . bytevector->string) (cg4f6a core-prim . buffer-mode?) (cg4f69 core-prim . binary-port?) (cg4f68 core-prim . with-exception-handler) (cg4f67 core-prim . raise-continuable) (cg4f66 core-prim . raise) (cg317a core-prim . eval) (cg3172 core-prim . environment) (cg4f65 core-prim . make-enumeration) (cg4f64 core-prim . enum-set=?) (cg4f63 core-prim . enum-set-universe) (cg4f62 core-prim . enum-set-union) (cg4f61 core-prim . enum-set-subset?) (cg4f60 core-prim . enum-set-projection) (cg4f5f core-prim . enum-set-member?) (cg4f5e core-prim . enum-set-intersection) (cg4f5d core-prim . enum-set-indexer) (cg4f5c core-prim . enum-set-difference) (cg4f5b core-prim . enum-set-constructor) (cg4f5a core-prim . enum-set-complement) (cg4f59 core-prim . enum-set->list) (cg4f58 core-prim . who-condition?) (cg4f57 core-prim . warning?) (cg4f56 core-prim . violation?) (cg4f55 core-prim . undefined-violation?) (cg4f54 core-prim . syntax-violation?) (cg4f53 core-prim . syntax-violation-subform) (cg4f52 core-prim . syntax-violation-form) (cg319a core-prim . syntax-violation) (cg4f51 core-prim . simple-conditions) (cg4f50 core-prim . serious-condition?) (cg4f4f core-prim . non-continuable-violation?) (cg4f4e core-prim . message-condition?) (cg4f4d core-prim . make-who-condition) (cg4f4c core-prim . make-warning) (cg4f4b core-prim . make-violation) (cg4f4a core-prim . make-undefined-violation) (cg4f49 core-prim . make-syntax-violation) (cg4f48 core-prim . make-serious-condition) (cg4f47 core-prim . make-non-continuable-violation) (cg4f46 core-prim . make-message-condition) (cg4f45 core-prim . make-lexical-violation) (cg4f44 core-prim . make-irritants-condition) (cg4f43 core-prim . make-implementation-restriction-violation) (cg4f42 core-prim . make-error) (cg4f41 core-prim . make-assertion-violation) (cg4f40 core-prim . lexical-violation?) (cg4f3f core-prim . irritants-condition?) (cg4f3e core-prim . implementation-restriction-violation?) (cg4f3d core-prim . error?) (cg4f3c core-prim . condition-who) (cg4f3b core-prim . condition-predicate) (cg4f3a core-prim . condition-message) (cg4f39 core-prim . condition-irritants) (cg4f38 core-prim . condition-accessor) (cg4f37 core-prim . condition) (cg4f36 core-prim . assertion-violation?) (cg4f35 core-prim . condition?) (cg4f34 core-prim . utf32->string) (cg4f33 core-prim . utf16->string) (cg4f32 core-prim . utf8->string) (cg4f31 core-prim . uint-list->bytevector) (cg4f30 core-prim . u8-list->bytevector) (cg4f2f core-prim . string->utf8) (cg4f2e core-prim . string->utf32) (cg4f2d core-prim . string->utf16) (cg4f2c core-prim . sint-list->bytevector) (cg4f2b core-prim . native-endianness) (cg4f2a core-prim . bytevector?) (cg4f29 core-prim . bytevector=?) (cg4f28 core-prim . bytevector-uint-set!) (cg4f27 core-prim . bytevector-uint-ref) (cg4f26 core-prim . bytevector-u8-set!) (cg4f25 core-prim . bytevector-u8-ref) (cg4f24 core-prim . bytevector-u64-set!) (cg4f23 core-prim . bytevector-u64-ref) (cg4f22 core-prim . bytevector-u64-native-set!) (cg4f21 core-prim . bytevector-u64-native-ref) (cg4f20 core-prim . bytevector-u32-set!) (cg4f1f core-prim . bytevector-u32-ref) (cg4f1e core-prim . bytevector-u32-native-set!) (cg4f1d core-prim . bytevector-u32-native-ref) (cg4f1c core-prim . bytevector-u16-set!) (cg4f1b core-prim . bytevector-u16-ref) (cg4f1a core-prim . bytevector-u16-native-set!) (cg4f19 core-prim . bytevector-u16-native-ref) (cg4f18 core-prim . bytevector-sint-set!) (cg4f17 core-prim . bytevector-sint-ref) (cg4f16 core-prim . bytevector-s8-set!) (cg4f15 core-prim . bytevector-s8-ref) (cg4f14 core-prim . bytevector-s64-set!) (cg4f13 core-prim . bytevector-s64-ref) (cg4f12 core-prim . bytevector-s64-native-set!) (cg4f11 core-prim . bytevector-s64-native-ref) (cg4f10 core-prim . bytevector-s32-set!) (cg4f0f core-prim . bytevector-s32-ref) (cg4f0e core-prim . bytevector-s32-native-set!) (cg4f0d core-prim . bytevector-s32-native-ref) (cg4f0c core-prim . bytevector-s16-set!) (cg4f0b core-prim . bytevector-s16-ref) (cg4f0a core-prim . bytevector-s16-native-set!) (cg4f09 core-prim . bytevector-s16-native-ref) (cg4f08 core-prim . bytevector-length) (cg4f07 core-prim . bytevector-ieee-single-ref) (cg4f06 core-prim . bytevector-ieee-single-set!) (cg4f05 core-prim . bytevector-ieee-single-native-set!) (cg4f04 core-prim . bytevector-ieee-single-native-ref) (cg4f03 core-prim . bytevector-ieee-double-set!) (cg4f02 core-prim . bytevector-ieee-double-ref) (cg4f01 core-prim . bytevector-ieee-double-native-set!) (cg4f00 core-prim . bytevector-ieee-double-native-ref) (cg4eff core-prim . bytevector-fill!) (cg4efe core-prim . bytevector-copy!) (cg4efd core-prim . bytevector-copy) (cg4efc core-prim . bytevector->uint-list) (cg4efb core-prim . bytevector->u8-list) (cg4efa core-prim . bytevector->sint-list) (cg4ef9 core-prim . no-nans-violation?) (cg4ef8 core-prim . no-infinities-violation?) (cg4ef7 core-prim . make-no-nans-violation) (cg4ef6 core-prim . make-no-infinities-violation) (cg4ef5 core-prim . real->flonum) (cg4ef4 core-prim . flzero?) (cg4ef3 core-prim . fltruncate) (cg4ef2 core-prim . fltan) (cg4ef1 core-prim . flsqrt) (cg4ef0 core-prim . flsin) (cg4eef core-prim . flround) (cg4eee core-prim . flpositive?) (cg4eed core-prim . flonum?) (cg4eec core-prim . flodd?) (cg4eeb core-prim . flnumerator) (cg4eea core-prim . flnegative?) (cg4ee9 core-prim . flnan?) (cg4ee8 core-prim . flmod0) (cg4ee7 core-prim . flmod) (cg4ee6 core-prim . flmin) (cg4ee5 core-prim . flmax) (cg4ee4 core-prim . fllog) (cg4ee3 core-prim . flinteger?) (cg4ee2 core-prim . flinfinite?) (cg4ee1 core-prim . flfloor) (cg4ee0 core-prim . flfinite?) (cg4edf core-prim . flexpt) (cg4ede core-prim . flexp) (cg4edd core-prim . fleven?) (cg4edc core-prim . fldiv0-and-mod0) (cg4edb core-prim . fldiv0) (cg4eda core-prim . fldiv-and-mod) (cg4ed9 core-prim . fldiv) (cg4ed8 core-prim . fldenominator) (cg4ed7 core-prim . flcos) (cg4ed6 core-prim . flceiling) (cg4ed5 core-prim . flatan) (cg4ed4 core-prim . flasin) (cg4ed3 core-prim . flacos) (cg4ed2 core-prim . flabs) (cg4ed1 core-prim . fl>?) (cg4ed0 core-prim . fl>=?) (cg4ecf core-prim . fl=?) (cg4ece core-prim . fl<?) (cg4ecd core-prim . fl<=?) (cg4ecc core-prim . fl/) (cg4ecb core-prim . fl-) (cg4eca core-prim . fl+) (cg4ec9 core-prim . fl*) (cg4ec8 core-prim . fixnum->flonum) (cg4ec7 core-prim . fxzero?) (cg4ec6 core-prim . fxxor) (cg4ec5 core-prim . fxrotate-bit-field) (cg4ec4 core-prim . fxreverse-bit-field) (cg4ec3 core-prim . fxpositive?) (cg4ec2 core-prim . fxodd?) (cg4ec1 core-prim . fxnot) (cg4ec0 core-prim . fxnegative?) (cg4ebf core-prim . fxmod0) (cg4ebe core-prim . fxmod) (cg4ebd core-prim . fxmin) (cg4ebc core-prim . fxmax) (cg4ebb core-prim . fxlength) (cg4eba core-prim . fxior) (cg4eb9 core-prim . fxif) (cg4eb8 core-prim . fxfirst-bit-set) (cg4eb7 core-prim . fxeven?) (cg4eb6 core-prim . fxdiv0-and-mod0) (cg4eb5 core-prim . fxdiv0) (cg4eb4 core-prim . fxdiv-and-mod) (cg4eb3 core-prim . fxdiv) (cg4eb2 core-prim . fxcopy-bit-field) (cg4eb1 core-prim . fxcopy-bit) (cg4eb0 core-prim . fxbit-set?) (cg4eaf core-prim . fxbit-field) (cg4eae core-prim . fxbit-count) (cg4ead core-prim . fxarithmetic-shift-right) (cg4eac core-prim . fxarithmetic-shift-left) (cg4eab core-prim . fxarithmetic-shift) (cg4eaa core-prim . fxand) (cg4ea9 core-prim . fx>?) (cg4ea8 core-prim . fx>=?) (cg4ea7 core-prim . fx=?) (cg4ea6 core-prim . fx<?) (cg4ea5 core-prim . fx<=?) (cg4ea4 core-prim . fx-/carry) (cg4ea3 core-prim . fx-) (cg4ea2 core-prim . fx+/carry) (cg4ea1 core-prim . fx+) (cg4ea0 core-prim . fx*/carry) (cg4e9f core-prim . fx*) (cg4e9e core-prim . greatest-fixnum) (cg4e9d core-prim . least-fixnum) (cg4e9c core-prim . fixnum-width) (cg4e9b core-prim . fixnum?) (cg4e9a core-prim . bitwise-rotate-bit-field) (cg4e99 core-prim . bitwise-reverse-bit-field) (cg4e98 core-prim . bitwise-length) (cg4e97 core-prim . bitwise-if) (cg4e96 core-prim . bitwise-first-bit-set) (cg4e95 core-prim . bitwise-copy-bit-field) (cg4e94 core-prim . bitwise-copy-bit) (cg4e93 core-prim . bitwise-bit-set?) (cg4e92 core-prim . bitwise-bit-field) (cg4e91 core-prim . bitwise-bit-count) (cg4e90 core-prim . bitwise-xor) (cg4e8f core-prim . bitwise-ior) (cg4e8e core-prim . bitwise-and) (cg4e8d core-prim . bitwise-not) (cg4e8c core-prim . bitwise-arithmetic-shift-right) (cg4e8b core-prim . bitwise-arithmetic-shift-left) (cg4e8a core-prim . bitwise-arithmetic-shift) (cg4e89 core-prim . zero?) (cg4e88 core-prim . vector?) (cg4e87 core-prim . vector-set!) (cg4e86 core-prim . vector-ref) (cg4e85 core-prim . vector-map) (cg4e84 core-prim . vector-length) (cg4e83 core-prim . vector-for-each) (cg4e82 core-prim . vector-fill!) (cg4e81 core-prim . vector->list) (cg4e80 core-prim . vector) (cg4e7f core-prim . values) (cg4e7e core-prim . truncate) (cg4e7d core-prim . tan) (cg4e7c core-prim . symbol?) (cg4e7b core-prim . symbol=?) (cg4e7a core-prim . symbol->string) (cg4e79 core-prim . substring) (cg4e78 core-prim . string?) (cg4e77 core-prim . string>?) (cg4e76 core-prim . string>=?) (cg4e75 core-prim . string=?) (cg4e74 core-prim . string<?) (cg4e73 core-prim . string<=?) (cg4e72 core-prim . string-ref) (cg4e71 core-prim . string-length) (cg4e70 core-prim . string-for-each) (cg4e6f core-prim . string-copy) (cg4e6e core-prim . string-append) (cg4e6d core-prim . string->symbol) (cg4e6c core-prim . string->number) (cg4e6b core-prim . string->list) (cg4e6a core-prim . string) (cg4e69 core-prim . sqrt) (cg4e68 core-prim . sin) (cg4e67 core-prim . round) (cg4e66 core-prim . reverse) (cg4e65 core-prim . real?) (cg4e64 core-prim . real-valued?) (cg4e63 core-prim . real-part) (cg4e62 core-prim . rationalize) (cg4e61 core-prim . rational?) (cg4e60 core-prim . rational-valued?) (cg4e5f core-prim . procedure?) (cg4e5e core-prim . positive?) (cg4e5d core-prim . pair?) (cg4e5c core-prim . odd?) (cg4e5b core-prim . numerator) (cg4e5a core-prim . number?) (cg4e59 core-prim . number->string) (cg4e58 core-prim . null?) (cg4e57 core-prim . not) (cg4e56 core-prim . negative?) (cg4e55 core-prim . nan?) (cg4e54 core-prim . min) (cg4e53 core-prim . max) (cg4e52 core-prim . map) (cg4e51 core-prim . make-vector) (cg4e50 core-prim . make-string) (cg4e4f core-prim . make-rectangular) (cg4e4e core-prim . make-polar) (cg4e4d core-prim . magnitude) (cg4e4c core-prim . log) (cg4e4b core-prim . list?) (cg4e4a core-prim . list-tail) (cg4e49 core-prim . list-ref) (cg4e48 core-prim . list->vector) (cg4e47 core-prim . list->string) (cg4e46 core-prim . list) (cg4e45 core-prim . length) (cg4e44 core-prim . lcm) (cg4e43 core-prim . integer?) (cg4e42 core-prim . integer-valued?) (cg4e41 core-prim . integer->char) (cg4e40 core-prim . infinite?) (cg4e3f core-prim . inexact?) (cg4e3e core-prim . inexact) (cg4e3d core-prim . imag-part) (cg4e3c core-prim . gcd) (cg4e3b core-prim . for-each) (cg4e3a core-prim . floor) (cg4e39 core-prim . finite?) (cg4e38 core-prim . expt) (cg4e37 core-prim . exp) (cg4e36 core-prim . exact?) (cg4e35 core-prim . exact-integer-sqrt) (cg4e34 core-prim . exact) (cg4e33 core-prim . even?) (cg4e32 core-prim . error) (cg4e31 core-prim . eqv?) (cg4e30 core-prim . equal?) (cg4e2f core-prim . eq?) (cg4e2e core-prim . dynamic-wind) (cg4e2d core-prim . div0-and-mod0) (cg4e2c core-prim . mod0) (cg4e2b core-prim . div0) (cg4e2a core-prim . div-and-mod) (cg4e29 core-prim . mod) (cg4e28 core-prim . div) (cg4e27 core-prim . denominator) (cg4e26 core-prim . cos) (cg4e25 core-prim . cons) (cg4e24 core-prim . complex?) (cg4e23 core-prim . char?) (cg4e22 core-prim . char>?) (cg4e21 core-prim . char>=?) (cg4e20 core-prim . char=?) (cg4e1f core-prim . char<?) (cg4e1e core-prim . char<=?) (cg4e1d core-prim . char->integer) (cg4e1c core-prim . ceiling) (cg4e1b core-prim . call-with-values) (cg4e1a core-prim . call/cc) (cg4e19 core-prim . call-with-current-continuation) (cg4e18 core-prim . cddddr) (cg4e17 core-prim . cdddar) (cg4e16 core-prim . cddadr) (cg4e15 core-prim . cddaar) (cg4e14 core-prim . cdaddr) (cg4e13 core-prim . cdadar) (cg4e12 core-prim . cdaadr) (cg4e11 core-prim . cdaaar) (cg4e10 core-prim . cadddr) (cg4e0f core-prim . caddar) (cg4e0e core-prim . cadadr) (cg4e0d core-prim . cadaar) (cg4e0c core-prim . caaddr) (cg4e0b core-prim . caadar) (cg4e0a core-prim . caaadr) (cg4e09 core-prim . caaaar) (cg4e08 core-prim . cdddr) (cg4e07 core-prim . cddar) (cg4e06 core-prim . cdadr) (cg4e05 core-prim . cdaar) (cg4e04 core-prim . caddr) (cg4e03 core-prim . cadar) (cg4e02 core-prim . caadr) (cg4e01 core-prim . caaar) (cg4e00 core-prim . cddr) (cg4dff core-prim . cdar) (cg4dfe core-prim . cadr) (cg4dfd core-prim . caar) (cg4dfc core-prim . cdr) (cg4dfb core-prim . car) (cg4dfa core-prim . boolean?) (cg4df9 core-prim . boolean=?) (cg4df8 core-prim . atan) (cg4df7 core-prim . assertion-violation) (cg3194 core-prim . assertion-error) (cg4df6 core-prim . asin) (cg4df5 core-prim . apply) (cg4df4 core-prim . append) (cg4df3 core-prim . angle) (cg4df2 core-prim . acos) (cg4df1 core-prim . abs) (cg4df0 core-prim . /) (cg4def core-prim . *) (cg4dee core-prim . -) (cg4ded core-prim . +) (cg4dec core-prim . >=) (cg4deb core-prim . >) (cg4dea core-prim . =) (cg4de9 core-prim . <=) (cg4de8 core-prim . <) (cg4de7 core-prim . library) (cg4de6 $core-rtd &no-nans-rtd &no-nans-rcd) (cg4de5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (cg4de4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (cg4de3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (cg4de2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (cg4de1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (cg4de0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (cg4ddf $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (cg4dde $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (cg4ddd $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (cg4ddc $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (cg4ddb $core-rtd &i/o-write-rtd &i/o-write-rcd) (cg4dda $core-rtd &i/o-read-rtd &i/o-read-rcd) (cg4dd9 $core-rtd &i/o-rtd &i/o-rcd) (cg4dd8 $core-rtd &undefined-rtd &undefined-rcd) (cg4dd7 $core-rtd &syntax-rtd &syntax-rcd) (cg4dd6 $core-rtd &lexical-rtd &lexical-rcd) (cg4dd5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (cg4dd4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (cg4dd3 $core-rtd &who-rtd &who-rcd) (cg4dd2 $core-rtd &irritants-rtd &irritants-rcd) (cg4dd1 $core-rtd &assertion-rtd &assertion-rcd) (cg4dd0 $core-rtd &violation-rtd &violation-rcd) (cg4dcf $core-rtd &error-rtd &error-rcd) (cg4dce $core-rtd &serious-rtd &serious-rcd) (cg4dcd $core-rtd &warning-rtd &warning-rcd) (cg4dcc $core-rtd &message-rtd &message-rcd) (cg4dcb $core-rtd &condition-rtd &condition-rcd) (cg4dca macro . define-condition-type) (cg4dc9 macro . define-enumeration) (cg4dc8 macro . define-record-type) (cg4dc7 macro . parent-rtd) (cg4dc6 macro . nongenerative) (cg4dc5 macro . opaque) (cg4dc4 macro . sealed) (cg4dc3 macro . protocol) (cg4dc2 macro . parent) (cg4dc1 macro . immutable) (cg4dc0 macro . mutable) (cg4dbf macro . fields) (cg4dbe macro . error-handling-mode) (cg4dbd macro . file-options) (cg4dbc macro . buffer-mode) (cg4dbb macro . eol-style) (cg4dba macro . guard) (cg4db9 macro . trace-define) (cg4db8 macro . trace-lambda) (cg4db7 macro . unsyntax-splicing) (cg4db6 macro . unsyntax) (cg4db5 macro . unquote-splicing) (cg4db4 macro . unquote) (cg4db3 macro . _) (cg4db2 macro . else) (cg4db1 macro . =>) (cg4db0 macro . ...) (cg4daf macro . assert) (cg4dae macro . endianness) (cg4dad macro . delay) (cg4dac macro . time) (cg4dab macro . do) (cg4daa macro . cond) (cg4da9 macro . let*) (cg4da8 macro . let*-values) (cg4da7 macro . let-values) (cg4da6 macro . identifier-syntax) (cg4da5 macro . with-syntax) (cg4da4 macro . quasisyntax) (cg4da3 macro . quasiquote) (cg4da2 macro . syntax-rules) (cg4da1 macro . include) (cg4da0 macro . define-struct) (cg4d9f core-macro . record-constructor-descriptor) (cg4d9e core-macro . record-type-descriptor) (cg4d9d macro . case) (cg4d9c macro . parameterize) (cg4d9b macro . unless) (cg4d9a macro . when) (cg4d99 core-macro . or) (cg4d98 core-macro . and) (cg4d97 core-macro . if) (cg4d96 core-macro . let) (cg4d95 core-macro . letrec*) (cg4d94 core-macro . letrec) (cg4d93 core-macro . type-descriptor) (cg4d92 core-macro . case-lambda) (cg4d91 core-macro . lambda) (cg4d90 core-macro . syntax) (cg4d8f core-macro . syntax-case) (cg4d8e core-macro . quote) (cg4d8d core-macro . foreign-call) (cg4d8c letrec-syntax) (cg4d8b let-syntax) (cg4d8a set!) (cg4d89 import) (cg4d88 begin) (cg4d87 module) (cg4d86 define-syntax) (cg4d85 define)) values values '#f '#f '#f '#f) (cg2cce@cg2b1a@install-library 'cg5144 '(psyntax system $bootstrap) '() '() '() '() '(#796# #797# #798# #799# #800# #801#) '() values values '#f '#f '#f '#f) (cg2cce@cg2b1a@install-library 'cg5145 '(mosh) '() '() '() '() '(#798# #799# #1# #802# #804# #2# #805# #806# #3# #807# #808# #809# #810# #811# #815# #816# #817# #4# #818# #819# #820# #821# #822# #6# #7# #8# #67# #855# #856# #857# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #86# #858# #859# #860# #861# #862# #863# #864# #865# #866# #867# #868# #869# #749# #760#) '() values values '#f '#f '#f '#f) (cg2cce@cg2b1a@install-library 'cg5146 '(system) '() '() '() '() '(#803# #812# #813# #814# #823# #5# #824# #825# #826# #7# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #827# #828# #829# #830# #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #831# #832# #833# #834# #835# #836# #837# #838# #839# #840# #841# #842# #843# #844# #845# #846# #847# #848# #849# #850# #851# #852# #853# #854# #870# #871# #872# #873# #874# #875# #876# #877# #878# #879# #880# #881# #882#) '() values values '#f '#f '#f '#f)))
(begin (set! cg4c08@ref (unspecified)) (set! cg4c0a@x* (unspecified)) (set! cg4c0c@add-library-path! (unspecified)) (set! cg4c0e@parse-and-add-library-path (unspecified)) (set! cg4c10@for-each-with-index (unspecified)) (set! cg4c12@rpad (unspecified)) (set! cg4c14@condition-printer (unspecified)) (set! cg4c16@record->field-alist (unspecified)) (set! cg4c18@map-with-index (unspecified)) (set! cg4c1a@repl (unspecified)) (set! cg4c1c@trace-printer (unspecified)) (set! cg4c1e@command-line (unspecified)) (set! cg4c20@local-library-path (unspecified)) (set! cg4c22@load/args (unspecified)) (set! cg4c24@load (unspecified)) (set! cg4c26@ironscheme-build (unspecified)) (set! cg4c28@eval-top-level (unspecified)) (set! cg4c2a@compile-system-libraries (unspecified)) (set! cg4c2c@compile (unspecified)) (set! cg4c2e@compile->closure (unspecified)) (set! cg4c30@pre-compile-r6rs-file (unspecified)) (set! cg4c32@load-r6rs-top-level (unspecified)) (set! cg4c34@load-r6rs-top-level-sexp (unspecified)) (set! cg4c36@prefix-inc (unspecified)) (set! cg4c38@prefix-inc! (unspecified)) (set! cg4c08@ref (lambda (cg4c73@rtd cg4c74@i cg4c75@x) (let ((cg4c79@val ((record-accessor cg4c73@rtd cg4c74@i) cg4c75@x))) (if (symbol? cg4c79@val) (ungensym cg4c79@val) cg4c79@val)))) (set! cg4d6b@cg4c08@ref cg4c08@ref) (set! cg4c0a@x* '()) (set! cg4d6c@cg4c0a@x* cg4c0a@x*) (set! cg4c0c@add-library-path! (lambda (cg4c7b@path) (cg2cbe@cg2afa@library-path (append (cg2cbe@cg2afa@library-path) (list cg4c7b@path))))) (set! cg4d6d@cg4c0c@add-library-path! cg4c0c@add-library-path!) (set! cg4c0e@parse-and-add-library-path (lambda (cg4c7d@paths cg4c7e@message) (letrec* ((cg4c82@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((cg4c83@t cg4c7d@paths)) (if cg4c83@t ((lambda (cg4c85@paths) (for-each (lambda (cg4c87@path) (if (file-exists? cg4c87@path) (cg4c0c@add-library-path! (expand-path cg4c87@path)) (format (current-error-port) cg4c7e@message cg4c87@path))) (string-split cg4c85@paths cg4c82@separator))) cg4c83@t) (void)))))) (set! cg4d6e@cg4c0e@parse-and-add-library-path cg4c0e@parse-and-add-library-path) (set! cg4c10@for-each-with-index (lambda (cg4c89@proc cg4c8a@lst) (letrec ((cg4c8d@loop (lambda (cg4c8f@i cg4c90@lst) (if (null? cg4c90@lst) (if '#f '#f (void)) (begin (cg4c89@proc cg4c8f@i (car cg4c90@lst)) (cg4c8d@loop (+ cg4c8f@i '1) (cdr cg4c90@lst))))))) (cg4c8d@loop '1 cg4c8a@lst)))) (set! cg4d6f@cg4c10@for-each-with-index cg4c10@for-each-with-index) (set! cg4c12@rpad (lambda (cg4c93@str cg4c94@pad cg4c95@n) (let ((cg4c99@rest (- cg4c95@n (string-length (format '"~a" cg4c93@str))))) (let cg4c9f@loop ((cg4c9b@rest cg4c99@rest) (cg4c9c@ret (format '"~a" cg4c93@str))) (if (<= cg4c9b@rest '0) cg4c9c@ret (cg4c9f@loop (- cg4c9b@rest '1) (string-append cg4c9c@ret cg4c94@pad))))))) (set! cg4d70@cg4c12@rpad cg4c12@rpad) (set! cg4c14@condition-printer (lambda (cg4ca1@e cg4ca2@port) (letrec* ((cg4ca6@max-condition-len (apply max (map (lambda (cg4cb7@c) (string-length (symbol->string (record-type-name (record-rtd cg4cb7@c))))) (simple-conditions cg4ca1@e))))) (begin (display '" Condition components:\n" cg4ca2@port) (cg4c10@for-each-with-index (lambda (cg4ca7@i cg4ca8@x) (let ((cg4cab@rtd (record-rtd cg4ca8@x)) (cg4cac@fields-alist (cg4c16@record->field-alist cg4ca8@x))) (begin (format cg4ca2@port '" ~d. ~a" cg4ca7@i (cg4c12@rpad (symbol->string (record-type-name cg4cab@rtd)) '" " cg4ca6@max-condition-len)) (if (null? cg4cac@fields-alist) (newline cg4ca2@port) (void)) (let cg4cb3@loop ((cg4caf@first '#t) (cg4cb0@fields-alist cg4cac@fields-alist)) (if (null? cg4cb0@fields-alist) '() (let ((cg4cb5@field (car cg4cb0@fields-alist))) (begin (if (not cg4caf@first) (display (cg4c12@rpad '"" '" " (+ '4 cg4ca6@max-condition-len)) cg4ca2@port) (void)) (display '"       " cg4ca2@port) (display (car cg4cb5@field) cg4ca2@port) (display '": " cg4ca2@port) (write (cdr cg4cb5@field) cg4ca2@port) (newline cg4ca2@port) (cg4cb3@loop '#f (cdr cg4cb0@fields-alist))))))))) (simple-conditions cg4ca1@e)))))) (set! cg4d71@cg4c14@condition-printer cg4c14@condition-printer) (set! cg4c16@record->field-alist (lambda (cg4cb9@r) (letrec* ((cg4cbc@ref (lambda (cg4cc7@rtd cg4cc8@i cg4cc9@x) (let ((cg4ccd@val ((record-accessor cg4cc7@rtd cg4cc8@i) cg4cc9@x))) (if (symbol? cg4ccd@val) (ungensym cg4ccd@val) cg4ccd@val))))) (let cg4cc1@loop ((cg4cbd@ret '()) (cg4cbe@rtd (record-rtd cg4cb9@r))) (if cg4cbe@rtd (cg4cc1@loop (append cg4cbd@ret (cg4c18@map-with-index (lambda (cg4cc3@i cg4cc4@field) (cons cg4cc4@field (cg4cbc@ref cg4cbe@rtd cg4cc3@i cg4cb9@r))) (vector->list (record-type-field-names cg4cbe@rtd)))) (record-type-parent cg4cbe@rtd)) cg4cbd@ret))))) (set! cg4d72@cg4c16@record->field-alist cg4c16@record->field-alist) (set! cg4c18@map-with-index (lambda (cg4ccf@proc cg4cd0@lst) (let cg4cd9@loop ((cg4cd3@i '0) (cg4cd4@lst cg4cd0@lst) (cg4cd5@ret '())) (if (null? cg4cd4@lst) (reverse cg4cd5@ret) (cg4cd9@loop (+ cg4cd3@i '1) (cdr cg4cd4@lst) (cons (cg4ccf@proc cg4cd3@i (car cg4cd4@lst)) cg4cd5@ret)))))) (set! cg4d73@cg4c18@map-with-index cg4c18@map-with-index) (set! cg4c1a@repl (lambda cg4cdb@x (letrec* ((cg4cde@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (cg4ce1@cg4cdf) (lambda () (with-exception-handler (lambda (cg4ce3@e) ((call/cc (lambda (cg4ce5@cg4ce0) (cg4ce1@cg4cdf (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? cg4ce3@e) (cg4c14@condition-printer cg4ce3@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" cg4ce3@e))) (cg4ce5@cg4ce0 (lambda () (raise-continuable cg4ce3@e)))))))))) (lambda () (let cg4ceb@loop ((cg4ce7@line (get-line (current-input-port))) (cg4ce8@accum '"")) (letrec* ((cg4cee@parentheses-ok? (lambda (cg4cf5@text) (let cg4cfd@loop ((cg4cf7@chars (string->list cg4cf5@text)) (cg4cf8@p0 '0) (cg4cf9@p1 '0)) (if (null? cg4cf7@chars) (= '0 cg4cf8@p0 cg4cf9@p1) (let ((cg4cff@t (car cg4cf7@chars))) (if (memv cg4cff@t '(#\()) (cg4cfd@loop (cdr cg4cf7@chars) (+ cg4cf8@p0 '1) cg4cf9@p1) (if (memv cg4cff@t '(#\))) (cg4cfd@loop (cdr cg4cf7@chars) (- cg4cf8@p0 '1) cg4cf9@p1) (if (memv cg4cff@t '(#\[)) (cg4cfd@loop (cdr cg4cf7@chars) cg4cf8@p0 (+ cg4cf9@p1 '1)) (if (memv cg4cff@t '(#\])) (cg4cfd@loop (cdr cg4cf7@chars) cg4cf8@p0 (- cg4cf9@p1 '1)) (cg4cfd@loop (cdr cg4cf7@chars) cg4cf8@p0 cg4cf9@p1)))))))))) (cg4cf0@eval-string-print (lambda (cg4cf3@text) (if (not (or (string=? '"\n" cg4cf3@text) (= '0 (string-length cg4cf3@text)))) (write (cg4c28@eval-top-level (call-with-port (open-string-input-port cg4cf3@text) read))) (void))))) (if (eof-object? cg4ce7@line) (begin (cg4cf0@eval-string-print cg4ce8@accum) (exit)) (let ((cg4cf1@current (string-append cg4ce8@accum cg4ce7@line))) (if (cg4cee@parentheses-ok? cg4cf1@current) (cg4cf0@eval-string-print cg4cf1@current) (cg4ceb@loop (get-line (current-input-port)) cg4cf1@current)))))))))))) (newline) (cg4cde@rec))))) (cg4cde@rec)))) (set! cg4d74@cg4c1a@repl cg4c1a@repl) (set! cg4c1c@trace-printer (cg2a04@cg28e2@make-parameter write)) (set! cg4d75@cg4c1c@trace-printer cg4c1c@trace-printer) (set! cg4c1e@command-line (cg2a04@cg28e2@make-parameter (get-command-line))) (set! cg4d76@cg4c1e@command-line cg4c1e@command-line) (set! cg4c20@local-library-path (lambda (cg4d01@filename) (cg2cbe@cg2afa@library-path))) (set! cg4d77@cg4c20@local-library-path cg4c20@local-library-path) (set! cg4c22@load/args (lambda (cg4d03@filename . cg4d05@args) (begin (apply cg4c32@load-r6rs-top-level cg4d03@filename 'load cg4d05@args) (void)))) (set! cg4d78@cg4c22@load/args cg4c22@load/args) (set! cg4c24@load (lambda (cg4d07@filename) (begin (apply cg4c32@load-r6rs-top-level cg4d07@filename 'load (cg4c1e@command-line)) (void)))) (set! cg4d79@cg4c24@load cg4c24@load) (set! cg4c26@ironscheme-build (lambda () (cg4c24@load '"ironscheme-buildscript.ss"))) (set! cg4d7a@cg4c26@ironscheme-build cg4c26@ironscheme-build) (set! cg4c28@eval-top-level (lambda (cg4d09@x) (cg4be5@cg317b@eval cg4d09@x (cg4bfc@cg31a9@interaction-environment)))) (set! cg4d7b@cg4c28@eval-top-level cg4c28@eval-top-level) (set! cg4c2a@compile-system-libraries (lambda () (cg4c28@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! cg4d7c@cg4c2a@compile-system-libraries cg4c2a@compile-system-libraries) (set! cg4c2c@compile (lambda (cg4d0b@filename) (cg4c32@load-r6rs-top-level cg4d0b@filename 'compile))) (set! cg4d7d@cg4c2c@compile cg4c2c@compile) (set! cg4c2e@compile->closure (lambda (cg4d0d@filename) (cg4c32@load-r6rs-top-level cg4d0d@filename 'closure))) (set! cg4d7e@cg4c2e@compile->closure cg4c2e@compile->closure) (set! cg4c30@pre-compile-r6rs-file (lambda (cg4d0f@filename) (cg4c32@load-r6rs-top-level cg4d0f@filename 'compile))) (set! cg4d7f@cg4c30@pre-compile-r6rs-file cg4c30@pre-compile-r6rs-file) (set! cg4c32@load-r6rs-top-level (lambda (cg4d11@filename cg4d12@how . cg4d15@args) (begin (cg2cbe@cg2afa@library-path (cg4c20@local-library-path cg4d11@filename)) (let ((cg4d17@x* (with-input-from-file cg4d11@filename (lambda () (let cg4d19@f () (let ((cg4d1b@x (cg29f6@cg28c6@read-annotated))) (if (eof-object? cg4d1b@x) '() (cons cg4d1b@x (cg4d19@f))))))))) (let ((cg4d1d@t cg4d12@how)) (if (memv cg4d1d@t '(closure)) (cg4bfb@cg31a7@pre-compile-r6rs-top-level cg4d17@x*) (if (memv cg4d1d@t '(load)) (begin (cg4c1e@command-line (cons cg4d11@filename (car cg4d15@args))) (cg2a05@cg28e4@mosh-cache-dir (create-mosh-cache-dir)) (if (cg2a05@cg28e4@mosh-cache-dir) (gensym-prefix-set! (cg4c38@prefix-inc! (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cg4d1f@file) ((call/cc (lambda (cg4d23@cg4d21) (lambda () (with-exception-handler (lambda (cg4d25@c) ((call/cc (lambda (cg4d27@cg4d22) (cg4d23@cg4d21 (lambda () (if '#t '#t (cg4d27@cg4d22 (lambda () (raise-continuable cg4d25@c)))))))))) (lambda () (delete-file (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/" cg4d1f@file))))))))) (directory-list (cg2a05@cg28e4@mosh-cache-dir))) (void)) (let ((cg4d29@compiled (cg4bfa@cg31a5@compile-r6rs-top-level cg4d17@x*))) (begin (if (and (cg2a05@cg28e4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cg2cc2@cg2b02@serialize-all cg29ff@cg28d8@serialize-library cg2a5b@cg2a14@compile-core-expr) (void)) (cg4d29@compiled)))) (if (memv cg4d1d@t '(compile)) (begin (cg4bfa@cg31a5@compile-r6rs-top-level cg4d17@x*) (cg2cc2@cg2b02@serialize-all cg29ff@cg28d8@serialize-library cg2a5b@cg2a14@compile-core-expr)) (if '#f '#f (void)))))))))) (set! cg4d80@cg4c32@load-r6rs-top-level cg4c32@load-r6rs-top-level) (set! cg4c34@load-r6rs-top-level-sexp (lambda (cg4d2b@import-spec cg4d2c@thunk) (let ((cg4d37@cg4d30 cg2cbe@cg2afa@library-path) (cg4d38@cg4d32 cg2a05@cg28e4@mosh-cache-dir) (cg4d39@cg4d34 (cg4c20@local-library-path '"")) (cg4d3a@cg4d36 (create-mosh-cache-dir))) (let ((cg4d3f@swap (lambda () (begin (let ((cg4d41@t (cg4d37@cg4d30))) (begin (cg4d37@cg4d30 cg4d39@cg4d34) (set! cg4d39@cg4d34 cg4d41@t))) (let ((cg4d43@t (cg4d38@cg4d32))) (begin (cg4d38@cg4d32 cg4d3a@cg4d36) (set! cg4d3a@cg4d36 cg4d43@t))))))) (dynamic-wind cg4d3f@swap (lambda () (begin (if (cg2a05@cg28e4@mosh-cache-dir) (gensym-prefix-set! (cg4c38@prefix-inc! (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((cg4d49@cg4d46 cg4c1e@command-line) (cg4d4a@cg4d48 '())) (let ((cg4d4d@swap (lambda () (let ((cg4d4f@t (cg4d49@cg4d46))) (begin (cg4d49@cg4d46 cg4d4a@cg4d48) (set! cg4d4a@cg4d48 cg4d4f@t)))))) (dynamic-wind cg4d4d@swap (lambda () ((cg4bfa@cg31a5@compile-r6rs-top-level (list (cons 'import cg4d2b@import-spec) (list cg4d2c@thunk))))) cg4d4d@swap))))) cg4d3f@swap))))) (set! cg4d81@cg4c34@load-r6rs-top-level-sexp cg4c34@load-r6rs-top-level-sexp) (set! cg4c36@prefix-inc (lambda (cg4d51@prefix-string) (let ((cg4d53@prefix (symbol->string cg4d51@prefix-string))) (let ((cg4d55@len (string-length cg4d53@prefix))) (let cg4d5d@loop ((cg4d57@i (- cg4d55@len '1)) (cg4d58@carry? '#t) (cg4d59@accum '())) (if (< cg4d57@i '0) (string->symbol (list->string (if cg4d58@carry? (cons '#\a cg4d59@accum) cg4d59@accum))) (if cg4d58@carry? (let ((cg4d5f@next-integer (+ '1 (char->integer (string-ref cg4d53@prefix cg4d57@i))))) (if (= cg4d5f@next-integer '123) (cg4d5d@loop (- cg4d57@i '1) '#f (cons '#\A cg4d59@accum)) (if (= cg4d5f@next-integer '91) (cg4d5d@loop (- cg4d57@i '1) '#t (cons '#\a cg4d59@accum)) (cg4d5d@loop (- cg4d57@i '1) '#f (cons (integer->char cg4d5f@next-integer) cg4d59@accum))))) (cg4d5d@loop (- cg4d57@i '1) '#f (cons (string-ref cg4d53@prefix cg4d57@i) cg4d59@accum))))))))) (set! cg4d82@cg4c36@prefix-inc cg4c36@prefix-inc) (set! cg4c38@prefix-inc! (lambda (cg4d61@file) (begin (if (not (file-exists? cg4d61@file)) (call-with-output-file cg4d61@file (lambda (cg4d63@port) (write 'd cg4d63@port))) (void)) (let ((cg4d65@prefix (call-with-input-file cg4d61@file read))) (if (main-vm?) (let ((cg4d67@next-prefix (cg4c36@prefix-inc cg4d65@prefix))) (begin (call-with-port (open-file-output-port cg4d61@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (cg4d69@port) (write cg4d67@next-prefix cg4d69@port))) cg4d65@prefix)) cg4d65@prefix))))) (set! cg4d83@cg4c38@prefix-inc! cg4c38@prefix-inc!) (begin (cg2cc3@cg2b04@current-precompiled-library-loader cg2a00@cg28da@load-serialized-library) (set-symbol-value! 'load cg4c24@load) (set-symbol-value! 'pre-compile-r6rs-file cg4c30@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs cg4c28@eval-top-level) (set-symbol-value! 'int-env-syms cg4bdc@cg3169@interaction-environment-symbols) (set-symbol-value! 'expanded2core cg2a5a@cg2a12@expanded->core) (set-symbol-value! 'trace-printer cg4c1c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (cg4c39@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list cg4c39@c))))) (cg4c0e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (cg4c0e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (cg4c0c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (cg4c0c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (cg4c0c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((cg4c3b@prefix (lambda (cg4c3d@ext cg4c3e@ls) (append (map (lambda (cg4c41@x) (string-append cg4c3d@ext cg4c41@x)) cg4c3e@ls) cg4c3e@ls)))) (cg2cbf@cg2afc@library-extensions (cg4c3b@prefix '".mosh" (cg2cbf@cg2afc@library-extensions)))) (current-exception-handler (lambda (cg4c43@c) (begin (if (condition? cg4c43@c) (cg4c14@condition-printer cg4c43@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" cg4c43@c)) cg4c43@c))) (if ((call/cc (lambda (cg4c47@cg4c45) (lambda () (with-exception-handler (lambda (cg4c49@c) ((call/cc (lambda (cg4c4b@cg4c46) (cg4c47@cg4c45 (lambda () (if '#t '#f (cg4c4b@cg4c46 (lambda () (raise-continuable cg4c49@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (cg4c34@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (cg4c1e@command-line)) (let ((cg4c55@cg4c4e cg4c1e@command-line) (cg4c56@cg4c50 cg2a05@cg28e4@mosh-cache-dir) (cg4c57@cg4c52 '()) (cg4c58@cg4c54 (create-mosh-cache-dir))) (let ((cg4c5d@swap (lambda () (begin (let ((cg4c5f@t (cg4c55@cg4c4e))) (begin (cg4c55@cg4c4e cg4c57@cg4c52) (set! cg4c57@cg4c52 cg4c5f@t))) (let ((cg4c61@t (cg4c56@cg4c50))) (begin (cg4c56@cg4c50 cg4c58@cg4c54) (set! cg4c58@cg4c54 cg4c61@t))))))) (dynamic-wind cg4c5d@swap (lambda () (begin (if (cg2a05@cg28e4@mosh-cache-dir) (gensym-prefix-set! (cg4c38@prefix-inc! (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (cg4c1a@repl))) cg4c5d@swap))) (begin (cg2cbe@cg2afa@library-path (cg4c20@local-library-path (car (cg4c1e@command-line)))) (set! cg4c0a@x* (with-input-from-file (car (cg4c1e@command-line)) (lambda () (let cg4c63@f () (let ((cg4c65@x (cg29f6@cg28c6@read-annotated))) (if (eof-object? cg4c65@x) '() (cons cg4c65@x (cg4c63@f)))))))) (cg4c1e@command-line (cons (car (cg4c1e@command-line)) (cdr (cg4c1e@command-line)))) (cg2a05@cg28e4@mosh-cache-dir (create-mosh-cache-dir)) (if (cg2a05@cg28e4@mosh-cache-dir) (gensym-prefix-set! (cg4c38@prefix-inc! (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cg4c67@file) ((call/cc (lambda (cg4c6b@cg4c69) (lambda () (with-exception-handler (lambda (cg4c6d@c) ((call/cc (lambda (cg4c6f@cg4c6a) (cg4c6b@cg4c69 (lambda () (if '#t '#t (cg4c6f@cg4c6a (lambda () (raise-continuable cg4c6d@c)))))))))) (lambda () (delete-file (string-append (cg2a05@cg28e4@mosh-cache-dir) '"/" cg4c67@file))))))))) (directory-list (cg2a05@cg28e4@mosh-cache-dir))) (void)) (let ((cg4c71@compiled (cg4bfa@cg31a5@compile-r6rs-top-level cg4c0a@x*))) (begin (if (and (cg2a05@cg28e4@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cg2cc2@cg2b02@serialize-all cg29ff@cg28d8@serialize-library cg2a5b@cg2a14@compile-core-expr) (void)) (cg4c71@compiled))))))))
