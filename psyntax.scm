;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! gQ28c3@library-file-path->cache-path (unspecified)) (set! gQ28c5@read-annotated (unspecified)) (set! gQ28c7@annotation-stripped (unspecified)) (set! gQ28c9@annotation? (unspecified)) (set! gQ28cb@annotation-source (unspecified)) (set! gQ28cd@annotation-expression (unspecified)) (set! gQ28cf@scm->fasl (unspecified)) (set! gQ28d1@fasl-save (unspecified)) (set! gQ28d3@fasl-load (unspecified)) (set! gQ28d5@verbose? (unspecified)) (set! gQ28d7@serialize-library (unspecified)) (set! gQ28d9@load-serialized-library (unspecified)) (set! gQ28db@make-record-printer (unspecified)) (set! gQ28dd@compile-core (unspecified)) (set! gQ28df@read-library-source-file (unspecified)) (set! gQ28e1@make-parameter (unspecified)) (set! gQ28e3@mosh-cache-dir (unspecified)) (set! gQ2979@file-options-spec (unspecified)) (set! gQ28c3@library-file-path->cache-path (lambda (gQ297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gQ2980@gQ297d gQ2981@gQ297f) (let ((gQ2984@extract gQ2981@gQ297f) (gQ2985@p gQ2980@gQ297d)) (letrec* ((gQ2989@display-hex (lambda (gQ2992@n) (if (<= '0 gQ2992@n '9) (display gQ2992@n gQ2985@p) (display (integer->char (+ (char->integer '#\a) (- gQ2992@n '10))) gQ2985@p))))) (begin (let gQ298c@f ((gQ298a@ls (string-split gQ297a@x '#\/))) (if (not (null? gQ298a@ls)) (begin (display '"_" gQ2985@p) (for-each (lambda (gQ298e@c) (if (or (char<=? '#\a gQ298e@c '#\z) (char<=? '#\A gQ298e@c '#\Z) (char<=? '#\0 gQ298e@c '#\9) (memv gQ298e@c '(#\- #\. #\_ #\~))) (display gQ298e@c gQ2985@p) (begin (display '"%" gQ2985@p) (let ((gQ2990@n (char->integer gQ298e@c))) (begin (gQ2989@display-hex (quotient gQ2990@n '16)) (gQ2989@display-hex (remainder gQ2990@n '16))))))) (string->list (car gQ298a@ls))) (gQ298c@f (cdr gQ298a@ls))) (void))) (gQ2984@extract)))))))) (set! gQ29f4@gQ28c3@library-file-path->cache-path gQ28c3@library-file-path->cache-path) (set! gQ28c5@read-annotated read) (set! gQ29f5@gQ28c5@read-annotated gQ28c5@read-annotated) (set! gQ28c7@annotation-stripped (lambda (gQ2994@x) (gQ28cd@annotation-expression gQ2994@x))) (set! gQ29f6@gQ28c7@annotation-stripped gQ28c7@annotation-stripped) (set! gQ28c9@annotation? (lambda (gQ2996@x) (source-info gQ2996@x))) (set! gQ29f7@gQ28c9@annotation? gQ28c9@annotation?) (set! gQ28cb@annotation-source (lambda (gQ2998@x) (source-info gQ2998@x))) (set! gQ29f8@gQ28cb@annotation-source gQ28cb@annotation-source) (set! gQ28cd@annotation-expression (lambda (gQ299a@x) (if (pair? gQ299a@x) (cons (car gQ299a@x) (cdr gQ299a@x)) (if (procedure? gQ299a@x) (set-source-info! gQ299a@x '#f) gQ299a@x)))) (set! gQ29f9@gQ28cd@annotation-expression gQ28cd@annotation-expression) (set! gQ28cf@scm->fasl (lambda (gQ299c@filename) (string-append (gQ28e3@mosh-cache-dir) '"/" (gQ28c3@library-file-path->cache-path gQ299c@filename) '".mosh-fasl"))) (set! gQ29fa@gQ28cf@scm->fasl gQ28cf@scm->fasl) (set! gQ28d1@fasl-save (lambda (gQ299e@filename gQ299f@obj) (call-with-port (open-file-output-port gQ299e@filename) (lambda (gQ29a2@port) ((symbol-value 'fasl-write!) gQ299f@obj gQ29a2@port))))) (set! gQ29fb@gQ28d1@fasl-save gQ28d1@fasl-save) (set! gQ28d3@fasl-load (lambda (gQ29a4@filename) (call-with-port (open-file-input-port gQ29a4@filename) (symbol-value 'fasl-read!)))) (set! gQ29fc@gQ28d3@fasl-load gQ28d3@fasl-load) (set! gQ28d5@verbose? (symbol-value '%verbose)) (set! gQ29fd@gQ28d5@verbose? gQ28d5@verbose?) (set! gQ28d7@serialize-library (lambda (gQ29a6@filename gQ29a7@obj) (begin (if gQ28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." gQ29a6@filename) (void)) (let ((gQ29aa@expanded2core (symbol-value 'expanded2core))) (let ((gQ29ac@compile (symbol-value 'compile-w/o-halt))) (let ((gQ29ae@code gQ29a7@obj)) (let ((gQ29b0@pivot (cddddr (cddddr gQ29ae@code)))) (let ((gQ29b2@visit (gQ29ac@compile (gQ29aa@expanded2core (car gQ29b0@pivot))))) (begin (set-car! gQ29b0@pivot gQ29b2@visit) (let ((gQ29b4@pivot (cdr gQ29b0@pivot))) (let ((gQ29b6@invoke (gQ29ac@compile (gQ29aa@expanded2core (car gQ29b4@pivot))))) (set-car! gQ29b4@pivot gQ29b6@invoke))))))))) (let ((gQ29b8@fasl-file (gQ28cf@scm->fasl gQ29a6@filename))) (begin (if (file-exists? gQ29b8@fasl-file) (delete-file gQ29b8@fasl-file) (void)) ((call/cc (lambda (gQ29bc@gQ29ba) (lambda () (with-exception-handler (lambda (gQ29be@c) ((call/cc (lambda (gQ29c0@gQ29bb) (gQ29bc@gQ29ba (lambda () (if '#t (begin (if gQ28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" gQ29a6@filename) (void)) (if (file-exists? gQ29b8@fasl-file) (delete-file gQ29b8@fasl-file) (void)) '#f) (gQ29c0@gQ29bb (lambda () (raise-continuable gQ29be@c)))))))))) (lambda () (gQ28d1@fasl-save gQ29b8@fasl-file gQ29a7@obj)))))))))))) (set! gQ29fe@gQ28d7@serialize-library gQ28d7@serialize-library) (set! gQ28d9@load-serialized-library (lambda (gQ29c2@filename gQ29c3@obj) (and (gQ28e3@mosh-cache-dir) (let ((gQ29c6@fasl-file (gQ28cf@scm->fasl gQ29c2@filename))) (if (and (file-exists? gQ29c6@fasl-file) ((symbol-value 'file-newer?) gQ29c6@fasl-file gQ29c2@filename)) (let ((gQ29c8@expanded2core (symbol-value 'expanded2core))) (let ((gQ29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((gQ29cc@code (gQ28d3@fasl-load gQ29c6@fasl-file))) (let ((gQ29ce@pivot (cddddr (cddddr gQ29cc@code)))) (let ((gQ29d0@visit (car gQ29ce@pivot))) (let ((gQ29d2@visit-proc (lambda () (gQ29ca@eval-compiled-core gQ29d0@visit)))) (begin (set-car! gQ29ce@pivot gQ29d2@visit-proc) (let ((gQ29d4@pivot (cdr gQ29ce@pivot))) (let ((gQ29d6@invoke (car gQ29d4@pivot))) (begin (set-car! gQ29d4@pivot (lambda () (gQ29ca@eval-compiled-core gQ29d6@invoke))) (apply gQ29c3@obj gQ29cc@code))))))))))) '#f))))) (set! gQ29ff@gQ28d9@load-serialized-library gQ28d9@load-serialized-library) (set! gQ28db@make-record-printer (lambda (gQ29d8@name gQ29d9@printer) (lambda gQ29dc@x (begin (display '"record printer") (for-each display gQ29dc@x))))) (set! gQ2a00@gQ28db@make-record-printer gQ28db@make-record-printer) (set! gQ28dd@compile-core (lambda gQ29de@x (apply error 'comile-core '"not implementated" gQ29de@x))) (set! gQ2a01@gQ28dd@compile-core gQ28dd@compile-core) (set! gQ28df@read-library-source-file (lambda (gQ29e0@file-name) (with-input-from-file gQ29e0@file-name gQ28c5@read-annotated))) (set! gQ2a02@gQ28df@read-library-source-file gQ28df@read-library-source-file) (set! gQ28e1@make-parameter (lambda gQ29f0 (let ((gQ29f1 (length gQ29f0))) (if (= gQ29f1 '1) (apply (lambda (gQ29e2@x) (gQ28e1@make-parameter gQ29e2@x (lambda (gQ29e4@x) gQ29e4@x))) gQ29f0) (if (= gQ29f1 '2) (apply (lambda (gQ29e6@x gQ29e7@fender) (let ((gQ29ea@x (gQ29e7@fender gQ29e6@x))) (lambda gQ29ee (let ((gQ29ef (length gQ29ee))) (if (= gQ29ef '0) (apply (lambda () gQ29ea@x) gQ29ee) (if (= gQ29ef '1) (apply (lambda (gQ29ec@v) (set! gQ29ea@x (gQ29e7@fender gQ29ec@v))) gQ29ee) (error 'apply '"invalid arg count"))))))) gQ29f0) (error 'apply '"invalid arg count")))))) (set! gQ2a03@gQ28e1@make-parameter gQ28e1@make-parameter) (set! gQ28e3@mosh-cache-dir (gQ28e1@make-parameter '#f)) (set! gQ2a04@gQ28e3@mosh-cache-dir gQ28e3@mosh-cache-dir) (set! gQ2979@file-options-spec (lambda (gQ29f2@x) gQ29f2@x)) (set! gQ2a05@gQ2979@file-options-spec gQ2979@file-options-spec) (void))
(begin (set! gQ2a0b@current-primitive-locations (unspecified)) (set! gQ2a0d@mutable? (unspecified)) (set! gQ2a0f@rewriter (unspecified)) (set! gQ2a11@expanded->core (unspecified)) (set! gQ2a13@compile-core-expr (unspecified)) (set! gQ2a15@pretty-print (unspecified)) (set! gQ2a17@compile-core-expr-to-port (unspecified)) (set! gQ2a0b@current-primitive-locations (gQ2a03@gQ28e1@make-parameter (lambda (gQ2a18@x) '#f) (lambda (gQ2a1a@p) gQ2a1a@p))) (set! gQ2a56@gQ2a0b@current-primitive-locations gQ2a0b@current-primitive-locations) (set! gQ2a0d@mutable? (lambda (gQ2a1c@x) (or (pair? gQ2a1c@x) (vector? gQ2a1c@x) (hashtable? gQ2a1c@x)))) (set! gQ2a57@gQ2a0d@mutable? gQ2a0d@mutable?) (set! gQ2a0f@rewriter (lambda (gQ2a1e@quote-hack?) (letrec* ((gQ2a21@f (lambda (gQ2a22@x) (if (pair? gQ2a22@x) (let ((gQ2a24@t (car gQ2a22@x))) (if (memv gQ2a24@t '(quote)) (if (and gQ2a1e@quote-hack? (gQ2a0d@mutable? (cadr gQ2a22@x))) (let ((gQ2a26@g (gensym))) (begin (set-symbol-value! gQ2a26@g (cadr gQ2a22@x)) gQ2a26@g)) gQ2a22@x) (if (memv gQ2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (gQ2a28@x) (cons (car gQ2a28@x) (map gQ2a21@f (cdr gQ2a28@x)))) (cdr gQ2a22@x))) (if (memv gQ2a24@t '(lambda)) (cons* 'lambda (cadr gQ2a22@x) (map gQ2a21@f (cddr gQ2a22@x))) (if (memv gQ2a24@t '(letrec)) (let ((gQ2a2a@bindings (cadr gQ2a22@x)) (gQ2a2b@body* (cddr gQ2a22@x))) (let ((gQ2a2e@lhs* (map car gQ2a2a@bindings)) (gQ2a2f@rhs* (map cadr gQ2a2a@bindings))) (cons* 'letrec (map list gQ2a2e@lhs* (map gQ2a21@f gQ2a2f@rhs*)) (map gQ2a21@f gQ2a2b@body*)))) (if (memv gQ2a24@t '(letrec*)) (let ((gQ2a32@bindings (cadr gQ2a22@x)) (gQ2a33@body* (cddr gQ2a22@x))) (let ((gQ2a36@lhs* (map car gQ2a32@bindings)) (gQ2a37@rhs* (map cadr gQ2a32@bindings))) (cons* 'letrec* (map list gQ2a36@lhs* (map gQ2a21@f gQ2a37@rhs*)) (map gQ2a21@f gQ2a33@body*)))) (if (memv gQ2a24@t '(library-letrec*)) (let ((gQ2a3a@name (cadr gQ2a22@x)) (gQ2a3b@x (cdr gQ2a22@x))) (let ((gQ2a3e@bindings (cadr gQ2a3b@x)) (gQ2a3f@body* (cddr gQ2a3b@x))) (let ((gQ2a42@lhs* (map car gQ2a3e@bindings)) (gQ2a43@lhs** (map cadr gQ2a3e@bindings)) (gQ2a44@rhs* (map caddr gQ2a3e@bindings))) (cons* 'library-letrec* gQ2a3a@name (map list gQ2a42@lhs* gQ2a43@lhs** (map gQ2a21@f gQ2a44@rhs*)) (map gQ2a21@f gQ2a3f@body*))))) (if (memv gQ2a24@t '(begin)) (cons 'begin (map gQ2a21@f (cdr gQ2a22@x))) (if (memv gQ2a24@t '(set!)) (list 'set! (cadr gQ2a22@x) (gQ2a21@f (caddr gQ2a22@x))) (if (memv gQ2a24@t '(primitive)) (let ((gQ2a48@op (cadr gQ2a22@x))) (let ((gQ2a4a@t ((gQ2a0b@current-primitive-locations) gQ2a48@op))) (if gQ2a4a@t ((lambda (gQ2a4c@loc) gQ2a4c@loc) gQ2a4a@t) gQ2a48@op))) (if (memv gQ2a24@t '(define)) gQ2a22@x (if (list? gQ2a22@x) (map gQ2a21@f gQ2a22@x) (error 'rewrite '"invalid form ~s ~s" gQ2a22@x (list? gQ2a22@x)))))))))))))) gQ2a22@x)))) gQ2a21@f))) (set! gQ2a58@gQ2a0f@rewriter gQ2a0f@rewriter) (set! gQ2a11@expanded->core (lambda (gQ2a4e@x) ((gQ2a0f@rewriter '#f) gQ2a4e@x))) (set! gQ2a59@gQ2a11@expanded->core gQ2a11@expanded->core) (set! gQ2a13@compile-core-expr (lambda (gQ2a50@x) ((gQ2a0f@rewriter '#f) gQ2a50@x))) (set! gQ2a5a@gQ2a13@compile-core-expr gQ2a13@compile-core-expr) (set! gQ2a15@pretty-print write) (set! gQ2a5b@gQ2a15@pretty-print gQ2a15@pretty-print) (set! gQ2a17@compile-core-expr-to-port (lambda (gQ2a52@x gQ2a53@p) (gQ2a15@pretty-print ((gQ2a0f@rewriter '#f) gQ2a52@x) gQ2a53@p))) (set! gQ2a5c@gQ2a17@compile-core-expr-to-port gQ2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! gQ2aab@make-collection (unspecified)) (set! gQ2aad@current-library-collection (unspecified)) (set! gQ2aaf@rp (unspecified)) (set! gQ2ab9@library? (unspecified)) (set! gQ2abb@library-id (unspecified)) (set! gQ2abd@set-library-id! (unspecified)) (set! gQ2abf@library-name (unspecified)) (set! gQ2ac1@set-library-name! (unspecified)) (set! gQ2ac3@library-version (unspecified)) (set! gQ2ac5@set-library-version! (unspecified)) (set! gQ2ac7@library-imp* (unspecified)) (set! gQ2ac9@set-library-imp*! (unspecified)) (set! gQ2acb@library-vis* (unspecified)) (set! gQ2acd@set-library-vis*! (unspecified)) (set! gQ2acf@library-inv* (unspecified)) (set! gQ2ad1@set-library-inv*! (unspecified)) (set! gQ2ad3@library-subst (unspecified)) (set! gQ2ad5@set-library-subst! (unspecified)) (set! gQ2ad7@library-env (unspecified)) (set! gQ2ad9@set-library-env! (unspecified)) (set! gQ2adb@library-visit-state (unspecified)) (set! gQ2add@set-library-visit-state! (unspecified)) (set! gQ2adf@library-invoke-state (unspecified)) (set! gQ2ae1@set-library-invoke-state! (unspecified)) (set! gQ2ae3@library-visit-code (unspecified)) (set! gQ2ae5@set-library-visit-code! (unspecified)) (set! gQ2ae7@library-invoke-code (unspecified)) (set! gQ2ae9@set-library-invoke-code! (unspecified)) (set! gQ2aeb@library-visible? (unspecified)) (set! gQ2aed@set-library-visible?! (unspecified)) (set! gQ2aef@library-source-file-name (unspecified)) (set! gQ2af1@set-library-source-file-name! (unspecified)) (set! gQ2af3@dummy (unspecified)) (set! gQ2af5@find-dependencies (unspecified)) (set! gQ2af7@find-library-by (unspecified)) (set! gQ2af9@library-path (unspecified)) (set! gQ2afb@library-extensions (unspecified)) (set! gQ2afd@library-name->file-name (unspecified)) (set! gQ2aff@file-locator (unspecified)) (set! gQ2b01@serialize-all (unspecified)) (set! gQ2b03@current-precompiled-library-loader (unspecified)) (set! gQ2b05@try-load-from-file (unspecified)) (set! gQ2b07@library-loader (unspecified)) (set! gQ2b09@current-library-expander (unspecified)) (set! gQ2b0b@external-pending-libraries (unspecified)) (set! gQ2b0d@find-external-library (unspecified)) (set! gQ2b0f@find-library-by-name (unspecified)) (set! gQ2b11@library-exists? (unspecified)) (set! gQ2b13@find-library-by-spec/die (unspecified)) (set! gQ2b15@label->binding-table (unspecified)) (set! gQ2b17@install-library-record (unspecified)) (set! gQ2b19@install-library (unspecified)) (set! gQ2b1b@imported-label->binding (unspecified)) (set! gQ2b1d@invoke-library (unspecified)) (set! gQ2b1f@visit-library (unspecified)) (set! gQ2b21@invoke-library-by-spec (unspecified)) (set! gQ2b23@installed-libraries (unspecified)) (set! gQ2b25@library-spec (unspecified)) (set! gQ2aab@make-collection (lambda () (let ((gQ2b26@set '())) (letrec* ((gQ2b29@set-cons (lambda (gQ2b2e@x gQ2b2f@ls) (if (memq gQ2b2e@x gQ2b2f@ls) gQ2b2f@ls (cons gQ2b2e@x gQ2b2f@ls))))) (lambda gQ2b2c (let ((gQ2b2d (length gQ2b2c))) (if (= gQ2b2d '0) (apply (lambda () gQ2b26@set) gQ2b2c) (if (= gQ2b2d '1) (apply (lambda (gQ2b2a@x) (set! gQ2b26@set (gQ2b29@set-cons gQ2b2a@x gQ2b26@set))) gQ2b2c) (error 'apply '"invalid arg count"))))))))) (set! gQ2c9a@gQ2aab@make-collection gQ2aab@make-collection) (set! gQ2aad@current-library-collection (gQ2a03@gQ28e1@make-parameter (gQ2aab@make-collection) (lambda (gQ2b32@x) (begin (if (not (procedure? gQ2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" gQ2b32@x) (void)) gQ2b32@x)))) (set! gQ2c9b@gQ2aad@current-library-collection gQ2aad@current-library-collection) (set! gQ2aaf@rp (gQ2a00@gQ28db@make-record-printer 'library (lambda (gQ2b34@x gQ2b35@p gQ2b36@wr) (begin (if (not (gQ2ab9@library? gQ2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (gQ2ac3@library-version gQ2b34@x)) (gQ2abf@library-name gQ2b34@x) (append (gQ2abf@library-name gQ2b34@x) (list (gQ2ac3@library-version gQ2b34@x))))) gQ2b35@p))))) (set! gQ2c9c@gQ2aaf@rp gQ2aaf@rp) (set! gQ2ab9@library? (lambda (gQ2b3a@x) (and (simple-struct? gQ2b3a@x) (eq? (simple-struct-name gQ2b3a@x) 'library)))) (set! gQ2c9d@gQ2ab9@library? gQ2ab9@library?) (set! gQ2abb@library-id (lambda (gQ2b3c@x) (simple-struct-ref gQ2b3c@x '0))) (set! gQ2c9e@gQ2abb@library-id gQ2abb@library-id) (set! gQ2abd@set-library-id! (lambda (gQ2b3e@x gQ2b3f@val) (simple-struct-set! gQ2b3e@x '0 gQ2b3f@val))) (set! gQ2c9f@gQ2abd@set-library-id! gQ2abd@set-library-id!) (set! gQ2abf@library-name (lambda (gQ2b42@x) (simple-struct-ref gQ2b42@x '1))) (set! gQ2ca0@gQ2abf@library-name gQ2abf@library-name) (set! gQ2ac1@set-library-name! (lambda (gQ2b44@x gQ2b45@val) (simple-struct-set! gQ2b44@x '1 gQ2b45@val))) (set! gQ2ca1@gQ2ac1@set-library-name! gQ2ac1@set-library-name!) (set! gQ2ac3@library-version (lambda (gQ2b48@x) (simple-struct-ref gQ2b48@x '2))) (set! gQ2ca2@gQ2ac3@library-version gQ2ac3@library-version) (set! gQ2ac5@set-library-version! (lambda (gQ2b4a@x gQ2b4b@val) (simple-struct-set! gQ2b4a@x '2 gQ2b4b@val))) (set! gQ2ca3@gQ2ac5@set-library-version! gQ2ac5@set-library-version!) (set! gQ2ac7@library-imp* (lambda (gQ2b4e@x) (simple-struct-ref gQ2b4e@x '3))) (set! gQ2ca4@gQ2ac7@library-imp* gQ2ac7@library-imp*) (set! gQ2ac9@set-library-imp*! (lambda (gQ2b50@x gQ2b51@val) (simple-struct-set! gQ2b50@x '3 gQ2b51@val))) (set! gQ2ca5@gQ2ac9@set-library-imp*! gQ2ac9@set-library-imp*!) (set! gQ2acb@library-vis* (lambda (gQ2b54@x) (simple-struct-ref gQ2b54@x '4))) (set! gQ2ca6@gQ2acb@library-vis* gQ2acb@library-vis*) (set! gQ2acd@set-library-vis*! (lambda (gQ2b56@x gQ2b57@val) (simple-struct-set! gQ2b56@x '4 gQ2b57@val))) (set! gQ2ca7@gQ2acd@set-library-vis*! gQ2acd@set-library-vis*!) (set! gQ2acf@library-inv* (lambda (gQ2b5a@x) (simple-struct-ref gQ2b5a@x '5))) (set! gQ2ca8@gQ2acf@library-inv* gQ2acf@library-inv*) (set! gQ2ad1@set-library-inv*! (lambda (gQ2b5c@x gQ2b5d@val) (simple-struct-set! gQ2b5c@x '5 gQ2b5d@val))) (set! gQ2ca9@gQ2ad1@set-library-inv*! gQ2ad1@set-library-inv*!) (set! gQ2ad3@library-subst (lambda (gQ2b60@x) (simple-struct-ref gQ2b60@x '6))) (set! gQ2caa@gQ2ad3@library-subst gQ2ad3@library-subst) (set! gQ2ad5@set-library-subst! (lambda (gQ2b62@x gQ2b63@val) (simple-struct-set! gQ2b62@x '6 gQ2b63@val))) (set! gQ2cab@gQ2ad5@set-library-subst! gQ2ad5@set-library-subst!) (set! gQ2ad7@library-env (lambda (gQ2b66@x) (simple-struct-ref gQ2b66@x '7))) (set! gQ2cac@gQ2ad7@library-env gQ2ad7@library-env) (set! gQ2ad9@set-library-env! (lambda (gQ2b68@x gQ2b69@val) (simple-struct-set! gQ2b68@x '7 gQ2b69@val))) (set! gQ2cad@gQ2ad9@set-library-env! gQ2ad9@set-library-env!) (set! gQ2adb@library-visit-state (lambda (gQ2b6c@x) (simple-struct-ref gQ2b6c@x '8))) (set! gQ2cae@gQ2adb@library-visit-state gQ2adb@library-visit-state) (set! gQ2add@set-library-visit-state! (lambda (gQ2b6e@x gQ2b6f@val) (simple-struct-set! gQ2b6e@x '8 gQ2b6f@val))) (set! gQ2caf@gQ2add@set-library-visit-state! gQ2add@set-library-visit-state!) (set! gQ2adf@library-invoke-state (lambda (gQ2b72@x) (simple-struct-ref gQ2b72@x '9))) (set! gQ2cb0@gQ2adf@library-invoke-state gQ2adf@library-invoke-state) (set! gQ2ae1@set-library-invoke-state! (lambda (gQ2b74@x gQ2b75@val) (simple-struct-set! gQ2b74@x '9 gQ2b75@val))) (set! gQ2cb1@gQ2ae1@set-library-invoke-state! gQ2ae1@set-library-invoke-state!) (set! gQ2ae3@library-visit-code (lambda (gQ2b78@x) (simple-struct-ref gQ2b78@x '10))) (set! gQ2cb2@gQ2ae3@library-visit-code gQ2ae3@library-visit-code) (set! gQ2ae5@set-library-visit-code! (lambda (gQ2b7a@x gQ2b7b@val) (simple-struct-set! gQ2b7a@x '10 gQ2b7b@val))) (set! gQ2cb3@gQ2ae5@set-library-visit-code! gQ2ae5@set-library-visit-code!) (set! gQ2ae7@library-invoke-code (lambda (gQ2b7e@x) (simple-struct-ref gQ2b7e@x '11))) (set! gQ2cb4@gQ2ae7@library-invoke-code gQ2ae7@library-invoke-code) (set! gQ2ae9@set-library-invoke-code! (lambda (gQ2b80@x gQ2b81@val) (simple-struct-set! gQ2b80@x '11 gQ2b81@val))) (set! gQ2cb5@gQ2ae9@set-library-invoke-code! gQ2ae9@set-library-invoke-code!) (set! gQ2aeb@library-visible? (lambda (gQ2b84@x) (simple-struct-ref gQ2b84@x '12))) (set! gQ2cb6@gQ2aeb@library-visible? gQ2aeb@library-visible?) (set! gQ2aed@set-library-visible?! (lambda (gQ2b86@x gQ2b87@val) (simple-struct-set! gQ2b86@x '12 gQ2b87@val))) (set! gQ2cb7@gQ2aed@set-library-visible?! gQ2aed@set-library-visible?!) (set! gQ2aef@library-source-file-name (lambda (gQ2b8a@x) (simple-struct-ref gQ2b8a@x '13))) (set! gQ2cb8@gQ2aef@library-source-file-name gQ2aef@library-source-file-name) (set! gQ2af1@set-library-source-file-name! (lambda (gQ2b8c@x gQ2b8d@val) (simple-struct-set! gQ2b8c@x '13 gQ2b8d@val))) (set! gQ2cb9@gQ2af1@set-library-source-file-name! gQ2af1@set-library-source-file-name!) (set! gQ2af3@dummy '3) (set! gQ2cba@gQ2af3@dummy gQ2af3@dummy) (set! gQ2af5@find-dependencies (lambda (gQ2b90@ls) (if (null? gQ2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! gQ2cbb@gQ2af5@find-dependencies gQ2af5@find-dependencies) (set! gQ2af7@find-library-by (lambda (gQ2b92@pred) (let gQ2b96@f ((gQ2b94@ls ((gQ2aad@current-library-collection)))) (if (null? gQ2b94@ls) '#f (if (gQ2b92@pred (car gQ2b94@ls)) (car gQ2b94@ls) (gQ2b96@f (cdr gQ2b94@ls))))))) (set! gQ2cbc@gQ2af7@find-library-by gQ2af7@find-library-by) (set! gQ2af9@library-path (gQ2a03@gQ28e1@make-parameter '(".") (lambda (gQ2b98@x) (if (and (list? gQ2b98@x) (for-all string? gQ2b98@x)) (map (lambda (gQ2b9a@x) gQ2b9a@x) gQ2b98@x) (assertion-violation 'library-path '"not a list of strings" gQ2b98@x))))) (set! gQ2cbd@gQ2af9@library-path gQ2af9@library-path) (set! gQ2afb@library-extensions (gQ2a03@gQ28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (gQ2b9c@x) (if (and (list? gQ2b9c@x) (for-all string? gQ2b9c@x)) (map (lambda (gQ2b9e@x) gQ2b9e@x) gQ2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" gQ2b9c@x))))) (set! gQ2cbe@gQ2afb@library-extensions gQ2afb@library-extensions) (set! gQ2afd@library-name->file-name (lambda (gQ2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gQ2ba6@gQ2ba3 gQ2ba7@gQ2ba5) (let ((gQ2baa@extract gQ2ba7@gQ2ba5) (gQ2bab@p gQ2ba6@gQ2ba3)) (letrec* ((gQ2baf@display-hex (lambda (gQ2bb8@n) (if (<= '0 gQ2bb8@n '9) (display gQ2bb8@n gQ2bab@p) (display (integer->char (+ (char->integer '#\a) (- gQ2bb8@n '10))) gQ2bab@p))))) (begin (let gQ2bb2@f ((gQ2bb0@ls gQ2ba0@x)) (if (not (null? gQ2bb0@ls)) (begin (display '"/" gQ2bab@p) (for-each (lambda (gQ2bb4@c) (if (or (char<=? '#\a gQ2bb4@c '#\z) (char<=? '#\A gQ2bb4@c '#\Z) (char<=? '#\0 gQ2bb4@c '#\9) (memv gQ2bb4@c '(#\- #\. #\_ #\~))) (display gQ2bb4@c gQ2bab@p) (begin (display '"%" gQ2bab@p) (let ((gQ2bb6@n (char->integer gQ2bb4@c))) (begin (gQ2baf@display-hex (quotient gQ2bb6@n '16)) (gQ2baf@display-hex (remainder gQ2bb6@n '16))))))) (string->list (symbol->string (car gQ2bb0@ls)))) (gQ2bb2@f (cdr gQ2bb0@ls))) (void))) (gQ2baa@extract)))))))) (set! gQ2cbf@gQ2afd@library-name->file-name gQ2afd@library-name->file-name) (set! gQ2aff@file-locator (gQ2a03@gQ28e1@make-parameter (lambda (gQ2bba@x) (let ((gQ2bbc@str (gQ2afd@library-name->file-name gQ2bba@x))) (let gQ2bc4@f ((gQ2bbe@ls (gQ2af9@library-path)) (gQ2bbf@exts (gQ2afb@library-extensions)) (gQ2bc0@failed-list '())) (if (null? gQ2bbe@ls) (letrec* ((gQ2bce@gQ2bc9 (make-record-type-descriptor '&library-resolution gQ4ecf@gQ4c16@&condition-rtd 'gQ2bcc '#f '#f '#((immutable library) (immutable files)))) (gQ2bd0@gQ2bcb '#f) (gQ2bd2@gQ2bca (make-record-constructor-descriptor gQ2bce@gQ2bc9 gQ4ed0@gQ4c18@&condition-rcd gQ2bd0@gQ2bcb)) (gQ2bd5@gQ2bc8 (record-predicate gQ2bce@gQ2bc9)) (gQ2bd7@make-library-resolution-condition (record-constructor gQ2bd2@gQ2bca)) (gQ2bd9@gQ2bc6 (record-accessor gQ2bce@gQ2bc9 '0)) (gQ2bdb@gQ2bc7 (record-accessor gQ2bce@gQ2bc9 '1)) (gQ2bdd@library-resolution-condition? (condition-predicate gQ2bce@gQ2bc9)) (gQ2bdf@condition-library (condition-accessor gQ2bce@gQ2bc9 gQ2bd9@gQ2bc6)) (gQ2be1@condition-files (condition-accessor gQ2bce@gQ2bc9 gQ2bdb@gQ2bc7))) (raise (condition (gQ4eef@gQ4cb0@make-error) (gQ4f11@gQ4d0c@make-who-condition 'expander) (gQ4ed5@gQ4c6d@make-message-condition '"cannot locate library in library-path") (gQ2bd7@make-library-resolution-condition gQ2bba@x (reverse gQ2bc0@failed-list))))) (if (null? gQ2bbf@exts) (gQ2bc4@f (cdr gQ2bbe@ls) (gQ2afb@library-extensions) gQ2bc0@failed-list) (let ((gQ2be2@name (string-append (car gQ2bbe@ls) gQ2bbc@str (car gQ2bbf@exts)))) (if (file-exists? gQ2be2@name) gQ2be2@name (gQ2bc4@f gQ2bbe@ls (cdr gQ2bbf@exts) (cons gQ2be2@name gQ2bc0@failed-list))))))))) (lambda (gQ2be4@f) (if (procedure? gQ2be4@f) gQ2be4@f (assertion-violation 'file-locator '"not a procedure" gQ2be4@f))))) (set! gQ2cc0@gQ2aff@file-locator gQ2aff@file-locator) (set! gQ2b01@serialize-all (lambda (gQ2be6@serialize gQ2be7@compile) (letrec* ((gQ2beb@library-desc (lambda (gQ2bee@x) (list (gQ2abb@library-id gQ2bee@x) (gQ2abf@library-name gQ2bee@x))))) (for-each (lambda (gQ2bec@x) (if (gQ2aef@library-source-file-name gQ2bec@x) (gQ2be6@serialize (gQ2aef@library-source-file-name gQ2bec@x) (list (gQ2abb@library-id gQ2bec@x) (gQ2abf@library-name gQ2bec@x) (gQ2ac3@library-version gQ2bec@x) (map gQ2beb@library-desc (gQ2ac7@library-imp* gQ2bec@x)) (map gQ2beb@library-desc (gQ2acb@library-vis* gQ2bec@x)) (map gQ2beb@library-desc (gQ2acf@library-inv* gQ2bec@x)) (gQ2ad3@library-subst gQ2bec@x) (gQ2ad7@library-env gQ2bec@x) (gQ2be7@compile (gQ2ae3@library-visit-code gQ2bec@x)) (gQ2be7@compile (gQ2ae7@library-invoke-code gQ2bec@x)) (gQ2aeb@library-visible? gQ2bec@x))) (void))) ((gQ2aad@current-library-collection)))))) (set! gQ2cc1@gQ2b01@serialize-all gQ2b01@serialize-all) (set! gQ2b03@current-precompiled-library-loader (gQ2a03@gQ28e1@make-parameter (lambda (gQ2bf0@filename gQ2bf1@sk) '#f))) (set! gQ2cc2@gQ2b03@current-precompiled-library-loader gQ2b03@current-precompiled-library-loader) (set! gQ2b05@try-load-from-file (lambda (gQ2bf4@filename) ((gQ2b03@current-precompiled-library-loader) gQ2bf4@filename (lambda gQ2c1a (let ((gQ2c1b (length gQ2c1a))) (if (= gQ2c1b '11) (apply (lambda (gQ2bf6@id gQ2bf7@name gQ2bf8@ver gQ2bf9@imp* gQ2bfa@vis* gQ2bfb@inv* gQ2bfc@exp-subst gQ2bfd@exp-env gQ2bfe@visit-proc gQ2bff@invoke-proc gQ2c00@visible?) (let gQ2c0e@f ((gQ2c0c@deps (append gQ2bf9@imp* gQ2bfa@vis* gQ2bfb@inv*))) (if (null? gQ2c0c@deps) (begin (gQ2b19@install-library gQ2bf6@id gQ2bf7@name gQ2bf8@ver gQ2bf9@imp* gQ2bfa@vis* gQ2bfb@inv* gQ2bfc@exp-subst gQ2bfd@exp-env gQ2bfe@visit-proc gQ2bff@invoke-proc '#f '#f gQ2c00@visible? '#f) '#t) (let ((gQ2c10@d (car gQ2c0c@deps))) (let ((gQ2c12@label (car gQ2c10@d)) (gQ2c13@dname (cadr gQ2c10@d))) (let ((gQ2c16@l (gQ2b0f@find-library-by-name gQ2c13@dname))) (if (and (gQ2ab9@library? gQ2c16@l) (eq? gQ2c12@label (gQ2abb@library-id gQ2c16@l))) (gQ2c0e@f (cdr gQ2c0c@deps)) (begin (if gQ29fd@gQ28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" gQ2bf7@name gQ2c13@dname gQ2bf4@filename gQ2c16@l gQ2c12@label (gQ2abb@library-id gQ2c16@l)) (void)) '#f)))))))) gQ2c1a) (if (>= gQ2c1b '0) (apply (lambda gQ2c18@others '#f) gQ2c1a) (error 'apply '"invalid arg count")))))))) (set! gQ2cc3@gQ2b05@try-load-from-file gQ2b05@try-load-from-file) (set! gQ2b07@library-loader (gQ2a03@gQ28e1@make-parameter (lambda (gQ2c1c@x) (let ((gQ2c1e@file-name ((gQ2aff@file-locator) gQ2c1c@x))) (if (not gQ2c1e@file-name) (assertion-violation '#f '"cannot file library" gQ2c1c@x) (or (gQ2b05@try-load-from-file gQ2c1e@file-name) ((gQ2b09@current-library-expander) (gQ2a02@gQ28df@read-library-source-file gQ2c1e@file-name) gQ2c1e@file-name (lambda (gQ2c20@name) (if (not (fast-equal? gQ2c20@name gQ2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (gQ2c26@gQ2c23 gQ2c27@gQ2c25) (let ((gQ2c2a@e gQ2c27@gQ2c25) (gQ2c2b@p gQ2c26@gQ2c23)) (begin (display '"expected to find library " gQ2c2b@p) (write gQ2c1c@x gQ2c2b@p) (display '" in file " gQ2c2b@p) (display gQ2c1e@file-name gQ2c2b@p) (display '", found " gQ2c2b@p) (write gQ2c20@name gQ2c2b@p) (display '" instead" gQ2c2b@p) (gQ2c2a@e)))))) (void)))))))) (lambda (gQ2c2e@f) (if (procedure? gQ2c2e@f) gQ2c2e@f (assertion-violation 'library-locator '"not a procedure" gQ2c2e@f))))) (set! gQ2cc4@gQ2b07@library-loader gQ2b07@library-loader) (set! gQ2b09@current-library-expander (gQ2a03@gQ28e1@make-parameter (lambda (gQ2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (gQ2c32@f) (if (procedure? gQ2c32@f) gQ2c32@f (assertion-violation 'library-expander '"not a procedure" gQ2c32@f))))) (set! gQ2cc5@gQ2b09@current-library-expander gQ2b09@current-library-expander) (set! gQ2b0b@external-pending-libraries (gQ2a03@gQ28e1@make-parameter '())) (set! gQ2cc6@gQ2b0b@external-pending-libraries gQ2b0b@external-pending-libraries) (set! gQ2b0d@find-external-library (lambda (gQ2c34@name) (begin (if (member gQ2c34@name (gQ2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" gQ2c34@name) (void)) (let ((gQ2c3a@gQ2c37 gQ2b0b@external-pending-libraries) (gQ2c3b@gQ2c39 (cons gQ2c34@name (gQ2b0b@external-pending-libraries)))) (let ((gQ2c3e@swap (lambda () (let ((gQ2c40@t (gQ2c3a@gQ2c37))) (begin (gQ2c3a@gQ2c37 gQ2c3b@gQ2c39) (set! gQ2c3b@gQ2c39 gQ2c40@t)))))) (dynamic-wind gQ2c3e@swap (lambda () (begin ((gQ2b07@library-loader) gQ2c34@name) (or (gQ2af7@find-library-by (lambda (gQ2c42@x) (fast-equal? (gQ2abf@library-name gQ2c42@x) gQ2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" gQ2c34@name)))) gQ2c3e@swap)))))) (set! gQ2cc7@gQ2b0d@find-external-library gQ2b0d@find-external-library) (set! gQ2b0f@find-library-by-name (lambda (gQ2c44@name) (or (gQ2af7@find-library-by (lambda (gQ2c46@x) (fast-equal? (gQ2abf@library-name gQ2c46@x) gQ2c44@name))) (gQ2b0d@find-external-library gQ2c44@name)))) (set! gQ2cc8@gQ2b0f@find-library-by-name gQ2b0f@find-library-by-name) (set! gQ2b11@library-exists? (lambda (gQ2c48@name) (and (gQ2af7@find-library-by (lambda (gQ2c4a@x) (fast-equal? (gQ2abf@library-name gQ2c4a@x) gQ2c48@name))) '#t))) (set! gQ2cc9@gQ2b11@library-exists? gQ2b11@library-exists?) (set! gQ2b13@find-library-by-spec/die (lambda (gQ2c4c@spec) (let ((gQ2c4e@id (car gQ2c4c@spec))) (or (gQ2af7@find-library-by (lambda (gQ2c50@x) (eq? gQ2c4e@id (gQ2abb@library-id gQ2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" gQ2c4c@spec))))) (set! gQ2cca@gQ2b13@find-library-by-spec/die gQ2b13@find-library-by-spec/die) (set! gQ2b15@label->binding-table (make-eq-hashtable)) (set! gQ2ccb@gQ2b15@label->binding-table gQ2b15@label->binding-table) (set! gQ2b17@install-library-record (lambda (gQ2c52@lib) (begin (let ((gQ2c54@exp-env (gQ2ad7@library-env gQ2c52@lib))) (for-each (lambda (gQ2c56@x) (let ((gQ2c58@label (car gQ2c56@x)) (gQ2c59@binding (cdr gQ2c56@x))) (let ((gQ2c5c@binding (let ((gQ2c5e@t (car gQ2c59@binding))) (if (memv gQ2c5e@t '(global)) (cons 'global (cons gQ2c52@lib (cdr gQ2c59@binding))) (if (memv gQ2c5e@t '(global-macro)) (cons 'global-macro (cons gQ2c52@lib (cdr gQ2c59@binding))) (if (memv gQ2c5e@t '(global-macro!)) (cons 'global-macro! (cons gQ2c52@lib (cdr gQ2c59@binding))) gQ2c59@binding)))))) (begin (if (hashtable-ref gQ2b15@label->binding-table gQ2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" gQ2c58@label (hashtable-ref gQ2b15@label->binding-table gQ2c58@label '#f) gQ2c5c@binding) (exit)) (void)) (hashtable-set! gQ2b15@label->binding-table gQ2c58@label gQ2c5c@binding))))) gQ2c54@exp-env)) ((gQ2aad@current-library-collection) gQ2c52@lib)))) (set! gQ2ccc@gQ2b17@install-library-record gQ2b17@install-library-record) (set! gQ2b19@install-library (lambda (gQ2c60@id gQ2c61@name gQ2c62@ver gQ2c63@imp* gQ2c64@vis* gQ2c65@inv* gQ2c66@exp-subst gQ2c67@exp-env gQ2c68@visit-proc gQ2c69@invoke-proc gQ2c6a@visit-code gQ2c6b@invoke-code gQ2c6c@visible? gQ2c6d@source-file-name) (let ((gQ2c7c@imp-lib* (map gQ2b13@find-library-by-spec/die gQ2c63@imp*)) (gQ2c7d@vis-lib* (map gQ2b13@find-library-by-spec/die gQ2c64@vis*)) (gQ2c7e@inv-lib* (map gQ2b13@find-library-by-spec/die gQ2c65@inv*))) (begin (if (not (and (symbol? gQ2c60@id) (list? gQ2c61@name) (list? gQ2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" gQ2c60@id gQ2c61@name gQ2c62@ver) (void)) (if (gQ2b11@library-exists? gQ2c61@name) (assertion-violation 'install-library '"library is already installed" gQ2c61@name) (void)) (let ((gQ2c82@lib (make-simple-struct 'library '15 (list gQ2c60@id gQ2c61@name gQ2c62@ver gQ2c7c@imp-lib* gQ2c7d@vis-lib* gQ2c7e@inv-lib* gQ2c66@exp-subst gQ2c67@exp-env gQ2c68@visit-proc gQ2c69@invoke-proc gQ2c6a@visit-code gQ2c6b@invoke-code gQ2c6c@visible? gQ2c6d@source-file-name)))) (gQ2b17@install-library-record gQ2c82@lib)))))) (set! gQ2ccd@gQ2b19@install-library gQ2b19@install-library) (set! gQ2b1b@imported-label->binding (lambda (gQ2c84@lab) (hashtable-ref gQ2b15@label->binding-table gQ2c84@lab '#f))) (set! gQ2cce@gQ2b1b@imported-label->binding gQ2b1b@imported-label->binding) (set! gQ2b1d@invoke-library (lambda (gQ2c86@lib) (let ((gQ2c88@invoke (gQ2adf@library-invoke-state gQ2c86@lib))) (if (procedure? gQ2c88@invoke) (begin (gQ2ae1@set-library-invoke-state! gQ2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" gQ2c86@lib))) (for-each gQ2b1d@invoke-library (gQ2acf@library-inv* gQ2c86@lib)) (gQ2ae1@set-library-invoke-state! gQ2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" gQ2c86@lib))) (gQ2c88@invoke) (gQ2ae1@set-library-invoke-state! gQ2c86@lib '#t)) (void))))) (set! gQ2ccf@gQ2b1d@invoke-library gQ2b1d@invoke-library) (set! gQ2b1f@visit-library (lambda (gQ2c8a@lib) (let ((gQ2c8c@visit (gQ2adb@library-visit-state gQ2c8a@lib))) (if (procedure? gQ2c8c@visit) (begin (gQ2add@set-library-visit-state! gQ2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" gQ2c8a@lib))) (for-each gQ2b1d@invoke-library (gQ2acb@library-vis* gQ2c8a@lib)) (gQ2add@set-library-visit-state! gQ2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" gQ2c8a@lib))) (gQ2c8c@visit) (gQ2add@set-library-visit-state! gQ2c8a@lib '#t)) (void))))) (set! gQ2cd0@gQ2b1f@visit-library gQ2b1f@visit-library) (set! gQ2b21@invoke-library-by-spec (lambda (gQ2c8e@spec) (gQ2b1d@invoke-library (gQ2b13@find-library-by-spec/die gQ2c8e@spec)))) (set! gQ2cd1@gQ2b21@invoke-library-by-spec gQ2b21@invoke-library-by-spec) (set! gQ2b23@installed-libraries (lambda gQ2c96 (let ((gQ2c97 (length gQ2c96))) (if (= gQ2c97 '1) (apply (lambda (gQ2c90@all?) (let gQ2c94@f ((gQ2c92@ls ((gQ2aad@current-library-collection)))) (if (null? gQ2c92@ls) '() (if (or gQ2c90@all? (gQ2aeb@library-visible? (car gQ2c92@ls))) (cons (car gQ2c92@ls) (gQ2c94@f (cdr gQ2c92@ls))) (gQ2c94@f (cdr gQ2c92@ls)))))) gQ2c96) (if (= gQ2c97 '0) (apply (lambda () (gQ2b23@installed-libraries '#f)) gQ2c96) (error 'apply '"invalid arg count")))))) (set! gQ2cd2@gQ2b23@installed-libraries gQ2b23@installed-libraries) (set! gQ2b25@library-spec (lambda (gQ2c98@x) (begin (if (not (gQ2ab9@library? gQ2c98@x)) (assertion-violation 'library-spec '"not a library" gQ2c98@x) (void)) (list (gQ2abb@library-id gQ2c98@x) (gQ2abf@library-name gQ2c98@x) (gQ2ac3@library-version gQ2c98@x))))) (set! gQ2cd3@gQ2b25@library-spec gQ2b25@library-spec) (void))
(begin (set! gQ2cd7@build-global-define (unspecified)) (set! gQ2d48@build-lambda (unspecified)) (set! gQ2d4a@build-case-lambda (unspecified)) (set! gQ2d78@build-sequence (unspecified)) (set! gQ2d7a@build-void (unspecified)) (set! gQ2d7c@build-letrec (unspecified)) (set! gQ2d7e@build-let (unspecified)) (set! gQ2d80@build-named-let (unspecified)) (set! gQ2d82@build-letrec* (unspecified)) (set! gQ2d84@build-library-letrec* (unspecified)) (set! gQ2d86@build-receive (unspecified)) (set! gQ2cd7@build-global-define (lambda (gQ2d87@x) (gQ2d7a@build-void))) (set! gQ2e15@gQ2cd7@build-global-define gQ2cd7@build-global-define) (set! gQ2d48@build-lambda (lambda (gQ2d89@ae gQ2d8a@vars gQ2d8b@exp) (list 'lambda gQ2d8a@vars gQ2d8b@exp))) (set! gQ2e16@gQ2d48@build-lambda gQ2d48@build-lambda) (set! gQ2d4a@build-case-lambda (lambda (gQ2d8f@ae gQ2d90@vars* gQ2d91@exp*) (letrec* ((gQ2d96@build-error (lambda (gQ2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (gQ2d98@build-pred (lambda (gQ2db5@ae gQ2db6@n gQ2db7@vars) (call-with-values (lambda () (let gQ2dc3@f ((gQ2dbf@vars gQ2db7@vars) (gQ2dc0@count '0)) (if (pair? gQ2dbf@vars) (gQ2dc3@f (cdr gQ2dbf@vars) (+ gQ2dc0@count '1)) (if (null? gQ2dbf@vars) (values gQ2dc0@count '=) (values gQ2dc0@count '>=))))) (lambda (gQ2dc5@gQ2dbc gQ2dc6@gQ2dbe) (let ((gQ2dc9@pred gQ2dc6@gQ2dbe) (gQ2dca@count gQ2dc5@gQ2dbc)) (list (list 'primitive gQ2dc9@pred) gQ2db6@n (list 'quote gQ2dca@count))))))) (gQ2d9a@build-apply (lambda (gQ2dad@ae gQ2dae@g gQ2daf@vars gQ2db0@exp) (list '(primitive apply) (gQ2d48@build-lambda gQ2dad@ae gQ2daf@vars gQ2db0@exp) gQ2dae@g))) (gQ2d9c@expand-case-lambda (lambda (gQ2d9d@ae gQ2d9e@vars gQ2d9f@exp*) (let ((gQ2da3@g (gensym)) (gQ2da4@n (gensym))) (list 'lambda gQ2da3@g (gQ2d7e@build-let gQ2d9d@ae (list gQ2da4@n) (list (list '(primitive length) gQ2da3@g)) (let gQ2dab@f ((gQ2da7@vars* gQ2d90@vars*) (gQ2da8@exp* gQ2d9f@exp*)) (if (null? gQ2da7@vars*) (gQ2d96@build-error gQ2d9d@ae) (list 'if (gQ2d98@build-pred gQ2d9d@ae gQ2da4@n (car gQ2da7@vars*)) (gQ2d9a@build-apply gQ2d9d@ae gQ2da3@g (car gQ2da7@vars*) (car gQ2da8@exp*)) (gQ2dab@f (cdr gQ2da7@vars*) (cdr gQ2da8@exp*))))))))))) (if (= (length gQ2d91@exp*) '1) (gQ2d48@build-lambda gQ2d8f@ae (car gQ2d90@vars*) (car gQ2d91@exp*)) (gQ2d9c@expand-case-lambda gQ2d8f@ae gQ2d90@vars* gQ2d91@exp*))))) (set! gQ2e17@gQ2d4a@build-case-lambda gQ2d4a@build-case-lambda) (set! gQ2d78@build-sequence (lambda (gQ2dcf@ae gQ2dd0@exps) (let gQ2dd5@loop ((gQ2dd3@exps gQ2dd0@exps)) (if (null? (cdr gQ2dd3@exps)) (car gQ2dd3@exps) (if (equal? (car gQ2dd3@exps) (gQ2d7a@build-void)) (gQ2dd5@loop (cdr gQ2dd3@exps)) (cons 'begin gQ2dd3@exps)))))) (set! gQ2e18@gQ2d78@build-sequence gQ2d78@build-sequence) (set! gQ2d7a@build-void (lambda () '((primitive void)))) (set! gQ2e19@gQ2d7a@build-void gQ2d7a@build-void) (set! gQ2d7c@build-letrec (lambda (gQ2dd7@ae gQ2dd8@vars gQ2dd9@val-exps gQ2dda@body-exp) (if (null? gQ2dd8@vars) gQ2dda@body-exp (list 'letrec (map list gQ2dd8@vars gQ2dd9@val-exps) gQ2dda@body-exp)))) (set! gQ2e1a@gQ2d7c@build-letrec gQ2d7c@build-letrec) (set! gQ2d7e@build-let (lambda (gQ2ddf@ae gQ2de0@vars gQ2de1@val-exps gQ2de2@body-exp) (if (null? gQ2de0@vars) gQ2de2@body-exp (list 'let (map list gQ2de0@vars gQ2de1@val-exps) gQ2de2@body-exp)))) (set! gQ2e1b@gQ2d7e@build-let gQ2d7e@build-let) (set! gQ2d80@build-named-let (lambda (gQ2de7@ae gQ2de8@name gQ2de9@vars gQ2dea@val-exps gQ2deb@body-exp) (list 'let gQ2de8@name (map list gQ2de9@vars gQ2dea@val-exps) gQ2deb@body-exp))) (set! gQ2e1c@gQ2d80@build-named-let gQ2d80@build-named-let) (set! gQ2d82@build-letrec* (lambda (gQ2df1@ae gQ2df2@vars gQ2df3@val-exps gQ2df4@body-exp) (if (null? gQ2df2@vars) gQ2df4@body-exp (list 'letrec* (map list gQ2df2@vars gQ2df3@val-exps) gQ2df4@body-exp)))) (set! gQ2e1d@gQ2d82@build-letrec* gQ2d82@build-letrec*) (set! gQ2d84@build-library-letrec* (lambda (gQ2df9@ae gQ2dfa@name gQ2dfb@vars gQ2dfc@locs gQ2dfd@val-exps gQ2dfe@body-exp) (cons 'begin (append (map (lambda (gQ2e05@var) (cons 'set! (cons gQ2e05@var '((unspecified))))) gQ2dfb@vars) (append (apply append (map (lambda (gQ2e07@var gQ2e08@loc gQ2e09@val-exp) (list (list 'set! gQ2e07@var gQ2e09@val-exp) (list 'set! gQ2e08@loc gQ2e07@var))) gQ2dfb@vars gQ2dfc@locs gQ2dfd@val-exps)) (list gQ2dfe@body-exp)))))) (set! gQ2e1e@gQ2d84@build-library-letrec* gQ2d84@build-library-letrec*) (set! gQ2d86@build-receive (lambda (gQ2e0d@ae gQ2e0e@vars gQ2e0f@producer gQ2e10@body*) (begin (display '"************** in ") (cons 'receive (cons gQ2e0e@vars (cons gQ2e0f@producer gQ2e10@body*)))))) (set! gQ2e1f@gQ2d86@build-receive gQ2d86@build-receive) (void))
(begin (set! gQ2e2e@file-options-macro (unspecified)) (set! gQ2e30@set-cons (unspecified)) (set! gQ2e32@set-union (unspecified)) (set! gQ2e37@top-mark* (unspecified)) (set! gQ2e39@top-marked? (unspecified)) (set! gQ2e3b@gen-lexical (unspecified)) (set! gQ2e3d@gen-global (unspecified)) (set! gQ2e3f@gen-label (unspecified)) (set! gQ2e41@gen-top-level-label (unspecified)) (set! gQ2e43@gen-define-label+loc (unspecified)) (set! gQ2e45@gen-define-label (unspecified)) (set! gQ2e4f@rib? (unspecified)) (set! gQ2e51@rib-sym* (unspecified)) (set! gQ2e53@set-rib-sym*! (unspecified)) (set! gQ2e55@rib-mark** (unspecified)) (set! gQ2e57@set-rib-mark**! (unspecified)) (set! gQ2e59@rib-label* (unspecified)) (set! gQ2e5b@set-rib-label*! (unspecified)) (set! gQ2e5d@rib-sealed/freq (unspecified)) (set! gQ2e5f@set-rib-sealed/freq! (unspecified)) (set! gQ2e61@rib-cache (unspecified)) (set! gQ2e63@set-rib-cache! (unspecified)) (set! gQ2e65@dummy (unspecified)) (set! gQ2e67@make-empty-rib (unspecified)) (set! gQ2e69@extend-rib! (unspecified)) (set! gQ2e6b@extend-rib/nc! (unspecified)) (set! gQ2e6d@make-rib-map (unspecified)) (set! gQ2e6f@seal-rib! (unspecified)) (set! gQ2e71@unseal-rib! (unspecified)) (set! gQ2e73@make-full-rib (unspecified)) (set! gQ2e75@rp (unspecified)) (set! gQ2e7f@stx? (unspecified)) (set! gQ2e81@stx-expr (unspecified)) (set! gQ2e83@set-stx-expr! (unspecified)) (set! gQ2e85@stx-mark* (unspecified)) (set! gQ2e87@set-stx-mark*! (unspecified)) (set! gQ2e89@stx-subst* (unspecified)) (set! gQ2e8b@set-stx-subst*! (unspecified)) (set! gQ2e8d@stx-ae* (unspecified)) (set! gQ2e8f@set-stx-ae*! (unspecified)) (set! gQ2e91@dummy (unspecified)) (set! gQ2e93@datum->stx (unspecified)) (set! gQ2e95@gen-mark (unspecified)) (set! gQ2e97@anti-mark (unspecified)) (set! gQ2e99@anti-mark? (unspecified)) (set! gQ2e9b@mkstx (unspecified)) (set! gQ2e9d@add-mark (unspecified)) (set! gQ2e9f@add-subst (unspecified)) (set! gQ2ea1@syntax-kind? (unspecified)) (set! gQ2ea3@syntax-vector->list (unspecified)) (set! gQ2ea5@syntax-pair? (unspecified)) (set! gQ2ea7@syntax-vector? (unspecified)) (set! gQ2ea9@syntax-null? (unspecified)) (set! gQ2eab@syntax-list? (unspecified)) (set! gQ2ead@syntax-car (unspecified)) (set! gQ2eaf@syntax-cdr (unspecified)) (set! gQ2eb1@syntax->list (unspecified)) (set! gQ2eb3@id? (unspecified)) (set! gQ2eb5@id->sym (unspecified)) (set! gQ2eb7@bound-id=? (unspecified)) (set! gQ2eb9@free-id=? (unspecified)) (set! gQ2ebb@valid-bound-ids? (unspecified)) (set! gQ2ebd@distinct-bound-ids? (unspecified)) (set! gQ2ebf@bound-id-member? (unspecified)) (set! gQ2ec1@self-evaluating? (unspecified)) (set! gQ2ec3@strip-annotations (unspecified)) (set! gQ2ec5@strip (unspecified)) (set! gQ2ec7@stx->datum (unspecified)) (set! gQ2ec9@id->label (unspecified)) (set! gQ2ecb@label->binding (unspecified)) (set! gQ2ecd@make-binding (unspecified)) (set! gQ2ecf@binding-type (unspecified)) (set! gQ2ed1@binding-value (unspecified)) (set! gQ2ed3@raise-unbound-error (unspecified)) (set! gQ2ed5@syntax-type (unspecified)) (set! gQ2ee3@sanitize-binding (unspecified)) (set! gQ2ee5@make-variable-transformer (unspecified)) (set! gQ2ee7@variable-transformer? (unspecified)) (set! gQ2ee9@variable-transformer-procedure (unspecified)) (set! gQ2eeb@make-eval-transformer (unspecified)) (set! gQ303c@parse-define (unspecified)) (set! gQ303e@parse-define-syntax (unspecified)) (set! gQ3040@scheme-stx-hashtable (unspecified)) (set! gQ3042@scheme-stx (unspecified)) (set! gQ3044@lexical-var (unspecified)) (set! gQ3046@lexical-mutable? (unspecified)) (set! gQ3048@set-lexical-mutable! (unspecified)) (set! gQ304a@add-lexical (unspecified)) (set! gQ304c@add-lexicals (unspecified)) (set! gQ304e@letrec-helper (unspecified)) (set! gQ3050@let-transformer (unspecified)) (set! gQ3052@letrec-transformer (unspecified)) (set! gQ3054@letrec*-transformer (unspecified)) (set! gQ3056@fluid-let-syntax-transformer (unspecified)) (set! gQ3058@type-descriptor-transformer (unspecified)) (set! gQ305a@record-type-descriptor-transformer (unspecified)) (set! gQ305c@record-constructor-descriptor-transformer (unspecified)) (set! gQ305e@when-macro (unspecified)) (set! gQ3060@unless-macro (unspecified)) (set! gQ3062@if-transformer (unspecified)) (set! gQ3064@and-transformer (unspecified)) (set! gQ3066@or-transformer (unspecified)) (set! gQ3068@case-macro (unspecified)) (set! gQ306a@quote-transformer (unspecified)) (set! gQ306c@case-lambda-transformer (unspecified)) (set! gQ306e@lambda-transformer (unspecified)) (set! gQ3070@bless (unspecified)) (set! gQ3072@with-syntax-macro (unspecified)) (set! gQ3074@invalid-fmls-error (unspecified)) (set! gQ3076@let-macro (unspecified)) (set! gQ3078@let-values-macro (unspecified)) (set! gQ307a@let*-values-macro (unspecified)) (set! gQ307c@trace-lambda-macro (unspecified)) (set! gQ307e@trace-define-macro (unspecified)) (set! gQ3080@trace-define-syntax-macro (unspecified)) (set! gQ3082@trace-let/rec-syntax (unspecified)) (set! gQ3084@trace-let-syntax-macro (unspecified)) (set! gQ3086@trace-letrec-syntax-macro (unspecified)) (set! gQ3088@guard-macro (unspecified)) (set! gQ308a@define-enumeration-macro (unspecified)) (set! gQ308c@time-macro (unspecified)) (set! gQ308e@delay-macro (unspecified)) (set! gQ3090@assert-macro (unspecified)) (set! gQ3092@endianness-macro (unspecified)) (set! gQ3094@identifier-syntax-macro (unspecified)) (set! gQ3096@do-macro (unspecified)) (set! gQ3098@let*-macro (unspecified)) (set! gQ309a@or-macro (unspecified)) (set! gQ309c@and-macro (unspecified)) (set! gQ309e@cond-macro (unspecified)) (set! gQ30a0@do-include (unspecified)) (set! gQ30a2@include-macro (unspecified)) (set! gQ30a4@include-into-macro (unspecified)) (set! gQ30a6@syntax-rules-macro (unspecified)) (set! gQ30a8@quasiquote-macro (unspecified)) (set! gQ30aa@quasisyntax-macro (unspecified)) (set! gQ30ac@define-struct-macro (unspecified)) (set! gQ30ae@define-record-type-macro (unspecified)) (set! gQ30b0@define-condition-type-macro (unspecified)) (set! gQ30b2@incorrect-usage-macro (unspecified)) (set! gQ30b4@parameterize-macro (unspecified)) (set! gQ30b6@foreign-call-transformer (unspecified)) (set! gQ30b8@convert-pattern (unspecified)) (set! gQ30ba@syntax-dispatch (unspecified)) (set! gQ30bc@ellipsis? (unspecified)) (set! gQ30be@underscore? (unspecified)) (set! gQ30c0@verify-literals (unspecified)) (set! gQ30c2@syntax-case-transformer (unspecified)) (set! gQ30c4@ellipsis-map (unspecified)) (set! gQ30c6@syntax-transformer (unspecified)) (set! gQ30c8@core-macro-transformer (unspecified)) (set! gQ30ca@symbol-macro (unspecified)) (set! gQ30cc@macro-transformer (unspecified)) (set! gQ30ce@local-macro-transformer (unspecified)) (set! gQ30d0@do-macro-call (unspecified)) (set! gQ30d2@chi-macro (unspecified)) (set! gQ30d4@chi-local-macro (unspecified)) (set! gQ30d6@chi-global-macro (unspecified)) (set! gQ30d8@chi-expr* (unspecified)) (set! gQ30da@chi-application (unspecified)) (set! gQ30dc@chi-expr (unspecified)) (set! gQ30de@chi-set! (unspecified)) (set! gQ30e0@verify-formals (unspecified)) (set! gQ30e2@chi-lambda-clause (unspecified)) (set! gQ30e4@chi-lambda-clause* (unspecified)) (set! gQ30e6@chi-defun (unspecified)) (set! gQ30e8@chi-rhs (unspecified)) (set! gQ30ea@expand-interaction-rhs*/init* (unspecified)) (set! gQ30ec@chi-rhs* (unspecified)) (set! gQ30ee@find-bound=? (unspecified)) (set! gQ30f0@find-dups (unspecified)) (set! gQ30f2@chi-internal (unspecified)) (set! gQ30f4@parse-module (unspecified)) (set! gQ30fe@module-interface? (unspecified)) (set! gQ3100@module-interface-first-mark (unspecified)) (set! gQ3102@set-module-interface-first-mark! (unspecified)) (set! gQ3104@module-interface-exp-id-vec (unspecified)) (set! gQ3106@set-module-interface-exp-id-vec! (unspecified)) (set! gQ3108@module-interface-exp-lab-vec (unspecified)) (set! gQ310a@set-module-interface-exp-lab-vec! (unspecified)) (set! gQ310c@dummy (unspecified)) (set! gQ310e@module-interface-exp-id* (unspecified)) (set! gQ3110@chi-internal-module (unspecified)) (set! gQ3112@chi-body* (unspecified)) (set! gQ3114@expand-transformer (unspecified)) (set! gQ3116@parse-exports (unspecified)) (set! gQ3118@parse-library-name (unspecified)) (set! gQ311a@parse-library (unspecified)) (set! gQ311c@parse-import-spec* (unspecified)) (set! gQ311e@make-top-rib (unspecified)) (set! gQ3120@make-collector (unspecified)) (set! gQ3122@inv-collector (unspecified)) (set! gQ3124@vis-collector (unspecified)) (set! gQ3126@imp-collector (unspecified)) (set! gQ3128@chi-library-internal (unspecified)) (set! gQ312a@chi-interaction-expr (unspecified)) (set! gQ312c@library-body-expander (unspecified)) (set! gQ312e@core-library-expander (unspecified)) (set! gQ3130@parse-top-level-program (unspecified)) (set! gQ3132@top-level-expander (unspecified)) (set! gQ3134@rp (unspecified)) (set! gQ313e@env? (unspecified)) (set! gQ3140@env-names (unspecified)) (set! gQ3142@set-env-names! (unspecified)) (set! gQ3144@env-labels (unspecified)) (set! gQ3146@set-env-labels! (unspecified)) (set! gQ3148@env-itc (unspecified)) (set! gQ314a@set-env-itc! (unspecified)) (set! gQ314c@dummy (unspecified)) (set! gQ314e@rp (unspecified)) (set! gQ3158@interaction-env? (unspecified)) (set! gQ315a@interaction-env-rib (unspecified)) (set! gQ315c@set-interaction-env-rib! (unspecified)) (set! gQ315e@interaction-env-r (unspecified)) (set! gQ3160@set-interaction-env-r! (unspecified)) (set! gQ3162@interaction-env-locs (unspecified)) (set! gQ3164@set-interaction-env-locs! (unspecified)) (set! gQ3166@dummy (unspecified)) (set! gQ3168@interaction-environment-symbols (unspecified)) (set! gQ316a@environment-bindings (unspecified)) (set! gQ316c@parse-binding (unspecified)) (set! gQ316e@environment? (unspecified)) (set! gQ3170@environment-symbols (unspecified)) (set! gQ3172@environment (unspecified)) (set! gQ3174@null-environment (unspecified)) (set! gQ3176@scheme-report-environment (unspecified)) (set! gQ3178@expand (unspecified)) (set! gQ317a@eval (unspecified)) (set! gQ317c@library-expander (unspecified)) (set! gQ317e@boot-library-expand (unspecified)) (set! gQ3180@rev-map-append (unspecified)) (set! gQ3182@build-exports (unspecified)) (set! gQ3184@make-export-subst (unspecified)) (set! gQ3186@make-export-env/macros (unspecified)) (set! gQ3188@generate-temporaries (unspecified)) (set! gQ318a@free-identifier=? (unspecified)) (set! gQ318c@bound-identifier=? (unspecified)) (set! gQ318e@make-source-condition (unspecified)) (set! gQ3190@extract-position-condition (unspecified)) (set! gQ3192@expression-position (unspecified)) (set! gQ3194@assertion-error (unspecified)) (set! gQ3196@syntax-error (unspecified)) (set! gQ3198@syntax-violation* (unspecified)) (set! gQ319a@syntax-violation (unspecified)) (set! gQ319c@identifier? (unspecified)) (set! gQ319e@datum->syntax (unspecified)) (set! gQ31a0@syntax->datum (unspecified)) (set! gQ31a2@ungensym-all (unspecified)) (set! gQ31a4@compile-r6rs-top-level (unspecified)) (set! gQ31a6@pre-compile-r6rs-top-level (unspecified)) (set! gQ31a8@interaction-environment (unspecified)) (set! gQ31aa@top-level-context (unspecified)) (set! gQ2e2e@file-options-macro (lambda (gQ31ab@x) (letrec* ((gQ31ae@valid-option? (lambda (gQ31b7@x) (and (gQ2eb3@id? gQ31b7@x) (memq (gQ2eb5@id->sym gQ31b7@x) '(no-fail no-create no-truncate)))))) (let ((gQ31af@t gQ31ab@x)) (let ((gQ31b1@ls/false (gQ30ba@syntax-dispatch gQ31af@t '(_ . each-any)))) (if (and gQ31b1@ls/false (apply (lambda (gQ31b3@opt*) (for-all gQ31ae@valid-option? gQ31b3@opt*)) gQ31b1@ls/false)) (apply (lambda (gQ31b5@opt*) (gQ3070@bless (list 'make-file-options (list 'quote gQ31b5@opt*)))) gQ31b1@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ31af@t))))))) (set! gQ4b01@gQ2e2e@file-options-macro gQ2e2e@file-options-macro) (set! gQ2e30@set-cons (lambda (gQ31b9@x gQ31ba@ls) (if (memq gQ31b9@x gQ31ba@ls) gQ31ba@ls (cons gQ31b9@x gQ31ba@ls)))) (set! gQ4b02@gQ2e30@set-cons gQ2e30@set-cons) (set! gQ2e32@set-union (lambda (gQ31bd@ls1 gQ31be@ls2) (if (null? gQ31bd@ls1) gQ31be@ls2 (if (memq (car gQ31bd@ls1) gQ31be@ls2) (gQ2e32@set-union (cdr gQ31bd@ls1) gQ31be@ls2) (cons (car gQ31bd@ls1) (gQ2e32@set-union (cdr gQ31bd@ls1) gQ31be@ls2)))))) (set! gQ4b03@gQ2e32@set-union gQ2e32@set-union) (set! gQ2e37@top-mark* '(top)) (set! gQ4b04@gQ2e37@top-mark* gQ2e37@top-mark*) (set! gQ2e39@top-marked? (lambda (gQ31c1@m*) (memq 'top gQ31c1@m*))) (set! gQ4b05@gQ2e39@top-marked? gQ2e39@top-marked?) (set! gQ2e3b@gen-lexical (lambda (gQ31c3@sym) (if (symbol? gQ31c3@sym) (gensym gQ31c3@sym) (if (gQ2e7f@stx? gQ31c3@sym) (gQ2e3b@gen-lexical (gQ2eb5@id->sym gQ31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" gQ31c3@sym))))) (set! gQ4b06@gQ2e3b@gen-lexical gQ2e3b@gen-lexical) (set! gQ2e3d@gen-global (lambda (gQ31c5@x) (gQ2e3b@gen-lexical gQ31c5@x))) (set! gQ4b07@gQ2e3d@gen-global gQ2e3d@gen-global) (set! gQ2e3f@gen-label (lambda (gQ31c7@_) (gensym))) (set! gQ4b08@gQ2e3f@gen-label gQ2e3f@gen-label) (set! gQ2e41@gen-top-level-label (lambda (gQ31c9@id gQ31ca@rib) (letrec* ((gQ31ce@find (lambda (gQ31d9@sym gQ31da@mark* gQ31db@sym* gQ31dc@mark** gQ31dd@label*) (and (pair? gQ31db@sym*) (if (and (eq? gQ31d9@sym (car gQ31db@sym*)) (same-marks? gQ31da@mark* (car gQ31dc@mark**))) (car gQ31dd@label*) (gQ31ce@find gQ31d9@sym gQ31da@mark* (cdr gQ31db@sym*) (cdr gQ31dc@mark**) (cdr gQ31dd@label*))))))) (let ((gQ31cf@sym (gQ2eb5@id->sym gQ31c9@id)) (gQ31d0@mark* (gQ2e85@stx-mark* gQ31c9@id))) (let ((gQ31d3@sym* (gQ2e51@rib-sym* gQ31ca@rib))) (let ((gQ31d5@t (and (memq gQ31cf@sym (gQ2e51@rib-sym* gQ31ca@rib)) (gQ31ce@find gQ31cf@sym gQ31d0@mark* gQ31d3@sym* (gQ2e55@rib-mark** gQ31ca@rib) (gQ2e59@rib-label* gQ31ca@rib))))) (if gQ31d5@t ((lambda (gQ31d7@label) (if (gQ2cce@gQ2b1b@imported-label->binding gQ31d7@label) (gensym) gQ31d7@label)) gQ31d5@t) (gensym)))))))) (set! gQ4b09@gQ2e41@gen-top-level-label gQ2e41@gen-top-level-label) (set! gQ2e43@gen-define-label+loc (lambda (gQ31e3@id gQ31e4@rib) (let ((gQ31e7@t (gQ31aa@top-level-context))) (if gQ31e7@t ((lambda (gQ31e9@env) (let ((gQ31eb@label (gQ2e41@gen-top-level-label gQ31e3@id gQ31e4@rib)) (gQ31ec@locs (gQ3162@interaction-env-locs gQ31e9@env))) (values gQ31eb@label (let ((gQ31ef@t (assq gQ31eb@label gQ31ec@locs))) (if gQ31ef@t (cdr gQ31ef@t) (let ((gQ31f1@loc (gQ2e3b@gen-lexical gQ31e3@id))) (begin (gQ3164@set-interaction-env-locs! gQ31e9@env (cons (cons gQ31eb@label gQ31f1@loc) gQ31ec@locs)) gQ31f1@loc))))))) gQ31e7@t) (values (gensym) (gQ2e3b@gen-lexical gQ31e3@id)))))) (set! gQ4b0a@gQ2e43@gen-define-label+loc gQ2e43@gen-define-label+loc) (set! gQ2e45@gen-define-label (lambda (gQ31f3@id gQ31f4@rib) (if (gQ31aa@top-level-context) (gQ2e41@gen-top-level-label gQ31f3@id gQ31f4@rib) (gensym)))) (set! gQ4b0b@gQ2e45@gen-define-label gQ2e45@gen-define-label) (set! gQ2e4f@rib? (lambda (gQ31f7@x) (and (simple-struct? gQ31f7@x) (eq? (simple-struct-name gQ31f7@x) 'rib)))) (set! gQ4b0c@gQ2e4f@rib? gQ2e4f@rib?) (set! gQ2e51@rib-sym* (lambda (gQ31f9@x) (simple-struct-ref gQ31f9@x '0))) (set! gQ4b0d@gQ2e51@rib-sym* gQ2e51@rib-sym*) (set! gQ2e53@set-rib-sym*! (lambda (gQ31fb@x gQ31fc@val) (simple-struct-set! gQ31fb@x '0 gQ31fc@val))) (set! gQ4b0e@gQ2e53@set-rib-sym*! gQ2e53@set-rib-sym*!) (set! gQ2e55@rib-mark** (lambda (gQ31ff@x) (simple-struct-ref gQ31ff@x '1))) (set! gQ4b0f@gQ2e55@rib-mark** gQ2e55@rib-mark**) (set! gQ2e57@set-rib-mark**! (lambda (gQ3201@x gQ3202@val) (simple-struct-set! gQ3201@x '1 gQ3202@val))) (set! gQ4b10@gQ2e57@set-rib-mark**! gQ2e57@set-rib-mark**!) (set! gQ2e59@rib-label* (lambda (gQ3205@x) (simple-struct-ref gQ3205@x '2))) (set! gQ4b11@gQ2e59@rib-label* gQ2e59@rib-label*) (set! gQ2e5b@set-rib-label*! (lambda (gQ3207@x gQ3208@val) (simple-struct-set! gQ3207@x '2 gQ3208@val))) (set! gQ4b12@gQ2e5b@set-rib-label*! gQ2e5b@set-rib-label*!) (set! gQ2e5d@rib-sealed/freq (lambda (gQ320b@x) (simple-struct-ref gQ320b@x '3))) (set! gQ4b13@gQ2e5d@rib-sealed/freq gQ2e5d@rib-sealed/freq) (set! gQ2e5f@set-rib-sealed/freq! (lambda (gQ320d@x gQ320e@val) (simple-struct-set! gQ320d@x '3 gQ320e@val))) (set! gQ4b14@gQ2e5f@set-rib-sealed/freq! gQ2e5f@set-rib-sealed/freq!) (set! gQ2e61@rib-cache (lambda (gQ3211@x) (simple-struct-ref gQ3211@x '4))) (set! gQ4b15@gQ2e61@rib-cache gQ2e61@rib-cache) (set! gQ2e63@set-rib-cache! (lambda (gQ3213@x gQ3214@val) (simple-struct-set! gQ3213@x '4 gQ3214@val))) (set! gQ4b16@gQ2e63@set-rib-cache! gQ2e63@set-rib-cache!) (set! gQ2e65@dummy '3) (set! gQ4b17@gQ2e65@dummy gQ2e65@dummy) (set! gQ2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! gQ4b18@gQ2e67@make-empty-rib gQ2e67@make-empty-rib) (set! gQ2e69@extend-rib! (lambda (gQ3217@rib gQ3218@id gQ3219@label) (letrec* ((gQ321e@find (lambda (gQ322b@sym gQ322c@mark* gQ322d@sym* gQ322e@mark** gQ322f@label*) (and (pair? gQ322d@sym*) (if (and (eq? gQ322b@sym (car gQ322d@sym*)) (same-marks? gQ322c@mark* (car gQ322e@mark**))) gQ322f@label* (gQ321e@find gQ322b@sym gQ322c@mark* (cdr gQ322d@sym*) (cdr gQ322e@mark**) (cdr gQ322f@label*))))))) (begin (if (gQ2e5d@rib-sealed/freq gQ3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" gQ3217@rib) (void)) (let ((gQ321f@sym (gQ2eb5@id->sym gQ3218@id)) (gQ3220@mark* (gQ2e85@stx-mark* gQ3218@id))) (let ((gQ3223@sym* (gQ2e51@rib-sym* gQ3217@rib))) (let ((gQ3225@t (and (memq gQ321f@sym (gQ2e51@rib-sym* gQ3217@rib)) (gQ321e@find gQ321f@sym gQ3220@mark* gQ3223@sym* (gQ2e55@rib-mark** gQ3217@rib) (gQ2e59@rib-label* gQ3217@rib))))) (if gQ3225@t ((lambda (gQ3227@p) (if (not (eq? gQ3219@label (car gQ3227@p))) (if (gQ31aa@top-level-context) (set-car! gQ3227@p gQ3219@label) (gQ319a@syntax-violation '#f '"multiple definitions of identifier" gQ3218@id)) (void))) gQ3225@t) (begin (if (gQ2e61@rib-cache gQ3217@rib) (hashtable-update! (gQ2e61@rib-cache gQ3217@rib) gQ321f@sym (lambda (gQ3229@e) (cons (cons gQ3220@mark* gQ3219@label) gQ3229@e)) '()) (void)) (gQ2e53@set-rib-sym*! gQ3217@rib (cons gQ321f@sym gQ3223@sym*)) (gQ2e57@set-rib-mark**! gQ3217@rib (cons gQ3220@mark* (gQ2e55@rib-mark** gQ3217@rib))) (gQ2e5b@set-rib-label*! gQ3217@rib (cons gQ3219@label (gQ2e59@rib-label* gQ3217@rib)))))))))))) (set! gQ4b19@gQ2e69@extend-rib! gQ2e69@extend-rib!) (set! gQ2e6b@extend-rib/nc! (lambda (gQ3235@rib gQ3236@id gQ3237@label) (let ((gQ323b@sym (gQ2eb5@id->sym gQ3236@id)) (gQ323c@mark* (gQ2e85@stx-mark* gQ3236@id))) (let ((gQ323f@sym* (gQ2e51@rib-sym* gQ3235@rib))) (begin (if (gQ2e61@rib-cache gQ3235@rib) (hashtable-update! (gQ2e61@rib-cache gQ3235@rib) gQ323b@sym (lambda (gQ3241@e) (cons (cons gQ323c@mark* gQ3237@label) gQ3241@e)) '()) (void)) (gQ2e53@set-rib-sym*! gQ3235@rib (cons gQ323b@sym gQ323f@sym*)) (gQ2e57@set-rib-mark**! gQ3235@rib (cons gQ323c@mark* (gQ2e55@rib-mark** gQ3235@rib))) (gQ2e5b@set-rib-label*! gQ3235@rib (cons gQ3237@label (gQ2e59@rib-label* gQ3235@rib)))))))) (set! gQ4b1a@gQ2e6b@extend-rib/nc! gQ2e6b@extend-rib/nc!) (set! gQ2e6d@make-rib-map (lambda (gQ3243@sym*) (let ((gQ3245@ht (make-eq-hashtable))) (let gQ324b@f ((gQ3247@i '0) (gQ3248@sym* gQ3243@sym*)) (if (null? gQ3248@sym*) gQ3245@ht (begin (hashtable-update! gQ3245@ht (car gQ3248@sym*) (lambda (gQ324d@x) (cons gQ3247@i gQ324d@x)) '()) (gQ324b@f (+ gQ3247@i '1) (cdr gQ3248@sym*)))))))) (set! gQ4b1b@gQ2e6d@make-rib-map gQ2e6d@make-rib-map) (set! gQ2e6f@seal-rib! (lambda (gQ324f@rib) (let ((gQ3251@sym* (gQ2e51@rib-sym* gQ324f@rib))) (if (not (null? gQ3251@sym*)) (begin (gQ2e53@set-rib-sym*! gQ324f@rib (list->vector gQ3251@sym*)) (gQ2e57@set-rib-mark**! gQ324f@rib (list->vector (gQ2e55@rib-mark** gQ324f@rib))) (gQ2e5b@set-rib-label*! gQ324f@rib (list->vector (gQ2e59@rib-label* gQ324f@rib))) (gQ2e5f@set-rib-sealed/freq! gQ324f@rib (gQ2e6d@make-rib-map gQ3251@sym*))) (void))))) (set! gQ4b1c@gQ2e6f@seal-rib! gQ2e6f@seal-rib!) (set! gQ2e71@unseal-rib! (lambda (gQ3253@rib) (if (gQ2e5d@rib-sealed/freq gQ3253@rib) (begin (gQ2e5f@set-rib-sealed/freq! gQ3253@rib '#f) (gQ2e53@set-rib-sym*! gQ3253@rib (vector->list (gQ2e51@rib-sym* gQ3253@rib))) (gQ2e57@set-rib-mark**! gQ3253@rib (vector->list (gQ2e55@rib-mark** gQ3253@rib))) (gQ2e5b@set-rib-label*! gQ3253@rib (vector->list (gQ2e59@rib-label* gQ3253@rib)))) (void)))) (set! gQ4b1d@gQ2e71@unseal-rib! gQ2e71@unseal-rib!) (set! gQ2e73@make-full-rib (lambda (gQ3255@id* gQ3256@label*) (let ((gQ3259@r (make-simple-struct 'rib '6 (list (map gQ2eb5@id->sym gQ3255@id*) (map gQ2e85@stx-mark* gQ3255@id*) gQ3256@label* '#f '#f)))) (begin (gQ2e6f@seal-rib! gQ3259@r) gQ3259@r)))) (set! gQ4b1e@gQ2e73@make-full-rib gQ2e73@make-full-rib) (set! gQ2e75@rp (gQ2a00@gQ28db@make-record-printer 'stx (lambda (gQ325b@x gQ325c@p gQ325d@wr) (begin (display '"#<syntax " gQ325c@p) (write (gQ2ec7@stx->datum gQ325b@x) gQ325c@p) (let ((gQ3261@expr (gQ2e81@stx-expr gQ325b@x))) (if (gQ29f7@gQ28c9@annotation? gQ3261@expr) (let ((gQ3263@src (gQ29f8@gQ28cb@annotation-source gQ3261@expr))) (if (pair? gQ3263@src) (begin (display '" [" gQ325c@p) (display (cdr gQ3263@src) gQ325c@p) (display '" of " gQ325c@p) (display (car gQ3263@src) gQ325c@p) (display '"]" gQ325c@p)) (void))) (void))) (display '">" gQ325c@p))))) (set! gQ4b1f@gQ2e75@rp gQ2e75@rp) (set! gQ2e7f@stx? (lambda (gQ3265@x) (and (simple-struct? gQ3265@x) (eq? (simple-struct-name gQ3265@x) 'stx)))) (set! gQ4b20@gQ2e7f@stx? gQ2e7f@stx?) (set! gQ2e81@stx-expr (lambda (gQ3267@x) (simple-struct-ref gQ3267@x '0))) (set! gQ4b21@gQ2e81@stx-expr gQ2e81@stx-expr) (set! gQ2e83@set-stx-expr! (lambda (gQ3269@x gQ326a@val) (simple-struct-set! gQ3269@x '0 gQ326a@val))) (set! gQ4b22@gQ2e83@set-stx-expr! gQ2e83@set-stx-expr!) (set! gQ2e85@stx-mark* (lambda (gQ326d@x) (simple-struct-ref gQ326d@x '1))) (set! gQ4b23@gQ2e85@stx-mark* gQ2e85@stx-mark*) (set! gQ2e87@set-stx-mark*! (lambda (gQ326f@x gQ3270@val) (simple-struct-set! gQ326f@x '1 gQ3270@val))) (set! gQ4b24@gQ2e87@set-stx-mark*! gQ2e87@set-stx-mark*!) (set! gQ2e89@stx-subst* (lambda (gQ3273@x) (simple-struct-ref gQ3273@x '2))) (set! gQ4b25@gQ2e89@stx-subst* gQ2e89@stx-subst*) (set! gQ2e8b@set-stx-subst*! (lambda (gQ3275@x gQ3276@val) (simple-struct-set! gQ3275@x '2 gQ3276@val))) (set! gQ4b26@gQ2e8b@set-stx-subst*! gQ2e8b@set-stx-subst*!) (set! gQ2e8d@stx-ae* (lambda (gQ3279@x) (simple-struct-ref gQ3279@x '3))) (set! gQ4b27@gQ2e8d@stx-ae* gQ2e8d@stx-ae*) (set! gQ2e8f@set-stx-ae*! (lambda (gQ327b@x gQ327c@val) (simple-struct-set! gQ327b@x '3 gQ327c@val))) (set! gQ4b28@gQ2e8f@set-stx-ae*! gQ2e8f@set-stx-ae*!) (set! gQ2e91@dummy '3) (set! gQ4b29@gQ2e91@dummy gQ2e91@dummy) (set! gQ2e93@datum->stx (lambda (gQ327f@id gQ3280@datum) (make-simple-struct 'stx '5 (list gQ3280@datum (gQ2e85@stx-mark* gQ327f@id) (gQ2e89@stx-subst* gQ327f@id) (gQ2e8d@stx-ae* gQ327f@id))))) (set! gQ4b2a@gQ2e93@datum->stx gQ2e93@datum->stx) (set! gQ2e95@gen-mark (lambda () (string '#\m))) (set! gQ4b2b@gQ2e95@gen-mark gQ2e95@gen-mark) (set! gQ2e97@anti-mark '#f) (set! gQ4b2c@gQ2e97@anti-mark gQ2e97@anti-mark) (set! gQ2e99@anti-mark? not) (set! gQ4b2d@gQ2e99@anti-mark? gQ2e99@anti-mark?) (set! gQ2e9b@mkstx (lambda (gQ3283@e gQ3284@m* gQ3285@s* gQ3286@ae*) (if (and (gQ2e7f@stx? gQ3283@e) (not (gQ2e39@top-marked? gQ3284@m*))) (call-with-values (lambda () (join-wraps gQ3284@m* gQ3285@s* gQ3286@ae* gQ3283@e)) (lambda (gQ3291@gQ328c gQ3292@gQ328e gQ3293@gQ3290) (let ((gQ3297@ae* gQ3293@gQ3290) (gQ3298@s* gQ3292@gQ328e) (gQ3299@m* gQ3291@gQ328c)) (make-simple-struct 'stx '5 (list (gQ2e81@stx-expr gQ3283@e) gQ3299@m* gQ3298@s* gQ3297@ae*))))) (make-simple-struct 'stx '5 (list gQ3283@e gQ3284@m* gQ3285@s* gQ3286@ae*))))) (set! gQ4b2e@gQ2e9b@mkstx gQ2e9b@mkstx) (set! gQ2e9d@add-mark (lambda (gQ329d@m gQ329e@e gQ329f@ae) (gQ2e9b@mkstx gQ329e@e (list gQ329d@m) '(shift) (list gQ329f@ae)))) (set! gQ4b2f@gQ2e9d@add-mark gQ2e9d@add-mark) (set! gQ2e9f@add-subst (lambda (gQ32a3@subst gQ32a4@e) (gQ2e9b@mkstx gQ32a4@e '() (list gQ32a3@subst) '()))) (set! gQ4b30@gQ2e9f@add-subst gQ2e9f@add-subst) (set! gQ2ea1@syntax-kind? (lambda (gQ32a7@x gQ32a8@p?) (if (gQ2e7f@stx? gQ32a7@x) (gQ2ea1@syntax-kind? (gQ2e81@stx-expr gQ32a7@x) gQ32a8@p?) (if (gQ29f7@gQ28c9@annotation? gQ32a7@x) (gQ2ea1@syntax-kind? (gQ29f9@gQ28cd@annotation-expression gQ32a7@x) gQ32a8@p?) (gQ32a8@p? gQ32a7@x))))) (set! gQ4b31@gQ2ea1@syntax-kind? gQ2ea1@syntax-kind?) (set! gQ2ea3@syntax-vector->list (lambda (gQ32ab@x) (if (gQ2e7f@stx? gQ32ab@x) (let ((gQ32ad@ls (gQ2ea3@syntax-vector->list (gQ2e81@stx-expr gQ32ab@x))) (gQ32ae@m* (gQ2e85@stx-mark* gQ32ab@x)) (gQ32af@s* (gQ2e89@stx-subst* gQ32ab@x)) (gQ32b0@ae* (gQ2e8d@stx-ae* gQ32ab@x))) (map (lambda (gQ32b5@x) (gQ2e9b@mkstx gQ32b5@x gQ32ae@m* gQ32af@s* gQ32b0@ae*)) gQ32ad@ls)) (if (gQ29f7@gQ28c9@annotation? gQ32ab@x) (gQ2ea3@syntax-vector->list (gQ29f9@gQ28cd@annotation-expression gQ32ab@x)) (if (vector? gQ32ab@x) (vector->list gQ32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" gQ32ab@x)))))) (set! gQ4b32@gQ2ea3@syntax-vector->list gQ2ea3@syntax-vector->list) (set! gQ2ea5@syntax-pair? (lambda (gQ32b7@x) (gQ2ea1@syntax-kind? gQ32b7@x pair?))) (set! gQ4b33@gQ2ea5@syntax-pair? gQ2ea5@syntax-pair?) (set! gQ2ea7@syntax-vector? (lambda (gQ32b9@x) (gQ2ea1@syntax-kind? gQ32b9@x vector?))) (set! gQ4b34@gQ2ea7@syntax-vector? gQ2ea7@syntax-vector?) (set! gQ2ea9@syntax-null? (lambda (gQ32bb@x) (gQ2ea1@syntax-kind? gQ32bb@x null?))) (set! gQ4b35@gQ2ea9@syntax-null? gQ2ea9@syntax-null?) (set! gQ2eab@syntax-list? (lambda (gQ32bd@x) (or (gQ2ea9@syntax-null? gQ32bd@x) (and (gQ2ea5@syntax-pair? gQ32bd@x) (gQ2eab@syntax-list? (gQ2eaf@syntax-cdr gQ32bd@x)))))) (set! gQ4b36@gQ2eab@syntax-list? gQ2eab@syntax-list?) (set! gQ2ead@syntax-car (lambda (gQ32bf@x) (if (gQ2e7f@stx? gQ32bf@x) (gQ2e9b@mkstx (gQ2ead@syntax-car (gQ2e81@stx-expr gQ32bf@x)) (gQ2e85@stx-mark* gQ32bf@x) (gQ2e89@stx-subst* gQ32bf@x) (gQ2e8d@stx-ae* gQ32bf@x)) (if (gQ29f7@gQ28c9@annotation? gQ32bf@x) (gQ2ead@syntax-car (gQ29f9@gQ28cd@annotation-expression gQ32bf@x)) (if (pair? gQ32bf@x) (car gQ32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" gQ32bf@x)))))) (set! gQ4b37@gQ2ead@syntax-car gQ2ead@syntax-car) (set! gQ2eaf@syntax-cdr (lambda (gQ32c1@x) (if (gQ2e7f@stx? gQ32c1@x) (gQ2e9b@mkstx (gQ2eaf@syntax-cdr (gQ2e81@stx-expr gQ32c1@x)) (gQ2e85@stx-mark* gQ32c1@x) (gQ2e89@stx-subst* gQ32c1@x) (gQ2e8d@stx-ae* gQ32c1@x)) (if (gQ29f7@gQ28c9@annotation? gQ32c1@x) (gQ2eaf@syntax-cdr (gQ29f9@gQ28cd@annotation-expression gQ32c1@x)) (if (pair? gQ32c1@x) (cdr gQ32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" gQ32c1@x)))))) (set! gQ4b38@gQ2eaf@syntax-cdr gQ2eaf@syntax-cdr) (set! gQ2eb1@syntax->list (lambda (gQ32c3@x) (if (gQ2ea5@syntax-pair? gQ32c3@x) (cons (gQ2ead@syntax-car gQ32c3@x) (gQ2eb1@syntax->list (gQ2eaf@syntax-cdr gQ32c3@x))) (if (gQ2ea9@syntax-null? gQ32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" gQ32c3@x))))) (set! gQ4b39@gQ2eb1@syntax->list gQ2eb1@syntax->list) (set! gQ2eb3@id? (lambda (gQ32c5@x) (and (gQ2e7f@stx? gQ32c5@x) (symbol? (gQ2e81@stx-expr gQ32c5@x))))) (set! gQ4b3a@gQ2eb3@id? gQ2eb3@id?) (set! gQ2eb5@id->sym (lambda (gQ32c7@x) (gQ2e81@stx-expr gQ32c7@x))) (set! gQ4b3b@gQ2eb5@id->sym gQ2eb5@id->sym) (set! gQ2eb7@bound-id=? (lambda (gQ32c9@x gQ32ca@y) (and (eq? (gQ2eb5@id->sym gQ32c9@x) (gQ2eb5@id->sym gQ32ca@y)) (same-marks? (gQ2e85@stx-mark* gQ32c9@x) (gQ2e85@stx-mark* gQ32ca@y))))) (set! gQ4b3c@gQ2eb7@bound-id=? gQ2eb7@bound-id=?) (set! gQ2eb9@free-id=? (lambda (gQ32cd@i gQ32ce@j) (let ((gQ32d1@t0 (id->real-label gQ32cd@i)) (gQ32d2@t1 (id->real-label gQ32ce@j))) (if (or gQ32d1@t0 gQ32d2@t1) (eq? gQ32d1@t0 gQ32d2@t1) (eq? (gQ2eb5@id->sym gQ32cd@i) (gQ2eb5@id->sym gQ32ce@j)))))) (set! gQ4b3d@gQ2eb9@free-id=? gQ2eb9@free-id=?) (set! gQ2ebb@valid-bound-ids? (lambda (gQ32d5@id*) (and (for-all gQ2eb3@id? gQ32d5@id*) (gQ2ebd@distinct-bound-ids? gQ32d5@id*)))) (set! gQ4b3e@gQ2ebb@valid-bound-ids? gQ2ebb@valid-bound-ids?) (set! gQ2ebd@distinct-bound-ids? (lambda (gQ32d7@id*) (or (null? gQ32d7@id*) (and (not (gQ2ebf@bound-id-member? (car gQ32d7@id*) (cdr gQ32d7@id*))) (gQ2ebd@distinct-bound-ids? (cdr gQ32d7@id*)))))) (set! gQ4b3f@gQ2ebd@distinct-bound-ids? gQ2ebd@distinct-bound-ids?) (set! gQ2ebf@bound-id-member? (lambda (gQ32d9@id gQ32da@id*) (and (pair? gQ32da@id*) (or (gQ2eb7@bound-id=? gQ32d9@id (car gQ32da@id*)) (gQ2ebf@bound-id-member? gQ32d9@id (cdr gQ32da@id*)))))) (set! gQ4b40@gQ2ebf@bound-id-member? gQ2ebf@bound-id-member?) (set! gQ2ec1@self-evaluating? (lambda (gQ32dd@x) (or (number? gQ32dd@x) (string? gQ32dd@x) (char? gQ32dd@x) (boolean? gQ32dd@x) (regexp? gQ32dd@x) (bytevector? gQ32dd@x)))) (set! gQ4b41@gQ2ec1@self-evaluating? gQ2ec1@self-evaluating?) (set! gQ2ec3@strip-annotations (lambda (gQ32df@x) (if (pair? gQ32df@x) (cons (gQ2ec3@strip-annotations (car gQ32df@x)) (gQ2ec3@strip-annotations (cdr gQ32df@x))) (if (vector? gQ32df@x) (vector-map gQ2ec3@strip-annotations gQ32df@x) (if (gQ29f7@gQ28c9@annotation? gQ32df@x) (gQ29f6@gQ28c7@annotation-stripped gQ32df@x) gQ32df@x))))) (set! gQ4b42@gQ2ec3@strip-annotations gQ2ec3@strip-annotations) (set! gQ2ec5@strip (lambda (gQ32e1@x gQ32e2@m*) (if (gQ2e39@top-marked? gQ32e2@m*) (if (or (gQ29f7@gQ28c9@annotation? gQ32e1@x) (and (pair? gQ32e1@x) (gQ29f7@gQ28c9@annotation? (car gQ32e1@x))) (and (vector? gQ32e1@x) (> (vector-length gQ32e1@x) '0) (gQ29f7@gQ28c9@annotation? (vector-ref gQ32e1@x '0)))) (gQ2ec3@strip-annotations gQ32e1@x) gQ32e1@x) (let gQ32e7@f ((gQ32e5@x gQ32e1@x)) (if (gQ2e7f@stx? gQ32e5@x) (begin (if (pair? (gQ2e81@stx-expr gQ32e5@x)) (set-source-info! (gQ2e81@stx-expr gQ32e5@x) '#f) (void)) (gQ2ec5@strip (gQ2e81@stx-expr gQ32e5@x) (gQ2e85@stx-mark* gQ32e5@x))) (if (gQ29f7@gQ28c9@annotation? gQ32e5@x) (gQ29f6@gQ28c7@annotation-stripped gQ32e5@x) (if (pair? gQ32e5@x) (let ((gQ32e9@a (gQ32e7@f (car gQ32e5@x))) (gQ32ea@d (gQ32e7@f (cdr gQ32e5@x)))) (if (and (eq? gQ32e9@a (car gQ32e5@x)) (eq? gQ32ea@d (cdr gQ32e5@x))) gQ32e5@x (cons gQ32e9@a gQ32ea@d))) (if (vector? gQ32e5@x) (let ((gQ32ed@old (vector->list gQ32e5@x))) (let ((gQ32ef@new (map gQ32e7@f gQ32ed@old))) (if (for-all eq? gQ32ed@old gQ32ef@new) gQ32e5@x (list->vector gQ32ef@new)))) gQ32e5@x)))))))) (set! gQ4b43@gQ2ec5@strip gQ2ec5@strip) (set! gQ2ec7@stx->datum (lambda (gQ32f1@x) (gQ2ec5@strip gQ32f1@x '()))) (set! gQ4b44@gQ2ec7@stx->datum gQ2ec7@stx->datum) (set! gQ2ec9@id->label (lambda (gQ32f3@id) (or (id->real-label gQ32f3@id) (let ((gQ32f5@t (gQ31aa@top-level-context))) (if gQ32f5@t ((lambda (gQ32f7@env) (let ((gQ32f9@rib (gQ315a@interaction-env-rib gQ32f7@env))) (call-with-values (lambda () (gQ2e43@gen-define-label+loc gQ32f3@id gQ32f9@rib)) (lambda (gQ32ff@gQ32fc gQ3300@gQ32fe) (let ((gQ3303@loc_ gQ3300@gQ32fe) (gQ3304@lab gQ32ff@gQ32fc)) (begin (gQ2e69@extend-rib! gQ32f9@rib gQ32f3@id gQ3304@lab) gQ3304@lab)))))) gQ32f5@t) '#f))))) (set! gQ4b45@gQ2ec9@id->label gQ2ec9@id->label) (set! gQ2ecb@label->binding (lambda (gQ3307@x gQ3308@r) (let ((gQ330b@t (gQ2cce@gQ2b1b@imported-label->binding gQ3307@x))) (if gQ330b@t ((lambda (gQ330d@b) (if (and (pair? gQ330d@b) (eq? (car gQ330d@b) '$core-rtd)) (cons '$rtd (map gQ3070@bless (cdr gQ330d@b))) (if (and (pair? gQ330d@b) (eq? (car gQ330d@b) 'global-rtd)) (let ((gQ330f@lib (cadr gQ330d@b)) (gQ3310@loc (cddr gQ330d@b))) (cons '$rtd (symbol-value gQ3310@loc))) gQ330d@b))) gQ330b@t) (let ((gQ3313@t (assq gQ3307@x gQ3308@r))) (if gQ3313@t (cdr gQ3313@t) (let ((gQ3315@t (gQ31aa@top-level-context))) (if gQ3315@t ((lambda (gQ3317@env) (let ((gQ3319@t (assq gQ3307@x (gQ3162@interaction-env-locs gQ3317@env)))) (if gQ3319@t ((lambda (gQ331b@p) (cons* 'lexical (cdr gQ331b@p) '#f)) gQ3319@t) '(displaced-lexical . #f)))) gQ3315@t) '(displaced-lexical . #f))))))))) (set! gQ4b46@gQ2ecb@label->binding gQ2ecb@label->binding) (set! gQ2ecd@make-binding cons) (set! gQ4b47@gQ2ecd@make-binding gQ2ecd@make-binding) (set! gQ2ecf@binding-type car) (set! gQ4b48@gQ2ecf@binding-type gQ2ecf@binding-type) (set! gQ2ed1@binding-value cdr) (set! gQ4b49@gQ2ed1@binding-value gQ2ed1@binding-value) (set! gQ2ed3@raise-unbound-error (lambda (gQ331d@id) (gQ3198@syntax-violation* '#f '"unbound identifier" gQ331d@id (gQ4f3f@gQ4d85@make-undefined-violation)))) (set! gQ4b4a@gQ2ed3@raise-unbound-error gQ2ed3@raise-unbound-error) (set! gQ2ed5@syntax-type (lambda (gQ331f@e gQ3320@r) (if (gQ2eb3@id? gQ331f@e) (let ((gQ3323@id gQ331f@e)) (let ((gQ3325@label (gQ2ec9@id->label gQ3323@id))) (let ((gQ3327@b (gQ2ecb@label->binding gQ3325@label gQ3320@r))) (let ((gQ3329@type (gQ2ecf@binding-type gQ3327@b))) (begin (if (not gQ3325@label) (gQ2ed3@raise-unbound-error gQ3323@id) (void)) (let ((gQ332b@t gQ3329@type)) (if (memv gQ332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values gQ3329@type (gQ2ed1@binding-value gQ3327@b) gQ3323@id) (values 'other '#f '#f)))))))) (if (gQ2ea5@syntax-pair? gQ331f@e) (let ((gQ332d@id (gQ2ead@syntax-car gQ331f@e))) (if (gQ2eb3@id? gQ332d@id) (let ((gQ332f@label (gQ2ec9@id->label gQ332d@id))) (let ((gQ3331@b (gQ2ecb@label->binding gQ332f@label gQ3320@r))) (let ((gQ3333@type (gQ2ecf@binding-type gQ3331@b))) (begin (if (not gQ332f@label) (gQ2ed3@raise-unbound-error gQ332d@id) (void)) (let ((gQ3335@t gQ3333@type)) (if (memv gQ3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values gQ3333@type (gQ2ed1@binding-value gQ3331@b) gQ332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((gQ3337@d (gQ2ec7@stx->datum gQ331f@e))) (if (gQ2ec1@self-evaluating? gQ3337@d) (values 'constant gQ3337@d '#f) (values 'other '#f '#f))))))) (set! gQ4b4b@gQ2ed5@syntax-type gQ2ed5@syntax-type) (set! gQ2ee3@sanitize-binding (lambda (gQ3339@x gQ333a@src) (if (procedure? gQ3339@x) (cons* 'local-macro gQ3339@x gQ333a@src) (if (and (pair? gQ3339@x) (eq? (car gQ3339@x) 'macro!) (procedure? (cdr gQ3339@x))) (cons* 'local-macro! (cdr gQ3339@x) gQ333a@src) (if (and (pair? gQ3339@x) (eq? (car gQ3339@x) '$rtd)) gQ3339@x (assertion-violation 'expand '"invalid transformer" gQ3339@x)))))) (set! gQ4b4c@gQ2ee3@sanitize-binding gQ2ee3@sanitize-binding) (set! gQ2ee5@make-variable-transformer (lambda (gQ333d@x) (if (procedure? gQ333d@x) (cons 'macro! gQ333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" gQ333d@x)))) (set! gQ4b4d@gQ2ee5@make-variable-transformer gQ2ee5@make-variable-transformer) (set! gQ2ee7@variable-transformer? (lambda (gQ333f@x) (and (pair? gQ333f@x) (eq? (car gQ333f@x) 'macro!) (procedure? (cdr gQ333f@x))))) (set! gQ4b4e@gQ2ee7@variable-transformer? gQ2ee7@variable-transformer?) (set! gQ2ee9@variable-transformer-procedure (lambda (gQ3341@x) (if (gQ2ee7@variable-transformer? gQ3341@x) (cdr gQ3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" gQ3341@x)))) (set! gQ4b4f@gQ2ee9@variable-transformer-procedure gQ2ee9@variable-transformer-procedure) (set! gQ2eeb@make-eval-transformer (lambda (gQ3343@x) (gQ2ee3@sanitize-binding (eval-core (gQ2a59@gQ2a11@expanded->core gQ3343@x)) gQ3343@x))) (set! gQ4b50@gQ2eeb@make-eval-transformer gQ2eeb@make-eval-transformer) (set! gQ303c@parse-define (lambda (gQ3345@x) (let ((gQ3347@t gQ3345@x)) (let ((gQ3349@ls/false (gQ30ba@syntax-dispatch gQ3347@t '(_ (any . any) any . each-any)))) (if (and gQ3349@ls/false (apply (lambda (gQ334b@id gQ334c@fmls gQ334d@b gQ334e@b*) (gQ2eb3@id? gQ334b@id)) gQ3349@ls/false)) (apply (lambda (gQ3353@id gQ3354@fmls gQ3355@b gQ3356@b*) (begin (gQ30e0@verify-formals gQ3354@fmls gQ3345@x) (values gQ3353@id (cons 'defun (cons gQ3354@fmls (cons gQ3355@b gQ3356@b*)))))) gQ3349@ls/false) (let ((gQ335b@t gQ3347@t)) (let ((gQ335d@ls/false (gQ30ba@syntax-dispatch gQ335b@t '(_ any any)))) (if (and gQ335d@ls/false (apply (lambda (gQ335f@id gQ3360@val) (gQ2eb3@id? gQ335f@id)) gQ335d@ls/false)) (apply (lambda (gQ3363@id gQ3364@val) (values gQ3363@id (cons 'expr gQ3364@val))) gQ335d@ls/false) (let ((gQ3367@t gQ335b@t)) (let ((gQ3369@ls/false (gQ30ba@syntax-dispatch gQ3367@t '(_ any)))) (if (and gQ3369@ls/false (apply (lambda (gQ336b@id) (gQ2eb3@id? gQ336b@id)) gQ3369@ls/false)) (apply (lambda (gQ336d@id) (values gQ336d@id (cons 'expr (gQ3070@bless '(void))))) gQ3369@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3367@t)))))))))))) (set! gQ4b51@gQ303c@parse-define gQ303c@parse-define) (set! gQ303e@parse-define-syntax (lambda (gQ336f@x) (let ((gQ3371@t gQ336f@x)) (let ((gQ3373@ls/false (gQ30ba@syntax-dispatch gQ3371@t '(_ any any)))) (if (and gQ3373@ls/false (apply (lambda (gQ3375@id gQ3376@val) (gQ2eb3@id? gQ3375@id)) gQ3373@ls/false)) (apply (lambda (gQ3379@id gQ337a@val) (values gQ3379@id gQ337a@val)) gQ3373@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3371@t)))))) (set! gQ4b52@gQ303e@parse-define-syntax gQ303e@parse-define-syntax) (set! gQ3040@scheme-stx-hashtable (make-eq-hashtable)) (set! gQ4b53@gQ3040@scheme-stx-hashtable gQ3040@scheme-stx-hashtable) (set! gQ3042@scheme-stx (lambda (gQ337d@sym) (or (hashtable-ref gQ3040@scheme-stx-hashtable gQ337d@sym '#f) (let ((gQ337f@subst (gQ2caa@gQ2ad3@library-subst (gQ2cc8@gQ2b0f@find-library-by-name '(psyntax system $all))))) (let ((gQ3381@stx (make-simple-struct 'stx '5 (list gQ337d@sym gQ2e37@top-mark* '() '())))) (let ((gQ3383@stx (let ((gQ3385@t (assq gQ337d@sym gQ337f@subst))) (if gQ3385@t ((lambda (gQ3387@x) (let ((gQ3389@name (car gQ3387@x)) (gQ338a@label (cdr gQ3387@x))) (gQ2e9f@add-subst (make-simple-struct 'rib '6 (list (list gQ3389@name) (list gQ2e37@top-mark*) (list gQ338a@label) '#f '#f)) gQ3381@stx))) gQ3385@t) gQ3381@stx)))) (begin (hashtable-set! gQ3040@scheme-stx-hashtable gQ337d@sym gQ3383@stx) gQ3383@stx))))))) (set! gQ4b54@gQ3042@scheme-stx gQ3042@scheme-stx) (set! gQ3044@lexical-var car) (set! gQ4b55@gQ3044@lexical-var gQ3044@lexical-var) (set! gQ3046@lexical-mutable? cdr) (set! gQ4b56@gQ3046@lexical-mutable? gQ3046@lexical-mutable?) (set! gQ3048@set-lexical-mutable! set-cdr!) (set! gQ4b57@gQ3048@set-lexical-mutable! gQ3048@set-lexical-mutable!) (set! gQ304a@add-lexical (lambda (gQ338d@lab gQ338e@lex gQ338f@r) (cons (cons* gQ338d@lab 'lexical gQ338e@lex '#f) gQ338f@r))) (set! gQ4b58@gQ304a@add-lexical gQ304a@add-lexical) (set! gQ304c@add-lexicals (lambda (gQ3393@lab* gQ3394@lex* gQ3395@r) (if (null? gQ3393@lab*) gQ3395@r (gQ304c@add-lexicals (cdr gQ3393@lab*) (cdr gQ3394@lex*) (gQ304a@add-lexical (car gQ3393@lab*) (car gQ3394@lex*) gQ3395@r))))) (set! gQ4b59@gQ304c@add-lexicals gQ304c@add-lexicals) (set! gQ304e@letrec-helper (lambda (gQ3399@e gQ339a@r gQ339b@mr gQ339c@build) (let ((gQ33a1@t gQ3399@e)) (let ((gQ33a3@ls/false (gQ30ba@syntax-dispatch gQ33a1@t '(_ #(each (any any)) any . each-any)))) (if gQ33a3@ls/false (apply (lambda (gQ33a5@lhs* gQ33a6@rhs* gQ33a7@b gQ33a8@b*) (if (not (gQ2ebb@valid-bound-ids? gQ33a5@lhs*)) (gQ3074@invalid-fmls-error gQ3399@e gQ33a5@lhs*) (let ((gQ33ad@lex* (map gQ2e3b@gen-lexical gQ33a5@lhs*)) (gQ33ae@lab* (map gQ2e3f@gen-label gQ33a5@lhs*))) (let ((gQ33b1@rib (gQ2e73@make-full-rib gQ33a5@lhs* gQ33ae@lab*)) (gQ33b2@r (gQ304c@add-lexicals gQ33ae@lab* gQ33ad@lex* gQ339a@r))) (let ((gQ33b5@body (gQ30f2@chi-internal (gQ2e9f@add-subst gQ33b1@rib (cons gQ33a7@b gQ33a8@b*)) gQ33b2@r gQ339b@mr)) (gQ33b6@rhs* (gQ30d8@chi-expr* (map (lambda (gQ33b9@x) (gQ2e9f@add-subst gQ33b1@rib gQ33b9@x)) gQ33a6@rhs*) gQ33b2@r gQ339b@mr))) (gQ339c@build '#f gQ33ad@lex* gQ33b6@rhs* gQ33b5@body)))))) gQ33a3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ33a1@t)))))) (set! gQ4b5a@gQ304e@letrec-helper gQ304e@letrec-helper) (set! gQ3050@let-transformer (lambda (gQ33bb@e gQ33bc@r gQ33bd@mr) (let ((gQ33c1@t gQ33bb@e)) (let ((gQ33c3@ls/false (gQ30ba@syntax-dispatch gQ33c1@t '(_ #(each (any any)) any . each-any)))) (if gQ33c3@ls/false (apply (lambda (gQ33c5@lhs* gQ33c6@rhs* gQ33c7@b gQ33c8@b*) (if (not (gQ2ebb@valid-bound-ids? gQ33c5@lhs*)) (gQ3074@invalid-fmls-error gQ33bb@e gQ33c5@lhs*) (let ((gQ33cd@lex* (map gQ2e3b@gen-lexical gQ33c5@lhs*)) (gQ33ce@lab* (map gQ2e3f@gen-label gQ33c5@lhs*)) (gQ33cf@rhs* (gQ30d8@chi-expr* gQ33c6@rhs* gQ33bc@r gQ33bd@mr))) (let ((gQ33d3@rib (gQ2e73@make-full-rib gQ33c5@lhs* gQ33ce@lab*)) (gQ33d4@r (gQ304c@add-lexicals gQ33ce@lab* gQ33cd@lex* gQ33bc@r))) (let ((gQ33d7@body (gQ30f2@chi-internal (gQ2e9f@add-subst gQ33d3@rib (cons gQ33c7@b gQ33c8@b*)) gQ33d4@r gQ33bd@mr))) (gQ2e1b@gQ2d7e@build-let '#f gQ33cd@lex* gQ33cf@rhs* gQ33d7@body)))))) gQ33c3@ls/false) (let ((gQ33d9@t gQ33c1@t)) (let ((gQ33db@ls/false (gQ30ba@syntax-dispatch gQ33d9@t '(_ any #(each (any any)) any . each-any)))) (if gQ33db@ls/false (apply (lambda (gQ33dd@loop gQ33de@lhs* gQ33df@rhs* gQ33e0@b gQ33e1@b*) (if (not (gQ2ebb@valid-bound-ids? gQ33de@lhs*)) (gQ3074@invalid-fmls-error gQ33bb@e gQ33de@lhs*) (let ((gQ33e7@lex* (map gQ2e3b@gen-lexical gQ33de@lhs*)) (gQ33e8@lab* (map gQ2e3f@gen-label gQ33de@lhs*)) (gQ33e9@rhs* (gQ30d8@chi-expr* gQ33df@rhs* gQ33bc@r gQ33bd@mr)) (gQ33ea@loop-lex (gQ2e3b@gen-lexical gQ33dd@loop)) (gQ33eb@loop-lab (gQ2e3f@gen-label gQ33dd@loop))) (let ((gQ33f1@loop-rib (gQ2e73@make-full-rib (list gQ33dd@loop) (list gQ33eb@loop-lab))) (gQ33f2@rib (gQ2e73@make-full-rib gQ33de@lhs* gQ33e8@lab*)) (gQ33f3@r (gQ304c@add-lexicals (cons gQ33eb@loop-lab gQ33e8@lab*) (cons gQ33ea@loop-lex gQ33e7@lex*) gQ33bc@r))) (let ((gQ33f7@body (gQ30f2@chi-internal (gQ2e9f@add-subst gQ33f1@loop-rib (gQ2e9f@add-subst gQ33f2@rib (cons gQ33e0@b gQ33e1@b*))) gQ33f3@r gQ33bd@mr))) (gQ2e1c@gQ2d80@build-named-let '#f gQ33ea@loop-lex gQ33e7@lex* gQ33e9@rhs* gQ33f7@body)))))) gQ33db@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ33d9@t))))))))) (set! gQ4b5b@gQ3050@let-transformer gQ3050@let-transformer) (set! gQ3052@letrec-transformer (lambda (gQ33f9@e gQ33fa@r gQ33fb@mr) (gQ304e@letrec-helper gQ33f9@e gQ33fa@r gQ33fb@mr gQ2e1a@gQ2d7c@build-letrec))) (set! gQ4b5c@gQ3052@letrec-transformer gQ3052@letrec-transformer) (set! gQ3054@letrec*-transformer (lambda (gQ33ff@e gQ3400@r gQ3401@mr) (gQ304e@letrec-helper gQ33ff@e gQ3400@r gQ3401@mr gQ2e1d@gQ2d82@build-letrec*))) (set! gQ4b5d@gQ3054@letrec*-transformer gQ3054@letrec*-transformer) (set! gQ3056@fluid-let-syntax-transformer (lambda (gQ3405@e gQ3406@r gQ3407@mr) (letrec* ((gQ340c@lookup (lambda (gQ341f@x) (or (gQ2ec9@id->label gQ341f@x) (gQ319a@syntax-violation '#f '"unbound identifier" gQ3405@e gQ341f@x))))) (let ((gQ340d@t gQ3405@e)) (let ((gQ340f@ls/false (gQ30ba@syntax-dispatch gQ340d@t '(_ #(each (any any)) any . each-any)))) (if gQ340f@ls/false (apply (lambda (gQ3411@lhs* gQ3412@rhs* gQ3413@b gQ3414@b*) (if (not (gQ2ebb@valid-bound-ids? gQ3411@lhs*)) (gQ3074@invalid-fmls-error gQ3405@e gQ3411@lhs*) (let ((gQ3419@lab* (map gQ340c@lookup gQ3411@lhs*)) (gQ341a@rhs* (map (lambda (gQ341d@x) (gQ2eeb@make-eval-transformer (gQ3114@expand-transformer gQ341d@x gQ3407@mr))) gQ3412@rhs*))) (gQ30f2@chi-internal (cons gQ3413@b gQ3414@b*) (append (map cons gQ3419@lab* gQ341a@rhs*) gQ3406@r) (append (map cons gQ3419@lab* gQ341a@rhs*) gQ3407@mr))))) gQ340f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ340d@t))))))) (set! gQ4b5e@gQ3056@fluid-let-syntax-transformer gQ3056@fluid-let-syntax-transformer) (set! gQ3058@type-descriptor-transformer (lambda (gQ3421@e gQ3422@r gQ3423@mr) (let ((gQ3427@t gQ3421@e)) (let ((gQ3429@ls/false (gQ30ba@syntax-dispatch gQ3427@t '(_ any)))) (if (and gQ3429@ls/false (apply (lambda (gQ342b@id) (gQ2eb3@id? gQ342b@id)) gQ3429@ls/false)) (apply (lambda (gQ342d@id) (let ((gQ342f@lab (gQ2ec9@id->label gQ342d@id))) (let ((gQ3431@b (gQ2ecb@label->binding gQ342f@lab gQ3422@r))) (let ((gQ3433@type (gQ2ecf@binding-type gQ3431@b))) (begin (if (not gQ342f@lab) (gQ2ed3@raise-unbound-error gQ342d@id) (void)) (if (not (and (eq? gQ3433@type '$rtd) (not (list? (gQ2ed1@binding-value gQ3431@b))))) (gQ319a@syntax-violation '#f '"not a record type" gQ3421@e) (void)) (list 'quote (gQ2ed1@binding-value gQ3431@b))))))) gQ3429@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3427@t)))))) (set! gQ4b5f@gQ3058@type-descriptor-transformer gQ3058@type-descriptor-transformer) (set! gQ305a@record-type-descriptor-transformer (lambda (gQ3435@e gQ3436@r gQ3437@mr) (let ((gQ343b@t gQ3435@e)) (let ((gQ343d@ls/false (gQ30ba@syntax-dispatch gQ343b@t '(_ any)))) (if (and gQ343d@ls/false (apply (lambda (gQ343f@id) (gQ2eb3@id? gQ343f@id)) gQ343d@ls/false)) (apply (lambda (gQ3441@id) (let ((gQ3443@lab (gQ2ec9@id->label gQ3441@id))) (let ((gQ3445@b (gQ2ecb@label->binding gQ3443@lab gQ3436@r))) (let ((gQ3447@type (gQ2ecf@binding-type gQ3445@b))) (begin (if (not gQ3443@lab) (gQ2ed3@raise-unbound-error gQ3441@id) (void)) (if (not (and (eq? gQ3447@type '$rtd) (list? (gQ2ed1@binding-value gQ3445@b)))) (gQ319a@syntax-violation '#f '"not a record type" gQ3435@e) (void)) (gQ30dc@chi-expr (car (gQ2ed1@binding-value gQ3445@b)) gQ3436@r gQ3437@mr)))))) gQ343d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ343b@t)))))) (set! gQ4b60@gQ305a@record-type-descriptor-transformer gQ305a@record-type-descriptor-transformer) (set! gQ305c@record-constructor-descriptor-transformer (lambda (gQ3449@e gQ344a@r gQ344b@mr) (let ((gQ344f@t gQ3449@e)) (let ((gQ3451@ls/false (gQ30ba@syntax-dispatch gQ344f@t '(_ any)))) (if (and gQ3451@ls/false (apply (lambda (gQ3453@id) (gQ2eb3@id? gQ3453@id)) gQ3451@ls/false)) (apply (lambda (gQ3455@id) (let ((gQ3457@lab (gQ2ec9@id->label gQ3455@id))) (let ((gQ3459@b (gQ2ecb@label->binding gQ3457@lab gQ344a@r))) (let ((gQ345b@type (gQ2ecf@binding-type gQ3459@b))) (begin (if (not gQ3457@lab) (gQ2ed3@raise-unbound-error gQ3455@id) (void)) (if (not (and (eq? gQ345b@type '$rtd) (list? (gQ2ed1@binding-value gQ3459@b)))) (gQ319a@syntax-violation '#f '"invalid type" gQ3449@e) (void)) (gQ30dc@chi-expr (cadr (gQ2ed1@binding-value gQ3459@b)) gQ344a@r gQ344b@mr)))))) gQ3451@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ344f@t)))))) (set! gQ4b61@gQ305c@record-constructor-descriptor-transformer gQ305c@record-constructor-descriptor-transformer) (set! gQ305e@when-macro (lambda (gQ345d@e) (let ((gQ345f@t gQ345d@e)) (let ((gQ3461@ls/false (gQ30ba@syntax-dispatch gQ345f@t '(_ any any . each-any)))) (if gQ3461@ls/false (apply (lambda (gQ3463@test gQ3464@e gQ3465@e*) (gQ3070@bless (list 'if gQ3463@test (cons 'begin (cons gQ3464@e gQ3465@e*))))) gQ3461@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ345f@t)))))) (set! gQ4b62@gQ305e@when-macro gQ305e@when-macro) (set! gQ3060@unless-macro (lambda (gQ3469@e) (let ((gQ346b@t gQ3469@e)) (let ((gQ346d@ls/false (gQ30ba@syntax-dispatch gQ346b@t '(_ any any . each-any)))) (if gQ346d@ls/false (apply (lambda (gQ346f@test gQ3470@e gQ3471@e*) (gQ3070@bless (list 'if (list 'not gQ346f@test) (cons 'begin (cons gQ3470@e gQ3471@e*))))) gQ346d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ346b@t)))))) (set! gQ4b63@gQ3060@unless-macro gQ3060@unless-macro) (set! gQ3062@if-transformer (lambda (gQ3475@e gQ3476@r gQ3477@mr) (let ((gQ347b@t gQ3475@e)) (let ((gQ347d@ls/false (gQ30ba@syntax-dispatch gQ347b@t '(_ any any any)))) (if gQ347d@ls/false (apply (lambda (gQ347f@e0 gQ3480@e1 gQ3481@e2) (list 'if (gQ30dc@chi-expr gQ347f@e0 gQ3476@r gQ3477@mr) (gQ30dc@chi-expr gQ3480@e1 gQ3476@r gQ3477@mr) (gQ30dc@chi-expr gQ3481@e2 gQ3476@r gQ3477@mr))) gQ347d@ls/false) (let ((gQ3485@t gQ347b@t)) (let ((gQ3487@ls/false (gQ30ba@syntax-dispatch gQ3485@t '(_ any any)))) (if gQ3487@ls/false (apply (lambda (gQ3489@e0 gQ348a@e1) (list 'if (gQ30dc@chi-expr gQ3489@e0 gQ3476@r gQ3477@mr) (gQ30dc@chi-expr gQ348a@e1 gQ3476@r gQ3477@mr) (gQ2e19@gQ2d7a@build-void))) gQ3487@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3485@t))))))))) (set! gQ4b64@gQ3062@if-transformer gQ3062@if-transformer) (set! gQ3064@and-transformer (lambda (gQ348d@e gQ348e@r gQ348f@mr) (let ((gQ3493@t gQ348d@e)) (let ((gQ3495@ls/false (gQ30ba@syntax-dispatch gQ3493@t '(_ . each-any)))) (if gQ3495@ls/false (apply (lambda (gQ3497@e*) (cons 'and (gQ30d8@chi-expr* gQ3497@e* gQ348e@r gQ348f@mr))) gQ3495@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3493@t)))))) (set! gQ4b65@gQ3064@and-transformer gQ3064@and-transformer) (set! gQ3066@or-transformer (lambda (gQ3499@e gQ349a@r gQ349b@mr) (let ((gQ349f@t gQ3499@e)) (let ((gQ34a1@ls/false (gQ30ba@syntax-dispatch gQ349f@t '(_ . each-any)))) (if gQ34a1@ls/false (apply (lambda (gQ34a3@e*) (cons 'or (gQ30d8@chi-expr* gQ34a3@e* gQ349a@r gQ349b@mr))) gQ34a1@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ349f@t)))))) (set! gQ4b66@gQ3066@or-transformer gQ3066@or-transformer) (set! gQ3068@case-macro (lambda (gQ34a5@e) (letrec* ((gQ34a8@build-last (lambda (gQ34cf@cls) (let ((gQ34d1@t gQ34cf@cls)) (let ((gQ34d3@ls/false (gQ30ba@syntax-dispatch gQ34d1@t '(#(scheme-id else) any . each-any)))) (if gQ34d3@ls/false (apply (lambda (gQ34d5@e gQ34d6@e*) (cons 'begin (cons gQ34d5@e gQ34d6@e*))) gQ34d3@ls/false) (let ((gQ34d9@t gQ34d1@t)) (let ((gQ34db@ls/false (gQ30ba@syntax-dispatch gQ34d9@t '_))) (if gQ34db@ls/false (apply (lambda () (gQ34aa@build-one gQ34cf@cls '(if #f #f))) gQ34db@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ34d9@t))))))))) (gQ34aa@build-one (lambda (gQ34c1@cls gQ34c2@k) (let ((gQ34c5@t gQ34c1@cls)) (let ((gQ34c7@ls/false (gQ30ba@syntax-dispatch gQ34c5@t '(each-any any . each-any)))) (if gQ34c7@ls/false (apply (lambda (gQ34c9@d* gQ34ca@e gQ34cb@e*) (list 'if (list 'memv 't (list 'quote gQ34c9@d*)) (cons 'begin (cons gQ34ca@e gQ34cb@e*)) gQ34c2@k)) gQ34c7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ34c5@t))))))) (let ((gQ34ab@t gQ34a5@e)) (let ((gQ34ad@ls/false (gQ30ba@syntax-dispatch gQ34ab@t '(_ any)))) (if gQ34ad@ls/false (apply (lambda (gQ34af@expr) (gQ3070@bless (cons 'let (cons (list (list 't gQ34af@expr)) '((if #f #f)))))) gQ34ad@ls/false) (let ((gQ34b1@t gQ34ab@t)) (let ((gQ34b3@ls/false (gQ30ba@syntax-dispatch gQ34b1@t '(_ any any . each-any)))) (if gQ34b3@ls/false (apply (lambda (gQ34b5@expr gQ34b6@cls gQ34b7@cls*) (gQ3070@bless (list 'let (list (list 't gQ34b5@expr)) (let gQ34bf@f ((gQ34bb@cls gQ34b6@cls) (gQ34bc@cls* gQ34b7@cls*)) (if (null? gQ34bc@cls*) (gQ34a8@build-last gQ34bb@cls) (gQ34aa@build-one gQ34bb@cls (gQ34bf@f (car gQ34bc@cls*) (cdr gQ34bc@cls*)))))))) gQ34b3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ34b1@t)))))))))) (set! gQ4b67@gQ3068@case-macro gQ3068@case-macro) (set! gQ306a@quote-transformer (lambda (gQ34dd@e gQ34de@r gQ34df@mr) (let ((gQ34e3@t gQ34dd@e)) (let ((gQ34e5@ls/false (gQ30ba@syntax-dispatch gQ34e3@t '(_ any)))) (if gQ34e5@ls/false (apply (lambda (gQ34e7@datum) (list 'quote (gQ2ec7@stx->datum gQ34e7@datum))) gQ34e5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ34e3@t)))))) (set! gQ4b68@gQ306a@quote-transformer gQ306a@quote-transformer) (set! gQ306c@case-lambda-transformer (lambda (gQ34e9@e gQ34ea@r gQ34eb@mr) (let ((gQ34ef@t gQ34e9@e)) (let ((gQ34f1@ls/false (gQ30ba@syntax-dispatch gQ34ef@t '(_ . #(each (any any . each-any)))))) (if gQ34f1@ls/false (apply (lambda (gQ34f3@fmls* gQ34f4@b* gQ34f5@b**) (call-with-values (lambda () (gQ30e4@chi-lambda-clause* gQ34e9@e gQ34f3@fmls* (map cons gQ34f4@b* gQ34f5@b**) gQ34ea@r gQ34eb@mr)) (lambda (gQ34fd@gQ34fa gQ34fe@gQ34fc) (let ((gQ3501@body* gQ34fe@gQ34fc) (gQ3502@fmls* gQ34fd@gQ34fa)) (gQ2e17@gQ2d4a@build-case-lambda '#f gQ3502@fmls* gQ3501@body*))))) gQ34f1@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ34ef@t)))))) (set! gQ4b69@gQ306c@case-lambda-transformer gQ306c@case-lambda-transformer) (set! gQ306e@lambda-transformer (lambda (gQ3505@e gQ3506@r gQ3507@mr) (let ((gQ350b@t gQ3505@e)) (let ((gQ350d@ls/false (gQ30ba@syntax-dispatch gQ350b@t '(_ any any . each-any)))) (if gQ350d@ls/false (apply (lambda (gQ350f@fmls gQ3510@b gQ3511@b*) (call-with-values (lambda () (gQ30e2@chi-lambda-clause gQ3505@e gQ350f@fmls (cons gQ3510@b gQ3511@b*) gQ3506@r gQ3507@mr)) (lambda (gQ3519@gQ3516 gQ351a@gQ3518) (let ((gQ351d@body gQ351a@gQ3518) (gQ351e@fmls gQ3519@gQ3516)) (gQ2e16@gQ2d48@build-lambda '#f gQ351e@fmls gQ351d@body))))) gQ350d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ350b@t)))))) (set! gQ4b6a@gQ306e@lambda-transformer gQ306e@lambda-transformer) (set! gQ3070@bless (lambda (gQ3521@x) (gQ2e9b@mkstx (let gQ3525@f ((gQ3523@x gQ3521@x)) (if (gQ2e7f@stx? gQ3523@x) gQ3523@x (if (pair? gQ3523@x) (cons (gQ3525@f (car gQ3523@x)) (gQ3525@f (cdr gQ3523@x))) (if (symbol? gQ3523@x) (gQ3042@scheme-stx gQ3523@x) (if (vector? gQ3523@x) (vector-map gQ3525@f gQ3523@x) gQ3523@x))))) '() '() '()))) (set! gQ4b6b@gQ3070@bless gQ3070@bless) (set! gQ3072@with-syntax-macro (lambda (gQ3527@e) (let ((gQ3529@t gQ3527@e)) (let ((gQ352b@ls/false (gQ30ba@syntax-dispatch gQ3529@t '(_ #(each (any any)) any . each-any)))) (if gQ352b@ls/false (apply (lambda (gQ352d@pat* gQ352e@expr* gQ352f@b gQ3530@b*) (let ((gQ3535@idn* (let gQ3539@f ((gQ3537@pat* gQ352d@pat*)) (if (null? gQ3537@pat*) '() (call-with-values (lambda () (gQ30b8@convert-pattern (car gQ3537@pat*) '())) (lambda (gQ353f@gQ353c gQ3540@gQ353e) (let ((gQ3543@idn* gQ3540@gQ353e) (gQ3544@pat gQ353f@gQ353c)) (append gQ3543@idn* (gQ3539@f (cdr gQ3537@pat*)))))))))) (begin (gQ30e0@verify-formals (map car gQ3535@idn*) gQ3527@e) (let ((gQ3547@t* (gQ3188@generate-temporaries gQ352e@expr*))) (gQ3070@bless (list 'let (map list gQ3547@t* gQ352e@expr*) (let gQ354d@f ((gQ3549@pat* gQ352d@pat*) (gQ354a@t* gQ3547@t*)) (if (null? gQ3549@pat*) (cons 'begin (cons '#f (cons gQ352f@b gQ3530@b*))) (list 'syntax-case (car gQ354a@t*) '() (list (car gQ3549@pat*) (gQ354d@f (cdr gQ3549@pat*) (cdr gQ354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car gQ3549@pat*)) (car gQ354a@t*)))))))))))) gQ352b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3529@t)))))) (set! gQ4b6c@gQ3072@with-syntax-macro gQ3072@with-syntax-macro) (set! gQ3074@invalid-fmls-error (lambda (gQ354f@stx gQ3550@fmls) (let ((gQ3553@t gQ3550@fmls)) (let ((gQ3555@ls/false (gQ30ba@syntax-dispatch gQ3553@t '#(each+ any () any)))) (if gQ3555@ls/false (apply (lambda (gQ3557@id* gQ3558@last) (let gQ355d@f ((gQ355b@id* (if (gQ2eb3@id? gQ3558@last) (cons gQ3558@last gQ3557@id*) (if (gQ2ea9@syntax-null? gQ3558@last) gQ3557@id* (gQ319a@syntax-violation '#f '"not an identifier" gQ354f@stx gQ3558@last))))) (if (null? gQ355b@id*) (values) (if (not (gQ2eb3@id? (car gQ355b@id*))) (gQ319a@syntax-violation '#f '"not an identifier" gQ354f@stx (car gQ355b@id*)) (begin (gQ355d@f (cdr gQ355b@id*)) (if (gQ2ebf@bound-id-member? (car gQ355b@id*) (cdr gQ355b@id*)) (gQ319a@syntax-violation '#f '"duplicate binding" gQ354f@stx (car gQ355b@id*)) (void))))))) gQ3555@ls/false) (let ((gQ355f@t gQ3553@t)) (let ((gQ3561@ls/false (gQ30ba@syntax-dispatch gQ355f@t '_))) (if gQ3561@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"malformed binding form" gQ354f@stx gQ3550@fmls)) gQ3561@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ355f@t))))))))) (set! gQ4b6d@gQ3074@invalid-fmls-error gQ3074@invalid-fmls-error) (set! gQ3076@let-macro (lambda (gQ3563@stx) (let ((gQ3565@t gQ3563@stx)) (let ((gQ3567@ls/false (gQ30ba@syntax-dispatch gQ3565@t '(_ #(each (any any)) any . each-any)))) (if gQ3567@ls/false (apply (lambda (gQ3569@lhs* gQ356a@rhs* gQ356b@b gQ356c@b*) (if (gQ2ebb@valid-bound-ids? gQ3569@lhs*) (gQ3070@bless (cons (cons 'lambda (cons gQ3569@lhs* (cons gQ356b@b gQ356c@b*))) gQ356a@rhs*)) (gQ3074@invalid-fmls-error gQ3563@stx gQ3569@lhs*))) gQ3567@ls/false) (let ((gQ3571@t gQ3565@t)) (let ((gQ3573@ls/false (gQ30ba@syntax-dispatch gQ3571@t '(_ any #(each (any any)) any . each-any)))) (if (and gQ3573@ls/false (apply (lambda (gQ3575@f gQ3576@lhs* gQ3577@rhs* gQ3578@b gQ3579@b*) (gQ2eb3@id? gQ3575@f)) gQ3573@ls/false)) (apply (lambda (gQ357f@f gQ3580@lhs* gQ3581@rhs* gQ3582@b gQ3583@b*) (if (gQ2ebb@valid-bound-ids? gQ3580@lhs*) (gQ3070@bless (cons (list 'letrec (list (list gQ357f@f (cons 'lambda (cons gQ3580@lhs* (cons gQ3582@b gQ3583@b*))))) gQ357f@f) gQ3581@rhs*)) (gQ3074@invalid-fmls-error gQ3563@stx gQ3580@lhs*))) gQ3573@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3571@t))))))))) (set! gQ4b6e@gQ3076@let-macro gQ3076@let-macro) (set! gQ3078@let-values-macro (lambda (gQ3589@stx) (letrec* ((gQ358c@rename (lambda (gQ35f1@x gQ35f2@old* gQ35f3@new*) (begin (if (not (gQ2eb3@id? gQ35f1@x)) (gQ319a@syntax-violation '#f '"not an indentifier" gQ3589@stx gQ35f1@x) (void)) (if (gQ2ebf@bound-id-member? gQ35f1@x gQ35f2@old*) (gQ319a@syntax-violation '#f '"duplicate binding" gQ3589@stx gQ35f1@x) (void)) (let ((gQ35f7@y (gensym (gQ31a0@syntax->datum gQ35f1@x)))) (values gQ35f7@y (cons gQ35f1@x gQ35f2@old*) (cons gQ35f7@y gQ35f3@new*)))))) (gQ358e@rename* (lambda (gQ35df@x* gQ35e0@old* gQ35e1@new*) (if (null? gQ35df@x*) (values '() gQ35e0@old* gQ35e1@new*) (call-with-values (lambda () (gQ358c@rename (car gQ35df@x*) gQ35e0@old* gQ35e1@new*)) (lambda (gQ35e5@x gQ35e6@old* gQ35e7@new*) (call-with-values (lambda () (gQ358e@rename* (cdr gQ35df@x*) gQ35e6@old* gQ35e7@new*)) (lambda (gQ35eb@x* gQ35ec@old* gQ35ed@new*) (values (cons gQ35e5@x gQ35eb@x*) gQ35ec@old* gQ35ed@new*))))))))) (let ((gQ358f@t gQ3589@stx)) (let ((gQ3591@ls/false (gQ30ba@syntax-dispatch gQ358f@t '(_ () any . each-any)))) (if gQ3591@ls/false (apply (lambda (gQ3593@b gQ3594@b*) (cons* (gQ3070@bless 'let) '() gQ3593@b gQ3594@b*)) gQ3591@ls/false) (let ((gQ3597@t gQ358f@t)) (let ((gQ3599@ls/false (gQ30ba@syntax-dispatch gQ3597@t '(_ #(each (any any)) any . each-any)))) (if gQ3599@ls/false (apply (lambda (gQ359b@lhs* gQ359c@rhs* gQ359d@b gQ359e@b*) (gQ3070@bless (let gQ35ab@f ((gQ35a3@lhs* gQ359b@lhs*) (gQ35a4@rhs* gQ359c@rhs*) (gQ35a5@old* '()) (gQ35a6@new* '())) (if (null? gQ35a3@lhs*) (cons 'let (cons (map list gQ35a5@old* gQ35a6@new*) (cons gQ359d@b gQ359e@b*))) (let ((gQ35ad@t (car gQ35a3@lhs*))) (let ((gQ35af@ls/false (gQ30ba@syntax-dispatch gQ35ad@t 'each-any))) (if gQ35af@ls/false (apply (lambda (gQ35b1@x*) (call-with-values (lambda () (gQ358e@rename* gQ35b1@x* gQ35a5@old* gQ35a6@new*)) (lambda (gQ35b9@gQ35b4 gQ35ba@gQ35b6 gQ35bb@gQ35b8) (let ((gQ35bf@new* gQ35bb@gQ35b8) (gQ35c0@old* gQ35ba@gQ35b6) (gQ35c1@y* gQ35b9@gQ35b4)) (list 'call-with-values (list 'lambda '() (car gQ35a4@rhs*)) (list 'lambda gQ35c1@y* (gQ35ab@f (cdr gQ35a3@lhs*) (cdr gQ35a4@rhs*) gQ35c0@old* gQ35bf@new*))))))) gQ35af@ls/false) (let ((gQ35c5@t gQ35ad@t)) (let ((gQ35c7@ls/false (gQ30ba@syntax-dispatch gQ35c5@t '#(each+ any () any)))) (if gQ35c7@ls/false (apply (lambda (gQ35c9@x* gQ35ca@x) (call-with-values (lambda () (gQ358c@rename gQ35ca@x gQ35a5@old* gQ35a6@new*)) (lambda (gQ35cd@y gQ35ce@old* gQ35cf@new*) (call-with-values (lambda () (gQ358e@rename* gQ35c9@x* gQ35ce@old* gQ35cf@new*)) (lambda (gQ35d3@y* gQ35d4@old* gQ35d5@new*) (list 'call-with-values (list 'lambda '() (car gQ35a4@rhs*)) (list 'lambda (append gQ35d3@y* gQ35cd@y) (gQ35ab@f (cdr gQ35a3@lhs*) (cdr gQ35a4@rhs*) gQ35d4@old* gQ35d5@new*)))))))) gQ35c7@ls/false) (let ((gQ35d9@t gQ35c5@t)) (let ((gQ35db@ls/false (gQ30ba@syntax-dispatch gQ35d9@t 'any))) (if gQ35db@ls/false (apply (lambda (gQ35dd@others) (gQ319a@syntax-violation '#f '"malformed bindings" gQ3589@stx gQ35dd@others)) gQ35db@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ35d9@t)))))))))))))) gQ3599@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3597@t)))))))))) (set! gQ4b6f@gQ3078@let-values-macro gQ3078@let-values-macro) (set! gQ307a@let*-values-macro (lambda (gQ35f9@stx) (letrec* ((gQ35fc@check (lambda (gQ362b@x*) (if (not (null? gQ362b@x*)) (let ((gQ362d@x (car gQ362b@x*))) (begin (if (not (gQ2eb3@id? gQ362d@x)) (gQ319a@syntax-violation '#f '"not an identifier" gQ35f9@stx gQ362d@x) (void)) (gQ35fc@check (cdr gQ362b@x*)) (if (gQ2ebf@bound-id-member? gQ362d@x (cdr gQ362b@x*)) (gQ319a@syntax-violation '#f '"duplicate identifier" gQ35f9@stx gQ362d@x) (void)))) (void))))) (let ((gQ35fd@t gQ35f9@stx)) (let ((gQ35ff@ls/false (gQ30ba@syntax-dispatch gQ35fd@t '(_ () any . each-any)))) (if gQ35ff@ls/false (apply (lambda (gQ3601@b gQ3602@b*) (cons* (gQ3070@bless 'let) '() gQ3601@b gQ3602@b*)) gQ35ff@ls/false) (let ((gQ3605@t gQ35fd@t)) (let ((gQ3607@ls/false (gQ30ba@syntax-dispatch gQ3605@t '(_ #(each (any any)) any . each-any)))) (if gQ3607@ls/false (apply (lambda (gQ3609@lhs* gQ360a@rhs* gQ360b@b gQ360c@b*) (gQ3070@bless (let gQ3615@f ((gQ3611@lhs* gQ3609@lhs*) (gQ3612@rhs* gQ360a@rhs*)) (if (null? gQ3611@lhs*) (cons 'begin (cons gQ360b@b gQ360c@b*)) (let ((gQ3617@t (car gQ3611@lhs*))) (let ((gQ3619@ls/false (gQ30ba@syntax-dispatch gQ3617@t 'each-any))) (if gQ3619@ls/false (apply (lambda (gQ361b@x*) (begin (gQ35fc@check gQ361b@x*) (list 'call-with-values (list 'lambda '() (car gQ3612@rhs*)) (list 'lambda gQ361b@x* (gQ3615@f (cdr gQ3611@lhs*) (cdr gQ3612@rhs*)))))) gQ3619@ls/false) (let ((gQ361d@t gQ3617@t)) (let ((gQ361f@ls/false (gQ30ba@syntax-dispatch gQ361d@t '#(each+ any () any)))) (if gQ361f@ls/false (apply (lambda (gQ3621@x* gQ3622@x) (begin (gQ35fc@check (cons gQ3622@x gQ3621@x*)) (list 'call-with-values (list 'lambda '() (car gQ3612@rhs*)) (list 'lambda (append gQ3621@x* gQ3622@x) (gQ3615@f (cdr gQ3611@lhs*) (cdr gQ3612@rhs*)))))) gQ361f@ls/false) (let ((gQ3625@t gQ361d@t)) (let ((gQ3627@ls/false (gQ30ba@syntax-dispatch gQ3625@t 'any))) (if gQ3627@ls/false (apply (lambda (gQ3629@others) (gQ319a@syntax-violation '#f '"malformed bindings" gQ35f9@stx gQ3629@others)) gQ3627@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3625@t)))))))))))))) gQ3607@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3605@t)))))))))) (set! gQ4b70@gQ307a@let*-values-macro gQ307a@let*-values-macro) (set! gQ307c@trace-lambda-macro (lambda (gQ362f@stx) (let ((gQ3631@t gQ362f@stx)) (let ((gQ3633@ls/false (gQ30ba@syntax-dispatch gQ3631@t '(_ any each-any any . each-any)))) (if gQ3633@ls/false (apply (lambda (gQ3635@who gQ3636@fmls gQ3637@b gQ3638@b*) (if (gQ2ebb@valid-bound-ids? gQ3636@fmls) (gQ3070@bless (list 'make-traced-procedure (list 'quote gQ3635@who) (cons 'lambda (cons gQ3636@fmls (cons gQ3637@b gQ3638@b*))))) (gQ3074@invalid-fmls-error gQ362f@stx gQ3636@fmls))) gQ3633@ls/false) (let ((gQ363d@t gQ3631@t)) (let ((gQ363f@ls/false (gQ30ba@syntax-dispatch gQ363d@t '(_ any #(each+ any () any) any . each-any)))) (if gQ363f@ls/false (apply (lambda (gQ3641@who gQ3642@fmls gQ3643@last gQ3644@b gQ3645@b*) (if (gQ2ebb@valid-bound-ids? (cons gQ3643@last gQ3642@fmls)) (gQ3070@bless (list 'make-traced-procedure (list 'quote gQ3641@who) (cons 'lambda (cons (append gQ3642@fmls gQ3643@last) (cons gQ3644@b gQ3645@b*))))) (gQ3074@invalid-fmls-error gQ362f@stx (append gQ3642@fmls gQ3643@last)))) gQ363f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ363d@t))))))))) (set! gQ4b71@gQ307c@trace-lambda-macro gQ307c@trace-lambda-macro) (set! gQ307e@trace-define-macro (lambda (gQ364b@stx) (let ((gQ364d@t gQ364b@stx)) (let ((gQ364f@ls/false (gQ30ba@syntax-dispatch gQ364d@t '(_ (any . each-any) any . each-any)))) (if gQ364f@ls/false (apply (lambda (gQ3651@who gQ3652@fmls gQ3653@b gQ3654@b*) (if (gQ2ebb@valid-bound-ids? gQ3652@fmls) (gQ3070@bless (list 'define gQ3651@who (list 'make-traced-procedure (list 'quote gQ3651@who) (cons 'lambda (cons gQ3652@fmls (cons gQ3653@b gQ3654@b*)))))) (gQ3074@invalid-fmls-error gQ364b@stx gQ3652@fmls))) gQ364f@ls/false) (let ((gQ3659@t gQ364d@t)) (let ((gQ365b@ls/false (gQ30ba@syntax-dispatch gQ3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if gQ365b@ls/false (apply (lambda (gQ365d@who gQ365e@fmls gQ365f@last gQ3660@b gQ3661@b*) (if (gQ2ebb@valid-bound-ids? (cons gQ365f@last gQ365e@fmls)) (gQ3070@bless (list 'define gQ365d@who (list 'make-traced-procedure (list 'quote gQ365d@who) (cons 'lambda (cons (append gQ365e@fmls gQ365f@last) (cons gQ3660@b gQ3661@b*)))))) (gQ3074@invalid-fmls-error gQ364b@stx (append gQ365e@fmls gQ365f@last)))) gQ365b@ls/false) (let ((gQ3667@t gQ3659@t)) (let ((gQ3669@ls/false (gQ30ba@syntax-dispatch gQ3667@t '(_ any any)))) (if gQ3669@ls/false (apply (lambda (gQ366b@who gQ366c@expr) (if (gQ2eb3@id? gQ366b@who) (gQ3070@bless (list 'define gQ366b@who (list 'let (list (list 'v gQ366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote gQ366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (gQ319a@syntax-violation '#f '"invalid name" gQ364b@stx))) gQ3669@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3667@t)))))))))))) (set! gQ4b72@gQ307e@trace-define-macro gQ307e@trace-define-macro) (set! gQ3080@trace-define-syntax-macro (lambda (gQ366f@stx) (let ((gQ3671@t gQ366f@stx)) (let ((gQ3673@ls/false (gQ30ba@syntax-dispatch gQ3671@t '(_ any any)))) (if gQ3673@ls/false (apply (lambda (gQ3675@who gQ3676@expr) (if (gQ2eb3@id? gQ3675@who) (gQ3070@bless (list 'define-syntax gQ3675@who (list 'make-traced-macro (list 'quote gQ3675@who) gQ3676@expr))) (gQ319a@syntax-violation '#f '"invalid name" gQ366f@stx))) gQ3673@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3671@t)))))) (set! gQ4b73@gQ3080@trace-define-syntax-macro gQ3080@trace-define-syntax-macro) (set! gQ3082@trace-let/rec-syntax (lambda (gQ3679@who) (lambda (gQ367b@stx) (let ((gQ367d@t gQ367b@stx)) (let ((gQ367f@ls/false (gQ30ba@syntax-dispatch gQ367d@t '(_ #(each (any any)) any . each-any)))) (if gQ367f@ls/false (apply (lambda (gQ3681@lhs* gQ3682@rhs* gQ3683@b gQ3684@b*) (if (gQ2ebb@valid-bound-ids? gQ3681@lhs*) (let ((gQ3689@rhs* (map (lambda (gQ368b@lhs gQ368c@rhs) (list 'make-traced-macro (list 'quote gQ368b@lhs) gQ368c@rhs)) gQ3681@lhs* gQ3682@rhs*))) (gQ3070@bless (cons gQ3679@who (cons (map list gQ3681@lhs* gQ3689@rhs*) (cons gQ3683@b gQ3684@b*))))) (gQ3074@invalid-fmls-error gQ367b@stx gQ3681@lhs*))) gQ367f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ367d@t))))))) (set! gQ4b74@gQ3082@trace-let/rec-syntax gQ3082@trace-let/rec-syntax) (set! gQ3084@trace-let-syntax-macro (gQ3082@trace-let/rec-syntax 'let-syntax)) (set! gQ4b75@gQ3084@trace-let-syntax-macro gQ3084@trace-let-syntax-macro) (set! gQ3086@trace-letrec-syntax-macro (gQ3082@trace-let/rec-syntax 'letrec-syntax)) (set! gQ4b76@gQ3086@trace-letrec-syntax-macro gQ3086@trace-letrec-syntax-macro) (set! gQ3088@guard-macro (lambda (gQ368f@x) (letrec* ((gQ3692@gen-clauses (lambda (gQ36a9@con gQ36aa@outerk gQ36ab@clause*) (letrec* ((gQ36b0@f (lambda (gQ36e9@x gQ36ea@k) (let ((gQ36ed@t gQ36e9@x)) (let ((gQ36ef@ls/false (gQ30ba@syntax-dispatch gQ36ed@t '(any #(scheme-id =>) any)))) (if gQ36ef@ls/false (apply (lambda (gQ36f1@e gQ36f2@p) (let ((gQ36f5@t (gensym))) (list 'let (list (list gQ36f5@t gQ36f1@e)) (list 'if gQ36f5@t (list gQ36f2@p gQ36f5@t) gQ36ea@k)))) gQ36ef@ls/false) (let ((gQ36f7@t gQ36ed@t)) (let ((gQ36f9@ls/false (gQ30ba@syntax-dispatch gQ36f7@t '(any)))) (if gQ36f9@ls/false (apply (lambda (gQ36fb@e) (let ((gQ36fd@t (gensym))) (list 'let (list (list gQ36fd@t gQ36fb@e)) (list 'if gQ36fd@t gQ36fd@t gQ36ea@k)))) gQ36f9@ls/false) (let ((gQ36ff@t gQ36f7@t)) (let ((gQ3701@ls/false (gQ30ba@syntax-dispatch gQ36ff@t '(any any . each-any)))) (if gQ3701@ls/false (apply (lambda (gQ3703@e gQ3704@v gQ3705@v*) (list 'if gQ3703@e (cons 'begin (cons gQ3704@v gQ3705@v*)) gQ36ea@k)) gQ3701@ls/false) (let ((gQ3709@t gQ36ff@t)) (let ((gQ370b@ls/false (gQ30ba@syntax-dispatch gQ3709@t '_))) (if gQ370b@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid guard clause" gQ36e9@x)) gQ370b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3709@t))))))))))))))) (gQ36b2@f* (lambda (gQ36bf@x*) (let ((gQ36c1@t gQ36bf@x*)) (let ((gQ36c3@ls/false (gQ30ba@syntax-dispatch gQ36c1@t '()))) (if gQ36c3@ls/false (apply (lambda () (let ((gQ36c5@g (gensym))) (values (list gQ36c5@g (list 'lambda '() (list 'raise-continuable gQ36a9@con))) gQ36c5@g))) gQ36c3@ls/false) (let ((gQ36c7@t gQ36c1@t)) (let ((gQ36c9@ls/false (gQ30ba@syntax-dispatch gQ36c7@t '((#(scheme-id else) any . each-any))))) (if gQ36c9@ls/false (apply (lambda (gQ36cb@e gQ36cc@e*) (values (cons 'begin (cons gQ36cb@e gQ36cc@e*)) '#f)) gQ36c9@ls/false) (let ((gQ36cf@t gQ36c7@t)) (let ((gQ36d1@ls/false (gQ30ba@syntax-dispatch gQ36cf@t '(any . any)))) (if gQ36d1@ls/false (apply (lambda (gQ36d3@cls gQ36d4@cls*) (call-with-values (lambda () (gQ36b2@f* gQ36d4@cls*)) (lambda (gQ36db@gQ36d8 gQ36dc@gQ36da) (let ((gQ36df@g gQ36dc@gQ36da) (gQ36e0@e gQ36db@gQ36d8)) (values (gQ36b0@f gQ36d3@cls gQ36e0@e) gQ36df@g))))) gQ36d1@ls/false) (let ((gQ36e3@t gQ36cf@t)) (let ((gQ36e5@ls/false (gQ30ba@syntax-dispatch gQ36e3@t 'any))) (if gQ36e5@ls/false (apply (lambda (gQ36e7@others) (gQ319a@syntax-violation '#f '"invalid guard clause" gQ36e7@others)) gQ36e5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ36e3@t)))))))))))))))) (call-with-values (lambda () (gQ36b2@f* gQ36ab@clause*)) (lambda (gQ36b7@gQ36b4 gQ36b8@gQ36b6) (let ((gQ36bb@raisek gQ36b8@gQ36b6) (gQ36bc@code gQ36b7@gQ36b4)) (if gQ36bb@raisek (list (list 'call/cc (list 'lambda (list gQ36bb@raisek) (list gQ36aa@outerk (list 'lambda '() gQ36bc@code))))) (list gQ36aa@outerk (list 'lambda '() gQ36bc@code)))))))))) (let ((gQ3693@t gQ368f@x)) (let ((gQ3695@ls/false (gQ30ba@syntax-dispatch gQ3693@t '(_ (any . each-any) any . each-any)))) (if (and gQ3695@ls/false (apply (lambda (gQ3697@con gQ3698@clause* gQ3699@b gQ369a@b*) (gQ2eb3@id? gQ3697@con)) gQ3695@ls/false)) (apply (lambda (gQ369f@con gQ36a0@clause* gQ36a1@b gQ36a2@b*) (let ((gQ36a7@outerk (gensym))) (gQ3070@bless (list (list 'call/cc (list 'lambda (list gQ36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list gQ369f@con) (gQ3692@gen-clauses gQ369f@con gQ36a7@outerk gQ36a0@clause*)) (cons 'lambda (cons '() (cons gQ36a1@b gQ36a2@b*))))))))))) gQ3695@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3693@t))))))) (set! gQ4b77@gQ3088@guard-macro gQ3088@guard-macro) (set! gQ308a@define-enumeration-macro (lambda (gQ370d@stx) (letrec* ((gQ3710@set? (lambda (gQ3729@x) (or (null? gQ3729@x) (and (not (memq (car gQ3729@x) (cdr gQ3729@x))) (gQ3710@set? (cdr gQ3729@x)))))) (gQ3712@remove-dups (lambda (gQ3727@ls) (if (null? gQ3727@ls) '() (cons (car gQ3727@ls) (gQ3712@remove-dups (remq (car gQ3727@ls) (cdr gQ3727@ls)))))))) (let ((gQ3713@t gQ370d@stx)) (let ((gQ3715@ls/false (gQ30ba@syntax-dispatch gQ3713@t '(_ any each-any any)))) (if (and gQ3715@ls/false (apply (lambda (gQ3717@name gQ3718@id* gQ3719@maker) (and (gQ2eb3@id? gQ3717@name) (gQ2eb3@id? gQ3719@maker) (for-all gQ2eb3@id? gQ3718@id*))) gQ3715@ls/false)) (apply (lambda (gQ371d@name gQ371e@id* gQ371f@maker) (let ((gQ3723@name* (gQ3712@remove-dups (gQ31a0@syntax->datum gQ371e@id*))) (gQ3724@mk (gensym))) (gQ3070@bless (list 'begin (list 'define gQ3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote gQ3723@name*)))) (list 'define-syntax gQ371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote gQ3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote gQ371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax gQ371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote gQ371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote gQ3723@name*)) (cons 'syntax-violation (cons (list 'quote gQ371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons gQ3724@mk '('(n* ...))))))))))))) gQ3715@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3713@t))))))) (set! gQ4b78@gQ308a@define-enumeration-macro gQ308a@define-enumeration-macro) (set! gQ308c@time-macro (lambda (gQ372b@stx) (let ((gQ372d@t gQ372b@stx)) (let ((gQ372f@ls/false (gQ30ba@syntax-dispatch gQ372d@t '(_ any)))) (if gQ372f@ls/false (apply (lambda (gQ3731@expr) (gQ3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() gQ3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) gQ372f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ372d@t)))))) (set! gQ4b79@gQ308c@time-macro gQ308c@time-macro) (set! gQ308e@delay-macro (lambda (gQ3733@stx) (let ((gQ3735@t gQ3733@stx)) (let ((gQ3737@ls/false (gQ30ba@syntax-dispatch gQ3735@t '(_ any)))) (if gQ3737@ls/false (apply (lambda (gQ3739@expr) (gQ3070@bless (list 'make-promise (list 'lambda '() gQ3739@expr)))) gQ3737@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3735@t)))))) (set! gQ4b7a@gQ308e@delay-macro gQ308e@delay-macro) (set! gQ3090@assert-macro (lambda (gQ373b@stx) (let ((gQ373d@t gQ373b@stx)) (let ((gQ373f@ls/false (gQ30ba@syntax-dispatch gQ373d@t '(_ any)))) (if gQ373f@ls/false (apply (lambda (gQ3741@expr) (let ((gQ3743@pos (or (gQ3192@expression-position gQ373b@stx) (gQ3192@expression-position gQ3741@expr)))) (gQ3070@bless (list 'let (list (list 'x gQ3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote gQ3741@expr) (list 'quote gQ3743@pos))))))) gQ373f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ373d@t)))))) (set! gQ4b7b@gQ3090@assert-macro gQ3090@assert-macro) (set! gQ3092@endianness-macro (lambda (gQ3745@stx) (let ((gQ3747@t gQ3745@stx)) (let ((gQ3749@ls/false (gQ30ba@syntax-dispatch gQ3747@t '(_ any)))) (if gQ3749@ls/false (apply (lambda (gQ374b@e) (let ((gQ374d@t (gQ31a0@syntax->datum gQ374b@e))) (if (memv gQ374d@t '(little)) (gQ3070@bless ''little) (if (memv gQ374d@t '(big)) (gQ3070@bless ''big) (gQ319a@syntax-violation '#f '"endianness must be big or little" gQ3745@stx))))) gQ3749@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3747@t)))))) (set! gQ4b7c@gQ3092@endianness-macro gQ3092@endianness-macro) (set! gQ3094@identifier-syntax-macro (lambda (gQ374f@stx) (let ((gQ3751@t gQ374f@stx)) (let ((gQ3753@ls/false (gQ30ba@syntax-dispatch gQ3751@t '(_ any)))) (if gQ3753@ls/false (apply (lambda (gQ3755@expr) (gQ3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax gQ3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax gQ3755@expr) '((syntax (e* ...)))))))))) gQ3753@ls/false) (let ((gQ3757@t gQ3751@t)) (let ((gQ3759@ls/false (gQ30ba@syntax-dispatch gQ3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and gQ3759@ls/false (apply (lambda (gQ375b@id1 gQ375c@expr1 gQ375d@id2 gQ375e@expr2 gQ375f@expr3) (and (gQ2eb3@id? gQ375b@id1) (gQ2eb3@id? gQ375d@id2) (gQ2eb3@id? gQ375e@expr2))) gQ3759@ls/false)) (apply (lambda (gQ3765@id1 gQ3766@expr1 gQ3767@id2 gQ3768@expr2 gQ3769@expr3) (gQ3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax gQ3766@expr1)) (list (list 'set! 'id gQ3768@expr2) (list 'syntax gQ3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons gQ3766@expr1 '(e* ...))))))))) gQ3759@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3757@t))))))))) (set! gQ4b7d@gQ3094@identifier-syntax-macro gQ3094@identifier-syntax-macro) (set! gQ3096@do-macro (lambda (gQ376f@stx) (letrec* ((gQ3772@bind (lambda (gQ3789@x) (let ((gQ378b@t gQ3789@x)) (let ((gQ378d@ls/false (gQ30ba@syntax-dispatch gQ378b@t '(any any)))) (if gQ378d@ls/false (apply (lambda (gQ378f@x gQ3790@init) (list gQ378f@x gQ3790@init gQ378f@x)) gQ378d@ls/false) (let ((gQ3793@t gQ378b@t)) (let ((gQ3795@ls/false (gQ30ba@syntax-dispatch gQ3793@t '(any any any)))) (if gQ3795@ls/false (apply (lambda (gQ3797@x gQ3798@init gQ3799@step) (list gQ3797@x gQ3798@init gQ3799@step)) gQ3795@ls/false) (let ((gQ379d@t gQ3793@t)) (let ((gQ379f@ls/false (gQ30ba@syntax-dispatch gQ379d@t '_))) (if gQ379f@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid binding" gQ376f@stx)) gQ379f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ379d@t))))))))))))) (let ((gQ3773@t gQ376f@stx)) (let ((gQ3775@ls/false (gQ30ba@syntax-dispatch gQ3773@t '(_ each-any (any . each-any) . each-any)))) (if gQ3775@ls/false (apply (lambda (gQ3777@binding* gQ3778@test gQ3779@expr* gQ377a@command*) (let ((gQ377f@t (map gQ3772@bind gQ3777@binding*))) (let ((gQ3781@ls/false (gQ30ba@syntax-dispatch gQ377f@t '#(each (any any any))))) (if gQ3781@ls/false (apply (lambda (gQ3783@x* gQ3784@init* gQ3785@step*) (if (gQ2ebb@valid-bound-ids? gQ3783@x*) (gQ3070@bless (list 'letrec (list (list 'loop (list 'lambda gQ3783@x* (list 'if gQ3778@test (cons 'begin (cons '(if #f #f) gQ3779@expr*)) (cons 'begin (append gQ377a@command* (list (cons 'loop gQ3785@step*)))))))) (cons 'loop gQ3784@init*))) (gQ319a@syntax-violation '#f '"invalid bindings" gQ376f@stx))) gQ3781@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ377f@t))))) gQ3775@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3773@t))))))) (set! gQ4b7e@gQ3096@do-macro gQ3096@do-macro) (set! gQ3098@let*-macro (lambda (gQ37a1@stx) (let ((gQ37a3@t gQ37a1@stx)) (let ((gQ37a5@ls/false (gQ30ba@syntax-dispatch gQ37a3@t '(_ #(each (any any)) any . each-any)))) (if (and gQ37a5@ls/false (apply (lambda (gQ37a7@lhs* gQ37a8@rhs* gQ37a9@b gQ37aa@b*) (for-all gQ2eb3@id? gQ37a7@lhs*)) gQ37a5@ls/false)) (apply (lambda (gQ37af@lhs* gQ37b0@rhs* gQ37b1@b gQ37b2@b*) (gQ3070@bless (let gQ37b9@f ((gQ37b7@x* (map list gQ37af@lhs* gQ37b0@rhs*))) (if (null? gQ37b7@x*) (cons 'let (cons '() (cons gQ37b1@b gQ37b2@b*))) (list 'let (list (car gQ37b7@x*)) (gQ37b9@f (cdr gQ37b7@x*))))))) gQ37a5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ37a3@t)))))) (set! gQ4b7f@gQ3098@let*-macro gQ3098@let*-macro) (set! gQ309a@or-macro (lambda (gQ37bb@stx) (let ((gQ37bd@t gQ37bb@stx)) (let ((gQ37bf@ls/false (gQ30ba@syntax-dispatch gQ37bd@t '(_)))) (if gQ37bf@ls/false (apply (lambda () '#f) gQ37bf@ls/false) (let ((gQ37c1@t gQ37bd@t)) (let ((gQ37c3@ls/false (gQ30ba@syntax-dispatch gQ37c1@t '(_ any . each-any)))) (if gQ37c3@ls/false (apply (lambda (gQ37c5@e gQ37c6@e*) (gQ3070@bless (let gQ37cd@f ((gQ37c9@e gQ37c5@e) (gQ37ca@e* gQ37c6@e*)) (if (null? gQ37ca@e*) (list 'begin '#f gQ37c9@e) (list 'let (list (list 't gQ37c9@e)) (list 'if 't 't (gQ37cd@f (car gQ37ca@e*) (cdr gQ37ca@e*)))))))) gQ37c3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ37c1@t))))))))) (set! gQ4b80@gQ309a@or-macro gQ309a@or-macro) (set! gQ309c@and-macro (lambda (gQ37cf@stx) (let ((gQ37d1@t gQ37cf@stx)) (let ((gQ37d3@ls/false (gQ30ba@syntax-dispatch gQ37d1@t '(_)))) (if gQ37d3@ls/false (apply (lambda () '#t) gQ37d3@ls/false) (let ((gQ37d5@t gQ37d1@t)) (let ((gQ37d7@ls/false (gQ30ba@syntax-dispatch gQ37d5@t '(_ any . each-any)))) (if gQ37d7@ls/false (apply (lambda (gQ37d9@e gQ37da@e*) (gQ3070@bless (let gQ37e1@f ((gQ37dd@e gQ37d9@e) (gQ37de@e* gQ37da@e*)) (if (null? gQ37de@e*) (list 'begin '#f gQ37dd@e) (cons 'if (cons gQ37dd@e (cons (gQ37e1@f (car gQ37de@e*) (cdr gQ37de@e*)) '(#f)))))))) gQ37d7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ37d5@t))))))))) (set! gQ4b81@gQ309c@and-macro gQ309c@and-macro) (set! gQ309e@cond-macro (lambda (gQ37e3@stx) (let ((gQ37e5@t gQ37e3@stx)) (let ((gQ37e7@ls/false (gQ30ba@syntax-dispatch gQ37e5@t '(_ any . each-any)))) (if gQ37e7@ls/false (apply (lambda (gQ37e9@cls gQ37ea@cls*) (gQ3070@bless (let gQ37f1@f ((gQ37ed@cls gQ37e9@cls) (gQ37ee@cls* gQ37ea@cls*)) (if (null? gQ37ee@cls*) (let ((gQ37f3@t gQ37ed@cls)) (let ((gQ37f5@ls/false (gQ30ba@syntax-dispatch gQ37f3@t '(#(scheme-id else) any . each-any)))) (if gQ37f5@ls/false (apply (lambda (gQ37f7@e gQ37f8@e*) (cons 'begin (cons gQ37f7@e gQ37f8@e*))) gQ37f5@ls/false) (let ((gQ37fb@t gQ37f3@t)) (let ((gQ37fd@ls/false (gQ30ba@syntax-dispatch gQ37fb@t '(any #(scheme-id =>) any)))) (if gQ37fd@ls/false (apply (lambda (gQ37ff@e gQ3800@p) (list 'let (list (list 't gQ37ff@e)) (list 'if 't (cons gQ3800@p '(t))))) gQ37fd@ls/false) (let ((gQ3803@t gQ37fb@t)) (let ((gQ3805@ls/false (gQ30ba@syntax-dispatch gQ3803@t '(any)))) (if gQ3805@ls/false (apply (lambda (gQ3807@e) (cons 'or (cons gQ3807@e '((if #f #f))))) gQ3805@ls/false) (let ((gQ3809@t gQ3803@t)) (let ((gQ380b@ls/false (gQ30ba@syntax-dispatch gQ3809@t '(any . each-any)))) (if gQ380b@ls/false (apply (lambda (gQ380d@e gQ380e@e*) (list 'if gQ380d@e (cons 'begin gQ380e@e*))) gQ380b@ls/false) (let ((gQ3811@t gQ3809@t)) (let ((gQ3813@ls/false (gQ30ba@syntax-dispatch gQ3811@t '_))) (if gQ3813@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid last clause" gQ37e3@stx)) gQ3813@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3811@t)))))))))))))))) (let ((gQ3815@t gQ37ed@cls)) (let ((gQ3817@ls/false (gQ30ba@syntax-dispatch gQ3815@t '(#(scheme-id else) any . each-any)))) (if gQ3817@ls/false (apply (lambda (gQ3819@e gQ381a@e*) (gQ319a@syntax-violation '#f '"incorrect position of keyword else" gQ37e3@stx)) gQ3817@ls/false) (let ((gQ381d@t gQ3815@t)) (let ((gQ381f@ls/false (gQ30ba@syntax-dispatch gQ381d@t '(any #(scheme-id =>) any)))) (if gQ381f@ls/false (apply (lambda (gQ3821@e gQ3822@p) (list 'let (list (list 't gQ3821@e)) (list 'if 't (cons gQ3822@p '(t)) (gQ37f1@f (car gQ37ee@cls*) (cdr gQ37ee@cls*))))) gQ381f@ls/false) (let ((gQ3825@t gQ381d@t)) (let ((gQ3827@ls/false (gQ30ba@syntax-dispatch gQ3825@t '(any)))) (if gQ3827@ls/false (apply (lambda (gQ3829@e) (list 'or gQ3829@e (gQ37f1@f (car gQ37ee@cls*) (cdr gQ37ee@cls*)))) gQ3827@ls/false) (let ((gQ382b@t gQ3825@t)) (let ((gQ382d@ls/false (gQ30ba@syntax-dispatch gQ382b@t '(any . each-any)))) (if gQ382d@ls/false (apply (lambda (gQ382f@e gQ3830@e*) (list 'if gQ382f@e (cons 'begin gQ3830@e*) (gQ37f1@f (car gQ37ee@cls*) (cdr gQ37ee@cls*)))) gQ382d@ls/false) (let ((gQ3833@t gQ382b@t)) (let ((gQ3835@ls/false (gQ30ba@syntax-dispatch gQ3833@t '_))) (if gQ3835@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid last clause" gQ37e3@stx)) gQ3835@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3833@t)))))))))))))))))))) gQ37e7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ37e5@t)))))) (set! gQ4b82@gQ309e@cond-macro gQ309e@cond-macro) (set! gQ30a0@do-include (lambda (gQ3837@stx gQ3838@id gQ3839@filename) (let ((gQ383d@filename (gQ2ec7@stx->datum gQ3839@filename))) (begin (if (not (and (string? gQ383d@filename) (gQ2eb3@id? gQ3838@id))) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3837@stx) (void)) (cons (gQ3070@bless 'begin) (with-input-from-file gQ383d@filename (lambda () (let gQ3841@f ((gQ383f@ls '())) (let ((gQ3843@x (gQ29f5@gQ28c5@read-annotated))) (if (eof-object? gQ3843@x) (reverse gQ383f@ls) (gQ3841@f (cons (gQ2e93@datum->stx gQ3838@id gQ3843@x) gQ383f@ls)))))))))))) (set! gQ4b83@gQ30a0@do-include gQ30a0@do-include) (set! gQ30a2@include-macro (lambda (gQ3845@e) (let ((gQ3847@t gQ3845@e)) (let ((gQ3849@ls/false (gQ30ba@syntax-dispatch gQ3847@t '(any any)))) (if gQ3849@ls/false (apply (lambda (gQ384b@id gQ384c@filename) (gQ30a0@do-include gQ3845@e gQ384b@id gQ384c@filename)) gQ3849@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3847@t)))))) (set! gQ4b84@gQ30a2@include-macro gQ30a2@include-macro) (set! gQ30a4@include-into-macro (lambda (gQ384f@e) (let ((gQ3851@t gQ384f@e)) (let ((gQ3853@ls/false (gQ30ba@syntax-dispatch gQ3851@t '(_ any any)))) (if gQ3853@ls/false (apply (lambda (gQ3855@id gQ3856@filename) (gQ30a0@do-include gQ384f@e gQ3855@id gQ3856@filename)) gQ3853@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3851@t)))))) (set! gQ4b85@gQ30a4@include-into-macro gQ30a4@include-into-macro) (set! gQ30a6@syntax-rules-macro (lambda (gQ3859@e) (let ((gQ385b@t gQ3859@e)) (let ((gQ385d@ls/false (gQ30ba@syntax-dispatch gQ385b@t '(_ each-any . #(each (any any)))))) (if gQ385d@ls/false (apply (lambda (gQ385f@lits gQ3860@pat* gQ3861@tmp*) (begin (gQ30c0@verify-literals gQ385f@lits gQ3859@e) (gQ3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons gQ385f@lits (map (lambda (gQ3865@pat gQ3866@tmp) (let ((gQ3869@t gQ3865@pat)) (let ((gQ386b@ls/false (gQ30ba@syntax-dispatch gQ3869@t '(_ . any)))) (if gQ386b@ls/false (apply (lambda (gQ386d@rest) (list (cons 'g gQ386d@rest) (list 'syntax gQ3866@tmp))) gQ386b@ls/false) (let ((gQ386f@t gQ3869@t)) (let ((gQ3871@ls/false (gQ30ba@syntax-dispatch gQ386f@t '_))) (if gQ3871@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid syntax-rules pattern" gQ3859@e gQ3865@pat)) gQ3871@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ386f@t)))))))) gQ3860@pat* gQ3861@tmp*)))))))) gQ385d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ385b@t)))))) (set! gQ4b86@gQ30a6@syntax-rules-macro gQ30a6@syntax-rules-macro) (set! gQ30a8@quasiquote-macro (letrec* ((gQ3874@datum (lambda (gQ3975@x) (list (gQ3042@scheme-stx 'quote) (gQ2e9b@mkstx gQ3975@x '() '() '())))) (gQ3890@quasicons* (lambda (gQ396d@x gQ396e@y) (let gQ3973@f ((gQ3971@x gQ396d@x)) (if (null? gQ3971@x) gQ396e@y (gQ3892@quasicons (car gQ3971@x) (gQ3973@f (cdr gQ3971@x))))))) (gQ3892@quasicons (lambda (gQ3947@x gQ3948@y) (let ((gQ394b@t gQ3948@y)) (let ((gQ394d@ls/false (gQ30ba@syntax-dispatch gQ394b@t '(#(scheme-id quote) any)))) (if gQ394d@ls/false (apply (lambda (gQ394f@dy) (let ((gQ3951@t gQ3947@x)) (let ((gQ3953@ls/false (gQ30ba@syntax-dispatch gQ3951@t '(#(scheme-id quote) any)))) (if gQ3953@ls/false (apply (lambda (gQ3955@dx) (list (gQ3042@scheme-stx 'quote) (cons gQ3955@dx gQ394f@dy))) gQ3953@ls/false) (let ((gQ3957@t gQ3951@t)) (let ((gQ3959@ls/false (gQ30ba@syntax-dispatch gQ3957@t '_))) (if gQ3959@ls/false (apply (lambda () (let ((gQ395b@t gQ394f@dy)) (let ((gQ395d@ls/false (gQ30ba@syntax-dispatch gQ395b@t '()))) (if gQ395d@ls/false (apply (lambda () (list (gQ3042@scheme-stx 'list) gQ3947@x)) gQ395d@ls/false) (let ((gQ395f@t gQ395b@t)) (let ((gQ3961@ls/false (gQ30ba@syntax-dispatch gQ395f@t '_))) (if gQ3961@ls/false (apply (lambda () (list (gQ3042@scheme-stx 'cons) gQ3947@x gQ3948@y)) gQ3961@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ395f@t)))))))) gQ3959@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3957@t)))))))) gQ394d@ls/false) (let ((gQ3963@t gQ394b@t)) (let ((gQ3965@ls/false (gQ30ba@syntax-dispatch gQ3963@t '(#(scheme-id list) . each-any)))) (if gQ3965@ls/false (apply (lambda (gQ3967@stuff) (cons* (gQ3042@scheme-stx 'list) gQ3947@x gQ3967@stuff)) gQ3965@ls/false) (let ((gQ3969@t gQ3963@t)) (let ((gQ396b@ls/false (gQ30ba@syntax-dispatch gQ3969@t '_))) (if gQ396b@ls/false (apply (lambda () (list (gQ3042@scheme-stx 'cons) gQ3947@x gQ3948@y)) gQ396b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3969@t)))))))))))) (gQ3894@quasiappend (lambda (gQ392d@x gQ392e@y) (let ((gQ3931@ls (let gQ3935@f ((gQ3933@x gQ392d@x)) (if (null? gQ3933@x) (let ((gQ3937@t gQ392e@y)) (let ((gQ3939@ls/false (gQ30ba@syntax-dispatch gQ3937@t '(#(scheme-id quote) ())))) (if gQ3939@ls/false (apply (lambda () '()) gQ3939@ls/false) (let ((gQ393b@t gQ3937@t)) (let ((gQ393d@ls/false (gQ30ba@syntax-dispatch gQ393b@t '_))) (if gQ393d@ls/false (apply (lambda () (list gQ392e@y)) gQ393d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ393b@t))))))) (let ((gQ393f@t (car gQ3933@x))) (let ((gQ3941@ls/false (gQ30ba@syntax-dispatch gQ393f@t '(#(scheme-id quote) ())))) (if gQ3941@ls/false (apply (lambda () (gQ3935@f (cdr gQ3933@x))) gQ3941@ls/false) (let ((gQ3943@t gQ393f@t)) (let ((gQ3945@ls/false (gQ30ba@syntax-dispatch gQ3943@t '_))) (if gQ3945@ls/false (apply (lambda () (cons (car gQ3933@x) (gQ3935@f (cdr gQ3933@x)))) gQ3945@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3943@t))))))))))) (if (null? gQ3931@ls) (list (gQ3042@scheme-stx 'quote) '()) (if (null? (cdr gQ3931@ls)) (car gQ3931@ls) (cons* (gQ3042@scheme-stx 'append) gQ3931@ls)))))) (gQ3896@quasivector (lambda (gQ38fb@x) (let ((gQ38fd@pat-x gQ38fb@x)) (let ((gQ38ff@t gQ38fd@pat-x)) (let ((gQ3901@ls/false (gQ30ba@syntax-dispatch gQ38ff@t '(#(scheme-id quote) each-any)))) (if gQ3901@ls/false (apply (lambda (gQ3903@x*) (list (gQ3042@scheme-stx 'quote) (list->vector gQ3903@x*))) gQ3901@ls/false) (let ((gQ3905@t gQ38ff@t)) (let ((gQ3907@ls/false (gQ30ba@syntax-dispatch gQ3905@t '_))) (if gQ3907@ls/false (apply (lambda () (let gQ390f@f ((gQ3909@x gQ38fb@x) (gQ390a@k (lambda (gQ390d@ls) (cons* (gQ3042@scheme-stx 'vector) gQ390d@ls)))) (let ((gQ3911@t gQ3909@x)) (let ((gQ3913@ls/false (gQ30ba@syntax-dispatch gQ3911@t '(#(scheme-id quote) each-any)))) (if gQ3913@ls/false (apply (lambda (gQ3915@x*) (gQ390a@k (map (lambda (gQ3917@x) (list (gQ3042@scheme-stx 'quote) gQ3917@x)) gQ3915@x*))) gQ3913@ls/false) (let ((gQ3919@t gQ3911@t)) (let ((gQ391b@ls/false (gQ30ba@syntax-dispatch gQ3919@t '(#(scheme-id list) . each-any)))) (if gQ391b@ls/false (apply (lambda (gQ391d@x*) (gQ390a@k gQ391d@x*)) gQ391b@ls/false) (let ((gQ391f@t gQ3919@t)) (let ((gQ3921@ls/false (gQ30ba@syntax-dispatch gQ391f@t '(#(scheme-id cons) any any)))) (if gQ3921@ls/false (apply (lambda (gQ3923@x gQ3924@y) (gQ390f@f gQ3924@y (lambda (gQ3927@ls) (gQ390a@k (cons gQ3923@x gQ3927@ls))))) gQ3921@ls/false) (let ((gQ3929@t gQ391f@t)) (let ((gQ392b@ls/false (gQ30ba@syntax-dispatch gQ3929@t '_))) (if gQ392b@ls/false (apply (lambda () (list (gQ3042@scheme-stx 'list->vector) gQ38fd@pat-x)) gQ392b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3929@t))))))))))))))) gQ3907@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3905@t)))))))))) (gQ3898@vquasi (lambda (gQ38d9@p gQ38da@lev) (let ((gQ38dd@t gQ38d9@p)) (let ((gQ38df@ls/false (gQ30ba@syntax-dispatch gQ38dd@t '(any . any)))) (if gQ38df@ls/false (apply (lambda (gQ38e1@p gQ38e2@q) (let ((gQ38e5@t gQ38e1@p)) (let ((gQ38e7@ls/false (gQ30ba@syntax-dispatch gQ38e5@t '(#(scheme-id unquote) . each-any)))) (if gQ38e7@ls/false (apply (lambda (gQ38e9@p) (if (= gQ38da@lev '0) (gQ3890@quasicons* gQ38e9@p (gQ3898@vquasi gQ38e2@q gQ38da@lev)) (gQ3892@quasicons (gQ3892@quasicons (gQ3874@datum 'unquote) (gQ389a@quasi gQ38e9@p (- gQ38da@lev '1))) (gQ3898@vquasi gQ38e2@q gQ38da@lev)))) gQ38e7@ls/false) (let ((gQ38eb@t gQ38e5@t)) (let ((gQ38ed@ls/false (gQ30ba@syntax-dispatch gQ38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if gQ38ed@ls/false (apply (lambda (gQ38ef@p) (if (= gQ38da@lev '0) (gQ3894@quasiappend gQ38ef@p (gQ3898@vquasi gQ38e2@q gQ38da@lev)) (gQ3892@quasicons (gQ3892@quasicons (gQ3874@datum 'unquote-splicing) (gQ389a@quasi gQ38ef@p (- gQ38da@lev '1))) (gQ3898@vquasi gQ38e2@q gQ38da@lev)))) gQ38ed@ls/false) (let ((gQ38f1@t gQ38eb@t)) (let ((gQ38f3@ls/false (gQ30ba@syntax-dispatch gQ38f1@t 'any))) (if gQ38f3@ls/false (apply (lambda (gQ38f5@p) (gQ3892@quasicons (gQ389a@quasi gQ38f5@p gQ38da@lev) (gQ3898@vquasi gQ38e2@q gQ38da@lev))) gQ38f3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ38f1@t))))))))))) gQ38df@ls/false) (let ((gQ38f7@t gQ38dd@t)) (let ((gQ38f9@ls/false (gQ30ba@syntax-dispatch gQ38f7@t '()))) (if gQ38f9@ls/false (apply (lambda () (list (gQ3042@scheme-stx 'quote) '())) gQ38f9@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ38f7@t))))))))) (gQ389a@quasi (lambda (gQ38a3@p gQ38a4@lev) (let ((gQ38a7@t gQ38a3@p)) (let ((gQ38a9@ls/false (gQ30ba@syntax-dispatch gQ38a7@t '(#(scheme-id unquote) any)))) (if gQ38a9@ls/false (apply (lambda (gQ38ab@p) (if (= gQ38a4@lev '0) gQ38ab@p (gQ3892@quasicons (gQ3874@datum 'unquote) (gQ389a@quasi (list gQ38ab@p) (- gQ38a4@lev '1))))) gQ38a9@ls/false) (let ((gQ38ad@t gQ38a7@t)) (let ((gQ38af@ls/false (gQ30ba@syntax-dispatch gQ38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if gQ38af@ls/false (apply (lambda (gQ38b1@p gQ38b2@q) (if (= gQ38a4@lev '0) (gQ3890@quasicons* gQ38b1@p (gQ389a@quasi gQ38b2@q gQ38a4@lev)) (gQ3892@quasicons (gQ3892@quasicons (gQ3874@datum 'unquote) (gQ389a@quasi gQ38b1@p (- gQ38a4@lev '1))) (gQ389a@quasi gQ38b2@q gQ38a4@lev)))) gQ38af@ls/false) (let ((gQ38b5@t gQ38ad@t)) (let ((gQ38b7@ls/false (gQ30ba@syntax-dispatch gQ38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if gQ38b7@ls/false (apply (lambda (gQ38b9@p gQ38ba@q) (if (= gQ38a4@lev '0) (gQ3894@quasiappend gQ38b9@p (gQ389a@quasi gQ38ba@q gQ38a4@lev)) (gQ3892@quasicons (gQ3892@quasicons (gQ3874@datum 'unquote-splicing) (gQ389a@quasi gQ38b9@p (- gQ38a4@lev '1))) (gQ389a@quasi gQ38ba@q gQ38a4@lev)))) gQ38b7@ls/false) (let ((gQ38bd@t gQ38b5@t)) (let ((gQ38bf@ls/false (gQ30ba@syntax-dispatch gQ38bd@t '(#(scheme-id quasiquote) any)))) (if gQ38bf@ls/false (apply (lambda (gQ38c1@p) (gQ3892@quasicons (gQ3874@datum 'quasiquote) (gQ389a@quasi (list gQ38c1@p) (+ gQ38a4@lev '1)))) gQ38bf@ls/false) (let ((gQ38c3@t gQ38bd@t)) (let ((gQ38c5@ls/false (gQ30ba@syntax-dispatch gQ38c3@t '(any . any)))) (if gQ38c5@ls/false (apply (lambda (gQ38c7@p gQ38c8@q) (gQ3892@quasicons (gQ389a@quasi gQ38c7@p gQ38a4@lev) (gQ389a@quasi gQ38c8@q gQ38a4@lev))) gQ38c5@ls/false) (let ((gQ38cb@t gQ38c3@t)) (let ((gQ38cd@ls/false (gQ30ba@syntax-dispatch gQ38cb@t '#(vector each-any)))) (if (and gQ38cd@ls/false (apply (lambda (gQ38cf@x) (not (gQ2e7f@stx? gQ38cf@x))) gQ38cd@ls/false)) (apply (lambda (gQ38d1@x) (gQ3896@quasivector (gQ3898@vquasi gQ38d1@x gQ38a4@lev))) gQ38cd@ls/false) (let ((gQ38d3@t gQ38cb@t)) (let ((gQ38d5@ls/false (gQ30ba@syntax-dispatch gQ38d3@t 'any))) (if gQ38d5@ls/false (apply (lambda (gQ38d7@p) (list (gQ3042@scheme-stx 'quote) gQ38d7@p)) gQ38d5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ38d3@t))))))))))))))))))))))))) (lambda (gQ389b@x) (let ((gQ389d@t gQ389b@x)) (let ((gQ389f@ls/false (gQ30ba@syntax-dispatch gQ389d@t '(_ any)))) (if gQ389f@ls/false (apply (lambda (gQ38a1@e) (gQ389a@quasi gQ38a1@e '0)) gQ389f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ389d@t))))))) (set! gQ4b87@gQ30a8@quasiquote-macro gQ30a8@quasiquote-macro) (set! gQ30aa@quasisyntax-macro (letrec* ((gQ3978@quasi (lambda (gQ3993@p gQ3994@lev) (let ((gQ3997@t gQ3993@p)) (let ((gQ3999@ls/false (gQ30ba@syntax-dispatch gQ3997@t '(#(scheme-id unsyntax) any)))) (if gQ3999@ls/false (apply (lambda (gQ399b@p) (if (= gQ3994@lev '0) (let ((gQ399d@g (gensym))) (values (list gQ399d@g) (list gQ399b@p) gQ399d@g)) (call-with-values (lambda () (gQ3978@quasi gQ399b@p (- gQ3994@lev '1))) (lambda (gQ39a5@gQ39a0 gQ39a6@gQ39a2 gQ39a7@gQ39a4) (let ((gQ39ab@p gQ39a7@gQ39a4) (gQ39ac@rhs* gQ39a6@gQ39a2) (gQ39ad@lhs* gQ39a5@gQ39a0)) (values gQ39ad@lhs* gQ39ac@rhs* (list 'unsyntax gQ39ab@p))))))) gQ3999@ls/false) (let ((gQ39b1@t gQ3997@t)) (let ((gQ39b3@ls/false (gQ30ba@syntax-dispatch gQ39b1@t '#(scheme-id unsyntax)))) (if (and gQ39b3@ls/false (apply (lambda () (= gQ3994@lev '0)) gQ39b3@ls/false)) (apply (lambda () (gQ319a@syntax-violation '#f '"incorrect use of unsyntax" gQ3993@p)) gQ39b3@ls/false) (let ((gQ39b5@t gQ39b1@t)) (let ((gQ39b7@ls/false (gQ30ba@syntax-dispatch gQ39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if gQ39b7@ls/false (apply (lambda (gQ39b9@p* gQ39ba@q) (call-with-values (lambda () (gQ3978@quasi gQ39ba@q gQ3994@lev)) (lambda (gQ39c3@gQ39be gQ39c4@gQ39c0 gQ39c5@gQ39c2) (let ((gQ39c9@q gQ39c5@gQ39c2) (gQ39ca@rhs* gQ39c4@gQ39c0) (gQ39cb@lhs* gQ39c3@gQ39be)) (if (= gQ3994@lev '0) (let ((gQ39cf@g* (map (lambda (gQ39d1@x) (gensym)) gQ39b9@p*))) (values (append gQ39cf@g* gQ39cb@lhs*) (append gQ39b9@p* gQ39ca@rhs*) (append gQ39cf@g* gQ39c9@q))) (call-with-values (lambda () (gQ3978@quasi gQ39b9@p* (- gQ3994@lev '1))) (lambda (gQ39d9@gQ39d4 gQ39da@gQ39d6 gQ39db@gQ39d8) (let ((gQ39df@p* gQ39db@gQ39d8) (gQ39e0@rhs2* gQ39da@gQ39d6) (gQ39e1@lhs2* gQ39d9@gQ39d4)) (values (append gQ39e1@lhs2* gQ39cb@lhs*) (append gQ39e0@rhs2* gQ39ca@rhs*) (cons (cons 'unsyntax gQ39df@p*) gQ39c9@q)))))))))) gQ39b7@ls/false) (let ((gQ39e5@t gQ39b5@t)) (let ((gQ39e7@ls/false (gQ30ba@syntax-dispatch gQ39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if gQ39e7@ls/false (apply (lambda (gQ39e9@p* gQ39ea@q) (call-with-values (lambda () (gQ3978@quasi gQ39ea@q gQ3994@lev)) (lambda (gQ39f3@gQ39ee gQ39f4@gQ39f0 gQ39f5@gQ39f2) (let ((gQ39f9@q gQ39f5@gQ39f2) (gQ39fa@rhs* gQ39f4@gQ39f0) (gQ39fb@lhs* gQ39f3@gQ39ee)) (if (= gQ3994@lev '0) (let ((gQ39ff@g* (map (lambda (gQ3a01@x) (gensym)) gQ39e9@p*))) (values (append (map (lambda (gQ3a03@g) (cons gQ3a03@g '(...))) gQ39ff@g*) gQ39fb@lhs*) (append gQ39e9@p* gQ39fa@rhs*) (append (apply append (map (lambda (gQ3a05@g) (cons gQ3a05@g '(...))) gQ39ff@g*)) gQ39f9@q))) (call-with-values (lambda () (gQ3978@quasi gQ39e9@p* (- gQ3994@lev '1))) (lambda (gQ3a0d@gQ3a08 gQ3a0e@gQ3a0a gQ3a0f@gQ3a0c) (let ((gQ3a13@p* gQ3a0f@gQ3a0c) (gQ3a14@rhs2* gQ3a0e@gQ3a0a) (gQ3a15@lhs2* gQ3a0d@gQ3a08)) (values (append gQ3a15@lhs2* gQ39fb@lhs*) (append gQ3a14@rhs2* gQ39fa@rhs*) (cons (cons 'unsyntax-splicing gQ3a13@p*) gQ39f9@q)))))))))) gQ39e7@ls/false) (let ((gQ3a19@t gQ39e5@t)) (let ((gQ3a1b@ls/false (gQ30ba@syntax-dispatch gQ3a19@t '#(scheme-id unsyntax-splicing)))) (if (and gQ3a1b@ls/false (apply (lambda () (= gQ3994@lev '0)) gQ3a1b@ls/false)) (apply (lambda () (gQ319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" gQ3993@p)) gQ3a1b@ls/false) (let ((gQ3a1d@t gQ3a19@t)) (let ((gQ3a1f@ls/false (gQ30ba@syntax-dispatch gQ3a1d@t '(#(scheme-id quasisyntax) any)))) (if gQ3a1f@ls/false (apply (lambda (gQ3a21@p) (call-with-values (lambda () (gQ3978@quasi gQ3a21@p (+ gQ3994@lev '1))) (lambda (gQ3a29@gQ3a24 gQ3a2a@gQ3a26 gQ3a2b@gQ3a28) (let ((gQ3a2f@p gQ3a2b@gQ3a28) (gQ3a30@rhs* gQ3a2a@gQ3a26) (gQ3a31@lhs* gQ3a29@gQ3a24)) (values gQ3a31@lhs* gQ3a30@rhs* (list 'quasisyntax gQ3a2f@p)))))) gQ3a1f@ls/false) (let ((gQ3a35@t gQ3a1d@t)) (let ((gQ3a37@ls/false (gQ30ba@syntax-dispatch gQ3a35@t '(any . any)))) (if gQ3a37@ls/false (apply (lambda (gQ3a39@p gQ3a3a@q) (call-with-values (lambda () (gQ3978@quasi gQ3a39@p gQ3994@lev)) (lambda (gQ3a49@gQ3a3e gQ3a4a@gQ3a40 gQ3a4b@gQ3a42) (call-with-values (lambda () (gQ3978@quasi gQ3a3a@q gQ3994@lev)) (lambda (gQ3a4f@gQ3a44 gQ3a50@gQ3a46 gQ3a51@gQ3a48) (let ((gQ3a55@q gQ3a51@gQ3a48) (gQ3a56@rhs2* gQ3a50@gQ3a46) (gQ3a57@lhs2* gQ3a4f@gQ3a44) (gQ3a58@p gQ3a4b@gQ3a42) (gQ3a59@rhs* gQ3a4a@gQ3a40) (gQ3a5a@lhs* gQ3a49@gQ3a3e)) (values (append gQ3a57@lhs2* gQ3a5a@lhs*) (append gQ3a56@rhs2* gQ3a59@rhs*) (cons gQ3a58@p gQ3a55@q)))))))) gQ3a37@ls/false) (let ((gQ3a61@t gQ3a35@t)) (let ((gQ3a63@ls/false (gQ30ba@syntax-dispatch gQ3a61@t '#(vector each-any)))) (if gQ3a63@ls/false (apply (lambda (gQ3a65@x*) (call-with-values (lambda () (gQ3978@quasi gQ3a65@x* gQ3994@lev)) (lambda (gQ3a6d@gQ3a68 gQ3a6e@gQ3a6a gQ3a6f@gQ3a6c) (let ((gQ3a73@x* gQ3a6f@gQ3a6c) (gQ3a74@rhs* gQ3a6e@gQ3a6a) (gQ3a75@lhs* gQ3a6d@gQ3a68)) (values gQ3a75@lhs* gQ3a74@rhs* (list->vector gQ3a73@x*)))))) gQ3a63@ls/false) (let ((gQ3a79@t gQ3a61@t)) (let ((gQ3a7b@ls/false (gQ30ba@syntax-dispatch gQ3a79@t '_))) (if gQ3a7b@ls/false (apply (lambda () (values '() '() gQ3993@p)) gQ3a7b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3a79@t))))))))))))))))))))))))))))))) (lambda (gQ3979@x) (let ((gQ397b@t gQ3979@x)) (let ((gQ397d@ls/false (gQ30ba@syntax-dispatch gQ397b@t '(_ any)))) (if gQ397d@ls/false (apply (lambda (gQ397f@e) (call-with-values (lambda () (gQ3978@quasi gQ397f@e '0)) (lambda (gQ3987@gQ3982 gQ3988@gQ3984 gQ3989@gQ3986) (let ((gQ398d@v gQ3989@gQ3986) (gQ398e@rhs* gQ3988@gQ3984) (gQ398f@lhs* gQ3987@gQ3982)) (gQ3070@bless (list 'syntax-case (cons 'list gQ398e@rhs*) '() (list gQ398f@lhs* (list 'syntax gQ398d@v)))))))) gQ397d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ397b@t))))))) (set! gQ4b88@gQ30aa@quasisyntax-macro gQ30aa@quasisyntax-macro) (set! gQ30ac@define-struct-macro (lambda (gQ3a7d@stx) (gQ319a@syntax-violation '#f '"define-struct not supported" gQ3a7d@stx))) (set! gQ4b89@gQ30ac@define-struct-macro gQ30ac@define-struct-macro) (set! gQ30ae@define-record-type-macro (lambda (gQ3a7f@x) (letrec* ((gQ3a82@id (lambda (gQ3c75@ctxt . gQ3c77@str*) (gQ319e@datum->syntax gQ3c75@ctxt (string->symbol (apply string-append (map (lambda (gQ3c79@x) (if (symbol? gQ3c79@x) (symbol->string gQ3c79@x) (if (string? gQ3c79@x) gQ3c79@x (assertion-violation 'define-record-type '"BUG")))) gQ3c77@str*)))))) (gQ3a84@get-record-name (lambda (gQ3c63@spec) (let ((gQ3c65@t gQ3c63@spec)) (let ((gQ3c67@ls/false (gQ30ba@syntax-dispatch gQ3c65@t '(any any any)))) (if gQ3c67@ls/false (apply (lambda (gQ3c69@foo gQ3c6a@make-foo gQ3c6b@foo?) gQ3c69@foo) gQ3c67@ls/false) (let ((gQ3c6f@t gQ3c65@t)) (let ((gQ3c71@ls/false (gQ30ba@syntax-dispatch gQ3c6f@t 'any))) (if gQ3c71@ls/false (apply (lambda (gQ3c73@foo) gQ3c73@foo) gQ3c71@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c6f@t))))))))) (gQ3a86@get-record-constructor-name (lambda (gQ3c4f@spec) (let ((gQ3c51@t gQ3c4f@spec)) (let ((gQ3c53@ls/false (gQ30ba@syntax-dispatch gQ3c51@t '(any any any)))) (if gQ3c53@ls/false (apply (lambda (gQ3c55@foo gQ3c56@make-foo gQ3c57@foo?) gQ3c56@make-foo) gQ3c53@ls/false) (let ((gQ3c5b@t gQ3c51@t)) (let ((gQ3c5d@ls/false (gQ30ba@syntax-dispatch gQ3c5b@t 'any))) (if (and gQ3c5d@ls/false (apply (lambda (gQ3c5f@foo) (gQ2eb3@id? gQ3c5f@foo)) gQ3c5d@ls/false)) (apply (lambda (gQ3c61@foo) (gQ3a82@id gQ3c61@foo '"make-" (gQ2ec7@stx->datum gQ3c61@foo))) gQ3c5d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c5b@t))))))))) (gQ3a88@get-record-predicate-name (lambda (gQ3c3b@spec) (let ((gQ3c3d@t gQ3c3b@spec)) (let ((gQ3c3f@ls/false (gQ30ba@syntax-dispatch gQ3c3d@t '(any any any)))) (if gQ3c3f@ls/false (apply (lambda (gQ3c41@foo gQ3c42@make-foo gQ3c43@foo?) gQ3c43@foo?) gQ3c3f@ls/false) (let ((gQ3c47@t gQ3c3d@t)) (let ((gQ3c49@ls/false (gQ30ba@syntax-dispatch gQ3c47@t 'any))) (if (and gQ3c49@ls/false (apply (lambda (gQ3c4b@foo) (gQ2eb3@id? gQ3c4b@foo)) gQ3c49@ls/false)) (apply (lambda (gQ3c4d@foo) (gQ3a82@id gQ3c4d@foo (gQ2ec7@stx->datum gQ3c4d@foo) '"?")) gQ3c49@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c47@t))))))))) (gQ3a8a@get-clause (lambda (gQ3c29@id gQ3c2a@ls) (let ((gQ3c2d@t gQ3c2a@ls)) (let ((gQ3c2f@ls/false (gQ30ba@syntax-dispatch gQ3c2d@t '()))) (if gQ3c2f@ls/false (apply (lambda () '#f) gQ3c2f@ls/false) (let ((gQ3c31@t gQ3c2d@t)) (let ((gQ3c33@ls/false (gQ30ba@syntax-dispatch gQ3c31@t '((any . any) . any)))) (if gQ3c33@ls/false (apply (lambda (gQ3c35@x gQ3c36@rest gQ3c37@ls) (if (gQ2eb9@free-id=? (gQ3070@bless gQ3c29@id) gQ3c35@x) (cons gQ3c35@x gQ3c36@rest) (gQ3a8a@get-clause gQ3c29@id gQ3c37@ls))) gQ3c33@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c31@t))))))))) (gQ3a8c@foo-rtd-code (lambda (gQ3bd7@name gQ3bd8@clause* gQ3bd9@parent-rtd-code) (letrec* ((gQ3bde@convert-field-spec* (lambda (gQ3c0f@ls) (list->vector (map (lambda (gQ3c11@x) (let ((gQ3c13@t gQ3c11@x)) (let ((gQ3c15@ls/false (gQ30ba@syntax-dispatch gQ3c13@t '(#(scheme-id mutable) any . any)))) (if gQ3c15@ls/false (apply (lambda (gQ3c17@name gQ3c18@rest) (list 'mutable gQ3c17@name)) gQ3c15@ls/false) (let ((gQ3c1b@t gQ3c13@t)) (let ((gQ3c1d@ls/false (gQ30ba@syntax-dispatch gQ3c1b@t '(#(scheme-id immutable) any . any)))) (if gQ3c1d@ls/false (apply (lambda (gQ3c1f@name gQ3c20@rest) (list 'immutable gQ3c1f@name)) gQ3c1d@ls/false) (let ((gQ3c23@t gQ3c1b@t)) (let ((gQ3c25@ls/false (gQ30ba@syntax-dispatch gQ3c23@t 'any))) (if gQ3c25@ls/false (apply (lambda (gQ3c27@name) (list 'immutable gQ3c27@name)) gQ3c25@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c23@t))))))))))) gQ3c0f@ls))))) (let ((gQ3bdf@uid-code (let ((gQ3be7@t (gQ3a8a@get-clause 'nongenerative gQ3bd8@clause*))) (let ((gQ3be9@ls/false (gQ30ba@syntax-dispatch gQ3be7@t '(_)))) (if gQ3be9@ls/false (apply (lambda () (list 'quote (gensym))) gQ3be9@ls/false) (let ((gQ3beb@t gQ3be7@t)) (let ((gQ3bed@ls/false (gQ30ba@syntax-dispatch gQ3beb@t '(_ any)))) (if gQ3bed@ls/false (apply (lambda (gQ3bef@uid) (list 'quote gQ3bef@uid)) gQ3bed@ls/false) (let ((gQ3bf1@t gQ3beb@t)) (let ((gQ3bf3@ls/false (gQ30ba@syntax-dispatch gQ3bf1@t '_))) (if gQ3bf3@ls/false (apply (lambda () '#f) gQ3bf3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3bf1@t))))))))))) (gQ3be0@sealed? (let ((gQ3bf5@t (gQ3a8a@get-clause 'sealed gQ3bd8@clause*))) (let ((gQ3bf7@ls/false (gQ30ba@syntax-dispatch gQ3bf5@t '(_ #(atom #t))))) (if gQ3bf7@ls/false (apply (lambda () '#t) gQ3bf7@ls/false) (let ((gQ3bf9@t gQ3bf5@t)) (let ((gQ3bfb@ls/false (gQ30ba@syntax-dispatch gQ3bf9@t '_))) (if gQ3bfb@ls/false (apply (lambda () '#f) gQ3bfb@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3bf9@t)))))))) (gQ3be1@opaque? (let ((gQ3bfd@t (gQ3a8a@get-clause 'opaque gQ3bd8@clause*))) (let ((gQ3bff@ls/false (gQ30ba@syntax-dispatch gQ3bfd@t '(_ #(atom #t))))) (if gQ3bff@ls/false (apply (lambda () '#t) gQ3bff@ls/false) (let ((gQ3c01@t gQ3bfd@t)) (let ((gQ3c03@ls/false (gQ30ba@syntax-dispatch gQ3c01@t '_))) (if gQ3c03@ls/false (apply (lambda () '#f) gQ3c03@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c01@t)))))))) (gQ3be2@fields (let ((gQ3c05@t (gQ3a8a@get-clause 'fields gQ3bd8@clause*))) (let ((gQ3c07@ls/false (gQ30ba@syntax-dispatch gQ3c05@t '(_ . each-any)))) (if gQ3c07@ls/false (apply (lambda (gQ3c09@field-spec*) (list 'quote (gQ3bde@convert-field-spec* gQ3c09@field-spec*))) gQ3c07@ls/false) (let ((gQ3c0b@t gQ3c05@t)) (let ((gQ3c0d@ls/false (gQ30ba@syntax-dispatch gQ3c0b@t '_))) (if gQ3c0d@ls/false (apply (lambda () ''#()) gQ3c0d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c0b@t))))))))) (gQ3070@bless (list 'make-record-type-descriptor (list 'quote gQ3bd7@name) gQ3bd9@parent-rtd-code gQ3bdf@uid-code gQ3be0@sealed? gQ3be1@opaque? gQ3be2@fields)))))) (gQ3a8e@parent-rtd-code (lambda (gQ3bbf@clause*) (let ((gQ3bc1@t (gQ3a8a@get-clause 'parent gQ3bbf@clause*))) (let ((gQ3bc3@ls/false (gQ30ba@syntax-dispatch gQ3bc1@t '(_ any)))) (if gQ3bc3@ls/false (apply (lambda (gQ3bc5@name) (list 'record-type-descriptor gQ3bc5@name)) gQ3bc3@ls/false) (let ((gQ3bc7@t gQ3bc1@t)) (let ((gQ3bc9@ls/false (gQ30ba@syntax-dispatch gQ3bc7@t '#(atom #f)))) (if gQ3bc9@ls/false (apply (lambda () (let ((gQ3bcb@t (gQ3a8a@get-clause 'parent-rtd gQ3bbf@clause*))) (let ((gQ3bcd@ls/false (gQ30ba@syntax-dispatch gQ3bcb@t '(_ any any)))) (if gQ3bcd@ls/false (apply (lambda (gQ3bcf@rtd gQ3bd0@rcd) gQ3bcf@rtd) gQ3bcd@ls/false) (let ((gQ3bd3@t gQ3bcb@t)) (let ((gQ3bd5@ls/false (gQ30ba@syntax-dispatch gQ3bd3@t '#(atom #f)))) (if gQ3bd5@ls/false (apply (lambda () '#f) gQ3bd5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3bd3@t)))))))) gQ3bc9@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3bc7@t))))))))) (gQ3a90@parent-rcd-code (lambda (gQ3ba7@clause*) (let ((gQ3ba9@t (gQ3a8a@get-clause 'parent gQ3ba7@clause*))) (let ((gQ3bab@ls/false (gQ30ba@syntax-dispatch gQ3ba9@t '(_ any)))) (if gQ3bab@ls/false (apply (lambda (gQ3bad@name) (list 'record-constructor-descriptor gQ3bad@name)) gQ3bab@ls/false) (let ((gQ3baf@t gQ3ba9@t)) (let ((gQ3bb1@ls/false (gQ30ba@syntax-dispatch gQ3baf@t '#(atom #f)))) (if gQ3bb1@ls/false (apply (lambda () (let ((gQ3bb3@t (gQ3a8a@get-clause 'parent-rtd gQ3ba7@clause*))) (let ((gQ3bb5@ls/false (gQ30ba@syntax-dispatch gQ3bb3@t '(_ any any)))) (if gQ3bb5@ls/false (apply (lambda (gQ3bb7@rtd gQ3bb8@rcd) gQ3bb8@rcd) gQ3bb5@ls/false) (let ((gQ3bbb@t gQ3bb3@t)) (let ((gQ3bbd@ls/false (gQ30ba@syntax-dispatch gQ3bbb@t '#(atom #f)))) (if gQ3bbd@ls/false (apply (lambda () '#f) gQ3bbd@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3bbb@t)))))))) gQ3bb1@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3baf@t))))))))) (gQ3a92@foo-rcd-code (lambda (gQ3b9f@clause* gQ3ba0@foo-rtd gQ3ba1@protocol gQ3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor gQ3ba0@foo-rtd gQ3ba2@parent-rcd-code gQ3ba1@protocol))) (gQ3a94@get-protocol-code (lambda (gQ3b93@clause*) (let ((gQ3b95@t (gQ3a8a@get-clause 'protocol gQ3b93@clause*))) (let ((gQ3b97@ls/false (gQ30ba@syntax-dispatch gQ3b95@t '(_ any)))) (if gQ3b97@ls/false (apply (lambda (gQ3b99@expr) gQ3b99@expr) gQ3b97@ls/false) (let ((gQ3b9b@t gQ3b95@t)) (let ((gQ3b9d@ls/false (gQ30ba@syntax-dispatch gQ3b9b@t '_))) (if gQ3b9d@ls/false (apply (lambda () '#f) gQ3b9d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3b9b@t))))))))) (gQ3a96@get-fields (lambda (gQ3b81@clause*) (let ((gQ3b83@t gQ3b81@clause*)) (let ((gQ3b85@ls/false (gQ30ba@syntax-dispatch gQ3b83@t '()))) (if gQ3b85@ls/false (apply (lambda () '()) gQ3b85@ls/false) (let ((gQ3b87@t gQ3b83@t)) (let ((gQ3b89@ls/false (gQ30ba@syntax-dispatch gQ3b87@t '((#(scheme-id fields) . each-any) . _)))) (if gQ3b89@ls/false (apply (lambda (gQ3b8b@f*) gQ3b8b@f*) gQ3b89@ls/false) (let ((gQ3b8d@t gQ3b87@t)) (let ((gQ3b8f@ls/false (gQ30ba@syntax-dispatch gQ3b8d@t '(_ . any)))) (if gQ3b8f@ls/false (apply (lambda (gQ3b91@rest) (gQ3a96@get-fields gQ3b91@rest)) gQ3b8f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3b8d@t)))))))))))) (gQ3a98@get-mutator-indices (lambda (gQ3b69@fields) (let gQ3b6f@f ((gQ3b6b@fields gQ3b69@fields) (gQ3b6c@i '0)) (let ((gQ3b71@t gQ3b6b@fields)) (let ((gQ3b73@ls/false (gQ30ba@syntax-dispatch gQ3b71@t '()))) (if gQ3b73@ls/false (apply (lambda () '()) gQ3b73@ls/false) (let ((gQ3b75@t gQ3b71@t)) (let ((gQ3b77@ls/false (gQ30ba@syntax-dispatch gQ3b75@t '((#(scheme-id mutable) . _) . any)))) (if gQ3b77@ls/false (apply (lambda (gQ3b79@rest) (cons gQ3b6c@i (gQ3b6f@f gQ3b79@rest (+ gQ3b6c@i '1)))) gQ3b77@ls/false) (let ((gQ3b7b@t gQ3b75@t)) (let ((gQ3b7d@ls/false (gQ30ba@syntax-dispatch gQ3b7b@t '(_ . any)))) (if gQ3b7d@ls/false (apply (lambda (gQ3b7f@rest) (gQ3b6f@f gQ3b7f@rest (+ gQ3b6c@i '1))) gQ3b7d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3b7b@t))))))))))))) (gQ3a9a@get-mutators (lambda (gQ3b3f@foo gQ3b40@fields) (letrec* ((gQ3b44@gen-name (lambda (gQ3b67@x) (gQ319e@datum->syntax gQ3b3f@foo (string->symbol (string-append (symbol->string (gQ31a0@syntax->datum gQ3b3f@foo)) '"-" (symbol->string (gQ31a0@syntax->datum gQ3b67@x)) '"-set!")))))) (let gQ3b47@f ((gQ3b45@fields gQ3b40@fields)) (let ((gQ3b49@t gQ3b45@fields)) (let ((gQ3b4b@ls/false (gQ30ba@syntax-dispatch gQ3b49@t '()))) (if gQ3b4b@ls/false (apply (lambda () '()) gQ3b4b@ls/false) (let ((gQ3b4d@t gQ3b49@t)) (let ((gQ3b4f@ls/false (gQ30ba@syntax-dispatch gQ3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if gQ3b4f@ls/false (apply (lambda (gQ3b51@name gQ3b52@accessor gQ3b53@mutator gQ3b54@rest) (cons gQ3b53@mutator (gQ3b47@f gQ3b54@rest))) gQ3b4f@ls/false) (let ((gQ3b59@t gQ3b4d@t)) (let ((gQ3b5b@ls/false (gQ30ba@syntax-dispatch gQ3b59@t '((#(scheme-id mutable) any) . any)))) (if gQ3b5b@ls/false (apply (lambda (gQ3b5d@name gQ3b5e@rest) (cons (gQ3b44@gen-name gQ3b5d@name) (gQ3b47@f gQ3b5e@rest))) gQ3b5b@ls/false) (let ((gQ3b61@t gQ3b59@t)) (let ((gQ3b63@ls/false (gQ30ba@syntax-dispatch gQ3b61@t '(_ . any)))) (if gQ3b63@ls/false (apply (lambda (gQ3b65@rest) (gQ3b47@f gQ3b65@rest)) gQ3b63@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3b61@t))))))))))))))))) (gQ3a9c@get-accessors (lambda (gQ3afb@foo gQ3afc@fields) (letrec* ((gQ3b00@gen-name (lambda (gQ3b3d@x) (gQ319e@datum->syntax gQ3afb@foo (string->symbol (string-append (symbol->string (gQ31a0@syntax->datum gQ3afb@foo)) '"-" (symbol->string (gQ31a0@syntax->datum gQ3b3d@x)))))))) (map (lambda (gQ3b01@field) (let ((gQ3b03@t gQ3b01@field)) (let ((gQ3b05@ls/false (gQ30ba@syntax-dispatch gQ3b03@t '(#(scheme-id mutable) any any any)))) (if (and gQ3b05@ls/false (apply (lambda (gQ3b07@name gQ3b08@accessor gQ3b09@mutator) (gQ2eb3@id? gQ3b08@accessor)) gQ3b05@ls/false)) (apply (lambda (gQ3b0d@name gQ3b0e@accessor gQ3b0f@mutator) gQ3b0e@accessor) gQ3b05@ls/false) (let ((gQ3b13@t gQ3b03@t)) (let ((gQ3b15@ls/false (gQ30ba@syntax-dispatch gQ3b13@t '(#(scheme-id immutable) any any)))) (if (and gQ3b15@ls/false (apply (lambda (gQ3b17@name gQ3b18@accessor) (gQ2eb3@id? gQ3b18@accessor)) gQ3b15@ls/false)) (apply (lambda (gQ3b1b@name gQ3b1c@accessor) gQ3b1c@accessor) gQ3b15@ls/false) (let ((gQ3b1f@t gQ3b13@t)) (let ((gQ3b21@ls/false (gQ30ba@syntax-dispatch gQ3b1f@t '(#(scheme-id mutable) any)))) (if (and gQ3b21@ls/false (apply (lambda (gQ3b23@name) (gQ2eb3@id? gQ3b23@name)) gQ3b21@ls/false)) (apply (lambda (gQ3b25@name) (gQ3b00@gen-name gQ3b25@name)) gQ3b21@ls/false) (let ((gQ3b27@t gQ3b1f@t)) (let ((gQ3b29@ls/false (gQ30ba@syntax-dispatch gQ3b27@t '(#(scheme-id immutable) any)))) (if (and gQ3b29@ls/false (apply (lambda (gQ3b2b@name) (gQ2eb3@id? gQ3b2b@name)) gQ3b29@ls/false)) (apply (lambda (gQ3b2d@name) (gQ3b00@gen-name gQ3b2d@name)) gQ3b29@ls/false) (let ((gQ3b2f@t gQ3b27@t)) (let ((gQ3b31@ls/false (gQ30ba@syntax-dispatch gQ3b2f@t 'any))) (if (and gQ3b31@ls/false (apply (lambda (gQ3b33@name) (gQ2eb3@id? gQ3b33@name)) gQ3b31@ls/false)) (apply (lambda (gQ3b35@name) (gQ3b00@gen-name gQ3b35@name)) gQ3b31@ls/false) (let ((gQ3b37@t gQ3b2f@t)) (let ((gQ3b39@ls/false (gQ30ba@syntax-dispatch gQ3b37@t 'any))) (if gQ3b39@ls/false (apply (lambda (gQ3b3b@others) (gQ319a@syntax-violation '#f '"invalid field spec" gQ3b01@field)) gQ3b39@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3b37@t)))))))))))))))))))) gQ3afc@fields)))) (gQ3a9e@enumerate (lambda (gQ3af3@ls) (let gQ3af9@f ((gQ3af5@ls gQ3af3@ls) (gQ3af6@i '0)) (if (null? gQ3af5@ls) '() (cons gQ3af6@i (gQ3af9@f (cdr gQ3af5@ls) (+ gQ3af6@i '1))))))) (gQ3aa0@do-define-record (lambda (gQ3acb@namespec gQ3acc@clause*) (let ((gQ3acf@foo (gQ3a84@get-record-name gQ3acb@namespec))) (let ((gQ3ad1@foo-rtd (gensym))) (let ((gQ3ad3@foo-rcd (gensym))) (let ((gQ3ad5@protocol (gensym))) (let ((gQ3ad7@make-foo (gQ3a86@get-record-constructor-name gQ3acb@namespec))) (let ((gQ3ad9@fields (gQ3a96@get-fields gQ3acc@clause*))) (let ((gQ3adb@idx* (gQ3a9e@enumerate gQ3ad9@fields))) (let ((gQ3add@foo-x* (gQ3a9c@get-accessors gQ3acf@foo gQ3ad9@fields))) (let ((gQ3adf@set-foo-x!* (gQ3a9a@get-mutators gQ3acf@foo gQ3ad9@fields))) (let ((gQ3ae1@set-foo-idx* (gQ3a98@get-mutator-indices gQ3ad9@fields))) (let ((gQ3ae3@foo? (gQ3a88@get-record-predicate-name gQ3acb@namespec))) (let ((gQ3ae5@foo-rtd-code (gQ3a8c@foo-rtd-code gQ3acf@foo gQ3acc@clause* (gQ3a8e@parent-rtd-code gQ3acc@clause*)))) (let ((gQ3ae7@foo-rcd-code (gQ3a92@foo-rcd-code gQ3acc@clause* gQ3ad1@foo-rtd gQ3ad5@protocol (gQ3a90@parent-rcd-code gQ3acc@clause*)))) (let ((gQ3ae9@protocol-code (gQ3a94@get-protocol-code gQ3acc@clause*))) (gQ3070@bless (cons 'begin (cons (list 'define gQ3ad1@foo-rtd gQ3ae5@foo-rtd-code) (cons (list 'define gQ3ad5@protocol gQ3ae9@protocol-code) (cons (list 'define gQ3ad3@foo-rcd gQ3ae7@foo-rcd-code) (cons (list 'define-syntax gQ3acf@foo (list 'list ''$rtd (list 'syntax gQ3ad1@foo-rtd) (list 'syntax gQ3ad3@foo-rcd))) (cons (list 'define gQ3ae3@foo? (list 'record-predicate gQ3ad1@foo-rtd)) (cons (list 'define gQ3ad7@make-foo (list 'record-constructor gQ3ad3@foo-rcd)) (append (map (lambda (gQ3aeb@foo-x gQ3aec@idx) (list 'define gQ3aeb@foo-x (list 'record-accessor gQ3ad1@foo-rtd gQ3aec@idx))) gQ3add@foo-x* gQ3adb@idx*) (map (lambda (gQ3aef@set-foo-x! gQ3af0@idx) (list 'define gQ3aef@set-foo-x! (list 'record-mutator gQ3ad1@foo-rtd gQ3af0@idx))) gQ3adf@set-foo-x!* gQ3ae1@set-foo-idx*)))))))))))))))))))))))))) (gQ3aa2@verify-clauses (lambda (gQ3aab@x gQ3aac@cls*) (letrec* ((gQ3ab0@valid-kwds (map gQ3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (gQ3ab2@free-id-member? (lambda (gQ3ac7@x gQ3ac8@ls) (and (pair? gQ3ac8@ls) (or (gQ2eb9@free-id=? gQ3ac7@x (car gQ3ac8@ls)) (gQ3ab2@free-id-member? gQ3ac7@x (cdr gQ3ac8@ls))))))) (let gQ3ab7@f ((gQ3ab3@cls* gQ3aac@cls*) (gQ3ab4@seen* '())) (if (not (null? gQ3ab3@cls*)) (let ((gQ3ab9@t (car gQ3ab3@cls*))) (let ((gQ3abb@ls/false (gQ30ba@syntax-dispatch gQ3ab9@t '(any . any)))) (if gQ3abb@ls/false (apply (lambda (gQ3abd@kwd gQ3abe@rest) (if (or (not (gQ2eb3@id? gQ3abd@kwd)) (not (gQ3ab2@free-id-member? gQ3abd@kwd gQ3ab0@valid-kwds))) (gQ319a@syntax-violation '#f '"not a valid define-record-type keyword" gQ3abd@kwd) (if (gQ2ebf@bound-id-member? gQ3abd@kwd gQ3ab4@seen*) (gQ319a@syntax-violation '#f '"duplicate use of keyword " gQ3aab@x gQ3abd@kwd) (gQ3ab7@f (cdr gQ3ab3@cls*) (cons gQ3abd@kwd gQ3ab4@seen*))))) gQ3abb@ls/false) (let ((gQ3ac1@t gQ3ab9@t)) (let ((gQ3ac3@ls/false (gQ30ba@syntax-dispatch gQ3ac1@t 'any))) (if gQ3ac3@ls/false (apply (lambda (gQ3ac5@cls) (gQ319a@syntax-violation '#f '"malformed define-record-type clause" gQ3ac5@cls)) gQ3ac3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3ac1@t))))))) (void))))))) (let ((gQ3aa3@t gQ3a7f@x)) (let ((gQ3aa5@ls/false (gQ30ba@syntax-dispatch gQ3aa3@t '(_ any . each-any)))) (if gQ3aa5@ls/false (apply (lambda (gQ3aa7@namespec gQ3aa8@clause*) (begin (gQ3aa2@verify-clauses gQ3a7f@x gQ3aa8@clause*) (gQ3aa0@do-define-record gQ3aa7@namespec gQ3aa8@clause*))) gQ3aa5@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3aa3@t))))))) (set! gQ4b8a@gQ30ae@define-record-type-macro gQ30ae@define-record-type-macro) (set! gQ30b0@define-condition-type-macro (lambda (gQ3c7b@x) (letrec* ((gQ3c7e@mkname (lambda (gQ3cab@name gQ3cac@suffix) (gQ319e@datum->syntax gQ3cab@name (string->symbol (string-append (symbol->string (gQ31a0@syntax->datum gQ3cab@name)) gQ3cac@suffix)))))) (let ((gQ3c7f@t gQ3c7b@x)) (let ((gQ3c81@ls/false (gQ30ba@syntax-dispatch gQ3c7f@t '(any any any any any . #(each (any any)))))) (if (and gQ3c81@ls/false (apply (lambda (gQ3c83@ctxt gQ3c84@name gQ3c85@super gQ3c86@constructor gQ3c87@predicate gQ3c88@field* gQ3c89@accessor*) (and (gQ2eb3@id? gQ3c84@name) (gQ2eb3@id? gQ3c85@super) (gQ2eb3@id? gQ3c86@constructor) (gQ2eb3@id? gQ3c87@predicate) (for-all gQ2eb3@id? gQ3c88@field*) (for-all gQ2eb3@id? gQ3c89@accessor*))) gQ3c81@ls/false)) (apply (lambda (gQ3c91@ctxt gQ3c92@name gQ3c93@super gQ3c94@constructor gQ3c95@predicate gQ3c96@field* gQ3c97@accessor*) (let ((gQ3c9f@aux-accessor* (map (lambda (gQ3ca1@x) (gensym)) gQ3c97@accessor*))) (gQ3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list gQ3c92@name gQ3c94@constructor (gensym)) (cons (list 'parent gQ3c93@super) (cons (cons 'fields (map (lambda (gQ3ca3@field gQ3ca4@aux) (list 'immutable gQ3ca3@field gQ3ca4@aux)) gQ3c96@field* gQ3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define gQ3c95@predicate (list 'condition-predicate (list 'record-type-descriptor gQ3c92@name))) (map (lambda (gQ3ca7@accessor gQ3ca8@aux) (list 'define gQ3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor gQ3c92@name) gQ3ca8@aux))) gQ3c97@accessor* gQ3c9f@aux-accessor*))))))) gQ3c81@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3c7f@t))))))) (set! gQ4b8b@gQ30b0@define-condition-type-macro gQ30b0@define-condition-type-macro) (set! gQ30b2@incorrect-usage-macro (lambda (gQ3caf@e) (gQ319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" gQ3caf@e))) (set! gQ4b8c@gQ30b2@incorrect-usage-macro gQ30b2@incorrect-usage-macro) (set! gQ30b4@parameterize-macro (lambda (gQ3cb1@e) (let ((gQ3cb3@t gQ3cb1@e)) (let ((gQ3cb5@ls/false (gQ30ba@syntax-dispatch gQ3cb3@t '(_ () any . each-any)))) (if gQ3cb5@ls/false (apply (lambda (gQ3cb7@b gQ3cb8@b*) (gQ3070@bless (cons 'let (cons '() (cons gQ3cb7@b gQ3cb8@b*))))) gQ3cb5@ls/false) (let ((gQ3cbb@t gQ3cb3@t)) (let ((gQ3cbd@ls/false (gQ30ba@syntax-dispatch gQ3cbb@t '(_ #(each (any any)) any . each-any)))) (if gQ3cbd@ls/false (apply (lambda (gQ3cbf@olhs* gQ3cc0@orhs* gQ3cc1@b gQ3cc2@b*) (let ((gQ3cc7@lhs* (gQ3188@generate-temporaries gQ3cbf@olhs*)) (gQ3cc8@rhs* (gQ3188@generate-temporaries gQ3cc0@orhs*))) (gQ3070@bless (cons (list 'lambda (append gQ3cc7@lhs* gQ3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (gQ3ccb@lhs gQ3ccc@rhs) (list 'let (list (list 't (list gQ3ccb@lhs))) (list gQ3ccb@lhs gQ3ccc@rhs) (cons 'set! (cons gQ3ccc@rhs '(t))))) gQ3cc7@lhs* gQ3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons gQ3cc1@b gQ3cc2@b*))) '(swap)))))) (append gQ3cbf@olhs* gQ3cc0@orhs*))))) gQ3cbd@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3cbb@t))))))))) (set! gQ4b8d@gQ30b4@parameterize-macro gQ30b4@parameterize-macro) (set! gQ30b6@foreign-call-transformer (lambda (gQ3ccf@e gQ3cd0@r gQ3cd1@mr) (let ((gQ3cd5@t gQ3ccf@e)) (let ((gQ3cd7@ls/false (gQ30ba@syntax-dispatch gQ3cd5@t '(_ any . each-any)))) (if gQ3cd7@ls/false (apply (lambda (gQ3cd9@name gQ3cda@arg*) (cons 'foreign-call (cons (gQ30dc@chi-expr gQ3cd9@name gQ3cd0@r gQ3cd1@mr) (gQ30d8@chi-expr* gQ3cda@arg* gQ3cd0@r gQ3cd1@mr)))) gQ3cd7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3cd5@t)))))) (set! gQ4b8e@gQ30b6@foreign-call-transformer gQ30b6@foreign-call-transformer) (set! gQ30b8@convert-pattern (lambda (gQ3cdd@pattern gQ3cde@keys) (letrec* ((gQ3ce2@cvt* (lambda (gQ3d81@p* gQ3d82@n gQ3d83@ids) (if (null? gQ3d81@p*) (values '() gQ3d83@ids) (call-with-values (lambda () (gQ3ce2@cvt* (cdr gQ3d81@p*) gQ3d82@n gQ3d83@ids)) (lambda (gQ3d8b@gQ3d88 gQ3d8c@gQ3d8a) (let ((gQ3d8f@ids gQ3d8c@gQ3d8a) (gQ3d90@y gQ3d8b@gQ3d88)) (call-with-values (lambda () (gQ3ce4@cvt (car gQ3d81@p*) gQ3d82@n gQ3d8f@ids)) (lambda (gQ3d97@gQ3d94 gQ3d98@gQ3d96) (let ((gQ3d9b@ids gQ3d98@gQ3d96) (gQ3d9c@x gQ3d97@gQ3d94)) (values (cons gQ3d9c@x gQ3d90@y) gQ3d9b@ids)))))))))) (gQ3ce4@cvt (lambda (gQ3ce5@p gQ3ce6@n gQ3ce7@ids) (let ((gQ3ceb@t gQ3ce5@p)) (let ((gQ3ced@ls/false (gQ30ba@syntax-dispatch gQ3ceb@t 'any))) (if (and gQ3ced@ls/false (apply (lambda (gQ3cef@id) (gQ2eb3@id? gQ3cef@id)) gQ3ced@ls/false)) (apply (lambda (gQ3cf1@id) (if (gQ2ebf@bound-id-member? gQ3ce5@p gQ3cde@keys) (values (vector 'free-id gQ3ce5@p) gQ3ce7@ids) (if (gQ2eb9@free-id=? gQ3ce5@p (gQ3042@scheme-stx '_)) (values '_ gQ3ce7@ids) (values 'any (cons (cons gQ3ce5@p gQ3ce6@n) gQ3ce7@ids))))) gQ3ced@ls/false) (let ((gQ3cf3@t gQ3ceb@t)) (let ((gQ3cf5@ls/false (gQ30ba@syntax-dispatch gQ3cf3@t '(any any)))) (if (and gQ3cf5@ls/false (apply (lambda (gQ3cf7@p gQ3cf8@dots) (gQ30bc@ellipsis? gQ3cf8@dots)) gQ3cf5@ls/false)) (apply (lambda (gQ3cfb@p gQ3cfc@dots) (call-with-values (lambda () (gQ3ce4@cvt gQ3cfb@p (+ gQ3ce6@n '1) gQ3ce7@ids)) (lambda (gQ3d03@gQ3d00 gQ3d04@gQ3d02) (let ((gQ3d07@ids gQ3d04@gQ3d02) (gQ3d08@p gQ3d03@gQ3d00)) (values (if (eq? gQ3d08@p 'any) 'each-any (vector 'each gQ3d08@p)) gQ3d07@ids))))) gQ3cf5@ls/false) (let ((gQ3d0b@t gQ3cf3@t)) (let ((gQ3d0d@ls/false (gQ30ba@syntax-dispatch gQ3d0b@t '(any any . #(each+ any () any))))) (if (and gQ3d0d@ls/false (apply (lambda (gQ3d0f@x gQ3d10@dots gQ3d11@ys gQ3d12@z) (gQ30bc@ellipsis? gQ3d10@dots)) gQ3d0d@ls/false)) (apply (lambda (gQ3d17@x gQ3d18@dots gQ3d19@ys gQ3d1a@z) (call-with-values (lambda () (gQ3ce4@cvt gQ3d1a@z gQ3ce6@n gQ3ce7@ids)) (lambda (gQ3d23@gQ3d20 gQ3d24@gQ3d22) (let ((gQ3d27@ids gQ3d24@gQ3d22) (gQ3d28@z gQ3d23@gQ3d20)) (call-with-values (lambda () (gQ3ce2@cvt* gQ3d19@ys gQ3ce6@n gQ3d27@ids)) (lambda (gQ3d2f@gQ3d2c gQ3d30@gQ3d2e) (let ((gQ3d33@ids gQ3d30@gQ3d2e) (gQ3d34@ys gQ3d2f@gQ3d2c)) (call-with-values (lambda () (gQ3ce4@cvt gQ3d17@x (+ gQ3ce6@n '1) gQ3d33@ids)) (lambda (gQ3d3b@gQ3d38 gQ3d3c@gQ3d3a) (let ((gQ3d3f@ids gQ3d3c@gQ3d3a) (gQ3d40@x gQ3d3b@gQ3d38)) (values (vector 'each+ gQ3d40@x (reverse gQ3d34@ys) gQ3d28@z) gQ3d3f@ids))))))))))) gQ3d0d@ls/false) (let ((gQ3d43@t gQ3d0b@t)) (let ((gQ3d45@ls/false (gQ30ba@syntax-dispatch gQ3d43@t '(any . any)))) (if gQ3d45@ls/false (apply (lambda (gQ3d47@x gQ3d48@y) (call-with-values (lambda () (gQ3ce4@cvt gQ3d48@y gQ3ce6@n gQ3ce7@ids)) (lambda (gQ3d4f@gQ3d4c gQ3d50@gQ3d4e) (let ((gQ3d53@ids gQ3d50@gQ3d4e) (gQ3d54@y gQ3d4f@gQ3d4c)) (call-with-values (lambda () (gQ3ce4@cvt gQ3d47@x gQ3ce6@n gQ3d53@ids)) (lambda (gQ3d5b@gQ3d58 gQ3d5c@gQ3d5a) (let ((gQ3d5f@ids gQ3d5c@gQ3d5a) (gQ3d60@x gQ3d5b@gQ3d58)) (values (cons gQ3d60@x gQ3d54@y) gQ3d5f@ids)))))))) gQ3d45@ls/false) (let ((gQ3d63@t gQ3d43@t)) (let ((gQ3d65@ls/false (gQ30ba@syntax-dispatch gQ3d63@t '()))) (if gQ3d65@ls/false (apply (lambda () (values '() gQ3ce7@ids)) gQ3d65@ls/false) (let ((gQ3d67@t gQ3d63@t)) (let ((gQ3d69@ls/false (gQ30ba@syntax-dispatch gQ3d67@t '#(vector each-any)))) (if (and gQ3d69@ls/false (apply (lambda (gQ3d6b@p) (not (gQ2e7f@stx? gQ3d6b@p))) gQ3d69@ls/false)) (apply (lambda (gQ3d6d@p) (call-with-values (lambda () (gQ3ce4@cvt gQ3d6d@p gQ3ce6@n gQ3ce7@ids)) (lambda (gQ3d73@gQ3d70 gQ3d74@gQ3d72) (let ((gQ3d77@ids gQ3d74@gQ3d72) (gQ3d78@p gQ3d73@gQ3d70)) (values (vector 'vector gQ3d78@p) gQ3d77@ids))))) gQ3d69@ls/false) (let ((gQ3d7b@t gQ3d67@t)) (let ((gQ3d7d@ls/false (gQ30ba@syntax-dispatch gQ3d7b@t 'any))) (if gQ3d7d@ls/false (apply (lambda (gQ3d7f@datum) (values (vector 'atom (gQ2ec7@stx->datum gQ3d7f@datum)) gQ3ce7@ids)) gQ3d7d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3d7b@t))))))))))))))))))))))))) (gQ3ce4@cvt gQ3cdd@pattern '0 '())))) (set! gQ4b8f@gQ30b8@convert-pattern gQ30b8@convert-pattern) (set! gQ30ba@syntax-dispatch (letrec* ((gQ3da0@stx^ (lambda (gQ3e7b@e gQ3e7c@m* gQ3e7d@s* gQ3e7e@ae*) (if (and (null? gQ3e7c@m*) (null? gQ3e7d@s*) (null? gQ3e7e@ae*)) gQ3e7b@e (gQ2e9b@mkstx gQ3e7b@e gQ3e7c@m* gQ3e7d@s* gQ3e7e@ae*)))) (gQ3da2@match-each (lambda (gQ3e5b@e gQ3e5c@p gQ3e5d@m* gQ3e5e@s* gQ3e5f@ae*) (if (pair? gQ3e5b@e) (let ((gQ3e65@first (gQ3dae@match (car gQ3e5b@e) gQ3e5c@p gQ3e5d@m* gQ3e5e@s* gQ3e5f@ae* '()))) (and gQ3e65@first (let ((gQ3e67@rest (gQ3da2@match-each (cdr gQ3e5b@e) gQ3e5c@p gQ3e5d@m* gQ3e5e@s* gQ3e5f@ae*))) (and gQ3e67@rest (cons gQ3e65@first gQ3e67@rest))))) (if (null? gQ3e5b@e) '() (if (gQ2e7f@stx? gQ3e5b@e) (and (not (gQ2e39@top-marked? gQ3e5d@m*)) (call-with-values (lambda () (join-wraps gQ3e5d@m* gQ3e5e@s* gQ3e5f@ae* gQ3e5b@e)) (lambda (gQ3e6f@gQ3e6a gQ3e70@gQ3e6c gQ3e71@gQ3e6e) (let ((gQ3e75@ae* gQ3e71@gQ3e6e) (gQ3e76@s* gQ3e70@gQ3e6c) (gQ3e77@m* gQ3e6f@gQ3e6a)) (gQ3da2@match-each (gQ2e81@stx-expr gQ3e5b@e) gQ3e5c@p gQ3e77@m* gQ3e76@s* gQ3e75@ae*))))) (if (gQ29f7@gQ28c9@annotation? gQ3e5b@e) (gQ3da2@match-each (gQ29f9@gQ28cd@annotation-expression gQ3e5b@e) gQ3e5c@p gQ3e5d@m* gQ3e5e@s* gQ3e5f@ae*) '#f)))))) (gQ3da4@match-each+ (lambda (gQ3e1b@e gQ3e1c@x-pat gQ3e1d@y-pat gQ3e1e@z-pat gQ3e1f@m* gQ3e20@s* gQ3e21@ae* gQ3e22@r) (let gQ3e33@f ((gQ3e2b@e gQ3e1b@e) (gQ3e2c@m* gQ3e1f@m*) (gQ3e2d@s* gQ3e20@s*) (gQ3e2e@ae* gQ3e21@ae*)) (if (pair? gQ3e2b@e) (call-with-values (lambda () (gQ3e33@f (cdr gQ3e2b@e) gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae*)) (lambda (gQ3e3b@gQ3e36 gQ3e3c@gQ3e38 gQ3e3d@gQ3e3a) (let ((gQ3e41@r gQ3e3d@gQ3e3a) (gQ3e42@y-pat gQ3e3c@gQ3e38) (gQ3e43@xr* gQ3e3b@gQ3e36)) (if gQ3e41@r (if (null? gQ3e42@y-pat) (let ((gQ3e47@xr (gQ3dae@match (car gQ3e2b@e) gQ3e1c@x-pat gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae* '()))) (if gQ3e47@xr (values (cons gQ3e47@xr gQ3e43@xr*) gQ3e42@y-pat gQ3e41@r) (values '#f '#f '#f))) (values '() (cdr gQ3e42@y-pat) (gQ3dae@match (car gQ3e2b@e) (car gQ3e42@y-pat) gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae* gQ3e41@r))) (values '#f '#f '#f))))) (if (gQ2e7f@stx? gQ3e2b@e) (if (gQ2e39@top-marked? gQ3e2c@m*) (values '() gQ3e1d@y-pat (gQ3dae@match gQ3e2b@e gQ3e1e@z-pat gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae* gQ3e22@r)) (call-with-values (lambda () (join-wraps gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae* gQ3e2b@e)) (lambda (gQ3e4f@gQ3e4a gQ3e50@gQ3e4c gQ3e51@gQ3e4e) (let ((gQ3e55@ae* gQ3e51@gQ3e4e) (gQ3e56@s* gQ3e50@gQ3e4c) (gQ3e57@m* gQ3e4f@gQ3e4a)) (gQ3e33@f (gQ2e81@stx-expr gQ3e2b@e) gQ3e57@m* gQ3e56@s* gQ3e55@ae*))))) (if (gQ29f7@gQ28c9@annotation? gQ3e2b@e) (gQ3e33@f (gQ29f9@gQ28cd@annotation-expression gQ3e2b@e) gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae*) (values '() gQ3e1d@y-pat (gQ3dae@match gQ3e2b@e gQ3e1e@z-pat gQ3e2c@m* gQ3e2d@s* gQ3e2e@ae* gQ3e22@r)))))))) (gQ3da6@match-each-any (lambda (gQ3dff@e gQ3e00@m* gQ3e01@s* gQ3e02@ae*) (if (pair? gQ3dff@e) (let ((gQ3e07@l (gQ3da6@match-each-any (cdr gQ3dff@e) gQ3e00@m* gQ3e01@s* gQ3e02@ae*))) (and gQ3e07@l (cons (gQ3da0@stx^ (car gQ3dff@e) gQ3e00@m* gQ3e01@s* gQ3e02@ae*) gQ3e07@l))) (if (null? gQ3dff@e) '() (if (gQ2e7f@stx? gQ3dff@e) (and (not (gQ2e39@top-marked? gQ3e00@m*)) (call-with-values (lambda () (join-wraps gQ3e00@m* gQ3e01@s* gQ3e02@ae* gQ3dff@e)) (lambda (gQ3e0f@gQ3e0a gQ3e10@gQ3e0c gQ3e11@gQ3e0e) (let ((gQ3e15@ae* gQ3e11@gQ3e0e) (gQ3e16@s* gQ3e10@gQ3e0c) (gQ3e17@m* gQ3e0f@gQ3e0a)) (gQ3da6@match-each-any (gQ2e81@stx-expr gQ3dff@e) gQ3e17@m* gQ3e16@s* gQ3e15@ae*))))) (if (gQ29f7@gQ28c9@annotation? gQ3dff@e) (gQ3da6@match-each-any (gQ29f9@gQ28cd@annotation-expression gQ3dff@e) gQ3e00@m* gQ3e01@s* gQ3e02@ae*) '#f)))))) (gQ3da8@match-empty (lambda (gQ3df9@p gQ3dfa@r) (if (null? gQ3df9@p) gQ3dfa@r (if (eq? gQ3df9@p '_) gQ3dfa@r (if (eq? gQ3df9@p 'any) (cons '() gQ3dfa@r) (if (pair? gQ3df9@p) (gQ3da8@match-empty (car gQ3df9@p) (gQ3da8@match-empty (cdr gQ3df9@p) gQ3dfa@r)) (if (eq? gQ3df9@p 'each-any) (cons '() gQ3dfa@r) (let ((gQ3dfd@t (vector-ref gQ3df9@p '0))) (if (memv gQ3dfd@t '(each)) (gQ3da8@match-empty (vector-ref gQ3df9@p '1) gQ3dfa@r) (if (memv gQ3dfd@t '(each+)) (gQ3da8@match-empty (vector-ref gQ3df9@p '1) (gQ3da8@match-empty (reverse (vector-ref gQ3df9@p '2)) (gQ3da8@match-empty (vector-ref gQ3df9@p '3) gQ3dfa@r))) (if (memv gQ3dfd@t '(free-id atom)) gQ3dfa@r (if (memv gQ3dfd@t '(scheme-id atom)) gQ3dfa@r (if (memv gQ3dfd@t '(vector)) (gQ3da8@match-empty (vector-ref gQ3df9@p '1) gQ3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" gQ3df9@p)))))))))))))) (gQ3daa@combine (lambda (gQ3df5@r* gQ3df6@r) (if (null? (car gQ3df5@r*)) gQ3df6@r (cons (map car gQ3df5@r*) (gQ3daa@combine (map cdr gQ3df5@r*) gQ3df6@r))))) (gQ3dac@match* (lambda (gQ3dd1@e gQ3dd2@p gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae* gQ3dd6@r) (if (null? gQ3dd2@p) (and (null? gQ3dd1@e) gQ3dd6@r) (if (pair? gQ3dd2@p) (and (pair? gQ3dd1@e) (gQ3dae@match (car gQ3dd1@e) (car gQ3dd2@p) gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae* (gQ3dae@match (cdr gQ3dd1@e) (cdr gQ3dd2@p) gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae* gQ3dd6@r))) (if (eq? gQ3dd2@p 'each-any) (let ((gQ3ddd@l (gQ3da6@match-each-any gQ3dd1@e gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae*))) (and gQ3ddd@l (cons gQ3ddd@l gQ3dd6@r))) (let ((gQ3ddf@t (vector-ref gQ3dd2@p '0))) (if (memv gQ3ddf@t '(each)) (if (null? gQ3dd1@e) (gQ3da8@match-empty (vector-ref gQ3dd2@p '1) gQ3dd6@r) (let ((gQ3de1@r* (gQ3da2@match-each gQ3dd1@e (vector-ref gQ3dd2@p '1) gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae*))) (and gQ3de1@r* (gQ3daa@combine gQ3de1@r* gQ3dd6@r)))) (if (memv gQ3ddf@t '(free-id)) (and (symbol? gQ3dd1@e) (gQ2e39@top-marked? gQ3dd3@m*) (gQ2eb9@free-id=? (gQ3da0@stx^ gQ3dd1@e gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae*) (vector-ref gQ3dd2@p '1)) gQ3dd6@r) (if (memv gQ3ddf@t '(scheme-id)) (and (symbol? gQ3dd1@e) (gQ2e39@top-marked? gQ3dd3@m*) (gQ2eb9@free-id=? (gQ3da0@stx^ gQ3dd1@e gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae*) (gQ3042@scheme-stx (vector-ref gQ3dd2@p '1))) gQ3dd6@r) (if (memv gQ3ddf@t '(each+)) (call-with-values (lambda () (gQ3da4@match-each+ gQ3dd1@e (vector-ref gQ3dd2@p '1) (vector-ref gQ3dd2@p '2) (vector-ref gQ3dd2@p '3) gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae* gQ3dd6@r)) (lambda (gQ3de9@gQ3de4 gQ3dea@gQ3de6 gQ3deb@gQ3de8) (let ((gQ3def@r gQ3deb@gQ3de8) (gQ3df0@y-pat gQ3dea@gQ3de6) (gQ3df1@xr* gQ3de9@gQ3de4)) (and gQ3def@r (null? gQ3df0@y-pat) (if (null? gQ3df1@xr*) (gQ3da8@match-empty (vector-ref gQ3dd2@p '1) gQ3def@r) (gQ3daa@combine gQ3df1@xr* gQ3def@r)))))) (if (memv gQ3ddf@t '(atom)) (and (fast-equal? (vector-ref gQ3dd2@p '1) (gQ2ec5@strip gQ3dd1@e gQ3dd3@m*)) gQ3dd6@r) (if (memv gQ3ddf@t '(vector)) (and (vector? gQ3dd1@e) (gQ3dae@match (vector->list gQ3dd1@e) (vector-ref gQ3dd2@p '1) gQ3dd3@m* gQ3dd4@s* gQ3dd5@ae* gQ3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" gQ3dd2@p))))))))))))) (gQ3dae@match (lambda (gQ3db3@e gQ3db4@p gQ3db5@m* gQ3db6@s* gQ3db7@ae* gQ3db8@r) (if (not gQ3db8@r) '#f (if (eq? gQ3db4@p '_) gQ3db8@r (if (eq? gQ3db4@p 'any) (cons (gQ3da0@stx^ gQ3db3@e gQ3db5@m* gQ3db6@s* gQ3db7@ae*) gQ3db8@r) (if (gQ2e7f@stx? gQ3db3@e) (and (not (gQ2e39@top-marked? gQ3db5@m*)) (call-with-values (lambda () (join-wraps gQ3db5@m* gQ3db6@s* gQ3db7@ae* gQ3db3@e)) (lambda (gQ3dc5@gQ3dc0 gQ3dc6@gQ3dc2 gQ3dc7@gQ3dc4) (let ((gQ3dcb@ae* gQ3dc7@gQ3dc4) (gQ3dcc@s* gQ3dc6@gQ3dc2) (gQ3dcd@m* gQ3dc5@gQ3dc0)) (gQ3dae@match (gQ2e81@stx-expr gQ3db3@e) gQ3db4@p gQ3dcd@m* gQ3dcc@s* gQ3dcb@ae* gQ3db8@r))))) (if (gQ29f7@gQ28c9@annotation? gQ3db3@e) (gQ3dae@match (gQ29f9@gQ28cd@annotation-expression gQ3db3@e) gQ3db4@p gQ3db5@m* gQ3db6@s* gQ3db7@ae* gQ3db8@r) (gQ3dac@match* gQ3db3@e gQ3db4@p gQ3db5@m* gQ3db6@s* gQ3db7@ae* gQ3db8@r))))))))) (lambda (gQ3daf@e gQ3db0@p) (gQ3dae@match gQ3daf@e gQ3db0@p '() '() '() '())))) (set! gQ4b90@gQ30ba@syntax-dispatch gQ30ba@syntax-dispatch) (set! gQ30bc@ellipsis? (lambda (gQ3e83@x) (and (gQ2eb3@id? gQ3e83@x) (gQ2eb9@free-id=? gQ3e83@x (gQ3042@scheme-stx '...))))) (set! gQ4b91@gQ30bc@ellipsis? gQ30bc@ellipsis?) (set! gQ30be@underscore? (lambda (gQ3e85@x) (and (gQ2eb3@id? gQ3e85@x) (gQ2eb9@free-id=? gQ3e85@x (gQ3042@scheme-stx '_))))) (set! gQ4b92@gQ30be@underscore? gQ30be@underscore?) (set! gQ30c0@verify-literals (lambda (gQ3e87@lits gQ3e88@expr) (for-each (lambda (gQ3e8b@x) (if (or (not (gQ2eb3@id? gQ3e8b@x)) (gQ30bc@ellipsis? gQ3e8b@x) (gQ30be@underscore? gQ3e8b@x)) (gQ319a@syntax-violation '#f '"invalid literal" gQ3e88@expr gQ3e8b@x) (void))) gQ3e87@lits))) (set! gQ4b93@gQ30c0@verify-literals gQ30c0@verify-literals) (set! gQ30c2@syntax-case-transformer (letrec* ((gQ3e8e@build-dispatch-call (lambda (gQ3eff@pvars gQ3f00@expr gQ3f01@y gQ3f02@r gQ3f03@mr) (let ((gQ3f09@ids (map car gQ3eff@pvars)) (gQ3f0a@levels (map cdr gQ3eff@pvars))) (let ((gQ3f0d@labels (map gQ2e3f@gen-label gQ3f09@ids)) (gQ3f0e@new-vars (map gQ2e3b@gen-lexical gQ3f09@ids))) (let ((gQ3f11@body (gQ30dc@chi-expr (gQ2e9f@add-subst (gQ2e73@make-full-rib gQ3f09@ids gQ3f0d@labels) gQ3f00@expr) (append (map (lambda (gQ3f13@label gQ3f14@var gQ3f15@level) (cons gQ3f13@label (gQ2ecd@make-binding 'syntax (cons gQ3f14@var gQ3f15@level)))) gQ3f0d@labels gQ3f0e@new-vars (map cdr gQ3eff@pvars)) gQ3f02@r) gQ3f03@mr))) (list '(primitive apply) (gQ2e16@gQ2d48@build-lambda '#f gQ3f0e@new-vars gQ3f11@body) gQ3f01@y)))))) (gQ3e90@invalid-ids-error (lambda (gQ3ef3@id* gQ3ef4@e gQ3ef5@class) (let gQ3efd@find ((gQ3ef9@id* gQ3ef3@id*) (gQ3efa@ok* '())) (if (null? gQ3ef9@id*) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3ef4@e) (if (gQ2eb3@id? (car gQ3ef9@id*)) (if (gQ2ebf@bound-id-member? (car gQ3ef9@id*) gQ3efa@ok*) (gQ3196@syntax-error (car gQ3ef9@id*) '"duplicate " gQ3ef5@class) (gQ3efd@find (cdr gQ3ef9@id*) (cons (car gQ3ef9@id*) gQ3efa@ok*))) (gQ3196@syntax-error (car gQ3ef9@id*) '"invalid " gQ3ef5@class)))))) (gQ3e92@gen-clause (lambda (gQ3ecb@x gQ3ecc@keys gQ3ecd@clauses gQ3ece@r gQ3ecf@mr gQ3ed0@pat gQ3ed1@fender gQ3ed2@expr) (call-with-values (lambda () (gQ30b8@convert-pattern gQ3ed0@pat gQ3ecc@keys)) (lambda (gQ3edf@gQ3edc gQ3ee0@gQ3ede) (let ((gQ3ee3@pvars gQ3ee0@gQ3ede) (gQ3ee4@p gQ3edf@gQ3edc)) (if (not (gQ2ebd@distinct-bound-ids? (map car gQ3ee3@pvars))) (gQ3e90@invalid-ids-error (map car gQ3ee3@pvars) gQ3ed0@pat '"pattern variable") (if (not (for-all (lambda (gQ3ee7@x) (not (gQ30bc@ellipsis? (car gQ3ee7@x)))) gQ3ee3@pvars)) (gQ319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" gQ3ed0@pat) (let ((gQ3ee9@y (gQ2e3b@gen-lexical 'tmp))) (let ((gQ3eeb@test (if (eq? gQ3ed1@fender '#t) gQ3ee9@y (let ((gQ3eed@call (gQ3e8e@build-dispatch-call gQ3ee3@pvars gQ3ed1@fender gQ3ee9@y gQ3ece@r gQ3ecf@mr))) (list 'if gQ3ee9@y gQ3eed@call (list 'quote '#f)))))) (let ((gQ3eef@conseq (gQ3e8e@build-dispatch-call gQ3ee3@pvars gQ3ed2@expr gQ3ee9@y gQ3ece@r gQ3ecf@mr))) (let ((gQ3ef1@altern (gQ3e94@gen-syntax-case gQ3ecb@x gQ3ecc@keys gQ3ecd@clauses gQ3ece@r gQ3ecf@mr))) (list (gQ2e16@gQ2d48@build-lambda '#f (list gQ3ee9@y) (list 'if gQ3eeb@test gQ3eef@conseq gQ3ef1@altern)) (list '(primitive syntax-dispatch) gQ3ecb@x (list 'quote gQ3ee4@p)))))))))))))) (gQ3e94@gen-syntax-case (lambda (gQ3ea9@x gQ3eaa@keys gQ3eab@clauses gQ3eac@r gQ3ead@mr) (if (null? gQ3eab@clauses) (list '(primitive syntax-error) gQ3ea9@x) (let ((gQ3eb3@t (car gQ3eab@clauses))) (let ((gQ3eb5@ls/false (gQ30ba@syntax-dispatch gQ3eb3@t '(any any)))) (if gQ3eb5@ls/false (apply (lambda (gQ3eb7@pat gQ3eb8@expr) (if (and (gQ2eb3@id? gQ3eb7@pat) (not (gQ2ebf@bound-id-member? gQ3eb7@pat gQ3eaa@keys)) (not (gQ30bc@ellipsis? gQ3eb7@pat))) (if (gQ2eb9@free-id=? gQ3eb7@pat (gQ3042@scheme-stx '_)) (gQ30dc@chi-expr gQ3eb8@expr gQ3eac@r gQ3ead@mr) (let ((gQ3ebb@lab (gQ2e3f@gen-label gQ3eb7@pat)) (gQ3ebc@lex (gQ2e3b@gen-lexical gQ3eb7@pat))) (let ((gQ3ebf@body (gQ30dc@chi-expr (gQ2e9f@add-subst (gQ2e73@make-full-rib (list gQ3eb7@pat) (list gQ3ebb@lab)) gQ3eb8@expr) (cons (cons gQ3ebb@lab (gQ2ecd@make-binding 'syntax (cons gQ3ebc@lex '0))) gQ3eac@r) gQ3ead@mr))) (list (gQ2e16@gQ2d48@build-lambda '#f (list gQ3ebc@lex) gQ3ebf@body) gQ3ea9@x)))) (gQ3e92@gen-clause gQ3ea9@x gQ3eaa@keys (cdr gQ3eab@clauses) gQ3eac@r gQ3ead@mr gQ3eb7@pat '#t gQ3eb8@expr))) gQ3eb5@ls/false) (let ((gQ3ec1@t gQ3eb3@t)) (let ((gQ3ec3@ls/false (gQ30ba@syntax-dispatch gQ3ec1@t '(any any any)))) (if gQ3ec3@ls/false (apply (lambda (gQ3ec5@pat gQ3ec6@fender gQ3ec7@expr) (gQ3e92@gen-clause gQ3ea9@x gQ3eaa@keys (cdr gQ3eab@clauses) gQ3eac@r gQ3ead@mr gQ3ec5@pat gQ3ec6@fender gQ3ec7@expr)) gQ3ec3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3ec1@t))))))))))) (lambda (gQ3e95@e gQ3e96@r gQ3e97@mr) (let ((gQ3e9b@t gQ3e95@e)) (let ((gQ3e9d@ls/false (gQ30ba@syntax-dispatch gQ3e9b@t '(_ any each-any . each-any)))) (if gQ3e9d@ls/false (apply (lambda (gQ3e9f@expr gQ3ea0@keys gQ3ea1@clauses) (begin (gQ30c0@verify-literals gQ3ea0@keys gQ3e95@e) (let ((gQ3ea5@x (gQ2e3b@gen-lexical 'tmp))) (let ((gQ3ea7@body (gQ3e94@gen-syntax-case gQ3ea5@x gQ3ea0@keys gQ3ea1@clauses gQ3e96@r gQ3e97@mr))) (list (gQ2e16@gQ2d48@build-lambda '#f (list gQ3ea5@x) gQ3ea7@body) (gQ30dc@chi-expr gQ3e9f@expr gQ3e96@r gQ3e97@mr)))))) gQ3e9d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3e9b@t))))))) (set! gQ4b94@gQ30c2@syntax-case-transformer gQ30c2@syntax-case-transformer) (set! gQ30c4@ellipsis-map (lambda (gQ3f19@proc gQ3f1a@ls . gQ3f1d@ls*) (letrec* ((gQ3f20@who '...)) (begin (if (not (list? gQ3f1a@ls)) (assertion-violation gQ3f20@who '"not a list" gQ3f1a@ls) (void)) (if (not (null? gQ3f1d@ls*)) (let ((gQ3f21@n (length gQ3f1a@ls))) (for-each (lambda (gQ3f23@x) (begin (if (not (list? gQ3f23@x)) (assertion-violation gQ3f20@who '"not a list" gQ3f23@x) (void)) (if (not (= (length gQ3f23@x) gQ3f21@n)) (assertion-violation gQ3f20@who '"length mismatch" gQ3f1a@ls gQ3f23@x) (void)))) gQ3f1d@ls*)) (void)) (apply map gQ3f19@proc gQ3f1a@ls gQ3f1d@ls*))))) (set! gQ4b95@gQ30c4@ellipsis-map gQ30c4@ellipsis-map) (set! gQ30c6@syntax-transformer (letrec* ((gQ3f26@gen-syntax (lambda (gQ3f9d@src gQ3f9e@e gQ3f9f@r gQ3fa0@maps gQ3fa1@ellipsis? gQ3fa2@vec?) (let ((gQ3fa9@t gQ3f9e@e)) (let ((gQ3fab@ls/false (gQ30ba@syntax-dispatch gQ3fa9@t 'any))) (if (and gQ3fab@ls/false (apply (lambda (gQ3fad@dots) (gQ3fa1@ellipsis? gQ3fad@dots)) gQ3fab@ls/false)) (apply (lambda (gQ3faf@dots) (gQ319a@syntax-violation '#f '"misplaced ellipsis in syntax form" gQ3f9d@src)) gQ3fab@ls/false) (let ((gQ3fb1@t gQ3fa9@t)) (let ((gQ3fb3@ls/false (gQ30ba@syntax-dispatch gQ3fb1@t 'any))) (if (and gQ3fb3@ls/false (apply (lambda (gQ3fb5@id) (gQ2eb3@id? gQ3fb5@id)) gQ3fb3@ls/false)) (apply (lambda (gQ3fb7@id) (let ((gQ3fb9@label (gQ2ec9@id->label gQ3f9e@e))) (let ((gQ3fbb@b (gQ2ecb@label->binding gQ3fb9@label gQ3f9f@r))) (if (eq? (gQ2ecf@binding-type gQ3fbb@b) 'syntax) (call-with-values (lambda () (let ((gQ3fc1@var.lev (gQ2ed1@binding-value gQ3fbb@b))) (gQ3f28@gen-ref gQ3f9d@src (car gQ3fc1@var.lev) (cdr gQ3fc1@var.lev) gQ3fa0@maps))) (lambda (gQ3fc3@gQ3fbe gQ3fc4@gQ3fc0) (let ((gQ3fc7@maps gQ3fc4@gQ3fc0) (gQ3fc8@var gQ3fc3@gQ3fbe)) (values (list 'ref gQ3fc8@var) gQ3fc7@maps)))) (values (list 'quote gQ3f9e@e) gQ3fa0@maps))))) gQ3fb3@ls/false) (let ((gQ3fcb@t gQ3fb1@t)) (let ((gQ3fcd@ls/false (gQ30ba@syntax-dispatch gQ3fcb@t '(any any)))) (if (and gQ3fcd@ls/false (apply (lambda (gQ3fcf@dots gQ3fd0@e) (gQ3fa1@ellipsis? gQ3fcf@dots)) gQ3fcd@ls/false)) (apply (lambda (gQ3fd3@dots gQ3fd4@e) (if gQ3fa2@vec? (gQ319a@syntax-violation '#f '"misplaced ellipsis in syntax form" gQ3f9d@src) (gQ3f26@gen-syntax gQ3f9d@src gQ3fd4@e gQ3f9f@r gQ3fa0@maps (lambda (gQ3fd7@x) '#f) '#f))) gQ3fcd@ls/false) (let ((gQ3fd9@t gQ3fcb@t)) (let ((gQ3fdb@ls/false (gQ30ba@syntax-dispatch gQ3fd9@t '(any any . any)))) (if (and gQ3fdb@ls/false (apply (lambda (gQ3fdd@x gQ3fde@dots gQ3fdf@y) (gQ3fa1@ellipsis? gQ3fde@dots)) gQ3fdb@ls/false)) (apply (lambda (gQ3fe3@x gQ3fe4@dots gQ3fe5@y) (let gQ3ffb@f ((gQ3fe9@y gQ3fe5@y) (gQ3fea@k (lambda (gQ3fed@maps) (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f9d@src gQ3fe3@x gQ3f9f@r (cons '() gQ3fed@maps) gQ3fa1@ellipsis? '#f)) (lambda (gQ3ff3@gQ3ff0 gQ3ff4@gQ3ff2) (let ((gQ3ff7@maps gQ3ff4@gQ3ff2) (gQ3ff8@x gQ3ff3@gQ3ff0)) (if (null? (car gQ3ff7@maps)) (gQ319a@syntax-violation '#f '"extra ellipsis in syntax form" gQ3f9d@src) (values (gQ3f2e@gen-map gQ3ff8@x (car gQ3ff7@maps)) (cdr gQ3ff7@maps))))))))) (let ((gQ3ffd@t gQ3fe9@y)) (let ((gQ3fff@ls/false (gQ30ba@syntax-dispatch gQ3ffd@t '()))) (if gQ3fff@ls/false (apply (lambda () (gQ3fea@k gQ3fa0@maps)) gQ3fff@ls/false) (let ((gQ4001@t gQ3ffd@t)) (let ((gQ4003@ls/false (gQ30ba@syntax-dispatch gQ4001@t '(any . any)))) (if (and gQ4003@ls/false (apply (lambda (gQ4005@dots gQ4006@y) (gQ3fa1@ellipsis? gQ4005@dots)) gQ4003@ls/false)) (apply (lambda (gQ4009@dots gQ400a@y) (gQ3ffb@f gQ400a@y (lambda (gQ400d@maps) (call-with-values (lambda () (gQ3fea@k (cons '() gQ400d@maps))) (lambda (gQ4013@gQ4010 gQ4014@gQ4012) (let ((gQ4017@maps gQ4014@gQ4012) (gQ4018@x gQ4013@gQ4010)) (if (null? (car gQ4017@maps)) (gQ319a@syntax-violation '#f '"extra ellipsis in syntax form" gQ3f9d@src) (values (gQ3f2c@gen-mappend gQ4018@x (car gQ4017@maps)) (cdr gQ4017@maps))))))))) gQ4003@ls/false) (let ((gQ401b@t gQ4001@t)) (let ((gQ401d@ls/false (gQ30ba@syntax-dispatch gQ401b@t '_))) (if gQ401d@ls/false (apply (lambda () (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f9d@src gQ3fe9@y gQ3f9f@r gQ3fa0@maps gQ3fa1@ellipsis? gQ3fa2@vec?)) (lambda (gQ4023@gQ4020 gQ4024@gQ4022) (let ((gQ4027@maps gQ4024@gQ4022) (gQ4028@y gQ4023@gQ4020)) (call-with-values (lambda () (gQ3fea@k gQ4027@maps)) (lambda (gQ402f@gQ402c gQ4030@gQ402e) (let ((gQ4033@maps gQ4030@gQ402e) (gQ4034@x gQ402f@gQ402c)) (values (gQ3f2a@gen-append gQ4034@x gQ4028@y) gQ4033@maps)))))))) gQ401d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ401b@t)))))))))))) gQ3fdb@ls/false) (let ((gQ4037@t gQ3fd9@t)) (let ((gQ4039@ls/false (gQ30ba@syntax-dispatch gQ4037@t '(any . any)))) (if gQ4039@ls/false (apply (lambda (gQ403b@x gQ403c@y) (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f9d@src gQ403b@x gQ3f9f@r gQ3fa0@maps gQ3fa1@ellipsis? '#f)) (lambda (gQ4043@gQ4040 gQ4044@gQ4042) (let ((gQ4047@maps gQ4044@gQ4042) (gQ4048@xnew gQ4043@gQ4040)) (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f9d@src gQ403c@y gQ3f9f@r gQ4047@maps gQ3fa1@ellipsis? gQ3fa2@vec?)) (lambda (gQ404f@gQ404c gQ4050@gQ404e) (let ((gQ4053@maps gQ4050@gQ404e) (gQ4054@ynew gQ404f@gQ404c)) (values (gQ3f30@gen-cons gQ3f9e@e gQ403b@x gQ403c@y gQ4048@xnew gQ4054@ynew) gQ4053@maps)))))))) gQ4039@ls/false) (let ((gQ4057@t gQ4037@t)) (let ((gQ4059@ls/false (gQ30ba@syntax-dispatch gQ4057@t '#(vector each-any)))) (if gQ4059@ls/false (apply (lambda (gQ405b@ls) (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f9d@src gQ405b@ls gQ3f9f@r gQ3fa0@maps gQ3fa1@ellipsis? '#t)) (lambda (gQ4061@gQ405e gQ4062@gQ4060) (let ((gQ4065@maps gQ4062@gQ4060) (gQ4066@lsnew gQ4061@gQ405e)) (values (gQ3f32@gen-vector gQ3f9e@e gQ405b@ls gQ4066@lsnew) gQ4065@maps))))) gQ4059@ls/false) (let ((gQ4069@t gQ4057@t)) (let ((gQ406b@ls/false (gQ30ba@syntax-dispatch gQ4069@t '_))) (if gQ406b@ls/false (apply (lambda () (values (list 'quote gQ3f9e@e) gQ3fa0@maps)) gQ406b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4069@t)))))))))))))))))))))))) (gQ3f28@gen-ref (lambda (gQ3f83@src gQ3f84@var gQ3f85@level gQ3f86@maps) (if (= gQ3f85@level '0) (values gQ3f84@var gQ3f86@maps) (if (null? gQ3f86@maps) (gQ319a@syntax-violation '#f '"missing ellipsis in syntax form" gQ3f83@src) (call-with-values (lambda () (gQ3f28@gen-ref gQ3f83@src gQ3f84@var (- gQ3f85@level '1) (cdr gQ3f86@maps))) (lambda (gQ3f8f@gQ3f8c gQ3f90@gQ3f8e) (let ((gQ3f93@outer-maps gQ3f90@gQ3f8e) (gQ3f94@outer-var gQ3f8f@gQ3f8c)) (let ((gQ3f97@t (assq gQ3f94@outer-var (car gQ3f86@maps)))) (if gQ3f97@t ((lambda (gQ3f99@b) (values (cdr gQ3f99@b) gQ3f86@maps)) gQ3f97@t) (let ((gQ3f9b@inner-var (gQ2e3b@gen-lexical 'tmp))) (values gQ3f9b@inner-var (cons (cons (cons gQ3f94@outer-var gQ3f9b@inner-var) (car gQ3f86@maps)) gQ3f93@outer-maps)))))))))))) (gQ3f2a@gen-append (lambda (gQ3f7f@x gQ3f80@y) (if (fast-equal? gQ3f80@y ''()) gQ3f7f@x (list 'append gQ3f7f@x gQ3f80@y)))) (gQ3f2c@gen-mappend (lambda (gQ3f7b@e gQ3f7c@map-env) (list 'apply '(primitive append) (gQ3f2e@gen-map gQ3f7b@e gQ3f7c@map-env)))) (gQ3f2e@gen-map (lambda (gQ3f69@e gQ3f6a@map-env) (let ((gQ3f6d@formals (map cdr gQ3f6a@map-env)) (gQ3f6e@actuals (map (lambda (gQ3f71@x) (list 'ref (car gQ3f71@x))) gQ3f6a@map-env))) (if (eq? (car gQ3f69@e) 'ref) (car gQ3f6e@actuals) (if (for-all (lambda (gQ3f73@x) (and (eq? (car gQ3f73@x) 'ref) (memq (cadr gQ3f73@x) gQ3f6d@formals))) (cdr gQ3f69@e)) (let ((gQ3f75@args (map (let ((gQ3f77@r (map cons gQ3f6d@formals gQ3f6e@actuals))) (lambda (gQ3f79@x) (cdr (assq (cadr gQ3f79@x) gQ3f77@r)))) (cdr gQ3f69@e)))) (cons 'map (cons (list 'primitive (car gQ3f69@e)) gQ3f75@args))) (cons* 'map (list 'lambda gQ3f6d@formals gQ3f69@e) gQ3f6e@actuals)))))) (gQ3f30@gen-cons (lambda (gQ3f59@e gQ3f5a@x gQ3f5b@y gQ3f5c@xnew gQ3f5d@ynew) (let ((gQ3f63@t (car gQ3f5d@ynew))) (if (memv gQ3f63@t '(quote)) (if (eq? (car gQ3f5c@xnew) 'quote) (let ((gQ3f65@xnew (cadr gQ3f5c@xnew)) (gQ3f66@ynew (cadr gQ3f5d@ynew))) (if (and (eq? gQ3f65@xnew gQ3f5a@x) (eq? gQ3f66@ynew gQ3f5b@y)) (list 'quote gQ3f59@e) (list 'quote (cons gQ3f65@xnew gQ3f66@ynew)))) (if (null? (cadr gQ3f5d@ynew)) (list 'list gQ3f5c@xnew) (list 'cons gQ3f5c@xnew gQ3f5d@ynew))) (if (memv gQ3f63@t '(list)) (cons 'list (cons gQ3f5c@xnew (cdr gQ3f5d@ynew))) (list 'cons gQ3f5c@xnew gQ3f5d@ynew)))))) (gQ3f32@gen-vector (lambda (gQ3f53@e gQ3f54@ls gQ3f55@lsnew) (if (eq? (car gQ3f55@lsnew) 'quote) (if (eq? (cadr gQ3f55@lsnew) gQ3f54@ls) (list 'quote gQ3f53@e) (list 'quote (list->vector (cadr gQ3f55@lsnew)))) (if (eq? (car gQ3f55@lsnew) 'list) (cons 'vector (cdr gQ3f55@lsnew)) (list 'list->vector gQ3f55@lsnew))))) (gQ3f34@regen (lambda (gQ3f4d@x) (let ((gQ3f4f@t (car gQ3f4d@x))) (if (memv gQ3f4f@t '(ref)) (cadr gQ3f4d@x) (if (memv gQ3f4f@t '(primitive)) (list 'primitive (cadr gQ3f4d@x)) (if (memv gQ3f4f@t '(quote)) (list 'quote (cadr gQ3f4d@x)) (if (memv gQ3f4f@t '(lambda)) (gQ2e16@gQ2d48@build-lambda '#f (cadr gQ3f4d@x) (gQ3f34@regen (caddr gQ3f4d@x))) (if (memv gQ3f4f@t '(map)) (let ((gQ3f51@ls (map gQ3f34@regen (cdr gQ3f4d@x)))) (cons '(primitive ellipsis-map) gQ3f51@ls)) (cons (list 'primitive (car gQ3f4d@x)) (map gQ3f34@regen (cdr gQ3f4d@x)))))))))))) (lambda (gQ3f35@e gQ3f36@r gQ3f37@mr) (let ((gQ3f3b@t gQ3f35@e)) (let ((gQ3f3d@ls/false (gQ30ba@syntax-dispatch gQ3f3b@t '(_ any)))) (if gQ3f3d@ls/false (apply (lambda (gQ3f3f@x) (call-with-values (lambda () (gQ3f26@gen-syntax gQ3f35@e gQ3f3f@x gQ3f36@r '() gQ30bc@ellipsis? '#f)) (lambda (gQ3f45@gQ3f42 gQ3f46@gQ3f44) (let ((gQ3f49@maps gQ3f46@gQ3f44) (gQ3f4a@e gQ3f45@gQ3f42)) (gQ3f34@regen gQ3f4a@e))))) gQ3f3d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ3f3b@t))))))) (set! gQ4b96@gQ30c6@syntax-transformer gQ30c6@syntax-transformer) (set! gQ30c8@core-macro-transformer (lambda (gQ406d@name) (let ((gQ406f@t gQ406d@name)) (if (memv gQ406f@t '(quote)) gQ306a@quote-transformer (if (memv gQ406f@t '(lambda)) gQ306e@lambda-transformer (if (memv gQ406f@t '(case-lambda)) gQ306c@case-lambda-transformer (if (memv gQ406f@t '(letrec)) gQ3052@letrec-transformer (if (memv gQ406f@t '(letrec*)) gQ3054@letrec*-transformer (if (memv gQ406f@t '(let)) gQ3050@let-transformer (if (memv gQ406f@t '(if)) gQ3062@if-transformer (if (memv gQ406f@t '(and)) gQ3064@and-transformer (if (memv gQ406f@t '(or)) gQ3066@or-transformer (if (memv gQ406f@t '(foreign-call)) gQ30b6@foreign-call-transformer (if (memv gQ406f@t '(syntax-case)) gQ30c2@syntax-case-transformer (if (memv gQ406f@t '(syntax)) gQ30c6@syntax-transformer (if (memv gQ406f@t '(type-descriptor)) gQ3058@type-descriptor-transformer (if (memv gQ406f@t '(record-type-descriptor)) gQ305a@record-type-descriptor-transformer (if (memv gQ406f@t '(record-constructor-descriptor)) gQ305c@record-constructor-descriptor-transformer (if (memv gQ406f@t '(fluid-let-syntax)) gQ3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" gQ406d@name)))))))))))))))))))) (set! gQ4b97@gQ30c8@core-macro-transformer gQ30c8@core-macro-transformer) (set! gQ30ca@symbol-macro (lambda (gQ4071@x gQ4072@set) (let ((gQ4075@t gQ4071@x)) (let ((gQ4077@ls/false (gQ30ba@syntax-dispatch gQ4075@t '(_ any)))) (if (and gQ4077@ls/false (apply (lambda (gQ4079@name) (and (gQ2eb3@id? gQ4079@name) (memq (gQ2eb5@id->sym gQ4079@name) gQ4072@set))) gQ4077@ls/false)) (apply (lambda (gQ407b@name) (gQ3070@bless (list 'quote gQ407b@name))) gQ4077@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4075@t)))))) (set! gQ4b98@gQ30ca@symbol-macro gQ30ca@symbol-macro) (set! gQ30cc@macro-transformer (lambda (gQ407d@x) (if (procedure? gQ407d@x) gQ407d@x (if (symbol? gQ407d@x) (let ((gQ407f@t gQ407d@x)) (if (memv gQ407f@t '(define-record-type)) gQ30ae@define-record-type-macro (if (memv gQ407f@t '(define-struct)) gQ30ac@define-struct-macro (if (memv gQ407f@t '(include)) gQ30a2@include-macro (if (memv gQ407f@t '(cond)) gQ309e@cond-macro (if (memv gQ407f@t '(let)) gQ3076@let-macro (if (memv gQ407f@t '(do)) gQ3096@do-macro (if (memv gQ407f@t '(or)) gQ309a@or-macro (if (memv gQ407f@t '(and)) gQ309c@and-macro (if (memv gQ407f@t '(let*)) gQ3098@let*-macro (if (memv gQ407f@t '(let-values)) gQ3078@let-values-macro (if (memv gQ407f@t '(let*-values)) gQ307a@let*-values-macro (if (memv gQ407f@t '(syntax-rules)) gQ30a6@syntax-rules-macro (if (memv gQ407f@t '(quasiquote)) gQ30a8@quasiquote-macro (if (memv gQ407f@t '(quasisyntax)) gQ30aa@quasisyntax-macro (if (memv gQ407f@t '(with-syntax)) gQ3072@with-syntax-macro (if (memv gQ407f@t '(when)) gQ305e@when-macro (if (memv gQ407f@t '(unless)) gQ3060@unless-macro (if (memv gQ407f@t '(case)) gQ3068@case-macro (if (memv gQ407f@t '(identifier-syntax)) gQ3094@identifier-syntax-macro (if (memv gQ407f@t '(time)) gQ308c@time-macro (if (memv gQ407f@t '(delay)) gQ308e@delay-macro (if (memv gQ407f@t '(assert)) gQ3090@assert-macro (if (memv gQ407f@t '(endianness)) gQ3092@endianness-macro (if (memv gQ407f@t '(guard)) gQ3088@guard-macro (if (memv gQ407f@t '(define-enumeration)) gQ308a@define-enumeration-macro (if (memv gQ407f@t '(trace-lambda)) gQ307c@trace-lambda-macro (if (memv gQ407f@t '(trace-define)) gQ307e@trace-define-macro (if (memv gQ407f@t '(trace-define-syntax)) gQ3080@trace-define-syntax-macro (if (memv gQ407f@t '(trace-let-syntax)) gQ3084@trace-let-syntax-macro (if (memv gQ407f@t '(trace-letrec-syntax)) gQ3086@trace-letrec-syntax-macro (if (memv gQ407f@t '(define-condition-type)) gQ30b0@define-condition-type-macro (if (memv gQ407f@t '(parameterize)) gQ30b4@parameterize-macro (if (memv gQ407f@t '(include-into)) gQ30a4@include-into-macro (if (memv gQ407f@t '(eol-style)) (lambda (gQ4081@x) (gQ30ca@symbol-macro gQ4081@x '(none lf cr crlf nel crnel ls))) (if (memv gQ407f@t '(error-handling-mode)) (lambda (gQ4083@x) (gQ30ca@symbol-macro gQ4083@x '(ignore raise replace))) (if (memv gQ407f@t '(buffer-mode)) (lambda (gQ4085@x) (gQ30ca@symbol-macro gQ4085@x '(none line block))) (if (memv gQ407f@t '(file-options)) gQ2e2e@file-options-macro (if (memv gQ407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) gQ30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" gQ407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" gQ407d@x))))) (set! gQ4b99@gQ30cc@macro-transformer gQ30cc@macro-transformer) (set! gQ30ce@local-macro-transformer (lambda (gQ4087@x) (car gQ4087@x))) (set! gQ4b9a@gQ30ce@local-macro-transformer gQ30ce@local-macro-transformer) (set! gQ30d0@do-macro-call (lambda (gQ4089@transformer gQ408a@expr) (let ((gQ408d@out (gQ4089@transformer (gQ2e9d@add-mark gQ2e97@anti-mark gQ408a@expr '#f)))) (begin (let gQ4091@f ((gQ408f@x gQ408d@out)) (if (not (gQ2e7f@stx? gQ408f@x)) (if (pair? gQ408f@x) (begin (gQ4091@f (car gQ408f@x)) (gQ4091@f (cdr gQ408f@x))) (if (vector? gQ408f@x) (vector-for-each gQ4091@f gQ408f@x) (if (symbol? gQ408f@x) (gQ319a@syntax-violation '#f '"raw symbol encountered in output of macro" gQ408a@expr gQ408f@x) (void)))) (void))) (gQ2e9d@add-mark (gQ2e95@gen-mark) gQ408d@out gQ408a@expr))))) (set! gQ4b9b@gQ30d0@do-macro-call gQ30d0@do-macro-call) (set! gQ30d2@chi-macro (lambda (gQ4093@p gQ4094@e) (gQ30d0@do-macro-call (gQ30cc@macro-transformer gQ4093@p) gQ4094@e))) (set! gQ4b9c@gQ30d2@chi-macro gQ30d2@chi-macro) (set! gQ30d4@chi-local-macro (lambda (gQ4097@p gQ4098@e) (gQ30d0@do-macro-call (gQ30ce@local-macro-transformer gQ4097@p) gQ4098@e))) (set! gQ4b9d@gQ30d4@chi-local-macro gQ30d4@chi-local-macro) (set! gQ30d6@chi-global-macro (lambda (gQ409b@p gQ409c@e) (let ((gQ409f@lib (car gQ409b@p)) (gQ40a0@loc (cdr gQ409b@p))) (begin (gQ2cd0@gQ2b1f@visit-library gQ409f@lib) (let ((gQ40a3@x (symbol-value gQ40a0@loc))) (let ((gQ40a5@transformer (if (procedure? gQ40a3@x) gQ40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" gQ40a3@x)))) (gQ30d0@do-macro-call gQ40a5@transformer gQ409c@e))))))) (set! gQ4b9e@gQ30d6@chi-global-macro gQ30d6@chi-global-macro) (set! gQ30d8@chi-expr* (lambda (gQ40a7@e* gQ40a8@r gQ40a9@mr) (if (null? gQ40a7@e*) '() (let ((gQ40ad@e (gQ30dc@chi-expr (car gQ40a7@e*) gQ40a8@r gQ40a9@mr))) (cons gQ40ad@e (gQ30d8@chi-expr* (cdr gQ40a7@e*) gQ40a8@r gQ40a9@mr)))))) (set! gQ4b9f@gQ30d8@chi-expr* gQ30d8@chi-expr*) (set! gQ30da@chi-application (lambda (gQ40af@e gQ40b0@r gQ40b1@mr) (let ((gQ40b5@t gQ40af@e)) (let ((gQ40b7@ls/false (gQ30ba@syntax-dispatch gQ40b5@t '(any . each-any)))) (if gQ40b7@ls/false (apply (lambda (gQ40b9@rator gQ40ba@rands) (let ((gQ40bd@rator (gQ30dc@chi-expr gQ40b9@rator gQ40b0@r gQ40b1@mr))) (cons gQ40bd@rator (gQ30d8@chi-expr* gQ40ba@rands gQ40b0@r gQ40b1@mr)))) gQ40b7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ40b5@t)))))) (set! gQ4ba0@gQ30da@chi-application gQ30da@chi-application) (set! gQ30dc@chi-expr (lambda (gQ40bf@e gQ40c0@r gQ40c1@mr) (call-with-values (lambda () (gQ2ed5@syntax-type gQ40bf@e gQ40c0@r)) (lambda (gQ40cb@gQ40c6 gQ40cc@gQ40c8 gQ40cd@gQ40ca) (let ((gQ40d1@kwd gQ40cd@gQ40ca) (gQ40d2@value gQ40cc@gQ40c8) (gQ40d3@type gQ40cb@gQ40c6)) (let ((gQ40d7@t gQ40d3@type)) (if (memv gQ40d7@t '(core-macro)) (let ((gQ40d9@transformer (gQ30c8@core-macro-transformer gQ40d2@value))) (gQ40d9@transformer gQ40bf@e gQ40c0@r gQ40c1@mr)) (if (memv gQ40d7@t '(global)) (let ((gQ40db@lib (car gQ40d2@value))) (let ((gQ40dd@loc (cdr gQ40d2@value))) (begin ((gQ3122@inv-collector) gQ40db@lib) gQ40dd@loc))) (if (memv gQ40d7@t '(core-prim)) (let ((gQ40df@name gQ40d2@value)) (list 'primitive gQ40df@name)) (if (memv gQ40d7@t '(call)) (gQ30da@chi-application gQ40bf@e gQ40c0@r gQ40c1@mr) (if (memv gQ40d7@t '(lexical)) (let ((gQ40e1@lex (gQ3044@lexical-var gQ40d2@value))) gQ40e1@lex) (if (memv gQ40d7@t '(global-macro global-macro!)) (gQ30dc@chi-expr (gQ30d6@chi-global-macro gQ40d2@value gQ40bf@e) gQ40c0@r gQ40c1@mr) (if (memv gQ40d7@t '(local-macro local-macro!)) (gQ30dc@chi-expr (gQ30d4@chi-local-macro gQ40d2@value gQ40bf@e) gQ40c0@r gQ40c1@mr) (if (memv gQ40d7@t '(macro macro!)) (gQ30dc@chi-expr (gQ30d2@chi-macro gQ40d2@value gQ40bf@e) gQ40c0@r gQ40c1@mr) (if (memv gQ40d7@t '(constant)) (let ((gQ40e3@datum gQ40d2@value)) (list 'quote gQ40e3@datum)) (if (memv gQ40d7@t '(set!)) (gQ30de@chi-set! gQ40bf@e gQ40c0@r gQ40c1@mr) (if (memv gQ40d7@t '(begin)) (let ((gQ40e5@t gQ40bf@e)) (let ((gQ40e7@ls/false (gQ30ba@syntax-dispatch gQ40e5@t '(_ any . each-any)))) (if gQ40e7@ls/false (apply (lambda (gQ40e9@x gQ40ea@x*) (gQ2e18@gQ2d78@build-sequence '#f (gQ30d8@chi-expr* (cons gQ40e9@x gQ40ea@x*) gQ40c0@r gQ40c1@mr))) gQ40e7@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ40e5@t)))) (if (memv gQ40d7@t '(let-syntax letrec-syntax)) (let ((gQ40ed@t gQ40bf@e)) (let ((gQ40ef@ls/false (gQ30ba@syntax-dispatch gQ40ed@t '(_ #(each (any any)) any . each-any)))) (if (and gQ40ef@ls/false (apply (lambda (gQ40f1@xlhs* gQ40f2@xrhs* gQ40f3@xbody gQ40f4@xbody*) (if (not (gQ2ebb@valid-bound-ids? gQ40f1@xlhs*)) (gQ319a@syntax-violation '#f '"invalid identifiers" gQ40bf@e) (void))) gQ40ef@ls/false)) (apply (lambda (gQ40f9@xlhs* gQ40fa@xrhs* gQ40fb@xbody gQ40fc@xbody*) (let ((gQ4101@xlab* (map gQ2e3f@gen-label gQ40f9@xlhs*))) (let ((gQ4103@xrib (gQ2e73@make-full-rib gQ40f9@xlhs* gQ4101@xlab*))) (let ((gQ4105@xb* (map (lambda (gQ4107@x) (gQ2eeb@make-eval-transformer (gQ3114@expand-transformer (if (eq? gQ40d3@type 'let-syntax) gQ4107@x (gQ2e9f@add-subst gQ4103@xrib gQ4107@x)) gQ40c1@mr))) gQ40fa@xrhs*))) (gQ2e18@gQ2d78@build-sequence '#f (gQ30d8@chi-expr* (map (lambda (gQ4109@x) (gQ2e9f@add-subst gQ4103@xrib gQ4109@x)) (cons gQ40fb@xbody gQ40fc@xbody*)) (append (map cons gQ4101@xlab* gQ4105@xb*) gQ40c0@r) (append (map cons gQ4101@xlab* gQ4105@xb*) gQ40c1@mr))))))) gQ40ef@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ40ed@t)))) (if (memv gQ40d7@t '(displaced-lexical)) (gQ319a@syntax-violation '#f '"identifier out of context" gQ40bf@e) (if (memv gQ40d7@t '(syntax)) (gQ319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" gQ40bf@e) (if (memv gQ40d7@t '(define define-syntax module import library)) (gQ319a@syntax-violation '#f (string-append (let ((gQ410b@t gQ40d3@type)) (if (memv gQ410b@t '(define)) '"a definition" (if (memv gQ410b@t '(define-syntax)) '"a define-syntax" (if (memv gQ410b@t '(module)) '"a module definition" (if (memv gQ410b@t '(library)) '"a library definition" (if (memv gQ410b@t '(import)) '"an import declaration" (if (memv gQ410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") gQ40bf@e) (if (memv gQ40d7@t '(mutable)) (gQ319a@syntax-violation '#f '"attempt to reference an unexportable variable" gQ40bf@e) (gQ319a@syntax-violation '#f '"invalid expression" gQ40bf@e))))))))))))))))))))))) (set! gQ4ba1@gQ30dc@chi-expr gQ30dc@chi-expr) (set! gQ30de@chi-set! (lambda (gQ410d@e gQ410e@r gQ410f@mr) (let ((gQ4113@t gQ410d@e)) (let ((gQ4115@ls/false (gQ30ba@syntax-dispatch gQ4113@t '(_ any any)))) (if (and gQ4115@ls/false (apply (lambda (gQ4117@x gQ4118@v) (gQ2eb3@id? gQ4117@x)) gQ4115@ls/false)) (apply (lambda (gQ411b@x gQ411c@v) (call-with-values (lambda () (gQ2ed5@syntax-type gQ411b@x gQ410e@r)) (lambda (gQ4125@gQ4120 gQ4126@gQ4122 gQ4127@gQ4124) (let ((gQ412b@kwd gQ4127@gQ4124) (gQ412c@value gQ4126@gQ4122) (gQ412d@type gQ4125@gQ4120)) (let ((gQ4131@t gQ412d@type)) (if (memv gQ4131@t '(lexical)) (begin (gQ3048@set-lexical-mutable! gQ412c@value '#t) (list 'set! (gQ3044@lexical-var gQ412c@value) (gQ30dc@chi-expr gQ411c@v gQ410e@r gQ410f@mr))) (if (memv gQ4131@t '(core-prim)) (gQ319a@syntax-violation '#f '"cannot modify imported core primitive" gQ410d@e) (if (memv gQ4131@t '(global)) (gQ319a@syntax-violation '#f '"attempt to modify imported binding" gQ410d@e) (if (memv gQ4131@t '(global-macro!)) (gQ30dc@chi-expr (gQ30d6@chi-global-macro gQ412c@value gQ410d@e) gQ410e@r gQ410f@mr) (if (memv gQ4131@t '(local-macro!)) (gQ30dc@chi-expr (gQ30d4@chi-local-macro gQ412c@value gQ410d@e) gQ410e@r gQ410f@mr) (if (memv gQ4131@t '(mutable)) (gQ319a@syntax-violation '#f '"attempt to assign to an unexportable variable" gQ410d@e) (gQ319a@syntax-violation '#f '"invalid syntax" gQ410d@e)))))))))))) gQ4115@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4113@t)))))) (set! gQ4ba2@gQ30de@chi-set! gQ30de@chi-set!) (set! gQ30e0@verify-formals (lambda (gQ4133@fmls gQ4134@stx) (let ((gQ4137@t gQ4133@fmls)) (let ((gQ4139@ls/false (gQ30ba@syntax-dispatch gQ4137@t 'each-any))) (if gQ4139@ls/false (apply (lambda (gQ413b@x*) (if (not (gQ2ebb@valid-bound-ids? gQ413b@x*)) (gQ3074@invalid-fmls-error gQ4134@stx gQ4133@fmls) (void))) gQ4139@ls/false) (let ((gQ413d@t gQ4137@t)) (let ((gQ413f@ls/false (gQ30ba@syntax-dispatch gQ413d@t '#(each+ any () any)))) (if gQ413f@ls/false (apply (lambda (gQ4141@x* gQ4142@x) (if (not (gQ2ebb@valid-bound-ids? (cons gQ4142@x gQ4141@x*))) (gQ3074@invalid-fmls-error gQ4134@stx gQ4133@fmls) (void))) gQ413f@ls/false) (let ((gQ4145@t gQ413d@t)) (let ((gQ4147@ls/false (gQ30ba@syntax-dispatch gQ4145@t '_))) (if gQ4147@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid syntax" gQ4134@stx)) gQ4147@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4145@t)))))))))))) (set! gQ4ba3@gQ30e0@verify-formals gQ30e0@verify-formals) (set! gQ30e2@chi-lambda-clause (lambda (gQ4149@stx gQ414a@fmls gQ414b@body* gQ414c@r gQ414d@mr) (let ((gQ4153@t gQ414a@fmls)) (let ((gQ4155@ls/false (gQ30ba@syntax-dispatch gQ4153@t 'each-any))) (if gQ4155@ls/false (apply (lambda (gQ4157@x*) (begin (gQ30e0@verify-formals gQ414a@fmls gQ4149@stx) (let ((gQ4159@lex* (map gQ2e3b@gen-lexical gQ4157@x*)) (gQ415a@lab* (map gQ2e3f@gen-label gQ4157@x*))) (values gQ4159@lex* (gQ30f2@chi-internal (gQ2e9f@add-subst (gQ2e73@make-full-rib gQ4157@x* gQ415a@lab*) gQ414b@body*) (gQ304c@add-lexicals gQ415a@lab* gQ4159@lex* gQ414c@r) gQ414d@mr))))) gQ4155@ls/false) (let ((gQ415d@t gQ4153@t)) (let ((gQ415f@ls/false (gQ30ba@syntax-dispatch gQ415d@t '#(each+ any () any)))) (if gQ415f@ls/false (apply (lambda (gQ4161@x* gQ4162@x) (begin (gQ30e0@verify-formals gQ414a@fmls gQ4149@stx) (let ((gQ4165@lex* (map gQ2e3b@gen-lexical gQ4161@x*)) (gQ4166@lab* (map gQ2e3f@gen-label gQ4161@x*)) (gQ4167@lex (gQ2e3b@gen-lexical gQ4162@x)) (gQ4168@lab (gQ2e3f@gen-label gQ4162@x))) (values (append gQ4165@lex* gQ4167@lex) (gQ30f2@chi-internal (gQ2e9f@add-subst (gQ2e73@make-full-rib (cons gQ4162@x gQ4161@x*) (cons gQ4168@lab gQ4166@lab*)) gQ414b@body*) (gQ304c@add-lexicals (cons gQ4168@lab gQ4166@lab*) (cons gQ4167@lex gQ4165@lex*) gQ414c@r) gQ414d@mr))))) gQ415f@ls/false) (let ((gQ416d@t gQ415d@t)) (let ((gQ416f@ls/false (gQ30ba@syntax-dispatch gQ416d@t '_))) (if gQ416f@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid syntax" gQ414a@fmls)) gQ416f@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ416d@t)))))))))))) (set! gQ4ba4@gQ30e2@chi-lambda-clause gQ30e2@chi-lambda-clause) (set! gQ30e4@chi-lambda-clause* (lambda (gQ4171@stx gQ4172@fmls* gQ4173@body** gQ4174@r gQ4175@mr) (if (null? gQ4172@fmls*) (values '() '()) (call-with-values (lambda () (gQ30e2@chi-lambda-clause gQ4171@stx (car gQ4172@fmls*) (car gQ4173@body**) gQ4174@r gQ4175@mr)) (lambda (gQ417f@gQ417c gQ4180@gQ417e) (let ((gQ4183@b gQ4180@gQ417e) (gQ4184@a gQ417f@gQ417c)) (call-with-values (lambda () (gQ30e4@chi-lambda-clause* gQ4171@stx (cdr gQ4172@fmls*) (cdr gQ4173@body**) gQ4174@r gQ4175@mr)) (lambda (gQ418b@gQ4188 gQ418c@gQ418a) (let ((gQ418f@b* gQ418c@gQ418a) (gQ4190@a* gQ418b@gQ4188)) (values (cons gQ4184@a gQ4190@a*) (cons gQ4183@b gQ418f@b*))))))))))) (set! gQ4ba5@gQ30e4@chi-lambda-clause* gQ30e4@chi-lambda-clause*) (set! gQ30e6@chi-defun (lambda (gQ4193@x gQ4194@r gQ4195@mr) (let ((gQ4199@fmls (car gQ4193@x)) (gQ419a@body* (cdr gQ4193@x))) (call-with-values (lambda () (gQ30e2@chi-lambda-clause gQ4199@fmls gQ4199@fmls gQ419a@body* gQ4194@r gQ4195@mr)) (lambda (gQ41a1@gQ419e gQ41a2@gQ41a0) (let ((gQ41a5@body gQ41a2@gQ41a0) (gQ41a6@fmls gQ41a1@gQ419e)) (gQ2e16@gQ2d48@build-lambda '#f gQ41a6@fmls gQ41a5@body))))))) (set! gQ4ba6@gQ30e6@chi-defun gQ30e6@chi-defun) (set! gQ30e8@chi-rhs (lambda (gQ41a9@rhs gQ41aa@r gQ41ab@mr) (let ((gQ41af@t (car gQ41a9@rhs))) (if (memv gQ41af@t '(defun)) (gQ30e6@chi-defun (cdr gQ41a9@rhs) gQ41aa@r gQ41ab@mr) (if (memv gQ41af@t '(expr)) (let ((gQ41b1@expr (cdr gQ41a9@rhs))) (gQ30dc@chi-expr gQ41b1@expr gQ41aa@r gQ41ab@mr)) (if (memv gQ41af@t '(top-expr)) (let ((gQ41b3@expr (cdr gQ41a9@rhs))) (gQ2e18@gQ2d78@build-sequence '#f (list (gQ30dc@chi-expr gQ41b3@expr gQ41aa@r gQ41ab@mr) (gQ2e19@gQ2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" gQ41a9@rhs))))))) (set! gQ4ba7@gQ30e8@chi-rhs gQ30e8@chi-rhs) (set! gQ30ea@expand-interaction-rhs*/init* (lambda (gQ41b5@lhs* gQ41b6@rhs* gQ41b7@init* gQ41b8@r gQ41b9@mr) (let gQ41c3@f ((gQ41bf@lhs* gQ41b5@lhs*) (gQ41c0@rhs* gQ41b6@rhs*)) (if (null? gQ41bf@lhs*) (map (lambda (gQ41c5@x) (gQ30dc@chi-expr gQ41c5@x gQ41b8@r gQ41b9@mr)) gQ41b7@init*) (let ((gQ41c7@lhs (car gQ41bf@lhs*)) (gQ41c8@rhs (car gQ41c0@rhs*))) (let ((gQ41cb@t (car gQ41c8@rhs))) (if (memv gQ41cb@t '(defun)) (let ((gQ41cd@rhs (gQ30e6@chi-defun (cdr gQ41c8@rhs) gQ41b8@r gQ41b9@mr))) (cons (list 'set! gQ41c7@lhs gQ41cd@rhs) (gQ41c3@f (cdr gQ41bf@lhs*) (cdr gQ41c0@rhs*)))) (if (memv gQ41cb@t '(expr)) (let ((gQ41cf@rhs (gQ30dc@chi-expr (cdr gQ41c8@rhs) gQ41b8@r gQ41b9@mr))) (cons (list 'set! gQ41c7@lhs gQ41cf@rhs) (gQ41c3@f (cdr gQ41bf@lhs*) (cdr gQ41c0@rhs*)))) (if (memv gQ41cb@t '(top-expr)) (let ((gQ41d1@e (gQ30dc@chi-expr (cdr gQ41c8@rhs) gQ41b8@r gQ41b9@mr))) (cons gQ41d1@e (gQ41c3@f (cdr gQ41bf@lhs*) (cdr gQ41c0@rhs*)))) (error 'expand-interaction '"invallid" gQ41c8@rhs)))))))))) (set! gQ4ba8@gQ30ea@expand-interaction-rhs*/init* gQ30ea@expand-interaction-rhs*/init*) (set! gQ30ec@chi-rhs* (lambda (gQ41d3@rhs* gQ41d4@r gQ41d5@mr) (let gQ41db@f ((gQ41d9@ls gQ41d3@rhs*)) (if (null? gQ41d9@ls) '() (let ((gQ41dd@a (gQ30e8@chi-rhs (car gQ41d9@ls) gQ41d4@r gQ41d5@mr))) (cons gQ41dd@a (gQ41db@f (cdr gQ41d9@ls)))))))) (set! gQ4ba9@gQ30ec@chi-rhs* gQ30ec@chi-rhs*) (set! gQ30ee@find-bound=? (lambda (gQ41df@x gQ41e0@lhs* gQ41e1@rhs*) (if (null? gQ41e0@lhs*) '#f (if (gQ2eb7@bound-id=? gQ41df@x (car gQ41e0@lhs*)) (car gQ41e1@rhs*) (gQ30ee@find-bound=? gQ41df@x (cdr gQ41e0@lhs*) (cdr gQ41e1@rhs*)))))) (set! gQ4baa@gQ30ee@find-bound=? gQ30ee@find-bound=?) (set! gQ30f0@find-dups (lambda (gQ41e5@ls) (let gQ41eb@f ((gQ41e7@ls gQ41e5@ls) (gQ41e8@dups '())) (if (null? gQ41e7@ls) gQ41e8@dups (let ((gQ41ed@t (gQ30ee@find-bound=? (car gQ41e7@ls) (cdr gQ41e7@ls) (cdr gQ41e7@ls)))) (if gQ41ed@t ((lambda (gQ41ef@x) (gQ41eb@f (cdr gQ41e7@ls) (cons (list (car gQ41e7@ls) gQ41ef@x) gQ41e8@dups))) gQ41ed@t) (gQ41eb@f (cdr gQ41e7@ls) gQ41e8@dups))))))) (set! gQ4bab@gQ30f0@find-dups gQ30f0@find-dups) (set! gQ30f2@chi-internal (lambda (gQ41f1@e* gQ41f2@r gQ41f3@mr) (let ((gQ41f7@rib (gQ2e67@make-empty-rib))) (call-with-values (lambda () (gQ3112@chi-body* (map (lambda (gQ4209@x) (gQ2e9f@add-subst gQ41f7@rib gQ4209@x)) (gQ2eb1@syntax->list gQ41f1@e*)) gQ41f2@r gQ41f3@mr '() '() '() '() '() gQ41f7@rib '#f)) (lambda (gQ420b@gQ41fa gQ420c@gQ41fc gQ420d@gQ41fe gQ420e@gQ4200 gQ420f@gQ4202 gQ4210@gQ4204 gQ4211@gQ4206 gQ4212@gQ4208) (let ((gQ421b@_exp* gQ4212@gQ4208) (gQ421c@kwd* gQ4211@gQ4206) (gQ421d@mod** gQ4210@gQ4204) (gQ421e@rhs* gQ420f@gQ4202) (gQ421f@lex* gQ420e@gQ4200) (gQ4220@mr gQ420d@gQ41fe) (gQ4221@r gQ420c@gQ41fc) (gQ4222@e* gQ420b@gQ41fa)) (begin (if (null? gQ4222@e*) (gQ319a@syntax-violation '#f '"no expression in body" gQ4222@e*) (void)) (let ((gQ422b@init* (gQ30d8@chi-expr* (append (apply append (reverse gQ421d@mod**)) gQ4222@e*) gQ4221@r gQ4220@mr))) (let ((gQ422d@rhs* (gQ30ec@chi-rhs* gQ421e@rhs* gQ4221@r gQ4220@mr))) (gQ2e1d@gQ2d82@build-letrec* '#f (reverse gQ421f@lex*) (reverse gQ422d@rhs*) (gQ2e18@gQ2d78@build-sequence '#f gQ422b@init*))))))))))) (set! gQ4bac@gQ30f2@chi-internal gQ30f2@chi-internal) (set! gQ30f4@parse-module (lambda (gQ422f@e) (let ((gQ4231@t gQ422f@e)) (let ((gQ4233@ls/false (gQ30ba@syntax-dispatch gQ4231@t '(_ each-any . each-any)))) (if gQ4233@ls/false (apply (lambda (gQ4235@export* gQ4236@b*) (begin (if (not (for-all gQ2eb3@id? gQ4235@export*)) (gQ319a@syntax-violation '#f '"module exports must be identifiers" gQ422f@e) (void)) (values '#f (list->vector gQ4235@export*) gQ4236@b*))) gQ4233@ls/false) (let ((gQ4239@t gQ4231@t)) (let ((gQ423b@ls/false (gQ30ba@syntax-dispatch gQ4239@t '(_ any each-any . each-any)))) (if gQ423b@ls/false (apply (lambda (gQ423d@name gQ423e@export* gQ423f@b*) (begin (if (not (gQ2eb3@id? gQ423d@name)) (gQ319a@syntax-violation '#f '"module name must be an identifier" gQ422f@e) (void)) (if (not (for-all gQ2eb3@id? gQ423e@export*)) (gQ319a@syntax-violation '#f '"module exports must be identifiers" gQ422f@e) (void)) (values gQ423d@name (list->vector gQ423e@export*) gQ423f@b*))) gQ423b@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4239@t))))))))) (set! gQ4bad@gQ30f4@parse-module gQ30f4@parse-module) (set! gQ30fe@module-interface? (lambda (gQ4243@x) (and (simple-struct? gQ4243@x) (eq? (simple-struct-name gQ4243@x) 'module-interface)))) (set! gQ4bae@gQ30fe@module-interface? gQ30fe@module-interface?) (set! gQ3100@module-interface-first-mark (lambda (gQ4245@x) (simple-struct-ref gQ4245@x '0))) (set! gQ4baf@gQ3100@module-interface-first-mark gQ3100@module-interface-first-mark) (set! gQ3102@set-module-interface-first-mark! (lambda (gQ4247@x gQ4248@val) (simple-struct-set! gQ4247@x '0 gQ4248@val))) (set! gQ4bb0@gQ3102@set-module-interface-first-mark! gQ3102@set-module-interface-first-mark!) (set! gQ3104@module-interface-exp-id-vec (lambda (gQ424b@x) (simple-struct-ref gQ424b@x '1))) (set! gQ4bb1@gQ3104@module-interface-exp-id-vec gQ3104@module-interface-exp-id-vec) (set! gQ3106@set-module-interface-exp-id-vec! (lambda (gQ424d@x gQ424e@val) (simple-struct-set! gQ424d@x '1 gQ424e@val))) (set! gQ4bb2@gQ3106@set-module-interface-exp-id-vec! gQ3106@set-module-interface-exp-id-vec!) (set! gQ3108@module-interface-exp-lab-vec (lambda (gQ4251@x) (simple-struct-ref gQ4251@x '2))) (set! gQ4bb3@gQ3108@module-interface-exp-lab-vec gQ3108@module-interface-exp-lab-vec) (set! gQ310a@set-module-interface-exp-lab-vec! (lambda (gQ4253@x gQ4254@val) (simple-struct-set! gQ4253@x '2 gQ4254@val))) (set! gQ4bb4@gQ310a@set-module-interface-exp-lab-vec! gQ310a@set-module-interface-exp-lab-vec!) (set! gQ310c@dummy '3) (set! gQ4bb5@gQ310c@dummy gQ310c@dummy) (set! gQ310e@module-interface-exp-id* (lambda (gQ4257@iface gQ4258@id) (letrec* ((gQ425c@diff-marks (lambda (gQ4263@ls gQ4264@x) (begin (if (null? gQ4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((gQ4267@a (car gQ4263@ls))) (if (eq? gQ4267@a gQ4264@x) '() (cons gQ4267@a (gQ425c@diff-marks (cdr gQ4263@ls) gQ4264@x)))))))) (let ((gQ425d@diff (gQ425c@diff-marks (gQ2e85@stx-mark* gQ4258@id) (gQ3100@module-interface-first-mark gQ4257@iface))) (gQ425e@id-vec (gQ3104@module-interface-exp-id-vec gQ4257@iface))) (if (null? gQ425d@diff) gQ425e@id-vec (vector-map (lambda (gQ4261@x) (make-simple-struct 'stx '5 (list (gQ2e81@stx-expr gQ4261@x) (append gQ425d@diff (gQ2e85@stx-mark* gQ4261@x)) '() '()))) gQ425e@id-vec)))))) (set! gQ4bb6@gQ310e@module-interface-exp-id* gQ310e@module-interface-exp-id*) (set! gQ3110@chi-internal-module (lambda (gQ4269@e gQ426a@r gQ426b@mr gQ426c@lex* gQ426d@rhs* gQ426e@mod** gQ426f@kwd*) (call-with-values (lambda () (gQ30f4@parse-module gQ4269@e)) (lambda (gQ427d@gQ4278 gQ427e@gQ427a gQ427f@gQ427c) (let ((gQ4283@e* gQ427f@gQ427c) (gQ4284@exp-id* gQ427e@gQ427a) (gQ4285@name gQ427d@gQ4278)) (let ((gQ4289@rib (gQ2e67@make-empty-rib))) (let ((gQ428b@e* (map (lambda (gQ428d@x) (gQ2e9f@add-subst gQ4289@rib gQ428d@x)) (gQ2eb1@syntax->list gQ4283@e*)))) (call-with-values (lambda () (gQ3112@chi-body* gQ428b@e* gQ426a@r gQ426b@mr gQ426c@lex* gQ426d@rhs* gQ426e@mod** gQ426f@kwd* '() gQ4289@rib '#f)) (lambda (gQ429f@gQ4290 gQ42a0@gQ4292 gQ42a1@gQ4294 gQ42a2@gQ4296 gQ42a3@gQ4298 gQ42a4@gQ429a gQ42a5@gQ429c gQ42a6@gQ429e) (let ((gQ42af@_exp* gQ42a6@gQ429e) (gQ42b0@kwd* gQ42a5@gQ429c) (gQ42b1@mod** gQ42a4@gQ429a) (gQ42b2@rhs* gQ42a3@gQ4298) (gQ42b3@lex* gQ42a2@gQ4296) (gQ42b4@mr gQ42a1@gQ4294) (gQ42b5@r gQ42a0@gQ4292) (gQ42b6@e* gQ429f@gQ4290)) (let ((gQ42bf@exp-lab* (vector-map (lambda (gQ42c3@x) (or (gQ2ec9@id->label (make-simple-struct 'stx '5 (list (gQ2eb5@id->sym gQ42c3@x) (gQ2e85@stx-mark* gQ42c3@x) (list gQ4289@rib) '()))) (gQ319a@syntax-violation '#f '"cannot find module export" gQ42c3@x))) gQ4284@exp-id*)) (gQ42c0@mod** (cons gQ42b6@e* gQ42b1@mod**))) (if (not gQ4285@name) (values gQ42b3@lex* gQ42b2@rhs* gQ4284@exp-id* gQ42bf@exp-lab* gQ42b5@r gQ42b4@mr gQ42c0@mod** gQ42b0@kwd*) (let ((gQ42c5@lab (gQ2e3f@gen-label 'module)) (gQ42c6@iface (make-simple-struct 'module-interface '4 (list (car (gQ2e85@stx-mark* gQ4285@name)) (vector-map (lambda (gQ42c9@x) (make-simple-struct 'stx '5 (list (gQ2e81@stx-expr gQ42c9@x) (gQ2e85@stx-mark* gQ42c9@x) '() '()))) gQ4284@exp-id*) gQ42bf@exp-lab*)))) (values gQ42b3@lex* gQ42b2@rhs* (vector gQ4285@name) (vector gQ42c5@lab) (cons (cons gQ42c5@lab (cons '$module gQ42c6@iface)) gQ42b5@r) (cons (cons gQ42c5@lab (cons '$module gQ42c6@iface)) gQ42b4@mr) gQ42c0@mod** gQ42b0@kwd*)))))))))))))) (set! gQ4bb7@gQ3110@chi-internal-module gQ3110@chi-internal-module) (set! gQ3112@chi-body* (lambda (gQ42cb@e* gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42d1@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?) (if (null? gQ42cb@e*) (values gQ42cb@e* gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42d1@kwd* gQ42d2@exp*) (let ((gQ42df@e (car gQ42cb@e*))) (call-with-values (lambda () (gQ2ed5@syntax-type gQ42df@e gQ42cc@r)) (lambda (gQ42e7@gQ42e2 gQ42e8@gQ42e4 gQ42e9@gQ42e6) (let ((gQ42ed@kwd gQ42e9@gQ42e6) (gQ42ee@value gQ42e8@gQ42e4) (gQ42ef@type gQ42e7@gQ42e2)) (let ((gQ42f3@kwd* (if (gQ2eb3@id? gQ42ed@kwd) (cons gQ42ed@kwd gQ42d1@kwd*) gQ42d1@kwd*))) (let ((gQ42f5@t gQ42ef@type)) (if (memv gQ42f5@t '(define)) (call-with-values (lambda () (gQ303c@parse-define gQ42df@e)) (lambda (gQ42fb@gQ42f8 gQ42fc@gQ42fa) (let ((gQ42ff@rhs gQ42fc@gQ42fa) (gQ4300@id gQ42fb@gQ42f8)) (begin (if (gQ2ebf@bound-id-member? gQ4300@id gQ42f3@kwd*) (gQ319a@syntax-violation '#f '"cannot redefine keyword" gQ42df@e) (void)) (call-with-values (lambda () (gQ2e43@gen-define-label+loc gQ4300@id gQ42d3@rib)) (lambda (gQ4307@gQ4304 gQ4308@gQ4306) (let ((gQ430b@lex gQ4308@gQ4306) (gQ430c@lab gQ4307@gQ4304)) (begin (gQ2e69@extend-rib! gQ42d3@rib gQ4300@id gQ430c@lab) (gQ3112@chi-body* (cdr gQ42cb@e*) (gQ304a@add-lexical gQ430c@lab gQ430b@lex gQ42cc@r) gQ42cd@mr (cons gQ430b@lex gQ42ce@lex*) (cons gQ42ff@rhs gQ42cf@rhs*) gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?))))))))) (if (memv gQ42f5@t '(define-syntax)) (call-with-values (lambda () (gQ303e@parse-define-syntax gQ42df@e)) (lambda (gQ4313@gQ4310 gQ4314@gQ4312) (let ((gQ4317@rhs gQ4314@gQ4312) (gQ4318@id gQ4313@gQ4310)) (begin (if (gQ2ebf@bound-id-member? gQ4318@id gQ42f3@kwd*) (gQ319a@syntax-violation '#f '"cannot redefine keyword" gQ42df@e) (void)) (let ((gQ431b@lab (gQ2e45@gen-define-label gQ4318@id gQ42d3@rib)) (gQ431c@expanded-rhs (gQ3114@expand-transformer gQ4317@rhs gQ42cd@mr))) (begin (gQ2e69@extend-rib! gQ42d3@rib gQ4318@id gQ431b@lab) (let ((gQ431f@b (gQ2eeb@make-eval-transformer gQ431c@expanded-rhs))) (gQ3112@chi-body* (cdr gQ42cb@e*) (cons (cons gQ431b@lab gQ431f@b) gQ42cc@r) (cons (cons gQ431b@lab gQ431f@b) gQ42cd@mr) gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?)))))))) (if (memv gQ42f5@t '(let-syntax letrec-syntax)) (let ((gQ4321@t gQ42df@e)) (let ((gQ4323@ls/false (gQ30ba@syntax-dispatch gQ4321@t '(_ #(each (any any)) . each-any)))) (if (and gQ4323@ls/false (apply (lambda (gQ4325@xlhs* gQ4326@xrhs* gQ4327@xbody*) (if (not (gQ2ebb@valid-bound-ids? gQ4325@xlhs*)) (gQ319a@syntax-violation '#f '"invalid identifiers" gQ42df@e) (void))) gQ4323@ls/false)) (apply (lambda (gQ432b@xlhs* gQ432c@xrhs* gQ432d@xbody*) (let ((gQ4331@xlab* (map gQ2e3f@gen-label gQ432b@xlhs*))) (let ((gQ4333@xrib (gQ2e73@make-full-rib gQ432b@xlhs* gQ4331@xlab*))) (let ((gQ4335@xb* (map (lambda (gQ4337@x) (gQ2eeb@make-eval-transformer (gQ3114@expand-transformer (if (eq? gQ42ef@type 'let-syntax) gQ4337@x (gQ2e9f@add-subst gQ4333@xrib gQ4337@x)) gQ42cd@mr))) gQ432c@xrhs*))) (gQ3112@chi-body* (append (map (lambda (gQ4339@x) (gQ2e9f@add-subst gQ4333@xrib gQ4339@x)) gQ432d@xbody*) (cdr gQ42cb@e*)) (append (map cons gQ4331@xlab* gQ4335@xb*) gQ42cc@r) (append (map cons gQ4331@xlab* gQ4335@xb*) gQ42cd@mr) gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?))))) gQ4323@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4321@t)))) (if (memv gQ42f5@t '(begin)) (let ((gQ433b@t gQ42df@e)) (let ((gQ433d@ls/false (gQ30ba@syntax-dispatch gQ433b@t '(_ . each-any)))) (if gQ433d@ls/false (apply (lambda (gQ433f@x*) (gQ3112@chi-body* (append gQ433f@x* (cdr gQ42cb@e*)) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?)) gQ433d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ433b@t)))) (if (memv gQ42f5@t '(global-macro global-macro!)) (gQ3112@chi-body* (cons (gQ2e9f@add-subst gQ42d3@rib (gQ30d6@chi-global-macro gQ42ee@value gQ42df@e)) (cdr gQ42cb@e*)) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?) (if (memv gQ42f5@t '(local-macro local-macro!)) (gQ3112@chi-body* (cons (gQ2e9f@add-subst gQ42d3@rib (gQ30d4@chi-local-macro gQ42ee@value gQ42df@e)) (cdr gQ42cb@e*)) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?) (if (memv gQ42f5@t '(macro macro!)) (gQ3112@chi-body* (cons (gQ2e9f@add-subst gQ42d3@rib (gQ30d2@chi-macro gQ42ee@value gQ42df@e)) (cdr gQ42cb@e*)) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?) (if (memv gQ42f5@t '(module)) (call-with-values (lambda () (gQ3110@chi-internal-module gQ42df@e gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd*)) (lambda (gQ4351@gQ4342 gQ4352@gQ4344 gQ4353@gQ4346 gQ4354@gQ4348 gQ4355@gQ434a gQ4356@gQ434c gQ4357@gQ434e gQ4358@gQ4350) (let ((gQ4361@kwd* gQ4358@gQ4350) (gQ4362@mod** gQ4357@gQ434e) (gQ4363@mr gQ4356@gQ434c) (gQ4364@r gQ4355@gQ434a) (gQ4365@m-exp-lab* gQ4354@gQ4348) (gQ4366@m-exp-id* gQ4353@gQ4346) (gQ4367@rhs* gQ4352@gQ4344) (gQ4368@lex* gQ4351@gQ4342)) (begin (vector-for-each (lambda (gQ4371@id gQ4372@lab) (gQ2e69@extend-rib! gQ42d3@rib gQ4371@id gQ4372@lab)) gQ4366@m-exp-id* gQ4365@m-exp-lab*) (gQ3112@chi-body* (cdr gQ42cb@e*) gQ4364@r gQ4363@mr gQ4368@lex* gQ4367@rhs* gQ4362@mod** gQ4361@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?))))) (if (memv gQ42f5@t '(library)) (begin (gQ317c@library-expander (gQ2ec7@stx->datum gQ42df@e)) (gQ3112@chi-body* (cdr gQ42cb@e*) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?)) (if (memv gQ42f5@t '(export)) (let ((gQ4375@t gQ42df@e)) (let ((gQ4377@ls/false (gQ30ba@syntax-dispatch gQ4375@t '(_ . each-any)))) (if gQ4377@ls/false (apply (lambda (gQ4379@exp-decl*) (gQ3112@chi-body* (cdr gQ42cb@e*) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* (append gQ4379@exp-decl* gQ42d2@exp*) gQ42d3@rib gQ42d4@top?)) gQ4377@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4375@t)))) (if (memv gQ42f5@t '(import)) (letrec* ((gQ437c@module-import? (lambda (gQ43cf@e) (let ((gQ43d1@t gQ43cf@e)) (let ((gQ43d3@ls/false (gQ30ba@syntax-dispatch gQ43d1@t '(_ any)))) (if (and gQ43d3@ls/false (apply (lambda (gQ43d5@id) (gQ2eb3@id? gQ43d5@id)) gQ43d3@ls/false)) (apply (lambda (gQ43d7@id) '#t) gQ43d3@ls/false) (let ((gQ43d9@t gQ43d1@t)) (let ((gQ43db@ls/false (gQ30ba@syntax-dispatch gQ43d9@t '(_ . each-any)))) (if gQ43db@ls/false (apply (lambda (gQ43dd@imp*) '#f) gQ43db@ls/false) (let ((gQ43df@t gQ43d9@t)) (let ((gQ43e1@ls/false (gQ30ba@syntax-dispatch gQ43df@t '_))) (if gQ43e1@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"malformed import form" gQ43cf@e)) gQ43e1@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ43df@t)))))))))))) (gQ437e@module-import (lambda (gQ43ad@e gQ43ae@r) (let ((gQ43b1@t gQ43ad@e)) (let ((gQ43b3@ls/false (gQ30ba@syntax-dispatch gQ43b1@t '(_ any)))) (if (and gQ43b3@ls/false (apply (lambda (gQ43b5@id) (gQ2eb3@id? gQ43b5@id)) gQ43b3@ls/false)) (apply (lambda (gQ43b7@id) (call-with-values (lambda () (gQ2ed5@syntax-type gQ43b7@id gQ43ae@r)) (lambda (gQ43bf@gQ43ba gQ43c0@gQ43bc gQ43c1@gQ43be) (let ((gQ43c5@kwd gQ43c1@gQ43be) (gQ43c6@value gQ43c0@gQ43bc) (gQ43c7@type gQ43bf@gQ43ba)) (let ((gQ43cb@t gQ43c7@type)) (if (memv gQ43cb@t '($module)) (let ((gQ43cd@iface gQ43c6@value)) (values (gQ310e@module-interface-exp-id* gQ43cd@iface gQ43b7@id) (gQ3108@module-interface-exp-lab-vec gQ43cd@iface))) (gQ319a@syntax-violation '#f '"invalid import" gQ43ad@e))))))) gQ43b3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ43b1@t)))))) (gQ4380@library-import (lambda (gQ4391@e) (let ((gQ4393@t gQ4391@e)) (let ((gQ4395@ls/false (gQ30ba@syntax-dispatch gQ4393@t '(any . each-any)))) (if gQ4395@ls/false (apply (lambda (gQ4397@ctxt gQ4398@imp*) (call-with-values (lambda () (gQ311c@parse-import-spec* (gQ31a0@syntax->datum gQ4398@imp*))) (lambda (gQ439f@gQ439c gQ43a0@gQ439e) (let ((gQ43a3@subst-labels gQ43a0@gQ439e) (gQ43a4@subst-names gQ439f@gQ439c)) (values (vector-map (lambda (gQ43a7@name) (gQ2e93@datum->stx gQ4397@ctxt gQ43a7@name)) gQ43a4@subst-names) gQ43a3@subst-labels))))) gQ4395@ls/false) (let ((gQ43a9@t gQ4393@t)) (let ((gQ43ab@ls/false (gQ30ba@syntax-dispatch gQ43a9@t '_))) (if gQ43ab@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid import form" gQ4391@e)) gQ43ab@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ43a9@t)))))))))) (begin (call-with-values (lambda () (if (gQ437c@module-import? gQ42df@e) (gQ437e@module-import gQ42df@e gQ42cc@r) (gQ4380@library-import gQ42df@e))) (lambda (gQ4385@gQ4382 gQ4386@gQ4384) (let ((gQ4389@lab* gQ4386@gQ4384) (gQ438a@id* gQ4385@gQ4382)) (vector-for-each (lambda (gQ438d@id gQ438e@lab) (gQ2e69@extend-rib! gQ42d3@rib gQ438d@id gQ438e@lab)) gQ438a@id* gQ4389@lab*)))) (gQ3112@chi-body* (cdr gQ42cb@e*) gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?))) (if gQ42d4@top? (gQ3112@chi-body* (cdr gQ42cb@e*) gQ42cc@r gQ42cd@mr (cons (gQ2e3b@gen-lexical 'dummy) gQ42ce@lex*) (cons (cons 'top-expr gQ42df@e) gQ42cf@rhs*) gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp* gQ42d3@rib gQ42d4@top?) (values gQ42cb@e* gQ42cc@r gQ42cd@mr gQ42ce@lex* gQ42cf@rhs* gQ42d0@mod** gQ42f3@kwd* gQ42d2@exp*)))))))))))))))))))))) (set! gQ4bb8@gQ3112@chi-body* gQ3112@chi-body*) (set! gQ3114@expand-transformer (lambda (gQ43e3@expr gQ43e4@r) (let ((gQ43e7@rtc (gQ3120@make-collector))) (let ((gQ43e9@expanded-rhs (let ((gQ43f3@gQ43ec gQ3122@inv-collector) (gQ43f4@gQ43ee gQ3124@vis-collector) (gQ43f5@gQ43f0 gQ43e7@rtc) (gQ43f6@gQ43f2 (lambda (gQ43fb@x) (values)))) (let ((gQ43fd@swap (lambda () (begin (let ((gQ43ff@t (gQ43f3@gQ43ec))) (begin (gQ43f3@gQ43ec gQ43f5@gQ43f0) (set! gQ43f5@gQ43f0 gQ43ff@t))) (let ((gQ4401@t (gQ43f4@gQ43ee))) (begin (gQ43f4@gQ43ee gQ43f6@gQ43f2) (set! gQ43f6@gQ43f2 gQ4401@t))))))) (dynamic-wind gQ43fd@swap (lambda () (gQ30dc@chi-expr gQ43e3@expr gQ43e4@r gQ43e4@r)) gQ43fd@swap))))) (begin (for-each (let ((gQ4403@mark-visit (gQ3124@vis-collector))) (lambda (gQ4405@x) (begin (gQ2ccf@gQ2b1d@invoke-library gQ4405@x) (gQ4403@mark-visit gQ4405@x)))) (gQ43e7@rtc)) gQ43e9@expanded-rhs))))) (set! gQ4bb9@gQ3114@expand-transformer gQ3114@expand-transformer) (set! gQ3116@parse-exports (lambda (gQ4407@exp*) (let gQ440f@f ((gQ4409@exp* gQ4407@exp*) (gQ440a@int* '()) (gQ440b@ext* '())) (if (null? gQ4409@exp*) (begin (if (not (gQ2ebb@valid-bound-ids? gQ440b@ext*)) (gQ319a@syntax-violation 'export '"invalid exports" (gQ30f0@find-dups gQ440b@ext*)) (void)) (values (map gQ31a0@syntax->datum gQ440b@ext*) gQ440a@int*)) (let ((gQ4411@t (car gQ4409@exp*))) (let ((gQ4413@ls/false (gQ30ba@syntax-dispatch gQ4411@t '(any . #(each (any any)))))) (if gQ4413@ls/false (apply (lambda (gQ4415@rename gQ4416@i* gQ4417@e*) (begin (if (not (and (eq? (gQ31a0@syntax->datum gQ4415@rename) 'rename) (for-all gQ2eb3@id? gQ4416@i*) (for-all gQ2eb3@id? gQ4417@e*))) (gQ319a@syntax-violation 'export '"invalid export specifier" (car gQ4409@exp*)) (void)) (gQ440f@f (cdr gQ4409@exp*) (append gQ4416@i* gQ440a@int*) (append gQ4417@e* gQ440b@ext*)))) gQ4413@ls/false) (let ((gQ441b@t gQ4411@t)) (let ((gQ441d@ls/false (gQ30ba@syntax-dispatch gQ441b@t 'any))) (if gQ441d@ls/false (apply (lambda (gQ441f@ie) (begin (if (not (gQ2eb3@id? gQ441f@ie)) (gQ319a@syntax-violation 'export '"invalid export" gQ441f@ie) (void)) (gQ440f@f (cdr gQ4409@exp*) (cons gQ441f@ie gQ440a@int*) (cons gQ441f@ie gQ440b@ext*)))) gQ441d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ441b@t))))))))))) (set! gQ4bba@gQ3116@parse-exports gQ3116@parse-exports) (set! gQ3118@parse-library-name (lambda (gQ4421@spec) (letrec* ((gQ4424@parse (lambda (gQ4431@x) (let ((gQ4433@t gQ4431@x)) (let ((gQ4435@ls/false (gQ30ba@syntax-dispatch gQ4433@t '(each-any)))) (if (and gQ4435@ls/false (apply (lambda (gQ4437@v*) (for-all (lambda (gQ4439@x) (let ((gQ443b@x (gQ31a0@syntax->datum gQ4439@x))) (and (integer? gQ443b@x) (exact? gQ443b@x)))) gQ4437@v*)) gQ4435@ls/false)) (apply (lambda (gQ443d@v*) (values '() (map gQ31a0@syntax->datum gQ443d@v*))) gQ4435@ls/false) (let ((gQ443f@t gQ4433@t)) (let ((gQ4441@ls/false (gQ30ba@syntax-dispatch gQ443f@t '(any . any)))) (if (and gQ4441@ls/false (apply (lambda (gQ4443@x gQ4444@rest) (symbol? (gQ31a0@syntax->datum gQ4443@x))) gQ4441@ls/false)) (apply (lambda (gQ4447@x gQ4448@rest) (call-with-values (lambda () (gQ4424@parse gQ4448@rest)) (lambda (gQ444f@gQ444c gQ4450@gQ444e) (let ((gQ4453@v* gQ4450@gQ444e) (gQ4454@x* gQ444f@gQ444c)) (values (cons (gQ31a0@syntax->datum gQ4447@x) gQ4454@x*) gQ4453@v*))))) gQ4441@ls/false) (let ((gQ4457@t gQ443f@t)) (let ((gQ4459@ls/false (gQ30ba@syntax-dispatch gQ4457@t '()))) (if gQ4459@ls/false (apply (lambda () (values '() '())) gQ4459@ls/false) (let ((gQ445b@t gQ4457@t)) (let ((gQ445d@ls/false (gQ30ba@syntax-dispatch gQ445b@t '_))) (if gQ445d@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid library name" gQ4421@spec)) gQ445d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ445b@t)))))))))))))))) (call-with-values (lambda () (gQ4424@parse gQ4421@spec)) (lambda (gQ4429@gQ4426 gQ442a@gQ4428) (let ((gQ442d@ver* gQ442a@gQ4428) (gQ442e@name* gQ4429@gQ4426)) (begin (if (null? gQ442e@name*) (gQ319a@syntax-violation '#f '"empty library name" gQ4421@spec) (void)) (values gQ442e@name* gQ442d@ver*)))))))) (set! gQ4bbb@gQ3118@parse-library-name gQ3118@parse-library-name) (set! gQ311a@parse-library (lambda (gQ445f@e) (let ((gQ4461@t gQ445f@e)) (let ((gQ4463@ls/false (gQ30ba@syntax-dispatch gQ4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and gQ4463@ls/false (apply (lambda (gQ4465@library gQ4466@name* gQ4467@export gQ4468@exp* gQ4469@import gQ446a@imp* gQ446b@b*) (and (eq? (gQ31a0@syntax->datum gQ4467@export) 'export) (eq? (gQ31a0@syntax->datum gQ4469@import) 'import) (eq? (gQ31a0@syntax->datum gQ4465@library) 'library))) gQ4463@ls/false)) (apply (lambda (gQ4473@library gQ4474@name* gQ4475@export gQ4476@exp* gQ4477@import gQ4478@imp* gQ4479@b*) (values gQ4474@name* gQ4476@exp* gQ4478@imp* gQ4479@b*)) gQ4463@ls/false) (let ((gQ4481@t gQ4461@t)) (let ((gQ4483@ls/false (gQ30ba@syntax-dispatch gQ4481@t '_))) (if gQ4483@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"malformed library" gQ445f@e)) gQ4483@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4481@t))))))))) (set! gQ4bbc@gQ311a@parse-library gQ311a@parse-library) (set! gQ311c@parse-import-spec* (letrec* ((gQ4486@idsyn? (lambda (gQ468f@x) (symbol? (gQ31a0@syntax->datum gQ468f@x)))) (gQ4488@dup-error (lambda (gQ468d@name) (gQ319a@syntax-violation 'import '"two imports with different bindings" gQ468d@name))) (gQ448a@merge-substs (lambda (gQ467b@s gQ467c@subst) (letrec* ((gQ4680@insert-to-subst (lambda (gQ4681@a gQ4682@subst) (let ((gQ4685@name (car gQ4681@a)) (gQ4686@label (cdr gQ4681@a))) (let ((gQ4689@t (assq gQ4685@name gQ4682@subst))) (if gQ4689@t ((lambda (gQ468b@x) (if (eq? (cdr gQ468b@x) gQ4686@label) gQ4682@subst (gQ4488@dup-error gQ4685@name))) gQ4689@t) (cons gQ4681@a gQ4682@subst))))))) (if (null? gQ467b@s) gQ467c@subst (gQ4680@insert-to-subst (car gQ467b@s) (gQ448a@merge-substs (cdr gQ467b@s) gQ467c@subst)))))) (gQ448c@exclude* (lambda (gQ464b@sym* gQ464c@subst) (letrec* ((gQ4650@exclude (lambda (gQ4669@sym gQ466a@subst) (if (null? gQ466a@subst) (gQ319a@syntax-violation 'import '"cannot rename unbound identifier" gQ4669@sym) (if (eq? gQ4669@sym (caar gQ466a@subst)) (values (cdar gQ466a@subst) (cdr gQ466a@subst)) (let ((gQ466d@a (car gQ466a@subst))) (call-with-values (lambda () (gQ4650@exclude gQ4669@sym (cdr gQ466a@subst))) (lambda (gQ4673@gQ4670 gQ4674@gQ4672) (let ((gQ4677@subst gQ4674@gQ4672) (gQ4678@old gQ4673@gQ4670)) (values gQ4678@old (cons gQ466d@a gQ4677@subst))))))))))) (if (null? gQ464b@sym*) (values '() gQ464c@subst) (call-with-values (lambda () (gQ4650@exclude (car gQ464b@sym*) gQ464c@subst)) (lambda (gQ4655@gQ4652 gQ4656@gQ4654) (let ((gQ4659@subst gQ4656@gQ4654) (gQ465a@old gQ4655@gQ4652)) (call-with-values (lambda () (gQ448c@exclude* (cdr gQ464b@sym*) gQ4659@subst)) (lambda (gQ4661@gQ465e gQ4662@gQ4660) (let ((gQ4665@subst gQ4662@gQ4660) (gQ4666@old* gQ4661@gQ465e)) (values (cons gQ465a@old gQ4666@old*) gQ4665@subst))))))))))) (gQ448e@find* (lambda (gQ4643@sym* gQ4644@subst) (map (lambda (gQ4647@x) (let ((gQ4649@t (assq gQ4647@x gQ4644@subst))) (if gQ4649@t (cdr gQ4649@t) (gQ319a@syntax-violation 'import '"cannot find identifier" gQ4647@x)))) gQ4643@sym*))) (gQ4490@rem* (lambda (gQ463b@sym* gQ463c@subst) (let gQ4641@f ((gQ463f@subst gQ463c@subst)) (if (null? gQ463f@subst) '() (if (memq (caar gQ463f@subst) gQ463b@sym*) (gQ4641@f (cdr gQ463f@subst)) (cons (car gQ463f@subst) (gQ4641@f (cdr gQ463f@subst)))))))) (gQ4492@remove-dups (lambda (gQ4639@ls) (if (null? gQ4639@ls) '() (if (memq (car gQ4639@ls) (cdr gQ4639@ls)) (gQ4492@remove-dups (cdr gQ4639@ls)) (cons (car gQ4639@ls) (gQ4492@remove-dups (cdr gQ4639@ls))))))) (gQ4494@parse-library-name (lambda (gQ4551@spec) (letrec* ((gQ4554@subversion? (lambda (gQ4635@x) (let ((gQ4637@x (gQ31a0@syntax->datum gQ4635@x))) (and (integer? gQ4637@x) (exact? gQ4637@x) (>= gQ4637@x '0))))) (gQ4556@subversion-pred (lambda (gQ45d5@x*) (let ((gQ45d7@t gQ45d5@x*)) (let ((gQ45d9@ls/false (gQ30ba@syntax-dispatch gQ45d7@t 'any))) (if (and gQ45d9@ls/false (apply (lambda (gQ45db@n) (gQ4554@subversion? gQ45db@n)) gQ45d9@ls/false)) (apply (lambda (gQ45dd@n) (lambda (gQ45df@x) (= gQ45df@x (gQ31a0@syntax->datum gQ45dd@n)))) gQ45d9@ls/false) (let ((gQ45e1@t gQ45d7@t)) (let ((gQ45e3@ls/false (gQ30ba@syntax-dispatch gQ45e1@t '(any . each-any)))) (if (and gQ45e3@ls/false (apply (lambda (gQ45e5@p? gQ45e6@sub*) (eq? (gQ31a0@syntax->datum gQ45e5@p?) 'and)) gQ45e3@ls/false)) (apply (lambda (gQ45e9@p? gQ45ea@sub*) (let ((gQ45ed@p* (map gQ4556@subversion-pred gQ45ea@sub*))) (lambda (gQ45ef@x) (for-all (lambda (gQ45f1@p) (gQ45f1@p gQ45ef@x)) gQ45ed@p*)))) gQ45e3@ls/false) (let ((gQ45f3@t gQ45e1@t)) (let ((gQ45f5@ls/false (gQ30ba@syntax-dispatch gQ45f3@t '(any . each-any)))) (if (and gQ45f5@ls/false (apply (lambda (gQ45f7@p? gQ45f8@sub*) (eq? (gQ31a0@syntax->datum gQ45f7@p?) 'or)) gQ45f5@ls/false)) (apply (lambda (gQ45fb@p? gQ45fc@sub*) (let ((gQ45ff@p* (map gQ4556@subversion-pred gQ45fc@sub*))) (lambda (gQ4601@x) (exists (lambda (gQ4603@p) (gQ4603@p gQ4601@x)) gQ45ff@p*)))) gQ45f5@ls/false) (let ((gQ4605@t gQ45f3@t)) (let ((gQ4607@ls/false (gQ30ba@syntax-dispatch gQ4605@t '(any any)))) (if (and gQ4607@ls/false (apply (lambda (gQ4609@p? gQ460a@sub) (eq? (gQ31a0@syntax->datum gQ4609@p?) 'not)) gQ4607@ls/false)) (apply (lambda (gQ460d@p? gQ460e@sub) (let ((gQ4611@p (gQ4556@subversion-pred gQ460e@sub))) (lambda (gQ4613@x) (not (gQ4611@p gQ4613@x))))) gQ4607@ls/false) (let ((gQ4615@t gQ4605@t)) (let ((gQ4617@ls/false (gQ30ba@syntax-dispatch gQ4615@t '(any any)))) (if (and gQ4617@ls/false (apply (lambda (gQ4619@p? gQ461a@n) (and (eq? (gQ31a0@syntax->datum gQ4619@p?) '<=) (gQ4554@subversion? gQ461a@n))) gQ4617@ls/false)) (apply (lambda (gQ461d@p? gQ461e@n) (lambda (gQ4621@x) (<= gQ4621@x (gQ31a0@syntax->datum gQ461e@n)))) gQ4617@ls/false) (let ((gQ4623@t gQ4615@t)) (let ((gQ4625@ls/false (gQ30ba@syntax-dispatch gQ4623@t '(any any)))) (if (and gQ4625@ls/false (apply (lambda (gQ4627@p? gQ4628@n) (and (eq? (gQ31a0@syntax->datum gQ4627@p?) '>=) (gQ4554@subversion? gQ4628@n))) gQ4625@ls/false)) (apply (lambda (gQ462b@p? gQ462c@n) (lambda (gQ462f@x) (>= gQ462f@x (gQ31a0@syntax->datum gQ462c@n)))) gQ4625@ls/false) (let ((gQ4631@t gQ4623@t)) (let ((gQ4633@ls/false (gQ30ba@syntax-dispatch gQ4631@t '_))) (if gQ4633@ls/false (apply (lambda () (gQ319a@syntax-violation 'import '"invalid sub-version spec" gQ4551@spec gQ45d5@x*)) gQ4633@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4631@t)))))))))))))))))))))))) (gQ4558@version-pred (lambda (gQ4585@x*) (let ((gQ4587@t gQ4585@x*)) (let ((gQ4589@ls/false (gQ30ba@syntax-dispatch gQ4587@t '()))) (if gQ4589@ls/false (apply (lambda () (lambda (gQ458b@x) '#t)) gQ4589@ls/false) (let ((gQ458d@t gQ4587@t)) (let ((gQ458f@ls/false (gQ30ba@syntax-dispatch gQ458d@t '(any . each-any)))) (if (and gQ458f@ls/false (apply (lambda (gQ4591@c gQ4592@ver*) (eq? (gQ31a0@syntax->datum gQ4591@c) 'and)) gQ458f@ls/false)) (apply (lambda (gQ4595@c gQ4596@ver*) (let ((gQ4599@p* (map gQ4558@version-pred gQ4596@ver*))) (lambda (gQ459b@x) (for-all (lambda (gQ459d@p) (gQ459d@p gQ459b@x)) gQ4599@p*)))) gQ458f@ls/false) (let ((gQ459f@t gQ458d@t)) (let ((gQ45a1@ls/false (gQ30ba@syntax-dispatch gQ459f@t '(any . each-any)))) (if (and gQ45a1@ls/false (apply (lambda (gQ45a3@c gQ45a4@ver*) (eq? (gQ31a0@syntax->datum gQ45a3@c) 'or)) gQ45a1@ls/false)) (apply (lambda (gQ45a7@c gQ45a8@ver*) (let ((gQ45ab@p* (map gQ4558@version-pred gQ45a8@ver*))) (lambda (gQ45ad@x) (exists (lambda (gQ45af@p) (gQ45af@p gQ45ad@x)) gQ45ab@p*)))) gQ45a1@ls/false) (let ((gQ45b1@t gQ459f@t)) (let ((gQ45b3@ls/false (gQ30ba@syntax-dispatch gQ45b1@t '(any any)))) (if (and gQ45b3@ls/false (apply (lambda (gQ45b5@c gQ45b6@ver) (eq? (gQ31a0@syntax->datum gQ45b5@c) 'not)) gQ45b3@ls/false)) (apply (lambda (gQ45b9@c gQ45ba@ver) (let ((gQ45bd@p (gQ4558@version-pred gQ45ba@ver))) (lambda (gQ45bf@x) (not (gQ45bd@p gQ45bf@x))))) gQ45b3@ls/false) (let ((gQ45c1@t gQ45b1@t)) (let ((gQ45c3@ls/false (gQ30ba@syntax-dispatch gQ45c1@t 'each-any))) (if gQ45c3@ls/false (apply (lambda (gQ45c5@sub*) (let ((gQ45c7@p* (map gQ4556@subversion-pred gQ45c5@sub*))) (lambda (gQ45c9@x) (let gQ45cf@f ((gQ45cb@p* gQ45c7@p*) (gQ45cc@x gQ45c9@x)) (if (null? gQ45cb@p*) '#t (if (null? gQ45cc@x) '#f (and ((car gQ45cb@p*) (car gQ45cc@x)) (gQ45cf@f (cdr gQ45cb@p*) (cdr gQ45cc@x))))))))) gQ45c3@ls/false) (let ((gQ45d1@t gQ45c1@t)) (let ((gQ45d3@ls/false (gQ30ba@syntax-dispatch gQ45d1@t '_))) (if gQ45d3@ls/false (apply (lambda () (gQ319a@syntax-violation 'import '"invalid version spec" gQ4551@spec gQ4585@x*)) gQ45d3@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ45d1@t)))))))))))))))))))))) (let gQ455b@f ((gQ4559@x gQ4551@spec)) (let ((gQ455d@t gQ4559@x)) (let ((gQ455f@ls/false (gQ30ba@syntax-dispatch gQ455d@t '(each-any)))) (if gQ455f@ls/false (apply (lambda (gQ4561@version-spec*) (values '() (gQ4558@version-pred gQ4561@version-spec*))) gQ455f@ls/false) (let ((gQ4563@t gQ455d@t)) (let ((gQ4565@ls/false (gQ30ba@syntax-dispatch gQ4563@t '(any . any)))) (if (and gQ4565@ls/false (apply (lambda (gQ4567@x gQ4568@x*) (gQ4486@idsyn? gQ4567@x)) gQ4565@ls/false)) (apply (lambda (gQ456b@x gQ456c@x*) (call-with-values (lambda () (gQ455b@f gQ456c@x*)) (lambda (gQ4573@gQ4570 gQ4574@gQ4572) (let ((gQ4577@pred gQ4574@gQ4572) (gQ4578@name gQ4573@gQ4570)) (values (cons (gQ31a0@syntax->datum gQ456b@x) gQ4578@name) gQ4577@pred))))) gQ4565@ls/false) (let ((gQ457b@t gQ4563@t)) (let ((gQ457d@ls/false (gQ30ba@syntax-dispatch gQ457b@t '()))) (if gQ457d@ls/false (apply (lambda () (values '() (lambda (gQ457f@x) '#t))) gQ457d@ls/false) (let ((gQ4581@t gQ457b@t)) (let ((gQ4583@ls/false (gQ30ba@syntax-dispatch gQ4581@t '_))) (if gQ4583@ls/false (apply (lambda () (gQ319a@syntax-violation '#f '"invalid import spec" gQ4551@spec)) gQ4583@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4581@t))))))))))))))))) (gQ4496@import-library (lambda (gQ4541@spec*) (call-with-values (lambda () (gQ4494@parse-library-name gQ4541@spec*)) (lambda (gQ4547@gQ4544 gQ4548@gQ4546) (let ((gQ454b@pred gQ4548@gQ4546) (gQ454c@name gQ4547@gQ4544)) (begin (if (null? gQ454c@name) (gQ319a@syntax-violation 'import '"empty library name" gQ4541@spec*) (void)) (let ((gQ454f@lib (gQ2cc8@gQ2b0f@find-library-by-name gQ454c@name))) (begin (if (not gQ454f@lib) (gQ319a@syntax-violation 'import '"cannot find library with required name" gQ454c@name) (void)) (if (not (gQ454b@pred (gQ2ca2@gQ2ac3@library-version gQ454f@lib))) (gQ319a@syntax-violation 'import '"library does not satisfy version specification" gQ4541@spec* gQ454f@lib) (void)) ((gQ3126@imp-collector) gQ454f@lib) (gQ2caa@gQ2ad3@library-subst gQ454f@lib))))))))) (gQ4498@get-import (lambda (gQ44b3@spec) (let ((gQ44b5@t gQ44b3@spec)) (let ((gQ44b7@ls/false (gQ30ba@syntax-dispatch gQ44b5@t '(any . each-any)))) (if (and gQ44b7@ls/false (apply (lambda (gQ44b9@x gQ44ba@x*) (not (memq (gQ31a0@syntax->datum gQ44b9@x) '(for rename except only prefix library)))) gQ44b7@ls/false)) (apply (lambda (gQ44bd@x gQ44be@x*) (gQ4496@import-library (cons gQ44bd@x gQ44be@x*))) gQ44b7@ls/false) (let ((gQ44c1@t gQ44b5@t)) (let ((gQ44c3@ls/false (gQ30ba@syntax-dispatch gQ44c1@t '(any any . #(each (any any)))))) (if (and gQ44c3@ls/false (apply (lambda (gQ44c5@rename gQ44c6@isp gQ44c7@old* gQ44c8@new*) (and (eq? (gQ31a0@syntax->datum gQ44c5@rename) 'rename) (for-all gQ4486@idsyn? gQ44c7@old*) (for-all gQ4486@idsyn? gQ44c8@new*))) gQ44c3@ls/false)) (apply (lambda (gQ44cd@rename gQ44ce@isp gQ44cf@old* gQ44d0@new*) (let ((gQ44d5@subst (gQ4498@get-import gQ44ce@isp)) (gQ44d6@old* (map gQ31a0@syntax->datum gQ44cf@old*)) (gQ44d7@new* (map gQ31a0@syntax->datum gQ44d0@new*))) (let ((gQ44db@old-label* (gQ448e@find* gQ44d6@old* gQ44d5@subst))) (let ((gQ44dd@subst (gQ4490@rem* gQ44d6@old* gQ44d5@subst))) (gQ448a@merge-substs (map cons gQ44d7@new* gQ44db@old-label*) gQ44dd@subst))))) gQ44c3@ls/false) (let ((gQ44df@t gQ44c1@t)) (let ((gQ44e1@ls/false (gQ30ba@syntax-dispatch gQ44df@t '(any any . each-any)))) (if (and gQ44e1@ls/false (apply (lambda (gQ44e3@except gQ44e4@isp gQ44e5@sym*) (and (eq? (gQ31a0@syntax->datum gQ44e3@except) 'except) (for-all gQ4486@idsyn? gQ44e5@sym*))) gQ44e1@ls/false)) (apply (lambda (gQ44e9@except gQ44ea@isp gQ44eb@sym*) (let ((gQ44ef@subst (gQ4498@get-import gQ44ea@isp))) (gQ4490@rem* (map gQ31a0@syntax->datum gQ44eb@sym*) gQ44ef@subst))) gQ44e1@ls/false) (let ((gQ44f1@t gQ44df@t)) (let ((gQ44f3@ls/false (gQ30ba@syntax-dispatch gQ44f1@t '(any any . each-any)))) (if (and gQ44f3@ls/false (apply (lambda (gQ44f5@only gQ44f6@isp gQ44f7@sym*) (and (eq? (gQ31a0@syntax->datum gQ44f5@only) 'only) (for-all gQ4486@idsyn? gQ44f7@sym*))) gQ44f3@ls/false)) (apply (lambda (gQ44fb@only gQ44fc@isp gQ44fd@sym*) (let ((gQ4501@subst (gQ4498@get-import gQ44fc@isp)) (gQ4502@sym* (map gQ31a0@syntax->datum gQ44fd@sym*))) (let ((gQ4505@sym* (gQ4492@remove-dups gQ4502@sym*))) (let ((gQ4507@lab* (gQ448e@find* gQ4505@sym* gQ4501@subst))) (map cons gQ4505@sym* gQ4507@lab*))))) gQ44f3@ls/false) (let ((gQ4509@t gQ44f1@t)) (let ((gQ450b@ls/false (gQ30ba@syntax-dispatch gQ4509@t '(any any any)))) (if (and gQ450b@ls/false (apply (lambda (gQ450d@prefix gQ450e@isp gQ450f@p) (and (eq? (gQ31a0@syntax->datum gQ450d@prefix) 'prefix) (gQ4486@idsyn? gQ450f@p))) gQ450b@ls/false)) (apply (lambda (gQ4513@prefix gQ4514@isp gQ4515@p) (let ((gQ4519@subst (gQ4498@get-import gQ4514@isp)) (gQ451a@prefix (symbol->string (gQ31a0@syntax->datum gQ4515@p)))) (map (lambda (gQ451d@x) (cons (string->symbol (string-append gQ451a@prefix (symbol->string (car gQ451d@x)))) (cdr gQ451d@x))) gQ4519@subst))) gQ450b@ls/false) (let ((gQ451f@t gQ4509@t)) (let ((gQ4521@ls/false (gQ30ba@syntax-dispatch gQ451f@t '(any each-any)))) (if (and gQ4521@ls/false (apply (lambda (gQ4523@library gQ4524@spec*) (eq? (gQ31a0@syntax->datum gQ4523@library) 'library)) gQ4521@ls/false)) (apply (lambda (gQ4527@library gQ4528@spec*) (gQ4496@import-library gQ4528@spec*)) gQ4521@ls/false) (let ((gQ452b@t gQ451f@t)) (let ((gQ452d@ls/false (gQ30ba@syntax-dispatch gQ452b@t '(any any . any)))) (if (and gQ452d@ls/false (apply (lambda (gQ452f@for gQ4530@isp gQ4531@rest) (eq? (gQ31a0@syntax->datum gQ452f@for) 'for)) gQ452d@ls/false)) (apply (lambda (gQ4535@for gQ4536@isp gQ4537@rest) (gQ4498@get-import gQ4536@isp)) gQ452d@ls/false) (let ((gQ453b@t gQ452b@t)) (let ((gQ453d@ls/false (gQ30ba@syntax-dispatch gQ453b@t 'any))) (if gQ453d@ls/false (apply (lambda (gQ453f@spec) (gQ319a@syntax-violation 'import '"invalid import spec" gQ453f@spec)) gQ453d@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ453b@t))))))))))))))))))))))))))) (gQ449a@add-imports! (lambda (gQ44a3@imp gQ44a4@h) (let ((gQ44a7@subst (gQ4498@get-import gQ44a3@imp))) (for-each (lambda (gQ44a9@x) (let ((gQ44ab@name (car gQ44a9@x)) (gQ44ac@label (cdr gQ44a9@x))) (let ((gQ44af@t (hashtable-ref gQ44a4@h gQ44ab@name '#f))) (if gQ44af@t ((lambda (gQ44b1@l) (if (not (eq? gQ44b1@l gQ44ac@label)) (gQ4488@dup-error gQ44ab@name) (void))) gQ44af@t) (hashtable-set! gQ44a4@h gQ44ab@name gQ44ac@label))))) gQ44a7@subst))))) (lambda (gQ449b@imp*) (let gQ44a1@f ((gQ449d@imp* gQ449b@imp*) (gQ449e@h (make-eq-hashtable))) (if (null? gQ449d@imp*) (hashtable-entries gQ449e@h) (begin (gQ449a@add-imports! (car gQ449d@imp*) gQ449e@h) (gQ44a1@f (cdr gQ449d@imp*) gQ449e@h))))))) (set! gQ4bbd@gQ311c@parse-import-spec* gQ311c@parse-import-spec*) (set! gQ311e@make-top-rib (lambda (gQ4691@names gQ4692@labels) (let ((gQ4695@rib (gQ2e67@make-empty-rib))) (begin (vector-for-each (lambda (gQ4697@name gQ4698@label) (begin (if (not (symbol? gQ4697@name)) (error 'make-top-rib '"BUG: not a symbol" gQ4697@name) (void)) (gQ2e6b@extend-rib/nc! gQ4695@rib (make-simple-struct 'stx '5 (list gQ4697@name gQ2e37@top-mark* '() '())) gQ4698@label))) gQ4691@names gQ4692@labels) gQ4695@rib)))) (set! gQ4bbe@gQ311e@make-top-rib gQ311e@make-top-rib) (set! gQ3120@make-collector (lambda () (let ((gQ469b@ls '())) (lambda gQ469f (let ((gQ46a0 (length gQ469f))) (if (= gQ46a0 '0) (apply (lambda () gQ469b@ls) gQ469f) (if (= gQ46a0 '1) (apply (lambda (gQ469d@x) (set! gQ469b@ls (gQ2e30@set-cons gQ469d@x gQ469b@ls))) gQ469f) (error 'apply '"invalid arg count")))))))) (set! gQ4bbf@gQ3120@make-collector gQ3120@make-collector) (set! gQ3122@inv-collector (gQ2a03@gQ28e1@make-parameter (lambda gQ46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (gQ46a3@x) (begin (if (not (procedure? gQ46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" gQ46a3@x) (void)) gQ46a3@x)))) (set! gQ4bc0@gQ3122@inv-collector gQ3122@inv-collector) (set! gQ3124@vis-collector (gQ2a03@gQ28e1@make-parameter (lambda gQ46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (gQ46a7@x) (begin (if (not (procedure? gQ46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" gQ46a7@x) (void)) gQ46a7@x)))) (set! gQ4bc1@gQ3124@vis-collector gQ3124@vis-collector) (set! gQ3126@imp-collector (gQ2a03@gQ28e1@make-parameter (lambda gQ46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (gQ46ab@x) (begin (if (not (procedure? gQ46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" gQ46ab@x) (void)) gQ46ab@x)))) (set! gQ4bc2@gQ3126@imp-collector gQ3126@imp-collector) (set! gQ3128@chi-library-internal (lambda (gQ46ad@e* gQ46ae@rib gQ46af@top?) (call-with-values (lambda () (gQ3112@chi-body* gQ46ad@e* '() '() '() '() '() '() '() gQ46ae@rib gQ46af@top?)) (lambda (gQ46c3@gQ46b4 gQ46c4@gQ46b6 gQ46c5@gQ46b8 gQ46c6@gQ46ba gQ46c7@gQ46bc gQ46c8@gQ46be gQ46c9@gQ46c0 gQ46ca@gQ46c2) (let ((gQ46d3@exp* gQ46ca@gQ46c2) (gQ46d4@_kwd* gQ46c9@gQ46c0) (gQ46d5@mod** gQ46c8@gQ46be) (gQ46d6@rhs* gQ46c7@gQ46bc) (gQ46d7@lex* gQ46c6@gQ46ba) (gQ46d8@mr gQ46c5@gQ46b8) (gQ46d9@r gQ46c4@gQ46b6) (gQ46da@e* gQ46c3@gQ46b4)) (values (append (apply append (reverse gQ46d5@mod**)) gQ46da@e*) gQ46d9@r gQ46d8@mr (reverse gQ46d7@lex*) (reverse gQ46d6@rhs*) gQ46d3@exp*)))))) (set! gQ4bc3@gQ3128@chi-library-internal gQ3128@chi-library-internal) (set! gQ312a@chi-interaction-expr (lambda (gQ46e3@e gQ46e4@rib gQ46e5@r) (call-with-values (lambda () (gQ3112@chi-body* (list gQ46e3@e) gQ46e5@r gQ46e5@r '() '() '() '() '() gQ46e4@rib '#t)) (lambda (gQ46f9@gQ46ea gQ46fa@gQ46ec gQ46fb@gQ46ee gQ46fc@gQ46f0 gQ46fd@gQ46f2 gQ46fe@gQ46f4 gQ46ff@gQ46f6 gQ4700@gQ46f8) (let ((gQ4709@_exp* gQ4700@gQ46f8) (gQ470a@_kwd* gQ46ff@gQ46f6) (gQ470b@mod** gQ46fe@gQ46f4) (gQ470c@rhs* gQ46fd@gQ46f2) (gQ470d@lex* gQ46fc@gQ46f0) (gQ470e@mr gQ46fb@gQ46ee) (gQ470f@r gQ46fa@gQ46ec) (gQ4710@e* gQ46f9@gQ46ea)) (let ((gQ4719@e* (gQ30ea@expand-interaction-rhs*/init* (reverse gQ470d@lex*) (reverse gQ470c@rhs*) (append (apply append (reverse gQ470b@mod**)) gQ4710@e*) gQ470f@r gQ470e@mr))) (let ((gQ471b@e (if (null? gQ4719@e*) (gQ2e19@gQ2d7a@build-void) (if (null? (cdr gQ4719@e*)) (car gQ4719@e*) (gQ2e18@gQ2d78@build-sequence '#f gQ4719@e*))))) (values gQ471b@e gQ470f@r)))))))) (set! gQ4bc4@gQ312a@chi-interaction-expr gQ312a@chi-interaction-expr) (set! gQ312c@library-body-expander (lambda (gQ471d@name gQ471e@main-exp* gQ471f@imp* gQ4720@b* gQ4721@top?) (letrec* ((gQ4728@itc (gQ3120@make-collector))) (let ((gQ4731@gQ472a gQ3126@imp-collector) (gQ4732@gQ472c gQ31aa@top-level-context) (gQ4733@gQ472e gQ4728@itc) (gQ4734@gQ4730 '#f)) (let ((gQ4739@swap (lambda () (begin (let ((gQ473b@t (gQ4731@gQ472a))) (begin (gQ4731@gQ472a gQ4733@gQ472e) (set! gQ4733@gQ472e gQ473b@t))) (let ((gQ473d@t (gQ4732@gQ472c))) (begin (gQ4732@gQ472c gQ4734@gQ4730) (set! gQ4734@gQ4730 gQ473d@t))))))) (dynamic-wind gQ4739@swap (lambda () (call-with-values (lambda () (gQ311c@parse-import-spec* gQ471f@imp*)) (lambda (gQ4743@gQ4740 gQ4744@gQ4742) (let ((gQ4747@subst-labels gQ4744@gQ4742) (gQ4748@subst-names gQ4743@gQ4740)) (let ((gQ474b@rib (gQ311e@make-top-rib gQ4748@subst-names gQ4747@subst-labels))) (letrec* ((gQ474e@wrap (lambda (gQ47c9@x) (make-simple-struct 'stx '5 (list gQ47c9@x gQ2e37@top-mark* (list gQ474b@rib) '()))))) (let ((gQ474f@b* (map gQ474e@wrap gQ4720@b*)) (gQ4750@main-exp* (map gQ474e@wrap gQ471e@main-exp*)) (gQ4751@rtc (gQ3120@make-collector)) (gQ4752@vtc (gQ3120@make-collector))) (let ((gQ475f@gQ4758 gQ3122@inv-collector) (gQ4760@gQ475a gQ3124@vis-collector) (gQ4761@gQ475c gQ4751@rtc) (gQ4762@gQ475e gQ4752@vtc)) (let ((gQ4767@swap (lambda () (begin (let ((gQ4769@t (gQ475f@gQ4758))) (begin (gQ475f@gQ4758 gQ4761@gQ475c) (set! gQ4761@gQ475c gQ4769@t))) (let ((gQ476b@t (gQ4760@gQ475a))) (begin (gQ4760@gQ475a gQ4762@gQ475e) (set! gQ4762@gQ475e gQ476b@t))))))) (dynamic-wind gQ4767@swap (lambda () (call-with-values (lambda () (gQ3128@chi-library-internal gQ474f@b* gQ474b@rib gQ4721@top?)) (lambda (gQ4779@gQ476e gQ477a@gQ4770 gQ477b@gQ4772 gQ477c@gQ4774 gQ477d@gQ4776 gQ477e@gQ4778) (let ((gQ4785@internal-exp* gQ477e@gQ4778) (gQ4786@rhs* gQ477d@gQ4776) (gQ4787@lex* gQ477c@gQ4774) (gQ4788@mr gQ477b@gQ4772) (gQ4789@r gQ477a@gQ4770) (gQ478a@init* gQ4779@gQ476e)) (call-with-values (lambda () (gQ3116@parse-exports (append gQ4750@main-exp* gQ4785@internal-exp*))) (lambda (gQ4795@gQ4792 gQ4796@gQ4794) (let ((gQ4799@exp-id* gQ4796@gQ4794) (gQ479a@exp-name* gQ4795@gQ4792)) (begin (gQ2e6f@seal-rib! gQ474b@rib) (let ((gQ479d@init* (gQ30d8@chi-expr* gQ478a@init* gQ4789@r gQ4788@mr))) (let ((gQ479f@rhs* (gQ30ec@chi-rhs* gQ4786@rhs* gQ4789@r gQ4788@mr))) (begin (gQ2e71@unseal-rib! gQ474b@rib) (let ((gQ47a1@loc* (map gQ2e3d@gen-global gQ4787@lex*)) (gQ47a2@export-subst (gQ3184@make-export-subst gQ479a@exp-name* gQ4799@exp-id*))) (letrec* ((gQ47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (gQ3186@make-export-env/macros gQ4787@lex* gQ47a1@loc* gQ4789@r)) (lambda (gQ47ad@gQ47a8 gQ47ae@gQ47aa gQ47af@gQ47ac) (let ((gQ47b3@macro* gQ47af@gQ47ac) (gQ47b4@global* gQ47ae@gQ47aa) (gQ47b5@export-env gQ47ad@gQ47a8)) (begin (for-each (lambda (gQ47b9@s) (let ((gQ47bb@name (car gQ47b9@s)) (gQ47bc@label (cdr gQ47b9@s))) (let ((gQ47bf@p (assq gQ47bc@label gQ47b5@export-env))) (if gQ47bf@p (let ((gQ47c1@b (cdr gQ47bf@p))) (let ((gQ47c3@type (car gQ47c1@b))) (if (eq? gQ47c3@type 'mutable) (gQ319a@syntax-violation 'export gQ47a6@errstr gQ47bb@name) (void)))) (void))))) gQ47a2@export-subst) (let ((gQ47c5@invoke-body (gQ2e1e@gQ2d84@build-library-letrec* '#f gQ471d@name gQ4787@lex* gQ47a1@loc* gQ479f@rhs* (if (null? gQ479d@init*) (gQ2e19@gQ2d7a@build-void) (gQ2e18@gQ2d78@build-sequence '#f gQ479d@init*)))) (gQ47c6@invoke-definitions (map gQ2e15@gQ2cd7@build-global-define (map cdr gQ47b4@global*)))) (values (gQ4728@itc) (gQ4751@rtc) (gQ4752@vtc) (gQ2e18@gQ2d78@build-sequence '#f (append gQ47c6@invoke-definitions (list gQ47c5@invoke-body))) gQ47b3@macro* gQ47a2@export-subst gQ47b5@export-env))))))))))))))))))) gQ4767@swap)))))))))) gQ4739@swap)))))) (set! gQ4bc5@gQ312c@library-body-expander gQ312c@library-body-expander) (set! gQ312e@core-library-expander (lambda (gQ47cb@e gQ47cc@verify-name) (call-with-values (lambda () (gQ311a@parse-library gQ47cb@e)) (lambda (gQ47d7@gQ47d0 gQ47d8@gQ47d2 gQ47d9@gQ47d4 gQ47da@gQ47d6) (let ((gQ47df@b* gQ47da@gQ47d6) (gQ47e0@imp* gQ47d9@gQ47d4) (gQ47e1@exp* gQ47d8@gQ47d2) (gQ47e2@name* gQ47d7@gQ47d0)) (call-with-values (lambda () (gQ3118@parse-library-name gQ47e2@name*)) (lambda (gQ47eb@gQ47e8 gQ47ec@gQ47ea) (let ((gQ47ef@ver gQ47ec@gQ47ea) (gQ47f0@name gQ47eb@gQ47e8)) (begin (gQ47cc@verify-name gQ47f0@name) (call-with-values (lambda () (gQ312c@library-body-expander gQ47f0@name gQ47e1@exp* gQ47e0@imp* gQ47df@b* '#f)) (lambda (gQ4801@gQ47f4 gQ4802@gQ47f6 gQ4803@gQ47f8 gQ4804@gQ47fa gQ4805@gQ47fc gQ4806@gQ47fe gQ4807@gQ4800) (let ((gQ480f@export-env gQ4807@gQ4800) (gQ4810@export-subst gQ4806@gQ47fe) (gQ4811@visit-code gQ4805@gQ47fc) (gQ4812@invoke-code gQ4804@gQ47fa) (gQ4813@visit-req* gQ4803@gQ47f8) (gQ4814@invoke-req* gQ4802@gQ47f6) (gQ4815@imp* gQ4801@gQ47f4)) (values gQ47f0@name gQ47ef@ver gQ4815@imp* gQ4814@invoke-req* gQ4813@visit-req* gQ4812@invoke-code gQ4811@visit-code gQ4810@export-subst gQ480f@export-env))))))))))))) (set! gQ4bc6@gQ312e@core-library-expander gQ312e@core-library-expander) (set! gQ3130@parse-top-level-program (lambda (gQ481d@e*) (let ((gQ481f@t gQ481d@e*)) (let ((gQ4821@ls/false (gQ30ba@syntax-dispatch gQ481f@t '((any . each-any) . each-any)))) (if (and gQ4821@ls/false (apply (lambda (gQ4823@import gQ4824@imp* gQ4825@b*) (eq? (gQ31a0@syntax->datum gQ4823@import) 'import)) gQ4821@ls/false)) (apply (lambda (gQ4829@import gQ482a@imp* gQ482b@b*) (values gQ482a@imp* gQ482b@b*)) gQ4821@ls/false) (let ((gQ482f@t gQ481f@t)) (let ((gQ4831@ls/false (gQ30ba@syntax-dispatch gQ482f@t '((any . any) . any)))) (if (and gQ4831@ls/false (apply (lambda (gQ4833@import gQ4834@x gQ4835@y) (eq? (gQ31a0@syntax->datum gQ4833@import) 'import)) gQ4831@ls/false)) (apply (lambda (gQ4839@import gQ483a@x gQ483b@y) (gQ319a@syntax-violation 'expander '"invalid syntax of top-level program" (gQ2ead@syntax-car gQ481d@e*))) gQ4831@ls/false) (let ((gQ483f@t gQ482f@t)) (let ((gQ4841@ls/false (gQ30ba@syntax-dispatch gQ483f@t '_))) (if gQ4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) gQ4841@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ483f@t)))))))))))) (set! gQ4bc7@gQ3130@parse-top-level-program gQ3130@parse-top-level-program) (set! gQ3132@top-level-expander (lambda (gQ4843@e*) (call-with-values (lambda () (gQ3130@parse-top-level-program gQ4843@e*)) (lambda (gQ4849@gQ4846 gQ484a@gQ4848) (let ((gQ484d@b* gQ484a@gQ4848) (gQ484e@imp* gQ4849@gQ4846)) (call-with-values (lambda () (gQ312c@library-body-expander '() '() gQ484e@imp* gQ484d@b* '#t)) (lambda (gQ485f@gQ4852 gQ4860@gQ4854 gQ4861@gQ4856 gQ4862@gQ4858 gQ4863@gQ485a gQ4864@gQ485c gQ4865@gQ485e) (let ((gQ486d@export-env gQ4865@gQ485e) (gQ486e@export-subst gQ4864@gQ485c) (gQ486f@visit-code gQ4863@gQ485a) (gQ4870@invoke-code gQ4862@gQ4858) (gQ4871@visit-req* gQ4861@gQ4856) (gQ4872@invoke-req* gQ4860@gQ4854) (gQ4873@imp* gQ485f@gQ4852)) (values gQ4872@invoke-req* gQ4870@invoke-code))))))))) (set! gQ4bc8@gQ3132@top-level-expander gQ3132@top-level-expander) (set! gQ3134@rp (gQ2a00@gQ28db@make-record-printer 'env (lambda (gQ487b@x gQ487c@p gQ487d@wr) (display '"#<environment>" gQ487c@p)))) (set! gQ4bc9@gQ3134@rp gQ3134@rp) (set! gQ313e@env? (lambda (gQ4881@x) (and (simple-struct? gQ4881@x) (eq? (simple-struct-name gQ4881@x) 'env)))) (set! gQ4bca@gQ313e@env? gQ313e@env?) (set! gQ3140@env-names (lambda (gQ4883@x) (simple-struct-ref gQ4883@x '0))) (set! gQ4bcb@gQ3140@env-names gQ3140@env-names) (set! gQ3142@set-env-names! (lambda (gQ4885@x gQ4886@val) (simple-struct-set! gQ4885@x '0 gQ4886@val))) (set! gQ4bcc@gQ3142@set-env-names! gQ3142@set-env-names!) (set! gQ3144@env-labels (lambda (gQ4889@x) (simple-struct-ref gQ4889@x '1))) (set! gQ4bcd@gQ3144@env-labels gQ3144@env-labels) (set! gQ3146@set-env-labels! (lambda (gQ488b@x gQ488c@val) (simple-struct-set! gQ488b@x '1 gQ488c@val))) (set! gQ4bce@gQ3146@set-env-labels! gQ3146@set-env-labels!) (set! gQ3148@env-itc (lambda (gQ488f@x) (simple-struct-ref gQ488f@x '2))) (set! gQ4bcf@gQ3148@env-itc gQ3148@env-itc) (set! gQ314a@set-env-itc! (lambda (gQ4891@x gQ4892@val) (simple-struct-set! gQ4891@x '2 gQ4892@val))) (set! gQ4bd0@gQ314a@set-env-itc! gQ314a@set-env-itc!) (set! gQ314c@dummy '3) (set! gQ4bd1@gQ314c@dummy gQ314c@dummy) (set! gQ314e@rp (gQ2a00@gQ28db@make-record-printer 'interaction-env (lambda (gQ4895@x gQ4896@p gQ4897@wr) (display '"#<environment>" gQ4896@p)))) (set! gQ4bd2@gQ314e@rp gQ314e@rp) (set! gQ3158@interaction-env? (lambda (gQ489b@x) (and (simple-struct? gQ489b@x) (eq? (simple-struct-name gQ489b@x) 'interaction-env)))) (set! gQ4bd3@gQ3158@interaction-env? gQ3158@interaction-env?) (set! gQ315a@interaction-env-rib (lambda (gQ489d@x) (simple-struct-ref gQ489d@x '0))) (set! gQ4bd4@gQ315a@interaction-env-rib gQ315a@interaction-env-rib) (set! gQ315c@set-interaction-env-rib! (lambda (gQ489f@x gQ48a0@val) (simple-struct-set! gQ489f@x '0 gQ48a0@val))) (set! gQ4bd5@gQ315c@set-interaction-env-rib! gQ315c@set-interaction-env-rib!) (set! gQ315e@interaction-env-r (lambda (gQ48a3@x) (simple-struct-ref gQ48a3@x '1))) (set! gQ4bd6@gQ315e@interaction-env-r gQ315e@interaction-env-r) (set! gQ3160@set-interaction-env-r! (lambda (gQ48a5@x gQ48a6@val) (simple-struct-set! gQ48a5@x '1 gQ48a6@val))) (set! gQ4bd7@gQ3160@set-interaction-env-r! gQ3160@set-interaction-env-r!) (set! gQ3162@interaction-env-locs (lambda (gQ48a9@x) (simple-struct-ref gQ48a9@x '2))) (set! gQ4bd8@gQ3162@interaction-env-locs gQ3162@interaction-env-locs) (set! gQ3164@set-interaction-env-locs! (lambda (gQ48ab@x gQ48ac@val) (simple-struct-set! gQ48ab@x '2 gQ48ac@val))) (set! gQ4bd9@gQ3164@set-interaction-env-locs! gQ3164@set-interaction-env-locs!) (set! gQ3166@dummy '3) (set! gQ4bda@gQ3166@dummy gQ3166@dummy) (set! gQ3168@interaction-environment-symbols (lambda () (gQ3170@environment-symbols (gQ31a8@interaction-environment)))) (set! gQ4bdb@gQ3168@interaction-environment-symbols gQ3168@interaction-environment-symbols) (set! gQ316a@environment-bindings (lambda (gQ48af@e) (vector->list (vector-map (lambda (gQ48b1@name gQ48b2@label) (gQ316c@parse-binding (cons gQ48b1@name (gQ2cce@gQ2b1b@imported-label->binding gQ48b2@label)))) (gQ3140@env-names gQ48af@e) (gQ3144@env-labels gQ48af@e))))) (set! gQ4bdc@gQ316a@environment-bindings gQ316a@environment-bindings) (set! gQ316c@parse-binding (lambda (gQ48b5@b) (cons (car gQ48b5@b) (let ((gQ48b7@t (cadr gQ48b5@b))) (if (memv gQ48b7@t '(core-prim global)) 'procedure (if (memv gQ48b7@t '(core-macro macro global-macro)) 'syntax (if (memv gQ48b7@t '($core-rtd)) 'record (if (eq? (car gQ48b5@b) (cadr gQ48b5@b)) 'syntax 'unknown)))))))) (set! gQ4bdd@gQ316c@parse-binding gQ316c@parse-binding) (set! gQ316e@environment? (lambda (gQ48b9@x) (or (gQ313e@env? gQ48b9@x) (gQ3158@interaction-env? gQ48b9@x)))) (set! gQ4bde@gQ316e@environment? gQ316e@environment?) (set! gQ3170@environment-symbols (lambda (gQ48bb@x) (if (gQ313e@env? gQ48bb@x) (vector->list (gQ3140@env-names gQ48bb@x)) (if (gQ3158@interaction-env? gQ48bb@x) (map values (gQ2e51@rib-sym* (gQ315a@interaction-env-rib gQ48bb@x))) (assertion-violation 'environment-symbols '"not an environment" gQ48bb@x))))) (set! gQ4bdf@gQ3170@environment-symbols gQ3170@environment-symbols) (set! gQ3172@environment (lambda gQ48bd@imp* (let ((gQ48bf@itc (gQ3120@make-collector))) (let ((gQ48c5@gQ48c2 gQ3126@imp-collector) (gQ48c6@gQ48c4 gQ48bf@itc)) (let ((gQ48c9@swap (lambda () (let ((gQ48cb@t (gQ48c5@gQ48c2))) (begin (gQ48c5@gQ48c2 gQ48c6@gQ48c4) (set! gQ48c6@gQ48c4 gQ48cb@t)))))) (dynamic-wind gQ48c9@swap (lambda () (call-with-values (lambda () (gQ311c@parse-import-spec* gQ48bd@imp*)) (lambda (gQ48d1@gQ48ce gQ48d2@gQ48d0) (let ((gQ48d5@subst-labels gQ48d2@gQ48d0) (gQ48d6@subst-names gQ48d1@gQ48ce)) (make-simple-struct 'env '4 (list gQ48d6@subst-names gQ48d5@subst-labels gQ48bf@itc)))))) gQ48c9@swap)))))) (set! gQ4be0@gQ3172@environment gQ3172@environment) (set! gQ3174@null-environment (lambda (gQ48d9@n) (begin (if (not (eqv? gQ48d9@n '5)) (assertion-violation 'null-environment '"not 5" gQ48d9@n) (void)) (gQ3172@environment '(psyntax null-environment-5))))) (set! gQ4be1@gQ3174@null-environment gQ3174@null-environment) (set! gQ3176@scheme-report-environment (lambda (gQ48db@n) (begin (if (not (eqv? gQ48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" gQ48db@n) (void)) (gQ3172@environment '(psyntax scheme-report-environment-5))))) (set! gQ4be2@gQ3176@scheme-report-environment gQ3176@scheme-report-environment) (set! gQ3178@expand (lambda (gQ48dd@x gQ48de@env) (if (gQ313e@env? gQ48de@env) (let ((gQ48e1@rib (gQ311e@make-top-rib (gQ3140@env-names gQ48de@env) (gQ3144@env-labels gQ48de@env)))) (let ((gQ48e3@x (make-simple-struct 'stx '5 (list gQ48dd@x gQ2e37@top-mark* (list gQ48e1@rib) '()))) (gQ48e4@itc (gQ3148@env-itc gQ48de@env)) (gQ48e5@rtc (gQ3120@make-collector)) (gQ48e6@vtc (gQ3120@make-collector))) (let ((gQ48eb@x (let ((gQ48fd@gQ48ee gQ31aa@top-level-context) (gQ48fe@gQ48f0 gQ3122@inv-collector) (gQ48ff@gQ48f2 gQ3124@vis-collector) (gQ4900@gQ48f4 gQ3126@imp-collector) (gQ4901@gQ48f6 '#f) (gQ4902@gQ48f8 gQ48e5@rtc) (gQ4903@gQ48fa gQ48e6@vtc) (gQ4904@gQ48fc gQ48e4@itc)) (let ((gQ490d@swap (lambda () (begin (let ((gQ490f@t (gQ48fd@gQ48ee))) (begin (gQ48fd@gQ48ee gQ4901@gQ48f6) (set! gQ4901@gQ48f6 gQ490f@t))) (let ((gQ4911@t (gQ48fe@gQ48f0))) (begin (gQ48fe@gQ48f0 gQ4902@gQ48f8) (set! gQ4902@gQ48f8 gQ4911@t))) (let ((gQ4913@t (gQ48ff@gQ48f2))) (begin (gQ48ff@gQ48f2 gQ4903@gQ48fa) (set! gQ4903@gQ48fa gQ4913@t))) (let ((gQ4915@t (gQ4900@gQ48f4))) (begin (gQ4900@gQ48f4 gQ4904@gQ48fc) (set! gQ4904@gQ48fc gQ4915@t))))))) (dynamic-wind gQ490d@swap (lambda () (gQ30dc@chi-expr gQ48e3@x '() '())) gQ490d@swap))))) (begin (gQ2e6f@seal-rib! gQ48e1@rib) (values gQ48eb@x (gQ48e5@rtc)))))) (if (gQ3158@interaction-env? gQ48de@env) (let ((gQ4917@rib (gQ315a@interaction-env-rib gQ48de@env)) (gQ4918@r (gQ315e@interaction-env-r gQ48de@env)) (gQ4919@rtc (gQ3120@make-collector))) (let ((gQ491d@x (make-simple-struct 'stx '5 (list gQ48dd@x gQ2e37@top-mark* (list gQ4917@rib) '())))) (call-with-values (lambda () (let ((gQ4933@gQ4924 gQ31aa@top-level-context) (gQ4934@gQ4926 gQ3122@inv-collector) (gQ4935@gQ4928 gQ3124@vis-collector) (gQ4936@gQ492a gQ3126@imp-collector) (gQ4937@gQ492c gQ48de@env) (gQ4938@gQ492e gQ4919@rtc) (gQ4939@gQ4930 (gQ3120@make-collector)) (gQ493a@gQ4932 (gQ3120@make-collector))) (let ((gQ4943@swap (lambda () (begin (let ((gQ4945@t (gQ4933@gQ4924))) (begin (gQ4933@gQ4924 gQ4937@gQ492c) (set! gQ4937@gQ492c gQ4945@t))) (let ((gQ4947@t (gQ4934@gQ4926))) (begin (gQ4934@gQ4926 gQ4938@gQ492e) (set! gQ4938@gQ492e gQ4947@t))) (let ((gQ4949@t (gQ4935@gQ4928))) (begin (gQ4935@gQ4928 gQ4939@gQ4930) (set! gQ4939@gQ4930 gQ4949@t))) (let ((gQ494b@t (gQ4936@gQ492a))) (begin (gQ4936@gQ492a gQ493a@gQ4932) (set! gQ493a@gQ4932 gQ494b@t))))))) (dynamic-wind gQ4943@swap (lambda () (gQ312a@chi-interaction-expr gQ491d@x gQ4917@rib gQ4918@r)) gQ4943@swap)))) (lambda (gQ494d@gQ4920 gQ494e@gQ4922) (let ((gQ4951@r^ gQ494e@gQ4922) (gQ4952@e gQ494d@gQ4920)) (begin (gQ3160@set-interaction-env-r! gQ48de@env gQ4951@r^) (values gQ4952@e (gQ4919@rtc)))))))) (assertion-violation 'expand '"not an environment" gQ48de@env))))) (set! gQ4be3@gQ3178@expand gQ3178@expand) (set! gQ317a@eval (lambda (gQ4955@x gQ4956@env) (begin (if (not (gQ316e@environment? gQ4956@env)) (error 'eval '"not an environment" gQ4956@env) (void)) (call-with-values (lambda () (gQ3178@expand gQ4955@x gQ4956@env)) (lambda (gQ495d@gQ495a gQ495e@gQ495c) (let ((gQ4961@invoke-req* gQ495e@gQ495c) (gQ4962@x gQ495d@gQ495a)) (begin (for-each gQ2ccf@gQ2b1d@invoke-library gQ4961@invoke-req*) (eval-core (gQ2a59@gQ2a11@expanded->core gQ4962@x))))))))) (set! gQ4be4@gQ317a@eval gQ317a@eval) (set! gQ317c@library-expander (lambda gQ49d3 (let ((gQ49d4 (length gQ49d3))) (if (= gQ49d4 '3) (apply (lambda (gQ4965@x gQ4966@filename gQ4967@verify-name) (letrec* ((gQ496c@build-visit-code (lambda (gQ49c1@macro*) (if (null? gQ49c1@macro*) (gQ2e19@gQ2d7a@build-void) (gQ2e18@gQ2d78@build-sequence '#f (map (lambda (gQ49c3@x) (let ((gQ49c5@loc (car gQ49c3@x)) (gQ49c6@src (cddr gQ49c3@x))) (list 'set! gQ49c5@loc gQ49c6@src))) gQ49c1@macro*))))) (gQ496e@visit! (lambda (gQ49b9@macro*) (for-each (lambda (gQ49bb@x) (let ((gQ49bd@loc (car gQ49bb@x)) (gQ49be@proc (cadr gQ49bb@x))) (set-symbol-value! gQ49bd@loc gQ49be@proc))) gQ49b9@macro*)))) (call-with-values (lambda () (gQ312e@core-library-expander gQ4965@x gQ4967@verify-name)) (lambda (gQ4981@gQ4970 gQ4982@gQ4972 gQ4983@gQ4974 gQ4984@gQ4976 gQ4985@gQ4978 gQ4986@gQ497a gQ4987@gQ497c gQ4988@gQ497e gQ4989@gQ4980) (let ((gQ4993@export-env gQ4989@gQ4980) (gQ4994@export-subst gQ4988@gQ497e) (gQ4995@macro* gQ4987@gQ497c) (gQ4996@invoke-code gQ4986@gQ497a) (gQ4997@vis* gQ4985@gQ4978) (gQ4998@inv* gQ4984@gQ4976) (gQ4999@imp* gQ4983@gQ4974) (gQ499a@ver gQ4982@gQ4972) (gQ499b@name gQ4981@gQ4970)) (let ((gQ49a5@id (gensym)) (gQ49a6@name gQ499b@name) (gQ49a7@ver gQ499a@ver) (gQ49a8@imp* (map gQ2cd3@gQ2b25@library-spec gQ4999@imp*)) (gQ49a9@vis* (map gQ2cd3@gQ2b25@library-spec gQ4997@vis*)) (gQ49aa@inv* (map gQ2cd3@gQ2b25@library-spec gQ4998@inv*)) (gQ49ab@visit-proc (lambda () (gQ496e@visit! gQ4995@macro*))) (gQ49ac@invoke-proc (lambda () (eval-core (gQ2a59@gQ2a11@expanded->core gQ4996@invoke-code)))) (gQ49ad@visit-code (gQ496c@build-visit-code gQ4995@macro*)) (gQ49ae@invoke-code gQ4996@invoke-code)) (begin (gQ2ccd@gQ2b19@install-library gQ49a5@id gQ49a6@name gQ49a7@ver gQ49a8@imp* gQ49a9@vis* gQ49aa@inv* gQ4994@export-subst gQ4993@export-env gQ49ab@visit-proc gQ49ac@invoke-proc gQ49ad@visit-code gQ49ae@invoke-code '#t gQ4966@filename) (values gQ49a5@id gQ49a6@name gQ49a7@ver gQ49a8@imp* gQ49a9@vis* gQ49aa@inv* gQ49ae@invoke-code gQ49ad@visit-code gQ4994@export-subst gQ4993@export-env)))))))) gQ49d3) (if (= gQ49d4 '2) (apply (lambda (gQ49c9@x gQ49ca@filename) (gQ317c@library-expander gQ49c9@x gQ49ca@filename (lambda (gQ49cd@x) (values)))) gQ49d3) (if (= gQ49d4 '1) (apply (lambda (gQ49cf@x) (gQ317c@library-expander gQ49cf@x '#f (lambda (gQ49d1@x) (values)))) gQ49d3) (error 'apply '"invalid arg count"))))))) (set! gQ4be5@gQ317c@library-expander gQ317c@library-expander) (set! gQ317e@boot-library-expand (lambda (gQ49d5@x) (call-with-values (lambda () (gQ317c@library-expander gQ49d5@x)) (lambda (gQ49eb@gQ49d8 gQ49ec@gQ49da gQ49ed@gQ49dc gQ49ee@gQ49de gQ49ef@gQ49e0 gQ49f0@gQ49e2 gQ49f1@gQ49e4 gQ49f2@gQ49e6 gQ49f3@gQ49e8 gQ49f4@gQ49ea) (let ((gQ49ff@export-env gQ49f4@gQ49ea) (gQ4a00@export-subst gQ49f3@gQ49e8) (gQ4a01@visit-code gQ49f2@gQ49e6) (gQ4a02@invoke-code gQ49f1@gQ49e4) (gQ4a03@inv* gQ49f0@gQ49e2) (gQ4a04@vis* gQ49ef@gQ49e0) (gQ4a05@imp* gQ49ee@gQ49de) (gQ4a06@ver gQ49ed@gQ49dc) (gQ4a07@name gQ49ec@gQ49da) (gQ4a08@id gQ49eb@gQ49d8)) (values gQ4a07@name gQ4a02@invoke-code gQ4a00@export-subst gQ49ff@export-env)))))) (set! gQ4be6@gQ317e@boot-library-expand gQ317e@boot-library-expand) (set! gQ3180@rev-map-append (lambda (gQ4a13@f gQ4a14@ls gQ4a15@ac) (if (null? gQ4a14@ls) gQ4a15@ac (gQ3180@rev-map-append gQ4a13@f (cdr gQ4a14@ls) (cons (gQ4a13@f (car gQ4a14@ls)) gQ4a15@ac))))) (set! gQ4be7@gQ3180@rev-map-append gQ3180@rev-map-append) (set! gQ3182@build-exports (lambda (gQ4a19@lex*+loc* gQ4a1a@init*) (gQ2e18@gQ2d78@build-sequence '#f (cons (gQ2e19@gQ2d7a@build-void) (gQ3180@rev-map-append (lambda (gQ4a1d@x) (list 'set! (cdr gQ4a1d@x) (car gQ4a1d@x))) gQ4a19@lex*+loc* gQ4a1a@init*))))) (set! gQ4be8@gQ3182@build-exports gQ3182@build-exports) (set! gQ3184@make-export-subst (lambda (gQ4a1f@name* gQ4a20@id*) (map (lambda (gQ4a23@name gQ4a24@id) (let ((gQ4a27@label (gQ2ec9@id->label gQ4a24@id))) (begin (if (not gQ4a27@label) (gQ319a@syntax-violation '#f '"cannot export unbound identifier" gQ4a24@id) (void)) (cons gQ4a23@name gQ4a27@label)))) gQ4a1f@name* gQ4a20@id*))) (set! gQ4be9@gQ3184@make-export-subst gQ3184@make-export-subst) (set! gQ3186@make-export-env/macros (lambda (gQ4a29@lex* gQ4a2a@loc* gQ4a2b@r) (letrec* ((gQ4a30@lookup (lambda (gQ4a4d@x) (let gQ4a55@f ((gQ4a4f@x gQ4a4d@x) (gQ4a50@lex* gQ4a29@lex*) (gQ4a51@loc* gQ4a2a@loc*)) (if (pair? gQ4a50@lex*) (if (eq? gQ4a4f@x (car gQ4a50@lex*)) (car gQ4a51@loc*) (gQ4a55@f gQ4a4f@x (cdr gQ4a50@lex*) (cdr gQ4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let gQ4a39@f ((gQ4a31@r gQ4a2b@r) (gQ4a32@env '()) (gQ4a33@global* '()) (gQ4a34@macro* '())) (if (null? gQ4a31@r) (values gQ4a32@env gQ4a33@global* gQ4a34@macro*) (let ((gQ4a3b@x (car gQ4a31@r))) (let ((gQ4a3d@label (car gQ4a3b@x)) (gQ4a3e@b (cdr gQ4a3b@x))) (let ((gQ4a41@t (gQ2ecf@binding-type gQ4a3e@b))) (if (memv gQ4a41@t '(lexical)) (let ((gQ4a43@v (gQ2ed1@binding-value gQ4a3e@b))) (let ((gQ4a45@loc (gQ4a30@lookup (gQ3044@lexical-var gQ4a43@v))) (gQ4a46@type (if (gQ3046@lexical-mutable? gQ4a43@v) 'mutable 'global))) (gQ4a39@f (cdr gQ4a31@r) (cons (cons* gQ4a3d@label gQ4a46@type gQ4a45@loc) gQ4a32@env) (cons (cons (gQ3044@lexical-var gQ4a43@v) gQ4a45@loc) gQ4a33@global*) gQ4a34@macro*))) (if (memv gQ4a41@t '(local-macro)) (let ((gQ4a49@loc (gensym))) (gQ4a39@f (cdr gQ4a31@r) (cons (cons* gQ4a3d@label 'global-macro gQ4a49@loc) gQ4a32@env) gQ4a33@global* (cons (cons gQ4a49@loc (gQ2ed1@binding-value gQ4a3e@b)) gQ4a34@macro*))) (if (memv gQ4a41@t '(local-macro!)) (let ((gQ4a4b@loc (gensym))) (gQ4a39@f (cdr gQ4a31@r) (cons (cons* gQ4a3d@label 'global-macro! gQ4a4b@loc) gQ4a32@env) gQ4a33@global* (cons (cons gQ4a4b@loc (gQ2ed1@binding-value gQ4a3e@b)) gQ4a34@macro*))) (if (memv gQ4a41@t '($rtd $module)) (gQ4a39@f (cdr gQ4a31@r) (cons gQ4a3b@x gQ4a32@env) gQ4a33@global* gQ4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (gQ2ecf@binding-type gQ4a3e@b) (gQ2ed1@binding-value gQ4a3e@b)))))))))))))) (set! gQ4bea@gQ3186@make-export-env/macros gQ3186@make-export-env/macros) (set! gQ3188@generate-temporaries (lambda (gQ4a57@ls) (let ((gQ4a59@t gQ4a57@ls)) (let ((gQ4a5b@ls/false (gQ30ba@syntax-dispatch gQ4a59@t 'each-any))) (if gQ4a5b@ls/false (apply (lambda (gQ4a5d@ls) (map (lambda (gQ4a5f@x) (make-simple-struct 'stx '5 (list (let ((gQ4a61@x (gQ31a0@syntax->datum gQ4a5f@x))) (if (or (symbol? gQ4a61@x) (string? gQ4a61@x)) (gensym gQ4a61@x) (gensym 't))) gQ2e37@top-mark* '() '()))) gQ4a5d@ls)) gQ4a5b@ls/false) (let ((gQ4a63@t gQ4a59@t)) (let ((gQ4a65@ls/false (gQ30ba@syntax-dispatch gQ4a63@t '_))) (if gQ4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) gQ4a65@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4a63@t))))))))) (set! gQ4beb@gQ3188@generate-temporaries gQ3188@generate-temporaries) (set! gQ318a@free-identifier=? (lambda (gQ4a67@x gQ4a68@y) (if (gQ2eb3@id? gQ4a67@x) (if (gQ2eb3@id? gQ4a68@y) (gQ2eb9@free-id=? gQ4a67@x gQ4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" gQ4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" gQ4a67@x)))) (set! gQ4bec@gQ318a@free-identifier=? gQ318a@free-identifier=?) (set! gQ318c@bound-identifier=? (lambda (gQ4a6b@x gQ4a6c@y) (if (gQ2eb3@id? gQ4a6b@x) (if (gQ2eb3@id? gQ4a6c@y) (gQ2eb7@bound-id=? gQ4a6b@x gQ4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" gQ4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" gQ4a6b@x)))) (set! gQ4bed@gQ318c@bound-identifier=? gQ318c@bound-identifier=?) (set! gQ318e@make-source-condition (lambda (gQ4a6f@x) (letrec* ((gQ4a79@gQ4a74 (make-record-type-descriptor '&source-information gQ4ecf@gQ4c16@&condition-rtd 'gQ4a77 '#f '#f '#((immutable file-name) (immutable line)))) (gQ4a7b@gQ4a76 '#f) (gQ4a7d@gQ4a75 (make-record-constructor-descriptor gQ4a79@gQ4a74 gQ4ed0@gQ4c18@&condition-rcd gQ4a7b@gQ4a76)) (gQ4a80@gQ4a73 (record-predicate gQ4a79@gQ4a74)) (gQ4a82@make-source-condition (record-constructor gQ4a7d@gQ4a75)) (gQ4a84@gQ4a71 (record-accessor gQ4a79@gQ4a74 '0)) (gQ4a86@gQ4a72 (record-accessor gQ4a79@gQ4a74 '1)) (gQ4a88@source-condition? (condition-predicate gQ4a79@gQ4a74)) (gQ4a8a@source-filename (condition-accessor gQ4a79@gQ4a74 gQ4a84@gQ4a71)) (gQ4a8c@source-character (condition-accessor gQ4a79@gQ4a74 gQ4a86@gQ4a72))) (if (and (pair? gQ4a6f@x) (pair? (cdr gQ4a6f@x))) (gQ4a82@make-source-condition (car gQ4a6f@x) (cadr gQ4a6f@x)) (condition))))) (set! gQ4bee@gQ318e@make-source-condition gQ318e@make-source-condition) (set! gQ3190@extract-position-condition (lambda (gQ4a8d@x) (gQ318e@make-source-condition (gQ3192@expression-position gQ4a8d@x)))) (set! gQ4bef@gQ3190@extract-position-condition gQ3190@extract-position-condition) (set! gQ3192@expression-position (lambda (gQ4a8f@x) (and (gQ2e7f@stx? gQ4a8f@x) (let ((gQ4a91@x (gQ2e81@stx-expr gQ4a8f@x))) (and (gQ29f7@gQ28c9@annotation? gQ4a91@x) (gQ29f8@gQ28cb@annotation-source gQ4a91@x)))))) (set! gQ4bf0@gQ3192@expression-position gQ3192@expression-position) (set! gQ3194@assertion-error (lambda (gQ4a93@expr gQ4a94@pos) (raise (condition (gQ4eff@gQ4cda@make-assertion-violation) (gQ4f11@gQ4d0c@make-who-condition 'assert) (gQ4ed5@gQ4c6d@make-message-condition '"assertion failed") (gQ4f07@gQ4cf1@make-irritants-condition (list gQ4a93@expr)) (gQ318e@make-source-condition gQ4a94@pos))))) (set! gQ4bf1@gQ3194@assertion-error gQ3194@assertion-error) (set! gQ3196@syntax-error (lambda (gQ4a97@x . gQ4a99@args) (begin (if (not (for-all string? gQ4a99@args)) (assertion-violation 'syntax-error '"invalid argument" gQ4a99@args) (void)) (raise (condition (gQ4ed5@gQ4c6d@make-message-condition (if (null? gQ4a99@args) '"invalid syntax" (apply string-append gQ4a99@args))) (gQ4f33@gQ4d68@make-syntax-violation (gQ31a0@syntax->datum gQ4a97@x) '#f) (gQ3190@extract-position-condition gQ4a97@x)))))) (set! gQ4bf2@gQ3196@syntax-error gQ3196@syntax-error) (set! gQ3198@syntax-violation* (lambda (gQ4a9b@who gQ4a9c@msg gQ4a9d@form gQ4a9e@condition-object) (begin (if (not (string? gQ4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" gQ4a9c@msg) (void)) (let ((gQ4aa3@who (if (or (string? gQ4a9b@who) (symbol? gQ4a9b@who)) gQ4a9b@who (if (not gQ4a9b@who) (let ((gQ4aa5@t gQ4a9d@form)) (let ((gQ4aa7@ls/false (gQ30ba@syntax-dispatch gQ4aa5@t 'any))) (if (and gQ4aa7@ls/false (apply (lambda (gQ4aa9@id) (gQ2eb3@id? gQ4aa9@id)) gQ4aa7@ls/false)) (apply (lambda (gQ4aab@id) (gQ31a0@syntax->datum gQ4aab@id)) gQ4aa7@ls/false) (let ((gQ4aad@t gQ4aa5@t)) (let ((gQ4aaf@ls/false (gQ30ba@syntax-dispatch gQ4aad@t '(any . any)))) (if (and gQ4aaf@ls/false (apply (lambda (gQ4ab1@id gQ4ab2@rest) (gQ2eb3@id? gQ4ab1@id)) gQ4aaf@ls/false)) (apply (lambda (gQ4ab5@id gQ4ab6@rest) (gQ31a0@syntax->datum gQ4ab5@id)) gQ4aaf@ls/false) (let ((gQ4ab9@t gQ4aad@t)) (let ((gQ4abb@ls/false (gQ30ba@syntax-dispatch gQ4ab9@t '_))) (if gQ4abb@ls/false (apply (lambda () '#f) gQ4abb@ls/false) (gQ319a@syntax-violation '#f '"invalid syntax" gQ4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" gQ4a9b@who))))) (raise (condition (if gQ4aa3@who (gQ4f11@gQ4d0c@make-who-condition gQ4aa3@who) (condition)) (gQ4ed5@gQ4c6d@make-message-condition gQ4a9c@msg) gQ4a9e@condition-object (gQ3190@extract-position-condition gQ4a9d@form))))))) (set! gQ4bf3@gQ3198@syntax-violation* gQ3198@syntax-violation*) (set! gQ319a@syntax-violation (lambda gQ4acb (let ((gQ4acc (length gQ4acb))) (if (= gQ4acc '3) (apply (lambda (gQ4abd@who gQ4abe@msg gQ4abf@form) (gQ319a@syntax-violation gQ4abd@who gQ4abe@msg gQ4abf@form '#f)) gQ4acb) (if (= gQ4acc '4) (apply (lambda (gQ4ac3@who gQ4ac4@msg gQ4ac5@form gQ4ac6@subform) (gQ3198@syntax-violation* gQ4ac3@who gQ4ac4@msg gQ4ac5@form (gQ4f33@gQ4d68@make-syntax-violation (gQ31a0@syntax->datum gQ4ac5@form) (gQ31a0@syntax->datum gQ4ac6@subform)))) gQ4acb) (error 'apply '"invalid arg count")))))) (set! gQ4bf4@gQ319a@syntax-violation gQ319a@syntax-violation) (set! gQ319c@identifier? (lambda (gQ4acd@x) (gQ2eb3@id? gQ4acd@x))) (set! gQ4bf5@gQ319c@identifier? gQ319c@identifier?) (set! gQ319e@datum->syntax (lambda (gQ4acf@id gQ4ad0@datum) (if (gQ2eb3@id? gQ4acf@id) (gQ2e93@datum->stx gQ4acf@id gQ4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" gQ4acf@id)))) (set! gQ4bf6@gQ319e@datum->syntax gQ319e@datum->syntax) (set! gQ31a0@syntax->datum (lambda (gQ4ad3@x) (gQ2ec7@stx->datum gQ4ad3@x))) (set! gQ4bf7@gQ31a0@syntax->datum gQ31a0@syntax->datum) (set! gQ31a2@ungensym-all (lambda (gQ4ad5@code) (if (pair? gQ4ad5@code) (cons (gQ31a2@ungensym-all (car gQ4ad5@code)) (gQ31a2@ungensym-all (cdr gQ4ad5@code))) (if (symbol? gQ4ad5@code) (ungensym gQ4ad5@code) gQ4ad5@code)))) (set! gQ4bf8@gQ31a2@ungensym-all gQ31a2@ungensym-all) (set! gQ31a4@compile-r6rs-top-level (lambda (gQ4ad7@x*) (call-with-values (lambda () (gQ3132@top-level-expander gQ4ad7@x*)) (lambda (gQ4add@gQ4ada gQ4ade@gQ4adc) (let ((gQ4ae1@invoke-code gQ4ade@gQ4adc) (gQ4ae2@lib* gQ4add@gQ4ada)) (lambda () (begin (for-each gQ2ccf@gQ2b1d@invoke-library gQ4ae2@lib*) (let ((gQ4ae5@expanded (gQ2a59@gQ2a11@expanded->core gQ4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (gQ31a2@ungensym-all gQ4ae5@expanded)) (void)) (eval-core gQ4ae5@expanded)))))))))) (set! gQ4bf9@gQ31a4@compile-r6rs-top-level gQ31a4@compile-r6rs-top-level) (set! gQ31a6@pre-compile-r6rs-top-level (lambda (gQ4ae7@x*) (call-with-values (lambda () (gQ3132@top-level-expander gQ4ae7@x*)) (lambda (gQ4aed@gQ4aea gQ4aee@gQ4aec) (let ((gQ4af1@invoke-code gQ4aee@gQ4aec) (gQ4af2@lib* gQ4aed@gQ4aea)) (begin (for-each gQ2ccf@gQ2b1d@invoke-library gQ4af2@lib*) (gQ2a01@gQ28dd@compile-core (gQ2a59@gQ2a11@expanded->core gQ4af1@invoke-code)))))))) (set! gQ4bfa@gQ31a6@pre-compile-r6rs-top-level gQ31a6@pre-compile-r6rs-top-level) (set! gQ31a8@interaction-environment (let ((gQ4af5@the-env '#f)) (lambda () (or gQ4af5@the-env (let ((gQ4af7@lib (gQ2cc8@gQ2b0f@find-library-by-name '(mosh interaction))) (gQ4af8@rib (gQ2e67@make-empty-rib))) (begin (let ((gQ4afb@subst (gQ2caa@gQ2ad3@library-subst gQ4af7@lib))) (begin (gQ2e53@set-rib-sym*! gQ4af8@rib (map car gQ4afb@subst)) (gQ2e57@set-rib-mark**! gQ4af8@rib (map (lambda (gQ4afd@x) gQ2e37@top-mark*) gQ4afb@subst)) (gQ2e5b@set-rib-label*! gQ4af8@rib (map cdr gQ4afb@subst)))) (let ((gQ4aff@env (make-simple-struct 'interaction-env '4 (list gQ4af8@rib '() '())))) (begin (set! gQ4af5@the-env gQ4aff@env) gQ4aff@env)))))))) (set! gQ4bfb@gQ31a8@interaction-environment gQ31a8@interaction-environment) (set! gQ31aa@top-level-context (gQ2a03@gQ28e1@make-parameter '#f)) (set! gQ4bfc@gQ31aa@top-level-context gQ31aa@top-level-context) (gQ2cc5@gQ2b09@current-library-expander gQ317c@library-expander))
(begin (set! gQ4c0b@gQ4c06 (unspecified)) (set! gQ4c0d@gQ4c08 (unspecified)) (set! gQ4c0f@gQ4c07 (unspecified)) (set! gQ4c12@&condition? (unspecified)) (set! gQ4c14@make-&condition (unspecified)) (set! gQ4c16@&condition-rtd (unspecified)) (set! gQ4c18@&condition-rcd (unspecified)) (set! gQ4c64@gQ4c5f (unspecified)) (set! gQ4c66@gQ4c61 (unspecified)) (set! gQ4c68@gQ4c60 (unspecified)) (set! gQ4c6b@p? (unspecified)) (set! gQ4c6d@make-message-condition (unspecified)) (set! gQ4c6f@gQ4c5e (unspecified)) (set! gQ4c71@message-condition? (unspecified)) (set! gQ4c73@condition-message (unspecified)) (set! gQ4c75@&message-rtd (unspecified)) (set! gQ4c77@&message-rcd (unspecified)) (set! gQ4c7d@gQ4c78 (unspecified)) (set! gQ4c7f@gQ4c7a (unspecified)) (set! gQ4c81@gQ4c79 (unspecified)) (set! gQ4c84@p? (unspecified)) (set! gQ4c86@make-warning (unspecified)) (set! gQ4c88@warning? (unspecified)) (set! gQ4c8a@&warning-rtd (unspecified)) (set! gQ4c8c@&warning-rcd (unspecified)) (set! gQ4c92@gQ4c8d (unspecified)) (set! gQ4c94@gQ4c8f (unspecified)) (set! gQ4c96@gQ4c8e (unspecified)) (set! gQ4c99@p? (unspecified)) (set! gQ4c9b@make-serious-condition (unspecified)) (set! gQ4c9d@serious-condition? (unspecified)) (set! gQ4c9f@&serious-rtd (unspecified)) (set! gQ4ca1@&serious-rcd (unspecified)) (set! gQ4ca7@gQ4ca2 (unspecified)) (set! gQ4ca9@gQ4ca4 (unspecified)) (set! gQ4cab@gQ4ca3 (unspecified)) (set! gQ4cae@p? (unspecified)) (set! gQ4cb0@make-error (unspecified)) (set! gQ4cb2@error? (unspecified)) (set! gQ4cb4@&error-rtd (unspecified)) (set! gQ4cb6@&error-rcd (unspecified)) (set! gQ4cbc@gQ4cb7 (unspecified)) (set! gQ4cbe@gQ4cb9 (unspecified)) (set! gQ4cc0@gQ4cb8 (unspecified)) (set! gQ4cc3@p? (unspecified)) (set! gQ4cc5@make-violation (unspecified)) (set! gQ4cc7@violation? (unspecified)) (set! gQ4cc9@&violation-rtd (unspecified)) (set! gQ4ccb@&violation-rcd (unspecified)) (set! gQ4cd1@gQ4ccc (unspecified)) (set! gQ4cd3@gQ4cce (unspecified)) (set! gQ4cd5@gQ4ccd (unspecified)) (set! gQ4cd8@p? (unspecified)) (set! gQ4cda@make-assertion-violation (unspecified)) (set! gQ4cdc@assertion-violation? (unspecified)) (set! gQ4cde@&assertion-rtd (unspecified)) (set! gQ4ce0@&assertion-rcd (unspecified)) (set! gQ4ce8@gQ4ce3 (unspecified)) (set! gQ4cea@gQ4ce5 (unspecified)) (set! gQ4cec@gQ4ce4 (unspecified)) (set! gQ4cef@p? (unspecified)) (set! gQ4cf1@make-irritants-condition (unspecified)) (set! gQ4cf3@gQ4ce2 (unspecified)) (set! gQ4cf5@irritants-condition? (unspecified)) (set! gQ4cf7@condition-irritants (unspecified)) (set! gQ4cf9@&irritants-rtd (unspecified)) (set! gQ4cfb@&irritants-rcd (unspecified)) (set! gQ4d03@gQ4cfe (unspecified)) (set! gQ4d05@gQ4d00 (unspecified)) (set! gQ4d07@gQ4cff (unspecified)) (set! gQ4d0a@p? (unspecified)) (set! gQ4d0c@make-who-condition (unspecified)) (set! gQ4d0e@gQ4cfd (unspecified)) (set! gQ4d10@who-condition? (unspecified)) (set! gQ4d12@condition-who (unspecified)) (set! gQ4d14@&who-rtd (unspecified)) (set! gQ4d16@&who-rcd (unspecified)) (set! gQ4d1c@gQ4d17 (unspecified)) (set! gQ4d1e@gQ4d19 (unspecified)) (set! gQ4d20@gQ4d18 (unspecified)) (set! gQ4d23@p? (unspecified)) (set! gQ4d25@make-non-continuable-violation (unspecified)) (set! gQ4d27@non-continuable-violation? (unspecified)) (set! gQ4d29@&non-continuable-rtd (unspecified)) (set! gQ4d2b@&non-continuable-rcd (unspecified)) (set! gQ4d31@gQ4d2c (unspecified)) (set! gQ4d33@gQ4d2e (unspecified)) (set! gQ4d35@gQ4d2d (unspecified)) (set! gQ4d38@p? (unspecified)) (set! gQ4d3a@make-implementation-restriction-violation (unspecified)) (set! gQ4d3c@implementation-restriction-violation? (unspecified)) (set! gQ4d3e@&implementation-restriction-rtd (unspecified)) (set! gQ4d40@&implementation-restriction-rcd (unspecified)) (set! gQ4d46@gQ4d41 (unspecified)) (set! gQ4d48@gQ4d43 (unspecified)) (set! gQ4d4a@gQ4d42 (unspecified)) (set! gQ4d4d@p? (unspecified)) (set! gQ4d4f@make-lexical-violation (unspecified)) (set! gQ4d51@lexical-violation? (unspecified)) (set! gQ4d53@&lexical-rtd (unspecified)) (set! gQ4d55@&lexical-rcd (unspecified)) (set! gQ4d5f@gQ4d5a (unspecified)) (set! gQ4d61@gQ4d5c (unspecified)) (set! gQ4d63@gQ4d5b (unspecified)) (set! gQ4d66@p? (unspecified)) (set! gQ4d68@make-syntax-violation (unspecified)) (set! gQ4d6a@gQ4d57 (unspecified)) (set! gQ4d6c@gQ4d59 (unspecified)) (set! gQ4d6e@syntax-violation? (unspecified)) (set! gQ4d70@syntax-violation-form (unspecified)) (set! gQ4d72@syntax-violation-subform (unspecified)) (set! gQ4d74@&syntax-rtd (unspecified)) (set! gQ4d76@&syntax-rcd (unspecified)) (set! gQ4d7c@gQ4d77 (unspecified)) (set! gQ4d7e@gQ4d79 (unspecified)) (set! gQ4d80@gQ4d78 (unspecified)) (set! gQ4d83@p? (unspecified)) (set! gQ4d85@make-undefined-violation (unspecified)) (set! gQ4d87@undefined-violation? (unspecified)) (set! gQ4d89@&undefined-rtd (unspecified)) (set! gQ4d8b@&undefined-rcd (unspecified)) (set! gQ4d91@gQ4d8c (unspecified)) (set! gQ4d93@gQ4d8e (unspecified)) (set! gQ4d95@gQ4d8d (unspecified)) (set! gQ4d98@p? (unspecified)) (set! gQ4d9a@make-i/o-error (unspecified)) (set! gQ4d9c@i/o-error? (unspecified)) (set! gQ4d9e@&i/o-rtd (unspecified)) (set! gQ4da0@&i/o-rcd (unspecified)) (set! gQ4da6@gQ4da1 (unspecified)) (set! gQ4da8@gQ4da3 (unspecified)) (set! gQ4daa@gQ4da2 (unspecified)) (set! gQ4dad@p? (unspecified)) (set! gQ4daf@make-i/o-read-error (unspecified)) (set! gQ4db1@i/o-read-error? (unspecified)) (set! gQ4db3@&i/o-read-rtd (unspecified)) (set! gQ4db5@&i/o-read-rcd (unspecified)) (set! gQ4dbb@gQ4db6 (unspecified)) (set! gQ4dbd@gQ4db8 (unspecified)) (set! gQ4dbf@gQ4db7 (unspecified)) (set! gQ4dc2@p? (unspecified)) (set! gQ4dc4@make-i/o-write-error (unspecified)) (set! gQ4dc6@i/o-write-error? (unspecified)) (set! gQ4dc8@&i/o-write-rtd (unspecified)) (set! gQ4dca@&i/o-write-rcd (unspecified)) (set! gQ4dd2@gQ4dcd (unspecified)) (set! gQ4dd4@gQ4dcf (unspecified)) (set! gQ4dd6@gQ4dce (unspecified)) (set! gQ4dd9@p? (unspecified)) (set! gQ4ddb@make-i/o-invalid-position-error (unspecified)) (set! gQ4ddd@gQ4dcc (unspecified)) (set! gQ4ddf@i/o-invalid-position-error? (unspecified)) (set! gQ4de1@i/o-error-position (unspecified)) (set! gQ4de3@&i/o-invalid-position-rtd (unspecified)) (set! gQ4de5@&i/o-invalid-position-rcd (unspecified)) (set! gQ4ded@gQ4de8 (unspecified)) (set! gQ4def@gQ4dea (unspecified)) (set! gQ4df1@gQ4de9 (unspecified)) (set! gQ4df4@p? (unspecified)) (set! gQ4df6@make-i/o-filename-error (unspecified)) (set! gQ4df8@gQ4de7 (unspecified)) (set! gQ4dfa@i/o-filename-error? (unspecified)) (set! gQ4dfc@i/o-error-filename (unspecified)) (set! gQ4dfe@&i/o-filename-rtd (unspecified)) (set! gQ4e00@&i/o-filename-rcd (unspecified)) (set! gQ4e06@gQ4e01 (unspecified)) (set! gQ4e08@gQ4e03 (unspecified)) (set! gQ4e0a@gQ4e02 (unspecified)) (set! gQ4e0d@p? (unspecified)) (set! gQ4e0f@make-i/o-file-protection-error (unspecified)) (set! gQ4e11@i/o-file-protection-error? (unspecified)) (set! gQ4e13@&i/o-file-protection-rtd (unspecified)) (set! gQ4e15@&i/o-file-protection-rcd (unspecified)) (set! gQ4e1b@gQ4e16 (unspecified)) (set! gQ4e1d@gQ4e18 (unspecified)) (set! gQ4e1f@gQ4e17 (unspecified)) (set! gQ4e22@p? (unspecified)) (set! gQ4e24@make-i/o-file-is-read-only-error (unspecified)) (set! gQ4e26@i/o-file-is-read-only-error? (unspecified)) (set! gQ4e28@&i/o-file-is-read-only-rtd (unspecified)) (set! gQ4e2a@&i/o-file-is-read-only-rcd (unspecified)) (set! gQ4e30@gQ4e2b (unspecified)) (set! gQ4e32@gQ4e2d (unspecified)) (set! gQ4e34@gQ4e2c (unspecified)) (set! gQ4e37@p? (unspecified)) (set! gQ4e39@make-i/o-file-already-exists-error (unspecified)) (set! gQ4e3b@i/o-file-already-exists-error? (unspecified)) (set! gQ4e3d@&i/o-file-already-exists-rtd (unspecified)) (set! gQ4e3f@&i/o-file-already-exists-rcd (unspecified)) (set! gQ4e45@gQ4e40 (unspecified)) (set! gQ4e47@gQ4e42 (unspecified)) (set! gQ4e49@gQ4e41 (unspecified)) (set! gQ4e4c@p? (unspecified)) (set! gQ4e4e@make-i/o-file-does-not-exist-error (unspecified)) (set! gQ4e50@i/o-file-does-not-exist-error? (unspecified)) (set! gQ4e52@&i/o-file-does-not-exist-rtd (unspecified)) (set! gQ4e54@&i/o-file-does-not-exist-rcd (unspecified)) (set! gQ4e5c@gQ4e57 (unspecified)) (set! gQ4e5e@gQ4e59 (unspecified)) (set! gQ4e60@gQ4e58 (unspecified)) (set! gQ4e63@p? (unspecified)) (set! gQ4e65@make-i/o-port-error (unspecified)) (set! gQ4e67@gQ4e56 (unspecified)) (set! gQ4e69@i/o-port-error? (unspecified)) (set! gQ4e6b@i/o-error-port (unspecified)) (set! gQ4e6d@&i/o-port-rtd (unspecified)) (set! gQ4e6f@&i/o-port-rcd (unspecified)) (set! gQ4e75@gQ4e70 (unspecified)) (set! gQ4e77@gQ4e72 (unspecified)) (set! gQ4e79@gQ4e71 (unspecified)) (set! gQ4e7c@p? (unspecified)) (set! gQ4e7e@make-i/o-decoding-error (unspecified)) (set! gQ4e80@i/o-decoding-error? (unspecified)) (set! gQ4e82@&i/o-decoding-rtd (unspecified)) (set! gQ4e84@&i/o-decoding-rcd (unspecified)) (set! gQ4e8c@gQ4e87 (unspecified)) (set! gQ4e8e@gQ4e89 (unspecified)) (set! gQ4e90@gQ4e88 (unspecified)) (set! gQ4e93@p? (unspecified)) (set! gQ4e95@make-i/o-encoding-error (unspecified)) (set! gQ4e97@gQ4e86 (unspecified)) (set! gQ4e99@i/o-encoding-error? (unspecified)) (set! gQ4e9b@i/o-encoding-error-char (unspecified)) (set! gQ4e9d@&i/o-encoding-rtd (unspecified)) (set! gQ4e9f@&i/o-encoding-rcd (unspecified)) (set! gQ4ea5@gQ4ea0 (unspecified)) (set! gQ4ea7@gQ4ea2 (unspecified)) (set! gQ4ea9@gQ4ea1 (unspecified)) (set! gQ4eac@p? (unspecified)) (set! gQ4eae@make-no-infinities-violation (unspecified)) (set! gQ4eb0@no-infinities-violation? (unspecified)) (set! gQ4eb2@&no-infinities-rtd (unspecified)) (set! gQ4eb4@&no-infinities-rcd (unspecified)) (set! gQ4eba@gQ4eb5 (unspecified)) (set! gQ4ebc@gQ4eb7 (unspecified)) (set! gQ4ebe@gQ4eb6 (unspecified)) (set! gQ4ec1@p? (unspecified)) (set! gQ4ec3@make-no-nans-violation (unspecified)) (set! gQ4ec5@no-nans-violation? (unspecified)) (set! gQ4ec7@&no-nans-rtd (unspecified)) (set! gQ4ec9@&no-nans-rcd (unspecified)) (set! gQ4c0b@gQ4c06 (make-record-type-descriptor '&condition '#f 'gQ4c09 '#f '#f '#())) (set! gQ4eca@gQ4c0b@gQ4c06 gQ4c0b@gQ4c06) (set! gQ4c0d@gQ4c08 '#f) (set! gQ4ecb@gQ4c0d@gQ4c08 gQ4c0d@gQ4c08) (set! gQ4c0f@gQ4c07 (make-record-constructor-descriptor gQ4c0b@gQ4c06 '#f gQ4c0d@gQ4c08)) (set! gQ4ecc@gQ4c0f@gQ4c07 gQ4c0f@gQ4c07) (set! gQ4c12@&condition? (record-predicate gQ4c0b@gQ4c06)) (set! gQ4ecd@gQ4c12@&condition? gQ4c12@&condition?) (set! gQ4c14@make-&condition (record-constructor gQ4c0f@gQ4c07)) (set! gQ4ece@gQ4c14@make-&condition gQ4c14@make-&condition) (set! gQ4c16@&condition-rtd gQ4c0b@gQ4c06) (set! gQ4ecf@gQ4c16@&condition-rtd gQ4c16@&condition-rtd) (set! gQ4c18@&condition-rcd gQ4c0f@gQ4c07) (set! gQ4ed0@gQ4c18@&condition-rcd gQ4c18@&condition-rcd) (set! gQ4c64@gQ4c5f (make-record-type-descriptor '&message gQ4c0b@gQ4c06 'gQ4c62 '#f '#f '#((immutable message)))) (set! gQ4ed1@gQ4c64@gQ4c5f gQ4c64@gQ4c5f) (set! gQ4c66@gQ4c61 '#f) (set! gQ4ed2@gQ4c66@gQ4c61 gQ4c66@gQ4c61) (set! gQ4c68@gQ4c60 (make-record-constructor-descriptor gQ4c64@gQ4c5f gQ4c0f@gQ4c07 gQ4c66@gQ4c61)) (set! gQ4ed3@gQ4c68@gQ4c60 gQ4c68@gQ4c60) (set! gQ4c6b@p? (record-predicate gQ4c64@gQ4c5f)) (set! gQ4ed4@gQ4c6b@p? gQ4c6b@p?) (set! gQ4c6d@make-message-condition (record-constructor gQ4c68@gQ4c60)) (set! gQ4ed5@gQ4c6d@make-message-condition gQ4c6d@make-message-condition) (set! gQ4c6f@gQ4c5e (record-accessor gQ4c64@gQ4c5f '0)) (set! gQ4ed6@gQ4c6f@gQ4c5e gQ4c6f@gQ4c5e) (set! gQ4c71@message-condition? (condition-predicate gQ4c64@gQ4c5f)) (set! gQ4ed7@gQ4c71@message-condition? gQ4c71@message-condition?) (set! gQ4c73@condition-message (condition-accessor gQ4c64@gQ4c5f gQ4c6f@gQ4c5e)) (set! gQ4ed8@gQ4c73@condition-message gQ4c73@condition-message) (set! gQ4c75@&message-rtd gQ4c64@gQ4c5f) (set! gQ4ed9@gQ4c75@&message-rtd gQ4c75@&message-rtd) (set! gQ4c77@&message-rcd gQ4c68@gQ4c60) (set! gQ4eda@gQ4c77@&message-rcd gQ4c77@&message-rcd) (set! gQ4c7d@gQ4c78 (make-record-type-descriptor '&warning gQ4c0b@gQ4c06 'gQ4c7b '#f '#f '#())) (set! gQ4edb@gQ4c7d@gQ4c78 gQ4c7d@gQ4c78) (set! gQ4c7f@gQ4c7a '#f) (set! gQ4edc@gQ4c7f@gQ4c7a gQ4c7f@gQ4c7a) (set! gQ4c81@gQ4c79 (make-record-constructor-descriptor gQ4c7d@gQ4c78 gQ4c0f@gQ4c07 gQ4c7f@gQ4c7a)) (set! gQ4edd@gQ4c81@gQ4c79 gQ4c81@gQ4c79) (set! gQ4c84@p? (record-predicate gQ4c7d@gQ4c78)) (set! gQ4ede@gQ4c84@p? gQ4c84@p?) (set! gQ4c86@make-warning (record-constructor gQ4c81@gQ4c79)) (set! gQ4edf@gQ4c86@make-warning gQ4c86@make-warning) (set! gQ4c88@warning? (condition-predicate gQ4c7d@gQ4c78)) (set! gQ4ee0@gQ4c88@warning? gQ4c88@warning?) (set! gQ4c8a@&warning-rtd gQ4c7d@gQ4c78) (set! gQ4ee1@gQ4c8a@&warning-rtd gQ4c8a@&warning-rtd) (set! gQ4c8c@&warning-rcd gQ4c81@gQ4c79) (set! gQ4ee2@gQ4c8c@&warning-rcd gQ4c8c@&warning-rcd) (set! gQ4c92@gQ4c8d (make-record-type-descriptor '&serious gQ4c0b@gQ4c06 'gQ4c90 '#f '#f '#())) (set! gQ4ee3@gQ4c92@gQ4c8d gQ4c92@gQ4c8d) (set! gQ4c94@gQ4c8f '#f) (set! gQ4ee4@gQ4c94@gQ4c8f gQ4c94@gQ4c8f) (set! gQ4c96@gQ4c8e (make-record-constructor-descriptor gQ4c92@gQ4c8d gQ4c0f@gQ4c07 gQ4c94@gQ4c8f)) (set! gQ4ee5@gQ4c96@gQ4c8e gQ4c96@gQ4c8e) (set! gQ4c99@p? (record-predicate gQ4c92@gQ4c8d)) (set! gQ4ee6@gQ4c99@p? gQ4c99@p?) (set! gQ4c9b@make-serious-condition (record-constructor gQ4c96@gQ4c8e)) (set! gQ4ee7@gQ4c9b@make-serious-condition gQ4c9b@make-serious-condition) (set! gQ4c9d@serious-condition? (condition-predicate gQ4c92@gQ4c8d)) (set! gQ4ee8@gQ4c9d@serious-condition? gQ4c9d@serious-condition?) (set! gQ4c9f@&serious-rtd gQ4c92@gQ4c8d) (set! gQ4ee9@gQ4c9f@&serious-rtd gQ4c9f@&serious-rtd) (set! gQ4ca1@&serious-rcd gQ4c96@gQ4c8e) (set! gQ4eea@gQ4ca1@&serious-rcd gQ4ca1@&serious-rcd) (set! gQ4ca7@gQ4ca2 (make-record-type-descriptor '&error gQ4c92@gQ4c8d 'gQ4ca5 '#f '#f '#())) (set! gQ4eeb@gQ4ca7@gQ4ca2 gQ4ca7@gQ4ca2) (set! gQ4ca9@gQ4ca4 '#f) (set! gQ4eec@gQ4ca9@gQ4ca4 gQ4ca9@gQ4ca4) (set! gQ4cab@gQ4ca3 (make-record-constructor-descriptor gQ4ca7@gQ4ca2 gQ4c96@gQ4c8e gQ4ca9@gQ4ca4)) (set! gQ4eed@gQ4cab@gQ4ca3 gQ4cab@gQ4ca3) (set! gQ4cae@p? (record-predicate gQ4ca7@gQ4ca2)) (set! gQ4eee@gQ4cae@p? gQ4cae@p?) (set! gQ4cb0@make-error (record-constructor gQ4cab@gQ4ca3)) (set! gQ4eef@gQ4cb0@make-error gQ4cb0@make-error) (set! gQ4cb2@error? (condition-predicate gQ4ca7@gQ4ca2)) (set! gQ4ef0@gQ4cb2@error? gQ4cb2@error?) (set! gQ4cb4@&error-rtd gQ4ca7@gQ4ca2) (set! gQ4ef1@gQ4cb4@&error-rtd gQ4cb4@&error-rtd) (set! gQ4cb6@&error-rcd gQ4cab@gQ4ca3) (set! gQ4ef2@gQ4cb6@&error-rcd gQ4cb6@&error-rcd) (set! gQ4cbc@gQ4cb7 (make-record-type-descriptor '&violation gQ4c92@gQ4c8d 'gQ4cba '#f '#f '#())) (set! gQ4ef3@gQ4cbc@gQ4cb7 gQ4cbc@gQ4cb7) (set! gQ4cbe@gQ4cb9 '#f) (set! gQ4ef4@gQ4cbe@gQ4cb9 gQ4cbe@gQ4cb9) (set! gQ4cc0@gQ4cb8 (make-record-constructor-descriptor gQ4cbc@gQ4cb7 gQ4c96@gQ4c8e gQ4cbe@gQ4cb9)) (set! gQ4ef5@gQ4cc0@gQ4cb8 gQ4cc0@gQ4cb8) (set! gQ4cc3@p? (record-predicate gQ4cbc@gQ4cb7)) (set! gQ4ef6@gQ4cc3@p? gQ4cc3@p?) (set! gQ4cc5@make-violation (record-constructor gQ4cc0@gQ4cb8)) (set! gQ4ef7@gQ4cc5@make-violation gQ4cc5@make-violation) (set! gQ4cc7@violation? (condition-predicate gQ4cbc@gQ4cb7)) (set! gQ4ef8@gQ4cc7@violation? gQ4cc7@violation?) (set! gQ4cc9@&violation-rtd gQ4cbc@gQ4cb7) (set! gQ4ef9@gQ4cc9@&violation-rtd gQ4cc9@&violation-rtd) (set! gQ4ccb@&violation-rcd gQ4cc0@gQ4cb8) (set! gQ4efa@gQ4ccb@&violation-rcd gQ4ccb@&violation-rcd) (set! gQ4cd1@gQ4ccc (make-record-type-descriptor '&assertion gQ4cbc@gQ4cb7 'gQ4ccf '#f '#f '#())) (set! gQ4efb@gQ4cd1@gQ4ccc gQ4cd1@gQ4ccc) (set! gQ4cd3@gQ4cce '#f) (set! gQ4efc@gQ4cd3@gQ4cce gQ4cd3@gQ4cce) (set! gQ4cd5@gQ4ccd (make-record-constructor-descriptor gQ4cd1@gQ4ccc gQ4cc0@gQ4cb8 gQ4cd3@gQ4cce)) (set! gQ4efd@gQ4cd5@gQ4ccd gQ4cd5@gQ4ccd) (set! gQ4cd8@p? (record-predicate gQ4cd1@gQ4ccc)) (set! gQ4efe@gQ4cd8@p? gQ4cd8@p?) (set! gQ4cda@make-assertion-violation (record-constructor gQ4cd5@gQ4ccd)) (set! gQ4eff@gQ4cda@make-assertion-violation gQ4cda@make-assertion-violation) (set! gQ4cdc@assertion-violation? (condition-predicate gQ4cd1@gQ4ccc)) (set! gQ4f00@gQ4cdc@assertion-violation? gQ4cdc@assertion-violation?) (set! gQ4cde@&assertion-rtd gQ4cd1@gQ4ccc) (set! gQ4f01@gQ4cde@&assertion-rtd gQ4cde@&assertion-rtd) (set! gQ4ce0@&assertion-rcd gQ4cd5@gQ4ccd) (set! gQ4f02@gQ4ce0@&assertion-rcd gQ4ce0@&assertion-rcd) (set! gQ4ce8@gQ4ce3 (make-record-type-descriptor '&irritants gQ4c0b@gQ4c06 'gQ4ce6 '#f '#f '#((immutable irritants)))) (set! gQ4f03@gQ4ce8@gQ4ce3 gQ4ce8@gQ4ce3) (set! gQ4cea@gQ4ce5 '#f) (set! gQ4f04@gQ4cea@gQ4ce5 gQ4cea@gQ4ce5) (set! gQ4cec@gQ4ce4 (make-record-constructor-descriptor gQ4ce8@gQ4ce3 gQ4c0f@gQ4c07 gQ4cea@gQ4ce5)) (set! gQ4f05@gQ4cec@gQ4ce4 gQ4cec@gQ4ce4) (set! gQ4cef@p? (record-predicate gQ4ce8@gQ4ce3)) (set! gQ4f06@gQ4cef@p? gQ4cef@p?) (set! gQ4cf1@make-irritants-condition (record-constructor gQ4cec@gQ4ce4)) (set! gQ4f07@gQ4cf1@make-irritants-condition gQ4cf1@make-irritants-condition) (set! gQ4cf3@gQ4ce2 (record-accessor gQ4ce8@gQ4ce3 '0)) (set! gQ4f08@gQ4cf3@gQ4ce2 gQ4cf3@gQ4ce2) (set! gQ4cf5@irritants-condition? (condition-predicate gQ4ce8@gQ4ce3)) (set! gQ4f09@gQ4cf5@irritants-condition? gQ4cf5@irritants-condition?) (set! gQ4cf7@condition-irritants (condition-accessor gQ4ce8@gQ4ce3 gQ4cf3@gQ4ce2)) (set! gQ4f0a@gQ4cf7@condition-irritants gQ4cf7@condition-irritants) (set! gQ4cf9@&irritants-rtd gQ4ce8@gQ4ce3) (set! gQ4f0b@gQ4cf9@&irritants-rtd gQ4cf9@&irritants-rtd) (set! gQ4cfb@&irritants-rcd gQ4cec@gQ4ce4) (set! gQ4f0c@gQ4cfb@&irritants-rcd gQ4cfb@&irritants-rcd) (set! gQ4d03@gQ4cfe (make-record-type-descriptor '&who gQ4c0b@gQ4c06 'gQ4d01 '#f '#f '#((immutable who)))) (set! gQ4f0d@gQ4d03@gQ4cfe gQ4d03@gQ4cfe) (set! gQ4d05@gQ4d00 '#f) (set! gQ4f0e@gQ4d05@gQ4d00 gQ4d05@gQ4d00) (set! gQ4d07@gQ4cff (make-record-constructor-descriptor gQ4d03@gQ4cfe gQ4c0f@gQ4c07 gQ4d05@gQ4d00)) (set! gQ4f0f@gQ4d07@gQ4cff gQ4d07@gQ4cff) (set! gQ4d0a@p? (record-predicate gQ4d03@gQ4cfe)) (set! gQ4f10@gQ4d0a@p? gQ4d0a@p?) (set! gQ4d0c@make-who-condition (record-constructor gQ4d07@gQ4cff)) (set! gQ4f11@gQ4d0c@make-who-condition gQ4d0c@make-who-condition) (set! gQ4d0e@gQ4cfd (record-accessor gQ4d03@gQ4cfe '0)) (set! gQ4f12@gQ4d0e@gQ4cfd gQ4d0e@gQ4cfd) (set! gQ4d10@who-condition? (condition-predicate gQ4d03@gQ4cfe)) (set! gQ4f13@gQ4d10@who-condition? gQ4d10@who-condition?) (set! gQ4d12@condition-who (condition-accessor gQ4d03@gQ4cfe gQ4d0e@gQ4cfd)) (set! gQ4f14@gQ4d12@condition-who gQ4d12@condition-who) (set! gQ4d14@&who-rtd gQ4d03@gQ4cfe) (set! gQ4f15@gQ4d14@&who-rtd gQ4d14@&who-rtd) (set! gQ4d16@&who-rcd gQ4d07@gQ4cff) (set! gQ4f16@gQ4d16@&who-rcd gQ4d16@&who-rcd) (set! gQ4d1c@gQ4d17 (make-record-type-descriptor '&non-continuable gQ4cbc@gQ4cb7 'gQ4d1a '#f '#f '#())) (set! gQ4f17@gQ4d1c@gQ4d17 gQ4d1c@gQ4d17) (set! gQ4d1e@gQ4d19 '#f) (set! gQ4f18@gQ4d1e@gQ4d19 gQ4d1e@gQ4d19) (set! gQ4d20@gQ4d18 (make-record-constructor-descriptor gQ4d1c@gQ4d17 gQ4cc0@gQ4cb8 gQ4d1e@gQ4d19)) (set! gQ4f19@gQ4d20@gQ4d18 gQ4d20@gQ4d18) (set! gQ4d23@p? (record-predicate gQ4d1c@gQ4d17)) (set! gQ4f1a@gQ4d23@p? gQ4d23@p?) (set! gQ4d25@make-non-continuable-violation (record-constructor gQ4d20@gQ4d18)) (set! gQ4f1b@gQ4d25@make-non-continuable-violation gQ4d25@make-non-continuable-violation) (set! gQ4d27@non-continuable-violation? (condition-predicate gQ4d1c@gQ4d17)) (set! gQ4f1c@gQ4d27@non-continuable-violation? gQ4d27@non-continuable-violation?) (set! gQ4d29@&non-continuable-rtd gQ4d1c@gQ4d17) (set! gQ4f1d@gQ4d29@&non-continuable-rtd gQ4d29@&non-continuable-rtd) (set! gQ4d2b@&non-continuable-rcd gQ4d20@gQ4d18) (set! gQ4f1e@gQ4d2b@&non-continuable-rcd gQ4d2b@&non-continuable-rcd) (set! gQ4d31@gQ4d2c (make-record-type-descriptor '&implementation-restriction gQ4cbc@gQ4cb7 'gQ4d2f '#f '#f '#())) (set! gQ4f1f@gQ4d31@gQ4d2c gQ4d31@gQ4d2c) (set! gQ4d33@gQ4d2e '#f) (set! gQ4f20@gQ4d33@gQ4d2e gQ4d33@gQ4d2e) (set! gQ4d35@gQ4d2d (make-record-constructor-descriptor gQ4d31@gQ4d2c gQ4cc0@gQ4cb8 gQ4d33@gQ4d2e)) (set! gQ4f21@gQ4d35@gQ4d2d gQ4d35@gQ4d2d) (set! gQ4d38@p? (record-predicate gQ4d31@gQ4d2c)) (set! gQ4f22@gQ4d38@p? gQ4d38@p?) (set! gQ4d3a@make-implementation-restriction-violation (record-constructor gQ4d35@gQ4d2d)) (set! gQ4f23@gQ4d3a@make-implementation-restriction-violation gQ4d3a@make-implementation-restriction-violation) (set! gQ4d3c@implementation-restriction-violation? (condition-predicate gQ4d31@gQ4d2c)) (set! gQ4f24@gQ4d3c@implementation-restriction-violation? gQ4d3c@implementation-restriction-violation?) (set! gQ4d3e@&implementation-restriction-rtd gQ4d31@gQ4d2c) (set! gQ4f25@gQ4d3e@&implementation-restriction-rtd gQ4d3e@&implementation-restriction-rtd) (set! gQ4d40@&implementation-restriction-rcd gQ4d35@gQ4d2d) (set! gQ4f26@gQ4d40@&implementation-restriction-rcd gQ4d40@&implementation-restriction-rcd) (set! gQ4d46@gQ4d41 (make-record-type-descriptor '&lexical gQ4cbc@gQ4cb7 'gQ4d44 '#f '#f '#())) (set! gQ4f27@gQ4d46@gQ4d41 gQ4d46@gQ4d41) (set! gQ4d48@gQ4d43 '#f) (set! gQ4f28@gQ4d48@gQ4d43 gQ4d48@gQ4d43) (set! gQ4d4a@gQ4d42 (make-record-constructor-descriptor gQ4d46@gQ4d41 gQ4cc0@gQ4cb8 gQ4d48@gQ4d43)) (set! gQ4f29@gQ4d4a@gQ4d42 gQ4d4a@gQ4d42) (set! gQ4d4d@p? (record-predicate gQ4d46@gQ4d41)) (set! gQ4f2a@gQ4d4d@p? gQ4d4d@p?) (set! gQ4d4f@make-lexical-violation (record-constructor gQ4d4a@gQ4d42)) (set! gQ4f2b@gQ4d4f@make-lexical-violation gQ4d4f@make-lexical-violation) (set! gQ4d51@lexical-violation? (condition-predicate gQ4d46@gQ4d41)) (set! gQ4f2c@gQ4d51@lexical-violation? gQ4d51@lexical-violation?) (set! gQ4d53@&lexical-rtd gQ4d46@gQ4d41) (set! gQ4f2d@gQ4d53@&lexical-rtd gQ4d53@&lexical-rtd) (set! gQ4d55@&lexical-rcd gQ4d4a@gQ4d42) (set! gQ4f2e@gQ4d55@&lexical-rcd gQ4d55@&lexical-rcd) (set! gQ4d5f@gQ4d5a (make-record-type-descriptor '&syntax gQ4cbc@gQ4cb7 'gQ4d5d '#f '#f '#((immutable form) (immutable subform)))) (set! gQ4f2f@gQ4d5f@gQ4d5a gQ4d5f@gQ4d5a) (set! gQ4d61@gQ4d5c '#f) (set! gQ4f30@gQ4d61@gQ4d5c gQ4d61@gQ4d5c) (set! gQ4d63@gQ4d5b (make-record-constructor-descriptor gQ4d5f@gQ4d5a gQ4cc0@gQ4cb8 gQ4d61@gQ4d5c)) (set! gQ4f31@gQ4d63@gQ4d5b gQ4d63@gQ4d5b) (set! gQ4d66@p? (record-predicate gQ4d5f@gQ4d5a)) (set! gQ4f32@gQ4d66@p? gQ4d66@p?) (set! gQ4d68@make-syntax-violation (record-constructor gQ4d63@gQ4d5b)) (set! gQ4f33@gQ4d68@make-syntax-violation gQ4d68@make-syntax-violation) (set! gQ4d6a@gQ4d57 (record-accessor gQ4d5f@gQ4d5a '0)) (set! gQ4f34@gQ4d6a@gQ4d57 gQ4d6a@gQ4d57) (set! gQ4d6c@gQ4d59 (record-accessor gQ4d5f@gQ4d5a '1)) (set! gQ4f35@gQ4d6c@gQ4d59 gQ4d6c@gQ4d59) (set! gQ4d6e@syntax-violation? (condition-predicate gQ4d5f@gQ4d5a)) (set! gQ4f36@gQ4d6e@syntax-violation? gQ4d6e@syntax-violation?) (set! gQ4d70@syntax-violation-form (condition-accessor gQ4d5f@gQ4d5a gQ4d6a@gQ4d57)) (set! gQ4f37@gQ4d70@syntax-violation-form gQ4d70@syntax-violation-form) (set! gQ4d72@syntax-violation-subform (condition-accessor gQ4d5f@gQ4d5a gQ4d6c@gQ4d59)) (set! gQ4f38@gQ4d72@syntax-violation-subform gQ4d72@syntax-violation-subform) (set! gQ4d74@&syntax-rtd gQ4d5f@gQ4d5a) (set! gQ4f39@gQ4d74@&syntax-rtd gQ4d74@&syntax-rtd) (set! gQ4d76@&syntax-rcd gQ4d63@gQ4d5b) (set! gQ4f3a@gQ4d76@&syntax-rcd gQ4d76@&syntax-rcd) (set! gQ4d7c@gQ4d77 (make-record-type-descriptor '&undefined gQ4cbc@gQ4cb7 'gQ4d7a '#f '#f '#())) (set! gQ4f3b@gQ4d7c@gQ4d77 gQ4d7c@gQ4d77) (set! gQ4d7e@gQ4d79 '#f) (set! gQ4f3c@gQ4d7e@gQ4d79 gQ4d7e@gQ4d79) (set! gQ4d80@gQ4d78 (make-record-constructor-descriptor gQ4d7c@gQ4d77 gQ4cc0@gQ4cb8 gQ4d7e@gQ4d79)) (set! gQ4f3d@gQ4d80@gQ4d78 gQ4d80@gQ4d78) (set! gQ4d83@p? (record-predicate gQ4d7c@gQ4d77)) (set! gQ4f3e@gQ4d83@p? gQ4d83@p?) (set! gQ4d85@make-undefined-violation (record-constructor gQ4d80@gQ4d78)) (set! gQ4f3f@gQ4d85@make-undefined-violation gQ4d85@make-undefined-violation) (set! gQ4d87@undefined-violation? (condition-predicate gQ4d7c@gQ4d77)) (set! gQ4f40@gQ4d87@undefined-violation? gQ4d87@undefined-violation?) (set! gQ4d89@&undefined-rtd gQ4d7c@gQ4d77) (set! gQ4f41@gQ4d89@&undefined-rtd gQ4d89@&undefined-rtd) (set! gQ4d8b@&undefined-rcd gQ4d80@gQ4d78) (set! gQ4f42@gQ4d8b@&undefined-rcd gQ4d8b@&undefined-rcd) (set! gQ4d91@gQ4d8c (make-record-type-descriptor '&i/o gQ4ca7@gQ4ca2 'gQ4d8f '#f '#f '#())) (set! gQ4f43@gQ4d91@gQ4d8c gQ4d91@gQ4d8c) (set! gQ4d93@gQ4d8e '#f) (set! gQ4f44@gQ4d93@gQ4d8e gQ4d93@gQ4d8e) (set! gQ4d95@gQ4d8d (make-record-constructor-descriptor gQ4d91@gQ4d8c gQ4cab@gQ4ca3 gQ4d93@gQ4d8e)) (set! gQ4f45@gQ4d95@gQ4d8d gQ4d95@gQ4d8d) (set! gQ4d98@p? (record-predicate gQ4d91@gQ4d8c)) (set! gQ4f46@gQ4d98@p? gQ4d98@p?) (set! gQ4d9a@make-i/o-error (record-constructor gQ4d95@gQ4d8d)) (set! gQ4f47@gQ4d9a@make-i/o-error gQ4d9a@make-i/o-error) (set! gQ4d9c@i/o-error? (condition-predicate gQ4d91@gQ4d8c)) (set! gQ4f48@gQ4d9c@i/o-error? gQ4d9c@i/o-error?) (set! gQ4d9e@&i/o-rtd gQ4d91@gQ4d8c) (set! gQ4f49@gQ4d9e@&i/o-rtd gQ4d9e@&i/o-rtd) (set! gQ4da0@&i/o-rcd gQ4d95@gQ4d8d) (set! gQ4f4a@gQ4da0@&i/o-rcd gQ4da0@&i/o-rcd) (set! gQ4da6@gQ4da1 (make-record-type-descriptor '&i/o-read gQ4d91@gQ4d8c 'gQ4da4 '#f '#f '#())) (set! gQ4f4b@gQ4da6@gQ4da1 gQ4da6@gQ4da1) (set! gQ4da8@gQ4da3 '#f) (set! gQ4f4c@gQ4da8@gQ4da3 gQ4da8@gQ4da3) (set! gQ4daa@gQ4da2 (make-record-constructor-descriptor gQ4da6@gQ4da1 gQ4d95@gQ4d8d gQ4da8@gQ4da3)) (set! gQ4f4d@gQ4daa@gQ4da2 gQ4daa@gQ4da2) (set! gQ4dad@p? (record-predicate gQ4da6@gQ4da1)) (set! gQ4f4e@gQ4dad@p? gQ4dad@p?) (set! gQ4daf@make-i/o-read-error (record-constructor gQ4daa@gQ4da2)) (set! gQ4f4f@gQ4daf@make-i/o-read-error gQ4daf@make-i/o-read-error) (set! gQ4db1@i/o-read-error? (condition-predicate gQ4da6@gQ4da1)) (set! gQ4f50@gQ4db1@i/o-read-error? gQ4db1@i/o-read-error?) (set! gQ4db3@&i/o-read-rtd gQ4da6@gQ4da1) (set! gQ4f51@gQ4db3@&i/o-read-rtd gQ4db3@&i/o-read-rtd) (set! gQ4db5@&i/o-read-rcd gQ4daa@gQ4da2) (set! gQ4f52@gQ4db5@&i/o-read-rcd gQ4db5@&i/o-read-rcd) (set! gQ4dbb@gQ4db6 (make-record-type-descriptor '&i/o-write gQ4d91@gQ4d8c 'gQ4db9 '#f '#f '#())) (set! gQ4f53@gQ4dbb@gQ4db6 gQ4dbb@gQ4db6) (set! gQ4dbd@gQ4db8 '#f) (set! gQ4f54@gQ4dbd@gQ4db8 gQ4dbd@gQ4db8) (set! gQ4dbf@gQ4db7 (make-record-constructor-descriptor gQ4dbb@gQ4db6 gQ4d95@gQ4d8d gQ4dbd@gQ4db8)) (set! gQ4f55@gQ4dbf@gQ4db7 gQ4dbf@gQ4db7) (set! gQ4dc2@p? (record-predicate gQ4dbb@gQ4db6)) (set! gQ4f56@gQ4dc2@p? gQ4dc2@p?) (set! gQ4dc4@make-i/o-write-error (record-constructor gQ4dbf@gQ4db7)) (set! gQ4f57@gQ4dc4@make-i/o-write-error gQ4dc4@make-i/o-write-error) (set! gQ4dc6@i/o-write-error? (condition-predicate gQ4dbb@gQ4db6)) (set! gQ4f58@gQ4dc6@i/o-write-error? gQ4dc6@i/o-write-error?) (set! gQ4dc8@&i/o-write-rtd gQ4dbb@gQ4db6) (set! gQ4f59@gQ4dc8@&i/o-write-rtd gQ4dc8@&i/o-write-rtd) (set! gQ4dca@&i/o-write-rcd gQ4dbf@gQ4db7) (set! gQ4f5a@gQ4dca@&i/o-write-rcd gQ4dca@&i/o-write-rcd) (set! gQ4dd2@gQ4dcd (make-record-type-descriptor '&i/o-invalid-position gQ4d91@gQ4d8c 'gQ4dd0 '#f '#f '#((immutable position)))) (set! gQ4f5b@gQ4dd2@gQ4dcd gQ4dd2@gQ4dcd) (set! gQ4dd4@gQ4dcf '#f) (set! gQ4f5c@gQ4dd4@gQ4dcf gQ4dd4@gQ4dcf) (set! gQ4dd6@gQ4dce (make-record-constructor-descriptor gQ4dd2@gQ4dcd gQ4d95@gQ4d8d gQ4dd4@gQ4dcf)) (set! gQ4f5d@gQ4dd6@gQ4dce gQ4dd6@gQ4dce) (set! gQ4dd9@p? (record-predicate gQ4dd2@gQ4dcd)) (set! gQ4f5e@gQ4dd9@p? gQ4dd9@p?) (set! gQ4ddb@make-i/o-invalid-position-error (record-constructor gQ4dd6@gQ4dce)) (set! gQ4f5f@gQ4ddb@make-i/o-invalid-position-error gQ4ddb@make-i/o-invalid-position-error) (set! gQ4ddd@gQ4dcc (record-accessor gQ4dd2@gQ4dcd '0)) (set! gQ4f60@gQ4ddd@gQ4dcc gQ4ddd@gQ4dcc) (set! gQ4ddf@i/o-invalid-position-error? (condition-predicate gQ4dd2@gQ4dcd)) (set! gQ4f61@gQ4ddf@i/o-invalid-position-error? gQ4ddf@i/o-invalid-position-error?) (set! gQ4de1@i/o-error-position (condition-accessor gQ4dd2@gQ4dcd gQ4ddd@gQ4dcc)) (set! gQ4f62@gQ4de1@i/o-error-position gQ4de1@i/o-error-position) (set! gQ4de3@&i/o-invalid-position-rtd gQ4dd2@gQ4dcd) (set! gQ4f63@gQ4de3@&i/o-invalid-position-rtd gQ4de3@&i/o-invalid-position-rtd) (set! gQ4de5@&i/o-invalid-position-rcd gQ4dd6@gQ4dce) (set! gQ4f64@gQ4de5@&i/o-invalid-position-rcd gQ4de5@&i/o-invalid-position-rcd) (set! gQ4ded@gQ4de8 (make-record-type-descriptor '&i/o-filename gQ4d91@gQ4d8c 'gQ4deb '#f '#f '#((immutable filename)))) (set! gQ4f65@gQ4ded@gQ4de8 gQ4ded@gQ4de8) (set! gQ4def@gQ4dea '#f) (set! gQ4f66@gQ4def@gQ4dea gQ4def@gQ4dea) (set! gQ4df1@gQ4de9 (make-record-constructor-descriptor gQ4ded@gQ4de8 gQ4d95@gQ4d8d gQ4def@gQ4dea)) (set! gQ4f67@gQ4df1@gQ4de9 gQ4df1@gQ4de9) (set! gQ4df4@p? (record-predicate gQ4ded@gQ4de8)) (set! gQ4f68@gQ4df4@p? gQ4df4@p?) (set! gQ4df6@make-i/o-filename-error (record-constructor gQ4df1@gQ4de9)) (set! gQ4f69@gQ4df6@make-i/o-filename-error gQ4df6@make-i/o-filename-error) (set! gQ4df8@gQ4de7 (record-accessor gQ4ded@gQ4de8 '0)) (set! gQ4f6a@gQ4df8@gQ4de7 gQ4df8@gQ4de7) (set! gQ4dfa@i/o-filename-error? (condition-predicate gQ4ded@gQ4de8)) (set! gQ4f6b@gQ4dfa@i/o-filename-error? gQ4dfa@i/o-filename-error?) (set! gQ4dfc@i/o-error-filename (condition-accessor gQ4ded@gQ4de8 gQ4df8@gQ4de7)) (set! gQ4f6c@gQ4dfc@i/o-error-filename gQ4dfc@i/o-error-filename) (set! gQ4dfe@&i/o-filename-rtd gQ4ded@gQ4de8) (set! gQ4f6d@gQ4dfe@&i/o-filename-rtd gQ4dfe@&i/o-filename-rtd) (set! gQ4e00@&i/o-filename-rcd gQ4df1@gQ4de9) (set! gQ4f6e@gQ4e00@&i/o-filename-rcd gQ4e00@&i/o-filename-rcd) (set! gQ4e06@gQ4e01 (make-record-type-descriptor '&i/o-file-protection gQ4ded@gQ4de8 'gQ4e04 '#f '#f '#())) (set! gQ4f6f@gQ4e06@gQ4e01 gQ4e06@gQ4e01) (set! gQ4e08@gQ4e03 '#f) (set! gQ4f70@gQ4e08@gQ4e03 gQ4e08@gQ4e03) (set! gQ4e0a@gQ4e02 (make-record-constructor-descriptor gQ4e06@gQ4e01 gQ4df1@gQ4de9 gQ4e08@gQ4e03)) (set! gQ4f71@gQ4e0a@gQ4e02 gQ4e0a@gQ4e02) (set! gQ4e0d@p? (record-predicate gQ4e06@gQ4e01)) (set! gQ4f72@gQ4e0d@p? gQ4e0d@p?) (set! gQ4e0f@make-i/o-file-protection-error (record-constructor gQ4e0a@gQ4e02)) (set! gQ4f73@gQ4e0f@make-i/o-file-protection-error gQ4e0f@make-i/o-file-protection-error) (set! gQ4e11@i/o-file-protection-error? (condition-predicate gQ4e06@gQ4e01)) (set! gQ4f74@gQ4e11@i/o-file-protection-error? gQ4e11@i/o-file-protection-error?) (set! gQ4e13@&i/o-file-protection-rtd gQ4e06@gQ4e01) (set! gQ4f75@gQ4e13@&i/o-file-protection-rtd gQ4e13@&i/o-file-protection-rtd) (set! gQ4e15@&i/o-file-protection-rcd gQ4e0a@gQ4e02) (set! gQ4f76@gQ4e15@&i/o-file-protection-rcd gQ4e15@&i/o-file-protection-rcd) (set! gQ4e1b@gQ4e16 (make-record-type-descriptor '&i/o-file-is-read-only gQ4e06@gQ4e01 'gQ4e19 '#f '#f '#())) (set! gQ4f77@gQ4e1b@gQ4e16 gQ4e1b@gQ4e16) (set! gQ4e1d@gQ4e18 '#f) (set! gQ4f78@gQ4e1d@gQ4e18 gQ4e1d@gQ4e18) (set! gQ4e1f@gQ4e17 (make-record-constructor-descriptor gQ4e1b@gQ4e16 gQ4e0a@gQ4e02 gQ4e1d@gQ4e18)) (set! gQ4f79@gQ4e1f@gQ4e17 gQ4e1f@gQ4e17) (set! gQ4e22@p? (record-predicate gQ4e1b@gQ4e16)) (set! gQ4f7a@gQ4e22@p? gQ4e22@p?) (set! gQ4e24@make-i/o-file-is-read-only-error (record-constructor gQ4e1f@gQ4e17)) (set! gQ4f7b@gQ4e24@make-i/o-file-is-read-only-error gQ4e24@make-i/o-file-is-read-only-error) (set! gQ4e26@i/o-file-is-read-only-error? (condition-predicate gQ4e1b@gQ4e16)) (set! gQ4f7c@gQ4e26@i/o-file-is-read-only-error? gQ4e26@i/o-file-is-read-only-error?) (set! gQ4e28@&i/o-file-is-read-only-rtd gQ4e1b@gQ4e16) (set! gQ4f7d@gQ4e28@&i/o-file-is-read-only-rtd gQ4e28@&i/o-file-is-read-only-rtd) (set! gQ4e2a@&i/o-file-is-read-only-rcd gQ4e1f@gQ4e17) (set! gQ4f7e@gQ4e2a@&i/o-file-is-read-only-rcd gQ4e2a@&i/o-file-is-read-only-rcd) (set! gQ4e30@gQ4e2b (make-record-type-descriptor '&i/o-file-already-exists gQ4ded@gQ4de8 'gQ4e2e '#f '#f '#())) (set! gQ4f7f@gQ4e30@gQ4e2b gQ4e30@gQ4e2b) (set! gQ4e32@gQ4e2d '#f) (set! gQ4f80@gQ4e32@gQ4e2d gQ4e32@gQ4e2d) (set! gQ4e34@gQ4e2c (make-record-constructor-descriptor gQ4e30@gQ4e2b gQ4df1@gQ4de9 gQ4e32@gQ4e2d)) (set! gQ4f81@gQ4e34@gQ4e2c gQ4e34@gQ4e2c) (set! gQ4e37@p? (record-predicate gQ4e30@gQ4e2b)) (set! gQ4f82@gQ4e37@p? gQ4e37@p?) (set! gQ4e39@make-i/o-file-already-exists-error (record-constructor gQ4e34@gQ4e2c)) (set! gQ4f83@gQ4e39@make-i/o-file-already-exists-error gQ4e39@make-i/o-file-already-exists-error) (set! gQ4e3b@i/o-file-already-exists-error? (condition-predicate gQ4e30@gQ4e2b)) (set! gQ4f84@gQ4e3b@i/o-file-already-exists-error? gQ4e3b@i/o-file-already-exists-error?) (set! gQ4e3d@&i/o-file-already-exists-rtd gQ4e30@gQ4e2b) (set! gQ4f85@gQ4e3d@&i/o-file-already-exists-rtd gQ4e3d@&i/o-file-already-exists-rtd) (set! gQ4e3f@&i/o-file-already-exists-rcd gQ4e34@gQ4e2c) (set! gQ4f86@gQ4e3f@&i/o-file-already-exists-rcd gQ4e3f@&i/o-file-already-exists-rcd) (set! gQ4e45@gQ4e40 (make-record-type-descriptor '&i/o-file-does-not-exist gQ4ded@gQ4de8 'gQ4e43 '#f '#f '#())) (set! gQ4f87@gQ4e45@gQ4e40 gQ4e45@gQ4e40) (set! gQ4e47@gQ4e42 '#f) (set! gQ4f88@gQ4e47@gQ4e42 gQ4e47@gQ4e42) (set! gQ4e49@gQ4e41 (make-record-constructor-descriptor gQ4e45@gQ4e40 gQ4df1@gQ4de9 gQ4e47@gQ4e42)) (set! gQ4f89@gQ4e49@gQ4e41 gQ4e49@gQ4e41) (set! gQ4e4c@p? (record-predicate gQ4e45@gQ4e40)) (set! gQ4f8a@gQ4e4c@p? gQ4e4c@p?) (set! gQ4e4e@make-i/o-file-does-not-exist-error (record-constructor gQ4e49@gQ4e41)) (set! gQ4f8b@gQ4e4e@make-i/o-file-does-not-exist-error gQ4e4e@make-i/o-file-does-not-exist-error) (set! gQ4e50@i/o-file-does-not-exist-error? (condition-predicate gQ4e45@gQ4e40)) (set! gQ4f8c@gQ4e50@i/o-file-does-not-exist-error? gQ4e50@i/o-file-does-not-exist-error?) (set! gQ4e52@&i/o-file-does-not-exist-rtd gQ4e45@gQ4e40) (set! gQ4f8d@gQ4e52@&i/o-file-does-not-exist-rtd gQ4e52@&i/o-file-does-not-exist-rtd) (set! gQ4e54@&i/o-file-does-not-exist-rcd gQ4e49@gQ4e41) (set! gQ4f8e@gQ4e54@&i/o-file-does-not-exist-rcd gQ4e54@&i/o-file-does-not-exist-rcd) (set! gQ4e5c@gQ4e57 (make-record-type-descriptor '&i/o-port gQ4d91@gQ4d8c 'gQ4e5a '#f '#f '#((immutable port)))) (set! gQ4f8f@gQ4e5c@gQ4e57 gQ4e5c@gQ4e57) (set! gQ4e5e@gQ4e59 '#f) (set! gQ4f90@gQ4e5e@gQ4e59 gQ4e5e@gQ4e59) (set! gQ4e60@gQ4e58 (make-record-constructor-descriptor gQ4e5c@gQ4e57 gQ4d95@gQ4d8d gQ4e5e@gQ4e59)) (set! gQ4f91@gQ4e60@gQ4e58 gQ4e60@gQ4e58) (set! gQ4e63@p? (record-predicate gQ4e5c@gQ4e57)) (set! gQ4f92@gQ4e63@p? gQ4e63@p?) (set! gQ4e65@make-i/o-port-error (record-constructor gQ4e60@gQ4e58)) (set! gQ4f93@gQ4e65@make-i/o-port-error gQ4e65@make-i/o-port-error) (set! gQ4e67@gQ4e56 (record-accessor gQ4e5c@gQ4e57 '0)) (set! gQ4f94@gQ4e67@gQ4e56 gQ4e67@gQ4e56) (set! gQ4e69@i/o-port-error? (condition-predicate gQ4e5c@gQ4e57)) (set! gQ4f95@gQ4e69@i/o-port-error? gQ4e69@i/o-port-error?) (set! gQ4e6b@i/o-error-port (condition-accessor gQ4e5c@gQ4e57 gQ4e67@gQ4e56)) (set! gQ4f96@gQ4e6b@i/o-error-port gQ4e6b@i/o-error-port) (set! gQ4e6d@&i/o-port-rtd gQ4e5c@gQ4e57) (set! gQ4f97@gQ4e6d@&i/o-port-rtd gQ4e6d@&i/o-port-rtd) (set! gQ4e6f@&i/o-port-rcd gQ4e60@gQ4e58) (set! gQ4f98@gQ4e6f@&i/o-port-rcd gQ4e6f@&i/o-port-rcd) (set! gQ4e75@gQ4e70 (make-record-type-descriptor '&i/o-decoding gQ4e5c@gQ4e57 'gQ4e73 '#f '#f '#())) (set! gQ4f99@gQ4e75@gQ4e70 gQ4e75@gQ4e70) (set! gQ4e77@gQ4e72 '#f) (set! gQ4f9a@gQ4e77@gQ4e72 gQ4e77@gQ4e72) (set! gQ4e79@gQ4e71 (make-record-constructor-descriptor gQ4e75@gQ4e70 gQ4e60@gQ4e58 gQ4e77@gQ4e72)) (set! gQ4f9b@gQ4e79@gQ4e71 gQ4e79@gQ4e71) (set! gQ4e7c@p? (record-predicate gQ4e75@gQ4e70)) (set! gQ4f9c@gQ4e7c@p? gQ4e7c@p?) (set! gQ4e7e@make-i/o-decoding-error (record-constructor gQ4e79@gQ4e71)) (set! gQ4f9d@gQ4e7e@make-i/o-decoding-error gQ4e7e@make-i/o-decoding-error) (set! gQ4e80@i/o-decoding-error? (condition-predicate gQ4e75@gQ4e70)) (set! gQ4f9e@gQ4e80@i/o-decoding-error? gQ4e80@i/o-decoding-error?) (set! gQ4e82@&i/o-decoding-rtd gQ4e75@gQ4e70) (set! gQ4f9f@gQ4e82@&i/o-decoding-rtd gQ4e82@&i/o-decoding-rtd) (set! gQ4e84@&i/o-decoding-rcd gQ4e79@gQ4e71) (set! gQ4fa0@gQ4e84@&i/o-decoding-rcd gQ4e84@&i/o-decoding-rcd) (set! gQ4e8c@gQ4e87 (make-record-type-descriptor '&i/o-encoding gQ4e5c@gQ4e57 'gQ4e8a '#f '#f '#((immutable char)))) (set! gQ4fa1@gQ4e8c@gQ4e87 gQ4e8c@gQ4e87) (set! gQ4e8e@gQ4e89 '#f) (set! gQ4fa2@gQ4e8e@gQ4e89 gQ4e8e@gQ4e89) (set! gQ4e90@gQ4e88 (make-record-constructor-descriptor gQ4e8c@gQ4e87 gQ4e60@gQ4e58 gQ4e8e@gQ4e89)) (set! gQ4fa3@gQ4e90@gQ4e88 gQ4e90@gQ4e88) (set! gQ4e93@p? (record-predicate gQ4e8c@gQ4e87)) (set! gQ4fa4@gQ4e93@p? gQ4e93@p?) (set! gQ4e95@make-i/o-encoding-error (record-constructor gQ4e90@gQ4e88)) (set! gQ4fa5@gQ4e95@make-i/o-encoding-error gQ4e95@make-i/o-encoding-error) (set! gQ4e97@gQ4e86 (record-accessor gQ4e8c@gQ4e87 '0)) (set! gQ4fa6@gQ4e97@gQ4e86 gQ4e97@gQ4e86) (set! gQ4e99@i/o-encoding-error? (condition-predicate gQ4e8c@gQ4e87)) (set! gQ4fa7@gQ4e99@i/o-encoding-error? gQ4e99@i/o-encoding-error?) (set! gQ4e9b@i/o-encoding-error-char (condition-accessor gQ4e8c@gQ4e87 gQ4e97@gQ4e86)) (set! gQ4fa8@gQ4e9b@i/o-encoding-error-char gQ4e9b@i/o-encoding-error-char) (set! gQ4e9d@&i/o-encoding-rtd gQ4e8c@gQ4e87) (set! gQ4fa9@gQ4e9d@&i/o-encoding-rtd gQ4e9d@&i/o-encoding-rtd) (set! gQ4e9f@&i/o-encoding-rcd gQ4e90@gQ4e88) (set! gQ4faa@gQ4e9f@&i/o-encoding-rcd gQ4e9f@&i/o-encoding-rcd) (set! gQ4ea5@gQ4ea0 (make-record-type-descriptor '&no-infinities gQ4d31@gQ4d2c 'gQ4ea3 '#f '#f '#())) (set! gQ4fab@gQ4ea5@gQ4ea0 gQ4ea5@gQ4ea0) (set! gQ4ea7@gQ4ea2 '#f) (set! gQ4fac@gQ4ea7@gQ4ea2 gQ4ea7@gQ4ea2) (set! gQ4ea9@gQ4ea1 (make-record-constructor-descriptor gQ4ea5@gQ4ea0 gQ4d35@gQ4d2d gQ4ea7@gQ4ea2)) (set! gQ4fad@gQ4ea9@gQ4ea1 gQ4ea9@gQ4ea1) (set! gQ4eac@p? (record-predicate gQ4ea5@gQ4ea0)) (set! gQ4fae@gQ4eac@p? gQ4eac@p?) (set! gQ4eae@make-no-infinities-violation (record-constructor gQ4ea9@gQ4ea1)) (set! gQ4faf@gQ4eae@make-no-infinities-violation gQ4eae@make-no-infinities-violation) (set! gQ4eb0@no-infinities-violation? (condition-predicate gQ4ea5@gQ4ea0)) (set! gQ4fb0@gQ4eb0@no-infinities-violation? gQ4eb0@no-infinities-violation?) (set! gQ4eb2@&no-infinities-rtd gQ4ea5@gQ4ea0) (set! gQ4fb1@gQ4eb2@&no-infinities-rtd gQ4eb2@&no-infinities-rtd) (set! gQ4eb4@&no-infinities-rcd gQ4ea9@gQ4ea1) (set! gQ4fb2@gQ4eb4@&no-infinities-rcd gQ4eb4@&no-infinities-rcd) (set! gQ4eba@gQ4eb5 (make-record-type-descriptor '&no-nans gQ4d31@gQ4d2c 'gQ4eb8 '#f '#f '#())) (set! gQ4fb3@gQ4eba@gQ4eb5 gQ4eba@gQ4eb5) (set! gQ4ebc@gQ4eb7 '#f) (set! gQ4fb4@gQ4ebc@gQ4eb7 gQ4ebc@gQ4eb7) (set! gQ4ebe@gQ4eb6 (make-record-constructor-descriptor gQ4eba@gQ4eb5 gQ4d35@gQ4d2d gQ4ebc@gQ4eb7)) (set! gQ4fb5@gQ4ebe@gQ4eb6 gQ4ebe@gQ4eb6) (set! gQ4ec1@p? (record-predicate gQ4eba@gQ4eb5)) (set! gQ4fb6@gQ4ec1@p? gQ4ec1@p?) (set! gQ4ec3@make-no-nans-violation (record-constructor gQ4ebe@gQ4eb6)) (set! gQ4fb7@gQ4ec3@make-no-nans-violation gQ4ec3@make-no-nans-violation) (set! gQ4ec5@no-nans-violation? (condition-predicate gQ4eba@gQ4eb5)) (set! gQ4fb8@gQ4ec5@no-nans-violation? gQ4ec5@no-nans-violation?) (set! gQ4ec7@&no-nans-rtd gQ4eba@gQ4eb5) (set! gQ4fb9@gQ4ec7@&no-nans-rtd gQ4ec7@&no-nans-rtd) (set! gQ4ec9@&no-nans-rcd gQ4ebe@gQ4eb6) (set! gQ4fba@gQ4ec9@&no-nans-rcd gQ4ec9@&no-nans-rcd) (void))
(begin (begin (gQ2a56@gQ2a0b@current-primitive-locations (lambda (gQ5485@x) (let ((gQ5487@t (assq gQ5485@x '((&no-nans-rcd . gQ4fba@gQ4ec9@&no-nans-rcd) (&no-nans-rtd . gQ4fb9@gQ4ec7@&no-nans-rtd) (&no-infinities-rcd . gQ4fb2@gQ4eb4@&no-infinities-rcd) (&no-infinities-rtd . gQ4fb1@gQ4eb2@&no-infinities-rtd) (&i/o-encoding-rcd . gQ4faa@gQ4e9f@&i/o-encoding-rcd) (&i/o-encoding-rtd . gQ4fa9@gQ4e9d@&i/o-encoding-rtd) (&i/o-decoding-rcd . gQ4fa0@gQ4e84@&i/o-decoding-rcd) (&i/o-decoding-rtd . gQ4f9f@gQ4e82@&i/o-decoding-rtd) (&i/o-port-rcd . gQ4f98@gQ4e6f@&i/o-port-rcd) (&i/o-port-rtd . gQ4f97@gQ4e6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . gQ4f8e@gQ4e54@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . gQ4f8d@gQ4e52@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . gQ4f86@gQ4e3f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . gQ4f85@gQ4e3d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . gQ4f7e@gQ4e2a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . gQ4f7d@gQ4e28@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . gQ4f76@gQ4e15@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . gQ4f75@gQ4e13@&i/o-file-protection-rtd) (&i/o-filename-rcd . gQ4f6e@gQ4e00@&i/o-filename-rcd) (&i/o-filename-rtd . gQ4f6d@gQ4dfe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . gQ4f64@gQ4de5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . gQ4f63@gQ4de3@&i/o-invalid-position-rtd) (&i/o-write-rcd . gQ4f5a@gQ4dca@&i/o-write-rcd) (&i/o-write-rtd . gQ4f59@gQ4dc8@&i/o-write-rtd) (&i/o-read-rcd . gQ4f52@gQ4db5@&i/o-read-rcd) (&i/o-read-rtd . gQ4f51@gQ4db3@&i/o-read-rtd) (&i/o-rcd . gQ4f4a@gQ4da0@&i/o-rcd) (&i/o-rtd . gQ4f49@gQ4d9e@&i/o-rtd) (&undefined-rcd . gQ4f42@gQ4d8b@&undefined-rcd) (&undefined-rtd . gQ4f41@gQ4d89@&undefined-rtd) (&syntax-rcd . gQ4f3a@gQ4d76@&syntax-rcd) (&syntax-rtd . gQ4f39@gQ4d74@&syntax-rtd) (&lexical-rcd . gQ4f2e@gQ4d55@&lexical-rcd) (&lexical-rtd . gQ4f2d@gQ4d53@&lexical-rtd) (&implementation-restriction-rcd . gQ4f26@gQ4d40@&implementation-restriction-rcd) (&implementation-restriction-rtd . gQ4f25@gQ4d3e@&implementation-restriction-rtd) (&non-continuable-rcd . gQ4f1e@gQ4d2b@&non-continuable-rcd) (&non-continuable-rtd . gQ4f1d@gQ4d29@&non-continuable-rtd) (&who-rcd . gQ4f16@gQ4d16@&who-rcd) (&who-rtd . gQ4f15@gQ4d14@&who-rtd) (&irritants-rcd . gQ4f0c@gQ4cfb@&irritants-rcd) (&irritants-rtd . gQ4f0b@gQ4cf9@&irritants-rtd) (&assertion-rcd . gQ4f02@gQ4ce0@&assertion-rcd) (&assertion-rtd . gQ4f01@gQ4cde@&assertion-rtd) (&violation-rcd . gQ4efa@gQ4ccb@&violation-rcd) (&violation-rtd . gQ4ef9@gQ4cc9@&violation-rtd) (&error-rcd . gQ4ef2@gQ4cb6@&error-rcd) (&error-rtd . gQ4ef1@gQ4cb4@&error-rtd) (&serious-rcd . gQ4eea@gQ4ca1@&serious-rcd) (&serious-rtd . gQ4ee9@gQ4c9f@&serious-rtd) (&warning-rcd . gQ4ee2@gQ4c8c@&warning-rcd) (&warning-rtd . gQ4ee1@gQ4c8a@&warning-rtd) (&message-rcd . gQ4eda@gQ4c77@&message-rcd) (&message-rtd . gQ4ed9@gQ4c75@&message-rtd) (&condition-rcd . gQ4ed0@gQ4c18@&condition-rcd) (&condition-rtd . gQ4ecf@gQ4c16@&condition-rtd) (syntax-error . gQ4bf2@gQ3196@syntax-error) (syntax-dispatch . gQ4b90@gQ30ba@syntax-dispatch) (load . gQ512f@gQ4fda@load) (interaction-environment . gQ4bfb@gQ31a8@interaction-environment) (library-path . gQ2cbd@gQ2af9@library-path) (mosh-cache-dir . gQ2a04@gQ28e3@mosh-cache-dir) (make-parameter . gQ2a03@gQ28e1@make-parameter) (make-variable-transformer . gQ4b4d@gQ2ee5@make-variable-transformer) (identifier? . gQ4bf5@gQ319c@identifier?) (generate-temporaries . gQ4beb@gQ3188@generate-temporaries) (free-identifier=? . gQ4bec@gQ318a@free-identifier=?) (syntax->datum . gQ4bf7@gQ31a0@syntax->datum) (datum->syntax . gQ4bf6@gQ319e@datum->syntax) (bound-identifier=? . gQ4bed@gQ318c@bound-identifier=?) (make-i/o-write-error . gQ4f57@gQ4dc4@make-i/o-write-error) (make-i/o-read-error . gQ4f4f@gQ4daf@make-i/o-read-error) (make-i/o-port-error . gQ4f93@gQ4e65@make-i/o-port-error) (make-i/o-invalid-position-error . gQ4f5f@gQ4ddb@make-i/o-invalid-position-error) (make-i/o-filename-error . gQ4f69@gQ4df6@make-i/o-filename-error) (make-i/o-file-protection-error . gQ4f73@gQ4e0f@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . gQ4f7b@gQ4e24@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . gQ4f8b@gQ4e4e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . gQ4f83@gQ4e39@make-i/o-file-already-exists-error) (make-i/o-error . gQ4f47@gQ4d9a@make-i/o-error) (make-i/o-encoding-error . gQ4fa5@gQ4e95@make-i/o-encoding-error) (make-i/o-decoding-error . gQ4f9d@gQ4e7e@make-i/o-decoding-error) (i/o-write-error? . gQ4f58@gQ4dc6@i/o-write-error?) (i/o-read-error? . gQ4f50@gQ4db1@i/o-read-error?) (i/o-port-error? . gQ4f95@gQ4e69@i/o-port-error?) (i/o-invalid-position-error? . gQ4f61@gQ4ddf@i/o-invalid-position-error?) (i/o-filename-error? . gQ4f6b@gQ4dfa@i/o-filename-error?) (i/o-file-protection-error? . gQ4f74@gQ4e11@i/o-file-protection-error?) (i/o-file-is-read-only-error? . gQ4f7c@gQ4e26@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . gQ4f8c@gQ4e50@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . gQ4f84@gQ4e3b@i/o-file-already-exists-error?) (i/o-error? . gQ4f48@gQ4d9c@i/o-error?) (i/o-error-position . gQ4f62@gQ4de1@i/o-error-position) (i/o-error-port . gQ4f96@gQ4e6b@i/o-error-port) (i/o-error-filename . gQ4f6c@gQ4dfc@i/o-error-filename) (i/o-encoding-error? . gQ4fa7@gQ4e99@i/o-encoding-error?) (i/o-encoding-error-char . gQ4fa8@gQ4e9b@i/o-encoding-error-char) (i/o-decoding-error? . gQ4f9e@gQ4e80@i/o-decoding-error?) (scheme-report-environment . gQ4be2@gQ3176@scheme-report-environment) (null-environment . gQ4be1@gQ3174@null-environment) (command-line . gQ512c@gQ4fd4@command-line) (eval . gQ4be4@gQ317a@eval) (environment . gQ4be0@gQ3172@environment) (who-condition? . gQ4f13@gQ4d10@who-condition?) (warning? . gQ4ee0@gQ4c88@warning?) (violation? . gQ4ef8@gQ4cc7@violation?) (undefined-violation? . gQ4f40@gQ4d87@undefined-violation?) (syntax-violation? . gQ4f36@gQ4d6e@syntax-violation?) (syntax-violation-subform . gQ4f38@gQ4d72@syntax-violation-subform) (syntax-violation-form . gQ4f37@gQ4d70@syntax-violation-form) (syntax-violation . gQ4bf4@gQ319a@syntax-violation) (serious-condition? . gQ4ee8@gQ4c9d@serious-condition?) (non-continuable-violation? . gQ4f1c@gQ4d27@non-continuable-violation?) (message-condition? . gQ4ed7@gQ4c71@message-condition?) (make-who-condition . gQ4f11@gQ4d0c@make-who-condition) (make-warning . gQ4edf@gQ4c86@make-warning) (make-violation . gQ4ef7@gQ4cc5@make-violation) (make-undefined-violation . gQ4f3f@gQ4d85@make-undefined-violation) (make-syntax-violation . gQ4f33@gQ4d68@make-syntax-violation) (make-serious-condition . gQ4ee7@gQ4c9b@make-serious-condition) (make-non-continuable-violation . gQ4f1b@gQ4d25@make-non-continuable-violation) (make-message-condition . gQ4ed5@gQ4c6d@make-message-condition) (make-lexical-violation . gQ4f2b@gQ4d4f@make-lexical-violation) (make-irritants-condition . gQ4f07@gQ4cf1@make-irritants-condition) (make-implementation-restriction-violation . gQ4f23@gQ4d3a@make-implementation-restriction-violation) (make-error . gQ4eef@gQ4cb0@make-error) (make-assertion-violation . gQ4eff@gQ4cda@make-assertion-violation) (lexical-violation? . gQ4f2c@gQ4d51@lexical-violation?) (irritants-condition? . gQ4f09@gQ4cf5@irritants-condition?) (implementation-restriction-violation? . gQ4f24@gQ4d3c@implementation-restriction-violation?) (error? . gQ4ef0@gQ4cb2@error?) (condition-who . gQ4f14@gQ4d12@condition-who) (condition-message . gQ4ed8@gQ4c73@condition-message) (condition-irritants . gQ4f0a@gQ4cf7@condition-irritants) (assertion-violation? . gQ4f00@gQ4cdc@assertion-violation?) (no-nans-violation? . gQ4fb8@gQ4ec5@no-nans-violation?) (no-infinities-violation? . gQ4fb0@gQ4eb0@no-infinities-violation?) (make-no-nans-violation . gQ4fb7@gQ4ec3@make-no-nans-violation) (make-no-infinities-violation . gQ4faf@gQ4eae@make-no-infinities-violation) (assertion-error . gQ4bf1@gQ3194@assertion-error))))) (if gQ5487@t (cdr gQ5487@t) '#f)))) (gQ2ccd@gQ2b19@install-library 'gQ5462 '(mosh interaction) '() '() '() '() '((regexp? . gQ545a) (alist->eq-hash-table . gQ5456) (format . gQ5453) (string-split . gQ5448) (call-process . gQ5442) (set-current-directory! . gQ543e) (expand-path . gQ543d) (current-directory . gQ543c) (%spawn . gQ543b) (%waitpid . gQ543a) (simple-struct-name . gQ5439) (simple-struct-set! . gQ5438) (simple-struct-ref . gQ5437) (make-simple-struct . gQ5436) (simple-struct? . gQ5435) (pointer-ref-c-int64 . gQ5434) (pointer-ref-c-int32 . gQ5433) (pointer-ref-c-int16 . gQ5432) (pointer-ref-c-int8 . gQ5431) (pointer-ref-c-uint64 . gQ5430) (pointer-ref-c-uint32 . gQ542f) (pointer-ref-c-uint16 . gQ542e) (pointer-ref-c-uint8 . gQ542d) (pointer-set-c-uint64! . gQ542c) (pointer-set-c-uint32! . gQ542b) (pointer-set-c-uint16! . gQ542a) (pointer-set-c-uint8! . gQ5429) (pointer-set-c-int64! . gQ5428) (pointer-set-c-int32! . gQ5427) (pointer-set-c-int16! . gQ5426) (pointer-set-c-int8! . gQ5425) (pointer-set-c-pointer! . gQ5424) (pointer-set-c-double! . gQ5423) (pointer-set-c-float! . gQ5422) (pointer-set-c-long-long! . gQ5421) (pointer-set-c-long! . gQ5420) (pointer-set-c-int! . gQ541f) (pointer-set-c-short! . gQ541e) (pointer-set-c-char! . gQ541d) (pointer-ref-c-pointer . gQ541c) (pointer-ref-c-double . gQ541b) (pointer-ref-c-float . gQ541a) (pointer-ref-c-unsigned-long-long . gQ5419) (pointer-ref-c-signed-long-long . gQ5418) (pointer-ref-c-unsigned-long . gQ5417) (pointer-ref-c-signed-long . gQ5416) (pointer-ref-c-unsigned-int . gQ5415) (pointer-ref-c-signed-int . gQ5414) (pointer-ref-c-unsigned-short . gQ5413) (pointer-ref-c-signed-short . gQ5412) (pointer-ref-c-unsigned-char . gQ5411) (pointer-ref-c-signed-char . gQ5410) (pointer->integer . gQ540f) (integer->pointer . gQ540e) (pointer? . gQ540d) (shared-errno . gQ540c) (%ffi-supported? . gQ5407) (%ffi-pointer->string . gQ5406) (%ffi-call . gQ5405) (%ffi-lookup . gQ5404) (%ffi-open . gQ5403) (null-terminated-utf8->string . gQ5402) (null-terminated-bytevector->string . gQ5401) (%fork . gQ5400) (%pipe . gQ53ff) (p . gQ53fe) (whereis . gQ53e2) (register . gQ53e1) (vm-join! . gQ53e0) (vm-set-value! . gQ53df) (vm? . gQ53de) (main-vm? . gQ53dd) (vm-eval . gQ53dc) (vm-self . gQ53db) (vm-start! . gQ53da) (make-vm . gQ53d9) (mutex-try-lock! . gQ53d8) (mutex-unlock! . gQ53d7) (mutex-lock! . gQ53d6) (mutex? . gQ53d5) (make-mutex . gQ53d4) (condition-variable-notify-all! . gQ53d3) (condition-variable-notify! . gQ53d2) (condition-variable-wait! . gQ53d1) (make-condition-variable . gQ53d0) (string-upcase . gQ53b8) (string-titlecase . gQ53b7) (string-normalize-nfkd . gQ53b6) (string-normalize-nfkc . gQ53b5) (string-normalize-nfd . gQ53b4) (string-normalize-nfc . gQ53b3) (string-foldcase . gQ53b2) (string-downcase . gQ53b1) (string-ci>? . gQ53b0) (string-ci>=? . gQ53af) (string-ci=? . gQ53ae) (string-ci<? . gQ53ad) (string-ci<=? . gQ53ac) (char-whitespace? . gQ53ab) (char-upper-case? . gQ53aa) (char-title-case? . gQ53a9) (char-numeric? . gQ53a8) (char-lower-case? . gQ53a7) (char-general-category . gQ53a6) (char-upcase . gQ53a5) (char-titlecase . gQ53a4) (char-foldcase . gQ53a3) (char-downcase . gQ53a2) (char-ci>? . gQ53a1) (char-ci>=? . gQ53a0) (char-ci=? . gQ539f) (char-ci<? . gQ539e) (char-ci<=? . gQ539d) (char-alphabetic? . gQ539c) (make-variable-transformer . gQ2ee4) (identifier? . gQ319b) (generate-temporaries . gQ3187) (free-identifier=? . gQ3189) (syntax->datum . gQ319f) (datum->syntax . gQ319d) (bound-identifier=? . gQ318b) (record-type-descriptor? . gQ539b) (record-predicate . gQ539a) (record-mutator . gQ5399) (record-constructor . gQ5398) (record-accessor . gQ5397) (make-record-type-descriptor . gQ5396) (make-record-constructor-descriptor . gQ5395) (record? . gQ5394) (record-type-uid . gQ5393) (record-type-sealed? . gQ5392) (record-type-parent . gQ5391) (record-type-opaque? . gQ5390) (record-type-name . gQ538f) (record-type-generative? . gQ538e) (record-type-field-names . gQ538d) (record-rtd . gQ538c) (record-field-mutable? . gQ538b) (delete-file . gQ538a) (file-exists? . gQ5389) (vector-sort! . gQ5388) (vector-sort . gQ5387) (list-sort . gQ5386) (symbol-hash . gQ5385) (string-ci-hash . gQ5384) (string-hash . gQ5383) (equal-hash . gQ5382) (hashtable-equivalence-function . gQ5381) (make-hashtable . gQ5380) (hashtable-hash-function . gQ537f) (make-eqv-hashtable . gQ537e) (make-eq-hashtable . gQ537d) (hashtable? . gQ537c) (hashtable-update! . gQ537b) (hashtable-size . gQ537a) (hashtable-set! . gQ5379) (hashtable-ref . gQ5378) (hashtable-mutable? . gQ5377) (hashtable-keys . gQ5376) (hashtable-entries . gQ5375) (hashtable-delete! . gQ5374) (hashtable-copy . gQ5373) (hashtable-contains? . gQ5372) (hashtable-clear! . gQ5371) (call-with-output-file . gQ5370) (call-with-input-file . gQ536f) (write-char . gQ536e) (write . gQ536d) (with-output-to-file . gQ536c) (with-input-from-file . gQ536b) (read-char . gQ536a) (read . gQ5369) (peek-char . gQ5368) (open-output-file . gQ5367) (open-input-file . gQ5366) (newline . gQ5365) (display . gQ5364) (close-output-port . gQ5363) (close-input-port . gQ5362) (eof-object? . gQ5361) (eof-object . gQ5360) (current-error-port . gQ535f) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (utf-8-codec . gQ535a) (utf-16-codec . gQ5359) (transcoder-error-handling-mode . gQ5358) (transcoder-eol-style . gQ5357) (transcoder-codec . gQ5356) (transcoded-port . gQ5355) (textual-port? . gQ5354) (string->bytevector . gQ5353) (standard-output-port . gQ5352) (standard-input-port . gQ5351) (standard-error-port . gQ5350) (set-port-position! . gQ534f) (put-u8 . gQ534e) (put-string . gQ534d) (put-datum . gQ534c) (put-char . gQ534b) (put-bytevector . gQ534a) (port? . gQ5349) (port-transcoder . gQ5348) (port-position . gQ5347) (port-has-set-port-position!? . gQ5346) (port-has-port-position? . gQ5345) (port-eof? . gQ5344) (output-port-buffer-mode . gQ5343) (open-string-output-port . gQ5342) (open-string-input-port . gQ5341) (open-file-output-port . gQ5340) (open-file-input/output-port . gQ533f) (open-file-input-port . gQ533e) (open-bytevector-output-port . gQ533d) (open-bytevector-input-port . gQ533c) (native-transcoder . gQ533b) (native-eol-style . gQ533a) (make-transcoder . gQ5339) (latin-1-codec . gQ5338) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (make-i/o-encoding-error . gQ4e94) (make-i/o-decoding-error . gQ4e7d) (make-custom-textual-output-port . gQ5337) (make-custom-textual-input/output-port . gQ5336) (make-custom-textual-input-port . gQ5335) (make-custom-binary-output-port . gQ5334) (make-custom-binary-input/output-port . gQ5333) (make-custom-binary-input-port . gQ5332) (make-bytevector . gQ5331) (lookahead-u8 . gQ5330) (lookahead-char . gQ532f) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (i/o-encoding-error? . gQ4e98) (i/o-encoding-error-char . gQ4e9a) (i/o-decoding-error? . gQ4e7f) (get-u8 . gQ532e) (get-string-n! . gQ532d) (get-string-n . gQ532c) (get-string-all . gQ532b) (get-line . gQ532a) (get-datum . gQ5329) (get-char . gQ5328) (get-bytevector-some . gQ5327) (get-bytevector-n! . gQ5326) (get-bytevector-n . gQ5325) (get-bytevector-all . gQ5324) (flush-output-port . gQ5323) (close-port . gQ5322) (exit . gQ531a) (command-line . gQ4fd3) (string-fill! . gQ5319) (string-set! . gQ5318) (set-cdr! . gQ5317) (set-car! . gQ5316) (remove . gQ5315) (remv . gQ5314) (remp . gQ5313) (remq . gQ5312) (partition . gQ5311) (memv . gQ5310) (memq . gQ530f) (memp . gQ530e) (member . gQ530d) (exists . gQ530c) (for-all . gQ530b) (fold-right . gQ530a) (fold-left . gQ5309) (find . gQ5308) (filter . gQ5307) (cons* . gQ5306) (assv . gQ5305) (assq . gQ5304) (assp . gQ5303) (assoc . gQ5302) (call-with-string-output-port . gQ5301) (call-with-port . gQ5300) (call-with-bytevector-output-port . gQ52ff) (bytevector->string . gQ52fe) (buffer-mode? . gQ52fd) (binary-port? . gQ52fc) (with-exception-handler . gQ52fb) (raise-continuable . gQ52fa) (raise . gQ52f9) (eval . gQ3179) (environment . gQ3171) (make-enumeration . gQ52f8) (enum-set=? . gQ52f7) (enum-set-universe . gQ52f6) (enum-set-union . gQ52f5) (enum-set-subset? . gQ52f4) (enum-set-projection . gQ52f3) (enum-set-member? . gQ52f2) (enum-set-intersection . gQ52f1) (enum-set-indexer . gQ52f0) (enum-set-difference . gQ52ef) (enum-set-constructor . gQ52ee) (enum-set-complement . gQ52ed) (enum-set->list . gQ52ec) (who-condition? . gQ4d0f) (warning? . gQ4c87) (violation? . gQ4cc6) (undefined-violation? . gQ4d86) (syntax-violation? . gQ4d6d) (syntax-violation-subform . gQ4d71) (syntax-violation-form . gQ4d6f) (syntax-violation . gQ3199) (simple-conditions . gQ52eb) (serious-condition? . gQ4c9c) (non-continuable-violation? . gQ4d26) (message-condition? . gQ4c70) (make-who-condition . gQ4d0b) (make-warning . gQ4c85) (make-violation . gQ4cc4) (make-undefined-violation . gQ4d84) (make-syntax-violation . gQ4d67) (make-serious-condition . gQ4c9a) (make-non-continuable-violation . gQ4d24) (make-message-condition . gQ4c6c) (make-lexical-violation . gQ4d4e) (make-irritants-condition . gQ4cf0) (make-implementation-restriction-violation . gQ4d39) (make-error . gQ4caf) (make-assertion-violation . gQ4cd9) (lexical-violation? . gQ4d50) (irritants-condition? . gQ4cf4) (implementation-restriction-violation? . gQ4d3b) (error? . gQ4cb1) (condition-who . gQ4d11) (condition-predicate . gQ52ea) (condition-message . gQ4c72) (condition-irritants . gQ4cf6) (condition-accessor . gQ52e9) (condition . gQ52e8) (assertion-violation? . gQ4cdb) (condition? . gQ52e7) (utf32->string . gQ52e6) (utf16->string . gQ52e5) (utf8->string . gQ52e4) (uint-list->bytevector . gQ52e3) (u8-list->bytevector . gQ52e2) (string->utf8 . gQ52e1) (string->utf32 . gQ52e0) (string->utf16 . gQ52df) (sint-list->bytevector . gQ52de) (native-endianness . gQ52dd) (bytevector? . gQ52dc) (bytevector=? . gQ52db) (bytevector-uint-set! . gQ52da) (bytevector-uint-ref . gQ52d9) (bytevector-u8-set! . gQ52d8) (bytevector-u8-ref . gQ52d7) (bytevector-u64-set! . gQ52d6) (bytevector-u64-ref . gQ52d5) (bytevector-u64-native-set! . gQ52d4) (bytevector-u64-native-ref . gQ52d3) (bytevector-u32-set! . gQ52d2) (bytevector-u32-ref . gQ52d1) (bytevector-u32-native-set! . gQ52d0) (bytevector-u32-native-ref . gQ52cf) (bytevector-u16-set! . gQ52ce) (bytevector-u16-ref . gQ52cd) (bytevector-u16-native-set! . gQ52cc) (bytevector-u16-native-ref . gQ52cb) (bytevector-sint-set! . gQ52ca) (bytevector-sint-ref . gQ52c9) (bytevector-s8-set! . gQ52c8) (bytevector-s8-ref . gQ52c7) (bytevector-s64-set! . gQ52c6) (bytevector-s64-ref . gQ52c5) (bytevector-s64-native-set! . gQ52c4) (bytevector-s64-native-ref . gQ52c3) (bytevector-s32-set! . gQ52c2) (bytevector-s32-ref . gQ52c1) (bytevector-s32-native-set! . gQ52c0) (bytevector-s32-native-ref . gQ52bf) (bytevector-s16-set! . gQ52be) (bytevector-s16-ref . gQ52bd) (bytevector-s16-native-set! . gQ52bc) (bytevector-s16-native-ref . gQ52bb) (bytevector-length . gQ52ba) (bytevector-ieee-single-ref . gQ52b9) (bytevector-ieee-single-set! . gQ52b8) (bytevector-ieee-single-native-set! . gQ52b7) (bytevector-ieee-single-native-ref . gQ52b6) (bytevector-ieee-double-set! . gQ52b5) (bytevector-ieee-double-ref . gQ52b4) (bytevector-ieee-double-native-set! . gQ52b3) (bytevector-ieee-double-native-ref . gQ52b2) (bytevector-fill! . gQ52b1) (bytevector-copy! . gQ52b0) (bytevector-copy . gQ52af) (bytevector->uint-list . gQ52ae) (bytevector->u8-list . gQ52ad) (bytevector->sint-list . gQ52ac) (no-nans-violation? . gQ4ec4) (no-infinities-violation? . gQ4eaf) (make-no-nans-violation . gQ4ec2) (make-no-infinities-violation . gQ4ead) (real->flonum . gQ52ab) (flzero? . gQ52aa) (fltruncate . gQ52a9) (fltan . gQ52a8) (flsqrt . gQ52a7) (flsin . gQ52a6) (flround . gQ52a5) (flpositive? . gQ52a4) (flonum? . gQ52a3) (flodd? . gQ52a2) (flnumerator . gQ52a1) (flnegative? . gQ52a0) (flnan? . gQ529f) (flmod0 . gQ529e) (flmod . gQ529d) (flmin . gQ529c) (flmax . gQ529b) (fllog . gQ529a) (flinteger? . gQ5299) (flinfinite? . gQ5298) (flfloor . gQ5297) (flfinite? . gQ5296) (flexpt . gQ5295) (flexp . gQ5294) (fleven? . gQ5293) (fldiv0-and-mod0 . gQ5292) (fldiv0 . gQ5291) (fldiv-and-mod . gQ5290) (fldiv . gQ528f) (fldenominator . gQ528e) (flcos . gQ528d) (flceiling . gQ528c) (flatan . gQ528b) (flasin . gQ528a) (flacos . gQ5289) (flabs . gQ5288) (fl>? . gQ5287) (fl>=? . gQ5286) (fl=? . gQ5285) (fl<? . gQ5284) (fl<=? . gQ5283) (fl/ . gQ5282) (fl- . gQ5281) (fl+ . gQ5280) (fl* . gQ527f) (fixnum->flonum . gQ527e) (fxzero? . gQ527d) (fxxor . gQ527c) (fxrotate-bit-field . gQ527b) (fxreverse-bit-field . gQ527a) (fxpositive? . gQ5279) (fxodd? . gQ5278) (fxnot . gQ5277) (fxnegative? . gQ5276) (fxmod0 . gQ5275) (fxmod . gQ5274) (fxmin . gQ5273) (fxmax . gQ5272) (fxlength . gQ5271) (fxior . gQ5270) (fxif . gQ526f) (fxfirst-bit-set . gQ526e) (fxeven? . gQ526d) (fxdiv0-and-mod0 . gQ526c) (fxdiv0 . gQ526b) (fxdiv-and-mod . gQ526a) (fxdiv . gQ5269) (fxcopy-bit-field . gQ5268) (fxcopy-bit . gQ5267) (fxbit-set? . gQ5266) (fxbit-field . gQ5265) (fxbit-count . gQ5264) (fxarithmetic-shift-right . gQ5263) (fxarithmetic-shift-left . gQ5262) (fxarithmetic-shift . gQ5261) (fxand . gQ5260) (fx>? . gQ525f) (fx>=? . gQ525e) (fx=? . gQ525d) (fx<? . gQ525c) (fx<=? . gQ525b) (fx-/carry . gQ525a) (fx- . gQ5259) (fx+/carry . gQ5258) (fx+ . gQ5257) (fx*/carry . gQ5256) (fx* . gQ5255) (greatest-fixnum . gQ5254) (least-fixnum . gQ5253) (fixnum-width . gQ5252) (fixnum? . gQ5251) (bitwise-rotate-bit-field . gQ5250) (bitwise-reverse-bit-field . gQ524f) (bitwise-length . gQ524e) (bitwise-if . gQ524d) (bitwise-first-bit-set . gQ524c) (bitwise-copy-bit-field . gQ524b) (bitwise-copy-bit . gQ524a) (bitwise-bit-set? . gQ5249) (bitwise-bit-field . gQ5248) (bitwise-bit-count . gQ5247) (bitwise-xor . gQ5246) (bitwise-ior . gQ5245) (bitwise-and . gQ5244) (bitwise-not . gQ5243) (bitwise-arithmetic-shift-right . gQ5242) (bitwise-arithmetic-shift-left . gQ5241) (bitwise-arithmetic-shift . gQ5240) (zero? . gQ523f) (vector? . gQ523e) (vector-set! . gQ523d) (vector-ref . gQ523c) (vector-map . gQ523b) (vector-length . gQ523a) (vector-for-each . gQ5239) (vector-fill! . gQ5238) (vector->list . gQ5237) (vector . gQ5236) (values . gQ5235) (truncate . gQ5234) (tan . gQ5233) (symbol? . gQ5232) (symbol=? . gQ5231) (symbol->string . gQ5230) (substring . gQ522f) (string? . gQ522e) (string>? . gQ522d) (string>=? . gQ522c) (string=? . gQ522b) (string<? . gQ522a) (string<=? . gQ5229) (string-ref . gQ5228) (string-length . gQ5227) (string-for-each . gQ5226) (string-copy . gQ5225) (string-append . gQ5224) (string->symbol . gQ5223) (string->number . gQ5222) (string->list . gQ5221) (string . gQ5220) (sqrt . gQ521f) (sin . gQ521e) (round . gQ521d) (reverse . gQ521c) (real? . gQ521b) (real-valued? . gQ521a) (real-part . gQ5219) (rationalize . gQ5218) (rational? . gQ5217) (rational-valued? . gQ5216) (procedure? . gQ5215) (positive? . gQ5214) (pair? . gQ5213) (odd? . gQ5212) (numerator . gQ5211) (number? . gQ5210) (number->string . gQ520f) (null? . gQ520e) (not . gQ520d) (negative? . gQ520c) (nan? . gQ520b) (min . gQ520a) (max . gQ5209) (map . gQ5208) (make-vector . gQ5207) (make-string . gQ5206) (make-rectangular . gQ5205) (make-polar . gQ5204) (magnitude . gQ5203) (log . gQ5202) (list? . gQ5201) (list-tail . gQ5200) (list-ref . gQ51ff) (list->vector . gQ51fe) (list->string . gQ51fd) (list . gQ51fc) (length . gQ51fb) (lcm . gQ51fa) (integer? . gQ51f9) (integer-valued? . gQ51f8) (integer->char . gQ51f7) (infinite? . gQ51f6) (inexact? . gQ51f5) (inexact . gQ51f4) (imag-part . gQ51f3) (gcd . gQ51f2) (for-each . gQ51f1) (floor . gQ51f0) (finite? . gQ51ef) (expt . gQ51ee) (exp . gQ51ed) (exact? . gQ51ec) (exact-integer-sqrt . gQ51eb) (exact . gQ51ea) (even? . gQ51e9) (error . gQ51e8) (eqv? . gQ51e7) (equal? . gQ51e6) (eq? . gQ51e5) (dynamic-wind . gQ51e4) (div0-and-mod0 . gQ51e3) (mod0 . gQ51e2) (div0 . gQ51e1) (div-and-mod . gQ51e0) (mod . gQ51df) (div . gQ51de) (denominator . gQ51dd) (cos . gQ51dc) (cons . gQ51db) (complex? . gQ51da) (char? . gQ51d9) (char>? . gQ51d8) (char>=? . gQ51d7) (char=? . gQ51d6) (char<? . gQ51d5) (char<=? . gQ51d4) (char->integer . gQ51d3) (ceiling . gQ51d2) (call-with-values . gQ51d1) (call/cc . gQ51d0) (call-with-current-continuation . gQ51cf) (cddddr . gQ51ce) (cdddar . gQ51cd) (cddadr . gQ51cc) (cddaar . gQ51cb) (cdaddr . gQ51ca) (cdadar . gQ51c9) (cdaadr . gQ51c8) (cdaaar . gQ51c7) (cadddr . gQ51c6) (caddar . gQ51c5) (cadadr . gQ51c4) (cadaar . gQ51c3) (caaddr . gQ51c2) (caadar . gQ51c1) (caaadr . gQ51c0) (caaaar . gQ51bf) (cdddr . gQ51be) (cddar . gQ51bd) (cdadr . gQ51bc) (cdaar . gQ51bb) (caddr . gQ51ba) (cadar . gQ51b9) (caadr . gQ51b8) (caaar . gQ51b7) (cddr . gQ51b6) (cdar . gQ51b5) (cadr . gQ51b4) (caar . gQ51b3) (cdr . gQ51b2) (car . gQ51b1) (boolean? . gQ51b0) (boolean=? . gQ51af) (atan . gQ51ae) (assertion-violation . gQ51ad) (asin . gQ51ac) (apply . gQ51ab) (append . gQ51aa) (angle . gQ51a9) (acos . gQ51a8) (abs . gQ51a7) (/ . gQ51a6) (* . gQ51a5) (- . gQ51a4) (+ . gQ51a3) (>= . gQ51a2) (> . gQ51a1) (= . gQ51a0) (<= . gQ519f) (< . gQ519e) (library . gQ519d) (&no-nans . gQ519c) (&no-infinities . gQ519b) (&i/o-encoding . gQ519a) (&i/o-decoding . gQ5199) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f) (&undefined . gQ518e) (&syntax . gQ518d) (&lexical . gQ518c) (&implementation-restriction . gQ518b) (&non-continuable . gQ518a) (&who . gQ5189) (&irritants . gQ5188) (&assertion . gQ5187) (&violation . gQ5186) (&error . gQ5185) (&serious . gQ5184) (&warning . gQ5183) (&message . gQ5182) (&condition . gQ5181) (define-condition-type . gQ5180) (define-enumeration . gQ517f) (define-record-type . gQ517e) (parent-rtd . gQ517d) (nongenerative . gQ517c) (opaque . gQ517b) (sealed . gQ517a) (protocol . gQ5179) (parent . gQ5178) (immutable . gQ5177) (mutable . gQ5176) (fields . gQ5175) (error-handling-mode . gQ5174) (file-options . gQ5173) (buffer-mode . gQ5172) (eol-style . gQ5171) (guard . gQ5170) (unsyntax-splicing . gQ516d) (unsyntax . gQ516c) (unquote-splicing . gQ516b) (unquote . gQ516a) (_ . gQ5169) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (assert . gQ5165) (endianness . gQ5164) (time . gQ5162) (do . gQ5161) (cond . gQ5160) (let* . gQ515f) (let*-values . gQ515e) (let-values . gQ515d) (identifier-syntax . gQ515c) (with-syntax . gQ515b) (quasisyntax . gQ515a) (quasiquote . gQ5159) (syntax-rules . gQ5158) (include . gQ5157) (record-constructor-descriptor . gQ5155) (record-type-descriptor . gQ5154) (case . gQ5153) (unless . gQ5151) (when . gQ5150) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec* . gQ514b) (letrec . gQ514a) (case-lambda . gQ5148) (lambda . gQ5147) (syntax . gQ5146) (syntax-case . gQ5145) (quote . gQ5144) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (import . gQ513f) (begin . gQ513e) (define-syntax . gQ513c) (define . gQ513b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5463 '(psyntax null-environment-5) '() '() '() '() '((make-promise . gQ531b) (unquote-splicing . gQ516b) (unquote . gQ516a) (_ . gQ5169) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (delay . gQ5163) (do . gQ5161) (cond . gQ5160) (let* . gQ515f) (quasiquote . gQ5159) (syntax-rules . gQ5158) (case . gQ5153) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec . gQ514a) (lambda . gQ5147) (quote . gQ5144) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (begin . gQ513e) (define-syntax . gQ513c) (define . gQ513b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5464 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . gQ53b0) (string-ci>=? . gQ53af) (string-ci=? . gQ53ae) (string-ci<? . gQ53ad) (string-ci<=? . gQ53ac) (char-whitespace? . gQ53ab) (char-upper-case? . gQ53aa) (char-numeric? . gQ53a8) (char-lower-case? . gQ53a7) (char-upcase . gQ53a5) (char-downcase . gQ53a2) (char-ci>? . gQ53a1) (char-ci>=? . gQ53a0) (char-ci=? . gQ539f) (char-ci<? . gQ539e) (char-ci<=? . gQ539d) (char-alphabetic? . gQ539c) (call-with-output-file . gQ5370) (call-with-input-file . gQ536f) (write-char . gQ536e) (write . gQ536d) (with-output-to-file . gQ536c) (with-input-from-file . gQ536b) (read-char . gQ536a) (read . gQ5369) (peek-char . gQ5368) (open-output-file . gQ5367) (open-input-file . gQ5366) (newline . gQ5365) (display . gQ5364) (close-output-port . gQ5363) (close-input-port . gQ5362) (eof-object . gQ5360) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (scheme-report-environment . gQ3175) (quotient . gQ5321) (null-environment . gQ3173) (remainder . gQ5320) (modulo . gQ531f) (inexact->exact . gQ531e) (force . gQ531d) (exact->inexact . gQ531c) (make-promise . gQ531b) (string-fill! . gQ5319) (string-set! . gQ5318) (set-cdr! . gQ5317) (set-car! . gQ5316) (memv . gQ5310) (memq . gQ530f) (member . gQ530d) (assv . gQ5305) (assq . gQ5304) (assoc . gQ5302) (eval . gQ3179) (zero? . gQ523f) (vector? . gQ523e) (vector-set! . gQ523d) (vector-ref . gQ523c) (vector-length . gQ523a) (vector-fill! . gQ5238) (vector->list . gQ5237) (vector . gQ5236) (values . gQ5235) (truncate . gQ5234) (tan . gQ5233) (symbol? . gQ5232) (symbol->string . gQ5230) (substring . gQ522f) (string? . gQ522e) (string>? . gQ522d) (string>=? . gQ522c) (string=? . gQ522b) (string<? . gQ522a) (string<=? . gQ5229) (string-ref . gQ5228) (string-length . gQ5227) (string-copy . gQ5225) (string-append . gQ5224) (string->symbol . gQ5223) (string->number . gQ5222) (string->list . gQ5221) (string . gQ5220) (sqrt . gQ521f) (sin . gQ521e) (round . gQ521d) (reverse . gQ521c) (real? . gQ521b) (real-part . gQ5219) (rationalize . gQ5218) (rational? . gQ5217) (procedure? . gQ5215) (positive? . gQ5214) (pair? . gQ5213) (odd? . gQ5212) (numerator . gQ5211) (number? . gQ5210) (number->string . gQ520f) (not . gQ520d) (negative? . gQ520c) (min . gQ520a) (max . gQ5209) (map . gQ5208) (make-vector . gQ5207) (make-string . gQ5206) (make-rectangular . gQ5205) (make-polar . gQ5204) (magnitude . gQ5203) (log . gQ5202) (list? . gQ5201) (list-tail . gQ5200) (list-ref . gQ51ff) (list->vector . gQ51fe) (list->string . gQ51fd) (list . gQ51fc) (length . gQ51fb) (lcm . gQ51fa) (integer? . gQ51f9) (integer->char . gQ51f7) (inexact? . gQ51f5) (imag-part . gQ51f3) (gcd . gQ51f2) (for-each . gQ51f1) (floor . gQ51f0) (expt . gQ51ee) (exp . gQ51ed) (exact? . gQ51ec) (even? . gQ51e9) (eqv? . gQ51e7) (equal? . gQ51e6) (eq? . gQ51e5) (dynamic-wind . gQ51e4) (denominator . gQ51dd) (cos . gQ51dc) (cons . gQ51db) (complex? . gQ51da) (char? . gQ51d9) (char>? . gQ51d8) (char>=? . gQ51d7) (char=? . gQ51d6) (char<? . gQ51d5) (char<=? . gQ51d4) (char->integer . gQ51d3) (ceiling . gQ51d2) (call-with-values . gQ51d1) (call-with-current-continuation . gQ51cf) (cddddr . gQ51ce) (cdddar . gQ51cd) (cddadr . gQ51cc) (cddaar . gQ51cb) (cdaddr . gQ51ca) (cdadar . gQ51c9) (cdaadr . gQ51c8) (cdaaar . gQ51c7) (cadddr . gQ51c6) (caddar . gQ51c5) (cadadr . gQ51c4) (cadaar . gQ51c3) (caaddr . gQ51c2) (caadar . gQ51c1) (caaadr . gQ51c0) (caaaar . gQ51bf) (cdddr . gQ51be) (cddar . gQ51bd) (cdadr . gQ51bc) (cdaar . gQ51bb) (caddr . gQ51ba) (cadar . gQ51b9) (caadr . gQ51b8) (caaar . gQ51b7) (cddr . gQ51b6) (cdar . gQ51b5) (cadr . gQ51b4) (caar . gQ51b3) (cdr . gQ51b2) (car . gQ51b1) (boolean? . gQ51b0) (atan . gQ51ae) (asin . gQ51ac) (apply . gQ51ab) (append . gQ51aa) (angle . gQ51a9) (acos . gQ51a8) (abs . gQ51a7) (/ . gQ51a6) (* . gQ51a5) (- . gQ51a4) (+ . gQ51a3) (>= . gQ51a2) (> . gQ51a1) (= . gQ51a0) (<= . gQ519f) (< . gQ519e) (unquote-splicing . gQ516b) (unquote . gQ516a) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (delay . gQ5163) (do . gQ5161) (cond . gQ5160) (let* . gQ515f) (quasiquote . gQ5159) (syntax-rules . gQ5158) (case . gQ5153) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec . gQ514a) (lambda . gQ5147) (quote . gQ5144) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (begin . gQ513e) (define-syntax . gQ513c) (define . gQ513b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5465 '(psyntax modules) '() '() '() '() '((module . gQ513d)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5466 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5467 '(rnrs) '(6) '() '() '() '((regexp? . gQ545a) (string-upcase . gQ53b8) (string-titlecase . gQ53b7) (string-normalize-nfkd . gQ53b6) (string-normalize-nfkc . gQ53b5) (string-normalize-nfd . gQ53b4) (string-normalize-nfc . gQ53b3) (string-foldcase . gQ53b2) (string-downcase . gQ53b1) (string-ci>? . gQ53b0) (string-ci>=? . gQ53af) (string-ci=? . gQ53ae) (string-ci<? . gQ53ad) (string-ci<=? . gQ53ac) (char-whitespace? . gQ53ab) (char-upper-case? . gQ53aa) (char-title-case? . gQ53a9) (char-numeric? . gQ53a8) (char-lower-case? . gQ53a7) (char-general-category . gQ53a6) (char-upcase . gQ53a5) (char-titlecase . gQ53a4) (char-foldcase . gQ53a3) (char-downcase . gQ53a2) (char-ci>? . gQ53a1) (char-ci>=? . gQ53a0) (char-ci=? . gQ539f) (char-ci<? . gQ539e) (char-ci<=? . gQ539d) (char-alphabetic? . gQ539c) (make-variable-transformer . gQ2ee4) (identifier? . gQ319b) (generate-temporaries . gQ3187) (free-identifier=? . gQ3189) (syntax->datum . gQ319f) (datum->syntax . gQ319d) (bound-identifier=? . gQ318b) (record-type-descriptor? . gQ539b) (record-predicate . gQ539a) (record-mutator . gQ5399) (record-constructor . gQ5398) (record-accessor . gQ5397) (make-record-type-descriptor . gQ5396) (make-record-constructor-descriptor . gQ5395) (record? . gQ5394) (record-type-uid . gQ5393) (record-type-sealed? . gQ5392) (record-type-parent . gQ5391) (record-type-opaque? . gQ5390) (record-type-name . gQ538f) (record-type-generative? . gQ538e) (record-type-field-names . gQ538d) (record-rtd . gQ538c) (record-field-mutable? . gQ538b) (delete-file . gQ538a) (file-exists? . gQ5389) (vector-sort! . gQ5388) (vector-sort . gQ5387) (list-sort . gQ5386) (symbol-hash . gQ5385) (string-ci-hash . gQ5384) (string-hash . gQ5383) (equal-hash . gQ5382) (hashtable-equivalence-function . gQ5381) (make-hashtable . gQ5380) (hashtable-hash-function . gQ537f) (make-eqv-hashtable . gQ537e) (make-eq-hashtable . gQ537d) (hashtable? . gQ537c) (hashtable-update! . gQ537b) (hashtable-size . gQ537a) (hashtable-set! . gQ5379) (hashtable-ref . gQ5378) (hashtable-mutable? . gQ5377) (hashtable-keys . gQ5376) (hashtable-entries . gQ5375) (hashtable-delete! . gQ5374) (hashtable-copy . gQ5373) (hashtable-contains? . gQ5372) (hashtable-clear! . gQ5371) (call-with-output-file . gQ5370) (call-with-input-file . gQ536f) (write-char . gQ536e) (write . gQ536d) (with-output-to-file . gQ536c) (with-input-from-file . gQ536b) (read-char . gQ536a) (read . gQ5369) (peek-char . gQ5368) (open-output-file . gQ5367) (open-input-file . gQ5366) (newline . gQ5365) (display . gQ5364) (close-output-port . gQ5363) (close-input-port . gQ5362) (eof-object? . gQ5361) (eof-object . gQ5360) (current-error-port . gQ535f) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (utf-8-codec . gQ535a) (utf-16-codec . gQ5359) (transcoder-error-handling-mode . gQ5358) (transcoder-eol-style . gQ5357) (transcoder-codec . gQ5356) (transcoded-port . gQ5355) (textual-port? . gQ5354) (string->bytevector . gQ5353) (standard-output-port . gQ5352) (standard-input-port . gQ5351) (standard-error-port . gQ5350) (set-port-position! . gQ534f) (put-u8 . gQ534e) (put-string . gQ534d) (put-datum . gQ534c) (put-char . gQ534b) (put-bytevector . gQ534a) (port? . gQ5349) (port-transcoder . gQ5348) (port-position . gQ5347) (port-has-set-port-position!? . gQ5346) (port-has-port-position? . gQ5345) (port-eof? . gQ5344) (output-port-buffer-mode . gQ5343) (open-string-output-port . gQ5342) (open-string-input-port . gQ5341) (open-file-output-port . gQ5340) (open-file-input/output-port . gQ533f) (open-file-input-port . gQ533e) (open-bytevector-output-port . gQ533d) (open-bytevector-input-port . gQ533c) (native-transcoder . gQ533b) (native-eol-style . gQ533a) (make-transcoder . gQ5339) (latin-1-codec . gQ5338) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (make-i/o-encoding-error . gQ4e94) (make-i/o-decoding-error . gQ4e7d) (make-custom-textual-output-port . gQ5337) (make-custom-textual-input/output-port . gQ5336) (make-custom-textual-input-port . gQ5335) (make-custom-binary-output-port . gQ5334) (make-custom-binary-input/output-port . gQ5333) (make-custom-binary-input-port . gQ5332) (make-bytevector . gQ5331) (lookahead-u8 . gQ5330) (lookahead-char . gQ532f) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (i/o-encoding-error? . gQ4e98) (i/o-encoding-error-char . gQ4e9a) (i/o-decoding-error? . gQ4e7f) (get-u8 . gQ532e) (get-string-n! . gQ532d) (get-string-n . gQ532c) (get-string-all . gQ532b) (get-line . gQ532a) (get-datum . gQ5329) (get-char . gQ5328) (get-bytevector-some . gQ5327) (get-bytevector-n! . gQ5326) (get-bytevector-n . gQ5325) (get-bytevector-all . gQ5324) (flush-output-port . gQ5323) (close-port . gQ5322) (exit . gQ531a) (command-line . gQ4fd3) (remove . gQ5315) (remv . gQ5314) (remp . gQ5313) (remq . gQ5312) (partition . gQ5311) (memv . gQ5310) (memq . gQ530f) (memp . gQ530e) (member . gQ530d) (exists . gQ530c) (for-all . gQ530b) (fold-right . gQ530a) (fold-left . gQ5309) (find . gQ5308) (filter . gQ5307) (cons* . gQ5306) (assv . gQ5305) (assq . gQ5304) (assp . gQ5303) (assoc . gQ5302) (call-with-string-output-port . gQ5301) (call-with-port . gQ5300) (call-with-bytevector-output-port . gQ52ff) (bytevector->string . gQ52fe) (buffer-mode? . gQ52fd) (binary-port? . gQ52fc) (with-exception-handler . gQ52fb) (raise-continuable . gQ52fa) (raise . gQ52f9) (make-enumeration . gQ52f8) (enum-set=? . gQ52f7) (enum-set-universe . gQ52f6) (enum-set-union . gQ52f5) (enum-set-subset? . gQ52f4) (enum-set-projection . gQ52f3) (enum-set-member? . gQ52f2) (enum-set-intersection . gQ52f1) (enum-set-indexer . gQ52f0) (enum-set-difference . gQ52ef) (enum-set-constructor . gQ52ee) (enum-set-complement . gQ52ed) (enum-set->list . gQ52ec) (who-condition? . gQ4d0f) (warning? . gQ4c87) (violation? . gQ4cc6) (undefined-violation? . gQ4d86) (syntax-violation? . gQ4d6d) (syntax-violation-subform . gQ4d71) (syntax-violation-form . gQ4d6f) (syntax-violation . gQ3199) (simple-conditions . gQ52eb) (serious-condition? . gQ4c9c) (non-continuable-violation? . gQ4d26) (message-condition? . gQ4c70) (make-who-condition . gQ4d0b) (make-warning . gQ4c85) (make-violation . gQ4cc4) (make-undefined-violation . gQ4d84) (make-syntax-violation . gQ4d67) (make-serious-condition . gQ4c9a) (make-non-continuable-violation . gQ4d24) (make-message-condition . gQ4c6c) (make-lexical-violation . gQ4d4e) (make-irritants-condition . gQ4cf0) (make-implementation-restriction-violation . gQ4d39) (make-error . gQ4caf) (make-assertion-violation . gQ4cd9) (lexical-violation? . gQ4d50) (irritants-condition? . gQ4cf4) (implementation-restriction-violation? . gQ4d3b) (error? . gQ4cb1) (condition-who . gQ4d11) (condition-predicate . gQ52ea) (condition-message . gQ4c72) (condition-irritants . gQ4cf6) (condition-accessor . gQ52e9) (condition . gQ52e8) (assertion-violation? . gQ4cdb) (condition? . gQ52e7) (utf32->string . gQ52e6) (utf16->string . gQ52e5) (utf8->string . gQ52e4) (uint-list->bytevector . gQ52e3) (u8-list->bytevector . gQ52e2) (string->utf8 . gQ52e1) (string->utf32 . gQ52e0) (string->utf16 . gQ52df) (sint-list->bytevector . gQ52de) (native-endianness . gQ52dd) (bytevector? . gQ52dc) (bytevector=? . gQ52db) (bytevector-uint-set! . gQ52da) (bytevector-uint-ref . gQ52d9) (bytevector-u8-set! . gQ52d8) (bytevector-u8-ref . gQ52d7) (bytevector-u64-set! . gQ52d6) (bytevector-u64-ref . gQ52d5) (bytevector-u64-native-set! . gQ52d4) (bytevector-u64-native-ref . gQ52d3) (bytevector-u32-set! . gQ52d2) (bytevector-u32-ref . gQ52d1) (bytevector-u32-native-set! . gQ52d0) (bytevector-u32-native-ref . gQ52cf) (bytevector-u16-set! . gQ52ce) (bytevector-u16-ref . gQ52cd) (bytevector-u16-native-set! . gQ52cc) (bytevector-u16-native-ref . gQ52cb) (bytevector-sint-set! . gQ52ca) (bytevector-sint-ref . gQ52c9) (bytevector-s8-set! . gQ52c8) (bytevector-s8-ref . gQ52c7) (bytevector-s64-set! . gQ52c6) (bytevector-s64-ref . gQ52c5) (bytevector-s64-native-set! . gQ52c4) (bytevector-s64-native-ref . gQ52c3) (bytevector-s32-set! . gQ52c2) (bytevector-s32-ref . gQ52c1) (bytevector-s32-native-set! . gQ52c0) (bytevector-s32-native-ref . gQ52bf) (bytevector-s16-set! . gQ52be) (bytevector-s16-ref . gQ52bd) (bytevector-s16-native-set! . gQ52bc) (bytevector-s16-native-ref . gQ52bb) (bytevector-length . gQ52ba) (bytevector-ieee-single-ref . gQ52b9) (bytevector-ieee-single-set! . gQ52b8) (bytevector-ieee-single-native-set! . gQ52b7) (bytevector-ieee-single-native-ref . gQ52b6) (bytevector-ieee-double-set! . gQ52b5) (bytevector-ieee-double-ref . gQ52b4) (bytevector-ieee-double-native-set! . gQ52b3) (bytevector-ieee-double-native-ref . gQ52b2) (bytevector-fill! . gQ52b1) (bytevector-copy! . gQ52b0) (bytevector-copy . gQ52af) (bytevector->uint-list . gQ52ae) (bytevector->u8-list . gQ52ad) (bytevector->sint-list . gQ52ac) (no-nans-violation? . gQ4ec4) (no-infinities-violation? . gQ4eaf) (make-no-nans-violation . gQ4ec2) (make-no-infinities-violation . gQ4ead) (real->flonum . gQ52ab) (flzero? . gQ52aa) (fltruncate . gQ52a9) (fltan . gQ52a8) (flsqrt . gQ52a7) (flsin . gQ52a6) (flround . gQ52a5) (flpositive? . gQ52a4) (flonum? . gQ52a3) (flodd? . gQ52a2) (flnumerator . gQ52a1) (flnegative? . gQ52a0) (flnan? . gQ529f) (flmod0 . gQ529e) (flmod . gQ529d) (flmin . gQ529c) (flmax . gQ529b) (fllog . gQ529a) (flinteger? . gQ5299) (flinfinite? . gQ5298) (flfloor . gQ5297) (flfinite? . gQ5296) (flexpt . gQ5295) (flexp . gQ5294) (fleven? . gQ5293) (fldiv0-and-mod0 . gQ5292) (fldiv0 . gQ5291) (fldiv-and-mod . gQ5290) (fldiv . gQ528f) (fldenominator . gQ528e) (flcos . gQ528d) (flceiling . gQ528c) (flatan . gQ528b) (flasin . gQ528a) (flacos . gQ5289) (flabs . gQ5288) (fl>? . gQ5287) (fl>=? . gQ5286) (fl=? . gQ5285) (fl<? . gQ5284) (fl<=? . gQ5283) (fl/ . gQ5282) (fl- . gQ5281) (fl+ . gQ5280) (fl* . gQ527f) (fixnum->flonum . gQ527e) (fxzero? . gQ527d) (fxxor . gQ527c) (fxrotate-bit-field . gQ527b) (fxreverse-bit-field . gQ527a) (fxpositive? . gQ5279) (fxodd? . gQ5278) (fxnot . gQ5277) (fxnegative? . gQ5276) (fxmod0 . gQ5275) (fxmod . gQ5274) (fxmin . gQ5273) (fxmax . gQ5272) (fxlength . gQ5271) (fxior . gQ5270) (fxif . gQ526f) (fxfirst-bit-set . gQ526e) (fxeven? . gQ526d) (fxdiv0-and-mod0 . gQ526c) (fxdiv0 . gQ526b) (fxdiv-and-mod . gQ526a) (fxdiv . gQ5269) (fxcopy-bit-field . gQ5268) (fxcopy-bit . gQ5267) (fxbit-set? . gQ5266) (fxbit-field . gQ5265) (fxbit-count . gQ5264) (fxarithmetic-shift-right . gQ5263) (fxarithmetic-shift-left . gQ5262) (fxarithmetic-shift . gQ5261) (fxand . gQ5260) (fx>? . gQ525f) (fx>=? . gQ525e) (fx=? . gQ525d) (fx<? . gQ525c) (fx<=? . gQ525b) (fx-/carry . gQ525a) (fx- . gQ5259) (fx+/carry . gQ5258) (fx+ . gQ5257) (fx*/carry . gQ5256) (fx* . gQ5255) (greatest-fixnum . gQ5254) (least-fixnum . gQ5253) (fixnum-width . gQ5252) (fixnum? . gQ5251) (bitwise-rotate-bit-field . gQ5250) (bitwise-reverse-bit-field . gQ524f) (bitwise-length . gQ524e) (bitwise-if . gQ524d) (bitwise-first-bit-set . gQ524c) (bitwise-copy-bit-field . gQ524b) (bitwise-copy-bit . gQ524a) (bitwise-bit-set? . gQ5249) (bitwise-bit-field . gQ5248) (bitwise-bit-count . gQ5247) (bitwise-xor . gQ5246) (bitwise-ior . gQ5245) (bitwise-and . gQ5244) (bitwise-not . gQ5243) (bitwise-arithmetic-shift-right . gQ5242) (bitwise-arithmetic-shift-left . gQ5241) (bitwise-arithmetic-shift . gQ5240) (zero? . gQ523f) (vector? . gQ523e) (vector-set! . gQ523d) (vector-ref . gQ523c) (vector-map . gQ523b) (vector-length . gQ523a) (vector-for-each . gQ5239) (vector-fill! . gQ5238) (vector->list . gQ5237) (vector . gQ5236) (values . gQ5235) (truncate . gQ5234) (tan . gQ5233) (symbol? . gQ5232) (symbol=? . gQ5231) (symbol->string . gQ5230) (substring . gQ522f) (string? . gQ522e) (string>? . gQ522d) (string>=? . gQ522c) (string=? . gQ522b) (string<? . gQ522a) (string<=? . gQ5229) (string-ref . gQ5228) (string-length . gQ5227) (string-for-each . gQ5226) (string-copy . gQ5225) (string-append . gQ5224) (string->symbol . gQ5223) (string->number . gQ5222) (string->list . gQ5221) (string . gQ5220) (sqrt . gQ521f) (sin . gQ521e) (round . gQ521d) (reverse . gQ521c) (real? . gQ521b) (real-valued? . gQ521a) (real-part . gQ5219) (rationalize . gQ5218) (rational? . gQ5217) (rational-valued? . gQ5216) (procedure? . gQ5215) (positive? . gQ5214) (pair? . gQ5213) (odd? . gQ5212) (numerator . gQ5211) (number? . gQ5210) (number->string . gQ520f) (null? . gQ520e) (not . gQ520d) (negative? . gQ520c) (nan? . gQ520b) (min . gQ520a) (max . gQ5209) (map . gQ5208) (make-vector . gQ5207) (make-string . gQ5206) (make-rectangular . gQ5205) (make-polar . gQ5204) (magnitude . gQ5203) (log . gQ5202) (list? . gQ5201) (list-tail . gQ5200) (list-ref . gQ51ff) (list->vector . gQ51fe) (list->string . gQ51fd) (list . gQ51fc) (length . gQ51fb) (lcm . gQ51fa) (integer? . gQ51f9) (integer-valued? . gQ51f8) (integer->char . gQ51f7) (infinite? . gQ51f6) (inexact? . gQ51f5) (inexact . gQ51f4) (imag-part . gQ51f3) (gcd . gQ51f2) (for-each . gQ51f1) (floor . gQ51f0) (finite? . gQ51ef) (expt . gQ51ee) (exp . gQ51ed) (exact? . gQ51ec) (exact-integer-sqrt . gQ51eb) (exact . gQ51ea) (even? . gQ51e9) (error . gQ51e8) (eqv? . gQ51e7) (equal? . gQ51e6) (eq? . gQ51e5) (dynamic-wind . gQ51e4) (div0-and-mod0 . gQ51e3) (mod0 . gQ51e2) (div0 . gQ51e1) (div-and-mod . gQ51e0) (mod . gQ51df) (div . gQ51de) (denominator . gQ51dd) (cos . gQ51dc) (cons . gQ51db) (complex? . gQ51da) (char? . gQ51d9) (char>? . gQ51d8) (char>=? . gQ51d7) (char=? . gQ51d6) (char<? . gQ51d5) (char<=? . gQ51d4) (char->integer . gQ51d3) (ceiling . gQ51d2) (call-with-values . gQ51d1) (call/cc . gQ51d0) (call-with-current-continuation . gQ51cf) (cddddr . gQ51ce) (cdddar . gQ51cd) (cddadr . gQ51cc) (cddaar . gQ51cb) (cdaddr . gQ51ca) (cdadar . gQ51c9) (cdaadr . gQ51c8) (cdaaar . gQ51c7) (cadddr . gQ51c6) (caddar . gQ51c5) (cadadr . gQ51c4) (cadaar . gQ51c3) (caaddr . gQ51c2) (caadar . gQ51c1) (caaadr . gQ51c0) (caaaar . gQ51bf) (cdddr . gQ51be) (cddar . gQ51bd) (cdadr . gQ51bc) (cdaar . gQ51bb) (caddr . gQ51ba) (cadar . gQ51b9) (caadr . gQ51b8) (caaar . gQ51b7) (cddr . gQ51b6) (cdar . gQ51b5) (cadr . gQ51b4) (caar . gQ51b3) (cdr . gQ51b2) (car . gQ51b1) (boolean? . gQ51b0) (boolean=? . gQ51af) (atan . gQ51ae) (assertion-violation . gQ51ad) (asin . gQ51ac) (apply . gQ51ab) (append . gQ51aa) (angle . gQ51a9) (acos . gQ51a8) (abs . gQ51a7) (/ . gQ51a6) (* . gQ51a5) (- . gQ51a4) (+ . gQ51a3) (>= . gQ51a2) (> . gQ51a1) (= . gQ51a0) (<= . gQ519f) (< . gQ519e) (&no-nans . gQ519c) (&no-infinities . gQ519b) (&i/o-encoding . gQ519a) (&i/o-decoding . gQ5199) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f) (&undefined . gQ518e) (&syntax . gQ518d) (&lexical . gQ518c) (&implementation-restriction . gQ518b) (&non-continuable . gQ518a) (&who . gQ5189) (&irritants . gQ5188) (&assertion . gQ5187) (&violation . gQ5186) (&error . gQ5185) (&serious . gQ5184) (&warning . gQ5183) (&message . gQ5182) (&condition . gQ5181) (define-condition-type . gQ5180) (define-enumeration . gQ517f) (define-record-type . gQ517e) (parent-rtd . gQ517d) (nongenerative . gQ517c) (opaque . gQ517b) (sealed . gQ517a) (protocol . gQ5179) (parent . gQ5178) (immutable . gQ5177) (mutable . gQ5176) (fields . gQ5175) (error-handling-mode . gQ5174) (file-options . gQ5173) (buffer-mode . gQ5172) (eol-style . gQ5171) (guard . gQ5170) (unsyntax-splicing . gQ516d) (unsyntax . gQ516c) (unquote-splicing . gQ516b) (unquote . gQ516a) (_ . gQ5169) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (assert . gQ5165) (endianness . gQ5164) (do . gQ5161) (cond . gQ5160) (let* . gQ515f) (let*-values . gQ515e) (let-values . gQ515d) (identifier-syntax . gQ515c) (with-syntax . gQ515b) (quasisyntax . gQ515a) (quasiquote . gQ5159) (syntax-rules . gQ5158) (record-constructor-descriptor . gQ5155) (record-type-descriptor . gQ5154) (case . gQ5153) (unless . gQ5151) (when . gQ5150) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec* . gQ514b) (letrec . gQ514a) (case-lambda . gQ5148) (lambda . gQ5147) (syntax . gQ5146) (syntax-case . gQ5145) (quote . gQ5144) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (begin . gQ513e) (define-syntax . gQ513c) (define . gQ513b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5468 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . gQ3175) (quotient . gQ5321) (null-environment . gQ3173) (remainder . gQ5320) (modulo . gQ531f) (inexact->exact . gQ531e) (force . gQ531d) (exact->inexact . gQ531c) (make-promise . gQ531b) (delay . gQ5163)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5469 '(rnrs control) '(6) '() '() '() '((do . gQ5161) (unless . gQ5151) (when . gQ5150) (case-lambda . gQ5148)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546a '(rnrs eval) '(6) '() '() '() '((eval . gQ3179) (environment . gQ3171)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . gQ5317) (set-car! . gQ5316)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . gQ5319) (string-set! . gQ5318)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546d '(rnrs programs) '(6) '() '() '() '((exit . gQ531a) (command-line . gQ4fd3)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . gQ2ee4) (identifier? . gQ319b) (generate-temporaries . gQ3187) (free-identifier=? . gQ3189) (syntax->datum . gQ319f) (datum->syntax . gQ319d) (bound-identifier=? . gQ318b) (syntax-violation . gQ3199) (unsyntax-splicing . gQ516d) (unsyntax . gQ516c) (_ . gQ5169) (... . gQ5166) (with-syntax . gQ515b) (quasisyntax . gQ515a) (syntax . gQ5146) (syntax-case . gQ5145)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ546f '(rnrs files) '(6) '() '() '() '((delete-file . gQ538a) (file-exists? . gQ5389) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5470 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . gQ5388) (vector-sort . gQ5387) (list-sort . gQ5386)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5471 '(rnrs base) '(6) '() '() '() '((zero? . gQ523f) (vector? . gQ523e) (vector-set! . gQ523d) (vector-ref . gQ523c) (vector-map . gQ523b) (vector-length . gQ523a) (vector-for-each . gQ5239) (vector-fill! . gQ5238) (vector->list . gQ5237) (vector . gQ5236) (values . gQ5235) (truncate . gQ5234) (tan . gQ5233) (symbol? . gQ5232) (symbol=? . gQ5231) (symbol->string . gQ5230) (substring . gQ522f) (string? . gQ522e) (string>? . gQ522d) (string>=? . gQ522c) (string=? . gQ522b) (string<? . gQ522a) (string<=? . gQ5229) (string-ref . gQ5228) (string-length . gQ5227) (string-for-each . gQ5226) (string-copy . gQ5225) (string-append . gQ5224) (string->symbol . gQ5223) (string->number . gQ5222) (string->list . gQ5221) (string . gQ5220) (sqrt . gQ521f) (sin . gQ521e) (round . gQ521d) (reverse . gQ521c) (real? . gQ521b) (real-valued? . gQ521a) (real-part . gQ5219) (rationalize . gQ5218) (rational? . gQ5217) (rational-valued? . gQ5216) (procedure? . gQ5215) (positive? . gQ5214) (pair? . gQ5213) (odd? . gQ5212) (numerator . gQ5211) (number? . gQ5210) (number->string . gQ520f) (null? . gQ520e) (not . gQ520d) (negative? . gQ520c) (nan? . gQ520b) (min . gQ520a) (max . gQ5209) (map . gQ5208) (make-vector . gQ5207) (make-string . gQ5206) (make-rectangular . gQ5205) (make-polar . gQ5204) (magnitude . gQ5203) (log . gQ5202) (list? . gQ5201) (list-tail . gQ5200) (list-ref . gQ51ff) (list->vector . gQ51fe) (list->string . gQ51fd) (list . gQ51fc) (length . gQ51fb) (lcm . gQ51fa) (integer? . gQ51f9) (integer-valued? . gQ51f8) (integer->char . gQ51f7) (infinite? . gQ51f6) (inexact? . gQ51f5) (inexact . gQ51f4) (imag-part . gQ51f3) (gcd . gQ51f2) (for-each . gQ51f1) (floor . gQ51f0) (finite? . gQ51ef) (expt . gQ51ee) (exp . gQ51ed) (exact? . gQ51ec) (exact-integer-sqrt . gQ51eb) (exact . gQ51ea) (even? . gQ51e9) (error . gQ51e8) (eqv? . gQ51e7) (equal? . gQ51e6) (eq? . gQ51e5) (dynamic-wind . gQ51e4) (div0-and-mod0 . gQ51e3) (mod0 . gQ51e2) (div0 . gQ51e1) (div-and-mod . gQ51e0) (mod . gQ51df) (div . gQ51de) (denominator . gQ51dd) (cos . gQ51dc) (cons . gQ51db) (complex? . gQ51da) (char? . gQ51d9) (char>? . gQ51d8) (char>=? . gQ51d7) (char=? . gQ51d6) (char<? . gQ51d5) (char<=? . gQ51d4) (char->integer . gQ51d3) (ceiling . gQ51d2) (call-with-values . gQ51d1) (call/cc . gQ51d0) (call-with-current-continuation . gQ51cf) (cddddr . gQ51ce) (cdddar . gQ51cd) (cddadr . gQ51cc) (cddaar . gQ51cb) (cdaddr . gQ51ca) (cdadar . gQ51c9) (cdaadr . gQ51c8) (cdaaar . gQ51c7) (cadddr . gQ51c6) (caddar . gQ51c5) (cadadr . gQ51c4) (cadaar . gQ51c3) (caaddr . gQ51c2) (caadar . gQ51c1) (caaadr . gQ51c0) (caaaar . gQ51bf) (cdddr . gQ51be) (cddar . gQ51bd) (cdadr . gQ51bc) (cdaar . gQ51bb) (caddr . gQ51ba) (cadar . gQ51b9) (caadr . gQ51b8) (caaar . gQ51b7) (cddr . gQ51b6) (cdar . gQ51b5) (cadr . gQ51b4) (caar . gQ51b3) (cdr . gQ51b2) (car . gQ51b1) (boolean? . gQ51b0) (boolean=? . gQ51af) (atan . gQ51ae) (assertion-violation . gQ51ad) (asin . gQ51ac) (apply . gQ51ab) (append . gQ51aa) (angle . gQ51a9) (acos . gQ51a8) (abs . gQ51a7) (/ . gQ51a6) (* . gQ51a5) (- . gQ51a4) (+ . gQ51a3) (>= . gQ51a2) (> . gQ51a1) (= . gQ51a0) (<= . gQ519f) (< . gQ519e) (unquote-splicing . gQ516b) (unquote . gQ516a) (_ . gQ5169) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (assert . gQ5165) (cond . gQ5160) (let* . gQ515f) (let*-values . gQ515e) (let-values . gQ515d) (identifier-syntax . gQ515c) (quasiquote . gQ5159) (syntax-rules . gQ5158) (case . gQ5153) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec* . gQ514b) (letrec . gQ514a) (lambda . gQ5147) (quote . gQ5144) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (begin . gQ513e) (define-syntax . gQ513c) (define . gQ513b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5472 '(rnrs lists) '(6) '() '() '() '((remove . gQ5315) (remv . gQ5314) (remp . gQ5313) (remq . gQ5312) (partition . gQ5311) (memv . gQ5310) (memq . gQ530f) (memp . gQ530e) (member . gQ530d) (exists . gQ530c) (for-all . gQ530b) (fold-right . gQ530a) (fold-left . gQ5309) (find . gQ5308) (filter . gQ5307) (cons* . gQ5306) (assv . gQ5305) (assq . gQ5304) (assp . gQ5303) (assoc . gQ5302)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5473 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . gQ5370) (call-with-input-file . gQ536f) (write-char . gQ536e) (write . gQ536d) (with-output-to-file . gQ536c) (with-input-from-file . gQ536b) (read-char . gQ536a) (read . gQ5369) (peek-char . gQ5368) (open-output-file . gQ5367) (open-input-file . gQ5366) (newline . gQ5365) (display . gQ5364) (close-output-port . gQ5363) (close-input-port . gQ5362) (eof-object? . gQ5361) (eof-object . gQ5360) (current-error-port . gQ535f) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5474 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . gQ5331) (utf32->string . gQ52e6) (utf16->string . gQ52e5) (utf8->string . gQ52e4) (uint-list->bytevector . gQ52e3) (u8-list->bytevector . gQ52e2) (string->utf8 . gQ52e1) (string->utf32 . gQ52e0) (string->utf16 . gQ52df) (sint-list->bytevector . gQ52de) (native-endianness . gQ52dd) (bytevector? . gQ52dc) (bytevector=? . gQ52db) (bytevector-uint-set! . gQ52da) (bytevector-uint-ref . gQ52d9) (bytevector-u8-set! . gQ52d8) (bytevector-u8-ref . gQ52d7) (bytevector-u64-set! . gQ52d6) (bytevector-u64-ref . gQ52d5) (bytevector-u64-native-set! . gQ52d4) (bytevector-u64-native-ref . gQ52d3) (bytevector-u32-set! . gQ52d2) (bytevector-u32-ref . gQ52d1) (bytevector-u32-native-set! . gQ52d0) (bytevector-u32-native-ref . gQ52cf) (bytevector-u16-set! . gQ52ce) (bytevector-u16-ref . gQ52cd) (bytevector-u16-native-set! . gQ52cc) (bytevector-u16-native-ref . gQ52cb) (bytevector-sint-set! . gQ52ca) (bytevector-sint-ref . gQ52c9) (bytevector-s8-set! . gQ52c8) (bytevector-s8-ref . gQ52c7) (bytevector-s64-set! . gQ52c6) (bytevector-s64-ref . gQ52c5) (bytevector-s64-native-set! . gQ52c4) (bytevector-s64-native-ref . gQ52c3) (bytevector-s32-set! . gQ52c2) (bytevector-s32-ref . gQ52c1) (bytevector-s32-native-set! . gQ52c0) (bytevector-s32-native-ref . gQ52bf) (bytevector-s16-set! . gQ52be) (bytevector-s16-ref . gQ52bd) (bytevector-s16-native-set! . gQ52bc) (bytevector-s16-native-ref . gQ52bb) (bytevector-length . gQ52ba) (bytevector-ieee-single-ref . gQ52b9) (bytevector-ieee-single-set! . gQ52b8) (bytevector-ieee-single-native-set! . gQ52b7) (bytevector-ieee-single-native-ref . gQ52b6) (bytevector-ieee-double-set! . gQ52b5) (bytevector-ieee-double-ref . gQ52b4) (bytevector-ieee-double-native-set! . gQ52b3) (bytevector-ieee-double-native-ref . gQ52b2) (bytevector-fill! . gQ52b1) (bytevector-copy! . gQ52b0) (bytevector-copy . gQ52af) (bytevector->uint-list . gQ52ae) (bytevector->u8-list . gQ52ad) (bytevector->sint-list . gQ52ac) (endianness . gQ5164)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5475 '(rnrs unicode) '(6) '() '() '() '((string-upcase . gQ53b8) (string-titlecase . gQ53b7) (string-normalize-nfkd . gQ53b6) (string-normalize-nfkc . gQ53b5) (string-normalize-nfd . gQ53b4) (string-normalize-nfc . gQ53b3) (string-foldcase . gQ53b2) (string-downcase . gQ53b1) (string-ci>? . gQ53b0) (string-ci>=? . gQ53af) (string-ci=? . gQ53ae) (string-ci<? . gQ53ad) (string-ci<=? . gQ53ac) (char-whitespace? . gQ53ab) (char-upper-case? . gQ53aa) (char-title-case? . gQ53a9) (char-numeric? . gQ53a8) (char-lower-case? . gQ53a7) (char-general-category . gQ53a6) (char-upcase . gQ53a5) (char-titlecase . gQ53a4) (char-foldcase . gQ53a3) (char-downcase . gQ53a2) (char-ci>? . gQ53a1) (char-ci>=? . gQ53a0) (char-ci=? . gQ539f) (char-ci<? . gQ539e) (char-ci<=? . gQ539d) (char-alphabetic? . gQ539c)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5476 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . gQ52fb) (raise-continuable . gQ52fa) (raise . gQ52f9) (guard . gQ5170) (else . gQ5168) (=> . gQ5167)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5477 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . gQ5250) (bitwise-reverse-bit-field . gQ524f) (bitwise-length . gQ524e) (bitwise-if . gQ524d) (bitwise-first-bit-set . gQ524c) (bitwise-copy-bit-field . gQ524b) (bitwise-copy-bit . gQ524a) (bitwise-bit-set? . gQ5249) (bitwise-bit-field . gQ5248) (bitwise-bit-count . gQ5247) (bitwise-xor . gQ5246) (bitwise-ior . gQ5245) (bitwise-and . gQ5244) (bitwise-not . gQ5243) (bitwise-arithmetic-shift-right . gQ5242) (bitwise-arithmetic-shift-left . gQ5241) (bitwise-arithmetic-shift . gQ5240)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5478 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . gQ527d) (fxxor . gQ527c) (fxrotate-bit-field . gQ527b) (fxreverse-bit-field . gQ527a) (fxpositive? . gQ5279) (fxodd? . gQ5278) (fxnot . gQ5277) (fxnegative? . gQ5276) (fxmod0 . gQ5275) (fxmod . gQ5274) (fxmin . gQ5273) (fxmax . gQ5272) (fxlength . gQ5271) (fxior . gQ5270) (fxif . gQ526f) (fxfirst-bit-set . gQ526e) (fxeven? . gQ526d) (fxdiv0-and-mod0 . gQ526c) (fxdiv0 . gQ526b) (fxdiv-and-mod . gQ526a) (fxdiv . gQ5269) (fxcopy-bit-field . gQ5268) (fxcopy-bit . gQ5267) (fxbit-set? . gQ5266) (fxbit-field . gQ5265) (fxbit-count . gQ5264) (fxarithmetic-shift-right . gQ5263) (fxarithmetic-shift-left . gQ5262) (fxarithmetic-shift . gQ5261) (fxand . gQ5260) (fx>? . gQ525f) (fx>=? . gQ525e) (fx=? . gQ525d) (fx<? . gQ525c) (fx<=? . gQ525b) (fx-/carry . gQ525a) (fx- . gQ5259) (fx+/carry . gQ5258) (fx+ . gQ5257) (fx*/carry . gQ5256) (fx* . gQ5255) (greatest-fixnum . gQ5254) (least-fixnum . gQ5253) (fixnum-width . gQ5252) (fixnum? . gQ5251)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5479 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . gQ4ec4) (no-infinities-violation? . gQ4eaf) (make-no-nans-violation . gQ4ec2) (make-no-infinities-violation . gQ4ead) (real->flonum . gQ52ab) (flzero? . gQ52aa) (fltruncate . gQ52a9) (fltan . gQ52a8) (flsqrt . gQ52a7) (flsin . gQ52a6) (flround . gQ52a5) (flpositive? . gQ52a4) (flonum? . gQ52a3) (flodd? . gQ52a2) (flnumerator . gQ52a1) (flnegative? . gQ52a0) (flnan? . gQ529f) (flmod0 . gQ529e) (flmod . gQ529d) (flmin . gQ529c) (flmax . gQ529b) (fllog . gQ529a) (flinteger? . gQ5299) (flinfinite? . gQ5298) (flfloor . gQ5297) (flfinite? . gQ5296) (flexpt . gQ5295) (flexp . gQ5294) (fleven? . gQ5293) (fldiv0-and-mod0 . gQ5292) (fldiv0 . gQ5291) (fldiv-and-mod . gQ5290) (fldiv . gQ528f) (fldenominator . gQ528e) (flcos . gQ528d) (flceiling . gQ528c) (flatan . gQ528b) (flasin . gQ528a) (flacos . gQ5289) (flabs . gQ5288) (fl>? . gQ5287) (fl>=? . gQ5286) (fl=? . gQ5285) (fl<? . gQ5284) (fl<=? . gQ5283) (fl/ . gQ5282) (fl- . gQ5281) (fl+ . gQ5280) (fl* . gQ527f) (fixnum->flonum . gQ527e) (&no-nans . gQ519c) (&no-infinities . gQ519b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . gQ5385) (string-ci-hash . gQ5384) (string-hash . gQ5383) (equal-hash . gQ5382) (hashtable-equivalence-function . gQ5381) (make-hashtable . gQ5380) (hashtable-hash-function . gQ537f) (make-eqv-hashtable . gQ537e) (make-eq-hashtable . gQ537d) (hashtable? . gQ537c) (hashtable-update! . gQ537b) (hashtable-size . gQ537a) (hashtable-set! . gQ5379) (hashtable-ref . gQ5378) (hashtable-mutable? . gQ5377) (hashtable-keys . gQ5376) (hashtable-entries . gQ5375) (hashtable-delete! . gQ5374) (hashtable-copy . gQ5373) (hashtable-contains? . gQ5372) (hashtable-clear! . gQ5371)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547b '(rnrs io ports) '(6) '() '() '() '((eof-object? . gQ5361) (eof-object . gQ5360) (current-error-port . gQ535f) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (utf-8-codec . gQ535a) (utf-16-codec . gQ5359) (transcoder-error-handling-mode . gQ5358) (transcoder-eol-style . gQ5357) (transcoder-codec . gQ5356) (transcoded-port . gQ5355) (textual-port? . gQ5354) (string->bytevector . gQ5353) (standard-output-port . gQ5352) (standard-input-port . gQ5351) (standard-error-port . gQ5350) (set-port-position! . gQ534f) (put-u8 . gQ534e) (put-string . gQ534d) (put-datum . gQ534c) (put-char . gQ534b) (put-bytevector . gQ534a) (port? . gQ5349) (port-transcoder . gQ5348) (port-position . gQ5347) (port-has-set-port-position!? . gQ5346) (port-has-port-position? . gQ5345) (port-eof? . gQ5344) (output-port-buffer-mode . gQ5343) (open-string-output-port . gQ5342) (open-string-input-port . gQ5341) (open-file-output-port . gQ5340) (open-file-input/output-port . gQ533f) (open-file-input-port . gQ533e) (open-bytevector-output-port . gQ533d) (open-bytevector-input-port . gQ533c) (native-transcoder . gQ533b) (native-eol-style . gQ533a) (make-transcoder . gQ5339) (latin-1-codec . gQ5338) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (make-i/o-encoding-error . gQ4e94) (make-i/o-decoding-error . gQ4e7d) (make-custom-textual-output-port . gQ5337) (make-custom-textual-input/output-port . gQ5336) (make-custom-textual-input-port . gQ5335) (make-custom-binary-output-port . gQ5334) (make-custom-binary-input/output-port . gQ5333) (make-custom-binary-input-port . gQ5332) (lookahead-u8 . gQ5330) (lookahead-char . gQ532f) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (i/o-encoding-error? . gQ4e98) (i/o-encoding-error-char . gQ4e9a) (i/o-decoding-error? . gQ4e7f) (get-u8 . gQ532e) (get-string-n! . gQ532d) (get-string-n . gQ532c) (get-string-all . gQ532b) (get-line . gQ532a) (get-datum . gQ5329) (get-char . gQ5328) (get-bytevector-some . gQ5327) (get-bytevector-n! . gQ5326) (get-bytevector-n . gQ5325) (get-bytevector-all . gQ5324) (flush-output-port . gQ5323) (close-port . gQ5322) (call-with-string-output-port . gQ5301) (call-with-port . gQ5300) (call-with-bytevector-output-port . gQ52ff) (bytevector->string . gQ52fe) (buffer-mode? . gQ52fd) (binary-port? . gQ52fc) (&i/o-encoding . gQ519a) (&i/o-decoding . gQ5199) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f) (error-handling-mode . gQ5174) (file-options . gQ5173) (buffer-mode . gQ5172) (eol-style . gQ5171)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547c '(rnrs enums) '(6) '() '() '() '((make-enumeration . gQ52f8) (enum-set=? . gQ52f7) (enum-set-universe . gQ52f6) (enum-set-union . gQ52f5) (enum-set-subset? . gQ52f4) (enum-set-projection . gQ52f3) (enum-set-member? . gQ52f2) (enum-set-intersection . gQ52f1) (enum-set-indexer . gQ52f0) (enum-set-difference . gQ52ef) (enum-set-constructor . gQ52ee) (enum-set-complement . gQ52ed) (enum-set->list . gQ52ec) (define-enumeration . gQ517f)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547d '(rnrs conditions) '(6) '() '() '() '((who-condition? . gQ4d0f) (warning? . gQ4c87) (violation? . gQ4cc6) (undefined-violation? . gQ4d86) (syntax-violation? . gQ4d6d) (syntax-violation-subform . gQ4d71) (syntax-violation-form . gQ4d6f) (syntax-violation . gQ3199) (simple-conditions . gQ52eb) (serious-condition? . gQ4c9c) (non-continuable-violation? . gQ4d26) (message-condition? . gQ4c70) (make-who-condition . gQ4d0b) (make-warning . gQ4c85) (make-violation . gQ4cc4) (make-undefined-violation . gQ4d84) (make-syntax-violation . gQ4d67) (make-serious-condition . gQ4c9a) (make-non-continuable-violation . gQ4d24) (make-message-condition . gQ4c6c) (make-lexical-violation . gQ4d4e) (make-irritants-condition . gQ4cf0) (make-implementation-restriction-violation . gQ4d39) (make-error . gQ4caf) (make-assertion-violation . gQ4cd9) (lexical-violation? . gQ4d50) (irritants-condition? . gQ4cf4) (implementation-restriction-violation? . gQ4d3b) (error? . gQ4cb1) (condition-who . gQ4d11) (condition-predicate . gQ52ea) (condition-message . gQ4c72) (condition-irritants . gQ4cf6) (condition-accessor . gQ52e9) (condition . gQ52e8) (assertion-violation? . gQ4cdb) (condition? . gQ52e7) (&undefined . gQ518e) (&syntax . gQ518d) (&lexical . gQ518c) (&implementation-restriction . gQ518b) (&non-continuable . gQ518a) (&who . gQ5189) (&irritants . gQ5188) (&assertion . gQ5187) (&violation . gQ5186) (&error . gQ5185) (&serious . gQ5184) (&warning . gQ5183) (&message . gQ5182) (&condition . gQ5181) (define-condition-type . gQ5180)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547e '(rnrs records inspection) '(6) '() '() '() '((record? . gQ5394) (record-type-uid . gQ5393) (record-type-sealed? . gQ5392) (record-type-parent . gQ5391) (record-type-opaque? . gQ5390) (record-type-name . gQ538f) (record-type-generative? . gQ538e) (record-type-field-names . gQ538d) (record-rtd . gQ538c) (record-field-mutable? . gQ538b)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ547f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . gQ539b) (record-predicate . gQ539a) (record-mutator . gQ5399) (record-constructor . gQ5398) (record-accessor . gQ5397) (make-record-type-descriptor . gQ5396) (make-record-constructor-descriptor . gQ5395)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5480 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . gQ517e) (parent-rtd . gQ517d) (nongenerative . gQ517c) (opaque . gQ517b) (sealed . gQ517a) (protocol . gQ5179) (parent . gQ5178) (immutable . gQ5177) (mutable . gQ5176) (fields . gQ5175) (record-constructor-descriptor . gQ5155) (record-type-descriptor . gQ5154)) '() values values '#f '#f '#t '#f) (gQ2ccd@gQ2b19@install-library 'gQ5481 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . gQ4ec8) (&no-nans-rtd . gQ4ec6) (&no-infinities-rcd . gQ4eb3) (&no-infinities-rtd . gQ4eb1) (&i/o-encoding-rcd . gQ4e9e) (&i/o-encoding-rtd . gQ4e9c) (&i/o-decoding-rcd . gQ4e83) (&i/o-decoding-rtd . gQ4e81) (&i/o-port-rcd . gQ4e6e) (&i/o-port-rtd . gQ4e6c) (&i/o-file-does-not-exist-rcd . gQ4e53) (&i/o-file-does-not-exist-rtd . gQ4e51) (&i/o-file-already-exists-rcd . gQ4e3e) (&i/o-file-already-exists-rtd . gQ4e3c) (&i/o-file-is-read-only-rcd . gQ4e29) (&i/o-file-is-read-only-rtd . gQ4e27) (&i/o-file-protection-rcd . gQ4e14) (&i/o-file-protection-rtd . gQ4e12) (&i/o-filename-rcd . gQ4dff) (&i/o-filename-rtd . gQ4dfd) (&i/o-invalid-position-rcd . gQ4de4) (&i/o-invalid-position-rtd . gQ4de2) (&i/o-write-rcd . gQ4dc9) (&i/o-write-rtd . gQ4dc7) (&i/o-read-rcd . gQ4db4) (&i/o-read-rtd . gQ4db2) (&i/o-rcd . gQ4d9f) (&i/o-rtd . gQ4d9d) (&undefined-rcd . gQ4d8a) (&undefined-rtd . gQ4d88) (&syntax-rcd . gQ4d75) (&syntax-rtd . gQ4d73) (&lexical-rcd . gQ4d54) (&lexical-rtd . gQ4d52) (&implementation-restriction-rcd . gQ4d3f) (&implementation-restriction-rtd . gQ4d3d) (&non-continuable-rcd . gQ4d2a) (&non-continuable-rtd . gQ4d28) (&who-rcd . gQ4d15) (&who-rtd . gQ4d13) (&irritants-rcd . gQ4cfa) (&irritants-rtd . gQ4cf8) (&assertion-rcd . gQ4cdf) (&assertion-rtd . gQ4cdd) (&violation-rcd . gQ4cca) (&violation-rtd . gQ4cc8) (&error-rcd . gQ4cb5) (&error-rtd . gQ4cb3) (&serious-rcd . gQ4ca0) (&serious-rtd . gQ4c9e) (&warning-rcd . gQ4c8b) (&warning-rtd . gQ4c89) (&message-rcd . gQ4c76) (&message-rtd . gQ4c74) (&condition-rcd . gQ4c17) (&condition-rtd . gQ4c15) (syntax-error . gQ3195) (syntax-dispatch . gQ30b9) (pretty-print . gQ5461) (eval-core . gQ5460) (set-symbol-value! . gQ545f) (symbol-value . gQ545e) (gensym . gQ545d) (void . gQ545c) (load . gQ4fd9) (interaction-environment . gQ31a7) (char-ready? . gQ545b) (regexp? . gQ545a) (read-line . gQ5459) (gensym-prefix-set! . gQ5458) (ungensym . gQ5457) (alist->eq-hash-table . gQ5456) (assoc-ref . gQ5455) (print . gQ5454) (format . gQ5453) (host-os . gQ5452) (library-path . gQ2af8) (standard-library-path . gQ5451) (file-newer? . gQ5450) (stat-mtime . gQ544f) (write-to-file . gQ544e) (file->list . gQ544d) (file->string . gQ544c) (digit->integer . gQ544b) (call-with-string-input-port . gQ544a) (call-with-string-io . gQ5449) (string-split . gQ5448) (bytevector-for-each . gQ5447) (string->regexp . gQ5446) (rxmatch . gQ5445) (regexp-replace-all . gQ5444) (hashtable-for-each . gQ5443) (mosh-cache-dir . gQ28e2) (call-process . gQ5442) (local-tz-offset . gQ5441) (microseconds . gQ5440) (directory-list . gQ543f) (set-current-directory! . gQ543e) (expand-path . gQ543d) (current-directory . gQ543c) (%spawn . gQ543b) (%waitpid . gQ543a) (simple-struct-name . gQ5439) (simple-struct-set! . gQ5438) (simple-struct-ref . gQ5437) (make-simple-struct . gQ5436) (simple-struct? . gQ5435) (pointer-ref-c-int64 . gQ5434) (pointer-ref-c-int32 . gQ5433) (pointer-ref-c-int16 . gQ5432) (pointer-ref-c-int8 . gQ5431) (pointer-ref-c-uint64 . gQ5430) (pointer-ref-c-uint32 . gQ542f) (pointer-ref-c-uint16 . gQ542e) (pointer-ref-c-uint8 . gQ542d) (pointer-set-c-uint64! . gQ542c) (pointer-set-c-uint32! . gQ542b) (pointer-set-c-uint16! . gQ542a) (pointer-set-c-uint8! . gQ5429) (pointer-set-c-int64! . gQ5428) (pointer-set-c-int32! . gQ5427) (pointer-set-c-int16! . gQ5426) (pointer-set-c-int8! . gQ5425) (pointer-set-c-pointer! . gQ5424) (pointer-set-c-double! . gQ5423) (pointer-set-c-float! . gQ5422) (pointer-set-c-long-long! . gQ5421) (pointer-set-c-long! . gQ5420) (pointer-set-c-int! . gQ541f) (pointer-set-c-short! . gQ541e) (pointer-set-c-char! . gQ541d) (pointer-ref-c-pointer . gQ541c) (pointer-ref-c-double . gQ541b) (pointer-ref-c-float . gQ541a) (pointer-ref-c-unsigned-long-long . gQ5419) (pointer-ref-c-signed-long-long . gQ5418) (pointer-ref-c-unsigned-long . gQ5417) (pointer-ref-c-signed-long . gQ5416) (pointer-ref-c-unsigned-int . gQ5415) (pointer-ref-c-signed-int . gQ5414) (pointer-ref-c-unsigned-short . gQ5413) (pointer-ref-c-signed-short . gQ5412) (pointer-ref-c-unsigned-char . gQ5411) (pointer-ref-c-signed-char . gQ5410) (pointer->integer . gQ540f) (integer->pointer . gQ540e) (pointer? . gQ540d) (shared-errno . gQ540c) (%ffi-free-c-callback-trampoline . gQ540b) (%ffi-make-c-callback-trampoline . gQ540a) (%ffi-free . gQ5409) (%ffi-malloc . gQ5408) (%ffi-supported? . gQ5407) (%ffi-pointer->string . gQ5406) (%ffi-call . gQ5405) (%ffi-lookup . gQ5404) (%ffi-open . gQ5403) (null-terminated-utf8->string . gQ5402) (null-terminated-bytevector->string . gQ5401) (%fork . gQ5400) (%pipe . gQ53ff) (p . gQ53fe) (open-output-string . gQ53fd) (get-output-string . gQ53fc) (file-stat-ctime . gQ53fb) (file-stat-atime . gQ53fa) (file-stat-mtime . gQ53f9) (file-size-in-bytes . gQ53f8) (file-writable? . gQ53f7) (file-executable? . gQ53f6) (file-readable? . gQ53f5) (file-regular? . gQ53f4) (file-symbolic-link? . gQ53f3) (file-directory? . gQ53f2) (create-symbolic-link . gQ53f1) (rename-file . gQ53f0) (delete-directory . gQ53ef) (create-directory . gQ53ee) (create-mosh-cache-dir . gQ53ed) (get-environment-variables . gQ53ec) (current-exception-handler . gQ53eb) (get-environment-variable . gQ53ea) (join-wraps . gQ53e9) (id->real-label . gQ53e8) (same-marks? . gQ53e7) (same-marks*? . gQ53e6) (get-timeofday . gQ53e5) (get-command-line . gQ53e4) (sys-display . gQ53e3) (whereis . gQ53e2) (register . gQ53e1) (vm-join! . gQ53e0) (vm-set-value! . gQ53df) (vm? . gQ53de) (main-vm? . gQ53dd) (vm-eval . gQ53dc) (vm-self . gQ53db) (vm-start! . gQ53da) (make-vm . gQ53d9) (mutex-try-lock! . gQ53d8) (mutex-unlock! . gQ53d7) (mutex-lock! . gQ53d6) (mutex? . gQ53d5) (make-mutex . gQ53d4) (condition-variable-notify-all! . gQ53d3) (condition-variable-notify! . gQ53d2) (condition-variable-wait! . gQ53d1) (make-condition-variable . gQ53d0) (mosh-executable-path . gQ53cf) (make-file-options . gQ53ce) (source-info . gQ53cd) (make-compiler-instruction . gQ53cc) (make-instruction . gQ53cb) (set-source-info! . gQ53ca) (bignum? . gQ53c9) (fast-equal? . gQ53c8) (fasl-read . gQ53c7) (fasl-write . gQ53c6) (time-usage . gQ53c5) (os-constant . gQ53c4) (disasm . gQ53c3) (make-parameter . gQ28e0) (socket-port . gQ53c2) (socket-shutdown . gQ53c1) (socket-close . gQ53c0) (socket-send . gQ53bf) (socket-recv! . gQ53be) (socket-recv . gQ53bd) (make-server-socket . gQ53bc) (make-client-socket . gQ53bb) (socket-accept . gQ53ba) (socket? . gQ53b9) (string-upcase . gQ53b8) (string-titlecase . gQ53b7) (string-normalize-nfkd . gQ53b6) (string-normalize-nfkc . gQ53b5) (string-normalize-nfd . gQ53b4) (string-normalize-nfc . gQ53b3) (string-foldcase . gQ53b2) (string-downcase . gQ53b1) (string-ci>? . gQ53b0) (string-ci>=? . gQ53af) (string-ci=? . gQ53ae) (string-ci<? . gQ53ad) (string-ci<=? . gQ53ac) (char-whitespace? . gQ53ab) (char-upper-case? . gQ53aa) (char-title-case? . gQ53a9) (char-numeric? . gQ53a8) (char-lower-case? . gQ53a7) (char-general-category . gQ53a6) (char-upcase . gQ53a5) (char-titlecase . gQ53a4) (char-foldcase . gQ53a3) (char-downcase . gQ53a2) (char-ci>? . gQ53a1) (char-ci>=? . gQ53a0) (char-ci=? . gQ539f) (char-ci<? . gQ539e) (char-ci<=? . gQ539d) (char-alphabetic? . gQ539c) (make-variable-transformer . gQ2ee4) (identifier? . gQ319b) (generate-temporaries . gQ3187) (free-identifier=? . gQ3189) (syntax->datum . gQ319f) (datum->syntax . gQ319d) (bound-identifier=? . gQ318b) (record-type-descriptor? . gQ539b) (record-predicate . gQ539a) (record-mutator . gQ5399) (record-constructor . gQ5398) (record-accessor . gQ5397) (make-record-type-descriptor . gQ5396) (make-record-constructor-descriptor . gQ5395) (record? . gQ5394) (record-type-uid . gQ5393) (record-type-sealed? . gQ5392) (record-type-parent . gQ5391) (record-type-opaque? . gQ5390) (record-type-name . gQ538f) (record-type-generative? . gQ538e) (record-type-field-names . gQ538d) (record-rtd . gQ538c) (record-field-mutable? . gQ538b) (delete-file . gQ538a) (file-exists? . gQ5389) (vector-sort! . gQ5388) (vector-sort . gQ5387) (list-sort . gQ5386) (symbol-hash . gQ5385) (string-ci-hash . gQ5384) (string-hash . gQ5383) (equal-hash . gQ5382) (hashtable-equivalence-function . gQ5381) (make-hashtable . gQ5380) (hashtable-hash-function . gQ537f) (make-eqv-hashtable . gQ537e) (make-eq-hashtable . gQ537d) (hashtable? . gQ537c) (hashtable-update! . gQ537b) (hashtable-size . gQ537a) (hashtable-set! . gQ5379) (hashtable-ref . gQ5378) (hashtable-mutable? . gQ5377) (hashtable-keys . gQ5376) (hashtable-entries . gQ5375) (hashtable-delete! . gQ5374) (hashtable-copy . gQ5373) (hashtable-contains? . gQ5372) (hashtable-clear! . gQ5371) (call-with-output-file . gQ5370) (call-with-input-file . gQ536f) (write-char . gQ536e) (write . gQ536d) (with-output-to-file . gQ536c) (with-input-from-file . gQ536b) (read-char . gQ536a) (read . gQ5369) (peek-char . gQ5368) (open-output-file . gQ5367) (open-input-file . gQ5366) (newline . gQ5365) (display . gQ5364) (close-output-port . gQ5363) (close-input-port . gQ5362) (eof-object? . gQ5361) (eof-object . gQ5360) (current-error-port . gQ535f) (current-output-port . gQ535e) (current-input-port . gQ535d) (output-port? . gQ535c) (input-port? . gQ535b) (utf-8-codec . gQ535a) (utf-16-codec . gQ5359) (transcoder-error-handling-mode . gQ5358) (transcoder-eol-style . gQ5357) (transcoder-codec . gQ5356) (transcoded-port . gQ5355) (textual-port? . gQ5354) (string->bytevector . gQ5353) (standard-output-port . gQ5352) (standard-input-port . gQ5351) (standard-error-port . gQ5350) (set-port-position! . gQ534f) (put-u8 . gQ534e) (put-string . gQ534d) (put-datum . gQ534c) (put-char . gQ534b) (put-bytevector . gQ534a) (port? . gQ5349) (port-transcoder . gQ5348) (port-position . gQ5347) (port-has-set-port-position!? . gQ5346) (port-has-port-position? . gQ5345) (port-eof? . gQ5344) (output-port-buffer-mode . gQ5343) (open-string-output-port . gQ5342) (open-string-input-port . gQ5341) (open-file-output-port . gQ5340) (open-file-input/output-port . gQ533f) (open-file-input-port . gQ533e) (open-bytevector-output-port . gQ533d) (open-bytevector-input-port . gQ533c) (native-transcoder . gQ533b) (native-eol-style . gQ533a) (make-transcoder . gQ5339) (latin-1-codec . gQ5338) (make-i/o-write-error . gQ4dc3) (make-i/o-read-error . gQ4dae) (make-i/o-port-error . gQ4e64) (make-i/o-invalid-position-error . gQ4dda) (make-i/o-filename-error . gQ4df5) (make-i/o-file-protection-error . gQ4e0e) (make-i/o-file-is-read-only-error . gQ4e23) (make-i/o-file-does-not-exist-error . gQ4e4d) (make-i/o-file-already-exists-error . gQ4e38) (make-i/o-error . gQ4d99) (make-i/o-encoding-error . gQ4e94) (make-i/o-decoding-error . gQ4e7d) (make-custom-textual-output-port . gQ5337) (make-custom-textual-input/output-port . gQ5336) (make-custom-textual-input-port . gQ5335) (make-custom-binary-output-port . gQ5334) (make-custom-binary-input/output-port . gQ5333) (make-custom-binary-input-port . gQ5332) (make-bytevector . gQ5331) (lookahead-u8 . gQ5330) (lookahead-char . gQ532f) (i/o-write-error? . gQ4dc5) (i/o-read-error? . gQ4db0) (i/o-port-error? . gQ4e68) (i/o-invalid-position-error? . gQ4dde) (i/o-filename-error? . gQ4df9) (i/o-file-protection-error? . gQ4e10) (i/o-file-is-read-only-error? . gQ4e25) (i/o-file-does-not-exist-error? . gQ4e4f) (i/o-file-already-exists-error? . gQ4e3a) (i/o-error? . gQ4d9b) (i/o-error-position . gQ4de0) (i/o-error-port . gQ4e6a) (i/o-error-filename . gQ4dfb) (i/o-encoding-error? . gQ4e98) (i/o-encoding-error-char . gQ4e9a) (i/o-decoding-error? . gQ4e7f) (get-u8 . gQ532e) (get-string-n! . gQ532d) (get-string-n . gQ532c) (get-string-all . gQ532b) (get-line . gQ532a) (get-datum . gQ5329) (get-char . gQ5328) (get-bytevector-some . gQ5327) (get-bytevector-n! . gQ5326) (get-bytevector-n . gQ5325) (get-bytevector-all . gQ5324) (flush-output-port . gQ5323) (close-port . gQ5322) (scheme-report-environment . gQ3175) (quotient . gQ5321) (null-environment . gQ3173) (remainder . gQ5320) (modulo . gQ531f) (inexact->exact . gQ531e) (force . gQ531d) (exact->inexact . gQ531c) (make-promise . gQ531b) (exit . gQ531a) (command-line . gQ4fd3) (string-fill! . gQ5319) (string-set! . gQ5318) (set-cdr! . gQ5317) (set-car! . gQ5316) (remove . gQ5315) (remv . gQ5314) (remp . gQ5313) (remq . gQ5312) (partition . gQ5311) (memv . gQ5310) (memq . gQ530f) (memp . gQ530e) (member . gQ530d) (exists . gQ530c) (for-all . gQ530b) (fold-right . gQ530a) (fold-left . gQ5309) (find . gQ5308) (filter . gQ5307) (cons* . gQ5306) (assv . gQ5305) (assq . gQ5304) (assp . gQ5303) (assoc . gQ5302) (call-with-string-output-port . gQ5301) (call-with-port . gQ5300) (call-with-bytevector-output-port . gQ52ff) (bytevector->string . gQ52fe) (buffer-mode? . gQ52fd) (binary-port? . gQ52fc) (with-exception-handler . gQ52fb) (raise-continuable . gQ52fa) (raise . gQ52f9) (eval . gQ3179) (environment . gQ3171) (make-enumeration . gQ52f8) (enum-set=? . gQ52f7) (enum-set-universe . gQ52f6) (enum-set-union . gQ52f5) (enum-set-subset? . gQ52f4) (enum-set-projection . gQ52f3) (enum-set-member? . gQ52f2) (enum-set-intersection . gQ52f1) (enum-set-indexer . gQ52f0) (enum-set-difference . gQ52ef) (enum-set-constructor . gQ52ee) (enum-set-complement . gQ52ed) (enum-set->list . gQ52ec) (who-condition? . gQ4d0f) (warning? . gQ4c87) (violation? . gQ4cc6) (undefined-violation? . gQ4d86) (syntax-violation? . gQ4d6d) (syntax-violation-subform . gQ4d71) (syntax-violation-form . gQ4d6f) (syntax-violation . gQ3199) (simple-conditions . gQ52eb) (serious-condition? . gQ4c9c) (non-continuable-violation? . gQ4d26) (message-condition? . gQ4c70) (make-who-condition . gQ4d0b) (make-warning . gQ4c85) (make-violation . gQ4cc4) (make-undefined-violation . gQ4d84) (make-syntax-violation . gQ4d67) (make-serious-condition . gQ4c9a) (make-non-continuable-violation . gQ4d24) (make-message-condition . gQ4c6c) (make-lexical-violation . gQ4d4e) (make-irritants-condition . gQ4cf0) (make-implementation-restriction-violation . gQ4d39) (make-error . gQ4caf) (make-assertion-violation . gQ4cd9) (lexical-violation? . gQ4d50) (irritants-condition? . gQ4cf4) (implementation-restriction-violation? . gQ4d3b) (error? . gQ4cb1) (condition-who . gQ4d11) (condition-predicate . gQ52ea) (condition-message . gQ4c72) (condition-irritants . gQ4cf6) (condition-accessor . gQ52e9) (condition . gQ52e8) (assertion-violation? . gQ4cdb) (condition? . gQ52e7) (utf32->string . gQ52e6) (utf16->string . gQ52e5) (utf8->string . gQ52e4) (uint-list->bytevector . gQ52e3) (u8-list->bytevector . gQ52e2) (string->utf8 . gQ52e1) (string->utf32 . gQ52e0) (string->utf16 . gQ52df) (sint-list->bytevector . gQ52de) (native-endianness . gQ52dd) (bytevector? . gQ52dc) (bytevector=? . gQ52db) (bytevector-uint-set! . gQ52da) (bytevector-uint-ref . gQ52d9) (bytevector-u8-set! . gQ52d8) (bytevector-u8-ref . gQ52d7) (bytevector-u64-set! . gQ52d6) (bytevector-u64-ref . gQ52d5) (bytevector-u64-native-set! . gQ52d4) (bytevector-u64-native-ref . gQ52d3) (bytevector-u32-set! . gQ52d2) (bytevector-u32-ref . gQ52d1) (bytevector-u32-native-set! . gQ52d0) (bytevector-u32-native-ref . gQ52cf) (bytevector-u16-set! . gQ52ce) (bytevector-u16-ref . gQ52cd) (bytevector-u16-native-set! . gQ52cc) (bytevector-u16-native-ref . gQ52cb) (bytevector-sint-set! . gQ52ca) (bytevector-sint-ref . gQ52c9) (bytevector-s8-set! . gQ52c8) (bytevector-s8-ref . gQ52c7) (bytevector-s64-set! . gQ52c6) (bytevector-s64-ref . gQ52c5) (bytevector-s64-native-set! . gQ52c4) (bytevector-s64-native-ref . gQ52c3) (bytevector-s32-set! . gQ52c2) (bytevector-s32-ref . gQ52c1) (bytevector-s32-native-set! . gQ52c0) (bytevector-s32-native-ref . gQ52bf) (bytevector-s16-set! . gQ52be) (bytevector-s16-ref . gQ52bd) (bytevector-s16-native-set! . gQ52bc) (bytevector-s16-native-ref . gQ52bb) (bytevector-length . gQ52ba) (bytevector-ieee-single-ref . gQ52b9) (bytevector-ieee-single-set! . gQ52b8) (bytevector-ieee-single-native-set! . gQ52b7) (bytevector-ieee-single-native-ref . gQ52b6) (bytevector-ieee-double-set! . gQ52b5) (bytevector-ieee-double-ref . gQ52b4) (bytevector-ieee-double-native-set! . gQ52b3) (bytevector-ieee-double-native-ref . gQ52b2) (bytevector-fill! . gQ52b1) (bytevector-copy! . gQ52b0) (bytevector-copy . gQ52af) (bytevector->uint-list . gQ52ae) (bytevector->u8-list . gQ52ad) (bytevector->sint-list . gQ52ac) (no-nans-violation? . gQ4ec4) (no-infinities-violation? . gQ4eaf) (make-no-nans-violation . gQ4ec2) (make-no-infinities-violation . gQ4ead) (real->flonum . gQ52ab) (flzero? . gQ52aa) (fltruncate . gQ52a9) (fltan . gQ52a8) (flsqrt . gQ52a7) (flsin . gQ52a6) (flround . gQ52a5) (flpositive? . gQ52a4) (flonum? . gQ52a3) (flodd? . gQ52a2) (flnumerator . gQ52a1) (flnegative? . gQ52a0) (flnan? . gQ529f) (flmod0 . gQ529e) (flmod . gQ529d) (flmin . gQ529c) (flmax . gQ529b) (fllog . gQ529a) (flinteger? . gQ5299) (flinfinite? . gQ5298) (flfloor . gQ5297) (flfinite? . gQ5296) (flexpt . gQ5295) (flexp . gQ5294) (fleven? . gQ5293) (fldiv0-and-mod0 . gQ5292) (fldiv0 . gQ5291) (fldiv-and-mod . gQ5290) (fldiv . gQ528f) (fldenominator . gQ528e) (flcos . gQ528d) (flceiling . gQ528c) (flatan . gQ528b) (flasin . gQ528a) (flacos . gQ5289) (flabs . gQ5288) (fl>? . gQ5287) (fl>=? . gQ5286) (fl=? . gQ5285) (fl<? . gQ5284) (fl<=? . gQ5283) (fl/ . gQ5282) (fl- . gQ5281) (fl+ . gQ5280) (fl* . gQ527f) (fixnum->flonum . gQ527e) (fxzero? . gQ527d) (fxxor . gQ527c) (fxrotate-bit-field . gQ527b) (fxreverse-bit-field . gQ527a) (fxpositive? . gQ5279) (fxodd? . gQ5278) (fxnot . gQ5277) (fxnegative? . gQ5276) (fxmod0 . gQ5275) (fxmod . gQ5274) (fxmin . gQ5273) (fxmax . gQ5272) (fxlength . gQ5271) (fxior . gQ5270) (fxif . gQ526f) (fxfirst-bit-set . gQ526e) (fxeven? . gQ526d) (fxdiv0-and-mod0 . gQ526c) (fxdiv0 . gQ526b) (fxdiv-and-mod . gQ526a) (fxdiv . gQ5269) (fxcopy-bit-field . gQ5268) (fxcopy-bit . gQ5267) (fxbit-set? . gQ5266) (fxbit-field . gQ5265) (fxbit-count . gQ5264) (fxarithmetic-shift-right . gQ5263) (fxarithmetic-shift-left . gQ5262) (fxarithmetic-shift . gQ5261) (fxand . gQ5260) (fx>? . gQ525f) (fx>=? . gQ525e) (fx=? . gQ525d) (fx<? . gQ525c) (fx<=? . gQ525b) (fx-/carry . gQ525a) (fx- . gQ5259) (fx+/carry . gQ5258) (fx+ . gQ5257) (fx*/carry . gQ5256) (fx* . gQ5255) (greatest-fixnum . gQ5254) (least-fixnum . gQ5253) (fixnum-width . gQ5252) (fixnum? . gQ5251) (bitwise-rotate-bit-field . gQ5250) (bitwise-reverse-bit-field . gQ524f) (bitwise-length . gQ524e) (bitwise-if . gQ524d) (bitwise-first-bit-set . gQ524c) (bitwise-copy-bit-field . gQ524b) (bitwise-copy-bit . gQ524a) (bitwise-bit-set? . gQ5249) (bitwise-bit-field . gQ5248) (bitwise-bit-count . gQ5247) (bitwise-xor . gQ5246) (bitwise-ior . gQ5245) (bitwise-and . gQ5244) (bitwise-not . gQ5243) (bitwise-arithmetic-shift-right . gQ5242) (bitwise-arithmetic-shift-left . gQ5241) (bitwise-arithmetic-shift . gQ5240) (zero? . gQ523f) (vector? . gQ523e) (vector-set! . gQ523d) (vector-ref . gQ523c) (vector-map . gQ523b) (vector-length . gQ523a) (vector-for-each . gQ5239) (vector-fill! . gQ5238) (vector->list . gQ5237) (vector . gQ5236) (values . gQ5235) (truncate . gQ5234) (tan . gQ5233) (symbol? . gQ5232) (symbol=? . gQ5231) (symbol->string . gQ5230) (substring . gQ522f) (string? . gQ522e) (string>? . gQ522d) (string>=? . gQ522c) (string=? . gQ522b) (string<? . gQ522a) (string<=? . gQ5229) (string-ref . gQ5228) (string-length . gQ5227) (string-for-each . gQ5226) (string-copy . gQ5225) (string-append . gQ5224) (string->symbol . gQ5223) (string->number . gQ5222) (string->list . gQ5221) (string . gQ5220) (sqrt . gQ521f) (sin . gQ521e) (round . gQ521d) (reverse . gQ521c) (real? . gQ521b) (real-valued? . gQ521a) (real-part . gQ5219) (rationalize . gQ5218) (rational? . gQ5217) (rational-valued? . gQ5216) (procedure? . gQ5215) (positive? . gQ5214) (pair? . gQ5213) (odd? . gQ5212) (numerator . gQ5211) (number? . gQ5210) (number->string . gQ520f) (null? . gQ520e) (not . gQ520d) (negative? . gQ520c) (nan? . gQ520b) (min . gQ520a) (max . gQ5209) (map . gQ5208) (make-vector . gQ5207) (make-string . gQ5206) (make-rectangular . gQ5205) (make-polar . gQ5204) (magnitude . gQ5203) (log . gQ5202) (list? . gQ5201) (list-tail . gQ5200) (list-ref . gQ51ff) (list->vector . gQ51fe) (list->string . gQ51fd) (list . gQ51fc) (length . gQ51fb) (lcm . gQ51fa) (integer? . gQ51f9) (integer-valued? . gQ51f8) (integer->char . gQ51f7) (infinite? . gQ51f6) (inexact? . gQ51f5) (inexact . gQ51f4) (imag-part . gQ51f3) (gcd . gQ51f2) (for-each . gQ51f1) (floor . gQ51f0) (finite? . gQ51ef) (expt . gQ51ee) (exp . gQ51ed) (exact? . gQ51ec) (exact-integer-sqrt . gQ51eb) (exact . gQ51ea) (even? . gQ51e9) (error . gQ51e8) (eqv? . gQ51e7) (equal? . gQ51e6) (eq? . gQ51e5) (dynamic-wind . gQ51e4) (div0-and-mod0 . gQ51e3) (mod0 . gQ51e2) (div0 . gQ51e1) (div-and-mod . gQ51e0) (mod . gQ51df) (div . gQ51de) (denominator . gQ51dd) (cos . gQ51dc) (cons . gQ51db) (complex? . gQ51da) (char? . gQ51d9) (char>? . gQ51d8) (char>=? . gQ51d7) (char=? . gQ51d6) (char<? . gQ51d5) (char<=? . gQ51d4) (char->integer . gQ51d3) (ceiling . gQ51d2) (call-with-values . gQ51d1) (call/cc . gQ51d0) (call-with-current-continuation . gQ51cf) (cddddr . gQ51ce) (cdddar . gQ51cd) (cddadr . gQ51cc) (cddaar . gQ51cb) (cdaddr . gQ51ca) (cdadar . gQ51c9) (cdaadr . gQ51c8) (cdaaar . gQ51c7) (cadddr . gQ51c6) (caddar . gQ51c5) (cadadr . gQ51c4) (cadaar . gQ51c3) (caaddr . gQ51c2) (caadar . gQ51c1) (caaadr . gQ51c0) (caaaar . gQ51bf) (cdddr . gQ51be) (cddar . gQ51bd) (cdadr . gQ51bc) (cdaar . gQ51bb) (caddr . gQ51ba) (cadar . gQ51b9) (caadr . gQ51b8) (caaar . gQ51b7) (cddr . gQ51b6) (cdar . gQ51b5) (cadr . gQ51b4) (caar . gQ51b3) (cdr . gQ51b2) (car . gQ51b1) (boolean? . gQ51b0) (boolean=? . gQ51af) (atan . gQ51ae) (assertion-violation . gQ51ad) (assertion-error . gQ3193) (asin . gQ51ac) (apply . gQ51ab) (append . gQ51aa) (angle . gQ51a9) (acos . gQ51a8) (abs . gQ51a7) (/ . gQ51a6) (* . gQ51a5) (- . gQ51a4) (+ . gQ51a3) (>= . gQ51a2) (> . gQ51a1) (= . gQ51a0) (<= . gQ519f) (< . gQ519e) (library . gQ519d) (&no-nans . gQ519c) (&no-infinities . gQ519b) (&i/o-encoding . gQ519a) (&i/o-decoding . gQ5199) (&i/o-port . gQ5198) (&i/o-file-does-not-exist . gQ5197) (&i/o-file-already-exists . gQ5196) (&i/o-file-is-read-only . gQ5195) (&i/o-file-protection . gQ5194) (&i/o-filename . gQ5193) (&i/o-invalid-position . gQ5192) (&i/o-write . gQ5191) (&i/o-read . gQ5190) (&i/o . gQ518f) (&undefined . gQ518e) (&syntax . gQ518d) (&lexical . gQ518c) (&implementation-restriction . gQ518b) (&non-continuable . gQ518a) (&who . gQ5189) (&irritants . gQ5188) (&assertion . gQ5187) (&violation . gQ5186) (&error . gQ5185) (&serious . gQ5184) (&warning . gQ5183) (&message . gQ5182) (&condition . gQ5181) (define-condition-type . gQ5180) (define-enumeration . gQ517f) (define-record-type . gQ517e) (parent-rtd . gQ517d) (nongenerative . gQ517c) (opaque . gQ517b) (sealed . gQ517a) (protocol . gQ5179) (parent . gQ5178) (immutable . gQ5177) (mutable . gQ5176) (fields . gQ5175) (error-handling-mode . gQ5174) (file-options . gQ5173) (buffer-mode . gQ5172) (eol-style . gQ5171) (guard . gQ5170) (trace-define . gQ516f) (trace-lambda . gQ516e) (unsyntax-splicing . gQ516d) (unsyntax . gQ516c) (unquote-splicing . gQ516b) (unquote . gQ516a) (_ . gQ5169) (else . gQ5168) (=> . gQ5167) (... . gQ5166) (assert . gQ5165) (endianness . gQ5164) (delay . gQ5163) (time . gQ5162) (do . gQ5161) (cond . gQ5160) (let* . gQ515f) (let*-values . gQ515e) (let-values . gQ515d) (identifier-syntax . gQ515c) (with-syntax . gQ515b) (quasisyntax . gQ515a) (quasiquote . gQ5159) (syntax-rules . gQ5158) (include . gQ5157) (define-struct . gQ5156) (record-constructor-descriptor . gQ5155) (record-type-descriptor . gQ5154) (case . gQ5153) (parameterize . gQ5152) (unless . gQ5151) (when . gQ5150) (or . gQ514f) (and . gQ514e) (if . gQ514d) (let . gQ514c) (letrec* . gQ514b) (letrec . gQ514a) (type-descriptor . gQ5149) (case-lambda . gQ5148) (lambda . gQ5147) (syntax . gQ5146) (syntax-case . gQ5145) (quote . gQ5144) (foreign-call . gQ5143) (letrec-syntax . gQ5142) (let-syntax . gQ5141) (set! . gQ5140) (import . gQ513f) (begin . gQ513e) (module . gQ513d) (define-syntax . gQ513c) (define . gQ513b)) '((gQ4ec8 core-prim . &no-nans-rcd) (gQ4ec6 core-prim . &no-nans-rtd) (gQ4eb3 core-prim . &no-infinities-rcd) (gQ4eb1 core-prim . &no-infinities-rtd) (gQ4e9e core-prim . &i/o-encoding-rcd) (gQ4e9c core-prim . &i/o-encoding-rtd) (gQ4e83 core-prim . &i/o-decoding-rcd) (gQ4e81 core-prim . &i/o-decoding-rtd) (gQ4e6e core-prim . &i/o-port-rcd) (gQ4e6c core-prim . &i/o-port-rtd) (gQ4e53 core-prim . &i/o-file-does-not-exist-rcd) (gQ4e51 core-prim . &i/o-file-does-not-exist-rtd) (gQ4e3e core-prim . &i/o-file-already-exists-rcd) (gQ4e3c core-prim . &i/o-file-already-exists-rtd) (gQ4e29 core-prim . &i/o-file-is-read-only-rcd) (gQ4e27 core-prim . &i/o-file-is-read-only-rtd) (gQ4e14 core-prim . &i/o-file-protection-rcd) (gQ4e12 core-prim . &i/o-file-protection-rtd) (gQ4dff core-prim . &i/o-filename-rcd) (gQ4dfd core-prim . &i/o-filename-rtd) (gQ4de4 core-prim . &i/o-invalid-position-rcd) (gQ4de2 core-prim . &i/o-invalid-position-rtd) (gQ4dc9 core-prim . &i/o-write-rcd) (gQ4dc7 core-prim . &i/o-write-rtd) (gQ4db4 core-prim . &i/o-read-rcd) (gQ4db2 core-prim . &i/o-read-rtd) (gQ4d9f core-prim . &i/o-rcd) (gQ4d9d core-prim . &i/o-rtd) (gQ4d8a core-prim . &undefined-rcd) (gQ4d88 core-prim . &undefined-rtd) (gQ4d75 core-prim . &syntax-rcd) (gQ4d73 core-prim . &syntax-rtd) (gQ4d54 core-prim . &lexical-rcd) (gQ4d52 core-prim . &lexical-rtd) (gQ4d3f core-prim . &implementation-restriction-rcd) (gQ4d3d core-prim . &implementation-restriction-rtd) (gQ4d2a core-prim . &non-continuable-rcd) (gQ4d28 core-prim . &non-continuable-rtd) (gQ4d15 core-prim . &who-rcd) (gQ4d13 core-prim . &who-rtd) (gQ4cfa core-prim . &irritants-rcd) (gQ4cf8 core-prim . &irritants-rtd) (gQ4cdf core-prim . &assertion-rcd) (gQ4cdd core-prim . &assertion-rtd) (gQ4cca core-prim . &violation-rcd) (gQ4cc8 core-prim . &violation-rtd) (gQ4cb5 core-prim . &error-rcd) (gQ4cb3 core-prim . &error-rtd) (gQ4ca0 core-prim . &serious-rcd) (gQ4c9e core-prim . &serious-rtd) (gQ4c8b core-prim . &warning-rcd) (gQ4c89 core-prim . &warning-rtd) (gQ4c76 core-prim . &message-rcd) (gQ4c74 core-prim . &message-rtd) (gQ4c17 core-prim . &condition-rcd) (gQ4c15 core-prim . &condition-rtd) (gQ3195 core-prim . syntax-error) (gQ30b9 core-prim . syntax-dispatch) (gQ5461 core-prim . pretty-print) (gQ5460 core-prim . eval-core) (gQ545f core-prim . set-symbol-value!) (gQ545e core-prim . symbol-value) (gQ545d core-prim . gensym) (gQ545c core-prim . void) (gQ4fd9 core-prim . load) (gQ31a7 core-prim . interaction-environment) (gQ545b core-prim . char-ready?) (gQ545a core-prim . regexp?) (gQ5459 core-prim . read-line) (gQ5458 core-prim . gensym-prefix-set!) (gQ5457 core-prim . ungensym) (gQ5456 core-prim . alist->eq-hash-table) (gQ5455 core-prim . assoc-ref) (gQ5454 core-prim . print) (gQ5453 core-prim . format) (gQ5452 core-prim . host-os) (gQ2af8 core-prim . library-path) (gQ5451 core-prim . standard-library-path) (gQ5450 core-prim . file-newer?) (gQ544f core-prim . stat-mtime) (gQ544e core-prim . write-to-file) (gQ544d core-prim . file->list) (gQ544c core-prim . file->string) (gQ544b core-prim . digit->integer) (gQ544a core-prim . call-with-string-input-port) (gQ5449 core-prim . call-with-string-io) (gQ5448 core-prim . string-split) (gQ5447 core-prim . bytevector-for-each) (gQ5446 core-prim . string->regexp) (gQ5445 core-prim . rxmatch) (gQ5444 core-prim . regexp-replace-all) (gQ5443 core-prim . hashtable-for-each) (gQ28e2 core-prim . mosh-cache-dir) (gQ5442 core-prim . call-process) (gQ5441 core-prim . local-tz-offset) (gQ5440 core-prim . microseconds) (gQ543f core-prim . directory-list) (gQ543e core-prim . set-current-directory!) (gQ543d core-prim . expand-path) (gQ543c core-prim . current-directory) (gQ543b core-prim . %spawn) (gQ543a core-prim . %waitpid) (gQ5439 core-prim . simple-struct-name) (gQ5438 core-prim . simple-struct-set!) (gQ5437 core-prim . simple-struct-ref) (gQ5436 core-prim . make-simple-struct) (gQ5435 core-prim . simple-struct?) (gQ5434 core-prim . pointer-ref-c-int64) (gQ5433 core-prim . pointer-ref-c-int32) (gQ5432 core-prim . pointer-ref-c-int16) (gQ5431 core-prim . pointer-ref-c-int8) (gQ5430 core-prim . pointer-ref-c-uint64) (gQ542f core-prim . pointer-ref-c-uint32) (gQ542e core-prim . pointer-ref-c-uint16) (gQ542d core-prim . pointer-ref-c-uint8) (gQ542c core-prim . pointer-set-c-uint64!) (gQ542b core-prim . pointer-set-c-uint32!) (gQ542a core-prim . pointer-set-c-uint16!) (gQ5429 core-prim . pointer-set-c-uint8!) (gQ5428 core-prim . pointer-set-c-int64!) (gQ5427 core-prim . pointer-set-c-int32!) (gQ5426 core-prim . pointer-set-c-int16!) (gQ5425 core-prim . pointer-set-c-int8!) (gQ5424 core-prim . pointer-set-c-pointer!) (gQ5423 core-prim . pointer-set-c-double!) (gQ5422 core-prim . pointer-set-c-float!) (gQ5421 core-prim . pointer-set-c-long-long!) (gQ5420 core-prim . pointer-set-c-long!) (gQ541f core-prim . pointer-set-c-int!) (gQ541e core-prim . pointer-set-c-short!) (gQ541d core-prim . pointer-set-c-char!) (gQ541c core-prim . pointer-ref-c-pointer) (gQ541b core-prim . pointer-ref-c-double) (gQ541a core-prim . pointer-ref-c-float) (gQ5419 core-prim . pointer-ref-c-unsigned-long-long) (gQ5418 core-prim . pointer-ref-c-signed-long-long) (gQ5417 core-prim . pointer-ref-c-unsigned-long) (gQ5416 core-prim . pointer-ref-c-signed-long) (gQ5415 core-prim . pointer-ref-c-unsigned-int) (gQ5414 core-prim . pointer-ref-c-signed-int) (gQ5413 core-prim . pointer-ref-c-unsigned-short) (gQ5412 core-prim . pointer-ref-c-signed-short) (gQ5411 core-prim . pointer-ref-c-unsigned-char) (gQ5410 core-prim . pointer-ref-c-signed-char) (gQ540f core-prim . pointer->integer) (gQ540e core-prim . integer->pointer) (gQ540d core-prim . pointer?) (gQ540c core-prim . shared-errno) (gQ540b core-prim . %ffi-free-c-callback-trampoline) (gQ540a core-prim . %ffi-make-c-callback-trampoline) (gQ5409 core-prim . %ffi-free) (gQ5408 core-prim . %ffi-malloc) (gQ5407 core-prim . %ffi-supported?) (gQ5406 core-prim . %ffi-pointer->string) (gQ5405 core-prim . %ffi-call) (gQ5404 core-prim . %ffi-lookup) (gQ5403 core-prim . %ffi-open) (gQ5402 core-prim . null-terminated-utf8->string) (gQ5401 core-prim . null-terminated-bytevector->string) (gQ5400 core-prim . %fork) (gQ53ff core-prim . %pipe) (gQ53fe core-prim . p) (gQ53fd core-prim . open-output-string) (gQ53fc core-prim . get-output-string) (gQ53fb core-prim . file-stat-ctime) (gQ53fa core-prim . file-stat-atime) (gQ53f9 core-prim . file-stat-mtime) (gQ53f8 core-prim . file-size-in-bytes) (gQ53f7 core-prim . file-writable?) (gQ53f6 core-prim . file-executable?) (gQ53f5 core-prim . file-readable?) (gQ53f4 core-prim . file-regular?) (gQ53f3 core-prim . file-symbolic-link?) (gQ53f2 core-prim . file-directory?) (gQ53f1 core-prim . create-symbolic-link) (gQ53f0 core-prim . rename-file) (gQ53ef core-prim . delete-directory) (gQ53ee core-prim . create-directory) (gQ53ed core-prim . create-mosh-cache-dir) (gQ53ec core-prim . get-environment-variables) (gQ53eb core-prim . current-exception-handler) (gQ53ea core-prim . get-environment-variable) (gQ53e9 core-prim . join-wraps) (gQ53e8 core-prim . id->real-label) (gQ53e7 core-prim . same-marks?) (gQ53e6 core-prim . same-marks*?) (gQ53e5 core-prim . get-timeofday) (gQ53e4 core-prim . get-command-line) (gQ53e3 core-prim . sys-display) (gQ53e2 core-prim . whereis) (gQ53e1 core-prim . register) (gQ53e0 core-prim . vm-join!) (gQ53df core-prim . vm-set-value!) (gQ53de core-prim . vm?) (gQ53dd core-prim . main-vm?) (gQ53dc core-prim . vm-eval) (gQ53db core-prim . vm-self) (gQ53da core-prim . vm-start!) (gQ53d9 core-prim . make-vm) (gQ53d8 core-prim . mutex-try-lock!) (gQ53d7 core-prim . mutex-unlock!) (gQ53d6 core-prim . mutex-lock!) (gQ53d5 core-prim . mutex?) (gQ53d4 core-prim . make-mutex) (gQ53d3 core-prim . condition-variable-notify-all!) (gQ53d2 core-prim . condition-variable-notify!) (gQ53d1 core-prim . condition-variable-wait!) (gQ53d0 core-prim . make-condition-variable) (gQ53cf core-prim . mosh-executable-path) (gQ53ce core-prim . make-file-options) (gQ53cd core-prim . source-info) (gQ53cc core-prim . make-compiler-instruction) (gQ53cb core-prim . make-instruction) (gQ53ca core-prim . set-source-info!) (gQ53c9 core-prim . bignum?) (gQ53c8 core-prim . fast-equal?) (gQ53c7 core-prim . fasl-read) (gQ53c6 core-prim . fasl-write) (gQ53c5 core-prim . time-usage) (gQ53c4 core-prim . os-constant) (gQ53c3 core-prim . disasm) (gQ28e0 core-prim . make-parameter) (gQ53c2 core-prim . socket-port) (gQ53c1 core-prim . socket-shutdown) (gQ53c0 core-prim . socket-close) (gQ53bf core-prim . socket-send) (gQ53be core-prim . socket-recv!) (gQ53bd core-prim . socket-recv) (gQ53bc core-prim . make-server-socket) (gQ53bb core-prim . make-client-socket) (gQ53ba core-prim . socket-accept) (gQ53b9 core-prim . socket?) (gQ53b8 core-prim . string-upcase) (gQ53b7 core-prim . string-titlecase) (gQ53b6 core-prim . string-normalize-nfkd) (gQ53b5 core-prim . string-normalize-nfkc) (gQ53b4 core-prim . string-normalize-nfd) (gQ53b3 core-prim . string-normalize-nfc) (gQ53b2 core-prim . string-foldcase) (gQ53b1 core-prim . string-downcase) (gQ53b0 core-prim . string-ci>?) (gQ53af core-prim . string-ci>=?) (gQ53ae core-prim . string-ci=?) (gQ53ad core-prim . string-ci<?) (gQ53ac core-prim . string-ci<=?) (gQ53ab core-prim . char-whitespace?) (gQ53aa core-prim . char-upper-case?) (gQ53a9 core-prim . char-title-case?) (gQ53a8 core-prim . char-numeric?) (gQ53a7 core-prim . char-lower-case?) (gQ53a6 core-prim . char-general-category) (gQ53a5 core-prim . char-upcase) (gQ53a4 core-prim . char-titlecase) (gQ53a3 core-prim . char-foldcase) (gQ53a2 core-prim . char-downcase) (gQ53a1 core-prim . char-ci>?) (gQ53a0 core-prim . char-ci>=?) (gQ539f core-prim . char-ci=?) (gQ539e core-prim . char-ci<?) (gQ539d core-prim . char-ci<=?) (gQ539c core-prim . char-alphabetic?) (gQ2ee4 core-prim . make-variable-transformer) (gQ319b core-prim . identifier?) (gQ3187 core-prim . generate-temporaries) (gQ3189 core-prim . free-identifier=?) (gQ319f core-prim . syntax->datum) (gQ319d core-prim . datum->syntax) (gQ318b core-prim . bound-identifier=?) (gQ539b core-prim . record-type-descriptor?) (gQ539a core-prim . record-predicate) (gQ5399 core-prim . record-mutator) (gQ5398 core-prim . record-constructor) (gQ5397 core-prim . record-accessor) (gQ5396 core-prim . make-record-type-descriptor) (gQ5395 core-prim . make-record-constructor-descriptor) (gQ5394 core-prim . record?) (gQ5393 core-prim . record-type-uid) (gQ5392 core-prim . record-type-sealed?) (gQ5391 core-prim . record-type-parent) (gQ5390 core-prim . record-type-opaque?) (gQ538f core-prim . record-type-name) (gQ538e core-prim . record-type-generative?) (gQ538d core-prim . record-type-field-names) (gQ538c core-prim . record-rtd) (gQ538b core-prim . record-field-mutable?) (gQ538a core-prim . delete-file) (gQ5389 core-prim . file-exists?) (gQ5388 core-prim . vector-sort!) (gQ5387 core-prim . vector-sort) (gQ5386 core-prim . list-sort) (gQ5385 core-prim . symbol-hash) (gQ5384 core-prim . string-ci-hash) (gQ5383 core-prim . string-hash) (gQ5382 core-prim . equal-hash) (gQ5381 core-prim . hashtable-equivalence-function) (gQ5380 core-prim . make-hashtable) (gQ537f core-prim . hashtable-hash-function) (gQ537e core-prim . make-eqv-hashtable) (gQ537d core-prim . make-eq-hashtable) (gQ537c core-prim . hashtable?) (gQ537b core-prim . hashtable-update!) (gQ537a core-prim . hashtable-size) (gQ5379 core-prim . hashtable-set!) (gQ5378 core-prim . hashtable-ref) (gQ5377 core-prim . hashtable-mutable?) (gQ5376 core-prim . hashtable-keys) (gQ5375 core-prim . hashtable-entries) (gQ5374 core-prim . hashtable-delete!) (gQ5373 core-prim . hashtable-copy) (gQ5372 core-prim . hashtable-contains?) (gQ5371 core-prim . hashtable-clear!) (gQ5370 core-prim . call-with-output-file) (gQ536f core-prim . call-with-input-file) (gQ536e core-prim . write-char) (gQ536d core-prim . write) (gQ536c core-prim . with-output-to-file) (gQ536b core-prim . with-input-from-file) (gQ536a core-prim . read-char) (gQ5369 core-prim . read) (gQ5368 core-prim . peek-char) (gQ5367 core-prim . open-output-file) (gQ5366 core-prim . open-input-file) (gQ5365 core-prim . newline) (gQ5364 core-prim . display) (gQ5363 core-prim . close-output-port) (gQ5362 core-prim . close-input-port) (gQ5361 core-prim . eof-object?) (gQ5360 core-prim . eof-object) (gQ535f core-prim . current-error-port) (gQ535e core-prim . current-output-port) (gQ535d core-prim . current-input-port) (gQ535c core-prim . output-port?) (gQ535b core-prim . input-port?) (gQ535a core-prim . utf-8-codec) (gQ5359 core-prim . utf-16-codec) (gQ5358 core-prim . transcoder-error-handling-mode) (gQ5357 core-prim . transcoder-eol-style) (gQ5356 core-prim . transcoder-codec) (gQ5355 core-prim . transcoded-port) (gQ5354 core-prim . textual-port?) (gQ5353 core-prim . string->bytevector) (gQ5352 core-prim . standard-output-port) (gQ5351 core-prim . standard-input-port) (gQ5350 core-prim . standard-error-port) (gQ534f core-prim . set-port-position!) (gQ534e core-prim . put-u8) (gQ534d core-prim . put-string) (gQ534c core-prim . put-datum) (gQ534b core-prim . put-char) (gQ534a core-prim . put-bytevector) (gQ5349 core-prim . port?) (gQ5348 core-prim . port-transcoder) (gQ5347 core-prim . port-position) (gQ5346 core-prim . port-has-set-port-position!?) (gQ5345 core-prim . port-has-port-position?) (gQ5344 core-prim . port-eof?) (gQ5343 core-prim . output-port-buffer-mode) (gQ5342 core-prim . open-string-output-port) (gQ5341 core-prim . open-string-input-port) (gQ5340 core-prim . open-file-output-port) (gQ533f core-prim . open-file-input/output-port) (gQ533e core-prim . open-file-input-port) (gQ533d core-prim . open-bytevector-output-port) (gQ533c core-prim . open-bytevector-input-port) (gQ533b core-prim . native-transcoder) (gQ533a core-prim . native-eol-style) (gQ5339 core-prim . make-transcoder) (gQ5338 core-prim . latin-1-codec) (gQ4dc3 core-prim . make-i/o-write-error) (gQ4dae core-prim . make-i/o-read-error) (gQ4e64 core-prim . make-i/o-port-error) (gQ4dda core-prim . make-i/o-invalid-position-error) (gQ4df5 core-prim . make-i/o-filename-error) (gQ4e0e core-prim . make-i/o-file-protection-error) (gQ4e23 core-prim . make-i/o-file-is-read-only-error) (gQ4e4d core-prim . make-i/o-file-does-not-exist-error) (gQ4e38 core-prim . make-i/o-file-already-exists-error) (gQ4d99 core-prim . make-i/o-error) (gQ4e94 core-prim . make-i/o-encoding-error) (gQ4e7d core-prim . make-i/o-decoding-error) (gQ5337 core-prim . make-custom-textual-output-port) (gQ5336 core-prim . make-custom-textual-input/output-port) (gQ5335 core-prim . make-custom-textual-input-port) (gQ5334 core-prim . make-custom-binary-output-port) (gQ5333 core-prim . make-custom-binary-input/output-port) (gQ5332 core-prim . make-custom-binary-input-port) (gQ5331 core-prim . make-bytevector) (gQ5330 core-prim . lookahead-u8) (gQ532f core-prim . lookahead-char) (gQ4dc5 core-prim . i/o-write-error?) (gQ4db0 core-prim . i/o-read-error?) (gQ4e68 core-prim . i/o-port-error?) (gQ4dde core-prim . i/o-invalid-position-error?) (gQ4df9 core-prim . i/o-filename-error?) (gQ4e10 core-prim . i/o-file-protection-error?) (gQ4e25 core-prim . i/o-file-is-read-only-error?) (gQ4e4f core-prim . i/o-file-does-not-exist-error?) (gQ4e3a core-prim . i/o-file-already-exists-error?) (gQ4d9b core-prim . i/o-error?) (gQ4de0 core-prim . i/o-error-position) (gQ4e6a core-prim . i/o-error-port) (gQ4dfb core-prim . i/o-error-filename) (gQ4e98 core-prim . i/o-encoding-error?) (gQ4e9a core-prim . i/o-encoding-error-char) (gQ4e7f core-prim . i/o-decoding-error?) (gQ532e core-prim . get-u8) (gQ532d core-prim . get-string-n!) (gQ532c core-prim . get-string-n) (gQ532b core-prim . get-string-all) (gQ532a core-prim . get-line) (gQ5329 core-prim . get-datum) (gQ5328 core-prim . get-char) (gQ5327 core-prim . get-bytevector-some) (gQ5326 core-prim . get-bytevector-n!) (gQ5325 core-prim . get-bytevector-n) (gQ5324 core-prim . get-bytevector-all) (gQ5323 core-prim . flush-output-port) (gQ5322 core-prim . close-port) (gQ3175 core-prim . scheme-report-environment) (gQ5321 core-prim . quotient) (gQ3173 core-prim . null-environment) (gQ5320 core-prim . remainder) (gQ531f core-prim . modulo) (gQ531e core-prim . inexact->exact) (gQ531d core-prim . force) (gQ531c core-prim . exact->inexact) (gQ531b core-prim . make-promise) (gQ531a core-prim . exit) (gQ4fd3 core-prim . command-line) (gQ5319 core-prim . string-fill!) (gQ5318 core-prim . string-set!) (gQ5317 core-prim . set-cdr!) (gQ5316 core-prim . set-car!) (gQ5315 core-prim . remove) (gQ5314 core-prim . remv) (gQ5313 core-prim . remp) (gQ5312 core-prim . remq) (gQ5311 core-prim . partition) (gQ5310 core-prim . memv) (gQ530f core-prim . memq) (gQ530e core-prim . memp) (gQ530d core-prim . member) (gQ530c core-prim . exists) (gQ530b core-prim . for-all) (gQ530a core-prim . fold-right) (gQ5309 core-prim . fold-left) (gQ5308 core-prim . find) (gQ5307 core-prim . filter) (gQ5306 core-prim . cons*) (gQ5305 core-prim . assv) (gQ5304 core-prim . assq) (gQ5303 core-prim . assp) (gQ5302 core-prim . assoc) (gQ5301 core-prim . call-with-string-output-port) (gQ5300 core-prim . call-with-port) (gQ52ff core-prim . call-with-bytevector-output-port) (gQ52fe core-prim . bytevector->string) (gQ52fd core-prim . buffer-mode?) (gQ52fc core-prim . binary-port?) (gQ52fb core-prim . with-exception-handler) (gQ52fa core-prim . raise-continuable) (gQ52f9 core-prim . raise) (gQ3179 core-prim . eval) (gQ3171 core-prim . environment) (gQ52f8 core-prim . make-enumeration) (gQ52f7 core-prim . enum-set=?) (gQ52f6 core-prim . enum-set-universe) (gQ52f5 core-prim . enum-set-union) (gQ52f4 core-prim . enum-set-subset?) (gQ52f3 core-prim . enum-set-projection) (gQ52f2 core-prim . enum-set-member?) (gQ52f1 core-prim . enum-set-intersection) (gQ52f0 core-prim . enum-set-indexer) (gQ52ef core-prim . enum-set-difference) (gQ52ee core-prim . enum-set-constructor) (gQ52ed core-prim . enum-set-complement) (gQ52ec core-prim . enum-set->list) (gQ4d0f core-prim . who-condition?) (gQ4c87 core-prim . warning?) (gQ4cc6 core-prim . violation?) (gQ4d86 core-prim . undefined-violation?) (gQ4d6d core-prim . syntax-violation?) (gQ4d71 core-prim . syntax-violation-subform) (gQ4d6f core-prim . syntax-violation-form) (gQ3199 core-prim . syntax-violation) (gQ52eb core-prim . simple-conditions) (gQ4c9c core-prim . serious-condition?) (gQ4d26 core-prim . non-continuable-violation?) (gQ4c70 core-prim . message-condition?) (gQ4d0b core-prim . make-who-condition) (gQ4c85 core-prim . make-warning) (gQ4cc4 core-prim . make-violation) (gQ4d84 core-prim . make-undefined-violation) (gQ4d67 core-prim . make-syntax-violation) (gQ4c9a core-prim . make-serious-condition) (gQ4d24 core-prim . make-non-continuable-violation) (gQ4c6c core-prim . make-message-condition) (gQ4d4e core-prim . make-lexical-violation) (gQ4cf0 core-prim . make-irritants-condition) (gQ4d39 core-prim . make-implementation-restriction-violation) (gQ4caf core-prim . make-error) (gQ4cd9 core-prim . make-assertion-violation) (gQ4d50 core-prim . lexical-violation?) (gQ4cf4 core-prim . irritants-condition?) (gQ4d3b core-prim . implementation-restriction-violation?) (gQ4cb1 core-prim . error?) (gQ4d11 core-prim . condition-who) (gQ52ea core-prim . condition-predicate) (gQ4c72 core-prim . condition-message) (gQ4cf6 core-prim . condition-irritants) (gQ52e9 core-prim . condition-accessor) (gQ52e8 core-prim . condition) (gQ4cdb core-prim . assertion-violation?) (gQ52e7 core-prim . condition?) (gQ52e6 core-prim . utf32->string) (gQ52e5 core-prim . utf16->string) (gQ52e4 core-prim . utf8->string) (gQ52e3 core-prim . uint-list->bytevector) (gQ52e2 core-prim . u8-list->bytevector) (gQ52e1 core-prim . string->utf8) (gQ52e0 core-prim . string->utf32) (gQ52df core-prim . string->utf16) (gQ52de core-prim . sint-list->bytevector) (gQ52dd core-prim . native-endianness) (gQ52dc core-prim . bytevector?) (gQ52db core-prim . bytevector=?) (gQ52da core-prim . bytevector-uint-set!) (gQ52d9 core-prim . bytevector-uint-ref) (gQ52d8 core-prim . bytevector-u8-set!) (gQ52d7 core-prim . bytevector-u8-ref) (gQ52d6 core-prim . bytevector-u64-set!) (gQ52d5 core-prim . bytevector-u64-ref) (gQ52d4 core-prim . bytevector-u64-native-set!) (gQ52d3 core-prim . bytevector-u64-native-ref) (gQ52d2 core-prim . bytevector-u32-set!) (gQ52d1 core-prim . bytevector-u32-ref) (gQ52d0 core-prim . bytevector-u32-native-set!) (gQ52cf core-prim . bytevector-u32-native-ref) (gQ52ce core-prim . bytevector-u16-set!) (gQ52cd core-prim . bytevector-u16-ref) (gQ52cc core-prim . bytevector-u16-native-set!) (gQ52cb core-prim . bytevector-u16-native-ref) (gQ52ca core-prim . bytevector-sint-set!) (gQ52c9 core-prim . bytevector-sint-ref) (gQ52c8 core-prim . bytevector-s8-set!) (gQ52c7 core-prim . bytevector-s8-ref) (gQ52c6 core-prim . bytevector-s64-set!) (gQ52c5 core-prim . bytevector-s64-ref) (gQ52c4 core-prim . bytevector-s64-native-set!) (gQ52c3 core-prim . bytevector-s64-native-ref) (gQ52c2 core-prim . bytevector-s32-set!) (gQ52c1 core-prim . bytevector-s32-ref) (gQ52c0 core-prim . bytevector-s32-native-set!) (gQ52bf core-prim . bytevector-s32-native-ref) (gQ52be core-prim . bytevector-s16-set!) (gQ52bd core-prim . bytevector-s16-ref) (gQ52bc core-prim . bytevector-s16-native-set!) (gQ52bb core-prim . bytevector-s16-native-ref) (gQ52ba core-prim . bytevector-length) (gQ52b9 core-prim . bytevector-ieee-single-ref) (gQ52b8 core-prim . bytevector-ieee-single-set!) (gQ52b7 core-prim . bytevector-ieee-single-native-set!) (gQ52b6 core-prim . bytevector-ieee-single-native-ref) (gQ52b5 core-prim . bytevector-ieee-double-set!) (gQ52b4 core-prim . bytevector-ieee-double-ref) (gQ52b3 core-prim . bytevector-ieee-double-native-set!) (gQ52b2 core-prim . bytevector-ieee-double-native-ref) (gQ52b1 core-prim . bytevector-fill!) (gQ52b0 core-prim . bytevector-copy!) (gQ52af core-prim . bytevector-copy) (gQ52ae core-prim . bytevector->uint-list) (gQ52ad core-prim . bytevector->u8-list) (gQ52ac core-prim . bytevector->sint-list) (gQ4ec4 core-prim . no-nans-violation?) (gQ4eaf core-prim . no-infinities-violation?) (gQ4ec2 core-prim . make-no-nans-violation) (gQ4ead core-prim . make-no-infinities-violation) (gQ52ab core-prim . real->flonum) (gQ52aa core-prim . flzero?) (gQ52a9 core-prim . fltruncate) (gQ52a8 core-prim . fltan) (gQ52a7 core-prim . flsqrt) (gQ52a6 core-prim . flsin) (gQ52a5 core-prim . flround) (gQ52a4 core-prim . flpositive?) (gQ52a3 core-prim . flonum?) (gQ52a2 core-prim . flodd?) (gQ52a1 core-prim . flnumerator) (gQ52a0 core-prim . flnegative?) (gQ529f core-prim . flnan?) (gQ529e core-prim . flmod0) (gQ529d core-prim . flmod) (gQ529c core-prim . flmin) (gQ529b core-prim . flmax) (gQ529a core-prim . fllog) (gQ5299 core-prim . flinteger?) (gQ5298 core-prim . flinfinite?) (gQ5297 core-prim . flfloor) (gQ5296 core-prim . flfinite?) (gQ5295 core-prim . flexpt) (gQ5294 core-prim . flexp) (gQ5293 core-prim . fleven?) (gQ5292 core-prim . fldiv0-and-mod0) (gQ5291 core-prim . fldiv0) (gQ5290 core-prim . fldiv-and-mod) (gQ528f core-prim . fldiv) (gQ528e core-prim . fldenominator) (gQ528d core-prim . flcos) (gQ528c core-prim . flceiling) (gQ528b core-prim . flatan) (gQ528a core-prim . flasin) (gQ5289 core-prim . flacos) (gQ5288 core-prim . flabs) (gQ5287 core-prim . fl>?) (gQ5286 core-prim . fl>=?) (gQ5285 core-prim . fl=?) (gQ5284 core-prim . fl<?) (gQ5283 core-prim . fl<=?) (gQ5282 core-prim . fl/) (gQ5281 core-prim . fl-) (gQ5280 core-prim . fl+) (gQ527f core-prim . fl*) (gQ527e core-prim . fixnum->flonum) (gQ527d core-prim . fxzero?) (gQ527c core-prim . fxxor) (gQ527b core-prim . fxrotate-bit-field) (gQ527a core-prim . fxreverse-bit-field) (gQ5279 core-prim . fxpositive?) (gQ5278 core-prim . fxodd?) (gQ5277 core-prim . fxnot) (gQ5276 core-prim . fxnegative?) (gQ5275 core-prim . fxmod0) (gQ5274 core-prim . fxmod) (gQ5273 core-prim . fxmin) (gQ5272 core-prim . fxmax) (gQ5271 core-prim . fxlength) (gQ5270 core-prim . fxior) (gQ526f core-prim . fxif) (gQ526e core-prim . fxfirst-bit-set) (gQ526d core-prim . fxeven?) (gQ526c core-prim . fxdiv0-and-mod0) (gQ526b core-prim . fxdiv0) (gQ526a core-prim . fxdiv-and-mod) (gQ5269 core-prim . fxdiv) (gQ5268 core-prim . fxcopy-bit-field) (gQ5267 core-prim . fxcopy-bit) (gQ5266 core-prim . fxbit-set?) (gQ5265 core-prim . fxbit-field) (gQ5264 core-prim . fxbit-count) (gQ5263 core-prim . fxarithmetic-shift-right) (gQ5262 core-prim . fxarithmetic-shift-left) (gQ5261 core-prim . fxarithmetic-shift) (gQ5260 core-prim . fxand) (gQ525f core-prim . fx>?) (gQ525e core-prim . fx>=?) (gQ525d core-prim . fx=?) (gQ525c core-prim . fx<?) (gQ525b core-prim . fx<=?) (gQ525a core-prim . fx-/carry) (gQ5259 core-prim . fx-) (gQ5258 core-prim . fx+/carry) (gQ5257 core-prim . fx+) (gQ5256 core-prim . fx*/carry) (gQ5255 core-prim . fx*) (gQ5254 core-prim . greatest-fixnum) (gQ5253 core-prim . least-fixnum) (gQ5252 core-prim . fixnum-width) (gQ5251 core-prim . fixnum?) (gQ5250 core-prim . bitwise-rotate-bit-field) (gQ524f core-prim . bitwise-reverse-bit-field) (gQ524e core-prim . bitwise-length) (gQ524d core-prim . bitwise-if) (gQ524c core-prim . bitwise-first-bit-set) (gQ524b core-prim . bitwise-copy-bit-field) (gQ524a core-prim . bitwise-copy-bit) (gQ5249 core-prim . bitwise-bit-set?) (gQ5248 core-prim . bitwise-bit-field) (gQ5247 core-prim . bitwise-bit-count) (gQ5246 core-prim . bitwise-xor) (gQ5245 core-prim . bitwise-ior) (gQ5244 core-prim . bitwise-and) (gQ5243 core-prim . bitwise-not) (gQ5242 core-prim . bitwise-arithmetic-shift-right) (gQ5241 core-prim . bitwise-arithmetic-shift-left) (gQ5240 core-prim . bitwise-arithmetic-shift) (gQ523f core-prim . zero?) (gQ523e core-prim . vector?) (gQ523d core-prim . vector-set!) (gQ523c core-prim . vector-ref) (gQ523b core-prim . vector-map) (gQ523a core-prim . vector-length) (gQ5239 core-prim . vector-for-each) (gQ5238 core-prim . vector-fill!) (gQ5237 core-prim . vector->list) (gQ5236 core-prim . vector) (gQ5235 core-prim . values) (gQ5234 core-prim . truncate) (gQ5233 core-prim . tan) (gQ5232 core-prim . symbol?) (gQ5231 core-prim . symbol=?) (gQ5230 core-prim . symbol->string) (gQ522f core-prim . substring) (gQ522e core-prim . string?) (gQ522d core-prim . string>?) (gQ522c core-prim . string>=?) (gQ522b core-prim . string=?) (gQ522a core-prim . string<?) (gQ5229 core-prim . string<=?) (gQ5228 core-prim . string-ref) (gQ5227 core-prim . string-length) (gQ5226 core-prim . string-for-each) (gQ5225 core-prim . string-copy) (gQ5224 core-prim . string-append) (gQ5223 core-prim . string->symbol) (gQ5222 core-prim . string->number) (gQ5221 core-prim . string->list) (gQ5220 core-prim . string) (gQ521f core-prim . sqrt) (gQ521e core-prim . sin) (gQ521d core-prim . round) (gQ521c core-prim . reverse) (gQ521b core-prim . real?) (gQ521a core-prim . real-valued?) (gQ5219 core-prim . real-part) (gQ5218 core-prim . rationalize) (gQ5217 core-prim . rational?) (gQ5216 core-prim . rational-valued?) (gQ5215 core-prim . procedure?) (gQ5214 core-prim . positive?) (gQ5213 core-prim . pair?) (gQ5212 core-prim . odd?) (gQ5211 core-prim . numerator) (gQ5210 core-prim . number?) (gQ520f core-prim . number->string) (gQ520e core-prim . null?) (gQ520d core-prim . not) (gQ520c core-prim . negative?) (gQ520b core-prim . nan?) (gQ520a core-prim . min) (gQ5209 core-prim . max) (gQ5208 core-prim . map) (gQ5207 core-prim . make-vector) (gQ5206 core-prim . make-string) (gQ5205 core-prim . make-rectangular) (gQ5204 core-prim . make-polar) (gQ5203 core-prim . magnitude) (gQ5202 core-prim . log) (gQ5201 core-prim . list?) (gQ5200 core-prim . list-tail) (gQ51ff core-prim . list-ref) (gQ51fe core-prim . list->vector) (gQ51fd core-prim . list->string) (gQ51fc core-prim . list) (gQ51fb core-prim . length) (gQ51fa core-prim . lcm) (gQ51f9 core-prim . integer?) (gQ51f8 core-prim . integer-valued?) (gQ51f7 core-prim . integer->char) (gQ51f6 core-prim . infinite?) (gQ51f5 core-prim . inexact?) (gQ51f4 core-prim . inexact) (gQ51f3 core-prim . imag-part) (gQ51f2 core-prim . gcd) (gQ51f1 core-prim . for-each) (gQ51f0 core-prim . floor) (gQ51ef core-prim . finite?) (gQ51ee core-prim . expt) (gQ51ed core-prim . exp) (gQ51ec core-prim . exact?) (gQ51eb core-prim . exact-integer-sqrt) (gQ51ea core-prim . exact) (gQ51e9 core-prim . even?) (gQ51e8 core-prim . error) (gQ51e7 core-prim . eqv?) (gQ51e6 core-prim . equal?) (gQ51e5 core-prim . eq?) (gQ51e4 core-prim . dynamic-wind) (gQ51e3 core-prim . div0-and-mod0) (gQ51e2 core-prim . mod0) (gQ51e1 core-prim . div0) (gQ51e0 core-prim . div-and-mod) (gQ51df core-prim . mod) (gQ51de core-prim . div) (gQ51dd core-prim . denominator) (gQ51dc core-prim . cos) (gQ51db core-prim . cons) (gQ51da core-prim . complex?) (gQ51d9 core-prim . char?) (gQ51d8 core-prim . char>?) (gQ51d7 core-prim . char>=?) (gQ51d6 core-prim . char=?) (gQ51d5 core-prim . char<?) (gQ51d4 core-prim . char<=?) (gQ51d3 core-prim . char->integer) (gQ51d2 core-prim . ceiling) (gQ51d1 core-prim . call-with-values) (gQ51d0 core-prim . call/cc) (gQ51cf core-prim . call-with-current-continuation) (gQ51ce core-prim . cddddr) (gQ51cd core-prim . cdddar) (gQ51cc core-prim . cddadr) (gQ51cb core-prim . cddaar) (gQ51ca core-prim . cdaddr) (gQ51c9 core-prim . cdadar) (gQ51c8 core-prim . cdaadr) (gQ51c7 core-prim . cdaaar) (gQ51c6 core-prim . cadddr) (gQ51c5 core-prim . caddar) (gQ51c4 core-prim . cadadr) (gQ51c3 core-prim . cadaar) (gQ51c2 core-prim . caaddr) (gQ51c1 core-prim . caadar) (gQ51c0 core-prim . caaadr) (gQ51bf core-prim . caaaar) (gQ51be core-prim . cdddr) (gQ51bd core-prim . cddar) (gQ51bc core-prim . cdadr) (gQ51bb core-prim . cdaar) (gQ51ba core-prim . caddr) (gQ51b9 core-prim . cadar) (gQ51b8 core-prim . caadr) (gQ51b7 core-prim . caaar) (gQ51b6 core-prim . cddr) (gQ51b5 core-prim . cdar) (gQ51b4 core-prim . cadr) (gQ51b3 core-prim . caar) (gQ51b2 core-prim . cdr) (gQ51b1 core-prim . car) (gQ51b0 core-prim . boolean?) (gQ51af core-prim . boolean=?) (gQ51ae core-prim . atan) (gQ51ad core-prim . assertion-violation) (gQ3193 core-prim . assertion-error) (gQ51ac core-prim . asin) (gQ51ab core-prim . apply) (gQ51aa core-prim . append) (gQ51a9 core-prim . angle) (gQ51a8 core-prim . acos) (gQ51a7 core-prim . abs) (gQ51a6 core-prim . /) (gQ51a5 core-prim . *) (gQ51a4 core-prim . -) (gQ51a3 core-prim . +) (gQ51a2 core-prim . >=) (gQ51a1 core-prim . >) (gQ51a0 core-prim . =) (gQ519f core-prim . <=) (gQ519e core-prim . <) (gQ519d core-prim . library) (gQ519c $core-rtd &no-nans-rtd &no-nans-rcd) (gQ519b $core-rtd &no-infinities-rtd &no-infinities-rcd) (gQ519a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (gQ5199 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (gQ5198 $core-rtd &i/o-port-rtd &i/o-port-rcd) (gQ5197 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (gQ5196 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (gQ5195 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (gQ5194 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (gQ5193 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (gQ5192 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (gQ5191 $core-rtd &i/o-write-rtd &i/o-write-rcd) (gQ5190 $core-rtd &i/o-read-rtd &i/o-read-rcd) (gQ518f $core-rtd &i/o-rtd &i/o-rcd) (gQ518e $core-rtd &undefined-rtd &undefined-rcd) (gQ518d $core-rtd &syntax-rtd &syntax-rcd) (gQ518c $core-rtd &lexical-rtd &lexical-rcd) (gQ518b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (gQ518a $core-rtd &non-continuable-rtd &non-continuable-rcd) (gQ5189 $core-rtd &who-rtd &who-rcd) (gQ5188 $core-rtd &irritants-rtd &irritants-rcd) (gQ5187 $core-rtd &assertion-rtd &assertion-rcd) (gQ5186 $core-rtd &violation-rtd &violation-rcd) (gQ5185 $core-rtd &error-rtd &error-rcd) (gQ5184 $core-rtd &serious-rtd &serious-rcd) (gQ5183 $core-rtd &warning-rtd &warning-rcd) (gQ5182 $core-rtd &message-rtd &message-rcd) (gQ5181 $core-rtd &condition-rtd &condition-rcd) (gQ5180 macro . define-condition-type) (gQ517f macro . define-enumeration) (gQ517e macro . define-record-type) (gQ517d macro . parent-rtd) (gQ517c macro . nongenerative) (gQ517b macro . opaque) (gQ517a macro . sealed) (gQ5179 macro . protocol) (gQ5178 macro . parent) (gQ5177 macro . immutable) (gQ5176 macro . mutable) (gQ5175 macro . fields) (gQ5174 macro . error-handling-mode) (gQ5173 macro . file-options) (gQ5172 macro . buffer-mode) (gQ5171 macro . eol-style) (gQ5170 macro . guard) (gQ516f macro . trace-define) (gQ516e macro . trace-lambda) (gQ516d macro . unsyntax-splicing) (gQ516c macro . unsyntax) (gQ516b macro . unquote-splicing) (gQ516a macro . unquote) (gQ5169 macro . _) (gQ5168 macro . else) (gQ5167 macro . =>) (gQ5166 macro . ...) (gQ5165 macro . assert) (gQ5164 macro . endianness) (gQ5163 macro . delay) (gQ5162 macro . time) (gQ5161 macro . do) (gQ5160 macro . cond) (gQ515f macro . let*) (gQ515e macro . let*-values) (gQ515d macro . let-values) (gQ515c macro . identifier-syntax) (gQ515b macro . with-syntax) (gQ515a macro . quasisyntax) (gQ5159 macro . quasiquote) (gQ5158 macro . syntax-rules) (gQ5157 macro . include) (gQ5156 macro . define-struct) (gQ5155 core-macro . record-constructor-descriptor) (gQ5154 core-macro . record-type-descriptor) (gQ5153 macro . case) (gQ5152 macro . parameterize) (gQ5151 macro . unless) (gQ5150 macro . when) (gQ514f core-macro . or) (gQ514e core-macro . and) (gQ514d core-macro . if) (gQ514c core-macro . let) (gQ514b core-macro . letrec*) (gQ514a core-macro . letrec) (gQ5149 core-macro . type-descriptor) (gQ5148 core-macro . case-lambda) (gQ5147 core-macro . lambda) (gQ5146 core-macro . syntax) (gQ5145 core-macro . syntax-case) (gQ5144 core-macro . quote) (gQ5143 core-macro . foreign-call) (gQ5142 letrec-syntax) (gQ5141 let-syntax) (gQ5140 set!) (gQ513f import) (gQ513e begin) (gQ513d module) (gQ513c define-syntax) (gQ513b define)) values values '#f '#f '#f '#f) (gQ2ccd@gQ2b19@install-library 'gQ5482 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . gQ5461) (eval-core . gQ5460) (set-symbol-value! . gQ545f) (symbol-value . gQ545e) (gensym . gQ545d) (void . gQ545c)) '() values values '#f '#f '#f '#f) (gQ2ccd@gQ2b19@install-library 'gQ5483 '(mosh) '() '() '() '() '((set-symbol-value! . gQ545f) (symbol-value . gQ545e) (regexp? . gQ545a) (read-line . gQ5459) (ungensym . gQ5457) (alist->eq-hash-table . gQ5456) (assoc-ref . gQ5455) (print . gQ5454) (format . gQ5453) (host-os . gQ5452) (library-path . gQ2af8) (standard-library-path . gQ5451) (file-newer? . gQ5450) (stat-mtime . gQ544f) (digit->integer . gQ544b) (call-with-string-input-port . gQ544a) (call-with-string-io . gQ5449) (string-split . gQ5448) (bytevector-for-each . gQ5447) (string->regexp . gQ5446) (rxmatch . gQ5445) (regexp-replace-all . gQ5444) (hashtable-for-each . gQ5443) (set-current-directory! . gQ543e) (expand-path . gQ543d) (current-directory . gQ543c) (p . gQ53fe) (get-timeofday . gQ53e5) (get-command-line . gQ53e4) (sys-display . gQ53e3) (whereis . gQ53e2) (register . gQ53e1) (vm-join! . gQ53e0) (vm-set-value! . gQ53df) (vm? . gQ53de) (main-vm? . gQ53dd) (vm-eval . gQ53dc) (vm-self . gQ53db) (vm-start! . gQ53da) (make-vm . gQ53d9) (mutex-try-lock! . gQ53d8) (mutex-unlock! . gQ53d7) (mutex-lock! . gQ53d6) (mutex? . gQ53d5) (make-mutex . gQ53d4) (condition-variable-notify-all! . gQ53d3) (condition-variable-notify! . gQ53d2) (condition-variable-wait! . gQ53d1) (make-condition-variable . gQ53d0) (mosh-executable-path . gQ53cf) (make-file-options . gQ53ce) (source-info . gQ53cd) (make-compiler-instruction . gQ53cc) (make-instruction . gQ53cb) (set-source-info! . gQ53ca) (bignum? . gQ53c9) (fast-equal? . gQ53c8) (fasl-read . gQ53c7) (fasl-write . gQ53c6) (time-usage . gQ53c5) (os-constant . gQ53c4) (time . gQ5162) (include . gQ5157)) '() values values '#f '#f '#f '#f) (gQ2ccd@gQ2b19@install-library 'gQ5484 '(system) '() '() '() '() '((gensym-prefix-set! . gQ5458) (write-to-file . gQ544e) (file->list . gQ544d) (file->string . gQ544c) (mosh-cache-dir . gQ28e2) (call-process . gQ5442) (local-tz-offset . gQ5441) (microseconds . gQ5440) (directory-list . gQ543f) (expand-path . gQ543d) (%spawn . gQ543b) (%waitpid . gQ543a) (simple-struct-name . gQ5439) (simple-struct-set! . gQ5438) (simple-struct-ref . gQ5437) (make-simple-struct . gQ5436) (simple-struct? . gQ5435) (pointer-ref-c-int64 . gQ5434) (pointer-ref-c-int32 . gQ5433) (pointer-ref-c-int16 . gQ5432) (pointer-ref-c-int8 . gQ5431) (pointer-ref-c-uint64 . gQ5430) (pointer-ref-c-uint32 . gQ542f) (pointer-ref-c-uint16 . gQ542e) (pointer-ref-c-uint8 . gQ542d) (pointer-set-c-uint64! . gQ542c) (pointer-set-c-uint32! . gQ542b) (pointer-set-c-uint16! . gQ542a) (pointer-set-c-uint8! . gQ5429) (pointer-set-c-int64! . gQ5428) (pointer-set-c-int32! . gQ5427) (pointer-set-c-int16! . gQ5426) (pointer-set-c-int8! . gQ5425) (pointer-set-c-pointer! . gQ5424) (pointer-set-c-double! . gQ5423) (pointer-set-c-float! . gQ5422) (pointer-set-c-long-long! . gQ5421) (pointer-set-c-long! . gQ5420) (pointer-set-c-int! . gQ541f) (pointer-set-c-short! . gQ541e) (pointer-set-c-char! . gQ541d) (pointer-ref-c-pointer . gQ541c) (pointer-ref-c-double . gQ541b) (pointer-ref-c-float . gQ541a) (pointer-ref-c-unsigned-long-long . gQ5419) (pointer-ref-c-signed-long-long . gQ5418) (pointer-ref-c-unsigned-long . gQ5417) (pointer-ref-c-signed-long . gQ5416) (pointer-ref-c-unsigned-int . gQ5415) (pointer-ref-c-signed-int . gQ5414) (pointer-ref-c-unsigned-short . gQ5413) (pointer-ref-c-signed-short . gQ5412) (pointer-ref-c-unsigned-char . gQ5411) (pointer-ref-c-signed-char . gQ5410) (pointer->integer . gQ540f) (integer->pointer . gQ540e) (pointer? . gQ540d) (shared-errno . gQ540c) (%ffi-free-c-callback-trampoline . gQ540b) (%ffi-make-c-callback-trampoline . gQ540a) (%ffi-free . gQ5409) (%ffi-malloc . gQ5408) (%ffi-supported? . gQ5407) (%ffi-pointer->string . gQ5406) (%ffi-call . gQ5405) (%ffi-lookup . gQ5404) (%ffi-open . gQ5403) (null-terminated-utf8->string . gQ5402) (null-terminated-bytevector->string . gQ5401) (%fork . gQ5400) (%pipe . gQ53ff) (open-output-string . gQ53fd) (get-output-string . gQ53fc) (file-stat-ctime . gQ53fb) (file-stat-atime . gQ53fa) (file-stat-mtime . gQ53f9) (file-size-in-bytes . gQ53f8) (file-writable? . gQ53f7) (file-executable? . gQ53f6) (file-readable? . gQ53f5) (file-regular? . gQ53f4) (file-symbolic-link? . gQ53f3) (file-directory? . gQ53f2) (create-symbolic-link . gQ53f1) (rename-file . gQ53f0) (delete-directory . gQ53ef) (create-directory . gQ53ee) (create-mosh-cache-dir . gQ53ed) (get-environment-variables . gQ53ec) (current-exception-handler . gQ53eb) (get-environment-variable . gQ53ea) (join-wraps . gQ53e9) (id->real-label . gQ53e8) (same-marks? . gQ53e7) (same-marks*? . gQ53e6) (disasm . gQ53c3) (make-parameter . gQ28e0) (socket-port . gQ53c2) (socket-shutdown . gQ53c1) (socket-close . gQ53c0) (socket-send . gQ53bf) (socket-recv! . gQ53be) (socket-recv . gQ53bd) (make-server-socket . gQ53bc) (make-client-socket . gQ53bb) (socket-accept . gQ53ba) (socket? . gQ53b9) (parameterize . gQ5152)) '() values values '#f '#f '#f '#f)))
(begin (set! gQ4fbe@ref (unspecified)) (set! gQ4fc0@x* (unspecified)) (set! gQ4fc2@add-library-path! (unspecified)) (set! gQ4fc4@parse-and-add-library-path (unspecified)) (set! gQ4fc6@for-each-with-index (unspecified)) (set! gQ4fc8@rpad (unspecified)) (set! gQ4fca@condition-printer (unspecified)) (set! gQ4fcc@record->field-alist (unspecified)) (set! gQ4fce@map-with-index (unspecified)) (set! gQ4fd0@repl (unspecified)) (set! gQ4fd2@trace-printer (unspecified)) (set! gQ4fd4@command-line (unspecified)) (set! gQ4fd6@local-library-path (unspecified)) (set! gQ4fd8@load/args (unspecified)) (set! gQ4fda@load (unspecified)) (set! gQ4fdc@ironscheme-build (unspecified)) (set! gQ4fde@eval-top-level (unspecified)) (set! gQ4fe0@compile-system-libraries (unspecified)) (set! gQ4fe2@compile (unspecified)) (set! gQ4fe4@compile->closure (unspecified)) (set! gQ4fe6@pre-compile-r6rs-file (unspecified)) (set! gQ4fe8@load-r6rs-top-level (unspecified)) (set! gQ4fea@load-r6rs-top-level-sexp (unspecified)) (set! gQ4fec@prefix-inc (unspecified)) (set! gQ4fee@prefix-inc! (unspecified)) (set! gQ4fbe@ref (lambda (gQ5029@rtd gQ502a@i gQ502b@x) (let ((gQ502f@val ((record-accessor gQ5029@rtd gQ502a@i) gQ502b@x))) (if (symbol? gQ502f@val) (ungensym gQ502f@val) gQ502f@val)))) (set! gQ5121@gQ4fbe@ref gQ4fbe@ref) (set! gQ4fc0@x* '()) (set! gQ5122@gQ4fc0@x* gQ4fc0@x*) (set! gQ4fc2@add-library-path! (lambda (gQ5031@path) (gQ2cbd@gQ2af9@library-path (append (gQ2cbd@gQ2af9@library-path) (list gQ5031@path))))) (set! gQ5123@gQ4fc2@add-library-path! gQ4fc2@add-library-path!) (set! gQ4fc4@parse-and-add-library-path (lambda (gQ5033@paths gQ5034@message) (letrec* ((gQ5038@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((gQ5039@t gQ5033@paths)) (if gQ5039@t ((lambda (gQ503b@paths) (for-each (lambda (gQ503d@path) (if (file-exists? gQ503d@path) (gQ4fc2@add-library-path! (expand-path gQ503d@path)) (format (current-error-port) gQ5034@message gQ503d@path))) (string-split gQ503b@paths gQ5038@separator))) gQ5039@t) (void)))))) (set! gQ5124@gQ4fc4@parse-and-add-library-path gQ4fc4@parse-and-add-library-path) (set! gQ4fc6@for-each-with-index (lambda (gQ503f@proc gQ5040@lst) (letrec ((gQ5043@loop (lambda (gQ5045@i gQ5046@lst) (if (null? gQ5046@lst) (if '#f '#f (void)) (begin (gQ503f@proc gQ5045@i (car gQ5046@lst)) (gQ5043@loop (+ gQ5045@i '1) (cdr gQ5046@lst))))))) (gQ5043@loop '1 gQ5040@lst)))) (set! gQ5125@gQ4fc6@for-each-with-index gQ4fc6@for-each-with-index) (set! gQ4fc8@rpad (lambda (gQ5049@str gQ504a@pad gQ504b@n) (let ((gQ504f@rest (- gQ504b@n (string-length (format '"~a" gQ5049@str))))) (let gQ5055@loop ((gQ5051@rest gQ504f@rest) (gQ5052@ret (format '"~a" gQ5049@str))) (if (<= gQ5051@rest '0) gQ5052@ret (gQ5055@loop (- gQ5051@rest '1) (string-append gQ5052@ret gQ504a@pad))))))) (set! gQ5126@gQ4fc8@rpad gQ4fc8@rpad) (set! gQ4fca@condition-printer (lambda (gQ5057@e gQ5058@port) (letrec* ((gQ505c@max-condition-len (apply max (map (lambda (gQ506d@c) (string-length (symbol->string (record-type-name (record-rtd gQ506d@c))))) (simple-conditions gQ5057@e))))) (begin (display '" Condition components:\n" gQ5058@port) (gQ4fc6@for-each-with-index (lambda (gQ505d@i gQ505e@x) (let ((gQ5061@rtd (record-rtd gQ505e@x)) (gQ5062@fields-alist (gQ4fcc@record->field-alist gQ505e@x))) (begin (format gQ5058@port '" ~d. ~a" gQ505d@i (gQ4fc8@rpad (symbol->string (record-type-name gQ5061@rtd)) '" " gQ505c@max-condition-len)) (if (null? gQ5062@fields-alist) (newline gQ5058@port) (void)) (let gQ5069@loop ((gQ5065@first '#t) (gQ5066@fields-alist gQ5062@fields-alist)) (if (null? gQ5066@fields-alist) '() (let ((gQ506b@field (car gQ5066@fields-alist))) (begin (if (not gQ5065@first) (display (gQ4fc8@rpad '"" '" " (+ '4 gQ505c@max-condition-len)) gQ5058@port) (void)) (display '"       " gQ5058@port) (display (car gQ506b@field) gQ5058@port) (display '": " gQ5058@port) (write (cdr gQ506b@field) gQ5058@port) (newline gQ5058@port) (gQ5069@loop '#f (cdr gQ5066@fields-alist))))))))) (simple-conditions gQ5057@e)))))) (set! gQ5127@gQ4fca@condition-printer gQ4fca@condition-printer) (set! gQ4fcc@record->field-alist (lambda (gQ506f@r) (letrec* ((gQ5072@ref (lambda (gQ507d@rtd gQ507e@i gQ507f@x) (let ((gQ5083@val ((record-accessor gQ507d@rtd gQ507e@i) gQ507f@x))) (if (symbol? gQ5083@val) (ungensym gQ5083@val) gQ5083@val))))) (let gQ5077@loop ((gQ5073@ret '()) (gQ5074@rtd (record-rtd gQ506f@r))) (if gQ5074@rtd (gQ5077@loop (append gQ5073@ret (gQ4fce@map-with-index (lambda (gQ5079@i gQ507a@field) (cons gQ507a@field (gQ5072@ref gQ5074@rtd gQ5079@i gQ506f@r))) (vector->list (record-type-field-names gQ5074@rtd)))) (record-type-parent gQ5074@rtd)) gQ5073@ret))))) (set! gQ5128@gQ4fcc@record->field-alist gQ4fcc@record->field-alist) (set! gQ4fce@map-with-index (lambda (gQ5085@proc gQ5086@lst) (let gQ508f@loop ((gQ5089@i '0) (gQ508a@lst gQ5086@lst) (gQ508b@ret '())) (if (null? gQ508a@lst) (reverse gQ508b@ret) (gQ508f@loop (+ gQ5089@i '1) (cdr gQ508a@lst) (cons (gQ5085@proc gQ5089@i (car gQ508a@lst)) gQ508b@ret)))))) (set! gQ5129@gQ4fce@map-with-index gQ4fce@map-with-index) (set! gQ4fd0@repl (lambda gQ5091@x (letrec* ((gQ5094@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (gQ5097@gQ5095) (lambda () (with-exception-handler (lambda (gQ5099@e) ((call/cc (lambda (gQ509b@gQ5096) (gQ5097@gQ5095 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? gQ5099@e) (gQ4fca@condition-printer gQ5099@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" gQ5099@e))) (gQ509b@gQ5096 (lambda () (raise-continuable gQ5099@e)))))))))) (lambda () (let gQ50a1@loop ((gQ509d@line (get-line (current-input-port))) (gQ509e@accum '"")) (letrec* ((gQ50a4@parentheses-ok? (lambda (gQ50ab@text) (let gQ50b3@loop ((gQ50ad@chars (string->list gQ50ab@text)) (gQ50ae@p0 '0) (gQ50af@p1 '0)) (if (null? gQ50ad@chars) (= '0 gQ50ae@p0 gQ50af@p1) (let ((gQ50b5@t (car gQ50ad@chars))) (if (memv gQ50b5@t '(#\()) (gQ50b3@loop (cdr gQ50ad@chars) (+ gQ50ae@p0 '1) gQ50af@p1) (if (memv gQ50b5@t '(#\))) (gQ50b3@loop (cdr gQ50ad@chars) (- gQ50ae@p0 '1) gQ50af@p1) (if (memv gQ50b5@t '(#\[)) (gQ50b3@loop (cdr gQ50ad@chars) gQ50ae@p0 (+ gQ50af@p1 '1)) (if (memv gQ50b5@t '(#\])) (gQ50b3@loop (cdr gQ50ad@chars) gQ50ae@p0 (- gQ50af@p1 '1)) (gQ50b3@loop (cdr gQ50ad@chars) gQ50ae@p0 gQ50af@p1)))))))))) (gQ50a6@eval-string-print (lambda (gQ50a9@text) (if (not (or (string=? '"\n" gQ50a9@text) (= '0 (string-length gQ50a9@text)))) (write (gQ4fde@eval-top-level (call-with-port (open-string-input-port gQ50a9@text) read))) (void))))) (if (eof-object? gQ509d@line) (begin (gQ50a6@eval-string-print gQ509e@accum) (exit)) (let ((gQ50a7@current (string-append gQ509e@accum gQ509d@line))) (if (gQ50a4@parentheses-ok? gQ50a7@current) (gQ50a6@eval-string-print gQ50a7@current) (gQ50a1@loop (get-line (current-input-port)) gQ50a7@current)))))))))))) (newline) (gQ5094@rec))))) (gQ5094@rec)))) (set! gQ512a@gQ4fd0@repl gQ4fd0@repl) (set! gQ4fd2@trace-printer (gQ2a03@gQ28e1@make-parameter write)) (set! gQ512b@gQ4fd2@trace-printer gQ4fd2@trace-printer) (set! gQ4fd4@command-line (gQ2a03@gQ28e1@make-parameter (get-command-line))) (set! gQ512c@gQ4fd4@command-line gQ4fd4@command-line) (set! gQ4fd6@local-library-path (lambda (gQ50b7@filename) (gQ2cbd@gQ2af9@library-path))) (set! gQ512d@gQ4fd6@local-library-path gQ4fd6@local-library-path) (set! gQ4fd8@load/args (lambda (gQ50b9@filename . gQ50bb@args) (begin (apply gQ4fe8@load-r6rs-top-level gQ50b9@filename 'load gQ50bb@args) (void)))) (set! gQ512e@gQ4fd8@load/args gQ4fd8@load/args) (set! gQ4fda@load (lambda (gQ50bd@filename) (begin (apply gQ4fe8@load-r6rs-top-level gQ50bd@filename 'load (gQ4fd4@command-line)) (void)))) (set! gQ512f@gQ4fda@load gQ4fda@load) (set! gQ4fdc@ironscheme-build (lambda () (gQ4fda@load '"ironscheme-buildscript.ss"))) (set! gQ5130@gQ4fdc@ironscheme-build gQ4fdc@ironscheme-build) (set! gQ4fde@eval-top-level (lambda (gQ50bf@x) (gQ4be4@gQ317a@eval gQ50bf@x (gQ4bfb@gQ31a8@interaction-environment)))) (set! gQ5131@gQ4fde@eval-top-level gQ4fde@eval-top-level) (set! gQ4fe0@compile-system-libraries (lambda () (gQ4fde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! gQ5132@gQ4fe0@compile-system-libraries gQ4fe0@compile-system-libraries) (set! gQ4fe2@compile (lambda (gQ50c1@filename) (gQ4fe8@load-r6rs-top-level gQ50c1@filename 'compile))) (set! gQ5133@gQ4fe2@compile gQ4fe2@compile) (set! gQ4fe4@compile->closure (lambda (gQ50c3@filename) (gQ4fe8@load-r6rs-top-level gQ50c3@filename 'closure))) (set! gQ5134@gQ4fe4@compile->closure gQ4fe4@compile->closure) (set! gQ4fe6@pre-compile-r6rs-file (lambda (gQ50c5@filename) (gQ4fe8@load-r6rs-top-level gQ50c5@filename 'compile))) (set! gQ5135@gQ4fe6@pre-compile-r6rs-file gQ4fe6@pre-compile-r6rs-file) (set! gQ4fe8@load-r6rs-top-level (lambda (gQ50c7@filename gQ50c8@how . gQ50cb@args) (begin (gQ2cbd@gQ2af9@library-path (gQ4fd6@local-library-path gQ50c7@filename)) (let ((gQ50cd@x* (with-input-from-file gQ50c7@filename (lambda () (let gQ50cf@f () (let ((gQ50d1@x (gQ29f5@gQ28c5@read-annotated))) (if (eof-object? gQ50d1@x) '() (cons gQ50d1@x (gQ50cf@f))))))))) (let ((gQ50d3@t gQ50c8@how)) (if (memv gQ50d3@t '(closure)) (gQ4bfa@gQ31a6@pre-compile-r6rs-top-level gQ50cd@x*) (if (memv gQ50d3@t '(load)) (begin (gQ4fd4@command-line (cons gQ50c7@filename (car gQ50cb@args))) (gQ2a04@gQ28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (gQ2a04@gQ28e3@mosh-cache-dir) (gensym-prefix-set! (gQ4fee@prefix-inc! (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gQ50d5@file) ((call/cc (lambda (gQ50d9@gQ50d7) (lambda () (with-exception-handler (lambda (gQ50db@c) ((call/cc (lambda (gQ50dd@gQ50d8) (gQ50d9@gQ50d7 (lambda () (if '#t '#t (gQ50dd@gQ50d8 (lambda () (raise-continuable gQ50db@c)))))))))) (lambda () (delete-file (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/" gQ50d5@file))))))))) (directory-list (gQ2a04@gQ28e3@mosh-cache-dir))) (void)) (let ((gQ50df@compiled (gQ4bf9@gQ31a4@compile-r6rs-top-level gQ50cd@x*))) (begin (if (and (gQ2a04@gQ28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gQ2cc1@gQ2b01@serialize-all gQ29fe@gQ28d7@serialize-library gQ2a5a@gQ2a13@compile-core-expr) (void)) (gQ50df@compiled)))) (if (memv gQ50d3@t '(compile)) (begin (gQ4bf9@gQ31a4@compile-r6rs-top-level gQ50cd@x*) (gQ2cc1@gQ2b01@serialize-all gQ29fe@gQ28d7@serialize-library gQ2a5a@gQ2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! gQ5136@gQ4fe8@load-r6rs-top-level gQ4fe8@load-r6rs-top-level) (set! gQ4fea@load-r6rs-top-level-sexp (lambda (gQ50e1@import-spec gQ50e2@thunk) (let ((gQ50ed@gQ50e6 gQ2cbd@gQ2af9@library-path) (gQ50ee@gQ50e8 gQ2a04@gQ28e3@mosh-cache-dir) (gQ50ef@gQ50ea (gQ4fd6@local-library-path '"")) (gQ50f0@gQ50ec (create-mosh-cache-dir))) (let ((gQ50f5@swap (lambda () (begin (let ((gQ50f7@t (gQ50ed@gQ50e6))) (begin (gQ50ed@gQ50e6 gQ50ef@gQ50ea) (set! gQ50ef@gQ50ea gQ50f7@t))) (let ((gQ50f9@t (gQ50ee@gQ50e8))) (begin (gQ50ee@gQ50e8 gQ50f0@gQ50ec) (set! gQ50f0@gQ50ec gQ50f9@t))))))) (dynamic-wind gQ50f5@swap (lambda () (begin (if (gQ2a04@gQ28e3@mosh-cache-dir) (gensym-prefix-set! (gQ4fee@prefix-inc! (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((gQ50ff@gQ50fc gQ4fd4@command-line) (gQ5100@gQ50fe '())) (let ((gQ5103@swap (lambda () (let ((gQ5105@t (gQ50ff@gQ50fc))) (begin (gQ50ff@gQ50fc gQ5100@gQ50fe) (set! gQ5100@gQ50fe gQ5105@t)))))) (dynamic-wind gQ5103@swap (lambda () ((gQ4bf9@gQ31a4@compile-r6rs-top-level (list (cons 'import gQ50e1@import-spec) (list gQ50e2@thunk))))) gQ5103@swap))))) gQ50f5@swap))))) (set! gQ5137@gQ4fea@load-r6rs-top-level-sexp gQ4fea@load-r6rs-top-level-sexp) (set! gQ4fec@prefix-inc (lambda (gQ5107@prefix-string) (let ((gQ5109@prefix (symbol->string gQ5107@prefix-string))) (let ((gQ510b@len (string-length gQ5109@prefix))) (let gQ5113@loop ((gQ510d@i (- gQ510b@len '1)) (gQ510e@carry? '#t) (gQ510f@accum '())) (if (< gQ510d@i '0) (string->symbol (list->string (if gQ510e@carry? (cons '#\a gQ510f@accum) gQ510f@accum))) (if gQ510e@carry? (let ((gQ5115@next-integer (+ '1 (char->integer (string-ref gQ5109@prefix gQ510d@i))))) (if (= gQ5115@next-integer '123) (gQ5113@loop (- gQ510d@i '1) '#f (cons '#\A gQ510f@accum)) (if (= gQ5115@next-integer '91) (gQ5113@loop (- gQ510d@i '1) '#t (cons '#\a gQ510f@accum)) (gQ5113@loop (- gQ510d@i '1) '#f (cons (integer->char gQ5115@next-integer) gQ510f@accum))))) (gQ5113@loop (- gQ510d@i '1) '#f (cons (string-ref gQ5109@prefix gQ510d@i) gQ510f@accum))))))))) (set! gQ5138@gQ4fec@prefix-inc gQ4fec@prefix-inc) (set! gQ4fee@prefix-inc! (lambda (gQ5117@file) (begin (if (not (file-exists? gQ5117@file)) (call-with-output-file gQ5117@file (lambda (gQ5119@port) (write 'd gQ5119@port))) (void)) (let ((gQ511b@prefix (call-with-input-file gQ5117@file read))) (if (main-vm?) (let ((gQ511d@next-prefix (gQ4fec@prefix-inc gQ511b@prefix))) (begin (call-with-port (open-file-output-port gQ5117@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (gQ511f@port) (write gQ511d@next-prefix gQ511f@port))) gQ511b@prefix)) gQ511b@prefix))))) (set! gQ5139@gQ4fee@prefix-inc! gQ4fee@prefix-inc!) (begin (gQ2cc2@gQ2b03@current-precompiled-library-loader gQ29ff@gQ28d9@load-serialized-library) (set-symbol-value! 'load gQ4fda@load) (set-symbol-value! 'pre-compile-r6rs-file gQ4fe6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs gQ4fde@eval-top-level) (set-symbol-value! 'int-env-syms gQ4bdb@gQ3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core gQ2a59@gQ2a11@expanded->core) (set-symbol-value! 'trace-printer gQ4fd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (gQ4fef@c) (condition (gQ4f1b@gQ4d25@make-non-continuable-violation) (gQ4f11@gQ4d0c@make-who-condition 'raise) (gQ4ed5@gQ4c6d@make-message-condition '"returned from non-continuable exception") (gQ4f07@gQ4cf1@make-irritants-condition (list gQ4fef@c))))) (gQ4fc4@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (gQ4fc4@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (gQ4fc2@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (gQ4fc2@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (gQ4fc2@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((gQ4ff1@prefix (lambda (gQ4ff3@ext gQ4ff4@ls) (append (map (lambda (gQ4ff7@x) (string-append gQ4ff3@ext gQ4ff7@x)) gQ4ff4@ls) gQ4ff4@ls)))) (gQ2cbe@gQ2afb@library-extensions (gQ4ff1@prefix '".mosh" (gQ2cbe@gQ2afb@library-extensions)))) (current-exception-handler (lambda (gQ4ff9@c) (begin (if (condition? gQ4ff9@c) (gQ4fca@condition-printer gQ4ff9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" gQ4ff9@c)) gQ4ff9@c))) (if ((call/cc (lambda (gQ4ffd@gQ4ffb) (lambda () (with-exception-handler (lambda (gQ4fff@c) ((call/cc (lambda (gQ5001@gQ4ffc) (gQ4ffd@gQ4ffb (lambda () (if '#t '#f (gQ5001@gQ4ffc (lambda () (raise-continuable gQ4fff@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (gQ4fea@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (gQ4fd4@command-line)) (let ((gQ500b@gQ5004 gQ4fd4@command-line) (gQ500c@gQ5006 gQ2a04@gQ28e3@mosh-cache-dir) (gQ500d@gQ5008 '()) (gQ500e@gQ500a (create-mosh-cache-dir))) (let ((gQ5013@swap (lambda () (begin (let ((gQ5015@t (gQ500b@gQ5004))) (begin (gQ500b@gQ5004 gQ500d@gQ5008) (set! gQ500d@gQ5008 gQ5015@t))) (let ((gQ5017@t (gQ500c@gQ5006))) (begin (gQ500c@gQ5006 gQ500e@gQ500a) (set! gQ500e@gQ500a gQ5017@t))))))) (dynamic-wind gQ5013@swap (lambda () (begin (if (gQ2a04@gQ28e3@mosh-cache-dir) (gensym-prefix-set! (gQ4fee@prefix-inc! (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (gQ4fd0@repl))) gQ5013@swap))) (begin (gQ2cbd@gQ2af9@library-path (gQ4fd6@local-library-path (car (gQ4fd4@command-line)))) (set! gQ4fc0@x* (with-input-from-file (car (gQ4fd4@command-line)) (lambda () (let gQ5019@f () (let ((gQ501b@x (gQ29f5@gQ28c5@read-annotated))) (if (eof-object? gQ501b@x) '() (cons gQ501b@x (gQ5019@f)))))))) (gQ4fd4@command-line (cons (car (gQ4fd4@command-line)) (cdr (gQ4fd4@command-line)))) (gQ2a04@gQ28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (gQ2a04@gQ28e3@mosh-cache-dir) (gensym-prefix-set! (gQ4fee@prefix-inc! (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gQ501d@file) ((call/cc (lambda (gQ5021@gQ501f) (lambda () (with-exception-handler (lambda (gQ5023@c) ((call/cc (lambda (gQ5025@gQ5020) (gQ5021@gQ501f (lambda () (if '#t '#t (gQ5025@gQ5020 (lambda () (raise-continuable gQ5023@c)))))))))) (lambda () (delete-file (string-append (gQ2a04@gQ28e3@mosh-cache-dir) '"/" gQ501d@file))))))))) (directory-list (gQ2a04@gQ28e3@mosh-cache-dir))) (void)) (let ((gQ5027@compiled (gQ4bf9@gQ31a4@compile-r6rs-top-level gQ4fc0@x*))) (begin (if (and (gQ2a04@gQ28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gQ2cc1@gQ2b01@serialize-all gQ29fe@gQ28d7@serialize-library gQ2a5a@gQ2a13@compile-core-expr) (void)) (gQ5027@compiled))))))))
