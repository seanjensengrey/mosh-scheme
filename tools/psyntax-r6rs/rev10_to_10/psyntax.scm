;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (Ak2865@library-file-path->cache-path Ak2867@read-annotated Ak2869@annotation-stripped Ak286b@annotation? Ak286d@annotation-source Ak286f@annotation-expression Ak2871@scm->fasl Ak2873@fasl-save Ak2875@fasl-load Ak2877@serialize-library Ak2879@load-serialized-library Ak287b@make-record-printer Ak287d@compile-core Ak287f@read-library-source-file Ak2881@make-parameter Ak2883@mosh-cache-dir Ak2919@file-options-spec) (begin (set! Ak2865@library-file-path->cache-path (lambda (Ak291a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Ak2920@Ak291d Ak2921@Ak291f) ((lambda (Ak2924@extract Ak2925@p) ((lambda (Ak2929@display-hex) (begin (set! Ak2929@display-hex (lambda (Ak2932@n) (if (<= '0 Ak2932@n '9) (display Ak2932@n Ak2925@p) (display (integer->char (+ (char->integer '#\a) (- Ak2932@n '10))) Ak2925@p)))) (begin ((letrec ((Ak292a@f (lambda (Ak292c@ls) (if (not (null? Ak292c@ls)) (begin (display '"_" Ak2925@p) (for-each (lambda (Ak292e@c) (if (or (char<=? '#\a Ak292e@c '#\z) (char<=? '#\A Ak292e@c '#\Z) (char<=? '#\0 Ak292e@c '#\9) (memv Ak292e@c '(#\- #\. #\_ #\~))) (display Ak292e@c Ak2925@p) (begin (display '"%" Ak2925@p) ((lambda (Ak2930@n) (begin (Ak2929@display-hex (quotient Ak2930@n '16)) (Ak2929@display-hex (remainder Ak2930@n '16)))) (char->integer Ak292e@c))))) (string->list (car Ak292c@ls))) (Ak292a@f (cdr Ak292c@ls))) (void))))) Ak292a@f) (string-split Ak291a@x '#\/)) (Ak2924@extract)))) '#f)) Ak2921@Ak291f Ak2920@Ak291d))))) (set! Ak2867@read-annotated read) (set! Ak2869@annotation-stripped (lambda (Ak2934@x) (Ak286f@annotation-expression Ak2934@x))) (set! Ak286b@annotation? (lambda (Ak2936@x) (source-info Ak2936@x))) (set! Ak286d@annotation-source (lambda (Ak2938@x) (source-info Ak2938@x))) (set! Ak286f@annotation-expression (lambda (Ak293a@x) (if (pair? Ak293a@x) (cons (car Ak293a@x) (cdr Ak293a@x)) (display '"line:46\n")))) (set! Ak2871@scm->fasl (lambda (Ak293c@filename) (string-append (Ak2883@mosh-cache-dir) '"/" (Ak2865@library-file-path->cache-path Ak293c@filename) '".mosh-fasl"))) (set! Ak2873@fasl-save (lambda (Ak293e@filename Ak293f@obj) (call-with-port (open-file-output-port Ak293e@filename) (lambda (Ak2942@port) ((symbol-value 'fasl-write!) Ak293f@obj Ak2942@port))))) (set! Ak2875@fasl-load (lambda (Ak2944@filename) (call-with-port (open-file-input-port Ak2944@filename) (symbol-value 'fasl-read!)))) (set! Ak2877@serialize-library (lambda (Ak2946@filename Ak2947@obj) (begin ((lambda (Ak294a@expanded2core) ((lambda (Ak294c@compile) ((lambda (Ak294e@code) ((lambda (Ak2950@pivot) ((lambda (Ak2952@visit) ((lambda () (begin (set-car! Ak2950@pivot Ak2952@visit) ((lambda (Ak2954@pivot) ((lambda (Ak2956@invoke) ((lambda () (set-car! Ak2954@pivot Ak2956@invoke)))) (Ak294c@compile (Ak294a@expanded2core (car Ak2954@pivot))))) (cdr Ak2950@pivot)))))) (Ak294c@compile (Ak294a@expanded2core (car Ak2950@pivot))))) (cddddr (cddddr Ak294e@code)))) Ak2947@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (Ak2958@fasl-file) (begin (if (file-exists? Ak2958@fasl-file) (delete-file Ak2958@fasl-file) (void)) ((call/cc (lambda (Ak295c@Ak295a) (lambda () (with-exception-handler (lambda (Ak295e@c) ((call/cc (lambda (Ak2960@Ak295b) (Ak295c@Ak295a (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " Ak2946@filename) (if (file-exists? Ak2958@fasl-file) (delete-file Ak2958@fasl-file) (void)) '#f) (Ak2960@Ak295b (lambda () (raise-continuable Ak295e@c)))))))))) (lambda () (Ak2873@fasl-save Ak2958@fasl-file Ak2947@obj))))))))) (Ak2871@scm->fasl Ak2946@filename))))) (set! Ak2879@load-serialized-library (lambda (Ak2962@filename Ak2963@obj) (and (Ak2883@mosh-cache-dir) ((lambda (Ak2966@fasl-file) (if (and (file-exists? Ak2966@fasl-file) ((symbol-value 'file-newer?) Ak2966@fasl-file Ak2962@filename)) ((lambda (Ak2968@expanded2core) ((lambda (Ak296a@eval-compiled-core) ((lambda (Ak296c@code) ((lambda (Ak296e@pivot) ((lambda (Ak2970@visit) ((lambda (Ak2972@visit-proc) ((lambda () (begin (set-car! Ak296e@pivot Ak2972@visit-proc) ((lambda (Ak2974@pivot) ((lambda (Ak2976@invoke) ((lambda () (begin (set-car! Ak2974@pivot (lambda () (Ak296a@eval-compiled-core Ak2976@invoke))) (apply Ak2963@obj Ak296c@code))))) (car Ak2974@pivot))) (cdr Ak296e@pivot)))))) (lambda () (Ak296a@eval-compiled-core Ak2970@visit)))) (car Ak296e@pivot))) (cddddr (cddddr Ak296c@code)))) (Ak2875@fasl-load Ak2966@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (Ak2871@scm->fasl Ak2962@filename))))) (set! Ak287b@make-record-printer (lambda (Ak2978@name Ak2979@printer) (lambda Ak297c@x (begin (display '"record printer") (for-each display Ak297c@x))))) (set! Ak287d@compile-core (lambda Ak297e@x (apply error 'comile-core '"not implementated" Ak297e@x))) (set! Ak287f@read-library-source-file (lambda (Ak2980@file-name) (with-input-from-file Ak2980@file-name Ak2867@read-annotated))) (set! Ak2881@make-parameter (lambda Ak2990 ((lambda (Ak2991) (if (= Ak2991 '1) (apply (lambda (Ak2982@x) (Ak2881@make-parameter Ak2982@x (lambda (Ak2984@x) Ak2984@x))) Ak2990) (if (= Ak2991 '2) (apply (lambda (Ak2986@x Ak2987@fender) ((lambda (Ak298a@x) (lambda Ak298e ((lambda (Ak298f) (if (= Ak298f '0) (apply (lambda () Ak298a@x) Ak298e) (if (= Ak298f '1) (apply (lambda (Ak298c@v) (set! Ak298a@x (Ak2987@fender Ak298c@v))) Ak298e) (error 'apply '"invalid arg count")))) (length Ak298e)))) (Ak2987@fender Ak2986@x))) Ak2990) (error 'apply '"invalid arg count")))) (length Ak2990)))) (set! Ak2883@mosh-cache-dir (Ak2881@make-parameter '#f)) (set! Ak2919@file-options-spec (lambda (Ak2992@x) Ak2992@x)) (begin (set! Ak29a4@Ak2919@file-options-spec Ak2919@file-options-spec) (set! Ak29a3@Ak2883@mosh-cache-dir Ak2883@mosh-cache-dir) (set! Ak29a2@Ak2881@make-parameter Ak2881@make-parameter) (set! Ak29a1@Ak287f@read-library-source-file Ak287f@read-library-source-file) (set! Ak29a0@Ak287d@compile-core Ak287d@compile-core) (set! Ak299f@Ak287b@make-record-printer Ak287b@make-record-printer) (set! Ak299e@Ak2879@load-serialized-library Ak2879@load-serialized-library) (set! Ak299d@Ak2877@serialize-library Ak2877@serialize-library) (set! Ak299c@Ak2875@fasl-load Ak2875@fasl-load) (set! Ak299b@Ak2873@fasl-save Ak2873@fasl-save) (set! Ak299a@Ak2871@scm->fasl Ak2871@scm->fasl) (set! Ak2999@Ak286f@annotation-expression Ak286f@annotation-expression) (set! Ak2998@Ak286d@annotation-source Ak286d@annotation-source) (set! Ak2997@Ak286b@annotation? Ak286b@annotation?) (set! Ak2996@Ak2869@annotation-stripped Ak2869@annotation-stripped) (set! Ak2995@Ak2867@read-annotated Ak2867@read-annotated) (set! Ak2994@Ak2865@library-file-path->cache-path Ak2865@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (Ak29aa@current-primitive-locations Ak29ac@mutable? Ak29ae@rewriter Ak29b0@expanded->core Ak29b2@compile-core-expr Ak29b4@pretty-print Ak29b6@compile-core-expr-to-port) (begin (set! Ak29aa@current-primitive-locations (Ak29a2@Ak2881@make-parameter (lambda (Ak29b7@x) '#f) (lambda (Ak29b9@p) Ak29b9@p))) (set! Ak29ac@mutable? (lambda (Ak29bb@x) (or (pair? Ak29bb@x) (vector? Ak29bb@x) (hashtable? Ak29bb@x)))) (set! Ak29ae@rewriter (lambda (Ak29bd@quote-hack?) ((lambda (Ak29c0@f) (begin (set! Ak29c0@f (lambda (Ak29c1@x) (if (pair? Ak29c1@x) ((lambda (Ak29c3@t) (if (memv Ak29c3@t '(quote)) (if (and Ak29bd@quote-hack? (Ak29ac@mutable? (cadr Ak29c1@x))) ((lambda (Ak29c5@g) (begin (set-symbol-value! Ak29c5@g (cadr Ak29c1@x)) Ak29c5@g)) (gensym)) Ak29c1@x) (if (memv Ak29c3@t '(case-lambda)) (cons 'case-lambda (map (lambda (Ak29c7@x) (cons (car Ak29c7@x) (map Ak29c0@f (cdr Ak29c7@x)))) (cdr Ak29c1@x))) (if (memv Ak29c3@t '(lambda)) (cons* 'lambda (cadr Ak29c1@x) (map Ak29c0@f (cddr Ak29c1@x))) (if (memv Ak29c3@t '(letrec)) ((lambda (Ak29c9@bindings Ak29ca@body*) ((lambda (Ak29cd@lhs* Ak29ce@rhs*) (cons* 'letrec (map list Ak29cd@lhs* (map Ak29c0@f Ak29ce@rhs*)) (map Ak29c0@f Ak29ca@body*))) (map car Ak29c9@bindings) (map cadr Ak29c9@bindings))) (cadr Ak29c1@x) (cddr Ak29c1@x)) (if (memv Ak29c3@t '(letrec*)) ((lambda (Ak29d1@bindings Ak29d2@body*) ((lambda (Ak29d5@lhs* Ak29d6@rhs*) (cons* 'letrec* (map list Ak29d5@lhs* (map Ak29c0@f Ak29d6@rhs*)) (map Ak29c0@f Ak29d2@body*))) (map car Ak29d1@bindings) (map cadr Ak29d1@bindings))) (cadr Ak29c1@x) (cddr Ak29c1@x)) (if (memv Ak29c3@t '(library-letrec*)) ((lambda (Ak29d9@name Ak29da@x) ((lambda (Ak29dd@bindings Ak29de@body*) ((lambda (Ak29e1@lhs* Ak29e2@lhs** Ak29e3@rhs*) (cons* 'library-letrec* Ak29d9@name (map list Ak29e1@lhs* Ak29e2@lhs** (map Ak29c0@f Ak29e3@rhs*)) (map Ak29c0@f Ak29de@body*))) (map car Ak29dd@bindings) (map cadr Ak29dd@bindings) (map caddr Ak29dd@bindings))) (cadr Ak29da@x) (cddr Ak29da@x))) (cadr Ak29c1@x) (cdr Ak29c1@x)) (if (memv Ak29c3@t '(begin)) (cons 'begin (map Ak29c0@f (cdr Ak29c1@x))) (if (memv Ak29c3@t '(set!)) (list 'set! (cadr Ak29c1@x) (Ak29c0@f (caddr Ak29c1@x))) (if (memv Ak29c3@t '(primitive)) ((lambda (Ak29e7@op) ((lambda (Ak29e9@t) (if Ak29e9@t ((lambda (Ak29eb@loc) Ak29eb@loc) Ak29e9@t) Ak29e7@op)) ((Ak29aa@current-primitive-locations) Ak29e7@op))) (cadr Ak29c1@x)) (if (memv Ak29c3@t '(define)) Ak29c1@x (if (list? Ak29c1@x) (map Ak29c0@f Ak29c1@x) (error 'rewrite '"invalid form ~s ~s" Ak29c1@x (list? Ak29c1@x)))))))))))))) (car Ak29c1@x)) Ak29c1@x))) Ak29c0@f)) '#f))) (set! Ak29b0@expanded->core (lambda (Ak29ed@x) ((Ak29ae@rewriter '#f) Ak29ed@x))) (set! Ak29b2@compile-core-expr (lambda (Ak29ef@x) ((Ak29ae@rewriter '#f) Ak29ef@x))) (set! Ak29b4@pretty-print write) (set! Ak29b6@compile-core-expr-to-port (lambda (Ak29f1@x Ak29f2@p) (Ak29b4@pretty-print ((Ak29ae@rewriter '#f) Ak29f1@x) Ak29f2@p))) (begin (set! Ak29fb@Ak29b6@compile-core-expr-to-port Ak29b6@compile-core-expr-to-port) (set! Ak29fa@Ak29b4@pretty-print Ak29b4@pretty-print) (set! Ak29f9@Ak29b2@compile-core-expr Ak29b2@compile-core-expr) (set! Ak29f8@Ak29b0@expanded->core Ak29b0@expanded->core) (set! Ak29f7@Ak29ae@rewriter Ak29ae@rewriter) (set! Ak29f6@Ak29ac@mutable? Ak29ac@mutable?) (set! Ak29f5@Ak29aa@current-primitive-locations Ak29aa@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (Ak2a4a@make-collection Ak2a4c@current-library-collection Ak2a4e@rp Ak2a58@library? Ak2a5a@library-id Ak2a5c@set-library-id! Ak2a5e@library-name Ak2a60@set-library-name! Ak2a62@library-version Ak2a64@set-library-version! Ak2a66@library-imp* Ak2a68@set-library-imp*! Ak2a6a@library-vis* Ak2a6c@set-library-vis*! Ak2a6e@library-inv* Ak2a70@set-library-inv*! Ak2a72@library-subst Ak2a74@set-library-subst! Ak2a76@library-env Ak2a78@set-library-env! Ak2a7a@library-visit-state Ak2a7c@set-library-visit-state! Ak2a7e@library-invoke-state Ak2a80@set-library-invoke-state! Ak2a82@library-visit-code Ak2a84@set-library-visit-code! Ak2a86@library-invoke-code Ak2a88@set-library-invoke-code! Ak2a8a@library-visible? Ak2a8c@set-library-visible?! Ak2a8e@library-source-file-name Ak2a90@set-library-source-file-name! Ak2a92@dummy Ak2a94@find-dependencies Ak2a96@find-library-by Ak2a98@library-path Ak2a9a@library-extensions Ak2a9c@library-name->file-name Ak2a9e@file-locator Ak2aa0@serialize-all Ak2aa2@current-precompiled-library-loader Ak2aa4@try-load-from-file Ak2aa6@library-loader Ak2aa8@current-library-expander Ak2aaa@external-pending-libraries Ak2aac@find-external-library Ak2aae@find-library-by-name Ak2ab0@library-exists? Ak2ab2@find-library-by-spec/die Ak2ab4@label->binding-table Ak2ab6@install-library-record Ak2ab8@install-library Ak2aba@imported-label->binding Ak2abc@invoke-library Ak2abe@visit-library Ak2ac0@invoke-library-by-spec Ak2ac2@installed-libraries Ak2ac4@library-spec) (begin (set! Ak2a4a@make-collection (lambda () ((lambda (Ak2ac5@set) ((lambda (Ak2ac8@set-cons) (begin (set! Ak2ac8@set-cons (lambda (Ak2acd@x Ak2ace@ls) (if (memq Ak2acd@x Ak2ace@ls) Ak2ace@ls (cons Ak2acd@x Ak2ace@ls)))) (lambda Ak2acb ((lambda (Ak2acc) (if (= Ak2acc '0) (apply (lambda () Ak2ac5@set) Ak2acb) (if (= Ak2acc '1) (apply (lambda (Ak2ac9@x) (set! Ak2ac5@set (Ak2ac8@set-cons Ak2ac9@x Ak2ac5@set))) Ak2acb) (error 'apply '"invalid arg count")))) (length Ak2acb))))) '#f)) '()))) (set! Ak2a4c@current-library-collection (Ak29a2@Ak2881@make-parameter (Ak2a4a@make-collection) (lambda (Ak2ad1@x) (begin (if (not (procedure? Ak2ad1@x)) (assertion-violation 'current-library-collection '"not a procedure" Ak2ad1@x) (void)) Ak2ad1@x)))) (set! Ak2a4e@rp (Ak299f@Ak287b@make-record-printer 'library (lambda (Ak2ad3@x Ak2ad4@p Ak2ad5@wr) (begin (if (not (Ak2a58@library? Ak2ad3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (Ak2a62@library-version Ak2ad3@x)) (Ak2a5e@library-name Ak2ad3@x) (append (Ak2a5e@library-name Ak2ad3@x) (list (Ak2a62@library-version Ak2ad3@x))))) Ak2ad4@p))))) (set! Ak2a58@library? (lambda (Ak2ad9@x) (and (simple-struct? Ak2ad9@x) (eq? (simple-struct-name Ak2ad9@x) 'library)))) (set! Ak2a5a@library-id (lambda (Ak2adb@x) (simple-struct-ref Ak2adb@x '0))) (set! Ak2a5c@set-library-id! (lambda (Ak2add@x Ak2ade@val) (simple-struct-set! Ak2add@x '0 Ak2ade@val))) (set! Ak2a5e@library-name (lambda (Ak2ae1@x) (simple-struct-ref Ak2ae1@x '1))) (set! Ak2a60@set-library-name! (lambda (Ak2ae3@x Ak2ae4@val) (simple-struct-set! Ak2ae3@x '1 Ak2ae4@val))) (set! Ak2a62@library-version (lambda (Ak2ae7@x) (simple-struct-ref Ak2ae7@x '2))) (set! Ak2a64@set-library-version! (lambda (Ak2ae9@x Ak2aea@val) (simple-struct-set! Ak2ae9@x '2 Ak2aea@val))) (set! Ak2a66@library-imp* (lambda (Ak2aed@x) (simple-struct-ref Ak2aed@x '3))) (set! Ak2a68@set-library-imp*! (lambda (Ak2aef@x Ak2af0@val) (simple-struct-set! Ak2aef@x '3 Ak2af0@val))) (set! Ak2a6a@library-vis* (lambda (Ak2af3@x) (simple-struct-ref Ak2af3@x '4))) (set! Ak2a6c@set-library-vis*! (lambda (Ak2af5@x Ak2af6@val) (simple-struct-set! Ak2af5@x '4 Ak2af6@val))) (set! Ak2a6e@library-inv* (lambda (Ak2af9@x) (simple-struct-ref Ak2af9@x '5))) (set! Ak2a70@set-library-inv*! (lambda (Ak2afb@x Ak2afc@val) (simple-struct-set! Ak2afb@x '5 Ak2afc@val))) (set! Ak2a72@library-subst (lambda (Ak2aff@x) (simple-struct-ref Ak2aff@x '6))) (set! Ak2a74@set-library-subst! (lambda (Ak2b01@x Ak2b02@val) (simple-struct-set! Ak2b01@x '6 Ak2b02@val))) (set! Ak2a76@library-env (lambda (Ak2b05@x) (simple-struct-ref Ak2b05@x '7))) (set! Ak2a78@set-library-env! (lambda (Ak2b07@x Ak2b08@val) (simple-struct-set! Ak2b07@x '7 Ak2b08@val))) (set! Ak2a7a@library-visit-state (lambda (Ak2b0b@x) (simple-struct-ref Ak2b0b@x '8))) (set! Ak2a7c@set-library-visit-state! (lambda (Ak2b0d@x Ak2b0e@val) (simple-struct-set! Ak2b0d@x '8 Ak2b0e@val))) (set! Ak2a7e@library-invoke-state (lambda (Ak2b11@x) (simple-struct-ref Ak2b11@x '9))) (set! Ak2a80@set-library-invoke-state! (lambda (Ak2b13@x Ak2b14@val) (simple-struct-set! Ak2b13@x '9 Ak2b14@val))) (set! Ak2a82@library-visit-code (lambda (Ak2b17@x) (simple-struct-ref Ak2b17@x '10))) (set! Ak2a84@set-library-visit-code! (lambda (Ak2b19@x Ak2b1a@val) (simple-struct-set! Ak2b19@x '10 Ak2b1a@val))) (set! Ak2a86@library-invoke-code (lambda (Ak2b1d@x) (simple-struct-ref Ak2b1d@x '11))) (set! Ak2a88@set-library-invoke-code! (lambda (Ak2b1f@x Ak2b20@val) (simple-struct-set! Ak2b1f@x '11 Ak2b20@val))) (set! Ak2a8a@library-visible? (lambda (Ak2b23@x) (simple-struct-ref Ak2b23@x '12))) (set! Ak2a8c@set-library-visible?! (lambda (Ak2b25@x Ak2b26@val) (simple-struct-set! Ak2b25@x '12 Ak2b26@val))) (set! Ak2a8e@library-source-file-name (lambda (Ak2b29@x) (simple-struct-ref Ak2b29@x '13))) (set! Ak2a90@set-library-source-file-name! (lambda (Ak2b2b@x Ak2b2c@val) (simple-struct-set! Ak2b2b@x '13 Ak2b2c@val))) (set! Ak2a92@dummy '3) (set! Ak2a94@find-dependencies (lambda (Ak2b2f@ls) (if (null? Ak2b2f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! Ak2a96@find-library-by (lambda (Ak2b31@pred) ((letrec ((Ak2b33@f (lambda (Ak2b35@ls) (if (null? Ak2b35@ls) '#f (if (Ak2b31@pred (car Ak2b35@ls)) (car Ak2b35@ls) (Ak2b33@f (cdr Ak2b35@ls))))))) Ak2b33@f) ((Ak2a4c@current-library-collection))))) (set! Ak2a98@library-path (Ak29a2@Ak2881@make-parameter '(".") (lambda (Ak2b37@x) (if (and (list? Ak2b37@x) (for-all string? Ak2b37@x)) (map (lambda (Ak2b39@x) Ak2b39@x) Ak2b37@x) (assertion-violation 'library-path '"not a list of strings" Ak2b37@x))))) (set! Ak2a9a@library-extensions (Ak29a2@Ak2881@make-parameter '(".sls" ".ss" ".scm") (lambda (Ak2b3b@x) (if (and (list? Ak2b3b@x) (for-all string? Ak2b3b@x)) (map (lambda (Ak2b3d@x) Ak2b3d@x) Ak2b3b@x) (assertion-violation 'library-extensions '"not a list of strings" Ak2b3b@x))))) (set! Ak2a9c@library-name->file-name (lambda (Ak2b3f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Ak2b45@Ak2b42 Ak2b46@Ak2b44) ((lambda (Ak2b49@extract Ak2b4a@p) ((lambda (Ak2b4e@display-hex) (begin (set! Ak2b4e@display-hex (lambda (Ak2b57@n) (if (<= '0 Ak2b57@n '9) (display Ak2b57@n Ak2b4a@p) (display (integer->char (+ (char->integer '#\a) (- Ak2b57@n '10))) Ak2b4a@p)))) (begin ((letrec ((Ak2b4f@f (lambda (Ak2b51@ls) (if (not (null? Ak2b51@ls)) (begin (display '"/" Ak2b4a@p) (for-each (lambda (Ak2b53@c) (if (or (char<=? '#\a Ak2b53@c '#\z) (char<=? '#\A Ak2b53@c '#\Z) (char<=? '#\0 Ak2b53@c '#\9) (memv Ak2b53@c '(#\- #\. #\_ #\~))) (display Ak2b53@c Ak2b4a@p) (begin (display '"%" Ak2b4a@p) ((lambda (Ak2b55@n) (begin (Ak2b4e@display-hex (quotient Ak2b55@n '16)) (Ak2b4e@display-hex (remainder Ak2b55@n '16)))) (char->integer Ak2b53@c))))) (string->list (symbol->string (car Ak2b51@ls)))) (Ak2b4f@f (cdr Ak2b51@ls))) (void))))) Ak2b4f@f) Ak2b3f@x) (Ak2b49@extract)))) '#f)) Ak2b46@Ak2b44 Ak2b45@Ak2b42))))) (set! Ak2a9e@file-locator (Ak29a2@Ak2881@make-parameter (lambda (Ak2b59@x) ((lambda (Ak2b5b@str) ((letrec ((Ak2b5d@f (lambda (Ak2b5f@ls Ak2b60@exts Ak2b61@failed-list) (if (null? Ak2b5f@ls) ((lambda () ((lambda (Ak2b6d@Ak2b68 Ak2b6f@Ak2b6a Ak2b71@Ak2b69 Ak2b74@Ak2b67 Ak2b76@make-library-resolution-condition Ak2b78@Ak2b65 Ak2b7a@Ak2b66 Ak2b7c@library-resolution-condition? Ak2b7e@condition-library Ak2b80@condition-files) (begin (set! Ak2b6d@Ak2b68 (make-record-type-descriptor '&library-resolution Ak4e17@Ak4b5e@&condition-rtd 'Ak2b6b '#f '#f '#((immutable library) (immutable files)))) (set! Ak2b6f@Ak2b6a '#f) (set! Ak2b71@Ak2b69 (make-record-constructor-descriptor Ak2b6d@Ak2b68 Ak4e18@Ak4b60@&condition-rcd Ak2b6f@Ak2b6a)) (set! Ak2b74@Ak2b67 (record-predicate Ak2b6d@Ak2b68)) (set! Ak2b76@make-library-resolution-condition (record-constructor Ak2b71@Ak2b69)) (set! Ak2b78@Ak2b65 (record-accessor Ak2b6d@Ak2b68 '0)) (set! Ak2b7a@Ak2b66 (record-accessor Ak2b6d@Ak2b68 '1)) (set! Ak2b7c@library-resolution-condition? (condition-predicate Ak2b6d@Ak2b68)) (set! Ak2b7e@condition-library (condition-accessor Ak2b6d@Ak2b68 Ak2b78@Ak2b65)) (set! Ak2b80@condition-files (condition-accessor Ak2b6d@Ak2b68 Ak2b7a@Ak2b66)) (raise (condition (Ak4e37@Ak4bf8@make-error) (Ak4e59@Ak4c54@make-who-condition 'expander) (Ak4e1d@Ak4bb5@make-message-condition '"cannot locate library in library-path") (Ak2b76@make-library-resolution-condition Ak2b59@x (reverse Ak2b61@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? Ak2b60@exts) (Ak2b5d@f (cdr Ak2b5f@ls) (Ak2a9a@library-extensions) Ak2b61@failed-list) ((lambda (Ak2b81@name) (if (file-exists? Ak2b81@name) Ak2b81@name (Ak2b5d@f Ak2b5f@ls (cdr Ak2b60@exts) (cons Ak2b81@name Ak2b61@failed-list)))) (string-append (car Ak2b5f@ls) Ak2b5b@str (car Ak2b60@exts)))))))) Ak2b5d@f) (Ak2a98@library-path) (Ak2a9a@library-extensions) '())) (Ak2a9c@library-name->file-name Ak2b59@x))) (lambda (Ak2b83@f) (if (procedure? Ak2b83@f) Ak2b83@f (assertion-violation 'file-locator '"not a procedure" Ak2b83@f))))) (set! Ak2aa0@serialize-all (lambda (Ak2b85@serialize Ak2b86@compile) ((lambda (Ak2b8a@library-desc) (begin (set! Ak2b8a@library-desc (lambda (Ak2b8d@x) (list (Ak2a5a@library-id Ak2b8d@x) (Ak2a5e@library-name Ak2b8d@x)))) (for-each (lambda (Ak2b8b@x) (if (Ak2a8e@library-source-file-name Ak2b8b@x) (Ak2b85@serialize (Ak2a8e@library-source-file-name Ak2b8b@x) (list (Ak2a5a@library-id Ak2b8b@x) (Ak2a5e@library-name Ak2b8b@x) (Ak2a62@library-version Ak2b8b@x) (map Ak2b8a@library-desc (Ak2a66@library-imp* Ak2b8b@x)) (map Ak2b8a@library-desc (Ak2a6a@library-vis* Ak2b8b@x)) (map Ak2b8a@library-desc (Ak2a6e@library-inv* Ak2b8b@x)) (Ak2a72@library-subst Ak2b8b@x) (Ak2a76@library-env Ak2b8b@x) (Ak2b86@compile (Ak2a82@library-visit-code Ak2b8b@x)) (Ak2b86@compile (Ak2a86@library-invoke-code Ak2b8b@x)) (Ak2a8a@library-visible? Ak2b8b@x))) (void))) ((Ak2a4c@current-library-collection))))) '#f))) (set! Ak2aa2@current-precompiled-library-loader (Ak29a2@Ak2881@make-parameter (lambda (Ak2b8f@filename Ak2b90@sk) '#f))) (set! Ak2aa4@try-load-from-file (lambda (Ak2b93@filename) ((Ak2aa2@current-precompiled-library-loader) Ak2b93@filename (lambda Ak2bb9 ((lambda (Ak2bba) (if (= Ak2bba '11) (apply (lambda (Ak2b95@id Ak2b96@name Ak2b97@ver Ak2b98@imp* Ak2b99@vis* Ak2b9a@inv* Ak2b9b@exp-subst Ak2b9c@exp-env Ak2b9d@visit-proc Ak2b9e@invoke-proc Ak2b9f@visible?) ((letrec ((Ak2bab@f (lambda (Ak2bad@deps) (if (null? Ak2bad@deps) (begin (Ak2ab8@install-library Ak2b95@id Ak2b96@name Ak2b97@ver Ak2b98@imp* Ak2b99@vis* Ak2b9a@inv* Ak2b9b@exp-subst Ak2b9c@exp-env Ak2b9d@visit-proc Ak2b9e@invoke-proc '#f '#f Ak2b9f@visible? '#f) '#t) ((lambda (Ak2baf@d) ((lambda (Ak2bb1@label Ak2bb2@dname) ((lambda (Ak2bb5@l) (if (and (Ak2a58@library? Ak2bb5@l) (eq? Ak2bb1@label (Ak2a5a@library-id Ak2bb5@l))) (Ak2bab@f (cdr Ak2bad@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" Ak2b96@name Ak2bb2@dname Ak2b93@filename Ak2bb5@l Ak2bb1@label (Ak2a5a@library-id Ak2bb5@l)) '#f))) (Ak2aae@find-library-by-name Ak2bb2@dname))) (car Ak2baf@d) (cadr Ak2baf@d))) (car Ak2bad@deps)))))) Ak2bab@f) (append Ak2b98@imp* Ak2b99@vis* Ak2b9a@inv*))) Ak2bb9) (if (>= Ak2bba '0) (apply (lambda Ak2bb7@others '#f) Ak2bb9) (error 'apply '"invalid arg count")))) (length Ak2bb9)))))) (set! Ak2aa6@library-loader (Ak29a2@Ak2881@make-parameter (lambda (Ak2bbb@x) ((lambda (Ak2bbd@file-name) (if (not Ak2bbd@file-name) (assertion-violation '#f '"cannot file library" Ak2bbb@x) (or (Ak2aa4@try-load-from-file Ak2bbd@file-name) ((Ak2aa8@current-library-expander) (Ak29a1@Ak287f@read-library-source-file Ak2bbd@file-name) Ak2bbd@file-name (lambda (Ak2bbf@name) (if (not (fast-equal? Ak2bbf@name Ak2bbb@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (Ak2bc5@Ak2bc2 Ak2bc6@Ak2bc4) ((lambda (Ak2bc9@e Ak2bca@p) (begin (display '"expected to find library " Ak2bca@p) (write Ak2bbb@x Ak2bca@p) (display '" in file " Ak2bca@p) (display Ak2bbd@file-name Ak2bca@p) (display '", found " Ak2bca@p) (write Ak2bbf@name Ak2bca@p) (display '" instead" Ak2bca@p) (Ak2bc9@e))) Ak2bc6@Ak2bc4 Ak2bc5@Ak2bc2)))) (void))))))) ((Ak2a9e@file-locator) Ak2bbb@x))) (lambda (Ak2bcd@f) (if (procedure? Ak2bcd@f) Ak2bcd@f (assertion-violation 'library-locator '"not a procedure" Ak2bcd@f))))) (set! Ak2aa8@current-library-expander (Ak29a2@Ak2881@make-parameter (lambda (Ak2bcf@x) (assertion-violation 'library-expander '"not initialized")) (lambda (Ak2bd1@f) (if (procedure? Ak2bd1@f) Ak2bd1@f (assertion-violation 'library-expander '"not a procedure" Ak2bd1@f))))) (set! Ak2aaa@external-pending-libraries (Ak29a2@Ak2881@make-parameter '())) (set! Ak2aac@find-external-library (lambda (Ak2bd3@name) (begin (if (member Ak2bd3@name (Ak2aaa@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" Ak2bd3@name) (void)) ((lambda (Ak2bd9@Ak2bd6 Ak2bda@Ak2bd8) ((lambda (Ak2bdd@swap) (dynamic-wind Ak2bdd@swap (lambda () (begin ((Ak2aa6@library-loader) Ak2bd3@name) (or (Ak2a96@find-library-by (lambda (Ak2bdf@x) (fast-equal? (Ak2a5e@library-name Ak2bdf@x) Ak2bd3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" Ak2bd3@name)))) Ak2bdd@swap)) (lambda () ((lambda (Ak2be1@t) (begin (Ak2bd9@Ak2bd6 Ak2bda@Ak2bd8) (set! Ak2bda@Ak2bd8 Ak2be1@t))) (Ak2bd9@Ak2bd6))))) Ak2aaa@external-pending-libraries (cons Ak2bd3@name (Ak2aaa@external-pending-libraries)))))) (set! Ak2aae@find-library-by-name (lambda (Ak2be3@name) (or (Ak2a96@find-library-by (lambda (Ak2be5@x) (fast-equal? (Ak2a5e@library-name Ak2be5@x) Ak2be3@name))) (Ak2aac@find-external-library Ak2be3@name)))) (set! Ak2ab0@library-exists? (lambda (Ak2be7@name) (and (Ak2a96@find-library-by (lambda (Ak2be9@x) (fast-equal? (Ak2a5e@library-name Ak2be9@x) Ak2be7@name))) '#t))) (set! Ak2ab2@find-library-by-spec/die (lambda (Ak2beb@spec) ((lambda (Ak2bed@id) (or (Ak2a96@find-library-by (lambda (Ak2bef@x) (eq? Ak2bed@id (Ak2a5a@library-id Ak2bef@x)))) (assertion-violation '#f '"cannot find library with required spec" Ak2beb@spec))) (car Ak2beb@spec)))) (set! Ak2ab4@label->binding-table (make-eq-hashtable)) (set! Ak2ab6@install-library-record (lambda (Ak2bf1@lib) (begin ((lambda (Ak2bf3@exp-env) (for-each (lambda (Ak2bf5@x) ((lambda (Ak2bf7@label Ak2bf8@binding) ((lambda (Ak2bfb@binding) (begin (if (hashtable-ref Ak2ab4@label->binding-table Ak2bf7@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" Ak2bf7@label (hashtable-ref Ak2ab4@label->binding-table Ak2bf7@label '#f) Ak2bfb@binding) (exit)) (void)) (hashtable-set! Ak2ab4@label->binding-table Ak2bf7@label Ak2bfb@binding))) ((lambda (Ak2bfd@t) (if (memv Ak2bfd@t '(global)) (cons 'global (cons Ak2bf1@lib (cdr Ak2bf8@binding))) (if (memv Ak2bfd@t '(global-macro)) (cons 'global-macro (cons Ak2bf1@lib (cdr Ak2bf8@binding))) (if (memv Ak2bfd@t '(global-macro!)) (cons 'global-macro! (cons Ak2bf1@lib (cdr Ak2bf8@binding))) Ak2bf8@binding)))) (car Ak2bf8@binding)))) (car Ak2bf5@x) (cdr Ak2bf5@x))) Ak2bf3@exp-env)) (Ak2a76@library-env Ak2bf1@lib)) ((Ak2a4c@current-library-collection) Ak2bf1@lib)))) (set! Ak2ab8@install-library (lambda (Ak2bff@id Ak2c00@name Ak2c01@ver Ak2c02@imp* Ak2c03@vis* Ak2c04@inv* Ak2c05@exp-subst Ak2c06@exp-env Ak2c07@visit-proc Ak2c08@invoke-proc Ak2c09@visit-code Ak2c0a@invoke-code Ak2c0b@visible? Ak2c0c@source-file-name) ((lambda (Ak2c1b@imp-lib* Ak2c1c@vis-lib* Ak2c1d@inv-lib*) (begin (if (not (and (symbol? Ak2bff@id) (list? Ak2c00@name) (list? Ak2c01@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" Ak2bff@id Ak2c00@name Ak2c01@ver) (void)) (if (Ak2ab0@library-exists? Ak2c00@name) (assertion-violation 'install-library '"library is already installed" Ak2c00@name) (void)) ((lambda (Ak2c21@lib) (Ak2ab6@install-library-record Ak2c21@lib)) (make-simple-struct 'library '15 (list Ak2bff@id Ak2c00@name Ak2c01@ver Ak2c1b@imp-lib* Ak2c1c@vis-lib* Ak2c1d@inv-lib* Ak2c05@exp-subst Ak2c06@exp-env Ak2c07@visit-proc Ak2c08@invoke-proc Ak2c09@visit-code Ak2c0a@invoke-code Ak2c0b@visible? Ak2c0c@source-file-name))))) (map Ak2ab2@find-library-by-spec/die Ak2c02@imp*) (map Ak2ab2@find-library-by-spec/die Ak2c03@vis*) (map Ak2ab2@find-library-by-spec/die Ak2c04@inv*)))) (set! Ak2aba@imported-label->binding (lambda (Ak2c23@lab) (hashtable-ref Ak2ab4@label->binding-table Ak2c23@lab '#f))) (set! Ak2abc@invoke-library (lambda (Ak2c25@lib) ((lambda (Ak2c27@invoke) (if (procedure? Ak2c27@invoke) (begin (Ak2a80@set-library-invoke-state! Ak2c25@lib (lambda () (assertion-violation 'invoke '"circularity detected" Ak2c25@lib))) (for-each Ak2abc@invoke-library (Ak2a6e@library-inv* Ak2c25@lib)) (Ak2a80@set-library-invoke-state! Ak2c25@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" Ak2c25@lib))) (Ak2c27@invoke) (Ak2a80@set-library-invoke-state! Ak2c25@lib '#t)) (void))) (Ak2a7e@library-invoke-state Ak2c25@lib)))) (set! Ak2abe@visit-library (lambda (Ak2c29@lib) ((lambda (Ak2c2b@visit) (if (procedure? Ak2c2b@visit) (begin (Ak2a7c@set-library-visit-state! Ak2c29@lib (lambda () (assertion-violation 'visit '"circularity detected" Ak2c29@lib))) (for-each Ak2abc@invoke-library (Ak2a6a@library-vis* Ak2c29@lib)) (Ak2a7c@set-library-visit-state! Ak2c29@lib (lambda () (assertion-violation 'invoke '"first visit did not return" Ak2c29@lib))) (Ak2c2b@visit) (Ak2a7c@set-library-visit-state! Ak2c29@lib '#t)) (void))) (Ak2a7a@library-visit-state Ak2c29@lib)))) (set! Ak2ac0@invoke-library-by-spec (lambda (Ak2c2d@spec) (Ak2abc@invoke-library (Ak2ab2@find-library-by-spec/die Ak2c2d@spec)))) (set! Ak2ac2@installed-libraries (lambda Ak2c35 ((lambda (Ak2c36) (if (= Ak2c36 '1) (apply (lambda (Ak2c2f@all?) ((letrec ((Ak2c31@f (lambda (Ak2c33@ls) (if (null? Ak2c33@ls) '() (if (or Ak2c2f@all? (Ak2a8a@library-visible? (car Ak2c33@ls))) (cons (car Ak2c33@ls) (Ak2c31@f (cdr Ak2c33@ls))) (Ak2c31@f (cdr Ak2c33@ls))))))) Ak2c31@f) ((Ak2a4c@current-library-collection)))) Ak2c35) (if (= Ak2c36 '0) (apply (lambda () (Ak2ac2@installed-libraries '#f)) Ak2c35) (error 'apply '"invalid arg count")))) (length Ak2c35)))) (set! Ak2ac4@library-spec (lambda (Ak2c37@x) (begin (if (not (Ak2a58@library? Ak2c37@x)) (assertion-violation 'library-spec '"not a library" Ak2c37@x) (void)) (list (Ak2a5a@library-id Ak2c37@x) (Ak2a5e@library-name Ak2c37@x) (Ak2a62@library-version Ak2c37@x))))) (begin (set! Ak2c72@Ak2ac4@library-spec Ak2ac4@library-spec) (set! Ak2c71@Ak2ac2@installed-libraries Ak2ac2@installed-libraries) (set! Ak2c70@Ak2ac0@invoke-library-by-spec Ak2ac0@invoke-library-by-spec) (set! Ak2c6f@Ak2abe@visit-library Ak2abe@visit-library) (set! Ak2c6e@Ak2abc@invoke-library Ak2abc@invoke-library) (set! Ak2c6d@Ak2aba@imported-label->binding Ak2aba@imported-label->binding) (set! Ak2c6c@Ak2ab8@install-library Ak2ab8@install-library) (set! Ak2c6b@Ak2ab6@install-library-record Ak2ab6@install-library-record) (set! Ak2c6a@Ak2ab4@label->binding-table Ak2ab4@label->binding-table) (set! Ak2c69@Ak2ab2@find-library-by-spec/die Ak2ab2@find-library-by-spec/die) (set! Ak2c68@Ak2ab0@library-exists? Ak2ab0@library-exists?) (set! Ak2c67@Ak2aae@find-library-by-name Ak2aae@find-library-by-name) (set! Ak2c66@Ak2aac@find-external-library Ak2aac@find-external-library) (set! Ak2c65@Ak2aaa@external-pending-libraries Ak2aaa@external-pending-libraries) (set! Ak2c64@Ak2aa8@current-library-expander Ak2aa8@current-library-expander) (set! Ak2c63@Ak2aa6@library-loader Ak2aa6@library-loader) (set! Ak2c62@Ak2aa4@try-load-from-file Ak2aa4@try-load-from-file) (set! Ak2c61@Ak2aa2@current-precompiled-library-loader Ak2aa2@current-precompiled-library-loader) (set! Ak2c60@Ak2aa0@serialize-all Ak2aa0@serialize-all) (set! Ak2c5f@Ak2a9e@file-locator Ak2a9e@file-locator) (set! Ak2c5e@Ak2a9c@library-name->file-name Ak2a9c@library-name->file-name) (set! Ak2c5d@Ak2a9a@library-extensions Ak2a9a@library-extensions) (set! Ak2c5c@Ak2a98@library-path Ak2a98@library-path) (set! Ak2c5b@Ak2a96@find-library-by Ak2a96@find-library-by) (set! Ak2c5a@Ak2a94@find-dependencies Ak2a94@find-dependencies) (set! Ak2c59@Ak2a92@dummy Ak2a92@dummy) (set! Ak2c58@Ak2a90@set-library-source-file-name! Ak2a90@set-library-source-file-name!) (set! Ak2c57@Ak2a8e@library-source-file-name Ak2a8e@library-source-file-name) (set! Ak2c56@Ak2a8c@set-library-visible?! Ak2a8c@set-library-visible?!) (set! Ak2c55@Ak2a8a@library-visible? Ak2a8a@library-visible?) (set! Ak2c54@Ak2a88@set-library-invoke-code! Ak2a88@set-library-invoke-code!) (set! Ak2c53@Ak2a86@library-invoke-code Ak2a86@library-invoke-code) (set! Ak2c52@Ak2a84@set-library-visit-code! Ak2a84@set-library-visit-code!) (set! Ak2c51@Ak2a82@library-visit-code Ak2a82@library-visit-code) (set! Ak2c50@Ak2a80@set-library-invoke-state! Ak2a80@set-library-invoke-state!) (set! Ak2c4f@Ak2a7e@library-invoke-state Ak2a7e@library-invoke-state) (set! Ak2c4e@Ak2a7c@set-library-visit-state! Ak2a7c@set-library-visit-state!) (set! Ak2c4d@Ak2a7a@library-visit-state Ak2a7a@library-visit-state) (set! Ak2c4c@Ak2a78@set-library-env! Ak2a78@set-library-env!) (set! Ak2c4b@Ak2a76@library-env Ak2a76@library-env) (set! Ak2c4a@Ak2a74@set-library-subst! Ak2a74@set-library-subst!) (set! Ak2c49@Ak2a72@library-subst Ak2a72@library-subst) (set! Ak2c48@Ak2a70@set-library-inv*! Ak2a70@set-library-inv*!) (set! Ak2c47@Ak2a6e@library-inv* Ak2a6e@library-inv*) (set! Ak2c46@Ak2a6c@set-library-vis*! Ak2a6c@set-library-vis*!) (set! Ak2c45@Ak2a6a@library-vis* Ak2a6a@library-vis*) (set! Ak2c44@Ak2a68@set-library-imp*! Ak2a68@set-library-imp*!) (set! Ak2c43@Ak2a66@library-imp* Ak2a66@library-imp*) (set! Ak2c42@Ak2a64@set-library-version! Ak2a64@set-library-version!) (set! Ak2c41@Ak2a62@library-version Ak2a62@library-version) (set! Ak2c40@Ak2a60@set-library-name! Ak2a60@set-library-name!) (set! Ak2c3f@Ak2a5e@library-name Ak2a5e@library-name) (set! Ak2c3e@Ak2a5c@set-library-id! Ak2a5c@set-library-id!) (set! Ak2c3d@Ak2a5a@library-id Ak2a5a@library-id) (set! Ak2c3c@Ak2a58@library? Ak2a58@library?) (set! Ak2c3b@Ak2a4e@rp Ak2a4e@rp) (set! Ak2c3a@Ak2a4c@current-library-collection Ak2a4c@current-library-collection) (set! Ak2c39@Ak2a4a@make-collection Ak2a4a@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (Ak2c76@build-global-define Ak2ce7@build-lambda Ak2ce9@build-case-lambda Ak2ceb@build-let Ak2d19@build-sequence Ak2d1b@build-void Ak2d1d@build-letrec Ak2d1f@build-letrec* Ak2d21@build-library-letrec* Ak2d23@build-receive) (begin (set! Ak2c76@build-global-define (lambda (Ak2d24@x) (Ak2d1b@build-void))) (set! Ak2ce7@build-lambda (lambda (Ak2d26@ae Ak2d27@vars Ak2d28@exp) (list 'lambda Ak2d27@vars Ak2d28@exp))) (set! Ak2ce9@build-case-lambda (lambda (Ak2d2c@ae Ak2d2d@vars* Ak2d2e@exp*) ((lambda (Ak2d33@build-error Ak2d35@build-pred Ak2d37@build-apply Ak2d39@expand-case-lambda) (begin (set! Ak2d33@build-error (lambda (Ak2d6a@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! Ak2d35@build-pred (lambda (Ak2d52@ae Ak2d53@n Ak2d54@vars) (call-with-values (lambda () ((letrec ((Ak2d5c@f (lambda (Ak2d5e@vars Ak2d5f@count) (if (pair? Ak2d5e@vars) (Ak2d5c@f (cdr Ak2d5e@vars) (+ Ak2d5f@count '1)) (if (null? Ak2d5e@vars) (values Ak2d5f@count '=) (values Ak2d5f@count '>=)))))) Ak2d5c@f) Ak2d54@vars '0)) (lambda (Ak2d62@Ak2d59 Ak2d63@Ak2d5b) ((lambda (Ak2d66@pred Ak2d67@count) (list (list 'primitive Ak2d66@pred) Ak2d53@n (list 'quote Ak2d67@count))) Ak2d63@Ak2d5b Ak2d62@Ak2d59))))) (set! Ak2d37@build-apply (lambda (Ak2d4a@ae Ak2d4b@g Ak2d4c@vars Ak2d4d@exp) (list '(primitive apply) (Ak2ce7@build-lambda Ak2d4a@ae Ak2d4c@vars Ak2d4d@exp) Ak2d4b@g))) (set! Ak2d39@expand-case-lambda (lambda (Ak2d3a@ae Ak2d3b@vars Ak2d3c@exp*) ((lambda (Ak2d40@g Ak2d41@n) (list 'lambda Ak2d40@g (Ak2ceb@build-let Ak2d3a@ae (list Ak2d41@n) (list (list '(primitive length) Ak2d40@g)) ((letrec ((Ak2d44@f (lambda (Ak2d46@vars* Ak2d47@exp*) (if (null? Ak2d46@vars*) (Ak2d33@build-error Ak2d3a@ae) (list 'if (Ak2d35@build-pred Ak2d3a@ae Ak2d41@n (car Ak2d46@vars*)) (Ak2d37@build-apply Ak2d3a@ae Ak2d40@g (car Ak2d46@vars*) (car Ak2d47@exp*)) (Ak2d44@f (cdr Ak2d46@vars*) (cdr Ak2d47@exp*))))))) Ak2d44@f) Ak2d2d@vars* Ak2d3c@exp*)))) (gensym) (gensym)))) (if (= (length Ak2d2e@exp*) '1) (Ak2ce7@build-lambda Ak2d2c@ae (car Ak2d2d@vars*) (car Ak2d2e@exp*)) (Ak2d39@expand-case-lambda Ak2d2c@ae Ak2d2d@vars* Ak2d2e@exp*)))) '#f '#f '#f '#f))) (set! Ak2ceb@build-let (lambda (Ak2d6c@ae Ak2d6d@lhs* Ak2d6e@rhs* Ak2d6f@body) (cons (Ak2ce7@build-lambda Ak2d6c@ae Ak2d6d@lhs* Ak2d6f@body) Ak2d6e@rhs*))) (set! Ak2d19@build-sequence (lambda (Ak2d74@ae Ak2d75@exps) ((letrec ((Ak2d78@loop (lambda (Ak2d7a@exps) (if (null? (cdr Ak2d7a@exps)) (car Ak2d7a@exps) (if (equal? (car Ak2d7a@exps) (Ak2d1b@build-void)) (Ak2d78@loop (cdr Ak2d7a@exps)) (cons 'begin Ak2d7a@exps)))))) Ak2d78@loop) Ak2d75@exps))) (set! Ak2d1b@build-void (lambda () '((primitive void)))) (set! Ak2d1d@build-letrec (lambda (Ak2d7c@ae Ak2d7d@vars Ak2d7e@val-exps Ak2d7f@body-exp) (if (null? Ak2d7d@vars) Ak2d7f@body-exp (list 'letrec (map list Ak2d7d@vars Ak2d7e@val-exps) Ak2d7f@body-exp)))) (set! Ak2d1f@build-letrec* (lambda (Ak2d84@ae Ak2d85@vars Ak2d86@val-exps Ak2d87@body-exp) (if (null? Ak2d85@vars) Ak2d87@body-exp (Ak2ceb@build-let Ak2d84@ae Ak2d85@vars (map (lambda (Ak2d8c@x) (list 'quote '#f)) Ak2d85@vars) (Ak2d19@build-sequence Ak2d84@ae (append (map (lambda (Ak2d8e@lhs Ak2d8f@rhs) (list 'set! Ak2d8e@lhs Ak2d8f@rhs)) Ak2d85@vars Ak2d86@val-exps) (list Ak2d87@body-exp))))))) (set! Ak2d21@build-library-letrec* (lambda (Ak2d92@ae Ak2d93@name Ak2d94@vars Ak2d95@locs Ak2d96@val-exps Ak2d97@body-exp) (list 'library-letrec* Ak2d93@name (map list Ak2d94@vars Ak2d95@locs Ak2d96@val-exps) Ak2d97@body-exp))) (set! Ak2d23@build-receive (lambda (Ak2d9e@ae Ak2d9f@vars Ak2da0@producer Ak2da1@body*) (begin (display '"************** in ") (cons 'receive (cons Ak2d9f@vars (cons Ak2da0@producer Ak2da1@body*)))))) (begin (set! Ak2daf@Ak2d23@build-receive Ak2d23@build-receive) (set! Ak2dae@Ak2d21@build-library-letrec* Ak2d21@build-library-letrec*) (set! Ak2dad@Ak2d1f@build-letrec* Ak2d1f@build-letrec*) (set! Ak2dac@Ak2d1d@build-letrec Ak2d1d@build-letrec) (set! Ak2dab@Ak2d1b@build-void Ak2d1b@build-void) (set! Ak2daa@Ak2d19@build-sequence Ak2d19@build-sequence) (set! Ak2da9@Ak2ceb@build-let Ak2ceb@build-let) (set! Ak2da8@Ak2ce9@build-case-lambda Ak2ce9@build-case-lambda) (set! Ak2da7@Ak2ce7@build-lambda Ak2ce7@build-lambda) (set! Ak2da6@Ak2c76@build-global-define Ak2c76@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (Ak2dbe@file-options-macro Ak2dc0@set-cons Ak2dc2@set-union Ak2dc7@top-mark* Ak2dc9@top-marked? Ak2dcb@gen-lexical Ak2dcd@gen-global Ak2dcf@gen-label Ak2dd1@gen-top-level-label Ak2dd3@gen-define-label+loc Ak2dd5@gen-define-label Ak2ddf@rib? Ak2de1@rib-sym* Ak2de3@set-rib-sym*! Ak2de5@rib-mark** Ak2de7@set-rib-mark**! Ak2de9@rib-label* Ak2deb@set-rib-label*! Ak2ded@rib-sealed/freq Ak2def@set-rib-sealed/freq! Ak2df1@rib-cache Ak2df3@set-rib-cache! Ak2df5@dummy Ak2df7@make-empty-rib Ak2df9@extend-rib! Ak2dfb@extend-rib/nc! Ak2dfd@make-rib-map Ak2dff@seal-rib! Ak2e01@unseal-rib! Ak2e03@make-full-rib Ak2e05@rp Ak2e0f@stx? Ak2e11@stx-expr Ak2e13@set-stx-expr! Ak2e15@stx-mark* Ak2e17@set-stx-mark*! Ak2e19@stx-subst* Ak2e1b@set-stx-subst*! Ak2e1d@stx-ae* Ak2e1f@set-stx-ae*! Ak2e21@dummy Ak2e23@datum->stx Ak2e25@gen-mark Ak2e27@anti-mark Ak2e29@anti-mark? Ak2e2b@mkstx Ak2e2d@add-mark Ak2e2f@add-subst Ak2e31@syntax-kind? Ak2e33@syntax-vector->list Ak2e35@syntax-pair? Ak2e37@syntax-vector? Ak2e39@syntax-null? Ak2e3b@syntax-list? Ak2e3d@syntax-car Ak2e3f@syntax-cdr Ak2e41@syntax->list Ak2e43@id? Ak2e45@id->sym Ak2e47@bound-id=? Ak2e49@free-id=? Ak2e4b@valid-bound-ids? Ak2e4d@distinct-bound-ids? Ak2e4f@bound-id-member? Ak2e51@self-evaluating? Ak2e53@strip-annotations Ak2e55@strip Ak2e57@stx->datum Ak2e59@id->label Ak2e5b@label->binding Ak2e5d@make-binding Ak2e5f@binding-type Ak2e61@binding-value Ak2e63@raise-unbound-error Ak2e65@syntax-type Ak2e73@sanitize-binding Ak2e75@make-variable-transformer Ak2e77@variable-transformer? Ak2e79@variable-transformer-procedure Ak2e7b@make-eval-transformer Ak2fcc@parse-define Ak2fce@parse-define-syntax Ak2fd0@scheme-stx-hashtable Ak2fd2@scheme-stx Ak2fd4@lexical-var Ak2fd6@lexical-mutable? Ak2fd8@set-lexical-mutable! Ak2fda@add-lexical Ak2fdc@add-lexicals Ak2fde@letrec-helper Ak2fe0@letrec-transformer Ak2fe2@letrec*-transformer Ak2fe4@fluid-let-syntax-transformer Ak2fe6@type-descriptor-transformer Ak2fe8@record-type-descriptor-transformer Ak2fea@record-constructor-descriptor-transformer Ak2fec@when-macro Ak2fee@unless-macro Ak2ff0@if-transformer Ak2ff2@and-transformer Ak2ff4@or-transformer Ak2ff6@case-macro Ak2ff8@quote-transformer Ak2ffa@case-lambda-transformer Ak2ffc@lambda-transformer Ak2ffe@bless Ak3000@with-syntax-macro Ak3002@invalid-fmls-error Ak3004@let-macro Ak3006@let-values-macro Ak3008@let*-values-macro Ak300a@trace-lambda-macro Ak300c@trace-define-macro Ak300e@trace-define-syntax-macro Ak3010@trace-let/rec-syntax Ak3012@trace-let-syntax-macro Ak3014@trace-letrec-syntax-macro Ak3016@guard-macro Ak3018@define-enumeration-macro Ak301a@time-macro Ak301c@delay-macro Ak301e@assert-macro Ak3020@endianness-macro Ak3022@identifier-syntax-macro Ak3024@do-macro Ak3026@let*-macro Ak3028@or-macro Ak302a@and-macro Ak302c@cond-macro Ak302e@do-include Ak3030@include-macro Ak3032@include-into-macro Ak3034@syntax-rules-macro Ak3036@quasiquote-macro Ak3038@quasisyntax-macro Ak303a@define-struct-macro Ak303c@define-record-type-macro Ak303e@define-condition-type-macro Ak3040@incorrect-usage-macro Ak3042@parameterize-macro Ak3044@foreign-call-transformer Ak3046@convert-pattern Ak3048@syntax-dispatch Ak304a@ellipsis? Ak304c@underscore? Ak304e@verify-literals Ak3050@syntax-case-transformer Ak3052@ellipsis-map Ak3054@syntax-transformer Ak3056@core-macro-transformer Ak3058@symbol-macro Ak305a@macro-transformer Ak305c@local-macro-transformer Ak305e@do-macro-call Ak3060@chi-macro Ak3062@chi-local-macro Ak3064@chi-global-macro Ak3066@chi-expr* Ak3068@chi-application Ak306a@chi-expr Ak306c@chi-set! Ak306e@verify-formals Ak3070@chi-lambda-clause Ak3072@chi-lambda-clause* Ak3074@chi-defun Ak3076@chi-rhs Ak3078@expand-interaction-rhs*/init* Ak307a@chi-rhs* Ak307c@find-bound=? Ak307e@find-dups Ak3080@chi-internal Ak3082@parse-module Ak308c@module-interface? Ak308e@module-interface-first-mark Ak3090@set-module-interface-first-mark! Ak3092@module-interface-exp-id-vec Ak3094@set-module-interface-exp-id-vec! Ak3096@module-interface-exp-lab-vec Ak3098@set-module-interface-exp-lab-vec! Ak309a@dummy Ak309c@module-interface-exp-id* Ak309e@chi-internal-module Ak30a0@chi-body* Ak30a2@expand-transformer Ak30a4@parse-exports Ak30a6@parse-library-name Ak30a8@parse-library Ak30aa@parse-import-spec* Ak30ac@make-top-rib Ak30ae@make-collector Ak30b0@inv-collector Ak30b2@vis-collector Ak30b4@imp-collector Ak30b6@chi-library-internal Ak30b8@chi-interaction-expr Ak30ba@library-body-expander Ak30bc@core-library-expander Ak30be@parse-top-level-program Ak30c0@top-level-expander Ak30c2@rp Ak30cc@env? Ak30ce@env-names Ak30d0@set-env-names! Ak30d2@env-labels Ak30d4@set-env-labels! Ak30d6@env-itc Ak30d8@set-env-itc! Ak30da@dummy Ak30dc@rp Ak30e6@interaction-env? Ak30e8@interaction-env-rib Ak30ea@set-interaction-env-rib! Ak30ec@interaction-env-r Ak30ee@set-interaction-env-r! Ak30f0@interaction-env-locs Ak30f2@set-interaction-env-locs! Ak30f4@dummy Ak30f6@interaction-environment-symbols Ak30f8@environment-bindings Ak30fa@parse-binding Ak30fc@environment? Ak30fe@environment-symbols Ak3100@environment Ak3102@null-environment Ak3104@scheme-report-environment Ak3106@expand Ak3108@eval Ak310a@library-expander Ak310c@boot-library-expand Ak310e@rev-map-append Ak3110@build-exports Ak3112@make-export-subst Ak3114@make-export-env/macros Ak3116@generate-temporaries Ak3118@free-identifier=? Ak311a@bound-identifier=? Ak311c@make-source-condition Ak311e@extract-position-condition Ak3120@expression-position Ak3122@assertion-error Ak3124@syntax-error Ak3126@syntax-violation* Ak3128@syntax-violation Ak312a@identifier? Ak312c@datum->syntax Ak312e@syntax->datum Ak3130@compile-r6rs-top-level Ak3132@pre-compile-r6rs-top-level Ak3134@interaction-environment Ak3136@top-level-context) (begin (set! Ak2dbe@file-options-macro (lambda (Ak3137@x) ((lambda (Ak313a@valid-option?) (begin (set! Ak313a@valid-option? (lambda (Ak3143@x) (and (Ak2e43@id? Ak3143@x) (memq (Ak2e45@id->sym Ak3143@x) '(no-fail no-create no-truncate))))) ((lambda (Ak313b@t) ((lambda (Ak313d@ls/false) (if (and Ak313d@ls/false (apply (lambda (Ak313f@opt*) (for-all Ak313a@valid-option? Ak313f@opt*)) Ak313d@ls/false)) (apply (lambda (Ak3141@opt*) (Ak2ffe@bless (list 'make-file-options (list 'quote Ak3141@opt*)))) Ak313d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak313b@t))) (Ak3048@syntax-dispatch Ak313b@t '(_ . each-any)))) Ak3137@x))) '#f))) (set! Ak2dc0@set-cons (lambda (Ak3145@x Ak3146@ls) (if (memq Ak3145@x Ak3146@ls) Ak3146@ls (cons Ak3145@x Ak3146@ls)))) (set! Ak2dc2@set-union (lambda (Ak3149@ls1 Ak314a@ls2) (if (null? Ak3149@ls1) Ak314a@ls2 (if (memq (car Ak3149@ls1) Ak314a@ls2) (Ak2dc2@set-union (cdr Ak3149@ls1) Ak314a@ls2) (cons (car Ak3149@ls1) (Ak2dc2@set-union (cdr Ak3149@ls1) Ak314a@ls2)))))) (set! Ak2dc7@top-mark* '(top)) (set! Ak2dc9@top-marked? (lambda (Ak314d@m*) (memq 'top Ak314d@m*))) (set! Ak2dcb@gen-lexical (lambda (Ak314f@sym) (if (symbol? Ak314f@sym) (gensym Ak314f@sym) (if (Ak2e0f@stx? Ak314f@sym) (Ak2dcb@gen-lexical (Ak2e45@id->sym Ak314f@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" Ak314f@sym))))) (set! Ak2dcd@gen-global (lambda (Ak3151@x) (Ak2dcb@gen-lexical Ak3151@x))) (set! Ak2dcf@gen-label (lambda (Ak3153@_) (gensym))) (set! Ak2dd1@gen-top-level-label (lambda (Ak3155@id Ak3156@rib) ((lambda (Ak315a@find) (begin (set! Ak315a@find (lambda (Ak3165@sym Ak3166@mark* Ak3167@sym* Ak3168@mark** Ak3169@label*) (and (pair? Ak3167@sym*) (if (and (eq? Ak3165@sym (car Ak3167@sym*)) (same-marks? Ak3166@mark* (car Ak3168@mark**))) (car Ak3169@label*) (Ak315a@find Ak3165@sym Ak3166@mark* (cdr Ak3167@sym*) (cdr Ak3168@mark**) (cdr Ak3169@label*)))))) ((lambda (Ak315b@sym Ak315c@mark*) ((lambda (Ak315f@sym*) ((lambda (Ak3161@t) (if Ak3161@t ((lambda (Ak3163@label) (if (Ak2c6d@Ak2aba@imported-label->binding Ak3163@label) (gensym) Ak3163@label)) Ak3161@t) (gensym))) (and (memq Ak315b@sym (Ak2de1@rib-sym* Ak3156@rib)) (Ak315a@find Ak315b@sym Ak315c@mark* Ak315f@sym* (Ak2de5@rib-mark** Ak3156@rib) (Ak2de9@rib-label* Ak3156@rib))))) (Ak2de1@rib-sym* Ak3156@rib))) (Ak2e45@id->sym Ak3155@id) (Ak2e15@stx-mark* Ak3155@id)))) '#f))) (set! Ak2dd3@gen-define-label+loc (lambda (Ak316f@id Ak3170@rib) ((lambda (Ak3173@t) (if Ak3173@t ((lambda (Ak3175@env) ((lambda (Ak3177@label Ak3178@locs) (values Ak3177@label ((lambda (Ak317b@t) (if Ak317b@t (cdr Ak317b@t) ((lambda (Ak317d@loc) (begin (Ak30f2@set-interaction-env-locs! Ak3175@env (cons (cons Ak3177@label Ak317d@loc) Ak3178@locs)) Ak317d@loc)) (Ak2dcb@gen-lexical Ak316f@id)))) (assq Ak3177@label Ak3178@locs)))) (Ak2dd1@gen-top-level-label Ak316f@id Ak3170@rib) (Ak30f0@interaction-env-locs Ak3175@env))) Ak3173@t) (values (gensym) (Ak2dcb@gen-lexical Ak316f@id)))) (Ak3136@top-level-context)))) (set! Ak2dd5@gen-define-label (lambda (Ak317f@id Ak3180@rib) (if (Ak3136@top-level-context) (Ak2dd1@gen-top-level-label Ak317f@id Ak3180@rib) (gensym)))) (set! Ak2ddf@rib? (lambda (Ak3183@x) (and (simple-struct? Ak3183@x) (eq? (simple-struct-name Ak3183@x) 'rib)))) (set! Ak2de1@rib-sym* (lambda (Ak3185@x) (simple-struct-ref Ak3185@x '0))) (set! Ak2de3@set-rib-sym*! (lambda (Ak3187@x Ak3188@val) (simple-struct-set! Ak3187@x '0 Ak3188@val))) (set! Ak2de5@rib-mark** (lambda (Ak318b@x) (simple-struct-ref Ak318b@x '1))) (set! Ak2de7@set-rib-mark**! (lambda (Ak318d@x Ak318e@val) (simple-struct-set! Ak318d@x '1 Ak318e@val))) (set! Ak2de9@rib-label* (lambda (Ak3191@x) (simple-struct-ref Ak3191@x '2))) (set! Ak2deb@set-rib-label*! (lambda (Ak3193@x Ak3194@val) (simple-struct-set! Ak3193@x '2 Ak3194@val))) (set! Ak2ded@rib-sealed/freq (lambda (Ak3197@x) (simple-struct-ref Ak3197@x '3))) (set! Ak2def@set-rib-sealed/freq! (lambda (Ak3199@x Ak319a@val) (simple-struct-set! Ak3199@x '3 Ak319a@val))) (set! Ak2df1@rib-cache (lambda (Ak319d@x) (simple-struct-ref Ak319d@x '4))) (set! Ak2df3@set-rib-cache! (lambda (Ak319f@x Ak31a0@val) (simple-struct-set! Ak319f@x '4 Ak31a0@val))) (set! Ak2df5@dummy '3) (set! Ak2df7@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! Ak2df9@extend-rib! (lambda (Ak31a3@rib Ak31a4@id Ak31a5@label) ((lambda (Ak31aa@find) (begin (set! Ak31aa@find (lambda (Ak31b7@sym Ak31b8@mark* Ak31b9@sym* Ak31ba@mark** Ak31bb@label*) (and (pair? Ak31b9@sym*) (if (and (eq? Ak31b7@sym (car Ak31b9@sym*)) (same-marks? Ak31b8@mark* (car Ak31ba@mark**))) Ak31bb@label* (Ak31aa@find Ak31b7@sym Ak31b8@mark* (cdr Ak31b9@sym*) (cdr Ak31ba@mark**) (cdr Ak31bb@label*)))))) (begin (if (Ak2ded@rib-sealed/freq Ak31a3@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" Ak31a3@rib) (void)) ((lambda (Ak31ab@sym Ak31ac@mark*) ((lambda (Ak31af@sym*) ((lambda (Ak31b1@t) (if Ak31b1@t ((lambda (Ak31b3@p) (if (not (eq? Ak31a5@label (car Ak31b3@p))) (if (Ak3136@top-level-context) (set-car! Ak31b3@p Ak31a5@label) (Ak3128@syntax-violation '#f '"multiple definitions of identifier" Ak31a4@id)) (void))) Ak31b1@t) (begin (if (Ak2df1@rib-cache Ak31a3@rib) (hashtable-update! (Ak2df1@rib-cache Ak31a3@rib) Ak31ab@sym (lambda (Ak31b5@e) (cons (cons Ak31ac@mark* Ak31a5@label) Ak31b5@e)) '()) (void)) (Ak2de3@set-rib-sym*! Ak31a3@rib (cons Ak31ab@sym Ak31af@sym*)) (Ak2de7@set-rib-mark**! Ak31a3@rib (cons Ak31ac@mark* (Ak2de5@rib-mark** Ak31a3@rib))) (Ak2deb@set-rib-label*! Ak31a3@rib (cons Ak31a5@label (Ak2de9@rib-label* Ak31a3@rib)))))) (and (memq Ak31ab@sym (Ak2de1@rib-sym* Ak31a3@rib)) (Ak31aa@find Ak31ab@sym Ak31ac@mark* Ak31af@sym* (Ak2de5@rib-mark** Ak31a3@rib) (Ak2de9@rib-label* Ak31a3@rib))))) (Ak2de1@rib-sym* Ak31a3@rib))) (Ak2e45@id->sym Ak31a4@id) (Ak2e15@stx-mark* Ak31a4@id))))) '#f))) (set! Ak2dfb@extend-rib/nc! (lambda (Ak31c1@rib Ak31c2@id Ak31c3@label) ((lambda (Ak31c7@sym Ak31c8@mark*) ((lambda (Ak31cb@sym*) (begin (if (Ak2df1@rib-cache Ak31c1@rib) (hashtable-update! (Ak2df1@rib-cache Ak31c1@rib) Ak31c7@sym (lambda (Ak31cd@e) (cons (cons Ak31c8@mark* Ak31c3@label) Ak31cd@e)) '()) (void)) (Ak2de3@set-rib-sym*! Ak31c1@rib (cons Ak31c7@sym Ak31cb@sym*)) (Ak2de7@set-rib-mark**! Ak31c1@rib (cons Ak31c8@mark* (Ak2de5@rib-mark** Ak31c1@rib))) (Ak2deb@set-rib-label*! Ak31c1@rib (cons Ak31c3@label (Ak2de9@rib-label* Ak31c1@rib))))) (Ak2de1@rib-sym* Ak31c1@rib))) (Ak2e45@id->sym Ak31c2@id) (Ak2e15@stx-mark* Ak31c2@id)))) (set! Ak2dfd@make-rib-map (lambda (Ak31cf@sym*) ((lambda (Ak31d1@ht) ((letrec ((Ak31d3@f (lambda (Ak31d5@i Ak31d6@sym*) (if (null? Ak31d6@sym*) Ak31d1@ht (begin (hashtable-update! Ak31d1@ht (car Ak31d6@sym*) (lambda (Ak31d9@x) (cons Ak31d5@i Ak31d9@x)) '()) (Ak31d3@f (+ Ak31d5@i '1) (cdr Ak31d6@sym*))))))) Ak31d3@f) '0 Ak31cf@sym*)) (make-eq-hashtable)))) (set! Ak2dff@seal-rib! (lambda (Ak31db@rib) ((lambda (Ak31dd@sym*) (if (not (null? Ak31dd@sym*)) (begin (Ak2de3@set-rib-sym*! Ak31db@rib (list->vector Ak31dd@sym*)) (Ak2de7@set-rib-mark**! Ak31db@rib (list->vector (Ak2de5@rib-mark** Ak31db@rib))) (Ak2deb@set-rib-label*! Ak31db@rib (list->vector (Ak2de9@rib-label* Ak31db@rib))) (Ak2def@set-rib-sealed/freq! Ak31db@rib (Ak2dfd@make-rib-map Ak31dd@sym*))) (void))) (Ak2de1@rib-sym* Ak31db@rib)))) (set! Ak2e01@unseal-rib! (lambda (Ak31df@rib) (if (Ak2ded@rib-sealed/freq Ak31df@rib) (begin (Ak2def@set-rib-sealed/freq! Ak31df@rib '#f) (Ak2de3@set-rib-sym*! Ak31df@rib (vector->list (Ak2de1@rib-sym* Ak31df@rib))) (Ak2de7@set-rib-mark**! Ak31df@rib (vector->list (Ak2de5@rib-mark** Ak31df@rib))) (Ak2deb@set-rib-label*! Ak31df@rib (vector->list (Ak2de9@rib-label* Ak31df@rib)))) (void)))) (set! Ak2e03@make-full-rib (lambda (Ak31e1@id* Ak31e2@label*) ((lambda (Ak31e5@r) (begin (Ak2dff@seal-rib! Ak31e5@r) Ak31e5@r)) (make-simple-struct 'rib '6 (list (map Ak2e45@id->sym Ak31e1@id*) (map Ak2e15@stx-mark* Ak31e1@id*) Ak31e2@label* '#f '#f))))) (set! Ak2e05@rp (Ak299f@Ak287b@make-record-printer 'stx (lambda (Ak31e7@x Ak31e8@p Ak31e9@wr) (begin (display '"#<syntax " Ak31e8@p) (write (Ak2e57@stx->datum Ak31e7@x) Ak31e8@p) ((lambda (Ak31ed@expr) (if (Ak2997@Ak286b@annotation? Ak31ed@expr) ((lambda (Ak31ef@src) (if (pair? Ak31ef@src) (begin (display '" [" Ak31e8@p) (display (cdr Ak31ef@src) Ak31e8@p) (display '" of " Ak31e8@p) (display (car Ak31ef@src) Ak31e8@p) (display '"]" Ak31e8@p)) (void))) (Ak2998@Ak286d@annotation-source Ak31ed@expr)) (void))) (Ak2e11@stx-expr Ak31e7@x)) (display '">" Ak31e8@p))))) (set! Ak2e0f@stx? (lambda (Ak31f1@x) (and (simple-struct? Ak31f1@x) (eq? (simple-struct-name Ak31f1@x) 'stx)))) (set! Ak2e11@stx-expr (lambda (Ak31f3@x) (simple-struct-ref Ak31f3@x '0))) (set! Ak2e13@set-stx-expr! (lambda (Ak31f5@x Ak31f6@val) (simple-struct-set! Ak31f5@x '0 Ak31f6@val))) (set! Ak2e15@stx-mark* (lambda (Ak31f9@x) (simple-struct-ref Ak31f9@x '1))) (set! Ak2e17@set-stx-mark*! (lambda (Ak31fb@x Ak31fc@val) (simple-struct-set! Ak31fb@x '1 Ak31fc@val))) (set! Ak2e19@stx-subst* (lambda (Ak31ff@x) (simple-struct-ref Ak31ff@x '2))) (set! Ak2e1b@set-stx-subst*! (lambda (Ak3201@x Ak3202@val) (simple-struct-set! Ak3201@x '2 Ak3202@val))) (set! Ak2e1d@stx-ae* (lambda (Ak3205@x) (simple-struct-ref Ak3205@x '3))) (set! Ak2e1f@set-stx-ae*! (lambda (Ak3207@x Ak3208@val) (simple-struct-set! Ak3207@x '3 Ak3208@val))) (set! Ak2e21@dummy '3) (set! Ak2e23@datum->stx (lambda (Ak320b@id Ak320c@datum) (make-simple-struct 'stx '5 (list Ak320c@datum (Ak2e15@stx-mark* Ak320b@id) (Ak2e19@stx-subst* Ak320b@id) (Ak2e1d@stx-ae* Ak320b@id))))) (set! Ak2e25@gen-mark (lambda () (string '#\m))) (set! Ak2e27@anti-mark '#f) (set! Ak2e29@anti-mark? not) (set! Ak2e2b@mkstx (lambda (Ak320f@e Ak3210@m* Ak3211@s* Ak3212@ae*) (if (and (Ak2e0f@stx? Ak320f@e) (not (Ak2dc9@top-marked? Ak3210@m*))) (call-with-values (lambda () (join-wraps Ak3210@m* Ak3211@s* Ak3212@ae* Ak320f@e)) (lambda (Ak321d@Ak3218 Ak321e@Ak321a Ak321f@Ak321c) ((lambda (Ak3223@ae* Ak3224@s* Ak3225@m*) (make-simple-struct 'stx '5 (list (Ak2e11@stx-expr Ak320f@e) Ak3225@m* Ak3224@s* Ak3223@ae*))) Ak321f@Ak321c Ak321e@Ak321a Ak321d@Ak3218))) (make-simple-struct 'stx '5 (list Ak320f@e Ak3210@m* Ak3211@s* Ak3212@ae*))))) (set! Ak2e2d@add-mark (lambda (Ak3229@m Ak322a@e Ak322b@ae) (Ak2e2b@mkstx Ak322a@e (list Ak3229@m) '(shift) (list Ak322b@ae)))) (set! Ak2e2f@add-subst (lambda (Ak322f@subst Ak3230@e) (Ak2e2b@mkstx Ak3230@e '() (list Ak322f@subst) '()))) (set! Ak2e31@syntax-kind? (lambda (Ak3233@x Ak3234@p?) (if (Ak2e0f@stx? Ak3233@x) (Ak2e31@syntax-kind? (Ak2e11@stx-expr Ak3233@x) Ak3234@p?) (if (Ak2997@Ak286b@annotation? Ak3233@x) (Ak2e31@syntax-kind? (Ak2999@Ak286f@annotation-expression Ak3233@x) Ak3234@p?) (Ak3234@p? Ak3233@x))))) (set! Ak2e33@syntax-vector->list (lambda (Ak3237@x) (if (Ak2e0f@stx? Ak3237@x) ((lambda (Ak3239@ls Ak323a@m* Ak323b@s* Ak323c@ae*) (map (lambda (Ak3241@x) (Ak2e2b@mkstx Ak3241@x Ak323a@m* Ak323b@s* Ak323c@ae*)) Ak3239@ls)) (Ak2e33@syntax-vector->list (Ak2e11@stx-expr Ak3237@x)) (Ak2e15@stx-mark* Ak3237@x) (Ak2e19@stx-subst* Ak3237@x) (Ak2e1d@stx-ae* Ak3237@x)) (if (Ak2997@Ak286b@annotation? Ak3237@x) (Ak2e33@syntax-vector->list (Ak2999@Ak286f@annotation-expression Ak3237@x)) (if (vector? Ak3237@x) (vector->list Ak3237@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" Ak3237@x)))))) (set! Ak2e35@syntax-pair? (lambda (Ak3243@x) (Ak2e31@syntax-kind? Ak3243@x pair?))) (set! Ak2e37@syntax-vector? (lambda (Ak3245@x) (Ak2e31@syntax-kind? Ak3245@x vector?))) (set! Ak2e39@syntax-null? (lambda (Ak3247@x) (Ak2e31@syntax-kind? Ak3247@x null?))) (set! Ak2e3b@syntax-list? (lambda (Ak3249@x) (or (Ak2e39@syntax-null? Ak3249@x) (and (Ak2e35@syntax-pair? Ak3249@x) (Ak2e3b@syntax-list? (Ak2e3f@syntax-cdr Ak3249@x)))))) (set! Ak2e3d@syntax-car (lambda (Ak324b@x) (if (Ak2e0f@stx? Ak324b@x) (Ak2e2b@mkstx (Ak2e3d@syntax-car (Ak2e11@stx-expr Ak324b@x)) (Ak2e15@stx-mark* Ak324b@x) (Ak2e19@stx-subst* Ak324b@x) (Ak2e1d@stx-ae* Ak324b@x)) (if (Ak2997@Ak286b@annotation? Ak324b@x) (Ak2e3d@syntax-car (Ak2999@Ak286f@annotation-expression Ak324b@x)) (if (pair? Ak324b@x) (car Ak324b@x) (assertion-violation 'syntax-car '"BUG: not a pair" Ak324b@x)))))) (set! Ak2e3f@syntax-cdr (lambda (Ak324d@x) (if (Ak2e0f@stx? Ak324d@x) (Ak2e2b@mkstx (Ak2e3f@syntax-cdr (Ak2e11@stx-expr Ak324d@x)) (Ak2e15@stx-mark* Ak324d@x) (Ak2e19@stx-subst* Ak324d@x) (Ak2e1d@stx-ae* Ak324d@x)) (if (Ak2997@Ak286b@annotation? Ak324d@x) (Ak2e3f@syntax-cdr (Ak2999@Ak286f@annotation-expression Ak324d@x)) (if (pair? Ak324d@x) (cdr Ak324d@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" Ak324d@x)))))) (set! Ak2e41@syntax->list (lambda (Ak324f@x) (if (Ak2e35@syntax-pair? Ak324f@x) (cons (Ak2e3d@syntax-car Ak324f@x) (Ak2e41@syntax->list (Ak2e3f@syntax-cdr Ak324f@x))) (if (Ak2e39@syntax-null? Ak324f@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" Ak324f@x))))) (set! Ak2e43@id? (lambda (Ak3251@x) (and (Ak2e0f@stx? Ak3251@x) (symbol? (Ak2e11@stx-expr Ak3251@x))))) (set! Ak2e45@id->sym (lambda (Ak3253@x) (Ak2e11@stx-expr Ak3253@x))) (set! Ak2e47@bound-id=? (lambda (Ak3255@x Ak3256@y) (and (eq? (Ak2e45@id->sym Ak3255@x) (Ak2e45@id->sym Ak3256@y)) (same-marks? (Ak2e15@stx-mark* Ak3255@x) (Ak2e15@stx-mark* Ak3256@y))))) (set! Ak2e49@free-id=? (lambda (Ak3259@i Ak325a@j) ((lambda (Ak325d@t0 Ak325e@t1) (if (or Ak325d@t0 Ak325e@t1) (eq? Ak325d@t0 Ak325e@t1) (eq? (Ak2e45@id->sym Ak3259@i) (Ak2e45@id->sym Ak325a@j)))) (id->real-label Ak3259@i) (id->real-label Ak325a@j)))) (set! Ak2e4b@valid-bound-ids? (lambda (Ak3261@id*) (and (for-all Ak2e43@id? Ak3261@id*) (Ak2e4d@distinct-bound-ids? Ak3261@id*)))) (set! Ak2e4d@distinct-bound-ids? (lambda (Ak3263@id*) (or (null? Ak3263@id*) (and (not (Ak2e4f@bound-id-member? (car Ak3263@id*) (cdr Ak3263@id*))) (Ak2e4d@distinct-bound-ids? (cdr Ak3263@id*)))))) (set! Ak2e4f@bound-id-member? (lambda (Ak3265@id Ak3266@id*) (and (pair? Ak3266@id*) (or (Ak2e47@bound-id=? Ak3265@id (car Ak3266@id*)) (Ak2e4f@bound-id-member? Ak3265@id (cdr Ak3266@id*)))))) (set! Ak2e51@self-evaluating? (lambda (Ak3269@x) (or (number? Ak3269@x) (string? Ak3269@x) (char? Ak3269@x) (boolean? Ak3269@x) (regexp? Ak3269@x) (bytevector? Ak3269@x)))) (set! Ak2e53@strip-annotations (lambda (Ak326b@x) (if (pair? Ak326b@x) (cons (Ak2e53@strip-annotations (car Ak326b@x)) (Ak2e53@strip-annotations (cdr Ak326b@x))) (if (vector? Ak326b@x) (vector-map Ak2e53@strip-annotations Ak326b@x) (if (Ak2997@Ak286b@annotation? Ak326b@x) (Ak2996@Ak2869@annotation-stripped Ak326b@x) Ak326b@x))))) (set! Ak2e55@strip (lambda (Ak326d@x Ak326e@m*) (if (Ak2dc9@top-marked? Ak326e@m*) (if (or (Ak2997@Ak286b@annotation? Ak326d@x) (and (pair? Ak326d@x) (Ak2997@Ak286b@annotation? (car Ak326d@x))) (and (vector? Ak326d@x) (> (vector-length Ak326d@x) '0) (Ak2997@Ak286b@annotation? (vector-ref Ak326d@x '0)))) (Ak2e53@strip-annotations Ak326d@x) Ak326d@x) ((letrec ((Ak3271@f (lambda (Ak3273@x) (if (Ak2e0f@stx? Ak3273@x) (Ak2e55@strip (Ak2e11@stx-expr Ak3273@x) (Ak2e15@stx-mark* Ak3273@x)) (if (Ak2997@Ak286b@annotation? Ak3273@x) (Ak2996@Ak2869@annotation-stripped Ak3273@x) (if (pair? Ak3273@x) ((lambda (Ak3275@a Ak3276@d) (if (and (eq? Ak3275@a (car Ak3273@x)) (eq? Ak3276@d (cdr Ak3273@x))) Ak3273@x (cons Ak3275@a Ak3276@d))) (Ak3271@f (car Ak3273@x)) (Ak3271@f (cdr Ak3273@x))) (if (vector? Ak3273@x) ((lambda (Ak3279@old) ((lambda (Ak327b@new) (if (for-all eq? Ak3279@old Ak327b@new) Ak3273@x (list->vector Ak327b@new))) (map Ak3271@f Ak3279@old))) (vector->list Ak3273@x)) Ak3273@x))))))) Ak3271@f) Ak326d@x)))) (set! Ak2e57@stx->datum (lambda (Ak327d@x) (Ak2e55@strip Ak327d@x '()))) (set! Ak2e59@id->label (lambda (Ak327f@id) (or (id->real-label Ak327f@id) ((lambda (Ak3281@t) (if Ak3281@t ((lambda (Ak3283@env) ((lambda (Ak3285@rib) (call-with-values (lambda () (Ak2dd3@gen-define-label+loc Ak327f@id Ak3285@rib)) (lambda (Ak328b@Ak3288 Ak328c@Ak328a) ((lambda (Ak328f@loc_ Ak3290@lab) (begin (Ak2df9@extend-rib! Ak3285@rib Ak327f@id Ak3290@lab) Ak3290@lab)) Ak328c@Ak328a Ak328b@Ak3288)))) (Ak30e8@interaction-env-rib Ak3283@env))) Ak3281@t) '#f)) (Ak3136@top-level-context))))) (set! Ak2e5b@label->binding (lambda (Ak3293@x Ak3294@r) ((lambda (Ak3297@t) (if Ak3297@t ((lambda (Ak3299@b) (if (and (pair? Ak3299@b) (eq? (car Ak3299@b) '$core-rtd)) (cons '$rtd (map Ak2ffe@bless (cdr Ak3299@b))) (if (and (pair? Ak3299@b) (eq? (car Ak3299@b) 'global-rtd)) ((lambda (Ak329b@lib Ak329c@loc) (cons '$rtd (symbol-value Ak329c@loc))) (cadr Ak3299@b) (cddr Ak3299@b)) Ak3299@b))) Ak3297@t) ((lambda (Ak329f@t) (if Ak329f@t (cdr Ak329f@t) ((lambda (Ak32a1@t) (if Ak32a1@t ((lambda (Ak32a3@env) ((lambda (Ak32a5@t) (if Ak32a5@t ((lambda (Ak32a7@p) (cons* 'lexical (cdr Ak32a7@p) '#f)) Ak32a5@t) '(displaced-lexical . #f))) (assq Ak3293@x (Ak30f0@interaction-env-locs Ak32a3@env)))) Ak32a1@t) '(displaced-lexical . #f))) (Ak3136@top-level-context)))) (assq Ak3293@x Ak3294@r)))) (Ak2c6d@Ak2aba@imported-label->binding Ak3293@x)))) (set! Ak2e5d@make-binding cons) (set! Ak2e5f@binding-type car) (set! Ak2e61@binding-value cdr) (set! Ak2e63@raise-unbound-error (lambda (Ak32a9@id) (Ak3126@syntax-violation* '#f '"unbound identifier" Ak32a9@id (Ak4e87@Ak4ccd@make-undefined-violation)))) (set! Ak2e65@syntax-type (lambda (Ak32ab@e Ak32ac@r) (if (Ak2e43@id? Ak32ab@e) ((lambda (Ak32af@id) ((lambda (Ak32b1@label) ((lambda (Ak32b3@b) ((lambda (Ak32b5@type) ((lambda () (begin (if (not Ak32b1@label) (Ak2e63@raise-unbound-error Ak32af@id) (void)) ((lambda (Ak32b7@t) (if (memv Ak32b7@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values Ak32b5@type (Ak2e61@binding-value Ak32b3@b) Ak32af@id) (values 'other '#f '#f))) Ak32b5@type))))) (Ak2e5f@binding-type Ak32b3@b))) (Ak2e5b@label->binding Ak32b1@label Ak32ac@r))) (Ak2e59@id->label Ak32af@id))) Ak32ab@e) (if (Ak2e35@syntax-pair? Ak32ab@e) ((lambda (Ak32b9@id) (if (Ak2e43@id? Ak32b9@id) ((lambda (Ak32bb@label) ((lambda (Ak32bd@b) ((lambda (Ak32bf@type) ((lambda () (begin (if (not Ak32bb@label) (Ak2e63@raise-unbound-error Ak32b9@id) (void)) ((lambda (Ak32c1@t) (if (memv Ak32c1@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values Ak32bf@type (Ak2e61@binding-value Ak32bd@b) Ak32b9@id) (values 'call '#f '#f))) Ak32bf@type))))) (Ak2e5f@binding-type Ak32bd@b))) (Ak2e5b@label->binding Ak32bb@label Ak32ac@r))) (Ak2e59@id->label Ak32b9@id)) (values 'call '#f '#f))) (Ak2e3d@syntax-car Ak32ab@e)) ((lambda (Ak32c3@d) (if (Ak2e51@self-evaluating? Ak32c3@d) (values 'constant Ak32c3@d '#f) (values 'other '#f '#f))) (Ak2e57@stx->datum Ak32ab@e)))))) (set! Ak2e73@sanitize-binding (lambda (Ak32c5@x Ak32c6@src) (if (procedure? Ak32c5@x) (cons* 'local-macro Ak32c5@x Ak32c6@src) (if (and (pair? Ak32c5@x) (eq? (car Ak32c5@x) 'macro!) (procedure? (cdr Ak32c5@x))) (cons* 'local-macro! (cdr Ak32c5@x) Ak32c6@src) (if (and (pair? Ak32c5@x) (eq? (car Ak32c5@x) '$rtd)) Ak32c5@x (assertion-violation 'expand '"invalid transformer" Ak32c5@x)))))) (set! Ak2e75@make-variable-transformer (lambda (Ak32c9@x) (if (procedure? Ak32c9@x) (cons 'macro! Ak32c9@x) (assertion-violation 'make-variable-transformer '"not a procedure" Ak32c9@x)))) (set! Ak2e77@variable-transformer? (lambda (Ak32cb@x) (and (pair? Ak32cb@x) (eq? (car Ak32cb@x) 'macro!) (procedure? (cdr Ak32cb@x))))) (set! Ak2e79@variable-transformer-procedure (lambda (Ak32cd@x) (if (Ak2e77@variable-transformer? Ak32cd@x) (cdr Ak32cd@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" Ak32cd@x)))) (set! Ak2e7b@make-eval-transformer (lambda (Ak32cf@x) (Ak2e73@sanitize-binding (eval-core (Ak29f8@Ak29b0@expanded->core Ak32cf@x)) Ak32cf@x))) (set! Ak2fcc@parse-define (lambda (Ak32d1@x) ((lambda (Ak32d3@t) ((lambda (Ak32d5@ls/false) (if (and Ak32d5@ls/false (apply (lambda (Ak32d7@id Ak32d8@fmls Ak32d9@b Ak32da@b*) (Ak2e43@id? Ak32d7@id)) Ak32d5@ls/false)) (apply (lambda (Ak32df@id Ak32e0@fmls Ak32e1@b Ak32e2@b*) (begin (Ak306e@verify-formals Ak32e0@fmls Ak32d1@x) (values Ak32df@id (cons 'defun (cons Ak32e0@fmls (cons Ak32e1@b Ak32e2@b*)))))) Ak32d5@ls/false) ((lambda (Ak32e7@t) ((lambda (Ak32e9@ls/false) (if (and Ak32e9@ls/false (apply (lambda (Ak32eb@id Ak32ec@val) (Ak2e43@id? Ak32eb@id)) Ak32e9@ls/false)) (apply (lambda (Ak32ef@id Ak32f0@val) (values Ak32ef@id (cons 'expr Ak32f0@val))) Ak32e9@ls/false) ((lambda (Ak32f3@t) ((lambda (Ak32f5@ls/false) (if (and Ak32f5@ls/false (apply (lambda (Ak32f7@id) (Ak2e43@id? Ak32f7@id)) Ak32f5@ls/false)) (apply (lambda (Ak32f9@id) (values Ak32f9@id (cons 'expr (Ak2ffe@bless '(void))))) Ak32f5@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak32f3@t))) (Ak3048@syntax-dispatch Ak32f3@t '(_ any)))) Ak32e7@t))) (Ak3048@syntax-dispatch Ak32e7@t '(_ any any)))) Ak32d3@t))) (Ak3048@syntax-dispatch Ak32d3@t '(_ (any . any) any . each-any)))) Ak32d1@x))) (set! Ak2fce@parse-define-syntax (lambda (Ak32fb@x) ((lambda (Ak32fd@t) ((lambda (Ak32ff@ls/false) (if (and Ak32ff@ls/false (apply (lambda (Ak3301@id Ak3302@val) (Ak2e43@id? Ak3301@id)) Ak32ff@ls/false)) (apply (lambda (Ak3305@id Ak3306@val) (values Ak3305@id Ak3306@val)) Ak32ff@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak32fd@t))) (Ak3048@syntax-dispatch Ak32fd@t '(_ any any)))) Ak32fb@x))) (set! Ak2fd0@scheme-stx-hashtable (make-eq-hashtable)) (set! Ak2fd2@scheme-stx (lambda (Ak3309@sym) (or (hashtable-ref Ak2fd0@scheme-stx-hashtable Ak3309@sym '#f) ((lambda (Ak330b@subst) ((lambda (Ak330d@stx) ((lambda (Ak330f@stx) ((lambda () (begin (hashtable-set! Ak2fd0@scheme-stx-hashtable Ak3309@sym Ak330f@stx) Ak330f@stx)))) ((lambda (Ak3311@t) (if Ak3311@t ((lambda (Ak3313@x) ((lambda (Ak3315@name Ak3316@label) (Ak2e2f@add-subst (make-simple-struct 'rib '6 (list (list Ak3315@name) (list Ak2dc7@top-mark*) (list Ak3316@label) '#f '#f)) Ak330d@stx)) (car Ak3313@x) (cdr Ak3313@x))) Ak3311@t) Ak330d@stx)) (assq Ak3309@sym Ak330b@subst)))) (make-simple-struct 'stx '5 (list Ak3309@sym Ak2dc7@top-mark* '() '())))) (Ak2c49@Ak2a72@library-subst (Ak2c67@Ak2aae@find-library-by-name '(psyntax system $all))))))) (set! Ak2fd4@lexical-var car) (set! Ak2fd6@lexical-mutable? cdr) (set! Ak2fd8@set-lexical-mutable! set-cdr!) (set! Ak2fda@add-lexical (lambda (Ak3319@lab Ak331a@lex Ak331b@r) (cons (cons* Ak3319@lab 'lexical Ak331a@lex '#f) Ak331b@r))) (set! Ak2fdc@add-lexicals (lambda (Ak331f@lab* Ak3320@lex* Ak3321@r) (if (null? Ak331f@lab*) Ak3321@r (Ak2fdc@add-lexicals (cdr Ak331f@lab*) (cdr Ak3320@lex*) (Ak2fda@add-lexical (car Ak331f@lab*) (car Ak3320@lex*) Ak3321@r))))) (set! Ak2fde@letrec-helper (lambda (Ak3325@e Ak3326@r Ak3327@mr Ak3328@build) ((lambda (Ak332d@t) ((lambda (Ak332f@ls/false) (if Ak332f@ls/false (apply (lambda (Ak3331@lhs* Ak3332@rhs* Ak3333@b Ak3334@b*) (if (not (Ak2e4b@valid-bound-ids? Ak3331@lhs*)) (Ak3002@invalid-fmls-error Ak3325@e Ak3331@lhs*) ((lambda (Ak3339@lex* Ak333a@lab*) ((lambda (Ak333d@rib Ak333e@r) ((lambda (Ak3341@body Ak3342@rhs*) (Ak3328@build '#f Ak3339@lex* Ak3342@rhs* Ak3341@body)) (Ak3080@chi-internal (Ak2e2f@add-subst Ak333d@rib (cons Ak3333@b Ak3334@b*)) Ak333e@r Ak3327@mr) (Ak3066@chi-expr* (map (lambda (Ak3345@x) (Ak2e2f@add-subst Ak333d@rib Ak3345@x)) Ak3332@rhs*) Ak333e@r Ak3327@mr))) (Ak2e03@make-full-rib Ak3331@lhs* Ak333a@lab*) (Ak2fdc@add-lexicals Ak333a@lab* Ak3339@lex* Ak3326@r))) (map Ak2dcb@gen-lexical Ak3331@lhs*) (map Ak2dcf@gen-label Ak3331@lhs*)))) Ak332f@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak332d@t))) (Ak3048@syntax-dispatch Ak332d@t '(_ #(each (any any)) any . each-any)))) Ak3325@e))) (set! Ak2fe0@letrec-transformer (lambda (Ak3347@e Ak3348@r Ak3349@mr) (Ak2fde@letrec-helper Ak3347@e Ak3348@r Ak3349@mr Ak2dac@Ak2d1d@build-letrec))) (set! Ak2fe2@letrec*-transformer (lambda (Ak334d@e Ak334e@r Ak334f@mr) (Ak2fde@letrec-helper Ak334d@e Ak334e@r Ak334f@mr Ak2dad@Ak2d1f@build-letrec*))) (set! Ak2fe4@fluid-let-syntax-transformer (lambda (Ak3353@e Ak3354@r Ak3355@mr) ((lambda (Ak335a@lookup) (begin (set! Ak335a@lookup (lambda (Ak336d@x) (or (Ak2e59@id->label Ak336d@x) (Ak3128@syntax-violation '#f '"unbound identifier" Ak3353@e Ak336d@x)))) ((lambda (Ak335b@t) ((lambda (Ak335d@ls/false) (if Ak335d@ls/false (apply (lambda (Ak335f@lhs* Ak3360@rhs* Ak3361@b Ak3362@b*) (if (not (Ak2e4b@valid-bound-ids? Ak335f@lhs*)) (Ak3002@invalid-fmls-error Ak3353@e Ak335f@lhs*) ((lambda (Ak3367@lab* Ak3368@rhs*) (Ak3080@chi-internal (cons Ak3361@b Ak3362@b*) (append (map cons Ak3367@lab* Ak3368@rhs*) Ak3354@r) (append (map cons Ak3367@lab* Ak3368@rhs*) Ak3355@mr))) (map Ak335a@lookup Ak335f@lhs*) (map (lambda (Ak336b@x) (Ak2e7b@make-eval-transformer (Ak30a2@expand-transformer Ak336b@x Ak3355@mr))) Ak3360@rhs*)))) Ak335d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak335b@t))) (Ak3048@syntax-dispatch Ak335b@t '(_ #(each (any any)) any . each-any)))) Ak3353@e))) '#f))) (set! Ak2fe6@type-descriptor-transformer (lambda (Ak336f@e Ak3370@r Ak3371@mr) ((lambda (Ak3375@t) ((lambda (Ak3377@ls/false) (if (and Ak3377@ls/false (apply (lambda (Ak3379@id) (Ak2e43@id? Ak3379@id)) Ak3377@ls/false)) (apply (lambda (Ak337b@id) ((lambda (Ak337d@lab) ((lambda (Ak337f@b) ((lambda (Ak3381@type) ((lambda () (begin (if (not Ak337d@lab) (Ak2e63@raise-unbound-error Ak337b@id) (void)) (if (not (and (eq? Ak3381@type '$rtd) (not (list? (Ak2e61@binding-value Ak337f@b))))) (Ak3128@syntax-violation '#f '"not a record type" Ak336f@e) (void)) (list 'quote (Ak2e61@binding-value Ak337f@b)))))) (Ak2e5f@binding-type Ak337f@b))) (Ak2e5b@label->binding Ak337d@lab Ak3370@r))) (Ak2e59@id->label Ak337b@id))) Ak3377@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3375@t))) (Ak3048@syntax-dispatch Ak3375@t '(_ any)))) Ak336f@e))) (set! Ak2fe8@record-type-descriptor-transformer (lambda (Ak3383@e Ak3384@r Ak3385@mr) ((lambda (Ak3389@t) ((lambda (Ak338b@ls/false) (if (and Ak338b@ls/false (apply (lambda (Ak338d@id) (Ak2e43@id? Ak338d@id)) Ak338b@ls/false)) (apply (lambda (Ak338f@id) ((lambda (Ak3391@lab) ((lambda (Ak3393@b) ((lambda (Ak3395@type) ((lambda () (begin (if (not Ak3391@lab) (Ak2e63@raise-unbound-error Ak338f@id) (void)) (if (not (and (eq? Ak3395@type '$rtd) (list? (Ak2e61@binding-value Ak3393@b)))) (Ak3128@syntax-violation '#f '"not a record type" Ak3383@e) (void)) (Ak306a@chi-expr (car (Ak2e61@binding-value Ak3393@b)) Ak3384@r Ak3385@mr))))) (Ak2e5f@binding-type Ak3393@b))) (Ak2e5b@label->binding Ak3391@lab Ak3384@r))) (Ak2e59@id->label Ak338f@id))) Ak338b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3389@t))) (Ak3048@syntax-dispatch Ak3389@t '(_ any)))) Ak3383@e))) (set! Ak2fea@record-constructor-descriptor-transformer (lambda (Ak3397@e Ak3398@r Ak3399@mr) ((lambda (Ak339d@t) ((lambda (Ak339f@ls/false) (if (and Ak339f@ls/false (apply (lambda (Ak33a1@id) (Ak2e43@id? Ak33a1@id)) Ak339f@ls/false)) (apply (lambda (Ak33a3@id) ((lambda (Ak33a5@lab) ((lambda (Ak33a7@b) ((lambda (Ak33a9@type) ((lambda () (begin (if (not Ak33a5@lab) (Ak2e63@raise-unbound-error Ak33a3@id) (void)) (if (not (and (eq? Ak33a9@type '$rtd) (list? (Ak2e61@binding-value Ak33a7@b)))) (Ak3128@syntax-violation '#f '"invalid type" Ak3397@e) (void)) (Ak306a@chi-expr (cadr (Ak2e61@binding-value Ak33a7@b)) Ak3398@r Ak3399@mr))))) (Ak2e5f@binding-type Ak33a7@b))) (Ak2e5b@label->binding Ak33a5@lab Ak3398@r))) (Ak2e59@id->label Ak33a3@id))) Ak339f@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak339d@t))) (Ak3048@syntax-dispatch Ak339d@t '(_ any)))) Ak3397@e))) (set! Ak2fec@when-macro (lambda (Ak33ab@e) ((lambda (Ak33ad@t) ((lambda (Ak33af@ls/false) (if Ak33af@ls/false (apply (lambda (Ak33b1@test Ak33b2@e Ak33b3@e*) (Ak2ffe@bless (list 'if Ak33b1@test (cons 'begin (cons Ak33b2@e Ak33b3@e*))))) Ak33af@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33ad@t))) (Ak3048@syntax-dispatch Ak33ad@t '(_ any any . each-any)))) Ak33ab@e))) (set! Ak2fee@unless-macro (lambda (Ak33b7@e) ((lambda (Ak33b9@t) ((lambda (Ak33bb@ls/false) (if Ak33bb@ls/false (apply (lambda (Ak33bd@test Ak33be@e Ak33bf@e*) (Ak2ffe@bless (list 'if (list 'not Ak33bd@test) (cons 'begin (cons Ak33be@e Ak33bf@e*))))) Ak33bb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33b9@t))) (Ak3048@syntax-dispatch Ak33b9@t '(_ any any . each-any)))) Ak33b7@e))) (set! Ak2ff0@if-transformer (lambda (Ak33c3@e Ak33c4@r Ak33c5@mr) ((lambda (Ak33c9@t) ((lambda (Ak33cb@ls/false) (if Ak33cb@ls/false (apply (lambda (Ak33cd@e0 Ak33ce@e1 Ak33cf@e2) (list 'if (Ak306a@chi-expr Ak33cd@e0 Ak33c4@r Ak33c5@mr) (Ak306a@chi-expr Ak33ce@e1 Ak33c4@r Ak33c5@mr) (Ak306a@chi-expr Ak33cf@e2 Ak33c4@r Ak33c5@mr))) Ak33cb@ls/false) ((lambda (Ak33d3@t) ((lambda (Ak33d5@ls/false) (if Ak33d5@ls/false (apply (lambda (Ak33d7@e0 Ak33d8@e1) (list 'if (Ak306a@chi-expr Ak33d7@e0 Ak33c4@r Ak33c5@mr) (Ak306a@chi-expr Ak33d8@e1 Ak33c4@r Ak33c5@mr) (Ak2dab@Ak2d1b@build-void))) Ak33d5@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33d3@t))) (Ak3048@syntax-dispatch Ak33d3@t '(_ any any)))) Ak33c9@t))) (Ak3048@syntax-dispatch Ak33c9@t '(_ any any any)))) Ak33c3@e))) (set! Ak2ff2@and-transformer (lambda (Ak33db@e Ak33dc@r Ak33dd@mr) ((lambda (Ak33e1@t) ((lambda (Ak33e3@ls/false) (if Ak33e3@ls/false (apply (lambda (Ak33e5@e*) (cons 'and (Ak3066@chi-expr* Ak33e5@e* Ak33dc@r Ak33dd@mr))) Ak33e3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33e1@t))) (Ak3048@syntax-dispatch Ak33e1@t '(_ . each-any)))) Ak33db@e))) (set! Ak2ff4@or-transformer (lambda (Ak33e7@e Ak33e8@r Ak33e9@mr) ((lambda (Ak33ed@t) ((lambda (Ak33ef@ls/false) (if Ak33ef@ls/false (apply (lambda (Ak33f1@e*) (cons 'or (Ak3066@chi-expr* Ak33f1@e* Ak33e8@r Ak33e9@mr))) Ak33ef@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33ed@t))) (Ak3048@syntax-dispatch Ak33ed@t '(_ . each-any)))) Ak33e7@e))) (set! Ak2ff6@case-macro (lambda (Ak33f3@e) ((lambda (Ak33f6@build-last Ak33f8@build-one) (begin (set! Ak33f6@build-last (lambda (Ak341d@cls) ((lambda (Ak341f@t) ((lambda (Ak3421@ls/false) (if Ak3421@ls/false (apply (lambda (Ak3423@e Ak3424@e*) (cons 'begin (cons Ak3423@e Ak3424@e*))) Ak3421@ls/false) ((lambda (Ak3427@t) ((lambda (Ak3429@ls/false) (if Ak3429@ls/false (apply (lambda () (Ak33f8@build-one Ak341d@cls '(if #f #f))) Ak3429@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3427@t))) (Ak3048@syntax-dispatch Ak3427@t '_))) Ak341f@t))) (Ak3048@syntax-dispatch Ak341f@t '(#(scheme-id else) any . each-any)))) Ak341d@cls))) (set! Ak33f8@build-one (lambda (Ak340f@cls Ak3410@k) ((lambda (Ak3413@t) ((lambda (Ak3415@ls/false) (if Ak3415@ls/false (apply (lambda (Ak3417@d* Ak3418@e Ak3419@e*) (list 'if (list 'memv 't (list 'quote Ak3417@d*)) (cons 'begin (cons Ak3418@e Ak3419@e*)) Ak3410@k)) Ak3415@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3413@t))) (Ak3048@syntax-dispatch Ak3413@t '(each-any any . each-any)))) Ak340f@cls))) ((lambda (Ak33f9@t) ((lambda (Ak33fb@ls/false) (if Ak33fb@ls/false (apply (lambda (Ak33fd@expr) (Ak2ffe@bless (cons 'let (cons (list (list 't Ak33fd@expr)) '((if #f #f)))))) Ak33fb@ls/false) ((lambda (Ak33ff@t) ((lambda (Ak3401@ls/false) (if Ak3401@ls/false (apply (lambda (Ak3403@expr Ak3404@cls Ak3405@cls*) (Ak2ffe@bless (list 'let (list (list 't Ak3403@expr)) ((letrec ((Ak3409@f (lambda (Ak340b@cls Ak340c@cls*) (if (null? Ak340c@cls*) (Ak33f6@build-last Ak340b@cls) (Ak33f8@build-one Ak340b@cls (Ak3409@f (car Ak340c@cls*) (cdr Ak340c@cls*))))))) Ak3409@f) Ak3404@cls Ak3405@cls*)))) Ak3401@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak33ff@t))) (Ak3048@syntax-dispatch Ak33ff@t '(_ any any . each-any)))) Ak33f9@t))) (Ak3048@syntax-dispatch Ak33f9@t '(_ any)))) Ak33f3@e))) '#f '#f))) (set! Ak2ff8@quote-transformer (lambda (Ak342b@e Ak342c@r Ak342d@mr) ((lambda (Ak3431@t) ((lambda (Ak3433@ls/false) (if Ak3433@ls/false (apply (lambda (Ak3435@datum) (list 'quote (Ak2e57@stx->datum Ak3435@datum))) Ak3433@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3431@t))) (Ak3048@syntax-dispatch Ak3431@t '(_ any)))) Ak342b@e))) (set! Ak2ffa@case-lambda-transformer (lambda (Ak3437@e Ak3438@r Ak3439@mr) ((lambda (Ak343d@t) ((lambda (Ak343f@ls/false) (if Ak343f@ls/false (apply (lambda (Ak3441@fmls* Ak3442@b* Ak3443@b**) (call-with-values (lambda () (Ak3072@chi-lambda-clause* Ak3437@e Ak3441@fmls* (map cons Ak3442@b* Ak3443@b**) Ak3438@r Ak3439@mr)) (lambda (Ak344b@Ak3448 Ak344c@Ak344a) ((lambda (Ak344f@body* Ak3450@fmls*) (Ak2da8@Ak2ce9@build-case-lambda '#f Ak3450@fmls* Ak344f@body*)) Ak344c@Ak344a Ak344b@Ak3448)))) Ak343f@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak343d@t))) (Ak3048@syntax-dispatch Ak343d@t '(_ . #(each (any any . each-any)))))) Ak3437@e))) (set! Ak2ffc@lambda-transformer (lambda (Ak3453@e Ak3454@r Ak3455@mr) ((lambda (Ak3459@t) ((lambda (Ak345b@ls/false) (if Ak345b@ls/false (apply (lambda (Ak345d@fmls Ak345e@b Ak345f@b*) (call-with-values (lambda () (Ak3070@chi-lambda-clause Ak3453@e Ak345d@fmls (cons Ak345e@b Ak345f@b*) Ak3454@r Ak3455@mr)) (lambda (Ak3467@Ak3464 Ak3468@Ak3466) ((lambda (Ak346b@body Ak346c@fmls) (Ak2da7@Ak2ce7@build-lambda '#f Ak346c@fmls Ak346b@body)) Ak3468@Ak3466 Ak3467@Ak3464)))) Ak345b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3459@t))) (Ak3048@syntax-dispatch Ak3459@t '(_ any any . each-any)))) Ak3453@e))) (set! Ak2ffe@bless (lambda (Ak346f@x) (Ak2e2b@mkstx ((letrec ((Ak3471@f (lambda (Ak3473@x) (if (Ak2e0f@stx? Ak3473@x) Ak3473@x (if (pair? Ak3473@x) (cons (Ak3471@f (car Ak3473@x)) (Ak3471@f (cdr Ak3473@x))) (if (symbol? Ak3473@x) (Ak2fd2@scheme-stx Ak3473@x) (if (vector? Ak3473@x) (vector-map Ak3471@f Ak3473@x) Ak3473@x))))))) Ak3471@f) Ak346f@x) '() '() '()))) (set! Ak3000@with-syntax-macro (lambda (Ak3475@e) ((lambda (Ak3477@t) ((lambda (Ak3479@ls/false) (if Ak3479@ls/false (apply (lambda (Ak347b@pat* Ak347c@expr* Ak347d@b Ak347e@b*) ((lambda (Ak3483@idn*) (begin (Ak306e@verify-formals (map car Ak3483@idn*) Ak3475@e) ((lambda (Ak3485@t*) (Ak2ffe@bless (list 'let (map list Ak3485@t* Ak347c@expr*) ((letrec ((Ak3487@f (lambda (Ak3489@pat* Ak348a@t*) (if (null? Ak3489@pat*) (cons 'begin (cons '#f (cons Ak347d@b Ak347e@b*))) (list 'syntax-case (car Ak348a@t*) '() (list (car Ak3489@pat*) (Ak3487@f (cdr Ak3489@pat*) (cdr Ak348a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car Ak3489@pat*)) (car Ak348a@t*)))))))) Ak3487@f) Ak347b@pat* Ak3485@t*)))) (Ak3116@generate-temporaries Ak347c@expr*)))) ((letrec ((Ak348d@f (lambda (Ak348f@pat*) (if (null? Ak348f@pat*) '() (call-with-values (lambda () (Ak3046@convert-pattern (car Ak348f@pat*) '())) (lambda (Ak3495@Ak3492 Ak3496@Ak3494) ((lambda (Ak3499@idn* Ak349a@pat) (append Ak3499@idn* (Ak348d@f (cdr Ak348f@pat*)))) Ak3496@Ak3494 Ak3495@Ak3492))))))) Ak348d@f) Ak347b@pat*))) Ak3479@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3477@t))) (Ak3048@syntax-dispatch Ak3477@t '(_ #(each (any any)) any . each-any)))) Ak3475@e))) (set! Ak3002@invalid-fmls-error (lambda (Ak349d@stx Ak349e@fmls) ((lambda (Ak34a1@t) ((lambda (Ak34a3@ls/false) (if Ak34a3@ls/false (apply (lambda (Ak34a5@id* Ak34a6@last) ((letrec ((Ak34a9@f (lambda (Ak34ab@id*) (if (null? Ak34ab@id*) (values) (if (not (Ak2e43@id? (car Ak34ab@id*))) (Ak3128@syntax-violation '#f '"not an identifier" Ak349d@stx (car Ak34ab@id*)) (begin (Ak34a9@f (cdr Ak34ab@id*)) (if (Ak2e4f@bound-id-member? (car Ak34ab@id*) (cdr Ak34ab@id*)) (Ak3128@syntax-violation '#f '"duplicate binding" Ak349d@stx (car Ak34ab@id*)) (void)))))))) Ak34a9@f) (if (Ak2e43@id? Ak34a6@last) (cons Ak34a6@last Ak34a5@id*) (if (Ak2e39@syntax-null? Ak34a6@last) Ak34a5@id* (Ak3128@syntax-violation '#f '"not an identifier" Ak349d@stx Ak34a6@last))))) Ak34a3@ls/false) ((lambda (Ak34ad@t) ((lambda (Ak34af@ls/false) (if Ak34af@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"malformed binding form" Ak349d@stx Ak349e@fmls)) Ak34af@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak34ad@t))) (Ak3048@syntax-dispatch Ak34ad@t '_))) Ak34a1@t))) (Ak3048@syntax-dispatch Ak34a1@t '#(each+ any () any)))) Ak349e@fmls))) (set! Ak3004@let-macro (lambda (Ak34b1@stx) ((lambda (Ak34b3@t) ((lambda (Ak34b5@ls/false) (if Ak34b5@ls/false (apply (lambda (Ak34b7@lhs* Ak34b8@rhs* Ak34b9@b Ak34ba@b*) (if (Ak2e4b@valid-bound-ids? Ak34b7@lhs*) (Ak2ffe@bless (cons (cons 'lambda (cons Ak34b7@lhs* (cons Ak34b9@b Ak34ba@b*))) Ak34b8@rhs*)) (Ak3002@invalid-fmls-error Ak34b1@stx Ak34b7@lhs*))) Ak34b5@ls/false) ((lambda (Ak34bf@t) ((lambda (Ak34c1@ls/false) (if (and Ak34c1@ls/false (apply (lambda (Ak34c3@f Ak34c4@lhs* Ak34c5@rhs* Ak34c6@b Ak34c7@b*) (Ak2e43@id? Ak34c3@f)) Ak34c1@ls/false)) (apply (lambda (Ak34cd@f Ak34ce@lhs* Ak34cf@rhs* Ak34d0@b Ak34d1@b*) (if (Ak2e4b@valid-bound-ids? Ak34ce@lhs*) (Ak2ffe@bless (cons (list 'letrec (list (list Ak34cd@f (cons 'lambda (cons Ak34ce@lhs* (cons Ak34d0@b Ak34d1@b*))))) Ak34cd@f) Ak34cf@rhs*)) (Ak3002@invalid-fmls-error Ak34b1@stx Ak34ce@lhs*))) Ak34c1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak34bf@t))) (Ak3048@syntax-dispatch Ak34bf@t '(_ any #(each (any any)) any . each-any)))) Ak34b3@t))) (Ak3048@syntax-dispatch Ak34b3@t '(_ #(each (any any)) any . each-any)))) Ak34b1@stx))) (set! Ak3006@let-values-macro (lambda (Ak34d7@stx) ((lambda (Ak34da@rename Ak34dc@rename*) (begin (set! Ak34da@rename (lambda (Ak353f@x Ak3540@old* Ak3541@new*) (begin (if (not (Ak2e43@id? Ak353f@x)) (Ak3128@syntax-violation '#f '"not an indentifier" Ak34d7@stx Ak353f@x) (void)) (if (Ak2e4f@bound-id-member? Ak353f@x Ak3540@old*) (Ak3128@syntax-violation '#f '"duplicate binding" Ak34d7@stx Ak353f@x) (void)) ((lambda (Ak3545@y) (values Ak3545@y (cons Ak353f@x Ak3540@old*) (cons Ak3545@y Ak3541@new*))) (gensym (Ak312e@syntax->datum Ak353f@x)))))) (set! Ak34dc@rename* (lambda (Ak352d@x* Ak352e@old* Ak352f@new*) (if (null? Ak352d@x*) (values '() Ak352e@old* Ak352f@new*) (call-with-values (lambda () (Ak34da@rename (car Ak352d@x*) Ak352e@old* Ak352f@new*)) (lambda (Ak3533@x Ak3534@old* Ak3535@new*) (call-with-values (lambda () (Ak34dc@rename* (cdr Ak352d@x*) Ak3534@old* Ak3535@new*)) (lambda (Ak3539@x* Ak353a@old* Ak353b@new*) (values (cons Ak3533@x Ak3539@x*) Ak353a@old* Ak353b@new*)))))))) ((lambda (Ak34dd@t) ((lambda (Ak34df@ls/false) (if Ak34df@ls/false (apply (lambda (Ak34e1@b Ak34e2@b*) (cons* (Ak2ffe@bless 'let) '() Ak34e1@b Ak34e2@b*)) Ak34df@ls/false) ((lambda (Ak34e5@t) ((lambda (Ak34e7@ls/false) (if Ak34e7@ls/false (apply (lambda (Ak34e9@lhs* Ak34ea@rhs* Ak34eb@b Ak34ec@b*) (Ak2ffe@bless ((letrec ((Ak34f1@f (lambda (Ak34f3@lhs* Ak34f4@rhs* Ak34f5@old* Ak34f6@new*) (if (null? Ak34f3@lhs*) (cons 'let (cons (map list Ak34f5@old* Ak34f6@new*) (cons Ak34eb@b Ak34ec@b*))) ((lambda (Ak34fb@t) ((lambda (Ak34fd@ls/false) (if Ak34fd@ls/false (apply (lambda (Ak34ff@x*) (call-with-values (lambda () (Ak34dc@rename* Ak34ff@x* Ak34f5@old* Ak34f6@new*)) (lambda (Ak3507@Ak3502 Ak3508@Ak3504 Ak3509@Ak3506) ((lambda (Ak350d@new* Ak350e@old* Ak350f@y*) (list 'call-with-values (list 'lambda '() (car Ak34f4@rhs*)) (list 'lambda Ak350f@y* (Ak34f1@f (cdr Ak34f3@lhs*) (cdr Ak34f4@rhs*) Ak350e@old* Ak350d@new*)))) Ak3509@Ak3506 Ak3508@Ak3504 Ak3507@Ak3502)))) Ak34fd@ls/false) ((lambda (Ak3513@t) ((lambda (Ak3515@ls/false) (if Ak3515@ls/false (apply (lambda (Ak3517@x* Ak3518@x) (call-with-values (lambda () (Ak34da@rename Ak3518@x Ak34f5@old* Ak34f6@new*)) (lambda (Ak351b@y Ak351c@old* Ak351d@new*) (call-with-values (lambda () (Ak34dc@rename* Ak3517@x* Ak351c@old* Ak351d@new*)) (lambda (Ak3521@y* Ak3522@old* Ak3523@new*) (list 'call-with-values (list 'lambda '() (car Ak34f4@rhs*)) (list 'lambda (append Ak3521@y* Ak351b@y) (Ak34f1@f (cdr Ak34f3@lhs*) (cdr Ak34f4@rhs*) Ak3522@old* Ak3523@new*)))))))) Ak3515@ls/false) ((lambda (Ak3527@t) ((lambda (Ak3529@ls/false) (if Ak3529@ls/false (apply (lambda (Ak352b@others) (Ak3128@syntax-violation '#f '"malformed bindings" Ak34d7@stx Ak352b@others)) Ak3529@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3527@t))) (Ak3048@syntax-dispatch Ak3527@t 'any))) Ak3513@t))) (Ak3048@syntax-dispatch Ak3513@t '#(each+ any () any)))) Ak34fb@t))) (Ak3048@syntax-dispatch Ak34fb@t 'each-any))) (car Ak34f3@lhs*)))))) Ak34f1@f) Ak34e9@lhs* Ak34ea@rhs* '() '()))) Ak34e7@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak34e5@t))) (Ak3048@syntax-dispatch Ak34e5@t '(_ #(each (any any)) any . each-any)))) Ak34dd@t))) (Ak3048@syntax-dispatch Ak34dd@t '(_ () any . each-any)))) Ak34d7@stx))) '#f '#f))) (set! Ak3008@let*-values-macro (lambda (Ak3547@stx) ((lambda (Ak354a@check) (begin (set! Ak354a@check (lambda (Ak3579@x*) (if (not (null? Ak3579@x*)) ((lambda (Ak357b@x) (begin (if (not (Ak2e43@id? Ak357b@x)) (Ak3128@syntax-violation '#f '"not an identifier" Ak3547@stx Ak357b@x) (void)) (Ak354a@check (cdr Ak3579@x*)) (if (Ak2e4f@bound-id-member? Ak357b@x (cdr Ak3579@x*)) (Ak3128@syntax-violation '#f '"duplicate identifier" Ak3547@stx Ak357b@x) (void)))) (car Ak3579@x*)) (void)))) ((lambda (Ak354b@t) ((lambda (Ak354d@ls/false) (if Ak354d@ls/false (apply (lambda (Ak354f@b Ak3550@b*) (cons* (Ak2ffe@bless 'let) '() Ak354f@b Ak3550@b*)) Ak354d@ls/false) ((lambda (Ak3553@t) ((lambda (Ak3555@ls/false) (if Ak3555@ls/false (apply (lambda (Ak3557@lhs* Ak3558@rhs* Ak3559@b Ak355a@b*) (Ak2ffe@bless ((letrec ((Ak355f@f (lambda (Ak3561@lhs* Ak3562@rhs*) (if (null? Ak3561@lhs*) (cons 'begin (cons Ak3559@b Ak355a@b*)) ((lambda (Ak3565@t) ((lambda (Ak3567@ls/false) (if Ak3567@ls/false (apply (lambda (Ak3569@x*) (begin (Ak354a@check Ak3569@x*) (list 'call-with-values (list 'lambda '() (car Ak3562@rhs*)) (list 'lambda Ak3569@x* (Ak355f@f (cdr Ak3561@lhs*) (cdr Ak3562@rhs*)))))) Ak3567@ls/false) ((lambda (Ak356b@t) ((lambda (Ak356d@ls/false) (if Ak356d@ls/false (apply (lambda (Ak356f@x* Ak3570@x) (begin (Ak354a@check (cons Ak3570@x Ak356f@x*)) (list 'call-with-values (list 'lambda '() (car Ak3562@rhs*)) (list 'lambda (append Ak356f@x* Ak3570@x) (Ak355f@f (cdr Ak3561@lhs*) (cdr Ak3562@rhs*)))))) Ak356d@ls/false) ((lambda (Ak3573@t) ((lambda (Ak3575@ls/false) (if Ak3575@ls/false (apply (lambda (Ak3577@others) (Ak3128@syntax-violation '#f '"malformed bindings" Ak3547@stx Ak3577@others)) Ak3575@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3573@t))) (Ak3048@syntax-dispatch Ak3573@t 'any))) Ak356b@t))) (Ak3048@syntax-dispatch Ak356b@t '#(each+ any () any)))) Ak3565@t))) (Ak3048@syntax-dispatch Ak3565@t 'each-any))) (car Ak3561@lhs*)))))) Ak355f@f) Ak3557@lhs* Ak3558@rhs*))) Ak3555@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3553@t))) (Ak3048@syntax-dispatch Ak3553@t '(_ #(each (any any)) any . each-any)))) Ak354b@t))) (Ak3048@syntax-dispatch Ak354b@t '(_ () any . each-any)))) Ak3547@stx))) '#f))) (set! Ak300a@trace-lambda-macro (lambda (Ak357d@stx) ((lambda (Ak357f@t) ((lambda (Ak3581@ls/false) (if Ak3581@ls/false (apply (lambda (Ak3583@who Ak3584@fmls Ak3585@b Ak3586@b*) (if (Ak2e4b@valid-bound-ids? Ak3584@fmls) (Ak2ffe@bless (list 'make-traced-procedure (list 'quote Ak3583@who) (cons 'lambda (cons Ak3584@fmls (cons Ak3585@b Ak3586@b*))))) (Ak3002@invalid-fmls-error Ak357d@stx Ak3584@fmls))) Ak3581@ls/false) ((lambda (Ak358b@t) ((lambda (Ak358d@ls/false) (if Ak358d@ls/false (apply (lambda (Ak358f@who Ak3590@fmls Ak3591@last Ak3592@b Ak3593@b*) (if (Ak2e4b@valid-bound-ids? (cons Ak3591@last Ak3590@fmls)) (Ak2ffe@bless (list 'make-traced-procedure (list 'quote Ak358f@who) (cons 'lambda (cons (append Ak3590@fmls Ak3591@last) (cons Ak3592@b Ak3593@b*))))) (Ak3002@invalid-fmls-error Ak357d@stx (append Ak3590@fmls Ak3591@last)))) Ak358d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak358b@t))) (Ak3048@syntax-dispatch Ak358b@t '(_ any #(each+ any () any) any . each-any)))) Ak357f@t))) (Ak3048@syntax-dispatch Ak357f@t '(_ any each-any any . each-any)))) Ak357d@stx))) (set! Ak300c@trace-define-macro (lambda (Ak3599@stx) ((lambda (Ak359b@t) ((lambda (Ak359d@ls/false) (if Ak359d@ls/false (apply (lambda (Ak359f@who Ak35a0@fmls Ak35a1@b Ak35a2@b*) (if (Ak2e4b@valid-bound-ids? Ak35a0@fmls) (Ak2ffe@bless (list 'define Ak359f@who (list 'make-traced-procedure (list 'quote Ak359f@who) (cons 'lambda (cons Ak35a0@fmls (cons Ak35a1@b Ak35a2@b*)))))) (Ak3002@invalid-fmls-error Ak3599@stx Ak35a0@fmls))) Ak359d@ls/false) ((lambda (Ak35a7@t) ((lambda (Ak35a9@ls/false) (if Ak35a9@ls/false (apply (lambda (Ak35ab@who Ak35ac@fmls Ak35ad@last Ak35ae@b Ak35af@b*) (if (Ak2e4b@valid-bound-ids? (cons Ak35ad@last Ak35ac@fmls)) (Ak2ffe@bless (list 'define Ak35ab@who (list 'make-traced-procedure (list 'quote Ak35ab@who) (cons 'lambda (cons (append Ak35ac@fmls Ak35ad@last) (cons Ak35ae@b Ak35af@b*)))))) (Ak3002@invalid-fmls-error Ak3599@stx (append Ak35ac@fmls Ak35ad@last)))) Ak35a9@ls/false) ((lambda (Ak35b5@t) ((lambda (Ak35b7@ls/false) (if Ak35b7@ls/false (apply (lambda (Ak35b9@who Ak35ba@expr) (if (Ak2e43@id? Ak35b9@who) (Ak2ffe@bless (list 'define Ak35b9@who (list 'let (list (list 'v Ak35ba@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote Ak35b9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (Ak3128@syntax-violation '#f '"invalid name" Ak3599@stx))) Ak35b7@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak35b5@t))) (Ak3048@syntax-dispatch Ak35b5@t '(_ any any)))) Ak35a7@t))) (Ak3048@syntax-dispatch Ak35a7@t '(_ (any . #(each+ any () any)) any . each-any)))) Ak359b@t))) (Ak3048@syntax-dispatch Ak359b@t '(_ (any . each-any) any . each-any)))) Ak3599@stx))) (set! Ak300e@trace-define-syntax-macro (lambda (Ak35bd@stx) ((lambda (Ak35bf@t) ((lambda (Ak35c1@ls/false) (if Ak35c1@ls/false (apply (lambda (Ak35c3@who Ak35c4@expr) (if (Ak2e43@id? Ak35c3@who) (Ak2ffe@bless (list 'define-syntax Ak35c3@who (list 'make-traced-macro (list 'quote Ak35c3@who) Ak35c4@expr))) (Ak3128@syntax-violation '#f '"invalid name" Ak35bd@stx))) Ak35c1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak35bf@t))) (Ak3048@syntax-dispatch Ak35bf@t '(_ any any)))) Ak35bd@stx))) (set! Ak3010@trace-let/rec-syntax (lambda (Ak35c7@who) (lambda (Ak35c9@stx) ((lambda (Ak35cb@t) ((lambda (Ak35cd@ls/false) (if Ak35cd@ls/false (apply (lambda (Ak35cf@lhs* Ak35d0@rhs* Ak35d1@b Ak35d2@b*) (if (Ak2e4b@valid-bound-ids? Ak35cf@lhs*) ((lambda (Ak35d7@rhs*) (Ak2ffe@bless (cons Ak35c7@who (cons (map list Ak35cf@lhs* Ak35d7@rhs*) (cons Ak35d1@b Ak35d2@b*))))) (map (lambda (Ak35d9@lhs Ak35da@rhs) (list 'make-traced-macro (list 'quote Ak35d9@lhs) Ak35da@rhs)) Ak35cf@lhs* Ak35d0@rhs*)) (Ak3002@invalid-fmls-error Ak35c9@stx Ak35cf@lhs*))) Ak35cd@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak35cb@t))) (Ak3048@syntax-dispatch Ak35cb@t '(_ #(each (any any)) any . each-any)))) Ak35c9@stx)))) (set! Ak3012@trace-let-syntax-macro (Ak3010@trace-let/rec-syntax 'let-syntax)) (set! Ak3014@trace-letrec-syntax-macro (Ak3010@trace-let/rec-syntax 'letrec-syntax)) (set! Ak3016@guard-macro (lambda (Ak35dd@x) ((lambda (Ak35e0@gen-clauses) (begin (set! Ak35e0@gen-clauses (lambda (Ak35f7@con Ak35f8@outerk Ak35f9@clause*) ((lambda (Ak35fe@f Ak3600@f*) (begin (set! Ak35fe@f (lambda (Ak3637@x Ak3638@k) ((lambda (Ak363b@t) ((lambda (Ak363d@ls/false) (if Ak363d@ls/false (apply (lambda (Ak363f@e Ak3640@p) ((lambda (Ak3643@t) (list 'let (list (list Ak3643@t Ak363f@e)) (list 'if Ak3643@t (list Ak3640@p Ak3643@t) Ak3638@k))) (gensym))) Ak363d@ls/false) ((lambda (Ak3645@t) ((lambda (Ak3647@ls/false) (if Ak3647@ls/false (apply (lambda (Ak3649@e) ((lambda (Ak364b@t) (list 'let (list (list Ak364b@t Ak3649@e)) (list 'if Ak364b@t Ak364b@t Ak3638@k))) (gensym))) Ak3647@ls/false) ((lambda (Ak364d@t) ((lambda (Ak364f@ls/false) (if Ak364f@ls/false (apply (lambda (Ak3651@e Ak3652@v Ak3653@v*) (list 'if Ak3651@e (cons 'begin (cons Ak3652@v Ak3653@v*)) Ak3638@k)) Ak364f@ls/false) ((lambda (Ak3657@t) ((lambda (Ak3659@ls/false) (if Ak3659@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid guard clause" Ak3637@x)) Ak3659@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3657@t))) (Ak3048@syntax-dispatch Ak3657@t '_))) Ak364d@t))) (Ak3048@syntax-dispatch Ak364d@t '(any any . each-any)))) Ak3645@t))) (Ak3048@syntax-dispatch Ak3645@t '(any)))) Ak363b@t))) (Ak3048@syntax-dispatch Ak363b@t '(any #(scheme-id =>) any)))) Ak3637@x))) (set! Ak3600@f* (lambda (Ak360d@x*) ((lambda (Ak360f@t) ((lambda (Ak3611@ls/false) (if Ak3611@ls/false (apply (lambda () ((lambda (Ak3613@g) (values (list Ak3613@g (list 'lambda '() (list 'raise-continuable Ak35f7@con))) Ak3613@g)) (gensym))) Ak3611@ls/false) ((lambda (Ak3615@t) ((lambda (Ak3617@ls/false) (if Ak3617@ls/false (apply (lambda (Ak3619@e Ak361a@e*) (values (cons 'begin (cons Ak3619@e Ak361a@e*)) '#f)) Ak3617@ls/false) ((lambda (Ak361d@t) ((lambda (Ak361f@ls/false) (if Ak361f@ls/false (apply (lambda (Ak3621@cls Ak3622@cls*) (call-with-values (lambda () (Ak3600@f* Ak3622@cls*)) (lambda (Ak3629@Ak3626 Ak362a@Ak3628) ((lambda (Ak362d@g Ak362e@e) (values (Ak35fe@f Ak3621@cls Ak362e@e) Ak362d@g)) Ak362a@Ak3628 Ak3629@Ak3626)))) Ak361f@ls/false) ((lambda (Ak3631@t) ((lambda (Ak3633@ls/false) (if Ak3633@ls/false (apply (lambda (Ak3635@others) (Ak3128@syntax-violation '#f '"invalid guard clause" Ak3635@others)) Ak3633@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3631@t))) (Ak3048@syntax-dispatch Ak3631@t 'any))) Ak361d@t))) (Ak3048@syntax-dispatch Ak361d@t '(any . any)))) Ak3615@t))) (Ak3048@syntax-dispatch Ak3615@t '((#(scheme-id else) any . each-any))))) Ak360f@t))) (Ak3048@syntax-dispatch Ak360f@t '()))) Ak360d@x*))) (call-with-values (lambda () (Ak3600@f* Ak35f9@clause*)) (lambda (Ak3605@Ak3602 Ak3606@Ak3604) ((lambda (Ak3609@raisek Ak360a@code) (if Ak3609@raisek (list (list 'call/cc (list 'lambda (list Ak3609@raisek) (list Ak35f8@outerk (list 'lambda '() Ak360a@code))))) (list Ak35f8@outerk (list 'lambda '() Ak360a@code)))) Ak3606@Ak3604 Ak3605@Ak3602))))) '#f '#f))) ((lambda (Ak35e1@t) ((lambda (Ak35e3@ls/false) (if (and Ak35e3@ls/false (apply (lambda (Ak35e5@con Ak35e6@clause* Ak35e7@b Ak35e8@b*) (Ak2e43@id? Ak35e5@con)) Ak35e3@ls/false)) (apply (lambda (Ak35ed@con Ak35ee@clause* Ak35ef@b Ak35f0@b*) ((lambda (Ak35f5@outerk) (Ak2ffe@bless (list (list 'call/cc (list 'lambda (list Ak35f5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list Ak35ed@con) (Ak35e0@gen-clauses Ak35ed@con Ak35f5@outerk Ak35ee@clause*)) (cons 'lambda (cons '() (cons Ak35ef@b Ak35f0@b*)))))))))) (gensym))) Ak35e3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak35e1@t))) (Ak3048@syntax-dispatch Ak35e1@t '(_ (any . each-any) any . each-any)))) Ak35dd@x))) '#f))) (set! Ak3018@define-enumeration-macro (lambda (Ak365b@stx) ((lambda (Ak365e@set? Ak3660@remove-dups) (begin (set! Ak365e@set? (lambda (Ak3677@x) (or (null? Ak3677@x) (and (not (memq (car Ak3677@x) (cdr Ak3677@x))) (Ak365e@set? (cdr Ak3677@x)))))) (set! Ak3660@remove-dups (lambda (Ak3675@ls) (if (null? Ak3675@ls) '() (cons (car Ak3675@ls) (Ak3660@remove-dups (remq (car Ak3675@ls) (cdr Ak3675@ls))))))) ((lambda (Ak3661@t) ((lambda (Ak3663@ls/false) (if (and Ak3663@ls/false (apply (lambda (Ak3665@name Ak3666@id* Ak3667@maker) (and (Ak2e43@id? Ak3665@name) (Ak2e43@id? Ak3667@maker) (for-all Ak2e43@id? Ak3666@id*))) Ak3663@ls/false)) (apply (lambda (Ak366b@name Ak366c@id* Ak366d@maker) ((lambda (Ak3671@name* Ak3672@mk) (Ak2ffe@bless (list 'begin (list 'define Ak3672@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote Ak3671@name*)))) (list 'define-syntax Ak366b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote Ak3671@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote Ak366b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax Ak366d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote Ak366d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote Ak3671@name*)) (cons 'syntax-violation (cons (list 'quote Ak366d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons Ak3672@mk '('(n* ...)))))))))))) (Ak3660@remove-dups (Ak312e@syntax->datum Ak366c@id*)) (gensym))) Ak3663@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3661@t))) (Ak3048@syntax-dispatch Ak3661@t '(_ any each-any any)))) Ak365b@stx))) '#f '#f))) (set! Ak301a@time-macro (lambda (Ak3679@stx) ((lambda (Ak367b@t) ((lambda (Ak367d@ls/false) (if Ak367d@ls/false (apply (lambda (Ak367f@expr) (Ak2ffe@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() Ak367f@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) Ak367d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak367b@t))) (Ak3048@syntax-dispatch Ak367b@t '(_ any)))) Ak3679@stx))) (set! Ak301c@delay-macro (lambda (Ak3681@stx) ((lambda (Ak3683@t) ((lambda (Ak3685@ls/false) (if Ak3685@ls/false (apply (lambda (Ak3687@expr) (Ak2ffe@bless (list 'make-promise (list 'lambda '() Ak3687@expr)))) Ak3685@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3683@t))) (Ak3048@syntax-dispatch Ak3683@t '(_ any)))) Ak3681@stx))) (set! Ak301e@assert-macro (lambda (Ak3689@stx) ((lambda (Ak368b@t) ((lambda (Ak368d@ls/false) (if Ak368d@ls/false (apply (lambda (Ak368f@expr) ((lambda (Ak3691@pos) (Ak2ffe@bless (list 'unless Ak368f@expr (list 'assertion-error (list 'quote Ak368f@expr) (list 'quote Ak3691@pos))))) (or (Ak3120@expression-position Ak3689@stx) (Ak3120@expression-position Ak368f@expr)))) Ak368d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak368b@t))) (Ak3048@syntax-dispatch Ak368b@t '(_ any)))) Ak3689@stx))) (set! Ak3020@endianness-macro (lambda (Ak3693@stx) ((lambda (Ak3695@t) ((lambda (Ak3697@ls/false) (if Ak3697@ls/false (apply (lambda (Ak3699@e) ((lambda (Ak369b@t) (if (memv Ak369b@t '(little)) (Ak2ffe@bless ''little) (if (memv Ak369b@t '(big)) (Ak2ffe@bless ''big) (Ak3128@syntax-violation '#f '"endianness must be big or little" Ak3693@stx)))) (Ak312e@syntax->datum Ak3699@e))) Ak3697@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3695@t))) (Ak3048@syntax-dispatch Ak3695@t '(_ any)))) Ak3693@stx))) (set! Ak3022@identifier-syntax-macro (lambda (Ak369d@stx) ((lambda (Ak369f@t) ((lambda (Ak36a1@ls/false) (if Ak36a1@ls/false (apply (lambda (Ak36a3@expr) (Ak2ffe@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax Ak36a3@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax Ak36a3@expr) '((syntax (e* ...)))))))))) Ak36a1@ls/false) ((lambda (Ak36a5@t) ((lambda (Ak36a7@ls/false) (if (and Ak36a7@ls/false (apply (lambda (Ak36a9@id1 Ak36aa@expr1 Ak36ab@id2 Ak36ac@expr2 Ak36ad@expr3) (and (Ak2e43@id? Ak36a9@id1) (Ak2e43@id? Ak36ab@id2) (Ak2e43@id? Ak36ac@expr2))) Ak36a7@ls/false)) (apply (lambda (Ak36b3@id1 Ak36b4@expr1 Ak36b5@id2 Ak36b6@expr2 Ak36b7@expr3) (Ak2ffe@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax Ak36b4@expr1)) (list (list 'set! 'id Ak36b6@expr2) (list 'syntax Ak36b7@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons Ak36b4@expr1 '(e* ...))))))))) Ak36a7@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak36a5@t))) (Ak3048@syntax-dispatch Ak36a5@t '(_ (any any) ((#(scheme-id set!) any any) any))))) Ak369f@t))) (Ak3048@syntax-dispatch Ak369f@t '(_ any)))) Ak369d@stx))) (set! Ak3024@do-macro (lambda (Ak36bd@stx) ((lambda (Ak36c0@bind) (begin (set! Ak36c0@bind (lambda (Ak36d7@x) ((lambda (Ak36d9@t) ((lambda (Ak36db@ls/false) (if Ak36db@ls/false (apply (lambda (Ak36dd@x Ak36de@init) (list Ak36dd@x Ak36de@init Ak36dd@x)) Ak36db@ls/false) ((lambda (Ak36e1@t) ((lambda (Ak36e3@ls/false) (if Ak36e3@ls/false (apply (lambda (Ak36e5@x Ak36e6@init Ak36e7@step) (list Ak36e5@x Ak36e6@init Ak36e7@step)) Ak36e3@ls/false) ((lambda (Ak36eb@t) ((lambda (Ak36ed@ls/false) (if Ak36ed@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid binding" Ak36bd@stx)) Ak36ed@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak36eb@t))) (Ak3048@syntax-dispatch Ak36eb@t '_))) Ak36e1@t))) (Ak3048@syntax-dispatch Ak36e1@t '(any any any)))) Ak36d9@t))) (Ak3048@syntax-dispatch Ak36d9@t '(any any)))) Ak36d7@x))) ((lambda (Ak36c1@t) ((lambda (Ak36c3@ls/false) (if Ak36c3@ls/false (apply (lambda (Ak36c5@binding* Ak36c6@test Ak36c7@expr* Ak36c8@command*) ((lambda (Ak36cd@t) ((lambda (Ak36cf@ls/false) (if Ak36cf@ls/false (apply (lambda (Ak36d1@x* Ak36d2@init* Ak36d3@step*) (if (Ak2e4b@valid-bound-ids? Ak36d1@x*) (Ak2ffe@bless (list 'letrec (list (list 'loop (list 'lambda Ak36d1@x* (list 'if Ak36c6@test (cons 'begin (cons '(if #f #f) Ak36c7@expr*)) (cons 'begin (append Ak36c8@command* (list (cons 'loop Ak36d3@step*)))))))) (cons 'loop Ak36d2@init*))) (Ak3128@syntax-violation '#f '"invalid bindings" Ak36bd@stx))) Ak36cf@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak36cd@t))) (Ak3048@syntax-dispatch Ak36cd@t '#(each (any any any))))) (map Ak36c0@bind Ak36c5@binding*))) Ak36c3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak36c1@t))) (Ak3048@syntax-dispatch Ak36c1@t '(_ each-any (any . each-any) . each-any)))) Ak36bd@stx))) '#f))) (set! Ak3026@let*-macro (lambda (Ak36ef@stx) ((lambda (Ak36f1@t) ((lambda (Ak36f3@ls/false) (if (and Ak36f3@ls/false (apply (lambda (Ak36f5@lhs* Ak36f6@rhs* Ak36f7@b Ak36f8@b*) (for-all Ak2e43@id? Ak36f5@lhs*)) Ak36f3@ls/false)) (apply (lambda (Ak36fd@lhs* Ak36fe@rhs* Ak36ff@b Ak3700@b*) (Ak2ffe@bless ((letrec ((Ak3705@f (lambda (Ak3707@x*) (if (null? Ak3707@x*) (cons 'let (cons '() (cons Ak36ff@b Ak3700@b*))) (list 'let (list (car Ak3707@x*)) (Ak3705@f (cdr Ak3707@x*))))))) Ak3705@f) (map list Ak36fd@lhs* Ak36fe@rhs*)))) Ak36f3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak36f1@t))) (Ak3048@syntax-dispatch Ak36f1@t '(_ #(each (any any)) any . each-any)))) Ak36ef@stx))) (set! Ak3028@or-macro (lambda (Ak3709@stx) ((lambda (Ak370b@t) ((lambda (Ak370d@ls/false) (if Ak370d@ls/false (apply (lambda () '#f) Ak370d@ls/false) ((lambda (Ak370f@t) ((lambda (Ak3711@ls/false) (if Ak3711@ls/false (apply (lambda (Ak3713@e Ak3714@e*) (Ak2ffe@bless ((letrec ((Ak3717@f (lambda (Ak3719@e Ak371a@e*) (if (null? Ak371a@e*) (list 'begin '#f Ak3719@e) (list 'let (list (list 't Ak3719@e)) (list 'if 't 't (Ak3717@f (car Ak371a@e*) (cdr Ak371a@e*)))))))) Ak3717@f) Ak3713@e Ak3714@e*))) Ak3711@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak370f@t))) (Ak3048@syntax-dispatch Ak370f@t '(_ any . each-any)))) Ak370b@t))) (Ak3048@syntax-dispatch Ak370b@t '(_)))) Ak3709@stx))) (set! Ak302a@and-macro (lambda (Ak371d@stx) ((lambda (Ak371f@t) ((lambda (Ak3721@ls/false) (if Ak3721@ls/false (apply (lambda () '#t) Ak3721@ls/false) ((lambda (Ak3723@t) ((lambda (Ak3725@ls/false) (if Ak3725@ls/false (apply (lambda (Ak3727@e Ak3728@e*) (Ak2ffe@bless ((letrec ((Ak372b@f (lambda (Ak372d@e Ak372e@e*) (if (null? Ak372e@e*) (list 'begin '#f Ak372d@e) (cons 'if (cons Ak372d@e (cons (Ak372b@f (car Ak372e@e*) (cdr Ak372e@e*)) '(#f)))))))) Ak372b@f) Ak3727@e Ak3728@e*))) Ak3725@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3723@t))) (Ak3048@syntax-dispatch Ak3723@t '(_ any . each-any)))) Ak371f@t))) (Ak3048@syntax-dispatch Ak371f@t '(_)))) Ak371d@stx))) (set! Ak302c@cond-macro (lambda (Ak3731@stx) ((lambda (Ak3733@t) ((lambda (Ak3735@ls/false) (if Ak3735@ls/false (apply (lambda (Ak3737@cls Ak3738@cls*) (Ak2ffe@bless ((letrec ((Ak373b@f (lambda (Ak373d@cls Ak373e@cls*) (if (null? Ak373e@cls*) ((lambda (Ak3741@t) ((lambda (Ak3743@ls/false) (if Ak3743@ls/false (apply (lambda (Ak3745@e Ak3746@e*) (cons 'begin (cons Ak3745@e Ak3746@e*))) Ak3743@ls/false) ((lambda (Ak3749@t) ((lambda (Ak374b@ls/false) (if Ak374b@ls/false (apply (lambda (Ak374d@e Ak374e@p) (list 'let (list (list 't Ak374d@e)) (list 'if 't (cons Ak374e@p '(t))))) Ak374b@ls/false) ((lambda (Ak3751@t) ((lambda (Ak3753@ls/false) (if Ak3753@ls/false (apply (lambda (Ak3755@e) (cons 'or (cons Ak3755@e '((if #f #f))))) Ak3753@ls/false) ((lambda (Ak3757@t) ((lambda (Ak3759@ls/false) (if Ak3759@ls/false (apply (lambda (Ak375b@e Ak375c@e*) (list 'if Ak375b@e (cons 'begin Ak375c@e*))) Ak3759@ls/false) ((lambda (Ak375f@t) ((lambda (Ak3761@ls/false) (if Ak3761@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid last clause" Ak3731@stx)) Ak3761@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak375f@t))) (Ak3048@syntax-dispatch Ak375f@t '_))) Ak3757@t))) (Ak3048@syntax-dispatch Ak3757@t '(any . each-any)))) Ak3751@t))) (Ak3048@syntax-dispatch Ak3751@t '(any)))) Ak3749@t))) (Ak3048@syntax-dispatch Ak3749@t '(any #(scheme-id =>) any)))) Ak3741@t))) (Ak3048@syntax-dispatch Ak3741@t '(#(scheme-id else) any . each-any)))) Ak373d@cls) ((lambda (Ak3763@t) ((lambda (Ak3765@ls/false) (if Ak3765@ls/false (apply (lambda (Ak3767@e Ak3768@e*) (Ak3128@syntax-violation '#f '"incorrect position of keyword else" Ak3731@stx)) Ak3765@ls/false) ((lambda (Ak376b@t) ((lambda (Ak376d@ls/false) (if Ak376d@ls/false (apply (lambda (Ak376f@e Ak3770@p) (list 'let (list (list 't Ak376f@e)) (list 'if 't (cons Ak3770@p '(t)) (Ak373b@f (car Ak373e@cls*) (cdr Ak373e@cls*))))) Ak376d@ls/false) ((lambda (Ak3773@t) ((lambda (Ak3775@ls/false) (if Ak3775@ls/false (apply (lambda (Ak3777@e) (list 'or Ak3777@e (Ak373b@f (car Ak373e@cls*) (cdr Ak373e@cls*)))) Ak3775@ls/false) ((lambda (Ak3779@t) ((lambda (Ak377b@ls/false) (if Ak377b@ls/false (apply (lambda (Ak377d@e Ak377e@e*) (list 'if Ak377d@e (cons 'begin Ak377e@e*) (Ak373b@f (car Ak373e@cls*) (cdr Ak373e@cls*)))) Ak377b@ls/false) ((lambda (Ak3781@t) ((lambda (Ak3783@ls/false) (if Ak3783@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid last clause" Ak3731@stx)) Ak3783@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3781@t))) (Ak3048@syntax-dispatch Ak3781@t '_))) Ak3779@t))) (Ak3048@syntax-dispatch Ak3779@t '(any . each-any)))) Ak3773@t))) (Ak3048@syntax-dispatch Ak3773@t '(any)))) Ak376b@t))) (Ak3048@syntax-dispatch Ak376b@t '(any #(scheme-id =>) any)))) Ak3763@t))) (Ak3048@syntax-dispatch Ak3763@t '(#(scheme-id else) any . each-any)))) Ak373d@cls))))) Ak373b@f) Ak3737@cls Ak3738@cls*))) Ak3735@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3733@t))) (Ak3048@syntax-dispatch Ak3733@t '(_ any . each-any)))) Ak3731@stx))) (set! Ak302e@do-include (lambda (Ak3785@stx Ak3786@id Ak3787@filename) ((lambda (Ak378b@filename) (begin (if (not (and (string? Ak378b@filename) (Ak2e43@id? Ak3786@id))) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3785@stx) (void)) (cons (Ak2ffe@bless 'begin) (with-input-from-file Ak378b@filename (lambda () ((letrec ((Ak378d@f (lambda (Ak378f@ls) ((lambda (Ak3791@x) (if (eof-object? Ak3791@x) (reverse Ak378f@ls) (Ak378d@f (cons (Ak2e23@datum->stx Ak3786@id Ak3791@x) Ak378f@ls)))) (Ak2995@Ak2867@read-annotated))))) Ak378d@f) '())))))) (Ak2e57@stx->datum Ak3787@filename)))) (set! Ak3030@include-macro (lambda (Ak3793@e) ((lambda (Ak3795@t) ((lambda (Ak3797@ls/false) (if Ak3797@ls/false (apply (lambda (Ak3799@id Ak379a@filename) (Ak302e@do-include Ak3793@e Ak3799@id Ak379a@filename)) Ak3797@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3795@t))) (Ak3048@syntax-dispatch Ak3795@t '(any any)))) Ak3793@e))) (set! Ak3032@include-into-macro (lambda (Ak379d@e) ((lambda (Ak379f@t) ((lambda (Ak37a1@ls/false) (if Ak37a1@ls/false (apply (lambda (Ak37a3@id Ak37a4@filename) (Ak302e@do-include Ak379d@e Ak37a3@id Ak37a4@filename)) Ak37a1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak379f@t))) (Ak3048@syntax-dispatch Ak379f@t '(_ any any)))) Ak379d@e))) (set! Ak3034@syntax-rules-macro (lambda (Ak37a7@e) ((lambda (Ak37a9@t) ((lambda (Ak37ab@ls/false) (if Ak37ab@ls/false (apply (lambda (Ak37ad@lits Ak37ae@pat* Ak37af@tmp*) (begin (Ak304e@verify-literals Ak37ad@lits Ak37a7@e) (Ak2ffe@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons Ak37ad@lits (map (lambda (Ak37b3@pat Ak37b4@tmp) ((lambda (Ak37b7@t) ((lambda (Ak37b9@ls/false) (if Ak37b9@ls/false (apply (lambda (Ak37bb@rest) (list (cons 'g Ak37bb@rest) (list 'syntax Ak37b4@tmp))) Ak37b9@ls/false) ((lambda (Ak37bd@t) ((lambda (Ak37bf@ls/false) (if Ak37bf@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid syntax-rules pattern" Ak37a7@e Ak37b3@pat)) Ak37bf@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak37bd@t))) (Ak3048@syntax-dispatch Ak37bd@t '_))) Ak37b7@t))) (Ak3048@syntax-dispatch Ak37b7@t '(_ . any)))) Ak37b3@pat)) Ak37ae@pat* Ak37af@tmp*)))))))) Ak37ab@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak37a9@t))) (Ak3048@syntax-dispatch Ak37a9@t '(_ each-any . #(each (any any)))))) Ak37a7@e))) (set! Ak3036@quasiquote-macro ((lambda () ((lambda (Ak37c2@datum Ak37de@quasicons* Ak37e0@quasicons Ak37e2@quasiappend Ak37e4@quasivector Ak37e6@vquasi Ak37e8@quasi) (begin (set! Ak37c2@datum (lambda (Ak38c3@x) (list (Ak2fd2@scheme-stx 'quote) (Ak2e2b@mkstx Ak38c3@x '() '() '())))) (set! Ak37de@quasicons* (lambda (Ak38bb@x Ak38bc@y) ((letrec ((Ak38bf@f (lambda (Ak38c1@x) (if (null? Ak38c1@x) Ak38bc@y (Ak37e0@quasicons (car Ak38c1@x) (Ak38bf@f (cdr Ak38c1@x))))))) Ak38bf@f) Ak38bb@x))) (set! Ak37e0@quasicons (lambda (Ak3895@x Ak3896@y) ((lambda (Ak3899@t) ((lambda (Ak389b@ls/false) (if Ak389b@ls/false (apply (lambda (Ak389d@dy) ((lambda (Ak389f@t) ((lambda (Ak38a1@ls/false) (if Ak38a1@ls/false (apply (lambda (Ak38a3@dx) (list (Ak2fd2@scheme-stx 'quote) (cons Ak38a3@dx Ak389d@dy))) Ak38a1@ls/false) ((lambda (Ak38a5@t) ((lambda (Ak38a7@ls/false) (if Ak38a7@ls/false (apply (lambda () ((lambda (Ak38a9@t) ((lambda (Ak38ab@ls/false) (if Ak38ab@ls/false (apply (lambda () (list (Ak2fd2@scheme-stx 'list) Ak3895@x)) Ak38ab@ls/false) ((lambda (Ak38ad@t) ((lambda (Ak38af@ls/false) (if Ak38af@ls/false (apply (lambda () (list (Ak2fd2@scheme-stx 'cons) Ak3895@x Ak3896@y)) Ak38af@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak38ad@t))) (Ak3048@syntax-dispatch Ak38ad@t '_))) Ak38a9@t))) (Ak3048@syntax-dispatch Ak38a9@t '()))) Ak389d@dy)) Ak38a7@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak38a5@t))) (Ak3048@syntax-dispatch Ak38a5@t '_))) Ak389f@t))) (Ak3048@syntax-dispatch Ak389f@t '(#(scheme-id quote) any)))) Ak3895@x)) Ak389b@ls/false) ((lambda (Ak38b1@t) ((lambda (Ak38b3@ls/false) (if Ak38b3@ls/false (apply (lambda (Ak38b5@stuff) (cons* (Ak2fd2@scheme-stx 'list) Ak3895@x Ak38b5@stuff)) Ak38b3@ls/false) ((lambda (Ak38b7@t) ((lambda (Ak38b9@ls/false) (if Ak38b9@ls/false (apply (lambda () (list (Ak2fd2@scheme-stx 'cons) Ak3895@x Ak3896@y)) Ak38b9@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak38b7@t))) (Ak3048@syntax-dispatch Ak38b7@t '_))) Ak38b1@t))) (Ak3048@syntax-dispatch Ak38b1@t '(#(scheme-id list) . each-any)))) Ak3899@t))) (Ak3048@syntax-dispatch Ak3899@t '(#(scheme-id quote) any)))) Ak3896@y))) (set! Ak37e2@quasiappend (lambda (Ak387b@x Ak387c@y) ((lambda (Ak387f@ls) (if (null? Ak387f@ls) (list (Ak2fd2@scheme-stx 'quote) '()) (if (null? (cdr Ak387f@ls)) (car Ak387f@ls) (cons* (Ak2fd2@scheme-stx 'append) Ak387f@ls)))) ((letrec ((Ak3881@f (lambda (Ak3883@x) (if (null? Ak3883@x) ((lambda (Ak3885@t) ((lambda (Ak3887@ls/false) (if Ak3887@ls/false (apply (lambda () '()) Ak3887@ls/false) ((lambda (Ak3889@t) ((lambda (Ak388b@ls/false) (if Ak388b@ls/false (apply (lambda () (list Ak387c@y)) Ak388b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3889@t))) (Ak3048@syntax-dispatch Ak3889@t '_))) Ak3885@t))) (Ak3048@syntax-dispatch Ak3885@t '(#(scheme-id quote) ())))) Ak387c@y) ((lambda (Ak388d@t) ((lambda (Ak388f@ls/false) (if Ak388f@ls/false (apply (lambda () (Ak3881@f (cdr Ak3883@x))) Ak388f@ls/false) ((lambda (Ak3891@t) ((lambda (Ak3893@ls/false) (if Ak3893@ls/false (apply (lambda () (cons (car Ak3883@x) (Ak3881@f (cdr Ak3883@x)))) Ak3893@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3891@t))) (Ak3048@syntax-dispatch Ak3891@t '_))) Ak388d@t))) (Ak3048@syntax-dispatch Ak388d@t '(#(scheme-id quote) ())))) (car Ak3883@x)))))) Ak3881@f) Ak387b@x)))) (set! Ak37e4@quasivector (lambda (Ak3849@x) ((lambda (Ak384b@pat-x) ((lambda (Ak384d@t) ((lambda (Ak384f@ls/false) (if Ak384f@ls/false (apply (lambda (Ak3851@x*) (list (Ak2fd2@scheme-stx 'quote) (list->vector Ak3851@x*))) Ak384f@ls/false) ((lambda (Ak3853@t) ((lambda (Ak3855@ls/false) (if Ak3855@ls/false (apply (lambda () ((letrec ((Ak3857@f (lambda (Ak3859@x Ak385a@k) ((lambda (Ak385d@t) ((lambda (Ak385f@ls/false) (if Ak385f@ls/false (apply (lambda (Ak3861@x*) (Ak385a@k (map (lambda (Ak3863@x) (list (Ak2fd2@scheme-stx 'quote) Ak3863@x)) Ak3861@x*))) Ak385f@ls/false) ((lambda (Ak3865@t) ((lambda (Ak3867@ls/false) (if Ak3867@ls/false (apply (lambda (Ak3869@x*) (Ak385a@k Ak3869@x*)) Ak3867@ls/false) ((lambda (Ak386b@t) ((lambda (Ak386d@ls/false) (if Ak386d@ls/false (apply (lambda (Ak386f@x Ak3870@y) (Ak3857@f Ak3870@y (lambda (Ak3873@ls) (Ak385a@k (cons Ak386f@x Ak3873@ls))))) Ak386d@ls/false) ((lambda (Ak3875@t) ((lambda (Ak3877@ls/false) (if Ak3877@ls/false (apply (lambda () (list (Ak2fd2@scheme-stx 'list->vector) Ak384b@pat-x)) Ak3877@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3875@t))) (Ak3048@syntax-dispatch Ak3875@t '_))) Ak386b@t))) (Ak3048@syntax-dispatch Ak386b@t '(#(scheme-id cons) any any)))) Ak3865@t))) (Ak3048@syntax-dispatch Ak3865@t '(#(scheme-id list) . each-any)))) Ak385d@t))) (Ak3048@syntax-dispatch Ak385d@t '(#(scheme-id quote) each-any)))) Ak3859@x)))) Ak3857@f) Ak3849@x (lambda (Ak3879@ls) (cons* (Ak2fd2@scheme-stx 'vector) Ak3879@ls)))) Ak3855@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3853@t))) (Ak3048@syntax-dispatch Ak3853@t '_))) Ak384d@t))) (Ak3048@syntax-dispatch Ak384d@t '(#(scheme-id quote) each-any)))) Ak384b@pat-x)) Ak3849@x))) (set! Ak37e6@vquasi (lambda (Ak3827@p Ak3828@lev) ((lambda (Ak382b@t) ((lambda (Ak382d@ls/false) (if Ak382d@ls/false (apply (lambda (Ak382f@p Ak3830@q) ((lambda (Ak3833@t) ((lambda (Ak3835@ls/false) (if Ak3835@ls/false (apply (lambda (Ak3837@p) (if (= Ak3828@lev '0) (Ak37de@quasicons* Ak3837@p (Ak37e6@vquasi Ak3830@q Ak3828@lev)) (Ak37e0@quasicons (Ak37e0@quasicons (Ak37c2@datum 'unquote) (Ak37e8@quasi Ak3837@p (- Ak3828@lev '1))) (Ak37e6@vquasi Ak3830@q Ak3828@lev)))) Ak3835@ls/false) ((lambda (Ak3839@t) ((lambda (Ak383b@ls/false) (if Ak383b@ls/false (apply (lambda (Ak383d@p) (if (= Ak3828@lev '0) (Ak37e2@quasiappend Ak383d@p (Ak37e6@vquasi Ak3830@q Ak3828@lev)) (Ak37e0@quasicons (Ak37e0@quasicons (Ak37c2@datum 'unquote-splicing) (Ak37e8@quasi Ak383d@p (- Ak3828@lev '1))) (Ak37e6@vquasi Ak3830@q Ak3828@lev)))) Ak383b@ls/false) ((lambda (Ak383f@t) ((lambda (Ak3841@ls/false) (if Ak3841@ls/false (apply (lambda (Ak3843@p) (Ak37e0@quasicons (Ak37e8@quasi Ak3843@p Ak3828@lev) (Ak37e6@vquasi Ak3830@q Ak3828@lev))) Ak3841@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak383f@t))) (Ak3048@syntax-dispatch Ak383f@t 'any))) Ak3839@t))) (Ak3048@syntax-dispatch Ak3839@t '(#(scheme-id unquote-splicing) . each-any)))) Ak3833@t))) (Ak3048@syntax-dispatch Ak3833@t '(#(scheme-id unquote) . each-any)))) Ak382f@p)) Ak382d@ls/false) ((lambda (Ak3845@t) ((lambda (Ak3847@ls/false) (if Ak3847@ls/false (apply (lambda () (list (Ak2fd2@scheme-stx 'quote) '())) Ak3847@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3845@t))) (Ak3048@syntax-dispatch Ak3845@t '()))) Ak382b@t))) (Ak3048@syntax-dispatch Ak382b@t '(any . any)))) Ak3827@p))) (set! Ak37e8@quasi (lambda (Ak37f1@p Ak37f2@lev) ((lambda (Ak37f5@t) ((lambda (Ak37f7@ls/false) (if Ak37f7@ls/false (apply (lambda (Ak37f9@p) (if (= Ak37f2@lev '0) Ak37f9@p (Ak37e0@quasicons (Ak37c2@datum 'unquote) (Ak37e8@quasi (list Ak37f9@p) (- Ak37f2@lev '1))))) Ak37f7@ls/false) ((lambda (Ak37fb@t) ((lambda (Ak37fd@ls/false) (if Ak37fd@ls/false (apply (lambda (Ak37ff@p Ak3800@q) (if (= Ak37f2@lev '0) (Ak37de@quasicons* Ak37ff@p (Ak37e8@quasi Ak3800@q Ak37f2@lev)) (Ak37e0@quasicons (Ak37e0@quasicons (Ak37c2@datum 'unquote) (Ak37e8@quasi Ak37ff@p (- Ak37f2@lev '1))) (Ak37e8@quasi Ak3800@q Ak37f2@lev)))) Ak37fd@ls/false) ((lambda (Ak3803@t) ((lambda (Ak3805@ls/false) (if Ak3805@ls/false (apply (lambda (Ak3807@p Ak3808@q) (if (= Ak37f2@lev '0) (Ak37e2@quasiappend Ak3807@p (Ak37e8@quasi Ak3808@q Ak37f2@lev)) (Ak37e0@quasicons (Ak37e0@quasicons (Ak37c2@datum 'unquote-splicing) (Ak37e8@quasi Ak3807@p (- Ak37f2@lev '1))) (Ak37e8@quasi Ak3808@q Ak37f2@lev)))) Ak3805@ls/false) ((lambda (Ak380b@t) ((lambda (Ak380d@ls/false) (if Ak380d@ls/false (apply (lambda (Ak380f@p) (Ak37e0@quasicons (Ak37c2@datum 'quasiquote) (Ak37e8@quasi (list Ak380f@p) (+ Ak37f2@lev '1)))) Ak380d@ls/false) ((lambda (Ak3811@t) ((lambda (Ak3813@ls/false) (if Ak3813@ls/false (apply (lambda (Ak3815@p Ak3816@q) (Ak37e0@quasicons (Ak37e8@quasi Ak3815@p Ak37f2@lev) (Ak37e8@quasi Ak3816@q Ak37f2@lev))) Ak3813@ls/false) ((lambda (Ak3819@t) ((lambda (Ak381b@ls/false) (if (and Ak381b@ls/false (apply (lambda (Ak381d@x) (not (Ak2e0f@stx? Ak381d@x))) Ak381b@ls/false)) (apply (lambda (Ak381f@x) (Ak37e4@quasivector (Ak37e6@vquasi Ak381f@x Ak37f2@lev))) Ak381b@ls/false) ((lambda (Ak3821@t) ((lambda (Ak3823@ls/false) (if Ak3823@ls/false (apply (lambda (Ak3825@p) (list (Ak2fd2@scheme-stx 'quote) Ak3825@p)) Ak3823@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3821@t))) (Ak3048@syntax-dispatch Ak3821@t 'any))) Ak3819@t))) (Ak3048@syntax-dispatch Ak3819@t '#(vector each-any)))) Ak3811@t))) (Ak3048@syntax-dispatch Ak3811@t '(any . any)))) Ak380b@t))) (Ak3048@syntax-dispatch Ak380b@t '(#(scheme-id quasiquote) any)))) Ak3803@t))) (Ak3048@syntax-dispatch Ak3803@t '((#(scheme-id unquote-splicing) . each-any) . any)))) Ak37fb@t))) (Ak3048@syntax-dispatch Ak37fb@t '((#(scheme-id unquote) . each-any) . any)))) Ak37f5@t))) (Ak3048@syntax-dispatch Ak37f5@t '(#(scheme-id unquote) any)))) Ak37f1@p))) (lambda (Ak37e9@x) ((lambda (Ak37eb@t) ((lambda (Ak37ed@ls/false) (if Ak37ed@ls/false (apply (lambda (Ak37ef@e) (Ak37e8@quasi Ak37ef@e '0)) Ak37ed@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak37eb@t))) (Ak3048@syntax-dispatch Ak37eb@t '(_ any)))) Ak37e9@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! Ak3038@quasisyntax-macro ((lambda () ((lambda (Ak38c6@quasi) (begin (set! Ak38c6@quasi (lambda (Ak38e1@p Ak38e2@lev) ((lambda (Ak38e5@t) ((lambda (Ak38e7@ls/false) (if Ak38e7@ls/false (apply (lambda (Ak38e9@p) (if (= Ak38e2@lev '0) ((lambda (Ak38eb@g) (values (list Ak38eb@g) (list Ak38e9@p) Ak38eb@g)) (gensym)) (call-with-values (lambda () (Ak38c6@quasi Ak38e9@p (- Ak38e2@lev '1))) (lambda (Ak38f3@Ak38ee Ak38f4@Ak38f0 Ak38f5@Ak38f2) ((lambda (Ak38f9@p Ak38fa@rhs* Ak38fb@lhs*) (values Ak38fb@lhs* Ak38fa@rhs* (list 'unsyntax Ak38f9@p))) Ak38f5@Ak38f2 Ak38f4@Ak38f0 Ak38f3@Ak38ee))))) Ak38e7@ls/false) ((lambda (Ak38ff@t) ((lambda (Ak3901@ls/false) (if (and Ak3901@ls/false (apply (lambda () (= Ak38e2@lev '0)) Ak3901@ls/false)) (apply (lambda () (Ak3128@syntax-violation '#f '"incorrect use of unsyntax" Ak38e1@p)) Ak3901@ls/false) ((lambda (Ak3903@t) ((lambda (Ak3905@ls/false) (if Ak3905@ls/false (apply (lambda (Ak3907@p* Ak3908@q) (call-with-values (lambda () (Ak38c6@quasi Ak3908@q Ak38e2@lev)) (lambda (Ak3911@Ak390c Ak3912@Ak390e Ak3913@Ak3910) ((lambda (Ak3917@q Ak3918@rhs* Ak3919@lhs*) (if (= Ak38e2@lev '0) ((lambda (Ak391d@g*) (values (append Ak391d@g* Ak3919@lhs*) (append Ak3907@p* Ak3918@rhs*) (append Ak391d@g* Ak3917@q))) (map (lambda (Ak391f@x) (gensym)) Ak3907@p*)) (call-with-values (lambda () (Ak38c6@quasi Ak3907@p* (- Ak38e2@lev '1))) (lambda (Ak3927@Ak3922 Ak3928@Ak3924 Ak3929@Ak3926) ((lambda (Ak392d@p* Ak392e@rhs2* Ak392f@lhs2*) (values (append Ak392f@lhs2* Ak3919@lhs*) (append Ak392e@rhs2* Ak3918@rhs*) (cons (cons 'unsyntax Ak392d@p*) Ak3917@q))) Ak3929@Ak3926 Ak3928@Ak3924 Ak3927@Ak3922))))) Ak3913@Ak3910 Ak3912@Ak390e Ak3911@Ak390c)))) Ak3905@ls/false) ((lambda (Ak3933@t) ((lambda (Ak3935@ls/false) (if Ak3935@ls/false (apply (lambda (Ak3937@p* Ak3938@q) (call-with-values (lambda () (Ak38c6@quasi Ak3938@q Ak38e2@lev)) (lambda (Ak3941@Ak393c Ak3942@Ak393e Ak3943@Ak3940) ((lambda (Ak3947@q Ak3948@rhs* Ak3949@lhs*) (if (= Ak38e2@lev '0) ((lambda (Ak394d@g*) (values (append (map (lambda (Ak394f@g) (cons Ak394f@g '(...))) Ak394d@g*) Ak3949@lhs*) (append Ak3937@p* Ak3948@rhs*) (append (apply append (map (lambda (Ak3951@g) (cons Ak3951@g '(...))) Ak394d@g*)) Ak3947@q))) (map (lambda (Ak3953@x) (gensym)) Ak3937@p*)) (call-with-values (lambda () (Ak38c6@quasi Ak3937@p* (- Ak38e2@lev '1))) (lambda (Ak395b@Ak3956 Ak395c@Ak3958 Ak395d@Ak395a) ((lambda (Ak3961@p* Ak3962@rhs2* Ak3963@lhs2*) (values (append Ak3963@lhs2* Ak3949@lhs*) (append Ak3962@rhs2* Ak3948@rhs*) (cons (cons 'unsyntax-splicing Ak3961@p*) Ak3947@q))) Ak395d@Ak395a Ak395c@Ak3958 Ak395b@Ak3956))))) Ak3943@Ak3940 Ak3942@Ak393e Ak3941@Ak393c)))) Ak3935@ls/false) ((lambda (Ak3967@t) ((lambda (Ak3969@ls/false) (if (and Ak3969@ls/false (apply (lambda () (= Ak38e2@lev '0)) Ak3969@ls/false)) (apply (lambda () (Ak3128@syntax-violation '#f '"incorrect use of unsyntax-splicing" Ak38e1@p)) Ak3969@ls/false) ((lambda (Ak396b@t) ((lambda (Ak396d@ls/false) (if Ak396d@ls/false (apply (lambda (Ak396f@p) (call-with-values (lambda () (Ak38c6@quasi Ak396f@p (+ Ak38e2@lev '1))) (lambda (Ak3977@Ak3972 Ak3978@Ak3974 Ak3979@Ak3976) ((lambda (Ak397d@p Ak397e@rhs* Ak397f@lhs*) (values Ak397f@lhs* Ak397e@rhs* (list 'quasisyntax Ak397d@p))) Ak3979@Ak3976 Ak3978@Ak3974 Ak3977@Ak3972)))) Ak396d@ls/false) ((lambda (Ak3983@t) ((lambda (Ak3985@ls/false) (if Ak3985@ls/false (apply (lambda (Ak3987@p Ak3988@q) (call-with-values (lambda () (Ak38c6@quasi Ak3987@p Ak38e2@lev)) (lambda (Ak3997@Ak398c Ak3998@Ak398e Ak3999@Ak3990) (call-with-values (lambda () (Ak38c6@quasi Ak3988@q Ak38e2@lev)) (lambda (Ak399d@Ak3992 Ak399e@Ak3994 Ak399f@Ak3996) ((lambda (Ak39a3@q Ak39a4@rhs2* Ak39a5@lhs2* Ak39a6@p Ak39a7@rhs* Ak39a8@lhs*) (values (append Ak39a5@lhs2* Ak39a8@lhs*) (append Ak39a4@rhs2* Ak39a7@rhs*) (cons Ak39a6@p Ak39a3@q))) Ak399f@Ak3996 Ak399e@Ak3994 Ak399d@Ak3992 Ak3999@Ak3990 Ak3998@Ak398e Ak3997@Ak398c)))))) Ak3985@ls/false) ((lambda (Ak39af@t) ((lambda (Ak39b1@ls/false) (if Ak39b1@ls/false (apply (lambda (Ak39b3@x*) (call-with-values (lambda () (Ak38c6@quasi Ak39b3@x* Ak38e2@lev)) (lambda (Ak39bb@Ak39b6 Ak39bc@Ak39b8 Ak39bd@Ak39ba) ((lambda (Ak39c1@x* Ak39c2@rhs* Ak39c3@lhs*) (values Ak39c3@lhs* Ak39c2@rhs* (list->vector Ak39c1@x*))) Ak39bd@Ak39ba Ak39bc@Ak39b8 Ak39bb@Ak39b6)))) Ak39b1@ls/false) ((lambda (Ak39c7@t) ((lambda (Ak39c9@ls/false) (if Ak39c9@ls/false (apply (lambda () (values '() '() Ak38e1@p)) Ak39c9@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak39c7@t))) (Ak3048@syntax-dispatch Ak39c7@t '_))) Ak39af@t))) (Ak3048@syntax-dispatch Ak39af@t '#(vector each-any)))) Ak3983@t))) (Ak3048@syntax-dispatch Ak3983@t '(any . any)))) Ak396b@t))) (Ak3048@syntax-dispatch Ak396b@t '(#(scheme-id quasisyntax) any)))) Ak3967@t))) (Ak3048@syntax-dispatch Ak3967@t '#(scheme-id unsyntax-splicing)))) Ak3933@t))) (Ak3048@syntax-dispatch Ak3933@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) Ak3903@t))) (Ak3048@syntax-dispatch Ak3903@t '((#(scheme-id unsyntax) . each-any) . any)))) Ak38ff@t))) (Ak3048@syntax-dispatch Ak38ff@t '#(scheme-id unsyntax)))) Ak38e5@t))) (Ak3048@syntax-dispatch Ak38e5@t '(#(scheme-id unsyntax) any)))) Ak38e1@p))) (lambda (Ak38c7@x) ((lambda (Ak38c9@t) ((lambda (Ak38cb@ls/false) (if Ak38cb@ls/false (apply (lambda (Ak38cd@e) (call-with-values (lambda () (Ak38c6@quasi Ak38cd@e '0)) (lambda (Ak38d5@Ak38d0 Ak38d6@Ak38d2 Ak38d7@Ak38d4) ((lambda (Ak38db@v Ak38dc@rhs* Ak38dd@lhs*) (Ak2ffe@bless (list 'syntax-case (cons 'list Ak38dc@rhs*) '() (list Ak38dd@lhs* (list 'syntax Ak38db@v))))) Ak38d7@Ak38d4 Ak38d6@Ak38d2 Ak38d5@Ak38d0)))) Ak38cb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak38c9@t))) (Ak3048@syntax-dispatch Ak38c9@t '(_ any)))) Ak38c7@x)))) '#f)))) (set! Ak303a@define-struct-macro (lambda (Ak39cb@stx) (Ak3128@syntax-violation '#f '"define-struct not supported" Ak39cb@stx))) (set! Ak303c@define-record-type-macro (lambda (Ak39cd@x) ((lambda (Ak39d0@id Ak39d2@get-record-name Ak39d4@get-record-constructor-name Ak39d6@get-record-predicate-name Ak39d8@get-clause Ak39da@foo-rtd-code Ak39dc@parent-rtd-code Ak39de@parent-rcd-code Ak39e0@foo-rcd-code Ak39e2@get-protocol-code Ak39e4@get-fields Ak39e6@get-mutator-indices Ak39e8@get-mutators Ak39ea@get-accessors Ak39ec@enumerate Ak39ee@do-define-record Ak39f0@verify-clauses) (begin (set! Ak39d0@id (lambda (Ak3bc3@ctxt . Ak3bc5@str*) (Ak312c@datum->syntax Ak3bc3@ctxt (string->symbol (apply string-append (map (lambda (Ak3bc7@x) (if (symbol? Ak3bc7@x) (symbol->string Ak3bc7@x) (if (string? Ak3bc7@x) Ak3bc7@x (assertion-violation 'define-record-type '"BUG")))) Ak3bc5@str*)))))) (set! Ak39d2@get-record-name (lambda (Ak3bb1@spec) ((lambda (Ak3bb3@t) ((lambda (Ak3bb5@ls/false) (if Ak3bb5@ls/false (apply (lambda (Ak3bb7@foo Ak3bb8@make-foo Ak3bb9@foo?) Ak3bb7@foo) Ak3bb5@ls/false) ((lambda (Ak3bbd@t) ((lambda (Ak3bbf@ls/false) (if Ak3bbf@ls/false (apply (lambda (Ak3bc1@foo) Ak3bc1@foo) Ak3bbf@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3bbd@t))) (Ak3048@syntax-dispatch Ak3bbd@t 'any))) Ak3bb3@t))) (Ak3048@syntax-dispatch Ak3bb3@t '(any any any)))) Ak3bb1@spec))) (set! Ak39d4@get-record-constructor-name (lambda (Ak3b9d@spec) ((lambda (Ak3b9f@t) ((lambda (Ak3ba1@ls/false) (if Ak3ba1@ls/false (apply (lambda (Ak3ba3@foo Ak3ba4@make-foo Ak3ba5@foo?) Ak3ba4@make-foo) Ak3ba1@ls/false) ((lambda (Ak3ba9@t) ((lambda (Ak3bab@ls/false) (if (and Ak3bab@ls/false (apply (lambda (Ak3bad@foo) (Ak2e43@id? Ak3bad@foo)) Ak3bab@ls/false)) (apply (lambda (Ak3baf@foo) (Ak39d0@id Ak3baf@foo '"make-" (Ak2e57@stx->datum Ak3baf@foo))) Ak3bab@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3ba9@t))) (Ak3048@syntax-dispatch Ak3ba9@t 'any))) Ak3b9f@t))) (Ak3048@syntax-dispatch Ak3b9f@t '(any any any)))) Ak3b9d@spec))) (set! Ak39d6@get-record-predicate-name (lambda (Ak3b89@spec) ((lambda (Ak3b8b@t) ((lambda (Ak3b8d@ls/false) (if Ak3b8d@ls/false (apply (lambda (Ak3b8f@foo Ak3b90@make-foo Ak3b91@foo?) Ak3b91@foo?) Ak3b8d@ls/false) ((lambda (Ak3b95@t) ((lambda (Ak3b97@ls/false) (if (and Ak3b97@ls/false (apply (lambda (Ak3b99@foo) (Ak2e43@id? Ak3b99@foo)) Ak3b97@ls/false)) (apply (lambda (Ak3b9b@foo) (Ak39d0@id Ak3b9b@foo (Ak2e57@stx->datum Ak3b9b@foo) '"?")) Ak3b97@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b95@t))) (Ak3048@syntax-dispatch Ak3b95@t 'any))) Ak3b8b@t))) (Ak3048@syntax-dispatch Ak3b8b@t '(any any any)))) Ak3b89@spec))) (set! Ak39d8@get-clause (lambda (Ak3b77@id Ak3b78@ls) ((lambda (Ak3b7b@t) ((lambda (Ak3b7d@ls/false) (if Ak3b7d@ls/false (apply (lambda () '#f) Ak3b7d@ls/false) ((lambda (Ak3b7f@t) ((lambda (Ak3b81@ls/false) (if Ak3b81@ls/false (apply (lambda (Ak3b83@x Ak3b84@rest Ak3b85@ls) (if (Ak2e49@free-id=? (Ak2ffe@bless Ak3b77@id) Ak3b83@x) (cons Ak3b83@x Ak3b84@rest) (Ak39d8@get-clause Ak3b77@id Ak3b85@ls))) Ak3b81@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b7f@t))) (Ak3048@syntax-dispatch Ak3b7f@t '((any . any) . any)))) Ak3b7b@t))) (Ak3048@syntax-dispatch Ak3b7b@t '()))) Ak3b78@ls))) (set! Ak39da@foo-rtd-code (lambda (Ak3b25@name Ak3b26@clause* Ak3b27@parent-rtd-code) ((lambda (Ak3b2c@convert-field-spec*) (begin (set! Ak3b2c@convert-field-spec* (lambda (Ak3b5d@ls) (list->vector (map (lambda (Ak3b5f@x) ((lambda (Ak3b61@t) ((lambda (Ak3b63@ls/false) (if Ak3b63@ls/false (apply (lambda (Ak3b65@name Ak3b66@rest) (list 'mutable Ak3b65@name)) Ak3b63@ls/false) ((lambda (Ak3b69@t) ((lambda (Ak3b6b@ls/false) (if Ak3b6b@ls/false (apply (lambda (Ak3b6d@name Ak3b6e@rest) (list 'immutable Ak3b6d@name)) Ak3b6b@ls/false) ((lambda (Ak3b71@t) ((lambda (Ak3b73@ls/false) (if Ak3b73@ls/false (apply (lambda (Ak3b75@name) (list 'immutable Ak3b75@name)) Ak3b73@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b71@t))) (Ak3048@syntax-dispatch Ak3b71@t 'any))) Ak3b69@t))) (Ak3048@syntax-dispatch Ak3b69@t '(#(scheme-id immutable) any . any)))) Ak3b61@t))) (Ak3048@syntax-dispatch Ak3b61@t '(#(scheme-id mutable) any . any)))) Ak3b5f@x)) Ak3b5d@ls)))) ((lambda (Ak3b2d@uid-code Ak3b2e@sealed? Ak3b2f@opaque? Ak3b30@fields) (Ak2ffe@bless (list 'make-record-type-descriptor (list 'quote Ak3b25@name) Ak3b27@parent-rtd-code Ak3b2d@uid-code Ak3b2e@sealed? Ak3b2f@opaque? Ak3b30@fields))) ((lambda (Ak3b35@t) ((lambda (Ak3b37@ls/false) (if Ak3b37@ls/false (apply (lambda () (list 'quote (gensym))) Ak3b37@ls/false) ((lambda (Ak3b39@t) ((lambda (Ak3b3b@ls/false) (if Ak3b3b@ls/false (apply (lambda (Ak3b3d@uid) (list 'quote Ak3b3d@uid)) Ak3b3b@ls/false) ((lambda (Ak3b3f@t) ((lambda (Ak3b41@ls/false) (if Ak3b41@ls/false (apply (lambda () '#f) Ak3b41@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b3f@t))) (Ak3048@syntax-dispatch Ak3b3f@t '_))) Ak3b39@t))) (Ak3048@syntax-dispatch Ak3b39@t '(_ any)))) Ak3b35@t))) (Ak3048@syntax-dispatch Ak3b35@t '(_)))) (Ak39d8@get-clause 'nongenerative Ak3b26@clause*)) ((lambda (Ak3b43@t) ((lambda (Ak3b45@ls/false) (if Ak3b45@ls/false (apply (lambda () '#t) Ak3b45@ls/false) ((lambda (Ak3b47@t) ((lambda (Ak3b49@ls/false) (if Ak3b49@ls/false (apply (lambda () '#f) Ak3b49@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b47@t))) (Ak3048@syntax-dispatch Ak3b47@t '_))) Ak3b43@t))) (Ak3048@syntax-dispatch Ak3b43@t '(_ #(atom #t))))) (Ak39d8@get-clause 'sealed Ak3b26@clause*)) ((lambda (Ak3b4b@t) ((lambda (Ak3b4d@ls/false) (if Ak3b4d@ls/false (apply (lambda () '#t) Ak3b4d@ls/false) ((lambda (Ak3b4f@t) ((lambda (Ak3b51@ls/false) (if Ak3b51@ls/false (apply (lambda () '#f) Ak3b51@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b4f@t))) (Ak3048@syntax-dispatch Ak3b4f@t '_))) Ak3b4b@t))) (Ak3048@syntax-dispatch Ak3b4b@t '(_ #(atom #t))))) (Ak39d8@get-clause 'opaque Ak3b26@clause*)) ((lambda (Ak3b53@t) ((lambda (Ak3b55@ls/false) (if Ak3b55@ls/false (apply (lambda (Ak3b57@field-spec*) (list 'quote (Ak3b2c@convert-field-spec* Ak3b57@field-spec*))) Ak3b55@ls/false) ((lambda (Ak3b59@t) ((lambda (Ak3b5b@ls/false) (if Ak3b5b@ls/false (apply (lambda () ''#()) Ak3b5b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b59@t))) (Ak3048@syntax-dispatch Ak3b59@t '_))) Ak3b53@t))) (Ak3048@syntax-dispatch Ak3b53@t '(_ . each-any)))) (Ak39d8@get-clause 'fields Ak3b26@clause*))))) '#f))) (set! Ak39dc@parent-rtd-code (lambda (Ak3b0d@clause*) ((lambda (Ak3b0f@t) ((lambda (Ak3b11@ls/false) (if Ak3b11@ls/false (apply (lambda (Ak3b13@name) (list 'record-type-descriptor Ak3b13@name)) Ak3b11@ls/false) ((lambda (Ak3b15@t) ((lambda (Ak3b17@ls/false) (if Ak3b17@ls/false (apply (lambda () ((lambda (Ak3b19@t) ((lambda (Ak3b1b@ls/false) (if Ak3b1b@ls/false (apply (lambda (Ak3b1d@rtd Ak3b1e@rcd) Ak3b1d@rtd) Ak3b1b@ls/false) ((lambda (Ak3b21@t) ((lambda (Ak3b23@ls/false) (if Ak3b23@ls/false (apply (lambda () '#f) Ak3b23@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b21@t))) (Ak3048@syntax-dispatch Ak3b21@t '#(atom #f)))) Ak3b19@t))) (Ak3048@syntax-dispatch Ak3b19@t '(_ any any)))) (Ak39d8@get-clause 'parent-rtd Ak3b0d@clause*))) Ak3b17@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b15@t))) (Ak3048@syntax-dispatch Ak3b15@t '#(atom #f)))) Ak3b0f@t))) (Ak3048@syntax-dispatch Ak3b0f@t '(_ any)))) (Ak39d8@get-clause 'parent Ak3b0d@clause*)))) (set! Ak39de@parent-rcd-code (lambda (Ak3af5@clause*) ((lambda (Ak3af7@t) ((lambda (Ak3af9@ls/false) (if Ak3af9@ls/false (apply (lambda (Ak3afb@name) (list 'record-constructor-descriptor Ak3afb@name)) Ak3af9@ls/false) ((lambda (Ak3afd@t) ((lambda (Ak3aff@ls/false) (if Ak3aff@ls/false (apply (lambda () ((lambda (Ak3b01@t) ((lambda (Ak3b03@ls/false) (if Ak3b03@ls/false (apply (lambda (Ak3b05@rtd Ak3b06@rcd) Ak3b06@rcd) Ak3b03@ls/false) ((lambda (Ak3b09@t) ((lambda (Ak3b0b@ls/false) (if Ak3b0b@ls/false (apply (lambda () '#f) Ak3b0b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3b09@t))) (Ak3048@syntax-dispatch Ak3b09@t '#(atom #f)))) Ak3b01@t))) (Ak3048@syntax-dispatch Ak3b01@t '(_ any any)))) (Ak39d8@get-clause 'parent-rtd Ak3af5@clause*))) Ak3aff@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3afd@t))) (Ak3048@syntax-dispatch Ak3afd@t '#(atom #f)))) Ak3af7@t))) (Ak3048@syntax-dispatch Ak3af7@t '(_ any)))) (Ak39d8@get-clause 'parent Ak3af5@clause*)))) (set! Ak39e0@foo-rcd-code (lambda (Ak3aed@clause* Ak3aee@foo-rtd Ak3aef@protocol Ak3af0@parent-rcd-code) (list 'make-record-constructor-descriptor Ak3aee@foo-rtd Ak3af0@parent-rcd-code Ak3aef@protocol))) (set! Ak39e2@get-protocol-code (lambda (Ak3ae1@clause*) ((lambda (Ak3ae3@t) ((lambda (Ak3ae5@ls/false) (if Ak3ae5@ls/false (apply (lambda (Ak3ae7@expr) Ak3ae7@expr) Ak3ae5@ls/false) ((lambda (Ak3ae9@t) ((lambda (Ak3aeb@ls/false) (if Ak3aeb@ls/false (apply (lambda () '#f) Ak3aeb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3ae9@t))) (Ak3048@syntax-dispatch Ak3ae9@t '_))) Ak3ae3@t))) (Ak3048@syntax-dispatch Ak3ae3@t '(_ any)))) (Ak39d8@get-clause 'protocol Ak3ae1@clause*)))) (set! Ak39e4@get-fields (lambda (Ak3acf@clause*) ((lambda (Ak3ad1@t) ((lambda (Ak3ad3@ls/false) (if Ak3ad3@ls/false (apply (lambda () '()) Ak3ad3@ls/false) ((lambda (Ak3ad5@t) ((lambda (Ak3ad7@ls/false) (if Ak3ad7@ls/false (apply (lambda (Ak3ad9@f*) Ak3ad9@f*) Ak3ad7@ls/false) ((lambda (Ak3adb@t) ((lambda (Ak3add@ls/false) (if Ak3add@ls/false (apply (lambda (Ak3adf@rest) (Ak39e4@get-fields Ak3adf@rest)) Ak3add@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3adb@t))) (Ak3048@syntax-dispatch Ak3adb@t '(_ . any)))) Ak3ad5@t))) (Ak3048@syntax-dispatch Ak3ad5@t '((#(scheme-id fields) . each-any) . _)))) Ak3ad1@t))) (Ak3048@syntax-dispatch Ak3ad1@t '()))) Ak3acf@clause*))) (set! Ak39e6@get-mutator-indices (lambda (Ak3ab7@fields) ((letrec ((Ak3ab9@f (lambda (Ak3abb@fields Ak3abc@i) ((lambda (Ak3abf@t) ((lambda (Ak3ac1@ls/false) (if Ak3ac1@ls/false (apply (lambda () '()) Ak3ac1@ls/false) ((lambda (Ak3ac3@t) ((lambda (Ak3ac5@ls/false) (if Ak3ac5@ls/false (apply (lambda (Ak3ac7@rest) (cons Ak3abc@i (Ak3ab9@f Ak3ac7@rest (+ Ak3abc@i '1)))) Ak3ac5@ls/false) ((lambda (Ak3ac9@t) ((lambda (Ak3acb@ls/false) (if Ak3acb@ls/false (apply (lambda (Ak3acd@rest) (Ak3ab9@f Ak3acd@rest (+ Ak3abc@i '1))) Ak3acb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3ac9@t))) (Ak3048@syntax-dispatch Ak3ac9@t '(_ . any)))) Ak3ac3@t))) (Ak3048@syntax-dispatch Ak3ac3@t '((#(scheme-id mutable) . _) . any)))) Ak3abf@t))) (Ak3048@syntax-dispatch Ak3abf@t '()))) Ak3abb@fields)))) Ak3ab9@f) Ak3ab7@fields '0))) (set! Ak39e8@get-mutators (lambda (Ak3a8d@foo Ak3a8e@fields) ((lambda (Ak3a92@gen-name) (begin (set! Ak3a92@gen-name (lambda (Ak3ab5@x) (Ak312c@datum->syntax Ak3a8d@foo (string->symbol (string-append (symbol->string (Ak312e@syntax->datum Ak3a8d@foo)) '"-" (symbol->string (Ak312e@syntax->datum Ak3ab5@x)) '"-set!"))))) ((letrec ((Ak3a93@f (lambda (Ak3a95@fields) ((lambda (Ak3a97@t) ((lambda (Ak3a99@ls/false) (if Ak3a99@ls/false (apply (lambda () '()) Ak3a99@ls/false) ((lambda (Ak3a9b@t) ((lambda (Ak3a9d@ls/false) (if Ak3a9d@ls/false (apply (lambda (Ak3a9f@name Ak3aa0@accessor Ak3aa1@mutator Ak3aa2@rest) (cons Ak3aa1@mutator (Ak3a93@f Ak3aa2@rest))) Ak3a9d@ls/false) ((lambda (Ak3aa7@t) ((lambda (Ak3aa9@ls/false) (if Ak3aa9@ls/false (apply (lambda (Ak3aab@name Ak3aac@rest) (cons (Ak3a92@gen-name Ak3aab@name) (Ak3a93@f Ak3aac@rest))) Ak3aa9@ls/false) ((lambda (Ak3aaf@t) ((lambda (Ak3ab1@ls/false) (if Ak3ab1@ls/false (apply (lambda (Ak3ab3@rest) (Ak3a93@f Ak3ab3@rest)) Ak3ab1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3aaf@t))) (Ak3048@syntax-dispatch Ak3aaf@t '(_ . any)))) Ak3aa7@t))) (Ak3048@syntax-dispatch Ak3aa7@t '((#(scheme-id mutable) any) . any)))) Ak3a9b@t))) (Ak3048@syntax-dispatch Ak3a9b@t '((#(scheme-id mutable) any any any) . any)))) Ak3a97@t))) (Ak3048@syntax-dispatch Ak3a97@t '()))) Ak3a95@fields)))) Ak3a93@f) Ak3a8e@fields))) '#f))) (set! Ak39ea@get-accessors (lambda (Ak3a49@foo Ak3a4a@fields) ((lambda (Ak3a4e@gen-name) (begin (set! Ak3a4e@gen-name (lambda (Ak3a8b@x) (Ak312c@datum->syntax Ak3a49@foo (string->symbol (string-append (symbol->string (Ak312e@syntax->datum Ak3a49@foo)) '"-" (symbol->string (Ak312e@syntax->datum Ak3a8b@x))))))) (map (lambda (Ak3a4f@field) ((lambda (Ak3a51@t) ((lambda (Ak3a53@ls/false) (if (and Ak3a53@ls/false (apply (lambda (Ak3a55@name Ak3a56@accessor Ak3a57@mutator) (Ak2e43@id? Ak3a56@accessor)) Ak3a53@ls/false)) (apply (lambda (Ak3a5b@name Ak3a5c@accessor Ak3a5d@mutator) Ak3a5c@accessor) Ak3a53@ls/false) ((lambda (Ak3a61@t) ((lambda (Ak3a63@ls/false) (if (and Ak3a63@ls/false (apply (lambda (Ak3a65@name Ak3a66@accessor) (Ak2e43@id? Ak3a66@accessor)) Ak3a63@ls/false)) (apply (lambda (Ak3a69@name Ak3a6a@accessor) Ak3a6a@accessor) Ak3a63@ls/false) ((lambda (Ak3a6d@t) ((lambda (Ak3a6f@ls/false) (if (and Ak3a6f@ls/false (apply (lambda (Ak3a71@name) (Ak2e43@id? Ak3a71@name)) Ak3a6f@ls/false)) (apply (lambda (Ak3a73@name) (Ak3a4e@gen-name Ak3a73@name)) Ak3a6f@ls/false) ((lambda (Ak3a75@t) ((lambda (Ak3a77@ls/false) (if (and Ak3a77@ls/false (apply (lambda (Ak3a79@name) (Ak2e43@id? Ak3a79@name)) Ak3a77@ls/false)) (apply (lambda (Ak3a7b@name) (Ak3a4e@gen-name Ak3a7b@name)) Ak3a77@ls/false) ((lambda (Ak3a7d@t) ((lambda (Ak3a7f@ls/false) (if (and Ak3a7f@ls/false (apply (lambda (Ak3a81@name) (Ak2e43@id? Ak3a81@name)) Ak3a7f@ls/false)) (apply (lambda (Ak3a83@name) (Ak3a4e@gen-name Ak3a83@name)) Ak3a7f@ls/false) ((lambda (Ak3a85@t) ((lambda (Ak3a87@ls/false) (if Ak3a87@ls/false (apply (lambda (Ak3a89@others) (Ak3128@syntax-violation '#f '"invalid field spec" Ak3a4f@field)) Ak3a87@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3a85@t))) (Ak3048@syntax-dispatch Ak3a85@t 'any))) Ak3a7d@t))) (Ak3048@syntax-dispatch Ak3a7d@t 'any))) Ak3a75@t))) (Ak3048@syntax-dispatch Ak3a75@t '(#(scheme-id immutable) any)))) Ak3a6d@t))) (Ak3048@syntax-dispatch Ak3a6d@t '(#(scheme-id mutable) any)))) Ak3a61@t))) (Ak3048@syntax-dispatch Ak3a61@t '(#(scheme-id immutable) any any)))) Ak3a51@t))) (Ak3048@syntax-dispatch Ak3a51@t '(#(scheme-id mutable) any any any)))) Ak3a4f@field)) Ak3a4a@fields))) '#f))) (set! Ak39ec@enumerate (lambda (Ak3a41@ls) ((letrec ((Ak3a43@f (lambda (Ak3a45@ls Ak3a46@i) (if (null? Ak3a45@ls) '() (cons Ak3a46@i (Ak3a43@f (cdr Ak3a45@ls) (+ Ak3a46@i '1))))))) Ak3a43@f) Ak3a41@ls '0))) (set! Ak39ee@do-define-record (lambda (Ak3a19@namespec Ak3a1a@clause*) ((lambda (Ak3a1d@foo) ((lambda (Ak3a1f@foo-rtd) ((lambda (Ak3a21@foo-rcd) ((lambda (Ak3a23@protocol) ((lambda (Ak3a25@make-foo) ((lambda (Ak3a27@fields) ((lambda (Ak3a29@idx*) ((lambda (Ak3a2b@foo-x*) ((lambda (Ak3a2d@set-foo-x!*) ((lambda (Ak3a2f@set-foo-idx*) ((lambda (Ak3a31@foo?) ((lambda (Ak3a33@foo-rtd-code) ((lambda (Ak3a35@foo-rcd-code) ((lambda (Ak3a37@protocol-code) ((lambda () (Ak2ffe@bless (cons 'begin (cons (list 'define Ak3a1f@foo-rtd Ak3a33@foo-rtd-code) (cons (list 'define Ak3a23@protocol Ak3a37@protocol-code) (cons (list 'define Ak3a21@foo-rcd Ak3a35@foo-rcd-code) (cons (list 'define-syntax Ak3a1d@foo (list 'list ''$rtd (list 'syntax Ak3a1f@foo-rtd) (list 'syntax Ak3a21@foo-rcd))) (cons (list 'define Ak3a31@foo? (list 'record-predicate Ak3a1f@foo-rtd)) (cons (list 'define Ak3a25@make-foo (list 'record-constructor Ak3a21@foo-rcd)) (append (map (lambda (Ak3a39@foo-x Ak3a3a@idx) (list 'define Ak3a39@foo-x (list 'record-accessor Ak3a1f@foo-rtd Ak3a3a@idx))) Ak3a2b@foo-x* Ak3a29@idx*) (map (lambda (Ak3a3d@set-foo-x! Ak3a3e@idx) (list 'define Ak3a3d@set-foo-x! (list 'record-mutator Ak3a1f@foo-rtd Ak3a3e@idx))) Ak3a2d@set-foo-x!* Ak3a2f@set-foo-idx*))))))))))))) (Ak39e2@get-protocol-code Ak3a1a@clause*))) (Ak39e0@foo-rcd-code Ak3a1a@clause* Ak3a1f@foo-rtd Ak3a23@protocol (Ak39de@parent-rcd-code Ak3a1a@clause*)))) (Ak39da@foo-rtd-code Ak3a1d@foo Ak3a1a@clause* (Ak39dc@parent-rtd-code Ak3a1a@clause*)))) (Ak39d6@get-record-predicate-name Ak3a19@namespec))) (Ak39e6@get-mutator-indices Ak3a27@fields))) (Ak39e8@get-mutators Ak3a1d@foo Ak3a27@fields))) (Ak39ea@get-accessors Ak3a1d@foo Ak3a27@fields))) (Ak39ec@enumerate Ak3a27@fields))) (Ak39e4@get-fields Ak3a1a@clause*))) (Ak39d4@get-record-constructor-name Ak3a19@namespec))) (gensym))) (gensym))) (gensym))) (Ak39d2@get-record-name Ak3a19@namespec)))) (set! Ak39f0@verify-clauses (lambda (Ak39f9@x Ak39fa@cls*) ((lambda (Ak39fe@valid-kwds Ak3a00@free-id-member?) (begin (set! Ak39fe@valid-kwds (map Ak2ffe@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! Ak3a00@free-id-member? (lambda (Ak3a15@x Ak3a16@ls) (and (pair? Ak3a16@ls) (or (Ak2e49@free-id=? Ak3a15@x (car Ak3a16@ls)) (Ak3a00@free-id-member? Ak3a15@x (cdr Ak3a16@ls)))))) ((letrec ((Ak3a01@f (lambda (Ak3a03@cls* Ak3a04@seen*) (if (not (null? Ak3a03@cls*)) ((lambda (Ak3a07@t) ((lambda (Ak3a09@ls/false) (if Ak3a09@ls/false (apply (lambda (Ak3a0b@kwd Ak3a0c@rest) (if (or (not (Ak2e43@id? Ak3a0b@kwd)) (not (Ak3a00@free-id-member? Ak3a0b@kwd Ak39fe@valid-kwds))) (Ak3128@syntax-violation '#f '"not a valid define-record-type keyword" Ak3a0b@kwd) (if (Ak2e4f@bound-id-member? Ak3a0b@kwd Ak3a04@seen*) (Ak3128@syntax-violation '#f '"duplicate use of keyword " Ak39f9@x Ak3a0b@kwd) (Ak3a01@f (cdr Ak3a03@cls*) (cons Ak3a0b@kwd Ak3a04@seen*))))) Ak3a09@ls/false) ((lambda (Ak3a0f@t) ((lambda (Ak3a11@ls/false) (if Ak3a11@ls/false (apply (lambda (Ak3a13@cls) (Ak3128@syntax-violation '#f '"malformed define-record-type clause" Ak3a13@cls)) Ak3a11@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3a0f@t))) (Ak3048@syntax-dispatch Ak3a0f@t 'any))) Ak3a07@t))) (Ak3048@syntax-dispatch Ak3a07@t '(any . any)))) (car Ak3a03@cls*)) (void))))) Ak3a01@f) Ak39fa@cls* '()))) '#f '#f))) ((lambda (Ak39f1@t) ((lambda (Ak39f3@ls/false) (if Ak39f3@ls/false (apply (lambda (Ak39f5@namespec Ak39f6@clause*) (begin (Ak39f0@verify-clauses Ak39cd@x Ak39f6@clause*) (Ak39ee@do-define-record Ak39f5@namespec Ak39f6@clause*))) Ak39f3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak39f1@t))) (Ak3048@syntax-dispatch Ak39f1@t '(_ any . each-any)))) Ak39cd@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! Ak303e@define-condition-type-macro (lambda (Ak3bc9@x) ((lambda (Ak3bcc@mkname) (begin (set! Ak3bcc@mkname (lambda (Ak3bf9@name Ak3bfa@suffix) (Ak312c@datum->syntax Ak3bf9@name (string->symbol (string-append (symbol->string (Ak312e@syntax->datum Ak3bf9@name)) Ak3bfa@suffix))))) ((lambda (Ak3bcd@t) ((lambda (Ak3bcf@ls/false) (if (and Ak3bcf@ls/false (apply (lambda (Ak3bd1@ctxt Ak3bd2@name Ak3bd3@super Ak3bd4@constructor Ak3bd5@predicate Ak3bd6@field* Ak3bd7@accessor*) (and (Ak2e43@id? Ak3bd2@name) (Ak2e43@id? Ak3bd3@super) (Ak2e43@id? Ak3bd4@constructor) (Ak2e43@id? Ak3bd5@predicate) (for-all Ak2e43@id? Ak3bd6@field*) (for-all Ak2e43@id? Ak3bd7@accessor*))) Ak3bcf@ls/false)) (apply (lambda (Ak3bdf@ctxt Ak3be0@name Ak3be1@super Ak3be2@constructor Ak3be3@predicate Ak3be4@field* Ak3be5@accessor*) ((lambda (Ak3bed@aux-accessor*) (Ak2ffe@bless (cons 'begin (cons (cons 'define-record-type (cons (list Ak3be0@name Ak3be2@constructor (gensym)) (cons (list 'parent Ak3be1@super) (cons (cons 'fields (map (lambda (Ak3bef@field Ak3bf0@aux) (list 'immutable Ak3bef@field Ak3bf0@aux)) Ak3be4@field* Ak3bed@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define Ak3be3@predicate (list 'condition-predicate (list 'record-type-descriptor Ak3be0@name))) (map (lambda (Ak3bf3@accessor Ak3bf4@aux) (list 'define Ak3bf3@accessor (list 'condition-accessor (list 'record-type-descriptor Ak3be0@name) Ak3bf4@aux))) Ak3be5@accessor* Ak3bed@aux-accessor*)))))) (map (lambda (Ak3bf7@x) (gensym)) Ak3be5@accessor*))) Ak3bcf@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3bcd@t))) (Ak3048@syntax-dispatch Ak3bcd@t '(any any any any any . #(each (any any)))))) Ak3bc9@x))) '#f))) (set! Ak3040@incorrect-usage-macro (lambda (Ak3bfd@e) (Ak3128@syntax-violation '#f '"incorrect usage of auxiliary keyword" Ak3bfd@e))) (set! Ak3042@parameterize-macro (lambda (Ak3bff@e) ((lambda (Ak3c01@t) ((lambda (Ak3c03@ls/false) (if Ak3c03@ls/false (apply (lambda (Ak3c05@b Ak3c06@b*) (Ak2ffe@bless (cons 'let (cons '() (cons Ak3c05@b Ak3c06@b*))))) Ak3c03@ls/false) ((lambda (Ak3c09@t) ((lambda (Ak3c0b@ls/false) (if Ak3c0b@ls/false (apply (lambda (Ak3c0d@olhs* Ak3c0e@orhs* Ak3c0f@b Ak3c10@b*) ((lambda (Ak3c15@lhs* Ak3c16@rhs*) (Ak2ffe@bless (cons (list 'lambda (append Ak3c15@lhs* Ak3c16@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (Ak3c19@lhs Ak3c1a@rhs) (list 'let (list (list 't (list Ak3c19@lhs))) (list Ak3c19@lhs Ak3c1a@rhs) (cons 'set! (cons Ak3c1a@rhs '(t))))) Ak3c15@lhs* Ak3c16@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons Ak3c0f@b Ak3c10@b*))) '(swap)))))) (append Ak3c0d@olhs* Ak3c0e@orhs*)))) (Ak3116@generate-temporaries Ak3c0d@olhs*) (Ak3116@generate-temporaries Ak3c0e@orhs*))) Ak3c0b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3c09@t))) (Ak3048@syntax-dispatch Ak3c09@t '(_ #(each (any any)) any . each-any)))) Ak3c01@t))) (Ak3048@syntax-dispatch Ak3c01@t '(_ () any . each-any)))) Ak3bff@e))) (set! Ak3044@foreign-call-transformer (lambda (Ak3c1d@e Ak3c1e@r Ak3c1f@mr) ((lambda (Ak3c23@t) ((lambda (Ak3c25@ls/false) (if Ak3c25@ls/false (apply (lambda (Ak3c27@name Ak3c28@arg*) (cons 'foreign-call (cons (Ak306a@chi-expr Ak3c27@name Ak3c1e@r Ak3c1f@mr) (Ak3066@chi-expr* Ak3c28@arg* Ak3c1e@r Ak3c1f@mr)))) Ak3c25@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3c23@t))) (Ak3048@syntax-dispatch Ak3c23@t '(_ any . each-any)))) Ak3c1d@e))) (set! Ak3046@convert-pattern (lambda (Ak3c2b@pattern Ak3c2c@keys) ((lambda (Ak3c30@cvt* Ak3c32@cvt) (begin (set! Ak3c30@cvt* (lambda (Ak3ccf@p* Ak3cd0@n Ak3cd1@ids) (if (null? Ak3ccf@p*) (values '() Ak3cd1@ids) (call-with-values (lambda () (Ak3c30@cvt* (cdr Ak3ccf@p*) Ak3cd0@n Ak3cd1@ids)) (lambda (Ak3cd9@Ak3cd6 Ak3cda@Ak3cd8) ((lambda (Ak3cdd@ids Ak3cde@y) (call-with-values (lambda () (Ak3c32@cvt (car Ak3ccf@p*) Ak3cd0@n Ak3cdd@ids)) (lambda (Ak3ce5@Ak3ce2 Ak3ce6@Ak3ce4) ((lambda (Ak3ce9@ids Ak3cea@x) (values (cons Ak3cea@x Ak3cde@y) Ak3ce9@ids)) Ak3ce6@Ak3ce4 Ak3ce5@Ak3ce2)))) Ak3cda@Ak3cd8 Ak3cd9@Ak3cd6)))))) (set! Ak3c32@cvt (lambda (Ak3c33@p Ak3c34@n Ak3c35@ids) ((lambda (Ak3c39@t) ((lambda (Ak3c3b@ls/false) (if (and Ak3c3b@ls/false (apply (lambda (Ak3c3d@id) (Ak2e43@id? Ak3c3d@id)) Ak3c3b@ls/false)) (apply (lambda (Ak3c3f@id) (if (Ak2e4f@bound-id-member? Ak3c33@p Ak3c2c@keys) (values (vector 'free-id Ak3c33@p) Ak3c35@ids) (if (Ak2e49@free-id=? Ak3c33@p (Ak2fd2@scheme-stx '_)) (values '_ Ak3c35@ids) (values 'any (cons (cons Ak3c33@p Ak3c34@n) Ak3c35@ids))))) Ak3c3b@ls/false) ((lambda (Ak3c41@t) ((lambda (Ak3c43@ls/false) (if (and Ak3c43@ls/false (apply (lambda (Ak3c45@p Ak3c46@dots) (Ak304a@ellipsis? Ak3c46@dots)) Ak3c43@ls/false)) (apply (lambda (Ak3c49@p Ak3c4a@dots) (call-with-values (lambda () (Ak3c32@cvt Ak3c49@p (+ Ak3c34@n '1) Ak3c35@ids)) (lambda (Ak3c51@Ak3c4e Ak3c52@Ak3c50) ((lambda (Ak3c55@ids Ak3c56@p) (values (if (eq? Ak3c56@p 'any) 'each-any (vector 'each Ak3c56@p)) Ak3c55@ids)) Ak3c52@Ak3c50 Ak3c51@Ak3c4e)))) Ak3c43@ls/false) ((lambda (Ak3c59@t) ((lambda (Ak3c5b@ls/false) (if (and Ak3c5b@ls/false (apply (lambda (Ak3c5d@x Ak3c5e@dots Ak3c5f@ys Ak3c60@z) (Ak304a@ellipsis? Ak3c5e@dots)) Ak3c5b@ls/false)) (apply (lambda (Ak3c65@x Ak3c66@dots Ak3c67@ys Ak3c68@z) (call-with-values (lambda () (Ak3c32@cvt Ak3c68@z Ak3c34@n Ak3c35@ids)) (lambda (Ak3c71@Ak3c6e Ak3c72@Ak3c70) ((lambda (Ak3c75@ids Ak3c76@z) (call-with-values (lambda () (Ak3c30@cvt* Ak3c67@ys Ak3c34@n Ak3c75@ids)) (lambda (Ak3c7d@Ak3c7a Ak3c7e@Ak3c7c) ((lambda (Ak3c81@ids Ak3c82@ys) (call-with-values (lambda () (Ak3c32@cvt Ak3c65@x (+ Ak3c34@n '1) Ak3c81@ids)) (lambda (Ak3c89@Ak3c86 Ak3c8a@Ak3c88) ((lambda (Ak3c8d@ids Ak3c8e@x) (values (vector 'each+ Ak3c8e@x (reverse Ak3c82@ys) Ak3c76@z) Ak3c8d@ids)) Ak3c8a@Ak3c88 Ak3c89@Ak3c86)))) Ak3c7e@Ak3c7c Ak3c7d@Ak3c7a)))) Ak3c72@Ak3c70 Ak3c71@Ak3c6e)))) Ak3c5b@ls/false) ((lambda (Ak3c91@t) ((lambda (Ak3c93@ls/false) (if Ak3c93@ls/false (apply (lambda (Ak3c95@x Ak3c96@y) (call-with-values (lambda () (Ak3c32@cvt Ak3c96@y Ak3c34@n Ak3c35@ids)) (lambda (Ak3c9d@Ak3c9a Ak3c9e@Ak3c9c) ((lambda (Ak3ca1@ids Ak3ca2@y) (call-with-values (lambda () (Ak3c32@cvt Ak3c95@x Ak3c34@n Ak3ca1@ids)) (lambda (Ak3ca9@Ak3ca6 Ak3caa@Ak3ca8) ((lambda (Ak3cad@ids Ak3cae@x) (values (cons Ak3cae@x Ak3ca2@y) Ak3cad@ids)) Ak3caa@Ak3ca8 Ak3ca9@Ak3ca6)))) Ak3c9e@Ak3c9c Ak3c9d@Ak3c9a)))) Ak3c93@ls/false) ((lambda (Ak3cb1@t) ((lambda (Ak3cb3@ls/false) (if Ak3cb3@ls/false (apply (lambda () (values '() Ak3c35@ids)) Ak3cb3@ls/false) ((lambda (Ak3cb5@t) ((lambda (Ak3cb7@ls/false) (if (and Ak3cb7@ls/false (apply (lambda (Ak3cb9@p) (not (Ak2e0f@stx? Ak3cb9@p))) Ak3cb7@ls/false)) (apply (lambda (Ak3cbb@p) (call-with-values (lambda () (Ak3c32@cvt Ak3cbb@p Ak3c34@n Ak3c35@ids)) (lambda (Ak3cc1@Ak3cbe Ak3cc2@Ak3cc0) ((lambda (Ak3cc5@ids Ak3cc6@p) (values (vector 'vector Ak3cc6@p) Ak3cc5@ids)) Ak3cc2@Ak3cc0 Ak3cc1@Ak3cbe)))) Ak3cb7@ls/false) ((lambda (Ak3cc9@t) ((lambda (Ak3ccb@ls/false) (if Ak3ccb@ls/false (apply (lambda (Ak3ccd@datum) (values (vector 'atom (Ak2e57@stx->datum Ak3ccd@datum)) Ak3c35@ids)) Ak3ccb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3cc9@t))) (Ak3048@syntax-dispatch Ak3cc9@t 'any))) Ak3cb5@t))) (Ak3048@syntax-dispatch Ak3cb5@t '#(vector each-any)))) Ak3cb1@t))) (Ak3048@syntax-dispatch Ak3cb1@t '()))) Ak3c91@t))) (Ak3048@syntax-dispatch Ak3c91@t '(any . any)))) Ak3c59@t))) (Ak3048@syntax-dispatch Ak3c59@t '(any any . #(each+ any () any))))) Ak3c41@t))) (Ak3048@syntax-dispatch Ak3c41@t '(any any)))) Ak3c39@t))) (Ak3048@syntax-dispatch Ak3c39@t 'any))) Ak3c33@p))) (Ak3c32@cvt Ak3c2b@pattern '0 '()))) '#f '#f))) (set! Ak3048@syntax-dispatch ((lambda () ((lambda (Ak3cee@stx^ Ak3cf0@match-each Ak3cf2@match-each+ Ak3cf4@match-each-any Ak3cf6@match-empty Ak3cf8@combine Ak3cfa@match* Ak3cfc@match) (begin (set! Ak3cee@stx^ (lambda (Ak3dc9@e Ak3dca@m* Ak3dcb@s* Ak3dcc@ae*) (if (and (null? Ak3dca@m*) (null? Ak3dcb@s*) (null? Ak3dcc@ae*)) Ak3dc9@e (Ak2e2b@mkstx Ak3dc9@e Ak3dca@m* Ak3dcb@s* Ak3dcc@ae*)))) (set! Ak3cf0@match-each (lambda (Ak3da9@e Ak3daa@p Ak3dab@m* Ak3dac@s* Ak3dad@ae*) (if (pair? Ak3da9@e) ((lambda (Ak3db3@first) (and Ak3db3@first ((lambda (Ak3db5@rest) (and Ak3db5@rest (cons Ak3db3@first Ak3db5@rest))) (Ak3cf0@match-each (cdr Ak3da9@e) Ak3daa@p Ak3dab@m* Ak3dac@s* Ak3dad@ae*)))) (Ak3cfc@match (car Ak3da9@e) Ak3daa@p Ak3dab@m* Ak3dac@s* Ak3dad@ae* '())) (if (null? Ak3da9@e) '() (if (Ak2e0f@stx? Ak3da9@e) (and (not (Ak2dc9@top-marked? Ak3dab@m*)) (call-with-values (lambda () (join-wraps Ak3dab@m* Ak3dac@s* Ak3dad@ae* Ak3da9@e)) (lambda (Ak3dbd@Ak3db8 Ak3dbe@Ak3dba Ak3dbf@Ak3dbc) ((lambda (Ak3dc3@ae* Ak3dc4@s* Ak3dc5@m*) (Ak3cf0@match-each (Ak2e11@stx-expr Ak3da9@e) Ak3daa@p Ak3dc5@m* Ak3dc4@s* Ak3dc3@ae*)) Ak3dbf@Ak3dbc Ak3dbe@Ak3dba Ak3dbd@Ak3db8)))) (if (Ak2997@Ak286b@annotation? Ak3da9@e) (Ak3cf0@match-each (Ak2999@Ak286f@annotation-expression Ak3da9@e) Ak3daa@p Ak3dab@m* Ak3dac@s* Ak3dad@ae*) '#f)))))) (set! Ak3cf2@match-each+ (lambda (Ak3d69@e Ak3d6a@x-pat Ak3d6b@y-pat Ak3d6c@z-pat Ak3d6d@m* Ak3d6e@s* Ak3d6f@ae* Ak3d70@r) ((letrec ((Ak3d79@f (lambda (Ak3d7b@e Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae*) (if (pair? Ak3d7b@e) (call-with-values (lambda () (Ak3d79@f (cdr Ak3d7b@e) Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae*)) (lambda (Ak3d89@Ak3d84 Ak3d8a@Ak3d86 Ak3d8b@Ak3d88) ((lambda (Ak3d8f@r Ak3d90@y-pat Ak3d91@xr*) (if Ak3d8f@r (if (null? Ak3d90@y-pat) ((lambda (Ak3d95@xr) (if Ak3d95@xr (values (cons Ak3d95@xr Ak3d91@xr*) Ak3d90@y-pat Ak3d8f@r) (values '#f '#f '#f))) (Ak3cfc@match (car Ak3d7b@e) Ak3d6a@x-pat Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae* '())) (values '() (cdr Ak3d90@y-pat) (Ak3cfc@match (car Ak3d7b@e) (car Ak3d90@y-pat) Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae* Ak3d8f@r))) (values '#f '#f '#f))) Ak3d8b@Ak3d88 Ak3d8a@Ak3d86 Ak3d89@Ak3d84))) (if (Ak2e0f@stx? Ak3d7b@e) (if (Ak2dc9@top-marked? Ak3d7c@m*) (values '() Ak3d6b@y-pat (Ak3cfc@match Ak3d7b@e Ak3d6c@z-pat Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae* Ak3d70@r)) (call-with-values (lambda () (join-wraps Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae* Ak3d7b@e)) (lambda (Ak3d9d@Ak3d98 Ak3d9e@Ak3d9a Ak3d9f@Ak3d9c) ((lambda (Ak3da3@ae* Ak3da4@s* Ak3da5@m*) (Ak3d79@f (Ak2e11@stx-expr Ak3d7b@e) Ak3da5@m* Ak3da4@s* Ak3da3@ae*)) Ak3d9f@Ak3d9c Ak3d9e@Ak3d9a Ak3d9d@Ak3d98)))) (if (Ak2997@Ak286b@annotation? Ak3d7b@e) (Ak3d79@f (Ak2999@Ak286f@annotation-expression Ak3d7b@e) Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae*) (values '() Ak3d6b@y-pat (Ak3cfc@match Ak3d7b@e Ak3d6c@z-pat Ak3d7c@m* Ak3d7d@s* Ak3d7e@ae* Ak3d70@r)))))))) Ak3d79@f) Ak3d69@e Ak3d6d@m* Ak3d6e@s* Ak3d6f@ae*))) (set! Ak3cf4@match-each-any (lambda (Ak3d4d@e Ak3d4e@m* Ak3d4f@s* Ak3d50@ae*) (if (pair? Ak3d4d@e) ((lambda (Ak3d55@l) (and Ak3d55@l (cons (Ak3cee@stx^ (car Ak3d4d@e) Ak3d4e@m* Ak3d4f@s* Ak3d50@ae*) Ak3d55@l))) (Ak3cf4@match-each-any (cdr Ak3d4d@e) Ak3d4e@m* Ak3d4f@s* Ak3d50@ae*)) (if (null? Ak3d4d@e) '() (if (Ak2e0f@stx? Ak3d4d@e) (and (not (Ak2dc9@top-marked? Ak3d4e@m*)) (call-with-values (lambda () (join-wraps Ak3d4e@m* Ak3d4f@s* Ak3d50@ae* Ak3d4d@e)) (lambda (Ak3d5d@Ak3d58 Ak3d5e@Ak3d5a Ak3d5f@Ak3d5c) ((lambda (Ak3d63@ae* Ak3d64@s* Ak3d65@m*) (Ak3cf4@match-each-any (Ak2e11@stx-expr Ak3d4d@e) Ak3d65@m* Ak3d64@s* Ak3d63@ae*)) Ak3d5f@Ak3d5c Ak3d5e@Ak3d5a Ak3d5d@Ak3d58)))) (if (Ak2997@Ak286b@annotation? Ak3d4d@e) (Ak3cf4@match-each-any (Ak2999@Ak286f@annotation-expression Ak3d4d@e) Ak3d4e@m* Ak3d4f@s* Ak3d50@ae*) '#f)))))) (set! Ak3cf6@match-empty (lambda (Ak3d47@p Ak3d48@r) (if (null? Ak3d47@p) Ak3d48@r (if (eq? Ak3d47@p '_) Ak3d48@r (if (eq? Ak3d47@p 'any) (cons '() Ak3d48@r) (if (pair? Ak3d47@p) (Ak3cf6@match-empty (car Ak3d47@p) (Ak3cf6@match-empty (cdr Ak3d47@p) Ak3d48@r)) (if (eq? Ak3d47@p 'each-any) (cons '() Ak3d48@r) ((lambda (Ak3d4b@t) (if (memv Ak3d4b@t '(each)) (Ak3cf6@match-empty (vector-ref Ak3d47@p '1) Ak3d48@r) (if (memv Ak3d4b@t '(each+)) (Ak3cf6@match-empty (vector-ref Ak3d47@p '1) (Ak3cf6@match-empty (reverse (vector-ref Ak3d47@p '2)) (Ak3cf6@match-empty (vector-ref Ak3d47@p '3) Ak3d48@r))) (if (memv Ak3d4b@t '(free-id atom)) Ak3d48@r (if (memv Ak3d4b@t '(scheme-id atom)) Ak3d48@r (if (memv Ak3d4b@t '(vector)) (Ak3cf6@match-empty (vector-ref Ak3d47@p '1) Ak3d48@r) (assertion-violation 'syntax-dispatch '"invalid pattern" Ak3d47@p))))))) (vector-ref Ak3d47@p '0))))))))) (set! Ak3cf8@combine (lambda (Ak3d43@r* Ak3d44@r) (if (null? (car Ak3d43@r*)) Ak3d44@r (cons (map car Ak3d43@r*) (Ak3cf8@combine (map cdr Ak3d43@r*) Ak3d44@r))))) (set! Ak3cfa@match* (lambda (Ak3d1f@e Ak3d20@p Ak3d21@m* Ak3d22@s* Ak3d23@ae* Ak3d24@r) (if (null? Ak3d20@p) (and (null? Ak3d1f@e) Ak3d24@r) (if (pair? Ak3d20@p) (and (pair? Ak3d1f@e) (Ak3cfc@match (car Ak3d1f@e) (car Ak3d20@p) Ak3d21@m* Ak3d22@s* Ak3d23@ae* (Ak3cfc@match (cdr Ak3d1f@e) (cdr Ak3d20@p) Ak3d21@m* Ak3d22@s* Ak3d23@ae* Ak3d24@r))) (if (eq? Ak3d20@p 'each-any) ((lambda (Ak3d2b@l) (and Ak3d2b@l (cons Ak3d2b@l Ak3d24@r))) (Ak3cf4@match-each-any Ak3d1f@e Ak3d21@m* Ak3d22@s* Ak3d23@ae*)) ((lambda (Ak3d2d@t) (if (memv Ak3d2d@t '(each)) (if (null? Ak3d1f@e) (Ak3cf6@match-empty (vector-ref Ak3d20@p '1) Ak3d24@r) ((lambda (Ak3d2f@r*) (and Ak3d2f@r* (Ak3cf8@combine Ak3d2f@r* Ak3d24@r))) (Ak3cf0@match-each Ak3d1f@e (vector-ref Ak3d20@p '1) Ak3d21@m* Ak3d22@s* Ak3d23@ae*))) (if (memv Ak3d2d@t '(free-id)) (and (symbol? Ak3d1f@e) (Ak2dc9@top-marked? Ak3d21@m*) (Ak2e49@free-id=? (Ak3cee@stx^ Ak3d1f@e Ak3d21@m* Ak3d22@s* Ak3d23@ae*) (vector-ref Ak3d20@p '1)) Ak3d24@r) (if (memv Ak3d2d@t '(scheme-id)) (and (symbol? Ak3d1f@e) (Ak2dc9@top-marked? Ak3d21@m*) (Ak2e49@free-id=? (Ak3cee@stx^ Ak3d1f@e Ak3d21@m* Ak3d22@s* Ak3d23@ae*) (Ak2fd2@scheme-stx (vector-ref Ak3d20@p '1))) Ak3d24@r) (if (memv Ak3d2d@t '(each+)) (call-with-values (lambda () (Ak3cf2@match-each+ Ak3d1f@e (vector-ref Ak3d20@p '1) (vector-ref Ak3d20@p '2) (vector-ref Ak3d20@p '3) Ak3d21@m* Ak3d22@s* Ak3d23@ae* Ak3d24@r)) (lambda (Ak3d37@Ak3d32 Ak3d38@Ak3d34 Ak3d39@Ak3d36) ((lambda (Ak3d3d@r Ak3d3e@y-pat Ak3d3f@xr*) (and Ak3d3d@r (null? Ak3d3e@y-pat) (if (null? Ak3d3f@xr*) (Ak3cf6@match-empty (vector-ref Ak3d20@p '1) Ak3d3d@r) (Ak3cf8@combine Ak3d3f@xr* Ak3d3d@r)))) Ak3d39@Ak3d36 Ak3d38@Ak3d34 Ak3d37@Ak3d32))) (if (memv Ak3d2d@t '(atom)) (and (fast-equal? (vector-ref Ak3d20@p '1) (Ak2e55@strip Ak3d1f@e Ak3d21@m*)) Ak3d24@r) (if (memv Ak3d2d@t '(vector)) (and (vector? Ak3d1f@e) (Ak3cfc@match (vector->list Ak3d1f@e) (vector-ref Ak3d20@p '1) Ak3d21@m* Ak3d22@s* Ak3d23@ae* Ak3d24@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" Ak3d20@p)))))))) (vector-ref Ak3d20@p '0))))))) (set! Ak3cfc@match (lambda (Ak3d01@e Ak3d02@p Ak3d03@m* Ak3d04@s* Ak3d05@ae* Ak3d06@r) (if (not Ak3d06@r) '#f (if (eq? Ak3d02@p '_) Ak3d06@r (if (eq? Ak3d02@p 'any) (cons (Ak3cee@stx^ Ak3d01@e Ak3d03@m* Ak3d04@s* Ak3d05@ae*) Ak3d06@r) (if (Ak2e0f@stx? Ak3d01@e) (and (not (Ak2dc9@top-marked? Ak3d03@m*)) (call-with-values (lambda () (join-wraps Ak3d03@m* Ak3d04@s* Ak3d05@ae* Ak3d01@e)) (lambda (Ak3d13@Ak3d0e Ak3d14@Ak3d10 Ak3d15@Ak3d12) ((lambda (Ak3d19@ae* Ak3d1a@s* Ak3d1b@m*) (Ak3cfc@match (Ak2e11@stx-expr Ak3d01@e) Ak3d02@p Ak3d1b@m* Ak3d1a@s* Ak3d19@ae* Ak3d06@r)) Ak3d15@Ak3d12 Ak3d14@Ak3d10 Ak3d13@Ak3d0e)))) (if (Ak2997@Ak286b@annotation? Ak3d01@e) (Ak3cfc@match (Ak2999@Ak286f@annotation-expression Ak3d01@e) Ak3d02@p Ak3d03@m* Ak3d04@s* Ak3d05@ae* Ak3d06@r) (Ak3cfa@match* Ak3d01@e Ak3d02@p Ak3d03@m* Ak3d04@s* Ak3d05@ae* Ak3d06@r)))))))) (lambda (Ak3cfd@e Ak3cfe@p) (Ak3cfc@match Ak3cfd@e Ak3cfe@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Ak304a@ellipsis? (lambda (Ak3dd1@x) (and (Ak2e43@id? Ak3dd1@x) (Ak2e49@free-id=? Ak3dd1@x (Ak2fd2@scheme-stx '...))))) (set! Ak304c@underscore? (lambda (Ak3dd3@x) (and (Ak2e43@id? Ak3dd3@x) (Ak2e49@free-id=? Ak3dd3@x (Ak2fd2@scheme-stx '_))))) (set! Ak304e@verify-literals (lambda (Ak3dd5@lits Ak3dd6@expr) (for-each (lambda (Ak3dd9@x) (if (or (not (Ak2e43@id? Ak3dd9@x)) (Ak304a@ellipsis? Ak3dd9@x) (Ak304c@underscore? Ak3dd9@x)) (Ak3128@syntax-violation '#f '"invalid literal" Ak3dd6@expr Ak3dd9@x) (void))) Ak3dd5@lits))) (set! Ak3050@syntax-case-transformer ((lambda () ((lambda (Ak3ddc@build-dispatch-call Ak3dde@invalid-ids-error Ak3de0@gen-clause Ak3de2@gen-syntax-case) (begin (set! Ak3ddc@build-dispatch-call (lambda (Ak3e4d@pvars Ak3e4e@expr Ak3e4f@y Ak3e50@r Ak3e51@mr) ((lambda (Ak3e57@ids Ak3e58@levels) ((lambda (Ak3e5b@labels Ak3e5c@new-vars) ((lambda (Ak3e5f@body) (list '(primitive apply) (Ak2da7@Ak2ce7@build-lambda '#f Ak3e5c@new-vars Ak3e5f@body) Ak3e4f@y)) (Ak306a@chi-expr (Ak2e2f@add-subst (Ak2e03@make-full-rib Ak3e57@ids Ak3e5b@labels) Ak3e4e@expr) (append (map (lambda (Ak3e61@label Ak3e62@var Ak3e63@level) (cons Ak3e61@label (Ak2e5d@make-binding 'syntax (cons Ak3e62@var Ak3e63@level)))) Ak3e5b@labels Ak3e5c@new-vars (map cdr Ak3e4d@pvars)) Ak3e50@r) Ak3e51@mr))) (map Ak2dcf@gen-label Ak3e57@ids) (map Ak2dcb@gen-lexical Ak3e57@ids))) (map car Ak3e4d@pvars) (map cdr Ak3e4d@pvars)))) (set! Ak3dde@invalid-ids-error (lambda (Ak3e41@id* Ak3e42@e Ak3e43@class) ((letrec ((Ak3e47@find (lambda (Ak3e49@id* Ak3e4a@ok*) (if (null? Ak3e49@id*) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3e42@e) (if (Ak2e43@id? (car Ak3e49@id*)) (if (Ak2e4f@bound-id-member? (car Ak3e49@id*) Ak3e4a@ok*) (Ak3124@syntax-error (car Ak3e49@id*) '"duplicate " Ak3e43@class) (Ak3e47@find (cdr Ak3e49@id*) (cons (car Ak3e49@id*) Ak3e4a@ok*))) (Ak3124@syntax-error (car Ak3e49@id*) '"invalid " Ak3e43@class)))))) Ak3e47@find) Ak3e41@id* '()))) (set! Ak3de0@gen-clause (lambda (Ak3e19@x Ak3e1a@keys Ak3e1b@clauses Ak3e1c@r Ak3e1d@mr Ak3e1e@pat Ak3e1f@fender Ak3e20@expr) (call-with-values (lambda () (Ak3046@convert-pattern Ak3e1e@pat Ak3e1a@keys)) (lambda (Ak3e2d@Ak3e2a Ak3e2e@Ak3e2c) ((lambda (Ak3e31@pvars Ak3e32@p) (if (not (Ak2e4d@distinct-bound-ids? (map car Ak3e31@pvars))) (Ak3dde@invalid-ids-error (map car Ak3e31@pvars) Ak3e1e@pat '"pattern variable") (if (not (for-all (lambda (Ak3e35@x) (not (Ak304a@ellipsis? (car Ak3e35@x)))) Ak3e31@pvars)) (Ak3128@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" Ak3e1e@pat) ((lambda (Ak3e37@y) ((lambda (Ak3e39@test) ((lambda (Ak3e3b@conseq) ((lambda (Ak3e3d@altern) (list (Ak2da7@Ak2ce7@build-lambda '#f (list Ak3e37@y) (list 'if Ak3e39@test Ak3e3b@conseq Ak3e3d@altern)) (list '(primitive syntax-dispatch) Ak3e19@x (list 'quote Ak3e32@p)))) (Ak3de2@gen-syntax-case Ak3e19@x Ak3e1a@keys Ak3e1b@clauses Ak3e1c@r Ak3e1d@mr))) (Ak3ddc@build-dispatch-call Ak3e31@pvars Ak3e20@expr Ak3e37@y Ak3e1c@r Ak3e1d@mr))) (if (eq? Ak3e1f@fender '#t) Ak3e37@y ((lambda (Ak3e3f@call) (list 'if Ak3e37@y Ak3e3f@call (list 'quote '#f))) (Ak3ddc@build-dispatch-call Ak3e31@pvars Ak3e1f@fender Ak3e37@y Ak3e1c@r Ak3e1d@mr))))) (Ak2dcb@gen-lexical 'tmp))))) Ak3e2e@Ak3e2c Ak3e2d@Ak3e2a))))) (set! Ak3de2@gen-syntax-case (lambda (Ak3df7@x Ak3df8@keys Ak3df9@clauses Ak3dfa@r Ak3dfb@mr) (if (null? Ak3df9@clauses) (list '(primitive syntax-error) Ak3df7@x) ((lambda (Ak3e01@t) ((lambda (Ak3e03@ls/false) (if Ak3e03@ls/false (apply (lambda (Ak3e05@pat Ak3e06@expr) (if (and (Ak2e43@id? Ak3e05@pat) (not (Ak2e4f@bound-id-member? Ak3e05@pat Ak3df8@keys)) (not (Ak304a@ellipsis? Ak3e05@pat))) (if (Ak2e49@free-id=? Ak3e05@pat (Ak2fd2@scheme-stx '_)) (Ak306a@chi-expr Ak3e06@expr Ak3dfa@r Ak3dfb@mr) ((lambda (Ak3e09@lab Ak3e0a@lex) ((lambda (Ak3e0d@body) (list (Ak2da7@Ak2ce7@build-lambda '#f (list Ak3e0a@lex) Ak3e0d@body) Ak3df7@x)) (Ak306a@chi-expr (Ak2e2f@add-subst (Ak2e03@make-full-rib (list Ak3e05@pat) (list Ak3e09@lab)) Ak3e06@expr) (cons (cons Ak3e09@lab (Ak2e5d@make-binding 'syntax (cons Ak3e0a@lex '0))) Ak3dfa@r) Ak3dfb@mr))) (Ak2dcf@gen-label Ak3e05@pat) (Ak2dcb@gen-lexical Ak3e05@pat))) (Ak3de0@gen-clause Ak3df7@x Ak3df8@keys (cdr Ak3df9@clauses) Ak3dfa@r Ak3dfb@mr Ak3e05@pat '#t Ak3e06@expr))) Ak3e03@ls/false) ((lambda (Ak3e0f@t) ((lambda (Ak3e11@ls/false) (if Ak3e11@ls/false (apply (lambda (Ak3e13@pat Ak3e14@fender Ak3e15@expr) (Ak3de0@gen-clause Ak3df7@x Ak3df8@keys (cdr Ak3df9@clauses) Ak3dfa@r Ak3dfb@mr Ak3e13@pat Ak3e14@fender Ak3e15@expr)) Ak3e11@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3e0f@t))) (Ak3048@syntax-dispatch Ak3e0f@t '(any any any)))) Ak3e01@t))) (Ak3048@syntax-dispatch Ak3e01@t '(any any)))) (car Ak3df9@clauses))))) (lambda (Ak3de3@e Ak3de4@r Ak3de5@mr) ((lambda (Ak3de9@t) ((lambda (Ak3deb@ls/false) (if Ak3deb@ls/false (apply (lambda (Ak3ded@expr Ak3dee@keys Ak3def@clauses) (begin (Ak304e@verify-literals Ak3dee@keys Ak3de3@e) ((lambda (Ak3df3@x) ((lambda (Ak3df5@body) (list (Ak2da7@Ak2ce7@build-lambda '#f (list Ak3df3@x) Ak3df5@body) (Ak306a@chi-expr Ak3ded@expr Ak3de4@r Ak3de5@mr))) (Ak3de2@gen-syntax-case Ak3df3@x Ak3dee@keys Ak3def@clauses Ak3de4@r Ak3de5@mr))) (Ak2dcb@gen-lexical 'tmp)))) Ak3deb@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3de9@t))) (Ak3048@syntax-dispatch Ak3de9@t '(_ any each-any . each-any)))) Ak3de3@e)))) '#f '#f '#f '#f)))) (set! Ak3052@ellipsis-map (lambda (Ak3e67@proc Ak3e68@ls . Ak3e6b@ls*) ((lambda (Ak3e6e@who) (begin (set! Ak3e6e@who '...) (begin (if (not (list? Ak3e68@ls)) (assertion-violation Ak3e6e@who '"not a list" Ak3e68@ls) (void)) (if (not (null? Ak3e6b@ls*)) ((lambda (Ak3e6f@n) (for-each (lambda (Ak3e71@x) (begin (if (not (list? Ak3e71@x)) (assertion-violation Ak3e6e@who '"not a list" Ak3e71@x) (void)) (if (not (= (length Ak3e71@x) Ak3e6f@n)) (assertion-violation Ak3e6e@who '"length mismatch" Ak3e68@ls Ak3e71@x) (void)))) Ak3e6b@ls*)) (length Ak3e68@ls)) (void)) (apply map Ak3e67@proc Ak3e68@ls Ak3e6b@ls*)))) '#f))) (set! Ak3054@syntax-transformer ((lambda () ((lambda (Ak3e74@gen-syntax Ak3e76@gen-ref Ak3e78@gen-append Ak3e7a@gen-mappend Ak3e7c@gen-map Ak3e7e@gen-cons Ak3e80@gen-vector Ak3e82@regen) (begin (set! Ak3e74@gen-syntax (lambda (Ak3eeb@src Ak3eec@e Ak3eed@r Ak3eee@maps Ak3eef@ellipsis? Ak3ef0@vec?) ((lambda (Ak3ef7@t) ((lambda (Ak3ef9@ls/false) (if (and Ak3ef9@ls/false (apply (lambda (Ak3efb@dots) (Ak3eef@ellipsis? Ak3efb@dots)) Ak3ef9@ls/false)) (apply (lambda (Ak3efd@dots) (Ak3128@syntax-violation '#f '"misplaced ellipsis in syntax form" Ak3eeb@src)) Ak3ef9@ls/false) ((lambda (Ak3eff@t) ((lambda (Ak3f01@ls/false) (if (and Ak3f01@ls/false (apply (lambda (Ak3f03@id) (Ak2e43@id? Ak3f03@id)) Ak3f01@ls/false)) (apply (lambda (Ak3f05@id) ((lambda (Ak3f07@label) ((lambda (Ak3f09@b) ((lambda () (if (eq? (Ak2e5f@binding-type Ak3f09@b) 'syntax) (call-with-values (lambda () ((lambda (Ak3f0f@var.lev) (Ak3e76@gen-ref Ak3eeb@src (car Ak3f0f@var.lev) (cdr Ak3f0f@var.lev) Ak3eee@maps)) (Ak2e61@binding-value Ak3f09@b))) (lambda (Ak3f11@Ak3f0c Ak3f12@Ak3f0e) ((lambda (Ak3f15@maps Ak3f16@var) (values (list 'ref Ak3f16@var) Ak3f15@maps)) Ak3f12@Ak3f0e Ak3f11@Ak3f0c))) (values (list 'quote Ak3eec@e) Ak3eee@maps))))) (Ak2e5b@label->binding Ak3f07@label Ak3eed@r))) (Ak2e59@id->label Ak3eec@e))) Ak3f01@ls/false) ((lambda (Ak3f19@t) ((lambda (Ak3f1b@ls/false) (if (and Ak3f1b@ls/false (apply (lambda (Ak3f1d@dots Ak3f1e@e) (Ak3eef@ellipsis? Ak3f1d@dots)) Ak3f1b@ls/false)) (apply (lambda (Ak3f21@dots Ak3f22@e) (if Ak3ef0@vec? (Ak3128@syntax-violation '#f '"misplaced ellipsis in syntax form" Ak3eeb@src) (Ak3e74@gen-syntax Ak3eeb@src Ak3f22@e Ak3eed@r Ak3eee@maps (lambda (Ak3f25@x) '#f) '#f))) Ak3f1b@ls/false) ((lambda (Ak3f27@t) ((lambda (Ak3f29@ls/false) (if (and Ak3f29@ls/false (apply (lambda (Ak3f2b@x Ak3f2c@dots Ak3f2d@y) (Ak3eef@ellipsis? Ak3f2c@dots)) Ak3f29@ls/false)) (apply (lambda (Ak3f31@x Ak3f32@dots Ak3f33@y) ((letrec ((Ak3f37@f (lambda (Ak3f39@y Ak3f3a@k) ((lambda (Ak3f3d@t) ((lambda (Ak3f3f@ls/false) (if Ak3f3f@ls/false (apply (lambda () (Ak3f3a@k Ak3eee@maps)) Ak3f3f@ls/false) ((lambda (Ak3f41@t) ((lambda (Ak3f43@ls/false) (if (and Ak3f43@ls/false (apply (lambda (Ak3f45@dots Ak3f46@y) (Ak3eef@ellipsis? Ak3f45@dots)) Ak3f43@ls/false)) (apply (lambda (Ak3f49@dots Ak3f4a@y) (Ak3f37@f Ak3f4a@y (lambda (Ak3f4d@maps) (call-with-values (lambda () (Ak3f3a@k (cons '() Ak3f4d@maps))) (lambda (Ak3f53@Ak3f50 Ak3f54@Ak3f52) ((lambda (Ak3f57@maps Ak3f58@x) (if (null? (car Ak3f57@maps)) (Ak3128@syntax-violation '#f '"extra ellipsis in syntax form" Ak3eeb@src) (values (Ak3e7a@gen-mappend Ak3f58@x (car Ak3f57@maps)) (cdr Ak3f57@maps)))) Ak3f54@Ak3f52 Ak3f53@Ak3f50)))))) Ak3f43@ls/false) ((lambda (Ak3f5b@t) ((lambda (Ak3f5d@ls/false) (if Ak3f5d@ls/false (apply (lambda () (call-with-values (lambda () (Ak3e74@gen-syntax Ak3eeb@src Ak3f39@y Ak3eed@r Ak3eee@maps Ak3eef@ellipsis? Ak3ef0@vec?)) (lambda (Ak3f63@Ak3f60 Ak3f64@Ak3f62) ((lambda (Ak3f67@maps Ak3f68@y) (call-with-values (lambda () (Ak3f3a@k Ak3f67@maps)) (lambda (Ak3f6f@Ak3f6c Ak3f70@Ak3f6e) ((lambda (Ak3f73@maps Ak3f74@x) (values (Ak3e78@gen-append Ak3f74@x Ak3f68@y) Ak3f73@maps)) Ak3f70@Ak3f6e Ak3f6f@Ak3f6c)))) Ak3f64@Ak3f62 Ak3f63@Ak3f60)))) Ak3f5d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3f5b@t))) (Ak3048@syntax-dispatch Ak3f5b@t '_))) Ak3f41@t))) (Ak3048@syntax-dispatch Ak3f41@t '(any . any)))) Ak3f3d@t))) (Ak3048@syntax-dispatch Ak3f3d@t '()))) Ak3f39@y)))) Ak3f37@f) Ak3f33@y (lambda (Ak3f77@maps) (call-with-values (lambda () (Ak3e74@gen-syntax Ak3eeb@src Ak3f31@x Ak3eed@r (cons '() Ak3f77@maps) Ak3eef@ellipsis? '#f)) (lambda (Ak3f7d@Ak3f7a Ak3f7e@Ak3f7c) ((lambda (Ak3f81@maps Ak3f82@x) (if (null? (car Ak3f81@maps)) (Ak3128@syntax-violation '#f '"extra ellipsis in syntax form" Ak3eeb@src) (values (Ak3e7c@gen-map Ak3f82@x (car Ak3f81@maps)) (cdr Ak3f81@maps)))) Ak3f7e@Ak3f7c Ak3f7d@Ak3f7a)))))) Ak3f29@ls/false) ((lambda (Ak3f85@t) ((lambda (Ak3f87@ls/false) (if Ak3f87@ls/false (apply (lambda (Ak3f89@x Ak3f8a@y) (call-with-values (lambda () (Ak3e74@gen-syntax Ak3eeb@src Ak3f89@x Ak3eed@r Ak3eee@maps Ak3eef@ellipsis? '#f)) (lambda (Ak3f91@Ak3f8e Ak3f92@Ak3f90) ((lambda (Ak3f95@maps Ak3f96@xnew) (call-with-values (lambda () (Ak3e74@gen-syntax Ak3eeb@src Ak3f8a@y Ak3eed@r Ak3f95@maps Ak3eef@ellipsis? Ak3ef0@vec?)) (lambda (Ak3f9d@Ak3f9a Ak3f9e@Ak3f9c) ((lambda (Ak3fa1@maps Ak3fa2@ynew) (values (Ak3e7e@gen-cons Ak3eec@e Ak3f89@x Ak3f8a@y Ak3f96@xnew Ak3fa2@ynew) Ak3fa1@maps)) Ak3f9e@Ak3f9c Ak3f9d@Ak3f9a)))) Ak3f92@Ak3f90 Ak3f91@Ak3f8e)))) Ak3f87@ls/false) ((lambda (Ak3fa5@t) ((lambda (Ak3fa7@ls/false) (if Ak3fa7@ls/false (apply (lambda (Ak3fa9@ls) (call-with-values (lambda () (Ak3e74@gen-syntax Ak3eeb@src Ak3fa9@ls Ak3eed@r Ak3eee@maps Ak3eef@ellipsis? '#t)) (lambda (Ak3faf@Ak3fac Ak3fb0@Ak3fae) ((lambda (Ak3fb3@maps Ak3fb4@lsnew) (values (Ak3e80@gen-vector Ak3eec@e Ak3fa9@ls Ak3fb4@lsnew) Ak3fb3@maps)) Ak3fb0@Ak3fae Ak3faf@Ak3fac)))) Ak3fa7@ls/false) ((lambda (Ak3fb7@t) ((lambda (Ak3fb9@ls/false) (if Ak3fb9@ls/false (apply (lambda () (values (list 'quote Ak3eec@e) Ak3eee@maps)) Ak3fb9@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3fb7@t))) (Ak3048@syntax-dispatch Ak3fb7@t '_))) Ak3fa5@t))) (Ak3048@syntax-dispatch Ak3fa5@t '#(vector each-any)))) Ak3f85@t))) (Ak3048@syntax-dispatch Ak3f85@t '(any . any)))) Ak3f27@t))) (Ak3048@syntax-dispatch Ak3f27@t '(any any . any)))) Ak3f19@t))) (Ak3048@syntax-dispatch Ak3f19@t '(any any)))) Ak3eff@t))) (Ak3048@syntax-dispatch Ak3eff@t 'any))) Ak3ef7@t))) (Ak3048@syntax-dispatch Ak3ef7@t 'any))) Ak3eec@e))) (set! Ak3e76@gen-ref (lambda (Ak3ed1@src Ak3ed2@var Ak3ed3@level Ak3ed4@maps) (if (= Ak3ed3@level '0) (values Ak3ed2@var Ak3ed4@maps) (if (null? Ak3ed4@maps) (Ak3128@syntax-violation '#f '"missing ellipsis in syntax form" Ak3ed1@src) (call-with-values (lambda () (Ak3e76@gen-ref Ak3ed1@src Ak3ed2@var (- Ak3ed3@level '1) (cdr Ak3ed4@maps))) (lambda (Ak3edd@Ak3eda Ak3ede@Ak3edc) ((lambda (Ak3ee1@outer-maps Ak3ee2@outer-var) ((lambda (Ak3ee5@t) (if Ak3ee5@t ((lambda (Ak3ee7@b) (values (cdr Ak3ee7@b) Ak3ed4@maps)) Ak3ee5@t) ((lambda (Ak3ee9@inner-var) (values Ak3ee9@inner-var (cons (cons (cons Ak3ee2@outer-var Ak3ee9@inner-var) (car Ak3ed4@maps)) Ak3ee1@outer-maps))) (Ak2dcb@gen-lexical 'tmp)))) (assq Ak3ee2@outer-var (car Ak3ed4@maps)))) Ak3ede@Ak3edc Ak3edd@Ak3eda))))))) (set! Ak3e78@gen-append (lambda (Ak3ecd@x Ak3ece@y) (if (fast-equal? Ak3ece@y ''()) Ak3ecd@x (list 'append Ak3ecd@x Ak3ece@y)))) (set! Ak3e7a@gen-mappend (lambda (Ak3ec9@e Ak3eca@map-env) (list 'apply '(primitive append) (Ak3e7c@gen-map Ak3ec9@e Ak3eca@map-env)))) (set! Ak3e7c@gen-map (lambda (Ak3eb7@e Ak3eb8@map-env) ((lambda (Ak3ebb@formals Ak3ebc@actuals) (if (eq? (car Ak3eb7@e) 'ref) (car Ak3ebc@actuals) (if (for-all (lambda (Ak3ebf@x) (and (eq? (car Ak3ebf@x) 'ref) (memq (cadr Ak3ebf@x) Ak3ebb@formals))) (cdr Ak3eb7@e)) ((lambda (Ak3ec1@args) (cons 'map (cons (list 'primitive (car Ak3eb7@e)) Ak3ec1@args))) (map ((lambda (Ak3ec3@r) (lambda (Ak3ec5@x) (cdr (assq (cadr Ak3ec5@x) Ak3ec3@r)))) (map cons Ak3ebb@formals Ak3ebc@actuals)) (cdr Ak3eb7@e))) (cons* 'map (list 'lambda Ak3ebb@formals Ak3eb7@e) Ak3ebc@actuals)))) (map cdr Ak3eb8@map-env) (map (lambda (Ak3ec7@x) (list 'ref (car Ak3ec7@x))) Ak3eb8@map-env)))) (set! Ak3e7e@gen-cons (lambda (Ak3ea7@e Ak3ea8@x Ak3ea9@y Ak3eaa@xnew Ak3eab@ynew) ((lambda (Ak3eb1@t) (if (memv Ak3eb1@t '(quote)) (if (eq? (car Ak3eaa@xnew) 'quote) ((lambda (Ak3eb3@xnew Ak3eb4@ynew) (if (and (eq? Ak3eb3@xnew Ak3ea8@x) (eq? Ak3eb4@ynew Ak3ea9@y)) (list 'quote Ak3ea7@e) (list 'quote (cons Ak3eb3@xnew Ak3eb4@ynew)))) (cadr Ak3eaa@xnew) (cadr Ak3eab@ynew)) (if (null? (cadr Ak3eab@ynew)) (list 'list Ak3eaa@xnew) (list 'cons Ak3eaa@xnew Ak3eab@ynew))) (if (memv Ak3eb1@t '(list)) (cons 'list (cons Ak3eaa@xnew (cdr Ak3eab@ynew))) (list 'cons Ak3eaa@xnew Ak3eab@ynew)))) (car Ak3eab@ynew)))) (set! Ak3e80@gen-vector (lambda (Ak3ea1@e Ak3ea2@ls Ak3ea3@lsnew) (if (eq? (car Ak3ea3@lsnew) 'quote) (if (eq? (cadr Ak3ea3@lsnew) Ak3ea2@ls) (list 'quote Ak3ea1@e) (list 'quote (list->vector (cadr Ak3ea3@lsnew)))) (if (eq? (car Ak3ea3@lsnew) 'list) (cons 'vector (cdr Ak3ea3@lsnew)) (list 'list->vector Ak3ea3@lsnew))))) (set! Ak3e82@regen (lambda (Ak3e9b@x) ((lambda (Ak3e9d@t) (if (memv Ak3e9d@t '(ref)) (cadr Ak3e9b@x) (if (memv Ak3e9d@t '(primitive)) (list 'primitive (cadr Ak3e9b@x)) (if (memv Ak3e9d@t '(quote)) (list 'quote (cadr Ak3e9b@x)) (if (memv Ak3e9d@t '(lambda)) (Ak2da7@Ak2ce7@build-lambda '#f (cadr Ak3e9b@x) (Ak3e82@regen (caddr Ak3e9b@x))) (if (memv Ak3e9d@t '(map)) ((lambda (Ak3e9f@ls) (cons '(primitive ellipsis-map) Ak3e9f@ls)) (map Ak3e82@regen (cdr Ak3e9b@x))) (cons (list 'primitive (car Ak3e9b@x)) (map Ak3e82@regen (cdr Ak3e9b@x))))))))) (car Ak3e9b@x)))) (lambda (Ak3e83@e Ak3e84@r Ak3e85@mr) ((lambda (Ak3e89@t) ((lambda (Ak3e8b@ls/false) (if Ak3e8b@ls/false (apply (lambda (Ak3e8d@x) (call-with-values (lambda () (Ak3e74@gen-syntax Ak3e83@e Ak3e8d@x Ak3e84@r '() Ak304a@ellipsis? '#f)) (lambda (Ak3e93@Ak3e90 Ak3e94@Ak3e92) ((lambda (Ak3e97@maps Ak3e98@e) (Ak3e82@regen Ak3e98@e)) Ak3e94@Ak3e92 Ak3e93@Ak3e90)))) Ak3e8b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3e89@t))) (Ak3048@syntax-dispatch Ak3e89@t '(_ any)))) Ak3e83@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Ak3056@core-macro-transformer (lambda (Ak3fbb@name) ((lambda (Ak3fbd@t) (if (memv Ak3fbd@t '(quote)) Ak2ff8@quote-transformer (if (memv Ak3fbd@t '(lambda)) Ak2ffc@lambda-transformer (if (memv Ak3fbd@t '(case-lambda)) Ak2ffa@case-lambda-transformer (if (memv Ak3fbd@t '(letrec)) Ak2fe0@letrec-transformer (if (memv Ak3fbd@t '(letrec*)) Ak2fe2@letrec*-transformer (if (memv Ak3fbd@t '(if)) Ak2ff0@if-transformer (if (memv Ak3fbd@t '(and)) Ak2ff2@and-transformer (if (memv Ak3fbd@t '(or)) Ak2ff4@or-transformer (if (memv Ak3fbd@t '(foreign-call)) Ak3044@foreign-call-transformer (if (memv Ak3fbd@t '(syntax-case)) Ak3050@syntax-case-transformer (if (memv Ak3fbd@t '(syntax)) Ak3054@syntax-transformer (if (memv Ak3fbd@t '(type-descriptor)) Ak2fe6@type-descriptor-transformer (if (memv Ak3fbd@t '(record-type-descriptor)) Ak2fe8@record-type-descriptor-transformer (if (memv Ak3fbd@t '(record-constructor-descriptor)) Ak2fea@record-constructor-descriptor-transformer (if (memv Ak3fbd@t '(fluid-let-syntax)) Ak2fe4@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" Ak3fbb@name))))))))))))))))) Ak3fbb@name))) (set! Ak3058@symbol-macro (lambda (Ak3fbf@x Ak3fc0@set) ((lambda (Ak3fc3@t) ((lambda (Ak3fc5@ls/false) (if (and Ak3fc5@ls/false (apply (lambda (Ak3fc7@name) (and (Ak2e43@id? Ak3fc7@name) (memq (Ak2e45@id->sym Ak3fc7@name) Ak3fc0@set))) Ak3fc5@ls/false)) (apply (lambda (Ak3fc9@name) (Ak2ffe@bless (list 'quote Ak3fc9@name))) Ak3fc5@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak3fc3@t))) (Ak3048@syntax-dispatch Ak3fc3@t '(_ any)))) Ak3fbf@x))) (set! Ak305a@macro-transformer (lambda (Ak3fcb@x) (if (procedure? Ak3fcb@x) Ak3fcb@x (if (symbol? Ak3fcb@x) ((lambda (Ak3fcd@t) (if (memv Ak3fcd@t '(define-record-type)) Ak303c@define-record-type-macro (if (memv Ak3fcd@t '(define-struct)) Ak303a@define-struct-macro (if (memv Ak3fcd@t '(include)) Ak3030@include-macro (if (memv Ak3fcd@t '(cond)) Ak302c@cond-macro (if (memv Ak3fcd@t '(let)) Ak3004@let-macro (if (memv Ak3fcd@t '(do)) Ak3024@do-macro (if (memv Ak3fcd@t '(or)) Ak3028@or-macro (if (memv Ak3fcd@t '(and)) Ak302a@and-macro (if (memv Ak3fcd@t '(let*)) Ak3026@let*-macro (if (memv Ak3fcd@t '(let-values)) Ak3006@let-values-macro (if (memv Ak3fcd@t '(let*-values)) Ak3008@let*-values-macro (if (memv Ak3fcd@t '(syntax-rules)) Ak3034@syntax-rules-macro (if (memv Ak3fcd@t '(quasiquote)) Ak3036@quasiquote-macro (if (memv Ak3fcd@t '(quasisyntax)) Ak3038@quasisyntax-macro (if (memv Ak3fcd@t '(with-syntax)) Ak3000@with-syntax-macro (if (memv Ak3fcd@t '(when)) Ak2fec@when-macro (if (memv Ak3fcd@t '(unless)) Ak2fee@unless-macro (if (memv Ak3fcd@t '(case)) Ak2ff6@case-macro (if (memv Ak3fcd@t '(identifier-syntax)) Ak3022@identifier-syntax-macro (if (memv Ak3fcd@t '(time)) Ak301a@time-macro (if (memv Ak3fcd@t '(delay)) Ak301c@delay-macro (if (memv Ak3fcd@t '(assert)) Ak301e@assert-macro (if (memv Ak3fcd@t '(endianness)) Ak3020@endianness-macro (if (memv Ak3fcd@t '(guard)) Ak3016@guard-macro (if (memv Ak3fcd@t '(define-enumeration)) Ak3018@define-enumeration-macro (if (memv Ak3fcd@t '(trace-lambda)) Ak300a@trace-lambda-macro (if (memv Ak3fcd@t '(trace-define)) Ak300c@trace-define-macro (if (memv Ak3fcd@t '(trace-define-syntax)) Ak300e@trace-define-syntax-macro (if (memv Ak3fcd@t '(trace-let-syntax)) Ak3012@trace-let-syntax-macro (if (memv Ak3fcd@t '(trace-letrec-syntax)) Ak3014@trace-letrec-syntax-macro (if (memv Ak3fcd@t '(define-condition-type)) Ak303e@define-condition-type-macro (if (memv Ak3fcd@t '(parameterize)) Ak3042@parameterize-macro (if (memv Ak3fcd@t '(include-into)) Ak3032@include-into-macro (if (memv Ak3fcd@t '(eol-style)) (lambda (Ak3fcf@x) (Ak3058@symbol-macro Ak3fcf@x '(none lf cr crlf nel crnel ls))) (if (memv Ak3fcd@t '(error-handling-mode)) (lambda (Ak3fd1@x) (Ak3058@symbol-macro Ak3fd1@x '(ignore raise replace))) (if (memv Ak3fcd@t '(buffer-mode)) (lambda (Ak3fd3@x) (Ak3058@symbol-macro Ak3fd3@x '(none line block))) (if (memv Ak3fcd@t '(file-options)) Ak2dbe@file-options-macro (if (memv Ak3fcd@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) Ak3040@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" Ak3fcb@x)))))))))))))))))))))))))))))))))))))))) Ak3fcb@x) (error 'core-macro-transformer '"BUG: invalid macro" Ak3fcb@x))))) (set! Ak305c@local-macro-transformer (lambda (Ak3fd5@x) (car Ak3fd5@x))) (set! Ak305e@do-macro-call (lambda (Ak3fd7@transformer Ak3fd8@expr) ((lambda (Ak3fdb@out) (begin ((letrec ((Ak3fdd@f (lambda (Ak3fdf@x) (if (not (Ak2e0f@stx? Ak3fdf@x)) (if (pair? Ak3fdf@x) (begin (Ak3fdd@f (car Ak3fdf@x)) (Ak3fdd@f (cdr Ak3fdf@x))) (if (vector? Ak3fdf@x) (vector-for-each Ak3fdd@f Ak3fdf@x) (if (symbol? Ak3fdf@x) (Ak3128@syntax-violation '#f '"raw symbol encountered in output of macro" Ak3fd8@expr Ak3fdf@x) (void)))) (void))))) Ak3fdd@f) Ak3fdb@out) (Ak2e2d@add-mark (Ak2e25@gen-mark) Ak3fdb@out Ak3fd8@expr))) (Ak3fd7@transformer (Ak2e2d@add-mark Ak2e27@anti-mark Ak3fd8@expr '#f))))) (set! Ak3060@chi-macro (lambda (Ak3fe1@p Ak3fe2@e) (Ak305e@do-macro-call (Ak305a@macro-transformer Ak3fe1@p) Ak3fe2@e))) (set! Ak3062@chi-local-macro (lambda (Ak3fe5@p Ak3fe6@e) (Ak305e@do-macro-call (Ak305c@local-macro-transformer Ak3fe5@p) Ak3fe6@e))) (set! Ak3064@chi-global-macro (lambda (Ak3fe9@p Ak3fea@e) ((lambda (Ak3fed@lib Ak3fee@loc) (begin (Ak2c6f@Ak2abe@visit-library Ak3fed@lib) ((lambda (Ak3ff1@x) ((lambda (Ak3ff3@transformer) (Ak305e@do-macro-call Ak3ff3@transformer Ak3fea@e)) (if (procedure? Ak3ff1@x) Ak3ff1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" Ak3ff1@x)))) (symbol-value Ak3fee@loc)))) (car Ak3fe9@p) (cdr Ak3fe9@p)))) (set! Ak3066@chi-expr* (lambda (Ak3ff5@e* Ak3ff6@r Ak3ff7@mr) (if (null? Ak3ff5@e*) '() ((lambda (Ak3ffb@e) (cons Ak3ffb@e (Ak3066@chi-expr* (cdr Ak3ff5@e*) Ak3ff6@r Ak3ff7@mr))) (Ak306a@chi-expr (car Ak3ff5@e*) Ak3ff6@r Ak3ff7@mr))))) (set! Ak3068@chi-application (lambda (Ak3ffd@e Ak3ffe@r Ak3fff@mr) ((lambda (Ak4003@t) ((lambda (Ak4005@ls/false) (if Ak4005@ls/false (apply (lambda (Ak4007@rator Ak4008@rands) ((lambda (Ak400b@rator) (cons Ak400b@rator (Ak3066@chi-expr* Ak4008@rands Ak3ffe@r Ak3fff@mr))) (Ak306a@chi-expr Ak4007@rator Ak3ffe@r Ak3fff@mr))) Ak4005@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4003@t))) (Ak3048@syntax-dispatch Ak4003@t '(any . each-any)))) Ak3ffd@e))) (set! Ak306a@chi-expr (lambda (Ak400d@e Ak400e@r Ak400f@mr) (call-with-values (lambda () (Ak2e65@syntax-type Ak400d@e Ak400e@r)) (lambda (Ak4019@Ak4014 Ak401a@Ak4016 Ak401b@Ak4018) ((lambda (Ak401f@kwd Ak4020@value Ak4021@type) ((lambda (Ak4025@t) (if (memv Ak4025@t '(core-macro)) ((lambda (Ak4027@transformer) (Ak4027@transformer Ak400d@e Ak400e@r Ak400f@mr)) (Ak3056@core-macro-transformer Ak4020@value)) (if (memv Ak4025@t '(global)) ((lambda (Ak4029@lib) ((lambda (Ak402b@loc) ((lambda () (begin ((Ak30b0@inv-collector) Ak4029@lib) Ak402b@loc)))) (cdr Ak4020@value))) (car Ak4020@value)) (if (memv Ak4025@t '(core-prim)) ((lambda (Ak402d@name) (list 'primitive Ak402d@name)) Ak4020@value) (if (memv Ak4025@t '(call)) (Ak3068@chi-application Ak400d@e Ak400e@r Ak400f@mr) (if (memv Ak4025@t '(lexical)) ((lambda (Ak402f@lex) Ak402f@lex) (Ak2fd4@lexical-var Ak4020@value)) (if (memv Ak4025@t '(global-macro global-macro!)) (Ak306a@chi-expr (Ak3064@chi-global-macro Ak4020@value Ak400d@e) Ak400e@r Ak400f@mr) (if (memv Ak4025@t '(local-macro local-macro!)) (Ak306a@chi-expr (Ak3062@chi-local-macro Ak4020@value Ak400d@e) Ak400e@r Ak400f@mr) (if (memv Ak4025@t '(macro macro!)) (Ak306a@chi-expr (Ak3060@chi-macro Ak4020@value Ak400d@e) Ak400e@r Ak400f@mr) (if (memv Ak4025@t '(constant)) ((lambda (Ak4031@datum) (list 'quote Ak4031@datum)) Ak4020@value) (if (memv Ak4025@t '(set!)) (Ak306c@chi-set! Ak400d@e Ak400e@r Ak400f@mr) (if (memv Ak4025@t '(begin)) ((lambda (Ak4033@t) ((lambda (Ak4035@ls/false) (if Ak4035@ls/false (apply (lambda (Ak4037@x Ak4038@x*) (Ak2daa@Ak2d19@build-sequence '#f (Ak3066@chi-expr* (cons Ak4037@x Ak4038@x*) Ak400e@r Ak400f@mr))) Ak4035@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4033@t))) (Ak3048@syntax-dispatch Ak4033@t '(_ any . each-any)))) Ak400d@e) (if (memv Ak4025@t '(let-syntax letrec-syntax)) ((lambda (Ak403b@t) ((lambda (Ak403d@ls/false) (if (and Ak403d@ls/false (apply (lambda (Ak403f@xlhs* Ak4040@xrhs* Ak4041@xbody Ak4042@xbody*) (if (not (Ak2e4b@valid-bound-ids? Ak403f@xlhs*)) (Ak3128@syntax-violation '#f '"invalid identifiers" Ak400d@e) (void))) Ak403d@ls/false)) (apply (lambda (Ak4047@xlhs* Ak4048@xrhs* Ak4049@xbody Ak404a@xbody*) ((lambda (Ak404f@xlab*) ((lambda (Ak4051@xrib) ((lambda (Ak4053@xb*) ((lambda () (Ak2daa@Ak2d19@build-sequence '#f (Ak3066@chi-expr* (map (lambda (Ak4055@x) (Ak2e2f@add-subst Ak4051@xrib Ak4055@x)) (cons Ak4049@xbody Ak404a@xbody*)) (append (map cons Ak404f@xlab* Ak4053@xb*) Ak400e@r) (append (map cons Ak404f@xlab* Ak4053@xb*) Ak400f@mr)))))) (map (lambda (Ak4057@x) (Ak2e7b@make-eval-transformer (Ak30a2@expand-transformer (if (eq? Ak4021@type 'let-syntax) Ak4057@x (Ak2e2f@add-subst Ak4051@xrib Ak4057@x)) Ak400f@mr))) Ak4048@xrhs*))) (Ak2e03@make-full-rib Ak4047@xlhs* Ak404f@xlab*))) (map Ak2dcf@gen-label Ak4047@xlhs*))) Ak403d@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak403b@t))) (Ak3048@syntax-dispatch Ak403b@t '(_ #(each (any any)) any . each-any)))) Ak400d@e) (if (memv Ak4025@t '(displaced-lexical)) (Ak3128@syntax-violation '#f '"identifier out of context" Ak400d@e) (if (memv Ak4025@t '(syntax)) (Ak3128@syntax-violation '#f '"reference to pattern variable outside a syntax form" Ak400d@e) (if (memv Ak4025@t '(define define-syntax module import library)) (Ak3128@syntax-violation '#f (string-append ((lambda (Ak4059@t) (if (memv Ak4059@t '(define)) '"a definition" (if (memv Ak4059@t '(define-syntax)) '"a define-syntax" (if (memv Ak4059@t '(module)) '"a module definition" (if (memv Ak4059@t '(library)) '"a library definition" (if (memv Ak4059@t '(import)) '"an import declaration" (if (memv Ak4059@t '(export)) '"an export declaration" '"a non-expression"))))))) Ak4021@type) '" was found where an expression was expected") Ak400d@e) (if (memv Ak4025@t '(mutable)) (Ak3128@syntax-violation '#f '"attempt to reference an unexportable variable" Ak400d@e) (Ak3128@syntax-violation '#f '"invalid expression" Ak400d@e)))))))))))))))))) Ak4021@type)) Ak401b@Ak4018 Ak401a@Ak4016 Ak4019@Ak4014))))) (set! Ak306c@chi-set! (lambda (Ak405b@e Ak405c@r Ak405d@mr) ((lambda (Ak4061@t) ((lambda (Ak4063@ls/false) (if (and Ak4063@ls/false (apply (lambda (Ak4065@x Ak4066@v) (Ak2e43@id? Ak4065@x)) Ak4063@ls/false)) (apply (lambda (Ak4069@x Ak406a@v) (call-with-values (lambda () (Ak2e65@syntax-type Ak4069@x Ak405c@r)) (lambda (Ak4073@Ak406e Ak4074@Ak4070 Ak4075@Ak4072) ((lambda (Ak4079@kwd Ak407a@value Ak407b@type) ((lambda (Ak407f@t) (if (memv Ak407f@t '(lexical)) (begin (Ak2fd8@set-lexical-mutable! Ak407a@value '#t) (list 'set! (Ak2fd4@lexical-var Ak407a@value) (Ak306a@chi-expr Ak406a@v Ak405c@r Ak405d@mr))) (if (memv Ak407f@t '(core-prim)) (Ak3128@syntax-violation '#f '"cannot modify imported core primitive" Ak405b@e) (if (memv Ak407f@t '(global)) (Ak3128@syntax-violation '#f '"attempt to modify imported binding" Ak405b@e) (if (memv Ak407f@t '(global-macro!)) (Ak306a@chi-expr (Ak3064@chi-global-macro Ak407a@value Ak405b@e) Ak405c@r Ak405d@mr) (if (memv Ak407f@t '(local-macro!)) (Ak306a@chi-expr (Ak3062@chi-local-macro Ak407a@value Ak405b@e) Ak405c@r Ak405d@mr) (if (memv Ak407f@t '(mutable)) (Ak3128@syntax-violation '#f '"attempt to assign to an unexportable variable" Ak405b@e) (Ak3128@syntax-violation '#f '"invalid syntax" Ak405b@e)))))))) Ak407b@type)) Ak4075@Ak4072 Ak4074@Ak4070 Ak4073@Ak406e)))) Ak4063@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4061@t))) (Ak3048@syntax-dispatch Ak4061@t '(_ any any)))) Ak405b@e))) (set! Ak306e@verify-formals (lambda (Ak4081@fmls Ak4082@stx) ((lambda (Ak4085@t) ((lambda (Ak4087@ls/false) (if Ak4087@ls/false (apply (lambda (Ak4089@x*) (if (not (Ak2e4b@valid-bound-ids? Ak4089@x*)) (Ak3002@invalid-fmls-error Ak4082@stx Ak4081@fmls) (void))) Ak4087@ls/false) ((lambda (Ak408b@t) ((lambda (Ak408d@ls/false) (if Ak408d@ls/false (apply (lambda (Ak408f@x* Ak4090@x) (if (not (Ak2e4b@valid-bound-ids? (cons Ak4090@x Ak408f@x*))) (Ak3002@invalid-fmls-error Ak4082@stx Ak4081@fmls) (void))) Ak408d@ls/false) ((lambda (Ak4093@t) ((lambda (Ak4095@ls/false) (if Ak4095@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid syntax" Ak4082@stx)) Ak4095@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4093@t))) (Ak3048@syntax-dispatch Ak4093@t '_))) Ak408b@t))) (Ak3048@syntax-dispatch Ak408b@t '#(each+ any () any)))) Ak4085@t))) (Ak3048@syntax-dispatch Ak4085@t 'each-any))) Ak4081@fmls))) (set! Ak3070@chi-lambda-clause (lambda (Ak4097@stx Ak4098@fmls Ak4099@body* Ak409a@r Ak409b@mr) ((lambda (Ak40a1@t) ((lambda (Ak40a3@ls/false) (if Ak40a3@ls/false (apply (lambda (Ak40a5@x*) (begin (Ak306e@verify-formals Ak4098@fmls Ak4097@stx) ((lambda (Ak40a7@lex* Ak40a8@lab*) (values Ak40a7@lex* (Ak3080@chi-internal (Ak2e2f@add-subst (Ak2e03@make-full-rib Ak40a5@x* Ak40a8@lab*) Ak4099@body*) (Ak2fdc@add-lexicals Ak40a8@lab* Ak40a7@lex* Ak409a@r) Ak409b@mr))) (map Ak2dcb@gen-lexical Ak40a5@x*) (map Ak2dcf@gen-label Ak40a5@x*)))) Ak40a3@ls/false) ((lambda (Ak40ab@t) ((lambda (Ak40ad@ls/false) (if Ak40ad@ls/false (apply (lambda (Ak40af@x* Ak40b0@x) (begin (Ak306e@verify-formals Ak4098@fmls Ak4097@stx) ((lambda (Ak40b3@lex* Ak40b4@lab* Ak40b5@lex Ak40b6@lab) (values (append Ak40b3@lex* Ak40b5@lex) (Ak3080@chi-internal (Ak2e2f@add-subst (Ak2e03@make-full-rib (cons Ak40b0@x Ak40af@x*) (cons Ak40b6@lab Ak40b4@lab*)) Ak4099@body*) (Ak2fdc@add-lexicals (cons Ak40b6@lab Ak40b4@lab*) (cons Ak40b5@lex Ak40b3@lex*) Ak409a@r) Ak409b@mr))) (map Ak2dcb@gen-lexical Ak40af@x*) (map Ak2dcf@gen-label Ak40af@x*) (Ak2dcb@gen-lexical Ak40b0@x) (Ak2dcf@gen-label Ak40b0@x)))) Ak40ad@ls/false) ((lambda (Ak40bb@t) ((lambda (Ak40bd@ls/false) (if Ak40bd@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid syntax" Ak4098@fmls)) Ak40bd@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak40bb@t))) (Ak3048@syntax-dispatch Ak40bb@t '_))) Ak40ab@t))) (Ak3048@syntax-dispatch Ak40ab@t '#(each+ any () any)))) Ak40a1@t))) (Ak3048@syntax-dispatch Ak40a1@t 'each-any))) Ak4098@fmls))) (set! Ak3072@chi-lambda-clause* (lambda (Ak40bf@stx Ak40c0@fmls* Ak40c1@body** Ak40c2@r Ak40c3@mr) (if (null? Ak40c0@fmls*) (values '() '()) (call-with-values (lambda () (Ak3070@chi-lambda-clause Ak40bf@stx (car Ak40c0@fmls*) (car Ak40c1@body**) Ak40c2@r Ak40c3@mr)) (lambda (Ak40cd@Ak40ca Ak40ce@Ak40cc) ((lambda (Ak40d1@b Ak40d2@a) (call-with-values (lambda () (Ak3072@chi-lambda-clause* Ak40bf@stx (cdr Ak40c0@fmls*) (cdr Ak40c1@body**) Ak40c2@r Ak40c3@mr)) (lambda (Ak40d9@Ak40d6 Ak40da@Ak40d8) ((lambda (Ak40dd@b* Ak40de@a*) (values (cons Ak40d2@a Ak40de@a*) (cons Ak40d1@b Ak40dd@b*))) Ak40da@Ak40d8 Ak40d9@Ak40d6)))) Ak40ce@Ak40cc Ak40cd@Ak40ca)))))) (set! Ak3074@chi-defun (lambda (Ak40e1@x Ak40e2@r Ak40e3@mr) ((lambda (Ak40e7@fmls Ak40e8@body*) (call-with-values (lambda () (Ak3070@chi-lambda-clause Ak40e7@fmls Ak40e7@fmls Ak40e8@body* Ak40e2@r Ak40e3@mr)) (lambda (Ak40ef@Ak40ec Ak40f0@Ak40ee) ((lambda (Ak40f3@body Ak40f4@fmls) (Ak2da7@Ak2ce7@build-lambda '#f Ak40f4@fmls Ak40f3@body)) Ak40f0@Ak40ee Ak40ef@Ak40ec)))) (car Ak40e1@x) (cdr Ak40e1@x)))) (set! Ak3076@chi-rhs (lambda (Ak40f7@rhs Ak40f8@r Ak40f9@mr) ((lambda (Ak40fd@t) (if (memv Ak40fd@t '(defun)) (Ak3074@chi-defun (cdr Ak40f7@rhs) Ak40f8@r Ak40f9@mr) (if (memv Ak40fd@t '(expr)) ((lambda (Ak40ff@expr) (Ak306a@chi-expr Ak40ff@expr Ak40f8@r Ak40f9@mr)) (cdr Ak40f7@rhs)) (if (memv Ak40fd@t '(top-expr)) ((lambda (Ak4101@expr) (Ak2daa@Ak2d19@build-sequence '#f (list (Ak306a@chi-expr Ak4101@expr Ak40f8@r Ak40f9@mr) (Ak2dab@Ak2d1b@build-void)))) (cdr Ak40f7@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" Ak40f7@rhs))))) (car Ak40f7@rhs)))) (set! Ak3078@expand-interaction-rhs*/init* (lambda (Ak4103@lhs* Ak4104@rhs* Ak4105@init* Ak4106@r Ak4107@mr) ((letrec ((Ak410d@f (lambda (Ak410f@lhs* Ak4110@rhs*) (if (null? Ak410f@lhs*) (map (lambda (Ak4113@x) (Ak306a@chi-expr Ak4113@x Ak4106@r Ak4107@mr)) Ak4105@init*) ((lambda (Ak4115@lhs Ak4116@rhs) ((lambda (Ak4119@t) (if (memv Ak4119@t '(defun)) ((lambda (Ak411b@rhs) (cons (list 'set! Ak4115@lhs Ak411b@rhs) (Ak410d@f (cdr Ak410f@lhs*) (cdr Ak4110@rhs*)))) (Ak3074@chi-defun (cdr Ak4116@rhs) Ak4106@r Ak4107@mr)) (if (memv Ak4119@t '(expr)) ((lambda (Ak411d@rhs) (cons (list 'set! Ak4115@lhs Ak411d@rhs) (Ak410d@f (cdr Ak410f@lhs*) (cdr Ak4110@rhs*)))) (Ak306a@chi-expr (cdr Ak4116@rhs) Ak4106@r Ak4107@mr)) (if (memv Ak4119@t '(top-expr)) ((lambda (Ak411f@e) (cons Ak411f@e (Ak410d@f (cdr Ak410f@lhs*) (cdr Ak4110@rhs*)))) (Ak306a@chi-expr (cdr Ak4116@rhs) Ak4106@r Ak4107@mr)) (error 'expand-interaction '"invallid" Ak4116@rhs))))) (car Ak4116@rhs))) (car Ak410f@lhs*) (car Ak4110@rhs*)))))) Ak410d@f) Ak4103@lhs* Ak4104@rhs*))) (set! Ak307a@chi-rhs* (lambda (Ak4121@rhs* Ak4122@r Ak4123@mr) ((letrec ((Ak4127@f (lambda (Ak4129@ls) (if (null? Ak4129@ls) '() ((lambda (Ak412b@a) (cons Ak412b@a (Ak4127@f (cdr Ak4129@ls)))) (Ak3076@chi-rhs (car Ak4129@ls) Ak4122@r Ak4123@mr)))))) Ak4127@f) Ak4121@rhs*))) (set! Ak307c@find-bound=? (lambda (Ak412d@x Ak412e@lhs* Ak412f@rhs*) (if (null? Ak412e@lhs*) '#f (if (Ak2e47@bound-id=? Ak412d@x (car Ak412e@lhs*)) (car Ak412f@rhs*) (Ak307c@find-bound=? Ak412d@x (cdr Ak412e@lhs*) (cdr Ak412f@rhs*)))))) (set! Ak307e@find-dups (lambda (Ak4133@ls) ((letrec ((Ak4135@f (lambda (Ak4137@ls Ak4138@dups) (if (null? Ak4137@ls) Ak4138@dups ((lambda (Ak413b@t) (if Ak413b@t ((lambda (Ak413d@x) (Ak4135@f (cdr Ak4137@ls) (cons (list (car Ak4137@ls) Ak413d@x) Ak4138@dups))) Ak413b@t) (Ak4135@f (cdr Ak4137@ls) Ak4138@dups))) (Ak307c@find-bound=? (car Ak4137@ls) (cdr Ak4137@ls) (cdr Ak4137@ls))))))) Ak4135@f) Ak4133@ls '()))) (set! Ak3080@chi-internal (lambda (Ak413f@e* Ak4140@r Ak4141@mr) ((lambda (Ak4145@rib) (call-with-values (lambda () (Ak30a0@chi-body* (map (lambda (Ak4157@x) (Ak2e2f@add-subst Ak4145@rib Ak4157@x)) (Ak2e41@syntax->list Ak413f@e*)) Ak4140@r Ak4141@mr '() '() '() '() '() Ak4145@rib '#f)) (lambda (Ak4159@Ak4148 Ak415a@Ak414a Ak415b@Ak414c Ak415c@Ak414e Ak415d@Ak4150 Ak415e@Ak4152 Ak415f@Ak4154 Ak4160@Ak4156) ((lambda (Ak4169@_exp* Ak416a@kwd* Ak416b@mod** Ak416c@rhs* Ak416d@lex* Ak416e@mr Ak416f@r Ak4170@e*) (begin (if (null? Ak4170@e*) (Ak3128@syntax-violation '#f '"no expression in body" Ak4170@e*) (void)) ((lambda (Ak4179@init*) ((lambda (Ak417b@rhs*) ((lambda () (Ak2dad@Ak2d1f@build-letrec* '#f (reverse Ak416d@lex*) (reverse Ak417b@rhs*) (Ak2daa@Ak2d19@build-sequence '#f Ak4179@init*))))) (Ak307a@chi-rhs* Ak416c@rhs* Ak416f@r Ak416e@mr))) (Ak3066@chi-expr* (append (apply append (reverse Ak416b@mod**)) Ak4170@e*) Ak416f@r Ak416e@mr)))) Ak4160@Ak4156 Ak415f@Ak4154 Ak415e@Ak4152 Ak415d@Ak4150 Ak415c@Ak414e Ak415b@Ak414c Ak415a@Ak414a Ak4159@Ak4148)))) (Ak2df7@make-empty-rib)))) (set! Ak3082@parse-module (lambda (Ak417d@e) ((lambda (Ak417f@t) ((lambda (Ak4181@ls/false) (if Ak4181@ls/false (apply (lambda (Ak4183@export* Ak4184@b*) (begin (if (not (for-all Ak2e43@id? Ak4183@export*)) (Ak3128@syntax-violation '#f '"module exports must be identifiers" Ak417d@e) (void)) (values '#f (list->vector Ak4183@export*) Ak4184@b*))) Ak4181@ls/false) ((lambda (Ak4187@t) ((lambda (Ak4189@ls/false) (if Ak4189@ls/false (apply (lambda (Ak418b@name Ak418c@export* Ak418d@b*) (begin (if (not (Ak2e43@id? Ak418b@name)) (Ak3128@syntax-violation '#f '"module name must be an identifier" Ak417d@e) (void)) (if (not (for-all Ak2e43@id? Ak418c@export*)) (Ak3128@syntax-violation '#f '"module exports must be identifiers" Ak417d@e) (void)) (values Ak418b@name (list->vector Ak418c@export*) Ak418d@b*))) Ak4189@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4187@t))) (Ak3048@syntax-dispatch Ak4187@t '(_ any each-any . each-any)))) Ak417f@t))) (Ak3048@syntax-dispatch Ak417f@t '(_ each-any . each-any)))) Ak417d@e))) (set! Ak308c@module-interface? (lambda (Ak4191@x) (and (simple-struct? Ak4191@x) (eq? (simple-struct-name Ak4191@x) 'module-interface)))) (set! Ak308e@module-interface-first-mark (lambda (Ak4193@x) (simple-struct-ref Ak4193@x '0))) (set! Ak3090@set-module-interface-first-mark! (lambda (Ak4195@x Ak4196@val) (simple-struct-set! Ak4195@x '0 Ak4196@val))) (set! Ak3092@module-interface-exp-id-vec (lambda (Ak4199@x) (simple-struct-ref Ak4199@x '1))) (set! Ak3094@set-module-interface-exp-id-vec! (lambda (Ak419b@x Ak419c@val) (simple-struct-set! Ak419b@x '1 Ak419c@val))) (set! Ak3096@module-interface-exp-lab-vec (lambda (Ak419f@x) (simple-struct-ref Ak419f@x '2))) (set! Ak3098@set-module-interface-exp-lab-vec! (lambda (Ak41a1@x Ak41a2@val) (simple-struct-set! Ak41a1@x '2 Ak41a2@val))) (set! Ak309a@dummy '3) (set! Ak309c@module-interface-exp-id* (lambda (Ak41a5@iface Ak41a6@id) ((lambda (Ak41aa@diff-marks) (begin (set! Ak41aa@diff-marks (lambda (Ak41b1@ls Ak41b2@x) (begin (if (null? Ak41b1@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (Ak41b5@a) (if (eq? Ak41b5@a Ak41b2@x) '() (cons Ak41b5@a (Ak41aa@diff-marks (cdr Ak41b1@ls) Ak41b2@x)))) (car Ak41b1@ls))))) ((lambda (Ak41ab@diff Ak41ac@id-vec) (if (null? Ak41ab@diff) Ak41ac@id-vec (vector-map (lambda (Ak41af@x) (make-simple-struct 'stx '5 (list (Ak2e11@stx-expr Ak41af@x) (append Ak41ab@diff (Ak2e15@stx-mark* Ak41af@x)) '() '()))) Ak41ac@id-vec))) (Ak41aa@diff-marks (Ak2e15@stx-mark* Ak41a6@id) (Ak308e@module-interface-first-mark Ak41a5@iface)) (Ak3092@module-interface-exp-id-vec Ak41a5@iface)))) '#f))) (set! Ak309e@chi-internal-module (lambda (Ak41b7@e Ak41b8@r Ak41b9@mr Ak41ba@lex* Ak41bb@rhs* Ak41bc@mod** Ak41bd@kwd*) (call-with-values (lambda () (Ak3082@parse-module Ak41b7@e)) (lambda (Ak41cb@Ak41c6 Ak41cc@Ak41c8 Ak41cd@Ak41ca) ((lambda (Ak41d1@e* Ak41d2@exp-id* Ak41d3@name) ((lambda (Ak41d7@rib) ((lambda (Ak41d9@e*) ((lambda () (call-with-values (lambda () (Ak30a0@chi-body* Ak41d9@e* Ak41b8@r Ak41b9@mr Ak41ba@lex* Ak41bb@rhs* Ak41bc@mod** Ak41bd@kwd* '() Ak41d7@rib '#f)) (lambda (Ak41eb@Ak41dc Ak41ec@Ak41de Ak41ed@Ak41e0 Ak41ee@Ak41e2 Ak41ef@Ak41e4 Ak41f0@Ak41e6 Ak41f1@Ak41e8 Ak41f2@Ak41ea) ((lambda (Ak41fb@_exp* Ak41fc@kwd* Ak41fd@mod** Ak41fe@rhs* Ak41ff@lex* Ak4200@mr Ak4201@r Ak4202@e*) ((lambda (Ak420b@exp-lab* Ak420c@mod**) (if (not Ak41d3@name) (values Ak41ff@lex* Ak41fe@rhs* Ak41d2@exp-id* Ak420b@exp-lab* Ak4201@r Ak4200@mr Ak420c@mod** Ak41fc@kwd*) ((lambda (Ak420f@lab Ak4210@iface) (values Ak41ff@lex* Ak41fe@rhs* (vector Ak41d3@name) (vector Ak420f@lab) (cons (cons Ak420f@lab (cons '$module Ak4210@iface)) Ak4201@r) (cons (cons Ak420f@lab (cons '$module Ak4210@iface)) Ak4200@mr) Ak420c@mod** Ak41fc@kwd*)) (Ak2dcf@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (Ak2e15@stx-mark* Ak41d3@name)) (vector-map (lambda (Ak4213@x) (make-simple-struct 'stx '5 (list (Ak2e11@stx-expr Ak4213@x) (Ak2e15@stx-mark* Ak4213@x) '() '()))) Ak41d2@exp-id*) Ak420b@exp-lab*))))) (vector-map (lambda (Ak4215@x) (or (Ak2e59@id->label (make-simple-struct 'stx '5 (list (Ak2e45@id->sym Ak4215@x) (Ak2e15@stx-mark* Ak4215@x) (list Ak41d7@rib) '()))) (Ak3128@syntax-violation '#f '"cannot find module export" Ak4215@x))) Ak41d2@exp-id*) (cons Ak4202@e* Ak41fd@mod**))) Ak41f2@Ak41ea Ak41f1@Ak41e8 Ak41f0@Ak41e6 Ak41ef@Ak41e4 Ak41ee@Ak41e2 Ak41ed@Ak41e0 Ak41ec@Ak41de Ak41eb@Ak41dc)))))) (map (lambda (Ak4217@x) (Ak2e2f@add-subst Ak41d7@rib Ak4217@x)) (Ak2e41@syntax->list Ak41d1@e*)))) (Ak2df7@make-empty-rib))) Ak41cd@Ak41ca Ak41cc@Ak41c8 Ak41cb@Ak41c6))))) (set! Ak30a0@chi-body* (lambda (Ak4219@e* Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak421f@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?) (if (null? Ak4219@e*) (values Ak4219@e* Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak421f@kwd* Ak4220@exp*) ((lambda (Ak422d@e) (call-with-values (lambda () (Ak2e65@syntax-type Ak422d@e Ak421a@r)) (lambda (Ak4235@Ak4230 Ak4236@Ak4232 Ak4237@Ak4234) ((lambda (Ak423b@kwd Ak423c@value Ak423d@type) ((lambda (Ak4241@kwd*) ((lambda (Ak4243@t) (if (memv Ak4243@t '(define)) (call-with-values (lambda () (Ak2fcc@parse-define Ak422d@e)) (lambda (Ak4249@Ak4246 Ak424a@Ak4248) ((lambda (Ak424d@rhs Ak424e@id) (begin (if (Ak2e4f@bound-id-member? Ak424e@id Ak4241@kwd*) (Ak3128@syntax-violation '#f '"cannot redefine keyword" Ak422d@e) (void)) (call-with-values (lambda () (Ak2dd3@gen-define-label+loc Ak424e@id Ak4221@rib)) (lambda (Ak4255@Ak4252 Ak4256@Ak4254) ((lambda (Ak4259@lex Ak425a@lab) (begin (Ak2df9@extend-rib! Ak4221@rib Ak424e@id Ak425a@lab) (Ak30a0@chi-body* (cdr Ak4219@e*) (Ak2fda@add-lexical Ak425a@lab Ak4259@lex Ak421a@r) Ak421b@mr (cons Ak4259@lex Ak421c@lex*) (cons Ak424d@rhs Ak421d@rhs*) Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?))) Ak4256@Ak4254 Ak4255@Ak4252))))) Ak424a@Ak4248 Ak4249@Ak4246))) (if (memv Ak4243@t '(define-syntax)) (call-with-values (lambda () (Ak2fce@parse-define-syntax Ak422d@e)) (lambda (Ak4261@Ak425e Ak4262@Ak4260) ((lambda (Ak4265@rhs Ak4266@id) (begin (if (Ak2e4f@bound-id-member? Ak4266@id Ak4241@kwd*) (Ak3128@syntax-violation '#f '"cannot redefine keyword" Ak422d@e) (void)) ((lambda (Ak4269@lab Ak426a@expanded-rhs) (begin (Ak2df9@extend-rib! Ak4221@rib Ak4266@id Ak4269@lab) ((lambda (Ak426d@b) (Ak30a0@chi-body* (cdr Ak4219@e*) (cons (cons Ak4269@lab Ak426d@b) Ak421a@r) (cons (cons Ak4269@lab Ak426d@b) Ak421b@mr) Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?)) (Ak2e7b@make-eval-transformer Ak426a@expanded-rhs)))) (Ak2dd5@gen-define-label Ak4266@id Ak4221@rib) (Ak30a2@expand-transformer Ak4265@rhs Ak421b@mr)))) Ak4262@Ak4260 Ak4261@Ak425e))) (if (memv Ak4243@t '(let-syntax letrec-syntax)) ((lambda (Ak426f@t) ((lambda (Ak4271@ls/false) (if (and Ak4271@ls/false (apply (lambda (Ak4273@xlhs* Ak4274@xrhs* Ak4275@xbody*) (if (not (Ak2e4b@valid-bound-ids? Ak4273@xlhs*)) (Ak3128@syntax-violation '#f '"invalid identifiers" Ak422d@e) (void))) Ak4271@ls/false)) (apply (lambda (Ak4279@xlhs* Ak427a@xrhs* Ak427b@xbody*) ((lambda (Ak427f@xlab*) ((lambda (Ak4281@xrib) ((lambda (Ak4283@xb*) ((lambda () (Ak30a0@chi-body* (append (map (lambda (Ak4285@x) (Ak2e2f@add-subst Ak4281@xrib Ak4285@x)) Ak427b@xbody*) (cdr Ak4219@e*)) (append (map cons Ak427f@xlab* Ak4283@xb*) Ak421a@r) (append (map cons Ak427f@xlab* Ak4283@xb*) Ak421b@mr) Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?)))) (map (lambda (Ak4287@x) (Ak2e7b@make-eval-transformer (Ak30a2@expand-transformer (if (eq? Ak423d@type 'let-syntax) Ak4287@x (Ak2e2f@add-subst Ak4281@xrib Ak4287@x)) Ak421b@mr))) Ak427a@xrhs*))) (Ak2e03@make-full-rib Ak4279@xlhs* Ak427f@xlab*))) (map Ak2dcf@gen-label Ak4279@xlhs*))) Ak4271@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak426f@t))) (Ak3048@syntax-dispatch Ak426f@t '(_ #(each (any any)) . each-any)))) Ak422d@e) (if (memv Ak4243@t '(begin)) ((lambda (Ak4289@t) ((lambda (Ak428b@ls/false) (if Ak428b@ls/false (apply (lambda (Ak428d@x*) (Ak30a0@chi-body* (append Ak428d@x* (cdr Ak4219@e*)) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?)) Ak428b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4289@t))) (Ak3048@syntax-dispatch Ak4289@t '(_ . each-any)))) Ak422d@e) (if (memv Ak4243@t '(global-macro global-macro!)) (Ak30a0@chi-body* (cons (Ak2e2f@add-subst Ak4221@rib (Ak3064@chi-global-macro Ak423c@value Ak422d@e)) (cdr Ak4219@e*)) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?) (if (memv Ak4243@t '(local-macro local-macro!)) (Ak30a0@chi-body* (cons (Ak2e2f@add-subst Ak4221@rib (Ak3062@chi-local-macro Ak423c@value Ak422d@e)) (cdr Ak4219@e*)) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?) (if (memv Ak4243@t '(macro macro!)) (Ak30a0@chi-body* (cons (Ak2e2f@add-subst Ak4221@rib (Ak3060@chi-macro Ak423c@value Ak422d@e)) (cdr Ak4219@e*)) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?) (if (memv Ak4243@t '(module)) (call-with-values (lambda () (Ak309e@chi-internal-module Ak422d@e Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd*)) (lambda (Ak429f@Ak4290 Ak42a0@Ak4292 Ak42a1@Ak4294 Ak42a2@Ak4296 Ak42a3@Ak4298 Ak42a4@Ak429a Ak42a5@Ak429c Ak42a6@Ak429e) ((lambda (Ak42af@kwd* Ak42b0@mod** Ak42b1@mr Ak42b2@r Ak42b3@m-exp-lab* Ak42b4@m-exp-id* Ak42b5@rhs* Ak42b6@lex*) (begin (vector-for-each (lambda (Ak42bf@id Ak42c0@lab) (Ak2df9@extend-rib! Ak4221@rib Ak42bf@id Ak42c0@lab)) Ak42b4@m-exp-id* Ak42b3@m-exp-lab*) (Ak30a0@chi-body* (cdr Ak4219@e*) Ak42b2@r Ak42b1@mr Ak42b6@lex* Ak42b5@rhs* Ak42b0@mod** Ak42af@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?))) Ak42a6@Ak429e Ak42a5@Ak429c Ak42a4@Ak429a Ak42a3@Ak4298 Ak42a2@Ak4296 Ak42a1@Ak4294 Ak42a0@Ak4292 Ak429f@Ak4290))) (if (memv Ak4243@t '(library)) (begin (Ak310a@library-expander (Ak2e57@stx->datum Ak422d@e)) (Ak30a0@chi-body* (cdr Ak4219@e*) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?)) (if (memv Ak4243@t '(export)) ((lambda (Ak42c3@t) ((lambda (Ak42c5@ls/false) (if Ak42c5@ls/false (apply (lambda (Ak42c7@exp-decl*) (Ak30a0@chi-body* (cdr Ak4219@e*) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* (append Ak42c7@exp-decl* Ak4220@exp*) Ak4221@rib Ak4222@top?)) Ak42c5@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak42c3@t))) (Ak3048@syntax-dispatch Ak42c3@t '(_ . each-any)))) Ak422d@e) (if (memv Ak4243@t '(import)) ((lambda () ((lambda (Ak42ca@module-import? Ak42cc@module-import Ak42ce@library-import) (begin (set! Ak42ca@module-import? (lambda (Ak431d@e) ((lambda (Ak431f@t) ((lambda (Ak4321@ls/false) (if (and Ak4321@ls/false (apply (lambda (Ak4323@id) (Ak2e43@id? Ak4323@id)) Ak4321@ls/false)) (apply (lambda (Ak4325@id) '#t) Ak4321@ls/false) ((lambda (Ak4327@t) ((lambda (Ak4329@ls/false) (if Ak4329@ls/false (apply (lambda (Ak432b@imp*) '#f) Ak4329@ls/false) ((lambda (Ak432d@t) ((lambda (Ak432f@ls/false) (if Ak432f@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"malformed import form" Ak431d@e)) Ak432f@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak432d@t))) (Ak3048@syntax-dispatch Ak432d@t '_))) Ak4327@t))) (Ak3048@syntax-dispatch Ak4327@t '(_ . each-any)))) Ak431f@t))) (Ak3048@syntax-dispatch Ak431f@t '(_ any)))) Ak431d@e))) (set! Ak42cc@module-import (lambda (Ak42fb@e Ak42fc@r) ((lambda (Ak42ff@t) ((lambda (Ak4301@ls/false) (if (and Ak4301@ls/false (apply (lambda (Ak4303@id) (Ak2e43@id? Ak4303@id)) Ak4301@ls/false)) (apply (lambda (Ak4305@id) (call-with-values (lambda () (Ak2e65@syntax-type Ak4305@id Ak42fc@r)) (lambda (Ak430d@Ak4308 Ak430e@Ak430a Ak430f@Ak430c) ((lambda (Ak4313@kwd Ak4314@value Ak4315@type) ((lambda (Ak4319@t) (if (memv Ak4319@t '($module)) ((lambda (Ak431b@iface) (values (Ak309c@module-interface-exp-id* Ak431b@iface Ak4305@id) (Ak3096@module-interface-exp-lab-vec Ak431b@iface))) Ak4314@value) (Ak3128@syntax-violation '#f '"invalid import" Ak42fb@e))) Ak4315@type)) Ak430f@Ak430c Ak430e@Ak430a Ak430d@Ak4308)))) Ak4301@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak42ff@t))) (Ak3048@syntax-dispatch Ak42ff@t '(_ any)))) Ak42fb@e))) (set! Ak42ce@library-import (lambda (Ak42df@e) ((lambda (Ak42e1@t) ((lambda (Ak42e3@ls/false) (if Ak42e3@ls/false (apply (lambda (Ak42e5@ctxt Ak42e6@imp*) (call-with-values (lambda () (Ak30aa@parse-import-spec* (Ak312e@syntax->datum Ak42e6@imp*))) (lambda (Ak42ed@Ak42ea Ak42ee@Ak42ec) ((lambda (Ak42f1@subst-labels Ak42f2@subst-names) (values (vector-map (lambda (Ak42f5@name) (Ak2e23@datum->stx Ak42e5@ctxt Ak42f5@name)) Ak42f2@subst-names) Ak42f1@subst-labels)) Ak42ee@Ak42ec Ak42ed@Ak42ea)))) Ak42e3@ls/false) ((lambda (Ak42f7@t) ((lambda (Ak42f9@ls/false) (if Ak42f9@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid import form" Ak42df@e)) Ak42f9@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak42f7@t))) (Ak3048@syntax-dispatch Ak42f7@t '_))) Ak42e1@t))) (Ak3048@syntax-dispatch Ak42e1@t '(any . each-any)))) Ak42df@e))) (begin (call-with-values (lambda () (if (Ak42ca@module-import? Ak422d@e) (Ak42cc@module-import Ak422d@e Ak421a@r) (Ak42ce@library-import Ak422d@e))) (lambda (Ak42d3@Ak42d0 Ak42d4@Ak42d2) ((lambda (Ak42d7@lab* Ak42d8@id*) (vector-for-each (lambda (Ak42db@id Ak42dc@lab) (Ak2df9@extend-rib! Ak4221@rib Ak42db@id Ak42dc@lab)) Ak42d8@id* Ak42d7@lab*)) Ak42d4@Ak42d2 Ak42d3@Ak42d0))) (Ak30a0@chi-body* (cdr Ak4219@e*) Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?)))) '#f '#f '#f))) (if Ak4222@top? (Ak30a0@chi-body* (cdr Ak4219@e*) Ak421a@r Ak421b@mr (cons (Ak2dcb@gen-lexical 'dummy) Ak421c@lex*) (cons (cons 'top-expr Ak422d@e) Ak421d@rhs*) Ak421e@mod** Ak4241@kwd* Ak4220@exp* Ak4221@rib Ak4222@top?) (values Ak4219@e* Ak421a@r Ak421b@mr Ak421c@lex* Ak421d@rhs* Ak421e@mod** Ak4241@kwd* Ak4220@exp*)))))))))))))) Ak423d@type)) (if (Ak2e43@id? Ak423b@kwd) (cons Ak423b@kwd Ak421f@kwd*) Ak421f@kwd*))) Ak4237@Ak4234 Ak4236@Ak4232 Ak4235@Ak4230)))) (car Ak4219@e*))))) (set! Ak30a2@expand-transformer (lambda (Ak4331@expr Ak4332@r) ((lambda (Ak4335@rtc) ((lambda (Ak4337@expanded-rhs) (begin (for-each ((lambda (Ak4339@mark-visit) (lambda (Ak433b@x) (begin (Ak2c6e@Ak2abc@invoke-library Ak433b@x) (Ak4339@mark-visit Ak433b@x)))) (Ak30b2@vis-collector)) (Ak4335@rtc)) Ak4337@expanded-rhs)) ((lambda (Ak4345@Ak433e Ak4346@Ak4340 Ak4347@Ak4342 Ak4348@Ak4344) ((lambda (Ak434d@swap) (dynamic-wind Ak434d@swap (lambda () (Ak306a@chi-expr Ak4331@expr Ak4332@r Ak4332@r)) Ak434d@swap)) (lambda () (begin ((lambda (Ak434f@t) (begin (Ak4345@Ak433e Ak4347@Ak4342) (set! Ak4347@Ak4342 Ak434f@t))) (Ak4345@Ak433e)) ((lambda (Ak4351@t) (begin (Ak4346@Ak4340 Ak4348@Ak4344) (set! Ak4348@Ak4344 Ak4351@t))) (Ak4346@Ak4340)))))) Ak30b0@inv-collector Ak30b2@vis-collector Ak4335@rtc (lambda (Ak4353@x) (values))))) (Ak30ae@make-collector)))) (set! Ak30a4@parse-exports (lambda (Ak4355@exp*) ((letrec ((Ak4357@f (lambda (Ak4359@exp* Ak435a@int* Ak435b@ext*) (if (null? Ak4359@exp*) (begin (if (not (Ak2e4b@valid-bound-ids? Ak435b@ext*)) (Ak3128@syntax-violation 'export '"invalid exports" (Ak307e@find-dups Ak435b@ext*)) (void)) (values (map Ak312e@syntax->datum Ak435b@ext*) Ak435a@int*)) ((lambda (Ak435f@t) ((lambda (Ak4361@ls/false) (if Ak4361@ls/false (apply (lambda (Ak4363@rename Ak4364@i* Ak4365@e*) (begin (if (not (and (eq? (Ak312e@syntax->datum Ak4363@rename) 'rename) (for-all Ak2e43@id? Ak4364@i*) (for-all Ak2e43@id? Ak4365@e*))) (Ak3128@syntax-violation 'export '"invalid export specifier" (car Ak4359@exp*)) (void)) (Ak4357@f (cdr Ak4359@exp*) (append Ak4364@i* Ak435a@int*) (append Ak4365@e* Ak435b@ext*)))) Ak4361@ls/false) ((lambda (Ak4369@t) ((lambda (Ak436b@ls/false) (if Ak436b@ls/false (apply (lambda (Ak436d@ie) (begin (if (not (Ak2e43@id? Ak436d@ie)) (Ak3128@syntax-violation 'export '"invalid export" Ak436d@ie) (void)) (Ak4357@f (cdr Ak4359@exp*) (cons Ak436d@ie Ak435a@int*) (cons Ak436d@ie Ak435b@ext*)))) Ak436b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4369@t))) (Ak3048@syntax-dispatch Ak4369@t 'any))) Ak435f@t))) (Ak3048@syntax-dispatch Ak435f@t '(any . #(each (any any)))))) (car Ak4359@exp*)))))) Ak4357@f) Ak4355@exp* '() '()))) (set! Ak30a6@parse-library-name (lambda (Ak436f@spec) ((lambda (Ak4372@parse) (begin (set! Ak4372@parse (lambda (Ak437f@x) ((lambda (Ak4381@t) ((lambda (Ak4383@ls/false) (if (and Ak4383@ls/false (apply (lambda (Ak4385@v*) (for-all (lambda (Ak4387@x) ((lambda (Ak4389@x) (and (integer? Ak4389@x) (exact? Ak4389@x))) (Ak312e@syntax->datum Ak4387@x))) Ak4385@v*)) Ak4383@ls/false)) (apply (lambda (Ak438b@v*) (values '() (map Ak312e@syntax->datum Ak438b@v*))) Ak4383@ls/false) ((lambda (Ak438d@t) ((lambda (Ak438f@ls/false) (if (and Ak438f@ls/false (apply (lambda (Ak4391@x Ak4392@rest) (symbol? (Ak312e@syntax->datum Ak4391@x))) Ak438f@ls/false)) (apply (lambda (Ak4395@x Ak4396@rest) (call-with-values (lambda () (Ak4372@parse Ak4396@rest)) (lambda (Ak439d@Ak439a Ak439e@Ak439c) ((lambda (Ak43a1@v* Ak43a2@x*) (values (cons (Ak312e@syntax->datum Ak4395@x) Ak43a2@x*) Ak43a1@v*)) Ak439e@Ak439c Ak439d@Ak439a)))) Ak438f@ls/false) ((lambda (Ak43a5@t) ((lambda (Ak43a7@ls/false) (if Ak43a7@ls/false (apply (lambda () (values '() '())) Ak43a7@ls/false) ((lambda (Ak43a9@t) ((lambda (Ak43ab@ls/false) (if Ak43ab@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid library name" Ak436f@spec)) Ak43ab@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak43a9@t))) (Ak3048@syntax-dispatch Ak43a9@t '_))) Ak43a5@t))) (Ak3048@syntax-dispatch Ak43a5@t '()))) Ak438d@t))) (Ak3048@syntax-dispatch Ak438d@t '(any . any)))) Ak4381@t))) (Ak3048@syntax-dispatch Ak4381@t '(each-any)))) Ak437f@x))) (call-with-values (lambda () (Ak4372@parse Ak436f@spec)) (lambda (Ak4377@Ak4374 Ak4378@Ak4376) ((lambda (Ak437b@ver* Ak437c@name*) (begin (if (null? Ak437c@name*) (Ak3128@syntax-violation '#f '"empty library name" Ak436f@spec) (void)) (values Ak437c@name* Ak437b@ver*))) Ak4378@Ak4376 Ak4377@Ak4374))))) '#f))) (set! Ak30a8@parse-library (lambda (Ak43ad@e) ((lambda (Ak43af@t) ((lambda (Ak43b1@ls/false) (if (and Ak43b1@ls/false (apply (lambda (Ak43b3@library Ak43b4@name* Ak43b5@export Ak43b6@exp* Ak43b7@import Ak43b8@imp* Ak43b9@b*) (and (eq? (Ak312e@syntax->datum Ak43b5@export) 'export) (eq? (Ak312e@syntax->datum Ak43b7@import) 'import) (eq? (Ak312e@syntax->datum Ak43b3@library) 'library))) Ak43b1@ls/false)) (apply (lambda (Ak43c1@library Ak43c2@name* Ak43c3@export Ak43c4@exp* Ak43c5@import Ak43c6@imp* Ak43c7@b*) (values Ak43c2@name* Ak43c4@exp* Ak43c6@imp* Ak43c7@b*)) Ak43b1@ls/false) ((lambda (Ak43cf@t) ((lambda (Ak43d1@ls/false) (if Ak43d1@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"malformed library" Ak43ad@e)) Ak43d1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak43cf@t))) (Ak3048@syntax-dispatch Ak43cf@t '_))) Ak43af@t))) (Ak3048@syntax-dispatch Ak43af@t '(any each-any (any . each-any) (any . each-any) . each-any)))) Ak43ad@e))) (set! Ak30aa@parse-import-spec* ((lambda () ((lambda (Ak43d4@idsyn? Ak43d6@dup-error Ak43d8@merge-substs Ak43da@exclude* Ak43dc@find* Ak43de@rem* Ak43e0@remove-dups Ak43e2@parse-library-name Ak43e4@import-library Ak43e6@get-import Ak43e8@add-imports!) (begin (set! Ak43d4@idsyn? (lambda (Ak45dd@x) (symbol? (Ak312e@syntax->datum Ak45dd@x)))) (set! Ak43d6@dup-error (lambda (Ak45db@name) (Ak3128@syntax-violation 'import '"two imports with different bindings" Ak45db@name))) (set! Ak43d8@merge-substs (lambda (Ak45c9@s Ak45ca@subst) ((lambda (Ak45ce@insert-to-subst) (begin (set! Ak45ce@insert-to-subst (lambda (Ak45cf@a Ak45d0@subst) ((lambda (Ak45d3@name Ak45d4@label) ((lambda (Ak45d7@t) (if Ak45d7@t ((lambda (Ak45d9@x) (if (eq? (cdr Ak45d9@x) Ak45d4@label) Ak45d0@subst (Ak43d6@dup-error Ak45d3@name))) Ak45d7@t) (cons Ak45cf@a Ak45d0@subst))) (assq Ak45d3@name Ak45d0@subst))) (car Ak45cf@a) (cdr Ak45cf@a)))) (if (null? Ak45c9@s) Ak45ca@subst (Ak45ce@insert-to-subst (car Ak45c9@s) (Ak43d8@merge-substs (cdr Ak45c9@s) Ak45ca@subst))))) '#f))) (set! Ak43da@exclude* (lambda (Ak4599@sym* Ak459a@subst) ((lambda (Ak459e@exclude) (begin (set! Ak459e@exclude (lambda (Ak45b7@sym Ak45b8@subst) (if (null? Ak45b8@subst) (Ak3128@syntax-violation 'import '"cannot rename unbound identifier" Ak45b7@sym) (if (eq? Ak45b7@sym (caar Ak45b8@subst)) (values (cdar Ak45b8@subst) (cdr Ak45b8@subst)) ((lambda (Ak45bb@a) (call-with-values (lambda () (Ak459e@exclude Ak45b7@sym (cdr Ak45b8@subst))) (lambda (Ak45c1@Ak45be Ak45c2@Ak45c0) ((lambda (Ak45c5@subst Ak45c6@old) (values Ak45c6@old (cons Ak45bb@a Ak45c5@subst))) Ak45c2@Ak45c0 Ak45c1@Ak45be)))) (car Ak45b8@subst)))))) (if (null? Ak4599@sym*) (values '() Ak459a@subst) (call-with-values (lambda () (Ak459e@exclude (car Ak4599@sym*) Ak459a@subst)) (lambda (Ak45a3@Ak45a0 Ak45a4@Ak45a2) ((lambda (Ak45a7@subst Ak45a8@old) (call-with-values (lambda () (Ak43da@exclude* (cdr Ak4599@sym*) Ak45a7@subst)) (lambda (Ak45af@Ak45ac Ak45b0@Ak45ae) ((lambda (Ak45b3@subst Ak45b4@old*) (values (cons Ak45a8@old Ak45b4@old*) Ak45b3@subst)) Ak45b0@Ak45ae Ak45af@Ak45ac)))) Ak45a4@Ak45a2 Ak45a3@Ak45a0)))))) '#f))) (set! Ak43dc@find* (lambda (Ak4591@sym* Ak4592@subst) (map (lambda (Ak4595@x) ((lambda (Ak4597@t) (if Ak4597@t (cdr Ak4597@t) (Ak3128@syntax-violation 'import '"cannot find identifier" Ak4595@x))) (assq Ak4595@x Ak4592@subst))) Ak4591@sym*))) (set! Ak43de@rem* (lambda (Ak4589@sym* Ak458a@subst) ((letrec ((Ak458d@f (lambda (Ak458f@subst) (if (null? Ak458f@subst) '() (if (memq (caar Ak458f@subst) Ak4589@sym*) (Ak458d@f (cdr Ak458f@subst)) (cons (car Ak458f@subst) (Ak458d@f (cdr Ak458f@subst)))))))) Ak458d@f) Ak458a@subst))) (set! Ak43e0@remove-dups (lambda (Ak4587@ls) (if (null? Ak4587@ls) '() (if (memq (car Ak4587@ls) (cdr Ak4587@ls)) (Ak43e0@remove-dups (cdr Ak4587@ls)) (cons (car Ak4587@ls) (Ak43e0@remove-dups (cdr Ak4587@ls))))))) (set! Ak43e2@parse-library-name (lambda (Ak449f@spec) ((lambda (Ak44a2@subversion? Ak44a4@subversion-pred Ak44a6@version-pred) (begin (set! Ak44a2@subversion? (lambda (Ak4583@x) ((lambda (Ak4585@x) (and (integer? Ak4585@x) (exact? Ak4585@x) (>= Ak4585@x '0))) (Ak312e@syntax->datum Ak4583@x)))) (set! Ak44a4@subversion-pred (lambda (Ak4523@x*) ((lambda (Ak4525@t) ((lambda (Ak4527@ls/false) (if (and Ak4527@ls/false (apply (lambda (Ak4529@n) (Ak44a2@subversion? Ak4529@n)) Ak4527@ls/false)) (apply (lambda (Ak452b@n) (lambda (Ak452d@x) (= Ak452d@x (Ak312e@syntax->datum Ak452b@n)))) Ak4527@ls/false) ((lambda (Ak452f@t) ((lambda (Ak4531@ls/false) (if (and Ak4531@ls/false (apply (lambda (Ak4533@p? Ak4534@sub*) (eq? (Ak312e@syntax->datum Ak4533@p?) 'and)) Ak4531@ls/false)) (apply (lambda (Ak4537@p? Ak4538@sub*) ((lambda (Ak453b@p*) (lambda (Ak453d@x) (for-all (lambda (Ak453f@p) (Ak453f@p Ak453d@x)) Ak453b@p*))) (map Ak44a4@subversion-pred Ak4538@sub*))) Ak4531@ls/false) ((lambda (Ak4541@t) ((lambda (Ak4543@ls/false) (if (and Ak4543@ls/false (apply (lambda (Ak4545@p? Ak4546@sub*) (eq? (Ak312e@syntax->datum Ak4545@p?) 'or)) Ak4543@ls/false)) (apply (lambda (Ak4549@p? Ak454a@sub*) ((lambda (Ak454d@p*) (lambda (Ak454f@x) (exists (lambda (Ak4551@p) (Ak4551@p Ak454f@x)) Ak454d@p*))) (map Ak44a4@subversion-pred Ak454a@sub*))) Ak4543@ls/false) ((lambda (Ak4553@t) ((lambda (Ak4555@ls/false) (if (and Ak4555@ls/false (apply (lambda (Ak4557@p? Ak4558@sub) (eq? (Ak312e@syntax->datum Ak4557@p?) 'not)) Ak4555@ls/false)) (apply (lambda (Ak455b@p? Ak455c@sub) ((lambda (Ak455f@p) (lambda (Ak4561@x) (not (Ak455f@p Ak4561@x)))) (Ak44a4@subversion-pred Ak455c@sub))) Ak4555@ls/false) ((lambda (Ak4563@t) ((lambda (Ak4565@ls/false) (if (and Ak4565@ls/false (apply (lambda (Ak4567@p? Ak4568@n) (and (eq? (Ak312e@syntax->datum Ak4567@p?) '<=) (Ak44a2@subversion? Ak4568@n))) Ak4565@ls/false)) (apply (lambda (Ak456b@p? Ak456c@n) (lambda (Ak456f@x) (<= Ak456f@x (Ak312e@syntax->datum Ak456c@n)))) Ak4565@ls/false) ((lambda (Ak4571@t) ((lambda (Ak4573@ls/false) (if (and Ak4573@ls/false (apply (lambda (Ak4575@p? Ak4576@n) (and (eq? (Ak312e@syntax->datum Ak4575@p?) '>=) (Ak44a2@subversion? Ak4576@n))) Ak4573@ls/false)) (apply (lambda (Ak4579@p? Ak457a@n) (lambda (Ak457d@x) (>= Ak457d@x (Ak312e@syntax->datum Ak457a@n)))) Ak4573@ls/false) ((lambda (Ak457f@t) ((lambda (Ak4581@ls/false) (if Ak4581@ls/false (apply (lambda () (Ak3128@syntax-violation 'import '"invalid sub-version spec" Ak449f@spec Ak4523@x*)) Ak4581@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak457f@t))) (Ak3048@syntax-dispatch Ak457f@t '_))) Ak4571@t))) (Ak3048@syntax-dispatch Ak4571@t '(any any)))) Ak4563@t))) (Ak3048@syntax-dispatch Ak4563@t '(any any)))) Ak4553@t))) (Ak3048@syntax-dispatch Ak4553@t '(any any)))) Ak4541@t))) (Ak3048@syntax-dispatch Ak4541@t '(any . each-any)))) Ak452f@t))) (Ak3048@syntax-dispatch Ak452f@t '(any . each-any)))) Ak4525@t))) (Ak3048@syntax-dispatch Ak4525@t 'any))) Ak4523@x*))) (set! Ak44a6@version-pred (lambda (Ak44d3@x*) ((lambda (Ak44d5@t) ((lambda (Ak44d7@ls/false) (if Ak44d7@ls/false (apply (lambda () (lambda (Ak44d9@x) '#t)) Ak44d7@ls/false) ((lambda (Ak44db@t) ((lambda (Ak44dd@ls/false) (if (and Ak44dd@ls/false (apply (lambda (Ak44df@c Ak44e0@ver*) (eq? (Ak312e@syntax->datum Ak44df@c) 'and)) Ak44dd@ls/false)) (apply (lambda (Ak44e3@c Ak44e4@ver*) ((lambda (Ak44e7@p*) (lambda (Ak44e9@x) (for-all (lambda (Ak44eb@p) (Ak44eb@p Ak44e9@x)) Ak44e7@p*))) (map Ak44a6@version-pred Ak44e4@ver*))) Ak44dd@ls/false) ((lambda (Ak44ed@t) ((lambda (Ak44ef@ls/false) (if (and Ak44ef@ls/false (apply (lambda (Ak44f1@c Ak44f2@ver*) (eq? (Ak312e@syntax->datum Ak44f1@c) 'or)) Ak44ef@ls/false)) (apply (lambda (Ak44f5@c Ak44f6@ver*) ((lambda (Ak44f9@p*) (lambda (Ak44fb@x) (exists (lambda (Ak44fd@p) (Ak44fd@p Ak44fb@x)) Ak44f9@p*))) (map Ak44a6@version-pred Ak44f6@ver*))) Ak44ef@ls/false) ((lambda (Ak44ff@t) ((lambda (Ak4501@ls/false) (if (and Ak4501@ls/false (apply (lambda (Ak4503@c Ak4504@ver) (eq? (Ak312e@syntax->datum Ak4503@c) 'not)) Ak4501@ls/false)) (apply (lambda (Ak4507@c Ak4508@ver) ((lambda (Ak450b@p) (lambda (Ak450d@x) (not (Ak450b@p Ak450d@x)))) (Ak44a6@version-pred Ak4508@ver))) Ak4501@ls/false) ((lambda (Ak450f@t) ((lambda (Ak4511@ls/false) (if Ak4511@ls/false (apply (lambda (Ak4513@sub*) ((lambda (Ak4515@p*) (lambda (Ak4517@x) ((letrec ((Ak4519@f (lambda (Ak451b@p* Ak451c@x) (if (null? Ak451b@p*) '#t (if (null? Ak451c@x) '#f (and ((car Ak451b@p*) (car Ak451c@x)) (Ak4519@f (cdr Ak451b@p*) (cdr Ak451c@x)))))))) Ak4519@f) Ak4515@p* Ak4517@x))) (map Ak44a4@subversion-pred Ak4513@sub*))) Ak4511@ls/false) ((lambda (Ak451f@t) ((lambda (Ak4521@ls/false) (if Ak4521@ls/false (apply (lambda () (Ak3128@syntax-violation 'import '"invalid version spec" Ak449f@spec Ak44d3@x*)) Ak4521@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak451f@t))) (Ak3048@syntax-dispatch Ak451f@t '_))) Ak450f@t))) (Ak3048@syntax-dispatch Ak450f@t 'each-any))) Ak44ff@t))) (Ak3048@syntax-dispatch Ak44ff@t '(any any)))) Ak44ed@t))) (Ak3048@syntax-dispatch Ak44ed@t '(any . each-any)))) Ak44db@t))) (Ak3048@syntax-dispatch Ak44db@t '(any . each-any)))) Ak44d5@t))) (Ak3048@syntax-dispatch Ak44d5@t '()))) Ak44d3@x*))) ((letrec ((Ak44a7@f (lambda (Ak44a9@x) ((lambda (Ak44ab@t) ((lambda (Ak44ad@ls/false) (if Ak44ad@ls/false (apply (lambda (Ak44af@version-spec*) (values '() (Ak44a6@version-pred Ak44af@version-spec*))) Ak44ad@ls/false) ((lambda (Ak44b1@t) ((lambda (Ak44b3@ls/false) (if (and Ak44b3@ls/false (apply (lambda (Ak44b5@x Ak44b6@x*) (Ak43d4@idsyn? Ak44b5@x)) Ak44b3@ls/false)) (apply (lambda (Ak44b9@x Ak44ba@x*) (call-with-values (lambda () (Ak44a7@f Ak44ba@x*)) (lambda (Ak44c1@Ak44be Ak44c2@Ak44c0) ((lambda (Ak44c5@pred Ak44c6@name) (values (cons (Ak312e@syntax->datum Ak44b9@x) Ak44c6@name) Ak44c5@pred)) Ak44c2@Ak44c0 Ak44c1@Ak44be)))) Ak44b3@ls/false) ((lambda (Ak44c9@t) ((lambda (Ak44cb@ls/false) (if Ak44cb@ls/false (apply (lambda () (values '() (lambda (Ak44cd@x) '#t))) Ak44cb@ls/false) ((lambda (Ak44cf@t) ((lambda (Ak44d1@ls/false) (if Ak44d1@ls/false (apply (lambda () (Ak3128@syntax-violation '#f '"invalid import spec" Ak449f@spec)) Ak44d1@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak44cf@t))) (Ak3048@syntax-dispatch Ak44cf@t '_))) Ak44c9@t))) (Ak3048@syntax-dispatch Ak44c9@t '()))) Ak44b1@t))) (Ak3048@syntax-dispatch Ak44b1@t '(any . any)))) Ak44ab@t))) (Ak3048@syntax-dispatch Ak44ab@t '(each-any)))) Ak44a9@x)))) Ak44a7@f) Ak449f@spec))) '#f '#f '#f))) (set! Ak43e4@import-library (lambda (Ak448f@spec*) (call-with-values (lambda () (Ak43e2@parse-library-name Ak448f@spec*)) (lambda (Ak4495@Ak4492 Ak4496@Ak4494) ((lambda (Ak4499@pred Ak449a@name) (begin (if (null? Ak449a@name) (Ak3128@syntax-violation 'import '"empty library name" Ak448f@spec*) (void)) ((lambda (Ak449d@lib) (begin (if (not Ak449d@lib) (Ak3128@syntax-violation 'import '"cannot find library with required name" Ak449a@name) (void)) (if (not (Ak4499@pred (Ak2c41@Ak2a62@library-version Ak449d@lib))) (Ak3128@syntax-violation 'import '"library does not satisfy version specification" Ak448f@spec* Ak449d@lib) (void)) ((Ak30b4@imp-collector) Ak449d@lib) (Ak2c49@Ak2a72@library-subst Ak449d@lib))) (Ak2c67@Ak2aae@find-library-by-name Ak449a@name)))) Ak4496@Ak4494 Ak4495@Ak4492))))) (set! Ak43e6@get-import (lambda (Ak4401@spec) ((lambda (Ak4403@t) ((lambda (Ak4405@ls/false) (if (and Ak4405@ls/false (apply (lambda (Ak4407@x Ak4408@x*) (not (memq (Ak312e@syntax->datum Ak4407@x) '(for rename except only prefix library)))) Ak4405@ls/false)) (apply (lambda (Ak440b@x Ak440c@x*) (Ak43e4@import-library (cons Ak440b@x Ak440c@x*))) Ak4405@ls/false) ((lambda (Ak440f@t) ((lambda (Ak4411@ls/false) (if (and Ak4411@ls/false (apply (lambda (Ak4413@rename Ak4414@isp Ak4415@old* Ak4416@new*) (and (eq? (Ak312e@syntax->datum Ak4413@rename) 'rename) (for-all Ak43d4@idsyn? Ak4415@old*) (for-all Ak43d4@idsyn? Ak4416@new*))) Ak4411@ls/false)) (apply (lambda (Ak441b@rename Ak441c@isp Ak441d@old* Ak441e@new*) ((lambda (Ak4423@subst Ak4424@old* Ak4425@new*) ((lambda (Ak4429@old-label*) ((lambda (Ak442b@subst) (Ak43d8@merge-substs (map cons Ak4425@new* Ak4429@old-label*) Ak442b@subst)) (Ak43de@rem* Ak4424@old* Ak4423@subst))) (Ak43dc@find* Ak4424@old* Ak4423@subst))) (Ak43e6@get-import Ak441c@isp) (map Ak312e@syntax->datum Ak441d@old*) (map Ak312e@syntax->datum Ak441e@new*))) Ak4411@ls/false) ((lambda (Ak442d@t) ((lambda (Ak442f@ls/false) (if (and Ak442f@ls/false (apply (lambda (Ak4431@except Ak4432@isp Ak4433@sym*) (and (eq? (Ak312e@syntax->datum Ak4431@except) 'except) (for-all Ak43d4@idsyn? Ak4433@sym*))) Ak442f@ls/false)) (apply (lambda (Ak4437@except Ak4438@isp Ak4439@sym*) ((lambda (Ak443d@subst) (Ak43de@rem* (map Ak312e@syntax->datum Ak4439@sym*) Ak443d@subst)) (Ak43e6@get-import Ak4438@isp))) Ak442f@ls/false) ((lambda (Ak443f@t) ((lambda (Ak4441@ls/false) (if (and Ak4441@ls/false (apply (lambda (Ak4443@only Ak4444@isp Ak4445@sym*) (and (eq? (Ak312e@syntax->datum Ak4443@only) 'only) (for-all Ak43d4@idsyn? Ak4445@sym*))) Ak4441@ls/false)) (apply (lambda (Ak4449@only Ak444a@isp Ak444b@sym*) ((lambda (Ak444f@subst Ak4450@sym*) ((lambda (Ak4453@sym*) ((lambda (Ak4455@lab*) (map cons Ak4453@sym* Ak4455@lab*)) (Ak43dc@find* Ak4453@sym* Ak444f@subst))) (Ak43e0@remove-dups Ak4450@sym*))) (Ak43e6@get-import Ak444a@isp) (map Ak312e@syntax->datum Ak444b@sym*))) Ak4441@ls/false) ((lambda (Ak4457@t) ((lambda (Ak4459@ls/false) (if (and Ak4459@ls/false (apply (lambda (Ak445b@prefix Ak445c@isp Ak445d@p) (and (eq? (Ak312e@syntax->datum Ak445b@prefix) 'prefix) (Ak43d4@idsyn? Ak445d@p))) Ak4459@ls/false)) (apply (lambda (Ak4461@prefix Ak4462@isp Ak4463@p) ((lambda (Ak4467@subst Ak4468@prefix) (map (lambda (Ak446b@x) (cons (string->symbol (string-append Ak4468@prefix (symbol->string (car Ak446b@x)))) (cdr Ak446b@x))) Ak4467@subst)) (Ak43e6@get-import Ak4462@isp) (symbol->string (Ak312e@syntax->datum Ak4463@p)))) Ak4459@ls/false) ((lambda (Ak446d@t) ((lambda (Ak446f@ls/false) (if (and Ak446f@ls/false (apply (lambda (Ak4471@library Ak4472@spec*) (eq? (Ak312e@syntax->datum Ak4471@library) 'library)) Ak446f@ls/false)) (apply (lambda (Ak4475@library Ak4476@spec*) (Ak43e4@import-library Ak4476@spec*)) Ak446f@ls/false) ((lambda (Ak4479@t) ((lambda (Ak447b@ls/false) (if (and Ak447b@ls/false (apply (lambda (Ak447d@for Ak447e@isp Ak447f@rest) (eq? (Ak312e@syntax->datum Ak447d@for) 'for)) Ak447b@ls/false)) (apply (lambda (Ak4483@for Ak4484@isp Ak4485@rest) (Ak43e6@get-import Ak4484@isp)) Ak447b@ls/false) ((lambda (Ak4489@t) ((lambda (Ak448b@ls/false) (if Ak448b@ls/false (apply (lambda (Ak448d@spec) (Ak3128@syntax-violation 'import '"invalid import spec" Ak448d@spec)) Ak448b@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4489@t))) (Ak3048@syntax-dispatch Ak4489@t 'any))) Ak4479@t))) (Ak3048@syntax-dispatch Ak4479@t '(any any . any)))) Ak446d@t))) (Ak3048@syntax-dispatch Ak446d@t '(any each-any)))) Ak4457@t))) (Ak3048@syntax-dispatch Ak4457@t '(any any any)))) Ak443f@t))) (Ak3048@syntax-dispatch Ak443f@t '(any any . each-any)))) Ak442d@t))) (Ak3048@syntax-dispatch Ak442d@t '(any any . each-any)))) Ak440f@t))) (Ak3048@syntax-dispatch Ak440f@t '(any any . #(each (any any)))))) Ak4403@t))) (Ak3048@syntax-dispatch Ak4403@t '(any . each-any)))) Ak4401@spec))) (set! Ak43e8@add-imports! (lambda (Ak43f1@imp Ak43f2@h) ((lambda (Ak43f5@subst) (for-each (lambda (Ak43f7@x) ((lambda (Ak43f9@name Ak43fa@label) ((lambda (Ak43fd@t) (if Ak43fd@t ((lambda (Ak43ff@l) (if (not (eq? Ak43ff@l Ak43fa@label)) (Ak43d6@dup-error Ak43f9@name) (void))) Ak43fd@t) (hashtable-set! Ak43f2@h Ak43f9@name Ak43fa@label))) (hashtable-ref Ak43f2@h Ak43f9@name '#f))) (car Ak43f7@x) (cdr Ak43f7@x))) Ak43f5@subst)) (Ak43e6@get-import Ak43f1@imp)))) (lambda (Ak43e9@imp*) ((letrec ((Ak43eb@f (lambda (Ak43ed@imp* Ak43ee@h) (if (null? Ak43ed@imp*) (hashtable-entries Ak43ee@h) (begin (Ak43e8@add-imports! (car Ak43ed@imp*) Ak43ee@h) (Ak43eb@f (cdr Ak43ed@imp*) Ak43ee@h)))))) Ak43eb@f) Ak43e9@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! Ak30ac@make-top-rib (lambda (Ak45df@names Ak45e0@labels) ((lambda (Ak45e3@rib) (begin (vector-for-each (lambda (Ak45e5@name Ak45e6@label) (begin (if (not (symbol? Ak45e5@name)) (error 'make-top-rib '"BUG: not a symbol" Ak45e5@name) (void)) (Ak2dfb@extend-rib/nc! Ak45e3@rib (make-simple-struct 'stx '5 (list Ak45e5@name Ak2dc7@top-mark* '() '())) Ak45e6@label))) Ak45df@names Ak45e0@labels) Ak45e3@rib)) (Ak2df7@make-empty-rib)))) (set! Ak30ae@make-collector (lambda () ((lambda (Ak45e9@ls) (lambda Ak45ed ((lambda (Ak45ee) (if (= Ak45ee '0) (apply (lambda () Ak45e9@ls) Ak45ed) (if (= Ak45ee '1) (apply (lambda (Ak45eb@x) (set! Ak45e9@ls (Ak2dc0@set-cons Ak45eb@x Ak45e9@ls))) Ak45ed) (error 'apply '"invalid arg count")))) (length Ak45ed)))) '()))) (set! Ak30b0@inv-collector (Ak29a2@Ak2881@make-parameter (lambda Ak45ef@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (Ak45f1@x) (begin (if (not (procedure? Ak45f1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" Ak45f1@x) (void)) Ak45f1@x)))) (set! Ak30b2@vis-collector (Ak29a2@Ak2881@make-parameter (lambda Ak45f3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (Ak45f5@x) (begin (if (not (procedure? Ak45f5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" Ak45f5@x) (void)) Ak45f5@x)))) (set! Ak30b4@imp-collector (Ak29a2@Ak2881@make-parameter (lambda Ak45f7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (Ak45f9@x) (begin (if (not (procedure? Ak45f9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" Ak45f9@x) (void)) Ak45f9@x)))) (set! Ak30b6@chi-library-internal (lambda (Ak45fb@e* Ak45fc@rib Ak45fd@top?) (call-with-values (lambda () (Ak30a0@chi-body* Ak45fb@e* '() '() '() '() '() '() '() Ak45fc@rib Ak45fd@top?)) (lambda (Ak4611@Ak4602 Ak4612@Ak4604 Ak4613@Ak4606 Ak4614@Ak4608 Ak4615@Ak460a Ak4616@Ak460c Ak4617@Ak460e Ak4618@Ak4610) ((lambda (Ak4621@exp* Ak4622@_kwd* Ak4623@mod** Ak4624@rhs* Ak4625@lex* Ak4626@mr Ak4627@r Ak4628@e*) (values (append (apply append (reverse Ak4623@mod**)) Ak4628@e*) Ak4627@r Ak4626@mr (reverse Ak4625@lex*) (reverse Ak4624@rhs*) Ak4621@exp*)) Ak4618@Ak4610 Ak4617@Ak460e Ak4616@Ak460c Ak4615@Ak460a Ak4614@Ak4608 Ak4613@Ak4606 Ak4612@Ak4604 Ak4611@Ak4602))))) (set! Ak30b8@chi-interaction-expr (lambda (Ak4631@e Ak4632@rib Ak4633@r) (call-with-values (lambda () (Ak30a0@chi-body* (list Ak4631@e) Ak4633@r Ak4633@r '() '() '() '() '() Ak4632@rib '#t)) (lambda (Ak4647@Ak4638 Ak4648@Ak463a Ak4649@Ak463c Ak464a@Ak463e Ak464b@Ak4640 Ak464c@Ak4642 Ak464d@Ak4644 Ak464e@Ak4646) ((lambda (Ak4657@_exp* Ak4658@_kwd* Ak4659@mod** Ak465a@rhs* Ak465b@lex* Ak465c@mr Ak465d@r Ak465e@e*) ((lambda (Ak4667@e*) ((lambda (Ak4669@e) (values Ak4669@e Ak465d@r)) (if (null? Ak4667@e*) (Ak2dab@Ak2d1b@build-void) (if (null? (cdr Ak4667@e*)) (car Ak4667@e*) (Ak2daa@Ak2d19@build-sequence '#f Ak4667@e*))))) (Ak3078@expand-interaction-rhs*/init* (reverse Ak465b@lex*) (reverse Ak465a@rhs*) (append (apply append (reverse Ak4659@mod**)) Ak465e@e*) Ak465d@r Ak465c@mr))) Ak464e@Ak4646 Ak464d@Ak4644 Ak464c@Ak4642 Ak464b@Ak4640 Ak464a@Ak463e Ak4649@Ak463c Ak4648@Ak463a Ak4647@Ak4638))))) (set! Ak30ba@library-body-expander (lambda (Ak466b@name Ak466c@main-exp* Ak466d@imp* Ak466e@b* Ak466f@top?) ((lambda (Ak4676@itc) (begin (set! Ak4676@itc (Ak30ae@make-collector)) ((lambda (Ak467f@Ak4678 Ak4680@Ak467a Ak4681@Ak467c Ak4682@Ak467e) ((lambda (Ak4687@swap) (dynamic-wind Ak4687@swap (lambda () (call-with-values (lambda () (Ak30aa@parse-import-spec* Ak466d@imp*)) (lambda (Ak468d@Ak468a Ak468e@Ak468c) ((lambda (Ak4691@subst-labels Ak4692@subst-names) ((lambda (Ak4695@rib) ((lambda (Ak4698@wrap) (begin (set! Ak4698@wrap (lambda (Ak4713@x) (make-simple-struct 'stx '5 (list Ak4713@x Ak2dc7@top-mark* (list Ak4695@rib) '())))) ((lambda (Ak4699@b* Ak469a@main-exp* Ak469b@rtc Ak469c@vtc) ((lambda (Ak46a9@Ak46a2 Ak46aa@Ak46a4 Ak46ab@Ak46a6 Ak46ac@Ak46a8) ((lambda (Ak46b1@swap) (dynamic-wind Ak46b1@swap (lambda () (call-with-values (lambda () (Ak30b6@chi-library-internal Ak4699@b* Ak4695@rib Ak466f@top?)) (lambda (Ak46bf@Ak46b4 Ak46c0@Ak46b6 Ak46c1@Ak46b8 Ak46c2@Ak46ba Ak46c3@Ak46bc Ak46c4@Ak46be) ((lambda (Ak46cb@internal-exp* Ak46cc@rhs* Ak46cd@lex* Ak46ce@mr Ak46cf@r Ak46d0@init*) (call-with-values (lambda () (Ak30a4@parse-exports (append Ak469a@main-exp* Ak46cb@internal-exp*))) (lambda (Ak46db@Ak46d8 Ak46dc@Ak46da) ((lambda (Ak46df@exp-id* Ak46e0@exp-name*) (begin (Ak2dff@seal-rib! Ak4695@rib) ((lambda (Ak46e3@init*) ((lambda (Ak46e5@rhs*) ((lambda () (begin (Ak2e01@unseal-rib! Ak4695@rib) ((lambda (Ak46e7@loc* Ak46e8@export-subst) ((lambda (Ak46ec@errstr) (begin (set! Ak46ec@errstr '"attempt to export mutated variable") (call-with-values (lambda () (Ak3114@make-export-env/macros Ak46cd@lex* Ak46e7@loc* Ak46cf@r)) (lambda (Ak46f3@Ak46ee Ak46f4@Ak46f0 Ak46f5@Ak46f2) ((lambda (Ak46f9@macro* Ak46fa@global* Ak46fb@export-env) (begin (for-each (lambda (Ak46ff@s) ((lambda (Ak4701@name Ak4702@label) ((lambda (Ak4705@p) (if Ak4705@p ((lambda (Ak4707@b) ((lambda (Ak4709@type) (if (eq? Ak4709@type 'mutable) (Ak3128@syntax-violation 'export Ak46ec@errstr Ak4701@name) (void))) (car Ak4707@b))) (cdr Ak4705@p)) (void))) (assq Ak4702@label Ak46fb@export-env))) (car Ak46ff@s) (cdr Ak46ff@s))) Ak46e8@export-subst) ((lambda (Ak470b@invoke-body Ak470c@invoke-definitions) (values (Ak4676@itc) (Ak469b@rtc) (Ak469c@vtc) (Ak2daa@Ak2d19@build-sequence '#f (append Ak470c@invoke-definitions (list Ak470b@invoke-body))) Ak46f9@macro* Ak46e8@export-subst Ak46fb@export-env)) (Ak2dad@Ak2d1f@build-letrec* '#f Ak46cd@lex* Ak46e5@rhs* (Ak3110@build-exports Ak46fa@global* Ak46e3@init*)) (map Ak2da6@Ak2c76@build-global-define (map cdr Ak46fa@global*))))) Ak46f5@Ak46f2 Ak46f4@Ak46f0 Ak46f3@Ak46ee))))) '#f)) (map Ak2dcd@gen-global Ak46cd@lex*) (Ak3112@make-export-subst Ak46e0@exp-name* Ak46df@exp-id*)))))) (Ak307a@chi-rhs* Ak46cc@rhs* Ak46cf@r Ak46ce@mr))) (Ak3066@chi-expr* Ak46d0@init* Ak46cf@r Ak46ce@mr)))) Ak46dc@Ak46da Ak46db@Ak46d8)))) Ak46c4@Ak46be Ak46c3@Ak46bc Ak46c2@Ak46ba Ak46c1@Ak46b8 Ak46c0@Ak46b6 Ak46bf@Ak46b4)))) Ak46b1@swap)) (lambda () (begin ((lambda (Ak470f@t) (begin (Ak46a9@Ak46a2 Ak46ab@Ak46a6) (set! Ak46ab@Ak46a6 Ak470f@t))) (Ak46a9@Ak46a2)) ((lambda (Ak4711@t) (begin (Ak46aa@Ak46a4 Ak46ac@Ak46a8) (set! Ak46ac@Ak46a8 Ak4711@t))) (Ak46aa@Ak46a4)))))) Ak30b0@inv-collector Ak30b2@vis-collector Ak469b@rtc Ak469c@vtc)) (map Ak4698@wrap Ak466e@b*) (map Ak4698@wrap Ak466c@main-exp*) (Ak30ae@make-collector) (Ak30ae@make-collector)))) '#f)) (Ak30ac@make-top-rib Ak4692@subst-names Ak4691@subst-labels))) Ak468e@Ak468c Ak468d@Ak468a)))) Ak4687@swap)) (lambda () (begin ((lambda (Ak4715@t) (begin (Ak467f@Ak4678 Ak4681@Ak467c) (set! Ak4681@Ak467c Ak4715@t))) (Ak467f@Ak4678)) ((lambda (Ak4717@t) (begin (Ak4680@Ak467a Ak4682@Ak467e) (set! Ak4682@Ak467e Ak4717@t))) (Ak4680@Ak467a)))))) Ak30b4@imp-collector Ak3136@top-level-context Ak4676@itc '#f))) '#f))) (set! Ak30bc@core-library-expander (lambda (Ak4719@e Ak471a@verify-name) (call-with-values (lambda () (Ak30a8@parse-library Ak4719@e)) (lambda (Ak4725@Ak471e Ak4726@Ak4720 Ak4727@Ak4722 Ak4728@Ak4724) ((lambda (Ak472d@b* Ak472e@imp* Ak472f@exp* Ak4730@name*) (call-with-values (lambda () (Ak30a6@parse-library-name Ak4730@name*)) (lambda (Ak4739@Ak4736 Ak473a@Ak4738) ((lambda (Ak473d@ver Ak473e@name) (begin (Ak471a@verify-name Ak473e@name) (call-with-values (lambda () (Ak30ba@library-body-expander Ak473e@name Ak472f@exp* Ak472e@imp* Ak472d@b* '#f)) (lambda (Ak474f@Ak4742 Ak4750@Ak4744 Ak4751@Ak4746 Ak4752@Ak4748 Ak4753@Ak474a Ak4754@Ak474c Ak4755@Ak474e) ((lambda (Ak475d@export-env Ak475e@export-subst Ak475f@visit-code Ak4760@invoke-code Ak4761@visit-req* Ak4762@invoke-req* Ak4763@imp*) (values Ak473e@name Ak473d@ver Ak4763@imp* Ak4762@invoke-req* Ak4761@visit-req* Ak4760@invoke-code Ak475f@visit-code Ak475e@export-subst Ak475d@export-env)) Ak4755@Ak474e Ak4754@Ak474c Ak4753@Ak474a Ak4752@Ak4748 Ak4751@Ak4746 Ak4750@Ak4744 Ak474f@Ak4742))))) Ak473a@Ak4738 Ak4739@Ak4736)))) Ak4728@Ak4724 Ak4727@Ak4722 Ak4726@Ak4720 Ak4725@Ak471e))))) (set! Ak30be@parse-top-level-program (lambda (Ak476b@e*) ((lambda (Ak476d@t) ((lambda (Ak476f@ls/false) (if (and Ak476f@ls/false (apply (lambda (Ak4771@import Ak4772@imp* Ak4773@b*) (eq? (Ak312e@syntax->datum Ak4771@import) 'import)) Ak476f@ls/false)) (apply (lambda (Ak4777@import Ak4778@imp* Ak4779@b*) (values Ak4778@imp* Ak4779@b*)) Ak476f@ls/false) ((lambda (Ak477d@t) ((lambda (Ak477f@ls/false) (if (and Ak477f@ls/false (apply (lambda (Ak4781@import Ak4782@x Ak4783@y) (eq? (Ak312e@syntax->datum Ak4781@import) 'import)) Ak477f@ls/false)) (apply (lambda (Ak4787@import Ak4788@x Ak4789@y) (Ak3128@syntax-violation 'expander '"invalid syntax of top-level program" (Ak2e3d@syntax-car Ak476b@e*))) Ak477f@ls/false) ((lambda (Ak478d@t) ((lambda (Ak478f@ls/false) (if Ak478f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) Ak478f@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak478d@t))) (Ak3048@syntax-dispatch Ak478d@t '_))) Ak477d@t))) (Ak3048@syntax-dispatch Ak477d@t '((any . any) . any)))) Ak476d@t))) (Ak3048@syntax-dispatch Ak476d@t '((any . each-any) . each-any)))) Ak476b@e*))) (set! Ak30c0@top-level-expander (lambda (Ak4791@e*) (call-with-values (lambda () (Ak30be@parse-top-level-program Ak4791@e*)) (lambda (Ak4797@Ak4794 Ak4798@Ak4796) ((lambda (Ak479b@b* Ak479c@imp*) (call-with-values (lambda () (Ak30ba@library-body-expander '() '() Ak479c@imp* Ak479b@b* '#t)) (lambda (Ak47ad@Ak47a0 Ak47ae@Ak47a2 Ak47af@Ak47a4 Ak47b0@Ak47a6 Ak47b1@Ak47a8 Ak47b2@Ak47aa Ak47b3@Ak47ac) ((lambda (Ak47bb@export-env Ak47bc@export-subst Ak47bd@visit-code Ak47be@invoke-code Ak47bf@visit-req* Ak47c0@invoke-req* Ak47c1@imp*) (values Ak47c0@invoke-req* Ak47be@invoke-code)) Ak47b3@Ak47ac Ak47b2@Ak47aa Ak47b1@Ak47a8 Ak47b0@Ak47a6 Ak47af@Ak47a4 Ak47ae@Ak47a2 Ak47ad@Ak47a0)))) Ak4798@Ak4796 Ak4797@Ak4794))))) (set! Ak30c2@rp (Ak299f@Ak287b@make-record-printer 'env (lambda (Ak47c9@x Ak47ca@p Ak47cb@wr) (display '"#<environment>" Ak47ca@p)))) (set! Ak30cc@env? (lambda (Ak47cf@x) (and (simple-struct? Ak47cf@x) (eq? (simple-struct-name Ak47cf@x) 'env)))) (set! Ak30ce@env-names (lambda (Ak47d1@x) (simple-struct-ref Ak47d1@x '0))) (set! Ak30d0@set-env-names! (lambda (Ak47d3@x Ak47d4@val) (simple-struct-set! Ak47d3@x '0 Ak47d4@val))) (set! Ak30d2@env-labels (lambda (Ak47d7@x) (simple-struct-ref Ak47d7@x '1))) (set! Ak30d4@set-env-labels! (lambda (Ak47d9@x Ak47da@val) (simple-struct-set! Ak47d9@x '1 Ak47da@val))) (set! Ak30d6@env-itc (lambda (Ak47dd@x) (simple-struct-ref Ak47dd@x '2))) (set! Ak30d8@set-env-itc! (lambda (Ak47df@x Ak47e0@val) (simple-struct-set! Ak47df@x '2 Ak47e0@val))) (set! Ak30da@dummy '3) (set! Ak30dc@rp (Ak299f@Ak287b@make-record-printer 'interaction-env (lambda (Ak47e3@x Ak47e4@p Ak47e5@wr) (display '"#<environment>" Ak47e4@p)))) (set! Ak30e6@interaction-env? (lambda (Ak47e9@x) (and (simple-struct? Ak47e9@x) (eq? (simple-struct-name Ak47e9@x) 'interaction-env)))) (set! Ak30e8@interaction-env-rib (lambda (Ak47eb@x) (simple-struct-ref Ak47eb@x '0))) (set! Ak30ea@set-interaction-env-rib! (lambda (Ak47ed@x Ak47ee@val) (simple-struct-set! Ak47ed@x '0 Ak47ee@val))) (set! Ak30ec@interaction-env-r (lambda (Ak47f1@x) (simple-struct-ref Ak47f1@x '1))) (set! Ak30ee@set-interaction-env-r! (lambda (Ak47f3@x Ak47f4@val) (simple-struct-set! Ak47f3@x '1 Ak47f4@val))) (set! Ak30f0@interaction-env-locs (lambda (Ak47f7@x) (simple-struct-ref Ak47f7@x '2))) (set! Ak30f2@set-interaction-env-locs! (lambda (Ak47f9@x Ak47fa@val) (simple-struct-set! Ak47f9@x '2 Ak47fa@val))) (set! Ak30f4@dummy '3) (set! Ak30f6@interaction-environment-symbols (lambda () (Ak30fe@environment-symbols (Ak3134@interaction-environment)))) (set! Ak30f8@environment-bindings (lambda (Ak47fd@e) (vector->list (vector-map (lambda (Ak47ff@name Ak4800@label) (Ak30fa@parse-binding (cons Ak47ff@name (Ak2c6d@Ak2aba@imported-label->binding Ak4800@label)))) (Ak30ce@env-names Ak47fd@e) (Ak30d2@env-labels Ak47fd@e))))) (set! Ak30fa@parse-binding (lambda (Ak4803@b) (cons (car Ak4803@b) ((lambda (Ak4805@t) (if (memv Ak4805@t '(core-prim global)) 'procedure (if (memv Ak4805@t '(core-macro macro global-macro)) 'syntax (if (memv Ak4805@t '($core-rtd)) 'record (if (eq? (car Ak4803@b) (cadr Ak4803@b)) 'syntax 'unknown))))) (cadr Ak4803@b))))) (set! Ak30fc@environment? (lambda (Ak4807@x) (or (Ak30cc@env? Ak4807@x) (Ak30e6@interaction-env? Ak4807@x)))) (set! Ak30fe@environment-symbols (lambda (Ak4809@x) (if (Ak30cc@env? Ak4809@x) (vector->list (Ak30ce@env-names Ak4809@x)) (if (Ak30e6@interaction-env? Ak4809@x) (map values (Ak2de1@rib-sym* (Ak30e8@interaction-env-rib Ak4809@x))) (assertion-violation 'environment-symbols '"not an environment" Ak4809@x))))) (set! Ak3100@environment (lambda Ak480b@imp* ((lambda (Ak480d@itc) ((lambda (Ak4813@Ak4810 Ak4814@Ak4812) ((lambda (Ak4817@swap) (dynamic-wind Ak4817@swap (lambda () (call-with-values (lambda () (Ak30aa@parse-import-spec* Ak480b@imp*)) (lambda (Ak481d@Ak481a Ak481e@Ak481c) ((lambda (Ak4821@subst-labels Ak4822@subst-names) (make-simple-struct 'env '4 (list Ak4822@subst-names Ak4821@subst-labels Ak480d@itc))) Ak481e@Ak481c Ak481d@Ak481a)))) Ak4817@swap)) (lambda () ((lambda (Ak4825@t) (begin (Ak4813@Ak4810 Ak4814@Ak4812) (set! Ak4814@Ak4812 Ak4825@t))) (Ak4813@Ak4810))))) Ak30b4@imp-collector Ak480d@itc)) (Ak30ae@make-collector)))) (set! Ak3102@null-environment (lambda (Ak4827@n) (begin (if (not (eqv? Ak4827@n '5)) (assertion-violation 'null-environment '"not 5" Ak4827@n) (void)) (Ak3100@environment '(psyntax null-environment-5))))) (set! Ak3104@scheme-report-environment (lambda (Ak4829@n) (begin (if (not (eqv? Ak4829@n '5)) (assertion-violation 'scheme-report-environment '"not 5" Ak4829@n) (void)) (Ak3100@environment '(psyntax scheme-report-environment-5))))) (set! Ak3106@expand (lambda (Ak482b@x Ak482c@env) (if (Ak30cc@env? Ak482c@env) ((lambda (Ak482f@rib) ((lambda (Ak4831@x Ak4832@itc Ak4833@rtc Ak4834@vtc) ((lambda (Ak4839@x) (begin (Ak2dff@seal-rib! Ak482f@rib) (values Ak4839@x (Ak4833@rtc)))) ((lambda (Ak484b@Ak483c Ak484c@Ak483e Ak484d@Ak4840 Ak484e@Ak4842 Ak484f@Ak4844 Ak4850@Ak4846 Ak4851@Ak4848 Ak4852@Ak484a) ((lambda (Ak485b@swap) (dynamic-wind Ak485b@swap (lambda () (Ak306a@chi-expr Ak4831@x '() '())) Ak485b@swap)) (lambda () (begin ((lambda (Ak485d@t) (begin (Ak484b@Ak483c Ak484f@Ak4844) (set! Ak484f@Ak4844 Ak485d@t))) (Ak484b@Ak483c)) ((lambda (Ak485f@t) (begin (Ak484c@Ak483e Ak4850@Ak4846) (set! Ak4850@Ak4846 Ak485f@t))) (Ak484c@Ak483e)) ((lambda (Ak4861@t) (begin (Ak484d@Ak4840 Ak4851@Ak4848) (set! Ak4851@Ak4848 Ak4861@t))) (Ak484d@Ak4840)) ((lambda (Ak4863@t) (begin (Ak484e@Ak4842 Ak4852@Ak484a) (set! Ak4852@Ak484a Ak4863@t))) (Ak484e@Ak4842)))))) Ak3136@top-level-context Ak30b0@inv-collector Ak30b2@vis-collector Ak30b4@imp-collector '#f Ak4833@rtc Ak4834@vtc Ak4832@itc))) (make-simple-struct 'stx '5 (list Ak482b@x Ak2dc7@top-mark* (list Ak482f@rib) '())) (Ak30d6@env-itc Ak482c@env) (Ak30ae@make-collector) (Ak30ae@make-collector))) (Ak30ac@make-top-rib (Ak30ce@env-names Ak482c@env) (Ak30d2@env-labels Ak482c@env))) (if (Ak30e6@interaction-env? Ak482c@env) ((lambda (Ak4865@rib Ak4866@r Ak4867@rtc) ((lambda (Ak486b@x) (call-with-values (lambda () ((lambda (Ak4881@Ak4872 Ak4882@Ak4874 Ak4883@Ak4876 Ak4884@Ak4878 Ak4885@Ak487a Ak4886@Ak487c Ak4887@Ak487e Ak4888@Ak4880) ((lambda (Ak4891@swap) (dynamic-wind Ak4891@swap (lambda () (Ak30b8@chi-interaction-expr Ak486b@x Ak4865@rib Ak4866@r)) Ak4891@swap)) (lambda () (begin ((lambda (Ak4893@t) (begin (Ak4881@Ak4872 Ak4885@Ak487a) (set! Ak4885@Ak487a Ak4893@t))) (Ak4881@Ak4872)) ((lambda (Ak4895@t) (begin (Ak4882@Ak4874 Ak4886@Ak487c) (set! Ak4886@Ak487c Ak4895@t))) (Ak4882@Ak4874)) ((lambda (Ak4897@t) (begin (Ak4883@Ak4876 Ak4887@Ak487e) (set! Ak4887@Ak487e Ak4897@t))) (Ak4883@Ak4876)) ((lambda (Ak4899@t) (begin (Ak4884@Ak4878 Ak4888@Ak4880) (set! Ak4888@Ak4880 Ak4899@t))) (Ak4884@Ak4878)))))) Ak3136@top-level-context Ak30b0@inv-collector Ak30b2@vis-collector Ak30b4@imp-collector Ak482c@env Ak4867@rtc (Ak30ae@make-collector) (Ak30ae@make-collector))) (lambda (Ak489b@Ak486e Ak489c@Ak4870) ((lambda (Ak489f@r^ Ak48a0@e) (begin (Ak30ee@set-interaction-env-r! Ak482c@env Ak489f@r^) (values Ak48a0@e (Ak4867@rtc)))) Ak489c@Ak4870 Ak489b@Ak486e)))) (make-simple-struct 'stx '5 (list Ak482b@x Ak2dc7@top-mark* (list Ak4865@rib) '())))) (Ak30e8@interaction-env-rib Ak482c@env) (Ak30ec@interaction-env-r Ak482c@env) (Ak30ae@make-collector)) (assertion-violation 'expand '"not an environment" Ak482c@env))))) (set! Ak3108@eval (lambda (Ak48a3@x Ak48a4@env) (begin (if (not (Ak30fc@environment? Ak48a4@env)) (error 'eval '"not an environment" Ak48a4@env) (void)) (call-with-values (lambda () (Ak3106@expand Ak48a3@x Ak48a4@env)) (lambda (Ak48ab@Ak48a8 Ak48ac@Ak48aa) ((lambda (Ak48af@invoke-req* Ak48b0@x) (begin (for-each Ak2c6e@Ak2abc@invoke-library Ak48af@invoke-req*) (eval-core (Ak29f8@Ak29b0@expanded->core Ak48b0@x)))) Ak48ac@Ak48aa Ak48ab@Ak48a8)))))) (set! Ak310a@library-expander (lambda Ak4921 ((lambda (Ak4922) (if (= Ak4922 '3) (apply (lambda (Ak48b3@x Ak48b4@filename Ak48b5@verify-name) ((lambda (Ak48ba@build-visit-code Ak48bc@visit!) (begin (set! Ak48ba@build-visit-code (lambda (Ak490f@macro*) (if (null? Ak490f@macro*) (Ak2dab@Ak2d1b@build-void) (Ak2daa@Ak2d19@build-sequence '#f (map (lambda (Ak4911@x) ((lambda (Ak4913@loc Ak4914@src) (list 'set! Ak4913@loc Ak4914@src)) (car Ak4911@x) (cddr Ak4911@x))) Ak490f@macro*))))) (set! Ak48bc@visit! (lambda (Ak4907@macro*) (for-each (lambda (Ak4909@x) ((lambda (Ak490b@loc Ak490c@proc) (set-symbol-value! Ak490b@loc Ak490c@proc)) (car Ak4909@x) (cadr Ak4909@x))) Ak4907@macro*))) (call-with-values (lambda () (Ak30bc@core-library-expander Ak48b3@x Ak48b5@verify-name)) (lambda (Ak48cf@Ak48be Ak48d0@Ak48c0 Ak48d1@Ak48c2 Ak48d2@Ak48c4 Ak48d3@Ak48c6 Ak48d4@Ak48c8 Ak48d5@Ak48ca Ak48d6@Ak48cc Ak48d7@Ak48ce) ((lambda (Ak48e1@export-env Ak48e2@export-subst Ak48e3@macro* Ak48e4@invoke-code Ak48e5@vis* Ak48e6@inv* Ak48e7@imp* Ak48e8@ver Ak48e9@name) ((lambda (Ak48f3@id Ak48f4@name Ak48f5@ver Ak48f6@imp* Ak48f7@vis* Ak48f8@inv* Ak48f9@visit-proc Ak48fa@invoke-proc Ak48fb@visit-code Ak48fc@invoke-code) (begin (Ak2c6c@Ak2ab8@install-library Ak48f3@id Ak48f4@name Ak48f5@ver Ak48f6@imp* Ak48f7@vis* Ak48f8@inv* Ak48e2@export-subst Ak48e1@export-env Ak48f9@visit-proc Ak48fa@invoke-proc Ak48fb@visit-code Ak48fc@invoke-code '#t Ak48b4@filename) (values Ak48f3@id Ak48f4@name Ak48f5@ver Ak48f6@imp* Ak48f7@vis* Ak48f8@inv* Ak48fc@invoke-code Ak48fb@visit-code Ak48e2@export-subst Ak48e1@export-env))) (gensym) Ak48e9@name Ak48e8@ver (map Ak2c72@Ak2ac4@library-spec Ak48e7@imp*) (map Ak2c72@Ak2ac4@library-spec Ak48e5@vis*) (map Ak2c72@Ak2ac4@library-spec Ak48e6@inv*) (lambda () (Ak48bc@visit! Ak48e3@macro*)) (lambda () (eval-core (Ak29f8@Ak29b0@expanded->core Ak48e4@invoke-code))) (Ak48ba@build-visit-code Ak48e3@macro*) Ak48e4@invoke-code)) Ak48d7@Ak48ce Ak48d6@Ak48cc Ak48d5@Ak48ca Ak48d4@Ak48c8 Ak48d3@Ak48c6 Ak48d2@Ak48c4 Ak48d1@Ak48c2 Ak48d0@Ak48c0 Ak48cf@Ak48be))))) '#f '#f)) Ak4921) (if (= Ak4922 '2) (apply (lambda (Ak4917@x Ak4918@filename) (Ak310a@library-expander Ak4917@x Ak4918@filename (lambda (Ak491b@x) (values)))) Ak4921) (if (= Ak4922 '1) (apply (lambda (Ak491d@x) (Ak310a@library-expander Ak491d@x '#f (lambda (Ak491f@x) (values)))) Ak4921) (error 'apply '"invalid arg count"))))) (length Ak4921)))) (set! Ak310c@boot-library-expand (lambda (Ak4923@x) (call-with-values (lambda () (Ak310a@library-expander Ak4923@x)) (lambda (Ak4939@Ak4926 Ak493a@Ak4928 Ak493b@Ak492a Ak493c@Ak492c Ak493d@Ak492e Ak493e@Ak4930 Ak493f@Ak4932 Ak4940@Ak4934 Ak4941@Ak4936 Ak4942@Ak4938) ((lambda (Ak494d@export-env Ak494e@export-subst Ak494f@visit-code Ak4950@invoke-code Ak4951@inv* Ak4952@vis* Ak4953@imp* Ak4954@ver Ak4955@name Ak4956@id) (values Ak4955@name Ak4950@invoke-code Ak494e@export-subst Ak494d@export-env)) Ak4942@Ak4938 Ak4941@Ak4936 Ak4940@Ak4934 Ak493f@Ak4932 Ak493e@Ak4930 Ak493d@Ak492e Ak493c@Ak492c Ak493b@Ak492a Ak493a@Ak4928 Ak4939@Ak4926))))) (set! Ak310e@rev-map-append (lambda (Ak4961@f Ak4962@ls Ak4963@ac) (if (null? Ak4962@ls) Ak4963@ac (Ak310e@rev-map-append Ak4961@f (cdr Ak4962@ls) (cons (Ak4961@f (car Ak4962@ls)) Ak4963@ac))))) (set! Ak3110@build-exports (lambda (Ak4967@lex*+loc* Ak4968@init*) (Ak2daa@Ak2d19@build-sequence '#f (cons (Ak2dab@Ak2d1b@build-void) (Ak310e@rev-map-append (lambda (Ak496b@x) (list 'set! (cdr Ak496b@x) (car Ak496b@x))) Ak4967@lex*+loc* Ak4968@init*))))) (set! Ak3112@make-export-subst (lambda (Ak496d@name* Ak496e@id*) (map (lambda (Ak4971@name Ak4972@id) ((lambda (Ak4975@label) (begin (if (not Ak4975@label) (Ak3128@syntax-violation '#f '"cannot export unbound identifier" Ak4972@id) (void)) (cons Ak4971@name Ak4975@label))) (Ak2e59@id->label Ak4972@id))) Ak496d@name* Ak496e@id*))) (set! Ak3114@make-export-env/macros (lambda (Ak4977@lex* Ak4978@loc* Ak4979@r) ((lambda (Ak497e@lookup) (begin (set! Ak497e@lookup (lambda (Ak499b@x) ((letrec ((Ak499d@f (lambda (Ak499f@x Ak49a0@lex* Ak49a1@loc*) (if (pair? Ak49a0@lex*) (if (eq? Ak499f@x (car Ak49a0@lex*)) (car Ak49a1@loc*) (Ak499d@f Ak499f@x (cdr Ak49a0@lex*) (cdr Ak49a1@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) Ak499d@f) Ak499b@x Ak4977@lex* Ak4978@loc*))) ((letrec ((Ak497f@f (lambda (Ak4981@r Ak4982@env Ak4983@global* Ak4984@macro*) (if (null? Ak4981@r) (values Ak4982@env Ak4983@global* Ak4984@macro*) ((lambda (Ak4989@x) ((lambda (Ak498b@label Ak498c@b) ((lambda (Ak498f@t) (if (memv Ak498f@t '(lexical)) ((lambda (Ak4991@v) ((lambda (Ak4993@loc Ak4994@type) (Ak497f@f (cdr Ak4981@r) (cons (cons* Ak498b@label Ak4994@type Ak4993@loc) Ak4982@env) (cons (cons (Ak2fd4@lexical-var Ak4991@v) Ak4993@loc) Ak4983@global*) Ak4984@macro*)) (Ak497e@lookup (Ak2fd4@lexical-var Ak4991@v)) (if (Ak2fd6@lexical-mutable? Ak4991@v) 'mutable 'global))) (Ak2e61@binding-value Ak498c@b)) (if (memv Ak498f@t '(local-macro)) ((lambda (Ak4997@loc) (Ak497f@f (cdr Ak4981@r) (cons (cons* Ak498b@label 'global-macro Ak4997@loc) Ak4982@env) Ak4983@global* (cons (cons Ak4997@loc (Ak2e61@binding-value Ak498c@b)) Ak4984@macro*))) (gensym)) (if (memv Ak498f@t '(local-macro!)) ((lambda (Ak4999@loc) (Ak497f@f (cdr Ak4981@r) (cons (cons* Ak498b@label 'global-macro! Ak4999@loc) Ak4982@env) Ak4983@global* (cons (cons Ak4999@loc (Ak2e61@binding-value Ak498c@b)) Ak4984@macro*))) (gensym)) (if (memv Ak498f@t '($rtd $module)) (Ak497f@f (cdr Ak4981@r) (cons Ak4989@x Ak4982@env) Ak4983@global* Ak4984@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (Ak2e5f@binding-type Ak498c@b) (Ak2e61@binding-value Ak498c@b))))))) (Ak2e5f@binding-type Ak498c@b))) (car Ak4989@x) (cdr Ak4989@x))) (car Ak4981@r)))))) Ak497f@f) Ak4979@r '() '() '()))) '#f))) (set! Ak3116@generate-temporaries (lambda (Ak49a5@ls) ((lambda (Ak49a7@t) ((lambda (Ak49a9@ls/false) (if Ak49a9@ls/false (apply (lambda (Ak49ab@ls) (map (lambda (Ak49ad@x) (make-simple-struct 'stx '5 (list ((lambda (Ak49af@x) (if (or (symbol? Ak49af@x) (string? Ak49af@x)) (gensym Ak49af@x) (gensym 't))) (Ak312e@syntax->datum Ak49ad@x)) Ak2dc7@top-mark* '() '()))) Ak49ab@ls)) Ak49a9@ls/false) ((lambda (Ak49b1@t) ((lambda (Ak49b3@ls/false) (if Ak49b3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) Ak49b3@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak49b1@t))) (Ak3048@syntax-dispatch Ak49b1@t '_))) Ak49a7@t))) (Ak3048@syntax-dispatch Ak49a7@t 'each-any))) Ak49a5@ls))) (set! Ak3118@free-identifier=? (lambda (Ak49b5@x Ak49b6@y) (if (Ak2e43@id? Ak49b5@x) (if (Ak2e43@id? Ak49b6@y) (Ak2e49@free-id=? Ak49b5@x Ak49b6@y) (assertion-violation 'free-identifier=? '"not an identifier" Ak49b6@y)) (assertion-violation 'free-identifier=? '"not an identifier" Ak49b5@x)))) (set! Ak311a@bound-identifier=? (lambda (Ak49b9@x Ak49ba@y) (if (Ak2e43@id? Ak49b9@x) (if (Ak2e43@id? Ak49ba@y) (Ak2e47@bound-id=? Ak49b9@x Ak49ba@y) (assertion-violation 'bound-identifier=? '"not an identifier" Ak49ba@y)) (assertion-violation 'bound-identifier=? '"not an identifier" Ak49b9@x)))) (set! Ak311c@make-source-condition (lambda (Ak49bd@x) ((lambda (Ak49c7@Ak49c2 Ak49c9@Ak49c4 Ak49cb@Ak49c3 Ak49ce@Ak49c1 Ak49d0@make-source-condition Ak49d2@Ak49bf Ak49d4@Ak49c0 Ak49d6@source-condition? Ak49d8@source-filename Ak49da@source-character) (begin (set! Ak49c7@Ak49c2 (make-record-type-descriptor '&source-information Ak4e17@Ak4b5e@&condition-rtd 'Ak49c5 '#f '#f '#((immutable file-name) (immutable character)))) (set! Ak49c9@Ak49c4 '#f) (set! Ak49cb@Ak49c3 (make-record-constructor-descriptor Ak49c7@Ak49c2 Ak4e18@Ak4b60@&condition-rcd Ak49c9@Ak49c4)) (set! Ak49ce@Ak49c1 (record-predicate Ak49c7@Ak49c2)) (set! Ak49d0@make-source-condition (record-constructor Ak49cb@Ak49c3)) (set! Ak49d2@Ak49bf (record-accessor Ak49c7@Ak49c2 '0)) (set! Ak49d4@Ak49c0 (record-accessor Ak49c7@Ak49c2 '1)) (set! Ak49d6@source-condition? (condition-predicate Ak49c7@Ak49c2)) (set! Ak49d8@source-filename (condition-accessor Ak49c7@Ak49c2 Ak49d2@Ak49bf)) (set! Ak49da@source-character (condition-accessor Ak49c7@Ak49c2 Ak49d4@Ak49c0)) (if (pair? Ak49bd@x) (Ak49d0@make-source-condition (car Ak49bd@x) (cdr Ak49bd@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! Ak311e@extract-position-condition (lambda (Ak49db@x) (Ak311c@make-source-condition (Ak3120@expression-position Ak49db@x)))) (set! Ak3120@expression-position (lambda (Ak49dd@x) (and (Ak2e0f@stx? Ak49dd@x) ((lambda (Ak49df@x) (and (Ak2997@Ak286b@annotation? Ak49df@x) (Ak2998@Ak286d@annotation-source Ak49df@x))) (Ak2e11@stx-expr Ak49dd@x))))) (set! Ak3122@assertion-error (lambda (Ak49e1@expr Ak49e2@pos) (raise (condition (Ak4e47@Ak4c22@make-assertion-violation) (Ak4e59@Ak4c54@make-who-condition 'assert) (Ak4e1d@Ak4bb5@make-message-condition '"assertion failed") (Ak4e4f@Ak4c39@make-irritants-condition (list Ak49e1@expr)) (Ak311c@make-source-condition Ak49e2@pos))))) (set! Ak3124@syntax-error (lambda (Ak49e5@x . Ak49e7@args) (begin (if (not (for-all string? Ak49e7@args)) (assertion-violation 'syntax-error '"invalid argument" Ak49e7@args) (void)) (raise (condition (Ak4e1d@Ak4bb5@make-message-condition (if (null? Ak49e7@args) '"invalid syntax" (apply string-append Ak49e7@args))) (Ak4e7b@Ak4cb0@make-syntax-violation (Ak312e@syntax->datum Ak49e5@x) '#f) (Ak311e@extract-position-condition Ak49e5@x)))))) (set! Ak3126@syntax-violation* (lambda (Ak49e9@who Ak49ea@msg Ak49eb@form Ak49ec@condition-object) (begin (if (not (string? Ak49ea@msg)) (assertion-violation 'syntax-violation '"message is not a string" Ak49ea@msg) (void)) ((lambda (Ak49f1@who) (raise (condition (if Ak49f1@who (Ak4e59@Ak4c54@make-who-condition Ak49f1@who) (condition)) (Ak4e1d@Ak4bb5@make-message-condition Ak49ea@msg) Ak49ec@condition-object (Ak311e@extract-position-condition Ak49eb@form)))) (if (or (string? Ak49e9@who) (symbol? Ak49e9@who)) Ak49e9@who (if (not Ak49e9@who) ((lambda (Ak49f3@t) ((lambda (Ak49f5@ls/false) (if (and Ak49f5@ls/false (apply (lambda (Ak49f7@id) (Ak2e43@id? Ak49f7@id)) Ak49f5@ls/false)) (apply (lambda (Ak49f9@id) (Ak312e@syntax->datum Ak49f9@id)) Ak49f5@ls/false) ((lambda (Ak49fb@t) ((lambda (Ak49fd@ls/false) (if (and Ak49fd@ls/false (apply (lambda (Ak49ff@id Ak4a00@rest) (Ak2e43@id? Ak49ff@id)) Ak49fd@ls/false)) (apply (lambda (Ak4a03@id Ak4a04@rest) (Ak312e@syntax->datum Ak4a03@id)) Ak49fd@ls/false) ((lambda (Ak4a07@t) ((lambda (Ak4a09@ls/false) (if Ak4a09@ls/false (apply (lambda () '#f) Ak4a09@ls/false) (Ak3128@syntax-violation '#f '"invalid syntax" Ak4a07@t))) (Ak3048@syntax-dispatch Ak4a07@t '_))) Ak49fb@t))) (Ak3048@syntax-dispatch Ak49fb@t '(any . any)))) Ak49f3@t))) (Ak3048@syntax-dispatch Ak49f3@t 'any))) Ak49eb@form) (assertion-violation 'syntax-violation '"invalid who argument" Ak49e9@who))))))) (set! Ak3128@syntax-violation (lambda Ak4a19 ((lambda (Ak4a1a) (if (= Ak4a1a '3) (apply (lambda (Ak4a0b@who Ak4a0c@msg Ak4a0d@form) (Ak3128@syntax-violation Ak4a0b@who Ak4a0c@msg Ak4a0d@form '#f)) Ak4a19) (if (= Ak4a1a '4) (apply (lambda (Ak4a11@who Ak4a12@msg Ak4a13@form Ak4a14@subform) (Ak3126@syntax-violation* Ak4a11@who Ak4a12@msg Ak4a13@form (Ak4e7b@Ak4cb0@make-syntax-violation (Ak312e@syntax->datum Ak4a13@form) (Ak312e@syntax->datum Ak4a14@subform)))) Ak4a19) (error 'apply '"invalid arg count")))) (length Ak4a19)))) (set! Ak312a@identifier? (lambda (Ak4a1b@x) (Ak2e43@id? Ak4a1b@x))) (set! Ak312c@datum->syntax (lambda (Ak4a1d@id Ak4a1e@datum) (if (Ak2e43@id? Ak4a1d@id) (Ak2e23@datum->stx Ak4a1d@id Ak4a1e@datum) (assertion-violation 'datum->syntax '"not an identifier" Ak4a1d@id)))) (set! Ak312e@syntax->datum (lambda (Ak4a21@x) (Ak2e57@stx->datum Ak4a21@x))) (set! Ak3130@compile-r6rs-top-level (lambda (Ak4a23@x*) (call-with-values (lambda () (Ak30c0@top-level-expander Ak4a23@x*)) (lambda (Ak4a29@Ak4a26 Ak4a2a@Ak4a28) ((lambda (Ak4a2d@invoke-code Ak4a2e@lib*) (lambda () (begin (for-each Ak2c6e@Ak2abc@invoke-library Ak4a2e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (Ak29f8@Ak29b0@expanded->core Ak4a2d@invoke-code)) (void)) (eval-core (Ak29f8@Ak29b0@expanded->core Ak4a2d@invoke-code))))) Ak4a2a@Ak4a28 Ak4a29@Ak4a26))))) (set! Ak3132@pre-compile-r6rs-top-level (lambda (Ak4a31@x*) (call-with-values (lambda () (Ak30c0@top-level-expander Ak4a31@x*)) (lambda (Ak4a37@Ak4a34 Ak4a38@Ak4a36) ((lambda (Ak4a3b@invoke-code Ak4a3c@lib*) (begin (for-each Ak2c6e@Ak2abc@invoke-library Ak4a3c@lib*) (Ak29a0@Ak287d@compile-core (Ak29f8@Ak29b0@expanded->core Ak4a3b@invoke-code)))) Ak4a38@Ak4a36 Ak4a37@Ak4a34))))) (set! Ak3134@interaction-environment ((lambda (Ak4a3f@the-env) (lambda () (or Ak4a3f@the-env ((lambda (Ak4a41@lib Ak4a42@rib) (begin ((lambda (Ak4a45@subst) (begin (Ak2de3@set-rib-sym*! Ak4a42@rib (map car Ak4a45@subst)) (Ak2de7@set-rib-mark**! Ak4a42@rib (map (lambda (Ak4a47@x) Ak2dc7@top-mark*) Ak4a45@subst)) (Ak2deb@set-rib-label*! Ak4a42@rib (map cdr Ak4a45@subst)))) (Ak2c49@Ak2a72@library-subst Ak4a41@lib)) ((lambda (Ak4a49@env) (begin (set! Ak4a3f@the-env Ak4a49@env) Ak4a49@env)) (make-simple-struct 'interaction-env '4 (list Ak4a42@rib '() '()))))) (Ak2c67@Ak2aae@find-library-by-name '(mosh interaction)) (Ak2df7@make-empty-rib))))) '#f)) (set! Ak3136@top-level-context (Ak29a2@Ak2881@make-parameter '#f)) (begin (set! Ak4b44@Ak3136@top-level-context Ak3136@top-level-context) (set! Ak4b43@Ak3134@interaction-environment Ak3134@interaction-environment) (set! Ak4b42@Ak3132@pre-compile-r6rs-top-level Ak3132@pre-compile-r6rs-top-level) (set! Ak4b41@Ak3130@compile-r6rs-top-level Ak3130@compile-r6rs-top-level) (set! Ak4b40@Ak312e@syntax->datum Ak312e@syntax->datum) (set! Ak4b3f@Ak312c@datum->syntax Ak312c@datum->syntax) (set! Ak4b3e@Ak312a@identifier? Ak312a@identifier?) (set! Ak4b3d@Ak3128@syntax-violation Ak3128@syntax-violation) (set! Ak4b3c@Ak3126@syntax-violation* Ak3126@syntax-violation*) (set! Ak4b3b@Ak3124@syntax-error Ak3124@syntax-error) (set! Ak4b3a@Ak3122@assertion-error Ak3122@assertion-error) (set! Ak4b39@Ak3120@expression-position Ak3120@expression-position) (set! Ak4b38@Ak311e@extract-position-condition Ak311e@extract-position-condition) (set! Ak4b37@Ak311c@make-source-condition Ak311c@make-source-condition) (set! Ak4b36@Ak311a@bound-identifier=? Ak311a@bound-identifier=?) (set! Ak4b35@Ak3118@free-identifier=? Ak3118@free-identifier=?) (set! Ak4b34@Ak3116@generate-temporaries Ak3116@generate-temporaries) (set! Ak4b33@Ak3114@make-export-env/macros Ak3114@make-export-env/macros) (set! Ak4b32@Ak3112@make-export-subst Ak3112@make-export-subst) (set! Ak4b31@Ak3110@build-exports Ak3110@build-exports) (set! Ak4b30@Ak310e@rev-map-append Ak310e@rev-map-append) (set! Ak4b2f@Ak310c@boot-library-expand Ak310c@boot-library-expand) (set! Ak4b2e@Ak310a@library-expander Ak310a@library-expander) (set! Ak4b2d@Ak3108@eval Ak3108@eval) (set! Ak4b2c@Ak3106@expand Ak3106@expand) (set! Ak4b2b@Ak3104@scheme-report-environment Ak3104@scheme-report-environment) (set! Ak4b2a@Ak3102@null-environment Ak3102@null-environment) (set! Ak4b29@Ak3100@environment Ak3100@environment) (set! Ak4b28@Ak30fe@environment-symbols Ak30fe@environment-symbols) (set! Ak4b27@Ak30fc@environment? Ak30fc@environment?) (set! Ak4b26@Ak30fa@parse-binding Ak30fa@parse-binding) (set! Ak4b25@Ak30f8@environment-bindings Ak30f8@environment-bindings) (set! Ak4b24@Ak30f6@interaction-environment-symbols Ak30f6@interaction-environment-symbols) (set! Ak4b23@Ak30f4@dummy Ak30f4@dummy) (set! Ak4b22@Ak30f2@set-interaction-env-locs! Ak30f2@set-interaction-env-locs!) (set! Ak4b21@Ak30f0@interaction-env-locs Ak30f0@interaction-env-locs) (set! Ak4b20@Ak30ee@set-interaction-env-r! Ak30ee@set-interaction-env-r!) (set! Ak4b1f@Ak30ec@interaction-env-r Ak30ec@interaction-env-r) (set! Ak4b1e@Ak30ea@set-interaction-env-rib! Ak30ea@set-interaction-env-rib!) (set! Ak4b1d@Ak30e8@interaction-env-rib Ak30e8@interaction-env-rib) (set! Ak4b1c@Ak30e6@interaction-env? Ak30e6@interaction-env?) (set! Ak4b1b@Ak30dc@rp Ak30dc@rp) (set! Ak4b1a@Ak30da@dummy Ak30da@dummy) (set! Ak4b19@Ak30d8@set-env-itc! Ak30d8@set-env-itc!) (set! Ak4b18@Ak30d6@env-itc Ak30d6@env-itc) (set! Ak4b17@Ak30d4@set-env-labels! Ak30d4@set-env-labels!) (set! Ak4b16@Ak30d2@env-labels Ak30d2@env-labels) (set! Ak4b15@Ak30d0@set-env-names! Ak30d0@set-env-names!) (set! Ak4b14@Ak30ce@env-names Ak30ce@env-names) (set! Ak4b13@Ak30cc@env? Ak30cc@env?) (set! Ak4b12@Ak30c2@rp Ak30c2@rp) (set! Ak4b11@Ak30c0@top-level-expander Ak30c0@top-level-expander) (set! Ak4b10@Ak30be@parse-top-level-program Ak30be@parse-top-level-program) (set! Ak4b0f@Ak30bc@core-library-expander Ak30bc@core-library-expander) (set! Ak4b0e@Ak30ba@library-body-expander Ak30ba@library-body-expander) (set! Ak4b0d@Ak30b8@chi-interaction-expr Ak30b8@chi-interaction-expr) (set! Ak4b0c@Ak30b6@chi-library-internal Ak30b6@chi-library-internal) (set! Ak4b0b@Ak30b4@imp-collector Ak30b4@imp-collector) (set! Ak4b0a@Ak30b2@vis-collector Ak30b2@vis-collector) (set! Ak4b09@Ak30b0@inv-collector Ak30b0@inv-collector) (set! Ak4b08@Ak30ae@make-collector Ak30ae@make-collector) (set! Ak4b07@Ak30ac@make-top-rib Ak30ac@make-top-rib) (set! Ak4b06@Ak30aa@parse-import-spec* Ak30aa@parse-import-spec*) (set! Ak4b05@Ak30a8@parse-library Ak30a8@parse-library) (set! Ak4b04@Ak30a6@parse-library-name Ak30a6@parse-library-name) (set! Ak4b03@Ak30a4@parse-exports Ak30a4@parse-exports) (set! Ak4b02@Ak30a2@expand-transformer Ak30a2@expand-transformer) (set! Ak4b01@Ak30a0@chi-body* Ak30a0@chi-body*) (set! Ak4b00@Ak309e@chi-internal-module Ak309e@chi-internal-module) (set! Ak4aff@Ak309c@module-interface-exp-id* Ak309c@module-interface-exp-id*) (set! Ak4afe@Ak309a@dummy Ak309a@dummy) (set! Ak4afd@Ak3098@set-module-interface-exp-lab-vec! Ak3098@set-module-interface-exp-lab-vec!) (set! Ak4afc@Ak3096@module-interface-exp-lab-vec Ak3096@module-interface-exp-lab-vec) (set! Ak4afb@Ak3094@set-module-interface-exp-id-vec! Ak3094@set-module-interface-exp-id-vec!) (set! Ak4afa@Ak3092@module-interface-exp-id-vec Ak3092@module-interface-exp-id-vec) (set! Ak4af9@Ak3090@set-module-interface-first-mark! Ak3090@set-module-interface-first-mark!) (set! Ak4af8@Ak308e@module-interface-first-mark Ak308e@module-interface-first-mark) (set! Ak4af7@Ak308c@module-interface? Ak308c@module-interface?) (set! Ak4af6@Ak3082@parse-module Ak3082@parse-module) (set! Ak4af5@Ak3080@chi-internal Ak3080@chi-internal) (set! Ak4af4@Ak307e@find-dups Ak307e@find-dups) (set! Ak4af3@Ak307c@find-bound=? Ak307c@find-bound=?) (set! Ak4af2@Ak307a@chi-rhs* Ak307a@chi-rhs*) (set! Ak4af1@Ak3078@expand-interaction-rhs*/init* Ak3078@expand-interaction-rhs*/init*) (set! Ak4af0@Ak3076@chi-rhs Ak3076@chi-rhs) (set! Ak4aef@Ak3074@chi-defun Ak3074@chi-defun) (set! Ak4aee@Ak3072@chi-lambda-clause* Ak3072@chi-lambda-clause*) (set! Ak4aed@Ak3070@chi-lambda-clause Ak3070@chi-lambda-clause) (set! Ak4aec@Ak306e@verify-formals Ak306e@verify-formals) (set! Ak4aeb@Ak306c@chi-set! Ak306c@chi-set!) (set! Ak4aea@Ak306a@chi-expr Ak306a@chi-expr) (set! Ak4ae9@Ak3068@chi-application Ak3068@chi-application) (set! Ak4ae8@Ak3066@chi-expr* Ak3066@chi-expr*) (set! Ak4ae7@Ak3064@chi-global-macro Ak3064@chi-global-macro) (set! Ak4ae6@Ak3062@chi-local-macro Ak3062@chi-local-macro) (set! Ak4ae5@Ak3060@chi-macro Ak3060@chi-macro) (set! Ak4ae4@Ak305e@do-macro-call Ak305e@do-macro-call) (set! Ak4ae3@Ak305c@local-macro-transformer Ak305c@local-macro-transformer) (set! Ak4ae2@Ak305a@macro-transformer Ak305a@macro-transformer) (set! Ak4ae1@Ak3058@symbol-macro Ak3058@symbol-macro) (set! Ak4ae0@Ak3056@core-macro-transformer Ak3056@core-macro-transformer) (set! Ak4adf@Ak3054@syntax-transformer Ak3054@syntax-transformer) (set! Ak4ade@Ak3052@ellipsis-map Ak3052@ellipsis-map) (set! Ak4add@Ak3050@syntax-case-transformer Ak3050@syntax-case-transformer) (set! Ak4adc@Ak304e@verify-literals Ak304e@verify-literals) (set! Ak4adb@Ak304c@underscore? Ak304c@underscore?) (set! Ak4ada@Ak304a@ellipsis? Ak304a@ellipsis?) (set! Ak4ad9@Ak3048@syntax-dispatch Ak3048@syntax-dispatch) (set! Ak4ad8@Ak3046@convert-pattern Ak3046@convert-pattern) (set! Ak4ad7@Ak3044@foreign-call-transformer Ak3044@foreign-call-transformer) (set! Ak4ad6@Ak3042@parameterize-macro Ak3042@parameterize-macro) (set! Ak4ad5@Ak3040@incorrect-usage-macro Ak3040@incorrect-usage-macro) (set! Ak4ad4@Ak303e@define-condition-type-macro Ak303e@define-condition-type-macro) (set! Ak4ad3@Ak303c@define-record-type-macro Ak303c@define-record-type-macro) (set! Ak4ad2@Ak303a@define-struct-macro Ak303a@define-struct-macro) (set! Ak4ad1@Ak3038@quasisyntax-macro Ak3038@quasisyntax-macro) (set! Ak4ad0@Ak3036@quasiquote-macro Ak3036@quasiquote-macro) (set! Ak4acf@Ak3034@syntax-rules-macro Ak3034@syntax-rules-macro) (set! Ak4ace@Ak3032@include-into-macro Ak3032@include-into-macro) (set! Ak4acd@Ak3030@include-macro Ak3030@include-macro) (set! Ak4acc@Ak302e@do-include Ak302e@do-include) (set! Ak4acb@Ak302c@cond-macro Ak302c@cond-macro) (set! Ak4aca@Ak302a@and-macro Ak302a@and-macro) (set! Ak4ac9@Ak3028@or-macro Ak3028@or-macro) (set! Ak4ac8@Ak3026@let*-macro Ak3026@let*-macro) (set! Ak4ac7@Ak3024@do-macro Ak3024@do-macro) (set! Ak4ac6@Ak3022@identifier-syntax-macro Ak3022@identifier-syntax-macro) (set! Ak4ac5@Ak3020@endianness-macro Ak3020@endianness-macro) (set! Ak4ac4@Ak301e@assert-macro Ak301e@assert-macro) (set! Ak4ac3@Ak301c@delay-macro Ak301c@delay-macro) (set! Ak4ac2@Ak301a@time-macro Ak301a@time-macro) (set! Ak4ac1@Ak3018@define-enumeration-macro Ak3018@define-enumeration-macro) (set! Ak4ac0@Ak3016@guard-macro Ak3016@guard-macro) (set! Ak4abf@Ak3014@trace-letrec-syntax-macro Ak3014@trace-letrec-syntax-macro) (set! Ak4abe@Ak3012@trace-let-syntax-macro Ak3012@trace-let-syntax-macro) (set! Ak4abd@Ak3010@trace-let/rec-syntax Ak3010@trace-let/rec-syntax) (set! Ak4abc@Ak300e@trace-define-syntax-macro Ak300e@trace-define-syntax-macro) (set! Ak4abb@Ak300c@trace-define-macro Ak300c@trace-define-macro) (set! Ak4aba@Ak300a@trace-lambda-macro Ak300a@trace-lambda-macro) (set! Ak4ab9@Ak3008@let*-values-macro Ak3008@let*-values-macro) (set! Ak4ab8@Ak3006@let-values-macro Ak3006@let-values-macro) (set! Ak4ab7@Ak3004@let-macro Ak3004@let-macro) (set! Ak4ab6@Ak3002@invalid-fmls-error Ak3002@invalid-fmls-error) (set! Ak4ab5@Ak3000@with-syntax-macro Ak3000@with-syntax-macro) (set! Ak4ab4@Ak2ffe@bless Ak2ffe@bless) (set! Ak4ab3@Ak2ffc@lambda-transformer Ak2ffc@lambda-transformer) (set! Ak4ab2@Ak2ffa@case-lambda-transformer Ak2ffa@case-lambda-transformer) (set! Ak4ab1@Ak2ff8@quote-transformer Ak2ff8@quote-transformer) (set! Ak4ab0@Ak2ff6@case-macro Ak2ff6@case-macro) (set! Ak4aaf@Ak2ff4@or-transformer Ak2ff4@or-transformer) (set! Ak4aae@Ak2ff2@and-transformer Ak2ff2@and-transformer) (set! Ak4aad@Ak2ff0@if-transformer Ak2ff0@if-transformer) (set! Ak4aac@Ak2fee@unless-macro Ak2fee@unless-macro) (set! Ak4aab@Ak2fec@when-macro Ak2fec@when-macro) (set! Ak4aaa@Ak2fea@record-constructor-descriptor-transformer Ak2fea@record-constructor-descriptor-transformer) (set! Ak4aa9@Ak2fe8@record-type-descriptor-transformer Ak2fe8@record-type-descriptor-transformer) (set! Ak4aa8@Ak2fe6@type-descriptor-transformer Ak2fe6@type-descriptor-transformer) (set! Ak4aa7@Ak2fe4@fluid-let-syntax-transformer Ak2fe4@fluid-let-syntax-transformer) (set! Ak4aa6@Ak2fe2@letrec*-transformer Ak2fe2@letrec*-transformer) (set! Ak4aa5@Ak2fe0@letrec-transformer Ak2fe0@letrec-transformer) (set! Ak4aa4@Ak2fde@letrec-helper Ak2fde@letrec-helper) (set! Ak4aa3@Ak2fdc@add-lexicals Ak2fdc@add-lexicals) (set! Ak4aa2@Ak2fda@add-lexical Ak2fda@add-lexical) (set! Ak4aa1@Ak2fd8@set-lexical-mutable! Ak2fd8@set-lexical-mutable!) (set! Ak4aa0@Ak2fd6@lexical-mutable? Ak2fd6@lexical-mutable?) (set! Ak4a9f@Ak2fd4@lexical-var Ak2fd4@lexical-var) (set! Ak4a9e@Ak2fd2@scheme-stx Ak2fd2@scheme-stx) (set! Ak4a9d@Ak2fd0@scheme-stx-hashtable Ak2fd0@scheme-stx-hashtable) (set! Ak4a9c@Ak2fce@parse-define-syntax Ak2fce@parse-define-syntax) (set! Ak4a9b@Ak2fcc@parse-define Ak2fcc@parse-define) (set! Ak4a9a@Ak2e7b@make-eval-transformer Ak2e7b@make-eval-transformer) (set! Ak4a99@Ak2e79@variable-transformer-procedure Ak2e79@variable-transformer-procedure) (set! Ak4a98@Ak2e77@variable-transformer? Ak2e77@variable-transformer?) (set! Ak4a97@Ak2e75@make-variable-transformer Ak2e75@make-variable-transformer) (set! Ak4a96@Ak2e73@sanitize-binding Ak2e73@sanitize-binding) (set! Ak4a95@Ak2e65@syntax-type Ak2e65@syntax-type) (set! Ak4a94@Ak2e63@raise-unbound-error Ak2e63@raise-unbound-error) (set! Ak4a93@Ak2e61@binding-value Ak2e61@binding-value) (set! Ak4a92@Ak2e5f@binding-type Ak2e5f@binding-type) (set! Ak4a91@Ak2e5d@make-binding Ak2e5d@make-binding) (set! Ak4a90@Ak2e5b@label->binding Ak2e5b@label->binding) (set! Ak4a8f@Ak2e59@id->label Ak2e59@id->label) (set! Ak4a8e@Ak2e57@stx->datum Ak2e57@stx->datum) (set! Ak4a8d@Ak2e55@strip Ak2e55@strip) (set! Ak4a8c@Ak2e53@strip-annotations Ak2e53@strip-annotations) (set! Ak4a8b@Ak2e51@self-evaluating? Ak2e51@self-evaluating?) (set! Ak4a8a@Ak2e4f@bound-id-member? Ak2e4f@bound-id-member?) (set! Ak4a89@Ak2e4d@distinct-bound-ids? Ak2e4d@distinct-bound-ids?) (set! Ak4a88@Ak2e4b@valid-bound-ids? Ak2e4b@valid-bound-ids?) (set! Ak4a87@Ak2e49@free-id=? Ak2e49@free-id=?) (set! Ak4a86@Ak2e47@bound-id=? Ak2e47@bound-id=?) (set! Ak4a85@Ak2e45@id->sym Ak2e45@id->sym) (set! Ak4a84@Ak2e43@id? Ak2e43@id?) (set! Ak4a83@Ak2e41@syntax->list Ak2e41@syntax->list) (set! Ak4a82@Ak2e3f@syntax-cdr Ak2e3f@syntax-cdr) (set! Ak4a81@Ak2e3d@syntax-car Ak2e3d@syntax-car) (set! Ak4a80@Ak2e3b@syntax-list? Ak2e3b@syntax-list?) (set! Ak4a7f@Ak2e39@syntax-null? Ak2e39@syntax-null?) (set! Ak4a7e@Ak2e37@syntax-vector? Ak2e37@syntax-vector?) (set! Ak4a7d@Ak2e35@syntax-pair? Ak2e35@syntax-pair?) (set! Ak4a7c@Ak2e33@syntax-vector->list Ak2e33@syntax-vector->list) (set! Ak4a7b@Ak2e31@syntax-kind? Ak2e31@syntax-kind?) (set! Ak4a7a@Ak2e2f@add-subst Ak2e2f@add-subst) (set! Ak4a79@Ak2e2d@add-mark Ak2e2d@add-mark) (set! Ak4a78@Ak2e2b@mkstx Ak2e2b@mkstx) (set! Ak4a77@Ak2e29@anti-mark? Ak2e29@anti-mark?) (set! Ak4a76@Ak2e27@anti-mark Ak2e27@anti-mark) (set! Ak4a75@Ak2e25@gen-mark Ak2e25@gen-mark) (set! Ak4a74@Ak2e23@datum->stx Ak2e23@datum->stx) (set! Ak4a73@Ak2e21@dummy Ak2e21@dummy) (set! Ak4a72@Ak2e1f@set-stx-ae*! Ak2e1f@set-stx-ae*!) (set! Ak4a71@Ak2e1d@stx-ae* Ak2e1d@stx-ae*) (set! Ak4a70@Ak2e1b@set-stx-subst*! Ak2e1b@set-stx-subst*!) (set! Ak4a6f@Ak2e19@stx-subst* Ak2e19@stx-subst*) (set! Ak4a6e@Ak2e17@set-stx-mark*! Ak2e17@set-stx-mark*!) (set! Ak4a6d@Ak2e15@stx-mark* Ak2e15@stx-mark*) (set! Ak4a6c@Ak2e13@set-stx-expr! Ak2e13@set-stx-expr!) (set! Ak4a6b@Ak2e11@stx-expr Ak2e11@stx-expr) (set! Ak4a6a@Ak2e0f@stx? Ak2e0f@stx?) (set! Ak4a69@Ak2e05@rp Ak2e05@rp) (set! Ak4a68@Ak2e03@make-full-rib Ak2e03@make-full-rib) (set! Ak4a67@Ak2e01@unseal-rib! Ak2e01@unseal-rib!) (set! Ak4a66@Ak2dff@seal-rib! Ak2dff@seal-rib!) (set! Ak4a65@Ak2dfd@make-rib-map Ak2dfd@make-rib-map) (set! Ak4a64@Ak2dfb@extend-rib/nc! Ak2dfb@extend-rib/nc!) (set! Ak4a63@Ak2df9@extend-rib! Ak2df9@extend-rib!) (set! Ak4a62@Ak2df7@make-empty-rib Ak2df7@make-empty-rib) (set! Ak4a61@Ak2df5@dummy Ak2df5@dummy) (set! Ak4a60@Ak2df3@set-rib-cache! Ak2df3@set-rib-cache!) (set! Ak4a5f@Ak2df1@rib-cache Ak2df1@rib-cache) (set! Ak4a5e@Ak2def@set-rib-sealed/freq! Ak2def@set-rib-sealed/freq!) (set! Ak4a5d@Ak2ded@rib-sealed/freq Ak2ded@rib-sealed/freq) (set! Ak4a5c@Ak2deb@set-rib-label*! Ak2deb@set-rib-label*!) (set! Ak4a5b@Ak2de9@rib-label* Ak2de9@rib-label*) (set! Ak4a5a@Ak2de7@set-rib-mark**! Ak2de7@set-rib-mark**!) (set! Ak4a59@Ak2de5@rib-mark** Ak2de5@rib-mark**) (set! Ak4a58@Ak2de3@set-rib-sym*! Ak2de3@set-rib-sym*!) (set! Ak4a57@Ak2de1@rib-sym* Ak2de1@rib-sym*) (set! Ak4a56@Ak2ddf@rib? Ak2ddf@rib?) (set! Ak4a55@Ak2dd5@gen-define-label Ak2dd5@gen-define-label) (set! Ak4a54@Ak2dd3@gen-define-label+loc Ak2dd3@gen-define-label+loc) (set! Ak4a53@Ak2dd1@gen-top-level-label Ak2dd1@gen-top-level-label) (set! Ak4a52@Ak2dcf@gen-label Ak2dcf@gen-label) (set! Ak4a51@Ak2dcd@gen-global Ak2dcd@gen-global) (set! Ak4a50@Ak2dcb@gen-lexical Ak2dcb@gen-lexical) (set! Ak4a4f@Ak2dc9@top-marked? Ak2dc9@top-marked?) (set! Ak4a4e@Ak2dc7@top-mark* Ak2dc7@top-mark*) (set! Ak4a4d@Ak2dc2@set-union Ak2dc2@set-union) (set! Ak4a4c@Ak2dc0@set-cons Ak2dc0@set-cons) (set! Ak4a4b@Ak2dbe@file-options-macro Ak2dbe@file-options-macro) (Ak2c64@Ak2aa8@current-library-expander Ak310a@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (Ak4b53@Ak4b4e Ak4b55@Ak4b50 Ak4b57@Ak4b4f Ak4b5a@&condition? Ak4b5c@make-&condition Ak4b5e@&condition-rtd Ak4b60@&condition-rcd Ak4bac@Ak4ba7 Ak4bae@Ak4ba9 Ak4bb0@Ak4ba8 Ak4bb3@p? Ak4bb5@make-message-condition Ak4bb7@Ak4ba6 Ak4bb9@message-condition? Ak4bbb@condition-message Ak4bbd@&message-rtd Ak4bbf@&message-rcd Ak4bc5@Ak4bc0 Ak4bc7@Ak4bc2 Ak4bc9@Ak4bc1 Ak4bcc@p? Ak4bce@make-warning Ak4bd0@warning? Ak4bd2@&warning-rtd Ak4bd4@&warning-rcd Ak4bda@Ak4bd5 Ak4bdc@Ak4bd7 Ak4bde@Ak4bd6 Ak4be1@p? Ak4be3@make-serious-condition Ak4be5@serious-condition? Ak4be7@&serious-rtd Ak4be9@&serious-rcd Ak4bef@Ak4bea Ak4bf1@Ak4bec Ak4bf3@Ak4beb Ak4bf6@p? Ak4bf8@make-error Ak4bfa@error? Ak4bfc@&error-rtd Ak4bfe@&error-rcd Ak4c04@Ak4bff Ak4c06@Ak4c01 Ak4c08@Ak4c00 Ak4c0b@p? Ak4c0d@make-violation Ak4c0f@violation? Ak4c11@&violation-rtd Ak4c13@&violation-rcd Ak4c19@Ak4c14 Ak4c1b@Ak4c16 Ak4c1d@Ak4c15 Ak4c20@p? Ak4c22@make-assertion-violation Ak4c24@assertion-violation? Ak4c26@&assertion-rtd Ak4c28@&assertion-rcd Ak4c30@Ak4c2b Ak4c32@Ak4c2d Ak4c34@Ak4c2c Ak4c37@p? Ak4c39@make-irritants-condition Ak4c3b@Ak4c2a Ak4c3d@irritants-condition? Ak4c3f@condition-irritants Ak4c41@&irritants-rtd Ak4c43@&irritants-rcd Ak4c4b@Ak4c46 Ak4c4d@Ak4c48 Ak4c4f@Ak4c47 Ak4c52@p? Ak4c54@make-who-condition Ak4c56@Ak4c45 Ak4c58@who-condition? Ak4c5a@condition-who Ak4c5c@&who-rtd Ak4c5e@&who-rcd Ak4c64@Ak4c5f Ak4c66@Ak4c61 Ak4c68@Ak4c60 Ak4c6b@p? Ak4c6d@make-non-continuable-violation Ak4c6f@non-continuable-violation? Ak4c71@&non-continuable-rtd Ak4c73@&non-continuable-rcd Ak4c79@Ak4c74 Ak4c7b@Ak4c76 Ak4c7d@Ak4c75 Ak4c80@p? Ak4c82@make-implementation-restriction-violation Ak4c84@implementation-restriction-violation? Ak4c86@&implementation-restriction-rtd Ak4c88@&implementation-restriction-rcd Ak4c8e@Ak4c89 Ak4c90@Ak4c8b Ak4c92@Ak4c8a Ak4c95@p? Ak4c97@make-lexical-violation Ak4c99@lexical-violation? Ak4c9b@&lexical-rtd Ak4c9d@&lexical-rcd Ak4ca7@Ak4ca2 Ak4ca9@Ak4ca4 Ak4cab@Ak4ca3 Ak4cae@p? Ak4cb0@make-syntax-violation Ak4cb2@Ak4c9f Ak4cb4@Ak4ca1 Ak4cb6@syntax-violation? Ak4cb8@syntax-violation-form Ak4cba@syntax-violation-subform Ak4cbc@&syntax-rtd Ak4cbe@&syntax-rcd Ak4cc4@Ak4cbf Ak4cc6@Ak4cc1 Ak4cc8@Ak4cc0 Ak4ccb@p? Ak4ccd@make-undefined-violation Ak4ccf@undefined-violation? Ak4cd1@&undefined-rtd Ak4cd3@&undefined-rcd Ak4cd9@Ak4cd4 Ak4cdb@Ak4cd6 Ak4cdd@Ak4cd5 Ak4ce0@p? Ak4ce2@make-i/o-error Ak4ce4@i/o-error? Ak4ce6@&i/o-rtd Ak4ce8@&i/o-rcd Ak4cee@Ak4ce9 Ak4cf0@Ak4ceb Ak4cf2@Ak4cea Ak4cf5@p? Ak4cf7@make-i/o-read-error Ak4cf9@i/o-read-error? Ak4cfb@&i/o-read-rtd Ak4cfd@&i/o-read-rcd Ak4d03@Ak4cfe Ak4d05@Ak4d00 Ak4d07@Ak4cff Ak4d0a@p? Ak4d0c@make-i/o-write-error Ak4d0e@i/o-write-error? Ak4d10@&i/o-write-rtd Ak4d12@&i/o-write-rcd Ak4d1a@Ak4d15 Ak4d1c@Ak4d17 Ak4d1e@Ak4d16 Ak4d21@p? Ak4d23@make-i/o-invalid-position-error Ak4d25@Ak4d14 Ak4d27@i/o-invalid-position-error? Ak4d29@i/o-error-position Ak4d2b@&i/o-invalid-position-rtd Ak4d2d@&i/o-invalid-position-rcd Ak4d35@Ak4d30 Ak4d37@Ak4d32 Ak4d39@Ak4d31 Ak4d3c@p? Ak4d3e@make-i/o-filename-error Ak4d40@Ak4d2f Ak4d42@i/o-filename-error? Ak4d44@i/o-error-filename Ak4d46@&i/o-filename-rtd Ak4d48@&i/o-filename-rcd Ak4d4e@Ak4d49 Ak4d50@Ak4d4b Ak4d52@Ak4d4a Ak4d55@p? Ak4d57@make-i/o-file-protection-error Ak4d59@i/o-file-protection-error? Ak4d5b@&i/o-file-protection-rtd Ak4d5d@&i/o-file-protection-rcd Ak4d63@Ak4d5e Ak4d65@Ak4d60 Ak4d67@Ak4d5f Ak4d6a@p? Ak4d6c@make-i/o-file-is-read-only-error Ak4d6e@i/o-file-is-read-only-error? Ak4d70@&i/o-file-is-read-only-rtd Ak4d72@&i/o-file-is-read-only-rcd Ak4d78@Ak4d73 Ak4d7a@Ak4d75 Ak4d7c@Ak4d74 Ak4d7f@p? Ak4d81@make-i/o-file-already-exists-error Ak4d83@i/o-file-already-exists-error? Ak4d85@&i/o-file-already-exists-rtd Ak4d87@&i/o-file-already-exists-rcd Ak4d8d@Ak4d88 Ak4d8f@Ak4d8a Ak4d91@Ak4d89 Ak4d94@p? Ak4d96@make-i/o-file-does-not-exist-error Ak4d98@i/o-file-does-not-exist-error? Ak4d9a@&i/o-file-does-not-exist-rtd Ak4d9c@&i/o-file-does-not-exist-rcd Ak4da4@Ak4d9f Ak4da6@Ak4da1 Ak4da8@Ak4da0 Ak4dab@p? Ak4dad@make-i/o-port-error Ak4daf@Ak4d9e Ak4db1@i/o-port-error? Ak4db3@i/o-error-port Ak4db5@&i/o-port-rtd Ak4db7@&i/o-port-rcd Ak4dbd@Ak4db8 Ak4dbf@Ak4dba Ak4dc1@Ak4db9 Ak4dc4@p? Ak4dc6@make-i/o-decoding-error Ak4dc8@i/o-decoding-error? Ak4dca@&i/o-decoding-rtd Ak4dcc@&i/o-decoding-rcd Ak4dd4@Ak4dcf Ak4dd6@Ak4dd1 Ak4dd8@Ak4dd0 Ak4ddb@p? Ak4ddd@make-i/o-encoding-error Ak4ddf@Ak4dce Ak4de1@i/o-encoding-error? Ak4de3@i/o-encoding-error-char Ak4de5@&i/o-encoding-rtd Ak4de7@&i/o-encoding-rcd Ak4ded@Ak4de8 Ak4def@Ak4dea Ak4df1@Ak4de9 Ak4df4@p? Ak4df6@make-no-infinities-violation Ak4df8@no-infinities-violation? Ak4dfa@&no-infinities-rtd Ak4dfc@&no-infinities-rcd Ak4e02@Ak4dfd Ak4e04@Ak4dff Ak4e06@Ak4dfe Ak4e09@p? Ak4e0b@make-no-nans-violation Ak4e0d@no-nans-violation? Ak4e0f@&no-nans-rtd Ak4e11@&no-nans-rcd) (begin (set! Ak4b53@Ak4b4e (make-record-type-descriptor '&condition '#f 'Ak4b51 '#f '#f '#())) (set! Ak4b55@Ak4b50 '#f) (set! Ak4b57@Ak4b4f (make-record-constructor-descriptor Ak4b53@Ak4b4e '#f Ak4b55@Ak4b50)) (set! Ak4b5a@&condition? (record-predicate Ak4b53@Ak4b4e)) (set! Ak4b5c@make-&condition (record-constructor Ak4b57@Ak4b4f)) (set! Ak4b5e@&condition-rtd Ak4b53@Ak4b4e) (set! Ak4b60@&condition-rcd Ak4b57@Ak4b4f) (set! Ak4bac@Ak4ba7 (make-record-type-descriptor '&message Ak4b53@Ak4b4e 'Ak4baa '#f '#f '#((immutable message)))) (set! Ak4bae@Ak4ba9 '#f) (set! Ak4bb0@Ak4ba8 (make-record-constructor-descriptor Ak4bac@Ak4ba7 Ak4b57@Ak4b4f Ak4bae@Ak4ba9)) (set! Ak4bb3@p? (record-predicate Ak4bac@Ak4ba7)) (set! Ak4bb5@make-message-condition (record-constructor Ak4bb0@Ak4ba8)) (set! Ak4bb7@Ak4ba6 (record-accessor Ak4bac@Ak4ba7 '0)) (set! Ak4bb9@message-condition? (condition-predicate Ak4bac@Ak4ba7)) (set! Ak4bbb@condition-message (condition-accessor Ak4bac@Ak4ba7 Ak4bb7@Ak4ba6)) (set! Ak4bbd@&message-rtd Ak4bac@Ak4ba7) (set! Ak4bbf@&message-rcd Ak4bb0@Ak4ba8) (set! Ak4bc5@Ak4bc0 (make-record-type-descriptor '&warning Ak4b53@Ak4b4e 'Ak4bc3 '#f '#f '#())) (set! Ak4bc7@Ak4bc2 '#f) (set! Ak4bc9@Ak4bc1 (make-record-constructor-descriptor Ak4bc5@Ak4bc0 Ak4b57@Ak4b4f Ak4bc7@Ak4bc2)) (set! Ak4bcc@p? (record-predicate Ak4bc5@Ak4bc0)) (set! Ak4bce@make-warning (record-constructor Ak4bc9@Ak4bc1)) (set! Ak4bd0@warning? (condition-predicate Ak4bc5@Ak4bc0)) (set! Ak4bd2@&warning-rtd Ak4bc5@Ak4bc0) (set! Ak4bd4@&warning-rcd Ak4bc9@Ak4bc1) (set! Ak4bda@Ak4bd5 (make-record-type-descriptor '&serious Ak4b53@Ak4b4e 'Ak4bd8 '#f '#f '#())) (set! Ak4bdc@Ak4bd7 '#f) (set! Ak4bde@Ak4bd6 (make-record-constructor-descriptor Ak4bda@Ak4bd5 Ak4b57@Ak4b4f Ak4bdc@Ak4bd7)) (set! Ak4be1@p? (record-predicate Ak4bda@Ak4bd5)) (set! Ak4be3@make-serious-condition (record-constructor Ak4bde@Ak4bd6)) (set! Ak4be5@serious-condition? (condition-predicate Ak4bda@Ak4bd5)) (set! Ak4be7@&serious-rtd Ak4bda@Ak4bd5) (set! Ak4be9@&serious-rcd Ak4bde@Ak4bd6) (set! Ak4bef@Ak4bea (make-record-type-descriptor '&error Ak4bda@Ak4bd5 'Ak4bed '#f '#f '#())) (set! Ak4bf1@Ak4bec '#f) (set! Ak4bf3@Ak4beb (make-record-constructor-descriptor Ak4bef@Ak4bea Ak4bde@Ak4bd6 Ak4bf1@Ak4bec)) (set! Ak4bf6@p? (record-predicate Ak4bef@Ak4bea)) (set! Ak4bf8@make-error (record-constructor Ak4bf3@Ak4beb)) (set! Ak4bfa@error? (condition-predicate Ak4bef@Ak4bea)) (set! Ak4bfc@&error-rtd Ak4bef@Ak4bea) (set! Ak4bfe@&error-rcd Ak4bf3@Ak4beb) (set! Ak4c04@Ak4bff (make-record-type-descriptor '&violation Ak4bda@Ak4bd5 'Ak4c02 '#f '#f '#())) (set! Ak4c06@Ak4c01 '#f) (set! Ak4c08@Ak4c00 (make-record-constructor-descriptor Ak4c04@Ak4bff Ak4bde@Ak4bd6 Ak4c06@Ak4c01)) (set! Ak4c0b@p? (record-predicate Ak4c04@Ak4bff)) (set! Ak4c0d@make-violation (record-constructor Ak4c08@Ak4c00)) (set! Ak4c0f@violation? (condition-predicate Ak4c04@Ak4bff)) (set! Ak4c11@&violation-rtd Ak4c04@Ak4bff) (set! Ak4c13@&violation-rcd Ak4c08@Ak4c00) (set! Ak4c19@Ak4c14 (make-record-type-descriptor '&assertion Ak4c04@Ak4bff 'Ak4c17 '#f '#f '#())) (set! Ak4c1b@Ak4c16 '#f) (set! Ak4c1d@Ak4c15 (make-record-constructor-descriptor Ak4c19@Ak4c14 Ak4c08@Ak4c00 Ak4c1b@Ak4c16)) (set! Ak4c20@p? (record-predicate Ak4c19@Ak4c14)) (set! Ak4c22@make-assertion-violation (record-constructor Ak4c1d@Ak4c15)) (set! Ak4c24@assertion-violation? (condition-predicate Ak4c19@Ak4c14)) (set! Ak4c26@&assertion-rtd Ak4c19@Ak4c14) (set! Ak4c28@&assertion-rcd Ak4c1d@Ak4c15) (set! Ak4c30@Ak4c2b (make-record-type-descriptor '&irritants Ak4b53@Ak4b4e 'Ak4c2e '#f '#f '#((immutable irritants)))) (set! Ak4c32@Ak4c2d '#f) (set! Ak4c34@Ak4c2c (make-record-constructor-descriptor Ak4c30@Ak4c2b Ak4b57@Ak4b4f Ak4c32@Ak4c2d)) (set! Ak4c37@p? (record-predicate Ak4c30@Ak4c2b)) (set! Ak4c39@make-irritants-condition (record-constructor Ak4c34@Ak4c2c)) (set! Ak4c3b@Ak4c2a (record-accessor Ak4c30@Ak4c2b '0)) (set! Ak4c3d@irritants-condition? (condition-predicate Ak4c30@Ak4c2b)) (set! Ak4c3f@condition-irritants (condition-accessor Ak4c30@Ak4c2b Ak4c3b@Ak4c2a)) (set! Ak4c41@&irritants-rtd Ak4c30@Ak4c2b) (set! Ak4c43@&irritants-rcd Ak4c34@Ak4c2c) (set! Ak4c4b@Ak4c46 (make-record-type-descriptor '&who Ak4b53@Ak4b4e 'Ak4c49 '#f '#f '#((immutable who)))) (set! Ak4c4d@Ak4c48 '#f) (set! Ak4c4f@Ak4c47 (make-record-constructor-descriptor Ak4c4b@Ak4c46 Ak4b57@Ak4b4f Ak4c4d@Ak4c48)) (set! Ak4c52@p? (record-predicate Ak4c4b@Ak4c46)) (set! Ak4c54@make-who-condition (record-constructor Ak4c4f@Ak4c47)) (set! Ak4c56@Ak4c45 (record-accessor Ak4c4b@Ak4c46 '0)) (set! Ak4c58@who-condition? (condition-predicate Ak4c4b@Ak4c46)) (set! Ak4c5a@condition-who (condition-accessor Ak4c4b@Ak4c46 Ak4c56@Ak4c45)) (set! Ak4c5c@&who-rtd Ak4c4b@Ak4c46) (set! Ak4c5e@&who-rcd Ak4c4f@Ak4c47) (set! Ak4c64@Ak4c5f (make-record-type-descriptor '&non-continuable Ak4c04@Ak4bff 'Ak4c62 '#f '#f '#())) (set! Ak4c66@Ak4c61 '#f) (set! Ak4c68@Ak4c60 (make-record-constructor-descriptor Ak4c64@Ak4c5f Ak4c08@Ak4c00 Ak4c66@Ak4c61)) (set! Ak4c6b@p? (record-predicate Ak4c64@Ak4c5f)) (set! Ak4c6d@make-non-continuable-violation (record-constructor Ak4c68@Ak4c60)) (set! Ak4c6f@non-continuable-violation? (condition-predicate Ak4c64@Ak4c5f)) (set! Ak4c71@&non-continuable-rtd Ak4c64@Ak4c5f) (set! Ak4c73@&non-continuable-rcd Ak4c68@Ak4c60) (set! Ak4c79@Ak4c74 (make-record-type-descriptor '&implementation-restriction Ak4c04@Ak4bff 'Ak4c77 '#f '#f '#())) (set! Ak4c7b@Ak4c76 '#f) (set! Ak4c7d@Ak4c75 (make-record-constructor-descriptor Ak4c79@Ak4c74 Ak4c08@Ak4c00 Ak4c7b@Ak4c76)) (set! Ak4c80@p? (record-predicate Ak4c79@Ak4c74)) (set! Ak4c82@make-implementation-restriction-violation (record-constructor Ak4c7d@Ak4c75)) (set! Ak4c84@implementation-restriction-violation? (condition-predicate Ak4c79@Ak4c74)) (set! Ak4c86@&implementation-restriction-rtd Ak4c79@Ak4c74) (set! Ak4c88@&implementation-restriction-rcd Ak4c7d@Ak4c75) (set! Ak4c8e@Ak4c89 (make-record-type-descriptor '&lexical Ak4c04@Ak4bff 'Ak4c8c '#f '#f '#())) (set! Ak4c90@Ak4c8b '#f) (set! Ak4c92@Ak4c8a (make-record-constructor-descriptor Ak4c8e@Ak4c89 Ak4c08@Ak4c00 Ak4c90@Ak4c8b)) (set! Ak4c95@p? (record-predicate Ak4c8e@Ak4c89)) (set! Ak4c97@make-lexical-violation (record-constructor Ak4c92@Ak4c8a)) (set! Ak4c99@lexical-violation? (condition-predicate Ak4c8e@Ak4c89)) (set! Ak4c9b@&lexical-rtd Ak4c8e@Ak4c89) (set! Ak4c9d@&lexical-rcd Ak4c92@Ak4c8a) (set! Ak4ca7@Ak4ca2 (make-record-type-descriptor '&syntax Ak4c04@Ak4bff 'Ak4ca5 '#f '#f '#((immutable form) (immutable subform)))) (set! Ak4ca9@Ak4ca4 '#f) (set! Ak4cab@Ak4ca3 (make-record-constructor-descriptor Ak4ca7@Ak4ca2 Ak4c08@Ak4c00 Ak4ca9@Ak4ca4)) (set! Ak4cae@p? (record-predicate Ak4ca7@Ak4ca2)) (set! Ak4cb0@make-syntax-violation (record-constructor Ak4cab@Ak4ca3)) (set! Ak4cb2@Ak4c9f (record-accessor Ak4ca7@Ak4ca2 '0)) (set! Ak4cb4@Ak4ca1 (record-accessor Ak4ca7@Ak4ca2 '1)) (set! Ak4cb6@syntax-violation? (condition-predicate Ak4ca7@Ak4ca2)) (set! Ak4cb8@syntax-violation-form (condition-accessor Ak4ca7@Ak4ca2 Ak4cb2@Ak4c9f)) (set! Ak4cba@syntax-violation-subform (condition-accessor Ak4ca7@Ak4ca2 Ak4cb4@Ak4ca1)) (set! Ak4cbc@&syntax-rtd Ak4ca7@Ak4ca2) (set! Ak4cbe@&syntax-rcd Ak4cab@Ak4ca3) (set! Ak4cc4@Ak4cbf (make-record-type-descriptor '&undefined Ak4c04@Ak4bff 'Ak4cc2 '#f '#f '#())) (set! Ak4cc6@Ak4cc1 '#f) (set! Ak4cc8@Ak4cc0 (make-record-constructor-descriptor Ak4cc4@Ak4cbf Ak4c08@Ak4c00 Ak4cc6@Ak4cc1)) (set! Ak4ccb@p? (record-predicate Ak4cc4@Ak4cbf)) (set! Ak4ccd@make-undefined-violation (record-constructor Ak4cc8@Ak4cc0)) (set! Ak4ccf@undefined-violation? (condition-predicate Ak4cc4@Ak4cbf)) (set! Ak4cd1@&undefined-rtd Ak4cc4@Ak4cbf) (set! Ak4cd3@&undefined-rcd Ak4cc8@Ak4cc0) (set! Ak4cd9@Ak4cd4 (make-record-type-descriptor '&i/o Ak4bef@Ak4bea 'Ak4cd7 '#f '#f '#())) (set! Ak4cdb@Ak4cd6 '#f) (set! Ak4cdd@Ak4cd5 (make-record-constructor-descriptor Ak4cd9@Ak4cd4 Ak4bf3@Ak4beb Ak4cdb@Ak4cd6)) (set! Ak4ce0@p? (record-predicate Ak4cd9@Ak4cd4)) (set! Ak4ce2@make-i/o-error (record-constructor Ak4cdd@Ak4cd5)) (set! Ak4ce4@i/o-error? (condition-predicate Ak4cd9@Ak4cd4)) (set! Ak4ce6@&i/o-rtd Ak4cd9@Ak4cd4) (set! Ak4ce8@&i/o-rcd Ak4cdd@Ak4cd5) (set! Ak4cee@Ak4ce9 (make-record-type-descriptor '&i/o-read Ak4cd9@Ak4cd4 'Ak4cec '#f '#f '#())) (set! Ak4cf0@Ak4ceb '#f) (set! Ak4cf2@Ak4cea (make-record-constructor-descriptor Ak4cee@Ak4ce9 Ak4cdd@Ak4cd5 Ak4cf0@Ak4ceb)) (set! Ak4cf5@p? (record-predicate Ak4cee@Ak4ce9)) (set! Ak4cf7@make-i/o-read-error (record-constructor Ak4cf2@Ak4cea)) (set! Ak4cf9@i/o-read-error? (condition-predicate Ak4cee@Ak4ce9)) (set! Ak4cfb@&i/o-read-rtd Ak4cee@Ak4ce9) (set! Ak4cfd@&i/o-read-rcd Ak4cf2@Ak4cea) (set! Ak4d03@Ak4cfe (make-record-type-descriptor '&i/o-write Ak4cd9@Ak4cd4 'Ak4d01 '#f '#f '#())) (set! Ak4d05@Ak4d00 '#f) (set! Ak4d07@Ak4cff (make-record-constructor-descriptor Ak4d03@Ak4cfe Ak4cdd@Ak4cd5 Ak4d05@Ak4d00)) (set! Ak4d0a@p? (record-predicate Ak4d03@Ak4cfe)) (set! Ak4d0c@make-i/o-write-error (record-constructor Ak4d07@Ak4cff)) (set! Ak4d0e@i/o-write-error? (condition-predicate Ak4d03@Ak4cfe)) (set! Ak4d10@&i/o-write-rtd Ak4d03@Ak4cfe) (set! Ak4d12@&i/o-write-rcd Ak4d07@Ak4cff) (set! Ak4d1a@Ak4d15 (make-record-type-descriptor '&i/o-invalid-position Ak4cd9@Ak4cd4 'Ak4d18 '#f '#f '#((immutable position)))) (set! Ak4d1c@Ak4d17 '#f) (set! Ak4d1e@Ak4d16 (make-record-constructor-descriptor Ak4d1a@Ak4d15 Ak4cdd@Ak4cd5 Ak4d1c@Ak4d17)) (set! Ak4d21@p? (record-predicate Ak4d1a@Ak4d15)) (set! Ak4d23@make-i/o-invalid-position-error (record-constructor Ak4d1e@Ak4d16)) (set! Ak4d25@Ak4d14 (record-accessor Ak4d1a@Ak4d15 '0)) (set! Ak4d27@i/o-invalid-position-error? (condition-predicate Ak4d1a@Ak4d15)) (set! Ak4d29@i/o-error-position (condition-accessor Ak4d1a@Ak4d15 Ak4d25@Ak4d14)) (set! Ak4d2b@&i/o-invalid-position-rtd Ak4d1a@Ak4d15) (set! Ak4d2d@&i/o-invalid-position-rcd Ak4d1e@Ak4d16) (set! Ak4d35@Ak4d30 (make-record-type-descriptor '&i/o-filename Ak4cd9@Ak4cd4 'Ak4d33 '#f '#f '#((immutable filename)))) (set! Ak4d37@Ak4d32 '#f) (set! Ak4d39@Ak4d31 (make-record-constructor-descriptor Ak4d35@Ak4d30 Ak4cdd@Ak4cd5 Ak4d37@Ak4d32)) (set! Ak4d3c@p? (record-predicate Ak4d35@Ak4d30)) (set! Ak4d3e@make-i/o-filename-error (record-constructor Ak4d39@Ak4d31)) (set! Ak4d40@Ak4d2f (record-accessor Ak4d35@Ak4d30 '0)) (set! Ak4d42@i/o-filename-error? (condition-predicate Ak4d35@Ak4d30)) (set! Ak4d44@i/o-error-filename (condition-accessor Ak4d35@Ak4d30 Ak4d40@Ak4d2f)) (set! Ak4d46@&i/o-filename-rtd Ak4d35@Ak4d30) (set! Ak4d48@&i/o-filename-rcd Ak4d39@Ak4d31) (set! Ak4d4e@Ak4d49 (make-record-type-descriptor '&i/o-file-protection Ak4d35@Ak4d30 'Ak4d4c '#f '#f '#())) (set! Ak4d50@Ak4d4b '#f) (set! Ak4d52@Ak4d4a (make-record-constructor-descriptor Ak4d4e@Ak4d49 Ak4d39@Ak4d31 Ak4d50@Ak4d4b)) (set! Ak4d55@p? (record-predicate Ak4d4e@Ak4d49)) (set! Ak4d57@make-i/o-file-protection-error (record-constructor Ak4d52@Ak4d4a)) (set! Ak4d59@i/o-file-protection-error? (condition-predicate Ak4d4e@Ak4d49)) (set! Ak4d5b@&i/o-file-protection-rtd Ak4d4e@Ak4d49) (set! Ak4d5d@&i/o-file-protection-rcd Ak4d52@Ak4d4a) (set! Ak4d63@Ak4d5e (make-record-type-descriptor '&i/o-file-is-read-only Ak4d4e@Ak4d49 'Ak4d61 '#f '#f '#())) (set! Ak4d65@Ak4d60 '#f) (set! Ak4d67@Ak4d5f (make-record-constructor-descriptor Ak4d63@Ak4d5e Ak4d52@Ak4d4a Ak4d65@Ak4d60)) (set! Ak4d6a@p? (record-predicate Ak4d63@Ak4d5e)) (set! Ak4d6c@make-i/o-file-is-read-only-error (record-constructor Ak4d67@Ak4d5f)) (set! Ak4d6e@i/o-file-is-read-only-error? (condition-predicate Ak4d63@Ak4d5e)) (set! Ak4d70@&i/o-file-is-read-only-rtd Ak4d63@Ak4d5e) (set! Ak4d72@&i/o-file-is-read-only-rcd Ak4d67@Ak4d5f) (set! Ak4d78@Ak4d73 (make-record-type-descriptor '&i/o-file-already-exists Ak4d35@Ak4d30 'Ak4d76 '#f '#f '#())) (set! Ak4d7a@Ak4d75 '#f) (set! Ak4d7c@Ak4d74 (make-record-constructor-descriptor Ak4d78@Ak4d73 Ak4d39@Ak4d31 Ak4d7a@Ak4d75)) (set! Ak4d7f@p? (record-predicate Ak4d78@Ak4d73)) (set! Ak4d81@make-i/o-file-already-exists-error (record-constructor Ak4d7c@Ak4d74)) (set! Ak4d83@i/o-file-already-exists-error? (condition-predicate Ak4d78@Ak4d73)) (set! Ak4d85@&i/o-file-already-exists-rtd Ak4d78@Ak4d73) (set! Ak4d87@&i/o-file-already-exists-rcd Ak4d7c@Ak4d74) (set! Ak4d8d@Ak4d88 (make-record-type-descriptor '&i/o-file-does-not-exist Ak4d35@Ak4d30 'Ak4d8b '#f '#f '#())) (set! Ak4d8f@Ak4d8a '#f) (set! Ak4d91@Ak4d89 (make-record-constructor-descriptor Ak4d8d@Ak4d88 Ak4d39@Ak4d31 Ak4d8f@Ak4d8a)) (set! Ak4d94@p? (record-predicate Ak4d8d@Ak4d88)) (set! Ak4d96@make-i/o-file-does-not-exist-error (record-constructor Ak4d91@Ak4d89)) (set! Ak4d98@i/o-file-does-not-exist-error? (condition-predicate Ak4d8d@Ak4d88)) (set! Ak4d9a@&i/o-file-does-not-exist-rtd Ak4d8d@Ak4d88) (set! Ak4d9c@&i/o-file-does-not-exist-rcd Ak4d91@Ak4d89) (set! Ak4da4@Ak4d9f (make-record-type-descriptor '&i/o-port Ak4cd9@Ak4cd4 'Ak4da2 '#f '#f '#((immutable port)))) (set! Ak4da6@Ak4da1 '#f) (set! Ak4da8@Ak4da0 (make-record-constructor-descriptor Ak4da4@Ak4d9f Ak4cdd@Ak4cd5 Ak4da6@Ak4da1)) (set! Ak4dab@p? (record-predicate Ak4da4@Ak4d9f)) (set! Ak4dad@make-i/o-port-error (record-constructor Ak4da8@Ak4da0)) (set! Ak4daf@Ak4d9e (record-accessor Ak4da4@Ak4d9f '0)) (set! Ak4db1@i/o-port-error? (condition-predicate Ak4da4@Ak4d9f)) (set! Ak4db3@i/o-error-port (condition-accessor Ak4da4@Ak4d9f Ak4daf@Ak4d9e)) (set! Ak4db5@&i/o-port-rtd Ak4da4@Ak4d9f) (set! Ak4db7@&i/o-port-rcd Ak4da8@Ak4da0) (set! Ak4dbd@Ak4db8 (make-record-type-descriptor '&i/o-decoding Ak4da4@Ak4d9f 'Ak4dbb '#f '#f '#())) (set! Ak4dbf@Ak4dba '#f) (set! Ak4dc1@Ak4db9 (make-record-constructor-descriptor Ak4dbd@Ak4db8 Ak4da8@Ak4da0 Ak4dbf@Ak4dba)) (set! Ak4dc4@p? (record-predicate Ak4dbd@Ak4db8)) (set! Ak4dc6@make-i/o-decoding-error (record-constructor Ak4dc1@Ak4db9)) (set! Ak4dc8@i/o-decoding-error? (condition-predicate Ak4dbd@Ak4db8)) (set! Ak4dca@&i/o-decoding-rtd Ak4dbd@Ak4db8) (set! Ak4dcc@&i/o-decoding-rcd Ak4dc1@Ak4db9) (set! Ak4dd4@Ak4dcf (make-record-type-descriptor '&i/o-encoding Ak4da4@Ak4d9f 'Ak4dd2 '#f '#f '#((immutable char)))) (set! Ak4dd6@Ak4dd1 '#f) (set! Ak4dd8@Ak4dd0 (make-record-constructor-descriptor Ak4dd4@Ak4dcf Ak4da8@Ak4da0 Ak4dd6@Ak4dd1)) (set! Ak4ddb@p? (record-predicate Ak4dd4@Ak4dcf)) (set! Ak4ddd@make-i/o-encoding-error (record-constructor Ak4dd8@Ak4dd0)) (set! Ak4ddf@Ak4dce (record-accessor Ak4dd4@Ak4dcf '0)) (set! Ak4de1@i/o-encoding-error? (condition-predicate Ak4dd4@Ak4dcf)) (set! Ak4de3@i/o-encoding-error-char (condition-accessor Ak4dd4@Ak4dcf Ak4ddf@Ak4dce)) (set! Ak4de5@&i/o-encoding-rtd Ak4dd4@Ak4dcf) (set! Ak4de7@&i/o-encoding-rcd Ak4dd8@Ak4dd0) (set! Ak4ded@Ak4de8 (make-record-type-descriptor '&no-infinities Ak4c79@Ak4c74 'Ak4deb '#f '#f '#())) (set! Ak4def@Ak4dea '#f) (set! Ak4df1@Ak4de9 (make-record-constructor-descriptor Ak4ded@Ak4de8 Ak4c7d@Ak4c75 Ak4def@Ak4dea)) (set! Ak4df4@p? (record-predicate Ak4ded@Ak4de8)) (set! Ak4df6@make-no-infinities-violation (record-constructor Ak4df1@Ak4de9)) (set! Ak4df8@no-infinities-violation? (condition-predicate Ak4ded@Ak4de8)) (set! Ak4dfa@&no-infinities-rtd Ak4ded@Ak4de8) (set! Ak4dfc@&no-infinities-rcd Ak4df1@Ak4de9) (set! Ak4e02@Ak4dfd (make-record-type-descriptor '&no-nans Ak4c79@Ak4c74 'Ak4e00 '#f '#f '#())) (set! Ak4e04@Ak4dff '#f) (set! Ak4e06@Ak4dfe (make-record-constructor-descriptor Ak4e02@Ak4dfd Ak4c7d@Ak4c75 Ak4e04@Ak4dff)) (set! Ak4e09@p? (record-predicate Ak4e02@Ak4dfd)) (set! Ak4e0b@make-no-nans-violation (record-constructor Ak4e06@Ak4dfe)) (set! Ak4e0d@no-nans-violation? (condition-predicate Ak4e02@Ak4dfd)) (set! Ak4e0f@&no-nans-rtd Ak4e02@Ak4dfd) (set! Ak4e11@&no-nans-rcd Ak4e06@Ak4dfe) (begin (set! Ak4f02@Ak4e11@&no-nans-rcd Ak4e11@&no-nans-rcd) (set! Ak4f01@Ak4e0f@&no-nans-rtd Ak4e0f@&no-nans-rtd) (set! Ak4f00@Ak4e0d@no-nans-violation? Ak4e0d@no-nans-violation?) (set! Ak4eff@Ak4e0b@make-no-nans-violation Ak4e0b@make-no-nans-violation) (set! Ak4efe@Ak4e09@p? Ak4e09@p?) (set! Ak4efd@Ak4e06@Ak4dfe Ak4e06@Ak4dfe) (set! Ak4efc@Ak4e04@Ak4dff Ak4e04@Ak4dff) (set! Ak4efb@Ak4e02@Ak4dfd Ak4e02@Ak4dfd) (set! Ak4efa@Ak4dfc@&no-infinities-rcd Ak4dfc@&no-infinities-rcd) (set! Ak4ef9@Ak4dfa@&no-infinities-rtd Ak4dfa@&no-infinities-rtd) (set! Ak4ef8@Ak4df8@no-infinities-violation? Ak4df8@no-infinities-violation?) (set! Ak4ef7@Ak4df6@make-no-infinities-violation Ak4df6@make-no-infinities-violation) (set! Ak4ef6@Ak4df4@p? Ak4df4@p?) (set! Ak4ef5@Ak4df1@Ak4de9 Ak4df1@Ak4de9) (set! Ak4ef4@Ak4def@Ak4dea Ak4def@Ak4dea) (set! Ak4ef3@Ak4ded@Ak4de8 Ak4ded@Ak4de8) (set! Ak4ef2@Ak4de7@&i/o-encoding-rcd Ak4de7@&i/o-encoding-rcd) (set! Ak4ef1@Ak4de5@&i/o-encoding-rtd Ak4de5@&i/o-encoding-rtd) (set! Ak4ef0@Ak4de3@i/o-encoding-error-char Ak4de3@i/o-encoding-error-char) (set! Ak4eef@Ak4de1@i/o-encoding-error? Ak4de1@i/o-encoding-error?) (set! Ak4eee@Ak4ddf@Ak4dce Ak4ddf@Ak4dce) (set! Ak4eed@Ak4ddd@make-i/o-encoding-error Ak4ddd@make-i/o-encoding-error) (set! Ak4eec@Ak4ddb@p? Ak4ddb@p?) (set! Ak4eeb@Ak4dd8@Ak4dd0 Ak4dd8@Ak4dd0) (set! Ak4eea@Ak4dd6@Ak4dd1 Ak4dd6@Ak4dd1) (set! Ak4ee9@Ak4dd4@Ak4dcf Ak4dd4@Ak4dcf) (set! Ak4ee8@Ak4dcc@&i/o-decoding-rcd Ak4dcc@&i/o-decoding-rcd) (set! Ak4ee7@Ak4dca@&i/o-decoding-rtd Ak4dca@&i/o-decoding-rtd) (set! Ak4ee6@Ak4dc8@i/o-decoding-error? Ak4dc8@i/o-decoding-error?) (set! Ak4ee5@Ak4dc6@make-i/o-decoding-error Ak4dc6@make-i/o-decoding-error) (set! Ak4ee4@Ak4dc4@p? Ak4dc4@p?) (set! Ak4ee3@Ak4dc1@Ak4db9 Ak4dc1@Ak4db9) (set! Ak4ee2@Ak4dbf@Ak4dba Ak4dbf@Ak4dba) (set! Ak4ee1@Ak4dbd@Ak4db8 Ak4dbd@Ak4db8) (set! Ak4ee0@Ak4db7@&i/o-port-rcd Ak4db7@&i/o-port-rcd) (set! Ak4edf@Ak4db5@&i/o-port-rtd Ak4db5@&i/o-port-rtd) (set! Ak4ede@Ak4db3@i/o-error-port Ak4db3@i/o-error-port) (set! Ak4edd@Ak4db1@i/o-port-error? Ak4db1@i/o-port-error?) (set! Ak4edc@Ak4daf@Ak4d9e Ak4daf@Ak4d9e) (set! Ak4edb@Ak4dad@make-i/o-port-error Ak4dad@make-i/o-port-error) (set! Ak4eda@Ak4dab@p? Ak4dab@p?) (set! Ak4ed9@Ak4da8@Ak4da0 Ak4da8@Ak4da0) (set! Ak4ed8@Ak4da6@Ak4da1 Ak4da6@Ak4da1) (set! Ak4ed7@Ak4da4@Ak4d9f Ak4da4@Ak4d9f) (set! Ak4ed6@Ak4d9c@&i/o-file-does-not-exist-rcd Ak4d9c@&i/o-file-does-not-exist-rcd) (set! Ak4ed5@Ak4d9a@&i/o-file-does-not-exist-rtd Ak4d9a@&i/o-file-does-not-exist-rtd) (set! Ak4ed4@Ak4d98@i/o-file-does-not-exist-error? Ak4d98@i/o-file-does-not-exist-error?) (set! Ak4ed3@Ak4d96@make-i/o-file-does-not-exist-error Ak4d96@make-i/o-file-does-not-exist-error) (set! Ak4ed2@Ak4d94@p? Ak4d94@p?) (set! Ak4ed1@Ak4d91@Ak4d89 Ak4d91@Ak4d89) (set! Ak4ed0@Ak4d8f@Ak4d8a Ak4d8f@Ak4d8a) (set! Ak4ecf@Ak4d8d@Ak4d88 Ak4d8d@Ak4d88) (set! Ak4ece@Ak4d87@&i/o-file-already-exists-rcd Ak4d87@&i/o-file-already-exists-rcd) (set! Ak4ecd@Ak4d85@&i/o-file-already-exists-rtd Ak4d85@&i/o-file-already-exists-rtd) (set! Ak4ecc@Ak4d83@i/o-file-already-exists-error? Ak4d83@i/o-file-already-exists-error?) (set! Ak4ecb@Ak4d81@make-i/o-file-already-exists-error Ak4d81@make-i/o-file-already-exists-error) (set! Ak4eca@Ak4d7f@p? Ak4d7f@p?) (set! Ak4ec9@Ak4d7c@Ak4d74 Ak4d7c@Ak4d74) (set! Ak4ec8@Ak4d7a@Ak4d75 Ak4d7a@Ak4d75) (set! Ak4ec7@Ak4d78@Ak4d73 Ak4d78@Ak4d73) (set! Ak4ec6@Ak4d72@&i/o-file-is-read-only-rcd Ak4d72@&i/o-file-is-read-only-rcd) (set! Ak4ec5@Ak4d70@&i/o-file-is-read-only-rtd Ak4d70@&i/o-file-is-read-only-rtd) (set! Ak4ec4@Ak4d6e@i/o-file-is-read-only-error? Ak4d6e@i/o-file-is-read-only-error?) (set! Ak4ec3@Ak4d6c@make-i/o-file-is-read-only-error Ak4d6c@make-i/o-file-is-read-only-error) (set! Ak4ec2@Ak4d6a@p? Ak4d6a@p?) (set! Ak4ec1@Ak4d67@Ak4d5f Ak4d67@Ak4d5f) (set! Ak4ec0@Ak4d65@Ak4d60 Ak4d65@Ak4d60) (set! Ak4ebf@Ak4d63@Ak4d5e Ak4d63@Ak4d5e) (set! Ak4ebe@Ak4d5d@&i/o-file-protection-rcd Ak4d5d@&i/o-file-protection-rcd) (set! Ak4ebd@Ak4d5b@&i/o-file-protection-rtd Ak4d5b@&i/o-file-protection-rtd) (set! Ak4ebc@Ak4d59@i/o-file-protection-error? Ak4d59@i/o-file-protection-error?) (set! Ak4ebb@Ak4d57@make-i/o-file-protection-error Ak4d57@make-i/o-file-protection-error) (set! Ak4eba@Ak4d55@p? Ak4d55@p?) (set! Ak4eb9@Ak4d52@Ak4d4a Ak4d52@Ak4d4a) (set! Ak4eb8@Ak4d50@Ak4d4b Ak4d50@Ak4d4b) (set! Ak4eb7@Ak4d4e@Ak4d49 Ak4d4e@Ak4d49) (set! Ak4eb6@Ak4d48@&i/o-filename-rcd Ak4d48@&i/o-filename-rcd) (set! Ak4eb5@Ak4d46@&i/o-filename-rtd Ak4d46@&i/o-filename-rtd) (set! Ak4eb4@Ak4d44@i/o-error-filename Ak4d44@i/o-error-filename) (set! Ak4eb3@Ak4d42@i/o-filename-error? Ak4d42@i/o-filename-error?) (set! Ak4eb2@Ak4d40@Ak4d2f Ak4d40@Ak4d2f) (set! Ak4eb1@Ak4d3e@make-i/o-filename-error Ak4d3e@make-i/o-filename-error) (set! Ak4eb0@Ak4d3c@p? Ak4d3c@p?) (set! Ak4eaf@Ak4d39@Ak4d31 Ak4d39@Ak4d31) (set! Ak4eae@Ak4d37@Ak4d32 Ak4d37@Ak4d32) (set! Ak4ead@Ak4d35@Ak4d30 Ak4d35@Ak4d30) (set! Ak4eac@Ak4d2d@&i/o-invalid-position-rcd Ak4d2d@&i/o-invalid-position-rcd) (set! Ak4eab@Ak4d2b@&i/o-invalid-position-rtd Ak4d2b@&i/o-invalid-position-rtd) (set! Ak4eaa@Ak4d29@i/o-error-position Ak4d29@i/o-error-position) (set! Ak4ea9@Ak4d27@i/o-invalid-position-error? Ak4d27@i/o-invalid-position-error?) (set! Ak4ea8@Ak4d25@Ak4d14 Ak4d25@Ak4d14) (set! Ak4ea7@Ak4d23@make-i/o-invalid-position-error Ak4d23@make-i/o-invalid-position-error) (set! Ak4ea6@Ak4d21@p? Ak4d21@p?) (set! Ak4ea5@Ak4d1e@Ak4d16 Ak4d1e@Ak4d16) (set! Ak4ea4@Ak4d1c@Ak4d17 Ak4d1c@Ak4d17) (set! Ak4ea3@Ak4d1a@Ak4d15 Ak4d1a@Ak4d15) (set! Ak4ea2@Ak4d12@&i/o-write-rcd Ak4d12@&i/o-write-rcd) (set! Ak4ea1@Ak4d10@&i/o-write-rtd Ak4d10@&i/o-write-rtd) (set! Ak4ea0@Ak4d0e@i/o-write-error? Ak4d0e@i/o-write-error?) (set! Ak4e9f@Ak4d0c@make-i/o-write-error Ak4d0c@make-i/o-write-error) (set! Ak4e9e@Ak4d0a@p? Ak4d0a@p?) (set! Ak4e9d@Ak4d07@Ak4cff Ak4d07@Ak4cff) (set! Ak4e9c@Ak4d05@Ak4d00 Ak4d05@Ak4d00) (set! Ak4e9b@Ak4d03@Ak4cfe Ak4d03@Ak4cfe) (set! Ak4e9a@Ak4cfd@&i/o-read-rcd Ak4cfd@&i/o-read-rcd) (set! Ak4e99@Ak4cfb@&i/o-read-rtd Ak4cfb@&i/o-read-rtd) (set! Ak4e98@Ak4cf9@i/o-read-error? Ak4cf9@i/o-read-error?) (set! Ak4e97@Ak4cf7@make-i/o-read-error Ak4cf7@make-i/o-read-error) (set! Ak4e96@Ak4cf5@p? Ak4cf5@p?) (set! Ak4e95@Ak4cf2@Ak4cea Ak4cf2@Ak4cea) (set! Ak4e94@Ak4cf0@Ak4ceb Ak4cf0@Ak4ceb) (set! Ak4e93@Ak4cee@Ak4ce9 Ak4cee@Ak4ce9) (set! Ak4e92@Ak4ce8@&i/o-rcd Ak4ce8@&i/o-rcd) (set! Ak4e91@Ak4ce6@&i/o-rtd Ak4ce6@&i/o-rtd) (set! Ak4e90@Ak4ce4@i/o-error? Ak4ce4@i/o-error?) (set! Ak4e8f@Ak4ce2@make-i/o-error Ak4ce2@make-i/o-error) (set! Ak4e8e@Ak4ce0@p? Ak4ce0@p?) (set! Ak4e8d@Ak4cdd@Ak4cd5 Ak4cdd@Ak4cd5) (set! Ak4e8c@Ak4cdb@Ak4cd6 Ak4cdb@Ak4cd6) (set! Ak4e8b@Ak4cd9@Ak4cd4 Ak4cd9@Ak4cd4) (set! Ak4e8a@Ak4cd3@&undefined-rcd Ak4cd3@&undefined-rcd) (set! Ak4e89@Ak4cd1@&undefined-rtd Ak4cd1@&undefined-rtd) (set! Ak4e88@Ak4ccf@undefined-violation? Ak4ccf@undefined-violation?) (set! Ak4e87@Ak4ccd@make-undefined-violation Ak4ccd@make-undefined-violation) (set! Ak4e86@Ak4ccb@p? Ak4ccb@p?) (set! Ak4e85@Ak4cc8@Ak4cc0 Ak4cc8@Ak4cc0) (set! Ak4e84@Ak4cc6@Ak4cc1 Ak4cc6@Ak4cc1) (set! Ak4e83@Ak4cc4@Ak4cbf Ak4cc4@Ak4cbf) (set! Ak4e82@Ak4cbe@&syntax-rcd Ak4cbe@&syntax-rcd) (set! Ak4e81@Ak4cbc@&syntax-rtd Ak4cbc@&syntax-rtd) (set! Ak4e80@Ak4cba@syntax-violation-subform Ak4cba@syntax-violation-subform) (set! Ak4e7f@Ak4cb8@syntax-violation-form Ak4cb8@syntax-violation-form) (set! Ak4e7e@Ak4cb6@syntax-violation? Ak4cb6@syntax-violation?) (set! Ak4e7d@Ak4cb4@Ak4ca1 Ak4cb4@Ak4ca1) (set! Ak4e7c@Ak4cb2@Ak4c9f Ak4cb2@Ak4c9f) (set! Ak4e7b@Ak4cb0@make-syntax-violation Ak4cb0@make-syntax-violation) (set! Ak4e7a@Ak4cae@p? Ak4cae@p?) (set! Ak4e79@Ak4cab@Ak4ca3 Ak4cab@Ak4ca3) (set! Ak4e78@Ak4ca9@Ak4ca4 Ak4ca9@Ak4ca4) (set! Ak4e77@Ak4ca7@Ak4ca2 Ak4ca7@Ak4ca2) (set! Ak4e76@Ak4c9d@&lexical-rcd Ak4c9d@&lexical-rcd) (set! Ak4e75@Ak4c9b@&lexical-rtd Ak4c9b@&lexical-rtd) (set! Ak4e74@Ak4c99@lexical-violation? Ak4c99@lexical-violation?) (set! Ak4e73@Ak4c97@make-lexical-violation Ak4c97@make-lexical-violation) (set! Ak4e72@Ak4c95@p? Ak4c95@p?) (set! Ak4e71@Ak4c92@Ak4c8a Ak4c92@Ak4c8a) (set! Ak4e70@Ak4c90@Ak4c8b Ak4c90@Ak4c8b) (set! Ak4e6f@Ak4c8e@Ak4c89 Ak4c8e@Ak4c89) (set! Ak4e6e@Ak4c88@&implementation-restriction-rcd Ak4c88@&implementation-restriction-rcd) (set! Ak4e6d@Ak4c86@&implementation-restriction-rtd Ak4c86@&implementation-restriction-rtd) (set! Ak4e6c@Ak4c84@implementation-restriction-violation? Ak4c84@implementation-restriction-violation?) (set! Ak4e6b@Ak4c82@make-implementation-restriction-violation Ak4c82@make-implementation-restriction-violation) (set! Ak4e6a@Ak4c80@p? Ak4c80@p?) (set! Ak4e69@Ak4c7d@Ak4c75 Ak4c7d@Ak4c75) (set! Ak4e68@Ak4c7b@Ak4c76 Ak4c7b@Ak4c76) (set! Ak4e67@Ak4c79@Ak4c74 Ak4c79@Ak4c74) (set! Ak4e66@Ak4c73@&non-continuable-rcd Ak4c73@&non-continuable-rcd) (set! Ak4e65@Ak4c71@&non-continuable-rtd Ak4c71@&non-continuable-rtd) (set! Ak4e64@Ak4c6f@non-continuable-violation? Ak4c6f@non-continuable-violation?) (set! Ak4e63@Ak4c6d@make-non-continuable-violation Ak4c6d@make-non-continuable-violation) (set! Ak4e62@Ak4c6b@p? Ak4c6b@p?) (set! Ak4e61@Ak4c68@Ak4c60 Ak4c68@Ak4c60) (set! Ak4e60@Ak4c66@Ak4c61 Ak4c66@Ak4c61) (set! Ak4e5f@Ak4c64@Ak4c5f Ak4c64@Ak4c5f) (set! Ak4e5e@Ak4c5e@&who-rcd Ak4c5e@&who-rcd) (set! Ak4e5d@Ak4c5c@&who-rtd Ak4c5c@&who-rtd) (set! Ak4e5c@Ak4c5a@condition-who Ak4c5a@condition-who) (set! Ak4e5b@Ak4c58@who-condition? Ak4c58@who-condition?) (set! Ak4e5a@Ak4c56@Ak4c45 Ak4c56@Ak4c45) (set! Ak4e59@Ak4c54@make-who-condition Ak4c54@make-who-condition) (set! Ak4e58@Ak4c52@p? Ak4c52@p?) (set! Ak4e57@Ak4c4f@Ak4c47 Ak4c4f@Ak4c47) (set! Ak4e56@Ak4c4d@Ak4c48 Ak4c4d@Ak4c48) (set! Ak4e55@Ak4c4b@Ak4c46 Ak4c4b@Ak4c46) (set! Ak4e54@Ak4c43@&irritants-rcd Ak4c43@&irritants-rcd) (set! Ak4e53@Ak4c41@&irritants-rtd Ak4c41@&irritants-rtd) (set! Ak4e52@Ak4c3f@condition-irritants Ak4c3f@condition-irritants) (set! Ak4e51@Ak4c3d@irritants-condition? Ak4c3d@irritants-condition?) (set! Ak4e50@Ak4c3b@Ak4c2a Ak4c3b@Ak4c2a) (set! Ak4e4f@Ak4c39@make-irritants-condition Ak4c39@make-irritants-condition) (set! Ak4e4e@Ak4c37@p? Ak4c37@p?) (set! Ak4e4d@Ak4c34@Ak4c2c Ak4c34@Ak4c2c) (set! Ak4e4c@Ak4c32@Ak4c2d Ak4c32@Ak4c2d) (set! Ak4e4b@Ak4c30@Ak4c2b Ak4c30@Ak4c2b) (set! Ak4e4a@Ak4c28@&assertion-rcd Ak4c28@&assertion-rcd) (set! Ak4e49@Ak4c26@&assertion-rtd Ak4c26@&assertion-rtd) (set! Ak4e48@Ak4c24@assertion-violation? Ak4c24@assertion-violation?) (set! Ak4e47@Ak4c22@make-assertion-violation Ak4c22@make-assertion-violation) (set! Ak4e46@Ak4c20@p? Ak4c20@p?) (set! Ak4e45@Ak4c1d@Ak4c15 Ak4c1d@Ak4c15) (set! Ak4e44@Ak4c1b@Ak4c16 Ak4c1b@Ak4c16) (set! Ak4e43@Ak4c19@Ak4c14 Ak4c19@Ak4c14) (set! Ak4e42@Ak4c13@&violation-rcd Ak4c13@&violation-rcd) (set! Ak4e41@Ak4c11@&violation-rtd Ak4c11@&violation-rtd) (set! Ak4e40@Ak4c0f@violation? Ak4c0f@violation?) (set! Ak4e3f@Ak4c0d@make-violation Ak4c0d@make-violation) (set! Ak4e3e@Ak4c0b@p? Ak4c0b@p?) (set! Ak4e3d@Ak4c08@Ak4c00 Ak4c08@Ak4c00) (set! Ak4e3c@Ak4c06@Ak4c01 Ak4c06@Ak4c01) (set! Ak4e3b@Ak4c04@Ak4bff Ak4c04@Ak4bff) (set! Ak4e3a@Ak4bfe@&error-rcd Ak4bfe@&error-rcd) (set! Ak4e39@Ak4bfc@&error-rtd Ak4bfc@&error-rtd) (set! Ak4e38@Ak4bfa@error? Ak4bfa@error?) (set! Ak4e37@Ak4bf8@make-error Ak4bf8@make-error) (set! Ak4e36@Ak4bf6@p? Ak4bf6@p?) (set! Ak4e35@Ak4bf3@Ak4beb Ak4bf3@Ak4beb) (set! Ak4e34@Ak4bf1@Ak4bec Ak4bf1@Ak4bec) (set! Ak4e33@Ak4bef@Ak4bea Ak4bef@Ak4bea) (set! Ak4e32@Ak4be9@&serious-rcd Ak4be9@&serious-rcd) (set! Ak4e31@Ak4be7@&serious-rtd Ak4be7@&serious-rtd) (set! Ak4e30@Ak4be5@serious-condition? Ak4be5@serious-condition?) (set! Ak4e2f@Ak4be3@make-serious-condition Ak4be3@make-serious-condition) (set! Ak4e2e@Ak4be1@p? Ak4be1@p?) (set! Ak4e2d@Ak4bde@Ak4bd6 Ak4bde@Ak4bd6) (set! Ak4e2c@Ak4bdc@Ak4bd7 Ak4bdc@Ak4bd7) (set! Ak4e2b@Ak4bda@Ak4bd5 Ak4bda@Ak4bd5) (set! Ak4e2a@Ak4bd4@&warning-rcd Ak4bd4@&warning-rcd) (set! Ak4e29@Ak4bd2@&warning-rtd Ak4bd2@&warning-rtd) (set! Ak4e28@Ak4bd0@warning? Ak4bd0@warning?) (set! Ak4e27@Ak4bce@make-warning Ak4bce@make-warning) (set! Ak4e26@Ak4bcc@p? Ak4bcc@p?) (set! Ak4e25@Ak4bc9@Ak4bc1 Ak4bc9@Ak4bc1) (set! Ak4e24@Ak4bc7@Ak4bc2 Ak4bc7@Ak4bc2) (set! Ak4e23@Ak4bc5@Ak4bc0 Ak4bc5@Ak4bc0) (set! Ak4e22@Ak4bbf@&message-rcd Ak4bbf@&message-rcd) (set! Ak4e21@Ak4bbd@&message-rtd Ak4bbd@&message-rtd) (set! Ak4e20@Ak4bbb@condition-message Ak4bbb@condition-message) (set! Ak4e1f@Ak4bb9@message-condition? Ak4bb9@message-condition?) (set! Ak4e1e@Ak4bb7@Ak4ba6 Ak4bb7@Ak4ba6) (set! Ak4e1d@Ak4bb5@make-message-condition Ak4bb5@make-message-condition) (set! Ak4e1c@Ak4bb3@p? Ak4bb3@p?) (set! Ak4e1b@Ak4bb0@Ak4ba8 Ak4bb0@Ak4ba8) (set! Ak4e1a@Ak4bae@Ak4ba9 Ak4bae@Ak4ba9) (set! Ak4e19@Ak4bac@Ak4ba7 Ak4bac@Ak4ba7) (set! Ak4e18@Ak4b60@&condition-rcd Ak4b60@&condition-rcd) (set! Ak4e17@Ak4b5e@&condition-rtd Ak4b5e@&condition-rtd) (set! Ak4e16@Ak4b5c@make-&condition Ak4b5c@make-&condition) (set! Ak4e15@Ak4b5a@&condition? Ak4b5a@&condition?) (set! Ak4e14@Ak4b57@Ak4b4f Ak4b57@Ak4b4f) (set! Ak4e13@Ak4b55@Ak4b50 Ak4b55@Ak4b50) (set! Ak4e12@Ak4b53@Ak4b4e Ak4b53@Ak4b4e)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (Ak29f5@Ak29aa@current-primitive-locations (lambda (Ak53da@x) ((lambda (Ak53dc@t) (if Ak53dc@t (cdr Ak53dc@t) '#f)) (assq Ak53da@x '((&no-nans-rcd . Ak4f02@Ak4e11@&no-nans-rcd) (&no-nans-rtd . Ak4f01@Ak4e0f@&no-nans-rtd) (&no-infinities-rcd . Ak4efa@Ak4dfc@&no-infinities-rcd) (&no-infinities-rtd . Ak4ef9@Ak4dfa@&no-infinities-rtd) (&i/o-encoding-rcd . Ak4ef2@Ak4de7@&i/o-encoding-rcd) (&i/o-encoding-rtd . Ak4ef1@Ak4de5@&i/o-encoding-rtd) (&i/o-decoding-rcd . Ak4ee8@Ak4dcc@&i/o-decoding-rcd) (&i/o-decoding-rtd . Ak4ee7@Ak4dca@&i/o-decoding-rtd) (&i/o-port-rcd . Ak4ee0@Ak4db7@&i/o-port-rcd) (&i/o-port-rtd . Ak4edf@Ak4db5@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . Ak4ed6@Ak4d9c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . Ak4ed5@Ak4d9a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . Ak4ece@Ak4d87@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . Ak4ecd@Ak4d85@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . Ak4ec6@Ak4d72@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . Ak4ec5@Ak4d70@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . Ak4ebe@Ak4d5d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . Ak4ebd@Ak4d5b@&i/o-file-protection-rtd) (&i/o-filename-rcd . Ak4eb6@Ak4d48@&i/o-filename-rcd) (&i/o-filename-rtd . Ak4eb5@Ak4d46@&i/o-filename-rtd) (&i/o-invalid-position-rcd . Ak4eac@Ak4d2d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . Ak4eab@Ak4d2b@&i/o-invalid-position-rtd) (&i/o-write-rcd . Ak4ea2@Ak4d12@&i/o-write-rcd) (&i/o-write-rtd . Ak4ea1@Ak4d10@&i/o-write-rtd) (&i/o-read-rcd . Ak4e9a@Ak4cfd@&i/o-read-rcd) (&i/o-read-rtd . Ak4e99@Ak4cfb@&i/o-read-rtd) (&i/o-rcd . Ak4e92@Ak4ce8@&i/o-rcd) (&i/o-rtd . Ak4e91@Ak4ce6@&i/o-rtd) (&undefined-rcd . Ak4e8a@Ak4cd3@&undefined-rcd) (&undefined-rtd . Ak4e89@Ak4cd1@&undefined-rtd) (&syntax-rcd . Ak4e82@Ak4cbe@&syntax-rcd) (&syntax-rtd . Ak4e81@Ak4cbc@&syntax-rtd) (&lexical-rcd . Ak4e76@Ak4c9d@&lexical-rcd) (&lexical-rtd . Ak4e75@Ak4c9b@&lexical-rtd) (&implementation-restriction-rcd . Ak4e6e@Ak4c88@&implementation-restriction-rcd) (&implementation-restriction-rtd . Ak4e6d@Ak4c86@&implementation-restriction-rtd) (&non-continuable-rcd . Ak4e66@Ak4c73@&non-continuable-rcd) (&non-continuable-rtd . Ak4e65@Ak4c71@&non-continuable-rtd) (&who-rcd . Ak4e5e@Ak4c5e@&who-rcd) (&who-rtd . Ak4e5d@Ak4c5c@&who-rtd) (&irritants-rcd . Ak4e54@Ak4c43@&irritants-rcd) (&irritants-rtd . Ak4e53@Ak4c41@&irritants-rtd) (&assertion-rcd . Ak4e4a@Ak4c28@&assertion-rcd) (&assertion-rtd . Ak4e49@Ak4c26@&assertion-rtd) (&violation-rcd . Ak4e42@Ak4c13@&violation-rcd) (&violation-rtd . Ak4e41@Ak4c11@&violation-rtd) (&error-rcd . Ak4e3a@Ak4bfe@&error-rcd) (&error-rtd . Ak4e39@Ak4bfc@&error-rtd) (&serious-rcd . Ak4e32@Ak4be9@&serious-rcd) (&serious-rtd . Ak4e31@Ak4be7@&serious-rtd) (&warning-rcd . Ak4e2a@Ak4bd4@&warning-rcd) (&warning-rtd . Ak4e29@Ak4bd2@&warning-rtd) (&message-rcd . Ak4e22@Ak4bbf@&message-rcd) (&message-rtd . Ak4e21@Ak4bbd@&message-rtd) (&condition-rcd . Ak4e18@Ak4b60@&condition-rcd) (&condition-rtd . Ak4e17@Ak4b5e@&condition-rtd) (syntax-error . Ak4b3b@Ak3124@syntax-error) (syntax-dispatch . Ak4ad9@Ak3048@syntax-dispatch) (load . Ak5087@Ak4f1e@load) (interaction-environment . Ak4b43@Ak3134@interaction-environment) (library-path . Ak2c5c@Ak2a98@library-path) (make-parameter . Ak29a2@Ak2881@make-parameter) (make-variable-transformer . Ak4a97@Ak2e75@make-variable-transformer) (identifier? . Ak4b3e@Ak312a@identifier?) (generate-temporaries . Ak4b34@Ak3116@generate-temporaries) (free-identifier=? . Ak4b35@Ak3118@free-identifier=?) (syntax->datum . Ak4b40@Ak312e@syntax->datum) (datum->syntax . Ak4b3f@Ak312c@datum->syntax) (bound-identifier=? . Ak4b36@Ak311a@bound-identifier=?) (make-i/o-write-error . Ak4e9f@Ak4d0c@make-i/o-write-error) (make-i/o-read-error . Ak4e97@Ak4cf7@make-i/o-read-error) (make-i/o-port-error . Ak4edb@Ak4dad@make-i/o-port-error) (make-i/o-invalid-position-error . Ak4ea7@Ak4d23@make-i/o-invalid-position-error) (make-i/o-filename-error . Ak4eb1@Ak4d3e@make-i/o-filename-error) (make-i/o-file-protection-error . Ak4ebb@Ak4d57@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . Ak4ec3@Ak4d6c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . Ak4ed3@Ak4d96@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . Ak4ecb@Ak4d81@make-i/o-file-already-exists-error) (make-i/o-error . Ak4e8f@Ak4ce2@make-i/o-error) (make-i/o-encoding-error . Ak4eed@Ak4ddd@make-i/o-encoding-error) (make-i/o-decoding-error . Ak4ee5@Ak4dc6@make-i/o-decoding-error) (i/o-write-error? . Ak4ea0@Ak4d0e@i/o-write-error?) (i/o-read-error? . Ak4e98@Ak4cf9@i/o-read-error?) (i/o-port-error? . Ak4edd@Ak4db1@i/o-port-error?) (i/o-invalid-position-error? . Ak4ea9@Ak4d27@i/o-invalid-position-error?) (i/o-filename-error? . Ak4eb3@Ak4d42@i/o-filename-error?) (i/o-file-protection-error? . Ak4ebc@Ak4d59@i/o-file-protection-error?) (i/o-file-is-read-only-error? . Ak4ec4@Ak4d6e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . Ak4ed4@Ak4d98@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . Ak4ecc@Ak4d83@i/o-file-already-exists-error?) (i/o-error? . Ak4e90@Ak4ce4@i/o-error?) (i/o-error-position . Ak4eaa@Ak4d29@i/o-error-position) (i/o-error-port . Ak4ede@Ak4db3@i/o-error-port) (i/o-error-filename . Ak4eb4@Ak4d44@i/o-error-filename) (i/o-encoding-error? . Ak4eef@Ak4de1@i/o-encoding-error?) (i/o-encoding-error-char . Ak4ef0@Ak4de3@i/o-encoding-error-char) (i/o-decoding-error? . Ak4ee6@Ak4dc8@i/o-decoding-error?) (scheme-report-environment . Ak4b2b@Ak3104@scheme-report-environment) (null-environment . Ak4b2a@Ak3102@null-environment) (command-line . Ak5084@Ak4f18@command-line) (eval . Ak4b2d@Ak3108@eval) (environment . Ak4b29@Ak3100@environment) (who-condition? . Ak4e5b@Ak4c58@who-condition?) (warning? . Ak4e28@Ak4bd0@warning?) (violation? . Ak4e40@Ak4c0f@violation?) (undefined-violation? . Ak4e88@Ak4ccf@undefined-violation?) (syntax-violation? . Ak4e7e@Ak4cb6@syntax-violation?) (syntax-violation-subform . Ak4e80@Ak4cba@syntax-violation-subform) (syntax-violation-form . Ak4e7f@Ak4cb8@syntax-violation-form) (syntax-violation . Ak4b3d@Ak3128@syntax-violation) (serious-condition? . Ak4e30@Ak4be5@serious-condition?) (non-continuable-violation? . Ak4e64@Ak4c6f@non-continuable-violation?) (message-condition? . Ak4e1f@Ak4bb9@message-condition?) (make-who-condition . Ak4e59@Ak4c54@make-who-condition) (make-warning . Ak4e27@Ak4bce@make-warning) (make-violation . Ak4e3f@Ak4c0d@make-violation) (make-undefined-violation . Ak4e87@Ak4ccd@make-undefined-violation) (make-syntax-violation . Ak4e7b@Ak4cb0@make-syntax-violation) (make-serious-condition . Ak4e2f@Ak4be3@make-serious-condition) (make-non-continuable-violation . Ak4e63@Ak4c6d@make-non-continuable-violation) (make-message-condition . Ak4e1d@Ak4bb5@make-message-condition) (make-lexical-violation . Ak4e73@Ak4c97@make-lexical-violation) (make-irritants-condition . Ak4e4f@Ak4c39@make-irritants-condition) (make-implementation-restriction-violation . Ak4e6b@Ak4c82@make-implementation-restriction-violation) (make-error . Ak4e37@Ak4bf8@make-error) (make-assertion-violation . Ak4e47@Ak4c22@make-assertion-violation) (lexical-violation? . Ak4e74@Ak4c99@lexical-violation?) (irritants-condition? . Ak4e51@Ak4c3d@irritants-condition?) (implementation-restriction-violation? . Ak4e6c@Ak4c84@implementation-restriction-violation?) (error? . Ak4e38@Ak4bfa@error?) (condition-who . Ak4e5c@Ak4c5a@condition-who) (condition-message . Ak4e20@Ak4bbb@condition-message) (condition-irritants . Ak4e52@Ak4c3f@condition-irritants) (assertion-violation? . Ak4e48@Ak4c24@assertion-violation?) (no-nans-violation? . Ak4f00@Ak4e0d@no-nans-violation?) (no-infinities-violation? . Ak4ef8@Ak4df8@no-infinities-violation?) (make-no-nans-violation . Ak4eff@Ak4e0b@make-no-nans-violation) (make-no-infinities-violation . Ak4ef7@Ak4df6@make-no-infinities-violation) (assertion-error . Ak4b3a@Ak3122@assertion-error)))))) (Ak2c6c@Ak2ab8@install-library 'Ak53b7 '(mosh interaction) '() '() '() '() '((regexp? . Ak53af) (alist->eq-hash-table . Ak53ab) (format . Ak53a8) (string-split . Ak539d) (call-process . Ak5397) (set-current-directory! . Ak5393) (expand-path . Ak5392) (current-directory . Ak5391) (%spawn . Ak5390) (%waitpid . Ak538f) (simple-struct-name . Ak538e) (simple-struct-set! . Ak538d) (simple-struct-ref . Ak538c) (make-simple-struct . Ak538b) (simple-struct? . Ak538a) (pointer-ref-c-int64 . Ak5389) (pointer-ref-c-int32 . Ak5388) (pointer-ref-c-int16 . Ak5387) (pointer-ref-c-int8 . Ak5386) (pointer-ref-c-uint64 . Ak5385) (pointer-ref-c-uint32 . Ak5384) (pointer-ref-c-uint16 . Ak5383) (pointer-ref-c-uint8 . Ak5382) (pointer-set-c-uint64! . Ak5381) (pointer-set-c-uint32! . Ak5380) (pointer-set-c-uint16! . Ak537f) (pointer-set-c-uint8! . Ak537e) (pointer-set-c-int64! . Ak537d) (pointer-set-c-int32! . Ak537c) (pointer-set-c-int16! . Ak537b) (pointer-set-c-int8! . Ak537a) (pointer-set-c-pointer! . Ak5379) (pointer-set-c-double! . Ak5378) (pointer-set-c-float! . Ak5377) (pointer-set-c-long-long! . Ak5376) (pointer-set-c-long! . Ak5375) (pointer-set-c-int! . Ak5374) (pointer-set-c-short! . Ak5373) (pointer-set-c-char! . Ak5372) (pointer-ref-c-pointer . Ak5371) (pointer-ref-c-double . Ak5370) (pointer-ref-c-float . Ak536f) (pointer-ref-c-unsigned-long-long . Ak536e) (pointer-ref-c-signed-long-long . Ak536d) (pointer-ref-c-unsigned-long . Ak536c) (pointer-ref-c-signed-long . Ak536b) (pointer-ref-c-unsigned-int . Ak536a) (pointer-ref-c-signed-int . Ak5369) (pointer-ref-c-unsigned-short . Ak5368) (pointer-ref-c-signed-short . Ak5367) (pointer-ref-c-unsigned-char . Ak5366) (pointer-ref-c-signed-char . Ak5365) (pointer->integer . Ak5364) (integer->pointer . Ak5363) (pointer? . Ak5362) (shared-errno . Ak5361) (%ffi-supported? . Ak5360) (%ffi-pointer->string . Ak535f) (%ffi-call->string-or-zero . Ak535e) (%ffi-call->double . Ak535d) (%ffi-call->void* . Ak535c) (%ffi-call->void . Ak535b) (%ffi-call->char . Ak535a) (%ffi-call->int . Ak5359) (%ffi-lookup . Ak5358) (%ffi-open . Ak5357) (%fork . Ak5356) (%pipe . Ak5355) (p . Ak5354) (whereis . Ak5339) (register . Ak5338) (vm-join! . Ak5337) (vm-set-value! . Ak5336) (vm? . Ak5335) (main-vm? . Ak5334) (vm-eval . Ak5333) (vm-self . Ak5332) (vm-start! . Ak5331) (make-vm . Ak5330) (mutex-try-lock! . Ak532f) (mutex-unlock! . Ak532e) (mutex-lock! . Ak532d) (mutex? . Ak532c) (make-mutex . Ak532b) (condition-variable-notify-all! . Ak532a) (condition-variable-notify! . Ak5329) (condition-variable-wait! . Ak5328) (make-condition-variable . Ak5327) (string-upcase . Ak5310) (string-titlecase . Ak530f) (string-normalize-nfkd . Ak530e) (string-normalize-nfkc . Ak530d) (string-normalize-nfd . Ak530c) (string-normalize-nfc . Ak530b) (string-foldcase . Ak530a) (string-downcase . Ak5309) (string-ci>? . Ak5308) (string-ci>=? . Ak5307) (string-ci=? . Ak5306) (string-ci<? . Ak5305) (string-ci<=? . Ak5304) (char-whitespace? . Ak5303) (char-upper-case? . Ak5302) (char-title-case? . Ak5301) (char-numeric? . Ak5300) (char-lower-case? . Ak52ff) (char-general-category . Ak52fe) (char-upcase . Ak52fd) (char-titlecase . Ak52fc) (char-foldcase . Ak52fb) (char-downcase . Ak52fa) (char-ci>? . Ak52f9) (char-ci>=? . Ak52f8) (char-ci=? . Ak52f7) (char-ci<? . Ak52f6) (char-ci<=? . Ak52f5) (char-alphabetic? . Ak52f4) (make-variable-transformer . Ak2e74) (identifier? . Ak3129) (generate-temporaries . Ak3115) (free-identifier=? . Ak3117) (syntax->datum . Ak312d) (datum->syntax . Ak312b) (bound-identifier=? . Ak3119) (record-type-descriptor? . Ak52f3) (record-predicate . Ak52f2) (record-mutator . Ak52f1) (record-constructor . Ak52f0) (record-accessor . Ak52ef) (make-record-type-descriptor . Ak52ee) (make-record-constructor-descriptor . Ak52ed) (record? . Ak52ec) (record-type-uid . Ak52eb) (record-type-sealed? . Ak52ea) (record-type-parent . Ak52e9) (record-type-opaque? . Ak52e8) (record-type-name . Ak52e7) (record-type-generative? . Ak52e6) (record-type-field-names . Ak52e5) (record-rtd . Ak52e4) (record-field-mutable? . Ak52e3) (delete-file . Ak52e2) (file-exists? . Ak52e1) (vector-sort! . Ak52e0) (vector-sort . Ak52df) (list-sort . Ak52de) (symbol-hash . Ak52dd) (string-ci-hash . Ak52dc) (string-hash . Ak52db) (equal-hash . Ak52da) (hashtable-equivalence-function . Ak52d9) (make-hashtable . Ak52d8) (hashtable-hash-function . Ak52d7) (make-eqv-hashtable . Ak52d6) (make-eq-hashtable . Ak52d5) (hashtable? . Ak52d4) (hashtable-update! . Ak52d3) (hashtable-size . Ak52d2) (hashtable-set! . Ak52d1) (hashtable-ref . Ak52d0) (hashtable-mutable? . Ak52cf) (hashtable-keys . Ak52ce) (hashtable-entries . Ak52cd) (hashtable-delete! . Ak52cc) (hashtable-copy . Ak52cb) (hashtable-contains? . Ak52ca) (hashtable-clear! . Ak52c9) (call-with-output-file . Ak52c8) (call-with-input-file . Ak52c7) (write-char . Ak52c6) (write . Ak52c5) (with-output-to-file . Ak52c4) (with-input-from-file . Ak52c3) (read-char . Ak52c2) (read . Ak52c1) (peek-char . Ak52c0) (open-output-file . Ak52bf) (open-input-file . Ak52be) (newline . Ak52bd) (display . Ak52bc) (close-output-port . Ak52bb) (close-input-port . Ak52ba) (eof-object? . Ak52b9) (eof-object . Ak52b8) (current-error-port . Ak52b7) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (utf-8-codec . Ak52b2) (utf-16-codec . Ak52b1) (transcoder-error-handling-mode . Ak52b0) (transcoder-eol-style . Ak52af) (transcoder-codec . Ak52ae) (transcoded-port . Ak52ad) (textual-port? . Ak52ac) (string->bytevector . Ak52ab) (standard-output-port . Ak52aa) (standard-input-port . Ak52a9) (standard-error-port . Ak52a8) (set-port-position! . Ak52a7) (put-u8 . Ak52a6) (put-string . Ak52a5) (put-datum . Ak52a4) (put-char . Ak52a3) (put-bytevector . Ak52a2) (port? . Ak52a1) (port-transcoder . Ak52a0) (port-position . Ak529f) (port-has-set-port-position!? . Ak529e) (port-has-port-position? . Ak529d) (port-eof? . Ak529c) (output-port-buffer-mode . Ak529b) (open-string-output-port . Ak529a) (open-string-input-port . Ak5299) (open-file-output-port . Ak5298) (open-file-input/output-port . Ak5297) (open-file-input-port . Ak5296) (open-bytevector-output-port . Ak5295) (open-bytevector-input-port . Ak5294) (native-transcoder . Ak5293) (native-eol-style . Ak5292) (make-transcoder . Ak5291) (latin-1-codec . Ak5290) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (make-i/o-encoding-error . Ak4ddc) (make-i/o-decoding-error . Ak4dc5) (make-custom-textual-output-port . Ak528f) (make-custom-textual-input/output-port . Ak528e) (make-custom-textual-input-port . Ak528d) (make-custom-binary-output-port . Ak528c) (make-custom-binary-input/output-port . Ak528b) (make-custom-binary-input-port . Ak528a) (make-bytevector . Ak5289) (lookahead-u8 . Ak5288) (lookahead-char . Ak5287) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (i/o-encoding-error? . Ak4de0) (i/o-encoding-error-char . Ak4de2) (i/o-decoding-error? . Ak4dc7) (get-u8 . Ak5286) (get-string-n! . Ak5285) (get-string-n . Ak5284) (get-string-all . Ak5283) (get-line . Ak5282) (get-datum . Ak5281) (get-char . Ak5280) (get-bytevector-some . Ak527f) (get-bytevector-n! . Ak527e) (get-bytevector-n . Ak527d) (get-bytevector-all . Ak527c) (flush-output-port . Ak527b) (close-port . Ak527a) (exit . Ak5272) (command-line . Ak4f17) (string-fill! . Ak5271) (string-set! . Ak5270) (set-cdr! . Ak526f) (set-car! . Ak526e) (remove . Ak526d) (remv . Ak526c) (remp . Ak526b) (remq . Ak526a) (partition . Ak5269) (memv . Ak5268) (memq . Ak5267) (memp . Ak5266) (member . Ak5265) (exists . Ak5264) (for-all . Ak5263) (fold-right . Ak5262) (fold-left . Ak5261) (find . Ak5260) (filter . Ak525f) (cons* . Ak525e) (assv . Ak525d) (assq . Ak525c) (assp . Ak525b) (assoc . Ak525a) (call-with-string-output-port . Ak5259) (call-with-port . Ak5258) (call-with-bytevector-output-port . Ak5257) (bytevector->string . Ak5256) (buffer-mode? . Ak5255) (binary-port? . Ak5254) (with-exception-handler . Ak5253) (raise-continuable . Ak5252) (raise . Ak5251) (eval . Ak3107) (environment . Ak30ff) (make-enumeration . Ak5250) (enum-set=? . Ak524f) (enum-set-universe . Ak524e) (enum-set-union . Ak524d) (enum-set-subset? . Ak524c) (enum-set-projection . Ak524b) (enum-set-member? . Ak524a) (enum-set-intersection . Ak5249) (enum-set-indexer . Ak5248) (enum-set-difference . Ak5247) (enum-set-constructor . Ak5246) (enum-set-complement . Ak5245) (enum-set->list . Ak5244) (who-condition? . Ak4c57) (warning? . Ak4bcf) (violation? . Ak4c0e) (undefined-violation? . Ak4cce) (syntax-violation? . Ak4cb5) (syntax-violation-subform . Ak4cb9) (syntax-violation-form . Ak4cb7) (syntax-violation . Ak3127) (simple-conditions . Ak5243) (serious-condition? . Ak4be4) (non-continuable-violation? . Ak4c6e) (message-condition? . Ak4bb8) (make-who-condition . Ak4c53) (make-warning . Ak4bcd) (make-violation . Ak4c0c) (make-undefined-violation . Ak4ccc) (make-syntax-violation . Ak4caf) (make-serious-condition . Ak4be2) (make-non-continuable-violation . Ak4c6c) (make-message-condition . Ak4bb4) (make-lexical-violation . Ak4c96) (make-irritants-condition . Ak4c38) (make-implementation-restriction-violation . Ak4c81) (make-error . Ak4bf7) (make-assertion-violation . Ak4c21) (lexical-violation? . Ak4c98) (irritants-condition? . Ak4c3c) (implementation-restriction-violation? . Ak4c83) (error? . Ak4bf9) (condition-who . Ak4c59) (condition-predicate . Ak5242) (condition-message . Ak4bba) (condition-irritants . Ak4c3e) (condition-accessor . Ak5241) (condition . Ak5240) (assertion-violation? . Ak4c23) (condition? . Ak523f) (utf32->string . Ak523e) (utf16->string . Ak523d) (utf8->string . Ak523c) (uint-list->bytevector . Ak523b) (u8-list->bytevector . Ak523a) (string->utf8 . Ak5239) (string->utf32 . Ak5238) (string->utf16 . Ak5237) (sint-list->bytevector . Ak5236) (native-endianness . Ak5235) (bytevector? . Ak5234) (bytevector=? . Ak5233) (bytevector-uint-set! . Ak5232) (bytevector-uint-ref . Ak5231) (bytevector-u8-set! . Ak5230) (bytevector-u8-ref . Ak522f) (bytevector-u64-set! . Ak522e) (bytevector-u64-ref . Ak522d) (bytevector-u64-native-set! . Ak522c) (bytevector-u64-native-ref . Ak522b) (bytevector-u32-set! . Ak522a) (bytevector-u32-ref . Ak5229) (bytevector-u32-native-set! . Ak5228) (bytevector-u32-native-ref . Ak5227) (bytevector-u16-set! . Ak5226) (bytevector-u16-ref . Ak5225) (bytevector-u16-native-set! . Ak5224) (bytevector-u16-native-ref . Ak5223) (bytevector-sint-set! . Ak5222) (bytevector-sint-ref . Ak5221) (bytevector-s8-set! . Ak5220) (bytevector-s8-ref . Ak521f) (bytevector-s64-set! . Ak521e) (bytevector-s64-ref . Ak521d) (bytevector-s64-native-set! . Ak521c) (bytevector-s64-native-ref . Ak521b) (bytevector-s32-set! . Ak521a) (bytevector-s32-ref . Ak5219) (bytevector-s32-native-set! . Ak5218) (bytevector-s32-native-ref . Ak5217) (bytevector-s16-set! . Ak5216) (bytevector-s16-ref . Ak5215) (bytevector-s16-native-set! . Ak5214) (bytevector-s16-native-ref . Ak5213) (bytevector-length . Ak5212) (bytevector-ieee-single-ref . Ak5211) (bytevector-ieee-single-set! . Ak5210) (bytevector-ieee-single-native-set! . Ak520f) (bytevector-ieee-single-native-ref . Ak520e) (bytevector-ieee-double-set! . Ak520d) (bytevector-ieee-double-ref . Ak520c) (bytevector-ieee-double-native-set! . Ak520b) (bytevector-ieee-double-native-ref . Ak520a) (bytevector-fill! . Ak5209) (bytevector-copy! . Ak5208) (bytevector-copy . Ak5207) (bytevector->uint-list . Ak5206) (bytevector->u8-list . Ak5205) (bytevector->sint-list . Ak5204) (no-nans-violation? . Ak4e0c) (no-infinities-violation? . Ak4df7) (make-no-nans-violation . Ak4e0a) (make-no-infinities-violation . Ak4df5) (real->flonum . Ak5203) (flzero? . Ak5202) (fltruncate . Ak5201) (fltan . Ak5200) (flsqrt . Ak51ff) (flsin . Ak51fe) (flround . Ak51fd) (flpositive? . Ak51fc) (flonum? . Ak51fb) (flodd? . Ak51fa) (flnumerator . Ak51f9) (flnegative? . Ak51f8) (flnan? . Ak51f7) (flmod0 . Ak51f6) (flmod . Ak51f5) (flmin . Ak51f4) (flmax . Ak51f3) (fllog . Ak51f2) (flinteger? . Ak51f1) (flinfinite? . Ak51f0) (flfloor . Ak51ef) (flfinite? . Ak51ee) (flexpt . Ak51ed) (flexp . Ak51ec) (fleven? . Ak51eb) (fldiv0-and-mod0 . Ak51ea) (fldiv0 . Ak51e9) (fldiv-and-mod . Ak51e8) (fldiv . Ak51e7) (fldenominator . Ak51e6) (flcos . Ak51e5) (flceiling . Ak51e4) (flatan . Ak51e3) (flasin . Ak51e2) (flacos . Ak51e1) (flabs . Ak51e0) (fl>? . Ak51df) (fl>=? . Ak51de) (fl=? . Ak51dd) (fl<? . Ak51dc) (fl<=? . Ak51db) (fl/ . Ak51da) (fl- . Ak51d9) (fl+ . Ak51d8) (fl* . Ak51d7) (fixnum->flonum . Ak51d6) (fxzero? . Ak51d5) (fxxor . Ak51d4) (fxrotate-bit-field . Ak51d3) (fxreverse-bit-field . Ak51d2) (fxpositive? . Ak51d1) (fxodd? . Ak51d0) (fxnot . Ak51cf) (fxnegative? . Ak51ce) (fxmod0 . Ak51cd) (fxmod . Ak51cc) (fxmin . Ak51cb) (fxmax . Ak51ca) (fxlength . Ak51c9) (fxior . Ak51c8) (fxif . Ak51c7) (fxfirst-bit-set . Ak51c6) (fxeven? . Ak51c5) (fxdiv0-and-mod0 . Ak51c4) (fxdiv0 . Ak51c3) (fxdiv-and-mod . Ak51c2) (fxdiv . Ak51c1) (fxcopy-bit-field . Ak51c0) (fxcopy-bit . Ak51bf) (fxbit-set? . Ak51be) (fxbit-field . Ak51bd) (fxbit-count . Ak51bc) (fxarithmetic-shift-right . Ak51bb) (fxarithmetic-shift-left . Ak51ba) (fxarithmetic-shift . Ak51b9) (fxand . Ak51b8) (fx>? . Ak51b7) (fx>=? . Ak51b6) (fx=? . Ak51b5) (fx<? . Ak51b4) (fx<=? . Ak51b3) (fx-/carry . Ak51b2) (fx- . Ak51b1) (fx+/carry . Ak51b0) (fx+ . Ak51af) (fx*/carry . Ak51ae) (fx* . Ak51ad) (greatest-fixnum . Ak51ac) (least-fixnum . Ak51ab) (fixnum-width . Ak51aa) (fixnum? . Ak51a9) (bitwise-rotate-bit-field . Ak51a8) (bitwise-reverse-bit-field . Ak51a7) (bitwise-length . Ak51a6) (bitwise-if . Ak51a5) (bitwise-first-bit-set . Ak51a4) (bitwise-copy-bit-field . Ak51a3) (bitwise-copy-bit . Ak51a2) (bitwise-bit-set? . Ak51a1) (bitwise-bit-field . Ak51a0) (bitwise-bit-count . Ak519f) (bitwise-xor . Ak519e) (bitwise-ior . Ak519d) (bitwise-and . Ak519c) (bitwise-not . Ak519b) (bitwise-arithmetic-shift-right . Ak519a) (bitwise-arithmetic-shift-left . Ak5199) (bitwise-arithmetic-shift . Ak5198) (zero? . Ak5197) (vector? . Ak5196) (vector-set! . Ak5195) (vector-ref . Ak5194) (vector-map . Ak5193) (vector-length . Ak5192) (vector-for-each . Ak5191) (vector-fill! . Ak5190) (vector->list . Ak518f) (vector . Ak518e) (values . Ak518d) (truncate . Ak518c) (tan . Ak518b) (symbol? . Ak518a) (symbol=? . Ak5189) (symbol->string . Ak5188) (substring . Ak5187) (string? . Ak5186) (string>? . Ak5185) (string>=? . Ak5184) (string=? . Ak5183) (string<? . Ak5182) (string<=? . Ak5181) (string-ref . Ak5180) (string-length . Ak517f) (string-for-each . Ak517e) (string-copy . Ak517d) (string-append . Ak517c) (string->symbol . Ak517b) (string->number . Ak517a) (string->list . Ak5179) (string . Ak5178) (sqrt . Ak5177) (sin . Ak5176) (round . Ak5175) (reverse . Ak5174) (real? . Ak5173) (real-valued? . Ak5172) (real-part . Ak5171) (rationalize . Ak5170) (rational? . Ak516f) (rational-valued? . Ak516e) (procedure? . Ak516d) (positive? . Ak516c) (pair? . Ak516b) (odd? . Ak516a) (numerator . Ak5169) (number? . Ak5168) (number->string . Ak5167) (null? . Ak5166) (not . Ak5165) (negative? . Ak5164) (nan? . Ak5163) (min . Ak5162) (max . Ak5161) (map . Ak5160) (make-vector . Ak515f) (make-string . Ak515e) (make-rectangular . Ak515d) (make-polar . Ak515c) (magnitude . Ak515b) (log . Ak515a) (list? . Ak5159) (list-tail . Ak5158) (list-ref . Ak5157) (list->vector . Ak5156) (list->string . Ak5155) (list . Ak5154) (length . Ak5153) (lcm . Ak5152) (integer? . Ak5151) (integer-valued? . Ak5150) (integer->char . Ak514f) (infinite? . Ak514e) (inexact? . Ak514d) (inexact . Ak514c) (imag-part . Ak514b) (gcd . Ak514a) (for-each . Ak5149) (floor . Ak5148) (finite? . Ak5147) (expt . Ak5146) (exp . Ak5145) (exact? . Ak5144) (exact-integer-sqrt . Ak5143) (exact . Ak5142) (even? . Ak5141) (error . Ak5140) (eqv? . Ak513f) (equal? . Ak513e) (eq? . Ak513d) (dynamic-wind . Ak513c) (div0-and-mod0 . Ak513b) (mod0 . Ak513a) (div0 . Ak5139) (div-and-mod . Ak5138) (mod . Ak5137) (div . Ak5136) (denominator . Ak5135) (cos . Ak5134) (cons . Ak5133) (complex? . Ak5132) (char? . Ak5131) (char>? . Ak5130) (char>=? . Ak512f) (char=? . Ak512e) (char<? . Ak512d) (char<=? . Ak512c) (char->integer . Ak512b) (ceiling . Ak512a) (call-with-values . Ak5129) (call/cc . Ak5128) (call-with-current-continuation . Ak5127) (cddddr . Ak5126) (cdddar . Ak5125) (cddadr . Ak5124) (cddaar . Ak5123) (cdaddr . Ak5122) (cdadar . Ak5121) (cdaadr . Ak5120) (cdaaar . Ak511f) (cadddr . Ak511e) (caddar . Ak511d) (cadadr . Ak511c) (cadaar . Ak511b) (caaddr . Ak511a) (caadar . Ak5119) (caaadr . Ak5118) (caaaar . Ak5117) (cdddr . Ak5116) (cddar . Ak5115) (cdadr . Ak5114) (cdaar . Ak5113) (caddr . Ak5112) (cadar . Ak5111) (caadr . Ak5110) (caaar . Ak510f) (cddr . Ak510e) (cdar . Ak510d) (cadr . Ak510c) (caar . Ak510b) (cdr . Ak510a) (car . Ak5109) (boolean? . Ak5108) (boolean=? . Ak5107) (atan . Ak5106) (assertion-violation . Ak5105) (asin . Ak5104) (apply . Ak5103) (append . Ak5102) (angle . Ak5101) (acos . Ak5100) (abs . Ak50ff) (/ . Ak50fe) (* . Ak50fd) (- . Ak50fc) (+ . Ak50fb) (>= . Ak50fa) (> . Ak50f9) (= . Ak50f8) (<= . Ak50f7) (< . Ak50f6) (library . Ak50f5) (&no-nans . Ak50f4) (&no-infinities . Ak50f3) (&i/o-encoding . Ak50f2) (&i/o-decoding . Ak50f1) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7) (&undefined . Ak50e6) (&syntax . Ak50e5) (&lexical . Ak50e4) (&implementation-restriction . Ak50e3) (&non-continuable . Ak50e2) (&who . Ak50e1) (&irritants . Ak50e0) (&assertion . Ak50df) (&violation . Ak50de) (&error . Ak50dd) (&serious . Ak50dc) (&warning . Ak50db) (&message . Ak50da) (&condition . Ak50d9) (define-condition-type . Ak50d8) (define-enumeration . Ak50d7) (define-record-type . Ak50d6) (parent-rtd . Ak50d5) (nongenerative . Ak50d4) (opaque . Ak50d3) (sealed . Ak50d2) (protocol . Ak50d1) (parent . Ak50d0) (immutable . Ak50cf) (mutable . Ak50ce) (fields . Ak50cd) (error-handling-mode . Ak50cc) (file-options . Ak50cb) (buffer-mode . Ak50ca) (eol-style . Ak50c9) (guard . Ak50c8) (unsyntax-splicing . Ak50c5) (unsyntax . Ak50c4) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (_ . Ak50c1) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (assert . Ak50bd) (endianness . Ak50bc) (time . Ak50ba) (do . Ak50b9) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (let*-values . Ak50b5) (let-values . Ak50b4) (identifier-syntax . Ak50b3) (with-syntax . Ak50b2) (quasisyntax . Ak50b1) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (include . Ak50ae) (record-constructor-descriptor . Ak50ac) (record-type-descriptor . Ak50ab) (case . Ak50aa) (unless . Ak50a8) (when . Ak50a7) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec* . Ak50a3) (letrec . Ak50a2) (case-lambda . Ak50a0) (lambda . Ak509f) (syntax . Ak509e) (syntax-case . Ak509d) (quote . Ak509c) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (import . Ak5097) (begin . Ak5096) (define-syntax . Ak5094) (define . Ak5093)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53b8 '(psyntax null-environment-5) '() '() '() '() '((make-promise . Ak5273) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (_ . Ak50c1) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (delay . Ak50bb) (do . Ak50b9) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (case . Ak50aa) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec . Ak50a2) (lambda . Ak509f) (quote . Ak509c) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (begin . Ak5096) (define-syntax . Ak5094) (define . Ak5093)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53b9 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . Ak5308) (string-ci>=? . Ak5307) (string-ci=? . Ak5306) (string-ci<? . Ak5305) (string-ci<=? . Ak5304) (char-whitespace? . Ak5303) (char-upper-case? . Ak5302) (char-numeric? . Ak5300) (char-lower-case? . Ak52ff) (char-upcase . Ak52fd) (char-downcase . Ak52fa) (char-ci>? . Ak52f9) (char-ci>=? . Ak52f8) (char-ci=? . Ak52f7) (char-ci<? . Ak52f6) (char-ci<=? . Ak52f5) (char-alphabetic? . Ak52f4) (call-with-output-file . Ak52c8) (call-with-input-file . Ak52c7) (write-char . Ak52c6) (write . Ak52c5) (with-output-to-file . Ak52c4) (with-input-from-file . Ak52c3) (read-char . Ak52c2) (read . Ak52c1) (peek-char . Ak52c0) (open-output-file . Ak52bf) (open-input-file . Ak52be) (newline . Ak52bd) (display . Ak52bc) (close-output-port . Ak52bb) (close-input-port . Ak52ba) (eof-object . Ak52b8) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (scheme-report-environment . Ak3103) (quotient . Ak5279) (null-environment . Ak3101) (remainder . Ak5278) (modulo . Ak5277) (inexact->exact . Ak5276) (force . Ak5275) (exact->inexact . Ak5274) (make-promise . Ak5273) (string-fill! . Ak5271) (string-set! . Ak5270) (set-cdr! . Ak526f) (set-car! . Ak526e) (memv . Ak5268) (memq . Ak5267) (member . Ak5265) (assv . Ak525d) (assq . Ak525c) (assoc . Ak525a) (eval . Ak3107) (zero? . Ak5197) (vector? . Ak5196) (vector-set! . Ak5195) (vector-ref . Ak5194) (vector-length . Ak5192) (vector-fill! . Ak5190) (vector->list . Ak518f) (vector . Ak518e) (values . Ak518d) (truncate . Ak518c) (tan . Ak518b) (symbol? . Ak518a) (symbol->string . Ak5188) (substring . Ak5187) (string? . Ak5186) (string>? . Ak5185) (string>=? . Ak5184) (string=? . Ak5183) (string<? . Ak5182) (string<=? . Ak5181) (string-ref . Ak5180) (string-length . Ak517f) (string-copy . Ak517d) (string-append . Ak517c) (string->symbol . Ak517b) (string->number . Ak517a) (string->list . Ak5179) (string . Ak5178) (sqrt . Ak5177) (sin . Ak5176) (round . Ak5175) (reverse . Ak5174) (real? . Ak5173) (real-part . Ak5171) (rationalize . Ak5170) (rational? . Ak516f) (procedure? . Ak516d) (positive? . Ak516c) (pair? . Ak516b) (odd? . Ak516a) (numerator . Ak5169) (number? . Ak5168) (number->string . Ak5167) (not . Ak5165) (negative? . Ak5164) (min . Ak5162) (max . Ak5161) (map . Ak5160) (make-vector . Ak515f) (make-string . Ak515e) (make-rectangular . Ak515d) (make-polar . Ak515c) (magnitude . Ak515b) (log . Ak515a) (list? . Ak5159) (list-tail . Ak5158) (list-ref . Ak5157) (list->vector . Ak5156) (list->string . Ak5155) (list . Ak5154) (length . Ak5153) (lcm . Ak5152) (integer? . Ak5151) (integer->char . Ak514f) (inexact? . Ak514d) (imag-part . Ak514b) (gcd . Ak514a) (for-each . Ak5149) (floor . Ak5148) (expt . Ak5146) (exp . Ak5145) (exact? . Ak5144) (even? . Ak5141) (eqv? . Ak513f) (equal? . Ak513e) (eq? . Ak513d) (dynamic-wind . Ak513c) (denominator . Ak5135) (cos . Ak5134) (cons . Ak5133) (complex? . Ak5132) (char? . Ak5131) (char>? . Ak5130) (char>=? . Ak512f) (char=? . Ak512e) (char<? . Ak512d) (char<=? . Ak512c) (char->integer . Ak512b) (ceiling . Ak512a) (call-with-values . Ak5129) (call-with-current-continuation . Ak5127) (cddddr . Ak5126) (cdddar . Ak5125) (cddadr . Ak5124) (cddaar . Ak5123) (cdaddr . Ak5122) (cdadar . Ak5121) (cdaadr . Ak5120) (cdaaar . Ak511f) (cadddr . Ak511e) (caddar . Ak511d) (cadadr . Ak511c) (cadaar . Ak511b) (caaddr . Ak511a) (caadar . Ak5119) (caaadr . Ak5118) (caaaar . Ak5117) (cdddr . Ak5116) (cddar . Ak5115) (cdadr . Ak5114) (cdaar . Ak5113) (caddr . Ak5112) (cadar . Ak5111) (caadr . Ak5110) (caaar . Ak510f) (cddr . Ak510e) (cdar . Ak510d) (cadr . Ak510c) (caar . Ak510b) (cdr . Ak510a) (car . Ak5109) (boolean? . Ak5108) (atan . Ak5106) (asin . Ak5104) (apply . Ak5103) (append . Ak5102) (angle . Ak5101) (acos . Ak5100) (abs . Ak50ff) (/ . Ak50fe) (* . Ak50fd) (- . Ak50fc) (+ . Ak50fb) (>= . Ak50fa) (> . Ak50f9) (= . Ak50f8) (<= . Ak50f7) (< . Ak50f6) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (delay . Ak50bb) (do . Ak50b9) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (case . Ak50aa) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec . Ak50a2) (lambda . Ak509f) (quote . Ak509c) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (begin . Ak5096) (define-syntax . Ak5094) (define . Ak5093)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53ba '(psyntax modules) '() '() '() '() '((module . Ak5095)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53bb '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53bc '(rnrs) '(6) '() '() '() '((regexp? . Ak53af) (string-upcase . Ak5310) (string-titlecase . Ak530f) (string-normalize-nfkd . Ak530e) (string-normalize-nfkc . Ak530d) (string-normalize-nfd . Ak530c) (string-normalize-nfc . Ak530b) (string-foldcase . Ak530a) (string-downcase . Ak5309) (string-ci>? . Ak5308) (string-ci>=? . Ak5307) (string-ci=? . Ak5306) (string-ci<? . Ak5305) (string-ci<=? . Ak5304) (char-whitespace? . Ak5303) (char-upper-case? . Ak5302) (char-title-case? . Ak5301) (char-numeric? . Ak5300) (char-lower-case? . Ak52ff) (char-general-category . Ak52fe) (char-upcase . Ak52fd) (char-titlecase . Ak52fc) (char-foldcase . Ak52fb) (char-downcase . Ak52fa) (char-ci>? . Ak52f9) (char-ci>=? . Ak52f8) (char-ci=? . Ak52f7) (char-ci<? . Ak52f6) (char-ci<=? . Ak52f5) (char-alphabetic? . Ak52f4) (make-variable-transformer . Ak2e74) (identifier? . Ak3129) (generate-temporaries . Ak3115) (free-identifier=? . Ak3117) (syntax->datum . Ak312d) (datum->syntax . Ak312b) (bound-identifier=? . Ak3119) (record-type-descriptor? . Ak52f3) (record-predicate . Ak52f2) (record-mutator . Ak52f1) (record-constructor . Ak52f0) (record-accessor . Ak52ef) (make-record-type-descriptor . Ak52ee) (make-record-constructor-descriptor . Ak52ed) (record? . Ak52ec) (record-type-uid . Ak52eb) (record-type-sealed? . Ak52ea) (record-type-parent . Ak52e9) (record-type-opaque? . Ak52e8) (record-type-name . Ak52e7) (record-type-generative? . Ak52e6) (record-type-field-names . Ak52e5) (record-rtd . Ak52e4) (record-field-mutable? . Ak52e3) (delete-file . Ak52e2) (file-exists? . Ak52e1) (vector-sort! . Ak52e0) (vector-sort . Ak52df) (list-sort . Ak52de) (symbol-hash . Ak52dd) (string-ci-hash . Ak52dc) (string-hash . Ak52db) (equal-hash . Ak52da) (hashtable-equivalence-function . Ak52d9) (make-hashtable . Ak52d8) (hashtable-hash-function . Ak52d7) (make-eqv-hashtable . Ak52d6) (make-eq-hashtable . Ak52d5) (hashtable? . Ak52d4) (hashtable-update! . Ak52d3) (hashtable-size . Ak52d2) (hashtable-set! . Ak52d1) (hashtable-ref . Ak52d0) (hashtable-mutable? . Ak52cf) (hashtable-keys . Ak52ce) (hashtable-entries . Ak52cd) (hashtable-delete! . Ak52cc) (hashtable-copy . Ak52cb) (hashtable-contains? . Ak52ca) (hashtable-clear! . Ak52c9) (call-with-output-file . Ak52c8) (call-with-input-file . Ak52c7) (write-char . Ak52c6) (write . Ak52c5) (with-output-to-file . Ak52c4) (with-input-from-file . Ak52c3) (read-char . Ak52c2) (read . Ak52c1) (peek-char . Ak52c0) (open-output-file . Ak52bf) (open-input-file . Ak52be) (newline . Ak52bd) (display . Ak52bc) (close-output-port . Ak52bb) (close-input-port . Ak52ba) (eof-object? . Ak52b9) (eof-object . Ak52b8) (current-error-port . Ak52b7) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (utf-8-codec . Ak52b2) (utf-16-codec . Ak52b1) (transcoder-error-handling-mode . Ak52b0) (transcoder-eol-style . Ak52af) (transcoder-codec . Ak52ae) (transcoded-port . Ak52ad) (textual-port? . Ak52ac) (string->bytevector . Ak52ab) (standard-output-port . Ak52aa) (standard-input-port . Ak52a9) (standard-error-port . Ak52a8) (set-port-position! . Ak52a7) (put-u8 . Ak52a6) (put-string . Ak52a5) (put-datum . Ak52a4) (put-char . Ak52a3) (put-bytevector . Ak52a2) (port? . Ak52a1) (port-transcoder . Ak52a0) (port-position . Ak529f) (port-has-set-port-position!? . Ak529e) (port-has-port-position? . Ak529d) (port-eof? . Ak529c) (output-port-buffer-mode . Ak529b) (open-string-output-port . Ak529a) (open-string-input-port . Ak5299) (open-file-output-port . Ak5298) (open-file-input/output-port . Ak5297) (open-file-input-port . Ak5296) (open-bytevector-output-port . Ak5295) (open-bytevector-input-port . Ak5294) (native-transcoder . Ak5293) (native-eol-style . Ak5292) (make-transcoder . Ak5291) (latin-1-codec . Ak5290) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (make-i/o-encoding-error . Ak4ddc) (make-i/o-decoding-error . Ak4dc5) (make-custom-textual-output-port . Ak528f) (make-custom-textual-input/output-port . Ak528e) (make-custom-textual-input-port . Ak528d) (make-custom-binary-output-port . Ak528c) (make-custom-binary-input/output-port . Ak528b) (make-custom-binary-input-port . Ak528a) (make-bytevector . Ak5289) (lookahead-u8 . Ak5288) (lookahead-char . Ak5287) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (i/o-encoding-error? . Ak4de0) (i/o-encoding-error-char . Ak4de2) (i/o-decoding-error? . Ak4dc7) (get-u8 . Ak5286) (get-string-n! . Ak5285) (get-string-n . Ak5284) (get-string-all . Ak5283) (get-line . Ak5282) (get-datum . Ak5281) (get-char . Ak5280) (get-bytevector-some . Ak527f) (get-bytevector-n! . Ak527e) (get-bytevector-n . Ak527d) (get-bytevector-all . Ak527c) (flush-output-port . Ak527b) (close-port . Ak527a) (exit . Ak5272) (command-line . Ak4f17) (remove . Ak526d) (remv . Ak526c) (remp . Ak526b) (remq . Ak526a) (partition . Ak5269) (memv . Ak5268) (memq . Ak5267) (memp . Ak5266) (member . Ak5265) (exists . Ak5264) (for-all . Ak5263) (fold-right . Ak5262) (fold-left . Ak5261) (find . Ak5260) (filter . Ak525f) (cons* . Ak525e) (assv . Ak525d) (assq . Ak525c) (assp . Ak525b) (assoc . Ak525a) (call-with-string-output-port . Ak5259) (call-with-port . Ak5258) (call-with-bytevector-output-port . Ak5257) (bytevector->string . Ak5256) (buffer-mode? . Ak5255) (binary-port? . Ak5254) (with-exception-handler . Ak5253) (raise-continuable . Ak5252) (raise . Ak5251) (make-enumeration . Ak5250) (enum-set=? . Ak524f) (enum-set-universe . Ak524e) (enum-set-union . Ak524d) (enum-set-subset? . Ak524c) (enum-set-projection . Ak524b) (enum-set-member? . Ak524a) (enum-set-intersection . Ak5249) (enum-set-indexer . Ak5248) (enum-set-difference . Ak5247) (enum-set-constructor . Ak5246) (enum-set-complement . Ak5245) (enum-set->list . Ak5244) (who-condition? . Ak4c57) (warning? . Ak4bcf) (violation? . Ak4c0e) (undefined-violation? . Ak4cce) (syntax-violation? . Ak4cb5) (syntax-violation-subform . Ak4cb9) (syntax-violation-form . Ak4cb7) (syntax-violation . Ak3127) (simple-conditions . Ak5243) (serious-condition? . Ak4be4) (non-continuable-violation? . Ak4c6e) (message-condition? . Ak4bb8) (make-who-condition . Ak4c53) (make-warning . Ak4bcd) (make-violation . Ak4c0c) (make-undefined-violation . Ak4ccc) (make-syntax-violation . Ak4caf) (make-serious-condition . Ak4be2) (make-non-continuable-violation . Ak4c6c) (make-message-condition . Ak4bb4) (make-lexical-violation . Ak4c96) (make-irritants-condition . Ak4c38) (make-implementation-restriction-violation . Ak4c81) (make-error . Ak4bf7) (make-assertion-violation . Ak4c21) (lexical-violation? . Ak4c98) (irritants-condition? . Ak4c3c) (implementation-restriction-violation? . Ak4c83) (error? . Ak4bf9) (condition-who . Ak4c59) (condition-predicate . Ak5242) (condition-message . Ak4bba) (condition-irritants . Ak4c3e) (condition-accessor . Ak5241) (condition . Ak5240) (assertion-violation? . Ak4c23) (condition? . Ak523f) (utf32->string . Ak523e) (utf16->string . Ak523d) (utf8->string . Ak523c) (uint-list->bytevector . Ak523b) (u8-list->bytevector . Ak523a) (string->utf8 . Ak5239) (string->utf32 . Ak5238) (string->utf16 . Ak5237) (sint-list->bytevector . Ak5236) (native-endianness . Ak5235) (bytevector? . Ak5234) (bytevector=? . Ak5233) (bytevector-uint-set! . Ak5232) (bytevector-uint-ref . Ak5231) (bytevector-u8-set! . Ak5230) (bytevector-u8-ref . Ak522f) (bytevector-u64-set! . Ak522e) (bytevector-u64-ref . Ak522d) (bytevector-u64-native-set! . Ak522c) (bytevector-u64-native-ref . Ak522b) (bytevector-u32-set! . Ak522a) (bytevector-u32-ref . Ak5229) (bytevector-u32-native-set! . Ak5228) (bytevector-u32-native-ref . Ak5227) (bytevector-u16-set! . Ak5226) (bytevector-u16-ref . Ak5225) (bytevector-u16-native-set! . Ak5224) (bytevector-u16-native-ref . Ak5223) (bytevector-sint-set! . Ak5222) (bytevector-sint-ref . Ak5221) (bytevector-s8-set! . Ak5220) (bytevector-s8-ref . Ak521f) (bytevector-s64-set! . Ak521e) (bytevector-s64-ref . Ak521d) (bytevector-s64-native-set! . Ak521c) (bytevector-s64-native-ref . Ak521b) (bytevector-s32-set! . Ak521a) (bytevector-s32-ref . Ak5219) (bytevector-s32-native-set! . Ak5218) (bytevector-s32-native-ref . Ak5217) (bytevector-s16-set! . Ak5216) (bytevector-s16-ref . Ak5215) (bytevector-s16-native-set! . Ak5214) (bytevector-s16-native-ref . Ak5213) (bytevector-length . Ak5212) (bytevector-ieee-single-ref . Ak5211) (bytevector-ieee-single-set! . Ak5210) (bytevector-ieee-single-native-set! . Ak520f) (bytevector-ieee-single-native-ref . Ak520e) (bytevector-ieee-double-set! . Ak520d) (bytevector-ieee-double-ref . Ak520c) (bytevector-ieee-double-native-set! . Ak520b) (bytevector-ieee-double-native-ref . Ak520a) (bytevector-fill! . Ak5209) (bytevector-copy! . Ak5208) (bytevector-copy . Ak5207) (bytevector->uint-list . Ak5206) (bytevector->u8-list . Ak5205) (bytevector->sint-list . Ak5204) (no-nans-violation? . Ak4e0c) (no-infinities-violation? . Ak4df7) (make-no-nans-violation . Ak4e0a) (make-no-infinities-violation . Ak4df5) (real->flonum . Ak5203) (flzero? . Ak5202) (fltruncate . Ak5201) (fltan . Ak5200) (flsqrt . Ak51ff) (flsin . Ak51fe) (flround . Ak51fd) (flpositive? . Ak51fc) (flonum? . Ak51fb) (flodd? . Ak51fa) (flnumerator . Ak51f9) (flnegative? . Ak51f8) (flnan? . Ak51f7) (flmod0 . Ak51f6) (flmod . Ak51f5) (flmin . Ak51f4) (flmax . Ak51f3) (fllog . Ak51f2) (flinteger? . Ak51f1) (flinfinite? . Ak51f0) (flfloor . Ak51ef) (flfinite? . Ak51ee) (flexpt . Ak51ed) (flexp . Ak51ec) (fleven? . Ak51eb) (fldiv0-and-mod0 . Ak51ea) (fldiv0 . Ak51e9) (fldiv-and-mod . Ak51e8) (fldiv . Ak51e7) (fldenominator . Ak51e6) (flcos . Ak51e5) (flceiling . Ak51e4) (flatan . Ak51e3) (flasin . Ak51e2) (flacos . Ak51e1) (flabs . Ak51e0) (fl>? . Ak51df) (fl>=? . Ak51de) (fl=? . Ak51dd) (fl<? . Ak51dc) (fl<=? . Ak51db) (fl/ . Ak51da) (fl- . Ak51d9) (fl+ . Ak51d8) (fl* . Ak51d7) (fixnum->flonum . Ak51d6) (fxzero? . Ak51d5) (fxxor . Ak51d4) (fxrotate-bit-field . Ak51d3) (fxreverse-bit-field . Ak51d2) (fxpositive? . Ak51d1) (fxodd? . Ak51d0) (fxnot . Ak51cf) (fxnegative? . Ak51ce) (fxmod0 . Ak51cd) (fxmod . Ak51cc) (fxmin . Ak51cb) (fxmax . Ak51ca) (fxlength . Ak51c9) (fxior . Ak51c8) (fxif . Ak51c7) (fxfirst-bit-set . Ak51c6) (fxeven? . Ak51c5) (fxdiv0-and-mod0 . Ak51c4) (fxdiv0 . Ak51c3) (fxdiv-and-mod . Ak51c2) (fxdiv . Ak51c1) (fxcopy-bit-field . Ak51c0) (fxcopy-bit . Ak51bf) (fxbit-set? . Ak51be) (fxbit-field . Ak51bd) (fxbit-count . Ak51bc) (fxarithmetic-shift-right . Ak51bb) (fxarithmetic-shift-left . Ak51ba) (fxarithmetic-shift . Ak51b9) (fxand . Ak51b8) (fx>? . Ak51b7) (fx>=? . Ak51b6) (fx=? . Ak51b5) (fx<? . Ak51b4) (fx<=? . Ak51b3) (fx-/carry . Ak51b2) (fx- . Ak51b1) (fx+/carry . Ak51b0) (fx+ . Ak51af) (fx*/carry . Ak51ae) (fx* . Ak51ad) (greatest-fixnum . Ak51ac) (least-fixnum . Ak51ab) (fixnum-width . Ak51aa) (fixnum? . Ak51a9) (bitwise-rotate-bit-field . Ak51a8) (bitwise-reverse-bit-field . Ak51a7) (bitwise-length . Ak51a6) (bitwise-if . Ak51a5) (bitwise-first-bit-set . Ak51a4) (bitwise-copy-bit-field . Ak51a3) (bitwise-copy-bit . Ak51a2) (bitwise-bit-set? . Ak51a1) (bitwise-bit-field . Ak51a0) (bitwise-bit-count . Ak519f) (bitwise-xor . Ak519e) (bitwise-ior . Ak519d) (bitwise-and . Ak519c) (bitwise-not . Ak519b) (bitwise-arithmetic-shift-right . Ak519a) (bitwise-arithmetic-shift-left . Ak5199) (bitwise-arithmetic-shift . Ak5198) (zero? . Ak5197) (vector? . Ak5196) (vector-set! . Ak5195) (vector-ref . Ak5194) (vector-map . Ak5193) (vector-length . Ak5192) (vector-for-each . Ak5191) (vector-fill! . Ak5190) (vector->list . Ak518f) (vector . Ak518e) (values . Ak518d) (truncate . Ak518c) (tan . Ak518b) (symbol? . Ak518a) (symbol=? . Ak5189) (symbol->string . Ak5188) (substring . Ak5187) (string? . Ak5186) (string>? . Ak5185) (string>=? . Ak5184) (string=? . Ak5183) (string<? . Ak5182) (string<=? . Ak5181) (string-ref . Ak5180) (string-length . Ak517f) (string-for-each . Ak517e) (string-copy . Ak517d) (string-append . Ak517c) (string->symbol . Ak517b) (string->number . Ak517a) (string->list . Ak5179) (string . Ak5178) (sqrt . Ak5177) (sin . Ak5176) (round . Ak5175) (reverse . Ak5174) (real? . Ak5173) (real-valued? . Ak5172) (real-part . Ak5171) (rationalize . Ak5170) (rational? . Ak516f) (rational-valued? . Ak516e) (procedure? . Ak516d) (positive? . Ak516c) (pair? . Ak516b) (odd? . Ak516a) (numerator . Ak5169) (number? . Ak5168) (number->string . Ak5167) (null? . Ak5166) (not . Ak5165) (negative? . Ak5164) (nan? . Ak5163) (min . Ak5162) (max . Ak5161) (map . Ak5160) (make-vector . Ak515f) (make-string . Ak515e) (make-rectangular . Ak515d) (make-polar . Ak515c) (magnitude . Ak515b) (log . Ak515a) (list? . Ak5159) (list-tail . Ak5158) (list-ref . Ak5157) (list->vector . Ak5156) (list->string . Ak5155) (list . Ak5154) (length . Ak5153) (lcm . Ak5152) (integer? . Ak5151) (integer-valued? . Ak5150) (integer->char . Ak514f) (infinite? . Ak514e) (inexact? . Ak514d) (inexact . Ak514c) (imag-part . Ak514b) (gcd . Ak514a) (for-each . Ak5149) (floor . Ak5148) (finite? . Ak5147) (expt . Ak5146) (exp . Ak5145) (exact? . Ak5144) (exact-integer-sqrt . Ak5143) (exact . Ak5142) (even? . Ak5141) (error . Ak5140) (eqv? . Ak513f) (equal? . Ak513e) (eq? . Ak513d) (dynamic-wind . Ak513c) (div0-and-mod0 . Ak513b) (mod0 . Ak513a) (div0 . Ak5139) (div-and-mod . Ak5138) (mod . Ak5137) (div . Ak5136) (denominator . Ak5135) (cos . Ak5134) (cons . Ak5133) (complex? . Ak5132) (char? . Ak5131) (char>? . Ak5130) (char>=? . Ak512f) (char=? . Ak512e) (char<? . Ak512d) (char<=? . Ak512c) (char->integer . Ak512b) (ceiling . Ak512a) (call-with-values . Ak5129) (call/cc . Ak5128) (call-with-current-continuation . Ak5127) (cddddr . Ak5126) (cdddar . Ak5125) (cddadr . Ak5124) (cddaar . Ak5123) (cdaddr . Ak5122) (cdadar . Ak5121) (cdaadr . Ak5120) (cdaaar . Ak511f) (cadddr . Ak511e) (caddar . Ak511d) (cadadr . Ak511c) (cadaar . Ak511b) (caaddr . Ak511a) (caadar . Ak5119) (caaadr . Ak5118) (caaaar . Ak5117) (cdddr . Ak5116) (cddar . Ak5115) (cdadr . Ak5114) (cdaar . Ak5113) (caddr . Ak5112) (cadar . Ak5111) (caadr . Ak5110) (caaar . Ak510f) (cddr . Ak510e) (cdar . Ak510d) (cadr . Ak510c) (caar . Ak510b) (cdr . Ak510a) (car . Ak5109) (boolean? . Ak5108) (boolean=? . Ak5107) (atan . Ak5106) (assertion-violation . Ak5105) (asin . Ak5104) (apply . Ak5103) (append . Ak5102) (angle . Ak5101) (acos . Ak5100) (abs . Ak50ff) (/ . Ak50fe) (* . Ak50fd) (- . Ak50fc) (+ . Ak50fb) (>= . Ak50fa) (> . Ak50f9) (= . Ak50f8) (<= . Ak50f7) (< . Ak50f6) (&no-nans . Ak50f4) (&no-infinities . Ak50f3) (&i/o-encoding . Ak50f2) (&i/o-decoding . Ak50f1) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7) (&undefined . Ak50e6) (&syntax . Ak50e5) (&lexical . Ak50e4) (&implementation-restriction . Ak50e3) (&non-continuable . Ak50e2) (&who . Ak50e1) (&irritants . Ak50e0) (&assertion . Ak50df) (&violation . Ak50de) (&error . Ak50dd) (&serious . Ak50dc) (&warning . Ak50db) (&message . Ak50da) (&condition . Ak50d9) (define-condition-type . Ak50d8) (define-enumeration . Ak50d7) (define-record-type . Ak50d6) (parent-rtd . Ak50d5) (nongenerative . Ak50d4) (opaque . Ak50d3) (sealed . Ak50d2) (protocol . Ak50d1) (parent . Ak50d0) (immutable . Ak50cf) (mutable . Ak50ce) (fields . Ak50cd) (error-handling-mode . Ak50cc) (file-options . Ak50cb) (buffer-mode . Ak50ca) (eol-style . Ak50c9) (guard . Ak50c8) (unsyntax-splicing . Ak50c5) (unsyntax . Ak50c4) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (_ . Ak50c1) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (assert . Ak50bd) (endianness . Ak50bc) (do . Ak50b9) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (let*-values . Ak50b5) (let-values . Ak50b4) (identifier-syntax . Ak50b3) (with-syntax . Ak50b2) (quasisyntax . Ak50b1) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (record-constructor-descriptor . Ak50ac) (record-type-descriptor . Ak50ab) (case . Ak50aa) (unless . Ak50a8) (when . Ak50a7) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec* . Ak50a3) (letrec . Ak50a2) (case-lambda . Ak50a0) (lambda . Ak509f) (syntax . Ak509e) (syntax-case . Ak509d) (quote . Ak509c) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (begin . Ak5096) (define-syntax . Ak5094) (define . Ak5093)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53bd '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . Ak3103) (quotient . Ak5279) (null-environment . Ak3101) (remainder . Ak5278) (modulo . Ak5277) (inexact->exact . Ak5276) (force . Ak5275) (exact->inexact . Ak5274) (make-promise . Ak5273) (delay . Ak50bb)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53be '(rnrs control) '(6) '() '() '() '((do . Ak50b9) (unless . Ak50a8) (when . Ak50a7) (case-lambda . Ak50a0)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53bf '(rnrs eval) '(6) '() '() '() '((eval . Ak3107) (environment . Ak30ff)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . Ak526f) (set-car! . Ak526e)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . Ak5271) (string-set! . Ak5270)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c2 '(rnrs programs) '(6) '() '() '() '((exit . Ak5272) (command-line . Ak4f17)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . Ak2e74) (identifier? . Ak3129) (generate-temporaries . Ak3115) (free-identifier=? . Ak3117) (syntax->datum . Ak312d) (datum->syntax . Ak312b) (bound-identifier=? . Ak3119) (syntax-violation . Ak3127) (unsyntax-splicing . Ak50c5) (unsyntax . Ak50c4) (_ . Ak50c1) (... . Ak50be) (with-syntax . Ak50b2) (quasisyntax . Ak50b1) (syntax . Ak509e) (syntax-case . Ak509d)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c4 '(rnrs files) '(6) '() '() '() '((delete-file . Ak52e2) (file-exists? . Ak52e1) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . Ak52e0) (vector-sort . Ak52df) (list-sort . Ak52de)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c6 '(rnrs base) '(6) '() '() '() '((zero? . Ak5197) (vector? . Ak5196) (vector-set! . Ak5195) (vector-ref . Ak5194) (vector-map . Ak5193) (vector-length . Ak5192) (vector-for-each . Ak5191) (vector-fill! . Ak5190) (vector->list . Ak518f) (vector . Ak518e) (values . Ak518d) (truncate . Ak518c) (tan . Ak518b) (symbol? . Ak518a) (symbol=? . Ak5189) (symbol->string . Ak5188) (substring . Ak5187) (string? . Ak5186) (string>? . Ak5185) (string>=? . Ak5184) (string=? . Ak5183) (string<? . Ak5182) (string<=? . Ak5181) (string-ref . Ak5180) (string-length . Ak517f) (string-for-each . Ak517e) (string-copy . Ak517d) (string-append . Ak517c) (string->symbol . Ak517b) (string->number . Ak517a) (string->list . Ak5179) (string . Ak5178) (sqrt . Ak5177) (sin . Ak5176) (round . Ak5175) (reverse . Ak5174) (real? . Ak5173) (real-valued? . Ak5172) (real-part . Ak5171) (rationalize . Ak5170) (rational? . Ak516f) (rational-valued? . Ak516e) (procedure? . Ak516d) (positive? . Ak516c) (pair? . Ak516b) (odd? . Ak516a) (numerator . Ak5169) (number? . Ak5168) (number->string . Ak5167) (null? . Ak5166) (not . Ak5165) (negative? . Ak5164) (nan? . Ak5163) (min . Ak5162) (max . Ak5161) (map . Ak5160) (make-vector . Ak515f) (make-string . Ak515e) (make-rectangular . Ak515d) (make-polar . Ak515c) (magnitude . Ak515b) (log . Ak515a) (list? . Ak5159) (list-tail . Ak5158) (list-ref . Ak5157) (list->vector . Ak5156) (list->string . Ak5155) (list . Ak5154) (length . Ak5153) (lcm . Ak5152) (integer? . Ak5151) (integer-valued? . Ak5150) (integer->char . Ak514f) (infinite? . Ak514e) (inexact? . Ak514d) (inexact . Ak514c) (imag-part . Ak514b) (gcd . Ak514a) (for-each . Ak5149) (floor . Ak5148) (finite? . Ak5147) (expt . Ak5146) (exp . Ak5145) (exact? . Ak5144) (exact-integer-sqrt . Ak5143) (exact . Ak5142) (even? . Ak5141) (error . Ak5140) (eqv? . Ak513f) (equal? . Ak513e) (eq? . Ak513d) (dynamic-wind . Ak513c) (div0-and-mod0 . Ak513b) (mod0 . Ak513a) (div0 . Ak5139) (div-and-mod . Ak5138) (mod . Ak5137) (div . Ak5136) (denominator . Ak5135) (cos . Ak5134) (cons . Ak5133) (complex? . Ak5132) (char? . Ak5131) (char>? . Ak5130) (char>=? . Ak512f) (char=? . Ak512e) (char<? . Ak512d) (char<=? . Ak512c) (char->integer . Ak512b) (ceiling . Ak512a) (call-with-values . Ak5129) (call/cc . Ak5128) (call-with-current-continuation . Ak5127) (cddddr . Ak5126) (cdddar . Ak5125) (cddadr . Ak5124) (cddaar . Ak5123) (cdaddr . Ak5122) (cdadar . Ak5121) (cdaadr . Ak5120) (cdaaar . Ak511f) (cadddr . Ak511e) (caddar . Ak511d) (cadadr . Ak511c) (cadaar . Ak511b) (caaddr . Ak511a) (caadar . Ak5119) (caaadr . Ak5118) (caaaar . Ak5117) (cdddr . Ak5116) (cddar . Ak5115) (cdadr . Ak5114) (cdaar . Ak5113) (caddr . Ak5112) (cadar . Ak5111) (caadr . Ak5110) (caaar . Ak510f) (cddr . Ak510e) (cdar . Ak510d) (cadr . Ak510c) (caar . Ak510b) (cdr . Ak510a) (car . Ak5109) (boolean? . Ak5108) (boolean=? . Ak5107) (atan . Ak5106) (assertion-violation . Ak5105) (asin . Ak5104) (apply . Ak5103) (append . Ak5102) (angle . Ak5101) (acos . Ak5100) (abs . Ak50ff) (/ . Ak50fe) (* . Ak50fd) (- . Ak50fc) (+ . Ak50fb) (>= . Ak50fa) (> . Ak50f9) (= . Ak50f8) (<= . Ak50f7) (< . Ak50f6) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (_ . Ak50c1) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (assert . Ak50bd) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (let*-values . Ak50b5) (let-values . Ak50b4) (identifier-syntax . Ak50b3) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (case . Ak50aa) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec* . Ak50a3) (letrec . Ak50a2) (lambda . Ak509f) (quote . Ak509c) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (begin . Ak5096) (define-syntax . Ak5094) (define . Ak5093)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c7 '(rnrs lists) '(6) '() '() '() '((remove . Ak526d) (remv . Ak526c) (remp . Ak526b) (remq . Ak526a) (partition . Ak5269) (memv . Ak5268) (memq . Ak5267) (memp . Ak5266) (member . Ak5265) (exists . Ak5264) (for-all . Ak5263) (fold-right . Ak5262) (fold-left . Ak5261) (find . Ak5260) (filter . Ak525f) (cons* . Ak525e) (assv . Ak525d) (assq . Ak525c) (assp . Ak525b) (assoc . Ak525a)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . Ak52c8) (call-with-input-file . Ak52c7) (write-char . Ak52c6) (write . Ak52c5) (with-output-to-file . Ak52c4) (with-input-from-file . Ak52c3) (read-char . Ak52c2) (read . Ak52c1) (peek-char . Ak52c0) (open-output-file . Ak52bf) (open-input-file . Ak52be) (newline . Ak52bd) (display . Ak52bc) (close-output-port . Ak52bb) (close-input-port . Ak52ba) (eof-object? . Ak52b9) (eof-object . Ak52b8) (current-error-port . Ak52b7) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53c9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . Ak5289) (utf32->string . Ak523e) (utf16->string . Ak523d) (utf8->string . Ak523c) (uint-list->bytevector . Ak523b) (u8-list->bytevector . Ak523a) (string->utf8 . Ak5239) (string->utf32 . Ak5238) (string->utf16 . Ak5237) (sint-list->bytevector . Ak5236) (native-endianness . Ak5235) (bytevector? . Ak5234) (bytevector=? . Ak5233) (bytevector-uint-set! . Ak5232) (bytevector-uint-ref . Ak5231) (bytevector-u8-set! . Ak5230) (bytevector-u8-ref . Ak522f) (bytevector-u64-set! . Ak522e) (bytevector-u64-ref . Ak522d) (bytevector-u64-native-set! . Ak522c) (bytevector-u64-native-ref . Ak522b) (bytevector-u32-set! . Ak522a) (bytevector-u32-ref . Ak5229) (bytevector-u32-native-set! . Ak5228) (bytevector-u32-native-ref . Ak5227) (bytevector-u16-set! . Ak5226) (bytevector-u16-ref . Ak5225) (bytevector-u16-native-set! . Ak5224) (bytevector-u16-native-ref . Ak5223) (bytevector-sint-set! . Ak5222) (bytevector-sint-ref . Ak5221) (bytevector-s8-set! . Ak5220) (bytevector-s8-ref . Ak521f) (bytevector-s64-set! . Ak521e) (bytevector-s64-ref . Ak521d) (bytevector-s64-native-set! . Ak521c) (bytevector-s64-native-ref . Ak521b) (bytevector-s32-set! . Ak521a) (bytevector-s32-ref . Ak5219) (bytevector-s32-native-set! . Ak5218) (bytevector-s32-native-ref . Ak5217) (bytevector-s16-set! . Ak5216) (bytevector-s16-ref . Ak5215) (bytevector-s16-native-set! . Ak5214) (bytevector-s16-native-ref . Ak5213) (bytevector-length . Ak5212) (bytevector-ieee-single-ref . Ak5211) (bytevector-ieee-single-set! . Ak5210) (bytevector-ieee-single-native-set! . Ak520f) (bytevector-ieee-single-native-ref . Ak520e) (bytevector-ieee-double-set! . Ak520d) (bytevector-ieee-double-ref . Ak520c) (bytevector-ieee-double-native-set! . Ak520b) (bytevector-ieee-double-native-ref . Ak520a) (bytevector-fill! . Ak5209) (bytevector-copy! . Ak5208) (bytevector-copy . Ak5207) (bytevector->uint-list . Ak5206) (bytevector->u8-list . Ak5205) (bytevector->sint-list . Ak5204) (endianness . Ak50bc)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53ca '(rnrs unicode) '(6) '() '() '() '((string-upcase . Ak5310) (string-titlecase . Ak530f) (string-normalize-nfkd . Ak530e) (string-normalize-nfkc . Ak530d) (string-normalize-nfd . Ak530c) (string-normalize-nfc . Ak530b) (string-foldcase . Ak530a) (string-downcase . Ak5309) (string-ci>? . Ak5308) (string-ci>=? . Ak5307) (string-ci=? . Ak5306) (string-ci<? . Ak5305) (string-ci<=? . Ak5304) (char-whitespace? . Ak5303) (char-upper-case? . Ak5302) (char-title-case? . Ak5301) (char-numeric? . Ak5300) (char-lower-case? . Ak52ff) (char-general-category . Ak52fe) (char-upcase . Ak52fd) (char-titlecase . Ak52fc) (char-foldcase . Ak52fb) (char-downcase . Ak52fa) (char-ci>? . Ak52f9) (char-ci>=? . Ak52f8) (char-ci=? . Ak52f7) (char-ci<? . Ak52f6) (char-ci<=? . Ak52f5) (char-alphabetic? . Ak52f4)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53cb '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . Ak5253) (raise-continuable . Ak5252) (raise . Ak5251) (guard . Ak50c8) (else . Ak50c0) (=> . Ak50bf)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53cc '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . Ak51a8) (bitwise-reverse-bit-field . Ak51a7) (bitwise-length . Ak51a6) (bitwise-if . Ak51a5) (bitwise-first-bit-set . Ak51a4) (bitwise-copy-bit-field . Ak51a3) (bitwise-copy-bit . Ak51a2) (bitwise-bit-set? . Ak51a1) (bitwise-bit-field . Ak51a0) (bitwise-bit-count . Ak519f) (bitwise-xor . Ak519e) (bitwise-ior . Ak519d) (bitwise-and . Ak519c) (bitwise-not . Ak519b) (bitwise-arithmetic-shift-right . Ak519a) (bitwise-arithmetic-shift-left . Ak5199) (bitwise-arithmetic-shift . Ak5198)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53cd '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . Ak51d5) (fxxor . Ak51d4) (fxrotate-bit-field . Ak51d3) (fxreverse-bit-field . Ak51d2) (fxpositive? . Ak51d1) (fxodd? . Ak51d0) (fxnot . Ak51cf) (fxnegative? . Ak51ce) (fxmod0 . Ak51cd) (fxmod . Ak51cc) (fxmin . Ak51cb) (fxmax . Ak51ca) (fxlength . Ak51c9) (fxior . Ak51c8) (fxif . Ak51c7) (fxfirst-bit-set . Ak51c6) (fxeven? . Ak51c5) (fxdiv0-and-mod0 . Ak51c4) (fxdiv0 . Ak51c3) (fxdiv-and-mod . Ak51c2) (fxdiv . Ak51c1) (fxcopy-bit-field . Ak51c0) (fxcopy-bit . Ak51bf) (fxbit-set? . Ak51be) (fxbit-field . Ak51bd) (fxbit-count . Ak51bc) (fxarithmetic-shift-right . Ak51bb) (fxarithmetic-shift-left . Ak51ba) (fxarithmetic-shift . Ak51b9) (fxand . Ak51b8) (fx>? . Ak51b7) (fx>=? . Ak51b6) (fx=? . Ak51b5) (fx<? . Ak51b4) (fx<=? . Ak51b3) (fx-/carry . Ak51b2) (fx- . Ak51b1) (fx+/carry . Ak51b0) (fx+ . Ak51af) (fx*/carry . Ak51ae) (fx* . Ak51ad) (greatest-fixnum . Ak51ac) (least-fixnum . Ak51ab) (fixnum-width . Ak51aa) (fixnum? . Ak51a9)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53ce '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . Ak4e0c) (no-infinities-violation? . Ak4df7) (make-no-nans-violation . Ak4e0a) (make-no-infinities-violation . Ak4df5) (real->flonum . Ak5203) (flzero? . Ak5202) (fltruncate . Ak5201) (fltan . Ak5200) (flsqrt . Ak51ff) (flsin . Ak51fe) (flround . Ak51fd) (flpositive? . Ak51fc) (flonum? . Ak51fb) (flodd? . Ak51fa) (flnumerator . Ak51f9) (flnegative? . Ak51f8) (flnan? . Ak51f7) (flmod0 . Ak51f6) (flmod . Ak51f5) (flmin . Ak51f4) (flmax . Ak51f3) (fllog . Ak51f2) (flinteger? . Ak51f1) (flinfinite? . Ak51f0) (flfloor . Ak51ef) (flfinite? . Ak51ee) (flexpt . Ak51ed) (flexp . Ak51ec) (fleven? . Ak51eb) (fldiv0-and-mod0 . Ak51ea) (fldiv0 . Ak51e9) (fldiv-and-mod . Ak51e8) (fldiv . Ak51e7) (fldenominator . Ak51e6) (flcos . Ak51e5) (flceiling . Ak51e4) (flatan . Ak51e3) (flasin . Ak51e2) (flacos . Ak51e1) (flabs . Ak51e0) (fl>? . Ak51df) (fl>=? . Ak51de) (fl=? . Ak51dd) (fl<? . Ak51dc) (fl<=? . Ak51db) (fl/ . Ak51da) (fl- . Ak51d9) (fl+ . Ak51d8) (fl* . Ak51d7) (fixnum->flonum . Ak51d6) (&no-nans . Ak50f4) (&no-infinities . Ak50f3)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53cf '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . Ak52dd) (string-ci-hash . Ak52dc) (string-hash . Ak52db) (equal-hash . Ak52da) (hashtable-equivalence-function . Ak52d9) (make-hashtable . Ak52d8) (hashtable-hash-function . Ak52d7) (make-eqv-hashtable . Ak52d6) (make-eq-hashtable . Ak52d5) (hashtable? . Ak52d4) (hashtable-update! . Ak52d3) (hashtable-size . Ak52d2) (hashtable-set! . Ak52d1) (hashtable-ref . Ak52d0) (hashtable-mutable? . Ak52cf) (hashtable-keys . Ak52ce) (hashtable-entries . Ak52cd) (hashtable-delete! . Ak52cc) (hashtable-copy . Ak52cb) (hashtable-contains? . Ak52ca) (hashtable-clear! . Ak52c9)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . Ak52b9) (eof-object . Ak52b8) (current-error-port . Ak52b7) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (utf-8-codec . Ak52b2) (utf-16-codec . Ak52b1) (transcoder-error-handling-mode . Ak52b0) (transcoder-eol-style . Ak52af) (transcoder-codec . Ak52ae) (transcoded-port . Ak52ad) (textual-port? . Ak52ac) (string->bytevector . Ak52ab) (standard-output-port . Ak52aa) (standard-input-port . Ak52a9) (standard-error-port . Ak52a8) (set-port-position! . Ak52a7) (put-u8 . Ak52a6) (put-string . Ak52a5) (put-datum . Ak52a4) (put-char . Ak52a3) (put-bytevector . Ak52a2) (port? . Ak52a1) (port-transcoder . Ak52a0) (port-position . Ak529f) (port-has-set-port-position!? . Ak529e) (port-has-port-position? . Ak529d) (port-eof? . Ak529c) (output-port-buffer-mode . Ak529b) (open-string-output-port . Ak529a) (open-string-input-port . Ak5299) (open-file-output-port . Ak5298) (open-file-input/output-port . Ak5297) (open-file-input-port . Ak5296) (open-bytevector-output-port . Ak5295) (open-bytevector-input-port . Ak5294) (native-transcoder . Ak5293) (native-eol-style . Ak5292) (make-transcoder . Ak5291) (latin-1-codec . Ak5290) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (make-i/o-encoding-error . Ak4ddc) (make-i/o-decoding-error . Ak4dc5) (make-custom-textual-output-port . Ak528f) (make-custom-textual-input/output-port . Ak528e) (make-custom-textual-input-port . Ak528d) (make-custom-binary-output-port . Ak528c) (make-custom-binary-input/output-port . Ak528b) (make-custom-binary-input-port . Ak528a) (lookahead-u8 . Ak5288) (lookahead-char . Ak5287) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (i/o-encoding-error? . Ak4de0) (i/o-encoding-error-char . Ak4de2) (i/o-decoding-error? . Ak4dc7) (get-u8 . Ak5286) (get-string-n! . Ak5285) (get-string-n . Ak5284) (get-string-all . Ak5283) (get-line . Ak5282) (get-datum . Ak5281) (get-char . Ak5280) (get-bytevector-some . Ak527f) (get-bytevector-n! . Ak527e) (get-bytevector-n . Ak527d) (get-bytevector-all . Ak527c) (flush-output-port . Ak527b) (close-port . Ak527a) (call-with-string-output-port . Ak5259) (call-with-port . Ak5258) (call-with-bytevector-output-port . Ak5257) (bytevector->string . Ak5256) (buffer-mode? . Ak5255) (binary-port? . Ak5254) (&i/o-encoding . Ak50f2) (&i/o-decoding . Ak50f1) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7) (error-handling-mode . Ak50cc) (file-options . Ak50cb) (buffer-mode . Ak50ca) (eol-style . Ak50c9)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . Ak5250) (enum-set=? . Ak524f) (enum-set-universe . Ak524e) (enum-set-union . Ak524d) (enum-set-subset? . Ak524c) (enum-set-projection . Ak524b) (enum-set-member? . Ak524a) (enum-set-intersection . Ak5249) (enum-set-indexer . Ak5248) (enum-set-difference . Ak5247) (enum-set-constructor . Ak5246) (enum-set-complement . Ak5245) (enum-set->list . Ak5244) (define-enumeration . Ak50d7)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . Ak4c57) (warning? . Ak4bcf) (violation? . Ak4c0e) (undefined-violation? . Ak4cce) (syntax-violation? . Ak4cb5) (syntax-violation-subform . Ak4cb9) (syntax-violation-form . Ak4cb7) (syntax-violation . Ak3127) (simple-conditions . Ak5243) (serious-condition? . Ak4be4) (non-continuable-violation? . Ak4c6e) (message-condition? . Ak4bb8) (make-who-condition . Ak4c53) (make-warning . Ak4bcd) (make-violation . Ak4c0c) (make-undefined-violation . Ak4ccc) (make-syntax-violation . Ak4caf) (make-serious-condition . Ak4be2) (make-non-continuable-violation . Ak4c6c) (make-message-condition . Ak4bb4) (make-lexical-violation . Ak4c96) (make-irritants-condition . Ak4c38) (make-implementation-restriction-violation . Ak4c81) (make-error . Ak4bf7) (make-assertion-violation . Ak4c21) (lexical-violation? . Ak4c98) (irritants-condition? . Ak4c3c) (implementation-restriction-violation? . Ak4c83) (error? . Ak4bf9) (condition-who . Ak4c59) (condition-predicate . Ak5242) (condition-message . Ak4bba) (condition-irritants . Ak4c3e) (condition-accessor . Ak5241) (condition . Ak5240) (assertion-violation? . Ak4c23) (condition? . Ak523f) (&undefined . Ak50e6) (&syntax . Ak50e5) (&lexical . Ak50e4) (&implementation-restriction . Ak50e3) (&non-continuable . Ak50e2) (&who . Ak50e1) (&irritants . Ak50e0) (&assertion . Ak50df) (&violation . Ak50de) (&error . Ak50dd) (&serious . Ak50dc) (&warning . Ak50db) (&message . Ak50da) (&condition . Ak50d9) (define-condition-type . Ak50d8)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d3 '(rnrs records inspection) '(6) '() '() '() '((record? . Ak52ec) (record-type-uid . Ak52eb) (record-type-sealed? . Ak52ea) (record-type-parent . Ak52e9) (record-type-opaque? . Ak52e8) (record-type-name . Ak52e7) (record-type-generative? . Ak52e6) (record-type-field-names . Ak52e5) (record-rtd . Ak52e4) (record-field-mutable? . Ak52e3)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . Ak52f3) (record-predicate . Ak52f2) (record-mutator . Ak52f1) (record-constructor . Ak52f0) (record-accessor . Ak52ef) (make-record-type-descriptor . Ak52ee) (make-record-constructor-descriptor . Ak52ed)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . Ak50d6) (parent-rtd . Ak50d5) (nongenerative . Ak50d4) (opaque . Ak50d3) (sealed . Ak50d2) (protocol . Ak50d1) (parent . Ak50d0) (immutable . Ak50cf) (mutable . Ak50ce) (fields . Ak50cd) (record-constructor-descriptor . Ak50ac) (record-type-descriptor . Ak50ab)) '() values values '#f '#f '#t '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . Ak4e10) (&no-nans-rtd . Ak4e0e) (&no-infinities-rcd . Ak4dfb) (&no-infinities-rtd . Ak4df9) (&i/o-encoding-rcd . Ak4de6) (&i/o-encoding-rtd . Ak4de4) (&i/o-decoding-rcd . Ak4dcb) (&i/o-decoding-rtd . Ak4dc9) (&i/o-port-rcd . Ak4db6) (&i/o-port-rtd . Ak4db4) (&i/o-file-does-not-exist-rcd . Ak4d9b) (&i/o-file-does-not-exist-rtd . Ak4d99) (&i/o-file-already-exists-rcd . Ak4d86) (&i/o-file-already-exists-rtd . Ak4d84) (&i/o-file-is-read-only-rcd . Ak4d71) (&i/o-file-is-read-only-rtd . Ak4d6f) (&i/o-file-protection-rcd . Ak4d5c) (&i/o-file-protection-rtd . Ak4d5a) (&i/o-filename-rcd . Ak4d47) (&i/o-filename-rtd . Ak4d45) (&i/o-invalid-position-rcd . Ak4d2c) (&i/o-invalid-position-rtd . Ak4d2a) (&i/o-write-rcd . Ak4d11) (&i/o-write-rtd . Ak4d0f) (&i/o-read-rcd . Ak4cfc) (&i/o-read-rtd . Ak4cfa) (&i/o-rcd . Ak4ce7) (&i/o-rtd . Ak4ce5) (&undefined-rcd . Ak4cd2) (&undefined-rtd . Ak4cd0) (&syntax-rcd . Ak4cbd) (&syntax-rtd . Ak4cbb) (&lexical-rcd . Ak4c9c) (&lexical-rtd . Ak4c9a) (&implementation-restriction-rcd . Ak4c87) (&implementation-restriction-rtd . Ak4c85) (&non-continuable-rcd . Ak4c72) (&non-continuable-rtd . Ak4c70) (&who-rcd . Ak4c5d) (&who-rtd . Ak4c5b) (&irritants-rcd . Ak4c42) (&irritants-rtd . Ak4c40) (&assertion-rcd . Ak4c27) (&assertion-rtd . Ak4c25) (&violation-rcd . Ak4c12) (&violation-rtd . Ak4c10) (&error-rcd . Ak4bfd) (&error-rtd . Ak4bfb) (&serious-rcd . Ak4be8) (&serious-rtd . Ak4be6) (&warning-rcd . Ak4bd3) (&warning-rtd . Ak4bd1) (&message-rcd . Ak4bbe) (&message-rtd . Ak4bbc) (&condition-rcd . Ak4b5f) (&condition-rtd . Ak4b5d) (syntax-error . Ak3123) (syntax-dispatch . Ak3047) (pretty-print . Ak53b6) (eval-core . Ak53b5) (set-symbol-value! . Ak53b4) (symbol-value . Ak53b3) (gensym . Ak53b2) (void . Ak53b1) (load . Ak4f1d) (interaction-environment . Ak3133) (char-ready? . Ak53b0) (regexp? . Ak53af) (read-line . Ak53ae) (gensym-prefix-set! . Ak53ad) (ungensym . Ak53ac) (alist->eq-hash-table . Ak53ab) (assoc-ref . Ak53aa) (print . Ak53a9) (format . Ak53a8) (host-os . Ak53a7) (library-path . Ak2a97) (standard-library-path . Ak53a6) (file-newer? . Ak53a5) (stat-mtime . Ak53a4) (write-to-file . Ak53a3) (file->list . Ak53a2) (file->string . Ak53a1) (digit->integer . Ak53a0) (call-with-string-input-port . Ak539f) (call-with-string-io . Ak539e) (string-split . Ak539d) (bytevector-for-each . Ak539c) (string->regexp . Ak539b) (rxmatch . Ak539a) (regexp-replace-all . Ak5399) (hashtable-for-each . Ak5398) (call-process . Ak5397) (local-tz-offset . Ak5396) (microseconds . Ak5395) (directory-list . Ak5394) (set-current-directory! . Ak5393) (expand-path . Ak5392) (current-directory . Ak5391) (%spawn . Ak5390) (%waitpid . Ak538f) (simple-struct-name . Ak538e) (simple-struct-set! . Ak538d) (simple-struct-ref . Ak538c) (make-simple-struct . Ak538b) (simple-struct? . Ak538a) (pointer-ref-c-int64 . Ak5389) (pointer-ref-c-int32 . Ak5388) (pointer-ref-c-int16 . Ak5387) (pointer-ref-c-int8 . Ak5386) (pointer-ref-c-uint64 . Ak5385) (pointer-ref-c-uint32 . Ak5384) (pointer-ref-c-uint16 . Ak5383) (pointer-ref-c-uint8 . Ak5382) (pointer-set-c-uint64! . Ak5381) (pointer-set-c-uint32! . Ak5380) (pointer-set-c-uint16! . Ak537f) (pointer-set-c-uint8! . Ak537e) (pointer-set-c-int64! . Ak537d) (pointer-set-c-int32! . Ak537c) (pointer-set-c-int16! . Ak537b) (pointer-set-c-int8! . Ak537a) (pointer-set-c-pointer! . Ak5379) (pointer-set-c-double! . Ak5378) (pointer-set-c-float! . Ak5377) (pointer-set-c-long-long! . Ak5376) (pointer-set-c-long! . Ak5375) (pointer-set-c-int! . Ak5374) (pointer-set-c-short! . Ak5373) (pointer-set-c-char! . Ak5372) (pointer-ref-c-pointer . Ak5371) (pointer-ref-c-double . Ak5370) (pointer-ref-c-float . Ak536f) (pointer-ref-c-unsigned-long-long . Ak536e) (pointer-ref-c-signed-long-long . Ak536d) (pointer-ref-c-unsigned-long . Ak536c) (pointer-ref-c-signed-long . Ak536b) (pointer-ref-c-unsigned-int . Ak536a) (pointer-ref-c-signed-int . Ak5369) (pointer-ref-c-unsigned-short . Ak5368) (pointer-ref-c-signed-short . Ak5367) (pointer-ref-c-unsigned-char . Ak5366) (pointer-ref-c-signed-char . Ak5365) (pointer->integer . Ak5364) (integer->pointer . Ak5363) (pointer? . Ak5362) (shared-errno . Ak5361) (%ffi-supported? . Ak5360) (%ffi-pointer->string . Ak535f) (%ffi-call->string-or-zero . Ak535e) (%ffi-call->double . Ak535d) (%ffi-call->void* . Ak535c) (%ffi-call->void . Ak535b) (%ffi-call->char . Ak535a) (%ffi-call->int . Ak5359) (%ffi-lookup . Ak5358) (%ffi-open . Ak5357) (%fork . Ak5356) (%pipe . Ak5355) (p . Ak5354) (open-output-string . Ak5353) (get-output-string . Ak5352) (file-stat-ctime . Ak5351) (file-stat-atime . Ak5350) (file-stat-mtime . Ak534f) (file-size-in-bytes . Ak534e) (file-writable? . Ak534d) (file-executable? . Ak534c) (file-readable? . Ak534b) (file-regular? . Ak534a) (file-symbolic-link? . Ak5349) (file-directory? . Ak5348) (create-symbolic-link . Ak5347) (rename-file . Ak5346) (delete-directory . Ak5345) (create-directory . Ak5344) (create-mosh-cache-dir . Ak5343) (get-environment-variables . Ak5342) (get-environment-variable . Ak5341) (join-wraps . Ak5340) (id->real-label . Ak533f) (same-marks? . Ak533e) (same-marks*? . Ak533d) (get-timeofday . Ak533c) (get-command-line . Ak533b) (sys-display . Ak533a) (whereis . Ak5339) (register . Ak5338) (vm-join! . Ak5337) (vm-set-value! . Ak5336) (vm? . Ak5335) (main-vm? . Ak5334) (vm-eval . Ak5333) (vm-self . Ak5332) (vm-start! . Ak5331) (make-vm . Ak5330) (mutex-try-lock! . Ak532f) (mutex-unlock! . Ak532e) (mutex-lock! . Ak532d) (mutex? . Ak532c) (make-mutex . Ak532b) (condition-variable-notify-all! . Ak532a) (condition-variable-notify! . Ak5329) (condition-variable-wait! . Ak5328) (make-condition-variable . Ak5327) (mosh-executable-path . Ak5326) (make-file-options . Ak5325) (source-info . Ak5324) (make-compiler-instruction . Ak5323) (make-instruction . Ak5322) (set-source-info! . Ak5321) (bignum? . Ak5320) (fast-equal? . Ak531f) (fasl-read . Ak531e) (fasl-write . Ak531d) (time-usage . Ak531c) (os-constant . Ak531b) (make-parameter . Ak2880) (socket-port . Ak531a) (socket-shutdown . Ak5319) (socket-close . Ak5318) (socket-send . Ak5317) (socket-recv! . Ak5316) (socket-recv . Ak5315) (make-server-socket . Ak5314) (make-client-socket . Ak5313) (socket-accept . Ak5312) (socket? . Ak5311) (string-upcase . Ak5310) (string-titlecase . Ak530f) (string-normalize-nfkd . Ak530e) (string-normalize-nfkc . Ak530d) (string-normalize-nfd . Ak530c) (string-normalize-nfc . Ak530b) (string-foldcase . Ak530a) (string-downcase . Ak5309) (string-ci>? . Ak5308) (string-ci>=? . Ak5307) (string-ci=? . Ak5306) (string-ci<? . Ak5305) (string-ci<=? . Ak5304) (char-whitespace? . Ak5303) (char-upper-case? . Ak5302) (char-title-case? . Ak5301) (char-numeric? . Ak5300) (char-lower-case? . Ak52ff) (char-general-category . Ak52fe) (char-upcase . Ak52fd) (char-titlecase . Ak52fc) (char-foldcase . Ak52fb) (char-downcase . Ak52fa) (char-ci>? . Ak52f9) (char-ci>=? . Ak52f8) (char-ci=? . Ak52f7) (char-ci<? . Ak52f6) (char-ci<=? . Ak52f5) (char-alphabetic? . Ak52f4) (make-variable-transformer . Ak2e74) (identifier? . Ak3129) (generate-temporaries . Ak3115) (free-identifier=? . Ak3117) (syntax->datum . Ak312d) (datum->syntax . Ak312b) (bound-identifier=? . Ak3119) (record-type-descriptor? . Ak52f3) (record-predicate . Ak52f2) (record-mutator . Ak52f1) (record-constructor . Ak52f0) (record-accessor . Ak52ef) (make-record-type-descriptor . Ak52ee) (make-record-constructor-descriptor . Ak52ed) (record? . Ak52ec) (record-type-uid . Ak52eb) (record-type-sealed? . Ak52ea) (record-type-parent . Ak52e9) (record-type-opaque? . Ak52e8) (record-type-name . Ak52e7) (record-type-generative? . Ak52e6) (record-type-field-names . Ak52e5) (record-rtd . Ak52e4) (record-field-mutable? . Ak52e3) (delete-file . Ak52e2) (file-exists? . Ak52e1) (vector-sort! . Ak52e0) (vector-sort . Ak52df) (list-sort . Ak52de) (symbol-hash . Ak52dd) (string-ci-hash . Ak52dc) (string-hash . Ak52db) (equal-hash . Ak52da) (hashtable-equivalence-function . Ak52d9) (make-hashtable . Ak52d8) (hashtable-hash-function . Ak52d7) (make-eqv-hashtable . Ak52d6) (make-eq-hashtable . Ak52d5) (hashtable? . Ak52d4) (hashtable-update! . Ak52d3) (hashtable-size . Ak52d2) (hashtable-set! . Ak52d1) (hashtable-ref . Ak52d0) (hashtable-mutable? . Ak52cf) (hashtable-keys . Ak52ce) (hashtable-entries . Ak52cd) (hashtable-delete! . Ak52cc) (hashtable-copy . Ak52cb) (hashtable-contains? . Ak52ca) (hashtable-clear! . Ak52c9) (call-with-output-file . Ak52c8) (call-with-input-file . Ak52c7) (write-char . Ak52c6) (write . Ak52c5) (with-output-to-file . Ak52c4) (with-input-from-file . Ak52c3) (read-char . Ak52c2) (read . Ak52c1) (peek-char . Ak52c0) (open-output-file . Ak52bf) (open-input-file . Ak52be) (newline . Ak52bd) (display . Ak52bc) (close-output-port . Ak52bb) (close-input-port . Ak52ba) (eof-object? . Ak52b9) (eof-object . Ak52b8) (current-error-port . Ak52b7) (current-output-port . Ak52b6) (current-input-port . Ak52b5) (output-port? . Ak52b4) (input-port? . Ak52b3) (utf-8-codec . Ak52b2) (utf-16-codec . Ak52b1) (transcoder-error-handling-mode . Ak52b0) (transcoder-eol-style . Ak52af) (transcoder-codec . Ak52ae) (transcoded-port . Ak52ad) (textual-port? . Ak52ac) (string->bytevector . Ak52ab) (standard-output-port . Ak52aa) (standard-input-port . Ak52a9) (standard-error-port . Ak52a8) (set-port-position! . Ak52a7) (put-u8 . Ak52a6) (put-string . Ak52a5) (put-datum . Ak52a4) (put-char . Ak52a3) (put-bytevector . Ak52a2) (port? . Ak52a1) (port-transcoder . Ak52a0) (port-position . Ak529f) (port-has-set-port-position!? . Ak529e) (port-has-port-position? . Ak529d) (port-eof? . Ak529c) (output-port-buffer-mode . Ak529b) (open-string-output-port . Ak529a) (open-string-input-port . Ak5299) (open-file-output-port . Ak5298) (open-file-input/output-port . Ak5297) (open-file-input-port . Ak5296) (open-bytevector-output-port . Ak5295) (open-bytevector-input-port . Ak5294) (native-transcoder . Ak5293) (native-eol-style . Ak5292) (make-transcoder . Ak5291) (latin-1-codec . Ak5290) (make-i/o-write-error . Ak4d0b) (make-i/o-read-error . Ak4cf6) (make-i/o-port-error . Ak4dac) (make-i/o-invalid-position-error . Ak4d22) (make-i/o-filename-error . Ak4d3d) (make-i/o-file-protection-error . Ak4d56) (make-i/o-file-is-read-only-error . Ak4d6b) (make-i/o-file-does-not-exist-error . Ak4d95) (make-i/o-file-already-exists-error . Ak4d80) (make-i/o-error . Ak4ce1) (make-i/o-encoding-error . Ak4ddc) (make-i/o-decoding-error . Ak4dc5) (make-custom-textual-output-port . Ak528f) (make-custom-textual-input/output-port . Ak528e) (make-custom-textual-input-port . Ak528d) (make-custom-binary-output-port . Ak528c) (make-custom-binary-input/output-port . Ak528b) (make-custom-binary-input-port . Ak528a) (make-bytevector . Ak5289) (lookahead-u8 . Ak5288) (lookahead-char . Ak5287) (i/o-write-error? . Ak4d0d) (i/o-read-error? . Ak4cf8) (i/o-port-error? . Ak4db0) (i/o-invalid-position-error? . Ak4d26) (i/o-filename-error? . Ak4d41) (i/o-file-protection-error? . Ak4d58) (i/o-file-is-read-only-error? . Ak4d6d) (i/o-file-does-not-exist-error? . Ak4d97) (i/o-file-already-exists-error? . Ak4d82) (i/o-error? . Ak4ce3) (i/o-error-position . Ak4d28) (i/o-error-port . Ak4db2) (i/o-error-filename . Ak4d43) (i/o-encoding-error? . Ak4de0) (i/o-encoding-error-char . Ak4de2) (i/o-decoding-error? . Ak4dc7) (get-u8 . Ak5286) (get-string-n! . Ak5285) (get-string-n . Ak5284) (get-string-all . Ak5283) (get-line . Ak5282) (get-datum . Ak5281) (get-char . Ak5280) (get-bytevector-some . Ak527f) (get-bytevector-n! . Ak527e) (get-bytevector-n . Ak527d) (get-bytevector-all . Ak527c) (flush-output-port . Ak527b) (close-port . Ak527a) (scheme-report-environment . Ak3103) (quotient . Ak5279) (null-environment . Ak3101) (remainder . Ak5278) (modulo . Ak5277) (inexact->exact . Ak5276) (force . Ak5275) (exact->inexact . Ak5274) (make-promise . Ak5273) (exit . Ak5272) (command-line . Ak4f17) (string-fill! . Ak5271) (string-set! . Ak5270) (set-cdr! . Ak526f) (set-car! . Ak526e) (remove . Ak526d) (remv . Ak526c) (remp . Ak526b) (remq . Ak526a) (partition . Ak5269) (memv . Ak5268) (memq . Ak5267) (memp . Ak5266) (member . Ak5265) (exists . Ak5264) (for-all . Ak5263) (fold-right . Ak5262) (fold-left . Ak5261) (find . Ak5260) (filter . Ak525f) (cons* . Ak525e) (assv . Ak525d) (assq . Ak525c) (assp . Ak525b) (assoc . Ak525a) (call-with-string-output-port . Ak5259) (call-with-port . Ak5258) (call-with-bytevector-output-port . Ak5257) (bytevector->string . Ak5256) (buffer-mode? . Ak5255) (binary-port? . Ak5254) (with-exception-handler . Ak5253) (raise-continuable . Ak5252) (raise . Ak5251) (eval . Ak3107) (environment . Ak30ff) (make-enumeration . Ak5250) (enum-set=? . Ak524f) (enum-set-universe . Ak524e) (enum-set-union . Ak524d) (enum-set-subset? . Ak524c) (enum-set-projection . Ak524b) (enum-set-member? . Ak524a) (enum-set-intersection . Ak5249) (enum-set-indexer . Ak5248) (enum-set-difference . Ak5247) (enum-set-constructor . Ak5246) (enum-set-complement . Ak5245) (enum-set->list . Ak5244) (who-condition? . Ak4c57) (warning? . Ak4bcf) (violation? . Ak4c0e) (undefined-violation? . Ak4cce) (syntax-violation? . Ak4cb5) (syntax-violation-subform . Ak4cb9) (syntax-violation-form . Ak4cb7) (syntax-violation . Ak3127) (simple-conditions . Ak5243) (serious-condition? . Ak4be4) (non-continuable-violation? . Ak4c6e) (message-condition? . Ak4bb8) (make-who-condition . Ak4c53) (make-warning . Ak4bcd) (make-violation . Ak4c0c) (make-undefined-violation . Ak4ccc) (make-syntax-violation . Ak4caf) (make-serious-condition . Ak4be2) (make-non-continuable-violation . Ak4c6c) (make-message-condition . Ak4bb4) (make-lexical-violation . Ak4c96) (make-irritants-condition . Ak4c38) (make-implementation-restriction-violation . Ak4c81) (make-error . Ak4bf7) (make-assertion-violation . Ak4c21) (lexical-violation? . Ak4c98) (irritants-condition? . Ak4c3c) (implementation-restriction-violation? . Ak4c83) (error? . Ak4bf9) (condition-who . Ak4c59) (condition-predicate . Ak5242) (condition-message . Ak4bba) (condition-irritants . Ak4c3e) (condition-accessor . Ak5241) (condition . Ak5240) (assertion-violation? . Ak4c23) (condition? . Ak523f) (utf32->string . Ak523e) (utf16->string . Ak523d) (utf8->string . Ak523c) (uint-list->bytevector . Ak523b) (u8-list->bytevector . Ak523a) (string->utf8 . Ak5239) (string->utf32 . Ak5238) (string->utf16 . Ak5237) (sint-list->bytevector . Ak5236) (native-endianness . Ak5235) (bytevector? . Ak5234) (bytevector=? . Ak5233) (bytevector-uint-set! . Ak5232) (bytevector-uint-ref . Ak5231) (bytevector-u8-set! . Ak5230) (bytevector-u8-ref . Ak522f) (bytevector-u64-set! . Ak522e) (bytevector-u64-ref . Ak522d) (bytevector-u64-native-set! . Ak522c) (bytevector-u64-native-ref . Ak522b) (bytevector-u32-set! . Ak522a) (bytevector-u32-ref . Ak5229) (bytevector-u32-native-set! . Ak5228) (bytevector-u32-native-ref . Ak5227) (bytevector-u16-set! . Ak5226) (bytevector-u16-ref . Ak5225) (bytevector-u16-native-set! . Ak5224) (bytevector-u16-native-ref . Ak5223) (bytevector-sint-set! . Ak5222) (bytevector-sint-ref . Ak5221) (bytevector-s8-set! . Ak5220) (bytevector-s8-ref . Ak521f) (bytevector-s64-set! . Ak521e) (bytevector-s64-ref . Ak521d) (bytevector-s64-native-set! . Ak521c) (bytevector-s64-native-ref . Ak521b) (bytevector-s32-set! . Ak521a) (bytevector-s32-ref . Ak5219) (bytevector-s32-native-set! . Ak5218) (bytevector-s32-native-ref . Ak5217) (bytevector-s16-set! . Ak5216) (bytevector-s16-ref . Ak5215) (bytevector-s16-native-set! . Ak5214) (bytevector-s16-native-ref . Ak5213) (bytevector-length . Ak5212) (bytevector-ieee-single-ref . Ak5211) (bytevector-ieee-single-set! . Ak5210) (bytevector-ieee-single-native-set! . Ak520f) (bytevector-ieee-single-native-ref . Ak520e) (bytevector-ieee-double-set! . Ak520d) (bytevector-ieee-double-ref . Ak520c) (bytevector-ieee-double-native-set! . Ak520b) (bytevector-ieee-double-native-ref . Ak520a) (bytevector-fill! . Ak5209) (bytevector-copy! . Ak5208) (bytevector-copy . Ak5207) (bytevector->uint-list . Ak5206) (bytevector->u8-list . Ak5205) (bytevector->sint-list . Ak5204) (no-nans-violation? . Ak4e0c) (no-infinities-violation? . Ak4df7) (make-no-nans-violation . Ak4e0a) (make-no-infinities-violation . Ak4df5) (real->flonum . Ak5203) (flzero? . Ak5202) (fltruncate . Ak5201) (fltan . Ak5200) (flsqrt . Ak51ff) (flsin . Ak51fe) (flround . Ak51fd) (flpositive? . Ak51fc) (flonum? . Ak51fb) (flodd? . Ak51fa) (flnumerator . Ak51f9) (flnegative? . Ak51f8) (flnan? . Ak51f7) (flmod0 . Ak51f6) (flmod . Ak51f5) (flmin . Ak51f4) (flmax . Ak51f3) (fllog . Ak51f2) (flinteger? . Ak51f1) (flinfinite? . Ak51f0) (flfloor . Ak51ef) (flfinite? . Ak51ee) (flexpt . Ak51ed) (flexp . Ak51ec) (fleven? . Ak51eb) (fldiv0-and-mod0 . Ak51ea) (fldiv0 . Ak51e9) (fldiv-and-mod . Ak51e8) (fldiv . Ak51e7) (fldenominator . Ak51e6) (flcos . Ak51e5) (flceiling . Ak51e4) (flatan . Ak51e3) (flasin . Ak51e2) (flacos . Ak51e1) (flabs . Ak51e0) (fl>? . Ak51df) (fl>=? . Ak51de) (fl=? . Ak51dd) (fl<? . Ak51dc) (fl<=? . Ak51db) (fl/ . Ak51da) (fl- . Ak51d9) (fl+ . Ak51d8) (fl* . Ak51d7) (fixnum->flonum . Ak51d6) (fxzero? . Ak51d5) (fxxor . Ak51d4) (fxrotate-bit-field . Ak51d3) (fxreverse-bit-field . Ak51d2) (fxpositive? . Ak51d1) (fxodd? . Ak51d0) (fxnot . Ak51cf) (fxnegative? . Ak51ce) (fxmod0 . Ak51cd) (fxmod . Ak51cc) (fxmin . Ak51cb) (fxmax . Ak51ca) (fxlength . Ak51c9) (fxior . Ak51c8) (fxif . Ak51c7) (fxfirst-bit-set . Ak51c6) (fxeven? . Ak51c5) (fxdiv0-and-mod0 . Ak51c4) (fxdiv0 . Ak51c3) (fxdiv-and-mod . Ak51c2) (fxdiv . Ak51c1) (fxcopy-bit-field . Ak51c0) (fxcopy-bit . Ak51bf) (fxbit-set? . Ak51be) (fxbit-field . Ak51bd) (fxbit-count . Ak51bc) (fxarithmetic-shift-right . Ak51bb) (fxarithmetic-shift-left . Ak51ba) (fxarithmetic-shift . Ak51b9) (fxand . Ak51b8) (fx>? . Ak51b7) (fx>=? . Ak51b6) (fx=? . Ak51b5) (fx<? . Ak51b4) (fx<=? . Ak51b3) (fx-/carry . Ak51b2) (fx- . Ak51b1) (fx+/carry . Ak51b0) (fx+ . Ak51af) (fx*/carry . Ak51ae) (fx* . Ak51ad) (greatest-fixnum . Ak51ac) (least-fixnum . Ak51ab) (fixnum-width . Ak51aa) (fixnum? . Ak51a9) (bitwise-rotate-bit-field . Ak51a8) (bitwise-reverse-bit-field . Ak51a7) (bitwise-length . Ak51a6) (bitwise-if . Ak51a5) (bitwise-first-bit-set . Ak51a4) (bitwise-copy-bit-field . Ak51a3) (bitwise-copy-bit . Ak51a2) (bitwise-bit-set? . Ak51a1) (bitwise-bit-field . Ak51a0) (bitwise-bit-count . Ak519f) (bitwise-xor . Ak519e) (bitwise-ior . Ak519d) (bitwise-and . Ak519c) (bitwise-not . Ak519b) (bitwise-arithmetic-shift-right . Ak519a) (bitwise-arithmetic-shift-left . Ak5199) (bitwise-arithmetic-shift . Ak5198) (zero? . Ak5197) (vector? . Ak5196) (vector-set! . Ak5195) (vector-ref . Ak5194) (vector-map . Ak5193) (vector-length . Ak5192) (vector-for-each . Ak5191) (vector-fill! . Ak5190) (vector->list . Ak518f) (vector . Ak518e) (values . Ak518d) (truncate . Ak518c) (tan . Ak518b) (symbol? . Ak518a) (symbol=? . Ak5189) (symbol->string . Ak5188) (substring . Ak5187) (string? . Ak5186) (string>? . Ak5185) (string>=? . Ak5184) (string=? . Ak5183) (string<? . Ak5182) (string<=? . Ak5181) (string-ref . Ak5180) (string-length . Ak517f) (string-for-each . Ak517e) (string-copy . Ak517d) (string-append . Ak517c) (string->symbol . Ak517b) (string->number . Ak517a) (string->list . Ak5179) (string . Ak5178) (sqrt . Ak5177) (sin . Ak5176) (round . Ak5175) (reverse . Ak5174) (real? . Ak5173) (real-valued? . Ak5172) (real-part . Ak5171) (rationalize . Ak5170) (rational? . Ak516f) (rational-valued? . Ak516e) (procedure? . Ak516d) (positive? . Ak516c) (pair? . Ak516b) (odd? . Ak516a) (numerator . Ak5169) (number? . Ak5168) (number->string . Ak5167) (null? . Ak5166) (not . Ak5165) (negative? . Ak5164) (nan? . Ak5163) (min . Ak5162) (max . Ak5161) (map . Ak5160) (make-vector . Ak515f) (make-string . Ak515e) (make-rectangular . Ak515d) (make-polar . Ak515c) (magnitude . Ak515b) (log . Ak515a) (list? . Ak5159) (list-tail . Ak5158) (list-ref . Ak5157) (list->vector . Ak5156) (list->string . Ak5155) (list . Ak5154) (length . Ak5153) (lcm . Ak5152) (integer? . Ak5151) (integer-valued? . Ak5150) (integer->char . Ak514f) (infinite? . Ak514e) (inexact? . Ak514d) (inexact . Ak514c) (imag-part . Ak514b) (gcd . Ak514a) (for-each . Ak5149) (floor . Ak5148) (finite? . Ak5147) (expt . Ak5146) (exp . Ak5145) (exact? . Ak5144) (exact-integer-sqrt . Ak5143) (exact . Ak5142) (even? . Ak5141) (error . Ak5140) (eqv? . Ak513f) (equal? . Ak513e) (eq? . Ak513d) (dynamic-wind . Ak513c) (div0-and-mod0 . Ak513b) (mod0 . Ak513a) (div0 . Ak5139) (div-and-mod . Ak5138) (mod . Ak5137) (div . Ak5136) (denominator . Ak5135) (cos . Ak5134) (cons . Ak5133) (complex? . Ak5132) (char? . Ak5131) (char>? . Ak5130) (char>=? . Ak512f) (char=? . Ak512e) (char<? . Ak512d) (char<=? . Ak512c) (char->integer . Ak512b) (ceiling . Ak512a) (call-with-values . Ak5129) (call/cc . Ak5128) (call-with-current-continuation . Ak5127) (cddddr . Ak5126) (cdddar . Ak5125) (cddadr . Ak5124) (cddaar . Ak5123) (cdaddr . Ak5122) (cdadar . Ak5121) (cdaadr . Ak5120) (cdaaar . Ak511f) (cadddr . Ak511e) (caddar . Ak511d) (cadadr . Ak511c) (cadaar . Ak511b) (caaddr . Ak511a) (caadar . Ak5119) (caaadr . Ak5118) (caaaar . Ak5117) (cdddr . Ak5116) (cddar . Ak5115) (cdadr . Ak5114) (cdaar . Ak5113) (caddr . Ak5112) (cadar . Ak5111) (caadr . Ak5110) (caaar . Ak510f) (cddr . Ak510e) (cdar . Ak510d) (cadr . Ak510c) (caar . Ak510b) (cdr . Ak510a) (car . Ak5109) (boolean? . Ak5108) (boolean=? . Ak5107) (atan . Ak5106) (assertion-violation . Ak5105) (assertion-error . Ak3121) (asin . Ak5104) (apply . Ak5103) (append . Ak5102) (angle . Ak5101) (acos . Ak5100) (abs . Ak50ff) (/ . Ak50fe) (* . Ak50fd) (- . Ak50fc) (+ . Ak50fb) (>= . Ak50fa) (> . Ak50f9) (= . Ak50f8) (<= . Ak50f7) (< . Ak50f6) (library . Ak50f5) (&no-nans . Ak50f4) (&no-infinities . Ak50f3) (&i/o-encoding . Ak50f2) (&i/o-decoding . Ak50f1) (&i/o-port . Ak50f0) (&i/o-file-does-not-exist . Ak50ef) (&i/o-file-already-exists . Ak50ee) (&i/o-file-is-read-only . Ak50ed) (&i/o-file-protection . Ak50ec) (&i/o-filename . Ak50eb) (&i/o-invalid-position . Ak50ea) (&i/o-write . Ak50e9) (&i/o-read . Ak50e8) (&i/o . Ak50e7) (&undefined . Ak50e6) (&syntax . Ak50e5) (&lexical . Ak50e4) (&implementation-restriction . Ak50e3) (&non-continuable . Ak50e2) (&who . Ak50e1) (&irritants . Ak50e0) (&assertion . Ak50df) (&violation . Ak50de) (&error . Ak50dd) (&serious . Ak50dc) (&warning . Ak50db) (&message . Ak50da) (&condition . Ak50d9) (define-condition-type . Ak50d8) (define-enumeration . Ak50d7) (define-record-type . Ak50d6) (parent-rtd . Ak50d5) (nongenerative . Ak50d4) (opaque . Ak50d3) (sealed . Ak50d2) (protocol . Ak50d1) (parent . Ak50d0) (immutable . Ak50cf) (mutable . Ak50ce) (fields . Ak50cd) (error-handling-mode . Ak50cc) (file-options . Ak50cb) (buffer-mode . Ak50ca) (eol-style . Ak50c9) (guard . Ak50c8) (trace-define . Ak50c7) (trace-lambda . Ak50c6) (unsyntax-splicing . Ak50c5) (unsyntax . Ak50c4) (unquote-splicing . Ak50c3) (unquote . Ak50c2) (_ . Ak50c1) (else . Ak50c0) (=> . Ak50bf) (... . Ak50be) (assert . Ak50bd) (endianness . Ak50bc) (delay . Ak50bb) (time . Ak50ba) (do . Ak50b9) (cond . Ak50b8) (let* . Ak50b7) (let . Ak50b6) (let*-values . Ak50b5) (let-values . Ak50b4) (identifier-syntax . Ak50b3) (with-syntax . Ak50b2) (quasisyntax . Ak50b1) (quasiquote . Ak50b0) (syntax-rules . Ak50af) (include . Ak50ae) (define-struct . Ak50ad) (record-constructor-descriptor . Ak50ac) (record-type-descriptor . Ak50ab) (case . Ak50aa) (parameterize . Ak50a9) (unless . Ak50a8) (when . Ak50a7) (or . Ak50a6) (and . Ak50a5) (if . Ak50a4) (letrec* . Ak50a3) (letrec . Ak50a2) (type-descriptor . Ak50a1) (case-lambda . Ak50a0) (lambda . Ak509f) (syntax . Ak509e) (syntax-case . Ak509d) (quote . Ak509c) (foreign-call . Ak509b) (letrec-syntax . Ak509a) (let-syntax . Ak5099) (set! . Ak5098) (import . Ak5097) (begin . Ak5096) (module . Ak5095) (define-syntax . Ak5094) (define . Ak5093)) '((Ak4e10 core-prim . &no-nans-rcd) (Ak4e0e core-prim . &no-nans-rtd) (Ak4dfb core-prim . &no-infinities-rcd) (Ak4df9 core-prim . &no-infinities-rtd) (Ak4de6 core-prim . &i/o-encoding-rcd) (Ak4de4 core-prim . &i/o-encoding-rtd) (Ak4dcb core-prim . &i/o-decoding-rcd) (Ak4dc9 core-prim . &i/o-decoding-rtd) (Ak4db6 core-prim . &i/o-port-rcd) (Ak4db4 core-prim . &i/o-port-rtd) (Ak4d9b core-prim . &i/o-file-does-not-exist-rcd) (Ak4d99 core-prim . &i/o-file-does-not-exist-rtd) (Ak4d86 core-prim . &i/o-file-already-exists-rcd) (Ak4d84 core-prim . &i/o-file-already-exists-rtd) (Ak4d71 core-prim . &i/o-file-is-read-only-rcd) (Ak4d6f core-prim . &i/o-file-is-read-only-rtd) (Ak4d5c core-prim . &i/o-file-protection-rcd) (Ak4d5a core-prim . &i/o-file-protection-rtd) (Ak4d47 core-prim . &i/o-filename-rcd) (Ak4d45 core-prim . &i/o-filename-rtd) (Ak4d2c core-prim . &i/o-invalid-position-rcd) (Ak4d2a core-prim . &i/o-invalid-position-rtd) (Ak4d11 core-prim . &i/o-write-rcd) (Ak4d0f core-prim . &i/o-write-rtd) (Ak4cfc core-prim . &i/o-read-rcd) (Ak4cfa core-prim . &i/o-read-rtd) (Ak4ce7 core-prim . &i/o-rcd) (Ak4ce5 core-prim . &i/o-rtd) (Ak4cd2 core-prim . &undefined-rcd) (Ak4cd0 core-prim . &undefined-rtd) (Ak4cbd core-prim . &syntax-rcd) (Ak4cbb core-prim . &syntax-rtd) (Ak4c9c core-prim . &lexical-rcd) (Ak4c9a core-prim . &lexical-rtd) (Ak4c87 core-prim . &implementation-restriction-rcd) (Ak4c85 core-prim . &implementation-restriction-rtd) (Ak4c72 core-prim . &non-continuable-rcd) (Ak4c70 core-prim . &non-continuable-rtd) (Ak4c5d core-prim . &who-rcd) (Ak4c5b core-prim . &who-rtd) (Ak4c42 core-prim . &irritants-rcd) (Ak4c40 core-prim . &irritants-rtd) (Ak4c27 core-prim . &assertion-rcd) (Ak4c25 core-prim . &assertion-rtd) (Ak4c12 core-prim . &violation-rcd) (Ak4c10 core-prim . &violation-rtd) (Ak4bfd core-prim . &error-rcd) (Ak4bfb core-prim . &error-rtd) (Ak4be8 core-prim . &serious-rcd) (Ak4be6 core-prim . &serious-rtd) (Ak4bd3 core-prim . &warning-rcd) (Ak4bd1 core-prim . &warning-rtd) (Ak4bbe core-prim . &message-rcd) (Ak4bbc core-prim . &message-rtd) (Ak4b5f core-prim . &condition-rcd) (Ak4b5d core-prim . &condition-rtd) (Ak3123 core-prim . syntax-error) (Ak3047 core-prim . syntax-dispatch) (Ak53b6 core-prim . pretty-print) (Ak53b5 core-prim . eval-core) (Ak53b4 core-prim . set-symbol-value!) (Ak53b3 core-prim . symbol-value) (Ak53b2 core-prim . gensym) (Ak53b1 core-prim . void) (Ak4f1d core-prim . load) (Ak3133 core-prim . interaction-environment) (Ak53b0 core-prim . char-ready?) (Ak53af core-prim . regexp?) (Ak53ae core-prim . read-line) (Ak53ad core-prim . gensym-prefix-set!) (Ak53ac core-prim . ungensym) (Ak53ab core-prim . alist->eq-hash-table) (Ak53aa core-prim . assoc-ref) (Ak53a9 core-prim . print) (Ak53a8 core-prim . format) (Ak53a7 core-prim . host-os) (Ak2a97 core-prim . library-path) (Ak53a6 core-prim . standard-library-path) (Ak53a5 core-prim . file-newer?) (Ak53a4 core-prim . stat-mtime) (Ak53a3 core-prim . write-to-file) (Ak53a2 core-prim . file->list) (Ak53a1 core-prim . file->string) (Ak53a0 core-prim . digit->integer) (Ak539f core-prim . call-with-string-input-port) (Ak539e core-prim . call-with-string-io) (Ak539d core-prim . string-split) (Ak539c core-prim . bytevector-for-each) (Ak539b core-prim . string->regexp) (Ak539a core-prim . rxmatch) (Ak5399 core-prim . regexp-replace-all) (Ak5398 core-prim . hashtable-for-each) (Ak5397 core-prim . call-process) (Ak5396 core-prim . local-tz-offset) (Ak5395 core-prim . microseconds) (Ak5394 core-prim . directory-list) (Ak5393 core-prim . set-current-directory!) (Ak5392 core-prim . expand-path) (Ak5391 core-prim . current-directory) (Ak5390 core-prim . %spawn) (Ak538f core-prim . %waitpid) (Ak538e core-prim . simple-struct-name) (Ak538d core-prim . simple-struct-set!) (Ak538c core-prim . simple-struct-ref) (Ak538b core-prim . make-simple-struct) (Ak538a core-prim . simple-struct?) (Ak5389 core-prim . pointer-ref-c-int64) (Ak5388 core-prim . pointer-ref-c-int32) (Ak5387 core-prim . pointer-ref-c-int16) (Ak5386 core-prim . pointer-ref-c-int8) (Ak5385 core-prim . pointer-ref-c-uint64) (Ak5384 core-prim . pointer-ref-c-uint32) (Ak5383 core-prim . pointer-ref-c-uint16) (Ak5382 core-prim . pointer-ref-c-uint8) (Ak5381 core-prim . pointer-set-c-uint64!) (Ak5380 core-prim . pointer-set-c-uint32!) (Ak537f core-prim . pointer-set-c-uint16!) (Ak537e core-prim . pointer-set-c-uint8!) (Ak537d core-prim . pointer-set-c-int64!) (Ak537c core-prim . pointer-set-c-int32!) (Ak537b core-prim . pointer-set-c-int16!) (Ak537a core-prim . pointer-set-c-int8!) (Ak5379 core-prim . pointer-set-c-pointer!) (Ak5378 core-prim . pointer-set-c-double!) (Ak5377 core-prim . pointer-set-c-float!) (Ak5376 core-prim . pointer-set-c-long-long!) (Ak5375 core-prim . pointer-set-c-long!) (Ak5374 core-prim . pointer-set-c-int!) (Ak5373 core-prim . pointer-set-c-short!) (Ak5372 core-prim . pointer-set-c-char!) (Ak5371 core-prim . pointer-ref-c-pointer) (Ak5370 core-prim . pointer-ref-c-double) (Ak536f core-prim . pointer-ref-c-float) (Ak536e core-prim . pointer-ref-c-unsigned-long-long) (Ak536d core-prim . pointer-ref-c-signed-long-long) (Ak536c core-prim . pointer-ref-c-unsigned-long) (Ak536b core-prim . pointer-ref-c-signed-long) (Ak536a core-prim . pointer-ref-c-unsigned-int) (Ak5369 core-prim . pointer-ref-c-signed-int) (Ak5368 core-prim . pointer-ref-c-unsigned-short) (Ak5367 core-prim . pointer-ref-c-signed-short) (Ak5366 core-prim . pointer-ref-c-unsigned-char) (Ak5365 core-prim . pointer-ref-c-signed-char) (Ak5364 core-prim . pointer->integer) (Ak5363 core-prim . integer->pointer) (Ak5362 core-prim . pointer?) (Ak5361 core-prim . shared-errno) (Ak5360 core-prim . %ffi-supported?) (Ak535f core-prim . %ffi-pointer->string) (Ak535e core-prim . %ffi-call->string-or-zero) (Ak535d core-prim . %ffi-call->double) (Ak535c core-prim . %ffi-call->void*) (Ak535b core-prim . %ffi-call->void) (Ak535a core-prim . %ffi-call->char) (Ak5359 core-prim . %ffi-call->int) (Ak5358 core-prim . %ffi-lookup) (Ak5357 core-prim . %ffi-open) (Ak5356 core-prim . %fork) (Ak5355 core-prim . %pipe) (Ak5354 core-prim . p) (Ak5353 core-prim . open-output-string) (Ak5352 core-prim . get-output-string) (Ak5351 core-prim . file-stat-ctime) (Ak5350 core-prim . file-stat-atime) (Ak534f core-prim . file-stat-mtime) (Ak534e core-prim . file-size-in-bytes) (Ak534d core-prim . file-writable?) (Ak534c core-prim . file-executable?) (Ak534b core-prim . file-readable?) (Ak534a core-prim . file-regular?) (Ak5349 core-prim . file-symbolic-link?) (Ak5348 core-prim . file-directory?) (Ak5347 core-prim . create-symbolic-link) (Ak5346 core-prim . rename-file) (Ak5345 core-prim . delete-directory) (Ak5344 core-prim . create-directory) (Ak5343 core-prim . create-mosh-cache-dir) (Ak5342 core-prim . get-environment-variables) (Ak5341 core-prim . get-environment-variable) (Ak5340 core-prim . join-wraps) (Ak533f core-prim . id->real-label) (Ak533e core-prim . same-marks?) (Ak533d core-prim . same-marks*?) (Ak533c core-prim . get-timeofday) (Ak533b core-prim . get-command-line) (Ak533a core-prim . sys-display) (Ak5339 core-prim . whereis) (Ak5338 core-prim . register) (Ak5337 core-prim . vm-join!) (Ak5336 core-prim . vm-set-value!) (Ak5335 core-prim . vm?) (Ak5334 core-prim . main-vm?) (Ak5333 core-prim . vm-eval) (Ak5332 core-prim . vm-self) (Ak5331 core-prim . vm-start!) (Ak5330 core-prim . make-vm) (Ak532f core-prim . mutex-try-lock!) (Ak532e core-prim . mutex-unlock!) (Ak532d core-prim . mutex-lock!) (Ak532c core-prim . mutex?) (Ak532b core-prim . make-mutex) (Ak532a core-prim . condition-variable-notify-all!) (Ak5329 core-prim . condition-variable-notify!) (Ak5328 core-prim . condition-variable-wait!) (Ak5327 core-prim . make-condition-variable) (Ak5326 core-prim . mosh-executable-path) (Ak5325 core-prim . make-file-options) (Ak5324 core-prim . source-info) (Ak5323 core-prim . make-compiler-instruction) (Ak5322 core-prim . make-instruction) (Ak5321 core-prim . set-source-info!) (Ak5320 core-prim . bignum?) (Ak531f core-prim . fast-equal?) (Ak531e core-prim . fasl-read) (Ak531d core-prim . fasl-write) (Ak531c core-prim . time-usage) (Ak531b core-prim . os-constant) (Ak2880 core-prim . make-parameter) (Ak531a core-prim . socket-port) (Ak5319 core-prim . socket-shutdown) (Ak5318 core-prim . socket-close) (Ak5317 core-prim . socket-send) (Ak5316 core-prim . socket-recv!) (Ak5315 core-prim . socket-recv) (Ak5314 core-prim . make-server-socket) (Ak5313 core-prim . make-client-socket) (Ak5312 core-prim . socket-accept) (Ak5311 core-prim . socket?) (Ak5310 core-prim . string-upcase) (Ak530f core-prim . string-titlecase) (Ak530e core-prim . string-normalize-nfkd) (Ak530d core-prim . string-normalize-nfkc) (Ak530c core-prim . string-normalize-nfd) (Ak530b core-prim . string-normalize-nfc) (Ak530a core-prim . string-foldcase) (Ak5309 core-prim . string-downcase) (Ak5308 core-prim . string-ci>?) (Ak5307 core-prim . string-ci>=?) (Ak5306 core-prim . string-ci=?) (Ak5305 core-prim . string-ci<?) (Ak5304 core-prim . string-ci<=?) (Ak5303 core-prim . char-whitespace?) (Ak5302 core-prim . char-upper-case?) (Ak5301 core-prim . char-title-case?) (Ak5300 core-prim . char-numeric?) (Ak52ff core-prim . char-lower-case?) (Ak52fe core-prim . char-general-category) (Ak52fd core-prim . char-upcase) (Ak52fc core-prim . char-titlecase) (Ak52fb core-prim . char-foldcase) (Ak52fa core-prim . char-downcase) (Ak52f9 core-prim . char-ci>?) (Ak52f8 core-prim . char-ci>=?) (Ak52f7 core-prim . char-ci=?) (Ak52f6 core-prim . char-ci<?) (Ak52f5 core-prim . char-ci<=?) (Ak52f4 core-prim . char-alphabetic?) (Ak2e74 core-prim . make-variable-transformer) (Ak3129 core-prim . identifier?) (Ak3115 core-prim . generate-temporaries) (Ak3117 core-prim . free-identifier=?) (Ak312d core-prim . syntax->datum) (Ak312b core-prim . datum->syntax) (Ak3119 core-prim . bound-identifier=?) (Ak52f3 core-prim . record-type-descriptor?) (Ak52f2 core-prim . record-predicate) (Ak52f1 core-prim . record-mutator) (Ak52f0 core-prim . record-constructor) (Ak52ef core-prim . record-accessor) (Ak52ee core-prim . make-record-type-descriptor) (Ak52ed core-prim . make-record-constructor-descriptor) (Ak52ec core-prim . record?) (Ak52eb core-prim . record-type-uid) (Ak52ea core-prim . record-type-sealed?) (Ak52e9 core-prim . record-type-parent) (Ak52e8 core-prim . record-type-opaque?) (Ak52e7 core-prim . record-type-name) (Ak52e6 core-prim . record-type-generative?) (Ak52e5 core-prim . record-type-field-names) (Ak52e4 core-prim . record-rtd) (Ak52e3 core-prim . record-field-mutable?) (Ak52e2 core-prim . delete-file) (Ak52e1 core-prim . file-exists?) (Ak52e0 core-prim . vector-sort!) (Ak52df core-prim . vector-sort) (Ak52de core-prim . list-sort) (Ak52dd core-prim . symbol-hash) (Ak52dc core-prim . string-ci-hash) (Ak52db core-prim . string-hash) (Ak52da core-prim . equal-hash) (Ak52d9 core-prim . hashtable-equivalence-function) (Ak52d8 core-prim . make-hashtable) (Ak52d7 core-prim . hashtable-hash-function) (Ak52d6 core-prim . make-eqv-hashtable) (Ak52d5 core-prim . make-eq-hashtable) (Ak52d4 core-prim . hashtable?) (Ak52d3 core-prim . hashtable-update!) (Ak52d2 core-prim . hashtable-size) (Ak52d1 core-prim . hashtable-set!) (Ak52d0 core-prim . hashtable-ref) (Ak52cf core-prim . hashtable-mutable?) (Ak52ce core-prim . hashtable-keys) (Ak52cd core-prim . hashtable-entries) (Ak52cc core-prim . hashtable-delete!) (Ak52cb core-prim . hashtable-copy) (Ak52ca core-prim . hashtable-contains?) (Ak52c9 core-prim . hashtable-clear!) (Ak52c8 core-prim . call-with-output-file) (Ak52c7 core-prim . call-with-input-file) (Ak52c6 core-prim . write-char) (Ak52c5 core-prim . write) (Ak52c4 core-prim . with-output-to-file) (Ak52c3 core-prim . with-input-from-file) (Ak52c2 core-prim . read-char) (Ak52c1 core-prim . read) (Ak52c0 core-prim . peek-char) (Ak52bf core-prim . open-output-file) (Ak52be core-prim . open-input-file) (Ak52bd core-prim . newline) (Ak52bc core-prim . display) (Ak52bb core-prim . close-output-port) (Ak52ba core-prim . close-input-port) (Ak52b9 core-prim . eof-object?) (Ak52b8 core-prim . eof-object) (Ak52b7 core-prim . current-error-port) (Ak52b6 core-prim . current-output-port) (Ak52b5 core-prim . current-input-port) (Ak52b4 core-prim . output-port?) (Ak52b3 core-prim . input-port?) (Ak52b2 core-prim . utf-8-codec) (Ak52b1 core-prim . utf-16-codec) (Ak52b0 core-prim . transcoder-error-handling-mode) (Ak52af core-prim . transcoder-eol-style) (Ak52ae core-prim . transcoder-codec) (Ak52ad core-prim . transcoded-port) (Ak52ac core-prim . textual-port?) (Ak52ab core-prim . string->bytevector) (Ak52aa core-prim . standard-output-port) (Ak52a9 core-prim . standard-input-port) (Ak52a8 core-prim . standard-error-port) (Ak52a7 core-prim . set-port-position!) (Ak52a6 core-prim . put-u8) (Ak52a5 core-prim . put-string) (Ak52a4 core-prim . put-datum) (Ak52a3 core-prim . put-char) (Ak52a2 core-prim . put-bytevector) (Ak52a1 core-prim . port?) (Ak52a0 core-prim . port-transcoder) (Ak529f core-prim . port-position) (Ak529e core-prim . port-has-set-port-position!?) (Ak529d core-prim . port-has-port-position?) (Ak529c core-prim . port-eof?) (Ak529b core-prim . output-port-buffer-mode) (Ak529a core-prim . open-string-output-port) (Ak5299 core-prim . open-string-input-port) (Ak5298 core-prim . open-file-output-port) (Ak5297 core-prim . open-file-input/output-port) (Ak5296 core-prim . open-file-input-port) (Ak5295 core-prim . open-bytevector-output-port) (Ak5294 core-prim . open-bytevector-input-port) (Ak5293 core-prim . native-transcoder) (Ak5292 core-prim . native-eol-style) (Ak5291 core-prim . make-transcoder) (Ak5290 core-prim . latin-1-codec) (Ak4d0b core-prim . make-i/o-write-error) (Ak4cf6 core-prim . make-i/o-read-error) (Ak4dac core-prim . make-i/o-port-error) (Ak4d22 core-prim . make-i/o-invalid-position-error) (Ak4d3d core-prim . make-i/o-filename-error) (Ak4d56 core-prim . make-i/o-file-protection-error) (Ak4d6b core-prim . make-i/o-file-is-read-only-error) (Ak4d95 core-prim . make-i/o-file-does-not-exist-error) (Ak4d80 core-prim . make-i/o-file-already-exists-error) (Ak4ce1 core-prim . make-i/o-error) (Ak4ddc core-prim . make-i/o-encoding-error) (Ak4dc5 core-prim . make-i/o-decoding-error) (Ak528f core-prim . make-custom-textual-output-port) (Ak528e core-prim . make-custom-textual-input/output-port) (Ak528d core-prim . make-custom-textual-input-port) (Ak528c core-prim . make-custom-binary-output-port) (Ak528b core-prim . make-custom-binary-input/output-port) (Ak528a core-prim . make-custom-binary-input-port) (Ak5289 core-prim . make-bytevector) (Ak5288 core-prim . lookahead-u8) (Ak5287 core-prim . lookahead-char) (Ak4d0d core-prim . i/o-write-error?) (Ak4cf8 core-prim . i/o-read-error?) (Ak4db0 core-prim . i/o-port-error?) (Ak4d26 core-prim . i/o-invalid-position-error?) (Ak4d41 core-prim . i/o-filename-error?) (Ak4d58 core-prim . i/o-file-protection-error?) (Ak4d6d core-prim . i/o-file-is-read-only-error?) (Ak4d97 core-prim . i/o-file-does-not-exist-error?) (Ak4d82 core-prim . i/o-file-already-exists-error?) (Ak4ce3 core-prim . i/o-error?) (Ak4d28 core-prim . i/o-error-position) (Ak4db2 core-prim . i/o-error-port) (Ak4d43 core-prim . i/o-error-filename) (Ak4de0 core-prim . i/o-encoding-error?) (Ak4de2 core-prim . i/o-encoding-error-char) (Ak4dc7 core-prim . i/o-decoding-error?) (Ak5286 core-prim . get-u8) (Ak5285 core-prim . get-string-n!) (Ak5284 core-prim . get-string-n) (Ak5283 core-prim . get-string-all) (Ak5282 core-prim . get-line) (Ak5281 core-prim . get-datum) (Ak5280 core-prim . get-char) (Ak527f core-prim . get-bytevector-some) (Ak527e core-prim . get-bytevector-n!) (Ak527d core-prim . get-bytevector-n) (Ak527c core-prim . get-bytevector-all) (Ak527b core-prim . flush-output-port) (Ak527a core-prim . close-port) (Ak3103 core-prim . scheme-report-environment) (Ak5279 core-prim . quotient) (Ak3101 core-prim . null-environment) (Ak5278 core-prim . remainder) (Ak5277 core-prim . modulo) (Ak5276 core-prim . inexact->exact) (Ak5275 core-prim . force) (Ak5274 core-prim . exact->inexact) (Ak5273 core-prim . make-promise) (Ak5272 core-prim . exit) (Ak4f17 core-prim . command-line) (Ak5271 core-prim . string-fill!) (Ak5270 core-prim . string-set!) (Ak526f core-prim . set-cdr!) (Ak526e core-prim . set-car!) (Ak526d core-prim . remove) (Ak526c core-prim . remv) (Ak526b core-prim . remp) (Ak526a core-prim . remq) (Ak5269 core-prim . partition) (Ak5268 core-prim . memv) (Ak5267 core-prim . memq) (Ak5266 core-prim . memp) (Ak5265 core-prim . member) (Ak5264 core-prim . exists) (Ak5263 core-prim . for-all) (Ak5262 core-prim . fold-right) (Ak5261 core-prim . fold-left) (Ak5260 core-prim . find) (Ak525f core-prim . filter) (Ak525e core-prim . cons*) (Ak525d core-prim . assv) (Ak525c core-prim . assq) (Ak525b core-prim . assp) (Ak525a core-prim . assoc) (Ak5259 core-prim . call-with-string-output-port) (Ak5258 core-prim . call-with-port) (Ak5257 core-prim . call-with-bytevector-output-port) (Ak5256 core-prim . bytevector->string) (Ak5255 core-prim . buffer-mode?) (Ak5254 core-prim . binary-port?) (Ak5253 core-prim . with-exception-handler) (Ak5252 core-prim . raise-continuable) (Ak5251 core-prim . raise) (Ak3107 core-prim . eval) (Ak30ff core-prim . environment) (Ak5250 core-prim . make-enumeration) (Ak524f core-prim . enum-set=?) (Ak524e core-prim . enum-set-universe) (Ak524d core-prim . enum-set-union) (Ak524c core-prim . enum-set-subset?) (Ak524b core-prim . enum-set-projection) (Ak524a core-prim . enum-set-member?) (Ak5249 core-prim . enum-set-intersection) (Ak5248 core-prim . enum-set-indexer) (Ak5247 core-prim . enum-set-difference) (Ak5246 core-prim . enum-set-constructor) (Ak5245 core-prim . enum-set-complement) (Ak5244 core-prim . enum-set->list) (Ak4c57 core-prim . who-condition?) (Ak4bcf core-prim . warning?) (Ak4c0e core-prim . violation?) (Ak4cce core-prim . undefined-violation?) (Ak4cb5 core-prim . syntax-violation?) (Ak4cb9 core-prim . syntax-violation-subform) (Ak4cb7 core-prim . syntax-violation-form) (Ak3127 core-prim . syntax-violation) (Ak5243 core-prim . simple-conditions) (Ak4be4 core-prim . serious-condition?) (Ak4c6e core-prim . non-continuable-violation?) (Ak4bb8 core-prim . message-condition?) (Ak4c53 core-prim . make-who-condition) (Ak4bcd core-prim . make-warning) (Ak4c0c core-prim . make-violation) (Ak4ccc core-prim . make-undefined-violation) (Ak4caf core-prim . make-syntax-violation) (Ak4be2 core-prim . make-serious-condition) (Ak4c6c core-prim . make-non-continuable-violation) (Ak4bb4 core-prim . make-message-condition) (Ak4c96 core-prim . make-lexical-violation) (Ak4c38 core-prim . make-irritants-condition) (Ak4c81 core-prim . make-implementation-restriction-violation) (Ak4bf7 core-prim . make-error) (Ak4c21 core-prim . make-assertion-violation) (Ak4c98 core-prim . lexical-violation?) (Ak4c3c core-prim . irritants-condition?) (Ak4c83 core-prim . implementation-restriction-violation?) (Ak4bf9 core-prim . error?) (Ak4c59 core-prim . condition-who) (Ak5242 core-prim . condition-predicate) (Ak4bba core-prim . condition-message) (Ak4c3e core-prim . condition-irritants) (Ak5241 core-prim . condition-accessor) (Ak5240 core-prim . condition) (Ak4c23 core-prim . assertion-violation?) (Ak523f core-prim . condition?) (Ak523e core-prim . utf32->string) (Ak523d core-prim . utf16->string) (Ak523c core-prim . utf8->string) (Ak523b core-prim . uint-list->bytevector) (Ak523a core-prim . u8-list->bytevector) (Ak5239 core-prim . string->utf8) (Ak5238 core-prim . string->utf32) (Ak5237 core-prim . string->utf16) (Ak5236 core-prim . sint-list->bytevector) (Ak5235 core-prim . native-endianness) (Ak5234 core-prim . bytevector?) (Ak5233 core-prim . bytevector=?) (Ak5232 core-prim . bytevector-uint-set!) (Ak5231 core-prim . bytevector-uint-ref) (Ak5230 core-prim . bytevector-u8-set!) (Ak522f core-prim . bytevector-u8-ref) (Ak522e core-prim . bytevector-u64-set!) (Ak522d core-prim . bytevector-u64-ref) (Ak522c core-prim . bytevector-u64-native-set!) (Ak522b core-prim . bytevector-u64-native-ref) (Ak522a core-prim . bytevector-u32-set!) (Ak5229 core-prim . bytevector-u32-ref) (Ak5228 core-prim . bytevector-u32-native-set!) (Ak5227 core-prim . bytevector-u32-native-ref) (Ak5226 core-prim . bytevector-u16-set!) (Ak5225 core-prim . bytevector-u16-ref) (Ak5224 core-prim . bytevector-u16-native-set!) (Ak5223 core-prim . bytevector-u16-native-ref) (Ak5222 core-prim . bytevector-sint-set!) (Ak5221 core-prim . bytevector-sint-ref) (Ak5220 core-prim . bytevector-s8-set!) (Ak521f core-prim . bytevector-s8-ref) (Ak521e core-prim . bytevector-s64-set!) (Ak521d core-prim . bytevector-s64-ref) (Ak521c core-prim . bytevector-s64-native-set!) (Ak521b core-prim . bytevector-s64-native-ref) (Ak521a core-prim . bytevector-s32-set!) (Ak5219 core-prim . bytevector-s32-ref) (Ak5218 core-prim . bytevector-s32-native-set!) (Ak5217 core-prim . bytevector-s32-native-ref) (Ak5216 core-prim . bytevector-s16-set!) (Ak5215 core-prim . bytevector-s16-ref) (Ak5214 core-prim . bytevector-s16-native-set!) (Ak5213 core-prim . bytevector-s16-native-ref) (Ak5212 core-prim . bytevector-length) (Ak5211 core-prim . bytevector-ieee-single-ref) (Ak5210 core-prim . bytevector-ieee-single-set!) (Ak520f core-prim . bytevector-ieee-single-native-set!) (Ak520e core-prim . bytevector-ieee-single-native-ref) (Ak520d core-prim . bytevector-ieee-double-set!) (Ak520c core-prim . bytevector-ieee-double-ref) (Ak520b core-prim . bytevector-ieee-double-native-set!) (Ak520a core-prim . bytevector-ieee-double-native-ref) (Ak5209 core-prim . bytevector-fill!) (Ak5208 core-prim . bytevector-copy!) (Ak5207 core-prim . bytevector-copy) (Ak5206 core-prim . bytevector->uint-list) (Ak5205 core-prim . bytevector->u8-list) (Ak5204 core-prim . bytevector->sint-list) (Ak4e0c core-prim . no-nans-violation?) (Ak4df7 core-prim . no-infinities-violation?) (Ak4e0a core-prim . make-no-nans-violation) (Ak4df5 core-prim . make-no-infinities-violation) (Ak5203 core-prim . real->flonum) (Ak5202 core-prim . flzero?) (Ak5201 core-prim . fltruncate) (Ak5200 core-prim . fltan) (Ak51ff core-prim . flsqrt) (Ak51fe core-prim . flsin) (Ak51fd core-prim . flround) (Ak51fc core-prim . flpositive?) (Ak51fb core-prim . flonum?) (Ak51fa core-prim . flodd?) (Ak51f9 core-prim . flnumerator) (Ak51f8 core-prim . flnegative?) (Ak51f7 core-prim . flnan?) (Ak51f6 core-prim . flmod0) (Ak51f5 core-prim . flmod) (Ak51f4 core-prim . flmin) (Ak51f3 core-prim . flmax) (Ak51f2 core-prim . fllog) (Ak51f1 core-prim . flinteger?) (Ak51f0 core-prim . flinfinite?) (Ak51ef core-prim . flfloor) (Ak51ee core-prim . flfinite?) (Ak51ed core-prim . flexpt) (Ak51ec core-prim . flexp) (Ak51eb core-prim . fleven?) (Ak51ea core-prim . fldiv0-and-mod0) (Ak51e9 core-prim . fldiv0) (Ak51e8 core-prim . fldiv-and-mod) (Ak51e7 core-prim . fldiv) (Ak51e6 core-prim . fldenominator) (Ak51e5 core-prim . flcos) (Ak51e4 core-prim . flceiling) (Ak51e3 core-prim . flatan) (Ak51e2 core-prim . flasin) (Ak51e1 core-prim . flacos) (Ak51e0 core-prim . flabs) (Ak51df core-prim . fl>?) (Ak51de core-prim . fl>=?) (Ak51dd core-prim . fl=?) (Ak51dc core-prim . fl<?) (Ak51db core-prim . fl<=?) (Ak51da core-prim . fl/) (Ak51d9 core-prim . fl-) (Ak51d8 core-prim . fl+) (Ak51d7 core-prim . fl*) (Ak51d6 core-prim . fixnum->flonum) (Ak51d5 core-prim . fxzero?) (Ak51d4 core-prim . fxxor) (Ak51d3 core-prim . fxrotate-bit-field) (Ak51d2 core-prim . fxreverse-bit-field) (Ak51d1 core-prim . fxpositive?) (Ak51d0 core-prim . fxodd?) (Ak51cf core-prim . fxnot) (Ak51ce core-prim . fxnegative?) (Ak51cd core-prim . fxmod0) (Ak51cc core-prim . fxmod) (Ak51cb core-prim . fxmin) (Ak51ca core-prim . fxmax) (Ak51c9 core-prim . fxlength) (Ak51c8 core-prim . fxior) (Ak51c7 core-prim . fxif) (Ak51c6 core-prim . fxfirst-bit-set) (Ak51c5 core-prim . fxeven?) (Ak51c4 core-prim . fxdiv0-and-mod0) (Ak51c3 core-prim . fxdiv0) (Ak51c2 core-prim . fxdiv-and-mod) (Ak51c1 core-prim . fxdiv) (Ak51c0 core-prim . fxcopy-bit-field) (Ak51bf core-prim . fxcopy-bit) (Ak51be core-prim . fxbit-set?) (Ak51bd core-prim . fxbit-field) (Ak51bc core-prim . fxbit-count) (Ak51bb core-prim . fxarithmetic-shift-right) (Ak51ba core-prim . fxarithmetic-shift-left) (Ak51b9 core-prim . fxarithmetic-shift) (Ak51b8 core-prim . fxand) (Ak51b7 core-prim . fx>?) (Ak51b6 core-prim . fx>=?) (Ak51b5 core-prim . fx=?) (Ak51b4 core-prim . fx<?) (Ak51b3 core-prim . fx<=?) (Ak51b2 core-prim . fx-/carry) (Ak51b1 core-prim . fx-) (Ak51b0 core-prim . fx+/carry) (Ak51af core-prim . fx+) (Ak51ae core-prim . fx*/carry) (Ak51ad core-prim . fx*) (Ak51ac core-prim . greatest-fixnum) (Ak51ab core-prim . least-fixnum) (Ak51aa core-prim . fixnum-width) (Ak51a9 core-prim . fixnum?) (Ak51a8 core-prim . bitwise-rotate-bit-field) (Ak51a7 core-prim . bitwise-reverse-bit-field) (Ak51a6 core-prim . bitwise-length) (Ak51a5 core-prim . bitwise-if) (Ak51a4 core-prim . bitwise-first-bit-set) (Ak51a3 core-prim . bitwise-copy-bit-field) (Ak51a2 core-prim . bitwise-copy-bit) (Ak51a1 core-prim . bitwise-bit-set?) (Ak51a0 core-prim . bitwise-bit-field) (Ak519f core-prim . bitwise-bit-count) (Ak519e core-prim . bitwise-xor) (Ak519d core-prim . bitwise-ior) (Ak519c core-prim . bitwise-and) (Ak519b core-prim . bitwise-not) (Ak519a core-prim . bitwise-arithmetic-shift-right) (Ak5199 core-prim . bitwise-arithmetic-shift-left) (Ak5198 core-prim . bitwise-arithmetic-shift) (Ak5197 core-prim . zero?) (Ak5196 core-prim . vector?) (Ak5195 core-prim . vector-set!) (Ak5194 core-prim . vector-ref) (Ak5193 core-prim . vector-map) (Ak5192 core-prim . vector-length) (Ak5191 core-prim . vector-for-each) (Ak5190 core-prim . vector-fill!) (Ak518f core-prim . vector->list) (Ak518e core-prim . vector) (Ak518d core-prim . values) (Ak518c core-prim . truncate) (Ak518b core-prim . tan) (Ak518a core-prim . symbol?) (Ak5189 core-prim . symbol=?) (Ak5188 core-prim . symbol->string) (Ak5187 core-prim . substring) (Ak5186 core-prim . string?) (Ak5185 core-prim . string>?) (Ak5184 core-prim . string>=?) (Ak5183 core-prim . string=?) (Ak5182 core-prim . string<?) (Ak5181 core-prim . string<=?) (Ak5180 core-prim . string-ref) (Ak517f core-prim . string-length) (Ak517e core-prim . string-for-each) (Ak517d core-prim . string-copy) (Ak517c core-prim . string-append) (Ak517b core-prim . string->symbol) (Ak517a core-prim . string->number) (Ak5179 core-prim . string->list) (Ak5178 core-prim . string) (Ak5177 core-prim . sqrt) (Ak5176 core-prim . sin) (Ak5175 core-prim . round) (Ak5174 core-prim . reverse) (Ak5173 core-prim . real?) (Ak5172 core-prim . real-valued?) (Ak5171 core-prim . real-part) (Ak5170 core-prim . rationalize) (Ak516f core-prim . rational?) (Ak516e core-prim . rational-valued?) (Ak516d core-prim . procedure?) (Ak516c core-prim . positive?) (Ak516b core-prim . pair?) (Ak516a core-prim . odd?) (Ak5169 core-prim . numerator) (Ak5168 core-prim . number?) (Ak5167 core-prim . number->string) (Ak5166 core-prim . null?) (Ak5165 core-prim . not) (Ak5164 core-prim . negative?) (Ak5163 core-prim . nan?) (Ak5162 core-prim . min) (Ak5161 core-prim . max) (Ak5160 core-prim . map) (Ak515f core-prim . make-vector) (Ak515e core-prim . make-string) (Ak515d core-prim . make-rectangular) (Ak515c core-prim . make-polar) (Ak515b core-prim . magnitude) (Ak515a core-prim . log) (Ak5159 core-prim . list?) (Ak5158 core-prim . list-tail) (Ak5157 core-prim . list-ref) (Ak5156 core-prim . list->vector) (Ak5155 core-prim . list->string) (Ak5154 core-prim . list) (Ak5153 core-prim . length) (Ak5152 core-prim . lcm) (Ak5151 core-prim . integer?) (Ak5150 core-prim . integer-valued?) (Ak514f core-prim . integer->char) (Ak514e core-prim . infinite?) (Ak514d core-prim . inexact?) (Ak514c core-prim . inexact) (Ak514b core-prim . imag-part) (Ak514a core-prim . gcd) (Ak5149 core-prim . for-each) (Ak5148 core-prim . floor) (Ak5147 core-prim . finite?) (Ak5146 core-prim . expt) (Ak5145 core-prim . exp) (Ak5144 core-prim . exact?) (Ak5143 core-prim . exact-integer-sqrt) (Ak5142 core-prim . exact) (Ak5141 core-prim . even?) (Ak5140 core-prim . error) (Ak513f core-prim . eqv?) (Ak513e core-prim . equal?) (Ak513d core-prim . eq?) (Ak513c core-prim . dynamic-wind) (Ak513b core-prim . div0-and-mod0) (Ak513a core-prim . mod0) (Ak5139 core-prim . div0) (Ak5138 core-prim . div-and-mod) (Ak5137 core-prim . mod) (Ak5136 core-prim . div) (Ak5135 core-prim . denominator) (Ak5134 core-prim . cos) (Ak5133 core-prim . cons) (Ak5132 core-prim . complex?) (Ak5131 core-prim . char?) (Ak5130 core-prim . char>?) (Ak512f core-prim . char>=?) (Ak512e core-prim . char=?) (Ak512d core-prim . char<?) (Ak512c core-prim . char<=?) (Ak512b core-prim . char->integer) (Ak512a core-prim . ceiling) (Ak5129 core-prim . call-with-values) (Ak5128 core-prim . call/cc) (Ak5127 core-prim . call-with-current-continuation) (Ak5126 core-prim . cddddr) (Ak5125 core-prim . cdddar) (Ak5124 core-prim . cddadr) (Ak5123 core-prim . cddaar) (Ak5122 core-prim . cdaddr) (Ak5121 core-prim . cdadar) (Ak5120 core-prim . cdaadr) (Ak511f core-prim . cdaaar) (Ak511e core-prim . cadddr) (Ak511d core-prim . caddar) (Ak511c core-prim . cadadr) (Ak511b core-prim . cadaar) (Ak511a core-prim . caaddr) (Ak5119 core-prim . caadar) (Ak5118 core-prim . caaadr) (Ak5117 core-prim . caaaar) (Ak5116 core-prim . cdddr) (Ak5115 core-prim . cddar) (Ak5114 core-prim . cdadr) (Ak5113 core-prim . cdaar) (Ak5112 core-prim . caddr) (Ak5111 core-prim . cadar) (Ak5110 core-prim . caadr) (Ak510f core-prim . caaar) (Ak510e core-prim . cddr) (Ak510d core-prim . cdar) (Ak510c core-prim . cadr) (Ak510b core-prim . caar) (Ak510a core-prim . cdr) (Ak5109 core-prim . car) (Ak5108 core-prim . boolean?) (Ak5107 core-prim . boolean=?) (Ak5106 core-prim . atan) (Ak5105 core-prim . assertion-violation) (Ak3121 core-prim . assertion-error) (Ak5104 core-prim . asin) (Ak5103 core-prim . apply) (Ak5102 core-prim . append) (Ak5101 core-prim . angle) (Ak5100 core-prim . acos) (Ak50ff core-prim . abs) (Ak50fe core-prim . /) (Ak50fd core-prim . *) (Ak50fc core-prim . -) (Ak50fb core-prim . +) (Ak50fa core-prim . >=) (Ak50f9 core-prim . >) (Ak50f8 core-prim . =) (Ak50f7 core-prim . <=) (Ak50f6 core-prim . <) (Ak50f5 core-prim . library) (Ak50f4 $core-rtd &no-nans-rtd &no-nans-rcd) (Ak50f3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (Ak50f2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (Ak50f1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (Ak50f0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (Ak50ef $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (Ak50ee $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (Ak50ed $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (Ak50ec $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (Ak50eb $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (Ak50ea $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (Ak50e9 $core-rtd &i/o-write-rtd &i/o-write-rcd) (Ak50e8 $core-rtd &i/o-read-rtd &i/o-read-rcd) (Ak50e7 $core-rtd &i/o-rtd &i/o-rcd) (Ak50e6 $core-rtd &undefined-rtd &undefined-rcd) (Ak50e5 $core-rtd &syntax-rtd &syntax-rcd) (Ak50e4 $core-rtd &lexical-rtd &lexical-rcd) (Ak50e3 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (Ak50e2 $core-rtd &non-continuable-rtd &non-continuable-rcd) (Ak50e1 $core-rtd &who-rtd &who-rcd) (Ak50e0 $core-rtd &irritants-rtd &irritants-rcd) (Ak50df $core-rtd &assertion-rtd &assertion-rcd) (Ak50de $core-rtd &violation-rtd &violation-rcd) (Ak50dd $core-rtd &error-rtd &error-rcd) (Ak50dc $core-rtd &serious-rtd &serious-rcd) (Ak50db $core-rtd &warning-rtd &warning-rcd) (Ak50da $core-rtd &message-rtd &message-rcd) (Ak50d9 $core-rtd &condition-rtd &condition-rcd) (Ak50d8 macro . define-condition-type) (Ak50d7 macro . define-enumeration) (Ak50d6 macro . define-record-type) (Ak50d5 macro . parent-rtd) (Ak50d4 macro . nongenerative) (Ak50d3 macro . opaque) (Ak50d2 macro . sealed) (Ak50d1 macro . protocol) (Ak50d0 macro . parent) (Ak50cf macro . immutable) (Ak50ce macro . mutable) (Ak50cd macro . fields) (Ak50cc macro . error-handling-mode) (Ak50cb macro . file-options) (Ak50ca macro . buffer-mode) (Ak50c9 macro . eol-style) (Ak50c8 macro . guard) (Ak50c7 macro . trace-define) (Ak50c6 macro . trace-lambda) (Ak50c5 macro . unsyntax-splicing) (Ak50c4 macro . unsyntax) (Ak50c3 macro . unquote-splicing) (Ak50c2 macro . unquote) (Ak50c1 macro . _) (Ak50c0 macro . else) (Ak50bf macro . =>) (Ak50be macro . ...) (Ak50bd macro . assert) (Ak50bc macro . endianness) (Ak50bb macro . delay) (Ak50ba macro . time) (Ak50b9 macro . do) (Ak50b8 macro . cond) (Ak50b7 macro . let*) (Ak50b6 macro . let) (Ak50b5 macro . let*-values) (Ak50b4 macro . let-values) (Ak50b3 macro . identifier-syntax) (Ak50b2 macro . with-syntax) (Ak50b1 macro . quasisyntax) (Ak50b0 macro . quasiquote) (Ak50af macro . syntax-rules) (Ak50ae macro . include) (Ak50ad macro . define-struct) (Ak50ac core-macro . record-constructor-descriptor) (Ak50ab core-macro . record-type-descriptor) (Ak50aa macro . case) (Ak50a9 macro . parameterize) (Ak50a8 macro . unless) (Ak50a7 macro . when) (Ak50a6 core-macro . or) (Ak50a5 core-macro . and) (Ak50a4 core-macro . if) (Ak50a3 core-macro . letrec*) (Ak50a2 core-macro . letrec) (Ak50a1 core-macro . type-descriptor) (Ak50a0 core-macro . case-lambda) (Ak509f core-macro . lambda) (Ak509e core-macro . syntax) (Ak509d core-macro . syntax-case) (Ak509c core-macro . quote) (Ak509b core-macro . foreign-call) (Ak509a letrec-syntax) (Ak5099 let-syntax) (Ak5098 set!) (Ak5097 import) (Ak5096 begin) (Ak5095 module) (Ak5094 define-syntax) (Ak5093 define)) values values '#f '#f '#f '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . Ak53b6) (eval-core . Ak53b5) (set-symbol-value! . Ak53b4) (symbol-value . Ak53b3) (gensym . Ak53b2) (void . Ak53b1)) '() values values '#f '#f '#f '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d8 '(mosh) '() '() '() '() '((set-symbol-value! . Ak53b4) (symbol-value . Ak53b3) (regexp? . Ak53af) (read-line . Ak53ae) (ungensym . Ak53ac) (alist->eq-hash-table . Ak53ab) (assoc-ref . Ak53aa) (print . Ak53a9) (format . Ak53a8) (host-os . Ak53a7) (library-path . Ak2a97) (standard-library-path . Ak53a6) (file-newer? . Ak53a5) (stat-mtime . Ak53a4) (digit->integer . Ak53a0) (call-with-string-input-port . Ak539f) (call-with-string-io . Ak539e) (string-split . Ak539d) (bytevector-for-each . Ak539c) (string->regexp . Ak539b) (rxmatch . Ak539a) (regexp-replace-all . Ak5399) (hashtable-for-each . Ak5398) (set-current-directory! . Ak5393) (expand-path . Ak5392) (current-directory . Ak5391) (p . Ak5354) (get-timeofday . Ak533c) (get-command-line . Ak533b) (sys-display . Ak533a) (whereis . Ak5339) (register . Ak5338) (vm-join! . Ak5337) (vm-set-value! . Ak5336) (vm? . Ak5335) (main-vm? . Ak5334) (vm-eval . Ak5333) (vm-self . Ak5332) (vm-start! . Ak5331) (make-vm . Ak5330) (mutex-try-lock! . Ak532f) (mutex-unlock! . Ak532e) (mutex-lock! . Ak532d) (mutex? . Ak532c) (make-mutex . Ak532b) (condition-variable-notify-all! . Ak532a) (condition-variable-notify! . Ak5329) (condition-variable-wait! . Ak5328) (make-condition-variable . Ak5327) (mosh-executable-path . Ak5326) (make-file-options . Ak5325) (source-info . Ak5324) (make-compiler-instruction . Ak5323) (make-instruction . Ak5322) (set-source-info! . Ak5321) (bignum? . Ak5320) (fast-equal? . Ak531f) (fasl-read . Ak531e) (fasl-write . Ak531d) (time-usage . Ak531c) (os-constant . Ak531b) (time . Ak50ba) (include . Ak50ae)) '() values values '#f '#f '#f '#f) (Ak2c6c@Ak2ab8@install-library 'Ak53d9 '(system) '() '() '() '() '((gensym-prefix-set! . Ak53ad) (write-to-file . Ak53a3) (file->list . Ak53a2) (file->string . Ak53a1) (call-process . Ak5397) (local-tz-offset . Ak5396) (microseconds . Ak5395) (directory-list . Ak5394) (expand-path . Ak5392) (%spawn . Ak5390) (%waitpid . Ak538f) (simple-struct-name . Ak538e) (simple-struct-set! . Ak538d) (simple-struct-ref . Ak538c) (make-simple-struct . Ak538b) (simple-struct? . Ak538a) (pointer-ref-c-int64 . Ak5389) (pointer-ref-c-int32 . Ak5388) (pointer-ref-c-int16 . Ak5387) (pointer-ref-c-int8 . Ak5386) (pointer-ref-c-uint64 . Ak5385) (pointer-ref-c-uint32 . Ak5384) (pointer-ref-c-uint16 . Ak5383) (pointer-ref-c-uint8 . Ak5382) (pointer-set-c-uint64! . Ak5381) (pointer-set-c-uint32! . Ak5380) (pointer-set-c-uint16! . Ak537f) (pointer-set-c-uint8! . Ak537e) (pointer-set-c-int64! . Ak537d) (pointer-set-c-int32! . Ak537c) (pointer-set-c-int16! . Ak537b) (pointer-set-c-int8! . Ak537a) (pointer-set-c-pointer! . Ak5379) (pointer-set-c-double! . Ak5378) (pointer-set-c-float! . Ak5377) (pointer-set-c-long-long! . Ak5376) (pointer-set-c-long! . Ak5375) (pointer-set-c-int! . Ak5374) (pointer-set-c-short! . Ak5373) (pointer-set-c-char! . Ak5372) (pointer-ref-c-pointer . Ak5371) (pointer-ref-c-double . Ak5370) (pointer-ref-c-float . Ak536f) (pointer-ref-c-unsigned-long-long . Ak536e) (pointer-ref-c-signed-long-long . Ak536d) (pointer-ref-c-unsigned-long . Ak536c) (pointer-ref-c-signed-long . Ak536b) (pointer-ref-c-unsigned-int . Ak536a) (pointer-ref-c-signed-int . Ak5369) (pointer-ref-c-unsigned-short . Ak5368) (pointer-ref-c-signed-short . Ak5367) (pointer-ref-c-unsigned-char . Ak5366) (pointer-ref-c-signed-char . Ak5365) (pointer->integer . Ak5364) (integer->pointer . Ak5363) (pointer? . Ak5362) (shared-errno . Ak5361) (%ffi-supported? . Ak5360) (%ffi-pointer->string . Ak535f) (%ffi-call->string-or-zero . Ak535e) (%ffi-call->double . Ak535d) (%ffi-call->void* . Ak535c) (%ffi-call->void . Ak535b) (%ffi-call->char . Ak535a) (%ffi-call->int . Ak5359) (%ffi-lookup . Ak5358) (%ffi-open . Ak5357) (%fork . Ak5356) (%pipe . Ak5355) (open-output-string . Ak5353) (get-output-string . Ak5352) (file-stat-ctime . Ak5351) (file-stat-atime . Ak5350) (file-stat-mtime . Ak534f) (file-size-in-bytes . Ak534e) (file-writable? . Ak534d) (file-executable? . Ak534c) (file-readable? . Ak534b) (file-regular? . Ak534a) (file-symbolic-link? . Ak5349) (file-directory? . Ak5348) (create-symbolic-link . Ak5347) (rename-file . Ak5346) (delete-directory . Ak5345) (create-directory . Ak5344) (create-mosh-cache-dir . Ak5343) (get-environment-variables . Ak5342) (get-environment-variable . Ak5341) (join-wraps . Ak5340) (id->real-label . Ak533f) (same-marks? . Ak533e) (same-marks*? . Ak533d) (make-parameter . Ak2880) (socket-port . Ak531a) (socket-shutdown . Ak5319) (socket-close . Ak5318) (socket-send . Ak5317) (socket-recv! . Ak5316) (socket-recv . Ak5315) (make-server-socket . Ak5314) (make-client-socket . Ak5313) (socket-accept . Ak5312) (socket? . Ak5311) (parameterize . Ak50a9)) '() values values '#f '#f '#f '#f))
((lambda (Ak4f06@add-library-path! Ak4f08@parse-and-add-library-path Ak4f0a@for-each-with-index Ak4f0c@rpad Ak4f0e@condition-printer Ak4f10@record->field-alist Ak4f12@map-with-index Ak4f14@repl Ak4f16@trace-printer Ak4f18@command-line Ak4f1a@local-library-path Ak4f1c@load/args Ak4f1e@load Ak4f20@ironscheme-build Ak4f22@eval-top-level Ak4f24@compile-system-libraries Ak4f26@compile Ak4f28@compile->closure Ak4f2a@pre-compile-r6rs-file Ak4f2c@load-r6rs-top-level Ak4f2e@load-r6rs-top-level-sexp Ak4f30@prefix-inc Ak4f32@prefix-inc!) (begin (set! Ak4f06@add-library-path! (lambda (Ak4f6b@path) (Ak2c5c@Ak2a98@library-path (append (Ak2c5c@Ak2a98@library-path) (list Ak4f6b@path))))) (set! Ak4f08@parse-and-add-library-path (lambda (Ak4f6d@paths Ak4f6e@message) ((lambda (Ak4f71@t) (if Ak4f71@t ((lambda (Ak4f73@paths) (for-each (lambda (Ak4f75@path) (if (file-exists? Ak4f75@path) (Ak4f06@add-library-path! (expand-path Ak4f75@path)) (format (current-error-port) Ak4f6e@message Ak4f75@path))) (string-split Ak4f73@paths '#\:))) Ak4f71@t) (void))) Ak4f6d@paths))) (set! Ak4f0a@for-each-with-index (lambda (Ak4f77@proc Ak4f78@lst) (letrec ((Ak4f7b@loop (lambda (Ak4f7d@i Ak4f7e@lst) (if (null? Ak4f7e@lst) (if '#f '#f (void)) (begin (Ak4f77@proc Ak4f7d@i (car Ak4f7e@lst)) (Ak4f7b@loop (+ Ak4f7d@i '1) (cdr Ak4f7e@lst))))))) (Ak4f7b@loop '1 Ak4f78@lst)))) (set! Ak4f0c@rpad (lambda (Ak4f81@str Ak4f82@pad Ak4f83@n) ((lambda (Ak4f87@rest) ((letrec ((Ak4f89@loop (lambda (Ak4f8b@rest Ak4f8c@ret) (if (<= Ak4f8b@rest '0) Ak4f8c@ret (Ak4f89@loop (- Ak4f8b@rest '1) (string-append Ak4f8c@ret Ak4f82@pad)))))) Ak4f89@loop) Ak4f87@rest (format '"~a" Ak4f81@str))) (- Ak4f83@n (string-length (format '"~a" Ak4f81@str)))))) (set! Ak4f0e@condition-printer (lambda (Ak4f8f@e Ak4f90@port) ((lambda (Ak4f94@max-condition-len) (begin (set! Ak4f94@max-condition-len (apply max (map (lambda (Ak4fa5@c) (string-length (symbol->string (record-type-name (record-rtd Ak4fa5@c))))) (simple-conditions Ak4f8f@e)))) (begin (display '" Condition components:\n" Ak4f90@port) (Ak4f0a@for-each-with-index (lambda (Ak4f95@i Ak4f96@x) ((lambda (Ak4f99@rtd Ak4f9a@fields-alist) (begin (format Ak4f90@port '" ~d. ~a" Ak4f95@i (Ak4f0c@rpad (symbol->string (record-type-name Ak4f99@rtd)) '" " Ak4f94@max-condition-len)) (if (null? Ak4f9a@fields-alist) (newline Ak4f90@port) (void)) ((letrec ((Ak4f9d@loop (lambda (Ak4f9f@first Ak4fa0@fields-alist) (if (null? Ak4fa0@fields-alist) '() ((lambda (Ak4fa3@field) (begin (if (not Ak4f9f@first) (display (Ak4f0c@rpad '"" '" " (+ '4 Ak4f94@max-condition-len)) Ak4f90@port) (void)) (display '"       " Ak4f90@port) (display (car Ak4fa3@field) Ak4f90@port) (display '": " Ak4f90@port) (write (cdr Ak4fa3@field) Ak4f90@port) (newline Ak4f90@port) (Ak4f9d@loop '#f (cdr Ak4fa0@fields-alist)))) (car Ak4fa0@fields-alist)))))) Ak4f9d@loop) '#t Ak4f9a@fields-alist))) (record-rtd Ak4f96@x) (Ak4f10@record->field-alist Ak4f96@x))) (simple-conditions Ak4f8f@e))))) '#f))) (set! Ak4f10@record->field-alist (lambda (Ak4fa7@r) ((lambda (Ak4faa@ref) (begin (set! Ak4faa@ref (lambda (Ak4fb5@rtd Ak4fb6@i Ak4fb7@x) ((lambda (Ak4fbb@val) (if (symbol? Ak4fbb@val) (ungensym Ak4fbb@val) Ak4fbb@val)) ((record-accessor Ak4fb5@rtd Ak4fb6@i) Ak4fb7@x)))) ((letrec ((Ak4fab@loop (lambda (Ak4fad@ret Ak4fae@rtd) (if Ak4fae@rtd (Ak4fab@loop (append Ak4fad@ret (Ak4f12@map-with-index (lambda (Ak4fb1@i Ak4fb2@field) (cons Ak4fb2@field (Ak4faa@ref Ak4fae@rtd Ak4fb1@i Ak4fa7@r))) (vector->list (record-type-field-names Ak4fae@rtd)))) (record-type-parent Ak4fae@rtd)) Ak4fad@ret)))) Ak4fab@loop) '() (record-rtd Ak4fa7@r)))) '#f))) (set! Ak4f12@map-with-index (lambda (Ak4fbd@proc Ak4fbe@lst) ((letrec ((Ak4fc1@loop (lambda (Ak4fc3@i Ak4fc4@lst Ak4fc5@ret) (if (null? Ak4fc4@lst) (reverse Ak4fc5@ret) (Ak4fc1@loop (+ Ak4fc3@i '1) (cdr Ak4fc4@lst) (cons (Ak4fbd@proc Ak4fc3@i (car Ak4fc4@lst)) Ak4fc5@ret)))))) Ak4fc1@loop) '0 Ak4fbe@lst '()))) (set! Ak4f14@repl (lambda Ak4fc9@x ((lambda (Ak4fcc@rec) (begin (set! Ak4fcc@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (Ak4fcf@Ak4fcd) (lambda () (with-exception-handler (lambda (Ak4fd1@e) ((call/cc (lambda (Ak4fd3@Ak4fce) (Ak4fcf@Ak4fcd (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? Ak4fd1@e) (Ak4f0e@condition-printer Ak4fd1@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" Ak4fd1@e))) (Ak4fd3@Ak4fce (lambda () (raise-continuable Ak4fd1@e)))))))))) (lambda () ((letrec ((Ak4fd5@loop (lambda (Ak4fd7@line Ak4fd8@accum) ((lambda (Ak4fdc@parentheses-ok? Ak4fde@eval-string-print) (begin (set! Ak4fdc@parentheses-ok? (lambda (Ak4fe3@text) ((letrec ((Ak4fe5@loop (lambda (Ak4fe7@chars Ak4fe8@p0 Ak4fe9@p1) (if (null? Ak4fe7@chars) (= '0 Ak4fe8@p0 Ak4fe9@p1) ((lambda (Ak4fed@t) (if (memv Ak4fed@t '(#\()) (Ak4fe5@loop (cdr Ak4fe7@chars) (+ Ak4fe8@p0 '1) Ak4fe9@p1) (if (memv Ak4fed@t '(#\))) (Ak4fe5@loop (cdr Ak4fe7@chars) (- Ak4fe8@p0 '1) Ak4fe9@p1) (if (memv Ak4fed@t '(#\[)) (Ak4fe5@loop (cdr Ak4fe7@chars) Ak4fe8@p0 (+ Ak4fe9@p1 '1)) (if (memv Ak4fed@t '(#\])) (Ak4fe5@loop (cdr Ak4fe7@chars) Ak4fe8@p0 (- Ak4fe9@p1 '1)) (Ak4fe5@loop (cdr Ak4fe7@chars) Ak4fe8@p0 Ak4fe9@p1)))))) (car Ak4fe7@chars)))))) Ak4fe5@loop) (string->list Ak4fe3@text) '0 '0))) (set! Ak4fde@eval-string-print (lambda (Ak4fe1@text) (if (not (or (string=? '"\n" Ak4fe1@text) (= '0 (string-length Ak4fe1@text)))) (write (Ak4f22@eval-top-level (call-with-port (open-string-input-port Ak4fe1@text) read))) (void)))) (if (eof-object? Ak4fd7@line) (begin (Ak4fde@eval-string-print Ak4fd8@accum) (exit)) ((lambda (Ak4fdf@current) (if (Ak4fdc@parentheses-ok? Ak4fdf@current) (Ak4fde@eval-string-print Ak4fdf@current) (Ak4fd5@loop (get-line (current-input-port)) Ak4fdf@current))) (string-append Ak4fd8@accum Ak4fd7@line))))) '#f '#f)))) Ak4fd5@loop) (get-line (current-input-port)) '""))))))) (newline) (Ak4fcc@rec)))) (Ak4fcc@rec))) '#f))) (set! Ak4f16@trace-printer (Ak29a2@Ak2881@make-parameter write)) (set! Ak4f18@command-line (Ak29a2@Ak2881@make-parameter (get-command-line))) (set! Ak4f1a@local-library-path (lambda (Ak4fef@filename) (Ak2c5c@Ak2a98@library-path))) (set! Ak4f1c@load/args (lambda (Ak4ff1@filename . Ak4ff3@args) (begin (apply Ak4f2c@load-r6rs-top-level Ak4ff1@filename 'load Ak4ff3@args) (void)))) (set! Ak4f1e@load (lambda (Ak4ff5@filename) (begin (apply Ak4f2c@load-r6rs-top-level Ak4ff5@filename 'load (Ak4f18@command-line)) (void)))) (set! Ak4f20@ironscheme-build (lambda () (Ak4f1e@load '"ironscheme-buildscript.ss"))) (set! Ak4f22@eval-top-level (lambda (Ak4ff7@x) (Ak4b2d@Ak3108@eval Ak4ff7@x (Ak4b43@Ak3134@interaction-environment)))) (set! Ak4f24@compile-system-libraries (lambda () (Ak4f22@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! Ak4f26@compile (lambda (Ak4ff9@filename) (Ak4f2c@load-r6rs-top-level Ak4ff9@filename 'compile))) (set! Ak4f28@compile->closure (lambda (Ak4ffb@filename) (Ak4f2c@load-r6rs-top-level Ak4ffb@filename 'closure))) (set! Ak4f2a@pre-compile-r6rs-file (lambda (Ak4ffd@filename) (Ak4f2c@load-r6rs-top-level Ak4ffd@filename 'compile))) (set! Ak4f2c@load-r6rs-top-level (lambda (Ak4fff@filename Ak5000@how . Ak5003@args) ((lambda (Ak5009@Ak5006 Ak500a@Ak5008) ((lambda (Ak500d@swap) (dynamic-wind Ak500d@swap (lambda () ((lambda (Ak500f@x*) ((lambda (Ak5011@t) (if (memv Ak5011@t '(closure)) (Ak4b42@Ak3132@pre-compile-r6rs-top-level Ak500f@x*) (if (memv Ak5011@t '(load)) ((lambda (Ak501b@Ak5014 Ak501c@Ak5016 Ak501d@Ak5018 Ak501e@Ak501a) ((lambda (Ak5023@swap) (dynamic-wind Ak5023@swap (lambda () (begin (if (Ak29a3@Ak2883@mosh-cache-dir) (gensym-prefix-set! (Ak4f32@prefix-inc! (string-append (Ak29a3@Ak2883@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (Ak5025@file) ((call/cc (lambda (Ak5029@Ak5027) (lambda () (with-exception-handler (lambda (Ak502b@c) ((call/cc (lambda (Ak502d@Ak5028) (Ak5029@Ak5027 (lambda () (if '#t '#t (Ak502d@Ak5028 (lambda () (raise-continuable Ak502b@c)))))))))) (lambda () (delete-file (string-append (Ak29a3@Ak2883@mosh-cache-dir) '"/" Ak5025@file))))))))) (directory-list (Ak29a3@Ak2883@mosh-cache-dir))) (void)) ((lambda (Ak502f@compiled) (begin (if (and (Ak29a3@Ak2883@mosh-cache-dir) (not (symbol-value '%disable-acc))) (Ak2c60@Ak2aa0@serialize-all Ak299d@Ak2877@serialize-library Ak29f9@Ak29b2@compile-core-expr) (void)) (Ak502f@compiled))) (Ak4b41@Ak3130@compile-r6rs-top-level Ak500f@x*)))) Ak5023@swap)) (lambda () (begin ((lambda (Ak5031@t) (begin (Ak501b@Ak5014 Ak501d@Ak5018) (set! Ak501d@Ak5018 Ak5031@t))) (Ak501b@Ak5014)) ((lambda (Ak5033@t) (begin (Ak501c@Ak5016 Ak501e@Ak501a) (set! Ak501e@Ak501a Ak5033@t))) (Ak501c@Ak5016)))))) Ak4f18@command-line Ak29a3@Ak2883@mosh-cache-dir (cons Ak4fff@filename (car Ak5003@args)) (create-mosh-cache-dir)) (if (memv Ak5011@t '(compile)) (begin (Ak4b41@Ak3130@compile-r6rs-top-level Ak500f@x*) (Ak2c60@Ak2aa0@serialize-all Ak299d@Ak2877@serialize-library Ak29f9@Ak29b2@compile-core-expr)) (if '#f '#f (void)))))) Ak5000@how)) (with-input-from-file Ak4fff@filename (lambda () ((letrec ((Ak5035@f (lambda () ((lambda (Ak5037@x) (if (eof-object? Ak5037@x) '() (cons Ak5037@x (Ak5035@f)))) (Ak2995@Ak2867@read-annotated))))) Ak5035@f)))))) Ak500d@swap)) (lambda () ((lambda (Ak5039@t) (begin (Ak5009@Ak5006 Ak500a@Ak5008) (set! Ak500a@Ak5008 Ak5039@t))) (Ak5009@Ak5006))))) Ak2c5c@Ak2a98@library-path (Ak4f1a@local-library-path Ak4fff@filename)))) (set! Ak4f2e@load-r6rs-top-level-sexp (lambda (Ak503b@import-spec Ak503c@thunk) ((lambda (Ak5047@Ak5040 Ak5048@Ak5042 Ak5049@Ak5044 Ak504a@Ak5046) ((lambda (Ak504f@swap) (dynamic-wind Ak504f@swap (lambda () (begin (if (Ak29a3@Ak2883@mosh-cache-dir) (gensym-prefix-set! (Ak4f32@prefix-inc! (string-append (Ak29a3@Ak2883@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (Ak5055@Ak5052 Ak5056@Ak5054) ((lambda (Ak5059@swap) (dynamic-wind Ak5059@swap (lambda () ((Ak4b41@Ak3130@compile-r6rs-top-level (list (cons 'import Ak503b@import-spec) (list Ak503c@thunk))))) Ak5059@swap)) (lambda () ((lambda (Ak505b@t) (begin (Ak5055@Ak5052 Ak5056@Ak5054) (set! Ak5056@Ak5054 Ak505b@t))) (Ak5055@Ak5052))))) Ak4f18@command-line '()))) Ak504f@swap)) (lambda () (begin ((lambda (Ak505d@t) (begin (Ak5047@Ak5040 Ak5049@Ak5044) (set! Ak5049@Ak5044 Ak505d@t))) (Ak5047@Ak5040)) ((lambda (Ak505f@t) (begin (Ak5048@Ak5042 Ak504a@Ak5046) (set! Ak504a@Ak5046 Ak505f@t))) (Ak5048@Ak5042)))))) Ak2c5c@Ak2a98@library-path Ak29a3@Ak2883@mosh-cache-dir (Ak4f1a@local-library-path '"") (create-mosh-cache-dir)))) (set! Ak4f30@prefix-inc (lambda (Ak5061@prefix-string) ((lambda (Ak5063@prefix) ((lambda (Ak5065@len) ((lambda () ((letrec ((Ak5067@loop (lambda (Ak5069@i Ak506a@carry? Ak506b@accum) (if (< Ak5069@i '0) (string->symbol (list->string (if Ak506a@carry? (cons '#\a Ak506b@accum) Ak506b@accum))) (if Ak506a@carry? ((lambda (Ak506f@next-integer) (if (= Ak506f@next-integer '123) (Ak5067@loop (- Ak5069@i '1) '#f (cons '#\A Ak506b@accum)) (if (= Ak506f@next-integer '91) (Ak5067@loop (- Ak5069@i '1) '#t (cons '#\a Ak506b@accum)) (Ak5067@loop (- Ak5069@i '1) '#f (cons (integer->char Ak506f@next-integer) Ak506b@accum))))) (+ '1 (char->integer (string-ref Ak5063@prefix Ak5069@i)))) (Ak5067@loop (- Ak5069@i '1) '#f (cons (string-ref Ak5063@prefix Ak5069@i) Ak506b@accum))))))) Ak5067@loop) (- Ak5065@len '1) '#t '())))) (string-length Ak5063@prefix))) (symbol->string Ak5061@prefix-string)))) (set! Ak4f32@prefix-inc! (lambda (Ak5071@file) (begin (if (not (file-exists? Ak5071@file)) (call-with-output-file Ak5071@file (lambda (Ak5073@port) (write 'd Ak5073@port))) (void)) ((lambda (Ak5075@prefix) ((lambda (Ak5077@next-prefix) ((lambda () (begin (call-with-output-file Ak5071@file (lambda (Ak5079@port) (write Ak5077@next-prefix Ak5079@port))) Ak5075@prefix)))) (Ak4f30@prefix-inc Ak5075@prefix))) (call-with-input-file Ak5071@file read))))) (begin (set! Ak5091@Ak4f32@prefix-inc! Ak4f32@prefix-inc!) (set! Ak5090@Ak4f30@prefix-inc Ak4f30@prefix-inc) (set! Ak508f@Ak4f2e@load-r6rs-top-level-sexp Ak4f2e@load-r6rs-top-level-sexp) (set! Ak508e@Ak4f2c@load-r6rs-top-level Ak4f2c@load-r6rs-top-level) (set! Ak508d@Ak4f2a@pre-compile-r6rs-file Ak4f2a@pre-compile-r6rs-file) (set! Ak508c@Ak4f28@compile->closure Ak4f28@compile->closure) (set! Ak508b@Ak4f26@compile Ak4f26@compile) (set! Ak508a@Ak4f24@compile-system-libraries Ak4f24@compile-system-libraries) (set! Ak5089@Ak4f22@eval-top-level Ak4f22@eval-top-level) (set! Ak5088@Ak4f20@ironscheme-build Ak4f20@ironscheme-build) (set! Ak5087@Ak4f1e@load Ak4f1e@load) (set! Ak5086@Ak4f1c@load/args Ak4f1c@load/args) (set! Ak5085@Ak4f1a@local-library-path Ak4f1a@local-library-path) (set! Ak5084@Ak4f18@command-line Ak4f18@command-line) (set! Ak5083@Ak4f16@trace-printer Ak4f16@trace-printer) (set! Ak5082@Ak4f14@repl Ak4f14@repl) (set! Ak5081@Ak4f12@map-with-index Ak4f12@map-with-index) (set! Ak5080@Ak4f10@record->field-alist Ak4f10@record->field-alist) (set! Ak507f@Ak4f0e@condition-printer Ak4f0e@condition-printer) (set! Ak507e@Ak4f0c@rpad Ak4f0c@rpad) (set! Ak507d@Ak4f0a@for-each-with-index Ak4f0a@for-each-with-index) (set! Ak507c@Ak4f08@parse-and-add-library-path Ak4f08@parse-and-add-library-path) (set! Ak507b@Ak4f06@add-library-path! Ak4f06@add-library-path!) (Ak2c61@Ak2aa2@current-precompiled-library-loader Ak299e@Ak2879@load-serialized-library) (set-symbol-value! 'load Ak4f1e@load) (set-symbol-value! 'pre-compile-r6rs-file Ak4f2a@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs Ak4f22@eval-top-level) (set-symbol-value! 'int-env-syms Ak4b24@Ak30f6@interaction-environment-symbols) (set-symbol-value! 'expanded2core Ak29f8@Ak29b0@expanded->core) (set-symbol-value! 'trace-printer Ak4f16@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (Ak4f33@c) (condition (Ak4e63@Ak4c6d@make-non-continuable-violation) (Ak4e59@Ak4c54@make-who-condition 'raise) (Ak4e1d@Ak4bb5@make-message-condition '"returned from non-continuable exception") (Ak4e4f@Ak4c39@make-irritants-condition (list Ak4f33@c))))) (Ak4f08@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (Ak4f08@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (Ak4f06@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (Ak4f06@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (Ak4f06@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (Ak4f35@prefix) (Ak2c5d@Ak2a9a@library-extensions (Ak4f35@prefix '".mosh" (Ak2c5d@Ak2a9a@library-extensions)))) (lambda (Ak4f37@ext Ak4f38@ls) (append (map (lambda (Ak4f3b@x) (string-append Ak4f37@ext Ak4f3b@x)) Ak4f38@ls) Ak4f38@ls))) ((lambda (Ak4f3d@args Ak4f3e@port) ((lambda (Ak4f42@ref) (begin (set! Ak4f42@ref (lambda (Ak4f63@rtd Ak4f64@i Ak4f65@x) ((lambda (Ak4f69@val) (if (symbol? Ak4f69@val) (ungensym Ak4f69@val) Ak4f69@val)) ((record-accessor Ak4f63@rtd Ak4f64@i) Ak4f65@x)))) (with-exception-handler (lambda (Ak4f43@c) (if (condition? Ak4f43@c) (Ak4f0e@condition-printer Ak4f43@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" Ak4f43@c))) (lambda () (if ((call/cc (lambda (Ak4f47@Ak4f45) (lambda () (with-exception-handler (lambda (Ak4f49@c) ((call/cc (lambda (Ak4f4b@Ak4f46) (Ak4f47@Ak4f45 (lambda () (if '#t '#f (Ak4f4b@Ak4f46 (lambda () (raise-continuable Ak4f49@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (Ak4f2e@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? Ak4f3d@args) ((lambda (Ak4f55@Ak4f4e Ak4f56@Ak4f50 Ak4f57@Ak4f52 Ak4f58@Ak4f54) ((lambda (Ak4f5d@swap) (dynamic-wind Ak4f5d@swap (lambda () (begin (if (Ak29a3@Ak2883@mosh-cache-dir) (gensym-prefix-set! (Ak4f32@prefix-inc! (string-append (Ak29a3@Ak2883@mosh-cache-dir) '"/prefix.txt"))) (void)) (Ak4f14@repl))) Ak4f5d@swap)) (lambda () (begin ((lambda (Ak4f5f@t) (begin (Ak4f55@Ak4f4e Ak4f57@Ak4f52) (set! Ak4f57@Ak4f52 Ak4f5f@t))) (Ak4f55@Ak4f4e)) ((lambda (Ak4f61@t) (begin (Ak4f56@Ak4f50 Ak4f58@Ak4f54) (set! Ak4f58@Ak4f54 Ak4f61@t))) (Ak4f56@Ak4f50)))))) Ak4f18@command-line Ak29a3@Ak2883@mosh-cache-dir '() (create-mosh-cache-dir)) (Ak4f2c@load-r6rs-top-level (car Ak4f3d@args) 'load (cdr Ak4f3d@args)))))))) '#f)) (Ak4f18@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
