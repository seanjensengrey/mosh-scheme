;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (q27a9@read-annotated q27ab@annotation-stripped q27ad@annotation? q27af@annotation-source q27b1@annotation-expression q27b3@scm->fasl q27b5@fasl-save q27b7@fasl-load q27b9@serialize-library q27bb@load-serialized-library q27bd@make-record-printer q27bf@compile-core q27c1@read-library-source-file q27c3@make-parameter q282b@file-options-spec) (begin (set! q27a9@read-annotated read) (set! q27ab@annotation-stripped (lambda (q282c@x) (q27b1@annotation-expression q282c@x))) (set! q27ad@annotation? (lambda (q282e@x) (source-info q282e@x))) (set! q27af@annotation-source (lambda (q2830@x) (source-info q2830@x))) (set! q27b1@annotation-expression (lambda (q2832@x) (if (pair? q2832@x) (cons (car q2832@x) (cdr q2832@x)) (display '"line:46\n")))) (set! q27b3@scm->fasl (lambda (q2834@filename) (string-append q2834@filename '".mosh-fasl"))) (set! q27b5@fasl-save (lambda (q2836@filename q2837@obj) (call-with-port (open-file-output-port q2836@filename) (lambda (q283a@port) ((symbol-value 'fasl-write!) q2837@obj q283a@port))))) (set! q27b7@fasl-load (lambda (q283c@filename) (call-with-port (open-file-input-port q283c@filename) (symbol-value 'fasl-read!)))) (set! q27b9@serialize-library (lambda (q283e@filename q283f@obj) (begin (format '#t '"serialize-library ~a\n..." q283e@filename) ((lambda (q2842@expanded2core) ((lambda (q2844@compile) ((lambda (q2846@code) ((lambda (q2848@pivot) ((lambda (q284a@visit) ((lambda () (begin (set-car! q2848@pivot q284a@visit) ((lambda (q284c@pivot) ((lambda (q284e@invoke) ((lambda () (set-car! q284c@pivot q284e@invoke)))) (q2844@compile (q2842@expanded2core (car q284c@pivot))))) (cdr q2848@pivot)))))) (q2844@compile (q2842@expanded2core (car q2848@pivot))))) (cddddr (cddddr q2846@code)))) q283f@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (q2850@fasl-file) (begin (if (file-exists? q2850@fasl-file) (delete-file q2850@fasl-file) (void)) ((call/cc (lambda (q2854@q2852) (lambda () (with-exception-handler (lambda (q2856@c) ((call/cc (lambda (q2858@q2853) (q2854@q2852 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " q283e@filename) (if (file-exists? q2850@fasl-file) (delete-file q2850@fasl-file) (void)) '#f) (q2858@q2853 (lambda () (raise-continuable q2856@c)))))))))) (lambda () (begin (q27b5@fasl-save q2850@fasl-file q283f@obj) (display '"OK\n")))))))))) (q27b3@scm->fasl q283e@filename))))) (set! q27bb@load-serialized-library (lambda (q285a@filename q285b@obj) ((lambda (q285e@fasl-file) (if (and (file-exists? q285e@fasl-file) ((symbol-value 'file-newer?) q285e@fasl-file q285a@filename)) ((lambda (q2860@expanded2core) ((lambda (q2862@eval-compiled-core) ((lambda (q2864@code) ((lambda (q2866@pivot) ((lambda (q2868@visit) ((lambda (q286a@visit-proc) ((lambda () (begin (set-car! q2866@pivot q286a@visit-proc) ((lambda (q286c@pivot) ((lambda (q286e@invoke) ((lambda () (begin (set-car! q286c@pivot (lambda () (q2862@eval-compiled-core q286e@invoke))) (apply q285b@obj q2864@code))))) (car q286c@pivot))) (cdr q2866@pivot)) '#t)))) (lambda () (q2862@eval-compiled-core q2868@visit)))) (car q2866@pivot))) (cddddr (cddddr q2864@code)))) (q27b7@fasl-load q285e@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (q27b3@scm->fasl q285a@filename)))) (set! q27bd@make-record-printer (lambda (q2870@name q2871@printer) (lambda q2874@x (begin (display '"record printer") (for-each display q2874@x))))) (set! q27bf@compile-core (lambda q2876@x (apply error 'comile-core '"not implementated" q2876@x))) (set! q27c1@read-library-source-file (lambda (q2878@file-name) (with-input-from-file q2878@file-name q27a9@read-annotated))) (set! q27c3@make-parameter (lambda q2888 ((lambda (q2889) (if (= q2889 '1) (apply (lambda (q287a@x) (q27c3@make-parameter q287a@x (lambda (q287c@x) q287c@x))) q2888) (if (= q2889 '2) (apply (lambda (q287e@x q287f@fender) ((lambda (q2882@x) (lambda q2886 ((lambda (q2887) (if (= q2887 '0) (apply (lambda () q2882@x) q2886) (if (= q2887 '1) (apply (lambda (q2884@v) (set! q2882@x (q287f@fender q2884@v))) q2886) (error 'apply '"invalid arg count")))) (length q2886)))) (q287f@fender q287e@x))) q2888) (error 'apply '"invalid arg count")))) (length q2888)))) (set! q282b@file-options-spec (lambda (q288a@x) q288a@x)) (begin (set! q289a@q282b@file-options-spec q282b@file-options-spec) (set! q2899@q27c3@make-parameter q27c3@make-parameter) (set! q2898@q27c1@read-library-source-file q27c1@read-library-source-file) (set! q2897@q27bf@compile-core q27bf@compile-core) (set! q2896@q27bd@make-record-printer q27bd@make-record-printer) (set! q2895@q27bb@load-serialized-library q27bb@load-serialized-library) (set! q2894@q27b9@serialize-library q27b9@serialize-library) (set! q2893@q27b7@fasl-load q27b7@fasl-load) (set! q2892@q27b5@fasl-save q27b5@fasl-save) (set! q2891@q27b3@scm->fasl q27b3@scm->fasl) (set! q2890@q27b1@annotation-expression q27b1@annotation-expression) (set! q288f@q27af@annotation-source q27af@annotation-source) (set! q288e@q27ad@annotation? q27ad@annotation?) (set! q288d@q27ab@annotation-stripped q27ab@annotation-stripped) (set! q288c@q27a9@read-annotated q27a9@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q289f@current-primitive-locations q28a1@mutable? q28a3@rewriter q28a5@expanded->core q28a7@compile-core-expr q28a9@pretty-print q28ab@compile-core-expr-to-port) (begin (set! q289f@current-primitive-locations (q2899@q27c3@make-parameter (lambda (q28ac@x) '#f) (lambda (q28ae@p) q28ae@p))) (set! q28a1@mutable? (lambda (q28b0@x) (or (pair? q28b0@x) (vector? q28b0@x) (hashtable? q28b0@x)))) (set! q28a3@rewriter (lambda (q28b2@quote-hack?) ((lambda (q28b5@f) (begin (set! q28b5@f (lambda (q28b6@x) (if (pair? q28b6@x) ((lambda (q28b8@t) (if (memv q28b8@t '(quote)) (if (and q28b2@quote-hack? (q28a1@mutable? (cadr q28b6@x))) ((lambda (q28ba@g) (begin (set-symbol-value! q28ba@g (cadr q28b6@x)) q28ba@g)) (gensym)) q28b6@x) (if (memv q28b8@t '(case-lambda)) (cons 'case-lambda (map (lambda (q28bc@x) (cons (car q28bc@x) (map q28b5@f (cdr q28bc@x)))) (cdr q28b6@x))) (if (memv q28b8@t '(lambda)) (cons* 'lambda (cadr q28b6@x) (map q28b5@f (cddr q28b6@x))) (if (memv q28b8@t '(letrec)) ((lambda (q28be@bindings q28bf@body*) ((lambda (q28c2@lhs* q28c3@rhs*) (cons* 'letrec (map list q28c2@lhs* (map q28b5@f q28c3@rhs*)) (map q28b5@f q28bf@body*))) (map car q28be@bindings) (map cadr q28be@bindings))) (cadr q28b6@x) (cddr q28b6@x)) (if (memv q28b8@t '(letrec*)) ((lambda (q28c6@bindings q28c7@body*) ((lambda (q28ca@lhs* q28cb@rhs*) (cons* 'letrec* (map list q28ca@lhs* (map q28b5@f q28cb@rhs*)) (map q28b5@f q28c7@body*))) (map car q28c6@bindings) (map cadr q28c6@bindings))) (cadr q28b6@x) (cddr q28b6@x)) (if (memv q28b8@t '(library-letrec*)) ((lambda (q28ce@name q28cf@x) ((lambda (q28d2@bindings q28d3@body*) ((lambda (q28d6@lhs* q28d7@lhs** q28d8@rhs*) (cons* 'library-letrec* q28ce@name (map list q28d6@lhs* q28d7@lhs** (map q28b5@f q28d8@rhs*)) (map q28b5@f q28d3@body*))) (map car q28d2@bindings) (map cadr q28d2@bindings) (map caddr q28d2@bindings))) (cadr q28cf@x) (cddr q28cf@x))) (cadr q28b6@x) (cdr q28b6@x)) (if (memv q28b8@t '(begin)) (cons 'begin (map q28b5@f (cdr q28b6@x))) (if (memv q28b8@t '(set!)) (list 'set! (cadr q28b6@x) (q28b5@f (caddr q28b6@x))) (if (memv q28b8@t '(primitive)) ((lambda (q28dc@op) ((lambda (q28de@t) (if q28de@t ((lambda (q28e0@loc) q28e0@loc) q28de@t) q28dc@op)) ((q289f@current-primitive-locations) q28dc@op))) (cadr q28b6@x)) (if (memv q28b8@t '(define)) q28b6@x (if (list? q28b6@x) (map q28b5@f q28b6@x) (error 'rewrite '"invalid form ~s ~s" q28b6@x (list? q28b6@x)))))))))))))) (car q28b6@x)) q28b6@x))) q28b5@f)) '#f))) (set! q28a5@expanded->core (lambda (q28e2@x) ((q28a3@rewriter '#f) q28e2@x))) (set! q28a7@compile-core-expr (lambda (q28e4@x) ((q28a3@rewriter '#f) q28e4@x))) (set! q28a9@pretty-print write) (set! q28ab@compile-core-expr-to-port (lambda (q28e6@x q28e7@p) (q28a9@pretty-print ((q28a3@rewriter '#f) q28e6@x) q28e7@p))) (begin (set! q28f0@q28ab@compile-core-expr-to-port q28ab@compile-core-expr-to-port) (set! q28ef@q28a9@pretty-print q28a9@pretty-print) (set! q28ee@q28a7@compile-core-expr q28a7@compile-core-expr) (set! q28ed@q28a5@expanded->core q28a5@expanded->core) (set! q28ec@q28a3@rewriter q28a3@rewriter) (set! q28eb@q28a1@mutable? q28a1@mutable?) (set! q28ea@q289f@current-primitive-locations q289f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (q293f@make-collection q2941@current-library-collection q2947@q2942 q2949@q2944 q294b@q2943 q294e@library? q2950@make-library q2952@library-id q2954@library-name q2956@library-version q2958@library-imp* q295a@library-vis* q295c@library-inv* q295e@library-subst q2960@library-env q2962@library-visit-state q2964@library-invoke-state q2966@library-visit-code q2968@library-invoke-code q296a@library-visible? q296c@library-source-file-name q296e@set-library-id! q2970@set-library-name! q2972@set-library-version! q2974@set-library-imp*! q2976@set-library-vis*! q2978@set-library-inv*! q297a@set-library-subst! q297c@set-library-env! q297e@set-library-visit-state! q2980@set-library-invoke-state! q2982@set-library-visit-code! q2984@set-library-invoke-code! q2986@set-library-visible?! q2988@set-library-source-file-name! q298a@rp q298c@find-dependencies q298e@find-library-by q2990@library-path q2992@library-extensions q2994@library-name->file-name q2996@file-locator q2998@serialize-all q299a@current-precompiled-library-loader q299c@try-load-from-file q299e@library-loader q29a0@current-library-expander q29a2@external-pending-libraries q29a4@find-external-library q29a6@find-library-by-name q29a8@library-exists? q29aa@find-library-by-spec/die q29ac@label->binding-table q29ae@install-library-record q29b0@install-library q29b2@imported-label->binding q29b4@invoke-library q29b6@visit-library q29b8@invoke-library-by-spec q29ba@installed-libraries q29bc@library-spec) (begin (set! q293f@make-collection (lambda () ((lambda (q29bd@set) ((lambda (q29c0@set-cons) (begin (set! q29c0@set-cons (lambda (q29c5@x q29c6@ls) (if (memq q29c5@x q29c6@ls) q29c6@ls (cons q29c5@x q29c6@ls)))) (lambda q29c3 ((lambda (q29c4) (if (= q29c4 '0) (apply (lambda () q29bd@set) q29c3) (if (= q29c4 '1) (apply (lambda (q29c1@x) (set! q29bd@set (q29c0@set-cons q29c1@x q29bd@set))) q29c3) (error 'apply '"invalid arg count")))) (length q29c3))))) '#f)) '()))) (set! q2941@current-library-collection (q2899@q27c3@make-parameter (q293f@make-collection) (lambda (q29c9@x) (begin (if (not (procedure? q29c9@x)) (assertion-violation 'current-library-collection '"not a procedure" q29c9@x) (void)) q29c9@x)))) (set! q2947@q2942 (make-record-type-descriptor 'library '#f 'q2945 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! q2949@q2944 '#f) (set! q294b@q2943 (make-record-constructor-descriptor q2947@q2942 '#f q2949@q2944)) (set! q294e@library? (record-predicate q2947@q2942)) (set! q2950@make-library (record-constructor q294b@q2943)) (set! q2952@library-id (record-accessor q2947@q2942 '0)) (set! q2954@library-name (record-accessor q2947@q2942 '1)) (set! q2956@library-version (record-accessor q2947@q2942 '2)) (set! q2958@library-imp* (record-accessor q2947@q2942 '3)) (set! q295a@library-vis* (record-accessor q2947@q2942 '4)) (set! q295c@library-inv* (record-accessor q2947@q2942 '5)) (set! q295e@library-subst (record-accessor q2947@q2942 '6)) (set! q2960@library-env (record-accessor q2947@q2942 '7)) (set! q2962@library-visit-state (record-accessor q2947@q2942 '8)) (set! q2964@library-invoke-state (record-accessor q2947@q2942 '9)) (set! q2966@library-visit-code (record-accessor q2947@q2942 '10)) (set! q2968@library-invoke-code (record-accessor q2947@q2942 '11)) (set! q296a@library-visible? (record-accessor q2947@q2942 '12)) (set! q296c@library-source-file-name (record-accessor q2947@q2942 '13)) (set! q296e@set-library-id! (record-mutator q2947@q2942 '0)) (set! q2970@set-library-name! (record-mutator q2947@q2942 '1)) (set! q2972@set-library-version! (record-mutator q2947@q2942 '2)) (set! q2974@set-library-imp*! (record-mutator q2947@q2942 '3)) (set! q2976@set-library-vis*! (record-mutator q2947@q2942 '4)) (set! q2978@set-library-inv*! (record-mutator q2947@q2942 '5)) (set! q297a@set-library-subst! (record-mutator q2947@q2942 '6)) (set! q297c@set-library-env! (record-mutator q2947@q2942 '7)) (set! q297e@set-library-visit-state! (record-mutator q2947@q2942 '8)) (set! q2980@set-library-invoke-state! (record-mutator q2947@q2942 '9)) (set! q2982@set-library-visit-code! (record-mutator q2947@q2942 '10)) (set! q2984@set-library-invoke-code! (record-mutator q2947@q2942 '11)) (set! q2986@set-library-visible?! (record-mutator q2947@q2942 '12)) (set! q2988@set-library-source-file-name! (record-mutator q2947@q2942 '13)) (set! q298a@rp (q2896@q27bd@make-record-printer 'library (lambda (q29cb@x q29cc@p q29cd@wr) (begin (if (not (q294e@library? q29cb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (q2956@library-version q29cb@x)) (q2954@library-name q29cb@x) (append (q2954@library-name q29cb@x) (list (q2956@library-version q29cb@x))))) q29cc@p))))) (set! q298c@find-dependencies (lambda (q29d1@ls) (if (null? q29d1@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! q298e@find-library-by (lambda (q29d3@pred) ((letrec ((q29d5@f (lambda (q29d7@ls) (if (null? q29d7@ls) '#f (if (q29d3@pred (car q29d7@ls)) (car q29d7@ls) (q29d5@f (cdr q29d7@ls))))))) q29d5@f) ((q2941@current-library-collection))))) (set! q2990@library-path (q2899@q27c3@make-parameter '(".") (lambda (q29d9@x) (if (and (list? q29d9@x) (for-all string? q29d9@x)) (map (lambda (q29db@x) q29db@x) q29d9@x) (assertion-violation 'library-path '"not a list of strings" q29d9@x))))) (set! q2992@library-extensions (q2899@q27c3@make-parameter '(".sls" ".ss" ".scm") (lambda (q29dd@x) (if (and (list? q29dd@x) (for-all string? q29dd@x)) (map (lambda (q29df@x) q29df@x) q29dd@x) (assertion-violation 'library-extensions '"not a list of strings" q29dd@x))))) (set! q2994@library-name->file-name (lambda (q29e1@x) (call-with-values (lambda () (open-string-output-port)) (lambda (q29e7@q29e4 q29e8@q29e6) ((lambda (q29eb@extract q29ec@p) ((lambda (q29f0@display-hex) (begin (set! q29f0@display-hex (lambda (q29f9@n) (if (<= '0 q29f9@n '9) (display q29f9@n q29ec@p) (display (integer->char (+ (char->integer '#\a) (- q29f9@n '10))) q29ec@p)))) (begin ((letrec ((q29f1@f (lambda (q29f3@ls) (if (not (null? q29f3@ls)) (begin (display '"/" q29ec@p) (for-each (lambda (q29f5@c) (if (or (char<=? '#\a q29f5@c '#\z) (char<=? '#\A q29f5@c '#\Z) (char<=? '#\0 q29f5@c '#\9) (memv q29f5@c '(#\- #\. #\_ #\~))) (display q29f5@c q29ec@p) (begin (display '"%" q29ec@p) ((lambda (q29f7@n) (begin (q29f0@display-hex (quotient q29f7@n '16)) (q29f0@display-hex (remainder q29f7@n '16)))) (char->integer q29f5@c))))) (string->list (symbol->string (car q29f3@ls)))) (q29f1@f (cdr q29f3@ls))) (void))))) q29f1@f) q29e1@x) (q29eb@extract)))) '#f)) q29e8@q29e6 q29e7@q29e4))))) (set! q2996@file-locator (q2899@q27c3@make-parameter (lambda (q29fb@x) ((lambda (q29fd@str) ((letrec ((q29ff@f (lambda (q2a01@ls q2a02@exts q2a03@failed-list) (if (null? q2a01@ls) ((lambda () ((lambda (q2a0f@q2a0a q2a11@q2a0c q2a13@q2a0b q2a16@q2a09 q2a18@make-library-resolution-condition q2a1a@q2a07 q2a1c@q2a08 q2a1e@library-resolution-condition? q2a20@condition-library q2a22@condition-files) (begin (set! q2a0f@q2a0a (make-record-type-descriptor '&library-resolution q4caa@q49f1@&condition-rtd 'q2a0d '#f '#f '#((immutable library) (immutable files)))) (set! q2a11@q2a0c '#f) (set! q2a13@q2a0b (make-record-constructor-descriptor q2a0f@q2a0a q4cab@q49f3@&condition-rcd q2a11@q2a0c)) (set! q2a16@q2a09 (record-predicate q2a0f@q2a0a)) (set! q2a18@make-library-resolution-condition (record-constructor q2a13@q2a0b)) (set! q2a1a@q2a07 (record-accessor q2a0f@q2a0a '0)) (set! q2a1c@q2a08 (record-accessor q2a0f@q2a0a '1)) (set! q2a1e@library-resolution-condition? (condition-predicate q2a0f@q2a0a)) (set! q2a20@condition-library (condition-accessor q2a0f@q2a0a q2a1a@q2a07)) (set! q2a22@condition-files (condition-accessor q2a0f@q2a0a q2a1c@q2a08)) (raise (condition (q4cca@q4a8b@make-error) (q4cec@q4ae7@make-who-condition 'expander) (q4cb0@q4a48@make-message-condition '"cannot locate library in library-path") (q2a18@make-library-resolution-condition q29fb@x (reverse q2a03@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? q2a02@exts) (q29ff@f (cdr q2a01@ls) (q2992@library-extensions) q2a03@failed-list) ((lambda (q2a23@name) (if (file-exists? q2a23@name) q2a23@name (q29ff@f q2a01@ls (cdr q2a02@exts) (cons q2a23@name q2a03@failed-list)))) (string-append (car q2a01@ls) q29fd@str (car q2a02@exts)))))))) q29ff@f) (q2990@library-path) (q2992@library-extensions) '())) (q2994@library-name->file-name q29fb@x))) (lambda (q2a25@f) (if (procedure? q2a25@f) q2a25@f (assertion-violation 'file-locator '"not a procedure" q2a25@f))))) (set! q2998@serialize-all (lambda (q2a27@serialize q2a28@compile) ((lambda (q2a2c@library-desc) (begin (set! q2a2c@library-desc (lambda (q2a2f@x) (list (q2952@library-id q2a2f@x) (q2954@library-name q2a2f@x)))) (for-each (lambda (q2a2d@x) (if (q296c@library-source-file-name q2a2d@x) (q2a27@serialize (q296c@library-source-file-name q2a2d@x) (list (q2952@library-id q2a2d@x) (q2954@library-name q2a2d@x) (q2956@library-version q2a2d@x) (map q2a2c@library-desc (q2958@library-imp* q2a2d@x)) (map q2a2c@library-desc (q295a@library-vis* q2a2d@x)) (map q2a2c@library-desc (q295c@library-inv* q2a2d@x)) (q295e@library-subst q2a2d@x) (q2960@library-env q2a2d@x) (q2a28@compile (q2966@library-visit-code q2a2d@x)) (q2a28@compile (q2968@library-invoke-code q2a2d@x)) (q296a@library-visible? q2a2d@x))) (void))) ((q2941@current-library-collection))))) '#f))) (set! q299a@current-precompiled-library-loader (q2899@q27c3@make-parameter (lambda (q2a31@filename q2a32@sk) '#f))) (set! q299c@try-load-from-file (lambda (q2a35@filename) ((q299a@current-precompiled-library-loader) q2a35@filename (lambda q2a5b ((lambda (q2a5c) (if (= q2a5c '11) (apply (lambda (q2a37@id q2a38@name q2a39@ver q2a3a@imp* q2a3b@vis* q2a3c@inv* q2a3d@exp-subst q2a3e@exp-env q2a3f@visit-proc q2a40@invoke-proc q2a41@visible?) ((letrec ((q2a4d@f (lambda (q2a4f@deps) (if (null? q2a4f@deps) (begin (q29b0@install-library q2a37@id q2a38@name q2a39@ver q2a3a@imp* q2a3b@vis* q2a3c@inv* q2a3d@exp-subst q2a3e@exp-env q2a3f@visit-proc q2a40@invoke-proc '#f '#f q2a41@visible? '#f) '#t) ((lambda (q2a51@d) ((lambda (q2a53@label q2a54@dname) ((lambda (q2a57@l) (if (and (q294e@library? q2a57@l) (eq? q2a53@label (q2952@library-id q2a57@l))) (q2a4d@f (cdr q2a4f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" q2a38@name q2a54@dname q2a35@filename q2a57@l q2a53@label (q2952@library-id q2a57@l)) '#f))) (q29a6@find-library-by-name q2a54@dname))) (car q2a51@d) (cadr q2a51@d))) (car q2a4f@deps)))))) q2a4d@f) (append q2a3a@imp* q2a3b@vis* q2a3c@inv*))) q2a5b) (if (>= q2a5c '0) (apply (lambda q2a59@others '#f) q2a5b) (error 'apply '"invalid arg count")))) (length q2a5b)))))) (set! q299e@library-loader (q2899@q27c3@make-parameter (lambda (q2a5d@x) ((lambda (q2a5f@file-name) (if (not q2a5f@file-name) (assertion-violation '#f '"cannot file library" q2a5d@x) (or (q299c@try-load-from-file q2a5f@file-name) ((q29a0@current-library-expander) (q2898@q27c1@read-library-source-file q2a5f@file-name) q2a5f@file-name (lambda (q2a61@name) (if (not (fast-equal? q2a61@name q2a5d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (q2a67@q2a64 q2a68@q2a66) ((lambda (q2a6b@e q2a6c@p) (begin (display '"expected to find library " q2a6c@p) (write q2a5d@x q2a6c@p) (display '" in file " q2a6c@p) (display q2a5f@file-name q2a6c@p) (display '", found " q2a6c@p) (write q2a61@name q2a6c@p) (display '" instead" q2a6c@p) (q2a6b@e))) q2a68@q2a66 q2a67@q2a64)))) (void))))))) ((q2996@file-locator) q2a5d@x))) (lambda (q2a6f@f) (if (procedure? q2a6f@f) q2a6f@f (assertion-violation 'library-locator '"not a procedure" q2a6f@f))))) (set! q29a0@current-library-expander (q2899@q27c3@make-parameter (lambda (q2a71@x) (assertion-violation 'library-expander '"not initialized")) (lambda (q2a73@f) (if (procedure? q2a73@f) q2a73@f (assertion-violation 'library-expander '"not a procedure" q2a73@f))))) (set! q29a2@external-pending-libraries (q2899@q27c3@make-parameter '())) (set! q29a4@find-external-library (lambda (q2a75@name) (begin (if (member q2a75@name (q29a2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" q2a75@name) (void)) ((lambda (q2a7b@q2a78 q2a7c@q2a7a) ((lambda (q2a7f@swap) (dynamic-wind q2a7f@swap (lambda () (begin ((q299e@library-loader) q2a75@name) (or (q298e@find-library-by (lambda (q2a81@x) (fast-equal? (q2954@library-name q2a81@x) q2a75@name))) (assertion-violation '#f '"handling external library did not yield the correct library" q2a75@name)))) q2a7f@swap)) (lambda () ((lambda (q2a83@t) (begin (q2a7b@q2a78 q2a7c@q2a7a) (set! q2a7c@q2a7a q2a83@t))) (q2a7b@q2a78))))) q29a2@external-pending-libraries (cons q2a75@name (q29a2@external-pending-libraries)))))) (set! q29a6@find-library-by-name (lambda (q2a85@name) (or (q298e@find-library-by (lambda (q2a87@x) (fast-equal? (q2954@library-name q2a87@x) q2a85@name))) (q29a4@find-external-library q2a85@name)))) (set! q29a8@library-exists? (lambda (q2a89@name) (and (q298e@find-library-by (lambda (q2a8b@x) (fast-equal? (q2954@library-name q2a8b@x) q2a89@name))) '#t))) (set! q29aa@find-library-by-spec/die (lambda (q2a8d@spec) ((lambda (q2a8f@id) (or (q298e@find-library-by (lambda (q2a91@x) (eq? q2a8f@id (q2952@library-id q2a91@x)))) (assertion-violation '#f '"cannot find library with required spec" q2a8d@spec))) (car q2a8d@spec)))) (set! q29ac@label->binding-table (make-eq-hashtable)) (set! q29ae@install-library-record (lambda (q2a93@lib) (begin ((lambda (q2a95@exp-env) (for-each (lambda (q2a97@x) ((lambda (q2a99@label q2a9a@binding) ((lambda (q2a9d@binding) (begin (if (hashtable-ref q29ac@label->binding-table q2a99@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" q2a99@label (hashtable-ref q29ac@label->binding-table q2a99@label '#f) q2a9d@binding) (exit)) (void)) (hashtable-set! q29ac@label->binding-table q2a99@label q2a9d@binding))) ((lambda (q2a9f@t) (if (memv q2a9f@t '(global)) (cons 'global (cons q2a93@lib (cdr q2a9a@binding))) (if (memv q2a9f@t '(global-macro)) (cons 'global-macro (cons q2a93@lib (cdr q2a9a@binding))) (if (memv q2a9f@t '(global-macro!)) (cons 'global-macro! (cons q2a93@lib (cdr q2a9a@binding))) q2a9a@binding)))) (car q2a9a@binding)))) (car q2a97@x) (cdr q2a97@x))) q2a95@exp-env)) (q2960@library-env q2a93@lib)) ((q2941@current-library-collection) q2a93@lib)))) (set! q29b0@install-library (lambda (q2aa1@id q2aa2@name q2aa3@ver q2aa4@imp* q2aa5@vis* q2aa6@inv* q2aa7@exp-subst q2aa8@exp-env q2aa9@visit-proc q2aaa@invoke-proc q2aab@visit-code q2aac@invoke-code q2aad@visible? q2aae@source-file-name) ((lambda (q2abd@imp-lib* q2abe@vis-lib* q2abf@inv-lib*) (begin (if (not (and (symbol? q2aa1@id) (list? q2aa2@name) (list? q2aa3@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" q2aa1@id q2aa2@name q2aa3@ver) (void)) (if (q29a8@library-exists? q2aa2@name) (assertion-violation 'install-library '"library is already installed" q2aa2@name) (void)) ((lambda (q2ac3@lib) (q29ae@install-library-record q2ac3@lib)) (q2950@make-library q2aa1@id q2aa2@name q2aa3@ver q2abd@imp-lib* q2abe@vis-lib* q2abf@inv-lib* q2aa7@exp-subst q2aa8@exp-env q2aa9@visit-proc q2aaa@invoke-proc q2aab@visit-code q2aac@invoke-code q2aad@visible? q2aae@source-file-name)))) (map q29aa@find-library-by-spec/die q2aa4@imp*) (map q29aa@find-library-by-spec/die q2aa5@vis*) (map q29aa@find-library-by-spec/die q2aa6@inv*)))) (set! q29b2@imported-label->binding (lambda (q2ac5@lab) (hashtable-ref q29ac@label->binding-table q2ac5@lab '#f))) (set! q29b4@invoke-library (lambda (q2ac7@lib) ((lambda (q2ac9@invoke) (if (procedure? q2ac9@invoke) (begin (q2980@set-library-invoke-state! q2ac7@lib (lambda () (assertion-violation 'invoke '"circularity detected" q2ac7@lib))) (for-each q29b4@invoke-library (q295c@library-inv* q2ac7@lib)) (q2980@set-library-invoke-state! q2ac7@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" q2ac7@lib))) (q2ac9@invoke) (q2980@set-library-invoke-state! q2ac7@lib '#t)) (void))) (q2964@library-invoke-state q2ac7@lib)))) (set! q29b6@visit-library (lambda (q2acb@lib) ((lambda (q2acd@visit) (if (procedure? q2acd@visit) (begin (q297e@set-library-visit-state! q2acb@lib (lambda () (assertion-violation 'visit '"circularity detected" q2acb@lib))) (for-each q29b4@invoke-library (q295a@library-vis* q2acb@lib)) (q297e@set-library-visit-state! q2acb@lib (lambda () (assertion-violation 'invoke '"first visit did not return" q2acb@lib))) (q2acd@visit) (q297e@set-library-visit-state! q2acb@lib '#t)) (void))) (q2962@library-visit-state q2acb@lib)))) (set! q29b8@invoke-library-by-spec (lambda (q2acf@spec) (q29b4@invoke-library (q29aa@find-library-by-spec/die q2acf@spec)))) (set! q29ba@installed-libraries (lambda q2ad7 ((lambda (q2ad8) (if (= q2ad8 '1) (apply (lambda (q2ad1@all?) ((letrec ((q2ad3@f (lambda (q2ad5@ls) (if (null? q2ad5@ls) '() (if (or q2ad1@all? (q296a@library-visible? (car q2ad5@ls))) (cons (car q2ad5@ls) (q2ad3@f (cdr q2ad5@ls))) (q2ad3@f (cdr q2ad5@ls))))))) q2ad3@f) ((q2941@current-library-collection)))) q2ad7) (if (= q2ad8 '0) (apply (lambda () (q29ba@installed-libraries '#f)) q2ad7) (error 'apply '"invalid arg count")))) (length q2ad7)))) (set! q29bc@library-spec (lambda (q2ad9@x) (begin (if (not (q294e@library? q2ad9@x)) (assertion-violation 'library-spec '"not a library" q2ad9@x) (void)) (list (q2952@library-id q2ad9@x) (q2954@library-name q2ad9@x) (q2956@library-version q2ad9@x))))) (begin (set! q2b17@q29bc@library-spec q29bc@library-spec) (set! q2b16@q29ba@installed-libraries q29ba@installed-libraries) (set! q2b15@q29b8@invoke-library-by-spec q29b8@invoke-library-by-spec) (set! q2b14@q29b6@visit-library q29b6@visit-library) (set! q2b13@q29b4@invoke-library q29b4@invoke-library) (set! q2b12@q29b2@imported-label->binding q29b2@imported-label->binding) (set! q2b11@q29b0@install-library q29b0@install-library) (set! q2b10@q29ae@install-library-record q29ae@install-library-record) (set! q2b0f@q29ac@label->binding-table q29ac@label->binding-table) (set! q2b0e@q29aa@find-library-by-spec/die q29aa@find-library-by-spec/die) (set! q2b0d@q29a8@library-exists? q29a8@library-exists?) (set! q2b0c@q29a6@find-library-by-name q29a6@find-library-by-name) (set! q2b0b@q29a4@find-external-library q29a4@find-external-library) (set! q2b0a@q29a2@external-pending-libraries q29a2@external-pending-libraries) (set! q2b09@q29a0@current-library-expander q29a0@current-library-expander) (set! q2b08@q299e@library-loader q299e@library-loader) (set! q2b07@q299c@try-load-from-file q299c@try-load-from-file) (set! q2b06@q299a@current-precompiled-library-loader q299a@current-precompiled-library-loader) (set! q2b05@q2998@serialize-all q2998@serialize-all) (set! q2b04@q2996@file-locator q2996@file-locator) (set! q2b03@q2994@library-name->file-name q2994@library-name->file-name) (set! q2b02@q2992@library-extensions q2992@library-extensions) (set! q2b01@q2990@library-path q2990@library-path) (set! q2b00@q298e@find-library-by q298e@find-library-by) (set! q2aff@q298c@find-dependencies q298c@find-dependencies) (set! q2afe@q298a@rp q298a@rp) (set! q2afd@q2988@set-library-source-file-name! q2988@set-library-source-file-name!) (set! q2afc@q2986@set-library-visible?! q2986@set-library-visible?!) (set! q2afb@q2984@set-library-invoke-code! q2984@set-library-invoke-code!) (set! q2afa@q2982@set-library-visit-code! q2982@set-library-visit-code!) (set! q2af9@q2980@set-library-invoke-state! q2980@set-library-invoke-state!) (set! q2af8@q297e@set-library-visit-state! q297e@set-library-visit-state!) (set! q2af7@q297c@set-library-env! q297c@set-library-env!) (set! q2af6@q297a@set-library-subst! q297a@set-library-subst!) (set! q2af5@q2978@set-library-inv*! q2978@set-library-inv*!) (set! q2af4@q2976@set-library-vis*! q2976@set-library-vis*!) (set! q2af3@q2974@set-library-imp*! q2974@set-library-imp*!) (set! q2af2@q2972@set-library-version! q2972@set-library-version!) (set! q2af1@q2970@set-library-name! q2970@set-library-name!) (set! q2af0@q296e@set-library-id! q296e@set-library-id!) (set! q2aef@q296c@library-source-file-name q296c@library-source-file-name) (set! q2aee@q296a@library-visible? q296a@library-visible?) (set! q2aed@q2968@library-invoke-code q2968@library-invoke-code) (set! q2aec@q2966@library-visit-code q2966@library-visit-code) (set! q2aeb@q2964@library-invoke-state q2964@library-invoke-state) (set! q2aea@q2962@library-visit-state q2962@library-visit-state) (set! q2ae9@q2960@library-env q2960@library-env) (set! q2ae8@q295e@library-subst q295e@library-subst) (set! q2ae7@q295c@library-inv* q295c@library-inv*) (set! q2ae6@q295a@library-vis* q295a@library-vis*) (set! q2ae5@q2958@library-imp* q2958@library-imp*) (set! q2ae4@q2956@library-version q2956@library-version) (set! q2ae3@q2954@library-name q2954@library-name) (set! q2ae2@q2952@library-id q2952@library-id) (set! q2ae1@q2950@make-library q2950@make-library) (set! q2ae0@q294e@library? q294e@library?) (set! q2adf@q294b@q2943 q294b@q2943) (set! q2ade@q2949@q2944 q2949@q2944) (set! q2add@q2947@q2942 q2947@q2942) (set! q2adc@q2941@current-library-collection q2941@current-library-collection) (set! q2adb@q293f@make-collection q293f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2b1a@build-global-define q2b8b@build-lambda q2b8d@build-case-lambda q2b8f@build-let q2bbd@build-sequence q2bbf@build-void q2bc1@build-letrec q2bc3@build-letrec* q2bc5@build-library-letrec* q2bc7@build-receive) (begin (set! q2b1a@build-global-define (lambda (q2bc8@x) (q2bbf@build-void))) (set! q2b8b@build-lambda (lambda (q2bca@ae q2bcb@vars q2bcc@exp) (list 'lambda q2bcb@vars q2bcc@exp))) (set! q2b8d@build-case-lambda (lambda (q2bd0@ae q2bd1@vars* q2bd2@exp*) ((lambda (q2bd7@build-error q2bd9@build-pred q2bdb@build-apply q2bdd@expand-case-lambda) (begin (set! q2bd7@build-error (lambda (q2c0e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! q2bd9@build-pred (lambda (q2bf6@ae q2bf7@n q2bf8@vars) (call-with-values (lambda () ((letrec ((q2c00@f (lambda (q2c02@vars q2c03@count) (if (pair? q2c02@vars) (q2c00@f (cdr q2c02@vars) (+ q2c03@count '1)) (if (null? q2c02@vars) (values q2c03@count '=) (values q2c03@count '>=)))))) q2c00@f) q2bf8@vars '0)) (lambda (q2c06@q2bfd q2c07@q2bff) ((lambda (q2c0a@pred q2c0b@count) (list (list 'primitive q2c0a@pred) q2bf7@n (list 'quote q2c0b@count))) q2c07@q2bff q2c06@q2bfd))))) (set! q2bdb@build-apply (lambda (q2bee@ae q2bef@g q2bf0@vars q2bf1@exp) (list '(primitive apply) (q2b8b@build-lambda q2bee@ae q2bf0@vars q2bf1@exp) q2bef@g))) (set! q2bdd@expand-case-lambda (lambda (q2bde@ae q2bdf@vars q2be0@exp*) ((lambda (q2be4@g q2be5@n) (list 'lambda q2be4@g (q2b8f@build-let q2bde@ae (list q2be5@n) (list (list '(primitive length) q2be4@g)) ((letrec ((q2be8@f (lambda (q2bea@vars* q2beb@exp*) (if (null? q2bea@vars*) (q2bd7@build-error q2bde@ae) (list 'if (q2bd9@build-pred q2bde@ae q2be5@n (car q2bea@vars*)) (q2bdb@build-apply q2bde@ae q2be4@g (car q2bea@vars*) (car q2beb@exp*)) (q2be8@f (cdr q2bea@vars*) (cdr q2beb@exp*))))))) q2be8@f) q2bd1@vars* q2be0@exp*)))) (gensym) (gensym)))) (if (= (length q2bd2@exp*) '1) (q2b8b@build-lambda q2bd0@ae (car q2bd1@vars*) (car q2bd2@exp*)) (q2bdd@expand-case-lambda q2bd0@ae q2bd1@vars* q2bd2@exp*)))) '#f '#f '#f '#f))) (set! q2b8f@build-let (lambda (q2c10@ae q2c11@lhs* q2c12@rhs* q2c13@body) (cons (q2b8b@build-lambda q2c10@ae q2c11@lhs* q2c13@body) q2c12@rhs*))) (set! q2bbd@build-sequence (lambda (q2c18@ae q2c19@exps) ((letrec ((q2c1c@loop (lambda (q2c1e@exps) (if (null? (cdr q2c1e@exps)) (car q2c1e@exps) (if (equal? (car q2c1e@exps) (q2bbf@build-void)) (q2c1c@loop (cdr q2c1e@exps)) (cons 'begin q2c1e@exps)))))) q2c1c@loop) q2c19@exps))) (set! q2bbf@build-void (lambda () '((primitive void)))) (set! q2bc1@build-letrec (lambda (q2c20@ae q2c21@vars q2c22@val-exps q2c23@body-exp) (if (null? q2c21@vars) q2c23@body-exp (list 'letrec (map list q2c21@vars q2c22@val-exps) q2c23@body-exp)))) (set! q2bc3@build-letrec* (lambda (q2c28@ae q2c29@vars q2c2a@val-exps q2c2b@body-exp) (if (null? q2c29@vars) q2c2b@body-exp (q2b8f@build-let q2c28@ae q2c29@vars (map (lambda (q2c30@x) (list 'quote '#f)) q2c29@vars) (q2bbd@build-sequence q2c28@ae (append (map (lambda (q2c32@lhs q2c33@rhs) (list 'set! q2c32@lhs q2c33@rhs)) q2c29@vars q2c2a@val-exps) (list q2c2b@body-exp))))))) (set! q2bc5@build-library-letrec* (lambda (q2c36@ae q2c37@name q2c38@vars q2c39@locs q2c3a@val-exps q2c3b@body-exp) (list 'library-letrec* q2c37@name (map list q2c38@vars q2c39@locs q2c3a@val-exps) q2c3b@body-exp))) (set! q2bc7@build-receive (lambda (q2c42@ae q2c43@vars q2c44@producer q2c45@body*) (begin (display '"************** in ") (cons 'receive (cons q2c43@vars (cons q2c44@producer q2c45@body*)))))) (begin (set! q2c53@q2bc7@build-receive q2bc7@build-receive) (set! q2c52@q2bc5@build-library-letrec* q2bc5@build-library-letrec*) (set! q2c51@q2bc3@build-letrec* q2bc3@build-letrec*) (set! q2c50@q2bc1@build-letrec q2bc1@build-letrec) (set! q2c4f@q2bbf@build-void q2bbf@build-void) (set! q2c4e@q2bbd@build-sequence q2bbd@build-sequence) (set! q2c4d@q2b8f@build-let q2b8f@build-let) (set! q2c4c@q2b8d@build-case-lambda q2b8d@build-case-lambda) (set! q2c4b@q2b8b@build-lambda q2b8b@build-lambda) (set! q2c4a@q2b1a@build-global-define q2b1a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q2c62@file-options-macro q2c64@set-cons q2c66@set-union q2c6b@top-mark* q2c6d@top-marked? q2c6f@gen-lexical q2c71@gen-global q2c73@gen-label q2c75@gen-top-level-label q2c77@gen-define-label+loc q2c79@gen-define-label q2c7f@q2c7a q2c81@q2c7c q2c83@q2c7b q2c86@rib? q2c88@make-rib q2c8a@rib-sym* q2c8c@rib-mark** q2c8e@rib-label* q2c90@rib-sealed/freq q2c92@rib-cache q2c94@set-rib-sym*! q2c96@set-rib-mark**! q2c98@set-rib-label*! q2c9a@set-rib-sealed/freq! q2c9c@set-rib-cache! q2c9e@make-empty-rib q2ca0@extend-rib! q2ca2@extend-rib/nc! q2ca4@make-rib-map q2ca6@seal-rib! q2ca8@unseal-rib! q2caa@make-full-rib q2cb0@q2cab q2cb2@q2cad q2cb4@q2cac q2cb7@stx? q2cb9@make-stx q2cbb@stx-expr q2cbd@stx-mark* q2cbf@stx-subst* q2cc1@stx-ae* q2cc3@set-stx-expr! q2cc5@set-stx-mark*! q2cc7@set-stx-subst*! q2cc9@set-stx-ae*! q2ccb@rp q2ccd@datum->stx q2ccf@gen-mark q2cd1@anti-mark q2cd3@anti-mark? q2cd5@join-wraps q2cd7@mkstx q2cd9@add-mark q2cdb@add-subst q2cdd@syntax-kind? q2cdf@syntax-vector->list q2ce1@syntax-pair? q2ce3@syntax-vector? q2ce5@syntax-null? q2ce7@syntax-list? q2ce9@syntax-car q2ceb@syntax-cdr q2ced@syntax->list q2cef@id? q2cf1@id->sym q2cf3@same-marks? q2cf5@bound-id=? q2cf7@free-id=? q2cf9@valid-bound-ids? q2cfb@distinct-bound-ids? q2cfd@bound-id-member? q2cff@self-evaluating? q2d01@strip-annotations q2d03@strip q2d05@stx->datum q2d07@same-marks*? q2d09@id->label q2d0b@id->real-label q2d0d@label->binding q2d0f@make-binding q2d11@binding-type q2d13@binding-value q2d15@raise-unbound-error q2d17@syntax-type q2d25@sanitize-binding q2d27@make-variable-transformer q2d29@variable-transformer? q2d2b@variable-transformer-procedure q2d2d@make-eval-transformer q2e7e@parse-define q2e80@parse-define-syntax q2e82@scheme-stx-hashtable q2e84@scheme-stx q2e86@lexical-var q2e88@lexical-mutable? q2e8a@set-lexical-mutable! q2e8c@add-lexical q2e8e@add-lexicals q2e90@letrec-helper q2e92@letrec-transformer q2e94@letrec*-transformer q2e96@fluid-let-syntax-transformer q2e98@type-descriptor-transformer q2e9a@record-type-descriptor-transformer q2e9c@record-constructor-descriptor-transformer q2e9e@when-macro q2ea0@unless-macro q2ea2@if-transformer q2ea4@and-transformer q2ea6@or-transformer q2ea8@case-macro q2eaa@quote-transformer q2eac@case-lambda-transformer q2eae@lambda-transformer q2eb0@bless q2eb2@with-syntax-macro q2eb4@invalid-fmls-error q2eb6@let-macro q2eb8@let-values-macro q2eba@let*-values-macro q2ebc@trace-lambda-macro q2ebe@trace-define-macro q2ec0@trace-define-syntax-macro q2ec2@trace-let/rec-syntax q2ec4@trace-let-syntax-macro q2ec6@trace-letrec-syntax-macro q2ec8@guard-macro q2eca@define-enumeration-macro q2ecc@time-macro q2ece@delay-macro q2ed0@assert-macro q2ed2@endianness-macro q2ed4@identifier-syntax-macro q2ed6@do-macro q2ed8@let*-macro q2eda@or-macro q2edc@and-macro q2ede@cond-macro q2ee0@do-include q2ee2@include-macro q2ee4@include-into-macro q2ee6@syntax-rules-macro q2ee8@quasiquote-macro q2eea@quasisyntax-macro q2eec@define-struct-macro q2eee@define-record-type-macro q2ef0@define-condition-type-macro q2ef2@incorrect-usage-macro q2ef4@parameterize-macro q2ef6@foreign-call-transformer q2ef8@convert-pattern q2efa@syntax-dispatch q2efc@ellipsis? q2efe@underscore? q2f00@verify-literals q2f02@syntax-case-transformer q2f04@ellipsis-map q2f06@syntax-transformer q2f08@core-macro-transformer q2f0a@symbol-macro q2f0c@macro-transformer q2f0e@local-macro-transformer q2f10@do-macro-call q2f12@chi-macro q2f14@chi-local-macro q2f16@chi-global-macro q2f18@chi-expr* q2f1a@chi-application q2f1c@chi-expr q2f1e@chi-set! q2f20@verify-formals q2f22@chi-lambda-clause q2f24@chi-lambda-clause* q2f26@chi-defun q2f28@chi-rhs q2f2a@expand-interaction-rhs*/init* q2f2c@chi-rhs* q2f2e@find-bound=? q2f30@find-dups q2f32@chi-internal q2f34@parse-module q2f3a@q2f35 q2f3c@q2f37 q2f3e@q2f36 q2f41@module-interface? q2f43@make-module-interface q2f45@module-interface-first-mark q2f47@module-interface-exp-id-vec q2f49@module-interface-exp-lab-vec q2f4b@set-module-interface-first-mark! q2f4d@set-module-interface-exp-id-vec! q2f4f@set-module-interface-exp-lab-vec! q2f51@module-interface-exp-id* q2f53@chi-internal-module q2f55@chi-body* q2f57@expand-transformer q2f59@parse-exports q2f5b@parse-library-name q2f5d@parse-library q2f5f@parse-import-spec* q2f61@make-top-rib q2f63@make-collector q2f65@inv-collector q2f67@vis-collector q2f69@imp-collector q2f6b@chi-library-internal q2f6d@chi-interaction-expr q2f6f@library-body-expander q2f71@core-library-expander q2f73@parse-top-level-program q2f75@top-level-expander q2f7b@q2f76 q2f7d@q2f78 q2f7f@q2f77 q2f82@env? q2f84@make-env q2f86@env-names q2f88@env-labels q2f8a@env-itc q2f8c@set-env-names! q2f8e@set-env-labels! q2f90@set-env-itc! q2f92@rp q2f98@q2f93 q2f9a@q2f95 q2f9c@q2f94 q2f9f@interaction-env? q2fa1@make-interaction-env q2fa3@interaction-env-rib q2fa5@interaction-env-r q2fa7@interaction-env-locs q2fa9@set-interaction-env-rib! q2fab@set-interaction-env-r! q2fad@set-interaction-env-locs! q2faf@rp q2fb1@interaction-environment-symbols q2fb3@environment-bindings q2fb5@parse-binding q2fb7@environment? q2fb9@environment-symbols q2fbb@environment q2fbd@null-environment q2fbf@scheme-report-environment q2fc1@expand q2fc3@eval q2fc5@library-expander q2fc7@boot-library-expand q2fc9@rev-map-append q2fcb@build-exports q2fcd@make-export-subst q2fcf@make-export-env/macros q2fd1@generate-temporaries q2fd3@free-identifier=? q2fd5@bound-identifier=? q2fd7@make-source-condition q2fd9@extract-position-condition q2fdb@expression-position q2fdd@assertion-error q2fdf@syntax-error q2fe1@syntax-violation* q2fe3@syntax-violation q2fe5@identifier? q2fe7@datum->syntax q2fe9@syntax->datum q2feb@compile-r6rs-top-level q2fed@pre-compile-r6rs-top-level q2fef@interaction-environment q2ff1@top-level-context) (begin (set! q2c62@file-options-macro (lambda (q2ff2@x) ((lambda (q2ff5@valid-option?) (begin (set! q2ff5@valid-option? (lambda (q2ffe@x) (and (q2cef@id? q2ffe@x) (memq (q2cf1@id->sym q2ffe@x) '(no-fail no-create no-truncate))))) ((lambda (q2ff6@t) ((lambda (q2ff8@ls/false) (if (and q2ff8@ls/false (apply (lambda (q2ffa@opt*) (for-all q2ff5@valid-option? q2ffa@opt*)) q2ff8@ls/false)) (apply (lambda (q2ffc@opt*) (q2eb0@bless (list 'make-file-options (list 'quote q2ffc@opt*)))) q2ff8@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q2ff6@t))) (q2efa@syntax-dispatch q2ff6@t '(_ . each-any)))) q2ff2@x))) '#f))) (set! q2c64@set-cons (lambda (q3000@x q3001@ls) (if (memq q3000@x q3001@ls) q3001@ls (cons q3000@x q3001@ls)))) (set! q2c66@set-union (lambda (q3004@ls1 q3005@ls2) (if (null? q3004@ls1) q3005@ls2 (if (memq (car q3004@ls1) q3005@ls2) (q2c66@set-union (cdr q3004@ls1) q3005@ls2) (cons (car q3004@ls1) (q2c66@set-union (cdr q3004@ls1) q3005@ls2)))))) (set! q2c6b@top-mark* '(top)) (set! q2c6d@top-marked? (lambda (q3008@m*) (memq 'top q3008@m*))) (set! q2c6f@gen-lexical (lambda (q300a@sym) (if (symbol? q300a@sym) (gensym q300a@sym) (if (q2cb7@stx? q300a@sym) (q2c6f@gen-lexical (q2cf1@id->sym q300a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" q300a@sym))))) (set! q2c71@gen-global (lambda (q300c@x) (q2c6f@gen-lexical q300c@x))) (set! q2c73@gen-label (lambda (q300e@_) (gensym))) (set! q2c75@gen-top-level-label (lambda (q3010@id q3011@rib) ((lambda (q3015@find) (begin (set! q3015@find (lambda (q3020@sym q3021@mark* q3022@sym* q3023@mark** q3024@label*) (and (pair? q3022@sym*) (if (and (eq? q3020@sym (car q3022@sym*)) (q2cf3@same-marks? q3021@mark* (car q3023@mark**))) (car q3024@label*) (q3015@find q3020@sym q3021@mark* (cdr q3022@sym*) (cdr q3023@mark**) (cdr q3024@label*)))))) ((lambda (q3016@sym q3017@mark*) ((lambda (q301a@sym*) ((lambda (q301c@t) (if q301c@t ((lambda (q301e@label) (if (q2b12@q29b2@imported-label->binding q301e@label) (gensym) q301e@label)) q301c@t) (gensym))) (and (memq q3016@sym (q2c8a@rib-sym* q3011@rib)) (q3015@find q3016@sym q3017@mark* q301a@sym* (q2c8c@rib-mark** q3011@rib) (q2c8e@rib-label* q3011@rib))))) (q2c8a@rib-sym* q3011@rib))) (q2cf1@id->sym q3010@id) (q2cbd@stx-mark* q3010@id)))) '#f))) (set! q2c77@gen-define-label+loc (lambda (q302a@id q302b@rib) ((lambda (q302e@t) (if q302e@t ((lambda (q3030@env) ((lambda (q3032@label q3033@locs) (values q3032@label ((lambda (q3036@t) (if q3036@t (cdr q3036@t) ((lambda (q3038@loc) (begin (q2fad@set-interaction-env-locs! q3030@env (cons (cons q3032@label q3038@loc) q3033@locs)) q3038@loc)) (q2c6f@gen-lexical q302a@id)))) (assq q3032@label q3033@locs)))) (q2c75@gen-top-level-label q302a@id q302b@rib) (q2fa7@interaction-env-locs q3030@env))) q302e@t) (values (gensym) (q2c6f@gen-lexical q302a@id)))) (q2ff1@top-level-context)))) (set! q2c79@gen-define-label (lambda (q303a@id q303b@rib) (if (q2ff1@top-level-context) (q2c75@gen-top-level-label q303a@id q303b@rib) (gensym)))) (set! q2c7f@q2c7a (make-record-type-descriptor 'rib '#f 'q2c7d '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! q2c81@q2c7c '#f) (set! q2c83@q2c7b (make-record-constructor-descriptor q2c7f@q2c7a '#f q2c81@q2c7c)) (set! q2c86@rib? (record-predicate q2c7f@q2c7a)) (set! q2c88@make-rib (record-constructor q2c83@q2c7b)) (set! q2c8a@rib-sym* (record-accessor q2c7f@q2c7a '0)) (set! q2c8c@rib-mark** (record-accessor q2c7f@q2c7a '1)) (set! q2c8e@rib-label* (record-accessor q2c7f@q2c7a '2)) (set! q2c90@rib-sealed/freq (record-accessor q2c7f@q2c7a '3)) (set! q2c92@rib-cache (record-accessor q2c7f@q2c7a '4)) (set! q2c94@set-rib-sym*! (record-mutator q2c7f@q2c7a '0)) (set! q2c96@set-rib-mark**! (record-mutator q2c7f@q2c7a '1)) (set! q2c98@set-rib-label*! (record-mutator q2c7f@q2c7a '2)) (set! q2c9a@set-rib-sealed/freq! (record-mutator q2c7f@q2c7a '3)) (set! q2c9c@set-rib-cache! (record-mutator q2c7f@q2c7a '4)) (set! q2c9e@make-empty-rib (lambda () (q2c88@make-rib '() '() '() '#f '#f))) (set! q2ca0@extend-rib! (lambda (q303e@rib q303f@id q3040@label) ((lambda (q3045@find) (begin (set! q3045@find (lambda (q3052@sym q3053@mark* q3054@sym* q3055@mark** q3056@label*) (and (pair? q3054@sym*) (if (and (eq? q3052@sym (car q3054@sym*)) (q2cf3@same-marks? q3053@mark* (car q3055@mark**))) q3056@label* (q3045@find q3052@sym q3053@mark* (cdr q3054@sym*) (cdr q3055@mark**) (cdr q3056@label*)))))) (begin (if (q2c90@rib-sealed/freq q303e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" q303e@rib) (void)) ((lambda (q3046@sym q3047@mark*) ((lambda (q304a@sym*) ((lambda (q304c@t) (if q304c@t ((lambda (q304e@p) (if (not (eq? q3040@label (car q304e@p))) (if (q2ff1@top-level-context) (set-car! q304e@p q3040@label) (q2fe3@syntax-violation '#f '"multiple definitions of identifier" q303f@id)) (void))) q304c@t) (begin (if (q2c92@rib-cache q303e@rib) (hashtable-update! (q2c92@rib-cache q303e@rib) q3046@sym (lambda (q3050@e) (cons (cons q3047@mark* q3040@label) q3050@e)) '()) (void)) (q2c94@set-rib-sym*! q303e@rib (cons q3046@sym q304a@sym*)) (q2c96@set-rib-mark**! q303e@rib (cons q3047@mark* (q2c8c@rib-mark** q303e@rib))) (q2c98@set-rib-label*! q303e@rib (cons q3040@label (q2c8e@rib-label* q303e@rib)))))) (and (memq q3046@sym (q2c8a@rib-sym* q303e@rib)) (q3045@find q3046@sym q3047@mark* q304a@sym* (q2c8c@rib-mark** q303e@rib) (q2c8e@rib-label* q303e@rib))))) (q2c8a@rib-sym* q303e@rib))) (q2cf1@id->sym q303f@id) (q2cbd@stx-mark* q303f@id))))) '#f))) (set! q2ca2@extend-rib/nc! (lambda (q305c@rib q305d@id q305e@label) ((lambda (q3062@sym q3063@mark*) ((lambda (q3066@sym*) (begin (if (q2c92@rib-cache q305c@rib) (hashtable-update! (q2c92@rib-cache q305c@rib) q3062@sym (lambda (q3068@e) (cons (cons q3063@mark* q305e@label) q3068@e)) '()) (void)) (q2c94@set-rib-sym*! q305c@rib (cons q3062@sym q3066@sym*)) (q2c96@set-rib-mark**! q305c@rib (cons q3063@mark* (q2c8c@rib-mark** q305c@rib))) (q2c98@set-rib-label*! q305c@rib (cons q305e@label (q2c8e@rib-label* q305c@rib))))) (q2c8a@rib-sym* q305c@rib))) (q2cf1@id->sym q305d@id) (q2cbd@stx-mark* q305d@id)))) (set! q2ca4@make-rib-map (lambda (q306a@sym*) ((lambda (q306c@ht) ((letrec ((q306e@f (lambda (q3070@i q3071@sym*) (if (null? q3071@sym*) q306c@ht (begin (hashtable-update! q306c@ht (car q3071@sym*) (lambda (q3074@x) (cons q3070@i q3074@x)) '()) (q306e@f (+ q3070@i '1) (cdr q3071@sym*))))))) q306e@f) '0 q306a@sym*)) (make-eq-hashtable)))) (set! q2ca6@seal-rib! (lambda (q3076@rib) ((lambda (q3078@sym*) (if (not (null? q3078@sym*)) (begin (q2c94@set-rib-sym*! q3076@rib (list->vector q3078@sym*)) (q2c96@set-rib-mark**! q3076@rib (list->vector (q2c8c@rib-mark** q3076@rib))) (q2c98@set-rib-label*! q3076@rib (list->vector (q2c8e@rib-label* q3076@rib))) (q2c9a@set-rib-sealed/freq! q3076@rib (q2ca4@make-rib-map q3078@sym*))) (void))) (q2c8a@rib-sym* q3076@rib)))) (set! q2ca8@unseal-rib! (lambda (q307a@rib) (if (q2c90@rib-sealed/freq q307a@rib) (begin (q2c9a@set-rib-sealed/freq! q307a@rib '#f) (q2c94@set-rib-sym*! q307a@rib (vector->list (q2c8a@rib-sym* q307a@rib))) (q2c96@set-rib-mark**! q307a@rib (vector->list (q2c8c@rib-mark** q307a@rib))) (q2c98@set-rib-label*! q307a@rib (vector->list (q2c8e@rib-label* q307a@rib)))) (void)))) (set! q2caa@make-full-rib (lambda (q307c@id* q307d@label*) ((lambda (q3080@r) (begin (q2ca6@seal-rib! q3080@r) q3080@r)) (q2c88@make-rib (map q2cf1@id->sym q307c@id*) (map q2cbd@stx-mark* q307c@id*) q307d@label* '#f '#f)))) (set! q2cb0@q2cab (make-record-type-descriptor 'stx '#f 'q2cae '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! q2cb2@q2cad '#f) (set! q2cb4@q2cac (make-record-constructor-descriptor q2cb0@q2cab '#f q2cb2@q2cad)) (set! q2cb7@stx? (record-predicate q2cb0@q2cab)) (set! q2cb9@make-stx (record-constructor q2cb4@q2cac)) (set! q2cbb@stx-expr (record-accessor q2cb0@q2cab '0)) (set! q2cbd@stx-mark* (record-accessor q2cb0@q2cab '1)) (set! q2cbf@stx-subst* (record-accessor q2cb0@q2cab '2)) (set! q2cc1@stx-ae* (record-accessor q2cb0@q2cab '3)) (set! q2cc3@set-stx-expr! (record-mutator q2cb0@q2cab '0)) (set! q2cc5@set-stx-mark*! (record-mutator q2cb0@q2cab '1)) (set! q2cc7@set-stx-subst*! (record-mutator q2cb0@q2cab '2)) (set! q2cc9@set-stx-ae*! (record-mutator q2cb0@q2cab '3)) (set! q2ccb@rp (q2896@q27bd@make-record-printer 'stx (lambda (q3082@x q3083@p q3084@wr) (begin (display '"#<syntax " q3083@p) (write (q2d05@stx->datum q3082@x) q3083@p) ((lambda (q3088@expr) (if (q288e@q27ad@annotation? q3088@expr) ((lambda (q308a@src) (if (pair? q308a@src) (begin (display '" [" q3083@p) (display (cdr q308a@src) q3083@p) (display '" of " q3083@p) (display (car q308a@src) q3083@p) (display '"]" q3083@p)) (void))) (q288f@q27af@annotation-source q3088@expr)) (void))) (q2cbb@stx-expr q3082@x)) (display '">" q3083@p))))) (set! q2ccd@datum->stx (lambda (q308c@id q308d@datum) (q2cb9@make-stx q308d@datum (q2cbd@stx-mark* q308c@id) (q2cbf@stx-subst* q308c@id) (q2cc1@stx-ae* q308c@id)))) (set! q2ccf@gen-mark (lambda () (string '#\m))) (set! q2cd1@anti-mark '#f) (set! q2cd3@anti-mark? not) (set! q2cd5@join-wraps (lambda (q3090@m1* q3091@s1* q3092@ae1* q3093@e) ((lambda (q3099@cancel) (begin (set! q3099@cancel (lambda (q30a0@ls1 q30a1@ls2) ((letrec ((q30a4@f (lambda (q30a6@x q30a7@ls1) (if (null? q30a7@ls1) (cdr q30a1@ls2) (cons q30a6@x (q30a4@f (car q30a7@ls1) (cdr q30a7@ls1))))))) q30a4@f) (car q30a0@ls1) (cdr q30a0@ls1)))) ((lambda (q309a@m2* q309b@s2* q309c@ae2*) (if (and (not (null? q3090@m1*)) (not (null? q309a@m2*)) (q2cd3@anti-mark? (car q309a@m2*))) (values (q3099@cancel q3090@m1* q309a@m2*) (q3099@cancel q3091@s1* q309b@s2*) (q3099@cancel q3092@ae1* q309c@ae2*)) (values (append q3090@m1* q309a@m2*) (append q3091@s1* q309b@s2*) (append q3092@ae1* q309c@ae2*)))) (q2cbd@stx-mark* q3093@e) (q2cbf@stx-subst* q3093@e) (q2cc1@stx-ae* q3093@e)))) '#f))) (set! q2cd7@mkstx (lambda (q30aa@e q30ab@m* q30ac@s* q30ad@ae*) (if (and (q2cb7@stx? q30aa@e) (not (q2c6d@top-marked? q30ab@m*))) (call-with-values (lambda () (q2cd5@join-wraps q30ab@m* q30ac@s* q30ad@ae* q30aa@e)) (lambda (q30b8@q30b3 q30b9@q30b5 q30ba@q30b7) ((lambda (q30be@ae* q30bf@s* q30c0@m*) (q2cb9@make-stx (q2cbb@stx-expr q30aa@e) q30c0@m* q30bf@s* q30be@ae*)) q30ba@q30b7 q30b9@q30b5 q30b8@q30b3))) (q2cb9@make-stx q30aa@e q30ab@m* q30ac@s* q30ad@ae*)))) (set! q2cd9@add-mark (lambda (q30c4@m q30c5@e q30c6@ae) (q2cd7@mkstx q30c5@e (list q30c4@m) '(shift) (list q30c6@ae)))) (set! q2cdb@add-subst (lambda (q30ca@subst q30cb@e) (q2cd7@mkstx q30cb@e '() (list q30ca@subst) '()))) (set! q2cdd@syntax-kind? (lambda (q30ce@x q30cf@p?) (if (q2cb7@stx? q30ce@x) (q2cdd@syntax-kind? (q2cbb@stx-expr q30ce@x) q30cf@p?) (if (q288e@q27ad@annotation? q30ce@x) (q2cdd@syntax-kind? (q2890@q27b1@annotation-expression q30ce@x) q30cf@p?) (q30cf@p? q30ce@x))))) (set! q2cdf@syntax-vector->list (lambda (q30d2@x) (if (q2cb7@stx? q30d2@x) ((lambda (q30d4@ls q30d5@m* q30d6@s* q30d7@ae*) (map (lambda (q30dc@x) (q2cd7@mkstx q30dc@x q30d5@m* q30d6@s* q30d7@ae*)) q30d4@ls)) (q2cdf@syntax-vector->list (q2cbb@stx-expr q30d2@x)) (q2cbd@stx-mark* q30d2@x) (q2cbf@stx-subst* q30d2@x) (q2cc1@stx-ae* q30d2@x)) (if (q288e@q27ad@annotation? q30d2@x) (q2cdf@syntax-vector->list (q2890@q27b1@annotation-expression q30d2@x)) (if (vector? q30d2@x) (vector->list q30d2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" q30d2@x)))))) (set! q2ce1@syntax-pair? (lambda (q30de@x) (q2cdd@syntax-kind? q30de@x pair?))) (set! q2ce3@syntax-vector? (lambda (q30e0@x) (q2cdd@syntax-kind? q30e0@x vector?))) (set! q2ce5@syntax-null? (lambda (q30e2@x) (q2cdd@syntax-kind? q30e2@x null?))) (set! q2ce7@syntax-list? (lambda (q30e4@x) (or (q2ce5@syntax-null? q30e4@x) (and (q2ce1@syntax-pair? q30e4@x) (q2ce7@syntax-list? (q2ceb@syntax-cdr q30e4@x)))))) (set! q2ce9@syntax-car (lambda (q30e6@x) (if (q2cb7@stx? q30e6@x) (q2cd7@mkstx (q2ce9@syntax-car (q2cbb@stx-expr q30e6@x)) (q2cbd@stx-mark* q30e6@x) (q2cbf@stx-subst* q30e6@x) (q2cc1@stx-ae* q30e6@x)) (if (q288e@q27ad@annotation? q30e6@x) (q2ce9@syntax-car (q2890@q27b1@annotation-expression q30e6@x)) (if (pair? q30e6@x) (car q30e6@x) (assertion-violation 'syntax-car '"BUG: not a pair" q30e6@x)))))) (set! q2ceb@syntax-cdr (lambda (q30e8@x) (if (q2cb7@stx? q30e8@x) (q2cd7@mkstx (q2ceb@syntax-cdr (q2cbb@stx-expr q30e8@x)) (q2cbd@stx-mark* q30e8@x) (q2cbf@stx-subst* q30e8@x) (q2cc1@stx-ae* q30e8@x)) (if (q288e@q27ad@annotation? q30e8@x) (q2ceb@syntax-cdr (q2890@q27b1@annotation-expression q30e8@x)) (if (pair? q30e8@x) (cdr q30e8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" q30e8@x)))))) (set! q2ced@syntax->list (lambda (q30ea@x) (if (q2ce1@syntax-pair? q30ea@x) (cons (q2ce9@syntax-car q30ea@x) (q2ced@syntax->list (q2ceb@syntax-cdr q30ea@x))) (if (q2ce5@syntax-null? q30ea@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" q30ea@x))))) (set! q2cef@id? (lambda (q30ec@x) (and (q2cb7@stx? q30ec@x) (symbol? (q2cbb@stx-expr q30ec@x))))) (set! q2cf1@id->sym (lambda (q30ee@x) (q2cbb@stx-expr q30ee@x))) (set! q2cf3@same-marks? (lambda (q30f0@x q30f1@y) (or (and (null? q30f0@x) (null? q30f1@y)) (and (pair? q30f0@x) (pair? q30f1@y) (eq? (car q30f0@x) (car q30f1@y)) (q2cf3@same-marks? (cdr q30f0@x) (cdr q30f1@y)))))) (set! q2cf5@bound-id=? (lambda (q30f4@x q30f5@y) (and (eq? (q2cf1@id->sym q30f4@x) (q2cf1@id->sym q30f5@y)) (q2cf3@same-marks? (q2cbd@stx-mark* q30f4@x) (q2cbd@stx-mark* q30f5@y))))) (set! q2cf7@free-id=? (lambda (q30f8@i q30f9@j) ((lambda (q30fc@t0 q30fd@t1) (if (or q30fc@t0 q30fd@t1) (eq? q30fc@t0 q30fd@t1) (eq? (q2cf1@id->sym q30f8@i) (q2cf1@id->sym q30f9@j)))) (q2d0b@id->real-label q30f8@i) (q2d0b@id->real-label q30f9@j)))) (set! q2cf9@valid-bound-ids? (lambda (q3100@id*) (and (for-all q2cef@id? q3100@id*) (q2cfb@distinct-bound-ids? q3100@id*)))) (set! q2cfb@distinct-bound-ids? (lambda (q3102@id*) (or (null? q3102@id*) (and (not (q2cfd@bound-id-member? (car q3102@id*) (cdr q3102@id*))) (q2cfb@distinct-bound-ids? (cdr q3102@id*)))))) (set! q2cfd@bound-id-member? (lambda (q3104@id q3105@id*) (and (pair? q3105@id*) (or (q2cf5@bound-id=? q3104@id (car q3105@id*)) (q2cfd@bound-id-member? q3104@id (cdr q3105@id*)))))) (set! q2cff@self-evaluating? (lambda (q3108@x) (or (number? q3108@x) (string? q3108@x) (char? q3108@x) (boolean? q3108@x) (regexp? q3108@x) (bytevector? q3108@x)))) (set! q2d01@strip-annotations (lambda (q310a@x) (if (pair? q310a@x) (cons (q2d01@strip-annotations (car q310a@x)) (q2d01@strip-annotations (cdr q310a@x))) (if (vector? q310a@x) (vector-map q2d01@strip-annotations q310a@x) (if (q288e@q27ad@annotation? q310a@x) (q288d@q27ab@annotation-stripped q310a@x) q310a@x))))) (set! q2d03@strip (lambda (q310c@x q310d@m*) (if (q2c6d@top-marked? q310d@m*) (if (or (q288e@q27ad@annotation? q310c@x) (and (pair? q310c@x) (q288e@q27ad@annotation? (car q310c@x))) (and (vector? q310c@x) (> (vector-length q310c@x) '0) (q288e@q27ad@annotation? (vector-ref q310c@x '0)))) (q2d01@strip-annotations q310c@x) q310c@x) ((letrec ((q3110@f (lambda (q3112@x) (if (q2cb7@stx? q3112@x) (q2d03@strip (q2cbb@stx-expr q3112@x) (q2cbd@stx-mark* q3112@x)) (if (q288e@q27ad@annotation? q3112@x) (q288d@q27ab@annotation-stripped q3112@x) (if (pair? q3112@x) ((lambda (q3114@a q3115@d) (if (and (eq? q3114@a (car q3112@x)) (eq? q3115@d (cdr q3112@x))) q3112@x (cons q3114@a q3115@d))) (q3110@f (car q3112@x)) (q3110@f (cdr q3112@x))) (if (vector? q3112@x) ((lambda (q3118@old) ((lambda (q311a@new) (if (for-all eq? q3118@old q311a@new) q3112@x (list->vector q311a@new))) (map q3110@f q3118@old))) (vector->list q3112@x)) q3112@x))))))) q3110@f) q310c@x)))) (set! q2d05@stx->datum (lambda (q311c@x) (q2d03@strip q311c@x '()))) (set! q2d07@same-marks*? (lambda (q311e@mark* q311f@mark** q3120@si) (if (null? q3120@si) '#f (if (q2cf3@same-marks? q311e@mark* (vector-ref q311f@mark** (car q3120@si))) (car q3120@si) (q2d07@same-marks*? q311e@mark* q311f@mark** (cdr q3120@si)))))) (set! q2d09@id->label (lambda (q3124@id) (or (q2d0b@id->real-label q3124@id) ((lambda (q3126@t) (if q3126@t ((lambda (q3128@env) ((lambda (q312a@rib) (call-with-values (lambda () (q2c77@gen-define-label+loc q3124@id q312a@rib)) (lambda (q3130@q312d q3131@q312f) ((lambda (q3134@loc_ q3135@lab) (begin (q2ca0@extend-rib! q312a@rib q3124@id q3135@lab) q3135@lab)) q3131@q312f q3130@q312d)))) (q2fa3@interaction-env-rib q3128@env))) q3126@t) '#f)) (q2ff1@top-level-context))))) (set! q2d0b@id->real-label (lambda (q3138@id) ((lambda (q313a@sym) ((letrec ((q313c@search (lambda (q313e@subst* q313f@mark*) (if (null? q313e@subst*) '#f (if (eq? (car q313e@subst*) 'shift) (q313c@search (cdr q313e@subst*) (cdr q313f@mark*)) ((lambda (q3142@rib) ((lambda (q3144@t) (if q3144@t ((lambda (q3146@ht) ((lambda (q3148@si) ((lambda (q314a@i) (if q314a@i (vector-ref (q2c8e@rib-label* q3142@rib) q314a@i) (q313c@search (cdr q313e@subst*) q313f@mark*))) (and q3148@si (q2d07@same-marks*? q313f@mark* (q2c8c@rib-mark** q3142@rib) (reverse q3148@si))))) (hashtable-ref q3146@ht q313a@sym '#f))) q3144@t) ((letrec ((q314c@f (lambda (q314e@sym* q314f@mark** q3150@label*) (if (null? q314e@sym*) (q313c@search (cdr q313e@subst*) q313f@mark*) (if (and (eq? (car q314e@sym*) q313a@sym) (q2cf3@same-marks? (car q314f@mark**) q313f@mark*)) (car q3150@label*) (q314c@f (cdr q314e@sym*) (cdr q314f@mark**) (cdr q3150@label*))))))) q314c@f) (q2c8a@rib-sym* q3142@rib) (q2c8c@rib-mark** q3142@rib) (q2c8e@rib-label* q3142@rib)))) (q2c90@rib-sealed/freq q3142@rib))) (car q313e@subst*))))))) q313c@search) (q2cbf@stx-subst* q3138@id) (q2cbd@stx-mark* q3138@id))) (q2cf1@id->sym q3138@id)))) (set! q2d0d@label->binding (lambda (q3154@x q3155@r) ((lambda (q3158@t) (if q3158@t ((lambda (q315a@b) (if (and (pair? q315a@b) (eq? (car q315a@b) '$core-rtd)) (cons '$rtd (map q2eb0@bless (cdr q315a@b))) (if (and (pair? q315a@b) (eq? (car q315a@b) 'global-rtd)) ((lambda (q315c@lib q315d@loc) (cons '$rtd (symbol-value q315d@loc))) (cadr q315a@b) (cddr q315a@b)) q315a@b))) q3158@t) ((lambda (q3160@t) (if q3160@t (cdr q3160@t) ((lambda (q3162@t) (if q3162@t ((lambda (q3164@env) ((lambda (q3166@t) (if q3166@t ((lambda (q3168@p) (cons* 'lexical (cdr q3168@p) '#f)) q3166@t) '(displaced-lexical . #f))) (assq q3154@x (q2fa7@interaction-env-locs q3164@env)))) q3162@t) '(displaced-lexical . #f))) (q2ff1@top-level-context)))) (assq q3154@x q3155@r)))) (q2b12@q29b2@imported-label->binding q3154@x)))) (set! q2d0f@make-binding cons) (set! q2d11@binding-type car) (set! q2d13@binding-value cdr) (set! q2d15@raise-unbound-error (lambda (q316a@id) (q2fe1@syntax-violation* '#f '"unbound identifier" q316a@id (q4d1a@q4b60@make-undefined-violation)))) (set! q2d17@syntax-type (lambda (q316c@e q316d@r) (if (q2cef@id? q316c@e) ((lambda (q3170@id) ((lambda (q3172@label) ((lambda (q3174@b) ((lambda (q3176@type) ((lambda () (begin (if (not q3172@label) (q2d15@raise-unbound-error q3170@id) (void)) ((lambda (q3178@t) (if (memv q3178@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values q3176@type (q2d13@binding-value q3174@b) q3170@id) (values 'other '#f '#f))) q3176@type))))) (q2d11@binding-type q3174@b))) (q2d0d@label->binding q3172@label q316d@r))) (q2d09@id->label q3170@id))) q316c@e) (if (q2ce1@syntax-pair? q316c@e) ((lambda (q317a@id) (if (q2cef@id? q317a@id) ((lambda (q317c@label) ((lambda (q317e@b) ((lambda (q3180@type) ((lambda () (begin (if (not q317c@label) (q2d15@raise-unbound-error q317a@id) (void)) ((lambda (q3182@t) (if (memv q3182@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values q3180@type (q2d13@binding-value q317e@b) q317a@id) (values 'call '#f '#f))) q3180@type))))) (q2d11@binding-type q317e@b))) (q2d0d@label->binding q317c@label q316d@r))) (q2d09@id->label q317a@id)) (values 'call '#f '#f))) (q2ce9@syntax-car q316c@e)) ((lambda (q3184@d) (if (q2cff@self-evaluating? q3184@d) (values 'constant q3184@d '#f) (values 'other '#f '#f))) (q2d05@stx->datum q316c@e)))))) (set! q2d25@sanitize-binding (lambda (q3186@x q3187@src) (if (procedure? q3186@x) (cons* 'local-macro q3186@x q3187@src) (if (and (pair? q3186@x) (eq? (car q3186@x) 'macro!) (procedure? (cdr q3186@x))) (cons* 'local-macro! (cdr q3186@x) q3187@src) (if (and (pair? q3186@x) (eq? (car q3186@x) '$rtd)) q3186@x (assertion-violation 'expand '"invalid transformer" q3186@x)))))) (set! q2d27@make-variable-transformer (lambda (q318a@x) (if (procedure? q318a@x) (cons 'macro! q318a@x) (assertion-violation 'make-variable-transformer '"not a procedure" q318a@x)))) (set! q2d29@variable-transformer? (lambda (q318c@x) (and (pair? q318c@x) (eq? (car q318c@x) 'macro!) (procedure? (cdr q318c@x))))) (set! q2d2b@variable-transformer-procedure (lambda (q318e@x) (if (q2d29@variable-transformer? q318e@x) (cdr q318e@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" q318e@x)))) (set! q2d2d@make-eval-transformer (lambda (q3190@x) (q2d25@sanitize-binding (eval-core (q28ed@q28a5@expanded->core q3190@x)) q3190@x))) (set! q2e7e@parse-define (lambda (q3192@x) ((lambda (q3194@t) ((lambda (q3196@ls/false) (if (and q3196@ls/false (apply (lambda (q3198@id q3199@fmls q319a@b q319b@b*) (q2cef@id? q3198@id)) q3196@ls/false)) (apply (lambda (q31a0@id q31a1@fmls q31a2@b q31a3@b*) (begin (q2f20@verify-formals q31a1@fmls q3192@x) (values q31a0@id (cons 'defun (cons q31a1@fmls (cons q31a2@b q31a3@b*)))))) q3196@ls/false) ((lambda (q31a8@t) ((lambda (q31aa@ls/false) (if (and q31aa@ls/false (apply (lambda (q31ac@id q31ad@val) (q2cef@id? q31ac@id)) q31aa@ls/false)) (apply (lambda (q31b0@id q31b1@val) (values q31b0@id (cons 'expr q31b1@val))) q31aa@ls/false) ((lambda (q31b4@t) ((lambda (q31b6@ls/false) (if (and q31b6@ls/false (apply (lambda (q31b8@id) (q2cef@id? q31b8@id)) q31b6@ls/false)) (apply (lambda (q31ba@id) (values q31ba@id (cons 'expr (q2eb0@bless '(void))))) q31b6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q31b4@t))) (q2efa@syntax-dispatch q31b4@t '(_ any)))) q31a8@t))) (q2efa@syntax-dispatch q31a8@t '(_ any any)))) q3194@t))) (q2efa@syntax-dispatch q3194@t '(_ (any . any) any . each-any)))) q3192@x))) (set! q2e80@parse-define-syntax (lambda (q31bc@x) ((lambda (q31be@t) ((lambda (q31c0@ls/false) (if (and q31c0@ls/false (apply (lambda (q31c2@id q31c3@val) (q2cef@id? q31c2@id)) q31c0@ls/false)) (apply (lambda (q31c6@id q31c7@val) (values q31c6@id q31c7@val)) q31c0@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q31be@t))) (q2efa@syntax-dispatch q31be@t '(_ any any)))) q31bc@x))) (set! q2e82@scheme-stx-hashtable (make-eq-hashtable)) (set! q2e84@scheme-stx (lambda (q31ca@sym) (or (hashtable-ref q2e82@scheme-stx-hashtable q31ca@sym '#f) ((lambda (q31cc@subst) ((lambda (q31ce@stx) ((lambda (q31d0@stx) ((lambda () (begin (hashtable-set! q2e82@scheme-stx-hashtable q31ca@sym q31d0@stx) q31d0@stx)))) ((lambda (q31d2@t) (if q31d2@t ((lambda (q31d4@x) ((lambda (q31d6@name q31d7@label) (q2cdb@add-subst (q2c88@make-rib (list q31d6@name) (list q2c6b@top-mark*) (list q31d7@label) '#f '#f) q31ce@stx)) (car q31d4@x) (cdr q31d4@x))) q31d2@t) q31ce@stx)) (assq q31ca@sym q31cc@subst)))) (q2cb9@make-stx q31ca@sym q2c6b@top-mark* '() '()))) (q2ae8@q295e@library-subst (q2b0c@q29a6@find-library-by-name '(psyntax system $all))))))) (set! q2e86@lexical-var car) (set! q2e88@lexical-mutable? cdr) (set! q2e8a@set-lexical-mutable! set-cdr!) (set! q2e8c@add-lexical (lambda (q31da@lab q31db@lex q31dc@r) (cons (cons* q31da@lab 'lexical q31db@lex '#f) q31dc@r))) (set! q2e8e@add-lexicals (lambda (q31e0@lab* q31e1@lex* q31e2@r) (if (null? q31e0@lab*) q31e2@r (q2e8e@add-lexicals (cdr q31e0@lab*) (cdr q31e1@lex*) (q2e8c@add-lexical (car q31e0@lab*) (car q31e1@lex*) q31e2@r))))) (set! q2e90@letrec-helper (lambda (q31e6@e q31e7@r q31e8@mr q31e9@build) ((lambda (q31ee@t) ((lambda (q31f0@ls/false) (if q31f0@ls/false (apply (lambda (q31f2@lhs* q31f3@rhs* q31f4@b q31f5@b*) (if (not (q2cf9@valid-bound-ids? q31f2@lhs*)) (q2eb4@invalid-fmls-error q31e6@e q31f2@lhs*) ((lambda (q31fa@lex* q31fb@lab*) ((lambda (q31fe@rib q31ff@r) ((lambda (q3202@body q3203@rhs*) (q31e9@build '#f q31fa@lex* q3203@rhs* q3202@body)) (q2f32@chi-internal (q2cdb@add-subst q31fe@rib (cons q31f4@b q31f5@b*)) q31ff@r q31e8@mr) (q2f18@chi-expr* (map (lambda (q3206@x) (q2cdb@add-subst q31fe@rib q3206@x)) q31f3@rhs*) q31ff@r q31e8@mr))) (q2caa@make-full-rib q31f2@lhs* q31fb@lab*) (q2e8e@add-lexicals q31fb@lab* q31fa@lex* q31e7@r))) (map q2c6f@gen-lexical q31f2@lhs*) (map q2c73@gen-label q31f2@lhs*)))) q31f0@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q31ee@t))) (q2efa@syntax-dispatch q31ee@t '(_ #(each (any any)) any . each-any)))) q31e6@e))) (set! q2e92@letrec-transformer (lambda (q3208@e q3209@r q320a@mr) (q2e90@letrec-helper q3208@e q3209@r q320a@mr q2c50@q2bc1@build-letrec))) (set! q2e94@letrec*-transformer (lambda (q320e@e q320f@r q3210@mr) (q2e90@letrec-helper q320e@e q320f@r q3210@mr q2c51@q2bc3@build-letrec*))) (set! q2e96@fluid-let-syntax-transformer (lambda (q3214@e q3215@r q3216@mr) ((lambda (q321b@lookup) (begin (set! q321b@lookup (lambda (q322e@x) (or (q2d09@id->label q322e@x) (q2fe3@syntax-violation '#f '"unbound identifier" q3214@e q322e@x)))) ((lambda (q321c@t) ((lambda (q321e@ls/false) (if q321e@ls/false (apply (lambda (q3220@lhs* q3221@rhs* q3222@b q3223@b*) (if (not (q2cf9@valid-bound-ids? q3220@lhs*)) (q2eb4@invalid-fmls-error q3214@e q3220@lhs*) ((lambda (q3228@lab* q3229@rhs*) (q2f32@chi-internal (cons q3222@b q3223@b*) (append (map cons q3228@lab* q3229@rhs*) q3215@r) (append (map cons q3228@lab* q3229@rhs*) q3216@mr))) (map q321b@lookup q3220@lhs*) (map (lambda (q322c@x) (q2d2d@make-eval-transformer (q2f57@expand-transformer q322c@x q3216@mr))) q3221@rhs*)))) q321e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q321c@t))) (q2efa@syntax-dispatch q321c@t '(_ #(each (any any)) any . each-any)))) q3214@e))) '#f))) (set! q2e98@type-descriptor-transformer (lambda (q3230@e q3231@r q3232@mr) ((lambda (q3236@t) ((lambda (q3238@ls/false) (if (and q3238@ls/false (apply (lambda (q323a@id) (q2cef@id? q323a@id)) q3238@ls/false)) (apply (lambda (q323c@id) ((lambda (q323e@lab) ((lambda (q3240@b) ((lambda (q3242@type) ((lambda () (begin (if (not q323e@lab) (q2d15@raise-unbound-error q323c@id) (void)) (if (not (and (eq? q3242@type '$rtd) (not (list? (q2d13@binding-value q3240@b))))) (q2fe3@syntax-violation '#f '"not a record type" q3230@e) (void)) (list 'quote (q2d13@binding-value q3240@b)))))) (q2d11@binding-type q3240@b))) (q2d0d@label->binding q323e@lab q3231@r))) (q2d09@id->label q323c@id))) q3238@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3236@t))) (q2efa@syntax-dispatch q3236@t '(_ any)))) q3230@e))) (set! q2e9a@record-type-descriptor-transformer (lambda (q3244@e q3245@r q3246@mr) ((lambda (q324a@t) ((lambda (q324c@ls/false) (if (and q324c@ls/false (apply (lambda (q324e@id) (q2cef@id? q324e@id)) q324c@ls/false)) (apply (lambda (q3250@id) ((lambda (q3252@lab) ((lambda (q3254@b) ((lambda (q3256@type) ((lambda () (begin (if (not q3252@lab) (q2d15@raise-unbound-error q3250@id) (void)) (if (not (and (eq? q3256@type '$rtd) (list? (q2d13@binding-value q3254@b)))) (q2fe3@syntax-violation '#f '"not a record type" q3244@e) (void)) (q2f1c@chi-expr (car (q2d13@binding-value q3254@b)) q3245@r q3246@mr))))) (q2d11@binding-type q3254@b))) (q2d0d@label->binding q3252@lab q3245@r))) (q2d09@id->label q3250@id))) q324c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q324a@t))) (q2efa@syntax-dispatch q324a@t '(_ any)))) q3244@e))) (set! q2e9c@record-constructor-descriptor-transformer (lambda (q3258@e q3259@r q325a@mr) ((lambda (q325e@t) ((lambda (q3260@ls/false) (if (and q3260@ls/false (apply (lambda (q3262@id) (q2cef@id? q3262@id)) q3260@ls/false)) (apply (lambda (q3264@id) ((lambda (q3266@lab) ((lambda (q3268@b) ((lambda (q326a@type) ((lambda () (begin (if (not q3266@lab) (q2d15@raise-unbound-error q3264@id) (void)) (if (not (and (eq? q326a@type '$rtd) (list? (q2d13@binding-value q3268@b)))) (q2fe3@syntax-violation '#f '"invalid type" q3258@e) (void)) (q2f1c@chi-expr (cadr (q2d13@binding-value q3268@b)) q3259@r q325a@mr))))) (q2d11@binding-type q3268@b))) (q2d0d@label->binding q3266@lab q3259@r))) (q2d09@id->label q3264@id))) q3260@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q325e@t))) (q2efa@syntax-dispatch q325e@t '(_ any)))) q3258@e))) (set! q2e9e@when-macro (lambda (q326c@e) ((lambda (q326e@t) ((lambda (q3270@ls/false) (if q3270@ls/false (apply (lambda (q3272@test q3273@e q3274@e*) (q2eb0@bless (list 'if q3272@test (cons 'begin (cons q3273@e q3274@e*))))) q3270@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q326e@t))) (q2efa@syntax-dispatch q326e@t '(_ any any . each-any)))) q326c@e))) (set! q2ea0@unless-macro (lambda (q3278@e) ((lambda (q327a@t) ((lambda (q327c@ls/false) (if q327c@ls/false (apply (lambda (q327e@test q327f@e q3280@e*) (q2eb0@bless (list 'if (list 'not q327e@test) (cons 'begin (cons q327f@e q3280@e*))))) q327c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q327a@t))) (q2efa@syntax-dispatch q327a@t '(_ any any . each-any)))) q3278@e))) (set! q2ea2@if-transformer (lambda (q3284@e q3285@r q3286@mr) ((lambda (q328a@t) ((lambda (q328c@ls/false) (if q328c@ls/false (apply (lambda (q328e@e0 q328f@e1 q3290@e2) (list 'if (q2f1c@chi-expr q328e@e0 q3285@r q3286@mr) (q2f1c@chi-expr q328f@e1 q3285@r q3286@mr) (q2f1c@chi-expr q3290@e2 q3285@r q3286@mr))) q328c@ls/false) ((lambda (q3294@t) ((lambda (q3296@ls/false) (if q3296@ls/false (apply (lambda (q3298@e0 q3299@e1) (list 'if (q2f1c@chi-expr q3298@e0 q3285@r q3286@mr) (q2f1c@chi-expr q3299@e1 q3285@r q3286@mr) (q2c4f@q2bbf@build-void))) q3296@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3294@t))) (q2efa@syntax-dispatch q3294@t '(_ any any)))) q328a@t))) (q2efa@syntax-dispatch q328a@t '(_ any any any)))) q3284@e))) (set! q2ea4@and-transformer (lambda (q329c@e q329d@r q329e@mr) ((lambda (q32a2@t) ((lambda (q32a4@ls/false) (if q32a4@ls/false (apply (lambda (q32a6@e*) (cons 'and (q2f18@chi-expr* q32a6@e* q329d@r q329e@mr))) q32a4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32a2@t))) (q2efa@syntax-dispatch q32a2@t '(_ . each-any)))) q329c@e))) (set! q2ea6@or-transformer (lambda (q32a8@e q32a9@r q32aa@mr) ((lambda (q32ae@t) ((lambda (q32b0@ls/false) (if q32b0@ls/false (apply (lambda (q32b2@e*) (cons 'or (q2f18@chi-expr* q32b2@e* q32a9@r q32aa@mr))) q32b0@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32ae@t))) (q2efa@syntax-dispatch q32ae@t '(_ . each-any)))) q32a8@e))) (set! q2ea8@case-macro (lambda (q32b4@e) ((lambda (q32b7@build-last q32b9@build-one) (begin (set! q32b7@build-last (lambda (q32de@cls) ((lambda (q32e0@t) ((lambda (q32e2@ls/false) (if q32e2@ls/false (apply (lambda (q32e4@e q32e5@e*) (cons 'begin (cons q32e4@e q32e5@e*))) q32e2@ls/false) ((lambda (q32e8@t) ((lambda (q32ea@ls/false) (if q32ea@ls/false (apply (lambda () (q32b9@build-one q32de@cls '(if #f #f))) q32ea@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32e8@t))) (q2efa@syntax-dispatch q32e8@t '_))) q32e0@t))) (q2efa@syntax-dispatch q32e0@t '(#(scheme-id else) any . each-any)))) q32de@cls))) (set! q32b9@build-one (lambda (q32d0@cls q32d1@k) ((lambda (q32d4@t) ((lambda (q32d6@ls/false) (if q32d6@ls/false (apply (lambda (q32d8@d* q32d9@e q32da@e*) (list 'if (list 'memv 't (list 'quote q32d8@d*)) (cons 'begin (cons q32d9@e q32da@e*)) q32d1@k)) q32d6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32d4@t))) (q2efa@syntax-dispatch q32d4@t '(each-any any . each-any)))) q32d0@cls))) ((lambda (q32ba@t) ((lambda (q32bc@ls/false) (if q32bc@ls/false (apply (lambda (q32be@expr) (q2eb0@bless (cons 'let (cons (list (list 't q32be@expr)) '((if #f #f)))))) q32bc@ls/false) ((lambda (q32c0@t) ((lambda (q32c2@ls/false) (if q32c2@ls/false (apply (lambda (q32c4@expr q32c5@cls q32c6@cls*) (q2eb0@bless (list 'let (list (list 't q32c4@expr)) ((letrec ((q32ca@f (lambda (q32cc@cls q32cd@cls*) (if (null? q32cd@cls*) (q32b7@build-last q32cc@cls) (q32b9@build-one q32cc@cls (q32ca@f (car q32cd@cls*) (cdr q32cd@cls*))))))) q32ca@f) q32c5@cls q32c6@cls*)))) q32c2@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32c0@t))) (q2efa@syntax-dispatch q32c0@t '(_ any any . each-any)))) q32ba@t))) (q2efa@syntax-dispatch q32ba@t '(_ any)))) q32b4@e))) '#f '#f))) (set! q2eaa@quote-transformer (lambda (q32ec@e q32ed@r q32ee@mr) ((lambda (q32f2@t) ((lambda (q32f4@ls/false) (if q32f4@ls/false (apply (lambda (q32f6@datum) (list 'quote (q2d05@stx->datum q32f6@datum))) q32f4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32f2@t))) (q2efa@syntax-dispatch q32f2@t '(_ any)))) q32ec@e))) (set! q2eac@case-lambda-transformer (lambda (q32f8@e q32f9@r q32fa@mr) ((lambda (q32fe@t) ((lambda (q3300@ls/false) (if q3300@ls/false (apply (lambda (q3302@fmls* q3303@b* q3304@b**) (call-with-values (lambda () (q2f24@chi-lambda-clause* q32f8@e q3302@fmls* (map cons q3303@b* q3304@b**) q32f9@r q32fa@mr)) (lambda (q330c@q3309 q330d@q330b) ((lambda (q3310@body* q3311@fmls*) (q2c4c@q2b8d@build-case-lambda '#f q3311@fmls* q3310@body*)) q330d@q330b q330c@q3309)))) q3300@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q32fe@t))) (q2efa@syntax-dispatch q32fe@t '(_ . #(each (any any . each-any)))))) q32f8@e))) (set! q2eae@lambda-transformer (lambda (q3314@e q3315@r q3316@mr) ((lambda (q331a@t) ((lambda (q331c@ls/false) (if q331c@ls/false (apply (lambda (q331e@fmls q331f@b q3320@b*) (call-with-values (lambda () (q2f22@chi-lambda-clause q3314@e q331e@fmls (cons q331f@b q3320@b*) q3315@r q3316@mr)) (lambda (q3328@q3325 q3329@q3327) ((lambda (q332c@body q332d@fmls) (q2c4b@q2b8b@build-lambda '#f q332d@fmls q332c@body)) q3329@q3327 q3328@q3325)))) q331c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q331a@t))) (q2efa@syntax-dispatch q331a@t '(_ any any . each-any)))) q3314@e))) (set! q2eb0@bless (lambda (q3330@x) (q2cd7@mkstx ((letrec ((q3332@f (lambda (q3334@x) (if (q2cb7@stx? q3334@x) q3334@x (if (pair? q3334@x) (cons (q3332@f (car q3334@x)) (q3332@f (cdr q3334@x))) (if (symbol? q3334@x) (q2e84@scheme-stx q3334@x) (if (vector? q3334@x) (vector-map q3332@f q3334@x) q3334@x))))))) q3332@f) q3330@x) '() '() '()))) (set! q2eb2@with-syntax-macro (lambda (q3336@e) ((lambda (q3338@t) ((lambda (q333a@ls/false) (if q333a@ls/false (apply (lambda (q333c@pat* q333d@expr* q333e@b q333f@b*) ((lambda (q3344@idn*) (begin (q2f20@verify-formals (map car q3344@idn*) q3336@e) ((lambda (q3346@t*) (q2eb0@bless (list 'let (map list q3346@t* q333d@expr*) ((letrec ((q3348@f (lambda (q334a@pat* q334b@t*) (if (null? q334a@pat*) (cons 'begin (cons '#f (cons q333e@b q333f@b*))) (list 'syntax-case (car q334b@t*) '() (list (car q334a@pat*) (q3348@f (cdr q334a@pat*) (cdr q334b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car q334a@pat*)) (car q334b@t*)))))))) q3348@f) q333c@pat* q3346@t*)))) (q2fd1@generate-temporaries q333d@expr*)))) ((letrec ((q334e@f (lambda (q3350@pat*) (if (null? q3350@pat*) '() (call-with-values (lambda () (q2ef8@convert-pattern (car q3350@pat*) '())) (lambda (q3356@q3353 q3357@q3355) ((lambda (q335a@idn* q335b@pat) (append q335a@idn* (q334e@f (cdr q3350@pat*)))) q3357@q3355 q3356@q3353))))))) q334e@f) q333c@pat*))) q333a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3338@t))) (q2efa@syntax-dispatch q3338@t '(_ #(each (any any)) any . each-any)))) q3336@e))) (set! q2eb4@invalid-fmls-error (lambda (q335e@stx q335f@fmls) ((lambda (q3362@t) ((lambda (q3364@ls/false) (if q3364@ls/false (apply (lambda (q3366@id* q3367@last) ((letrec ((q336a@f (lambda (q336c@id*) (if (null? q336c@id*) (values) (if (not (q2cef@id? (car q336c@id*))) (q2fe3@syntax-violation '#f '"not an identifier" q335e@stx (car q336c@id*)) (begin (q336a@f (cdr q336c@id*)) (if (q2cfd@bound-id-member? (car q336c@id*) (cdr q336c@id*)) (q2fe3@syntax-violation '#f '"duplicate binding" q335e@stx (car q336c@id*)) (void)))))))) q336a@f) (if (q2cef@id? q3367@last) (cons q3367@last q3366@id*) (if (q2ce5@syntax-null? q3367@last) q3366@id* (q2fe3@syntax-violation '#f '"not an identifier" q335e@stx q3367@last))))) q3364@ls/false) ((lambda (q336e@t) ((lambda (q3370@ls/false) (if q3370@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"malformed binding form" q335e@stx q335f@fmls)) q3370@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q336e@t))) (q2efa@syntax-dispatch q336e@t '_))) q3362@t))) (q2efa@syntax-dispatch q3362@t '#(each+ any () any)))) q335f@fmls))) (set! q2eb6@let-macro (lambda (q3372@stx) ((lambda (q3374@t) ((lambda (q3376@ls/false) (if q3376@ls/false (apply (lambda (q3378@lhs* q3379@rhs* q337a@b q337b@b*) (if (q2cf9@valid-bound-ids? q3378@lhs*) (q2eb0@bless (cons (cons 'lambda (cons q3378@lhs* (cons q337a@b q337b@b*))) q3379@rhs*)) (q2eb4@invalid-fmls-error q3372@stx q3378@lhs*))) q3376@ls/false) ((lambda (q3380@t) ((lambda (q3382@ls/false) (if (and q3382@ls/false (apply (lambda (q3384@f q3385@lhs* q3386@rhs* q3387@b q3388@b*) (q2cef@id? q3384@f)) q3382@ls/false)) (apply (lambda (q338e@f q338f@lhs* q3390@rhs* q3391@b q3392@b*) (if (q2cf9@valid-bound-ids? q338f@lhs*) (q2eb0@bless (cons (list 'letrec (list (list q338e@f (cons 'lambda (cons q338f@lhs* (cons q3391@b q3392@b*))))) q338e@f) q3390@rhs*)) (q2eb4@invalid-fmls-error q3372@stx q338f@lhs*))) q3382@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3380@t))) (q2efa@syntax-dispatch q3380@t '(_ any #(each (any any)) any . each-any)))) q3374@t))) (q2efa@syntax-dispatch q3374@t '(_ #(each (any any)) any . each-any)))) q3372@stx))) (set! q2eb8@let-values-macro (lambda (q3398@stx) ((lambda (q339b@rename q339d@rename*) (begin (set! q339b@rename (lambda (q3400@x q3401@old* q3402@new*) (begin (if (not (q2cef@id? q3400@x)) (q2fe3@syntax-violation '#f '"not an indentifier" q3398@stx q3400@x) (void)) (if (q2cfd@bound-id-member? q3400@x q3401@old*) (q2fe3@syntax-violation '#f '"duplicate binding" q3398@stx q3400@x) (void)) ((lambda (q3406@y) (values q3406@y (cons q3400@x q3401@old*) (cons q3406@y q3402@new*))) (gensym (q2fe9@syntax->datum q3400@x)))))) (set! q339d@rename* (lambda (q33ee@x* q33ef@old* q33f0@new*) (if (null? q33ee@x*) (values '() q33ef@old* q33f0@new*) (call-with-values (lambda () (q339b@rename (car q33ee@x*) q33ef@old* q33f0@new*)) (lambda (q33f4@x q33f5@old* q33f6@new*) (call-with-values (lambda () (q339d@rename* (cdr q33ee@x*) q33f5@old* q33f6@new*)) (lambda (q33fa@x* q33fb@old* q33fc@new*) (values (cons q33f4@x q33fa@x*) q33fb@old* q33fc@new*)))))))) ((lambda (q339e@t) ((lambda (q33a0@ls/false) (if q33a0@ls/false (apply (lambda (q33a2@b q33a3@b*) (cons* (q2eb0@bless 'let) '() q33a2@b q33a3@b*)) q33a0@ls/false) ((lambda (q33a6@t) ((lambda (q33a8@ls/false) (if q33a8@ls/false (apply (lambda (q33aa@lhs* q33ab@rhs* q33ac@b q33ad@b*) (q2eb0@bless ((letrec ((q33b2@f (lambda (q33b4@lhs* q33b5@rhs* q33b6@old* q33b7@new*) (if (null? q33b4@lhs*) (cons 'let (cons (map list q33b6@old* q33b7@new*) (cons q33ac@b q33ad@b*))) ((lambda (q33bc@t) ((lambda (q33be@ls/false) (if q33be@ls/false (apply (lambda (q33c0@x*) (call-with-values (lambda () (q339d@rename* q33c0@x* q33b6@old* q33b7@new*)) (lambda (q33c8@q33c3 q33c9@q33c5 q33ca@q33c7) ((lambda (q33ce@new* q33cf@old* q33d0@y*) (list 'call-with-values (list 'lambda '() (car q33b5@rhs*)) (list 'lambda q33d0@y* (q33b2@f (cdr q33b4@lhs*) (cdr q33b5@rhs*) q33cf@old* q33ce@new*)))) q33ca@q33c7 q33c9@q33c5 q33c8@q33c3)))) q33be@ls/false) ((lambda (q33d4@t) ((lambda (q33d6@ls/false) (if q33d6@ls/false (apply (lambda (q33d8@x* q33d9@x) (call-with-values (lambda () (q339b@rename q33d9@x q33b6@old* q33b7@new*)) (lambda (q33dc@y q33dd@old* q33de@new*) (call-with-values (lambda () (q339d@rename* q33d8@x* q33dd@old* q33de@new*)) (lambda (q33e2@y* q33e3@old* q33e4@new*) (list 'call-with-values (list 'lambda '() (car q33b5@rhs*)) (list 'lambda (append q33e2@y* q33dc@y) (q33b2@f (cdr q33b4@lhs*) (cdr q33b5@rhs*) q33e3@old* q33e4@new*)))))))) q33d6@ls/false) ((lambda (q33e8@t) ((lambda (q33ea@ls/false) (if q33ea@ls/false (apply (lambda (q33ec@others) (q2fe3@syntax-violation '#f '"malformed bindings" q3398@stx q33ec@others)) q33ea@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q33e8@t))) (q2efa@syntax-dispatch q33e8@t 'any))) q33d4@t))) (q2efa@syntax-dispatch q33d4@t '#(each+ any () any)))) q33bc@t))) (q2efa@syntax-dispatch q33bc@t 'each-any))) (car q33b4@lhs*)))))) q33b2@f) q33aa@lhs* q33ab@rhs* '() '()))) q33a8@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q33a6@t))) (q2efa@syntax-dispatch q33a6@t '(_ #(each (any any)) any . each-any)))) q339e@t))) (q2efa@syntax-dispatch q339e@t '(_ () any . each-any)))) q3398@stx))) '#f '#f))) (set! q2eba@let*-values-macro (lambda (q3408@stx) ((lambda (q340b@check) (begin (set! q340b@check (lambda (q343a@x*) (if (not (null? q343a@x*)) ((lambda (q343c@x) (begin (if (not (q2cef@id? q343c@x)) (q2fe3@syntax-violation '#f '"not an identifier" q3408@stx q343c@x) (void)) (q340b@check (cdr q343a@x*)) (if (q2cfd@bound-id-member? q343c@x (cdr q343a@x*)) (q2fe3@syntax-violation '#f '"duplicate identifier" q3408@stx q343c@x) (void)))) (car q343a@x*)) (void)))) ((lambda (q340c@t) ((lambda (q340e@ls/false) (if q340e@ls/false (apply (lambda (q3410@b q3411@b*) (cons* (q2eb0@bless 'let) '() q3410@b q3411@b*)) q340e@ls/false) ((lambda (q3414@t) ((lambda (q3416@ls/false) (if q3416@ls/false (apply (lambda (q3418@lhs* q3419@rhs* q341a@b q341b@b*) (q2eb0@bless ((letrec ((q3420@f (lambda (q3422@lhs* q3423@rhs*) (if (null? q3422@lhs*) (cons 'begin (cons q341a@b q341b@b*)) ((lambda (q3426@t) ((lambda (q3428@ls/false) (if q3428@ls/false (apply (lambda (q342a@x*) (begin (q340b@check q342a@x*) (list 'call-with-values (list 'lambda '() (car q3423@rhs*)) (list 'lambda q342a@x* (q3420@f (cdr q3422@lhs*) (cdr q3423@rhs*)))))) q3428@ls/false) ((lambda (q342c@t) ((lambda (q342e@ls/false) (if q342e@ls/false (apply (lambda (q3430@x* q3431@x) (begin (q340b@check (cons q3431@x q3430@x*)) (list 'call-with-values (list 'lambda '() (car q3423@rhs*)) (list 'lambda (append q3430@x* q3431@x) (q3420@f (cdr q3422@lhs*) (cdr q3423@rhs*)))))) q342e@ls/false) ((lambda (q3434@t) ((lambda (q3436@ls/false) (if q3436@ls/false (apply (lambda (q3438@others) (q2fe3@syntax-violation '#f '"malformed bindings" q3408@stx q3438@others)) q3436@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3434@t))) (q2efa@syntax-dispatch q3434@t 'any))) q342c@t))) (q2efa@syntax-dispatch q342c@t '#(each+ any () any)))) q3426@t))) (q2efa@syntax-dispatch q3426@t 'each-any))) (car q3422@lhs*)))))) q3420@f) q3418@lhs* q3419@rhs*))) q3416@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3414@t))) (q2efa@syntax-dispatch q3414@t '(_ #(each (any any)) any . each-any)))) q340c@t))) (q2efa@syntax-dispatch q340c@t '(_ () any . each-any)))) q3408@stx))) '#f))) (set! q2ebc@trace-lambda-macro (lambda (q343e@stx) ((lambda (q3440@t) ((lambda (q3442@ls/false) (if q3442@ls/false (apply (lambda (q3444@who q3445@fmls q3446@b q3447@b*) (if (q2cf9@valid-bound-ids? q3445@fmls) (q2eb0@bless (list 'make-traced-procedure (list 'quote q3444@who) (cons 'lambda (cons q3445@fmls (cons q3446@b q3447@b*))))) (q2eb4@invalid-fmls-error q343e@stx q3445@fmls))) q3442@ls/false) ((lambda (q344c@t) ((lambda (q344e@ls/false) (if q344e@ls/false (apply (lambda (q3450@who q3451@fmls q3452@last q3453@b q3454@b*) (if (q2cf9@valid-bound-ids? (cons q3452@last q3451@fmls)) (q2eb0@bless (list 'make-traced-procedure (list 'quote q3450@who) (cons 'lambda (cons (append q3451@fmls q3452@last) (cons q3453@b q3454@b*))))) (q2eb4@invalid-fmls-error q343e@stx (append q3451@fmls q3452@last)))) q344e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q344c@t))) (q2efa@syntax-dispatch q344c@t '(_ any #(each+ any () any) any . each-any)))) q3440@t))) (q2efa@syntax-dispatch q3440@t '(_ any each-any any . each-any)))) q343e@stx))) (set! q2ebe@trace-define-macro (lambda (q345a@stx) ((lambda (q345c@t) ((lambda (q345e@ls/false) (if q345e@ls/false (apply (lambda (q3460@who q3461@fmls q3462@b q3463@b*) (if (q2cf9@valid-bound-ids? q3461@fmls) (q2eb0@bless (list 'define q3460@who (list 'make-traced-procedure (list 'quote q3460@who) (cons 'lambda (cons q3461@fmls (cons q3462@b q3463@b*)))))) (q2eb4@invalid-fmls-error q345a@stx q3461@fmls))) q345e@ls/false) ((lambda (q3468@t) ((lambda (q346a@ls/false) (if q346a@ls/false (apply (lambda (q346c@who q346d@fmls q346e@last q346f@b q3470@b*) (if (q2cf9@valid-bound-ids? (cons q346e@last q346d@fmls)) (q2eb0@bless (list 'define q346c@who (list 'make-traced-procedure (list 'quote q346c@who) (cons 'lambda (cons (append q346d@fmls q346e@last) (cons q346f@b q3470@b*)))))) (q2eb4@invalid-fmls-error q345a@stx (append q346d@fmls q346e@last)))) q346a@ls/false) ((lambda (q3476@t) ((lambda (q3478@ls/false) (if q3478@ls/false (apply (lambda (q347a@who q347b@expr) (if (q2cef@id? q347a@who) (q2eb0@bless (list 'define q347a@who (list 'let (list (list 'v q347b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote q347a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (q2fe3@syntax-violation '#f '"invalid name" q345a@stx))) q3478@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3476@t))) (q2efa@syntax-dispatch q3476@t '(_ any any)))) q3468@t))) (q2efa@syntax-dispatch q3468@t '(_ (any . #(each+ any () any)) any . each-any)))) q345c@t))) (q2efa@syntax-dispatch q345c@t '(_ (any . each-any) any . each-any)))) q345a@stx))) (set! q2ec0@trace-define-syntax-macro (lambda (q347e@stx) ((lambda (q3480@t) ((lambda (q3482@ls/false) (if q3482@ls/false (apply (lambda (q3484@who q3485@expr) (if (q2cef@id? q3484@who) (q2eb0@bless (list 'define-syntax q3484@who (list 'make-traced-macro (list 'quote q3484@who) q3485@expr))) (q2fe3@syntax-violation '#f '"invalid name" q347e@stx))) q3482@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3480@t))) (q2efa@syntax-dispatch q3480@t '(_ any any)))) q347e@stx))) (set! q2ec2@trace-let/rec-syntax (lambda (q3488@who) (lambda (q348a@stx) ((lambda (q348c@t) ((lambda (q348e@ls/false) (if q348e@ls/false (apply (lambda (q3490@lhs* q3491@rhs* q3492@b q3493@b*) (if (q2cf9@valid-bound-ids? q3490@lhs*) ((lambda (q3498@rhs*) (q2eb0@bless (cons q3488@who (cons (map list q3490@lhs* q3498@rhs*) (cons q3492@b q3493@b*))))) (map (lambda (q349a@lhs q349b@rhs) (list 'make-traced-macro (list 'quote q349a@lhs) q349b@rhs)) q3490@lhs* q3491@rhs*)) (q2eb4@invalid-fmls-error q348a@stx q3490@lhs*))) q348e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q348c@t))) (q2efa@syntax-dispatch q348c@t '(_ #(each (any any)) any . each-any)))) q348a@stx)))) (set! q2ec4@trace-let-syntax-macro (q2ec2@trace-let/rec-syntax 'let-syntax)) (set! q2ec6@trace-letrec-syntax-macro (q2ec2@trace-let/rec-syntax 'letrec-syntax)) (set! q2ec8@guard-macro (lambda (q349e@x) ((lambda (q34a1@gen-clauses) (begin (set! q34a1@gen-clauses (lambda (q34b8@con q34b9@outerk q34ba@clause*) ((lambda (q34bf@f q34c1@f*) (begin (set! q34bf@f (lambda (q34f8@x q34f9@k) ((lambda (q34fc@t) ((lambda (q34fe@ls/false) (if q34fe@ls/false (apply (lambda (q3500@e q3501@p) ((lambda (q3504@t) (list 'let (list (list q3504@t q3500@e)) (list 'if q3504@t (list q3501@p q3504@t) q34f9@k))) (gensym))) q34fe@ls/false) ((lambda (q3506@t) ((lambda (q3508@ls/false) (if q3508@ls/false (apply (lambda (q350a@e) ((lambda (q350c@t) (list 'let (list (list q350c@t q350a@e)) (list 'if q350c@t q350c@t q34f9@k))) (gensym))) q3508@ls/false) ((lambda (q350e@t) ((lambda (q3510@ls/false) (if q3510@ls/false (apply (lambda (q3512@e q3513@v q3514@v*) (list 'if q3512@e (cons 'begin (cons q3513@v q3514@v*)) q34f9@k)) q3510@ls/false) ((lambda (q3518@t) ((lambda (q351a@ls/false) (if q351a@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid guard clause" q34f8@x)) q351a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3518@t))) (q2efa@syntax-dispatch q3518@t '_))) q350e@t))) (q2efa@syntax-dispatch q350e@t '(any any . each-any)))) q3506@t))) (q2efa@syntax-dispatch q3506@t '(any)))) q34fc@t))) (q2efa@syntax-dispatch q34fc@t '(any #(scheme-id =>) any)))) q34f8@x))) (set! q34c1@f* (lambda (q34ce@x*) ((lambda (q34d0@t) ((lambda (q34d2@ls/false) (if q34d2@ls/false (apply (lambda () ((lambda (q34d4@g) (values (list q34d4@g (list 'lambda '() (list 'raise-continuable q34b8@con))) q34d4@g)) (gensym))) q34d2@ls/false) ((lambda (q34d6@t) ((lambda (q34d8@ls/false) (if q34d8@ls/false (apply (lambda (q34da@e q34db@e*) (values (cons 'begin (cons q34da@e q34db@e*)) '#f)) q34d8@ls/false) ((lambda (q34de@t) ((lambda (q34e0@ls/false) (if q34e0@ls/false (apply (lambda (q34e2@cls q34e3@cls*) (call-with-values (lambda () (q34c1@f* q34e3@cls*)) (lambda (q34ea@q34e7 q34eb@q34e9) ((lambda (q34ee@g q34ef@e) (values (q34bf@f q34e2@cls q34ef@e) q34ee@g)) q34eb@q34e9 q34ea@q34e7)))) q34e0@ls/false) ((lambda (q34f2@t) ((lambda (q34f4@ls/false) (if q34f4@ls/false (apply (lambda (q34f6@others) (q2fe3@syntax-violation '#f '"invalid guard clause" q34f6@others)) q34f4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q34f2@t))) (q2efa@syntax-dispatch q34f2@t 'any))) q34de@t))) (q2efa@syntax-dispatch q34de@t '(any . any)))) q34d6@t))) (q2efa@syntax-dispatch q34d6@t '((#(scheme-id else) any . each-any))))) q34d0@t))) (q2efa@syntax-dispatch q34d0@t '()))) q34ce@x*))) (call-with-values (lambda () (q34c1@f* q34ba@clause*)) (lambda (q34c6@q34c3 q34c7@q34c5) ((lambda (q34ca@raisek q34cb@code) (if q34ca@raisek (list (list 'call/cc (list 'lambda (list q34ca@raisek) (list q34b9@outerk (list 'lambda '() q34cb@code))))) (list q34b9@outerk (list 'lambda '() q34cb@code)))) q34c7@q34c5 q34c6@q34c3))))) '#f '#f))) ((lambda (q34a2@t) ((lambda (q34a4@ls/false) (if (and q34a4@ls/false (apply (lambda (q34a6@con q34a7@clause* q34a8@b q34a9@b*) (q2cef@id? q34a6@con)) q34a4@ls/false)) (apply (lambda (q34ae@con q34af@clause* q34b0@b q34b1@b*) ((lambda (q34b6@outerk) (q2eb0@bless (list (list 'call/cc (list 'lambda (list q34b6@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list q34ae@con) (q34a1@gen-clauses q34ae@con q34b6@outerk q34af@clause*)) (cons 'lambda (cons '() (cons q34b0@b q34b1@b*)))))))))) (gensym))) q34a4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q34a2@t))) (q2efa@syntax-dispatch q34a2@t '(_ (any . each-any) any . each-any)))) q349e@x))) '#f))) (set! q2eca@define-enumeration-macro (lambda (q351c@stx) ((lambda (q351f@set? q3521@remove-dups) (begin (set! q351f@set? (lambda (q3538@x) (or (null? q3538@x) (and (not (memq (car q3538@x) (cdr q3538@x))) (q351f@set? (cdr q3538@x)))))) (set! q3521@remove-dups (lambda (q3536@ls) (if (null? q3536@ls) '() (cons (car q3536@ls) (q3521@remove-dups (remq (car q3536@ls) (cdr q3536@ls))))))) ((lambda (q3522@t) ((lambda (q3524@ls/false) (if (and q3524@ls/false (apply (lambda (q3526@name q3527@id* q3528@maker) (and (q2cef@id? q3526@name) (q2cef@id? q3528@maker) (for-all q2cef@id? q3527@id*))) q3524@ls/false)) (apply (lambda (q352c@name q352d@id* q352e@maker) ((lambda (q3532@name* q3533@mk) (q2eb0@bless (list 'begin (list 'define q3533@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote q3532@name*)))) (list 'define-syntax q352c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote q3532@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote q352c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax q352e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote q352e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote q3532@name*)) (cons 'syntax-violation (cons (list 'quote q352e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons q3533@mk '('(n* ...)))))))))))) (q3521@remove-dups (q2fe9@syntax->datum q352d@id*)) (gensym))) q3524@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3522@t))) (q2efa@syntax-dispatch q3522@t '(_ any each-any any)))) q351c@stx))) '#f '#f))) (set! q2ecc@time-macro (lambda (q353a@stx) ((lambda (q353c@t) ((lambda (q353e@ls/false) (if q353e@ls/false (apply (lambda (q3540@expr) (q2eb0@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() q3540@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) q353e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q353c@t))) (q2efa@syntax-dispatch q353c@t '(_ any)))) q353a@stx))) (set! q2ece@delay-macro (lambda (q3542@stx) ((lambda (q3544@t) ((lambda (q3546@ls/false) (if q3546@ls/false (apply (lambda (q3548@expr) (q2eb0@bless (list 'make-promise (list 'lambda '() q3548@expr)))) q3546@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3544@t))) (q2efa@syntax-dispatch q3544@t '(_ any)))) q3542@stx))) (set! q2ed0@assert-macro (lambda (q354a@stx) ((lambda (q354c@t) ((lambda (q354e@ls/false) (if q354e@ls/false (apply (lambda (q3550@expr) ((lambda (q3552@pos) (q2eb0@bless (list 'unless q3550@expr (list 'assertion-error (list 'quote q3550@expr) (list 'quote q3552@pos))))) (or (q2fdb@expression-position q354a@stx) (q2fdb@expression-position q3550@expr)))) q354e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q354c@t))) (q2efa@syntax-dispatch q354c@t '(_ any)))) q354a@stx))) (set! q2ed2@endianness-macro (lambda (q3554@stx) ((lambda (q3556@t) ((lambda (q3558@ls/false) (if q3558@ls/false (apply (lambda (q355a@e) ((lambda (q355c@t) (if (memv q355c@t '(little)) (q2eb0@bless ''little) (if (memv q355c@t '(big)) (q2eb0@bless ''big) (q2fe3@syntax-violation '#f '"endianness must be big or little" q3554@stx)))) (q2fe9@syntax->datum q355a@e))) q3558@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3556@t))) (q2efa@syntax-dispatch q3556@t '(_ any)))) q3554@stx))) (set! q2ed4@identifier-syntax-macro (lambda (q355e@stx) ((lambda (q3560@t) ((lambda (q3562@ls/false) (if q3562@ls/false (apply (lambda (q3564@expr) (q2eb0@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax q3564@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax q3564@expr) '((syntax (e* ...)))))))))) q3562@ls/false) ((lambda (q3566@t) ((lambda (q3568@ls/false) (if (and q3568@ls/false (apply (lambda (q356a@id1 q356b@expr1 q356c@id2 q356d@expr2 q356e@expr3) (and (q2cef@id? q356a@id1) (q2cef@id? q356c@id2) (q2cef@id? q356d@expr2))) q3568@ls/false)) (apply (lambda (q3574@id1 q3575@expr1 q3576@id2 q3577@expr2 q3578@expr3) (q2eb0@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax q3575@expr1)) (list (list 'set! 'id q3577@expr2) (list 'syntax q3578@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons q3575@expr1 '(e* ...))))))))) q3568@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3566@t))) (q2efa@syntax-dispatch q3566@t '(_ (any any) ((#(scheme-id set!) any any) any))))) q3560@t))) (q2efa@syntax-dispatch q3560@t '(_ any)))) q355e@stx))) (set! q2ed6@do-macro (lambda (q357e@stx) ((lambda (q3581@bind) (begin (set! q3581@bind (lambda (q3598@x) ((lambda (q359a@t) ((lambda (q359c@ls/false) (if q359c@ls/false (apply (lambda (q359e@x q359f@init) (list q359e@x q359f@init q359e@x)) q359c@ls/false) ((lambda (q35a2@t) ((lambda (q35a4@ls/false) (if q35a4@ls/false (apply (lambda (q35a6@x q35a7@init q35a8@step) (list q35a6@x q35a7@init q35a8@step)) q35a4@ls/false) ((lambda (q35ac@t) ((lambda (q35ae@ls/false) (if q35ae@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid binding" q357e@stx)) q35ae@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q35ac@t))) (q2efa@syntax-dispatch q35ac@t '_))) q35a2@t))) (q2efa@syntax-dispatch q35a2@t '(any any any)))) q359a@t))) (q2efa@syntax-dispatch q359a@t '(any any)))) q3598@x))) ((lambda (q3582@t) ((lambda (q3584@ls/false) (if q3584@ls/false (apply (lambda (q3586@binding* q3587@test q3588@expr* q3589@command*) ((lambda (q358e@t) ((lambda (q3590@ls/false) (if q3590@ls/false (apply (lambda (q3592@x* q3593@init* q3594@step*) (if (q2cf9@valid-bound-ids? q3592@x*) (q2eb0@bless (list 'letrec (list (list 'loop (list 'lambda q3592@x* (list 'if q3587@test (cons 'begin (cons '(if #f #f) q3588@expr*)) (cons 'begin (append q3589@command* (list (cons 'loop q3594@step*)))))))) (cons 'loop q3593@init*))) (q2fe3@syntax-violation '#f '"invalid bindings" q357e@stx))) q3590@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q358e@t))) (q2efa@syntax-dispatch q358e@t '#(each (any any any))))) (map q3581@bind q3586@binding*))) q3584@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3582@t))) (q2efa@syntax-dispatch q3582@t '(_ each-any (any . each-any) . each-any)))) q357e@stx))) '#f))) (set! q2ed8@let*-macro (lambda (q35b0@stx) ((lambda (q35b2@t) ((lambda (q35b4@ls/false) (if (and q35b4@ls/false (apply (lambda (q35b6@lhs* q35b7@rhs* q35b8@b q35b9@b*) (for-all q2cef@id? q35b6@lhs*)) q35b4@ls/false)) (apply (lambda (q35be@lhs* q35bf@rhs* q35c0@b q35c1@b*) (q2eb0@bless ((letrec ((q35c6@f (lambda (q35c8@x*) (if (null? q35c8@x*) (cons 'let (cons '() (cons q35c0@b q35c1@b*))) (list 'let (list (car q35c8@x*)) (q35c6@f (cdr q35c8@x*))))))) q35c6@f) (map list q35be@lhs* q35bf@rhs*)))) q35b4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q35b2@t))) (q2efa@syntax-dispatch q35b2@t '(_ #(each (any any)) any . each-any)))) q35b0@stx))) (set! q2eda@or-macro (lambda (q35ca@stx) ((lambda (q35cc@t) ((lambda (q35ce@ls/false) (if q35ce@ls/false (apply (lambda () '#f) q35ce@ls/false) ((lambda (q35d0@t) ((lambda (q35d2@ls/false) (if q35d2@ls/false (apply (lambda (q35d4@e q35d5@e*) (q2eb0@bless ((letrec ((q35d8@f (lambda (q35da@e q35db@e*) (if (null? q35db@e*) (list 'begin '#f q35da@e) (list 'let (list (list 't q35da@e)) (list 'if 't 't (q35d8@f (car q35db@e*) (cdr q35db@e*)))))))) q35d8@f) q35d4@e q35d5@e*))) q35d2@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q35d0@t))) (q2efa@syntax-dispatch q35d0@t '(_ any . each-any)))) q35cc@t))) (q2efa@syntax-dispatch q35cc@t '(_)))) q35ca@stx))) (set! q2edc@and-macro (lambda (q35de@stx) ((lambda (q35e0@t) ((lambda (q35e2@ls/false) (if q35e2@ls/false (apply (lambda () '#t) q35e2@ls/false) ((lambda (q35e4@t) ((lambda (q35e6@ls/false) (if q35e6@ls/false (apply (lambda (q35e8@e q35e9@e*) (q2eb0@bless ((letrec ((q35ec@f (lambda (q35ee@e q35ef@e*) (if (null? q35ef@e*) (list 'begin '#f q35ee@e) (cons 'if (cons q35ee@e (cons (q35ec@f (car q35ef@e*) (cdr q35ef@e*)) '(#f)))))))) q35ec@f) q35e8@e q35e9@e*))) q35e6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q35e4@t))) (q2efa@syntax-dispatch q35e4@t '(_ any . each-any)))) q35e0@t))) (q2efa@syntax-dispatch q35e0@t '(_)))) q35de@stx))) (set! q2ede@cond-macro (lambda (q35f2@stx) ((lambda (q35f4@t) ((lambda (q35f6@ls/false) (if q35f6@ls/false (apply (lambda (q35f8@cls q35f9@cls*) (q2eb0@bless ((letrec ((q35fc@f (lambda (q35fe@cls q35ff@cls*) (if (null? q35ff@cls*) ((lambda (q3602@t) ((lambda (q3604@ls/false) (if q3604@ls/false (apply (lambda (q3606@e q3607@e*) (cons 'begin (cons q3606@e q3607@e*))) q3604@ls/false) ((lambda (q360a@t) ((lambda (q360c@ls/false) (if q360c@ls/false (apply (lambda (q360e@e q360f@p) (list 'let (list (list 't q360e@e)) (list 'if 't (cons q360f@p '(t))))) q360c@ls/false) ((lambda (q3612@t) ((lambda (q3614@ls/false) (if q3614@ls/false (apply (lambda (q3616@e) (cons 'or (cons q3616@e '((if #f #f))))) q3614@ls/false) ((lambda (q3618@t) ((lambda (q361a@ls/false) (if q361a@ls/false (apply (lambda (q361c@e q361d@e*) (list 'if q361c@e (cons 'begin q361d@e*))) q361a@ls/false) ((lambda (q3620@t) ((lambda (q3622@ls/false) (if q3622@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid last clause" q35f2@stx)) q3622@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3620@t))) (q2efa@syntax-dispatch q3620@t '_))) q3618@t))) (q2efa@syntax-dispatch q3618@t '(any . each-any)))) q3612@t))) (q2efa@syntax-dispatch q3612@t '(any)))) q360a@t))) (q2efa@syntax-dispatch q360a@t '(any #(scheme-id =>) any)))) q3602@t))) (q2efa@syntax-dispatch q3602@t '(#(scheme-id else) any . each-any)))) q35fe@cls) ((lambda (q3624@t) ((lambda (q3626@ls/false) (if q3626@ls/false (apply (lambda (q3628@e q3629@e*) (q2fe3@syntax-violation '#f '"incorrect position of keyword else" q35f2@stx)) q3626@ls/false) ((lambda (q362c@t) ((lambda (q362e@ls/false) (if q362e@ls/false (apply (lambda (q3630@e q3631@p) (list 'let (list (list 't q3630@e)) (list 'if 't (cons q3631@p '(t)) (q35fc@f (car q35ff@cls*) (cdr q35ff@cls*))))) q362e@ls/false) ((lambda (q3634@t) ((lambda (q3636@ls/false) (if q3636@ls/false (apply (lambda (q3638@e) (list 'or q3638@e (q35fc@f (car q35ff@cls*) (cdr q35ff@cls*)))) q3636@ls/false) ((lambda (q363a@t) ((lambda (q363c@ls/false) (if q363c@ls/false (apply (lambda (q363e@e q363f@e*) (list 'if q363e@e (cons 'begin q363f@e*) (q35fc@f (car q35ff@cls*) (cdr q35ff@cls*)))) q363c@ls/false) ((lambda (q3642@t) ((lambda (q3644@ls/false) (if q3644@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid last clause" q35f2@stx)) q3644@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3642@t))) (q2efa@syntax-dispatch q3642@t '_))) q363a@t))) (q2efa@syntax-dispatch q363a@t '(any . each-any)))) q3634@t))) (q2efa@syntax-dispatch q3634@t '(any)))) q362c@t))) (q2efa@syntax-dispatch q362c@t '(any #(scheme-id =>) any)))) q3624@t))) (q2efa@syntax-dispatch q3624@t '(#(scheme-id else) any . each-any)))) q35fe@cls))))) q35fc@f) q35f8@cls q35f9@cls*))) q35f6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q35f4@t))) (q2efa@syntax-dispatch q35f4@t '(_ any . each-any)))) q35f2@stx))) (set! q2ee0@do-include (lambda (q3646@stx q3647@id q3648@filename) ((lambda (q364c@filename) (begin (if (not (and (string? q364c@filename) (q2cef@id? q3647@id))) (q2fe3@syntax-violation '#f '"invalid syntax" q3646@stx) (void)) (cons (q2eb0@bless 'begin) (with-input-from-file q364c@filename (lambda () ((letrec ((q364e@f (lambda (q3650@ls) ((lambda (q3652@x) (if (eof-object? q3652@x) (reverse q3650@ls) (q364e@f (cons (q2ccd@datum->stx q3647@id q3652@x) q3650@ls)))) (q288c@q27a9@read-annotated))))) q364e@f) '())))))) (q2d05@stx->datum q3648@filename)))) (set! q2ee2@include-macro (lambda (q3654@e) ((lambda (q3656@t) ((lambda (q3658@ls/false) (if q3658@ls/false (apply (lambda (q365a@id q365b@filename) (q2ee0@do-include q3654@e q365a@id q365b@filename)) q3658@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3656@t))) (q2efa@syntax-dispatch q3656@t '(any any)))) q3654@e))) (set! q2ee4@include-into-macro (lambda (q365e@e) ((lambda (q3660@t) ((lambda (q3662@ls/false) (if q3662@ls/false (apply (lambda (q3664@id q3665@filename) (q2ee0@do-include q365e@e q3664@id q3665@filename)) q3662@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3660@t))) (q2efa@syntax-dispatch q3660@t '(_ any any)))) q365e@e))) (set! q2ee6@syntax-rules-macro (lambda (q3668@e) ((lambda (q366a@t) ((lambda (q366c@ls/false) (if q366c@ls/false (apply (lambda (q366e@lits q366f@pat* q3670@tmp*) (begin (q2f00@verify-literals q366e@lits q3668@e) (q2eb0@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons q366e@lits (map (lambda (q3674@pat q3675@tmp) ((lambda (q3678@t) ((lambda (q367a@ls/false) (if q367a@ls/false (apply (lambda (q367c@rest) (list (cons 'g q367c@rest) (list 'syntax q3675@tmp))) q367a@ls/false) ((lambda (q367e@t) ((lambda (q3680@ls/false) (if q3680@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid syntax-rules pattern" q3668@e q3674@pat)) q3680@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q367e@t))) (q2efa@syntax-dispatch q367e@t '_))) q3678@t))) (q2efa@syntax-dispatch q3678@t '(_ . any)))) q3674@pat)) q366f@pat* q3670@tmp*)))))))) q366c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q366a@t))) (q2efa@syntax-dispatch q366a@t '(_ each-any . #(each (any any)))))) q3668@e))) (set! q2ee8@quasiquote-macro ((lambda () ((lambda (q3683@datum q369f@quasicons* q36a1@quasicons q36a3@quasiappend q36a5@quasivector q36a7@vquasi q36a9@quasi) (begin (set! q3683@datum (lambda (q3784@x) (list (q2e84@scheme-stx 'quote) (q2cd7@mkstx q3784@x '() '() '())))) (set! q369f@quasicons* (lambda (q377c@x q377d@y) ((letrec ((q3780@f (lambda (q3782@x) (if (null? q3782@x) q377d@y (q36a1@quasicons (car q3782@x) (q3780@f (cdr q3782@x))))))) q3780@f) q377c@x))) (set! q36a1@quasicons (lambda (q3756@x q3757@y) ((lambda (q375a@t) ((lambda (q375c@ls/false) (if q375c@ls/false (apply (lambda (q375e@dy) ((lambda (q3760@t) ((lambda (q3762@ls/false) (if q3762@ls/false (apply (lambda (q3764@dx) (list (q2e84@scheme-stx 'quote) (cons q3764@dx q375e@dy))) q3762@ls/false) ((lambda (q3766@t) ((lambda (q3768@ls/false) (if q3768@ls/false (apply (lambda () ((lambda (q376a@t) ((lambda (q376c@ls/false) (if q376c@ls/false (apply (lambda () (list (q2e84@scheme-stx 'list) q3756@x)) q376c@ls/false) ((lambda (q376e@t) ((lambda (q3770@ls/false) (if q3770@ls/false (apply (lambda () (list (q2e84@scheme-stx 'cons) q3756@x q3757@y)) q3770@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q376e@t))) (q2efa@syntax-dispatch q376e@t '_))) q376a@t))) (q2efa@syntax-dispatch q376a@t '()))) q375e@dy)) q3768@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3766@t))) (q2efa@syntax-dispatch q3766@t '_))) q3760@t))) (q2efa@syntax-dispatch q3760@t '(#(scheme-id quote) any)))) q3756@x)) q375c@ls/false) ((lambda (q3772@t) ((lambda (q3774@ls/false) (if q3774@ls/false (apply (lambda (q3776@stuff) (cons* (q2e84@scheme-stx 'list) q3756@x q3776@stuff)) q3774@ls/false) ((lambda (q3778@t) ((lambda (q377a@ls/false) (if q377a@ls/false (apply (lambda () (list (q2e84@scheme-stx 'cons) q3756@x q3757@y)) q377a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3778@t))) (q2efa@syntax-dispatch q3778@t '_))) q3772@t))) (q2efa@syntax-dispatch q3772@t '(#(scheme-id list) . each-any)))) q375a@t))) (q2efa@syntax-dispatch q375a@t '(#(scheme-id quote) any)))) q3757@y))) (set! q36a3@quasiappend (lambda (q373c@x q373d@y) ((lambda (q3740@ls) (if (null? q3740@ls) (list (q2e84@scheme-stx 'quote) '()) (if (null? (cdr q3740@ls)) (car q3740@ls) (cons* (q2e84@scheme-stx 'append) q3740@ls)))) ((letrec ((q3742@f (lambda (q3744@x) (if (null? q3744@x) ((lambda (q3746@t) ((lambda (q3748@ls/false) (if q3748@ls/false (apply (lambda () '()) q3748@ls/false) ((lambda (q374a@t) ((lambda (q374c@ls/false) (if q374c@ls/false (apply (lambda () (list q373d@y)) q374c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q374a@t))) (q2efa@syntax-dispatch q374a@t '_))) q3746@t))) (q2efa@syntax-dispatch q3746@t '(#(scheme-id quote) ())))) q373d@y) ((lambda (q374e@t) ((lambda (q3750@ls/false) (if q3750@ls/false (apply (lambda () (q3742@f (cdr q3744@x))) q3750@ls/false) ((lambda (q3752@t) ((lambda (q3754@ls/false) (if q3754@ls/false (apply (lambda () (cons (car q3744@x) (q3742@f (cdr q3744@x)))) q3754@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3752@t))) (q2efa@syntax-dispatch q3752@t '_))) q374e@t))) (q2efa@syntax-dispatch q374e@t '(#(scheme-id quote) ())))) (car q3744@x)))))) q3742@f) q373c@x)))) (set! q36a5@quasivector (lambda (q370a@x) ((lambda (q370c@pat-x) ((lambda (q370e@t) ((lambda (q3710@ls/false) (if q3710@ls/false (apply (lambda (q3712@x*) (list (q2e84@scheme-stx 'quote) (list->vector q3712@x*))) q3710@ls/false) ((lambda (q3714@t) ((lambda (q3716@ls/false) (if q3716@ls/false (apply (lambda () ((letrec ((q3718@f (lambda (q371a@x q371b@k) ((lambda (q371e@t) ((lambda (q3720@ls/false) (if q3720@ls/false (apply (lambda (q3722@x*) (q371b@k (map (lambda (q3724@x) (list (q2e84@scheme-stx 'quote) q3724@x)) q3722@x*))) q3720@ls/false) ((lambda (q3726@t) ((lambda (q3728@ls/false) (if q3728@ls/false (apply (lambda (q372a@x*) (q371b@k q372a@x*)) q3728@ls/false) ((lambda (q372c@t) ((lambda (q372e@ls/false) (if q372e@ls/false (apply (lambda (q3730@x q3731@y) (q3718@f q3731@y (lambda (q3734@ls) (q371b@k (cons q3730@x q3734@ls))))) q372e@ls/false) ((lambda (q3736@t) ((lambda (q3738@ls/false) (if q3738@ls/false (apply (lambda () (list (q2e84@scheme-stx 'list->vector) q370c@pat-x)) q3738@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3736@t))) (q2efa@syntax-dispatch q3736@t '_))) q372c@t))) (q2efa@syntax-dispatch q372c@t '(#(scheme-id cons) any any)))) q3726@t))) (q2efa@syntax-dispatch q3726@t '(#(scheme-id list) . each-any)))) q371e@t))) (q2efa@syntax-dispatch q371e@t '(#(scheme-id quote) each-any)))) q371a@x)))) q3718@f) q370a@x (lambda (q373a@ls) (cons* (q2e84@scheme-stx 'vector) q373a@ls)))) q3716@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3714@t))) (q2efa@syntax-dispatch q3714@t '_))) q370e@t))) (q2efa@syntax-dispatch q370e@t '(#(scheme-id quote) each-any)))) q370c@pat-x)) q370a@x))) (set! q36a7@vquasi (lambda (q36e8@p q36e9@lev) ((lambda (q36ec@t) ((lambda (q36ee@ls/false) (if q36ee@ls/false (apply (lambda (q36f0@p q36f1@q) ((lambda (q36f4@t) ((lambda (q36f6@ls/false) (if q36f6@ls/false (apply (lambda (q36f8@p) (if (= q36e9@lev '0) (q369f@quasicons* q36f8@p (q36a7@vquasi q36f1@q q36e9@lev)) (q36a1@quasicons (q36a1@quasicons (q3683@datum 'unquote) (q36a9@quasi q36f8@p (- q36e9@lev '1))) (q36a7@vquasi q36f1@q q36e9@lev)))) q36f6@ls/false) ((lambda (q36fa@t) ((lambda (q36fc@ls/false) (if q36fc@ls/false (apply (lambda (q36fe@p) (if (= q36e9@lev '0) (q36a3@quasiappend q36fe@p (q36a7@vquasi q36f1@q q36e9@lev)) (q36a1@quasicons (q36a1@quasicons (q3683@datum 'unquote-splicing) (q36a9@quasi q36fe@p (- q36e9@lev '1))) (q36a7@vquasi q36f1@q q36e9@lev)))) q36fc@ls/false) ((lambda (q3700@t) ((lambda (q3702@ls/false) (if q3702@ls/false (apply (lambda (q3704@p) (q36a1@quasicons (q36a9@quasi q3704@p q36e9@lev) (q36a7@vquasi q36f1@q q36e9@lev))) q3702@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3700@t))) (q2efa@syntax-dispatch q3700@t 'any))) q36fa@t))) (q2efa@syntax-dispatch q36fa@t '(#(scheme-id unquote-splicing) . each-any)))) q36f4@t))) (q2efa@syntax-dispatch q36f4@t '(#(scheme-id unquote) . each-any)))) q36f0@p)) q36ee@ls/false) ((lambda (q3706@t) ((lambda (q3708@ls/false) (if q3708@ls/false (apply (lambda () (list (q2e84@scheme-stx 'quote) '())) q3708@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3706@t))) (q2efa@syntax-dispatch q3706@t '()))) q36ec@t))) (q2efa@syntax-dispatch q36ec@t '(any . any)))) q36e8@p))) (set! q36a9@quasi (lambda (q36b2@p q36b3@lev) ((lambda (q36b6@t) ((lambda (q36b8@ls/false) (if q36b8@ls/false (apply (lambda (q36ba@p) (if (= q36b3@lev '0) q36ba@p (q36a1@quasicons (q3683@datum 'unquote) (q36a9@quasi (list q36ba@p) (- q36b3@lev '1))))) q36b8@ls/false) ((lambda (q36bc@t) ((lambda (q36be@ls/false) (if q36be@ls/false (apply (lambda (q36c0@p q36c1@q) (if (= q36b3@lev '0) (q369f@quasicons* q36c0@p (q36a9@quasi q36c1@q q36b3@lev)) (q36a1@quasicons (q36a1@quasicons (q3683@datum 'unquote) (q36a9@quasi q36c0@p (- q36b3@lev '1))) (q36a9@quasi q36c1@q q36b3@lev)))) q36be@ls/false) ((lambda (q36c4@t) ((lambda (q36c6@ls/false) (if q36c6@ls/false (apply (lambda (q36c8@p q36c9@q) (if (= q36b3@lev '0) (q36a3@quasiappend q36c8@p (q36a9@quasi q36c9@q q36b3@lev)) (q36a1@quasicons (q36a1@quasicons (q3683@datum 'unquote-splicing) (q36a9@quasi q36c8@p (- q36b3@lev '1))) (q36a9@quasi q36c9@q q36b3@lev)))) q36c6@ls/false) ((lambda (q36cc@t) ((lambda (q36ce@ls/false) (if q36ce@ls/false (apply (lambda (q36d0@p) (q36a1@quasicons (q3683@datum 'quasiquote) (q36a9@quasi (list q36d0@p) (+ q36b3@lev '1)))) q36ce@ls/false) ((lambda (q36d2@t) ((lambda (q36d4@ls/false) (if q36d4@ls/false (apply (lambda (q36d6@p q36d7@q) (q36a1@quasicons (q36a9@quasi q36d6@p q36b3@lev) (q36a9@quasi q36d7@q q36b3@lev))) q36d4@ls/false) ((lambda (q36da@t) ((lambda (q36dc@ls/false) (if (and q36dc@ls/false (apply (lambda (q36de@x) (not (q2cb7@stx? q36de@x))) q36dc@ls/false)) (apply (lambda (q36e0@x) (q36a5@quasivector (q36a7@vquasi q36e0@x q36b3@lev))) q36dc@ls/false) ((lambda (q36e2@t) ((lambda (q36e4@ls/false) (if q36e4@ls/false (apply (lambda (q36e6@p) (list (q2e84@scheme-stx 'quote) q36e6@p)) q36e4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q36e2@t))) (q2efa@syntax-dispatch q36e2@t 'any))) q36da@t))) (q2efa@syntax-dispatch q36da@t '#(vector each-any)))) q36d2@t))) (q2efa@syntax-dispatch q36d2@t '(any . any)))) q36cc@t))) (q2efa@syntax-dispatch q36cc@t '(#(scheme-id quasiquote) any)))) q36c4@t))) (q2efa@syntax-dispatch q36c4@t '((#(scheme-id unquote-splicing) . each-any) . any)))) q36bc@t))) (q2efa@syntax-dispatch q36bc@t '((#(scheme-id unquote) . each-any) . any)))) q36b6@t))) (q2efa@syntax-dispatch q36b6@t '(#(scheme-id unquote) any)))) q36b2@p))) (lambda (q36aa@x) ((lambda (q36ac@t) ((lambda (q36ae@ls/false) (if q36ae@ls/false (apply (lambda (q36b0@e) (q36a9@quasi q36b0@e '0)) q36ae@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q36ac@t))) (q2efa@syntax-dispatch q36ac@t '(_ any)))) q36aa@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! q2eea@quasisyntax-macro ((lambda () ((lambda (q3787@quasi) (begin (set! q3787@quasi (lambda (q37a2@p q37a3@lev) ((lambda (q37a6@t) ((lambda (q37a8@ls/false) (if q37a8@ls/false (apply (lambda (q37aa@p) (if (= q37a3@lev '0) ((lambda (q37ac@g) (values (list q37ac@g) (list q37aa@p) q37ac@g)) (gensym)) (call-with-values (lambda () (q3787@quasi q37aa@p (- q37a3@lev '1))) (lambda (q37b4@q37af q37b5@q37b1 q37b6@q37b3) ((lambda (q37ba@p q37bb@rhs* q37bc@lhs*) (values q37bc@lhs* q37bb@rhs* (list 'unsyntax q37ba@p))) q37b6@q37b3 q37b5@q37b1 q37b4@q37af))))) q37a8@ls/false) ((lambda (q37c0@t) ((lambda (q37c2@ls/false) (if (and q37c2@ls/false (apply (lambda () (= q37a3@lev '0)) q37c2@ls/false)) (apply (lambda () (q2fe3@syntax-violation '#f '"incorrect use of unsyntax" q37a2@p)) q37c2@ls/false) ((lambda (q37c4@t) ((lambda (q37c6@ls/false) (if q37c6@ls/false (apply (lambda (q37c8@p* q37c9@q) (call-with-values (lambda () (q3787@quasi q37c9@q q37a3@lev)) (lambda (q37d2@q37cd q37d3@q37cf q37d4@q37d1) ((lambda (q37d8@q q37d9@rhs* q37da@lhs*) (if (= q37a3@lev '0) ((lambda (q37de@g*) (values (append q37de@g* q37da@lhs*) (append q37c8@p* q37d9@rhs*) (append q37de@g* q37d8@q))) (map (lambda (q37e0@x) (gensym)) q37c8@p*)) (call-with-values (lambda () (q3787@quasi q37c8@p* (- q37a3@lev '1))) (lambda (q37e8@q37e3 q37e9@q37e5 q37ea@q37e7) ((lambda (q37ee@p* q37ef@rhs2* q37f0@lhs2*) (values (append q37f0@lhs2* q37da@lhs*) (append q37ef@rhs2* q37d9@rhs*) (cons (cons 'unsyntax q37ee@p*) q37d8@q))) q37ea@q37e7 q37e9@q37e5 q37e8@q37e3))))) q37d4@q37d1 q37d3@q37cf q37d2@q37cd)))) q37c6@ls/false) ((lambda (q37f4@t) ((lambda (q37f6@ls/false) (if q37f6@ls/false (apply (lambda (q37f8@p* q37f9@q) (call-with-values (lambda () (q3787@quasi q37f9@q q37a3@lev)) (lambda (q3802@q37fd q3803@q37ff q3804@q3801) ((lambda (q3808@q q3809@rhs* q380a@lhs*) (if (= q37a3@lev '0) ((lambda (q380e@g*) (values (append (map (lambda (q3810@g) (cons q3810@g '(...))) q380e@g*) q380a@lhs*) (append q37f8@p* q3809@rhs*) (append (apply append (map (lambda (q3812@g) (cons q3812@g '(...))) q380e@g*)) q3808@q))) (map (lambda (q3814@x) (gensym)) q37f8@p*)) (call-with-values (lambda () (q3787@quasi q37f8@p* (- q37a3@lev '1))) (lambda (q381c@q3817 q381d@q3819 q381e@q381b) ((lambda (q3822@p* q3823@rhs2* q3824@lhs2*) (values (append q3824@lhs2* q380a@lhs*) (append q3823@rhs2* q3809@rhs*) (cons (cons 'unsyntax-splicing q3822@p*) q3808@q))) q381e@q381b q381d@q3819 q381c@q3817))))) q3804@q3801 q3803@q37ff q3802@q37fd)))) q37f6@ls/false) ((lambda (q3828@t) ((lambda (q382a@ls/false) (if (and q382a@ls/false (apply (lambda () (= q37a3@lev '0)) q382a@ls/false)) (apply (lambda () (q2fe3@syntax-violation '#f '"incorrect use of unsyntax-splicing" q37a2@p)) q382a@ls/false) ((lambda (q382c@t) ((lambda (q382e@ls/false) (if q382e@ls/false (apply (lambda (q3830@p) (call-with-values (lambda () (q3787@quasi q3830@p (+ q37a3@lev '1))) (lambda (q3838@q3833 q3839@q3835 q383a@q3837) ((lambda (q383e@p q383f@rhs* q3840@lhs*) (values q3840@lhs* q383f@rhs* (list 'quasisyntax q383e@p))) q383a@q3837 q3839@q3835 q3838@q3833)))) q382e@ls/false) ((lambda (q3844@t) ((lambda (q3846@ls/false) (if q3846@ls/false (apply (lambda (q3848@p q3849@q) (call-with-values (lambda () (q3787@quasi q3848@p q37a3@lev)) (lambda (q3858@q384d q3859@q384f q385a@q3851) (call-with-values (lambda () (q3787@quasi q3849@q q37a3@lev)) (lambda (q385e@q3853 q385f@q3855 q3860@q3857) ((lambda (q3864@q q3865@rhs2* q3866@lhs2* q3867@p q3868@rhs* q3869@lhs*) (values (append q3866@lhs2* q3869@lhs*) (append q3865@rhs2* q3868@rhs*) (cons q3867@p q3864@q))) q3860@q3857 q385f@q3855 q385e@q3853 q385a@q3851 q3859@q384f q3858@q384d)))))) q3846@ls/false) ((lambda (q3870@t) ((lambda (q3872@ls/false) (if q3872@ls/false (apply (lambda (q3874@x*) (call-with-values (lambda () (q3787@quasi q3874@x* q37a3@lev)) (lambda (q387c@q3877 q387d@q3879 q387e@q387b) ((lambda (q3882@x* q3883@rhs* q3884@lhs*) (values q3884@lhs* q3883@rhs* (list->vector q3882@x*))) q387e@q387b q387d@q3879 q387c@q3877)))) q3872@ls/false) ((lambda (q3888@t) ((lambda (q388a@ls/false) (if q388a@ls/false (apply (lambda () (values '() '() q37a2@p)) q388a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3888@t))) (q2efa@syntax-dispatch q3888@t '_))) q3870@t))) (q2efa@syntax-dispatch q3870@t '#(vector each-any)))) q3844@t))) (q2efa@syntax-dispatch q3844@t '(any . any)))) q382c@t))) (q2efa@syntax-dispatch q382c@t '(#(scheme-id quasisyntax) any)))) q3828@t))) (q2efa@syntax-dispatch q3828@t '#(scheme-id unsyntax-splicing)))) q37f4@t))) (q2efa@syntax-dispatch q37f4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) q37c4@t))) (q2efa@syntax-dispatch q37c4@t '((#(scheme-id unsyntax) . each-any) . any)))) q37c0@t))) (q2efa@syntax-dispatch q37c0@t '#(scheme-id unsyntax)))) q37a6@t))) (q2efa@syntax-dispatch q37a6@t '(#(scheme-id unsyntax) any)))) q37a2@p))) (lambda (q3788@x) ((lambda (q378a@t) ((lambda (q378c@ls/false) (if q378c@ls/false (apply (lambda (q378e@e) (call-with-values (lambda () (q3787@quasi q378e@e '0)) (lambda (q3796@q3791 q3797@q3793 q3798@q3795) ((lambda (q379c@v q379d@rhs* q379e@lhs*) (q2eb0@bless (list 'syntax-case (cons 'list q379d@rhs*) '() (list q379e@lhs* (list 'syntax q379c@v))))) q3798@q3795 q3797@q3793 q3796@q3791)))) q378c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q378a@t))) (q2efa@syntax-dispatch q378a@t '(_ any)))) q3788@x)))) '#f)))) (set! q2eec@define-struct-macro (lambda (q388c@stx) (q2fe3@syntax-violation '#f '"define-struct not supported" q388c@stx))) (set! q2eee@define-record-type-macro (lambda (q388e@x) ((lambda (q3891@id q3893@get-record-name q3895@get-record-constructor-name q3897@get-record-predicate-name q3899@get-clause q389b@foo-rtd-code q389d@parent-rtd-code q389f@parent-rcd-code q38a1@foo-rcd-code q38a3@get-protocol-code q38a5@get-fields q38a7@get-mutator-indices q38a9@get-mutators q38ab@get-accessors q38ad@enumerate q38af@do-define-record q38b1@verify-clauses) (begin (set! q3891@id (lambda (q3a84@ctxt . q3a86@str*) (q2fe7@datum->syntax q3a84@ctxt (string->symbol (apply string-append (map (lambda (q3a88@x) (if (symbol? q3a88@x) (symbol->string q3a88@x) (if (string? q3a88@x) q3a88@x (assertion-violation 'define-record-type '"BUG")))) q3a86@str*)))))) (set! q3893@get-record-name (lambda (q3a72@spec) ((lambda (q3a74@t) ((lambda (q3a76@ls/false) (if q3a76@ls/false (apply (lambda (q3a78@foo q3a79@make-foo q3a7a@foo?) q3a78@foo) q3a76@ls/false) ((lambda (q3a7e@t) ((lambda (q3a80@ls/false) (if q3a80@ls/false (apply (lambda (q3a82@foo) q3a82@foo) q3a80@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a7e@t))) (q2efa@syntax-dispatch q3a7e@t 'any))) q3a74@t))) (q2efa@syntax-dispatch q3a74@t '(any any any)))) q3a72@spec))) (set! q3895@get-record-constructor-name (lambda (q3a5e@spec) ((lambda (q3a60@t) ((lambda (q3a62@ls/false) (if q3a62@ls/false (apply (lambda (q3a64@foo q3a65@make-foo q3a66@foo?) q3a65@make-foo) q3a62@ls/false) ((lambda (q3a6a@t) ((lambda (q3a6c@ls/false) (if (and q3a6c@ls/false (apply (lambda (q3a6e@foo) (q2cef@id? q3a6e@foo)) q3a6c@ls/false)) (apply (lambda (q3a70@foo) (q3891@id q3a70@foo '"make-" (q2d05@stx->datum q3a70@foo))) q3a6c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a6a@t))) (q2efa@syntax-dispatch q3a6a@t 'any))) q3a60@t))) (q2efa@syntax-dispatch q3a60@t '(any any any)))) q3a5e@spec))) (set! q3897@get-record-predicate-name (lambda (q3a4a@spec) ((lambda (q3a4c@t) ((lambda (q3a4e@ls/false) (if q3a4e@ls/false (apply (lambda (q3a50@foo q3a51@make-foo q3a52@foo?) q3a52@foo?) q3a4e@ls/false) ((lambda (q3a56@t) ((lambda (q3a58@ls/false) (if (and q3a58@ls/false (apply (lambda (q3a5a@foo) (q2cef@id? q3a5a@foo)) q3a58@ls/false)) (apply (lambda (q3a5c@foo) (q3891@id q3a5c@foo (q2d05@stx->datum q3a5c@foo) '"?")) q3a58@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a56@t))) (q2efa@syntax-dispatch q3a56@t 'any))) q3a4c@t))) (q2efa@syntax-dispatch q3a4c@t '(any any any)))) q3a4a@spec))) (set! q3899@get-clause (lambda (q3a38@id q3a39@ls) ((lambda (q3a3c@t) ((lambda (q3a3e@ls/false) (if q3a3e@ls/false (apply (lambda () '#f) q3a3e@ls/false) ((lambda (q3a40@t) ((lambda (q3a42@ls/false) (if q3a42@ls/false (apply (lambda (q3a44@x q3a45@rest q3a46@ls) (if (q2cf7@free-id=? (q2eb0@bless q3a38@id) q3a44@x) (cons q3a44@x q3a45@rest) (q3899@get-clause q3a38@id q3a46@ls))) q3a42@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a40@t))) (q2efa@syntax-dispatch q3a40@t '((any . any) . any)))) q3a3c@t))) (q2efa@syntax-dispatch q3a3c@t '()))) q3a39@ls))) (set! q389b@foo-rtd-code (lambda (q39e6@name q39e7@clause* q39e8@parent-rtd-code) ((lambda (q39ed@convert-field-spec*) (begin (set! q39ed@convert-field-spec* (lambda (q3a1e@ls) (list->vector (map (lambda (q3a20@x) ((lambda (q3a22@t) ((lambda (q3a24@ls/false) (if q3a24@ls/false (apply (lambda (q3a26@name q3a27@rest) (list 'mutable q3a26@name)) q3a24@ls/false) ((lambda (q3a2a@t) ((lambda (q3a2c@ls/false) (if q3a2c@ls/false (apply (lambda (q3a2e@name q3a2f@rest) (list 'immutable q3a2e@name)) q3a2c@ls/false) ((lambda (q3a32@t) ((lambda (q3a34@ls/false) (if q3a34@ls/false (apply (lambda (q3a36@name) (list 'immutable q3a36@name)) q3a34@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a32@t))) (q2efa@syntax-dispatch q3a32@t 'any))) q3a2a@t))) (q2efa@syntax-dispatch q3a2a@t '(#(scheme-id immutable) any . any)))) q3a22@t))) (q2efa@syntax-dispatch q3a22@t '(#(scheme-id mutable) any . any)))) q3a20@x)) q3a1e@ls)))) ((lambda (q39ee@uid-code q39ef@sealed? q39f0@opaque? q39f1@fields) (q2eb0@bless (list 'make-record-type-descriptor (list 'quote q39e6@name) q39e8@parent-rtd-code q39ee@uid-code q39ef@sealed? q39f0@opaque? q39f1@fields))) ((lambda (q39f6@t) ((lambda (q39f8@ls/false) (if q39f8@ls/false (apply (lambda () (list 'quote (gensym))) q39f8@ls/false) ((lambda (q39fa@t) ((lambda (q39fc@ls/false) (if q39fc@ls/false (apply (lambda (q39fe@uid) (list 'quote q39fe@uid)) q39fc@ls/false) ((lambda (q3a00@t) ((lambda (q3a02@ls/false) (if q3a02@ls/false (apply (lambda () '#f) q3a02@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a00@t))) (q2efa@syntax-dispatch q3a00@t '_))) q39fa@t))) (q2efa@syntax-dispatch q39fa@t '(_ any)))) q39f6@t))) (q2efa@syntax-dispatch q39f6@t '(_)))) (q3899@get-clause 'nongenerative q39e7@clause*)) ((lambda (q3a04@t) ((lambda (q3a06@ls/false) (if q3a06@ls/false (apply (lambda () '#t) q3a06@ls/false) ((lambda (q3a08@t) ((lambda (q3a0a@ls/false) (if q3a0a@ls/false (apply (lambda () '#f) q3a0a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a08@t))) (q2efa@syntax-dispatch q3a08@t '_))) q3a04@t))) (q2efa@syntax-dispatch q3a04@t '(_ #(atom #t))))) (q3899@get-clause 'sealed q39e7@clause*)) ((lambda (q3a0c@t) ((lambda (q3a0e@ls/false) (if q3a0e@ls/false (apply (lambda () '#t) q3a0e@ls/false) ((lambda (q3a10@t) ((lambda (q3a12@ls/false) (if q3a12@ls/false (apply (lambda () '#f) q3a12@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a10@t))) (q2efa@syntax-dispatch q3a10@t '_))) q3a0c@t))) (q2efa@syntax-dispatch q3a0c@t '(_ #(atom #t))))) (q3899@get-clause 'opaque q39e7@clause*)) ((lambda (q3a14@t) ((lambda (q3a16@ls/false) (if q3a16@ls/false (apply (lambda (q3a18@field-spec*) (list 'quote (q39ed@convert-field-spec* q3a18@field-spec*))) q3a16@ls/false) ((lambda (q3a1a@t) ((lambda (q3a1c@ls/false) (if q3a1c@ls/false (apply (lambda () ''#()) q3a1c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a1a@t))) (q2efa@syntax-dispatch q3a1a@t '_))) q3a14@t))) (q2efa@syntax-dispatch q3a14@t '(_ . each-any)))) (q3899@get-clause 'fields q39e7@clause*))))) '#f))) (set! q389d@parent-rtd-code (lambda (q39ce@clause*) ((lambda (q39d0@t) ((lambda (q39d2@ls/false) (if q39d2@ls/false (apply (lambda (q39d4@name) (list 'record-type-descriptor q39d4@name)) q39d2@ls/false) ((lambda (q39d6@t) ((lambda (q39d8@ls/false) (if q39d8@ls/false (apply (lambda () ((lambda (q39da@t) ((lambda (q39dc@ls/false) (if q39dc@ls/false (apply (lambda (q39de@rtd q39df@rcd) q39de@rtd) q39dc@ls/false) ((lambda (q39e2@t) ((lambda (q39e4@ls/false) (if q39e4@ls/false (apply (lambda () '#f) q39e4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q39e2@t))) (q2efa@syntax-dispatch q39e2@t '#(atom #f)))) q39da@t))) (q2efa@syntax-dispatch q39da@t '(_ any any)))) (q3899@get-clause 'parent-rtd q39ce@clause*))) q39d8@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q39d6@t))) (q2efa@syntax-dispatch q39d6@t '#(atom #f)))) q39d0@t))) (q2efa@syntax-dispatch q39d0@t '(_ any)))) (q3899@get-clause 'parent q39ce@clause*)))) (set! q389f@parent-rcd-code (lambda (q39b6@clause*) ((lambda (q39b8@t) ((lambda (q39ba@ls/false) (if q39ba@ls/false (apply (lambda (q39bc@name) (list 'record-constructor-descriptor q39bc@name)) q39ba@ls/false) ((lambda (q39be@t) ((lambda (q39c0@ls/false) (if q39c0@ls/false (apply (lambda () ((lambda (q39c2@t) ((lambda (q39c4@ls/false) (if q39c4@ls/false (apply (lambda (q39c6@rtd q39c7@rcd) q39c7@rcd) q39c4@ls/false) ((lambda (q39ca@t) ((lambda (q39cc@ls/false) (if q39cc@ls/false (apply (lambda () '#f) q39cc@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q39ca@t))) (q2efa@syntax-dispatch q39ca@t '#(atom #f)))) q39c2@t))) (q2efa@syntax-dispatch q39c2@t '(_ any any)))) (q3899@get-clause 'parent-rtd q39b6@clause*))) q39c0@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q39be@t))) (q2efa@syntax-dispatch q39be@t '#(atom #f)))) q39b8@t))) (q2efa@syntax-dispatch q39b8@t '(_ any)))) (q3899@get-clause 'parent q39b6@clause*)))) (set! q38a1@foo-rcd-code (lambda (q39ae@clause* q39af@foo-rtd q39b0@protocol q39b1@parent-rcd-code) (list 'make-record-constructor-descriptor q39af@foo-rtd q39b1@parent-rcd-code q39b0@protocol))) (set! q38a3@get-protocol-code (lambda (q39a2@clause*) ((lambda (q39a4@t) ((lambda (q39a6@ls/false) (if q39a6@ls/false (apply (lambda (q39a8@expr) q39a8@expr) q39a6@ls/false) ((lambda (q39aa@t) ((lambda (q39ac@ls/false) (if q39ac@ls/false (apply (lambda () '#f) q39ac@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q39aa@t))) (q2efa@syntax-dispatch q39aa@t '_))) q39a4@t))) (q2efa@syntax-dispatch q39a4@t '(_ any)))) (q3899@get-clause 'protocol q39a2@clause*)))) (set! q38a5@get-fields (lambda (q3990@clause*) ((lambda (q3992@t) ((lambda (q3994@ls/false) (if q3994@ls/false (apply (lambda () '()) q3994@ls/false) ((lambda (q3996@t) ((lambda (q3998@ls/false) (if q3998@ls/false (apply (lambda (q399a@f*) q399a@f*) q3998@ls/false) ((lambda (q399c@t) ((lambda (q399e@ls/false) (if q399e@ls/false (apply (lambda (q39a0@rest) (q38a5@get-fields q39a0@rest)) q399e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q399c@t))) (q2efa@syntax-dispatch q399c@t '(_ . any)))) q3996@t))) (q2efa@syntax-dispatch q3996@t '((#(scheme-id fields) . each-any) . _)))) q3992@t))) (q2efa@syntax-dispatch q3992@t '()))) q3990@clause*))) (set! q38a7@get-mutator-indices (lambda (q3978@fields) ((letrec ((q397a@f (lambda (q397c@fields q397d@i) ((lambda (q3980@t) ((lambda (q3982@ls/false) (if q3982@ls/false (apply (lambda () '()) q3982@ls/false) ((lambda (q3984@t) ((lambda (q3986@ls/false) (if q3986@ls/false (apply (lambda (q3988@rest) (cons q397d@i (q397a@f q3988@rest (+ q397d@i '1)))) q3986@ls/false) ((lambda (q398a@t) ((lambda (q398c@ls/false) (if q398c@ls/false (apply (lambda (q398e@rest) (q397a@f q398e@rest (+ q397d@i '1))) q398c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q398a@t))) (q2efa@syntax-dispatch q398a@t '(_ . any)))) q3984@t))) (q2efa@syntax-dispatch q3984@t '((#(scheme-id mutable) . _) . any)))) q3980@t))) (q2efa@syntax-dispatch q3980@t '()))) q397c@fields)))) q397a@f) q3978@fields '0))) (set! q38a9@get-mutators (lambda (q394e@foo q394f@fields) ((lambda (q3953@gen-name) (begin (set! q3953@gen-name (lambda (q3976@x) (q2fe7@datum->syntax q394e@foo (string->symbol (string-append (symbol->string (q2fe9@syntax->datum q394e@foo)) '"-" (symbol->string (q2fe9@syntax->datum q3976@x)) '"-set!"))))) ((letrec ((q3954@f (lambda (q3956@fields) ((lambda (q3958@t) ((lambda (q395a@ls/false) (if q395a@ls/false (apply (lambda () '()) q395a@ls/false) ((lambda (q395c@t) ((lambda (q395e@ls/false) (if q395e@ls/false (apply (lambda (q3960@name q3961@accessor q3962@mutator q3963@rest) (cons q3962@mutator (q3954@f q3963@rest))) q395e@ls/false) ((lambda (q3968@t) ((lambda (q396a@ls/false) (if q396a@ls/false (apply (lambda (q396c@name q396d@rest) (cons (q3953@gen-name q396c@name) (q3954@f q396d@rest))) q396a@ls/false) ((lambda (q3970@t) ((lambda (q3972@ls/false) (if q3972@ls/false (apply (lambda (q3974@rest) (q3954@f q3974@rest)) q3972@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3970@t))) (q2efa@syntax-dispatch q3970@t '(_ . any)))) q3968@t))) (q2efa@syntax-dispatch q3968@t '((#(scheme-id mutable) any) . any)))) q395c@t))) (q2efa@syntax-dispatch q395c@t '((#(scheme-id mutable) any any any) . any)))) q3958@t))) (q2efa@syntax-dispatch q3958@t '()))) q3956@fields)))) q3954@f) q394f@fields))) '#f))) (set! q38ab@get-accessors (lambda (q390a@foo q390b@fields) ((lambda (q390f@gen-name) (begin (set! q390f@gen-name (lambda (q394c@x) (q2fe7@datum->syntax q390a@foo (string->symbol (string-append (symbol->string (q2fe9@syntax->datum q390a@foo)) '"-" (symbol->string (q2fe9@syntax->datum q394c@x))))))) (map (lambda (q3910@field) ((lambda (q3912@t) ((lambda (q3914@ls/false) (if (and q3914@ls/false (apply (lambda (q3916@name q3917@accessor q3918@mutator) (q2cef@id? q3917@accessor)) q3914@ls/false)) (apply (lambda (q391c@name q391d@accessor q391e@mutator) q391d@accessor) q3914@ls/false) ((lambda (q3922@t) ((lambda (q3924@ls/false) (if (and q3924@ls/false (apply (lambda (q3926@name q3927@accessor) (q2cef@id? q3927@accessor)) q3924@ls/false)) (apply (lambda (q392a@name q392b@accessor) q392b@accessor) q3924@ls/false) ((lambda (q392e@t) ((lambda (q3930@ls/false) (if (and q3930@ls/false (apply (lambda (q3932@name) (q2cef@id? q3932@name)) q3930@ls/false)) (apply (lambda (q3934@name) (q390f@gen-name q3934@name)) q3930@ls/false) ((lambda (q3936@t) ((lambda (q3938@ls/false) (if (and q3938@ls/false (apply (lambda (q393a@name) (q2cef@id? q393a@name)) q3938@ls/false)) (apply (lambda (q393c@name) (q390f@gen-name q393c@name)) q3938@ls/false) ((lambda (q393e@t) ((lambda (q3940@ls/false) (if (and q3940@ls/false (apply (lambda (q3942@name) (q2cef@id? q3942@name)) q3940@ls/false)) (apply (lambda (q3944@name) (q390f@gen-name q3944@name)) q3940@ls/false) ((lambda (q3946@t) ((lambda (q3948@ls/false) (if q3948@ls/false (apply (lambda (q394a@others) (q2fe3@syntax-violation '#f '"invalid field spec" q3910@field)) q3948@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3946@t))) (q2efa@syntax-dispatch q3946@t 'any))) q393e@t))) (q2efa@syntax-dispatch q393e@t 'any))) q3936@t))) (q2efa@syntax-dispatch q3936@t '(#(scheme-id immutable) any)))) q392e@t))) (q2efa@syntax-dispatch q392e@t '(#(scheme-id mutable) any)))) q3922@t))) (q2efa@syntax-dispatch q3922@t '(#(scheme-id immutable) any any)))) q3912@t))) (q2efa@syntax-dispatch q3912@t '(#(scheme-id mutable) any any any)))) q3910@field)) q390b@fields))) '#f))) (set! q38ad@enumerate (lambda (q3902@ls) ((letrec ((q3904@f (lambda (q3906@ls q3907@i) (if (null? q3906@ls) '() (cons q3907@i (q3904@f (cdr q3906@ls) (+ q3907@i '1))))))) q3904@f) q3902@ls '0))) (set! q38af@do-define-record (lambda (q38da@namespec q38db@clause*) ((lambda (q38de@foo) ((lambda (q38e0@foo-rtd) ((lambda (q38e2@foo-rcd) ((lambda (q38e4@protocol) ((lambda (q38e6@make-foo) ((lambda (q38e8@fields) ((lambda (q38ea@idx*) ((lambda (q38ec@foo-x*) ((lambda (q38ee@set-foo-x!*) ((lambda (q38f0@set-foo-idx*) ((lambda (q38f2@foo?) ((lambda (q38f4@foo-rtd-code) ((lambda (q38f6@foo-rcd-code) ((lambda (q38f8@protocol-code) ((lambda () (q2eb0@bless (cons 'begin (cons (list 'define q38e0@foo-rtd q38f4@foo-rtd-code) (cons (list 'define q38e4@protocol q38f8@protocol-code) (cons (list 'define q38e2@foo-rcd q38f6@foo-rcd-code) (cons (list 'define-syntax q38de@foo (list 'list ''$rtd (list 'syntax q38e0@foo-rtd) (list 'syntax q38e2@foo-rcd))) (cons (list 'define q38f2@foo? (list 'record-predicate q38e0@foo-rtd)) (cons (list 'define q38e6@make-foo (list 'record-constructor q38e2@foo-rcd)) (append (map (lambda (q38fa@foo-x q38fb@idx) (list 'define q38fa@foo-x (list 'record-accessor q38e0@foo-rtd q38fb@idx))) q38ec@foo-x* q38ea@idx*) (map (lambda (q38fe@set-foo-x! q38ff@idx) (list 'define q38fe@set-foo-x! (list 'record-mutator q38e0@foo-rtd q38ff@idx))) q38ee@set-foo-x!* q38f0@set-foo-idx*))))))))))))) (q38a3@get-protocol-code q38db@clause*))) (q38a1@foo-rcd-code q38db@clause* q38e0@foo-rtd q38e4@protocol (q389f@parent-rcd-code q38db@clause*)))) (q389b@foo-rtd-code q38de@foo q38db@clause* (q389d@parent-rtd-code q38db@clause*)))) (q3897@get-record-predicate-name q38da@namespec))) (q38a7@get-mutator-indices q38e8@fields))) (q38a9@get-mutators q38de@foo q38e8@fields))) (q38ab@get-accessors q38de@foo q38e8@fields))) (q38ad@enumerate q38e8@fields))) (q38a5@get-fields q38db@clause*))) (q3895@get-record-constructor-name q38da@namespec))) (gensym))) (gensym))) (gensym))) (q3893@get-record-name q38da@namespec)))) (set! q38b1@verify-clauses (lambda (q38ba@x q38bb@cls*) ((lambda (q38bf@valid-kwds q38c1@free-id-member?) (begin (set! q38bf@valid-kwds (map q2eb0@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! q38c1@free-id-member? (lambda (q38d6@x q38d7@ls) (and (pair? q38d7@ls) (or (q2cf7@free-id=? q38d6@x (car q38d7@ls)) (q38c1@free-id-member? q38d6@x (cdr q38d7@ls)))))) ((letrec ((q38c2@f (lambda (q38c4@cls* q38c5@seen*) (if (not (null? q38c4@cls*)) ((lambda (q38c8@t) ((lambda (q38ca@ls/false) (if q38ca@ls/false (apply (lambda (q38cc@kwd q38cd@rest) (if (or (not (q2cef@id? q38cc@kwd)) (not (q38c1@free-id-member? q38cc@kwd q38bf@valid-kwds))) (q2fe3@syntax-violation '#f '"not a valid define-record-type keyword" q38cc@kwd) (if (q2cfd@bound-id-member? q38cc@kwd q38c5@seen*) (q2fe3@syntax-violation '#f '"duplicate use of keyword " q38ba@x q38cc@kwd) (q38c2@f (cdr q38c4@cls*) (cons q38cc@kwd q38c5@seen*))))) q38ca@ls/false) ((lambda (q38d0@t) ((lambda (q38d2@ls/false) (if q38d2@ls/false (apply (lambda (q38d4@cls) (q2fe3@syntax-violation '#f '"malformed define-record-type clause" q38d4@cls)) q38d2@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q38d0@t))) (q2efa@syntax-dispatch q38d0@t 'any))) q38c8@t))) (q2efa@syntax-dispatch q38c8@t '(any . any)))) (car q38c4@cls*)) (void))))) q38c2@f) q38bb@cls* '()))) '#f '#f))) ((lambda (q38b2@t) ((lambda (q38b4@ls/false) (if q38b4@ls/false (apply (lambda (q38b6@namespec q38b7@clause*) (begin (q38b1@verify-clauses q388e@x q38b7@clause*) (q38af@do-define-record q38b6@namespec q38b7@clause*))) q38b4@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q38b2@t))) (q2efa@syntax-dispatch q38b2@t '(_ any . each-any)))) q388e@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2ef0@define-condition-type-macro (lambda (q3a8a@x) ((lambda (q3a8d@mkname) (begin (set! q3a8d@mkname (lambda (q3aba@name q3abb@suffix) (q2fe7@datum->syntax q3aba@name (string->symbol (string-append (symbol->string (q2fe9@syntax->datum q3aba@name)) q3abb@suffix))))) ((lambda (q3a8e@t) ((lambda (q3a90@ls/false) (if (and q3a90@ls/false (apply (lambda (q3a92@ctxt q3a93@name q3a94@super q3a95@constructor q3a96@predicate q3a97@field* q3a98@accessor*) (and (q2cef@id? q3a93@name) (q2cef@id? q3a94@super) (q2cef@id? q3a95@constructor) (q2cef@id? q3a96@predicate) (for-all q2cef@id? q3a97@field*) (for-all q2cef@id? q3a98@accessor*))) q3a90@ls/false)) (apply (lambda (q3aa0@ctxt q3aa1@name q3aa2@super q3aa3@constructor q3aa4@predicate q3aa5@field* q3aa6@accessor*) ((lambda (q3aae@aux-accessor*) (q2eb0@bless (cons 'begin (cons (cons 'define-record-type (cons (list q3aa1@name q3aa3@constructor (gensym)) (cons (list 'parent q3aa2@super) (cons (cons 'fields (map (lambda (q3ab0@field q3ab1@aux) (list 'immutable q3ab0@field q3ab1@aux)) q3aa5@field* q3aae@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define q3aa4@predicate (list 'condition-predicate (list 'record-type-descriptor q3aa1@name))) (map (lambda (q3ab4@accessor q3ab5@aux) (list 'define q3ab4@accessor (list 'condition-accessor (list 'record-type-descriptor q3aa1@name) q3ab5@aux))) q3aa6@accessor* q3aae@aux-accessor*)))))) (map (lambda (q3ab8@x) (gensym)) q3aa6@accessor*))) q3a90@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3a8e@t))) (q2efa@syntax-dispatch q3a8e@t '(any any any any any . #(each (any any)))))) q3a8a@x))) '#f))) (set! q2ef2@incorrect-usage-macro (lambda (q3abe@e) (q2fe3@syntax-violation '#f '"incorrect usage of auxiliary keyword" q3abe@e))) (set! q2ef4@parameterize-macro (lambda (q3ac0@e) ((lambda (q3ac2@t) ((lambda (q3ac4@ls/false) (if q3ac4@ls/false (apply (lambda (q3ac6@b q3ac7@b*) (q2eb0@bless (cons 'let (cons '() (cons q3ac6@b q3ac7@b*))))) q3ac4@ls/false) ((lambda (q3aca@t) ((lambda (q3acc@ls/false) (if q3acc@ls/false (apply (lambda (q3ace@olhs* q3acf@orhs* q3ad0@b q3ad1@b*) ((lambda (q3ad6@lhs* q3ad7@rhs*) (q2eb0@bless (cons (list 'lambda (append q3ad6@lhs* q3ad7@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (q3ada@lhs q3adb@rhs) (list 'let (list (list 't (list q3ada@lhs))) (list q3ada@lhs q3adb@rhs) (cons 'set! (cons q3adb@rhs '(t))))) q3ad6@lhs* q3ad7@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons q3ad0@b q3ad1@b*))) '(swap)))))) (append q3ace@olhs* q3acf@orhs*)))) (q2fd1@generate-temporaries q3ace@olhs*) (q2fd1@generate-temporaries q3acf@orhs*))) q3acc@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3aca@t))) (q2efa@syntax-dispatch q3aca@t '(_ #(each (any any)) any . each-any)))) q3ac2@t))) (q2efa@syntax-dispatch q3ac2@t '(_ () any . each-any)))) q3ac0@e))) (set! q2ef6@foreign-call-transformer (lambda (q3ade@e q3adf@r q3ae0@mr) ((lambda (q3ae4@t) ((lambda (q3ae6@ls/false) (if q3ae6@ls/false (apply (lambda (q3ae8@name q3ae9@arg*) (cons 'foreign-call (cons (q2f1c@chi-expr q3ae8@name q3adf@r q3ae0@mr) (q2f18@chi-expr* q3ae9@arg* q3adf@r q3ae0@mr)))) q3ae6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3ae4@t))) (q2efa@syntax-dispatch q3ae4@t '(_ any . each-any)))) q3ade@e))) (set! q2ef8@convert-pattern (lambda (q3aec@pattern q3aed@keys) ((lambda (q3af1@cvt* q3af3@cvt) (begin (set! q3af1@cvt* (lambda (q3b90@p* q3b91@n q3b92@ids) (if (null? q3b90@p*) (values '() q3b92@ids) (call-with-values (lambda () (q3af1@cvt* (cdr q3b90@p*) q3b91@n q3b92@ids)) (lambda (q3b9a@q3b97 q3b9b@q3b99) ((lambda (q3b9e@ids q3b9f@y) (call-with-values (lambda () (q3af3@cvt (car q3b90@p*) q3b91@n q3b9e@ids)) (lambda (q3ba6@q3ba3 q3ba7@q3ba5) ((lambda (q3baa@ids q3bab@x) (values (cons q3bab@x q3b9f@y) q3baa@ids)) q3ba7@q3ba5 q3ba6@q3ba3)))) q3b9b@q3b99 q3b9a@q3b97)))))) (set! q3af3@cvt (lambda (q3af4@p q3af5@n q3af6@ids) ((lambda (q3afa@t) ((lambda (q3afc@ls/false) (if (and q3afc@ls/false (apply (lambda (q3afe@id) (q2cef@id? q3afe@id)) q3afc@ls/false)) (apply (lambda (q3b00@id) (if (q2cfd@bound-id-member? q3af4@p q3aed@keys) (values (vector 'free-id q3af4@p) q3af6@ids) (if (q2cf7@free-id=? q3af4@p (q2e84@scheme-stx '_)) (values '_ q3af6@ids) (values 'any (cons (cons q3af4@p q3af5@n) q3af6@ids))))) q3afc@ls/false) ((lambda (q3b02@t) ((lambda (q3b04@ls/false) (if (and q3b04@ls/false (apply (lambda (q3b06@p q3b07@dots) (q2efc@ellipsis? q3b07@dots)) q3b04@ls/false)) (apply (lambda (q3b0a@p q3b0b@dots) (call-with-values (lambda () (q3af3@cvt q3b0a@p (+ q3af5@n '1) q3af6@ids)) (lambda (q3b12@q3b0f q3b13@q3b11) ((lambda (q3b16@ids q3b17@p) (values (if (eq? q3b17@p 'any) 'each-any (vector 'each q3b17@p)) q3b16@ids)) q3b13@q3b11 q3b12@q3b0f)))) q3b04@ls/false) ((lambda (q3b1a@t) ((lambda (q3b1c@ls/false) (if (and q3b1c@ls/false (apply (lambda (q3b1e@x q3b1f@dots q3b20@ys q3b21@z) (q2efc@ellipsis? q3b1f@dots)) q3b1c@ls/false)) (apply (lambda (q3b26@x q3b27@dots q3b28@ys q3b29@z) (call-with-values (lambda () (q3af3@cvt q3b29@z q3af5@n q3af6@ids)) (lambda (q3b32@q3b2f q3b33@q3b31) ((lambda (q3b36@ids q3b37@z) (call-with-values (lambda () (q3af1@cvt* q3b28@ys q3af5@n q3b36@ids)) (lambda (q3b3e@q3b3b q3b3f@q3b3d) ((lambda (q3b42@ids q3b43@ys) (call-with-values (lambda () (q3af3@cvt q3b26@x (+ q3af5@n '1) q3b42@ids)) (lambda (q3b4a@q3b47 q3b4b@q3b49) ((lambda (q3b4e@ids q3b4f@x) (values (vector 'each+ q3b4f@x (reverse q3b43@ys) q3b37@z) q3b4e@ids)) q3b4b@q3b49 q3b4a@q3b47)))) q3b3f@q3b3d q3b3e@q3b3b)))) q3b33@q3b31 q3b32@q3b2f)))) q3b1c@ls/false) ((lambda (q3b52@t) ((lambda (q3b54@ls/false) (if q3b54@ls/false (apply (lambda (q3b56@x q3b57@y) (call-with-values (lambda () (q3af3@cvt q3b57@y q3af5@n q3af6@ids)) (lambda (q3b5e@q3b5b q3b5f@q3b5d) ((lambda (q3b62@ids q3b63@y) (call-with-values (lambda () (q3af3@cvt q3b56@x q3af5@n q3b62@ids)) (lambda (q3b6a@q3b67 q3b6b@q3b69) ((lambda (q3b6e@ids q3b6f@x) (values (cons q3b6f@x q3b63@y) q3b6e@ids)) q3b6b@q3b69 q3b6a@q3b67)))) q3b5f@q3b5d q3b5e@q3b5b)))) q3b54@ls/false) ((lambda (q3b72@t) ((lambda (q3b74@ls/false) (if q3b74@ls/false (apply (lambda () (values '() q3af6@ids)) q3b74@ls/false) ((lambda (q3b76@t) ((lambda (q3b78@ls/false) (if (and q3b78@ls/false (apply (lambda (q3b7a@p) (not (q2cb7@stx? q3b7a@p))) q3b78@ls/false)) (apply (lambda (q3b7c@p) (call-with-values (lambda () (q3af3@cvt q3b7c@p q3af5@n q3af6@ids)) (lambda (q3b82@q3b7f q3b83@q3b81) ((lambda (q3b86@ids q3b87@p) (values (vector 'vector q3b87@p) q3b86@ids)) q3b83@q3b81 q3b82@q3b7f)))) q3b78@ls/false) ((lambda (q3b8a@t) ((lambda (q3b8c@ls/false) (if q3b8c@ls/false (apply (lambda (q3b8e@datum) (values (vector 'atom (q2d05@stx->datum q3b8e@datum)) q3af6@ids)) q3b8c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3b8a@t))) (q2efa@syntax-dispatch q3b8a@t 'any))) q3b76@t))) (q2efa@syntax-dispatch q3b76@t '#(vector each-any)))) q3b72@t))) (q2efa@syntax-dispatch q3b72@t '()))) q3b52@t))) (q2efa@syntax-dispatch q3b52@t '(any . any)))) q3b1a@t))) (q2efa@syntax-dispatch q3b1a@t '(any any . #(each+ any () any))))) q3b02@t))) (q2efa@syntax-dispatch q3b02@t '(any any)))) q3afa@t))) (q2efa@syntax-dispatch q3afa@t 'any))) q3af4@p))) (q3af3@cvt q3aec@pattern '0 '()))) '#f '#f))) (set! q2efa@syntax-dispatch ((lambda () ((lambda (q3baf@stx^ q3bb1@match-each q3bb3@match-each+ q3bb5@match-each-any q3bb7@match-empty q3bb9@combine q3bbb@match* q3bbd@match) (begin (set! q3baf@stx^ (lambda (q3c8a@e q3c8b@m* q3c8c@s* q3c8d@ae*) (if (and (null? q3c8b@m*) (null? q3c8c@s*) (null? q3c8d@ae*)) q3c8a@e (q2cd7@mkstx q3c8a@e q3c8b@m* q3c8c@s* q3c8d@ae*)))) (set! q3bb1@match-each (lambda (q3c6a@e q3c6b@p q3c6c@m* q3c6d@s* q3c6e@ae*) (if (pair? q3c6a@e) ((lambda (q3c74@first) (and q3c74@first ((lambda (q3c76@rest) (and q3c76@rest (cons q3c74@first q3c76@rest))) (q3bb1@match-each (cdr q3c6a@e) q3c6b@p q3c6c@m* q3c6d@s* q3c6e@ae*)))) (q3bbd@match (car q3c6a@e) q3c6b@p q3c6c@m* q3c6d@s* q3c6e@ae* '())) (if (null? q3c6a@e) '() (if (q2cb7@stx? q3c6a@e) (and (not (q2c6d@top-marked? q3c6c@m*)) (call-with-values (lambda () (q2cd5@join-wraps q3c6c@m* q3c6d@s* q3c6e@ae* q3c6a@e)) (lambda (q3c7e@q3c79 q3c7f@q3c7b q3c80@q3c7d) ((lambda (q3c84@ae* q3c85@s* q3c86@m*) (q3bb1@match-each (q2cbb@stx-expr q3c6a@e) q3c6b@p q3c86@m* q3c85@s* q3c84@ae*)) q3c80@q3c7d q3c7f@q3c7b q3c7e@q3c79)))) (if (q288e@q27ad@annotation? q3c6a@e) (q3bb1@match-each (q2890@q27b1@annotation-expression q3c6a@e) q3c6b@p q3c6c@m* q3c6d@s* q3c6e@ae*) '#f)))))) (set! q3bb3@match-each+ (lambda (q3c2a@e q3c2b@x-pat q3c2c@y-pat q3c2d@z-pat q3c2e@m* q3c2f@s* q3c30@ae* q3c31@r) ((letrec ((q3c3a@f (lambda (q3c3c@e q3c3d@m* q3c3e@s* q3c3f@ae*) (if (pair? q3c3c@e) (call-with-values (lambda () (q3c3a@f (cdr q3c3c@e) q3c3d@m* q3c3e@s* q3c3f@ae*)) (lambda (q3c4a@q3c45 q3c4b@q3c47 q3c4c@q3c49) ((lambda (q3c50@r q3c51@y-pat q3c52@xr*) (if q3c50@r (if (null? q3c51@y-pat) ((lambda (q3c56@xr) (if q3c56@xr (values (cons q3c56@xr q3c52@xr*) q3c51@y-pat q3c50@r) (values '#f '#f '#f))) (q3bbd@match (car q3c3c@e) q3c2b@x-pat q3c3d@m* q3c3e@s* q3c3f@ae* '())) (values '() (cdr q3c51@y-pat) (q3bbd@match (car q3c3c@e) (car q3c51@y-pat) q3c3d@m* q3c3e@s* q3c3f@ae* q3c50@r))) (values '#f '#f '#f))) q3c4c@q3c49 q3c4b@q3c47 q3c4a@q3c45))) (if (q2cb7@stx? q3c3c@e) (if (q2c6d@top-marked? q3c3d@m*) (values '() q3c2c@y-pat (q3bbd@match q3c3c@e q3c2d@z-pat q3c3d@m* q3c3e@s* q3c3f@ae* q3c31@r)) (call-with-values (lambda () (q2cd5@join-wraps q3c3d@m* q3c3e@s* q3c3f@ae* q3c3c@e)) (lambda (q3c5e@q3c59 q3c5f@q3c5b q3c60@q3c5d) ((lambda (q3c64@ae* q3c65@s* q3c66@m*) (q3c3a@f (q2cbb@stx-expr q3c3c@e) q3c66@m* q3c65@s* q3c64@ae*)) q3c60@q3c5d q3c5f@q3c5b q3c5e@q3c59)))) (if (q288e@q27ad@annotation? q3c3c@e) (q3c3a@f (q2890@q27b1@annotation-expression q3c3c@e) q3c3d@m* q3c3e@s* q3c3f@ae*) (values '() q3c2c@y-pat (q3bbd@match q3c3c@e q3c2d@z-pat q3c3d@m* q3c3e@s* q3c3f@ae* q3c31@r)))))))) q3c3a@f) q3c2a@e q3c2e@m* q3c2f@s* q3c30@ae*))) (set! q3bb5@match-each-any (lambda (q3c0e@e q3c0f@m* q3c10@s* q3c11@ae*) (if (pair? q3c0e@e) ((lambda (q3c16@l) (and q3c16@l (cons (q3baf@stx^ (car q3c0e@e) q3c0f@m* q3c10@s* q3c11@ae*) q3c16@l))) (q3bb5@match-each-any (cdr q3c0e@e) q3c0f@m* q3c10@s* q3c11@ae*)) (if (null? q3c0e@e) '() (if (q2cb7@stx? q3c0e@e) (and (not (q2c6d@top-marked? q3c0f@m*)) (call-with-values (lambda () (q2cd5@join-wraps q3c0f@m* q3c10@s* q3c11@ae* q3c0e@e)) (lambda (q3c1e@q3c19 q3c1f@q3c1b q3c20@q3c1d) ((lambda (q3c24@ae* q3c25@s* q3c26@m*) (q3bb5@match-each-any (q2cbb@stx-expr q3c0e@e) q3c26@m* q3c25@s* q3c24@ae*)) q3c20@q3c1d q3c1f@q3c1b q3c1e@q3c19)))) (if (q288e@q27ad@annotation? q3c0e@e) (q3bb5@match-each-any (q2890@q27b1@annotation-expression q3c0e@e) q3c0f@m* q3c10@s* q3c11@ae*) '#f)))))) (set! q3bb7@match-empty (lambda (q3c08@p q3c09@r) (if (null? q3c08@p) q3c09@r (if (eq? q3c08@p '_) q3c09@r (if (eq? q3c08@p 'any) (cons '() q3c09@r) (if (pair? q3c08@p) (q3bb7@match-empty (car q3c08@p) (q3bb7@match-empty (cdr q3c08@p) q3c09@r)) (if (eq? q3c08@p 'each-any) (cons '() q3c09@r) ((lambda (q3c0c@t) (if (memv q3c0c@t '(each)) (q3bb7@match-empty (vector-ref q3c08@p '1) q3c09@r) (if (memv q3c0c@t '(each+)) (q3bb7@match-empty (vector-ref q3c08@p '1) (q3bb7@match-empty (reverse (vector-ref q3c08@p '2)) (q3bb7@match-empty (vector-ref q3c08@p '3) q3c09@r))) (if (memv q3c0c@t '(free-id atom)) q3c09@r (if (memv q3c0c@t '(scheme-id atom)) q3c09@r (if (memv q3c0c@t '(vector)) (q3bb7@match-empty (vector-ref q3c08@p '1) q3c09@r) (assertion-violation 'syntax-dispatch '"invalid pattern" q3c08@p))))))) (vector-ref q3c08@p '0))))))))) (set! q3bb9@combine (lambda (q3c04@r* q3c05@r) (if (null? (car q3c04@r*)) q3c05@r (cons (map car q3c04@r*) (q3bb9@combine (map cdr q3c04@r*) q3c05@r))))) (set! q3bbb@match* (lambda (q3be0@e q3be1@p q3be2@m* q3be3@s* q3be4@ae* q3be5@r) (if (null? q3be1@p) (and (null? q3be0@e) q3be5@r) (if (pair? q3be1@p) (and (pair? q3be0@e) (q3bbd@match (car q3be0@e) (car q3be1@p) q3be2@m* q3be3@s* q3be4@ae* (q3bbd@match (cdr q3be0@e) (cdr q3be1@p) q3be2@m* q3be3@s* q3be4@ae* q3be5@r))) (if (eq? q3be1@p 'each-any) ((lambda (q3bec@l) (and q3bec@l (cons q3bec@l q3be5@r))) (q3bb5@match-each-any q3be0@e q3be2@m* q3be3@s* q3be4@ae*)) ((lambda (q3bee@t) (if (memv q3bee@t '(each)) (if (null? q3be0@e) (q3bb7@match-empty (vector-ref q3be1@p '1) q3be5@r) ((lambda (q3bf0@r*) (and q3bf0@r* (q3bb9@combine q3bf0@r* q3be5@r))) (q3bb1@match-each q3be0@e (vector-ref q3be1@p '1) q3be2@m* q3be3@s* q3be4@ae*))) (if (memv q3bee@t '(free-id)) (and (symbol? q3be0@e) (q2c6d@top-marked? q3be2@m*) (q2cf7@free-id=? (q3baf@stx^ q3be0@e q3be2@m* q3be3@s* q3be4@ae*) (vector-ref q3be1@p '1)) q3be5@r) (if (memv q3bee@t '(scheme-id)) (and (symbol? q3be0@e) (q2c6d@top-marked? q3be2@m*) (q2cf7@free-id=? (q3baf@stx^ q3be0@e q3be2@m* q3be3@s* q3be4@ae*) (q2e84@scheme-stx (vector-ref q3be1@p '1))) q3be5@r) (if (memv q3bee@t '(each+)) (call-with-values (lambda () (q3bb3@match-each+ q3be0@e (vector-ref q3be1@p '1) (vector-ref q3be1@p '2) (vector-ref q3be1@p '3) q3be2@m* q3be3@s* q3be4@ae* q3be5@r)) (lambda (q3bf8@q3bf3 q3bf9@q3bf5 q3bfa@q3bf7) ((lambda (q3bfe@r q3bff@y-pat q3c00@xr*) (and q3bfe@r (null? q3bff@y-pat) (if (null? q3c00@xr*) (q3bb7@match-empty (vector-ref q3be1@p '1) q3bfe@r) (q3bb9@combine q3c00@xr* q3bfe@r)))) q3bfa@q3bf7 q3bf9@q3bf5 q3bf8@q3bf3))) (if (memv q3bee@t '(atom)) (and (fast-equal? (vector-ref q3be1@p '1) (q2d03@strip q3be0@e q3be2@m*)) q3be5@r) (if (memv q3bee@t '(vector)) (and (vector? q3be0@e) (q3bbd@match (vector->list q3be0@e) (vector-ref q3be1@p '1) q3be2@m* q3be3@s* q3be4@ae* q3be5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" q3be1@p)))))))) (vector-ref q3be1@p '0))))))) (set! q3bbd@match (lambda (q3bc2@e q3bc3@p q3bc4@m* q3bc5@s* q3bc6@ae* q3bc7@r) (if (not q3bc7@r) '#f (if (eq? q3bc3@p '_) q3bc7@r (if (eq? q3bc3@p 'any) (cons (q3baf@stx^ q3bc2@e q3bc4@m* q3bc5@s* q3bc6@ae*) q3bc7@r) (if (q2cb7@stx? q3bc2@e) (and (not (q2c6d@top-marked? q3bc4@m*)) (call-with-values (lambda () (q2cd5@join-wraps q3bc4@m* q3bc5@s* q3bc6@ae* q3bc2@e)) (lambda (q3bd4@q3bcf q3bd5@q3bd1 q3bd6@q3bd3) ((lambda (q3bda@ae* q3bdb@s* q3bdc@m*) (q3bbd@match (q2cbb@stx-expr q3bc2@e) q3bc3@p q3bdc@m* q3bdb@s* q3bda@ae* q3bc7@r)) q3bd6@q3bd3 q3bd5@q3bd1 q3bd4@q3bcf)))) (if (q288e@q27ad@annotation? q3bc2@e) (q3bbd@match (q2890@q27b1@annotation-expression q3bc2@e) q3bc3@p q3bc4@m* q3bc5@s* q3bc6@ae* q3bc7@r) (q3bbb@match* q3bc2@e q3bc3@p q3bc4@m* q3bc5@s* q3bc6@ae* q3bc7@r)))))))) (lambda (q3bbe@e q3bbf@p) (q3bbd@match q3bbe@e q3bbf@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2efc@ellipsis? (lambda (q3c92@x) (and (q2cef@id? q3c92@x) (q2cf7@free-id=? q3c92@x (q2e84@scheme-stx '...))))) (set! q2efe@underscore? (lambda (q3c94@x) (and (q2cef@id? q3c94@x) (q2cf7@free-id=? q3c94@x (q2e84@scheme-stx '_))))) (set! q2f00@verify-literals (lambda (q3c96@lits q3c97@expr) (for-each (lambda (q3c9a@x) (if (or (not (q2cef@id? q3c9a@x)) (q2efc@ellipsis? q3c9a@x) (q2efe@underscore? q3c9a@x)) (q2fe3@syntax-violation '#f '"invalid literal" q3c97@expr q3c9a@x) (void))) q3c96@lits))) (set! q2f02@syntax-case-transformer ((lambda () ((lambda (q3c9d@build-dispatch-call q3c9f@invalid-ids-error q3ca1@gen-clause q3ca3@gen-syntax-case) (begin (set! q3c9d@build-dispatch-call (lambda (q3d0e@pvars q3d0f@expr q3d10@y q3d11@r q3d12@mr) ((lambda (q3d18@ids q3d19@levels) ((lambda (q3d1c@labels q3d1d@new-vars) ((lambda (q3d20@body) (list '(primitive apply) (q2c4b@q2b8b@build-lambda '#f q3d1d@new-vars q3d20@body) q3d10@y)) (q2f1c@chi-expr (q2cdb@add-subst (q2caa@make-full-rib q3d18@ids q3d1c@labels) q3d0f@expr) (append (map (lambda (q3d22@label q3d23@var q3d24@level) (cons q3d22@label (q2d0f@make-binding 'syntax (cons q3d23@var q3d24@level)))) q3d1c@labels q3d1d@new-vars (map cdr q3d0e@pvars)) q3d11@r) q3d12@mr))) (map q2c73@gen-label q3d18@ids) (map q2c6f@gen-lexical q3d18@ids))) (map car q3d0e@pvars) (map cdr q3d0e@pvars)))) (set! q3c9f@invalid-ids-error (lambda (q3d02@id* q3d03@e q3d04@class) ((letrec ((q3d08@find (lambda (q3d0a@id* q3d0b@ok*) (if (null? q3d0a@id*) (q2fe3@syntax-violation '#f '"invalid syntax" q3d03@e) (if (q2cef@id? (car q3d0a@id*)) (if (q2cfd@bound-id-member? (car q3d0a@id*) q3d0b@ok*) (q2fdf@syntax-error (car q3d0a@id*) '"duplicate " q3d04@class) (q3d08@find (cdr q3d0a@id*) (cons (car q3d0a@id*) q3d0b@ok*))) (q2fdf@syntax-error (car q3d0a@id*) '"invalid " q3d04@class)))))) q3d08@find) q3d02@id* '()))) (set! q3ca1@gen-clause (lambda (q3cda@x q3cdb@keys q3cdc@clauses q3cdd@r q3cde@mr q3cdf@pat q3ce0@fender q3ce1@expr) (call-with-values (lambda () (q2ef8@convert-pattern q3cdf@pat q3cdb@keys)) (lambda (q3cee@q3ceb q3cef@q3ced) ((lambda (q3cf2@pvars q3cf3@p) (if (not (q2cfb@distinct-bound-ids? (map car q3cf2@pvars))) (q3c9f@invalid-ids-error (map car q3cf2@pvars) q3cdf@pat '"pattern variable") (if (not (for-all (lambda (q3cf6@x) (not (q2efc@ellipsis? (car q3cf6@x)))) q3cf2@pvars)) (q2fe3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" q3cdf@pat) ((lambda (q3cf8@y) ((lambda (q3cfa@test) ((lambda (q3cfc@conseq) ((lambda (q3cfe@altern) (list (q2c4b@q2b8b@build-lambda '#f (list q3cf8@y) (list 'if q3cfa@test q3cfc@conseq q3cfe@altern)) (list '(primitive syntax-dispatch) q3cda@x (list 'quote q3cf3@p)))) (q3ca3@gen-syntax-case q3cda@x q3cdb@keys q3cdc@clauses q3cdd@r q3cde@mr))) (q3c9d@build-dispatch-call q3cf2@pvars q3ce1@expr q3cf8@y q3cdd@r q3cde@mr))) (if (eq? q3ce0@fender '#t) q3cf8@y ((lambda (q3d00@call) (list 'if q3cf8@y q3d00@call (list 'quote '#f))) (q3c9d@build-dispatch-call q3cf2@pvars q3ce0@fender q3cf8@y q3cdd@r q3cde@mr))))) (q2c6f@gen-lexical 'tmp))))) q3cef@q3ced q3cee@q3ceb))))) (set! q3ca3@gen-syntax-case (lambda (q3cb8@x q3cb9@keys q3cba@clauses q3cbb@r q3cbc@mr) (if (null? q3cba@clauses) (list '(primitive syntax-error) q3cb8@x) ((lambda (q3cc2@t) ((lambda (q3cc4@ls/false) (if q3cc4@ls/false (apply (lambda (q3cc6@pat q3cc7@expr) (if (and (q2cef@id? q3cc6@pat) (not (q2cfd@bound-id-member? q3cc6@pat q3cb9@keys)) (not (q2efc@ellipsis? q3cc6@pat))) (if (q2cf7@free-id=? q3cc6@pat (q2e84@scheme-stx '_)) (q2f1c@chi-expr q3cc7@expr q3cbb@r q3cbc@mr) ((lambda (q3cca@lab q3ccb@lex) ((lambda (q3cce@body) (list (q2c4b@q2b8b@build-lambda '#f (list q3ccb@lex) q3cce@body) q3cb8@x)) (q2f1c@chi-expr (q2cdb@add-subst (q2caa@make-full-rib (list q3cc6@pat) (list q3cca@lab)) q3cc7@expr) (cons (cons q3cca@lab (q2d0f@make-binding 'syntax (cons q3ccb@lex '0))) q3cbb@r) q3cbc@mr))) (q2c73@gen-label q3cc6@pat) (q2c6f@gen-lexical q3cc6@pat))) (q3ca1@gen-clause q3cb8@x q3cb9@keys (cdr q3cba@clauses) q3cbb@r q3cbc@mr q3cc6@pat '#t q3cc7@expr))) q3cc4@ls/false) ((lambda (q3cd0@t) ((lambda (q3cd2@ls/false) (if q3cd2@ls/false (apply (lambda (q3cd4@pat q3cd5@fender q3cd6@expr) (q3ca1@gen-clause q3cb8@x q3cb9@keys (cdr q3cba@clauses) q3cbb@r q3cbc@mr q3cd4@pat q3cd5@fender q3cd6@expr)) q3cd2@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3cd0@t))) (q2efa@syntax-dispatch q3cd0@t '(any any any)))) q3cc2@t))) (q2efa@syntax-dispatch q3cc2@t '(any any)))) (car q3cba@clauses))))) (lambda (q3ca4@e q3ca5@r q3ca6@mr) ((lambda (q3caa@t) ((lambda (q3cac@ls/false) (if q3cac@ls/false (apply (lambda (q3cae@expr q3caf@keys q3cb0@clauses) (begin (q2f00@verify-literals q3caf@keys q3ca4@e) ((lambda (q3cb4@x) ((lambda (q3cb6@body) (list (q2c4b@q2b8b@build-lambda '#f (list q3cb4@x) q3cb6@body) (q2f1c@chi-expr q3cae@expr q3ca5@r q3ca6@mr))) (q3ca3@gen-syntax-case q3cb4@x q3caf@keys q3cb0@clauses q3ca5@r q3ca6@mr))) (q2c6f@gen-lexical 'tmp)))) q3cac@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3caa@t))) (q2efa@syntax-dispatch q3caa@t '(_ any each-any . each-any)))) q3ca4@e)))) '#f '#f '#f '#f)))) (set! q2f04@ellipsis-map (lambda (q3d28@proc q3d29@ls . q3d2c@ls*) ((lambda (q3d2f@who) (begin (set! q3d2f@who '...) (begin (if (not (list? q3d29@ls)) (assertion-violation q3d2f@who '"not a list" q3d29@ls) (void)) (if (not (null? q3d2c@ls*)) ((lambda (q3d30@n) (for-each (lambda (q3d32@x) (begin (if (not (list? q3d32@x)) (assertion-violation q3d2f@who '"not a list" q3d32@x) (void)) (if (not (= (length q3d32@x) q3d30@n)) (assertion-violation q3d2f@who '"length mismatch" q3d29@ls q3d32@x) (void)))) q3d2c@ls*)) (length q3d29@ls)) (void)) (apply map q3d28@proc q3d29@ls q3d2c@ls*)))) '#f))) (set! q2f06@syntax-transformer ((lambda () ((lambda (q3d35@gen-syntax q3d37@gen-ref q3d39@gen-append q3d3b@gen-mappend q3d3d@gen-map q3d3f@gen-cons q3d41@gen-vector q3d43@regen) (begin (set! q3d35@gen-syntax (lambda (q3dac@src q3dad@e q3dae@r q3daf@maps q3db0@ellipsis? q3db1@vec?) ((lambda (q3db8@t) ((lambda (q3dba@ls/false) (if (and q3dba@ls/false (apply (lambda (q3dbc@dots) (q3db0@ellipsis? q3dbc@dots)) q3dba@ls/false)) (apply (lambda (q3dbe@dots) (q2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" q3dac@src)) q3dba@ls/false) ((lambda (q3dc0@t) ((lambda (q3dc2@ls/false) (if (and q3dc2@ls/false (apply (lambda (q3dc4@id) (q2cef@id? q3dc4@id)) q3dc2@ls/false)) (apply (lambda (q3dc6@id) ((lambda (q3dc8@label) ((lambda (q3dca@b) ((lambda () (if (eq? (q2d11@binding-type q3dca@b) 'syntax) (call-with-values (lambda () ((lambda (q3dd0@var.lev) (q3d37@gen-ref q3dac@src (car q3dd0@var.lev) (cdr q3dd0@var.lev) q3daf@maps)) (q2d13@binding-value q3dca@b))) (lambda (q3dd2@q3dcd q3dd3@q3dcf) ((lambda (q3dd6@maps q3dd7@var) (values (list 'ref q3dd7@var) q3dd6@maps)) q3dd3@q3dcf q3dd2@q3dcd))) (values (list 'quote q3dad@e) q3daf@maps))))) (q2d0d@label->binding q3dc8@label q3dae@r))) (q2d09@id->label q3dad@e))) q3dc2@ls/false) ((lambda (q3dda@t) ((lambda (q3ddc@ls/false) (if (and q3ddc@ls/false (apply (lambda (q3dde@dots q3ddf@e) (q3db0@ellipsis? q3dde@dots)) q3ddc@ls/false)) (apply (lambda (q3de2@dots q3de3@e) (if q3db1@vec? (q2fe3@syntax-violation '#f '"misplaced ellipsis in syntax form" q3dac@src) (q3d35@gen-syntax q3dac@src q3de3@e q3dae@r q3daf@maps (lambda (q3de6@x) '#f) '#f))) q3ddc@ls/false) ((lambda (q3de8@t) ((lambda (q3dea@ls/false) (if (and q3dea@ls/false (apply (lambda (q3dec@x q3ded@dots q3dee@y) (q3db0@ellipsis? q3ded@dots)) q3dea@ls/false)) (apply (lambda (q3df2@x q3df3@dots q3df4@y) ((letrec ((q3df8@f (lambda (q3dfa@y q3dfb@k) ((lambda (q3dfe@t) ((lambda (q3e00@ls/false) (if q3e00@ls/false (apply (lambda () (q3dfb@k q3daf@maps)) q3e00@ls/false) ((lambda (q3e02@t) ((lambda (q3e04@ls/false) (if (and q3e04@ls/false (apply (lambda (q3e06@dots q3e07@y) (q3db0@ellipsis? q3e06@dots)) q3e04@ls/false)) (apply (lambda (q3e0a@dots q3e0b@y) (q3df8@f q3e0b@y (lambda (q3e0e@maps) (call-with-values (lambda () (q3dfb@k (cons '() q3e0e@maps))) (lambda (q3e14@q3e11 q3e15@q3e13) ((lambda (q3e18@maps q3e19@x) (if (null? (car q3e18@maps)) (q2fe3@syntax-violation '#f '"extra ellipsis in syntax form" q3dac@src) (values (q3d3b@gen-mappend q3e19@x (car q3e18@maps)) (cdr q3e18@maps)))) q3e15@q3e13 q3e14@q3e11)))))) q3e04@ls/false) ((lambda (q3e1c@t) ((lambda (q3e1e@ls/false) (if q3e1e@ls/false (apply (lambda () (call-with-values (lambda () (q3d35@gen-syntax q3dac@src q3dfa@y q3dae@r q3daf@maps q3db0@ellipsis? q3db1@vec?)) (lambda (q3e24@q3e21 q3e25@q3e23) ((lambda (q3e28@maps q3e29@y) (call-with-values (lambda () (q3dfb@k q3e28@maps)) (lambda (q3e30@q3e2d q3e31@q3e2f) ((lambda (q3e34@maps q3e35@x) (values (q3d39@gen-append q3e35@x q3e29@y) q3e34@maps)) q3e31@q3e2f q3e30@q3e2d)))) q3e25@q3e23 q3e24@q3e21)))) q3e1e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3e1c@t))) (q2efa@syntax-dispatch q3e1c@t '_))) q3e02@t))) (q2efa@syntax-dispatch q3e02@t '(any . any)))) q3dfe@t))) (q2efa@syntax-dispatch q3dfe@t '()))) q3dfa@y)))) q3df8@f) q3df4@y (lambda (q3e38@maps) (call-with-values (lambda () (q3d35@gen-syntax q3dac@src q3df2@x q3dae@r (cons '() q3e38@maps) q3db0@ellipsis? '#f)) (lambda (q3e3e@q3e3b q3e3f@q3e3d) ((lambda (q3e42@maps q3e43@x) (if (null? (car q3e42@maps)) (q2fe3@syntax-violation '#f '"extra ellipsis in syntax form" q3dac@src) (values (q3d3d@gen-map q3e43@x (car q3e42@maps)) (cdr q3e42@maps)))) q3e3f@q3e3d q3e3e@q3e3b)))))) q3dea@ls/false) ((lambda (q3e46@t) ((lambda (q3e48@ls/false) (if q3e48@ls/false (apply (lambda (q3e4a@x q3e4b@y) (call-with-values (lambda () (q3d35@gen-syntax q3dac@src q3e4a@x q3dae@r q3daf@maps q3db0@ellipsis? '#f)) (lambda (q3e52@q3e4f q3e53@q3e51) ((lambda (q3e56@maps q3e57@xnew) (call-with-values (lambda () (q3d35@gen-syntax q3dac@src q3e4b@y q3dae@r q3e56@maps q3db0@ellipsis? q3db1@vec?)) (lambda (q3e5e@q3e5b q3e5f@q3e5d) ((lambda (q3e62@maps q3e63@ynew) (values (q3d3f@gen-cons q3dad@e q3e4a@x q3e4b@y q3e57@xnew q3e63@ynew) q3e62@maps)) q3e5f@q3e5d q3e5e@q3e5b)))) q3e53@q3e51 q3e52@q3e4f)))) q3e48@ls/false) ((lambda (q3e66@t) ((lambda (q3e68@ls/false) (if q3e68@ls/false (apply (lambda (q3e6a@ls) (call-with-values (lambda () (q3d35@gen-syntax q3dac@src q3e6a@ls q3dae@r q3daf@maps q3db0@ellipsis? '#t)) (lambda (q3e70@q3e6d q3e71@q3e6f) ((lambda (q3e74@maps q3e75@lsnew) (values (q3d41@gen-vector q3dad@e q3e6a@ls q3e75@lsnew) q3e74@maps)) q3e71@q3e6f q3e70@q3e6d)))) q3e68@ls/false) ((lambda (q3e78@t) ((lambda (q3e7a@ls/false) (if q3e7a@ls/false (apply (lambda () (values (list 'quote q3dad@e) q3daf@maps)) q3e7a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3e78@t))) (q2efa@syntax-dispatch q3e78@t '_))) q3e66@t))) (q2efa@syntax-dispatch q3e66@t '#(vector each-any)))) q3e46@t))) (q2efa@syntax-dispatch q3e46@t '(any . any)))) q3de8@t))) (q2efa@syntax-dispatch q3de8@t '(any any . any)))) q3dda@t))) (q2efa@syntax-dispatch q3dda@t '(any any)))) q3dc0@t))) (q2efa@syntax-dispatch q3dc0@t 'any))) q3db8@t))) (q2efa@syntax-dispatch q3db8@t 'any))) q3dad@e))) (set! q3d37@gen-ref (lambda (q3d92@src q3d93@var q3d94@level q3d95@maps) (if (= q3d94@level '0) (values q3d93@var q3d95@maps) (if (null? q3d95@maps) (q2fe3@syntax-violation '#f '"missing ellipsis in syntax form" q3d92@src) (call-with-values (lambda () (q3d37@gen-ref q3d92@src q3d93@var (- q3d94@level '1) (cdr q3d95@maps))) (lambda (q3d9e@q3d9b q3d9f@q3d9d) ((lambda (q3da2@outer-maps q3da3@outer-var) ((lambda (q3da6@t) (if q3da6@t ((lambda (q3da8@b) (values (cdr q3da8@b) q3d95@maps)) q3da6@t) ((lambda (q3daa@inner-var) (values q3daa@inner-var (cons (cons (cons q3da3@outer-var q3daa@inner-var) (car q3d95@maps)) q3da2@outer-maps))) (q2c6f@gen-lexical 'tmp)))) (assq q3da3@outer-var (car q3d95@maps)))) q3d9f@q3d9d q3d9e@q3d9b))))))) (set! q3d39@gen-append (lambda (q3d8e@x q3d8f@y) (if (fast-equal? q3d8f@y ''()) q3d8e@x (list 'append q3d8e@x q3d8f@y)))) (set! q3d3b@gen-mappend (lambda (q3d8a@e q3d8b@map-env) (list 'apply '(primitive append) (q3d3d@gen-map q3d8a@e q3d8b@map-env)))) (set! q3d3d@gen-map (lambda (q3d78@e q3d79@map-env) ((lambda (q3d7c@formals q3d7d@actuals) (if (eq? (car q3d78@e) 'ref) (car q3d7d@actuals) (if (for-all (lambda (q3d80@x) (and (eq? (car q3d80@x) 'ref) (memq (cadr q3d80@x) q3d7c@formals))) (cdr q3d78@e)) ((lambda (q3d82@args) (cons 'map (cons (list 'primitive (car q3d78@e)) q3d82@args))) (map ((lambda (q3d84@r) (lambda (q3d86@x) (cdr (assq (cadr q3d86@x) q3d84@r)))) (map cons q3d7c@formals q3d7d@actuals)) (cdr q3d78@e))) (cons* 'map (list 'lambda q3d7c@formals q3d78@e) q3d7d@actuals)))) (map cdr q3d79@map-env) (map (lambda (q3d88@x) (list 'ref (car q3d88@x))) q3d79@map-env)))) (set! q3d3f@gen-cons (lambda (q3d68@e q3d69@x q3d6a@y q3d6b@xnew q3d6c@ynew) ((lambda (q3d72@t) (if (memv q3d72@t '(quote)) (if (eq? (car q3d6b@xnew) 'quote) ((lambda (q3d74@xnew q3d75@ynew) (if (and (eq? q3d74@xnew q3d69@x) (eq? q3d75@ynew q3d6a@y)) (list 'quote q3d68@e) (list 'quote (cons q3d74@xnew q3d75@ynew)))) (cadr q3d6b@xnew) (cadr q3d6c@ynew)) (if (null? (cadr q3d6c@ynew)) (list 'list q3d6b@xnew) (list 'cons q3d6b@xnew q3d6c@ynew))) (if (memv q3d72@t '(list)) (cons 'list (cons q3d6b@xnew (cdr q3d6c@ynew))) (list 'cons q3d6b@xnew q3d6c@ynew)))) (car q3d6c@ynew)))) (set! q3d41@gen-vector (lambda (q3d62@e q3d63@ls q3d64@lsnew) (if (eq? (car q3d64@lsnew) 'quote) (if (eq? (cadr q3d64@lsnew) q3d63@ls) (list 'quote q3d62@e) (list 'quote (list->vector (cadr q3d64@lsnew)))) (if (eq? (car q3d64@lsnew) 'list) (cons 'vector (cdr q3d64@lsnew)) (list 'list->vector q3d64@lsnew))))) (set! q3d43@regen (lambda (q3d5c@x) ((lambda (q3d5e@t) (if (memv q3d5e@t '(ref)) (cadr q3d5c@x) (if (memv q3d5e@t '(primitive)) (list 'primitive (cadr q3d5c@x)) (if (memv q3d5e@t '(quote)) (list 'quote (cadr q3d5c@x)) (if (memv q3d5e@t '(lambda)) (q2c4b@q2b8b@build-lambda '#f (cadr q3d5c@x) (q3d43@regen (caddr q3d5c@x))) (if (memv q3d5e@t '(map)) ((lambda (q3d60@ls) (cons '(primitive ellipsis-map) q3d60@ls)) (map q3d43@regen (cdr q3d5c@x))) (cons (list 'primitive (car q3d5c@x)) (map q3d43@regen (cdr q3d5c@x))))))))) (car q3d5c@x)))) (lambda (q3d44@e q3d45@r q3d46@mr) ((lambda (q3d4a@t) ((lambda (q3d4c@ls/false) (if q3d4c@ls/false (apply (lambda (q3d4e@x) (call-with-values (lambda () (q3d35@gen-syntax q3d44@e q3d4e@x q3d45@r '() q2efc@ellipsis? '#f)) (lambda (q3d54@q3d51 q3d55@q3d53) ((lambda (q3d58@maps q3d59@e) (q3d43@regen q3d59@e)) q3d55@q3d53 q3d54@q3d51)))) q3d4c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3d4a@t))) (q2efa@syntax-dispatch q3d4a@t '(_ any)))) q3d44@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2f08@core-macro-transformer (lambda (q3e7c@name) ((lambda (q3e7e@t) (if (memv q3e7e@t '(quote)) q2eaa@quote-transformer (if (memv q3e7e@t '(lambda)) q2eae@lambda-transformer (if (memv q3e7e@t '(case-lambda)) q2eac@case-lambda-transformer (if (memv q3e7e@t '(letrec)) q2e92@letrec-transformer (if (memv q3e7e@t '(letrec*)) q2e94@letrec*-transformer (if (memv q3e7e@t '(if)) q2ea2@if-transformer (if (memv q3e7e@t '(and)) q2ea4@and-transformer (if (memv q3e7e@t '(or)) q2ea6@or-transformer (if (memv q3e7e@t '(foreign-call)) q2ef6@foreign-call-transformer (if (memv q3e7e@t '(syntax-case)) q2f02@syntax-case-transformer (if (memv q3e7e@t '(syntax)) q2f06@syntax-transformer (if (memv q3e7e@t '(type-descriptor)) q2e98@type-descriptor-transformer (if (memv q3e7e@t '(record-type-descriptor)) q2e9a@record-type-descriptor-transformer (if (memv q3e7e@t '(record-constructor-descriptor)) q2e9c@record-constructor-descriptor-transformer (if (memv q3e7e@t '(fluid-let-syntax)) q2e96@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" q3e7c@name))))))))))))))))) q3e7c@name))) (set! q2f0a@symbol-macro (lambda (q3e80@x q3e81@set) ((lambda (q3e84@t) ((lambda (q3e86@ls/false) (if (and q3e86@ls/false (apply (lambda (q3e88@name) (and (q2cef@id? q3e88@name) (memq (q2cf1@id->sym q3e88@name) q3e81@set))) q3e86@ls/false)) (apply (lambda (q3e8a@name) (q2eb0@bless (list 'quote q3e8a@name))) q3e86@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3e84@t))) (q2efa@syntax-dispatch q3e84@t '(_ any)))) q3e80@x))) (set! q2f0c@macro-transformer (lambda (q3e8c@x) (if (procedure? q3e8c@x) q3e8c@x (if (symbol? q3e8c@x) ((lambda (q3e8e@t) (if (memv q3e8e@t '(define-record-type)) q2eee@define-record-type-macro (if (memv q3e8e@t '(define-struct)) q2eec@define-struct-macro (if (memv q3e8e@t '(include)) q2ee2@include-macro (if (memv q3e8e@t '(cond)) q2ede@cond-macro (if (memv q3e8e@t '(let)) q2eb6@let-macro (if (memv q3e8e@t '(do)) q2ed6@do-macro (if (memv q3e8e@t '(or)) q2eda@or-macro (if (memv q3e8e@t '(and)) q2edc@and-macro (if (memv q3e8e@t '(let*)) q2ed8@let*-macro (if (memv q3e8e@t '(let-values)) q2eb8@let-values-macro (if (memv q3e8e@t '(let*-values)) q2eba@let*-values-macro (if (memv q3e8e@t '(syntax-rules)) q2ee6@syntax-rules-macro (if (memv q3e8e@t '(quasiquote)) q2ee8@quasiquote-macro (if (memv q3e8e@t '(quasisyntax)) q2eea@quasisyntax-macro (if (memv q3e8e@t '(with-syntax)) q2eb2@with-syntax-macro (if (memv q3e8e@t '(when)) q2e9e@when-macro (if (memv q3e8e@t '(unless)) q2ea0@unless-macro (if (memv q3e8e@t '(case)) q2ea8@case-macro (if (memv q3e8e@t '(identifier-syntax)) q2ed4@identifier-syntax-macro (if (memv q3e8e@t '(time)) q2ecc@time-macro (if (memv q3e8e@t '(delay)) q2ece@delay-macro (if (memv q3e8e@t '(assert)) q2ed0@assert-macro (if (memv q3e8e@t '(endianness)) q2ed2@endianness-macro (if (memv q3e8e@t '(guard)) q2ec8@guard-macro (if (memv q3e8e@t '(define-enumeration)) q2eca@define-enumeration-macro (if (memv q3e8e@t '(trace-lambda)) q2ebc@trace-lambda-macro (if (memv q3e8e@t '(trace-define)) q2ebe@trace-define-macro (if (memv q3e8e@t '(trace-define-syntax)) q2ec0@trace-define-syntax-macro (if (memv q3e8e@t '(trace-let-syntax)) q2ec4@trace-let-syntax-macro (if (memv q3e8e@t '(trace-letrec-syntax)) q2ec6@trace-letrec-syntax-macro (if (memv q3e8e@t '(define-condition-type)) q2ef0@define-condition-type-macro (if (memv q3e8e@t '(parameterize)) q2ef4@parameterize-macro (if (memv q3e8e@t '(include-into)) q2ee4@include-into-macro (if (memv q3e8e@t '(eol-style)) (lambda (q3e90@x) (q2f0a@symbol-macro q3e90@x '(none lf cr crlf nel crnel ls))) (if (memv q3e8e@t '(error-handling-mode)) (lambda (q3e92@x) (q2f0a@symbol-macro q3e92@x '(ignore raise replace))) (if (memv q3e8e@t '(buffer-mode)) (lambda (q3e94@x) (q2f0a@symbol-macro q3e94@x '(none line block))) (if (memv q3e8e@t '(file-options)) q2c62@file-options-macro (if (memv q3e8e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) q2ef2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" q3e8c@x)))))))))))))))))))))))))))))))))))))))) q3e8c@x) (error 'core-macro-transformer '"BUG: invalid macro" q3e8c@x))))) (set! q2f0e@local-macro-transformer (lambda (q3e96@x) (car q3e96@x))) (set! q2f10@do-macro-call (lambda (q3e98@transformer q3e99@expr) ((lambda (q3e9c@out) (begin ((letrec ((q3e9e@f (lambda (q3ea0@x) (if (not (q2cb7@stx? q3ea0@x)) (if (pair? q3ea0@x) (begin (q3e9e@f (car q3ea0@x)) (q3e9e@f (cdr q3ea0@x))) (if (vector? q3ea0@x) (vector-for-each q3e9e@f q3ea0@x) (if (symbol? q3ea0@x) (q2fe3@syntax-violation '#f '"raw symbol encountered in output of macro" q3e99@expr q3ea0@x) (void)))) (void))))) q3e9e@f) q3e9c@out) (q2cd9@add-mark (q2ccf@gen-mark) q3e9c@out q3e99@expr))) (q3e98@transformer (q2cd9@add-mark q2cd1@anti-mark q3e99@expr '#f))))) (set! q2f12@chi-macro (lambda (q3ea2@p q3ea3@e) (q2f10@do-macro-call (q2f0c@macro-transformer q3ea2@p) q3ea3@e))) (set! q2f14@chi-local-macro (lambda (q3ea6@p q3ea7@e) (q2f10@do-macro-call (q2f0e@local-macro-transformer q3ea6@p) q3ea7@e))) (set! q2f16@chi-global-macro (lambda (q3eaa@p q3eab@e) ((lambda (q3eae@lib q3eaf@loc) (begin (q2b14@q29b6@visit-library q3eae@lib) ((lambda (q3eb2@x) ((lambda (q3eb4@transformer) (q2f10@do-macro-call q3eb4@transformer q3eab@e)) (if (procedure? q3eb2@x) q3eb2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" q3eb2@x)))) (symbol-value q3eaf@loc)))) (car q3eaa@p) (cdr q3eaa@p)))) (set! q2f18@chi-expr* (lambda (q3eb6@e* q3eb7@r q3eb8@mr) (if (null? q3eb6@e*) '() ((lambda (q3ebc@e) (cons q3ebc@e (q2f18@chi-expr* (cdr q3eb6@e*) q3eb7@r q3eb8@mr))) (q2f1c@chi-expr (car q3eb6@e*) q3eb7@r q3eb8@mr))))) (set! q2f1a@chi-application (lambda (q3ebe@e q3ebf@r q3ec0@mr) ((lambda (q3ec4@t) ((lambda (q3ec6@ls/false) (if q3ec6@ls/false (apply (lambda (q3ec8@rator q3ec9@rands) ((lambda (q3ecc@rator) (cons q3ecc@rator (q2f18@chi-expr* q3ec9@rands q3ebf@r q3ec0@mr))) (q2f1c@chi-expr q3ec8@rator q3ebf@r q3ec0@mr))) q3ec6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3ec4@t))) (q2efa@syntax-dispatch q3ec4@t '(any . each-any)))) q3ebe@e))) (set! q2f1c@chi-expr (lambda (q3ece@e q3ecf@r q3ed0@mr) (call-with-values (lambda () (q2d17@syntax-type q3ece@e q3ecf@r)) (lambda (q3eda@q3ed5 q3edb@q3ed7 q3edc@q3ed9) ((lambda (q3ee0@kwd q3ee1@value q3ee2@type) ((lambda (q3ee6@t) (if (memv q3ee6@t '(core-macro)) ((lambda (q3ee8@transformer) (q3ee8@transformer q3ece@e q3ecf@r q3ed0@mr)) (q2f08@core-macro-transformer q3ee1@value)) (if (memv q3ee6@t '(global)) ((lambda (q3eea@lib) ((lambda (q3eec@loc) ((lambda () (begin ((q2f65@inv-collector) q3eea@lib) q3eec@loc)))) (cdr q3ee1@value))) (car q3ee1@value)) (if (memv q3ee6@t '(core-prim)) ((lambda (q3eee@name) (list 'primitive q3eee@name)) q3ee1@value) (if (memv q3ee6@t '(call)) (q2f1a@chi-application q3ece@e q3ecf@r q3ed0@mr) (if (memv q3ee6@t '(lexical)) ((lambda (q3ef0@lex) q3ef0@lex) (q2e86@lexical-var q3ee1@value)) (if (memv q3ee6@t '(global-macro global-macro!)) (q2f1c@chi-expr (q2f16@chi-global-macro q3ee1@value q3ece@e) q3ecf@r q3ed0@mr) (if (memv q3ee6@t '(local-macro local-macro!)) (q2f1c@chi-expr (q2f14@chi-local-macro q3ee1@value q3ece@e) q3ecf@r q3ed0@mr) (if (memv q3ee6@t '(macro macro!)) (q2f1c@chi-expr (q2f12@chi-macro q3ee1@value q3ece@e) q3ecf@r q3ed0@mr) (if (memv q3ee6@t '(constant)) ((lambda (q3ef2@datum) (list 'quote q3ef2@datum)) q3ee1@value) (if (memv q3ee6@t '(set!)) (q2f1e@chi-set! q3ece@e q3ecf@r q3ed0@mr) (if (memv q3ee6@t '(begin)) ((lambda (q3ef4@t) ((lambda (q3ef6@ls/false) (if q3ef6@ls/false (apply (lambda (q3ef8@x q3ef9@x*) (q2c4e@q2bbd@build-sequence '#f (q2f18@chi-expr* (cons q3ef8@x q3ef9@x*) q3ecf@r q3ed0@mr))) q3ef6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3ef4@t))) (q2efa@syntax-dispatch q3ef4@t '(_ any . each-any)))) q3ece@e) (if (memv q3ee6@t '(let-syntax letrec-syntax)) ((lambda (q3efc@t) ((lambda (q3efe@ls/false) (if (and q3efe@ls/false (apply (lambda (q3f00@xlhs* q3f01@xrhs* q3f02@xbody q3f03@xbody*) (if (not (q2cf9@valid-bound-ids? q3f00@xlhs*)) (q2fe3@syntax-violation '#f '"invalid identifiers" q3ece@e) (void))) q3efe@ls/false)) (apply (lambda (q3f08@xlhs* q3f09@xrhs* q3f0a@xbody q3f0b@xbody*) ((lambda (q3f10@xlab*) ((lambda (q3f12@xrib) ((lambda (q3f14@xb*) ((lambda () (q2c4e@q2bbd@build-sequence '#f (q2f18@chi-expr* (map (lambda (q3f16@x) (q2cdb@add-subst q3f12@xrib q3f16@x)) (cons q3f0a@xbody q3f0b@xbody*)) (append (map cons q3f10@xlab* q3f14@xb*) q3ecf@r) (append (map cons q3f10@xlab* q3f14@xb*) q3ed0@mr)))))) (map (lambda (q3f18@x) (q2d2d@make-eval-transformer (q2f57@expand-transformer (if (eq? q3ee2@type 'let-syntax) q3f18@x (q2cdb@add-subst q3f12@xrib q3f18@x)) q3ed0@mr))) q3f09@xrhs*))) (q2caa@make-full-rib q3f08@xlhs* q3f10@xlab*))) (map q2c73@gen-label q3f08@xlhs*))) q3efe@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3efc@t))) (q2efa@syntax-dispatch q3efc@t '(_ #(each (any any)) any . each-any)))) q3ece@e) (if (memv q3ee6@t '(displaced-lexical)) (q2fe3@syntax-violation '#f '"identifier out of context" q3ece@e) (if (memv q3ee6@t '(syntax)) (q2fe3@syntax-violation '#f '"reference to pattern variable outside a syntax form" q3ece@e) (if (memv q3ee6@t '(define define-syntax module import library)) (q2fe3@syntax-violation '#f (string-append ((lambda (q3f1a@t) (if (memv q3f1a@t '(define)) '"a definition" (if (memv q3f1a@t '(define-syntax)) '"a define-syntax" (if (memv q3f1a@t '(module)) '"a module definition" (if (memv q3f1a@t '(library)) '"a library definition" (if (memv q3f1a@t '(import)) '"an import declaration" (if (memv q3f1a@t '(export)) '"an export declaration" '"a non-expression"))))))) q3ee2@type) '" was found where an expression was expected") q3ece@e) (if (memv q3ee6@t '(mutable)) (q2fe3@syntax-violation '#f '"attempt to reference an unexportable variable" q3ece@e) (q2fe3@syntax-violation '#f '"invalid expression" q3ece@e)))))))))))))))))) q3ee2@type)) q3edc@q3ed9 q3edb@q3ed7 q3eda@q3ed5))))) (set! q2f1e@chi-set! (lambda (q3f1c@e q3f1d@r q3f1e@mr) ((lambda (q3f22@t) ((lambda (q3f24@ls/false) (if (and q3f24@ls/false (apply (lambda (q3f26@x q3f27@v) (q2cef@id? q3f26@x)) q3f24@ls/false)) (apply (lambda (q3f2a@x q3f2b@v) (call-with-values (lambda () (q2d17@syntax-type q3f2a@x q3f1d@r)) (lambda (q3f34@q3f2f q3f35@q3f31 q3f36@q3f33) ((lambda (q3f3a@kwd q3f3b@value q3f3c@type) ((lambda (q3f40@t) (if (memv q3f40@t '(lexical)) (begin (q2e8a@set-lexical-mutable! q3f3b@value '#t) (list 'set! (q2e86@lexical-var q3f3b@value) (q2f1c@chi-expr q3f2b@v q3f1d@r q3f1e@mr))) (if (memv q3f40@t '(core-prim)) (q2fe3@syntax-violation '#f '"cannot modify imported core primitive" q3f1c@e) (if (memv q3f40@t '(global)) (q2fe3@syntax-violation '#f '"attempt to modify imported binding" q3f1c@e) (if (memv q3f40@t '(global-macro!)) (q2f1c@chi-expr (q2f16@chi-global-macro q3f3b@value q3f1c@e) q3f1d@r q3f1e@mr) (if (memv q3f40@t '(local-macro!)) (q2f1c@chi-expr (q2f14@chi-local-macro q3f3b@value q3f1c@e) q3f1d@r q3f1e@mr) (if (memv q3f40@t '(mutable)) (q2fe3@syntax-violation '#f '"attempt to assign to an unexportable variable" q3f1c@e) (q2fe3@syntax-violation '#f '"invalid syntax" q3f1c@e)))))))) q3f3c@type)) q3f36@q3f33 q3f35@q3f31 q3f34@q3f2f)))) q3f24@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3f22@t))) (q2efa@syntax-dispatch q3f22@t '(_ any any)))) q3f1c@e))) (set! q2f20@verify-formals (lambda (q3f42@fmls q3f43@stx) ((lambda (q3f46@t) ((lambda (q3f48@ls/false) (if q3f48@ls/false (apply (lambda (q3f4a@x*) (if (not (q2cf9@valid-bound-ids? q3f4a@x*)) (q2eb4@invalid-fmls-error q3f43@stx q3f42@fmls) (void))) q3f48@ls/false) ((lambda (q3f4c@t) ((lambda (q3f4e@ls/false) (if q3f4e@ls/false (apply (lambda (q3f50@x* q3f51@x) (if (not (q2cf9@valid-bound-ids? (cons q3f51@x q3f50@x*))) (q2eb4@invalid-fmls-error q3f43@stx q3f42@fmls) (void))) q3f4e@ls/false) ((lambda (q3f54@t) ((lambda (q3f56@ls/false) (if q3f56@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid syntax" q3f43@stx)) q3f56@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3f54@t))) (q2efa@syntax-dispatch q3f54@t '_))) q3f4c@t))) (q2efa@syntax-dispatch q3f4c@t '#(each+ any () any)))) q3f46@t))) (q2efa@syntax-dispatch q3f46@t 'each-any))) q3f42@fmls))) (set! q2f22@chi-lambda-clause (lambda (q3f58@stx q3f59@fmls q3f5a@body* q3f5b@r q3f5c@mr) ((lambda (q3f62@t) ((lambda (q3f64@ls/false) (if q3f64@ls/false (apply (lambda (q3f66@x*) (begin (q2f20@verify-formals q3f59@fmls q3f58@stx) ((lambda (q3f68@lex* q3f69@lab*) (values q3f68@lex* (q2f32@chi-internal (q2cdb@add-subst (q2caa@make-full-rib q3f66@x* q3f69@lab*) q3f5a@body*) (q2e8e@add-lexicals q3f69@lab* q3f68@lex* q3f5b@r) q3f5c@mr))) (map q2c6f@gen-lexical q3f66@x*) (map q2c73@gen-label q3f66@x*)))) q3f64@ls/false) ((lambda (q3f6c@t) ((lambda (q3f6e@ls/false) (if q3f6e@ls/false (apply (lambda (q3f70@x* q3f71@x) (begin (q2f20@verify-formals q3f59@fmls q3f58@stx) ((lambda (q3f74@lex* q3f75@lab* q3f76@lex q3f77@lab) (values (append q3f74@lex* q3f76@lex) (q2f32@chi-internal (q2cdb@add-subst (q2caa@make-full-rib (cons q3f71@x q3f70@x*) (cons q3f77@lab q3f75@lab*)) q3f5a@body*) (q2e8e@add-lexicals (cons q3f77@lab q3f75@lab*) (cons q3f76@lex q3f74@lex*) q3f5b@r) q3f5c@mr))) (map q2c6f@gen-lexical q3f70@x*) (map q2c73@gen-label q3f70@x*) (q2c6f@gen-lexical q3f71@x) (q2c73@gen-label q3f71@x)))) q3f6e@ls/false) ((lambda (q3f7c@t) ((lambda (q3f7e@ls/false) (if q3f7e@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid syntax" q3f59@fmls)) q3f7e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q3f7c@t))) (q2efa@syntax-dispatch q3f7c@t '_))) q3f6c@t))) (q2efa@syntax-dispatch q3f6c@t '#(each+ any () any)))) q3f62@t))) (q2efa@syntax-dispatch q3f62@t 'each-any))) q3f59@fmls))) (set! q2f24@chi-lambda-clause* (lambda (q3f80@stx q3f81@fmls* q3f82@body** q3f83@r q3f84@mr) (if (null? q3f81@fmls*) (values '() '()) (call-with-values (lambda () (q2f22@chi-lambda-clause q3f80@stx (car q3f81@fmls*) (car q3f82@body**) q3f83@r q3f84@mr)) (lambda (q3f8e@q3f8b q3f8f@q3f8d) ((lambda (q3f92@b q3f93@a) (call-with-values (lambda () (q2f24@chi-lambda-clause* q3f80@stx (cdr q3f81@fmls*) (cdr q3f82@body**) q3f83@r q3f84@mr)) (lambda (q3f9a@q3f97 q3f9b@q3f99) ((lambda (q3f9e@b* q3f9f@a*) (values (cons q3f93@a q3f9f@a*) (cons q3f92@b q3f9e@b*))) q3f9b@q3f99 q3f9a@q3f97)))) q3f8f@q3f8d q3f8e@q3f8b)))))) (set! q2f26@chi-defun (lambda (q3fa2@x q3fa3@r q3fa4@mr) ((lambda (q3fa8@fmls q3fa9@body*) (call-with-values (lambda () (q2f22@chi-lambda-clause q3fa8@fmls q3fa8@fmls q3fa9@body* q3fa3@r q3fa4@mr)) (lambda (q3fb0@q3fad q3fb1@q3faf) ((lambda (q3fb4@body q3fb5@fmls) (q2c4b@q2b8b@build-lambda '#f q3fb5@fmls q3fb4@body)) q3fb1@q3faf q3fb0@q3fad)))) (car q3fa2@x) (cdr q3fa2@x)))) (set! q2f28@chi-rhs (lambda (q3fb8@rhs q3fb9@r q3fba@mr) ((lambda (q3fbe@t) (if (memv q3fbe@t '(defun)) (q2f26@chi-defun (cdr q3fb8@rhs) q3fb9@r q3fba@mr) (if (memv q3fbe@t '(expr)) ((lambda (q3fc0@expr) (q2f1c@chi-expr q3fc0@expr q3fb9@r q3fba@mr)) (cdr q3fb8@rhs)) (if (memv q3fbe@t '(top-expr)) ((lambda (q3fc2@expr) (q2c4e@q2bbd@build-sequence '#f (list (q2f1c@chi-expr q3fc2@expr q3fb9@r q3fba@mr) (q2c4f@q2bbf@build-void)))) (cdr q3fb8@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" q3fb8@rhs))))) (car q3fb8@rhs)))) (set! q2f2a@expand-interaction-rhs*/init* (lambda (q3fc4@lhs* q3fc5@rhs* q3fc6@init* q3fc7@r q3fc8@mr) ((letrec ((q3fce@f (lambda (q3fd0@lhs* q3fd1@rhs*) (if (null? q3fd0@lhs*) (map (lambda (q3fd4@x) (q2f1c@chi-expr q3fd4@x q3fc7@r q3fc8@mr)) q3fc6@init*) ((lambda (q3fd6@lhs q3fd7@rhs) ((lambda (q3fda@t) (if (memv q3fda@t '(defun)) ((lambda (q3fdc@rhs) (cons (list 'set! q3fd6@lhs q3fdc@rhs) (q3fce@f (cdr q3fd0@lhs*) (cdr q3fd1@rhs*)))) (q2f26@chi-defun (cdr q3fd7@rhs) q3fc7@r q3fc8@mr)) (if (memv q3fda@t '(expr)) ((lambda (q3fde@rhs) (cons (list 'set! q3fd6@lhs q3fde@rhs) (q3fce@f (cdr q3fd0@lhs*) (cdr q3fd1@rhs*)))) (q2f1c@chi-expr (cdr q3fd7@rhs) q3fc7@r q3fc8@mr)) (if (memv q3fda@t '(top-expr)) ((lambda (q3fe0@e) (cons q3fe0@e (q3fce@f (cdr q3fd0@lhs*) (cdr q3fd1@rhs*)))) (q2f1c@chi-expr (cdr q3fd7@rhs) q3fc7@r q3fc8@mr)) (error 'expand-interaction '"invallid" q3fd7@rhs))))) (car q3fd7@rhs))) (car q3fd0@lhs*) (car q3fd1@rhs*)))))) q3fce@f) q3fc4@lhs* q3fc5@rhs*))) (set! q2f2c@chi-rhs* (lambda (q3fe2@rhs* q3fe3@r q3fe4@mr) ((letrec ((q3fe8@f (lambda (q3fea@ls) (if (null? q3fea@ls) '() ((lambda (q3fec@a) (cons q3fec@a (q3fe8@f (cdr q3fea@ls)))) (q2f28@chi-rhs (car q3fea@ls) q3fe3@r q3fe4@mr)))))) q3fe8@f) q3fe2@rhs*))) (set! q2f2e@find-bound=? (lambda (q3fee@x q3fef@lhs* q3ff0@rhs*) (if (null? q3fef@lhs*) '#f (if (q2cf5@bound-id=? q3fee@x (car q3fef@lhs*)) (car q3ff0@rhs*) (q2f2e@find-bound=? q3fee@x (cdr q3fef@lhs*) (cdr q3ff0@rhs*)))))) (set! q2f30@find-dups (lambda (q3ff4@ls) ((letrec ((q3ff6@f (lambda (q3ff8@ls q3ff9@dups) (if (null? q3ff8@ls) q3ff9@dups ((lambda (q3ffc@t) (if q3ffc@t ((lambda (q3ffe@x) (q3ff6@f (cdr q3ff8@ls) (cons (list (car q3ff8@ls) q3ffe@x) q3ff9@dups))) q3ffc@t) (q3ff6@f (cdr q3ff8@ls) q3ff9@dups))) (q2f2e@find-bound=? (car q3ff8@ls) (cdr q3ff8@ls) (cdr q3ff8@ls))))))) q3ff6@f) q3ff4@ls '()))) (set! q2f32@chi-internal (lambda (q4000@e* q4001@r q4002@mr) ((lambda (q4006@rib) (call-with-values (lambda () (q2f55@chi-body* (map (lambda (q4018@x) (q2cdb@add-subst q4006@rib q4018@x)) (q2ced@syntax->list q4000@e*)) q4001@r q4002@mr '() '() '() '() '() q4006@rib '#f)) (lambda (q401a@q4009 q401b@q400b q401c@q400d q401d@q400f q401e@q4011 q401f@q4013 q4020@q4015 q4021@q4017) ((lambda (q402a@_exp* q402b@kwd* q402c@mod** q402d@rhs* q402e@lex* q402f@mr q4030@r q4031@e*) (begin (if (null? q4031@e*) (q2fe3@syntax-violation '#f '"no expression in body" q4031@e*) (void)) ((lambda (q403a@init*) ((lambda (q403c@rhs*) ((lambda () (q2c51@q2bc3@build-letrec* '#f (reverse q402e@lex*) (reverse q403c@rhs*) (q2c4e@q2bbd@build-sequence '#f q403a@init*))))) (q2f2c@chi-rhs* q402d@rhs* q4030@r q402f@mr))) (q2f18@chi-expr* (append (apply append (reverse q402c@mod**)) q4031@e*) q4030@r q402f@mr)))) q4021@q4017 q4020@q4015 q401f@q4013 q401e@q4011 q401d@q400f q401c@q400d q401b@q400b q401a@q4009)))) (q2c9e@make-empty-rib)))) (set! q2f34@parse-module (lambda (q403e@e) ((lambda (q4040@t) ((lambda (q4042@ls/false) (if q4042@ls/false (apply (lambda (q4044@export* q4045@b*) (begin (if (not (for-all q2cef@id? q4044@export*)) (q2fe3@syntax-violation '#f '"module exports must be identifiers" q403e@e) (void)) (values '#f (list->vector q4044@export*) q4045@b*))) q4042@ls/false) ((lambda (q4048@t) ((lambda (q404a@ls/false) (if q404a@ls/false (apply (lambda (q404c@name q404d@export* q404e@b*) (begin (if (not (q2cef@id? q404c@name)) (q2fe3@syntax-violation '#f '"module name must be an identifier" q403e@e) (void)) (if (not (for-all q2cef@id? q404d@export*)) (q2fe3@syntax-violation '#f '"module exports must be identifiers" q403e@e) (void)) (values q404c@name (list->vector q404d@export*) q404e@b*))) q404a@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4048@t))) (q2efa@syntax-dispatch q4048@t '(_ any each-any . each-any)))) q4040@t))) (q2efa@syntax-dispatch q4040@t '(_ each-any . each-any)))) q403e@e))) (set! q2f3a@q2f35 (make-record-type-descriptor 'module-interface '#f 'q2f38 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! q2f3c@q2f37 '#f) (set! q2f3e@q2f36 (make-record-constructor-descriptor q2f3a@q2f35 '#f q2f3c@q2f37)) (set! q2f41@module-interface? (record-predicate q2f3a@q2f35)) (set! q2f43@make-module-interface (record-constructor q2f3e@q2f36)) (set! q2f45@module-interface-first-mark (record-accessor q2f3a@q2f35 '0)) (set! q2f47@module-interface-exp-id-vec (record-accessor q2f3a@q2f35 '1)) (set! q2f49@module-interface-exp-lab-vec (record-accessor q2f3a@q2f35 '2)) (set! q2f4b@set-module-interface-first-mark! (record-mutator q2f3a@q2f35 '0)) (set! q2f4d@set-module-interface-exp-id-vec! (record-mutator q2f3a@q2f35 '1)) (set! q2f4f@set-module-interface-exp-lab-vec! (record-mutator q2f3a@q2f35 '2)) (set! q2f51@module-interface-exp-id* (lambda (q4052@iface q4053@id) ((lambda (q4057@diff-marks) (begin (set! q4057@diff-marks (lambda (q405e@ls q405f@x) (begin (if (null? q405e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (q4062@a) (if (eq? q4062@a q405f@x) '() (cons q4062@a (q4057@diff-marks (cdr q405e@ls) q405f@x)))) (car q405e@ls))))) ((lambda (q4058@diff q4059@id-vec) (if (null? q4058@diff) q4059@id-vec (vector-map (lambda (q405c@x) (q2cb9@make-stx (q2cbb@stx-expr q405c@x) (append q4058@diff (q2cbd@stx-mark* q405c@x)) '() '())) q4059@id-vec))) (q4057@diff-marks (q2cbd@stx-mark* q4053@id) (q2f45@module-interface-first-mark q4052@iface)) (q2f47@module-interface-exp-id-vec q4052@iface)))) '#f))) (set! q2f53@chi-internal-module (lambda (q4064@e q4065@r q4066@mr q4067@lex* q4068@rhs* q4069@mod** q406a@kwd*) (call-with-values (lambda () (q2f34@parse-module q4064@e)) (lambda (q4078@q4073 q4079@q4075 q407a@q4077) ((lambda (q407e@e* q407f@exp-id* q4080@name) ((lambda (q4084@rib) ((lambda (q4086@e*) ((lambda () (call-with-values (lambda () (q2f55@chi-body* q4086@e* q4065@r q4066@mr q4067@lex* q4068@rhs* q4069@mod** q406a@kwd* '() q4084@rib '#f)) (lambda (q4098@q4089 q4099@q408b q409a@q408d q409b@q408f q409c@q4091 q409d@q4093 q409e@q4095 q409f@q4097) ((lambda (q40a8@_exp* q40a9@kwd* q40aa@mod** q40ab@rhs* q40ac@lex* q40ad@mr q40ae@r q40af@e*) ((lambda (q40b8@exp-lab* q40b9@mod**) (if (not q4080@name) (values q40ac@lex* q40ab@rhs* q407f@exp-id* q40b8@exp-lab* q40ae@r q40ad@mr q40b9@mod** q40a9@kwd*) ((lambda (q40bc@lab q40bd@iface) (values q40ac@lex* q40ab@rhs* (vector q4080@name) (vector q40bc@lab) (cons (cons q40bc@lab (cons '$module q40bd@iface)) q40ae@r) (cons (cons q40bc@lab (cons '$module q40bd@iface)) q40ad@mr) q40b9@mod** q40a9@kwd*)) (q2c73@gen-label 'module) (q2f43@make-module-interface (car (q2cbd@stx-mark* q4080@name)) (vector-map (lambda (q40c0@x) (q2cb9@make-stx (q2cbb@stx-expr q40c0@x) (q2cbd@stx-mark* q40c0@x) '() '())) q407f@exp-id*) q40b8@exp-lab*)))) (vector-map (lambda (q40c2@x) (or (q2d09@id->label (q2cb9@make-stx (q2cf1@id->sym q40c2@x) (q2cbd@stx-mark* q40c2@x) (list q4084@rib) '())) (q2fe3@syntax-violation '#f '"cannot find module export" q40c2@x))) q407f@exp-id*) (cons q40af@e* q40aa@mod**))) q409f@q4097 q409e@q4095 q409d@q4093 q409c@q4091 q409b@q408f q409a@q408d q4099@q408b q4098@q4089)))))) (map (lambda (q40c4@x) (q2cdb@add-subst q4084@rib q40c4@x)) (q2ced@syntax->list q407e@e*)))) (q2c9e@make-empty-rib))) q407a@q4077 q4079@q4075 q4078@q4073))))) (set! q2f55@chi-body* (lambda (q40c6@e* q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40cc@kwd* q40cd@exp* q40ce@rib q40cf@top?) (if (null? q40c6@e*) (values q40c6@e* q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40cc@kwd* q40cd@exp*) ((lambda (q40da@e) (call-with-values (lambda () (q2d17@syntax-type q40da@e q40c7@r)) (lambda (q40e2@q40dd q40e3@q40df q40e4@q40e1) ((lambda (q40e8@kwd q40e9@value q40ea@type) ((lambda (q40ee@kwd*) ((lambda (q40f0@t) (if (memv q40f0@t '(define)) (call-with-values (lambda () (q2e7e@parse-define q40da@e)) (lambda (q40f6@q40f3 q40f7@q40f5) ((lambda (q40fa@rhs q40fb@id) (begin (if (q2cfd@bound-id-member? q40fb@id q40ee@kwd*) (q2fe3@syntax-violation '#f '"cannot redefine keyword" q40da@e) (void)) (call-with-values (lambda () (q2c77@gen-define-label+loc q40fb@id q40ce@rib)) (lambda (q4102@q40ff q4103@q4101) ((lambda (q4106@lex q4107@lab) (begin (q2ca0@extend-rib! q40ce@rib q40fb@id q4107@lab) (q2f55@chi-body* (cdr q40c6@e*) (q2e8c@add-lexical q4107@lab q4106@lex q40c7@r) q40c8@mr (cons q4106@lex q40c9@lex*) (cons q40fa@rhs q40ca@rhs*) q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?))) q4103@q4101 q4102@q40ff))))) q40f7@q40f5 q40f6@q40f3))) (if (memv q40f0@t '(define-syntax)) (call-with-values (lambda () (q2e80@parse-define-syntax q40da@e)) (lambda (q410e@q410b q410f@q410d) ((lambda (q4112@rhs q4113@id) (begin (if (q2cfd@bound-id-member? q4113@id q40ee@kwd*) (q2fe3@syntax-violation '#f '"cannot redefine keyword" q40da@e) (void)) ((lambda (q4116@lab q4117@expanded-rhs) (begin (q2ca0@extend-rib! q40ce@rib q4113@id q4116@lab) ((lambda (q411a@b) (q2f55@chi-body* (cdr q40c6@e*) (cons (cons q4116@lab q411a@b) q40c7@r) (cons (cons q4116@lab q411a@b) q40c8@mr) q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?)) (q2d2d@make-eval-transformer q4117@expanded-rhs)))) (q2c79@gen-define-label q4113@id q40ce@rib) (q2f57@expand-transformer q4112@rhs q40c8@mr)))) q410f@q410d q410e@q410b))) (if (memv q40f0@t '(let-syntax letrec-syntax)) ((lambda (q411c@t) ((lambda (q411e@ls/false) (if (and q411e@ls/false (apply (lambda (q4120@xlhs* q4121@xrhs* q4122@xbody*) (if (not (q2cf9@valid-bound-ids? q4120@xlhs*)) (q2fe3@syntax-violation '#f '"invalid identifiers" q40da@e) (void))) q411e@ls/false)) (apply (lambda (q4126@xlhs* q4127@xrhs* q4128@xbody*) ((lambda (q412c@xlab*) ((lambda (q412e@xrib) ((lambda (q4130@xb*) ((lambda () (q2f55@chi-body* (append (map (lambda (q4132@x) (q2cdb@add-subst q412e@xrib q4132@x)) q4128@xbody*) (cdr q40c6@e*)) (append (map cons q412c@xlab* q4130@xb*) q40c7@r) (append (map cons q412c@xlab* q4130@xb*) q40c8@mr) q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?)))) (map (lambda (q4134@x) (q2d2d@make-eval-transformer (q2f57@expand-transformer (if (eq? q40ea@type 'let-syntax) q4134@x (q2cdb@add-subst q412e@xrib q4134@x)) q40c8@mr))) q4127@xrhs*))) (q2caa@make-full-rib q4126@xlhs* q412c@xlab*))) (map q2c73@gen-label q4126@xlhs*))) q411e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q411c@t))) (q2efa@syntax-dispatch q411c@t '(_ #(each (any any)) . each-any)))) q40da@e) (if (memv q40f0@t '(begin)) ((lambda (q4136@t) ((lambda (q4138@ls/false) (if q4138@ls/false (apply (lambda (q413a@x*) (q2f55@chi-body* (append q413a@x* (cdr q40c6@e*)) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?)) q4138@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4136@t))) (q2efa@syntax-dispatch q4136@t '(_ . each-any)))) q40da@e) (if (memv q40f0@t '(global-macro global-macro!)) (q2f55@chi-body* (cons (q2cdb@add-subst q40ce@rib (q2f16@chi-global-macro q40e9@value q40da@e)) (cdr q40c6@e*)) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?) (if (memv q40f0@t '(local-macro local-macro!)) (q2f55@chi-body* (cons (q2cdb@add-subst q40ce@rib (q2f14@chi-local-macro q40e9@value q40da@e)) (cdr q40c6@e*)) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?) (if (memv q40f0@t '(macro macro!)) (q2f55@chi-body* (cons (q2cdb@add-subst q40ce@rib (q2f12@chi-macro q40e9@value q40da@e)) (cdr q40c6@e*)) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?) (if (memv q40f0@t '(module)) (call-with-values (lambda () (q2f53@chi-internal-module q40da@e q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd*)) (lambda (q414c@q413d q414d@q413f q414e@q4141 q414f@q4143 q4150@q4145 q4151@q4147 q4152@q4149 q4153@q414b) ((lambda (q415c@kwd* q415d@mod** q415e@mr q415f@r q4160@m-exp-lab* q4161@m-exp-id* q4162@rhs* q4163@lex*) (begin (vector-for-each (lambda (q416c@id q416d@lab) (q2ca0@extend-rib! q40ce@rib q416c@id q416d@lab)) q4161@m-exp-id* q4160@m-exp-lab*) (q2f55@chi-body* (cdr q40c6@e*) q415f@r q415e@mr q4163@lex* q4162@rhs* q415d@mod** q415c@kwd* q40cd@exp* q40ce@rib q40cf@top?))) q4153@q414b q4152@q4149 q4151@q4147 q4150@q4145 q414f@q4143 q414e@q4141 q414d@q413f q414c@q413d))) (if (memv q40f0@t '(library)) (begin (q2fc5@library-expander (q2d05@stx->datum q40da@e)) (q2f55@chi-body* (cdr q40c6@e*) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?)) (if (memv q40f0@t '(export)) ((lambda (q4170@t) ((lambda (q4172@ls/false) (if q4172@ls/false (apply (lambda (q4174@exp-decl*) (q2f55@chi-body* (cdr q40c6@e*) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* (append q4174@exp-decl* q40cd@exp*) q40ce@rib q40cf@top?)) q4172@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4170@t))) (q2efa@syntax-dispatch q4170@t '(_ . each-any)))) q40da@e) (if (memv q40f0@t '(import)) ((lambda () ((lambda (q4177@module-import? q4179@module-import q417b@library-import) (begin (set! q4177@module-import? (lambda (q41ca@e) ((lambda (q41cc@t) ((lambda (q41ce@ls/false) (if (and q41ce@ls/false (apply (lambda (q41d0@id) (q2cef@id? q41d0@id)) q41ce@ls/false)) (apply (lambda (q41d2@id) '#t) q41ce@ls/false) ((lambda (q41d4@t) ((lambda (q41d6@ls/false) (if q41d6@ls/false (apply (lambda (q41d8@imp*) '#f) q41d6@ls/false) ((lambda (q41da@t) ((lambda (q41dc@ls/false) (if q41dc@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"malformed import form" q41ca@e)) q41dc@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q41da@t))) (q2efa@syntax-dispatch q41da@t '_))) q41d4@t))) (q2efa@syntax-dispatch q41d4@t '(_ . each-any)))) q41cc@t))) (q2efa@syntax-dispatch q41cc@t '(_ any)))) q41ca@e))) (set! q4179@module-import (lambda (q41a8@e q41a9@r) ((lambda (q41ac@t) ((lambda (q41ae@ls/false) (if (and q41ae@ls/false (apply (lambda (q41b0@id) (q2cef@id? q41b0@id)) q41ae@ls/false)) (apply (lambda (q41b2@id) (call-with-values (lambda () (q2d17@syntax-type q41b2@id q41a9@r)) (lambda (q41ba@q41b5 q41bb@q41b7 q41bc@q41b9) ((lambda (q41c0@kwd q41c1@value q41c2@type) ((lambda (q41c6@t) (if (memv q41c6@t '($module)) ((lambda (q41c8@iface) (values (q2f51@module-interface-exp-id* q41c8@iface q41b2@id) (q2f49@module-interface-exp-lab-vec q41c8@iface))) q41c1@value) (q2fe3@syntax-violation '#f '"invalid import" q41a8@e))) q41c2@type)) q41bc@q41b9 q41bb@q41b7 q41ba@q41b5)))) q41ae@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q41ac@t))) (q2efa@syntax-dispatch q41ac@t '(_ any)))) q41a8@e))) (set! q417b@library-import (lambda (q418c@e) ((lambda (q418e@t) ((lambda (q4190@ls/false) (if q4190@ls/false (apply (lambda (q4192@ctxt q4193@imp*) (call-with-values (lambda () (q2f5f@parse-import-spec* (q2fe9@syntax->datum q4193@imp*))) (lambda (q419a@q4197 q419b@q4199) ((lambda (q419e@subst-labels q419f@subst-names) (values (vector-map (lambda (q41a2@name) (q2ccd@datum->stx q4192@ctxt q41a2@name)) q419f@subst-names) q419e@subst-labels)) q419b@q4199 q419a@q4197)))) q4190@ls/false) ((lambda (q41a4@t) ((lambda (q41a6@ls/false) (if q41a6@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid import form" q418c@e)) q41a6@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q41a4@t))) (q2efa@syntax-dispatch q41a4@t '_))) q418e@t))) (q2efa@syntax-dispatch q418e@t '(any . each-any)))) q418c@e))) (begin (call-with-values (lambda () (if (q4177@module-import? q40da@e) (q4179@module-import q40da@e q40c7@r) (q417b@library-import q40da@e))) (lambda (q4180@q417d q4181@q417f) ((lambda (q4184@lab* q4185@id*) (vector-for-each (lambda (q4188@id q4189@lab) (q2ca0@extend-rib! q40ce@rib q4188@id q4189@lab)) q4185@id* q4184@lab*)) q4181@q417f q4180@q417d))) (q2f55@chi-body* (cdr q40c6@e*) q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?)))) '#f '#f '#f))) (if q40cf@top? (q2f55@chi-body* (cdr q40c6@e*) q40c7@r q40c8@mr (cons (q2c6f@gen-lexical 'dummy) q40c9@lex*) (cons (cons 'top-expr q40da@e) q40ca@rhs*) q40cb@mod** q40ee@kwd* q40cd@exp* q40ce@rib q40cf@top?) (values q40c6@e* q40c7@r q40c8@mr q40c9@lex* q40ca@rhs* q40cb@mod** q40ee@kwd* q40cd@exp*)))))))))))))) q40ea@type)) (if (q2cef@id? q40e8@kwd) (cons q40e8@kwd q40cc@kwd*) q40cc@kwd*))) q40e4@q40e1 q40e3@q40df q40e2@q40dd)))) (car q40c6@e*))))) (set! q2f57@expand-transformer (lambda (q41de@expr q41df@r) ((lambda (q41e2@rtc) ((lambda (q41e4@expanded-rhs) (begin (for-each ((lambda (q41e6@mark-visit) (lambda (q41e8@x) (begin (q2b13@q29b4@invoke-library q41e8@x) (q41e6@mark-visit q41e8@x)))) (q2f67@vis-collector)) (q41e2@rtc)) q41e4@expanded-rhs)) ((lambda (q41f2@q41eb q41f3@q41ed q41f4@q41ef q41f5@q41f1) ((lambda (q41fa@swap) (dynamic-wind q41fa@swap (lambda () (q2f1c@chi-expr q41de@expr q41df@r q41df@r)) q41fa@swap)) (lambda () (begin ((lambda (q41fc@t) (begin (q41f2@q41eb q41f4@q41ef) (set! q41f4@q41ef q41fc@t))) (q41f2@q41eb)) ((lambda (q41fe@t) (begin (q41f3@q41ed q41f5@q41f1) (set! q41f5@q41f1 q41fe@t))) (q41f3@q41ed)))))) q2f65@inv-collector q2f67@vis-collector q41e2@rtc (lambda (q4200@x) (values))))) (q2f63@make-collector)))) (set! q2f59@parse-exports (lambda (q4202@exp*) ((letrec ((q4204@f (lambda (q4206@exp* q4207@int* q4208@ext*) (if (null? q4206@exp*) (begin (if (not (q2cf9@valid-bound-ids? q4208@ext*)) (q2fe3@syntax-violation 'export '"invalid exports" (q2f30@find-dups q4208@ext*)) (void)) (values (map q2fe9@syntax->datum q4208@ext*) q4207@int*)) ((lambda (q420c@t) ((lambda (q420e@ls/false) (if q420e@ls/false (apply (lambda (q4210@rename q4211@i* q4212@e*) (begin (if (not (and (eq? (q2fe9@syntax->datum q4210@rename) 'rename) (for-all q2cef@id? q4211@i*) (for-all q2cef@id? q4212@e*))) (q2fe3@syntax-violation 'export '"invalid export specifier" (car q4206@exp*)) (void)) (q4204@f (cdr q4206@exp*) (append q4211@i* q4207@int*) (append q4212@e* q4208@ext*)))) q420e@ls/false) ((lambda (q4216@t) ((lambda (q4218@ls/false) (if q4218@ls/false (apply (lambda (q421a@ie) (begin (if (not (q2cef@id? q421a@ie)) (q2fe3@syntax-violation 'export '"invalid export" q421a@ie) (void)) (q4204@f (cdr q4206@exp*) (cons q421a@ie q4207@int*) (cons q421a@ie q4208@ext*)))) q4218@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4216@t))) (q2efa@syntax-dispatch q4216@t 'any))) q420c@t))) (q2efa@syntax-dispatch q420c@t '(any . #(each (any any)))))) (car q4206@exp*)))))) q4204@f) q4202@exp* '() '()))) (set! q2f5b@parse-library-name (lambda (q421c@spec) ((lambda (q421f@parse) (begin (set! q421f@parse (lambda (q422c@x) ((lambda (q422e@t) ((lambda (q4230@ls/false) (if (and q4230@ls/false (apply (lambda (q4232@v*) (for-all (lambda (q4234@x) ((lambda (q4236@x) (and (integer? q4236@x) (exact? q4236@x))) (q2fe9@syntax->datum q4234@x))) q4232@v*)) q4230@ls/false)) (apply (lambda (q4238@v*) (values '() (map q2fe9@syntax->datum q4238@v*))) q4230@ls/false) ((lambda (q423a@t) ((lambda (q423c@ls/false) (if (and q423c@ls/false (apply (lambda (q423e@x q423f@rest) (symbol? (q2fe9@syntax->datum q423e@x))) q423c@ls/false)) (apply (lambda (q4242@x q4243@rest) (call-with-values (lambda () (q421f@parse q4243@rest)) (lambda (q424a@q4247 q424b@q4249) ((lambda (q424e@v* q424f@x*) (values (cons (q2fe9@syntax->datum q4242@x) q424f@x*) q424e@v*)) q424b@q4249 q424a@q4247)))) q423c@ls/false) ((lambda (q4252@t) ((lambda (q4254@ls/false) (if q4254@ls/false (apply (lambda () (values '() '())) q4254@ls/false) ((lambda (q4256@t) ((lambda (q4258@ls/false) (if q4258@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid library name" q421c@spec)) q4258@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4256@t))) (q2efa@syntax-dispatch q4256@t '_))) q4252@t))) (q2efa@syntax-dispatch q4252@t '()))) q423a@t))) (q2efa@syntax-dispatch q423a@t '(any . any)))) q422e@t))) (q2efa@syntax-dispatch q422e@t '(each-any)))) q422c@x))) (call-with-values (lambda () (q421f@parse q421c@spec)) (lambda (q4224@q4221 q4225@q4223) ((lambda (q4228@ver* q4229@name*) (begin (if (null? q4229@name*) (q2fe3@syntax-violation '#f '"empty library name" q421c@spec) (void)) (values q4229@name* q4228@ver*))) q4225@q4223 q4224@q4221))))) '#f))) (set! q2f5d@parse-library (lambda (q425a@e) ((lambda (q425c@t) ((lambda (q425e@ls/false) (if (and q425e@ls/false (apply (lambda (q4260@library q4261@name* q4262@export q4263@exp* q4264@import q4265@imp* q4266@b*) (and (eq? (q2fe9@syntax->datum q4262@export) 'export) (eq? (q2fe9@syntax->datum q4264@import) 'import) (eq? (q2fe9@syntax->datum q4260@library) 'library))) q425e@ls/false)) (apply (lambda (q426e@library q426f@name* q4270@export q4271@exp* q4272@import q4273@imp* q4274@b*) (values q426f@name* q4271@exp* q4273@imp* q4274@b*)) q425e@ls/false) ((lambda (q427c@t) ((lambda (q427e@ls/false) (if q427e@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"malformed library" q425a@e)) q427e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q427c@t))) (q2efa@syntax-dispatch q427c@t '_))) q425c@t))) (q2efa@syntax-dispatch q425c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) q425a@e))) (set! q2f5f@parse-import-spec* ((lambda () ((lambda (q4281@idsyn? q4283@dup-error q4285@merge-substs q4287@exclude* q4289@find* q428b@rem* q428d@remove-dups q428f@parse-library-name q4291@import-library q4293@get-import q4295@add-imports!) (begin (set! q4281@idsyn? (lambda (q448a@x) (symbol? (q2fe9@syntax->datum q448a@x)))) (set! q4283@dup-error (lambda (q4488@name) (q2fe3@syntax-violation 'import '"two imports with different bindings" q4488@name))) (set! q4285@merge-substs (lambda (q4476@s q4477@subst) ((lambda (q447b@insert-to-subst) (begin (set! q447b@insert-to-subst (lambda (q447c@a q447d@subst) ((lambda (q4480@name q4481@label) ((lambda (q4484@t) (if q4484@t ((lambda (q4486@x) (if (eq? (cdr q4486@x) q4481@label) q447d@subst (q4283@dup-error q4480@name))) q4484@t) (cons q447c@a q447d@subst))) (assq q4480@name q447d@subst))) (car q447c@a) (cdr q447c@a)))) (if (null? q4476@s) q4477@subst (q447b@insert-to-subst (car q4476@s) (q4285@merge-substs (cdr q4476@s) q4477@subst))))) '#f))) (set! q4287@exclude* (lambda (q4446@sym* q4447@subst) ((lambda (q444b@exclude) (begin (set! q444b@exclude (lambda (q4464@sym q4465@subst) (if (null? q4465@subst) (q2fe3@syntax-violation 'import '"cannot rename unbound identifier" q4464@sym) (if (eq? q4464@sym (caar q4465@subst)) (values (cdar q4465@subst) (cdr q4465@subst)) ((lambda (q4468@a) (call-with-values (lambda () (q444b@exclude q4464@sym (cdr q4465@subst))) (lambda (q446e@q446b q446f@q446d) ((lambda (q4472@subst q4473@old) (values q4473@old (cons q4468@a q4472@subst))) q446f@q446d q446e@q446b)))) (car q4465@subst)))))) (if (null? q4446@sym*) (values '() q4447@subst) (call-with-values (lambda () (q444b@exclude (car q4446@sym*) q4447@subst)) (lambda (q4450@q444d q4451@q444f) ((lambda (q4454@subst q4455@old) (call-with-values (lambda () (q4287@exclude* (cdr q4446@sym*) q4454@subst)) (lambda (q445c@q4459 q445d@q445b) ((lambda (q4460@subst q4461@old*) (values (cons q4455@old q4461@old*) q4460@subst)) q445d@q445b q445c@q4459)))) q4451@q444f q4450@q444d)))))) '#f))) (set! q4289@find* (lambda (q443e@sym* q443f@subst) (map (lambda (q4442@x) ((lambda (q4444@t) (if q4444@t (cdr q4444@t) (q2fe3@syntax-violation 'import '"cannot find identifier" q4442@x))) (assq q4442@x q443f@subst))) q443e@sym*))) (set! q428b@rem* (lambda (q4436@sym* q4437@subst) ((letrec ((q443a@f (lambda (q443c@subst) (if (null? q443c@subst) '() (if (memq (caar q443c@subst) q4436@sym*) (q443a@f (cdr q443c@subst)) (cons (car q443c@subst) (q443a@f (cdr q443c@subst)))))))) q443a@f) q4437@subst))) (set! q428d@remove-dups (lambda (q4434@ls) (if (null? q4434@ls) '() (if (memq (car q4434@ls) (cdr q4434@ls)) (q428d@remove-dups (cdr q4434@ls)) (cons (car q4434@ls) (q428d@remove-dups (cdr q4434@ls))))))) (set! q428f@parse-library-name (lambda (q434c@spec) ((lambda (q434f@subversion? q4351@subversion-pred q4353@version-pred) (begin (set! q434f@subversion? (lambda (q4430@x) ((lambda (q4432@x) (and (integer? q4432@x) (exact? q4432@x) (>= q4432@x '0))) (q2fe9@syntax->datum q4430@x)))) (set! q4351@subversion-pred (lambda (q43d0@x*) ((lambda (q43d2@t) ((lambda (q43d4@ls/false) (if (and q43d4@ls/false (apply (lambda (q43d6@n) (q434f@subversion? q43d6@n)) q43d4@ls/false)) (apply (lambda (q43d8@n) (lambda (q43da@x) (= q43da@x (q2fe9@syntax->datum q43d8@n)))) q43d4@ls/false) ((lambda (q43dc@t) ((lambda (q43de@ls/false) (if (and q43de@ls/false (apply (lambda (q43e0@p? q43e1@sub*) (eq? (q2fe9@syntax->datum q43e0@p?) 'and)) q43de@ls/false)) (apply (lambda (q43e4@p? q43e5@sub*) ((lambda (q43e8@p*) (lambda (q43ea@x) (for-all (lambda (q43ec@p) (q43ec@p q43ea@x)) q43e8@p*))) (map q4351@subversion-pred q43e5@sub*))) q43de@ls/false) ((lambda (q43ee@t) ((lambda (q43f0@ls/false) (if (and q43f0@ls/false (apply (lambda (q43f2@p? q43f3@sub*) (eq? (q2fe9@syntax->datum q43f2@p?) 'or)) q43f0@ls/false)) (apply (lambda (q43f6@p? q43f7@sub*) ((lambda (q43fa@p*) (lambda (q43fc@x) (exists (lambda (q43fe@p) (q43fe@p q43fc@x)) q43fa@p*))) (map q4351@subversion-pred q43f7@sub*))) q43f0@ls/false) ((lambda (q4400@t) ((lambda (q4402@ls/false) (if (and q4402@ls/false (apply (lambda (q4404@p? q4405@sub) (eq? (q2fe9@syntax->datum q4404@p?) 'not)) q4402@ls/false)) (apply (lambda (q4408@p? q4409@sub) ((lambda (q440c@p) (lambda (q440e@x) (not (q440c@p q440e@x)))) (q4351@subversion-pred q4409@sub))) q4402@ls/false) ((lambda (q4410@t) ((lambda (q4412@ls/false) (if (and q4412@ls/false (apply (lambda (q4414@p? q4415@n) (and (eq? (q2fe9@syntax->datum q4414@p?) '<=) (q434f@subversion? q4415@n))) q4412@ls/false)) (apply (lambda (q4418@p? q4419@n) (lambda (q441c@x) (<= q441c@x (q2fe9@syntax->datum q4419@n)))) q4412@ls/false) ((lambda (q441e@t) ((lambda (q4420@ls/false) (if (and q4420@ls/false (apply (lambda (q4422@p? q4423@n) (and (eq? (q2fe9@syntax->datum q4422@p?) '>=) (q434f@subversion? q4423@n))) q4420@ls/false)) (apply (lambda (q4426@p? q4427@n) (lambda (q442a@x) (>= q442a@x (q2fe9@syntax->datum q4427@n)))) q4420@ls/false) ((lambda (q442c@t) ((lambda (q442e@ls/false) (if q442e@ls/false (apply (lambda () (q2fe3@syntax-violation 'import '"invalid sub-version spec" q434c@spec q43d0@x*)) q442e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q442c@t))) (q2efa@syntax-dispatch q442c@t '_))) q441e@t))) (q2efa@syntax-dispatch q441e@t '(any any)))) q4410@t))) (q2efa@syntax-dispatch q4410@t '(any any)))) q4400@t))) (q2efa@syntax-dispatch q4400@t '(any any)))) q43ee@t))) (q2efa@syntax-dispatch q43ee@t '(any . each-any)))) q43dc@t))) (q2efa@syntax-dispatch q43dc@t '(any . each-any)))) q43d2@t))) (q2efa@syntax-dispatch q43d2@t 'any))) q43d0@x*))) (set! q4353@version-pred (lambda (q4380@x*) ((lambda (q4382@t) ((lambda (q4384@ls/false) (if q4384@ls/false (apply (lambda () (lambda (q4386@x) '#t)) q4384@ls/false) ((lambda (q4388@t) ((lambda (q438a@ls/false) (if (and q438a@ls/false (apply (lambda (q438c@c q438d@ver*) (eq? (q2fe9@syntax->datum q438c@c) 'and)) q438a@ls/false)) (apply (lambda (q4390@c q4391@ver*) ((lambda (q4394@p*) (lambda (q4396@x) (for-all (lambda (q4398@p) (q4398@p q4396@x)) q4394@p*))) (map q4353@version-pred q4391@ver*))) q438a@ls/false) ((lambda (q439a@t) ((lambda (q439c@ls/false) (if (and q439c@ls/false (apply (lambda (q439e@c q439f@ver*) (eq? (q2fe9@syntax->datum q439e@c) 'or)) q439c@ls/false)) (apply (lambda (q43a2@c q43a3@ver*) ((lambda (q43a6@p*) (lambda (q43a8@x) (exists (lambda (q43aa@p) (q43aa@p q43a8@x)) q43a6@p*))) (map q4353@version-pred q43a3@ver*))) q439c@ls/false) ((lambda (q43ac@t) ((lambda (q43ae@ls/false) (if (and q43ae@ls/false (apply (lambda (q43b0@c q43b1@ver) (eq? (q2fe9@syntax->datum q43b0@c) 'not)) q43ae@ls/false)) (apply (lambda (q43b4@c q43b5@ver) ((lambda (q43b8@p) (lambda (q43ba@x) (not (q43b8@p q43ba@x)))) (q4353@version-pred q43b5@ver))) q43ae@ls/false) ((lambda (q43bc@t) ((lambda (q43be@ls/false) (if q43be@ls/false (apply (lambda (q43c0@sub*) ((lambda (q43c2@p*) (lambda (q43c4@x) ((letrec ((q43c6@f (lambda (q43c8@p* q43c9@x) (if (null? q43c8@p*) '#t (if (null? q43c9@x) '#f (and ((car q43c8@p*) (car q43c9@x)) (q43c6@f (cdr q43c8@p*) (cdr q43c9@x)))))))) q43c6@f) q43c2@p* q43c4@x))) (map q4351@subversion-pred q43c0@sub*))) q43be@ls/false) ((lambda (q43cc@t) ((lambda (q43ce@ls/false) (if q43ce@ls/false (apply (lambda () (q2fe3@syntax-violation 'import '"invalid version spec" q434c@spec q4380@x*)) q43ce@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q43cc@t))) (q2efa@syntax-dispatch q43cc@t '_))) q43bc@t))) (q2efa@syntax-dispatch q43bc@t 'each-any))) q43ac@t))) (q2efa@syntax-dispatch q43ac@t '(any any)))) q439a@t))) (q2efa@syntax-dispatch q439a@t '(any . each-any)))) q4388@t))) (q2efa@syntax-dispatch q4388@t '(any . each-any)))) q4382@t))) (q2efa@syntax-dispatch q4382@t '()))) q4380@x*))) ((letrec ((q4354@f (lambda (q4356@x) ((lambda (q4358@t) ((lambda (q435a@ls/false) (if q435a@ls/false (apply (lambda (q435c@version-spec*) (values '() (q4353@version-pred q435c@version-spec*))) q435a@ls/false) ((lambda (q435e@t) ((lambda (q4360@ls/false) (if (and q4360@ls/false (apply (lambda (q4362@x q4363@x*) (q4281@idsyn? q4362@x)) q4360@ls/false)) (apply (lambda (q4366@x q4367@x*) (call-with-values (lambda () (q4354@f q4367@x*)) (lambda (q436e@q436b q436f@q436d) ((lambda (q4372@pred q4373@name) (values (cons (q2fe9@syntax->datum q4366@x) q4373@name) q4372@pred)) q436f@q436d q436e@q436b)))) q4360@ls/false) ((lambda (q4376@t) ((lambda (q4378@ls/false) (if q4378@ls/false (apply (lambda () (values '() (lambda (q437a@x) '#t))) q4378@ls/false) ((lambda (q437c@t) ((lambda (q437e@ls/false) (if q437e@ls/false (apply (lambda () (q2fe3@syntax-violation '#f '"invalid import spec" q434c@spec)) q437e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q437c@t))) (q2efa@syntax-dispatch q437c@t '_))) q4376@t))) (q2efa@syntax-dispatch q4376@t '()))) q435e@t))) (q2efa@syntax-dispatch q435e@t '(any . any)))) q4358@t))) (q2efa@syntax-dispatch q4358@t '(each-any)))) q4356@x)))) q4354@f) q434c@spec))) '#f '#f '#f))) (set! q4291@import-library (lambda (q433c@spec*) (call-with-values (lambda () (q428f@parse-library-name q433c@spec*)) (lambda (q4342@q433f q4343@q4341) ((lambda (q4346@pred q4347@name) (begin (if (null? q4347@name) (q2fe3@syntax-violation 'import '"empty library name" q433c@spec*) (void)) ((lambda (q434a@lib) (begin (if (not q434a@lib) (q2fe3@syntax-violation 'import '"cannot find library with required name" q4347@name) (void)) (if (not (q4346@pred (q2ae4@q2956@library-version q434a@lib))) (q2fe3@syntax-violation 'import '"library does not satisfy version specification" q433c@spec* q434a@lib) (void)) ((q2f69@imp-collector) q434a@lib) (q2ae8@q295e@library-subst q434a@lib))) (q2b0c@q29a6@find-library-by-name q4347@name)))) q4343@q4341 q4342@q433f))))) (set! q4293@get-import (lambda (q42ae@spec) ((lambda (q42b0@t) ((lambda (q42b2@ls/false) (if (and q42b2@ls/false (apply (lambda (q42b4@x q42b5@x*) (not (memq (q2fe9@syntax->datum q42b4@x) '(for rename except only prefix library)))) q42b2@ls/false)) (apply (lambda (q42b8@x q42b9@x*) (q4291@import-library (cons q42b8@x q42b9@x*))) q42b2@ls/false) ((lambda (q42bc@t) ((lambda (q42be@ls/false) (if (and q42be@ls/false (apply (lambda (q42c0@rename q42c1@isp q42c2@old* q42c3@new*) (and (eq? (q2fe9@syntax->datum q42c0@rename) 'rename) (for-all q4281@idsyn? q42c2@old*) (for-all q4281@idsyn? q42c3@new*))) q42be@ls/false)) (apply (lambda (q42c8@rename q42c9@isp q42ca@old* q42cb@new*) ((lambda (q42d0@subst q42d1@old* q42d2@new*) ((lambda (q42d6@old-label*) ((lambda (q42d8@subst) (q4285@merge-substs (map cons q42d2@new* q42d6@old-label*) q42d8@subst)) (q428b@rem* q42d1@old* q42d0@subst))) (q4289@find* q42d1@old* q42d0@subst))) (q4293@get-import q42c9@isp) (map q2fe9@syntax->datum q42ca@old*) (map q2fe9@syntax->datum q42cb@new*))) q42be@ls/false) ((lambda (q42da@t) ((lambda (q42dc@ls/false) (if (and q42dc@ls/false (apply (lambda (q42de@except q42df@isp q42e0@sym*) (and (eq? (q2fe9@syntax->datum q42de@except) 'except) (for-all q4281@idsyn? q42e0@sym*))) q42dc@ls/false)) (apply (lambda (q42e4@except q42e5@isp q42e6@sym*) ((lambda (q42ea@subst) (q428b@rem* (map q2fe9@syntax->datum q42e6@sym*) q42ea@subst)) (q4293@get-import q42e5@isp))) q42dc@ls/false) ((lambda (q42ec@t) ((lambda (q42ee@ls/false) (if (and q42ee@ls/false (apply (lambda (q42f0@only q42f1@isp q42f2@sym*) (and (eq? (q2fe9@syntax->datum q42f0@only) 'only) (for-all q4281@idsyn? q42f2@sym*))) q42ee@ls/false)) (apply (lambda (q42f6@only q42f7@isp q42f8@sym*) ((lambda (q42fc@subst q42fd@sym*) ((lambda (q4300@sym*) ((lambda (q4302@lab*) (map cons q4300@sym* q4302@lab*)) (q4289@find* q4300@sym* q42fc@subst))) (q428d@remove-dups q42fd@sym*))) (q4293@get-import q42f7@isp) (map q2fe9@syntax->datum q42f8@sym*))) q42ee@ls/false) ((lambda (q4304@t) ((lambda (q4306@ls/false) (if (and q4306@ls/false (apply (lambda (q4308@prefix q4309@isp q430a@p) (and (eq? (q2fe9@syntax->datum q4308@prefix) 'prefix) (q4281@idsyn? q430a@p))) q4306@ls/false)) (apply (lambda (q430e@prefix q430f@isp q4310@p) ((lambda (q4314@subst q4315@prefix) (map (lambda (q4318@x) (cons (string->symbol (string-append q4315@prefix (symbol->string (car q4318@x)))) (cdr q4318@x))) q4314@subst)) (q4293@get-import q430f@isp) (symbol->string (q2fe9@syntax->datum q4310@p)))) q4306@ls/false) ((lambda (q431a@t) ((lambda (q431c@ls/false) (if (and q431c@ls/false (apply (lambda (q431e@library q431f@spec*) (eq? (q2fe9@syntax->datum q431e@library) 'library)) q431c@ls/false)) (apply (lambda (q4322@library q4323@spec*) (q4291@import-library q4323@spec*)) q431c@ls/false) ((lambda (q4326@t) ((lambda (q4328@ls/false) (if (and q4328@ls/false (apply (lambda (q432a@for q432b@isp q432c@rest) (eq? (q2fe9@syntax->datum q432a@for) 'for)) q4328@ls/false)) (apply (lambda (q4330@for q4331@isp q4332@rest) (q4293@get-import q4331@isp)) q4328@ls/false) ((lambda (q4336@t) ((lambda (q4338@ls/false) (if q4338@ls/false (apply (lambda (q433a@spec) (q2fe3@syntax-violation 'import '"invalid import spec" q433a@spec)) q4338@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4336@t))) (q2efa@syntax-dispatch q4336@t 'any))) q4326@t))) (q2efa@syntax-dispatch q4326@t '(any any . any)))) q431a@t))) (q2efa@syntax-dispatch q431a@t '(any each-any)))) q4304@t))) (q2efa@syntax-dispatch q4304@t '(any any any)))) q42ec@t))) (q2efa@syntax-dispatch q42ec@t '(any any . each-any)))) q42da@t))) (q2efa@syntax-dispatch q42da@t '(any any . each-any)))) q42bc@t))) (q2efa@syntax-dispatch q42bc@t '(any any . #(each (any any)))))) q42b0@t))) (q2efa@syntax-dispatch q42b0@t '(any . each-any)))) q42ae@spec))) (set! q4295@add-imports! (lambda (q429e@imp q429f@h) ((lambda (q42a2@subst) (for-each (lambda (q42a4@x) ((lambda (q42a6@name q42a7@label) ((lambda (q42aa@t) (if q42aa@t ((lambda (q42ac@l) (if (not (eq? q42ac@l q42a7@label)) (q4283@dup-error q42a6@name) (void))) q42aa@t) (hashtable-set! q429f@h q42a6@name q42a7@label))) (hashtable-ref q429f@h q42a6@name '#f))) (car q42a4@x) (cdr q42a4@x))) q42a2@subst)) (q4293@get-import q429e@imp)))) (lambda (q4296@imp*) ((letrec ((q4298@f (lambda (q429a@imp* q429b@h) (if (null? q429a@imp*) (hashtable-entries q429b@h) (begin (q4295@add-imports! (car q429a@imp*) q429b@h) (q4298@f (cdr q429a@imp*) q429b@h)))))) q4298@f) q4296@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! q2f61@make-top-rib (lambda (q448c@names q448d@labels) ((lambda (q4490@rib) (begin (vector-for-each (lambda (q4492@name q4493@label) (begin (if (not (symbol? q4492@name)) (error 'make-top-rib '"BUG: not a symbol" q4492@name) (void)) (q2ca2@extend-rib/nc! q4490@rib (q2cb9@make-stx q4492@name q2c6b@top-mark* '() '()) q4493@label))) q448c@names q448d@labels) q4490@rib)) (q2c9e@make-empty-rib)))) (set! q2f63@make-collector (lambda () ((lambda (q4496@ls) (lambda q449a ((lambda (q449b) (if (= q449b '0) (apply (lambda () q4496@ls) q449a) (if (= q449b '1) (apply (lambda (q4498@x) (set! q4496@ls (q2c64@set-cons q4498@x q4496@ls))) q449a) (error 'apply '"invalid arg count")))) (length q449a)))) '()))) (set! q2f65@inv-collector (q2899@q27c3@make-parameter (lambda q449c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (q449e@x) (begin (if (not (procedure? q449e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" q449e@x) (void)) q449e@x)))) (set! q2f67@vis-collector (q2899@q27c3@make-parameter (lambda q44a0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (q44a2@x) (begin (if (not (procedure? q44a2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" q44a2@x) (void)) q44a2@x)))) (set! q2f69@imp-collector (q2899@q27c3@make-parameter (lambda q44a4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (q44a6@x) (begin (if (not (procedure? q44a6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" q44a6@x) (void)) q44a6@x)))) (set! q2f6b@chi-library-internal (lambda (q44a8@e* q44a9@rib q44aa@top?) (call-with-values (lambda () (q2f55@chi-body* q44a8@e* '() '() '() '() '() '() '() q44a9@rib q44aa@top?)) (lambda (q44be@q44af q44bf@q44b1 q44c0@q44b3 q44c1@q44b5 q44c2@q44b7 q44c3@q44b9 q44c4@q44bb q44c5@q44bd) ((lambda (q44ce@exp* q44cf@_kwd* q44d0@mod** q44d1@rhs* q44d2@lex* q44d3@mr q44d4@r q44d5@e*) (values (append (apply append (reverse q44d0@mod**)) q44d5@e*) q44d4@r q44d3@mr (reverse q44d2@lex*) (reverse q44d1@rhs*) q44ce@exp*)) q44c5@q44bd q44c4@q44bb q44c3@q44b9 q44c2@q44b7 q44c1@q44b5 q44c0@q44b3 q44bf@q44b1 q44be@q44af))))) (set! q2f6d@chi-interaction-expr (lambda (q44de@e q44df@rib q44e0@r) (call-with-values (lambda () (q2f55@chi-body* (list q44de@e) q44e0@r q44e0@r '() '() '() '() '() q44df@rib '#t)) (lambda (q44f4@q44e5 q44f5@q44e7 q44f6@q44e9 q44f7@q44eb q44f8@q44ed q44f9@q44ef q44fa@q44f1 q44fb@q44f3) ((lambda (q4504@_exp* q4505@_kwd* q4506@mod** q4507@rhs* q4508@lex* q4509@mr q450a@r q450b@e*) ((lambda (q4514@e*) ((lambda (q4516@e) (values q4516@e q450a@r)) (if (null? q4514@e*) (q2c4f@q2bbf@build-void) (if (null? (cdr q4514@e*)) (car q4514@e*) (q2c4e@q2bbd@build-sequence '#f q4514@e*))))) (q2f2a@expand-interaction-rhs*/init* (reverse q4508@lex*) (reverse q4507@rhs*) (append (apply append (reverse q4506@mod**)) q450b@e*) q450a@r q4509@mr))) q44fb@q44f3 q44fa@q44f1 q44f9@q44ef q44f8@q44ed q44f7@q44eb q44f6@q44e9 q44f5@q44e7 q44f4@q44e5))))) (set! q2f6f@library-body-expander (lambda (q4518@name q4519@main-exp* q451a@imp* q451b@b* q451c@top?) ((lambda (q4523@itc) (begin (set! q4523@itc (q2f63@make-collector)) ((lambda (q452c@q4525 q452d@q4527 q452e@q4529 q452f@q452b) ((lambda (q4534@swap) (dynamic-wind q4534@swap (lambda () (call-with-values (lambda () (q2f5f@parse-import-spec* q451a@imp*)) (lambda (q453a@q4537 q453b@q4539) ((lambda (q453e@subst-labels q453f@subst-names) ((lambda (q4542@rib) ((lambda (q4545@wrap) (begin (set! q4545@wrap (lambda (q45c0@x) (q2cb9@make-stx q45c0@x q2c6b@top-mark* (list q4542@rib) '()))) ((lambda (q4546@b* q4547@main-exp* q4548@rtc q4549@vtc) ((lambda (q4556@q454f q4557@q4551 q4558@q4553 q4559@q4555) ((lambda (q455e@swap) (dynamic-wind q455e@swap (lambda () (call-with-values (lambda () (q2f6b@chi-library-internal q4546@b* q4542@rib q451c@top?)) (lambda (q456c@q4561 q456d@q4563 q456e@q4565 q456f@q4567 q4570@q4569 q4571@q456b) ((lambda (q4578@internal-exp* q4579@rhs* q457a@lex* q457b@mr q457c@r q457d@init*) (call-with-values (lambda () (q2f59@parse-exports (append q4547@main-exp* q4578@internal-exp*))) (lambda (q4588@q4585 q4589@q4587) ((lambda (q458c@exp-id* q458d@exp-name*) (begin (q2ca6@seal-rib! q4542@rib) ((lambda (q4590@init*) ((lambda (q4592@rhs*) ((lambda () (begin (q2ca8@unseal-rib! q4542@rib) ((lambda (q4594@loc* q4595@export-subst) ((lambda (q4599@errstr) (begin (set! q4599@errstr '"attempt to export mutated variable") (call-with-values (lambda () (q2fcf@make-export-env/macros q457a@lex* q4594@loc* q457c@r)) (lambda (q45a0@q459b q45a1@q459d q45a2@q459f) ((lambda (q45a6@macro* q45a7@global* q45a8@export-env) (begin (for-each (lambda (q45ac@s) ((lambda (q45ae@name q45af@label) ((lambda (q45b2@p) (if q45b2@p ((lambda (q45b4@b) ((lambda (q45b6@type) (if (eq? q45b6@type 'mutable) (q2fe3@syntax-violation 'export q4599@errstr q45ae@name) (void))) (car q45b4@b))) (cdr q45b2@p)) (void))) (assq q45af@label q45a8@export-env))) (car q45ac@s) (cdr q45ac@s))) q4595@export-subst) ((lambda (q45b8@invoke-body q45b9@invoke-definitions) (values (q4523@itc) (q4548@rtc) (q4549@vtc) (q2c4e@q2bbd@build-sequence '#f (append q45b9@invoke-definitions (list q45b8@invoke-body))) q45a6@macro* q4595@export-subst q45a8@export-env)) (q2c51@q2bc3@build-letrec* '#f q457a@lex* q4592@rhs* (q2fcb@build-exports q45a7@global* q4590@init*)) (map q2c4a@q2b1a@build-global-define (map cdr q45a7@global*))))) q45a2@q459f q45a1@q459d q45a0@q459b))))) '#f)) (map q2c71@gen-global q457a@lex*) (q2fcd@make-export-subst q458d@exp-name* q458c@exp-id*)))))) (q2f2c@chi-rhs* q4579@rhs* q457c@r q457b@mr))) (q2f18@chi-expr* q457d@init* q457c@r q457b@mr)))) q4589@q4587 q4588@q4585)))) q4571@q456b q4570@q4569 q456f@q4567 q456e@q4565 q456d@q4563 q456c@q4561)))) q455e@swap)) (lambda () (begin ((lambda (q45bc@t) (begin (q4556@q454f q4558@q4553) (set! q4558@q4553 q45bc@t))) (q4556@q454f)) ((lambda (q45be@t) (begin (q4557@q4551 q4559@q4555) (set! q4559@q4555 q45be@t))) (q4557@q4551)))))) q2f65@inv-collector q2f67@vis-collector q4548@rtc q4549@vtc)) (map q4545@wrap q451b@b*) (map q4545@wrap q4519@main-exp*) (q2f63@make-collector) (q2f63@make-collector)))) '#f)) (q2f61@make-top-rib q453f@subst-names q453e@subst-labels))) q453b@q4539 q453a@q4537)))) q4534@swap)) (lambda () (begin ((lambda (q45c2@t) (begin (q452c@q4525 q452e@q4529) (set! q452e@q4529 q45c2@t))) (q452c@q4525)) ((lambda (q45c4@t) (begin (q452d@q4527 q452f@q452b) (set! q452f@q452b q45c4@t))) (q452d@q4527)))))) q2f69@imp-collector q2ff1@top-level-context q4523@itc '#f))) '#f))) (set! q2f71@core-library-expander (lambda (q45c6@e q45c7@verify-name) (call-with-values (lambda () (q2f5d@parse-library q45c6@e)) (lambda (q45d2@q45cb q45d3@q45cd q45d4@q45cf q45d5@q45d1) ((lambda (q45da@b* q45db@imp* q45dc@exp* q45dd@name*) (call-with-values (lambda () (q2f5b@parse-library-name q45dd@name*)) (lambda (q45e6@q45e3 q45e7@q45e5) ((lambda (q45ea@ver q45eb@name) (begin (q45c7@verify-name q45eb@name) (call-with-values (lambda () (q2f6f@library-body-expander q45eb@name q45dc@exp* q45db@imp* q45da@b* '#f)) (lambda (q45fc@q45ef q45fd@q45f1 q45fe@q45f3 q45ff@q45f5 q4600@q45f7 q4601@q45f9 q4602@q45fb) ((lambda (q460a@export-env q460b@export-subst q460c@visit-code q460d@invoke-code q460e@visit-req* q460f@invoke-req* q4610@imp*) (values q45eb@name q45ea@ver q4610@imp* q460f@invoke-req* q460e@visit-req* q460d@invoke-code q460c@visit-code q460b@export-subst q460a@export-env)) q4602@q45fb q4601@q45f9 q4600@q45f7 q45ff@q45f5 q45fe@q45f3 q45fd@q45f1 q45fc@q45ef))))) q45e7@q45e5 q45e6@q45e3)))) q45d5@q45d1 q45d4@q45cf q45d3@q45cd q45d2@q45cb))))) (set! q2f73@parse-top-level-program (lambda (q4618@e*) ((lambda (q461a@t) ((lambda (q461c@ls/false) (if (and q461c@ls/false (apply (lambda (q461e@import q461f@imp* q4620@b*) (eq? (q2fe9@syntax->datum q461e@import) 'import)) q461c@ls/false)) (apply (lambda (q4624@import q4625@imp* q4626@b*) (values q4625@imp* q4626@b*)) q461c@ls/false) ((lambda (q462a@t) ((lambda (q462c@ls/false) (if (and q462c@ls/false (apply (lambda (q462e@import q462f@x q4630@y) (eq? (q2fe9@syntax->datum q462e@import) 'import)) q462c@ls/false)) (apply (lambda (q4634@import q4635@x q4636@y) (q2fe3@syntax-violation 'expander '"invalid syntax of top-level program" (q2ce9@syntax-car q4618@e*))) q462c@ls/false) ((lambda (q463a@t) ((lambda (q463c@ls/false) (if q463c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) q463c@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q463a@t))) (q2efa@syntax-dispatch q463a@t '_))) q462a@t))) (q2efa@syntax-dispatch q462a@t '((any . any) . any)))) q461a@t))) (q2efa@syntax-dispatch q461a@t '((any . each-any) . each-any)))) q4618@e*))) (set! q2f75@top-level-expander (lambda (q463e@e*) (call-with-values (lambda () (q2f73@parse-top-level-program q463e@e*)) (lambda (q4644@q4641 q4645@q4643) ((lambda (q4648@b* q4649@imp*) (call-with-values (lambda () (q2f6f@library-body-expander '() '() q4649@imp* q4648@b* '#t)) (lambda (q465a@q464d q465b@q464f q465c@q4651 q465d@q4653 q465e@q4655 q465f@q4657 q4660@q4659) ((lambda (q4668@export-env q4669@export-subst q466a@visit-code q466b@invoke-code q466c@visit-req* q466d@invoke-req* q466e@imp*) (values q466d@invoke-req* q466b@invoke-code)) q4660@q4659 q465f@q4657 q465e@q4655 q465d@q4653 q465c@q4651 q465b@q464f q465a@q464d)))) q4645@q4643 q4644@q4641))))) (set! q2f7b@q2f76 (make-record-type-descriptor 'env '#f 'q2f79 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! q2f7d@q2f78 '#f) (set! q2f7f@q2f77 (make-record-constructor-descriptor q2f7b@q2f76 '#f q2f7d@q2f78)) (set! q2f82@env? (record-predicate q2f7b@q2f76)) (set! q2f84@make-env (record-constructor q2f7f@q2f77)) (set! q2f86@env-names (record-accessor q2f7b@q2f76 '0)) (set! q2f88@env-labels (record-accessor q2f7b@q2f76 '1)) (set! q2f8a@env-itc (record-accessor q2f7b@q2f76 '2)) (set! q2f8c@set-env-names! (record-mutator q2f7b@q2f76 '0)) (set! q2f8e@set-env-labels! (record-mutator q2f7b@q2f76 '1)) (set! q2f90@set-env-itc! (record-mutator q2f7b@q2f76 '2)) (set! q2f92@rp (q2896@q27bd@make-record-printer 'env (lambda (q4676@x q4677@p q4678@wr) (display '"#<environment>" q4677@p)))) (set! q2f98@q2f93 (make-record-type-descriptor 'interaction-env '#f 'q2f96 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! q2f9a@q2f95 '#f) (set! q2f9c@q2f94 (make-record-constructor-descriptor q2f98@q2f93 '#f q2f9a@q2f95)) (set! q2f9f@interaction-env? (record-predicate q2f98@q2f93)) (set! q2fa1@make-interaction-env (record-constructor q2f9c@q2f94)) (set! q2fa3@interaction-env-rib (record-accessor q2f98@q2f93 '0)) (set! q2fa5@interaction-env-r (record-accessor q2f98@q2f93 '1)) (set! q2fa7@interaction-env-locs (record-accessor q2f98@q2f93 '2)) (set! q2fa9@set-interaction-env-rib! (record-mutator q2f98@q2f93 '0)) (set! q2fab@set-interaction-env-r! (record-mutator q2f98@q2f93 '1)) (set! q2fad@set-interaction-env-locs! (record-mutator q2f98@q2f93 '2)) (set! q2faf@rp (q2896@q27bd@make-record-printer 'interaction-env (lambda (q467c@x q467d@p q467e@wr) (display '"#<environment>" q467d@p)))) (set! q2fb1@interaction-environment-symbols (lambda () (q2fb9@environment-symbols (q2fef@interaction-environment)))) (set! q2fb3@environment-bindings (lambda (q4682@e) (vector->list (vector-map (lambda (q4684@name q4685@label) (q2fb5@parse-binding (cons q4684@name (q2b12@q29b2@imported-label->binding q4685@label)))) (q2f86@env-names q4682@e) (q2f88@env-labels q4682@e))))) (set! q2fb5@parse-binding (lambda (q4688@b) (cons (car q4688@b) ((lambda (q468a@t) (if (memv q468a@t '(core-prim global)) 'procedure (if (memv q468a@t '(core-macro macro global-macro)) 'syntax (if (memv q468a@t '($core-rtd)) 'record (if (eq? (car q4688@b) (cadr q4688@b)) 'syntax 'unknown))))) (cadr q4688@b))))) (set! q2fb7@environment? (lambda (q468c@x) (or (q2f82@env? q468c@x) (q2f9f@interaction-env? q468c@x)))) (set! q2fb9@environment-symbols (lambda (q468e@x) (if (q2f82@env? q468e@x) (vector->list (q2f86@env-names q468e@x)) (if (q2f9f@interaction-env? q468e@x) (map values (q2c8a@rib-sym* (q2fa3@interaction-env-rib q468e@x))) (assertion-violation 'environment-symbols '"not an environment" q468e@x))))) (set! q2fbb@environment (lambda q4690@imp* ((lambda (q4692@itc) ((lambda (q4698@q4695 q4699@q4697) ((lambda (q469c@swap) (dynamic-wind q469c@swap (lambda () (call-with-values (lambda () (q2f5f@parse-import-spec* q4690@imp*)) (lambda (q46a2@q469f q46a3@q46a1) ((lambda (q46a6@subst-labels q46a7@subst-names) (q2f84@make-env q46a7@subst-names q46a6@subst-labels q4692@itc)) q46a3@q46a1 q46a2@q469f)))) q469c@swap)) (lambda () ((lambda (q46aa@t) (begin (q4698@q4695 q4699@q4697) (set! q4699@q4697 q46aa@t))) (q4698@q4695))))) q2f69@imp-collector q4692@itc)) (q2f63@make-collector)))) (set! q2fbd@null-environment (lambda (q46ac@n) (begin (if (not (eqv? q46ac@n '5)) (assertion-violation 'null-environment '"not 5" q46ac@n) (void)) (q2fbb@environment '(psyntax null-environment-5))))) (set! q2fbf@scheme-report-environment (lambda (q46ae@n) (begin (if (not (eqv? q46ae@n '5)) (assertion-violation 'scheme-report-environment '"not 5" q46ae@n) (void)) (q2fbb@environment '(psyntax scheme-report-environment-5))))) (set! q2fc1@expand (lambda (q46b0@x q46b1@env) (if (q2f82@env? q46b1@env) ((lambda (q46b4@rib) ((lambda (q46b6@x q46b7@itc q46b8@rtc q46b9@vtc) ((lambda (q46be@x) (begin (q2ca6@seal-rib! q46b4@rib) (values q46be@x (q46b8@rtc)))) ((lambda (q46d0@q46c1 q46d1@q46c3 q46d2@q46c5 q46d3@q46c7 q46d4@q46c9 q46d5@q46cb q46d6@q46cd q46d7@q46cf) ((lambda (q46e0@swap) (dynamic-wind q46e0@swap (lambda () (q2f1c@chi-expr q46b6@x '() '())) q46e0@swap)) (lambda () (begin ((lambda (q46e2@t) (begin (q46d0@q46c1 q46d4@q46c9) (set! q46d4@q46c9 q46e2@t))) (q46d0@q46c1)) ((lambda (q46e4@t) (begin (q46d1@q46c3 q46d5@q46cb) (set! q46d5@q46cb q46e4@t))) (q46d1@q46c3)) ((lambda (q46e6@t) (begin (q46d2@q46c5 q46d6@q46cd) (set! q46d6@q46cd q46e6@t))) (q46d2@q46c5)) ((lambda (q46e8@t) (begin (q46d3@q46c7 q46d7@q46cf) (set! q46d7@q46cf q46e8@t))) (q46d3@q46c7)))))) q2ff1@top-level-context q2f65@inv-collector q2f67@vis-collector q2f69@imp-collector '#f q46b8@rtc q46b9@vtc q46b7@itc))) (q2cb9@make-stx q46b0@x q2c6b@top-mark* (list q46b4@rib) '()) (q2f8a@env-itc q46b1@env) (q2f63@make-collector) (q2f63@make-collector))) (q2f61@make-top-rib (q2f86@env-names q46b1@env) (q2f88@env-labels q46b1@env))) (if (q2f9f@interaction-env? q46b1@env) ((lambda (q46ea@rib q46eb@r q46ec@rtc) ((lambda (q46f0@x) (call-with-values (lambda () ((lambda (q4706@q46f7 q4707@q46f9 q4708@q46fb q4709@q46fd q470a@q46ff q470b@q4701 q470c@q4703 q470d@q4705) ((lambda (q4716@swap) (dynamic-wind q4716@swap (lambda () (q2f6d@chi-interaction-expr q46f0@x q46ea@rib q46eb@r)) q4716@swap)) (lambda () (begin ((lambda (q4718@t) (begin (q4706@q46f7 q470a@q46ff) (set! q470a@q46ff q4718@t))) (q4706@q46f7)) ((lambda (q471a@t) (begin (q4707@q46f9 q470b@q4701) (set! q470b@q4701 q471a@t))) (q4707@q46f9)) ((lambda (q471c@t) (begin (q4708@q46fb q470c@q4703) (set! q470c@q4703 q471c@t))) (q4708@q46fb)) ((lambda (q471e@t) (begin (q4709@q46fd q470d@q4705) (set! q470d@q4705 q471e@t))) (q4709@q46fd)))))) q2ff1@top-level-context q2f65@inv-collector q2f67@vis-collector q2f69@imp-collector q46b1@env q46ec@rtc (q2f63@make-collector) (q2f63@make-collector))) (lambda (q4720@q46f3 q4721@q46f5) ((lambda (q4724@r^ q4725@e) (begin (q2fab@set-interaction-env-r! q46b1@env q4724@r^) (values q4725@e (q46ec@rtc)))) q4721@q46f5 q4720@q46f3)))) (q2cb9@make-stx q46b0@x q2c6b@top-mark* (list q46ea@rib) '()))) (q2fa3@interaction-env-rib q46b1@env) (q2fa5@interaction-env-r q46b1@env) (q2f63@make-collector)) (assertion-violation 'expand '"not an environment" q46b1@env))))) (set! q2fc3@eval (lambda (q4728@x q4729@env) (begin (if (not (q2fb7@environment? q4729@env)) (error 'eval '"not an environment" q4729@env) (void)) (call-with-values (lambda () (q2fc1@expand q4728@x q4729@env)) (lambda (q4730@q472d q4731@q472f) ((lambda (q4734@invoke-req* q4735@x) (begin (for-each q2b13@q29b4@invoke-library q4734@invoke-req*) (eval-core (q28ed@q28a5@expanded->core q4735@x)))) q4731@q472f q4730@q472d)))))) (set! q2fc5@library-expander (lambda q47a6 ((lambda (q47a7) (if (= q47a7 '3) (apply (lambda (q4738@x q4739@filename q473a@verify-name) ((lambda (q473f@build-visit-code q4741@visit!) (begin (set! q473f@build-visit-code (lambda (q4794@macro*) (if (null? q4794@macro*) (q2c4f@q2bbf@build-void) (q2c4e@q2bbd@build-sequence '#f (map (lambda (q4796@x) ((lambda (q4798@loc q4799@src) (list 'set! q4798@loc q4799@src)) (car q4796@x) (cddr q4796@x))) q4794@macro*))))) (set! q4741@visit! (lambda (q478c@macro*) (for-each (lambda (q478e@x) ((lambda (q4790@loc q4791@proc) (set-symbol-value! q4790@loc q4791@proc)) (car q478e@x) (cadr q478e@x))) q478c@macro*))) (call-with-values (lambda () (q2f71@core-library-expander q4738@x q473a@verify-name)) (lambda (q4754@q4743 q4755@q4745 q4756@q4747 q4757@q4749 q4758@q474b q4759@q474d q475a@q474f q475b@q4751 q475c@q4753) ((lambda (q4766@export-env q4767@export-subst q4768@macro* q4769@invoke-code q476a@vis* q476b@inv* q476c@imp* q476d@ver q476e@name) ((lambda (q4778@id q4779@name q477a@ver q477b@imp* q477c@vis* q477d@inv* q477e@visit-proc q477f@invoke-proc q4780@visit-code q4781@invoke-code) (begin (q2b11@q29b0@install-library q4778@id q4779@name q477a@ver q477b@imp* q477c@vis* q477d@inv* q4767@export-subst q4766@export-env q477e@visit-proc q477f@invoke-proc q4780@visit-code q4781@invoke-code '#t q4739@filename) (values q4778@id q4779@name q477a@ver q477b@imp* q477c@vis* q477d@inv* q4781@invoke-code q4780@visit-code q4767@export-subst q4766@export-env))) (gensym) q476e@name q476d@ver (map q2b17@q29bc@library-spec q476c@imp*) (map q2b17@q29bc@library-spec q476a@vis*) (map q2b17@q29bc@library-spec q476b@inv*) (lambda () (q4741@visit! q4768@macro*)) (lambda () (eval-core (q28ed@q28a5@expanded->core q4769@invoke-code))) (q473f@build-visit-code q4768@macro*) q4769@invoke-code)) q475c@q4753 q475b@q4751 q475a@q474f q4759@q474d q4758@q474b q4757@q4749 q4756@q4747 q4755@q4745 q4754@q4743))))) '#f '#f)) q47a6) (if (= q47a7 '2) (apply (lambda (q479c@x q479d@filename) (q2fc5@library-expander q479c@x q479d@filename (lambda (q47a0@x) (values)))) q47a6) (if (= q47a7 '1) (apply (lambda (q47a2@x) (q2fc5@library-expander q47a2@x '#f (lambda (q47a4@x) (values)))) q47a6) (error 'apply '"invalid arg count"))))) (length q47a6)))) (set! q2fc7@boot-library-expand (lambda (q47a8@x) (call-with-values (lambda () (q2fc5@library-expander q47a8@x)) (lambda (q47be@q47ab q47bf@q47ad q47c0@q47af q47c1@q47b1 q47c2@q47b3 q47c3@q47b5 q47c4@q47b7 q47c5@q47b9 q47c6@q47bb q47c7@q47bd) ((lambda (q47d2@export-env q47d3@export-subst q47d4@visit-code q47d5@invoke-code q47d6@inv* q47d7@vis* q47d8@imp* q47d9@ver q47da@name q47db@id) (values q47da@name q47d5@invoke-code q47d3@export-subst q47d2@export-env)) q47c7@q47bd q47c6@q47bb q47c5@q47b9 q47c4@q47b7 q47c3@q47b5 q47c2@q47b3 q47c1@q47b1 q47c0@q47af q47bf@q47ad q47be@q47ab))))) (set! q2fc9@rev-map-append (lambda (q47e6@f q47e7@ls q47e8@ac) (if (null? q47e7@ls) q47e8@ac (q2fc9@rev-map-append q47e6@f (cdr q47e7@ls) (cons (q47e6@f (car q47e7@ls)) q47e8@ac))))) (set! q2fcb@build-exports (lambda (q47ec@lex*+loc* q47ed@init*) (q2c4e@q2bbd@build-sequence '#f (cons (q2c4f@q2bbf@build-void) (q2fc9@rev-map-append (lambda (q47f0@x) (list 'set! (cdr q47f0@x) (car q47f0@x))) q47ec@lex*+loc* q47ed@init*))))) (set! q2fcd@make-export-subst (lambda (q47f2@name* q47f3@id*) (map (lambda (q47f6@name q47f7@id) ((lambda (q47fa@label) (begin (if (not q47fa@label) (q2fe3@syntax-violation '#f '"cannot export unbound identifier" q47f7@id) (void)) (cons q47f6@name q47fa@label))) (q2d09@id->label q47f7@id))) q47f2@name* q47f3@id*))) (set! q2fcf@make-export-env/macros (lambda (q47fc@lex* q47fd@loc* q47fe@r) ((lambda (q4803@lookup) (begin (set! q4803@lookup (lambda (q4820@x) ((letrec ((q4822@f (lambda (q4824@x q4825@lex* q4826@loc*) (if (pair? q4825@lex*) (if (eq? q4824@x (car q4825@lex*)) (car q4826@loc*) (q4822@f q4824@x (cdr q4825@lex*) (cdr q4826@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) q4822@f) q4820@x q47fc@lex* q47fd@loc*))) ((letrec ((q4804@f (lambda (q4806@r q4807@env q4808@global* q4809@macro*) (if (null? q4806@r) (values q4807@env q4808@global* q4809@macro*) ((lambda (q480e@x) ((lambda (q4810@label q4811@b) ((lambda (q4814@t) (if (memv q4814@t '(lexical)) ((lambda (q4816@v) ((lambda (q4818@loc q4819@type) (q4804@f (cdr q4806@r) (cons (cons* q4810@label q4819@type q4818@loc) q4807@env) (cons (cons (q2e86@lexical-var q4816@v) q4818@loc) q4808@global*) q4809@macro*)) (q4803@lookup (q2e86@lexical-var q4816@v)) (if (q2e88@lexical-mutable? q4816@v) 'mutable 'global))) (q2d13@binding-value q4811@b)) (if (memv q4814@t '(local-macro)) ((lambda (q481c@loc) (q4804@f (cdr q4806@r) (cons (cons* q4810@label 'global-macro q481c@loc) q4807@env) q4808@global* (cons (cons q481c@loc (q2d13@binding-value q4811@b)) q4809@macro*))) (gensym)) (if (memv q4814@t '(local-macro!)) ((lambda (q481e@loc) (q4804@f (cdr q4806@r) (cons (cons* q4810@label 'global-macro! q481e@loc) q4807@env) q4808@global* (cons (cons q481e@loc (q2d13@binding-value q4811@b)) q4809@macro*))) (gensym)) (if (memv q4814@t '($rtd $module)) (q4804@f (cdr q4806@r) (cons q480e@x q4807@env) q4808@global* q4809@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (q2d11@binding-type q4811@b) (q2d13@binding-value q4811@b))))))) (q2d11@binding-type q4811@b))) (car q480e@x) (cdr q480e@x))) (car q4806@r)))))) q4804@f) q47fe@r '() '() '()))) '#f))) (set! q2fd1@generate-temporaries (lambda (q482a@ls) ((lambda (q482c@t) ((lambda (q482e@ls/false) (if q482e@ls/false (apply (lambda (q4830@ls) (map (lambda (q4832@x) (q2cb9@make-stx ((lambda (q4834@x) (if (or (symbol? q4834@x) (string? q4834@x)) (gensym q4834@x) (gensym 't))) (q2fe9@syntax->datum q4832@x)) q2c6b@top-mark* '() '())) q4830@ls)) q482e@ls/false) ((lambda (q4836@t) ((lambda (q4838@ls/false) (if q4838@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) q4838@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q4836@t))) (q2efa@syntax-dispatch q4836@t '_))) q482c@t))) (q2efa@syntax-dispatch q482c@t 'each-any))) q482a@ls))) (set! q2fd3@free-identifier=? (lambda (q483a@x q483b@y) (if (q2cef@id? q483a@x) (if (q2cef@id? q483b@y) (q2cf7@free-id=? q483a@x q483b@y) (assertion-violation 'free-identifier=? '"not an identifier" q483b@y)) (assertion-violation 'free-identifier=? '"not an identifier" q483a@x)))) (set! q2fd5@bound-identifier=? (lambda (q483e@x q483f@y) (if (q2cef@id? q483e@x) (if (q2cef@id? q483f@y) (q2cf5@bound-id=? q483e@x q483f@y) (assertion-violation 'bound-identifier=? '"not an identifier" q483f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" q483e@x)))) (set! q2fd7@make-source-condition (lambda (q4842@x) ((lambda (q484c@q4847 q484e@q4849 q4850@q4848 q4853@q4846 q4855@make-source-condition q4857@q4844 q4859@q4845 q485b@source-condition? q485d@source-filename q485f@source-character) (begin (set! q484c@q4847 (make-record-type-descriptor '&source-information q4caa@q49f1@&condition-rtd 'q484a '#f '#f '#((immutable file-name) (immutable character)))) (set! q484e@q4849 '#f) (set! q4850@q4848 (make-record-constructor-descriptor q484c@q4847 q4cab@q49f3@&condition-rcd q484e@q4849)) (set! q4853@q4846 (record-predicate q484c@q4847)) (set! q4855@make-source-condition (record-constructor q4850@q4848)) (set! q4857@q4844 (record-accessor q484c@q4847 '0)) (set! q4859@q4845 (record-accessor q484c@q4847 '1)) (set! q485b@source-condition? (condition-predicate q484c@q4847)) (set! q485d@source-filename (condition-accessor q484c@q4847 q4857@q4844)) (set! q485f@source-character (condition-accessor q484c@q4847 q4859@q4845)) (if (pair? q4842@x) (q4855@make-source-condition (car q4842@x) (cdr q4842@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! q2fd9@extract-position-condition (lambda (q4860@x) (q2fd7@make-source-condition (q2fdb@expression-position q4860@x)))) (set! q2fdb@expression-position (lambda (q4862@x) (and (q2cb7@stx? q4862@x) ((lambda (q4864@x) (and (q288e@q27ad@annotation? q4864@x) (q288f@q27af@annotation-source q4864@x))) (q2cbb@stx-expr q4862@x))))) (set! q2fdd@assertion-error (lambda (q4866@expr q4867@pos) (raise (condition (q4cda@q4ab5@make-assertion-violation) (q4cec@q4ae7@make-who-condition 'assert) (q4cb0@q4a48@make-message-condition '"assertion failed") (q4ce2@q4acc@make-irritants-condition (list q4866@expr)) (q2fd7@make-source-condition q4867@pos))))) (set! q2fdf@syntax-error (lambda (q486a@x . q486c@args) (begin (if (not (for-all string? q486c@args)) (assertion-violation 'syntax-error '"invalid argument" q486c@args) (void)) (raise (condition (q4cb0@q4a48@make-message-condition (if (null? q486c@args) '"invalid syntax" (apply string-append q486c@args))) (q4d0e@q4b43@make-syntax-violation (q2fe9@syntax->datum q486a@x) '#f) (q2fd9@extract-position-condition q486a@x)))))) (set! q2fe1@syntax-violation* (lambda (q486e@who q486f@msg q4870@form q4871@condition-object) (begin (if (not (string? q486f@msg)) (assertion-violation 'syntax-violation '"message is not a string" q486f@msg) (void)) ((lambda (q4876@who) (raise (condition (if q4876@who (q4cec@q4ae7@make-who-condition q4876@who) (condition)) (q4cb0@q4a48@make-message-condition q486f@msg) q4871@condition-object (q2fd9@extract-position-condition q4870@form)))) (if (or (string? q486e@who) (symbol? q486e@who)) q486e@who (if (not q486e@who) ((lambda (q4878@t) ((lambda (q487a@ls/false) (if (and q487a@ls/false (apply (lambda (q487c@id) (q2cef@id? q487c@id)) q487a@ls/false)) (apply (lambda (q487e@id) (q2fe9@syntax->datum q487e@id)) q487a@ls/false) ((lambda (q4880@t) ((lambda (q4882@ls/false) (if (and q4882@ls/false (apply (lambda (q4884@id q4885@rest) (q2cef@id? q4884@id)) q4882@ls/false)) (apply (lambda (q4888@id q4889@rest) (q2fe9@syntax->datum q4888@id)) q4882@ls/false) ((lambda (q488c@t) ((lambda (q488e@ls/false) (if q488e@ls/false (apply (lambda () '#f) q488e@ls/false) (q2fe3@syntax-violation '#f '"invalid syntax" q488c@t))) (q2efa@syntax-dispatch q488c@t '_))) q4880@t))) (q2efa@syntax-dispatch q4880@t '(any . any)))) q4878@t))) (q2efa@syntax-dispatch q4878@t 'any))) q4870@form) (assertion-violation 'syntax-violation '"invalid who argument" q486e@who))))))) (set! q2fe3@syntax-violation (lambda q489e ((lambda (q489f) (if (= q489f '3) (apply (lambda (q4890@who q4891@msg q4892@form) (q2fe3@syntax-violation q4890@who q4891@msg q4892@form '#f)) q489e) (if (= q489f '4) (apply (lambda (q4896@who q4897@msg q4898@form q4899@subform) (q2fe1@syntax-violation* q4896@who q4897@msg q4898@form (q4d0e@q4b43@make-syntax-violation (q2fe9@syntax->datum q4898@form) (q2fe9@syntax->datum q4899@subform)))) q489e) (error 'apply '"invalid arg count")))) (length q489e)))) (set! q2fe5@identifier? (lambda (q48a0@x) (q2cef@id? q48a0@x))) (set! q2fe7@datum->syntax (lambda (q48a2@id q48a3@datum) (if (q2cef@id? q48a2@id) (q2ccd@datum->stx q48a2@id q48a3@datum) (assertion-violation 'datum->syntax '"not an identifier" q48a2@id)))) (set! q2fe9@syntax->datum (lambda (q48a6@x) (q2d05@stx->datum q48a6@x))) (set! q2feb@compile-r6rs-top-level (lambda (q48a8@x*) (call-with-values (lambda () (q2f75@top-level-expander q48a8@x*)) (lambda (q48ae@q48ab q48af@q48ad) ((lambda (q48b2@invoke-code q48b3@lib*) (lambda () (begin (for-each q2b13@q29b4@invoke-library q48b3@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (q28ed@q28a5@expanded->core q48b2@invoke-code)) (void)) (eval-core (q28ed@q28a5@expanded->core q48b2@invoke-code))))) q48af@q48ad q48ae@q48ab))))) (set! q2fed@pre-compile-r6rs-top-level (lambda (q48b6@x*) (call-with-values (lambda () (q2f75@top-level-expander q48b6@x*)) (lambda (q48bc@q48b9 q48bd@q48bb) ((lambda (q48c0@invoke-code q48c1@lib*) (begin (for-each q2b13@q29b4@invoke-library q48c1@lib*) (q2897@q27bf@compile-core (q28ed@q28a5@expanded->core q48c0@invoke-code)))) q48bd@q48bb q48bc@q48b9))))) (set! q2fef@interaction-environment ((lambda (q48c4@the-env) (lambda () (or q48c4@the-env ((lambda (q48c6@lib q48c7@rib) (begin ((lambda (q48ca@subst) (begin (q2c94@set-rib-sym*! q48c7@rib (map car q48ca@subst)) (q2c96@set-rib-mark**! q48c7@rib (map (lambda (q48cc@x) q2c6b@top-mark*) q48ca@subst)) (q2c98@set-rib-label*! q48c7@rib (map cdr q48ca@subst)))) (q2ae8@q295e@library-subst q48c6@lib)) ((lambda (q48ce@env) (begin (set! q48c4@the-env q48ce@env) q48ce@env)) (q2fa1@make-interaction-env q48c7@rib '() '())))) (q2b0c@q29a6@find-library-by-name '(mosh interaction)) (q2c9e@make-empty-rib))))) '#f)) (set! q2ff1@top-level-context (q2899@q27c3@make-parameter '#f)) (begin (set! q49dc@q2ff1@top-level-context q2ff1@top-level-context) (set! q49db@q2fef@interaction-environment q2fef@interaction-environment) (set! q49da@q2fed@pre-compile-r6rs-top-level q2fed@pre-compile-r6rs-top-level) (set! q49d9@q2feb@compile-r6rs-top-level q2feb@compile-r6rs-top-level) (set! q49d8@q2fe9@syntax->datum q2fe9@syntax->datum) (set! q49d7@q2fe7@datum->syntax q2fe7@datum->syntax) (set! q49d6@q2fe5@identifier? q2fe5@identifier?) (set! q49d5@q2fe3@syntax-violation q2fe3@syntax-violation) (set! q49d4@q2fe1@syntax-violation* q2fe1@syntax-violation*) (set! q49d3@q2fdf@syntax-error q2fdf@syntax-error) (set! q49d2@q2fdd@assertion-error q2fdd@assertion-error) (set! q49d1@q2fdb@expression-position q2fdb@expression-position) (set! q49d0@q2fd9@extract-position-condition q2fd9@extract-position-condition) (set! q49cf@q2fd7@make-source-condition q2fd7@make-source-condition) (set! q49ce@q2fd5@bound-identifier=? q2fd5@bound-identifier=?) (set! q49cd@q2fd3@free-identifier=? q2fd3@free-identifier=?) (set! q49cc@q2fd1@generate-temporaries q2fd1@generate-temporaries) (set! q49cb@q2fcf@make-export-env/macros q2fcf@make-export-env/macros) (set! q49ca@q2fcd@make-export-subst q2fcd@make-export-subst) (set! q49c9@q2fcb@build-exports q2fcb@build-exports) (set! q49c8@q2fc9@rev-map-append q2fc9@rev-map-append) (set! q49c7@q2fc7@boot-library-expand q2fc7@boot-library-expand) (set! q49c6@q2fc5@library-expander q2fc5@library-expander) (set! q49c5@q2fc3@eval q2fc3@eval) (set! q49c4@q2fc1@expand q2fc1@expand) (set! q49c3@q2fbf@scheme-report-environment q2fbf@scheme-report-environment) (set! q49c2@q2fbd@null-environment q2fbd@null-environment) (set! q49c1@q2fbb@environment q2fbb@environment) (set! q49c0@q2fb9@environment-symbols q2fb9@environment-symbols) (set! q49bf@q2fb7@environment? q2fb7@environment?) (set! q49be@q2fb5@parse-binding q2fb5@parse-binding) (set! q49bd@q2fb3@environment-bindings q2fb3@environment-bindings) (set! q49bc@q2fb1@interaction-environment-symbols q2fb1@interaction-environment-symbols) (set! q49bb@q2faf@rp q2faf@rp) (set! q49ba@q2fad@set-interaction-env-locs! q2fad@set-interaction-env-locs!) (set! q49b9@q2fab@set-interaction-env-r! q2fab@set-interaction-env-r!) (set! q49b8@q2fa9@set-interaction-env-rib! q2fa9@set-interaction-env-rib!) (set! q49b7@q2fa7@interaction-env-locs q2fa7@interaction-env-locs) (set! q49b6@q2fa5@interaction-env-r q2fa5@interaction-env-r) (set! q49b5@q2fa3@interaction-env-rib q2fa3@interaction-env-rib) (set! q49b4@q2fa1@make-interaction-env q2fa1@make-interaction-env) (set! q49b3@q2f9f@interaction-env? q2f9f@interaction-env?) (set! q49b2@q2f9c@q2f94 q2f9c@q2f94) (set! q49b1@q2f9a@q2f95 q2f9a@q2f95) (set! q49b0@q2f98@q2f93 q2f98@q2f93) (set! q49af@q2f92@rp q2f92@rp) (set! q49ae@q2f90@set-env-itc! q2f90@set-env-itc!) (set! q49ad@q2f8e@set-env-labels! q2f8e@set-env-labels!) (set! q49ac@q2f8c@set-env-names! q2f8c@set-env-names!) (set! q49ab@q2f8a@env-itc q2f8a@env-itc) (set! q49aa@q2f88@env-labels q2f88@env-labels) (set! q49a9@q2f86@env-names q2f86@env-names) (set! q49a8@q2f84@make-env q2f84@make-env) (set! q49a7@q2f82@env? q2f82@env?) (set! q49a6@q2f7f@q2f77 q2f7f@q2f77) (set! q49a5@q2f7d@q2f78 q2f7d@q2f78) (set! q49a4@q2f7b@q2f76 q2f7b@q2f76) (set! q49a3@q2f75@top-level-expander q2f75@top-level-expander) (set! q49a2@q2f73@parse-top-level-program q2f73@parse-top-level-program) (set! q49a1@q2f71@core-library-expander q2f71@core-library-expander) (set! q49a0@q2f6f@library-body-expander q2f6f@library-body-expander) (set! q499f@q2f6d@chi-interaction-expr q2f6d@chi-interaction-expr) (set! q499e@q2f6b@chi-library-internal q2f6b@chi-library-internal) (set! q499d@q2f69@imp-collector q2f69@imp-collector) (set! q499c@q2f67@vis-collector q2f67@vis-collector) (set! q499b@q2f65@inv-collector q2f65@inv-collector) (set! q499a@q2f63@make-collector q2f63@make-collector) (set! q4999@q2f61@make-top-rib q2f61@make-top-rib) (set! q4998@q2f5f@parse-import-spec* q2f5f@parse-import-spec*) (set! q4997@q2f5d@parse-library q2f5d@parse-library) (set! q4996@q2f5b@parse-library-name q2f5b@parse-library-name) (set! q4995@q2f59@parse-exports q2f59@parse-exports) (set! q4994@q2f57@expand-transformer q2f57@expand-transformer) (set! q4993@q2f55@chi-body* q2f55@chi-body*) (set! q4992@q2f53@chi-internal-module q2f53@chi-internal-module) (set! q4991@q2f51@module-interface-exp-id* q2f51@module-interface-exp-id*) (set! q4990@q2f4f@set-module-interface-exp-lab-vec! q2f4f@set-module-interface-exp-lab-vec!) (set! q498f@q2f4d@set-module-interface-exp-id-vec! q2f4d@set-module-interface-exp-id-vec!) (set! q498e@q2f4b@set-module-interface-first-mark! q2f4b@set-module-interface-first-mark!) (set! q498d@q2f49@module-interface-exp-lab-vec q2f49@module-interface-exp-lab-vec) (set! q498c@q2f47@module-interface-exp-id-vec q2f47@module-interface-exp-id-vec) (set! q498b@q2f45@module-interface-first-mark q2f45@module-interface-first-mark) (set! q498a@q2f43@make-module-interface q2f43@make-module-interface) (set! q4989@q2f41@module-interface? q2f41@module-interface?) (set! q4988@q2f3e@q2f36 q2f3e@q2f36) (set! q4987@q2f3c@q2f37 q2f3c@q2f37) (set! q4986@q2f3a@q2f35 q2f3a@q2f35) (set! q4985@q2f34@parse-module q2f34@parse-module) (set! q4984@q2f32@chi-internal q2f32@chi-internal) (set! q4983@q2f30@find-dups q2f30@find-dups) (set! q4982@q2f2e@find-bound=? q2f2e@find-bound=?) (set! q4981@q2f2c@chi-rhs* q2f2c@chi-rhs*) (set! q4980@q2f2a@expand-interaction-rhs*/init* q2f2a@expand-interaction-rhs*/init*) (set! q497f@q2f28@chi-rhs q2f28@chi-rhs) (set! q497e@q2f26@chi-defun q2f26@chi-defun) (set! q497d@q2f24@chi-lambda-clause* q2f24@chi-lambda-clause*) (set! q497c@q2f22@chi-lambda-clause q2f22@chi-lambda-clause) (set! q497b@q2f20@verify-formals q2f20@verify-formals) (set! q497a@q2f1e@chi-set! q2f1e@chi-set!) (set! q4979@q2f1c@chi-expr q2f1c@chi-expr) (set! q4978@q2f1a@chi-application q2f1a@chi-application) (set! q4977@q2f18@chi-expr* q2f18@chi-expr*) (set! q4976@q2f16@chi-global-macro q2f16@chi-global-macro) (set! q4975@q2f14@chi-local-macro q2f14@chi-local-macro) (set! q4974@q2f12@chi-macro q2f12@chi-macro) (set! q4973@q2f10@do-macro-call q2f10@do-macro-call) (set! q4972@q2f0e@local-macro-transformer q2f0e@local-macro-transformer) (set! q4971@q2f0c@macro-transformer q2f0c@macro-transformer) (set! q4970@q2f0a@symbol-macro q2f0a@symbol-macro) (set! q496f@q2f08@core-macro-transformer q2f08@core-macro-transformer) (set! q496e@q2f06@syntax-transformer q2f06@syntax-transformer) (set! q496d@q2f04@ellipsis-map q2f04@ellipsis-map) (set! q496c@q2f02@syntax-case-transformer q2f02@syntax-case-transformer) (set! q496b@q2f00@verify-literals q2f00@verify-literals) (set! q496a@q2efe@underscore? q2efe@underscore?) (set! q4969@q2efc@ellipsis? q2efc@ellipsis?) (set! q4968@q2efa@syntax-dispatch q2efa@syntax-dispatch) (set! q4967@q2ef8@convert-pattern q2ef8@convert-pattern) (set! q4966@q2ef6@foreign-call-transformer q2ef6@foreign-call-transformer) (set! q4965@q2ef4@parameterize-macro q2ef4@parameterize-macro) (set! q4964@q2ef2@incorrect-usage-macro q2ef2@incorrect-usage-macro) (set! q4963@q2ef0@define-condition-type-macro q2ef0@define-condition-type-macro) (set! q4962@q2eee@define-record-type-macro q2eee@define-record-type-macro) (set! q4961@q2eec@define-struct-macro q2eec@define-struct-macro) (set! q4960@q2eea@quasisyntax-macro q2eea@quasisyntax-macro) (set! q495f@q2ee8@quasiquote-macro q2ee8@quasiquote-macro) (set! q495e@q2ee6@syntax-rules-macro q2ee6@syntax-rules-macro) (set! q495d@q2ee4@include-into-macro q2ee4@include-into-macro) (set! q495c@q2ee2@include-macro q2ee2@include-macro) (set! q495b@q2ee0@do-include q2ee0@do-include) (set! q495a@q2ede@cond-macro q2ede@cond-macro) (set! q4959@q2edc@and-macro q2edc@and-macro) (set! q4958@q2eda@or-macro q2eda@or-macro) (set! q4957@q2ed8@let*-macro q2ed8@let*-macro) (set! q4956@q2ed6@do-macro q2ed6@do-macro) (set! q4955@q2ed4@identifier-syntax-macro q2ed4@identifier-syntax-macro) (set! q4954@q2ed2@endianness-macro q2ed2@endianness-macro) (set! q4953@q2ed0@assert-macro q2ed0@assert-macro) (set! q4952@q2ece@delay-macro q2ece@delay-macro) (set! q4951@q2ecc@time-macro q2ecc@time-macro) (set! q4950@q2eca@define-enumeration-macro q2eca@define-enumeration-macro) (set! q494f@q2ec8@guard-macro q2ec8@guard-macro) (set! q494e@q2ec6@trace-letrec-syntax-macro q2ec6@trace-letrec-syntax-macro) (set! q494d@q2ec4@trace-let-syntax-macro q2ec4@trace-let-syntax-macro) (set! q494c@q2ec2@trace-let/rec-syntax q2ec2@trace-let/rec-syntax) (set! q494b@q2ec0@trace-define-syntax-macro q2ec0@trace-define-syntax-macro) (set! q494a@q2ebe@trace-define-macro q2ebe@trace-define-macro) (set! q4949@q2ebc@trace-lambda-macro q2ebc@trace-lambda-macro) (set! q4948@q2eba@let*-values-macro q2eba@let*-values-macro) (set! q4947@q2eb8@let-values-macro q2eb8@let-values-macro) (set! q4946@q2eb6@let-macro q2eb6@let-macro) (set! q4945@q2eb4@invalid-fmls-error q2eb4@invalid-fmls-error) (set! q4944@q2eb2@with-syntax-macro q2eb2@with-syntax-macro) (set! q4943@q2eb0@bless q2eb0@bless) (set! q4942@q2eae@lambda-transformer q2eae@lambda-transformer) (set! q4941@q2eac@case-lambda-transformer q2eac@case-lambda-transformer) (set! q4940@q2eaa@quote-transformer q2eaa@quote-transformer) (set! q493f@q2ea8@case-macro q2ea8@case-macro) (set! q493e@q2ea6@or-transformer q2ea6@or-transformer) (set! q493d@q2ea4@and-transformer q2ea4@and-transformer) (set! q493c@q2ea2@if-transformer q2ea2@if-transformer) (set! q493b@q2ea0@unless-macro q2ea0@unless-macro) (set! q493a@q2e9e@when-macro q2e9e@when-macro) (set! q4939@q2e9c@record-constructor-descriptor-transformer q2e9c@record-constructor-descriptor-transformer) (set! q4938@q2e9a@record-type-descriptor-transformer q2e9a@record-type-descriptor-transformer) (set! q4937@q2e98@type-descriptor-transformer q2e98@type-descriptor-transformer) (set! q4936@q2e96@fluid-let-syntax-transformer q2e96@fluid-let-syntax-transformer) (set! q4935@q2e94@letrec*-transformer q2e94@letrec*-transformer) (set! q4934@q2e92@letrec-transformer q2e92@letrec-transformer) (set! q4933@q2e90@letrec-helper q2e90@letrec-helper) (set! q4932@q2e8e@add-lexicals q2e8e@add-lexicals) (set! q4931@q2e8c@add-lexical q2e8c@add-lexical) (set! q4930@q2e8a@set-lexical-mutable! q2e8a@set-lexical-mutable!) (set! q492f@q2e88@lexical-mutable? q2e88@lexical-mutable?) (set! q492e@q2e86@lexical-var q2e86@lexical-var) (set! q492d@q2e84@scheme-stx q2e84@scheme-stx) (set! q492c@q2e82@scheme-stx-hashtable q2e82@scheme-stx-hashtable) (set! q492b@q2e80@parse-define-syntax q2e80@parse-define-syntax) (set! q492a@q2e7e@parse-define q2e7e@parse-define) (set! q4929@q2d2d@make-eval-transformer q2d2d@make-eval-transformer) (set! q4928@q2d2b@variable-transformer-procedure q2d2b@variable-transformer-procedure) (set! q4927@q2d29@variable-transformer? q2d29@variable-transformer?) (set! q4926@q2d27@make-variable-transformer q2d27@make-variable-transformer) (set! q4925@q2d25@sanitize-binding q2d25@sanitize-binding) (set! q4924@q2d17@syntax-type q2d17@syntax-type) (set! q4923@q2d15@raise-unbound-error q2d15@raise-unbound-error) (set! q4922@q2d13@binding-value q2d13@binding-value) (set! q4921@q2d11@binding-type q2d11@binding-type) (set! q4920@q2d0f@make-binding q2d0f@make-binding) (set! q491f@q2d0d@label->binding q2d0d@label->binding) (set! q491e@q2d0b@id->real-label q2d0b@id->real-label) (set! q491d@q2d09@id->label q2d09@id->label) (set! q491c@q2d07@same-marks*? q2d07@same-marks*?) (set! q491b@q2d05@stx->datum q2d05@stx->datum) (set! q491a@q2d03@strip q2d03@strip) (set! q4919@q2d01@strip-annotations q2d01@strip-annotations) (set! q4918@q2cff@self-evaluating? q2cff@self-evaluating?) (set! q4917@q2cfd@bound-id-member? q2cfd@bound-id-member?) (set! q4916@q2cfb@distinct-bound-ids? q2cfb@distinct-bound-ids?) (set! q4915@q2cf9@valid-bound-ids? q2cf9@valid-bound-ids?) (set! q4914@q2cf7@free-id=? q2cf7@free-id=?) (set! q4913@q2cf5@bound-id=? q2cf5@bound-id=?) (set! q4912@q2cf3@same-marks? q2cf3@same-marks?) (set! q4911@q2cf1@id->sym q2cf1@id->sym) (set! q4910@q2cef@id? q2cef@id?) (set! q490f@q2ced@syntax->list q2ced@syntax->list) (set! q490e@q2ceb@syntax-cdr q2ceb@syntax-cdr) (set! q490d@q2ce9@syntax-car q2ce9@syntax-car) (set! q490c@q2ce7@syntax-list? q2ce7@syntax-list?) (set! q490b@q2ce5@syntax-null? q2ce5@syntax-null?) (set! q490a@q2ce3@syntax-vector? q2ce3@syntax-vector?) (set! q4909@q2ce1@syntax-pair? q2ce1@syntax-pair?) (set! q4908@q2cdf@syntax-vector->list q2cdf@syntax-vector->list) (set! q4907@q2cdd@syntax-kind? q2cdd@syntax-kind?) (set! q4906@q2cdb@add-subst q2cdb@add-subst) (set! q4905@q2cd9@add-mark q2cd9@add-mark) (set! q4904@q2cd7@mkstx q2cd7@mkstx) (set! q4903@q2cd5@join-wraps q2cd5@join-wraps) (set! q4902@q2cd3@anti-mark? q2cd3@anti-mark?) (set! q4901@q2cd1@anti-mark q2cd1@anti-mark) (set! q4900@q2ccf@gen-mark q2ccf@gen-mark) (set! q48ff@q2ccd@datum->stx q2ccd@datum->stx) (set! q48fe@q2ccb@rp q2ccb@rp) (set! q48fd@q2cc9@set-stx-ae*! q2cc9@set-stx-ae*!) (set! q48fc@q2cc7@set-stx-subst*! q2cc7@set-stx-subst*!) (set! q48fb@q2cc5@set-stx-mark*! q2cc5@set-stx-mark*!) (set! q48fa@q2cc3@set-stx-expr! q2cc3@set-stx-expr!) (set! q48f9@q2cc1@stx-ae* q2cc1@stx-ae*) (set! q48f8@q2cbf@stx-subst* q2cbf@stx-subst*) (set! q48f7@q2cbd@stx-mark* q2cbd@stx-mark*) (set! q48f6@q2cbb@stx-expr q2cbb@stx-expr) (set! q48f5@q2cb9@make-stx q2cb9@make-stx) (set! q48f4@q2cb7@stx? q2cb7@stx?) (set! q48f3@q2cb4@q2cac q2cb4@q2cac) (set! q48f2@q2cb2@q2cad q2cb2@q2cad) (set! q48f1@q2cb0@q2cab q2cb0@q2cab) (set! q48f0@q2caa@make-full-rib q2caa@make-full-rib) (set! q48ef@q2ca8@unseal-rib! q2ca8@unseal-rib!) (set! q48ee@q2ca6@seal-rib! q2ca6@seal-rib!) (set! q48ed@q2ca4@make-rib-map q2ca4@make-rib-map) (set! q48ec@q2ca2@extend-rib/nc! q2ca2@extend-rib/nc!) (set! q48eb@q2ca0@extend-rib! q2ca0@extend-rib!) (set! q48ea@q2c9e@make-empty-rib q2c9e@make-empty-rib) (set! q48e9@q2c9c@set-rib-cache! q2c9c@set-rib-cache!) (set! q48e8@q2c9a@set-rib-sealed/freq! q2c9a@set-rib-sealed/freq!) (set! q48e7@q2c98@set-rib-label*! q2c98@set-rib-label*!) (set! q48e6@q2c96@set-rib-mark**! q2c96@set-rib-mark**!) (set! q48e5@q2c94@set-rib-sym*! q2c94@set-rib-sym*!) (set! q48e4@q2c92@rib-cache q2c92@rib-cache) (set! q48e3@q2c90@rib-sealed/freq q2c90@rib-sealed/freq) (set! q48e2@q2c8e@rib-label* q2c8e@rib-label*) (set! q48e1@q2c8c@rib-mark** q2c8c@rib-mark**) (set! q48e0@q2c8a@rib-sym* q2c8a@rib-sym*) (set! q48df@q2c88@make-rib q2c88@make-rib) (set! q48de@q2c86@rib? q2c86@rib?) (set! q48dd@q2c83@q2c7b q2c83@q2c7b) (set! q48dc@q2c81@q2c7c q2c81@q2c7c) (set! q48db@q2c7f@q2c7a q2c7f@q2c7a) (set! q48da@q2c79@gen-define-label q2c79@gen-define-label) (set! q48d9@q2c77@gen-define-label+loc q2c77@gen-define-label+loc) (set! q48d8@q2c75@gen-top-level-label q2c75@gen-top-level-label) (set! q48d7@q2c73@gen-label q2c73@gen-label) (set! q48d6@q2c71@gen-global q2c71@gen-global) (set! q48d5@q2c6f@gen-lexical q2c6f@gen-lexical) (set! q48d4@q2c6d@top-marked? q2c6d@top-marked?) (set! q48d3@q2c6b@top-mark* q2c6b@top-mark*) (set! q48d2@q2c66@set-union q2c66@set-union) (set! q48d1@q2c64@set-cons q2c64@set-cons) (set! q48d0@q2c62@file-options-macro q2c62@file-options-macro) (q2b09@q29a0@current-library-expander q2fc5@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (q49e6@q49e1 q49e8@q49e3 q49ea@q49e2 q49ed@&condition? q49ef@make-&condition q49f1@&condition-rtd q49f3@&condition-rcd q4a3f@q4a3a q4a41@q4a3c q4a43@q4a3b q4a46@p? q4a48@make-message-condition q4a4a@q4a39 q4a4c@message-condition? q4a4e@condition-message q4a50@&message-rtd q4a52@&message-rcd q4a58@q4a53 q4a5a@q4a55 q4a5c@q4a54 q4a5f@p? q4a61@make-warning q4a63@warning? q4a65@&warning-rtd q4a67@&warning-rcd q4a6d@q4a68 q4a6f@q4a6a q4a71@q4a69 q4a74@p? q4a76@make-serious-condition q4a78@serious-condition? q4a7a@&serious-rtd q4a7c@&serious-rcd q4a82@q4a7d q4a84@q4a7f q4a86@q4a7e q4a89@p? q4a8b@make-error q4a8d@error? q4a8f@&error-rtd q4a91@&error-rcd q4a97@q4a92 q4a99@q4a94 q4a9b@q4a93 q4a9e@p? q4aa0@make-violation q4aa2@violation? q4aa4@&violation-rtd q4aa6@&violation-rcd q4aac@q4aa7 q4aae@q4aa9 q4ab0@q4aa8 q4ab3@p? q4ab5@make-assertion-violation q4ab7@assertion-violation? q4ab9@&assertion-rtd q4abb@&assertion-rcd q4ac3@q4abe q4ac5@q4ac0 q4ac7@q4abf q4aca@p? q4acc@make-irritants-condition q4ace@q4abd q4ad0@irritants-condition? q4ad2@condition-irritants q4ad4@&irritants-rtd q4ad6@&irritants-rcd q4ade@q4ad9 q4ae0@q4adb q4ae2@q4ada q4ae5@p? q4ae7@make-who-condition q4ae9@q4ad8 q4aeb@who-condition? q4aed@condition-who q4aef@&who-rtd q4af1@&who-rcd q4af7@q4af2 q4af9@q4af4 q4afb@q4af3 q4afe@p? q4b00@make-non-continuable-violation q4b02@non-continuable-violation? q4b04@&non-continuable-rtd q4b06@&non-continuable-rcd q4b0c@q4b07 q4b0e@q4b09 q4b10@q4b08 q4b13@p? q4b15@make-implementation-restriction-violation q4b17@implementation-restriction-violation? q4b19@&implementation-restriction-rtd q4b1b@&implementation-restriction-rcd q4b21@q4b1c q4b23@q4b1e q4b25@q4b1d q4b28@p? q4b2a@make-lexical-violation q4b2c@lexical-violation? q4b2e@&lexical-rtd q4b30@&lexical-rcd q4b3a@q4b35 q4b3c@q4b37 q4b3e@q4b36 q4b41@p? q4b43@make-syntax-violation q4b45@q4b32 q4b47@q4b34 q4b49@syntax-violation? q4b4b@syntax-violation-form q4b4d@syntax-violation-subform q4b4f@&syntax-rtd q4b51@&syntax-rcd q4b57@q4b52 q4b59@q4b54 q4b5b@q4b53 q4b5e@p? q4b60@make-undefined-violation q4b62@undefined-violation? q4b64@&undefined-rtd q4b66@&undefined-rcd q4b6c@q4b67 q4b6e@q4b69 q4b70@q4b68 q4b73@p? q4b75@make-i/o-error q4b77@i/o-error? q4b79@&i/o-rtd q4b7b@&i/o-rcd q4b81@q4b7c q4b83@q4b7e q4b85@q4b7d q4b88@p? q4b8a@make-i/o-read-error q4b8c@i/o-read-error? q4b8e@&i/o-read-rtd q4b90@&i/o-read-rcd q4b96@q4b91 q4b98@q4b93 q4b9a@q4b92 q4b9d@p? q4b9f@make-i/o-write-error q4ba1@i/o-write-error? q4ba3@&i/o-write-rtd q4ba5@&i/o-write-rcd q4bad@q4ba8 q4baf@q4baa q4bb1@q4ba9 q4bb4@p? q4bb6@make-i/o-invalid-position-error q4bb8@q4ba7 q4bba@i/o-invalid-position-error? q4bbc@i/o-error-position q4bbe@&i/o-invalid-position-rtd q4bc0@&i/o-invalid-position-rcd q4bc8@q4bc3 q4bca@q4bc5 q4bcc@q4bc4 q4bcf@p? q4bd1@make-i/o-filename-error q4bd3@q4bc2 q4bd5@i/o-filename-error? q4bd7@i/o-error-filename q4bd9@&i/o-filename-rtd q4bdb@&i/o-filename-rcd q4be1@q4bdc q4be3@q4bde q4be5@q4bdd q4be8@p? q4bea@make-i/o-file-protection-error q4bec@i/o-file-protection-error? q4bee@&i/o-file-protection-rtd q4bf0@&i/o-file-protection-rcd q4bf6@q4bf1 q4bf8@q4bf3 q4bfa@q4bf2 q4bfd@p? q4bff@make-i/o-file-is-read-only-error q4c01@i/o-file-is-read-only-error? q4c03@&i/o-file-is-read-only-rtd q4c05@&i/o-file-is-read-only-rcd q4c0b@q4c06 q4c0d@q4c08 q4c0f@q4c07 q4c12@p? q4c14@make-i/o-file-already-exists-error q4c16@i/o-file-already-exists-error? q4c18@&i/o-file-already-exists-rtd q4c1a@&i/o-file-already-exists-rcd q4c20@q4c1b q4c22@q4c1d q4c24@q4c1c q4c27@p? q4c29@make-i/o-file-does-not-exist-error q4c2b@i/o-file-does-not-exist-error? q4c2d@&i/o-file-does-not-exist-rtd q4c2f@&i/o-file-does-not-exist-rcd q4c37@q4c32 q4c39@q4c34 q4c3b@q4c33 q4c3e@p? q4c40@make-i/o-port-error q4c42@q4c31 q4c44@i/o-port-error? q4c46@i/o-error-port q4c48@&i/o-port-rtd q4c4a@&i/o-port-rcd q4c50@q4c4b q4c52@q4c4d q4c54@q4c4c q4c57@p? q4c59@make-i/o-decoding-error q4c5b@i/o-decoding-error? q4c5d@&i/o-decoding-rtd q4c5f@&i/o-decoding-rcd q4c67@q4c62 q4c69@q4c64 q4c6b@q4c63 q4c6e@p? q4c70@make-i/o-encoding-error q4c72@q4c61 q4c74@i/o-encoding-error? q4c76@i/o-encoding-error-char q4c78@&i/o-encoding-rtd q4c7a@&i/o-encoding-rcd q4c80@q4c7b q4c82@q4c7d q4c84@q4c7c q4c87@p? q4c89@make-no-infinities-violation q4c8b@no-infinities-violation? q4c8d@&no-infinities-rtd q4c8f@&no-infinities-rcd q4c95@q4c90 q4c97@q4c92 q4c99@q4c91 q4c9c@p? q4c9e@make-no-nans-violation q4ca0@no-nans-violation? q4ca2@&no-nans-rtd q4ca4@&no-nans-rcd) (begin (set! q49e6@q49e1 (make-record-type-descriptor '&condition '#f 'q49e4 '#f '#f '#())) (set! q49e8@q49e3 '#f) (set! q49ea@q49e2 (make-record-constructor-descriptor q49e6@q49e1 '#f q49e8@q49e3)) (set! q49ed@&condition? (record-predicate q49e6@q49e1)) (set! q49ef@make-&condition (record-constructor q49ea@q49e2)) (set! q49f1@&condition-rtd q49e6@q49e1) (set! q49f3@&condition-rcd q49ea@q49e2) (set! q4a3f@q4a3a (make-record-type-descriptor '&message q49e6@q49e1 'q4a3d '#f '#f '#((immutable message)))) (set! q4a41@q4a3c '#f) (set! q4a43@q4a3b (make-record-constructor-descriptor q4a3f@q4a3a q49ea@q49e2 q4a41@q4a3c)) (set! q4a46@p? (record-predicate q4a3f@q4a3a)) (set! q4a48@make-message-condition (record-constructor q4a43@q4a3b)) (set! q4a4a@q4a39 (record-accessor q4a3f@q4a3a '0)) (set! q4a4c@message-condition? (condition-predicate q4a3f@q4a3a)) (set! q4a4e@condition-message (condition-accessor q4a3f@q4a3a q4a4a@q4a39)) (set! q4a50@&message-rtd q4a3f@q4a3a) (set! q4a52@&message-rcd q4a43@q4a3b) (set! q4a58@q4a53 (make-record-type-descriptor '&warning q49e6@q49e1 'q4a56 '#f '#f '#())) (set! q4a5a@q4a55 '#f) (set! q4a5c@q4a54 (make-record-constructor-descriptor q4a58@q4a53 q49ea@q49e2 q4a5a@q4a55)) (set! q4a5f@p? (record-predicate q4a58@q4a53)) (set! q4a61@make-warning (record-constructor q4a5c@q4a54)) (set! q4a63@warning? (condition-predicate q4a58@q4a53)) (set! q4a65@&warning-rtd q4a58@q4a53) (set! q4a67@&warning-rcd q4a5c@q4a54) (set! q4a6d@q4a68 (make-record-type-descriptor '&serious q49e6@q49e1 'q4a6b '#f '#f '#())) (set! q4a6f@q4a6a '#f) (set! q4a71@q4a69 (make-record-constructor-descriptor q4a6d@q4a68 q49ea@q49e2 q4a6f@q4a6a)) (set! q4a74@p? (record-predicate q4a6d@q4a68)) (set! q4a76@make-serious-condition (record-constructor q4a71@q4a69)) (set! q4a78@serious-condition? (condition-predicate q4a6d@q4a68)) (set! q4a7a@&serious-rtd q4a6d@q4a68) (set! q4a7c@&serious-rcd q4a71@q4a69) (set! q4a82@q4a7d (make-record-type-descriptor '&error q4a6d@q4a68 'q4a80 '#f '#f '#())) (set! q4a84@q4a7f '#f) (set! q4a86@q4a7e (make-record-constructor-descriptor q4a82@q4a7d q4a71@q4a69 q4a84@q4a7f)) (set! q4a89@p? (record-predicate q4a82@q4a7d)) (set! q4a8b@make-error (record-constructor q4a86@q4a7e)) (set! q4a8d@error? (condition-predicate q4a82@q4a7d)) (set! q4a8f@&error-rtd q4a82@q4a7d) (set! q4a91@&error-rcd q4a86@q4a7e) (set! q4a97@q4a92 (make-record-type-descriptor '&violation q4a6d@q4a68 'q4a95 '#f '#f '#())) (set! q4a99@q4a94 '#f) (set! q4a9b@q4a93 (make-record-constructor-descriptor q4a97@q4a92 q4a71@q4a69 q4a99@q4a94)) (set! q4a9e@p? (record-predicate q4a97@q4a92)) (set! q4aa0@make-violation (record-constructor q4a9b@q4a93)) (set! q4aa2@violation? (condition-predicate q4a97@q4a92)) (set! q4aa4@&violation-rtd q4a97@q4a92) (set! q4aa6@&violation-rcd q4a9b@q4a93) (set! q4aac@q4aa7 (make-record-type-descriptor '&assertion q4a97@q4a92 'q4aaa '#f '#f '#())) (set! q4aae@q4aa9 '#f) (set! q4ab0@q4aa8 (make-record-constructor-descriptor q4aac@q4aa7 q4a9b@q4a93 q4aae@q4aa9)) (set! q4ab3@p? (record-predicate q4aac@q4aa7)) (set! q4ab5@make-assertion-violation (record-constructor q4ab0@q4aa8)) (set! q4ab7@assertion-violation? (condition-predicate q4aac@q4aa7)) (set! q4ab9@&assertion-rtd q4aac@q4aa7) (set! q4abb@&assertion-rcd q4ab0@q4aa8) (set! q4ac3@q4abe (make-record-type-descriptor '&irritants q49e6@q49e1 'q4ac1 '#f '#f '#((immutable irritants)))) (set! q4ac5@q4ac0 '#f) (set! q4ac7@q4abf (make-record-constructor-descriptor q4ac3@q4abe q49ea@q49e2 q4ac5@q4ac0)) (set! q4aca@p? (record-predicate q4ac3@q4abe)) (set! q4acc@make-irritants-condition (record-constructor q4ac7@q4abf)) (set! q4ace@q4abd (record-accessor q4ac3@q4abe '0)) (set! q4ad0@irritants-condition? (condition-predicate q4ac3@q4abe)) (set! q4ad2@condition-irritants (condition-accessor q4ac3@q4abe q4ace@q4abd)) (set! q4ad4@&irritants-rtd q4ac3@q4abe) (set! q4ad6@&irritants-rcd q4ac7@q4abf) (set! q4ade@q4ad9 (make-record-type-descriptor '&who q49e6@q49e1 'q4adc '#f '#f '#((immutable who)))) (set! q4ae0@q4adb '#f) (set! q4ae2@q4ada (make-record-constructor-descriptor q4ade@q4ad9 q49ea@q49e2 q4ae0@q4adb)) (set! q4ae5@p? (record-predicate q4ade@q4ad9)) (set! q4ae7@make-who-condition (record-constructor q4ae2@q4ada)) (set! q4ae9@q4ad8 (record-accessor q4ade@q4ad9 '0)) (set! q4aeb@who-condition? (condition-predicate q4ade@q4ad9)) (set! q4aed@condition-who (condition-accessor q4ade@q4ad9 q4ae9@q4ad8)) (set! q4aef@&who-rtd q4ade@q4ad9) (set! q4af1@&who-rcd q4ae2@q4ada) (set! q4af7@q4af2 (make-record-type-descriptor '&non-continuable q4a97@q4a92 'q4af5 '#f '#f '#())) (set! q4af9@q4af4 '#f) (set! q4afb@q4af3 (make-record-constructor-descriptor q4af7@q4af2 q4a9b@q4a93 q4af9@q4af4)) (set! q4afe@p? (record-predicate q4af7@q4af2)) (set! q4b00@make-non-continuable-violation (record-constructor q4afb@q4af3)) (set! q4b02@non-continuable-violation? (condition-predicate q4af7@q4af2)) (set! q4b04@&non-continuable-rtd q4af7@q4af2) (set! q4b06@&non-continuable-rcd q4afb@q4af3) (set! q4b0c@q4b07 (make-record-type-descriptor '&implementation-restriction q4a97@q4a92 'q4b0a '#f '#f '#())) (set! q4b0e@q4b09 '#f) (set! q4b10@q4b08 (make-record-constructor-descriptor q4b0c@q4b07 q4a9b@q4a93 q4b0e@q4b09)) (set! q4b13@p? (record-predicate q4b0c@q4b07)) (set! q4b15@make-implementation-restriction-violation (record-constructor q4b10@q4b08)) (set! q4b17@implementation-restriction-violation? (condition-predicate q4b0c@q4b07)) (set! q4b19@&implementation-restriction-rtd q4b0c@q4b07) (set! q4b1b@&implementation-restriction-rcd q4b10@q4b08) (set! q4b21@q4b1c (make-record-type-descriptor '&lexical q4a97@q4a92 'q4b1f '#f '#f '#())) (set! q4b23@q4b1e '#f) (set! q4b25@q4b1d (make-record-constructor-descriptor q4b21@q4b1c q4a9b@q4a93 q4b23@q4b1e)) (set! q4b28@p? (record-predicate q4b21@q4b1c)) (set! q4b2a@make-lexical-violation (record-constructor q4b25@q4b1d)) (set! q4b2c@lexical-violation? (condition-predicate q4b21@q4b1c)) (set! q4b2e@&lexical-rtd q4b21@q4b1c) (set! q4b30@&lexical-rcd q4b25@q4b1d) (set! q4b3a@q4b35 (make-record-type-descriptor '&syntax q4a97@q4a92 'q4b38 '#f '#f '#((immutable form) (immutable subform)))) (set! q4b3c@q4b37 '#f) (set! q4b3e@q4b36 (make-record-constructor-descriptor q4b3a@q4b35 q4a9b@q4a93 q4b3c@q4b37)) (set! q4b41@p? (record-predicate q4b3a@q4b35)) (set! q4b43@make-syntax-violation (record-constructor q4b3e@q4b36)) (set! q4b45@q4b32 (record-accessor q4b3a@q4b35 '0)) (set! q4b47@q4b34 (record-accessor q4b3a@q4b35 '1)) (set! q4b49@syntax-violation? (condition-predicate q4b3a@q4b35)) (set! q4b4b@syntax-violation-form (condition-accessor q4b3a@q4b35 q4b45@q4b32)) (set! q4b4d@syntax-violation-subform (condition-accessor q4b3a@q4b35 q4b47@q4b34)) (set! q4b4f@&syntax-rtd q4b3a@q4b35) (set! q4b51@&syntax-rcd q4b3e@q4b36) (set! q4b57@q4b52 (make-record-type-descriptor '&undefined q4a97@q4a92 'q4b55 '#f '#f '#())) (set! q4b59@q4b54 '#f) (set! q4b5b@q4b53 (make-record-constructor-descriptor q4b57@q4b52 q4a9b@q4a93 q4b59@q4b54)) (set! q4b5e@p? (record-predicate q4b57@q4b52)) (set! q4b60@make-undefined-violation (record-constructor q4b5b@q4b53)) (set! q4b62@undefined-violation? (condition-predicate q4b57@q4b52)) (set! q4b64@&undefined-rtd q4b57@q4b52) (set! q4b66@&undefined-rcd q4b5b@q4b53) (set! q4b6c@q4b67 (make-record-type-descriptor '&i/o q4a82@q4a7d 'q4b6a '#f '#f '#())) (set! q4b6e@q4b69 '#f) (set! q4b70@q4b68 (make-record-constructor-descriptor q4b6c@q4b67 q4a86@q4a7e q4b6e@q4b69)) (set! q4b73@p? (record-predicate q4b6c@q4b67)) (set! q4b75@make-i/o-error (record-constructor q4b70@q4b68)) (set! q4b77@i/o-error? (condition-predicate q4b6c@q4b67)) (set! q4b79@&i/o-rtd q4b6c@q4b67) (set! q4b7b@&i/o-rcd q4b70@q4b68) (set! q4b81@q4b7c (make-record-type-descriptor '&i/o-read q4b6c@q4b67 'q4b7f '#f '#f '#())) (set! q4b83@q4b7e '#f) (set! q4b85@q4b7d (make-record-constructor-descriptor q4b81@q4b7c q4b70@q4b68 q4b83@q4b7e)) (set! q4b88@p? (record-predicate q4b81@q4b7c)) (set! q4b8a@make-i/o-read-error (record-constructor q4b85@q4b7d)) (set! q4b8c@i/o-read-error? (condition-predicate q4b81@q4b7c)) (set! q4b8e@&i/o-read-rtd q4b81@q4b7c) (set! q4b90@&i/o-read-rcd q4b85@q4b7d) (set! q4b96@q4b91 (make-record-type-descriptor '&i/o-write q4b6c@q4b67 'q4b94 '#f '#f '#())) (set! q4b98@q4b93 '#f) (set! q4b9a@q4b92 (make-record-constructor-descriptor q4b96@q4b91 q4b70@q4b68 q4b98@q4b93)) (set! q4b9d@p? (record-predicate q4b96@q4b91)) (set! q4b9f@make-i/o-write-error (record-constructor q4b9a@q4b92)) (set! q4ba1@i/o-write-error? (condition-predicate q4b96@q4b91)) (set! q4ba3@&i/o-write-rtd q4b96@q4b91) (set! q4ba5@&i/o-write-rcd q4b9a@q4b92) (set! q4bad@q4ba8 (make-record-type-descriptor '&i/o-invalid-position q4b6c@q4b67 'q4bab '#f '#f '#((immutable position)))) (set! q4baf@q4baa '#f) (set! q4bb1@q4ba9 (make-record-constructor-descriptor q4bad@q4ba8 q4b70@q4b68 q4baf@q4baa)) (set! q4bb4@p? (record-predicate q4bad@q4ba8)) (set! q4bb6@make-i/o-invalid-position-error (record-constructor q4bb1@q4ba9)) (set! q4bb8@q4ba7 (record-accessor q4bad@q4ba8 '0)) (set! q4bba@i/o-invalid-position-error? (condition-predicate q4bad@q4ba8)) (set! q4bbc@i/o-error-position (condition-accessor q4bad@q4ba8 q4bb8@q4ba7)) (set! q4bbe@&i/o-invalid-position-rtd q4bad@q4ba8) (set! q4bc0@&i/o-invalid-position-rcd q4bb1@q4ba9) (set! q4bc8@q4bc3 (make-record-type-descriptor '&i/o-filename q4b6c@q4b67 'q4bc6 '#f '#f '#((immutable filename)))) (set! q4bca@q4bc5 '#f) (set! q4bcc@q4bc4 (make-record-constructor-descriptor q4bc8@q4bc3 q4b70@q4b68 q4bca@q4bc5)) (set! q4bcf@p? (record-predicate q4bc8@q4bc3)) (set! q4bd1@make-i/o-filename-error (record-constructor q4bcc@q4bc4)) (set! q4bd3@q4bc2 (record-accessor q4bc8@q4bc3 '0)) (set! q4bd5@i/o-filename-error? (condition-predicate q4bc8@q4bc3)) (set! q4bd7@i/o-error-filename (condition-accessor q4bc8@q4bc3 q4bd3@q4bc2)) (set! q4bd9@&i/o-filename-rtd q4bc8@q4bc3) (set! q4bdb@&i/o-filename-rcd q4bcc@q4bc4) (set! q4be1@q4bdc (make-record-type-descriptor '&i/o-file-protection q4bc8@q4bc3 'q4bdf '#f '#f '#())) (set! q4be3@q4bde '#f) (set! q4be5@q4bdd (make-record-constructor-descriptor q4be1@q4bdc q4bcc@q4bc4 q4be3@q4bde)) (set! q4be8@p? (record-predicate q4be1@q4bdc)) (set! q4bea@make-i/o-file-protection-error (record-constructor q4be5@q4bdd)) (set! q4bec@i/o-file-protection-error? (condition-predicate q4be1@q4bdc)) (set! q4bee@&i/o-file-protection-rtd q4be1@q4bdc) (set! q4bf0@&i/o-file-protection-rcd q4be5@q4bdd) (set! q4bf6@q4bf1 (make-record-type-descriptor '&i/o-file-is-read-only q4be1@q4bdc 'q4bf4 '#f '#f '#())) (set! q4bf8@q4bf3 '#f) (set! q4bfa@q4bf2 (make-record-constructor-descriptor q4bf6@q4bf1 q4be5@q4bdd q4bf8@q4bf3)) (set! q4bfd@p? (record-predicate q4bf6@q4bf1)) (set! q4bff@make-i/o-file-is-read-only-error (record-constructor q4bfa@q4bf2)) (set! q4c01@i/o-file-is-read-only-error? (condition-predicate q4bf6@q4bf1)) (set! q4c03@&i/o-file-is-read-only-rtd q4bf6@q4bf1) (set! q4c05@&i/o-file-is-read-only-rcd q4bfa@q4bf2) (set! q4c0b@q4c06 (make-record-type-descriptor '&i/o-file-already-exists q4bc8@q4bc3 'q4c09 '#f '#f '#())) (set! q4c0d@q4c08 '#f) (set! q4c0f@q4c07 (make-record-constructor-descriptor q4c0b@q4c06 q4bcc@q4bc4 q4c0d@q4c08)) (set! q4c12@p? (record-predicate q4c0b@q4c06)) (set! q4c14@make-i/o-file-already-exists-error (record-constructor q4c0f@q4c07)) (set! q4c16@i/o-file-already-exists-error? (condition-predicate q4c0b@q4c06)) (set! q4c18@&i/o-file-already-exists-rtd q4c0b@q4c06) (set! q4c1a@&i/o-file-already-exists-rcd q4c0f@q4c07) (set! q4c20@q4c1b (make-record-type-descriptor '&i/o-file-does-not-exist q4bc8@q4bc3 'q4c1e '#f '#f '#())) (set! q4c22@q4c1d '#f) (set! q4c24@q4c1c (make-record-constructor-descriptor q4c20@q4c1b q4bcc@q4bc4 q4c22@q4c1d)) (set! q4c27@p? (record-predicate q4c20@q4c1b)) (set! q4c29@make-i/o-file-does-not-exist-error (record-constructor q4c24@q4c1c)) (set! q4c2b@i/o-file-does-not-exist-error? (condition-predicate q4c20@q4c1b)) (set! q4c2d@&i/o-file-does-not-exist-rtd q4c20@q4c1b) (set! q4c2f@&i/o-file-does-not-exist-rcd q4c24@q4c1c) (set! q4c37@q4c32 (make-record-type-descriptor '&i/o-port q4b6c@q4b67 'q4c35 '#f '#f '#((immutable port)))) (set! q4c39@q4c34 '#f) (set! q4c3b@q4c33 (make-record-constructor-descriptor q4c37@q4c32 q4b70@q4b68 q4c39@q4c34)) (set! q4c3e@p? (record-predicate q4c37@q4c32)) (set! q4c40@make-i/o-port-error (record-constructor q4c3b@q4c33)) (set! q4c42@q4c31 (record-accessor q4c37@q4c32 '0)) (set! q4c44@i/o-port-error? (condition-predicate q4c37@q4c32)) (set! q4c46@i/o-error-port (condition-accessor q4c37@q4c32 q4c42@q4c31)) (set! q4c48@&i/o-port-rtd q4c37@q4c32) (set! q4c4a@&i/o-port-rcd q4c3b@q4c33) (set! q4c50@q4c4b (make-record-type-descriptor '&i/o-decoding q4c37@q4c32 'q4c4e '#f '#f '#())) (set! q4c52@q4c4d '#f) (set! q4c54@q4c4c (make-record-constructor-descriptor q4c50@q4c4b q4c3b@q4c33 q4c52@q4c4d)) (set! q4c57@p? (record-predicate q4c50@q4c4b)) (set! q4c59@make-i/o-decoding-error (record-constructor q4c54@q4c4c)) (set! q4c5b@i/o-decoding-error? (condition-predicate q4c50@q4c4b)) (set! q4c5d@&i/o-decoding-rtd q4c50@q4c4b) (set! q4c5f@&i/o-decoding-rcd q4c54@q4c4c) (set! q4c67@q4c62 (make-record-type-descriptor '&i/o-encoding q4c37@q4c32 'q4c65 '#f '#f '#((immutable char)))) (set! q4c69@q4c64 '#f) (set! q4c6b@q4c63 (make-record-constructor-descriptor q4c67@q4c62 q4c3b@q4c33 q4c69@q4c64)) (set! q4c6e@p? (record-predicate q4c67@q4c62)) (set! q4c70@make-i/o-encoding-error (record-constructor q4c6b@q4c63)) (set! q4c72@q4c61 (record-accessor q4c67@q4c62 '0)) (set! q4c74@i/o-encoding-error? (condition-predicate q4c67@q4c62)) (set! q4c76@i/o-encoding-error-char (condition-accessor q4c67@q4c62 q4c72@q4c61)) (set! q4c78@&i/o-encoding-rtd q4c67@q4c62) (set! q4c7a@&i/o-encoding-rcd q4c6b@q4c63) (set! q4c80@q4c7b (make-record-type-descriptor '&no-infinities q4b0c@q4b07 'q4c7e '#f '#f '#())) (set! q4c82@q4c7d '#f) (set! q4c84@q4c7c (make-record-constructor-descriptor q4c80@q4c7b q4b10@q4b08 q4c82@q4c7d)) (set! q4c87@p? (record-predicate q4c80@q4c7b)) (set! q4c89@make-no-infinities-violation (record-constructor q4c84@q4c7c)) (set! q4c8b@no-infinities-violation? (condition-predicate q4c80@q4c7b)) (set! q4c8d@&no-infinities-rtd q4c80@q4c7b) (set! q4c8f@&no-infinities-rcd q4c84@q4c7c) (set! q4c95@q4c90 (make-record-type-descriptor '&no-nans q4b0c@q4b07 'q4c93 '#f '#f '#())) (set! q4c97@q4c92 '#f) (set! q4c99@q4c91 (make-record-constructor-descriptor q4c95@q4c90 q4b10@q4b08 q4c97@q4c92)) (set! q4c9c@p? (record-predicate q4c95@q4c90)) (set! q4c9e@make-no-nans-violation (record-constructor q4c99@q4c91)) (set! q4ca0@no-nans-violation? (condition-predicate q4c95@q4c90)) (set! q4ca2@&no-nans-rtd q4c95@q4c90) (set! q4ca4@&no-nans-rcd q4c99@q4c91) (begin (set! q4d95@q4ca4@&no-nans-rcd q4ca4@&no-nans-rcd) (set! q4d94@q4ca2@&no-nans-rtd q4ca2@&no-nans-rtd) (set! q4d93@q4ca0@no-nans-violation? q4ca0@no-nans-violation?) (set! q4d92@q4c9e@make-no-nans-violation q4c9e@make-no-nans-violation) (set! q4d91@q4c9c@p? q4c9c@p?) (set! q4d90@q4c99@q4c91 q4c99@q4c91) (set! q4d8f@q4c97@q4c92 q4c97@q4c92) (set! q4d8e@q4c95@q4c90 q4c95@q4c90) (set! q4d8d@q4c8f@&no-infinities-rcd q4c8f@&no-infinities-rcd) (set! q4d8c@q4c8d@&no-infinities-rtd q4c8d@&no-infinities-rtd) (set! q4d8b@q4c8b@no-infinities-violation? q4c8b@no-infinities-violation?) (set! q4d8a@q4c89@make-no-infinities-violation q4c89@make-no-infinities-violation) (set! q4d89@q4c87@p? q4c87@p?) (set! q4d88@q4c84@q4c7c q4c84@q4c7c) (set! q4d87@q4c82@q4c7d q4c82@q4c7d) (set! q4d86@q4c80@q4c7b q4c80@q4c7b) (set! q4d85@q4c7a@&i/o-encoding-rcd q4c7a@&i/o-encoding-rcd) (set! q4d84@q4c78@&i/o-encoding-rtd q4c78@&i/o-encoding-rtd) (set! q4d83@q4c76@i/o-encoding-error-char q4c76@i/o-encoding-error-char) (set! q4d82@q4c74@i/o-encoding-error? q4c74@i/o-encoding-error?) (set! q4d81@q4c72@q4c61 q4c72@q4c61) (set! q4d80@q4c70@make-i/o-encoding-error q4c70@make-i/o-encoding-error) (set! q4d7f@q4c6e@p? q4c6e@p?) (set! q4d7e@q4c6b@q4c63 q4c6b@q4c63) (set! q4d7d@q4c69@q4c64 q4c69@q4c64) (set! q4d7c@q4c67@q4c62 q4c67@q4c62) (set! q4d7b@q4c5f@&i/o-decoding-rcd q4c5f@&i/o-decoding-rcd) (set! q4d7a@q4c5d@&i/o-decoding-rtd q4c5d@&i/o-decoding-rtd) (set! q4d79@q4c5b@i/o-decoding-error? q4c5b@i/o-decoding-error?) (set! q4d78@q4c59@make-i/o-decoding-error q4c59@make-i/o-decoding-error) (set! q4d77@q4c57@p? q4c57@p?) (set! q4d76@q4c54@q4c4c q4c54@q4c4c) (set! q4d75@q4c52@q4c4d q4c52@q4c4d) (set! q4d74@q4c50@q4c4b q4c50@q4c4b) (set! q4d73@q4c4a@&i/o-port-rcd q4c4a@&i/o-port-rcd) (set! q4d72@q4c48@&i/o-port-rtd q4c48@&i/o-port-rtd) (set! q4d71@q4c46@i/o-error-port q4c46@i/o-error-port) (set! q4d70@q4c44@i/o-port-error? q4c44@i/o-port-error?) (set! q4d6f@q4c42@q4c31 q4c42@q4c31) (set! q4d6e@q4c40@make-i/o-port-error q4c40@make-i/o-port-error) (set! q4d6d@q4c3e@p? q4c3e@p?) (set! q4d6c@q4c3b@q4c33 q4c3b@q4c33) (set! q4d6b@q4c39@q4c34 q4c39@q4c34) (set! q4d6a@q4c37@q4c32 q4c37@q4c32) (set! q4d69@q4c2f@&i/o-file-does-not-exist-rcd q4c2f@&i/o-file-does-not-exist-rcd) (set! q4d68@q4c2d@&i/o-file-does-not-exist-rtd q4c2d@&i/o-file-does-not-exist-rtd) (set! q4d67@q4c2b@i/o-file-does-not-exist-error? q4c2b@i/o-file-does-not-exist-error?) (set! q4d66@q4c29@make-i/o-file-does-not-exist-error q4c29@make-i/o-file-does-not-exist-error) (set! q4d65@q4c27@p? q4c27@p?) (set! q4d64@q4c24@q4c1c q4c24@q4c1c) (set! q4d63@q4c22@q4c1d q4c22@q4c1d) (set! q4d62@q4c20@q4c1b q4c20@q4c1b) (set! q4d61@q4c1a@&i/o-file-already-exists-rcd q4c1a@&i/o-file-already-exists-rcd) (set! q4d60@q4c18@&i/o-file-already-exists-rtd q4c18@&i/o-file-already-exists-rtd) (set! q4d5f@q4c16@i/o-file-already-exists-error? q4c16@i/o-file-already-exists-error?) (set! q4d5e@q4c14@make-i/o-file-already-exists-error q4c14@make-i/o-file-already-exists-error) (set! q4d5d@q4c12@p? q4c12@p?) (set! q4d5c@q4c0f@q4c07 q4c0f@q4c07) (set! q4d5b@q4c0d@q4c08 q4c0d@q4c08) (set! q4d5a@q4c0b@q4c06 q4c0b@q4c06) (set! q4d59@q4c05@&i/o-file-is-read-only-rcd q4c05@&i/o-file-is-read-only-rcd) (set! q4d58@q4c03@&i/o-file-is-read-only-rtd q4c03@&i/o-file-is-read-only-rtd) (set! q4d57@q4c01@i/o-file-is-read-only-error? q4c01@i/o-file-is-read-only-error?) (set! q4d56@q4bff@make-i/o-file-is-read-only-error q4bff@make-i/o-file-is-read-only-error) (set! q4d55@q4bfd@p? q4bfd@p?) (set! q4d54@q4bfa@q4bf2 q4bfa@q4bf2) (set! q4d53@q4bf8@q4bf3 q4bf8@q4bf3) (set! q4d52@q4bf6@q4bf1 q4bf6@q4bf1) (set! q4d51@q4bf0@&i/o-file-protection-rcd q4bf0@&i/o-file-protection-rcd) (set! q4d50@q4bee@&i/o-file-protection-rtd q4bee@&i/o-file-protection-rtd) (set! q4d4f@q4bec@i/o-file-protection-error? q4bec@i/o-file-protection-error?) (set! q4d4e@q4bea@make-i/o-file-protection-error q4bea@make-i/o-file-protection-error) (set! q4d4d@q4be8@p? q4be8@p?) (set! q4d4c@q4be5@q4bdd q4be5@q4bdd) (set! q4d4b@q4be3@q4bde q4be3@q4bde) (set! q4d4a@q4be1@q4bdc q4be1@q4bdc) (set! q4d49@q4bdb@&i/o-filename-rcd q4bdb@&i/o-filename-rcd) (set! q4d48@q4bd9@&i/o-filename-rtd q4bd9@&i/o-filename-rtd) (set! q4d47@q4bd7@i/o-error-filename q4bd7@i/o-error-filename) (set! q4d46@q4bd5@i/o-filename-error? q4bd5@i/o-filename-error?) (set! q4d45@q4bd3@q4bc2 q4bd3@q4bc2) (set! q4d44@q4bd1@make-i/o-filename-error q4bd1@make-i/o-filename-error) (set! q4d43@q4bcf@p? q4bcf@p?) (set! q4d42@q4bcc@q4bc4 q4bcc@q4bc4) (set! q4d41@q4bca@q4bc5 q4bca@q4bc5) (set! q4d40@q4bc8@q4bc3 q4bc8@q4bc3) (set! q4d3f@q4bc0@&i/o-invalid-position-rcd q4bc0@&i/o-invalid-position-rcd) (set! q4d3e@q4bbe@&i/o-invalid-position-rtd q4bbe@&i/o-invalid-position-rtd) (set! q4d3d@q4bbc@i/o-error-position q4bbc@i/o-error-position) (set! q4d3c@q4bba@i/o-invalid-position-error? q4bba@i/o-invalid-position-error?) (set! q4d3b@q4bb8@q4ba7 q4bb8@q4ba7) (set! q4d3a@q4bb6@make-i/o-invalid-position-error q4bb6@make-i/o-invalid-position-error) (set! q4d39@q4bb4@p? q4bb4@p?) (set! q4d38@q4bb1@q4ba9 q4bb1@q4ba9) (set! q4d37@q4baf@q4baa q4baf@q4baa) (set! q4d36@q4bad@q4ba8 q4bad@q4ba8) (set! q4d35@q4ba5@&i/o-write-rcd q4ba5@&i/o-write-rcd) (set! q4d34@q4ba3@&i/o-write-rtd q4ba3@&i/o-write-rtd) (set! q4d33@q4ba1@i/o-write-error? q4ba1@i/o-write-error?) (set! q4d32@q4b9f@make-i/o-write-error q4b9f@make-i/o-write-error) (set! q4d31@q4b9d@p? q4b9d@p?) (set! q4d30@q4b9a@q4b92 q4b9a@q4b92) (set! q4d2f@q4b98@q4b93 q4b98@q4b93) (set! q4d2e@q4b96@q4b91 q4b96@q4b91) (set! q4d2d@q4b90@&i/o-read-rcd q4b90@&i/o-read-rcd) (set! q4d2c@q4b8e@&i/o-read-rtd q4b8e@&i/o-read-rtd) (set! q4d2b@q4b8c@i/o-read-error? q4b8c@i/o-read-error?) (set! q4d2a@q4b8a@make-i/o-read-error q4b8a@make-i/o-read-error) (set! q4d29@q4b88@p? q4b88@p?) (set! q4d28@q4b85@q4b7d q4b85@q4b7d) (set! q4d27@q4b83@q4b7e q4b83@q4b7e) (set! q4d26@q4b81@q4b7c q4b81@q4b7c) (set! q4d25@q4b7b@&i/o-rcd q4b7b@&i/o-rcd) (set! q4d24@q4b79@&i/o-rtd q4b79@&i/o-rtd) (set! q4d23@q4b77@i/o-error? q4b77@i/o-error?) (set! q4d22@q4b75@make-i/o-error q4b75@make-i/o-error) (set! q4d21@q4b73@p? q4b73@p?) (set! q4d20@q4b70@q4b68 q4b70@q4b68) (set! q4d1f@q4b6e@q4b69 q4b6e@q4b69) (set! q4d1e@q4b6c@q4b67 q4b6c@q4b67) (set! q4d1d@q4b66@&undefined-rcd q4b66@&undefined-rcd) (set! q4d1c@q4b64@&undefined-rtd q4b64@&undefined-rtd) (set! q4d1b@q4b62@undefined-violation? q4b62@undefined-violation?) (set! q4d1a@q4b60@make-undefined-violation q4b60@make-undefined-violation) (set! q4d19@q4b5e@p? q4b5e@p?) (set! q4d18@q4b5b@q4b53 q4b5b@q4b53) (set! q4d17@q4b59@q4b54 q4b59@q4b54) (set! q4d16@q4b57@q4b52 q4b57@q4b52) (set! q4d15@q4b51@&syntax-rcd q4b51@&syntax-rcd) (set! q4d14@q4b4f@&syntax-rtd q4b4f@&syntax-rtd) (set! q4d13@q4b4d@syntax-violation-subform q4b4d@syntax-violation-subform) (set! q4d12@q4b4b@syntax-violation-form q4b4b@syntax-violation-form) (set! q4d11@q4b49@syntax-violation? q4b49@syntax-violation?) (set! q4d10@q4b47@q4b34 q4b47@q4b34) (set! q4d0f@q4b45@q4b32 q4b45@q4b32) (set! q4d0e@q4b43@make-syntax-violation q4b43@make-syntax-violation) (set! q4d0d@q4b41@p? q4b41@p?) (set! q4d0c@q4b3e@q4b36 q4b3e@q4b36) (set! q4d0b@q4b3c@q4b37 q4b3c@q4b37) (set! q4d0a@q4b3a@q4b35 q4b3a@q4b35) (set! q4d09@q4b30@&lexical-rcd q4b30@&lexical-rcd) (set! q4d08@q4b2e@&lexical-rtd q4b2e@&lexical-rtd) (set! q4d07@q4b2c@lexical-violation? q4b2c@lexical-violation?) (set! q4d06@q4b2a@make-lexical-violation q4b2a@make-lexical-violation) (set! q4d05@q4b28@p? q4b28@p?) (set! q4d04@q4b25@q4b1d q4b25@q4b1d) (set! q4d03@q4b23@q4b1e q4b23@q4b1e) (set! q4d02@q4b21@q4b1c q4b21@q4b1c) (set! q4d01@q4b1b@&implementation-restriction-rcd q4b1b@&implementation-restriction-rcd) (set! q4d00@q4b19@&implementation-restriction-rtd q4b19@&implementation-restriction-rtd) (set! q4cff@q4b17@implementation-restriction-violation? q4b17@implementation-restriction-violation?) (set! q4cfe@q4b15@make-implementation-restriction-violation q4b15@make-implementation-restriction-violation) (set! q4cfd@q4b13@p? q4b13@p?) (set! q4cfc@q4b10@q4b08 q4b10@q4b08) (set! q4cfb@q4b0e@q4b09 q4b0e@q4b09) (set! q4cfa@q4b0c@q4b07 q4b0c@q4b07) (set! q4cf9@q4b06@&non-continuable-rcd q4b06@&non-continuable-rcd) (set! q4cf8@q4b04@&non-continuable-rtd q4b04@&non-continuable-rtd) (set! q4cf7@q4b02@non-continuable-violation? q4b02@non-continuable-violation?) (set! q4cf6@q4b00@make-non-continuable-violation q4b00@make-non-continuable-violation) (set! q4cf5@q4afe@p? q4afe@p?) (set! q4cf4@q4afb@q4af3 q4afb@q4af3) (set! q4cf3@q4af9@q4af4 q4af9@q4af4) (set! q4cf2@q4af7@q4af2 q4af7@q4af2) (set! q4cf1@q4af1@&who-rcd q4af1@&who-rcd) (set! q4cf0@q4aef@&who-rtd q4aef@&who-rtd) (set! q4cef@q4aed@condition-who q4aed@condition-who) (set! q4cee@q4aeb@who-condition? q4aeb@who-condition?) (set! q4ced@q4ae9@q4ad8 q4ae9@q4ad8) (set! q4cec@q4ae7@make-who-condition q4ae7@make-who-condition) (set! q4ceb@q4ae5@p? q4ae5@p?) (set! q4cea@q4ae2@q4ada q4ae2@q4ada) (set! q4ce9@q4ae0@q4adb q4ae0@q4adb) (set! q4ce8@q4ade@q4ad9 q4ade@q4ad9) (set! q4ce7@q4ad6@&irritants-rcd q4ad6@&irritants-rcd) (set! q4ce6@q4ad4@&irritants-rtd q4ad4@&irritants-rtd) (set! q4ce5@q4ad2@condition-irritants q4ad2@condition-irritants) (set! q4ce4@q4ad0@irritants-condition? q4ad0@irritants-condition?) (set! q4ce3@q4ace@q4abd q4ace@q4abd) (set! q4ce2@q4acc@make-irritants-condition q4acc@make-irritants-condition) (set! q4ce1@q4aca@p? q4aca@p?) (set! q4ce0@q4ac7@q4abf q4ac7@q4abf) (set! q4cdf@q4ac5@q4ac0 q4ac5@q4ac0) (set! q4cde@q4ac3@q4abe q4ac3@q4abe) (set! q4cdd@q4abb@&assertion-rcd q4abb@&assertion-rcd) (set! q4cdc@q4ab9@&assertion-rtd q4ab9@&assertion-rtd) (set! q4cdb@q4ab7@assertion-violation? q4ab7@assertion-violation?) (set! q4cda@q4ab5@make-assertion-violation q4ab5@make-assertion-violation) (set! q4cd9@q4ab3@p? q4ab3@p?) (set! q4cd8@q4ab0@q4aa8 q4ab0@q4aa8) (set! q4cd7@q4aae@q4aa9 q4aae@q4aa9) (set! q4cd6@q4aac@q4aa7 q4aac@q4aa7) (set! q4cd5@q4aa6@&violation-rcd q4aa6@&violation-rcd) (set! q4cd4@q4aa4@&violation-rtd q4aa4@&violation-rtd) (set! q4cd3@q4aa2@violation? q4aa2@violation?) (set! q4cd2@q4aa0@make-violation q4aa0@make-violation) (set! q4cd1@q4a9e@p? q4a9e@p?) (set! q4cd0@q4a9b@q4a93 q4a9b@q4a93) (set! q4ccf@q4a99@q4a94 q4a99@q4a94) (set! q4cce@q4a97@q4a92 q4a97@q4a92) (set! q4ccd@q4a91@&error-rcd q4a91@&error-rcd) (set! q4ccc@q4a8f@&error-rtd q4a8f@&error-rtd) (set! q4ccb@q4a8d@error? q4a8d@error?) (set! q4cca@q4a8b@make-error q4a8b@make-error) (set! q4cc9@q4a89@p? q4a89@p?) (set! q4cc8@q4a86@q4a7e q4a86@q4a7e) (set! q4cc7@q4a84@q4a7f q4a84@q4a7f) (set! q4cc6@q4a82@q4a7d q4a82@q4a7d) (set! q4cc5@q4a7c@&serious-rcd q4a7c@&serious-rcd) (set! q4cc4@q4a7a@&serious-rtd q4a7a@&serious-rtd) (set! q4cc3@q4a78@serious-condition? q4a78@serious-condition?) (set! q4cc2@q4a76@make-serious-condition q4a76@make-serious-condition) (set! q4cc1@q4a74@p? q4a74@p?) (set! q4cc0@q4a71@q4a69 q4a71@q4a69) (set! q4cbf@q4a6f@q4a6a q4a6f@q4a6a) (set! q4cbe@q4a6d@q4a68 q4a6d@q4a68) (set! q4cbd@q4a67@&warning-rcd q4a67@&warning-rcd) (set! q4cbc@q4a65@&warning-rtd q4a65@&warning-rtd) (set! q4cbb@q4a63@warning? q4a63@warning?) (set! q4cba@q4a61@make-warning q4a61@make-warning) (set! q4cb9@q4a5f@p? q4a5f@p?) (set! q4cb8@q4a5c@q4a54 q4a5c@q4a54) (set! q4cb7@q4a5a@q4a55 q4a5a@q4a55) (set! q4cb6@q4a58@q4a53 q4a58@q4a53) (set! q4cb5@q4a52@&message-rcd q4a52@&message-rcd) (set! q4cb4@q4a50@&message-rtd q4a50@&message-rtd) (set! q4cb3@q4a4e@condition-message q4a4e@condition-message) (set! q4cb2@q4a4c@message-condition? q4a4c@message-condition?) (set! q4cb1@q4a4a@q4a39 q4a4a@q4a39) (set! q4cb0@q4a48@make-message-condition q4a48@make-message-condition) (set! q4caf@q4a46@p? q4a46@p?) (set! q4cae@q4a43@q4a3b q4a43@q4a3b) (set! q4cad@q4a41@q4a3c q4a41@q4a3c) (set! q4cac@q4a3f@q4a3a q4a3f@q4a3a) (set! q4cab@q49f3@&condition-rcd q49f3@&condition-rcd) (set! q4caa@q49f1@&condition-rtd q49f1@&condition-rtd) (set! q4ca9@q49ef@make-&condition q49ef@make-&condition) (set! q4ca8@q49ed@&condition? q49ed@&condition?) (set! q4ca7@q49ea@q49e2 q49ea@q49e2) (set! q4ca6@q49e8@q49e3 q49e8@q49e3) (set! q4ca5@q49e6@q49e1 q49e6@q49e1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (q28ea@q289f@current-primitive-locations (lambda (q520c@x) ((lambda (q520e@t) (if q520e@t (cdr q520e@t) '#f)) (assq q520c@x '((&no-nans-rcd . q4d95@q4ca4@&no-nans-rcd) (&no-nans-rtd . q4d94@q4ca2@&no-nans-rtd) (&no-infinities-rcd . q4d8d@q4c8f@&no-infinities-rcd) (&no-infinities-rtd . q4d8c@q4c8d@&no-infinities-rtd) (&i/o-encoding-rcd . q4d85@q4c7a@&i/o-encoding-rcd) (&i/o-encoding-rtd . q4d84@q4c78@&i/o-encoding-rtd) (&i/o-decoding-rcd . q4d7b@q4c5f@&i/o-decoding-rcd) (&i/o-decoding-rtd . q4d7a@q4c5d@&i/o-decoding-rtd) (&i/o-port-rcd . q4d73@q4c4a@&i/o-port-rcd) (&i/o-port-rtd . q4d72@q4c48@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . q4d69@q4c2f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . q4d68@q4c2d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . q4d61@q4c1a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . q4d60@q4c18@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . q4d59@q4c05@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . q4d58@q4c03@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . q4d51@q4bf0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . q4d50@q4bee@&i/o-file-protection-rtd) (&i/o-filename-rcd . q4d49@q4bdb@&i/o-filename-rcd) (&i/o-filename-rtd . q4d48@q4bd9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . q4d3f@q4bc0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . q4d3e@q4bbe@&i/o-invalid-position-rtd) (&i/o-write-rcd . q4d35@q4ba5@&i/o-write-rcd) (&i/o-write-rtd . q4d34@q4ba3@&i/o-write-rtd) (&i/o-read-rcd . q4d2d@q4b90@&i/o-read-rcd) (&i/o-read-rtd . q4d2c@q4b8e@&i/o-read-rtd) (&i/o-rcd . q4d25@q4b7b@&i/o-rcd) (&i/o-rtd . q4d24@q4b79@&i/o-rtd) (&undefined-rcd . q4d1d@q4b66@&undefined-rcd) (&undefined-rtd . q4d1c@q4b64@&undefined-rtd) (&syntax-rcd . q4d15@q4b51@&syntax-rcd) (&syntax-rtd . q4d14@q4b4f@&syntax-rtd) (&lexical-rcd . q4d09@q4b30@&lexical-rcd) (&lexical-rtd . q4d08@q4b2e@&lexical-rtd) (&implementation-restriction-rcd . q4d01@q4b1b@&implementation-restriction-rcd) (&implementation-restriction-rtd . q4d00@q4b19@&implementation-restriction-rtd) (&non-continuable-rcd . q4cf9@q4b06@&non-continuable-rcd) (&non-continuable-rtd . q4cf8@q4b04@&non-continuable-rtd) (&who-rcd . q4cf1@q4af1@&who-rcd) (&who-rtd . q4cf0@q4aef@&who-rtd) (&irritants-rcd . q4ce7@q4ad6@&irritants-rcd) (&irritants-rtd . q4ce6@q4ad4@&irritants-rtd) (&assertion-rcd . q4cdd@q4abb@&assertion-rcd) (&assertion-rtd . q4cdc@q4ab9@&assertion-rtd) (&violation-rcd . q4cd5@q4aa6@&violation-rcd) (&violation-rtd . q4cd4@q4aa4@&violation-rtd) (&error-rcd . q4ccd@q4a91@&error-rcd) (&error-rtd . q4ccc@q4a8f@&error-rtd) (&serious-rcd . q4cc5@q4a7c@&serious-rcd) (&serious-rtd . q4cc4@q4a7a@&serious-rtd) (&warning-rcd . q4cbd@q4a67@&warning-rcd) (&warning-rtd . q4cbc@q4a65@&warning-rtd) (&message-rcd . q4cb5@q4a52@&message-rcd) (&message-rtd . q4cb4@q4a50@&message-rtd) (&condition-rcd . q4cab@q49f3@&condition-rcd) (&condition-rtd . q4caa@q49f1@&condition-rtd) (syntax-error . q49d3@q2fdf@syntax-error) (syntax-dispatch . q4968@q2efa@syntax-dispatch) (load . q4ec6@q4db1@load) (interaction-environment . q49db@q2fef@interaction-environment) (library-path . q2b01@q2990@library-path) (make-parameter . q2899@q27c3@make-parameter) (make-variable-transformer . q4926@q2d27@make-variable-transformer) (identifier? . q49d6@q2fe5@identifier?) (generate-temporaries . q49cc@q2fd1@generate-temporaries) (free-identifier=? . q49cd@q2fd3@free-identifier=?) (syntax->datum . q49d8@q2fe9@syntax->datum) (datum->syntax . q49d7@q2fe7@datum->syntax) (bound-identifier=? . q49ce@q2fd5@bound-identifier=?) (make-i/o-write-error . q4d32@q4b9f@make-i/o-write-error) (make-i/o-read-error . q4d2a@q4b8a@make-i/o-read-error) (make-i/o-port-error . q4d6e@q4c40@make-i/o-port-error) (make-i/o-invalid-position-error . q4d3a@q4bb6@make-i/o-invalid-position-error) (make-i/o-filename-error . q4d44@q4bd1@make-i/o-filename-error) (make-i/o-file-protection-error . q4d4e@q4bea@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . q4d56@q4bff@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . q4d66@q4c29@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . q4d5e@q4c14@make-i/o-file-already-exists-error) (make-i/o-error . q4d22@q4b75@make-i/o-error) (make-i/o-encoding-error . q4d80@q4c70@make-i/o-encoding-error) (make-i/o-decoding-error . q4d78@q4c59@make-i/o-decoding-error) (i/o-write-error? . q4d33@q4ba1@i/o-write-error?) (i/o-read-error? . q4d2b@q4b8c@i/o-read-error?) (i/o-port-error? . q4d70@q4c44@i/o-port-error?) (i/o-invalid-position-error? . q4d3c@q4bba@i/o-invalid-position-error?) (i/o-filename-error? . q4d46@q4bd5@i/o-filename-error?) (i/o-file-protection-error? . q4d4f@q4bec@i/o-file-protection-error?) (i/o-file-is-read-only-error? . q4d57@q4c01@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . q4d67@q4c2b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . q4d5f@q4c16@i/o-file-already-exists-error?) (i/o-error? . q4d23@q4b77@i/o-error?) (i/o-error-position . q4d3d@q4bbc@i/o-error-position) (i/o-error-port . q4d71@q4c46@i/o-error-port) (i/o-error-filename . q4d47@q4bd7@i/o-error-filename) (i/o-encoding-error? . q4d82@q4c74@i/o-encoding-error?) (i/o-encoding-error-char . q4d83@q4c76@i/o-encoding-error-char) (i/o-decoding-error? . q4d79@q4c5b@i/o-decoding-error?) (scheme-report-environment . q49c3@q2fbf@scheme-report-environment) (null-environment . q49c2@q2fbd@null-environment) (command-line . q4ec3@q4dab@command-line) (eval . q49c5@q2fc3@eval) (environment . q49c1@q2fbb@environment) (who-condition? . q4cee@q4aeb@who-condition?) (warning? . q4cbb@q4a63@warning?) (violation? . q4cd3@q4aa2@violation?) (undefined-violation? . q4d1b@q4b62@undefined-violation?) (syntax-violation? . q4d11@q4b49@syntax-violation?) (syntax-violation-subform . q4d13@q4b4d@syntax-violation-subform) (syntax-violation-form . q4d12@q4b4b@syntax-violation-form) (syntax-violation . q49d5@q2fe3@syntax-violation) (serious-condition? . q4cc3@q4a78@serious-condition?) (non-continuable-violation? . q4cf7@q4b02@non-continuable-violation?) (message-condition? . q4cb2@q4a4c@message-condition?) (make-who-condition . q4cec@q4ae7@make-who-condition) (make-warning . q4cba@q4a61@make-warning) (make-violation . q4cd2@q4aa0@make-violation) (make-undefined-violation . q4d1a@q4b60@make-undefined-violation) (make-syntax-violation . q4d0e@q4b43@make-syntax-violation) (make-serious-condition . q4cc2@q4a76@make-serious-condition) (make-non-continuable-violation . q4cf6@q4b00@make-non-continuable-violation) (make-message-condition . q4cb0@q4a48@make-message-condition) (make-lexical-violation . q4d06@q4b2a@make-lexical-violation) (make-irritants-condition . q4ce2@q4acc@make-irritants-condition) (make-implementation-restriction-violation . q4cfe@q4b15@make-implementation-restriction-violation) (make-error . q4cca@q4a8b@make-error) (make-assertion-violation . q4cda@q4ab5@make-assertion-violation) (lexical-violation? . q4d07@q4b2c@lexical-violation?) (irritants-condition? . q4ce4@q4ad0@irritants-condition?) (implementation-restriction-violation? . q4cff@q4b17@implementation-restriction-violation?) (error? . q4ccb@q4a8d@error?) (condition-who . q4cef@q4aed@condition-who) (condition-message . q4cb3@q4a4e@condition-message) (condition-irritants . q4ce5@q4ad2@condition-irritants) (assertion-violation? . q4cdb@q4ab7@assertion-violation?) (no-nans-violation? . q4d93@q4ca0@no-nans-violation?) (no-infinities-violation? . q4d8b@q4c8b@no-infinities-violation?) (make-no-nans-violation . q4d92@q4c9e@make-no-nans-violation) (make-no-infinities-violation . q4d8a@q4c89@make-no-infinities-violation) (assertion-error . q49d2@q2fdd@assertion-error)))))) (q2b11@q29b0@install-library 'q51e9 '(mosh interaction) '() '() '() '() '((regexp? . q51e1) (alist->eq-hash-table . q51de) (format . q51db) (string-split . q51d0) (call-process . q51ca) (set-current-directory! . q51c6) (expand-path . q51c5) (current-directory . q51c4) (%spawn . q51c3) (%waitpid . q51c2) (pointer-ref-c-int64 . q51c1) (pointer-ref-c-int32 . q51c0) (pointer-ref-c-int16 . q51bf) (pointer-ref-c-int8 . q51be) (pointer-ref-c-uint64 . q51bd) (pointer-ref-c-uint32 . q51bc) (pointer-ref-c-uint16 . q51bb) (pointer-ref-c-uint8 . q51ba) (pointer-set-c-uint64! . q51b9) (pointer-set-c-uint32! . q51b8) (pointer-set-c-uint16! . q51b7) (pointer-set-c-uint8! . q51b6) (pointer-set-c-int64! . q51b5) (pointer-set-c-int32! . q51b4) (pointer-set-c-int16! . q51b3) (pointer-set-c-int8! . q51b2) (pointer-set-c-pointer! . q51b1) (pointer-set-c-double! . q51b0) (pointer-set-c-float! . q51af) (pointer-set-c-long-long! . q51ae) (pointer-set-c-long! . q51ad) (pointer-set-c-int! . q51ac) (pointer-set-c-short! . q51ab) (pointer-set-c-char! . q51aa) (pointer-ref-c-pointer . q51a9) (pointer-ref-c-double . q51a8) (pointer-ref-c-float . q51a7) (pointer-ref-c-unsigned-long-long . q51a6) (pointer-ref-c-signed-long-long . q51a5) (pointer-ref-c-unsigned-long . q51a4) (pointer-ref-c-signed-long . q51a3) (pointer-ref-c-unsigned-int . q51a2) (pointer-ref-c-signed-int . q51a1) (pointer-ref-c-unsigned-short . q51a0) (pointer-ref-c-signed-short . q519f) (pointer-ref-c-unsigned-char . q519e) (pointer-ref-c-signed-char . q519d) (pointer->integer . q519c) (integer->pointer . q519b) (pointer? . q519a) (shared-errno . q5199) (%ffi-supported? . q5198) (%ffi-pointer->string . q5197) (%ffi-call->string-or-zero . q5196) (%ffi-call->double . q5195) (%ffi-call->void* . q5194) (%ffi-call->void . q5193) (%ffi-call->char . q5192) (%ffi-call->int . q5191) (%ffi-lookup . q5190) (%ffi-open . q518f) (%fork . q518e) (%pipe . q518d) (p . q518c) (whereis . q5176) (register . q5175) (vm-join! . q5174) (vm-set-value! . q5173) (vm? . q5172) (main-vm? . q5171) (vm-eval . q5170) (vm-self . q516f) (vm-start! . q516e) (make-vm . q516d) (mutex-try-lock! . q516c) (mutex-unlock! . q516b) (mutex-lock! . q516a) (mutex? . q5169) (make-mutex . q5168) (condition-variable-notify-all! . q5167) (condition-variable-notify! . q5166) (condition-variable-wait! . q5165) (make-condition-variable . q5164) (string-upcase . q514d) (string-titlecase . q514c) (string-normalize-nfkd . q514b) (string-normalize-nfkc . q514a) (string-normalize-nfd . q5149) (string-normalize-nfc . q5148) (string-foldcase . q5147) (string-downcase . q5146) (string-ci>? . q5145) (string-ci>=? . q5144) (string-ci=? . q5143) (string-ci<? . q5142) (string-ci<=? . q5141) (char-whitespace? . q5140) (char-upper-case? . q513f) (char-title-case? . q513e) (char-numeric? . q513d) (char-lower-case? . q513c) (char-general-category . q513b) (char-upcase . q513a) (char-titlecase . q5139) (char-foldcase . q5138) (char-downcase . q5137) (char-ci>? . q5136) (char-ci>=? . q5135) (char-ci=? . q5134) (char-ci<? . q5133) (char-ci<=? . q5132) (char-alphabetic? . q5131) (make-variable-transformer . q2d26) (identifier? . q2fe4) (generate-temporaries . q2fd0) (free-identifier=? . q2fd2) (syntax->datum . q2fe8) (datum->syntax . q2fe6) (bound-identifier=? . q2fd4) (record-type-descriptor? . q5130) (record-predicate . q512f) (record-mutator . q512e) (record-constructor . q512d) (record-accessor . q512c) (make-record-type-descriptor . q512b) (make-record-constructor-descriptor . q512a) (record? . q5129) (record-type-uid . q5128) (record-type-sealed? . q5127) (record-type-parent . q5126) (record-type-opaque? . q5125) (record-type-name . q5124) (record-type-generative? . q5123) (record-type-field-names . q5122) (record-rtd . q5121) (record-field-mutable? . q5120) (delete-file . q511f) (file-exists? . q511e) (vector-sort! . q511d) (vector-sort . q511c) (list-sort . q511b) (symbol-hash . q511a) (string-ci-hash . q5119) (string-hash . q5118) (equal-hash . q5117) (hashtable-equivalence-function . q5116) (make-hashtable . q5115) (hashtable-hash-function . q5114) (make-eqv-hashtable . q5113) (make-eq-hashtable . q5112) (hashtable? . q5111) (hashtable-update! . q5110) (hashtable-size . q510f) (hashtable-set! . q510e) (hashtable-ref . q510d) (hashtable-mutable? . q510c) (hashtable-keys . q510b) (hashtable-entries . q510a) (hashtable-delete! . q5109) (hashtable-copy . q5108) (hashtable-contains? . q5107) (hashtable-clear! . q5106) (call-with-output-file . q5105) (call-with-input-file . q5104) (write-char . q5103) (write . q5102) (with-output-to-file . q5101) (with-input-from-file . q5100) (read-char . q50ff) (read . q50fe) (peek-char . q50fd) (open-output-file . q50fc) (open-input-file . q50fb) (newline . q50fa) (display . q50f9) (close-output-port . q50f8) (close-input-port . q50f7) (eof-object? . q50f6) (eof-object . q50f5) (current-error-port . q50f4) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (utf-8-codec . q50ef) (utf-16-codec . q50ee) (transcoder-error-handling-mode . q50ed) (transcoder-eol-style . q50ec) (transcoder-codec . q50eb) (transcoded-port . q50ea) (textual-port? . q50e9) (string->bytevector . q50e8) (standard-output-port . q50e7) (standard-input-port . q50e6) (standard-error-port . q50e5) (set-port-position! . q50e4) (put-u8 . q50e3) (put-string . q50e2) (put-datum . q50e1) (put-char . q50e0) (put-bytevector . q50df) (port? . q50de) (port-transcoder . q50dd) (port-position . q50dc) (port-has-set-port-position!? . q50db) (port-has-port-position? . q50da) (port-eof? . q50d9) (output-port-buffer-mode . q50d8) (open-string-output-port . q50d7) (open-string-input-port . q50d6) (open-file-output-port . q50d5) (open-file-input/output-port . q50d4) (open-file-input-port . q50d3) (open-bytevector-output-port . q50d2) (open-bytevector-input-port . q50d1) (native-transcoder . q50d0) (native-eol-style . q50cf) (make-transcoder . q50ce) (latin-1-codec . q50cd) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (make-i/o-encoding-error . q4c6f) (make-i/o-decoding-error . q4c58) (make-custom-textual-output-port . q50cc) (make-custom-textual-input/output-port . q50cb) (make-custom-textual-input-port . q50ca) (make-custom-binary-output-port . q50c9) (make-custom-binary-input/output-port . q50c8) (make-custom-binary-input-port . q50c7) (make-bytevector . q50c6) (lookahead-u8 . q50c5) (lookahead-char . q50c4) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (i/o-encoding-error? . q4c73) (i/o-encoding-error-char . q4c75) (i/o-decoding-error? . q4c5a) (get-u8 . q50c3) (get-string-n! . q50c2) (get-string-n . q50c1) (get-string-all . q50c0) (get-line . q50bf) (get-datum . q50be) (get-char . q50bd) (get-bytevector-some . q50bc) (get-bytevector-n! . q50bb) (get-bytevector-n . q50ba) (get-bytevector-all . q50b9) (flush-output-port . q50b8) (close-port . q50b7) (exit . q50af) (command-line . q4daa) (string-fill! . q50ae) (string-set! . q50ad) (set-cdr! . q50ac) (set-car! . q50ab) (remove . q50aa) (remv . q50a9) (remp . q50a8) (remq . q50a7) (partition . q50a6) (memv . q50a5) (memq . q50a4) (memp . q50a3) (member . q50a2) (exists . q50a1) (for-all . q50a0) (fold-right . q509f) (fold-left . q509e) (find . q509d) (filter . q509c) (cons* . q509b) (assv . q509a) (assq . q5099) (assp . q5098) (assoc . q5097) (call-with-string-output-port . q5096) (call-with-port . q5095) (call-with-bytevector-output-port . q5094) (bytevector->string . q5093) (buffer-mode? . q5092) (binary-port? . q5091) (with-exception-handler . q5090) (raise-continuable . q508f) (raise . q508e) (eval . q2fc2) (environment . q2fba) (make-enumeration . q508d) (enum-set=? . q508c) (enum-set-universe . q508b) (enum-set-union . q508a) (enum-set-subset? . q5089) (enum-set-projection . q5088) (enum-set-member? . q5087) (enum-set-intersection . q5086) (enum-set-indexer . q5085) (enum-set-difference . q5084) (enum-set-constructor . q5083) (enum-set-complement . q5082) (enum-set->list . q5081) (who-condition? . q4aea) (warning? . q4a62) (violation? . q4aa1) (undefined-violation? . q4b61) (syntax-violation? . q4b48) (syntax-violation-subform . q4b4c) (syntax-violation-form . q4b4a) (syntax-violation . q2fe2) (simple-conditions . q5080) (serious-condition? . q4a77) (non-continuable-violation? . q4b01) (message-condition? . q4a4b) (make-who-condition . q4ae6) (make-warning . q4a60) (make-violation . q4a9f) (make-undefined-violation . q4b5f) (make-syntax-violation . q4b42) (make-serious-condition . q4a75) (make-non-continuable-violation . q4aff) (make-message-condition . q4a47) (make-lexical-violation . q4b29) (make-irritants-condition . q4acb) (make-implementation-restriction-violation . q4b14) (make-error . q4a8a) (make-assertion-violation . q4ab4) (lexical-violation? . q4b2b) (irritants-condition? . q4acf) (implementation-restriction-violation? . q4b16) (error? . q4a8c) (condition-who . q4aec) (condition-predicate . q507f) (condition-message . q4a4d) (condition-irritants . q4ad1) (condition-accessor . q507e) (condition . q507d) (assertion-violation? . q4ab6) (condition? . q507c) (utf32->string . q507b) (utf16->string . q507a) (utf8->string . q5079) (uint-list->bytevector . q5078) (u8-list->bytevector . q5077) (string->utf8 . q5076) (string->utf32 . q5075) (string->utf16 . q5074) (sint-list->bytevector . q5073) (native-endianness . q5072) (bytevector? . q5071) (bytevector=? . q5070) (bytevector-uint-set! . q506f) (bytevector-uint-ref . q506e) (bytevector-u8-set! . q506d) (bytevector-u8-ref . q506c) (bytevector-u64-set! . q506b) (bytevector-u64-ref . q506a) (bytevector-u64-native-set! . q5069) (bytevector-u64-native-ref . q5068) (bytevector-u32-set! . q5067) (bytevector-u32-ref . q5066) (bytevector-u32-native-set! . q5065) (bytevector-u32-native-ref . q5064) (bytevector-u16-set! . q5063) (bytevector-u16-ref . q5062) (bytevector-u16-native-set! . q5061) (bytevector-u16-native-ref . q5060) (bytevector-sint-set! . q505f) (bytevector-sint-ref . q505e) (bytevector-s8-set! . q505d) (bytevector-s8-ref . q505c) (bytevector-s64-set! . q505b) (bytevector-s64-ref . q505a) (bytevector-s64-native-set! . q5059) (bytevector-s64-native-ref . q5058) (bytevector-s32-set! . q5057) (bytevector-s32-ref . q5056) (bytevector-s32-native-set! . q5055) (bytevector-s32-native-ref . q5054) (bytevector-s16-set! . q5053) (bytevector-s16-ref . q5052) (bytevector-s16-native-set! . q5051) (bytevector-s16-native-ref . q5050) (bytevector-length . q504f) (bytevector-ieee-single-ref . q504e) (bytevector-ieee-single-set! . q504d) (bytevector-ieee-single-native-set! . q504c) (bytevector-ieee-single-native-ref . q504b) (bytevector-ieee-double-set! . q504a) (bytevector-ieee-double-ref . q5049) (bytevector-ieee-double-native-set! . q5048) (bytevector-ieee-double-native-ref . q5047) (bytevector-fill! . q5046) (bytevector-copy! . q5045) (bytevector-copy . q5044) (bytevector->uint-list . q5043) (bytevector->u8-list . q5042) (bytevector->sint-list . q5041) (no-nans-violation? . q4c9f) (no-infinities-violation? . q4c8a) (make-no-nans-violation . q4c9d) (make-no-infinities-violation . q4c88) (real->flonum . q5040) (flzero? . q503f) (fltruncate . q503e) (fltan . q503d) (flsqrt . q503c) (flsin . q503b) (flround . q503a) (flpositive? . q5039) (flonum? . q5038) (flodd? . q5037) (flnumerator . q5036) (flnegative? . q5035) (flnan? . q5034) (flmod0 . q5033) (flmod . q5032) (flmin . q5031) (flmax . q5030) (fllog . q502f) (flinteger? . q502e) (flinfinite? . q502d) (flfloor . q502c) (flfinite? . q502b) (flexpt . q502a) (flexp . q5029) (fleven? . q5028) (fldiv0-and-mod0 . q5027) (fldiv0 . q5026) (fldiv-and-mod . q5025) (fldiv . q5024) (fldenominator . q5023) (flcos . q5022) (flceiling . q5021) (flatan . q5020) (flasin . q501f) (flacos . q501e) (flabs . q501d) (fl>? . q501c) (fl>=? . q501b) (fl=? . q501a) (fl<? . q5019) (fl<=? . q5018) (fl/ . q5017) (fl- . q5016) (fl+ . q5015) (fl* . q5014) (fixnum->flonum . q5013) (fxzero? . q5012) (fxxor . q5011) (fxrotate-bit-field . q5010) (fxreverse-bit-field . q500f) (fxpositive? . q500e) (fxodd? . q500d) (fxnot . q500c) (fxnegative? . q500b) (fxmod0 . q500a) (fxmod . q5009) (fxmin . q5008) (fxmax . q5007) (fxlength . q5006) (fxior . q5005) (fxif . q5004) (fxfirst-bit-set . q5003) (fxeven? . q5002) (fxdiv0-and-mod0 . q5001) (fxdiv0 . q5000) (fxdiv-and-mod . q4fff) (fxdiv . q4ffe) (fxcopy-bit-field . q4ffd) (fxcopy-bit . q4ffc) (fxbit-set? . q4ffb) (fxbit-field . q4ffa) (fxbit-count . q4ff9) (fxarithmetic-shift-right . q4ff8) (fxarithmetic-shift-left . q4ff7) (fxarithmetic-shift . q4ff6) (fxand . q4ff5) (fx>? . q4ff4) (fx>=? . q4ff3) (fx=? . q4ff2) (fx<? . q4ff1) (fx<=? . q4ff0) (fx-/carry . q4fef) (fx- . q4fee) (fx+/carry . q4fed) (fx+ . q4fec) (fx*/carry . q4feb) (fx* . q4fea) (greatest-fixnum . q4fe9) (least-fixnum . q4fe8) (fixnum-width . q4fe7) (fixnum? . q4fe6) (bitwise-rotate-bit-field . q4fe5) (bitwise-reverse-bit-field . q4fe4) (bitwise-length . q4fe3) (bitwise-if . q4fe2) (bitwise-first-bit-set . q4fe1) (bitwise-copy-bit-field . q4fe0) (bitwise-copy-bit . q4fdf) (bitwise-bit-set? . q4fde) (bitwise-bit-field . q4fdd) (bitwise-bit-count . q4fdc) (bitwise-xor . q4fdb) (bitwise-ior . q4fda) (bitwise-and . q4fd9) (bitwise-not . q4fd8) (bitwise-arithmetic-shift-right . q4fd7) (bitwise-arithmetic-shift-left . q4fd6) (bitwise-arithmetic-shift . q4fd5) (zero? . q4fd4) (vector? . q4fd3) (vector-set! . q4fd2) (vector-ref . q4fd1) (vector-map . q4fd0) (vector-length . q4fcf) (vector-for-each . q4fce) (vector-fill! . q4fcd) (vector->list . q4fcc) (vector . q4fcb) (values . q4fca) (truncate . q4fc9) (tan . q4fc8) (symbol? . q4fc7) (symbol=? . q4fc6) (symbol->string . q4fc5) (substring . q4fc4) (string? . q4fc3) (string>? . q4fc2) (string>=? . q4fc1) (string=? . q4fc0) (string<? . q4fbf) (string<=? . q4fbe) (string-ref . q4fbd) (string-length . q4fbc) (string-for-each . q4fbb) (string-copy . q4fba) (string-append . q4fb9) (string->symbol . q4fb8) (string->number . q4fb7) (string->list . q4fb6) (string . q4fb5) (sqrt . q4fb4) (sin . q4fb3) (round . q4fb2) (reverse . q4fb1) (real? . q4fb0) (real-valued? . q4faf) (real-part . q4fae) (rationalize . q4fad) (rational? . q4fac) (rational-valued? . q4fab) (procedure? . q4faa) (positive? . q4fa9) (pair? . q4fa8) (odd? . q4fa7) (numerator . q4fa6) (number? . q4fa5) (number->string . q4fa4) (null? . q4fa3) (not . q4fa2) (negative? . q4fa1) (nan? . q4fa0) (min . q4f9f) (max . q4f9e) (map . q4f9d) (make-vector . q4f9c) (make-string . q4f9b) (make-rectangular . q4f9a) (make-polar . q4f99) (magnitude . q4f98) (log . q4f97) (list? . q4f96) (list-tail . q4f95) (list-ref . q4f94) (list->vector . q4f93) (list->string . q4f92) (list . q4f91) (length . q4f90) (lcm . q4f8f) (integer? . q4f8e) (integer-valued? . q4f8d) (integer->char . q4f8c) (infinite? . q4f8b) (inexact? . q4f8a) (inexact . q4f89) (imag-part . q4f88) (gcd . q4f87) (for-each . q4f86) (floor . q4f85) (finite? . q4f84) (expt . q4f83) (exp . q4f82) (exact? . q4f81) (exact-integer-sqrt . q4f80) (exact . q4f7f) (even? . q4f7e) (error . q4f7d) (eqv? . q4f7c) (equal? . q4f7b) (eq? . q4f7a) (dynamic-wind . q4f79) (div0-and-mod0 . q4f78) (mod0 . q4f77) (div0 . q4f76) (div-and-mod . q4f75) (mod . q4f74) (div . q4f73) (denominator . q4f72) (cos . q4f71) (cons . q4f70) (complex? . q4f6f) (char? . q4f6e) (char>? . q4f6d) (char>=? . q4f6c) (char=? . q4f6b) (char<? . q4f6a) (char<=? . q4f69) (char->integer . q4f68) (ceiling . q4f67) (call-with-values . q4f66) (call/cc . q4f65) (call-with-current-continuation . q4f64) (cddddr . q4f63) (cdddar . q4f62) (cddadr . q4f61) (cddaar . q4f60) (cdaddr . q4f5f) (cdadar . q4f5e) (cdaadr . q4f5d) (cdaaar . q4f5c) (cadddr . q4f5b) (caddar . q4f5a) (cadadr . q4f59) (cadaar . q4f58) (caaddr . q4f57) (caadar . q4f56) (caaadr . q4f55) (caaaar . q4f54) (cdddr . q4f53) (cddar . q4f52) (cdadr . q4f51) (cdaar . q4f50) (caddr . q4f4f) (cadar . q4f4e) (caadr . q4f4d) (caaar . q4f4c) (cddr . q4f4b) (cdar . q4f4a) (cadr . q4f49) (caar . q4f48) (cdr . q4f47) (car . q4f46) (boolean? . q4f45) (boolean=? . q4f44) (atan . q4f43) (assertion-violation . q4f42) (asin . q4f41) (apply . q4f40) (append . q4f3f) (angle . q4f3e) (acos . q4f3d) (abs . q4f3c) (/ . q4f3b) (* . q4f3a) (- . q4f39) (+ . q4f38) (>= . q4f37) (> . q4f36) (= . q4f35) (<= . q4f34) (< . q4f33) (library . q4f32) (&no-nans . q4f31) (&no-infinities . q4f30) (&i/o-encoding . q4f2f) (&i/o-decoding . q4f2e) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24) (&undefined . q4f23) (&syntax . q4f22) (&lexical . q4f21) (&implementation-restriction . q4f20) (&non-continuable . q4f1f) (&who . q4f1e) (&irritants . q4f1d) (&assertion . q4f1c) (&violation . q4f1b) (&error . q4f1a) (&serious . q4f19) (&warning . q4f18) (&message . q4f17) (&condition . q4f16) (define-condition-type . q4f15) (define-enumeration . q4f14) (define-record-type . q4f13) (parent-rtd . q4f12) (nongenerative . q4f11) (opaque . q4f10) (sealed . q4f0f) (protocol . q4f0e) (parent . q4f0d) (immutable . q4f0c) (mutable . q4f0b) (fields . q4f0a) (error-handling-mode . q4f09) (file-options . q4f08) (buffer-mode . q4f07) (eol-style . q4f06) (guard . q4f05) (unsyntax-splicing . q4f02) (unsyntax . q4f01) (unquote-splicing . q4f00) (unquote . q4eff) (_ . q4efe) (else . q4efd) (=> . q4efc) (... . q4efb) (assert . q4efa) (endianness . q4ef9) (time . q4ef7) (do . q4ef6) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (let*-values . q4ef2) (let-values . q4ef1) (identifier-syntax . q4ef0) (with-syntax . q4eef) (quasisyntax . q4eee) (quasiquote . q4eed) (syntax-rules . q4eec) (include . q4eeb) (record-constructor-descriptor . q4ee9) (record-type-descriptor . q4ee8) (case . q4ee7) (unless . q4ee5) (when . q4ee4) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec* . q4ee0) (letrec . q4edf) (case-lambda . q4edd) (lambda . q4edc) (syntax . q4edb) (syntax-case . q4eda) (quote . q4ed9) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (import . q4ed4) (begin . q4ed3) (define-syntax . q4ed1) (define . q4ed0)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ea '(psyntax null-environment-5) '() '() '() '() '((make-promise . q50b0) (unquote-splicing . q4f00) (unquote . q4eff) (_ . q4efe) (else . q4efd) (=> . q4efc) (... . q4efb) (delay . q4ef8) (do . q4ef6) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (quasiquote . q4eed) (syntax-rules . q4eec) (case . q4ee7) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec . q4edf) (lambda . q4edc) (quote . q4ed9) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (begin . q4ed3) (define-syntax . q4ed1) (define . q4ed0)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51eb '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . q5145) (string-ci>=? . q5144) (string-ci=? . q5143) (string-ci<? . q5142) (string-ci<=? . q5141) (char-whitespace? . q5140) (char-upper-case? . q513f) (char-numeric? . q513d) (char-lower-case? . q513c) (char-upcase . q513a) (char-downcase . q5137) (char-ci>? . q5136) (char-ci>=? . q5135) (char-ci=? . q5134) (char-ci<? . q5133) (char-ci<=? . q5132) (char-alphabetic? . q5131) (call-with-output-file . q5105) (call-with-input-file . q5104) (write-char . q5103) (write . q5102) (with-output-to-file . q5101) (with-input-from-file . q5100) (read-char . q50ff) (read . q50fe) (peek-char . q50fd) (open-output-file . q50fc) (open-input-file . q50fb) (newline . q50fa) (display . q50f9) (close-output-port . q50f8) (close-input-port . q50f7) (eof-object . q50f5) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (scheme-report-environment . q2fbe) (quotient . q50b6) (null-environment . q2fbc) (remainder . q50b5) (modulo . q50b4) (inexact->exact . q50b3) (force . q50b2) (exact->inexact . q50b1) (make-promise . q50b0) (string-fill! . q50ae) (string-set! . q50ad) (set-cdr! . q50ac) (set-car! . q50ab) (memv . q50a5) (memq . q50a4) (member . q50a2) (assv . q509a) (assq . q5099) (assoc . q5097) (eval . q2fc2) (zero? . q4fd4) (vector? . q4fd3) (vector-set! . q4fd2) (vector-ref . q4fd1) (vector-length . q4fcf) (vector-fill! . q4fcd) (vector->list . q4fcc) (vector . q4fcb) (values . q4fca) (truncate . q4fc9) (tan . q4fc8) (symbol? . q4fc7) (symbol->string . q4fc5) (substring . q4fc4) (string? . q4fc3) (string>? . q4fc2) (string>=? . q4fc1) (string=? . q4fc0) (string<? . q4fbf) (string<=? . q4fbe) (string-ref . q4fbd) (string-length . q4fbc) (string-copy . q4fba) (string-append . q4fb9) (string->symbol . q4fb8) (string->number . q4fb7) (string->list . q4fb6) (string . q4fb5) (sqrt . q4fb4) (sin . q4fb3) (round . q4fb2) (reverse . q4fb1) (real? . q4fb0) (real-part . q4fae) (rationalize . q4fad) (rational? . q4fac) (procedure? . q4faa) (positive? . q4fa9) (pair? . q4fa8) (odd? . q4fa7) (numerator . q4fa6) (number? . q4fa5) (number->string . q4fa4) (not . q4fa2) (negative? . q4fa1) (min . q4f9f) (max . q4f9e) (map . q4f9d) (make-vector . q4f9c) (make-string . q4f9b) (make-rectangular . q4f9a) (make-polar . q4f99) (magnitude . q4f98) (log . q4f97) (list? . q4f96) (list-tail . q4f95) (list-ref . q4f94) (list->vector . q4f93) (list->string . q4f92) (list . q4f91) (length . q4f90) (lcm . q4f8f) (integer? . q4f8e) (integer->char . q4f8c) (inexact? . q4f8a) (imag-part . q4f88) (gcd . q4f87) (for-each . q4f86) (floor . q4f85) (expt . q4f83) (exp . q4f82) (exact? . q4f81) (even? . q4f7e) (eqv? . q4f7c) (equal? . q4f7b) (eq? . q4f7a) (dynamic-wind . q4f79) (denominator . q4f72) (cos . q4f71) (cons . q4f70) (complex? . q4f6f) (char? . q4f6e) (char>? . q4f6d) (char>=? . q4f6c) (char=? . q4f6b) (char<? . q4f6a) (char<=? . q4f69) (char->integer . q4f68) (ceiling . q4f67) (call-with-values . q4f66) (call-with-current-continuation . q4f64) (cddddr . q4f63) (cdddar . q4f62) (cddadr . q4f61) (cddaar . q4f60) (cdaddr . q4f5f) (cdadar . q4f5e) (cdaadr . q4f5d) (cdaaar . q4f5c) (cadddr . q4f5b) (caddar . q4f5a) (cadadr . q4f59) (cadaar . q4f58) (caaddr . q4f57) (caadar . q4f56) (caaadr . q4f55) (caaaar . q4f54) (cdddr . q4f53) (cddar . q4f52) (cdadr . q4f51) (cdaar . q4f50) (caddr . q4f4f) (cadar . q4f4e) (caadr . q4f4d) (caaar . q4f4c) (cddr . q4f4b) (cdar . q4f4a) (cadr . q4f49) (caar . q4f48) (cdr . q4f47) (car . q4f46) (boolean? . q4f45) (atan . q4f43) (asin . q4f41) (apply . q4f40) (append . q4f3f) (angle . q4f3e) (acos . q4f3d) (abs . q4f3c) (/ . q4f3b) (* . q4f3a) (- . q4f39) (+ . q4f38) (>= . q4f37) (> . q4f36) (= . q4f35) (<= . q4f34) (< . q4f33) (unquote-splicing . q4f00) (unquote . q4eff) (else . q4efd) (=> . q4efc) (... . q4efb) (delay . q4ef8) (do . q4ef6) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (quasiquote . q4eed) (syntax-rules . q4eec) (case . q4ee7) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec . q4edf) (lambda . q4edc) (quote . q4ed9) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (begin . q4ed3) (define-syntax . q4ed1) (define . q4ed0)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ec '(psyntax modules) '() '() '() '() '((module . q4ed2)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ed '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ee '(rnrs) '(6) '() '() '() '((regexp? . q51e1) (string-upcase . q514d) (string-titlecase . q514c) (string-normalize-nfkd . q514b) (string-normalize-nfkc . q514a) (string-normalize-nfd . q5149) (string-normalize-nfc . q5148) (string-foldcase . q5147) (string-downcase . q5146) (string-ci>? . q5145) (string-ci>=? . q5144) (string-ci=? . q5143) (string-ci<? . q5142) (string-ci<=? . q5141) (char-whitespace? . q5140) (char-upper-case? . q513f) (char-title-case? . q513e) (char-numeric? . q513d) (char-lower-case? . q513c) (char-general-category . q513b) (char-upcase . q513a) (char-titlecase . q5139) (char-foldcase . q5138) (char-downcase . q5137) (char-ci>? . q5136) (char-ci>=? . q5135) (char-ci=? . q5134) (char-ci<? . q5133) (char-ci<=? . q5132) (char-alphabetic? . q5131) (make-variable-transformer . q2d26) (identifier? . q2fe4) (generate-temporaries . q2fd0) (free-identifier=? . q2fd2) (syntax->datum . q2fe8) (datum->syntax . q2fe6) (bound-identifier=? . q2fd4) (record-type-descriptor? . q5130) (record-predicate . q512f) (record-mutator . q512e) (record-constructor . q512d) (record-accessor . q512c) (make-record-type-descriptor . q512b) (make-record-constructor-descriptor . q512a) (record? . q5129) (record-type-uid . q5128) (record-type-sealed? . q5127) (record-type-parent . q5126) (record-type-opaque? . q5125) (record-type-name . q5124) (record-type-generative? . q5123) (record-type-field-names . q5122) (record-rtd . q5121) (record-field-mutable? . q5120) (delete-file . q511f) (file-exists? . q511e) (vector-sort! . q511d) (vector-sort . q511c) (list-sort . q511b) (symbol-hash . q511a) (string-ci-hash . q5119) (string-hash . q5118) (equal-hash . q5117) (hashtable-equivalence-function . q5116) (make-hashtable . q5115) (hashtable-hash-function . q5114) (make-eqv-hashtable . q5113) (make-eq-hashtable . q5112) (hashtable? . q5111) (hashtable-update! . q5110) (hashtable-size . q510f) (hashtable-set! . q510e) (hashtable-ref . q510d) (hashtable-mutable? . q510c) (hashtable-keys . q510b) (hashtable-entries . q510a) (hashtable-delete! . q5109) (hashtable-copy . q5108) (hashtable-contains? . q5107) (hashtable-clear! . q5106) (call-with-output-file . q5105) (call-with-input-file . q5104) (write-char . q5103) (write . q5102) (with-output-to-file . q5101) (with-input-from-file . q5100) (read-char . q50ff) (read . q50fe) (peek-char . q50fd) (open-output-file . q50fc) (open-input-file . q50fb) (newline . q50fa) (display . q50f9) (close-output-port . q50f8) (close-input-port . q50f7) (eof-object? . q50f6) (eof-object . q50f5) (current-error-port . q50f4) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (utf-8-codec . q50ef) (utf-16-codec . q50ee) (transcoder-error-handling-mode . q50ed) (transcoder-eol-style . q50ec) (transcoder-codec . q50eb) (transcoded-port . q50ea) (textual-port? . q50e9) (string->bytevector . q50e8) (standard-output-port . q50e7) (standard-input-port . q50e6) (standard-error-port . q50e5) (set-port-position! . q50e4) (put-u8 . q50e3) (put-string . q50e2) (put-datum . q50e1) (put-char . q50e0) (put-bytevector . q50df) (port? . q50de) (port-transcoder . q50dd) (port-position . q50dc) (port-has-set-port-position!? . q50db) (port-has-port-position? . q50da) (port-eof? . q50d9) (output-port-buffer-mode . q50d8) (open-string-output-port . q50d7) (open-string-input-port . q50d6) (open-file-output-port . q50d5) (open-file-input/output-port . q50d4) (open-file-input-port . q50d3) (open-bytevector-output-port . q50d2) (open-bytevector-input-port . q50d1) (native-transcoder . q50d0) (native-eol-style . q50cf) (make-transcoder . q50ce) (latin-1-codec . q50cd) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (make-i/o-encoding-error . q4c6f) (make-i/o-decoding-error . q4c58) (make-custom-textual-output-port . q50cc) (make-custom-textual-input/output-port . q50cb) (make-custom-textual-input-port . q50ca) (make-custom-binary-output-port . q50c9) (make-custom-binary-input/output-port . q50c8) (make-custom-binary-input-port . q50c7) (make-bytevector . q50c6) (lookahead-u8 . q50c5) (lookahead-char . q50c4) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (i/o-encoding-error? . q4c73) (i/o-encoding-error-char . q4c75) (i/o-decoding-error? . q4c5a) (get-u8 . q50c3) (get-string-n! . q50c2) (get-string-n . q50c1) (get-string-all . q50c0) (get-line . q50bf) (get-datum . q50be) (get-char . q50bd) (get-bytevector-some . q50bc) (get-bytevector-n! . q50bb) (get-bytevector-n . q50ba) (get-bytevector-all . q50b9) (flush-output-port . q50b8) (close-port . q50b7) (exit . q50af) (command-line . q4daa) (remove . q50aa) (remv . q50a9) (remp . q50a8) (remq . q50a7) (partition . q50a6) (memv . q50a5) (memq . q50a4) (memp . q50a3) (member . q50a2) (exists . q50a1) (for-all . q50a0) (fold-right . q509f) (fold-left . q509e) (find . q509d) (filter . q509c) (cons* . q509b) (assv . q509a) (assq . q5099) (assp . q5098) (assoc . q5097) (call-with-string-output-port . q5096) (call-with-port . q5095) (call-with-bytevector-output-port . q5094) (bytevector->string . q5093) (buffer-mode? . q5092) (binary-port? . q5091) (with-exception-handler . q5090) (raise-continuable . q508f) (raise . q508e) (make-enumeration . q508d) (enum-set=? . q508c) (enum-set-universe . q508b) (enum-set-union . q508a) (enum-set-subset? . q5089) (enum-set-projection . q5088) (enum-set-member? . q5087) (enum-set-intersection . q5086) (enum-set-indexer . q5085) (enum-set-difference . q5084) (enum-set-constructor . q5083) (enum-set-complement . q5082) (enum-set->list . q5081) (who-condition? . q4aea) (warning? . q4a62) (violation? . q4aa1) (undefined-violation? . q4b61) (syntax-violation? . q4b48) (syntax-violation-subform . q4b4c) (syntax-violation-form . q4b4a) (syntax-violation . q2fe2) (simple-conditions . q5080) (serious-condition? . q4a77) (non-continuable-violation? . q4b01) (message-condition? . q4a4b) (make-who-condition . q4ae6) (make-warning . q4a60) (make-violation . q4a9f) (make-undefined-violation . q4b5f) (make-syntax-violation . q4b42) (make-serious-condition . q4a75) (make-non-continuable-violation . q4aff) (make-message-condition . q4a47) (make-lexical-violation . q4b29) (make-irritants-condition . q4acb) (make-implementation-restriction-violation . q4b14) (make-error . q4a8a) (make-assertion-violation . q4ab4) (lexical-violation? . q4b2b) (irritants-condition? . q4acf) (implementation-restriction-violation? . q4b16) (error? . q4a8c) (condition-who . q4aec) (condition-predicate . q507f) (condition-message . q4a4d) (condition-irritants . q4ad1) (condition-accessor . q507e) (condition . q507d) (assertion-violation? . q4ab6) (condition? . q507c) (utf32->string . q507b) (utf16->string . q507a) (utf8->string . q5079) (uint-list->bytevector . q5078) (u8-list->bytevector . q5077) (string->utf8 . q5076) (string->utf32 . q5075) (string->utf16 . q5074) (sint-list->bytevector . q5073) (native-endianness . q5072) (bytevector? . q5071) (bytevector=? . q5070) (bytevector-uint-set! . q506f) (bytevector-uint-ref . q506e) (bytevector-u8-set! . q506d) (bytevector-u8-ref . q506c) (bytevector-u64-set! . q506b) (bytevector-u64-ref . q506a) (bytevector-u64-native-set! . q5069) (bytevector-u64-native-ref . q5068) (bytevector-u32-set! . q5067) (bytevector-u32-ref . q5066) (bytevector-u32-native-set! . q5065) (bytevector-u32-native-ref . q5064) (bytevector-u16-set! . q5063) (bytevector-u16-ref . q5062) (bytevector-u16-native-set! . q5061) (bytevector-u16-native-ref . q5060) (bytevector-sint-set! . q505f) (bytevector-sint-ref . q505e) (bytevector-s8-set! . q505d) (bytevector-s8-ref . q505c) (bytevector-s64-set! . q505b) (bytevector-s64-ref . q505a) (bytevector-s64-native-set! . q5059) (bytevector-s64-native-ref . q5058) (bytevector-s32-set! . q5057) (bytevector-s32-ref . q5056) (bytevector-s32-native-set! . q5055) (bytevector-s32-native-ref . q5054) (bytevector-s16-set! . q5053) (bytevector-s16-ref . q5052) (bytevector-s16-native-set! . q5051) (bytevector-s16-native-ref . q5050) (bytevector-length . q504f) (bytevector-ieee-single-ref . q504e) (bytevector-ieee-single-set! . q504d) (bytevector-ieee-single-native-set! . q504c) (bytevector-ieee-single-native-ref . q504b) (bytevector-ieee-double-set! . q504a) (bytevector-ieee-double-ref . q5049) (bytevector-ieee-double-native-set! . q5048) (bytevector-ieee-double-native-ref . q5047) (bytevector-fill! . q5046) (bytevector-copy! . q5045) (bytevector-copy . q5044) (bytevector->uint-list . q5043) (bytevector->u8-list . q5042) (bytevector->sint-list . q5041) (no-nans-violation? . q4c9f) (no-infinities-violation? . q4c8a) (make-no-nans-violation . q4c9d) (make-no-infinities-violation . q4c88) (real->flonum . q5040) (flzero? . q503f) (fltruncate . q503e) (fltan . q503d) (flsqrt . q503c) (flsin . q503b) (flround . q503a) (flpositive? . q5039) (flonum? . q5038) (flodd? . q5037) (flnumerator . q5036) (flnegative? . q5035) (flnan? . q5034) (flmod0 . q5033) (flmod . q5032) (flmin . q5031) (flmax . q5030) (fllog . q502f) (flinteger? . q502e) (flinfinite? . q502d) (flfloor . q502c) (flfinite? . q502b) (flexpt . q502a) (flexp . q5029) (fleven? . q5028) (fldiv0-and-mod0 . q5027) (fldiv0 . q5026) (fldiv-and-mod . q5025) (fldiv . q5024) (fldenominator . q5023) (flcos . q5022) (flceiling . q5021) (flatan . q5020) (flasin . q501f) (flacos . q501e) (flabs . q501d) (fl>? . q501c) (fl>=? . q501b) (fl=? . q501a) (fl<? . q5019) (fl<=? . q5018) (fl/ . q5017) (fl- . q5016) (fl+ . q5015) (fl* . q5014) (fixnum->flonum . q5013) (fxzero? . q5012) (fxxor . q5011) (fxrotate-bit-field . q5010) (fxreverse-bit-field . q500f) (fxpositive? . q500e) (fxodd? . q500d) (fxnot . q500c) (fxnegative? . q500b) (fxmod0 . q500a) (fxmod . q5009) (fxmin . q5008) (fxmax . q5007) (fxlength . q5006) (fxior . q5005) (fxif . q5004) (fxfirst-bit-set . q5003) (fxeven? . q5002) (fxdiv0-and-mod0 . q5001) (fxdiv0 . q5000) (fxdiv-and-mod . q4fff) (fxdiv . q4ffe) (fxcopy-bit-field . q4ffd) (fxcopy-bit . q4ffc) (fxbit-set? . q4ffb) (fxbit-field . q4ffa) (fxbit-count . q4ff9) (fxarithmetic-shift-right . q4ff8) (fxarithmetic-shift-left . q4ff7) (fxarithmetic-shift . q4ff6) (fxand . q4ff5) (fx>? . q4ff4) (fx>=? . q4ff3) (fx=? . q4ff2) (fx<? . q4ff1) (fx<=? . q4ff0) (fx-/carry . q4fef) (fx- . q4fee) (fx+/carry . q4fed) (fx+ . q4fec) (fx*/carry . q4feb) (fx* . q4fea) (greatest-fixnum . q4fe9) (least-fixnum . q4fe8) (fixnum-width . q4fe7) (fixnum? . q4fe6) (bitwise-rotate-bit-field . q4fe5) (bitwise-reverse-bit-field . q4fe4) (bitwise-length . q4fe3) (bitwise-if . q4fe2) (bitwise-first-bit-set . q4fe1) (bitwise-copy-bit-field . q4fe0) (bitwise-copy-bit . q4fdf) (bitwise-bit-set? . q4fde) (bitwise-bit-field . q4fdd) (bitwise-bit-count . q4fdc) (bitwise-xor . q4fdb) (bitwise-ior . q4fda) (bitwise-and . q4fd9) (bitwise-not . q4fd8) (bitwise-arithmetic-shift-right . q4fd7) (bitwise-arithmetic-shift-left . q4fd6) (bitwise-arithmetic-shift . q4fd5) (zero? . q4fd4) (vector? . q4fd3) (vector-set! . q4fd2) (vector-ref . q4fd1) (vector-map . q4fd0) (vector-length . q4fcf) (vector-for-each . q4fce) (vector-fill! . q4fcd) (vector->list . q4fcc) (vector . q4fcb) (values . q4fca) (truncate . q4fc9) (tan . q4fc8) (symbol? . q4fc7) (symbol=? . q4fc6) (symbol->string . q4fc5) (substring . q4fc4) (string? . q4fc3) (string>? . q4fc2) (string>=? . q4fc1) (string=? . q4fc0) (string<? . q4fbf) (string<=? . q4fbe) (string-ref . q4fbd) (string-length . q4fbc) (string-for-each . q4fbb) (string-copy . q4fba) (string-append . q4fb9) (string->symbol . q4fb8) (string->number . q4fb7) (string->list . q4fb6) (string . q4fb5) (sqrt . q4fb4) (sin . q4fb3) (round . q4fb2) (reverse . q4fb1) (real? . q4fb0) (real-valued? . q4faf) (real-part . q4fae) (rationalize . q4fad) (rational? . q4fac) (rational-valued? . q4fab) (procedure? . q4faa) (positive? . q4fa9) (pair? . q4fa8) (odd? . q4fa7) (numerator . q4fa6) (number? . q4fa5) (number->string . q4fa4) (null? . q4fa3) (not . q4fa2) (negative? . q4fa1) (nan? . q4fa0) (min . q4f9f) (max . q4f9e) (map . q4f9d) (make-vector . q4f9c) (make-string . q4f9b) (make-rectangular . q4f9a) (make-polar . q4f99) (magnitude . q4f98) (log . q4f97) (list? . q4f96) (list-tail . q4f95) (list-ref . q4f94) (list->vector . q4f93) (list->string . q4f92) (list . q4f91) (length . q4f90) (lcm . q4f8f) (integer? . q4f8e) (integer-valued? . q4f8d) (integer->char . q4f8c) (infinite? . q4f8b) (inexact? . q4f8a) (inexact . q4f89) (imag-part . q4f88) (gcd . q4f87) (for-each . q4f86) (floor . q4f85) (finite? . q4f84) (expt . q4f83) (exp . q4f82) (exact? . q4f81) (exact-integer-sqrt . q4f80) (exact . q4f7f) (even? . q4f7e) (error . q4f7d) (eqv? . q4f7c) (equal? . q4f7b) (eq? . q4f7a) (dynamic-wind . q4f79) (div0-and-mod0 . q4f78) (mod0 . q4f77) (div0 . q4f76) (div-and-mod . q4f75) (mod . q4f74) (div . q4f73) (denominator . q4f72) (cos . q4f71) (cons . q4f70) (complex? . q4f6f) (char? . q4f6e) (char>? . q4f6d) (char>=? . q4f6c) (char=? . q4f6b) (char<? . q4f6a) (char<=? . q4f69) (char->integer . q4f68) (ceiling . q4f67) (call-with-values . q4f66) (call/cc . q4f65) (call-with-current-continuation . q4f64) (cddddr . q4f63) (cdddar . q4f62) (cddadr . q4f61) (cddaar . q4f60) (cdaddr . q4f5f) (cdadar . q4f5e) (cdaadr . q4f5d) (cdaaar . q4f5c) (cadddr . q4f5b) (caddar . q4f5a) (cadadr . q4f59) (cadaar . q4f58) (caaddr . q4f57) (caadar . q4f56) (caaadr . q4f55) (caaaar . q4f54) (cdddr . q4f53) (cddar . q4f52) (cdadr . q4f51) (cdaar . q4f50) (caddr . q4f4f) (cadar . q4f4e) (caadr . q4f4d) (caaar . q4f4c) (cddr . q4f4b) (cdar . q4f4a) (cadr . q4f49) (caar . q4f48) (cdr . q4f47) (car . q4f46) (boolean? . q4f45) (boolean=? . q4f44) (atan . q4f43) (assertion-violation . q4f42) (asin . q4f41) (apply . q4f40) (append . q4f3f) (angle . q4f3e) (acos . q4f3d) (abs . q4f3c) (/ . q4f3b) (* . q4f3a) (- . q4f39) (+ . q4f38) (>= . q4f37) (> . q4f36) (= . q4f35) (<= . q4f34) (< . q4f33) (&no-nans . q4f31) (&no-infinities . q4f30) (&i/o-encoding . q4f2f) (&i/o-decoding . q4f2e) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24) (&undefined . q4f23) (&syntax . q4f22) (&lexical . q4f21) (&implementation-restriction . q4f20) (&non-continuable . q4f1f) (&who . q4f1e) (&irritants . q4f1d) (&assertion . q4f1c) (&violation . q4f1b) (&error . q4f1a) (&serious . q4f19) (&warning . q4f18) (&message . q4f17) (&condition . q4f16) (define-condition-type . q4f15) (define-enumeration . q4f14) (define-record-type . q4f13) (parent-rtd . q4f12) (nongenerative . q4f11) (opaque . q4f10) (sealed . q4f0f) (protocol . q4f0e) (parent . q4f0d) (immutable . q4f0c) (mutable . q4f0b) (fields . q4f0a) (error-handling-mode . q4f09) (file-options . q4f08) (buffer-mode . q4f07) (eol-style . q4f06) (guard . q4f05) (unsyntax-splicing . q4f02) (unsyntax . q4f01) (unquote-splicing . q4f00) (unquote . q4eff) (_ . q4efe) (else . q4efd) (=> . q4efc) (... . q4efb) (assert . q4efa) (endianness . q4ef9) (do . q4ef6) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (let*-values . q4ef2) (let-values . q4ef1) (identifier-syntax . q4ef0) (with-syntax . q4eef) (quasisyntax . q4eee) (quasiquote . q4eed) (syntax-rules . q4eec) (record-constructor-descriptor . q4ee9) (record-type-descriptor . q4ee8) (case . q4ee7) (unless . q4ee5) (when . q4ee4) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec* . q4ee0) (letrec . q4edf) (case-lambda . q4edd) (lambda . q4edc) (syntax . q4edb) (syntax-case . q4eda) (quote . q4ed9) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (begin . q4ed3) (define-syntax . q4ed1) (define . q4ed0)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ef '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . q2fbe) (quotient . q50b6) (null-environment . q2fbc) (remainder . q50b5) (modulo . q50b4) (inexact->exact . q50b3) (force . q50b2) (exact->inexact . q50b1) (make-promise . q50b0) (delay . q4ef8)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f0 '(rnrs control) '(6) '() '() '() '((do . q4ef6) (unless . q4ee5) (when . q4ee4) (case-lambda . q4edd)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f1 '(rnrs eval) '(6) '() '() '() '((eval . q2fc2) (environment . q2fba)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . q50ac) (set-car! . q50ab)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . q50ae) (string-set! . q50ad)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f4 '(rnrs programs) '(6) '() '() '() '((exit . q50af) (command-line . q4daa)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . q2d26) (identifier? . q2fe4) (generate-temporaries . q2fd0) (free-identifier=? . q2fd2) (syntax->datum . q2fe8) (datum->syntax . q2fe6) (bound-identifier=? . q2fd4) (syntax-violation . q2fe2) (unsyntax-splicing . q4f02) (unsyntax . q4f01) (_ . q4efe) (... . q4efb) (with-syntax . q4eef) (quasisyntax . q4eee) (syntax . q4edb) (syntax-case . q4eda)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f6 '(rnrs files) '(6) '() '() '() '((delete-file . q511f) (file-exists? . q511e) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . q511d) (vector-sort . q511c) (list-sort . q511b)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f8 '(rnrs base) '(6) '() '() '() '((zero? . q4fd4) (vector? . q4fd3) (vector-set! . q4fd2) (vector-ref . q4fd1) (vector-map . q4fd0) (vector-length . q4fcf) (vector-for-each . q4fce) (vector-fill! . q4fcd) (vector->list . q4fcc) (vector . q4fcb) (values . q4fca) (truncate . q4fc9) (tan . q4fc8) (symbol? . q4fc7) (symbol=? . q4fc6) (symbol->string . q4fc5) (substring . q4fc4) (string? . q4fc3) (string>? . q4fc2) (string>=? . q4fc1) (string=? . q4fc0) (string<? . q4fbf) (string<=? . q4fbe) (string-ref . q4fbd) (string-length . q4fbc) (string-for-each . q4fbb) (string-copy . q4fba) (string-append . q4fb9) (string->symbol . q4fb8) (string->number . q4fb7) (string->list . q4fb6) (string . q4fb5) (sqrt . q4fb4) (sin . q4fb3) (round . q4fb2) (reverse . q4fb1) (real? . q4fb0) (real-valued? . q4faf) (real-part . q4fae) (rationalize . q4fad) (rational? . q4fac) (rational-valued? . q4fab) (procedure? . q4faa) (positive? . q4fa9) (pair? . q4fa8) (odd? . q4fa7) (numerator . q4fa6) (number? . q4fa5) (number->string . q4fa4) (null? . q4fa3) (not . q4fa2) (negative? . q4fa1) (nan? . q4fa0) (min . q4f9f) (max . q4f9e) (map . q4f9d) (make-vector . q4f9c) (make-string . q4f9b) (make-rectangular . q4f9a) (make-polar . q4f99) (magnitude . q4f98) (log . q4f97) (list? . q4f96) (list-tail . q4f95) (list-ref . q4f94) (list->vector . q4f93) (list->string . q4f92) (list . q4f91) (length . q4f90) (lcm . q4f8f) (integer? . q4f8e) (integer-valued? . q4f8d) (integer->char . q4f8c) (infinite? . q4f8b) (inexact? . q4f8a) (inexact . q4f89) (imag-part . q4f88) (gcd . q4f87) (for-each . q4f86) (floor . q4f85) (finite? . q4f84) (expt . q4f83) (exp . q4f82) (exact? . q4f81) (exact-integer-sqrt . q4f80) (exact . q4f7f) (even? . q4f7e) (error . q4f7d) (eqv? . q4f7c) (equal? . q4f7b) (eq? . q4f7a) (dynamic-wind . q4f79) (div0-and-mod0 . q4f78) (mod0 . q4f77) (div0 . q4f76) (div-and-mod . q4f75) (mod . q4f74) (div . q4f73) (denominator . q4f72) (cos . q4f71) (cons . q4f70) (complex? . q4f6f) (char? . q4f6e) (char>? . q4f6d) (char>=? . q4f6c) (char=? . q4f6b) (char<? . q4f6a) (char<=? . q4f69) (char->integer . q4f68) (ceiling . q4f67) (call-with-values . q4f66) (call/cc . q4f65) (call-with-current-continuation . q4f64) (cddddr . q4f63) (cdddar . q4f62) (cddadr . q4f61) (cddaar . q4f60) (cdaddr . q4f5f) (cdadar . q4f5e) (cdaadr . q4f5d) (cdaaar . q4f5c) (cadddr . q4f5b) (caddar . q4f5a) (cadadr . q4f59) (cadaar . q4f58) (caaddr . q4f57) (caadar . q4f56) (caaadr . q4f55) (caaaar . q4f54) (cdddr . q4f53) (cddar . q4f52) (cdadr . q4f51) (cdaar . q4f50) (caddr . q4f4f) (cadar . q4f4e) (caadr . q4f4d) (caaar . q4f4c) (cddr . q4f4b) (cdar . q4f4a) (cadr . q4f49) (caar . q4f48) (cdr . q4f47) (car . q4f46) (boolean? . q4f45) (boolean=? . q4f44) (atan . q4f43) (assertion-violation . q4f42) (asin . q4f41) (apply . q4f40) (append . q4f3f) (angle . q4f3e) (acos . q4f3d) (abs . q4f3c) (/ . q4f3b) (* . q4f3a) (- . q4f39) (+ . q4f38) (>= . q4f37) (> . q4f36) (= . q4f35) (<= . q4f34) (< . q4f33) (unquote-splicing . q4f00) (unquote . q4eff) (_ . q4efe) (else . q4efd) (=> . q4efc) (... . q4efb) (assert . q4efa) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (let*-values . q4ef2) (let-values . q4ef1) (identifier-syntax . q4ef0) (quasiquote . q4eed) (syntax-rules . q4eec) (case . q4ee7) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec* . q4ee0) (letrec . q4edf) (lambda . q4edc) (quote . q4ed9) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (begin . q4ed3) (define-syntax . q4ed1) (define . q4ed0)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51f9 '(rnrs lists) '(6) '() '() '() '((remove . q50aa) (remv . q50a9) (remp . q50a8) (remq . q50a7) (partition . q50a6) (memv . q50a5) (memq . q50a4) (memp . q50a3) (member . q50a2) (exists . q50a1) (for-all . q50a0) (fold-right . q509f) (fold-left . q509e) (find . q509d) (filter . q509c) (cons* . q509b) (assv . q509a) (assq . q5099) (assp . q5098) (assoc . q5097)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51fa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . q5105) (call-with-input-file . q5104) (write-char . q5103) (write . q5102) (with-output-to-file . q5101) (with-input-from-file . q5100) (read-char . q50ff) (read . q50fe) (peek-char . q50fd) (open-output-file . q50fc) (open-input-file . q50fb) (newline . q50fa) (display . q50f9) (close-output-port . q50f8) (close-input-port . q50f7) (eof-object? . q50f6) (eof-object . q50f5) (current-error-port . q50f4) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51fb '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . q50c6) (utf32->string . q507b) (utf16->string . q507a) (utf8->string . q5079) (uint-list->bytevector . q5078) (u8-list->bytevector . q5077) (string->utf8 . q5076) (string->utf32 . q5075) (string->utf16 . q5074) (sint-list->bytevector . q5073) (native-endianness . q5072) (bytevector? . q5071) (bytevector=? . q5070) (bytevector-uint-set! . q506f) (bytevector-uint-ref . q506e) (bytevector-u8-set! . q506d) (bytevector-u8-ref . q506c) (bytevector-u64-set! . q506b) (bytevector-u64-ref . q506a) (bytevector-u64-native-set! . q5069) (bytevector-u64-native-ref . q5068) (bytevector-u32-set! . q5067) (bytevector-u32-ref . q5066) (bytevector-u32-native-set! . q5065) (bytevector-u32-native-ref . q5064) (bytevector-u16-set! . q5063) (bytevector-u16-ref . q5062) (bytevector-u16-native-set! . q5061) (bytevector-u16-native-ref . q5060) (bytevector-sint-set! . q505f) (bytevector-sint-ref . q505e) (bytevector-s8-set! . q505d) (bytevector-s8-ref . q505c) (bytevector-s64-set! . q505b) (bytevector-s64-ref . q505a) (bytevector-s64-native-set! . q5059) (bytevector-s64-native-ref . q5058) (bytevector-s32-set! . q5057) (bytevector-s32-ref . q5056) (bytevector-s32-native-set! . q5055) (bytevector-s32-native-ref . q5054) (bytevector-s16-set! . q5053) (bytevector-s16-ref . q5052) (bytevector-s16-native-set! . q5051) (bytevector-s16-native-ref . q5050) (bytevector-length . q504f) (bytevector-ieee-single-ref . q504e) (bytevector-ieee-single-set! . q504d) (bytevector-ieee-single-native-set! . q504c) (bytevector-ieee-single-native-ref . q504b) (bytevector-ieee-double-set! . q504a) (bytevector-ieee-double-ref . q5049) (bytevector-ieee-double-native-set! . q5048) (bytevector-ieee-double-native-ref . q5047) (bytevector-fill! . q5046) (bytevector-copy! . q5045) (bytevector-copy . q5044) (bytevector->uint-list . q5043) (bytevector->u8-list . q5042) (bytevector->sint-list . q5041) (endianness . q4ef9)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51fc '(rnrs unicode) '(6) '() '() '() '((string-upcase . q514d) (string-titlecase . q514c) (string-normalize-nfkd . q514b) (string-normalize-nfkc . q514a) (string-normalize-nfd . q5149) (string-normalize-nfc . q5148) (string-foldcase . q5147) (string-downcase . q5146) (string-ci>? . q5145) (string-ci>=? . q5144) (string-ci=? . q5143) (string-ci<? . q5142) (string-ci<=? . q5141) (char-whitespace? . q5140) (char-upper-case? . q513f) (char-title-case? . q513e) (char-numeric? . q513d) (char-lower-case? . q513c) (char-general-category . q513b) (char-upcase . q513a) (char-titlecase . q5139) (char-foldcase . q5138) (char-downcase . q5137) (char-ci>? . q5136) (char-ci>=? . q5135) (char-ci=? . q5134) (char-ci<? . q5133) (char-ci<=? . q5132) (char-alphabetic? . q5131)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51fd '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . q5090) (raise-continuable . q508f) (raise . q508e) (guard . q4f05) (else . q4efd) (=> . q4efc)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51fe '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . q4fe5) (bitwise-reverse-bit-field . q4fe4) (bitwise-length . q4fe3) (bitwise-if . q4fe2) (bitwise-first-bit-set . q4fe1) (bitwise-copy-bit-field . q4fe0) (bitwise-copy-bit . q4fdf) (bitwise-bit-set? . q4fde) (bitwise-bit-field . q4fdd) (bitwise-bit-count . q4fdc) (bitwise-xor . q4fdb) (bitwise-ior . q4fda) (bitwise-and . q4fd9) (bitwise-not . q4fd8) (bitwise-arithmetic-shift-right . q4fd7) (bitwise-arithmetic-shift-left . q4fd6) (bitwise-arithmetic-shift . q4fd5)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q51ff '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . q5012) (fxxor . q5011) (fxrotate-bit-field . q5010) (fxreverse-bit-field . q500f) (fxpositive? . q500e) (fxodd? . q500d) (fxnot . q500c) (fxnegative? . q500b) (fxmod0 . q500a) (fxmod . q5009) (fxmin . q5008) (fxmax . q5007) (fxlength . q5006) (fxior . q5005) (fxif . q5004) (fxfirst-bit-set . q5003) (fxeven? . q5002) (fxdiv0-and-mod0 . q5001) (fxdiv0 . q5000) (fxdiv-and-mod . q4fff) (fxdiv . q4ffe) (fxcopy-bit-field . q4ffd) (fxcopy-bit . q4ffc) (fxbit-set? . q4ffb) (fxbit-field . q4ffa) (fxbit-count . q4ff9) (fxarithmetic-shift-right . q4ff8) (fxarithmetic-shift-left . q4ff7) (fxarithmetic-shift . q4ff6) (fxand . q4ff5) (fx>? . q4ff4) (fx>=? . q4ff3) (fx=? . q4ff2) (fx<? . q4ff1) (fx<=? . q4ff0) (fx-/carry . q4fef) (fx- . q4fee) (fx+/carry . q4fed) (fx+ . q4fec) (fx*/carry . q4feb) (fx* . q4fea) (greatest-fixnum . q4fe9) (least-fixnum . q4fe8) (fixnum-width . q4fe7) (fixnum? . q4fe6)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5200 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . q4c9f) (no-infinities-violation? . q4c8a) (make-no-nans-violation . q4c9d) (make-no-infinities-violation . q4c88) (real->flonum . q5040) (flzero? . q503f) (fltruncate . q503e) (fltan . q503d) (flsqrt . q503c) (flsin . q503b) (flround . q503a) (flpositive? . q5039) (flonum? . q5038) (flodd? . q5037) (flnumerator . q5036) (flnegative? . q5035) (flnan? . q5034) (flmod0 . q5033) (flmod . q5032) (flmin . q5031) (flmax . q5030) (fllog . q502f) (flinteger? . q502e) (flinfinite? . q502d) (flfloor . q502c) (flfinite? . q502b) (flexpt . q502a) (flexp . q5029) (fleven? . q5028) (fldiv0-and-mod0 . q5027) (fldiv0 . q5026) (fldiv-and-mod . q5025) (fldiv . q5024) (fldenominator . q5023) (flcos . q5022) (flceiling . q5021) (flatan . q5020) (flasin . q501f) (flacos . q501e) (flabs . q501d) (fl>? . q501c) (fl>=? . q501b) (fl=? . q501a) (fl<? . q5019) (fl<=? . q5018) (fl/ . q5017) (fl- . q5016) (fl+ . q5015) (fl* . q5014) (fixnum->flonum . q5013) (&no-nans . q4f31) (&no-infinities . q4f30)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5201 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . q511a) (string-ci-hash . q5119) (string-hash . q5118) (equal-hash . q5117) (hashtable-equivalence-function . q5116) (make-hashtable . q5115) (hashtable-hash-function . q5114) (make-eqv-hashtable . q5113) (make-eq-hashtable . q5112) (hashtable? . q5111) (hashtable-update! . q5110) (hashtable-size . q510f) (hashtable-set! . q510e) (hashtable-ref . q510d) (hashtable-mutable? . q510c) (hashtable-keys . q510b) (hashtable-entries . q510a) (hashtable-delete! . q5109) (hashtable-copy . q5108) (hashtable-contains? . q5107) (hashtable-clear! . q5106)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5202 '(rnrs io ports) '(6) '() '() '() '((eof-object? . q50f6) (eof-object . q50f5) (current-error-port . q50f4) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (utf-8-codec . q50ef) (utf-16-codec . q50ee) (transcoder-error-handling-mode . q50ed) (transcoder-eol-style . q50ec) (transcoder-codec . q50eb) (transcoded-port . q50ea) (textual-port? . q50e9) (string->bytevector . q50e8) (standard-output-port . q50e7) (standard-input-port . q50e6) (standard-error-port . q50e5) (set-port-position! . q50e4) (put-u8 . q50e3) (put-string . q50e2) (put-datum . q50e1) (put-char . q50e0) (put-bytevector . q50df) (port? . q50de) (port-transcoder . q50dd) (port-position . q50dc) (port-has-set-port-position!? . q50db) (port-has-port-position? . q50da) (port-eof? . q50d9) (output-port-buffer-mode . q50d8) (open-string-output-port . q50d7) (open-string-input-port . q50d6) (open-file-output-port . q50d5) (open-file-input/output-port . q50d4) (open-file-input-port . q50d3) (open-bytevector-output-port . q50d2) (open-bytevector-input-port . q50d1) (native-transcoder . q50d0) (native-eol-style . q50cf) (make-transcoder . q50ce) (latin-1-codec . q50cd) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (make-i/o-encoding-error . q4c6f) (make-i/o-decoding-error . q4c58) (make-custom-textual-output-port . q50cc) (make-custom-textual-input/output-port . q50cb) (make-custom-textual-input-port . q50ca) (make-custom-binary-output-port . q50c9) (make-custom-binary-input/output-port . q50c8) (make-custom-binary-input-port . q50c7) (lookahead-u8 . q50c5) (lookahead-char . q50c4) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (i/o-encoding-error? . q4c73) (i/o-encoding-error-char . q4c75) (i/o-decoding-error? . q4c5a) (get-u8 . q50c3) (get-string-n! . q50c2) (get-string-n . q50c1) (get-string-all . q50c0) (get-line . q50bf) (get-datum . q50be) (get-char . q50bd) (get-bytevector-some . q50bc) (get-bytevector-n! . q50bb) (get-bytevector-n . q50ba) (get-bytevector-all . q50b9) (flush-output-port . q50b8) (close-port . q50b7) (call-with-string-output-port . q5096) (call-with-port . q5095) (call-with-bytevector-output-port . q5094) (bytevector->string . q5093) (buffer-mode? . q5092) (binary-port? . q5091) (&i/o-encoding . q4f2f) (&i/o-decoding . q4f2e) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24) (error-handling-mode . q4f09) (file-options . q4f08) (buffer-mode . q4f07) (eol-style . q4f06)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5203 '(rnrs enums) '(6) '() '() '() '((make-enumeration . q508d) (enum-set=? . q508c) (enum-set-universe . q508b) (enum-set-union . q508a) (enum-set-subset? . q5089) (enum-set-projection . q5088) (enum-set-member? . q5087) (enum-set-intersection . q5086) (enum-set-indexer . q5085) (enum-set-difference . q5084) (enum-set-constructor . q5083) (enum-set-complement . q5082) (enum-set->list . q5081) (define-enumeration . q4f14)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5204 '(rnrs conditions) '(6) '() '() '() '((who-condition? . q4aea) (warning? . q4a62) (violation? . q4aa1) (undefined-violation? . q4b61) (syntax-violation? . q4b48) (syntax-violation-subform . q4b4c) (syntax-violation-form . q4b4a) (syntax-violation . q2fe2) (simple-conditions . q5080) (serious-condition? . q4a77) (non-continuable-violation? . q4b01) (message-condition? . q4a4b) (make-who-condition . q4ae6) (make-warning . q4a60) (make-violation . q4a9f) (make-undefined-violation . q4b5f) (make-syntax-violation . q4b42) (make-serious-condition . q4a75) (make-non-continuable-violation . q4aff) (make-message-condition . q4a47) (make-lexical-violation . q4b29) (make-irritants-condition . q4acb) (make-implementation-restriction-violation . q4b14) (make-error . q4a8a) (make-assertion-violation . q4ab4) (lexical-violation? . q4b2b) (irritants-condition? . q4acf) (implementation-restriction-violation? . q4b16) (error? . q4a8c) (condition-who . q4aec) (condition-predicate . q507f) (condition-message . q4a4d) (condition-irritants . q4ad1) (condition-accessor . q507e) (condition . q507d) (assertion-violation? . q4ab6) (condition? . q507c) (&undefined . q4f23) (&syntax . q4f22) (&lexical . q4f21) (&implementation-restriction . q4f20) (&non-continuable . q4f1f) (&who . q4f1e) (&irritants . q4f1d) (&assertion . q4f1c) (&violation . q4f1b) (&error . q4f1a) (&serious . q4f19) (&warning . q4f18) (&message . q4f17) (&condition . q4f16) (define-condition-type . q4f15)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5205 '(rnrs records inspection) '(6) '() '() '() '((record? . q5129) (record-type-uid . q5128) (record-type-sealed? . q5127) (record-type-parent . q5126) (record-type-opaque? . q5125) (record-type-name . q5124) (record-type-generative? . q5123) (record-type-field-names . q5122) (record-rtd . q5121) (record-field-mutable? . q5120)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5206 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . q5130) (record-predicate . q512f) (record-mutator . q512e) (record-constructor . q512d) (record-accessor . q512c) (make-record-type-descriptor . q512b) (make-record-constructor-descriptor . q512a)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5207 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . q4f13) (parent-rtd . q4f12) (nongenerative . q4f11) (opaque . q4f10) (sealed . q4f0f) (protocol . q4f0e) (parent . q4f0d) (immutable . q4f0c) (mutable . q4f0b) (fields . q4f0a) (record-constructor-descriptor . q4ee9) (record-type-descriptor . q4ee8)) '() values values '#f '#f '#t '#f) (q2b11@q29b0@install-library 'q5208 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . q4ca3) (&no-nans-rtd . q4ca1) (&no-infinities-rcd . q4c8e) (&no-infinities-rtd . q4c8c) (&i/o-encoding-rcd . q4c79) (&i/o-encoding-rtd . q4c77) (&i/o-decoding-rcd . q4c5e) (&i/o-decoding-rtd . q4c5c) (&i/o-port-rcd . q4c49) (&i/o-port-rtd . q4c47) (&i/o-file-does-not-exist-rcd . q4c2e) (&i/o-file-does-not-exist-rtd . q4c2c) (&i/o-file-already-exists-rcd . q4c19) (&i/o-file-already-exists-rtd . q4c17) (&i/o-file-is-read-only-rcd . q4c04) (&i/o-file-is-read-only-rtd . q4c02) (&i/o-file-protection-rcd . q4bef) (&i/o-file-protection-rtd . q4bed) (&i/o-filename-rcd . q4bda) (&i/o-filename-rtd . q4bd8) (&i/o-invalid-position-rcd . q4bbf) (&i/o-invalid-position-rtd . q4bbd) (&i/o-write-rcd . q4ba4) (&i/o-write-rtd . q4ba2) (&i/o-read-rcd . q4b8f) (&i/o-read-rtd . q4b8d) (&i/o-rcd . q4b7a) (&i/o-rtd . q4b78) (&undefined-rcd . q4b65) (&undefined-rtd . q4b63) (&syntax-rcd . q4b50) (&syntax-rtd . q4b4e) (&lexical-rcd . q4b2f) (&lexical-rtd . q4b2d) (&implementation-restriction-rcd . q4b1a) (&implementation-restriction-rtd . q4b18) (&non-continuable-rcd . q4b05) (&non-continuable-rtd . q4b03) (&who-rcd . q4af0) (&who-rtd . q4aee) (&irritants-rcd . q4ad5) (&irritants-rtd . q4ad3) (&assertion-rcd . q4aba) (&assertion-rtd . q4ab8) (&violation-rcd . q4aa5) (&violation-rtd . q4aa3) (&error-rcd . q4a90) (&error-rtd . q4a8e) (&serious-rcd . q4a7b) (&serious-rtd . q4a79) (&warning-rcd . q4a66) (&warning-rtd . q4a64) (&message-rcd . q4a51) (&message-rtd . q4a4f) (&condition-rcd . q49f2) (&condition-rtd . q49f0) (syntax-error . q2fde) (syntax-dispatch . q2ef9) (pretty-print . q51e8) (eval-core . q51e7) (set-symbol-value! . q51e6) (symbol-value . q51e5) (gensym . q51e4) (void . q51e3) (load . q4db0) (interaction-environment . q2fee) (char-ready? . q51e2) (regexp? . q51e1) (read-line . q51e0) (ungensym . q51df) (alist->eq-hash-table . q51de) (assoc-ref . q51dd) (print . q51dc) (format . q51db) (host-os . q51da) (library-path . q298f) (standard-library-path . q51d9) (file-newer? . q51d8) (stat-mtime . q51d7) (write-to-file . q51d6) (file->list . q51d5) (file->string . q51d4) (digit->integer . q51d3) (call-with-string-input-port . q51d2) (call-with-string-io . q51d1) (string-split . q51d0) (bytevector-for-each . q51cf) (string->regexp . q51ce) (rxmatch . q51cd) (regexp-replace-all . q51cc) (hashtable-for-each . q51cb) (call-process . q51ca) (local-tz-offset . q51c9) (microseconds . q51c8) (directory-list . q51c7) (set-current-directory! . q51c6) (expand-path . q51c5) (current-directory . q51c4) (%spawn . q51c3) (%waitpid . q51c2) (pointer-ref-c-int64 . q51c1) (pointer-ref-c-int32 . q51c0) (pointer-ref-c-int16 . q51bf) (pointer-ref-c-int8 . q51be) (pointer-ref-c-uint64 . q51bd) (pointer-ref-c-uint32 . q51bc) (pointer-ref-c-uint16 . q51bb) (pointer-ref-c-uint8 . q51ba) (pointer-set-c-uint64! . q51b9) (pointer-set-c-uint32! . q51b8) (pointer-set-c-uint16! . q51b7) (pointer-set-c-uint8! . q51b6) (pointer-set-c-int64! . q51b5) (pointer-set-c-int32! . q51b4) (pointer-set-c-int16! . q51b3) (pointer-set-c-int8! . q51b2) (pointer-set-c-pointer! . q51b1) (pointer-set-c-double! . q51b0) (pointer-set-c-float! . q51af) (pointer-set-c-long-long! . q51ae) (pointer-set-c-long! . q51ad) (pointer-set-c-int! . q51ac) (pointer-set-c-short! . q51ab) (pointer-set-c-char! . q51aa) (pointer-ref-c-pointer . q51a9) (pointer-ref-c-double . q51a8) (pointer-ref-c-float . q51a7) (pointer-ref-c-unsigned-long-long . q51a6) (pointer-ref-c-signed-long-long . q51a5) (pointer-ref-c-unsigned-long . q51a4) (pointer-ref-c-signed-long . q51a3) (pointer-ref-c-unsigned-int . q51a2) (pointer-ref-c-signed-int . q51a1) (pointer-ref-c-unsigned-short . q51a0) (pointer-ref-c-signed-short . q519f) (pointer-ref-c-unsigned-char . q519e) (pointer-ref-c-signed-char . q519d) (pointer->integer . q519c) (integer->pointer . q519b) (pointer? . q519a) (shared-errno . q5199) (%ffi-supported? . q5198) (%ffi-pointer->string . q5197) (%ffi-call->string-or-zero . q5196) (%ffi-call->double . q5195) (%ffi-call->void* . q5194) (%ffi-call->void . q5193) (%ffi-call->char . q5192) (%ffi-call->int . q5191) (%ffi-lookup . q5190) (%ffi-open . q518f) (%fork . q518e) (%pipe . q518d) (p . q518c) (open-output-string . q518b) (get-output-string . q518a) (file-stat-ctime . q5189) (file-stat-atime . q5188) (file-stat-mtime . q5187) (file-size-in-bytes . q5186) (file-writable? . q5185) (file-executable? . q5184) (file-readable? . q5183) (file-regular? . q5182) (file-symbolic-link? . q5181) (file-directory? . q5180) (create-symbolic-link . q517f) (rename-file . q517e) (delete-directory . q517d) (create-directory . q517c) (get-environment-variables . q517b) (get-environment-variable . q517a) (get-timeofday . q5179) (get-command-line . q5178) (sys-display . q5177) (whereis . q5176) (register . q5175) (vm-join! . q5174) (vm-set-value! . q5173) (vm? . q5172) (main-vm? . q5171) (vm-eval . q5170) (vm-self . q516f) (vm-start! . q516e) (make-vm . q516d) (mutex-try-lock! . q516c) (mutex-unlock! . q516b) (mutex-lock! . q516a) (mutex? . q5169) (make-mutex . q5168) (condition-variable-notify-all! . q5167) (condition-variable-notify! . q5166) (condition-variable-wait! . q5165) (make-condition-variable . q5164) (mosh-executable-path . q5163) (make-file-options . q5162) (source-info . q5161) (make-compiler-instruction . q5160) (make-instruction . q515f) (set-source-info! . q515e) (bignum? . q515d) (fast-equal? . q515c) (fasl-read . q515b) (fasl-write . q515a) (time-usage . q5159) (os-constant . q5158) (make-parameter . q27c2) (socket-port . q5157) (socket-shutdown . q5156) (socket-close . q5155) (socket-send . q5154) (socket-recv! . q5153) (socket-recv . q5152) (make-server-socket . q5151) (make-client-socket . q5150) (socket-accept . q514f) (socket? . q514e) (string-upcase . q514d) (string-titlecase . q514c) (string-normalize-nfkd . q514b) (string-normalize-nfkc . q514a) (string-normalize-nfd . q5149) (string-normalize-nfc . q5148) (string-foldcase . q5147) (string-downcase . q5146) (string-ci>? . q5145) (string-ci>=? . q5144) (string-ci=? . q5143) (string-ci<? . q5142) (string-ci<=? . q5141) (char-whitespace? . q5140) (char-upper-case? . q513f) (char-title-case? . q513e) (char-numeric? . q513d) (char-lower-case? . q513c) (char-general-category . q513b) (char-upcase . q513a) (char-titlecase . q5139) (char-foldcase . q5138) (char-downcase . q5137) (char-ci>? . q5136) (char-ci>=? . q5135) (char-ci=? . q5134) (char-ci<? . q5133) (char-ci<=? . q5132) (char-alphabetic? . q5131) (make-variable-transformer . q2d26) (identifier? . q2fe4) (generate-temporaries . q2fd0) (free-identifier=? . q2fd2) (syntax->datum . q2fe8) (datum->syntax . q2fe6) (bound-identifier=? . q2fd4) (record-type-descriptor? . q5130) (record-predicate . q512f) (record-mutator . q512e) (record-constructor . q512d) (record-accessor . q512c) (make-record-type-descriptor . q512b) (make-record-constructor-descriptor . q512a) (record? . q5129) (record-type-uid . q5128) (record-type-sealed? . q5127) (record-type-parent . q5126) (record-type-opaque? . q5125) (record-type-name . q5124) (record-type-generative? . q5123) (record-type-field-names . q5122) (record-rtd . q5121) (record-field-mutable? . q5120) (delete-file . q511f) (file-exists? . q511e) (vector-sort! . q511d) (vector-sort . q511c) (list-sort . q511b) (symbol-hash . q511a) (string-ci-hash . q5119) (string-hash . q5118) (equal-hash . q5117) (hashtable-equivalence-function . q5116) (make-hashtable . q5115) (hashtable-hash-function . q5114) (make-eqv-hashtable . q5113) (make-eq-hashtable . q5112) (hashtable? . q5111) (hashtable-update! . q5110) (hashtable-size . q510f) (hashtable-set! . q510e) (hashtable-ref . q510d) (hashtable-mutable? . q510c) (hashtable-keys . q510b) (hashtable-entries . q510a) (hashtable-delete! . q5109) (hashtable-copy . q5108) (hashtable-contains? . q5107) (hashtable-clear! . q5106) (call-with-output-file . q5105) (call-with-input-file . q5104) (write-char . q5103) (write . q5102) (with-output-to-file . q5101) (with-input-from-file . q5100) (read-char . q50ff) (read . q50fe) (peek-char . q50fd) (open-output-file . q50fc) (open-input-file . q50fb) (newline . q50fa) (display . q50f9) (close-output-port . q50f8) (close-input-port . q50f7) (eof-object? . q50f6) (eof-object . q50f5) (current-error-port . q50f4) (current-output-port . q50f3) (current-input-port . q50f2) (output-port? . q50f1) (input-port? . q50f0) (utf-8-codec . q50ef) (utf-16-codec . q50ee) (transcoder-error-handling-mode . q50ed) (transcoder-eol-style . q50ec) (transcoder-codec . q50eb) (transcoded-port . q50ea) (textual-port? . q50e9) (string->bytevector . q50e8) (standard-output-port . q50e7) (standard-input-port . q50e6) (standard-error-port . q50e5) (set-port-position! . q50e4) (put-u8 . q50e3) (put-string . q50e2) (put-datum . q50e1) (put-char . q50e0) (put-bytevector . q50df) (port? . q50de) (port-transcoder . q50dd) (port-position . q50dc) (port-has-set-port-position!? . q50db) (port-has-port-position? . q50da) (port-eof? . q50d9) (output-port-buffer-mode . q50d8) (open-string-output-port . q50d7) (open-string-input-port . q50d6) (open-file-output-port . q50d5) (open-file-input/output-port . q50d4) (open-file-input-port . q50d3) (open-bytevector-output-port . q50d2) (open-bytevector-input-port . q50d1) (native-transcoder . q50d0) (native-eol-style . q50cf) (make-transcoder . q50ce) (latin-1-codec . q50cd) (make-i/o-write-error . q4b9e) (make-i/o-read-error . q4b89) (make-i/o-port-error . q4c3f) (make-i/o-invalid-position-error . q4bb5) (make-i/o-filename-error . q4bd0) (make-i/o-file-protection-error . q4be9) (make-i/o-file-is-read-only-error . q4bfe) (make-i/o-file-does-not-exist-error . q4c28) (make-i/o-file-already-exists-error . q4c13) (make-i/o-error . q4b74) (make-i/o-encoding-error . q4c6f) (make-i/o-decoding-error . q4c58) (make-custom-textual-output-port . q50cc) (make-custom-textual-input/output-port . q50cb) (make-custom-textual-input-port . q50ca) (make-custom-binary-output-port . q50c9) (make-custom-binary-input/output-port . q50c8) (make-custom-binary-input-port . q50c7) (make-bytevector . q50c6) (lookahead-u8 . q50c5) (lookahead-char . q50c4) (i/o-write-error? . q4ba0) (i/o-read-error? . q4b8b) (i/o-port-error? . q4c43) (i/o-invalid-position-error? . q4bb9) (i/o-filename-error? . q4bd4) (i/o-file-protection-error? . q4beb) (i/o-file-is-read-only-error? . q4c00) (i/o-file-does-not-exist-error? . q4c2a) (i/o-file-already-exists-error? . q4c15) (i/o-error? . q4b76) (i/o-error-position . q4bbb) (i/o-error-port . q4c45) (i/o-error-filename . q4bd6) (i/o-encoding-error? . q4c73) (i/o-encoding-error-char . q4c75) (i/o-decoding-error? . q4c5a) (get-u8 . q50c3) (get-string-n! . q50c2) (get-string-n . q50c1) (get-string-all . q50c0) (get-line . q50bf) (get-datum . q50be) (get-char . q50bd) (get-bytevector-some . q50bc) (get-bytevector-n! . q50bb) (get-bytevector-n . q50ba) (get-bytevector-all . q50b9) (flush-output-port . q50b8) (close-port . q50b7) (scheme-report-environment . q2fbe) (quotient . q50b6) (null-environment . q2fbc) (remainder . q50b5) (modulo . q50b4) (inexact->exact . q50b3) (force . q50b2) (exact->inexact . q50b1) (make-promise . q50b0) (exit . q50af) (command-line . q4daa) (string-fill! . q50ae) (string-set! . q50ad) (set-cdr! . q50ac) (set-car! . q50ab) (remove . q50aa) (remv . q50a9) (remp . q50a8) (remq . q50a7) (partition . q50a6) (memv . q50a5) (memq . q50a4) (memp . q50a3) (member . q50a2) (exists . q50a1) (for-all . q50a0) (fold-right . q509f) (fold-left . q509e) (find . q509d) (filter . q509c) (cons* . q509b) (assv . q509a) (assq . q5099) (assp . q5098) (assoc . q5097) (call-with-string-output-port . q5096) (call-with-port . q5095) (call-with-bytevector-output-port . q5094) (bytevector->string . q5093) (buffer-mode? . q5092) (binary-port? . q5091) (with-exception-handler . q5090) (raise-continuable . q508f) (raise . q508e) (eval . q2fc2) (environment . q2fba) (make-enumeration . q508d) (enum-set=? . q508c) (enum-set-universe . q508b) (enum-set-union . q508a) (enum-set-subset? . q5089) (enum-set-projection . q5088) (enum-set-member? . q5087) (enum-set-intersection . q5086) (enum-set-indexer . q5085) (enum-set-difference . q5084) (enum-set-constructor . q5083) (enum-set-complement . q5082) (enum-set->list . q5081) (who-condition? . q4aea) (warning? . q4a62) (violation? . q4aa1) (undefined-violation? . q4b61) (syntax-violation? . q4b48) (syntax-violation-subform . q4b4c) (syntax-violation-form . q4b4a) (syntax-violation . q2fe2) (simple-conditions . q5080) (serious-condition? . q4a77) (non-continuable-violation? . q4b01) (message-condition? . q4a4b) (make-who-condition . q4ae6) (make-warning . q4a60) (make-violation . q4a9f) (make-undefined-violation . q4b5f) (make-syntax-violation . q4b42) (make-serious-condition . q4a75) (make-non-continuable-violation . q4aff) (make-message-condition . q4a47) (make-lexical-violation . q4b29) (make-irritants-condition . q4acb) (make-implementation-restriction-violation . q4b14) (make-error . q4a8a) (make-assertion-violation . q4ab4) (lexical-violation? . q4b2b) (irritants-condition? . q4acf) (implementation-restriction-violation? . q4b16) (error? . q4a8c) (condition-who . q4aec) (condition-predicate . q507f) (condition-message . q4a4d) (condition-irritants . q4ad1) (condition-accessor . q507e) (condition . q507d) (assertion-violation? . q4ab6) (condition? . q507c) (utf32->string . q507b) (utf16->string . q507a) (utf8->string . q5079) (uint-list->bytevector . q5078) (u8-list->bytevector . q5077) (string->utf8 . q5076) (string->utf32 . q5075) (string->utf16 . q5074) (sint-list->bytevector . q5073) (native-endianness . q5072) (bytevector? . q5071) (bytevector=? . q5070) (bytevector-uint-set! . q506f) (bytevector-uint-ref . q506e) (bytevector-u8-set! . q506d) (bytevector-u8-ref . q506c) (bytevector-u64-set! . q506b) (bytevector-u64-ref . q506a) (bytevector-u64-native-set! . q5069) (bytevector-u64-native-ref . q5068) (bytevector-u32-set! . q5067) (bytevector-u32-ref . q5066) (bytevector-u32-native-set! . q5065) (bytevector-u32-native-ref . q5064) (bytevector-u16-set! . q5063) (bytevector-u16-ref . q5062) (bytevector-u16-native-set! . q5061) (bytevector-u16-native-ref . q5060) (bytevector-sint-set! . q505f) (bytevector-sint-ref . q505e) (bytevector-s8-set! . q505d) (bytevector-s8-ref . q505c) (bytevector-s64-set! . q505b) (bytevector-s64-ref . q505a) (bytevector-s64-native-set! . q5059) (bytevector-s64-native-ref . q5058) (bytevector-s32-set! . q5057) (bytevector-s32-ref . q5056) (bytevector-s32-native-set! . q5055) (bytevector-s32-native-ref . q5054) (bytevector-s16-set! . q5053) (bytevector-s16-ref . q5052) (bytevector-s16-native-set! . q5051) (bytevector-s16-native-ref . q5050) (bytevector-length . q504f) (bytevector-ieee-single-ref . q504e) (bytevector-ieee-single-set! . q504d) (bytevector-ieee-single-native-set! . q504c) (bytevector-ieee-single-native-ref . q504b) (bytevector-ieee-double-set! . q504a) (bytevector-ieee-double-ref . q5049) (bytevector-ieee-double-native-set! . q5048) (bytevector-ieee-double-native-ref . q5047) (bytevector-fill! . q5046) (bytevector-copy! . q5045) (bytevector-copy . q5044) (bytevector->uint-list . q5043) (bytevector->u8-list . q5042) (bytevector->sint-list . q5041) (no-nans-violation? . q4c9f) (no-infinities-violation? . q4c8a) (make-no-nans-violation . q4c9d) (make-no-infinities-violation . q4c88) (real->flonum . q5040) (flzero? . q503f) (fltruncate . q503e) (fltan . q503d) (flsqrt . q503c) (flsin . q503b) (flround . q503a) (flpositive? . q5039) (flonum? . q5038) (flodd? . q5037) (flnumerator . q5036) (flnegative? . q5035) (flnan? . q5034) (flmod0 . q5033) (flmod . q5032) (flmin . q5031) (flmax . q5030) (fllog . q502f) (flinteger? . q502e) (flinfinite? . q502d) (flfloor . q502c) (flfinite? . q502b) (flexpt . q502a) (flexp . q5029) (fleven? . q5028) (fldiv0-and-mod0 . q5027) (fldiv0 . q5026) (fldiv-and-mod . q5025) (fldiv . q5024) (fldenominator . q5023) (flcos . q5022) (flceiling . q5021) (flatan . q5020) (flasin . q501f) (flacos . q501e) (flabs . q501d) (fl>? . q501c) (fl>=? . q501b) (fl=? . q501a) (fl<? . q5019) (fl<=? . q5018) (fl/ . q5017) (fl- . q5016) (fl+ . q5015) (fl* . q5014) (fixnum->flonum . q5013) (fxzero? . q5012) (fxxor . q5011) (fxrotate-bit-field . q5010) (fxreverse-bit-field . q500f) (fxpositive? . q500e) (fxodd? . q500d) (fxnot . q500c) (fxnegative? . q500b) (fxmod0 . q500a) (fxmod . q5009) (fxmin . q5008) (fxmax . q5007) (fxlength . q5006) (fxior . q5005) (fxif . q5004) (fxfirst-bit-set . q5003) (fxeven? . q5002) (fxdiv0-and-mod0 . q5001) (fxdiv0 . q5000) (fxdiv-and-mod . q4fff) (fxdiv . q4ffe) (fxcopy-bit-field . q4ffd) (fxcopy-bit . q4ffc) (fxbit-set? . q4ffb) (fxbit-field . q4ffa) (fxbit-count . q4ff9) (fxarithmetic-shift-right . q4ff8) (fxarithmetic-shift-left . q4ff7) (fxarithmetic-shift . q4ff6) (fxand . q4ff5) (fx>? . q4ff4) (fx>=? . q4ff3) (fx=? . q4ff2) (fx<? . q4ff1) (fx<=? . q4ff0) (fx-/carry . q4fef) (fx- . q4fee) (fx+/carry . q4fed) (fx+ . q4fec) (fx*/carry . q4feb) (fx* . q4fea) (greatest-fixnum . q4fe9) (least-fixnum . q4fe8) (fixnum-width . q4fe7) (fixnum? . q4fe6) (bitwise-rotate-bit-field . q4fe5) (bitwise-reverse-bit-field . q4fe4) (bitwise-length . q4fe3) (bitwise-if . q4fe2) (bitwise-first-bit-set . q4fe1) (bitwise-copy-bit-field . q4fe0) (bitwise-copy-bit . q4fdf) (bitwise-bit-set? . q4fde) (bitwise-bit-field . q4fdd) (bitwise-bit-count . q4fdc) (bitwise-xor . q4fdb) (bitwise-ior . q4fda) (bitwise-and . q4fd9) (bitwise-not . q4fd8) (bitwise-arithmetic-shift-right . q4fd7) (bitwise-arithmetic-shift-left . q4fd6) (bitwise-arithmetic-shift . q4fd5) (zero? . q4fd4) (vector? . q4fd3) (vector-set! . q4fd2) (vector-ref . q4fd1) (vector-map . q4fd0) (vector-length . q4fcf) (vector-for-each . q4fce) (vector-fill! . q4fcd) (vector->list . q4fcc) (vector . q4fcb) (values . q4fca) (truncate . q4fc9) (tan . q4fc8) (symbol? . q4fc7) (symbol=? . q4fc6) (symbol->string . q4fc5) (substring . q4fc4) (string? . q4fc3) (string>? . q4fc2) (string>=? . q4fc1) (string=? . q4fc0) (string<? . q4fbf) (string<=? . q4fbe) (string-ref . q4fbd) (string-length . q4fbc) (string-for-each . q4fbb) (string-copy . q4fba) (string-append . q4fb9) (string->symbol . q4fb8) (string->number . q4fb7) (string->list . q4fb6) (string . q4fb5) (sqrt . q4fb4) (sin . q4fb3) (round . q4fb2) (reverse . q4fb1) (real? . q4fb0) (real-valued? . q4faf) (real-part . q4fae) (rationalize . q4fad) (rational? . q4fac) (rational-valued? . q4fab) (procedure? . q4faa) (positive? . q4fa9) (pair? . q4fa8) (odd? . q4fa7) (numerator . q4fa6) (number? . q4fa5) (number->string . q4fa4) (null? . q4fa3) (not . q4fa2) (negative? . q4fa1) (nan? . q4fa0) (min . q4f9f) (max . q4f9e) (map . q4f9d) (make-vector . q4f9c) (make-string . q4f9b) (make-rectangular . q4f9a) (make-polar . q4f99) (magnitude . q4f98) (log . q4f97) (list? . q4f96) (list-tail . q4f95) (list-ref . q4f94) (list->vector . q4f93) (list->string . q4f92) (list . q4f91) (length . q4f90) (lcm . q4f8f) (integer? . q4f8e) (integer-valued? . q4f8d) (integer->char . q4f8c) (infinite? . q4f8b) (inexact? . q4f8a) (inexact . q4f89) (imag-part . q4f88) (gcd . q4f87) (for-each . q4f86) (floor . q4f85) (finite? . q4f84) (expt . q4f83) (exp . q4f82) (exact? . q4f81) (exact-integer-sqrt . q4f80) (exact . q4f7f) (even? . q4f7e) (error . q4f7d) (eqv? . q4f7c) (equal? . q4f7b) (eq? . q4f7a) (dynamic-wind . q4f79) (div0-and-mod0 . q4f78) (mod0 . q4f77) (div0 . q4f76) (div-and-mod . q4f75) (mod . q4f74) (div . q4f73) (denominator . q4f72) (cos . q4f71) (cons . q4f70) (complex? . q4f6f) (char? . q4f6e) (char>? . q4f6d) (char>=? . q4f6c) (char=? . q4f6b) (char<? . q4f6a) (char<=? . q4f69) (char->integer . q4f68) (ceiling . q4f67) (call-with-values . q4f66) (call/cc . q4f65) (call-with-current-continuation . q4f64) (cddddr . q4f63) (cdddar . q4f62) (cddadr . q4f61) (cddaar . q4f60) (cdaddr . q4f5f) (cdadar . q4f5e) (cdaadr . q4f5d) (cdaaar . q4f5c) (cadddr . q4f5b) (caddar . q4f5a) (cadadr . q4f59) (cadaar . q4f58) (caaddr . q4f57) (caadar . q4f56) (caaadr . q4f55) (caaaar . q4f54) (cdddr . q4f53) (cddar . q4f52) (cdadr . q4f51) (cdaar . q4f50) (caddr . q4f4f) (cadar . q4f4e) (caadr . q4f4d) (caaar . q4f4c) (cddr . q4f4b) (cdar . q4f4a) (cadr . q4f49) (caar . q4f48) (cdr . q4f47) (car . q4f46) (boolean? . q4f45) (boolean=? . q4f44) (atan . q4f43) (assertion-violation . q4f42) (assertion-error . q2fdc) (asin . q4f41) (apply . q4f40) (append . q4f3f) (angle . q4f3e) (acos . q4f3d) (abs . q4f3c) (/ . q4f3b) (* . q4f3a) (- . q4f39) (+ . q4f38) (>= . q4f37) (> . q4f36) (= . q4f35) (<= . q4f34) (< . q4f33) (library . q4f32) (&no-nans . q4f31) (&no-infinities . q4f30) (&i/o-encoding . q4f2f) (&i/o-decoding . q4f2e) (&i/o-port . q4f2d) (&i/o-file-does-not-exist . q4f2c) (&i/o-file-already-exists . q4f2b) (&i/o-file-is-read-only . q4f2a) (&i/o-file-protection . q4f29) (&i/o-filename . q4f28) (&i/o-invalid-position . q4f27) (&i/o-write . q4f26) (&i/o-read . q4f25) (&i/o . q4f24) (&undefined . q4f23) (&syntax . q4f22) (&lexical . q4f21) (&implementation-restriction . q4f20) (&non-continuable . q4f1f) (&who . q4f1e) (&irritants . q4f1d) (&assertion . q4f1c) (&violation . q4f1b) (&error . q4f1a) (&serious . q4f19) (&warning . q4f18) (&message . q4f17) (&condition . q4f16) (define-condition-type . q4f15) (define-enumeration . q4f14) (define-record-type . q4f13) (parent-rtd . q4f12) (nongenerative . q4f11) (opaque . q4f10) (sealed . q4f0f) (protocol . q4f0e) (parent . q4f0d) (immutable . q4f0c) (mutable . q4f0b) (fields . q4f0a) (error-handling-mode . q4f09) (file-options . q4f08) (buffer-mode . q4f07) (eol-style . q4f06) (guard . q4f05) (trace-define . q4f04) (trace-lambda . q4f03) (unsyntax-splicing . q4f02) (unsyntax . q4f01) (unquote-splicing . q4f00) (unquote . q4eff) (_ . q4efe) (else . q4efd) (=> . q4efc) (... . q4efb) (assert . q4efa) (endianness . q4ef9) (delay . q4ef8) (time . q4ef7) (do . q4ef6) (cond . q4ef5) (let* . q4ef4) (let . q4ef3) (let*-values . q4ef2) (let-values . q4ef1) (identifier-syntax . q4ef0) (with-syntax . q4eef) (quasisyntax . q4eee) (quasiquote . q4eed) (syntax-rules . q4eec) (include . q4eeb) (define-struct . q4eea) (record-constructor-descriptor . q4ee9) (record-type-descriptor . q4ee8) (case . q4ee7) (parameterize . q4ee6) (unless . q4ee5) (when . q4ee4) (or . q4ee3) (and . q4ee2) (if . q4ee1) (letrec* . q4ee0) (letrec . q4edf) (type-descriptor . q4ede) (case-lambda . q4edd) (lambda . q4edc) (syntax . q4edb) (syntax-case . q4eda) (quote . q4ed9) (foreign-call . q4ed8) (letrec-syntax . q4ed7) (let-syntax . q4ed6) (set! . q4ed5) (import . q4ed4) (begin . q4ed3) (module . q4ed2) (define-syntax . q4ed1) (define . q4ed0)) '((q4ca3 core-prim . &no-nans-rcd) (q4ca1 core-prim . &no-nans-rtd) (q4c8e core-prim . &no-infinities-rcd) (q4c8c core-prim . &no-infinities-rtd) (q4c79 core-prim . &i/o-encoding-rcd) (q4c77 core-prim . &i/o-encoding-rtd) (q4c5e core-prim . &i/o-decoding-rcd) (q4c5c core-prim . &i/o-decoding-rtd) (q4c49 core-prim . &i/o-port-rcd) (q4c47 core-prim . &i/o-port-rtd) (q4c2e core-prim . &i/o-file-does-not-exist-rcd) (q4c2c core-prim . &i/o-file-does-not-exist-rtd) (q4c19 core-prim . &i/o-file-already-exists-rcd) (q4c17 core-prim . &i/o-file-already-exists-rtd) (q4c04 core-prim . &i/o-file-is-read-only-rcd) (q4c02 core-prim . &i/o-file-is-read-only-rtd) (q4bef core-prim . &i/o-file-protection-rcd) (q4bed core-prim . &i/o-file-protection-rtd) (q4bda core-prim . &i/o-filename-rcd) (q4bd8 core-prim . &i/o-filename-rtd) (q4bbf core-prim . &i/o-invalid-position-rcd) (q4bbd core-prim . &i/o-invalid-position-rtd) (q4ba4 core-prim . &i/o-write-rcd) (q4ba2 core-prim . &i/o-write-rtd) (q4b8f core-prim . &i/o-read-rcd) (q4b8d core-prim . &i/o-read-rtd) (q4b7a core-prim . &i/o-rcd) (q4b78 core-prim . &i/o-rtd) (q4b65 core-prim . &undefined-rcd) (q4b63 core-prim . &undefined-rtd) (q4b50 core-prim . &syntax-rcd) (q4b4e core-prim . &syntax-rtd) (q4b2f core-prim . &lexical-rcd) (q4b2d core-prim . &lexical-rtd) (q4b1a core-prim . &implementation-restriction-rcd) (q4b18 core-prim . &implementation-restriction-rtd) (q4b05 core-prim . &non-continuable-rcd) (q4b03 core-prim . &non-continuable-rtd) (q4af0 core-prim . &who-rcd) (q4aee core-prim . &who-rtd) (q4ad5 core-prim . &irritants-rcd) (q4ad3 core-prim . &irritants-rtd) (q4aba core-prim . &assertion-rcd) (q4ab8 core-prim . &assertion-rtd) (q4aa5 core-prim . &violation-rcd) (q4aa3 core-prim . &violation-rtd) (q4a90 core-prim . &error-rcd) (q4a8e core-prim . &error-rtd) (q4a7b core-prim . &serious-rcd) (q4a79 core-prim . &serious-rtd) (q4a66 core-prim . &warning-rcd) (q4a64 core-prim . &warning-rtd) (q4a51 core-prim . &message-rcd) (q4a4f core-prim . &message-rtd) (q49f2 core-prim . &condition-rcd) (q49f0 core-prim . &condition-rtd) (q2fde core-prim . syntax-error) (q2ef9 core-prim . syntax-dispatch) (q51e8 core-prim . pretty-print) (q51e7 core-prim . eval-core) (q51e6 core-prim . set-symbol-value!) (q51e5 core-prim . symbol-value) (q51e4 core-prim . gensym) (q51e3 core-prim . void) (q4db0 core-prim . load) (q2fee core-prim . interaction-environment) (q51e2 core-prim . char-ready?) (q51e1 core-prim . regexp?) (q51e0 core-prim . read-line) (q51df core-prim . ungensym) (q51de core-prim . alist->eq-hash-table) (q51dd core-prim . assoc-ref) (q51dc core-prim . print) (q51db core-prim . format) (q51da core-prim . host-os) (q298f core-prim . library-path) (q51d9 core-prim . standard-library-path) (q51d8 core-prim . file-newer?) (q51d7 core-prim . stat-mtime) (q51d6 core-prim . write-to-file) (q51d5 core-prim . file->list) (q51d4 core-prim . file->string) (q51d3 core-prim . digit->integer) (q51d2 core-prim . call-with-string-input-port) (q51d1 core-prim . call-with-string-io) (q51d0 core-prim . string-split) (q51cf core-prim . bytevector-for-each) (q51ce core-prim . string->regexp) (q51cd core-prim . rxmatch) (q51cc core-prim . regexp-replace-all) (q51cb core-prim . hashtable-for-each) (q51ca core-prim . call-process) (q51c9 core-prim . local-tz-offset) (q51c8 core-prim . microseconds) (q51c7 core-prim . directory-list) (q51c6 core-prim . set-current-directory!) (q51c5 core-prim . expand-path) (q51c4 core-prim . current-directory) (q51c3 core-prim . %spawn) (q51c2 core-prim . %waitpid) (q51c1 core-prim . pointer-ref-c-int64) (q51c0 core-prim . pointer-ref-c-int32) (q51bf core-prim . pointer-ref-c-int16) (q51be core-prim . pointer-ref-c-int8) (q51bd core-prim . pointer-ref-c-uint64) (q51bc core-prim . pointer-ref-c-uint32) (q51bb core-prim . pointer-ref-c-uint16) (q51ba core-prim . pointer-ref-c-uint8) (q51b9 core-prim . pointer-set-c-uint64!) (q51b8 core-prim . pointer-set-c-uint32!) (q51b7 core-prim . pointer-set-c-uint16!) (q51b6 core-prim . pointer-set-c-uint8!) (q51b5 core-prim . pointer-set-c-int64!) (q51b4 core-prim . pointer-set-c-int32!) (q51b3 core-prim . pointer-set-c-int16!) (q51b2 core-prim . pointer-set-c-int8!) (q51b1 core-prim . pointer-set-c-pointer!) (q51b0 core-prim . pointer-set-c-double!) (q51af core-prim . pointer-set-c-float!) (q51ae core-prim . pointer-set-c-long-long!) (q51ad core-prim . pointer-set-c-long!) (q51ac core-prim . pointer-set-c-int!) (q51ab core-prim . pointer-set-c-short!) (q51aa core-prim . pointer-set-c-char!) (q51a9 core-prim . pointer-ref-c-pointer) (q51a8 core-prim . pointer-ref-c-double) (q51a7 core-prim . pointer-ref-c-float) (q51a6 core-prim . pointer-ref-c-unsigned-long-long) (q51a5 core-prim . pointer-ref-c-signed-long-long) (q51a4 core-prim . pointer-ref-c-unsigned-long) (q51a3 core-prim . pointer-ref-c-signed-long) (q51a2 core-prim . pointer-ref-c-unsigned-int) (q51a1 core-prim . pointer-ref-c-signed-int) (q51a0 core-prim . pointer-ref-c-unsigned-short) (q519f core-prim . pointer-ref-c-signed-short) (q519e core-prim . pointer-ref-c-unsigned-char) (q519d core-prim . pointer-ref-c-signed-char) (q519c core-prim . pointer->integer) (q519b core-prim . integer->pointer) (q519a core-prim . pointer?) (q5199 core-prim . shared-errno) (q5198 core-prim . %ffi-supported?) (q5197 core-prim . %ffi-pointer->string) (q5196 core-prim . %ffi-call->string-or-zero) (q5195 core-prim . %ffi-call->double) (q5194 core-prim . %ffi-call->void*) (q5193 core-prim . %ffi-call->void) (q5192 core-prim . %ffi-call->char) (q5191 core-prim . %ffi-call->int) (q5190 core-prim . %ffi-lookup) (q518f core-prim . %ffi-open) (q518e core-prim . %fork) (q518d core-prim . %pipe) (q518c core-prim . p) (q518b core-prim . open-output-string) (q518a core-prim . get-output-string) (q5189 core-prim . file-stat-ctime) (q5188 core-prim . file-stat-atime) (q5187 core-prim . file-stat-mtime) (q5186 core-prim . file-size-in-bytes) (q5185 core-prim . file-writable?) (q5184 core-prim . file-executable?) (q5183 core-prim . file-readable?) (q5182 core-prim . file-regular?) (q5181 core-prim . file-symbolic-link?) (q5180 core-prim . file-directory?) (q517f core-prim . create-symbolic-link) (q517e core-prim . rename-file) (q517d core-prim . delete-directory) (q517c core-prim . create-directory) (q517b core-prim . get-environment-variables) (q517a core-prim . get-environment-variable) (q5179 core-prim . get-timeofday) (q5178 core-prim . get-command-line) (q5177 core-prim . sys-display) (q5176 core-prim . whereis) (q5175 core-prim . register) (q5174 core-prim . vm-join!) (q5173 core-prim . vm-set-value!) (q5172 core-prim . vm?) (q5171 core-prim . main-vm?) (q5170 core-prim . vm-eval) (q516f core-prim . vm-self) (q516e core-prim . vm-start!) (q516d core-prim . make-vm) (q516c core-prim . mutex-try-lock!) (q516b core-prim . mutex-unlock!) (q516a core-prim . mutex-lock!) (q5169 core-prim . mutex?) (q5168 core-prim . make-mutex) (q5167 core-prim . condition-variable-notify-all!) (q5166 core-prim . condition-variable-notify!) (q5165 core-prim . condition-variable-wait!) (q5164 core-prim . make-condition-variable) (q5163 core-prim . mosh-executable-path) (q5162 core-prim . make-file-options) (q5161 core-prim . source-info) (q5160 core-prim . make-compiler-instruction) (q515f core-prim . make-instruction) (q515e core-prim . set-source-info!) (q515d core-prim . bignum?) (q515c core-prim . fast-equal?) (q515b core-prim . fasl-read) (q515a core-prim . fasl-write) (q5159 core-prim . time-usage) (q5158 core-prim . os-constant) (q27c2 core-prim . make-parameter) (q5157 core-prim . socket-port) (q5156 core-prim . socket-shutdown) (q5155 core-prim . socket-close) (q5154 core-prim . socket-send) (q5153 core-prim . socket-recv!) (q5152 core-prim . socket-recv) (q5151 core-prim . make-server-socket) (q5150 core-prim . make-client-socket) (q514f core-prim . socket-accept) (q514e core-prim . socket?) (q514d core-prim . string-upcase) (q514c core-prim . string-titlecase) (q514b core-prim . string-normalize-nfkd) (q514a core-prim . string-normalize-nfkc) (q5149 core-prim . string-normalize-nfd) (q5148 core-prim . string-normalize-nfc) (q5147 core-prim . string-foldcase) (q5146 core-prim . string-downcase) (q5145 core-prim . string-ci>?) (q5144 core-prim . string-ci>=?) (q5143 core-prim . string-ci=?) (q5142 core-prim . string-ci<?) (q5141 core-prim . string-ci<=?) (q5140 core-prim . char-whitespace?) (q513f core-prim . char-upper-case?) (q513e core-prim . char-title-case?) (q513d core-prim . char-numeric?) (q513c core-prim . char-lower-case?) (q513b core-prim . char-general-category) (q513a core-prim . char-upcase) (q5139 core-prim . char-titlecase) (q5138 core-prim . char-foldcase) (q5137 core-prim . char-downcase) (q5136 core-prim . char-ci>?) (q5135 core-prim . char-ci>=?) (q5134 core-prim . char-ci=?) (q5133 core-prim . char-ci<?) (q5132 core-prim . char-ci<=?) (q5131 core-prim . char-alphabetic?) (q2d26 core-prim . make-variable-transformer) (q2fe4 core-prim . identifier?) (q2fd0 core-prim . generate-temporaries) (q2fd2 core-prim . free-identifier=?) (q2fe8 core-prim . syntax->datum) (q2fe6 core-prim . datum->syntax) (q2fd4 core-prim . bound-identifier=?) (q5130 core-prim . record-type-descriptor?) (q512f core-prim . record-predicate) (q512e core-prim . record-mutator) (q512d core-prim . record-constructor) (q512c core-prim . record-accessor) (q512b core-prim . make-record-type-descriptor) (q512a core-prim . make-record-constructor-descriptor) (q5129 core-prim . record?) (q5128 core-prim . record-type-uid) (q5127 core-prim . record-type-sealed?) (q5126 core-prim . record-type-parent) (q5125 core-prim . record-type-opaque?) (q5124 core-prim . record-type-name) (q5123 core-prim . record-type-generative?) (q5122 core-prim . record-type-field-names) (q5121 core-prim . record-rtd) (q5120 core-prim . record-field-mutable?) (q511f core-prim . delete-file) (q511e core-prim . file-exists?) (q511d core-prim . vector-sort!) (q511c core-prim . vector-sort) (q511b core-prim . list-sort) (q511a core-prim . symbol-hash) (q5119 core-prim . string-ci-hash) (q5118 core-prim . string-hash) (q5117 core-prim . equal-hash) (q5116 core-prim . hashtable-equivalence-function) (q5115 core-prim . make-hashtable) (q5114 core-prim . hashtable-hash-function) (q5113 core-prim . make-eqv-hashtable) (q5112 core-prim . make-eq-hashtable) (q5111 core-prim . hashtable?) (q5110 core-prim . hashtable-update!) (q510f core-prim . hashtable-size) (q510e core-prim . hashtable-set!) (q510d core-prim . hashtable-ref) (q510c core-prim . hashtable-mutable?) (q510b core-prim . hashtable-keys) (q510a core-prim . hashtable-entries) (q5109 core-prim . hashtable-delete!) (q5108 core-prim . hashtable-copy) (q5107 core-prim . hashtable-contains?) (q5106 core-prim . hashtable-clear!) (q5105 core-prim . call-with-output-file) (q5104 core-prim . call-with-input-file) (q5103 core-prim . write-char) (q5102 core-prim . write) (q5101 core-prim . with-output-to-file) (q5100 core-prim . with-input-from-file) (q50ff core-prim . read-char) (q50fe core-prim . read) (q50fd core-prim . peek-char) (q50fc core-prim . open-output-file) (q50fb core-prim . open-input-file) (q50fa core-prim . newline) (q50f9 core-prim . display) (q50f8 core-prim . close-output-port) (q50f7 core-prim . close-input-port) (q50f6 core-prim . eof-object?) (q50f5 core-prim . eof-object) (q50f4 core-prim . current-error-port) (q50f3 core-prim . current-output-port) (q50f2 core-prim . current-input-port) (q50f1 core-prim . output-port?) (q50f0 core-prim . input-port?) (q50ef core-prim . utf-8-codec) (q50ee core-prim . utf-16-codec) (q50ed core-prim . transcoder-error-handling-mode) (q50ec core-prim . transcoder-eol-style) (q50eb core-prim . transcoder-codec) (q50ea core-prim . transcoded-port) (q50e9 core-prim . textual-port?) (q50e8 core-prim . string->bytevector) (q50e7 core-prim . standard-output-port) (q50e6 core-prim . standard-input-port) (q50e5 core-prim . standard-error-port) (q50e4 core-prim . set-port-position!) (q50e3 core-prim . put-u8) (q50e2 core-prim . put-string) (q50e1 core-prim . put-datum) (q50e0 core-prim . put-char) (q50df core-prim . put-bytevector) (q50de core-prim . port?) (q50dd core-prim . port-transcoder) (q50dc core-prim . port-position) (q50db core-prim . port-has-set-port-position!?) (q50da core-prim . port-has-port-position?) (q50d9 core-prim . port-eof?) (q50d8 core-prim . output-port-buffer-mode) (q50d7 core-prim . open-string-output-port) (q50d6 core-prim . open-string-input-port) (q50d5 core-prim . open-file-output-port) (q50d4 core-prim . open-file-input/output-port) (q50d3 core-prim . open-file-input-port) (q50d2 core-prim . open-bytevector-output-port) (q50d1 core-prim . open-bytevector-input-port) (q50d0 core-prim . native-transcoder) (q50cf core-prim . native-eol-style) (q50ce core-prim . make-transcoder) (q50cd core-prim . latin-1-codec) (q4b9e core-prim . make-i/o-write-error) (q4b89 core-prim . make-i/o-read-error) (q4c3f core-prim . make-i/o-port-error) (q4bb5 core-prim . make-i/o-invalid-position-error) (q4bd0 core-prim . make-i/o-filename-error) (q4be9 core-prim . make-i/o-file-protection-error) (q4bfe core-prim . make-i/o-file-is-read-only-error) (q4c28 core-prim . make-i/o-file-does-not-exist-error) (q4c13 core-prim . make-i/o-file-already-exists-error) (q4b74 core-prim . make-i/o-error) (q4c6f core-prim . make-i/o-encoding-error) (q4c58 core-prim . make-i/o-decoding-error) (q50cc core-prim . make-custom-textual-output-port) (q50cb core-prim . make-custom-textual-input/output-port) (q50ca core-prim . make-custom-textual-input-port) (q50c9 core-prim . make-custom-binary-output-port) (q50c8 core-prim . make-custom-binary-input/output-port) (q50c7 core-prim . make-custom-binary-input-port) (q50c6 core-prim . make-bytevector) (q50c5 core-prim . lookahead-u8) (q50c4 core-prim . lookahead-char) (q4ba0 core-prim . i/o-write-error?) (q4b8b core-prim . i/o-read-error?) (q4c43 core-prim . i/o-port-error?) (q4bb9 core-prim . i/o-invalid-position-error?) (q4bd4 core-prim . i/o-filename-error?) (q4beb core-prim . i/o-file-protection-error?) (q4c00 core-prim . i/o-file-is-read-only-error?) (q4c2a core-prim . i/o-file-does-not-exist-error?) (q4c15 core-prim . i/o-file-already-exists-error?) (q4b76 core-prim . i/o-error?) (q4bbb core-prim . i/o-error-position) (q4c45 core-prim . i/o-error-port) (q4bd6 core-prim . i/o-error-filename) (q4c73 core-prim . i/o-encoding-error?) (q4c75 core-prim . i/o-encoding-error-char) (q4c5a core-prim . i/o-decoding-error?) (q50c3 core-prim . get-u8) (q50c2 core-prim . get-string-n!) (q50c1 core-prim . get-string-n) (q50c0 core-prim . get-string-all) (q50bf core-prim . get-line) (q50be core-prim . get-datum) (q50bd core-prim . get-char) (q50bc core-prim . get-bytevector-some) (q50bb core-prim . get-bytevector-n!) (q50ba core-prim . get-bytevector-n) (q50b9 core-prim . get-bytevector-all) (q50b8 core-prim . flush-output-port) (q50b7 core-prim . close-port) (q2fbe core-prim . scheme-report-environment) (q50b6 core-prim . quotient) (q2fbc core-prim . null-environment) (q50b5 core-prim . remainder) (q50b4 core-prim . modulo) (q50b3 core-prim . inexact->exact) (q50b2 core-prim . force) (q50b1 core-prim . exact->inexact) (q50b0 core-prim . make-promise) (q50af core-prim . exit) (q4daa core-prim . command-line) (q50ae core-prim . string-fill!) (q50ad core-prim . string-set!) (q50ac core-prim . set-cdr!) (q50ab core-prim . set-car!) (q50aa core-prim . remove) (q50a9 core-prim . remv) (q50a8 core-prim . remp) (q50a7 core-prim . remq) (q50a6 core-prim . partition) (q50a5 core-prim . memv) (q50a4 core-prim . memq) (q50a3 core-prim . memp) (q50a2 core-prim . member) (q50a1 core-prim . exists) (q50a0 core-prim . for-all) (q509f core-prim . fold-right) (q509e core-prim . fold-left) (q509d core-prim . find) (q509c core-prim . filter) (q509b core-prim . cons*) (q509a core-prim . assv) (q5099 core-prim . assq) (q5098 core-prim . assp) (q5097 core-prim . assoc) (q5096 core-prim . call-with-string-output-port) (q5095 core-prim . call-with-port) (q5094 core-prim . call-with-bytevector-output-port) (q5093 core-prim . bytevector->string) (q5092 core-prim . buffer-mode?) (q5091 core-prim . binary-port?) (q5090 core-prim . with-exception-handler) (q508f core-prim . raise-continuable) (q508e core-prim . raise) (q2fc2 core-prim . eval) (q2fba core-prim . environment) (q508d core-prim . make-enumeration) (q508c core-prim . enum-set=?) (q508b core-prim . enum-set-universe) (q508a core-prim . enum-set-union) (q5089 core-prim . enum-set-subset?) (q5088 core-prim . enum-set-projection) (q5087 core-prim . enum-set-member?) (q5086 core-prim . enum-set-intersection) (q5085 core-prim . enum-set-indexer) (q5084 core-prim . enum-set-difference) (q5083 core-prim . enum-set-constructor) (q5082 core-prim . enum-set-complement) (q5081 core-prim . enum-set->list) (q4aea core-prim . who-condition?) (q4a62 core-prim . warning?) (q4aa1 core-prim . violation?) (q4b61 core-prim . undefined-violation?) (q4b48 core-prim . syntax-violation?) (q4b4c core-prim . syntax-violation-subform) (q4b4a core-prim . syntax-violation-form) (q2fe2 core-prim . syntax-violation) (q5080 core-prim . simple-conditions) (q4a77 core-prim . serious-condition?) (q4b01 core-prim . non-continuable-violation?) (q4a4b core-prim . message-condition?) (q4ae6 core-prim . make-who-condition) (q4a60 core-prim . make-warning) (q4a9f core-prim . make-violation) (q4b5f core-prim . make-undefined-violation) (q4b42 core-prim . make-syntax-violation) (q4a75 core-prim . make-serious-condition) (q4aff core-prim . make-non-continuable-violation) (q4a47 core-prim . make-message-condition) (q4b29 core-prim . make-lexical-violation) (q4acb core-prim . make-irritants-condition) (q4b14 core-prim . make-implementation-restriction-violation) (q4a8a core-prim . make-error) (q4ab4 core-prim . make-assertion-violation) (q4b2b core-prim . lexical-violation?) (q4acf core-prim . irritants-condition?) (q4b16 core-prim . implementation-restriction-violation?) (q4a8c core-prim . error?) (q4aec core-prim . condition-who) (q507f core-prim . condition-predicate) (q4a4d core-prim . condition-message) (q4ad1 core-prim . condition-irritants) (q507e core-prim . condition-accessor) (q507d core-prim . condition) (q4ab6 core-prim . assertion-violation?) (q507c core-prim . condition?) (q507b core-prim . utf32->string) (q507a core-prim . utf16->string) (q5079 core-prim . utf8->string) (q5078 core-prim . uint-list->bytevector) (q5077 core-prim . u8-list->bytevector) (q5076 core-prim . string->utf8) (q5075 core-prim . string->utf32) (q5074 core-prim . string->utf16) (q5073 core-prim . sint-list->bytevector) (q5072 core-prim . native-endianness) (q5071 core-prim . bytevector?) (q5070 core-prim . bytevector=?) (q506f core-prim . bytevector-uint-set!) (q506e core-prim . bytevector-uint-ref) (q506d core-prim . bytevector-u8-set!) (q506c core-prim . bytevector-u8-ref) (q506b core-prim . bytevector-u64-set!) (q506a core-prim . bytevector-u64-ref) (q5069 core-prim . bytevector-u64-native-set!) (q5068 core-prim . bytevector-u64-native-ref) (q5067 core-prim . bytevector-u32-set!) (q5066 core-prim . bytevector-u32-ref) (q5065 core-prim . bytevector-u32-native-set!) (q5064 core-prim . bytevector-u32-native-ref) (q5063 core-prim . bytevector-u16-set!) (q5062 core-prim . bytevector-u16-ref) (q5061 core-prim . bytevector-u16-native-set!) (q5060 core-prim . bytevector-u16-native-ref) (q505f core-prim . bytevector-sint-set!) (q505e core-prim . bytevector-sint-ref) (q505d core-prim . bytevector-s8-set!) (q505c core-prim . bytevector-s8-ref) (q505b core-prim . bytevector-s64-set!) (q505a core-prim . bytevector-s64-ref) (q5059 core-prim . bytevector-s64-native-set!) (q5058 core-prim . bytevector-s64-native-ref) (q5057 core-prim . bytevector-s32-set!) (q5056 core-prim . bytevector-s32-ref) (q5055 core-prim . bytevector-s32-native-set!) (q5054 core-prim . bytevector-s32-native-ref) (q5053 core-prim . bytevector-s16-set!) (q5052 core-prim . bytevector-s16-ref) (q5051 core-prim . bytevector-s16-native-set!) (q5050 core-prim . bytevector-s16-native-ref) (q504f core-prim . bytevector-length) (q504e core-prim . bytevector-ieee-single-ref) (q504d core-prim . bytevector-ieee-single-set!) (q504c core-prim . bytevector-ieee-single-native-set!) (q504b core-prim . bytevector-ieee-single-native-ref) (q504a core-prim . bytevector-ieee-double-set!) (q5049 core-prim . bytevector-ieee-double-ref) (q5048 core-prim . bytevector-ieee-double-native-set!) (q5047 core-prim . bytevector-ieee-double-native-ref) (q5046 core-prim . bytevector-fill!) (q5045 core-prim . bytevector-copy!) (q5044 core-prim . bytevector-copy) (q5043 core-prim . bytevector->uint-list) (q5042 core-prim . bytevector->u8-list) (q5041 core-prim . bytevector->sint-list) (q4c9f core-prim . no-nans-violation?) (q4c8a core-prim . no-infinities-violation?) (q4c9d core-prim . make-no-nans-violation) (q4c88 core-prim . make-no-infinities-violation) (q5040 core-prim . real->flonum) (q503f core-prim . flzero?) (q503e core-prim . fltruncate) (q503d core-prim . fltan) (q503c core-prim . flsqrt) (q503b core-prim . flsin) (q503a core-prim . flround) (q5039 core-prim . flpositive?) (q5038 core-prim . flonum?) (q5037 core-prim . flodd?) (q5036 core-prim . flnumerator) (q5035 core-prim . flnegative?) (q5034 core-prim . flnan?) (q5033 core-prim . flmod0) (q5032 core-prim . flmod) (q5031 core-prim . flmin) (q5030 core-prim . flmax) (q502f core-prim . fllog) (q502e core-prim . flinteger?) (q502d core-prim . flinfinite?) (q502c core-prim . flfloor) (q502b core-prim . flfinite?) (q502a core-prim . flexpt) (q5029 core-prim . flexp) (q5028 core-prim . fleven?) (q5027 core-prim . fldiv0-and-mod0) (q5026 core-prim . fldiv0) (q5025 core-prim . fldiv-and-mod) (q5024 core-prim . fldiv) (q5023 core-prim . fldenominator) (q5022 core-prim . flcos) (q5021 core-prim . flceiling) (q5020 core-prim . flatan) (q501f core-prim . flasin) (q501e core-prim . flacos) (q501d core-prim . flabs) (q501c core-prim . fl>?) (q501b core-prim . fl>=?) (q501a core-prim . fl=?) (q5019 core-prim . fl<?) (q5018 core-prim . fl<=?) (q5017 core-prim . fl/) (q5016 core-prim . fl-) (q5015 core-prim . fl+) (q5014 core-prim . fl*) (q5013 core-prim . fixnum->flonum) (q5012 core-prim . fxzero?) (q5011 core-prim . fxxor) (q5010 core-prim . fxrotate-bit-field) (q500f core-prim . fxreverse-bit-field) (q500e core-prim . fxpositive?) (q500d core-prim . fxodd?) (q500c core-prim . fxnot) (q500b core-prim . fxnegative?) (q500a core-prim . fxmod0) (q5009 core-prim . fxmod) (q5008 core-prim . fxmin) (q5007 core-prim . fxmax) (q5006 core-prim . fxlength) (q5005 core-prim . fxior) (q5004 core-prim . fxif) (q5003 core-prim . fxfirst-bit-set) (q5002 core-prim . fxeven?) (q5001 core-prim . fxdiv0-and-mod0) (q5000 core-prim . fxdiv0) (q4fff core-prim . fxdiv-and-mod) (q4ffe core-prim . fxdiv) (q4ffd core-prim . fxcopy-bit-field) (q4ffc core-prim . fxcopy-bit) (q4ffb core-prim . fxbit-set?) (q4ffa core-prim . fxbit-field) (q4ff9 core-prim . fxbit-count) (q4ff8 core-prim . fxarithmetic-shift-right) (q4ff7 core-prim . fxarithmetic-shift-left) (q4ff6 core-prim . fxarithmetic-shift) (q4ff5 core-prim . fxand) (q4ff4 core-prim . fx>?) (q4ff3 core-prim . fx>=?) (q4ff2 core-prim . fx=?) (q4ff1 core-prim . fx<?) (q4ff0 core-prim . fx<=?) (q4fef core-prim . fx-/carry) (q4fee core-prim . fx-) (q4fed core-prim . fx+/carry) (q4fec core-prim . fx+) (q4feb core-prim . fx*/carry) (q4fea core-prim . fx*) (q4fe9 core-prim . greatest-fixnum) (q4fe8 core-prim . least-fixnum) (q4fe7 core-prim . fixnum-width) (q4fe6 core-prim . fixnum?) (q4fe5 core-prim . bitwise-rotate-bit-field) (q4fe4 core-prim . bitwise-reverse-bit-field) (q4fe3 core-prim . bitwise-length) (q4fe2 core-prim . bitwise-if) (q4fe1 core-prim . bitwise-first-bit-set) (q4fe0 core-prim . bitwise-copy-bit-field) (q4fdf core-prim . bitwise-copy-bit) (q4fde core-prim . bitwise-bit-set?) (q4fdd core-prim . bitwise-bit-field) (q4fdc core-prim . bitwise-bit-count) (q4fdb core-prim . bitwise-xor) (q4fda core-prim . bitwise-ior) (q4fd9 core-prim . bitwise-and) (q4fd8 core-prim . bitwise-not) (q4fd7 core-prim . bitwise-arithmetic-shift-right) (q4fd6 core-prim . bitwise-arithmetic-shift-left) (q4fd5 core-prim . bitwise-arithmetic-shift) (q4fd4 core-prim . zero?) (q4fd3 core-prim . vector?) (q4fd2 core-prim . vector-set!) (q4fd1 core-prim . vector-ref) (q4fd0 core-prim . vector-map) (q4fcf core-prim . vector-length) (q4fce core-prim . vector-for-each) (q4fcd core-prim . vector-fill!) (q4fcc core-prim . vector->list) (q4fcb core-prim . vector) (q4fca core-prim . values) (q4fc9 core-prim . truncate) (q4fc8 core-prim . tan) (q4fc7 core-prim . symbol?) (q4fc6 core-prim . symbol=?) (q4fc5 core-prim . symbol->string) (q4fc4 core-prim . substring) (q4fc3 core-prim . string?) (q4fc2 core-prim . string>?) (q4fc1 core-prim . string>=?) (q4fc0 core-prim . string=?) (q4fbf core-prim . string<?) (q4fbe core-prim . string<=?) (q4fbd core-prim . string-ref) (q4fbc core-prim . string-length) (q4fbb core-prim . string-for-each) (q4fba core-prim . string-copy) (q4fb9 core-prim . string-append) (q4fb8 core-prim . string->symbol) (q4fb7 core-prim . string->number) (q4fb6 core-prim . string->list) (q4fb5 core-prim . string) (q4fb4 core-prim . sqrt) (q4fb3 core-prim . sin) (q4fb2 core-prim . round) (q4fb1 core-prim . reverse) (q4fb0 core-prim . real?) (q4faf core-prim . real-valued?) (q4fae core-prim . real-part) (q4fad core-prim . rationalize) (q4fac core-prim . rational?) (q4fab core-prim . rational-valued?) (q4faa core-prim . procedure?) (q4fa9 core-prim . positive?) (q4fa8 core-prim . pair?) (q4fa7 core-prim . odd?) (q4fa6 core-prim . numerator) (q4fa5 core-prim . number?) (q4fa4 core-prim . number->string) (q4fa3 core-prim . null?) (q4fa2 core-prim . not) (q4fa1 core-prim . negative?) (q4fa0 core-prim . nan?) (q4f9f core-prim . min) (q4f9e core-prim . max) (q4f9d core-prim . map) (q4f9c core-prim . make-vector) (q4f9b core-prim . make-string) (q4f9a core-prim . make-rectangular) (q4f99 core-prim . make-polar) (q4f98 core-prim . magnitude) (q4f97 core-prim . log) (q4f96 core-prim . list?) (q4f95 core-prim . list-tail) (q4f94 core-prim . list-ref) (q4f93 core-prim . list->vector) (q4f92 core-prim . list->string) (q4f91 core-prim . list) (q4f90 core-prim . length) (q4f8f core-prim . lcm) (q4f8e core-prim . integer?) (q4f8d core-prim . integer-valued?) (q4f8c core-prim . integer->char) (q4f8b core-prim . infinite?) (q4f8a core-prim . inexact?) (q4f89 core-prim . inexact) (q4f88 core-prim . imag-part) (q4f87 core-prim . gcd) (q4f86 core-prim . for-each) (q4f85 core-prim . floor) (q4f84 core-prim . finite?) (q4f83 core-prim . expt) (q4f82 core-prim . exp) (q4f81 core-prim . exact?) (q4f80 core-prim . exact-integer-sqrt) (q4f7f core-prim . exact) (q4f7e core-prim . even?) (q4f7d core-prim . error) (q4f7c core-prim . eqv?) (q4f7b core-prim . equal?) (q4f7a core-prim . eq?) (q4f79 core-prim . dynamic-wind) (q4f78 core-prim . div0-and-mod0) (q4f77 core-prim . mod0) (q4f76 core-prim . div0) (q4f75 core-prim . div-and-mod) (q4f74 core-prim . mod) (q4f73 core-prim . div) (q4f72 core-prim . denominator) (q4f71 core-prim . cos) (q4f70 core-prim . cons) (q4f6f core-prim . complex?) (q4f6e core-prim . char?) (q4f6d core-prim . char>?) (q4f6c core-prim . char>=?) (q4f6b core-prim . char=?) (q4f6a core-prim . char<?) (q4f69 core-prim . char<=?) (q4f68 core-prim . char->integer) (q4f67 core-prim . ceiling) (q4f66 core-prim . call-with-values) (q4f65 core-prim . call/cc) (q4f64 core-prim . call-with-current-continuation) (q4f63 core-prim . cddddr) (q4f62 core-prim . cdddar) (q4f61 core-prim . cddadr) (q4f60 core-prim . cddaar) (q4f5f core-prim . cdaddr) (q4f5e core-prim . cdadar) (q4f5d core-prim . cdaadr) (q4f5c core-prim . cdaaar) (q4f5b core-prim . cadddr) (q4f5a core-prim . caddar) (q4f59 core-prim . cadadr) (q4f58 core-prim . cadaar) (q4f57 core-prim . caaddr) (q4f56 core-prim . caadar) (q4f55 core-prim . caaadr) (q4f54 core-prim . caaaar) (q4f53 core-prim . cdddr) (q4f52 core-prim . cddar) (q4f51 core-prim . cdadr) (q4f50 core-prim . cdaar) (q4f4f core-prim . caddr) (q4f4e core-prim . cadar) (q4f4d core-prim . caadr) (q4f4c core-prim . caaar) (q4f4b core-prim . cddr) (q4f4a core-prim . cdar) (q4f49 core-prim . cadr) (q4f48 core-prim . caar) (q4f47 core-prim . cdr) (q4f46 core-prim . car) (q4f45 core-prim . boolean?) (q4f44 core-prim . boolean=?) (q4f43 core-prim . atan) (q4f42 core-prim . assertion-violation) (q2fdc core-prim . assertion-error) (q4f41 core-prim . asin) (q4f40 core-prim . apply) (q4f3f core-prim . append) (q4f3e core-prim . angle) (q4f3d core-prim . acos) (q4f3c core-prim . abs) (q4f3b core-prim . /) (q4f3a core-prim . *) (q4f39 core-prim . -) (q4f38 core-prim . +) (q4f37 core-prim . >=) (q4f36 core-prim . >) (q4f35 core-prim . =) (q4f34 core-prim . <=) (q4f33 core-prim . <) (q4f32 core-prim . library) (q4f31 $core-rtd &no-nans-rtd &no-nans-rcd) (q4f30 $core-rtd &no-infinities-rtd &no-infinities-rcd) (q4f2f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (q4f2e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (q4f2d $core-rtd &i/o-port-rtd &i/o-port-rcd) (q4f2c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (q4f2b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (q4f2a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (q4f29 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (q4f28 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (q4f27 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (q4f26 $core-rtd &i/o-write-rtd &i/o-write-rcd) (q4f25 $core-rtd &i/o-read-rtd &i/o-read-rcd) (q4f24 $core-rtd &i/o-rtd &i/o-rcd) (q4f23 $core-rtd &undefined-rtd &undefined-rcd) (q4f22 $core-rtd &syntax-rtd &syntax-rcd) (q4f21 $core-rtd &lexical-rtd &lexical-rcd) (q4f20 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (q4f1f $core-rtd &non-continuable-rtd &non-continuable-rcd) (q4f1e $core-rtd &who-rtd &who-rcd) (q4f1d $core-rtd &irritants-rtd &irritants-rcd) (q4f1c $core-rtd &assertion-rtd &assertion-rcd) (q4f1b $core-rtd &violation-rtd &violation-rcd) (q4f1a $core-rtd &error-rtd &error-rcd) (q4f19 $core-rtd &serious-rtd &serious-rcd) (q4f18 $core-rtd &warning-rtd &warning-rcd) (q4f17 $core-rtd &message-rtd &message-rcd) (q4f16 $core-rtd &condition-rtd &condition-rcd) (q4f15 macro . define-condition-type) (q4f14 macro . define-enumeration) (q4f13 macro . define-record-type) (q4f12 macro . parent-rtd) (q4f11 macro . nongenerative) (q4f10 macro . opaque) (q4f0f macro . sealed) (q4f0e macro . protocol) (q4f0d macro . parent) (q4f0c macro . immutable) (q4f0b macro . mutable) (q4f0a macro . fields) (q4f09 macro . error-handling-mode) (q4f08 macro . file-options) (q4f07 macro . buffer-mode) (q4f06 macro . eol-style) (q4f05 macro . guard) (q4f04 macro . trace-define) (q4f03 macro . trace-lambda) (q4f02 macro . unsyntax-splicing) (q4f01 macro . unsyntax) (q4f00 macro . unquote-splicing) (q4eff macro . unquote) (q4efe macro . _) (q4efd macro . else) (q4efc macro . =>) (q4efb macro . ...) (q4efa macro . assert) (q4ef9 macro . endianness) (q4ef8 macro . delay) (q4ef7 macro . time) (q4ef6 macro . do) (q4ef5 macro . cond) (q4ef4 macro . let*) (q4ef3 macro . let) (q4ef2 macro . let*-values) (q4ef1 macro . let-values) (q4ef0 macro . identifier-syntax) (q4eef macro . with-syntax) (q4eee macro . quasisyntax) (q4eed macro . quasiquote) (q4eec macro . syntax-rules) (q4eeb macro . include) (q4eea macro . define-struct) (q4ee9 core-macro . record-constructor-descriptor) (q4ee8 core-macro . record-type-descriptor) (q4ee7 macro . case) (q4ee6 macro . parameterize) (q4ee5 macro . unless) (q4ee4 macro . when) (q4ee3 core-macro . or) (q4ee2 core-macro . and) (q4ee1 core-macro . if) (q4ee0 core-macro . letrec*) (q4edf core-macro . letrec) (q4ede core-macro . type-descriptor) (q4edd core-macro . case-lambda) (q4edc core-macro . lambda) (q4edb core-macro . syntax) (q4eda core-macro . syntax-case) (q4ed9 core-macro . quote) (q4ed8 core-macro . foreign-call) (q4ed7 letrec-syntax) (q4ed6 let-syntax) (q4ed5 set!) (q4ed4 import) (q4ed3 begin) (q4ed2 module) (q4ed1 define-syntax) (q4ed0 define)) values values '#f '#f '#f '#f) (q2b11@q29b0@install-library 'q5209 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . q51e8) (eval-core . q51e7) (set-symbol-value! . q51e6) (symbol-value . q51e5) (gensym . q51e4) (void . q51e3)) '() values values '#f '#f '#f '#f) (q2b11@q29b0@install-library 'q520a '(mosh) '() '() '() '() '((set-symbol-value! . q51e6) (symbol-value . q51e5) (regexp? . q51e1) (read-line . q51e0) (ungensym . q51df) (alist->eq-hash-table . q51de) (assoc-ref . q51dd) (print . q51dc) (format . q51db) (host-os . q51da) (library-path . q298f) (standard-library-path . q51d9) (file-newer? . q51d8) (stat-mtime . q51d7) (digit->integer . q51d3) (call-with-string-input-port . q51d2) (call-with-string-io . q51d1) (string-split . q51d0) (bytevector-for-each . q51cf) (string->regexp . q51ce) (rxmatch . q51cd) (regexp-replace-all . q51cc) (hashtable-for-each . q51cb) (set-current-directory! . q51c6) (expand-path . q51c5) (current-directory . q51c4) (p . q518c) (get-timeofday . q5179) (get-command-line . q5178) (sys-display . q5177) (whereis . q5176) (register . q5175) (vm-join! . q5174) (vm-set-value! . q5173) (vm? . q5172) (main-vm? . q5171) (vm-eval . q5170) (vm-self . q516f) (vm-start! . q516e) (make-vm . q516d) (mutex-try-lock! . q516c) (mutex-unlock! . q516b) (mutex-lock! . q516a) (mutex? . q5169) (make-mutex . q5168) (condition-variable-notify-all! . q5167) (condition-variable-notify! . q5166) (condition-variable-wait! . q5165) (make-condition-variable . q5164) (mosh-executable-path . q5163) (make-file-options . q5162) (source-info . q5161) (make-compiler-instruction . q5160) (make-instruction . q515f) (set-source-info! . q515e) (bignum? . q515d) (fast-equal? . q515c) (fasl-read . q515b) (fasl-write . q515a) (time-usage . q5159) (os-constant . q5158) (time . q4ef7) (include . q4eeb)) '() values values '#f '#f '#f '#f) (q2b11@q29b0@install-library 'q520b '(system) '() '() '() '() '((write-to-file . q51d6) (file->list . q51d5) (file->string . q51d4) (call-process . q51ca) (local-tz-offset . q51c9) (microseconds . q51c8) (directory-list . q51c7) (expand-path . q51c5) (%spawn . q51c3) (%waitpid . q51c2) (pointer-ref-c-int64 . q51c1) (pointer-ref-c-int32 . q51c0) (pointer-ref-c-int16 . q51bf) (pointer-ref-c-int8 . q51be) (pointer-ref-c-uint64 . q51bd) (pointer-ref-c-uint32 . q51bc) (pointer-ref-c-uint16 . q51bb) (pointer-ref-c-uint8 . q51ba) (pointer-set-c-uint64! . q51b9) (pointer-set-c-uint32! . q51b8) (pointer-set-c-uint16! . q51b7) (pointer-set-c-uint8! . q51b6) (pointer-set-c-int64! . q51b5) (pointer-set-c-int32! . q51b4) (pointer-set-c-int16! . q51b3) (pointer-set-c-int8! . q51b2) (pointer-set-c-pointer! . q51b1) (pointer-set-c-double! . q51b0) (pointer-set-c-float! . q51af) (pointer-set-c-long-long! . q51ae) (pointer-set-c-long! . q51ad) (pointer-set-c-int! . q51ac) (pointer-set-c-short! . q51ab) (pointer-set-c-char! . q51aa) (pointer-ref-c-pointer . q51a9) (pointer-ref-c-double . q51a8) (pointer-ref-c-float . q51a7) (pointer-ref-c-unsigned-long-long . q51a6) (pointer-ref-c-signed-long-long . q51a5) (pointer-ref-c-unsigned-long . q51a4) (pointer-ref-c-signed-long . q51a3) (pointer-ref-c-unsigned-int . q51a2) (pointer-ref-c-signed-int . q51a1) (pointer-ref-c-unsigned-short . q51a0) (pointer-ref-c-signed-short . q519f) (pointer-ref-c-unsigned-char . q519e) (pointer-ref-c-signed-char . q519d) (pointer->integer . q519c) (integer->pointer . q519b) (pointer? . q519a) (shared-errno . q5199) (%ffi-supported? . q5198) (%ffi-pointer->string . q5197) (%ffi-call->string-or-zero . q5196) (%ffi-call->double . q5195) (%ffi-call->void* . q5194) (%ffi-call->void . q5193) (%ffi-call->char . q5192) (%ffi-call->int . q5191) (%ffi-lookup . q5190) (%ffi-open . q518f) (%fork . q518e) (%pipe . q518d) (open-output-string . q518b) (get-output-string . q518a) (file-stat-ctime . q5189) (file-stat-atime . q5188) (file-stat-mtime . q5187) (file-size-in-bytes . q5186) (file-writable? . q5185) (file-executable? . q5184) (file-readable? . q5183) (file-regular? . q5182) (file-symbolic-link? . q5181) (file-directory? . q5180) (create-symbolic-link . q517f) (rename-file . q517e) (delete-directory . q517d) (create-directory . q517c) (get-environment-variables . q517b) (get-environment-variable . q517a) (make-parameter . q27c2) (socket-port . q5157) (socket-shutdown . q5156) (socket-close . q5155) (socket-send . q5154) (socket-recv! . q5153) (socket-recv . q5152) (make-server-socket . q5151) (make-client-socket . q5150) (socket-accept . q514f) (socket? . q514e) (parameterize . q4ee6)) '() values values '#f '#f '#f '#f))
((lambda (q4d99@add-library-path! q4d9b@parse-and-add-library-path q4d9d@for-each-with-index q4d9f@rpad q4da1@condition-printer q4da3@record->field-alist q4da5@map-with-index q4da7@repl q4da9@trace-printer q4dab@command-line q4dad@local-library-path q4daf@load/args q4db1@load q4db3@ironscheme-build q4db5@eval-top-level q4db7@compile-system-libraries q4db9@compile q4dbb@compile->closure q4dbd@pre-compile-r6rs-file q4dbf@load-r6rs-top-level q4dc1@load-r6rs-top-level-sexp) (begin (set! q4d99@add-library-path! (lambda (q4de4@path) (q2b01@q2990@library-path (append (q2b01@q2990@library-path) (list q4de4@path))))) (set! q4d9b@parse-and-add-library-path (lambda (q4de6@paths q4de7@message) ((lambda (q4dea@t) (if q4dea@t ((lambda (q4dec@paths) (for-each (lambda (q4dee@path) (if (file-exists? q4dee@path) (q4d99@add-library-path! (expand-path q4dee@path)) (format (current-error-port) q4de7@message q4dee@path))) (string-split q4dec@paths '#\:))) q4dea@t) (void))) q4de6@paths))) (set! q4d9d@for-each-with-index (lambda (q4df0@proc q4df1@lst) (letrec ((q4df4@loop (lambda (q4df6@i q4df7@lst) (if (null? q4df7@lst) (if '#f '#f (void)) (begin (q4df0@proc q4df6@i (car q4df7@lst)) (q4df4@loop (+ q4df6@i '1) (cdr q4df7@lst))))))) (q4df4@loop '1 q4df1@lst)))) (set! q4d9f@rpad (lambda (q4dfa@str q4dfb@pad q4dfc@n) ((lambda (q4e00@rest) ((letrec ((q4e02@loop (lambda (q4e04@rest q4e05@ret) (if (<= q4e04@rest '0) q4e05@ret (q4e02@loop (- q4e04@rest '1) (string-append q4e05@ret q4dfb@pad)))))) q4e02@loop) q4e00@rest (format '"~a" q4dfa@str))) (- q4dfc@n (string-length (format '"~a" q4dfa@str)))))) (set! q4da1@condition-printer (lambda (q4e08@e q4e09@port) ((lambda (q4e0d@max-condition-len) (begin (set! q4e0d@max-condition-len (apply max (map (lambda (q4e1e@c) (string-length (symbol->string (record-type-name (record-rtd q4e1e@c))))) (simple-conditions q4e08@e)))) (begin (display '" Condition components:\n" q4e09@port) (q4d9d@for-each-with-index (lambda (q4e0e@i q4e0f@x) ((lambda (q4e12@rtd q4e13@fields-alist) (begin (format q4e09@port '" ~d. ~a" q4e0e@i (q4d9f@rpad (symbol->string (record-type-name q4e12@rtd)) '" " q4e0d@max-condition-len)) (if (null? q4e13@fields-alist) (newline q4e09@port) (void)) ((letrec ((q4e16@loop (lambda (q4e18@first q4e19@fields-alist) (if (null? q4e19@fields-alist) '() ((lambda (q4e1c@field) (begin (if (not q4e18@first) (display (q4d9f@rpad '"" '" " (+ '4 q4e0d@max-condition-len)) q4e09@port) (void)) (display '"       " q4e09@port) (display (car q4e1c@field) q4e09@port) (display '": " q4e09@port) (write (cdr q4e1c@field) q4e09@port) (newline q4e09@port) (q4e16@loop '#f (cdr q4e19@fields-alist)))) (car q4e19@fields-alist)))))) q4e16@loop) '#t q4e13@fields-alist))) (record-rtd q4e0f@x) (q4da3@record->field-alist q4e0f@x))) (simple-conditions q4e08@e))))) '#f))) (set! q4da3@record->field-alist (lambda (q4e20@r) ((lambda (q4e23@ref) (begin (set! q4e23@ref (lambda (q4e2e@rtd q4e2f@i q4e30@x) ((lambda (q4e34@val) (if (symbol? q4e34@val) (ungensym q4e34@val) q4e34@val)) ((record-accessor q4e2e@rtd q4e2f@i) q4e30@x)))) ((letrec ((q4e24@loop (lambda (q4e26@ret q4e27@rtd) (if q4e27@rtd (q4e24@loop (append q4e26@ret (q4da5@map-with-index (lambda (q4e2a@i q4e2b@field) (cons q4e2b@field (q4e23@ref q4e27@rtd q4e2a@i q4e20@r))) (vector->list (record-type-field-names q4e27@rtd)))) (record-type-parent q4e27@rtd)) q4e26@ret)))) q4e24@loop) '() (record-rtd q4e20@r)))) '#f))) (set! q4da5@map-with-index (lambda (q4e36@proc q4e37@lst) ((letrec ((q4e3a@loop (lambda (q4e3c@i q4e3d@lst q4e3e@ret) (if (null? q4e3d@lst) (reverse q4e3e@ret) (q4e3a@loop (+ q4e3c@i '1) (cdr q4e3d@lst) (cons (q4e36@proc q4e3c@i (car q4e3d@lst)) q4e3e@ret)))))) q4e3a@loop) '0 q4e37@lst '()))) (set! q4da7@repl (lambda q4e42@x ((lambda (q4e45@rec) (begin (set! q4e45@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (q4e48@q4e46) (lambda () (with-exception-handler (lambda (q4e4a@e) ((call/cc (lambda (q4e4c@q4e47) (q4e48@q4e46 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? q4e4a@e) (q4da1@condition-printer q4e4a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" q4e4a@e))) (q4e4c@q4e47 (lambda () (raise-continuable q4e4a@e)))))))))) (lambda () ((letrec ((q4e4e@loop (lambda (q4e50@line q4e51@accum) ((lambda (q4e55@parentheses-ok? q4e57@eval-string-print) (begin (set! q4e55@parentheses-ok? (lambda (q4e5c@text) ((letrec ((q4e5e@loop (lambda (q4e60@chars q4e61@p0 q4e62@p1) (if (null? q4e60@chars) (= '0 q4e61@p0 q4e62@p1) ((lambda (q4e66@t) (if (memv q4e66@t '(#\()) (q4e5e@loop (cdr q4e60@chars) (+ q4e61@p0 '1) q4e62@p1) (if (memv q4e66@t '(#\))) (q4e5e@loop (cdr q4e60@chars) (- q4e61@p0 '1) q4e62@p1) (if (memv q4e66@t '(#\[)) (q4e5e@loop (cdr q4e60@chars) q4e61@p0 (+ q4e62@p1 '1)) (if (memv q4e66@t '(#\])) (q4e5e@loop (cdr q4e60@chars) q4e61@p0 (- q4e62@p1 '1)) (q4e5e@loop (cdr q4e60@chars) q4e61@p0 q4e62@p1)))))) (car q4e60@chars)))))) q4e5e@loop) (string->list q4e5c@text) '0 '0))) (set! q4e57@eval-string-print (lambda (q4e5a@text) (if (not (or (string=? '"\n" q4e5a@text) (= '0 (string-length q4e5a@text)))) (write (q4db5@eval-top-level (call-with-port (open-string-input-port q4e5a@text) read))) (void)))) (if (eof-object? q4e50@line) (begin (q4e57@eval-string-print q4e51@accum) (exit)) ((lambda (q4e58@current) (if (q4e55@parentheses-ok? q4e58@current) (q4e57@eval-string-print q4e58@current) (q4e4e@loop (get-line (current-input-port)) q4e58@current))) (string-append q4e51@accum q4e50@line))))) '#f '#f)))) q4e4e@loop) (get-line (current-input-port)) '""))))))) (newline) (q4e45@rec)))) (q4e45@rec))) '#f))) (set! q4da9@trace-printer (q2899@q27c3@make-parameter write)) (set! q4dab@command-line (q2899@q27c3@make-parameter (get-command-line))) (set! q4dad@local-library-path (lambda (q4e68@filename) (q2b01@q2990@library-path))) (set! q4daf@load/args (lambda (q4e6a@filename . q4e6c@args) (begin (apply q4dbf@load-r6rs-top-level q4e6a@filename 'load q4e6c@args) (void)))) (set! q4db1@load (lambda (q4e6e@filename) (begin (apply q4dbf@load-r6rs-top-level q4e6e@filename 'load (q4dab@command-line)) (void)))) (set! q4db3@ironscheme-build (lambda () (q4db1@load '"ironscheme-buildscript.ss"))) (set! q4db5@eval-top-level (lambda (q4e70@x) (q49c5@q2fc3@eval q4e70@x (q49db@q2fef@interaction-environment)))) (set! q4db7@compile-system-libraries (lambda () (q4db5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! q4db9@compile (lambda (q4e72@filename) (q4dbf@load-r6rs-top-level q4e72@filename 'compile))) (set! q4dbb@compile->closure (lambda (q4e74@filename) (q4dbf@load-r6rs-top-level q4e74@filename 'closure))) (set! q4dbd@pre-compile-r6rs-file (lambda (q4e76@filename) (q4dbf@load-r6rs-top-level q4e76@filename 'compile))) (set! q4dbf@load-r6rs-top-level (lambda (q4e78@filename q4e79@how . q4e7c@args) ((lambda (q4e82@q4e7f q4e83@q4e81) ((lambda (q4e86@swap) (dynamic-wind q4e86@swap (lambda () ((lambda (q4e88@x*) ((lambda (q4e8a@t) (if (memv q4e8a@t '(closure)) (q49da@q2fed@pre-compile-r6rs-top-level q4e88@x*) (if (memv q4e8a@t '(load)) ((lambda (q4e90@q4e8d q4e91@q4e8f) ((lambda (q4e94@swap) (dynamic-wind q4e94@swap (lambda () ((q49d9@q2feb@compile-r6rs-top-level q4e88@x*))) q4e94@swap)) (lambda () ((lambda (q4e96@t) (begin (q4e90@q4e8d q4e91@q4e8f) (set! q4e91@q4e8f q4e96@t))) (q4e90@q4e8d))))) q4dab@command-line (cons q4e78@filename (car q4e7c@args))) (if (memv q4e8a@t '(compile)) (begin (q49d9@q2feb@compile-r6rs-top-level q4e88@x*) (q2b05@q2998@serialize-all q2894@q27b9@serialize-library q28ee@q28a7@compile-core-expr)) (if '#f '#f (void)))))) q4e79@how)) (with-input-from-file q4e78@filename (lambda () ((letrec ((q4e98@f (lambda () ((lambda (q4e9a@x) (if (eof-object? q4e9a@x) '() (cons q4e9a@x (q4e98@f)))) (q288c@q27a9@read-annotated))))) q4e98@f)))))) q4e86@swap)) (lambda () ((lambda (q4e9c@t) (begin (q4e82@q4e7f q4e83@q4e81) (set! q4e83@q4e81 q4e9c@t))) (q4e82@q4e7f))))) q2b01@q2990@library-path (q4dad@local-library-path q4e78@filename)))) (set! q4dc1@load-r6rs-top-level-sexp (lambda (q4e9e@import-spec q4e9f@thunk) ((lambda (q4ea6@q4ea3 q4ea7@q4ea5) ((lambda (q4eaa@swap) (dynamic-wind q4eaa@swap (lambda () ((lambda (q4eb0@q4ead q4eb1@q4eaf) ((lambda (q4eb4@swap) (dynamic-wind q4eb4@swap (lambda () ((q49d9@q2feb@compile-r6rs-top-level (list (cons 'import q4e9e@import-spec) (list q4e9f@thunk))))) q4eb4@swap)) (lambda () ((lambda (q4eb6@t) (begin (q4eb0@q4ead q4eb1@q4eaf) (set! q4eb1@q4eaf q4eb6@t))) (q4eb0@q4ead))))) q4dab@command-line '())) q4eaa@swap)) (lambda () ((lambda (q4eb8@t) (begin (q4ea6@q4ea3 q4ea7@q4ea5) (set! q4ea7@q4ea5 q4eb8@t))) (q4ea6@q4ea3))))) q2b01@q2990@library-path (q4dad@local-library-path '"")))) (begin (set! q4ece@q4dc1@load-r6rs-top-level-sexp q4dc1@load-r6rs-top-level-sexp) (set! q4ecd@q4dbf@load-r6rs-top-level q4dbf@load-r6rs-top-level) (set! q4ecc@q4dbd@pre-compile-r6rs-file q4dbd@pre-compile-r6rs-file) (set! q4ecb@q4dbb@compile->closure q4dbb@compile->closure) (set! q4eca@q4db9@compile q4db9@compile) (set! q4ec9@q4db7@compile-system-libraries q4db7@compile-system-libraries) (set! q4ec8@q4db5@eval-top-level q4db5@eval-top-level) (set! q4ec7@q4db3@ironscheme-build q4db3@ironscheme-build) (set! q4ec6@q4db1@load q4db1@load) (set! q4ec5@q4daf@load/args q4daf@load/args) (set! q4ec4@q4dad@local-library-path q4dad@local-library-path) (set! q4ec3@q4dab@command-line q4dab@command-line) (set! q4ec2@q4da9@trace-printer q4da9@trace-printer) (set! q4ec1@q4da7@repl q4da7@repl) (set! q4ec0@q4da5@map-with-index q4da5@map-with-index) (set! q4ebf@q4da3@record->field-alist q4da3@record->field-alist) (set! q4ebe@q4da1@condition-printer q4da1@condition-printer) (set! q4ebd@q4d9f@rpad q4d9f@rpad) (set! q4ebc@q4d9d@for-each-with-index q4d9d@for-each-with-index) (set! q4ebb@q4d9b@parse-and-add-library-path q4d9b@parse-and-add-library-path) (set! q4eba@q4d99@add-library-path! q4d99@add-library-path!) (q2b06@q299a@current-precompiled-library-loader q2895@q27bb@load-serialized-library) (set-symbol-value! 'load q4db1@load) (set-symbol-value! 'pre-compile-r6rs-file q4dbd@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs q4db5@eval-top-level) (set-symbol-value! 'int-env-syms q49bc@q2fb1@interaction-environment-symbols) (set-symbol-value! 'expanded2core q28ed@q28a5@expanded->core) (set-symbol-value! 'trace-printer q4da9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (q4dc2@c) (condition (q4cf6@q4b00@make-non-continuable-violation) (q4cec@q4ae7@make-who-condition 'raise) (q4cb0@q4a48@make-message-condition '"returned from non-continuable exception") (q4ce2@q4acc@make-irritants-condition (list q4dc2@c))))) (q4d9b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (q4d9b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (q4d99@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (q4d99@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (q4d99@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (q4dc4@prefix) (q2b02@q2992@library-extensions (q4dc4@prefix '".mosh" (q2b02@q2992@library-extensions)))) (lambda (q4dc6@ext q4dc7@ls) (append (map (lambda (q4dca@x) (string-append q4dc6@ext q4dca@x)) q4dc7@ls) q4dc7@ls))) ((lambda (q4dcc@args q4dcd@port) ((lambda (q4dd1@ref) (begin (set! q4dd1@ref (lambda (q4ddc@rtd q4ddd@i q4dde@x) ((lambda (q4de2@val) (if (symbol? q4de2@val) (ungensym q4de2@val) q4de2@val)) ((record-accessor q4ddc@rtd q4ddd@i) q4dde@x)))) (with-exception-handler (lambda (q4dd2@c) (if (condition? q4dd2@c) (q4da1@condition-printer q4dd2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" q4dd2@c))) (lambda () (if ((call/cc (lambda (q4dd6@q4dd4) (lambda () (with-exception-handler (lambda (q4dd8@c) ((call/cc (lambda (q4dda@q4dd5) (q4dd6@q4dd4 (lambda () (if '#t '#f (q4dda@q4dd5 (lambda () (raise-continuable q4dd8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (q4dc1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? q4dcc@args) (q4da7@repl) (q4dbf@load-r6rs-top-level (car q4dcc@args) 'load (cdr q4dcc@args)))))))) '#f)) (q4dab@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
