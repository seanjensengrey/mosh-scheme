;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bX235a@library-file-path->cache-path (unspecified)) (set! bX235c@read-annotated (unspecified)) (set! bX235e@annotation-stripped (unspecified)) (set! bX2360@annotation? (unspecified)) (set! bX2362@annotation-source (unspecified)) (set! bX2364@annotation-expression (unspecified)) (set! bX2366@scm->fasl (unspecified)) (set! bX2368@fasl-save (unspecified)) (set! bX236a@fasl-load (unspecified)) (set! bX236c@serialize-library (unspecified)) (set! bX236e@load-serialized-library (unspecified)) (set! bX2370@make-record-printer (unspecified)) (set! bX2372@compile-core (unspecified)) (set! bX2374@read-library-source-file (unspecified)) (set! bX2376@make-parameter (unspecified)) (set! bX2378@mosh-cache-dir (unspecified)) (set! bX240e@file-options-spec (unspecified)) (set! bX235a@library-file-path->cache-path (lambda (bX240f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bX2415@bX2412 bX2416@bX2414) (let ((bX2419@extract bX2416@bX2414) (bX241a@p bX2415@bX2412)) (let ((bX241e@display-hex '#f)) (begin (set! bX241e@display-hex (lambda (bX2427@n) (if (<= '0 bX2427@n '9) (display bX2427@n bX241a@p) (display (integer->char (+ (char->integer '#\a) (- bX2427@n '10))) bX241a@p)))) (begin (let bX2421@f ((bX241f@ls (string-split bX240f@x '#\/))) (if (not (null? bX241f@ls)) (begin (display '"_" bX241a@p) (for-each (lambda (bX2423@c) (if (or (char<=? '#\a bX2423@c '#\z) (char<=? '#\A bX2423@c '#\Z) (char<=? '#\0 bX2423@c '#\9) (memv bX2423@c '(#\- #\. #\_ #\~))) (display bX2423@c bX241a@p) (begin (display '"%" bX241a@p) (let ((bX2425@n (char->integer bX2423@c))) (begin (bX241e@display-hex (quotient bX2425@n '16)) (bX241e@display-hex (remainder bX2425@n '16))))))) (string->list (car bX241f@ls))) (bX2421@f (cdr bX241f@ls))) (void))) (bX2419@extract))))))))) (set! bX2489@bX235a@library-file-path->cache-path bX235a@library-file-path->cache-path) (set! bX235c@read-annotated read) (set! bX248a@bX235c@read-annotated bX235c@read-annotated) (set! bX235e@annotation-stripped (lambda (bX2429@x) (bX2364@annotation-expression bX2429@x))) (set! bX248b@bX235e@annotation-stripped bX235e@annotation-stripped) (set! bX2360@annotation? (lambda (bX242b@x) (source-info bX242b@x))) (set! bX248c@bX2360@annotation? bX2360@annotation?) (set! bX2362@annotation-source (lambda (bX242d@x) (source-info bX242d@x))) (set! bX248d@bX2362@annotation-source bX2362@annotation-source) (set! bX2364@annotation-expression (lambda (bX242f@x) (if (pair? bX242f@x) (cons (car bX242f@x) (cdr bX242f@x)) (display '"line:46\n")))) (set! bX248e@bX2364@annotation-expression bX2364@annotation-expression) (set! bX2366@scm->fasl (lambda (bX2431@filename) (string-append (bX2378@mosh-cache-dir) '"/" (bX235a@library-file-path->cache-path bX2431@filename) '".mosh-fasl"))) (set! bX248f@bX2366@scm->fasl bX2366@scm->fasl) (set! bX2368@fasl-save (lambda (bX2433@filename bX2434@obj) (call-with-port (open-file-output-port bX2433@filename) (lambda (bX2437@port) ((symbol-value 'fasl-write!) bX2434@obj bX2437@port))))) (set! bX2490@bX2368@fasl-save bX2368@fasl-save) (set! bX236a@fasl-load (lambda (bX2439@filename) (call-with-port (open-file-input-port bX2439@filename) (symbol-value 'fasl-read!)))) (set! bX2491@bX236a@fasl-load bX236a@fasl-load) (set! bX236c@serialize-library (lambda (bX243b@filename bX243c@obj) (begin (let ((bX243f@expanded2core (symbol-value 'expanded2core))) (let ((bX2441@compile (symbol-value 'compile-w/o-halt))) (let ((bX2443@code bX243c@obj)) (let ((bX2445@pivot (cddddr (cddddr bX2443@code)))) (let ((bX2447@visit (bX2441@compile (bX243f@expanded2core (car bX2445@pivot))))) (begin (set-car! bX2445@pivot bX2447@visit) (let ((bX2449@pivot (cdr bX2445@pivot))) (let ((bX244b@invoke (bX2441@compile (bX243f@expanded2core (car bX2449@pivot))))) (set-car! bX2449@pivot bX244b@invoke))))))))) (let ((bX244d@fasl-file (bX2366@scm->fasl bX243b@filename))) (begin (if (file-exists? bX244d@fasl-file) (delete-file bX244d@fasl-file) (void)) ((call/cc (lambda (bX2451@bX244f) (lambda () (with-exception-handler (lambda (bX2453@c) ((call/cc (lambda (bX2455@bX2450) (bX2451@bX244f (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " bX243b@filename) (if (file-exists? bX244d@fasl-file) (delete-file bX244d@fasl-file) (void)) '#f) (bX2455@bX2450 (lambda () (raise-continuable bX2453@c)))))))))) (lambda () (bX2368@fasl-save bX244d@fasl-file bX243c@obj)))))))))))) (set! bX2492@bX236c@serialize-library bX236c@serialize-library) (set! bX236e@load-serialized-library (lambda (bX2457@filename bX2458@obj) (and (bX2378@mosh-cache-dir) (let ((bX245b@fasl-file (bX2366@scm->fasl bX2457@filename))) (if (and (file-exists? bX245b@fasl-file) ((symbol-value 'file-newer?) bX245b@fasl-file bX2457@filename)) (let ((bX245d@expanded2core (symbol-value 'expanded2core))) (let ((bX245f@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bX2461@code (bX236a@fasl-load bX245b@fasl-file))) (let ((bX2463@pivot (cddddr (cddddr bX2461@code)))) (let ((bX2465@visit (car bX2463@pivot))) (let ((bX2467@visit-proc (lambda () (bX245f@eval-compiled-core bX2465@visit)))) (begin (set-car! bX2463@pivot bX2467@visit-proc) (let ((bX2469@pivot (cdr bX2463@pivot))) (let ((bX246b@invoke (car bX2469@pivot))) (begin (set-car! bX2469@pivot (lambda () (bX245f@eval-compiled-core bX246b@invoke))) (apply bX2458@obj bX2461@code))))))))))) '#f))))) (set! bX2493@bX236e@load-serialized-library bX236e@load-serialized-library) (set! bX2370@make-record-printer (lambda (bX246d@name bX246e@printer) (lambda bX2471@x (begin (display '"record printer") (for-each display bX2471@x))))) (set! bX2494@bX2370@make-record-printer bX2370@make-record-printer) (set! bX2372@compile-core (lambda bX2473@x (apply error 'comile-core '"not implementated" bX2473@x))) (set! bX2495@bX2372@compile-core bX2372@compile-core) (set! bX2374@read-library-source-file (lambda (bX2475@file-name) (with-input-from-file bX2475@file-name bX235c@read-annotated))) (set! bX2496@bX2374@read-library-source-file bX2374@read-library-source-file) (set! bX2376@make-parameter (lambda bX2485 (let ((bX2486 (length bX2485))) (if (= bX2486 '1) (apply (lambda (bX2477@x) (bX2376@make-parameter bX2477@x (lambda (bX2479@x) bX2479@x))) bX2485) (if (= bX2486 '2) (apply (lambda (bX247b@x bX247c@fender) (let ((bX247f@x (bX247c@fender bX247b@x))) (lambda bX2483 (let ((bX2484 (length bX2483))) (if (= bX2484 '0) (apply (lambda () bX247f@x) bX2483) (if (= bX2484 '1) (apply (lambda (bX2481@v) (set! bX247f@x (bX247c@fender bX2481@v))) bX2483) (error 'apply '"invalid arg count"))))))) bX2485) (error 'apply '"invalid arg count")))))) (set! bX2497@bX2376@make-parameter bX2376@make-parameter) (set! bX2378@mosh-cache-dir (bX2376@make-parameter '#f)) (set! bX2498@bX2378@mosh-cache-dir bX2378@mosh-cache-dir) (set! bX240e@file-options-spec (lambda (bX2487@x) bX2487@x)) (set! bX2499@bX240e@file-options-spec bX240e@file-options-spec) (void))
(begin (set! bX249f@current-primitive-locations (unspecified)) (set! bX24a1@mutable? (unspecified)) (set! bX24a3@rewriter (unspecified)) (set! bX24a5@expanded->core (unspecified)) (set! bX24a7@compile-core-expr (unspecified)) (set! bX24a9@pretty-print (unspecified)) (set! bX24ab@compile-core-expr-to-port (unspecified)) (set! bX249f@current-primitive-locations (bX2497@bX2376@make-parameter (lambda (bX24ac@x) '#f) (lambda (bX24ae@p) bX24ae@p))) (set! bX24ea@bX249f@current-primitive-locations bX249f@current-primitive-locations) (set! bX24a1@mutable? (lambda (bX24b0@x) (or (pair? bX24b0@x) (vector? bX24b0@x) (hashtable? bX24b0@x)))) (set! bX24eb@bX24a1@mutable? bX24a1@mutable?) (set! bX24a3@rewriter (lambda (bX24b2@quote-hack?) (let ((bX24b5@f '#f)) (begin (set! bX24b5@f (lambda (bX24b6@x) (if (pair? bX24b6@x) (let ((bX24b8@t (car bX24b6@x))) (if (memv bX24b8@t '(quote)) (if (and bX24b2@quote-hack? (bX24a1@mutable? (cadr bX24b6@x))) (let ((bX24ba@g (gensym))) (begin (set-symbol-value! bX24ba@g (cadr bX24b6@x)) bX24ba@g)) bX24b6@x) (if (memv bX24b8@t '(case-lambda)) (cons 'case-lambda (map (lambda (bX24bc@x) (cons (car bX24bc@x) (map bX24b5@f (cdr bX24bc@x)))) (cdr bX24b6@x))) (if (memv bX24b8@t '(lambda)) (cons* 'lambda (cadr bX24b6@x) (map bX24b5@f (cddr bX24b6@x))) (if (memv bX24b8@t '(letrec)) (let ((bX24be@bindings (cadr bX24b6@x)) (bX24bf@body* (cddr bX24b6@x))) (let ((bX24c2@lhs* (map car bX24be@bindings)) (bX24c3@rhs* (map cadr bX24be@bindings))) (cons* 'letrec (map list bX24c2@lhs* (map bX24b5@f bX24c3@rhs*)) (map bX24b5@f bX24bf@body*)))) (if (memv bX24b8@t '(letrec*)) (let ((bX24c6@bindings (cadr bX24b6@x)) (bX24c7@body* (cddr bX24b6@x))) (let ((bX24ca@lhs* (map car bX24c6@bindings)) (bX24cb@rhs* (map cadr bX24c6@bindings))) (cons* 'letrec* (map list bX24ca@lhs* (map bX24b5@f bX24cb@rhs*)) (map bX24b5@f bX24c7@body*)))) (if (memv bX24b8@t '(library-letrec*)) (let ((bX24ce@name (cadr bX24b6@x)) (bX24cf@x (cdr bX24b6@x))) (let ((bX24d2@bindings (cadr bX24cf@x)) (bX24d3@body* (cddr bX24cf@x))) (let ((bX24d6@lhs* (map car bX24d2@bindings)) (bX24d7@lhs** (map cadr bX24d2@bindings)) (bX24d8@rhs* (map caddr bX24d2@bindings))) (cons* 'library-letrec* bX24ce@name (map list bX24d6@lhs* bX24d7@lhs** (map bX24b5@f bX24d8@rhs*)) (map bX24b5@f bX24d3@body*))))) (if (memv bX24b8@t '(begin)) (cons 'begin (map bX24b5@f (cdr bX24b6@x))) (if (memv bX24b8@t '(set!)) (list 'set! (cadr bX24b6@x) (bX24b5@f (caddr bX24b6@x))) (if (memv bX24b8@t '(primitive)) (let ((bX24dc@op (cadr bX24b6@x))) (let ((bX24de@t ((bX249f@current-primitive-locations) bX24dc@op))) (if bX24de@t ((lambda (bX24e0@loc) bX24e0@loc) bX24de@t) bX24dc@op))) (if (memv bX24b8@t '(define)) bX24b6@x (if (list? bX24b6@x) (map bX24b5@f bX24b6@x) (error 'rewrite '"invalid form ~s ~s" bX24b6@x (list? bX24b6@x)))))))))))))) bX24b6@x))) bX24b5@f)))) (set! bX24ec@bX24a3@rewriter bX24a3@rewriter) (set! bX24a5@expanded->core (lambda (bX24e2@x) ((bX24a3@rewriter '#f) bX24e2@x))) (set! bX24ed@bX24a5@expanded->core bX24a5@expanded->core) (set! bX24a7@compile-core-expr (lambda (bX24e4@x) ((bX24a3@rewriter '#f) bX24e4@x))) (set! bX24ee@bX24a7@compile-core-expr bX24a7@compile-core-expr) (set! bX24a9@pretty-print write) (set! bX24ef@bX24a9@pretty-print bX24a9@pretty-print) (set! bX24ab@compile-core-expr-to-port (lambda (bX24e6@x bX24e7@p) (bX24a9@pretty-print ((bX24a3@rewriter '#f) bX24e6@x) bX24e7@p))) (set! bX24f0@bX24ab@compile-core-expr-to-port bX24ab@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bX253f@make-collection (unspecified)) (set! bX2541@current-library-collection (unspecified)) (set! bX2543@rp (unspecified)) (set! bX254d@library? (unspecified)) (set! bX254f@library-id (unspecified)) (set! bX2551@set-library-id! (unspecified)) (set! bX2553@library-name (unspecified)) (set! bX2555@set-library-name! (unspecified)) (set! bX2557@library-version (unspecified)) (set! bX2559@set-library-version! (unspecified)) (set! bX255b@library-imp* (unspecified)) (set! bX255d@set-library-imp*! (unspecified)) (set! bX255f@library-vis* (unspecified)) (set! bX2561@set-library-vis*! (unspecified)) (set! bX2563@library-inv* (unspecified)) (set! bX2565@set-library-inv*! (unspecified)) (set! bX2567@library-subst (unspecified)) (set! bX2569@set-library-subst! (unspecified)) (set! bX256b@library-env (unspecified)) (set! bX256d@set-library-env! (unspecified)) (set! bX256f@library-visit-state (unspecified)) (set! bX2571@set-library-visit-state! (unspecified)) (set! bX2573@library-invoke-state (unspecified)) (set! bX2575@set-library-invoke-state! (unspecified)) (set! bX2577@library-visit-code (unspecified)) (set! bX2579@set-library-visit-code! (unspecified)) (set! bX257b@library-invoke-code (unspecified)) (set! bX257d@set-library-invoke-code! (unspecified)) (set! bX257f@library-visible? (unspecified)) (set! bX2581@set-library-visible?! (unspecified)) (set! bX2583@library-source-file-name (unspecified)) (set! bX2585@set-library-source-file-name! (unspecified)) (set! bX2587@dummy (unspecified)) (set! bX2589@find-dependencies (unspecified)) (set! bX258b@find-library-by (unspecified)) (set! bX258d@library-path (unspecified)) (set! bX258f@library-extensions (unspecified)) (set! bX2591@library-name->file-name (unspecified)) (set! bX2593@file-locator (unspecified)) (set! bX2595@serialize-all (unspecified)) (set! bX2597@current-precompiled-library-loader (unspecified)) (set! bX2599@try-load-from-file (unspecified)) (set! bX259b@library-loader (unspecified)) (set! bX259d@current-library-expander (unspecified)) (set! bX259f@external-pending-libraries (unspecified)) (set! bX25a1@find-external-library (unspecified)) (set! bX25a3@find-library-by-name (unspecified)) (set! bX25a5@library-exists? (unspecified)) (set! bX25a7@find-library-by-spec/die (unspecified)) (set! bX25a9@label->binding-table (unspecified)) (set! bX25ab@install-library-record (unspecified)) (set! bX25ad@install-library (unspecified)) (set! bX25af@imported-label->binding (unspecified)) (set! bX25b1@invoke-library (unspecified)) (set! bX25b3@visit-library (unspecified)) (set! bX25b5@invoke-library-by-spec (unspecified)) (set! bX25b7@installed-libraries (unspecified)) (set! bX25b9@library-spec (unspecified)) (set! bX253f@make-collection (lambda () (let ((bX25ba@set '())) (let ((bX25bd@set-cons '#f)) (begin (set! bX25bd@set-cons (lambda (bX25c2@x bX25c3@ls) (if (memq bX25c2@x bX25c3@ls) bX25c3@ls (cons bX25c2@x bX25c3@ls)))) (lambda bX25c0 (let ((bX25c1 (length bX25c0))) (if (= bX25c1 '0) (apply (lambda () bX25ba@set) bX25c0) (if (= bX25c1 '1) (apply (lambda (bX25be@x) (set! bX25ba@set (bX25bd@set-cons bX25be@x bX25ba@set))) bX25c0) (error 'apply '"invalid arg count")))))))))) (set! bX272e@bX253f@make-collection bX253f@make-collection) (set! bX2541@current-library-collection (bX2497@bX2376@make-parameter (bX253f@make-collection) (lambda (bX25c6@x) (begin (if (not (procedure? bX25c6@x)) (assertion-violation 'current-library-collection '"not a procedure" bX25c6@x) (void)) bX25c6@x)))) (set! bX272f@bX2541@current-library-collection bX2541@current-library-collection) (set! bX2543@rp (bX2494@bX2370@make-record-printer 'library (lambda (bX25c8@x bX25c9@p bX25ca@wr) (begin (if (not (bX254d@library? bX25c8@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bX2557@library-version bX25c8@x)) (bX2553@library-name bX25c8@x) (append (bX2553@library-name bX25c8@x) (list (bX2557@library-version bX25c8@x))))) bX25c9@p))))) (set! bX2730@bX2543@rp bX2543@rp) (set! bX254d@library? (lambda (bX25ce@x) (and (simple-struct? bX25ce@x) (eq? (simple-struct-name bX25ce@x) 'library)))) (set! bX2731@bX254d@library? bX254d@library?) (set! bX254f@library-id (lambda (bX25d0@x) (simple-struct-ref bX25d0@x '0))) (set! bX2732@bX254f@library-id bX254f@library-id) (set! bX2551@set-library-id! (lambda (bX25d2@x bX25d3@val) (simple-struct-set! bX25d2@x '0 bX25d3@val))) (set! bX2733@bX2551@set-library-id! bX2551@set-library-id!) (set! bX2553@library-name (lambda (bX25d6@x) (simple-struct-ref bX25d6@x '1))) (set! bX2734@bX2553@library-name bX2553@library-name) (set! bX2555@set-library-name! (lambda (bX25d8@x bX25d9@val) (simple-struct-set! bX25d8@x '1 bX25d9@val))) (set! bX2735@bX2555@set-library-name! bX2555@set-library-name!) (set! bX2557@library-version (lambda (bX25dc@x) (simple-struct-ref bX25dc@x '2))) (set! bX2736@bX2557@library-version bX2557@library-version) (set! bX2559@set-library-version! (lambda (bX25de@x bX25df@val) (simple-struct-set! bX25de@x '2 bX25df@val))) (set! bX2737@bX2559@set-library-version! bX2559@set-library-version!) (set! bX255b@library-imp* (lambda (bX25e2@x) (simple-struct-ref bX25e2@x '3))) (set! bX2738@bX255b@library-imp* bX255b@library-imp*) (set! bX255d@set-library-imp*! (lambda (bX25e4@x bX25e5@val) (simple-struct-set! bX25e4@x '3 bX25e5@val))) (set! bX2739@bX255d@set-library-imp*! bX255d@set-library-imp*!) (set! bX255f@library-vis* (lambda (bX25e8@x) (simple-struct-ref bX25e8@x '4))) (set! bX273a@bX255f@library-vis* bX255f@library-vis*) (set! bX2561@set-library-vis*! (lambda (bX25ea@x bX25eb@val) (simple-struct-set! bX25ea@x '4 bX25eb@val))) (set! bX273b@bX2561@set-library-vis*! bX2561@set-library-vis*!) (set! bX2563@library-inv* (lambda (bX25ee@x) (simple-struct-ref bX25ee@x '5))) (set! bX273c@bX2563@library-inv* bX2563@library-inv*) (set! bX2565@set-library-inv*! (lambda (bX25f0@x bX25f1@val) (simple-struct-set! bX25f0@x '5 bX25f1@val))) (set! bX273d@bX2565@set-library-inv*! bX2565@set-library-inv*!) (set! bX2567@library-subst (lambda (bX25f4@x) (simple-struct-ref bX25f4@x '6))) (set! bX273e@bX2567@library-subst bX2567@library-subst) (set! bX2569@set-library-subst! (lambda (bX25f6@x bX25f7@val) (simple-struct-set! bX25f6@x '6 bX25f7@val))) (set! bX273f@bX2569@set-library-subst! bX2569@set-library-subst!) (set! bX256b@library-env (lambda (bX25fa@x) (simple-struct-ref bX25fa@x '7))) (set! bX2740@bX256b@library-env bX256b@library-env) (set! bX256d@set-library-env! (lambda (bX25fc@x bX25fd@val) (simple-struct-set! bX25fc@x '7 bX25fd@val))) (set! bX2741@bX256d@set-library-env! bX256d@set-library-env!) (set! bX256f@library-visit-state (lambda (bX2600@x) (simple-struct-ref bX2600@x '8))) (set! bX2742@bX256f@library-visit-state bX256f@library-visit-state) (set! bX2571@set-library-visit-state! (lambda (bX2602@x bX2603@val) (simple-struct-set! bX2602@x '8 bX2603@val))) (set! bX2743@bX2571@set-library-visit-state! bX2571@set-library-visit-state!) (set! bX2573@library-invoke-state (lambda (bX2606@x) (simple-struct-ref bX2606@x '9))) (set! bX2744@bX2573@library-invoke-state bX2573@library-invoke-state) (set! bX2575@set-library-invoke-state! (lambda (bX2608@x bX2609@val) (simple-struct-set! bX2608@x '9 bX2609@val))) (set! bX2745@bX2575@set-library-invoke-state! bX2575@set-library-invoke-state!) (set! bX2577@library-visit-code (lambda (bX260c@x) (simple-struct-ref bX260c@x '10))) (set! bX2746@bX2577@library-visit-code bX2577@library-visit-code) (set! bX2579@set-library-visit-code! (lambda (bX260e@x bX260f@val) (simple-struct-set! bX260e@x '10 bX260f@val))) (set! bX2747@bX2579@set-library-visit-code! bX2579@set-library-visit-code!) (set! bX257b@library-invoke-code (lambda (bX2612@x) (simple-struct-ref bX2612@x '11))) (set! bX2748@bX257b@library-invoke-code bX257b@library-invoke-code) (set! bX257d@set-library-invoke-code! (lambda (bX2614@x bX2615@val) (simple-struct-set! bX2614@x '11 bX2615@val))) (set! bX2749@bX257d@set-library-invoke-code! bX257d@set-library-invoke-code!) (set! bX257f@library-visible? (lambda (bX2618@x) (simple-struct-ref bX2618@x '12))) (set! bX274a@bX257f@library-visible? bX257f@library-visible?) (set! bX2581@set-library-visible?! (lambda (bX261a@x bX261b@val) (simple-struct-set! bX261a@x '12 bX261b@val))) (set! bX274b@bX2581@set-library-visible?! bX2581@set-library-visible?!) (set! bX2583@library-source-file-name (lambda (bX261e@x) (simple-struct-ref bX261e@x '13))) (set! bX274c@bX2583@library-source-file-name bX2583@library-source-file-name) (set! bX2585@set-library-source-file-name! (lambda (bX2620@x bX2621@val) (simple-struct-set! bX2620@x '13 bX2621@val))) (set! bX274d@bX2585@set-library-source-file-name! bX2585@set-library-source-file-name!) (set! bX2587@dummy '3) (set! bX274e@bX2587@dummy bX2587@dummy) (set! bX2589@find-dependencies (lambda (bX2624@ls) (if (null? bX2624@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bX274f@bX2589@find-dependencies bX2589@find-dependencies) (set! bX258b@find-library-by (lambda (bX2626@pred) (let bX262a@f ((bX2628@ls ((bX2541@current-library-collection)))) (if (null? bX2628@ls) '#f (if (bX2626@pred (car bX2628@ls)) (car bX2628@ls) (bX262a@f (cdr bX2628@ls))))))) (set! bX2750@bX258b@find-library-by bX258b@find-library-by) (set! bX258d@library-path (bX2497@bX2376@make-parameter '(".") (lambda (bX262c@x) (if (and (list? bX262c@x) (for-all string? bX262c@x)) (map (lambda (bX262e@x) bX262e@x) bX262c@x) (assertion-violation 'library-path '"not a list of strings" bX262c@x))))) (set! bX2751@bX258d@library-path bX258d@library-path) (set! bX258f@library-extensions (bX2497@bX2376@make-parameter '(".sls" ".ss" ".scm") (lambda (bX2630@x) (if (and (list? bX2630@x) (for-all string? bX2630@x)) (map (lambda (bX2632@x) bX2632@x) bX2630@x) (assertion-violation 'library-extensions '"not a list of strings" bX2630@x))))) (set! bX2752@bX258f@library-extensions bX258f@library-extensions) (set! bX2591@library-name->file-name (lambda (bX2634@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bX263a@bX2637 bX263b@bX2639) (let ((bX263e@extract bX263b@bX2639) (bX263f@p bX263a@bX2637)) (let ((bX2643@display-hex '#f)) (begin (set! bX2643@display-hex (lambda (bX264c@n) (if (<= '0 bX264c@n '9) (display bX264c@n bX263f@p) (display (integer->char (+ (char->integer '#\a) (- bX264c@n '10))) bX263f@p)))) (begin (let bX2646@f ((bX2644@ls bX2634@x)) (if (not (null? bX2644@ls)) (begin (display '"/" bX263f@p) (for-each (lambda (bX2648@c) (if (or (char<=? '#\a bX2648@c '#\z) (char<=? '#\A bX2648@c '#\Z) (char<=? '#\0 bX2648@c '#\9) (memv bX2648@c '(#\- #\. #\_ #\~))) (display bX2648@c bX263f@p) (begin (display '"%" bX263f@p) (let ((bX264a@n (char->integer bX2648@c))) (begin (bX2643@display-hex (quotient bX264a@n '16)) (bX2643@display-hex (remainder bX264a@n '16))))))) (string->list (symbol->string (car bX2644@ls)))) (bX2646@f (cdr bX2644@ls))) (void))) (bX263e@extract))))))))) (set! bX2753@bX2591@library-name->file-name bX2591@library-name->file-name) (set! bX2593@file-locator (bX2497@bX2376@make-parameter (lambda (bX264e@x) (let ((bX2650@str (bX2591@library-name->file-name bX264e@x))) (let bX2658@f ((bX2652@ls (bX258d@library-path)) (bX2653@exts (bX258f@library-extensions)) (bX2654@failed-list '())) (if (null? bX2652@ls) (let ((bX2662@bX265d '#f) (bX2664@bX265f '#f) (bX2666@bX265e '#f) (bX2669@bX265c '#f) (bX266b@make-library-resolution-condition '#f) (bX266d@bX265a '#f) (bX266f@bX265b '#f) (bX2671@library-resolution-condition? '#f) (bX2673@condition-library '#f) (bX2675@condition-files '#f)) (begin (set! bX2662@bX265d (make-record-type-descriptor '&library-resolution bX4969@bX46b0@&condition-rtd 'bX2660 '#f '#f '#((immutable library) (immutable files)))) (set! bX2664@bX265f '#f) (set! bX2666@bX265e (make-record-constructor-descriptor bX2662@bX265d bX496a@bX46b2@&condition-rcd bX2664@bX265f)) (set! bX2669@bX265c (record-predicate bX2662@bX265d)) (set! bX266b@make-library-resolution-condition (record-constructor bX2666@bX265e)) (set! bX266d@bX265a (record-accessor bX2662@bX265d '0)) (set! bX266f@bX265b (record-accessor bX2662@bX265d '1)) (set! bX2671@library-resolution-condition? (condition-predicate bX2662@bX265d)) (set! bX2673@condition-library (condition-accessor bX2662@bX265d bX266d@bX265a)) (set! bX2675@condition-files (condition-accessor bX2662@bX265d bX266f@bX265b)) (raise (condition (bX4989@bX474a@make-error) (bX49ab@bX47a6@make-who-condition 'expander) (bX496f@bX4707@make-message-condition '"cannot locate library in library-path") (bX266b@make-library-resolution-condition bX264e@x (reverse bX2654@failed-list)))))) (if (null? bX2653@exts) (bX2658@f (cdr bX2652@ls) (bX258f@library-extensions) bX2654@failed-list) (let ((bX2676@name (string-append (car bX2652@ls) bX2650@str (car bX2653@exts)))) (if (file-exists? bX2676@name) bX2676@name (bX2658@f bX2652@ls (cdr bX2653@exts) (cons bX2676@name bX2654@failed-list))))))))) (lambda (bX2678@f) (if (procedure? bX2678@f) bX2678@f (assertion-violation 'file-locator '"not a procedure" bX2678@f))))) (set! bX2754@bX2593@file-locator bX2593@file-locator) (set! bX2595@serialize-all (lambda (bX267a@serialize bX267b@compile) (let ((bX267f@library-desc '#f)) (begin (set! bX267f@library-desc (lambda (bX2682@x) (list (bX254f@library-id bX2682@x) (bX2553@library-name bX2682@x)))) (for-each (lambda (bX2680@x) (if (bX2583@library-source-file-name bX2680@x) (bX267a@serialize (bX2583@library-source-file-name bX2680@x) (list (bX254f@library-id bX2680@x) (bX2553@library-name bX2680@x) (bX2557@library-version bX2680@x) (map bX267f@library-desc (bX255b@library-imp* bX2680@x)) (map bX267f@library-desc (bX255f@library-vis* bX2680@x)) (map bX267f@library-desc (bX2563@library-inv* bX2680@x)) (bX2567@library-subst bX2680@x) (bX256b@library-env bX2680@x) (bX267b@compile (bX2577@library-visit-code bX2680@x)) (bX267b@compile (bX257b@library-invoke-code bX2680@x)) (bX257f@library-visible? bX2680@x))) (void))) ((bX2541@current-library-collection))))))) (set! bX2755@bX2595@serialize-all bX2595@serialize-all) (set! bX2597@current-precompiled-library-loader (bX2497@bX2376@make-parameter (lambda (bX2684@filename bX2685@sk) '#f))) (set! bX2756@bX2597@current-precompiled-library-loader bX2597@current-precompiled-library-loader) (set! bX2599@try-load-from-file (lambda (bX2688@filename) ((bX2597@current-precompiled-library-loader) bX2688@filename (lambda bX26ae (let ((bX26af (length bX26ae))) (if (= bX26af '11) (apply (lambda (bX268a@id bX268b@name bX268c@ver bX268d@imp* bX268e@vis* bX268f@inv* bX2690@exp-subst bX2691@exp-env bX2692@visit-proc bX2693@invoke-proc bX2694@visible?) (let bX26a2@f ((bX26a0@deps (append bX268d@imp* bX268e@vis* bX268f@inv*))) (if (null? bX26a0@deps) (begin (bX25ad@install-library bX268a@id bX268b@name bX268c@ver bX268d@imp* bX268e@vis* bX268f@inv* bX2690@exp-subst bX2691@exp-env bX2692@visit-proc bX2693@invoke-proc '#f '#f bX2694@visible? '#f) '#t) (let ((bX26a4@d (car bX26a0@deps))) (let ((bX26a6@label (car bX26a4@d)) (bX26a7@dname (cadr bX26a4@d))) (let ((bX26aa@l (bX25a3@find-library-by-name bX26a7@dname))) (if (and (bX254d@library? bX26aa@l) (eq? bX26a6@label (bX254f@library-id bX26aa@l))) (bX26a2@f (cdr bX26a0@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" bX268b@name bX26a7@dname bX2688@filename bX26aa@l bX26a6@label (bX254f@library-id bX26aa@l)) '#f)))))))) bX26ae) (if (>= bX26af '0) (apply (lambda bX26ac@others '#f) bX26ae) (error 'apply '"invalid arg count")))))))) (set! bX2757@bX2599@try-load-from-file bX2599@try-load-from-file) (set! bX259b@library-loader (bX2497@bX2376@make-parameter (lambda (bX26b0@x) (let ((bX26b2@file-name ((bX2593@file-locator) bX26b0@x))) (if (not bX26b2@file-name) (assertion-violation '#f '"cannot file library" bX26b0@x) (or (bX2599@try-load-from-file bX26b2@file-name) ((bX259d@current-library-expander) (bX2496@bX2374@read-library-source-file bX26b2@file-name) bX26b2@file-name (lambda (bX26b4@name) (if (not (fast-equal? bX26b4@name bX26b0@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bX26ba@bX26b7 bX26bb@bX26b9) (let ((bX26be@e bX26bb@bX26b9) (bX26bf@p bX26ba@bX26b7)) (begin (display '"expected to find library " bX26bf@p) (write bX26b0@x bX26bf@p) (display '" in file " bX26bf@p) (display bX26b2@file-name bX26bf@p) (display '", found " bX26bf@p) (write bX26b4@name bX26bf@p) (display '" instead" bX26bf@p) (bX26be@e)))))) (void)))))))) (lambda (bX26c2@f) (if (procedure? bX26c2@f) bX26c2@f (assertion-violation 'library-locator '"not a procedure" bX26c2@f))))) (set! bX2758@bX259b@library-loader bX259b@library-loader) (set! bX259d@current-library-expander (bX2497@bX2376@make-parameter (lambda (bX26c4@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bX26c6@f) (if (procedure? bX26c6@f) bX26c6@f (assertion-violation 'library-expander '"not a procedure" bX26c6@f))))) (set! bX2759@bX259d@current-library-expander bX259d@current-library-expander) (set! bX259f@external-pending-libraries (bX2497@bX2376@make-parameter '())) (set! bX275a@bX259f@external-pending-libraries bX259f@external-pending-libraries) (set! bX25a1@find-external-library (lambda (bX26c8@name) (begin (if (member bX26c8@name (bX259f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bX26c8@name) (void)) (let ((bX26ce@bX26cb bX259f@external-pending-libraries) (bX26cf@bX26cd (cons bX26c8@name (bX259f@external-pending-libraries)))) (let ((bX26d2@swap (lambda () (let ((bX26d4@t (bX26ce@bX26cb))) (begin (bX26ce@bX26cb bX26cf@bX26cd) (set! bX26cf@bX26cd bX26d4@t)))))) (dynamic-wind bX26d2@swap (lambda () (begin ((bX259b@library-loader) bX26c8@name) (or (bX258b@find-library-by (lambda (bX26d6@x) (fast-equal? (bX2553@library-name bX26d6@x) bX26c8@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bX26c8@name)))) bX26d2@swap)))))) (set! bX275b@bX25a1@find-external-library bX25a1@find-external-library) (set! bX25a3@find-library-by-name (lambda (bX26d8@name) (or (bX258b@find-library-by (lambda (bX26da@x) (fast-equal? (bX2553@library-name bX26da@x) bX26d8@name))) (bX25a1@find-external-library bX26d8@name)))) (set! bX275c@bX25a3@find-library-by-name bX25a3@find-library-by-name) (set! bX25a5@library-exists? (lambda (bX26dc@name) (and (bX258b@find-library-by (lambda (bX26de@x) (fast-equal? (bX2553@library-name bX26de@x) bX26dc@name))) '#t))) (set! bX275d@bX25a5@library-exists? bX25a5@library-exists?) (set! bX25a7@find-library-by-spec/die (lambda (bX26e0@spec) (let ((bX26e2@id (car bX26e0@spec))) (or (bX258b@find-library-by (lambda (bX26e4@x) (eq? bX26e2@id (bX254f@library-id bX26e4@x)))) (assertion-violation '#f '"cannot find library with required spec" bX26e0@spec))))) (set! bX275e@bX25a7@find-library-by-spec/die bX25a7@find-library-by-spec/die) (set! bX25a9@label->binding-table (make-eq-hashtable)) (set! bX275f@bX25a9@label->binding-table bX25a9@label->binding-table) (set! bX25ab@install-library-record (lambda (bX26e6@lib) (begin (let ((bX26e8@exp-env (bX256b@library-env bX26e6@lib))) (for-each (lambda (bX26ea@x) (let ((bX26ec@label (car bX26ea@x)) (bX26ed@binding (cdr bX26ea@x))) (let ((bX26f0@binding (let ((bX26f2@t (car bX26ed@binding))) (if (memv bX26f2@t '(global)) (cons 'global (cons bX26e6@lib (cdr bX26ed@binding))) (if (memv bX26f2@t '(global-macro)) (cons 'global-macro (cons bX26e6@lib (cdr bX26ed@binding))) (if (memv bX26f2@t '(global-macro!)) (cons 'global-macro! (cons bX26e6@lib (cdr bX26ed@binding))) bX26ed@binding)))))) (begin (if (hashtable-ref bX25a9@label->binding-table bX26ec@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bX26ec@label (hashtable-ref bX25a9@label->binding-table bX26ec@label '#f) bX26f0@binding) (exit)) (void)) (hashtable-set! bX25a9@label->binding-table bX26ec@label bX26f0@binding))))) bX26e8@exp-env)) ((bX2541@current-library-collection) bX26e6@lib)))) (set! bX2760@bX25ab@install-library-record bX25ab@install-library-record) (set! bX25ad@install-library (lambda (bX26f4@id bX26f5@name bX26f6@ver bX26f7@imp* bX26f8@vis* bX26f9@inv* bX26fa@exp-subst bX26fb@exp-env bX26fc@visit-proc bX26fd@invoke-proc bX26fe@visit-code bX26ff@invoke-code bX2700@visible? bX2701@source-file-name) (let ((bX2710@imp-lib* (map bX25a7@find-library-by-spec/die bX26f7@imp*)) (bX2711@vis-lib* (map bX25a7@find-library-by-spec/die bX26f8@vis*)) (bX2712@inv-lib* (map bX25a7@find-library-by-spec/die bX26f9@inv*))) (begin (if (not (and (symbol? bX26f4@id) (list? bX26f5@name) (list? bX26f6@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bX26f4@id bX26f5@name bX26f6@ver) (void)) (if (bX25a5@library-exists? bX26f5@name) (assertion-violation 'install-library '"library is already installed" bX26f5@name) (void)) (let ((bX2716@lib (make-simple-struct 'library '15 (list bX26f4@id bX26f5@name bX26f6@ver bX2710@imp-lib* bX2711@vis-lib* bX2712@inv-lib* bX26fa@exp-subst bX26fb@exp-env bX26fc@visit-proc bX26fd@invoke-proc bX26fe@visit-code bX26ff@invoke-code bX2700@visible? bX2701@source-file-name)))) (bX25ab@install-library-record bX2716@lib)))))) (set! bX2761@bX25ad@install-library bX25ad@install-library) (set! bX25af@imported-label->binding (lambda (bX2718@lab) (hashtable-ref bX25a9@label->binding-table bX2718@lab '#f))) (set! bX2762@bX25af@imported-label->binding bX25af@imported-label->binding) (set! bX25b1@invoke-library (lambda (bX271a@lib) (let ((bX271c@invoke (bX2573@library-invoke-state bX271a@lib))) (if (procedure? bX271c@invoke) (begin (bX2575@set-library-invoke-state! bX271a@lib (lambda () (assertion-violation 'invoke '"circularity detected" bX271a@lib))) (for-each bX25b1@invoke-library (bX2563@library-inv* bX271a@lib)) (bX2575@set-library-invoke-state! bX271a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bX271a@lib))) (bX271c@invoke) (bX2575@set-library-invoke-state! bX271a@lib '#t)) (void))))) (set! bX2763@bX25b1@invoke-library bX25b1@invoke-library) (set! bX25b3@visit-library (lambda (bX271e@lib) (let ((bX2720@visit (bX256f@library-visit-state bX271e@lib))) (if (procedure? bX2720@visit) (begin (bX2571@set-library-visit-state! bX271e@lib (lambda () (assertion-violation 'visit '"circularity detected" bX271e@lib))) (for-each bX25b1@invoke-library (bX255f@library-vis* bX271e@lib)) (bX2571@set-library-visit-state! bX271e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bX271e@lib))) (bX2720@visit) (bX2571@set-library-visit-state! bX271e@lib '#t)) (void))))) (set! bX2764@bX25b3@visit-library bX25b3@visit-library) (set! bX25b5@invoke-library-by-spec (lambda (bX2722@spec) (bX25b1@invoke-library (bX25a7@find-library-by-spec/die bX2722@spec)))) (set! bX2765@bX25b5@invoke-library-by-spec bX25b5@invoke-library-by-spec) (set! bX25b7@installed-libraries (lambda bX272a (let ((bX272b (length bX272a))) (if (= bX272b '1) (apply (lambda (bX2724@all?) (let bX2728@f ((bX2726@ls ((bX2541@current-library-collection)))) (if (null? bX2726@ls) '() (if (or bX2724@all? (bX257f@library-visible? (car bX2726@ls))) (cons (car bX2726@ls) (bX2728@f (cdr bX2726@ls))) (bX2728@f (cdr bX2726@ls)))))) bX272a) (if (= bX272b '0) (apply (lambda () (bX25b7@installed-libraries '#f)) bX272a) (error 'apply '"invalid arg count")))))) (set! bX2766@bX25b7@installed-libraries bX25b7@installed-libraries) (set! bX25b9@library-spec (lambda (bX272c@x) (begin (if (not (bX254d@library? bX272c@x)) (assertion-violation 'library-spec '"not a library" bX272c@x) (void)) (list (bX254f@library-id bX272c@x) (bX2553@library-name bX272c@x) (bX2557@library-version bX272c@x))))) (set! bX2767@bX25b9@library-spec bX25b9@library-spec) (void))
(begin (set! bX276b@build-global-define (unspecified)) (set! bX27dc@build-lambda (unspecified)) (set! bX27de@build-case-lambda (unspecified)) (set! bX280c@build-sequence (unspecified)) (set! bX280e@build-void (unspecified)) (set! bX2810@build-letrec (unspecified)) (set! bX2812@build-let (unspecified)) (set! bX2814@build-named-let (unspecified)) (set! bX2816@build-letrec* (unspecified)) (set! bX2818@build-library-letrec* (unspecified)) (set! bX281a@build-receive (unspecified)) (set! bX276b@build-global-define (lambda (bX281b@x) (bX280e@build-void))) (set! bX28af@bX276b@build-global-define bX276b@build-global-define) (set! bX27dc@build-lambda (lambda (bX281d@ae bX281e@vars bX281f@exp) (list 'lambda bX281e@vars bX281f@exp))) (set! bX28b0@bX27dc@build-lambda bX27dc@build-lambda) (set! bX27de@build-case-lambda (lambda (bX2823@ae bX2824@vars* bX2825@exp*) (let ((bX282a@build-error '#f) (bX282c@build-pred '#f) (bX282e@build-apply '#f) (bX2830@expand-case-lambda '#f)) (begin (set! bX282a@build-error (lambda (bX2861@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! bX282c@build-pred (lambda (bX2849@ae bX284a@n bX284b@vars) (call-with-values (lambda () (let bX2857@f ((bX2853@vars bX284b@vars) (bX2854@count '0)) (if (pair? bX2853@vars) (bX2857@f (cdr bX2853@vars) (+ bX2854@count '1)) (if (null? bX2853@vars) (values bX2854@count '=) (values bX2854@count '>=))))) (lambda (bX2859@bX2850 bX285a@bX2852) (let ((bX285d@pred bX285a@bX2852) (bX285e@count bX2859@bX2850)) (list (list 'primitive bX285d@pred) bX284a@n (list 'quote bX285e@count))))))) (set! bX282e@build-apply (lambda (bX2841@ae bX2842@g bX2843@vars bX2844@exp) (list '(primitive apply) (bX27dc@build-lambda bX2841@ae bX2843@vars bX2844@exp) bX2842@g))) (set! bX2830@expand-case-lambda (lambda (bX2831@ae bX2832@vars bX2833@exp*) (let ((bX2837@g (gensym)) (bX2838@n (gensym))) (list 'lambda bX2837@g (bX2812@build-let bX2831@ae (list bX2838@n) (list (list '(primitive length) bX2837@g)) (let bX283f@f ((bX283b@vars* bX2824@vars*) (bX283c@exp* bX2833@exp*)) (if (null? bX283b@vars*) (bX282a@build-error bX2831@ae) (list 'if (bX282c@build-pred bX2831@ae bX2838@n (car bX283b@vars*)) (bX282e@build-apply bX2831@ae bX2837@g (car bX283b@vars*) (car bX283c@exp*)) (bX283f@f (cdr bX283b@vars*) (cdr bX283c@exp*)))))))))) (if (= (length bX2825@exp*) '1) (bX27dc@build-lambda bX2823@ae (car bX2824@vars*) (car bX2825@exp*)) (bX2830@expand-case-lambda bX2823@ae bX2824@vars* bX2825@exp*)))))) (set! bX28b1@bX27de@build-case-lambda bX27de@build-case-lambda) (set! bX280c@build-sequence (lambda (bX2863@ae bX2864@exps) (let bX2869@loop ((bX2867@exps bX2864@exps)) (if (null? (cdr bX2867@exps)) (car bX2867@exps) (if (equal? (car bX2867@exps) (bX280e@build-void)) (bX2869@loop (cdr bX2867@exps)) (cons 'begin bX2867@exps)))))) (set! bX28b2@bX280c@build-sequence bX280c@build-sequence) (set! bX280e@build-void (lambda () '((primitive void)))) (set! bX28b3@bX280e@build-void bX280e@build-void) (set! bX2810@build-letrec (lambda (bX286b@ae bX286c@vars bX286d@val-exps bX286e@body-exp) (if (null? bX286c@vars) bX286e@body-exp (list 'letrec (map list bX286c@vars bX286d@val-exps) bX286e@body-exp)))) (set! bX28b4@bX2810@build-letrec bX2810@build-letrec) (set! bX2812@build-let (lambda (bX2873@ae bX2874@vars bX2875@val-exps bX2876@body-exp) (if (null? bX2874@vars) bX2876@body-exp (list 'let (map list bX2874@vars bX2875@val-exps) bX2876@body-exp)))) (set! bX28b5@bX2812@build-let bX2812@build-let) (set! bX2814@build-named-let (lambda (bX287b@ae bX287c@name bX287d@vars bX287e@val-exps bX287f@body-exp) (list 'let bX287c@name (map list bX287d@vars bX287e@val-exps) bX287f@body-exp))) (set! bX28b6@bX2814@build-named-let bX2814@build-named-let) (set! bX2816@build-letrec* (lambda (bX2885@ae bX2886@vars bX2887@val-exps bX2888@body-exp) (if (null? bX2886@vars) bX2888@body-exp (bX2812@build-let bX2885@ae bX2886@vars (map (lambda (bX288d@x) (list 'quote '#f)) bX2886@vars) (bX280c@build-sequence bX2885@ae (append (map (lambda (bX288f@lhs bX2890@rhs) (list 'set! bX288f@lhs bX2890@rhs)) bX2886@vars bX2887@val-exps) (list bX2888@body-exp))))))) (set! bX28b7@bX2816@build-letrec* bX2816@build-letrec*) (set! bX2818@build-library-letrec* (lambda (bX2893@ae bX2894@name bX2895@vars bX2896@locs bX2897@val-exps bX2898@body-exp) (cons 'begin (append (map (lambda (bX289f@var) (cons 'set! (cons bX289f@var '((unspecified))))) bX2895@vars) (append (apply append (map (lambda (bX28a1@var bX28a2@loc bX28a3@val-exp) (list (list 'set! bX28a1@var bX28a3@val-exp) (list 'set! bX28a2@loc bX28a1@var))) bX2895@vars bX2896@locs bX2897@val-exps)) (list bX2898@body-exp)))))) (set! bX28b8@bX2818@build-library-letrec* bX2818@build-library-letrec*) (set! bX281a@build-receive (lambda (bX28a7@ae bX28a8@vars bX28a9@producer bX28aa@body*) (begin (display '"************** in ") (cons 'receive (cons bX28a8@vars (cons bX28a9@producer bX28aa@body*)))))) (set! bX28b9@bX281a@build-receive bX281a@build-receive) (void))
(begin (set! bX28c8@file-options-macro (unspecified)) (set! bX28ca@set-cons (unspecified)) (set! bX28cc@set-union (unspecified)) (set! bX28d1@top-mark* (unspecified)) (set! bX28d3@top-marked? (unspecified)) (set! bX28d5@gen-lexical (unspecified)) (set! bX28d7@gen-global (unspecified)) (set! bX28d9@gen-label (unspecified)) (set! bX28db@gen-top-level-label (unspecified)) (set! bX28dd@gen-define-label+loc (unspecified)) (set! bX28df@gen-define-label (unspecified)) (set! bX28e9@rib? (unspecified)) (set! bX28eb@rib-sym* (unspecified)) (set! bX28ed@set-rib-sym*! (unspecified)) (set! bX28ef@rib-mark** (unspecified)) (set! bX28f1@set-rib-mark**! (unspecified)) (set! bX28f3@rib-label* (unspecified)) (set! bX28f5@set-rib-label*! (unspecified)) (set! bX28f7@rib-sealed/freq (unspecified)) (set! bX28f9@set-rib-sealed/freq! (unspecified)) (set! bX28fb@rib-cache (unspecified)) (set! bX28fd@set-rib-cache! (unspecified)) (set! bX28ff@dummy (unspecified)) (set! bX2901@make-empty-rib (unspecified)) (set! bX2903@extend-rib! (unspecified)) (set! bX2905@extend-rib/nc! (unspecified)) (set! bX2907@make-rib-map (unspecified)) (set! bX2909@seal-rib! (unspecified)) (set! bX290b@unseal-rib! (unspecified)) (set! bX290d@make-full-rib (unspecified)) (set! bX290f@rp (unspecified)) (set! bX2919@stx? (unspecified)) (set! bX291b@stx-expr (unspecified)) (set! bX291d@set-stx-expr! (unspecified)) (set! bX291f@stx-mark* (unspecified)) (set! bX2921@set-stx-mark*! (unspecified)) (set! bX2923@stx-subst* (unspecified)) (set! bX2925@set-stx-subst*! (unspecified)) (set! bX2927@stx-ae* (unspecified)) (set! bX2929@set-stx-ae*! (unspecified)) (set! bX292b@dummy (unspecified)) (set! bX292d@datum->stx (unspecified)) (set! bX292f@gen-mark (unspecified)) (set! bX2931@anti-mark (unspecified)) (set! bX2933@anti-mark? (unspecified)) (set! bX2935@mkstx (unspecified)) (set! bX2937@add-mark (unspecified)) (set! bX2939@add-subst (unspecified)) (set! bX293b@syntax-kind? (unspecified)) (set! bX293d@syntax-vector->list (unspecified)) (set! bX293f@syntax-pair? (unspecified)) (set! bX2941@syntax-vector? (unspecified)) (set! bX2943@syntax-null? (unspecified)) (set! bX2945@syntax-list? (unspecified)) (set! bX2947@syntax-car (unspecified)) (set! bX2949@syntax-cdr (unspecified)) (set! bX294b@syntax->list (unspecified)) (set! bX294d@id? (unspecified)) (set! bX294f@id->sym (unspecified)) (set! bX2951@bound-id=? (unspecified)) (set! bX2953@free-id=? (unspecified)) (set! bX2955@valid-bound-ids? (unspecified)) (set! bX2957@distinct-bound-ids? (unspecified)) (set! bX2959@bound-id-member? (unspecified)) (set! bX295b@self-evaluating? (unspecified)) (set! bX295d@strip-annotations (unspecified)) (set! bX295f@strip (unspecified)) (set! bX2961@stx->datum (unspecified)) (set! bX2963@id->label (unspecified)) (set! bX2965@label->binding (unspecified)) (set! bX2967@make-binding (unspecified)) (set! bX2969@binding-type (unspecified)) (set! bX296b@binding-value (unspecified)) (set! bX296d@raise-unbound-error (unspecified)) (set! bX296f@syntax-type (unspecified)) (set! bX297d@sanitize-binding (unspecified)) (set! bX297f@make-variable-transformer (unspecified)) (set! bX2981@variable-transformer? (unspecified)) (set! bX2983@variable-transformer-procedure (unspecified)) (set! bX2985@make-eval-transformer (unspecified)) (set! bX2ad6@parse-define (unspecified)) (set! bX2ad8@parse-define-syntax (unspecified)) (set! bX2ada@scheme-stx-hashtable (unspecified)) (set! bX2adc@scheme-stx (unspecified)) (set! bX2ade@lexical-var (unspecified)) (set! bX2ae0@lexical-mutable? (unspecified)) (set! bX2ae2@set-lexical-mutable! (unspecified)) (set! bX2ae4@add-lexical (unspecified)) (set! bX2ae6@add-lexicals (unspecified)) (set! bX2ae8@letrec-helper (unspecified)) (set! bX2aea@let-transformer (unspecified)) (set! bX2aec@letrec-transformer (unspecified)) (set! bX2aee@letrec*-transformer (unspecified)) (set! bX2af0@fluid-let-syntax-transformer (unspecified)) (set! bX2af2@type-descriptor-transformer (unspecified)) (set! bX2af4@record-type-descriptor-transformer (unspecified)) (set! bX2af6@record-constructor-descriptor-transformer (unspecified)) (set! bX2af8@when-macro (unspecified)) (set! bX2afa@unless-macro (unspecified)) (set! bX2afc@if-transformer (unspecified)) (set! bX2afe@and-transformer (unspecified)) (set! bX2b00@or-transformer (unspecified)) (set! bX2b02@case-macro (unspecified)) (set! bX2b04@quote-transformer (unspecified)) (set! bX2b06@case-lambda-transformer (unspecified)) (set! bX2b08@lambda-transformer (unspecified)) (set! bX2b0a@bless (unspecified)) (set! bX2b0c@with-syntax-macro (unspecified)) (set! bX2b0e@invalid-fmls-error (unspecified)) (set! bX2b10@let-macro (unspecified)) (set! bX2b12@let-values-macro (unspecified)) (set! bX2b14@let*-values-macro (unspecified)) (set! bX2b16@trace-lambda-macro (unspecified)) (set! bX2b18@trace-define-macro (unspecified)) (set! bX2b1a@trace-define-syntax-macro (unspecified)) (set! bX2b1c@trace-let/rec-syntax (unspecified)) (set! bX2b1e@trace-let-syntax-macro (unspecified)) (set! bX2b20@trace-letrec-syntax-macro (unspecified)) (set! bX2b22@guard-macro (unspecified)) (set! bX2b24@define-enumeration-macro (unspecified)) (set! bX2b26@time-macro (unspecified)) (set! bX2b28@delay-macro (unspecified)) (set! bX2b2a@assert-macro (unspecified)) (set! bX2b2c@endianness-macro (unspecified)) (set! bX2b2e@identifier-syntax-macro (unspecified)) (set! bX2b30@do-macro (unspecified)) (set! bX2b32@let*-macro (unspecified)) (set! bX2b34@or-macro (unspecified)) (set! bX2b36@and-macro (unspecified)) (set! bX2b38@cond-macro (unspecified)) (set! bX2b3a@do-include (unspecified)) (set! bX2b3c@include-macro (unspecified)) (set! bX2b3e@include-into-macro (unspecified)) (set! bX2b40@syntax-rules-macro (unspecified)) (set! bX2b42@quasiquote-macro (unspecified)) (set! bX2b44@quasisyntax-macro (unspecified)) (set! bX2b46@define-struct-macro (unspecified)) (set! bX2b48@define-record-type-macro (unspecified)) (set! bX2b4a@define-condition-type-macro (unspecified)) (set! bX2b4c@incorrect-usage-macro (unspecified)) (set! bX2b4e@parameterize-macro (unspecified)) (set! bX2b50@foreign-call-transformer (unspecified)) (set! bX2b52@convert-pattern (unspecified)) (set! bX2b54@syntax-dispatch (unspecified)) (set! bX2b56@ellipsis? (unspecified)) (set! bX2b58@underscore? (unspecified)) (set! bX2b5a@verify-literals (unspecified)) (set! bX2b5c@syntax-case-transformer (unspecified)) (set! bX2b5e@ellipsis-map (unspecified)) (set! bX2b60@syntax-transformer (unspecified)) (set! bX2b62@core-macro-transformer (unspecified)) (set! bX2b64@symbol-macro (unspecified)) (set! bX2b66@macro-transformer (unspecified)) (set! bX2b68@local-macro-transformer (unspecified)) (set! bX2b6a@do-macro-call (unspecified)) (set! bX2b6c@chi-macro (unspecified)) (set! bX2b6e@chi-local-macro (unspecified)) (set! bX2b70@chi-global-macro (unspecified)) (set! bX2b72@chi-expr* (unspecified)) (set! bX2b74@chi-application (unspecified)) (set! bX2b76@chi-expr (unspecified)) (set! bX2b78@chi-set! (unspecified)) (set! bX2b7a@verify-formals (unspecified)) (set! bX2b7c@chi-lambda-clause (unspecified)) (set! bX2b7e@chi-lambda-clause* (unspecified)) (set! bX2b80@chi-defun (unspecified)) (set! bX2b82@chi-rhs (unspecified)) (set! bX2b84@expand-interaction-rhs*/init* (unspecified)) (set! bX2b86@chi-rhs* (unspecified)) (set! bX2b88@find-bound=? (unspecified)) (set! bX2b8a@find-dups (unspecified)) (set! bX2b8c@chi-internal (unspecified)) (set! bX2b8e@parse-module (unspecified)) (set! bX2b98@module-interface? (unspecified)) (set! bX2b9a@module-interface-first-mark (unspecified)) (set! bX2b9c@set-module-interface-first-mark! (unspecified)) (set! bX2b9e@module-interface-exp-id-vec (unspecified)) (set! bX2ba0@set-module-interface-exp-id-vec! (unspecified)) (set! bX2ba2@module-interface-exp-lab-vec (unspecified)) (set! bX2ba4@set-module-interface-exp-lab-vec! (unspecified)) (set! bX2ba6@dummy (unspecified)) (set! bX2ba8@module-interface-exp-id* (unspecified)) (set! bX2baa@chi-internal-module (unspecified)) (set! bX2bac@chi-body* (unspecified)) (set! bX2bae@expand-transformer (unspecified)) (set! bX2bb0@parse-exports (unspecified)) (set! bX2bb2@parse-library-name (unspecified)) (set! bX2bb4@parse-library (unspecified)) (set! bX2bb6@parse-import-spec* (unspecified)) (set! bX2bb8@make-top-rib (unspecified)) (set! bX2bba@make-collector (unspecified)) (set! bX2bbc@inv-collector (unspecified)) (set! bX2bbe@vis-collector (unspecified)) (set! bX2bc0@imp-collector (unspecified)) (set! bX2bc2@chi-library-internal (unspecified)) (set! bX2bc4@chi-interaction-expr (unspecified)) (set! bX2bc6@library-body-expander (unspecified)) (set! bX2bc8@core-library-expander (unspecified)) (set! bX2bca@parse-top-level-program (unspecified)) (set! bX2bcc@top-level-expander (unspecified)) (set! bX2bce@rp (unspecified)) (set! bX2bd8@env? (unspecified)) (set! bX2bda@env-names (unspecified)) (set! bX2bdc@set-env-names! (unspecified)) (set! bX2bde@env-labels (unspecified)) (set! bX2be0@set-env-labels! (unspecified)) (set! bX2be2@env-itc (unspecified)) (set! bX2be4@set-env-itc! (unspecified)) (set! bX2be6@dummy (unspecified)) (set! bX2be8@rp (unspecified)) (set! bX2bf2@interaction-env? (unspecified)) (set! bX2bf4@interaction-env-rib (unspecified)) (set! bX2bf6@set-interaction-env-rib! (unspecified)) (set! bX2bf8@interaction-env-r (unspecified)) (set! bX2bfa@set-interaction-env-r! (unspecified)) (set! bX2bfc@interaction-env-locs (unspecified)) (set! bX2bfe@set-interaction-env-locs! (unspecified)) (set! bX2c00@dummy (unspecified)) (set! bX2c02@interaction-environment-symbols (unspecified)) (set! bX2c04@environment-bindings (unspecified)) (set! bX2c06@parse-binding (unspecified)) (set! bX2c08@environment? (unspecified)) (set! bX2c0a@environment-symbols (unspecified)) (set! bX2c0c@environment (unspecified)) (set! bX2c0e@null-environment (unspecified)) (set! bX2c10@scheme-report-environment (unspecified)) (set! bX2c12@expand (unspecified)) (set! bX2c14@eval (unspecified)) (set! bX2c16@library-expander (unspecified)) (set! bX2c18@boot-library-expand (unspecified)) (set! bX2c1a@rev-map-append (unspecified)) (set! bX2c1c@build-exports (unspecified)) (set! bX2c1e@make-export-subst (unspecified)) (set! bX2c20@make-export-env/macros (unspecified)) (set! bX2c22@generate-temporaries (unspecified)) (set! bX2c24@free-identifier=? (unspecified)) (set! bX2c26@bound-identifier=? (unspecified)) (set! bX2c28@make-source-condition (unspecified)) (set! bX2c2a@extract-position-condition (unspecified)) (set! bX2c2c@expression-position (unspecified)) (set! bX2c2e@assertion-error (unspecified)) (set! bX2c30@syntax-error (unspecified)) (set! bX2c32@syntax-violation* (unspecified)) (set! bX2c34@syntax-violation (unspecified)) (set! bX2c36@identifier? (unspecified)) (set! bX2c38@datum->syntax (unspecified)) (set! bX2c3a@syntax->datum (unspecified)) (set! bX2c3c@ungensym-all (unspecified)) (set! bX2c3e@compile-r6rs-top-level (unspecified)) (set! bX2c40@pre-compile-r6rs-top-level (unspecified)) (set! bX2c42@interaction-environment (unspecified)) (set! bX2c44@top-level-context (unspecified)) (set! bX28c8@file-options-macro (lambda (bX2c45@x) (let ((bX2c48@valid-option? '#f)) (begin (set! bX2c48@valid-option? (lambda (bX2c51@x) (and (bX294d@id? bX2c51@x) (memq (bX294f@id->sym bX2c51@x) '(no-fail no-create no-truncate))))) (let ((bX2c49@t bX2c45@x)) (let ((bX2c4b@ls/false (bX2b54@syntax-dispatch bX2c49@t '(_ . each-any)))) (if (and bX2c4b@ls/false (apply (lambda (bX2c4d@opt*) (for-all bX2c48@valid-option? bX2c4d@opt*)) bX2c4b@ls/false)) (apply (lambda (bX2c4f@opt*) (bX2b0a@bless (list 'make-file-options (list 'quote bX2c4f@opt*)))) bX2c4b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2c49@t)))))))) (set! bX459b@bX28c8@file-options-macro bX28c8@file-options-macro) (set! bX28ca@set-cons (lambda (bX2c53@x bX2c54@ls) (if (memq bX2c53@x bX2c54@ls) bX2c54@ls (cons bX2c53@x bX2c54@ls)))) (set! bX459c@bX28ca@set-cons bX28ca@set-cons) (set! bX28cc@set-union (lambda (bX2c57@ls1 bX2c58@ls2) (if (null? bX2c57@ls1) bX2c58@ls2 (if (memq (car bX2c57@ls1) bX2c58@ls2) (bX28cc@set-union (cdr bX2c57@ls1) bX2c58@ls2) (cons (car bX2c57@ls1) (bX28cc@set-union (cdr bX2c57@ls1) bX2c58@ls2)))))) (set! bX459d@bX28cc@set-union bX28cc@set-union) (set! bX28d1@top-mark* '(top)) (set! bX459e@bX28d1@top-mark* bX28d1@top-mark*) (set! bX28d3@top-marked? (lambda (bX2c5b@m*) (memq 'top bX2c5b@m*))) (set! bX459f@bX28d3@top-marked? bX28d3@top-marked?) (set! bX28d5@gen-lexical (lambda (bX2c5d@sym) (if (symbol? bX2c5d@sym) (gensym bX2c5d@sym) (if (bX2919@stx? bX2c5d@sym) (bX28d5@gen-lexical (bX294f@id->sym bX2c5d@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bX2c5d@sym))))) (set! bX45a0@bX28d5@gen-lexical bX28d5@gen-lexical) (set! bX28d7@gen-global (lambda (bX2c5f@x) (bX28d5@gen-lexical bX2c5f@x))) (set! bX45a1@bX28d7@gen-global bX28d7@gen-global) (set! bX28d9@gen-label (lambda (bX2c61@_) (gensym))) (set! bX45a2@bX28d9@gen-label bX28d9@gen-label) (set! bX28db@gen-top-level-label (lambda (bX2c63@id bX2c64@rib) (let ((bX2c68@find '#f)) (begin (set! bX2c68@find (lambda (bX2c73@sym bX2c74@mark* bX2c75@sym* bX2c76@mark** bX2c77@label*) (and (pair? bX2c75@sym*) (if (and (eq? bX2c73@sym (car bX2c75@sym*)) (same-marks? bX2c74@mark* (car bX2c76@mark**))) (car bX2c77@label*) (bX2c68@find bX2c73@sym bX2c74@mark* (cdr bX2c75@sym*) (cdr bX2c76@mark**) (cdr bX2c77@label*)))))) (let ((bX2c69@sym (bX294f@id->sym bX2c63@id)) (bX2c6a@mark* (bX291f@stx-mark* bX2c63@id))) (let ((bX2c6d@sym* (bX28eb@rib-sym* bX2c64@rib))) (let ((bX2c6f@t (and (memq bX2c69@sym (bX28eb@rib-sym* bX2c64@rib)) (bX2c68@find bX2c69@sym bX2c6a@mark* bX2c6d@sym* (bX28ef@rib-mark** bX2c64@rib) (bX28f3@rib-label* bX2c64@rib))))) (if bX2c6f@t ((lambda (bX2c71@label) (if (bX2762@bX25af@imported-label->binding bX2c71@label) (gensym) bX2c71@label)) bX2c6f@t) (gensym))))))))) (set! bX45a3@bX28db@gen-top-level-label bX28db@gen-top-level-label) (set! bX28dd@gen-define-label+loc (lambda (bX2c7d@id bX2c7e@rib) (let ((bX2c81@t (bX2c44@top-level-context))) (if bX2c81@t ((lambda (bX2c83@env) (let ((bX2c85@label (bX28db@gen-top-level-label bX2c7d@id bX2c7e@rib)) (bX2c86@locs (bX2bfc@interaction-env-locs bX2c83@env))) (values bX2c85@label (let ((bX2c89@t (assq bX2c85@label bX2c86@locs))) (if bX2c89@t (cdr bX2c89@t) (let ((bX2c8b@loc (bX28d5@gen-lexical bX2c7d@id))) (begin (bX2bfe@set-interaction-env-locs! bX2c83@env (cons (cons bX2c85@label bX2c8b@loc) bX2c86@locs)) bX2c8b@loc))))))) bX2c81@t) (values (gensym) (bX28d5@gen-lexical bX2c7d@id)))))) (set! bX45a4@bX28dd@gen-define-label+loc bX28dd@gen-define-label+loc) (set! bX28df@gen-define-label (lambda (bX2c8d@id bX2c8e@rib) (if (bX2c44@top-level-context) (bX28db@gen-top-level-label bX2c8d@id bX2c8e@rib) (gensym)))) (set! bX45a5@bX28df@gen-define-label bX28df@gen-define-label) (set! bX28e9@rib? (lambda (bX2c91@x) (and (simple-struct? bX2c91@x) (eq? (simple-struct-name bX2c91@x) 'rib)))) (set! bX45a6@bX28e9@rib? bX28e9@rib?) (set! bX28eb@rib-sym* (lambda (bX2c93@x) (simple-struct-ref bX2c93@x '0))) (set! bX45a7@bX28eb@rib-sym* bX28eb@rib-sym*) (set! bX28ed@set-rib-sym*! (lambda (bX2c95@x bX2c96@val) (simple-struct-set! bX2c95@x '0 bX2c96@val))) (set! bX45a8@bX28ed@set-rib-sym*! bX28ed@set-rib-sym*!) (set! bX28ef@rib-mark** (lambda (bX2c99@x) (simple-struct-ref bX2c99@x '1))) (set! bX45a9@bX28ef@rib-mark** bX28ef@rib-mark**) (set! bX28f1@set-rib-mark**! (lambda (bX2c9b@x bX2c9c@val) (simple-struct-set! bX2c9b@x '1 bX2c9c@val))) (set! bX45aa@bX28f1@set-rib-mark**! bX28f1@set-rib-mark**!) (set! bX28f3@rib-label* (lambda (bX2c9f@x) (simple-struct-ref bX2c9f@x '2))) (set! bX45ab@bX28f3@rib-label* bX28f3@rib-label*) (set! bX28f5@set-rib-label*! (lambda (bX2ca1@x bX2ca2@val) (simple-struct-set! bX2ca1@x '2 bX2ca2@val))) (set! bX45ac@bX28f5@set-rib-label*! bX28f5@set-rib-label*!) (set! bX28f7@rib-sealed/freq (lambda (bX2ca5@x) (simple-struct-ref bX2ca5@x '3))) (set! bX45ad@bX28f7@rib-sealed/freq bX28f7@rib-sealed/freq) (set! bX28f9@set-rib-sealed/freq! (lambda (bX2ca7@x bX2ca8@val) (simple-struct-set! bX2ca7@x '3 bX2ca8@val))) (set! bX45ae@bX28f9@set-rib-sealed/freq! bX28f9@set-rib-sealed/freq!) (set! bX28fb@rib-cache (lambda (bX2cab@x) (simple-struct-ref bX2cab@x '4))) (set! bX45af@bX28fb@rib-cache bX28fb@rib-cache) (set! bX28fd@set-rib-cache! (lambda (bX2cad@x bX2cae@val) (simple-struct-set! bX2cad@x '4 bX2cae@val))) (set! bX45b0@bX28fd@set-rib-cache! bX28fd@set-rib-cache!) (set! bX28ff@dummy '3) (set! bX45b1@bX28ff@dummy bX28ff@dummy) (set! bX2901@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bX45b2@bX2901@make-empty-rib bX2901@make-empty-rib) (set! bX2903@extend-rib! (lambda (bX2cb1@rib bX2cb2@id bX2cb3@label) (let ((bX2cb8@find '#f)) (begin (set! bX2cb8@find (lambda (bX2cc5@sym bX2cc6@mark* bX2cc7@sym* bX2cc8@mark** bX2cc9@label*) (and (pair? bX2cc7@sym*) (if (and (eq? bX2cc5@sym (car bX2cc7@sym*)) (same-marks? bX2cc6@mark* (car bX2cc8@mark**))) bX2cc9@label* (bX2cb8@find bX2cc5@sym bX2cc6@mark* (cdr bX2cc7@sym*) (cdr bX2cc8@mark**) (cdr bX2cc9@label*)))))) (begin (if (bX28f7@rib-sealed/freq bX2cb1@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bX2cb1@rib) (void)) (let ((bX2cb9@sym (bX294f@id->sym bX2cb2@id)) (bX2cba@mark* (bX291f@stx-mark* bX2cb2@id))) (let ((bX2cbd@sym* (bX28eb@rib-sym* bX2cb1@rib))) (let ((bX2cbf@t (and (memq bX2cb9@sym (bX28eb@rib-sym* bX2cb1@rib)) (bX2cb8@find bX2cb9@sym bX2cba@mark* bX2cbd@sym* (bX28ef@rib-mark** bX2cb1@rib) (bX28f3@rib-label* bX2cb1@rib))))) (if bX2cbf@t ((lambda (bX2cc1@p) (if (not (eq? bX2cb3@label (car bX2cc1@p))) (if (bX2c44@top-level-context) (set-car! bX2cc1@p bX2cb3@label) (bX2c34@syntax-violation '#f '"multiple definitions of identifier" bX2cb2@id)) (void))) bX2cbf@t) (begin (if (bX28fb@rib-cache bX2cb1@rib) (hashtable-update! (bX28fb@rib-cache bX2cb1@rib) bX2cb9@sym (lambda (bX2cc3@e) (cons (cons bX2cba@mark* bX2cb3@label) bX2cc3@e)) '()) (void)) (bX28ed@set-rib-sym*! bX2cb1@rib (cons bX2cb9@sym bX2cbd@sym*)) (bX28f1@set-rib-mark**! bX2cb1@rib (cons bX2cba@mark* (bX28ef@rib-mark** bX2cb1@rib))) (bX28f5@set-rib-label*! bX2cb1@rib (cons bX2cb3@label (bX28f3@rib-label* bX2cb1@rib))))))))))))) (set! bX45b3@bX2903@extend-rib! bX2903@extend-rib!) (set! bX2905@extend-rib/nc! (lambda (bX2ccf@rib bX2cd0@id bX2cd1@label) (let ((bX2cd5@sym (bX294f@id->sym bX2cd0@id)) (bX2cd6@mark* (bX291f@stx-mark* bX2cd0@id))) (let ((bX2cd9@sym* (bX28eb@rib-sym* bX2ccf@rib))) (begin (if (bX28fb@rib-cache bX2ccf@rib) (hashtable-update! (bX28fb@rib-cache bX2ccf@rib) bX2cd5@sym (lambda (bX2cdb@e) (cons (cons bX2cd6@mark* bX2cd1@label) bX2cdb@e)) '()) (void)) (bX28ed@set-rib-sym*! bX2ccf@rib (cons bX2cd5@sym bX2cd9@sym*)) (bX28f1@set-rib-mark**! bX2ccf@rib (cons bX2cd6@mark* (bX28ef@rib-mark** bX2ccf@rib))) (bX28f5@set-rib-label*! bX2ccf@rib (cons bX2cd1@label (bX28f3@rib-label* bX2ccf@rib)))))))) (set! bX45b4@bX2905@extend-rib/nc! bX2905@extend-rib/nc!) (set! bX2907@make-rib-map (lambda (bX2cdd@sym*) (let ((bX2cdf@ht (make-eq-hashtable))) (let bX2ce5@f ((bX2ce1@i '0) (bX2ce2@sym* bX2cdd@sym*)) (if (null? bX2ce2@sym*) bX2cdf@ht (begin (hashtable-update! bX2cdf@ht (car bX2ce2@sym*) (lambda (bX2ce7@x) (cons bX2ce1@i bX2ce7@x)) '()) (bX2ce5@f (+ bX2ce1@i '1) (cdr bX2ce2@sym*)))))))) (set! bX45b5@bX2907@make-rib-map bX2907@make-rib-map) (set! bX2909@seal-rib! (lambda (bX2ce9@rib) (let ((bX2ceb@sym* (bX28eb@rib-sym* bX2ce9@rib))) (if (not (null? bX2ceb@sym*)) (begin (bX28ed@set-rib-sym*! bX2ce9@rib (list->vector bX2ceb@sym*)) (bX28f1@set-rib-mark**! bX2ce9@rib (list->vector (bX28ef@rib-mark** bX2ce9@rib))) (bX28f5@set-rib-label*! bX2ce9@rib (list->vector (bX28f3@rib-label* bX2ce9@rib))) (bX28f9@set-rib-sealed/freq! bX2ce9@rib (bX2907@make-rib-map bX2ceb@sym*))) (void))))) (set! bX45b6@bX2909@seal-rib! bX2909@seal-rib!) (set! bX290b@unseal-rib! (lambda (bX2ced@rib) (if (bX28f7@rib-sealed/freq bX2ced@rib) (begin (bX28f9@set-rib-sealed/freq! bX2ced@rib '#f) (bX28ed@set-rib-sym*! bX2ced@rib (vector->list (bX28eb@rib-sym* bX2ced@rib))) (bX28f1@set-rib-mark**! bX2ced@rib (vector->list (bX28ef@rib-mark** bX2ced@rib))) (bX28f5@set-rib-label*! bX2ced@rib (vector->list (bX28f3@rib-label* bX2ced@rib)))) (void)))) (set! bX45b7@bX290b@unseal-rib! bX290b@unseal-rib!) (set! bX290d@make-full-rib (lambda (bX2cef@id* bX2cf0@label*) (let ((bX2cf3@r (make-simple-struct 'rib '6 (list (map bX294f@id->sym bX2cef@id*) (map bX291f@stx-mark* bX2cef@id*) bX2cf0@label* '#f '#f)))) (begin (bX2909@seal-rib! bX2cf3@r) bX2cf3@r)))) (set! bX45b8@bX290d@make-full-rib bX290d@make-full-rib) (set! bX290f@rp (bX2494@bX2370@make-record-printer 'stx (lambda (bX2cf5@x bX2cf6@p bX2cf7@wr) (begin (display '"#<syntax " bX2cf6@p) (write (bX2961@stx->datum bX2cf5@x) bX2cf6@p) (let ((bX2cfb@expr (bX291b@stx-expr bX2cf5@x))) (if (bX248c@bX2360@annotation? bX2cfb@expr) (let ((bX2cfd@src (bX248d@bX2362@annotation-source bX2cfb@expr))) (if (pair? bX2cfd@src) (begin (display '" [" bX2cf6@p) (display (cdr bX2cfd@src) bX2cf6@p) (display '" of " bX2cf6@p) (display (car bX2cfd@src) bX2cf6@p) (display '"]" bX2cf6@p)) (void))) (void))) (display '">" bX2cf6@p))))) (set! bX45b9@bX290f@rp bX290f@rp) (set! bX2919@stx? (lambda (bX2cff@x) (and (simple-struct? bX2cff@x) (eq? (simple-struct-name bX2cff@x) 'stx)))) (set! bX45ba@bX2919@stx? bX2919@stx?) (set! bX291b@stx-expr (lambda (bX2d01@x) (simple-struct-ref bX2d01@x '0))) (set! bX45bb@bX291b@stx-expr bX291b@stx-expr) (set! bX291d@set-stx-expr! (lambda (bX2d03@x bX2d04@val) (simple-struct-set! bX2d03@x '0 bX2d04@val))) (set! bX45bc@bX291d@set-stx-expr! bX291d@set-stx-expr!) (set! bX291f@stx-mark* (lambda (bX2d07@x) (simple-struct-ref bX2d07@x '1))) (set! bX45bd@bX291f@stx-mark* bX291f@stx-mark*) (set! bX2921@set-stx-mark*! (lambda (bX2d09@x bX2d0a@val) (simple-struct-set! bX2d09@x '1 bX2d0a@val))) (set! bX45be@bX2921@set-stx-mark*! bX2921@set-stx-mark*!) (set! bX2923@stx-subst* (lambda (bX2d0d@x) (simple-struct-ref bX2d0d@x '2))) (set! bX45bf@bX2923@stx-subst* bX2923@stx-subst*) (set! bX2925@set-stx-subst*! (lambda (bX2d0f@x bX2d10@val) (simple-struct-set! bX2d0f@x '2 bX2d10@val))) (set! bX45c0@bX2925@set-stx-subst*! bX2925@set-stx-subst*!) (set! bX2927@stx-ae* (lambda (bX2d13@x) (simple-struct-ref bX2d13@x '3))) (set! bX45c1@bX2927@stx-ae* bX2927@stx-ae*) (set! bX2929@set-stx-ae*! (lambda (bX2d15@x bX2d16@val) (simple-struct-set! bX2d15@x '3 bX2d16@val))) (set! bX45c2@bX2929@set-stx-ae*! bX2929@set-stx-ae*!) (set! bX292b@dummy '3) (set! bX45c3@bX292b@dummy bX292b@dummy) (set! bX292d@datum->stx (lambda (bX2d19@id bX2d1a@datum) (make-simple-struct 'stx '5 (list bX2d1a@datum (bX291f@stx-mark* bX2d19@id) (bX2923@stx-subst* bX2d19@id) (bX2927@stx-ae* bX2d19@id))))) (set! bX45c4@bX292d@datum->stx bX292d@datum->stx) (set! bX292f@gen-mark (lambda () (string '#\m))) (set! bX45c5@bX292f@gen-mark bX292f@gen-mark) (set! bX2931@anti-mark '#f) (set! bX45c6@bX2931@anti-mark bX2931@anti-mark) (set! bX2933@anti-mark? not) (set! bX45c7@bX2933@anti-mark? bX2933@anti-mark?) (set! bX2935@mkstx (lambda (bX2d1d@e bX2d1e@m* bX2d1f@s* bX2d20@ae*) (if (and (bX2919@stx? bX2d1d@e) (not (bX28d3@top-marked? bX2d1e@m*))) (call-with-values (lambda () (join-wraps bX2d1e@m* bX2d1f@s* bX2d20@ae* bX2d1d@e)) (lambda (bX2d2b@bX2d26 bX2d2c@bX2d28 bX2d2d@bX2d2a) (let ((bX2d31@ae* bX2d2d@bX2d2a) (bX2d32@s* bX2d2c@bX2d28) (bX2d33@m* bX2d2b@bX2d26)) (make-simple-struct 'stx '5 (list (bX291b@stx-expr bX2d1d@e) bX2d33@m* bX2d32@s* bX2d31@ae*))))) (make-simple-struct 'stx '5 (list bX2d1d@e bX2d1e@m* bX2d1f@s* bX2d20@ae*))))) (set! bX45c8@bX2935@mkstx bX2935@mkstx) (set! bX2937@add-mark (lambda (bX2d37@m bX2d38@e bX2d39@ae) (bX2935@mkstx bX2d38@e (list bX2d37@m) '(shift) (list bX2d39@ae)))) (set! bX45c9@bX2937@add-mark bX2937@add-mark) (set! bX2939@add-subst (lambda (bX2d3d@subst bX2d3e@e) (bX2935@mkstx bX2d3e@e '() (list bX2d3d@subst) '()))) (set! bX45ca@bX2939@add-subst bX2939@add-subst) (set! bX293b@syntax-kind? (lambda (bX2d41@x bX2d42@p?) (if (bX2919@stx? bX2d41@x) (bX293b@syntax-kind? (bX291b@stx-expr bX2d41@x) bX2d42@p?) (if (bX248c@bX2360@annotation? bX2d41@x) (bX293b@syntax-kind? (bX248e@bX2364@annotation-expression bX2d41@x) bX2d42@p?) (bX2d42@p? bX2d41@x))))) (set! bX45cb@bX293b@syntax-kind? bX293b@syntax-kind?) (set! bX293d@syntax-vector->list (lambda (bX2d45@x) (if (bX2919@stx? bX2d45@x) (let ((bX2d47@ls (bX293d@syntax-vector->list (bX291b@stx-expr bX2d45@x))) (bX2d48@m* (bX291f@stx-mark* bX2d45@x)) (bX2d49@s* (bX2923@stx-subst* bX2d45@x)) (bX2d4a@ae* (bX2927@stx-ae* bX2d45@x))) (map (lambda (bX2d4f@x) (bX2935@mkstx bX2d4f@x bX2d48@m* bX2d49@s* bX2d4a@ae*)) bX2d47@ls)) (if (bX248c@bX2360@annotation? bX2d45@x) (bX293d@syntax-vector->list (bX248e@bX2364@annotation-expression bX2d45@x)) (if (vector? bX2d45@x) (vector->list bX2d45@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bX2d45@x)))))) (set! bX45cc@bX293d@syntax-vector->list bX293d@syntax-vector->list) (set! bX293f@syntax-pair? (lambda (bX2d51@x) (bX293b@syntax-kind? bX2d51@x pair?))) (set! bX45cd@bX293f@syntax-pair? bX293f@syntax-pair?) (set! bX2941@syntax-vector? (lambda (bX2d53@x) (bX293b@syntax-kind? bX2d53@x vector?))) (set! bX45ce@bX2941@syntax-vector? bX2941@syntax-vector?) (set! bX2943@syntax-null? (lambda (bX2d55@x) (bX293b@syntax-kind? bX2d55@x null?))) (set! bX45cf@bX2943@syntax-null? bX2943@syntax-null?) (set! bX2945@syntax-list? (lambda (bX2d57@x) (or (bX2943@syntax-null? bX2d57@x) (and (bX293f@syntax-pair? bX2d57@x) (bX2945@syntax-list? (bX2949@syntax-cdr bX2d57@x)))))) (set! bX45d0@bX2945@syntax-list? bX2945@syntax-list?) (set! bX2947@syntax-car (lambda (bX2d59@x) (if (bX2919@stx? bX2d59@x) (bX2935@mkstx (bX2947@syntax-car (bX291b@stx-expr bX2d59@x)) (bX291f@stx-mark* bX2d59@x) (bX2923@stx-subst* bX2d59@x) (bX2927@stx-ae* bX2d59@x)) (if (bX248c@bX2360@annotation? bX2d59@x) (bX2947@syntax-car (bX248e@bX2364@annotation-expression bX2d59@x)) (if (pair? bX2d59@x) (car bX2d59@x) (assertion-violation 'syntax-car '"BUG: not a pair" bX2d59@x)))))) (set! bX45d1@bX2947@syntax-car bX2947@syntax-car) (set! bX2949@syntax-cdr (lambda (bX2d5b@x) (if (bX2919@stx? bX2d5b@x) (bX2935@mkstx (bX2949@syntax-cdr (bX291b@stx-expr bX2d5b@x)) (bX291f@stx-mark* bX2d5b@x) (bX2923@stx-subst* bX2d5b@x) (bX2927@stx-ae* bX2d5b@x)) (if (bX248c@bX2360@annotation? bX2d5b@x) (bX2949@syntax-cdr (bX248e@bX2364@annotation-expression bX2d5b@x)) (if (pair? bX2d5b@x) (cdr bX2d5b@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bX2d5b@x)))))) (set! bX45d2@bX2949@syntax-cdr bX2949@syntax-cdr) (set! bX294b@syntax->list (lambda (bX2d5d@x) (if (bX293f@syntax-pair? bX2d5d@x) (cons (bX2947@syntax-car bX2d5d@x) (bX294b@syntax->list (bX2949@syntax-cdr bX2d5d@x))) (if (bX2943@syntax-null? bX2d5d@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bX2d5d@x))))) (set! bX45d3@bX294b@syntax->list bX294b@syntax->list) (set! bX294d@id? (lambda (bX2d5f@x) (and (bX2919@stx? bX2d5f@x) (symbol? (bX291b@stx-expr bX2d5f@x))))) (set! bX45d4@bX294d@id? bX294d@id?) (set! bX294f@id->sym (lambda (bX2d61@x) (bX291b@stx-expr bX2d61@x))) (set! bX45d5@bX294f@id->sym bX294f@id->sym) (set! bX2951@bound-id=? (lambda (bX2d63@x bX2d64@y) (and (eq? (bX294f@id->sym bX2d63@x) (bX294f@id->sym bX2d64@y)) (same-marks? (bX291f@stx-mark* bX2d63@x) (bX291f@stx-mark* bX2d64@y))))) (set! bX45d6@bX2951@bound-id=? bX2951@bound-id=?) (set! bX2953@free-id=? (lambda (bX2d67@i bX2d68@j) (let ((bX2d6b@t0 (id->real-label bX2d67@i)) (bX2d6c@t1 (id->real-label bX2d68@j))) (if (or bX2d6b@t0 bX2d6c@t1) (eq? bX2d6b@t0 bX2d6c@t1) (eq? (bX294f@id->sym bX2d67@i) (bX294f@id->sym bX2d68@j)))))) (set! bX45d7@bX2953@free-id=? bX2953@free-id=?) (set! bX2955@valid-bound-ids? (lambda (bX2d6f@id*) (and (for-all bX294d@id? bX2d6f@id*) (bX2957@distinct-bound-ids? bX2d6f@id*)))) (set! bX45d8@bX2955@valid-bound-ids? bX2955@valid-bound-ids?) (set! bX2957@distinct-bound-ids? (lambda (bX2d71@id*) (or (null? bX2d71@id*) (and (not (bX2959@bound-id-member? (car bX2d71@id*) (cdr bX2d71@id*))) (bX2957@distinct-bound-ids? (cdr bX2d71@id*)))))) (set! bX45d9@bX2957@distinct-bound-ids? bX2957@distinct-bound-ids?) (set! bX2959@bound-id-member? (lambda (bX2d73@id bX2d74@id*) (and (pair? bX2d74@id*) (or (bX2951@bound-id=? bX2d73@id (car bX2d74@id*)) (bX2959@bound-id-member? bX2d73@id (cdr bX2d74@id*)))))) (set! bX45da@bX2959@bound-id-member? bX2959@bound-id-member?) (set! bX295b@self-evaluating? (lambda (bX2d77@x) (or (number? bX2d77@x) (string? bX2d77@x) (char? bX2d77@x) (boolean? bX2d77@x) (regexp? bX2d77@x) (bytevector? bX2d77@x)))) (set! bX45db@bX295b@self-evaluating? bX295b@self-evaluating?) (set! bX295d@strip-annotations (lambda (bX2d79@x) (if (pair? bX2d79@x) (cons (bX295d@strip-annotations (car bX2d79@x)) (bX295d@strip-annotations (cdr bX2d79@x))) (if (vector? bX2d79@x) (vector-map bX295d@strip-annotations bX2d79@x) (if (bX248c@bX2360@annotation? bX2d79@x) (bX248b@bX235e@annotation-stripped bX2d79@x) bX2d79@x))))) (set! bX45dc@bX295d@strip-annotations bX295d@strip-annotations) (set! bX295f@strip (lambda (bX2d7b@x bX2d7c@m*) (if (bX28d3@top-marked? bX2d7c@m*) (if (or (bX248c@bX2360@annotation? bX2d7b@x) (and (pair? bX2d7b@x) (bX248c@bX2360@annotation? (car bX2d7b@x))) (and (vector? bX2d7b@x) (> (vector-length bX2d7b@x) '0) (bX248c@bX2360@annotation? (vector-ref bX2d7b@x '0)))) (bX295d@strip-annotations bX2d7b@x) bX2d7b@x) (let bX2d81@f ((bX2d7f@x bX2d7b@x)) (if (bX2919@stx? bX2d7f@x) (bX295f@strip (bX291b@stx-expr bX2d7f@x) (bX291f@stx-mark* bX2d7f@x)) (if (bX248c@bX2360@annotation? bX2d7f@x) (bX248b@bX235e@annotation-stripped bX2d7f@x) (if (pair? bX2d7f@x) (let ((bX2d83@a (bX2d81@f (car bX2d7f@x))) (bX2d84@d (bX2d81@f (cdr bX2d7f@x)))) (if (and (eq? bX2d83@a (car bX2d7f@x)) (eq? bX2d84@d (cdr bX2d7f@x))) bX2d7f@x (cons bX2d83@a bX2d84@d))) (if (vector? bX2d7f@x) (let ((bX2d87@old (vector->list bX2d7f@x))) (let ((bX2d89@new (map bX2d81@f bX2d87@old))) (if (for-all eq? bX2d87@old bX2d89@new) bX2d7f@x (list->vector bX2d89@new)))) bX2d7f@x)))))))) (set! bX45dd@bX295f@strip bX295f@strip) (set! bX2961@stx->datum (lambda (bX2d8b@x) (bX295f@strip bX2d8b@x '()))) (set! bX45de@bX2961@stx->datum bX2961@stx->datum) (set! bX2963@id->label (lambda (bX2d8d@id) (or (id->real-label bX2d8d@id) (let ((bX2d8f@t (bX2c44@top-level-context))) (if bX2d8f@t ((lambda (bX2d91@env) (let ((bX2d93@rib (bX2bf4@interaction-env-rib bX2d91@env))) (call-with-values (lambda () (bX28dd@gen-define-label+loc bX2d8d@id bX2d93@rib)) (lambda (bX2d99@bX2d96 bX2d9a@bX2d98) (let ((bX2d9d@loc_ bX2d9a@bX2d98) (bX2d9e@lab bX2d99@bX2d96)) (begin (bX2903@extend-rib! bX2d93@rib bX2d8d@id bX2d9e@lab) bX2d9e@lab)))))) bX2d8f@t) '#f))))) (set! bX45df@bX2963@id->label bX2963@id->label) (set! bX2965@label->binding (lambda (bX2da1@x bX2da2@r) (let ((bX2da5@t (bX2762@bX25af@imported-label->binding bX2da1@x))) (if bX2da5@t ((lambda (bX2da7@b) (if (and (pair? bX2da7@b) (eq? (car bX2da7@b) '$core-rtd)) (cons '$rtd (map bX2b0a@bless (cdr bX2da7@b))) (if (and (pair? bX2da7@b) (eq? (car bX2da7@b) 'global-rtd)) (let ((bX2da9@lib (cadr bX2da7@b)) (bX2daa@loc (cddr bX2da7@b))) (cons '$rtd (symbol-value bX2daa@loc))) bX2da7@b))) bX2da5@t) (let ((bX2dad@t (assq bX2da1@x bX2da2@r))) (if bX2dad@t (cdr bX2dad@t) (let ((bX2daf@t (bX2c44@top-level-context))) (if bX2daf@t ((lambda (bX2db1@env) (let ((bX2db3@t (assq bX2da1@x (bX2bfc@interaction-env-locs bX2db1@env)))) (if bX2db3@t ((lambda (bX2db5@p) (cons* 'lexical (cdr bX2db5@p) '#f)) bX2db3@t) '(displaced-lexical . #f)))) bX2daf@t) '(displaced-lexical . #f))))))))) (set! bX45e0@bX2965@label->binding bX2965@label->binding) (set! bX2967@make-binding cons) (set! bX45e1@bX2967@make-binding bX2967@make-binding) (set! bX2969@binding-type car) (set! bX45e2@bX2969@binding-type bX2969@binding-type) (set! bX296b@binding-value cdr) (set! bX45e3@bX296b@binding-value bX296b@binding-value) (set! bX296d@raise-unbound-error (lambda (bX2db7@id) (bX2c32@syntax-violation* '#f '"unbound identifier" bX2db7@id (bX49d9@bX481f@make-undefined-violation)))) (set! bX45e4@bX296d@raise-unbound-error bX296d@raise-unbound-error) (set! bX296f@syntax-type (lambda (bX2db9@e bX2dba@r) (if (bX294d@id? bX2db9@e) (let ((bX2dbd@id bX2db9@e)) (let ((bX2dbf@label (bX2963@id->label bX2dbd@id))) (let ((bX2dc1@b (bX2965@label->binding bX2dbf@label bX2dba@r))) (let ((bX2dc3@type (bX2969@binding-type bX2dc1@b))) (begin (if (not bX2dbf@label) (bX296d@raise-unbound-error bX2dbd@id) (void)) (let ((bX2dc5@t bX2dc3@type)) (if (memv bX2dc5@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bX2dc3@type (bX296b@binding-value bX2dc1@b) bX2dbd@id) (values 'other '#f '#f)))))))) (if (bX293f@syntax-pair? bX2db9@e) (let ((bX2dc7@id (bX2947@syntax-car bX2db9@e))) (if (bX294d@id? bX2dc7@id) (let ((bX2dc9@label (bX2963@id->label bX2dc7@id))) (let ((bX2dcb@b (bX2965@label->binding bX2dc9@label bX2dba@r))) (let ((bX2dcd@type (bX2969@binding-type bX2dcb@b))) (begin (if (not bX2dc9@label) (bX296d@raise-unbound-error bX2dc7@id) (void)) (let ((bX2dcf@t bX2dcd@type)) (if (memv bX2dcf@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bX2dcd@type (bX296b@binding-value bX2dcb@b) bX2dc7@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bX2dd1@d (bX2961@stx->datum bX2db9@e))) (if (bX295b@self-evaluating? bX2dd1@d) (values 'constant bX2dd1@d '#f) (values 'other '#f '#f))))))) (set! bX45e5@bX296f@syntax-type bX296f@syntax-type) (set! bX297d@sanitize-binding (lambda (bX2dd3@x bX2dd4@src) (if (procedure? bX2dd3@x) (cons* 'local-macro bX2dd3@x bX2dd4@src) (if (and (pair? bX2dd3@x) (eq? (car bX2dd3@x) 'macro!) (procedure? (cdr bX2dd3@x))) (cons* 'local-macro! (cdr bX2dd3@x) bX2dd4@src) (if (and (pair? bX2dd3@x) (eq? (car bX2dd3@x) '$rtd)) bX2dd3@x (assertion-violation 'expand '"invalid transformer" bX2dd3@x)))))) (set! bX45e6@bX297d@sanitize-binding bX297d@sanitize-binding) (set! bX297f@make-variable-transformer (lambda (bX2dd7@x) (if (procedure? bX2dd7@x) (cons 'macro! bX2dd7@x) (assertion-violation 'make-variable-transformer '"not a procedure" bX2dd7@x)))) (set! bX45e7@bX297f@make-variable-transformer bX297f@make-variable-transformer) (set! bX2981@variable-transformer? (lambda (bX2dd9@x) (and (pair? bX2dd9@x) (eq? (car bX2dd9@x) 'macro!) (procedure? (cdr bX2dd9@x))))) (set! bX45e8@bX2981@variable-transformer? bX2981@variable-transformer?) (set! bX2983@variable-transformer-procedure (lambda (bX2ddb@x) (if (bX2981@variable-transformer? bX2ddb@x) (cdr bX2ddb@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bX2ddb@x)))) (set! bX45e9@bX2983@variable-transformer-procedure bX2983@variable-transformer-procedure) (set! bX2985@make-eval-transformer (lambda (bX2ddd@x) (bX297d@sanitize-binding (eval-core (bX24ed@bX24a5@expanded->core bX2ddd@x)) bX2ddd@x))) (set! bX45ea@bX2985@make-eval-transformer bX2985@make-eval-transformer) (set! bX2ad6@parse-define (lambda (bX2ddf@x) (let ((bX2de1@t bX2ddf@x)) (let ((bX2de3@ls/false (bX2b54@syntax-dispatch bX2de1@t '(_ (any . any) any . each-any)))) (if (and bX2de3@ls/false (apply (lambda (bX2de5@id bX2de6@fmls bX2de7@b bX2de8@b*) (bX294d@id? bX2de5@id)) bX2de3@ls/false)) (apply (lambda (bX2ded@id bX2dee@fmls bX2def@b bX2df0@b*) (begin (bX2b7a@verify-formals bX2dee@fmls bX2ddf@x) (values bX2ded@id (cons 'defun (cons bX2dee@fmls (cons bX2def@b bX2df0@b*)))))) bX2de3@ls/false) (let ((bX2df5@t bX2de1@t)) (let ((bX2df7@ls/false (bX2b54@syntax-dispatch bX2df5@t '(_ any any)))) (if (and bX2df7@ls/false (apply (lambda (bX2df9@id bX2dfa@val) (bX294d@id? bX2df9@id)) bX2df7@ls/false)) (apply (lambda (bX2dfd@id bX2dfe@val) (values bX2dfd@id (cons 'expr bX2dfe@val))) bX2df7@ls/false) (let ((bX2e01@t bX2df5@t)) (let ((bX2e03@ls/false (bX2b54@syntax-dispatch bX2e01@t '(_ any)))) (if (and bX2e03@ls/false (apply (lambda (bX2e05@id) (bX294d@id? bX2e05@id)) bX2e03@ls/false)) (apply (lambda (bX2e07@id) (values bX2e07@id (cons 'expr (bX2b0a@bless '(void))))) bX2e03@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2e01@t)))))))))))) (set! bX45eb@bX2ad6@parse-define bX2ad6@parse-define) (set! bX2ad8@parse-define-syntax (lambda (bX2e09@x) (let ((bX2e0b@t bX2e09@x)) (let ((bX2e0d@ls/false (bX2b54@syntax-dispatch bX2e0b@t '(_ any any)))) (if (and bX2e0d@ls/false (apply (lambda (bX2e0f@id bX2e10@val) (bX294d@id? bX2e0f@id)) bX2e0d@ls/false)) (apply (lambda (bX2e13@id bX2e14@val) (values bX2e13@id bX2e14@val)) bX2e0d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2e0b@t)))))) (set! bX45ec@bX2ad8@parse-define-syntax bX2ad8@parse-define-syntax) (set! bX2ada@scheme-stx-hashtable (make-eq-hashtable)) (set! bX45ed@bX2ada@scheme-stx-hashtable bX2ada@scheme-stx-hashtable) (set! bX2adc@scheme-stx (lambda (bX2e17@sym) (or (hashtable-ref bX2ada@scheme-stx-hashtable bX2e17@sym '#f) (let ((bX2e19@subst (bX273e@bX2567@library-subst (bX275c@bX25a3@find-library-by-name '(psyntax system $all))))) (let ((bX2e1b@stx (make-simple-struct 'stx '5 (list bX2e17@sym bX28d1@top-mark* '() '())))) (let ((bX2e1d@stx (let ((bX2e1f@t (assq bX2e17@sym bX2e19@subst))) (if bX2e1f@t ((lambda (bX2e21@x) (let ((bX2e23@name (car bX2e21@x)) (bX2e24@label (cdr bX2e21@x))) (bX2939@add-subst (make-simple-struct 'rib '6 (list (list bX2e23@name) (list bX28d1@top-mark*) (list bX2e24@label) '#f '#f)) bX2e1b@stx))) bX2e1f@t) bX2e1b@stx)))) (begin (hashtable-set! bX2ada@scheme-stx-hashtable bX2e17@sym bX2e1d@stx) bX2e1d@stx))))))) (set! bX45ee@bX2adc@scheme-stx bX2adc@scheme-stx) (set! bX2ade@lexical-var car) (set! bX45ef@bX2ade@lexical-var bX2ade@lexical-var) (set! bX2ae0@lexical-mutable? cdr) (set! bX45f0@bX2ae0@lexical-mutable? bX2ae0@lexical-mutable?) (set! bX2ae2@set-lexical-mutable! set-cdr!) (set! bX45f1@bX2ae2@set-lexical-mutable! bX2ae2@set-lexical-mutable!) (set! bX2ae4@add-lexical (lambda (bX2e27@lab bX2e28@lex bX2e29@r) (cons (cons* bX2e27@lab 'lexical bX2e28@lex '#f) bX2e29@r))) (set! bX45f2@bX2ae4@add-lexical bX2ae4@add-lexical) (set! bX2ae6@add-lexicals (lambda (bX2e2d@lab* bX2e2e@lex* bX2e2f@r) (if (null? bX2e2d@lab*) bX2e2f@r (bX2ae6@add-lexicals (cdr bX2e2d@lab*) (cdr bX2e2e@lex*) (bX2ae4@add-lexical (car bX2e2d@lab*) (car bX2e2e@lex*) bX2e2f@r))))) (set! bX45f3@bX2ae6@add-lexicals bX2ae6@add-lexicals) (set! bX2ae8@letrec-helper (lambda (bX2e33@e bX2e34@r bX2e35@mr bX2e36@build) (let ((bX2e3b@t bX2e33@e)) (let ((bX2e3d@ls/false (bX2b54@syntax-dispatch bX2e3b@t '(_ #(each (any any)) any . each-any)))) (if bX2e3d@ls/false (apply (lambda (bX2e3f@lhs* bX2e40@rhs* bX2e41@b bX2e42@b*) (if (not (bX2955@valid-bound-ids? bX2e3f@lhs*)) (bX2b0e@invalid-fmls-error bX2e33@e bX2e3f@lhs*) (let ((bX2e47@lex* (map bX28d5@gen-lexical bX2e3f@lhs*)) (bX2e48@lab* (map bX28d9@gen-label bX2e3f@lhs*))) (let ((bX2e4b@rib (bX290d@make-full-rib bX2e3f@lhs* bX2e48@lab*)) (bX2e4c@r (bX2ae6@add-lexicals bX2e48@lab* bX2e47@lex* bX2e34@r))) (let ((bX2e4f@body (bX2b8c@chi-internal (bX2939@add-subst bX2e4b@rib (cons bX2e41@b bX2e42@b*)) bX2e4c@r bX2e35@mr)) (bX2e50@rhs* (bX2b72@chi-expr* (map (lambda (bX2e53@x) (bX2939@add-subst bX2e4b@rib bX2e53@x)) bX2e40@rhs*) bX2e4c@r bX2e35@mr))) (bX2e36@build '#f bX2e47@lex* bX2e50@rhs* bX2e4f@body)))))) bX2e3d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2e3b@t)))))) (set! bX45f4@bX2ae8@letrec-helper bX2ae8@letrec-helper) (set! bX2aea@let-transformer (lambda (bX2e55@e bX2e56@r bX2e57@mr) (let ((bX2e5b@t bX2e55@e)) (let ((bX2e5d@ls/false (bX2b54@syntax-dispatch bX2e5b@t '(_ #(each (any any)) any . each-any)))) (if bX2e5d@ls/false (apply (lambda (bX2e5f@lhs* bX2e60@rhs* bX2e61@b bX2e62@b*) (if (not (bX2955@valid-bound-ids? bX2e5f@lhs*)) (bX2b0e@invalid-fmls-error bX2e55@e bX2e5f@lhs*) (let ((bX2e67@lex* (map bX28d5@gen-lexical bX2e5f@lhs*)) (bX2e68@lab* (map bX28d9@gen-label bX2e5f@lhs*)) (bX2e69@rhs* (bX2b72@chi-expr* bX2e60@rhs* bX2e56@r bX2e57@mr))) (let ((bX2e6d@rib (bX290d@make-full-rib bX2e5f@lhs* bX2e68@lab*)) (bX2e6e@r (bX2ae6@add-lexicals bX2e68@lab* bX2e67@lex* bX2e56@r))) (let ((bX2e71@body (bX2b8c@chi-internal (bX2939@add-subst bX2e6d@rib (cons bX2e61@b bX2e62@b*)) bX2e6e@r bX2e57@mr))) (bX28b5@bX2812@build-let '#f bX2e67@lex* bX2e69@rhs* bX2e71@body)))))) bX2e5d@ls/false) (let ((bX2e73@t bX2e5b@t)) (let ((bX2e75@ls/false (bX2b54@syntax-dispatch bX2e73@t '(_ any #(each (any any)) any . each-any)))) (if bX2e75@ls/false (apply (lambda (bX2e77@loop bX2e78@lhs* bX2e79@rhs* bX2e7a@b bX2e7b@b*) (if (not (bX2955@valid-bound-ids? bX2e78@lhs*)) (bX2b0e@invalid-fmls-error bX2e55@e bX2e78@lhs*) (let ((bX2e81@lex* (map bX28d5@gen-lexical bX2e78@lhs*)) (bX2e82@lab* (map bX28d9@gen-label bX2e78@lhs*)) (bX2e83@rhs* (bX2b72@chi-expr* bX2e79@rhs* bX2e56@r bX2e57@mr)) (bX2e84@loop-lex (bX28d5@gen-lexical bX2e77@loop)) (bX2e85@loop-lab (bX28d9@gen-label bX2e77@loop))) (let ((bX2e8b@loop-rib (bX290d@make-full-rib (list bX2e77@loop) (list bX2e85@loop-lab))) (bX2e8c@rib (bX290d@make-full-rib bX2e78@lhs* bX2e82@lab*)) (bX2e8d@r (bX2ae6@add-lexicals (cons bX2e85@loop-lab bX2e82@lab*) (cons bX2e84@loop-lex bX2e81@lex*) bX2e56@r))) (let ((bX2e91@body (bX2b8c@chi-internal (bX2939@add-subst bX2e8b@loop-rib (bX2939@add-subst bX2e8c@rib (cons bX2e7a@b bX2e7b@b*))) bX2e8d@r bX2e57@mr))) (bX28b6@bX2814@build-named-let '#f bX2e84@loop-lex bX2e81@lex* bX2e83@rhs* bX2e91@body)))))) bX2e75@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2e73@t))))))))) (set! bX45f5@bX2aea@let-transformer bX2aea@let-transformer) (set! bX2aec@letrec-transformer (lambda (bX2e93@e bX2e94@r bX2e95@mr) (bX2ae8@letrec-helper bX2e93@e bX2e94@r bX2e95@mr bX28b4@bX2810@build-letrec))) (set! bX45f6@bX2aec@letrec-transformer bX2aec@letrec-transformer) (set! bX2aee@letrec*-transformer (lambda (bX2e99@e bX2e9a@r bX2e9b@mr) (bX2ae8@letrec-helper bX2e99@e bX2e9a@r bX2e9b@mr bX28b7@bX2816@build-letrec*))) (set! bX45f7@bX2aee@letrec*-transformer bX2aee@letrec*-transformer) (set! bX2af0@fluid-let-syntax-transformer (lambda (bX2e9f@e bX2ea0@r bX2ea1@mr) (let ((bX2ea6@lookup '#f)) (begin (set! bX2ea6@lookup (lambda (bX2eb9@x) (or (bX2963@id->label bX2eb9@x) (bX2c34@syntax-violation '#f '"unbound identifier" bX2e9f@e bX2eb9@x)))) (let ((bX2ea7@t bX2e9f@e)) (let ((bX2ea9@ls/false (bX2b54@syntax-dispatch bX2ea7@t '(_ #(each (any any)) any . each-any)))) (if bX2ea9@ls/false (apply (lambda (bX2eab@lhs* bX2eac@rhs* bX2ead@b bX2eae@b*) (if (not (bX2955@valid-bound-ids? bX2eab@lhs*)) (bX2b0e@invalid-fmls-error bX2e9f@e bX2eab@lhs*) (let ((bX2eb3@lab* (map bX2ea6@lookup bX2eab@lhs*)) (bX2eb4@rhs* (map (lambda (bX2eb7@x) (bX2985@make-eval-transformer (bX2bae@expand-transformer bX2eb7@x bX2ea1@mr))) bX2eac@rhs*))) (bX2b8c@chi-internal (cons bX2ead@b bX2eae@b*) (append (map cons bX2eb3@lab* bX2eb4@rhs*) bX2ea0@r) (append (map cons bX2eb3@lab* bX2eb4@rhs*) bX2ea1@mr))))) bX2ea9@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ea7@t)))))))) (set! bX45f8@bX2af0@fluid-let-syntax-transformer bX2af0@fluid-let-syntax-transformer) (set! bX2af2@type-descriptor-transformer (lambda (bX2ebb@e bX2ebc@r bX2ebd@mr) (let ((bX2ec1@t bX2ebb@e)) (let ((bX2ec3@ls/false (bX2b54@syntax-dispatch bX2ec1@t '(_ any)))) (if (and bX2ec3@ls/false (apply (lambda (bX2ec5@id) (bX294d@id? bX2ec5@id)) bX2ec3@ls/false)) (apply (lambda (bX2ec7@id) (let ((bX2ec9@lab (bX2963@id->label bX2ec7@id))) (let ((bX2ecb@b (bX2965@label->binding bX2ec9@lab bX2ebc@r))) (let ((bX2ecd@type (bX2969@binding-type bX2ecb@b))) (begin (if (not bX2ec9@lab) (bX296d@raise-unbound-error bX2ec7@id) (void)) (if (not (and (eq? bX2ecd@type '$rtd) (not (list? (bX296b@binding-value bX2ecb@b))))) (bX2c34@syntax-violation '#f '"not a record type" bX2ebb@e) (void)) (list 'quote (bX296b@binding-value bX2ecb@b))))))) bX2ec3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ec1@t)))))) (set! bX45f9@bX2af2@type-descriptor-transformer bX2af2@type-descriptor-transformer) (set! bX2af4@record-type-descriptor-transformer (lambda (bX2ecf@e bX2ed0@r bX2ed1@mr) (let ((bX2ed5@t bX2ecf@e)) (let ((bX2ed7@ls/false (bX2b54@syntax-dispatch bX2ed5@t '(_ any)))) (if (and bX2ed7@ls/false (apply (lambda (bX2ed9@id) (bX294d@id? bX2ed9@id)) bX2ed7@ls/false)) (apply (lambda (bX2edb@id) (let ((bX2edd@lab (bX2963@id->label bX2edb@id))) (let ((bX2edf@b (bX2965@label->binding bX2edd@lab bX2ed0@r))) (let ((bX2ee1@type (bX2969@binding-type bX2edf@b))) (begin (if (not bX2edd@lab) (bX296d@raise-unbound-error bX2edb@id) (void)) (if (not (and (eq? bX2ee1@type '$rtd) (list? (bX296b@binding-value bX2edf@b)))) (bX2c34@syntax-violation '#f '"not a record type" bX2ecf@e) (void)) (bX2b76@chi-expr (car (bX296b@binding-value bX2edf@b)) bX2ed0@r bX2ed1@mr)))))) bX2ed7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ed5@t)))))) (set! bX45fa@bX2af4@record-type-descriptor-transformer bX2af4@record-type-descriptor-transformer) (set! bX2af6@record-constructor-descriptor-transformer (lambda (bX2ee3@e bX2ee4@r bX2ee5@mr) (let ((bX2ee9@t bX2ee3@e)) (let ((bX2eeb@ls/false (bX2b54@syntax-dispatch bX2ee9@t '(_ any)))) (if (and bX2eeb@ls/false (apply (lambda (bX2eed@id) (bX294d@id? bX2eed@id)) bX2eeb@ls/false)) (apply (lambda (bX2eef@id) (let ((bX2ef1@lab (bX2963@id->label bX2eef@id))) (let ((bX2ef3@b (bX2965@label->binding bX2ef1@lab bX2ee4@r))) (let ((bX2ef5@type (bX2969@binding-type bX2ef3@b))) (begin (if (not bX2ef1@lab) (bX296d@raise-unbound-error bX2eef@id) (void)) (if (not (and (eq? bX2ef5@type '$rtd) (list? (bX296b@binding-value bX2ef3@b)))) (bX2c34@syntax-violation '#f '"invalid type" bX2ee3@e) (void)) (bX2b76@chi-expr (cadr (bX296b@binding-value bX2ef3@b)) bX2ee4@r bX2ee5@mr)))))) bX2eeb@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ee9@t)))))) (set! bX45fb@bX2af6@record-constructor-descriptor-transformer bX2af6@record-constructor-descriptor-transformer) (set! bX2af8@when-macro (lambda (bX2ef7@e) (let ((bX2ef9@t bX2ef7@e)) (let ((bX2efb@ls/false (bX2b54@syntax-dispatch bX2ef9@t '(_ any any . each-any)))) (if bX2efb@ls/false (apply (lambda (bX2efd@test bX2efe@e bX2eff@e*) (bX2b0a@bless (list 'if bX2efd@test (cons 'begin (cons bX2efe@e bX2eff@e*))))) bX2efb@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ef9@t)))))) (set! bX45fc@bX2af8@when-macro bX2af8@when-macro) (set! bX2afa@unless-macro (lambda (bX2f03@e) (let ((bX2f05@t bX2f03@e)) (let ((bX2f07@ls/false (bX2b54@syntax-dispatch bX2f05@t '(_ any any . each-any)))) (if bX2f07@ls/false (apply (lambda (bX2f09@test bX2f0a@e bX2f0b@e*) (bX2b0a@bless (list 'if (list 'not bX2f09@test) (cons 'begin (cons bX2f0a@e bX2f0b@e*))))) bX2f07@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f05@t)))))) (set! bX45fd@bX2afa@unless-macro bX2afa@unless-macro) (set! bX2afc@if-transformer (lambda (bX2f0f@e bX2f10@r bX2f11@mr) (let ((bX2f15@t bX2f0f@e)) (let ((bX2f17@ls/false (bX2b54@syntax-dispatch bX2f15@t '(_ any any any)))) (if bX2f17@ls/false (apply (lambda (bX2f19@e0 bX2f1a@e1 bX2f1b@e2) (list 'if (bX2b76@chi-expr bX2f19@e0 bX2f10@r bX2f11@mr) (bX2b76@chi-expr bX2f1a@e1 bX2f10@r bX2f11@mr) (bX2b76@chi-expr bX2f1b@e2 bX2f10@r bX2f11@mr))) bX2f17@ls/false) (let ((bX2f1f@t bX2f15@t)) (let ((bX2f21@ls/false (bX2b54@syntax-dispatch bX2f1f@t '(_ any any)))) (if bX2f21@ls/false (apply (lambda (bX2f23@e0 bX2f24@e1) (list 'if (bX2b76@chi-expr bX2f23@e0 bX2f10@r bX2f11@mr) (bX2b76@chi-expr bX2f24@e1 bX2f10@r bX2f11@mr) (bX28b3@bX280e@build-void))) bX2f21@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f1f@t))))))))) (set! bX45fe@bX2afc@if-transformer bX2afc@if-transformer) (set! bX2afe@and-transformer (lambda (bX2f27@e bX2f28@r bX2f29@mr) (let ((bX2f2d@t bX2f27@e)) (let ((bX2f2f@ls/false (bX2b54@syntax-dispatch bX2f2d@t '(_ . each-any)))) (if bX2f2f@ls/false (apply (lambda (bX2f31@e*) (cons 'and (bX2b72@chi-expr* bX2f31@e* bX2f28@r bX2f29@mr))) bX2f2f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f2d@t)))))) (set! bX45ff@bX2afe@and-transformer bX2afe@and-transformer) (set! bX2b00@or-transformer (lambda (bX2f33@e bX2f34@r bX2f35@mr) (let ((bX2f39@t bX2f33@e)) (let ((bX2f3b@ls/false (bX2b54@syntax-dispatch bX2f39@t '(_ . each-any)))) (if bX2f3b@ls/false (apply (lambda (bX2f3d@e*) (cons 'or (bX2b72@chi-expr* bX2f3d@e* bX2f34@r bX2f35@mr))) bX2f3b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f39@t)))))) (set! bX4600@bX2b00@or-transformer bX2b00@or-transformer) (set! bX2b02@case-macro (lambda (bX2f3f@e) (let ((bX2f42@build-last '#f) (bX2f44@build-one '#f)) (begin (set! bX2f42@build-last (lambda (bX2f69@cls) (let ((bX2f6b@t bX2f69@cls)) (let ((bX2f6d@ls/false (bX2b54@syntax-dispatch bX2f6b@t '(#(scheme-id else) any . each-any)))) (if bX2f6d@ls/false (apply (lambda (bX2f6f@e bX2f70@e*) (cons 'begin (cons bX2f6f@e bX2f70@e*))) bX2f6d@ls/false) (let ((bX2f73@t bX2f6b@t)) (let ((bX2f75@ls/false (bX2b54@syntax-dispatch bX2f73@t '_))) (if bX2f75@ls/false (apply (lambda () (bX2f44@build-one bX2f69@cls '(if #f #f))) bX2f75@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f73@t))))))))) (set! bX2f44@build-one (lambda (bX2f5b@cls bX2f5c@k) (let ((bX2f5f@t bX2f5b@cls)) (let ((bX2f61@ls/false (bX2b54@syntax-dispatch bX2f5f@t '(each-any any . each-any)))) (if bX2f61@ls/false (apply (lambda (bX2f63@d* bX2f64@e bX2f65@e*) (list 'if (list 'memv 't (list 'quote bX2f63@d*)) (cons 'begin (cons bX2f64@e bX2f65@e*)) bX2f5c@k)) bX2f61@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f5f@t)))))) (let ((bX2f45@t bX2f3f@e)) (let ((bX2f47@ls/false (bX2b54@syntax-dispatch bX2f45@t '(_ any)))) (if bX2f47@ls/false (apply (lambda (bX2f49@expr) (bX2b0a@bless (cons 'let (cons (list (list 't bX2f49@expr)) '((if #f #f)))))) bX2f47@ls/false) (let ((bX2f4b@t bX2f45@t)) (let ((bX2f4d@ls/false (bX2b54@syntax-dispatch bX2f4b@t '(_ any any . each-any)))) (if bX2f4d@ls/false (apply (lambda (bX2f4f@expr bX2f50@cls bX2f51@cls*) (bX2b0a@bless (list 'let (list (list 't bX2f4f@expr)) (let bX2f59@f ((bX2f55@cls bX2f50@cls) (bX2f56@cls* bX2f51@cls*)) (if (null? bX2f56@cls*) (bX2f42@build-last bX2f55@cls) (bX2f44@build-one bX2f55@cls (bX2f59@f (car bX2f56@cls*) (cdr bX2f56@cls*)))))))) bX2f4d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f4b@t))))))))))) (set! bX4601@bX2b02@case-macro bX2b02@case-macro) (set! bX2b04@quote-transformer (lambda (bX2f77@e bX2f78@r bX2f79@mr) (let ((bX2f7d@t bX2f77@e)) (let ((bX2f7f@ls/false (bX2b54@syntax-dispatch bX2f7d@t '(_ any)))) (if bX2f7f@ls/false (apply (lambda (bX2f81@datum) (list 'quote (bX2961@stx->datum bX2f81@datum))) bX2f7f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f7d@t)))))) (set! bX4602@bX2b04@quote-transformer bX2b04@quote-transformer) (set! bX2b06@case-lambda-transformer (lambda (bX2f83@e bX2f84@r bX2f85@mr) (let ((bX2f89@t bX2f83@e)) (let ((bX2f8b@ls/false (bX2b54@syntax-dispatch bX2f89@t '(_ . #(each (any any . each-any)))))) (if bX2f8b@ls/false (apply (lambda (bX2f8d@fmls* bX2f8e@b* bX2f8f@b**) (call-with-values (lambda () (bX2b7e@chi-lambda-clause* bX2f83@e bX2f8d@fmls* (map cons bX2f8e@b* bX2f8f@b**) bX2f84@r bX2f85@mr)) (lambda (bX2f97@bX2f94 bX2f98@bX2f96) (let ((bX2f9b@body* bX2f98@bX2f96) (bX2f9c@fmls* bX2f97@bX2f94)) (bX28b1@bX27de@build-case-lambda '#f bX2f9c@fmls* bX2f9b@body*))))) bX2f8b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2f89@t)))))) (set! bX4603@bX2b06@case-lambda-transformer bX2b06@case-lambda-transformer) (set! bX2b08@lambda-transformer (lambda (bX2f9f@e bX2fa0@r bX2fa1@mr) (let ((bX2fa5@t bX2f9f@e)) (let ((bX2fa7@ls/false (bX2b54@syntax-dispatch bX2fa5@t '(_ any any . each-any)))) (if bX2fa7@ls/false (apply (lambda (bX2fa9@fmls bX2faa@b bX2fab@b*) (call-with-values (lambda () (bX2b7c@chi-lambda-clause bX2f9f@e bX2fa9@fmls (cons bX2faa@b bX2fab@b*) bX2fa0@r bX2fa1@mr)) (lambda (bX2fb3@bX2fb0 bX2fb4@bX2fb2) (let ((bX2fb7@body bX2fb4@bX2fb2) (bX2fb8@fmls bX2fb3@bX2fb0)) (bX28b0@bX27dc@build-lambda '#f bX2fb8@fmls bX2fb7@body))))) bX2fa7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2fa5@t)))))) (set! bX4604@bX2b08@lambda-transformer bX2b08@lambda-transformer) (set! bX2b0a@bless (lambda (bX2fbb@x) (bX2935@mkstx (let bX2fbf@f ((bX2fbd@x bX2fbb@x)) (if (bX2919@stx? bX2fbd@x) bX2fbd@x (if (pair? bX2fbd@x) (cons (bX2fbf@f (car bX2fbd@x)) (bX2fbf@f (cdr bX2fbd@x))) (if (symbol? bX2fbd@x) (bX2adc@scheme-stx bX2fbd@x) (if (vector? bX2fbd@x) (vector-map bX2fbf@f bX2fbd@x) bX2fbd@x))))) '() '() '()))) (set! bX4605@bX2b0a@bless bX2b0a@bless) (set! bX2b0c@with-syntax-macro (lambda (bX2fc1@e) (let ((bX2fc3@t bX2fc1@e)) (let ((bX2fc5@ls/false (bX2b54@syntax-dispatch bX2fc3@t '(_ #(each (any any)) any . each-any)))) (if bX2fc5@ls/false (apply (lambda (bX2fc7@pat* bX2fc8@expr* bX2fc9@b bX2fca@b*) (let ((bX2fcf@idn* (let bX2fd3@f ((bX2fd1@pat* bX2fc7@pat*)) (if (null? bX2fd1@pat*) '() (call-with-values (lambda () (bX2b52@convert-pattern (car bX2fd1@pat*) '())) (lambda (bX2fd9@bX2fd6 bX2fda@bX2fd8) (let ((bX2fdd@idn* bX2fda@bX2fd8) (bX2fde@pat bX2fd9@bX2fd6)) (append bX2fdd@idn* (bX2fd3@f (cdr bX2fd1@pat*)))))))))) (begin (bX2b7a@verify-formals (map car bX2fcf@idn*) bX2fc1@e) (let ((bX2fe1@t* (bX2c22@generate-temporaries bX2fc8@expr*))) (bX2b0a@bless (list 'let (map list bX2fe1@t* bX2fc8@expr*) (let bX2fe7@f ((bX2fe3@pat* bX2fc7@pat*) (bX2fe4@t* bX2fe1@t*)) (if (null? bX2fe3@pat*) (cons 'begin (cons '#f (cons bX2fc9@b bX2fca@b*))) (list 'syntax-case (car bX2fe4@t*) '() (list (car bX2fe3@pat*) (bX2fe7@f (cdr bX2fe3@pat*) (cdr bX2fe4@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bX2fe3@pat*)) (car bX2fe4@t*)))))))))))) bX2fc5@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2fc3@t)))))) (set! bX4606@bX2b0c@with-syntax-macro bX2b0c@with-syntax-macro) (set! bX2b0e@invalid-fmls-error (lambda (bX2fe9@stx bX2fea@fmls) (let ((bX2fed@t bX2fea@fmls)) (let ((bX2fef@ls/false (bX2b54@syntax-dispatch bX2fed@t '#(each+ any () any)))) (if bX2fef@ls/false (apply (lambda (bX2ff1@id* bX2ff2@last) (let bX2ff7@f ((bX2ff5@id* (if (bX294d@id? bX2ff2@last) (cons bX2ff2@last bX2ff1@id*) (if (bX2943@syntax-null? bX2ff2@last) bX2ff1@id* (bX2c34@syntax-violation '#f '"not an identifier" bX2fe9@stx bX2ff2@last))))) (if (null? bX2ff5@id*) (values) (if (not (bX294d@id? (car bX2ff5@id*))) (bX2c34@syntax-violation '#f '"not an identifier" bX2fe9@stx (car bX2ff5@id*)) (begin (bX2ff7@f (cdr bX2ff5@id*)) (if (bX2959@bound-id-member? (car bX2ff5@id*) (cdr bX2ff5@id*)) (bX2c34@syntax-violation '#f '"duplicate binding" bX2fe9@stx (car bX2ff5@id*)) (void))))))) bX2fef@ls/false) (let ((bX2ff9@t bX2fed@t)) (let ((bX2ffb@ls/false (bX2b54@syntax-dispatch bX2ff9@t '_))) (if bX2ffb@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"malformed binding form" bX2fe9@stx bX2fea@fmls)) bX2ffb@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX2ff9@t))))))))) (set! bX4607@bX2b0e@invalid-fmls-error bX2b0e@invalid-fmls-error) (set! bX2b10@let-macro (lambda (bX2ffd@stx) (let ((bX2fff@t bX2ffd@stx)) (let ((bX3001@ls/false (bX2b54@syntax-dispatch bX2fff@t '(_ #(each (any any)) any . each-any)))) (if bX3001@ls/false (apply (lambda (bX3003@lhs* bX3004@rhs* bX3005@b bX3006@b*) (if (bX2955@valid-bound-ids? bX3003@lhs*) (bX2b0a@bless (cons (cons 'lambda (cons bX3003@lhs* (cons bX3005@b bX3006@b*))) bX3004@rhs*)) (bX2b0e@invalid-fmls-error bX2ffd@stx bX3003@lhs*))) bX3001@ls/false) (let ((bX300b@t bX2fff@t)) (let ((bX300d@ls/false (bX2b54@syntax-dispatch bX300b@t '(_ any #(each (any any)) any . each-any)))) (if (and bX300d@ls/false (apply (lambda (bX300f@f bX3010@lhs* bX3011@rhs* bX3012@b bX3013@b*) (bX294d@id? bX300f@f)) bX300d@ls/false)) (apply (lambda (bX3019@f bX301a@lhs* bX301b@rhs* bX301c@b bX301d@b*) (if (bX2955@valid-bound-ids? bX301a@lhs*) (bX2b0a@bless (cons (list 'letrec (list (list bX3019@f (cons 'lambda (cons bX301a@lhs* (cons bX301c@b bX301d@b*))))) bX3019@f) bX301b@rhs*)) (bX2b0e@invalid-fmls-error bX2ffd@stx bX301a@lhs*))) bX300d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX300b@t))))))))) (set! bX4608@bX2b10@let-macro bX2b10@let-macro) (set! bX2b12@let-values-macro (lambda (bX3023@stx) (let ((bX3026@rename '#f) (bX3028@rename* '#f)) (begin (set! bX3026@rename (lambda (bX308b@x bX308c@old* bX308d@new*) (begin (if (not (bX294d@id? bX308b@x)) (bX2c34@syntax-violation '#f '"not an indentifier" bX3023@stx bX308b@x) (void)) (if (bX2959@bound-id-member? bX308b@x bX308c@old*) (bX2c34@syntax-violation '#f '"duplicate binding" bX3023@stx bX308b@x) (void)) (let ((bX3091@y (gensym (bX2c3a@syntax->datum bX308b@x)))) (values bX3091@y (cons bX308b@x bX308c@old*) (cons bX3091@y bX308d@new*)))))) (set! bX3028@rename* (lambda (bX3079@x* bX307a@old* bX307b@new*) (if (null? bX3079@x*) (values '() bX307a@old* bX307b@new*) (call-with-values (lambda () (bX3026@rename (car bX3079@x*) bX307a@old* bX307b@new*)) (lambda (bX307f@x bX3080@old* bX3081@new*) (call-with-values (lambda () (bX3028@rename* (cdr bX3079@x*) bX3080@old* bX3081@new*)) (lambda (bX3085@x* bX3086@old* bX3087@new*) (values (cons bX307f@x bX3085@x*) bX3086@old* bX3087@new*)))))))) (let ((bX3029@t bX3023@stx)) (let ((bX302b@ls/false (bX2b54@syntax-dispatch bX3029@t '(_ () any . each-any)))) (if bX302b@ls/false (apply (lambda (bX302d@b bX302e@b*) (cons* (bX2b0a@bless 'let) '() bX302d@b bX302e@b*)) bX302b@ls/false) (let ((bX3031@t bX3029@t)) (let ((bX3033@ls/false (bX2b54@syntax-dispatch bX3031@t '(_ #(each (any any)) any . each-any)))) (if bX3033@ls/false (apply (lambda (bX3035@lhs* bX3036@rhs* bX3037@b bX3038@b*) (bX2b0a@bless (let bX3045@f ((bX303d@lhs* bX3035@lhs*) (bX303e@rhs* bX3036@rhs*) (bX303f@old* '()) (bX3040@new* '())) (if (null? bX303d@lhs*) (cons 'let (cons (map list bX303f@old* bX3040@new*) (cons bX3037@b bX3038@b*))) (let ((bX3047@t (car bX303d@lhs*))) (let ((bX3049@ls/false (bX2b54@syntax-dispatch bX3047@t 'each-any))) (if bX3049@ls/false (apply (lambda (bX304b@x*) (call-with-values (lambda () (bX3028@rename* bX304b@x* bX303f@old* bX3040@new*)) (lambda (bX3053@bX304e bX3054@bX3050 bX3055@bX3052) (let ((bX3059@new* bX3055@bX3052) (bX305a@old* bX3054@bX3050) (bX305b@y* bX3053@bX304e)) (list 'call-with-values (list 'lambda '() (car bX303e@rhs*)) (list 'lambda bX305b@y* (bX3045@f (cdr bX303d@lhs*) (cdr bX303e@rhs*) bX305a@old* bX3059@new*))))))) bX3049@ls/false) (let ((bX305f@t bX3047@t)) (let ((bX3061@ls/false (bX2b54@syntax-dispatch bX305f@t '#(each+ any () any)))) (if bX3061@ls/false (apply (lambda (bX3063@x* bX3064@x) (call-with-values (lambda () (bX3026@rename bX3064@x bX303f@old* bX3040@new*)) (lambda (bX3067@y bX3068@old* bX3069@new*) (call-with-values (lambda () (bX3028@rename* bX3063@x* bX3068@old* bX3069@new*)) (lambda (bX306d@y* bX306e@old* bX306f@new*) (list 'call-with-values (list 'lambda '() (car bX303e@rhs*)) (list 'lambda (append bX306d@y* bX3067@y) (bX3045@f (cdr bX303d@lhs*) (cdr bX303e@rhs*) bX306e@old* bX306f@new*)))))))) bX3061@ls/false) (let ((bX3073@t bX305f@t)) (let ((bX3075@ls/false (bX2b54@syntax-dispatch bX3073@t 'any))) (if bX3075@ls/false (apply (lambda (bX3077@others) (bX2c34@syntax-violation '#f '"malformed bindings" bX3023@stx bX3077@others)) bX3075@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3073@t)))))))))))))) bX3033@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3031@t))))))))))) (set! bX4609@bX2b12@let-values-macro bX2b12@let-values-macro) (set! bX2b14@let*-values-macro (lambda (bX3093@stx) (let ((bX3096@check '#f)) (begin (set! bX3096@check (lambda (bX30c5@x*) (if (not (null? bX30c5@x*)) (let ((bX30c7@x (car bX30c5@x*))) (begin (if (not (bX294d@id? bX30c7@x)) (bX2c34@syntax-violation '#f '"not an identifier" bX3093@stx bX30c7@x) (void)) (bX3096@check (cdr bX30c5@x*)) (if (bX2959@bound-id-member? bX30c7@x (cdr bX30c5@x*)) (bX2c34@syntax-violation '#f '"duplicate identifier" bX3093@stx bX30c7@x) (void)))) (void)))) (let ((bX3097@t bX3093@stx)) (let ((bX3099@ls/false (bX2b54@syntax-dispatch bX3097@t '(_ () any . each-any)))) (if bX3099@ls/false (apply (lambda (bX309b@b bX309c@b*) (cons* (bX2b0a@bless 'let) '() bX309b@b bX309c@b*)) bX3099@ls/false) (let ((bX309f@t bX3097@t)) (let ((bX30a1@ls/false (bX2b54@syntax-dispatch bX309f@t '(_ #(each (any any)) any . each-any)))) (if bX30a1@ls/false (apply (lambda (bX30a3@lhs* bX30a4@rhs* bX30a5@b bX30a6@b*) (bX2b0a@bless (let bX30af@f ((bX30ab@lhs* bX30a3@lhs*) (bX30ac@rhs* bX30a4@rhs*)) (if (null? bX30ab@lhs*) (cons 'begin (cons bX30a5@b bX30a6@b*)) (let ((bX30b1@t (car bX30ab@lhs*))) (let ((bX30b3@ls/false (bX2b54@syntax-dispatch bX30b1@t 'each-any))) (if bX30b3@ls/false (apply (lambda (bX30b5@x*) (begin (bX3096@check bX30b5@x*) (list 'call-with-values (list 'lambda '() (car bX30ac@rhs*)) (list 'lambda bX30b5@x* (bX30af@f (cdr bX30ab@lhs*) (cdr bX30ac@rhs*)))))) bX30b3@ls/false) (let ((bX30b7@t bX30b1@t)) (let ((bX30b9@ls/false (bX2b54@syntax-dispatch bX30b7@t '#(each+ any () any)))) (if bX30b9@ls/false (apply (lambda (bX30bb@x* bX30bc@x) (begin (bX3096@check (cons bX30bc@x bX30bb@x*)) (list 'call-with-values (list 'lambda '() (car bX30ac@rhs*)) (list 'lambda (append bX30bb@x* bX30bc@x) (bX30af@f (cdr bX30ab@lhs*) (cdr bX30ac@rhs*)))))) bX30b9@ls/false) (let ((bX30bf@t bX30b7@t)) (let ((bX30c1@ls/false (bX2b54@syntax-dispatch bX30bf@t 'any))) (if bX30c1@ls/false (apply (lambda (bX30c3@others) (bX2c34@syntax-violation '#f '"malformed bindings" bX3093@stx bX30c3@others)) bX30c1@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX30bf@t)))))))))))))) bX30a1@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX309f@t))))))))))) (set! bX460a@bX2b14@let*-values-macro bX2b14@let*-values-macro) (set! bX2b16@trace-lambda-macro (lambda (bX30c9@stx) (let ((bX30cb@t bX30c9@stx)) (let ((bX30cd@ls/false (bX2b54@syntax-dispatch bX30cb@t '(_ any each-any any . each-any)))) (if bX30cd@ls/false (apply (lambda (bX30cf@who bX30d0@fmls bX30d1@b bX30d2@b*) (if (bX2955@valid-bound-ids? bX30d0@fmls) (bX2b0a@bless (list 'make-traced-procedure (list 'quote bX30cf@who) (cons 'lambda (cons bX30d0@fmls (cons bX30d1@b bX30d2@b*))))) (bX2b0e@invalid-fmls-error bX30c9@stx bX30d0@fmls))) bX30cd@ls/false) (let ((bX30d7@t bX30cb@t)) (let ((bX30d9@ls/false (bX2b54@syntax-dispatch bX30d7@t '(_ any #(each+ any () any) any . each-any)))) (if bX30d9@ls/false (apply (lambda (bX30db@who bX30dc@fmls bX30dd@last bX30de@b bX30df@b*) (if (bX2955@valid-bound-ids? (cons bX30dd@last bX30dc@fmls)) (bX2b0a@bless (list 'make-traced-procedure (list 'quote bX30db@who) (cons 'lambda (cons (append bX30dc@fmls bX30dd@last) (cons bX30de@b bX30df@b*))))) (bX2b0e@invalid-fmls-error bX30c9@stx (append bX30dc@fmls bX30dd@last)))) bX30d9@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX30d7@t))))))))) (set! bX460b@bX2b16@trace-lambda-macro bX2b16@trace-lambda-macro) (set! bX2b18@trace-define-macro (lambda (bX30e5@stx) (let ((bX30e7@t bX30e5@stx)) (let ((bX30e9@ls/false (bX2b54@syntax-dispatch bX30e7@t '(_ (any . each-any) any . each-any)))) (if bX30e9@ls/false (apply (lambda (bX30eb@who bX30ec@fmls bX30ed@b bX30ee@b*) (if (bX2955@valid-bound-ids? bX30ec@fmls) (bX2b0a@bless (list 'define bX30eb@who (list 'make-traced-procedure (list 'quote bX30eb@who) (cons 'lambda (cons bX30ec@fmls (cons bX30ed@b bX30ee@b*)))))) (bX2b0e@invalid-fmls-error bX30e5@stx bX30ec@fmls))) bX30e9@ls/false) (let ((bX30f3@t bX30e7@t)) (let ((bX30f5@ls/false (bX2b54@syntax-dispatch bX30f3@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bX30f5@ls/false (apply (lambda (bX30f7@who bX30f8@fmls bX30f9@last bX30fa@b bX30fb@b*) (if (bX2955@valid-bound-ids? (cons bX30f9@last bX30f8@fmls)) (bX2b0a@bless (list 'define bX30f7@who (list 'make-traced-procedure (list 'quote bX30f7@who) (cons 'lambda (cons (append bX30f8@fmls bX30f9@last) (cons bX30fa@b bX30fb@b*)))))) (bX2b0e@invalid-fmls-error bX30e5@stx (append bX30f8@fmls bX30f9@last)))) bX30f5@ls/false) (let ((bX3101@t bX30f3@t)) (let ((bX3103@ls/false (bX2b54@syntax-dispatch bX3101@t '(_ any any)))) (if bX3103@ls/false (apply (lambda (bX3105@who bX3106@expr) (if (bX294d@id? bX3105@who) (bX2b0a@bless (list 'define bX3105@who (list 'let (list (list 'v bX3106@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bX3105@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bX2c34@syntax-violation '#f '"invalid name" bX30e5@stx))) bX3103@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3101@t)))))))))))) (set! bX460c@bX2b18@trace-define-macro bX2b18@trace-define-macro) (set! bX2b1a@trace-define-syntax-macro (lambda (bX3109@stx) (let ((bX310b@t bX3109@stx)) (let ((bX310d@ls/false (bX2b54@syntax-dispatch bX310b@t '(_ any any)))) (if bX310d@ls/false (apply (lambda (bX310f@who bX3110@expr) (if (bX294d@id? bX310f@who) (bX2b0a@bless (list 'define-syntax bX310f@who (list 'make-traced-macro (list 'quote bX310f@who) bX3110@expr))) (bX2c34@syntax-violation '#f '"invalid name" bX3109@stx))) bX310d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX310b@t)))))) (set! bX460d@bX2b1a@trace-define-syntax-macro bX2b1a@trace-define-syntax-macro) (set! bX2b1c@trace-let/rec-syntax (lambda (bX3113@who) (lambda (bX3115@stx) (let ((bX3117@t bX3115@stx)) (let ((bX3119@ls/false (bX2b54@syntax-dispatch bX3117@t '(_ #(each (any any)) any . each-any)))) (if bX3119@ls/false (apply (lambda (bX311b@lhs* bX311c@rhs* bX311d@b bX311e@b*) (if (bX2955@valid-bound-ids? bX311b@lhs*) (let ((bX3123@rhs* (map (lambda (bX3125@lhs bX3126@rhs) (list 'make-traced-macro (list 'quote bX3125@lhs) bX3126@rhs)) bX311b@lhs* bX311c@rhs*))) (bX2b0a@bless (cons bX3113@who (cons (map list bX311b@lhs* bX3123@rhs*) (cons bX311d@b bX311e@b*))))) (bX2b0e@invalid-fmls-error bX3115@stx bX311b@lhs*))) bX3119@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3117@t))))))) (set! bX460e@bX2b1c@trace-let/rec-syntax bX2b1c@trace-let/rec-syntax) (set! bX2b1e@trace-let-syntax-macro (bX2b1c@trace-let/rec-syntax 'let-syntax)) (set! bX460f@bX2b1e@trace-let-syntax-macro bX2b1e@trace-let-syntax-macro) (set! bX2b20@trace-letrec-syntax-macro (bX2b1c@trace-let/rec-syntax 'letrec-syntax)) (set! bX4610@bX2b20@trace-letrec-syntax-macro bX2b20@trace-letrec-syntax-macro) (set! bX2b22@guard-macro (lambda (bX3129@x) (let ((bX312c@gen-clauses '#f)) (begin (set! bX312c@gen-clauses (lambda (bX3143@con bX3144@outerk bX3145@clause*) (let ((bX314a@f '#f) (bX314c@f* '#f)) (begin (set! bX314a@f (lambda (bX3183@x bX3184@k) (let ((bX3187@t bX3183@x)) (let ((bX3189@ls/false (bX2b54@syntax-dispatch bX3187@t '(any #(scheme-id =>) any)))) (if bX3189@ls/false (apply (lambda (bX318b@e bX318c@p) (let ((bX318f@t (gensym))) (list 'let (list (list bX318f@t bX318b@e)) (list 'if bX318f@t (list bX318c@p bX318f@t) bX3184@k)))) bX3189@ls/false) (let ((bX3191@t bX3187@t)) (let ((bX3193@ls/false (bX2b54@syntax-dispatch bX3191@t '(any)))) (if bX3193@ls/false (apply (lambda (bX3195@e) (let ((bX3197@t (gensym))) (list 'let (list (list bX3197@t bX3195@e)) (list 'if bX3197@t bX3197@t bX3184@k)))) bX3193@ls/false) (let ((bX3199@t bX3191@t)) (let ((bX319b@ls/false (bX2b54@syntax-dispatch bX3199@t '(any any . each-any)))) (if bX319b@ls/false (apply (lambda (bX319d@e bX319e@v bX319f@v*) (list 'if bX319d@e (cons 'begin (cons bX319e@v bX319f@v*)) bX3184@k)) bX319b@ls/false) (let ((bX31a3@t bX3199@t)) (let ((bX31a5@ls/false (bX2b54@syntax-dispatch bX31a3@t '_))) (if bX31a5@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid guard clause" bX3183@x)) bX31a5@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31a3@t))))))))))))))) (set! bX314c@f* (lambda (bX3159@x*) (let ((bX315b@t bX3159@x*)) (let ((bX315d@ls/false (bX2b54@syntax-dispatch bX315b@t '()))) (if bX315d@ls/false (apply (lambda () (let ((bX315f@g (gensym))) (values (list bX315f@g (list 'lambda '() (list 'raise-continuable bX3143@con))) bX315f@g))) bX315d@ls/false) (let ((bX3161@t bX315b@t)) (let ((bX3163@ls/false (bX2b54@syntax-dispatch bX3161@t '((#(scheme-id else) any . each-any))))) (if bX3163@ls/false (apply (lambda (bX3165@e bX3166@e*) (values (cons 'begin (cons bX3165@e bX3166@e*)) '#f)) bX3163@ls/false) (let ((bX3169@t bX3161@t)) (let ((bX316b@ls/false (bX2b54@syntax-dispatch bX3169@t '(any . any)))) (if bX316b@ls/false (apply (lambda (bX316d@cls bX316e@cls*) (call-with-values (lambda () (bX314c@f* bX316e@cls*)) (lambda (bX3175@bX3172 bX3176@bX3174) (let ((bX3179@g bX3176@bX3174) (bX317a@e bX3175@bX3172)) (values (bX314a@f bX316d@cls bX317a@e) bX3179@g))))) bX316b@ls/false) (let ((bX317d@t bX3169@t)) (let ((bX317f@ls/false (bX2b54@syntax-dispatch bX317d@t 'any))) (if bX317f@ls/false (apply (lambda (bX3181@others) (bX2c34@syntax-violation '#f '"invalid guard clause" bX3181@others)) bX317f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX317d@t))))))))))))))) (call-with-values (lambda () (bX314c@f* bX3145@clause*)) (lambda (bX3151@bX314e bX3152@bX3150) (let ((bX3155@raisek bX3152@bX3150) (bX3156@code bX3151@bX314e)) (if bX3155@raisek (list (list 'call/cc (list 'lambda (list bX3155@raisek) (list bX3144@outerk (list 'lambda '() bX3156@code))))) (list bX3144@outerk (list 'lambda '() bX3156@code)))))))))) (let ((bX312d@t bX3129@x)) (let ((bX312f@ls/false (bX2b54@syntax-dispatch bX312d@t '(_ (any . each-any) any . each-any)))) (if (and bX312f@ls/false (apply (lambda (bX3131@con bX3132@clause* bX3133@b bX3134@b*) (bX294d@id? bX3131@con)) bX312f@ls/false)) (apply (lambda (bX3139@con bX313a@clause* bX313b@b bX313c@b*) (let ((bX3141@outerk (gensym))) (bX2b0a@bless (list (list 'call/cc (list 'lambda (list bX3141@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bX3139@con) (bX312c@gen-clauses bX3139@con bX3141@outerk bX313a@clause*)) (cons 'lambda (cons '() (cons bX313b@b bX313c@b*))))))))))) bX312f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX312d@t)))))))) (set! bX4611@bX2b22@guard-macro bX2b22@guard-macro) (set! bX2b24@define-enumeration-macro (lambda (bX31a7@stx) (let ((bX31aa@set? '#f) (bX31ac@remove-dups '#f)) (begin (set! bX31aa@set? (lambda (bX31c3@x) (or (null? bX31c3@x) (and (not (memq (car bX31c3@x) (cdr bX31c3@x))) (bX31aa@set? (cdr bX31c3@x)))))) (set! bX31ac@remove-dups (lambda (bX31c1@ls) (if (null? bX31c1@ls) '() (cons (car bX31c1@ls) (bX31ac@remove-dups (remq (car bX31c1@ls) (cdr bX31c1@ls))))))) (let ((bX31ad@t bX31a7@stx)) (let ((bX31af@ls/false (bX2b54@syntax-dispatch bX31ad@t '(_ any each-any any)))) (if (and bX31af@ls/false (apply (lambda (bX31b1@name bX31b2@id* bX31b3@maker) (and (bX294d@id? bX31b1@name) (bX294d@id? bX31b3@maker) (for-all bX294d@id? bX31b2@id*))) bX31af@ls/false)) (apply (lambda (bX31b7@name bX31b8@id* bX31b9@maker) (let ((bX31bd@name* (bX31ac@remove-dups (bX2c3a@syntax->datum bX31b8@id*))) (bX31be@mk (gensym))) (bX2b0a@bless (list 'begin (list 'define bX31be@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bX31bd@name*)))) (list 'define-syntax bX31b7@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bX31bd@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bX31b7@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bX31b9@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bX31b9@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bX31bd@name*)) (cons 'syntax-violation (cons (list 'quote bX31b9@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bX31be@mk '('(n* ...))))))))))))) bX31af@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31ad@t)))))))) (set! bX4612@bX2b24@define-enumeration-macro bX2b24@define-enumeration-macro) (set! bX2b26@time-macro (lambda (bX31c5@stx) (let ((bX31c7@t bX31c5@stx)) (let ((bX31c9@ls/false (bX2b54@syntax-dispatch bX31c7@t '(_ any)))) (if bX31c9@ls/false (apply (lambda (bX31cb@expr) (bX2b0a@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bX31cb@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bX31c9@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31c7@t)))))) (set! bX4613@bX2b26@time-macro bX2b26@time-macro) (set! bX2b28@delay-macro (lambda (bX31cd@stx) (let ((bX31cf@t bX31cd@stx)) (let ((bX31d1@ls/false (bX2b54@syntax-dispatch bX31cf@t '(_ any)))) (if bX31d1@ls/false (apply (lambda (bX31d3@expr) (bX2b0a@bless (list 'make-promise (list 'lambda '() bX31d3@expr)))) bX31d1@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31cf@t)))))) (set! bX4614@bX2b28@delay-macro bX2b28@delay-macro) (set! bX2b2a@assert-macro (lambda (bX31d5@stx) (let ((bX31d7@t bX31d5@stx)) (let ((bX31d9@ls/false (bX2b54@syntax-dispatch bX31d7@t '(_ any)))) (if bX31d9@ls/false (apply (lambda (bX31db@expr) (let ((bX31dd@pos (or (bX2c2c@expression-position bX31d5@stx) (bX2c2c@expression-position bX31db@expr)))) (bX2b0a@bless (list 'unless bX31db@expr (list 'assertion-error (list 'quote bX31db@expr) (list 'quote bX31dd@pos)))))) bX31d9@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31d7@t)))))) (set! bX4615@bX2b2a@assert-macro bX2b2a@assert-macro) (set! bX2b2c@endianness-macro (lambda (bX31df@stx) (let ((bX31e1@t bX31df@stx)) (let ((bX31e3@ls/false (bX2b54@syntax-dispatch bX31e1@t '(_ any)))) (if bX31e3@ls/false (apply (lambda (bX31e5@e) (let ((bX31e7@t (bX2c3a@syntax->datum bX31e5@e))) (if (memv bX31e7@t '(little)) (bX2b0a@bless ''little) (if (memv bX31e7@t '(big)) (bX2b0a@bless ''big) (bX2c34@syntax-violation '#f '"endianness must be big or little" bX31df@stx))))) bX31e3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31e1@t)))))) (set! bX4616@bX2b2c@endianness-macro bX2b2c@endianness-macro) (set! bX2b2e@identifier-syntax-macro (lambda (bX31e9@stx) (let ((bX31eb@t bX31e9@stx)) (let ((bX31ed@ls/false (bX2b54@syntax-dispatch bX31eb@t '(_ any)))) (if bX31ed@ls/false (apply (lambda (bX31ef@expr) (bX2b0a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bX31ef@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bX31ef@expr) '((syntax (e* ...)))))))))) bX31ed@ls/false) (let ((bX31f1@t bX31eb@t)) (let ((bX31f3@ls/false (bX2b54@syntax-dispatch bX31f1@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bX31f3@ls/false (apply (lambda (bX31f5@id1 bX31f6@expr1 bX31f7@id2 bX31f8@expr2 bX31f9@expr3) (and (bX294d@id? bX31f5@id1) (bX294d@id? bX31f7@id2) (bX294d@id? bX31f8@expr2))) bX31f3@ls/false)) (apply (lambda (bX31ff@id1 bX3200@expr1 bX3201@id2 bX3202@expr2 bX3203@expr3) (bX2b0a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bX3200@expr1)) (list (list 'set! 'id bX3202@expr2) (list 'syntax bX3203@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bX3200@expr1 '(e* ...))))))))) bX31f3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX31f1@t))))))))) (set! bX4617@bX2b2e@identifier-syntax-macro bX2b2e@identifier-syntax-macro) (set! bX2b30@do-macro (lambda (bX3209@stx) (let ((bX320c@bind '#f)) (begin (set! bX320c@bind (lambda (bX3223@x) (let ((bX3225@t bX3223@x)) (let ((bX3227@ls/false (bX2b54@syntax-dispatch bX3225@t '(any any)))) (if bX3227@ls/false (apply (lambda (bX3229@x bX322a@init) (list bX3229@x bX322a@init bX3229@x)) bX3227@ls/false) (let ((bX322d@t bX3225@t)) (let ((bX322f@ls/false (bX2b54@syntax-dispatch bX322d@t '(any any any)))) (if bX322f@ls/false (apply (lambda (bX3231@x bX3232@init bX3233@step) (list bX3231@x bX3232@init bX3233@step)) bX322f@ls/false) (let ((bX3237@t bX322d@t)) (let ((bX3239@ls/false (bX2b54@syntax-dispatch bX3237@t '_))) (if bX3239@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid binding" bX3209@stx)) bX3239@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3237@t)))))))))))) (let ((bX320d@t bX3209@stx)) (let ((bX320f@ls/false (bX2b54@syntax-dispatch bX320d@t '(_ each-any (any . each-any) . each-any)))) (if bX320f@ls/false (apply (lambda (bX3211@binding* bX3212@test bX3213@expr* bX3214@command*) (let ((bX3219@t (map bX320c@bind bX3211@binding*))) (let ((bX321b@ls/false (bX2b54@syntax-dispatch bX3219@t '#(each (any any any))))) (if bX321b@ls/false (apply (lambda (bX321d@x* bX321e@init* bX321f@step*) (if (bX2955@valid-bound-ids? bX321d@x*) (bX2b0a@bless (list 'letrec (list (list 'loop (list 'lambda bX321d@x* (list 'if bX3212@test (cons 'begin (cons '(if #f #f) bX3213@expr*)) (cons 'begin (append bX3214@command* (list (cons 'loop bX321f@step*)))))))) (cons 'loop bX321e@init*))) (bX2c34@syntax-violation '#f '"invalid bindings" bX3209@stx))) bX321b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3219@t))))) bX320f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX320d@t)))))))) (set! bX4618@bX2b30@do-macro bX2b30@do-macro) (set! bX2b32@let*-macro (lambda (bX323b@stx) (let ((bX323d@t bX323b@stx)) (let ((bX323f@ls/false (bX2b54@syntax-dispatch bX323d@t '(_ #(each (any any)) any . each-any)))) (if (and bX323f@ls/false (apply (lambda (bX3241@lhs* bX3242@rhs* bX3243@b bX3244@b*) (for-all bX294d@id? bX3241@lhs*)) bX323f@ls/false)) (apply (lambda (bX3249@lhs* bX324a@rhs* bX324b@b bX324c@b*) (bX2b0a@bless (let bX3253@f ((bX3251@x* (map list bX3249@lhs* bX324a@rhs*))) (if (null? bX3251@x*) (cons 'let (cons '() (cons bX324b@b bX324c@b*))) (list 'let (list (car bX3251@x*)) (bX3253@f (cdr bX3251@x*))))))) bX323f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX323d@t)))))) (set! bX4619@bX2b32@let*-macro bX2b32@let*-macro) (set! bX2b34@or-macro (lambda (bX3255@stx) (let ((bX3257@t bX3255@stx)) (let ((bX3259@ls/false (bX2b54@syntax-dispatch bX3257@t '(_)))) (if bX3259@ls/false (apply (lambda () '#f) bX3259@ls/false) (let ((bX325b@t bX3257@t)) (let ((bX325d@ls/false (bX2b54@syntax-dispatch bX325b@t '(_ any . each-any)))) (if bX325d@ls/false (apply (lambda (bX325f@e bX3260@e*) (bX2b0a@bless (let bX3267@f ((bX3263@e bX325f@e) (bX3264@e* bX3260@e*)) (if (null? bX3264@e*) (list 'begin '#f bX3263@e) (list 'let (list (list 't bX3263@e)) (list 'if 't 't (bX3267@f (car bX3264@e*) (cdr bX3264@e*)))))))) bX325d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX325b@t))))))))) (set! bX461a@bX2b34@or-macro bX2b34@or-macro) (set! bX2b36@and-macro (lambda (bX3269@stx) (let ((bX326b@t bX3269@stx)) (let ((bX326d@ls/false (bX2b54@syntax-dispatch bX326b@t '(_)))) (if bX326d@ls/false (apply (lambda () '#t) bX326d@ls/false) (let ((bX326f@t bX326b@t)) (let ((bX3271@ls/false (bX2b54@syntax-dispatch bX326f@t '(_ any . each-any)))) (if bX3271@ls/false (apply (lambda (bX3273@e bX3274@e*) (bX2b0a@bless (let bX327b@f ((bX3277@e bX3273@e) (bX3278@e* bX3274@e*)) (if (null? bX3278@e*) (list 'begin '#f bX3277@e) (cons 'if (cons bX3277@e (cons (bX327b@f (car bX3278@e*) (cdr bX3278@e*)) '(#f)))))))) bX3271@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX326f@t))))))))) (set! bX461b@bX2b36@and-macro bX2b36@and-macro) (set! bX2b38@cond-macro (lambda (bX327d@stx) (let ((bX327f@t bX327d@stx)) (let ((bX3281@ls/false (bX2b54@syntax-dispatch bX327f@t '(_ any . each-any)))) (if bX3281@ls/false (apply (lambda (bX3283@cls bX3284@cls*) (bX2b0a@bless (let bX328b@f ((bX3287@cls bX3283@cls) (bX3288@cls* bX3284@cls*)) (if (null? bX3288@cls*) (let ((bX328d@t bX3287@cls)) (let ((bX328f@ls/false (bX2b54@syntax-dispatch bX328d@t '(#(scheme-id else) any . each-any)))) (if bX328f@ls/false (apply (lambda (bX3291@e bX3292@e*) (cons 'begin (cons bX3291@e bX3292@e*))) bX328f@ls/false) (let ((bX3295@t bX328d@t)) (let ((bX3297@ls/false (bX2b54@syntax-dispatch bX3295@t '(any #(scheme-id =>) any)))) (if bX3297@ls/false (apply (lambda (bX3299@e bX329a@p) (list 'let (list (list 't bX3299@e)) (list 'if 't (cons bX329a@p '(t))))) bX3297@ls/false) (let ((bX329d@t bX3295@t)) (let ((bX329f@ls/false (bX2b54@syntax-dispatch bX329d@t '(any)))) (if bX329f@ls/false (apply (lambda (bX32a1@e) (cons 'or (cons bX32a1@e '((if #f #f))))) bX329f@ls/false) (let ((bX32a3@t bX329d@t)) (let ((bX32a5@ls/false (bX2b54@syntax-dispatch bX32a3@t '(any . each-any)))) (if bX32a5@ls/false (apply (lambda (bX32a7@e bX32a8@e*) (list 'if bX32a7@e (cons 'begin bX32a8@e*))) bX32a5@ls/false) (let ((bX32ab@t bX32a3@t)) (let ((bX32ad@ls/false (bX2b54@syntax-dispatch bX32ab@t '_))) (if bX32ad@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid last clause" bX327d@stx)) bX32ad@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX32ab@t)))))))))))))))) (let ((bX32af@t bX3287@cls)) (let ((bX32b1@ls/false (bX2b54@syntax-dispatch bX32af@t '(#(scheme-id else) any . each-any)))) (if bX32b1@ls/false (apply (lambda (bX32b3@e bX32b4@e*) (bX2c34@syntax-violation '#f '"incorrect position of keyword else" bX327d@stx)) bX32b1@ls/false) (let ((bX32b7@t bX32af@t)) (let ((bX32b9@ls/false (bX2b54@syntax-dispatch bX32b7@t '(any #(scheme-id =>) any)))) (if bX32b9@ls/false (apply (lambda (bX32bb@e bX32bc@p) (list 'let (list (list 't bX32bb@e)) (list 'if 't (cons bX32bc@p '(t)) (bX328b@f (car bX3288@cls*) (cdr bX3288@cls*))))) bX32b9@ls/false) (let ((bX32bf@t bX32b7@t)) (let ((bX32c1@ls/false (bX2b54@syntax-dispatch bX32bf@t '(any)))) (if bX32c1@ls/false (apply (lambda (bX32c3@e) (list 'or bX32c3@e (bX328b@f (car bX3288@cls*) (cdr bX3288@cls*)))) bX32c1@ls/false) (let ((bX32c5@t bX32bf@t)) (let ((bX32c7@ls/false (bX2b54@syntax-dispatch bX32c5@t '(any . each-any)))) (if bX32c7@ls/false (apply (lambda (bX32c9@e bX32ca@e*) (list 'if bX32c9@e (cons 'begin bX32ca@e*) (bX328b@f (car bX3288@cls*) (cdr bX3288@cls*)))) bX32c7@ls/false) (let ((bX32cd@t bX32c5@t)) (let ((bX32cf@ls/false (bX2b54@syntax-dispatch bX32cd@t '_))) (if bX32cf@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid last clause" bX327d@stx)) bX32cf@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX32cd@t)))))))))))))))))))) bX3281@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX327f@t)))))) (set! bX461c@bX2b38@cond-macro bX2b38@cond-macro) (set! bX2b3a@do-include (lambda (bX32d1@stx bX32d2@id bX32d3@filename) (let ((bX32d7@filename (bX2961@stx->datum bX32d3@filename))) (begin (if (not (and (string? bX32d7@filename) (bX294d@id? bX32d2@id))) (bX2c34@syntax-violation '#f '"invalid syntax" bX32d1@stx) (void)) (cons (bX2b0a@bless 'begin) (with-input-from-file bX32d7@filename (lambda () (let bX32db@f ((bX32d9@ls '())) (let ((bX32dd@x (bX248a@bX235c@read-annotated))) (if (eof-object? bX32dd@x) (reverse bX32d9@ls) (bX32db@f (cons (bX292d@datum->stx bX32d2@id bX32dd@x) bX32d9@ls)))))))))))) (set! bX461d@bX2b3a@do-include bX2b3a@do-include) (set! bX2b3c@include-macro (lambda (bX32df@e) (let ((bX32e1@t bX32df@e)) (let ((bX32e3@ls/false (bX2b54@syntax-dispatch bX32e1@t '(any any)))) (if bX32e3@ls/false (apply (lambda (bX32e5@id bX32e6@filename) (bX2b3a@do-include bX32df@e bX32e5@id bX32e6@filename)) bX32e3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX32e1@t)))))) (set! bX461e@bX2b3c@include-macro bX2b3c@include-macro) (set! bX2b3e@include-into-macro (lambda (bX32e9@e) (let ((bX32eb@t bX32e9@e)) (let ((bX32ed@ls/false (bX2b54@syntax-dispatch bX32eb@t '(_ any any)))) (if bX32ed@ls/false (apply (lambda (bX32ef@id bX32f0@filename) (bX2b3a@do-include bX32e9@e bX32ef@id bX32f0@filename)) bX32ed@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX32eb@t)))))) (set! bX461f@bX2b3e@include-into-macro bX2b3e@include-into-macro) (set! bX2b40@syntax-rules-macro (lambda (bX32f3@e) (let ((bX32f5@t bX32f3@e)) (let ((bX32f7@ls/false (bX2b54@syntax-dispatch bX32f5@t '(_ each-any . #(each (any any)))))) (if bX32f7@ls/false (apply (lambda (bX32f9@lits bX32fa@pat* bX32fb@tmp*) (begin (bX2b5a@verify-literals bX32f9@lits bX32f3@e) (bX2b0a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bX32f9@lits (map (lambda (bX32ff@pat bX3300@tmp) (let ((bX3303@t bX32ff@pat)) (let ((bX3305@ls/false (bX2b54@syntax-dispatch bX3303@t '(_ . any)))) (if bX3305@ls/false (apply (lambda (bX3307@rest) (list (cons 'g bX3307@rest) (list 'syntax bX3300@tmp))) bX3305@ls/false) (let ((bX3309@t bX3303@t)) (let ((bX330b@ls/false (bX2b54@syntax-dispatch bX3309@t '_))) (if bX330b@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid syntax-rules pattern" bX32f3@e bX32ff@pat)) bX330b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3309@t)))))))) bX32fa@pat* bX32fb@tmp*)))))))) bX32f7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX32f5@t)))))) (set! bX4620@bX2b40@syntax-rules-macro bX2b40@syntax-rules-macro) (set! bX2b42@quasiquote-macro (let ((bX330e@datum '#f) (bX332a@quasicons* '#f) (bX332c@quasicons '#f) (bX332e@quasiappend '#f) (bX3330@quasivector '#f) (bX3332@vquasi '#f) (bX3334@quasi '#f)) (begin (set! bX330e@datum (lambda (bX340f@x) (list (bX2adc@scheme-stx 'quote) (bX2935@mkstx bX340f@x '() '() '())))) (set! bX332a@quasicons* (lambda (bX3407@x bX3408@y) (let bX340d@f ((bX340b@x bX3407@x)) (if (null? bX340b@x) bX3408@y (bX332c@quasicons (car bX340b@x) (bX340d@f (cdr bX340b@x))))))) (set! bX332c@quasicons (lambda (bX33e1@x bX33e2@y) (let ((bX33e5@t bX33e2@y)) (let ((bX33e7@ls/false (bX2b54@syntax-dispatch bX33e5@t '(#(scheme-id quote) any)))) (if bX33e7@ls/false (apply (lambda (bX33e9@dy) (let ((bX33eb@t bX33e1@x)) (let ((bX33ed@ls/false (bX2b54@syntax-dispatch bX33eb@t '(#(scheme-id quote) any)))) (if bX33ed@ls/false (apply (lambda (bX33ef@dx) (list (bX2adc@scheme-stx 'quote) (cons bX33ef@dx bX33e9@dy))) bX33ed@ls/false) (let ((bX33f1@t bX33eb@t)) (let ((bX33f3@ls/false (bX2b54@syntax-dispatch bX33f1@t '_))) (if bX33f3@ls/false (apply (lambda () (let ((bX33f5@t bX33e9@dy)) (let ((bX33f7@ls/false (bX2b54@syntax-dispatch bX33f5@t '()))) (if bX33f7@ls/false (apply (lambda () (list (bX2adc@scheme-stx 'list) bX33e1@x)) bX33f7@ls/false) (let ((bX33f9@t bX33f5@t)) (let ((bX33fb@ls/false (bX2b54@syntax-dispatch bX33f9@t '_))) (if bX33fb@ls/false (apply (lambda () (list (bX2adc@scheme-stx 'cons) bX33e1@x bX33e2@y)) bX33fb@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX33f9@t)))))))) bX33f3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX33f1@t)))))))) bX33e7@ls/false) (let ((bX33fd@t bX33e5@t)) (let ((bX33ff@ls/false (bX2b54@syntax-dispatch bX33fd@t '(#(scheme-id list) . each-any)))) (if bX33ff@ls/false (apply (lambda (bX3401@stuff) (cons* (bX2adc@scheme-stx 'list) bX33e1@x bX3401@stuff)) bX33ff@ls/false) (let ((bX3403@t bX33fd@t)) (let ((bX3405@ls/false (bX2b54@syntax-dispatch bX3403@t '_))) (if bX3405@ls/false (apply (lambda () (list (bX2adc@scheme-stx 'cons) bX33e1@x bX33e2@y)) bX3405@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3403@t)))))))))))) (set! bX332e@quasiappend (lambda (bX33c7@x bX33c8@y) (let ((bX33cb@ls (let bX33cf@f ((bX33cd@x bX33c7@x)) (if (null? bX33cd@x) (let ((bX33d1@t bX33c8@y)) (let ((bX33d3@ls/false (bX2b54@syntax-dispatch bX33d1@t '(#(scheme-id quote) ())))) (if bX33d3@ls/false (apply (lambda () '()) bX33d3@ls/false) (let ((bX33d5@t bX33d1@t)) (let ((bX33d7@ls/false (bX2b54@syntax-dispatch bX33d5@t '_))) (if bX33d7@ls/false (apply (lambda () (list bX33c8@y)) bX33d7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX33d5@t))))))) (let ((bX33d9@t (car bX33cd@x))) (let ((bX33db@ls/false (bX2b54@syntax-dispatch bX33d9@t '(#(scheme-id quote) ())))) (if bX33db@ls/false (apply (lambda () (bX33cf@f (cdr bX33cd@x))) bX33db@ls/false) (let ((bX33dd@t bX33d9@t)) (let ((bX33df@ls/false (bX2b54@syntax-dispatch bX33dd@t '_))) (if bX33df@ls/false (apply (lambda () (cons (car bX33cd@x) (bX33cf@f (cdr bX33cd@x)))) bX33df@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX33dd@t))))))))))) (if (null? bX33cb@ls) (list (bX2adc@scheme-stx 'quote) '()) (if (null? (cdr bX33cb@ls)) (car bX33cb@ls) (cons* (bX2adc@scheme-stx 'append) bX33cb@ls)))))) (set! bX3330@quasivector (lambda (bX3395@x) (let ((bX3397@pat-x bX3395@x)) (let ((bX3399@t bX3397@pat-x)) (let ((bX339b@ls/false (bX2b54@syntax-dispatch bX3399@t '(#(scheme-id quote) each-any)))) (if bX339b@ls/false (apply (lambda (bX339d@x*) (list (bX2adc@scheme-stx 'quote) (list->vector bX339d@x*))) bX339b@ls/false) (let ((bX339f@t bX3399@t)) (let ((bX33a1@ls/false (bX2b54@syntax-dispatch bX339f@t '_))) (if bX33a1@ls/false (apply (lambda () (let bX33a9@f ((bX33a3@x bX3395@x) (bX33a4@k (lambda (bX33a7@ls) (cons* (bX2adc@scheme-stx 'vector) bX33a7@ls)))) (let ((bX33ab@t bX33a3@x)) (let ((bX33ad@ls/false (bX2b54@syntax-dispatch bX33ab@t '(#(scheme-id quote) each-any)))) (if bX33ad@ls/false (apply (lambda (bX33af@x*) (bX33a4@k (map (lambda (bX33b1@x) (list (bX2adc@scheme-stx 'quote) bX33b1@x)) bX33af@x*))) bX33ad@ls/false) (let ((bX33b3@t bX33ab@t)) (let ((bX33b5@ls/false (bX2b54@syntax-dispatch bX33b3@t '(#(scheme-id list) . each-any)))) (if bX33b5@ls/false (apply (lambda (bX33b7@x*) (bX33a4@k bX33b7@x*)) bX33b5@ls/false) (let ((bX33b9@t bX33b3@t)) (let ((bX33bb@ls/false (bX2b54@syntax-dispatch bX33b9@t '(#(scheme-id cons) any any)))) (if bX33bb@ls/false (apply (lambda (bX33bd@x bX33be@y) (bX33a9@f bX33be@y (lambda (bX33c1@ls) (bX33a4@k (cons bX33bd@x bX33c1@ls))))) bX33bb@ls/false) (let ((bX33c3@t bX33b9@t)) (let ((bX33c5@ls/false (bX2b54@syntax-dispatch bX33c3@t '_))) (if bX33c5@ls/false (apply (lambda () (list (bX2adc@scheme-stx 'list->vector) bX3397@pat-x)) bX33c5@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX33c3@t))))))))))))))) bX33a1@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX339f@t)))))))))) (set! bX3332@vquasi (lambda (bX3373@p bX3374@lev) (let ((bX3377@t bX3373@p)) (let ((bX3379@ls/false (bX2b54@syntax-dispatch bX3377@t '(any . any)))) (if bX3379@ls/false (apply (lambda (bX337b@p bX337c@q) (let ((bX337f@t bX337b@p)) (let ((bX3381@ls/false (bX2b54@syntax-dispatch bX337f@t '(#(scheme-id unquote) . each-any)))) (if bX3381@ls/false (apply (lambda (bX3383@p) (if (= bX3374@lev '0) (bX332a@quasicons* bX3383@p (bX3332@vquasi bX337c@q bX3374@lev)) (bX332c@quasicons (bX332c@quasicons (bX330e@datum 'unquote) (bX3334@quasi bX3383@p (- bX3374@lev '1))) (bX3332@vquasi bX337c@q bX3374@lev)))) bX3381@ls/false) (let ((bX3385@t bX337f@t)) (let ((bX3387@ls/false (bX2b54@syntax-dispatch bX3385@t '(#(scheme-id unquote-splicing) . each-any)))) (if bX3387@ls/false (apply (lambda (bX3389@p) (if (= bX3374@lev '0) (bX332e@quasiappend bX3389@p (bX3332@vquasi bX337c@q bX3374@lev)) (bX332c@quasicons (bX332c@quasicons (bX330e@datum 'unquote-splicing) (bX3334@quasi bX3389@p (- bX3374@lev '1))) (bX3332@vquasi bX337c@q bX3374@lev)))) bX3387@ls/false) (let ((bX338b@t bX3385@t)) (let ((bX338d@ls/false (bX2b54@syntax-dispatch bX338b@t 'any))) (if bX338d@ls/false (apply (lambda (bX338f@p) (bX332c@quasicons (bX3334@quasi bX338f@p bX3374@lev) (bX3332@vquasi bX337c@q bX3374@lev))) bX338d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX338b@t))))))))))) bX3379@ls/false) (let ((bX3391@t bX3377@t)) (let ((bX3393@ls/false (bX2b54@syntax-dispatch bX3391@t '()))) (if bX3393@ls/false (apply (lambda () (list (bX2adc@scheme-stx 'quote) '())) bX3393@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3391@t))))))))) (set! bX3334@quasi (lambda (bX333d@p bX333e@lev) (let ((bX3341@t bX333d@p)) (let ((bX3343@ls/false (bX2b54@syntax-dispatch bX3341@t '(#(scheme-id unquote) any)))) (if bX3343@ls/false (apply (lambda (bX3345@p) (if (= bX333e@lev '0) bX3345@p (bX332c@quasicons (bX330e@datum 'unquote) (bX3334@quasi (list bX3345@p) (- bX333e@lev '1))))) bX3343@ls/false) (let ((bX3347@t bX3341@t)) (let ((bX3349@ls/false (bX2b54@syntax-dispatch bX3347@t '((#(scheme-id unquote) . each-any) . any)))) (if bX3349@ls/false (apply (lambda (bX334b@p bX334c@q) (if (= bX333e@lev '0) (bX332a@quasicons* bX334b@p (bX3334@quasi bX334c@q bX333e@lev)) (bX332c@quasicons (bX332c@quasicons (bX330e@datum 'unquote) (bX3334@quasi bX334b@p (- bX333e@lev '1))) (bX3334@quasi bX334c@q bX333e@lev)))) bX3349@ls/false) (let ((bX334f@t bX3347@t)) (let ((bX3351@ls/false (bX2b54@syntax-dispatch bX334f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bX3351@ls/false (apply (lambda (bX3353@p bX3354@q) (if (= bX333e@lev '0) (bX332e@quasiappend bX3353@p (bX3334@quasi bX3354@q bX333e@lev)) (bX332c@quasicons (bX332c@quasicons (bX330e@datum 'unquote-splicing) (bX3334@quasi bX3353@p (- bX333e@lev '1))) (bX3334@quasi bX3354@q bX333e@lev)))) bX3351@ls/false) (let ((bX3357@t bX334f@t)) (let ((bX3359@ls/false (bX2b54@syntax-dispatch bX3357@t '(#(scheme-id quasiquote) any)))) (if bX3359@ls/false (apply (lambda (bX335b@p) (bX332c@quasicons (bX330e@datum 'quasiquote) (bX3334@quasi (list bX335b@p) (+ bX333e@lev '1)))) bX3359@ls/false) (let ((bX335d@t bX3357@t)) (let ((bX335f@ls/false (bX2b54@syntax-dispatch bX335d@t '(any . any)))) (if bX335f@ls/false (apply (lambda (bX3361@p bX3362@q) (bX332c@quasicons (bX3334@quasi bX3361@p bX333e@lev) (bX3334@quasi bX3362@q bX333e@lev))) bX335f@ls/false) (let ((bX3365@t bX335d@t)) (let ((bX3367@ls/false (bX2b54@syntax-dispatch bX3365@t '#(vector each-any)))) (if (and bX3367@ls/false (apply (lambda (bX3369@x) (not (bX2919@stx? bX3369@x))) bX3367@ls/false)) (apply (lambda (bX336b@x) (bX3330@quasivector (bX3332@vquasi bX336b@x bX333e@lev))) bX3367@ls/false) (let ((bX336d@t bX3365@t)) (let ((bX336f@ls/false (bX2b54@syntax-dispatch bX336d@t 'any))) (if bX336f@ls/false (apply (lambda (bX3371@p) (list (bX2adc@scheme-stx 'quote) bX3371@p)) bX336f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX336d@t)))))))))))))))))))))))) (lambda (bX3335@x) (let ((bX3337@t bX3335@x)) (let ((bX3339@ls/false (bX2b54@syntax-dispatch bX3337@t '(_ any)))) (if bX3339@ls/false (apply (lambda (bX333b@e) (bX3334@quasi bX333b@e '0)) bX3339@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3337@t)))))))) (set! bX4621@bX2b42@quasiquote-macro bX2b42@quasiquote-macro) (set! bX2b44@quasisyntax-macro (let ((bX3412@quasi '#f)) (begin (set! bX3412@quasi (lambda (bX342d@p bX342e@lev) (let ((bX3431@t bX342d@p)) (let ((bX3433@ls/false (bX2b54@syntax-dispatch bX3431@t '(#(scheme-id unsyntax) any)))) (if bX3433@ls/false (apply (lambda (bX3435@p) (if (= bX342e@lev '0) (let ((bX3437@g (gensym))) (values (list bX3437@g) (list bX3435@p) bX3437@g)) (call-with-values (lambda () (bX3412@quasi bX3435@p (- bX342e@lev '1))) (lambda (bX343f@bX343a bX3440@bX343c bX3441@bX343e) (let ((bX3445@p bX3441@bX343e) (bX3446@rhs* bX3440@bX343c) (bX3447@lhs* bX343f@bX343a)) (values bX3447@lhs* bX3446@rhs* (list 'unsyntax bX3445@p))))))) bX3433@ls/false) (let ((bX344b@t bX3431@t)) (let ((bX344d@ls/false (bX2b54@syntax-dispatch bX344b@t '#(scheme-id unsyntax)))) (if (and bX344d@ls/false (apply (lambda () (= bX342e@lev '0)) bX344d@ls/false)) (apply (lambda () (bX2c34@syntax-violation '#f '"incorrect use of unsyntax" bX342d@p)) bX344d@ls/false) (let ((bX344f@t bX344b@t)) (let ((bX3451@ls/false (bX2b54@syntax-dispatch bX344f@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bX3451@ls/false (apply (lambda (bX3453@p* bX3454@q) (call-with-values (lambda () (bX3412@quasi bX3454@q bX342e@lev)) (lambda (bX345d@bX3458 bX345e@bX345a bX345f@bX345c) (let ((bX3463@q bX345f@bX345c) (bX3464@rhs* bX345e@bX345a) (bX3465@lhs* bX345d@bX3458)) (if (= bX342e@lev '0) (let ((bX3469@g* (map (lambda (bX346b@x) (gensym)) bX3453@p*))) (values (append bX3469@g* bX3465@lhs*) (append bX3453@p* bX3464@rhs*) (append bX3469@g* bX3463@q))) (call-with-values (lambda () (bX3412@quasi bX3453@p* (- bX342e@lev '1))) (lambda (bX3473@bX346e bX3474@bX3470 bX3475@bX3472) (let ((bX3479@p* bX3475@bX3472) (bX347a@rhs2* bX3474@bX3470) (bX347b@lhs2* bX3473@bX346e)) (values (append bX347b@lhs2* bX3465@lhs*) (append bX347a@rhs2* bX3464@rhs*) (cons (cons 'unsyntax bX3479@p*) bX3463@q)))))))))) bX3451@ls/false) (let ((bX347f@t bX344f@t)) (let ((bX3481@ls/false (bX2b54@syntax-dispatch bX347f@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bX3481@ls/false (apply (lambda (bX3483@p* bX3484@q) (call-with-values (lambda () (bX3412@quasi bX3484@q bX342e@lev)) (lambda (bX348d@bX3488 bX348e@bX348a bX348f@bX348c) (let ((bX3493@q bX348f@bX348c) (bX3494@rhs* bX348e@bX348a) (bX3495@lhs* bX348d@bX3488)) (if (= bX342e@lev '0) (let ((bX3499@g* (map (lambda (bX349b@x) (gensym)) bX3483@p*))) (values (append (map (lambda (bX349d@g) (cons bX349d@g '(...))) bX3499@g*) bX3495@lhs*) (append bX3483@p* bX3494@rhs*) (append (apply append (map (lambda (bX349f@g) (cons bX349f@g '(...))) bX3499@g*)) bX3493@q))) (call-with-values (lambda () (bX3412@quasi bX3483@p* (- bX342e@lev '1))) (lambda (bX34a7@bX34a2 bX34a8@bX34a4 bX34a9@bX34a6) (let ((bX34ad@p* bX34a9@bX34a6) (bX34ae@rhs2* bX34a8@bX34a4) (bX34af@lhs2* bX34a7@bX34a2)) (values (append bX34af@lhs2* bX3495@lhs*) (append bX34ae@rhs2* bX3494@rhs*) (cons (cons 'unsyntax-splicing bX34ad@p*) bX3493@q)))))))))) bX3481@ls/false) (let ((bX34b3@t bX347f@t)) (let ((bX34b5@ls/false (bX2b54@syntax-dispatch bX34b3@t '#(scheme-id unsyntax-splicing)))) (if (and bX34b5@ls/false (apply (lambda () (= bX342e@lev '0)) bX34b5@ls/false)) (apply (lambda () (bX2c34@syntax-violation '#f '"incorrect use of unsyntax-splicing" bX342d@p)) bX34b5@ls/false) (let ((bX34b7@t bX34b3@t)) (let ((bX34b9@ls/false (bX2b54@syntax-dispatch bX34b7@t '(#(scheme-id quasisyntax) any)))) (if bX34b9@ls/false (apply (lambda (bX34bb@p) (call-with-values (lambda () (bX3412@quasi bX34bb@p (+ bX342e@lev '1))) (lambda (bX34c3@bX34be bX34c4@bX34c0 bX34c5@bX34c2) (let ((bX34c9@p bX34c5@bX34c2) (bX34ca@rhs* bX34c4@bX34c0) (bX34cb@lhs* bX34c3@bX34be)) (values bX34cb@lhs* bX34ca@rhs* (list 'quasisyntax bX34c9@p)))))) bX34b9@ls/false) (let ((bX34cf@t bX34b7@t)) (let ((bX34d1@ls/false (bX2b54@syntax-dispatch bX34cf@t '(any . any)))) (if bX34d1@ls/false (apply (lambda (bX34d3@p bX34d4@q) (call-with-values (lambda () (bX3412@quasi bX34d3@p bX342e@lev)) (lambda (bX34e3@bX34d8 bX34e4@bX34da bX34e5@bX34dc) (call-with-values (lambda () (bX3412@quasi bX34d4@q bX342e@lev)) (lambda (bX34e9@bX34de bX34ea@bX34e0 bX34eb@bX34e2) (let ((bX34ef@q bX34eb@bX34e2) (bX34f0@rhs2* bX34ea@bX34e0) (bX34f1@lhs2* bX34e9@bX34de) (bX34f2@p bX34e5@bX34dc) (bX34f3@rhs* bX34e4@bX34da) (bX34f4@lhs* bX34e3@bX34d8)) (values (append bX34f1@lhs2* bX34f4@lhs*) (append bX34f0@rhs2* bX34f3@rhs*) (cons bX34f2@p bX34ef@q)))))))) bX34d1@ls/false) (let ((bX34fb@t bX34cf@t)) (let ((bX34fd@ls/false (bX2b54@syntax-dispatch bX34fb@t '#(vector each-any)))) (if bX34fd@ls/false (apply (lambda (bX34ff@x*) (call-with-values (lambda () (bX3412@quasi bX34ff@x* bX342e@lev)) (lambda (bX3507@bX3502 bX3508@bX3504 bX3509@bX3506) (let ((bX350d@x* bX3509@bX3506) (bX350e@rhs* bX3508@bX3504) (bX350f@lhs* bX3507@bX3502)) (values bX350f@lhs* bX350e@rhs* (list->vector bX350d@x*)))))) bX34fd@ls/false) (let ((bX3513@t bX34fb@t)) (let ((bX3515@ls/false (bX2b54@syntax-dispatch bX3513@t '_))) (if bX3515@ls/false (apply (lambda () (values '() '() bX342d@p)) bX3515@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3513@t)))))))))))))))))))))))))))))) (lambda (bX3413@x) (let ((bX3415@t bX3413@x)) (let ((bX3417@ls/false (bX2b54@syntax-dispatch bX3415@t '(_ any)))) (if bX3417@ls/false (apply (lambda (bX3419@e) (call-with-values (lambda () (bX3412@quasi bX3419@e '0)) (lambda (bX3421@bX341c bX3422@bX341e bX3423@bX3420) (let ((bX3427@v bX3423@bX3420) (bX3428@rhs* bX3422@bX341e) (bX3429@lhs* bX3421@bX341c)) (bX2b0a@bless (list 'syntax-case (cons 'list bX3428@rhs*) '() (list bX3429@lhs* (list 'syntax bX3427@v)))))))) bX3417@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3415@t)))))))) (set! bX4622@bX2b44@quasisyntax-macro bX2b44@quasisyntax-macro) (set! bX2b46@define-struct-macro (lambda (bX3517@stx) (bX2c34@syntax-violation '#f '"define-struct not supported" bX3517@stx))) (set! bX4623@bX2b46@define-struct-macro bX2b46@define-struct-macro) (set! bX2b48@define-record-type-macro (lambda (bX3519@x) (let ((bX351c@id '#f) (bX351e@get-record-name '#f) (bX3520@get-record-constructor-name '#f) (bX3522@get-record-predicate-name '#f) (bX3524@get-clause '#f) (bX3526@foo-rtd-code '#f) (bX3528@parent-rtd-code '#f) (bX352a@parent-rcd-code '#f) (bX352c@foo-rcd-code '#f) (bX352e@get-protocol-code '#f) (bX3530@get-fields '#f) (bX3532@get-mutator-indices '#f) (bX3534@get-mutators '#f) (bX3536@get-accessors '#f) (bX3538@enumerate '#f) (bX353a@do-define-record '#f) (bX353c@verify-clauses '#f)) (begin (set! bX351c@id (lambda (bX370f@ctxt . bX3711@str*) (bX2c38@datum->syntax bX370f@ctxt (string->symbol (apply string-append (map (lambda (bX3713@x) (if (symbol? bX3713@x) (symbol->string bX3713@x) (if (string? bX3713@x) bX3713@x (assertion-violation 'define-record-type '"BUG")))) bX3711@str*)))))) (set! bX351e@get-record-name (lambda (bX36fd@spec) (let ((bX36ff@t bX36fd@spec)) (let ((bX3701@ls/false (bX2b54@syntax-dispatch bX36ff@t '(any any any)))) (if bX3701@ls/false (apply (lambda (bX3703@foo bX3704@make-foo bX3705@foo?) bX3703@foo) bX3701@ls/false) (let ((bX3709@t bX36ff@t)) (let ((bX370b@ls/false (bX2b54@syntax-dispatch bX3709@t 'any))) (if bX370b@ls/false (apply (lambda (bX370d@foo) bX370d@foo) bX370b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3709@t))))))))) (set! bX3520@get-record-constructor-name (lambda (bX36e9@spec) (let ((bX36eb@t bX36e9@spec)) (let ((bX36ed@ls/false (bX2b54@syntax-dispatch bX36eb@t '(any any any)))) (if bX36ed@ls/false (apply (lambda (bX36ef@foo bX36f0@make-foo bX36f1@foo?) bX36f0@make-foo) bX36ed@ls/false) (let ((bX36f5@t bX36eb@t)) (let ((bX36f7@ls/false (bX2b54@syntax-dispatch bX36f5@t 'any))) (if (and bX36f7@ls/false (apply (lambda (bX36f9@foo) (bX294d@id? bX36f9@foo)) bX36f7@ls/false)) (apply (lambda (bX36fb@foo) (bX351c@id bX36fb@foo '"make-" (bX2961@stx->datum bX36fb@foo))) bX36f7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX36f5@t))))))))) (set! bX3522@get-record-predicate-name (lambda (bX36d5@spec) (let ((bX36d7@t bX36d5@spec)) (let ((bX36d9@ls/false (bX2b54@syntax-dispatch bX36d7@t '(any any any)))) (if bX36d9@ls/false (apply (lambda (bX36db@foo bX36dc@make-foo bX36dd@foo?) bX36dd@foo?) bX36d9@ls/false) (let ((bX36e1@t bX36d7@t)) (let ((bX36e3@ls/false (bX2b54@syntax-dispatch bX36e1@t 'any))) (if (and bX36e3@ls/false (apply (lambda (bX36e5@foo) (bX294d@id? bX36e5@foo)) bX36e3@ls/false)) (apply (lambda (bX36e7@foo) (bX351c@id bX36e7@foo (bX2961@stx->datum bX36e7@foo) '"?")) bX36e3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX36e1@t))))))))) (set! bX3524@get-clause (lambda (bX36c3@id bX36c4@ls) (let ((bX36c7@t bX36c4@ls)) (let ((bX36c9@ls/false (bX2b54@syntax-dispatch bX36c7@t '()))) (if bX36c9@ls/false (apply (lambda () '#f) bX36c9@ls/false) (let ((bX36cb@t bX36c7@t)) (let ((bX36cd@ls/false (bX2b54@syntax-dispatch bX36cb@t '((any . any) . any)))) (if bX36cd@ls/false (apply (lambda (bX36cf@x bX36d0@rest bX36d1@ls) (if (bX2953@free-id=? (bX2b0a@bless bX36c3@id) bX36cf@x) (cons bX36cf@x bX36d0@rest) (bX3524@get-clause bX36c3@id bX36d1@ls))) bX36cd@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX36cb@t))))))))) (set! bX3526@foo-rtd-code (lambda (bX3671@name bX3672@clause* bX3673@parent-rtd-code) (let ((bX3678@convert-field-spec* '#f)) (begin (set! bX3678@convert-field-spec* (lambda (bX36a9@ls) (list->vector (map (lambda (bX36ab@x) (let ((bX36ad@t bX36ab@x)) (let ((bX36af@ls/false (bX2b54@syntax-dispatch bX36ad@t '(#(scheme-id mutable) any . any)))) (if bX36af@ls/false (apply (lambda (bX36b1@name bX36b2@rest) (list 'mutable bX36b1@name)) bX36af@ls/false) (let ((bX36b5@t bX36ad@t)) (let ((bX36b7@ls/false (bX2b54@syntax-dispatch bX36b5@t '(#(scheme-id immutable) any . any)))) (if bX36b7@ls/false (apply (lambda (bX36b9@name bX36ba@rest) (list 'immutable bX36b9@name)) bX36b7@ls/false) (let ((bX36bd@t bX36b5@t)) (let ((bX36bf@ls/false (bX2b54@syntax-dispatch bX36bd@t 'any))) (if bX36bf@ls/false (apply (lambda (bX36c1@name) (list 'immutable bX36c1@name)) bX36bf@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX36bd@t))))))))))) bX36a9@ls)))) (let ((bX3679@uid-code (let ((bX3681@t (bX3524@get-clause 'nongenerative bX3672@clause*))) (let ((bX3683@ls/false (bX2b54@syntax-dispatch bX3681@t '(_)))) (if bX3683@ls/false (apply (lambda () (list 'quote (gensym))) bX3683@ls/false) (let ((bX3685@t bX3681@t)) (let ((bX3687@ls/false (bX2b54@syntax-dispatch bX3685@t '(_ any)))) (if bX3687@ls/false (apply (lambda (bX3689@uid) (list 'quote bX3689@uid)) bX3687@ls/false) (let ((bX368b@t bX3685@t)) (let ((bX368d@ls/false (bX2b54@syntax-dispatch bX368b@t '_))) (if bX368d@ls/false (apply (lambda () '#f) bX368d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX368b@t))))))))))) (bX367a@sealed? (let ((bX368f@t (bX3524@get-clause 'sealed bX3672@clause*))) (let ((bX3691@ls/false (bX2b54@syntax-dispatch bX368f@t '(_ #(atom #t))))) (if bX3691@ls/false (apply (lambda () '#t) bX3691@ls/false) (let ((bX3693@t bX368f@t)) (let ((bX3695@ls/false (bX2b54@syntax-dispatch bX3693@t '_))) (if bX3695@ls/false (apply (lambda () '#f) bX3695@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3693@t)))))))) (bX367b@opaque? (let ((bX3697@t (bX3524@get-clause 'opaque bX3672@clause*))) (let ((bX3699@ls/false (bX2b54@syntax-dispatch bX3697@t '(_ #(atom #t))))) (if bX3699@ls/false (apply (lambda () '#t) bX3699@ls/false) (let ((bX369b@t bX3697@t)) (let ((bX369d@ls/false (bX2b54@syntax-dispatch bX369b@t '_))) (if bX369d@ls/false (apply (lambda () '#f) bX369d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX369b@t)))))))) (bX367c@fields (let ((bX369f@t (bX3524@get-clause 'fields bX3672@clause*))) (let ((bX36a1@ls/false (bX2b54@syntax-dispatch bX369f@t '(_ . each-any)))) (if bX36a1@ls/false (apply (lambda (bX36a3@field-spec*) (list 'quote (bX3678@convert-field-spec* bX36a3@field-spec*))) bX36a1@ls/false) (let ((bX36a5@t bX369f@t)) (let ((bX36a7@ls/false (bX2b54@syntax-dispatch bX36a5@t '_))) (if bX36a7@ls/false (apply (lambda () ''#()) bX36a7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX36a5@t))))))))) (bX2b0a@bless (list 'make-record-type-descriptor (list 'quote bX3671@name) bX3673@parent-rtd-code bX3679@uid-code bX367a@sealed? bX367b@opaque? bX367c@fields))))))) (set! bX3528@parent-rtd-code (lambda (bX3659@clause*) (let ((bX365b@t (bX3524@get-clause 'parent bX3659@clause*))) (let ((bX365d@ls/false (bX2b54@syntax-dispatch bX365b@t '(_ any)))) (if bX365d@ls/false (apply (lambda (bX365f@name) (list 'record-type-descriptor bX365f@name)) bX365d@ls/false) (let ((bX3661@t bX365b@t)) (let ((bX3663@ls/false (bX2b54@syntax-dispatch bX3661@t '#(atom #f)))) (if bX3663@ls/false (apply (lambda () (let ((bX3665@t (bX3524@get-clause 'parent-rtd bX3659@clause*))) (let ((bX3667@ls/false (bX2b54@syntax-dispatch bX3665@t '(_ any any)))) (if bX3667@ls/false (apply (lambda (bX3669@rtd bX366a@rcd) bX3669@rtd) bX3667@ls/false) (let ((bX366d@t bX3665@t)) (let ((bX366f@ls/false (bX2b54@syntax-dispatch bX366d@t '#(atom #f)))) (if bX366f@ls/false (apply (lambda () '#f) bX366f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX366d@t)))))))) bX3663@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3661@t))))))))) (set! bX352a@parent-rcd-code (lambda (bX3641@clause*) (let ((bX3643@t (bX3524@get-clause 'parent bX3641@clause*))) (let ((bX3645@ls/false (bX2b54@syntax-dispatch bX3643@t '(_ any)))) (if bX3645@ls/false (apply (lambda (bX3647@name) (list 'record-constructor-descriptor bX3647@name)) bX3645@ls/false) (let ((bX3649@t bX3643@t)) (let ((bX364b@ls/false (bX2b54@syntax-dispatch bX3649@t '#(atom #f)))) (if bX364b@ls/false (apply (lambda () (let ((bX364d@t (bX3524@get-clause 'parent-rtd bX3641@clause*))) (let ((bX364f@ls/false (bX2b54@syntax-dispatch bX364d@t '(_ any any)))) (if bX364f@ls/false (apply (lambda (bX3651@rtd bX3652@rcd) bX3652@rcd) bX364f@ls/false) (let ((bX3655@t bX364d@t)) (let ((bX3657@ls/false (bX2b54@syntax-dispatch bX3655@t '#(atom #f)))) (if bX3657@ls/false (apply (lambda () '#f) bX3657@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3655@t)))))))) bX364b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3649@t))))))))) (set! bX352c@foo-rcd-code (lambda (bX3639@clause* bX363a@foo-rtd bX363b@protocol bX363c@parent-rcd-code) (list 'make-record-constructor-descriptor bX363a@foo-rtd bX363c@parent-rcd-code bX363b@protocol))) (set! bX352e@get-protocol-code (lambda (bX362d@clause*) (let ((bX362f@t (bX3524@get-clause 'protocol bX362d@clause*))) (let ((bX3631@ls/false (bX2b54@syntax-dispatch bX362f@t '(_ any)))) (if bX3631@ls/false (apply (lambda (bX3633@expr) bX3633@expr) bX3631@ls/false) (let ((bX3635@t bX362f@t)) (let ((bX3637@ls/false (bX2b54@syntax-dispatch bX3635@t '_))) (if bX3637@ls/false (apply (lambda () '#f) bX3637@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3635@t))))))))) (set! bX3530@get-fields (lambda (bX361b@clause*) (let ((bX361d@t bX361b@clause*)) (let ((bX361f@ls/false (bX2b54@syntax-dispatch bX361d@t '()))) (if bX361f@ls/false (apply (lambda () '()) bX361f@ls/false) (let ((bX3621@t bX361d@t)) (let ((bX3623@ls/false (bX2b54@syntax-dispatch bX3621@t '((#(scheme-id fields) . each-any) . _)))) (if bX3623@ls/false (apply (lambda (bX3625@f*) bX3625@f*) bX3623@ls/false) (let ((bX3627@t bX3621@t)) (let ((bX3629@ls/false (bX2b54@syntax-dispatch bX3627@t '(_ . any)))) (if bX3629@ls/false (apply (lambda (bX362b@rest) (bX3530@get-fields bX362b@rest)) bX3629@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3627@t)))))))))))) (set! bX3532@get-mutator-indices (lambda (bX3603@fields) (let bX3609@f ((bX3605@fields bX3603@fields) (bX3606@i '0)) (let ((bX360b@t bX3605@fields)) (let ((bX360d@ls/false (bX2b54@syntax-dispatch bX360b@t '()))) (if bX360d@ls/false (apply (lambda () '()) bX360d@ls/false) (let ((bX360f@t bX360b@t)) (let ((bX3611@ls/false (bX2b54@syntax-dispatch bX360f@t '((#(scheme-id mutable) . _) . any)))) (if bX3611@ls/false (apply (lambda (bX3613@rest) (cons bX3606@i (bX3609@f bX3613@rest (+ bX3606@i '1)))) bX3611@ls/false) (let ((bX3615@t bX360f@t)) (let ((bX3617@ls/false (bX2b54@syntax-dispatch bX3615@t '(_ . any)))) (if bX3617@ls/false (apply (lambda (bX3619@rest) (bX3609@f bX3619@rest (+ bX3606@i '1))) bX3617@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3615@t))))))))))))) (set! bX3534@get-mutators (lambda (bX35d9@foo bX35da@fields) (let ((bX35de@gen-name '#f)) (begin (set! bX35de@gen-name (lambda (bX3601@x) (bX2c38@datum->syntax bX35d9@foo (string->symbol (string-append (symbol->string (bX2c3a@syntax->datum bX35d9@foo)) '"-" (symbol->string (bX2c3a@syntax->datum bX3601@x)) '"-set!"))))) (let bX35e1@f ((bX35df@fields bX35da@fields)) (let ((bX35e3@t bX35df@fields)) (let ((bX35e5@ls/false (bX2b54@syntax-dispatch bX35e3@t '()))) (if bX35e5@ls/false (apply (lambda () '()) bX35e5@ls/false) (let ((bX35e7@t bX35e3@t)) (let ((bX35e9@ls/false (bX2b54@syntax-dispatch bX35e7@t '((#(scheme-id mutable) any any any) . any)))) (if bX35e9@ls/false (apply (lambda (bX35eb@name bX35ec@accessor bX35ed@mutator bX35ee@rest) (cons bX35ed@mutator (bX35e1@f bX35ee@rest))) bX35e9@ls/false) (let ((bX35f3@t bX35e7@t)) (let ((bX35f5@ls/false (bX2b54@syntax-dispatch bX35f3@t '((#(scheme-id mutable) any) . any)))) (if bX35f5@ls/false (apply (lambda (bX35f7@name bX35f8@rest) (cons (bX35de@gen-name bX35f7@name) (bX35e1@f bX35f8@rest))) bX35f5@ls/false) (let ((bX35fb@t bX35f3@t)) (let ((bX35fd@ls/false (bX2b54@syntax-dispatch bX35fb@t '(_ . any)))) (if bX35fd@ls/false (apply (lambda (bX35ff@rest) (bX35e1@f bX35ff@rest)) bX35fd@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX35fb@t)))))))))))))))))) (set! bX3536@get-accessors (lambda (bX3595@foo bX3596@fields) (let ((bX359a@gen-name '#f)) (begin (set! bX359a@gen-name (lambda (bX35d7@x) (bX2c38@datum->syntax bX3595@foo (string->symbol (string-append (symbol->string (bX2c3a@syntax->datum bX3595@foo)) '"-" (symbol->string (bX2c3a@syntax->datum bX35d7@x))))))) (map (lambda (bX359b@field) (let ((bX359d@t bX359b@field)) (let ((bX359f@ls/false (bX2b54@syntax-dispatch bX359d@t '(#(scheme-id mutable) any any any)))) (if (and bX359f@ls/false (apply (lambda (bX35a1@name bX35a2@accessor bX35a3@mutator) (bX294d@id? bX35a2@accessor)) bX359f@ls/false)) (apply (lambda (bX35a7@name bX35a8@accessor bX35a9@mutator) bX35a8@accessor) bX359f@ls/false) (let ((bX35ad@t bX359d@t)) (let ((bX35af@ls/false (bX2b54@syntax-dispatch bX35ad@t '(#(scheme-id immutable) any any)))) (if (and bX35af@ls/false (apply (lambda (bX35b1@name bX35b2@accessor) (bX294d@id? bX35b2@accessor)) bX35af@ls/false)) (apply (lambda (bX35b5@name bX35b6@accessor) bX35b6@accessor) bX35af@ls/false) (let ((bX35b9@t bX35ad@t)) (let ((bX35bb@ls/false (bX2b54@syntax-dispatch bX35b9@t '(#(scheme-id mutable) any)))) (if (and bX35bb@ls/false (apply (lambda (bX35bd@name) (bX294d@id? bX35bd@name)) bX35bb@ls/false)) (apply (lambda (bX35bf@name) (bX359a@gen-name bX35bf@name)) bX35bb@ls/false) (let ((bX35c1@t bX35b9@t)) (let ((bX35c3@ls/false (bX2b54@syntax-dispatch bX35c1@t '(#(scheme-id immutable) any)))) (if (and bX35c3@ls/false (apply (lambda (bX35c5@name) (bX294d@id? bX35c5@name)) bX35c3@ls/false)) (apply (lambda (bX35c7@name) (bX359a@gen-name bX35c7@name)) bX35c3@ls/false) (let ((bX35c9@t bX35c1@t)) (let ((bX35cb@ls/false (bX2b54@syntax-dispatch bX35c9@t 'any))) (if (and bX35cb@ls/false (apply (lambda (bX35cd@name) (bX294d@id? bX35cd@name)) bX35cb@ls/false)) (apply (lambda (bX35cf@name) (bX359a@gen-name bX35cf@name)) bX35cb@ls/false) (let ((bX35d1@t bX35c9@t)) (let ((bX35d3@ls/false (bX2b54@syntax-dispatch bX35d1@t 'any))) (if bX35d3@ls/false (apply (lambda (bX35d5@others) (bX2c34@syntax-violation '#f '"invalid field spec" bX359b@field)) bX35d3@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX35d1@t)))))))))))))))))))) bX3596@fields))))) (set! bX3538@enumerate (lambda (bX358d@ls) (let bX3593@f ((bX358f@ls bX358d@ls) (bX3590@i '0)) (if (null? bX358f@ls) '() (cons bX3590@i (bX3593@f (cdr bX358f@ls) (+ bX3590@i '1))))))) (set! bX353a@do-define-record (lambda (bX3565@namespec bX3566@clause*) (let ((bX3569@foo (bX351e@get-record-name bX3565@namespec))) (let ((bX356b@foo-rtd (gensym))) (let ((bX356d@foo-rcd (gensym))) (let ((bX356f@protocol (gensym))) (let ((bX3571@make-foo (bX3520@get-record-constructor-name bX3565@namespec))) (let ((bX3573@fields (bX3530@get-fields bX3566@clause*))) (let ((bX3575@idx* (bX3538@enumerate bX3573@fields))) (let ((bX3577@foo-x* (bX3536@get-accessors bX3569@foo bX3573@fields))) (let ((bX3579@set-foo-x!* (bX3534@get-mutators bX3569@foo bX3573@fields))) (let ((bX357b@set-foo-idx* (bX3532@get-mutator-indices bX3573@fields))) (let ((bX357d@foo? (bX3522@get-record-predicate-name bX3565@namespec))) (let ((bX357f@foo-rtd-code (bX3526@foo-rtd-code bX3569@foo bX3566@clause* (bX3528@parent-rtd-code bX3566@clause*)))) (let ((bX3581@foo-rcd-code (bX352c@foo-rcd-code bX3566@clause* bX356b@foo-rtd bX356f@protocol (bX352a@parent-rcd-code bX3566@clause*)))) (let ((bX3583@protocol-code (bX352e@get-protocol-code bX3566@clause*))) (bX2b0a@bless (cons 'begin (cons (list 'define bX356b@foo-rtd bX357f@foo-rtd-code) (cons (list 'define bX356f@protocol bX3583@protocol-code) (cons (list 'define bX356d@foo-rcd bX3581@foo-rcd-code) (cons (list 'define-syntax bX3569@foo (list 'list ''$rtd (list 'syntax bX356b@foo-rtd) (list 'syntax bX356d@foo-rcd))) (cons (list 'define bX357d@foo? (list 'record-predicate bX356b@foo-rtd)) (cons (list 'define bX3571@make-foo (list 'record-constructor bX356d@foo-rcd)) (append (map (lambda (bX3585@foo-x bX3586@idx) (list 'define bX3585@foo-x (list 'record-accessor bX356b@foo-rtd bX3586@idx))) bX3577@foo-x* bX3575@idx*) (map (lambda (bX3589@set-foo-x! bX358a@idx) (list 'define bX3589@set-foo-x! (list 'record-mutator bX356b@foo-rtd bX358a@idx))) bX3579@set-foo-x!* bX357b@set-foo-idx*)))))))))))))))))))))))))) (set! bX353c@verify-clauses (lambda (bX3545@x bX3546@cls*) (let ((bX354a@valid-kwds '#f) (bX354c@free-id-member? '#f)) (begin (set! bX354a@valid-kwds (map bX2b0a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! bX354c@free-id-member? (lambda (bX3561@x bX3562@ls) (and (pair? bX3562@ls) (or (bX2953@free-id=? bX3561@x (car bX3562@ls)) (bX354c@free-id-member? bX3561@x (cdr bX3562@ls)))))) (let bX3551@f ((bX354d@cls* bX3546@cls*) (bX354e@seen* '())) (if (not (null? bX354d@cls*)) (let ((bX3553@t (car bX354d@cls*))) (let ((bX3555@ls/false (bX2b54@syntax-dispatch bX3553@t '(any . any)))) (if bX3555@ls/false (apply (lambda (bX3557@kwd bX3558@rest) (if (or (not (bX294d@id? bX3557@kwd)) (not (bX354c@free-id-member? bX3557@kwd bX354a@valid-kwds))) (bX2c34@syntax-violation '#f '"not a valid define-record-type keyword" bX3557@kwd) (if (bX2959@bound-id-member? bX3557@kwd bX354e@seen*) (bX2c34@syntax-violation '#f '"duplicate use of keyword " bX3545@x bX3557@kwd) (bX3551@f (cdr bX354d@cls*) (cons bX3557@kwd bX354e@seen*))))) bX3555@ls/false) (let ((bX355b@t bX3553@t)) (let ((bX355d@ls/false (bX2b54@syntax-dispatch bX355b@t 'any))) (if bX355d@ls/false (apply (lambda (bX355f@cls) (bX2c34@syntax-violation '#f '"malformed define-record-type clause" bX355f@cls)) bX355d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX355b@t))))))) (void))))))) (let ((bX353d@t bX3519@x)) (let ((bX353f@ls/false (bX2b54@syntax-dispatch bX353d@t '(_ any . each-any)))) (if bX353f@ls/false (apply (lambda (bX3541@namespec bX3542@clause*) (begin (bX353c@verify-clauses bX3519@x bX3542@clause*) (bX353a@do-define-record bX3541@namespec bX3542@clause*))) bX353f@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX353d@t)))))))) (set! bX4624@bX2b48@define-record-type-macro bX2b48@define-record-type-macro) (set! bX2b4a@define-condition-type-macro (lambda (bX3715@x) (let ((bX3718@mkname '#f)) (begin (set! bX3718@mkname (lambda (bX3745@name bX3746@suffix) (bX2c38@datum->syntax bX3745@name (string->symbol (string-append (symbol->string (bX2c3a@syntax->datum bX3745@name)) bX3746@suffix))))) (let ((bX3719@t bX3715@x)) (let ((bX371b@ls/false (bX2b54@syntax-dispatch bX3719@t '(any any any any any . #(each (any any)))))) (if (and bX371b@ls/false (apply (lambda (bX371d@ctxt bX371e@name bX371f@super bX3720@constructor bX3721@predicate bX3722@field* bX3723@accessor*) (and (bX294d@id? bX371e@name) (bX294d@id? bX371f@super) (bX294d@id? bX3720@constructor) (bX294d@id? bX3721@predicate) (for-all bX294d@id? bX3722@field*) (for-all bX294d@id? bX3723@accessor*))) bX371b@ls/false)) (apply (lambda (bX372b@ctxt bX372c@name bX372d@super bX372e@constructor bX372f@predicate bX3730@field* bX3731@accessor*) (let ((bX3739@aux-accessor* (map (lambda (bX373b@x) (gensym)) bX3731@accessor*))) (bX2b0a@bless (cons 'begin (cons (cons 'define-record-type (cons (list bX372c@name bX372e@constructor (gensym)) (cons (list 'parent bX372d@super) (cons (cons 'fields (map (lambda (bX373d@field bX373e@aux) (list 'immutable bX373d@field bX373e@aux)) bX3730@field* bX3739@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bX372f@predicate (list 'condition-predicate (list 'record-type-descriptor bX372c@name))) (map (lambda (bX3741@accessor bX3742@aux) (list 'define bX3741@accessor (list 'condition-accessor (list 'record-type-descriptor bX372c@name) bX3742@aux))) bX3731@accessor* bX3739@aux-accessor*))))))) bX371b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3719@t)))))))) (set! bX4625@bX2b4a@define-condition-type-macro bX2b4a@define-condition-type-macro) (set! bX2b4c@incorrect-usage-macro (lambda (bX3749@e) (bX2c34@syntax-violation '#f '"incorrect usage of auxiliary keyword" bX3749@e))) (set! bX4626@bX2b4c@incorrect-usage-macro bX2b4c@incorrect-usage-macro) (set! bX2b4e@parameterize-macro (lambda (bX374b@e) (let ((bX374d@t bX374b@e)) (let ((bX374f@ls/false (bX2b54@syntax-dispatch bX374d@t '(_ () any . each-any)))) (if bX374f@ls/false (apply (lambda (bX3751@b bX3752@b*) (bX2b0a@bless (cons 'let (cons '() (cons bX3751@b bX3752@b*))))) bX374f@ls/false) (let ((bX3755@t bX374d@t)) (let ((bX3757@ls/false (bX2b54@syntax-dispatch bX3755@t '(_ #(each (any any)) any . each-any)))) (if bX3757@ls/false (apply (lambda (bX3759@olhs* bX375a@orhs* bX375b@b bX375c@b*) (let ((bX3761@lhs* (bX2c22@generate-temporaries bX3759@olhs*)) (bX3762@rhs* (bX2c22@generate-temporaries bX375a@orhs*))) (bX2b0a@bless (cons (list 'lambda (append bX3761@lhs* bX3762@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bX3765@lhs bX3766@rhs) (list 'let (list (list 't (list bX3765@lhs))) (list bX3765@lhs bX3766@rhs) (cons 'set! (cons bX3766@rhs '(t))))) bX3761@lhs* bX3762@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bX375b@b bX375c@b*))) '(swap)))))) (append bX3759@olhs* bX375a@orhs*))))) bX3757@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3755@t))))))))) (set! bX4627@bX2b4e@parameterize-macro bX2b4e@parameterize-macro) (set! bX2b50@foreign-call-transformer (lambda (bX3769@e bX376a@r bX376b@mr) (let ((bX376f@t bX3769@e)) (let ((bX3771@ls/false (bX2b54@syntax-dispatch bX376f@t '(_ any . each-any)))) (if bX3771@ls/false (apply (lambda (bX3773@name bX3774@arg*) (cons 'foreign-call (cons (bX2b76@chi-expr bX3773@name bX376a@r bX376b@mr) (bX2b72@chi-expr* bX3774@arg* bX376a@r bX376b@mr)))) bX3771@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX376f@t)))))) (set! bX4628@bX2b50@foreign-call-transformer bX2b50@foreign-call-transformer) (set! bX2b52@convert-pattern (lambda (bX3777@pattern bX3778@keys) (let ((bX377c@cvt* '#f) (bX377e@cvt '#f)) (begin (set! bX377c@cvt* (lambda (bX381b@p* bX381c@n bX381d@ids) (if (null? bX381b@p*) (values '() bX381d@ids) (call-with-values (lambda () (bX377c@cvt* (cdr bX381b@p*) bX381c@n bX381d@ids)) (lambda (bX3825@bX3822 bX3826@bX3824) (let ((bX3829@ids bX3826@bX3824) (bX382a@y bX3825@bX3822)) (call-with-values (lambda () (bX377e@cvt (car bX381b@p*) bX381c@n bX3829@ids)) (lambda (bX3831@bX382e bX3832@bX3830) (let ((bX3835@ids bX3832@bX3830) (bX3836@x bX3831@bX382e)) (values (cons bX3836@x bX382a@y) bX3835@ids)))))))))) (set! bX377e@cvt (lambda (bX377f@p bX3780@n bX3781@ids) (let ((bX3785@t bX377f@p)) (let ((bX3787@ls/false (bX2b54@syntax-dispatch bX3785@t 'any))) (if (and bX3787@ls/false (apply (lambda (bX3789@id) (bX294d@id? bX3789@id)) bX3787@ls/false)) (apply (lambda (bX378b@id) (if (bX2959@bound-id-member? bX377f@p bX3778@keys) (values (vector 'free-id bX377f@p) bX3781@ids) (if (bX2953@free-id=? bX377f@p (bX2adc@scheme-stx '_)) (values '_ bX3781@ids) (values 'any (cons (cons bX377f@p bX3780@n) bX3781@ids))))) bX3787@ls/false) (let ((bX378d@t bX3785@t)) (let ((bX378f@ls/false (bX2b54@syntax-dispatch bX378d@t '(any any)))) (if (and bX378f@ls/false (apply (lambda (bX3791@p bX3792@dots) (bX2b56@ellipsis? bX3792@dots)) bX378f@ls/false)) (apply (lambda (bX3795@p bX3796@dots) (call-with-values (lambda () (bX377e@cvt bX3795@p (+ bX3780@n '1) bX3781@ids)) (lambda (bX379d@bX379a bX379e@bX379c) (let ((bX37a1@ids bX379e@bX379c) (bX37a2@p bX379d@bX379a)) (values (if (eq? bX37a2@p 'any) 'each-any (vector 'each bX37a2@p)) bX37a1@ids))))) bX378f@ls/false) (let ((bX37a5@t bX378d@t)) (let ((bX37a7@ls/false (bX2b54@syntax-dispatch bX37a5@t '(any any . #(each+ any () any))))) (if (and bX37a7@ls/false (apply (lambda (bX37a9@x bX37aa@dots bX37ab@ys bX37ac@z) (bX2b56@ellipsis? bX37aa@dots)) bX37a7@ls/false)) (apply (lambda (bX37b1@x bX37b2@dots bX37b3@ys bX37b4@z) (call-with-values (lambda () (bX377e@cvt bX37b4@z bX3780@n bX3781@ids)) (lambda (bX37bd@bX37ba bX37be@bX37bc) (let ((bX37c1@ids bX37be@bX37bc) (bX37c2@z bX37bd@bX37ba)) (call-with-values (lambda () (bX377c@cvt* bX37b3@ys bX3780@n bX37c1@ids)) (lambda (bX37c9@bX37c6 bX37ca@bX37c8) (let ((bX37cd@ids bX37ca@bX37c8) (bX37ce@ys bX37c9@bX37c6)) (call-with-values (lambda () (bX377e@cvt bX37b1@x (+ bX3780@n '1) bX37cd@ids)) (lambda (bX37d5@bX37d2 bX37d6@bX37d4) (let ((bX37d9@ids bX37d6@bX37d4) (bX37da@x bX37d5@bX37d2)) (values (vector 'each+ bX37da@x (reverse bX37ce@ys) bX37c2@z) bX37d9@ids))))))))))) bX37a7@ls/false) (let ((bX37dd@t bX37a5@t)) (let ((bX37df@ls/false (bX2b54@syntax-dispatch bX37dd@t '(any . any)))) (if bX37df@ls/false (apply (lambda (bX37e1@x bX37e2@y) (call-with-values (lambda () (bX377e@cvt bX37e2@y bX3780@n bX3781@ids)) (lambda (bX37e9@bX37e6 bX37ea@bX37e8) (let ((bX37ed@ids bX37ea@bX37e8) (bX37ee@y bX37e9@bX37e6)) (call-with-values (lambda () (bX377e@cvt bX37e1@x bX3780@n bX37ed@ids)) (lambda (bX37f5@bX37f2 bX37f6@bX37f4) (let ((bX37f9@ids bX37f6@bX37f4) (bX37fa@x bX37f5@bX37f2)) (values (cons bX37fa@x bX37ee@y) bX37f9@ids)))))))) bX37df@ls/false) (let ((bX37fd@t bX37dd@t)) (let ((bX37ff@ls/false (bX2b54@syntax-dispatch bX37fd@t '()))) (if bX37ff@ls/false (apply (lambda () (values '() bX3781@ids)) bX37ff@ls/false) (let ((bX3801@t bX37fd@t)) (let ((bX3803@ls/false (bX2b54@syntax-dispatch bX3801@t '#(vector each-any)))) (if (and bX3803@ls/false (apply (lambda (bX3805@p) (not (bX2919@stx? bX3805@p))) bX3803@ls/false)) (apply (lambda (bX3807@p) (call-with-values (lambda () (bX377e@cvt bX3807@p bX3780@n bX3781@ids)) (lambda (bX380d@bX380a bX380e@bX380c) (let ((bX3811@ids bX380e@bX380c) (bX3812@p bX380d@bX380a)) (values (vector 'vector bX3812@p) bX3811@ids))))) bX3803@ls/false) (let ((bX3815@t bX3801@t)) (let ((bX3817@ls/false (bX2b54@syntax-dispatch bX3815@t 'any))) (if bX3817@ls/false (apply (lambda (bX3819@datum) (values (vector 'atom (bX2961@stx->datum bX3819@datum)) bX3781@ids)) bX3817@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3815@t)))))))))))))))))))))))) (bX377e@cvt bX3777@pattern '0 '()))))) (set! bX4629@bX2b52@convert-pattern bX2b52@convert-pattern) (set! bX2b54@syntax-dispatch (let ((bX383a@stx^ '#f) (bX383c@match-each '#f) (bX383e@match-each+ '#f) (bX3840@match-each-any '#f) (bX3842@match-empty '#f) (bX3844@combine '#f) (bX3846@match* '#f) (bX3848@match '#f)) (begin (set! bX383a@stx^ (lambda (bX3915@e bX3916@m* bX3917@s* bX3918@ae*) (if (and (null? bX3916@m*) (null? bX3917@s*) (null? bX3918@ae*)) bX3915@e (bX2935@mkstx bX3915@e bX3916@m* bX3917@s* bX3918@ae*)))) (set! bX383c@match-each (lambda (bX38f5@e bX38f6@p bX38f7@m* bX38f8@s* bX38f9@ae*) (if (pair? bX38f5@e) (let ((bX38ff@first (bX3848@match (car bX38f5@e) bX38f6@p bX38f7@m* bX38f8@s* bX38f9@ae* '()))) (and bX38ff@first (let ((bX3901@rest (bX383c@match-each (cdr bX38f5@e) bX38f6@p bX38f7@m* bX38f8@s* bX38f9@ae*))) (and bX3901@rest (cons bX38ff@first bX3901@rest))))) (if (null? bX38f5@e) '() (if (bX2919@stx? bX38f5@e) (and (not (bX28d3@top-marked? bX38f7@m*)) (call-with-values (lambda () (join-wraps bX38f7@m* bX38f8@s* bX38f9@ae* bX38f5@e)) (lambda (bX3909@bX3904 bX390a@bX3906 bX390b@bX3908) (let ((bX390f@ae* bX390b@bX3908) (bX3910@s* bX390a@bX3906) (bX3911@m* bX3909@bX3904)) (bX383c@match-each (bX291b@stx-expr bX38f5@e) bX38f6@p bX3911@m* bX3910@s* bX390f@ae*))))) (if (bX248c@bX2360@annotation? bX38f5@e) (bX383c@match-each (bX248e@bX2364@annotation-expression bX38f5@e) bX38f6@p bX38f7@m* bX38f8@s* bX38f9@ae*) '#f)))))) (set! bX383e@match-each+ (lambda (bX38b5@e bX38b6@x-pat bX38b7@y-pat bX38b8@z-pat bX38b9@m* bX38ba@s* bX38bb@ae* bX38bc@r) (let bX38cd@f ((bX38c5@e bX38b5@e) (bX38c6@m* bX38b9@m*) (bX38c7@s* bX38ba@s*) (bX38c8@ae* bX38bb@ae*)) (if (pair? bX38c5@e) (call-with-values (lambda () (bX38cd@f (cdr bX38c5@e) bX38c6@m* bX38c7@s* bX38c8@ae*)) (lambda (bX38d5@bX38d0 bX38d6@bX38d2 bX38d7@bX38d4) (let ((bX38db@r bX38d7@bX38d4) (bX38dc@y-pat bX38d6@bX38d2) (bX38dd@xr* bX38d5@bX38d0)) (if bX38db@r (if (null? bX38dc@y-pat) (let ((bX38e1@xr (bX3848@match (car bX38c5@e) bX38b6@x-pat bX38c6@m* bX38c7@s* bX38c8@ae* '()))) (if bX38e1@xr (values (cons bX38e1@xr bX38dd@xr*) bX38dc@y-pat bX38db@r) (values '#f '#f '#f))) (values '() (cdr bX38dc@y-pat) (bX3848@match (car bX38c5@e) (car bX38dc@y-pat) bX38c6@m* bX38c7@s* bX38c8@ae* bX38db@r))) (values '#f '#f '#f))))) (if (bX2919@stx? bX38c5@e) (if (bX28d3@top-marked? bX38c6@m*) (values '() bX38b7@y-pat (bX3848@match bX38c5@e bX38b8@z-pat bX38c6@m* bX38c7@s* bX38c8@ae* bX38bc@r)) (call-with-values (lambda () (join-wraps bX38c6@m* bX38c7@s* bX38c8@ae* bX38c5@e)) (lambda (bX38e9@bX38e4 bX38ea@bX38e6 bX38eb@bX38e8) (let ((bX38ef@ae* bX38eb@bX38e8) (bX38f0@s* bX38ea@bX38e6) (bX38f1@m* bX38e9@bX38e4)) (bX38cd@f (bX291b@stx-expr bX38c5@e) bX38f1@m* bX38f0@s* bX38ef@ae*))))) (if (bX248c@bX2360@annotation? bX38c5@e) (bX38cd@f (bX248e@bX2364@annotation-expression bX38c5@e) bX38c6@m* bX38c7@s* bX38c8@ae*) (values '() bX38b7@y-pat (bX3848@match bX38c5@e bX38b8@z-pat bX38c6@m* bX38c7@s* bX38c8@ae* bX38bc@r)))))))) (set! bX3840@match-each-any (lambda (bX3899@e bX389a@m* bX389b@s* bX389c@ae*) (if (pair? bX3899@e) (let ((bX38a1@l (bX3840@match-each-any (cdr bX3899@e) bX389a@m* bX389b@s* bX389c@ae*))) (and bX38a1@l (cons (bX383a@stx^ (car bX3899@e) bX389a@m* bX389b@s* bX389c@ae*) bX38a1@l))) (if (null? bX3899@e) '() (if (bX2919@stx? bX3899@e) (and (not (bX28d3@top-marked? bX389a@m*)) (call-with-values (lambda () (join-wraps bX389a@m* bX389b@s* bX389c@ae* bX3899@e)) (lambda (bX38a9@bX38a4 bX38aa@bX38a6 bX38ab@bX38a8) (let ((bX38af@ae* bX38ab@bX38a8) (bX38b0@s* bX38aa@bX38a6) (bX38b1@m* bX38a9@bX38a4)) (bX3840@match-each-any (bX291b@stx-expr bX3899@e) bX38b1@m* bX38b0@s* bX38af@ae*))))) (if (bX248c@bX2360@annotation? bX3899@e) (bX3840@match-each-any (bX248e@bX2364@annotation-expression bX3899@e) bX389a@m* bX389b@s* bX389c@ae*) '#f)))))) (set! bX3842@match-empty (lambda (bX3893@p bX3894@r) (if (null? bX3893@p) bX3894@r (if (eq? bX3893@p '_) bX3894@r (if (eq? bX3893@p 'any) (cons '() bX3894@r) (if (pair? bX3893@p) (bX3842@match-empty (car bX3893@p) (bX3842@match-empty (cdr bX3893@p) bX3894@r)) (if (eq? bX3893@p 'each-any) (cons '() bX3894@r) (let ((bX3897@t (vector-ref bX3893@p '0))) (if (memv bX3897@t '(each)) (bX3842@match-empty (vector-ref bX3893@p '1) bX3894@r) (if (memv bX3897@t '(each+)) (bX3842@match-empty (vector-ref bX3893@p '1) (bX3842@match-empty (reverse (vector-ref bX3893@p '2)) (bX3842@match-empty (vector-ref bX3893@p '3) bX3894@r))) (if (memv bX3897@t '(free-id atom)) bX3894@r (if (memv bX3897@t '(scheme-id atom)) bX3894@r (if (memv bX3897@t '(vector)) (bX3842@match-empty (vector-ref bX3893@p '1) bX3894@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bX3893@p)))))))))))))) (set! bX3844@combine (lambda (bX388f@r* bX3890@r) (if (null? (car bX388f@r*)) bX3890@r (cons (map car bX388f@r*) (bX3844@combine (map cdr bX388f@r*) bX3890@r))))) (set! bX3846@match* (lambda (bX386b@e bX386c@p bX386d@m* bX386e@s* bX386f@ae* bX3870@r) (if (null? bX386c@p) (and (null? bX386b@e) bX3870@r) (if (pair? bX386c@p) (and (pair? bX386b@e) (bX3848@match (car bX386b@e) (car bX386c@p) bX386d@m* bX386e@s* bX386f@ae* (bX3848@match (cdr bX386b@e) (cdr bX386c@p) bX386d@m* bX386e@s* bX386f@ae* bX3870@r))) (if (eq? bX386c@p 'each-any) (let ((bX3877@l (bX3840@match-each-any bX386b@e bX386d@m* bX386e@s* bX386f@ae*))) (and bX3877@l (cons bX3877@l bX3870@r))) (let ((bX3879@t (vector-ref bX386c@p '0))) (if (memv bX3879@t '(each)) (if (null? bX386b@e) (bX3842@match-empty (vector-ref bX386c@p '1) bX3870@r) (let ((bX387b@r* (bX383c@match-each bX386b@e (vector-ref bX386c@p '1) bX386d@m* bX386e@s* bX386f@ae*))) (and bX387b@r* (bX3844@combine bX387b@r* bX3870@r)))) (if (memv bX3879@t '(free-id)) (and (symbol? bX386b@e) (bX28d3@top-marked? bX386d@m*) (bX2953@free-id=? (bX383a@stx^ bX386b@e bX386d@m* bX386e@s* bX386f@ae*) (vector-ref bX386c@p '1)) bX3870@r) (if (memv bX3879@t '(scheme-id)) (and (symbol? bX386b@e) (bX28d3@top-marked? bX386d@m*) (bX2953@free-id=? (bX383a@stx^ bX386b@e bX386d@m* bX386e@s* bX386f@ae*) (bX2adc@scheme-stx (vector-ref bX386c@p '1))) bX3870@r) (if (memv bX3879@t '(each+)) (call-with-values (lambda () (bX383e@match-each+ bX386b@e (vector-ref bX386c@p '1) (vector-ref bX386c@p '2) (vector-ref bX386c@p '3) bX386d@m* bX386e@s* bX386f@ae* bX3870@r)) (lambda (bX3883@bX387e bX3884@bX3880 bX3885@bX3882) (let ((bX3889@r bX3885@bX3882) (bX388a@y-pat bX3884@bX3880) (bX388b@xr* bX3883@bX387e)) (and bX3889@r (null? bX388a@y-pat) (if (null? bX388b@xr*) (bX3842@match-empty (vector-ref bX386c@p '1) bX3889@r) (bX3844@combine bX388b@xr* bX3889@r)))))) (if (memv bX3879@t '(atom)) (and (fast-equal? (vector-ref bX386c@p '1) (bX295f@strip bX386b@e bX386d@m*)) bX3870@r) (if (memv bX3879@t '(vector)) (and (vector? bX386b@e) (bX3848@match (vector->list bX386b@e) (vector-ref bX386c@p '1) bX386d@m* bX386e@s* bX386f@ae* bX3870@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bX386c@p))))))))))))) (set! bX3848@match (lambda (bX384d@e bX384e@p bX384f@m* bX3850@s* bX3851@ae* bX3852@r) (if (not bX3852@r) '#f (if (eq? bX384e@p '_) bX3852@r (if (eq? bX384e@p 'any) (cons (bX383a@stx^ bX384d@e bX384f@m* bX3850@s* bX3851@ae*) bX3852@r) (if (bX2919@stx? bX384d@e) (and (not (bX28d3@top-marked? bX384f@m*)) (call-with-values (lambda () (join-wraps bX384f@m* bX3850@s* bX3851@ae* bX384d@e)) (lambda (bX385f@bX385a bX3860@bX385c bX3861@bX385e) (let ((bX3865@ae* bX3861@bX385e) (bX3866@s* bX3860@bX385c) (bX3867@m* bX385f@bX385a)) (bX3848@match (bX291b@stx-expr bX384d@e) bX384e@p bX3867@m* bX3866@s* bX3865@ae* bX3852@r))))) (if (bX248c@bX2360@annotation? bX384d@e) (bX3848@match (bX248e@bX2364@annotation-expression bX384d@e) bX384e@p bX384f@m* bX3850@s* bX3851@ae* bX3852@r) (bX3846@match* bX384d@e bX384e@p bX384f@m* bX3850@s* bX3851@ae* bX3852@r)))))))) (lambda (bX3849@e bX384a@p) (bX3848@match bX3849@e bX384a@p '() '() '() '()))))) (set! bX462a@bX2b54@syntax-dispatch bX2b54@syntax-dispatch) (set! bX2b56@ellipsis? (lambda (bX391d@x) (and (bX294d@id? bX391d@x) (bX2953@free-id=? bX391d@x (bX2adc@scheme-stx '...))))) (set! bX462b@bX2b56@ellipsis? bX2b56@ellipsis?) (set! bX2b58@underscore? (lambda (bX391f@x) (and (bX294d@id? bX391f@x) (bX2953@free-id=? bX391f@x (bX2adc@scheme-stx '_))))) (set! bX462c@bX2b58@underscore? bX2b58@underscore?) (set! bX2b5a@verify-literals (lambda (bX3921@lits bX3922@expr) (for-each (lambda (bX3925@x) (if (or (not (bX294d@id? bX3925@x)) (bX2b56@ellipsis? bX3925@x) (bX2b58@underscore? bX3925@x)) (bX2c34@syntax-violation '#f '"invalid literal" bX3922@expr bX3925@x) (void))) bX3921@lits))) (set! bX462d@bX2b5a@verify-literals bX2b5a@verify-literals) (set! bX2b5c@syntax-case-transformer (let ((bX3928@build-dispatch-call '#f) (bX392a@invalid-ids-error '#f) (bX392c@gen-clause '#f) (bX392e@gen-syntax-case '#f)) (begin (set! bX3928@build-dispatch-call (lambda (bX3999@pvars bX399a@expr bX399b@y bX399c@r bX399d@mr) (let ((bX39a3@ids (map car bX3999@pvars)) (bX39a4@levels (map cdr bX3999@pvars))) (let ((bX39a7@labels (map bX28d9@gen-label bX39a3@ids)) (bX39a8@new-vars (map bX28d5@gen-lexical bX39a3@ids))) (let ((bX39ab@body (bX2b76@chi-expr (bX2939@add-subst (bX290d@make-full-rib bX39a3@ids bX39a7@labels) bX399a@expr) (append (map (lambda (bX39ad@label bX39ae@var bX39af@level) (cons bX39ad@label (bX2967@make-binding 'syntax (cons bX39ae@var bX39af@level)))) bX39a7@labels bX39a8@new-vars (map cdr bX3999@pvars)) bX399c@r) bX399d@mr))) (list '(primitive apply) (bX28b0@bX27dc@build-lambda '#f bX39a8@new-vars bX39ab@body) bX399b@y)))))) (set! bX392a@invalid-ids-error (lambda (bX398d@id* bX398e@e bX398f@class) (let bX3997@find ((bX3993@id* bX398d@id*) (bX3994@ok* '())) (if (null? bX3993@id*) (bX2c34@syntax-violation '#f '"invalid syntax" bX398e@e) (if (bX294d@id? (car bX3993@id*)) (if (bX2959@bound-id-member? (car bX3993@id*) bX3994@ok*) (bX2c30@syntax-error (car bX3993@id*) '"duplicate " bX398f@class) (bX3997@find (cdr bX3993@id*) (cons (car bX3993@id*) bX3994@ok*))) (bX2c30@syntax-error (car bX3993@id*) '"invalid " bX398f@class)))))) (set! bX392c@gen-clause (lambda (bX3965@x bX3966@keys bX3967@clauses bX3968@r bX3969@mr bX396a@pat bX396b@fender bX396c@expr) (call-with-values (lambda () (bX2b52@convert-pattern bX396a@pat bX3966@keys)) (lambda (bX3979@bX3976 bX397a@bX3978) (let ((bX397d@pvars bX397a@bX3978) (bX397e@p bX3979@bX3976)) (if (not (bX2957@distinct-bound-ids? (map car bX397d@pvars))) (bX392a@invalid-ids-error (map car bX397d@pvars) bX396a@pat '"pattern variable") (if (not (for-all (lambda (bX3981@x) (not (bX2b56@ellipsis? (car bX3981@x)))) bX397d@pvars)) (bX2c34@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bX396a@pat) (let ((bX3983@y (bX28d5@gen-lexical 'tmp))) (let ((bX3985@test (if (eq? bX396b@fender '#t) bX3983@y (let ((bX3987@call (bX3928@build-dispatch-call bX397d@pvars bX396b@fender bX3983@y bX3968@r bX3969@mr))) (list 'if bX3983@y bX3987@call (list 'quote '#f)))))) (let ((bX3989@conseq (bX3928@build-dispatch-call bX397d@pvars bX396c@expr bX3983@y bX3968@r bX3969@mr))) (let ((bX398b@altern (bX392e@gen-syntax-case bX3965@x bX3966@keys bX3967@clauses bX3968@r bX3969@mr))) (list (bX28b0@bX27dc@build-lambda '#f (list bX3983@y) (list 'if bX3985@test bX3989@conseq bX398b@altern)) (list '(primitive syntax-dispatch) bX3965@x (list 'quote bX397e@p)))))))))))))) (set! bX392e@gen-syntax-case (lambda (bX3943@x bX3944@keys bX3945@clauses bX3946@r bX3947@mr) (if (null? bX3945@clauses) (list '(primitive syntax-error) bX3943@x) (let ((bX394d@t (car bX3945@clauses))) (let ((bX394f@ls/false (bX2b54@syntax-dispatch bX394d@t '(any any)))) (if bX394f@ls/false (apply (lambda (bX3951@pat bX3952@expr) (if (and (bX294d@id? bX3951@pat) (not (bX2959@bound-id-member? bX3951@pat bX3944@keys)) (not (bX2b56@ellipsis? bX3951@pat))) (if (bX2953@free-id=? bX3951@pat (bX2adc@scheme-stx '_)) (bX2b76@chi-expr bX3952@expr bX3946@r bX3947@mr) (let ((bX3955@lab (bX28d9@gen-label bX3951@pat)) (bX3956@lex (bX28d5@gen-lexical bX3951@pat))) (let ((bX3959@body (bX2b76@chi-expr (bX2939@add-subst (bX290d@make-full-rib (list bX3951@pat) (list bX3955@lab)) bX3952@expr) (cons (cons bX3955@lab (bX2967@make-binding 'syntax (cons bX3956@lex '0))) bX3946@r) bX3947@mr))) (list (bX28b0@bX27dc@build-lambda '#f (list bX3956@lex) bX3959@body) bX3943@x)))) (bX392c@gen-clause bX3943@x bX3944@keys (cdr bX3945@clauses) bX3946@r bX3947@mr bX3951@pat '#t bX3952@expr))) bX394f@ls/false) (let ((bX395b@t bX394d@t)) (let ((bX395d@ls/false (bX2b54@syntax-dispatch bX395b@t '(any any any)))) (if bX395d@ls/false (apply (lambda (bX395f@pat bX3960@fender bX3961@expr) (bX392c@gen-clause bX3943@x bX3944@keys (cdr bX3945@clauses) bX3946@r bX3947@mr bX395f@pat bX3960@fender bX3961@expr)) bX395d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX395b@t)))))))))) (lambda (bX392f@e bX3930@r bX3931@mr) (let ((bX3935@t bX392f@e)) (let ((bX3937@ls/false (bX2b54@syntax-dispatch bX3935@t '(_ any each-any . each-any)))) (if bX3937@ls/false (apply (lambda (bX3939@expr bX393a@keys bX393b@clauses) (begin (bX2b5a@verify-literals bX393a@keys bX392f@e) (let ((bX393f@x (bX28d5@gen-lexical 'tmp))) (let ((bX3941@body (bX392e@gen-syntax-case bX393f@x bX393a@keys bX393b@clauses bX3930@r bX3931@mr))) (list (bX28b0@bX27dc@build-lambda '#f (list bX393f@x) bX3941@body) (bX2b76@chi-expr bX3939@expr bX3930@r bX3931@mr)))))) bX3937@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3935@t)))))))) (set! bX462e@bX2b5c@syntax-case-transformer bX2b5c@syntax-case-transformer) (set! bX2b5e@ellipsis-map (lambda (bX39b3@proc bX39b4@ls . bX39b7@ls*) (let ((bX39ba@who '#f)) (begin (set! bX39ba@who '...) (begin (if (not (list? bX39b4@ls)) (assertion-violation bX39ba@who '"not a list" bX39b4@ls) (void)) (if (not (null? bX39b7@ls*)) (let ((bX39bb@n (length bX39b4@ls))) (for-each (lambda (bX39bd@x) (begin (if (not (list? bX39bd@x)) (assertion-violation bX39ba@who '"not a list" bX39bd@x) (void)) (if (not (= (length bX39bd@x) bX39bb@n)) (assertion-violation bX39ba@who '"length mismatch" bX39b4@ls bX39bd@x) (void)))) bX39b7@ls*)) (void)) (apply map bX39b3@proc bX39b4@ls bX39b7@ls*)))))) (set! bX462f@bX2b5e@ellipsis-map bX2b5e@ellipsis-map) (set! bX2b60@syntax-transformer (let ((bX39c0@gen-syntax '#f) (bX39c2@gen-ref '#f) (bX39c4@gen-append '#f) (bX39c6@gen-mappend '#f) (bX39c8@gen-map '#f) (bX39ca@gen-cons '#f) (bX39cc@gen-vector '#f) (bX39ce@regen '#f)) (begin (set! bX39c0@gen-syntax (lambda (bX3a37@src bX3a38@e bX3a39@r bX3a3a@maps bX3a3b@ellipsis? bX3a3c@vec?) (let ((bX3a43@t bX3a38@e)) (let ((bX3a45@ls/false (bX2b54@syntax-dispatch bX3a43@t 'any))) (if (and bX3a45@ls/false (apply (lambda (bX3a47@dots) (bX3a3b@ellipsis? bX3a47@dots)) bX3a45@ls/false)) (apply (lambda (bX3a49@dots) (bX2c34@syntax-violation '#f '"misplaced ellipsis in syntax form" bX3a37@src)) bX3a45@ls/false) (let ((bX3a4b@t bX3a43@t)) (let ((bX3a4d@ls/false (bX2b54@syntax-dispatch bX3a4b@t 'any))) (if (and bX3a4d@ls/false (apply (lambda (bX3a4f@id) (bX294d@id? bX3a4f@id)) bX3a4d@ls/false)) (apply (lambda (bX3a51@id) (let ((bX3a53@label (bX2963@id->label bX3a38@e))) (let ((bX3a55@b (bX2965@label->binding bX3a53@label bX3a39@r))) (if (eq? (bX2969@binding-type bX3a55@b) 'syntax) (call-with-values (lambda () (let ((bX3a5b@var.lev (bX296b@binding-value bX3a55@b))) (bX39c2@gen-ref bX3a37@src (car bX3a5b@var.lev) (cdr bX3a5b@var.lev) bX3a3a@maps))) (lambda (bX3a5d@bX3a58 bX3a5e@bX3a5a) (let ((bX3a61@maps bX3a5e@bX3a5a) (bX3a62@var bX3a5d@bX3a58)) (values (list 'ref bX3a62@var) bX3a61@maps)))) (values (list 'quote bX3a38@e) bX3a3a@maps))))) bX3a4d@ls/false) (let ((bX3a65@t bX3a4b@t)) (let ((bX3a67@ls/false (bX2b54@syntax-dispatch bX3a65@t '(any any)))) (if (and bX3a67@ls/false (apply (lambda (bX3a69@dots bX3a6a@e) (bX3a3b@ellipsis? bX3a69@dots)) bX3a67@ls/false)) (apply (lambda (bX3a6d@dots bX3a6e@e) (if bX3a3c@vec? (bX2c34@syntax-violation '#f '"misplaced ellipsis in syntax form" bX3a37@src) (bX39c0@gen-syntax bX3a37@src bX3a6e@e bX3a39@r bX3a3a@maps (lambda (bX3a71@x) '#f) '#f))) bX3a67@ls/false) (let ((bX3a73@t bX3a65@t)) (let ((bX3a75@ls/false (bX2b54@syntax-dispatch bX3a73@t '(any any . any)))) (if (and bX3a75@ls/false (apply (lambda (bX3a77@x bX3a78@dots bX3a79@y) (bX3a3b@ellipsis? bX3a78@dots)) bX3a75@ls/false)) (apply (lambda (bX3a7d@x bX3a7e@dots bX3a7f@y) (let bX3a95@f ((bX3a83@y bX3a7f@y) (bX3a84@k (lambda (bX3a87@maps) (call-with-values (lambda () (bX39c0@gen-syntax bX3a37@src bX3a7d@x bX3a39@r (cons '() bX3a87@maps) bX3a3b@ellipsis? '#f)) (lambda (bX3a8d@bX3a8a bX3a8e@bX3a8c) (let ((bX3a91@maps bX3a8e@bX3a8c) (bX3a92@x bX3a8d@bX3a8a)) (if (null? (car bX3a91@maps)) (bX2c34@syntax-violation '#f '"extra ellipsis in syntax form" bX3a37@src) (values (bX39c8@gen-map bX3a92@x (car bX3a91@maps)) (cdr bX3a91@maps))))))))) (let ((bX3a97@t bX3a83@y)) (let ((bX3a99@ls/false (bX2b54@syntax-dispatch bX3a97@t '()))) (if bX3a99@ls/false (apply (lambda () (bX3a84@k bX3a3a@maps)) bX3a99@ls/false) (let ((bX3a9b@t bX3a97@t)) (let ((bX3a9d@ls/false (bX2b54@syntax-dispatch bX3a9b@t '(any . any)))) (if (and bX3a9d@ls/false (apply (lambda (bX3a9f@dots bX3aa0@y) (bX3a3b@ellipsis? bX3a9f@dots)) bX3a9d@ls/false)) (apply (lambda (bX3aa3@dots bX3aa4@y) (bX3a95@f bX3aa4@y (lambda (bX3aa7@maps) (call-with-values (lambda () (bX3a84@k (cons '() bX3aa7@maps))) (lambda (bX3aad@bX3aaa bX3aae@bX3aac) (let ((bX3ab1@maps bX3aae@bX3aac) (bX3ab2@x bX3aad@bX3aaa)) (if (null? (car bX3ab1@maps)) (bX2c34@syntax-violation '#f '"extra ellipsis in syntax form" bX3a37@src) (values (bX39c6@gen-mappend bX3ab2@x (car bX3ab1@maps)) (cdr bX3ab1@maps))))))))) bX3a9d@ls/false) (let ((bX3ab5@t bX3a9b@t)) (let ((bX3ab7@ls/false (bX2b54@syntax-dispatch bX3ab5@t '_))) (if bX3ab7@ls/false (apply (lambda () (call-with-values (lambda () (bX39c0@gen-syntax bX3a37@src bX3a83@y bX3a39@r bX3a3a@maps bX3a3b@ellipsis? bX3a3c@vec?)) (lambda (bX3abd@bX3aba bX3abe@bX3abc) (let ((bX3ac1@maps bX3abe@bX3abc) (bX3ac2@y bX3abd@bX3aba)) (call-with-values (lambda () (bX3a84@k bX3ac1@maps)) (lambda (bX3ac9@bX3ac6 bX3aca@bX3ac8) (let ((bX3acd@maps bX3aca@bX3ac8) (bX3ace@x bX3ac9@bX3ac6)) (values (bX39c4@gen-append bX3ace@x bX3ac2@y) bX3acd@maps)))))))) bX3ab7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3ab5@t)))))))))))) bX3a75@ls/false) (let ((bX3ad1@t bX3a73@t)) (let ((bX3ad3@ls/false (bX2b54@syntax-dispatch bX3ad1@t '(any . any)))) (if bX3ad3@ls/false (apply (lambda (bX3ad5@x bX3ad6@y) (call-with-values (lambda () (bX39c0@gen-syntax bX3a37@src bX3ad5@x bX3a39@r bX3a3a@maps bX3a3b@ellipsis? '#f)) (lambda (bX3add@bX3ada bX3ade@bX3adc) (let ((bX3ae1@maps bX3ade@bX3adc) (bX3ae2@xnew bX3add@bX3ada)) (call-with-values (lambda () (bX39c0@gen-syntax bX3a37@src bX3ad6@y bX3a39@r bX3ae1@maps bX3a3b@ellipsis? bX3a3c@vec?)) (lambda (bX3ae9@bX3ae6 bX3aea@bX3ae8) (let ((bX3aed@maps bX3aea@bX3ae8) (bX3aee@ynew bX3ae9@bX3ae6)) (values (bX39ca@gen-cons bX3a38@e bX3ad5@x bX3ad6@y bX3ae2@xnew bX3aee@ynew) bX3aed@maps)))))))) bX3ad3@ls/false) (let ((bX3af1@t bX3ad1@t)) (let ((bX3af3@ls/false (bX2b54@syntax-dispatch bX3af1@t '#(vector each-any)))) (if bX3af3@ls/false (apply (lambda (bX3af5@ls) (call-with-values (lambda () (bX39c0@gen-syntax bX3a37@src bX3af5@ls bX3a39@r bX3a3a@maps bX3a3b@ellipsis? '#t)) (lambda (bX3afb@bX3af8 bX3afc@bX3afa) (let ((bX3aff@maps bX3afc@bX3afa) (bX3b00@lsnew bX3afb@bX3af8)) (values (bX39cc@gen-vector bX3a38@e bX3af5@ls bX3b00@lsnew) bX3aff@maps))))) bX3af3@ls/false) (let ((bX3b03@t bX3af1@t)) (let ((bX3b05@ls/false (bX2b54@syntax-dispatch bX3b03@t '_))) (if bX3b05@ls/false (apply (lambda () (values (list 'quote bX3a38@e) bX3a3a@maps)) bX3b05@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3b03@t)))))))))))))))))))))))) (set! bX39c2@gen-ref (lambda (bX3a1d@src bX3a1e@var bX3a1f@level bX3a20@maps) (if (= bX3a1f@level '0) (values bX3a1e@var bX3a20@maps) (if (null? bX3a20@maps) (bX2c34@syntax-violation '#f '"missing ellipsis in syntax form" bX3a1d@src) (call-with-values (lambda () (bX39c2@gen-ref bX3a1d@src bX3a1e@var (- bX3a1f@level '1) (cdr bX3a20@maps))) (lambda (bX3a29@bX3a26 bX3a2a@bX3a28) (let ((bX3a2d@outer-maps bX3a2a@bX3a28) (bX3a2e@outer-var bX3a29@bX3a26)) (let ((bX3a31@t (assq bX3a2e@outer-var (car bX3a20@maps)))) (if bX3a31@t ((lambda (bX3a33@b) (values (cdr bX3a33@b) bX3a20@maps)) bX3a31@t) (let ((bX3a35@inner-var (bX28d5@gen-lexical 'tmp))) (values bX3a35@inner-var (cons (cons (cons bX3a2e@outer-var bX3a35@inner-var) (car bX3a20@maps)) bX3a2d@outer-maps)))))))))))) (set! bX39c4@gen-append (lambda (bX3a19@x bX3a1a@y) (if (fast-equal? bX3a1a@y ''()) bX3a19@x (list 'append bX3a19@x bX3a1a@y)))) (set! bX39c6@gen-mappend (lambda (bX3a15@e bX3a16@map-env) (list 'apply '(primitive append) (bX39c8@gen-map bX3a15@e bX3a16@map-env)))) (set! bX39c8@gen-map (lambda (bX3a03@e bX3a04@map-env) (let ((bX3a07@formals (map cdr bX3a04@map-env)) (bX3a08@actuals (map (lambda (bX3a0b@x) (list 'ref (car bX3a0b@x))) bX3a04@map-env))) (if (eq? (car bX3a03@e) 'ref) (car bX3a08@actuals) (if (for-all (lambda (bX3a0d@x) (and (eq? (car bX3a0d@x) 'ref) (memq (cadr bX3a0d@x) bX3a07@formals))) (cdr bX3a03@e)) (let ((bX3a0f@args (map (let ((bX3a11@r (map cons bX3a07@formals bX3a08@actuals))) (lambda (bX3a13@x) (cdr (assq (cadr bX3a13@x) bX3a11@r)))) (cdr bX3a03@e)))) (cons 'map (cons (list 'primitive (car bX3a03@e)) bX3a0f@args))) (cons* 'map (list 'lambda bX3a07@formals bX3a03@e) bX3a08@actuals)))))) (set! bX39ca@gen-cons (lambda (bX39f3@e bX39f4@x bX39f5@y bX39f6@xnew bX39f7@ynew) (let ((bX39fd@t (car bX39f7@ynew))) (if (memv bX39fd@t '(quote)) (if (eq? (car bX39f6@xnew) 'quote) (let ((bX39ff@xnew (cadr bX39f6@xnew)) (bX3a00@ynew (cadr bX39f7@ynew))) (if (and (eq? bX39ff@xnew bX39f4@x) (eq? bX3a00@ynew bX39f5@y)) (list 'quote bX39f3@e) (list 'quote (cons bX39ff@xnew bX3a00@ynew)))) (if (null? (cadr bX39f7@ynew)) (list 'list bX39f6@xnew) (list 'cons bX39f6@xnew bX39f7@ynew))) (if (memv bX39fd@t '(list)) (cons 'list (cons bX39f6@xnew (cdr bX39f7@ynew))) (list 'cons bX39f6@xnew bX39f7@ynew)))))) (set! bX39cc@gen-vector (lambda (bX39ed@e bX39ee@ls bX39ef@lsnew) (if (eq? (car bX39ef@lsnew) 'quote) (if (eq? (cadr bX39ef@lsnew) bX39ee@ls) (list 'quote bX39ed@e) (list 'quote (list->vector (cadr bX39ef@lsnew)))) (if (eq? (car bX39ef@lsnew) 'list) (cons 'vector (cdr bX39ef@lsnew)) (list 'list->vector bX39ef@lsnew))))) (set! bX39ce@regen (lambda (bX39e7@x) (let ((bX39e9@t (car bX39e7@x))) (if (memv bX39e9@t '(ref)) (cadr bX39e7@x) (if (memv bX39e9@t '(primitive)) (list 'primitive (cadr bX39e7@x)) (if (memv bX39e9@t '(quote)) (list 'quote (cadr bX39e7@x)) (if (memv bX39e9@t '(lambda)) (bX28b0@bX27dc@build-lambda '#f (cadr bX39e7@x) (bX39ce@regen (caddr bX39e7@x))) (if (memv bX39e9@t '(map)) (let ((bX39eb@ls (map bX39ce@regen (cdr bX39e7@x)))) (cons '(primitive ellipsis-map) bX39eb@ls)) (cons (list 'primitive (car bX39e7@x)) (map bX39ce@regen (cdr bX39e7@x))))))))))) (lambda (bX39cf@e bX39d0@r bX39d1@mr) (let ((bX39d5@t bX39cf@e)) (let ((bX39d7@ls/false (bX2b54@syntax-dispatch bX39d5@t '(_ any)))) (if bX39d7@ls/false (apply (lambda (bX39d9@x) (call-with-values (lambda () (bX39c0@gen-syntax bX39cf@e bX39d9@x bX39d0@r '() bX2b56@ellipsis? '#f)) (lambda (bX39df@bX39dc bX39e0@bX39de) (let ((bX39e3@maps bX39e0@bX39de) (bX39e4@e bX39df@bX39dc)) (bX39ce@regen bX39e4@e))))) bX39d7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX39d5@t)))))))) (set! bX4630@bX2b60@syntax-transformer bX2b60@syntax-transformer) (set! bX2b62@core-macro-transformer (lambda (bX3b07@name) (let ((bX3b09@t bX3b07@name)) (if (memv bX3b09@t '(quote)) bX2b04@quote-transformer (if (memv bX3b09@t '(lambda)) bX2b08@lambda-transformer (if (memv bX3b09@t '(case-lambda)) bX2b06@case-lambda-transformer (if (memv bX3b09@t '(letrec)) bX2aec@letrec-transformer (if (memv bX3b09@t '(letrec*)) bX2aee@letrec*-transformer (if (memv bX3b09@t '(let)) bX2aea@let-transformer (if (memv bX3b09@t '(if)) bX2afc@if-transformer (if (memv bX3b09@t '(and)) bX2afe@and-transformer (if (memv bX3b09@t '(or)) bX2b00@or-transformer (if (memv bX3b09@t '(foreign-call)) bX2b50@foreign-call-transformer (if (memv bX3b09@t '(syntax-case)) bX2b5c@syntax-case-transformer (if (memv bX3b09@t '(syntax)) bX2b60@syntax-transformer (if (memv bX3b09@t '(type-descriptor)) bX2af2@type-descriptor-transformer (if (memv bX3b09@t '(record-type-descriptor)) bX2af4@record-type-descriptor-transformer (if (memv bX3b09@t '(record-constructor-descriptor)) bX2af6@record-constructor-descriptor-transformer (if (memv bX3b09@t '(fluid-let-syntax)) bX2af0@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bX3b07@name)))))))))))))))))))) (set! bX4631@bX2b62@core-macro-transformer bX2b62@core-macro-transformer) (set! bX2b64@symbol-macro (lambda (bX3b0b@x bX3b0c@set) (let ((bX3b0f@t bX3b0b@x)) (let ((bX3b11@ls/false (bX2b54@syntax-dispatch bX3b0f@t '(_ any)))) (if (and bX3b11@ls/false (apply (lambda (bX3b13@name) (and (bX294d@id? bX3b13@name) (memq (bX294f@id->sym bX3b13@name) bX3b0c@set))) bX3b11@ls/false)) (apply (lambda (bX3b15@name) (bX2b0a@bless (list 'quote bX3b15@name))) bX3b11@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3b0f@t)))))) (set! bX4632@bX2b64@symbol-macro bX2b64@symbol-macro) (set! bX2b66@macro-transformer (lambda (bX3b17@x) (if (procedure? bX3b17@x) bX3b17@x (if (symbol? bX3b17@x) (let ((bX3b19@t bX3b17@x)) (if (memv bX3b19@t '(define-record-type)) bX2b48@define-record-type-macro (if (memv bX3b19@t '(define-struct)) bX2b46@define-struct-macro (if (memv bX3b19@t '(include)) bX2b3c@include-macro (if (memv bX3b19@t '(cond)) bX2b38@cond-macro (if (memv bX3b19@t '(let)) bX2b10@let-macro (if (memv bX3b19@t '(do)) bX2b30@do-macro (if (memv bX3b19@t '(or)) bX2b34@or-macro (if (memv bX3b19@t '(and)) bX2b36@and-macro (if (memv bX3b19@t '(let*)) bX2b32@let*-macro (if (memv bX3b19@t '(let-values)) bX2b12@let-values-macro (if (memv bX3b19@t '(let*-values)) bX2b14@let*-values-macro (if (memv bX3b19@t '(syntax-rules)) bX2b40@syntax-rules-macro (if (memv bX3b19@t '(quasiquote)) bX2b42@quasiquote-macro (if (memv bX3b19@t '(quasisyntax)) bX2b44@quasisyntax-macro (if (memv bX3b19@t '(with-syntax)) bX2b0c@with-syntax-macro (if (memv bX3b19@t '(when)) bX2af8@when-macro (if (memv bX3b19@t '(unless)) bX2afa@unless-macro (if (memv bX3b19@t '(case)) bX2b02@case-macro (if (memv bX3b19@t '(identifier-syntax)) bX2b2e@identifier-syntax-macro (if (memv bX3b19@t '(time)) bX2b26@time-macro (if (memv bX3b19@t '(delay)) bX2b28@delay-macro (if (memv bX3b19@t '(assert)) bX2b2a@assert-macro (if (memv bX3b19@t '(endianness)) bX2b2c@endianness-macro (if (memv bX3b19@t '(guard)) bX2b22@guard-macro (if (memv bX3b19@t '(define-enumeration)) bX2b24@define-enumeration-macro (if (memv bX3b19@t '(trace-lambda)) bX2b16@trace-lambda-macro (if (memv bX3b19@t '(trace-define)) bX2b18@trace-define-macro (if (memv bX3b19@t '(trace-define-syntax)) bX2b1a@trace-define-syntax-macro (if (memv bX3b19@t '(trace-let-syntax)) bX2b1e@trace-let-syntax-macro (if (memv bX3b19@t '(trace-letrec-syntax)) bX2b20@trace-letrec-syntax-macro (if (memv bX3b19@t '(define-condition-type)) bX2b4a@define-condition-type-macro (if (memv bX3b19@t '(parameterize)) bX2b4e@parameterize-macro (if (memv bX3b19@t '(include-into)) bX2b3e@include-into-macro (if (memv bX3b19@t '(eol-style)) (lambda (bX3b1b@x) (bX2b64@symbol-macro bX3b1b@x '(none lf cr crlf nel crnel ls))) (if (memv bX3b19@t '(error-handling-mode)) (lambda (bX3b1d@x) (bX2b64@symbol-macro bX3b1d@x '(ignore raise replace))) (if (memv bX3b19@t '(buffer-mode)) (lambda (bX3b1f@x) (bX2b64@symbol-macro bX3b1f@x '(none line block))) (if (memv bX3b19@t '(file-options)) bX28c8@file-options-macro (if (memv bX3b19@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bX2b4c@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bX3b17@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bX3b17@x))))) (set! bX4633@bX2b66@macro-transformer bX2b66@macro-transformer) (set! bX2b68@local-macro-transformer (lambda (bX3b21@x) (car bX3b21@x))) (set! bX4634@bX2b68@local-macro-transformer bX2b68@local-macro-transformer) (set! bX2b6a@do-macro-call (lambda (bX3b23@transformer bX3b24@expr) (let ((bX3b27@out (bX3b23@transformer (bX2937@add-mark bX2931@anti-mark bX3b24@expr '#f)))) (begin (let bX3b2b@f ((bX3b29@x bX3b27@out)) (if (not (bX2919@stx? bX3b29@x)) (if (pair? bX3b29@x) (begin (bX3b2b@f (car bX3b29@x)) (bX3b2b@f (cdr bX3b29@x))) (if (vector? bX3b29@x) (vector-for-each bX3b2b@f bX3b29@x) (if (symbol? bX3b29@x) (bX2c34@syntax-violation '#f '"raw symbol encountered in output of macro" bX3b24@expr bX3b29@x) (void)))) (void))) (bX2937@add-mark (bX292f@gen-mark) bX3b27@out bX3b24@expr))))) (set! bX4635@bX2b6a@do-macro-call bX2b6a@do-macro-call) (set! bX2b6c@chi-macro (lambda (bX3b2d@p bX3b2e@e) (bX2b6a@do-macro-call (bX2b66@macro-transformer bX3b2d@p) bX3b2e@e))) (set! bX4636@bX2b6c@chi-macro bX2b6c@chi-macro) (set! bX2b6e@chi-local-macro (lambda (bX3b31@p bX3b32@e) (bX2b6a@do-macro-call (bX2b68@local-macro-transformer bX3b31@p) bX3b32@e))) (set! bX4637@bX2b6e@chi-local-macro bX2b6e@chi-local-macro) (set! bX2b70@chi-global-macro (lambda (bX3b35@p bX3b36@e) (let ((bX3b39@lib (car bX3b35@p)) (bX3b3a@loc (cdr bX3b35@p))) (begin (bX2764@bX25b3@visit-library bX3b39@lib) (let ((bX3b3d@x (symbol-value bX3b3a@loc))) (let ((bX3b3f@transformer (if (procedure? bX3b3d@x) bX3b3d@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bX3b3d@x)))) (bX2b6a@do-macro-call bX3b3f@transformer bX3b36@e))))))) (set! bX4638@bX2b70@chi-global-macro bX2b70@chi-global-macro) (set! bX2b72@chi-expr* (lambda (bX3b41@e* bX3b42@r bX3b43@mr) (if (null? bX3b41@e*) '() (let ((bX3b47@e (bX2b76@chi-expr (car bX3b41@e*) bX3b42@r bX3b43@mr))) (cons bX3b47@e (bX2b72@chi-expr* (cdr bX3b41@e*) bX3b42@r bX3b43@mr)))))) (set! bX4639@bX2b72@chi-expr* bX2b72@chi-expr*) (set! bX2b74@chi-application (lambda (bX3b49@e bX3b4a@r bX3b4b@mr) (let ((bX3b4f@t bX3b49@e)) (let ((bX3b51@ls/false (bX2b54@syntax-dispatch bX3b4f@t '(any . each-any)))) (if bX3b51@ls/false (apply (lambda (bX3b53@rator bX3b54@rands) (let ((bX3b57@rator (bX2b76@chi-expr bX3b53@rator bX3b4a@r bX3b4b@mr))) (cons bX3b57@rator (bX2b72@chi-expr* bX3b54@rands bX3b4a@r bX3b4b@mr)))) bX3b51@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3b4f@t)))))) (set! bX463a@bX2b74@chi-application bX2b74@chi-application) (set! bX2b76@chi-expr (lambda (bX3b59@e bX3b5a@r bX3b5b@mr) (call-with-values (lambda () (bX296f@syntax-type bX3b59@e bX3b5a@r)) (lambda (bX3b65@bX3b60 bX3b66@bX3b62 bX3b67@bX3b64) (let ((bX3b6b@kwd bX3b67@bX3b64) (bX3b6c@value bX3b66@bX3b62) (bX3b6d@type bX3b65@bX3b60)) (let ((bX3b71@t bX3b6d@type)) (if (memv bX3b71@t '(core-macro)) (let ((bX3b73@transformer (bX2b62@core-macro-transformer bX3b6c@value))) (bX3b73@transformer bX3b59@e bX3b5a@r bX3b5b@mr)) (if (memv bX3b71@t '(global)) (let ((bX3b75@lib (car bX3b6c@value))) (let ((bX3b77@loc (cdr bX3b6c@value))) (begin ((bX2bbc@inv-collector) bX3b75@lib) bX3b77@loc))) (if (memv bX3b71@t '(core-prim)) (let ((bX3b79@name bX3b6c@value)) (list 'primitive bX3b79@name)) (if (memv bX3b71@t '(call)) (bX2b74@chi-application bX3b59@e bX3b5a@r bX3b5b@mr) (if (memv bX3b71@t '(lexical)) (let ((bX3b7b@lex (bX2ade@lexical-var bX3b6c@value))) bX3b7b@lex) (if (memv bX3b71@t '(global-macro global-macro!)) (bX2b76@chi-expr (bX2b70@chi-global-macro bX3b6c@value bX3b59@e) bX3b5a@r bX3b5b@mr) (if (memv bX3b71@t '(local-macro local-macro!)) (bX2b76@chi-expr (bX2b6e@chi-local-macro bX3b6c@value bX3b59@e) bX3b5a@r bX3b5b@mr) (if (memv bX3b71@t '(macro macro!)) (bX2b76@chi-expr (bX2b6c@chi-macro bX3b6c@value bX3b59@e) bX3b5a@r bX3b5b@mr) (if (memv bX3b71@t '(constant)) (let ((bX3b7d@datum bX3b6c@value)) (list 'quote bX3b7d@datum)) (if (memv bX3b71@t '(set!)) (bX2b78@chi-set! bX3b59@e bX3b5a@r bX3b5b@mr) (if (memv bX3b71@t '(begin)) (let ((bX3b7f@t bX3b59@e)) (let ((bX3b81@ls/false (bX2b54@syntax-dispatch bX3b7f@t '(_ any . each-any)))) (if bX3b81@ls/false (apply (lambda (bX3b83@x bX3b84@x*) (bX28b2@bX280c@build-sequence '#f (bX2b72@chi-expr* (cons bX3b83@x bX3b84@x*) bX3b5a@r bX3b5b@mr))) bX3b81@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3b7f@t)))) (if (memv bX3b71@t '(let-syntax letrec-syntax)) (let ((bX3b87@t bX3b59@e)) (let ((bX3b89@ls/false (bX2b54@syntax-dispatch bX3b87@t '(_ #(each (any any)) any . each-any)))) (if (and bX3b89@ls/false (apply (lambda (bX3b8b@xlhs* bX3b8c@xrhs* bX3b8d@xbody bX3b8e@xbody*) (if (not (bX2955@valid-bound-ids? bX3b8b@xlhs*)) (bX2c34@syntax-violation '#f '"invalid identifiers" bX3b59@e) (void))) bX3b89@ls/false)) (apply (lambda (bX3b93@xlhs* bX3b94@xrhs* bX3b95@xbody bX3b96@xbody*) (let ((bX3b9b@xlab* (map bX28d9@gen-label bX3b93@xlhs*))) (let ((bX3b9d@xrib (bX290d@make-full-rib bX3b93@xlhs* bX3b9b@xlab*))) (let ((bX3b9f@xb* (map (lambda (bX3ba1@x) (bX2985@make-eval-transformer (bX2bae@expand-transformer (if (eq? bX3b6d@type 'let-syntax) bX3ba1@x (bX2939@add-subst bX3b9d@xrib bX3ba1@x)) bX3b5b@mr))) bX3b94@xrhs*))) (bX28b2@bX280c@build-sequence '#f (bX2b72@chi-expr* (map (lambda (bX3ba3@x) (bX2939@add-subst bX3b9d@xrib bX3ba3@x)) (cons bX3b95@xbody bX3b96@xbody*)) (append (map cons bX3b9b@xlab* bX3b9f@xb*) bX3b5a@r) (append (map cons bX3b9b@xlab* bX3b9f@xb*) bX3b5b@mr))))))) bX3b89@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3b87@t)))) (if (memv bX3b71@t '(displaced-lexical)) (bX2c34@syntax-violation '#f '"identifier out of context" bX3b59@e) (if (memv bX3b71@t '(syntax)) (bX2c34@syntax-violation '#f '"reference to pattern variable outside a syntax form" bX3b59@e) (if (memv bX3b71@t '(define define-syntax module import library)) (bX2c34@syntax-violation '#f (string-append (let ((bX3ba5@t bX3b6d@type)) (if (memv bX3ba5@t '(define)) '"a definition" (if (memv bX3ba5@t '(define-syntax)) '"a define-syntax" (if (memv bX3ba5@t '(module)) '"a module definition" (if (memv bX3ba5@t '(library)) '"a library definition" (if (memv bX3ba5@t '(import)) '"an import declaration" (if (memv bX3ba5@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bX3b59@e) (if (memv bX3b71@t '(mutable)) (bX2c34@syntax-violation '#f '"attempt to reference an unexportable variable" bX3b59@e) (bX2c34@syntax-violation '#f '"invalid expression" bX3b59@e))))))))))))))))))))))) (set! bX463b@bX2b76@chi-expr bX2b76@chi-expr) (set! bX2b78@chi-set! (lambda (bX3ba7@e bX3ba8@r bX3ba9@mr) (let ((bX3bad@t bX3ba7@e)) (let ((bX3baf@ls/false (bX2b54@syntax-dispatch bX3bad@t '(_ any any)))) (if (and bX3baf@ls/false (apply (lambda (bX3bb1@x bX3bb2@v) (bX294d@id? bX3bb1@x)) bX3baf@ls/false)) (apply (lambda (bX3bb5@x bX3bb6@v) (call-with-values (lambda () (bX296f@syntax-type bX3bb5@x bX3ba8@r)) (lambda (bX3bbf@bX3bba bX3bc0@bX3bbc bX3bc1@bX3bbe) (let ((bX3bc5@kwd bX3bc1@bX3bbe) (bX3bc6@value bX3bc0@bX3bbc) (bX3bc7@type bX3bbf@bX3bba)) (let ((bX3bcb@t bX3bc7@type)) (if (memv bX3bcb@t '(lexical)) (begin (bX2ae2@set-lexical-mutable! bX3bc6@value '#t) (list 'set! (bX2ade@lexical-var bX3bc6@value) (bX2b76@chi-expr bX3bb6@v bX3ba8@r bX3ba9@mr))) (if (memv bX3bcb@t '(core-prim)) (bX2c34@syntax-violation '#f '"cannot modify imported core primitive" bX3ba7@e) (if (memv bX3bcb@t '(global)) (bX2c34@syntax-violation '#f '"attempt to modify imported binding" bX3ba7@e) (if (memv bX3bcb@t '(global-macro!)) (bX2b76@chi-expr (bX2b70@chi-global-macro bX3bc6@value bX3ba7@e) bX3ba8@r bX3ba9@mr) (if (memv bX3bcb@t '(local-macro!)) (bX2b76@chi-expr (bX2b6e@chi-local-macro bX3bc6@value bX3ba7@e) bX3ba8@r bX3ba9@mr) (if (memv bX3bcb@t '(mutable)) (bX2c34@syntax-violation '#f '"attempt to assign to an unexportable variable" bX3ba7@e) (bX2c34@syntax-violation '#f '"invalid syntax" bX3ba7@e)))))))))))) bX3baf@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3bad@t)))))) (set! bX463c@bX2b78@chi-set! bX2b78@chi-set!) (set! bX2b7a@verify-formals (lambda (bX3bcd@fmls bX3bce@stx) (let ((bX3bd1@t bX3bcd@fmls)) (let ((bX3bd3@ls/false (bX2b54@syntax-dispatch bX3bd1@t 'each-any))) (if bX3bd3@ls/false (apply (lambda (bX3bd5@x*) (if (not (bX2955@valid-bound-ids? bX3bd5@x*)) (bX2b0e@invalid-fmls-error bX3bce@stx bX3bcd@fmls) (void))) bX3bd3@ls/false) (let ((bX3bd7@t bX3bd1@t)) (let ((bX3bd9@ls/false (bX2b54@syntax-dispatch bX3bd7@t '#(each+ any () any)))) (if bX3bd9@ls/false (apply (lambda (bX3bdb@x* bX3bdc@x) (if (not (bX2955@valid-bound-ids? (cons bX3bdc@x bX3bdb@x*))) (bX2b0e@invalid-fmls-error bX3bce@stx bX3bcd@fmls) (void))) bX3bd9@ls/false) (let ((bX3bdf@t bX3bd7@t)) (let ((bX3be1@ls/false (bX2b54@syntax-dispatch bX3bdf@t '_))) (if bX3be1@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid syntax" bX3bce@stx)) bX3be1@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3bdf@t)))))))))))) (set! bX463d@bX2b7a@verify-formals bX2b7a@verify-formals) (set! bX2b7c@chi-lambda-clause (lambda (bX3be3@stx bX3be4@fmls bX3be5@body* bX3be6@r bX3be7@mr) (let ((bX3bed@t bX3be4@fmls)) (let ((bX3bef@ls/false (bX2b54@syntax-dispatch bX3bed@t 'each-any))) (if bX3bef@ls/false (apply (lambda (bX3bf1@x*) (begin (bX2b7a@verify-formals bX3be4@fmls bX3be3@stx) (let ((bX3bf3@lex* (map bX28d5@gen-lexical bX3bf1@x*)) (bX3bf4@lab* (map bX28d9@gen-label bX3bf1@x*))) (values bX3bf3@lex* (bX2b8c@chi-internal (bX2939@add-subst (bX290d@make-full-rib bX3bf1@x* bX3bf4@lab*) bX3be5@body*) (bX2ae6@add-lexicals bX3bf4@lab* bX3bf3@lex* bX3be6@r) bX3be7@mr))))) bX3bef@ls/false) (let ((bX3bf7@t bX3bed@t)) (let ((bX3bf9@ls/false (bX2b54@syntax-dispatch bX3bf7@t '#(each+ any () any)))) (if bX3bf9@ls/false (apply (lambda (bX3bfb@x* bX3bfc@x) (begin (bX2b7a@verify-formals bX3be4@fmls bX3be3@stx) (let ((bX3bff@lex* (map bX28d5@gen-lexical bX3bfb@x*)) (bX3c00@lab* (map bX28d9@gen-label bX3bfb@x*)) (bX3c01@lex (bX28d5@gen-lexical bX3bfc@x)) (bX3c02@lab (bX28d9@gen-label bX3bfc@x))) (values (append bX3bff@lex* bX3c01@lex) (bX2b8c@chi-internal (bX2939@add-subst (bX290d@make-full-rib (cons bX3bfc@x bX3bfb@x*) (cons bX3c02@lab bX3c00@lab*)) bX3be5@body*) (bX2ae6@add-lexicals (cons bX3c02@lab bX3c00@lab*) (cons bX3c01@lex bX3bff@lex*) bX3be6@r) bX3be7@mr))))) bX3bf9@ls/false) (let ((bX3c07@t bX3bf7@t)) (let ((bX3c09@ls/false (bX2b54@syntax-dispatch bX3c07@t '_))) (if bX3c09@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid syntax" bX3be4@fmls)) bX3c09@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3c07@t)))))))))))) (set! bX463e@bX2b7c@chi-lambda-clause bX2b7c@chi-lambda-clause) (set! bX2b7e@chi-lambda-clause* (lambda (bX3c0b@stx bX3c0c@fmls* bX3c0d@body** bX3c0e@r bX3c0f@mr) (if (null? bX3c0c@fmls*) (values '() '()) (call-with-values (lambda () (bX2b7c@chi-lambda-clause bX3c0b@stx (car bX3c0c@fmls*) (car bX3c0d@body**) bX3c0e@r bX3c0f@mr)) (lambda (bX3c19@bX3c16 bX3c1a@bX3c18) (let ((bX3c1d@b bX3c1a@bX3c18) (bX3c1e@a bX3c19@bX3c16)) (call-with-values (lambda () (bX2b7e@chi-lambda-clause* bX3c0b@stx (cdr bX3c0c@fmls*) (cdr bX3c0d@body**) bX3c0e@r bX3c0f@mr)) (lambda (bX3c25@bX3c22 bX3c26@bX3c24) (let ((bX3c29@b* bX3c26@bX3c24) (bX3c2a@a* bX3c25@bX3c22)) (values (cons bX3c1e@a bX3c2a@a*) (cons bX3c1d@b bX3c29@b*))))))))))) (set! bX463f@bX2b7e@chi-lambda-clause* bX2b7e@chi-lambda-clause*) (set! bX2b80@chi-defun (lambda (bX3c2d@x bX3c2e@r bX3c2f@mr) (let ((bX3c33@fmls (car bX3c2d@x)) (bX3c34@body* (cdr bX3c2d@x))) (call-with-values (lambda () (bX2b7c@chi-lambda-clause bX3c33@fmls bX3c33@fmls bX3c34@body* bX3c2e@r bX3c2f@mr)) (lambda (bX3c3b@bX3c38 bX3c3c@bX3c3a) (let ((bX3c3f@body bX3c3c@bX3c3a) (bX3c40@fmls bX3c3b@bX3c38)) (bX28b0@bX27dc@build-lambda '#f bX3c40@fmls bX3c3f@body))))))) (set! bX4640@bX2b80@chi-defun bX2b80@chi-defun) (set! bX2b82@chi-rhs (lambda (bX3c43@rhs bX3c44@r bX3c45@mr) (let ((bX3c49@t (car bX3c43@rhs))) (if (memv bX3c49@t '(defun)) (bX2b80@chi-defun (cdr bX3c43@rhs) bX3c44@r bX3c45@mr) (if (memv bX3c49@t '(expr)) (let ((bX3c4b@expr (cdr bX3c43@rhs))) (bX2b76@chi-expr bX3c4b@expr bX3c44@r bX3c45@mr)) (if (memv bX3c49@t '(top-expr)) (let ((bX3c4d@expr (cdr bX3c43@rhs))) (bX28b2@bX280c@build-sequence '#f (list (bX2b76@chi-expr bX3c4d@expr bX3c44@r bX3c45@mr) (bX28b3@bX280e@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bX3c43@rhs))))))) (set! bX4641@bX2b82@chi-rhs bX2b82@chi-rhs) (set! bX2b84@expand-interaction-rhs*/init* (lambda (bX3c4f@lhs* bX3c50@rhs* bX3c51@init* bX3c52@r bX3c53@mr) (let bX3c5d@f ((bX3c59@lhs* bX3c4f@lhs*) (bX3c5a@rhs* bX3c50@rhs*)) (if (null? bX3c59@lhs*) (map (lambda (bX3c5f@x) (bX2b76@chi-expr bX3c5f@x bX3c52@r bX3c53@mr)) bX3c51@init*) (let ((bX3c61@lhs (car bX3c59@lhs*)) (bX3c62@rhs (car bX3c5a@rhs*))) (let ((bX3c65@t (car bX3c62@rhs))) (if (memv bX3c65@t '(defun)) (let ((bX3c67@rhs (bX2b80@chi-defun (cdr bX3c62@rhs) bX3c52@r bX3c53@mr))) (cons (list 'set! bX3c61@lhs bX3c67@rhs) (bX3c5d@f (cdr bX3c59@lhs*) (cdr bX3c5a@rhs*)))) (if (memv bX3c65@t '(expr)) (let ((bX3c69@rhs (bX2b76@chi-expr (cdr bX3c62@rhs) bX3c52@r bX3c53@mr))) (cons (list 'set! bX3c61@lhs bX3c69@rhs) (bX3c5d@f (cdr bX3c59@lhs*) (cdr bX3c5a@rhs*)))) (if (memv bX3c65@t '(top-expr)) (let ((bX3c6b@e (bX2b76@chi-expr (cdr bX3c62@rhs) bX3c52@r bX3c53@mr))) (cons bX3c6b@e (bX3c5d@f (cdr bX3c59@lhs*) (cdr bX3c5a@rhs*)))) (error 'expand-interaction '"invallid" bX3c62@rhs)))))))))) (set! bX4642@bX2b84@expand-interaction-rhs*/init* bX2b84@expand-interaction-rhs*/init*) (set! bX2b86@chi-rhs* (lambda (bX3c6d@rhs* bX3c6e@r bX3c6f@mr) (let bX3c75@f ((bX3c73@ls bX3c6d@rhs*)) (if (null? bX3c73@ls) '() (let ((bX3c77@a (bX2b82@chi-rhs (car bX3c73@ls) bX3c6e@r bX3c6f@mr))) (cons bX3c77@a (bX3c75@f (cdr bX3c73@ls)))))))) (set! bX4643@bX2b86@chi-rhs* bX2b86@chi-rhs*) (set! bX2b88@find-bound=? (lambda (bX3c79@x bX3c7a@lhs* bX3c7b@rhs*) (if (null? bX3c7a@lhs*) '#f (if (bX2951@bound-id=? bX3c79@x (car bX3c7a@lhs*)) (car bX3c7b@rhs*) (bX2b88@find-bound=? bX3c79@x (cdr bX3c7a@lhs*) (cdr bX3c7b@rhs*)))))) (set! bX4644@bX2b88@find-bound=? bX2b88@find-bound=?) (set! bX2b8a@find-dups (lambda (bX3c7f@ls) (let bX3c85@f ((bX3c81@ls bX3c7f@ls) (bX3c82@dups '())) (if (null? bX3c81@ls) bX3c82@dups (let ((bX3c87@t (bX2b88@find-bound=? (car bX3c81@ls) (cdr bX3c81@ls) (cdr bX3c81@ls)))) (if bX3c87@t ((lambda (bX3c89@x) (bX3c85@f (cdr bX3c81@ls) (cons (list (car bX3c81@ls) bX3c89@x) bX3c82@dups))) bX3c87@t) (bX3c85@f (cdr bX3c81@ls) bX3c82@dups))))))) (set! bX4645@bX2b8a@find-dups bX2b8a@find-dups) (set! bX2b8c@chi-internal (lambda (bX3c8b@e* bX3c8c@r bX3c8d@mr) (let ((bX3c91@rib (bX2901@make-empty-rib))) (call-with-values (lambda () (bX2bac@chi-body* (map (lambda (bX3ca3@x) (bX2939@add-subst bX3c91@rib bX3ca3@x)) (bX294b@syntax->list bX3c8b@e*)) bX3c8c@r bX3c8d@mr '() '() '() '() '() bX3c91@rib '#f)) (lambda (bX3ca5@bX3c94 bX3ca6@bX3c96 bX3ca7@bX3c98 bX3ca8@bX3c9a bX3ca9@bX3c9c bX3caa@bX3c9e bX3cab@bX3ca0 bX3cac@bX3ca2) (let ((bX3cb5@_exp* bX3cac@bX3ca2) (bX3cb6@kwd* bX3cab@bX3ca0) (bX3cb7@mod** bX3caa@bX3c9e) (bX3cb8@rhs* bX3ca9@bX3c9c) (bX3cb9@lex* bX3ca8@bX3c9a) (bX3cba@mr bX3ca7@bX3c98) (bX3cbb@r bX3ca6@bX3c96) (bX3cbc@e* bX3ca5@bX3c94)) (begin (if (null? bX3cbc@e*) (bX2c34@syntax-violation '#f '"no expression in body" bX3cbc@e*) (void)) (let ((bX3cc5@init* (bX2b72@chi-expr* (append (apply append (reverse bX3cb7@mod**)) bX3cbc@e*) bX3cbb@r bX3cba@mr))) (let ((bX3cc7@rhs* (bX2b86@chi-rhs* bX3cb8@rhs* bX3cbb@r bX3cba@mr))) (bX28b7@bX2816@build-letrec* '#f (reverse bX3cb9@lex*) (reverse bX3cc7@rhs*) (bX28b2@bX280c@build-sequence '#f bX3cc5@init*))))))))))) (set! bX4646@bX2b8c@chi-internal bX2b8c@chi-internal) (set! bX2b8e@parse-module (lambda (bX3cc9@e) (let ((bX3ccb@t bX3cc9@e)) (let ((bX3ccd@ls/false (bX2b54@syntax-dispatch bX3ccb@t '(_ each-any . each-any)))) (if bX3ccd@ls/false (apply (lambda (bX3ccf@export* bX3cd0@b*) (begin (if (not (for-all bX294d@id? bX3ccf@export*)) (bX2c34@syntax-violation '#f '"module exports must be identifiers" bX3cc9@e) (void)) (values '#f (list->vector bX3ccf@export*) bX3cd0@b*))) bX3ccd@ls/false) (let ((bX3cd3@t bX3ccb@t)) (let ((bX3cd5@ls/false (bX2b54@syntax-dispatch bX3cd3@t '(_ any each-any . each-any)))) (if bX3cd5@ls/false (apply (lambda (bX3cd7@name bX3cd8@export* bX3cd9@b*) (begin (if (not (bX294d@id? bX3cd7@name)) (bX2c34@syntax-violation '#f '"module name must be an identifier" bX3cc9@e) (void)) (if (not (for-all bX294d@id? bX3cd8@export*)) (bX2c34@syntax-violation '#f '"module exports must be identifiers" bX3cc9@e) (void)) (values bX3cd7@name (list->vector bX3cd8@export*) bX3cd9@b*))) bX3cd5@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3cd3@t))))))))) (set! bX4647@bX2b8e@parse-module bX2b8e@parse-module) (set! bX2b98@module-interface? (lambda (bX3cdd@x) (and (simple-struct? bX3cdd@x) (eq? (simple-struct-name bX3cdd@x) 'module-interface)))) (set! bX4648@bX2b98@module-interface? bX2b98@module-interface?) (set! bX2b9a@module-interface-first-mark (lambda (bX3cdf@x) (simple-struct-ref bX3cdf@x '0))) (set! bX4649@bX2b9a@module-interface-first-mark bX2b9a@module-interface-first-mark) (set! bX2b9c@set-module-interface-first-mark! (lambda (bX3ce1@x bX3ce2@val) (simple-struct-set! bX3ce1@x '0 bX3ce2@val))) (set! bX464a@bX2b9c@set-module-interface-first-mark! bX2b9c@set-module-interface-first-mark!) (set! bX2b9e@module-interface-exp-id-vec (lambda (bX3ce5@x) (simple-struct-ref bX3ce5@x '1))) (set! bX464b@bX2b9e@module-interface-exp-id-vec bX2b9e@module-interface-exp-id-vec) (set! bX2ba0@set-module-interface-exp-id-vec! (lambda (bX3ce7@x bX3ce8@val) (simple-struct-set! bX3ce7@x '1 bX3ce8@val))) (set! bX464c@bX2ba0@set-module-interface-exp-id-vec! bX2ba0@set-module-interface-exp-id-vec!) (set! bX2ba2@module-interface-exp-lab-vec (lambda (bX3ceb@x) (simple-struct-ref bX3ceb@x '2))) (set! bX464d@bX2ba2@module-interface-exp-lab-vec bX2ba2@module-interface-exp-lab-vec) (set! bX2ba4@set-module-interface-exp-lab-vec! (lambda (bX3ced@x bX3cee@val) (simple-struct-set! bX3ced@x '2 bX3cee@val))) (set! bX464e@bX2ba4@set-module-interface-exp-lab-vec! bX2ba4@set-module-interface-exp-lab-vec!) (set! bX2ba6@dummy '3) (set! bX464f@bX2ba6@dummy bX2ba6@dummy) (set! bX2ba8@module-interface-exp-id* (lambda (bX3cf1@iface bX3cf2@id) (let ((bX3cf6@diff-marks '#f)) (begin (set! bX3cf6@diff-marks (lambda (bX3cfd@ls bX3cfe@x) (begin (if (null? bX3cfd@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bX3d01@a (car bX3cfd@ls))) (if (eq? bX3d01@a bX3cfe@x) '() (cons bX3d01@a (bX3cf6@diff-marks (cdr bX3cfd@ls) bX3cfe@x))))))) (let ((bX3cf7@diff (bX3cf6@diff-marks (bX291f@stx-mark* bX3cf2@id) (bX2b9a@module-interface-first-mark bX3cf1@iface))) (bX3cf8@id-vec (bX2b9e@module-interface-exp-id-vec bX3cf1@iface))) (if (null? bX3cf7@diff) bX3cf8@id-vec (vector-map (lambda (bX3cfb@x) (make-simple-struct 'stx '5 (list (bX291b@stx-expr bX3cfb@x) (append bX3cf7@diff (bX291f@stx-mark* bX3cfb@x)) '() '()))) bX3cf8@id-vec))))))) (set! bX4650@bX2ba8@module-interface-exp-id* bX2ba8@module-interface-exp-id*) (set! bX2baa@chi-internal-module (lambda (bX3d03@e bX3d04@r bX3d05@mr bX3d06@lex* bX3d07@rhs* bX3d08@mod** bX3d09@kwd*) (call-with-values (lambda () (bX2b8e@parse-module bX3d03@e)) (lambda (bX3d17@bX3d12 bX3d18@bX3d14 bX3d19@bX3d16) (let ((bX3d1d@e* bX3d19@bX3d16) (bX3d1e@exp-id* bX3d18@bX3d14) (bX3d1f@name bX3d17@bX3d12)) (let ((bX3d23@rib (bX2901@make-empty-rib))) (let ((bX3d25@e* (map (lambda (bX3d27@x) (bX2939@add-subst bX3d23@rib bX3d27@x)) (bX294b@syntax->list bX3d1d@e*)))) (call-with-values (lambda () (bX2bac@chi-body* bX3d25@e* bX3d04@r bX3d05@mr bX3d06@lex* bX3d07@rhs* bX3d08@mod** bX3d09@kwd* '() bX3d23@rib '#f)) (lambda (bX3d39@bX3d2a bX3d3a@bX3d2c bX3d3b@bX3d2e bX3d3c@bX3d30 bX3d3d@bX3d32 bX3d3e@bX3d34 bX3d3f@bX3d36 bX3d40@bX3d38) (let ((bX3d49@_exp* bX3d40@bX3d38) (bX3d4a@kwd* bX3d3f@bX3d36) (bX3d4b@mod** bX3d3e@bX3d34) (bX3d4c@rhs* bX3d3d@bX3d32) (bX3d4d@lex* bX3d3c@bX3d30) (bX3d4e@mr bX3d3b@bX3d2e) (bX3d4f@r bX3d3a@bX3d2c) (bX3d50@e* bX3d39@bX3d2a)) (let ((bX3d59@exp-lab* (vector-map (lambda (bX3d5d@x) (or (bX2963@id->label (make-simple-struct 'stx '5 (list (bX294f@id->sym bX3d5d@x) (bX291f@stx-mark* bX3d5d@x) (list bX3d23@rib) '()))) (bX2c34@syntax-violation '#f '"cannot find module export" bX3d5d@x))) bX3d1e@exp-id*)) (bX3d5a@mod** (cons bX3d50@e* bX3d4b@mod**))) (if (not bX3d1f@name) (values bX3d4d@lex* bX3d4c@rhs* bX3d1e@exp-id* bX3d59@exp-lab* bX3d4f@r bX3d4e@mr bX3d5a@mod** bX3d4a@kwd*) (let ((bX3d5f@lab (bX28d9@gen-label 'module)) (bX3d60@iface (make-simple-struct 'module-interface '4 (list (car (bX291f@stx-mark* bX3d1f@name)) (vector-map (lambda (bX3d63@x) (make-simple-struct 'stx '5 (list (bX291b@stx-expr bX3d63@x) (bX291f@stx-mark* bX3d63@x) '() '()))) bX3d1e@exp-id*) bX3d59@exp-lab*)))) (values bX3d4d@lex* bX3d4c@rhs* (vector bX3d1f@name) (vector bX3d5f@lab) (cons (cons bX3d5f@lab (cons '$module bX3d60@iface)) bX3d4f@r) (cons (cons bX3d5f@lab (cons '$module bX3d60@iface)) bX3d4e@mr) bX3d5a@mod** bX3d4a@kwd*)))))))))))))) (set! bX4651@bX2baa@chi-internal-module bX2baa@chi-internal-module) (set! bX2bac@chi-body* (lambda (bX3d65@e* bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d6b@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?) (if (null? bX3d65@e*) (values bX3d65@e* bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d6b@kwd* bX3d6c@exp*) (let ((bX3d79@e (car bX3d65@e*))) (call-with-values (lambda () (bX296f@syntax-type bX3d79@e bX3d66@r)) (lambda (bX3d81@bX3d7c bX3d82@bX3d7e bX3d83@bX3d80) (let ((bX3d87@kwd bX3d83@bX3d80) (bX3d88@value bX3d82@bX3d7e) (bX3d89@type bX3d81@bX3d7c)) (let ((bX3d8d@kwd* (if (bX294d@id? bX3d87@kwd) (cons bX3d87@kwd bX3d6b@kwd*) bX3d6b@kwd*))) (let ((bX3d8f@t bX3d89@type)) (if (memv bX3d8f@t '(define)) (call-with-values (lambda () (bX2ad6@parse-define bX3d79@e)) (lambda (bX3d95@bX3d92 bX3d96@bX3d94) (let ((bX3d99@rhs bX3d96@bX3d94) (bX3d9a@id bX3d95@bX3d92)) (begin (if (bX2959@bound-id-member? bX3d9a@id bX3d8d@kwd*) (bX2c34@syntax-violation '#f '"cannot redefine keyword" bX3d79@e) (void)) (call-with-values (lambda () (bX28dd@gen-define-label+loc bX3d9a@id bX3d6d@rib)) (lambda (bX3da1@bX3d9e bX3da2@bX3da0) (let ((bX3da5@lex bX3da2@bX3da0) (bX3da6@lab bX3da1@bX3d9e)) (begin (bX2903@extend-rib! bX3d6d@rib bX3d9a@id bX3da6@lab) (bX2bac@chi-body* (cdr bX3d65@e*) (bX2ae4@add-lexical bX3da6@lab bX3da5@lex bX3d66@r) bX3d67@mr (cons bX3da5@lex bX3d68@lex*) (cons bX3d99@rhs bX3d69@rhs*) bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?))))))))) (if (memv bX3d8f@t '(define-syntax)) (call-with-values (lambda () (bX2ad8@parse-define-syntax bX3d79@e)) (lambda (bX3dad@bX3daa bX3dae@bX3dac) (let ((bX3db1@rhs bX3dae@bX3dac) (bX3db2@id bX3dad@bX3daa)) (begin (if (bX2959@bound-id-member? bX3db2@id bX3d8d@kwd*) (bX2c34@syntax-violation '#f '"cannot redefine keyword" bX3d79@e) (void)) (let ((bX3db5@lab (bX28df@gen-define-label bX3db2@id bX3d6d@rib)) (bX3db6@expanded-rhs (bX2bae@expand-transformer bX3db1@rhs bX3d67@mr))) (begin (bX2903@extend-rib! bX3d6d@rib bX3db2@id bX3db5@lab) (let ((bX3db9@b (bX2985@make-eval-transformer bX3db6@expanded-rhs))) (bX2bac@chi-body* (cdr bX3d65@e*) (cons (cons bX3db5@lab bX3db9@b) bX3d66@r) (cons (cons bX3db5@lab bX3db9@b) bX3d67@mr) bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?)))))))) (if (memv bX3d8f@t '(let-syntax letrec-syntax)) (let ((bX3dbb@t bX3d79@e)) (let ((bX3dbd@ls/false (bX2b54@syntax-dispatch bX3dbb@t '(_ #(each (any any)) . each-any)))) (if (and bX3dbd@ls/false (apply (lambda (bX3dbf@xlhs* bX3dc0@xrhs* bX3dc1@xbody*) (if (not (bX2955@valid-bound-ids? bX3dbf@xlhs*)) (bX2c34@syntax-violation '#f '"invalid identifiers" bX3d79@e) (void))) bX3dbd@ls/false)) (apply (lambda (bX3dc5@xlhs* bX3dc6@xrhs* bX3dc7@xbody*) (let ((bX3dcb@xlab* (map bX28d9@gen-label bX3dc5@xlhs*))) (let ((bX3dcd@xrib (bX290d@make-full-rib bX3dc5@xlhs* bX3dcb@xlab*))) (let ((bX3dcf@xb* (map (lambda (bX3dd1@x) (bX2985@make-eval-transformer (bX2bae@expand-transformer (if (eq? bX3d89@type 'let-syntax) bX3dd1@x (bX2939@add-subst bX3dcd@xrib bX3dd1@x)) bX3d67@mr))) bX3dc6@xrhs*))) (bX2bac@chi-body* (append (map (lambda (bX3dd3@x) (bX2939@add-subst bX3dcd@xrib bX3dd3@x)) bX3dc7@xbody*) (cdr bX3d65@e*)) (append (map cons bX3dcb@xlab* bX3dcf@xb*) bX3d66@r) (append (map cons bX3dcb@xlab* bX3dcf@xb*) bX3d67@mr) bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?))))) bX3dbd@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3dbb@t)))) (if (memv bX3d8f@t '(begin)) (let ((bX3dd5@t bX3d79@e)) (let ((bX3dd7@ls/false (bX2b54@syntax-dispatch bX3dd5@t '(_ . each-any)))) (if bX3dd7@ls/false (apply (lambda (bX3dd9@x*) (bX2bac@chi-body* (append bX3dd9@x* (cdr bX3d65@e*)) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?)) bX3dd7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3dd5@t)))) (if (memv bX3d8f@t '(global-macro global-macro!)) (bX2bac@chi-body* (cons (bX2939@add-subst bX3d6d@rib (bX2b70@chi-global-macro bX3d88@value bX3d79@e)) (cdr bX3d65@e*)) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?) (if (memv bX3d8f@t '(local-macro local-macro!)) (bX2bac@chi-body* (cons (bX2939@add-subst bX3d6d@rib (bX2b6e@chi-local-macro bX3d88@value bX3d79@e)) (cdr bX3d65@e*)) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?) (if (memv bX3d8f@t '(macro macro!)) (bX2bac@chi-body* (cons (bX2939@add-subst bX3d6d@rib (bX2b6c@chi-macro bX3d88@value bX3d79@e)) (cdr bX3d65@e*)) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?) (if (memv bX3d8f@t '(module)) (call-with-values (lambda () (bX2baa@chi-internal-module bX3d79@e bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd*)) (lambda (bX3deb@bX3ddc bX3dec@bX3dde bX3ded@bX3de0 bX3dee@bX3de2 bX3def@bX3de4 bX3df0@bX3de6 bX3df1@bX3de8 bX3df2@bX3dea) (let ((bX3dfb@kwd* bX3df2@bX3dea) (bX3dfc@mod** bX3df1@bX3de8) (bX3dfd@mr bX3df0@bX3de6) (bX3dfe@r bX3def@bX3de4) (bX3dff@m-exp-lab* bX3dee@bX3de2) (bX3e00@m-exp-id* bX3ded@bX3de0) (bX3e01@rhs* bX3dec@bX3dde) (bX3e02@lex* bX3deb@bX3ddc)) (begin (vector-for-each (lambda (bX3e0b@id bX3e0c@lab) (bX2903@extend-rib! bX3d6d@rib bX3e0b@id bX3e0c@lab)) bX3e00@m-exp-id* bX3dff@m-exp-lab*) (bX2bac@chi-body* (cdr bX3d65@e*) bX3dfe@r bX3dfd@mr bX3e02@lex* bX3e01@rhs* bX3dfc@mod** bX3dfb@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?))))) (if (memv bX3d8f@t '(library)) (begin (bX2c16@library-expander (bX2961@stx->datum bX3d79@e)) (bX2bac@chi-body* (cdr bX3d65@e*) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?)) (if (memv bX3d8f@t '(export)) (let ((bX3e0f@t bX3d79@e)) (let ((bX3e11@ls/false (bX2b54@syntax-dispatch bX3e0f@t '(_ . each-any)))) (if bX3e11@ls/false (apply (lambda (bX3e13@exp-decl*) (bX2bac@chi-body* (cdr bX3d65@e*) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* (append bX3e13@exp-decl* bX3d6c@exp*) bX3d6d@rib bX3d6e@top?)) bX3e11@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3e0f@t)))) (if (memv bX3d8f@t '(import)) (let ((bX3e16@module-import? '#f) (bX3e18@module-import '#f) (bX3e1a@library-import '#f)) (begin (set! bX3e16@module-import? (lambda (bX3e69@e) (let ((bX3e6b@t bX3e69@e)) (let ((bX3e6d@ls/false (bX2b54@syntax-dispatch bX3e6b@t '(_ any)))) (if (and bX3e6d@ls/false (apply (lambda (bX3e6f@id) (bX294d@id? bX3e6f@id)) bX3e6d@ls/false)) (apply (lambda (bX3e71@id) '#t) bX3e6d@ls/false) (let ((bX3e73@t bX3e6b@t)) (let ((bX3e75@ls/false (bX2b54@syntax-dispatch bX3e73@t '(_ . each-any)))) (if bX3e75@ls/false (apply (lambda (bX3e77@imp*) '#f) bX3e75@ls/false) (let ((bX3e79@t bX3e73@t)) (let ((bX3e7b@ls/false (bX2b54@syntax-dispatch bX3e79@t '_))) (if bX3e7b@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"malformed import form" bX3e69@e)) bX3e7b@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3e79@t)))))))))))) (set! bX3e18@module-import (lambda (bX3e47@e bX3e48@r) (let ((bX3e4b@t bX3e47@e)) (let ((bX3e4d@ls/false (bX2b54@syntax-dispatch bX3e4b@t '(_ any)))) (if (and bX3e4d@ls/false (apply (lambda (bX3e4f@id) (bX294d@id? bX3e4f@id)) bX3e4d@ls/false)) (apply (lambda (bX3e51@id) (call-with-values (lambda () (bX296f@syntax-type bX3e51@id bX3e48@r)) (lambda (bX3e59@bX3e54 bX3e5a@bX3e56 bX3e5b@bX3e58) (let ((bX3e5f@kwd bX3e5b@bX3e58) (bX3e60@value bX3e5a@bX3e56) (bX3e61@type bX3e59@bX3e54)) (let ((bX3e65@t bX3e61@type)) (if (memv bX3e65@t '($module)) (let ((bX3e67@iface bX3e60@value)) (values (bX2ba8@module-interface-exp-id* bX3e67@iface bX3e51@id) (bX2ba2@module-interface-exp-lab-vec bX3e67@iface))) (bX2c34@syntax-violation '#f '"invalid import" bX3e47@e))))))) bX3e4d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3e4b@t)))))) (set! bX3e1a@library-import (lambda (bX3e2b@e) (let ((bX3e2d@t bX3e2b@e)) (let ((bX3e2f@ls/false (bX2b54@syntax-dispatch bX3e2d@t '(any . each-any)))) (if bX3e2f@ls/false (apply (lambda (bX3e31@ctxt bX3e32@imp*) (call-with-values (lambda () (bX2bb6@parse-import-spec* (bX2c3a@syntax->datum bX3e32@imp*))) (lambda (bX3e39@bX3e36 bX3e3a@bX3e38) (let ((bX3e3d@subst-labels bX3e3a@bX3e38) (bX3e3e@subst-names bX3e39@bX3e36)) (values (vector-map (lambda (bX3e41@name) (bX292d@datum->stx bX3e31@ctxt bX3e41@name)) bX3e3e@subst-names) bX3e3d@subst-labels))))) bX3e2f@ls/false) (let ((bX3e43@t bX3e2d@t)) (let ((bX3e45@ls/false (bX2b54@syntax-dispatch bX3e43@t '_))) (if bX3e45@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid import form" bX3e2b@e)) bX3e45@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3e43@t))))))))) (begin (call-with-values (lambda () (if (bX3e16@module-import? bX3d79@e) (bX3e18@module-import bX3d79@e bX3d66@r) (bX3e1a@library-import bX3d79@e))) (lambda (bX3e1f@bX3e1c bX3e20@bX3e1e) (let ((bX3e23@lab* bX3e20@bX3e1e) (bX3e24@id* bX3e1f@bX3e1c)) (vector-for-each (lambda (bX3e27@id bX3e28@lab) (bX2903@extend-rib! bX3d6d@rib bX3e27@id bX3e28@lab)) bX3e24@id* bX3e23@lab*)))) (bX2bac@chi-body* (cdr bX3d65@e*) bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?)))) (if bX3d6e@top? (bX2bac@chi-body* (cdr bX3d65@e*) bX3d66@r bX3d67@mr (cons (bX28d5@gen-lexical 'dummy) bX3d68@lex*) (cons (cons 'top-expr bX3d79@e) bX3d69@rhs*) bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp* bX3d6d@rib bX3d6e@top?) (values bX3d65@e* bX3d66@r bX3d67@mr bX3d68@lex* bX3d69@rhs* bX3d6a@mod** bX3d8d@kwd* bX3d6c@exp*)))))))))))))))))))))) (set! bX4652@bX2bac@chi-body* bX2bac@chi-body*) (set! bX2bae@expand-transformer (lambda (bX3e7d@expr bX3e7e@r) (let ((bX3e81@rtc (bX2bba@make-collector))) (let ((bX3e83@expanded-rhs (let ((bX3e8d@bX3e86 bX2bbc@inv-collector) (bX3e8e@bX3e88 bX2bbe@vis-collector) (bX3e8f@bX3e8a bX3e81@rtc) (bX3e90@bX3e8c (lambda (bX3e95@x) (values)))) (let ((bX3e97@swap (lambda () (begin (let ((bX3e99@t (bX3e8d@bX3e86))) (begin (bX3e8d@bX3e86 bX3e8f@bX3e8a) (set! bX3e8f@bX3e8a bX3e99@t))) (let ((bX3e9b@t (bX3e8e@bX3e88))) (begin (bX3e8e@bX3e88 bX3e90@bX3e8c) (set! bX3e90@bX3e8c bX3e9b@t))))))) (dynamic-wind bX3e97@swap (lambda () (bX2b76@chi-expr bX3e7d@expr bX3e7e@r bX3e7e@r)) bX3e97@swap))))) (begin (for-each (let ((bX3e9d@mark-visit (bX2bbe@vis-collector))) (lambda (bX3e9f@x) (begin (bX2763@bX25b1@invoke-library bX3e9f@x) (bX3e9d@mark-visit bX3e9f@x)))) (bX3e81@rtc)) bX3e83@expanded-rhs))))) (set! bX4653@bX2bae@expand-transformer bX2bae@expand-transformer) (set! bX2bb0@parse-exports (lambda (bX3ea1@exp*) (let bX3ea9@f ((bX3ea3@exp* bX3ea1@exp*) (bX3ea4@int* '()) (bX3ea5@ext* '())) (if (null? bX3ea3@exp*) (begin (if (not (bX2955@valid-bound-ids? bX3ea5@ext*)) (bX2c34@syntax-violation 'export '"invalid exports" (bX2b8a@find-dups bX3ea5@ext*)) (void)) (values (map bX2c3a@syntax->datum bX3ea5@ext*) bX3ea4@int*)) (let ((bX3eab@t (car bX3ea3@exp*))) (let ((bX3ead@ls/false (bX2b54@syntax-dispatch bX3eab@t '(any . #(each (any any)))))) (if bX3ead@ls/false (apply (lambda (bX3eaf@rename bX3eb0@i* bX3eb1@e*) (begin (if (not (and (eq? (bX2c3a@syntax->datum bX3eaf@rename) 'rename) (for-all bX294d@id? bX3eb0@i*) (for-all bX294d@id? bX3eb1@e*))) (bX2c34@syntax-violation 'export '"invalid export specifier" (car bX3ea3@exp*)) (void)) (bX3ea9@f (cdr bX3ea3@exp*) (append bX3eb0@i* bX3ea4@int*) (append bX3eb1@e* bX3ea5@ext*)))) bX3ead@ls/false) (let ((bX3eb5@t bX3eab@t)) (let ((bX3eb7@ls/false (bX2b54@syntax-dispatch bX3eb5@t 'any))) (if bX3eb7@ls/false (apply (lambda (bX3eb9@ie) (begin (if (not (bX294d@id? bX3eb9@ie)) (bX2c34@syntax-violation 'export '"invalid export" bX3eb9@ie) (void)) (bX3ea9@f (cdr bX3ea3@exp*) (cons bX3eb9@ie bX3ea4@int*) (cons bX3eb9@ie bX3ea5@ext*)))) bX3eb7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3eb5@t))))))))))) (set! bX4654@bX2bb0@parse-exports bX2bb0@parse-exports) (set! bX2bb2@parse-library-name (lambda (bX3ebb@spec) (let ((bX3ebe@parse '#f)) (begin (set! bX3ebe@parse (lambda (bX3ecb@x) (let ((bX3ecd@t bX3ecb@x)) (let ((bX3ecf@ls/false (bX2b54@syntax-dispatch bX3ecd@t '(each-any)))) (if (and bX3ecf@ls/false (apply (lambda (bX3ed1@v*) (for-all (lambda (bX3ed3@x) (let ((bX3ed5@x (bX2c3a@syntax->datum bX3ed3@x))) (and (integer? bX3ed5@x) (exact? bX3ed5@x)))) bX3ed1@v*)) bX3ecf@ls/false)) (apply (lambda (bX3ed7@v*) (values '() (map bX2c3a@syntax->datum bX3ed7@v*))) bX3ecf@ls/false) (let ((bX3ed9@t bX3ecd@t)) (let ((bX3edb@ls/false (bX2b54@syntax-dispatch bX3ed9@t '(any . any)))) (if (and bX3edb@ls/false (apply (lambda (bX3edd@x bX3ede@rest) (symbol? (bX2c3a@syntax->datum bX3edd@x))) bX3edb@ls/false)) (apply (lambda (bX3ee1@x bX3ee2@rest) (call-with-values (lambda () (bX3ebe@parse bX3ee2@rest)) (lambda (bX3ee9@bX3ee6 bX3eea@bX3ee8) (let ((bX3eed@v* bX3eea@bX3ee8) (bX3eee@x* bX3ee9@bX3ee6)) (values (cons (bX2c3a@syntax->datum bX3ee1@x) bX3eee@x*) bX3eed@v*))))) bX3edb@ls/false) (let ((bX3ef1@t bX3ed9@t)) (let ((bX3ef3@ls/false (bX2b54@syntax-dispatch bX3ef1@t '()))) (if bX3ef3@ls/false (apply (lambda () (values '() '())) bX3ef3@ls/false) (let ((bX3ef5@t bX3ef1@t)) (let ((bX3ef7@ls/false (bX2b54@syntax-dispatch bX3ef5@t '_))) (if bX3ef7@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid library name" bX3ebb@spec)) bX3ef7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3ef5@t))))))))))))))) (call-with-values (lambda () (bX3ebe@parse bX3ebb@spec)) (lambda (bX3ec3@bX3ec0 bX3ec4@bX3ec2) (let ((bX3ec7@ver* bX3ec4@bX3ec2) (bX3ec8@name* bX3ec3@bX3ec0)) (begin (if (null? bX3ec8@name*) (bX2c34@syntax-violation '#f '"empty library name" bX3ebb@spec) (void)) (values bX3ec8@name* bX3ec7@ver*))))))))) (set! bX4655@bX2bb2@parse-library-name bX2bb2@parse-library-name) (set! bX2bb4@parse-library (lambda (bX3ef9@e) (let ((bX3efb@t bX3ef9@e)) (let ((bX3efd@ls/false (bX2b54@syntax-dispatch bX3efb@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bX3efd@ls/false (apply (lambda (bX3eff@library bX3f00@name* bX3f01@export bX3f02@exp* bX3f03@import bX3f04@imp* bX3f05@b*) (and (eq? (bX2c3a@syntax->datum bX3f01@export) 'export) (eq? (bX2c3a@syntax->datum bX3f03@import) 'import) (eq? (bX2c3a@syntax->datum bX3eff@library) 'library))) bX3efd@ls/false)) (apply (lambda (bX3f0d@library bX3f0e@name* bX3f0f@export bX3f10@exp* bX3f11@import bX3f12@imp* bX3f13@b*) (values bX3f0e@name* bX3f10@exp* bX3f12@imp* bX3f13@b*)) bX3efd@ls/false) (let ((bX3f1b@t bX3efb@t)) (let ((bX3f1d@ls/false (bX2b54@syntax-dispatch bX3f1b@t '_))) (if bX3f1d@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"malformed library" bX3ef9@e)) bX3f1d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3f1b@t))))))))) (set! bX4656@bX2bb4@parse-library bX2bb4@parse-library) (set! bX2bb6@parse-import-spec* (let ((bX3f20@idsyn? '#f) (bX3f22@dup-error '#f) (bX3f24@merge-substs '#f) (bX3f26@exclude* '#f) (bX3f28@find* '#f) (bX3f2a@rem* '#f) (bX3f2c@remove-dups '#f) (bX3f2e@parse-library-name '#f) (bX3f30@import-library '#f) (bX3f32@get-import '#f) (bX3f34@add-imports! '#f)) (begin (set! bX3f20@idsyn? (lambda (bX4129@x) (symbol? (bX2c3a@syntax->datum bX4129@x)))) (set! bX3f22@dup-error (lambda (bX4127@name) (bX2c34@syntax-violation 'import '"two imports with different bindings" bX4127@name))) (set! bX3f24@merge-substs (lambda (bX4115@s bX4116@subst) (let ((bX411a@insert-to-subst '#f)) (begin (set! bX411a@insert-to-subst (lambda (bX411b@a bX411c@subst) (let ((bX411f@name (car bX411b@a)) (bX4120@label (cdr bX411b@a))) (let ((bX4123@t (assq bX411f@name bX411c@subst))) (if bX4123@t ((lambda (bX4125@x) (if (eq? (cdr bX4125@x) bX4120@label) bX411c@subst (bX3f22@dup-error bX411f@name))) bX4123@t) (cons bX411b@a bX411c@subst)))))) (if (null? bX4115@s) bX4116@subst (bX411a@insert-to-subst (car bX4115@s) (bX3f24@merge-substs (cdr bX4115@s) bX4116@subst))))))) (set! bX3f26@exclude* (lambda (bX40e5@sym* bX40e6@subst) (let ((bX40ea@exclude '#f)) (begin (set! bX40ea@exclude (lambda (bX4103@sym bX4104@subst) (if (null? bX4104@subst) (bX2c34@syntax-violation 'import '"cannot rename unbound identifier" bX4103@sym) (if (eq? bX4103@sym (caar bX4104@subst)) (values (cdar bX4104@subst) (cdr bX4104@subst)) (let ((bX4107@a (car bX4104@subst))) (call-with-values (lambda () (bX40ea@exclude bX4103@sym (cdr bX4104@subst))) (lambda (bX410d@bX410a bX410e@bX410c) (let ((bX4111@subst bX410e@bX410c) (bX4112@old bX410d@bX410a)) (values bX4112@old (cons bX4107@a bX4111@subst)))))))))) (if (null? bX40e5@sym*) (values '() bX40e6@subst) (call-with-values (lambda () (bX40ea@exclude (car bX40e5@sym*) bX40e6@subst)) (lambda (bX40ef@bX40ec bX40f0@bX40ee) (let ((bX40f3@subst bX40f0@bX40ee) (bX40f4@old bX40ef@bX40ec)) (call-with-values (lambda () (bX3f26@exclude* (cdr bX40e5@sym*) bX40f3@subst)) (lambda (bX40fb@bX40f8 bX40fc@bX40fa) (let ((bX40ff@subst bX40fc@bX40fa) (bX4100@old* bX40fb@bX40f8)) (values (cons bX40f4@old bX4100@old*) bX40ff@subst)))))))))))) (set! bX3f28@find* (lambda (bX40dd@sym* bX40de@subst) (map (lambda (bX40e1@x) (let ((bX40e3@t (assq bX40e1@x bX40de@subst))) (if bX40e3@t (cdr bX40e3@t) (bX2c34@syntax-violation 'import '"cannot find identifier" bX40e1@x)))) bX40dd@sym*))) (set! bX3f2a@rem* (lambda (bX40d5@sym* bX40d6@subst) (let bX40db@f ((bX40d9@subst bX40d6@subst)) (if (null? bX40d9@subst) '() (if (memq (caar bX40d9@subst) bX40d5@sym*) (bX40db@f (cdr bX40d9@subst)) (cons (car bX40d9@subst) (bX40db@f (cdr bX40d9@subst)))))))) (set! bX3f2c@remove-dups (lambda (bX40d3@ls) (if (null? bX40d3@ls) '() (if (memq (car bX40d3@ls) (cdr bX40d3@ls)) (bX3f2c@remove-dups (cdr bX40d3@ls)) (cons (car bX40d3@ls) (bX3f2c@remove-dups (cdr bX40d3@ls))))))) (set! bX3f2e@parse-library-name (lambda (bX3feb@spec) (let ((bX3fee@subversion? '#f) (bX3ff0@subversion-pred '#f) (bX3ff2@version-pred '#f)) (begin (set! bX3fee@subversion? (lambda (bX40cf@x) (let ((bX40d1@x (bX2c3a@syntax->datum bX40cf@x))) (and (integer? bX40d1@x) (exact? bX40d1@x) (>= bX40d1@x '0))))) (set! bX3ff0@subversion-pred (lambda (bX406f@x*) (let ((bX4071@t bX406f@x*)) (let ((bX4073@ls/false (bX2b54@syntax-dispatch bX4071@t 'any))) (if (and bX4073@ls/false (apply (lambda (bX4075@n) (bX3fee@subversion? bX4075@n)) bX4073@ls/false)) (apply (lambda (bX4077@n) (lambda (bX4079@x) (= bX4079@x (bX2c3a@syntax->datum bX4077@n)))) bX4073@ls/false) (let ((bX407b@t bX4071@t)) (let ((bX407d@ls/false (bX2b54@syntax-dispatch bX407b@t '(any . each-any)))) (if (and bX407d@ls/false (apply (lambda (bX407f@p? bX4080@sub*) (eq? (bX2c3a@syntax->datum bX407f@p?) 'and)) bX407d@ls/false)) (apply (lambda (bX4083@p? bX4084@sub*) (let ((bX4087@p* (map bX3ff0@subversion-pred bX4084@sub*))) (lambda (bX4089@x) (for-all (lambda (bX408b@p) (bX408b@p bX4089@x)) bX4087@p*)))) bX407d@ls/false) (let ((bX408d@t bX407b@t)) (let ((bX408f@ls/false (bX2b54@syntax-dispatch bX408d@t '(any . each-any)))) (if (and bX408f@ls/false (apply (lambda (bX4091@p? bX4092@sub*) (eq? (bX2c3a@syntax->datum bX4091@p?) 'or)) bX408f@ls/false)) (apply (lambda (bX4095@p? bX4096@sub*) (let ((bX4099@p* (map bX3ff0@subversion-pred bX4096@sub*))) (lambda (bX409b@x) (exists (lambda (bX409d@p) (bX409d@p bX409b@x)) bX4099@p*)))) bX408f@ls/false) (let ((bX409f@t bX408d@t)) (let ((bX40a1@ls/false (bX2b54@syntax-dispatch bX409f@t '(any any)))) (if (and bX40a1@ls/false (apply (lambda (bX40a3@p? bX40a4@sub) (eq? (bX2c3a@syntax->datum bX40a3@p?) 'not)) bX40a1@ls/false)) (apply (lambda (bX40a7@p? bX40a8@sub) (let ((bX40ab@p (bX3ff0@subversion-pred bX40a8@sub))) (lambda (bX40ad@x) (not (bX40ab@p bX40ad@x))))) bX40a1@ls/false) (let ((bX40af@t bX409f@t)) (let ((bX40b1@ls/false (bX2b54@syntax-dispatch bX40af@t '(any any)))) (if (and bX40b1@ls/false (apply (lambda (bX40b3@p? bX40b4@n) (and (eq? (bX2c3a@syntax->datum bX40b3@p?) '<=) (bX3fee@subversion? bX40b4@n))) bX40b1@ls/false)) (apply (lambda (bX40b7@p? bX40b8@n) (lambda (bX40bb@x) (<= bX40bb@x (bX2c3a@syntax->datum bX40b8@n)))) bX40b1@ls/false) (let ((bX40bd@t bX40af@t)) (let ((bX40bf@ls/false (bX2b54@syntax-dispatch bX40bd@t '(any any)))) (if (and bX40bf@ls/false (apply (lambda (bX40c1@p? bX40c2@n) (and (eq? (bX2c3a@syntax->datum bX40c1@p?) '>=) (bX3fee@subversion? bX40c2@n))) bX40bf@ls/false)) (apply (lambda (bX40c5@p? bX40c6@n) (lambda (bX40c9@x) (>= bX40c9@x (bX2c3a@syntax->datum bX40c6@n)))) bX40bf@ls/false) (let ((bX40cb@t bX40bd@t)) (let ((bX40cd@ls/false (bX2b54@syntax-dispatch bX40cb@t '_))) (if bX40cd@ls/false (apply (lambda () (bX2c34@syntax-violation 'import '"invalid sub-version spec" bX3feb@spec bX406f@x*)) bX40cd@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX40cb@t)))))))))))))))))))))))) (set! bX3ff2@version-pred (lambda (bX401f@x*) (let ((bX4021@t bX401f@x*)) (let ((bX4023@ls/false (bX2b54@syntax-dispatch bX4021@t '()))) (if bX4023@ls/false (apply (lambda () (lambda (bX4025@x) '#t)) bX4023@ls/false) (let ((bX4027@t bX4021@t)) (let ((bX4029@ls/false (bX2b54@syntax-dispatch bX4027@t '(any . each-any)))) (if (and bX4029@ls/false (apply (lambda (bX402b@c bX402c@ver*) (eq? (bX2c3a@syntax->datum bX402b@c) 'and)) bX4029@ls/false)) (apply (lambda (bX402f@c bX4030@ver*) (let ((bX4033@p* (map bX3ff2@version-pred bX4030@ver*))) (lambda (bX4035@x) (for-all (lambda (bX4037@p) (bX4037@p bX4035@x)) bX4033@p*)))) bX4029@ls/false) (let ((bX4039@t bX4027@t)) (let ((bX403b@ls/false (bX2b54@syntax-dispatch bX4039@t '(any . each-any)))) (if (and bX403b@ls/false (apply (lambda (bX403d@c bX403e@ver*) (eq? (bX2c3a@syntax->datum bX403d@c) 'or)) bX403b@ls/false)) (apply (lambda (bX4041@c bX4042@ver*) (let ((bX4045@p* (map bX3ff2@version-pred bX4042@ver*))) (lambda (bX4047@x) (exists (lambda (bX4049@p) (bX4049@p bX4047@x)) bX4045@p*)))) bX403b@ls/false) (let ((bX404b@t bX4039@t)) (let ((bX404d@ls/false (bX2b54@syntax-dispatch bX404b@t '(any any)))) (if (and bX404d@ls/false (apply (lambda (bX404f@c bX4050@ver) (eq? (bX2c3a@syntax->datum bX404f@c) 'not)) bX404d@ls/false)) (apply (lambda (bX4053@c bX4054@ver) (let ((bX4057@p (bX3ff2@version-pred bX4054@ver))) (lambda (bX4059@x) (not (bX4057@p bX4059@x))))) bX404d@ls/false) (let ((bX405b@t bX404b@t)) (let ((bX405d@ls/false (bX2b54@syntax-dispatch bX405b@t 'each-any))) (if bX405d@ls/false (apply (lambda (bX405f@sub*) (let ((bX4061@p* (map bX3ff0@subversion-pred bX405f@sub*))) (lambda (bX4063@x) (let bX4069@f ((bX4065@p* bX4061@p*) (bX4066@x bX4063@x)) (if (null? bX4065@p*) '#t (if (null? bX4066@x) '#f (and ((car bX4065@p*) (car bX4066@x)) (bX4069@f (cdr bX4065@p*) (cdr bX4066@x))))))))) bX405d@ls/false) (let ((bX406b@t bX405b@t)) (let ((bX406d@ls/false (bX2b54@syntax-dispatch bX406b@t '_))) (if bX406d@ls/false (apply (lambda () (bX2c34@syntax-violation 'import '"invalid version spec" bX3feb@spec bX401f@x*)) bX406d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX406b@t))))))))))))))))))))) (let bX3ff5@f ((bX3ff3@x bX3feb@spec)) (let ((bX3ff7@t bX3ff3@x)) (let ((bX3ff9@ls/false (bX2b54@syntax-dispatch bX3ff7@t '(each-any)))) (if bX3ff9@ls/false (apply (lambda (bX3ffb@version-spec*) (values '() (bX3ff2@version-pred bX3ffb@version-spec*))) bX3ff9@ls/false) (let ((bX3ffd@t bX3ff7@t)) (let ((bX3fff@ls/false (bX2b54@syntax-dispatch bX3ffd@t '(any . any)))) (if (and bX3fff@ls/false (apply (lambda (bX4001@x bX4002@x*) (bX3f20@idsyn? bX4001@x)) bX3fff@ls/false)) (apply (lambda (bX4005@x bX4006@x*) (call-with-values (lambda () (bX3ff5@f bX4006@x*)) (lambda (bX400d@bX400a bX400e@bX400c) (let ((bX4011@pred bX400e@bX400c) (bX4012@name bX400d@bX400a)) (values (cons (bX2c3a@syntax->datum bX4005@x) bX4012@name) bX4011@pred))))) bX3fff@ls/false) (let ((bX4015@t bX3ffd@t)) (let ((bX4017@ls/false (bX2b54@syntax-dispatch bX4015@t '()))) (if bX4017@ls/false (apply (lambda () (values '() (lambda (bX4019@x) '#t))) bX4017@ls/false) (let ((bX401b@t bX4015@t)) (let ((bX401d@ls/false (bX2b54@syntax-dispatch bX401b@t '_))) (if bX401d@ls/false (apply (lambda () (bX2c34@syntax-violation '#f '"invalid import spec" bX3feb@spec)) bX401d@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX401b@t)))))))))))))))))) (set! bX3f30@import-library (lambda (bX3fdb@spec*) (call-with-values (lambda () (bX3f2e@parse-library-name bX3fdb@spec*)) (lambda (bX3fe1@bX3fde bX3fe2@bX3fe0) (let ((bX3fe5@pred bX3fe2@bX3fe0) (bX3fe6@name bX3fe1@bX3fde)) (begin (if (null? bX3fe6@name) (bX2c34@syntax-violation 'import '"empty library name" bX3fdb@spec*) (void)) (let ((bX3fe9@lib (bX275c@bX25a3@find-library-by-name bX3fe6@name))) (begin (if (not bX3fe9@lib) (bX2c34@syntax-violation 'import '"cannot find library with required name" bX3fe6@name) (void)) (if (not (bX3fe5@pred (bX2736@bX2557@library-version bX3fe9@lib))) (bX2c34@syntax-violation 'import '"library does not satisfy version specification" bX3fdb@spec* bX3fe9@lib) (void)) ((bX2bc0@imp-collector) bX3fe9@lib) (bX273e@bX2567@library-subst bX3fe9@lib))))))))) (set! bX3f32@get-import (lambda (bX3f4d@spec) (let ((bX3f4f@t bX3f4d@spec)) (let ((bX3f51@ls/false (bX2b54@syntax-dispatch bX3f4f@t '(any . each-any)))) (if (and bX3f51@ls/false (apply (lambda (bX3f53@x bX3f54@x*) (not (memq (bX2c3a@syntax->datum bX3f53@x) '(for rename except only prefix library)))) bX3f51@ls/false)) (apply (lambda (bX3f57@x bX3f58@x*) (bX3f30@import-library (cons bX3f57@x bX3f58@x*))) bX3f51@ls/false) (let ((bX3f5b@t bX3f4f@t)) (let ((bX3f5d@ls/false (bX2b54@syntax-dispatch bX3f5b@t '(any any . #(each (any any)))))) (if (and bX3f5d@ls/false (apply (lambda (bX3f5f@rename bX3f60@isp bX3f61@old* bX3f62@new*) (and (eq? (bX2c3a@syntax->datum bX3f5f@rename) 'rename) (for-all bX3f20@idsyn? bX3f61@old*) (for-all bX3f20@idsyn? bX3f62@new*))) bX3f5d@ls/false)) (apply (lambda (bX3f67@rename bX3f68@isp bX3f69@old* bX3f6a@new*) (let ((bX3f6f@subst (bX3f32@get-import bX3f68@isp)) (bX3f70@old* (map bX2c3a@syntax->datum bX3f69@old*)) (bX3f71@new* (map bX2c3a@syntax->datum bX3f6a@new*))) (let ((bX3f75@old-label* (bX3f28@find* bX3f70@old* bX3f6f@subst))) (let ((bX3f77@subst (bX3f2a@rem* bX3f70@old* bX3f6f@subst))) (bX3f24@merge-substs (map cons bX3f71@new* bX3f75@old-label*) bX3f77@subst))))) bX3f5d@ls/false) (let ((bX3f79@t bX3f5b@t)) (let ((bX3f7b@ls/false (bX2b54@syntax-dispatch bX3f79@t '(any any . each-any)))) (if (and bX3f7b@ls/false (apply (lambda (bX3f7d@except bX3f7e@isp bX3f7f@sym*) (and (eq? (bX2c3a@syntax->datum bX3f7d@except) 'except) (for-all bX3f20@idsyn? bX3f7f@sym*))) bX3f7b@ls/false)) (apply (lambda (bX3f83@except bX3f84@isp bX3f85@sym*) (let ((bX3f89@subst (bX3f32@get-import bX3f84@isp))) (bX3f2a@rem* (map bX2c3a@syntax->datum bX3f85@sym*) bX3f89@subst))) bX3f7b@ls/false) (let ((bX3f8b@t bX3f79@t)) (let ((bX3f8d@ls/false (bX2b54@syntax-dispatch bX3f8b@t '(any any . each-any)))) (if (and bX3f8d@ls/false (apply (lambda (bX3f8f@only bX3f90@isp bX3f91@sym*) (and (eq? (bX2c3a@syntax->datum bX3f8f@only) 'only) (for-all bX3f20@idsyn? bX3f91@sym*))) bX3f8d@ls/false)) (apply (lambda (bX3f95@only bX3f96@isp bX3f97@sym*) (let ((bX3f9b@subst (bX3f32@get-import bX3f96@isp)) (bX3f9c@sym* (map bX2c3a@syntax->datum bX3f97@sym*))) (let ((bX3f9f@sym* (bX3f2c@remove-dups bX3f9c@sym*))) (let ((bX3fa1@lab* (bX3f28@find* bX3f9f@sym* bX3f9b@subst))) (map cons bX3f9f@sym* bX3fa1@lab*))))) bX3f8d@ls/false) (let ((bX3fa3@t bX3f8b@t)) (let ((bX3fa5@ls/false (bX2b54@syntax-dispatch bX3fa3@t '(any any any)))) (if (and bX3fa5@ls/false (apply (lambda (bX3fa7@prefix bX3fa8@isp bX3fa9@p) (and (eq? (bX2c3a@syntax->datum bX3fa7@prefix) 'prefix) (bX3f20@idsyn? bX3fa9@p))) bX3fa5@ls/false)) (apply (lambda (bX3fad@prefix bX3fae@isp bX3faf@p) (let ((bX3fb3@subst (bX3f32@get-import bX3fae@isp)) (bX3fb4@prefix (symbol->string (bX2c3a@syntax->datum bX3faf@p)))) (map (lambda (bX3fb7@x) (cons (string->symbol (string-append bX3fb4@prefix (symbol->string (car bX3fb7@x)))) (cdr bX3fb7@x))) bX3fb3@subst))) bX3fa5@ls/false) (let ((bX3fb9@t bX3fa3@t)) (let ((bX3fbb@ls/false (bX2b54@syntax-dispatch bX3fb9@t '(any each-any)))) (if (and bX3fbb@ls/false (apply (lambda (bX3fbd@library bX3fbe@spec*) (eq? (bX2c3a@syntax->datum bX3fbd@library) 'library)) bX3fbb@ls/false)) (apply (lambda (bX3fc1@library bX3fc2@spec*) (bX3f30@import-library bX3fc2@spec*)) bX3fbb@ls/false) (let ((bX3fc5@t bX3fb9@t)) (let ((bX3fc7@ls/false (bX2b54@syntax-dispatch bX3fc5@t '(any any . any)))) (if (and bX3fc7@ls/false (apply (lambda (bX3fc9@for bX3fca@isp bX3fcb@rest) (eq? (bX2c3a@syntax->datum bX3fc9@for) 'for)) bX3fc7@ls/false)) (apply (lambda (bX3fcf@for bX3fd0@isp bX3fd1@rest) (bX3f32@get-import bX3fd0@isp)) bX3fc7@ls/false) (let ((bX3fd5@t bX3fc5@t)) (let ((bX3fd7@ls/false (bX2b54@syntax-dispatch bX3fd5@t 'any))) (if bX3fd7@ls/false (apply (lambda (bX3fd9@spec) (bX2c34@syntax-violation 'import '"invalid import spec" bX3fd9@spec)) bX3fd7@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX3fd5@t))))))))))))))))))))))))))) (set! bX3f34@add-imports! (lambda (bX3f3d@imp bX3f3e@h) (let ((bX3f41@subst (bX3f32@get-import bX3f3d@imp))) (for-each (lambda (bX3f43@x) (let ((bX3f45@name (car bX3f43@x)) (bX3f46@label (cdr bX3f43@x))) (let ((bX3f49@t (hashtable-ref bX3f3e@h bX3f45@name '#f))) (if bX3f49@t ((lambda (bX3f4b@l) (if (not (eq? bX3f4b@l bX3f46@label)) (bX3f22@dup-error bX3f45@name) (void))) bX3f49@t) (hashtable-set! bX3f3e@h bX3f45@name bX3f46@label))))) bX3f41@subst)))) (lambda (bX3f35@imp*) (let bX3f3b@f ((bX3f37@imp* bX3f35@imp*) (bX3f38@h (make-eq-hashtable))) (if (null? bX3f37@imp*) (hashtable-entries bX3f38@h) (begin (bX3f34@add-imports! (car bX3f37@imp*) bX3f38@h) (bX3f3b@f (cdr bX3f37@imp*) bX3f38@h)))))))) (set! bX4657@bX2bb6@parse-import-spec* bX2bb6@parse-import-spec*) (set! bX2bb8@make-top-rib (lambda (bX412b@names bX412c@labels) (let ((bX412f@rib (bX2901@make-empty-rib))) (begin (vector-for-each (lambda (bX4131@name bX4132@label) (begin (if (not (symbol? bX4131@name)) (error 'make-top-rib '"BUG: not a symbol" bX4131@name) (void)) (bX2905@extend-rib/nc! bX412f@rib (make-simple-struct 'stx '5 (list bX4131@name bX28d1@top-mark* '() '())) bX4132@label))) bX412b@names bX412c@labels) bX412f@rib)))) (set! bX4658@bX2bb8@make-top-rib bX2bb8@make-top-rib) (set! bX2bba@make-collector (lambda () (let ((bX4135@ls '())) (lambda bX4139 (let ((bX413a (length bX4139))) (if (= bX413a '0) (apply (lambda () bX4135@ls) bX4139) (if (= bX413a '1) (apply (lambda (bX4137@x) (set! bX4135@ls (bX28ca@set-cons bX4137@x bX4135@ls))) bX4139) (error 'apply '"invalid arg count")))))))) (set! bX4659@bX2bba@make-collector bX2bba@make-collector) (set! bX2bbc@inv-collector (bX2497@bX2376@make-parameter (lambda bX413b@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bX413d@x) (begin (if (not (procedure? bX413d@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bX413d@x) (void)) bX413d@x)))) (set! bX465a@bX2bbc@inv-collector bX2bbc@inv-collector) (set! bX2bbe@vis-collector (bX2497@bX2376@make-parameter (lambda bX413f@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bX4141@x) (begin (if (not (procedure? bX4141@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bX4141@x) (void)) bX4141@x)))) (set! bX465b@bX2bbe@vis-collector bX2bbe@vis-collector) (set! bX2bc0@imp-collector (bX2497@bX2376@make-parameter (lambda bX4143@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bX4145@x) (begin (if (not (procedure? bX4145@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bX4145@x) (void)) bX4145@x)))) (set! bX465c@bX2bc0@imp-collector bX2bc0@imp-collector) (set! bX2bc2@chi-library-internal (lambda (bX4147@e* bX4148@rib bX4149@top?) (call-with-values (lambda () (bX2bac@chi-body* bX4147@e* '() '() '() '() '() '() '() bX4148@rib bX4149@top?)) (lambda (bX415d@bX414e bX415e@bX4150 bX415f@bX4152 bX4160@bX4154 bX4161@bX4156 bX4162@bX4158 bX4163@bX415a bX4164@bX415c) (let ((bX416d@exp* bX4164@bX415c) (bX416e@_kwd* bX4163@bX415a) (bX416f@mod** bX4162@bX4158) (bX4170@rhs* bX4161@bX4156) (bX4171@lex* bX4160@bX4154) (bX4172@mr bX415f@bX4152) (bX4173@r bX415e@bX4150) (bX4174@e* bX415d@bX414e)) (values (append (apply append (reverse bX416f@mod**)) bX4174@e*) bX4173@r bX4172@mr (reverse bX4171@lex*) (reverse bX4170@rhs*) bX416d@exp*)))))) (set! bX465d@bX2bc2@chi-library-internal bX2bc2@chi-library-internal) (set! bX2bc4@chi-interaction-expr (lambda (bX417d@e bX417e@rib bX417f@r) (call-with-values (lambda () (bX2bac@chi-body* (list bX417d@e) bX417f@r bX417f@r '() '() '() '() '() bX417e@rib '#t)) (lambda (bX4193@bX4184 bX4194@bX4186 bX4195@bX4188 bX4196@bX418a bX4197@bX418c bX4198@bX418e bX4199@bX4190 bX419a@bX4192) (let ((bX41a3@_exp* bX419a@bX4192) (bX41a4@_kwd* bX4199@bX4190) (bX41a5@mod** bX4198@bX418e) (bX41a6@rhs* bX4197@bX418c) (bX41a7@lex* bX4196@bX418a) (bX41a8@mr bX4195@bX4188) (bX41a9@r bX4194@bX4186) (bX41aa@e* bX4193@bX4184)) (let ((bX41b3@e* (bX2b84@expand-interaction-rhs*/init* (reverse bX41a7@lex*) (reverse bX41a6@rhs*) (append (apply append (reverse bX41a5@mod**)) bX41aa@e*) bX41a9@r bX41a8@mr))) (let ((bX41b5@e (if (null? bX41b3@e*) (bX28b3@bX280e@build-void) (if (null? (cdr bX41b3@e*)) (car bX41b3@e*) (bX28b2@bX280c@build-sequence '#f bX41b3@e*))))) (values bX41b5@e bX41a9@r)))))))) (set! bX465e@bX2bc4@chi-interaction-expr bX2bc4@chi-interaction-expr) (set! bX2bc6@library-body-expander (lambda (bX41b7@name bX41b8@main-exp* bX41b9@imp* bX41ba@b* bX41bb@top?) (let ((bX41c2@itc '#f)) (begin (set! bX41c2@itc (bX2bba@make-collector)) (let ((bX41cb@bX41c4 bX2bc0@imp-collector) (bX41cc@bX41c6 bX2c44@top-level-context) (bX41cd@bX41c8 bX41c2@itc) (bX41ce@bX41ca '#f)) (let ((bX41d3@swap (lambda () (begin (let ((bX41d5@t (bX41cb@bX41c4))) (begin (bX41cb@bX41c4 bX41cd@bX41c8) (set! bX41cd@bX41c8 bX41d5@t))) (let ((bX41d7@t (bX41cc@bX41c6))) (begin (bX41cc@bX41c6 bX41ce@bX41ca) (set! bX41ce@bX41ca bX41d7@t))))))) (dynamic-wind bX41d3@swap (lambda () (call-with-values (lambda () (bX2bb6@parse-import-spec* bX41b9@imp*)) (lambda (bX41dd@bX41da bX41de@bX41dc) (let ((bX41e1@subst-labels bX41de@bX41dc) (bX41e2@subst-names bX41dd@bX41da)) (let ((bX41e5@rib (bX2bb8@make-top-rib bX41e2@subst-names bX41e1@subst-labels))) (let ((bX41e8@wrap '#f)) (begin (set! bX41e8@wrap (lambda (bX4263@x) (make-simple-struct 'stx '5 (list bX4263@x bX28d1@top-mark* (list bX41e5@rib) '())))) (let ((bX41e9@b* (map bX41e8@wrap bX41ba@b*)) (bX41ea@main-exp* (map bX41e8@wrap bX41b8@main-exp*)) (bX41eb@rtc (bX2bba@make-collector)) (bX41ec@vtc (bX2bba@make-collector))) (let ((bX41f9@bX41f2 bX2bbc@inv-collector) (bX41fa@bX41f4 bX2bbe@vis-collector) (bX41fb@bX41f6 bX41eb@rtc) (bX41fc@bX41f8 bX41ec@vtc)) (let ((bX4201@swap (lambda () (begin (let ((bX4203@t (bX41f9@bX41f2))) (begin (bX41f9@bX41f2 bX41fb@bX41f6) (set! bX41fb@bX41f6 bX4203@t))) (let ((bX4205@t (bX41fa@bX41f4))) (begin (bX41fa@bX41f4 bX41fc@bX41f8) (set! bX41fc@bX41f8 bX4205@t))))))) (dynamic-wind bX4201@swap (lambda () (call-with-values (lambda () (bX2bc2@chi-library-internal bX41e9@b* bX41e5@rib bX41bb@top?)) (lambda (bX4213@bX4208 bX4214@bX420a bX4215@bX420c bX4216@bX420e bX4217@bX4210 bX4218@bX4212) (let ((bX421f@internal-exp* bX4218@bX4212) (bX4220@rhs* bX4217@bX4210) (bX4221@lex* bX4216@bX420e) (bX4222@mr bX4215@bX420c) (bX4223@r bX4214@bX420a) (bX4224@init* bX4213@bX4208)) (call-with-values (lambda () (bX2bb0@parse-exports (append bX41ea@main-exp* bX421f@internal-exp*))) (lambda (bX422f@bX422c bX4230@bX422e) (let ((bX4233@exp-id* bX4230@bX422e) (bX4234@exp-name* bX422f@bX422c)) (begin (bX2909@seal-rib! bX41e5@rib) (let ((bX4237@init* (bX2b72@chi-expr* bX4224@init* bX4223@r bX4222@mr))) (let ((bX4239@rhs* (bX2b86@chi-rhs* bX4220@rhs* bX4223@r bX4222@mr))) (begin (bX290b@unseal-rib! bX41e5@rib) (let ((bX423b@loc* (map bX28d7@gen-global bX4221@lex*)) (bX423c@export-subst (bX2c1e@make-export-subst bX4234@exp-name* bX4233@exp-id*))) (let ((bX4240@errstr '#f)) (begin (set! bX4240@errstr '"attempt to export mutated variable") (call-with-values (lambda () (bX2c20@make-export-env/macros bX4221@lex* bX423b@loc* bX4223@r)) (lambda (bX4247@bX4242 bX4248@bX4244 bX4249@bX4246) (let ((bX424d@macro* bX4249@bX4246) (bX424e@global* bX4248@bX4244) (bX424f@export-env bX4247@bX4242)) (begin (for-each (lambda (bX4253@s) (let ((bX4255@name (car bX4253@s)) (bX4256@label (cdr bX4253@s))) (let ((bX4259@p (assq bX4256@label bX424f@export-env))) (if bX4259@p (let ((bX425b@b (cdr bX4259@p))) (let ((bX425d@type (car bX425b@b))) (if (eq? bX425d@type 'mutable) (bX2c34@syntax-violation 'export bX4240@errstr bX4255@name) (void)))) (void))))) bX423c@export-subst) (let ((bX425f@invoke-body (bX28b8@bX2818@build-library-letrec* '#f bX41b7@name bX4221@lex* bX423b@loc* bX4239@rhs* (if (null? bX4237@init*) (bX28b3@bX280e@build-void) (bX28b2@bX280c@build-sequence '#f bX4237@init*)))) (bX4260@invoke-definitions (map bX28af@bX276b@build-global-define (map cdr bX424e@global*)))) (values (bX41c2@itc) (bX41eb@rtc) (bX41ec@vtc) (bX28b2@bX280c@build-sequence '#f (append bX4260@invoke-definitions (list bX425f@invoke-body))) bX424d@macro* bX423c@export-subst bX424f@export-env)))))))))))))))))))) bX4201@swap))))))))))) bX41d3@swap))))))) (set! bX465f@bX2bc6@library-body-expander bX2bc6@library-body-expander) (set! bX2bc8@core-library-expander (lambda (bX4265@e bX4266@verify-name) (call-with-values (lambda () (bX2bb4@parse-library bX4265@e)) (lambda (bX4271@bX426a bX4272@bX426c bX4273@bX426e bX4274@bX4270) (let ((bX4279@b* bX4274@bX4270) (bX427a@imp* bX4273@bX426e) (bX427b@exp* bX4272@bX426c) (bX427c@name* bX4271@bX426a)) (call-with-values (lambda () (bX2bb2@parse-library-name bX427c@name*)) (lambda (bX4285@bX4282 bX4286@bX4284) (let ((bX4289@ver bX4286@bX4284) (bX428a@name bX4285@bX4282)) (begin (bX4266@verify-name bX428a@name) (call-with-values (lambda () (bX2bc6@library-body-expander bX428a@name bX427b@exp* bX427a@imp* bX4279@b* '#f)) (lambda (bX429b@bX428e bX429c@bX4290 bX429d@bX4292 bX429e@bX4294 bX429f@bX4296 bX42a0@bX4298 bX42a1@bX429a) (let ((bX42a9@export-env bX42a1@bX429a) (bX42aa@export-subst bX42a0@bX4298) (bX42ab@visit-code bX429f@bX4296) (bX42ac@invoke-code bX429e@bX4294) (bX42ad@visit-req* bX429d@bX4292) (bX42ae@invoke-req* bX429c@bX4290) (bX42af@imp* bX429b@bX428e)) (values bX428a@name bX4289@ver bX42af@imp* bX42ae@invoke-req* bX42ad@visit-req* bX42ac@invoke-code bX42ab@visit-code bX42aa@export-subst bX42a9@export-env))))))))))))) (set! bX4660@bX2bc8@core-library-expander bX2bc8@core-library-expander) (set! bX2bca@parse-top-level-program (lambda (bX42b7@e*) (let ((bX42b9@t bX42b7@e*)) (let ((bX42bb@ls/false (bX2b54@syntax-dispatch bX42b9@t '((any . each-any) . each-any)))) (if (and bX42bb@ls/false (apply (lambda (bX42bd@import bX42be@imp* bX42bf@b*) (eq? (bX2c3a@syntax->datum bX42bd@import) 'import)) bX42bb@ls/false)) (apply (lambda (bX42c3@import bX42c4@imp* bX42c5@b*) (values bX42c4@imp* bX42c5@b*)) bX42bb@ls/false) (let ((bX42c9@t bX42b9@t)) (let ((bX42cb@ls/false (bX2b54@syntax-dispatch bX42c9@t '((any . any) . any)))) (if (and bX42cb@ls/false (apply (lambda (bX42cd@import bX42ce@x bX42cf@y) (eq? (bX2c3a@syntax->datum bX42cd@import) 'import)) bX42cb@ls/false)) (apply (lambda (bX42d3@import bX42d4@x bX42d5@y) (bX2c34@syntax-violation 'expander '"invalid syntax of top-level program" (bX2947@syntax-car bX42b7@e*))) bX42cb@ls/false) (let ((bX42d9@t bX42c9@t)) (let ((bX42db@ls/false (bX2b54@syntax-dispatch bX42d9@t '_))) (if bX42db@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bX42db@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX42d9@t)))))))))))) (set! bX4661@bX2bca@parse-top-level-program bX2bca@parse-top-level-program) (set! bX2bcc@top-level-expander (lambda (bX42dd@e*) (call-with-values (lambda () (bX2bca@parse-top-level-program bX42dd@e*)) (lambda (bX42e3@bX42e0 bX42e4@bX42e2) (let ((bX42e7@b* bX42e4@bX42e2) (bX42e8@imp* bX42e3@bX42e0)) (call-with-values (lambda () (bX2bc6@library-body-expander '() '() bX42e8@imp* bX42e7@b* '#t)) (lambda (bX42f9@bX42ec bX42fa@bX42ee bX42fb@bX42f0 bX42fc@bX42f2 bX42fd@bX42f4 bX42fe@bX42f6 bX42ff@bX42f8) (let ((bX4307@export-env bX42ff@bX42f8) (bX4308@export-subst bX42fe@bX42f6) (bX4309@visit-code bX42fd@bX42f4) (bX430a@invoke-code bX42fc@bX42f2) (bX430b@visit-req* bX42fb@bX42f0) (bX430c@invoke-req* bX42fa@bX42ee) (bX430d@imp* bX42f9@bX42ec)) (values bX430c@invoke-req* bX430a@invoke-code))))))))) (set! bX4662@bX2bcc@top-level-expander bX2bcc@top-level-expander) (set! bX2bce@rp (bX2494@bX2370@make-record-printer 'env (lambda (bX4315@x bX4316@p bX4317@wr) (display '"#<environment>" bX4316@p)))) (set! bX4663@bX2bce@rp bX2bce@rp) (set! bX2bd8@env? (lambda (bX431b@x) (and (simple-struct? bX431b@x) (eq? (simple-struct-name bX431b@x) 'env)))) (set! bX4664@bX2bd8@env? bX2bd8@env?) (set! bX2bda@env-names (lambda (bX431d@x) (simple-struct-ref bX431d@x '0))) (set! bX4665@bX2bda@env-names bX2bda@env-names) (set! bX2bdc@set-env-names! (lambda (bX431f@x bX4320@val) (simple-struct-set! bX431f@x '0 bX4320@val))) (set! bX4666@bX2bdc@set-env-names! bX2bdc@set-env-names!) (set! bX2bde@env-labels (lambda (bX4323@x) (simple-struct-ref bX4323@x '1))) (set! bX4667@bX2bde@env-labels bX2bde@env-labels) (set! bX2be0@set-env-labels! (lambda (bX4325@x bX4326@val) (simple-struct-set! bX4325@x '1 bX4326@val))) (set! bX4668@bX2be0@set-env-labels! bX2be0@set-env-labels!) (set! bX2be2@env-itc (lambda (bX4329@x) (simple-struct-ref bX4329@x '2))) (set! bX4669@bX2be2@env-itc bX2be2@env-itc) (set! bX2be4@set-env-itc! (lambda (bX432b@x bX432c@val) (simple-struct-set! bX432b@x '2 bX432c@val))) (set! bX466a@bX2be4@set-env-itc! bX2be4@set-env-itc!) (set! bX2be6@dummy '3) (set! bX466b@bX2be6@dummy bX2be6@dummy) (set! bX2be8@rp (bX2494@bX2370@make-record-printer 'interaction-env (lambda (bX432f@x bX4330@p bX4331@wr) (display '"#<environment>" bX4330@p)))) (set! bX466c@bX2be8@rp bX2be8@rp) (set! bX2bf2@interaction-env? (lambda (bX4335@x) (and (simple-struct? bX4335@x) (eq? (simple-struct-name bX4335@x) 'interaction-env)))) (set! bX466d@bX2bf2@interaction-env? bX2bf2@interaction-env?) (set! bX2bf4@interaction-env-rib (lambda (bX4337@x) (simple-struct-ref bX4337@x '0))) (set! bX466e@bX2bf4@interaction-env-rib bX2bf4@interaction-env-rib) (set! bX2bf6@set-interaction-env-rib! (lambda (bX4339@x bX433a@val) (simple-struct-set! bX4339@x '0 bX433a@val))) (set! bX466f@bX2bf6@set-interaction-env-rib! bX2bf6@set-interaction-env-rib!) (set! bX2bf8@interaction-env-r (lambda (bX433d@x) (simple-struct-ref bX433d@x '1))) (set! bX4670@bX2bf8@interaction-env-r bX2bf8@interaction-env-r) (set! bX2bfa@set-interaction-env-r! (lambda (bX433f@x bX4340@val) (simple-struct-set! bX433f@x '1 bX4340@val))) (set! bX4671@bX2bfa@set-interaction-env-r! bX2bfa@set-interaction-env-r!) (set! bX2bfc@interaction-env-locs (lambda (bX4343@x) (simple-struct-ref bX4343@x '2))) (set! bX4672@bX2bfc@interaction-env-locs bX2bfc@interaction-env-locs) (set! bX2bfe@set-interaction-env-locs! (lambda (bX4345@x bX4346@val) (simple-struct-set! bX4345@x '2 bX4346@val))) (set! bX4673@bX2bfe@set-interaction-env-locs! bX2bfe@set-interaction-env-locs!) (set! bX2c00@dummy '3) (set! bX4674@bX2c00@dummy bX2c00@dummy) (set! bX2c02@interaction-environment-symbols (lambda () (bX2c0a@environment-symbols (bX2c42@interaction-environment)))) (set! bX4675@bX2c02@interaction-environment-symbols bX2c02@interaction-environment-symbols) (set! bX2c04@environment-bindings (lambda (bX4349@e) (vector->list (vector-map (lambda (bX434b@name bX434c@label) (bX2c06@parse-binding (cons bX434b@name (bX2762@bX25af@imported-label->binding bX434c@label)))) (bX2bda@env-names bX4349@e) (bX2bde@env-labels bX4349@e))))) (set! bX4676@bX2c04@environment-bindings bX2c04@environment-bindings) (set! bX2c06@parse-binding (lambda (bX434f@b) (cons (car bX434f@b) (let ((bX4351@t (cadr bX434f@b))) (if (memv bX4351@t '(core-prim global)) 'procedure (if (memv bX4351@t '(core-macro macro global-macro)) 'syntax (if (memv bX4351@t '($core-rtd)) 'record (if (eq? (car bX434f@b) (cadr bX434f@b)) 'syntax 'unknown)))))))) (set! bX4677@bX2c06@parse-binding bX2c06@parse-binding) (set! bX2c08@environment? (lambda (bX4353@x) (or (bX2bd8@env? bX4353@x) (bX2bf2@interaction-env? bX4353@x)))) (set! bX4678@bX2c08@environment? bX2c08@environment?) (set! bX2c0a@environment-symbols (lambda (bX4355@x) (if (bX2bd8@env? bX4355@x) (vector->list (bX2bda@env-names bX4355@x)) (if (bX2bf2@interaction-env? bX4355@x) (map values (bX28eb@rib-sym* (bX2bf4@interaction-env-rib bX4355@x))) (assertion-violation 'environment-symbols '"not an environment" bX4355@x))))) (set! bX4679@bX2c0a@environment-symbols bX2c0a@environment-symbols) (set! bX2c0c@environment (lambda bX4357@imp* (let ((bX4359@itc (bX2bba@make-collector))) (let ((bX435f@bX435c bX2bc0@imp-collector) (bX4360@bX435e bX4359@itc)) (let ((bX4363@swap (lambda () (let ((bX4365@t (bX435f@bX435c))) (begin (bX435f@bX435c bX4360@bX435e) (set! bX4360@bX435e bX4365@t)))))) (dynamic-wind bX4363@swap (lambda () (call-with-values (lambda () (bX2bb6@parse-import-spec* bX4357@imp*)) (lambda (bX436b@bX4368 bX436c@bX436a) (let ((bX436f@subst-labels bX436c@bX436a) (bX4370@subst-names bX436b@bX4368)) (make-simple-struct 'env '4 (list bX4370@subst-names bX436f@subst-labels bX4359@itc)))))) bX4363@swap)))))) (set! bX467a@bX2c0c@environment bX2c0c@environment) (set! bX2c0e@null-environment (lambda (bX4373@n) (begin (if (not (eqv? bX4373@n '5)) (assertion-violation 'null-environment '"not 5" bX4373@n) (void)) (bX2c0c@environment '(psyntax null-environment-5))))) (set! bX467b@bX2c0e@null-environment bX2c0e@null-environment) (set! bX2c10@scheme-report-environment (lambda (bX4375@n) (begin (if (not (eqv? bX4375@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bX4375@n) (void)) (bX2c0c@environment '(psyntax scheme-report-environment-5))))) (set! bX467c@bX2c10@scheme-report-environment bX2c10@scheme-report-environment) (set! bX2c12@expand (lambda (bX4377@x bX4378@env) (if (bX2bd8@env? bX4378@env) (let ((bX437b@rib (bX2bb8@make-top-rib (bX2bda@env-names bX4378@env) (bX2bde@env-labels bX4378@env)))) (let ((bX437d@x (make-simple-struct 'stx '5 (list bX4377@x bX28d1@top-mark* (list bX437b@rib) '()))) (bX437e@itc (bX2be2@env-itc bX4378@env)) (bX437f@rtc (bX2bba@make-collector)) (bX4380@vtc (bX2bba@make-collector))) (let ((bX4385@x (let ((bX4397@bX4388 bX2c44@top-level-context) (bX4398@bX438a bX2bbc@inv-collector) (bX4399@bX438c bX2bbe@vis-collector) (bX439a@bX438e bX2bc0@imp-collector) (bX439b@bX4390 '#f) (bX439c@bX4392 bX437f@rtc) (bX439d@bX4394 bX4380@vtc) (bX439e@bX4396 bX437e@itc)) (let ((bX43a7@swap (lambda () (begin (let ((bX43a9@t (bX4397@bX4388))) (begin (bX4397@bX4388 bX439b@bX4390) (set! bX439b@bX4390 bX43a9@t))) (let ((bX43ab@t (bX4398@bX438a))) (begin (bX4398@bX438a bX439c@bX4392) (set! bX439c@bX4392 bX43ab@t))) (let ((bX43ad@t (bX4399@bX438c))) (begin (bX4399@bX438c bX439d@bX4394) (set! bX439d@bX4394 bX43ad@t))) (let ((bX43af@t (bX439a@bX438e))) (begin (bX439a@bX438e bX439e@bX4396) (set! bX439e@bX4396 bX43af@t))))))) (dynamic-wind bX43a7@swap (lambda () (bX2b76@chi-expr bX437d@x '() '())) bX43a7@swap))))) (begin (bX2909@seal-rib! bX437b@rib) (values bX4385@x (bX437f@rtc)))))) (if (bX2bf2@interaction-env? bX4378@env) (let ((bX43b1@rib (bX2bf4@interaction-env-rib bX4378@env)) (bX43b2@r (bX2bf8@interaction-env-r bX4378@env)) (bX43b3@rtc (bX2bba@make-collector))) (let ((bX43b7@x (make-simple-struct 'stx '5 (list bX4377@x bX28d1@top-mark* (list bX43b1@rib) '())))) (call-with-values (lambda () (let ((bX43cd@bX43be bX2c44@top-level-context) (bX43ce@bX43c0 bX2bbc@inv-collector) (bX43cf@bX43c2 bX2bbe@vis-collector) (bX43d0@bX43c4 bX2bc0@imp-collector) (bX43d1@bX43c6 bX4378@env) (bX43d2@bX43c8 bX43b3@rtc) (bX43d3@bX43ca (bX2bba@make-collector)) (bX43d4@bX43cc (bX2bba@make-collector))) (let ((bX43dd@swap (lambda () (begin (let ((bX43df@t (bX43cd@bX43be))) (begin (bX43cd@bX43be bX43d1@bX43c6) (set! bX43d1@bX43c6 bX43df@t))) (let ((bX43e1@t (bX43ce@bX43c0))) (begin (bX43ce@bX43c0 bX43d2@bX43c8) (set! bX43d2@bX43c8 bX43e1@t))) (let ((bX43e3@t (bX43cf@bX43c2))) (begin (bX43cf@bX43c2 bX43d3@bX43ca) (set! bX43d3@bX43ca bX43e3@t))) (let ((bX43e5@t (bX43d0@bX43c4))) (begin (bX43d0@bX43c4 bX43d4@bX43cc) (set! bX43d4@bX43cc bX43e5@t))))))) (dynamic-wind bX43dd@swap (lambda () (bX2bc4@chi-interaction-expr bX43b7@x bX43b1@rib bX43b2@r)) bX43dd@swap)))) (lambda (bX43e7@bX43ba bX43e8@bX43bc) (let ((bX43eb@r^ bX43e8@bX43bc) (bX43ec@e bX43e7@bX43ba)) (begin (bX2bfa@set-interaction-env-r! bX4378@env bX43eb@r^) (values bX43ec@e (bX43b3@rtc)))))))) (assertion-violation 'expand '"not an environment" bX4378@env))))) (set! bX467d@bX2c12@expand bX2c12@expand) (set! bX2c14@eval (lambda (bX43ef@x bX43f0@env) (begin (if (not (bX2c08@environment? bX43f0@env)) (error 'eval '"not an environment" bX43f0@env) (void)) (call-with-values (lambda () (bX2c12@expand bX43ef@x bX43f0@env)) (lambda (bX43f7@bX43f4 bX43f8@bX43f6) (let ((bX43fb@invoke-req* bX43f8@bX43f6) (bX43fc@x bX43f7@bX43f4)) (begin (for-each bX2763@bX25b1@invoke-library bX43fb@invoke-req*) (eval-core (bX24ed@bX24a5@expanded->core bX43fc@x))))))))) (set! bX467e@bX2c14@eval bX2c14@eval) (set! bX2c16@library-expander (lambda bX446d (let ((bX446e (length bX446d))) (if (= bX446e '3) (apply (lambda (bX43ff@x bX4400@filename bX4401@verify-name) (let ((bX4406@build-visit-code '#f) (bX4408@visit! '#f)) (begin (set! bX4406@build-visit-code (lambda (bX445b@macro*) (if (null? bX445b@macro*) (bX28b3@bX280e@build-void) (bX28b2@bX280c@build-sequence '#f (map (lambda (bX445d@x) (let ((bX445f@loc (car bX445d@x)) (bX4460@src (cddr bX445d@x))) (list 'set! bX445f@loc bX4460@src))) bX445b@macro*))))) (set! bX4408@visit! (lambda (bX4453@macro*) (for-each (lambda (bX4455@x) (let ((bX4457@loc (car bX4455@x)) (bX4458@proc (cadr bX4455@x))) (set-symbol-value! bX4457@loc bX4458@proc))) bX4453@macro*))) (call-with-values (lambda () (bX2bc8@core-library-expander bX43ff@x bX4401@verify-name)) (lambda (bX441b@bX440a bX441c@bX440c bX441d@bX440e bX441e@bX4410 bX441f@bX4412 bX4420@bX4414 bX4421@bX4416 bX4422@bX4418 bX4423@bX441a) (let ((bX442d@export-env bX4423@bX441a) (bX442e@export-subst bX4422@bX4418) (bX442f@macro* bX4421@bX4416) (bX4430@invoke-code bX4420@bX4414) (bX4431@vis* bX441f@bX4412) (bX4432@inv* bX441e@bX4410) (bX4433@imp* bX441d@bX440e) (bX4434@ver bX441c@bX440c) (bX4435@name bX441b@bX440a)) (let ((bX443f@id (gensym)) (bX4440@name bX4435@name) (bX4441@ver bX4434@ver) (bX4442@imp* (map bX2767@bX25b9@library-spec bX4433@imp*)) (bX4443@vis* (map bX2767@bX25b9@library-spec bX4431@vis*)) (bX4444@inv* (map bX2767@bX25b9@library-spec bX4432@inv*)) (bX4445@visit-proc (lambda () (bX4408@visit! bX442f@macro*))) (bX4446@invoke-proc (lambda () (eval-core (bX24ed@bX24a5@expanded->core bX4430@invoke-code)))) (bX4447@visit-code (bX4406@build-visit-code bX442f@macro*)) (bX4448@invoke-code bX4430@invoke-code)) (begin (bX2761@bX25ad@install-library bX443f@id bX4440@name bX4441@ver bX4442@imp* bX4443@vis* bX4444@inv* bX442e@export-subst bX442d@export-env bX4445@visit-proc bX4446@invoke-proc bX4447@visit-code bX4448@invoke-code '#t bX4400@filename) (values bX443f@id bX4440@name bX4441@ver bX4442@imp* bX4443@vis* bX4444@inv* bX4448@invoke-code bX4447@visit-code bX442e@export-subst bX442d@export-env))))))))) bX446d) (if (= bX446e '2) (apply (lambda (bX4463@x bX4464@filename) (bX2c16@library-expander bX4463@x bX4464@filename (lambda (bX4467@x) (values)))) bX446d) (if (= bX446e '1) (apply (lambda (bX4469@x) (bX2c16@library-expander bX4469@x '#f (lambda (bX446b@x) (values)))) bX446d) (error 'apply '"invalid arg count"))))))) (set! bX467f@bX2c16@library-expander bX2c16@library-expander) (set! bX2c18@boot-library-expand (lambda (bX446f@x) (call-with-values (lambda () (bX2c16@library-expander bX446f@x)) (lambda (bX4485@bX4472 bX4486@bX4474 bX4487@bX4476 bX4488@bX4478 bX4489@bX447a bX448a@bX447c bX448b@bX447e bX448c@bX4480 bX448d@bX4482 bX448e@bX4484) (let ((bX4499@export-env bX448e@bX4484) (bX449a@export-subst bX448d@bX4482) (bX449b@visit-code bX448c@bX4480) (bX449c@invoke-code bX448b@bX447e) (bX449d@inv* bX448a@bX447c) (bX449e@vis* bX4489@bX447a) (bX449f@imp* bX4488@bX4478) (bX44a0@ver bX4487@bX4476) (bX44a1@name bX4486@bX4474) (bX44a2@id bX4485@bX4472)) (values bX44a1@name bX449c@invoke-code bX449a@export-subst bX4499@export-env)))))) (set! bX4680@bX2c18@boot-library-expand bX2c18@boot-library-expand) (set! bX2c1a@rev-map-append (lambda (bX44ad@f bX44ae@ls bX44af@ac) (if (null? bX44ae@ls) bX44af@ac (bX2c1a@rev-map-append bX44ad@f (cdr bX44ae@ls) (cons (bX44ad@f (car bX44ae@ls)) bX44af@ac))))) (set! bX4681@bX2c1a@rev-map-append bX2c1a@rev-map-append) (set! bX2c1c@build-exports (lambda (bX44b3@lex*+loc* bX44b4@init*) (bX28b2@bX280c@build-sequence '#f (cons (bX28b3@bX280e@build-void) (bX2c1a@rev-map-append (lambda (bX44b7@x) (list 'set! (cdr bX44b7@x) (car bX44b7@x))) bX44b3@lex*+loc* bX44b4@init*))))) (set! bX4682@bX2c1c@build-exports bX2c1c@build-exports) (set! bX2c1e@make-export-subst (lambda (bX44b9@name* bX44ba@id*) (map (lambda (bX44bd@name bX44be@id) (let ((bX44c1@label (bX2963@id->label bX44be@id))) (begin (if (not bX44c1@label) (bX2c34@syntax-violation '#f '"cannot export unbound identifier" bX44be@id) (void)) (cons bX44bd@name bX44c1@label)))) bX44b9@name* bX44ba@id*))) (set! bX4683@bX2c1e@make-export-subst bX2c1e@make-export-subst) (set! bX2c20@make-export-env/macros (lambda (bX44c3@lex* bX44c4@loc* bX44c5@r) (let ((bX44ca@lookup '#f)) (begin (set! bX44ca@lookup (lambda (bX44e7@x) (let bX44ef@f ((bX44e9@x bX44e7@x) (bX44ea@lex* bX44c3@lex*) (bX44eb@loc* bX44c4@loc*)) (if (pair? bX44ea@lex*) (if (eq? bX44e9@x (car bX44ea@lex*)) (car bX44eb@loc*) (bX44ef@f bX44e9@x (cdr bX44ea@lex*) (cdr bX44eb@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let bX44d3@f ((bX44cb@r bX44c5@r) (bX44cc@env '()) (bX44cd@global* '()) (bX44ce@macro* '())) (if (null? bX44cb@r) (values bX44cc@env bX44cd@global* bX44ce@macro*) (let ((bX44d5@x (car bX44cb@r))) (let ((bX44d7@label (car bX44d5@x)) (bX44d8@b (cdr bX44d5@x))) (let ((bX44db@t (bX2969@binding-type bX44d8@b))) (if (memv bX44db@t '(lexical)) (let ((bX44dd@v (bX296b@binding-value bX44d8@b))) (let ((bX44df@loc (bX44ca@lookup (bX2ade@lexical-var bX44dd@v))) (bX44e0@type (if (bX2ae0@lexical-mutable? bX44dd@v) 'mutable 'global))) (bX44d3@f (cdr bX44cb@r) (cons (cons* bX44d7@label bX44e0@type bX44df@loc) bX44cc@env) (cons (cons (bX2ade@lexical-var bX44dd@v) bX44df@loc) bX44cd@global*) bX44ce@macro*))) (if (memv bX44db@t '(local-macro)) (let ((bX44e3@loc (gensym))) (bX44d3@f (cdr bX44cb@r) (cons (cons* bX44d7@label 'global-macro bX44e3@loc) bX44cc@env) bX44cd@global* (cons (cons bX44e3@loc (bX296b@binding-value bX44d8@b)) bX44ce@macro*))) (if (memv bX44db@t '(local-macro!)) (let ((bX44e5@loc (gensym))) (bX44d3@f (cdr bX44cb@r) (cons (cons* bX44d7@label 'global-macro! bX44e5@loc) bX44cc@env) bX44cd@global* (cons (cons bX44e5@loc (bX296b@binding-value bX44d8@b)) bX44ce@macro*))) (if (memv bX44db@t '($rtd $module)) (bX44d3@f (cdr bX44cb@r) (cons bX44d5@x bX44cc@env) bX44cd@global* bX44ce@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bX2969@binding-type bX44d8@b) (bX296b@binding-value bX44d8@b))))))))))))))) (set! bX4684@bX2c20@make-export-env/macros bX2c20@make-export-env/macros) (set! bX2c22@generate-temporaries (lambda (bX44f1@ls) (let ((bX44f3@t bX44f1@ls)) (let ((bX44f5@ls/false (bX2b54@syntax-dispatch bX44f3@t 'each-any))) (if bX44f5@ls/false (apply (lambda (bX44f7@ls) (map (lambda (bX44f9@x) (make-simple-struct 'stx '5 (list (let ((bX44fb@x (bX2c3a@syntax->datum bX44f9@x))) (if (or (symbol? bX44fb@x) (string? bX44fb@x)) (gensym bX44fb@x) (gensym 't))) bX28d1@top-mark* '() '()))) bX44f7@ls)) bX44f5@ls/false) (let ((bX44fd@t bX44f3@t)) (let ((bX44ff@ls/false (bX2b54@syntax-dispatch bX44fd@t '_))) (if bX44ff@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bX44ff@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX44fd@t))))))))) (set! bX4685@bX2c22@generate-temporaries bX2c22@generate-temporaries) (set! bX2c24@free-identifier=? (lambda (bX4501@x bX4502@y) (if (bX294d@id? bX4501@x) (if (bX294d@id? bX4502@y) (bX2953@free-id=? bX4501@x bX4502@y) (assertion-violation 'free-identifier=? '"not an identifier" bX4502@y)) (assertion-violation 'free-identifier=? '"not an identifier" bX4501@x)))) (set! bX4686@bX2c24@free-identifier=? bX2c24@free-identifier=?) (set! bX2c26@bound-identifier=? (lambda (bX4505@x bX4506@y) (if (bX294d@id? bX4505@x) (if (bX294d@id? bX4506@y) (bX2951@bound-id=? bX4505@x bX4506@y) (assertion-violation 'bound-identifier=? '"not an identifier" bX4506@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bX4505@x)))) (set! bX4687@bX2c26@bound-identifier=? bX2c26@bound-identifier=?) (set! bX2c28@make-source-condition (lambda (bX4509@x) (let ((bX4513@bX450e '#f) (bX4515@bX4510 '#f) (bX4517@bX450f '#f) (bX451a@bX450d '#f) (bX451c@make-source-condition '#f) (bX451e@bX450b '#f) (bX4520@bX450c '#f) (bX4522@source-condition? '#f) (bX4524@source-filename '#f) (bX4526@source-character '#f)) (begin (set! bX4513@bX450e (make-record-type-descriptor '&source-information bX4969@bX46b0@&condition-rtd 'bX4511 '#f '#f '#((immutable file-name) (immutable character)))) (set! bX4515@bX4510 '#f) (set! bX4517@bX450f (make-record-constructor-descriptor bX4513@bX450e bX496a@bX46b2@&condition-rcd bX4515@bX4510)) (set! bX451a@bX450d (record-predicate bX4513@bX450e)) (set! bX451c@make-source-condition (record-constructor bX4517@bX450f)) (set! bX451e@bX450b (record-accessor bX4513@bX450e '0)) (set! bX4520@bX450c (record-accessor bX4513@bX450e '1)) (set! bX4522@source-condition? (condition-predicate bX4513@bX450e)) (set! bX4524@source-filename (condition-accessor bX4513@bX450e bX451e@bX450b)) (set! bX4526@source-character (condition-accessor bX4513@bX450e bX4520@bX450c)) (if (pair? bX4509@x) (bX451c@make-source-condition (car bX4509@x) (cdr bX4509@x)) (condition)))))) (set! bX4688@bX2c28@make-source-condition bX2c28@make-source-condition) (set! bX2c2a@extract-position-condition (lambda (bX4527@x) (bX2c28@make-source-condition (bX2c2c@expression-position bX4527@x)))) (set! bX4689@bX2c2a@extract-position-condition bX2c2a@extract-position-condition) (set! bX2c2c@expression-position (lambda (bX4529@x) (and (bX2919@stx? bX4529@x) (let ((bX452b@x (bX291b@stx-expr bX4529@x))) (and (bX248c@bX2360@annotation? bX452b@x) (bX248d@bX2362@annotation-source bX452b@x)))))) (set! bX468a@bX2c2c@expression-position bX2c2c@expression-position) (set! bX2c2e@assertion-error (lambda (bX452d@expr bX452e@pos) (raise (condition (bX4999@bX4774@make-assertion-violation) (bX49ab@bX47a6@make-who-condition 'assert) (bX496f@bX4707@make-message-condition '"assertion failed") (bX49a1@bX478b@make-irritants-condition (list bX452d@expr)) (bX2c28@make-source-condition bX452e@pos))))) (set! bX468b@bX2c2e@assertion-error bX2c2e@assertion-error) (set! bX2c30@syntax-error (lambda (bX4531@x . bX4533@args) (begin (if (not (for-all string? bX4533@args)) (assertion-violation 'syntax-error '"invalid argument" bX4533@args) (void)) (raise (condition (bX496f@bX4707@make-message-condition (if (null? bX4533@args) '"invalid syntax" (apply string-append bX4533@args))) (bX49cd@bX4802@make-syntax-violation (bX2c3a@syntax->datum bX4531@x) '#f) (bX2c2a@extract-position-condition bX4531@x)))))) (set! bX468c@bX2c30@syntax-error bX2c30@syntax-error) (set! bX2c32@syntax-violation* (lambda (bX4535@who bX4536@msg bX4537@form bX4538@condition-object) (begin (if (not (string? bX4536@msg)) (assertion-violation 'syntax-violation '"message is not a string" bX4536@msg) (void)) (let ((bX453d@who (if (or (string? bX4535@who) (symbol? bX4535@who)) bX4535@who (if (not bX4535@who) (let ((bX453f@t bX4537@form)) (let ((bX4541@ls/false (bX2b54@syntax-dispatch bX453f@t 'any))) (if (and bX4541@ls/false (apply (lambda (bX4543@id) (bX294d@id? bX4543@id)) bX4541@ls/false)) (apply (lambda (bX4545@id) (bX2c3a@syntax->datum bX4545@id)) bX4541@ls/false) (let ((bX4547@t bX453f@t)) (let ((bX4549@ls/false (bX2b54@syntax-dispatch bX4547@t '(any . any)))) (if (and bX4549@ls/false (apply (lambda (bX454b@id bX454c@rest) (bX294d@id? bX454b@id)) bX4549@ls/false)) (apply (lambda (bX454f@id bX4550@rest) (bX2c3a@syntax->datum bX454f@id)) bX4549@ls/false) (let ((bX4553@t bX4547@t)) (let ((bX4555@ls/false (bX2b54@syntax-dispatch bX4553@t '_))) (if bX4555@ls/false (apply (lambda () '#f) bX4555@ls/false) (bX2c34@syntax-violation '#f '"invalid syntax" bX4553@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bX4535@who))))) (raise (condition (if bX453d@who (bX49ab@bX47a6@make-who-condition bX453d@who) (condition)) (bX496f@bX4707@make-message-condition bX4536@msg) bX4538@condition-object (bX2c2a@extract-position-condition bX4537@form))))))) (set! bX468d@bX2c32@syntax-violation* bX2c32@syntax-violation*) (set! bX2c34@syntax-violation (lambda bX4565 (let ((bX4566 (length bX4565))) (if (= bX4566 '3) (apply (lambda (bX4557@who bX4558@msg bX4559@form) (bX2c34@syntax-violation bX4557@who bX4558@msg bX4559@form '#f)) bX4565) (if (= bX4566 '4) (apply (lambda (bX455d@who bX455e@msg bX455f@form bX4560@subform) (bX2c32@syntax-violation* bX455d@who bX455e@msg bX455f@form (bX49cd@bX4802@make-syntax-violation (bX2c3a@syntax->datum bX455f@form) (bX2c3a@syntax->datum bX4560@subform)))) bX4565) (error 'apply '"invalid arg count")))))) (set! bX468e@bX2c34@syntax-violation bX2c34@syntax-violation) (set! bX2c36@identifier? (lambda (bX4567@x) (bX294d@id? bX4567@x))) (set! bX468f@bX2c36@identifier? bX2c36@identifier?) (set! bX2c38@datum->syntax (lambda (bX4569@id bX456a@datum) (if (bX294d@id? bX4569@id) (bX292d@datum->stx bX4569@id bX456a@datum) (assertion-violation 'datum->syntax '"not an identifier" bX4569@id)))) (set! bX4690@bX2c38@datum->syntax bX2c38@datum->syntax) (set! bX2c3a@syntax->datum (lambda (bX456d@x) (bX2961@stx->datum bX456d@x))) (set! bX4691@bX2c3a@syntax->datum bX2c3a@syntax->datum) (set! bX2c3c@ungensym-all (lambda (bX456f@code) (if (pair? bX456f@code) (cons (bX2c3c@ungensym-all (car bX456f@code)) (bX2c3c@ungensym-all (cdr bX456f@code))) (if (symbol? bX456f@code) (ungensym bX456f@code) bX456f@code)))) (set! bX4692@bX2c3c@ungensym-all bX2c3c@ungensym-all) (set! bX2c3e@compile-r6rs-top-level (lambda (bX4571@x*) (call-with-values (lambda () (bX2bcc@top-level-expander bX4571@x*)) (lambda (bX4577@bX4574 bX4578@bX4576) (let ((bX457b@invoke-code bX4578@bX4576) (bX457c@lib* bX4577@bX4574)) (lambda () (begin (for-each bX2763@bX25b1@invoke-library bX457c@lib*) (let ((bX457f@expanded (bX24ed@bX24a5@expanded->core bX457b@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bX2c3c@ungensym-all bX457f@expanded)) (void)) (eval-core bX457f@expanded)))))))))) (set! bX4693@bX2c3e@compile-r6rs-top-level bX2c3e@compile-r6rs-top-level) (set! bX2c40@pre-compile-r6rs-top-level (lambda (bX4581@x*) (call-with-values (lambda () (bX2bcc@top-level-expander bX4581@x*)) (lambda (bX4587@bX4584 bX4588@bX4586) (let ((bX458b@invoke-code bX4588@bX4586) (bX458c@lib* bX4587@bX4584)) (begin (for-each bX2763@bX25b1@invoke-library bX458c@lib*) (bX2495@bX2372@compile-core (bX24ed@bX24a5@expanded->core bX458b@invoke-code)))))))) (set! bX4694@bX2c40@pre-compile-r6rs-top-level bX2c40@pre-compile-r6rs-top-level) (set! bX2c42@interaction-environment (let ((bX458f@the-env '#f)) (lambda () (or bX458f@the-env (let ((bX4591@lib (bX275c@bX25a3@find-library-by-name '(mosh interaction))) (bX4592@rib (bX2901@make-empty-rib))) (begin (let ((bX4595@subst (bX273e@bX2567@library-subst bX4591@lib))) (begin (bX28ed@set-rib-sym*! bX4592@rib (map car bX4595@subst)) (bX28f1@set-rib-mark**! bX4592@rib (map (lambda (bX4597@x) bX28d1@top-mark*) bX4595@subst)) (bX28f5@set-rib-label*! bX4592@rib (map cdr bX4595@subst)))) (let ((bX4599@env (make-simple-struct 'interaction-env '4 (list bX4592@rib '() '())))) (begin (set! bX458f@the-env bX4599@env) bX4599@env)))))))) (set! bX4695@bX2c42@interaction-environment bX2c42@interaction-environment) (set! bX2c44@top-level-context (bX2497@bX2376@make-parameter '#f)) (set! bX4696@bX2c44@top-level-context bX2c44@top-level-context) (bX2759@bX259d@current-library-expander bX2c16@library-expander))
(begin (set! bX46a5@bX46a0 (unspecified)) (set! bX46a7@bX46a2 (unspecified)) (set! bX46a9@bX46a1 (unspecified)) (set! bX46ac@&condition? (unspecified)) (set! bX46ae@make-&condition (unspecified)) (set! bX46b0@&condition-rtd (unspecified)) (set! bX46b2@&condition-rcd (unspecified)) (set! bX46fe@bX46f9 (unspecified)) (set! bX4700@bX46fb (unspecified)) (set! bX4702@bX46fa (unspecified)) (set! bX4705@p? (unspecified)) (set! bX4707@make-message-condition (unspecified)) (set! bX4709@bX46f8 (unspecified)) (set! bX470b@message-condition? (unspecified)) (set! bX470d@condition-message (unspecified)) (set! bX470f@&message-rtd (unspecified)) (set! bX4711@&message-rcd (unspecified)) (set! bX4717@bX4712 (unspecified)) (set! bX4719@bX4714 (unspecified)) (set! bX471b@bX4713 (unspecified)) (set! bX471e@p? (unspecified)) (set! bX4720@make-warning (unspecified)) (set! bX4722@warning? (unspecified)) (set! bX4724@&warning-rtd (unspecified)) (set! bX4726@&warning-rcd (unspecified)) (set! bX472c@bX4727 (unspecified)) (set! bX472e@bX4729 (unspecified)) (set! bX4730@bX4728 (unspecified)) (set! bX4733@p? (unspecified)) (set! bX4735@make-serious-condition (unspecified)) (set! bX4737@serious-condition? (unspecified)) (set! bX4739@&serious-rtd (unspecified)) (set! bX473b@&serious-rcd (unspecified)) (set! bX4741@bX473c (unspecified)) (set! bX4743@bX473e (unspecified)) (set! bX4745@bX473d (unspecified)) (set! bX4748@p? (unspecified)) (set! bX474a@make-error (unspecified)) (set! bX474c@error? (unspecified)) (set! bX474e@&error-rtd (unspecified)) (set! bX4750@&error-rcd (unspecified)) (set! bX4756@bX4751 (unspecified)) (set! bX4758@bX4753 (unspecified)) (set! bX475a@bX4752 (unspecified)) (set! bX475d@p? (unspecified)) (set! bX475f@make-violation (unspecified)) (set! bX4761@violation? (unspecified)) (set! bX4763@&violation-rtd (unspecified)) (set! bX4765@&violation-rcd (unspecified)) (set! bX476b@bX4766 (unspecified)) (set! bX476d@bX4768 (unspecified)) (set! bX476f@bX4767 (unspecified)) (set! bX4772@p? (unspecified)) (set! bX4774@make-assertion-violation (unspecified)) (set! bX4776@assertion-violation? (unspecified)) (set! bX4778@&assertion-rtd (unspecified)) (set! bX477a@&assertion-rcd (unspecified)) (set! bX4782@bX477d (unspecified)) (set! bX4784@bX477f (unspecified)) (set! bX4786@bX477e (unspecified)) (set! bX4789@p? (unspecified)) (set! bX478b@make-irritants-condition (unspecified)) (set! bX478d@bX477c (unspecified)) (set! bX478f@irritants-condition? (unspecified)) (set! bX4791@condition-irritants (unspecified)) (set! bX4793@&irritants-rtd (unspecified)) (set! bX4795@&irritants-rcd (unspecified)) (set! bX479d@bX4798 (unspecified)) (set! bX479f@bX479a (unspecified)) (set! bX47a1@bX4799 (unspecified)) (set! bX47a4@p? (unspecified)) (set! bX47a6@make-who-condition (unspecified)) (set! bX47a8@bX4797 (unspecified)) (set! bX47aa@who-condition? (unspecified)) (set! bX47ac@condition-who (unspecified)) (set! bX47ae@&who-rtd (unspecified)) (set! bX47b0@&who-rcd (unspecified)) (set! bX47b6@bX47b1 (unspecified)) (set! bX47b8@bX47b3 (unspecified)) (set! bX47ba@bX47b2 (unspecified)) (set! bX47bd@p? (unspecified)) (set! bX47bf@make-non-continuable-violation (unspecified)) (set! bX47c1@non-continuable-violation? (unspecified)) (set! bX47c3@&non-continuable-rtd (unspecified)) (set! bX47c5@&non-continuable-rcd (unspecified)) (set! bX47cb@bX47c6 (unspecified)) (set! bX47cd@bX47c8 (unspecified)) (set! bX47cf@bX47c7 (unspecified)) (set! bX47d2@p? (unspecified)) (set! bX47d4@make-implementation-restriction-violation (unspecified)) (set! bX47d6@implementation-restriction-violation? (unspecified)) (set! bX47d8@&implementation-restriction-rtd (unspecified)) (set! bX47da@&implementation-restriction-rcd (unspecified)) (set! bX47e0@bX47db (unspecified)) (set! bX47e2@bX47dd (unspecified)) (set! bX47e4@bX47dc (unspecified)) (set! bX47e7@p? (unspecified)) (set! bX47e9@make-lexical-violation (unspecified)) (set! bX47eb@lexical-violation? (unspecified)) (set! bX47ed@&lexical-rtd (unspecified)) (set! bX47ef@&lexical-rcd (unspecified)) (set! bX47f9@bX47f4 (unspecified)) (set! bX47fb@bX47f6 (unspecified)) (set! bX47fd@bX47f5 (unspecified)) (set! bX4800@p? (unspecified)) (set! bX4802@make-syntax-violation (unspecified)) (set! bX4804@bX47f1 (unspecified)) (set! bX4806@bX47f3 (unspecified)) (set! bX4808@syntax-violation? (unspecified)) (set! bX480a@syntax-violation-form (unspecified)) (set! bX480c@syntax-violation-subform (unspecified)) (set! bX480e@&syntax-rtd (unspecified)) (set! bX4810@&syntax-rcd (unspecified)) (set! bX4816@bX4811 (unspecified)) (set! bX4818@bX4813 (unspecified)) (set! bX481a@bX4812 (unspecified)) (set! bX481d@p? (unspecified)) (set! bX481f@make-undefined-violation (unspecified)) (set! bX4821@undefined-violation? (unspecified)) (set! bX4823@&undefined-rtd (unspecified)) (set! bX4825@&undefined-rcd (unspecified)) (set! bX482b@bX4826 (unspecified)) (set! bX482d@bX4828 (unspecified)) (set! bX482f@bX4827 (unspecified)) (set! bX4832@p? (unspecified)) (set! bX4834@make-i/o-error (unspecified)) (set! bX4836@i/o-error? (unspecified)) (set! bX4838@&i/o-rtd (unspecified)) (set! bX483a@&i/o-rcd (unspecified)) (set! bX4840@bX483b (unspecified)) (set! bX4842@bX483d (unspecified)) (set! bX4844@bX483c (unspecified)) (set! bX4847@p? (unspecified)) (set! bX4849@make-i/o-read-error (unspecified)) (set! bX484b@i/o-read-error? (unspecified)) (set! bX484d@&i/o-read-rtd (unspecified)) (set! bX484f@&i/o-read-rcd (unspecified)) (set! bX4855@bX4850 (unspecified)) (set! bX4857@bX4852 (unspecified)) (set! bX4859@bX4851 (unspecified)) (set! bX485c@p? (unspecified)) (set! bX485e@make-i/o-write-error (unspecified)) (set! bX4860@i/o-write-error? (unspecified)) (set! bX4862@&i/o-write-rtd (unspecified)) (set! bX4864@&i/o-write-rcd (unspecified)) (set! bX486c@bX4867 (unspecified)) (set! bX486e@bX4869 (unspecified)) (set! bX4870@bX4868 (unspecified)) (set! bX4873@p? (unspecified)) (set! bX4875@make-i/o-invalid-position-error (unspecified)) (set! bX4877@bX4866 (unspecified)) (set! bX4879@i/o-invalid-position-error? (unspecified)) (set! bX487b@i/o-error-position (unspecified)) (set! bX487d@&i/o-invalid-position-rtd (unspecified)) (set! bX487f@&i/o-invalid-position-rcd (unspecified)) (set! bX4887@bX4882 (unspecified)) (set! bX4889@bX4884 (unspecified)) (set! bX488b@bX4883 (unspecified)) (set! bX488e@p? (unspecified)) (set! bX4890@make-i/o-filename-error (unspecified)) (set! bX4892@bX4881 (unspecified)) (set! bX4894@i/o-filename-error? (unspecified)) (set! bX4896@i/o-error-filename (unspecified)) (set! bX4898@&i/o-filename-rtd (unspecified)) (set! bX489a@&i/o-filename-rcd (unspecified)) (set! bX48a0@bX489b (unspecified)) (set! bX48a2@bX489d (unspecified)) (set! bX48a4@bX489c (unspecified)) (set! bX48a7@p? (unspecified)) (set! bX48a9@make-i/o-file-protection-error (unspecified)) (set! bX48ab@i/o-file-protection-error? (unspecified)) (set! bX48ad@&i/o-file-protection-rtd (unspecified)) (set! bX48af@&i/o-file-protection-rcd (unspecified)) (set! bX48b5@bX48b0 (unspecified)) (set! bX48b7@bX48b2 (unspecified)) (set! bX48b9@bX48b1 (unspecified)) (set! bX48bc@p? (unspecified)) (set! bX48be@make-i/o-file-is-read-only-error (unspecified)) (set! bX48c0@i/o-file-is-read-only-error? (unspecified)) (set! bX48c2@&i/o-file-is-read-only-rtd (unspecified)) (set! bX48c4@&i/o-file-is-read-only-rcd (unspecified)) (set! bX48ca@bX48c5 (unspecified)) (set! bX48cc@bX48c7 (unspecified)) (set! bX48ce@bX48c6 (unspecified)) (set! bX48d1@p? (unspecified)) (set! bX48d3@make-i/o-file-already-exists-error (unspecified)) (set! bX48d5@i/o-file-already-exists-error? (unspecified)) (set! bX48d7@&i/o-file-already-exists-rtd (unspecified)) (set! bX48d9@&i/o-file-already-exists-rcd (unspecified)) (set! bX48df@bX48da (unspecified)) (set! bX48e1@bX48dc (unspecified)) (set! bX48e3@bX48db (unspecified)) (set! bX48e6@p? (unspecified)) (set! bX48e8@make-i/o-file-does-not-exist-error (unspecified)) (set! bX48ea@i/o-file-does-not-exist-error? (unspecified)) (set! bX48ec@&i/o-file-does-not-exist-rtd (unspecified)) (set! bX48ee@&i/o-file-does-not-exist-rcd (unspecified)) (set! bX48f6@bX48f1 (unspecified)) (set! bX48f8@bX48f3 (unspecified)) (set! bX48fa@bX48f2 (unspecified)) (set! bX48fd@p? (unspecified)) (set! bX48ff@make-i/o-port-error (unspecified)) (set! bX4901@bX48f0 (unspecified)) (set! bX4903@i/o-port-error? (unspecified)) (set! bX4905@i/o-error-port (unspecified)) (set! bX4907@&i/o-port-rtd (unspecified)) (set! bX4909@&i/o-port-rcd (unspecified)) (set! bX490f@bX490a (unspecified)) (set! bX4911@bX490c (unspecified)) (set! bX4913@bX490b (unspecified)) (set! bX4916@p? (unspecified)) (set! bX4918@make-i/o-decoding-error (unspecified)) (set! bX491a@i/o-decoding-error? (unspecified)) (set! bX491c@&i/o-decoding-rtd (unspecified)) (set! bX491e@&i/o-decoding-rcd (unspecified)) (set! bX4926@bX4921 (unspecified)) (set! bX4928@bX4923 (unspecified)) (set! bX492a@bX4922 (unspecified)) (set! bX492d@p? (unspecified)) (set! bX492f@make-i/o-encoding-error (unspecified)) (set! bX4931@bX4920 (unspecified)) (set! bX4933@i/o-encoding-error? (unspecified)) (set! bX4935@i/o-encoding-error-char (unspecified)) (set! bX4937@&i/o-encoding-rtd (unspecified)) (set! bX4939@&i/o-encoding-rcd (unspecified)) (set! bX493f@bX493a (unspecified)) (set! bX4941@bX493c (unspecified)) (set! bX4943@bX493b (unspecified)) (set! bX4946@p? (unspecified)) (set! bX4948@make-no-infinities-violation (unspecified)) (set! bX494a@no-infinities-violation? (unspecified)) (set! bX494c@&no-infinities-rtd (unspecified)) (set! bX494e@&no-infinities-rcd (unspecified)) (set! bX4954@bX494f (unspecified)) (set! bX4956@bX4951 (unspecified)) (set! bX4958@bX4950 (unspecified)) (set! bX495b@p? (unspecified)) (set! bX495d@make-no-nans-violation (unspecified)) (set! bX495f@no-nans-violation? (unspecified)) (set! bX4961@&no-nans-rtd (unspecified)) (set! bX4963@&no-nans-rcd (unspecified)) (set! bX46a5@bX46a0 (make-record-type-descriptor '&condition '#f 'bX46a3 '#f '#f '#())) (set! bX4964@bX46a5@bX46a0 bX46a5@bX46a0) (set! bX46a7@bX46a2 '#f) (set! bX4965@bX46a7@bX46a2 bX46a7@bX46a2) (set! bX46a9@bX46a1 (make-record-constructor-descriptor bX46a5@bX46a0 '#f bX46a7@bX46a2)) (set! bX4966@bX46a9@bX46a1 bX46a9@bX46a1) (set! bX46ac@&condition? (record-predicate bX46a5@bX46a0)) (set! bX4967@bX46ac@&condition? bX46ac@&condition?) (set! bX46ae@make-&condition (record-constructor bX46a9@bX46a1)) (set! bX4968@bX46ae@make-&condition bX46ae@make-&condition) (set! bX46b0@&condition-rtd bX46a5@bX46a0) (set! bX4969@bX46b0@&condition-rtd bX46b0@&condition-rtd) (set! bX46b2@&condition-rcd bX46a9@bX46a1) (set! bX496a@bX46b2@&condition-rcd bX46b2@&condition-rcd) (set! bX46fe@bX46f9 (make-record-type-descriptor '&message bX46a5@bX46a0 'bX46fc '#f '#f '#((immutable message)))) (set! bX496b@bX46fe@bX46f9 bX46fe@bX46f9) (set! bX4700@bX46fb '#f) (set! bX496c@bX4700@bX46fb bX4700@bX46fb) (set! bX4702@bX46fa (make-record-constructor-descriptor bX46fe@bX46f9 bX46a9@bX46a1 bX4700@bX46fb)) (set! bX496d@bX4702@bX46fa bX4702@bX46fa) (set! bX4705@p? (record-predicate bX46fe@bX46f9)) (set! bX496e@bX4705@p? bX4705@p?) (set! bX4707@make-message-condition (record-constructor bX4702@bX46fa)) (set! bX496f@bX4707@make-message-condition bX4707@make-message-condition) (set! bX4709@bX46f8 (record-accessor bX46fe@bX46f9 '0)) (set! bX4970@bX4709@bX46f8 bX4709@bX46f8) (set! bX470b@message-condition? (condition-predicate bX46fe@bX46f9)) (set! bX4971@bX470b@message-condition? bX470b@message-condition?) (set! bX470d@condition-message (condition-accessor bX46fe@bX46f9 bX4709@bX46f8)) (set! bX4972@bX470d@condition-message bX470d@condition-message) (set! bX470f@&message-rtd bX46fe@bX46f9) (set! bX4973@bX470f@&message-rtd bX470f@&message-rtd) (set! bX4711@&message-rcd bX4702@bX46fa) (set! bX4974@bX4711@&message-rcd bX4711@&message-rcd) (set! bX4717@bX4712 (make-record-type-descriptor '&warning bX46a5@bX46a0 'bX4715 '#f '#f '#())) (set! bX4975@bX4717@bX4712 bX4717@bX4712) (set! bX4719@bX4714 '#f) (set! bX4976@bX4719@bX4714 bX4719@bX4714) (set! bX471b@bX4713 (make-record-constructor-descriptor bX4717@bX4712 bX46a9@bX46a1 bX4719@bX4714)) (set! bX4977@bX471b@bX4713 bX471b@bX4713) (set! bX471e@p? (record-predicate bX4717@bX4712)) (set! bX4978@bX471e@p? bX471e@p?) (set! bX4720@make-warning (record-constructor bX471b@bX4713)) (set! bX4979@bX4720@make-warning bX4720@make-warning) (set! bX4722@warning? (condition-predicate bX4717@bX4712)) (set! bX497a@bX4722@warning? bX4722@warning?) (set! bX4724@&warning-rtd bX4717@bX4712) (set! bX497b@bX4724@&warning-rtd bX4724@&warning-rtd) (set! bX4726@&warning-rcd bX471b@bX4713) (set! bX497c@bX4726@&warning-rcd bX4726@&warning-rcd) (set! bX472c@bX4727 (make-record-type-descriptor '&serious bX46a5@bX46a0 'bX472a '#f '#f '#())) (set! bX497d@bX472c@bX4727 bX472c@bX4727) (set! bX472e@bX4729 '#f) (set! bX497e@bX472e@bX4729 bX472e@bX4729) (set! bX4730@bX4728 (make-record-constructor-descriptor bX472c@bX4727 bX46a9@bX46a1 bX472e@bX4729)) (set! bX497f@bX4730@bX4728 bX4730@bX4728) (set! bX4733@p? (record-predicate bX472c@bX4727)) (set! bX4980@bX4733@p? bX4733@p?) (set! bX4735@make-serious-condition (record-constructor bX4730@bX4728)) (set! bX4981@bX4735@make-serious-condition bX4735@make-serious-condition) (set! bX4737@serious-condition? (condition-predicate bX472c@bX4727)) (set! bX4982@bX4737@serious-condition? bX4737@serious-condition?) (set! bX4739@&serious-rtd bX472c@bX4727) (set! bX4983@bX4739@&serious-rtd bX4739@&serious-rtd) (set! bX473b@&serious-rcd bX4730@bX4728) (set! bX4984@bX473b@&serious-rcd bX473b@&serious-rcd) (set! bX4741@bX473c (make-record-type-descriptor '&error bX472c@bX4727 'bX473f '#f '#f '#())) (set! bX4985@bX4741@bX473c bX4741@bX473c) (set! bX4743@bX473e '#f) (set! bX4986@bX4743@bX473e bX4743@bX473e) (set! bX4745@bX473d (make-record-constructor-descriptor bX4741@bX473c bX4730@bX4728 bX4743@bX473e)) (set! bX4987@bX4745@bX473d bX4745@bX473d) (set! bX4748@p? (record-predicate bX4741@bX473c)) (set! bX4988@bX4748@p? bX4748@p?) (set! bX474a@make-error (record-constructor bX4745@bX473d)) (set! bX4989@bX474a@make-error bX474a@make-error) (set! bX474c@error? (condition-predicate bX4741@bX473c)) (set! bX498a@bX474c@error? bX474c@error?) (set! bX474e@&error-rtd bX4741@bX473c) (set! bX498b@bX474e@&error-rtd bX474e@&error-rtd) (set! bX4750@&error-rcd bX4745@bX473d) (set! bX498c@bX4750@&error-rcd bX4750@&error-rcd) (set! bX4756@bX4751 (make-record-type-descriptor '&violation bX472c@bX4727 'bX4754 '#f '#f '#())) (set! bX498d@bX4756@bX4751 bX4756@bX4751) (set! bX4758@bX4753 '#f) (set! bX498e@bX4758@bX4753 bX4758@bX4753) (set! bX475a@bX4752 (make-record-constructor-descriptor bX4756@bX4751 bX4730@bX4728 bX4758@bX4753)) (set! bX498f@bX475a@bX4752 bX475a@bX4752) (set! bX475d@p? (record-predicate bX4756@bX4751)) (set! bX4990@bX475d@p? bX475d@p?) (set! bX475f@make-violation (record-constructor bX475a@bX4752)) (set! bX4991@bX475f@make-violation bX475f@make-violation) (set! bX4761@violation? (condition-predicate bX4756@bX4751)) (set! bX4992@bX4761@violation? bX4761@violation?) (set! bX4763@&violation-rtd bX4756@bX4751) (set! bX4993@bX4763@&violation-rtd bX4763@&violation-rtd) (set! bX4765@&violation-rcd bX475a@bX4752) (set! bX4994@bX4765@&violation-rcd bX4765@&violation-rcd) (set! bX476b@bX4766 (make-record-type-descriptor '&assertion bX4756@bX4751 'bX4769 '#f '#f '#())) (set! bX4995@bX476b@bX4766 bX476b@bX4766) (set! bX476d@bX4768 '#f) (set! bX4996@bX476d@bX4768 bX476d@bX4768) (set! bX476f@bX4767 (make-record-constructor-descriptor bX476b@bX4766 bX475a@bX4752 bX476d@bX4768)) (set! bX4997@bX476f@bX4767 bX476f@bX4767) (set! bX4772@p? (record-predicate bX476b@bX4766)) (set! bX4998@bX4772@p? bX4772@p?) (set! bX4774@make-assertion-violation (record-constructor bX476f@bX4767)) (set! bX4999@bX4774@make-assertion-violation bX4774@make-assertion-violation) (set! bX4776@assertion-violation? (condition-predicate bX476b@bX4766)) (set! bX499a@bX4776@assertion-violation? bX4776@assertion-violation?) (set! bX4778@&assertion-rtd bX476b@bX4766) (set! bX499b@bX4778@&assertion-rtd bX4778@&assertion-rtd) (set! bX477a@&assertion-rcd bX476f@bX4767) (set! bX499c@bX477a@&assertion-rcd bX477a@&assertion-rcd) (set! bX4782@bX477d (make-record-type-descriptor '&irritants bX46a5@bX46a0 'bX4780 '#f '#f '#((immutable irritants)))) (set! bX499d@bX4782@bX477d bX4782@bX477d) (set! bX4784@bX477f '#f) (set! bX499e@bX4784@bX477f bX4784@bX477f) (set! bX4786@bX477e (make-record-constructor-descriptor bX4782@bX477d bX46a9@bX46a1 bX4784@bX477f)) (set! bX499f@bX4786@bX477e bX4786@bX477e) (set! bX4789@p? (record-predicate bX4782@bX477d)) (set! bX49a0@bX4789@p? bX4789@p?) (set! bX478b@make-irritants-condition (record-constructor bX4786@bX477e)) (set! bX49a1@bX478b@make-irritants-condition bX478b@make-irritants-condition) (set! bX478d@bX477c (record-accessor bX4782@bX477d '0)) (set! bX49a2@bX478d@bX477c bX478d@bX477c) (set! bX478f@irritants-condition? (condition-predicate bX4782@bX477d)) (set! bX49a3@bX478f@irritants-condition? bX478f@irritants-condition?) (set! bX4791@condition-irritants (condition-accessor bX4782@bX477d bX478d@bX477c)) (set! bX49a4@bX4791@condition-irritants bX4791@condition-irritants) (set! bX4793@&irritants-rtd bX4782@bX477d) (set! bX49a5@bX4793@&irritants-rtd bX4793@&irritants-rtd) (set! bX4795@&irritants-rcd bX4786@bX477e) (set! bX49a6@bX4795@&irritants-rcd bX4795@&irritants-rcd) (set! bX479d@bX4798 (make-record-type-descriptor '&who bX46a5@bX46a0 'bX479b '#f '#f '#((immutable who)))) (set! bX49a7@bX479d@bX4798 bX479d@bX4798) (set! bX479f@bX479a '#f) (set! bX49a8@bX479f@bX479a bX479f@bX479a) (set! bX47a1@bX4799 (make-record-constructor-descriptor bX479d@bX4798 bX46a9@bX46a1 bX479f@bX479a)) (set! bX49a9@bX47a1@bX4799 bX47a1@bX4799) (set! bX47a4@p? (record-predicate bX479d@bX4798)) (set! bX49aa@bX47a4@p? bX47a4@p?) (set! bX47a6@make-who-condition (record-constructor bX47a1@bX4799)) (set! bX49ab@bX47a6@make-who-condition bX47a6@make-who-condition) (set! bX47a8@bX4797 (record-accessor bX479d@bX4798 '0)) (set! bX49ac@bX47a8@bX4797 bX47a8@bX4797) (set! bX47aa@who-condition? (condition-predicate bX479d@bX4798)) (set! bX49ad@bX47aa@who-condition? bX47aa@who-condition?) (set! bX47ac@condition-who (condition-accessor bX479d@bX4798 bX47a8@bX4797)) (set! bX49ae@bX47ac@condition-who bX47ac@condition-who) (set! bX47ae@&who-rtd bX479d@bX4798) (set! bX49af@bX47ae@&who-rtd bX47ae@&who-rtd) (set! bX47b0@&who-rcd bX47a1@bX4799) (set! bX49b0@bX47b0@&who-rcd bX47b0@&who-rcd) (set! bX47b6@bX47b1 (make-record-type-descriptor '&non-continuable bX4756@bX4751 'bX47b4 '#f '#f '#())) (set! bX49b1@bX47b6@bX47b1 bX47b6@bX47b1) (set! bX47b8@bX47b3 '#f) (set! bX49b2@bX47b8@bX47b3 bX47b8@bX47b3) (set! bX47ba@bX47b2 (make-record-constructor-descriptor bX47b6@bX47b1 bX475a@bX4752 bX47b8@bX47b3)) (set! bX49b3@bX47ba@bX47b2 bX47ba@bX47b2) (set! bX47bd@p? (record-predicate bX47b6@bX47b1)) (set! bX49b4@bX47bd@p? bX47bd@p?) (set! bX47bf@make-non-continuable-violation (record-constructor bX47ba@bX47b2)) (set! bX49b5@bX47bf@make-non-continuable-violation bX47bf@make-non-continuable-violation) (set! bX47c1@non-continuable-violation? (condition-predicate bX47b6@bX47b1)) (set! bX49b6@bX47c1@non-continuable-violation? bX47c1@non-continuable-violation?) (set! bX47c3@&non-continuable-rtd bX47b6@bX47b1) (set! bX49b7@bX47c3@&non-continuable-rtd bX47c3@&non-continuable-rtd) (set! bX47c5@&non-continuable-rcd bX47ba@bX47b2) (set! bX49b8@bX47c5@&non-continuable-rcd bX47c5@&non-continuable-rcd) (set! bX47cb@bX47c6 (make-record-type-descriptor '&implementation-restriction bX4756@bX4751 'bX47c9 '#f '#f '#())) (set! bX49b9@bX47cb@bX47c6 bX47cb@bX47c6) (set! bX47cd@bX47c8 '#f) (set! bX49ba@bX47cd@bX47c8 bX47cd@bX47c8) (set! bX47cf@bX47c7 (make-record-constructor-descriptor bX47cb@bX47c6 bX475a@bX4752 bX47cd@bX47c8)) (set! bX49bb@bX47cf@bX47c7 bX47cf@bX47c7) (set! bX47d2@p? (record-predicate bX47cb@bX47c6)) (set! bX49bc@bX47d2@p? bX47d2@p?) (set! bX47d4@make-implementation-restriction-violation (record-constructor bX47cf@bX47c7)) (set! bX49bd@bX47d4@make-implementation-restriction-violation bX47d4@make-implementation-restriction-violation) (set! bX47d6@implementation-restriction-violation? (condition-predicate bX47cb@bX47c6)) (set! bX49be@bX47d6@implementation-restriction-violation? bX47d6@implementation-restriction-violation?) (set! bX47d8@&implementation-restriction-rtd bX47cb@bX47c6) (set! bX49bf@bX47d8@&implementation-restriction-rtd bX47d8@&implementation-restriction-rtd) (set! bX47da@&implementation-restriction-rcd bX47cf@bX47c7) (set! bX49c0@bX47da@&implementation-restriction-rcd bX47da@&implementation-restriction-rcd) (set! bX47e0@bX47db (make-record-type-descriptor '&lexical bX4756@bX4751 'bX47de '#f '#f '#())) (set! bX49c1@bX47e0@bX47db bX47e0@bX47db) (set! bX47e2@bX47dd '#f) (set! bX49c2@bX47e2@bX47dd bX47e2@bX47dd) (set! bX47e4@bX47dc (make-record-constructor-descriptor bX47e0@bX47db bX475a@bX4752 bX47e2@bX47dd)) (set! bX49c3@bX47e4@bX47dc bX47e4@bX47dc) (set! bX47e7@p? (record-predicate bX47e0@bX47db)) (set! bX49c4@bX47e7@p? bX47e7@p?) (set! bX47e9@make-lexical-violation (record-constructor bX47e4@bX47dc)) (set! bX49c5@bX47e9@make-lexical-violation bX47e9@make-lexical-violation) (set! bX47eb@lexical-violation? (condition-predicate bX47e0@bX47db)) (set! bX49c6@bX47eb@lexical-violation? bX47eb@lexical-violation?) (set! bX47ed@&lexical-rtd bX47e0@bX47db) (set! bX49c7@bX47ed@&lexical-rtd bX47ed@&lexical-rtd) (set! bX47ef@&lexical-rcd bX47e4@bX47dc) (set! bX49c8@bX47ef@&lexical-rcd bX47ef@&lexical-rcd) (set! bX47f9@bX47f4 (make-record-type-descriptor '&syntax bX4756@bX4751 'bX47f7 '#f '#f '#((immutable form) (immutable subform)))) (set! bX49c9@bX47f9@bX47f4 bX47f9@bX47f4) (set! bX47fb@bX47f6 '#f) (set! bX49ca@bX47fb@bX47f6 bX47fb@bX47f6) (set! bX47fd@bX47f5 (make-record-constructor-descriptor bX47f9@bX47f4 bX475a@bX4752 bX47fb@bX47f6)) (set! bX49cb@bX47fd@bX47f5 bX47fd@bX47f5) (set! bX4800@p? (record-predicate bX47f9@bX47f4)) (set! bX49cc@bX4800@p? bX4800@p?) (set! bX4802@make-syntax-violation (record-constructor bX47fd@bX47f5)) (set! bX49cd@bX4802@make-syntax-violation bX4802@make-syntax-violation) (set! bX4804@bX47f1 (record-accessor bX47f9@bX47f4 '0)) (set! bX49ce@bX4804@bX47f1 bX4804@bX47f1) (set! bX4806@bX47f3 (record-accessor bX47f9@bX47f4 '1)) (set! bX49cf@bX4806@bX47f3 bX4806@bX47f3) (set! bX4808@syntax-violation? (condition-predicate bX47f9@bX47f4)) (set! bX49d0@bX4808@syntax-violation? bX4808@syntax-violation?) (set! bX480a@syntax-violation-form (condition-accessor bX47f9@bX47f4 bX4804@bX47f1)) (set! bX49d1@bX480a@syntax-violation-form bX480a@syntax-violation-form) (set! bX480c@syntax-violation-subform (condition-accessor bX47f9@bX47f4 bX4806@bX47f3)) (set! bX49d2@bX480c@syntax-violation-subform bX480c@syntax-violation-subform) (set! bX480e@&syntax-rtd bX47f9@bX47f4) (set! bX49d3@bX480e@&syntax-rtd bX480e@&syntax-rtd) (set! bX4810@&syntax-rcd bX47fd@bX47f5) (set! bX49d4@bX4810@&syntax-rcd bX4810@&syntax-rcd) (set! bX4816@bX4811 (make-record-type-descriptor '&undefined bX4756@bX4751 'bX4814 '#f '#f '#())) (set! bX49d5@bX4816@bX4811 bX4816@bX4811) (set! bX4818@bX4813 '#f) (set! bX49d6@bX4818@bX4813 bX4818@bX4813) (set! bX481a@bX4812 (make-record-constructor-descriptor bX4816@bX4811 bX475a@bX4752 bX4818@bX4813)) (set! bX49d7@bX481a@bX4812 bX481a@bX4812) (set! bX481d@p? (record-predicate bX4816@bX4811)) (set! bX49d8@bX481d@p? bX481d@p?) (set! bX481f@make-undefined-violation (record-constructor bX481a@bX4812)) (set! bX49d9@bX481f@make-undefined-violation bX481f@make-undefined-violation) (set! bX4821@undefined-violation? (condition-predicate bX4816@bX4811)) (set! bX49da@bX4821@undefined-violation? bX4821@undefined-violation?) (set! bX4823@&undefined-rtd bX4816@bX4811) (set! bX49db@bX4823@&undefined-rtd bX4823@&undefined-rtd) (set! bX4825@&undefined-rcd bX481a@bX4812) (set! bX49dc@bX4825@&undefined-rcd bX4825@&undefined-rcd) (set! bX482b@bX4826 (make-record-type-descriptor '&i/o bX4741@bX473c 'bX4829 '#f '#f '#())) (set! bX49dd@bX482b@bX4826 bX482b@bX4826) (set! bX482d@bX4828 '#f) (set! bX49de@bX482d@bX4828 bX482d@bX4828) (set! bX482f@bX4827 (make-record-constructor-descriptor bX482b@bX4826 bX4745@bX473d bX482d@bX4828)) (set! bX49df@bX482f@bX4827 bX482f@bX4827) (set! bX4832@p? (record-predicate bX482b@bX4826)) (set! bX49e0@bX4832@p? bX4832@p?) (set! bX4834@make-i/o-error (record-constructor bX482f@bX4827)) (set! bX49e1@bX4834@make-i/o-error bX4834@make-i/o-error) (set! bX4836@i/o-error? (condition-predicate bX482b@bX4826)) (set! bX49e2@bX4836@i/o-error? bX4836@i/o-error?) (set! bX4838@&i/o-rtd bX482b@bX4826) (set! bX49e3@bX4838@&i/o-rtd bX4838@&i/o-rtd) (set! bX483a@&i/o-rcd bX482f@bX4827) (set! bX49e4@bX483a@&i/o-rcd bX483a@&i/o-rcd) (set! bX4840@bX483b (make-record-type-descriptor '&i/o-read bX482b@bX4826 'bX483e '#f '#f '#())) (set! bX49e5@bX4840@bX483b bX4840@bX483b) (set! bX4842@bX483d '#f) (set! bX49e6@bX4842@bX483d bX4842@bX483d) (set! bX4844@bX483c (make-record-constructor-descriptor bX4840@bX483b bX482f@bX4827 bX4842@bX483d)) (set! bX49e7@bX4844@bX483c bX4844@bX483c) (set! bX4847@p? (record-predicate bX4840@bX483b)) (set! bX49e8@bX4847@p? bX4847@p?) (set! bX4849@make-i/o-read-error (record-constructor bX4844@bX483c)) (set! bX49e9@bX4849@make-i/o-read-error bX4849@make-i/o-read-error) (set! bX484b@i/o-read-error? (condition-predicate bX4840@bX483b)) (set! bX49ea@bX484b@i/o-read-error? bX484b@i/o-read-error?) (set! bX484d@&i/o-read-rtd bX4840@bX483b) (set! bX49eb@bX484d@&i/o-read-rtd bX484d@&i/o-read-rtd) (set! bX484f@&i/o-read-rcd bX4844@bX483c) (set! bX49ec@bX484f@&i/o-read-rcd bX484f@&i/o-read-rcd) (set! bX4855@bX4850 (make-record-type-descriptor '&i/o-write bX482b@bX4826 'bX4853 '#f '#f '#())) (set! bX49ed@bX4855@bX4850 bX4855@bX4850) (set! bX4857@bX4852 '#f) (set! bX49ee@bX4857@bX4852 bX4857@bX4852) (set! bX4859@bX4851 (make-record-constructor-descriptor bX4855@bX4850 bX482f@bX4827 bX4857@bX4852)) (set! bX49ef@bX4859@bX4851 bX4859@bX4851) (set! bX485c@p? (record-predicate bX4855@bX4850)) (set! bX49f0@bX485c@p? bX485c@p?) (set! bX485e@make-i/o-write-error (record-constructor bX4859@bX4851)) (set! bX49f1@bX485e@make-i/o-write-error bX485e@make-i/o-write-error) (set! bX4860@i/o-write-error? (condition-predicate bX4855@bX4850)) (set! bX49f2@bX4860@i/o-write-error? bX4860@i/o-write-error?) (set! bX4862@&i/o-write-rtd bX4855@bX4850) (set! bX49f3@bX4862@&i/o-write-rtd bX4862@&i/o-write-rtd) (set! bX4864@&i/o-write-rcd bX4859@bX4851) (set! bX49f4@bX4864@&i/o-write-rcd bX4864@&i/o-write-rcd) (set! bX486c@bX4867 (make-record-type-descriptor '&i/o-invalid-position bX482b@bX4826 'bX486a '#f '#f '#((immutable position)))) (set! bX49f5@bX486c@bX4867 bX486c@bX4867) (set! bX486e@bX4869 '#f) (set! bX49f6@bX486e@bX4869 bX486e@bX4869) (set! bX4870@bX4868 (make-record-constructor-descriptor bX486c@bX4867 bX482f@bX4827 bX486e@bX4869)) (set! bX49f7@bX4870@bX4868 bX4870@bX4868) (set! bX4873@p? (record-predicate bX486c@bX4867)) (set! bX49f8@bX4873@p? bX4873@p?) (set! bX4875@make-i/o-invalid-position-error (record-constructor bX4870@bX4868)) (set! bX49f9@bX4875@make-i/o-invalid-position-error bX4875@make-i/o-invalid-position-error) (set! bX4877@bX4866 (record-accessor bX486c@bX4867 '0)) (set! bX49fa@bX4877@bX4866 bX4877@bX4866) (set! bX4879@i/o-invalid-position-error? (condition-predicate bX486c@bX4867)) (set! bX49fb@bX4879@i/o-invalid-position-error? bX4879@i/o-invalid-position-error?) (set! bX487b@i/o-error-position (condition-accessor bX486c@bX4867 bX4877@bX4866)) (set! bX49fc@bX487b@i/o-error-position bX487b@i/o-error-position) (set! bX487d@&i/o-invalid-position-rtd bX486c@bX4867) (set! bX49fd@bX487d@&i/o-invalid-position-rtd bX487d@&i/o-invalid-position-rtd) (set! bX487f@&i/o-invalid-position-rcd bX4870@bX4868) (set! bX49fe@bX487f@&i/o-invalid-position-rcd bX487f@&i/o-invalid-position-rcd) (set! bX4887@bX4882 (make-record-type-descriptor '&i/o-filename bX482b@bX4826 'bX4885 '#f '#f '#((immutable filename)))) (set! bX49ff@bX4887@bX4882 bX4887@bX4882) (set! bX4889@bX4884 '#f) (set! bX4a00@bX4889@bX4884 bX4889@bX4884) (set! bX488b@bX4883 (make-record-constructor-descriptor bX4887@bX4882 bX482f@bX4827 bX4889@bX4884)) (set! bX4a01@bX488b@bX4883 bX488b@bX4883) (set! bX488e@p? (record-predicate bX4887@bX4882)) (set! bX4a02@bX488e@p? bX488e@p?) (set! bX4890@make-i/o-filename-error (record-constructor bX488b@bX4883)) (set! bX4a03@bX4890@make-i/o-filename-error bX4890@make-i/o-filename-error) (set! bX4892@bX4881 (record-accessor bX4887@bX4882 '0)) (set! bX4a04@bX4892@bX4881 bX4892@bX4881) (set! bX4894@i/o-filename-error? (condition-predicate bX4887@bX4882)) (set! bX4a05@bX4894@i/o-filename-error? bX4894@i/o-filename-error?) (set! bX4896@i/o-error-filename (condition-accessor bX4887@bX4882 bX4892@bX4881)) (set! bX4a06@bX4896@i/o-error-filename bX4896@i/o-error-filename) (set! bX4898@&i/o-filename-rtd bX4887@bX4882) (set! bX4a07@bX4898@&i/o-filename-rtd bX4898@&i/o-filename-rtd) (set! bX489a@&i/o-filename-rcd bX488b@bX4883) (set! bX4a08@bX489a@&i/o-filename-rcd bX489a@&i/o-filename-rcd) (set! bX48a0@bX489b (make-record-type-descriptor '&i/o-file-protection bX4887@bX4882 'bX489e '#f '#f '#())) (set! bX4a09@bX48a0@bX489b bX48a0@bX489b) (set! bX48a2@bX489d '#f) (set! bX4a0a@bX48a2@bX489d bX48a2@bX489d) (set! bX48a4@bX489c (make-record-constructor-descriptor bX48a0@bX489b bX488b@bX4883 bX48a2@bX489d)) (set! bX4a0b@bX48a4@bX489c bX48a4@bX489c) (set! bX48a7@p? (record-predicate bX48a0@bX489b)) (set! bX4a0c@bX48a7@p? bX48a7@p?) (set! bX48a9@make-i/o-file-protection-error (record-constructor bX48a4@bX489c)) (set! bX4a0d@bX48a9@make-i/o-file-protection-error bX48a9@make-i/o-file-protection-error) (set! bX48ab@i/o-file-protection-error? (condition-predicate bX48a0@bX489b)) (set! bX4a0e@bX48ab@i/o-file-protection-error? bX48ab@i/o-file-protection-error?) (set! bX48ad@&i/o-file-protection-rtd bX48a0@bX489b) (set! bX4a0f@bX48ad@&i/o-file-protection-rtd bX48ad@&i/o-file-protection-rtd) (set! bX48af@&i/o-file-protection-rcd bX48a4@bX489c) (set! bX4a10@bX48af@&i/o-file-protection-rcd bX48af@&i/o-file-protection-rcd) (set! bX48b5@bX48b0 (make-record-type-descriptor '&i/o-file-is-read-only bX48a0@bX489b 'bX48b3 '#f '#f '#())) (set! bX4a11@bX48b5@bX48b0 bX48b5@bX48b0) (set! bX48b7@bX48b2 '#f) (set! bX4a12@bX48b7@bX48b2 bX48b7@bX48b2) (set! bX48b9@bX48b1 (make-record-constructor-descriptor bX48b5@bX48b0 bX48a4@bX489c bX48b7@bX48b2)) (set! bX4a13@bX48b9@bX48b1 bX48b9@bX48b1) (set! bX48bc@p? (record-predicate bX48b5@bX48b0)) (set! bX4a14@bX48bc@p? bX48bc@p?) (set! bX48be@make-i/o-file-is-read-only-error (record-constructor bX48b9@bX48b1)) (set! bX4a15@bX48be@make-i/o-file-is-read-only-error bX48be@make-i/o-file-is-read-only-error) (set! bX48c0@i/o-file-is-read-only-error? (condition-predicate bX48b5@bX48b0)) (set! bX4a16@bX48c0@i/o-file-is-read-only-error? bX48c0@i/o-file-is-read-only-error?) (set! bX48c2@&i/o-file-is-read-only-rtd bX48b5@bX48b0) (set! bX4a17@bX48c2@&i/o-file-is-read-only-rtd bX48c2@&i/o-file-is-read-only-rtd) (set! bX48c4@&i/o-file-is-read-only-rcd bX48b9@bX48b1) (set! bX4a18@bX48c4@&i/o-file-is-read-only-rcd bX48c4@&i/o-file-is-read-only-rcd) (set! bX48ca@bX48c5 (make-record-type-descriptor '&i/o-file-already-exists bX4887@bX4882 'bX48c8 '#f '#f '#())) (set! bX4a19@bX48ca@bX48c5 bX48ca@bX48c5) (set! bX48cc@bX48c7 '#f) (set! bX4a1a@bX48cc@bX48c7 bX48cc@bX48c7) (set! bX48ce@bX48c6 (make-record-constructor-descriptor bX48ca@bX48c5 bX488b@bX4883 bX48cc@bX48c7)) (set! bX4a1b@bX48ce@bX48c6 bX48ce@bX48c6) (set! bX48d1@p? (record-predicate bX48ca@bX48c5)) (set! bX4a1c@bX48d1@p? bX48d1@p?) (set! bX48d3@make-i/o-file-already-exists-error (record-constructor bX48ce@bX48c6)) (set! bX4a1d@bX48d3@make-i/o-file-already-exists-error bX48d3@make-i/o-file-already-exists-error) (set! bX48d5@i/o-file-already-exists-error? (condition-predicate bX48ca@bX48c5)) (set! bX4a1e@bX48d5@i/o-file-already-exists-error? bX48d5@i/o-file-already-exists-error?) (set! bX48d7@&i/o-file-already-exists-rtd bX48ca@bX48c5) (set! bX4a1f@bX48d7@&i/o-file-already-exists-rtd bX48d7@&i/o-file-already-exists-rtd) (set! bX48d9@&i/o-file-already-exists-rcd bX48ce@bX48c6) (set! bX4a20@bX48d9@&i/o-file-already-exists-rcd bX48d9@&i/o-file-already-exists-rcd) (set! bX48df@bX48da (make-record-type-descriptor '&i/o-file-does-not-exist bX4887@bX4882 'bX48dd '#f '#f '#())) (set! bX4a21@bX48df@bX48da bX48df@bX48da) (set! bX48e1@bX48dc '#f) (set! bX4a22@bX48e1@bX48dc bX48e1@bX48dc) (set! bX48e3@bX48db (make-record-constructor-descriptor bX48df@bX48da bX488b@bX4883 bX48e1@bX48dc)) (set! bX4a23@bX48e3@bX48db bX48e3@bX48db) (set! bX48e6@p? (record-predicate bX48df@bX48da)) (set! bX4a24@bX48e6@p? bX48e6@p?) (set! bX48e8@make-i/o-file-does-not-exist-error (record-constructor bX48e3@bX48db)) (set! bX4a25@bX48e8@make-i/o-file-does-not-exist-error bX48e8@make-i/o-file-does-not-exist-error) (set! bX48ea@i/o-file-does-not-exist-error? (condition-predicate bX48df@bX48da)) (set! bX4a26@bX48ea@i/o-file-does-not-exist-error? bX48ea@i/o-file-does-not-exist-error?) (set! bX48ec@&i/o-file-does-not-exist-rtd bX48df@bX48da) (set! bX4a27@bX48ec@&i/o-file-does-not-exist-rtd bX48ec@&i/o-file-does-not-exist-rtd) (set! bX48ee@&i/o-file-does-not-exist-rcd bX48e3@bX48db) (set! bX4a28@bX48ee@&i/o-file-does-not-exist-rcd bX48ee@&i/o-file-does-not-exist-rcd) (set! bX48f6@bX48f1 (make-record-type-descriptor '&i/o-port bX482b@bX4826 'bX48f4 '#f '#f '#((immutable port)))) (set! bX4a29@bX48f6@bX48f1 bX48f6@bX48f1) (set! bX48f8@bX48f3 '#f) (set! bX4a2a@bX48f8@bX48f3 bX48f8@bX48f3) (set! bX48fa@bX48f2 (make-record-constructor-descriptor bX48f6@bX48f1 bX482f@bX4827 bX48f8@bX48f3)) (set! bX4a2b@bX48fa@bX48f2 bX48fa@bX48f2) (set! bX48fd@p? (record-predicate bX48f6@bX48f1)) (set! bX4a2c@bX48fd@p? bX48fd@p?) (set! bX48ff@make-i/o-port-error (record-constructor bX48fa@bX48f2)) (set! bX4a2d@bX48ff@make-i/o-port-error bX48ff@make-i/o-port-error) (set! bX4901@bX48f0 (record-accessor bX48f6@bX48f1 '0)) (set! bX4a2e@bX4901@bX48f0 bX4901@bX48f0) (set! bX4903@i/o-port-error? (condition-predicate bX48f6@bX48f1)) (set! bX4a2f@bX4903@i/o-port-error? bX4903@i/o-port-error?) (set! bX4905@i/o-error-port (condition-accessor bX48f6@bX48f1 bX4901@bX48f0)) (set! bX4a30@bX4905@i/o-error-port bX4905@i/o-error-port) (set! bX4907@&i/o-port-rtd bX48f6@bX48f1) (set! bX4a31@bX4907@&i/o-port-rtd bX4907@&i/o-port-rtd) (set! bX4909@&i/o-port-rcd bX48fa@bX48f2) (set! bX4a32@bX4909@&i/o-port-rcd bX4909@&i/o-port-rcd) (set! bX490f@bX490a (make-record-type-descriptor '&i/o-decoding bX48f6@bX48f1 'bX490d '#f '#f '#())) (set! bX4a33@bX490f@bX490a bX490f@bX490a) (set! bX4911@bX490c '#f) (set! bX4a34@bX4911@bX490c bX4911@bX490c) (set! bX4913@bX490b (make-record-constructor-descriptor bX490f@bX490a bX48fa@bX48f2 bX4911@bX490c)) (set! bX4a35@bX4913@bX490b bX4913@bX490b) (set! bX4916@p? (record-predicate bX490f@bX490a)) (set! bX4a36@bX4916@p? bX4916@p?) (set! bX4918@make-i/o-decoding-error (record-constructor bX4913@bX490b)) (set! bX4a37@bX4918@make-i/o-decoding-error bX4918@make-i/o-decoding-error) (set! bX491a@i/o-decoding-error? (condition-predicate bX490f@bX490a)) (set! bX4a38@bX491a@i/o-decoding-error? bX491a@i/o-decoding-error?) (set! bX491c@&i/o-decoding-rtd bX490f@bX490a) (set! bX4a39@bX491c@&i/o-decoding-rtd bX491c@&i/o-decoding-rtd) (set! bX491e@&i/o-decoding-rcd bX4913@bX490b) (set! bX4a3a@bX491e@&i/o-decoding-rcd bX491e@&i/o-decoding-rcd) (set! bX4926@bX4921 (make-record-type-descriptor '&i/o-encoding bX48f6@bX48f1 'bX4924 '#f '#f '#((immutable char)))) (set! bX4a3b@bX4926@bX4921 bX4926@bX4921) (set! bX4928@bX4923 '#f) (set! bX4a3c@bX4928@bX4923 bX4928@bX4923) (set! bX492a@bX4922 (make-record-constructor-descriptor bX4926@bX4921 bX48fa@bX48f2 bX4928@bX4923)) (set! bX4a3d@bX492a@bX4922 bX492a@bX4922) (set! bX492d@p? (record-predicate bX4926@bX4921)) (set! bX4a3e@bX492d@p? bX492d@p?) (set! bX492f@make-i/o-encoding-error (record-constructor bX492a@bX4922)) (set! bX4a3f@bX492f@make-i/o-encoding-error bX492f@make-i/o-encoding-error) (set! bX4931@bX4920 (record-accessor bX4926@bX4921 '0)) (set! bX4a40@bX4931@bX4920 bX4931@bX4920) (set! bX4933@i/o-encoding-error? (condition-predicate bX4926@bX4921)) (set! bX4a41@bX4933@i/o-encoding-error? bX4933@i/o-encoding-error?) (set! bX4935@i/o-encoding-error-char (condition-accessor bX4926@bX4921 bX4931@bX4920)) (set! bX4a42@bX4935@i/o-encoding-error-char bX4935@i/o-encoding-error-char) (set! bX4937@&i/o-encoding-rtd bX4926@bX4921) (set! bX4a43@bX4937@&i/o-encoding-rtd bX4937@&i/o-encoding-rtd) (set! bX4939@&i/o-encoding-rcd bX492a@bX4922) (set! bX4a44@bX4939@&i/o-encoding-rcd bX4939@&i/o-encoding-rcd) (set! bX493f@bX493a (make-record-type-descriptor '&no-infinities bX47cb@bX47c6 'bX493d '#f '#f '#())) (set! bX4a45@bX493f@bX493a bX493f@bX493a) (set! bX4941@bX493c '#f) (set! bX4a46@bX4941@bX493c bX4941@bX493c) (set! bX4943@bX493b (make-record-constructor-descriptor bX493f@bX493a bX47cf@bX47c7 bX4941@bX493c)) (set! bX4a47@bX4943@bX493b bX4943@bX493b) (set! bX4946@p? (record-predicate bX493f@bX493a)) (set! bX4a48@bX4946@p? bX4946@p?) (set! bX4948@make-no-infinities-violation (record-constructor bX4943@bX493b)) (set! bX4a49@bX4948@make-no-infinities-violation bX4948@make-no-infinities-violation) (set! bX494a@no-infinities-violation? (condition-predicate bX493f@bX493a)) (set! bX4a4a@bX494a@no-infinities-violation? bX494a@no-infinities-violation?) (set! bX494c@&no-infinities-rtd bX493f@bX493a) (set! bX4a4b@bX494c@&no-infinities-rtd bX494c@&no-infinities-rtd) (set! bX494e@&no-infinities-rcd bX4943@bX493b) (set! bX4a4c@bX494e@&no-infinities-rcd bX494e@&no-infinities-rcd) (set! bX4954@bX494f (make-record-type-descriptor '&no-nans bX47cb@bX47c6 'bX4952 '#f '#f '#())) (set! bX4a4d@bX4954@bX494f bX4954@bX494f) (set! bX4956@bX4951 '#f) (set! bX4a4e@bX4956@bX4951 bX4956@bX4951) (set! bX4958@bX4950 (make-record-constructor-descriptor bX4954@bX494f bX47cf@bX47c7 bX4956@bX4951)) (set! bX4a4f@bX4958@bX4950 bX4958@bX4950) (set! bX495b@p? (record-predicate bX4954@bX494f)) (set! bX4a50@bX495b@p? bX495b@p?) (set! bX495d@make-no-nans-violation (record-constructor bX4958@bX4950)) (set! bX4a51@bX495d@make-no-nans-violation bX495d@make-no-nans-violation) (set! bX495f@no-nans-violation? (condition-predicate bX4954@bX494f)) (set! bX4a52@bX495f@no-nans-violation? bX495f@no-nans-violation?) (set! bX4961@&no-nans-rtd bX4954@bX494f) (set! bX4a53@bX4961@&no-nans-rtd bX4961@&no-nans-rtd) (set! bX4963@&no-nans-rcd bX4958@bX4950) (set! bX4a54@bX4963@&no-nans-rcd bX4963@&no-nans-rcd) (void))
(begin (begin (bX24ea@bX249f@current-primitive-locations (lambda (bX4f21@x) (let ((bX4f23@t (assq bX4f21@x '((&no-nans-rcd . bX4a54@bX4963@&no-nans-rcd) (&no-nans-rtd . bX4a53@bX4961@&no-nans-rtd) (&no-infinities-rcd . bX4a4c@bX494e@&no-infinities-rcd) (&no-infinities-rtd . bX4a4b@bX494c@&no-infinities-rtd) (&i/o-encoding-rcd . bX4a44@bX4939@&i/o-encoding-rcd) (&i/o-encoding-rtd . bX4a43@bX4937@&i/o-encoding-rtd) (&i/o-decoding-rcd . bX4a3a@bX491e@&i/o-decoding-rcd) (&i/o-decoding-rtd . bX4a39@bX491c@&i/o-decoding-rtd) (&i/o-port-rcd . bX4a32@bX4909@&i/o-port-rcd) (&i/o-port-rtd . bX4a31@bX4907@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . bX4a28@bX48ee@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . bX4a27@bX48ec@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . bX4a20@bX48d9@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . bX4a1f@bX48d7@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . bX4a18@bX48c4@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . bX4a17@bX48c2@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . bX4a10@bX48af@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . bX4a0f@bX48ad@&i/o-file-protection-rtd) (&i/o-filename-rcd . bX4a08@bX489a@&i/o-filename-rcd) (&i/o-filename-rtd . bX4a07@bX4898@&i/o-filename-rtd) (&i/o-invalid-position-rcd . bX49fe@bX487f@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . bX49fd@bX487d@&i/o-invalid-position-rtd) (&i/o-write-rcd . bX49f4@bX4864@&i/o-write-rcd) (&i/o-write-rtd . bX49f3@bX4862@&i/o-write-rtd) (&i/o-read-rcd . bX49ec@bX484f@&i/o-read-rcd) (&i/o-read-rtd . bX49eb@bX484d@&i/o-read-rtd) (&i/o-rcd . bX49e4@bX483a@&i/o-rcd) (&i/o-rtd . bX49e3@bX4838@&i/o-rtd) (&undefined-rcd . bX49dc@bX4825@&undefined-rcd) (&undefined-rtd . bX49db@bX4823@&undefined-rtd) (&syntax-rcd . bX49d4@bX4810@&syntax-rcd) (&syntax-rtd . bX49d3@bX480e@&syntax-rtd) (&lexical-rcd . bX49c8@bX47ef@&lexical-rcd) (&lexical-rtd . bX49c7@bX47ed@&lexical-rtd) (&implementation-restriction-rcd . bX49c0@bX47da@&implementation-restriction-rcd) (&implementation-restriction-rtd . bX49bf@bX47d8@&implementation-restriction-rtd) (&non-continuable-rcd . bX49b8@bX47c5@&non-continuable-rcd) (&non-continuable-rtd . bX49b7@bX47c3@&non-continuable-rtd) (&who-rcd . bX49b0@bX47b0@&who-rcd) (&who-rtd . bX49af@bX47ae@&who-rtd) (&irritants-rcd . bX49a6@bX4795@&irritants-rcd) (&irritants-rtd . bX49a5@bX4793@&irritants-rtd) (&assertion-rcd . bX499c@bX477a@&assertion-rcd) (&assertion-rtd . bX499b@bX4778@&assertion-rtd) (&violation-rcd . bX4994@bX4765@&violation-rcd) (&violation-rtd . bX4993@bX4763@&violation-rtd) (&error-rcd . bX498c@bX4750@&error-rcd) (&error-rtd . bX498b@bX474e@&error-rtd) (&serious-rcd . bX4984@bX473b@&serious-rcd) (&serious-rtd . bX4983@bX4739@&serious-rtd) (&warning-rcd . bX497c@bX4726@&warning-rcd) (&warning-rtd . bX497b@bX4724@&warning-rtd) (&message-rcd . bX4974@bX4711@&message-rcd) (&message-rtd . bX4973@bX470f@&message-rtd) (&condition-rcd . bX496a@bX46b2@&condition-rcd) (&condition-rtd . bX4969@bX46b0@&condition-rtd) (syntax-error . bX468c@bX2c30@syntax-error) (syntax-dispatch . bX462a@bX2b54@syntax-dispatch) (load . bX4bc9@bX4a74@load) (interaction-environment . bX4695@bX2c42@interaction-environment) (library-path . bX2751@bX258d@library-path) (mosh-cache-dir . bX2498@bX2378@mosh-cache-dir) (make-parameter . bX2497@bX2376@make-parameter) (make-variable-transformer . bX45e7@bX297f@make-variable-transformer) (identifier? . bX468f@bX2c36@identifier?) (generate-temporaries . bX4685@bX2c22@generate-temporaries) (free-identifier=? . bX4686@bX2c24@free-identifier=?) (syntax->datum . bX4691@bX2c3a@syntax->datum) (datum->syntax . bX4690@bX2c38@datum->syntax) (bound-identifier=? . bX4687@bX2c26@bound-identifier=?) (make-i/o-write-error . bX49f1@bX485e@make-i/o-write-error) (make-i/o-read-error . bX49e9@bX4849@make-i/o-read-error) (make-i/o-port-error . bX4a2d@bX48ff@make-i/o-port-error) (make-i/o-invalid-position-error . bX49f9@bX4875@make-i/o-invalid-position-error) (make-i/o-filename-error . bX4a03@bX4890@make-i/o-filename-error) (make-i/o-file-protection-error . bX4a0d@bX48a9@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . bX4a15@bX48be@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . bX4a25@bX48e8@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . bX4a1d@bX48d3@make-i/o-file-already-exists-error) (make-i/o-error . bX49e1@bX4834@make-i/o-error) (make-i/o-encoding-error . bX4a3f@bX492f@make-i/o-encoding-error) (make-i/o-decoding-error . bX4a37@bX4918@make-i/o-decoding-error) (i/o-write-error? . bX49f2@bX4860@i/o-write-error?) (i/o-read-error? . bX49ea@bX484b@i/o-read-error?) (i/o-port-error? . bX4a2f@bX4903@i/o-port-error?) (i/o-invalid-position-error? . bX49fb@bX4879@i/o-invalid-position-error?) (i/o-filename-error? . bX4a05@bX4894@i/o-filename-error?) (i/o-file-protection-error? . bX4a0e@bX48ab@i/o-file-protection-error?) (i/o-file-is-read-only-error? . bX4a16@bX48c0@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . bX4a26@bX48ea@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . bX4a1e@bX48d5@i/o-file-already-exists-error?) (i/o-error? . bX49e2@bX4836@i/o-error?) (i/o-error-position . bX49fc@bX487b@i/o-error-position) (i/o-error-port . bX4a30@bX4905@i/o-error-port) (i/o-error-filename . bX4a06@bX4896@i/o-error-filename) (i/o-encoding-error? . bX4a41@bX4933@i/o-encoding-error?) (i/o-encoding-error-char . bX4a42@bX4935@i/o-encoding-error-char) (i/o-decoding-error? . bX4a38@bX491a@i/o-decoding-error?) (scheme-report-environment . bX467c@bX2c10@scheme-report-environment) (null-environment . bX467b@bX2c0e@null-environment) (command-line . bX4bc6@bX4a6e@command-line) (eval . bX467e@bX2c14@eval) (environment . bX467a@bX2c0c@environment) (who-condition? . bX49ad@bX47aa@who-condition?) (warning? . bX497a@bX4722@warning?) (violation? . bX4992@bX4761@violation?) (undefined-violation? . bX49da@bX4821@undefined-violation?) (syntax-violation? . bX49d0@bX4808@syntax-violation?) (syntax-violation-subform . bX49d2@bX480c@syntax-violation-subform) (syntax-violation-form . bX49d1@bX480a@syntax-violation-form) (syntax-violation . bX468e@bX2c34@syntax-violation) (serious-condition? . bX4982@bX4737@serious-condition?) (non-continuable-violation? . bX49b6@bX47c1@non-continuable-violation?) (message-condition? . bX4971@bX470b@message-condition?) (make-who-condition . bX49ab@bX47a6@make-who-condition) (make-warning . bX4979@bX4720@make-warning) (make-violation . bX4991@bX475f@make-violation) (make-undefined-violation . bX49d9@bX481f@make-undefined-violation) (make-syntax-violation . bX49cd@bX4802@make-syntax-violation) (make-serious-condition . bX4981@bX4735@make-serious-condition) (make-non-continuable-violation . bX49b5@bX47bf@make-non-continuable-violation) (make-message-condition . bX496f@bX4707@make-message-condition) (make-lexical-violation . bX49c5@bX47e9@make-lexical-violation) (make-irritants-condition . bX49a1@bX478b@make-irritants-condition) (make-implementation-restriction-violation . bX49bd@bX47d4@make-implementation-restriction-violation) (make-error . bX4989@bX474a@make-error) (make-assertion-violation . bX4999@bX4774@make-assertion-violation) (lexical-violation? . bX49c6@bX47eb@lexical-violation?) (irritants-condition? . bX49a3@bX478f@irritants-condition?) (implementation-restriction-violation? . bX49be@bX47d6@implementation-restriction-violation?) (error? . bX498a@bX474c@error?) (condition-who . bX49ae@bX47ac@condition-who) (condition-message . bX4972@bX470d@condition-message) (condition-irritants . bX49a4@bX4791@condition-irritants) (assertion-violation? . bX499a@bX4776@assertion-violation?) (no-nans-violation? . bX4a52@bX495f@no-nans-violation?) (no-infinities-violation? . bX4a4a@bX494a@no-infinities-violation?) (make-no-nans-violation . bX4a51@bX495d@make-no-nans-violation) (make-no-infinities-violation . bX4a49@bX4948@make-no-infinities-violation) (assertion-error . bX468b@bX2c2e@assertion-error))))) (if bX4f23@t (cdr bX4f23@t) '#f)))) (bX2761@bX25ad@install-library 'bX4efe '(mosh interaction) '() '() '() '() '((regexp? . bX4ef6) (alist->eq-hash-table . bX4ef2) (format . bX4eef) (string-split . bX4ee4) (call-process . bX4ede) (set-current-directory! . bX4eda) (expand-path . bX4ed9) (current-directory . bX4ed8) (%spawn . bX4ed7) (%waitpid . bX4ed6) (simple-struct-name . bX4ed5) (simple-struct-set! . bX4ed4) (simple-struct-ref . bX4ed3) (make-simple-struct . bX4ed2) (simple-struct? . bX4ed1) (pointer-ref-c-int64 . bX4ed0) (pointer-ref-c-int32 . bX4ecf) (pointer-ref-c-int16 . bX4ece) (pointer-ref-c-int8 . bX4ecd) (pointer-ref-c-uint64 . bX4ecc) (pointer-ref-c-uint32 . bX4ecb) (pointer-ref-c-uint16 . bX4eca) (pointer-ref-c-uint8 . bX4ec9) (pointer-set-c-uint64! . bX4ec8) (pointer-set-c-uint32! . bX4ec7) (pointer-set-c-uint16! . bX4ec6) (pointer-set-c-uint8! . bX4ec5) (pointer-set-c-int64! . bX4ec4) (pointer-set-c-int32! . bX4ec3) (pointer-set-c-int16! . bX4ec2) (pointer-set-c-int8! . bX4ec1) (pointer-set-c-pointer! . bX4ec0) (pointer-set-c-double! . bX4ebf) (pointer-set-c-float! . bX4ebe) (pointer-set-c-long-long! . bX4ebd) (pointer-set-c-long! . bX4ebc) (pointer-set-c-int! . bX4ebb) (pointer-set-c-short! . bX4eba) (pointer-set-c-char! . bX4eb9) (pointer-ref-c-pointer . bX4eb8) (pointer-ref-c-double . bX4eb7) (pointer-ref-c-float . bX4eb6) (pointer-ref-c-unsigned-long-long . bX4eb5) (pointer-ref-c-signed-long-long . bX4eb4) (pointer-ref-c-unsigned-long . bX4eb3) (pointer-ref-c-signed-long . bX4eb2) (pointer-ref-c-unsigned-int . bX4eb1) (pointer-ref-c-signed-int . bX4eb0) (pointer-ref-c-unsigned-short . bX4eaf) (pointer-ref-c-signed-short . bX4eae) (pointer-ref-c-unsigned-char . bX4ead) (pointer-ref-c-signed-char . bX4eac) (pointer->integer . bX4eab) (integer->pointer . bX4eaa) (pointer? . bX4ea9) (shared-errno . bX4ea8) (%ffi-supported? . bX4ea4) (%ffi-pointer->string . bX4ea3) (%ffi-call->string-or-zero . bX4ea2) (%ffi-call->double . bX4ea1) (%ffi-call->void* . bX4ea0) (%ffi-call->void . bX4e9f) (%ffi-call->char . bX4e9e) (%ffi-call->int . bX4e9d) (%ffi-lookup . bX4e9c) (%ffi-open . bX4e9b) (%fork . bX4e9a) (%pipe . bX4e99) (p . bX4e98) (whereis . bX4e7c) (register . bX4e7b) (vm-join! . bX4e7a) (vm-set-value! . bX4e79) (vm? . bX4e78) (main-vm? . bX4e77) (vm-eval . bX4e76) (vm-self . bX4e75) (vm-start! . bX4e74) (make-vm . bX4e73) (mutex-try-lock! . bX4e72) (mutex-unlock! . bX4e71) (mutex-lock! . bX4e70) (mutex? . bX4e6f) (make-mutex . bX4e6e) (condition-variable-notify-all! . bX4e6d) (condition-variable-notify! . bX4e6c) (condition-variable-wait! . bX4e6b) (make-condition-variable . bX4e6a) (string-upcase . bX4e52) (string-titlecase . bX4e51) (string-normalize-nfkd . bX4e50) (string-normalize-nfkc . bX4e4f) (string-normalize-nfd . bX4e4e) (string-normalize-nfc . bX4e4d) (string-foldcase . bX4e4c) (string-downcase . bX4e4b) (string-ci>? . bX4e4a) (string-ci>=? . bX4e49) (string-ci=? . bX4e48) (string-ci<? . bX4e47) (string-ci<=? . bX4e46) (char-whitespace? . bX4e45) (char-upper-case? . bX4e44) (char-title-case? . bX4e43) (char-numeric? . bX4e42) (char-lower-case? . bX4e41) (char-general-category . bX4e40) (char-upcase . bX4e3f) (char-titlecase . bX4e3e) (char-foldcase . bX4e3d) (char-downcase . bX4e3c) (char-ci>? . bX4e3b) (char-ci>=? . bX4e3a) (char-ci=? . bX4e39) (char-ci<? . bX4e38) (char-ci<=? . bX4e37) (char-alphabetic? . bX4e36) (make-variable-transformer . bX297e) (identifier? . bX2c35) (generate-temporaries . bX2c21) (free-identifier=? . bX2c23) (syntax->datum . bX2c39) (datum->syntax . bX2c37) (bound-identifier=? . bX2c25) (record-type-descriptor? . bX4e35) (record-predicate . bX4e34) (record-mutator . bX4e33) (record-constructor . bX4e32) (record-accessor . bX4e31) (make-record-type-descriptor . bX4e30) (make-record-constructor-descriptor . bX4e2f) (record? . bX4e2e) (record-type-uid . bX4e2d) (record-type-sealed? . bX4e2c) (record-type-parent . bX4e2b) (record-type-opaque? . bX4e2a) (record-type-name . bX4e29) (record-type-generative? . bX4e28) (record-type-field-names . bX4e27) (record-rtd . bX4e26) (record-field-mutable? . bX4e25) (delete-file . bX4e24) (file-exists? . bX4e23) (vector-sort! . bX4e22) (vector-sort . bX4e21) (list-sort . bX4e20) (symbol-hash . bX4e1f) (string-ci-hash . bX4e1e) (string-hash . bX4e1d) (equal-hash . bX4e1c) (hashtable-equivalence-function . bX4e1b) (make-hashtable . bX4e1a) (hashtable-hash-function . bX4e19) (make-eqv-hashtable . bX4e18) (make-eq-hashtable . bX4e17) (hashtable? . bX4e16) (hashtable-update! . bX4e15) (hashtable-size . bX4e14) (hashtable-set! . bX4e13) (hashtable-ref . bX4e12) (hashtable-mutable? . bX4e11) (hashtable-keys . bX4e10) (hashtable-entries . bX4e0f) (hashtable-delete! . bX4e0e) (hashtable-copy . bX4e0d) (hashtable-contains? . bX4e0c) (hashtable-clear! . bX4e0b) (call-with-output-file . bX4e0a) (call-with-input-file . bX4e09) (write-char . bX4e08) (write . bX4e07) (with-output-to-file . bX4e06) (with-input-from-file . bX4e05) (read-char . bX4e04) (read . bX4e03) (peek-char . bX4e02) (open-output-file . bX4e01) (open-input-file . bX4e00) (newline . bX4dff) (display . bX4dfe) (close-output-port . bX4dfd) (close-input-port . bX4dfc) (eof-object? . bX4dfb) (eof-object . bX4dfa) (current-error-port . bX4df9) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (utf-8-codec . bX4df4) (utf-16-codec . bX4df3) (transcoder-error-handling-mode . bX4df2) (transcoder-eol-style . bX4df1) (transcoder-codec . bX4df0) (transcoded-port . bX4def) (textual-port? . bX4dee) (string->bytevector . bX4ded) (standard-output-port . bX4dec) (standard-input-port . bX4deb) (standard-error-port . bX4dea) (set-port-position! . bX4de9) (put-u8 . bX4de8) (put-string . bX4de7) (put-datum . bX4de6) (put-char . bX4de5) (put-bytevector . bX4de4) (port? . bX4de3) (port-transcoder . bX4de2) (port-position . bX4de1) (port-has-set-port-position!? . bX4de0) (port-has-port-position? . bX4ddf) (port-eof? . bX4dde) (output-port-buffer-mode . bX4ddd) (open-string-output-port . bX4ddc) (open-string-input-port . bX4ddb) (open-file-output-port . bX4dda) (open-file-input/output-port . bX4dd9) (open-file-input-port . bX4dd8) (open-bytevector-output-port . bX4dd7) (open-bytevector-input-port . bX4dd6) (native-transcoder . bX4dd5) (native-eol-style . bX4dd4) (make-transcoder . bX4dd3) (latin-1-codec . bX4dd2) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (make-i/o-encoding-error . bX492e) (make-i/o-decoding-error . bX4917) (make-custom-textual-output-port . bX4dd1) (make-custom-textual-input/output-port . bX4dd0) (make-custom-textual-input-port . bX4dcf) (make-custom-binary-output-port . bX4dce) (make-custom-binary-input/output-port . bX4dcd) (make-custom-binary-input-port . bX4dcc) (make-bytevector . bX4dcb) (lookahead-u8 . bX4dca) (lookahead-char . bX4dc9) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (i/o-encoding-error? . bX4932) (i/o-encoding-error-char . bX4934) (i/o-decoding-error? . bX4919) (get-u8 . bX4dc8) (get-string-n! . bX4dc7) (get-string-n . bX4dc6) (get-string-all . bX4dc5) (get-line . bX4dc4) (get-datum . bX4dc3) (get-char . bX4dc2) (get-bytevector-some . bX4dc1) (get-bytevector-n! . bX4dc0) (get-bytevector-n . bX4dbf) (get-bytevector-all . bX4dbe) (flush-output-port . bX4dbd) (close-port . bX4dbc) (exit . bX4db4) (command-line . bX4a6d) (string-fill! . bX4db3) (string-set! . bX4db2) (set-cdr! . bX4db1) (set-car! . bX4db0) (remove . bX4daf) (remv . bX4dae) (remp . bX4dad) (remq . bX4dac) (partition . bX4dab) (memv . bX4daa) (memq . bX4da9) (memp . bX4da8) (member . bX4da7) (exists . bX4da6) (for-all . bX4da5) (fold-right . bX4da4) (fold-left . bX4da3) (find . bX4da2) (filter . bX4da1) (cons* . bX4da0) (assv . bX4d9f) (assq . bX4d9e) (assp . bX4d9d) (assoc . bX4d9c) (call-with-string-output-port . bX4d9b) (call-with-port . bX4d9a) (call-with-bytevector-output-port . bX4d99) (bytevector->string . bX4d98) (buffer-mode? . bX4d97) (binary-port? . bX4d96) (with-exception-handler . bX4d95) (raise-continuable . bX4d94) (raise . bX4d93) (eval . bX2c13) (environment . bX2c0b) (make-enumeration . bX4d92) (enum-set=? . bX4d91) (enum-set-universe . bX4d90) (enum-set-union . bX4d8f) (enum-set-subset? . bX4d8e) (enum-set-projection . bX4d8d) (enum-set-member? . bX4d8c) (enum-set-intersection . bX4d8b) (enum-set-indexer . bX4d8a) (enum-set-difference . bX4d89) (enum-set-constructor . bX4d88) (enum-set-complement . bX4d87) (enum-set->list . bX4d86) (who-condition? . bX47a9) (warning? . bX4721) (violation? . bX4760) (undefined-violation? . bX4820) (syntax-violation? . bX4807) (syntax-violation-subform . bX480b) (syntax-violation-form . bX4809) (syntax-violation . bX2c33) (simple-conditions . bX4d85) (serious-condition? . bX4736) (non-continuable-violation? . bX47c0) (message-condition? . bX470a) (make-who-condition . bX47a5) (make-warning . bX471f) (make-violation . bX475e) (make-undefined-violation . bX481e) (make-syntax-violation . bX4801) (make-serious-condition . bX4734) (make-non-continuable-violation . bX47be) (make-message-condition . bX4706) (make-lexical-violation . bX47e8) (make-irritants-condition . bX478a) (make-implementation-restriction-violation . bX47d3) (make-error . bX4749) (make-assertion-violation . bX4773) (lexical-violation? . bX47ea) (irritants-condition? . bX478e) (implementation-restriction-violation? . bX47d5) (error? . bX474b) (condition-who . bX47ab) (condition-predicate . bX4d84) (condition-message . bX470c) (condition-irritants . bX4790) (condition-accessor . bX4d83) (condition . bX4d82) (assertion-violation? . bX4775) (condition? . bX4d81) (utf32->string . bX4d80) (utf16->string . bX4d7f) (utf8->string . bX4d7e) (uint-list->bytevector . bX4d7d) (u8-list->bytevector . bX4d7c) (string->utf8 . bX4d7b) (string->utf32 . bX4d7a) (string->utf16 . bX4d79) (sint-list->bytevector . bX4d78) (native-endianness . bX4d77) (bytevector? . bX4d76) (bytevector=? . bX4d75) (bytevector-uint-set! . bX4d74) (bytevector-uint-ref . bX4d73) (bytevector-u8-set! . bX4d72) (bytevector-u8-ref . bX4d71) (bytevector-u64-set! . bX4d70) (bytevector-u64-ref . bX4d6f) (bytevector-u64-native-set! . bX4d6e) (bytevector-u64-native-ref . bX4d6d) (bytevector-u32-set! . bX4d6c) (bytevector-u32-ref . bX4d6b) (bytevector-u32-native-set! . bX4d6a) (bytevector-u32-native-ref . bX4d69) (bytevector-u16-set! . bX4d68) (bytevector-u16-ref . bX4d67) (bytevector-u16-native-set! . bX4d66) (bytevector-u16-native-ref . bX4d65) (bytevector-sint-set! . bX4d64) (bytevector-sint-ref . bX4d63) (bytevector-s8-set! . bX4d62) (bytevector-s8-ref . bX4d61) (bytevector-s64-set! . bX4d60) (bytevector-s64-ref . bX4d5f) (bytevector-s64-native-set! . bX4d5e) (bytevector-s64-native-ref . bX4d5d) (bytevector-s32-set! . bX4d5c) (bytevector-s32-ref . bX4d5b) (bytevector-s32-native-set! . bX4d5a) (bytevector-s32-native-ref . bX4d59) (bytevector-s16-set! . bX4d58) (bytevector-s16-ref . bX4d57) (bytevector-s16-native-set! . bX4d56) (bytevector-s16-native-ref . bX4d55) (bytevector-length . bX4d54) (bytevector-ieee-single-ref . bX4d53) (bytevector-ieee-single-set! . bX4d52) (bytevector-ieee-single-native-set! . bX4d51) (bytevector-ieee-single-native-ref . bX4d50) (bytevector-ieee-double-set! . bX4d4f) (bytevector-ieee-double-ref . bX4d4e) (bytevector-ieee-double-native-set! . bX4d4d) (bytevector-ieee-double-native-ref . bX4d4c) (bytevector-fill! . bX4d4b) (bytevector-copy! . bX4d4a) (bytevector-copy . bX4d49) (bytevector->uint-list . bX4d48) (bytevector->u8-list . bX4d47) (bytevector->sint-list . bX4d46) (no-nans-violation? . bX495e) (no-infinities-violation? . bX4949) (make-no-nans-violation . bX495c) (make-no-infinities-violation . bX4947) (real->flonum . bX4d45) (flzero? . bX4d44) (fltruncate . bX4d43) (fltan . bX4d42) (flsqrt . bX4d41) (flsin . bX4d40) (flround . bX4d3f) (flpositive? . bX4d3e) (flonum? . bX4d3d) (flodd? . bX4d3c) (flnumerator . bX4d3b) (flnegative? . bX4d3a) (flnan? . bX4d39) (flmod0 . bX4d38) (flmod . bX4d37) (flmin . bX4d36) (flmax . bX4d35) (fllog . bX4d34) (flinteger? . bX4d33) (flinfinite? . bX4d32) (flfloor . bX4d31) (flfinite? . bX4d30) (flexpt . bX4d2f) (flexp . bX4d2e) (fleven? . bX4d2d) (fldiv0-and-mod0 . bX4d2c) (fldiv0 . bX4d2b) (fldiv-and-mod . bX4d2a) (fldiv . bX4d29) (fldenominator . bX4d28) (flcos . bX4d27) (flceiling . bX4d26) (flatan . bX4d25) (flasin . bX4d24) (flacos . bX4d23) (flabs . bX4d22) (fl>? . bX4d21) (fl>=? . bX4d20) (fl=? . bX4d1f) (fl<? . bX4d1e) (fl<=? . bX4d1d) (fl/ . bX4d1c) (fl- . bX4d1b) (fl+ . bX4d1a) (fl* . bX4d19) (fixnum->flonum . bX4d18) (fxzero? . bX4d17) (fxxor . bX4d16) (fxrotate-bit-field . bX4d15) (fxreverse-bit-field . bX4d14) (fxpositive? . bX4d13) (fxodd? . bX4d12) (fxnot . bX4d11) (fxnegative? . bX4d10) (fxmod0 . bX4d0f) (fxmod . bX4d0e) (fxmin . bX4d0d) (fxmax . bX4d0c) (fxlength . bX4d0b) (fxior . bX4d0a) (fxif . bX4d09) (fxfirst-bit-set . bX4d08) (fxeven? . bX4d07) (fxdiv0-and-mod0 . bX4d06) (fxdiv0 . bX4d05) (fxdiv-and-mod . bX4d04) (fxdiv . bX4d03) (fxcopy-bit-field . bX4d02) (fxcopy-bit . bX4d01) (fxbit-set? . bX4d00) (fxbit-field . bX4cff) (fxbit-count . bX4cfe) (fxarithmetic-shift-right . bX4cfd) (fxarithmetic-shift-left . bX4cfc) (fxarithmetic-shift . bX4cfb) (fxand . bX4cfa) (fx>? . bX4cf9) (fx>=? . bX4cf8) (fx=? . bX4cf7) (fx<? . bX4cf6) (fx<=? . bX4cf5) (fx-/carry . bX4cf4) (fx- . bX4cf3) (fx+/carry . bX4cf2) (fx+ . bX4cf1) (fx*/carry . bX4cf0) (fx* . bX4cef) (greatest-fixnum . bX4cee) (least-fixnum . bX4ced) (fixnum-width . bX4cec) (fixnum? . bX4ceb) (bitwise-rotate-bit-field . bX4cea) (bitwise-reverse-bit-field . bX4ce9) (bitwise-length . bX4ce8) (bitwise-if . bX4ce7) (bitwise-first-bit-set . bX4ce6) (bitwise-copy-bit-field . bX4ce5) (bitwise-copy-bit . bX4ce4) (bitwise-bit-set? . bX4ce3) (bitwise-bit-field . bX4ce2) (bitwise-bit-count . bX4ce1) (bitwise-xor . bX4ce0) (bitwise-ior . bX4cdf) (bitwise-and . bX4cde) (bitwise-not . bX4cdd) (bitwise-arithmetic-shift-right . bX4cdc) (bitwise-arithmetic-shift-left . bX4cdb) (bitwise-arithmetic-shift . bX4cda) (zero? . bX4cd9) (vector? . bX4cd8) (vector-set! . bX4cd7) (vector-ref . bX4cd6) (vector-map . bX4cd5) (vector-length . bX4cd4) (vector-for-each . bX4cd3) (vector-fill! . bX4cd2) (vector->list . bX4cd1) (vector . bX4cd0) (values . bX4ccf) (truncate . bX4cce) (tan . bX4ccd) (symbol? . bX4ccc) (symbol=? . bX4ccb) (symbol->string . bX4cca) (substring . bX4cc9) (string? . bX4cc8) (string>? . bX4cc7) (string>=? . bX4cc6) (string=? . bX4cc5) (string<? . bX4cc4) (string<=? . bX4cc3) (string-ref . bX4cc2) (string-length . bX4cc1) (string-for-each . bX4cc0) (string-copy . bX4cbf) (string-append . bX4cbe) (string->symbol . bX4cbd) (string->number . bX4cbc) (string->list . bX4cbb) (string . bX4cba) (sqrt . bX4cb9) (sin . bX4cb8) (round . bX4cb7) (reverse . bX4cb6) (real? . bX4cb5) (real-valued? . bX4cb4) (real-part . bX4cb3) (rationalize . bX4cb2) (rational? . bX4cb1) (rational-valued? . bX4cb0) (procedure? . bX4caf) (positive? . bX4cae) (pair? . bX4cad) (odd? . bX4cac) (numerator . bX4cab) (number? . bX4caa) (number->string . bX4ca9) (null? . bX4ca8) (not . bX4ca7) (negative? . bX4ca6) (nan? . bX4ca5) (min . bX4ca4) (max . bX4ca3) (map . bX4ca2) (make-vector . bX4ca1) (make-string . bX4ca0) (make-rectangular . bX4c9f) (make-polar . bX4c9e) (magnitude . bX4c9d) (log . bX4c9c) (list? . bX4c9b) (list-tail . bX4c9a) (list-ref . bX4c99) (list->vector . bX4c98) (list->string . bX4c97) (list . bX4c96) (length . bX4c95) (lcm . bX4c94) (integer? . bX4c93) (integer-valued? . bX4c92) (integer->char . bX4c91) (infinite? . bX4c90) (inexact? . bX4c8f) (inexact . bX4c8e) (imag-part . bX4c8d) (gcd . bX4c8c) (for-each . bX4c8b) (floor . bX4c8a) (finite? . bX4c89) (expt . bX4c88) (exp . bX4c87) (exact? . bX4c86) (exact-integer-sqrt . bX4c85) (exact . bX4c84) (even? . bX4c83) (error . bX4c82) (eqv? . bX4c81) (equal? . bX4c80) (eq? . bX4c7f) (dynamic-wind . bX4c7e) (div0-and-mod0 . bX4c7d) (mod0 . bX4c7c) (div0 . bX4c7b) (div-and-mod . bX4c7a) (mod . bX4c79) (div . bX4c78) (denominator . bX4c77) (cos . bX4c76) (cons . bX4c75) (complex? . bX4c74) (char? . bX4c73) (char>? . bX4c72) (char>=? . bX4c71) (char=? . bX4c70) (char<? . bX4c6f) (char<=? . bX4c6e) (char->integer . bX4c6d) (ceiling . bX4c6c) (call-with-values . bX4c6b) (call/cc . bX4c6a) (call-with-current-continuation . bX4c69) (cddddr . bX4c68) (cdddar . bX4c67) (cddadr . bX4c66) (cddaar . bX4c65) (cdaddr . bX4c64) (cdadar . bX4c63) (cdaadr . bX4c62) (cdaaar . bX4c61) (cadddr . bX4c60) (caddar . bX4c5f) (cadadr . bX4c5e) (cadaar . bX4c5d) (caaddr . bX4c5c) (caadar . bX4c5b) (caaadr . bX4c5a) (caaaar . bX4c59) (cdddr . bX4c58) (cddar . bX4c57) (cdadr . bX4c56) (cdaar . bX4c55) (caddr . bX4c54) (cadar . bX4c53) (caadr . bX4c52) (caaar . bX4c51) (cddr . bX4c50) (cdar . bX4c4f) (cadr . bX4c4e) (caar . bX4c4d) (cdr . bX4c4c) (car . bX4c4b) (boolean? . bX4c4a) (boolean=? . bX4c49) (atan . bX4c48) (assertion-violation . bX4c47) (asin . bX4c46) (apply . bX4c45) (append . bX4c44) (angle . bX4c43) (acos . bX4c42) (abs . bX4c41) (/ . bX4c40) (* . bX4c3f) (- . bX4c3e) (+ . bX4c3d) (>= . bX4c3c) (> . bX4c3b) (= . bX4c3a) (<= . bX4c39) (< . bX4c38) (library . bX4c37) (&no-nans . bX4c36) (&no-infinities . bX4c35) (&i/o-encoding . bX4c34) (&i/o-decoding . bX4c33) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29) (&undefined . bX4c28) (&syntax . bX4c27) (&lexical . bX4c26) (&implementation-restriction . bX4c25) (&non-continuable . bX4c24) (&who . bX4c23) (&irritants . bX4c22) (&assertion . bX4c21) (&violation . bX4c20) (&error . bX4c1f) (&serious . bX4c1e) (&warning . bX4c1d) (&message . bX4c1c) (&condition . bX4c1b) (define-condition-type . bX4c1a) (define-enumeration . bX4c19) (define-record-type . bX4c18) (parent-rtd . bX4c17) (nongenerative . bX4c16) (opaque . bX4c15) (sealed . bX4c14) (protocol . bX4c13) (parent . bX4c12) (immutable . bX4c11) (mutable . bX4c10) (fields . bX4c0f) (error-handling-mode . bX4c0e) (file-options . bX4c0d) (buffer-mode . bX4c0c) (eol-style . bX4c0b) (guard . bX4c0a) (unsyntax-splicing . bX4c07) (unsyntax . bX4c06) (unquote-splicing . bX4c05) (unquote . bX4c04) (_ . bX4c03) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (assert . bX4bff) (endianness . bX4bfe) (time . bX4bfc) (do . bX4bfb) (cond . bX4bfa) (let* . bX4bf9) (let*-values . bX4bf8) (let-values . bX4bf7) (identifier-syntax . bX4bf6) (with-syntax . bX4bf5) (quasisyntax . bX4bf4) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (include . bX4bf1) (record-constructor-descriptor . bX4bef) (record-type-descriptor . bX4bee) (case . bX4bed) (unless . bX4beb) (when . bX4bea) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec* . bX4be5) (letrec . bX4be4) (case-lambda . bX4be2) (lambda . bX4be1) (syntax . bX4be0) (syntax-case . bX4bdf) (quote . bX4bde) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (import . bX4bd9) (begin . bX4bd8) (define-syntax . bX4bd6) (define . bX4bd5)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4eff '(psyntax null-environment-5) '() '() '() '() '((make-promise . bX4db5) (unquote-splicing . bX4c05) (unquote . bX4c04) (_ . bX4c03) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (delay . bX4bfd) (do . bX4bfb) (cond . bX4bfa) (let* . bX4bf9) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (case . bX4bed) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec . bX4be4) (lambda . bX4be1) (quote . bX4bde) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (begin . bX4bd8) (define-syntax . bX4bd6) (define . bX4bd5)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f00 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bX4e4a) (string-ci>=? . bX4e49) (string-ci=? . bX4e48) (string-ci<? . bX4e47) (string-ci<=? . bX4e46) (char-whitespace? . bX4e45) (char-upper-case? . bX4e44) (char-numeric? . bX4e42) (char-lower-case? . bX4e41) (char-upcase . bX4e3f) (char-downcase . bX4e3c) (char-ci>? . bX4e3b) (char-ci>=? . bX4e3a) (char-ci=? . bX4e39) (char-ci<? . bX4e38) (char-ci<=? . bX4e37) (char-alphabetic? . bX4e36) (call-with-output-file . bX4e0a) (call-with-input-file . bX4e09) (write-char . bX4e08) (write . bX4e07) (with-output-to-file . bX4e06) (with-input-from-file . bX4e05) (read-char . bX4e04) (read . bX4e03) (peek-char . bX4e02) (open-output-file . bX4e01) (open-input-file . bX4e00) (newline . bX4dff) (display . bX4dfe) (close-output-port . bX4dfd) (close-input-port . bX4dfc) (eof-object . bX4dfa) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (scheme-report-environment . bX2c0f) (quotient . bX4dbb) (null-environment . bX2c0d) (remainder . bX4dba) (modulo . bX4db9) (inexact->exact . bX4db8) (force . bX4db7) (exact->inexact . bX4db6) (make-promise . bX4db5) (string-fill! . bX4db3) (string-set! . bX4db2) (set-cdr! . bX4db1) (set-car! . bX4db0) (memv . bX4daa) (memq . bX4da9) (member . bX4da7) (assv . bX4d9f) (assq . bX4d9e) (assoc . bX4d9c) (eval . bX2c13) (zero? . bX4cd9) (vector? . bX4cd8) (vector-set! . bX4cd7) (vector-ref . bX4cd6) (vector-length . bX4cd4) (vector-fill! . bX4cd2) (vector->list . bX4cd1) (vector . bX4cd0) (values . bX4ccf) (truncate . bX4cce) (tan . bX4ccd) (symbol? . bX4ccc) (symbol->string . bX4cca) (substring . bX4cc9) (string? . bX4cc8) (string>? . bX4cc7) (string>=? . bX4cc6) (string=? . bX4cc5) (string<? . bX4cc4) (string<=? . bX4cc3) (string-ref . bX4cc2) (string-length . bX4cc1) (string-copy . bX4cbf) (string-append . bX4cbe) (string->symbol . bX4cbd) (string->number . bX4cbc) (string->list . bX4cbb) (string . bX4cba) (sqrt . bX4cb9) (sin . bX4cb8) (round . bX4cb7) (reverse . bX4cb6) (real? . bX4cb5) (real-part . bX4cb3) (rationalize . bX4cb2) (rational? . bX4cb1) (procedure? . bX4caf) (positive? . bX4cae) (pair? . bX4cad) (odd? . bX4cac) (numerator . bX4cab) (number? . bX4caa) (number->string . bX4ca9) (not . bX4ca7) (negative? . bX4ca6) (min . bX4ca4) (max . bX4ca3) (map . bX4ca2) (make-vector . bX4ca1) (make-string . bX4ca0) (make-rectangular . bX4c9f) (make-polar . bX4c9e) (magnitude . bX4c9d) (log . bX4c9c) (list? . bX4c9b) (list-tail . bX4c9a) (list-ref . bX4c99) (list->vector . bX4c98) (list->string . bX4c97) (list . bX4c96) (length . bX4c95) (lcm . bX4c94) (integer? . bX4c93) (integer->char . bX4c91) (inexact? . bX4c8f) (imag-part . bX4c8d) (gcd . bX4c8c) (for-each . bX4c8b) (floor . bX4c8a) (expt . bX4c88) (exp . bX4c87) (exact? . bX4c86) (even? . bX4c83) (eqv? . bX4c81) (equal? . bX4c80) (eq? . bX4c7f) (dynamic-wind . bX4c7e) (denominator . bX4c77) (cos . bX4c76) (cons . bX4c75) (complex? . bX4c74) (char? . bX4c73) (char>? . bX4c72) (char>=? . bX4c71) (char=? . bX4c70) (char<? . bX4c6f) (char<=? . bX4c6e) (char->integer . bX4c6d) (ceiling . bX4c6c) (call-with-values . bX4c6b) (call-with-current-continuation . bX4c69) (cddddr . bX4c68) (cdddar . bX4c67) (cddadr . bX4c66) (cddaar . bX4c65) (cdaddr . bX4c64) (cdadar . bX4c63) (cdaadr . bX4c62) (cdaaar . bX4c61) (cadddr . bX4c60) (caddar . bX4c5f) (cadadr . bX4c5e) (cadaar . bX4c5d) (caaddr . bX4c5c) (caadar . bX4c5b) (caaadr . bX4c5a) (caaaar . bX4c59) (cdddr . bX4c58) (cddar . bX4c57) (cdadr . bX4c56) (cdaar . bX4c55) (caddr . bX4c54) (cadar . bX4c53) (caadr . bX4c52) (caaar . bX4c51) (cddr . bX4c50) (cdar . bX4c4f) (cadr . bX4c4e) (caar . bX4c4d) (cdr . bX4c4c) (car . bX4c4b) (boolean? . bX4c4a) (atan . bX4c48) (asin . bX4c46) (apply . bX4c45) (append . bX4c44) (angle . bX4c43) (acos . bX4c42) (abs . bX4c41) (/ . bX4c40) (* . bX4c3f) (- . bX4c3e) (+ . bX4c3d) (>= . bX4c3c) (> . bX4c3b) (= . bX4c3a) (<= . bX4c39) (< . bX4c38) (unquote-splicing . bX4c05) (unquote . bX4c04) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (delay . bX4bfd) (do . bX4bfb) (cond . bX4bfa) (let* . bX4bf9) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (case . bX4bed) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec . bX4be4) (lambda . bX4be1) (quote . bX4bde) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (begin . bX4bd8) (define-syntax . bX4bd6) (define . bX4bd5)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f01 '(psyntax modules) '() '() '() '() '((module . bX4bd7)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f02 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f03 '(rnrs) '(6) '() '() '() '((regexp? . bX4ef6) (string-upcase . bX4e52) (string-titlecase . bX4e51) (string-normalize-nfkd . bX4e50) (string-normalize-nfkc . bX4e4f) (string-normalize-nfd . bX4e4e) (string-normalize-nfc . bX4e4d) (string-foldcase . bX4e4c) (string-downcase . bX4e4b) (string-ci>? . bX4e4a) (string-ci>=? . bX4e49) (string-ci=? . bX4e48) (string-ci<? . bX4e47) (string-ci<=? . bX4e46) (char-whitespace? . bX4e45) (char-upper-case? . bX4e44) (char-title-case? . bX4e43) (char-numeric? . bX4e42) (char-lower-case? . bX4e41) (char-general-category . bX4e40) (char-upcase . bX4e3f) (char-titlecase . bX4e3e) (char-foldcase . bX4e3d) (char-downcase . bX4e3c) (char-ci>? . bX4e3b) (char-ci>=? . bX4e3a) (char-ci=? . bX4e39) (char-ci<? . bX4e38) (char-ci<=? . bX4e37) (char-alphabetic? . bX4e36) (make-variable-transformer . bX297e) (identifier? . bX2c35) (generate-temporaries . bX2c21) (free-identifier=? . bX2c23) (syntax->datum . bX2c39) (datum->syntax . bX2c37) (bound-identifier=? . bX2c25) (record-type-descriptor? . bX4e35) (record-predicate . bX4e34) (record-mutator . bX4e33) (record-constructor . bX4e32) (record-accessor . bX4e31) (make-record-type-descriptor . bX4e30) (make-record-constructor-descriptor . bX4e2f) (record? . bX4e2e) (record-type-uid . bX4e2d) (record-type-sealed? . bX4e2c) (record-type-parent . bX4e2b) (record-type-opaque? . bX4e2a) (record-type-name . bX4e29) (record-type-generative? . bX4e28) (record-type-field-names . bX4e27) (record-rtd . bX4e26) (record-field-mutable? . bX4e25) (delete-file . bX4e24) (file-exists? . bX4e23) (vector-sort! . bX4e22) (vector-sort . bX4e21) (list-sort . bX4e20) (symbol-hash . bX4e1f) (string-ci-hash . bX4e1e) (string-hash . bX4e1d) (equal-hash . bX4e1c) (hashtable-equivalence-function . bX4e1b) (make-hashtable . bX4e1a) (hashtable-hash-function . bX4e19) (make-eqv-hashtable . bX4e18) (make-eq-hashtable . bX4e17) (hashtable? . bX4e16) (hashtable-update! . bX4e15) (hashtable-size . bX4e14) (hashtable-set! . bX4e13) (hashtable-ref . bX4e12) (hashtable-mutable? . bX4e11) (hashtable-keys . bX4e10) (hashtable-entries . bX4e0f) (hashtable-delete! . bX4e0e) (hashtable-copy . bX4e0d) (hashtable-contains? . bX4e0c) (hashtable-clear! . bX4e0b) (call-with-output-file . bX4e0a) (call-with-input-file . bX4e09) (write-char . bX4e08) (write . bX4e07) (with-output-to-file . bX4e06) (with-input-from-file . bX4e05) (read-char . bX4e04) (read . bX4e03) (peek-char . bX4e02) (open-output-file . bX4e01) (open-input-file . bX4e00) (newline . bX4dff) (display . bX4dfe) (close-output-port . bX4dfd) (close-input-port . bX4dfc) (eof-object? . bX4dfb) (eof-object . bX4dfa) (current-error-port . bX4df9) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (utf-8-codec . bX4df4) (utf-16-codec . bX4df3) (transcoder-error-handling-mode . bX4df2) (transcoder-eol-style . bX4df1) (transcoder-codec . bX4df0) (transcoded-port . bX4def) (textual-port? . bX4dee) (string->bytevector . bX4ded) (standard-output-port . bX4dec) (standard-input-port . bX4deb) (standard-error-port . bX4dea) (set-port-position! . bX4de9) (put-u8 . bX4de8) (put-string . bX4de7) (put-datum . bX4de6) (put-char . bX4de5) (put-bytevector . bX4de4) (port? . bX4de3) (port-transcoder . bX4de2) (port-position . bX4de1) (port-has-set-port-position!? . bX4de0) (port-has-port-position? . bX4ddf) (port-eof? . bX4dde) (output-port-buffer-mode . bX4ddd) (open-string-output-port . bX4ddc) (open-string-input-port . bX4ddb) (open-file-output-port . bX4dda) (open-file-input/output-port . bX4dd9) (open-file-input-port . bX4dd8) (open-bytevector-output-port . bX4dd7) (open-bytevector-input-port . bX4dd6) (native-transcoder . bX4dd5) (native-eol-style . bX4dd4) (make-transcoder . bX4dd3) (latin-1-codec . bX4dd2) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (make-i/o-encoding-error . bX492e) (make-i/o-decoding-error . bX4917) (make-custom-textual-output-port . bX4dd1) (make-custom-textual-input/output-port . bX4dd0) (make-custom-textual-input-port . bX4dcf) (make-custom-binary-output-port . bX4dce) (make-custom-binary-input/output-port . bX4dcd) (make-custom-binary-input-port . bX4dcc) (make-bytevector . bX4dcb) (lookahead-u8 . bX4dca) (lookahead-char . bX4dc9) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (i/o-encoding-error? . bX4932) (i/o-encoding-error-char . bX4934) (i/o-decoding-error? . bX4919) (get-u8 . bX4dc8) (get-string-n! . bX4dc7) (get-string-n . bX4dc6) (get-string-all . bX4dc5) (get-line . bX4dc4) (get-datum . bX4dc3) (get-char . bX4dc2) (get-bytevector-some . bX4dc1) (get-bytevector-n! . bX4dc0) (get-bytevector-n . bX4dbf) (get-bytevector-all . bX4dbe) (flush-output-port . bX4dbd) (close-port . bX4dbc) (exit . bX4db4) (command-line . bX4a6d) (remove . bX4daf) (remv . bX4dae) (remp . bX4dad) (remq . bX4dac) (partition . bX4dab) (memv . bX4daa) (memq . bX4da9) (memp . bX4da8) (member . bX4da7) (exists . bX4da6) (for-all . bX4da5) (fold-right . bX4da4) (fold-left . bX4da3) (find . bX4da2) (filter . bX4da1) (cons* . bX4da0) (assv . bX4d9f) (assq . bX4d9e) (assp . bX4d9d) (assoc . bX4d9c) (call-with-string-output-port . bX4d9b) (call-with-port . bX4d9a) (call-with-bytevector-output-port . bX4d99) (bytevector->string . bX4d98) (buffer-mode? . bX4d97) (binary-port? . bX4d96) (with-exception-handler . bX4d95) (raise-continuable . bX4d94) (raise . bX4d93) (make-enumeration . bX4d92) (enum-set=? . bX4d91) (enum-set-universe . bX4d90) (enum-set-union . bX4d8f) (enum-set-subset? . bX4d8e) (enum-set-projection . bX4d8d) (enum-set-member? . bX4d8c) (enum-set-intersection . bX4d8b) (enum-set-indexer . bX4d8a) (enum-set-difference . bX4d89) (enum-set-constructor . bX4d88) (enum-set-complement . bX4d87) (enum-set->list . bX4d86) (who-condition? . bX47a9) (warning? . bX4721) (violation? . bX4760) (undefined-violation? . bX4820) (syntax-violation? . bX4807) (syntax-violation-subform . bX480b) (syntax-violation-form . bX4809) (syntax-violation . bX2c33) (simple-conditions . bX4d85) (serious-condition? . bX4736) (non-continuable-violation? . bX47c0) (message-condition? . bX470a) (make-who-condition . bX47a5) (make-warning . bX471f) (make-violation . bX475e) (make-undefined-violation . bX481e) (make-syntax-violation . bX4801) (make-serious-condition . bX4734) (make-non-continuable-violation . bX47be) (make-message-condition . bX4706) (make-lexical-violation . bX47e8) (make-irritants-condition . bX478a) (make-implementation-restriction-violation . bX47d3) (make-error . bX4749) (make-assertion-violation . bX4773) (lexical-violation? . bX47ea) (irritants-condition? . bX478e) (implementation-restriction-violation? . bX47d5) (error? . bX474b) (condition-who . bX47ab) (condition-predicate . bX4d84) (condition-message . bX470c) (condition-irritants . bX4790) (condition-accessor . bX4d83) (condition . bX4d82) (assertion-violation? . bX4775) (condition? . bX4d81) (utf32->string . bX4d80) (utf16->string . bX4d7f) (utf8->string . bX4d7e) (uint-list->bytevector . bX4d7d) (u8-list->bytevector . bX4d7c) (string->utf8 . bX4d7b) (string->utf32 . bX4d7a) (string->utf16 . bX4d79) (sint-list->bytevector . bX4d78) (native-endianness . bX4d77) (bytevector? . bX4d76) (bytevector=? . bX4d75) (bytevector-uint-set! . bX4d74) (bytevector-uint-ref . bX4d73) (bytevector-u8-set! . bX4d72) (bytevector-u8-ref . bX4d71) (bytevector-u64-set! . bX4d70) (bytevector-u64-ref . bX4d6f) (bytevector-u64-native-set! . bX4d6e) (bytevector-u64-native-ref . bX4d6d) (bytevector-u32-set! . bX4d6c) (bytevector-u32-ref . bX4d6b) (bytevector-u32-native-set! . bX4d6a) (bytevector-u32-native-ref . bX4d69) (bytevector-u16-set! . bX4d68) (bytevector-u16-ref . bX4d67) (bytevector-u16-native-set! . bX4d66) (bytevector-u16-native-ref . bX4d65) (bytevector-sint-set! . bX4d64) (bytevector-sint-ref . bX4d63) (bytevector-s8-set! . bX4d62) (bytevector-s8-ref . bX4d61) (bytevector-s64-set! . bX4d60) (bytevector-s64-ref . bX4d5f) (bytevector-s64-native-set! . bX4d5e) (bytevector-s64-native-ref . bX4d5d) (bytevector-s32-set! . bX4d5c) (bytevector-s32-ref . bX4d5b) (bytevector-s32-native-set! . bX4d5a) (bytevector-s32-native-ref . bX4d59) (bytevector-s16-set! . bX4d58) (bytevector-s16-ref . bX4d57) (bytevector-s16-native-set! . bX4d56) (bytevector-s16-native-ref . bX4d55) (bytevector-length . bX4d54) (bytevector-ieee-single-ref . bX4d53) (bytevector-ieee-single-set! . bX4d52) (bytevector-ieee-single-native-set! . bX4d51) (bytevector-ieee-single-native-ref . bX4d50) (bytevector-ieee-double-set! . bX4d4f) (bytevector-ieee-double-ref . bX4d4e) (bytevector-ieee-double-native-set! . bX4d4d) (bytevector-ieee-double-native-ref . bX4d4c) (bytevector-fill! . bX4d4b) (bytevector-copy! . bX4d4a) (bytevector-copy . bX4d49) (bytevector->uint-list . bX4d48) (bytevector->u8-list . bX4d47) (bytevector->sint-list . bX4d46) (no-nans-violation? . bX495e) (no-infinities-violation? . bX4949) (make-no-nans-violation . bX495c) (make-no-infinities-violation . bX4947) (real->flonum . bX4d45) (flzero? . bX4d44) (fltruncate . bX4d43) (fltan . bX4d42) (flsqrt . bX4d41) (flsin . bX4d40) (flround . bX4d3f) (flpositive? . bX4d3e) (flonum? . bX4d3d) (flodd? . bX4d3c) (flnumerator . bX4d3b) (flnegative? . bX4d3a) (flnan? . bX4d39) (flmod0 . bX4d38) (flmod . bX4d37) (flmin . bX4d36) (flmax . bX4d35) (fllog . bX4d34) (flinteger? . bX4d33) (flinfinite? . bX4d32) (flfloor . bX4d31) (flfinite? . bX4d30) (flexpt . bX4d2f) (flexp . bX4d2e) (fleven? . bX4d2d) (fldiv0-and-mod0 . bX4d2c) (fldiv0 . bX4d2b) (fldiv-and-mod . bX4d2a) (fldiv . bX4d29) (fldenominator . bX4d28) (flcos . bX4d27) (flceiling . bX4d26) (flatan . bX4d25) (flasin . bX4d24) (flacos . bX4d23) (flabs . bX4d22) (fl>? . bX4d21) (fl>=? . bX4d20) (fl=? . bX4d1f) (fl<? . bX4d1e) (fl<=? . bX4d1d) (fl/ . bX4d1c) (fl- . bX4d1b) (fl+ . bX4d1a) (fl* . bX4d19) (fixnum->flonum . bX4d18) (fxzero? . bX4d17) (fxxor . bX4d16) (fxrotate-bit-field . bX4d15) (fxreverse-bit-field . bX4d14) (fxpositive? . bX4d13) (fxodd? . bX4d12) (fxnot . bX4d11) (fxnegative? . bX4d10) (fxmod0 . bX4d0f) (fxmod . bX4d0e) (fxmin . bX4d0d) (fxmax . bX4d0c) (fxlength . bX4d0b) (fxior . bX4d0a) (fxif . bX4d09) (fxfirst-bit-set . bX4d08) (fxeven? . bX4d07) (fxdiv0-and-mod0 . bX4d06) (fxdiv0 . bX4d05) (fxdiv-and-mod . bX4d04) (fxdiv . bX4d03) (fxcopy-bit-field . bX4d02) (fxcopy-bit . bX4d01) (fxbit-set? . bX4d00) (fxbit-field . bX4cff) (fxbit-count . bX4cfe) (fxarithmetic-shift-right . bX4cfd) (fxarithmetic-shift-left . bX4cfc) (fxarithmetic-shift . bX4cfb) (fxand . bX4cfa) (fx>? . bX4cf9) (fx>=? . bX4cf8) (fx=? . bX4cf7) (fx<? . bX4cf6) (fx<=? . bX4cf5) (fx-/carry . bX4cf4) (fx- . bX4cf3) (fx+/carry . bX4cf2) (fx+ . bX4cf1) (fx*/carry . bX4cf0) (fx* . bX4cef) (greatest-fixnum . bX4cee) (least-fixnum . bX4ced) (fixnum-width . bX4cec) (fixnum? . bX4ceb) (bitwise-rotate-bit-field . bX4cea) (bitwise-reverse-bit-field . bX4ce9) (bitwise-length . bX4ce8) (bitwise-if . bX4ce7) (bitwise-first-bit-set . bX4ce6) (bitwise-copy-bit-field . bX4ce5) (bitwise-copy-bit . bX4ce4) (bitwise-bit-set? . bX4ce3) (bitwise-bit-field . bX4ce2) (bitwise-bit-count . bX4ce1) (bitwise-xor . bX4ce0) (bitwise-ior . bX4cdf) (bitwise-and . bX4cde) (bitwise-not . bX4cdd) (bitwise-arithmetic-shift-right . bX4cdc) (bitwise-arithmetic-shift-left . bX4cdb) (bitwise-arithmetic-shift . bX4cda) (zero? . bX4cd9) (vector? . bX4cd8) (vector-set! . bX4cd7) (vector-ref . bX4cd6) (vector-map . bX4cd5) (vector-length . bX4cd4) (vector-for-each . bX4cd3) (vector-fill! . bX4cd2) (vector->list . bX4cd1) (vector . bX4cd0) (values . bX4ccf) (truncate . bX4cce) (tan . bX4ccd) (symbol? . bX4ccc) (symbol=? . bX4ccb) (symbol->string . bX4cca) (substring . bX4cc9) (string? . bX4cc8) (string>? . bX4cc7) (string>=? . bX4cc6) (string=? . bX4cc5) (string<? . bX4cc4) (string<=? . bX4cc3) (string-ref . bX4cc2) (string-length . bX4cc1) (string-for-each . bX4cc0) (string-copy . bX4cbf) (string-append . bX4cbe) (string->symbol . bX4cbd) (string->number . bX4cbc) (string->list . bX4cbb) (string . bX4cba) (sqrt . bX4cb9) (sin . bX4cb8) (round . bX4cb7) (reverse . bX4cb6) (real? . bX4cb5) (real-valued? . bX4cb4) (real-part . bX4cb3) (rationalize . bX4cb2) (rational? . bX4cb1) (rational-valued? . bX4cb0) (procedure? . bX4caf) (positive? . bX4cae) (pair? . bX4cad) (odd? . bX4cac) (numerator . bX4cab) (number? . bX4caa) (number->string . bX4ca9) (null? . bX4ca8) (not . bX4ca7) (negative? . bX4ca6) (nan? . bX4ca5) (min . bX4ca4) (max . bX4ca3) (map . bX4ca2) (make-vector . bX4ca1) (make-string . bX4ca0) (make-rectangular . bX4c9f) (make-polar . bX4c9e) (magnitude . bX4c9d) (log . bX4c9c) (list? . bX4c9b) (list-tail . bX4c9a) (list-ref . bX4c99) (list->vector . bX4c98) (list->string . bX4c97) (list . bX4c96) (length . bX4c95) (lcm . bX4c94) (integer? . bX4c93) (integer-valued? . bX4c92) (integer->char . bX4c91) (infinite? . bX4c90) (inexact? . bX4c8f) (inexact . bX4c8e) (imag-part . bX4c8d) (gcd . bX4c8c) (for-each . bX4c8b) (floor . bX4c8a) (finite? . bX4c89) (expt . bX4c88) (exp . bX4c87) (exact? . bX4c86) (exact-integer-sqrt . bX4c85) (exact . bX4c84) (even? . bX4c83) (error . bX4c82) (eqv? . bX4c81) (equal? . bX4c80) (eq? . bX4c7f) (dynamic-wind . bX4c7e) (div0-and-mod0 . bX4c7d) (mod0 . bX4c7c) (div0 . bX4c7b) (div-and-mod . bX4c7a) (mod . bX4c79) (div . bX4c78) (denominator . bX4c77) (cos . bX4c76) (cons . bX4c75) (complex? . bX4c74) (char? . bX4c73) (char>? . bX4c72) (char>=? . bX4c71) (char=? . bX4c70) (char<? . bX4c6f) (char<=? . bX4c6e) (char->integer . bX4c6d) (ceiling . bX4c6c) (call-with-values . bX4c6b) (call/cc . bX4c6a) (call-with-current-continuation . bX4c69) (cddddr . bX4c68) (cdddar . bX4c67) (cddadr . bX4c66) (cddaar . bX4c65) (cdaddr . bX4c64) (cdadar . bX4c63) (cdaadr . bX4c62) (cdaaar . bX4c61) (cadddr . bX4c60) (caddar . bX4c5f) (cadadr . bX4c5e) (cadaar . bX4c5d) (caaddr . bX4c5c) (caadar . bX4c5b) (caaadr . bX4c5a) (caaaar . bX4c59) (cdddr . bX4c58) (cddar . bX4c57) (cdadr . bX4c56) (cdaar . bX4c55) (caddr . bX4c54) (cadar . bX4c53) (caadr . bX4c52) (caaar . bX4c51) (cddr . bX4c50) (cdar . bX4c4f) (cadr . bX4c4e) (caar . bX4c4d) (cdr . bX4c4c) (car . bX4c4b) (boolean? . bX4c4a) (boolean=? . bX4c49) (atan . bX4c48) (assertion-violation . bX4c47) (asin . bX4c46) (apply . bX4c45) (append . bX4c44) (angle . bX4c43) (acos . bX4c42) (abs . bX4c41) (/ . bX4c40) (* . bX4c3f) (- . bX4c3e) (+ . bX4c3d) (>= . bX4c3c) (> . bX4c3b) (= . bX4c3a) (<= . bX4c39) (< . bX4c38) (&no-nans . bX4c36) (&no-infinities . bX4c35) (&i/o-encoding . bX4c34) (&i/o-decoding . bX4c33) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29) (&undefined . bX4c28) (&syntax . bX4c27) (&lexical . bX4c26) (&implementation-restriction . bX4c25) (&non-continuable . bX4c24) (&who . bX4c23) (&irritants . bX4c22) (&assertion . bX4c21) (&violation . bX4c20) (&error . bX4c1f) (&serious . bX4c1e) (&warning . bX4c1d) (&message . bX4c1c) (&condition . bX4c1b) (define-condition-type . bX4c1a) (define-enumeration . bX4c19) (define-record-type . bX4c18) (parent-rtd . bX4c17) (nongenerative . bX4c16) (opaque . bX4c15) (sealed . bX4c14) (protocol . bX4c13) (parent . bX4c12) (immutable . bX4c11) (mutable . bX4c10) (fields . bX4c0f) (error-handling-mode . bX4c0e) (file-options . bX4c0d) (buffer-mode . bX4c0c) (eol-style . bX4c0b) (guard . bX4c0a) (unsyntax-splicing . bX4c07) (unsyntax . bX4c06) (unquote-splicing . bX4c05) (unquote . bX4c04) (_ . bX4c03) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (assert . bX4bff) (endianness . bX4bfe) (do . bX4bfb) (cond . bX4bfa) (let* . bX4bf9) (let*-values . bX4bf8) (let-values . bX4bf7) (identifier-syntax . bX4bf6) (with-syntax . bX4bf5) (quasisyntax . bX4bf4) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (record-constructor-descriptor . bX4bef) (record-type-descriptor . bX4bee) (case . bX4bed) (unless . bX4beb) (when . bX4bea) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec* . bX4be5) (letrec . bX4be4) (case-lambda . bX4be2) (lambda . bX4be1) (syntax . bX4be0) (syntax-case . bX4bdf) (quote . bX4bde) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (begin . bX4bd8) (define-syntax . bX4bd6) (define . bX4bd5)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f04 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bX2c0f) (quotient . bX4dbb) (null-environment . bX2c0d) (remainder . bX4dba) (modulo . bX4db9) (inexact->exact . bX4db8) (force . bX4db7) (exact->inexact . bX4db6) (make-promise . bX4db5) (delay . bX4bfd)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f05 '(rnrs control) '(6) '() '() '() '((do . bX4bfb) (unless . bX4beb) (when . bX4bea) (case-lambda . bX4be2)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f06 '(rnrs eval) '(6) '() '() '() '((eval . bX2c13) (environment . bX2c0b)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f07 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bX4db1) (set-car! . bX4db0)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f08 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bX4db3) (string-set! . bX4db2)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f09 '(rnrs programs) '(6) '() '() '() '((exit . bX4db4) (command-line . bX4a6d)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bX297e) (identifier? . bX2c35) (generate-temporaries . bX2c21) (free-identifier=? . bX2c23) (syntax->datum . bX2c39) (datum->syntax . bX2c37) (bound-identifier=? . bX2c25) (syntax-violation . bX2c33) (unsyntax-splicing . bX4c07) (unsyntax . bX4c06) (_ . bX4c03) (... . bX4c00) (with-syntax . bX4bf5) (quasisyntax . bX4bf4) (syntax . bX4be0) (syntax-case . bX4bdf)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0b '(rnrs files) '(6) '() '() '() '((delete-file . bX4e24) (file-exists? . bX4e23) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bX4e22) (vector-sort . bX4e21) (list-sort . bX4e20)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0d '(rnrs base) '(6) '() '() '() '((zero? . bX4cd9) (vector? . bX4cd8) (vector-set! . bX4cd7) (vector-ref . bX4cd6) (vector-map . bX4cd5) (vector-length . bX4cd4) (vector-for-each . bX4cd3) (vector-fill! . bX4cd2) (vector->list . bX4cd1) (vector . bX4cd0) (values . bX4ccf) (truncate . bX4cce) (tan . bX4ccd) (symbol? . bX4ccc) (symbol=? . bX4ccb) (symbol->string . bX4cca) (substring . bX4cc9) (string? . bX4cc8) (string>? . bX4cc7) (string>=? . bX4cc6) (string=? . bX4cc5) (string<? . bX4cc4) (string<=? . bX4cc3) (string-ref . bX4cc2) (string-length . bX4cc1) (string-for-each . bX4cc0) (string-copy . bX4cbf) (string-append . bX4cbe) (string->symbol . bX4cbd) (string->number . bX4cbc) (string->list . bX4cbb) (string . bX4cba) (sqrt . bX4cb9) (sin . bX4cb8) (round . bX4cb7) (reverse . bX4cb6) (real? . bX4cb5) (real-valued? . bX4cb4) (real-part . bX4cb3) (rationalize . bX4cb2) (rational? . bX4cb1) (rational-valued? . bX4cb0) (procedure? . bX4caf) (positive? . bX4cae) (pair? . bX4cad) (odd? . bX4cac) (numerator . bX4cab) (number? . bX4caa) (number->string . bX4ca9) (null? . bX4ca8) (not . bX4ca7) (negative? . bX4ca6) (nan? . bX4ca5) (min . bX4ca4) (max . bX4ca3) (map . bX4ca2) (make-vector . bX4ca1) (make-string . bX4ca0) (make-rectangular . bX4c9f) (make-polar . bX4c9e) (magnitude . bX4c9d) (log . bX4c9c) (list? . bX4c9b) (list-tail . bX4c9a) (list-ref . bX4c99) (list->vector . bX4c98) (list->string . bX4c97) (list . bX4c96) (length . bX4c95) (lcm . bX4c94) (integer? . bX4c93) (integer-valued? . bX4c92) (integer->char . bX4c91) (infinite? . bX4c90) (inexact? . bX4c8f) (inexact . bX4c8e) (imag-part . bX4c8d) (gcd . bX4c8c) (for-each . bX4c8b) (floor . bX4c8a) (finite? . bX4c89) (expt . bX4c88) (exp . bX4c87) (exact? . bX4c86) (exact-integer-sqrt . bX4c85) (exact . bX4c84) (even? . bX4c83) (error . bX4c82) (eqv? . bX4c81) (equal? . bX4c80) (eq? . bX4c7f) (dynamic-wind . bX4c7e) (div0-and-mod0 . bX4c7d) (mod0 . bX4c7c) (div0 . bX4c7b) (div-and-mod . bX4c7a) (mod . bX4c79) (div . bX4c78) (denominator . bX4c77) (cos . bX4c76) (cons . bX4c75) (complex? . bX4c74) (char? . bX4c73) (char>? . bX4c72) (char>=? . bX4c71) (char=? . bX4c70) (char<? . bX4c6f) (char<=? . bX4c6e) (char->integer . bX4c6d) (ceiling . bX4c6c) (call-with-values . bX4c6b) (call/cc . bX4c6a) (call-with-current-continuation . bX4c69) (cddddr . bX4c68) (cdddar . bX4c67) (cddadr . bX4c66) (cddaar . bX4c65) (cdaddr . bX4c64) (cdadar . bX4c63) (cdaadr . bX4c62) (cdaaar . bX4c61) (cadddr . bX4c60) (caddar . bX4c5f) (cadadr . bX4c5e) (cadaar . bX4c5d) (caaddr . bX4c5c) (caadar . bX4c5b) (caaadr . bX4c5a) (caaaar . bX4c59) (cdddr . bX4c58) (cddar . bX4c57) (cdadr . bX4c56) (cdaar . bX4c55) (caddr . bX4c54) (cadar . bX4c53) (caadr . bX4c52) (caaar . bX4c51) (cddr . bX4c50) (cdar . bX4c4f) (cadr . bX4c4e) (caar . bX4c4d) (cdr . bX4c4c) (car . bX4c4b) (boolean? . bX4c4a) (boolean=? . bX4c49) (atan . bX4c48) (assertion-violation . bX4c47) (asin . bX4c46) (apply . bX4c45) (append . bX4c44) (angle . bX4c43) (acos . bX4c42) (abs . bX4c41) (/ . bX4c40) (* . bX4c3f) (- . bX4c3e) (+ . bX4c3d) (>= . bX4c3c) (> . bX4c3b) (= . bX4c3a) (<= . bX4c39) (< . bX4c38) (unquote-splicing . bX4c05) (unquote . bX4c04) (_ . bX4c03) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (assert . bX4bff) (cond . bX4bfa) (let* . bX4bf9) (let*-values . bX4bf8) (let-values . bX4bf7) (identifier-syntax . bX4bf6) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (case . bX4bed) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec* . bX4be5) (letrec . bX4be4) (lambda . bX4be1) (quote . bX4bde) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (begin . bX4bd8) (define-syntax . bX4bd6) (define . bX4bd5)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0e '(rnrs lists) '(6) '() '() '() '((remove . bX4daf) (remv . bX4dae) (remp . bX4dad) (remq . bX4dac) (partition . bX4dab) (memv . bX4daa) (memq . bX4da9) (memp . bX4da8) (member . bX4da7) (exists . bX4da6) (for-all . bX4da5) (fold-right . bX4da4) (fold-left . bX4da3) (find . bX4da2) (filter . bX4da1) (cons* . bX4da0) (assv . bX4d9f) (assq . bX4d9e) (assp . bX4d9d) (assoc . bX4d9c)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f0f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bX4e0a) (call-with-input-file . bX4e09) (write-char . bX4e08) (write . bX4e07) (with-output-to-file . bX4e06) (with-input-from-file . bX4e05) (read-char . bX4e04) (read . bX4e03) (peek-char . bX4e02) (open-output-file . bX4e01) (open-input-file . bX4e00) (newline . bX4dff) (display . bX4dfe) (close-output-port . bX4dfd) (close-input-port . bX4dfc) (eof-object? . bX4dfb) (eof-object . bX4dfa) (current-error-port . bX4df9) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f10 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bX4dcb) (utf32->string . bX4d80) (utf16->string . bX4d7f) (utf8->string . bX4d7e) (uint-list->bytevector . bX4d7d) (u8-list->bytevector . bX4d7c) (string->utf8 . bX4d7b) (string->utf32 . bX4d7a) (string->utf16 . bX4d79) (sint-list->bytevector . bX4d78) (native-endianness . bX4d77) (bytevector? . bX4d76) (bytevector=? . bX4d75) (bytevector-uint-set! . bX4d74) (bytevector-uint-ref . bX4d73) (bytevector-u8-set! . bX4d72) (bytevector-u8-ref . bX4d71) (bytevector-u64-set! . bX4d70) (bytevector-u64-ref . bX4d6f) (bytevector-u64-native-set! . bX4d6e) (bytevector-u64-native-ref . bX4d6d) (bytevector-u32-set! . bX4d6c) (bytevector-u32-ref . bX4d6b) (bytevector-u32-native-set! . bX4d6a) (bytevector-u32-native-ref . bX4d69) (bytevector-u16-set! . bX4d68) (bytevector-u16-ref . bX4d67) (bytevector-u16-native-set! . bX4d66) (bytevector-u16-native-ref . bX4d65) (bytevector-sint-set! . bX4d64) (bytevector-sint-ref . bX4d63) (bytevector-s8-set! . bX4d62) (bytevector-s8-ref . bX4d61) (bytevector-s64-set! . bX4d60) (bytevector-s64-ref . bX4d5f) (bytevector-s64-native-set! . bX4d5e) (bytevector-s64-native-ref . bX4d5d) (bytevector-s32-set! . bX4d5c) (bytevector-s32-ref . bX4d5b) (bytevector-s32-native-set! . bX4d5a) (bytevector-s32-native-ref . bX4d59) (bytevector-s16-set! . bX4d58) (bytevector-s16-ref . bX4d57) (bytevector-s16-native-set! . bX4d56) (bytevector-s16-native-ref . bX4d55) (bytevector-length . bX4d54) (bytevector-ieee-single-ref . bX4d53) (bytevector-ieee-single-set! . bX4d52) (bytevector-ieee-single-native-set! . bX4d51) (bytevector-ieee-single-native-ref . bX4d50) (bytevector-ieee-double-set! . bX4d4f) (bytevector-ieee-double-ref . bX4d4e) (bytevector-ieee-double-native-set! . bX4d4d) (bytevector-ieee-double-native-ref . bX4d4c) (bytevector-fill! . bX4d4b) (bytevector-copy! . bX4d4a) (bytevector-copy . bX4d49) (bytevector->uint-list . bX4d48) (bytevector->u8-list . bX4d47) (bytevector->sint-list . bX4d46) (endianness . bX4bfe)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f11 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bX4e52) (string-titlecase . bX4e51) (string-normalize-nfkd . bX4e50) (string-normalize-nfkc . bX4e4f) (string-normalize-nfd . bX4e4e) (string-normalize-nfc . bX4e4d) (string-foldcase . bX4e4c) (string-downcase . bX4e4b) (string-ci>? . bX4e4a) (string-ci>=? . bX4e49) (string-ci=? . bX4e48) (string-ci<? . bX4e47) (string-ci<=? . bX4e46) (char-whitespace? . bX4e45) (char-upper-case? . bX4e44) (char-title-case? . bX4e43) (char-numeric? . bX4e42) (char-lower-case? . bX4e41) (char-general-category . bX4e40) (char-upcase . bX4e3f) (char-titlecase . bX4e3e) (char-foldcase . bX4e3d) (char-downcase . bX4e3c) (char-ci>? . bX4e3b) (char-ci>=? . bX4e3a) (char-ci=? . bX4e39) (char-ci<? . bX4e38) (char-ci<=? . bX4e37) (char-alphabetic? . bX4e36)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f12 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bX4d95) (raise-continuable . bX4d94) (raise . bX4d93) (guard . bX4c0a) (else . bX4c02) (=> . bX4c01)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f13 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bX4cea) (bitwise-reverse-bit-field . bX4ce9) (bitwise-length . bX4ce8) (bitwise-if . bX4ce7) (bitwise-first-bit-set . bX4ce6) (bitwise-copy-bit-field . bX4ce5) (bitwise-copy-bit . bX4ce4) (bitwise-bit-set? . bX4ce3) (bitwise-bit-field . bX4ce2) (bitwise-bit-count . bX4ce1) (bitwise-xor . bX4ce0) (bitwise-ior . bX4cdf) (bitwise-and . bX4cde) (bitwise-not . bX4cdd) (bitwise-arithmetic-shift-right . bX4cdc) (bitwise-arithmetic-shift-left . bX4cdb) (bitwise-arithmetic-shift . bX4cda)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f14 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bX4d17) (fxxor . bX4d16) (fxrotate-bit-field . bX4d15) (fxreverse-bit-field . bX4d14) (fxpositive? . bX4d13) (fxodd? . bX4d12) (fxnot . bX4d11) (fxnegative? . bX4d10) (fxmod0 . bX4d0f) (fxmod . bX4d0e) (fxmin . bX4d0d) (fxmax . bX4d0c) (fxlength . bX4d0b) (fxior . bX4d0a) (fxif . bX4d09) (fxfirst-bit-set . bX4d08) (fxeven? . bX4d07) (fxdiv0-and-mod0 . bX4d06) (fxdiv0 . bX4d05) (fxdiv-and-mod . bX4d04) (fxdiv . bX4d03) (fxcopy-bit-field . bX4d02) (fxcopy-bit . bX4d01) (fxbit-set? . bX4d00) (fxbit-field . bX4cff) (fxbit-count . bX4cfe) (fxarithmetic-shift-right . bX4cfd) (fxarithmetic-shift-left . bX4cfc) (fxarithmetic-shift . bX4cfb) (fxand . bX4cfa) (fx>? . bX4cf9) (fx>=? . bX4cf8) (fx=? . bX4cf7) (fx<? . bX4cf6) (fx<=? . bX4cf5) (fx-/carry . bX4cf4) (fx- . bX4cf3) (fx+/carry . bX4cf2) (fx+ . bX4cf1) (fx*/carry . bX4cf0) (fx* . bX4cef) (greatest-fixnum . bX4cee) (least-fixnum . bX4ced) (fixnum-width . bX4cec) (fixnum? . bX4ceb)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f15 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bX495e) (no-infinities-violation? . bX4949) (make-no-nans-violation . bX495c) (make-no-infinities-violation . bX4947) (real->flonum . bX4d45) (flzero? . bX4d44) (fltruncate . bX4d43) (fltan . bX4d42) (flsqrt . bX4d41) (flsin . bX4d40) (flround . bX4d3f) (flpositive? . bX4d3e) (flonum? . bX4d3d) (flodd? . bX4d3c) (flnumerator . bX4d3b) (flnegative? . bX4d3a) (flnan? . bX4d39) (flmod0 . bX4d38) (flmod . bX4d37) (flmin . bX4d36) (flmax . bX4d35) (fllog . bX4d34) (flinteger? . bX4d33) (flinfinite? . bX4d32) (flfloor . bX4d31) (flfinite? . bX4d30) (flexpt . bX4d2f) (flexp . bX4d2e) (fleven? . bX4d2d) (fldiv0-and-mod0 . bX4d2c) (fldiv0 . bX4d2b) (fldiv-and-mod . bX4d2a) (fldiv . bX4d29) (fldenominator . bX4d28) (flcos . bX4d27) (flceiling . bX4d26) (flatan . bX4d25) (flasin . bX4d24) (flacos . bX4d23) (flabs . bX4d22) (fl>? . bX4d21) (fl>=? . bX4d20) (fl=? . bX4d1f) (fl<? . bX4d1e) (fl<=? . bX4d1d) (fl/ . bX4d1c) (fl- . bX4d1b) (fl+ . bX4d1a) (fl* . bX4d19) (fixnum->flonum . bX4d18) (&no-nans . bX4c36) (&no-infinities . bX4c35)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f16 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bX4e1f) (string-ci-hash . bX4e1e) (string-hash . bX4e1d) (equal-hash . bX4e1c) (hashtable-equivalence-function . bX4e1b) (make-hashtable . bX4e1a) (hashtable-hash-function . bX4e19) (make-eqv-hashtable . bX4e18) (make-eq-hashtable . bX4e17) (hashtable? . bX4e16) (hashtable-update! . bX4e15) (hashtable-size . bX4e14) (hashtable-set! . bX4e13) (hashtable-ref . bX4e12) (hashtable-mutable? . bX4e11) (hashtable-keys . bX4e10) (hashtable-entries . bX4e0f) (hashtable-delete! . bX4e0e) (hashtable-copy . bX4e0d) (hashtable-contains? . bX4e0c) (hashtable-clear! . bX4e0b)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f17 '(rnrs io ports) '(6) '() '() '() '((eof-object? . bX4dfb) (eof-object . bX4dfa) (current-error-port . bX4df9) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (utf-8-codec . bX4df4) (utf-16-codec . bX4df3) (transcoder-error-handling-mode . bX4df2) (transcoder-eol-style . bX4df1) (transcoder-codec . bX4df0) (transcoded-port . bX4def) (textual-port? . bX4dee) (string->bytevector . bX4ded) (standard-output-port . bX4dec) (standard-input-port . bX4deb) (standard-error-port . bX4dea) (set-port-position! . bX4de9) (put-u8 . bX4de8) (put-string . bX4de7) (put-datum . bX4de6) (put-char . bX4de5) (put-bytevector . bX4de4) (port? . bX4de3) (port-transcoder . bX4de2) (port-position . bX4de1) (port-has-set-port-position!? . bX4de0) (port-has-port-position? . bX4ddf) (port-eof? . bX4dde) (output-port-buffer-mode . bX4ddd) (open-string-output-port . bX4ddc) (open-string-input-port . bX4ddb) (open-file-output-port . bX4dda) (open-file-input/output-port . bX4dd9) (open-file-input-port . bX4dd8) (open-bytevector-output-port . bX4dd7) (open-bytevector-input-port . bX4dd6) (native-transcoder . bX4dd5) (native-eol-style . bX4dd4) (make-transcoder . bX4dd3) (latin-1-codec . bX4dd2) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (make-i/o-encoding-error . bX492e) (make-i/o-decoding-error . bX4917) (make-custom-textual-output-port . bX4dd1) (make-custom-textual-input/output-port . bX4dd0) (make-custom-textual-input-port . bX4dcf) (make-custom-binary-output-port . bX4dce) (make-custom-binary-input/output-port . bX4dcd) (make-custom-binary-input-port . bX4dcc) (lookahead-u8 . bX4dca) (lookahead-char . bX4dc9) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (i/o-encoding-error? . bX4932) (i/o-encoding-error-char . bX4934) (i/o-decoding-error? . bX4919) (get-u8 . bX4dc8) (get-string-n! . bX4dc7) (get-string-n . bX4dc6) (get-string-all . bX4dc5) (get-line . bX4dc4) (get-datum . bX4dc3) (get-char . bX4dc2) (get-bytevector-some . bX4dc1) (get-bytevector-n! . bX4dc0) (get-bytevector-n . bX4dbf) (get-bytevector-all . bX4dbe) (flush-output-port . bX4dbd) (close-port . bX4dbc) (call-with-string-output-port . bX4d9b) (call-with-port . bX4d9a) (call-with-bytevector-output-port . bX4d99) (bytevector->string . bX4d98) (buffer-mode? . bX4d97) (binary-port? . bX4d96) (&i/o-encoding . bX4c34) (&i/o-decoding . bX4c33) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29) (error-handling-mode . bX4c0e) (file-options . bX4c0d) (buffer-mode . bX4c0c) (eol-style . bX4c0b)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f18 '(rnrs enums) '(6) '() '() '() '((make-enumeration . bX4d92) (enum-set=? . bX4d91) (enum-set-universe . bX4d90) (enum-set-union . bX4d8f) (enum-set-subset? . bX4d8e) (enum-set-projection . bX4d8d) (enum-set-member? . bX4d8c) (enum-set-intersection . bX4d8b) (enum-set-indexer . bX4d8a) (enum-set-difference . bX4d89) (enum-set-constructor . bX4d88) (enum-set-complement . bX4d87) (enum-set->list . bX4d86) (define-enumeration . bX4c19)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f19 '(rnrs conditions) '(6) '() '() '() '((who-condition? . bX47a9) (warning? . bX4721) (violation? . bX4760) (undefined-violation? . bX4820) (syntax-violation? . bX4807) (syntax-violation-subform . bX480b) (syntax-violation-form . bX4809) (syntax-violation . bX2c33) (simple-conditions . bX4d85) (serious-condition? . bX4736) (non-continuable-violation? . bX47c0) (message-condition? . bX470a) (make-who-condition . bX47a5) (make-warning . bX471f) (make-violation . bX475e) (make-undefined-violation . bX481e) (make-syntax-violation . bX4801) (make-serious-condition . bX4734) (make-non-continuable-violation . bX47be) (make-message-condition . bX4706) (make-lexical-violation . bX47e8) (make-irritants-condition . bX478a) (make-implementation-restriction-violation . bX47d3) (make-error . bX4749) (make-assertion-violation . bX4773) (lexical-violation? . bX47ea) (irritants-condition? . bX478e) (implementation-restriction-violation? . bX47d5) (error? . bX474b) (condition-who . bX47ab) (condition-predicate . bX4d84) (condition-message . bX470c) (condition-irritants . bX4790) (condition-accessor . bX4d83) (condition . bX4d82) (assertion-violation? . bX4775) (condition? . bX4d81) (&undefined . bX4c28) (&syntax . bX4c27) (&lexical . bX4c26) (&implementation-restriction . bX4c25) (&non-continuable . bX4c24) (&who . bX4c23) (&irritants . bX4c22) (&assertion . bX4c21) (&violation . bX4c20) (&error . bX4c1f) (&serious . bX4c1e) (&warning . bX4c1d) (&message . bX4c1c) (&condition . bX4c1b) (define-condition-type . bX4c1a)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f1a '(rnrs records inspection) '(6) '() '() '() '((record? . bX4e2e) (record-type-uid . bX4e2d) (record-type-sealed? . bX4e2c) (record-type-parent . bX4e2b) (record-type-opaque? . bX4e2a) (record-type-name . bX4e29) (record-type-generative? . bX4e28) (record-type-field-names . bX4e27) (record-rtd . bX4e26) (record-field-mutable? . bX4e25)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f1b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bX4e35) (record-predicate . bX4e34) (record-mutator . bX4e33) (record-constructor . bX4e32) (record-accessor . bX4e31) (make-record-type-descriptor . bX4e30) (make-record-constructor-descriptor . bX4e2f)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f1c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bX4c18) (parent-rtd . bX4c17) (nongenerative . bX4c16) (opaque . bX4c15) (sealed . bX4c14) (protocol . bX4c13) (parent . bX4c12) (immutable . bX4c11) (mutable . bX4c10) (fields . bX4c0f) (record-constructor-descriptor . bX4bef) (record-type-descriptor . bX4bee)) '() values values '#f '#f '#t '#f) (bX2761@bX25ad@install-library 'bX4f1d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bX4962) (&no-nans-rtd . bX4960) (&no-infinities-rcd . bX494d) (&no-infinities-rtd . bX494b) (&i/o-encoding-rcd . bX4938) (&i/o-encoding-rtd . bX4936) (&i/o-decoding-rcd . bX491d) (&i/o-decoding-rtd . bX491b) (&i/o-port-rcd . bX4908) (&i/o-port-rtd . bX4906) (&i/o-file-does-not-exist-rcd . bX48ed) (&i/o-file-does-not-exist-rtd . bX48eb) (&i/o-file-already-exists-rcd . bX48d8) (&i/o-file-already-exists-rtd . bX48d6) (&i/o-file-is-read-only-rcd . bX48c3) (&i/o-file-is-read-only-rtd . bX48c1) (&i/o-file-protection-rcd . bX48ae) (&i/o-file-protection-rtd . bX48ac) (&i/o-filename-rcd . bX4899) (&i/o-filename-rtd . bX4897) (&i/o-invalid-position-rcd . bX487e) (&i/o-invalid-position-rtd . bX487c) (&i/o-write-rcd . bX4863) (&i/o-write-rtd . bX4861) (&i/o-read-rcd . bX484e) (&i/o-read-rtd . bX484c) (&i/o-rcd . bX4839) (&i/o-rtd . bX4837) (&undefined-rcd . bX4824) (&undefined-rtd . bX4822) (&syntax-rcd . bX480f) (&syntax-rtd . bX480d) (&lexical-rcd . bX47ee) (&lexical-rtd . bX47ec) (&implementation-restriction-rcd . bX47d9) (&implementation-restriction-rtd . bX47d7) (&non-continuable-rcd . bX47c4) (&non-continuable-rtd . bX47c2) (&who-rcd . bX47af) (&who-rtd . bX47ad) (&irritants-rcd . bX4794) (&irritants-rtd . bX4792) (&assertion-rcd . bX4779) (&assertion-rtd . bX4777) (&violation-rcd . bX4764) (&violation-rtd . bX4762) (&error-rcd . bX474f) (&error-rtd . bX474d) (&serious-rcd . bX473a) (&serious-rtd . bX4738) (&warning-rcd . bX4725) (&warning-rtd . bX4723) (&message-rcd . bX4710) (&message-rtd . bX470e) (&condition-rcd . bX46b1) (&condition-rtd . bX46af) (syntax-error . bX2c2f) (syntax-dispatch . bX2b53) (pretty-print . bX4efd) (eval-core . bX4efc) (set-symbol-value! . bX4efb) (symbol-value . bX4efa) (gensym . bX4ef9) (void . bX4ef8) (load . bX4a73) (interaction-environment . bX2c41) (char-ready? . bX4ef7) (regexp? . bX4ef6) (read-line . bX4ef5) (gensym-prefix-set! . bX4ef4) (ungensym . bX4ef3) (alist->eq-hash-table . bX4ef2) (assoc-ref . bX4ef1) (print . bX4ef0) (format . bX4eef) (host-os . bX4eee) (library-path . bX258c) (standard-library-path . bX4eed) (file-newer? . bX4eec) (stat-mtime . bX4eeb) (write-to-file . bX4eea) (file->list . bX4ee9) (file->string . bX4ee8) (digit->integer . bX4ee7) (call-with-string-input-port . bX4ee6) (call-with-string-io . bX4ee5) (string-split . bX4ee4) (bytevector-for-each . bX4ee3) (string->regexp . bX4ee2) (rxmatch . bX4ee1) (regexp-replace-all . bX4ee0) (hashtable-for-each . bX4edf) (mosh-cache-dir . bX2377) (call-process . bX4ede) (local-tz-offset . bX4edd) (microseconds . bX4edc) (directory-list . bX4edb) (set-current-directory! . bX4eda) (expand-path . bX4ed9) (current-directory . bX4ed8) (%spawn . bX4ed7) (%waitpid . bX4ed6) (simple-struct-name . bX4ed5) (simple-struct-set! . bX4ed4) (simple-struct-ref . bX4ed3) (make-simple-struct . bX4ed2) (simple-struct? . bX4ed1) (pointer-ref-c-int64 . bX4ed0) (pointer-ref-c-int32 . bX4ecf) (pointer-ref-c-int16 . bX4ece) (pointer-ref-c-int8 . bX4ecd) (pointer-ref-c-uint64 . bX4ecc) (pointer-ref-c-uint32 . bX4ecb) (pointer-ref-c-uint16 . bX4eca) (pointer-ref-c-uint8 . bX4ec9) (pointer-set-c-uint64! . bX4ec8) (pointer-set-c-uint32! . bX4ec7) (pointer-set-c-uint16! . bX4ec6) (pointer-set-c-uint8! . bX4ec5) (pointer-set-c-int64! . bX4ec4) (pointer-set-c-int32! . bX4ec3) (pointer-set-c-int16! . bX4ec2) (pointer-set-c-int8! . bX4ec1) (pointer-set-c-pointer! . bX4ec0) (pointer-set-c-double! . bX4ebf) (pointer-set-c-float! . bX4ebe) (pointer-set-c-long-long! . bX4ebd) (pointer-set-c-long! . bX4ebc) (pointer-set-c-int! . bX4ebb) (pointer-set-c-short! . bX4eba) (pointer-set-c-char! . bX4eb9) (pointer-ref-c-pointer . bX4eb8) (pointer-ref-c-double . bX4eb7) (pointer-ref-c-float . bX4eb6) (pointer-ref-c-unsigned-long-long . bX4eb5) (pointer-ref-c-signed-long-long . bX4eb4) (pointer-ref-c-unsigned-long . bX4eb3) (pointer-ref-c-signed-long . bX4eb2) (pointer-ref-c-unsigned-int . bX4eb1) (pointer-ref-c-signed-int . bX4eb0) (pointer-ref-c-unsigned-short . bX4eaf) (pointer-ref-c-signed-short . bX4eae) (pointer-ref-c-unsigned-char . bX4ead) (pointer-ref-c-signed-char . bX4eac) (pointer->integer . bX4eab) (integer->pointer . bX4eaa) (pointer? . bX4ea9) (shared-errno . bX4ea8) (%ffi-make-c-callback . bX4ea7) (%ffi-free . bX4ea6) (%ffi-malloc . bX4ea5) (%ffi-supported? . bX4ea4) (%ffi-pointer->string . bX4ea3) (%ffi-call->string-or-zero . bX4ea2) (%ffi-call->double . bX4ea1) (%ffi-call->void* . bX4ea0) (%ffi-call->void . bX4e9f) (%ffi-call->char . bX4e9e) (%ffi-call->int . bX4e9d) (%ffi-lookup . bX4e9c) (%ffi-open . bX4e9b) (%fork . bX4e9a) (%pipe . bX4e99) (p . bX4e98) (open-output-string . bX4e97) (get-output-string . bX4e96) (file-stat-ctime . bX4e95) (file-stat-atime . bX4e94) (file-stat-mtime . bX4e93) (file-size-in-bytes . bX4e92) (file-writable? . bX4e91) (file-executable? . bX4e90) (file-readable? . bX4e8f) (file-regular? . bX4e8e) (file-symbolic-link? . bX4e8d) (file-directory? . bX4e8c) (create-symbolic-link . bX4e8b) (rename-file . bX4e8a) (delete-directory . bX4e89) (create-directory . bX4e88) (create-mosh-cache-dir . bX4e87) (get-environment-variables . bX4e86) (current-exception-handler . bX4e85) (get-environment-variable . bX4e84) (join-wraps . bX4e83) (id->real-label . bX4e82) (same-marks? . bX4e81) (same-marks*? . bX4e80) (get-timeofday . bX4e7f) (get-command-line . bX4e7e) (sys-display . bX4e7d) (whereis . bX4e7c) (register . bX4e7b) (vm-join! . bX4e7a) (vm-set-value! . bX4e79) (vm? . bX4e78) (main-vm? . bX4e77) (vm-eval . bX4e76) (vm-self . bX4e75) (vm-start! . bX4e74) (make-vm . bX4e73) (mutex-try-lock! . bX4e72) (mutex-unlock! . bX4e71) (mutex-lock! . bX4e70) (mutex? . bX4e6f) (make-mutex . bX4e6e) (condition-variable-notify-all! . bX4e6d) (condition-variable-notify! . bX4e6c) (condition-variable-wait! . bX4e6b) (make-condition-variable . bX4e6a) (mosh-executable-path . bX4e69) (make-file-options . bX4e68) (source-info . bX4e67) (make-compiler-instruction . bX4e66) (make-instruction . bX4e65) (set-source-info! . bX4e64) (bignum? . bX4e63) (fast-equal? . bX4e62) (fasl-read . bX4e61) (fasl-write . bX4e60) (time-usage . bX4e5f) (os-constant . bX4e5e) (disasm . bX4e5d) (make-parameter . bX2375) (socket-port . bX4e5c) (socket-shutdown . bX4e5b) (socket-close . bX4e5a) (socket-send . bX4e59) (socket-recv! . bX4e58) (socket-recv . bX4e57) (make-server-socket . bX4e56) (make-client-socket . bX4e55) (socket-accept . bX4e54) (socket? . bX4e53) (string-upcase . bX4e52) (string-titlecase . bX4e51) (string-normalize-nfkd . bX4e50) (string-normalize-nfkc . bX4e4f) (string-normalize-nfd . bX4e4e) (string-normalize-nfc . bX4e4d) (string-foldcase . bX4e4c) (string-downcase . bX4e4b) (string-ci>? . bX4e4a) (string-ci>=? . bX4e49) (string-ci=? . bX4e48) (string-ci<? . bX4e47) (string-ci<=? . bX4e46) (char-whitespace? . bX4e45) (char-upper-case? . bX4e44) (char-title-case? . bX4e43) (char-numeric? . bX4e42) (char-lower-case? . bX4e41) (char-general-category . bX4e40) (char-upcase . bX4e3f) (char-titlecase . bX4e3e) (char-foldcase . bX4e3d) (char-downcase . bX4e3c) (char-ci>? . bX4e3b) (char-ci>=? . bX4e3a) (char-ci=? . bX4e39) (char-ci<? . bX4e38) (char-ci<=? . bX4e37) (char-alphabetic? . bX4e36) (make-variable-transformer . bX297e) (identifier? . bX2c35) (generate-temporaries . bX2c21) (free-identifier=? . bX2c23) (syntax->datum . bX2c39) (datum->syntax . bX2c37) (bound-identifier=? . bX2c25) (record-type-descriptor? . bX4e35) (record-predicate . bX4e34) (record-mutator . bX4e33) (record-constructor . bX4e32) (record-accessor . bX4e31) (make-record-type-descriptor . bX4e30) (make-record-constructor-descriptor . bX4e2f) (record? . bX4e2e) (record-type-uid . bX4e2d) (record-type-sealed? . bX4e2c) (record-type-parent . bX4e2b) (record-type-opaque? . bX4e2a) (record-type-name . bX4e29) (record-type-generative? . bX4e28) (record-type-field-names . bX4e27) (record-rtd . bX4e26) (record-field-mutable? . bX4e25) (delete-file . bX4e24) (file-exists? . bX4e23) (vector-sort! . bX4e22) (vector-sort . bX4e21) (list-sort . bX4e20) (symbol-hash . bX4e1f) (string-ci-hash . bX4e1e) (string-hash . bX4e1d) (equal-hash . bX4e1c) (hashtable-equivalence-function . bX4e1b) (make-hashtable . bX4e1a) (hashtable-hash-function . bX4e19) (make-eqv-hashtable . bX4e18) (make-eq-hashtable . bX4e17) (hashtable? . bX4e16) (hashtable-update! . bX4e15) (hashtable-size . bX4e14) (hashtable-set! . bX4e13) (hashtable-ref . bX4e12) (hashtable-mutable? . bX4e11) (hashtable-keys . bX4e10) (hashtable-entries . bX4e0f) (hashtable-delete! . bX4e0e) (hashtable-copy . bX4e0d) (hashtable-contains? . bX4e0c) (hashtable-clear! . bX4e0b) (call-with-output-file . bX4e0a) (call-with-input-file . bX4e09) (write-char . bX4e08) (write . bX4e07) (with-output-to-file . bX4e06) (with-input-from-file . bX4e05) (read-char . bX4e04) (read . bX4e03) (peek-char . bX4e02) (open-output-file . bX4e01) (open-input-file . bX4e00) (newline . bX4dff) (display . bX4dfe) (close-output-port . bX4dfd) (close-input-port . bX4dfc) (eof-object? . bX4dfb) (eof-object . bX4dfa) (current-error-port . bX4df9) (current-output-port . bX4df8) (current-input-port . bX4df7) (output-port? . bX4df6) (input-port? . bX4df5) (utf-8-codec . bX4df4) (utf-16-codec . bX4df3) (transcoder-error-handling-mode . bX4df2) (transcoder-eol-style . bX4df1) (transcoder-codec . bX4df0) (transcoded-port . bX4def) (textual-port? . bX4dee) (string->bytevector . bX4ded) (standard-output-port . bX4dec) (standard-input-port . bX4deb) (standard-error-port . bX4dea) (set-port-position! . bX4de9) (put-u8 . bX4de8) (put-string . bX4de7) (put-datum . bX4de6) (put-char . bX4de5) (put-bytevector . bX4de4) (port? . bX4de3) (port-transcoder . bX4de2) (port-position . bX4de1) (port-has-set-port-position!? . bX4de0) (port-has-port-position? . bX4ddf) (port-eof? . bX4dde) (output-port-buffer-mode . bX4ddd) (open-string-output-port . bX4ddc) (open-string-input-port . bX4ddb) (open-file-output-port . bX4dda) (open-file-input/output-port . bX4dd9) (open-file-input-port . bX4dd8) (open-bytevector-output-port . bX4dd7) (open-bytevector-input-port . bX4dd6) (native-transcoder . bX4dd5) (native-eol-style . bX4dd4) (make-transcoder . bX4dd3) (latin-1-codec . bX4dd2) (make-i/o-write-error . bX485d) (make-i/o-read-error . bX4848) (make-i/o-port-error . bX48fe) (make-i/o-invalid-position-error . bX4874) (make-i/o-filename-error . bX488f) (make-i/o-file-protection-error . bX48a8) (make-i/o-file-is-read-only-error . bX48bd) (make-i/o-file-does-not-exist-error . bX48e7) (make-i/o-file-already-exists-error . bX48d2) (make-i/o-error . bX4833) (make-i/o-encoding-error . bX492e) (make-i/o-decoding-error . bX4917) (make-custom-textual-output-port . bX4dd1) (make-custom-textual-input/output-port . bX4dd0) (make-custom-textual-input-port . bX4dcf) (make-custom-binary-output-port . bX4dce) (make-custom-binary-input/output-port . bX4dcd) (make-custom-binary-input-port . bX4dcc) (make-bytevector . bX4dcb) (lookahead-u8 . bX4dca) (lookahead-char . bX4dc9) (i/o-write-error? . bX485f) (i/o-read-error? . bX484a) (i/o-port-error? . bX4902) (i/o-invalid-position-error? . bX4878) (i/o-filename-error? . bX4893) (i/o-file-protection-error? . bX48aa) (i/o-file-is-read-only-error? . bX48bf) (i/o-file-does-not-exist-error? . bX48e9) (i/o-file-already-exists-error? . bX48d4) (i/o-error? . bX4835) (i/o-error-position . bX487a) (i/o-error-port . bX4904) (i/o-error-filename . bX4895) (i/o-encoding-error? . bX4932) (i/o-encoding-error-char . bX4934) (i/o-decoding-error? . bX4919) (get-u8 . bX4dc8) (get-string-n! . bX4dc7) (get-string-n . bX4dc6) (get-string-all . bX4dc5) (get-line . bX4dc4) (get-datum . bX4dc3) (get-char . bX4dc2) (get-bytevector-some . bX4dc1) (get-bytevector-n! . bX4dc0) (get-bytevector-n . bX4dbf) (get-bytevector-all . bX4dbe) (flush-output-port . bX4dbd) (close-port . bX4dbc) (scheme-report-environment . bX2c0f) (quotient . bX4dbb) (null-environment . bX2c0d) (remainder . bX4dba) (modulo . bX4db9) (inexact->exact . bX4db8) (force . bX4db7) (exact->inexact . bX4db6) (make-promise . bX4db5) (exit . bX4db4) (command-line . bX4a6d) (string-fill! . bX4db3) (string-set! . bX4db2) (set-cdr! . bX4db1) (set-car! . bX4db0) (remove . bX4daf) (remv . bX4dae) (remp . bX4dad) (remq . bX4dac) (partition . bX4dab) (memv . bX4daa) (memq . bX4da9) (memp . bX4da8) (member . bX4da7) (exists . bX4da6) (for-all . bX4da5) (fold-right . bX4da4) (fold-left . bX4da3) (find . bX4da2) (filter . bX4da1) (cons* . bX4da0) (assv . bX4d9f) (assq . bX4d9e) (assp . bX4d9d) (assoc . bX4d9c) (call-with-string-output-port . bX4d9b) (call-with-port . bX4d9a) (call-with-bytevector-output-port . bX4d99) (bytevector->string . bX4d98) (buffer-mode? . bX4d97) (binary-port? . bX4d96) (with-exception-handler . bX4d95) (raise-continuable . bX4d94) (raise . bX4d93) (eval . bX2c13) (environment . bX2c0b) (make-enumeration . bX4d92) (enum-set=? . bX4d91) (enum-set-universe . bX4d90) (enum-set-union . bX4d8f) (enum-set-subset? . bX4d8e) (enum-set-projection . bX4d8d) (enum-set-member? . bX4d8c) (enum-set-intersection . bX4d8b) (enum-set-indexer . bX4d8a) (enum-set-difference . bX4d89) (enum-set-constructor . bX4d88) (enum-set-complement . bX4d87) (enum-set->list . bX4d86) (who-condition? . bX47a9) (warning? . bX4721) (violation? . bX4760) (undefined-violation? . bX4820) (syntax-violation? . bX4807) (syntax-violation-subform . bX480b) (syntax-violation-form . bX4809) (syntax-violation . bX2c33) (simple-conditions . bX4d85) (serious-condition? . bX4736) (non-continuable-violation? . bX47c0) (message-condition? . bX470a) (make-who-condition . bX47a5) (make-warning . bX471f) (make-violation . bX475e) (make-undefined-violation . bX481e) (make-syntax-violation . bX4801) (make-serious-condition . bX4734) (make-non-continuable-violation . bX47be) (make-message-condition . bX4706) (make-lexical-violation . bX47e8) (make-irritants-condition . bX478a) (make-implementation-restriction-violation . bX47d3) (make-error . bX4749) (make-assertion-violation . bX4773) (lexical-violation? . bX47ea) (irritants-condition? . bX478e) (implementation-restriction-violation? . bX47d5) (error? . bX474b) (condition-who . bX47ab) (condition-predicate . bX4d84) (condition-message . bX470c) (condition-irritants . bX4790) (condition-accessor . bX4d83) (condition . bX4d82) (assertion-violation? . bX4775) (condition? . bX4d81) (utf32->string . bX4d80) (utf16->string . bX4d7f) (utf8->string . bX4d7e) (uint-list->bytevector . bX4d7d) (u8-list->bytevector . bX4d7c) (string->utf8 . bX4d7b) (string->utf32 . bX4d7a) (string->utf16 . bX4d79) (sint-list->bytevector . bX4d78) (native-endianness . bX4d77) (bytevector? . bX4d76) (bytevector=? . bX4d75) (bytevector-uint-set! . bX4d74) (bytevector-uint-ref . bX4d73) (bytevector-u8-set! . bX4d72) (bytevector-u8-ref . bX4d71) (bytevector-u64-set! . bX4d70) (bytevector-u64-ref . bX4d6f) (bytevector-u64-native-set! . bX4d6e) (bytevector-u64-native-ref . bX4d6d) (bytevector-u32-set! . bX4d6c) (bytevector-u32-ref . bX4d6b) (bytevector-u32-native-set! . bX4d6a) (bytevector-u32-native-ref . bX4d69) (bytevector-u16-set! . bX4d68) (bytevector-u16-ref . bX4d67) (bytevector-u16-native-set! . bX4d66) (bytevector-u16-native-ref . bX4d65) (bytevector-sint-set! . bX4d64) (bytevector-sint-ref . bX4d63) (bytevector-s8-set! . bX4d62) (bytevector-s8-ref . bX4d61) (bytevector-s64-set! . bX4d60) (bytevector-s64-ref . bX4d5f) (bytevector-s64-native-set! . bX4d5e) (bytevector-s64-native-ref . bX4d5d) (bytevector-s32-set! . bX4d5c) (bytevector-s32-ref . bX4d5b) (bytevector-s32-native-set! . bX4d5a) (bytevector-s32-native-ref . bX4d59) (bytevector-s16-set! . bX4d58) (bytevector-s16-ref . bX4d57) (bytevector-s16-native-set! . bX4d56) (bytevector-s16-native-ref . bX4d55) (bytevector-length . bX4d54) (bytevector-ieee-single-ref . bX4d53) (bytevector-ieee-single-set! . bX4d52) (bytevector-ieee-single-native-set! . bX4d51) (bytevector-ieee-single-native-ref . bX4d50) (bytevector-ieee-double-set! . bX4d4f) (bytevector-ieee-double-ref . bX4d4e) (bytevector-ieee-double-native-set! . bX4d4d) (bytevector-ieee-double-native-ref . bX4d4c) (bytevector-fill! . bX4d4b) (bytevector-copy! . bX4d4a) (bytevector-copy . bX4d49) (bytevector->uint-list . bX4d48) (bytevector->u8-list . bX4d47) (bytevector->sint-list . bX4d46) (no-nans-violation? . bX495e) (no-infinities-violation? . bX4949) (make-no-nans-violation . bX495c) (make-no-infinities-violation . bX4947) (real->flonum . bX4d45) (flzero? . bX4d44) (fltruncate . bX4d43) (fltan . bX4d42) (flsqrt . bX4d41) (flsin . bX4d40) (flround . bX4d3f) (flpositive? . bX4d3e) (flonum? . bX4d3d) (flodd? . bX4d3c) (flnumerator . bX4d3b) (flnegative? . bX4d3a) (flnan? . bX4d39) (flmod0 . bX4d38) (flmod . bX4d37) (flmin . bX4d36) (flmax . bX4d35) (fllog . bX4d34) (flinteger? . bX4d33) (flinfinite? . bX4d32) (flfloor . bX4d31) (flfinite? . bX4d30) (flexpt . bX4d2f) (flexp . bX4d2e) (fleven? . bX4d2d) (fldiv0-and-mod0 . bX4d2c) (fldiv0 . bX4d2b) (fldiv-and-mod . bX4d2a) (fldiv . bX4d29) (fldenominator . bX4d28) (flcos . bX4d27) (flceiling . bX4d26) (flatan . bX4d25) (flasin . bX4d24) (flacos . bX4d23) (flabs . bX4d22) (fl>? . bX4d21) (fl>=? . bX4d20) (fl=? . bX4d1f) (fl<? . bX4d1e) (fl<=? . bX4d1d) (fl/ . bX4d1c) (fl- . bX4d1b) (fl+ . bX4d1a) (fl* . bX4d19) (fixnum->flonum . bX4d18) (fxzero? . bX4d17) (fxxor . bX4d16) (fxrotate-bit-field . bX4d15) (fxreverse-bit-field . bX4d14) (fxpositive? . bX4d13) (fxodd? . bX4d12) (fxnot . bX4d11) (fxnegative? . bX4d10) (fxmod0 . bX4d0f) (fxmod . bX4d0e) (fxmin . bX4d0d) (fxmax . bX4d0c) (fxlength . bX4d0b) (fxior . bX4d0a) (fxif . bX4d09) (fxfirst-bit-set . bX4d08) (fxeven? . bX4d07) (fxdiv0-and-mod0 . bX4d06) (fxdiv0 . bX4d05) (fxdiv-and-mod . bX4d04) (fxdiv . bX4d03) (fxcopy-bit-field . bX4d02) (fxcopy-bit . bX4d01) (fxbit-set? . bX4d00) (fxbit-field . bX4cff) (fxbit-count . bX4cfe) (fxarithmetic-shift-right . bX4cfd) (fxarithmetic-shift-left . bX4cfc) (fxarithmetic-shift . bX4cfb) (fxand . bX4cfa) (fx>? . bX4cf9) (fx>=? . bX4cf8) (fx=? . bX4cf7) (fx<? . bX4cf6) (fx<=? . bX4cf5) (fx-/carry . bX4cf4) (fx- . bX4cf3) (fx+/carry . bX4cf2) (fx+ . bX4cf1) (fx*/carry . bX4cf0) (fx* . bX4cef) (greatest-fixnum . bX4cee) (least-fixnum . bX4ced) (fixnum-width . bX4cec) (fixnum? . bX4ceb) (bitwise-rotate-bit-field . bX4cea) (bitwise-reverse-bit-field . bX4ce9) (bitwise-length . bX4ce8) (bitwise-if . bX4ce7) (bitwise-first-bit-set . bX4ce6) (bitwise-copy-bit-field . bX4ce5) (bitwise-copy-bit . bX4ce4) (bitwise-bit-set? . bX4ce3) (bitwise-bit-field . bX4ce2) (bitwise-bit-count . bX4ce1) (bitwise-xor . bX4ce0) (bitwise-ior . bX4cdf) (bitwise-and . bX4cde) (bitwise-not . bX4cdd) (bitwise-arithmetic-shift-right . bX4cdc) (bitwise-arithmetic-shift-left . bX4cdb) (bitwise-arithmetic-shift . bX4cda) (zero? . bX4cd9) (vector? . bX4cd8) (vector-set! . bX4cd7) (vector-ref . bX4cd6) (vector-map . bX4cd5) (vector-length . bX4cd4) (vector-for-each . bX4cd3) (vector-fill! . bX4cd2) (vector->list . bX4cd1) (vector . bX4cd0) (values . bX4ccf) (truncate . bX4cce) (tan . bX4ccd) (symbol? . bX4ccc) (symbol=? . bX4ccb) (symbol->string . bX4cca) (substring . bX4cc9) (string? . bX4cc8) (string>? . bX4cc7) (string>=? . bX4cc6) (string=? . bX4cc5) (string<? . bX4cc4) (string<=? . bX4cc3) (string-ref . bX4cc2) (string-length . bX4cc1) (string-for-each . bX4cc0) (string-copy . bX4cbf) (string-append . bX4cbe) (string->symbol . bX4cbd) (string->number . bX4cbc) (string->list . bX4cbb) (string . bX4cba) (sqrt . bX4cb9) (sin . bX4cb8) (round . bX4cb7) (reverse . bX4cb6) (real? . bX4cb5) (real-valued? . bX4cb4) (real-part . bX4cb3) (rationalize . bX4cb2) (rational? . bX4cb1) (rational-valued? . bX4cb0) (procedure? . bX4caf) (positive? . bX4cae) (pair? . bX4cad) (odd? . bX4cac) (numerator . bX4cab) (number? . bX4caa) (number->string . bX4ca9) (null? . bX4ca8) (not . bX4ca7) (negative? . bX4ca6) (nan? . bX4ca5) (min . bX4ca4) (max . bX4ca3) (map . bX4ca2) (make-vector . bX4ca1) (make-string . bX4ca0) (make-rectangular . bX4c9f) (make-polar . bX4c9e) (magnitude . bX4c9d) (log . bX4c9c) (list? . bX4c9b) (list-tail . bX4c9a) (list-ref . bX4c99) (list->vector . bX4c98) (list->string . bX4c97) (list . bX4c96) (length . bX4c95) (lcm . bX4c94) (integer? . bX4c93) (integer-valued? . bX4c92) (integer->char . bX4c91) (infinite? . bX4c90) (inexact? . bX4c8f) (inexact . bX4c8e) (imag-part . bX4c8d) (gcd . bX4c8c) (for-each . bX4c8b) (floor . bX4c8a) (finite? . bX4c89) (expt . bX4c88) (exp . bX4c87) (exact? . bX4c86) (exact-integer-sqrt . bX4c85) (exact . bX4c84) (even? . bX4c83) (error . bX4c82) (eqv? . bX4c81) (equal? . bX4c80) (eq? . bX4c7f) (dynamic-wind . bX4c7e) (div0-and-mod0 . bX4c7d) (mod0 . bX4c7c) (div0 . bX4c7b) (div-and-mod . bX4c7a) (mod . bX4c79) (div . bX4c78) (denominator . bX4c77) (cos . bX4c76) (cons . bX4c75) (complex? . bX4c74) (char? . bX4c73) (char>? . bX4c72) (char>=? . bX4c71) (char=? . bX4c70) (char<? . bX4c6f) (char<=? . bX4c6e) (char->integer . bX4c6d) (ceiling . bX4c6c) (call-with-values . bX4c6b) (call/cc . bX4c6a) (call-with-current-continuation . bX4c69) (cddddr . bX4c68) (cdddar . bX4c67) (cddadr . bX4c66) (cddaar . bX4c65) (cdaddr . bX4c64) (cdadar . bX4c63) (cdaadr . bX4c62) (cdaaar . bX4c61) (cadddr . bX4c60) (caddar . bX4c5f) (cadadr . bX4c5e) (cadaar . bX4c5d) (caaddr . bX4c5c) (caadar . bX4c5b) (caaadr . bX4c5a) (caaaar . bX4c59) (cdddr . bX4c58) (cddar . bX4c57) (cdadr . bX4c56) (cdaar . bX4c55) (caddr . bX4c54) (cadar . bX4c53) (caadr . bX4c52) (caaar . bX4c51) (cddr . bX4c50) (cdar . bX4c4f) (cadr . bX4c4e) (caar . bX4c4d) (cdr . bX4c4c) (car . bX4c4b) (boolean? . bX4c4a) (boolean=? . bX4c49) (atan . bX4c48) (assertion-violation . bX4c47) (assertion-error . bX2c2d) (asin . bX4c46) (apply . bX4c45) (append . bX4c44) (angle . bX4c43) (acos . bX4c42) (abs . bX4c41) (/ . bX4c40) (* . bX4c3f) (- . bX4c3e) (+ . bX4c3d) (>= . bX4c3c) (> . bX4c3b) (= . bX4c3a) (<= . bX4c39) (< . bX4c38) (library . bX4c37) (&no-nans . bX4c36) (&no-infinities . bX4c35) (&i/o-encoding . bX4c34) (&i/o-decoding . bX4c33) (&i/o-port . bX4c32) (&i/o-file-does-not-exist . bX4c31) (&i/o-file-already-exists . bX4c30) (&i/o-file-is-read-only . bX4c2f) (&i/o-file-protection . bX4c2e) (&i/o-filename . bX4c2d) (&i/o-invalid-position . bX4c2c) (&i/o-write . bX4c2b) (&i/o-read . bX4c2a) (&i/o . bX4c29) (&undefined . bX4c28) (&syntax . bX4c27) (&lexical . bX4c26) (&implementation-restriction . bX4c25) (&non-continuable . bX4c24) (&who . bX4c23) (&irritants . bX4c22) (&assertion . bX4c21) (&violation . bX4c20) (&error . bX4c1f) (&serious . bX4c1e) (&warning . bX4c1d) (&message . bX4c1c) (&condition . bX4c1b) (define-condition-type . bX4c1a) (define-enumeration . bX4c19) (define-record-type . bX4c18) (parent-rtd . bX4c17) (nongenerative . bX4c16) (opaque . bX4c15) (sealed . bX4c14) (protocol . bX4c13) (parent . bX4c12) (immutable . bX4c11) (mutable . bX4c10) (fields . bX4c0f) (error-handling-mode . bX4c0e) (file-options . bX4c0d) (buffer-mode . bX4c0c) (eol-style . bX4c0b) (guard . bX4c0a) (trace-define . bX4c09) (trace-lambda . bX4c08) (unsyntax-splicing . bX4c07) (unsyntax . bX4c06) (unquote-splicing . bX4c05) (unquote . bX4c04) (_ . bX4c03) (else . bX4c02) (=> . bX4c01) (... . bX4c00) (assert . bX4bff) (endianness . bX4bfe) (delay . bX4bfd) (time . bX4bfc) (do . bX4bfb) (cond . bX4bfa) (let* . bX4bf9) (let*-values . bX4bf8) (let-values . bX4bf7) (identifier-syntax . bX4bf6) (with-syntax . bX4bf5) (quasisyntax . bX4bf4) (quasiquote . bX4bf3) (syntax-rules . bX4bf2) (include . bX4bf1) (define-struct . bX4bf0) (record-constructor-descriptor . bX4bef) (record-type-descriptor . bX4bee) (case . bX4bed) (parameterize . bX4bec) (unless . bX4beb) (when . bX4bea) (or . bX4be9) (and . bX4be8) (if . bX4be7) (let . bX4be6) (letrec* . bX4be5) (letrec . bX4be4) (type-descriptor . bX4be3) (case-lambda . bX4be2) (lambda . bX4be1) (syntax . bX4be0) (syntax-case . bX4bdf) (quote . bX4bde) (foreign-call . bX4bdd) (letrec-syntax . bX4bdc) (let-syntax . bX4bdb) (set! . bX4bda) (import . bX4bd9) (begin . bX4bd8) (module . bX4bd7) (define-syntax . bX4bd6) (define . bX4bd5)) '((bX4962 core-prim . &no-nans-rcd) (bX4960 core-prim . &no-nans-rtd) (bX494d core-prim . &no-infinities-rcd) (bX494b core-prim . &no-infinities-rtd) (bX4938 core-prim . &i/o-encoding-rcd) (bX4936 core-prim . &i/o-encoding-rtd) (bX491d core-prim . &i/o-decoding-rcd) (bX491b core-prim . &i/o-decoding-rtd) (bX4908 core-prim . &i/o-port-rcd) (bX4906 core-prim . &i/o-port-rtd) (bX48ed core-prim . &i/o-file-does-not-exist-rcd) (bX48eb core-prim . &i/o-file-does-not-exist-rtd) (bX48d8 core-prim . &i/o-file-already-exists-rcd) (bX48d6 core-prim . &i/o-file-already-exists-rtd) (bX48c3 core-prim . &i/o-file-is-read-only-rcd) (bX48c1 core-prim . &i/o-file-is-read-only-rtd) (bX48ae core-prim . &i/o-file-protection-rcd) (bX48ac core-prim . &i/o-file-protection-rtd) (bX4899 core-prim . &i/o-filename-rcd) (bX4897 core-prim . &i/o-filename-rtd) (bX487e core-prim . &i/o-invalid-position-rcd) (bX487c core-prim . &i/o-invalid-position-rtd) (bX4863 core-prim . &i/o-write-rcd) (bX4861 core-prim . &i/o-write-rtd) (bX484e core-prim . &i/o-read-rcd) (bX484c core-prim . &i/o-read-rtd) (bX4839 core-prim . &i/o-rcd) (bX4837 core-prim . &i/o-rtd) (bX4824 core-prim . &undefined-rcd) (bX4822 core-prim . &undefined-rtd) (bX480f core-prim . &syntax-rcd) (bX480d core-prim . &syntax-rtd) (bX47ee core-prim . &lexical-rcd) (bX47ec core-prim . &lexical-rtd) (bX47d9 core-prim . &implementation-restriction-rcd) (bX47d7 core-prim . &implementation-restriction-rtd) (bX47c4 core-prim . &non-continuable-rcd) (bX47c2 core-prim . &non-continuable-rtd) (bX47af core-prim . &who-rcd) (bX47ad core-prim . &who-rtd) (bX4794 core-prim . &irritants-rcd) (bX4792 core-prim . &irritants-rtd) (bX4779 core-prim . &assertion-rcd) (bX4777 core-prim . &assertion-rtd) (bX4764 core-prim . &violation-rcd) (bX4762 core-prim . &violation-rtd) (bX474f core-prim . &error-rcd) (bX474d core-prim . &error-rtd) (bX473a core-prim . &serious-rcd) (bX4738 core-prim . &serious-rtd) (bX4725 core-prim . &warning-rcd) (bX4723 core-prim . &warning-rtd) (bX4710 core-prim . &message-rcd) (bX470e core-prim . &message-rtd) (bX46b1 core-prim . &condition-rcd) (bX46af core-prim . &condition-rtd) (bX2c2f core-prim . syntax-error) (bX2b53 core-prim . syntax-dispatch) (bX4efd core-prim . pretty-print) (bX4efc core-prim . eval-core) (bX4efb core-prim . set-symbol-value!) (bX4efa core-prim . symbol-value) (bX4ef9 core-prim . gensym) (bX4ef8 core-prim . void) (bX4a73 core-prim . load) (bX2c41 core-prim . interaction-environment) (bX4ef7 core-prim . char-ready?) (bX4ef6 core-prim . regexp?) (bX4ef5 core-prim . read-line) (bX4ef4 core-prim . gensym-prefix-set!) (bX4ef3 core-prim . ungensym) (bX4ef2 core-prim . alist->eq-hash-table) (bX4ef1 core-prim . assoc-ref) (bX4ef0 core-prim . print) (bX4eef core-prim . format) (bX4eee core-prim . host-os) (bX258c core-prim . library-path) (bX4eed core-prim . standard-library-path) (bX4eec core-prim . file-newer?) (bX4eeb core-prim . stat-mtime) (bX4eea core-prim . write-to-file) (bX4ee9 core-prim . file->list) (bX4ee8 core-prim . file->string) (bX4ee7 core-prim . digit->integer) (bX4ee6 core-prim . call-with-string-input-port) (bX4ee5 core-prim . call-with-string-io) (bX4ee4 core-prim . string-split) (bX4ee3 core-prim . bytevector-for-each) (bX4ee2 core-prim . string->regexp) (bX4ee1 core-prim . rxmatch) (bX4ee0 core-prim . regexp-replace-all) (bX4edf core-prim . hashtable-for-each) (bX2377 core-prim . mosh-cache-dir) (bX4ede core-prim . call-process) (bX4edd core-prim . local-tz-offset) (bX4edc core-prim . microseconds) (bX4edb core-prim . directory-list) (bX4eda core-prim . set-current-directory!) (bX4ed9 core-prim . expand-path) (bX4ed8 core-prim . current-directory) (bX4ed7 core-prim . %spawn) (bX4ed6 core-prim . %waitpid) (bX4ed5 core-prim . simple-struct-name) (bX4ed4 core-prim . simple-struct-set!) (bX4ed3 core-prim . simple-struct-ref) (bX4ed2 core-prim . make-simple-struct) (bX4ed1 core-prim . simple-struct?) (bX4ed0 core-prim . pointer-ref-c-int64) (bX4ecf core-prim . pointer-ref-c-int32) (bX4ece core-prim . pointer-ref-c-int16) (bX4ecd core-prim . pointer-ref-c-int8) (bX4ecc core-prim . pointer-ref-c-uint64) (bX4ecb core-prim . pointer-ref-c-uint32) (bX4eca core-prim . pointer-ref-c-uint16) (bX4ec9 core-prim . pointer-ref-c-uint8) (bX4ec8 core-prim . pointer-set-c-uint64!) (bX4ec7 core-prim . pointer-set-c-uint32!) (bX4ec6 core-prim . pointer-set-c-uint16!) (bX4ec5 core-prim . pointer-set-c-uint8!) (bX4ec4 core-prim . pointer-set-c-int64!) (bX4ec3 core-prim . pointer-set-c-int32!) (bX4ec2 core-prim . pointer-set-c-int16!) (bX4ec1 core-prim . pointer-set-c-int8!) (bX4ec0 core-prim . pointer-set-c-pointer!) (bX4ebf core-prim . pointer-set-c-double!) (bX4ebe core-prim . pointer-set-c-float!) (bX4ebd core-prim . pointer-set-c-long-long!) (bX4ebc core-prim . pointer-set-c-long!) (bX4ebb core-prim . pointer-set-c-int!) (bX4eba core-prim . pointer-set-c-short!) (bX4eb9 core-prim . pointer-set-c-char!) (bX4eb8 core-prim . pointer-ref-c-pointer) (bX4eb7 core-prim . pointer-ref-c-double) (bX4eb6 core-prim . pointer-ref-c-float) (bX4eb5 core-prim . pointer-ref-c-unsigned-long-long) (bX4eb4 core-prim . pointer-ref-c-signed-long-long) (bX4eb3 core-prim . pointer-ref-c-unsigned-long) (bX4eb2 core-prim . pointer-ref-c-signed-long) (bX4eb1 core-prim . pointer-ref-c-unsigned-int) (bX4eb0 core-prim . pointer-ref-c-signed-int) (bX4eaf core-prim . pointer-ref-c-unsigned-short) (bX4eae core-prim . pointer-ref-c-signed-short) (bX4ead core-prim . pointer-ref-c-unsigned-char) (bX4eac core-prim . pointer-ref-c-signed-char) (bX4eab core-prim . pointer->integer) (bX4eaa core-prim . integer->pointer) (bX4ea9 core-prim . pointer?) (bX4ea8 core-prim . shared-errno) (bX4ea7 core-prim . %ffi-make-c-callback) (bX4ea6 core-prim . %ffi-free) (bX4ea5 core-prim . %ffi-malloc) (bX4ea4 core-prim . %ffi-supported?) (bX4ea3 core-prim . %ffi-pointer->string) (bX4ea2 core-prim . %ffi-call->string-or-zero) (bX4ea1 core-prim . %ffi-call->double) (bX4ea0 core-prim . %ffi-call->void*) (bX4e9f core-prim . %ffi-call->void) (bX4e9e core-prim . %ffi-call->char) (bX4e9d core-prim . %ffi-call->int) (bX4e9c core-prim . %ffi-lookup) (bX4e9b core-prim . %ffi-open) (bX4e9a core-prim . %fork) (bX4e99 core-prim . %pipe) (bX4e98 core-prim . p) (bX4e97 core-prim . open-output-string) (bX4e96 core-prim . get-output-string) (bX4e95 core-prim . file-stat-ctime) (bX4e94 core-prim . file-stat-atime) (bX4e93 core-prim . file-stat-mtime) (bX4e92 core-prim . file-size-in-bytes) (bX4e91 core-prim . file-writable?) (bX4e90 core-prim . file-executable?) (bX4e8f core-prim . file-readable?) (bX4e8e core-prim . file-regular?) (bX4e8d core-prim . file-symbolic-link?) (bX4e8c core-prim . file-directory?) (bX4e8b core-prim . create-symbolic-link) (bX4e8a core-prim . rename-file) (bX4e89 core-prim . delete-directory) (bX4e88 core-prim . create-directory) (bX4e87 core-prim . create-mosh-cache-dir) (bX4e86 core-prim . get-environment-variables) (bX4e85 core-prim . current-exception-handler) (bX4e84 core-prim . get-environment-variable) (bX4e83 core-prim . join-wraps) (bX4e82 core-prim . id->real-label) (bX4e81 core-prim . same-marks?) (bX4e80 core-prim . same-marks*?) (bX4e7f core-prim . get-timeofday) (bX4e7e core-prim . get-command-line) (bX4e7d core-prim . sys-display) (bX4e7c core-prim . whereis) (bX4e7b core-prim . register) (bX4e7a core-prim . vm-join!) (bX4e79 core-prim . vm-set-value!) (bX4e78 core-prim . vm?) (bX4e77 core-prim . main-vm?) (bX4e76 core-prim . vm-eval) (bX4e75 core-prim . vm-self) (bX4e74 core-prim . vm-start!) (bX4e73 core-prim . make-vm) (bX4e72 core-prim . mutex-try-lock!) (bX4e71 core-prim . mutex-unlock!) (bX4e70 core-prim . mutex-lock!) (bX4e6f core-prim . mutex?) (bX4e6e core-prim . make-mutex) (bX4e6d core-prim . condition-variable-notify-all!) (bX4e6c core-prim . condition-variable-notify!) (bX4e6b core-prim . condition-variable-wait!) (bX4e6a core-prim . make-condition-variable) (bX4e69 core-prim . mosh-executable-path) (bX4e68 core-prim . make-file-options) (bX4e67 core-prim . source-info) (bX4e66 core-prim . make-compiler-instruction) (bX4e65 core-prim . make-instruction) (bX4e64 core-prim . set-source-info!) (bX4e63 core-prim . bignum?) (bX4e62 core-prim . fast-equal?) (bX4e61 core-prim . fasl-read) (bX4e60 core-prim . fasl-write) (bX4e5f core-prim . time-usage) (bX4e5e core-prim . os-constant) (bX4e5d core-prim . disasm) (bX2375 core-prim . make-parameter) (bX4e5c core-prim . socket-port) (bX4e5b core-prim . socket-shutdown) (bX4e5a core-prim . socket-close) (bX4e59 core-prim . socket-send) (bX4e58 core-prim . socket-recv!) (bX4e57 core-prim . socket-recv) (bX4e56 core-prim . make-server-socket) (bX4e55 core-prim . make-client-socket) (bX4e54 core-prim . socket-accept) (bX4e53 core-prim . socket?) (bX4e52 core-prim . string-upcase) (bX4e51 core-prim . string-titlecase) (bX4e50 core-prim . string-normalize-nfkd) (bX4e4f core-prim . string-normalize-nfkc) (bX4e4e core-prim . string-normalize-nfd) (bX4e4d core-prim . string-normalize-nfc) (bX4e4c core-prim . string-foldcase) (bX4e4b core-prim . string-downcase) (bX4e4a core-prim . string-ci>?) (bX4e49 core-prim . string-ci>=?) (bX4e48 core-prim . string-ci=?) (bX4e47 core-prim . string-ci<?) (bX4e46 core-prim . string-ci<=?) (bX4e45 core-prim . char-whitespace?) (bX4e44 core-prim . char-upper-case?) (bX4e43 core-prim . char-title-case?) (bX4e42 core-prim . char-numeric?) (bX4e41 core-prim . char-lower-case?) (bX4e40 core-prim . char-general-category) (bX4e3f core-prim . char-upcase) (bX4e3e core-prim . char-titlecase) (bX4e3d core-prim . char-foldcase) (bX4e3c core-prim . char-downcase) (bX4e3b core-prim . char-ci>?) (bX4e3a core-prim . char-ci>=?) (bX4e39 core-prim . char-ci=?) (bX4e38 core-prim . char-ci<?) (bX4e37 core-prim . char-ci<=?) (bX4e36 core-prim . char-alphabetic?) (bX297e core-prim . make-variable-transformer) (bX2c35 core-prim . identifier?) (bX2c21 core-prim . generate-temporaries) (bX2c23 core-prim . free-identifier=?) (bX2c39 core-prim . syntax->datum) (bX2c37 core-prim . datum->syntax) (bX2c25 core-prim . bound-identifier=?) (bX4e35 core-prim . record-type-descriptor?) (bX4e34 core-prim . record-predicate) (bX4e33 core-prim . record-mutator) (bX4e32 core-prim . record-constructor) (bX4e31 core-prim . record-accessor) (bX4e30 core-prim . make-record-type-descriptor) (bX4e2f core-prim . make-record-constructor-descriptor) (bX4e2e core-prim . record?) (bX4e2d core-prim . record-type-uid) (bX4e2c core-prim . record-type-sealed?) (bX4e2b core-prim . record-type-parent) (bX4e2a core-prim . record-type-opaque?) (bX4e29 core-prim . record-type-name) (bX4e28 core-prim . record-type-generative?) (bX4e27 core-prim . record-type-field-names) (bX4e26 core-prim . record-rtd) (bX4e25 core-prim . record-field-mutable?) (bX4e24 core-prim . delete-file) (bX4e23 core-prim . file-exists?) (bX4e22 core-prim . vector-sort!) (bX4e21 core-prim . vector-sort) (bX4e20 core-prim . list-sort) (bX4e1f core-prim . symbol-hash) (bX4e1e core-prim . string-ci-hash) (bX4e1d core-prim . string-hash) (bX4e1c core-prim . equal-hash) (bX4e1b core-prim . hashtable-equivalence-function) (bX4e1a core-prim . make-hashtable) (bX4e19 core-prim . hashtable-hash-function) (bX4e18 core-prim . make-eqv-hashtable) (bX4e17 core-prim . make-eq-hashtable) (bX4e16 core-prim . hashtable?) (bX4e15 core-prim . hashtable-update!) (bX4e14 core-prim . hashtable-size) (bX4e13 core-prim . hashtable-set!) (bX4e12 core-prim . hashtable-ref) (bX4e11 core-prim . hashtable-mutable?) (bX4e10 core-prim . hashtable-keys) (bX4e0f core-prim . hashtable-entries) (bX4e0e core-prim . hashtable-delete!) (bX4e0d core-prim . hashtable-copy) (bX4e0c core-prim . hashtable-contains?) (bX4e0b core-prim . hashtable-clear!) (bX4e0a core-prim . call-with-output-file) (bX4e09 core-prim . call-with-input-file) (bX4e08 core-prim . write-char) (bX4e07 core-prim . write) (bX4e06 core-prim . with-output-to-file) (bX4e05 core-prim . with-input-from-file) (bX4e04 core-prim . read-char) (bX4e03 core-prim . read) (bX4e02 core-prim . peek-char) (bX4e01 core-prim . open-output-file) (bX4e00 core-prim . open-input-file) (bX4dff core-prim . newline) (bX4dfe core-prim . display) (bX4dfd core-prim . close-output-port) (bX4dfc core-prim . close-input-port) (bX4dfb core-prim . eof-object?) (bX4dfa core-prim . eof-object) (bX4df9 core-prim . current-error-port) (bX4df8 core-prim . current-output-port) (bX4df7 core-prim . current-input-port) (bX4df6 core-prim . output-port?) (bX4df5 core-prim . input-port?) (bX4df4 core-prim . utf-8-codec) (bX4df3 core-prim . utf-16-codec) (bX4df2 core-prim . transcoder-error-handling-mode) (bX4df1 core-prim . transcoder-eol-style) (bX4df0 core-prim . transcoder-codec) (bX4def core-prim . transcoded-port) (bX4dee core-prim . textual-port?) (bX4ded core-prim . string->bytevector) (bX4dec core-prim . standard-output-port) (bX4deb core-prim . standard-input-port) (bX4dea core-prim . standard-error-port) (bX4de9 core-prim . set-port-position!) (bX4de8 core-prim . put-u8) (bX4de7 core-prim . put-string) (bX4de6 core-prim . put-datum) (bX4de5 core-prim . put-char) (bX4de4 core-prim . put-bytevector) (bX4de3 core-prim . port?) (bX4de2 core-prim . port-transcoder) (bX4de1 core-prim . port-position) (bX4de0 core-prim . port-has-set-port-position!?) (bX4ddf core-prim . port-has-port-position?) (bX4dde core-prim . port-eof?) (bX4ddd core-prim . output-port-buffer-mode) (bX4ddc core-prim . open-string-output-port) (bX4ddb core-prim . open-string-input-port) (bX4dda core-prim . open-file-output-port) (bX4dd9 core-prim . open-file-input/output-port) (bX4dd8 core-prim . open-file-input-port) (bX4dd7 core-prim . open-bytevector-output-port) (bX4dd6 core-prim . open-bytevector-input-port) (bX4dd5 core-prim . native-transcoder) (bX4dd4 core-prim . native-eol-style) (bX4dd3 core-prim . make-transcoder) (bX4dd2 core-prim . latin-1-codec) (bX485d core-prim . make-i/o-write-error) (bX4848 core-prim . make-i/o-read-error) (bX48fe core-prim . make-i/o-port-error) (bX4874 core-prim . make-i/o-invalid-position-error) (bX488f core-prim . make-i/o-filename-error) (bX48a8 core-prim . make-i/o-file-protection-error) (bX48bd core-prim . make-i/o-file-is-read-only-error) (bX48e7 core-prim . make-i/o-file-does-not-exist-error) (bX48d2 core-prim . make-i/o-file-already-exists-error) (bX4833 core-prim . make-i/o-error) (bX492e core-prim . make-i/o-encoding-error) (bX4917 core-prim . make-i/o-decoding-error) (bX4dd1 core-prim . make-custom-textual-output-port) (bX4dd0 core-prim . make-custom-textual-input/output-port) (bX4dcf core-prim . make-custom-textual-input-port) (bX4dce core-prim . make-custom-binary-output-port) (bX4dcd core-prim . make-custom-binary-input/output-port) (bX4dcc core-prim . make-custom-binary-input-port) (bX4dcb core-prim . make-bytevector) (bX4dca core-prim . lookahead-u8) (bX4dc9 core-prim . lookahead-char) (bX485f core-prim . i/o-write-error?) (bX484a core-prim . i/o-read-error?) (bX4902 core-prim . i/o-port-error?) (bX4878 core-prim . i/o-invalid-position-error?) (bX4893 core-prim . i/o-filename-error?) (bX48aa core-prim . i/o-file-protection-error?) (bX48bf core-prim . i/o-file-is-read-only-error?) (bX48e9 core-prim . i/o-file-does-not-exist-error?) (bX48d4 core-prim . i/o-file-already-exists-error?) (bX4835 core-prim . i/o-error?) (bX487a core-prim . i/o-error-position) (bX4904 core-prim . i/o-error-port) (bX4895 core-prim . i/o-error-filename) (bX4932 core-prim . i/o-encoding-error?) (bX4934 core-prim . i/o-encoding-error-char) (bX4919 core-prim . i/o-decoding-error?) (bX4dc8 core-prim . get-u8) (bX4dc7 core-prim . get-string-n!) (bX4dc6 core-prim . get-string-n) (bX4dc5 core-prim . get-string-all) (bX4dc4 core-prim . get-line) (bX4dc3 core-prim . get-datum) (bX4dc2 core-prim . get-char) (bX4dc1 core-prim . get-bytevector-some) (bX4dc0 core-prim . get-bytevector-n!) (bX4dbf core-prim . get-bytevector-n) (bX4dbe core-prim . get-bytevector-all) (bX4dbd core-prim . flush-output-port) (bX4dbc core-prim . close-port) (bX2c0f core-prim . scheme-report-environment) (bX4dbb core-prim . quotient) (bX2c0d core-prim . null-environment) (bX4dba core-prim . remainder) (bX4db9 core-prim . modulo) (bX4db8 core-prim . inexact->exact) (bX4db7 core-prim . force) (bX4db6 core-prim . exact->inexact) (bX4db5 core-prim . make-promise) (bX4db4 core-prim . exit) (bX4a6d core-prim . command-line) (bX4db3 core-prim . string-fill!) (bX4db2 core-prim . string-set!) (bX4db1 core-prim . set-cdr!) (bX4db0 core-prim . set-car!) (bX4daf core-prim . remove) (bX4dae core-prim . remv) (bX4dad core-prim . remp) (bX4dac core-prim . remq) (bX4dab core-prim . partition) (bX4daa core-prim . memv) (bX4da9 core-prim . memq) (bX4da8 core-prim . memp) (bX4da7 core-prim . member) (bX4da6 core-prim . exists) (bX4da5 core-prim . for-all) (bX4da4 core-prim . fold-right) (bX4da3 core-prim . fold-left) (bX4da2 core-prim . find) (bX4da1 core-prim . filter) (bX4da0 core-prim . cons*) (bX4d9f core-prim . assv) (bX4d9e core-prim . assq) (bX4d9d core-prim . assp) (bX4d9c core-prim . assoc) (bX4d9b core-prim . call-with-string-output-port) (bX4d9a core-prim . call-with-port) (bX4d99 core-prim . call-with-bytevector-output-port) (bX4d98 core-prim . bytevector->string) (bX4d97 core-prim . buffer-mode?) (bX4d96 core-prim . binary-port?) (bX4d95 core-prim . with-exception-handler) (bX4d94 core-prim . raise-continuable) (bX4d93 core-prim . raise) (bX2c13 core-prim . eval) (bX2c0b core-prim . environment) (bX4d92 core-prim . make-enumeration) (bX4d91 core-prim . enum-set=?) (bX4d90 core-prim . enum-set-universe) (bX4d8f core-prim . enum-set-union) (bX4d8e core-prim . enum-set-subset?) (bX4d8d core-prim . enum-set-projection) (bX4d8c core-prim . enum-set-member?) (bX4d8b core-prim . enum-set-intersection) (bX4d8a core-prim . enum-set-indexer) (bX4d89 core-prim . enum-set-difference) (bX4d88 core-prim . enum-set-constructor) (bX4d87 core-prim . enum-set-complement) (bX4d86 core-prim . enum-set->list) (bX47a9 core-prim . who-condition?) (bX4721 core-prim . warning?) (bX4760 core-prim . violation?) (bX4820 core-prim . undefined-violation?) (bX4807 core-prim . syntax-violation?) (bX480b core-prim . syntax-violation-subform) (bX4809 core-prim . syntax-violation-form) (bX2c33 core-prim . syntax-violation) (bX4d85 core-prim . simple-conditions) (bX4736 core-prim . serious-condition?) (bX47c0 core-prim . non-continuable-violation?) (bX470a core-prim . message-condition?) (bX47a5 core-prim . make-who-condition) (bX471f core-prim . make-warning) (bX475e core-prim . make-violation) (bX481e core-prim . make-undefined-violation) (bX4801 core-prim . make-syntax-violation) (bX4734 core-prim . make-serious-condition) (bX47be core-prim . make-non-continuable-violation) (bX4706 core-prim . make-message-condition) (bX47e8 core-prim . make-lexical-violation) (bX478a core-prim . make-irritants-condition) (bX47d3 core-prim . make-implementation-restriction-violation) (bX4749 core-prim . make-error) (bX4773 core-prim . make-assertion-violation) (bX47ea core-prim . lexical-violation?) (bX478e core-prim . irritants-condition?) (bX47d5 core-prim . implementation-restriction-violation?) (bX474b core-prim . error?) (bX47ab core-prim . condition-who) (bX4d84 core-prim . condition-predicate) (bX470c core-prim . condition-message) (bX4790 core-prim . condition-irritants) (bX4d83 core-prim . condition-accessor) (bX4d82 core-prim . condition) (bX4775 core-prim . assertion-violation?) (bX4d81 core-prim . condition?) (bX4d80 core-prim . utf32->string) (bX4d7f core-prim . utf16->string) (bX4d7e core-prim . utf8->string) (bX4d7d core-prim . uint-list->bytevector) (bX4d7c core-prim . u8-list->bytevector) (bX4d7b core-prim . string->utf8) (bX4d7a core-prim . string->utf32) (bX4d79 core-prim . string->utf16) (bX4d78 core-prim . sint-list->bytevector) (bX4d77 core-prim . native-endianness) (bX4d76 core-prim . bytevector?) (bX4d75 core-prim . bytevector=?) (bX4d74 core-prim . bytevector-uint-set!) (bX4d73 core-prim . bytevector-uint-ref) (bX4d72 core-prim . bytevector-u8-set!) (bX4d71 core-prim . bytevector-u8-ref) (bX4d70 core-prim . bytevector-u64-set!) (bX4d6f core-prim . bytevector-u64-ref) (bX4d6e core-prim . bytevector-u64-native-set!) (bX4d6d core-prim . bytevector-u64-native-ref) (bX4d6c core-prim . bytevector-u32-set!) (bX4d6b core-prim . bytevector-u32-ref) (bX4d6a core-prim . bytevector-u32-native-set!) (bX4d69 core-prim . bytevector-u32-native-ref) (bX4d68 core-prim . bytevector-u16-set!) (bX4d67 core-prim . bytevector-u16-ref) (bX4d66 core-prim . bytevector-u16-native-set!) (bX4d65 core-prim . bytevector-u16-native-ref) (bX4d64 core-prim . bytevector-sint-set!) (bX4d63 core-prim . bytevector-sint-ref) (bX4d62 core-prim . bytevector-s8-set!) (bX4d61 core-prim . bytevector-s8-ref) (bX4d60 core-prim . bytevector-s64-set!) (bX4d5f core-prim . bytevector-s64-ref) (bX4d5e core-prim . bytevector-s64-native-set!) (bX4d5d core-prim . bytevector-s64-native-ref) (bX4d5c core-prim . bytevector-s32-set!) (bX4d5b core-prim . bytevector-s32-ref) (bX4d5a core-prim . bytevector-s32-native-set!) (bX4d59 core-prim . bytevector-s32-native-ref) (bX4d58 core-prim . bytevector-s16-set!) (bX4d57 core-prim . bytevector-s16-ref) (bX4d56 core-prim . bytevector-s16-native-set!) (bX4d55 core-prim . bytevector-s16-native-ref) (bX4d54 core-prim . bytevector-length) (bX4d53 core-prim . bytevector-ieee-single-ref) (bX4d52 core-prim . bytevector-ieee-single-set!) (bX4d51 core-prim . bytevector-ieee-single-native-set!) (bX4d50 core-prim . bytevector-ieee-single-native-ref) (bX4d4f core-prim . bytevector-ieee-double-set!) (bX4d4e core-prim . bytevector-ieee-double-ref) (bX4d4d core-prim . bytevector-ieee-double-native-set!) (bX4d4c core-prim . bytevector-ieee-double-native-ref) (bX4d4b core-prim . bytevector-fill!) (bX4d4a core-prim . bytevector-copy!) (bX4d49 core-prim . bytevector-copy) (bX4d48 core-prim . bytevector->uint-list) (bX4d47 core-prim . bytevector->u8-list) (bX4d46 core-prim . bytevector->sint-list) (bX495e core-prim . no-nans-violation?) (bX4949 core-prim . no-infinities-violation?) (bX495c core-prim . make-no-nans-violation) (bX4947 core-prim . make-no-infinities-violation) (bX4d45 core-prim . real->flonum) (bX4d44 core-prim . flzero?) (bX4d43 core-prim . fltruncate) (bX4d42 core-prim . fltan) (bX4d41 core-prim . flsqrt) (bX4d40 core-prim . flsin) (bX4d3f core-prim . flround) (bX4d3e core-prim . flpositive?) (bX4d3d core-prim . flonum?) (bX4d3c core-prim . flodd?) (bX4d3b core-prim . flnumerator) (bX4d3a core-prim . flnegative?) (bX4d39 core-prim . flnan?) (bX4d38 core-prim . flmod0) (bX4d37 core-prim . flmod) (bX4d36 core-prim . flmin) (bX4d35 core-prim . flmax) (bX4d34 core-prim . fllog) (bX4d33 core-prim . flinteger?) (bX4d32 core-prim . flinfinite?) (bX4d31 core-prim . flfloor) (bX4d30 core-prim . flfinite?) (bX4d2f core-prim . flexpt) (bX4d2e core-prim . flexp) (bX4d2d core-prim . fleven?) (bX4d2c core-prim . fldiv0-and-mod0) (bX4d2b core-prim . fldiv0) (bX4d2a core-prim . fldiv-and-mod) (bX4d29 core-prim . fldiv) (bX4d28 core-prim . fldenominator) (bX4d27 core-prim . flcos) (bX4d26 core-prim . flceiling) (bX4d25 core-prim . flatan) (bX4d24 core-prim . flasin) (bX4d23 core-prim . flacos) (bX4d22 core-prim . flabs) (bX4d21 core-prim . fl>?) (bX4d20 core-prim . fl>=?) (bX4d1f core-prim . fl=?) (bX4d1e core-prim . fl<?) (bX4d1d core-prim . fl<=?) (bX4d1c core-prim . fl/) (bX4d1b core-prim . fl-) (bX4d1a core-prim . fl+) (bX4d19 core-prim . fl*) (bX4d18 core-prim . fixnum->flonum) (bX4d17 core-prim . fxzero?) (bX4d16 core-prim . fxxor) (bX4d15 core-prim . fxrotate-bit-field) (bX4d14 core-prim . fxreverse-bit-field) (bX4d13 core-prim . fxpositive?) (bX4d12 core-prim . fxodd?) (bX4d11 core-prim . fxnot) (bX4d10 core-prim . fxnegative?) (bX4d0f core-prim . fxmod0) (bX4d0e core-prim . fxmod) (bX4d0d core-prim . fxmin) (bX4d0c core-prim . fxmax) (bX4d0b core-prim . fxlength) (bX4d0a core-prim . fxior) (bX4d09 core-prim . fxif) (bX4d08 core-prim . fxfirst-bit-set) (bX4d07 core-prim . fxeven?) (bX4d06 core-prim . fxdiv0-and-mod0) (bX4d05 core-prim . fxdiv0) (bX4d04 core-prim . fxdiv-and-mod) (bX4d03 core-prim . fxdiv) (bX4d02 core-prim . fxcopy-bit-field) (bX4d01 core-prim . fxcopy-bit) (bX4d00 core-prim . fxbit-set?) (bX4cff core-prim . fxbit-field) (bX4cfe core-prim . fxbit-count) (bX4cfd core-prim . fxarithmetic-shift-right) (bX4cfc core-prim . fxarithmetic-shift-left) (bX4cfb core-prim . fxarithmetic-shift) (bX4cfa core-prim . fxand) (bX4cf9 core-prim . fx>?) (bX4cf8 core-prim . fx>=?) (bX4cf7 core-prim . fx=?) (bX4cf6 core-prim . fx<?) (bX4cf5 core-prim . fx<=?) (bX4cf4 core-prim . fx-/carry) (bX4cf3 core-prim . fx-) (bX4cf2 core-prim . fx+/carry) (bX4cf1 core-prim . fx+) (bX4cf0 core-prim . fx*/carry) (bX4cef core-prim . fx*) (bX4cee core-prim . greatest-fixnum) (bX4ced core-prim . least-fixnum) (bX4cec core-prim . fixnum-width) (bX4ceb core-prim . fixnum?) (bX4cea core-prim . bitwise-rotate-bit-field) (bX4ce9 core-prim . bitwise-reverse-bit-field) (bX4ce8 core-prim . bitwise-length) (bX4ce7 core-prim . bitwise-if) (bX4ce6 core-prim . bitwise-first-bit-set) (bX4ce5 core-prim . bitwise-copy-bit-field) (bX4ce4 core-prim . bitwise-copy-bit) (bX4ce3 core-prim . bitwise-bit-set?) (bX4ce2 core-prim . bitwise-bit-field) (bX4ce1 core-prim . bitwise-bit-count) (bX4ce0 core-prim . bitwise-xor) (bX4cdf core-prim . bitwise-ior) (bX4cde core-prim . bitwise-and) (bX4cdd core-prim . bitwise-not) (bX4cdc core-prim . bitwise-arithmetic-shift-right) (bX4cdb core-prim . bitwise-arithmetic-shift-left) (bX4cda core-prim . bitwise-arithmetic-shift) (bX4cd9 core-prim . zero?) (bX4cd8 core-prim . vector?) (bX4cd7 core-prim . vector-set!) (bX4cd6 core-prim . vector-ref) (bX4cd5 core-prim . vector-map) (bX4cd4 core-prim . vector-length) (bX4cd3 core-prim . vector-for-each) (bX4cd2 core-prim . vector-fill!) (bX4cd1 core-prim . vector->list) (bX4cd0 core-prim . vector) (bX4ccf core-prim . values) (bX4cce core-prim . truncate) (bX4ccd core-prim . tan) (bX4ccc core-prim . symbol?) (bX4ccb core-prim . symbol=?) (bX4cca core-prim . symbol->string) (bX4cc9 core-prim . substring) (bX4cc8 core-prim . string?) (bX4cc7 core-prim . string>?) (bX4cc6 core-prim . string>=?) (bX4cc5 core-prim . string=?) (bX4cc4 core-prim . string<?) (bX4cc3 core-prim . string<=?) (bX4cc2 core-prim . string-ref) (bX4cc1 core-prim . string-length) (bX4cc0 core-prim . string-for-each) (bX4cbf core-prim . string-copy) (bX4cbe core-prim . string-append) (bX4cbd core-prim . string->symbol) (bX4cbc core-prim . string->number) (bX4cbb core-prim . string->list) (bX4cba core-prim . string) (bX4cb9 core-prim . sqrt) (bX4cb8 core-prim . sin) (bX4cb7 core-prim . round) (bX4cb6 core-prim . reverse) (bX4cb5 core-prim . real?) (bX4cb4 core-prim . real-valued?) (bX4cb3 core-prim . real-part) (bX4cb2 core-prim . rationalize) (bX4cb1 core-prim . rational?) (bX4cb0 core-prim . rational-valued?) (bX4caf core-prim . procedure?) (bX4cae core-prim . positive?) (bX4cad core-prim . pair?) (bX4cac core-prim . odd?) (bX4cab core-prim . numerator) (bX4caa core-prim . number?) (bX4ca9 core-prim . number->string) (bX4ca8 core-prim . null?) (bX4ca7 core-prim . not) (bX4ca6 core-prim . negative?) (bX4ca5 core-prim . nan?) (bX4ca4 core-prim . min) (bX4ca3 core-prim . max) (bX4ca2 core-prim . map) (bX4ca1 core-prim . make-vector) (bX4ca0 core-prim . make-string) (bX4c9f core-prim . make-rectangular) (bX4c9e core-prim . make-polar) (bX4c9d core-prim . magnitude) (bX4c9c core-prim . log) (bX4c9b core-prim . list?) (bX4c9a core-prim . list-tail) (bX4c99 core-prim . list-ref) (bX4c98 core-prim . list->vector) (bX4c97 core-prim . list->string) (bX4c96 core-prim . list) (bX4c95 core-prim . length) (bX4c94 core-prim . lcm) (bX4c93 core-prim . integer?) (bX4c92 core-prim . integer-valued?) (bX4c91 core-prim . integer->char) (bX4c90 core-prim . infinite?) (bX4c8f core-prim . inexact?) (bX4c8e core-prim . inexact) (bX4c8d core-prim . imag-part) (bX4c8c core-prim . gcd) (bX4c8b core-prim . for-each) (bX4c8a core-prim . floor) (bX4c89 core-prim . finite?) (bX4c88 core-prim . expt) (bX4c87 core-prim . exp) (bX4c86 core-prim . exact?) (bX4c85 core-prim . exact-integer-sqrt) (bX4c84 core-prim . exact) (bX4c83 core-prim . even?) (bX4c82 core-prim . error) (bX4c81 core-prim . eqv?) (bX4c80 core-prim . equal?) (bX4c7f core-prim . eq?) (bX4c7e core-prim . dynamic-wind) (bX4c7d core-prim . div0-and-mod0) (bX4c7c core-prim . mod0) (bX4c7b core-prim . div0) (bX4c7a core-prim . div-and-mod) (bX4c79 core-prim . mod) (bX4c78 core-prim . div) (bX4c77 core-prim . denominator) (bX4c76 core-prim . cos) (bX4c75 core-prim . cons) (bX4c74 core-prim . complex?) (bX4c73 core-prim . char?) (bX4c72 core-prim . char>?) (bX4c71 core-prim . char>=?) (bX4c70 core-prim . char=?) (bX4c6f core-prim . char<?) (bX4c6e core-prim . char<=?) (bX4c6d core-prim . char->integer) (bX4c6c core-prim . ceiling) (bX4c6b core-prim . call-with-values) (bX4c6a core-prim . call/cc) (bX4c69 core-prim . call-with-current-continuation) (bX4c68 core-prim . cddddr) (bX4c67 core-prim . cdddar) (bX4c66 core-prim . cddadr) (bX4c65 core-prim . cddaar) (bX4c64 core-prim . cdaddr) (bX4c63 core-prim . cdadar) (bX4c62 core-prim . cdaadr) (bX4c61 core-prim . cdaaar) (bX4c60 core-prim . cadddr) (bX4c5f core-prim . caddar) (bX4c5e core-prim . cadadr) (bX4c5d core-prim . cadaar) (bX4c5c core-prim . caaddr) (bX4c5b core-prim . caadar) (bX4c5a core-prim . caaadr) (bX4c59 core-prim . caaaar) (bX4c58 core-prim . cdddr) (bX4c57 core-prim . cddar) (bX4c56 core-prim . cdadr) (bX4c55 core-prim . cdaar) (bX4c54 core-prim . caddr) (bX4c53 core-prim . cadar) (bX4c52 core-prim . caadr) (bX4c51 core-prim . caaar) (bX4c50 core-prim . cddr) (bX4c4f core-prim . cdar) (bX4c4e core-prim . cadr) (bX4c4d core-prim . caar) (bX4c4c core-prim . cdr) (bX4c4b core-prim . car) (bX4c4a core-prim . boolean?) (bX4c49 core-prim . boolean=?) (bX4c48 core-prim . atan) (bX4c47 core-prim . assertion-violation) (bX2c2d core-prim . assertion-error) (bX4c46 core-prim . asin) (bX4c45 core-prim . apply) (bX4c44 core-prim . append) (bX4c43 core-prim . angle) (bX4c42 core-prim . acos) (bX4c41 core-prim . abs) (bX4c40 core-prim . /) (bX4c3f core-prim . *) (bX4c3e core-prim . -) (bX4c3d core-prim . +) (bX4c3c core-prim . >=) (bX4c3b core-prim . >) (bX4c3a core-prim . =) (bX4c39 core-prim . <=) (bX4c38 core-prim . <) (bX4c37 core-prim . library) (bX4c36 $core-rtd &no-nans-rtd &no-nans-rcd) (bX4c35 $core-rtd &no-infinities-rtd &no-infinities-rcd) (bX4c34 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bX4c33 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bX4c32 $core-rtd &i/o-port-rtd &i/o-port-rcd) (bX4c31 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bX4c30 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bX4c2f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bX4c2e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bX4c2d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bX4c2c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bX4c2b $core-rtd &i/o-write-rtd &i/o-write-rcd) (bX4c2a $core-rtd &i/o-read-rtd &i/o-read-rcd) (bX4c29 $core-rtd &i/o-rtd &i/o-rcd) (bX4c28 $core-rtd &undefined-rtd &undefined-rcd) (bX4c27 $core-rtd &syntax-rtd &syntax-rcd) (bX4c26 $core-rtd &lexical-rtd &lexical-rcd) (bX4c25 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bX4c24 $core-rtd &non-continuable-rtd &non-continuable-rcd) (bX4c23 $core-rtd &who-rtd &who-rcd) (bX4c22 $core-rtd &irritants-rtd &irritants-rcd) (bX4c21 $core-rtd &assertion-rtd &assertion-rcd) (bX4c20 $core-rtd &violation-rtd &violation-rcd) (bX4c1f $core-rtd &error-rtd &error-rcd) (bX4c1e $core-rtd &serious-rtd &serious-rcd) (bX4c1d $core-rtd &warning-rtd &warning-rcd) (bX4c1c $core-rtd &message-rtd &message-rcd) (bX4c1b $core-rtd &condition-rtd &condition-rcd) (bX4c1a macro . define-condition-type) (bX4c19 macro . define-enumeration) (bX4c18 macro . define-record-type) (bX4c17 macro . parent-rtd) (bX4c16 macro . nongenerative) (bX4c15 macro . opaque) (bX4c14 macro . sealed) (bX4c13 macro . protocol) (bX4c12 macro . parent) (bX4c11 macro . immutable) (bX4c10 macro . mutable) (bX4c0f macro . fields) (bX4c0e macro . error-handling-mode) (bX4c0d macro . file-options) (bX4c0c macro . buffer-mode) (bX4c0b macro . eol-style) (bX4c0a macro . guard) (bX4c09 macro . trace-define) (bX4c08 macro . trace-lambda) (bX4c07 macro . unsyntax-splicing) (bX4c06 macro . unsyntax) (bX4c05 macro . unquote-splicing) (bX4c04 macro . unquote) (bX4c03 macro . _) (bX4c02 macro . else) (bX4c01 macro . =>) (bX4c00 macro . ...) (bX4bff macro . assert) (bX4bfe macro . endianness) (bX4bfd macro . delay) (bX4bfc macro . time) (bX4bfb macro . do) (bX4bfa macro . cond) (bX4bf9 macro . let*) (bX4bf8 macro . let*-values) (bX4bf7 macro . let-values) (bX4bf6 macro . identifier-syntax) (bX4bf5 macro . with-syntax) (bX4bf4 macro . quasisyntax) (bX4bf3 macro . quasiquote) (bX4bf2 macro . syntax-rules) (bX4bf1 macro . include) (bX4bf0 macro . define-struct) (bX4bef core-macro . record-constructor-descriptor) (bX4bee core-macro . record-type-descriptor) (bX4bed macro . case) (bX4bec macro . parameterize) (bX4beb macro . unless) (bX4bea macro . when) (bX4be9 core-macro . or) (bX4be8 core-macro . and) (bX4be7 core-macro . if) (bX4be6 core-macro . let) (bX4be5 core-macro . letrec*) (bX4be4 core-macro . letrec) (bX4be3 core-macro . type-descriptor) (bX4be2 core-macro . case-lambda) (bX4be1 core-macro . lambda) (bX4be0 core-macro . syntax) (bX4bdf core-macro . syntax-case) (bX4bde core-macro . quote) (bX4bdd core-macro . foreign-call) (bX4bdc letrec-syntax) (bX4bdb let-syntax) (bX4bda set!) (bX4bd9 import) (bX4bd8 begin) (bX4bd7 module) (bX4bd6 define-syntax) (bX4bd5 define)) values values '#f '#f '#f '#f) (bX2761@bX25ad@install-library 'bX4f1e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bX4efd) (eval-core . bX4efc) (set-symbol-value! . bX4efb) (symbol-value . bX4efa) (gensym . bX4ef9) (void . bX4ef8)) '() values values '#f '#f '#f '#f) (bX2761@bX25ad@install-library 'bX4f1f '(mosh) '() '() '() '() '((set-symbol-value! . bX4efb) (symbol-value . bX4efa) (regexp? . bX4ef6) (read-line . bX4ef5) (ungensym . bX4ef3) (alist->eq-hash-table . bX4ef2) (assoc-ref . bX4ef1) (print . bX4ef0) (format . bX4eef) (host-os . bX4eee) (library-path . bX258c) (standard-library-path . bX4eed) (file-newer? . bX4eec) (stat-mtime . bX4eeb) (digit->integer . bX4ee7) (call-with-string-input-port . bX4ee6) (call-with-string-io . bX4ee5) (string-split . bX4ee4) (bytevector-for-each . bX4ee3) (string->regexp . bX4ee2) (rxmatch . bX4ee1) (regexp-replace-all . bX4ee0) (hashtable-for-each . bX4edf) (set-current-directory! . bX4eda) (expand-path . bX4ed9) (current-directory . bX4ed8) (p . bX4e98) (get-timeofday . bX4e7f) (get-command-line . bX4e7e) (sys-display . bX4e7d) (whereis . bX4e7c) (register . bX4e7b) (vm-join! . bX4e7a) (vm-set-value! . bX4e79) (vm? . bX4e78) (main-vm? . bX4e77) (vm-eval . bX4e76) (vm-self . bX4e75) (vm-start! . bX4e74) (make-vm . bX4e73) (mutex-try-lock! . bX4e72) (mutex-unlock! . bX4e71) (mutex-lock! . bX4e70) (mutex? . bX4e6f) (make-mutex . bX4e6e) (condition-variable-notify-all! . bX4e6d) (condition-variable-notify! . bX4e6c) (condition-variable-wait! . bX4e6b) (make-condition-variable . bX4e6a) (mosh-executable-path . bX4e69) (make-file-options . bX4e68) (source-info . bX4e67) (make-compiler-instruction . bX4e66) (make-instruction . bX4e65) (set-source-info! . bX4e64) (bignum? . bX4e63) (fast-equal? . bX4e62) (fasl-read . bX4e61) (fasl-write . bX4e60) (time-usage . bX4e5f) (os-constant . bX4e5e) (time . bX4bfc) (include . bX4bf1)) '() values values '#f '#f '#f '#f) (bX2761@bX25ad@install-library 'bX4f20 '(system) '() '() '() '() '((gensym-prefix-set! . bX4ef4) (write-to-file . bX4eea) (file->list . bX4ee9) (file->string . bX4ee8) (mosh-cache-dir . bX2377) (call-process . bX4ede) (local-tz-offset . bX4edd) (microseconds . bX4edc) (directory-list . bX4edb) (expand-path . bX4ed9) (%spawn . bX4ed7) (%waitpid . bX4ed6) (simple-struct-name . bX4ed5) (simple-struct-set! . bX4ed4) (simple-struct-ref . bX4ed3) (make-simple-struct . bX4ed2) (simple-struct? . bX4ed1) (pointer-ref-c-int64 . bX4ed0) (pointer-ref-c-int32 . bX4ecf) (pointer-ref-c-int16 . bX4ece) (pointer-ref-c-int8 . bX4ecd) (pointer-ref-c-uint64 . bX4ecc) (pointer-ref-c-uint32 . bX4ecb) (pointer-ref-c-uint16 . bX4eca) (pointer-ref-c-uint8 . bX4ec9) (pointer-set-c-uint64! . bX4ec8) (pointer-set-c-uint32! . bX4ec7) (pointer-set-c-uint16! . bX4ec6) (pointer-set-c-uint8! . bX4ec5) (pointer-set-c-int64! . bX4ec4) (pointer-set-c-int32! . bX4ec3) (pointer-set-c-int16! . bX4ec2) (pointer-set-c-int8! . bX4ec1) (pointer-set-c-pointer! . bX4ec0) (pointer-set-c-double! . bX4ebf) (pointer-set-c-float! . bX4ebe) (pointer-set-c-long-long! . bX4ebd) (pointer-set-c-long! . bX4ebc) (pointer-set-c-int! . bX4ebb) (pointer-set-c-short! . bX4eba) (pointer-set-c-char! . bX4eb9) (pointer-ref-c-pointer . bX4eb8) (pointer-ref-c-double . bX4eb7) (pointer-ref-c-float . bX4eb6) (pointer-ref-c-unsigned-long-long . bX4eb5) (pointer-ref-c-signed-long-long . bX4eb4) (pointer-ref-c-unsigned-long . bX4eb3) (pointer-ref-c-signed-long . bX4eb2) (pointer-ref-c-unsigned-int . bX4eb1) (pointer-ref-c-signed-int . bX4eb0) (pointer-ref-c-unsigned-short . bX4eaf) (pointer-ref-c-signed-short . bX4eae) (pointer-ref-c-unsigned-char . bX4ead) (pointer-ref-c-signed-char . bX4eac) (pointer->integer . bX4eab) (integer->pointer . bX4eaa) (pointer? . bX4ea9) (shared-errno . bX4ea8) (%ffi-make-c-callback . bX4ea7) (%ffi-free . bX4ea6) (%ffi-malloc . bX4ea5) (%ffi-supported? . bX4ea4) (%ffi-pointer->string . bX4ea3) (%ffi-call->string-or-zero . bX4ea2) (%ffi-call->double . bX4ea1) (%ffi-call->void* . bX4ea0) (%ffi-call->void . bX4e9f) (%ffi-call->char . bX4e9e) (%ffi-call->int . bX4e9d) (%ffi-lookup . bX4e9c) (%ffi-open . bX4e9b) (%fork . bX4e9a) (%pipe . bX4e99) (open-output-string . bX4e97) (get-output-string . bX4e96) (file-stat-ctime . bX4e95) (file-stat-atime . bX4e94) (file-stat-mtime . bX4e93) (file-size-in-bytes . bX4e92) (file-writable? . bX4e91) (file-executable? . bX4e90) (file-readable? . bX4e8f) (file-regular? . bX4e8e) (file-symbolic-link? . bX4e8d) (file-directory? . bX4e8c) (create-symbolic-link . bX4e8b) (rename-file . bX4e8a) (delete-directory . bX4e89) (create-directory . bX4e88) (create-mosh-cache-dir . bX4e87) (get-environment-variables . bX4e86) (current-exception-handler . bX4e85) (get-environment-variable . bX4e84) (join-wraps . bX4e83) (id->real-label . bX4e82) (same-marks? . bX4e81) (same-marks*? . bX4e80) (disasm . bX4e5d) (make-parameter . bX2375) (socket-port . bX4e5c) (socket-shutdown . bX4e5b) (socket-close . bX4e5a) (socket-send . bX4e59) (socket-recv! . bX4e58) (socket-recv . bX4e57) (make-server-socket . bX4e56) (make-client-socket . bX4e55) (socket-accept . bX4e54) (socket? . bX4e53) (parameterize . bX4bec)) '() values values '#f '#f '#f '#f)))
(begin (set! bX4a58@ref (unspecified)) (set! bX4a5a@x* (unspecified)) (set! bX4a5c@add-library-path! (unspecified)) (set! bX4a5e@parse-and-add-library-path (unspecified)) (set! bX4a60@for-each-with-index (unspecified)) (set! bX4a62@rpad (unspecified)) (set! bX4a64@condition-printer (unspecified)) (set! bX4a66@record->field-alist (unspecified)) (set! bX4a68@map-with-index (unspecified)) (set! bX4a6a@repl (unspecified)) (set! bX4a6c@trace-printer (unspecified)) (set! bX4a6e@command-line (unspecified)) (set! bX4a70@local-library-path (unspecified)) (set! bX4a72@load/args (unspecified)) (set! bX4a74@load (unspecified)) (set! bX4a76@ironscheme-build (unspecified)) (set! bX4a78@eval-top-level (unspecified)) (set! bX4a7a@compile-system-libraries (unspecified)) (set! bX4a7c@compile (unspecified)) (set! bX4a7e@compile->closure (unspecified)) (set! bX4a80@pre-compile-r6rs-file (unspecified)) (set! bX4a82@load-r6rs-top-level (unspecified)) (set! bX4a84@load-r6rs-top-level-sexp (unspecified)) (set! bX4a86@prefix-inc (unspecified)) (set! bX4a88@prefix-inc! (unspecified)) (set! bX4a58@ref (lambda (bX4ac3@rtd bX4ac4@i bX4ac5@x) (let ((bX4ac9@val ((record-accessor bX4ac3@rtd bX4ac4@i) bX4ac5@x))) (if (symbol? bX4ac9@val) (ungensym bX4ac9@val) bX4ac9@val)))) (set! bX4bbb@bX4a58@ref bX4a58@ref) (set! bX4a5a@x* '()) (set! bX4bbc@bX4a5a@x* bX4a5a@x*) (set! bX4a5c@add-library-path! (lambda (bX4acb@path) (bX2751@bX258d@library-path (append (bX2751@bX258d@library-path) (list bX4acb@path))))) (set! bX4bbd@bX4a5c@add-library-path! bX4a5c@add-library-path!) (set! bX4a5e@parse-and-add-library-path (lambda (bX4acd@paths bX4ace@message) (let ((bX4ad2@separator '#f)) (begin (set! bX4ad2@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((bX4ad3@t bX4acd@paths)) (if bX4ad3@t ((lambda (bX4ad5@paths) (for-each (lambda (bX4ad7@path) (if (file-exists? bX4ad7@path) (bX4a5c@add-library-path! (expand-path bX4ad7@path)) (format (current-error-port) bX4ace@message bX4ad7@path))) (string-split bX4ad5@paths bX4ad2@separator))) bX4ad3@t) (void))))))) (set! bX4bbe@bX4a5e@parse-and-add-library-path bX4a5e@parse-and-add-library-path) (set! bX4a60@for-each-with-index (lambda (bX4ad9@proc bX4ada@lst) (letrec ((bX4add@loop (lambda (bX4adf@i bX4ae0@lst) (if (null? bX4ae0@lst) (if '#f '#f (void)) (begin (bX4ad9@proc bX4adf@i (car bX4ae0@lst)) (bX4add@loop (+ bX4adf@i '1) (cdr bX4ae0@lst))))))) (bX4add@loop '1 bX4ada@lst)))) (set! bX4bbf@bX4a60@for-each-with-index bX4a60@for-each-with-index) (set! bX4a62@rpad (lambda (bX4ae3@str bX4ae4@pad bX4ae5@n) (let ((bX4ae9@rest (- bX4ae5@n (string-length (format '"~a" bX4ae3@str))))) (let bX4aef@loop ((bX4aeb@rest bX4ae9@rest) (bX4aec@ret (format '"~a" bX4ae3@str))) (if (<= bX4aeb@rest '0) bX4aec@ret (bX4aef@loop (- bX4aeb@rest '1) (string-append bX4aec@ret bX4ae4@pad))))))) (set! bX4bc0@bX4a62@rpad bX4a62@rpad) (set! bX4a64@condition-printer (lambda (bX4af1@e bX4af2@port) (let ((bX4af6@max-condition-len '#f)) (begin (set! bX4af6@max-condition-len (apply max (map (lambda (bX4b07@c) (string-length (symbol->string (record-type-name (record-rtd bX4b07@c))))) (simple-conditions bX4af1@e)))) (begin (display '" Condition components:\n" bX4af2@port) (bX4a60@for-each-with-index (lambda (bX4af7@i bX4af8@x) (let ((bX4afb@rtd (record-rtd bX4af8@x)) (bX4afc@fields-alist (bX4a66@record->field-alist bX4af8@x))) (begin (format bX4af2@port '" ~d. ~a" bX4af7@i (bX4a62@rpad (symbol->string (record-type-name bX4afb@rtd)) '" " bX4af6@max-condition-len)) (if (null? bX4afc@fields-alist) (newline bX4af2@port) (void)) (let bX4b03@loop ((bX4aff@first '#t) (bX4b00@fields-alist bX4afc@fields-alist)) (if (null? bX4b00@fields-alist) '() (let ((bX4b05@field (car bX4b00@fields-alist))) (begin (if (not bX4aff@first) (display (bX4a62@rpad '"" '" " (+ '4 bX4af6@max-condition-len)) bX4af2@port) (void)) (display '"       " bX4af2@port) (display (car bX4b05@field) bX4af2@port) (display '": " bX4af2@port) (write (cdr bX4b05@field) bX4af2@port) (newline bX4af2@port) (bX4b03@loop '#f (cdr bX4b00@fields-alist))))))))) (simple-conditions bX4af1@e))))))) (set! bX4bc1@bX4a64@condition-printer bX4a64@condition-printer) (set! bX4a66@record->field-alist (lambda (bX4b09@r) (let ((bX4b0c@ref '#f)) (begin (set! bX4b0c@ref (lambda (bX4b17@rtd bX4b18@i bX4b19@x) (let ((bX4b1d@val ((record-accessor bX4b17@rtd bX4b18@i) bX4b19@x))) (if (symbol? bX4b1d@val) (ungensym bX4b1d@val) bX4b1d@val)))) (let bX4b11@loop ((bX4b0d@ret '()) (bX4b0e@rtd (record-rtd bX4b09@r))) (if bX4b0e@rtd (bX4b11@loop (append bX4b0d@ret (bX4a68@map-with-index (lambda (bX4b13@i bX4b14@field) (cons bX4b14@field (bX4b0c@ref bX4b0e@rtd bX4b13@i bX4b09@r))) (vector->list (record-type-field-names bX4b0e@rtd)))) (record-type-parent bX4b0e@rtd)) bX4b0d@ret)))))) (set! bX4bc2@bX4a66@record->field-alist bX4a66@record->field-alist) (set! bX4a68@map-with-index (lambda (bX4b1f@proc bX4b20@lst) (let bX4b29@loop ((bX4b23@i '0) (bX4b24@lst bX4b20@lst) (bX4b25@ret '())) (if (null? bX4b24@lst) (reverse bX4b25@ret) (bX4b29@loop (+ bX4b23@i '1) (cdr bX4b24@lst) (cons (bX4b1f@proc bX4b23@i (car bX4b24@lst)) bX4b25@ret)))))) (set! bX4bc3@bX4a68@map-with-index bX4a68@map-with-index) (set! bX4a6a@repl (lambda bX4b2b@x (let ((bX4b2e@rec '#f)) (begin (set! bX4b2e@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bX4b31@bX4b2f) (lambda () (with-exception-handler (lambda (bX4b33@e) ((call/cc (lambda (bX4b35@bX4b30) (bX4b31@bX4b2f (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bX4b33@e) (bX4a64@condition-printer bX4b33@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bX4b33@e))) (bX4b35@bX4b30 (lambda () (raise-continuable bX4b33@e)))))))))) (lambda () (let bX4b3b@loop ((bX4b37@line (get-line (current-input-port))) (bX4b38@accum '"")) (let ((bX4b3e@parentheses-ok? '#f) (bX4b40@eval-string-print '#f)) (begin (set! bX4b3e@parentheses-ok? (lambda (bX4b45@text) (let bX4b4d@loop ((bX4b47@chars (string->list bX4b45@text)) (bX4b48@p0 '0) (bX4b49@p1 '0)) (if (null? bX4b47@chars) (= '0 bX4b48@p0 bX4b49@p1) (let ((bX4b4f@t (car bX4b47@chars))) (if (memv bX4b4f@t '(#\()) (bX4b4d@loop (cdr bX4b47@chars) (+ bX4b48@p0 '1) bX4b49@p1) (if (memv bX4b4f@t '(#\))) (bX4b4d@loop (cdr bX4b47@chars) (- bX4b48@p0 '1) bX4b49@p1) (if (memv bX4b4f@t '(#\[)) (bX4b4d@loop (cdr bX4b47@chars) bX4b48@p0 (+ bX4b49@p1 '1)) (if (memv bX4b4f@t '(#\])) (bX4b4d@loop (cdr bX4b47@chars) bX4b48@p0 (- bX4b49@p1 '1)) (bX4b4d@loop (cdr bX4b47@chars) bX4b48@p0 bX4b49@p1)))))))))) (set! bX4b40@eval-string-print (lambda (bX4b43@text) (if (not (or (string=? '"\n" bX4b43@text) (= '0 (string-length bX4b43@text)))) (write (bX4a78@eval-top-level (call-with-port (open-string-input-port bX4b43@text) read))) (void)))) (if (eof-object? bX4b37@line) (begin (bX4b40@eval-string-print bX4b38@accum) (exit)) (let ((bX4b41@current (string-append bX4b38@accum bX4b37@line))) (if (bX4b3e@parentheses-ok? bX4b41@current) (bX4b40@eval-string-print bX4b41@current) (bX4b3b@loop (get-line (current-input-port)) bX4b41@current))))))))))))) (newline) (bX4b2e@rec)))) (bX4b2e@rec))))) (set! bX4bc4@bX4a6a@repl bX4a6a@repl) (set! bX4a6c@trace-printer (bX2497@bX2376@make-parameter write)) (set! bX4bc5@bX4a6c@trace-printer bX4a6c@trace-printer) (set! bX4a6e@command-line (bX2497@bX2376@make-parameter (get-command-line))) (set! bX4bc6@bX4a6e@command-line bX4a6e@command-line) (set! bX4a70@local-library-path (lambda (bX4b51@filename) (bX2751@bX258d@library-path))) (set! bX4bc7@bX4a70@local-library-path bX4a70@local-library-path) (set! bX4a72@load/args (lambda (bX4b53@filename . bX4b55@args) (begin (apply bX4a82@load-r6rs-top-level bX4b53@filename 'load bX4b55@args) (void)))) (set! bX4bc8@bX4a72@load/args bX4a72@load/args) (set! bX4a74@load (lambda (bX4b57@filename) (begin (apply bX4a82@load-r6rs-top-level bX4b57@filename 'load (bX4a6e@command-line)) (void)))) (set! bX4bc9@bX4a74@load bX4a74@load) (set! bX4a76@ironscheme-build (lambda () (bX4a74@load '"ironscheme-buildscript.ss"))) (set! bX4bca@bX4a76@ironscheme-build bX4a76@ironscheme-build) (set! bX4a78@eval-top-level (lambda (bX4b59@x) (bX467e@bX2c14@eval bX4b59@x (bX4695@bX2c42@interaction-environment)))) (set! bX4bcb@bX4a78@eval-top-level bX4a78@eval-top-level) (set! bX4a7a@compile-system-libraries (lambda () (bX4a78@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bX4bcc@bX4a7a@compile-system-libraries bX4a7a@compile-system-libraries) (set! bX4a7c@compile (lambda (bX4b5b@filename) (bX4a82@load-r6rs-top-level bX4b5b@filename 'compile))) (set! bX4bcd@bX4a7c@compile bX4a7c@compile) (set! bX4a7e@compile->closure (lambda (bX4b5d@filename) (bX4a82@load-r6rs-top-level bX4b5d@filename 'closure))) (set! bX4bce@bX4a7e@compile->closure bX4a7e@compile->closure) (set! bX4a80@pre-compile-r6rs-file (lambda (bX4b5f@filename) (bX4a82@load-r6rs-top-level bX4b5f@filename 'compile))) (set! bX4bcf@bX4a80@pre-compile-r6rs-file bX4a80@pre-compile-r6rs-file) (set! bX4a82@load-r6rs-top-level (lambda (bX4b61@filename bX4b62@how . bX4b65@args) (begin (bX2751@bX258d@library-path (bX4a70@local-library-path bX4b61@filename)) (let ((bX4b67@x* (with-input-from-file bX4b61@filename (lambda () (let bX4b69@f () (let ((bX4b6b@x (bX248a@bX235c@read-annotated))) (if (eof-object? bX4b6b@x) '() (cons bX4b6b@x (bX4b69@f))))))))) (let ((bX4b6d@t bX4b62@how)) (if (memv bX4b6d@t '(closure)) (bX4694@bX2c40@pre-compile-r6rs-top-level bX4b67@x*) (if (memv bX4b6d@t '(load)) (begin (bX4a6e@command-line (cons bX4b61@filename (car bX4b65@args))) (bX2498@bX2378@mosh-cache-dir (create-mosh-cache-dir)) (if (bX2498@bX2378@mosh-cache-dir) (gensym-prefix-set! (bX4a88@prefix-inc! (string-append (bX2498@bX2378@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bX4b6f@file) ((call/cc (lambda (bX4b73@bX4b71) (lambda () (with-exception-handler (lambda (bX4b75@c) ((call/cc (lambda (bX4b77@bX4b72) (bX4b73@bX4b71 (lambda () (if '#t '#t (bX4b77@bX4b72 (lambda () (raise-continuable bX4b75@c)))))))))) (lambda () (delete-file (string-append (bX2498@bX2378@mosh-cache-dir) '"/" bX4b6f@file))))))))) (directory-list (bX2498@bX2378@mosh-cache-dir))) (void)) (let ((bX4b79@compiled (bX4693@bX2c3e@compile-r6rs-top-level bX4b67@x*))) (begin (if (and (bX2498@bX2378@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bX2755@bX2595@serialize-all bX2492@bX236c@serialize-library bX24ee@bX24a7@compile-core-expr) (void)) (bX4b79@compiled)))) (if (memv bX4b6d@t '(compile)) (begin (bX4693@bX2c3e@compile-r6rs-top-level bX4b67@x*) (bX2755@bX2595@serialize-all bX2492@bX236c@serialize-library bX24ee@bX24a7@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bX4bd0@bX4a82@load-r6rs-top-level bX4a82@load-r6rs-top-level) (set! bX4a84@load-r6rs-top-level-sexp (lambda (bX4b7b@import-spec bX4b7c@thunk) (let ((bX4b87@bX4b80 bX2751@bX258d@library-path) (bX4b88@bX4b82 bX2498@bX2378@mosh-cache-dir) (bX4b89@bX4b84 (bX4a70@local-library-path '"")) (bX4b8a@bX4b86 (create-mosh-cache-dir))) (let ((bX4b8f@swap (lambda () (begin (let ((bX4b91@t (bX4b87@bX4b80))) (begin (bX4b87@bX4b80 bX4b89@bX4b84) (set! bX4b89@bX4b84 bX4b91@t))) (let ((bX4b93@t (bX4b88@bX4b82))) (begin (bX4b88@bX4b82 bX4b8a@bX4b86) (set! bX4b8a@bX4b86 bX4b93@t))))))) (dynamic-wind bX4b8f@swap (lambda () (begin (if (bX2498@bX2378@mosh-cache-dir) (gensym-prefix-set! (bX4a88@prefix-inc! (string-append (bX2498@bX2378@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bX4b99@bX4b96 bX4a6e@command-line) (bX4b9a@bX4b98 '())) (let ((bX4b9d@swap (lambda () (let ((bX4b9f@t (bX4b99@bX4b96))) (begin (bX4b99@bX4b96 bX4b9a@bX4b98) (set! bX4b9a@bX4b98 bX4b9f@t)))))) (dynamic-wind bX4b9d@swap (lambda () ((bX4693@bX2c3e@compile-r6rs-top-level (list (cons 'import bX4b7b@import-spec) (list bX4b7c@thunk))))) bX4b9d@swap))))) bX4b8f@swap))))) (set! bX4bd1@bX4a84@load-r6rs-top-level-sexp bX4a84@load-r6rs-top-level-sexp) (set! bX4a86@prefix-inc (lambda (bX4ba1@prefix-string) (let ((bX4ba3@prefix (symbol->string bX4ba1@prefix-string))) (let ((bX4ba5@len (string-length bX4ba3@prefix))) (let bX4bad@loop ((bX4ba7@i (- bX4ba5@len '1)) (bX4ba8@carry? '#t) (bX4ba9@accum '())) (if (< bX4ba7@i '0) (string->symbol (list->string (if bX4ba8@carry? (cons '#\a bX4ba9@accum) bX4ba9@accum))) (if bX4ba8@carry? (let ((bX4baf@next-integer (+ '1 (char->integer (string-ref bX4ba3@prefix bX4ba7@i))))) (if (= bX4baf@next-integer '123) (bX4bad@loop (- bX4ba7@i '1) '#f (cons '#\A bX4ba9@accum)) (if (= bX4baf@next-integer '91) (bX4bad@loop (- bX4ba7@i '1) '#t (cons '#\a bX4ba9@accum)) (bX4bad@loop (- bX4ba7@i '1) '#f (cons (integer->char bX4baf@next-integer) bX4ba9@accum))))) (bX4bad@loop (- bX4ba7@i '1) '#f (cons (string-ref bX4ba3@prefix bX4ba7@i) bX4ba9@accum))))))))) (set! bX4bd2@bX4a86@prefix-inc bX4a86@prefix-inc) (set! bX4a88@prefix-inc! (lambda (bX4bb1@file) (begin (if (not (file-exists? bX4bb1@file)) (call-with-output-file bX4bb1@file (lambda (bX4bb3@port) (write 'd bX4bb3@port))) (void)) (let ((bX4bb5@prefix (call-with-input-file bX4bb1@file read))) (let ((bX4bb7@next-prefix (bX4a86@prefix-inc bX4bb5@prefix))) (begin (call-with-port (open-file-output-port bX4bb1@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bX4bb9@port) (write bX4bb7@next-prefix bX4bb9@port))) bX4bb5@prefix)))))) (set! bX4bd3@bX4a88@prefix-inc! bX4a88@prefix-inc!) (begin (bX2756@bX2597@current-precompiled-library-loader bX2493@bX236e@load-serialized-library) (set-symbol-value! 'load bX4a74@load) (set-symbol-value! 'pre-compile-r6rs-file bX4a80@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bX4a78@eval-top-level) (set-symbol-value! 'int-env-syms bX4675@bX2c02@interaction-environment-symbols) (set-symbol-value! 'expanded2core bX24ed@bX24a5@expanded->core) (set-symbol-value! 'trace-printer bX4a6c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bX4a89@c) (condition (bX49b5@bX47bf@make-non-continuable-violation) (bX49ab@bX47a6@make-who-condition 'raise) (bX496f@bX4707@make-message-condition '"returned from non-continuable exception") (bX49a1@bX478b@make-irritants-condition (list bX4a89@c))))) (bX4a5e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bX4a5e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bX4a5c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bX4a5c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bX4a5c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bX4a8b@prefix (lambda (bX4a8d@ext bX4a8e@ls) (append (map (lambda (bX4a91@x) (string-append bX4a8d@ext bX4a91@x)) bX4a8e@ls) bX4a8e@ls)))) (bX2752@bX258f@library-extensions (bX4a8b@prefix '".mosh" (bX2752@bX258f@library-extensions)))) (current-exception-handler (lambda (bX4a93@c) (if (condition? bX4a93@c) (bX4a64@condition-printer bX4a93@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bX4a93@c)))) (if ((call/cc (lambda (bX4a97@bX4a95) (lambda () (with-exception-handler (lambda (bX4a99@c) ((call/cc (lambda (bX4a9b@bX4a96) (bX4a97@bX4a95 (lambda () (if '#t '#f (bX4a9b@bX4a96 (lambda () (raise-continuable bX4a99@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bX4a84@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bX4a6e@command-line)) (let ((bX4aa5@bX4a9e bX4a6e@command-line) (bX4aa6@bX4aa0 bX2498@bX2378@mosh-cache-dir) (bX4aa7@bX4aa2 '()) (bX4aa8@bX4aa4 (create-mosh-cache-dir))) (let ((bX4aad@swap (lambda () (begin (let ((bX4aaf@t (bX4aa5@bX4a9e))) (begin (bX4aa5@bX4a9e bX4aa7@bX4aa2) (set! bX4aa7@bX4aa2 bX4aaf@t))) (let ((bX4ab1@t (bX4aa6@bX4aa0))) (begin (bX4aa6@bX4aa0 bX4aa8@bX4aa4) (set! bX4aa8@bX4aa4 bX4ab1@t))))))) (dynamic-wind bX4aad@swap (lambda () (begin (if (bX2498@bX2378@mosh-cache-dir) (gensym-prefix-set! (bX4a88@prefix-inc! (string-append (bX2498@bX2378@mosh-cache-dir) '"/prefix.txt"))) (void)) (bX4a6a@repl))) bX4aad@swap))) (begin (bX2751@bX258d@library-path (bX4a70@local-library-path (car (bX4a6e@command-line)))) (set! bX4a5a@x* (with-input-from-file (car (bX4a6e@command-line)) (lambda () (let bX4ab3@f () (let ((bX4ab5@x (bX248a@bX235c@read-annotated))) (if (eof-object? bX4ab5@x) '() (cons bX4ab5@x (bX4ab3@f)))))))) (bX4a6e@command-line (cons (car (bX4a6e@command-line)) (cdr (bX4a6e@command-line)))) (bX2498@bX2378@mosh-cache-dir (create-mosh-cache-dir)) (if (bX2498@bX2378@mosh-cache-dir) (gensym-prefix-set! (bX4a88@prefix-inc! (string-append (bX2498@bX2378@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bX4ab7@file) ((call/cc (lambda (bX4abb@bX4ab9) (lambda () (with-exception-handler (lambda (bX4abd@c) ((call/cc (lambda (bX4abf@bX4aba) (bX4abb@bX4ab9 (lambda () (if '#t '#t (bX4abf@bX4aba (lambda () (raise-continuable bX4abd@c)))))))))) (lambda () (delete-file (string-append (bX2498@bX2378@mosh-cache-dir) '"/" bX4ab7@file))))))))) (directory-list (bX2498@bX2378@mosh-cache-dir))) (void)) (let ((bX4ac1@compiled (bX4693@bX2c3e@compile-r6rs-top-level bX4a5a@x*))) (begin (if (and (bX2498@bX2378@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bX2755@bX2595@serialize-all bX2492@bX236c@serialize-library bX24ee@bX24a7@compile-core-expr) (void)) (bX4ac1@compiled))))))))
