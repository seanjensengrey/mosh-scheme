;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! lV24b4@library-file-path->cache-path (unspecified)) (set! lV24b6@read-annotated (unspecified)) (set! lV24b8@annotation-stripped (unspecified)) (set! lV24ba@annotation? (unspecified)) (set! lV24bc@annotation-source (unspecified)) (set! lV24be@annotation-expression (unspecified)) (set! lV24c0@scm->fasl (unspecified)) (set! lV24c2@fasl-save (unspecified)) (set! lV24c4@fasl-load (unspecified)) (set! lV24c6@serialize-library (unspecified)) (set! lV24c8@load-serialized-library (unspecified)) (set! lV24ca@make-record-printer (unspecified)) (set! lV24cc@compile-core (unspecified)) (set! lV24ce@read-library-source-file (unspecified)) (set! lV24d0@make-parameter (unspecified)) (set! lV24d2@mosh-cache-dir (unspecified)) (set! lV2568@file-options-spec (unspecified)) (begin (set! lV24b4@library-file-path->cache-path (lambda (lV2569@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lV256f@lV256c lV2570@lV256e) (let ((lV2573@extract lV2570@lV256e) (lV2574@p lV256f@lV256c)) (let ((lV2578@display-hex '#f)) (begin (set! lV2578@display-hex (lambda (lV2581@n) (if (<= '0 lV2581@n '9) (display lV2581@n lV2574@p) (display (integer->char (+ (char->integer '#\a) (- lV2581@n '10))) lV2574@p)))) (begin (let lV257b@f ((lV2579@ls (string-split lV2569@x '#\/))) (if (not (null? lV2579@ls)) (begin (display '"_" lV2574@p) (for-each (lambda (lV257d@c) (if (or (char<=? '#\a lV257d@c '#\z) (char<=? '#\A lV257d@c '#\Z) (char<=? '#\0 lV257d@c '#\9) (memv lV257d@c '(#\- #\. #\_ #\~))) (display lV257d@c lV2574@p) (begin (display '"%" lV2574@p) (let ((lV257f@n (char->integer lV257d@c))) (begin (lV2578@display-hex (quotient lV257f@n '16)) (lV2578@display-hex (remainder lV257f@n '16))))))) (string->list (car lV2579@ls))) (lV257b@f (cdr lV2579@ls))) (void))) (lV2573@extract))))))))) (set! lV25e3@lV24b4@library-file-path->cache-path lV24b4@library-file-path->cache-path)) (begin (set! lV24b6@read-annotated read) (set! lV25e4@lV24b6@read-annotated lV24b6@read-annotated)) (begin (set! lV24b8@annotation-stripped (lambda (lV2583@x) (lV24be@annotation-expression lV2583@x))) (set! lV25e5@lV24b8@annotation-stripped lV24b8@annotation-stripped)) (begin (set! lV24ba@annotation? (lambda (lV2585@x) (source-info lV2585@x))) (set! lV25e6@lV24ba@annotation? lV24ba@annotation?)) (begin (set! lV24bc@annotation-source (lambda (lV2587@x) (source-info lV2587@x))) (set! lV25e7@lV24bc@annotation-source lV24bc@annotation-source)) (begin (set! lV24be@annotation-expression (lambda (lV2589@x) (if (pair? lV2589@x) (cons (car lV2589@x) (cdr lV2589@x)) (display '"line:46\n")))) (set! lV25e8@lV24be@annotation-expression lV24be@annotation-expression)) (begin (set! lV24c0@scm->fasl (lambda (lV258b@filename) (string-append (lV24d2@mosh-cache-dir) '"/" (lV24b4@library-file-path->cache-path lV258b@filename) '".mosh-fasl"))) (set! lV25e9@lV24c0@scm->fasl lV24c0@scm->fasl)) (begin (set! lV24c2@fasl-save (lambda (lV258d@filename lV258e@obj) (call-with-port (open-file-output-port lV258d@filename) (lambda (lV2591@port) ((symbol-value 'fasl-write!) lV258e@obj lV2591@port))))) (set! lV25ea@lV24c2@fasl-save lV24c2@fasl-save)) (begin (set! lV24c4@fasl-load (lambda (lV2593@filename) (call-with-port (open-file-input-port lV2593@filename) (symbol-value 'fasl-read!)))) (set! lV25eb@lV24c4@fasl-load lV24c4@fasl-load)) (begin (set! lV24c6@serialize-library (lambda (lV2595@filename lV2596@obj) (begin (let ((lV2599@expanded2core (symbol-value 'expanded2core))) (let ((lV259b@compile (symbol-value 'compile-w/o-halt))) (let ((lV259d@code lV2596@obj)) (let ((lV259f@pivot (cddddr (cddddr lV259d@code)))) (let ((lV25a1@visit (lV259b@compile (lV2599@expanded2core (car lV259f@pivot))))) (begin (set-car! lV259f@pivot lV25a1@visit) (let ((lV25a3@pivot (cdr lV259f@pivot))) (let ((lV25a5@invoke (lV259b@compile (lV2599@expanded2core (car lV25a3@pivot))))) (set-car! lV25a3@pivot lV25a5@invoke))))))))) (let ((lV25a7@fasl-file (lV24c0@scm->fasl lV2595@filename))) (begin (if (file-exists? lV25a7@fasl-file) (delete-file lV25a7@fasl-file) (void)) ((call/cc (lambda (lV25ab@lV25a9) (lambda () (with-exception-handler (lambda (lV25ad@c) ((call/cc (lambda (lV25af@lV25aa) (lV25ab@lV25a9 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " lV2595@filename) (if (file-exists? lV25a7@fasl-file) (delete-file lV25a7@fasl-file) (void)) '#f) (lV25af@lV25aa (lambda () (raise-continuable lV25ad@c)))))))))) (lambda () (lV24c2@fasl-save lV25a7@fasl-file lV2596@obj)))))))))))) (set! lV25ec@lV24c6@serialize-library lV24c6@serialize-library)) (begin (set! lV24c8@load-serialized-library (lambda (lV25b1@filename lV25b2@obj) (and (lV24d2@mosh-cache-dir) (let ((lV25b5@fasl-file (lV24c0@scm->fasl lV25b1@filename))) (if (and (file-exists? lV25b5@fasl-file) ((symbol-value 'file-newer?) lV25b5@fasl-file lV25b1@filename)) (let ((lV25b7@expanded2core (symbol-value 'expanded2core))) (let ((lV25b9@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((lV25bb@code (lV24c4@fasl-load lV25b5@fasl-file))) (let ((lV25bd@pivot (cddddr (cddddr lV25bb@code)))) (let ((lV25bf@visit (car lV25bd@pivot))) (let ((lV25c1@visit-proc (lambda () (lV25b9@eval-compiled-core lV25bf@visit)))) (begin (set-car! lV25bd@pivot lV25c1@visit-proc) (let ((lV25c3@pivot (cdr lV25bd@pivot))) (let ((lV25c5@invoke (car lV25c3@pivot))) (begin (set-car! lV25c3@pivot (lambda () (lV25b9@eval-compiled-core lV25c5@invoke))) (apply lV25b2@obj lV25bb@code))))))))))) '#f))))) (set! lV25ed@lV24c8@load-serialized-library lV24c8@load-serialized-library)) (begin (set! lV24ca@make-record-printer (lambda (lV25c7@name lV25c8@printer) (lambda lV25cb@x (begin (display '"record printer") (for-each display lV25cb@x))))) (set! lV25ee@lV24ca@make-record-printer lV24ca@make-record-printer)) (begin (set! lV24cc@compile-core (lambda lV25cd@x (apply error 'comile-core '"not implementated" lV25cd@x))) (set! lV25ef@lV24cc@compile-core lV24cc@compile-core)) (begin (set! lV24ce@read-library-source-file (lambda (lV25cf@file-name) (with-input-from-file lV25cf@file-name lV24b6@read-annotated))) (set! lV25f0@lV24ce@read-library-source-file lV24ce@read-library-source-file)) (begin (set! lV24d0@make-parameter (lambda lV25df (let ((lV25e0 (length lV25df))) (if (= lV25e0 '1) (apply (lambda (lV25d1@x) (lV24d0@make-parameter lV25d1@x (lambda (lV25d3@x) lV25d3@x))) lV25df) (if (= lV25e0 '2) (apply (lambda (lV25d5@x lV25d6@fender) (let ((lV25d9@x (lV25d6@fender lV25d5@x))) (lambda lV25dd (let ((lV25de (length lV25dd))) (if (= lV25de '0) (apply (lambda () lV25d9@x) lV25dd) (if (= lV25de '1) (apply (lambda (lV25db@v) (set! lV25d9@x (lV25d6@fender lV25db@v))) lV25dd) (error 'apply '"invalid arg count"))))))) lV25df) (error 'apply '"invalid arg count")))))) (set! lV25f1@lV24d0@make-parameter lV24d0@make-parameter)) (begin (set! lV24d2@mosh-cache-dir (lV24d0@make-parameter '#f)) (set! lV25f2@lV24d2@mosh-cache-dir lV24d2@mosh-cache-dir)) (begin (set! lV2568@file-options-spec (lambda (lV25e1@x) lV25e1@x)) (set! lV25f3@lV2568@file-options-spec lV2568@file-options-spec)) (void))
(begin (set! lV25f9@current-primitive-locations (unspecified)) (set! lV25fb@mutable? (unspecified)) (set! lV25fd@rewriter (unspecified)) (set! lV25ff@expanded->core (unspecified)) (set! lV2601@compile-core-expr (unspecified)) (set! lV2603@pretty-print (unspecified)) (set! lV2605@compile-core-expr-to-port (unspecified)) (begin (set! lV25f9@current-primitive-locations (lV25f1@lV24d0@make-parameter (lambda (lV2606@x) '#f) (lambda (lV2608@p) lV2608@p))) (set! lV2644@lV25f9@current-primitive-locations lV25f9@current-primitive-locations)) (begin (set! lV25fb@mutable? (lambda (lV260a@x) (or (pair? lV260a@x) (vector? lV260a@x) (hashtable? lV260a@x)))) (set! lV2645@lV25fb@mutable? lV25fb@mutable?)) (begin (set! lV25fd@rewriter (lambda (lV260c@quote-hack?) (let ((lV260f@f '#f)) (begin (set! lV260f@f (lambda (lV2610@x) (if (pair? lV2610@x) (let ((lV2612@t (car lV2610@x))) (if (memv lV2612@t '(quote)) (if (and lV260c@quote-hack? (lV25fb@mutable? (cadr lV2610@x))) (let ((lV2614@g (gensym))) (begin (set-symbol-value! lV2614@g (cadr lV2610@x)) lV2614@g)) lV2610@x) (if (memv lV2612@t '(case-lambda)) (cons 'case-lambda (map (lambda (lV2616@x) (cons (car lV2616@x) (map lV260f@f (cdr lV2616@x)))) (cdr lV2610@x))) (if (memv lV2612@t '(lambda)) (cons* 'lambda (cadr lV2610@x) (map lV260f@f (cddr lV2610@x))) (if (memv lV2612@t '(letrec)) (let ((lV2618@bindings (cadr lV2610@x)) (lV2619@body* (cddr lV2610@x))) (let ((lV261c@lhs* (map car lV2618@bindings)) (lV261d@rhs* (map cadr lV2618@bindings))) (cons* 'letrec (map list lV261c@lhs* (map lV260f@f lV261d@rhs*)) (map lV260f@f lV2619@body*)))) (if (memv lV2612@t '(letrec*)) (let ((lV2620@bindings (cadr lV2610@x)) (lV2621@body* (cddr lV2610@x))) (let ((lV2624@lhs* (map car lV2620@bindings)) (lV2625@rhs* (map cadr lV2620@bindings))) (cons* 'letrec* (map list lV2624@lhs* (map lV260f@f lV2625@rhs*)) (map lV260f@f lV2621@body*)))) (if (memv lV2612@t '(library-letrec*)) (let ((lV2628@name (cadr lV2610@x)) (lV2629@x (cdr lV2610@x))) (let ((lV262c@bindings (cadr lV2629@x)) (lV262d@body* (cddr lV2629@x))) (let ((lV2630@lhs* (map car lV262c@bindings)) (lV2631@lhs** (map cadr lV262c@bindings)) (lV2632@rhs* (map caddr lV262c@bindings))) (cons* 'library-letrec* lV2628@name (map list lV2630@lhs* lV2631@lhs** (map lV260f@f lV2632@rhs*)) (map lV260f@f lV262d@body*))))) (if (memv lV2612@t '(begin)) (cons 'begin (map lV260f@f (cdr lV2610@x))) (if (memv lV2612@t '(set!)) (list 'set! (cadr lV2610@x) (lV260f@f (caddr lV2610@x))) (if (memv lV2612@t '(primitive)) (let ((lV2636@op (cadr lV2610@x))) (let ((lV2638@t ((lV25f9@current-primitive-locations) lV2636@op))) (if lV2638@t ((lambda (lV263a@loc) lV263a@loc) lV2638@t) lV2636@op))) (if (memv lV2612@t '(define)) lV2610@x (if (list? lV2610@x) (map lV260f@f lV2610@x) (error 'rewrite '"invalid form ~s ~s" lV2610@x (list? lV2610@x)))))))))))))) lV2610@x))) lV260f@f)))) (set! lV2646@lV25fd@rewriter lV25fd@rewriter)) (begin (set! lV25ff@expanded->core (lambda (lV263c@x) ((lV25fd@rewriter '#f) lV263c@x))) (set! lV2647@lV25ff@expanded->core lV25ff@expanded->core)) (begin (set! lV2601@compile-core-expr (lambda (lV263e@x) ((lV25fd@rewriter '#f) lV263e@x))) (set! lV2648@lV2601@compile-core-expr lV2601@compile-core-expr)) (begin (set! lV2603@pretty-print write) (set! lV2649@lV2603@pretty-print lV2603@pretty-print)) (begin (set! lV2605@compile-core-expr-to-port (lambda (lV2640@x lV2641@p) (lV2603@pretty-print ((lV25fd@rewriter '#f) lV2640@x) lV2641@p))) (set! lV264a@lV2605@compile-core-expr-to-port lV2605@compile-core-expr-to-port)) (void))
(begin (void))
(begin (set! lV2699@make-collection (unspecified)) (set! lV269b@current-library-collection (unspecified)) (set! lV269d@rp (unspecified)) (set! lV26a7@library? (unspecified)) (set! lV26a9@library-id (unspecified)) (set! lV26ab@set-library-id! (unspecified)) (set! lV26ad@library-name (unspecified)) (set! lV26af@set-library-name! (unspecified)) (set! lV26b1@library-version (unspecified)) (set! lV26b3@set-library-version! (unspecified)) (set! lV26b5@library-imp* (unspecified)) (set! lV26b7@set-library-imp*! (unspecified)) (set! lV26b9@library-vis* (unspecified)) (set! lV26bb@set-library-vis*! (unspecified)) (set! lV26bd@library-inv* (unspecified)) (set! lV26bf@set-library-inv*! (unspecified)) (set! lV26c1@library-subst (unspecified)) (set! lV26c3@set-library-subst! (unspecified)) (set! lV26c5@library-env (unspecified)) (set! lV26c7@set-library-env! (unspecified)) (set! lV26c9@library-visit-state (unspecified)) (set! lV26cb@set-library-visit-state! (unspecified)) (set! lV26cd@library-invoke-state (unspecified)) (set! lV26cf@set-library-invoke-state! (unspecified)) (set! lV26d1@library-visit-code (unspecified)) (set! lV26d3@set-library-visit-code! (unspecified)) (set! lV26d5@library-invoke-code (unspecified)) (set! lV26d7@set-library-invoke-code! (unspecified)) (set! lV26d9@library-visible? (unspecified)) (set! lV26db@set-library-visible?! (unspecified)) (set! lV26dd@library-source-file-name (unspecified)) (set! lV26df@set-library-source-file-name! (unspecified)) (set! lV26e1@dummy (unspecified)) (set! lV26e3@find-dependencies (unspecified)) (set! lV26e5@find-library-by (unspecified)) (set! lV26e7@library-path (unspecified)) (set! lV26e9@library-extensions (unspecified)) (set! lV26eb@library-name->file-name (unspecified)) (set! lV26ed@file-locator (unspecified)) (set! lV26ef@serialize-all (unspecified)) (set! lV26f1@current-precompiled-library-loader (unspecified)) (set! lV26f3@try-load-from-file (unspecified)) (set! lV26f5@library-loader (unspecified)) (set! lV26f7@current-library-expander (unspecified)) (set! lV26f9@external-pending-libraries (unspecified)) (set! lV26fb@find-external-library (unspecified)) (set! lV26fd@find-library-by-name (unspecified)) (set! lV26ff@library-exists? (unspecified)) (set! lV2701@find-library-by-spec/die (unspecified)) (set! lV2703@label->binding-table (unspecified)) (set! lV2705@install-library-record (unspecified)) (set! lV2707@install-library (unspecified)) (set! lV2709@imported-label->binding (unspecified)) (set! lV270b@invoke-library (unspecified)) (set! lV270d@visit-library (unspecified)) (set! lV270f@invoke-library-by-spec (unspecified)) (set! lV2711@installed-libraries (unspecified)) (set! lV2713@library-spec (unspecified)) (begin (set! lV2699@make-collection (lambda () (let ((lV2714@set '())) (let ((lV2717@set-cons '#f)) (begin (set! lV2717@set-cons (lambda (lV271c@x lV271d@ls) (if (memq lV271c@x lV271d@ls) lV271d@ls (cons lV271c@x lV271d@ls)))) (lambda lV271a (let ((lV271b (length lV271a))) (if (= lV271b '0) (apply (lambda () lV2714@set) lV271a) (if (= lV271b '1) (apply (lambda (lV2718@x) (set! lV2714@set (lV2717@set-cons lV2718@x lV2714@set))) lV271a) (error 'apply '"invalid arg count")))))))))) (set! lV2888@lV2699@make-collection lV2699@make-collection)) (begin (set! lV269b@current-library-collection (lV25f1@lV24d0@make-parameter (lV2699@make-collection) (lambda (lV2720@x) (begin (if (not (procedure? lV2720@x)) (assertion-violation 'current-library-collection '"not a procedure" lV2720@x) (void)) lV2720@x)))) (set! lV2889@lV269b@current-library-collection lV269b@current-library-collection)) (begin (set! lV269d@rp (lV25ee@lV24ca@make-record-printer 'library (lambda (lV2722@x lV2723@p lV2724@wr) (begin (if (not (lV26a7@library? lV2722@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (lV26b1@library-version lV2722@x)) (lV26ad@library-name lV2722@x) (append (lV26ad@library-name lV2722@x) (list (lV26b1@library-version lV2722@x))))) lV2723@p))))) (set! lV288a@lV269d@rp lV269d@rp)) (begin (set! lV26a7@library? (lambda (lV2728@x) (and (simple-struct? lV2728@x) (eq? (simple-struct-name lV2728@x) 'library)))) (set! lV288b@lV26a7@library? lV26a7@library?)) (begin (set! lV26a9@library-id (lambda (lV272a@x) (simple-struct-ref lV272a@x '0))) (set! lV288c@lV26a9@library-id lV26a9@library-id)) (begin (set! lV26ab@set-library-id! (lambda (lV272c@x lV272d@val) (simple-struct-set! lV272c@x '0 lV272d@val))) (set! lV288d@lV26ab@set-library-id! lV26ab@set-library-id!)) (begin (set! lV26ad@library-name (lambda (lV2730@x) (simple-struct-ref lV2730@x '1))) (set! lV288e@lV26ad@library-name lV26ad@library-name)) (begin (set! lV26af@set-library-name! (lambda (lV2732@x lV2733@val) (simple-struct-set! lV2732@x '1 lV2733@val))) (set! lV288f@lV26af@set-library-name! lV26af@set-library-name!)) (begin (set! lV26b1@library-version (lambda (lV2736@x) (simple-struct-ref lV2736@x '2))) (set! lV2890@lV26b1@library-version lV26b1@library-version)) (begin (set! lV26b3@set-library-version! (lambda (lV2738@x lV2739@val) (simple-struct-set! lV2738@x '2 lV2739@val))) (set! lV2891@lV26b3@set-library-version! lV26b3@set-library-version!)) (begin (set! lV26b5@library-imp* (lambda (lV273c@x) (simple-struct-ref lV273c@x '3))) (set! lV2892@lV26b5@library-imp* lV26b5@library-imp*)) (begin (set! lV26b7@set-library-imp*! (lambda (lV273e@x lV273f@val) (simple-struct-set! lV273e@x '3 lV273f@val))) (set! lV2893@lV26b7@set-library-imp*! lV26b7@set-library-imp*!)) (begin (set! lV26b9@library-vis* (lambda (lV2742@x) (simple-struct-ref lV2742@x '4))) (set! lV2894@lV26b9@library-vis* lV26b9@library-vis*)) (begin (set! lV26bb@set-library-vis*! (lambda (lV2744@x lV2745@val) (simple-struct-set! lV2744@x '4 lV2745@val))) (set! lV2895@lV26bb@set-library-vis*! lV26bb@set-library-vis*!)) (begin (set! lV26bd@library-inv* (lambda (lV2748@x) (simple-struct-ref lV2748@x '5))) (set! lV2896@lV26bd@library-inv* lV26bd@library-inv*)) (begin (set! lV26bf@set-library-inv*! (lambda (lV274a@x lV274b@val) (simple-struct-set! lV274a@x '5 lV274b@val))) (set! lV2897@lV26bf@set-library-inv*! lV26bf@set-library-inv*!)) (begin (set! lV26c1@library-subst (lambda (lV274e@x) (simple-struct-ref lV274e@x '6))) (set! lV2898@lV26c1@library-subst lV26c1@library-subst)) (begin (set! lV26c3@set-library-subst! (lambda (lV2750@x lV2751@val) (simple-struct-set! lV2750@x '6 lV2751@val))) (set! lV2899@lV26c3@set-library-subst! lV26c3@set-library-subst!)) (begin (set! lV26c5@library-env (lambda (lV2754@x) (simple-struct-ref lV2754@x '7))) (set! lV289a@lV26c5@library-env lV26c5@library-env)) (begin (set! lV26c7@set-library-env! (lambda (lV2756@x lV2757@val) (simple-struct-set! lV2756@x '7 lV2757@val))) (set! lV289b@lV26c7@set-library-env! lV26c7@set-library-env!)) (begin (set! lV26c9@library-visit-state (lambda (lV275a@x) (simple-struct-ref lV275a@x '8))) (set! lV289c@lV26c9@library-visit-state lV26c9@library-visit-state)) (begin (set! lV26cb@set-library-visit-state! (lambda (lV275c@x lV275d@val) (simple-struct-set! lV275c@x '8 lV275d@val))) (set! lV289d@lV26cb@set-library-visit-state! lV26cb@set-library-visit-state!)) (begin (set! lV26cd@library-invoke-state (lambda (lV2760@x) (simple-struct-ref lV2760@x '9))) (set! lV289e@lV26cd@library-invoke-state lV26cd@library-invoke-state)) (begin (set! lV26cf@set-library-invoke-state! (lambda (lV2762@x lV2763@val) (simple-struct-set! lV2762@x '9 lV2763@val))) (set! lV289f@lV26cf@set-library-invoke-state! lV26cf@set-library-invoke-state!)) (begin (set! lV26d1@library-visit-code (lambda (lV2766@x) (simple-struct-ref lV2766@x '10))) (set! lV28a0@lV26d1@library-visit-code lV26d1@library-visit-code)) (begin (set! lV26d3@set-library-visit-code! (lambda (lV2768@x lV2769@val) (simple-struct-set! lV2768@x '10 lV2769@val))) (set! lV28a1@lV26d3@set-library-visit-code! lV26d3@set-library-visit-code!)) (begin (set! lV26d5@library-invoke-code (lambda (lV276c@x) (simple-struct-ref lV276c@x '11))) (set! lV28a2@lV26d5@library-invoke-code lV26d5@library-invoke-code)) (begin (set! lV26d7@set-library-invoke-code! (lambda (lV276e@x lV276f@val) (simple-struct-set! lV276e@x '11 lV276f@val))) (set! lV28a3@lV26d7@set-library-invoke-code! lV26d7@set-library-invoke-code!)) (begin (set! lV26d9@library-visible? (lambda (lV2772@x) (simple-struct-ref lV2772@x '12))) (set! lV28a4@lV26d9@library-visible? lV26d9@library-visible?)) (begin (set! lV26db@set-library-visible?! (lambda (lV2774@x lV2775@val) (simple-struct-set! lV2774@x '12 lV2775@val))) (set! lV28a5@lV26db@set-library-visible?! lV26db@set-library-visible?!)) (begin (set! lV26dd@library-source-file-name (lambda (lV2778@x) (simple-struct-ref lV2778@x '13))) (set! lV28a6@lV26dd@library-source-file-name lV26dd@library-source-file-name)) (begin (set! lV26df@set-library-source-file-name! (lambda (lV277a@x lV277b@val) (simple-struct-set! lV277a@x '13 lV277b@val))) (set! lV28a7@lV26df@set-library-source-file-name! lV26df@set-library-source-file-name!)) (begin (set! lV26e1@dummy '3) (set! lV28a8@lV26e1@dummy lV26e1@dummy)) (begin (set! lV26e3@find-dependencies (lambda (lV277e@ls) (if (null? lV277e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! lV28a9@lV26e3@find-dependencies lV26e3@find-dependencies)) (begin (set! lV26e5@find-library-by (lambda (lV2780@pred) (let lV2784@f ((lV2782@ls ((lV269b@current-library-collection)))) (if (null? lV2782@ls) '#f (if (lV2780@pred (car lV2782@ls)) (car lV2782@ls) (lV2784@f (cdr lV2782@ls))))))) (set! lV28aa@lV26e5@find-library-by lV26e5@find-library-by)) (begin (set! lV26e7@library-path (lV25f1@lV24d0@make-parameter '(".") (lambda (lV2786@x) (if (and (list? lV2786@x) (for-all string? lV2786@x)) (map (lambda (lV2788@x) lV2788@x) lV2786@x) (assertion-violation 'library-path '"not a list of strings" lV2786@x))))) (set! lV28ab@lV26e7@library-path lV26e7@library-path)) (begin (set! lV26e9@library-extensions (lV25f1@lV24d0@make-parameter '(".sls" ".ss" ".scm") (lambda (lV278a@x) (if (and (list? lV278a@x) (for-all string? lV278a@x)) (map (lambda (lV278c@x) lV278c@x) lV278a@x) (assertion-violation 'library-extensions '"not a list of strings" lV278a@x))))) (set! lV28ac@lV26e9@library-extensions lV26e9@library-extensions)) (begin (set! lV26eb@library-name->file-name (lambda (lV278e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lV2794@lV2791 lV2795@lV2793) (let ((lV2798@extract lV2795@lV2793) (lV2799@p lV2794@lV2791)) (let ((lV279d@display-hex '#f)) (begin (set! lV279d@display-hex (lambda (lV27a6@n) (if (<= '0 lV27a6@n '9) (display lV27a6@n lV2799@p) (display (integer->char (+ (char->integer '#\a) (- lV27a6@n '10))) lV2799@p)))) (begin (let lV27a0@f ((lV279e@ls lV278e@x)) (if (not (null? lV279e@ls)) (begin (display '"/" lV2799@p) (for-each (lambda (lV27a2@c) (if (or (char<=? '#\a lV27a2@c '#\z) (char<=? '#\A lV27a2@c '#\Z) (char<=? '#\0 lV27a2@c '#\9) (memv lV27a2@c '(#\- #\. #\_ #\~))) (display lV27a2@c lV2799@p) (begin (display '"%" lV2799@p) (let ((lV27a4@n (char->integer lV27a2@c))) (begin (lV279d@display-hex (quotient lV27a4@n '16)) (lV279d@display-hex (remainder lV27a4@n '16))))))) (string->list (symbol->string (car lV279e@ls)))) (lV27a0@f (cdr lV279e@ls))) (void))) (lV2798@extract))))))))) (set! lV28ad@lV26eb@library-name->file-name lV26eb@library-name->file-name)) (begin (set! lV26ed@file-locator (lV25f1@lV24d0@make-parameter (lambda (lV27a8@x) (let ((lV27aa@str (lV26eb@library-name->file-name lV27a8@x))) (let lV27b2@f ((lV27ac@ls (lV26e7@library-path)) (lV27ad@exts (lV26e9@library-extensions)) (lV27ae@failed-list '())) (if (null? lV27ac@ls) (let ((lV27bc@lV27b7 '#f) (lV27be@lV27b9 '#f) (lV27c0@lV27b8 '#f) (lV27c3@lV27b6 '#f) (lV27c5@make-library-resolution-condition '#f) (lV27c7@lV27b4 '#f) (lV27c9@lV27b5 '#f) (lV27cb@library-resolution-condition? '#f) (lV27cd@condition-library '#f) (lV27cf@condition-files '#f)) (begin (set! lV27bc@lV27b7 (make-record-type-descriptor '&library-resolution lV4ac1@lV4808@&condition-rtd 'lV27ba '#f '#f '#((immutable library) (immutable files)))) (set! lV27be@lV27b9 '#f) (set! lV27c0@lV27b8 (make-record-constructor-descriptor lV27bc@lV27b7 lV4ac2@lV480a@&condition-rcd lV27be@lV27b9)) (set! lV27c3@lV27b6 (record-predicate lV27bc@lV27b7)) (set! lV27c5@make-library-resolution-condition (record-constructor lV27c0@lV27b8)) (set! lV27c7@lV27b4 (record-accessor lV27bc@lV27b7 '0)) (set! lV27c9@lV27b5 (record-accessor lV27bc@lV27b7 '1)) (set! lV27cb@library-resolution-condition? (condition-predicate lV27bc@lV27b7)) (set! lV27cd@condition-library (condition-accessor lV27bc@lV27b7 lV27c7@lV27b4)) (set! lV27cf@condition-files (condition-accessor lV27bc@lV27b7 lV27c9@lV27b5)) (raise (condition (lV4ae1@lV48a2@make-error) (lV4b03@lV48fe@make-who-condition 'expander) (lV4ac7@lV485f@make-message-condition '"cannot locate library in library-path") (lV27c5@make-library-resolution-condition lV27a8@x (reverse lV27ae@failed-list)))))) (if (null? lV27ad@exts) (lV27b2@f (cdr lV27ac@ls) (lV26e9@library-extensions) lV27ae@failed-list) (let ((lV27d0@name (string-append (car lV27ac@ls) lV27aa@str (car lV27ad@exts)))) (if (file-exists? lV27d0@name) lV27d0@name (lV27b2@f lV27ac@ls (cdr lV27ad@exts) (cons lV27d0@name lV27ae@failed-list))))))))) (lambda (lV27d2@f) (if (procedure? lV27d2@f) lV27d2@f (assertion-violation 'file-locator '"not a procedure" lV27d2@f))))) (set! lV28ae@lV26ed@file-locator lV26ed@file-locator)) (begin (set! lV26ef@serialize-all (lambda (lV27d4@serialize lV27d5@compile) (let ((lV27d9@library-desc '#f)) (begin (set! lV27d9@library-desc (lambda (lV27dc@x) (list (lV26a9@library-id lV27dc@x) (lV26ad@library-name lV27dc@x)))) (for-each (lambda (lV27da@x) (if (lV26dd@library-source-file-name lV27da@x) (lV27d4@serialize (lV26dd@library-source-file-name lV27da@x) (list (lV26a9@library-id lV27da@x) (lV26ad@library-name lV27da@x) (lV26b1@library-version lV27da@x) (map lV27d9@library-desc (lV26b5@library-imp* lV27da@x)) (map lV27d9@library-desc (lV26b9@library-vis* lV27da@x)) (map lV27d9@library-desc (lV26bd@library-inv* lV27da@x)) (lV26c1@library-subst lV27da@x) (lV26c5@library-env lV27da@x) (lV27d5@compile (lV26d1@library-visit-code lV27da@x)) (lV27d5@compile (lV26d5@library-invoke-code lV27da@x)) (lV26d9@library-visible? lV27da@x))) (void))) ((lV269b@current-library-collection))))))) (set! lV28af@lV26ef@serialize-all lV26ef@serialize-all)) (begin (set! lV26f1@current-precompiled-library-loader (lV25f1@lV24d0@make-parameter (lambda (lV27de@filename lV27df@sk) '#f))) (set! lV28b0@lV26f1@current-precompiled-library-loader lV26f1@current-precompiled-library-loader)) (begin (set! lV26f3@try-load-from-file (lambda (lV27e2@filename) ((lV26f1@current-precompiled-library-loader) lV27e2@filename (lambda lV2808 (let ((lV2809 (length lV2808))) (if (= lV2809 '11) (apply (lambda (lV27e4@id lV27e5@name lV27e6@ver lV27e7@imp* lV27e8@vis* lV27e9@inv* lV27ea@exp-subst lV27eb@exp-env lV27ec@visit-proc lV27ed@invoke-proc lV27ee@visible?) (let lV27fc@f ((lV27fa@deps (append lV27e7@imp* lV27e8@vis* lV27e9@inv*))) (if (null? lV27fa@deps) (begin (lV2707@install-library lV27e4@id lV27e5@name lV27e6@ver lV27e7@imp* lV27e8@vis* lV27e9@inv* lV27ea@exp-subst lV27eb@exp-env lV27ec@visit-proc lV27ed@invoke-proc '#f '#f lV27ee@visible? '#f) '#t) (let ((lV27fe@d (car lV27fa@deps))) (let ((lV2800@label (car lV27fe@d)) (lV2801@dname (cadr lV27fe@d))) (let ((lV2804@l (lV26fd@find-library-by-name lV2801@dname))) (if (and (lV26a7@library? lV2804@l) (eq? lV2800@label (lV26a9@library-id lV2804@l))) (lV27fc@f (cdr lV27fa@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" lV27e5@name lV2801@dname lV27e2@filename lV2804@l lV2800@label (lV26a9@library-id lV2804@l)) '#f)))))))) lV2808) (if (>= lV2809 '0) (apply (lambda lV2806@others '#f) lV2808) (error 'apply '"invalid arg count")))))))) (set! lV28b1@lV26f3@try-load-from-file lV26f3@try-load-from-file)) (begin (set! lV26f5@library-loader (lV25f1@lV24d0@make-parameter (lambda (lV280a@x) (let ((lV280c@file-name ((lV26ed@file-locator) lV280a@x))) (if (not lV280c@file-name) (assertion-violation '#f '"cannot file library" lV280a@x) (or (lV26f3@try-load-from-file lV280c@file-name) ((lV26f7@current-library-expander) (lV25f0@lV24ce@read-library-source-file lV280c@file-name) lV280c@file-name (lambda (lV280e@name) (if (not (fast-equal? lV280e@name lV280a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (lV2814@lV2811 lV2815@lV2813) (let ((lV2818@e lV2815@lV2813) (lV2819@p lV2814@lV2811)) (begin (display '"expected to find library " lV2819@p) (write lV280a@x lV2819@p) (display '" in file " lV2819@p) (display lV280c@file-name lV2819@p) (display '", found " lV2819@p) (write lV280e@name lV2819@p) (display '" instead" lV2819@p) (lV2818@e)))))) (void)))))))) (lambda (lV281c@f) (if (procedure? lV281c@f) lV281c@f (assertion-violation 'library-locator '"not a procedure" lV281c@f))))) (set! lV28b2@lV26f5@library-loader lV26f5@library-loader)) (begin (set! lV26f7@current-library-expander (lV25f1@lV24d0@make-parameter (lambda (lV281e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (lV2820@f) (if (procedure? lV2820@f) lV2820@f (assertion-violation 'library-expander '"not a procedure" lV2820@f))))) (set! lV28b3@lV26f7@current-library-expander lV26f7@current-library-expander)) (begin (set! lV26f9@external-pending-libraries (lV25f1@lV24d0@make-parameter '())) (set! lV28b4@lV26f9@external-pending-libraries lV26f9@external-pending-libraries)) (begin (set! lV26fb@find-external-library (lambda (lV2822@name) (begin (if (member lV2822@name (lV26f9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" lV2822@name) (void)) (let ((lV2828@lV2825 lV26f9@external-pending-libraries) (lV2829@lV2827 (cons lV2822@name (lV26f9@external-pending-libraries)))) (let ((lV282c@swap (lambda () (let ((lV282e@t (lV2828@lV2825))) (begin (lV2828@lV2825 lV2829@lV2827) (set! lV2829@lV2827 lV282e@t)))))) (dynamic-wind lV282c@swap (lambda () (begin ((lV26f5@library-loader) lV2822@name) (or (lV26e5@find-library-by (lambda (lV2830@x) (fast-equal? (lV26ad@library-name lV2830@x) lV2822@name))) (assertion-violation '#f '"handling external library did not yield the correct library" lV2822@name)))) lV282c@swap)))))) (set! lV28b5@lV26fb@find-external-library lV26fb@find-external-library)) (begin (set! lV26fd@find-library-by-name (lambda (lV2832@name) (or (lV26e5@find-library-by (lambda (lV2834@x) (fast-equal? (lV26ad@library-name lV2834@x) lV2832@name))) (lV26fb@find-external-library lV2832@name)))) (set! lV28b6@lV26fd@find-library-by-name lV26fd@find-library-by-name)) (begin (set! lV26ff@library-exists? (lambda (lV2836@name) (and (lV26e5@find-library-by (lambda (lV2838@x) (fast-equal? (lV26ad@library-name lV2838@x) lV2836@name))) '#t))) (set! lV28b7@lV26ff@library-exists? lV26ff@library-exists?)) (begin (set! lV2701@find-library-by-spec/die (lambda (lV283a@spec) (let ((lV283c@id (car lV283a@spec))) (or (lV26e5@find-library-by (lambda (lV283e@x) (eq? lV283c@id (lV26a9@library-id lV283e@x)))) (assertion-violation '#f '"cannot find library with required spec" lV283a@spec))))) (set! lV28b8@lV2701@find-library-by-spec/die lV2701@find-library-by-spec/die)) (begin (set! lV2703@label->binding-table (make-eq-hashtable)) (set! lV28b9@lV2703@label->binding-table lV2703@label->binding-table)) (begin (set! lV2705@install-library-record (lambda (lV2840@lib) (begin (let ((lV2842@exp-env (lV26c5@library-env lV2840@lib))) (for-each (lambda (lV2844@x) (let ((lV2846@label (car lV2844@x)) (lV2847@binding (cdr lV2844@x))) (let ((lV284a@binding (let ((lV284c@t (car lV2847@binding))) (if (memv lV284c@t '(global)) (cons 'global (cons lV2840@lib (cdr lV2847@binding))) (if (memv lV284c@t '(global-macro)) (cons 'global-macro (cons lV2840@lib (cdr lV2847@binding))) (if (memv lV284c@t '(global-macro!)) (cons 'global-macro! (cons lV2840@lib (cdr lV2847@binding))) lV2847@binding)))))) (begin (if (hashtable-ref lV2703@label->binding-table lV2846@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" lV2846@label (hashtable-ref lV2703@label->binding-table lV2846@label '#f) lV284a@binding) (exit)) (void)) (hashtable-set! lV2703@label->binding-table lV2846@label lV284a@binding))))) lV2842@exp-env)) ((lV269b@current-library-collection) lV2840@lib)))) (set! lV28ba@lV2705@install-library-record lV2705@install-library-record)) (begin (set! lV2707@install-library (lambda (lV284e@id lV284f@name lV2850@ver lV2851@imp* lV2852@vis* lV2853@inv* lV2854@exp-subst lV2855@exp-env lV2856@visit-proc lV2857@invoke-proc lV2858@visit-code lV2859@invoke-code lV285a@visible? lV285b@source-file-name) (let ((lV286a@imp-lib* (map lV2701@find-library-by-spec/die lV2851@imp*)) (lV286b@vis-lib* (map lV2701@find-library-by-spec/die lV2852@vis*)) (lV286c@inv-lib* (map lV2701@find-library-by-spec/die lV2853@inv*))) (begin (if (not (and (symbol? lV284e@id) (list? lV284f@name) (list? lV2850@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" lV284e@id lV284f@name lV2850@ver) (void)) (if (lV26ff@library-exists? lV284f@name) (assertion-violation 'install-library '"library is already installed" lV284f@name) (void)) (let ((lV2870@lib (make-simple-struct 'library '15 (list lV284e@id lV284f@name lV2850@ver lV286a@imp-lib* lV286b@vis-lib* lV286c@inv-lib* lV2854@exp-subst lV2855@exp-env lV2856@visit-proc lV2857@invoke-proc lV2858@visit-code lV2859@invoke-code lV285a@visible? lV285b@source-file-name)))) (lV2705@install-library-record lV2870@lib)))))) (set! lV28bb@lV2707@install-library lV2707@install-library)) (begin (set! lV2709@imported-label->binding (lambda (lV2872@lab) (hashtable-ref lV2703@label->binding-table lV2872@lab '#f))) (set! lV28bc@lV2709@imported-label->binding lV2709@imported-label->binding)) (begin (set! lV270b@invoke-library (lambda (lV2874@lib) (let ((lV2876@invoke (lV26cd@library-invoke-state lV2874@lib))) (if (procedure? lV2876@invoke) (begin (lV26cf@set-library-invoke-state! lV2874@lib (lambda () (assertion-violation 'invoke '"circularity detected" lV2874@lib))) (for-each lV270b@invoke-library (lV26bd@library-inv* lV2874@lib)) (lV26cf@set-library-invoke-state! lV2874@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" lV2874@lib))) (lV2876@invoke) (lV26cf@set-library-invoke-state! lV2874@lib '#t)) (void))))) (set! lV28bd@lV270b@invoke-library lV270b@invoke-library)) (begin (set! lV270d@visit-library (lambda (lV2878@lib) (let ((lV287a@visit (lV26c9@library-visit-state lV2878@lib))) (if (procedure? lV287a@visit) (begin (lV26cb@set-library-visit-state! lV2878@lib (lambda () (assertion-violation 'visit '"circularity detected" lV2878@lib))) (for-each lV270b@invoke-library (lV26b9@library-vis* lV2878@lib)) (lV26cb@set-library-visit-state! lV2878@lib (lambda () (assertion-violation 'invoke '"first visit did not return" lV2878@lib))) (lV287a@visit) (lV26cb@set-library-visit-state! lV2878@lib '#t)) (void))))) (set! lV28be@lV270d@visit-library lV270d@visit-library)) (begin (set! lV270f@invoke-library-by-spec (lambda (lV287c@spec) (lV270b@invoke-library (lV2701@find-library-by-spec/die lV287c@spec)))) (set! lV28bf@lV270f@invoke-library-by-spec lV270f@invoke-library-by-spec)) (begin (set! lV2711@installed-libraries (lambda lV2884 (let ((lV2885 (length lV2884))) (if (= lV2885 '1) (apply (lambda (lV287e@all?) (let lV2882@f ((lV2880@ls ((lV269b@current-library-collection)))) (if (null? lV2880@ls) '() (if (or lV287e@all? (lV26d9@library-visible? (car lV2880@ls))) (cons (car lV2880@ls) (lV2882@f (cdr lV2880@ls))) (lV2882@f (cdr lV2880@ls)))))) lV2884) (if (= lV2885 '0) (apply (lambda () (lV2711@installed-libraries '#f)) lV2884) (error 'apply '"invalid arg count")))))) (set! lV28c0@lV2711@installed-libraries lV2711@installed-libraries)) (begin (set! lV2713@library-spec (lambda (lV2886@x) (begin (if (not (lV26a7@library? lV2886@x)) (assertion-violation 'library-spec '"not a library" lV2886@x) (void)) (list (lV26a9@library-id lV2886@x) (lV26ad@library-name lV2886@x) (lV26b1@library-version lV2886@x))))) (set! lV28c1@lV2713@library-spec lV2713@library-spec)) (void))
(begin (set! lV28c5@build-global-define (unspecified)) (set! lV2936@build-lambda (unspecified)) (set! lV2938@build-case-lambda (unspecified)) (set! lV2966@build-sequence (unspecified)) (set! lV2968@build-void (unspecified)) (set! lV296a@build-letrec (unspecified)) (set! lV296c@build-let (unspecified)) (set! lV296e@build-named-let (unspecified)) (set! lV2970@build-letrec* (unspecified)) (set! lV2972@build-library-letrec* (unspecified)) (set! lV2974@build-receive (unspecified)) (begin (set! lV28c5@build-global-define (lambda (lV2975@x) (lV2968@build-void))) (set! lV2a09@lV28c5@build-global-define lV28c5@build-global-define)) (begin (set! lV2936@build-lambda (lambda (lV2977@ae lV2978@vars lV2979@exp) (list 'lambda lV2978@vars lV2979@exp))) (set! lV2a0a@lV2936@build-lambda lV2936@build-lambda)) (begin (set! lV2938@build-case-lambda (lambda (lV297d@ae lV297e@vars* lV297f@exp*) (let ((lV2984@build-error '#f) (lV2986@build-pred '#f) (lV2988@build-apply '#f) (lV298a@expand-case-lambda '#f)) (begin (set! lV2984@build-error (lambda (lV29bb@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! lV2986@build-pred (lambda (lV29a3@ae lV29a4@n lV29a5@vars) (call-with-values (lambda () (let lV29b1@f3 ((lV29ad@vars lV29a5@vars) (lV29ae@count '0)) (if (pair? lV29ad@vars) (lV29b1@f3 (cdr lV29ad@vars) (+ lV29ae@count '1)) (if (null? lV29ad@vars) (values lV29ae@count '=) (values lV29ae@count '>=))))) (lambda (lV29b3@lV29aa lV29b4@lV29ac) (let ((lV29b7@pred lV29b4@lV29ac) (lV29b8@count lV29b3@lV29aa)) (list (list 'primitive lV29b7@pred) lV29a4@n (list 'quote lV29b8@count))))))) (set! lV2988@build-apply (lambda (lV299b@ae lV299c@g lV299d@vars lV299e@exp) (list '(primitive apply) (lV2936@build-lambda lV299b@ae lV299d@vars lV299e@exp) lV299c@g))) (set! lV298a@expand-case-lambda (lambda (lV298b@ae lV298c@vars lV298d@exp*) (let ((lV2991@g (gensym)) (lV2992@n (gensym))) (list 'lambda lV2991@g (lV296c@build-let lV298b@ae (list lV2992@n) (list (list '(primitive length) lV2991@g)) (let lV2999@f4 ((lV2995@vars* lV297e@vars*) (lV2996@exp* lV298d@exp*)) (if (null? lV2995@vars*) (lV2984@build-error lV298b@ae) (list 'if (lV2986@build-pred lV298b@ae lV2992@n (car lV2995@vars*)) (lV2988@build-apply lV298b@ae lV2991@g (car lV2995@vars*) (car lV2996@exp*)) (lV2999@f4 (cdr lV2995@vars*) (cdr lV2996@exp*)))))))))) (if (= (length lV297f@exp*) '1) (lV2936@build-lambda lV297d@ae (car lV297e@vars*) (car lV297f@exp*)) (lV298a@expand-case-lambda lV297d@ae lV297e@vars* lV297f@exp*)))))) (set! lV2a0b@lV2938@build-case-lambda lV2938@build-case-lambda)) (begin (set! lV2966@build-sequence (lambda (lV29bd@ae lV29be@exps) (let lV29c3@loop ((lV29c1@exps lV29be@exps)) (if (null? (cdr lV29c1@exps)) (car lV29c1@exps) (if (equal? (car lV29c1@exps) (lV2968@build-void)) (lV29c3@loop (cdr lV29c1@exps)) (cons 'begin lV29c1@exps)))))) (set! lV2a0c@lV2966@build-sequence lV2966@build-sequence)) (begin (set! lV2968@build-void (lambda () '((primitive void)))) (set! lV2a0d@lV2968@build-void lV2968@build-void)) (begin (set! lV296a@build-letrec (lambda (lV29c5@ae lV29c6@vars lV29c7@val-exps lV29c8@body-exp) (if (null? lV29c6@vars) lV29c8@body-exp (list 'letrec (map list lV29c6@vars lV29c7@val-exps) lV29c8@body-exp)))) (set! lV2a0e@lV296a@build-letrec lV296a@build-letrec)) (begin (set! lV296c@build-let (lambda (lV29cd@ae lV29ce@vars lV29cf@val-exps lV29d0@body-exp) (if (null? lV29ce@vars) lV29d0@body-exp (list 'let (map list lV29ce@vars lV29cf@val-exps) lV29d0@body-exp)))) (set! lV2a0f@lV296c@build-let lV296c@build-let)) (begin (set! lV296e@build-named-let (lambda (lV29d5@ae lV29d6@name lV29d7@vars lV29d8@val-exps lV29d9@body-exp) (begin (display (list 'let lV29d6@name (map list lV29d7@vars lV29d8@val-exps) lV29d9@body-exp) (current-error-port)) (list 'let lV29d6@name (map list lV29d7@vars lV29d8@val-exps) lV29d9@body-exp)))) (set! lV2a10@lV296e@build-named-let lV296e@build-named-let)) (begin (set! lV2970@build-letrec* (lambda (lV29df@ae lV29e0@vars lV29e1@val-exps lV29e2@body-exp) (if (null? lV29e0@vars) lV29e2@body-exp (lV296c@build-let lV29df@ae lV29e0@vars (map (lambda (lV29e7@x) (list 'quote '#f)) lV29e0@vars) (lV2966@build-sequence lV29df@ae (append (map (lambda (lV29e9@lhs lV29ea@rhs) (list 'set! lV29e9@lhs lV29ea@rhs)) lV29e0@vars lV29e1@val-exps) (list lV29e2@body-exp))))))) (set! lV2a11@lV2970@build-letrec* lV2970@build-letrec*)) (begin (set! lV2972@build-library-letrec* (lambda (lV29ed@ae lV29ee@name lV29ef@vars lV29f0@locs lV29f1@val-exps lV29f2@body-exp) (cons 'begin (append (map (lambda (lV29f9@var) (cons 'set! (cons lV29f9@var '((unspecified))))) lV29ef@vars) (append (map (lambda (lV29fb@var lV29fc@loc lV29fd@val-exp) (list 'begin (list 'set! lV29fb@var lV29fd@val-exp) (list 'set! lV29fc@loc lV29fb@var))) lV29ef@vars lV29f0@locs lV29f1@val-exps) (list lV29f2@body-exp)))))) (set! lV2a12@lV2972@build-library-letrec* lV2972@build-library-letrec*)) (begin (set! lV2974@build-receive (lambda (lV2a01@ae lV2a02@vars lV2a03@producer lV2a04@body*) (begin (display '"************** in ") (cons 'receive (cons lV2a02@vars (cons lV2a03@producer lV2a04@body*)))))) (set! lV2a13@lV2974@build-receive lV2974@build-receive)) (void))
(begin (set! lV2a22@file-options-macro (unspecified)) (set! lV2a24@set-cons (unspecified)) (set! lV2a26@set-union (unspecified)) (set! lV2a2b@top-mark* (unspecified)) (set! lV2a2d@top-marked? (unspecified)) (set! lV2a2f@gen-lexical (unspecified)) (set! lV2a31@gen-global (unspecified)) (set! lV2a33@gen-label (unspecified)) (set! lV2a35@gen-top-level-label (unspecified)) (set! lV2a37@gen-define-label+loc (unspecified)) (set! lV2a39@gen-define-label (unspecified)) (set! lV2a43@rib? (unspecified)) (set! lV2a45@rib-sym* (unspecified)) (set! lV2a47@set-rib-sym*! (unspecified)) (set! lV2a49@rib-mark** (unspecified)) (set! lV2a4b@set-rib-mark**! (unspecified)) (set! lV2a4d@rib-label* (unspecified)) (set! lV2a4f@set-rib-label*! (unspecified)) (set! lV2a51@rib-sealed/freq (unspecified)) (set! lV2a53@set-rib-sealed/freq! (unspecified)) (set! lV2a55@rib-cache (unspecified)) (set! lV2a57@set-rib-cache! (unspecified)) (set! lV2a59@dummy (unspecified)) (set! lV2a5b@make-empty-rib (unspecified)) (set! lV2a5d@extend-rib! (unspecified)) (set! lV2a5f@extend-rib/nc! (unspecified)) (set! lV2a61@make-rib-map (unspecified)) (set! lV2a63@seal-rib! (unspecified)) (set! lV2a65@unseal-rib! (unspecified)) (set! lV2a67@make-full-rib (unspecified)) (set! lV2a69@rp (unspecified)) (set! lV2a73@stx? (unspecified)) (set! lV2a75@stx-expr (unspecified)) (set! lV2a77@set-stx-expr! (unspecified)) (set! lV2a79@stx-mark* (unspecified)) (set! lV2a7b@set-stx-mark*! (unspecified)) (set! lV2a7d@stx-subst* (unspecified)) (set! lV2a7f@set-stx-subst*! (unspecified)) (set! lV2a81@stx-ae* (unspecified)) (set! lV2a83@set-stx-ae*! (unspecified)) (set! lV2a85@dummy (unspecified)) (set! lV2a87@datum->stx (unspecified)) (set! lV2a89@gen-mark (unspecified)) (set! lV2a8b@anti-mark (unspecified)) (set! lV2a8d@anti-mark? (unspecified)) (set! lV2a8f@mkstx (unspecified)) (set! lV2a91@add-mark (unspecified)) (set! lV2a93@add-subst (unspecified)) (set! lV2a95@syntax-kind? (unspecified)) (set! lV2a97@syntax-vector->list (unspecified)) (set! lV2a99@syntax-pair? (unspecified)) (set! lV2a9b@syntax-vector? (unspecified)) (set! lV2a9d@syntax-null? (unspecified)) (set! lV2a9f@syntax-list? (unspecified)) (set! lV2aa1@syntax-car (unspecified)) (set! lV2aa3@syntax-cdr (unspecified)) (set! lV2aa5@syntax->list (unspecified)) (set! lV2aa7@id? (unspecified)) (set! lV2aa9@id->sym (unspecified)) (set! lV2aab@bound-id=? (unspecified)) (set! lV2aad@free-id=? (unspecified)) (set! lV2aaf@valid-bound-ids? (unspecified)) (set! lV2ab1@distinct-bound-ids? (unspecified)) (set! lV2ab3@bound-id-member? (unspecified)) (set! lV2ab5@self-evaluating? (unspecified)) (set! lV2ab7@strip-annotations (unspecified)) (set! lV2ab9@strip (unspecified)) (set! lV2abb@stx->datum (unspecified)) (set! lV2abd@id->label (unspecified)) (set! lV2abf@label->binding (unspecified)) (set! lV2ac1@make-binding (unspecified)) (set! lV2ac3@binding-type (unspecified)) (set! lV2ac5@binding-value (unspecified)) (set! lV2ac7@raise-unbound-error (unspecified)) (set! lV2ac9@syntax-type (unspecified)) (set! lV2ad7@sanitize-binding (unspecified)) (set! lV2ad9@make-variable-transformer (unspecified)) (set! lV2adb@variable-transformer? (unspecified)) (set! lV2add@variable-transformer-procedure (unspecified)) (set! lV2adf@make-eval-transformer (unspecified)) (set! lV2c30@parse-define (unspecified)) (set! lV2c32@parse-define-syntax (unspecified)) (set! lV2c34@scheme-stx-hashtable (unspecified)) (set! lV2c36@scheme-stx (unspecified)) (set! lV2c38@lexical-var (unspecified)) (set! lV2c3a@lexical-mutable? (unspecified)) (set! lV2c3c@set-lexical-mutable! (unspecified)) (set! lV2c3e@add-lexical (unspecified)) (set! lV2c40@add-lexicals (unspecified)) (set! lV2c42@letrec-helper (unspecified)) (set! lV2c44@let-transformer (unspecified)) (set! lV2c46@letrec-transformer (unspecified)) (set! lV2c48@letrec*-transformer (unspecified)) (set! lV2c4a@fluid-let-syntax-transformer (unspecified)) (set! lV2c4c@type-descriptor-transformer (unspecified)) (set! lV2c4e@record-type-descriptor-transformer (unspecified)) (set! lV2c50@record-constructor-descriptor-transformer (unspecified)) (set! lV2c52@when-macro (unspecified)) (set! lV2c54@unless-macro (unspecified)) (set! lV2c56@if-transformer (unspecified)) (set! lV2c58@and-transformer (unspecified)) (set! lV2c5a@or-transformer (unspecified)) (set! lV2c5c@case-macro (unspecified)) (set! lV2c5e@quote-transformer (unspecified)) (set! lV2c60@case-lambda-transformer (unspecified)) (set! lV2c62@lambda-transformer (unspecified)) (set! lV2c64@bless (unspecified)) (set! lV2c66@with-syntax-macro (unspecified)) (set! lV2c68@invalid-fmls-error (unspecified)) (set! lV2c6a@let-macro (unspecified)) (set! lV2c6c@let-values-macro (unspecified)) (set! lV2c6e@let*-values-macro (unspecified)) (set! lV2c70@trace-lambda-macro (unspecified)) (set! lV2c72@trace-define-macro (unspecified)) (set! lV2c74@trace-define-syntax-macro (unspecified)) (set! lV2c76@trace-let/rec-syntax (unspecified)) (set! lV2c78@trace-let-syntax-macro (unspecified)) (set! lV2c7a@trace-letrec-syntax-macro (unspecified)) (set! lV2c7c@guard-macro (unspecified)) (set! lV2c7e@define-enumeration-macro (unspecified)) (set! lV2c80@time-macro (unspecified)) (set! lV2c82@delay-macro (unspecified)) (set! lV2c84@assert-macro (unspecified)) (set! lV2c86@endianness-macro (unspecified)) (set! lV2c88@identifier-syntax-macro (unspecified)) (set! lV2c8a@do-macro (unspecified)) (set! lV2c8c@let*-macro (unspecified)) (set! lV2c8e@or-macro (unspecified)) (set! lV2c90@and-macro (unspecified)) (set! lV2c92@cond-macro (unspecified)) (set! lV2c94@do-include (unspecified)) (set! lV2c96@include-macro (unspecified)) (set! lV2c98@include-into-macro (unspecified)) (set! lV2c9a@syntax-rules-macro (unspecified)) (set! lV2c9c@quasiquote-macro (unspecified)) (set! lV2c9e@quasisyntax-macro (unspecified)) (set! lV2ca0@define-struct-macro (unspecified)) (set! lV2ca2@define-record-type-macro (unspecified)) (set! lV2ca4@define-condition-type-macro (unspecified)) (set! lV2ca6@incorrect-usage-macro (unspecified)) (set! lV2ca8@parameterize-macro (unspecified)) (set! lV2caa@foreign-call-transformer (unspecified)) (set! lV2cac@convert-pattern (unspecified)) (set! lV2cae@syntax-dispatch (unspecified)) (set! lV2cb0@ellipsis? (unspecified)) (set! lV2cb2@underscore? (unspecified)) (set! lV2cb4@verify-literals (unspecified)) (set! lV2cb6@syntax-case-transformer (unspecified)) (set! lV2cb8@ellipsis-map (unspecified)) (set! lV2cba@syntax-transformer (unspecified)) (set! lV2cbc@core-macro-transformer (unspecified)) (set! lV2cbe@symbol-macro (unspecified)) (set! lV2cc0@macro-transformer (unspecified)) (set! lV2cc2@local-macro-transformer (unspecified)) (set! lV2cc4@do-macro-call (unspecified)) (set! lV2cc6@chi-macro (unspecified)) (set! lV2cc8@chi-local-macro (unspecified)) (set! lV2cca@chi-global-macro (unspecified)) (set! lV2ccc@chi-expr* (unspecified)) (set! lV2cce@chi-application (unspecified)) (set! lV2cd0@chi-expr (unspecified)) (set! lV2cd2@chi-set! (unspecified)) (set! lV2cd4@verify-formals (unspecified)) (set! lV2cd6@chi-lambda-clause (unspecified)) (set! lV2cd8@chi-lambda-clause* (unspecified)) (set! lV2cda@chi-defun (unspecified)) (set! lV2cdc@chi-rhs (unspecified)) (set! lV2cde@expand-interaction-rhs*/init* (unspecified)) (set! lV2ce0@chi-rhs* (unspecified)) (set! lV2ce2@find-bound=? (unspecified)) (set! lV2ce4@find-dups (unspecified)) (set! lV2ce6@chi-internal (unspecified)) (set! lV2ce8@parse-module (unspecified)) (set! lV2cf2@module-interface? (unspecified)) (set! lV2cf4@module-interface-first-mark (unspecified)) (set! lV2cf6@set-module-interface-first-mark! (unspecified)) (set! lV2cf8@module-interface-exp-id-vec (unspecified)) (set! lV2cfa@set-module-interface-exp-id-vec! (unspecified)) (set! lV2cfc@module-interface-exp-lab-vec (unspecified)) (set! lV2cfe@set-module-interface-exp-lab-vec! (unspecified)) (set! lV2d00@dummy (unspecified)) (set! lV2d02@module-interface-exp-id* (unspecified)) (set! lV2d04@chi-internal-module (unspecified)) (set! lV2d06@chi-body* (unspecified)) (set! lV2d08@expand-transformer (unspecified)) (set! lV2d0a@parse-exports (unspecified)) (set! lV2d0c@parse-library-name (unspecified)) (set! lV2d0e@parse-library (unspecified)) (set! lV2d10@parse-import-spec* (unspecified)) (set! lV2d12@make-top-rib (unspecified)) (set! lV2d14@make-collector (unspecified)) (set! lV2d16@inv-collector (unspecified)) (set! lV2d18@vis-collector (unspecified)) (set! lV2d1a@imp-collector (unspecified)) (set! lV2d1c@chi-library-internal (unspecified)) (set! lV2d1e@chi-interaction-expr (unspecified)) (set! lV2d20@library-body-expander (unspecified)) (set! lV2d22@core-library-expander (unspecified)) (set! lV2d24@parse-top-level-program (unspecified)) (set! lV2d26@top-level-expander (unspecified)) (set! lV2d28@rp (unspecified)) (set! lV2d32@env? (unspecified)) (set! lV2d34@env-names (unspecified)) (set! lV2d36@set-env-names! (unspecified)) (set! lV2d38@env-labels (unspecified)) (set! lV2d3a@set-env-labels! (unspecified)) (set! lV2d3c@env-itc (unspecified)) (set! lV2d3e@set-env-itc! (unspecified)) (set! lV2d40@dummy (unspecified)) (set! lV2d42@rp (unspecified)) (set! lV2d4c@interaction-env? (unspecified)) (set! lV2d4e@interaction-env-rib (unspecified)) (set! lV2d50@set-interaction-env-rib! (unspecified)) (set! lV2d52@interaction-env-r (unspecified)) (set! lV2d54@set-interaction-env-r! (unspecified)) (set! lV2d56@interaction-env-locs (unspecified)) (set! lV2d58@set-interaction-env-locs! (unspecified)) (set! lV2d5a@dummy (unspecified)) (set! lV2d5c@interaction-environment-symbols (unspecified)) (set! lV2d5e@environment-bindings (unspecified)) (set! lV2d60@parse-binding (unspecified)) (set! lV2d62@environment? (unspecified)) (set! lV2d64@environment-symbols (unspecified)) (set! lV2d66@environment (unspecified)) (set! lV2d68@null-environment (unspecified)) (set! lV2d6a@scheme-report-environment (unspecified)) (set! lV2d6c@expand (unspecified)) (set! lV2d6e@eval (unspecified)) (set! lV2d70@library-expander (unspecified)) (set! lV2d72@boot-library-expand (unspecified)) (set! lV2d74@rev-map-append (unspecified)) (set! lV2d76@build-exports (unspecified)) (set! lV2d78@make-export-subst (unspecified)) (set! lV2d7a@make-export-env/macros (unspecified)) (set! lV2d7c@generate-temporaries (unspecified)) (set! lV2d7e@free-identifier=? (unspecified)) (set! lV2d80@bound-identifier=? (unspecified)) (set! lV2d82@make-source-condition (unspecified)) (set! lV2d84@extract-position-condition (unspecified)) (set! lV2d86@expression-position (unspecified)) (set! lV2d88@assertion-error (unspecified)) (set! lV2d8a@syntax-error (unspecified)) (set! lV2d8c@syntax-violation* (unspecified)) (set! lV2d8e@syntax-violation (unspecified)) (set! lV2d90@identifier? (unspecified)) (set! lV2d92@datum->syntax (unspecified)) (set! lV2d94@syntax->datum (unspecified)) (set! lV2d96@ungensym-all (unspecified)) (set! lV2d98@compile-r6rs-top-level (unspecified)) (set! lV2d9a@pre-compile-r6rs-top-level (unspecified)) (set! lV2d9c@interaction-environment (unspecified)) (set! lV2d9e@top-level-context (unspecified)) (begin (set! lV2a22@file-options-macro (lambda (lV2d9f@x) (let ((lV2da2@valid-option? '#f)) (begin (set! lV2da2@valid-option? (lambda (lV2dab@x) (and (lV2aa7@id? lV2dab@x) (memq (lV2aa9@id->sym lV2dab@x) '(no-fail no-create no-truncate))))) (let ((lV2da3@t lV2d9f@x)) (let ((lV2da5@ls/false (lV2cae@syntax-dispatch lV2da3@t '(_ . each-any)))) (if (and lV2da5@ls/false (apply (lambda (lV2da7@opt*) (for-all lV2da2@valid-option? lV2da7@opt*)) lV2da5@ls/false)) (apply (lambda (lV2da9@opt*) (lV2c64@bless (list 'make-file-options (list 'quote lV2da9@opt*)))) lV2da5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2da3@t)))))))) (set! lV46f3@lV2a22@file-options-macro lV2a22@file-options-macro)) (begin (set! lV2a24@set-cons (lambda (lV2dad@x lV2dae@ls) (if (memq lV2dad@x lV2dae@ls) lV2dae@ls (cons lV2dad@x lV2dae@ls)))) (set! lV46f4@lV2a24@set-cons lV2a24@set-cons)) (begin (set! lV2a26@set-union (lambda (lV2db1@ls1 lV2db2@ls2) (if (null? lV2db1@ls1) lV2db2@ls2 (if (memq (car lV2db1@ls1) lV2db2@ls2) (lV2a26@set-union (cdr lV2db1@ls1) lV2db2@ls2) (cons (car lV2db1@ls1) (lV2a26@set-union (cdr lV2db1@ls1) lV2db2@ls2)))))) (set! lV46f5@lV2a26@set-union lV2a26@set-union)) (begin (set! lV2a2b@top-mark* '(top)) (set! lV46f6@lV2a2b@top-mark* lV2a2b@top-mark*)) (begin (set! lV2a2d@top-marked? (lambda (lV2db5@m*) (memq 'top lV2db5@m*))) (set! lV46f7@lV2a2d@top-marked? lV2a2d@top-marked?)) (begin (set! lV2a2f@gen-lexical (lambda (lV2db7@sym) (if (symbol? lV2db7@sym) (gensym lV2db7@sym) (if (lV2a73@stx? lV2db7@sym) (lV2a2f@gen-lexical (lV2aa9@id->sym lV2db7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" lV2db7@sym))))) (set! lV46f8@lV2a2f@gen-lexical lV2a2f@gen-lexical)) (begin (set! lV2a31@gen-global (lambda (lV2db9@x) (lV2a2f@gen-lexical lV2db9@x))) (set! lV46f9@lV2a31@gen-global lV2a31@gen-global)) (begin (set! lV2a33@gen-label (lambda (lV2dbb@_) (gensym))) (set! lV46fa@lV2a33@gen-label lV2a33@gen-label)) (begin (set! lV2a35@gen-top-level-label (lambda (lV2dbd@id lV2dbe@rib) (let ((lV2dc2@find '#f)) (begin (set! lV2dc2@find (lambda (lV2dcd@sym lV2dce@mark* lV2dcf@sym* lV2dd0@mark** lV2dd1@label*) (and (pair? lV2dcf@sym*) (if (and (eq? lV2dcd@sym (car lV2dcf@sym*)) (same-marks? lV2dce@mark* (car lV2dd0@mark**))) (car lV2dd1@label*) (lV2dc2@find lV2dcd@sym lV2dce@mark* (cdr lV2dcf@sym*) (cdr lV2dd0@mark**) (cdr lV2dd1@label*)))))) (let ((lV2dc3@sym (lV2aa9@id->sym lV2dbd@id)) (lV2dc4@mark* (lV2a79@stx-mark* lV2dbd@id))) (let ((lV2dc7@sym* (lV2a45@rib-sym* lV2dbe@rib))) (let ((lV2dc9@t (and (memq lV2dc3@sym (lV2a45@rib-sym* lV2dbe@rib)) (lV2dc2@find lV2dc3@sym lV2dc4@mark* lV2dc7@sym* (lV2a49@rib-mark** lV2dbe@rib) (lV2a4d@rib-label* lV2dbe@rib))))) (if lV2dc9@t ((lambda (lV2dcb@label) (if (lV28bc@lV2709@imported-label->binding lV2dcb@label) (gensym) lV2dcb@label)) lV2dc9@t) (gensym))))))))) (set! lV46fb@lV2a35@gen-top-level-label lV2a35@gen-top-level-label)) (begin (set! lV2a37@gen-define-label+loc (lambda (lV2dd7@id lV2dd8@rib) (let ((lV2ddb@t (lV2d9e@top-level-context))) (if lV2ddb@t ((lambda (lV2ddd@env) (let ((lV2ddf@label (lV2a35@gen-top-level-label lV2dd7@id lV2dd8@rib)) (lV2de0@locs (lV2d56@interaction-env-locs lV2ddd@env))) (values lV2ddf@label (let ((lV2de3@t (assq lV2ddf@label lV2de0@locs))) (if lV2de3@t (cdr lV2de3@t) (let ((lV2de5@loc (lV2a2f@gen-lexical lV2dd7@id))) (begin (lV2d58@set-interaction-env-locs! lV2ddd@env (cons (cons lV2ddf@label lV2de5@loc) lV2de0@locs)) lV2de5@loc))))))) lV2ddb@t) (values (gensym) (lV2a2f@gen-lexical lV2dd7@id)))))) (set! lV46fc@lV2a37@gen-define-label+loc lV2a37@gen-define-label+loc)) (begin (set! lV2a39@gen-define-label (lambda (lV2de7@id lV2de8@rib) (if (lV2d9e@top-level-context) (lV2a35@gen-top-level-label lV2de7@id lV2de8@rib) (gensym)))) (set! lV46fd@lV2a39@gen-define-label lV2a39@gen-define-label)) (begin (set! lV2a43@rib? (lambda (lV2deb@x) (and (simple-struct? lV2deb@x) (eq? (simple-struct-name lV2deb@x) 'rib)))) (set! lV46fe@lV2a43@rib? lV2a43@rib?)) (begin (set! lV2a45@rib-sym* (lambda (lV2ded@x) (simple-struct-ref lV2ded@x '0))) (set! lV46ff@lV2a45@rib-sym* lV2a45@rib-sym*)) (begin (set! lV2a47@set-rib-sym*! (lambda (lV2def@x lV2df0@val) (simple-struct-set! lV2def@x '0 lV2df0@val))) (set! lV4700@lV2a47@set-rib-sym*! lV2a47@set-rib-sym*!)) (begin (set! lV2a49@rib-mark** (lambda (lV2df3@x) (simple-struct-ref lV2df3@x '1))) (set! lV4701@lV2a49@rib-mark** lV2a49@rib-mark**)) (begin (set! lV2a4b@set-rib-mark**! (lambda (lV2df5@x lV2df6@val) (simple-struct-set! lV2df5@x '1 lV2df6@val))) (set! lV4702@lV2a4b@set-rib-mark**! lV2a4b@set-rib-mark**!)) (begin (set! lV2a4d@rib-label* (lambda (lV2df9@x) (simple-struct-ref lV2df9@x '2))) (set! lV4703@lV2a4d@rib-label* lV2a4d@rib-label*)) (begin (set! lV2a4f@set-rib-label*! (lambda (lV2dfb@x lV2dfc@val) (simple-struct-set! lV2dfb@x '2 lV2dfc@val))) (set! lV4704@lV2a4f@set-rib-label*! lV2a4f@set-rib-label*!)) (begin (set! lV2a51@rib-sealed/freq (lambda (lV2dff@x) (simple-struct-ref lV2dff@x '3))) (set! lV4705@lV2a51@rib-sealed/freq lV2a51@rib-sealed/freq)) (begin (set! lV2a53@set-rib-sealed/freq! (lambda (lV2e01@x lV2e02@val) (simple-struct-set! lV2e01@x '3 lV2e02@val))) (set! lV4706@lV2a53@set-rib-sealed/freq! lV2a53@set-rib-sealed/freq!)) (begin (set! lV2a55@rib-cache (lambda (lV2e05@x) (simple-struct-ref lV2e05@x '4))) (set! lV4707@lV2a55@rib-cache lV2a55@rib-cache)) (begin (set! lV2a57@set-rib-cache! (lambda (lV2e07@x lV2e08@val) (simple-struct-set! lV2e07@x '4 lV2e08@val))) (set! lV4708@lV2a57@set-rib-cache! lV2a57@set-rib-cache!)) (begin (set! lV2a59@dummy '3) (set! lV4709@lV2a59@dummy lV2a59@dummy)) (begin (set! lV2a5b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! lV470a@lV2a5b@make-empty-rib lV2a5b@make-empty-rib)) (begin (set! lV2a5d@extend-rib! (lambda (lV2e0b@rib lV2e0c@id lV2e0d@label) (let ((lV2e12@find '#f)) (begin (set! lV2e12@find (lambda (lV2e1f@sym lV2e20@mark* lV2e21@sym* lV2e22@mark** lV2e23@label*) (and (pair? lV2e21@sym*) (if (and (eq? lV2e1f@sym (car lV2e21@sym*)) (same-marks? lV2e20@mark* (car lV2e22@mark**))) lV2e23@label* (lV2e12@find lV2e1f@sym lV2e20@mark* (cdr lV2e21@sym*) (cdr lV2e22@mark**) (cdr lV2e23@label*)))))) (begin (if (lV2a51@rib-sealed/freq lV2e0b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" lV2e0b@rib) (void)) (let ((lV2e13@sym (lV2aa9@id->sym lV2e0c@id)) (lV2e14@mark* (lV2a79@stx-mark* lV2e0c@id))) (let ((lV2e17@sym* (lV2a45@rib-sym* lV2e0b@rib))) (let ((lV2e19@t (and (memq lV2e13@sym (lV2a45@rib-sym* lV2e0b@rib)) (lV2e12@find lV2e13@sym lV2e14@mark* lV2e17@sym* (lV2a49@rib-mark** lV2e0b@rib) (lV2a4d@rib-label* lV2e0b@rib))))) (if lV2e19@t ((lambda (lV2e1b@p) (if (not (eq? lV2e0d@label (car lV2e1b@p))) (if (lV2d9e@top-level-context) (set-car! lV2e1b@p lV2e0d@label) (lV2d8e@syntax-violation '#f '"multiple definitions of identifier" lV2e0c@id)) (void))) lV2e19@t) (begin (if (lV2a55@rib-cache lV2e0b@rib) (hashtable-update! (lV2a55@rib-cache lV2e0b@rib) lV2e13@sym (lambda (lV2e1d@e) (cons (cons lV2e14@mark* lV2e0d@label) lV2e1d@e)) '()) (void)) (lV2a47@set-rib-sym*! lV2e0b@rib (cons lV2e13@sym lV2e17@sym*)) (lV2a4b@set-rib-mark**! lV2e0b@rib (cons lV2e14@mark* (lV2a49@rib-mark** lV2e0b@rib))) (lV2a4f@set-rib-label*! lV2e0b@rib (cons lV2e0d@label (lV2a4d@rib-label* lV2e0b@rib))))))))))))) (set! lV470b@lV2a5d@extend-rib! lV2a5d@extend-rib!)) (begin (set! lV2a5f@extend-rib/nc! (lambda (lV2e29@rib lV2e2a@id lV2e2b@label) (let ((lV2e2f@sym (lV2aa9@id->sym lV2e2a@id)) (lV2e30@mark* (lV2a79@stx-mark* lV2e2a@id))) (let ((lV2e33@sym* (lV2a45@rib-sym* lV2e29@rib))) (begin (if (lV2a55@rib-cache lV2e29@rib) (hashtable-update! (lV2a55@rib-cache lV2e29@rib) lV2e2f@sym (lambda (lV2e35@e) (cons (cons lV2e30@mark* lV2e2b@label) lV2e35@e)) '()) (void)) (lV2a47@set-rib-sym*! lV2e29@rib (cons lV2e2f@sym lV2e33@sym*)) (lV2a4b@set-rib-mark**! lV2e29@rib (cons lV2e30@mark* (lV2a49@rib-mark** lV2e29@rib))) (lV2a4f@set-rib-label*! lV2e29@rib (cons lV2e2b@label (lV2a4d@rib-label* lV2e29@rib)))))))) (set! lV470c@lV2a5f@extend-rib/nc! lV2a5f@extend-rib/nc!)) (begin (set! lV2a61@make-rib-map (lambda (lV2e37@sym*) (let ((lV2e39@ht (make-eq-hashtable))) (let lV2e3f@f ((lV2e3b@i '0) (lV2e3c@sym* lV2e37@sym*)) (if (null? lV2e3c@sym*) lV2e39@ht (begin (hashtable-update! lV2e39@ht (car lV2e3c@sym*) (lambda (lV2e41@x) (cons lV2e3b@i lV2e41@x)) '()) (lV2e3f@f (+ lV2e3b@i '1) (cdr lV2e3c@sym*)))))))) (set! lV470d@lV2a61@make-rib-map lV2a61@make-rib-map)) (begin (set! lV2a63@seal-rib! (lambda (lV2e43@rib) (let ((lV2e45@sym* (lV2a45@rib-sym* lV2e43@rib))) (if (not (null? lV2e45@sym*)) (begin (lV2a47@set-rib-sym*! lV2e43@rib (list->vector lV2e45@sym*)) (lV2a4b@set-rib-mark**! lV2e43@rib (list->vector (lV2a49@rib-mark** lV2e43@rib))) (lV2a4f@set-rib-label*! lV2e43@rib (list->vector (lV2a4d@rib-label* lV2e43@rib))) (lV2a53@set-rib-sealed/freq! lV2e43@rib (lV2a61@make-rib-map lV2e45@sym*))) (void))))) (set! lV470e@lV2a63@seal-rib! lV2a63@seal-rib!)) (begin (set! lV2a65@unseal-rib! (lambda (lV2e47@rib) (if (lV2a51@rib-sealed/freq lV2e47@rib) (begin (lV2a53@set-rib-sealed/freq! lV2e47@rib '#f) (lV2a47@set-rib-sym*! lV2e47@rib (vector->list (lV2a45@rib-sym* lV2e47@rib))) (lV2a4b@set-rib-mark**! lV2e47@rib (vector->list (lV2a49@rib-mark** lV2e47@rib))) (lV2a4f@set-rib-label*! lV2e47@rib (vector->list (lV2a4d@rib-label* lV2e47@rib)))) (void)))) (set! lV470f@lV2a65@unseal-rib! lV2a65@unseal-rib!)) (begin (set! lV2a67@make-full-rib (lambda (lV2e49@id* lV2e4a@label*) (let ((lV2e4d@r (make-simple-struct 'rib '6 (list (map lV2aa9@id->sym lV2e49@id*) (map lV2a79@stx-mark* lV2e49@id*) lV2e4a@label* '#f '#f)))) (begin (lV2a63@seal-rib! lV2e4d@r) lV2e4d@r)))) (set! lV4710@lV2a67@make-full-rib lV2a67@make-full-rib)) (begin (set! lV2a69@rp (lV25ee@lV24ca@make-record-printer 'stx (lambda (lV2e4f@x lV2e50@p lV2e51@wr) (begin (display '"#<syntax " lV2e50@p) (write (lV2abb@stx->datum lV2e4f@x) lV2e50@p) (let ((lV2e55@expr (lV2a75@stx-expr lV2e4f@x))) (if (lV25e6@lV24ba@annotation? lV2e55@expr) (let ((lV2e57@src (lV25e7@lV24bc@annotation-source lV2e55@expr))) (if (pair? lV2e57@src) (begin (display '" [" lV2e50@p) (display (cdr lV2e57@src) lV2e50@p) (display '" of " lV2e50@p) (display (car lV2e57@src) lV2e50@p) (display '"]" lV2e50@p)) (void))) (void))) (display '">" lV2e50@p))))) (set! lV4711@lV2a69@rp lV2a69@rp)) (begin (set! lV2a73@stx? (lambda (lV2e59@x) (and (simple-struct? lV2e59@x) (eq? (simple-struct-name lV2e59@x) 'stx)))) (set! lV4712@lV2a73@stx? lV2a73@stx?)) (begin (set! lV2a75@stx-expr (lambda (lV2e5b@x) (simple-struct-ref lV2e5b@x '0))) (set! lV4713@lV2a75@stx-expr lV2a75@stx-expr)) (begin (set! lV2a77@set-stx-expr! (lambda (lV2e5d@x lV2e5e@val) (simple-struct-set! lV2e5d@x '0 lV2e5e@val))) (set! lV4714@lV2a77@set-stx-expr! lV2a77@set-stx-expr!)) (begin (set! lV2a79@stx-mark* (lambda (lV2e61@x) (simple-struct-ref lV2e61@x '1))) (set! lV4715@lV2a79@stx-mark* lV2a79@stx-mark*)) (begin (set! lV2a7b@set-stx-mark*! (lambda (lV2e63@x lV2e64@val) (simple-struct-set! lV2e63@x '1 lV2e64@val))) (set! lV4716@lV2a7b@set-stx-mark*! lV2a7b@set-stx-mark*!)) (begin (set! lV2a7d@stx-subst* (lambda (lV2e67@x) (simple-struct-ref lV2e67@x '2))) (set! lV4717@lV2a7d@stx-subst* lV2a7d@stx-subst*)) (begin (set! lV2a7f@set-stx-subst*! (lambda (lV2e69@x lV2e6a@val) (simple-struct-set! lV2e69@x '2 lV2e6a@val))) (set! lV4718@lV2a7f@set-stx-subst*! lV2a7f@set-stx-subst*!)) (begin (set! lV2a81@stx-ae* (lambda (lV2e6d@x) (simple-struct-ref lV2e6d@x '3))) (set! lV4719@lV2a81@stx-ae* lV2a81@stx-ae*)) (begin (set! lV2a83@set-stx-ae*! (lambda (lV2e6f@x lV2e70@val) (simple-struct-set! lV2e6f@x '3 lV2e70@val))) (set! lV471a@lV2a83@set-stx-ae*! lV2a83@set-stx-ae*!)) (begin (set! lV2a85@dummy '3) (set! lV471b@lV2a85@dummy lV2a85@dummy)) (begin (set! lV2a87@datum->stx (lambda (lV2e73@id lV2e74@datum) (make-simple-struct 'stx '5 (list lV2e74@datum (lV2a79@stx-mark* lV2e73@id) (lV2a7d@stx-subst* lV2e73@id) (lV2a81@stx-ae* lV2e73@id))))) (set! lV471c@lV2a87@datum->stx lV2a87@datum->stx)) (begin (set! lV2a89@gen-mark (lambda () (string '#\m))) (set! lV471d@lV2a89@gen-mark lV2a89@gen-mark)) (begin (set! lV2a8b@anti-mark '#f) (set! lV471e@lV2a8b@anti-mark lV2a8b@anti-mark)) (begin (set! lV2a8d@anti-mark? not) (set! lV471f@lV2a8d@anti-mark? lV2a8d@anti-mark?)) (begin (set! lV2a8f@mkstx (lambda (lV2e77@e lV2e78@m* lV2e79@s* lV2e7a@ae*) (if (and (lV2a73@stx? lV2e77@e) (not (lV2a2d@top-marked? lV2e78@m*))) (call-with-values (lambda () (join-wraps lV2e78@m* lV2e79@s* lV2e7a@ae* lV2e77@e)) (lambda (lV2e85@lV2e80 lV2e86@lV2e82 lV2e87@lV2e84) (let ((lV2e8b@ae* lV2e87@lV2e84) (lV2e8c@s* lV2e86@lV2e82) (lV2e8d@m* lV2e85@lV2e80)) (make-simple-struct 'stx '5 (list (lV2a75@stx-expr lV2e77@e) lV2e8d@m* lV2e8c@s* lV2e8b@ae*))))) (make-simple-struct 'stx '5 (list lV2e77@e lV2e78@m* lV2e79@s* lV2e7a@ae*))))) (set! lV4720@lV2a8f@mkstx lV2a8f@mkstx)) (begin (set! lV2a91@add-mark (lambda (lV2e91@m lV2e92@e lV2e93@ae) (lV2a8f@mkstx lV2e92@e (list lV2e91@m) '(shift) (list lV2e93@ae)))) (set! lV4721@lV2a91@add-mark lV2a91@add-mark)) (begin (set! lV2a93@add-subst (lambda (lV2e97@subst lV2e98@e) (lV2a8f@mkstx lV2e98@e '() (list lV2e97@subst) '()))) (set! lV4722@lV2a93@add-subst lV2a93@add-subst)) (begin (set! lV2a95@syntax-kind? (lambda (lV2e9b@x lV2e9c@p?) (if (lV2a73@stx? lV2e9b@x) (lV2a95@syntax-kind? (lV2a75@stx-expr lV2e9b@x) lV2e9c@p?) (if (lV25e6@lV24ba@annotation? lV2e9b@x) (lV2a95@syntax-kind? (lV25e8@lV24be@annotation-expression lV2e9b@x) lV2e9c@p?) (lV2e9c@p? lV2e9b@x))))) (set! lV4723@lV2a95@syntax-kind? lV2a95@syntax-kind?)) (begin (set! lV2a97@syntax-vector->list (lambda (lV2e9f@x) (if (lV2a73@stx? lV2e9f@x) (let ((lV2ea1@ls (lV2a97@syntax-vector->list (lV2a75@stx-expr lV2e9f@x))) (lV2ea2@m* (lV2a79@stx-mark* lV2e9f@x)) (lV2ea3@s* (lV2a7d@stx-subst* lV2e9f@x)) (lV2ea4@ae* (lV2a81@stx-ae* lV2e9f@x))) (map (lambda (lV2ea9@x) (lV2a8f@mkstx lV2ea9@x lV2ea2@m* lV2ea3@s* lV2ea4@ae*)) lV2ea1@ls)) (if (lV25e6@lV24ba@annotation? lV2e9f@x) (lV2a97@syntax-vector->list (lV25e8@lV24be@annotation-expression lV2e9f@x)) (if (vector? lV2e9f@x) (vector->list lV2e9f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" lV2e9f@x)))))) (set! lV4724@lV2a97@syntax-vector->list lV2a97@syntax-vector->list)) (begin (set! lV2a99@syntax-pair? (lambda (lV2eab@x) (lV2a95@syntax-kind? lV2eab@x pair?))) (set! lV4725@lV2a99@syntax-pair? lV2a99@syntax-pair?)) (begin (set! lV2a9b@syntax-vector? (lambda (lV2ead@x) (lV2a95@syntax-kind? lV2ead@x vector?))) (set! lV4726@lV2a9b@syntax-vector? lV2a9b@syntax-vector?)) (begin (set! lV2a9d@syntax-null? (lambda (lV2eaf@x) (lV2a95@syntax-kind? lV2eaf@x null?))) (set! lV4727@lV2a9d@syntax-null? lV2a9d@syntax-null?)) (begin (set! lV2a9f@syntax-list? (lambda (lV2eb1@x) (or (lV2a9d@syntax-null? lV2eb1@x) (and (lV2a99@syntax-pair? lV2eb1@x) (lV2a9f@syntax-list? (lV2aa3@syntax-cdr lV2eb1@x)))))) (set! lV4728@lV2a9f@syntax-list? lV2a9f@syntax-list?)) (begin (set! lV2aa1@syntax-car (lambda (lV2eb3@x) (if (lV2a73@stx? lV2eb3@x) (lV2a8f@mkstx (lV2aa1@syntax-car (lV2a75@stx-expr lV2eb3@x)) (lV2a79@stx-mark* lV2eb3@x) (lV2a7d@stx-subst* lV2eb3@x) (lV2a81@stx-ae* lV2eb3@x)) (if (lV25e6@lV24ba@annotation? lV2eb3@x) (lV2aa1@syntax-car (lV25e8@lV24be@annotation-expression lV2eb3@x)) (if (pair? lV2eb3@x) (car lV2eb3@x) (assertion-violation 'syntax-car '"BUG: not a pair" lV2eb3@x)))))) (set! lV4729@lV2aa1@syntax-car lV2aa1@syntax-car)) (begin (set! lV2aa3@syntax-cdr (lambda (lV2eb5@x) (if (lV2a73@stx? lV2eb5@x) (lV2a8f@mkstx (lV2aa3@syntax-cdr (lV2a75@stx-expr lV2eb5@x)) (lV2a79@stx-mark* lV2eb5@x) (lV2a7d@stx-subst* lV2eb5@x) (lV2a81@stx-ae* lV2eb5@x)) (if (lV25e6@lV24ba@annotation? lV2eb5@x) (lV2aa3@syntax-cdr (lV25e8@lV24be@annotation-expression lV2eb5@x)) (if (pair? lV2eb5@x) (cdr lV2eb5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" lV2eb5@x)))))) (set! lV472a@lV2aa3@syntax-cdr lV2aa3@syntax-cdr)) (begin (set! lV2aa5@syntax->list (lambda (lV2eb7@x) (if (lV2a99@syntax-pair? lV2eb7@x) (cons (lV2aa1@syntax-car lV2eb7@x) (lV2aa5@syntax->list (lV2aa3@syntax-cdr lV2eb7@x))) (if (lV2a9d@syntax-null? lV2eb7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" lV2eb7@x))))) (set! lV472b@lV2aa5@syntax->list lV2aa5@syntax->list)) (begin (set! lV2aa7@id? (lambda (lV2eb9@x) (and (lV2a73@stx? lV2eb9@x) (symbol? (lV2a75@stx-expr lV2eb9@x))))) (set! lV472c@lV2aa7@id? lV2aa7@id?)) (begin (set! lV2aa9@id->sym (lambda (lV2ebb@x) (lV2a75@stx-expr lV2ebb@x))) (set! lV472d@lV2aa9@id->sym lV2aa9@id->sym)) (begin (set! lV2aab@bound-id=? (lambda (lV2ebd@x lV2ebe@y) (and (eq? (lV2aa9@id->sym lV2ebd@x) (lV2aa9@id->sym lV2ebe@y)) (same-marks? (lV2a79@stx-mark* lV2ebd@x) (lV2a79@stx-mark* lV2ebe@y))))) (set! lV472e@lV2aab@bound-id=? lV2aab@bound-id=?)) (begin (set! lV2aad@free-id=? (lambda (lV2ec1@i lV2ec2@j) (let ((lV2ec5@t0 (id->real-label lV2ec1@i)) (lV2ec6@t1 (id->real-label lV2ec2@j))) (if (or lV2ec5@t0 lV2ec6@t1) (eq? lV2ec5@t0 lV2ec6@t1) (eq? (lV2aa9@id->sym lV2ec1@i) (lV2aa9@id->sym lV2ec2@j)))))) (set! lV472f@lV2aad@free-id=? lV2aad@free-id=?)) (begin (set! lV2aaf@valid-bound-ids? (lambda (lV2ec9@id*) (and (for-all lV2aa7@id? lV2ec9@id*) (lV2ab1@distinct-bound-ids? lV2ec9@id*)))) (set! lV4730@lV2aaf@valid-bound-ids? lV2aaf@valid-bound-ids?)) (begin (set! lV2ab1@distinct-bound-ids? (lambda (lV2ecb@id*) (or (null? lV2ecb@id*) (and (not (lV2ab3@bound-id-member? (car lV2ecb@id*) (cdr lV2ecb@id*))) (lV2ab1@distinct-bound-ids? (cdr lV2ecb@id*)))))) (set! lV4731@lV2ab1@distinct-bound-ids? lV2ab1@distinct-bound-ids?)) (begin (set! lV2ab3@bound-id-member? (lambda (lV2ecd@id lV2ece@id*) (and (pair? lV2ece@id*) (or (lV2aab@bound-id=? lV2ecd@id (car lV2ece@id*)) (lV2ab3@bound-id-member? lV2ecd@id (cdr lV2ece@id*)))))) (set! lV4732@lV2ab3@bound-id-member? lV2ab3@bound-id-member?)) (begin (set! lV2ab5@self-evaluating? (lambda (lV2ed1@x) (or (number? lV2ed1@x) (string? lV2ed1@x) (char? lV2ed1@x) (boolean? lV2ed1@x) (regexp? lV2ed1@x) (bytevector? lV2ed1@x)))) (set! lV4733@lV2ab5@self-evaluating? lV2ab5@self-evaluating?)) (begin (set! lV2ab7@strip-annotations (lambda (lV2ed3@x) (if (pair? lV2ed3@x) (cons (lV2ab7@strip-annotations (car lV2ed3@x)) (lV2ab7@strip-annotations (cdr lV2ed3@x))) (if (vector? lV2ed3@x) (vector-map lV2ab7@strip-annotations lV2ed3@x) (if (lV25e6@lV24ba@annotation? lV2ed3@x) (lV25e5@lV24b8@annotation-stripped lV2ed3@x) lV2ed3@x))))) (set! lV4734@lV2ab7@strip-annotations lV2ab7@strip-annotations)) (begin (set! lV2ab9@strip (lambda (lV2ed5@x lV2ed6@m*) (if (lV2a2d@top-marked? lV2ed6@m*) (if (or (lV25e6@lV24ba@annotation? lV2ed5@x) (and (pair? lV2ed5@x) (lV25e6@lV24ba@annotation? (car lV2ed5@x))) (and (vector? lV2ed5@x) (> (vector-length lV2ed5@x) '0) (lV25e6@lV24ba@annotation? (vector-ref lV2ed5@x '0)))) (lV2ab7@strip-annotations lV2ed5@x) lV2ed5@x) (let lV2edb@f ((lV2ed9@x lV2ed5@x)) (if (lV2a73@stx? lV2ed9@x) (lV2ab9@strip (lV2a75@stx-expr lV2ed9@x) (lV2a79@stx-mark* lV2ed9@x)) (if (lV25e6@lV24ba@annotation? lV2ed9@x) (lV25e5@lV24b8@annotation-stripped lV2ed9@x) (if (pair? lV2ed9@x) (let ((lV2edd@a (lV2edb@f (car lV2ed9@x))) (lV2ede@d (lV2edb@f (cdr lV2ed9@x)))) (if (and (eq? lV2edd@a (car lV2ed9@x)) (eq? lV2ede@d (cdr lV2ed9@x))) lV2ed9@x (cons lV2edd@a lV2ede@d))) (if (vector? lV2ed9@x) (let ((lV2ee1@old (vector->list lV2ed9@x))) (let ((lV2ee3@new (map lV2edb@f lV2ee1@old))) (if (for-all eq? lV2ee1@old lV2ee3@new) lV2ed9@x (list->vector lV2ee3@new)))) lV2ed9@x)))))))) (set! lV4735@lV2ab9@strip lV2ab9@strip)) (begin (set! lV2abb@stx->datum (lambda (lV2ee5@x) (lV2ab9@strip lV2ee5@x '()))) (set! lV4736@lV2abb@stx->datum lV2abb@stx->datum)) (begin (set! lV2abd@id->label (lambda (lV2ee7@id) (or (id->real-label lV2ee7@id) (let ((lV2ee9@t (lV2d9e@top-level-context))) (if lV2ee9@t ((lambda (lV2eeb@env) (let ((lV2eed@rib (lV2d4e@interaction-env-rib lV2eeb@env))) (call-with-values (lambda () (lV2a37@gen-define-label+loc lV2ee7@id lV2eed@rib)) (lambda (lV2ef3@lV2ef0 lV2ef4@lV2ef2) (let ((lV2ef7@loc_ lV2ef4@lV2ef2) (lV2ef8@lab lV2ef3@lV2ef0)) (begin (lV2a5d@extend-rib! lV2eed@rib lV2ee7@id lV2ef8@lab) lV2ef8@lab)))))) lV2ee9@t) '#f))))) (set! lV4737@lV2abd@id->label lV2abd@id->label)) (begin (set! lV2abf@label->binding (lambda (lV2efb@x lV2efc@r) (let ((lV2eff@t (lV28bc@lV2709@imported-label->binding lV2efb@x))) (if lV2eff@t ((lambda (lV2f01@b) (if (and (pair? lV2f01@b) (eq? (car lV2f01@b) '$core-rtd)) (cons '$rtd (map lV2c64@bless (cdr lV2f01@b))) (if (and (pair? lV2f01@b) (eq? (car lV2f01@b) 'global-rtd)) (let ((lV2f03@lib (cadr lV2f01@b)) (lV2f04@loc (cddr lV2f01@b))) (cons '$rtd (symbol-value lV2f04@loc))) lV2f01@b))) lV2eff@t) (let ((lV2f07@t (assq lV2efb@x lV2efc@r))) (if lV2f07@t (cdr lV2f07@t) (let ((lV2f09@t (lV2d9e@top-level-context))) (if lV2f09@t ((lambda (lV2f0b@env) (let ((lV2f0d@t (assq lV2efb@x (lV2d56@interaction-env-locs lV2f0b@env)))) (if lV2f0d@t ((lambda (lV2f0f@p) (cons* 'lexical (cdr lV2f0f@p) '#f)) lV2f0d@t) '(displaced-lexical . #f)))) lV2f09@t) '(displaced-lexical . #f))))))))) (set! lV4738@lV2abf@label->binding lV2abf@label->binding)) (begin (set! lV2ac1@make-binding cons) (set! lV4739@lV2ac1@make-binding lV2ac1@make-binding)) (begin (set! lV2ac3@binding-type car) (set! lV473a@lV2ac3@binding-type lV2ac3@binding-type)) (begin (set! lV2ac5@binding-value cdr) (set! lV473b@lV2ac5@binding-value lV2ac5@binding-value)) (begin (set! lV2ac7@raise-unbound-error (lambda (lV2f11@id) (lV2d8c@syntax-violation* '#f '"unbound identifier" lV2f11@id (lV4b31@lV4977@make-undefined-violation)))) (set! lV473c@lV2ac7@raise-unbound-error lV2ac7@raise-unbound-error)) (begin (set! lV2ac9@syntax-type (lambda (lV2f13@e lV2f14@r) (if (lV2aa7@id? lV2f13@e) (let ((lV2f17@id lV2f13@e)) (let ((lV2f19@label (lV2abd@id->label lV2f17@id))) (let ((lV2f1b@b (lV2abf@label->binding lV2f19@label lV2f14@r))) (let ((lV2f1d@type (lV2ac3@binding-type lV2f1b@b))) (begin (if (not lV2f19@label) (lV2ac7@raise-unbound-error lV2f17@id) (void)) (let ((lV2f1f@t lV2f1d@type)) (if (memv lV2f1f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values lV2f1d@type (lV2ac5@binding-value lV2f1b@b) lV2f17@id) (values 'other '#f '#f)))))))) (if (lV2a99@syntax-pair? lV2f13@e) (let ((lV2f21@id (lV2aa1@syntax-car lV2f13@e))) (if (lV2aa7@id? lV2f21@id) (let ((lV2f23@label (lV2abd@id->label lV2f21@id))) (let ((lV2f25@b (lV2abf@label->binding lV2f23@label lV2f14@r))) (let ((lV2f27@type (lV2ac3@binding-type lV2f25@b))) (begin (if (not lV2f23@label) (lV2ac7@raise-unbound-error lV2f21@id) (void)) (let ((lV2f29@t lV2f27@type)) (if (memv lV2f29@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values lV2f27@type (lV2ac5@binding-value lV2f25@b) lV2f21@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((lV2f2b@d (lV2abb@stx->datum lV2f13@e))) (if (lV2ab5@self-evaluating? lV2f2b@d) (values 'constant lV2f2b@d '#f) (values 'other '#f '#f))))))) (set! lV473d@lV2ac9@syntax-type lV2ac9@syntax-type)) (begin (set! lV2ad7@sanitize-binding (lambda (lV2f2d@x lV2f2e@src) (if (procedure? lV2f2d@x) (cons* 'local-macro lV2f2d@x lV2f2e@src) (if (and (pair? lV2f2d@x) (eq? (car lV2f2d@x) 'macro!) (procedure? (cdr lV2f2d@x))) (cons* 'local-macro! (cdr lV2f2d@x) lV2f2e@src) (if (and (pair? lV2f2d@x) (eq? (car lV2f2d@x) '$rtd)) lV2f2d@x (assertion-violation 'expand '"invalid transformer" lV2f2d@x)))))) (set! lV473e@lV2ad7@sanitize-binding lV2ad7@sanitize-binding)) (begin (set! lV2ad9@make-variable-transformer (lambda (lV2f31@x) (if (procedure? lV2f31@x) (cons 'macro! lV2f31@x) (assertion-violation 'make-variable-transformer '"not a procedure" lV2f31@x)))) (set! lV473f@lV2ad9@make-variable-transformer lV2ad9@make-variable-transformer)) (begin (set! lV2adb@variable-transformer? (lambda (lV2f33@x) (and (pair? lV2f33@x) (eq? (car lV2f33@x) 'macro!) (procedure? (cdr lV2f33@x))))) (set! lV4740@lV2adb@variable-transformer? lV2adb@variable-transformer?)) (begin (set! lV2add@variable-transformer-procedure (lambda (lV2f35@x) (if (lV2adb@variable-transformer? lV2f35@x) (cdr lV2f35@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" lV2f35@x)))) (set! lV4741@lV2add@variable-transformer-procedure lV2add@variable-transformer-procedure)) (begin (set! lV2adf@make-eval-transformer (lambda (lV2f37@x) (lV2ad7@sanitize-binding (eval-core (lV2647@lV25ff@expanded->core lV2f37@x)) lV2f37@x))) (set! lV4742@lV2adf@make-eval-transformer lV2adf@make-eval-transformer)) (begin (set! lV2c30@parse-define (lambda (lV2f39@x) (let ((lV2f3b@t lV2f39@x)) (let ((lV2f3d@ls/false (lV2cae@syntax-dispatch lV2f3b@t '(_ (any . any) any . each-any)))) (if (and lV2f3d@ls/false (apply (lambda (lV2f3f@id lV2f40@fmls lV2f41@b lV2f42@b*) (lV2aa7@id? lV2f3f@id)) lV2f3d@ls/false)) (apply (lambda (lV2f47@id lV2f48@fmls lV2f49@b lV2f4a@b*) (begin (lV2cd4@verify-formals lV2f48@fmls lV2f39@x) (values lV2f47@id (cons 'defun (cons lV2f48@fmls (cons lV2f49@b lV2f4a@b*)))))) lV2f3d@ls/false) (let ((lV2f4f@t lV2f3b@t)) (let ((lV2f51@ls/false (lV2cae@syntax-dispatch lV2f4f@t '(_ any any)))) (if (and lV2f51@ls/false (apply (lambda (lV2f53@id lV2f54@val) (lV2aa7@id? lV2f53@id)) lV2f51@ls/false)) (apply (lambda (lV2f57@id lV2f58@val) (values lV2f57@id (cons 'expr lV2f58@val))) lV2f51@ls/false) (let ((lV2f5b@t lV2f4f@t)) (let ((lV2f5d@ls/false (lV2cae@syntax-dispatch lV2f5b@t '(_ any)))) (if (and lV2f5d@ls/false (apply (lambda (lV2f5f@id) (lV2aa7@id? lV2f5f@id)) lV2f5d@ls/false)) (apply (lambda (lV2f61@id) (values lV2f61@id (cons 'expr (lV2c64@bless '(void))))) lV2f5d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2f5b@t)))))))))))) (set! lV4743@lV2c30@parse-define lV2c30@parse-define)) (begin (set! lV2c32@parse-define-syntax (lambda (lV2f63@x) (let ((lV2f65@t lV2f63@x)) (let ((lV2f67@ls/false (lV2cae@syntax-dispatch lV2f65@t '(_ any any)))) (if (and lV2f67@ls/false (apply (lambda (lV2f69@id lV2f6a@val) (lV2aa7@id? lV2f69@id)) lV2f67@ls/false)) (apply (lambda (lV2f6d@id lV2f6e@val) (values lV2f6d@id lV2f6e@val)) lV2f67@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2f65@t)))))) (set! lV4744@lV2c32@parse-define-syntax lV2c32@parse-define-syntax)) (begin (set! lV2c34@scheme-stx-hashtable (make-eq-hashtable)) (set! lV4745@lV2c34@scheme-stx-hashtable lV2c34@scheme-stx-hashtable)) (begin (set! lV2c36@scheme-stx (lambda (lV2f71@sym) (or (hashtable-ref lV2c34@scheme-stx-hashtable lV2f71@sym '#f) (let ((lV2f73@subst (lV2898@lV26c1@library-subst (lV28b6@lV26fd@find-library-by-name '(psyntax system $all))))) (let ((lV2f75@stx (make-simple-struct 'stx '5 (list lV2f71@sym lV2a2b@top-mark* '() '())))) (let ((lV2f77@stx (let ((lV2f79@t (assq lV2f71@sym lV2f73@subst))) (if lV2f79@t ((lambda (lV2f7b@x) (let ((lV2f7d@name (car lV2f7b@x)) (lV2f7e@label (cdr lV2f7b@x))) (lV2a93@add-subst (make-simple-struct 'rib '6 (list (list lV2f7d@name) (list lV2a2b@top-mark*) (list lV2f7e@label) '#f '#f)) lV2f75@stx))) lV2f79@t) lV2f75@stx)))) (begin (hashtable-set! lV2c34@scheme-stx-hashtable lV2f71@sym lV2f77@stx) lV2f77@stx))))))) (set! lV4746@lV2c36@scheme-stx lV2c36@scheme-stx)) (begin (set! lV2c38@lexical-var car) (set! lV4747@lV2c38@lexical-var lV2c38@lexical-var)) (begin (set! lV2c3a@lexical-mutable? cdr) (set! lV4748@lV2c3a@lexical-mutable? lV2c3a@lexical-mutable?)) (begin (set! lV2c3c@set-lexical-mutable! set-cdr!) (set! lV4749@lV2c3c@set-lexical-mutable! lV2c3c@set-lexical-mutable!)) (begin (set! lV2c3e@add-lexical (lambda (lV2f81@lab lV2f82@lex lV2f83@r) (cons (cons* lV2f81@lab 'lexical lV2f82@lex '#f) lV2f83@r))) (set! lV474a@lV2c3e@add-lexical lV2c3e@add-lexical)) (begin (set! lV2c40@add-lexicals (lambda (lV2f87@lab* lV2f88@lex* lV2f89@r) (if (null? lV2f87@lab*) lV2f89@r (lV2c40@add-lexicals (cdr lV2f87@lab*) (cdr lV2f88@lex*) (lV2c3e@add-lexical (car lV2f87@lab*) (car lV2f88@lex*) lV2f89@r))))) (set! lV474b@lV2c40@add-lexicals lV2c40@add-lexicals)) (begin (set! lV2c42@letrec-helper (lambda (lV2f8d@e lV2f8e@r lV2f8f@mr lV2f90@build) (let ((lV2f95@t lV2f8d@e)) (let ((lV2f97@ls/false (lV2cae@syntax-dispatch lV2f95@t '(_ #(each (any any)) any . each-any)))) (if lV2f97@ls/false (apply (lambda (lV2f99@lhs* lV2f9a@rhs* lV2f9b@b lV2f9c@b*) (if (not (lV2aaf@valid-bound-ids? lV2f99@lhs*)) (lV2c68@invalid-fmls-error lV2f8d@e lV2f99@lhs*) (let ((lV2fa1@lex* (map lV2a2f@gen-lexical lV2f99@lhs*)) (lV2fa2@lab* (map lV2a33@gen-label lV2f99@lhs*))) (let ((lV2fa5@rib (lV2a67@make-full-rib lV2f99@lhs* lV2fa2@lab*)) (lV2fa6@r (lV2c40@add-lexicals lV2fa2@lab* lV2fa1@lex* lV2f8e@r))) (let ((lV2fa9@body (lV2ce6@chi-internal (lV2a93@add-subst lV2fa5@rib (cons lV2f9b@b lV2f9c@b*)) lV2fa6@r lV2f8f@mr)) (lV2faa@rhs* (lV2ccc@chi-expr* (map (lambda (lV2fad@x) (lV2a93@add-subst lV2fa5@rib lV2fad@x)) lV2f9a@rhs*) lV2fa6@r lV2f8f@mr))) (lV2f90@build '#f lV2fa1@lex* lV2faa@rhs* lV2fa9@body)))))) lV2f97@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2f95@t)))))) (set! lV474c@lV2c42@letrec-helper lV2c42@letrec-helper)) (begin (set! lV2c44@let-transformer (lambda (lV2faf@e lV2fb0@r lV2fb1@mr) (let ((lV2fb5@t lV2faf@e)) (let ((lV2fb7@ls/false (lV2cae@syntax-dispatch lV2fb5@t '(_ #(each (any any)) any . each-any)))) (if lV2fb7@ls/false (apply (lambda (lV2fb9@lhs* lV2fba@rhs* lV2fbb@b lV2fbc@b*) (if (not (lV2aaf@valid-bound-ids? lV2fb9@lhs*)) (lV2c68@invalid-fmls-error lV2faf@e lV2fb9@lhs*) (let ((lV2fc1@lex* (map lV2a2f@gen-lexical lV2fb9@lhs*)) (lV2fc2@lab* (map lV2a33@gen-label lV2fb9@lhs*)) (lV2fc3@rhs* (lV2ccc@chi-expr* lV2fba@rhs* lV2fb0@r lV2fb1@mr))) (let ((lV2fc7@rib (lV2a67@make-full-rib lV2fb9@lhs* lV2fc2@lab*)) (lV2fc8@r (lV2c40@add-lexicals lV2fc2@lab* lV2fc1@lex* lV2fb0@r))) (let ((lV2fcb@body (lV2ce6@chi-internal (lV2a93@add-subst lV2fc7@rib (cons lV2fbb@b lV2fbc@b*)) lV2fc8@r lV2fb1@mr))) (lV2a0f@lV296c@build-let '#f lV2fc1@lex* lV2fc3@rhs* lV2fcb@body)))))) lV2fb7@ls/false) (let ((lV2fcd@t lV2fb5@t)) (let ((lV2fcf@ls/false (lV2cae@syntax-dispatch lV2fcd@t '(_ any #(each (any any)) any . each-any)))) (if lV2fcf@ls/false (apply (lambda (lV2fd1@loop lV2fd2@lhs* lV2fd3@rhs* lV2fd4@b lV2fd5@b*) (if (not (lV2aaf@valid-bound-ids? lV2fd2@lhs*)) (lV2c68@invalid-fmls-error lV2faf@e lV2fd2@lhs*) (let ((lV2fdb@lex* (map lV2a2f@gen-lexical lV2fd2@lhs*)) (lV2fdc@lab* (map lV2a33@gen-label lV2fd2@lhs*)) (lV2fdd@rhs* (lV2ccc@chi-expr* lV2fd3@rhs* lV2fb0@r lV2fb1@mr)) (lV2fde@loop-lex (lV2a2f@gen-lexical lV2fd1@loop)) (lV2fdf@loop-lab (lV2a33@gen-label lV2fd1@loop))) (let ((lV2fe5@rib (lV2a67@make-full-rib (cons lV2fd1@loop lV2fd2@lhs*) (cons lV2fdf@loop-lab lV2fdc@lab*))) (lV2fe6@r (lV2c40@add-lexicals (cons lV2fdf@loop-lab lV2fdc@lab*) (cons lV2fde@loop-lex lV2fdb@lex*) lV2fb0@r))) (let ((lV2fe9@body (lV2ce6@chi-internal (lV2a93@add-subst lV2fe5@rib (cons lV2fd4@b lV2fd5@b*)) lV2fe6@r lV2fb1@mr))) (lV2a10@lV296e@build-named-let '#f lV2fde@loop-lex lV2fdb@lex* lV2fdd@rhs* lV2fe9@body)))))) lV2fcf@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2fcd@t))))))))) (set! lV474d@lV2c44@let-transformer lV2c44@let-transformer)) (begin (set! lV2c46@letrec-transformer (lambda (lV2feb@e lV2fec@r lV2fed@mr) (lV2c42@letrec-helper lV2feb@e lV2fec@r lV2fed@mr lV2a0e@lV296a@build-letrec))) (set! lV474e@lV2c46@letrec-transformer lV2c46@letrec-transformer)) (begin (set! lV2c48@letrec*-transformer (lambda (lV2ff1@e lV2ff2@r lV2ff3@mr) (lV2c42@letrec-helper lV2ff1@e lV2ff2@r lV2ff3@mr lV2a11@lV2970@build-letrec*))) (set! lV474f@lV2c48@letrec*-transformer lV2c48@letrec*-transformer)) (begin (set! lV2c4a@fluid-let-syntax-transformer (lambda (lV2ff7@e lV2ff8@r lV2ff9@mr) (let ((lV2ffe@lookup '#f)) (begin (set! lV2ffe@lookup (lambda (lV3011@x) (or (lV2abd@id->label lV3011@x) (lV2d8e@syntax-violation '#f '"unbound identifier" lV2ff7@e lV3011@x)))) (let ((lV2fff@t lV2ff7@e)) (let ((lV3001@ls/false (lV2cae@syntax-dispatch lV2fff@t '(_ #(each (any any)) any . each-any)))) (if lV3001@ls/false (apply (lambda (lV3003@lhs* lV3004@rhs* lV3005@b lV3006@b*) (if (not (lV2aaf@valid-bound-ids? lV3003@lhs*)) (lV2c68@invalid-fmls-error lV2ff7@e lV3003@lhs*) (let ((lV300b@lab* (map lV2ffe@lookup lV3003@lhs*)) (lV300c@rhs* (map (lambda (lV300f@x) (lV2adf@make-eval-transformer (lV2d08@expand-transformer lV300f@x lV2ff9@mr))) lV3004@rhs*))) (lV2ce6@chi-internal (cons lV3005@b lV3006@b*) (append (map cons lV300b@lab* lV300c@rhs*) lV2ff8@r) (append (map cons lV300b@lab* lV300c@rhs*) lV2ff9@mr))))) lV3001@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV2fff@t)))))))) (set! lV4750@lV2c4a@fluid-let-syntax-transformer lV2c4a@fluid-let-syntax-transformer)) (begin (set! lV2c4c@type-descriptor-transformer (lambda (lV3013@e lV3014@r lV3015@mr) (let ((lV3019@t lV3013@e)) (let ((lV301b@ls/false (lV2cae@syntax-dispatch lV3019@t '(_ any)))) (if (and lV301b@ls/false (apply (lambda (lV301d@id) (lV2aa7@id? lV301d@id)) lV301b@ls/false)) (apply (lambda (lV301f@id) (let ((lV3021@lab (lV2abd@id->label lV301f@id))) (let ((lV3023@b (lV2abf@label->binding lV3021@lab lV3014@r))) (let ((lV3025@type (lV2ac3@binding-type lV3023@b))) (begin (if (not lV3021@lab) (lV2ac7@raise-unbound-error lV301f@id) (void)) (if (not (and (eq? lV3025@type '$rtd) (not (list? (lV2ac5@binding-value lV3023@b))))) (lV2d8e@syntax-violation '#f '"not a record type" lV3013@e) (void)) (list 'quote (lV2ac5@binding-value lV3023@b))))))) lV301b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3019@t)))))) (set! lV4751@lV2c4c@type-descriptor-transformer lV2c4c@type-descriptor-transformer)) (begin (set! lV2c4e@record-type-descriptor-transformer (lambda (lV3027@e lV3028@r lV3029@mr) (let ((lV302d@t lV3027@e)) (let ((lV302f@ls/false (lV2cae@syntax-dispatch lV302d@t '(_ any)))) (if (and lV302f@ls/false (apply (lambda (lV3031@id) (lV2aa7@id? lV3031@id)) lV302f@ls/false)) (apply (lambda (lV3033@id) (let ((lV3035@lab (lV2abd@id->label lV3033@id))) (let ((lV3037@b (lV2abf@label->binding lV3035@lab lV3028@r))) (let ((lV3039@type (lV2ac3@binding-type lV3037@b))) (begin (if (not lV3035@lab) (lV2ac7@raise-unbound-error lV3033@id) (void)) (if (not (and (eq? lV3039@type '$rtd) (list? (lV2ac5@binding-value lV3037@b)))) (lV2d8e@syntax-violation '#f '"not a record type" lV3027@e) (void)) (lV2cd0@chi-expr (car (lV2ac5@binding-value lV3037@b)) lV3028@r lV3029@mr)))))) lV302f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV302d@t)))))) (set! lV4752@lV2c4e@record-type-descriptor-transformer lV2c4e@record-type-descriptor-transformer)) (begin (set! lV2c50@record-constructor-descriptor-transformer (lambda (lV303b@e lV303c@r lV303d@mr) (let ((lV3041@t lV303b@e)) (let ((lV3043@ls/false (lV2cae@syntax-dispatch lV3041@t '(_ any)))) (if (and lV3043@ls/false (apply (lambda (lV3045@id) (lV2aa7@id? lV3045@id)) lV3043@ls/false)) (apply (lambda (lV3047@id) (let ((lV3049@lab (lV2abd@id->label lV3047@id))) (let ((lV304b@b (lV2abf@label->binding lV3049@lab lV303c@r))) (let ((lV304d@type (lV2ac3@binding-type lV304b@b))) (begin (if (not lV3049@lab) (lV2ac7@raise-unbound-error lV3047@id) (void)) (if (not (and (eq? lV304d@type '$rtd) (list? (lV2ac5@binding-value lV304b@b)))) (lV2d8e@syntax-violation '#f '"invalid type" lV303b@e) (void)) (lV2cd0@chi-expr (cadr (lV2ac5@binding-value lV304b@b)) lV303c@r lV303d@mr)))))) lV3043@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3041@t)))))) (set! lV4753@lV2c50@record-constructor-descriptor-transformer lV2c50@record-constructor-descriptor-transformer)) (begin (set! lV2c52@when-macro (lambda (lV304f@e) (let ((lV3051@t lV304f@e)) (let ((lV3053@ls/false (lV2cae@syntax-dispatch lV3051@t '(_ any any . each-any)))) (if lV3053@ls/false (apply (lambda (lV3055@test lV3056@e lV3057@e*) (lV2c64@bless (list 'if lV3055@test (cons 'begin (cons lV3056@e lV3057@e*))))) lV3053@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3051@t)))))) (set! lV4754@lV2c52@when-macro lV2c52@when-macro)) (begin (set! lV2c54@unless-macro (lambda (lV305b@e) (let ((lV305d@t lV305b@e)) (let ((lV305f@ls/false (lV2cae@syntax-dispatch lV305d@t '(_ any any . each-any)))) (if lV305f@ls/false (apply (lambda (lV3061@test lV3062@e lV3063@e*) (lV2c64@bless (list 'if (list 'not lV3061@test) (cons 'begin (cons lV3062@e lV3063@e*))))) lV305f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV305d@t)))))) (set! lV4755@lV2c54@unless-macro lV2c54@unless-macro)) (begin (set! lV2c56@if-transformer (lambda (lV3067@e lV3068@r lV3069@mr) (let ((lV306d@t lV3067@e)) (let ((lV306f@ls/false (lV2cae@syntax-dispatch lV306d@t '(_ any any any)))) (if lV306f@ls/false (apply (lambda (lV3071@e0 lV3072@e1 lV3073@e2) (list 'if (lV2cd0@chi-expr lV3071@e0 lV3068@r lV3069@mr) (lV2cd0@chi-expr lV3072@e1 lV3068@r lV3069@mr) (lV2cd0@chi-expr lV3073@e2 lV3068@r lV3069@mr))) lV306f@ls/false) (let ((lV3077@t lV306d@t)) (let ((lV3079@ls/false (lV2cae@syntax-dispatch lV3077@t '(_ any any)))) (if lV3079@ls/false (apply (lambda (lV307b@e0 lV307c@e1) (list 'if (lV2cd0@chi-expr lV307b@e0 lV3068@r lV3069@mr) (lV2cd0@chi-expr lV307c@e1 lV3068@r lV3069@mr) (lV2a0d@lV2968@build-void))) lV3079@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3077@t))))))))) (set! lV4756@lV2c56@if-transformer lV2c56@if-transformer)) (begin (set! lV2c58@and-transformer (lambda (lV307f@e lV3080@r lV3081@mr) (let ((lV3085@t lV307f@e)) (let ((lV3087@ls/false (lV2cae@syntax-dispatch lV3085@t '(_ . each-any)))) (if lV3087@ls/false (apply (lambda (lV3089@e*) (cons 'and (lV2ccc@chi-expr* lV3089@e* lV3080@r lV3081@mr))) lV3087@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3085@t)))))) (set! lV4757@lV2c58@and-transformer lV2c58@and-transformer)) (begin (set! lV2c5a@or-transformer (lambda (lV308b@e lV308c@r lV308d@mr) (let ((lV3091@t lV308b@e)) (let ((lV3093@ls/false (lV2cae@syntax-dispatch lV3091@t '(_ . each-any)))) (if lV3093@ls/false (apply (lambda (lV3095@e*) (cons 'or (lV2ccc@chi-expr* lV3095@e* lV308c@r lV308d@mr))) lV3093@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3091@t)))))) (set! lV4758@lV2c5a@or-transformer lV2c5a@or-transformer)) (begin (set! lV2c5c@case-macro (lambda (lV3097@e) (let ((lV309a@build-last '#f) (lV309c@build-one '#f)) (begin (set! lV309a@build-last (lambda (lV30c1@cls) (let ((lV30c3@t lV30c1@cls)) (let ((lV30c5@ls/false (lV2cae@syntax-dispatch lV30c3@t '(#(scheme-id else) any . each-any)))) (if lV30c5@ls/false (apply (lambda (lV30c7@e lV30c8@e*) (cons 'begin (cons lV30c7@e lV30c8@e*))) lV30c5@ls/false) (let ((lV30cb@t lV30c3@t)) (let ((lV30cd@ls/false (lV2cae@syntax-dispatch lV30cb@t '_))) (if lV30cd@ls/false (apply (lambda () (lV309c@build-one lV30c1@cls '(if #f #f))) lV30cd@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30cb@t))))))))) (set! lV309c@build-one (lambda (lV30b3@cls lV30b4@k) (let ((lV30b7@t lV30b3@cls)) (let ((lV30b9@ls/false (lV2cae@syntax-dispatch lV30b7@t '(each-any any . each-any)))) (if lV30b9@ls/false (apply (lambda (lV30bb@d* lV30bc@e lV30bd@e*) (list 'if (list 'memv 't (list 'quote lV30bb@d*)) (cons 'begin (cons lV30bc@e lV30bd@e*)) lV30b4@k)) lV30b9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30b7@t)))))) (let ((lV309d@t lV3097@e)) (let ((lV309f@ls/false (lV2cae@syntax-dispatch lV309d@t '(_ any)))) (if lV309f@ls/false (apply (lambda (lV30a1@expr) (lV2c64@bless (cons 'let (cons (list (list 't lV30a1@expr)) '((if #f #f)))))) lV309f@ls/false) (let ((lV30a3@t lV309d@t)) (let ((lV30a5@ls/false (lV2cae@syntax-dispatch lV30a3@t '(_ any any . each-any)))) (if lV30a5@ls/false (apply (lambda (lV30a7@expr lV30a8@cls lV30a9@cls*) (lV2c64@bless (list 'let (list (list 't lV30a7@expr)) (let lV30b1@f ((lV30ad@cls lV30a8@cls) (lV30ae@cls* lV30a9@cls*)) (if (null? lV30ae@cls*) (lV309a@build-last lV30ad@cls) (lV309c@build-one lV30ad@cls (lV30b1@f (car lV30ae@cls*) (cdr lV30ae@cls*)))))))) lV30a5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30a3@t))))))))))) (set! lV4759@lV2c5c@case-macro lV2c5c@case-macro)) (begin (set! lV2c5e@quote-transformer (lambda (lV30cf@e lV30d0@r lV30d1@mr) (let ((lV30d5@t lV30cf@e)) (let ((lV30d7@ls/false (lV2cae@syntax-dispatch lV30d5@t '(_ any)))) (if lV30d7@ls/false (apply (lambda (lV30d9@datum) (list 'quote (lV2abb@stx->datum lV30d9@datum))) lV30d7@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30d5@t)))))) (set! lV475a@lV2c5e@quote-transformer lV2c5e@quote-transformer)) (begin (set! lV2c60@case-lambda-transformer (lambda (lV30db@e lV30dc@r lV30dd@mr) (let ((lV30e1@t lV30db@e)) (let ((lV30e3@ls/false (lV2cae@syntax-dispatch lV30e1@t '(_ . #(each (any any . each-any)))))) (if lV30e3@ls/false (apply (lambda (lV30e5@fmls* lV30e6@b* lV30e7@b**) (call-with-values (lambda () (lV2cd8@chi-lambda-clause* lV30db@e lV30e5@fmls* (map cons lV30e6@b* lV30e7@b**) lV30dc@r lV30dd@mr)) (lambda (lV30ef@lV30ec lV30f0@lV30ee) (let ((lV30f3@body* lV30f0@lV30ee) (lV30f4@fmls* lV30ef@lV30ec)) (lV2a0b@lV2938@build-case-lambda '#f lV30f4@fmls* lV30f3@body*))))) lV30e3@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30e1@t)))))) (set! lV475b@lV2c60@case-lambda-transformer lV2c60@case-lambda-transformer)) (begin (set! lV2c62@lambda-transformer (lambda (lV30f7@e lV30f8@r lV30f9@mr) (let ((lV30fd@t lV30f7@e)) (let ((lV30ff@ls/false (lV2cae@syntax-dispatch lV30fd@t '(_ any any . each-any)))) (if lV30ff@ls/false (apply (lambda (lV3101@fmls lV3102@b lV3103@b*) (call-with-values (lambda () (lV2cd6@chi-lambda-clause lV30f7@e lV3101@fmls (cons lV3102@b lV3103@b*) lV30f8@r lV30f9@mr)) (lambda (lV310b@lV3108 lV310c@lV310a) (let ((lV310f@body lV310c@lV310a) (lV3110@fmls lV310b@lV3108)) (lV2a0a@lV2936@build-lambda '#f lV3110@fmls lV310f@body))))) lV30ff@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV30fd@t)))))) (set! lV475c@lV2c62@lambda-transformer lV2c62@lambda-transformer)) (begin (set! lV2c64@bless (lambda (lV3113@x) (lV2a8f@mkstx (let lV3117@f ((lV3115@x lV3113@x)) (if (lV2a73@stx? lV3115@x) lV3115@x (if (pair? lV3115@x) (cons (lV3117@f (car lV3115@x)) (lV3117@f (cdr lV3115@x))) (if (symbol? lV3115@x) (lV2c36@scheme-stx lV3115@x) (if (vector? lV3115@x) (vector-map lV3117@f lV3115@x) lV3115@x))))) '() '() '()))) (set! lV475d@lV2c64@bless lV2c64@bless)) (begin (set! lV2c66@with-syntax-macro (lambda (lV3119@e) (let ((lV311b@t lV3119@e)) (let ((lV311d@ls/false (lV2cae@syntax-dispatch lV311b@t '(_ #(each (any any)) any . each-any)))) (if lV311d@ls/false (apply (lambda (lV311f@pat* lV3120@expr* lV3121@b lV3122@b*) (let ((lV3127@idn* (let lV312b@f ((lV3129@pat* lV311f@pat*)) (if (null? lV3129@pat*) '() (call-with-values (lambda () (lV2cac@convert-pattern (car lV3129@pat*) '())) (lambda (lV3131@lV312e lV3132@lV3130) (let ((lV3135@idn* lV3132@lV3130) (lV3136@pat lV3131@lV312e)) (append lV3135@idn* (lV312b@f (cdr lV3129@pat*)))))))))) (begin (lV2cd4@verify-formals (map car lV3127@idn*) lV3119@e) (let ((lV3139@t* (lV2d7c@generate-temporaries lV3120@expr*))) (lV2c64@bless (list 'let (map list lV3139@t* lV3120@expr*) (let lV313f@f ((lV313b@pat* lV311f@pat*) (lV313c@t* lV3139@t*)) (if (null? lV313b@pat*) (cons 'begin (cons '#f (cons lV3121@b lV3122@b*))) (list 'syntax-case (car lV313c@t*) '() (list (car lV313b@pat*) (lV313f@f (cdr lV313b@pat*) (cdr lV313c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car lV313b@pat*)) (car lV313c@t*)))))))))))) lV311d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV311b@t)))))) (set! lV475e@lV2c66@with-syntax-macro lV2c66@with-syntax-macro)) (begin (set! lV2c68@invalid-fmls-error (lambda (lV3141@stx lV3142@fmls) (let ((lV3145@t lV3142@fmls)) (let ((lV3147@ls/false (lV2cae@syntax-dispatch lV3145@t '#(each+ any () any)))) (if lV3147@ls/false (apply (lambda (lV3149@id* lV314a@last) (let lV314f@f ((lV314d@id* (if (lV2aa7@id? lV314a@last) (cons lV314a@last lV3149@id*) (if (lV2a9d@syntax-null? lV314a@last) lV3149@id* (lV2d8e@syntax-violation '#f '"not an identifier" lV3141@stx lV314a@last))))) (if (null? lV314d@id*) (values) (if (not (lV2aa7@id? (car lV314d@id*))) (lV2d8e@syntax-violation '#f '"not an identifier" lV3141@stx (car lV314d@id*)) (begin (lV314f@f (cdr lV314d@id*)) (if (lV2ab3@bound-id-member? (car lV314d@id*) (cdr lV314d@id*)) (lV2d8e@syntax-violation '#f '"duplicate binding" lV3141@stx (car lV314d@id*)) (void))))))) lV3147@ls/false) (let ((lV3151@t lV3145@t)) (let ((lV3153@ls/false (lV2cae@syntax-dispatch lV3151@t '_))) (if lV3153@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"malformed binding form" lV3141@stx lV3142@fmls)) lV3153@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3151@t))))))))) (set! lV475f@lV2c68@invalid-fmls-error lV2c68@invalid-fmls-error)) (begin (set! lV2c6a@let-macro (lambda (lV3155@stx) (let ((lV3157@t lV3155@stx)) (let ((lV3159@ls/false (lV2cae@syntax-dispatch lV3157@t '(_ #(each (any any)) any . each-any)))) (if lV3159@ls/false (apply (lambda (lV315b@lhs* lV315c@rhs* lV315d@b lV315e@b*) (if (lV2aaf@valid-bound-ids? lV315b@lhs*) (lV2c64@bless (cons (cons 'lambda (cons lV315b@lhs* (cons lV315d@b lV315e@b*))) lV315c@rhs*)) (lV2c68@invalid-fmls-error lV3155@stx lV315b@lhs*))) lV3159@ls/false) (let ((lV3163@t lV3157@t)) (let ((lV3165@ls/false (lV2cae@syntax-dispatch lV3163@t '(_ any #(each (any any)) any . each-any)))) (if (and lV3165@ls/false (apply (lambda (lV3167@f lV3168@lhs* lV3169@rhs* lV316a@b lV316b@b*) (lV2aa7@id? lV3167@f)) lV3165@ls/false)) (apply (lambda (lV3171@f lV3172@lhs* lV3173@rhs* lV3174@b lV3175@b*) (if (lV2aaf@valid-bound-ids? lV3172@lhs*) (lV2c64@bless (cons (list 'letrec (list (list lV3171@f (cons 'lambda (cons lV3172@lhs* (cons lV3174@b lV3175@b*))))) lV3171@f) lV3173@rhs*)) (lV2c68@invalid-fmls-error lV3155@stx lV3172@lhs*))) lV3165@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3163@t))))))))) (set! lV4760@lV2c6a@let-macro lV2c6a@let-macro)) (begin (set! lV2c6c@let-values-macro (lambda (lV317b@stx) (let ((lV317e@rename '#f) (lV3180@rename* '#f)) (begin (set! lV317e@rename (lambda (lV31e3@x lV31e4@old* lV31e5@new*) (begin (if (not (lV2aa7@id? lV31e3@x)) (lV2d8e@syntax-violation '#f '"not an indentifier" lV317b@stx lV31e3@x) (void)) (if (lV2ab3@bound-id-member? lV31e3@x lV31e4@old*) (lV2d8e@syntax-violation '#f '"duplicate binding" lV317b@stx lV31e3@x) (void)) (let ((lV31e9@y (gensym (lV2d94@syntax->datum lV31e3@x)))) (values lV31e9@y (cons lV31e3@x lV31e4@old*) (cons lV31e9@y lV31e5@new*)))))) (set! lV3180@rename* (lambda (lV31d1@x* lV31d2@old* lV31d3@new*) (if (null? lV31d1@x*) (values '() lV31d2@old* lV31d3@new*) (call-with-values (lambda () (lV317e@rename (car lV31d1@x*) lV31d2@old* lV31d3@new*)) (lambda (lV31d7@x lV31d8@old* lV31d9@new*) (call-with-values (lambda () (lV3180@rename* (cdr lV31d1@x*) lV31d8@old* lV31d9@new*)) (lambda (lV31dd@x* lV31de@old* lV31df@new*) (values (cons lV31d7@x lV31dd@x*) lV31de@old* lV31df@new*)))))))) (let ((lV3181@t lV317b@stx)) (let ((lV3183@ls/false (lV2cae@syntax-dispatch lV3181@t '(_ () any . each-any)))) (if lV3183@ls/false (apply (lambda (lV3185@b lV3186@b*) (cons* (lV2c64@bless 'let) '() lV3185@b lV3186@b*)) lV3183@ls/false) (let ((lV3189@t lV3181@t)) (let ((lV318b@ls/false (lV2cae@syntax-dispatch lV3189@t '(_ #(each (any any)) any . each-any)))) (if lV318b@ls/false (apply (lambda (lV318d@lhs* lV318e@rhs* lV318f@b lV3190@b*) (lV2c64@bless (let lV319d@f ((lV3195@lhs* lV318d@lhs*) (lV3196@rhs* lV318e@rhs*) (lV3197@old* '()) (lV3198@new* '())) (if (null? lV3195@lhs*) (cons 'let (cons (map list lV3197@old* lV3198@new*) (cons lV318f@b lV3190@b*))) (let ((lV319f@t (car lV3195@lhs*))) (let ((lV31a1@ls/false (lV2cae@syntax-dispatch lV319f@t 'each-any))) (if lV31a1@ls/false (apply (lambda (lV31a3@x*) (call-with-values (lambda () (lV3180@rename* lV31a3@x* lV3197@old* lV3198@new*)) (lambda (lV31ab@lV31a6 lV31ac@lV31a8 lV31ad@lV31aa) (let ((lV31b1@new* lV31ad@lV31aa) (lV31b2@old* lV31ac@lV31a8) (lV31b3@y* lV31ab@lV31a6)) (list 'call-with-values (list 'lambda '() (car lV3196@rhs*)) (list 'lambda lV31b3@y* (lV319d@f (cdr lV3195@lhs*) (cdr lV3196@rhs*) lV31b2@old* lV31b1@new*))))))) lV31a1@ls/false) (let ((lV31b7@t lV319f@t)) (let ((lV31b9@ls/false (lV2cae@syntax-dispatch lV31b7@t '#(each+ any () any)))) (if lV31b9@ls/false (apply (lambda (lV31bb@x* lV31bc@x) (call-with-values (lambda () (lV317e@rename lV31bc@x lV3197@old* lV3198@new*)) (lambda (lV31bf@y lV31c0@old* lV31c1@new*) (call-with-values (lambda () (lV3180@rename* lV31bb@x* lV31c0@old* lV31c1@new*)) (lambda (lV31c5@y* lV31c6@old* lV31c7@new*) (list 'call-with-values (list 'lambda '() (car lV3196@rhs*)) (list 'lambda (append lV31c5@y* lV31bf@y) (lV319d@f (cdr lV3195@lhs*) (cdr lV3196@rhs*) lV31c6@old* lV31c7@new*)))))))) lV31b9@ls/false) (let ((lV31cb@t lV31b7@t)) (let ((lV31cd@ls/false (lV2cae@syntax-dispatch lV31cb@t 'any))) (if lV31cd@ls/false (apply (lambda (lV31cf@others) (lV2d8e@syntax-violation '#f '"malformed bindings" lV317b@stx lV31cf@others)) lV31cd@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV31cb@t)))))))))))))) lV318b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3189@t))))))))))) (set! lV4761@lV2c6c@let-values-macro lV2c6c@let-values-macro)) (begin (set! lV2c6e@let*-values-macro (lambda (lV31eb@stx) (let ((lV31ee@check '#f)) (begin (set! lV31ee@check (lambda (lV321d@x*) (if (not (null? lV321d@x*)) (let ((lV321f@x (car lV321d@x*))) (begin (if (not (lV2aa7@id? lV321f@x)) (lV2d8e@syntax-violation '#f '"not an identifier" lV31eb@stx lV321f@x) (void)) (lV31ee@check (cdr lV321d@x*)) (if (lV2ab3@bound-id-member? lV321f@x (cdr lV321d@x*)) (lV2d8e@syntax-violation '#f '"duplicate identifier" lV31eb@stx lV321f@x) (void)))) (void)))) (let ((lV31ef@t lV31eb@stx)) (let ((lV31f1@ls/false (lV2cae@syntax-dispatch lV31ef@t '(_ () any . each-any)))) (if lV31f1@ls/false (apply (lambda (lV31f3@b lV31f4@b*) (cons* (lV2c64@bless 'let) '() lV31f3@b lV31f4@b*)) lV31f1@ls/false) (let ((lV31f7@t lV31ef@t)) (let ((lV31f9@ls/false (lV2cae@syntax-dispatch lV31f7@t '(_ #(each (any any)) any . each-any)))) (if lV31f9@ls/false (apply (lambda (lV31fb@lhs* lV31fc@rhs* lV31fd@b lV31fe@b*) (lV2c64@bless (let lV3207@f ((lV3203@lhs* lV31fb@lhs*) (lV3204@rhs* lV31fc@rhs*)) (if (null? lV3203@lhs*) (cons 'begin (cons lV31fd@b lV31fe@b*)) (let ((lV3209@t (car lV3203@lhs*))) (let ((lV320b@ls/false (lV2cae@syntax-dispatch lV3209@t 'each-any))) (if lV320b@ls/false (apply (lambda (lV320d@x*) (begin (lV31ee@check lV320d@x*) (list 'call-with-values (list 'lambda '() (car lV3204@rhs*)) (list 'lambda lV320d@x* (lV3207@f (cdr lV3203@lhs*) (cdr lV3204@rhs*)))))) lV320b@ls/false) (let ((lV320f@t lV3209@t)) (let ((lV3211@ls/false (lV2cae@syntax-dispatch lV320f@t '#(each+ any () any)))) (if lV3211@ls/false (apply (lambda (lV3213@x* lV3214@x) (begin (lV31ee@check (cons lV3214@x lV3213@x*)) (list 'call-with-values (list 'lambda '() (car lV3204@rhs*)) (list 'lambda (append lV3213@x* lV3214@x) (lV3207@f (cdr lV3203@lhs*) (cdr lV3204@rhs*)))))) lV3211@ls/false) (let ((lV3217@t lV320f@t)) (let ((lV3219@ls/false (lV2cae@syntax-dispatch lV3217@t 'any))) (if lV3219@ls/false (apply (lambda (lV321b@others) (lV2d8e@syntax-violation '#f '"malformed bindings" lV31eb@stx lV321b@others)) lV3219@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3217@t)))))))))))))) lV31f9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV31f7@t))))))))))) (set! lV4762@lV2c6e@let*-values-macro lV2c6e@let*-values-macro)) (begin (set! lV2c70@trace-lambda-macro (lambda (lV3221@stx) (let ((lV3223@t lV3221@stx)) (let ((lV3225@ls/false (lV2cae@syntax-dispatch lV3223@t '(_ any each-any any . each-any)))) (if lV3225@ls/false (apply (lambda (lV3227@who lV3228@fmls lV3229@b lV322a@b*) (if (lV2aaf@valid-bound-ids? lV3228@fmls) (lV2c64@bless (list 'make-traced-procedure (list 'quote lV3227@who) (cons 'lambda (cons lV3228@fmls (cons lV3229@b lV322a@b*))))) (lV2c68@invalid-fmls-error lV3221@stx lV3228@fmls))) lV3225@ls/false) (let ((lV322f@t lV3223@t)) (let ((lV3231@ls/false (lV2cae@syntax-dispatch lV322f@t '(_ any #(each+ any () any) any . each-any)))) (if lV3231@ls/false (apply (lambda (lV3233@who lV3234@fmls lV3235@last lV3236@b lV3237@b*) (if (lV2aaf@valid-bound-ids? (cons lV3235@last lV3234@fmls)) (lV2c64@bless (list 'make-traced-procedure (list 'quote lV3233@who) (cons 'lambda (cons (append lV3234@fmls lV3235@last) (cons lV3236@b lV3237@b*))))) (lV2c68@invalid-fmls-error lV3221@stx (append lV3234@fmls lV3235@last)))) lV3231@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV322f@t))))))))) (set! lV4763@lV2c70@trace-lambda-macro lV2c70@trace-lambda-macro)) (begin (set! lV2c72@trace-define-macro (lambda (lV323d@stx) (let ((lV323f@t lV323d@stx)) (let ((lV3241@ls/false (lV2cae@syntax-dispatch lV323f@t '(_ (any . each-any) any . each-any)))) (if lV3241@ls/false (apply (lambda (lV3243@who lV3244@fmls lV3245@b lV3246@b*) (if (lV2aaf@valid-bound-ids? lV3244@fmls) (lV2c64@bless (list 'define lV3243@who (list 'make-traced-procedure (list 'quote lV3243@who) (cons 'lambda (cons lV3244@fmls (cons lV3245@b lV3246@b*)))))) (lV2c68@invalid-fmls-error lV323d@stx lV3244@fmls))) lV3241@ls/false) (let ((lV324b@t lV323f@t)) (let ((lV324d@ls/false (lV2cae@syntax-dispatch lV324b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if lV324d@ls/false (apply (lambda (lV324f@who lV3250@fmls lV3251@last lV3252@b lV3253@b*) (if (lV2aaf@valid-bound-ids? (cons lV3251@last lV3250@fmls)) (lV2c64@bless (list 'define lV324f@who (list 'make-traced-procedure (list 'quote lV324f@who) (cons 'lambda (cons (append lV3250@fmls lV3251@last) (cons lV3252@b lV3253@b*)))))) (lV2c68@invalid-fmls-error lV323d@stx (append lV3250@fmls lV3251@last)))) lV324d@ls/false) (let ((lV3259@t lV324b@t)) (let ((lV325b@ls/false (lV2cae@syntax-dispatch lV3259@t '(_ any any)))) (if lV325b@ls/false (apply (lambda (lV325d@who lV325e@expr) (if (lV2aa7@id? lV325d@who) (lV2c64@bless (list 'define lV325d@who (list 'let (list (list 'v lV325e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote lV325d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (lV2d8e@syntax-violation '#f '"invalid name" lV323d@stx))) lV325b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3259@t)))))))))))) (set! lV4764@lV2c72@trace-define-macro lV2c72@trace-define-macro)) (begin (set! lV2c74@trace-define-syntax-macro (lambda (lV3261@stx) (let ((lV3263@t lV3261@stx)) (let ((lV3265@ls/false (lV2cae@syntax-dispatch lV3263@t '(_ any any)))) (if lV3265@ls/false (apply (lambda (lV3267@who lV3268@expr) (if (lV2aa7@id? lV3267@who) (lV2c64@bless (list 'define-syntax lV3267@who (list 'make-traced-macro (list 'quote lV3267@who) lV3268@expr))) (lV2d8e@syntax-violation '#f '"invalid name" lV3261@stx))) lV3265@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3263@t)))))) (set! lV4765@lV2c74@trace-define-syntax-macro lV2c74@trace-define-syntax-macro)) (begin (set! lV2c76@trace-let/rec-syntax (lambda (lV326b@who) (lambda (lV326d@stx) (let ((lV326f@t lV326d@stx)) (let ((lV3271@ls/false (lV2cae@syntax-dispatch lV326f@t '(_ #(each (any any)) any . each-any)))) (if lV3271@ls/false (apply (lambda (lV3273@lhs* lV3274@rhs* lV3275@b lV3276@b*) (if (lV2aaf@valid-bound-ids? lV3273@lhs*) (let ((lV327b@rhs* (map (lambda (lV327d@lhs lV327e@rhs) (list 'make-traced-macro (list 'quote lV327d@lhs) lV327e@rhs)) lV3273@lhs* lV3274@rhs*))) (lV2c64@bless (cons lV326b@who (cons (map list lV3273@lhs* lV327b@rhs*) (cons lV3275@b lV3276@b*))))) (lV2c68@invalid-fmls-error lV326d@stx lV3273@lhs*))) lV3271@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV326f@t))))))) (set! lV4766@lV2c76@trace-let/rec-syntax lV2c76@trace-let/rec-syntax)) (begin (set! lV2c78@trace-let-syntax-macro (lV2c76@trace-let/rec-syntax 'let-syntax)) (set! lV4767@lV2c78@trace-let-syntax-macro lV2c78@trace-let-syntax-macro)) (begin (set! lV2c7a@trace-letrec-syntax-macro (lV2c76@trace-let/rec-syntax 'letrec-syntax)) (set! lV4768@lV2c7a@trace-letrec-syntax-macro lV2c7a@trace-letrec-syntax-macro)) (begin (set! lV2c7c@guard-macro (lambda (lV3281@x) (let ((lV3284@gen-clauses '#f)) (begin (set! lV3284@gen-clauses (lambda (lV329b@con lV329c@outerk lV329d@clause*) (let ((lV32a2@f '#f) (lV32a4@f* '#f)) (begin (set! lV32a2@f (lambda (lV32db@x lV32dc@k) (let ((lV32df@t lV32db@x)) (let ((lV32e1@ls/false (lV2cae@syntax-dispatch lV32df@t '(any #(scheme-id =>) any)))) (if lV32e1@ls/false (apply (lambda (lV32e3@e lV32e4@p) (let ((lV32e7@t (gensym))) (list 'let (list (list lV32e7@t lV32e3@e)) (list 'if lV32e7@t (list lV32e4@p lV32e7@t) lV32dc@k)))) lV32e1@ls/false) (let ((lV32e9@t lV32df@t)) (let ((lV32eb@ls/false (lV2cae@syntax-dispatch lV32e9@t '(any)))) (if lV32eb@ls/false (apply (lambda (lV32ed@e) (let ((lV32ef@t (gensym))) (list 'let (list (list lV32ef@t lV32ed@e)) (list 'if lV32ef@t lV32ef@t lV32dc@k)))) lV32eb@ls/false) (let ((lV32f1@t lV32e9@t)) (let ((lV32f3@ls/false (lV2cae@syntax-dispatch lV32f1@t '(any any . each-any)))) (if lV32f3@ls/false (apply (lambda (lV32f5@e lV32f6@v lV32f7@v*) (list 'if lV32f5@e (cons 'begin (cons lV32f6@v lV32f7@v*)) lV32dc@k)) lV32f3@ls/false) (let ((lV32fb@t lV32f1@t)) (let ((lV32fd@ls/false (lV2cae@syntax-dispatch lV32fb@t '_))) (if lV32fd@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid guard clause" lV32db@x)) lV32fd@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV32fb@t))))))))))))))) (set! lV32a4@f* (lambda (lV32b1@x*) (let ((lV32b3@t lV32b1@x*)) (let ((lV32b5@ls/false (lV2cae@syntax-dispatch lV32b3@t '()))) (if lV32b5@ls/false (apply (lambda () (let ((lV32b7@g (gensym))) (values (list lV32b7@g (list 'lambda '() (list 'raise-continuable lV329b@con))) lV32b7@g))) lV32b5@ls/false) (let ((lV32b9@t lV32b3@t)) (let ((lV32bb@ls/false (lV2cae@syntax-dispatch lV32b9@t '((#(scheme-id else) any . each-any))))) (if lV32bb@ls/false (apply (lambda (lV32bd@e lV32be@e*) (values (cons 'begin (cons lV32bd@e lV32be@e*)) '#f)) lV32bb@ls/false) (let ((lV32c1@t lV32b9@t)) (let ((lV32c3@ls/false (lV2cae@syntax-dispatch lV32c1@t '(any . any)))) (if lV32c3@ls/false (apply (lambda (lV32c5@cls lV32c6@cls*) (call-with-values (lambda () (lV32a4@f* lV32c6@cls*)) (lambda (lV32cd@lV32ca lV32ce@lV32cc) (let ((lV32d1@g lV32ce@lV32cc) (lV32d2@e lV32cd@lV32ca)) (values (lV32a2@f lV32c5@cls lV32d2@e) lV32d1@g))))) lV32c3@ls/false) (let ((lV32d5@t lV32c1@t)) (let ((lV32d7@ls/false (lV2cae@syntax-dispatch lV32d5@t 'any))) (if lV32d7@ls/false (apply (lambda (lV32d9@others) (lV2d8e@syntax-violation '#f '"invalid guard clause" lV32d9@others)) lV32d7@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV32d5@t))))))))))))))) (call-with-values (lambda () (lV32a4@f* lV329d@clause*)) (lambda (lV32a9@lV32a6 lV32aa@lV32a8) (let ((lV32ad@raisek lV32aa@lV32a8) (lV32ae@code lV32a9@lV32a6)) (if lV32ad@raisek (list (list 'call/cc (list 'lambda (list lV32ad@raisek) (list lV329c@outerk (list 'lambda '() lV32ae@code))))) (list lV329c@outerk (list 'lambda '() lV32ae@code)))))))))) (let ((lV3285@t lV3281@x)) (let ((lV3287@ls/false (lV2cae@syntax-dispatch lV3285@t '(_ (any . each-any) any . each-any)))) (if (and lV3287@ls/false (apply (lambda (lV3289@con lV328a@clause* lV328b@b lV328c@b*) (lV2aa7@id? lV3289@con)) lV3287@ls/false)) (apply (lambda (lV3291@con lV3292@clause* lV3293@b lV3294@b*) (let ((lV3299@outerk (gensym))) (lV2c64@bless (list (list 'call/cc (list 'lambda (list lV3299@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list lV3291@con) (lV3284@gen-clauses lV3291@con lV3299@outerk lV3292@clause*)) (cons 'lambda (cons '() (cons lV3293@b lV3294@b*))))))))))) lV3287@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3285@t)))))))) (set! lV4769@lV2c7c@guard-macro lV2c7c@guard-macro)) (begin (set! lV2c7e@define-enumeration-macro (lambda (lV32ff@stx) (let ((lV3302@set? '#f) (lV3304@remove-dups '#f)) (begin (set! lV3302@set? (lambda (lV331b@x) (or (null? lV331b@x) (and (not (memq (car lV331b@x) (cdr lV331b@x))) (lV3302@set? (cdr lV331b@x)))))) (set! lV3304@remove-dups (lambda (lV3319@ls) (if (null? lV3319@ls) '() (cons (car lV3319@ls) (lV3304@remove-dups (remq (car lV3319@ls) (cdr lV3319@ls))))))) (let ((lV3305@t lV32ff@stx)) (let ((lV3307@ls/false (lV2cae@syntax-dispatch lV3305@t '(_ any each-any any)))) (if (and lV3307@ls/false (apply (lambda (lV3309@name lV330a@id* lV330b@maker) (and (lV2aa7@id? lV3309@name) (lV2aa7@id? lV330b@maker) (for-all lV2aa7@id? lV330a@id*))) lV3307@ls/false)) (apply (lambda (lV330f@name lV3310@id* lV3311@maker) (let ((lV3315@name* (lV3304@remove-dups (lV2d94@syntax->datum lV3310@id*))) (lV3316@mk (gensym))) (lV2c64@bless (list 'begin (list 'define lV3316@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote lV3315@name*)))) (list 'define-syntax lV330f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote lV3315@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote lV330f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax lV3311@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote lV3311@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote lV3315@name*)) (cons 'syntax-violation (cons (list 'quote lV3311@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons lV3316@mk '('(n* ...))))))))))))) lV3307@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3305@t)))))))) (set! lV476a@lV2c7e@define-enumeration-macro lV2c7e@define-enumeration-macro)) (begin (set! lV2c80@time-macro (lambda (lV331d@stx) (let ((lV331f@t lV331d@stx)) (let ((lV3321@ls/false (lV2cae@syntax-dispatch lV331f@t '(_ any)))) (if lV3321@ls/false (apply (lambda (lV3323@expr) (lV2c64@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() lV3323@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) lV3321@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV331f@t)))))) (set! lV476b@lV2c80@time-macro lV2c80@time-macro)) (begin (set! lV2c82@delay-macro (lambda (lV3325@stx) (let ((lV3327@t lV3325@stx)) (let ((lV3329@ls/false (lV2cae@syntax-dispatch lV3327@t '(_ any)))) (if lV3329@ls/false (apply (lambda (lV332b@expr) (lV2c64@bless (list 'make-promise (list 'lambda '() lV332b@expr)))) lV3329@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3327@t)))))) (set! lV476c@lV2c82@delay-macro lV2c82@delay-macro)) (begin (set! lV2c84@assert-macro (lambda (lV332d@stx) (let ((lV332f@t lV332d@stx)) (let ((lV3331@ls/false (lV2cae@syntax-dispatch lV332f@t '(_ any)))) (if lV3331@ls/false (apply (lambda (lV3333@expr) (let ((lV3335@pos (or (lV2d86@expression-position lV332d@stx) (lV2d86@expression-position lV3333@expr)))) (lV2c64@bless (list 'unless lV3333@expr (list 'assertion-error (list 'quote lV3333@expr) (list 'quote lV3335@pos)))))) lV3331@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV332f@t)))))) (set! lV476d@lV2c84@assert-macro lV2c84@assert-macro)) (begin (set! lV2c86@endianness-macro (lambda (lV3337@stx) (let ((lV3339@t lV3337@stx)) (let ((lV333b@ls/false (lV2cae@syntax-dispatch lV3339@t '(_ any)))) (if lV333b@ls/false (apply (lambda (lV333d@e) (let ((lV333f@t (lV2d94@syntax->datum lV333d@e))) (if (memv lV333f@t '(little)) (lV2c64@bless ''little) (if (memv lV333f@t '(big)) (lV2c64@bless ''big) (lV2d8e@syntax-violation '#f '"endianness must be big or little" lV3337@stx))))) lV333b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3339@t)))))) (set! lV476e@lV2c86@endianness-macro lV2c86@endianness-macro)) (begin (set! lV2c88@identifier-syntax-macro (lambda (lV3341@stx) (let ((lV3343@t lV3341@stx)) (let ((lV3345@ls/false (lV2cae@syntax-dispatch lV3343@t '(_ any)))) (if lV3345@ls/false (apply (lambda (lV3347@expr) (lV2c64@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax lV3347@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax lV3347@expr) '((syntax (e* ...)))))))))) lV3345@ls/false) (let ((lV3349@t lV3343@t)) (let ((lV334b@ls/false (lV2cae@syntax-dispatch lV3349@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and lV334b@ls/false (apply (lambda (lV334d@id1 lV334e@expr1 lV334f@id2 lV3350@expr2 lV3351@expr3) (and (lV2aa7@id? lV334d@id1) (lV2aa7@id? lV334f@id2) (lV2aa7@id? lV3350@expr2))) lV334b@ls/false)) (apply (lambda (lV3357@id1 lV3358@expr1 lV3359@id2 lV335a@expr2 lV335b@expr3) (lV2c64@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax lV3358@expr1)) (list (list 'set! 'id lV335a@expr2) (list 'syntax lV335b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons lV3358@expr1 '(e* ...))))))))) lV334b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3349@t))))))))) (set! lV476f@lV2c88@identifier-syntax-macro lV2c88@identifier-syntax-macro)) (begin (set! lV2c8a@do-macro (lambda (lV3361@stx) (let ((lV3364@bind '#f)) (begin (set! lV3364@bind (lambda (lV337b@x) (let ((lV337d@t lV337b@x)) (let ((lV337f@ls/false (lV2cae@syntax-dispatch lV337d@t '(any any)))) (if lV337f@ls/false (apply (lambda (lV3381@x lV3382@init) (list lV3381@x lV3382@init lV3381@x)) lV337f@ls/false) (let ((lV3385@t lV337d@t)) (let ((lV3387@ls/false (lV2cae@syntax-dispatch lV3385@t '(any any any)))) (if lV3387@ls/false (apply (lambda (lV3389@x lV338a@init lV338b@step) (list lV3389@x lV338a@init lV338b@step)) lV3387@ls/false) (let ((lV338f@t lV3385@t)) (let ((lV3391@ls/false (lV2cae@syntax-dispatch lV338f@t '_))) (if lV3391@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid binding" lV3361@stx)) lV3391@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV338f@t)))))))))))) (let ((lV3365@t lV3361@stx)) (let ((lV3367@ls/false (lV2cae@syntax-dispatch lV3365@t '(_ each-any (any . each-any) . each-any)))) (if lV3367@ls/false (apply (lambda (lV3369@binding* lV336a@test lV336b@expr* lV336c@command*) (let ((lV3371@t (map lV3364@bind lV3369@binding*))) (let ((lV3373@ls/false (lV2cae@syntax-dispatch lV3371@t '#(each (any any any))))) (if lV3373@ls/false (apply (lambda (lV3375@x* lV3376@init* lV3377@step*) (if (lV2aaf@valid-bound-ids? lV3375@x*) (lV2c64@bless (list 'letrec (list (list 'loop (list 'lambda lV3375@x* (list 'if lV336a@test (cons 'begin (cons '(if #f #f) lV336b@expr*)) (cons 'begin (append lV336c@command* (list (cons 'loop lV3377@step*)))))))) (cons 'loop lV3376@init*))) (lV2d8e@syntax-violation '#f '"invalid bindings" lV3361@stx))) lV3373@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3371@t))))) lV3367@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3365@t)))))))) (set! lV4770@lV2c8a@do-macro lV2c8a@do-macro)) (begin (set! lV2c8c@let*-macro (lambda (lV3393@stx) (let ((lV3395@t lV3393@stx)) (let ((lV3397@ls/false (lV2cae@syntax-dispatch lV3395@t '(_ #(each (any any)) any . each-any)))) (if (and lV3397@ls/false (apply (lambda (lV3399@lhs* lV339a@rhs* lV339b@b lV339c@b*) (for-all lV2aa7@id? lV3399@lhs*)) lV3397@ls/false)) (apply (lambda (lV33a1@lhs* lV33a2@rhs* lV33a3@b lV33a4@b*) (lV2c64@bless (let lV33ab@f ((lV33a9@x* (map list lV33a1@lhs* lV33a2@rhs*))) (if (null? lV33a9@x*) (cons 'let (cons '() (cons lV33a3@b lV33a4@b*))) (list 'let (list (car lV33a9@x*)) (lV33ab@f (cdr lV33a9@x*))))))) lV3397@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3395@t)))))) (set! lV4771@lV2c8c@let*-macro lV2c8c@let*-macro)) (begin (set! lV2c8e@or-macro (lambda (lV33ad@stx) (let ((lV33af@t lV33ad@stx)) (let ((lV33b1@ls/false (lV2cae@syntax-dispatch lV33af@t '(_)))) (if lV33b1@ls/false (apply (lambda () '#f) lV33b1@ls/false) (let ((lV33b3@t lV33af@t)) (let ((lV33b5@ls/false (lV2cae@syntax-dispatch lV33b3@t '(_ any . each-any)))) (if lV33b5@ls/false (apply (lambda (lV33b7@e lV33b8@e*) (lV2c64@bless (let lV33bf@f ((lV33bb@e lV33b7@e) (lV33bc@e* lV33b8@e*)) (if (null? lV33bc@e*) (list 'begin '#f lV33bb@e) (list 'let (list (list 't lV33bb@e)) (list 'if 't 't (lV33bf@f (car lV33bc@e*) (cdr lV33bc@e*)))))))) lV33b5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV33b3@t))))))))) (set! lV4772@lV2c8e@or-macro lV2c8e@or-macro)) (begin (set! lV2c90@and-macro (lambda (lV33c1@stx) (let ((lV33c3@t lV33c1@stx)) (let ((lV33c5@ls/false (lV2cae@syntax-dispatch lV33c3@t '(_)))) (if lV33c5@ls/false (apply (lambda () '#t) lV33c5@ls/false) (let ((lV33c7@t lV33c3@t)) (let ((lV33c9@ls/false (lV2cae@syntax-dispatch lV33c7@t '(_ any . each-any)))) (if lV33c9@ls/false (apply (lambda (lV33cb@e lV33cc@e*) (lV2c64@bless (let lV33d3@f ((lV33cf@e lV33cb@e) (lV33d0@e* lV33cc@e*)) (if (null? lV33d0@e*) (list 'begin '#f lV33cf@e) (cons 'if (cons lV33cf@e (cons (lV33d3@f (car lV33d0@e*) (cdr lV33d0@e*)) '(#f)))))))) lV33c9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV33c7@t))))))))) (set! lV4773@lV2c90@and-macro lV2c90@and-macro)) (begin (set! lV2c92@cond-macro (lambda (lV33d5@stx) (let ((lV33d7@t lV33d5@stx)) (let ((lV33d9@ls/false (lV2cae@syntax-dispatch lV33d7@t '(_ any . each-any)))) (if lV33d9@ls/false (apply (lambda (lV33db@cls lV33dc@cls*) (lV2c64@bless (let lV33e3@f ((lV33df@cls lV33db@cls) (lV33e0@cls* lV33dc@cls*)) (if (null? lV33e0@cls*) (let ((lV33e5@t lV33df@cls)) (let ((lV33e7@ls/false (lV2cae@syntax-dispatch lV33e5@t '(#(scheme-id else) any . each-any)))) (if lV33e7@ls/false (apply (lambda (lV33e9@e lV33ea@e*) (cons 'begin (cons lV33e9@e lV33ea@e*))) lV33e7@ls/false) (let ((lV33ed@t lV33e5@t)) (let ((lV33ef@ls/false (lV2cae@syntax-dispatch lV33ed@t '(any #(scheme-id =>) any)))) (if lV33ef@ls/false (apply (lambda (lV33f1@e lV33f2@p) (list 'let (list (list 't lV33f1@e)) (list 'if 't (cons lV33f2@p '(t))))) lV33ef@ls/false) (let ((lV33f5@t lV33ed@t)) (let ((lV33f7@ls/false (lV2cae@syntax-dispatch lV33f5@t '(any)))) (if lV33f7@ls/false (apply (lambda (lV33f9@e) (cons 'or (cons lV33f9@e '((if #f #f))))) lV33f7@ls/false) (let ((lV33fb@t lV33f5@t)) (let ((lV33fd@ls/false (lV2cae@syntax-dispatch lV33fb@t '(any . each-any)))) (if lV33fd@ls/false (apply (lambda (lV33ff@e lV3400@e*) (list 'if lV33ff@e (cons 'begin lV3400@e*))) lV33fd@ls/false) (let ((lV3403@t lV33fb@t)) (let ((lV3405@ls/false (lV2cae@syntax-dispatch lV3403@t '_))) (if lV3405@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid last clause" lV33d5@stx)) lV3405@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3403@t)))))))))))))))) (let ((lV3407@t lV33df@cls)) (let ((lV3409@ls/false (lV2cae@syntax-dispatch lV3407@t '(#(scheme-id else) any . each-any)))) (if lV3409@ls/false (apply (lambda (lV340b@e lV340c@e*) (lV2d8e@syntax-violation '#f '"incorrect position of keyword else" lV33d5@stx)) lV3409@ls/false) (let ((lV340f@t lV3407@t)) (let ((lV3411@ls/false (lV2cae@syntax-dispatch lV340f@t '(any #(scheme-id =>) any)))) (if lV3411@ls/false (apply (lambda (lV3413@e lV3414@p) (list 'let (list (list 't lV3413@e)) (list 'if 't (cons lV3414@p '(t)) (lV33e3@f (car lV33e0@cls*) (cdr lV33e0@cls*))))) lV3411@ls/false) (let ((lV3417@t lV340f@t)) (let ((lV3419@ls/false (lV2cae@syntax-dispatch lV3417@t '(any)))) (if lV3419@ls/false (apply (lambda (lV341b@e) (list 'or lV341b@e (lV33e3@f (car lV33e0@cls*) (cdr lV33e0@cls*)))) lV3419@ls/false) (let ((lV341d@t lV3417@t)) (let ((lV341f@ls/false (lV2cae@syntax-dispatch lV341d@t '(any . each-any)))) (if lV341f@ls/false (apply (lambda (lV3421@e lV3422@e*) (list 'if lV3421@e (cons 'begin lV3422@e*) (lV33e3@f (car lV33e0@cls*) (cdr lV33e0@cls*)))) lV341f@ls/false) (let ((lV3425@t lV341d@t)) (let ((lV3427@ls/false (lV2cae@syntax-dispatch lV3425@t '_))) (if lV3427@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid last clause" lV33d5@stx)) lV3427@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3425@t)))))))))))))))))))) lV33d9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV33d7@t)))))) (set! lV4774@lV2c92@cond-macro lV2c92@cond-macro)) (begin (set! lV2c94@do-include (lambda (lV3429@stx lV342a@id lV342b@filename) (let ((lV342f@filename (lV2abb@stx->datum lV342b@filename))) (begin (if (not (and (string? lV342f@filename) (lV2aa7@id? lV342a@id))) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3429@stx) (void)) (cons (lV2c64@bless 'begin) (with-input-from-file lV342f@filename (lambda () (let lV3433@f ((lV3431@ls '())) (let ((lV3435@x (lV25e4@lV24b6@read-annotated))) (if (eof-object? lV3435@x) (reverse lV3431@ls) (lV3433@f (cons (lV2a87@datum->stx lV342a@id lV3435@x) lV3431@ls)))))))))))) (set! lV4775@lV2c94@do-include lV2c94@do-include)) (begin (set! lV2c96@include-macro (lambda (lV3437@e) (let ((lV3439@t lV3437@e)) (let ((lV343b@ls/false (lV2cae@syntax-dispatch lV3439@t '(any any)))) (if lV343b@ls/false (apply (lambda (lV343d@id lV343e@filename) (lV2c94@do-include lV3437@e lV343d@id lV343e@filename)) lV343b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3439@t)))))) (set! lV4776@lV2c96@include-macro lV2c96@include-macro)) (begin (set! lV2c98@include-into-macro (lambda (lV3441@e) (let ((lV3443@t lV3441@e)) (let ((lV3445@ls/false (lV2cae@syntax-dispatch lV3443@t '(_ any any)))) (if lV3445@ls/false (apply (lambda (lV3447@id lV3448@filename) (lV2c94@do-include lV3441@e lV3447@id lV3448@filename)) lV3445@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3443@t)))))) (set! lV4777@lV2c98@include-into-macro lV2c98@include-into-macro)) (begin (set! lV2c9a@syntax-rules-macro (lambda (lV344b@e) (let ((lV344d@t lV344b@e)) (let ((lV344f@ls/false (lV2cae@syntax-dispatch lV344d@t '(_ each-any . #(each (any any)))))) (if lV344f@ls/false (apply (lambda (lV3451@lits lV3452@pat* lV3453@tmp*) (begin (lV2cb4@verify-literals lV3451@lits lV344b@e) (lV2c64@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons lV3451@lits (map (lambda (lV3457@pat lV3458@tmp) (let ((lV345b@t lV3457@pat)) (let ((lV345d@ls/false (lV2cae@syntax-dispatch lV345b@t '(_ . any)))) (if lV345d@ls/false (apply (lambda (lV345f@rest) (list (cons 'g lV345f@rest) (list 'syntax lV3458@tmp))) lV345d@ls/false) (let ((lV3461@t lV345b@t)) (let ((lV3463@ls/false (lV2cae@syntax-dispatch lV3461@t '_))) (if lV3463@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid syntax-rules pattern" lV344b@e lV3457@pat)) lV3463@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3461@t)))))))) lV3452@pat* lV3453@tmp*)))))))) lV344f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV344d@t)))))) (set! lV4778@lV2c9a@syntax-rules-macro lV2c9a@syntax-rules-macro)) (begin (set! lV2c9c@quasiquote-macro (let ((lV3466@datum '#f) (lV3482@quasicons* '#f) (lV3484@quasicons '#f) (lV3486@quasiappend '#f) (lV3488@quasivector '#f) (lV348a@vquasi '#f) (lV348c@quasi '#f)) (begin (set! lV3466@datum (lambda (lV3567@x) (list (lV2c36@scheme-stx 'quote) (lV2a8f@mkstx lV3567@x '() '() '())))) (set! lV3482@quasicons* (lambda (lV355f@x lV3560@y) (let lV3565@f ((lV3563@x lV355f@x)) (if (null? lV3563@x) lV3560@y (lV3484@quasicons (car lV3563@x) (lV3565@f (cdr lV3563@x))))))) (set! lV3484@quasicons (lambda (lV3539@x lV353a@y) (let ((lV353d@t lV353a@y)) (let ((lV353f@ls/false (lV2cae@syntax-dispatch lV353d@t '(#(scheme-id quote) any)))) (if lV353f@ls/false (apply (lambda (lV3541@dy) (let ((lV3543@t lV3539@x)) (let ((lV3545@ls/false (lV2cae@syntax-dispatch lV3543@t '(#(scheme-id quote) any)))) (if lV3545@ls/false (apply (lambda (lV3547@dx) (list (lV2c36@scheme-stx 'quote) (cons lV3547@dx lV3541@dy))) lV3545@ls/false) (let ((lV3549@t lV3543@t)) (let ((lV354b@ls/false (lV2cae@syntax-dispatch lV3549@t '_))) (if lV354b@ls/false (apply (lambda () (let ((lV354d@t lV3541@dy)) (let ((lV354f@ls/false (lV2cae@syntax-dispatch lV354d@t '()))) (if lV354f@ls/false (apply (lambda () (list (lV2c36@scheme-stx 'list) lV3539@x)) lV354f@ls/false) (let ((lV3551@t lV354d@t)) (let ((lV3553@ls/false (lV2cae@syntax-dispatch lV3551@t '_))) (if lV3553@ls/false (apply (lambda () (list (lV2c36@scheme-stx 'cons) lV3539@x lV353a@y)) lV3553@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3551@t)))))))) lV354b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3549@t)))))))) lV353f@ls/false) (let ((lV3555@t lV353d@t)) (let ((lV3557@ls/false (lV2cae@syntax-dispatch lV3555@t '(#(scheme-id list) . each-any)))) (if lV3557@ls/false (apply (lambda (lV3559@stuff) (cons* (lV2c36@scheme-stx 'list) lV3539@x lV3559@stuff)) lV3557@ls/false) (let ((lV355b@t lV3555@t)) (let ((lV355d@ls/false (lV2cae@syntax-dispatch lV355b@t '_))) (if lV355d@ls/false (apply (lambda () (list (lV2c36@scheme-stx 'cons) lV3539@x lV353a@y)) lV355d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV355b@t)))))))))))) (set! lV3486@quasiappend (lambda (lV351f@x lV3520@y) (let ((lV3523@ls (let lV3527@f ((lV3525@x lV351f@x)) (if (null? lV3525@x) (let ((lV3529@t lV3520@y)) (let ((lV352b@ls/false (lV2cae@syntax-dispatch lV3529@t '(#(scheme-id quote) ())))) (if lV352b@ls/false (apply (lambda () '()) lV352b@ls/false) (let ((lV352d@t lV3529@t)) (let ((lV352f@ls/false (lV2cae@syntax-dispatch lV352d@t '_))) (if lV352f@ls/false (apply (lambda () (list lV3520@y)) lV352f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV352d@t))))))) (let ((lV3531@t (car lV3525@x))) (let ((lV3533@ls/false (lV2cae@syntax-dispatch lV3531@t '(#(scheme-id quote) ())))) (if lV3533@ls/false (apply (lambda () (lV3527@f (cdr lV3525@x))) lV3533@ls/false) (let ((lV3535@t lV3531@t)) (let ((lV3537@ls/false (lV2cae@syntax-dispatch lV3535@t '_))) (if lV3537@ls/false (apply (lambda () (cons (car lV3525@x) (lV3527@f (cdr lV3525@x)))) lV3537@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3535@t))))))))))) (if (null? lV3523@ls) (list (lV2c36@scheme-stx 'quote) '()) (if (null? (cdr lV3523@ls)) (car lV3523@ls) (cons* (lV2c36@scheme-stx 'append) lV3523@ls)))))) (set! lV3488@quasivector (lambda (lV34ed@x) (let ((lV34ef@pat-x lV34ed@x)) (let ((lV34f1@t lV34ef@pat-x)) (let ((lV34f3@ls/false (lV2cae@syntax-dispatch lV34f1@t '(#(scheme-id quote) each-any)))) (if lV34f3@ls/false (apply (lambda (lV34f5@x*) (list (lV2c36@scheme-stx 'quote) (list->vector lV34f5@x*))) lV34f3@ls/false) (let ((lV34f7@t lV34f1@t)) (let ((lV34f9@ls/false (lV2cae@syntax-dispatch lV34f7@t '_))) (if lV34f9@ls/false (apply (lambda () (let lV3501@f ((lV34fb@x lV34ed@x) (lV34fc@k (lambda (lV34ff@ls) (cons* (lV2c36@scheme-stx 'vector) lV34ff@ls)))) (let ((lV3503@t lV34fb@x)) (let ((lV3505@ls/false (lV2cae@syntax-dispatch lV3503@t '(#(scheme-id quote) each-any)))) (if lV3505@ls/false (apply (lambda (lV3507@x*) (lV34fc@k (map (lambda (lV3509@x) (list (lV2c36@scheme-stx 'quote) lV3509@x)) lV3507@x*))) lV3505@ls/false) (let ((lV350b@t lV3503@t)) (let ((lV350d@ls/false (lV2cae@syntax-dispatch lV350b@t '(#(scheme-id list) . each-any)))) (if lV350d@ls/false (apply (lambda (lV350f@x*) (lV34fc@k lV350f@x*)) lV350d@ls/false) (let ((lV3511@t lV350b@t)) (let ((lV3513@ls/false (lV2cae@syntax-dispatch lV3511@t '(#(scheme-id cons) any any)))) (if lV3513@ls/false (apply (lambda (lV3515@x lV3516@y) (lV3501@f lV3516@y (lambda (lV3519@ls) (lV34fc@k (cons lV3515@x lV3519@ls))))) lV3513@ls/false) (let ((lV351b@t lV3511@t)) (let ((lV351d@ls/false (lV2cae@syntax-dispatch lV351b@t '_))) (if lV351d@ls/false (apply (lambda () (list (lV2c36@scheme-stx 'list->vector) lV34ef@pat-x)) lV351d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV351b@t))))))))))))))) lV34f9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV34f7@t)))))))))) (set! lV348a@vquasi (lambda (lV34cb@p lV34cc@lev) (let ((lV34cf@t lV34cb@p)) (let ((lV34d1@ls/false (lV2cae@syntax-dispatch lV34cf@t '(any . any)))) (if lV34d1@ls/false (apply (lambda (lV34d3@p lV34d4@q) (let ((lV34d7@t lV34d3@p)) (let ((lV34d9@ls/false (lV2cae@syntax-dispatch lV34d7@t '(#(scheme-id unquote) . each-any)))) (if lV34d9@ls/false (apply (lambda (lV34db@p) (if (= lV34cc@lev '0) (lV3482@quasicons* lV34db@p (lV348a@vquasi lV34d4@q lV34cc@lev)) (lV3484@quasicons (lV3484@quasicons (lV3466@datum 'unquote) (lV348c@quasi lV34db@p (- lV34cc@lev '1))) (lV348a@vquasi lV34d4@q lV34cc@lev)))) lV34d9@ls/false) (let ((lV34dd@t lV34d7@t)) (let ((lV34df@ls/false (lV2cae@syntax-dispatch lV34dd@t '(#(scheme-id unquote-splicing) . each-any)))) (if lV34df@ls/false (apply (lambda (lV34e1@p) (if (= lV34cc@lev '0) (lV3486@quasiappend lV34e1@p (lV348a@vquasi lV34d4@q lV34cc@lev)) (lV3484@quasicons (lV3484@quasicons (lV3466@datum 'unquote-splicing) (lV348c@quasi lV34e1@p (- lV34cc@lev '1))) (lV348a@vquasi lV34d4@q lV34cc@lev)))) lV34df@ls/false) (let ((lV34e3@t lV34dd@t)) (let ((lV34e5@ls/false (lV2cae@syntax-dispatch lV34e3@t 'any))) (if lV34e5@ls/false (apply (lambda (lV34e7@p) (lV3484@quasicons (lV348c@quasi lV34e7@p lV34cc@lev) (lV348a@vquasi lV34d4@q lV34cc@lev))) lV34e5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV34e3@t))))))))))) lV34d1@ls/false) (let ((lV34e9@t lV34cf@t)) (let ((lV34eb@ls/false (lV2cae@syntax-dispatch lV34e9@t '()))) (if lV34eb@ls/false (apply (lambda () (list (lV2c36@scheme-stx 'quote) '())) lV34eb@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV34e9@t))))))))) (set! lV348c@quasi (lambda (lV3495@p lV3496@lev) (let ((lV3499@t lV3495@p)) (let ((lV349b@ls/false (lV2cae@syntax-dispatch lV3499@t '(#(scheme-id unquote) any)))) (if lV349b@ls/false (apply (lambda (lV349d@p) (if (= lV3496@lev '0) lV349d@p (lV3484@quasicons (lV3466@datum 'unquote) (lV348c@quasi (list lV349d@p) (- lV3496@lev '1))))) lV349b@ls/false) (let ((lV349f@t lV3499@t)) (let ((lV34a1@ls/false (lV2cae@syntax-dispatch lV349f@t '((#(scheme-id unquote) . each-any) . any)))) (if lV34a1@ls/false (apply (lambda (lV34a3@p lV34a4@q) (if (= lV3496@lev '0) (lV3482@quasicons* lV34a3@p (lV348c@quasi lV34a4@q lV3496@lev)) (lV3484@quasicons (lV3484@quasicons (lV3466@datum 'unquote) (lV348c@quasi lV34a3@p (- lV3496@lev '1))) (lV348c@quasi lV34a4@q lV3496@lev)))) lV34a1@ls/false) (let ((lV34a7@t lV349f@t)) (let ((lV34a9@ls/false (lV2cae@syntax-dispatch lV34a7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if lV34a9@ls/false (apply (lambda (lV34ab@p lV34ac@q) (if (= lV3496@lev '0) (lV3486@quasiappend lV34ab@p (lV348c@quasi lV34ac@q lV3496@lev)) (lV3484@quasicons (lV3484@quasicons (lV3466@datum 'unquote-splicing) (lV348c@quasi lV34ab@p (- lV3496@lev '1))) (lV348c@quasi lV34ac@q lV3496@lev)))) lV34a9@ls/false) (let ((lV34af@t lV34a7@t)) (let ((lV34b1@ls/false (lV2cae@syntax-dispatch lV34af@t '(#(scheme-id quasiquote) any)))) (if lV34b1@ls/false (apply (lambda (lV34b3@p) (lV3484@quasicons (lV3466@datum 'quasiquote) (lV348c@quasi (list lV34b3@p) (+ lV3496@lev '1)))) lV34b1@ls/false) (let ((lV34b5@t lV34af@t)) (let ((lV34b7@ls/false (lV2cae@syntax-dispatch lV34b5@t '(any . any)))) (if lV34b7@ls/false (apply (lambda (lV34b9@p lV34ba@q) (lV3484@quasicons (lV348c@quasi lV34b9@p lV3496@lev) (lV348c@quasi lV34ba@q lV3496@lev))) lV34b7@ls/false) (let ((lV34bd@t lV34b5@t)) (let ((lV34bf@ls/false (lV2cae@syntax-dispatch lV34bd@t '#(vector each-any)))) (if (and lV34bf@ls/false (apply (lambda (lV34c1@x) (not (lV2a73@stx? lV34c1@x))) lV34bf@ls/false)) (apply (lambda (lV34c3@x) (lV3488@quasivector (lV348a@vquasi lV34c3@x lV3496@lev))) lV34bf@ls/false) (let ((lV34c5@t lV34bd@t)) (let ((lV34c7@ls/false (lV2cae@syntax-dispatch lV34c5@t 'any))) (if lV34c7@ls/false (apply (lambda (lV34c9@p) (list (lV2c36@scheme-stx 'quote) lV34c9@p)) lV34c7@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV34c5@t)))))))))))))))))))))))) (lambda (lV348d@x) (let ((lV348f@t lV348d@x)) (let ((lV3491@ls/false (lV2cae@syntax-dispatch lV348f@t '(_ any)))) (if lV3491@ls/false (apply (lambda (lV3493@e) (lV348c@quasi lV3493@e '0)) lV3491@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV348f@t)))))))) (set! lV4779@lV2c9c@quasiquote-macro lV2c9c@quasiquote-macro)) (begin (set! lV2c9e@quasisyntax-macro (let ((lV356a@quasi '#f)) (begin (set! lV356a@quasi (lambda (lV3585@p lV3586@lev) (let ((lV3589@t lV3585@p)) (let ((lV358b@ls/false (lV2cae@syntax-dispatch lV3589@t '(#(scheme-id unsyntax) any)))) (if lV358b@ls/false (apply (lambda (lV358d@p) (if (= lV3586@lev '0) (let ((lV358f@g (gensym))) (values (list lV358f@g) (list lV358d@p) lV358f@g)) (call-with-values (lambda () (lV356a@quasi lV358d@p (- lV3586@lev '1))) (lambda (lV3597@lV3592 lV3598@lV3594 lV3599@lV3596) (let ((lV359d@p lV3599@lV3596) (lV359e@rhs* lV3598@lV3594) (lV359f@lhs* lV3597@lV3592)) (values lV359f@lhs* lV359e@rhs* (list 'unsyntax lV359d@p))))))) lV358b@ls/false) (let ((lV35a3@t lV3589@t)) (let ((lV35a5@ls/false (lV2cae@syntax-dispatch lV35a3@t '#(scheme-id unsyntax)))) (if (and lV35a5@ls/false (apply (lambda () (= lV3586@lev '0)) lV35a5@ls/false)) (apply (lambda () (lV2d8e@syntax-violation '#f '"incorrect use of unsyntax" lV3585@p)) lV35a5@ls/false) (let ((lV35a7@t lV35a3@t)) (let ((lV35a9@ls/false (lV2cae@syntax-dispatch lV35a7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if lV35a9@ls/false (apply (lambda (lV35ab@p* lV35ac@q) (call-with-values (lambda () (lV356a@quasi lV35ac@q lV3586@lev)) (lambda (lV35b5@lV35b0 lV35b6@lV35b2 lV35b7@lV35b4) (let ((lV35bb@q lV35b7@lV35b4) (lV35bc@rhs* lV35b6@lV35b2) (lV35bd@lhs* lV35b5@lV35b0)) (if (= lV3586@lev '0) (let ((lV35c1@g* (map (lambda (lV35c3@x) (gensym)) lV35ab@p*))) (values (append lV35c1@g* lV35bd@lhs*) (append lV35ab@p* lV35bc@rhs*) (append lV35c1@g* lV35bb@q))) (call-with-values (lambda () (lV356a@quasi lV35ab@p* (- lV3586@lev '1))) (lambda (lV35cb@lV35c6 lV35cc@lV35c8 lV35cd@lV35ca) (let ((lV35d1@p* lV35cd@lV35ca) (lV35d2@rhs2* lV35cc@lV35c8) (lV35d3@lhs2* lV35cb@lV35c6)) (values (append lV35d3@lhs2* lV35bd@lhs*) (append lV35d2@rhs2* lV35bc@rhs*) (cons (cons 'unsyntax lV35d1@p*) lV35bb@q)))))))))) lV35a9@ls/false) (let ((lV35d7@t lV35a7@t)) (let ((lV35d9@ls/false (lV2cae@syntax-dispatch lV35d7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if lV35d9@ls/false (apply (lambda (lV35db@p* lV35dc@q) (call-with-values (lambda () (lV356a@quasi lV35dc@q lV3586@lev)) (lambda (lV35e5@lV35e0 lV35e6@lV35e2 lV35e7@lV35e4) (let ((lV35eb@q lV35e7@lV35e4) (lV35ec@rhs* lV35e6@lV35e2) (lV35ed@lhs* lV35e5@lV35e0)) (if (= lV3586@lev '0) (let ((lV35f1@g* (map (lambda (lV35f3@x) (gensym)) lV35db@p*))) (values (append (map (lambda (lV35f5@g) (cons lV35f5@g '(...))) lV35f1@g*) lV35ed@lhs*) (append lV35db@p* lV35ec@rhs*) (append (apply append (map (lambda (lV35f7@g) (cons lV35f7@g '(...))) lV35f1@g*)) lV35eb@q))) (call-with-values (lambda () (lV356a@quasi lV35db@p* (- lV3586@lev '1))) (lambda (lV35ff@lV35fa lV3600@lV35fc lV3601@lV35fe) (let ((lV3605@p* lV3601@lV35fe) (lV3606@rhs2* lV3600@lV35fc) (lV3607@lhs2* lV35ff@lV35fa)) (values (append lV3607@lhs2* lV35ed@lhs*) (append lV3606@rhs2* lV35ec@rhs*) (cons (cons 'unsyntax-splicing lV3605@p*) lV35eb@q)))))))))) lV35d9@ls/false) (let ((lV360b@t lV35d7@t)) (let ((lV360d@ls/false (lV2cae@syntax-dispatch lV360b@t '#(scheme-id unsyntax-splicing)))) (if (and lV360d@ls/false (apply (lambda () (= lV3586@lev '0)) lV360d@ls/false)) (apply (lambda () (lV2d8e@syntax-violation '#f '"incorrect use of unsyntax-splicing" lV3585@p)) lV360d@ls/false) (let ((lV360f@t lV360b@t)) (let ((lV3611@ls/false (lV2cae@syntax-dispatch lV360f@t '(#(scheme-id quasisyntax) any)))) (if lV3611@ls/false (apply (lambda (lV3613@p) (call-with-values (lambda () (lV356a@quasi lV3613@p (+ lV3586@lev '1))) (lambda (lV361b@lV3616 lV361c@lV3618 lV361d@lV361a) (let ((lV3621@p lV361d@lV361a) (lV3622@rhs* lV361c@lV3618) (lV3623@lhs* lV361b@lV3616)) (values lV3623@lhs* lV3622@rhs* (list 'quasisyntax lV3621@p)))))) lV3611@ls/false) (let ((lV3627@t lV360f@t)) (let ((lV3629@ls/false (lV2cae@syntax-dispatch lV3627@t '(any . any)))) (if lV3629@ls/false (apply (lambda (lV362b@p lV362c@q) (call-with-values (lambda () (lV356a@quasi lV362b@p lV3586@lev)) (lambda (lV363b@lV3630 lV363c@lV3632 lV363d@lV3634) (call-with-values (lambda () (lV356a@quasi lV362c@q lV3586@lev)) (lambda (lV3641@lV3636 lV3642@lV3638 lV3643@lV363a) (let ((lV3647@q lV3643@lV363a) (lV3648@rhs2* lV3642@lV3638) (lV3649@lhs2* lV3641@lV3636) (lV364a@p lV363d@lV3634) (lV364b@rhs* lV363c@lV3632) (lV364c@lhs* lV363b@lV3630)) (values (append lV3649@lhs2* lV364c@lhs*) (append lV3648@rhs2* lV364b@rhs*) (cons lV364a@p lV3647@q)))))))) lV3629@ls/false) (let ((lV3653@t lV3627@t)) (let ((lV3655@ls/false (lV2cae@syntax-dispatch lV3653@t '#(vector each-any)))) (if lV3655@ls/false (apply (lambda (lV3657@x*) (call-with-values (lambda () (lV356a@quasi lV3657@x* lV3586@lev)) (lambda (lV365f@lV365a lV3660@lV365c lV3661@lV365e) (let ((lV3665@x* lV3661@lV365e) (lV3666@rhs* lV3660@lV365c) (lV3667@lhs* lV365f@lV365a)) (values lV3667@lhs* lV3666@rhs* (list->vector lV3665@x*)))))) lV3655@ls/false) (let ((lV366b@t lV3653@t)) (let ((lV366d@ls/false (lV2cae@syntax-dispatch lV366b@t '_))) (if lV366d@ls/false (apply (lambda () (values '() '() lV3585@p)) lV366d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV366b@t)))))))))))))))))))))))))))))) (lambda (lV356b@x) (let ((lV356d@t lV356b@x)) (let ((lV356f@ls/false (lV2cae@syntax-dispatch lV356d@t '(_ any)))) (if lV356f@ls/false (apply (lambda (lV3571@e) (call-with-values (lambda () (lV356a@quasi lV3571@e '0)) (lambda (lV3579@lV3574 lV357a@lV3576 lV357b@lV3578) (let ((lV357f@v lV357b@lV3578) (lV3580@rhs* lV357a@lV3576) (lV3581@lhs* lV3579@lV3574)) (lV2c64@bless (list 'syntax-case (cons 'list lV3580@rhs*) '() (list lV3581@lhs* (list 'syntax lV357f@v)))))))) lV356f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV356d@t)))))))) (set! lV477a@lV2c9e@quasisyntax-macro lV2c9e@quasisyntax-macro)) (begin (set! lV2ca0@define-struct-macro (lambda (lV366f@stx) (lV2d8e@syntax-violation '#f '"define-struct not supported" lV366f@stx))) (set! lV477b@lV2ca0@define-struct-macro lV2ca0@define-struct-macro)) (begin (set! lV2ca2@define-record-type-macro (lambda (lV3671@x) (let ((lV3674@id '#f) (lV3676@get-record-name '#f) (lV3678@get-record-constructor-name '#f) (lV367a@get-record-predicate-name '#f) (lV367c@get-clause '#f) (lV367e@foo-rtd-code '#f) (lV3680@parent-rtd-code '#f) (lV3682@parent-rcd-code '#f) (lV3684@foo-rcd-code '#f) (lV3686@get-protocol-code '#f) (lV3688@get-fields '#f) (lV368a@get-mutator-indices '#f) (lV368c@get-mutators '#f) (lV368e@get-accessors '#f) (lV3690@enumerate '#f) (lV3692@do-define-record '#f) (lV3694@verify-clauses '#f)) (begin (set! lV3674@id (lambda (lV3867@ctxt . lV3869@str*) (lV2d92@datum->syntax lV3867@ctxt (string->symbol (apply string-append (map (lambda (lV386b@x) (if (symbol? lV386b@x) (symbol->string lV386b@x) (if (string? lV386b@x) lV386b@x (assertion-violation 'define-record-type '"BUG")))) lV3869@str*)))))) (set! lV3676@get-record-name (lambda (lV3855@spec) (let ((lV3857@t lV3855@spec)) (let ((lV3859@ls/false (lV2cae@syntax-dispatch lV3857@t '(any any any)))) (if lV3859@ls/false (apply (lambda (lV385b@foo lV385c@make-foo lV385d@foo?) lV385b@foo) lV3859@ls/false) (let ((lV3861@t lV3857@t)) (let ((lV3863@ls/false (lV2cae@syntax-dispatch lV3861@t 'any))) (if lV3863@ls/false (apply (lambda (lV3865@foo) lV3865@foo) lV3863@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3861@t))))))))) (set! lV3678@get-record-constructor-name (lambda (lV3841@spec) (let ((lV3843@t lV3841@spec)) (let ((lV3845@ls/false (lV2cae@syntax-dispatch lV3843@t '(any any any)))) (if lV3845@ls/false (apply (lambda (lV3847@foo lV3848@make-foo lV3849@foo?) lV3848@make-foo) lV3845@ls/false) (let ((lV384d@t lV3843@t)) (let ((lV384f@ls/false (lV2cae@syntax-dispatch lV384d@t 'any))) (if (and lV384f@ls/false (apply (lambda (lV3851@foo) (lV2aa7@id? lV3851@foo)) lV384f@ls/false)) (apply (lambda (lV3853@foo) (lV3674@id lV3853@foo '"make-" (lV2abb@stx->datum lV3853@foo))) lV384f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV384d@t))))))))) (set! lV367a@get-record-predicate-name (lambda (lV382d@spec) (let ((lV382f@t lV382d@spec)) (let ((lV3831@ls/false (lV2cae@syntax-dispatch lV382f@t '(any any any)))) (if lV3831@ls/false (apply (lambda (lV3833@foo lV3834@make-foo lV3835@foo?) lV3835@foo?) lV3831@ls/false) (let ((lV3839@t lV382f@t)) (let ((lV383b@ls/false (lV2cae@syntax-dispatch lV3839@t 'any))) (if (and lV383b@ls/false (apply (lambda (lV383d@foo) (lV2aa7@id? lV383d@foo)) lV383b@ls/false)) (apply (lambda (lV383f@foo) (lV3674@id lV383f@foo (lV2abb@stx->datum lV383f@foo) '"?")) lV383b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3839@t))))))))) (set! lV367c@get-clause (lambda (lV381b@id lV381c@ls) (let ((lV381f@t lV381c@ls)) (let ((lV3821@ls/false (lV2cae@syntax-dispatch lV381f@t '()))) (if lV3821@ls/false (apply (lambda () '#f) lV3821@ls/false) (let ((lV3823@t lV381f@t)) (let ((lV3825@ls/false (lV2cae@syntax-dispatch lV3823@t '((any . any) . any)))) (if lV3825@ls/false (apply (lambda (lV3827@x lV3828@rest lV3829@ls) (if (lV2aad@free-id=? (lV2c64@bless lV381b@id) lV3827@x) (cons lV3827@x lV3828@rest) (lV367c@get-clause lV381b@id lV3829@ls))) lV3825@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3823@t))))))))) (set! lV367e@foo-rtd-code (lambda (lV37c9@name lV37ca@clause* lV37cb@parent-rtd-code) (let ((lV37d0@convert-field-spec* '#f)) (begin (set! lV37d0@convert-field-spec* (lambda (lV3801@ls) (list->vector (map (lambda (lV3803@x) (let ((lV3805@t lV3803@x)) (let ((lV3807@ls/false (lV2cae@syntax-dispatch lV3805@t '(#(scheme-id mutable) any . any)))) (if lV3807@ls/false (apply (lambda (lV3809@name lV380a@rest) (list 'mutable lV3809@name)) lV3807@ls/false) (let ((lV380d@t lV3805@t)) (let ((lV380f@ls/false (lV2cae@syntax-dispatch lV380d@t '(#(scheme-id immutable) any . any)))) (if lV380f@ls/false (apply (lambda (lV3811@name lV3812@rest) (list 'immutable lV3811@name)) lV380f@ls/false) (let ((lV3815@t lV380d@t)) (let ((lV3817@ls/false (lV2cae@syntax-dispatch lV3815@t 'any))) (if lV3817@ls/false (apply (lambda (lV3819@name) (list 'immutable lV3819@name)) lV3817@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3815@t))))))))))) lV3801@ls)))) (let ((lV37d1@uid-code (let ((lV37d9@t (lV367c@get-clause 'nongenerative lV37ca@clause*))) (let ((lV37db@ls/false (lV2cae@syntax-dispatch lV37d9@t '(_)))) (if lV37db@ls/false (apply (lambda () (list 'quote (gensym))) lV37db@ls/false) (let ((lV37dd@t lV37d9@t)) (let ((lV37df@ls/false (lV2cae@syntax-dispatch lV37dd@t '(_ any)))) (if lV37df@ls/false (apply (lambda (lV37e1@uid) (list 'quote lV37e1@uid)) lV37df@ls/false) (let ((lV37e3@t lV37dd@t)) (let ((lV37e5@ls/false (lV2cae@syntax-dispatch lV37e3@t '_))) (if lV37e5@ls/false (apply (lambda () '#f) lV37e5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37e3@t))))))))))) (lV37d2@sealed? (let ((lV37e7@t (lV367c@get-clause 'sealed lV37ca@clause*))) (let ((lV37e9@ls/false (lV2cae@syntax-dispatch lV37e7@t '(_ #(atom #t))))) (if lV37e9@ls/false (apply (lambda () '#t) lV37e9@ls/false) (let ((lV37eb@t lV37e7@t)) (let ((lV37ed@ls/false (lV2cae@syntax-dispatch lV37eb@t '_))) (if lV37ed@ls/false (apply (lambda () '#f) lV37ed@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37eb@t)))))))) (lV37d3@opaque? (let ((lV37ef@t (lV367c@get-clause 'opaque lV37ca@clause*))) (let ((lV37f1@ls/false (lV2cae@syntax-dispatch lV37ef@t '(_ #(atom #t))))) (if lV37f1@ls/false (apply (lambda () '#t) lV37f1@ls/false) (let ((lV37f3@t lV37ef@t)) (let ((lV37f5@ls/false (lV2cae@syntax-dispatch lV37f3@t '_))) (if lV37f5@ls/false (apply (lambda () '#f) lV37f5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37f3@t)))))))) (lV37d4@fields (let ((lV37f7@t (lV367c@get-clause 'fields lV37ca@clause*))) (let ((lV37f9@ls/false (lV2cae@syntax-dispatch lV37f7@t '(_ . each-any)))) (if lV37f9@ls/false (apply (lambda (lV37fb@field-spec*) (list 'quote (lV37d0@convert-field-spec* lV37fb@field-spec*))) lV37f9@ls/false) (let ((lV37fd@t lV37f7@t)) (let ((lV37ff@ls/false (lV2cae@syntax-dispatch lV37fd@t '_))) (if lV37ff@ls/false (apply (lambda () ''#()) lV37ff@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37fd@t))))))))) (lV2c64@bless (list 'make-record-type-descriptor (list 'quote lV37c9@name) lV37cb@parent-rtd-code lV37d1@uid-code lV37d2@sealed? lV37d3@opaque? lV37d4@fields))))))) (set! lV3680@parent-rtd-code (lambda (lV37b1@clause*) (let ((lV37b3@t (lV367c@get-clause 'parent lV37b1@clause*))) (let ((lV37b5@ls/false (lV2cae@syntax-dispatch lV37b3@t '(_ any)))) (if lV37b5@ls/false (apply (lambda (lV37b7@name) (list 'record-type-descriptor lV37b7@name)) lV37b5@ls/false) (let ((lV37b9@t lV37b3@t)) (let ((lV37bb@ls/false (lV2cae@syntax-dispatch lV37b9@t '#(atom #f)))) (if lV37bb@ls/false (apply (lambda () (let ((lV37bd@t (lV367c@get-clause 'parent-rtd lV37b1@clause*))) (let ((lV37bf@ls/false (lV2cae@syntax-dispatch lV37bd@t '(_ any any)))) (if lV37bf@ls/false (apply (lambda (lV37c1@rtd lV37c2@rcd) lV37c1@rtd) lV37bf@ls/false) (let ((lV37c5@t lV37bd@t)) (let ((lV37c7@ls/false (lV2cae@syntax-dispatch lV37c5@t '#(atom #f)))) (if lV37c7@ls/false (apply (lambda () '#f) lV37c7@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37c5@t)))))))) lV37bb@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37b9@t))))))))) (set! lV3682@parent-rcd-code (lambda (lV3799@clause*) (let ((lV379b@t (lV367c@get-clause 'parent lV3799@clause*))) (let ((lV379d@ls/false (lV2cae@syntax-dispatch lV379b@t '(_ any)))) (if lV379d@ls/false (apply (lambda (lV379f@name) (list 'record-constructor-descriptor lV379f@name)) lV379d@ls/false) (let ((lV37a1@t lV379b@t)) (let ((lV37a3@ls/false (lV2cae@syntax-dispatch lV37a1@t '#(atom #f)))) (if lV37a3@ls/false (apply (lambda () (let ((lV37a5@t (lV367c@get-clause 'parent-rtd lV3799@clause*))) (let ((lV37a7@ls/false (lV2cae@syntax-dispatch lV37a5@t '(_ any any)))) (if lV37a7@ls/false (apply (lambda (lV37a9@rtd lV37aa@rcd) lV37aa@rcd) lV37a7@ls/false) (let ((lV37ad@t lV37a5@t)) (let ((lV37af@ls/false (lV2cae@syntax-dispatch lV37ad@t '#(atom #f)))) (if lV37af@ls/false (apply (lambda () '#f) lV37af@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37ad@t)))))))) lV37a3@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV37a1@t))))))))) (set! lV3684@foo-rcd-code (lambda (lV3791@clause* lV3792@foo-rtd lV3793@protocol lV3794@parent-rcd-code) (list 'make-record-constructor-descriptor lV3792@foo-rtd lV3794@parent-rcd-code lV3793@protocol))) (set! lV3686@get-protocol-code (lambda (lV3785@clause*) (let ((lV3787@t (lV367c@get-clause 'protocol lV3785@clause*))) (let ((lV3789@ls/false (lV2cae@syntax-dispatch lV3787@t '(_ any)))) (if lV3789@ls/false (apply (lambda (lV378b@expr) lV378b@expr) lV3789@ls/false) (let ((lV378d@t lV3787@t)) (let ((lV378f@ls/false (lV2cae@syntax-dispatch lV378d@t '_))) (if lV378f@ls/false (apply (lambda () '#f) lV378f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV378d@t))))))))) (set! lV3688@get-fields (lambda (lV3773@clause*) (let ((lV3775@t lV3773@clause*)) (let ((lV3777@ls/false (lV2cae@syntax-dispatch lV3775@t '()))) (if lV3777@ls/false (apply (lambda () '()) lV3777@ls/false) (let ((lV3779@t lV3775@t)) (let ((lV377b@ls/false (lV2cae@syntax-dispatch lV3779@t '((#(scheme-id fields) . each-any) . _)))) (if lV377b@ls/false (apply (lambda (lV377d@f*) lV377d@f*) lV377b@ls/false) (let ((lV377f@t lV3779@t)) (let ((lV3781@ls/false (lV2cae@syntax-dispatch lV377f@t '(_ . any)))) (if lV3781@ls/false (apply (lambda (lV3783@rest) (lV3688@get-fields lV3783@rest)) lV3781@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV377f@t)))))))))))) (set! lV368a@get-mutator-indices (lambda (lV375b@fields) (let lV3761@f ((lV375d@fields lV375b@fields) (lV375e@i '0)) (let ((lV3763@t lV375d@fields)) (let ((lV3765@ls/false (lV2cae@syntax-dispatch lV3763@t '()))) (if lV3765@ls/false (apply (lambda () '()) lV3765@ls/false) (let ((lV3767@t lV3763@t)) (let ((lV3769@ls/false (lV2cae@syntax-dispatch lV3767@t '((#(scheme-id mutable) . _) . any)))) (if lV3769@ls/false (apply (lambda (lV376b@rest) (cons lV375e@i (lV3761@f lV376b@rest (+ lV375e@i '1)))) lV3769@ls/false) (let ((lV376d@t lV3767@t)) (let ((lV376f@ls/false (lV2cae@syntax-dispatch lV376d@t '(_ . any)))) (if lV376f@ls/false (apply (lambda (lV3771@rest) (lV3761@f lV3771@rest (+ lV375e@i '1))) lV376f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV376d@t))))))))))))) (set! lV368c@get-mutators (lambda (lV3731@foo lV3732@fields) (let ((lV3736@gen-name '#f)) (begin (set! lV3736@gen-name (lambda (lV3759@x) (lV2d92@datum->syntax lV3731@foo (string->symbol (string-append (symbol->string (lV2d94@syntax->datum lV3731@foo)) '"-" (symbol->string (lV2d94@syntax->datum lV3759@x)) '"-set!"))))) (let lV3739@f ((lV3737@fields lV3732@fields)) (let ((lV373b@t lV3737@fields)) (let ((lV373d@ls/false (lV2cae@syntax-dispatch lV373b@t '()))) (if lV373d@ls/false (apply (lambda () '()) lV373d@ls/false) (let ((lV373f@t lV373b@t)) (let ((lV3741@ls/false (lV2cae@syntax-dispatch lV373f@t '((#(scheme-id mutable) any any any) . any)))) (if lV3741@ls/false (apply (lambda (lV3743@name lV3744@accessor lV3745@mutator lV3746@rest) (cons lV3745@mutator (lV3739@f lV3746@rest))) lV3741@ls/false) (let ((lV374b@t lV373f@t)) (let ((lV374d@ls/false (lV2cae@syntax-dispatch lV374b@t '((#(scheme-id mutable) any) . any)))) (if lV374d@ls/false (apply (lambda (lV374f@name lV3750@rest) (cons (lV3736@gen-name lV374f@name) (lV3739@f lV3750@rest))) lV374d@ls/false) (let ((lV3753@t lV374b@t)) (let ((lV3755@ls/false (lV2cae@syntax-dispatch lV3753@t '(_ . any)))) (if lV3755@ls/false (apply (lambda (lV3757@rest) (lV3739@f lV3757@rest)) lV3755@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3753@t)))))))))))))))))) (set! lV368e@get-accessors (lambda (lV36ed@foo lV36ee@fields) (let ((lV36f2@gen-name '#f)) (begin (set! lV36f2@gen-name (lambda (lV372f@x) (lV2d92@datum->syntax lV36ed@foo (string->symbol (string-append (symbol->string (lV2d94@syntax->datum lV36ed@foo)) '"-" (symbol->string (lV2d94@syntax->datum lV372f@x))))))) (map (lambda (lV36f3@field) (let ((lV36f5@t lV36f3@field)) (let ((lV36f7@ls/false (lV2cae@syntax-dispatch lV36f5@t '(#(scheme-id mutable) any any any)))) (if (and lV36f7@ls/false (apply (lambda (lV36f9@name lV36fa@accessor lV36fb@mutator) (lV2aa7@id? lV36fa@accessor)) lV36f7@ls/false)) (apply (lambda (lV36ff@name lV3700@accessor lV3701@mutator) lV3700@accessor) lV36f7@ls/false) (let ((lV3705@t lV36f5@t)) (let ((lV3707@ls/false (lV2cae@syntax-dispatch lV3705@t '(#(scheme-id immutable) any any)))) (if (and lV3707@ls/false (apply (lambda (lV3709@name lV370a@accessor) (lV2aa7@id? lV370a@accessor)) lV3707@ls/false)) (apply (lambda (lV370d@name lV370e@accessor) lV370e@accessor) lV3707@ls/false) (let ((lV3711@t lV3705@t)) (let ((lV3713@ls/false (lV2cae@syntax-dispatch lV3711@t '(#(scheme-id mutable) any)))) (if (and lV3713@ls/false (apply (lambda (lV3715@name) (lV2aa7@id? lV3715@name)) lV3713@ls/false)) (apply (lambda (lV3717@name) (lV36f2@gen-name lV3717@name)) lV3713@ls/false) (let ((lV3719@t lV3711@t)) (let ((lV371b@ls/false (lV2cae@syntax-dispatch lV3719@t '(#(scheme-id immutable) any)))) (if (and lV371b@ls/false (apply (lambda (lV371d@name) (lV2aa7@id? lV371d@name)) lV371b@ls/false)) (apply (lambda (lV371f@name) (lV36f2@gen-name lV371f@name)) lV371b@ls/false) (let ((lV3721@t lV3719@t)) (let ((lV3723@ls/false (lV2cae@syntax-dispatch lV3721@t 'any))) (if (and lV3723@ls/false (apply (lambda (lV3725@name) (lV2aa7@id? lV3725@name)) lV3723@ls/false)) (apply (lambda (lV3727@name) (lV36f2@gen-name lV3727@name)) lV3723@ls/false) (let ((lV3729@t lV3721@t)) (let ((lV372b@ls/false (lV2cae@syntax-dispatch lV3729@t 'any))) (if lV372b@ls/false (apply (lambda (lV372d@others) (lV2d8e@syntax-violation '#f '"invalid field spec" lV36f3@field)) lV372b@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3729@t)))))))))))))))))))) lV36ee@fields))))) (set! lV3690@enumerate (lambda (lV36e5@ls) (let lV36eb@f ((lV36e7@ls lV36e5@ls) (lV36e8@i '0)) (if (null? lV36e7@ls) '() (cons lV36e8@i (lV36eb@f (cdr lV36e7@ls) (+ lV36e8@i '1))))))) (set! lV3692@do-define-record (lambda (lV36bd@namespec lV36be@clause*) (let ((lV36c1@foo (lV3676@get-record-name lV36bd@namespec))) (let ((lV36c3@foo-rtd (gensym))) (let ((lV36c5@foo-rcd (gensym))) (let ((lV36c7@protocol (gensym))) (let ((lV36c9@make-foo (lV3678@get-record-constructor-name lV36bd@namespec))) (let ((lV36cb@fields (lV3688@get-fields lV36be@clause*))) (let ((lV36cd@idx* (lV3690@enumerate lV36cb@fields))) (let ((lV36cf@foo-x* (lV368e@get-accessors lV36c1@foo lV36cb@fields))) (let ((lV36d1@set-foo-x!* (lV368c@get-mutators lV36c1@foo lV36cb@fields))) (let ((lV36d3@set-foo-idx* (lV368a@get-mutator-indices lV36cb@fields))) (let ((lV36d5@foo? (lV367a@get-record-predicate-name lV36bd@namespec))) (let ((lV36d7@foo-rtd-code (lV367e@foo-rtd-code lV36c1@foo lV36be@clause* (lV3680@parent-rtd-code lV36be@clause*)))) (let ((lV36d9@foo-rcd-code (lV3684@foo-rcd-code lV36be@clause* lV36c3@foo-rtd lV36c7@protocol (lV3682@parent-rcd-code lV36be@clause*)))) (let ((lV36db@protocol-code (lV3686@get-protocol-code lV36be@clause*))) (lV2c64@bless (cons 'begin (cons (list 'define lV36c3@foo-rtd lV36d7@foo-rtd-code) (cons (list 'define lV36c7@protocol lV36db@protocol-code) (cons (list 'define lV36c5@foo-rcd lV36d9@foo-rcd-code) (cons (list 'define-syntax lV36c1@foo (list 'list ''$rtd (list 'syntax lV36c3@foo-rtd) (list 'syntax lV36c5@foo-rcd))) (cons (list 'define lV36d5@foo? (list 'record-predicate lV36c3@foo-rtd)) (cons (list 'define lV36c9@make-foo (list 'record-constructor lV36c5@foo-rcd)) (append (map (lambda (lV36dd@foo-x lV36de@idx) (list 'define lV36dd@foo-x (list 'record-accessor lV36c3@foo-rtd lV36de@idx))) lV36cf@foo-x* lV36cd@idx*) (map (lambda (lV36e1@set-foo-x! lV36e2@idx) (list 'define lV36e1@set-foo-x! (list 'record-mutator lV36c3@foo-rtd lV36e2@idx))) lV36d1@set-foo-x!* lV36d3@set-foo-idx*)))))))))))))))))))))))))) (set! lV3694@verify-clauses (lambda (lV369d@x lV369e@cls*) (let ((lV36a2@valid-kwds '#f) (lV36a4@free-id-member? '#f)) (begin (set! lV36a2@valid-kwds (map lV2c64@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! lV36a4@free-id-member? (lambda (lV36b9@x lV36ba@ls) (and (pair? lV36ba@ls) (or (lV2aad@free-id=? lV36b9@x (car lV36ba@ls)) (lV36a4@free-id-member? lV36b9@x (cdr lV36ba@ls)))))) (let lV36a9@f ((lV36a5@cls* lV369e@cls*) (lV36a6@seen* '())) (if (not (null? lV36a5@cls*)) (let ((lV36ab@t (car lV36a5@cls*))) (let ((lV36ad@ls/false (lV2cae@syntax-dispatch lV36ab@t '(any . any)))) (if lV36ad@ls/false (apply (lambda (lV36af@kwd lV36b0@rest) (if (or (not (lV2aa7@id? lV36af@kwd)) (not (lV36a4@free-id-member? lV36af@kwd lV36a2@valid-kwds))) (lV2d8e@syntax-violation '#f '"not a valid define-record-type keyword" lV36af@kwd) (if (lV2ab3@bound-id-member? lV36af@kwd lV36a6@seen*) (lV2d8e@syntax-violation '#f '"duplicate use of keyword " lV369d@x lV36af@kwd) (lV36a9@f (cdr lV36a5@cls*) (cons lV36af@kwd lV36a6@seen*))))) lV36ad@ls/false) (let ((lV36b3@t lV36ab@t)) (let ((lV36b5@ls/false (lV2cae@syntax-dispatch lV36b3@t 'any))) (if lV36b5@ls/false (apply (lambda (lV36b7@cls) (lV2d8e@syntax-violation '#f '"malformed define-record-type clause" lV36b7@cls)) lV36b5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV36b3@t))))))) (void))))))) (let ((lV3695@t lV3671@x)) (let ((lV3697@ls/false (lV2cae@syntax-dispatch lV3695@t '(_ any . each-any)))) (if lV3697@ls/false (apply (lambda (lV3699@namespec lV369a@clause*) (begin (lV3694@verify-clauses lV3671@x lV369a@clause*) (lV3692@do-define-record lV3699@namespec lV369a@clause*))) lV3697@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3695@t)))))))) (set! lV477c@lV2ca2@define-record-type-macro lV2ca2@define-record-type-macro)) (begin (set! lV2ca4@define-condition-type-macro (lambda (lV386d@x) (let ((lV3870@mkname '#f)) (begin (set! lV3870@mkname (lambda (lV389d@name lV389e@suffix) (lV2d92@datum->syntax lV389d@name (string->symbol (string-append (symbol->string (lV2d94@syntax->datum lV389d@name)) lV389e@suffix))))) (let ((lV3871@t lV386d@x)) (let ((lV3873@ls/false (lV2cae@syntax-dispatch lV3871@t '(any any any any any . #(each (any any)))))) (if (and lV3873@ls/false (apply (lambda (lV3875@ctxt lV3876@name lV3877@super lV3878@constructor lV3879@predicate lV387a@field* lV387b@accessor*) (and (lV2aa7@id? lV3876@name) (lV2aa7@id? lV3877@super) (lV2aa7@id? lV3878@constructor) (lV2aa7@id? lV3879@predicate) (for-all lV2aa7@id? lV387a@field*) (for-all lV2aa7@id? lV387b@accessor*))) lV3873@ls/false)) (apply (lambda (lV3883@ctxt lV3884@name lV3885@super lV3886@constructor lV3887@predicate lV3888@field* lV3889@accessor*) (let ((lV3891@aux-accessor* (map (lambda (lV3893@x) (gensym)) lV3889@accessor*))) (lV2c64@bless (cons 'begin (cons (cons 'define-record-type (cons (list lV3884@name lV3886@constructor (gensym)) (cons (list 'parent lV3885@super) (cons (cons 'fields (map (lambda (lV3895@field lV3896@aux) (list 'immutable lV3895@field lV3896@aux)) lV3888@field* lV3891@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define lV3887@predicate (list 'condition-predicate (list 'record-type-descriptor lV3884@name))) (map (lambda (lV3899@accessor lV389a@aux) (list 'define lV3899@accessor (list 'condition-accessor (list 'record-type-descriptor lV3884@name) lV389a@aux))) lV3889@accessor* lV3891@aux-accessor*))))))) lV3873@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3871@t)))))))) (set! lV477d@lV2ca4@define-condition-type-macro lV2ca4@define-condition-type-macro)) (begin (set! lV2ca6@incorrect-usage-macro (lambda (lV38a1@e) (lV2d8e@syntax-violation '#f '"incorrect usage of auxiliary keyword" lV38a1@e))) (set! lV477e@lV2ca6@incorrect-usage-macro lV2ca6@incorrect-usage-macro)) (begin (set! lV2ca8@parameterize-macro (lambda (lV38a3@e) (let ((lV38a5@t lV38a3@e)) (let ((lV38a7@ls/false (lV2cae@syntax-dispatch lV38a5@t '(_ () any . each-any)))) (if lV38a7@ls/false (apply (lambda (lV38a9@b lV38aa@b*) (lV2c64@bless (cons 'let (cons '() (cons lV38a9@b lV38aa@b*))))) lV38a7@ls/false) (let ((lV38ad@t lV38a5@t)) (let ((lV38af@ls/false (lV2cae@syntax-dispatch lV38ad@t '(_ #(each (any any)) any . each-any)))) (if lV38af@ls/false (apply (lambda (lV38b1@olhs* lV38b2@orhs* lV38b3@b lV38b4@b*) (let ((lV38b9@lhs* (lV2d7c@generate-temporaries lV38b1@olhs*)) (lV38ba@rhs* (lV2d7c@generate-temporaries lV38b2@orhs*))) (lV2c64@bless (cons (list 'lambda (append lV38b9@lhs* lV38ba@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (lV38bd@lhs lV38be@rhs) (list 'let (list (list 't (list lV38bd@lhs))) (list lV38bd@lhs lV38be@rhs) (cons 'set! (cons lV38be@rhs '(t))))) lV38b9@lhs* lV38ba@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons lV38b3@b lV38b4@b*))) '(swap)))))) (append lV38b1@olhs* lV38b2@orhs*))))) lV38af@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV38ad@t))))))))) (set! lV477f@lV2ca8@parameterize-macro lV2ca8@parameterize-macro)) (begin (set! lV2caa@foreign-call-transformer (lambda (lV38c1@e lV38c2@r lV38c3@mr) (let ((lV38c7@t lV38c1@e)) (let ((lV38c9@ls/false (lV2cae@syntax-dispatch lV38c7@t '(_ any . each-any)))) (if lV38c9@ls/false (apply (lambda (lV38cb@name lV38cc@arg*) (cons 'foreign-call (cons (lV2cd0@chi-expr lV38cb@name lV38c2@r lV38c3@mr) (lV2ccc@chi-expr* lV38cc@arg* lV38c2@r lV38c3@mr)))) lV38c9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV38c7@t)))))) (set! lV4780@lV2caa@foreign-call-transformer lV2caa@foreign-call-transformer)) (begin (set! lV2cac@convert-pattern (lambda (lV38cf@pattern lV38d0@keys) (let ((lV38d4@cvt* '#f) (lV38d6@cvt '#f)) (begin (set! lV38d4@cvt* (lambda (lV3973@p* lV3974@n lV3975@ids) (if (null? lV3973@p*) (values '() lV3975@ids) (call-with-values (lambda () (lV38d4@cvt* (cdr lV3973@p*) lV3974@n lV3975@ids)) (lambda (lV397d@lV397a lV397e@lV397c) (let ((lV3981@ids lV397e@lV397c) (lV3982@y lV397d@lV397a)) (call-with-values (lambda () (lV38d6@cvt (car lV3973@p*) lV3974@n lV3981@ids)) (lambda (lV3989@lV3986 lV398a@lV3988) (let ((lV398d@ids lV398a@lV3988) (lV398e@x lV3989@lV3986)) (values (cons lV398e@x lV3982@y) lV398d@ids)))))))))) (set! lV38d6@cvt (lambda (lV38d7@p lV38d8@n lV38d9@ids) (let ((lV38dd@t lV38d7@p)) (let ((lV38df@ls/false (lV2cae@syntax-dispatch lV38dd@t 'any))) (if (and lV38df@ls/false (apply (lambda (lV38e1@id) (lV2aa7@id? lV38e1@id)) lV38df@ls/false)) (apply (lambda (lV38e3@id) (if (lV2ab3@bound-id-member? lV38d7@p lV38d0@keys) (values (vector 'free-id lV38d7@p) lV38d9@ids) (if (lV2aad@free-id=? lV38d7@p (lV2c36@scheme-stx '_)) (values '_ lV38d9@ids) (values 'any (cons (cons lV38d7@p lV38d8@n) lV38d9@ids))))) lV38df@ls/false) (let ((lV38e5@t lV38dd@t)) (let ((lV38e7@ls/false (lV2cae@syntax-dispatch lV38e5@t '(any any)))) (if (and lV38e7@ls/false (apply (lambda (lV38e9@p lV38ea@dots) (lV2cb0@ellipsis? lV38ea@dots)) lV38e7@ls/false)) (apply (lambda (lV38ed@p lV38ee@dots) (call-with-values (lambda () (lV38d6@cvt lV38ed@p (+ lV38d8@n '1) lV38d9@ids)) (lambda (lV38f5@lV38f2 lV38f6@lV38f4) (let ((lV38f9@ids lV38f6@lV38f4) (lV38fa@p lV38f5@lV38f2)) (values (if (eq? lV38fa@p 'any) 'each-any (vector 'each lV38fa@p)) lV38f9@ids))))) lV38e7@ls/false) (let ((lV38fd@t lV38e5@t)) (let ((lV38ff@ls/false (lV2cae@syntax-dispatch lV38fd@t '(any any . #(each+ any () any))))) (if (and lV38ff@ls/false (apply (lambda (lV3901@x lV3902@dots lV3903@ys lV3904@z) (lV2cb0@ellipsis? lV3902@dots)) lV38ff@ls/false)) (apply (lambda (lV3909@x lV390a@dots lV390b@ys lV390c@z) (call-with-values (lambda () (lV38d6@cvt lV390c@z lV38d8@n lV38d9@ids)) (lambda (lV3915@lV3912 lV3916@lV3914) (let ((lV3919@ids lV3916@lV3914) (lV391a@z lV3915@lV3912)) (call-with-values (lambda () (lV38d4@cvt* lV390b@ys lV38d8@n lV3919@ids)) (lambda (lV3921@lV391e lV3922@lV3920) (let ((lV3925@ids lV3922@lV3920) (lV3926@ys lV3921@lV391e)) (call-with-values (lambda () (lV38d6@cvt lV3909@x (+ lV38d8@n '1) lV3925@ids)) (lambda (lV392d@lV392a lV392e@lV392c) (let ((lV3931@ids lV392e@lV392c) (lV3932@x lV392d@lV392a)) (values (vector 'each+ lV3932@x (reverse lV3926@ys) lV391a@z) lV3931@ids))))))))))) lV38ff@ls/false) (let ((lV3935@t lV38fd@t)) (let ((lV3937@ls/false (lV2cae@syntax-dispatch lV3935@t '(any . any)))) (if lV3937@ls/false (apply (lambda (lV3939@x lV393a@y) (call-with-values (lambda () (lV38d6@cvt lV393a@y lV38d8@n lV38d9@ids)) (lambda (lV3941@lV393e lV3942@lV3940) (let ((lV3945@ids lV3942@lV3940) (lV3946@y lV3941@lV393e)) (call-with-values (lambda () (lV38d6@cvt lV3939@x lV38d8@n lV3945@ids)) (lambda (lV394d@lV394a lV394e@lV394c) (let ((lV3951@ids lV394e@lV394c) (lV3952@x lV394d@lV394a)) (values (cons lV3952@x lV3946@y) lV3951@ids)))))))) lV3937@ls/false) (let ((lV3955@t lV3935@t)) (let ((lV3957@ls/false (lV2cae@syntax-dispatch lV3955@t '()))) (if lV3957@ls/false (apply (lambda () (values '() lV38d9@ids)) lV3957@ls/false) (let ((lV3959@t lV3955@t)) (let ((lV395b@ls/false (lV2cae@syntax-dispatch lV3959@t '#(vector each-any)))) (if (and lV395b@ls/false (apply (lambda (lV395d@p) (not (lV2a73@stx? lV395d@p))) lV395b@ls/false)) (apply (lambda (lV395f@p) (call-with-values (lambda () (lV38d6@cvt lV395f@p lV38d8@n lV38d9@ids)) (lambda (lV3965@lV3962 lV3966@lV3964) (let ((lV3969@ids lV3966@lV3964) (lV396a@p lV3965@lV3962)) (values (vector 'vector lV396a@p) lV3969@ids))))) lV395b@ls/false) (let ((lV396d@t lV3959@t)) (let ((lV396f@ls/false (lV2cae@syntax-dispatch lV396d@t 'any))) (if lV396f@ls/false (apply (lambda (lV3971@datum) (values (vector 'atom (lV2abb@stx->datum lV3971@datum)) lV38d9@ids)) lV396f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV396d@t)))))))))))))))))))))))) (lV38d6@cvt lV38cf@pattern '0 '()))))) (set! lV4781@lV2cac@convert-pattern lV2cac@convert-pattern)) (begin (set! lV2cae@syntax-dispatch (let ((lV3992@stx^ '#f) (lV3994@match-each '#f) (lV3996@match-each+ '#f) (lV3998@match-each-any '#f) (lV399a@match-empty '#f) (lV399c@combine '#f) (lV399e@match* '#f) (lV39a0@match '#f)) (begin (set! lV3992@stx^ (lambda (lV3a6d@e lV3a6e@m* lV3a6f@s* lV3a70@ae*) (if (and (null? lV3a6e@m*) (null? lV3a6f@s*) (null? lV3a70@ae*)) lV3a6d@e (lV2a8f@mkstx lV3a6d@e lV3a6e@m* lV3a6f@s* lV3a70@ae*)))) (set! lV3994@match-each (lambda (lV3a4d@e lV3a4e@p lV3a4f@m* lV3a50@s* lV3a51@ae*) (if (pair? lV3a4d@e) (let ((lV3a57@first (lV39a0@match (car lV3a4d@e) lV3a4e@p lV3a4f@m* lV3a50@s* lV3a51@ae* '()))) (and lV3a57@first (let ((lV3a59@rest (lV3994@match-each (cdr lV3a4d@e) lV3a4e@p lV3a4f@m* lV3a50@s* lV3a51@ae*))) (and lV3a59@rest (cons lV3a57@first lV3a59@rest))))) (if (null? lV3a4d@e) '() (if (lV2a73@stx? lV3a4d@e) (and (not (lV2a2d@top-marked? lV3a4f@m*)) (call-with-values (lambda () (join-wraps lV3a4f@m* lV3a50@s* lV3a51@ae* lV3a4d@e)) (lambda (lV3a61@lV3a5c lV3a62@lV3a5e lV3a63@lV3a60) (let ((lV3a67@ae* lV3a63@lV3a60) (lV3a68@s* lV3a62@lV3a5e) (lV3a69@m* lV3a61@lV3a5c)) (lV3994@match-each (lV2a75@stx-expr lV3a4d@e) lV3a4e@p lV3a69@m* lV3a68@s* lV3a67@ae*))))) (if (lV25e6@lV24ba@annotation? lV3a4d@e) (lV3994@match-each (lV25e8@lV24be@annotation-expression lV3a4d@e) lV3a4e@p lV3a4f@m* lV3a50@s* lV3a51@ae*) '#f)))))) (set! lV3996@match-each+ (lambda (lV3a0d@e lV3a0e@x-pat lV3a0f@y-pat lV3a10@z-pat lV3a11@m* lV3a12@s* lV3a13@ae* lV3a14@r) (let lV3a25@f ((lV3a1d@e lV3a0d@e) (lV3a1e@m* lV3a11@m*) (lV3a1f@s* lV3a12@s*) (lV3a20@ae* lV3a13@ae*)) (if (pair? lV3a1d@e) (call-with-values (lambda () (lV3a25@f (cdr lV3a1d@e) lV3a1e@m* lV3a1f@s* lV3a20@ae*)) (lambda (lV3a2d@lV3a28 lV3a2e@lV3a2a lV3a2f@lV3a2c) (let ((lV3a33@r lV3a2f@lV3a2c) (lV3a34@y-pat lV3a2e@lV3a2a) (lV3a35@xr* lV3a2d@lV3a28)) (if lV3a33@r (if (null? lV3a34@y-pat) (let ((lV3a39@xr (lV39a0@match (car lV3a1d@e) lV3a0e@x-pat lV3a1e@m* lV3a1f@s* lV3a20@ae* '()))) (if lV3a39@xr (values (cons lV3a39@xr lV3a35@xr*) lV3a34@y-pat lV3a33@r) (values '#f '#f '#f))) (values '() (cdr lV3a34@y-pat) (lV39a0@match (car lV3a1d@e) (car lV3a34@y-pat) lV3a1e@m* lV3a1f@s* lV3a20@ae* lV3a33@r))) (values '#f '#f '#f))))) (if (lV2a73@stx? lV3a1d@e) (if (lV2a2d@top-marked? lV3a1e@m*) (values '() lV3a0f@y-pat (lV39a0@match lV3a1d@e lV3a10@z-pat lV3a1e@m* lV3a1f@s* lV3a20@ae* lV3a14@r)) (call-with-values (lambda () (join-wraps lV3a1e@m* lV3a1f@s* lV3a20@ae* lV3a1d@e)) (lambda (lV3a41@lV3a3c lV3a42@lV3a3e lV3a43@lV3a40) (let ((lV3a47@ae* lV3a43@lV3a40) (lV3a48@s* lV3a42@lV3a3e) (lV3a49@m* lV3a41@lV3a3c)) (lV3a25@f (lV2a75@stx-expr lV3a1d@e) lV3a49@m* lV3a48@s* lV3a47@ae*))))) (if (lV25e6@lV24ba@annotation? lV3a1d@e) (lV3a25@f (lV25e8@lV24be@annotation-expression lV3a1d@e) lV3a1e@m* lV3a1f@s* lV3a20@ae*) (values '() lV3a0f@y-pat (lV39a0@match lV3a1d@e lV3a10@z-pat lV3a1e@m* lV3a1f@s* lV3a20@ae* lV3a14@r)))))))) (set! lV3998@match-each-any (lambda (lV39f1@e lV39f2@m* lV39f3@s* lV39f4@ae*) (if (pair? lV39f1@e) (let ((lV39f9@l (lV3998@match-each-any (cdr lV39f1@e) lV39f2@m* lV39f3@s* lV39f4@ae*))) (and lV39f9@l (cons (lV3992@stx^ (car lV39f1@e) lV39f2@m* lV39f3@s* lV39f4@ae*) lV39f9@l))) (if (null? lV39f1@e) '() (if (lV2a73@stx? lV39f1@e) (and (not (lV2a2d@top-marked? lV39f2@m*)) (call-with-values (lambda () (join-wraps lV39f2@m* lV39f3@s* lV39f4@ae* lV39f1@e)) (lambda (lV3a01@lV39fc lV3a02@lV39fe lV3a03@lV3a00) (let ((lV3a07@ae* lV3a03@lV3a00) (lV3a08@s* lV3a02@lV39fe) (lV3a09@m* lV3a01@lV39fc)) (lV3998@match-each-any (lV2a75@stx-expr lV39f1@e) lV3a09@m* lV3a08@s* lV3a07@ae*))))) (if (lV25e6@lV24ba@annotation? lV39f1@e) (lV3998@match-each-any (lV25e8@lV24be@annotation-expression lV39f1@e) lV39f2@m* lV39f3@s* lV39f4@ae*) '#f)))))) (set! lV399a@match-empty (lambda (lV39eb@p lV39ec@r) (if (null? lV39eb@p) lV39ec@r (if (eq? lV39eb@p '_) lV39ec@r (if (eq? lV39eb@p 'any) (cons '() lV39ec@r) (if (pair? lV39eb@p) (lV399a@match-empty (car lV39eb@p) (lV399a@match-empty (cdr lV39eb@p) lV39ec@r)) (if (eq? lV39eb@p 'each-any) (cons '() lV39ec@r) (let ((lV39ef@t (vector-ref lV39eb@p '0))) (if (memv lV39ef@t '(each)) (lV399a@match-empty (vector-ref lV39eb@p '1) lV39ec@r) (if (memv lV39ef@t '(each+)) (lV399a@match-empty (vector-ref lV39eb@p '1) (lV399a@match-empty (reverse (vector-ref lV39eb@p '2)) (lV399a@match-empty (vector-ref lV39eb@p '3) lV39ec@r))) (if (memv lV39ef@t '(free-id atom)) lV39ec@r (if (memv lV39ef@t '(scheme-id atom)) lV39ec@r (if (memv lV39ef@t '(vector)) (lV399a@match-empty (vector-ref lV39eb@p '1) lV39ec@r) (assertion-violation 'syntax-dispatch '"invalid pattern" lV39eb@p)))))))))))))) (set! lV399c@combine (lambda (lV39e7@r* lV39e8@r) (if (null? (car lV39e7@r*)) lV39e8@r (cons (map car lV39e7@r*) (lV399c@combine (map cdr lV39e7@r*) lV39e8@r))))) (set! lV399e@match* (lambda (lV39c3@e lV39c4@p lV39c5@m* lV39c6@s* lV39c7@ae* lV39c8@r) (if (null? lV39c4@p) (and (null? lV39c3@e) lV39c8@r) (if (pair? lV39c4@p) (and (pair? lV39c3@e) (lV39a0@match (car lV39c3@e) (car lV39c4@p) lV39c5@m* lV39c6@s* lV39c7@ae* (lV39a0@match (cdr lV39c3@e) (cdr lV39c4@p) lV39c5@m* lV39c6@s* lV39c7@ae* lV39c8@r))) (if (eq? lV39c4@p 'each-any) (let ((lV39cf@l (lV3998@match-each-any lV39c3@e lV39c5@m* lV39c6@s* lV39c7@ae*))) (and lV39cf@l (cons lV39cf@l lV39c8@r))) (let ((lV39d1@t (vector-ref lV39c4@p '0))) (if (memv lV39d1@t '(each)) (if (null? lV39c3@e) (lV399a@match-empty (vector-ref lV39c4@p '1) lV39c8@r) (let ((lV39d3@r* (lV3994@match-each lV39c3@e (vector-ref lV39c4@p '1) lV39c5@m* lV39c6@s* lV39c7@ae*))) (and lV39d3@r* (lV399c@combine lV39d3@r* lV39c8@r)))) (if (memv lV39d1@t '(free-id)) (and (symbol? lV39c3@e) (lV2a2d@top-marked? lV39c5@m*) (lV2aad@free-id=? (lV3992@stx^ lV39c3@e lV39c5@m* lV39c6@s* lV39c7@ae*) (vector-ref lV39c4@p '1)) lV39c8@r) (if (memv lV39d1@t '(scheme-id)) (and (symbol? lV39c3@e) (lV2a2d@top-marked? lV39c5@m*) (lV2aad@free-id=? (lV3992@stx^ lV39c3@e lV39c5@m* lV39c6@s* lV39c7@ae*) (lV2c36@scheme-stx (vector-ref lV39c4@p '1))) lV39c8@r) (if (memv lV39d1@t '(each+)) (call-with-values (lambda () (lV3996@match-each+ lV39c3@e (vector-ref lV39c4@p '1) (vector-ref lV39c4@p '2) (vector-ref lV39c4@p '3) lV39c5@m* lV39c6@s* lV39c7@ae* lV39c8@r)) (lambda (lV39db@lV39d6 lV39dc@lV39d8 lV39dd@lV39da) (let ((lV39e1@r lV39dd@lV39da) (lV39e2@y-pat lV39dc@lV39d8) (lV39e3@xr* lV39db@lV39d6)) (and lV39e1@r (null? lV39e2@y-pat) (if (null? lV39e3@xr*) (lV399a@match-empty (vector-ref lV39c4@p '1) lV39e1@r) (lV399c@combine lV39e3@xr* lV39e1@r)))))) (if (memv lV39d1@t '(atom)) (and (fast-equal? (vector-ref lV39c4@p '1) (lV2ab9@strip lV39c3@e lV39c5@m*)) lV39c8@r) (if (memv lV39d1@t '(vector)) (and (vector? lV39c3@e) (lV39a0@match (vector->list lV39c3@e) (vector-ref lV39c4@p '1) lV39c5@m* lV39c6@s* lV39c7@ae* lV39c8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" lV39c4@p))))))))))))) (set! lV39a0@match (lambda (lV39a5@e lV39a6@p lV39a7@m* lV39a8@s* lV39a9@ae* lV39aa@r) (if (not lV39aa@r) '#f (if (eq? lV39a6@p '_) lV39aa@r (if (eq? lV39a6@p 'any) (cons (lV3992@stx^ lV39a5@e lV39a7@m* lV39a8@s* lV39a9@ae*) lV39aa@r) (if (lV2a73@stx? lV39a5@e) (and (not (lV2a2d@top-marked? lV39a7@m*)) (call-with-values (lambda () (join-wraps lV39a7@m* lV39a8@s* lV39a9@ae* lV39a5@e)) (lambda (lV39b7@lV39b2 lV39b8@lV39b4 lV39b9@lV39b6) (let ((lV39bd@ae* lV39b9@lV39b6) (lV39be@s* lV39b8@lV39b4) (lV39bf@m* lV39b7@lV39b2)) (lV39a0@match (lV2a75@stx-expr lV39a5@e) lV39a6@p lV39bf@m* lV39be@s* lV39bd@ae* lV39aa@r))))) (if (lV25e6@lV24ba@annotation? lV39a5@e) (lV39a0@match (lV25e8@lV24be@annotation-expression lV39a5@e) lV39a6@p lV39a7@m* lV39a8@s* lV39a9@ae* lV39aa@r) (lV399e@match* lV39a5@e lV39a6@p lV39a7@m* lV39a8@s* lV39a9@ae* lV39aa@r)))))))) (lambda (lV39a1@e lV39a2@p) (lV39a0@match lV39a1@e lV39a2@p '() '() '() '()))))) (set! lV4782@lV2cae@syntax-dispatch lV2cae@syntax-dispatch)) (begin (set! lV2cb0@ellipsis? (lambda (lV3a75@x) (and (lV2aa7@id? lV3a75@x) (lV2aad@free-id=? lV3a75@x (lV2c36@scheme-stx '...))))) (set! lV4783@lV2cb0@ellipsis? lV2cb0@ellipsis?)) (begin (set! lV2cb2@underscore? (lambda (lV3a77@x) (and (lV2aa7@id? lV3a77@x) (lV2aad@free-id=? lV3a77@x (lV2c36@scheme-stx '_))))) (set! lV4784@lV2cb2@underscore? lV2cb2@underscore?)) (begin (set! lV2cb4@verify-literals (lambda (lV3a79@lits lV3a7a@expr) (for-each (lambda (lV3a7d@x) (if (or (not (lV2aa7@id? lV3a7d@x)) (lV2cb0@ellipsis? lV3a7d@x) (lV2cb2@underscore? lV3a7d@x)) (lV2d8e@syntax-violation '#f '"invalid literal" lV3a7a@expr lV3a7d@x) (void))) lV3a79@lits))) (set! lV4785@lV2cb4@verify-literals lV2cb4@verify-literals)) (begin (set! lV2cb6@syntax-case-transformer (let ((lV3a80@build-dispatch-call '#f) (lV3a82@invalid-ids-error '#f) (lV3a84@gen-clause '#f) (lV3a86@gen-syntax-case '#f)) (begin (set! lV3a80@build-dispatch-call (lambda (lV3af1@pvars lV3af2@expr lV3af3@y lV3af4@r lV3af5@mr) (let ((lV3afb@ids (map car lV3af1@pvars)) (lV3afc@levels (map cdr lV3af1@pvars))) (let ((lV3aff@labels (map lV2a33@gen-label lV3afb@ids)) (lV3b00@new-vars (map lV2a2f@gen-lexical lV3afb@ids))) (let ((lV3b03@body (lV2cd0@chi-expr (lV2a93@add-subst (lV2a67@make-full-rib lV3afb@ids lV3aff@labels) lV3af2@expr) (append (map (lambda (lV3b05@label lV3b06@var lV3b07@level) (cons lV3b05@label (lV2ac1@make-binding 'syntax (cons lV3b06@var lV3b07@level)))) lV3aff@labels lV3b00@new-vars (map cdr lV3af1@pvars)) lV3af4@r) lV3af5@mr))) (list '(primitive apply) (lV2a0a@lV2936@build-lambda '#f lV3b00@new-vars lV3b03@body) lV3af3@y)))))) (set! lV3a82@invalid-ids-error (lambda (lV3ae5@id* lV3ae6@e lV3ae7@class) (let lV3aef@find ((lV3aeb@id* lV3ae5@id*) (lV3aec@ok* '())) (if (null? lV3aeb@id*) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3ae6@e) (if (lV2aa7@id? (car lV3aeb@id*)) (if (lV2ab3@bound-id-member? (car lV3aeb@id*) lV3aec@ok*) (lV2d8a@syntax-error (car lV3aeb@id*) '"duplicate " lV3ae7@class) (lV3aef@find (cdr lV3aeb@id*) (cons (car lV3aeb@id*) lV3aec@ok*))) (lV2d8a@syntax-error (car lV3aeb@id*) '"invalid " lV3ae7@class)))))) (set! lV3a84@gen-clause (lambda (lV3abd@x lV3abe@keys lV3abf@clauses lV3ac0@r lV3ac1@mr lV3ac2@pat lV3ac3@fender lV3ac4@expr) (call-with-values (lambda () (lV2cac@convert-pattern lV3ac2@pat lV3abe@keys)) (lambda (lV3ad1@lV3ace lV3ad2@lV3ad0) (let ((lV3ad5@pvars lV3ad2@lV3ad0) (lV3ad6@p lV3ad1@lV3ace)) (if (not (lV2ab1@distinct-bound-ids? (map car lV3ad5@pvars))) (lV3a82@invalid-ids-error (map car lV3ad5@pvars) lV3ac2@pat '"pattern variable") (if (not (for-all (lambda (lV3ad9@x) (not (lV2cb0@ellipsis? (car lV3ad9@x)))) lV3ad5@pvars)) (lV2d8e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" lV3ac2@pat) (let ((lV3adb@y (lV2a2f@gen-lexical 'tmp))) (let ((lV3add@test (if (eq? lV3ac3@fender '#t) lV3adb@y (let ((lV3adf@call (lV3a80@build-dispatch-call lV3ad5@pvars lV3ac3@fender lV3adb@y lV3ac0@r lV3ac1@mr))) (list 'if lV3adb@y lV3adf@call (list 'quote '#f)))))) (let ((lV3ae1@conseq (lV3a80@build-dispatch-call lV3ad5@pvars lV3ac4@expr lV3adb@y lV3ac0@r lV3ac1@mr))) (let ((lV3ae3@altern (lV3a86@gen-syntax-case lV3abd@x lV3abe@keys lV3abf@clauses lV3ac0@r lV3ac1@mr))) (list (lV2a0a@lV2936@build-lambda '#f (list lV3adb@y) (list 'if lV3add@test lV3ae1@conseq lV3ae3@altern)) (list '(primitive syntax-dispatch) lV3abd@x (list 'quote lV3ad6@p)))))))))))))) (set! lV3a86@gen-syntax-case (lambda (lV3a9b@x lV3a9c@keys lV3a9d@clauses lV3a9e@r lV3a9f@mr) (if (null? lV3a9d@clauses) (list '(primitive syntax-error) lV3a9b@x) (let ((lV3aa5@t (car lV3a9d@clauses))) (let ((lV3aa7@ls/false (lV2cae@syntax-dispatch lV3aa5@t '(any any)))) (if lV3aa7@ls/false (apply (lambda (lV3aa9@pat lV3aaa@expr) (if (and (lV2aa7@id? lV3aa9@pat) (not (lV2ab3@bound-id-member? lV3aa9@pat lV3a9c@keys)) (not (lV2cb0@ellipsis? lV3aa9@pat))) (if (lV2aad@free-id=? lV3aa9@pat (lV2c36@scheme-stx '_)) (lV2cd0@chi-expr lV3aaa@expr lV3a9e@r lV3a9f@mr) (let ((lV3aad@lab (lV2a33@gen-label lV3aa9@pat)) (lV3aae@lex (lV2a2f@gen-lexical lV3aa9@pat))) (let ((lV3ab1@body (lV2cd0@chi-expr (lV2a93@add-subst (lV2a67@make-full-rib (list lV3aa9@pat) (list lV3aad@lab)) lV3aaa@expr) (cons (cons lV3aad@lab (lV2ac1@make-binding 'syntax (cons lV3aae@lex '0))) lV3a9e@r) lV3a9f@mr))) (list (lV2a0a@lV2936@build-lambda '#f (list lV3aae@lex) lV3ab1@body) lV3a9b@x)))) (lV3a84@gen-clause lV3a9b@x lV3a9c@keys (cdr lV3a9d@clauses) lV3a9e@r lV3a9f@mr lV3aa9@pat '#t lV3aaa@expr))) lV3aa7@ls/false) (let ((lV3ab3@t lV3aa5@t)) (let ((lV3ab5@ls/false (lV2cae@syntax-dispatch lV3ab3@t '(any any any)))) (if lV3ab5@ls/false (apply (lambda (lV3ab7@pat lV3ab8@fender lV3ab9@expr) (lV3a84@gen-clause lV3a9b@x lV3a9c@keys (cdr lV3a9d@clauses) lV3a9e@r lV3a9f@mr lV3ab7@pat lV3ab8@fender lV3ab9@expr)) lV3ab5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3ab3@t)))))))))) (lambda (lV3a87@e lV3a88@r lV3a89@mr) (let ((lV3a8d@t lV3a87@e)) (let ((lV3a8f@ls/false (lV2cae@syntax-dispatch lV3a8d@t '(_ any each-any . each-any)))) (if lV3a8f@ls/false (apply (lambda (lV3a91@expr lV3a92@keys lV3a93@clauses) (begin (lV2cb4@verify-literals lV3a92@keys lV3a87@e) (let ((lV3a97@x (lV2a2f@gen-lexical 'tmp))) (let ((lV3a99@body (lV3a86@gen-syntax-case lV3a97@x lV3a92@keys lV3a93@clauses lV3a88@r lV3a89@mr))) (list (lV2a0a@lV2936@build-lambda '#f (list lV3a97@x) lV3a99@body) (lV2cd0@chi-expr lV3a91@expr lV3a88@r lV3a89@mr)))))) lV3a8f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3a8d@t)))))))) (set! lV4786@lV2cb6@syntax-case-transformer lV2cb6@syntax-case-transformer)) (begin (set! lV2cb8@ellipsis-map (lambda (lV3b0b@proc lV3b0c@ls . lV3b0f@ls*) (let ((lV3b12@who '#f)) (begin (set! lV3b12@who '...) (begin (if (not (list? lV3b0c@ls)) (assertion-violation lV3b12@who '"not a list" lV3b0c@ls) (void)) (if (not (null? lV3b0f@ls*)) (let ((lV3b13@n (length lV3b0c@ls))) (for-each (lambda (lV3b15@x) (begin (if (not (list? lV3b15@x)) (assertion-violation lV3b12@who '"not a list" lV3b15@x) (void)) (if (not (= (length lV3b15@x) lV3b13@n)) (assertion-violation lV3b12@who '"length mismatch" lV3b0c@ls lV3b15@x) (void)))) lV3b0f@ls*)) (void)) (apply map lV3b0b@proc lV3b0c@ls lV3b0f@ls*)))))) (set! lV4787@lV2cb8@ellipsis-map lV2cb8@ellipsis-map)) (begin (set! lV2cba@syntax-transformer (let ((lV3b18@gen-syntax '#f) (lV3b1a@gen-ref '#f) (lV3b1c@gen-append '#f) (lV3b1e@gen-mappend '#f) (lV3b20@gen-map '#f) (lV3b22@gen-cons '#f) (lV3b24@gen-vector '#f) (lV3b26@regen '#f)) (begin (set! lV3b18@gen-syntax (lambda (lV3b8f@src lV3b90@e lV3b91@r lV3b92@maps lV3b93@ellipsis? lV3b94@vec?) (let ((lV3b9b@t lV3b90@e)) (let ((lV3b9d@ls/false (lV2cae@syntax-dispatch lV3b9b@t 'any))) (if (and lV3b9d@ls/false (apply (lambda (lV3b9f@dots) (lV3b93@ellipsis? lV3b9f@dots)) lV3b9d@ls/false)) (apply (lambda (lV3ba1@dots) (lV2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" lV3b8f@src)) lV3b9d@ls/false) (let ((lV3ba3@t lV3b9b@t)) (let ((lV3ba5@ls/false (lV2cae@syntax-dispatch lV3ba3@t 'any))) (if (and lV3ba5@ls/false (apply (lambda (lV3ba7@id) (lV2aa7@id? lV3ba7@id)) lV3ba5@ls/false)) (apply (lambda (lV3ba9@id) (let ((lV3bab@label (lV2abd@id->label lV3b90@e))) (let ((lV3bad@b (lV2abf@label->binding lV3bab@label lV3b91@r))) (if (eq? (lV2ac3@binding-type lV3bad@b) 'syntax) (call-with-values (lambda () (let ((lV3bb3@var.lev (lV2ac5@binding-value lV3bad@b))) (lV3b1a@gen-ref lV3b8f@src (car lV3bb3@var.lev) (cdr lV3bb3@var.lev) lV3b92@maps))) (lambda (lV3bb5@lV3bb0 lV3bb6@lV3bb2) (let ((lV3bb9@maps lV3bb6@lV3bb2) (lV3bba@var lV3bb5@lV3bb0)) (values (list 'ref lV3bba@var) lV3bb9@maps)))) (values (list 'quote lV3b90@e) lV3b92@maps))))) lV3ba5@ls/false) (let ((lV3bbd@t lV3ba3@t)) (let ((lV3bbf@ls/false (lV2cae@syntax-dispatch lV3bbd@t '(any any)))) (if (and lV3bbf@ls/false (apply (lambda (lV3bc1@dots lV3bc2@e) (lV3b93@ellipsis? lV3bc1@dots)) lV3bbf@ls/false)) (apply (lambda (lV3bc5@dots lV3bc6@e) (if lV3b94@vec? (lV2d8e@syntax-violation '#f '"misplaced ellipsis in syntax form" lV3b8f@src) (lV3b18@gen-syntax lV3b8f@src lV3bc6@e lV3b91@r lV3b92@maps (lambda (lV3bc9@x) '#f) '#f))) lV3bbf@ls/false) (let ((lV3bcb@t lV3bbd@t)) (let ((lV3bcd@ls/false (lV2cae@syntax-dispatch lV3bcb@t '(any any . any)))) (if (and lV3bcd@ls/false (apply (lambda (lV3bcf@x lV3bd0@dots lV3bd1@y) (lV3b93@ellipsis? lV3bd0@dots)) lV3bcd@ls/false)) (apply (lambda (lV3bd5@x lV3bd6@dots lV3bd7@y) (let lV3bed@f ((lV3bdb@y lV3bd7@y) (lV3bdc@k (lambda (lV3bdf@maps) (call-with-values (lambda () (lV3b18@gen-syntax lV3b8f@src lV3bd5@x lV3b91@r (cons '() lV3bdf@maps) lV3b93@ellipsis? '#f)) (lambda (lV3be5@lV3be2 lV3be6@lV3be4) (let ((lV3be9@maps lV3be6@lV3be4) (lV3bea@x lV3be5@lV3be2)) (if (null? (car lV3be9@maps)) (lV2d8e@syntax-violation '#f '"extra ellipsis in syntax form" lV3b8f@src) (values (lV3b20@gen-map lV3bea@x (car lV3be9@maps)) (cdr lV3be9@maps))))))))) (let ((lV3bef@t lV3bdb@y)) (let ((lV3bf1@ls/false (lV2cae@syntax-dispatch lV3bef@t '()))) (if lV3bf1@ls/false (apply (lambda () (lV3bdc@k lV3b92@maps)) lV3bf1@ls/false) (let ((lV3bf3@t lV3bef@t)) (let ((lV3bf5@ls/false (lV2cae@syntax-dispatch lV3bf3@t '(any . any)))) (if (and lV3bf5@ls/false (apply (lambda (lV3bf7@dots lV3bf8@y) (lV3b93@ellipsis? lV3bf7@dots)) lV3bf5@ls/false)) (apply (lambda (lV3bfb@dots lV3bfc@y) (lV3bed@f lV3bfc@y (lambda (lV3bff@maps) (call-with-values (lambda () (lV3bdc@k (cons '() lV3bff@maps))) (lambda (lV3c05@lV3c02 lV3c06@lV3c04) (let ((lV3c09@maps lV3c06@lV3c04) (lV3c0a@x lV3c05@lV3c02)) (if (null? (car lV3c09@maps)) (lV2d8e@syntax-violation '#f '"extra ellipsis in syntax form" lV3b8f@src) (values (lV3b1e@gen-mappend lV3c0a@x (car lV3c09@maps)) (cdr lV3c09@maps))))))))) lV3bf5@ls/false) (let ((lV3c0d@t lV3bf3@t)) (let ((lV3c0f@ls/false (lV2cae@syntax-dispatch lV3c0d@t '_))) (if lV3c0f@ls/false (apply (lambda () (call-with-values (lambda () (lV3b18@gen-syntax lV3b8f@src lV3bdb@y lV3b91@r lV3b92@maps lV3b93@ellipsis? lV3b94@vec?)) (lambda (lV3c15@lV3c12 lV3c16@lV3c14) (let ((lV3c19@maps lV3c16@lV3c14) (lV3c1a@y lV3c15@lV3c12)) (call-with-values (lambda () (lV3bdc@k lV3c19@maps)) (lambda (lV3c21@lV3c1e lV3c22@lV3c20) (let ((lV3c25@maps lV3c22@lV3c20) (lV3c26@x lV3c21@lV3c1e)) (values (lV3b1c@gen-append lV3c26@x lV3c1a@y) lV3c25@maps)))))))) lV3c0f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3c0d@t)))))))))))) lV3bcd@ls/false) (let ((lV3c29@t lV3bcb@t)) (let ((lV3c2b@ls/false (lV2cae@syntax-dispatch lV3c29@t '(any . any)))) (if lV3c2b@ls/false (apply (lambda (lV3c2d@x lV3c2e@y) (call-with-values (lambda () (lV3b18@gen-syntax lV3b8f@src lV3c2d@x lV3b91@r lV3b92@maps lV3b93@ellipsis? '#f)) (lambda (lV3c35@lV3c32 lV3c36@lV3c34) (let ((lV3c39@maps lV3c36@lV3c34) (lV3c3a@xnew lV3c35@lV3c32)) (call-with-values (lambda () (lV3b18@gen-syntax lV3b8f@src lV3c2e@y lV3b91@r lV3c39@maps lV3b93@ellipsis? lV3b94@vec?)) (lambda (lV3c41@lV3c3e lV3c42@lV3c40) (let ((lV3c45@maps lV3c42@lV3c40) (lV3c46@ynew lV3c41@lV3c3e)) (values (lV3b22@gen-cons lV3b90@e lV3c2d@x lV3c2e@y lV3c3a@xnew lV3c46@ynew) lV3c45@maps)))))))) lV3c2b@ls/false) (let ((lV3c49@t lV3c29@t)) (let ((lV3c4b@ls/false (lV2cae@syntax-dispatch lV3c49@t '#(vector each-any)))) (if lV3c4b@ls/false (apply (lambda (lV3c4d@ls) (call-with-values (lambda () (lV3b18@gen-syntax lV3b8f@src lV3c4d@ls lV3b91@r lV3b92@maps lV3b93@ellipsis? '#t)) (lambda (lV3c53@lV3c50 lV3c54@lV3c52) (let ((lV3c57@maps lV3c54@lV3c52) (lV3c58@lsnew lV3c53@lV3c50)) (values (lV3b24@gen-vector lV3b90@e lV3c4d@ls lV3c58@lsnew) lV3c57@maps))))) lV3c4b@ls/false) (let ((lV3c5b@t lV3c49@t)) (let ((lV3c5d@ls/false (lV2cae@syntax-dispatch lV3c5b@t '_))) (if lV3c5d@ls/false (apply (lambda () (values (list 'quote lV3b90@e) lV3b92@maps)) lV3c5d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3c5b@t)))))))))))))))))))))))) (set! lV3b1a@gen-ref (lambda (lV3b75@src lV3b76@var lV3b77@level lV3b78@maps) (if (= lV3b77@level '0) (values lV3b76@var lV3b78@maps) (if (null? lV3b78@maps) (lV2d8e@syntax-violation '#f '"missing ellipsis in syntax form" lV3b75@src) (call-with-values (lambda () (lV3b1a@gen-ref lV3b75@src lV3b76@var (- lV3b77@level '1) (cdr lV3b78@maps))) (lambda (lV3b81@lV3b7e lV3b82@lV3b80) (let ((lV3b85@outer-maps lV3b82@lV3b80) (lV3b86@outer-var lV3b81@lV3b7e)) (let ((lV3b89@t (assq lV3b86@outer-var (car lV3b78@maps)))) (if lV3b89@t ((lambda (lV3b8b@b) (values (cdr lV3b8b@b) lV3b78@maps)) lV3b89@t) (let ((lV3b8d@inner-var (lV2a2f@gen-lexical 'tmp))) (values lV3b8d@inner-var (cons (cons (cons lV3b86@outer-var lV3b8d@inner-var) (car lV3b78@maps)) lV3b85@outer-maps)))))))))))) (set! lV3b1c@gen-append (lambda (lV3b71@x lV3b72@y) (if (fast-equal? lV3b72@y ''()) lV3b71@x (list 'append lV3b71@x lV3b72@y)))) (set! lV3b1e@gen-mappend (lambda (lV3b6d@e lV3b6e@map-env) (list 'apply '(primitive append) (lV3b20@gen-map lV3b6d@e lV3b6e@map-env)))) (set! lV3b20@gen-map (lambda (lV3b5b@e lV3b5c@map-env) (let ((lV3b5f@formals (map cdr lV3b5c@map-env)) (lV3b60@actuals (map (lambda (lV3b63@x) (list 'ref (car lV3b63@x))) lV3b5c@map-env))) (if (eq? (car lV3b5b@e) 'ref) (car lV3b60@actuals) (if (for-all (lambda (lV3b65@x) (and (eq? (car lV3b65@x) 'ref) (memq (cadr lV3b65@x) lV3b5f@formals))) (cdr lV3b5b@e)) (let ((lV3b67@args (map (let ((lV3b69@r (map cons lV3b5f@formals lV3b60@actuals))) (lambda (lV3b6b@x) (cdr (assq (cadr lV3b6b@x) lV3b69@r)))) (cdr lV3b5b@e)))) (cons 'map (cons (list 'primitive (car lV3b5b@e)) lV3b67@args))) (cons* 'map (list 'lambda lV3b5f@formals lV3b5b@e) lV3b60@actuals)))))) (set! lV3b22@gen-cons (lambda (lV3b4b@e lV3b4c@x lV3b4d@y lV3b4e@xnew lV3b4f@ynew) (let ((lV3b55@t (car lV3b4f@ynew))) (if (memv lV3b55@t '(quote)) (if (eq? (car lV3b4e@xnew) 'quote) (let ((lV3b57@xnew (cadr lV3b4e@xnew)) (lV3b58@ynew (cadr lV3b4f@ynew))) (if (and (eq? lV3b57@xnew lV3b4c@x) (eq? lV3b58@ynew lV3b4d@y)) (list 'quote lV3b4b@e) (list 'quote (cons lV3b57@xnew lV3b58@ynew)))) (if (null? (cadr lV3b4f@ynew)) (list 'list lV3b4e@xnew) (list 'cons lV3b4e@xnew lV3b4f@ynew))) (if (memv lV3b55@t '(list)) (cons 'list (cons lV3b4e@xnew (cdr lV3b4f@ynew))) (list 'cons lV3b4e@xnew lV3b4f@ynew)))))) (set! lV3b24@gen-vector (lambda (lV3b45@e lV3b46@ls lV3b47@lsnew) (if (eq? (car lV3b47@lsnew) 'quote) (if (eq? (cadr lV3b47@lsnew) lV3b46@ls) (list 'quote lV3b45@e) (list 'quote (list->vector (cadr lV3b47@lsnew)))) (if (eq? (car lV3b47@lsnew) 'list) (cons 'vector (cdr lV3b47@lsnew)) (list 'list->vector lV3b47@lsnew))))) (set! lV3b26@regen (lambda (lV3b3f@x) (let ((lV3b41@t (car lV3b3f@x))) (if (memv lV3b41@t '(ref)) (cadr lV3b3f@x) (if (memv lV3b41@t '(primitive)) (list 'primitive (cadr lV3b3f@x)) (if (memv lV3b41@t '(quote)) (list 'quote (cadr lV3b3f@x)) (if (memv lV3b41@t '(lambda)) (lV2a0a@lV2936@build-lambda '#f (cadr lV3b3f@x) (lV3b26@regen (caddr lV3b3f@x))) (if (memv lV3b41@t '(map)) (let ((lV3b43@ls (map lV3b26@regen (cdr lV3b3f@x)))) (cons '(primitive ellipsis-map) lV3b43@ls)) (cons (list 'primitive (car lV3b3f@x)) (map lV3b26@regen (cdr lV3b3f@x))))))))))) (lambda (lV3b27@e lV3b28@r lV3b29@mr) (let ((lV3b2d@t lV3b27@e)) (let ((lV3b2f@ls/false (lV2cae@syntax-dispatch lV3b2d@t '(_ any)))) (if lV3b2f@ls/false (apply (lambda (lV3b31@x) (call-with-values (lambda () (lV3b18@gen-syntax lV3b27@e lV3b31@x lV3b28@r '() lV2cb0@ellipsis? '#f)) (lambda (lV3b37@lV3b34 lV3b38@lV3b36) (let ((lV3b3b@maps lV3b38@lV3b36) (lV3b3c@e lV3b37@lV3b34)) (lV3b26@regen lV3b3c@e))))) lV3b2f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3b2d@t)))))))) (set! lV4788@lV2cba@syntax-transformer lV2cba@syntax-transformer)) (begin (set! lV2cbc@core-macro-transformer (lambda (lV3c5f@name) (let ((lV3c61@t lV3c5f@name)) (if (memv lV3c61@t '(quote)) lV2c5e@quote-transformer (if (memv lV3c61@t '(lambda)) lV2c62@lambda-transformer (if (memv lV3c61@t '(case-lambda)) lV2c60@case-lambda-transformer (if (memv lV3c61@t '(letrec)) lV2c46@letrec-transformer (if (memv lV3c61@t '(letrec*)) lV2c48@letrec*-transformer (if (memv lV3c61@t '(let)) lV2c44@let-transformer (if (memv lV3c61@t '(if)) lV2c56@if-transformer (if (memv lV3c61@t '(and)) lV2c58@and-transformer (if (memv lV3c61@t '(or)) lV2c5a@or-transformer (if (memv lV3c61@t '(foreign-call)) lV2caa@foreign-call-transformer (if (memv lV3c61@t '(syntax-case)) lV2cb6@syntax-case-transformer (if (memv lV3c61@t '(syntax)) lV2cba@syntax-transformer (if (memv lV3c61@t '(type-descriptor)) lV2c4c@type-descriptor-transformer (if (memv lV3c61@t '(record-type-descriptor)) lV2c4e@record-type-descriptor-transformer (if (memv lV3c61@t '(record-constructor-descriptor)) lV2c50@record-constructor-descriptor-transformer (if (memv lV3c61@t '(fluid-let-syntax)) lV2c4a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" lV3c5f@name)))))))))))))))))))) (set! lV4789@lV2cbc@core-macro-transformer lV2cbc@core-macro-transformer)) (begin (set! lV2cbe@symbol-macro (lambda (lV3c63@x lV3c64@set) (let ((lV3c67@t lV3c63@x)) (let ((lV3c69@ls/false (lV2cae@syntax-dispatch lV3c67@t '(_ any)))) (if (and lV3c69@ls/false (apply (lambda (lV3c6b@name) (and (lV2aa7@id? lV3c6b@name) (memq (lV2aa9@id->sym lV3c6b@name) lV3c64@set))) lV3c69@ls/false)) (apply (lambda (lV3c6d@name) (lV2c64@bless (list 'quote lV3c6d@name))) lV3c69@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3c67@t)))))) (set! lV478a@lV2cbe@symbol-macro lV2cbe@symbol-macro)) (begin (set! lV2cc0@macro-transformer (lambda (lV3c6f@x) (if (procedure? lV3c6f@x) lV3c6f@x (if (symbol? lV3c6f@x) (let ((lV3c71@t lV3c6f@x)) (if (memv lV3c71@t '(define-record-type)) lV2ca2@define-record-type-macro (if (memv lV3c71@t '(define-struct)) lV2ca0@define-struct-macro (if (memv lV3c71@t '(include)) lV2c96@include-macro (if (memv lV3c71@t '(cond)) lV2c92@cond-macro (if (memv lV3c71@t '(let)) lV2c6a@let-macro (if (memv lV3c71@t '(do)) lV2c8a@do-macro (if (memv lV3c71@t '(or)) lV2c8e@or-macro (if (memv lV3c71@t '(and)) lV2c90@and-macro (if (memv lV3c71@t '(let*)) lV2c8c@let*-macro (if (memv lV3c71@t '(let-values)) lV2c6c@let-values-macro (if (memv lV3c71@t '(let*-values)) lV2c6e@let*-values-macro (if (memv lV3c71@t '(syntax-rules)) lV2c9a@syntax-rules-macro (if (memv lV3c71@t '(quasiquote)) lV2c9c@quasiquote-macro (if (memv lV3c71@t '(quasisyntax)) lV2c9e@quasisyntax-macro (if (memv lV3c71@t '(with-syntax)) lV2c66@with-syntax-macro (if (memv lV3c71@t '(when)) lV2c52@when-macro (if (memv lV3c71@t '(unless)) lV2c54@unless-macro (if (memv lV3c71@t '(case)) lV2c5c@case-macro (if (memv lV3c71@t '(identifier-syntax)) lV2c88@identifier-syntax-macro (if (memv lV3c71@t '(time)) lV2c80@time-macro (if (memv lV3c71@t '(delay)) lV2c82@delay-macro (if (memv lV3c71@t '(assert)) lV2c84@assert-macro (if (memv lV3c71@t '(endianness)) lV2c86@endianness-macro (if (memv lV3c71@t '(guard)) lV2c7c@guard-macro (if (memv lV3c71@t '(define-enumeration)) lV2c7e@define-enumeration-macro (if (memv lV3c71@t '(trace-lambda)) lV2c70@trace-lambda-macro (if (memv lV3c71@t '(trace-define)) lV2c72@trace-define-macro (if (memv lV3c71@t '(trace-define-syntax)) lV2c74@trace-define-syntax-macro (if (memv lV3c71@t '(trace-let-syntax)) lV2c78@trace-let-syntax-macro (if (memv lV3c71@t '(trace-letrec-syntax)) lV2c7a@trace-letrec-syntax-macro (if (memv lV3c71@t '(define-condition-type)) lV2ca4@define-condition-type-macro (if (memv lV3c71@t '(parameterize)) lV2ca8@parameterize-macro (if (memv lV3c71@t '(include-into)) lV2c98@include-into-macro (if (memv lV3c71@t '(eol-style)) (lambda (lV3c73@x) (lV2cbe@symbol-macro lV3c73@x '(none lf cr crlf nel crnel ls))) (if (memv lV3c71@t '(error-handling-mode)) (lambda (lV3c75@x) (lV2cbe@symbol-macro lV3c75@x '(ignore raise replace))) (if (memv lV3c71@t '(buffer-mode)) (lambda (lV3c77@x) (lV2cbe@symbol-macro lV3c77@x '(none line block))) (if (memv lV3c71@t '(file-options)) lV2a22@file-options-macro (if (memv lV3c71@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) lV2ca6@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" lV3c6f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" lV3c6f@x))))) (set! lV478b@lV2cc0@macro-transformer lV2cc0@macro-transformer)) (begin (set! lV2cc2@local-macro-transformer (lambda (lV3c79@x) (car lV3c79@x))) (set! lV478c@lV2cc2@local-macro-transformer lV2cc2@local-macro-transformer)) (begin (set! lV2cc4@do-macro-call (lambda (lV3c7b@transformer lV3c7c@expr) (let ((lV3c7f@out (lV3c7b@transformer (lV2a91@add-mark lV2a8b@anti-mark lV3c7c@expr '#f)))) (begin (let lV3c83@f ((lV3c81@x lV3c7f@out)) (if (not (lV2a73@stx? lV3c81@x)) (if (pair? lV3c81@x) (begin (lV3c83@f (car lV3c81@x)) (lV3c83@f (cdr lV3c81@x))) (if (vector? lV3c81@x) (vector-for-each lV3c83@f lV3c81@x) (if (symbol? lV3c81@x) (lV2d8e@syntax-violation '#f '"raw symbol encountered in output of macro" lV3c7c@expr lV3c81@x) (void)))) (void))) (lV2a91@add-mark (lV2a89@gen-mark) lV3c7f@out lV3c7c@expr))))) (set! lV478d@lV2cc4@do-macro-call lV2cc4@do-macro-call)) (begin (set! lV2cc6@chi-macro (lambda (lV3c85@p lV3c86@e) (lV2cc4@do-macro-call (lV2cc0@macro-transformer lV3c85@p) lV3c86@e))) (set! lV478e@lV2cc6@chi-macro lV2cc6@chi-macro)) (begin (set! lV2cc8@chi-local-macro (lambda (lV3c89@p lV3c8a@e) (lV2cc4@do-macro-call (lV2cc2@local-macro-transformer lV3c89@p) lV3c8a@e))) (set! lV478f@lV2cc8@chi-local-macro lV2cc8@chi-local-macro)) (begin (set! lV2cca@chi-global-macro (lambda (lV3c8d@p lV3c8e@e) (let ((lV3c91@lib (car lV3c8d@p)) (lV3c92@loc (cdr lV3c8d@p))) (begin (lV28be@lV270d@visit-library lV3c91@lib) (let ((lV3c95@x (symbol-value lV3c92@loc))) (let ((lV3c97@transformer (if (procedure? lV3c95@x) lV3c95@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" lV3c95@x)))) (lV2cc4@do-macro-call lV3c97@transformer lV3c8e@e))))))) (set! lV4790@lV2cca@chi-global-macro lV2cca@chi-global-macro)) (begin (set! lV2ccc@chi-expr* (lambda (lV3c99@e* lV3c9a@r lV3c9b@mr) (if (null? lV3c99@e*) '() (let ((lV3c9f@e (lV2cd0@chi-expr (car lV3c99@e*) lV3c9a@r lV3c9b@mr))) (cons lV3c9f@e (lV2ccc@chi-expr* (cdr lV3c99@e*) lV3c9a@r lV3c9b@mr)))))) (set! lV4791@lV2ccc@chi-expr* lV2ccc@chi-expr*)) (begin (set! lV2cce@chi-application (lambda (lV3ca1@e lV3ca2@r lV3ca3@mr) (let ((lV3ca7@t lV3ca1@e)) (let ((lV3ca9@ls/false (lV2cae@syntax-dispatch lV3ca7@t '(any . each-any)))) (if lV3ca9@ls/false (apply (lambda (lV3cab@rator lV3cac@rands) (let ((lV3caf@rator (lV2cd0@chi-expr lV3cab@rator lV3ca2@r lV3ca3@mr))) (cons lV3caf@rator (lV2ccc@chi-expr* lV3cac@rands lV3ca2@r lV3ca3@mr)))) lV3ca9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3ca7@t)))))) (set! lV4792@lV2cce@chi-application lV2cce@chi-application)) (begin (set! lV2cd0@chi-expr (lambda (lV3cb1@e lV3cb2@r lV3cb3@mr) (call-with-values (lambda () (lV2ac9@syntax-type lV3cb1@e lV3cb2@r)) (lambda (lV3cbd@lV3cb8 lV3cbe@lV3cba lV3cbf@lV3cbc) (let ((lV3cc3@kwd lV3cbf@lV3cbc) (lV3cc4@value lV3cbe@lV3cba) (lV3cc5@type lV3cbd@lV3cb8)) (let ((lV3cc9@t lV3cc5@type)) (if (memv lV3cc9@t '(core-macro)) (let ((lV3ccb@transformer (lV2cbc@core-macro-transformer lV3cc4@value))) (lV3ccb@transformer lV3cb1@e lV3cb2@r lV3cb3@mr)) (if (memv lV3cc9@t '(global)) (let ((lV3ccd@lib (car lV3cc4@value))) (let ((lV3ccf@loc (cdr lV3cc4@value))) (begin ((lV2d16@inv-collector) lV3ccd@lib) lV3ccf@loc))) (if (memv lV3cc9@t '(core-prim)) (let ((lV3cd1@name lV3cc4@value)) (list 'primitive lV3cd1@name)) (if (memv lV3cc9@t '(call)) (lV2cce@chi-application lV3cb1@e lV3cb2@r lV3cb3@mr) (if (memv lV3cc9@t '(lexical)) (let ((lV3cd3@lex (lV2c38@lexical-var lV3cc4@value))) lV3cd3@lex) (if (memv lV3cc9@t '(global-macro global-macro!)) (lV2cd0@chi-expr (lV2cca@chi-global-macro lV3cc4@value lV3cb1@e) lV3cb2@r lV3cb3@mr) (if (memv lV3cc9@t '(local-macro local-macro!)) (lV2cd0@chi-expr (lV2cc8@chi-local-macro lV3cc4@value lV3cb1@e) lV3cb2@r lV3cb3@mr) (if (memv lV3cc9@t '(macro macro!)) (lV2cd0@chi-expr (lV2cc6@chi-macro lV3cc4@value lV3cb1@e) lV3cb2@r lV3cb3@mr) (if (memv lV3cc9@t '(constant)) (let ((lV3cd5@datum lV3cc4@value)) (list 'quote lV3cd5@datum)) (if (memv lV3cc9@t '(set!)) (lV2cd2@chi-set! lV3cb1@e lV3cb2@r lV3cb3@mr) (if (memv lV3cc9@t '(begin)) (let ((lV3cd7@t lV3cb1@e)) (let ((lV3cd9@ls/false (lV2cae@syntax-dispatch lV3cd7@t '(_ any . each-any)))) (if lV3cd9@ls/false (apply (lambda (lV3cdb@x lV3cdc@x*) (lV2a0c@lV2966@build-sequence '#f (lV2ccc@chi-expr* (cons lV3cdb@x lV3cdc@x*) lV3cb2@r lV3cb3@mr))) lV3cd9@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3cd7@t)))) (if (memv lV3cc9@t '(let-syntax letrec-syntax)) (let ((lV3cdf@t lV3cb1@e)) (let ((lV3ce1@ls/false (lV2cae@syntax-dispatch lV3cdf@t '(_ #(each (any any)) any . each-any)))) (if (and lV3ce1@ls/false (apply (lambda (lV3ce3@xlhs* lV3ce4@xrhs* lV3ce5@xbody lV3ce6@xbody*) (if (not (lV2aaf@valid-bound-ids? lV3ce3@xlhs*)) (lV2d8e@syntax-violation '#f '"invalid identifiers" lV3cb1@e) (void))) lV3ce1@ls/false)) (apply (lambda (lV3ceb@xlhs* lV3cec@xrhs* lV3ced@xbody lV3cee@xbody*) (let ((lV3cf3@xlab* (map lV2a33@gen-label lV3ceb@xlhs*))) (let ((lV3cf5@xrib (lV2a67@make-full-rib lV3ceb@xlhs* lV3cf3@xlab*))) (let ((lV3cf7@xb* (map (lambda (lV3cf9@x) (lV2adf@make-eval-transformer (lV2d08@expand-transformer (if (eq? lV3cc5@type 'let-syntax) lV3cf9@x (lV2a93@add-subst lV3cf5@xrib lV3cf9@x)) lV3cb3@mr))) lV3cec@xrhs*))) (lV2a0c@lV2966@build-sequence '#f (lV2ccc@chi-expr* (map (lambda (lV3cfb@x) (lV2a93@add-subst lV3cf5@xrib lV3cfb@x)) (cons lV3ced@xbody lV3cee@xbody*)) (append (map cons lV3cf3@xlab* lV3cf7@xb*) lV3cb2@r) (append (map cons lV3cf3@xlab* lV3cf7@xb*) lV3cb3@mr))))))) lV3ce1@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3cdf@t)))) (if (memv lV3cc9@t '(displaced-lexical)) (lV2d8e@syntax-violation '#f '"identifier out of context" lV3cb1@e) (if (memv lV3cc9@t '(syntax)) (lV2d8e@syntax-violation '#f '"reference to pattern variable outside a syntax form" lV3cb1@e) (if (memv lV3cc9@t '(define define-syntax module import library)) (lV2d8e@syntax-violation '#f (string-append (let ((lV3cfd@t lV3cc5@type)) (if (memv lV3cfd@t '(define)) '"a definition" (if (memv lV3cfd@t '(define-syntax)) '"a define-syntax" (if (memv lV3cfd@t '(module)) '"a module definition" (if (memv lV3cfd@t '(library)) '"a library definition" (if (memv lV3cfd@t '(import)) '"an import declaration" (if (memv lV3cfd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") lV3cb1@e) (if (memv lV3cc9@t '(mutable)) (lV2d8e@syntax-violation '#f '"attempt to reference an unexportable variable" lV3cb1@e) (lV2d8e@syntax-violation '#f '"invalid expression" lV3cb1@e))))))))))))))))))))))) (set! lV4793@lV2cd0@chi-expr lV2cd0@chi-expr)) (begin (set! lV2cd2@chi-set! (lambda (lV3cff@e lV3d00@r lV3d01@mr) (let ((lV3d05@t lV3cff@e)) (let ((lV3d07@ls/false (lV2cae@syntax-dispatch lV3d05@t '(_ any any)))) (if (and lV3d07@ls/false (apply (lambda (lV3d09@x lV3d0a@v) (lV2aa7@id? lV3d09@x)) lV3d07@ls/false)) (apply (lambda (lV3d0d@x lV3d0e@v) (call-with-values (lambda () (lV2ac9@syntax-type lV3d0d@x lV3d00@r)) (lambda (lV3d17@lV3d12 lV3d18@lV3d14 lV3d19@lV3d16) (let ((lV3d1d@kwd lV3d19@lV3d16) (lV3d1e@value lV3d18@lV3d14) (lV3d1f@type lV3d17@lV3d12)) (let ((lV3d23@t lV3d1f@type)) (if (memv lV3d23@t '(lexical)) (begin (lV2c3c@set-lexical-mutable! lV3d1e@value '#t) (list 'set! (lV2c38@lexical-var lV3d1e@value) (lV2cd0@chi-expr lV3d0e@v lV3d00@r lV3d01@mr))) (if (memv lV3d23@t '(core-prim)) (lV2d8e@syntax-violation '#f '"cannot modify imported core primitive" lV3cff@e) (if (memv lV3d23@t '(global)) (lV2d8e@syntax-violation '#f '"attempt to modify imported binding" lV3cff@e) (if (memv lV3d23@t '(global-macro!)) (lV2cd0@chi-expr (lV2cca@chi-global-macro lV3d1e@value lV3cff@e) lV3d00@r lV3d01@mr) (if (memv lV3d23@t '(local-macro!)) (lV2cd0@chi-expr (lV2cc8@chi-local-macro lV3d1e@value lV3cff@e) lV3d00@r lV3d01@mr) (if (memv lV3d23@t '(mutable)) (lV2d8e@syntax-violation '#f '"attempt to assign to an unexportable variable" lV3cff@e) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3cff@e)))))))))))) lV3d07@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3d05@t)))))) (set! lV4794@lV2cd2@chi-set! lV2cd2@chi-set!)) (begin (set! lV2cd4@verify-formals (lambda (lV3d25@fmls lV3d26@stx) (let ((lV3d29@t lV3d25@fmls)) (let ((lV3d2b@ls/false (lV2cae@syntax-dispatch lV3d29@t 'each-any))) (if lV3d2b@ls/false (apply (lambda (lV3d2d@x*) (if (not (lV2aaf@valid-bound-ids? lV3d2d@x*)) (lV2c68@invalid-fmls-error lV3d26@stx lV3d25@fmls) (void))) lV3d2b@ls/false) (let ((lV3d2f@t lV3d29@t)) (let ((lV3d31@ls/false (lV2cae@syntax-dispatch lV3d2f@t '#(each+ any () any)))) (if lV3d31@ls/false (apply (lambda (lV3d33@x* lV3d34@x) (if (not (lV2aaf@valid-bound-ids? (cons lV3d34@x lV3d33@x*))) (lV2c68@invalid-fmls-error lV3d26@stx lV3d25@fmls) (void))) lV3d31@ls/false) (let ((lV3d37@t lV3d2f@t)) (let ((lV3d39@ls/false (lV2cae@syntax-dispatch lV3d37@t '_))) (if lV3d39@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid syntax" lV3d26@stx)) lV3d39@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3d37@t)))))))))))) (set! lV4795@lV2cd4@verify-formals lV2cd4@verify-formals)) (begin (set! lV2cd6@chi-lambda-clause (lambda (lV3d3b@stx lV3d3c@fmls lV3d3d@body* lV3d3e@r lV3d3f@mr) (let ((lV3d45@t lV3d3c@fmls)) (let ((lV3d47@ls/false (lV2cae@syntax-dispatch lV3d45@t 'each-any))) (if lV3d47@ls/false (apply (lambda (lV3d49@x*) (begin (lV2cd4@verify-formals lV3d3c@fmls lV3d3b@stx) (let ((lV3d4b@lex* (map lV2a2f@gen-lexical lV3d49@x*)) (lV3d4c@lab* (map lV2a33@gen-label lV3d49@x*))) (values lV3d4b@lex* (lV2ce6@chi-internal (lV2a93@add-subst (lV2a67@make-full-rib lV3d49@x* lV3d4c@lab*) lV3d3d@body*) (lV2c40@add-lexicals lV3d4c@lab* lV3d4b@lex* lV3d3e@r) lV3d3f@mr))))) lV3d47@ls/false) (let ((lV3d4f@t lV3d45@t)) (let ((lV3d51@ls/false (lV2cae@syntax-dispatch lV3d4f@t '#(each+ any () any)))) (if lV3d51@ls/false (apply (lambda (lV3d53@x* lV3d54@x) (begin (lV2cd4@verify-formals lV3d3c@fmls lV3d3b@stx) (let ((lV3d57@lex* (map lV2a2f@gen-lexical lV3d53@x*)) (lV3d58@lab* (map lV2a33@gen-label lV3d53@x*)) (lV3d59@lex (lV2a2f@gen-lexical lV3d54@x)) (lV3d5a@lab (lV2a33@gen-label lV3d54@x))) (values (append lV3d57@lex* lV3d59@lex) (lV2ce6@chi-internal (lV2a93@add-subst (lV2a67@make-full-rib (cons lV3d54@x lV3d53@x*) (cons lV3d5a@lab lV3d58@lab*)) lV3d3d@body*) (lV2c40@add-lexicals (cons lV3d5a@lab lV3d58@lab*) (cons lV3d59@lex lV3d57@lex*) lV3d3e@r) lV3d3f@mr))))) lV3d51@ls/false) (let ((lV3d5f@t lV3d4f@t)) (let ((lV3d61@ls/false (lV2cae@syntax-dispatch lV3d5f@t '_))) (if lV3d61@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid syntax" lV3d3c@fmls)) lV3d61@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3d5f@t)))))))))))) (set! lV4796@lV2cd6@chi-lambda-clause lV2cd6@chi-lambda-clause)) (begin (set! lV2cd8@chi-lambda-clause* (lambda (lV3d63@stx lV3d64@fmls* lV3d65@body** lV3d66@r lV3d67@mr) (if (null? lV3d64@fmls*) (values '() '()) (call-with-values (lambda () (lV2cd6@chi-lambda-clause lV3d63@stx (car lV3d64@fmls*) (car lV3d65@body**) lV3d66@r lV3d67@mr)) (lambda (lV3d71@lV3d6e lV3d72@lV3d70) (let ((lV3d75@b lV3d72@lV3d70) (lV3d76@a lV3d71@lV3d6e)) (call-with-values (lambda () (lV2cd8@chi-lambda-clause* lV3d63@stx (cdr lV3d64@fmls*) (cdr lV3d65@body**) lV3d66@r lV3d67@mr)) (lambda (lV3d7d@lV3d7a lV3d7e@lV3d7c) (let ((lV3d81@b* lV3d7e@lV3d7c) (lV3d82@a* lV3d7d@lV3d7a)) (values (cons lV3d76@a lV3d82@a*) (cons lV3d75@b lV3d81@b*))))))))))) (set! lV4797@lV2cd8@chi-lambda-clause* lV2cd8@chi-lambda-clause*)) (begin (set! lV2cda@chi-defun (lambda (lV3d85@x lV3d86@r lV3d87@mr) (let ((lV3d8b@fmls (car lV3d85@x)) (lV3d8c@body* (cdr lV3d85@x))) (call-with-values (lambda () (lV2cd6@chi-lambda-clause lV3d8b@fmls lV3d8b@fmls lV3d8c@body* lV3d86@r lV3d87@mr)) (lambda (lV3d93@lV3d90 lV3d94@lV3d92) (let ((lV3d97@body lV3d94@lV3d92) (lV3d98@fmls lV3d93@lV3d90)) (lV2a0a@lV2936@build-lambda '#f lV3d98@fmls lV3d97@body))))))) (set! lV4798@lV2cda@chi-defun lV2cda@chi-defun)) (begin (set! lV2cdc@chi-rhs (lambda (lV3d9b@rhs lV3d9c@r lV3d9d@mr) (let ((lV3da1@t (car lV3d9b@rhs))) (if (memv lV3da1@t '(defun)) (lV2cda@chi-defun (cdr lV3d9b@rhs) lV3d9c@r lV3d9d@mr) (if (memv lV3da1@t '(expr)) (let ((lV3da3@expr (cdr lV3d9b@rhs))) (lV2cd0@chi-expr lV3da3@expr lV3d9c@r lV3d9d@mr)) (if (memv lV3da1@t '(top-expr)) (let ((lV3da5@expr (cdr lV3d9b@rhs))) (lV2a0c@lV2966@build-sequence '#f (list (lV2cd0@chi-expr lV3da5@expr lV3d9c@r lV3d9d@mr) (lV2a0d@lV2968@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" lV3d9b@rhs))))))) (set! lV4799@lV2cdc@chi-rhs lV2cdc@chi-rhs)) (begin (set! lV2cde@expand-interaction-rhs*/init* (lambda (lV3da7@lhs* lV3da8@rhs* lV3da9@init* lV3daa@r lV3dab@mr) (let lV3db5@f ((lV3db1@lhs* lV3da7@lhs*) (lV3db2@rhs* lV3da8@rhs*)) (if (null? lV3db1@lhs*) (map (lambda (lV3db7@x) (lV2cd0@chi-expr lV3db7@x lV3daa@r lV3dab@mr)) lV3da9@init*) (let ((lV3db9@lhs (car lV3db1@lhs*)) (lV3dba@rhs (car lV3db2@rhs*))) (let ((lV3dbd@t (car lV3dba@rhs))) (if (memv lV3dbd@t '(defun)) (let ((lV3dbf@rhs (lV2cda@chi-defun (cdr lV3dba@rhs) lV3daa@r lV3dab@mr))) (cons (list 'set! lV3db9@lhs lV3dbf@rhs) (lV3db5@f (cdr lV3db1@lhs*) (cdr lV3db2@rhs*)))) (if (memv lV3dbd@t '(expr)) (let ((lV3dc1@rhs (lV2cd0@chi-expr (cdr lV3dba@rhs) lV3daa@r lV3dab@mr))) (cons (list 'set! lV3db9@lhs lV3dc1@rhs) (lV3db5@f (cdr lV3db1@lhs*) (cdr lV3db2@rhs*)))) (if (memv lV3dbd@t '(top-expr)) (let ((lV3dc3@e (lV2cd0@chi-expr (cdr lV3dba@rhs) lV3daa@r lV3dab@mr))) (cons lV3dc3@e (lV3db5@f (cdr lV3db1@lhs*) (cdr lV3db2@rhs*)))) (error 'expand-interaction '"invallid" lV3dba@rhs)))))))))) (set! lV479a@lV2cde@expand-interaction-rhs*/init* lV2cde@expand-interaction-rhs*/init*)) (begin (set! lV2ce0@chi-rhs* (lambda (lV3dc5@rhs* lV3dc6@r lV3dc7@mr) (let lV3dcd@f ((lV3dcb@ls lV3dc5@rhs*)) (if (null? lV3dcb@ls) '() (let ((lV3dcf@a (lV2cdc@chi-rhs (car lV3dcb@ls) lV3dc6@r lV3dc7@mr))) (cons lV3dcf@a (lV3dcd@f (cdr lV3dcb@ls)))))))) (set! lV479b@lV2ce0@chi-rhs* lV2ce0@chi-rhs*)) (begin (set! lV2ce2@find-bound=? (lambda (lV3dd1@x lV3dd2@lhs* lV3dd3@rhs*) (if (null? lV3dd2@lhs*) '#f (if (lV2aab@bound-id=? lV3dd1@x (car lV3dd2@lhs*)) (car lV3dd3@rhs*) (lV2ce2@find-bound=? lV3dd1@x (cdr lV3dd2@lhs*) (cdr lV3dd3@rhs*)))))) (set! lV479c@lV2ce2@find-bound=? lV2ce2@find-bound=?)) (begin (set! lV2ce4@find-dups (lambda (lV3dd7@ls) (let lV3ddd@f ((lV3dd9@ls lV3dd7@ls) (lV3dda@dups '())) (if (null? lV3dd9@ls) lV3dda@dups (let ((lV3ddf@t (lV2ce2@find-bound=? (car lV3dd9@ls) (cdr lV3dd9@ls) (cdr lV3dd9@ls)))) (if lV3ddf@t ((lambda (lV3de1@x) (lV3ddd@f (cdr lV3dd9@ls) (cons (list (car lV3dd9@ls) lV3de1@x) lV3dda@dups))) lV3ddf@t) (lV3ddd@f (cdr lV3dd9@ls) lV3dda@dups))))))) (set! lV479d@lV2ce4@find-dups lV2ce4@find-dups)) (begin (set! lV2ce6@chi-internal (lambda (lV3de3@e* lV3de4@r lV3de5@mr) (let ((lV3de9@rib (lV2a5b@make-empty-rib))) (call-with-values (lambda () (lV2d06@chi-body* (map (lambda (lV3dfb@x) (lV2a93@add-subst lV3de9@rib lV3dfb@x)) (lV2aa5@syntax->list lV3de3@e*)) lV3de4@r lV3de5@mr '() '() '() '() '() lV3de9@rib '#f)) (lambda (lV3dfd@lV3dec lV3dfe@lV3dee lV3dff@lV3df0 lV3e00@lV3df2 lV3e01@lV3df4 lV3e02@lV3df6 lV3e03@lV3df8 lV3e04@lV3dfa) (let ((lV3e0d@_exp* lV3e04@lV3dfa) (lV3e0e@kwd* lV3e03@lV3df8) (lV3e0f@mod** lV3e02@lV3df6) (lV3e10@rhs* lV3e01@lV3df4) (lV3e11@lex* lV3e00@lV3df2) (lV3e12@mr lV3dff@lV3df0) (lV3e13@r lV3dfe@lV3dee) (lV3e14@e* lV3dfd@lV3dec)) (begin (if (null? lV3e14@e*) (lV2d8e@syntax-violation '#f '"no expression in body" lV3e14@e*) (void)) (let ((lV3e1d@init* (lV2ccc@chi-expr* (append (apply append (reverse lV3e0f@mod**)) lV3e14@e*) lV3e13@r lV3e12@mr))) (let ((lV3e1f@rhs* (lV2ce0@chi-rhs* lV3e10@rhs* lV3e13@r lV3e12@mr))) (lV2a11@lV2970@build-letrec* '#f (reverse lV3e11@lex*) (reverse lV3e1f@rhs*) (lV2a0c@lV2966@build-sequence '#f lV3e1d@init*))))))))))) (set! lV479e@lV2ce6@chi-internal lV2ce6@chi-internal)) (begin (set! lV2ce8@parse-module (lambda (lV3e21@e) (let ((lV3e23@t lV3e21@e)) (let ((lV3e25@ls/false (lV2cae@syntax-dispatch lV3e23@t '(_ each-any . each-any)))) (if lV3e25@ls/false (apply (lambda (lV3e27@export* lV3e28@b*) (begin (if (not (for-all lV2aa7@id? lV3e27@export*)) (lV2d8e@syntax-violation '#f '"module exports must be identifiers" lV3e21@e) (void)) (values '#f (list->vector lV3e27@export*) lV3e28@b*))) lV3e25@ls/false) (let ((lV3e2b@t lV3e23@t)) (let ((lV3e2d@ls/false (lV2cae@syntax-dispatch lV3e2b@t '(_ any each-any . each-any)))) (if lV3e2d@ls/false (apply (lambda (lV3e2f@name lV3e30@export* lV3e31@b*) (begin (if (not (lV2aa7@id? lV3e2f@name)) (lV2d8e@syntax-violation '#f '"module name must be an identifier" lV3e21@e) (void)) (if (not (for-all lV2aa7@id? lV3e30@export*)) (lV2d8e@syntax-violation '#f '"module exports must be identifiers" lV3e21@e) (void)) (values lV3e2f@name (list->vector lV3e30@export*) lV3e31@b*))) lV3e2d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3e2b@t))))))))) (set! lV479f@lV2ce8@parse-module lV2ce8@parse-module)) (begin (set! lV2cf2@module-interface? (lambda (lV3e35@x) (and (simple-struct? lV3e35@x) (eq? (simple-struct-name lV3e35@x) 'module-interface)))) (set! lV47a0@lV2cf2@module-interface? lV2cf2@module-interface?)) (begin (set! lV2cf4@module-interface-first-mark (lambda (lV3e37@x) (simple-struct-ref lV3e37@x '0))) (set! lV47a1@lV2cf4@module-interface-first-mark lV2cf4@module-interface-first-mark)) (begin (set! lV2cf6@set-module-interface-first-mark! (lambda (lV3e39@x lV3e3a@val) (simple-struct-set! lV3e39@x '0 lV3e3a@val))) (set! lV47a2@lV2cf6@set-module-interface-first-mark! lV2cf6@set-module-interface-first-mark!)) (begin (set! lV2cf8@module-interface-exp-id-vec (lambda (lV3e3d@x) (simple-struct-ref lV3e3d@x '1))) (set! lV47a3@lV2cf8@module-interface-exp-id-vec lV2cf8@module-interface-exp-id-vec)) (begin (set! lV2cfa@set-module-interface-exp-id-vec! (lambda (lV3e3f@x lV3e40@val) (simple-struct-set! lV3e3f@x '1 lV3e40@val))) (set! lV47a4@lV2cfa@set-module-interface-exp-id-vec! lV2cfa@set-module-interface-exp-id-vec!)) (begin (set! lV2cfc@module-interface-exp-lab-vec (lambda (lV3e43@x) (simple-struct-ref lV3e43@x '2))) (set! lV47a5@lV2cfc@module-interface-exp-lab-vec lV2cfc@module-interface-exp-lab-vec)) (begin (set! lV2cfe@set-module-interface-exp-lab-vec! (lambda (lV3e45@x lV3e46@val) (simple-struct-set! lV3e45@x '2 lV3e46@val))) (set! lV47a6@lV2cfe@set-module-interface-exp-lab-vec! lV2cfe@set-module-interface-exp-lab-vec!)) (begin (set! lV2d00@dummy '3) (set! lV47a7@lV2d00@dummy lV2d00@dummy)) (begin (set! lV2d02@module-interface-exp-id* (lambda (lV3e49@iface lV3e4a@id) (let ((lV3e4e@diff-marks '#f)) (begin (set! lV3e4e@diff-marks (lambda (lV3e55@ls lV3e56@x) (begin (if (null? lV3e55@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((lV3e59@a (car lV3e55@ls))) (if (eq? lV3e59@a lV3e56@x) '() (cons lV3e59@a (lV3e4e@diff-marks (cdr lV3e55@ls) lV3e56@x))))))) (let ((lV3e4f@diff (lV3e4e@diff-marks (lV2a79@stx-mark* lV3e4a@id) (lV2cf4@module-interface-first-mark lV3e49@iface))) (lV3e50@id-vec (lV2cf8@module-interface-exp-id-vec lV3e49@iface))) (if (null? lV3e4f@diff) lV3e50@id-vec (vector-map (lambda (lV3e53@x) (make-simple-struct 'stx '5 (list (lV2a75@stx-expr lV3e53@x) (append lV3e4f@diff (lV2a79@stx-mark* lV3e53@x)) '() '()))) lV3e50@id-vec))))))) (set! lV47a8@lV2d02@module-interface-exp-id* lV2d02@module-interface-exp-id*)) (begin (set! lV2d04@chi-internal-module (lambda (lV3e5b@e lV3e5c@r lV3e5d@mr lV3e5e@lex* lV3e5f@rhs* lV3e60@mod** lV3e61@kwd*) (call-with-values (lambda () (lV2ce8@parse-module lV3e5b@e)) (lambda (lV3e6f@lV3e6a lV3e70@lV3e6c lV3e71@lV3e6e) (let ((lV3e75@e* lV3e71@lV3e6e) (lV3e76@exp-id* lV3e70@lV3e6c) (lV3e77@name lV3e6f@lV3e6a)) (let ((lV3e7b@rib (lV2a5b@make-empty-rib))) (let ((lV3e7d@e* (map (lambda (lV3e7f@x) (lV2a93@add-subst lV3e7b@rib lV3e7f@x)) (lV2aa5@syntax->list lV3e75@e*)))) (call-with-values (lambda () (lV2d06@chi-body* lV3e7d@e* lV3e5c@r lV3e5d@mr lV3e5e@lex* lV3e5f@rhs* lV3e60@mod** lV3e61@kwd* '() lV3e7b@rib '#f)) (lambda (lV3e91@lV3e82 lV3e92@lV3e84 lV3e93@lV3e86 lV3e94@lV3e88 lV3e95@lV3e8a lV3e96@lV3e8c lV3e97@lV3e8e lV3e98@lV3e90) (let ((lV3ea1@_exp* lV3e98@lV3e90) (lV3ea2@kwd* lV3e97@lV3e8e) (lV3ea3@mod** lV3e96@lV3e8c) (lV3ea4@rhs* lV3e95@lV3e8a) (lV3ea5@lex* lV3e94@lV3e88) (lV3ea6@mr lV3e93@lV3e86) (lV3ea7@r lV3e92@lV3e84) (lV3ea8@e* lV3e91@lV3e82)) (let ((lV3eb1@exp-lab* (vector-map (lambda (lV3eb5@x) (or (lV2abd@id->label (make-simple-struct 'stx '5 (list (lV2aa9@id->sym lV3eb5@x) (lV2a79@stx-mark* lV3eb5@x) (list lV3e7b@rib) '()))) (lV2d8e@syntax-violation '#f '"cannot find module export" lV3eb5@x))) lV3e76@exp-id*)) (lV3eb2@mod** (cons lV3ea8@e* lV3ea3@mod**))) (if (not lV3e77@name) (values lV3ea5@lex* lV3ea4@rhs* lV3e76@exp-id* lV3eb1@exp-lab* lV3ea7@r lV3ea6@mr lV3eb2@mod** lV3ea2@kwd*) (let ((lV3eb7@lab (lV2a33@gen-label 'module)) (lV3eb8@iface (make-simple-struct 'module-interface '4 (list (car (lV2a79@stx-mark* lV3e77@name)) (vector-map (lambda (lV3ebb@x) (make-simple-struct 'stx '5 (list (lV2a75@stx-expr lV3ebb@x) (lV2a79@stx-mark* lV3ebb@x) '() '()))) lV3e76@exp-id*) lV3eb1@exp-lab*)))) (values lV3ea5@lex* lV3ea4@rhs* (vector lV3e77@name) (vector lV3eb7@lab) (cons (cons lV3eb7@lab (cons '$module lV3eb8@iface)) lV3ea7@r) (cons (cons lV3eb7@lab (cons '$module lV3eb8@iface)) lV3ea6@mr) lV3eb2@mod** lV3ea2@kwd*)))))))))))))) (set! lV47a9@lV2d04@chi-internal-module lV2d04@chi-internal-module)) (begin (set! lV2d06@chi-body* (lambda (lV3ebd@e* lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ec3@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?) (if (null? lV3ebd@e*) (values lV3ebd@e* lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ec3@kwd* lV3ec4@exp*) (let ((lV3ed1@e (car lV3ebd@e*))) (call-with-values (lambda () (lV2ac9@syntax-type lV3ed1@e lV3ebe@r)) (lambda (lV3ed9@lV3ed4 lV3eda@lV3ed6 lV3edb@lV3ed8) (let ((lV3edf@kwd lV3edb@lV3ed8) (lV3ee0@value lV3eda@lV3ed6) (lV3ee1@type lV3ed9@lV3ed4)) (let ((lV3ee5@kwd* (if (lV2aa7@id? lV3edf@kwd) (cons lV3edf@kwd lV3ec3@kwd*) lV3ec3@kwd*))) (let ((lV3ee7@t lV3ee1@type)) (if (memv lV3ee7@t '(define)) (call-with-values (lambda () (lV2c30@parse-define lV3ed1@e)) (lambda (lV3eed@lV3eea lV3eee@lV3eec) (let ((lV3ef1@rhs lV3eee@lV3eec) (lV3ef2@id lV3eed@lV3eea)) (begin (if (lV2ab3@bound-id-member? lV3ef2@id lV3ee5@kwd*) (lV2d8e@syntax-violation '#f '"cannot redefine keyword" lV3ed1@e) (void)) (call-with-values (lambda () (lV2a37@gen-define-label+loc lV3ef2@id lV3ec5@rib)) (lambda (lV3ef9@lV3ef6 lV3efa@lV3ef8) (let ((lV3efd@lex lV3efa@lV3ef8) (lV3efe@lab lV3ef9@lV3ef6)) (begin (lV2a5d@extend-rib! lV3ec5@rib lV3ef2@id lV3efe@lab) (lV2d06@chi-body* (cdr lV3ebd@e*) (lV2c3e@add-lexical lV3efe@lab lV3efd@lex lV3ebe@r) lV3ebf@mr (cons lV3efd@lex lV3ec0@lex*) (cons lV3ef1@rhs lV3ec1@rhs*) lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?))))))))) (if (memv lV3ee7@t '(define-syntax)) (call-with-values (lambda () (lV2c32@parse-define-syntax lV3ed1@e)) (lambda (lV3f05@lV3f02 lV3f06@lV3f04) (let ((lV3f09@rhs lV3f06@lV3f04) (lV3f0a@id lV3f05@lV3f02)) (begin (if (lV2ab3@bound-id-member? lV3f0a@id lV3ee5@kwd*) (lV2d8e@syntax-violation '#f '"cannot redefine keyword" lV3ed1@e) (void)) (let ((lV3f0d@lab (lV2a39@gen-define-label lV3f0a@id lV3ec5@rib)) (lV3f0e@expanded-rhs (lV2d08@expand-transformer lV3f09@rhs lV3ebf@mr))) (begin (lV2a5d@extend-rib! lV3ec5@rib lV3f0a@id lV3f0d@lab) (let ((lV3f11@b (lV2adf@make-eval-transformer lV3f0e@expanded-rhs))) (lV2d06@chi-body* (cdr lV3ebd@e*) (cons (cons lV3f0d@lab lV3f11@b) lV3ebe@r) (cons (cons lV3f0d@lab lV3f11@b) lV3ebf@mr) lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?)))))))) (if (memv lV3ee7@t '(let-syntax letrec-syntax)) (let ((lV3f13@t lV3ed1@e)) (let ((lV3f15@ls/false (lV2cae@syntax-dispatch lV3f13@t '(_ #(each (any any)) . each-any)))) (if (and lV3f15@ls/false (apply (lambda (lV3f17@xlhs* lV3f18@xrhs* lV3f19@xbody*) (if (not (lV2aaf@valid-bound-ids? lV3f17@xlhs*)) (lV2d8e@syntax-violation '#f '"invalid identifiers" lV3ed1@e) (void))) lV3f15@ls/false)) (apply (lambda (lV3f1d@xlhs* lV3f1e@xrhs* lV3f1f@xbody*) (let ((lV3f23@xlab* (map lV2a33@gen-label lV3f1d@xlhs*))) (let ((lV3f25@xrib (lV2a67@make-full-rib lV3f1d@xlhs* lV3f23@xlab*))) (let ((lV3f27@xb* (map (lambda (lV3f29@x) (lV2adf@make-eval-transformer (lV2d08@expand-transformer (if (eq? lV3ee1@type 'let-syntax) lV3f29@x (lV2a93@add-subst lV3f25@xrib lV3f29@x)) lV3ebf@mr))) lV3f1e@xrhs*))) (lV2d06@chi-body* (append (map (lambda (lV3f2b@x) (lV2a93@add-subst lV3f25@xrib lV3f2b@x)) lV3f1f@xbody*) (cdr lV3ebd@e*)) (append (map cons lV3f23@xlab* lV3f27@xb*) lV3ebe@r) (append (map cons lV3f23@xlab* lV3f27@xb*) lV3ebf@mr) lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?))))) lV3f15@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3f13@t)))) (if (memv lV3ee7@t '(begin)) (let ((lV3f2d@t lV3ed1@e)) (let ((lV3f2f@ls/false (lV2cae@syntax-dispatch lV3f2d@t '(_ . each-any)))) (if lV3f2f@ls/false (apply (lambda (lV3f31@x*) (lV2d06@chi-body* (append lV3f31@x* (cdr lV3ebd@e*)) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?)) lV3f2f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3f2d@t)))) (if (memv lV3ee7@t '(global-macro global-macro!)) (lV2d06@chi-body* (cons (lV2a93@add-subst lV3ec5@rib (lV2cca@chi-global-macro lV3ee0@value lV3ed1@e)) (cdr lV3ebd@e*)) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?) (if (memv lV3ee7@t '(local-macro local-macro!)) (lV2d06@chi-body* (cons (lV2a93@add-subst lV3ec5@rib (lV2cc8@chi-local-macro lV3ee0@value lV3ed1@e)) (cdr lV3ebd@e*)) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?) (if (memv lV3ee7@t '(macro macro!)) (lV2d06@chi-body* (cons (lV2a93@add-subst lV3ec5@rib (lV2cc6@chi-macro lV3ee0@value lV3ed1@e)) (cdr lV3ebd@e*)) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?) (if (memv lV3ee7@t '(module)) (call-with-values (lambda () (lV2d04@chi-internal-module lV3ed1@e lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd*)) (lambda (lV3f43@lV3f34 lV3f44@lV3f36 lV3f45@lV3f38 lV3f46@lV3f3a lV3f47@lV3f3c lV3f48@lV3f3e lV3f49@lV3f40 lV3f4a@lV3f42) (let ((lV3f53@kwd* lV3f4a@lV3f42) (lV3f54@mod** lV3f49@lV3f40) (lV3f55@mr lV3f48@lV3f3e) (lV3f56@r lV3f47@lV3f3c) (lV3f57@m-exp-lab* lV3f46@lV3f3a) (lV3f58@m-exp-id* lV3f45@lV3f38) (lV3f59@rhs* lV3f44@lV3f36) (lV3f5a@lex* lV3f43@lV3f34)) (begin (vector-for-each (lambda (lV3f63@id lV3f64@lab) (lV2a5d@extend-rib! lV3ec5@rib lV3f63@id lV3f64@lab)) lV3f58@m-exp-id* lV3f57@m-exp-lab*) (lV2d06@chi-body* (cdr lV3ebd@e*) lV3f56@r lV3f55@mr lV3f5a@lex* lV3f59@rhs* lV3f54@mod** lV3f53@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?))))) (if (memv lV3ee7@t '(library)) (begin (lV2d70@library-expander (lV2abb@stx->datum lV3ed1@e)) (lV2d06@chi-body* (cdr lV3ebd@e*) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?)) (if (memv lV3ee7@t '(export)) (let ((lV3f67@t lV3ed1@e)) (let ((lV3f69@ls/false (lV2cae@syntax-dispatch lV3f67@t '(_ . each-any)))) (if lV3f69@ls/false (apply (lambda (lV3f6b@exp-decl*) (lV2d06@chi-body* (cdr lV3ebd@e*) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* (append lV3f6b@exp-decl* lV3ec4@exp*) lV3ec5@rib lV3ec6@top?)) lV3f69@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3f67@t)))) (if (memv lV3ee7@t '(import)) (let ((lV3f6e@module-import? '#f) (lV3f70@module-import '#f) (lV3f72@library-import '#f)) (begin (set! lV3f6e@module-import? (lambda (lV3fc1@e) (let ((lV3fc3@t lV3fc1@e)) (let ((lV3fc5@ls/false (lV2cae@syntax-dispatch lV3fc3@t '(_ any)))) (if (and lV3fc5@ls/false (apply (lambda (lV3fc7@id) (lV2aa7@id? lV3fc7@id)) lV3fc5@ls/false)) (apply (lambda (lV3fc9@id) '#t) lV3fc5@ls/false) (let ((lV3fcb@t lV3fc3@t)) (let ((lV3fcd@ls/false (lV2cae@syntax-dispatch lV3fcb@t '(_ . each-any)))) (if lV3fcd@ls/false (apply (lambda (lV3fcf@imp*) '#f) lV3fcd@ls/false) (let ((lV3fd1@t lV3fcb@t)) (let ((lV3fd3@ls/false (lV2cae@syntax-dispatch lV3fd1@t '_))) (if lV3fd3@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"malformed import form" lV3fc1@e)) lV3fd3@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3fd1@t)))))))))))) (set! lV3f70@module-import (lambda (lV3f9f@e lV3fa0@r) (let ((lV3fa3@t lV3f9f@e)) (let ((lV3fa5@ls/false (lV2cae@syntax-dispatch lV3fa3@t '(_ any)))) (if (and lV3fa5@ls/false (apply (lambda (lV3fa7@id) (lV2aa7@id? lV3fa7@id)) lV3fa5@ls/false)) (apply (lambda (lV3fa9@id) (call-with-values (lambda () (lV2ac9@syntax-type lV3fa9@id lV3fa0@r)) (lambda (lV3fb1@lV3fac lV3fb2@lV3fae lV3fb3@lV3fb0) (let ((lV3fb7@kwd lV3fb3@lV3fb0) (lV3fb8@value lV3fb2@lV3fae) (lV3fb9@type lV3fb1@lV3fac)) (let ((lV3fbd@t lV3fb9@type)) (if (memv lV3fbd@t '($module)) (let ((lV3fbf@iface lV3fb8@value)) (values (lV2d02@module-interface-exp-id* lV3fbf@iface lV3fa9@id) (lV2cfc@module-interface-exp-lab-vec lV3fbf@iface))) (lV2d8e@syntax-violation '#f '"invalid import" lV3f9f@e))))))) lV3fa5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3fa3@t)))))) (set! lV3f72@library-import (lambda (lV3f83@e) (let ((lV3f85@t lV3f83@e)) (let ((lV3f87@ls/false (lV2cae@syntax-dispatch lV3f85@t '(any . each-any)))) (if lV3f87@ls/false (apply (lambda (lV3f89@ctxt lV3f8a@imp*) (call-with-values (lambda () (lV2d10@parse-import-spec* (lV2d94@syntax->datum lV3f8a@imp*))) (lambda (lV3f91@lV3f8e lV3f92@lV3f90) (let ((lV3f95@subst-labels lV3f92@lV3f90) (lV3f96@subst-names lV3f91@lV3f8e)) (values (vector-map (lambda (lV3f99@name) (lV2a87@datum->stx lV3f89@ctxt lV3f99@name)) lV3f96@subst-names) lV3f95@subst-labels))))) lV3f87@ls/false) (let ((lV3f9b@t lV3f85@t)) (let ((lV3f9d@ls/false (lV2cae@syntax-dispatch lV3f9b@t '_))) (if lV3f9d@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid import form" lV3f83@e)) lV3f9d@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV3f9b@t))))))))) (begin (call-with-values (lambda () (if (lV3f6e@module-import? lV3ed1@e) (lV3f70@module-import lV3ed1@e lV3ebe@r) (lV3f72@library-import lV3ed1@e))) (lambda (lV3f77@lV3f74 lV3f78@lV3f76) (let ((lV3f7b@lab* lV3f78@lV3f76) (lV3f7c@id* lV3f77@lV3f74)) (vector-for-each (lambda (lV3f7f@id lV3f80@lab) (lV2a5d@extend-rib! lV3ec5@rib lV3f7f@id lV3f80@lab)) lV3f7c@id* lV3f7b@lab*)))) (lV2d06@chi-body* (cdr lV3ebd@e*) lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?)))) (if lV3ec6@top? (lV2d06@chi-body* (cdr lV3ebd@e*) lV3ebe@r lV3ebf@mr (cons (lV2a2f@gen-lexical 'dummy) lV3ec0@lex*) (cons (cons 'top-expr lV3ed1@e) lV3ec1@rhs*) lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp* lV3ec5@rib lV3ec6@top?) (values lV3ebd@e* lV3ebe@r lV3ebf@mr lV3ec0@lex* lV3ec1@rhs* lV3ec2@mod** lV3ee5@kwd* lV3ec4@exp*)))))))))))))))))))))) (set! lV47aa@lV2d06@chi-body* lV2d06@chi-body*)) (begin (set! lV2d08@expand-transformer (lambda (lV3fd5@expr lV3fd6@r) (let ((lV3fd9@rtc (lV2d14@make-collector))) (let ((lV3fdb@expanded-rhs (let ((lV3fe5@lV3fde lV2d16@inv-collector) (lV3fe6@lV3fe0 lV2d18@vis-collector) (lV3fe7@lV3fe2 lV3fd9@rtc) (lV3fe8@lV3fe4 (lambda (lV3fed@x) (values)))) (let ((lV3fef@swap (lambda () (begin (let ((lV3ff1@t (lV3fe5@lV3fde))) (begin (lV3fe5@lV3fde lV3fe7@lV3fe2) (set! lV3fe7@lV3fe2 lV3ff1@t))) (let ((lV3ff3@t (lV3fe6@lV3fe0))) (begin (lV3fe6@lV3fe0 lV3fe8@lV3fe4) (set! lV3fe8@lV3fe4 lV3ff3@t))))))) (dynamic-wind lV3fef@swap (lambda () (lV2cd0@chi-expr lV3fd5@expr lV3fd6@r lV3fd6@r)) lV3fef@swap))))) (begin (for-each (let ((lV3ff5@mark-visit (lV2d18@vis-collector))) (lambda (lV3ff7@x) (begin (lV28bd@lV270b@invoke-library lV3ff7@x) (lV3ff5@mark-visit lV3ff7@x)))) (lV3fd9@rtc)) lV3fdb@expanded-rhs))))) (set! lV47ab@lV2d08@expand-transformer lV2d08@expand-transformer)) (begin (set! lV2d0a@parse-exports (lambda (lV3ff9@exp*) (let lV4001@f ((lV3ffb@exp* lV3ff9@exp*) (lV3ffc@int* '()) (lV3ffd@ext* '())) (if (null? lV3ffb@exp*) (begin (if (not (lV2aaf@valid-bound-ids? lV3ffd@ext*)) (lV2d8e@syntax-violation 'export '"invalid exports" (lV2ce4@find-dups lV3ffd@ext*)) (void)) (values (map lV2d94@syntax->datum lV3ffd@ext*) lV3ffc@int*)) (let ((lV4003@t (car lV3ffb@exp*))) (let ((lV4005@ls/false (lV2cae@syntax-dispatch lV4003@t '(any . #(each (any any)))))) (if lV4005@ls/false (apply (lambda (lV4007@rename lV4008@i* lV4009@e*) (begin (if (not (and (eq? (lV2d94@syntax->datum lV4007@rename) 'rename) (for-all lV2aa7@id? lV4008@i*) (for-all lV2aa7@id? lV4009@e*))) (lV2d8e@syntax-violation 'export '"invalid export specifier" (car lV3ffb@exp*)) (void)) (lV4001@f (cdr lV3ffb@exp*) (append lV4008@i* lV3ffc@int*) (append lV4009@e* lV3ffd@ext*)))) lV4005@ls/false) (let ((lV400d@t lV4003@t)) (let ((lV400f@ls/false (lV2cae@syntax-dispatch lV400d@t 'any))) (if lV400f@ls/false (apply (lambda (lV4011@ie) (begin (if (not (lV2aa7@id? lV4011@ie)) (lV2d8e@syntax-violation 'export '"invalid export" lV4011@ie) (void)) (lV4001@f (cdr lV3ffb@exp*) (cons lV4011@ie lV3ffc@int*) (cons lV4011@ie lV3ffd@ext*)))) lV400f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV400d@t))))))))))) (set! lV47ac@lV2d0a@parse-exports lV2d0a@parse-exports)) (begin (set! lV2d0c@parse-library-name (lambda (lV4013@spec) (let ((lV4016@parse '#f)) (begin (set! lV4016@parse (lambda (lV4023@x) (let ((lV4025@t lV4023@x)) (let ((lV4027@ls/false (lV2cae@syntax-dispatch lV4025@t '(each-any)))) (if (and lV4027@ls/false (apply (lambda (lV4029@v*) (for-all (lambda (lV402b@x) (let ((lV402d@x (lV2d94@syntax->datum lV402b@x))) (and (integer? lV402d@x) (exact? lV402d@x)))) lV4029@v*)) lV4027@ls/false)) (apply (lambda (lV402f@v*) (values '() (map lV2d94@syntax->datum lV402f@v*))) lV4027@ls/false) (let ((lV4031@t lV4025@t)) (let ((lV4033@ls/false (lV2cae@syntax-dispatch lV4031@t '(any . any)))) (if (and lV4033@ls/false (apply (lambda (lV4035@x lV4036@rest) (symbol? (lV2d94@syntax->datum lV4035@x))) lV4033@ls/false)) (apply (lambda (lV4039@x lV403a@rest) (call-with-values (lambda () (lV4016@parse lV403a@rest)) (lambda (lV4041@lV403e lV4042@lV4040) (let ((lV4045@v* lV4042@lV4040) (lV4046@x* lV4041@lV403e)) (values (cons (lV2d94@syntax->datum lV4039@x) lV4046@x*) lV4045@v*))))) lV4033@ls/false) (let ((lV4049@t lV4031@t)) (let ((lV404b@ls/false (lV2cae@syntax-dispatch lV4049@t '()))) (if lV404b@ls/false (apply (lambda () (values '() '())) lV404b@ls/false) (let ((lV404d@t lV4049@t)) (let ((lV404f@ls/false (lV2cae@syntax-dispatch lV404d@t '_))) (if lV404f@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid library name" lV4013@spec)) lV404f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV404d@t))))))))))))))) (call-with-values (lambda () (lV4016@parse lV4013@spec)) (lambda (lV401b@lV4018 lV401c@lV401a) (let ((lV401f@ver* lV401c@lV401a) (lV4020@name* lV401b@lV4018)) (begin (if (null? lV4020@name*) (lV2d8e@syntax-violation '#f '"empty library name" lV4013@spec) (void)) (values lV4020@name* lV401f@ver*))))))))) (set! lV47ad@lV2d0c@parse-library-name lV2d0c@parse-library-name)) (begin (set! lV2d0e@parse-library (lambda (lV4051@e) (let ((lV4053@t lV4051@e)) (let ((lV4055@ls/false (lV2cae@syntax-dispatch lV4053@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and lV4055@ls/false (apply (lambda (lV4057@library lV4058@name* lV4059@export lV405a@exp* lV405b@import lV405c@imp* lV405d@b*) (and (eq? (lV2d94@syntax->datum lV4059@export) 'export) (eq? (lV2d94@syntax->datum lV405b@import) 'import) (eq? (lV2d94@syntax->datum lV4057@library) 'library))) lV4055@ls/false)) (apply (lambda (lV4065@library lV4066@name* lV4067@export lV4068@exp* lV4069@import lV406a@imp* lV406b@b*) (values lV4066@name* lV4068@exp* lV406a@imp* lV406b@b*)) lV4055@ls/false) (let ((lV4073@t lV4053@t)) (let ((lV4075@ls/false (lV2cae@syntax-dispatch lV4073@t '_))) (if lV4075@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"malformed library" lV4051@e)) lV4075@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV4073@t))))))))) (set! lV47ae@lV2d0e@parse-library lV2d0e@parse-library)) (begin (set! lV2d10@parse-import-spec* (let ((lV4078@idsyn? '#f) (lV407a@dup-error '#f) (lV407c@merge-substs '#f) (lV407e@exclude* '#f) (lV4080@find* '#f) (lV4082@rem* '#f) (lV4084@remove-dups '#f) (lV4086@parse-library-name '#f) (lV4088@import-library '#f) (lV408a@get-import '#f) (lV408c@add-imports! '#f)) (begin (set! lV4078@idsyn? (lambda (lV4281@x) (symbol? (lV2d94@syntax->datum lV4281@x)))) (set! lV407a@dup-error (lambda (lV427f@name) (lV2d8e@syntax-violation 'import '"two imports with different bindings" lV427f@name))) (set! lV407c@merge-substs (lambda (lV426d@s lV426e@subst) (let ((lV4272@insert-to-subst '#f)) (begin (set! lV4272@insert-to-subst (lambda (lV4273@a lV4274@subst) (let ((lV4277@name (car lV4273@a)) (lV4278@label (cdr lV4273@a))) (let ((lV427b@t (assq lV4277@name lV4274@subst))) (if lV427b@t ((lambda (lV427d@x) (if (eq? (cdr lV427d@x) lV4278@label) lV4274@subst (lV407a@dup-error lV4277@name))) lV427b@t) (cons lV4273@a lV4274@subst)))))) (if (null? lV426d@s) lV426e@subst (lV4272@insert-to-subst (car lV426d@s) (lV407c@merge-substs (cdr lV426d@s) lV426e@subst))))))) (set! lV407e@exclude* (lambda (lV423d@sym* lV423e@subst) (let ((lV4242@exclude '#f)) (begin (set! lV4242@exclude (lambda (lV425b@sym lV425c@subst) (if (null? lV425c@subst) (lV2d8e@syntax-violation 'import '"cannot rename unbound identifier" lV425b@sym) (if (eq? lV425b@sym (caar lV425c@subst)) (values (cdar lV425c@subst) (cdr lV425c@subst)) (let ((lV425f@a (car lV425c@subst))) (call-with-values (lambda () (lV4242@exclude lV425b@sym (cdr lV425c@subst))) (lambda (lV4265@lV4262 lV4266@lV4264) (let ((lV4269@subst lV4266@lV4264) (lV426a@old lV4265@lV4262)) (values lV426a@old (cons lV425f@a lV4269@subst)))))))))) (if (null? lV423d@sym*) (values '() lV423e@subst) (call-with-values (lambda () (lV4242@exclude (car lV423d@sym*) lV423e@subst)) (lambda (lV4247@lV4244 lV4248@lV4246) (let ((lV424b@subst lV4248@lV4246) (lV424c@old lV4247@lV4244)) (call-with-values (lambda () (lV407e@exclude* (cdr lV423d@sym*) lV424b@subst)) (lambda (lV4253@lV4250 lV4254@lV4252) (let ((lV4257@subst lV4254@lV4252) (lV4258@old* lV4253@lV4250)) (values (cons lV424c@old lV4258@old*) lV4257@subst)))))))))))) (set! lV4080@find* (lambda (lV4235@sym* lV4236@subst) (map (lambda (lV4239@x) (let ((lV423b@t (assq lV4239@x lV4236@subst))) (if lV423b@t (cdr lV423b@t) (lV2d8e@syntax-violation 'import '"cannot find identifier" lV4239@x)))) lV4235@sym*))) (set! lV4082@rem* (lambda (lV422d@sym* lV422e@subst) (let lV4233@f ((lV4231@subst lV422e@subst)) (if (null? lV4231@subst) '() (if (memq (caar lV4231@subst) lV422d@sym*) (lV4233@f (cdr lV4231@subst)) (cons (car lV4231@subst) (lV4233@f (cdr lV4231@subst)))))))) (set! lV4084@remove-dups (lambda (lV422b@ls) (if (null? lV422b@ls) '() (if (memq (car lV422b@ls) (cdr lV422b@ls)) (lV4084@remove-dups (cdr lV422b@ls)) (cons (car lV422b@ls) (lV4084@remove-dups (cdr lV422b@ls))))))) (set! lV4086@parse-library-name (lambda (lV4143@spec) (let ((lV4146@subversion? '#f) (lV4148@subversion-pred '#f) (lV414a@version-pred '#f)) (begin (set! lV4146@subversion? (lambda (lV4227@x) (let ((lV4229@x (lV2d94@syntax->datum lV4227@x))) (and (integer? lV4229@x) (exact? lV4229@x) (>= lV4229@x '0))))) (set! lV4148@subversion-pred (lambda (lV41c7@x*) (let ((lV41c9@t lV41c7@x*)) (let ((lV41cb@ls/false (lV2cae@syntax-dispatch lV41c9@t 'any))) (if (and lV41cb@ls/false (apply (lambda (lV41cd@n) (lV4146@subversion? lV41cd@n)) lV41cb@ls/false)) (apply (lambda (lV41cf@n) (lambda (lV41d1@x) (= lV41d1@x (lV2d94@syntax->datum lV41cf@n)))) lV41cb@ls/false) (let ((lV41d3@t lV41c9@t)) (let ((lV41d5@ls/false (lV2cae@syntax-dispatch lV41d3@t '(any . each-any)))) (if (and lV41d5@ls/false (apply (lambda (lV41d7@p? lV41d8@sub*) (eq? (lV2d94@syntax->datum lV41d7@p?) 'and)) lV41d5@ls/false)) (apply (lambda (lV41db@p? lV41dc@sub*) (let ((lV41df@p* (map lV4148@subversion-pred lV41dc@sub*))) (lambda (lV41e1@x) (for-all (lambda (lV41e3@p) (lV41e3@p lV41e1@x)) lV41df@p*)))) lV41d5@ls/false) (let ((lV41e5@t lV41d3@t)) (let ((lV41e7@ls/false (lV2cae@syntax-dispatch lV41e5@t '(any . each-any)))) (if (and lV41e7@ls/false (apply (lambda (lV41e9@p? lV41ea@sub*) (eq? (lV2d94@syntax->datum lV41e9@p?) 'or)) lV41e7@ls/false)) (apply (lambda (lV41ed@p? lV41ee@sub*) (let ((lV41f1@p* (map lV4148@subversion-pred lV41ee@sub*))) (lambda (lV41f3@x) (exists (lambda (lV41f5@p) (lV41f5@p lV41f3@x)) lV41f1@p*)))) lV41e7@ls/false) (let ((lV41f7@t lV41e5@t)) (let ((lV41f9@ls/false (lV2cae@syntax-dispatch lV41f7@t '(any any)))) (if (and lV41f9@ls/false (apply (lambda (lV41fb@p? lV41fc@sub) (eq? (lV2d94@syntax->datum lV41fb@p?) 'not)) lV41f9@ls/false)) (apply (lambda (lV41ff@p? lV4200@sub) (let ((lV4203@p (lV4148@subversion-pred lV4200@sub))) (lambda (lV4205@x) (not (lV4203@p lV4205@x))))) lV41f9@ls/false) (let ((lV4207@t lV41f7@t)) (let ((lV4209@ls/false (lV2cae@syntax-dispatch lV4207@t '(any any)))) (if (and lV4209@ls/false (apply (lambda (lV420b@p? lV420c@n) (and (eq? (lV2d94@syntax->datum lV420b@p?) '<=) (lV4146@subversion? lV420c@n))) lV4209@ls/false)) (apply (lambda (lV420f@p? lV4210@n) (lambda (lV4213@x) (<= lV4213@x (lV2d94@syntax->datum lV4210@n)))) lV4209@ls/false) (let ((lV4215@t lV4207@t)) (let ((lV4217@ls/false (lV2cae@syntax-dispatch lV4215@t '(any any)))) (if (and lV4217@ls/false (apply (lambda (lV4219@p? lV421a@n) (and (eq? (lV2d94@syntax->datum lV4219@p?) '>=) (lV4146@subversion? lV421a@n))) lV4217@ls/false)) (apply (lambda (lV421d@p? lV421e@n) (lambda (lV4221@x) (>= lV4221@x (lV2d94@syntax->datum lV421e@n)))) lV4217@ls/false) (let ((lV4223@t lV4215@t)) (let ((lV4225@ls/false (lV2cae@syntax-dispatch lV4223@t '_))) (if lV4225@ls/false (apply (lambda () (lV2d8e@syntax-violation 'import '"invalid sub-version spec" lV4143@spec lV41c7@x*)) lV4225@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV4223@t)))))))))))))))))))))))) (set! lV414a@version-pred (lambda (lV4177@x*) (let ((lV4179@t lV4177@x*)) (let ((lV417b@ls/false (lV2cae@syntax-dispatch lV4179@t '()))) (if lV417b@ls/false (apply (lambda () (lambda (lV417d@x) '#t)) lV417b@ls/false) (let ((lV417f@t lV4179@t)) (let ((lV4181@ls/false (lV2cae@syntax-dispatch lV417f@t '(any . each-any)))) (if (and lV4181@ls/false (apply (lambda (lV4183@c lV4184@ver*) (eq? (lV2d94@syntax->datum lV4183@c) 'and)) lV4181@ls/false)) (apply (lambda (lV4187@c lV4188@ver*) (let ((lV418b@p* (map lV414a@version-pred lV4188@ver*))) (lambda (lV418d@x) (for-all (lambda (lV418f@p) (lV418f@p lV418d@x)) lV418b@p*)))) lV4181@ls/false) (let ((lV4191@t lV417f@t)) (let ((lV4193@ls/false (lV2cae@syntax-dispatch lV4191@t '(any . each-any)))) (if (and lV4193@ls/false (apply (lambda (lV4195@c lV4196@ver*) (eq? (lV2d94@syntax->datum lV4195@c) 'or)) lV4193@ls/false)) (apply (lambda (lV4199@c lV419a@ver*) (let ((lV419d@p* (map lV414a@version-pred lV419a@ver*))) (lambda (lV419f@x) (exists (lambda (lV41a1@p) (lV41a1@p lV419f@x)) lV419d@p*)))) lV4193@ls/false) (let ((lV41a3@t lV4191@t)) (let ((lV41a5@ls/false (lV2cae@syntax-dispatch lV41a3@t '(any any)))) (if (and lV41a5@ls/false (apply (lambda (lV41a7@c lV41a8@ver) (eq? (lV2d94@syntax->datum lV41a7@c) 'not)) lV41a5@ls/false)) (apply (lambda (lV41ab@c lV41ac@ver) (let ((lV41af@p (lV414a@version-pred lV41ac@ver))) (lambda (lV41b1@x) (not (lV41af@p lV41b1@x))))) lV41a5@ls/false) (let ((lV41b3@t lV41a3@t)) (let ((lV41b5@ls/false (lV2cae@syntax-dispatch lV41b3@t 'each-any))) (if lV41b5@ls/false (apply (lambda (lV41b7@sub*) (let ((lV41b9@p* (map lV4148@subversion-pred lV41b7@sub*))) (lambda (lV41bb@x) (let lV41c1@f ((lV41bd@p* lV41b9@p*) (lV41be@x lV41bb@x)) (if (null? lV41bd@p*) '#t (if (null? lV41be@x) '#f (and ((car lV41bd@p*) (car lV41be@x)) (lV41c1@f (cdr lV41bd@p*) (cdr lV41be@x))))))))) lV41b5@ls/false) (let ((lV41c3@t lV41b3@t)) (let ((lV41c5@ls/false (lV2cae@syntax-dispatch lV41c3@t '_))) (if lV41c5@ls/false (apply (lambda () (lV2d8e@syntax-violation 'import '"invalid version spec" lV4143@spec lV4177@x*)) lV41c5@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV41c3@t))))))))))))))))))))) (let lV414d@f ((lV414b@x lV4143@spec)) (let ((lV414f@t lV414b@x)) (let ((lV4151@ls/false (lV2cae@syntax-dispatch lV414f@t '(each-any)))) (if lV4151@ls/false (apply (lambda (lV4153@version-spec*) (values '() (lV414a@version-pred lV4153@version-spec*))) lV4151@ls/false) (let ((lV4155@t lV414f@t)) (let ((lV4157@ls/false (lV2cae@syntax-dispatch lV4155@t '(any . any)))) (if (and lV4157@ls/false (apply (lambda (lV4159@x lV415a@x*) (lV4078@idsyn? lV4159@x)) lV4157@ls/false)) (apply (lambda (lV415d@x lV415e@x*) (call-with-values (lambda () (lV414d@f lV415e@x*)) (lambda (lV4165@lV4162 lV4166@lV4164) (let ((lV4169@pred lV4166@lV4164) (lV416a@name lV4165@lV4162)) (values (cons (lV2d94@syntax->datum lV415d@x) lV416a@name) lV4169@pred))))) lV4157@ls/false) (let ((lV416d@t lV4155@t)) (let ((lV416f@ls/false (lV2cae@syntax-dispatch lV416d@t '()))) (if lV416f@ls/false (apply (lambda () (values '() (lambda (lV4171@x) '#t))) lV416f@ls/false) (let ((lV4173@t lV416d@t)) (let ((lV4175@ls/false (lV2cae@syntax-dispatch lV4173@t '_))) (if lV4175@ls/false (apply (lambda () (lV2d8e@syntax-violation '#f '"invalid import spec" lV4143@spec)) lV4175@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV4173@t)))))))))))))))))) (set! lV4088@import-library (lambda (lV4133@spec*) (call-with-values (lambda () (lV4086@parse-library-name lV4133@spec*)) (lambda (lV4139@lV4136 lV413a@lV4138) (let ((lV413d@pred lV413a@lV4138) (lV413e@name lV4139@lV4136)) (begin (if (null? lV413e@name) (lV2d8e@syntax-violation 'import '"empty library name" lV4133@spec*) (void)) (let ((lV4141@lib (lV28b6@lV26fd@find-library-by-name lV413e@name))) (begin (if (not lV4141@lib) (lV2d8e@syntax-violation 'import '"cannot find library with required name" lV413e@name) (void)) (if (not (lV413d@pred (lV2890@lV26b1@library-version lV4141@lib))) (lV2d8e@syntax-violation 'import '"library does not satisfy version specification" lV4133@spec* lV4141@lib) (void)) ((lV2d1a@imp-collector) lV4141@lib) (lV2898@lV26c1@library-subst lV4141@lib))))))))) (set! lV408a@get-import (lambda (lV40a5@spec) (let ((lV40a7@t lV40a5@spec)) (let ((lV40a9@ls/false (lV2cae@syntax-dispatch lV40a7@t '(any . each-any)))) (if (and lV40a9@ls/false (apply (lambda (lV40ab@x lV40ac@x*) (not (memq (lV2d94@syntax->datum lV40ab@x) '(for rename except only prefix library)))) lV40a9@ls/false)) (apply (lambda (lV40af@x lV40b0@x*) (lV4088@import-library (cons lV40af@x lV40b0@x*))) lV40a9@ls/false) (let ((lV40b3@t lV40a7@t)) (let ((lV40b5@ls/false (lV2cae@syntax-dispatch lV40b3@t '(any any . #(each (any any)))))) (if (and lV40b5@ls/false (apply (lambda (lV40b7@rename lV40b8@isp lV40b9@old* lV40ba@new*) (and (eq? (lV2d94@syntax->datum lV40b7@rename) 'rename) (for-all lV4078@idsyn? lV40b9@old*) (for-all lV4078@idsyn? lV40ba@new*))) lV40b5@ls/false)) (apply (lambda (lV40bf@rename lV40c0@isp lV40c1@old* lV40c2@new*) (let ((lV40c7@subst (lV408a@get-import lV40c0@isp)) (lV40c8@old* (map lV2d94@syntax->datum lV40c1@old*)) (lV40c9@new* (map lV2d94@syntax->datum lV40c2@new*))) (let ((lV40cd@old-label* (lV4080@find* lV40c8@old* lV40c7@subst))) (let ((lV40cf@subst (lV4082@rem* lV40c8@old* lV40c7@subst))) (lV407c@merge-substs (map cons lV40c9@new* lV40cd@old-label*) lV40cf@subst))))) lV40b5@ls/false) (let ((lV40d1@t lV40b3@t)) (let ((lV40d3@ls/false (lV2cae@syntax-dispatch lV40d1@t '(any any . each-any)))) (if (and lV40d3@ls/false (apply (lambda (lV40d5@except lV40d6@isp lV40d7@sym*) (and (eq? (lV2d94@syntax->datum lV40d5@except) 'except) (for-all lV4078@idsyn? lV40d7@sym*))) lV40d3@ls/false)) (apply (lambda (lV40db@except lV40dc@isp lV40dd@sym*) (let ((lV40e1@subst (lV408a@get-import lV40dc@isp))) (lV4082@rem* (map lV2d94@syntax->datum lV40dd@sym*) lV40e1@subst))) lV40d3@ls/false) (let ((lV40e3@t lV40d1@t)) (let ((lV40e5@ls/false (lV2cae@syntax-dispatch lV40e3@t '(any any . each-any)))) (if (and lV40e5@ls/false (apply (lambda (lV40e7@only lV40e8@isp lV40e9@sym*) (and (eq? (lV2d94@syntax->datum lV40e7@only) 'only) (for-all lV4078@idsyn? lV40e9@sym*))) lV40e5@ls/false)) (apply (lambda (lV40ed@only lV40ee@isp lV40ef@sym*) (let ((lV40f3@subst (lV408a@get-import lV40ee@isp)) (lV40f4@sym* (map lV2d94@syntax->datum lV40ef@sym*))) (let ((lV40f7@sym* (lV4084@remove-dups lV40f4@sym*))) (let ((lV40f9@lab* (lV4080@find* lV40f7@sym* lV40f3@subst))) (map cons lV40f7@sym* lV40f9@lab*))))) lV40e5@ls/false) (let ((lV40fb@t lV40e3@t)) (let ((lV40fd@ls/false (lV2cae@syntax-dispatch lV40fb@t '(any any any)))) (if (and lV40fd@ls/false (apply (lambda (lV40ff@prefix lV4100@isp lV4101@p) (and (eq? (lV2d94@syntax->datum lV40ff@prefix) 'prefix) (lV4078@idsyn? lV4101@p))) lV40fd@ls/false)) (apply (lambda (lV4105@prefix lV4106@isp lV4107@p) (let ((lV410b@subst (lV408a@get-import lV4106@isp)) (lV410c@prefix (symbol->string (lV2d94@syntax->datum lV4107@p)))) (map (lambda (lV410f@x) (cons (string->symbol (string-append lV410c@prefix (symbol->string (car lV410f@x)))) (cdr lV410f@x))) lV410b@subst))) lV40fd@ls/false) (let ((lV4111@t lV40fb@t)) (let ((lV4113@ls/false (lV2cae@syntax-dispatch lV4111@t '(any each-any)))) (if (and lV4113@ls/false (apply (lambda (lV4115@library lV4116@spec*) (eq? (lV2d94@syntax->datum lV4115@library) 'library)) lV4113@ls/false)) (apply (lambda (lV4119@library lV411a@spec*) (lV4088@import-library lV411a@spec*)) lV4113@ls/false) (let ((lV411d@t lV4111@t)) (let ((lV411f@ls/false (lV2cae@syntax-dispatch lV411d@t '(any any . any)))) (if (and lV411f@ls/false (apply (lambda (lV4121@for lV4122@isp lV4123@rest) (eq? (lV2d94@syntax->datum lV4121@for) 'for)) lV411f@ls/false)) (apply (lambda (lV4127@for lV4128@isp lV4129@rest) (lV408a@get-import lV4128@isp)) lV411f@ls/false) (let ((lV412d@t lV411d@t)) (let ((lV412f@ls/false (lV2cae@syntax-dispatch lV412d@t 'any))) (if lV412f@ls/false (apply (lambda (lV4131@spec) (lV2d8e@syntax-violation 'import '"invalid import spec" lV4131@spec)) lV412f@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV412d@t))))))))))))))))))))))))))) (set! lV408c@add-imports! (lambda (lV4095@imp lV4096@h) (let ((lV4099@subst (lV408a@get-import lV4095@imp))) (for-each (lambda (lV409b@x) (let ((lV409d@name (car lV409b@x)) (lV409e@label (cdr lV409b@x))) (let ((lV40a1@t (hashtable-ref lV4096@h lV409d@name '#f))) (if lV40a1@t ((lambda (lV40a3@l) (if (not (eq? lV40a3@l lV409e@label)) (lV407a@dup-error lV409d@name) (void))) lV40a1@t) (hashtable-set! lV4096@h lV409d@name lV409e@label))))) lV4099@subst)))) (lambda (lV408d@imp*) (let lV4093@f ((lV408f@imp* lV408d@imp*) (lV4090@h (make-eq-hashtable))) (if (null? lV408f@imp*) (hashtable-entries lV4090@h) (begin (lV408c@add-imports! (car lV408f@imp*) lV4090@h) (lV4093@f (cdr lV408f@imp*) lV4090@h)))))))) (set! lV47af@lV2d10@parse-import-spec* lV2d10@parse-import-spec*)) (begin (set! lV2d12@make-top-rib (lambda (lV4283@names lV4284@labels) (let ((lV4287@rib (lV2a5b@make-empty-rib))) (begin (vector-for-each (lambda (lV4289@name lV428a@label) (begin (if (not (symbol? lV4289@name)) (error 'make-top-rib '"BUG: not a symbol" lV4289@name) (void)) (lV2a5f@extend-rib/nc! lV4287@rib (make-simple-struct 'stx '5 (list lV4289@name lV2a2b@top-mark* '() '())) lV428a@label))) lV4283@names lV4284@labels) lV4287@rib)))) (set! lV47b0@lV2d12@make-top-rib lV2d12@make-top-rib)) (begin (set! lV2d14@make-collector (lambda () (let ((lV428d@ls '())) (lambda lV4291 (let ((lV4292 (length lV4291))) (if (= lV4292 '0) (apply (lambda () lV428d@ls) lV4291) (if (= lV4292 '1) (apply (lambda (lV428f@x) (set! lV428d@ls (lV2a24@set-cons lV428f@x lV428d@ls))) lV4291) (error 'apply '"invalid arg count")))))))) (set! lV47b1@lV2d14@make-collector lV2d14@make-collector)) (begin (set! lV2d16@inv-collector (lV25f1@lV24d0@make-parameter (lambda lV4293@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (lV4295@x) (begin (if (not (procedure? lV4295@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" lV4295@x) (void)) lV4295@x)))) (set! lV47b2@lV2d16@inv-collector lV2d16@inv-collector)) (begin (set! lV2d18@vis-collector (lV25f1@lV24d0@make-parameter (lambda lV4297@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (lV4299@x) (begin (if (not (procedure? lV4299@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" lV4299@x) (void)) lV4299@x)))) (set! lV47b3@lV2d18@vis-collector lV2d18@vis-collector)) (begin (set! lV2d1a@imp-collector (lV25f1@lV24d0@make-parameter (lambda lV429b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (lV429d@x) (begin (if (not (procedure? lV429d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" lV429d@x) (void)) lV429d@x)))) (set! lV47b4@lV2d1a@imp-collector lV2d1a@imp-collector)) (begin (set! lV2d1c@chi-library-internal (lambda (lV429f@e* lV42a0@rib lV42a1@top?) (call-with-values (lambda () (lV2d06@chi-body* lV429f@e* '() '() '() '() '() '() '() lV42a0@rib lV42a1@top?)) (lambda (lV42b5@lV42a6 lV42b6@lV42a8 lV42b7@lV42aa lV42b8@lV42ac lV42b9@lV42ae lV42ba@lV42b0 lV42bb@lV42b2 lV42bc@lV42b4) (let ((lV42c5@exp* lV42bc@lV42b4) (lV42c6@_kwd* lV42bb@lV42b2) (lV42c7@mod** lV42ba@lV42b0) (lV42c8@rhs* lV42b9@lV42ae) (lV42c9@lex* lV42b8@lV42ac) (lV42ca@mr lV42b7@lV42aa) (lV42cb@r lV42b6@lV42a8) (lV42cc@e* lV42b5@lV42a6)) (values (append (apply append (reverse lV42c7@mod**)) lV42cc@e*) lV42cb@r lV42ca@mr (reverse lV42c9@lex*) (reverse lV42c8@rhs*) lV42c5@exp*)))))) (set! lV47b5@lV2d1c@chi-library-internal lV2d1c@chi-library-internal)) (begin (set! lV2d1e@chi-interaction-expr (lambda (lV42d5@e lV42d6@rib lV42d7@r) (call-with-values (lambda () (lV2d06@chi-body* (list lV42d5@e) lV42d7@r lV42d7@r '() '() '() '() '() lV42d6@rib '#t)) (lambda (lV42eb@lV42dc lV42ec@lV42de lV42ed@lV42e0 lV42ee@lV42e2 lV42ef@lV42e4 lV42f0@lV42e6 lV42f1@lV42e8 lV42f2@lV42ea) (let ((lV42fb@_exp* lV42f2@lV42ea) (lV42fc@_kwd* lV42f1@lV42e8) (lV42fd@mod** lV42f0@lV42e6) (lV42fe@rhs* lV42ef@lV42e4) (lV42ff@lex* lV42ee@lV42e2) (lV4300@mr lV42ed@lV42e0) (lV4301@r lV42ec@lV42de) (lV4302@e* lV42eb@lV42dc)) (let ((lV430b@e* (lV2cde@expand-interaction-rhs*/init* (reverse lV42ff@lex*) (reverse lV42fe@rhs*) (append (apply append (reverse lV42fd@mod**)) lV4302@e*) lV4301@r lV4300@mr))) (let ((lV430d@e (if (null? lV430b@e*) (lV2a0d@lV2968@build-void) (if (null? (cdr lV430b@e*)) (car lV430b@e*) (lV2a0c@lV2966@build-sequence '#f lV430b@e*))))) (values lV430d@e lV4301@r)))))))) (set! lV47b6@lV2d1e@chi-interaction-expr lV2d1e@chi-interaction-expr)) (begin (set! lV2d20@library-body-expander (lambda (lV430f@name lV4310@main-exp* lV4311@imp* lV4312@b* lV4313@top?) (let ((lV431a@itc '#f)) (begin (set! lV431a@itc (lV2d14@make-collector)) (let ((lV4323@lV431c lV2d1a@imp-collector) (lV4324@lV431e lV2d9e@top-level-context) (lV4325@lV4320 lV431a@itc) (lV4326@lV4322 '#f)) (let ((lV432b@swap (lambda () (begin (let ((lV432d@t (lV4323@lV431c))) (begin (lV4323@lV431c lV4325@lV4320) (set! lV4325@lV4320 lV432d@t))) (let ((lV432f@t (lV4324@lV431e))) (begin (lV4324@lV431e lV4326@lV4322) (set! lV4326@lV4322 lV432f@t))))))) (dynamic-wind lV432b@swap (lambda () (call-with-values (lambda () (lV2d10@parse-import-spec* lV4311@imp*)) (lambda (lV4335@lV4332 lV4336@lV4334) (let ((lV4339@subst-labels lV4336@lV4334) (lV433a@subst-names lV4335@lV4332)) (let ((lV433d@rib (lV2d12@make-top-rib lV433a@subst-names lV4339@subst-labels))) (let ((lV4340@wrap '#f)) (begin (set! lV4340@wrap (lambda (lV43bb@x) (make-simple-struct 'stx '5 (list lV43bb@x lV2a2b@top-mark* (list lV433d@rib) '())))) (let ((lV4341@b* (map lV4340@wrap lV4312@b*)) (lV4342@main-exp* (map lV4340@wrap lV4310@main-exp*)) (lV4343@rtc (lV2d14@make-collector)) (lV4344@vtc (lV2d14@make-collector))) (let ((lV4351@lV434a lV2d16@inv-collector) (lV4352@lV434c lV2d18@vis-collector) (lV4353@lV434e lV4343@rtc) (lV4354@lV4350 lV4344@vtc)) (let ((lV4359@swap (lambda () (begin (let ((lV435b@t (lV4351@lV434a))) (begin (lV4351@lV434a lV4353@lV434e) (set! lV4353@lV434e lV435b@t))) (let ((lV435d@t (lV4352@lV434c))) (begin (lV4352@lV434c lV4354@lV4350) (set! lV4354@lV4350 lV435d@t))))))) (dynamic-wind lV4359@swap (lambda () (call-with-values (lambda () (lV2d1c@chi-library-internal lV4341@b* lV433d@rib lV4313@top?)) (lambda (lV436b@lV4360 lV436c@lV4362 lV436d@lV4364 lV436e@lV4366 lV436f@lV4368 lV4370@lV436a) (let ((lV4377@internal-exp* lV4370@lV436a) (lV4378@rhs* lV436f@lV4368) (lV4379@lex* lV436e@lV4366) (lV437a@mr lV436d@lV4364) (lV437b@r lV436c@lV4362) (lV437c@init* lV436b@lV4360)) (call-with-values (lambda () (lV2d0a@parse-exports (append lV4342@main-exp* lV4377@internal-exp*))) (lambda (lV4387@lV4384 lV4388@lV4386) (let ((lV438b@exp-id* lV4388@lV4386) (lV438c@exp-name* lV4387@lV4384)) (begin (lV2a63@seal-rib! lV433d@rib) (let ((lV438f@init* (lV2ccc@chi-expr* lV437c@init* lV437b@r lV437a@mr))) (let ((lV4391@rhs* (lV2ce0@chi-rhs* lV4378@rhs* lV437b@r lV437a@mr))) (begin (lV2a65@unseal-rib! lV433d@rib) (let ((lV4393@loc* (map lV2a31@gen-global lV4379@lex*)) (lV4394@export-subst (lV2d78@make-export-subst lV438c@exp-name* lV438b@exp-id*))) (let ((lV4398@errstr '#f)) (begin (set! lV4398@errstr '"attempt to export mutated variable") (call-with-values (lambda () (lV2d7a@make-export-env/macros lV4379@lex* lV4393@loc* lV437b@r)) (lambda (lV439f@lV439a lV43a0@lV439c lV43a1@lV439e) (let ((lV43a5@macro* lV43a1@lV439e) (lV43a6@global* lV43a0@lV439c) (lV43a7@export-env lV439f@lV439a)) (begin (for-each (lambda (lV43ab@s) (let ((lV43ad@name (car lV43ab@s)) (lV43ae@label (cdr lV43ab@s))) (let ((lV43b1@p (assq lV43ae@label lV43a7@export-env))) (if lV43b1@p (let ((lV43b3@b (cdr lV43b1@p))) (let ((lV43b5@type (car lV43b3@b))) (if (eq? lV43b5@type 'mutable) (lV2d8e@syntax-violation 'export lV4398@errstr lV43ad@name) (void)))) (void))))) lV4394@export-subst) (let ((lV43b7@invoke-body (lV2a12@lV2972@build-library-letrec* '#f lV430f@name lV4379@lex* lV4393@loc* lV4391@rhs* (if (null? lV438f@init*) (lV2a0d@lV2968@build-void) (lV2a0c@lV2966@build-sequence '#f lV438f@init*)))) (lV43b8@invoke-definitions (map lV2a09@lV28c5@build-global-define (map cdr lV43a6@global*)))) (values (lV431a@itc) (lV4343@rtc) (lV4344@vtc) (lV2a0c@lV2966@build-sequence '#f (append lV43b8@invoke-definitions (list lV43b7@invoke-body))) lV43a5@macro* lV4394@export-subst lV43a7@export-env)))))))))))))))))))) lV4359@swap))))))))))) lV432b@swap))))))) (set! lV47b7@lV2d20@library-body-expander lV2d20@library-body-expander)) (begin (set! lV2d22@core-library-expander (lambda (lV43bd@e lV43be@verify-name) (call-with-values (lambda () (lV2d0e@parse-library lV43bd@e)) (lambda (lV43c9@lV43c2 lV43ca@lV43c4 lV43cb@lV43c6 lV43cc@lV43c8) (let ((lV43d1@b* lV43cc@lV43c8) (lV43d2@imp* lV43cb@lV43c6) (lV43d3@exp* lV43ca@lV43c4) (lV43d4@name* lV43c9@lV43c2)) (call-with-values (lambda () (lV2d0c@parse-library-name lV43d4@name*)) (lambda (lV43dd@lV43da lV43de@lV43dc) (let ((lV43e1@ver lV43de@lV43dc) (lV43e2@name lV43dd@lV43da)) (begin (lV43be@verify-name lV43e2@name) (call-with-values (lambda () (lV2d20@library-body-expander lV43e2@name lV43d3@exp* lV43d2@imp* lV43d1@b* '#f)) (lambda (lV43f3@lV43e6 lV43f4@lV43e8 lV43f5@lV43ea lV43f6@lV43ec lV43f7@lV43ee lV43f8@lV43f0 lV43f9@lV43f2) (let ((lV4401@export-env lV43f9@lV43f2) (lV4402@export-subst lV43f8@lV43f0) (lV4403@visit-code lV43f7@lV43ee) (lV4404@invoke-code lV43f6@lV43ec) (lV4405@visit-req* lV43f5@lV43ea) (lV4406@invoke-req* lV43f4@lV43e8) (lV4407@imp* lV43f3@lV43e6)) (values lV43e2@name lV43e1@ver lV4407@imp* lV4406@invoke-req* lV4405@visit-req* lV4404@invoke-code lV4403@visit-code lV4402@export-subst lV4401@export-env))))))))))))) (set! lV47b8@lV2d22@core-library-expander lV2d22@core-library-expander)) (begin (set! lV2d24@parse-top-level-program (lambda (lV440f@e*) (let ((lV4411@t lV440f@e*)) (let ((lV4413@ls/false (lV2cae@syntax-dispatch lV4411@t '((any . each-any) . each-any)))) (if (and lV4413@ls/false (apply (lambda (lV4415@import lV4416@imp* lV4417@b*) (eq? (lV2d94@syntax->datum lV4415@import) 'import)) lV4413@ls/false)) (apply (lambda (lV441b@import lV441c@imp* lV441d@b*) (values lV441c@imp* lV441d@b*)) lV4413@ls/false) (let ((lV4421@t lV4411@t)) (let ((lV4423@ls/false (lV2cae@syntax-dispatch lV4421@t '((any . any) . any)))) (if (and lV4423@ls/false (apply (lambda (lV4425@import lV4426@x lV4427@y) (eq? (lV2d94@syntax->datum lV4425@import) 'import)) lV4423@ls/false)) (apply (lambda (lV442b@import lV442c@x lV442d@y) (lV2d8e@syntax-violation 'expander '"invalid syntax of top-level program" (lV2aa1@syntax-car lV440f@e*))) lV4423@ls/false) (let ((lV4431@t lV4421@t)) (let ((lV4433@ls/false (lV2cae@syntax-dispatch lV4431@t '_))) (if lV4433@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) lV4433@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV4431@t)))))))))))) (set! lV47b9@lV2d24@parse-top-level-program lV2d24@parse-top-level-program)) (begin (set! lV2d26@top-level-expander (lambda (lV4435@e*) (call-with-values (lambda () (lV2d24@parse-top-level-program lV4435@e*)) (lambda (lV443b@lV4438 lV443c@lV443a) (let ((lV443f@b* lV443c@lV443a) (lV4440@imp* lV443b@lV4438)) (call-with-values (lambda () (lV2d20@library-body-expander '() '() lV4440@imp* lV443f@b* '#t)) (lambda (lV4451@lV4444 lV4452@lV4446 lV4453@lV4448 lV4454@lV444a lV4455@lV444c lV4456@lV444e lV4457@lV4450) (let ((lV445f@export-env lV4457@lV4450) (lV4460@export-subst lV4456@lV444e) (lV4461@visit-code lV4455@lV444c) (lV4462@invoke-code lV4454@lV444a) (lV4463@visit-req* lV4453@lV4448) (lV4464@invoke-req* lV4452@lV4446) (lV4465@imp* lV4451@lV4444)) (values lV4464@invoke-req* lV4462@invoke-code))))))))) (set! lV47ba@lV2d26@top-level-expander lV2d26@top-level-expander)) (begin (set! lV2d28@rp (lV25ee@lV24ca@make-record-printer 'env (lambda (lV446d@x lV446e@p lV446f@wr) (display '"#<environment>" lV446e@p)))) (set! lV47bb@lV2d28@rp lV2d28@rp)) (begin (set! lV2d32@env? (lambda (lV4473@x) (and (simple-struct? lV4473@x) (eq? (simple-struct-name lV4473@x) 'env)))) (set! lV47bc@lV2d32@env? lV2d32@env?)) (begin (set! lV2d34@env-names (lambda (lV4475@x) (simple-struct-ref lV4475@x '0))) (set! lV47bd@lV2d34@env-names lV2d34@env-names)) (begin (set! lV2d36@set-env-names! (lambda (lV4477@x lV4478@val) (simple-struct-set! lV4477@x '0 lV4478@val))) (set! lV47be@lV2d36@set-env-names! lV2d36@set-env-names!)) (begin (set! lV2d38@env-labels (lambda (lV447b@x) (simple-struct-ref lV447b@x '1))) (set! lV47bf@lV2d38@env-labels lV2d38@env-labels)) (begin (set! lV2d3a@set-env-labels! (lambda (lV447d@x lV447e@val) (simple-struct-set! lV447d@x '1 lV447e@val))) (set! lV47c0@lV2d3a@set-env-labels! lV2d3a@set-env-labels!)) (begin (set! lV2d3c@env-itc (lambda (lV4481@x) (simple-struct-ref lV4481@x '2))) (set! lV47c1@lV2d3c@env-itc lV2d3c@env-itc)) (begin (set! lV2d3e@set-env-itc! (lambda (lV4483@x lV4484@val) (simple-struct-set! lV4483@x '2 lV4484@val))) (set! lV47c2@lV2d3e@set-env-itc! lV2d3e@set-env-itc!)) (begin (set! lV2d40@dummy '3) (set! lV47c3@lV2d40@dummy lV2d40@dummy)) (begin (set! lV2d42@rp (lV25ee@lV24ca@make-record-printer 'interaction-env (lambda (lV4487@x lV4488@p lV4489@wr) (display '"#<environment>" lV4488@p)))) (set! lV47c4@lV2d42@rp lV2d42@rp)) (begin (set! lV2d4c@interaction-env? (lambda (lV448d@x) (and (simple-struct? lV448d@x) (eq? (simple-struct-name lV448d@x) 'interaction-env)))) (set! lV47c5@lV2d4c@interaction-env? lV2d4c@interaction-env?)) (begin (set! lV2d4e@interaction-env-rib (lambda (lV448f@x) (simple-struct-ref lV448f@x '0))) (set! lV47c6@lV2d4e@interaction-env-rib lV2d4e@interaction-env-rib)) (begin (set! lV2d50@set-interaction-env-rib! (lambda (lV4491@x lV4492@val) (simple-struct-set! lV4491@x '0 lV4492@val))) (set! lV47c7@lV2d50@set-interaction-env-rib! lV2d50@set-interaction-env-rib!)) (begin (set! lV2d52@interaction-env-r (lambda (lV4495@x) (simple-struct-ref lV4495@x '1))) (set! lV47c8@lV2d52@interaction-env-r lV2d52@interaction-env-r)) (begin (set! lV2d54@set-interaction-env-r! (lambda (lV4497@x lV4498@val) (simple-struct-set! lV4497@x '1 lV4498@val))) (set! lV47c9@lV2d54@set-interaction-env-r! lV2d54@set-interaction-env-r!)) (begin (set! lV2d56@interaction-env-locs (lambda (lV449b@x) (simple-struct-ref lV449b@x '2))) (set! lV47ca@lV2d56@interaction-env-locs lV2d56@interaction-env-locs)) (begin (set! lV2d58@set-interaction-env-locs! (lambda (lV449d@x lV449e@val) (simple-struct-set! lV449d@x '2 lV449e@val))) (set! lV47cb@lV2d58@set-interaction-env-locs! lV2d58@set-interaction-env-locs!)) (begin (set! lV2d5a@dummy '3) (set! lV47cc@lV2d5a@dummy lV2d5a@dummy)) (begin (set! lV2d5c@interaction-environment-symbols (lambda () (lV2d64@environment-symbols (lV2d9c@interaction-environment)))) (set! lV47cd@lV2d5c@interaction-environment-symbols lV2d5c@interaction-environment-symbols)) (begin (set! lV2d5e@environment-bindings (lambda (lV44a1@e) (vector->list (vector-map (lambda (lV44a3@name lV44a4@label) (lV2d60@parse-binding (cons lV44a3@name (lV28bc@lV2709@imported-label->binding lV44a4@label)))) (lV2d34@env-names lV44a1@e) (lV2d38@env-labels lV44a1@e))))) (set! lV47ce@lV2d5e@environment-bindings lV2d5e@environment-bindings)) (begin (set! lV2d60@parse-binding (lambda (lV44a7@b) (cons (car lV44a7@b) (let ((lV44a9@t (cadr lV44a7@b))) (if (memv lV44a9@t '(core-prim global)) 'procedure (if (memv lV44a9@t '(core-macro macro global-macro)) 'syntax (if (memv lV44a9@t '($core-rtd)) 'record (if (eq? (car lV44a7@b) (cadr lV44a7@b)) 'syntax 'unknown)))))))) (set! lV47cf@lV2d60@parse-binding lV2d60@parse-binding)) (begin (set! lV2d62@environment? (lambda (lV44ab@x) (or (lV2d32@env? lV44ab@x) (lV2d4c@interaction-env? lV44ab@x)))) (set! lV47d0@lV2d62@environment? lV2d62@environment?)) (begin (set! lV2d64@environment-symbols (lambda (lV44ad@x) (if (lV2d32@env? lV44ad@x) (vector->list (lV2d34@env-names lV44ad@x)) (if (lV2d4c@interaction-env? lV44ad@x) (map values (lV2a45@rib-sym* (lV2d4e@interaction-env-rib lV44ad@x))) (assertion-violation 'environment-symbols '"not an environment" lV44ad@x))))) (set! lV47d1@lV2d64@environment-symbols lV2d64@environment-symbols)) (begin (set! lV2d66@environment (lambda lV44af@imp* (let ((lV44b1@itc (lV2d14@make-collector))) (let ((lV44b7@lV44b4 lV2d1a@imp-collector) (lV44b8@lV44b6 lV44b1@itc)) (let ((lV44bb@swap (lambda () (let ((lV44bd@t (lV44b7@lV44b4))) (begin (lV44b7@lV44b4 lV44b8@lV44b6) (set! lV44b8@lV44b6 lV44bd@t)))))) (dynamic-wind lV44bb@swap (lambda () (call-with-values (lambda () (lV2d10@parse-import-spec* lV44af@imp*)) (lambda (lV44c3@lV44c0 lV44c4@lV44c2) (let ((lV44c7@subst-labels lV44c4@lV44c2) (lV44c8@subst-names lV44c3@lV44c0)) (make-simple-struct 'env '4 (list lV44c8@subst-names lV44c7@subst-labels lV44b1@itc)))))) lV44bb@swap)))))) (set! lV47d2@lV2d66@environment lV2d66@environment)) (begin (set! lV2d68@null-environment (lambda (lV44cb@n) (begin (if (not (eqv? lV44cb@n '5)) (assertion-violation 'null-environment '"not 5" lV44cb@n) (void)) (lV2d66@environment '(psyntax null-environment-5))))) (set! lV47d3@lV2d68@null-environment lV2d68@null-environment)) (begin (set! lV2d6a@scheme-report-environment (lambda (lV44cd@n) (begin (if (not (eqv? lV44cd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" lV44cd@n) (void)) (lV2d66@environment '(psyntax scheme-report-environment-5))))) (set! lV47d4@lV2d6a@scheme-report-environment lV2d6a@scheme-report-environment)) (begin (set! lV2d6c@expand (lambda (lV44cf@x lV44d0@env) (if (lV2d32@env? lV44d0@env) (let ((lV44d3@rib (lV2d12@make-top-rib (lV2d34@env-names lV44d0@env) (lV2d38@env-labels lV44d0@env)))) (let ((lV44d5@x (make-simple-struct 'stx '5 (list lV44cf@x lV2a2b@top-mark* (list lV44d3@rib) '()))) (lV44d6@itc (lV2d3c@env-itc lV44d0@env)) (lV44d7@rtc (lV2d14@make-collector)) (lV44d8@vtc (lV2d14@make-collector))) (let ((lV44dd@x (let ((lV44ef@lV44e0 lV2d9e@top-level-context) (lV44f0@lV44e2 lV2d16@inv-collector) (lV44f1@lV44e4 lV2d18@vis-collector) (lV44f2@lV44e6 lV2d1a@imp-collector) (lV44f3@lV44e8 '#f) (lV44f4@lV44ea lV44d7@rtc) (lV44f5@lV44ec lV44d8@vtc) (lV44f6@lV44ee lV44d6@itc)) (let ((lV44ff@swap (lambda () (begin (let ((lV4501@t (lV44ef@lV44e0))) (begin (lV44ef@lV44e0 lV44f3@lV44e8) (set! lV44f3@lV44e8 lV4501@t))) (let ((lV4503@t (lV44f0@lV44e2))) (begin (lV44f0@lV44e2 lV44f4@lV44ea) (set! lV44f4@lV44ea lV4503@t))) (let ((lV4505@t (lV44f1@lV44e4))) (begin (lV44f1@lV44e4 lV44f5@lV44ec) (set! lV44f5@lV44ec lV4505@t))) (let ((lV4507@t (lV44f2@lV44e6))) (begin (lV44f2@lV44e6 lV44f6@lV44ee) (set! lV44f6@lV44ee lV4507@t))))))) (dynamic-wind lV44ff@swap (lambda () (lV2cd0@chi-expr lV44d5@x '() '())) lV44ff@swap))))) (begin (lV2a63@seal-rib! lV44d3@rib) (values lV44dd@x (lV44d7@rtc)))))) (if (lV2d4c@interaction-env? lV44d0@env) (let ((lV4509@rib (lV2d4e@interaction-env-rib lV44d0@env)) (lV450a@r (lV2d52@interaction-env-r lV44d0@env)) (lV450b@rtc (lV2d14@make-collector))) (let ((lV450f@x (make-simple-struct 'stx '5 (list lV44cf@x lV2a2b@top-mark* (list lV4509@rib) '())))) (call-with-values (lambda () (let ((lV4525@lV4516 lV2d9e@top-level-context) (lV4526@lV4518 lV2d16@inv-collector) (lV4527@lV451a lV2d18@vis-collector) (lV4528@lV451c lV2d1a@imp-collector) (lV4529@lV451e lV44d0@env) (lV452a@lV4520 lV450b@rtc) (lV452b@lV4522 (lV2d14@make-collector)) (lV452c@lV4524 (lV2d14@make-collector))) (let ((lV4535@swap (lambda () (begin (let ((lV4537@t (lV4525@lV4516))) (begin (lV4525@lV4516 lV4529@lV451e) (set! lV4529@lV451e lV4537@t))) (let ((lV4539@t (lV4526@lV4518))) (begin (lV4526@lV4518 lV452a@lV4520) (set! lV452a@lV4520 lV4539@t))) (let ((lV453b@t (lV4527@lV451a))) (begin (lV4527@lV451a lV452b@lV4522) (set! lV452b@lV4522 lV453b@t))) (let ((lV453d@t (lV4528@lV451c))) (begin (lV4528@lV451c lV452c@lV4524) (set! lV452c@lV4524 lV453d@t))))))) (dynamic-wind lV4535@swap (lambda () (lV2d1e@chi-interaction-expr lV450f@x lV4509@rib lV450a@r)) lV4535@swap)))) (lambda (lV453f@lV4512 lV4540@lV4514) (let ((lV4543@r^ lV4540@lV4514) (lV4544@e lV453f@lV4512)) (begin (lV2d54@set-interaction-env-r! lV44d0@env lV4543@r^) (values lV4544@e (lV450b@rtc)))))))) (assertion-violation 'expand '"not an environment" lV44d0@env))))) (set! lV47d5@lV2d6c@expand lV2d6c@expand)) (begin (set! lV2d6e@eval (lambda (lV4547@x lV4548@env) (begin (if (not (lV2d62@environment? lV4548@env)) (error 'eval '"not an environment" lV4548@env) (void)) (call-with-values (lambda () (lV2d6c@expand lV4547@x lV4548@env)) (lambda (lV454f@lV454c lV4550@lV454e) (let ((lV4553@invoke-req* lV4550@lV454e) (lV4554@x lV454f@lV454c)) (begin (for-each lV28bd@lV270b@invoke-library lV4553@invoke-req*) (eval-core (lV2647@lV25ff@expanded->core lV4554@x))))))))) (set! lV47d6@lV2d6e@eval lV2d6e@eval)) (begin (set! lV2d70@library-expander (lambda lV45c5 (let ((lV45c6 (length lV45c5))) (if (= lV45c6 '3) (apply (lambda (lV4557@x lV4558@filename lV4559@verify-name) (let ((lV455e@build-visit-code '#f) (lV4560@visit! '#f)) (begin (set! lV455e@build-visit-code (lambda (lV45b3@macro*) (if (null? lV45b3@macro*) (lV2a0d@lV2968@build-void) (lV2a0c@lV2966@build-sequence '#f (map (lambda (lV45b5@x) (let ((lV45b7@loc (car lV45b5@x)) (lV45b8@src (cddr lV45b5@x))) (list 'set! lV45b7@loc lV45b8@src))) lV45b3@macro*))))) (set! lV4560@visit! (lambda (lV45ab@macro*) (for-each (lambda (lV45ad@x) (let ((lV45af@loc (car lV45ad@x)) (lV45b0@proc (cadr lV45ad@x))) (set-symbol-value! lV45af@loc lV45b0@proc))) lV45ab@macro*))) (call-with-values (lambda () (lV2d22@core-library-expander lV4557@x lV4559@verify-name)) (lambda (lV4573@lV4562 lV4574@lV4564 lV4575@lV4566 lV4576@lV4568 lV4577@lV456a lV4578@lV456c lV4579@lV456e lV457a@lV4570 lV457b@lV4572) (let ((lV4585@export-env lV457b@lV4572) (lV4586@export-subst lV457a@lV4570) (lV4587@macro* lV4579@lV456e) (lV4588@invoke-code lV4578@lV456c) (lV4589@vis* lV4577@lV456a) (lV458a@inv* lV4576@lV4568) (lV458b@imp* lV4575@lV4566) (lV458c@ver lV4574@lV4564) (lV458d@name lV4573@lV4562)) (let ((lV4597@id (gensym)) (lV4598@name lV458d@name) (lV4599@ver lV458c@ver) (lV459a@imp* (map lV28c1@lV2713@library-spec lV458b@imp*)) (lV459b@vis* (map lV28c1@lV2713@library-spec lV4589@vis*)) (lV459c@inv* (map lV28c1@lV2713@library-spec lV458a@inv*)) (lV459d@visit-proc (lambda () (lV4560@visit! lV4587@macro*))) (lV459e@invoke-proc (lambda () (eval-core (lV2647@lV25ff@expanded->core lV4588@invoke-code)))) (lV459f@visit-code (lV455e@build-visit-code lV4587@macro*)) (lV45a0@invoke-code lV4588@invoke-code)) (begin (lV28bb@lV2707@install-library lV4597@id lV4598@name lV4599@ver lV459a@imp* lV459b@vis* lV459c@inv* lV4586@export-subst lV4585@export-env lV459d@visit-proc lV459e@invoke-proc lV459f@visit-code lV45a0@invoke-code '#t lV4558@filename) (values lV4597@id lV4598@name lV4599@ver lV459a@imp* lV459b@vis* lV459c@inv* lV45a0@invoke-code lV459f@visit-code lV4586@export-subst lV4585@export-env))))))))) lV45c5) (if (= lV45c6 '2) (apply (lambda (lV45bb@x lV45bc@filename) (lV2d70@library-expander lV45bb@x lV45bc@filename (lambda (lV45bf@x) (values)))) lV45c5) (if (= lV45c6 '1) (apply (lambda (lV45c1@x) (lV2d70@library-expander lV45c1@x '#f (lambda (lV45c3@x) (values)))) lV45c5) (error 'apply '"invalid arg count"))))))) (set! lV47d7@lV2d70@library-expander lV2d70@library-expander)) (begin (set! lV2d72@boot-library-expand (lambda (lV45c7@x) (call-with-values (lambda () (lV2d70@library-expander lV45c7@x)) (lambda (lV45dd@lV45ca lV45de@lV45cc lV45df@lV45ce lV45e0@lV45d0 lV45e1@lV45d2 lV45e2@lV45d4 lV45e3@lV45d6 lV45e4@lV45d8 lV45e5@lV45da lV45e6@lV45dc) (let ((lV45f1@export-env lV45e6@lV45dc) (lV45f2@export-subst lV45e5@lV45da) (lV45f3@visit-code lV45e4@lV45d8) (lV45f4@invoke-code lV45e3@lV45d6) (lV45f5@inv* lV45e2@lV45d4) (lV45f6@vis* lV45e1@lV45d2) (lV45f7@imp* lV45e0@lV45d0) (lV45f8@ver lV45df@lV45ce) (lV45f9@name lV45de@lV45cc) (lV45fa@id lV45dd@lV45ca)) (values lV45f9@name lV45f4@invoke-code lV45f2@export-subst lV45f1@export-env)))))) (set! lV47d8@lV2d72@boot-library-expand lV2d72@boot-library-expand)) (begin (set! lV2d74@rev-map-append (lambda (lV4605@f lV4606@ls lV4607@ac) (if (null? lV4606@ls) lV4607@ac (lV2d74@rev-map-append lV4605@f (cdr lV4606@ls) (cons (lV4605@f (car lV4606@ls)) lV4607@ac))))) (set! lV47d9@lV2d74@rev-map-append lV2d74@rev-map-append)) (begin (set! lV2d76@build-exports (lambda (lV460b@lex*+loc* lV460c@init*) (lV2a0c@lV2966@build-sequence '#f (cons (lV2a0d@lV2968@build-void) (lV2d74@rev-map-append (lambda (lV460f@x) (list 'set! (cdr lV460f@x) (car lV460f@x))) lV460b@lex*+loc* lV460c@init*))))) (set! lV47da@lV2d76@build-exports lV2d76@build-exports)) (begin (set! lV2d78@make-export-subst (lambda (lV4611@name* lV4612@id*) (map (lambda (lV4615@name lV4616@id) (let ((lV4619@label (lV2abd@id->label lV4616@id))) (begin (if (not lV4619@label) (lV2d8e@syntax-violation '#f '"cannot export unbound identifier" lV4616@id) (void)) (cons lV4615@name lV4619@label)))) lV4611@name* lV4612@id*))) (set! lV47db@lV2d78@make-export-subst lV2d78@make-export-subst)) (begin (set! lV2d7a@make-export-env/macros (lambda (lV461b@lex* lV461c@loc* lV461d@r) (let ((lV4622@lookup '#f)) (begin (set! lV4622@lookup (lambda (lV463f@x) (let lV4647@f ((lV4641@x lV463f@x) (lV4642@lex* lV461b@lex*) (lV4643@loc* lV461c@loc*)) (if (pair? lV4642@lex*) (if (eq? lV4641@x (car lV4642@lex*)) (car lV4643@loc*) (lV4647@f lV4641@x (cdr lV4642@lex*) (cdr lV4643@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let lV462b@f ((lV4623@r lV461d@r) (lV4624@env '()) (lV4625@global* '()) (lV4626@macro* '())) (if (null? lV4623@r) (values lV4624@env lV4625@global* lV4626@macro*) (let ((lV462d@x (car lV4623@r))) (let ((lV462f@label (car lV462d@x)) (lV4630@b (cdr lV462d@x))) (let ((lV4633@t (lV2ac3@binding-type lV4630@b))) (if (memv lV4633@t '(lexical)) (let ((lV4635@v (lV2ac5@binding-value lV4630@b))) (let ((lV4637@loc (lV4622@lookup (lV2c38@lexical-var lV4635@v))) (lV4638@type (if (lV2c3a@lexical-mutable? lV4635@v) 'mutable 'global))) (lV462b@f (cdr lV4623@r) (cons (cons* lV462f@label lV4638@type lV4637@loc) lV4624@env) (cons (cons (lV2c38@lexical-var lV4635@v) lV4637@loc) lV4625@global*) lV4626@macro*))) (if (memv lV4633@t '(local-macro)) (let ((lV463b@loc (gensym))) (lV462b@f (cdr lV4623@r) (cons (cons* lV462f@label 'global-macro lV463b@loc) lV4624@env) lV4625@global* (cons (cons lV463b@loc (lV2ac5@binding-value lV4630@b)) lV4626@macro*))) (if (memv lV4633@t '(local-macro!)) (let ((lV463d@loc (gensym))) (lV462b@f (cdr lV4623@r) (cons (cons* lV462f@label 'global-macro! lV463d@loc) lV4624@env) lV4625@global* (cons (cons lV463d@loc (lV2ac5@binding-value lV4630@b)) lV4626@macro*))) (if (memv lV4633@t '($rtd $module)) (lV462b@f (cdr lV4623@r) (cons lV462d@x lV4624@env) lV4625@global* lV4626@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (lV2ac3@binding-type lV4630@b) (lV2ac5@binding-value lV4630@b))))))))))))))) (set! lV47dc@lV2d7a@make-export-env/macros lV2d7a@make-export-env/macros)) (begin (set! lV2d7c@generate-temporaries (lambda (lV4649@ls) (let ((lV464b@t lV4649@ls)) (let ((lV464d@ls/false (lV2cae@syntax-dispatch lV464b@t 'each-any))) (if lV464d@ls/false (apply (lambda (lV464f@ls) (map (lambda (lV4651@x) (make-simple-struct 'stx '5 (list (let ((lV4653@x (lV2d94@syntax->datum lV4651@x))) (if (or (symbol? lV4653@x) (string? lV4653@x)) (gensym lV4653@x) (gensym 't))) lV2a2b@top-mark* '() '()))) lV464f@ls)) lV464d@ls/false) (let ((lV4655@t lV464b@t)) (let ((lV4657@ls/false (lV2cae@syntax-dispatch lV4655@t '_))) (if lV4657@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) lV4657@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV4655@t))))))))) (set! lV47dd@lV2d7c@generate-temporaries lV2d7c@generate-temporaries)) (begin (set! lV2d7e@free-identifier=? (lambda (lV4659@x lV465a@y) (if (lV2aa7@id? lV4659@x) (if (lV2aa7@id? lV465a@y) (lV2aad@free-id=? lV4659@x lV465a@y) (assertion-violation 'free-identifier=? '"not an identifier" lV465a@y)) (assertion-violation 'free-identifier=? '"not an identifier" lV4659@x)))) (set! lV47de@lV2d7e@free-identifier=? lV2d7e@free-identifier=?)) (begin (set! lV2d80@bound-identifier=? (lambda (lV465d@x lV465e@y) (if (lV2aa7@id? lV465d@x) (if (lV2aa7@id? lV465e@y) (lV2aab@bound-id=? lV465d@x lV465e@y) (assertion-violation 'bound-identifier=? '"not an identifier" lV465e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" lV465d@x)))) (set! lV47df@lV2d80@bound-identifier=? lV2d80@bound-identifier=?)) (begin (set! lV2d82@make-source-condition (lambda (lV4661@x) (let ((lV466b@lV4666 '#f) (lV466d@lV4668 '#f) (lV466f@lV4667 '#f) (lV4672@lV4665 '#f) (lV4674@make-source-condition '#f) (lV4676@lV4663 '#f) (lV4678@lV4664 '#f) (lV467a@source-condition? '#f) (lV467c@source-filename '#f) (lV467e@source-character '#f)) (begin (set! lV466b@lV4666 (make-record-type-descriptor '&source-information lV4ac1@lV4808@&condition-rtd 'lV4669 '#f '#f '#((immutable file-name) (immutable character)))) (set! lV466d@lV4668 '#f) (set! lV466f@lV4667 (make-record-constructor-descriptor lV466b@lV4666 lV4ac2@lV480a@&condition-rcd lV466d@lV4668)) (set! lV4672@lV4665 (record-predicate lV466b@lV4666)) (set! lV4674@make-source-condition (record-constructor lV466f@lV4667)) (set! lV4676@lV4663 (record-accessor lV466b@lV4666 '0)) (set! lV4678@lV4664 (record-accessor lV466b@lV4666 '1)) (set! lV467a@source-condition? (condition-predicate lV466b@lV4666)) (set! lV467c@source-filename (condition-accessor lV466b@lV4666 lV4676@lV4663)) (set! lV467e@source-character (condition-accessor lV466b@lV4666 lV4678@lV4664)) (if (pair? lV4661@x) (lV4674@make-source-condition (car lV4661@x) (cdr lV4661@x)) (condition)))))) (set! lV47e0@lV2d82@make-source-condition lV2d82@make-source-condition)) (begin (set! lV2d84@extract-position-condition (lambda (lV467f@x) (lV2d82@make-source-condition (lV2d86@expression-position lV467f@x)))) (set! lV47e1@lV2d84@extract-position-condition lV2d84@extract-position-condition)) (begin (set! lV2d86@expression-position (lambda (lV4681@x) (and (lV2a73@stx? lV4681@x) (let ((lV4683@x (lV2a75@stx-expr lV4681@x))) (and (lV25e6@lV24ba@annotation? lV4683@x) (lV25e7@lV24bc@annotation-source lV4683@x)))))) (set! lV47e2@lV2d86@expression-position lV2d86@expression-position)) (begin (set! lV2d88@assertion-error (lambda (lV4685@expr lV4686@pos) (raise (condition (lV4af1@lV48cc@make-assertion-violation) (lV4b03@lV48fe@make-who-condition 'assert) (lV4ac7@lV485f@make-message-condition '"assertion failed") (lV4af9@lV48e3@make-irritants-condition (list lV4685@expr)) (lV2d82@make-source-condition lV4686@pos))))) (set! lV47e3@lV2d88@assertion-error lV2d88@assertion-error)) (begin (set! lV2d8a@syntax-error (lambda (lV4689@x . lV468b@args) (begin (if (not (for-all string? lV468b@args)) (assertion-violation 'syntax-error '"invalid argument" lV468b@args) (void)) (raise (condition (lV4ac7@lV485f@make-message-condition (if (null? lV468b@args) '"invalid syntax" (apply string-append lV468b@args))) (lV4b25@lV495a@make-syntax-violation (lV2d94@syntax->datum lV4689@x) '#f) (lV2d84@extract-position-condition lV4689@x)))))) (set! lV47e4@lV2d8a@syntax-error lV2d8a@syntax-error)) (begin (set! lV2d8c@syntax-violation* (lambda (lV468d@who lV468e@msg lV468f@form lV4690@condition-object) (begin (if (not (string? lV468e@msg)) (assertion-violation 'syntax-violation '"message is not a string" lV468e@msg) (void)) (let ((lV4695@who (if (or (string? lV468d@who) (symbol? lV468d@who)) lV468d@who (if (not lV468d@who) (let ((lV4697@t lV468f@form)) (let ((lV4699@ls/false (lV2cae@syntax-dispatch lV4697@t 'any))) (if (and lV4699@ls/false (apply (lambda (lV469b@id) (lV2aa7@id? lV469b@id)) lV4699@ls/false)) (apply (lambda (lV469d@id) (lV2d94@syntax->datum lV469d@id)) lV4699@ls/false) (let ((lV469f@t lV4697@t)) (let ((lV46a1@ls/false (lV2cae@syntax-dispatch lV469f@t '(any . any)))) (if (and lV46a1@ls/false (apply (lambda (lV46a3@id lV46a4@rest) (lV2aa7@id? lV46a3@id)) lV46a1@ls/false)) (apply (lambda (lV46a7@id lV46a8@rest) (lV2d94@syntax->datum lV46a7@id)) lV46a1@ls/false) (let ((lV46ab@t lV469f@t)) (let ((lV46ad@ls/false (lV2cae@syntax-dispatch lV46ab@t '_))) (if lV46ad@ls/false (apply (lambda () '#f) lV46ad@ls/false) (lV2d8e@syntax-violation '#f '"invalid syntax" lV46ab@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" lV468d@who))))) (raise (condition (if lV4695@who (lV4b03@lV48fe@make-who-condition lV4695@who) (condition)) (lV4ac7@lV485f@make-message-condition lV468e@msg) lV4690@condition-object (lV2d84@extract-position-condition lV468f@form))))))) (set! lV47e5@lV2d8c@syntax-violation* lV2d8c@syntax-violation*)) (begin (set! lV2d8e@syntax-violation (lambda lV46bd (let ((lV46be (length lV46bd))) (if (= lV46be '3) (apply (lambda (lV46af@who lV46b0@msg lV46b1@form) (lV2d8e@syntax-violation lV46af@who lV46b0@msg lV46b1@form '#f)) lV46bd) (if (= lV46be '4) (apply (lambda (lV46b5@who lV46b6@msg lV46b7@form lV46b8@subform) (lV2d8c@syntax-violation* lV46b5@who lV46b6@msg lV46b7@form (lV4b25@lV495a@make-syntax-violation (lV2d94@syntax->datum lV46b7@form) (lV2d94@syntax->datum lV46b8@subform)))) lV46bd) (error 'apply '"invalid arg count")))))) (set! lV47e6@lV2d8e@syntax-violation lV2d8e@syntax-violation)) (begin (set! lV2d90@identifier? (lambda (lV46bf@x) (lV2aa7@id? lV46bf@x))) (set! lV47e7@lV2d90@identifier? lV2d90@identifier?)) (begin (set! lV2d92@datum->syntax (lambda (lV46c1@id lV46c2@datum) (if (lV2aa7@id? lV46c1@id) (lV2a87@datum->stx lV46c1@id lV46c2@datum) (assertion-violation 'datum->syntax '"not an identifier" lV46c1@id)))) (set! lV47e8@lV2d92@datum->syntax lV2d92@datum->syntax)) (begin (set! lV2d94@syntax->datum (lambda (lV46c5@x) (lV2abb@stx->datum lV46c5@x))) (set! lV47e9@lV2d94@syntax->datum lV2d94@syntax->datum)) (begin (set! lV2d96@ungensym-all (lambda (lV46c7@code) (if (pair? lV46c7@code) (cons (lV2d96@ungensym-all (car lV46c7@code)) (lV2d96@ungensym-all (cdr lV46c7@code))) (if (symbol? lV46c7@code) (ungensym lV46c7@code) lV46c7@code)))) (set! lV47ea@lV2d96@ungensym-all lV2d96@ungensym-all)) (begin (set! lV2d98@compile-r6rs-top-level (lambda (lV46c9@x*) (call-with-values (lambda () (lV2d26@top-level-expander lV46c9@x*)) (lambda (lV46cf@lV46cc lV46d0@lV46ce) (let ((lV46d3@invoke-code lV46d0@lV46ce) (lV46d4@lib* lV46cf@lV46cc)) (lambda () (begin (for-each lV28bd@lV270b@invoke-library lV46d4@lib*) (let ((lV46d7@expanded (lV2647@lV25ff@expanded->core lV46d3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (lV2d96@ungensym-all lV46d7@expanded)) (void)) (eval-core lV46d7@expanded)))))))))) (set! lV47eb@lV2d98@compile-r6rs-top-level lV2d98@compile-r6rs-top-level)) (begin (set! lV2d9a@pre-compile-r6rs-top-level (lambda (lV46d9@x*) (call-with-values (lambda () (lV2d26@top-level-expander lV46d9@x*)) (lambda (lV46df@lV46dc lV46e0@lV46de) (let ((lV46e3@invoke-code lV46e0@lV46de) (lV46e4@lib* lV46df@lV46dc)) (begin (for-each lV28bd@lV270b@invoke-library lV46e4@lib*) (lV25ef@lV24cc@compile-core (lV2647@lV25ff@expanded->core lV46e3@invoke-code)))))))) (set! lV47ec@lV2d9a@pre-compile-r6rs-top-level lV2d9a@pre-compile-r6rs-top-level)) (begin (set! lV2d9c@interaction-environment (let ((lV46e7@the-env '#f)) (lambda () (or lV46e7@the-env (let ((lV46e9@lib (lV28b6@lV26fd@find-library-by-name '(mosh interaction))) (lV46ea@rib (lV2a5b@make-empty-rib))) (begin (let ((lV46ed@subst (lV2898@lV26c1@library-subst lV46e9@lib))) (begin (lV2a47@set-rib-sym*! lV46ea@rib (map car lV46ed@subst)) (lV2a4b@set-rib-mark**! lV46ea@rib (map (lambda (lV46ef@x) lV2a2b@top-mark*) lV46ed@subst)) (lV2a4f@set-rib-label*! lV46ea@rib (map cdr lV46ed@subst)))) (let ((lV46f1@env (make-simple-struct 'interaction-env '4 (list lV46ea@rib '() '())))) (begin (set! lV46e7@the-env lV46f1@env) lV46f1@env)))))))) (set! lV47ed@lV2d9c@interaction-environment lV2d9c@interaction-environment)) (begin (set! lV2d9e@top-level-context (lV25f1@lV24d0@make-parameter '#f)) (set! lV47ee@lV2d9e@top-level-context lV2d9e@top-level-context)) (lV28b3@lV26f7@current-library-expander lV2d70@library-expander))
(begin (set! lV47fd@lV47f8 (unspecified)) (set! lV47ff@lV47fa (unspecified)) (set! lV4801@lV47f9 (unspecified)) (set! lV4804@&condition? (unspecified)) (set! lV4806@make-&condition (unspecified)) (set! lV4808@&condition-rtd (unspecified)) (set! lV480a@&condition-rcd (unspecified)) (set! lV4856@lV4851 (unspecified)) (set! lV4858@lV4853 (unspecified)) (set! lV485a@lV4852 (unspecified)) (set! lV485d@p? (unspecified)) (set! lV485f@make-message-condition (unspecified)) (set! lV4861@lV4850 (unspecified)) (set! lV4863@message-condition? (unspecified)) (set! lV4865@condition-message (unspecified)) (set! lV4867@&message-rtd (unspecified)) (set! lV4869@&message-rcd (unspecified)) (set! lV486f@lV486a (unspecified)) (set! lV4871@lV486c (unspecified)) (set! lV4873@lV486b (unspecified)) (set! lV4876@p? (unspecified)) (set! lV4878@make-warning (unspecified)) (set! lV487a@warning? (unspecified)) (set! lV487c@&warning-rtd (unspecified)) (set! lV487e@&warning-rcd (unspecified)) (set! lV4884@lV487f (unspecified)) (set! lV4886@lV4881 (unspecified)) (set! lV4888@lV4880 (unspecified)) (set! lV488b@p? (unspecified)) (set! lV488d@make-serious-condition (unspecified)) (set! lV488f@serious-condition? (unspecified)) (set! lV4891@&serious-rtd (unspecified)) (set! lV4893@&serious-rcd (unspecified)) (set! lV4899@lV4894 (unspecified)) (set! lV489b@lV4896 (unspecified)) (set! lV489d@lV4895 (unspecified)) (set! lV48a0@p? (unspecified)) (set! lV48a2@make-error (unspecified)) (set! lV48a4@error? (unspecified)) (set! lV48a6@&error-rtd (unspecified)) (set! lV48a8@&error-rcd (unspecified)) (set! lV48ae@lV48a9 (unspecified)) (set! lV48b0@lV48ab (unspecified)) (set! lV48b2@lV48aa (unspecified)) (set! lV48b5@p? (unspecified)) (set! lV48b7@make-violation (unspecified)) (set! lV48b9@violation? (unspecified)) (set! lV48bb@&violation-rtd (unspecified)) (set! lV48bd@&violation-rcd (unspecified)) (set! lV48c3@lV48be (unspecified)) (set! lV48c5@lV48c0 (unspecified)) (set! lV48c7@lV48bf (unspecified)) (set! lV48ca@p? (unspecified)) (set! lV48cc@make-assertion-violation (unspecified)) (set! lV48ce@assertion-violation? (unspecified)) (set! lV48d0@&assertion-rtd (unspecified)) (set! lV48d2@&assertion-rcd (unspecified)) (set! lV48da@lV48d5 (unspecified)) (set! lV48dc@lV48d7 (unspecified)) (set! lV48de@lV48d6 (unspecified)) (set! lV48e1@p? (unspecified)) (set! lV48e3@make-irritants-condition (unspecified)) (set! lV48e5@lV48d4 (unspecified)) (set! lV48e7@irritants-condition? (unspecified)) (set! lV48e9@condition-irritants (unspecified)) (set! lV48eb@&irritants-rtd (unspecified)) (set! lV48ed@&irritants-rcd (unspecified)) (set! lV48f5@lV48f0 (unspecified)) (set! lV48f7@lV48f2 (unspecified)) (set! lV48f9@lV48f1 (unspecified)) (set! lV48fc@p? (unspecified)) (set! lV48fe@make-who-condition (unspecified)) (set! lV4900@lV48ef (unspecified)) (set! lV4902@who-condition? (unspecified)) (set! lV4904@condition-who (unspecified)) (set! lV4906@&who-rtd (unspecified)) (set! lV4908@&who-rcd (unspecified)) (set! lV490e@lV4909 (unspecified)) (set! lV4910@lV490b (unspecified)) (set! lV4912@lV490a (unspecified)) (set! lV4915@p? (unspecified)) (set! lV4917@make-non-continuable-violation (unspecified)) (set! lV4919@non-continuable-violation? (unspecified)) (set! lV491b@&non-continuable-rtd (unspecified)) (set! lV491d@&non-continuable-rcd (unspecified)) (set! lV4923@lV491e (unspecified)) (set! lV4925@lV4920 (unspecified)) (set! lV4927@lV491f (unspecified)) (set! lV492a@p? (unspecified)) (set! lV492c@make-implementation-restriction-violation (unspecified)) (set! lV492e@implementation-restriction-violation? (unspecified)) (set! lV4930@&implementation-restriction-rtd (unspecified)) (set! lV4932@&implementation-restriction-rcd (unspecified)) (set! lV4938@lV4933 (unspecified)) (set! lV493a@lV4935 (unspecified)) (set! lV493c@lV4934 (unspecified)) (set! lV493f@p? (unspecified)) (set! lV4941@make-lexical-violation (unspecified)) (set! lV4943@lexical-violation? (unspecified)) (set! lV4945@&lexical-rtd (unspecified)) (set! lV4947@&lexical-rcd (unspecified)) (set! lV4951@lV494c (unspecified)) (set! lV4953@lV494e (unspecified)) (set! lV4955@lV494d (unspecified)) (set! lV4958@p? (unspecified)) (set! lV495a@make-syntax-violation (unspecified)) (set! lV495c@lV4949 (unspecified)) (set! lV495e@lV494b (unspecified)) (set! lV4960@syntax-violation? (unspecified)) (set! lV4962@syntax-violation-form (unspecified)) (set! lV4964@syntax-violation-subform (unspecified)) (set! lV4966@&syntax-rtd (unspecified)) (set! lV4968@&syntax-rcd (unspecified)) (set! lV496e@lV4969 (unspecified)) (set! lV4970@lV496b (unspecified)) (set! lV4972@lV496a (unspecified)) (set! lV4975@p? (unspecified)) (set! lV4977@make-undefined-violation (unspecified)) (set! lV4979@undefined-violation? (unspecified)) (set! lV497b@&undefined-rtd (unspecified)) (set! lV497d@&undefined-rcd (unspecified)) (set! lV4983@lV497e (unspecified)) (set! lV4985@lV4980 (unspecified)) (set! lV4987@lV497f (unspecified)) (set! lV498a@p? (unspecified)) (set! lV498c@make-i/o-error (unspecified)) (set! lV498e@i/o-error? (unspecified)) (set! lV4990@&i/o-rtd (unspecified)) (set! lV4992@&i/o-rcd (unspecified)) (set! lV4998@lV4993 (unspecified)) (set! lV499a@lV4995 (unspecified)) (set! lV499c@lV4994 (unspecified)) (set! lV499f@p? (unspecified)) (set! lV49a1@make-i/o-read-error (unspecified)) (set! lV49a3@i/o-read-error? (unspecified)) (set! lV49a5@&i/o-read-rtd (unspecified)) (set! lV49a7@&i/o-read-rcd (unspecified)) (set! lV49ad@lV49a8 (unspecified)) (set! lV49af@lV49aa (unspecified)) (set! lV49b1@lV49a9 (unspecified)) (set! lV49b4@p? (unspecified)) (set! lV49b6@make-i/o-write-error (unspecified)) (set! lV49b8@i/o-write-error? (unspecified)) (set! lV49ba@&i/o-write-rtd (unspecified)) (set! lV49bc@&i/o-write-rcd (unspecified)) (set! lV49c4@lV49bf (unspecified)) (set! lV49c6@lV49c1 (unspecified)) (set! lV49c8@lV49c0 (unspecified)) (set! lV49cb@p? (unspecified)) (set! lV49cd@make-i/o-invalid-position-error (unspecified)) (set! lV49cf@lV49be (unspecified)) (set! lV49d1@i/o-invalid-position-error? (unspecified)) (set! lV49d3@i/o-error-position (unspecified)) (set! lV49d5@&i/o-invalid-position-rtd (unspecified)) (set! lV49d7@&i/o-invalid-position-rcd (unspecified)) (set! lV49df@lV49da (unspecified)) (set! lV49e1@lV49dc (unspecified)) (set! lV49e3@lV49db (unspecified)) (set! lV49e6@p? (unspecified)) (set! lV49e8@make-i/o-filename-error (unspecified)) (set! lV49ea@lV49d9 (unspecified)) (set! lV49ec@i/o-filename-error? (unspecified)) (set! lV49ee@i/o-error-filename (unspecified)) (set! lV49f0@&i/o-filename-rtd (unspecified)) (set! lV49f2@&i/o-filename-rcd (unspecified)) (set! lV49f8@lV49f3 (unspecified)) (set! lV49fa@lV49f5 (unspecified)) (set! lV49fc@lV49f4 (unspecified)) (set! lV49ff@p? (unspecified)) (set! lV4a01@make-i/o-file-protection-error (unspecified)) (set! lV4a03@i/o-file-protection-error? (unspecified)) (set! lV4a05@&i/o-file-protection-rtd (unspecified)) (set! lV4a07@&i/o-file-protection-rcd (unspecified)) (set! lV4a0d@lV4a08 (unspecified)) (set! lV4a0f@lV4a0a (unspecified)) (set! lV4a11@lV4a09 (unspecified)) (set! lV4a14@p? (unspecified)) (set! lV4a16@make-i/o-file-is-read-only-error (unspecified)) (set! lV4a18@i/o-file-is-read-only-error? (unspecified)) (set! lV4a1a@&i/o-file-is-read-only-rtd (unspecified)) (set! lV4a1c@&i/o-file-is-read-only-rcd (unspecified)) (set! lV4a22@lV4a1d (unspecified)) (set! lV4a24@lV4a1f (unspecified)) (set! lV4a26@lV4a1e (unspecified)) (set! lV4a29@p? (unspecified)) (set! lV4a2b@make-i/o-file-already-exists-error (unspecified)) (set! lV4a2d@i/o-file-already-exists-error? (unspecified)) (set! lV4a2f@&i/o-file-already-exists-rtd (unspecified)) (set! lV4a31@&i/o-file-already-exists-rcd (unspecified)) (set! lV4a37@lV4a32 (unspecified)) (set! lV4a39@lV4a34 (unspecified)) (set! lV4a3b@lV4a33 (unspecified)) (set! lV4a3e@p? (unspecified)) (set! lV4a40@make-i/o-file-does-not-exist-error (unspecified)) (set! lV4a42@i/o-file-does-not-exist-error? (unspecified)) (set! lV4a44@&i/o-file-does-not-exist-rtd (unspecified)) (set! lV4a46@&i/o-file-does-not-exist-rcd (unspecified)) (set! lV4a4e@lV4a49 (unspecified)) (set! lV4a50@lV4a4b (unspecified)) (set! lV4a52@lV4a4a (unspecified)) (set! lV4a55@p? (unspecified)) (set! lV4a57@make-i/o-port-error (unspecified)) (set! lV4a59@lV4a48 (unspecified)) (set! lV4a5b@i/o-port-error? (unspecified)) (set! lV4a5d@i/o-error-port (unspecified)) (set! lV4a5f@&i/o-port-rtd (unspecified)) (set! lV4a61@&i/o-port-rcd (unspecified)) (set! lV4a67@lV4a62 (unspecified)) (set! lV4a69@lV4a64 (unspecified)) (set! lV4a6b@lV4a63 (unspecified)) (set! lV4a6e@p? (unspecified)) (set! lV4a70@make-i/o-decoding-error (unspecified)) (set! lV4a72@i/o-decoding-error? (unspecified)) (set! lV4a74@&i/o-decoding-rtd (unspecified)) (set! lV4a76@&i/o-decoding-rcd (unspecified)) (set! lV4a7e@lV4a79 (unspecified)) (set! lV4a80@lV4a7b (unspecified)) (set! lV4a82@lV4a7a (unspecified)) (set! lV4a85@p? (unspecified)) (set! lV4a87@make-i/o-encoding-error (unspecified)) (set! lV4a89@lV4a78 (unspecified)) (set! lV4a8b@i/o-encoding-error? (unspecified)) (set! lV4a8d@i/o-encoding-error-char (unspecified)) (set! lV4a8f@&i/o-encoding-rtd (unspecified)) (set! lV4a91@&i/o-encoding-rcd (unspecified)) (set! lV4a97@lV4a92 (unspecified)) (set! lV4a99@lV4a94 (unspecified)) (set! lV4a9b@lV4a93 (unspecified)) (set! lV4a9e@p? (unspecified)) (set! lV4aa0@make-no-infinities-violation (unspecified)) (set! lV4aa2@no-infinities-violation? (unspecified)) (set! lV4aa4@&no-infinities-rtd (unspecified)) (set! lV4aa6@&no-infinities-rcd (unspecified)) (set! lV4aac@lV4aa7 (unspecified)) (set! lV4aae@lV4aa9 (unspecified)) (set! lV4ab0@lV4aa8 (unspecified)) (set! lV4ab3@p? (unspecified)) (set! lV4ab5@make-no-nans-violation (unspecified)) (set! lV4ab7@no-nans-violation? (unspecified)) (set! lV4ab9@&no-nans-rtd (unspecified)) (set! lV4abb@&no-nans-rcd (unspecified)) (begin (set! lV47fd@lV47f8 (make-record-type-descriptor '&condition '#f 'lV47fb '#f '#f '#())) (set! lV4abc@lV47fd@lV47f8 lV47fd@lV47f8)) (begin (set! lV47ff@lV47fa '#f) (set! lV4abd@lV47ff@lV47fa lV47ff@lV47fa)) (begin (set! lV4801@lV47f9 (make-record-constructor-descriptor lV47fd@lV47f8 '#f lV47ff@lV47fa)) (set! lV4abe@lV4801@lV47f9 lV4801@lV47f9)) (begin (set! lV4804@&condition? (record-predicate lV47fd@lV47f8)) (set! lV4abf@lV4804@&condition? lV4804@&condition?)) (begin (set! lV4806@make-&condition (record-constructor lV4801@lV47f9)) (set! lV4ac0@lV4806@make-&condition lV4806@make-&condition)) (begin (set! lV4808@&condition-rtd lV47fd@lV47f8) (set! lV4ac1@lV4808@&condition-rtd lV4808@&condition-rtd)) (begin (set! lV480a@&condition-rcd lV4801@lV47f9) (set! lV4ac2@lV480a@&condition-rcd lV480a@&condition-rcd)) (begin (set! lV4856@lV4851 (make-record-type-descriptor '&message lV47fd@lV47f8 'lV4854 '#f '#f '#((immutable message)))) (set! lV4ac3@lV4856@lV4851 lV4856@lV4851)) (begin (set! lV4858@lV4853 '#f) (set! lV4ac4@lV4858@lV4853 lV4858@lV4853)) (begin (set! lV485a@lV4852 (make-record-constructor-descriptor lV4856@lV4851 lV4801@lV47f9 lV4858@lV4853)) (set! lV4ac5@lV485a@lV4852 lV485a@lV4852)) (begin (set! lV485d@p? (record-predicate lV4856@lV4851)) (set! lV4ac6@lV485d@p? lV485d@p?)) (begin (set! lV485f@make-message-condition (record-constructor lV485a@lV4852)) (set! lV4ac7@lV485f@make-message-condition lV485f@make-message-condition)) (begin (set! lV4861@lV4850 (record-accessor lV4856@lV4851 '0)) (set! lV4ac8@lV4861@lV4850 lV4861@lV4850)) (begin (set! lV4863@message-condition? (condition-predicate lV4856@lV4851)) (set! lV4ac9@lV4863@message-condition? lV4863@message-condition?)) (begin (set! lV4865@condition-message (condition-accessor lV4856@lV4851 lV4861@lV4850)) (set! lV4aca@lV4865@condition-message lV4865@condition-message)) (begin (set! lV4867@&message-rtd lV4856@lV4851) (set! lV4acb@lV4867@&message-rtd lV4867@&message-rtd)) (begin (set! lV4869@&message-rcd lV485a@lV4852) (set! lV4acc@lV4869@&message-rcd lV4869@&message-rcd)) (begin (set! lV486f@lV486a (make-record-type-descriptor '&warning lV47fd@lV47f8 'lV486d '#f '#f '#())) (set! lV4acd@lV486f@lV486a lV486f@lV486a)) (begin (set! lV4871@lV486c '#f) (set! lV4ace@lV4871@lV486c lV4871@lV486c)) (begin (set! lV4873@lV486b (make-record-constructor-descriptor lV486f@lV486a lV4801@lV47f9 lV4871@lV486c)) (set! lV4acf@lV4873@lV486b lV4873@lV486b)) (begin (set! lV4876@p? (record-predicate lV486f@lV486a)) (set! lV4ad0@lV4876@p? lV4876@p?)) (begin (set! lV4878@make-warning (record-constructor lV4873@lV486b)) (set! lV4ad1@lV4878@make-warning lV4878@make-warning)) (begin (set! lV487a@warning? (condition-predicate lV486f@lV486a)) (set! lV4ad2@lV487a@warning? lV487a@warning?)) (begin (set! lV487c@&warning-rtd lV486f@lV486a) (set! lV4ad3@lV487c@&warning-rtd lV487c@&warning-rtd)) (begin (set! lV487e@&warning-rcd lV4873@lV486b) (set! lV4ad4@lV487e@&warning-rcd lV487e@&warning-rcd)) (begin (set! lV4884@lV487f (make-record-type-descriptor '&serious lV47fd@lV47f8 'lV4882 '#f '#f '#())) (set! lV4ad5@lV4884@lV487f lV4884@lV487f)) (begin (set! lV4886@lV4881 '#f) (set! lV4ad6@lV4886@lV4881 lV4886@lV4881)) (begin (set! lV4888@lV4880 (make-record-constructor-descriptor lV4884@lV487f lV4801@lV47f9 lV4886@lV4881)) (set! lV4ad7@lV4888@lV4880 lV4888@lV4880)) (begin (set! lV488b@p? (record-predicate lV4884@lV487f)) (set! lV4ad8@lV488b@p? lV488b@p?)) (begin (set! lV488d@make-serious-condition (record-constructor lV4888@lV4880)) (set! lV4ad9@lV488d@make-serious-condition lV488d@make-serious-condition)) (begin (set! lV488f@serious-condition? (condition-predicate lV4884@lV487f)) (set! lV4ada@lV488f@serious-condition? lV488f@serious-condition?)) (begin (set! lV4891@&serious-rtd lV4884@lV487f) (set! lV4adb@lV4891@&serious-rtd lV4891@&serious-rtd)) (begin (set! lV4893@&serious-rcd lV4888@lV4880) (set! lV4adc@lV4893@&serious-rcd lV4893@&serious-rcd)) (begin (set! lV4899@lV4894 (make-record-type-descriptor '&error lV4884@lV487f 'lV4897 '#f '#f '#())) (set! lV4add@lV4899@lV4894 lV4899@lV4894)) (begin (set! lV489b@lV4896 '#f) (set! lV4ade@lV489b@lV4896 lV489b@lV4896)) (begin (set! lV489d@lV4895 (make-record-constructor-descriptor lV4899@lV4894 lV4888@lV4880 lV489b@lV4896)) (set! lV4adf@lV489d@lV4895 lV489d@lV4895)) (begin (set! lV48a0@p? (record-predicate lV4899@lV4894)) (set! lV4ae0@lV48a0@p? lV48a0@p?)) (begin (set! lV48a2@make-error (record-constructor lV489d@lV4895)) (set! lV4ae1@lV48a2@make-error lV48a2@make-error)) (begin (set! lV48a4@error? (condition-predicate lV4899@lV4894)) (set! lV4ae2@lV48a4@error? lV48a4@error?)) (begin (set! lV48a6@&error-rtd lV4899@lV4894) (set! lV4ae3@lV48a6@&error-rtd lV48a6@&error-rtd)) (begin (set! lV48a8@&error-rcd lV489d@lV4895) (set! lV4ae4@lV48a8@&error-rcd lV48a8@&error-rcd)) (begin (set! lV48ae@lV48a9 (make-record-type-descriptor '&violation lV4884@lV487f 'lV48ac '#f '#f '#())) (set! lV4ae5@lV48ae@lV48a9 lV48ae@lV48a9)) (begin (set! lV48b0@lV48ab '#f) (set! lV4ae6@lV48b0@lV48ab lV48b0@lV48ab)) (begin (set! lV48b2@lV48aa (make-record-constructor-descriptor lV48ae@lV48a9 lV4888@lV4880 lV48b0@lV48ab)) (set! lV4ae7@lV48b2@lV48aa lV48b2@lV48aa)) (begin (set! lV48b5@p? (record-predicate lV48ae@lV48a9)) (set! lV4ae8@lV48b5@p? lV48b5@p?)) (begin (set! lV48b7@make-violation (record-constructor lV48b2@lV48aa)) (set! lV4ae9@lV48b7@make-violation lV48b7@make-violation)) (begin (set! lV48b9@violation? (condition-predicate lV48ae@lV48a9)) (set! lV4aea@lV48b9@violation? lV48b9@violation?)) (begin (set! lV48bb@&violation-rtd lV48ae@lV48a9) (set! lV4aeb@lV48bb@&violation-rtd lV48bb@&violation-rtd)) (begin (set! lV48bd@&violation-rcd lV48b2@lV48aa) (set! lV4aec@lV48bd@&violation-rcd lV48bd@&violation-rcd)) (begin (set! lV48c3@lV48be (make-record-type-descriptor '&assertion lV48ae@lV48a9 'lV48c1 '#f '#f '#())) (set! lV4aed@lV48c3@lV48be lV48c3@lV48be)) (begin (set! lV48c5@lV48c0 '#f) (set! lV4aee@lV48c5@lV48c0 lV48c5@lV48c0)) (begin (set! lV48c7@lV48bf (make-record-constructor-descriptor lV48c3@lV48be lV48b2@lV48aa lV48c5@lV48c0)) (set! lV4aef@lV48c7@lV48bf lV48c7@lV48bf)) (begin (set! lV48ca@p? (record-predicate lV48c3@lV48be)) (set! lV4af0@lV48ca@p? lV48ca@p?)) (begin (set! lV48cc@make-assertion-violation (record-constructor lV48c7@lV48bf)) (set! lV4af1@lV48cc@make-assertion-violation lV48cc@make-assertion-violation)) (begin (set! lV48ce@assertion-violation? (condition-predicate lV48c3@lV48be)) (set! lV4af2@lV48ce@assertion-violation? lV48ce@assertion-violation?)) (begin (set! lV48d0@&assertion-rtd lV48c3@lV48be) (set! lV4af3@lV48d0@&assertion-rtd lV48d0@&assertion-rtd)) (begin (set! lV48d2@&assertion-rcd lV48c7@lV48bf) (set! lV4af4@lV48d2@&assertion-rcd lV48d2@&assertion-rcd)) (begin (set! lV48da@lV48d5 (make-record-type-descriptor '&irritants lV47fd@lV47f8 'lV48d8 '#f '#f '#((immutable irritants)))) (set! lV4af5@lV48da@lV48d5 lV48da@lV48d5)) (begin (set! lV48dc@lV48d7 '#f) (set! lV4af6@lV48dc@lV48d7 lV48dc@lV48d7)) (begin (set! lV48de@lV48d6 (make-record-constructor-descriptor lV48da@lV48d5 lV4801@lV47f9 lV48dc@lV48d7)) (set! lV4af7@lV48de@lV48d6 lV48de@lV48d6)) (begin (set! lV48e1@p? (record-predicate lV48da@lV48d5)) (set! lV4af8@lV48e1@p? lV48e1@p?)) (begin (set! lV48e3@make-irritants-condition (record-constructor lV48de@lV48d6)) (set! lV4af9@lV48e3@make-irritants-condition lV48e3@make-irritants-condition)) (begin (set! lV48e5@lV48d4 (record-accessor lV48da@lV48d5 '0)) (set! lV4afa@lV48e5@lV48d4 lV48e5@lV48d4)) (begin (set! lV48e7@irritants-condition? (condition-predicate lV48da@lV48d5)) (set! lV4afb@lV48e7@irritants-condition? lV48e7@irritants-condition?)) (begin (set! lV48e9@condition-irritants (condition-accessor lV48da@lV48d5 lV48e5@lV48d4)) (set! lV4afc@lV48e9@condition-irritants lV48e9@condition-irritants)) (begin (set! lV48eb@&irritants-rtd lV48da@lV48d5) (set! lV4afd@lV48eb@&irritants-rtd lV48eb@&irritants-rtd)) (begin (set! lV48ed@&irritants-rcd lV48de@lV48d6) (set! lV4afe@lV48ed@&irritants-rcd lV48ed@&irritants-rcd)) (begin (set! lV48f5@lV48f0 (make-record-type-descriptor '&who lV47fd@lV47f8 'lV48f3 '#f '#f '#((immutable who)))) (set! lV4aff@lV48f5@lV48f0 lV48f5@lV48f0)) (begin (set! lV48f7@lV48f2 '#f) (set! lV4b00@lV48f7@lV48f2 lV48f7@lV48f2)) (begin (set! lV48f9@lV48f1 (make-record-constructor-descriptor lV48f5@lV48f0 lV4801@lV47f9 lV48f7@lV48f2)) (set! lV4b01@lV48f9@lV48f1 lV48f9@lV48f1)) (begin (set! lV48fc@p? (record-predicate lV48f5@lV48f0)) (set! lV4b02@lV48fc@p? lV48fc@p?)) (begin (set! lV48fe@make-who-condition (record-constructor lV48f9@lV48f1)) (set! lV4b03@lV48fe@make-who-condition lV48fe@make-who-condition)) (begin (set! lV4900@lV48ef (record-accessor lV48f5@lV48f0 '0)) (set! lV4b04@lV4900@lV48ef lV4900@lV48ef)) (begin (set! lV4902@who-condition? (condition-predicate lV48f5@lV48f0)) (set! lV4b05@lV4902@who-condition? lV4902@who-condition?)) (begin (set! lV4904@condition-who (condition-accessor lV48f5@lV48f0 lV4900@lV48ef)) (set! lV4b06@lV4904@condition-who lV4904@condition-who)) (begin (set! lV4906@&who-rtd lV48f5@lV48f0) (set! lV4b07@lV4906@&who-rtd lV4906@&who-rtd)) (begin (set! lV4908@&who-rcd lV48f9@lV48f1) (set! lV4b08@lV4908@&who-rcd lV4908@&who-rcd)) (begin (set! lV490e@lV4909 (make-record-type-descriptor '&non-continuable lV48ae@lV48a9 'lV490c '#f '#f '#())) (set! lV4b09@lV490e@lV4909 lV490e@lV4909)) (begin (set! lV4910@lV490b '#f) (set! lV4b0a@lV4910@lV490b lV4910@lV490b)) (begin (set! lV4912@lV490a (make-record-constructor-descriptor lV490e@lV4909 lV48b2@lV48aa lV4910@lV490b)) (set! lV4b0b@lV4912@lV490a lV4912@lV490a)) (begin (set! lV4915@p? (record-predicate lV490e@lV4909)) (set! lV4b0c@lV4915@p? lV4915@p?)) (begin (set! lV4917@make-non-continuable-violation (record-constructor lV4912@lV490a)) (set! lV4b0d@lV4917@make-non-continuable-violation lV4917@make-non-continuable-violation)) (begin (set! lV4919@non-continuable-violation? (condition-predicate lV490e@lV4909)) (set! lV4b0e@lV4919@non-continuable-violation? lV4919@non-continuable-violation?)) (begin (set! lV491b@&non-continuable-rtd lV490e@lV4909) (set! lV4b0f@lV491b@&non-continuable-rtd lV491b@&non-continuable-rtd)) (begin (set! lV491d@&non-continuable-rcd lV4912@lV490a) (set! lV4b10@lV491d@&non-continuable-rcd lV491d@&non-continuable-rcd)) (begin (set! lV4923@lV491e (make-record-type-descriptor '&implementation-restriction lV48ae@lV48a9 'lV4921 '#f '#f '#())) (set! lV4b11@lV4923@lV491e lV4923@lV491e)) (begin (set! lV4925@lV4920 '#f) (set! lV4b12@lV4925@lV4920 lV4925@lV4920)) (begin (set! lV4927@lV491f (make-record-constructor-descriptor lV4923@lV491e lV48b2@lV48aa lV4925@lV4920)) (set! lV4b13@lV4927@lV491f lV4927@lV491f)) (begin (set! lV492a@p? (record-predicate lV4923@lV491e)) (set! lV4b14@lV492a@p? lV492a@p?)) (begin (set! lV492c@make-implementation-restriction-violation (record-constructor lV4927@lV491f)) (set! lV4b15@lV492c@make-implementation-restriction-violation lV492c@make-implementation-restriction-violation)) (begin (set! lV492e@implementation-restriction-violation? (condition-predicate lV4923@lV491e)) (set! lV4b16@lV492e@implementation-restriction-violation? lV492e@implementation-restriction-violation?)) (begin (set! lV4930@&implementation-restriction-rtd lV4923@lV491e) (set! lV4b17@lV4930@&implementation-restriction-rtd lV4930@&implementation-restriction-rtd)) (begin (set! lV4932@&implementation-restriction-rcd lV4927@lV491f) (set! lV4b18@lV4932@&implementation-restriction-rcd lV4932@&implementation-restriction-rcd)) (begin (set! lV4938@lV4933 (make-record-type-descriptor '&lexical lV48ae@lV48a9 'lV4936 '#f '#f '#())) (set! lV4b19@lV4938@lV4933 lV4938@lV4933)) (begin (set! lV493a@lV4935 '#f) (set! lV4b1a@lV493a@lV4935 lV493a@lV4935)) (begin (set! lV493c@lV4934 (make-record-constructor-descriptor lV4938@lV4933 lV48b2@lV48aa lV493a@lV4935)) (set! lV4b1b@lV493c@lV4934 lV493c@lV4934)) (begin (set! lV493f@p? (record-predicate lV4938@lV4933)) (set! lV4b1c@lV493f@p? lV493f@p?)) (begin (set! lV4941@make-lexical-violation (record-constructor lV493c@lV4934)) (set! lV4b1d@lV4941@make-lexical-violation lV4941@make-lexical-violation)) (begin (set! lV4943@lexical-violation? (condition-predicate lV4938@lV4933)) (set! lV4b1e@lV4943@lexical-violation? lV4943@lexical-violation?)) (begin (set! lV4945@&lexical-rtd lV4938@lV4933) (set! lV4b1f@lV4945@&lexical-rtd lV4945@&lexical-rtd)) (begin (set! lV4947@&lexical-rcd lV493c@lV4934) (set! lV4b20@lV4947@&lexical-rcd lV4947@&lexical-rcd)) (begin (set! lV4951@lV494c (make-record-type-descriptor '&syntax lV48ae@lV48a9 'lV494f '#f '#f '#((immutable form) (immutable subform)))) (set! lV4b21@lV4951@lV494c lV4951@lV494c)) (begin (set! lV4953@lV494e '#f) (set! lV4b22@lV4953@lV494e lV4953@lV494e)) (begin (set! lV4955@lV494d (make-record-constructor-descriptor lV4951@lV494c lV48b2@lV48aa lV4953@lV494e)) (set! lV4b23@lV4955@lV494d lV4955@lV494d)) (begin (set! lV4958@p? (record-predicate lV4951@lV494c)) (set! lV4b24@lV4958@p? lV4958@p?)) (begin (set! lV495a@make-syntax-violation (record-constructor lV4955@lV494d)) (set! lV4b25@lV495a@make-syntax-violation lV495a@make-syntax-violation)) (begin (set! lV495c@lV4949 (record-accessor lV4951@lV494c '0)) (set! lV4b26@lV495c@lV4949 lV495c@lV4949)) (begin (set! lV495e@lV494b (record-accessor lV4951@lV494c '1)) (set! lV4b27@lV495e@lV494b lV495e@lV494b)) (begin (set! lV4960@syntax-violation? (condition-predicate lV4951@lV494c)) (set! lV4b28@lV4960@syntax-violation? lV4960@syntax-violation?)) (begin (set! lV4962@syntax-violation-form (condition-accessor lV4951@lV494c lV495c@lV4949)) (set! lV4b29@lV4962@syntax-violation-form lV4962@syntax-violation-form)) (begin (set! lV4964@syntax-violation-subform (condition-accessor lV4951@lV494c lV495e@lV494b)) (set! lV4b2a@lV4964@syntax-violation-subform lV4964@syntax-violation-subform)) (begin (set! lV4966@&syntax-rtd lV4951@lV494c) (set! lV4b2b@lV4966@&syntax-rtd lV4966@&syntax-rtd)) (begin (set! lV4968@&syntax-rcd lV4955@lV494d) (set! lV4b2c@lV4968@&syntax-rcd lV4968@&syntax-rcd)) (begin (set! lV496e@lV4969 (make-record-type-descriptor '&undefined lV48ae@lV48a9 'lV496c '#f '#f '#())) (set! lV4b2d@lV496e@lV4969 lV496e@lV4969)) (begin (set! lV4970@lV496b '#f) (set! lV4b2e@lV4970@lV496b lV4970@lV496b)) (begin (set! lV4972@lV496a (make-record-constructor-descriptor lV496e@lV4969 lV48b2@lV48aa lV4970@lV496b)) (set! lV4b2f@lV4972@lV496a lV4972@lV496a)) (begin (set! lV4975@p? (record-predicate lV496e@lV4969)) (set! lV4b30@lV4975@p? lV4975@p?)) (begin (set! lV4977@make-undefined-violation (record-constructor lV4972@lV496a)) (set! lV4b31@lV4977@make-undefined-violation lV4977@make-undefined-violation)) (begin (set! lV4979@undefined-violation? (condition-predicate lV496e@lV4969)) (set! lV4b32@lV4979@undefined-violation? lV4979@undefined-violation?)) (begin (set! lV497b@&undefined-rtd lV496e@lV4969) (set! lV4b33@lV497b@&undefined-rtd lV497b@&undefined-rtd)) (begin (set! lV497d@&undefined-rcd lV4972@lV496a) (set! lV4b34@lV497d@&undefined-rcd lV497d@&undefined-rcd)) (begin (set! lV4983@lV497e (make-record-type-descriptor '&i/o lV4899@lV4894 'lV4981 '#f '#f '#())) (set! lV4b35@lV4983@lV497e lV4983@lV497e)) (begin (set! lV4985@lV4980 '#f) (set! lV4b36@lV4985@lV4980 lV4985@lV4980)) (begin (set! lV4987@lV497f (make-record-constructor-descriptor lV4983@lV497e lV489d@lV4895 lV4985@lV4980)) (set! lV4b37@lV4987@lV497f lV4987@lV497f)) (begin (set! lV498a@p? (record-predicate lV4983@lV497e)) (set! lV4b38@lV498a@p? lV498a@p?)) (begin (set! lV498c@make-i/o-error (record-constructor lV4987@lV497f)) (set! lV4b39@lV498c@make-i/o-error lV498c@make-i/o-error)) (begin (set! lV498e@i/o-error? (condition-predicate lV4983@lV497e)) (set! lV4b3a@lV498e@i/o-error? lV498e@i/o-error?)) (begin (set! lV4990@&i/o-rtd lV4983@lV497e) (set! lV4b3b@lV4990@&i/o-rtd lV4990@&i/o-rtd)) (begin (set! lV4992@&i/o-rcd lV4987@lV497f) (set! lV4b3c@lV4992@&i/o-rcd lV4992@&i/o-rcd)) (begin (set! lV4998@lV4993 (make-record-type-descriptor '&i/o-read lV4983@lV497e 'lV4996 '#f '#f '#())) (set! lV4b3d@lV4998@lV4993 lV4998@lV4993)) (begin (set! lV499a@lV4995 '#f) (set! lV4b3e@lV499a@lV4995 lV499a@lV4995)) (begin (set! lV499c@lV4994 (make-record-constructor-descriptor lV4998@lV4993 lV4987@lV497f lV499a@lV4995)) (set! lV4b3f@lV499c@lV4994 lV499c@lV4994)) (begin (set! lV499f@p? (record-predicate lV4998@lV4993)) (set! lV4b40@lV499f@p? lV499f@p?)) (begin (set! lV49a1@make-i/o-read-error (record-constructor lV499c@lV4994)) (set! lV4b41@lV49a1@make-i/o-read-error lV49a1@make-i/o-read-error)) (begin (set! lV49a3@i/o-read-error? (condition-predicate lV4998@lV4993)) (set! lV4b42@lV49a3@i/o-read-error? lV49a3@i/o-read-error?)) (begin (set! lV49a5@&i/o-read-rtd lV4998@lV4993) (set! lV4b43@lV49a5@&i/o-read-rtd lV49a5@&i/o-read-rtd)) (begin (set! lV49a7@&i/o-read-rcd lV499c@lV4994) (set! lV4b44@lV49a7@&i/o-read-rcd lV49a7@&i/o-read-rcd)) (begin (set! lV49ad@lV49a8 (make-record-type-descriptor '&i/o-write lV4983@lV497e 'lV49ab '#f '#f '#())) (set! lV4b45@lV49ad@lV49a8 lV49ad@lV49a8)) (begin (set! lV49af@lV49aa '#f) (set! lV4b46@lV49af@lV49aa lV49af@lV49aa)) (begin (set! lV49b1@lV49a9 (make-record-constructor-descriptor lV49ad@lV49a8 lV4987@lV497f lV49af@lV49aa)) (set! lV4b47@lV49b1@lV49a9 lV49b1@lV49a9)) (begin (set! lV49b4@p? (record-predicate lV49ad@lV49a8)) (set! lV4b48@lV49b4@p? lV49b4@p?)) (begin (set! lV49b6@make-i/o-write-error (record-constructor lV49b1@lV49a9)) (set! lV4b49@lV49b6@make-i/o-write-error lV49b6@make-i/o-write-error)) (begin (set! lV49b8@i/o-write-error? (condition-predicate lV49ad@lV49a8)) (set! lV4b4a@lV49b8@i/o-write-error? lV49b8@i/o-write-error?)) (begin (set! lV49ba@&i/o-write-rtd lV49ad@lV49a8) (set! lV4b4b@lV49ba@&i/o-write-rtd lV49ba@&i/o-write-rtd)) (begin (set! lV49bc@&i/o-write-rcd lV49b1@lV49a9) (set! lV4b4c@lV49bc@&i/o-write-rcd lV49bc@&i/o-write-rcd)) (begin (set! lV49c4@lV49bf (make-record-type-descriptor '&i/o-invalid-position lV4983@lV497e 'lV49c2 '#f '#f '#((immutable position)))) (set! lV4b4d@lV49c4@lV49bf lV49c4@lV49bf)) (begin (set! lV49c6@lV49c1 '#f) (set! lV4b4e@lV49c6@lV49c1 lV49c6@lV49c1)) (begin (set! lV49c8@lV49c0 (make-record-constructor-descriptor lV49c4@lV49bf lV4987@lV497f lV49c6@lV49c1)) (set! lV4b4f@lV49c8@lV49c0 lV49c8@lV49c0)) (begin (set! lV49cb@p? (record-predicate lV49c4@lV49bf)) (set! lV4b50@lV49cb@p? lV49cb@p?)) (begin (set! lV49cd@make-i/o-invalid-position-error (record-constructor lV49c8@lV49c0)) (set! lV4b51@lV49cd@make-i/o-invalid-position-error lV49cd@make-i/o-invalid-position-error)) (begin (set! lV49cf@lV49be (record-accessor lV49c4@lV49bf '0)) (set! lV4b52@lV49cf@lV49be lV49cf@lV49be)) (begin (set! lV49d1@i/o-invalid-position-error? (condition-predicate lV49c4@lV49bf)) (set! lV4b53@lV49d1@i/o-invalid-position-error? lV49d1@i/o-invalid-position-error?)) (begin (set! lV49d3@i/o-error-position (condition-accessor lV49c4@lV49bf lV49cf@lV49be)) (set! lV4b54@lV49d3@i/o-error-position lV49d3@i/o-error-position)) (begin (set! lV49d5@&i/o-invalid-position-rtd lV49c4@lV49bf) (set! lV4b55@lV49d5@&i/o-invalid-position-rtd lV49d5@&i/o-invalid-position-rtd)) (begin (set! lV49d7@&i/o-invalid-position-rcd lV49c8@lV49c0) (set! lV4b56@lV49d7@&i/o-invalid-position-rcd lV49d7@&i/o-invalid-position-rcd)) (begin (set! lV49df@lV49da (make-record-type-descriptor '&i/o-filename lV4983@lV497e 'lV49dd '#f '#f '#((immutable filename)))) (set! lV4b57@lV49df@lV49da lV49df@lV49da)) (begin (set! lV49e1@lV49dc '#f) (set! lV4b58@lV49e1@lV49dc lV49e1@lV49dc)) (begin (set! lV49e3@lV49db (make-record-constructor-descriptor lV49df@lV49da lV4987@lV497f lV49e1@lV49dc)) (set! lV4b59@lV49e3@lV49db lV49e3@lV49db)) (begin (set! lV49e6@p? (record-predicate lV49df@lV49da)) (set! lV4b5a@lV49e6@p? lV49e6@p?)) (begin (set! lV49e8@make-i/o-filename-error (record-constructor lV49e3@lV49db)) (set! lV4b5b@lV49e8@make-i/o-filename-error lV49e8@make-i/o-filename-error)) (begin (set! lV49ea@lV49d9 (record-accessor lV49df@lV49da '0)) (set! lV4b5c@lV49ea@lV49d9 lV49ea@lV49d9)) (begin (set! lV49ec@i/o-filename-error? (condition-predicate lV49df@lV49da)) (set! lV4b5d@lV49ec@i/o-filename-error? lV49ec@i/o-filename-error?)) (begin (set! lV49ee@i/o-error-filename (condition-accessor lV49df@lV49da lV49ea@lV49d9)) (set! lV4b5e@lV49ee@i/o-error-filename lV49ee@i/o-error-filename)) (begin (set! lV49f0@&i/o-filename-rtd lV49df@lV49da) (set! lV4b5f@lV49f0@&i/o-filename-rtd lV49f0@&i/o-filename-rtd)) (begin (set! lV49f2@&i/o-filename-rcd lV49e3@lV49db) (set! lV4b60@lV49f2@&i/o-filename-rcd lV49f2@&i/o-filename-rcd)) (begin (set! lV49f8@lV49f3 (make-record-type-descriptor '&i/o-file-protection lV49df@lV49da 'lV49f6 '#f '#f '#())) (set! lV4b61@lV49f8@lV49f3 lV49f8@lV49f3)) (begin (set! lV49fa@lV49f5 '#f) (set! lV4b62@lV49fa@lV49f5 lV49fa@lV49f5)) (begin (set! lV49fc@lV49f4 (make-record-constructor-descriptor lV49f8@lV49f3 lV49e3@lV49db lV49fa@lV49f5)) (set! lV4b63@lV49fc@lV49f4 lV49fc@lV49f4)) (begin (set! lV49ff@p? (record-predicate lV49f8@lV49f3)) (set! lV4b64@lV49ff@p? lV49ff@p?)) (begin (set! lV4a01@make-i/o-file-protection-error (record-constructor lV49fc@lV49f4)) (set! lV4b65@lV4a01@make-i/o-file-protection-error lV4a01@make-i/o-file-protection-error)) (begin (set! lV4a03@i/o-file-protection-error? (condition-predicate lV49f8@lV49f3)) (set! lV4b66@lV4a03@i/o-file-protection-error? lV4a03@i/o-file-protection-error?)) (begin (set! lV4a05@&i/o-file-protection-rtd lV49f8@lV49f3) (set! lV4b67@lV4a05@&i/o-file-protection-rtd lV4a05@&i/o-file-protection-rtd)) (begin (set! lV4a07@&i/o-file-protection-rcd lV49fc@lV49f4) (set! lV4b68@lV4a07@&i/o-file-protection-rcd lV4a07@&i/o-file-protection-rcd)) (begin (set! lV4a0d@lV4a08 (make-record-type-descriptor '&i/o-file-is-read-only lV49f8@lV49f3 'lV4a0b '#f '#f '#())) (set! lV4b69@lV4a0d@lV4a08 lV4a0d@lV4a08)) (begin (set! lV4a0f@lV4a0a '#f) (set! lV4b6a@lV4a0f@lV4a0a lV4a0f@lV4a0a)) (begin (set! lV4a11@lV4a09 (make-record-constructor-descriptor lV4a0d@lV4a08 lV49fc@lV49f4 lV4a0f@lV4a0a)) (set! lV4b6b@lV4a11@lV4a09 lV4a11@lV4a09)) (begin (set! lV4a14@p? (record-predicate lV4a0d@lV4a08)) (set! lV4b6c@lV4a14@p? lV4a14@p?)) (begin (set! lV4a16@make-i/o-file-is-read-only-error (record-constructor lV4a11@lV4a09)) (set! lV4b6d@lV4a16@make-i/o-file-is-read-only-error lV4a16@make-i/o-file-is-read-only-error)) (begin (set! lV4a18@i/o-file-is-read-only-error? (condition-predicate lV4a0d@lV4a08)) (set! lV4b6e@lV4a18@i/o-file-is-read-only-error? lV4a18@i/o-file-is-read-only-error?)) (begin (set! lV4a1a@&i/o-file-is-read-only-rtd lV4a0d@lV4a08) (set! lV4b6f@lV4a1a@&i/o-file-is-read-only-rtd lV4a1a@&i/o-file-is-read-only-rtd)) (begin (set! lV4a1c@&i/o-file-is-read-only-rcd lV4a11@lV4a09) (set! lV4b70@lV4a1c@&i/o-file-is-read-only-rcd lV4a1c@&i/o-file-is-read-only-rcd)) (begin (set! lV4a22@lV4a1d (make-record-type-descriptor '&i/o-file-already-exists lV49df@lV49da 'lV4a20 '#f '#f '#())) (set! lV4b71@lV4a22@lV4a1d lV4a22@lV4a1d)) (begin (set! lV4a24@lV4a1f '#f) (set! lV4b72@lV4a24@lV4a1f lV4a24@lV4a1f)) (begin (set! lV4a26@lV4a1e (make-record-constructor-descriptor lV4a22@lV4a1d lV49e3@lV49db lV4a24@lV4a1f)) (set! lV4b73@lV4a26@lV4a1e lV4a26@lV4a1e)) (begin (set! lV4a29@p? (record-predicate lV4a22@lV4a1d)) (set! lV4b74@lV4a29@p? lV4a29@p?)) (begin (set! lV4a2b@make-i/o-file-already-exists-error (record-constructor lV4a26@lV4a1e)) (set! lV4b75@lV4a2b@make-i/o-file-already-exists-error lV4a2b@make-i/o-file-already-exists-error)) (begin (set! lV4a2d@i/o-file-already-exists-error? (condition-predicate lV4a22@lV4a1d)) (set! lV4b76@lV4a2d@i/o-file-already-exists-error? lV4a2d@i/o-file-already-exists-error?)) (begin (set! lV4a2f@&i/o-file-already-exists-rtd lV4a22@lV4a1d) (set! lV4b77@lV4a2f@&i/o-file-already-exists-rtd lV4a2f@&i/o-file-already-exists-rtd)) (begin (set! lV4a31@&i/o-file-already-exists-rcd lV4a26@lV4a1e) (set! lV4b78@lV4a31@&i/o-file-already-exists-rcd lV4a31@&i/o-file-already-exists-rcd)) (begin (set! lV4a37@lV4a32 (make-record-type-descriptor '&i/o-file-does-not-exist lV49df@lV49da 'lV4a35 '#f '#f '#())) (set! lV4b79@lV4a37@lV4a32 lV4a37@lV4a32)) (begin (set! lV4a39@lV4a34 '#f) (set! lV4b7a@lV4a39@lV4a34 lV4a39@lV4a34)) (begin (set! lV4a3b@lV4a33 (make-record-constructor-descriptor lV4a37@lV4a32 lV49e3@lV49db lV4a39@lV4a34)) (set! lV4b7b@lV4a3b@lV4a33 lV4a3b@lV4a33)) (begin (set! lV4a3e@p? (record-predicate lV4a37@lV4a32)) (set! lV4b7c@lV4a3e@p? lV4a3e@p?)) (begin (set! lV4a40@make-i/o-file-does-not-exist-error (record-constructor lV4a3b@lV4a33)) (set! lV4b7d@lV4a40@make-i/o-file-does-not-exist-error lV4a40@make-i/o-file-does-not-exist-error)) (begin (set! lV4a42@i/o-file-does-not-exist-error? (condition-predicate lV4a37@lV4a32)) (set! lV4b7e@lV4a42@i/o-file-does-not-exist-error? lV4a42@i/o-file-does-not-exist-error?)) (begin (set! lV4a44@&i/o-file-does-not-exist-rtd lV4a37@lV4a32) (set! lV4b7f@lV4a44@&i/o-file-does-not-exist-rtd lV4a44@&i/o-file-does-not-exist-rtd)) (begin (set! lV4a46@&i/o-file-does-not-exist-rcd lV4a3b@lV4a33) (set! lV4b80@lV4a46@&i/o-file-does-not-exist-rcd lV4a46@&i/o-file-does-not-exist-rcd)) (begin (set! lV4a4e@lV4a49 (make-record-type-descriptor '&i/o-port lV4983@lV497e 'lV4a4c '#f '#f '#((immutable port)))) (set! lV4b81@lV4a4e@lV4a49 lV4a4e@lV4a49)) (begin (set! lV4a50@lV4a4b '#f) (set! lV4b82@lV4a50@lV4a4b lV4a50@lV4a4b)) (begin (set! lV4a52@lV4a4a (make-record-constructor-descriptor lV4a4e@lV4a49 lV4987@lV497f lV4a50@lV4a4b)) (set! lV4b83@lV4a52@lV4a4a lV4a52@lV4a4a)) (begin (set! lV4a55@p? (record-predicate lV4a4e@lV4a49)) (set! lV4b84@lV4a55@p? lV4a55@p?)) (begin (set! lV4a57@make-i/o-port-error (record-constructor lV4a52@lV4a4a)) (set! lV4b85@lV4a57@make-i/o-port-error lV4a57@make-i/o-port-error)) (begin (set! lV4a59@lV4a48 (record-accessor lV4a4e@lV4a49 '0)) (set! lV4b86@lV4a59@lV4a48 lV4a59@lV4a48)) (begin (set! lV4a5b@i/o-port-error? (condition-predicate lV4a4e@lV4a49)) (set! lV4b87@lV4a5b@i/o-port-error? lV4a5b@i/o-port-error?)) (begin (set! lV4a5d@i/o-error-port (condition-accessor lV4a4e@lV4a49 lV4a59@lV4a48)) (set! lV4b88@lV4a5d@i/o-error-port lV4a5d@i/o-error-port)) (begin (set! lV4a5f@&i/o-port-rtd lV4a4e@lV4a49) (set! lV4b89@lV4a5f@&i/o-port-rtd lV4a5f@&i/o-port-rtd)) (begin (set! lV4a61@&i/o-port-rcd lV4a52@lV4a4a) (set! lV4b8a@lV4a61@&i/o-port-rcd lV4a61@&i/o-port-rcd)) (begin (set! lV4a67@lV4a62 (make-record-type-descriptor '&i/o-decoding lV4a4e@lV4a49 'lV4a65 '#f '#f '#())) (set! lV4b8b@lV4a67@lV4a62 lV4a67@lV4a62)) (begin (set! lV4a69@lV4a64 '#f) (set! lV4b8c@lV4a69@lV4a64 lV4a69@lV4a64)) (begin (set! lV4a6b@lV4a63 (make-record-constructor-descriptor lV4a67@lV4a62 lV4a52@lV4a4a lV4a69@lV4a64)) (set! lV4b8d@lV4a6b@lV4a63 lV4a6b@lV4a63)) (begin (set! lV4a6e@p? (record-predicate lV4a67@lV4a62)) (set! lV4b8e@lV4a6e@p? lV4a6e@p?)) (begin (set! lV4a70@make-i/o-decoding-error (record-constructor lV4a6b@lV4a63)) (set! lV4b8f@lV4a70@make-i/o-decoding-error lV4a70@make-i/o-decoding-error)) (begin (set! lV4a72@i/o-decoding-error? (condition-predicate lV4a67@lV4a62)) (set! lV4b90@lV4a72@i/o-decoding-error? lV4a72@i/o-decoding-error?)) (begin (set! lV4a74@&i/o-decoding-rtd lV4a67@lV4a62) (set! lV4b91@lV4a74@&i/o-decoding-rtd lV4a74@&i/o-decoding-rtd)) (begin (set! lV4a76@&i/o-decoding-rcd lV4a6b@lV4a63) (set! lV4b92@lV4a76@&i/o-decoding-rcd lV4a76@&i/o-decoding-rcd)) (begin (set! lV4a7e@lV4a79 (make-record-type-descriptor '&i/o-encoding lV4a4e@lV4a49 'lV4a7c '#f '#f '#((immutable char)))) (set! lV4b93@lV4a7e@lV4a79 lV4a7e@lV4a79)) (begin (set! lV4a80@lV4a7b '#f) (set! lV4b94@lV4a80@lV4a7b lV4a80@lV4a7b)) (begin (set! lV4a82@lV4a7a (make-record-constructor-descriptor lV4a7e@lV4a79 lV4a52@lV4a4a lV4a80@lV4a7b)) (set! lV4b95@lV4a82@lV4a7a lV4a82@lV4a7a)) (begin (set! lV4a85@p? (record-predicate lV4a7e@lV4a79)) (set! lV4b96@lV4a85@p? lV4a85@p?)) (begin (set! lV4a87@make-i/o-encoding-error (record-constructor lV4a82@lV4a7a)) (set! lV4b97@lV4a87@make-i/o-encoding-error lV4a87@make-i/o-encoding-error)) (begin (set! lV4a89@lV4a78 (record-accessor lV4a7e@lV4a79 '0)) (set! lV4b98@lV4a89@lV4a78 lV4a89@lV4a78)) (begin (set! lV4a8b@i/o-encoding-error? (condition-predicate lV4a7e@lV4a79)) (set! lV4b99@lV4a8b@i/o-encoding-error? lV4a8b@i/o-encoding-error?)) (begin (set! lV4a8d@i/o-encoding-error-char (condition-accessor lV4a7e@lV4a79 lV4a89@lV4a78)) (set! lV4b9a@lV4a8d@i/o-encoding-error-char lV4a8d@i/o-encoding-error-char)) (begin (set! lV4a8f@&i/o-encoding-rtd lV4a7e@lV4a79) (set! lV4b9b@lV4a8f@&i/o-encoding-rtd lV4a8f@&i/o-encoding-rtd)) (begin (set! lV4a91@&i/o-encoding-rcd lV4a82@lV4a7a) (set! lV4b9c@lV4a91@&i/o-encoding-rcd lV4a91@&i/o-encoding-rcd)) (begin (set! lV4a97@lV4a92 (make-record-type-descriptor '&no-infinities lV4923@lV491e 'lV4a95 '#f '#f '#())) (set! lV4b9d@lV4a97@lV4a92 lV4a97@lV4a92)) (begin (set! lV4a99@lV4a94 '#f) (set! lV4b9e@lV4a99@lV4a94 lV4a99@lV4a94)) (begin (set! lV4a9b@lV4a93 (make-record-constructor-descriptor lV4a97@lV4a92 lV4927@lV491f lV4a99@lV4a94)) (set! lV4b9f@lV4a9b@lV4a93 lV4a9b@lV4a93)) (begin (set! lV4a9e@p? (record-predicate lV4a97@lV4a92)) (set! lV4ba0@lV4a9e@p? lV4a9e@p?)) (begin (set! lV4aa0@make-no-infinities-violation (record-constructor lV4a9b@lV4a93)) (set! lV4ba1@lV4aa0@make-no-infinities-violation lV4aa0@make-no-infinities-violation)) (begin (set! lV4aa2@no-infinities-violation? (condition-predicate lV4a97@lV4a92)) (set! lV4ba2@lV4aa2@no-infinities-violation? lV4aa2@no-infinities-violation?)) (begin (set! lV4aa4@&no-infinities-rtd lV4a97@lV4a92) (set! lV4ba3@lV4aa4@&no-infinities-rtd lV4aa4@&no-infinities-rtd)) (begin (set! lV4aa6@&no-infinities-rcd lV4a9b@lV4a93) (set! lV4ba4@lV4aa6@&no-infinities-rcd lV4aa6@&no-infinities-rcd)) (begin (set! lV4aac@lV4aa7 (make-record-type-descriptor '&no-nans lV4923@lV491e 'lV4aaa '#f '#f '#())) (set! lV4ba5@lV4aac@lV4aa7 lV4aac@lV4aa7)) (begin (set! lV4aae@lV4aa9 '#f) (set! lV4ba6@lV4aae@lV4aa9 lV4aae@lV4aa9)) (begin (set! lV4ab0@lV4aa8 (make-record-constructor-descriptor lV4aac@lV4aa7 lV4927@lV491f lV4aae@lV4aa9)) (set! lV4ba7@lV4ab0@lV4aa8 lV4ab0@lV4aa8)) (begin (set! lV4ab3@p? (record-predicate lV4aac@lV4aa7)) (set! lV4ba8@lV4ab3@p? lV4ab3@p?)) (begin (set! lV4ab5@make-no-nans-violation (record-constructor lV4ab0@lV4aa8)) (set! lV4ba9@lV4ab5@make-no-nans-violation lV4ab5@make-no-nans-violation)) (begin (set! lV4ab7@no-nans-violation? (condition-predicate lV4aac@lV4aa7)) (set! lV4baa@lV4ab7@no-nans-violation? lV4ab7@no-nans-violation?)) (begin (set! lV4ab9@&no-nans-rtd lV4aac@lV4aa7) (set! lV4bab@lV4ab9@&no-nans-rtd lV4ab9@&no-nans-rtd)) (begin (set! lV4abb@&no-nans-rcd lV4ab0@lV4aa8) (set! lV4bac@lV4abb@&no-nans-rcd lV4abb@&no-nans-rcd)) (void))
(begin (begin (lV2644@lV25f9@current-primitive-locations (lambda (lV5079@x) (let ((lV507b@t (assq lV5079@x '((&no-nans-rcd . lV4bac@lV4abb@&no-nans-rcd) (&no-nans-rtd . lV4bab@lV4ab9@&no-nans-rtd) (&no-infinities-rcd . lV4ba4@lV4aa6@&no-infinities-rcd) (&no-infinities-rtd . lV4ba3@lV4aa4@&no-infinities-rtd) (&i/o-encoding-rcd . lV4b9c@lV4a91@&i/o-encoding-rcd) (&i/o-encoding-rtd . lV4b9b@lV4a8f@&i/o-encoding-rtd) (&i/o-decoding-rcd . lV4b92@lV4a76@&i/o-decoding-rcd) (&i/o-decoding-rtd . lV4b91@lV4a74@&i/o-decoding-rtd) (&i/o-port-rcd . lV4b8a@lV4a61@&i/o-port-rcd) (&i/o-port-rtd . lV4b89@lV4a5f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . lV4b80@lV4a46@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . lV4b7f@lV4a44@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . lV4b78@lV4a31@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . lV4b77@lV4a2f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . lV4b70@lV4a1c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . lV4b6f@lV4a1a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . lV4b68@lV4a07@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . lV4b67@lV4a05@&i/o-file-protection-rtd) (&i/o-filename-rcd . lV4b60@lV49f2@&i/o-filename-rcd) (&i/o-filename-rtd . lV4b5f@lV49f0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . lV4b56@lV49d7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . lV4b55@lV49d5@&i/o-invalid-position-rtd) (&i/o-write-rcd . lV4b4c@lV49bc@&i/o-write-rcd) (&i/o-write-rtd . lV4b4b@lV49ba@&i/o-write-rtd) (&i/o-read-rcd . lV4b44@lV49a7@&i/o-read-rcd) (&i/o-read-rtd . lV4b43@lV49a5@&i/o-read-rtd) (&i/o-rcd . lV4b3c@lV4992@&i/o-rcd) (&i/o-rtd . lV4b3b@lV4990@&i/o-rtd) (&undefined-rcd . lV4b34@lV497d@&undefined-rcd) (&undefined-rtd . lV4b33@lV497b@&undefined-rtd) (&syntax-rcd . lV4b2c@lV4968@&syntax-rcd) (&syntax-rtd . lV4b2b@lV4966@&syntax-rtd) (&lexical-rcd . lV4b20@lV4947@&lexical-rcd) (&lexical-rtd . lV4b1f@lV4945@&lexical-rtd) (&implementation-restriction-rcd . lV4b18@lV4932@&implementation-restriction-rcd) (&implementation-restriction-rtd . lV4b17@lV4930@&implementation-restriction-rtd) (&non-continuable-rcd . lV4b10@lV491d@&non-continuable-rcd) (&non-continuable-rtd . lV4b0f@lV491b@&non-continuable-rtd) (&who-rcd . lV4b08@lV4908@&who-rcd) (&who-rtd . lV4b07@lV4906@&who-rtd) (&irritants-rcd . lV4afe@lV48ed@&irritants-rcd) (&irritants-rtd . lV4afd@lV48eb@&irritants-rtd) (&assertion-rcd . lV4af4@lV48d2@&assertion-rcd) (&assertion-rtd . lV4af3@lV48d0@&assertion-rtd) (&violation-rcd . lV4aec@lV48bd@&violation-rcd) (&violation-rtd . lV4aeb@lV48bb@&violation-rtd) (&error-rcd . lV4ae4@lV48a8@&error-rcd) (&error-rtd . lV4ae3@lV48a6@&error-rtd) (&serious-rcd . lV4adc@lV4893@&serious-rcd) (&serious-rtd . lV4adb@lV4891@&serious-rtd) (&warning-rcd . lV4ad4@lV487e@&warning-rcd) (&warning-rtd . lV4ad3@lV487c@&warning-rtd) (&message-rcd . lV4acc@lV4869@&message-rcd) (&message-rtd . lV4acb@lV4867@&message-rtd) (&condition-rcd . lV4ac2@lV480a@&condition-rcd) (&condition-rtd . lV4ac1@lV4808@&condition-rtd) (syntax-error . lV47e4@lV2d8a@syntax-error) (syntax-dispatch . lV4782@lV2cae@syntax-dispatch) (load . lV4d21@lV4bcc@load) (interaction-environment . lV47ed@lV2d9c@interaction-environment) (library-path . lV28ab@lV26e7@library-path) (mosh-cache-dir . lV25f2@lV24d2@mosh-cache-dir) (make-parameter . lV25f1@lV24d0@make-parameter) (make-variable-transformer . lV473f@lV2ad9@make-variable-transformer) (identifier? . lV47e7@lV2d90@identifier?) (generate-temporaries . lV47dd@lV2d7c@generate-temporaries) (free-identifier=? . lV47de@lV2d7e@free-identifier=?) (syntax->datum . lV47e9@lV2d94@syntax->datum) (datum->syntax . lV47e8@lV2d92@datum->syntax) (bound-identifier=? . lV47df@lV2d80@bound-identifier=?) (make-i/o-write-error . lV4b49@lV49b6@make-i/o-write-error) (make-i/o-read-error . lV4b41@lV49a1@make-i/o-read-error) (make-i/o-port-error . lV4b85@lV4a57@make-i/o-port-error) (make-i/o-invalid-position-error . lV4b51@lV49cd@make-i/o-invalid-position-error) (make-i/o-filename-error . lV4b5b@lV49e8@make-i/o-filename-error) (make-i/o-file-protection-error . lV4b65@lV4a01@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . lV4b6d@lV4a16@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . lV4b7d@lV4a40@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . lV4b75@lV4a2b@make-i/o-file-already-exists-error) (make-i/o-error . lV4b39@lV498c@make-i/o-error) (make-i/o-encoding-error . lV4b97@lV4a87@make-i/o-encoding-error) (make-i/o-decoding-error . lV4b8f@lV4a70@make-i/o-decoding-error) (i/o-write-error? . lV4b4a@lV49b8@i/o-write-error?) (i/o-read-error? . lV4b42@lV49a3@i/o-read-error?) (i/o-port-error? . lV4b87@lV4a5b@i/o-port-error?) (i/o-invalid-position-error? . lV4b53@lV49d1@i/o-invalid-position-error?) (i/o-filename-error? . lV4b5d@lV49ec@i/o-filename-error?) (i/o-file-protection-error? . lV4b66@lV4a03@i/o-file-protection-error?) (i/o-file-is-read-only-error? . lV4b6e@lV4a18@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . lV4b7e@lV4a42@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . lV4b76@lV4a2d@i/o-file-already-exists-error?) (i/o-error? . lV4b3a@lV498e@i/o-error?) (i/o-error-position . lV4b54@lV49d3@i/o-error-position) (i/o-error-port . lV4b88@lV4a5d@i/o-error-port) (i/o-error-filename . lV4b5e@lV49ee@i/o-error-filename) (i/o-encoding-error? . lV4b99@lV4a8b@i/o-encoding-error?) (i/o-encoding-error-char . lV4b9a@lV4a8d@i/o-encoding-error-char) (i/o-decoding-error? . lV4b90@lV4a72@i/o-decoding-error?) (scheme-report-environment . lV47d4@lV2d6a@scheme-report-environment) (null-environment . lV47d3@lV2d68@null-environment) (command-line . lV4d1e@lV4bc6@command-line) (eval . lV47d6@lV2d6e@eval) (environment . lV47d2@lV2d66@environment) (who-condition? . lV4b05@lV4902@who-condition?) (warning? . lV4ad2@lV487a@warning?) (violation? . lV4aea@lV48b9@violation?) (undefined-violation? . lV4b32@lV4979@undefined-violation?) (syntax-violation? . lV4b28@lV4960@syntax-violation?) (syntax-violation-subform . lV4b2a@lV4964@syntax-violation-subform) (syntax-violation-form . lV4b29@lV4962@syntax-violation-form) (syntax-violation . lV47e6@lV2d8e@syntax-violation) (serious-condition? . lV4ada@lV488f@serious-condition?) (non-continuable-violation? . lV4b0e@lV4919@non-continuable-violation?) (message-condition? . lV4ac9@lV4863@message-condition?) (make-who-condition . lV4b03@lV48fe@make-who-condition) (make-warning . lV4ad1@lV4878@make-warning) (make-violation . lV4ae9@lV48b7@make-violation) (make-undefined-violation . lV4b31@lV4977@make-undefined-violation) (make-syntax-violation . lV4b25@lV495a@make-syntax-violation) (make-serious-condition . lV4ad9@lV488d@make-serious-condition) (make-non-continuable-violation . lV4b0d@lV4917@make-non-continuable-violation) (make-message-condition . lV4ac7@lV485f@make-message-condition) (make-lexical-violation . lV4b1d@lV4941@make-lexical-violation) (make-irritants-condition . lV4af9@lV48e3@make-irritants-condition) (make-implementation-restriction-violation . lV4b15@lV492c@make-implementation-restriction-violation) (make-error . lV4ae1@lV48a2@make-error) (make-assertion-violation . lV4af1@lV48cc@make-assertion-violation) (lexical-violation? . lV4b1e@lV4943@lexical-violation?) (irritants-condition? . lV4afb@lV48e7@irritants-condition?) (implementation-restriction-violation? . lV4b16@lV492e@implementation-restriction-violation?) (error? . lV4ae2@lV48a4@error?) (condition-who . lV4b06@lV4904@condition-who) (condition-message . lV4aca@lV4865@condition-message) (condition-irritants . lV4afc@lV48e9@condition-irritants) (assertion-violation? . lV4af2@lV48ce@assertion-violation?) (no-nans-violation? . lV4baa@lV4ab7@no-nans-violation?) (no-infinities-violation? . lV4ba2@lV4aa2@no-infinities-violation?) (make-no-nans-violation . lV4ba9@lV4ab5@make-no-nans-violation) (make-no-infinities-violation . lV4ba1@lV4aa0@make-no-infinities-violation) (assertion-error . lV47e3@lV2d88@assertion-error))))) (if lV507b@t (cdr lV507b@t) '#f)))) (lV28bb@lV2707@install-library 'lV5056 '(mosh interaction) '() '() '() '() '((regexp? . lV504e) (alist->eq-hash-table . lV504a) (format . lV5047) (string-split . lV503c) (call-process . lV5036) (set-current-directory! . lV5032) (expand-path . lV5031) (current-directory . lV5030) (%spawn . lV502f) (%waitpid . lV502e) (simple-struct-name . lV502d) (simple-struct-set! . lV502c) (simple-struct-ref . lV502b) (make-simple-struct . lV502a) (simple-struct? . lV5029) (pointer-ref-c-int64 . lV5028) (pointer-ref-c-int32 . lV5027) (pointer-ref-c-int16 . lV5026) (pointer-ref-c-int8 . lV5025) (pointer-ref-c-uint64 . lV5024) (pointer-ref-c-uint32 . lV5023) (pointer-ref-c-uint16 . lV5022) (pointer-ref-c-uint8 . lV5021) (pointer-set-c-uint64! . lV5020) (pointer-set-c-uint32! . lV501f) (pointer-set-c-uint16! . lV501e) (pointer-set-c-uint8! . lV501d) (pointer-set-c-int64! . lV501c) (pointer-set-c-int32! . lV501b) (pointer-set-c-int16! . lV501a) (pointer-set-c-int8! . lV5019) (pointer-set-c-pointer! . lV5018) (pointer-set-c-double! . lV5017) (pointer-set-c-float! . lV5016) (pointer-set-c-long-long! . lV5015) (pointer-set-c-long! . lV5014) (pointer-set-c-int! . lV5013) (pointer-set-c-short! . lV5012) (pointer-set-c-char! . lV5011) (pointer-ref-c-pointer . lV5010) (pointer-ref-c-double . lV500f) (pointer-ref-c-float . lV500e) (pointer-ref-c-unsigned-long-long . lV500d) (pointer-ref-c-signed-long-long . lV500c) (pointer-ref-c-unsigned-long . lV500b) (pointer-ref-c-signed-long . lV500a) (pointer-ref-c-unsigned-int . lV5009) (pointer-ref-c-signed-int . lV5008) (pointer-ref-c-unsigned-short . lV5007) (pointer-ref-c-signed-short . lV5006) (pointer-ref-c-unsigned-char . lV5005) (pointer-ref-c-signed-char . lV5004) (pointer->integer . lV5003) (integer->pointer . lV5002) (pointer? . lV5001) (shared-errno . lV5000) (%ffi-supported? . lV4ffd) (%ffi-pointer->string . lV4ffc) (%ffi-call->string-or-zero . lV4ffb) (%ffi-call->double . lV4ffa) (%ffi-call->void* . lV4ff9) (%ffi-call->void . lV4ff8) (%ffi-call->char . lV4ff7) (%ffi-call->int . lV4ff6) (%ffi-lookup . lV4ff5) (%ffi-open . lV4ff4) (%fork . lV4ff3) (%pipe . lV4ff2) (p . lV4ff1) (whereis . lV4fd5) (register . lV4fd4) (vm-join! . lV4fd3) (vm-set-value! . lV4fd2) (vm? . lV4fd1) (main-vm? . lV4fd0) (vm-eval . lV4fcf) (vm-self . lV4fce) (vm-start! . lV4fcd) (make-vm . lV4fcc) (mutex-try-lock! . lV4fcb) (mutex-unlock! . lV4fca) (mutex-lock! . lV4fc9) (mutex? . lV4fc8) (make-mutex . lV4fc7) (condition-variable-notify-all! . lV4fc6) (condition-variable-notify! . lV4fc5) (condition-variable-wait! . lV4fc4) (make-condition-variable . lV4fc3) (string-upcase . lV4fab) (string-titlecase . lV4faa) (string-normalize-nfkd . lV4fa9) (string-normalize-nfkc . lV4fa8) (string-normalize-nfd . lV4fa7) (string-normalize-nfc . lV4fa6) (string-foldcase . lV4fa5) (string-downcase . lV4fa4) (string-ci>? . lV4fa3) (string-ci>=? . lV4fa2) (string-ci=? . lV4fa1) (string-ci<? . lV4fa0) (string-ci<=? . lV4f9f) (char-whitespace? . lV4f9e) (char-upper-case? . lV4f9d) (char-title-case? . lV4f9c) (char-numeric? . lV4f9b) (char-lower-case? . lV4f9a) (char-general-category . lV4f99) (char-upcase . lV4f98) (char-titlecase . lV4f97) (char-foldcase . lV4f96) (char-downcase . lV4f95) (char-ci>? . lV4f94) (char-ci>=? . lV4f93) (char-ci=? . lV4f92) (char-ci<? . lV4f91) (char-ci<=? . lV4f90) (char-alphabetic? . lV4f8f) (make-variable-transformer . lV2ad8) (identifier? . lV2d8f) (generate-temporaries . lV2d7b) (free-identifier=? . lV2d7d) (syntax->datum . lV2d93) (datum->syntax . lV2d91) (bound-identifier=? . lV2d7f) (record-type-descriptor? . lV4f8e) (record-predicate . lV4f8d) (record-mutator . lV4f8c) (record-constructor . lV4f8b) (record-accessor . lV4f8a) (make-record-type-descriptor . lV4f89) (make-record-constructor-descriptor . lV4f88) (record? . lV4f87) (record-type-uid . lV4f86) (record-type-sealed? . lV4f85) (record-type-parent . lV4f84) (record-type-opaque? . lV4f83) (record-type-name . lV4f82) (record-type-generative? . lV4f81) (record-type-field-names . lV4f80) (record-rtd . lV4f7f) (record-field-mutable? . lV4f7e) (delete-file . lV4f7d) (file-exists? . lV4f7c) (vector-sort! . lV4f7b) (vector-sort . lV4f7a) (list-sort . lV4f79) (symbol-hash . lV4f78) (string-ci-hash . lV4f77) (string-hash . lV4f76) (equal-hash . lV4f75) (hashtable-equivalence-function . lV4f74) (make-hashtable . lV4f73) (hashtable-hash-function . lV4f72) (make-eqv-hashtable . lV4f71) (make-eq-hashtable . lV4f70) (hashtable? . lV4f6f) (hashtable-update! . lV4f6e) (hashtable-size . lV4f6d) (hashtable-set! . lV4f6c) (hashtable-ref . lV4f6b) (hashtable-mutable? . lV4f6a) (hashtable-keys . lV4f69) (hashtable-entries . lV4f68) (hashtable-delete! . lV4f67) (hashtable-copy . lV4f66) (hashtable-contains? . lV4f65) (hashtable-clear! . lV4f64) (call-with-output-file . lV4f63) (call-with-input-file . lV4f62) (write-char . lV4f61) (write . lV4f60) (with-output-to-file . lV4f5f) (with-input-from-file . lV4f5e) (read-char . lV4f5d) (read . lV4f5c) (peek-char . lV4f5b) (open-output-file . lV4f5a) (open-input-file . lV4f59) (newline . lV4f58) (display . lV4f57) (close-output-port . lV4f56) (close-input-port . lV4f55) (eof-object? . lV4f54) (eof-object . lV4f53) (current-error-port . lV4f52) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (utf-8-codec . lV4f4d) (utf-16-codec . lV4f4c) (transcoder-error-handling-mode . lV4f4b) (transcoder-eol-style . lV4f4a) (transcoder-codec . lV4f49) (transcoded-port . lV4f48) (textual-port? . lV4f47) (string->bytevector . lV4f46) (standard-output-port . lV4f45) (standard-input-port . lV4f44) (standard-error-port . lV4f43) (set-port-position! . lV4f42) (put-u8 . lV4f41) (put-string . lV4f40) (put-datum . lV4f3f) (put-char . lV4f3e) (put-bytevector . lV4f3d) (port? . lV4f3c) (port-transcoder . lV4f3b) (port-position . lV4f3a) (port-has-set-port-position!? . lV4f39) (port-has-port-position? . lV4f38) (port-eof? . lV4f37) (output-port-buffer-mode . lV4f36) (open-string-output-port . lV4f35) (open-string-input-port . lV4f34) (open-file-output-port . lV4f33) (open-file-input/output-port . lV4f32) (open-file-input-port . lV4f31) (open-bytevector-output-port . lV4f30) (open-bytevector-input-port . lV4f2f) (native-transcoder . lV4f2e) (native-eol-style . lV4f2d) (make-transcoder . lV4f2c) (latin-1-codec . lV4f2b) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (make-i/o-encoding-error . lV4a86) (make-i/o-decoding-error . lV4a6f) (make-custom-textual-output-port . lV4f2a) (make-custom-textual-input/output-port . lV4f29) (make-custom-textual-input-port . lV4f28) (make-custom-binary-output-port . lV4f27) (make-custom-binary-input/output-port . lV4f26) (make-custom-binary-input-port . lV4f25) (make-bytevector . lV4f24) (lookahead-u8 . lV4f23) (lookahead-char . lV4f22) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (i/o-encoding-error? . lV4a8a) (i/o-encoding-error-char . lV4a8c) (i/o-decoding-error? . lV4a71) (get-u8 . lV4f21) (get-string-n! . lV4f20) (get-string-n . lV4f1f) (get-string-all . lV4f1e) (get-line . lV4f1d) (get-datum . lV4f1c) (get-char . lV4f1b) (get-bytevector-some . lV4f1a) (get-bytevector-n! . lV4f19) (get-bytevector-n . lV4f18) (get-bytevector-all . lV4f17) (flush-output-port . lV4f16) (close-port . lV4f15) (exit . lV4f0d) (command-line . lV4bc5) (string-fill! . lV4f0c) (string-set! . lV4f0b) (set-cdr! . lV4f0a) (set-car! . lV4f09) (remove . lV4f08) (remv . lV4f07) (remp . lV4f06) (remq . lV4f05) (partition . lV4f04) (memv . lV4f03) (memq . lV4f02) (memp . lV4f01) (member . lV4f00) (exists . lV4eff) (for-all . lV4efe) (fold-right . lV4efd) (fold-left . lV4efc) (find . lV4efb) (filter . lV4efa) (cons* . lV4ef9) (assv . lV4ef8) (assq . lV4ef7) (assp . lV4ef6) (assoc . lV4ef5) (call-with-string-output-port . lV4ef4) (call-with-port . lV4ef3) (call-with-bytevector-output-port . lV4ef2) (bytevector->string . lV4ef1) (buffer-mode? . lV4ef0) (binary-port? . lV4eef) (with-exception-handler . lV4eee) (raise-continuable . lV4eed) (raise . lV4eec) (eval . lV2d6d) (environment . lV2d65) (make-enumeration . lV4eeb) (enum-set=? . lV4eea) (enum-set-universe . lV4ee9) (enum-set-union . lV4ee8) (enum-set-subset? . lV4ee7) (enum-set-projection . lV4ee6) (enum-set-member? . lV4ee5) (enum-set-intersection . lV4ee4) (enum-set-indexer . lV4ee3) (enum-set-difference . lV4ee2) (enum-set-constructor . lV4ee1) (enum-set-complement . lV4ee0) (enum-set->list . lV4edf) (who-condition? . lV4901) (warning? . lV4879) (violation? . lV48b8) (undefined-violation? . lV4978) (syntax-violation? . lV495f) (syntax-violation-subform . lV4963) (syntax-violation-form . lV4961) (syntax-violation . lV2d8d) (simple-conditions . lV4ede) (serious-condition? . lV488e) (non-continuable-violation? . lV4918) (message-condition? . lV4862) (make-who-condition . lV48fd) (make-warning . lV4877) (make-violation . lV48b6) (make-undefined-violation . lV4976) (make-syntax-violation . lV4959) (make-serious-condition . lV488c) (make-non-continuable-violation . lV4916) (make-message-condition . lV485e) (make-lexical-violation . lV4940) (make-irritants-condition . lV48e2) (make-implementation-restriction-violation . lV492b) (make-error . lV48a1) (make-assertion-violation . lV48cb) (lexical-violation? . lV4942) (irritants-condition? . lV48e6) (implementation-restriction-violation? . lV492d) (error? . lV48a3) (condition-who . lV4903) (condition-predicate . lV4edd) (condition-message . lV4864) (condition-irritants . lV48e8) (condition-accessor . lV4edc) (condition . lV4edb) (assertion-violation? . lV48cd) (condition? . lV4eda) (utf32->string . lV4ed9) (utf16->string . lV4ed8) (utf8->string . lV4ed7) (uint-list->bytevector . lV4ed6) (u8-list->bytevector . lV4ed5) (string->utf8 . lV4ed4) (string->utf32 . lV4ed3) (string->utf16 . lV4ed2) (sint-list->bytevector . lV4ed1) (native-endianness . lV4ed0) (bytevector? . lV4ecf) (bytevector=? . lV4ece) (bytevector-uint-set! . lV4ecd) (bytevector-uint-ref . lV4ecc) (bytevector-u8-set! . lV4ecb) (bytevector-u8-ref . lV4eca) (bytevector-u64-set! . lV4ec9) (bytevector-u64-ref . lV4ec8) (bytevector-u64-native-set! . lV4ec7) (bytevector-u64-native-ref . lV4ec6) (bytevector-u32-set! . lV4ec5) (bytevector-u32-ref . lV4ec4) (bytevector-u32-native-set! . lV4ec3) (bytevector-u32-native-ref . lV4ec2) (bytevector-u16-set! . lV4ec1) (bytevector-u16-ref . lV4ec0) (bytevector-u16-native-set! . lV4ebf) (bytevector-u16-native-ref . lV4ebe) (bytevector-sint-set! . lV4ebd) (bytevector-sint-ref . lV4ebc) (bytevector-s8-set! . lV4ebb) (bytevector-s8-ref . lV4eba) (bytevector-s64-set! . lV4eb9) (bytevector-s64-ref . lV4eb8) (bytevector-s64-native-set! . lV4eb7) (bytevector-s64-native-ref . lV4eb6) (bytevector-s32-set! . lV4eb5) (bytevector-s32-ref . lV4eb4) (bytevector-s32-native-set! . lV4eb3) (bytevector-s32-native-ref . lV4eb2) (bytevector-s16-set! . lV4eb1) (bytevector-s16-ref . lV4eb0) (bytevector-s16-native-set! . lV4eaf) (bytevector-s16-native-ref . lV4eae) (bytevector-length . lV4ead) (bytevector-ieee-single-ref . lV4eac) (bytevector-ieee-single-set! . lV4eab) (bytevector-ieee-single-native-set! . lV4eaa) (bytevector-ieee-single-native-ref . lV4ea9) (bytevector-ieee-double-set! . lV4ea8) (bytevector-ieee-double-ref . lV4ea7) (bytevector-ieee-double-native-set! . lV4ea6) (bytevector-ieee-double-native-ref . lV4ea5) (bytevector-fill! . lV4ea4) (bytevector-copy! . lV4ea3) (bytevector-copy . lV4ea2) (bytevector->uint-list . lV4ea1) (bytevector->u8-list . lV4ea0) (bytevector->sint-list . lV4e9f) (no-nans-violation? . lV4ab6) (no-infinities-violation? . lV4aa1) (make-no-nans-violation . lV4ab4) (make-no-infinities-violation . lV4a9f) (real->flonum . lV4e9e) (flzero? . lV4e9d) (fltruncate . lV4e9c) (fltan . lV4e9b) (flsqrt . lV4e9a) (flsin . lV4e99) (flround . lV4e98) (flpositive? . lV4e97) (flonum? . lV4e96) (flodd? . lV4e95) (flnumerator . lV4e94) (flnegative? . lV4e93) (flnan? . lV4e92) (flmod0 . lV4e91) (flmod . lV4e90) (flmin . lV4e8f) (flmax . lV4e8e) (fllog . lV4e8d) (flinteger? . lV4e8c) (flinfinite? . lV4e8b) (flfloor . lV4e8a) (flfinite? . lV4e89) (flexpt . lV4e88) (flexp . lV4e87) (fleven? . lV4e86) (fldiv0-and-mod0 . lV4e85) (fldiv0 . lV4e84) (fldiv-and-mod . lV4e83) (fldiv . lV4e82) (fldenominator . lV4e81) (flcos . lV4e80) (flceiling . lV4e7f) (flatan . lV4e7e) (flasin . lV4e7d) (flacos . lV4e7c) (flabs . lV4e7b) (fl>? . lV4e7a) (fl>=? . lV4e79) (fl=? . lV4e78) (fl<? . lV4e77) (fl<=? . lV4e76) (fl/ . lV4e75) (fl- . lV4e74) (fl+ . lV4e73) (fl* . lV4e72) (fixnum->flonum . lV4e71) (fxzero? . lV4e70) (fxxor . lV4e6f) (fxrotate-bit-field . lV4e6e) (fxreverse-bit-field . lV4e6d) (fxpositive? . lV4e6c) (fxodd? . lV4e6b) (fxnot . lV4e6a) (fxnegative? . lV4e69) (fxmod0 . lV4e68) (fxmod . lV4e67) (fxmin . lV4e66) (fxmax . lV4e65) (fxlength . lV4e64) (fxior . lV4e63) (fxif . lV4e62) (fxfirst-bit-set . lV4e61) (fxeven? . lV4e60) (fxdiv0-and-mod0 . lV4e5f) (fxdiv0 . lV4e5e) (fxdiv-and-mod . lV4e5d) (fxdiv . lV4e5c) (fxcopy-bit-field . lV4e5b) (fxcopy-bit . lV4e5a) (fxbit-set? . lV4e59) (fxbit-field . lV4e58) (fxbit-count . lV4e57) (fxarithmetic-shift-right . lV4e56) (fxarithmetic-shift-left . lV4e55) (fxarithmetic-shift . lV4e54) (fxand . lV4e53) (fx>? . lV4e52) (fx>=? . lV4e51) (fx=? . lV4e50) (fx<? . lV4e4f) (fx<=? . lV4e4e) (fx-/carry . lV4e4d) (fx- . lV4e4c) (fx+/carry . lV4e4b) (fx+ . lV4e4a) (fx*/carry . lV4e49) (fx* . lV4e48) (greatest-fixnum . lV4e47) (least-fixnum . lV4e46) (fixnum-width . lV4e45) (fixnum? . lV4e44) (bitwise-rotate-bit-field . lV4e43) (bitwise-reverse-bit-field . lV4e42) (bitwise-length . lV4e41) (bitwise-if . lV4e40) (bitwise-first-bit-set . lV4e3f) (bitwise-copy-bit-field . lV4e3e) (bitwise-copy-bit . lV4e3d) (bitwise-bit-set? . lV4e3c) (bitwise-bit-field . lV4e3b) (bitwise-bit-count . lV4e3a) (bitwise-xor . lV4e39) (bitwise-ior . lV4e38) (bitwise-and . lV4e37) (bitwise-not . lV4e36) (bitwise-arithmetic-shift-right . lV4e35) (bitwise-arithmetic-shift-left . lV4e34) (bitwise-arithmetic-shift . lV4e33) (zero? . lV4e32) (vector? . lV4e31) (vector-set! . lV4e30) (vector-ref . lV4e2f) (vector-map . lV4e2e) (vector-length . lV4e2d) (vector-for-each . lV4e2c) (vector-fill! . lV4e2b) (vector->list . lV4e2a) (vector . lV4e29) (values . lV4e28) (truncate . lV4e27) (tan . lV4e26) (symbol? . lV4e25) (symbol=? . lV4e24) (symbol->string . lV4e23) (substring . lV4e22) (string? . lV4e21) (string>? . lV4e20) (string>=? . lV4e1f) (string=? . lV4e1e) (string<? . lV4e1d) (string<=? . lV4e1c) (string-ref . lV4e1b) (string-length . lV4e1a) (string-for-each . lV4e19) (string-copy . lV4e18) (string-append . lV4e17) (string->symbol . lV4e16) (string->number . lV4e15) (string->list . lV4e14) (string . lV4e13) (sqrt . lV4e12) (sin . lV4e11) (round . lV4e10) (reverse . lV4e0f) (real? . lV4e0e) (real-valued? . lV4e0d) (real-part . lV4e0c) (rationalize . lV4e0b) (rational? . lV4e0a) (rational-valued? . lV4e09) (procedure? . lV4e08) (positive? . lV4e07) (pair? . lV4e06) (odd? . lV4e05) (numerator . lV4e04) (number? . lV4e03) (number->string . lV4e02) (null? . lV4e01) (not . lV4e00) (negative? . lV4dff) (nan? . lV4dfe) (min . lV4dfd) (max . lV4dfc) (map . lV4dfb) (make-vector . lV4dfa) (make-string . lV4df9) (make-rectangular . lV4df8) (make-polar . lV4df7) (magnitude . lV4df6) (log . lV4df5) (list? . lV4df4) (list-tail . lV4df3) (list-ref . lV4df2) (list->vector . lV4df1) (list->string . lV4df0) (list . lV4def) (length . lV4dee) (lcm . lV4ded) (integer? . lV4dec) (integer-valued? . lV4deb) (integer->char . lV4dea) (infinite? . lV4de9) (inexact? . lV4de8) (inexact . lV4de7) (imag-part . lV4de6) (gcd . lV4de5) (for-each . lV4de4) (floor . lV4de3) (finite? . lV4de2) (expt . lV4de1) (exp . lV4de0) (exact? . lV4ddf) (exact-integer-sqrt . lV4dde) (exact . lV4ddd) (even? . lV4ddc) (error . lV4ddb) (eqv? . lV4dda) (equal? . lV4dd9) (eq? . lV4dd8) (dynamic-wind . lV4dd7) (div0-and-mod0 . lV4dd6) (mod0 . lV4dd5) (div0 . lV4dd4) (div-and-mod . lV4dd3) (mod . lV4dd2) (div . lV4dd1) (denominator . lV4dd0) (cos . lV4dcf) (cons . lV4dce) (complex? . lV4dcd) (char? . lV4dcc) (char>? . lV4dcb) (char>=? . lV4dca) (char=? . lV4dc9) (char<? . lV4dc8) (char<=? . lV4dc7) (char->integer . lV4dc6) (ceiling . lV4dc5) (call-with-values . lV4dc4) (call/cc . lV4dc3) (call-with-current-continuation . lV4dc2) (cddddr . lV4dc1) (cdddar . lV4dc0) (cddadr . lV4dbf) (cddaar . lV4dbe) (cdaddr . lV4dbd) (cdadar . lV4dbc) (cdaadr . lV4dbb) (cdaaar . lV4dba) (cadddr . lV4db9) (caddar . lV4db8) (cadadr . lV4db7) (cadaar . lV4db6) (caaddr . lV4db5) (caadar . lV4db4) (caaadr . lV4db3) (caaaar . lV4db2) (cdddr . lV4db1) (cddar . lV4db0) (cdadr . lV4daf) (cdaar . lV4dae) (caddr . lV4dad) (cadar . lV4dac) (caadr . lV4dab) (caaar . lV4daa) (cddr . lV4da9) (cdar . lV4da8) (cadr . lV4da7) (caar . lV4da6) (cdr . lV4da5) (car . lV4da4) (boolean? . lV4da3) (boolean=? . lV4da2) (atan . lV4da1) (assertion-violation . lV4da0) (asin . lV4d9f) (apply . lV4d9e) (append . lV4d9d) (angle . lV4d9c) (acos . lV4d9b) (abs . lV4d9a) (/ . lV4d99) (* . lV4d98) (- . lV4d97) (+ . lV4d96) (>= . lV4d95) (> . lV4d94) (= . lV4d93) (<= . lV4d92) (< . lV4d91) (library . lV4d90) (&no-nans . lV4d8f) (&no-infinities . lV4d8e) (&i/o-encoding . lV4d8d) (&i/o-decoding . lV4d8c) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82) (&undefined . lV4d81) (&syntax . lV4d80) (&lexical . lV4d7f) (&implementation-restriction . lV4d7e) (&non-continuable . lV4d7d) (&who . lV4d7c) (&irritants . lV4d7b) (&assertion . lV4d7a) (&violation . lV4d79) (&error . lV4d78) (&serious . lV4d77) (&warning . lV4d76) (&message . lV4d75) (&condition . lV4d74) (define-condition-type . lV4d73) (define-enumeration . lV4d72) (define-record-type . lV4d71) (parent-rtd . lV4d70) (nongenerative . lV4d6f) (opaque . lV4d6e) (sealed . lV4d6d) (protocol . lV4d6c) (parent . lV4d6b) (immutable . lV4d6a) (mutable . lV4d69) (fields . lV4d68) (error-handling-mode . lV4d67) (file-options . lV4d66) (buffer-mode . lV4d65) (eol-style . lV4d64) (guard . lV4d63) (unsyntax-splicing . lV4d60) (unsyntax . lV4d5f) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (_ . lV4d5c) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (assert . lV4d58) (endianness . lV4d57) (time . lV4d55) (do . lV4d54) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (let*-values . lV4d50) (let-values . lV4d4f) (identifier-syntax . lV4d4e) (with-syntax . lV4d4d) (quasisyntax . lV4d4c) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (include . lV4d49) (record-constructor-descriptor . lV4d47) (record-type-descriptor . lV4d46) (case . lV4d45) (unless . lV4d43) (when . lV4d42) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec* . lV4d3d) (letrec . lV4d3c) (case-lambda . lV4d3a) (lambda . lV4d39) (syntax . lV4d38) (syntax-case . lV4d37) (quote . lV4d36) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (import . lV4d31) (begin . lV4d30) (define-syntax . lV4d2e) (define . lV4d2d)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5057 '(psyntax null-environment-5) '() '() '() '() '((make-promise . lV4f0e) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (_ . lV4d5c) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (delay . lV4d56) (do . lV4d54) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (case . lV4d45) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec . lV4d3c) (lambda . lV4d39) (quote . lV4d36) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (begin . lV4d30) (define-syntax . lV4d2e) (define . lV4d2d)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5058 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . lV4fa3) (string-ci>=? . lV4fa2) (string-ci=? . lV4fa1) (string-ci<? . lV4fa0) (string-ci<=? . lV4f9f) (char-whitespace? . lV4f9e) (char-upper-case? . lV4f9d) (char-numeric? . lV4f9b) (char-lower-case? . lV4f9a) (char-upcase . lV4f98) (char-downcase . lV4f95) (char-ci>? . lV4f94) (char-ci>=? . lV4f93) (char-ci=? . lV4f92) (char-ci<? . lV4f91) (char-ci<=? . lV4f90) (char-alphabetic? . lV4f8f) (call-with-output-file . lV4f63) (call-with-input-file . lV4f62) (write-char . lV4f61) (write . lV4f60) (with-output-to-file . lV4f5f) (with-input-from-file . lV4f5e) (read-char . lV4f5d) (read . lV4f5c) (peek-char . lV4f5b) (open-output-file . lV4f5a) (open-input-file . lV4f59) (newline . lV4f58) (display . lV4f57) (close-output-port . lV4f56) (close-input-port . lV4f55) (eof-object . lV4f53) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (scheme-report-environment . lV2d69) (quotient . lV4f14) (null-environment . lV2d67) (remainder . lV4f13) (modulo . lV4f12) (inexact->exact . lV4f11) (force . lV4f10) (exact->inexact . lV4f0f) (make-promise . lV4f0e) (string-fill! . lV4f0c) (string-set! . lV4f0b) (set-cdr! . lV4f0a) (set-car! . lV4f09) (memv . lV4f03) (memq . lV4f02) (member . lV4f00) (assv . lV4ef8) (assq . lV4ef7) (assoc . lV4ef5) (eval . lV2d6d) (zero? . lV4e32) (vector? . lV4e31) (vector-set! . lV4e30) (vector-ref . lV4e2f) (vector-length . lV4e2d) (vector-fill! . lV4e2b) (vector->list . lV4e2a) (vector . lV4e29) (values . lV4e28) (truncate . lV4e27) (tan . lV4e26) (symbol? . lV4e25) (symbol->string . lV4e23) (substring . lV4e22) (string? . lV4e21) (string>? . lV4e20) (string>=? . lV4e1f) (string=? . lV4e1e) (string<? . lV4e1d) (string<=? . lV4e1c) (string-ref . lV4e1b) (string-length . lV4e1a) (string-copy . lV4e18) (string-append . lV4e17) (string->symbol . lV4e16) (string->number . lV4e15) (string->list . lV4e14) (string . lV4e13) (sqrt . lV4e12) (sin . lV4e11) (round . lV4e10) (reverse . lV4e0f) (real? . lV4e0e) (real-part . lV4e0c) (rationalize . lV4e0b) (rational? . lV4e0a) (procedure? . lV4e08) (positive? . lV4e07) (pair? . lV4e06) (odd? . lV4e05) (numerator . lV4e04) (number? . lV4e03) (number->string . lV4e02) (not . lV4e00) (negative? . lV4dff) (min . lV4dfd) (max . lV4dfc) (map . lV4dfb) (make-vector . lV4dfa) (make-string . lV4df9) (make-rectangular . lV4df8) (make-polar . lV4df7) (magnitude . lV4df6) (log . lV4df5) (list? . lV4df4) (list-tail . lV4df3) (list-ref . lV4df2) (list->vector . lV4df1) (list->string . lV4df0) (list . lV4def) (length . lV4dee) (lcm . lV4ded) (integer? . lV4dec) (integer->char . lV4dea) (inexact? . lV4de8) (imag-part . lV4de6) (gcd . lV4de5) (for-each . lV4de4) (floor . lV4de3) (expt . lV4de1) (exp . lV4de0) (exact? . lV4ddf) (even? . lV4ddc) (eqv? . lV4dda) (equal? . lV4dd9) (eq? . lV4dd8) (dynamic-wind . lV4dd7) (denominator . lV4dd0) (cos . lV4dcf) (cons . lV4dce) (complex? . lV4dcd) (char? . lV4dcc) (char>? . lV4dcb) (char>=? . lV4dca) (char=? . lV4dc9) (char<? . lV4dc8) (char<=? . lV4dc7) (char->integer . lV4dc6) (ceiling . lV4dc5) (call-with-values . lV4dc4) (call-with-current-continuation . lV4dc2) (cddddr . lV4dc1) (cdddar . lV4dc0) (cddadr . lV4dbf) (cddaar . lV4dbe) (cdaddr . lV4dbd) (cdadar . lV4dbc) (cdaadr . lV4dbb) (cdaaar . lV4dba) (cadddr . lV4db9) (caddar . lV4db8) (cadadr . lV4db7) (cadaar . lV4db6) (caaddr . lV4db5) (caadar . lV4db4) (caaadr . lV4db3) (caaaar . lV4db2) (cdddr . lV4db1) (cddar . lV4db0) (cdadr . lV4daf) (cdaar . lV4dae) (caddr . lV4dad) (cadar . lV4dac) (caadr . lV4dab) (caaar . lV4daa) (cddr . lV4da9) (cdar . lV4da8) (cadr . lV4da7) (caar . lV4da6) (cdr . lV4da5) (car . lV4da4) (boolean? . lV4da3) (atan . lV4da1) (asin . lV4d9f) (apply . lV4d9e) (append . lV4d9d) (angle . lV4d9c) (acos . lV4d9b) (abs . lV4d9a) (/ . lV4d99) (* . lV4d98) (- . lV4d97) (+ . lV4d96) (>= . lV4d95) (> . lV4d94) (= . lV4d93) (<= . lV4d92) (< . lV4d91) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (delay . lV4d56) (do . lV4d54) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (case . lV4d45) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec . lV4d3c) (lambda . lV4d39) (quote . lV4d36) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (begin . lV4d30) (define-syntax . lV4d2e) (define . lV4d2d)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5059 '(psyntax modules) '() '() '() '() '((module . lV4d2f)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505b '(rnrs) '(6) '() '() '() '((regexp? . lV504e) (string-upcase . lV4fab) (string-titlecase . lV4faa) (string-normalize-nfkd . lV4fa9) (string-normalize-nfkc . lV4fa8) (string-normalize-nfd . lV4fa7) (string-normalize-nfc . lV4fa6) (string-foldcase . lV4fa5) (string-downcase . lV4fa4) (string-ci>? . lV4fa3) (string-ci>=? . lV4fa2) (string-ci=? . lV4fa1) (string-ci<? . lV4fa0) (string-ci<=? . lV4f9f) (char-whitespace? . lV4f9e) (char-upper-case? . lV4f9d) (char-title-case? . lV4f9c) (char-numeric? . lV4f9b) (char-lower-case? . lV4f9a) (char-general-category . lV4f99) (char-upcase . lV4f98) (char-titlecase . lV4f97) (char-foldcase . lV4f96) (char-downcase . lV4f95) (char-ci>? . lV4f94) (char-ci>=? . lV4f93) (char-ci=? . lV4f92) (char-ci<? . lV4f91) (char-ci<=? . lV4f90) (char-alphabetic? . lV4f8f) (make-variable-transformer . lV2ad8) (identifier? . lV2d8f) (generate-temporaries . lV2d7b) (free-identifier=? . lV2d7d) (syntax->datum . lV2d93) (datum->syntax . lV2d91) (bound-identifier=? . lV2d7f) (record-type-descriptor? . lV4f8e) (record-predicate . lV4f8d) (record-mutator . lV4f8c) (record-constructor . lV4f8b) (record-accessor . lV4f8a) (make-record-type-descriptor . lV4f89) (make-record-constructor-descriptor . lV4f88) (record? . lV4f87) (record-type-uid . lV4f86) (record-type-sealed? . lV4f85) (record-type-parent . lV4f84) (record-type-opaque? . lV4f83) (record-type-name . lV4f82) (record-type-generative? . lV4f81) (record-type-field-names . lV4f80) (record-rtd . lV4f7f) (record-field-mutable? . lV4f7e) (delete-file . lV4f7d) (file-exists? . lV4f7c) (vector-sort! . lV4f7b) (vector-sort . lV4f7a) (list-sort . lV4f79) (symbol-hash . lV4f78) (string-ci-hash . lV4f77) (string-hash . lV4f76) (equal-hash . lV4f75) (hashtable-equivalence-function . lV4f74) (make-hashtable . lV4f73) (hashtable-hash-function . lV4f72) (make-eqv-hashtable . lV4f71) (make-eq-hashtable . lV4f70) (hashtable? . lV4f6f) (hashtable-update! . lV4f6e) (hashtable-size . lV4f6d) (hashtable-set! . lV4f6c) (hashtable-ref . lV4f6b) (hashtable-mutable? . lV4f6a) (hashtable-keys . lV4f69) (hashtable-entries . lV4f68) (hashtable-delete! . lV4f67) (hashtable-copy . lV4f66) (hashtable-contains? . lV4f65) (hashtable-clear! . lV4f64) (call-with-output-file . lV4f63) (call-with-input-file . lV4f62) (write-char . lV4f61) (write . lV4f60) (with-output-to-file . lV4f5f) (with-input-from-file . lV4f5e) (read-char . lV4f5d) (read . lV4f5c) (peek-char . lV4f5b) (open-output-file . lV4f5a) (open-input-file . lV4f59) (newline . lV4f58) (display . lV4f57) (close-output-port . lV4f56) (close-input-port . lV4f55) (eof-object? . lV4f54) (eof-object . lV4f53) (current-error-port . lV4f52) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (utf-8-codec . lV4f4d) (utf-16-codec . lV4f4c) (transcoder-error-handling-mode . lV4f4b) (transcoder-eol-style . lV4f4a) (transcoder-codec . lV4f49) (transcoded-port . lV4f48) (textual-port? . lV4f47) (string->bytevector . lV4f46) (standard-output-port . lV4f45) (standard-input-port . lV4f44) (standard-error-port . lV4f43) (set-port-position! . lV4f42) (put-u8 . lV4f41) (put-string . lV4f40) (put-datum . lV4f3f) (put-char . lV4f3e) (put-bytevector . lV4f3d) (port? . lV4f3c) (port-transcoder . lV4f3b) (port-position . lV4f3a) (port-has-set-port-position!? . lV4f39) (port-has-port-position? . lV4f38) (port-eof? . lV4f37) (output-port-buffer-mode . lV4f36) (open-string-output-port . lV4f35) (open-string-input-port . lV4f34) (open-file-output-port . lV4f33) (open-file-input/output-port . lV4f32) (open-file-input-port . lV4f31) (open-bytevector-output-port . lV4f30) (open-bytevector-input-port . lV4f2f) (native-transcoder . lV4f2e) (native-eol-style . lV4f2d) (make-transcoder . lV4f2c) (latin-1-codec . lV4f2b) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (make-i/o-encoding-error . lV4a86) (make-i/o-decoding-error . lV4a6f) (make-custom-textual-output-port . lV4f2a) (make-custom-textual-input/output-port . lV4f29) (make-custom-textual-input-port . lV4f28) (make-custom-binary-output-port . lV4f27) (make-custom-binary-input/output-port . lV4f26) (make-custom-binary-input-port . lV4f25) (make-bytevector . lV4f24) (lookahead-u8 . lV4f23) (lookahead-char . lV4f22) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (i/o-encoding-error? . lV4a8a) (i/o-encoding-error-char . lV4a8c) (i/o-decoding-error? . lV4a71) (get-u8 . lV4f21) (get-string-n! . lV4f20) (get-string-n . lV4f1f) (get-string-all . lV4f1e) (get-line . lV4f1d) (get-datum . lV4f1c) (get-char . lV4f1b) (get-bytevector-some . lV4f1a) (get-bytevector-n! . lV4f19) (get-bytevector-n . lV4f18) (get-bytevector-all . lV4f17) (flush-output-port . lV4f16) (close-port . lV4f15) (exit . lV4f0d) (command-line . lV4bc5) (remove . lV4f08) (remv . lV4f07) (remp . lV4f06) (remq . lV4f05) (partition . lV4f04) (memv . lV4f03) (memq . lV4f02) (memp . lV4f01) (member . lV4f00) (exists . lV4eff) (for-all . lV4efe) (fold-right . lV4efd) (fold-left . lV4efc) (find . lV4efb) (filter . lV4efa) (cons* . lV4ef9) (assv . lV4ef8) (assq . lV4ef7) (assp . lV4ef6) (assoc . lV4ef5) (call-with-string-output-port . lV4ef4) (call-with-port . lV4ef3) (call-with-bytevector-output-port . lV4ef2) (bytevector->string . lV4ef1) (buffer-mode? . lV4ef0) (binary-port? . lV4eef) (with-exception-handler . lV4eee) (raise-continuable . lV4eed) (raise . lV4eec) (make-enumeration . lV4eeb) (enum-set=? . lV4eea) (enum-set-universe . lV4ee9) (enum-set-union . lV4ee8) (enum-set-subset? . lV4ee7) (enum-set-projection . lV4ee6) (enum-set-member? . lV4ee5) (enum-set-intersection . lV4ee4) (enum-set-indexer . lV4ee3) (enum-set-difference . lV4ee2) (enum-set-constructor . lV4ee1) (enum-set-complement . lV4ee0) (enum-set->list . lV4edf) (who-condition? . lV4901) (warning? . lV4879) (violation? . lV48b8) (undefined-violation? . lV4978) (syntax-violation? . lV495f) (syntax-violation-subform . lV4963) (syntax-violation-form . lV4961) (syntax-violation . lV2d8d) (simple-conditions . lV4ede) (serious-condition? . lV488e) (non-continuable-violation? . lV4918) (message-condition? . lV4862) (make-who-condition . lV48fd) (make-warning . lV4877) (make-violation . lV48b6) (make-undefined-violation . lV4976) (make-syntax-violation . lV4959) (make-serious-condition . lV488c) (make-non-continuable-violation . lV4916) (make-message-condition . lV485e) (make-lexical-violation . lV4940) (make-irritants-condition . lV48e2) (make-implementation-restriction-violation . lV492b) (make-error . lV48a1) (make-assertion-violation . lV48cb) (lexical-violation? . lV4942) (irritants-condition? . lV48e6) (implementation-restriction-violation? . lV492d) (error? . lV48a3) (condition-who . lV4903) (condition-predicate . lV4edd) (condition-message . lV4864) (condition-irritants . lV48e8) (condition-accessor . lV4edc) (condition . lV4edb) (assertion-violation? . lV48cd) (condition? . lV4eda) (utf32->string . lV4ed9) (utf16->string . lV4ed8) (utf8->string . lV4ed7) (uint-list->bytevector . lV4ed6) (u8-list->bytevector . lV4ed5) (string->utf8 . lV4ed4) (string->utf32 . lV4ed3) (string->utf16 . lV4ed2) (sint-list->bytevector . lV4ed1) (native-endianness . lV4ed0) (bytevector? . lV4ecf) (bytevector=? . lV4ece) (bytevector-uint-set! . lV4ecd) (bytevector-uint-ref . lV4ecc) (bytevector-u8-set! . lV4ecb) (bytevector-u8-ref . lV4eca) (bytevector-u64-set! . lV4ec9) (bytevector-u64-ref . lV4ec8) (bytevector-u64-native-set! . lV4ec7) (bytevector-u64-native-ref . lV4ec6) (bytevector-u32-set! . lV4ec5) (bytevector-u32-ref . lV4ec4) (bytevector-u32-native-set! . lV4ec3) (bytevector-u32-native-ref . lV4ec2) (bytevector-u16-set! . lV4ec1) (bytevector-u16-ref . lV4ec0) (bytevector-u16-native-set! . lV4ebf) (bytevector-u16-native-ref . lV4ebe) (bytevector-sint-set! . lV4ebd) (bytevector-sint-ref . lV4ebc) (bytevector-s8-set! . lV4ebb) (bytevector-s8-ref . lV4eba) (bytevector-s64-set! . lV4eb9) (bytevector-s64-ref . lV4eb8) (bytevector-s64-native-set! . lV4eb7) (bytevector-s64-native-ref . lV4eb6) (bytevector-s32-set! . lV4eb5) (bytevector-s32-ref . lV4eb4) (bytevector-s32-native-set! . lV4eb3) (bytevector-s32-native-ref . lV4eb2) (bytevector-s16-set! . lV4eb1) (bytevector-s16-ref . lV4eb0) (bytevector-s16-native-set! . lV4eaf) (bytevector-s16-native-ref . lV4eae) (bytevector-length . lV4ead) (bytevector-ieee-single-ref . lV4eac) (bytevector-ieee-single-set! . lV4eab) (bytevector-ieee-single-native-set! . lV4eaa) (bytevector-ieee-single-native-ref . lV4ea9) (bytevector-ieee-double-set! . lV4ea8) (bytevector-ieee-double-ref . lV4ea7) (bytevector-ieee-double-native-set! . lV4ea6) (bytevector-ieee-double-native-ref . lV4ea5) (bytevector-fill! . lV4ea4) (bytevector-copy! . lV4ea3) (bytevector-copy . lV4ea2) (bytevector->uint-list . lV4ea1) (bytevector->u8-list . lV4ea0) (bytevector->sint-list . lV4e9f) (no-nans-violation? . lV4ab6) (no-infinities-violation? . lV4aa1) (make-no-nans-violation . lV4ab4) (make-no-infinities-violation . lV4a9f) (real->flonum . lV4e9e) (flzero? . lV4e9d) (fltruncate . lV4e9c) (fltan . lV4e9b) (flsqrt . lV4e9a) (flsin . lV4e99) (flround . lV4e98) (flpositive? . lV4e97) (flonum? . lV4e96) (flodd? . lV4e95) (flnumerator . lV4e94) (flnegative? . lV4e93) (flnan? . lV4e92) (flmod0 . lV4e91) (flmod . lV4e90) (flmin . lV4e8f) (flmax . lV4e8e) (fllog . lV4e8d) (flinteger? . lV4e8c) (flinfinite? . lV4e8b) (flfloor . lV4e8a) (flfinite? . lV4e89) (flexpt . lV4e88) (flexp . lV4e87) (fleven? . lV4e86) (fldiv0-and-mod0 . lV4e85) (fldiv0 . lV4e84) (fldiv-and-mod . lV4e83) (fldiv . lV4e82) (fldenominator . lV4e81) (flcos . lV4e80) (flceiling . lV4e7f) (flatan . lV4e7e) (flasin . lV4e7d) (flacos . lV4e7c) (flabs . lV4e7b) (fl>? . lV4e7a) (fl>=? . lV4e79) (fl=? . lV4e78) (fl<? . lV4e77) (fl<=? . lV4e76) (fl/ . lV4e75) (fl- . lV4e74) (fl+ . lV4e73) (fl* . lV4e72) (fixnum->flonum . lV4e71) (fxzero? . lV4e70) (fxxor . lV4e6f) (fxrotate-bit-field . lV4e6e) (fxreverse-bit-field . lV4e6d) (fxpositive? . lV4e6c) (fxodd? . lV4e6b) (fxnot . lV4e6a) (fxnegative? . lV4e69) (fxmod0 . lV4e68) (fxmod . lV4e67) (fxmin . lV4e66) (fxmax . lV4e65) (fxlength . lV4e64) (fxior . lV4e63) (fxif . lV4e62) (fxfirst-bit-set . lV4e61) (fxeven? . lV4e60) (fxdiv0-and-mod0 . lV4e5f) (fxdiv0 . lV4e5e) (fxdiv-and-mod . lV4e5d) (fxdiv . lV4e5c) (fxcopy-bit-field . lV4e5b) (fxcopy-bit . lV4e5a) (fxbit-set? . lV4e59) (fxbit-field . lV4e58) (fxbit-count . lV4e57) (fxarithmetic-shift-right . lV4e56) (fxarithmetic-shift-left . lV4e55) (fxarithmetic-shift . lV4e54) (fxand . lV4e53) (fx>? . lV4e52) (fx>=? . lV4e51) (fx=? . lV4e50) (fx<? . lV4e4f) (fx<=? . lV4e4e) (fx-/carry . lV4e4d) (fx- . lV4e4c) (fx+/carry . lV4e4b) (fx+ . lV4e4a) (fx*/carry . lV4e49) (fx* . lV4e48) (greatest-fixnum . lV4e47) (least-fixnum . lV4e46) (fixnum-width . lV4e45) (fixnum? . lV4e44) (bitwise-rotate-bit-field . lV4e43) (bitwise-reverse-bit-field . lV4e42) (bitwise-length . lV4e41) (bitwise-if . lV4e40) (bitwise-first-bit-set . lV4e3f) (bitwise-copy-bit-field . lV4e3e) (bitwise-copy-bit . lV4e3d) (bitwise-bit-set? . lV4e3c) (bitwise-bit-field . lV4e3b) (bitwise-bit-count . lV4e3a) (bitwise-xor . lV4e39) (bitwise-ior . lV4e38) (bitwise-and . lV4e37) (bitwise-not . lV4e36) (bitwise-arithmetic-shift-right . lV4e35) (bitwise-arithmetic-shift-left . lV4e34) (bitwise-arithmetic-shift . lV4e33) (zero? . lV4e32) (vector? . lV4e31) (vector-set! . lV4e30) (vector-ref . lV4e2f) (vector-map . lV4e2e) (vector-length . lV4e2d) (vector-for-each . lV4e2c) (vector-fill! . lV4e2b) (vector->list . lV4e2a) (vector . lV4e29) (values . lV4e28) (truncate . lV4e27) (tan . lV4e26) (symbol? . lV4e25) (symbol=? . lV4e24) (symbol->string . lV4e23) (substring . lV4e22) (string? . lV4e21) (string>? . lV4e20) (string>=? . lV4e1f) (string=? . lV4e1e) (string<? . lV4e1d) (string<=? . lV4e1c) (string-ref . lV4e1b) (string-length . lV4e1a) (string-for-each . lV4e19) (string-copy . lV4e18) (string-append . lV4e17) (string->symbol . lV4e16) (string->number . lV4e15) (string->list . lV4e14) (string . lV4e13) (sqrt . lV4e12) (sin . lV4e11) (round . lV4e10) (reverse . lV4e0f) (real? . lV4e0e) (real-valued? . lV4e0d) (real-part . lV4e0c) (rationalize . lV4e0b) (rational? . lV4e0a) (rational-valued? . lV4e09) (procedure? . lV4e08) (positive? . lV4e07) (pair? . lV4e06) (odd? . lV4e05) (numerator . lV4e04) (number? . lV4e03) (number->string . lV4e02) (null? . lV4e01) (not . lV4e00) (negative? . lV4dff) (nan? . lV4dfe) (min . lV4dfd) (max . lV4dfc) (map . lV4dfb) (make-vector . lV4dfa) (make-string . lV4df9) (make-rectangular . lV4df8) (make-polar . lV4df7) (magnitude . lV4df6) (log . lV4df5) (list? . lV4df4) (list-tail . lV4df3) (list-ref . lV4df2) (list->vector . lV4df1) (list->string . lV4df0) (list . lV4def) (length . lV4dee) (lcm . lV4ded) (integer? . lV4dec) (integer-valued? . lV4deb) (integer->char . lV4dea) (infinite? . lV4de9) (inexact? . lV4de8) (inexact . lV4de7) (imag-part . lV4de6) (gcd . lV4de5) (for-each . lV4de4) (floor . lV4de3) (finite? . lV4de2) (expt . lV4de1) (exp . lV4de0) (exact? . lV4ddf) (exact-integer-sqrt . lV4dde) (exact . lV4ddd) (even? . lV4ddc) (error . lV4ddb) (eqv? . lV4dda) (equal? . lV4dd9) (eq? . lV4dd8) (dynamic-wind . lV4dd7) (div0-and-mod0 . lV4dd6) (mod0 . lV4dd5) (div0 . lV4dd4) (div-and-mod . lV4dd3) (mod . lV4dd2) (div . lV4dd1) (denominator . lV4dd0) (cos . lV4dcf) (cons . lV4dce) (complex? . lV4dcd) (char? . lV4dcc) (char>? . lV4dcb) (char>=? . lV4dca) (char=? . lV4dc9) (char<? . lV4dc8) (char<=? . lV4dc7) (char->integer . lV4dc6) (ceiling . lV4dc5) (call-with-values . lV4dc4) (call/cc . lV4dc3) (call-with-current-continuation . lV4dc2) (cddddr . lV4dc1) (cdddar . lV4dc0) (cddadr . lV4dbf) (cddaar . lV4dbe) (cdaddr . lV4dbd) (cdadar . lV4dbc) (cdaadr . lV4dbb) (cdaaar . lV4dba) (cadddr . lV4db9) (caddar . lV4db8) (cadadr . lV4db7) (cadaar . lV4db6) (caaddr . lV4db5) (caadar . lV4db4) (caaadr . lV4db3) (caaaar . lV4db2) (cdddr . lV4db1) (cddar . lV4db0) (cdadr . lV4daf) (cdaar . lV4dae) (caddr . lV4dad) (cadar . lV4dac) (caadr . lV4dab) (caaar . lV4daa) (cddr . lV4da9) (cdar . lV4da8) (cadr . lV4da7) (caar . lV4da6) (cdr . lV4da5) (car . lV4da4) (boolean? . lV4da3) (boolean=? . lV4da2) (atan . lV4da1) (assertion-violation . lV4da0) (asin . lV4d9f) (apply . lV4d9e) (append . lV4d9d) (angle . lV4d9c) (acos . lV4d9b) (abs . lV4d9a) (/ . lV4d99) (* . lV4d98) (- . lV4d97) (+ . lV4d96) (>= . lV4d95) (> . lV4d94) (= . lV4d93) (<= . lV4d92) (< . lV4d91) (&no-nans . lV4d8f) (&no-infinities . lV4d8e) (&i/o-encoding . lV4d8d) (&i/o-decoding . lV4d8c) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82) (&undefined . lV4d81) (&syntax . lV4d80) (&lexical . lV4d7f) (&implementation-restriction . lV4d7e) (&non-continuable . lV4d7d) (&who . lV4d7c) (&irritants . lV4d7b) (&assertion . lV4d7a) (&violation . lV4d79) (&error . lV4d78) (&serious . lV4d77) (&warning . lV4d76) (&message . lV4d75) (&condition . lV4d74) (define-condition-type . lV4d73) (define-enumeration . lV4d72) (define-record-type . lV4d71) (parent-rtd . lV4d70) (nongenerative . lV4d6f) (opaque . lV4d6e) (sealed . lV4d6d) (protocol . lV4d6c) (parent . lV4d6b) (immutable . lV4d6a) (mutable . lV4d69) (fields . lV4d68) (error-handling-mode . lV4d67) (file-options . lV4d66) (buffer-mode . lV4d65) (eol-style . lV4d64) (guard . lV4d63) (unsyntax-splicing . lV4d60) (unsyntax . lV4d5f) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (_ . lV4d5c) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (assert . lV4d58) (endianness . lV4d57) (do . lV4d54) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (let*-values . lV4d50) (let-values . lV4d4f) (identifier-syntax . lV4d4e) (with-syntax . lV4d4d) (quasisyntax . lV4d4c) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (record-constructor-descriptor . lV4d47) (record-type-descriptor . lV4d46) (case . lV4d45) (unless . lV4d43) (when . lV4d42) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec* . lV4d3d) (letrec . lV4d3c) (case-lambda . lV4d3a) (lambda . lV4d39) (syntax . lV4d38) (syntax-case . lV4d37) (quote . lV4d36) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (begin . lV4d30) (define-syntax . lV4d2e) (define . lV4d2d)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . lV2d69) (quotient . lV4f14) (null-environment . lV2d67) (remainder . lV4f13) (modulo . lV4f12) (inexact->exact . lV4f11) (force . lV4f10) (exact->inexact . lV4f0f) (make-promise . lV4f0e) (delay . lV4d56)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505d '(rnrs control) '(6) '() '() '() '((do . lV4d54) (unless . lV4d43) (when . lV4d42) (case-lambda . lV4d3a)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505e '(rnrs eval) '(6) '() '() '() '((eval . lV2d6d) (environment . lV2d65)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV505f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . lV4f0a) (set-car! . lV4f09)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5060 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . lV4f0c) (string-set! . lV4f0b)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5061 '(rnrs programs) '(6) '() '() '() '((exit . lV4f0d) (command-line . lV4bc5)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5062 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . lV2ad8) (identifier? . lV2d8f) (generate-temporaries . lV2d7b) (free-identifier=? . lV2d7d) (syntax->datum . lV2d93) (datum->syntax . lV2d91) (bound-identifier=? . lV2d7f) (syntax-violation . lV2d8d) (unsyntax-splicing . lV4d60) (unsyntax . lV4d5f) (_ . lV4d5c) (... . lV4d59) (with-syntax . lV4d4d) (quasisyntax . lV4d4c) (syntax . lV4d38) (syntax-case . lV4d37)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5063 '(rnrs files) '(6) '() '() '() '((delete-file . lV4f7d) (file-exists? . lV4f7c) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5064 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . lV4f7b) (vector-sort . lV4f7a) (list-sort . lV4f79)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5065 '(rnrs base) '(6) '() '() '() '((zero? . lV4e32) (vector? . lV4e31) (vector-set! . lV4e30) (vector-ref . lV4e2f) (vector-map . lV4e2e) (vector-length . lV4e2d) (vector-for-each . lV4e2c) (vector-fill! . lV4e2b) (vector->list . lV4e2a) (vector . lV4e29) (values . lV4e28) (truncate . lV4e27) (tan . lV4e26) (symbol? . lV4e25) (symbol=? . lV4e24) (symbol->string . lV4e23) (substring . lV4e22) (string? . lV4e21) (string>? . lV4e20) (string>=? . lV4e1f) (string=? . lV4e1e) (string<? . lV4e1d) (string<=? . lV4e1c) (string-ref . lV4e1b) (string-length . lV4e1a) (string-for-each . lV4e19) (string-copy . lV4e18) (string-append . lV4e17) (string->symbol . lV4e16) (string->number . lV4e15) (string->list . lV4e14) (string . lV4e13) (sqrt . lV4e12) (sin . lV4e11) (round . lV4e10) (reverse . lV4e0f) (real? . lV4e0e) (real-valued? . lV4e0d) (real-part . lV4e0c) (rationalize . lV4e0b) (rational? . lV4e0a) (rational-valued? . lV4e09) (procedure? . lV4e08) (positive? . lV4e07) (pair? . lV4e06) (odd? . lV4e05) (numerator . lV4e04) (number? . lV4e03) (number->string . lV4e02) (null? . lV4e01) (not . lV4e00) (negative? . lV4dff) (nan? . lV4dfe) (min . lV4dfd) (max . lV4dfc) (map . lV4dfb) (make-vector . lV4dfa) (make-string . lV4df9) (make-rectangular . lV4df8) (make-polar . lV4df7) (magnitude . lV4df6) (log . lV4df5) (list? . lV4df4) (list-tail . lV4df3) (list-ref . lV4df2) (list->vector . lV4df1) (list->string . lV4df0) (list . lV4def) (length . lV4dee) (lcm . lV4ded) (integer? . lV4dec) (integer-valued? . lV4deb) (integer->char . lV4dea) (infinite? . lV4de9) (inexact? . lV4de8) (inexact . lV4de7) (imag-part . lV4de6) (gcd . lV4de5) (for-each . lV4de4) (floor . lV4de3) (finite? . lV4de2) (expt . lV4de1) (exp . lV4de0) (exact? . lV4ddf) (exact-integer-sqrt . lV4dde) (exact . lV4ddd) (even? . lV4ddc) (error . lV4ddb) (eqv? . lV4dda) (equal? . lV4dd9) (eq? . lV4dd8) (dynamic-wind . lV4dd7) (div0-and-mod0 . lV4dd6) (mod0 . lV4dd5) (div0 . lV4dd4) (div-and-mod . lV4dd3) (mod . lV4dd2) (div . lV4dd1) (denominator . lV4dd0) (cos . lV4dcf) (cons . lV4dce) (complex? . lV4dcd) (char? . lV4dcc) (char>? . lV4dcb) (char>=? . lV4dca) (char=? . lV4dc9) (char<? . lV4dc8) (char<=? . lV4dc7) (char->integer . lV4dc6) (ceiling . lV4dc5) (call-with-values . lV4dc4) (call/cc . lV4dc3) (call-with-current-continuation . lV4dc2) (cddddr . lV4dc1) (cdddar . lV4dc0) (cddadr . lV4dbf) (cddaar . lV4dbe) (cdaddr . lV4dbd) (cdadar . lV4dbc) (cdaadr . lV4dbb) (cdaaar . lV4dba) (cadddr . lV4db9) (caddar . lV4db8) (cadadr . lV4db7) (cadaar . lV4db6) (caaddr . lV4db5) (caadar . lV4db4) (caaadr . lV4db3) (caaaar . lV4db2) (cdddr . lV4db1) (cddar . lV4db0) (cdadr . lV4daf) (cdaar . lV4dae) (caddr . lV4dad) (cadar . lV4dac) (caadr . lV4dab) (caaar . lV4daa) (cddr . lV4da9) (cdar . lV4da8) (cadr . lV4da7) (caar . lV4da6) (cdr . lV4da5) (car . lV4da4) (boolean? . lV4da3) (boolean=? . lV4da2) (atan . lV4da1) (assertion-violation . lV4da0) (asin . lV4d9f) (apply . lV4d9e) (append . lV4d9d) (angle . lV4d9c) (acos . lV4d9b) (abs . lV4d9a) (/ . lV4d99) (* . lV4d98) (- . lV4d97) (+ . lV4d96) (>= . lV4d95) (> . lV4d94) (= . lV4d93) (<= . lV4d92) (< . lV4d91) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (_ . lV4d5c) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (assert . lV4d58) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (let*-values . lV4d50) (let-values . lV4d4f) (identifier-syntax . lV4d4e) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (case . lV4d45) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec* . lV4d3d) (letrec . lV4d3c) (lambda . lV4d39) (quote . lV4d36) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (begin . lV4d30) (define-syntax . lV4d2e) (define . lV4d2d)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5066 '(rnrs lists) '(6) '() '() '() '((remove . lV4f08) (remv . lV4f07) (remp . lV4f06) (remq . lV4f05) (partition . lV4f04) (memv . lV4f03) (memq . lV4f02) (memp . lV4f01) (member . lV4f00) (exists . lV4eff) (for-all . lV4efe) (fold-right . lV4efd) (fold-left . lV4efc) (find . lV4efb) (filter . lV4efa) (cons* . lV4ef9) (assv . lV4ef8) (assq . lV4ef7) (assp . lV4ef6) (assoc . lV4ef5)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5067 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . lV4f63) (call-with-input-file . lV4f62) (write-char . lV4f61) (write . lV4f60) (with-output-to-file . lV4f5f) (with-input-from-file . lV4f5e) (read-char . lV4f5d) (read . lV4f5c) (peek-char . lV4f5b) (open-output-file . lV4f5a) (open-input-file . lV4f59) (newline . lV4f58) (display . lV4f57) (close-output-port . lV4f56) (close-input-port . lV4f55) (eof-object? . lV4f54) (eof-object . lV4f53) (current-error-port . lV4f52) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5068 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . lV4f24) (utf32->string . lV4ed9) (utf16->string . lV4ed8) (utf8->string . lV4ed7) (uint-list->bytevector . lV4ed6) (u8-list->bytevector . lV4ed5) (string->utf8 . lV4ed4) (string->utf32 . lV4ed3) (string->utf16 . lV4ed2) (sint-list->bytevector . lV4ed1) (native-endianness . lV4ed0) (bytevector? . lV4ecf) (bytevector=? . lV4ece) (bytevector-uint-set! . lV4ecd) (bytevector-uint-ref . lV4ecc) (bytevector-u8-set! . lV4ecb) (bytevector-u8-ref . lV4eca) (bytevector-u64-set! . lV4ec9) (bytevector-u64-ref . lV4ec8) (bytevector-u64-native-set! . lV4ec7) (bytevector-u64-native-ref . lV4ec6) (bytevector-u32-set! . lV4ec5) (bytevector-u32-ref . lV4ec4) (bytevector-u32-native-set! . lV4ec3) (bytevector-u32-native-ref . lV4ec2) (bytevector-u16-set! . lV4ec1) (bytevector-u16-ref . lV4ec0) (bytevector-u16-native-set! . lV4ebf) (bytevector-u16-native-ref . lV4ebe) (bytevector-sint-set! . lV4ebd) (bytevector-sint-ref . lV4ebc) (bytevector-s8-set! . lV4ebb) (bytevector-s8-ref . lV4eba) (bytevector-s64-set! . lV4eb9) (bytevector-s64-ref . lV4eb8) (bytevector-s64-native-set! . lV4eb7) (bytevector-s64-native-ref . lV4eb6) (bytevector-s32-set! . lV4eb5) (bytevector-s32-ref . lV4eb4) (bytevector-s32-native-set! . lV4eb3) (bytevector-s32-native-ref . lV4eb2) (bytevector-s16-set! . lV4eb1) (bytevector-s16-ref . lV4eb0) (bytevector-s16-native-set! . lV4eaf) (bytevector-s16-native-ref . lV4eae) (bytevector-length . lV4ead) (bytevector-ieee-single-ref . lV4eac) (bytevector-ieee-single-set! . lV4eab) (bytevector-ieee-single-native-set! . lV4eaa) (bytevector-ieee-single-native-ref . lV4ea9) (bytevector-ieee-double-set! . lV4ea8) (bytevector-ieee-double-ref . lV4ea7) (bytevector-ieee-double-native-set! . lV4ea6) (bytevector-ieee-double-native-ref . lV4ea5) (bytevector-fill! . lV4ea4) (bytevector-copy! . lV4ea3) (bytevector-copy . lV4ea2) (bytevector->uint-list . lV4ea1) (bytevector->u8-list . lV4ea0) (bytevector->sint-list . lV4e9f) (endianness . lV4d57)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5069 '(rnrs unicode) '(6) '() '() '() '((string-upcase . lV4fab) (string-titlecase . lV4faa) (string-normalize-nfkd . lV4fa9) (string-normalize-nfkc . lV4fa8) (string-normalize-nfd . lV4fa7) (string-normalize-nfc . lV4fa6) (string-foldcase . lV4fa5) (string-downcase . lV4fa4) (string-ci>? . lV4fa3) (string-ci>=? . lV4fa2) (string-ci=? . lV4fa1) (string-ci<? . lV4fa0) (string-ci<=? . lV4f9f) (char-whitespace? . lV4f9e) (char-upper-case? . lV4f9d) (char-title-case? . lV4f9c) (char-numeric? . lV4f9b) (char-lower-case? . lV4f9a) (char-general-category . lV4f99) (char-upcase . lV4f98) (char-titlecase . lV4f97) (char-foldcase . lV4f96) (char-downcase . lV4f95) (char-ci>? . lV4f94) (char-ci>=? . lV4f93) (char-ci=? . lV4f92) (char-ci<? . lV4f91) (char-ci<=? . lV4f90) (char-alphabetic? . lV4f8f)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . lV4eee) (raise-continuable . lV4eed) (raise . lV4eec) (guard . lV4d63) (else . lV4d5b) (=> . lV4d5a)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . lV4e43) (bitwise-reverse-bit-field . lV4e42) (bitwise-length . lV4e41) (bitwise-if . lV4e40) (bitwise-first-bit-set . lV4e3f) (bitwise-copy-bit-field . lV4e3e) (bitwise-copy-bit . lV4e3d) (bitwise-bit-set? . lV4e3c) (bitwise-bit-field . lV4e3b) (bitwise-bit-count . lV4e3a) (bitwise-xor . lV4e39) (bitwise-ior . lV4e38) (bitwise-and . lV4e37) (bitwise-not . lV4e36) (bitwise-arithmetic-shift-right . lV4e35) (bitwise-arithmetic-shift-left . lV4e34) (bitwise-arithmetic-shift . lV4e33)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . lV4e70) (fxxor . lV4e6f) (fxrotate-bit-field . lV4e6e) (fxreverse-bit-field . lV4e6d) (fxpositive? . lV4e6c) (fxodd? . lV4e6b) (fxnot . lV4e6a) (fxnegative? . lV4e69) (fxmod0 . lV4e68) (fxmod . lV4e67) (fxmin . lV4e66) (fxmax . lV4e65) (fxlength . lV4e64) (fxior . lV4e63) (fxif . lV4e62) (fxfirst-bit-set . lV4e61) (fxeven? . lV4e60) (fxdiv0-and-mod0 . lV4e5f) (fxdiv0 . lV4e5e) (fxdiv-and-mod . lV4e5d) (fxdiv . lV4e5c) (fxcopy-bit-field . lV4e5b) (fxcopy-bit . lV4e5a) (fxbit-set? . lV4e59) (fxbit-field . lV4e58) (fxbit-count . lV4e57) (fxarithmetic-shift-right . lV4e56) (fxarithmetic-shift-left . lV4e55) (fxarithmetic-shift . lV4e54) (fxand . lV4e53) (fx>? . lV4e52) (fx>=? . lV4e51) (fx=? . lV4e50) (fx<? . lV4e4f) (fx<=? . lV4e4e) (fx-/carry . lV4e4d) (fx- . lV4e4c) (fx+/carry . lV4e4b) (fx+ . lV4e4a) (fx*/carry . lV4e49) (fx* . lV4e48) (greatest-fixnum . lV4e47) (least-fixnum . lV4e46) (fixnum-width . lV4e45) (fixnum? . lV4e44)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . lV4ab6) (no-infinities-violation? . lV4aa1) (make-no-nans-violation . lV4ab4) (make-no-infinities-violation . lV4a9f) (real->flonum . lV4e9e) (flzero? . lV4e9d) (fltruncate . lV4e9c) (fltan . lV4e9b) (flsqrt . lV4e9a) (flsin . lV4e99) (flround . lV4e98) (flpositive? . lV4e97) (flonum? . lV4e96) (flodd? . lV4e95) (flnumerator . lV4e94) (flnegative? . lV4e93) (flnan? . lV4e92) (flmod0 . lV4e91) (flmod . lV4e90) (flmin . lV4e8f) (flmax . lV4e8e) (fllog . lV4e8d) (flinteger? . lV4e8c) (flinfinite? . lV4e8b) (flfloor . lV4e8a) (flfinite? . lV4e89) (flexpt . lV4e88) (flexp . lV4e87) (fleven? . lV4e86) (fldiv0-and-mod0 . lV4e85) (fldiv0 . lV4e84) (fldiv-and-mod . lV4e83) (fldiv . lV4e82) (fldenominator . lV4e81) (flcos . lV4e80) (flceiling . lV4e7f) (flatan . lV4e7e) (flasin . lV4e7d) (flacos . lV4e7c) (flabs . lV4e7b) (fl>? . lV4e7a) (fl>=? . lV4e79) (fl=? . lV4e78) (fl<? . lV4e77) (fl<=? . lV4e76) (fl/ . lV4e75) (fl- . lV4e74) (fl+ . lV4e73) (fl* . lV4e72) (fixnum->flonum . lV4e71) (&no-nans . lV4d8f) (&no-infinities . lV4d8e)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . lV4f78) (string-ci-hash . lV4f77) (string-hash . lV4f76) (equal-hash . lV4f75) (hashtable-equivalence-function . lV4f74) (make-hashtable . lV4f73) (hashtable-hash-function . lV4f72) (make-eqv-hashtable . lV4f71) (make-eq-hashtable . lV4f70) (hashtable? . lV4f6f) (hashtable-update! . lV4f6e) (hashtable-size . lV4f6d) (hashtable-set! . lV4f6c) (hashtable-ref . lV4f6b) (hashtable-mutable? . lV4f6a) (hashtable-keys . lV4f69) (hashtable-entries . lV4f68) (hashtable-delete! . lV4f67) (hashtable-copy . lV4f66) (hashtable-contains? . lV4f65) (hashtable-clear! . lV4f64)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV506f '(rnrs io ports) '(6) '() '() '() '((eof-object? . lV4f54) (eof-object . lV4f53) (current-error-port . lV4f52) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (utf-8-codec . lV4f4d) (utf-16-codec . lV4f4c) (transcoder-error-handling-mode . lV4f4b) (transcoder-eol-style . lV4f4a) (transcoder-codec . lV4f49) (transcoded-port . lV4f48) (textual-port? . lV4f47) (string->bytevector . lV4f46) (standard-output-port . lV4f45) (standard-input-port . lV4f44) (standard-error-port . lV4f43) (set-port-position! . lV4f42) (put-u8 . lV4f41) (put-string . lV4f40) (put-datum . lV4f3f) (put-char . lV4f3e) (put-bytevector . lV4f3d) (port? . lV4f3c) (port-transcoder . lV4f3b) (port-position . lV4f3a) (port-has-set-port-position!? . lV4f39) (port-has-port-position? . lV4f38) (port-eof? . lV4f37) (output-port-buffer-mode . lV4f36) (open-string-output-port . lV4f35) (open-string-input-port . lV4f34) (open-file-output-port . lV4f33) (open-file-input/output-port . lV4f32) (open-file-input-port . lV4f31) (open-bytevector-output-port . lV4f30) (open-bytevector-input-port . lV4f2f) (native-transcoder . lV4f2e) (native-eol-style . lV4f2d) (make-transcoder . lV4f2c) (latin-1-codec . lV4f2b) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (make-i/o-encoding-error . lV4a86) (make-i/o-decoding-error . lV4a6f) (make-custom-textual-output-port . lV4f2a) (make-custom-textual-input/output-port . lV4f29) (make-custom-textual-input-port . lV4f28) (make-custom-binary-output-port . lV4f27) (make-custom-binary-input/output-port . lV4f26) (make-custom-binary-input-port . lV4f25) (lookahead-u8 . lV4f23) (lookahead-char . lV4f22) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (i/o-encoding-error? . lV4a8a) (i/o-encoding-error-char . lV4a8c) (i/o-decoding-error? . lV4a71) (get-u8 . lV4f21) (get-string-n! . lV4f20) (get-string-n . lV4f1f) (get-string-all . lV4f1e) (get-line . lV4f1d) (get-datum . lV4f1c) (get-char . lV4f1b) (get-bytevector-some . lV4f1a) (get-bytevector-n! . lV4f19) (get-bytevector-n . lV4f18) (get-bytevector-all . lV4f17) (flush-output-port . lV4f16) (close-port . lV4f15) (call-with-string-output-port . lV4ef4) (call-with-port . lV4ef3) (call-with-bytevector-output-port . lV4ef2) (bytevector->string . lV4ef1) (buffer-mode? . lV4ef0) (binary-port? . lV4eef) (&i/o-encoding . lV4d8d) (&i/o-decoding . lV4d8c) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82) (error-handling-mode . lV4d67) (file-options . lV4d66) (buffer-mode . lV4d65) (eol-style . lV4d64)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5070 '(rnrs enums) '(6) '() '() '() '((make-enumeration . lV4eeb) (enum-set=? . lV4eea) (enum-set-universe . lV4ee9) (enum-set-union . lV4ee8) (enum-set-subset? . lV4ee7) (enum-set-projection . lV4ee6) (enum-set-member? . lV4ee5) (enum-set-intersection . lV4ee4) (enum-set-indexer . lV4ee3) (enum-set-difference . lV4ee2) (enum-set-constructor . lV4ee1) (enum-set-complement . lV4ee0) (enum-set->list . lV4edf) (define-enumeration . lV4d72)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5071 '(rnrs conditions) '(6) '() '() '() '((who-condition? . lV4901) (warning? . lV4879) (violation? . lV48b8) (undefined-violation? . lV4978) (syntax-violation? . lV495f) (syntax-violation-subform . lV4963) (syntax-violation-form . lV4961) (syntax-violation . lV2d8d) (simple-conditions . lV4ede) (serious-condition? . lV488e) (non-continuable-violation? . lV4918) (message-condition? . lV4862) (make-who-condition . lV48fd) (make-warning . lV4877) (make-violation . lV48b6) (make-undefined-violation . lV4976) (make-syntax-violation . lV4959) (make-serious-condition . lV488c) (make-non-continuable-violation . lV4916) (make-message-condition . lV485e) (make-lexical-violation . lV4940) (make-irritants-condition . lV48e2) (make-implementation-restriction-violation . lV492b) (make-error . lV48a1) (make-assertion-violation . lV48cb) (lexical-violation? . lV4942) (irritants-condition? . lV48e6) (implementation-restriction-violation? . lV492d) (error? . lV48a3) (condition-who . lV4903) (condition-predicate . lV4edd) (condition-message . lV4864) (condition-irritants . lV48e8) (condition-accessor . lV4edc) (condition . lV4edb) (assertion-violation? . lV48cd) (condition? . lV4eda) (&undefined . lV4d81) (&syntax . lV4d80) (&lexical . lV4d7f) (&implementation-restriction . lV4d7e) (&non-continuable . lV4d7d) (&who . lV4d7c) (&irritants . lV4d7b) (&assertion . lV4d7a) (&violation . lV4d79) (&error . lV4d78) (&serious . lV4d77) (&warning . lV4d76) (&message . lV4d75) (&condition . lV4d74) (define-condition-type . lV4d73)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5072 '(rnrs records inspection) '(6) '() '() '() '((record? . lV4f87) (record-type-uid . lV4f86) (record-type-sealed? . lV4f85) (record-type-parent . lV4f84) (record-type-opaque? . lV4f83) (record-type-name . lV4f82) (record-type-generative? . lV4f81) (record-type-field-names . lV4f80) (record-rtd . lV4f7f) (record-field-mutable? . lV4f7e)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5073 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . lV4f8e) (record-predicate . lV4f8d) (record-mutator . lV4f8c) (record-constructor . lV4f8b) (record-accessor . lV4f8a) (make-record-type-descriptor . lV4f89) (make-record-constructor-descriptor . lV4f88)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5074 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . lV4d71) (parent-rtd . lV4d70) (nongenerative . lV4d6f) (opaque . lV4d6e) (sealed . lV4d6d) (protocol . lV4d6c) (parent . lV4d6b) (immutable . lV4d6a) (mutable . lV4d69) (fields . lV4d68) (record-constructor-descriptor . lV4d47) (record-type-descriptor . lV4d46)) '() values values '#f '#f '#t '#f) (lV28bb@lV2707@install-library 'lV5075 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . lV4aba) (&no-nans-rtd . lV4ab8) (&no-infinities-rcd . lV4aa5) (&no-infinities-rtd . lV4aa3) (&i/o-encoding-rcd . lV4a90) (&i/o-encoding-rtd . lV4a8e) (&i/o-decoding-rcd . lV4a75) (&i/o-decoding-rtd . lV4a73) (&i/o-port-rcd . lV4a60) (&i/o-port-rtd . lV4a5e) (&i/o-file-does-not-exist-rcd . lV4a45) (&i/o-file-does-not-exist-rtd . lV4a43) (&i/o-file-already-exists-rcd . lV4a30) (&i/o-file-already-exists-rtd . lV4a2e) (&i/o-file-is-read-only-rcd . lV4a1b) (&i/o-file-is-read-only-rtd . lV4a19) (&i/o-file-protection-rcd . lV4a06) (&i/o-file-protection-rtd . lV4a04) (&i/o-filename-rcd . lV49f1) (&i/o-filename-rtd . lV49ef) (&i/o-invalid-position-rcd . lV49d6) (&i/o-invalid-position-rtd . lV49d4) (&i/o-write-rcd . lV49bb) (&i/o-write-rtd . lV49b9) (&i/o-read-rcd . lV49a6) (&i/o-read-rtd . lV49a4) (&i/o-rcd . lV4991) (&i/o-rtd . lV498f) (&undefined-rcd . lV497c) (&undefined-rtd . lV497a) (&syntax-rcd . lV4967) (&syntax-rtd . lV4965) (&lexical-rcd . lV4946) (&lexical-rtd . lV4944) (&implementation-restriction-rcd . lV4931) (&implementation-restriction-rtd . lV492f) (&non-continuable-rcd . lV491c) (&non-continuable-rtd . lV491a) (&who-rcd . lV4907) (&who-rtd . lV4905) (&irritants-rcd . lV48ec) (&irritants-rtd . lV48ea) (&assertion-rcd . lV48d1) (&assertion-rtd . lV48cf) (&violation-rcd . lV48bc) (&violation-rtd . lV48ba) (&error-rcd . lV48a7) (&error-rtd . lV48a5) (&serious-rcd . lV4892) (&serious-rtd . lV4890) (&warning-rcd . lV487d) (&warning-rtd . lV487b) (&message-rcd . lV4868) (&message-rtd . lV4866) (&condition-rcd . lV4809) (&condition-rtd . lV4807) (syntax-error . lV2d89) (syntax-dispatch . lV2cad) (pretty-print . lV5055) (eval-core . lV5054) (set-symbol-value! . lV5053) (symbol-value . lV5052) (gensym . lV5051) (void . lV5050) (load . lV4bcb) (interaction-environment . lV2d9b) (char-ready? . lV504f) (regexp? . lV504e) (read-line . lV504d) (gensym-prefix-set! . lV504c) (ungensym . lV504b) (alist->eq-hash-table . lV504a) (assoc-ref . lV5049) (print . lV5048) (format . lV5047) (host-os . lV5046) (library-path . lV26e6) (standard-library-path . lV5045) (file-newer? . lV5044) (stat-mtime . lV5043) (write-to-file . lV5042) (file->list . lV5041) (file->string . lV5040) (digit->integer . lV503f) (call-with-string-input-port . lV503e) (call-with-string-io . lV503d) (string-split . lV503c) (bytevector-for-each . lV503b) (string->regexp . lV503a) (rxmatch . lV5039) (regexp-replace-all . lV5038) (hashtable-for-each . lV5037) (mosh-cache-dir . lV24d1) (call-process . lV5036) (local-tz-offset . lV5035) (microseconds . lV5034) (directory-list . lV5033) (set-current-directory! . lV5032) (expand-path . lV5031) (current-directory . lV5030) (%spawn . lV502f) (%waitpid . lV502e) (simple-struct-name . lV502d) (simple-struct-set! . lV502c) (simple-struct-ref . lV502b) (make-simple-struct . lV502a) (simple-struct? . lV5029) (pointer-ref-c-int64 . lV5028) (pointer-ref-c-int32 . lV5027) (pointer-ref-c-int16 . lV5026) (pointer-ref-c-int8 . lV5025) (pointer-ref-c-uint64 . lV5024) (pointer-ref-c-uint32 . lV5023) (pointer-ref-c-uint16 . lV5022) (pointer-ref-c-uint8 . lV5021) (pointer-set-c-uint64! . lV5020) (pointer-set-c-uint32! . lV501f) (pointer-set-c-uint16! . lV501e) (pointer-set-c-uint8! . lV501d) (pointer-set-c-int64! . lV501c) (pointer-set-c-int32! . lV501b) (pointer-set-c-int16! . lV501a) (pointer-set-c-int8! . lV5019) (pointer-set-c-pointer! . lV5018) (pointer-set-c-double! . lV5017) (pointer-set-c-float! . lV5016) (pointer-set-c-long-long! . lV5015) (pointer-set-c-long! . lV5014) (pointer-set-c-int! . lV5013) (pointer-set-c-short! . lV5012) (pointer-set-c-char! . lV5011) (pointer-ref-c-pointer . lV5010) (pointer-ref-c-double . lV500f) (pointer-ref-c-float . lV500e) (pointer-ref-c-unsigned-long-long . lV500d) (pointer-ref-c-signed-long-long . lV500c) (pointer-ref-c-unsigned-long . lV500b) (pointer-ref-c-signed-long . lV500a) (pointer-ref-c-unsigned-int . lV5009) (pointer-ref-c-signed-int . lV5008) (pointer-ref-c-unsigned-short . lV5007) (pointer-ref-c-signed-short . lV5006) (pointer-ref-c-unsigned-char . lV5005) (pointer-ref-c-signed-char . lV5004) (pointer->integer . lV5003) (integer->pointer . lV5002) (pointer? . lV5001) (shared-errno . lV5000) (%ffi-free . lV4fff) (%ffi-malloc . lV4ffe) (%ffi-supported? . lV4ffd) (%ffi-pointer->string . lV4ffc) (%ffi-call->string-or-zero . lV4ffb) (%ffi-call->double . lV4ffa) (%ffi-call->void* . lV4ff9) (%ffi-call->void . lV4ff8) (%ffi-call->char . lV4ff7) (%ffi-call->int . lV4ff6) (%ffi-lookup . lV4ff5) (%ffi-open . lV4ff4) (%fork . lV4ff3) (%pipe . lV4ff2) (p . lV4ff1) (open-output-string . lV4ff0) (get-output-string . lV4fef) (file-stat-ctime . lV4fee) (file-stat-atime . lV4fed) (file-stat-mtime . lV4fec) (file-size-in-bytes . lV4feb) (file-writable? . lV4fea) (file-executable? . lV4fe9) (file-readable? . lV4fe8) (file-regular? . lV4fe7) (file-symbolic-link? . lV4fe6) (file-directory? . lV4fe5) (create-symbolic-link . lV4fe4) (rename-file . lV4fe3) (delete-directory . lV4fe2) (create-directory . lV4fe1) (create-mosh-cache-dir . lV4fe0) (get-environment-variables . lV4fdf) (current-exception-handler . lV4fde) (get-environment-variable . lV4fdd) (join-wraps . lV4fdc) (id->real-label . lV4fdb) (same-marks? . lV4fda) (same-marks*? . lV4fd9) (get-timeofday . lV4fd8) (get-command-line . lV4fd7) (sys-display . lV4fd6) (whereis . lV4fd5) (register . lV4fd4) (vm-join! . lV4fd3) (vm-set-value! . lV4fd2) (vm? . lV4fd1) (main-vm? . lV4fd0) (vm-eval . lV4fcf) (vm-self . lV4fce) (vm-start! . lV4fcd) (make-vm . lV4fcc) (mutex-try-lock! . lV4fcb) (mutex-unlock! . lV4fca) (mutex-lock! . lV4fc9) (mutex? . lV4fc8) (make-mutex . lV4fc7) (condition-variable-notify-all! . lV4fc6) (condition-variable-notify! . lV4fc5) (condition-variable-wait! . lV4fc4) (make-condition-variable . lV4fc3) (mosh-executable-path . lV4fc2) (make-file-options . lV4fc1) (source-info . lV4fc0) (make-compiler-instruction . lV4fbf) (make-instruction . lV4fbe) (set-source-info! . lV4fbd) (bignum? . lV4fbc) (fast-equal? . lV4fbb) (fasl-read . lV4fba) (fasl-write . lV4fb9) (time-usage . lV4fb8) (os-constant . lV4fb7) (disasm . lV4fb6) (make-parameter . lV24cf) (socket-port . lV4fb5) (socket-shutdown . lV4fb4) (socket-close . lV4fb3) (socket-send . lV4fb2) (socket-recv! . lV4fb1) (socket-recv . lV4fb0) (make-server-socket . lV4faf) (make-client-socket . lV4fae) (socket-accept . lV4fad) (socket? . lV4fac) (string-upcase . lV4fab) (string-titlecase . lV4faa) (string-normalize-nfkd . lV4fa9) (string-normalize-nfkc . lV4fa8) (string-normalize-nfd . lV4fa7) (string-normalize-nfc . lV4fa6) (string-foldcase . lV4fa5) (string-downcase . lV4fa4) (string-ci>? . lV4fa3) (string-ci>=? . lV4fa2) (string-ci=? . lV4fa1) (string-ci<? . lV4fa0) (string-ci<=? . lV4f9f) (char-whitespace? . lV4f9e) (char-upper-case? . lV4f9d) (char-title-case? . lV4f9c) (char-numeric? . lV4f9b) (char-lower-case? . lV4f9a) (char-general-category . lV4f99) (char-upcase . lV4f98) (char-titlecase . lV4f97) (char-foldcase . lV4f96) (char-downcase . lV4f95) (char-ci>? . lV4f94) (char-ci>=? . lV4f93) (char-ci=? . lV4f92) (char-ci<? . lV4f91) (char-ci<=? . lV4f90) (char-alphabetic? . lV4f8f) (make-variable-transformer . lV2ad8) (identifier? . lV2d8f) (generate-temporaries . lV2d7b) (free-identifier=? . lV2d7d) (syntax->datum . lV2d93) (datum->syntax . lV2d91) (bound-identifier=? . lV2d7f) (record-type-descriptor? . lV4f8e) (record-predicate . lV4f8d) (record-mutator . lV4f8c) (record-constructor . lV4f8b) (record-accessor . lV4f8a) (make-record-type-descriptor . lV4f89) (make-record-constructor-descriptor . lV4f88) (record? . lV4f87) (record-type-uid . lV4f86) (record-type-sealed? . lV4f85) (record-type-parent . lV4f84) (record-type-opaque? . lV4f83) (record-type-name . lV4f82) (record-type-generative? . lV4f81) (record-type-field-names . lV4f80) (record-rtd . lV4f7f) (record-field-mutable? . lV4f7e) (delete-file . lV4f7d) (file-exists? . lV4f7c) (vector-sort! . lV4f7b) (vector-sort . lV4f7a) (list-sort . lV4f79) (symbol-hash . lV4f78) (string-ci-hash . lV4f77) (string-hash . lV4f76) (equal-hash . lV4f75) (hashtable-equivalence-function . lV4f74) (make-hashtable . lV4f73) (hashtable-hash-function . lV4f72) (make-eqv-hashtable . lV4f71) (make-eq-hashtable . lV4f70) (hashtable? . lV4f6f) (hashtable-update! . lV4f6e) (hashtable-size . lV4f6d) (hashtable-set! . lV4f6c) (hashtable-ref . lV4f6b) (hashtable-mutable? . lV4f6a) (hashtable-keys . lV4f69) (hashtable-entries . lV4f68) (hashtable-delete! . lV4f67) (hashtable-copy . lV4f66) (hashtable-contains? . lV4f65) (hashtable-clear! . lV4f64) (call-with-output-file . lV4f63) (call-with-input-file . lV4f62) (write-char . lV4f61) (write . lV4f60) (with-output-to-file . lV4f5f) (with-input-from-file . lV4f5e) (read-char . lV4f5d) (read . lV4f5c) (peek-char . lV4f5b) (open-output-file . lV4f5a) (open-input-file . lV4f59) (newline . lV4f58) (display . lV4f57) (close-output-port . lV4f56) (close-input-port . lV4f55) (eof-object? . lV4f54) (eof-object . lV4f53) (current-error-port . lV4f52) (current-output-port . lV4f51) (current-input-port . lV4f50) (output-port? . lV4f4f) (input-port? . lV4f4e) (utf-8-codec . lV4f4d) (utf-16-codec . lV4f4c) (transcoder-error-handling-mode . lV4f4b) (transcoder-eol-style . lV4f4a) (transcoder-codec . lV4f49) (transcoded-port . lV4f48) (textual-port? . lV4f47) (string->bytevector . lV4f46) (standard-output-port . lV4f45) (standard-input-port . lV4f44) (standard-error-port . lV4f43) (set-port-position! . lV4f42) (put-u8 . lV4f41) (put-string . lV4f40) (put-datum . lV4f3f) (put-char . lV4f3e) (put-bytevector . lV4f3d) (port? . lV4f3c) (port-transcoder . lV4f3b) (port-position . lV4f3a) (port-has-set-port-position!? . lV4f39) (port-has-port-position? . lV4f38) (port-eof? . lV4f37) (output-port-buffer-mode . lV4f36) (open-string-output-port . lV4f35) (open-string-input-port . lV4f34) (open-file-output-port . lV4f33) (open-file-input/output-port . lV4f32) (open-file-input-port . lV4f31) (open-bytevector-output-port . lV4f30) (open-bytevector-input-port . lV4f2f) (native-transcoder . lV4f2e) (native-eol-style . lV4f2d) (make-transcoder . lV4f2c) (latin-1-codec . lV4f2b) (make-i/o-write-error . lV49b5) (make-i/o-read-error . lV49a0) (make-i/o-port-error . lV4a56) (make-i/o-invalid-position-error . lV49cc) (make-i/o-filename-error . lV49e7) (make-i/o-file-protection-error . lV4a00) (make-i/o-file-is-read-only-error . lV4a15) (make-i/o-file-does-not-exist-error . lV4a3f) (make-i/o-file-already-exists-error . lV4a2a) (make-i/o-error . lV498b) (make-i/o-encoding-error . lV4a86) (make-i/o-decoding-error . lV4a6f) (make-custom-textual-output-port . lV4f2a) (make-custom-textual-input/output-port . lV4f29) (make-custom-textual-input-port . lV4f28) (make-custom-binary-output-port . lV4f27) (make-custom-binary-input/output-port . lV4f26) (make-custom-binary-input-port . lV4f25) (make-bytevector . lV4f24) (lookahead-u8 . lV4f23) (lookahead-char . lV4f22) (i/o-write-error? . lV49b7) (i/o-read-error? . lV49a2) (i/o-port-error? . lV4a5a) (i/o-invalid-position-error? . lV49d0) (i/o-filename-error? . lV49eb) (i/o-file-protection-error? . lV4a02) (i/o-file-is-read-only-error? . lV4a17) (i/o-file-does-not-exist-error? . lV4a41) (i/o-file-already-exists-error? . lV4a2c) (i/o-error? . lV498d) (i/o-error-position . lV49d2) (i/o-error-port . lV4a5c) (i/o-error-filename . lV49ed) (i/o-encoding-error? . lV4a8a) (i/o-encoding-error-char . lV4a8c) (i/o-decoding-error? . lV4a71) (get-u8 . lV4f21) (get-string-n! . lV4f20) (get-string-n . lV4f1f) (get-string-all . lV4f1e) (get-line . lV4f1d) (get-datum . lV4f1c) (get-char . lV4f1b) (get-bytevector-some . lV4f1a) (get-bytevector-n! . lV4f19) (get-bytevector-n . lV4f18) (get-bytevector-all . lV4f17) (flush-output-port . lV4f16) (close-port . lV4f15) (scheme-report-environment . lV2d69) (quotient . lV4f14) (null-environment . lV2d67) (remainder . lV4f13) (modulo . lV4f12) (inexact->exact . lV4f11) (force . lV4f10) (exact->inexact . lV4f0f) (make-promise . lV4f0e) (exit . lV4f0d) (command-line . lV4bc5) (string-fill! . lV4f0c) (string-set! . lV4f0b) (set-cdr! . lV4f0a) (set-car! . lV4f09) (remove . lV4f08) (remv . lV4f07) (remp . lV4f06) (remq . lV4f05) (partition . lV4f04) (memv . lV4f03) (memq . lV4f02) (memp . lV4f01) (member . lV4f00) (exists . lV4eff) (for-all . lV4efe) (fold-right . lV4efd) (fold-left . lV4efc) (find . lV4efb) (filter . lV4efa) (cons* . lV4ef9) (assv . lV4ef8) (assq . lV4ef7) (assp . lV4ef6) (assoc . lV4ef5) (call-with-string-output-port . lV4ef4) (call-with-port . lV4ef3) (call-with-bytevector-output-port . lV4ef2) (bytevector->string . lV4ef1) (buffer-mode? . lV4ef0) (binary-port? . lV4eef) (with-exception-handler . lV4eee) (raise-continuable . lV4eed) (raise . lV4eec) (eval . lV2d6d) (environment . lV2d65) (make-enumeration . lV4eeb) (enum-set=? . lV4eea) (enum-set-universe . lV4ee9) (enum-set-union . lV4ee8) (enum-set-subset? . lV4ee7) (enum-set-projection . lV4ee6) (enum-set-member? . lV4ee5) (enum-set-intersection . lV4ee4) (enum-set-indexer . lV4ee3) (enum-set-difference . lV4ee2) (enum-set-constructor . lV4ee1) (enum-set-complement . lV4ee0) (enum-set->list . lV4edf) (who-condition? . lV4901) (warning? . lV4879) (violation? . lV48b8) (undefined-violation? . lV4978) (syntax-violation? . lV495f) (syntax-violation-subform . lV4963) (syntax-violation-form . lV4961) (syntax-violation . lV2d8d) (simple-conditions . lV4ede) (serious-condition? . lV488e) (non-continuable-violation? . lV4918) (message-condition? . lV4862) (make-who-condition . lV48fd) (make-warning . lV4877) (make-violation . lV48b6) (make-undefined-violation . lV4976) (make-syntax-violation . lV4959) (make-serious-condition . lV488c) (make-non-continuable-violation . lV4916) (make-message-condition . lV485e) (make-lexical-violation . lV4940) (make-irritants-condition . lV48e2) (make-implementation-restriction-violation . lV492b) (make-error . lV48a1) (make-assertion-violation . lV48cb) (lexical-violation? . lV4942) (irritants-condition? . lV48e6) (implementation-restriction-violation? . lV492d) (error? . lV48a3) (condition-who . lV4903) (condition-predicate . lV4edd) (condition-message . lV4864) (condition-irritants . lV48e8) (condition-accessor . lV4edc) (condition . lV4edb) (assertion-violation? . lV48cd) (condition? . lV4eda) (utf32->string . lV4ed9) (utf16->string . lV4ed8) (utf8->string . lV4ed7) (uint-list->bytevector . lV4ed6) (u8-list->bytevector . lV4ed5) (string->utf8 . lV4ed4) (string->utf32 . lV4ed3) (string->utf16 . lV4ed2) (sint-list->bytevector . lV4ed1) (native-endianness . lV4ed0) (bytevector? . lV4ecf) (bytevector=? . lV4ece) (bytevector-uint-set! . lV4ecd) (bytevector-uint-ref . lV4ecc) (bytevector-u8-set! . lV4ecb) (bytevector-u8-ref . lV4eca) (bytevector-u64-set! . lV4ec9) (bytevector-u64-ref . lV4ec8) (bytevector-u64-native-set! . lV4ec7) (bytevector-u64-native-ref . lV4ec6) (bytevector-u32-set! . lV4ec5) (bytevector-u32-ref . lV4ec4) (bytevector-u32-native-set! . lV4ec3) (bytevector-u32-native-ref . lV4ec2) (bytevector-u16-set! . lV4ec1) (bytevector-u16-ref . lV4ec0) (bytevector-u16-native-set! . lV4ebf) (bytevector-u16-native-ref . lV4ebe) (bytevector-sint-set! . lV4ebd) (bytevector-sint-ref . lV4ebc) (bytevector-s8-set! . lV4ebb) (bytevector-s8-ref . lV4eba) (bytevector-s64-set! . lV4eb9) (bytevector-s64-ref . lV4eb8) (bytevector-s64-native-set! . lV4eb7) (bytevector-s64-native-ref . lV4eb6) (bytevector-s32-set! . lV4eb5) (bytevector-s32-ref . lV4eb4) (bytevector-s32-native-set! . lV4eb3) (bytevector-s32-native-ref . lV4eb2) (bytevector-s16-set! . lV4eb1) (bytevector-s16-ref . lV4eb0) (bytevector-s16-native-set! . lV4eaf) (bytevector-s16-native-ref . lV4eae) (bytevector-length . lV4ead) (bytevector-ieee-single-ref . lV4eac) (bytevector-ieee-single-set! . lV4eab) (bytevector-ieee-single-native-set! . lV4eaa) (bytevector-ieee-single-native-ref . lV4ea9) (bytevector-ieee-double-set! . lV4ea8) (bytevector-ieee-double-ref . lV4ea7) (bytevector-ieee-double-native-set! . lV4ea6) (bytevector-ieee-double-native-ref . lV4ea5) (bytevector-fill! . lV4ea4) (bytevector-copy! . lV4ea3) (bytevector-copy . lV4ea2) (bytevector->uint-list . lV4ea1) (bytevector->u8-list . lV4ea0) (bytevector->sint-list . lV4e9f) (no-nans-violation? . lV4ab6) (no-infinities-violation? . lV4aa1) (make-no-nans-violation . lV4ab4) (make-no-infinities-violation . lV4a9f) (real->flonum . lV4e9e) (flzero? . lV4e9d) (fltruncate . lV4e9c) (fltan . lV4e9b) (flsqrt . lV4e9a) (flsin . lV4e99) (flround . lV4e98) (flpositive? . lV4e97) (flonum? . lV4e96) (flodd? . lV4e95) (flnumerator . lV4e94) (flnegative? . lV4e93) (flnan? . lV4e92) (flmod0 . lV4e91) (flmod . lV4e90) (flmin . lV4e8f) (flmax . lV4e8e) (fllog . lV4e8d) (flinteger? . lV4e8c) (flinfinite? . lV4e8b) (flfloor . lV4e8a) (flfinite? . lV4e89) (flexpt . lV4e88) (flexp . lV4e87) (fleven? . lV4e86) (fldiv0-and-mod0 . lV4e85) (fldiv0 . lV4e84) (fldiv-and-mod . lV4e83) (fldiv . lV4e82) (fldenominator . lV4e81) (flcos . lV4e80) (flceiling . lV4e7f) (flatan . lV4e7e) (flasin . lV4e7d) (flacos . lV4e7c) (flabs . lV4e7b) (fl>? . lV4e7a) (fl>=? . lV4e79) (fl=? . lV4e78) (fl<? . lV4e77) (fl<=? . lV4e76) (fl/ . lV4e75) (fl- . lV4e74) (fl+ . lV4e73) (fl* . lV4e72) (fixnum->flonum . lV4e71) (fxzero? . lV4e70) (fxxor . lV4e6f) (fxrotate-bit-field . lV4e6e) (fxreverse-bit-field . lV4e6d) (fxpositive? . lV4e6c) (fxodd? . lV4e6b) (fxnot . lV4e6a) (fxnegative? . lV4e69) (fxmod0 . lV4e68) (fxmod . lV4e67) (fxmin . lV4e66) (fxmax . lV4e65) (fxlength . lV4e64) (fxior . lV4e63) (fxif . lV4e62) (fxfirst-bit-set . lV4e61) (fxeven? . lV4e60) (fxdiv0-and-mod0 . lV4e5f) (fxdiv0 . lV4e5e) (fxdiv-and-mod . lV4e5d) (fxdiv . lV4e5c) (fxcopy-bit-field . lV4e5b) (fxcopy-bit . lV4e5a) (fxbit-set? . lV4e59) (fxbit-field . lV4e58) (fxbit-count . lV4e57) (fxarithmetic-shift-right . lV4e56) (fxarithmetic-shift-left . lV4e55) (fxarithmetic-shift . lV4e54) (fxand . lV4e53) (fx>? . lV4e52) (fx>=? . lV4e51) (fx=? . lV4e50) (fx<? . lV4e4f) (fx<=? . lV4e4e) (fx-/carry . lV4e4d) (fx- . lV4e4c) (fx+/carry . lV4e4b) (fx+ . lV4e4a) (fx*/carry . lV4e49) (fx* . lV4e48) (greatest-fixnum . lV4e47) (least-fixnum . lV4e46) (fixnum-width . lV4e45) (fixnum? . lV4e44) (bitwise-rotate-bit-field . lV4e43) (bitwise-reverse-bit-field . lV4e42) (bitwise-length . lV4e41) (bitwise-if . lV4e40) (bitwise-first-bit-set . lV4e3f) (bitwise-copy-bit-field . lV4e3e) (bitwise-copy-bit . lV4e3d) (bitwise-bit-set? . lV4e3c) (bitwise-bit-field . lV4e3b) (bitwise-bit-count . lV4e3a) (bitwise-xor . lV4e39) (bitwise-ior . lV4e38) (bitwise-and . lV4e37) (bitwise-not . lV4e36) (bitwise-arithmetic-shift-right . lV4e35) (bitwise-arithmetic-shift-left . lV4e34) (bitwise-arithmetic-shift . lV4e33) (zero? . lV4e32) (vector? . lV4e31) (vector-set! . lV4e30) (vector-ref . lV4e2f) (vector-map . lV4e2e) (vector-length . lV4e2d) (vector-for-each . lV4e2c) (vector-fill! . lV4e2b) (vector->list . lV4e2a) (vector . lV4e29) (values . lV4e28) (truncate . lV4e27) (tan . lV4e26) (symbol? . lV4e25) (symbol=? . lV4e24) (symbol->string . lV4e23) (substring . lV4e22) (string? . lV4e21) (string>? . lV4e20) (string>=? . lV4e1f) (string=? . lV4e1e) (string<? . lV4e1d) (string<=? . lV4e1c) (string-ref . lV4e1b) (string-length . lV4e1a) (string-for-each . lV4e19) (string-copy . lV4e18) (string-append . lV4e17) (string->symbol . lV4e16) (string->number . lV4e15) (string->list . lV4e14) (string . lV4e13) (sqrt . lV4e12) (sin . lV4e11) (round . lV4e10) (reverse . lV4e0f) (real? . lV4e0e) (real-valued? . lV4e0d) (real-part . lV4e0c) (rationalize . lV4e0b) (rational? . lV4e0a) (rational-valued? . lV4e09) (procedure? . lV4e08) (positive? . lV4e07) (pair? . lV4e06) (odd? . lV4e05) (numerator . lV4e04) (number? . lV4e03) (number->string . lV4e02) (null? . lV4e01) (not . lV4e00) (negative? . lV4dff) (nan? . lV4dfe) (min . lV4dfd) (max . lV4dfc) (map . lV4dfb) (make-vector . lV4dfa) (make-string . lV4df9) (make-rectangular . lV4df8) (make-polar . lV4df7) (magnitude . lV4df6) (log . lV4df5) (list? . lV4df4) (list-tail . lV4df3) (list-ref . lV4df2) (list->vector . lV4df1) (list->string . lV4df0) (list . lV4def) (length . lV4dee) (lcm . lV4ded) (integer? . lV4dec) (integer-valued? . lV4deb) (integer->char . lV4dea) (infinite? . lV4de9) (inexact? . lV4de8) (inexact . lV4de7) (imag-part . lV4de6) (gcd . lV4de5) (for-each . lV4de4) (floor . lV4de3) (finite? . lV4de2) (expt . lV4de1) (exp . lV4de0) (exact? . lV4ddf) (exact-integer-sqrt . lV4dde) (exact . lV4ddd) (even? . lV4ddc) (error . lV4ddb) (eqv? . lV4dda) (equal? . lV4dd9) (eq? . lV4dd8) (dynamic-wind . lV4dd7) (div0-and-mod0 . lV4dd6) (mod0 . lV4dd5) (div0 . lV4dd4) (div-and-mod . lV4dd3) (mod . lV4dd2) (div . lV4dd1) (denominator . lV4dd0) (cos . lV4dcf) (cons . lV4dce) (complex? . lV4dcd) (char? . lV4dcc) (char>? . lV4dcb) (char>=? . lV4dca) (char=? . lV4dc9) (char<? . lV4dc8) (char<=? . lV4dc7) (char->integer . lV4dc6) (ceiling . lV4dc5) (call-with-values . lV4dc4) (call/cc . lV4dc3) (call-with-current-continuation . lV4dc2) (cddddr . lV4dc1) (cdddar . lV4dc0) (cddadr . lV4dbf) (cddaar . lV4dbe) (cdaddr . lV4dbd) (cdadar . lV4dbc) (cdaadr . lV4dbb) (cdaaar . lV4dba) (cadddr . lV4db9) (caddar . lV4db8) (cadadr . lV4db7) (cadaar . lV4db6) (caaddr . lV4db5) (caadar . lV4db4) (caaadr . lV4db3) (caaaar . lV4db2) (cdddr . lV4db1) (cddar . lV4db0) (cdadr . lV4daf) (cdaar . lV4dae) (caddr . lV4dad) (cadar . lV4dac) (caadr . lV4dab) (caaar . lV4daa) (cddr . lV4da9) (cdar . lV4da8) (cadr . lV4da7) (caar . lV4da6) (cdr . lV4da5) (car . lV4da4) (boolean? . lV4da3) (boolean=? . lV4da2) (atan . lV4da1) (assertion-violation . lV4da0) (assertion-error . lV2d87) (asin . lV4d9f) (apply . lV4d9e) (append . lV4d9d) (angle . lV4d9c) (acos . lV4d9b) (abs . lV4d9a) (/ . lV4d99) (* . lV4d98) (- . lV4d97) (+ . lV4d96) (>= . lV4d95) (> . lV4d94) (= . lV4d93) (<= . lV4d92) (< . lV4d91) (library . lV4d90) (&no-nans . lV4d8f) (&no-infinities . lV4d8e) (&i/o-encoding . lV4d8d) (&i/o-decoding . lV4d8c) (&i/o-port . lV4d8b) (&i/o-file-does-not-exist . lV4d8a) (&i/o-file-already-exists . lV4d89) (&i/o-file-is-read-only . lV4d88) (&i/o-file-protection . lV4d87) (&i/o-filename . lV4d86) (&i/o-invalid-position . lV4d85) (&i/o-write . lV4d84) (&i/o-read . lV4d83) (&i/o . lV4d82) (&undefined . lV4d81) (&syntax . lV4d80) (&lexical . lV4d7f) (&implementation-restriction . lV4d7e) (&non-continuable . lV4d7d) (&who . lV4d7c) (&irritants . lV4d7b) (&assertion . lV4d7a) (&violation . lV4d79) (&error . lV4d78) (&serious . lV4d77) (&warning . lV4d76) (&message . lV4d75) (&condition . lV4d74) (define-condition-type . lV4d73) (define-enumeration . lV4d72) (define-record-type . lV4d71) (parent-rtd . lV4d70) (nongenerative . lV4d6f) (opaque . lV4d6e) (sealed . lV4d6d) (protocol . lV4d6c) (parent . lV4d6b) (immutable . lV4d6a) (mutable . lV4d69) (fields . lV4d68) (error-handling-mode . lV4d67) (file-options . lV4d66) (buffer-mode . lV4d65) (eol-style . lV4d64) (guard . lV4d63) (trace-define . lV4d62) (trace-lambda . lV4d61) (unsyntax-splicing . lV4d60) (unsyntax . lV4d5f) (unquote-splicing . lV4d5e) (unquote . lV4d5d) (_ . lV4d5c) (else . lV4d5b) (=> . lV4d5a) (... . lV4d59) (assert . lV4d58) (endianness . lV4d57) (delay . lV4d56) (time . lV4d55) (do . lV4d54) (cond . lV4d53) (let* . lV4d52) (let . lV4d51) (let*-values . lV4d50) (let-values . lV4d4f) (identifier-syntax . lV4d4e) (with-syntax . lV4d4d) (quasisyntax . lV4d4c) (quasiquote . lV4d4b) (syntax-rules . lV4d4a) (include . lV4d49) (define-struct . lV4d48) (record-constructor-descriptor . lV4d47) (record-type-descriptor . lV4d46) (case . lV4d45) (parameterize . lV4d44) (unless . lV4d43) (when . lV4d42) (or . lV4d41) (and . lV4d40) (if . lV4d3f) (let . lV4d3e) (letrec* . lV4d3d) (letrec . lV4d3c) (type-descriptor . lV4d3b) (case-lambda . lV4d3a) (lambda . lV4d39) (syntax . lV4d38) (syntax-case . lV4d37) (quote . lV4d36) (foreign-call . lV4d35) (letrec-syntax . lV4d34) (let-syntax . lV4d33) (set! . lV4d32) (import . lV4d31) (begin . lV4d30) (module . lV4d2f) (define-syntax . lV4d2e) (define . lV4d2d)) '((lV4aba core-prim . &no-nans-rcd) (lV4ab8 core-prim . &no-nans-rtd) (lV4aa5 core-prim . &no-infinities-rcd) (lV4aa3 core-prim . &no-infinities-rtd) (lV4a90 core-prim . &i/o-encoding-rcd) (lV4a8e core-prim . &i/o-encoding-rtd) (lV4a75 core-prim . &i/o-decoding-rcd) (lV4a73 core-prim . &i/o-decoding-rtd) (lV4a60 core-prim . &i/o-port-rcd) (lV4a5e core-prim . &i/o-port-rtd) (lV4a45 core-prim . &i/o-file-does-not-exist-rcd) (lV4a43 core-prim . &i/o-file-does-not-exist-rtd) (lV4a30 core-prim . &i/o-file-already-exists-rcd) (lV4a2e core-prim . &i/o-file-already-exists-rtd) (lV4a1b core-prim . &i/o-file-is-read-only-rcd) (lV4a19 core-prim . &i/o-file-is-read-only-rtd) (lV4a06 core-prim . &i/o-file-protection-rcd) (lV4a04 core-prim . &i/o-file-protection-rtd) (lV49f1 core-prim . &i/o-filename-rcd) (lV49ef core-prim . &i/o-filename-rtd) (lV49d6 core-prim . &i/o-invalid-position-rcd) (lV49d4 core-prim . &i/o-invalid-position-rtd) (lV49bb core-prim . &i/o-write-rcd) (lV49b9 core-prim . &i/o-write-rtd) (lV49a6 core-prim . &i/o-read-rcd) (lV49a4 core-prim . &i/o-read-rtd) (lV4991 core-prim . &i/o-rcd) (lV498f core-prim . &i/o-rtd) (lV497c core-prim . &undefined-rcd) (lV497a core-prim . &undefined-rtd) (lV4967 core-prim . &syntax-rcd) (lV4965 core-prim . &syntax-rtd) (lV4946 core-prim . &lexical-rcd) (lV4944 core-prim . &lexical-rtd) (lV4931 core-prim . &implementation-restriction-rcd) (lV492f core-prim . &implementation-restriction-rtd) (lV491c core-prim . &non-continuable-rcd) (lV491a core-prim . &non-continuable-rtd) (lV4907 core-prim . &who-rcd) (lV4905 core-prim . &who-rtd) (lV48ec core-prim . &irritants-rcd) (lV48ea core-prim . &irritants-rtd) (lV48d1 core-prim . &assertion-rcd) (lV48cf core-prim . &assertion-rtd) (lV48bc core-prim . &violation-rcd) (lV48ba core-prim . &violation-rtd) (lV48a7 core-prim . &error-rcd) (lV48a5 core-prim . &error-rtd) (lV4892 core-prim . &serious-rcd) (lV4890 core-prim . &serious-rtd) (lV487d core-prim . &warning-rcd) (lV487b core-prim . &warning-rtd) (lV4868 core-prim . &message-rcd) (lV4866 core-prim . &message-rtd) (lV4809 core-prim . &condition-rcd) (lV4807 core-prim . &condition-rtd) (lV2d89 core-prim . syntax-error) (lV2cad core-prim . syntax-dispatch) (lV5055 core-prim . pretty-print) (lV5054 core-prim . eval-core) (lV5053 core-prim . set-symbol-value!) (lV5052 core-prim . symbol-value) (lV5051 core-prim . gensym) (lV5050 core-prim . void) (lV4bcb core-prim . load) (lV2d9b core-prim . interaction-environment) (lV504f core-prim . char-ready?) (lV504e core-prim . regexp?) (lV504d core-prim . read-line) (lV504c core-prim . gensym-prefix-set!) (lV504b core-prim . ungensym) (lV504a core-prim . alist->eq-hash-table) (lV5049 core-prim . assoc-ref) (lV5048 core-prim . print) (lV5047 core-prim . format) (lV5046 core-prim . host-os) (lV26e6 core-prim . library-path) (lV5045 core-prim . standard-library-path) (lV5044 core-prim . file-newer?) (lV5043 core-prim . stat-mtime) (lV5042 core-prim . write-to-file) (lV5041 core-prim . file->list) (lV5040 core-prim . file->string) (lV503f core-prim . digit->integer) (lV503e core-prim . call-with-string-input-port) (lV503d core-prim . call-with-string-io) (lV503c core-prim . string-split) (lV503b core-prim . bytevector-for-each) (lV503a core-prim . string->regexp) (lV5039 core-prim . rxmatch) (lV5038 core-prim . regexp-replace-all) (lV5037 core-prim . hashtable-for-each) (lV24d1 core-prim . mosh-cache-dir) (lV5036 core-prim . call-process) (lV5035 core-prim . local-tz-offset) (lV5034 core-prim . microseconds) (lV5033 core-prim . directory-list) (lV5032 core-prim . set-current-directory!) (lV5031 core-prim . expand-path) (lV5030 core-prim . current-directory) (lV502f core-prim . %spawn) (lV502e core-prim . %waitpid) (lV502d core-prim . simple-struct-name) (lV502c core-prim . simple-struct-set!) (lV502b core-prim . simple-struct-ref) (lV502a core-prim . make-simple-struct) (lV5029 core-prim . simple-struct?) (lV5028 core-prim . pointer-ref-c-int64) (lV5027 core-prim . pointer-ref-c-int32) (lV5026 core-prim . pointer-ref-c-int16) (lV5025 core-prim . pointer-ref-c-int8) (lV5024 core-prim . pointer-ref-c-uint64) (lV5023 core-prim . pointer-ref-c-uint32) (lV5022 core-prim . pointer-ref-c-uint16) (lV5021 core-prim . pointer-ref-c-uint8) (lV5020 core-prim . pointer-set-c-uint64!) (lV501f core-prim . pointer-set-c-uint32!) (lV501e core-prim . pointer-set-c-uint16!) (lV501d core-prim . pointer-set-c-uint8!) (lV501c core-prim . pointer-set-c-int64!) (lV501b core-prim . pointer-set-c-int32!) (lV501a core-prim . pointer-set-c-int16!) (lV5019 core-prim . pointer-set-c-int8!) (lV5018 core-prim . pointer-set-c-pointer!) (lV5017 core-prim . pointer-set-c-double!) (lV5016 core-prim . pointer-set-c-float!) (lV5015 core-prim . pointer-set-c-long-long!) (lV5014 core-prim . pointer-set-c-long!) (lV5013 core-prim . pointer-set-c-int!) (lV5012 core-prim . pointer-set-c-short!) (lV5011 core-prim . pointer-set-c-char!) (lV5010 core-prim . pointer-ref-c-pointer) (lV500f core-prim . pointer-ref-c-double) (lV500e core-prim . pointer-ref-c-float) (lV500d core-prim . pointer-ref-c-unsigned-long-long) (lV500c core-prim . pointer-ref-c-signed-long-long) (lV500b core-prim . pointer-ref-c-unsigned-long) (lV500a core-prim . pointer-ref-c-signed-long) (lV5009 core-prim . pointer-ref-c-unsigned-int) (lV5008 core-prim . pointer-ref-c-signed-int) (lV5007 core-prim . pointer-ref-c-unsigned-short) (lV5006 core-prim . pointer-ref-c-signed-short) (lV5005 core-prim . pointer-ref-c-unsigned-char) (lV5004 core-prim . pointer-ref-c-signed-char) (lV5003 core-prim . pointer->integer) (lV5002 core-prim . integer->pointer) (lV5001 core-prim . pointer?) (lV5000 core-prim . shared-errno) (lV4fff core-prim . %ffi-free) (lV4ffe core-prim . %ffi-malloc) (lV4ffd core-prim . %ffi-supported?) (lV4ffc core-prim . %ffi-pointer->string) (lV4ffb core-prim . %ffi-call->string-or-zero) (lV4ffa core-prim . %ffi-call->double) (lV4ff9 core-prim . %ffi-call->void*) (lV4ff8 core-prim . %ffi-call->void) (lV4ff7 core-prim . %ffi-call->char) (lV4ff6 core-prim . %ffi-call->int) (lV4ff5 core-prim . %ffi-lookup) (lV4ff4 core-prim . %ffi-open) (lV4ff3 core-prim . %fork) (lV4ff2 core-prim . %pipe) (lV4ff1 core-prim . p) (lV4ff0 core-prim . open-output-string) (lV4fef core-prim . get-output-string) (lV4fee core-prim . file-stat-ctime) (lV4fed core-prim . file-stat-atime) (lV4fec core-prim . file-stat-mtime) (lV4feb core-prim . file-size-in-bytes) (lV4fea core-prim . file-writable?) (lV4fe9 core-prim . file-executable?) (lV4fe8 core-prim . file-readable?) (lV4fe7 core-prim . file-regular?) (lV4fe6 core-prim . file-symbolic-link?) (lV4fe5 core-prim . file-directory?) (lV4fe4 core-prim . create-symbolic-link) (lV4fe3 core-prim . rename-file) (lV4fe2 core-prim . delete-directory) (lV4fe1 core-prim . create-directory) (lV4fe0 core-prim . create-mosh-cache-dir) (lV4fdf core-prim . get-environment-variables) (lV4fde core-prim . current-exception-handler) (lV4fdd core-prim . get-environment-variable) (lV4fdc core-prim . join-wraps) (lV4fdb core-prim . id->real-label) (lV4fda core-prim . same-marks?) (lV4fd9 core-prim . same-marks*?) (lV4fd8 core-prim . get-timeofday) (lV4fd7 core-prim . get-command-line) (lV4fd6 core-prim . sys-display) (lV4fd5 core-prim . whereis) (lV4fd4 core-prim . register) (lV4fd3 core-prim . vm-join!) (lV4fd2 core-prim . vm-set-value!) (lV4fd1 core-prim . vm?) (lV4fd0 core-prim . main-vm?) (lV4fcf core-prim . vm-eval) (lV4fce core-prim . vm-self) (lV4fcd core-prim . vm-start!) (lV4fcc core-prim . make-vm) (lV4fcb core-prim . mutex-try-lock!) (lV4fca core-prim . mutex-unlock!) (lV4fc9 core-prim . mutex-lock!) (lV4fc8 core-prim . mutex?) (lV4fc7 core-prim . make-mutex) (lV4fc6 core-prim . condition-variable-notify-all!) (lV4fc5 core-prim . condition-variable-notify!) (lV4fc4 core-prim . condition-variable-wait!) (lV4fc3 core-prim . make-condition-variable) (lV4fc2 core-prim . mosh-executable-path) (lV4fc1 core-prim . make-file-options) (lV4fc0 core-prim . source-info) (lV4fbf core-prim . make-compiler-instruction) (lV4fbe core-prim . make-instruction) (lV4fbd core-prim . set-source-info!) (lV4fbc core-prim . bignum?) (lV4fbb core-prim . fast-equal?) (lV4fba core-prim . fasl-read) (lV4fb9 core-prim . fasl-write) (lV4fb8 core-prim . time-usage) (lV4fb7 core-prim . os-constant) (lV4fb6 core-prim . disasm) (lV24cf core-prim . make-parameter) (lV4fb5 core-prim . socket-port) (lV4fb4 core-prim . socket-shutdown) (lV4fb3 core-prim . socket-close) (lV4fb2 core-prim . socket-send) (lV4fb1 core-prim . socket-recv!) (lV4fb0 core-prim . socket-recv) (lV4faf core-prim . make-server-socket) (lV4fae core-prim . make-client-socket) (lV4fad core-prim . socket-accept) (lV4fac core-prim . socket?) (lV4fab core-prim . string-upcase) (lV4faa core-prim . string-titlecase) (lV4fa9 core-prim . string-normalize-nfkd) (lV4fa8 core-prim . string-normalize-nfkc) (lV4fa7 core-prim . string-normalize-nfd) (lV4fa6 core-prim . string-normalize-nfc) (lV4fa5 core-prim . string-foldcase) (lV4fa4 core-prim . string-downcase) (lV4fa3 core-prim . string-ci>?) (lV4fa2 core-prim . string-ci>=?) (lV4fa1 core-prim . string-ci=?) (lV4fa0 core-prim . string-ci<?) (lV4f9f core-prim . string-ci<=?) (lV4f9e core-prim . char-whitespace?) (lV4f9d core-prim . char-upper-case?) (lV4f9c core-prim . char-title-case?) (lV4f9b core-prim . char-numeric?) (lV4f9a core-prim . char-lower-case?) (lV4f99 core-prim . char-general-category) (lV4f98 core-prim . char-upcase) (lV4f97 core-prim . char-titlecase) (lV4f96 core-prim . char-foldcase) (lV4f95 core-prim . char-downcase) (lV4f94 core-prim . char-ci>?) (lV4f93 core-prim . char-ci>=?) (lV4f92 core-prim . char-ci=?) (lV4f91 core-prim . char-ci<?) (lV4f90 core-prim . char-ci<=?) (lV4f8f core-prim . char-alphabetic?) (lV2ad8 core-prim . make-variable-transformer) (lV2d8f core-prim . identifier?) (lV2d7b core-prim . generate-temporaries) (lV2d7d core-prim . free-identifier=?) (lV2d93 core-prim . syntax->datum) (lV2d91 core-prim . datum->syntax) (lV2d7f core-prim . bound-identifier=?) (lV4f8e core-prim . record-type-descriptor?) (lV4f8d core-prim . record-predicate) (lV4f8c core-prim . record-mutator) (lV4f8b core-prim . record-constructor) (lV4f8a core-prim . record-accessor) (lV4f89 core-prim . make-record-type-descriptor) (lV4f88 core-prim . make-record-constructor-descriptor) (lV4f87 core-prim . record?) (lV4f86 core-prim . record-type-uid) (lV4f85 core-prim . record-type-sealed?) (lV4f84 core-prim . record-type-parent) (lV4f83 core-prim . record-type-opaque?) (lV4f82 core-prim . record-type-name) (lV4f81 core-prim . record-type-generative?) (lV4f80 core-prim . record-type-field-names) (lV4f7f core-prim . record-rtd) (lV4f7e core-prim . record-field-mutable?) (lV4f7d core-prim . delete-file) (lV4f7c core-prim . file-exists?) (lV4f7b core-prim . vector-sort!) (lV4f7a core-prim . vector-sort) (lV4f79 core-prim . list-sort) (lV4f78 core-prim . symbol-hash) (lV4f77 core-prim . string-ci-hash) (lV4f76 core-prim . string-hash) (lV4f75 core-prim . equal-hash) (lV4f74 core-prim . hashtable-equivalence-function) (lV4f73 core-prim . make-hashtable) (lV4f72 core-prim . hashtable-hash-function) (lV4f71 core-prim . make-eqv-hashtable) (lV4f70 core-prim . make-eq-hashtable) (lV4f6f core-prim . hashtable?) (lV4f6e core-prim . hashtable-update!) (lV4f6d core-prim . hashtable-size) (lV4f6c core-prim . hashtable-set!) (lV4f6b core-prim . hashtable-ref) (lV4f6a core-prim . hashtable-mutable?) (lV4f69 core-prim . hashtable-keys) (lV4f68 core-prim . hashtable-entries) (lV4f67 core-prim . hashtable-delete!) (lV4f66 core-prim . hashtable-copy) (lV4f65 core-prim . hashtable-contains?) (lV4f64 core-prim . hashtable-clear!) (lV4f63 core-prim . call-with-output-file) (lV4f62 core-prim . call-with-input-file) (lV4f61 core-prim . write-char) (lV4f60 core-prim . write) (lV4f5f core-prim . with-output-to-file) (lV4f5e core-prim . with-input-from-file) (lV4f5d core-prim . read-char) (lV4f5c core-prim . read) (lV4f5b core-prim . peek-char) (lV4f5a core-prim . open-output-file) (lV4f59 core-prim . open-input-file) (lV4f58 core-prim . newline) (lV4f57 core-prim . display) (lV4f56 core-prim . close-output-port) (lV4f55 core-prim . close-input-port) (lV4f54 core-prim . eof-object?) (lV4f53 core-prim . eof-object) (lV4f52 core-prim . current-error-port) (lV4f51 core-prim . current-output-port) (lV4f50 core-prim . current-input-port) (lV4f4f core-prim . output-port?) (lV4f4e core-prim . input-port?) (lV4f4d core-prim . utf-8-codec) (lV4f4c core-prim . utf-16-codec) (lV4f4b core-prim . transcoder-error-handling-mode) (lV4f4a core-prim . transcoder-eol-style) (lV4f49 core-prim . transcoder-codec) (lV4f48 core-prim . transcoded-port) (lV4f47 core-prim . textual-port?) (lV4f46 core-prim . string->bytevector) (lV4f45 core-prim . standard-output-port) (lV4f44 core-prim . standard-input-port) (lV4f43 core-prim . standard-error-port) (lV4f42 core-prim . set-port-position!) (lV4f41 core-prim . put-u8) (lV4f40 core-prim . put-string) (lV4f3f core-prim . put-datum) (lV4f3e core-prim . put-char) (lV4f3d core-prim . put-bytevector) (lV4f3c core-prim . port?) (lV4f3b core-prim . port-transcoder) (lV4f3a core-prim . port-position) (lV4f39 core-prim . port-has-set-port-position!?) (lV4f38 core-prim . port-has-port-position?) (lV4f37 core-prim . port-eof?) (lV4f36 core-prim . output-port-buffer-mode) (lV4f35 core-prim . open-string-output-port) (lV4f34 core-prim . open-string-input-port) (lV4f33 core-prim . open-file-output-port) (lV4f32 core-prim . open-file-input/output-port) (lV4f31 core-prim . open-file-input-port) (lV4f30 core-prim . open-bytevector-output-port) (lV4f2f core-prim . open-bytevector-input-port) (lV4f2e core-prim . native-transcoder) (lV4f2d core-prim . native-eol-style) (lV4f2c core-prim . make-transcoder) (lV4f2b core-prim . latin-1-codec) (lV49b5 core-prim . make-i/o-write-error) (lV49a0 core-prim . make-i/o-read-error) (lV4a56 core-prim . make-i/o-port-error) (lV49cc core-prim . make-i/o-invalid-position-error) (lV49e7 core-prim . make-i/o-filename-error) (lV4a00 core-prim . make-i/o-file-protection-error) (lV4a15 core-prim . make-i/o-file-is-read-only-error) (lV4a3f core-prim . make-i/o-file-does-not-exist-error) (lV4a2a core-prim . make-i/o-file-already-exists-error) (lV498b core-prim . make-i/o-error) (lV4a86 core-prim . make-i/o-encoding-error) (lV4a6f core-prim . make-i/o-decoding-error) (lV4f2a core-prim . make-custom-textual-output-port) (lV4f29 core-prim . make-custom-textual-input/output-port) (lV4f28 core-prim . make-custom-textual-input-port) (lV4f27 core-prim . make-custom-binary-output-port) (lV4f26 core-prim . make-custom-binary-input/output-port) (lV4f25 core-prim . make-custom-binary-input-port) (lV4f24 core-prim . make-bytevector) (lV4f23 core-prim . lookahead-u8) (lV4f22 core-prim . lookahead-char) (lV49b7 core-prim . i/o-write-error?) (lV49a2 core-prim . i/o-read-error?) (lV4a5a core-prim . i/o-port-error?) (lV49d0 core-prim . i/o-invalid-position-error?) (lV49eb core-prim . i/o-filename-error?) (lV4a02 core-prim . i/o-file-protection-error?) (lV4a17 core-prim . i/o-file-is-read-only-error?) (lV4a41 core-prim . i/o-file-does-not-exist-error?) (lV4a2c core-prim . i/o-file-already-exists-error?) (lV498d core-prim . i/o-error?) (lV49d2 core-prim . i/o-error-position) (lV4a5c core-prim . i/o-error-port) (lV49ed core-prim . i/o-error-filename) (lV4a8a core-prim . i/o-encoding-error?) (lV4a8c core-prim . i/o-encoding-error-char) (lV4a71 core-prim . i/o-decoding-error?) (lV4f21 core-prim . get-u8) (lV4f20 core-prim . get-string-n!) (lV4f1f core-prim . get-string-n) (lV4f1e core-prim . get-string-all) (lV4f1d core-prim . get-line) (lV4f1c core-prim . get-datum) (lV4f1b core-prim . get-char) (lV4f1a core-prim . get-bytevector-some) (lV4f19 core-prim . get-bytevector-n!) (lV4f18 core-prim . get-bytevector-n) (lV4f17 core-prim . get-bytevector-all) (lV4f16 core-prim . flush-output-port) (lV4f15 core-prim . close-port) (lV2d69 core-prim . scheme-report-environment) (lV4f14 core-prim . quotient) (lV2d67 core-prim . null-environment) (lV4f13 core-prim . remainder) (lV4f12 core-prim . modulo) (lV4f11 core-prim . inexact->exact) (lV4f10 core-prim . force) (lV4f0f core-prim . exact->inexact) (lV4f0e core-prim . make-promise) (lV4f0d core-prim . exit) (lV4bc5 core-prim . command-line) (lV4f0c core-prim . string-fill!) (lV4f0b core-prim . string-set!) (lV4f0a core-prim . set-cdr!) (lV4f09 core-prim . set-car!) (lV4f08 core-prim . remove) (lV4f07 core-prim . remv) (lV4f06 core-prim . remp) (lV4f05 core-prim . remq) (lV4f04 core-prim . partition) (lV4f03 core-prim . memv) (lV4f02 core-prim . memq) (lV4f01 core-prim . memp) (lV4f00 core-prim . member) (lV4eff core-prim . exists) (lV4efe core-prim . for-all) (lV4efd core-prim . fold-right) (lV4efc core-prim . fold-left) (lV4efb core-prim . find) (lV4efa core-prim . filter) (lV4ef9 core-prim . cons*) (lV4ef8 core-prim . assv) (lV4ef7 core-prim . assq) (lV4ef6 core-prim . assp) (lV4ef5 core-prim . assoc) (lV4ef4 core-prim . call-with-string-output-port) (lV4ef3 core-prim . call-with-port) (lV4ef2 core-prim . call-with-bytevector-output-port) (lV4ef1 core-prim . bytevector->string) (lV4ef0 core-prim . buffer-mode?) (lV4eef core-prim . binary-port?) (lV4eee core-prim . with-exception-handler) (lV4eed core-prim . raise-continuable) (lV4eec core-prim . raise) (lV2d6d core-prim . eval) (lV2d65 core-prim . environment) (lV4eeb core-prim . make-enumeration) (lV4eea core-prim . enum-set=?) (lV4ee9 core-prim . enum-set-universe) (lV4ee8 core-prim . enum-set-union) (lV4ee7 core-prim . enum-set-subset?) (lV4ee6 core-prim . enum-set-projection) (lV4ee5 core-prim . enum-set-member?) (lV4ee4 core-prim . enum-set-intersection) (lV4ee3 core-prim . enum-set-indexer) (lV4ee2 core-prim . enum-set-difference) (lV4ee1 core-prim . enum-set-constructor) (lV4ee0 core-prim . enum-set-complement) (lV4edf core-prim . enum-set->list) (lV4901 core-prim . who-condition?) (lV4879 core-prim . warning?) (lV48b8 core-prim . violation?) (lV4978 core-prim . undefined-violation?) (lV495f core-prim . syntax-violation?) (lV4963 core-prim . syntax-violation-subform) (lV4961 core-prim . syntax-violation-form) (lV2d8d core-prim . syntax-violation) (lV4ede core-prim . simple-conditions) (lV488e core-prim . serious-condition?) (lV4918 core-prim . non-continuable-violation?) (lV4862 core-prim . message-condition?) (lV48fd core-prim . make-who-condition) (lV4877 core-prim . make-warning) (lV48b6 core-prim . make-violation) (lV4976 core-prim . make-undefined-violation) (lV4959 core-prim . make-syntax-violation) (lV488c core-prim . make-serious-condition) (lV4916 core-prim . make-non-continuable-violation) (lV485e core-prim . make-message-condition) (lV4940 core-prim . make-lexical-violation) (lV48e2 core-prim . make-irritants-condition) (lV492b core-prim . make-implementation-restriction-violation) (lV48a1 core-prim . make-error) (lV48cb core-prim . make-assertion-violation) (lV4942 core-prim . lexical-violation?) (lV48e6 core-prim . irritants-condition?) (lV492d core-prim . implementation-restriction-violation?) (lV48a3 core-prim . error?) (lV4903 core-prim . condition-who) (lV4edd core-prim . condition-predicate) (lV4864 core-prim . condition-message) (lV48e8 core-prim . condition-irritants) (lV4edc core-prim . condition-accessor) (lV4edb core-prim . condition) (lV48cd core-prim . assertion-violation?) (lV4eda core-prim . condition?) (lV4ed9 core-prim . utf32->string) (lV4ed8 core-prim . utf16->string) (lV4ed7 core-prim . utf8->string) (lV4ed6 core-prim . uint-list->bytevector) (lV4ed5 core-prim . u8-list->bytevector) (lV4ed4 core-prim . string->utf8) (lV4ed3 core-prim . string->utf32) (lV4ed2 core-prim . string->utf16) (lV4ed1 core-prim . sint-list->bytevector) (lV4ed0 core-prim . native-endianness) (lV4ecf core-prim . bytevector?) (lV4ece core-prim . bytevector=?) (lV4ecd core-prim . bytevector-uint-set!) (lV4ecc core-prim . bytevector-uint-ref) (lV4ecb core-prim . bytevector-u8-set!) (lV4eca core-prim . bytevector-u8-ref) (lV4ec9 core-prim . bytevector-u64-set!) (lV4ec8 core-prim . bytevector-u64-ref) (lV4ec7 core-prim . bytevector-u64-native-set!) (lV4ec6 core-prim . bytevector-u64-native-ref) (lV4ec5 core-prim . bytevector-u32-set!) (lV4ec4 core-prim . bytevector-u32-ref) (lV4ec3 core-prim . bytevector-u32-native-set!) (lV4ec2 core-prim . bytevector-u32-native-ref) (lV4ec1 core-prim . bytevector-u16-set!) (lV4ec0 core-prim . bytevector-u16-ref) (lV4ebf core-prim . bytevector-u16-native-set!) (lV4ebe core-prim . bytevector-u16-native-ref) (lV4ebd core-prim . bytevector-sint-set!) (lV4ebc core-prim . bytevector-sint-ref) (lV4ebb core-prim . bytevector-s8-set!) (lV4eba core-prim . bytevector-s8-ref) (lV4eb9 core-prim . bytevector-s64-set!) (lV4eb8 core-prim . bytevector-s64-ref) (lV4eb7 core-prim . bytevector-s64-native-set!) (lV4eb6 core-prim . bytevector-s64-native-ref) (lV4eb5 core-prim . bytevector-s32-set!) (lV4eb4 core-prim . bytevector-s32-ref) (lV4eb3 core-prim . bytevector-s32-native-set!) (lV4eb2 core-prim . bytevector-s32-native-ref) (lV4eb1 core-prim . bytevector-s16-set!) (lV4eb0 core-prim . bytevector-s16-ref) (lV4eaf core-prim . bytevector-s16-native-set!) (lV4eae core-prim . bytevector-s16-native-ref) (lV4ead core-prim . bytevector-length) (lV4eac core-prim . bytevector-ieee-single-ref) (lV4eab core-prim . bytevector-ieee-single-set!) (lV4eaa core-prim . bytevector-ieee-single-native-set!) (lV4ea9 core-prim . bytevector-ieee-single-native-ref) (lV4ea8 core-prim . bytevector-ieee-double-set!) (lV4ea7 core-prim . bytevector-ieee-double-ref) (lV4ea6 core-prim . bytevector-ieee-double-native-set!) (lV4ea5 core-prim . bytevector-ieee-double-native-ref) (lV4ea4 core-prim . bytevector-fill!) (lV4ea3 core-prim . bytevector-copy!) (lV4ea2 core-prim . bytevector-copy) (lV4ea1 core-prim . bytevector->uint-list) (lV4ea0 core-prim . bytevector->u8-list) (lV4e9f core-prim . bytevector->sint-list) (lV4ab6 core-prim . no-nans-violation?) (lV4aa1 core-prim . no-infinities-violation?) (lV4ab4 core-prim . make-no-nans-violation) (lV4a9f core-prim . make-no-infinities-violation) (lV4e9e core-prim . real->flonum) (lV4e9d core-prim . flzero?) (lV4e9c core-prim . fltruncate) (lV4e9b core-prim . fltan) (lV4e9a core-prim . flsqrt) (lV4e99 core-prim . flsin) (lV4e98 core-prim . flround) (lV4e97 core-prim . flpositive?) (lV4e96 core-prim . flonum?) (lV4e95 core-prim . flodd?) (lV4e94 core-prim . flnumerator) (lV4e93 core-prim . flnegative?) (lV4e92 core-prim . flnan?) (lV4e91 core-prim . flmod0) (lV4e90 core-prim . flmod) (lV4e8f core-prim . flmin) (lV4e8e core-prim . flmax) (lV4e8d core-prim . fllog) (lV4e8c core-prim . flinteger?) (lV4e8b core-prim . flinfinite?) (lV4e8a core-prim . flfloor) (lV4e89 core-prim . flfinite?) (lV4e88 core-prim . flexpt) (lV4e87 core-prim . flexp) (lV4e86 core-prim . fleven?) (lV4e85 core-prim . fldiv0-and-mod0) (lV4e84 core-prim . fldiv0) (lV4e83 core-prim . fldiv-and-mod) (lV4e82 core-prim . fldiv) (lV4e81 core-prim . fldenominator) (lV4e80 core-prim . flcos) (lV4e7f core-prim . flceiling) (lV4e7e core-prim . flatan) (lV4e7d core-prim . flasin) (lV4e7c core-prim . flacos) (lV4e7b core-prim . flabs) (lV4e7a core-prim . fl>?) (lV4e79 core-prim . fl>=?) (lV4e78 core-prim . fl=?) (lV4e77 core-prim . fl<?) (lV4e76 core-prim . fl<=?) (lV4e75 core-prim . fl/) (lV4e74 core-prim . fl-) (lV4e73 core-prim . fl+) (lV4e72 core-prim . fl*) (lV4e71 core-prim . fixnum->flonum) (lV4e70 core-prim . fxzero?) (lV4e6f core-prim . fxxor) (lV4e6e core-prim . fxrotate-bit-field) (lV4e6d core-prim . fxreverse-bit-field) (lV4e6c core-prim . fxpositive?) (lV4e6b core-prim . fxodd?) (lV4e6a core-prim . fxnot) (lV4e69 core-prim . fxnegative?) (lV4e68 core-prim . fxmod0) (lV4e67 core-prim . fxmod) (lV4e66 core-prim . fxmin) (lV4e65 core-prim . fxmax) (lV4e64 core-prim . fxlength) (lV4e63 core-prim . fxior) (lV4e62 core-prim . fxif) (lV4e61 core-prim . fxfirst-bit-set) (lV4e60 core-prim . fxeven?) (lV4e5f core-prim . fxdiv0-and-mod0) (lV4e5e core-prim . fxdiv0) (lV4e5d core-prim . fxdiv-and-mod) (lV4e5c core-prim . fxdiv) (lV4e5b core-prim . fxcopy-bit-field) (lV4e5a core-prim . fxcopy-bit) (lV4e59 core-prim . fxbit-set?) (lV4e58 core-prim . fxbit-field) (lV4e57 core-prim . fxbit-count) (lV4e56 core-prim . fxarithmetic-shift-right) (lV4e55 core-prim . fxarithmetic-shift-left) (lV4e54 core-prim . fxarithmetic-shift) (lV4e53 core-prim . fxand) (lV4e52 core-prim . fx>?) (lV4e51 core-prim . fx>=?) (lV4e50 core-prim . fx=?) (lV4e4f core-prim . fx<?) (lV4e4e core-prim . fx<=?) (lV4e4d core-prim . fx-/carry) (lV4e4c core-prim . fx-) (lV4e4b core-prim . fx+/carry) (lV4e4a core-prim . fx+) (lV4e49 core-prim . fx*/carry) (lV4e48 core-prim . fx*) (lV4e47 core-prim . greatest-fixnum) (lV4e46 core-prim . least-fixnum) (lV4e45 core-prim . fixnum-width) (lV4e44 core-prim . fixnum?) (lV4e43 core-prim . bitwise-rotate-bit-field) (lV4e42 core-prim . bitwise-reverse-bit-field) (lV4e41 core-prim . bitwise-length) (lV4e40 core-prim . bitwise-if) (lV4e3f core-prim . bitwise-first-bit-set) (lV4e3e core-prim . bitwise-copy-bit-field) (lV4e3d core-prim . bitwise-copy-bit) (lV4e3c core-prim . bitwise-bit-set?) (lV4e3b core-prim . bitwise-bit-field) (lV4e3a core-prim . bitwise-bit-count) (lV4e39 core-prim . bitwise-xor) (lV4e38 core-prim . bitwise-ior) (lV4e37 core-prim . bitwise-and) (lV4e36 core-prim . bitwise-not) (lV4e35 core-prim . bitwise-arithmetic-shift-right) (lV4e34 core-prim . bitwise-arithmetic-shift-left) (lV4e33 core-prim . bitwise-arithmetic-shift) (lV4e32 core-prim . zero?) (lV4e31 core-prim . vector?) (lV4e30 core-prim . vector-set!) (lV4e2f core-prim . vector-ref) (lV4e2e core-prim . vector-map) (lV4e2d core-prim . vector-length) (lV4e2c core-prim . vector-for-each) (lV4e2b core-prim . vector-fill!) (lV4e2a core-prim . vector->list) (lV4e29 core-prim . vector) (lV4e28 core-prim . values) (lV4e27 core-prim . truncate) (lV4e26 core-prim . tan) (lV4e25 core-prim . symbol?) (lV4e24 core-prim . symbol=?) (lV4e23 core-prim . symbol->string) (lV4e22 core-prim . substring) (lV4e21 core-prim . string?) (lV4e20 core-prim . string>?) (lV4e1f core-prim . string>=?) (lV4e1e core-prim . string=?) (lV4e1d core-prim . string<?) (lV4e1c core-prim . string<=?) (lV4e1b core-prim . string-ref) (lV4e1a core-prim . string-length) (lV4e19 core-prim . string-for-each) (lV4e18 core-prim . string-copy) (lV4e17 core-prim . string-append) (lV4e16 core-prim . string->symbol) (lV4e15 core-prim . string->number) (lV4e14 core-prim . string->list) (lV4e13 core-prim . string) (lV4e12 core-prim . sqrt) (lV4e11 core-prim . sin) (lV4e10 core-prim . round) (lV4e0f core-prim . reverse) (lV4e0e core-prim . real?) (lV4e0d core-prim . real-valued?) (lV4e0c core-prim . real-part) (lV4e0b core-prim . rationalize) (lV4e0a core-prim . rational?) (lV4e09 core-prim . rational-valued?) (lV4e08 core-prim . procedure?) (lV4e07 core-prim . positive?) (lV4e06 core-prim . pair?) (lV4e05 core-prim . odd?) (lV4e04 core-prim . numerator) (lV4e03 core-prim . number?) (lV4e02 core-prim . number->string) (lV4e01 core-prim . null?) (lV4e00 core-prim . not) (lV4dff core-prim . negative?) (lV4dfe core-prim . nan?) (lV4dfd core-prim . min) (lV4dfc core-prim . max) (lV4dfb core-prim . map) (lV4dfa core-prim . make-vector) (lV4df9 core-prim . make-string) (lV4df8 core-prim . make-rectangular) (lV4df7 core-prim . make-polar) (lV4df6 core-prim . magnitude) (lV4df5 core-prim . log) (lV4df4 core-prim . list?) (lV4df3 core-prim . list-tail) (lV4df2 core-prim . list-ref) (lV4df1 core-prim . list->vector) (lV4df0 core-prim . list->string) (lV4def core-prim . list) (lV4dee core-prim . length) (lV4ded core-prim . lcm) (lV4dec core-prim . integer?) (lV4deb core-prim . integer-valued?) (lV4dea core-prim . integer->char) (lV4de9 core-prim . infinite?) (lV4de8 core-prim . inexact?) (lV4de7 core-prim . inexact) (lV4de6 core-prim . imag-part) (lV4de5 core-prim . gcd) (lV4de4 core-prim . for-each) (lV4de3 core-prim . floor) (lV4de2 core-prim . finite?) (lV4de1 core-prim . expt) (lV4de0 core-prim . exp) (lV4ddf core-prim . exact?) (lV4dde core-prim . exact-integer-sqrt) (lV4ddd core-prim . exact) (lV4ddc core-prim . even?) (lV4ddb core-prim . error) (lV4dda core-prim . eqv?) (lV4dd9 core-prim . equal?) (lV4dd8 core-prim . eq?) (lV4dd7 core-prim . dynamic-wind) (lV4dd6 core-prim . div0-and-mod0) (lV4dd5 core-prim . mod0) (lV4dd4 core-prim . div0) (lV4dd3 core-prim . div-and-mod) (lV4dd2 core-prim . mod) (lV4dd1 core-prim . div) (lV4dd0 core-prim . denominator) (lV4dcf core-prim . cos) (lV4dce core-prim . cons) (lV4dcd core-prim . complex?) (lV4dcc core-prim . char?) (lV4dcb core-prim . char>?) (lV4dca core-prim . char>=?) (lV4dc9 core-prim . char=?) (lV4dc8 core-prim . char<?) (lV4dc7 core-prim . char<=?) (lV4dc6 core-prim . char->integer) (lV4dc5 core-prim . ceiling) (lV4dc4 core-prim . call-with-values) (lV4dc3 core-prim . call/cc) (lV4dc2 core-prim . call-with-current-continuation) (lV4dc1 core-prim . cddddr) (lV4dc0 core-prim . cdddar) (lV4dbf core-prim . cddadr) (lV4dbe core-prim . cddaar) (lV4dbd core-prim . cdaddr) (lV4dbc core-prim . cdadar) (lV4dbb core-prim . cdaadr) (lV4dba core-prim . cdaaar) (lV4db9 core-prim . cadddr) (lV4db8 core-prim . caddar) (lV4db7 core-prim . cadadr) (lV4db6 core-prim . cadaar) (lV4db5 core-prim . caaddr) (lV4db4 core-prim . caadar) (lV4db3 core-prim . caaadr) (lV4db2 core-prim . caaaar) (lV4db1 core-prim . cdddr) (lV4db0 core-prim . cddar) (lV4daf core-prim . cdadr) (lV4dae core-prim . cdaar) (lV4dad core-prim . caddr) (lV4dac core-prim . cadar) (lV4dab core-prim . caadr) (lV4daa core-prim . caaar) (lV4da9 core-prim . cddr) (lV4da8 core-prim . cdar) (lV4da7 core-prim . cadr) (lV4da6 core-prim . caar) (lV4da5 core-prim . cdr) (lV4da4 core-prim . car) (lV4da3 core-prim . boolean?) (lV4da2 core-prim . boolean=?) (lV4da1 core-prim . atan) (lV4da0 core-prim . assertion-violation) (lV2d87 core-prim . assertion-error) (lV4d9f core-prim . asin) (lV4d9e core-prim . apply) (lV4d9d core-prim . append) (lV4d9c core-prim . angle) (lV4d9b core-prim . acos) (lV4d9a core-prim . abs) (lV4d99 core-prim . /) (lV4d98 core-prim . *) (lV4d97 core-prim . -) (lV4d96 core-prim . +) (lV4d95 core-prim . >=) (lV4d94 core-prim . >) (lV4d93 core-prim . =) (lV4d92 core-prim . <=) (lV4d91 core-prim . <) (lV4d90 core-prim . library) (lV4d8f $core-rtd &no-nans-rtd &no-nans-rcd) (lV4d8e $core-rtd &no-infinities-rtd &no-infinities-rcd) (lV4d8d $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (lV4d8c $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (lV4d8b $core-rtd &i/o-port-rtd &i/o-port-rcd) (lV4d8a $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (lV4d89 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (lV4d88 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (lV4d87 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (lV4d86 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (lV4d85 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (lV4d84 $core-rtd &i/o-write-rtd &i/o-write-rcd) (lV4d83 $core-rtd &i/o-read-rtd &i/o-read-rcd) (lV4d82 $core-rtd &i/o-rtd &i/o-rcd) (lV4d81 $core-rtd &undefined-rtd &undefined-rcd) (lV4d80 $core-rtd &syntax-rtd &syntax-rcd) (lV4d7f $core-rtd &lexical-rtd &lexical-rcd) (lV4d7e $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (lV4d7d $core-rtd &non-continuable-rtd &non-continuable-rcd) (lV4d7c $core-rtd &who-rtd &who-rcd) (lV4d7b $core-rtd &irritants-rtd &irritants-rcd) (lV4d7a $core-rtd &assertion-rtd &assertion-rcd) (lV4d79 $core-rtd &violation-rtd &violation-rcd) (lV4d78 $core-rtd &error-rtd &error-rcd) (lV4d77 $core-rtd &serious-rtd &serious-rcd) (lV4d76 $core-rtd &warning-rtd &warning-rcd) (lV4d75 $core-rtd &message-rtd &message-rcd) (lV4d74 $core-rtd &condition-rtd &condition-rcd) (lV4d73 macro . define-condition-type) (lV4d72 macro . define-enumeration) (lV4d71 macro . define-record-type) (lV4d70 macro . parent-rtd) (lV4d6f macro . nongenerative) (lV4d6e macro . opaque) (lV4d6d macro . sealed) (lV4d6c macro . protocol) (lV4d6b macro . parent) (lV4d6a macro . immutable) (lV4d69 macro . mutable) (lV4d68 macro . fields) (lV4d67 macro . error-handling-mode) (lV4d66 macro . file-options) (lV4d65 macro . buffer-mode) (lV4d64 macro . eol-style) (lV4d63 macro . guard) (lV4d62 macro . trace-define) (lV4d61 macro . trace-lambda) (lV4d60 macro . unsyntax-splicing) (lV4d5f macro . unsyntax) (lV4d5e macro . unquote-splicing) (lV4d5d macro . unquote) (lV4d5c macro . _) (lV4d5b macro . else) (lV4d5a macro . =>) (lV4d59 macro . ...) (lV4d58 macro . assert) (lV4d57 macro . endianness) (lV4d56 macro . delay) (lV4d55 macro . time) (lV4d54 macro . do) (lV4d53 macro . cond) (lV4d52 macro . let*) (lV4d51 macro . let) (lV4d50 macro . let*-values) (lV4d4f macro . let-values) (lV4d4e macro . identifier-syntax) (lV4d4d macro . with-syntax) (lV4d4c macro . quasisyntax) (lV4d4b macro . quasiquote) (lV4d4a macro . syntax-rules) (lV4d49 macro . include) (lV4d48 macro . define-struct) (lV4d47 core-macro . record-constructor-descriptor) (lV4d46 core-macro . record-type-descriptor) (lV4d45 macro . case) (lV4d44 macro . parameterize) (lV4d43 macro . unless) (lV4d42 macro . when) (lV4d41 core-macro . or) (lV4d40 core-macro . and) (lV4d3f core-macro . if) (lV4d3e core-macro . let) (lV4d3d core-macro . letrec*) (lV4d3c core-macro . letrec) (lV4d3b core-macro . type-descriptor) (lV4d3a core-macro . case-lambda) (lV4d39 core-macro . lambda) (lV4d38 core-macro . syntax) (lV4d37 core-macro . syntax-case) (lV4d36 core-macro . quote) (lV4d35 core-macro . foreign-call) (lV4d34 letrec-syntax) (lV4d33 let-syntax) (lV4d32 set!) (lV4d31 import) (lV4d30 begin) (lV4d2f module) (lV4d2e define-syntax) (lV4d2d define)) values values '#f '#f '#f '#f) (lV28bb@lV2707@install-library 'lV5076 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . lV5055) (eval-core . lV5054) (set-symbol-value! . lV5053) (symbol-value . lV5052) (gensym . lV5051) (void . lV5050)) '() values values '#f '#f '#f '#f) (lV28bb@lV2707@install-library 'lV5077 '(mosh) '() '() '() '() '((set-symbol-value! . lV5053) (symbol-value . lV5052) (regexp? . lV504e) (read-line . lV504d) (ungensym . lV504b) (alist->eq-hash-table . lV504a) (assoc-ref . lV5049) (print . lV5048) (format . lV5047) (host-os . lV5046) (library-path . lV26e6) (standard-library-path . lV5045) (file-newer? . lV5044) (stat-mtime . lV5043) (digit->integer . lV503f) (call-with-string-input-port . lV503e) (call-with-string-io . lV503d) (string-split . lV503c) (bytevector-for-each . lV503b) (string->regexp . lV503a) (rxmatch . lV5039) (regexp-replace-all . lV5038) (hashtable-for-each . lV5037) (set-current-directory! . lV5032) (expand-path . lV5031) (current-directory . lV5030) (p . lV4ff1) (get-timeofday . lV4fd8) (get-command-line . lV4fd7) (sys-display . lV4fd6) (whereis . lV4fd5) (register . lV4fd4) (vm-join! . lV4fd3) (vm-set-value! . lV4fd2) (vm? . lV4fd1) (main-vm? . lV4fd0) (vm-eval . lV4fcf) (vm-self . lV4fce) (vm-start! . lV4fcd) (make-vm . lV4fcc) (mutex-try-lock! . lV4fcb) (mutex-unlock! . lV4fca) (mutex-lock! . lV4fc9) (mutex? . lV4fc8) (make-mutex . lV4fc7) (condition-variable-notify-all! . lV4fc6) (condition-variable-notify! . lV4fc5) (condition-variable-wait! . lV4fc4) (make-condition-variable . lV4fc3) (mosh-executable-path . lV4fc2) (make-file-options . lV4fc1) (source-info . lV4fc0) (make-compiler-instruction . lV4fbf) (make-instruction . lV4fbe) (set-source-info! . lV4fbd) (bignum? . lV4fbc) (fast-equal? . lV4fbb) (fasl-read . lV4fba) (fasl-write . lV4fb9) (time-usage . lV4fb8) (os-constant . lV4fb7) (time . lV4d55) (include . lV4d49)) '() values values '#f '#f '#f '#f) (lV28bb@lV2707@install-library 'lV5078 '(system) '() '() '() '() '((gensym-prefix-set! . lV504c) (write-to-file . lV5042) (file->list . lV5041) (file->string . lV5040) (mosh-cache-dir . lV24d1) (call-process . lV5036) (local-tz-offset . lV5035) (microseconds . lV5034) (directory-list . lV5033) (expand-path . lV5031) (%spawn . lV502f) (%waitpid . lV502e) (simple-struct-name . lV502d) (simple-struct-set! . lV502c) (simple-struct-ref . lV502b) (make-simple-struct . lV502a) (simple-struct? . lV5029) (pointer-ref-c-int64 . lV5028) (pointer-ref-c-int32 . lV5027) (pointer-ref-c-int16 . lV5026) (pointer-ref-c-int8 . lV5025) (pointer-ref-c-uint64 . lV5024) (pointer-ref-c-uint32 . lV5023) (pointer-ref-c-uint16 . lV5022) (pointer-ref-c-uint8 . lV5021) (pointer-set-c-uint64! . lV5020) (pointer-set-c-uint32! . lV501f) (pointer-set-c-uint16! . lV501e) (pointer-set-c-uint8! . lV501d) (pointer-set-c-int64! . lV501c) (pointer-set-c-int32! . lV501b) (pointer-set-c-int16! . lV501a) (pointer-set-c-int8! . lV5019) (pointer-set-c-pointer! . lV5018) (pointer-set-c-double! . lV5017) (pointer-set-c-float! . lV5016) (pointer-set-c-long-long! . lV5015) (pointer-set-c-long! . lV5014) (pointer-set-c-int! . lV5013) (pointer-set-c-short! . lV5012) (pointer-set-c-char! . lV5011) (pointer-ref-c-pointer . lV5010) (pointer-ref-c-double . lV500f) (pointer-ref-c-float . lV500e) (pointer-ref-c-unsigned-long-long . lV500d) (pointer-ref-c-signed-long-long . lV500c) (pointer-ref-c-unsigned-long . lV500b) (pointer-ref-c-signed-long . lV500a) (pointer-ref-c-unsigned-int . lV5009) (pointer-ref-c-signed-int . lV5008) (pointer-ref-c-unsigned-short . lV5007) (pointer-ref-c-signed-short . lV5006) (pointer-ref-c-unsigned-char . lV5005) (pointer-ref-c-signed-char . lV5004) (pointer->integer . lV5003) (integer->pointer . lV5002) (pointer? . lV5001) (shared-errno . lV5000) (%ffi-free . lV4fff) (%ffi-malloc . lV4ffe) (%ffi-supported? . lV4ffd) (%ffi-pointer->string . lV4ffc) (%ffi-call->string-or-zero . lV4ffb) (%ffi-call->double . lV4ffa) (%ffi-call->void* . lV4ff9) (%ffi-call->void . lV4ff8) (%ffi-call->char . lV4ff7) (%ffi-call->int . lV4ff6) (%ffi-lookup . lV4ff5) (%ffi-open . lV4ff4) (%fork . lV4ff3) (%pipe . lV4ff2) (open-output-string . lV4ff0) (get-output-string . lV4fef) (file-stat-ctime . lV4fee) (file-stat-atime . lV4fed) (file-stat-mtime . lV4fec) (file-size-in-bytes . lV4feb) (file-writable? . lV4fea) (file-executable? . lV4fe9) (file-readable? . lV4fe8) (file-regular? . lV4fe7) (file-symbolic-link? . lV4fe6) (file-directory? . lV4fe5) (create-symbolic-link . lV4fe4) (rename-file . lV4fe3) (delete-directory . lV4fe2) (create-directory . lV4fe1) (create-mosh-cache-dir . lV4fe0) (get-environment-variables . lV4fdf) (current-exception-handler . lV4fde) (get-environment-variable . lV4fdd) (join-wraps . lV4fdc) (id->real-label . lV4fdb) (same-marks? . lV4fda) (same-marks*? . lV4fd9) (disasm . lV4fb6) (make-parameter . lV24cf) (socket-port . lV4fb5) (socket-shutdown . lV4fb4) (socket-close . lV4fb3) (socket-send . lV4fb2) (socket-recv! . lV4fb1) (socket-recv . lV4fb0) (make-server-socket . lV4faf) (make-client-socket . lV4fae) (socket-accept . lV4fad) (socket? . lV4fac) (parameterize . lV4d44)) '() values values '#f '#f '#f '#f)))
(begin (set! lV4bb0@ref (unspecified)) (set! lV4bb2@x* (unspecified)) (set! lV4bb4@add-library-path! (unspecified)) (set! lV4bb6@parse-and-add-library-path (unspecified)) (set! lV4bb8@for-each-with-index (unspecified)) (set! lV4bba@rpad (unspecified)) (set! lV4bbc@condition-printer (unspecified)) (set! lV4bbe@record->field-alist (unspecified)) (set! lV4bc0@map-with-index (unspecified)) (set! lV4bc2@repl (unspecified)) (set! lV4bc4@trace-printer (unspecified)) (set! lV4bc6@command-line (unspecified)) (set! lV4bc8@local-library-path (unspecified)) (set! lV4bca@load/args (unspecified)) (set! lV4bcc@load (unspecified)) (set! lV4bce@ironscheme-build (unspecified)) (set! lV4bd0@eval-top-level (unspecified)) (set! lV4bd2@compile-system-libraries (unspecified)) (set! lV4bd4@compile (unspecified)) (set! lV4bd6@compile->closure (unspecified)) (set! lV4bd8@pre-compile-r6rs-file (unspecified)) (set! lV4bda@load-r6rs-top-level (unspecified)) (set! lV4bdc@load-r6rs-top-level-sexp (unspecified)) (set! lV4bde@prefix-inc (unspecified)) (set! lV4be0@prefix-inc! (unspecified)) (begin (set! lV4bb0@ref (lambda (lV4c1b@rtd lV4c1c@i lV4c1d@x) (let ((lV4c21@val ((record-accessor lV4c1b@rtd lV4c1c@i) lV4c1d@x))) (if (symbol? lV4c21@val) (ungensym lV4c21@val) lV4c21@val)))) (set! lV4d13@lV4bb0@ref lV4bb0@ref)) (begin (set! lV4bb2@x* '()) (set! lV4d14@lV4bb2@x* lV4bb2@x*)) (begin (set! lV4bb4@add-library-path! (lambda (lV4c23@path) (lV28ab@lV26e7@library-path (append (lV28ab@lV26e7@library-path) (list lV4c23@path))))) (set! lV4d15@lV4bb4@add-library-path! lV4bb4@add-library-path!)) (begin (set! lV4bb6@parse-and-add-library-path (lambda (lV4c25@paths lV4c26@message) (let ((lV4c2a@separator '#f)) (begin (set! lV4c2a@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((lV4c2b@t lV4c25@paths)) (if lV4c2b@t ((lambda (lV4c2d@paths) (for-each (lambda (lV4c2f@path) (if (file-exists? lV4c2f@path) (lV4bb4@add-library-path! (expand-path lV4c2f@path)) (format (current-error-port) lV4c26@message lV4c2f@path))) (string-split lV4c2d@paths lV4c2a@separator))) lV4c2b@t) (void))))))) (set! lV4d16@lV4bb6@parse-and-add-library-path lV4bb6@parse-and-add-library-path)) (begin (set! lV4bb8@for-each-with-index (lambda (lV4c31@proc lV4c32@lst) (letrec ((lV4c35@loop (lambda (lV4c37@i lV4c38@lst) (if (null? lV4c38@lst) (if '#f '#f (void)) (begin (lV4c31@proc lV4c37@i (car lV4c38@lst)) (lV4c35@loop (+ lV4c37@i '1) (cdr lV4c38@lst))))))) (lV4c35@loop '1 lV4c32@lst)))) (set! lV4d17@lV4bb8@for-each-with-index lV4bb8@for-each-with-index)) (begin (set! lV4bba@rpad (lambda (lV4c3b@str lV4c3c@pad lV4c3d@n) (let ((lV4c41@rest (- lV4c3d@n (string-length (format '"~a" lV4c3b@str))))) (let lV4c47@loop ((lV4c43@rest lV4c41@rest) (lV4c44@ret (format '"~a" lV4c3b@str))) (if (<= lV4c43@rest '0) lV4c44@ret (lV4c47@loop (- lV4c43@rest '1) (string-append lV4c44@ret lV4c3c@pad))))))) (set! lV4d18@lV4bba@rpad lV4bba@rpad)) (begin (set! lV4bbc@condition-printer (lambda (lV4c49@e lV4c4a@port) (let ((lV4c4e@max-condition-len '#f)) (begin (set! lV4c4e@max-condition-len (apply max (map (lambda (lV4c5f@c) (string-length (symbol->string (record-type-name (record-rtd lV4c5f@c))))) (simple-conditions lV4c49@e)))) (begin (display '" Condition components:\n" lV4c4a@port) (lV4bb8@for-each-with-index (lambda (lV4c4f@i lV4c50@x) (let ((lV4c53@rtd (record-rtd lV4c50@x)) (lV4c54@fields-alist (lV4bbe@record->field-alist lV4c50@x))) (begin (format lV4c4a@port '" ~d. ~a" lV4c4f@i (lV4bba@rpad (symbol->string (record-type-name lV4c53@rtd)) '" " lV4c4e@max-condition-len)) (if (null? lV4c54@fields-alist) (newline lV4c4a@port) (void)) (let lV4c5b@loop ((lV4c57@first '#t) (lV4c58@fields-alist lV4c54@fields-alist)) (if (null? lV4c58@fields-alist) '() (let ((lV4c5d@field (car lV4c58@fields-alist))) (begin (if (not lV4c57@first) (display (lV4bba@rpad '"" '" " (+ '4 lV4c4e@max-condition-len)) lV4c4a@port) (void)) (display '"       " lV4c4a@port) (display (car lV4c5d@field) lV4c4a@port) (display '": " lV4c4a@port) (write (cdr lV4c5d@field) lV4c4a@port) (newline lV4c4a@port) (lV4c5b@loop '#f (cdr lV4c58@fields-alist))))))))) (simple-conditions lV4c49@e))))))) (set! lV4d19@lV4bbc@condition-printer lV4bbc@condition-printer)) (begin (set! lV4bbe@record->field-alist (lambda (lV4c61@r) (let ((lV4c64@ref '#f)) (begin (set! lV4c64@ref (lambda (lV4c6f@rtd lV4c70@i lV4c71@x) (let ((lV4c75@val ((record-accessor lV4c6f@rtd lV4c70@i) lV4c71@x))) (if (symbol? lV4c75@val) (ungensym lV4c75@val) lV4c75@val)))) (let lV4c69@loop ((lV4c65@ret '()) (lV4c66@rtd (record-rtd lV4c61@r))) (if lV4c66@rtd (lV4c69@loop (append lV4c65@ret (lV4bc0@map-with-index (lambda (lV4c6b@i lV4c6c@field) (cons lV4c6c@field (lV4c64@ref lV4c66@rtd lV4c6b@i lV4c61@r))) (vector->list (record-type-field-names lV4c66@rtd)))) (record-type-parent lV4c66@rtd)) lV4c65@ret)))))) (set! lV4d1a@lV4bbe@record->field-alist lV4bbe@record->field-alist)) (begin (set! lV4bc0@map-with-index (lambda (lV4c77@proc lV4c78@lst) (let lV4c81@loop ((lV4c7b@i '0) (lV4c7c@lst lV4c78@lst) (lV4c7d@ret '())) (if (null? lV4c7c@lst) (reverse lV4c7d@ret) (lV4c81@loop (+ lV4c7b@i '1) (cdr lV4c7c@lst) (cons (lV4c77@proc lV4c7b@i (car lV4c7c@lst)) lV4c7d@ret)))))) (set! lV4d1b@lV4bc0@map-with-index lV4bc0@map-with-index)) (begin (set! lV4bc2@repl (lambda lV4c83@x (let ((lV4c86@rec '#f)) (begin (set! lV4c86@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (lV4c89@lV4c87) (lambda () (with-exception-handler (lambda (lV4c8b@e) ((call/cc (lambda (lV4c8d@lV4c88) (lV4c89@lV4c87 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? lV4c8b@e) (lV4bbc@condition-printer lV4c8b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" lV4c8b@e))) (lV4c8d@lV4c88 (lambda () (raise-continuable lV4c8b@e)))))))))) (lambda () (let lV4c93@loop ((lV4c8f@line (get-line (current-input-port))) (lV4c90@accum '"")) (let ((lV4c96@parentheses-ok? '#f) (lV4c98@eval-string-print '#f)) (begin (set! lV4c96@parentheses-ok? (lambda (lV4c9d@text) (let lV4ca5@loop ((lV4c9f@chars (string->list lV4c9d@text)) (lV4ca0@p0 '0) (lV4ca1@p1 '0)) (if (null? lV4c9f@chars) (= '0 lV4ca0@p0 lV4ca1@p1) (let ((lV4ca7@t (car lV4c9f@chars))) (if (memv lV4ca7@t '(#\()) (lV4ca5@loop (cdr lV4c9f@chars) (+ lV4ca0@p0 '1) lV4ca1@p1) (if (memv lV4ca7@t '(#\))) (lV4ca5@loop (cdr lV4c9f@chars) (- lV4ca0@p0 '1) lV4ca1@p1) (if (memv lV4ca7@t '(#\[)) (lV4ca5@loop (cdr lV4c9f@chars) lV4ca0@p0 (+ lV4ca1@p1 '1)) (if (memv lV4ca7@t '(#\])) (lV4ca5@loop (cdr lV4c9f@chars) lV4ca0@p0 (- lV4ca1@p1 '1)) (lV4ca5@loop (cdr lV4c9f@chars) lV4ca0@p0 lV4ca1@p1)))))))))) (set! lV4c98@eval-string-print (lambda (lV4c9b@text) (if (not (or (string=? '"\n" lV4c9b@text) (= '0 (string-length lV4c9b@text)))) (write (lV4bd0@eval-top-level (call-with-port (open-string-input-port lV4c9b@text) read))) (void)))) (if (eof-object? lV4c8f@line) (begin (lV4c98@eval-string-print lV4c90@accum) (exit)) (let ((lV4c99@current (string-append lV4c90@accum lV4c8f@line))) (if (lV4c96@parentheses-ok? lV4c99@current) (lV4c98@eval-string-print lV4c99@current) (lV4c93@loop (get-line (current-input-port)) lV4c99@current))))))))))))) (newline) (lV4c86@rec)))) (lV4c86@rec))))) (set! lV4d1c@lV4bc2@repl lV4bc2@repl)) (begin (set! lV4bc4@trace-printer (lV25f1@lV24d0@make-parameter write)) (set! lV4d1d@lV4bc4@trace-printer lV4bc4@trace-printer)) (begin (set! lV4bc6@command-line (lV25f1@lV24d0@make-parameter (get-command-line))) (set! lV4d1e@lV4bc6@command-line lV4bc6@command-line)) (begin (set! lV4bc8@local-library-path (lambda (lV4ca9@filename) (lV28ab@lV26e7@library-path))) (set! lV4d1f@lV4bc8@local-library-path lV4bc8@local-library-path)) (begin (set! lV4bca@load/args (lambda (lV4cab@filename . lV4cad@args) (begin (apply lV4bda@load-r6rs-top-level lV4cab@filename 'load lV4cad@args) (void)))) (set! lV4d20@lV4bca@load/args lV4bca@load/args)) (begin (set! lV4bcc@load (lambda (lV4caf@filename) (begin (apply lV4bda@load-r6rs-top-level lV4caf@filename 'load (lV4bc6@command-line)) (void)))) (set! lV4d21@lV4bcc@load lV4bcc@load)) (begin (set! lV4bce@ironscheme-build (lambda () (lV4bcc@load '"ironscheme-buildscript.ss"))) (set! lV4d22@lV4bce@ironscheme-build lV4bce@ironscheme-build)) (begin (set! lV4bd0@eval-top-level (lambda (lV4cb1@x) (lV47d6@lV2d6e@eval lV4cb1@x (lV47ed@lV2d9c@interaction-environment)))) (set! lV4d23@lV4bd0@eval-top-level lV4bd0@eval-top-level)) (begin (set! lV4bd2@compile-system-libraries (lambda () (lV4bd0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! lV4d24@lV4bd2@compile-system-libraries lV4bd2@compile-system-libraries)) (begin (set! lV4bd4@compile (lambda (lV4cb3@filename) (lV4bda@load-r6rs-top-level lV4cb3@filename 'compile))) (set! lV4d25@lV4bd4@compile lV4bd4@compile)) (begin (set! lV4bd6@compile->closure (lambda (lV4cb5@filename) (lV4bda@load-r6rs-top-level lV4cb5@filename 'closure))) (set! lV4d26@lV4bd6@compile->closure lV4bd6@compile->closure)) (begin (set! lV4bd8@pre-compile-r6rs-file (lambda (lV4cb7@filename) (lV4bda@load-r6rs-top-level lV4cb7@filename 'compile))) (set! lV4d27@lV4bd8@pre-compile-r6rs-file lV4bd8@pre-compile-r6rs-file)) (begin (set! lV4bda@load-r6rs-top-level (lambda (lV4cb9@filename lV4cba@how . lV4cbd@args) (begin (lV28ab@lV26e7@library-path (lV4bc8@local-library-path lV4cb9@filename)) (let ((lV4cbf@x* (with-input-from-file lV4cb9@filename (lambda () (let lV4cc1@f1 () (let ((lV4cc3@x (lV25e4@lV24b6@read-annotated))) (if (eof-object? lV4cc3@x) '() (cons lV4cc3@x (lV4cc1@f1))))))))) (let ((lV4cc5@t lV4cba@how)) (if (memv lV4cc5@t '(closure)) (lV47ec@lV2d9a@pre-compile-r6rs-top-level lV4cbf@x*) (if (memv lV4cc5@t '(load)) (begin (lV4bc6@command-line (cons lV4cb9@filename (car lV4cbd@args))) (lV25f2@lV24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (lV25f2@lV24d2@mosh-cache-dir) (gensym-prefix-set! (lV4be0@prefix-inc! (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lV4cc7@file) ((call/cc (lambda (lV4ccb@lV4cc9) (lambda () (with-exception-handler (lambda (lV4ccd@c) ((call/cc (lambda (lV4ccf@lV4cca) (lV4ccb@lV4cc9 (lambda () (if '#t '#t (lV4ccf@lV4cca (lambda () (raise-continuable lV4ccd@c)))))))))) (lambda () (delete-file (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/" lV4cc7@file))))))))) (directory-list (lV25f2@lV24d2@mosh-cache-dir))) (void)) (let ((lV4cd1@compiled (lV47eb@lV2d98@compile-r6rs-top-level lV4cbf@x*))) (begin (if (and (lV25f2@lV24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lV28af@lV26ef@serialize-all lV25ec@lV24c6@serialize-library lV2648@lV2601@compile-core-expr) (void)) (lV4cd1@compiled)))) (if (memv lV4cc5@t '(compile)) (begin (lV47eb@lV2d98@compile-r6rs-top-level lV4cbf@x*) (lV28af@lV26ef@serialize-all lV25ec@lV24c6@serialize-library lV2648@lV2601@compile-core-expr)) (if '#f '#f (void)))))))))) (set! lV4d28@lV4bda@load-r6rs-top-level lV4bda@load-r6rs-top-level)) (begin (set! lV4bdc@load-r6rs-top-level-sexp (lambda (lV4cd3@import-spec lV4cd4@thunk) (let ((lV4cdf@lV4cd8 lV28ab@lV26e7@library-path) (lV4ce0@lV4cda lV25f2@lV24d2@mosh-cache-dir) (lV4ce1@lV4cdc (lV4bc8@local-library-path '"")) (lV4ce2@lV4cde (create-mosh-cache-dir))) (let ((lV4ce7@swap (lambda () (begin (let ((lV4ce9@t (lV4cdf@lV4cd8))) (begin (lV4cdf@lV4cd8 lV4ce1@lV4cdc) (set! lV4ce1@lV4cdc lV4ce9@t))) (let ((lV4ceb@t (lV4ce0@lV4cda))) (begin (lV4ce0@lV4cda lV4ce2@lV4cde) (set! lV4ce2@lV4cde lV4ceb@t))))))) (dynamic-wind lV4ce7@swap (lambda () (begin (if (lV25f2@lV24d2@mosh-cache-dir) (gensym-prefix-set! (lV4be0@prefix-inc! (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((lV4cf1@lV4cee lV4bc6@command-line) (lV4cf2@lV4cf0 '())) (let ((lV4cf5@swap (lambda () (let ((lV4cf7@t (lV4cf1@lV4cee))) (begin (lV4cf1@lV4cee lV4cf2@lV4cf0) (set! lV4cf2@lV4cf0 lV4cf7@t)))))) (dynamic-wind lV4cf5@swap (lambda () ((lV47eb@lV2d98@compile-r6rs-top-level (list (cons 'import lV4cd3@import-spec) (list lV4cd4@thunk))))) lV4cf5@swap))))) lV4ce7@swap))))) (set! lV4d29@lV4bdc@load-r6rs-top-level-sexp lV4bdc@load-r6rs-top-level-sexp)) (begin (set! lV4bde@prefix-inc (lambda (lV4cf9@prefix-string) (let ((lV4cfb@prefix (symbol->string lV4cf9@prefix-string))) (let ((lV4cfd@len (string-length lV4cfb@prefix))) (let lV4d05@loop ((lV4cff@i (- lV4cfd@len '1)) (lV4d00@carry? '#t) (lV4d01@accum '())) (if (< lV4cff@i '0) (string->symbol (list->string (if lV4d00@carry? (cons '#\a lV4d01@accum) lV4d01@accum))) (if lV4d00@carry? (let ((lV4d07@next-integer (+ '1 (char->integer (string-ref lV4cfb@prefix lV4cff@i))))) (if (= lV4d07@next-integer '123) (lV4d05@loop (- lV4cff@i '1) '#f (cons '#\A lV4d01@accum)) (if (= lV4d07@next-integer '91) (lV4d05@loop (- lV4cff@i '1) '#t (cons '#\a lV4d01@accum)) (lV4d05@loop (- lV4cff@i '1) '#f (cons (integer->char lV4d07@next-integer) lV4d01@accum))))) (lV4d05@loop (- lV4cff@i '1) '#f (cons (string-ref lV4cfb@prefix lV4cff@i) lV4d01@accum))))))))) (set! lV4d2a@lV4bde@prefix-inc lV4bde@prefix-inc)) (begin (set! lV4be0@prefix-inc! (lambda (lV4d09@file) (begin (if (not (file-exists? lV4d09@file)) (call-with-output-file lV4d09@file (lambda (lV4d0b@port) (write 'd lV4d0b@port))) (void)) (let ((lV4d0d@prefix (call-with-input-file lV4d09@file read))) (let ((lV4d0f@next-prefix (lV4bde@prefix-inc lV4d0d@prefix))) (begin (call-with-port (open-file-output-port lV4d09@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (lV4d11@port) (write lV4d0f@next-prefix lV4d11@port))) lV4d0d@prefix)))))) (set! lV4d2b@lV4be0@prefix-inc! lV4be0@prefix-inc!)) (begin (lV28b0@lV26f1@current-precompiled-library-loader lV25ed@lV24c8@load-serialized-library) (set-symbol-value! 'load lV4bcc@load) (set-symbol-value! 'pre-compile-r6rs-file lV4bd8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs lV4bd0@eval-top-level) (set-symbol-value! 'int-env-syms lV47cd@lV2d5c@interaction-environment-symbols) (set-symbol-value! 'expanded2core lV2647@lV25ff@expanded->core) (set-symbol-value! 'trace-printer lV4bc4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (lV4be1@c) (condition (lV4b0d@lV4917@make-non-continuable-violation) (lV4b03@lV48fe@make-who-condition 'raise) (lV4ac7@lV485f@make-message-condition '"returned from non-continuable exception") (lV4af9@lV48e3@make-irritants-condition (list lV4be1@c))))) (lV4bb6@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (lV4bb6@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (lV4bb4@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (lV4bb4@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (lV4bb4@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((lV4be3@prefix (lambda (lV4be5@ext lV4be6@ls) (append (map (lambda (lV4be9@x) (string-append lV4be5@ext lV4be9@x)) lV4be6@ls) lV4be6@ls)))) (lV28ac@lV26e9@library-extensions (lV4be3@prefix '".mosh" (lV28ac@lV26e9@library-extensions)))) (current-exception-handler (lambda (lV4beb@c) (if (condition? lV4beb@c) (lV4bbc@condition-printer lV4beb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" lV4beb@c)))) (if ((call/cc (lambda (lV4bef@lV4bed) (lambda () (with-exception-handler (lambda (lV4bf1@c) ((call/cc (lambda (lV4bf3@lV4bee) (lV4bef@lV4bed (lambda () (if '#t '#f (lV4bf3@lV4bee (lambda () (raise-continuable lV4bf1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (lV4bdc@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (lV4bc6@command-line)) (let ((lV4bfd@lV4bf6 lV4bc6@command-line) (lV4bfe@lV4bf8 lV25f2@lV24d2@mosh-cache-dir) (lV4bff@lV4bfa '()) (lV4c00@lV4bfc (create-mosh-cache-dir))) (let ((lV4c05@swap (lambda () (begin (let ((lV4c07@t (lV4bfd@lV4bf6))) (begin (lV4bfd@lV4bf6 lV4bff@lV4bfa) (set! lV4bff@lV4bfa lV4c07@t))) (let ((lV4c09@t (lV4bfe@lV4bf8))) (begin (lV4bfe@lV4bf8 lV4c00@lV4bfc) (set! lV4c00@lV4bfc lV4c09@t))))))) (dynamic-wind lV4c05@swap (lambda () (begin (if (lV25f2@lV24d2@mosh-cache-dir) (gensym-prefix-set! (lV4be0@prefix-inc! (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (lV4bc2@repl))) lV4c05@swap))) (begin (lV28ab@lV26e7@library-path (lV4bc8@local-library-path (car (lV4bc6@command-line)))) (set! lV4bb2@x* (with-input-from-file (car (lV4bc6@command-line)) (lambda () (let lV4c0b@f2 () (let ((lV4c0d@x (lV25e4@lV24b6@read-annotated))) (if (eof-object? lV4c0d@x) '() (cons lV4c0d@x (lV4c0b@f2)))))))) (lV4bc6@command-line (cons (car (lV4bc6@command-line)) (cdr (lV4bc6@command-line)))) (lV25f2@lV24d2@mosh-cache-dir (create-mosh-cache-dir)) (if (lV25f2@lV24d2@mosh-cache-dir) (gensym-prefix-set! (lV4be0@prefix-inc! (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lV4c0f@file) ((call/cc (lambda (lV4c13@lV4c11) (lambda () (with-exception-handler (lambda (lV4c15@c) ((call/cc (lambda (lV4c17@lV4c12) (lV4c13@lV4c11 (lambda () (if '#t '#t (lV4c17@lV4c12 (lambda () (raise-continuable lV4c15@c)))))))))) (lambda () (delete-file (string-append (lV25f2@lV24d2@mosh-cache-dir) '"/" lV4c0f@file))))))))) (directory-list (lV25f2@lV24d2@mosh-cache-dir))) (void)) (let ((lV4c19@compiled (lV47eb@lV2d98@compile-r6rs-top-level lV4bb2@x*))) (begin (if (and (lV25f2@lV24d2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lV28af@lV26ef@serialize-all lV25ec@lV24c6@serialize-library lV2648@lV2601@compile-core-expr) (void)) (lV4c19@compiled))))))))
