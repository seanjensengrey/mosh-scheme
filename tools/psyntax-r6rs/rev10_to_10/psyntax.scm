;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! td581@library-file-path->cache-path (unspecified)) (set! td583@read-annotated (unspecified)) (set! td585@annotation-stripped (unspecified)) (set! td587@annotation? (unspecified)) (set! td589@annotation-source (unspecified)) (set! td58b@annotation-expression (unspecified)) (set! td58d@scm->fasl (unspecified)) (set! td58f@fasl-save (unspecified)) (set! td591@fasl-load (unspecified)) (set! td593@serialize-library (unspecified)) (set! td595@load-serialized-library (unspecified)) (set! td597@make-record-printer (unspecified)) (set! td599@compile-core (unspecified)) (set! td59b@read-library-source-file (unspecified)) (set! td59d@make-parameter (unspecified)) (set! td59f@mosh-cache-dir (unspecified)) (set! td635@file-options-spec (unspecified)) (set! td581@library-file-path->cache-path (lambda (td636@x) (call-with-values (lambda () (open-string-output-port)) (lambda (td63c@td639 td63d@td63b) (let ((td640@extract td63d@td63b) (td641@p td63c@td639)) (let ((td645@display-hex '#f)) (begin (set! td645@display-hex (lambda (td64e@n) (if (<= '0 td64e@n '9) (display td64e@n td641@p) (display (integer->char (+ (char->integer '#\a) (- td64e@n '10))) td641@p)))) (begin (let td648@f ((td646@ls (string-split td636@x '#\/))) (if (not (null? td646@ls)) (begin (display '"_" td641@p) (for-each (lambda (td64a@c) (if (or (char<=? '#\a td64a@c '#\z) (char<=? '#\A td64a@c '#\Z) (char<=? '#\0 td64a@c '#\9) (memv td64a@c '(#\- #\. #\_ #\~))) (display td64a@c td641@p) (begin (display '"%" td641@p) (let ((td64c@n (char->integer td64a@c))) (begin (td645@display-hex (quotient td64c@n '16)) (td645@display-hex (remainder td64c@n '16))))))) (string->list (car td646@ls))) (td648@f (cdr td646@ls))) (void))) (td640@extract))))))))) (set! td6b0@td581@library-file-path->cache-path td581@library-file-path->cache-path) (set! td583@read-annotated read) (set! td6b1@td583@read-annotated td583@read-annotated) (set! td585@annotation-stripped (lambda (td650@x) (td58b@annotation-expression td650@x))) (set! td6b2@td585@annotation-stripped td585@annotation-stripped) (set! td587@annotation? (lambda (td652@x) (source-info td652@x))) (set! td6b3@td587@annotation? td587@annotation?) (set! td589@annotation-source (lambda (td654@x) (source-info td654@x))) (set! td6b4@td589@annotation-source td589@annotation-source) (set! td58b@annotation-expression (lambda (td656@x) (if (pair? td656@x) (cons (car td656@x) (cdr td656@x)) (display '"line:46\n")))) (set! td6b5@td58b@annotation-expression td58b@annotation-expression) (set! td58d@scm->fasl (lambda (td658@filename) (string-append (td59f@mosh-cache-dir) '"/" (td581@library-file-path->cache-path td658@filename) '".mosh-fasl"))) (set! td6b6@td58d@scm->fasl td58d@scm->fasl) (set! td58f@fasl-save (lambda (td65a@filename td65b@obj) (call-with-port (open-file-output-port td65a@filename) (lambda (td65e@port) ((symbol-value 'fasl-write!) td65b@obj td65e@port))))) (set! td6b7@td58f@fasl-save td58f@fasl-save) (set! td591@fasl-load (lambda (td660@filename) (call-with-port (open-file-input-port td660@filename) (symbol-value 'fasl-read!)))) (set! td6b8@td591@fasl-load td591@fasl-load) (set! td593@serialize-library (lambda (td662@filename td663@obj) (begin (let ((td666@expanded2core (symbol-value 'expanded2core))) (let ((td668@compile (symbol-value 'compile-w/o-halt))) (let ((td66a@code td663@obj)) (let ((td66c@pivot (cddddr (cddddr td66a@code)))) (let ((td66e@visit (td668@compile (td666@expanded2core (car td66c@pivot))))) (begin (set-car! td66c@pivot td66e@visit) (let ((td670@pivot (cdr td66c@pivot))) (let ((td672@invoke (td668@compile (td666@expanded2core (car td670@pivot))))) (set-car! td670@pivot td672@invoke))))))))) (let ((td674@fasl-file (td58d@scm->fasl td662@filename))) (begin (if (file-exists? td674@fasl-file) (delete-file td674@fasl-file) (void)) ((call/cc (lambda (td678@td676) (lambda () (with-exception-handler (lambda (td67a@c) ((call/cc (lambda (td67c@td677) (td678@td676 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " td662@filename) (if (file-exists? td674@fasl-file) (delete-file td674@fasl-file) (void)) '#f) (td67c@td677 (lambda () (raise-continuable td67a@c)))))))))) (lambda () (td58f@fasl-save td674@fasl-file td663@obj)))))))))))) (set! td6b9@td593@serialize-library td593@serialize-library) (set! td595@load-serialized-library (lambda (td67e@filename td67f@obj) (and (td59f@mosh-cache-dir) (let ((td682@fasl-file (td58d@scm->fasl td67e@filename))) (if (and (file-exists? td682@fasl-file) ((symbol-value 'file-newer?) td682@fasl-file td67e@filename)) (let ((td684@expanded2core (symbol-value 'expanded2core))) (let ((td686@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((td688@code (td591@fasl-load td682@fasl-file))) (let ((td68a@pivot (cddddr (cddddr td688@code)))) (let ((td68c@visit (car td68a@pivot))) (let ((td68e@visit-proc (lambda () (td686@eval-compiled-core td68c@visit)))) (begin (set-car! td68a@pivot td68e@visit-proc) (let ((td690@pivot (cdr td68a@pivot))) (let ((td692@invoke (car td690@pivot))) (begin (set-car! td690@pivot (lambda () (td686@eval-compiled-core td692@invoke))) (apply td67f@obj td688@code))))))))))) '#f))))) (set! td6ba@td595@load-serialized-library td595@load-serialized-library) (set! td597@make-record-printer (lambda (td694@name td695@printer) (lambda td698@x (begin (display '"record printer") (for-each display td698@x))))) (set! td6bb@td597@make-record-printer td597@make-record-printer) (set! td599@compile-core (lambda td69a@x (apply error 'comile-core '"not implementated" td69a@x))) (set! td6bc@td599@compile-core td599@compile-core) (set! td59b@read-library-source-file (lambda (td69c@file-name) (with-input-from-file td69c@file-name td583@read-annotated))) (set! td6bd@td59b@read-library-source-file td59b@read-library-source-file) (set! td59d@make-parameter (lambda td6ac (let ((td6ad (length td6ac))) (if (= td6ad '1) (apply (lambda (td69e@x) (td59d@make-parameter td69e@x (lambda (td6a0@x) td6a0@x))) td6ac) (if (= td6ad '2) (apply (lambda (td6a2@x td6a3@fender) (let ((td6a6@x (td6a3@fender td6a2@x))) (lambda td6aa (let ((td6ab (length td6aa))) (if (= td6ab '0) (apply (lambda () td6a6@x) td6aa) (if (= td6ab '1) (apply (lambda (td6a8@v) (set! td6a6@x (td6a3@fender td6a8@v))) td6aa) (error 'apply '"invalid arg count"))))))) td6ac) (error 'apply '"invalid arg count")))))) (set! td6be@td59d@make-parameter td59d@make-parameter) (set! td59f@mosh-cache-dir (td59d@make-parameter '#f)) (set! td6bf@td59f@mosh-cache-dir td59f@mosh-cache-dir) (set! td635@file-options-spec (lambda (td6ae@x) td6ae@x)) (set! td6c0@td635@file-options-spec td635@file-options-spec) (void))
(begin (set! td6c6@current-primitive-locations (unspecified)) (set! td6c8@mutable? (unspecified)) (set! td6ca@rewriter (unspecified)) (set! td6cc@expanded->core (unspecified)) (set! td6ce@compile-core-expr (unspecified)) (set! td6d0@pretty-print (unspecified)) (set! td6d2@compile-core-expr-to-port (unspecified)) (set! td6c6@current-primitive-locations (td6be@td59d@make-parameter (lambda (td6d3@x) '#f) (lambda (td6d5@p) td6d5@p))) (set! td711@td6c6@current-primitive-locations td6c6@current-primitive-locations) (set! td6c8@mutable? (lambda (td6d7@x) (or (pair? td6d7@x) (vector? td6d7@x) (hashtable? td6d7@x)))) (set! td712@td6c8@mutable? td6c8@mutable?) (set! td6ca@rewriter (lambda (td6d9@quote-hack?) (let ((td6dc@f '#f)) (begin (set! td6dc@f (lambda (td6dd@x) (if (pair? td6dd@x) (let ((td6df@t (car td6dd@x))) (if (memv td6df@t '(quote)) (if (and td6d9@quote-hack? (td6c8@mutable? (cadr td6dd@x))) (let ((td6e1@g (gensym))) (begin (set-symbol-value! td6e1@g (cadr td6dd@x)) td6e1@g)) td6dd@x) (if (memv td6df@t '(case-lambda)) (cons 'case-lambda (map (lambda (td6e3@x) (cons (car td6e3@x) (map td6dc@f (cdr td6e3@x)))) (cdr td6dd@x))) (if (memv td6df@t '(lambda)) (cons* 'lambda (cadr td6dd@x) (map td6dc@f (cddr td6dd@x))) (if (memv td6df@t '(letrec)) (let ((td6e5@bindings (cadr td6dd@x)) (td6e6@body* (cddr td6dd@x))) (let ((td6e9@lhs* (map car td6e5@bindings)) (td6ea@rhs* (map cadr td6e5@bindings))) (cons* 'letrec (map list td6e9@lhs* (map td6dc@f td6ea@rhs*)) (map td6dc@f td6e6@body*)))) (if (memv td6df@t '(letrec*)) (let ((td6ed@bindings (cadr td6dd@x)) (td6ee@body* (cddr td6dd@x))) (let ((td6f1@lhs* (map car td6ed@bindings)) (td6f2@rhs* (map cadr td6ed@bindings))) (cons* 'letrec* (map list td6f1@lhs* (map td6dc@f td6f2@rhs*)) (map td6dc@f td6ee@body*)))) (if (memv td6df@t '(library-letrec*)) (let ((td6f5@name (cadr td6dd@x)) (td6f6@x (cdr td6dd@x))) (let ((td6f9@bindings (cadr td6f6@x)) (td6fa@body* (cddr td6f6@x))) (let ((td6fd@lhs* (map car td6f9@bindings)) (td6fe@lhs** (map cadr td6f9@bindings)) (td6ff@rhs* (map caddr td6f9@bindings))) (cons* 'library-letrec* td6f5@name (map list td6fd@lhs* td6fe@lhs** (map td6dc@f td6ff@rhs*)) (map td6dc@f td6fa@body*))))) (if (memv td6df@t '(begin)) (cons 'begin (map td6dc@f (cdr td6dd@x))) (if (memv td6df@t '(set!)) (list 'set! (cadr td6dd@x) (td6dc@f (caddr td6dd@x))) (if (memv td6df@t '(primitive)) (let ((td703@op (cadr td6dd@x))) (let ((td705@t ((td6c6@current-primitive-locations) td703@op))) (if td705@t ((lambda (td707@loc) td707@loc) td705@t) td703@op))) (if (memv td6df@t '(define)) td6dd@x (if (list? td6dd@x) (map td6dc@f td6dd@x) (error 'rewrite '"invalid form ~s ~s" td6dd@x (list? td6dd@x)))))))))))))) td6dd@x))) td6dc@f)))) (set! td713@td6ca@rewriter td6ca@rewriter) (set! td6cc@expanded->core (lambda (td709@x) ((td6ca@rewriter '#f) td709@x))) (set! td714@td6cc@expanded->core td6cc@expanded->core) (set! td6ce@compile-core-expr (lambda (td70b@x) ((td6ca@rewriter '#f) td70b@x))) (set! td715@td6ce@compile-core-expr td6ce@compile-core-expr) (set! td6d0@pretty-print write) (set! td716@td6d0@pretty-print td6d0@pretty-print) (set! td6d2@compile-core-expr-to-port (lambda (td70d@x td70e@p) (td6d0@pretty-print ((td6ca@rewriter '#f) td70d@x) td70e@p))) (set! td717@td6d2@compile-core-expr-to-port td6d2@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! td766@make-collection (unspecified)) (set! td768@current-library-collection (unspecified)) (set! td76a@rp (unspecified)) (set! td774@library? (unspecified)) (set! td776@library-id (unspecified)) (set! td778@set-library-id! (unspecified)) (set! td77a@library-name (unspecified)) (set! td77c@set-library-name! (unspecified)) (set! td77e@library-version (unspecified)) (set! td780@set-library-version! (unspecified)) (set! td782@library-imp* (unspecified)) (set! td784@set-library-imp*! (unspecified)) (set! td786@library-vis* (unspecified)) (set! td788@set-library-vis*! (unspecified)) (set! td78a@library-inv* (unspecified)) (set! td78c@set-library-inv*! (unspecified)) (set! td78e@library-subst (unspecified)) (set! td790@set-library-subst! (unspecified)) (set! td792@library-env (unspecified)) (set! td794@set-library-env! (unspecified)) (set! td796@library-visit-state (unspecified)) (set! td798@set-library-visit-state! (unspecified)) (set! td79a@library-invoke-state (unspecified)) (set! td79c@set-library-invoke-state! (unspecified)) (set! td79e@library-visit-code (unspecified)) (set! td7a0@set-library-visit-code! (unspecified)) (set! td7a2@library-invoke-code (unspecified)) (set! td7a4@set-library-invoke-code! (unspecified)) (set! td7a6@library-visible? (unspecified)) (set! td7a8@set-library-visible?! (unspecified)) (set! td7aa@library-source-file-name (unspecified)) (set! td7ac@set-library-source-file-name! (unspecified)) (set! td7ae@dummy (unspecified)) (set! td7b0@find-dependencies (unspecified)) (set! td7b2@find-library-by (unspecified)) (set! td7b4@library-path (unspecified)) (set! td7b6@library-extensions (unspecified)) (set! td7b8@library-name->file-name (unspecified)) (set! td7ba@file-locator (unspecified)) (set! td7bc@serialize-all (unspecified)) (set! td7be@current-precompiled-library-loader (unspecified)) (set! td7c0@try-load-from-file (unspecified)) (set! td7c2@library-loader (unspecified)) (set! td7c4@current-library-expander (unspecified)) (set! td7c6@external-pending-libraries (unspecified)) (set! td7c8@find-external-library (unspecified)) (set! td7ca@find-library-by-name (unspecified)) (set! td7cc@library-exists? (unspecified)) (set! td7ce@find-library-by-spec/die (unspecified)) (set! td7d0@label->binding-table (unspecified)) (set! td7d2@install-library-record (unspecified)) (set! td7d4@install-library (unspecified)) (set! td7d6@imported-label->binding (unspecified)) (set! td7d8@invoke-library (unspecified)) (set! td7da@visit-library (unspecified)) (set! td7dc@invoke-library-by-spec (unspecified)) (set! td7de@installed-libraries (unspecified)) (set! td7e0@library-spec (unspecified)) (set! td766@make-collection (lambda () (let ((td7e1@set '())) (let ((td7e4@set-cons '#f)) (begin (set! td7e4@set-cons (lambda (td7e9@x td7ea@ls) (if (memq td7e9@x td7ea@ls) td7ea@ls (cons td7e9@x td7ea@ls)))) (lambda td7e7 (let ((td7e8 (length td7e7))) (if (= td7e8 '0) (apply (lambda () td7e1@set) td7e7) (if (= td7e8 '1) (apply (lambda (td7e5@x) (set! td7e1@set (td7e4@set-cons td7e5@x td7e1@set))) td7e7) (error 'apply '"invalid arg count")))))))))) (set! td955@td766@make-collection td766@make-collection) (set! td768@current-library-collection (td6be@td59d@make-parameter (td766@make-collection) (lambda (td7ed@x) (begin (if (not (procedure? td7ed@x)) (assertion-violation 'current-library-collection '"not a procedure" td7ed@x) (void)) td7ed@x)))) (set! td956@td768@current-library-collection td768@current-library-collection) (set! td76a@rp (td6bb@td597@make-record-printer 'library (lambda (td7ef@x td7f0@p td7f1@wr) (begin (if (not (td774@library? td7ef@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (td77e@library-version td7ef@x)) (td77a@library-name td7ef@x) (append (td77a@library-name td7ef@x) (list (td77e@library-version td7ef@x))))) td7f0@p))))) (set! td957@td76a@rp td76a@rp) (set! td774@library? (lambda (td7f5@x) (and (simple-struct? td7f5@x) (eq? (simple-struct-name td7f5@x) 'library)))) (set! td958@td774@library? td774@library?) (set! td776@library-id (lambda (td7f7@x) (simple-struct-ref td7f7@x '0))) (set! td959@td776@library-id td776@library-id) (set! td778@set-library-id! (lambda (td7f9@x td7fa@val) (simple-struct-set! td7f9@x '0 td7fa@val))) (set! td95a@td778@set-library-id! td778@set-library-id!) (set! td77a@library-name (lambda (td7fd@x) (simple-struct-ref td7fd@x '1))) (set! td95b@td77a@library-name td77a@library-name) (set! td77c@set-library-name! (lambda (td7ff@x td800@val) (simple-struct-set! td7ff@x '1 td800@val))) (set! td95c@td77c@set-library-name! td77c@set-library-name!) (set! td77e@library-version (lambda (td803@x) (simple-struct-ref td803@x '2))) (set! td95d@td77e@library-version td77e@library-version) (set! td780@set-library-version! (lambda (td805@x td806@val) (simple-struct-set! td805@x '2 td806@val))) (set! td95e@td780@set-library-version! td780@set-library-version!) (set! td782@library-imp* (lambda (td809@x) (simple-struct-ref td809@x '3))) (set! td95f@td782@library-imp* td782@library-imp*) (set! td784@set-library-imp*! (lambda (td80b@x td80c@val) (simple-struct-set! td80b@x '3 td80c@val))) (set! td960@td784@set-library-imp*! td784@set-library-imp*!) (set! td786@library-vis* (lambda (td80f@x) (simple-struct-ref td80f@x '4))) (set! td961@td786@library-vis* td786@library-vis*) (set! td788@set-library-vis*! (lambda (td811@x td812@val) (simple-struct-set! td811@x '4 td812@val))) (set! td962@td788@set-library-vis*! td788@set-library-vis*!) (set! td78a@library-inv* (lambda (td815@x) (simple-struct-ref td815@x '5))) (set! td963@td78a@library-inv* td78a@library-inv*) (set! td78c@set-library-inv*! (lambda (td817@x td818@val) (simple-struct-set! td817@x '5 td818@val))) (set! td964@td78c@set-library-inv*! td78c@set-library-inv*!) (set! td78e@library-subst (lambda (td81b@x) (simple-struct-ref td81b@x '6))) (set! td965@td78e@library-subst td78e@library-subst) (set! td790@set-library-subst! (lambda (td81d@x td81e@val) (simple-struct-set! td81d@x '6 td81e@val))) (set! td966@td790@set-library-subst! td790@set-library-subst!) (set! td792@library-env (lambda (td821@x) (simple-struct-ref td821@x '7))) (set! td967@td792@library-env td792@library-env) (set! td794@set-library-env! (lambda (td823@x td824@val) (simple-struct-set! td823@x '7 td824@val))) (set! td968@td794@set-library-env! td794@set-library-env!) (set! td796@library-visit-state (lambda (td827@x) (simple-struct-ref td827@x '8))) (set! td969@td796@library-visit-state td796@library-visit-state) (set! td798@set-library-visit-state! (lambda (td829@x td82a@val) (simple-struct-set! td829@x '8 td82a@val))) (set! td96a@td798@set-library-visit-state! td798@set-library-visit-state!) (set! td79a@library-invoke-state (lambda (td82d@x) (simple-struct-ref td82d@x '9))) (set! td96b@td79a@library-invoke-state td79a@library-invoke-state) (set! td79c@set-library-invoke-state! (lambda (td82f@x td830@val) (simple-struct-set! td82f@x '9 td830@val))) (set! td96c@td79c@set-library-invoke-state! td79c@set-library-invoke-state!) (set! td79e@library-visit-code (lambda (td833@x) (simple-struct-ref td833@x '10))) (set! td96d@td79e@library-visit-code td79e@library-visit-code) (set! td7a0@set-library-visit-code! (lambda (td835@x td836@val) (simple-struct-set! td835@x '10 td836@val))) (set! td96e@td7a0@set-library-visit-code! td7a0@set-library-visit-code!) (set! td7a2@library-invoke-code (lambda (td839@x) (simple-struct-ref td839@x '11))) (set! td96f@td7a2@library-invoke-code td7a2@library-invoke-code) (set! td7a4@set-library-invoke-code! (lambda (td83b@x td83c@val) (simple-struct-set! td83b@x '11 td83c@val))) (set! td970@td7a4@set-library-invoke-code! td7a4@set-library-invoke-code!) (set! td7a6@library-visible? (lambda (td83f@x) (simple-struct-ref td83f@x '12))) (set! td971@td7a6@library-visible? td7a6@library-visible?) (set! td7a8@set-library-visible?! (lambda (td841@x td842@val) (simple-struct-set! td841@x '12 td842@val))) (set! td972@td7a8@set-library-visible?! td7a8@set-library-visible?!) (set! td7aa@library-source-file-name (lambda (td845@x) (simple-struct-ref td845@x '13))) (set! td973@td7aa@library-source-file-name td7aa@library-source-file-name) (set! td7ac@set-library-source-file-name! (lambda (td847@x td848@val) (simple-struct-set! td847@x '13 td848@val))) (set! td974@td7ac@set-library-source-file-name! td7ac@set-library-source-file-name!) (set! td7ae@dummy '3) (set! td975@td7ae@dummy td7ae@dummy) (set! td7b0@find-dependencies (lambda (td84b@ls) (if (null? td84b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! td976@td7b0@find-dependencies td7b0@find-dependencies) (set! td7b2@find-library-by (lambda (td84d@pred) (let td851@f ((td84f@ls ((td768@current-library-collection)))) (if (null? td84f@ls) '#f (if (td84d@pred (car td84f@ls)) (car td84f@ls) (td851@f (cdr td84f@ls))))))) (set! td977@td7b2@find-library-by td7b2@find-library-by) (set! td7b4@library-path (td6be@td59d@make-parameter '(".") (lambda (td853@x) (if (and (list? td853@x) (for-all string? td853@x)) (map (lambda (td855@x) td855@x) td853@x) (assertion-violation 'library-path '"not a list of strings" td853@x))))) (set! td978@td7b4@library-path td7b4@library-path) (set! td7b6@library-extensions (td6be@td59d@make-parameter '(".sls" ".ss" ".scm") (lambda (td857@x) (if (and (list? td857@x) (for-all string? td857@x)) (map (lambda (td859@x) td859@x) td857@x) (assertion-violation 'library-extensions '"not a list of strings" td857@x))))) (set! td979@td7b6@library-extensions td7b6@library-extensions) (set! td7b8@library-name->file-name (lambda (td85b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (td861@td85e td862@td860) (let ((td865@extract td862@td860) (td866@p td861@td85e)) (let ((td86a@display-hex '#f)) (begin (set! td86a@display-hex (lambda (td873@n) (if (<= '0 td873@n '9) (display td873@n td866@p) (display (integer->char (+ (char->integer '#\a) (- td873@n '10))) td866@p)))) (begin (let td86d@f ((td86b@ls td85b@x)) (if (not (null? td86b@ls)) (begin (display '"/" td866@p) (for-each (lambda (td86f@c) (if (or (char<=? '#\a td86f@c '#\z) (char<=? '#\A td86f@c '#\Z) (char<=? '#\0 td86f@c '#\9) (memv td86f@c '(#\- #\. #\_ #\~))) (display td86f@c td866@p) (begin (display '"%" td866@p) (let ((td871@n (char->integer td86f@c))) (begin (td86a@display-hex (quotient td871@n '16)) (td86a@display-hex (remainder td871@n '16))))))) (string->list (symbol->string (car td86b@ls)))) (td86d@f (cdr td86b@ls))) (void))) (td865@extract))))))))) (set! td97a@td7b8@library-name->file-name td7b8@library-name->file-name) (set! td7ba@file-locator (td6be@td59d@make-parameter (lambda (td875@x) (let ((td877@str (td7b8@library-name->file-name td875@x))) (let td87f@f ((td879@ls (td7b4@library-path)) (td87a@exts (td7b6@library-extensions)) (td87b@failed-list '())) (if (null? td879@ls) (let ((td889@td884 '#f) (td88b@td886 '#f) (td88d@td885 '#f) (td890@td883 '#f) (td892@make-library-resolution-condition '#f) (td894@td881 '#f) (td896@td882 '#f) (td898@library-resolution-condition? '#f) (td89a@condition-library '#f) (td89c@condition-files '#f)) (begin (set! td889@td884 (make-record-type-descriptor '&library-resolution td2b90@td28d7@&condition-rtd 'td887 '#f '#f '#((immutable library) (immutable files)))) (set! td88b@td886 '#f) (set! td88d@td885 (make-record-constructor-descriptor td889@td884 td2b91@td28d9@&condition-rcd td88b@td886)) (set! td890@td883 (record-predicate td889@td884)) (set! td892@make-library-resolution-condition (record-constructor td88d@td885)) (set! td894@td881 (record-accessor td889@td884 '0)) (set! td896@td882 (record-accessor td889@td884 '1)) (set! td898@library-resolution-condition? (condition-predicate td889@td884)) (set! td89a@condition-library (condition-accessor td889@td884 td894@td881)) (set! td89c@condition-files (condition-accessor td889@td884 td896@td882)) (raise (condition (td2bb0@td2971@make-error) (td2bd2@td29cd@make-who-condition 'expander) (td2b96@td292e@make-message-condition '"cannot locate library in library-path") (td892@make-library-resolution-condition td875@x (reverse td87b@failed-list)))))) (if (null? td87a@exts) (td87f@f (cdr td879@ls) (td7b6@library-extensions) td87b@failed-list) (let ((td89d@name (string-append (car td879@ls) td877@str (car td87a@exts)))) (if (file-exists? td89d@name) td89d@name (td87f@f td879@ls (cdr td87a@exts) (cons td89d@name td87b@failed-list))))))))) (lambda (td89f@f) (if (procedure? td89f@f) td89f@f (assertion-violation 'file-locator '"not a procedure" td89f@f))))) (set! td97b@td7ba@file-locator td7ba@file-locator) (set! td7bc@serialize-all (lambda (td8a1@serialize td8a2@compile) (let ((td8a6@library-desc '#f)) (begin (set! td8a6@library-desc (lambda (td8a9@x) (list (td776@library-id td8a9@x) (td77a@library-name td8a9@x)))) (for-each (lambda (td8a7@x) (if (td7aa@library-source-file-name td8a7@x) (td8a1@serialize (td7aa@library-source-file-name td8a7@x) (list (td776@library-id td8a7@x) (td77a@library-name td8a7@x) (td77e@library-version td8a7@x) (map td8a6@library-desc (td782@library-imp* td8a7@x)) (map td8a6@library-desc (td786@library-vis* td8a7@x)) (map td8a6@library-desc (td78a@library-inv* td8a7@x)) (td78e@library-subst td8a7@x) (td792@library-env td8a7@x) (td8a2@compile (td79e@library-visit-code td8a7@x)) (td8a2@compile (td7a2@library-invoke-code td8a7@x)) (td7a6@library-visible? td8a7@x))) (void))) ((td768@current-library-collection))))))) (set! td97c@td7bc@serialize-all td7bc@serialize-all) (set! td7be@current-precompiled-library-loader (td6be@td59d@make-parameter (lambda (td8ab@filename td8ac@sk) '#f))) (set! td97d@td7be@current-precompiled-library-loader td7be@current-precompiled-library-loader) (set! td7c0@try-load-from-file (lambda (td8af@filename) ((td7be@current-precompiled-library-loader) td8af@filename (lambda td8d5 (let ((td8d6 (length td8d5))) (if (= td8d6 '11) (apply (lambda (td8b1@id td8b2@name td8b3@ver td8b4@imp* td8b5@vis* td8b6@inv* td8b7@exp-subst td8b8@exp-env td8b9@visit-proc td8ba@invoke-proc td8bb@visible?) (let td8c9@f ((td8c7@deps (append td8b4@imp* td8b5@vis* td8b6@inv*))) (if (null? td8c7@deps) (begin (td7d4@install-library td8b1@id td8b2@name td8b3@ver td8b4@imp* td8b5@vis* td8b6@inv* td8b7@exp-subst td8b8@exp-env td8b9@visit-proc td8ba@invoke-proc '#f '#f td8bb@visible? '#f) '#t) (let ((td8cb@d (car td8c7@deps))) (let ((td8cd@label (car td8cb@d)) (td8ce@dname (cadr td8cb@d))) (let ((td8d1@l (td7ca@find-library-by-name td8ce@dname))) (if (and (td774@library? td8d1@l) (eq? td8cd@label (td776@library-id td8d1@l))) (td8c9@f (cdr td8c7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" td8b2@name td8ce@dname td8af@filename td8d1@l td8cd@label (td776@library-id td8d1@l)) '#f)))))))) td8d5) (if (>= td8d6 '0) (apply (lambda td8d3@others '#f) td8d5) (error 'apply '"invalid arg count")))))))) (set! td97e@td7c0@try-load-from-file td7c0@try-load-from-file) (set! td7c2@library-loader (td6be@td59d@make-parameter (lambda (td8d7@x) (let ((td8d9@file-name ((td7ba@file-locator) td8d7@x))) (if (not td8d9@file-name) (assertion-violation '#f '"cannot file library" td8d7@x) (or (td7c0@try-load-from-file td8d9@file-name) ((td7c4@current-library-expander) (td6bd@td59b@read-library-source-file td8d9@file-name) td8d9@file-name (lambda (td8db@name) (if (not (fast-equal? td8db@name td8d7@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (td8e1@td8de td8e2@td8e0) (let ((td8e5@e td8e2@td8e0) (td8e6@p td8e1@td8de)) (begin (display '"expected to find library " td8e6@p) (write td8d7@x td8e6@p) (display '" in file " td8e6@p) (display td8d9@file-name td8e6@p) (display '", found " td8e6@p) (write td8db@name td8e6@p) (display '" instead" td8e6@p) (td8e5@e)))))) (void)))))))) (lambda (td8e9@f) (if (procedure? td8e9@f) td8e9@f (assertion-violation 'library-locator '"not a procedure" td8e9@f))))) (set! td97f@td7c2@library-loader td7c2@library-loader) (set! td7c4@current-library-expander (td6be@td59d@make-parameter (lambda (td8eb@x) (assertion-violation 'library-expander '"not initialized")) (lambda (td8ed@f) (if (procedure? td8ed@f) td8ed@f (assertion-violation 'library-expander '"not a procedure" td8ed@f))))) (set! td980@td7c4@current-library-expander td7c4@current-library-expander) (set! td7c6@external-pending-libraries (td6be@td59d@make-parameter '())) (set! td981@td7c6@external-pending-libraries td7c6@external-pending-libraries) (set! td7c8@find-external-library (lambda (td8ef@name) (begin (if (member td8ef@name (td7c6@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" td8ef@name) (void)) (let ((td8f5@td8f2 td7c6@external-pending-libraries) (td8f6@td8f4 (cons td8ef@name (td7c6@external-pending-libraries)))) (let ((td8f9@swap (lambda () (let ((td8fb@t (td8f5@td8f2))) (begin (td8f5@td8f2 td8f6@td8f4) (set! td8f6@td8f4 td8fb@t)))))) (dynamic-wind td8f9@swap (lambda () (begin ((td7c2@library-loader) td8ef@name) (or (td7b2@find-library-by (lambda (td8fd@x) (fast-equal? (td77a@library-name td8fd@x) td8ef@name))) (assertion-violation '#f '"handling external library did not yield the correct library" td8ef@name)))) td8f9@swap)))))) (set! td982@td7c8@find-external-library td7c8@find-external-library) (set! td7ca@find-library-by-name (lambda (td8ff@name) (or (td7b2@find-library-by (lambda (td901@x) (fast-equal? (td77a@library-name td901@x) td8ff@name))) (td7c8@find-external-library td8ff@name)))) (set! td983@td7ca@find-library-by-name td7ca@find-library-by-name) (set! td7cc@library-exists? (lambda (td903@name) (and (td7b2@find-library-by (lambda (td905@x) (fast-equal? (td77a@library-name td905@x) td903@name))) '#t))) (set! td984@td7cc@library-exists? td7cc@library-exists?) (set! td7ce@find-library-by-spec/die (lambda (td907@spec) (let ((td909@id (car td907@spec))) (or (td7b2@find-library-by (lambda (td90b@x) (eq? td909@id (td776@library-id td90b@x)))) (assertion-violation '#f '"cannot find library with required spec" td907@spec))))) (set! td985@td7ce@find-library-by-spec/die td7ce@find-library-by-spec/die) (set! td7d0@label->binding-table (make-eq-hashtable)) (set! td986@td7d0@label->binding-table td7d0@label->binding-table) (set! td7d2@install-library-record (lambda (td90d@lib) (begin (let ((td90f@exp-env (td792@library-env td90d@lib))) (for-each (lambda (td911@x) (let ((td913@label (car td911@x)) (td914@binding (cdr td911@x))) (let ((td917@binding (let ((td919@t (car td914@binding))) (if (memv td919@t '(global)) (cons 'global (cons td90d@lib (cdr td914@binding))) (if (memv td919@t '(global-macro)) (cons 'global-macro (cons td90d@lib (cdr td914@binding))) (if (memv td919@t '(global-macro!)) (cons 'global-macro! (cons td90d@lib (cdr td914@binding))) td914@binding)))))) (begin (if (hashtable-ref td7d0@label->binding-table td913@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" td913@label (hashtable-ref td7d0@label->binding-table td913@label '#f) td917@binding) (exit)) (void)) (hashtable-set! td7d0@label->binding-table td913@label td917@binding))))) td90f@exp-env)) ((td768@current-library-collection) td90d@lib)))) (set! td987@td7d2@install-library-record td7d2@install-library-record) (set! td7d4@install-library (lambda (td91b@id td91c@name td91d@ver td91e@imp* td91f@vis* td920@inv* td921@exp-subst td922@exp-env td923@visit-proc td924@invoke-proc td925@visit-code td926@invoke-code td927@visible? td928@source-file-name) (let ((td937@imp-lib* (map td7ce@find-library-by-spec/die td91e@imp*)) (td938@vis-lib* (map td7ce@find-library-by-spec/die td91f@vis*)) (td939@inv-lib* (map td7ce@find-library-by-spec/die td920@inv*))) (begin (if (not (and (symbol? td91b@id) (list? td91c@name) (list? td91d@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" td91b@id td91c@name td91d@ver) (void)) (if (td7cc@library-exists? td91c@name) (assertion-violation 'install-library '"library is already installed" td91c@name) (void)) (let ((td93d@lib (make-simple-struct 'library '15 (list td91b@id td91c@name td91d@ver td937@imp-lib* td938@vis-lib* td939@inv-lib* td921@exp-subst td922@exp-env td923@visit-proc td924@invoke-proc td925@visit-code td926@invoke-code td927@visible? td928@source-file-name)))) (td7d2@install-library-record td93d@lib)))))) (set! td988@td7d4@install-library td7d4@install-library) (set! td7d6@imported-label->binding (lambda (td93f@lab) (hashtable-ref td7d0@label->binding-table td93f@lab '#f))) (set! td989@td7d6@imported-label->binding td7d6@imported-label->binding) (set! td7d8@invoke-library (lambda (td941@lib) (let ((td943@invoke (td79a@library-invoke-state td941@lib))) (if (procedure? td943@invoke) (begin (td79c@set-library-invoke-state! td941@lib (lambda () (assertion-violation 'invoke '"circularity detected" td941@lib))) (for-each td7d8@invoke-library (td78a@library-inv* td941@lib)) (td79c@set-library-invoke-state! td941@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" td941@lib))) (td943@invoke) (td79c@set-library-invoke-state! td941@lib '#t)) (void))))) (set! td98a@td7d8@invoke-library td7d8@invoke-library) (set! td7da@visit-library (lambda (td945@lib) (let ((td947@visit (td796@library-visit-state td945@lib))) (if (procedure? td947@visit) (begin (td798@set-library-visit-state! td945@lib (lambda () (assertion-violation 'visit '"circularity detected" td945@lib))) (for-each td7d8@invoke-library (td786@library-vis* td945@lib)) (td798@set-library-visit-state! td945@lib (lambda () (assertion-violation 'invoke '"first visit did not return" td945@lib))) (td947@visit) (td798@set-library-visit-state! td945@lib '#t)) (void))))) (set! td98b@td7da@visit-library td7da@visit-library) (set! td7dc@invoke-library-by-spec (lambda (td949@spec) (td7d8@invoke-library (td7ce@find-library-by-spec/die td949@spec)))) (set! td98c@td7dc@invoke-library-by-spec td7dc@invoke-library-by-spec) (set! td7de@installed-libraries (lambda td951 (let ((td952 (length td951))) (if (= td952 '1) (apply (lambda (td94b@all?) (let td94f@f ((td94d@ls ((td768@current-library-collection)))) (if (null? td94d@ls) '() (if (or td94b@all? (td7a6@library-visible? (car td94d@ls))) (cons (car td94d@ls) (td94f@f (cdr td94d@ls))) (td94f@f (cdr td94d@ls)))))) td951) (if (= td952 '0) (apply (lambda () (td7de@installed-libraries '#f)) td951) (error 'apply '"invalid arg count")))))) (set! td98d@td7de@installed-libraries td7de@installed-libraries) (set! td7e0@library-spec (lambda (td953@x) (begin (if (not (td774@library? td953@x)) (assertion-violation 'library-spec '"not a library" td953@x) (void)) (list (td776@library-id td953@x) (td77a@library-name td953@x) (td77e@library-version td953@x))))) (set! td98e@td7e0@library-spec td7e0@library-spec) (void))
(begin (set! td992@build-global-define (unspecified)) (set! tda03@build-lambda (unspecified)) (set! tda05@build-case-lambda (unspecified)) (set! tda33@build-sequence (unspecified)) (set! tda35@build-void (unspecified)) (set! tda37@build-letrec (unspecified)) (set! tda39@build-let (unspecified)) (set! tda3b@build-named-let (unspecified)) (set! tda3d@build-letrec* (unspecified)) (set! tda3f@build-library-letrec* (unspecified)) (set! tda41@build-receive (unspecified)) (set! td992@build-global-define (lambda (tda42@x) (tda35@build-void))) (set! tdad6@td992@build-global-define td992@build-global-define) (set! tda03@build-lambda (lambda (tda44@ae tda45@vars tda46@exp) (list 'lambda tda45@vars tda46@exp))) (set! tdad7@tda03@build-lambda tda03@build-lambda) (set! tda05@build-case-lambda (lambda (tda4a@ae tda4b@vars* tda4c@exp*) (let ((tda51@build-error '#f) (tda53@build-pred '#f) (tda55@build-apply '#f) (tda57@expand-case-lambda '#f)) (begin (set! tda51@build-error (lambda (tda88@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! tda53@build-pred (lambda (tda70@ae tda71@n tda72@vars) (call-with-values (lambda () (let tda7e@f ((tda7a@vars tda72@vars) (tda7b@count '0)) (if (pair? tda7a@vars) (tda7e@f (cdr tda7a@vars) (+ tda7b@count '1)) (if (null? tda7a@vars) (values tda7b@count '=) (values tda7b@count '>=))))) (lambda (tda80@tda77 tda81@tda79) (let ((tda84@pred tda81@tda79) (tda85@count tda80@tda77)) (list (list 'primitive tda84@pred) tda71@n (list 'quote tda85@count))))))) (set! tda55@build-apply (lambda (tda68@ae tda69@g tda6a@vars tda6b@exp) (list '(primitive apply) (tda03@build-lambda tda68@ae tda6a@vars tda6b@exp) tda69@g))) (set! tda57@expand-case-lambda (lambda (tda58@ae tda59@vars tda5a@exp*) (let ((tda5e@g (gensym)) (tda5f@n (gensym))) (list 'lambda tda5e@g (tda39@build-let tda58@ae (list tda5f@n) (list (list '(primitive length) tda5e@g)) (let tda66@f ((tda62@vars* tda4b@vars*) (tda63@exp* tda5a@exp*)) (if (null? tda62@vars*) (tda51@build-error tda58@ae) (list 'if (tda53@build-pred tda58@ae tda5f@n (car tda62@vars*)) (tda55@build-apply tda58@ae tda5e@g (car tda62@vars*) (car tda63@exp*)) (tda66@f (cdr tda62@vars*) (cdr tda63@exp*)))))))))) (if (= (length tda4c@exp*) '1) (tda03@build-lambda tda4a@ae (car tda4b@vars*) (car tda4c@exp*)) (tda57@expand-case-lambda tda4a@ae tda4b@vars* tda4c@exp*)))))) (set! tdad8@tda05@build-case-lambda tda05@build-case-lambda) (set! tda33@build-sequence (lambda (tda8a@ae tda8b@exps) (let tda90@loop ((tda8e@exps tda8b@exps)) (if (null? (cdr tda8e@exps)) (car tda8e@exps) (if (equal? (car tda8e@exps) (tda35@build-void)) (tda90@loop (cdr tda8e@exps)) (cons 'begin tda8e@exps)))))) (set! tdad9@tda33@build-sequence tda33@build-sequence) (set! tda35@build-void (lambda () '((primitive void)))) (set! tdada@tda35@build-void tda35@build-void) (set! tda37@build-letrec (lambda (tda92@ae tda93@vars tda94@val-exps tda95@body-exp) (if (null? tda93@vars) tda95@body-exp (list 'letrec (map list tda93@vars tda94@val-exps) tda95@body-exp)))) (set! tdadb@tda37@build-letrec tda37@build-letrec) (set! tda39@build-let (lambda (tda9a@ae tda9b@vars tda9c@val-exps tda9d@body-exp) (if (null? tda9b@vars) tda9d@body-exp (list 'let (map list tda9b@vars tda9c@val-exps) tda9d@body-exp)))) (set! tdadc@tda39@build-let tda39@build-let) (set! tda3b@build-named-let (lambda (tdaa2@ae tdaa3@name tdaa4@vars tdaa5@val-exps tdaa6@body-exp) (list 'let tdaa3@name (map list tdaa4@vars tdaa5@val-exps) tdaa6@body-exp))) (set! tdadd@tda3b@build-named-let tda3b@build-named-let) (set! tda3d@build-letrec* (lambda (tdaac@ae tdaad@vars tdaae@val-exps tdaaf@body-exp) (if (null? tdaad@vars) tdaaf@body-exp (tda39@build-let tdaac@ae tdaad@vars (map (lambda (tdab4@x) (list 'quote '#f)) tdaad@vars) (tda33@build-sequence tdaac@ae (append (map (lambda (tdab6@lhs tdab7@rhs) (list 'set! tdab6@lhs tdab7@rhs)) tdaad@vars tdaae@val-exps) (list tdaaf@body-exp))))))) (set! tdade@tda3d@build-letrec* tda3d@build-letrec*) (set! tda3f@build-library-letrec* (lambda (tdaba@ae tdabb@name tdabc@vars tdabd@locs tdabe@val-exps tdabf@body-exp) (cons 'begin (append (map (lambda (tdac6@var) (cons 'set! (cons tdac6@var '((unspecified))))) tdabc@vars) (append (apply append (map (lambda (tdac8@var tdac9@loc tdaca@val-exp) (list (list 'set! tdac8@var tdaca@val-exp) (list 'set! tdac9@loc tdac8@var))) tdabc@vars tdabd@locs tdabe@val-exps)) (list tdabf@body-exp)))))) (set! tdadf@tda3f@build-library-letrec* tda3f@build-library-letrec*) (set! tda41@build-receive (lambda (tdace@ae tdacf@vars tdad0@producer tdad1@body*) (begin (display '"************** in ") (cons 'receive (cons tdacf@vars (cons tdad0@producer tdad1@body*)))))) (set! tdae0@tda41@build-receive tda41@build-receive) (void))
(begin (set! tdaef@file-options-macro (unspecified)) (set! tdaf1@set-cons (unspecified)) (set! tdaf3@set-union (unspecified)) (set! tdaf8@top-mark* (unspecified)) (set! tdafa@top-marked? (unspecified)) (set! tdafc@gen-lexical (unspecified)) (set! tdafe@gen-global (unspecified)) (set! tdb00@gen-label (unspecified)) (set! tdb02@gen-top-level-label (unspecified)) (set! tdb04@gen-define-label+loc (unspecified)) (set! tdb06@gen-define-label (unspecified)) (set! tdb10@rib? (unspecified)) (set! tdb12@rib-sym* (unspecified)) (set! tdb14@set-rib-sym*! (unspecified)) (set! tdb16@rib-mark** (unspecified)) (set! tdb18@set-rib-mark**! (unspecified)) (set! tdb1a@rib-label* (unspecified)) (set! tdb1c@set-rib-label*! (unspecified)) (set! tdb1e@rib-sealed/freq (unspecified)) (set! tdb20@set-rib-sealed/freq! (unspecified)) (set! tdb22@rib-cache (unspecified)) (set! tdb24@set-rib-cache! (unspecified)) (set! tdb26@dummy (unspecified)) (set! tdb28@make-empty-rib (unspecified)) (set! tdb2a@extend-rib! (unspecified)) (set! tdb2c@extend-rib/nc! (unspecified)) (set! tdb2e@make-rib-map (unspecified)) (set! tdb30@seal-rib! (unspecified)) (set! tdb32@unseal-rib! (unspecified)) (set! tdb34@make-full-rib (unspecified)) (set! tdb36@rp (unspecified)) (set! tdb40@stx? (unspecified)) (set! tdb42@stx-expr (unspecified)) (set! tdb44@set-stx-expr! (unspecified)) (set! tdb46@stx-mark* (unspecified)) (set! tdb48@set-stx-mark*! (unspecified)) (set! tdb4a@stx-subst* (unspecified)) (set! tdb4c@set-stx-subst*! (unspecified)) (set! tdb4e@stx-ae* (unspecified)) (set! tdb50@set-stx-ae*! (unspecified)) (set! tdb52@dummy (unspecified)) (set! tdb54@datum->stx (unspecified)) (set! tdb56@gen-mark (unspecified)) (set! tdb58@anti-mark (unspecified)) (set! tdb5a@anti-mark? (unspecified)) (set! tdb5c@mkstx (unspecified)) (set! tdb5e@add-mark (unspecified)) (set! tdb60@add-subst (unspecified)) (set! tdb62@syntax-kind? (unspecified)) (set! tdb64@syntax-vector->list (unspecified)) (set! tdb66@syntax-pair? (unspecified)) (set! tdb68@syntax-vector? (unspecified)) (set! tdb6a@syntax-null? (unspecified)) (set! tdb6c@syntax-list? (unspecified)) (set! tdb6e@syntax-car (unspecified)) (set! tdb70@syntax-cdr (unspecified)) (set! tdb72@syntax->list (unspecified)) (set! tdb74@id? (unspecified)) (set! tdb76@id->sym (unspecified)) (set! tdb78@bound-id=? (unspecified)) (set! tdb7a@free-id=? (unspecified)) (set! tdb7c@valid-bound-ids? (unspecified)) (set! tdb7e@distinct-bound-ids? (unspecified)) (set! tdb80@bound-id-member? (unspecified)) (set! tdb82@self-evaluating? (unspecified)) (set! tdb84@strip-annotations (unspecified)) (set! tdb86@strip (unspecified)) (set! tdb88@stx->datum (unspecified)) (set! tdb8a@id->label (unspecified)) (set! tdb8c@label->binding (unspecified)) (set! tdb8e@make-binding (unspecified)) (set! tdb90@binding-type (unspecified)) (set! tdb92@binding-value (unspecified)) (set! tdb94@raise-unbound-error (unspecified)) (set! tdb96@syntax-type (unspecified)) (set! tdba4@sanitize-binding (unspecified)) (set! tdba6@make-variable-transformer (unspecified)) (set! tdba8@variable-transformer? (unspecified)) (set! tdbaa@variable-transformer-procedure (unspecified)) (set! tdbac@make-eval-transformer (unspecified)) (set! tdcfd@parse-define (unspecified)) (set! tdcff@parse-define-syntax (unspecified)) (set! tdd01@scheme-stx-hashtable (unspecified)) (set! tdd03@scheme-stx (unspecified)) (set! tdd05@lexical-var (unspecified)) (set! tdd07@lexical-mutable? (unspecified)) (set! tdd09@set-lexical-mutable! (unspecified)) (set! tdd0b@add-lexical (unspecified)) (set! tdd0d@add-lexicals (unspecified)) (set! tdd0f@letrec-helper (unspecified)) (set! tdd11@let-transformer (unspecified)) (set! tdd13@letrec-transformer (unspecified)) (set! tdd15@letrec*-transformer (unspecified)) (set! tdd17@fluid-let-syntax-transformer (unspecified)) (set! tdd19@type-descriptor-transformer (unspecified)) (set! tdd1b@record-type-descriptor-transformer (unspecified)) (set! tdd1d@record-constructor-descriptor-transformer (unspecified)) (set! tdd1f@when-macro (unspecified)) (set! tdd21@unless-macro (unspecified)) (set! tdd23@if-transformer (unspecified)) (set! tdd25@and-transformer (unspecified)) (set! tdd27@or-transformer (unspecified)) (set! tdd29@case-macro (unspecified)) (set! tdd2b@quote-transformer (unspecified)) (set! tdd2d@case-lambda-transformer (unspecified)) (set! tdd2f@lambda-transformer (unspecified)) (set! tdd31@bless (unspecified)) (set! tdd33@with-syntax-macro (unspecified)) (set! tdd35@invalid-fmls-error (unspecified)) (set! tdd37@let-macro (unspecified)) (set! tdd39@let-values-macro (unspecified)) (set! tdd3b@let*-values-macro (unspecified)) (set! tdd3d@trace-lambda-macro (unspecified)) (set! tdd3f@trace-define-macro (unspecified)) (set! tdd41@trace-define-syntax-macro (unspecified)) (set! tdd43@trace-let/rec-syntax (unspecified)) (set! tdd45@trace-let-syntax-macro (unspecified)) (set! tdd47@trace-letrec-syntax-macro (unspecified)) (set! tdd49@guard-macro (unspecified)) (set! tdd4b@define-enumeration-macro (unspecified)) (set! tdd4d@time-macro (unspecified)) (set! tdd4f@delay-macro (unspecified)) (set! tdd51@assert-macro (unspecified)) (set! tdd53@endianness-macro (unspecified)) (set! tdd55@identifier-syntax-macro (unspecified)) (set! tdd57@do-macro (unspecified)) (set! tdd59@let*-macro (unspecified)) (set! tdd5b@or-macro (unspecified)) (set! tdd5d@and-macro (unspecified)) (set! tdd5f@cond-macro (unspecified)) (set! tdd61@do-include (unspecified)) (set! tdd63@include-macro (unspecified)) (set! tdd65@include-into-macro (unspecified)) (set! tdd67@syntax-rules-macro (unspecified)) (set! tdd69@quasiquote-macro (unspecified)) (set! tdd6b@quasisyntax-macro (unspecified)) (set! tdd6d@define-struct-macro (unspecified)) (set! tdd6f@define-record-type-macro (unspecified)) (set! tdd71@define-condition-type-macro (unspecified)) (set! tdd73@incorrect-usage-macro (unspecified)) (set! tdd75@parameterize-macro (unspecified)) (set! tdd77@foreign-call-transformer (unspecified)) (set! tdd79@convert-pattern (unspecified)) (set! tdd7b@syntax-dispatch (unspecified)) (set! tdd7d@ellipsis? (unspecified)) (set! tdd7f@underscore? (unspecified)) (set! tdd81@verify-literals (unspecified)) (set! tdd83@syntax-case-transformer (unspecified)) (set! tdd85@ellipsis-map (unspecified)) (set! tdd87@syntax-transformer (unspecified)) (set! tdd89@core-macro-transformer (unspecified)) (set! tdd8b@symbol-macro (unspecified)) (set! tdd8d@macro-transformer (unspecified)) (set! tdd8f@local-macro-transformer (unspecified)) (set! tdd91@do-macro-call (unspecified)) (set! tdd93@chi-macro (unspecified)) (set! tdd95@chi-local-macro (unspecified)) (set! tdd97@chi-global-macro (unspecified)) (set! tdd99@chi-expr* (unspecified)) (set! tdd9b@chi-application (unspecified)) (set! tdd9d@chi-expr (unspecified)) (set! tdd9f@chi-set! (unspecified)) (set! tdda1@verify-formals (unspecified)) (set! tdda3@chi-lambda-clause (unspecified)) (set! tdda5@chi-lambda-clause* (unspecified)) (set! tdda7@chi-defun (unspecified)) (set! tdda9@chi-rhs (unspecified)) (set! tddab@expand-interaction-rhs*/init* (unspecified)) (set! tddad@chi-rhs* (unspecified)) (set! tddaf@find-bound=? (unspecified)) (set! tddb1@find-dups (unspecified)) (set! tddb3@chi-internal (unspecified)) (set! tddb5@parse-module (unspecified)) (set! tddbf@module-interface? (unspecified)) (set! tddc1@module-interface-first-mark (unspecified)) (set! tddc3@set-module-interface-first-mark! (unspecified)) (set! tddc5@module-interface-exp-id-vec (unspecified)) (set! tddc7@set-module-interface-exp-id-vec! (unspecified)) (set! tddc9@module-interface-exp-lab-vec (unspecified)) (set! tddcb@set-module-interface-exp-lab-vec! (unspecified)) (set! tddcd@dummy (unspecified)) (set! tddcf@module-interface-exp-id* (unspecified)) (set! tddd1@chi-internal-module (unspecified)) (set! tddd3@chi-body* (unspecified)) (set! tddd5@expand-transformer (unspecified)) (set! tddd7@parse-exports (unspecified)) (set! tddd9@parse-library-name (unspecified)) (set! tdddb@parse-library (unspecified)) (set! tdddd@parse-import-spec* (unspecified)) (set! tdddf@make-top-rib (unspecified)) (set! tdde1@make-collector (unspecified)) (set! tdde3@inv-collector (unspecified)) (set! tdde5@vis-collector (unspecified)) (set! tdde7@imp-collector (unspecified)) (set! tdde9@chi-library-internal (unspecified)) (set! tddeb@chi-interaction-expr (unspecified)) (set! tdded@library-body-expander (unspecified)) (set! tddef@core-library-expander (unspecified)) (set! tddf1@parse-top-level-program (unspecified)) (set! tddf3@top-level-expander (unspecified)) (set! tddf5@rp (unspecified)) (set! tddff@env? (unspecified)) (set! tde01@env-names (unspecified)) (set! tde03@set-env-names! (unspecified)) (set! tde05@env-labels (unspecified)) (set! tde07@set-env-labels! (unspecified)) (set! tde09@env-itc (unspecified)) (set! tde0b@set-env-itc! (unspecified)) (set! tde0d@dummy (unspecified)) (set! tde0f@rp (unspecified)) (set! tde19@interaction-env? (unspecified)) (set! tde1b@interaction-env-rib (unspecified)) (set! tde1d@set-interaction-env-rib! (unspecified)) (set! tde1f@interaction-env-r (unspecified)) (set! tde21@set-interaction-env-r! (unspecified)) (set! tde23@interaction-env-locs (unspecified)) (set! tde25@set-interaction-env-locs! (unspecified)) (set! tde27@dummy (unspecified)) (set! tde29@interaction-environment-symbols (unspecified)) (set! tde2b@environment-bindings (unspecified)) (set! tde2d@parse-binding (unspecified)) (set! tde2f@environment? (unspecified)) (set! tde31@environment-symbols (unspecified)) (set! tde33@environment (unspecified)) (set! tde35@null-environment (unspecified)) (set! tde37@scheme-report-environment (unspecified)) (set! tde39@expand (unspecified)) (set! tde3b@eval (unspecified)) (set! tde3d@library-expander (unspecified)) (set! tde3f@boot-library-expand (unspecified)) (set! tde41@rev-map-append (unspecified)) (set! tde43@build-exports (unspecified)) (set! tde45@make-export-subst (unspecified)) (set! tde47@make-export-env/macros (unspecified)) (set! tde49@generate-temporaries (unspecified)) (set! tde4b@free-identifier=? (unspecified)) (set! tde4d@bound-identifier=? (unspecified)) (set! tde4f@make-source-condition (unspecified)) (set! tde51@extract-position-condition (unspecified)) (set! tde53@expression-position (unspecified)) (set! tde55@assertion-error (unspecified)) (set! tde57@syntax-error (unspecified)) (set! tde59@syntax-violation* (unspecified)) (set! tde5b@syntax-violation (unspecified)) (set! tde5d@identifier? (unspecified)) (set! tde5f@datum->syntax (unspecified)) (set! tde61@syntax->datum (unspecified)) (set! tde63@ungensym-all (unspecified)) (set! tde65@compile-r6rs-top-level (unspecified)) (set! tde67@pre-compile-r6rs-top-level (unspecified)) (set! tde69@interaction-environment (unspecified)) (set! tde6b@top-level-context (unspecified)) (set! tdaef@file-options-macro (lambda (tde6c@x) (let ((tde6f@valid-option? '#f)) (begin (set! tde6f@valid-option? (lambda (tde78@x) (and (tdb74@id? tde78@x) (memq (tdb76@id->sym tde78@x) '(no-fail no-create no-truncate))))) (let ((tde70@t tde6c@x)) (let ((tde72@ls/false (tdd7b@syntax-dispatch tde70@t '(_ . each-any)))) (if (and tde72@ls/false (apply (lambda (tde74@opt*) (for-all tde6f@valid-option? tde74@opt*)) tde72@ls/false)) (apply (lambda (tde76@opt*) (tdd31@bless (list 'make-file-options (list 'quote tde76@opt*)))) tde72@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" tde70@t)))))))) (set! td27c2@tdaef@file-options-macro tdaef@file-options-macro) (set! tdaf1@set-cons (lambda (tde7a@x tde7b@ls) (if (memq tde7a@x tde7b@ls) tde7b@ls (cons tde7a@x tde7b@ls)))) (set! td27c3@tdaf1@set-cons tdaf1@set-cons) (set! tdaf3@set-union (lambda (tde7e@ls1 tde7f@ls2) (if (null? tde7e@ls1) tde7f@ls2 (if (memq (car tde7e@ls1) tde7f@ls2) (tdaf3@set-union (cdr tde7e@ls1) tde7f@ls2) (cons (car tde7e@ls1) (tdaf3@set-union (cdr tde7e@ls1) tde7f@ls2)))))) (set! td27c4@tdaf3@set-union tdaf3@set-union) (set! tdaf8@top-mark* '(top)) (set! td27c5@tdaf8@top-mark* tdaf8@top-mark*) (set! tdafa@top-marked? (lambda (tde82@m*) (memq 'top tde82@m*))) (set! td27c6@tdafa@top-marked? tdafa@top-marked?) (set! tdafc@gen-lexical (lambda (tde84@sym) (if (symbol? tde84@sym) (gensym tde84@sym) (if (tdb40@stx? tde84@sym) (tdafc@gen-lexical (tdb76@id->sym tde84@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" tde84@sym))))) (set! td27c7@tdafc@gen-lexical tdafc@gen-lexical) (set! tdafe@gen-global (lambda (tde86@x) (tdafc@gen-lexical tde86@x))) (set! td27c8@tdafe@gen-global tdafe@gen-global) (set! tdb00@gen-label (lambda (tde88@_) (gensym))) (set! td27c9@tdb00@gen-label tdb00@gen-label) (set! tdb02@gen-top-level-label (lambda (tde8a@id tde8b@rib) (let ((tde8f@find '#f)) (begin (set! tde8f@find (lambda (tde9a@sym tde9b@mark* tde9c@sym* tde9d@mark** tde9e@label*) (and (pair? tde9c@sym*) (if (and (eq? tde9a@sym (car tde9c@sym*)) (same-marks? tde9b@mark* (car tde9d@mark**))) (car tde9e@label*) (tde8f@find tde9a@sym tde9b@mark* (cdr tde9c@sym*) (cdr tde9d@mark**) (cdr tde9e@label*)))))) (let ((tde90@sym (tdb76@id->sym tde8a@id)) (tde91@mark* (tdb46@stx-mark* tde8a@id))) (let ((tde94@sym* (tdb12@rib-sym* tde8b@rib))) (let ((tde96@t (and (memq tde90@sym (tdb12@rib-sym* tde8b@rib)) (tde8f@find tde90@sym tde91@mark* tde94@sym* (tdb16@rib-mark** tde8b@rib) (tdb1a@rib-label* tde8b@rib))))) (if tde96@t ((lambda (tde98@label) (if (td989@td7d6@imported-label->binding tde98@label) (gensym) tde98@label)) tde96@t) (gensym))))))))) (set! td27ca@tdb02@gen-top-level-label tdb02@gen-top-level-label) (set! tdb04@gen-define-label+loc (lambda (tdea4@id tdea5@rib) (let ((tdea8@t (tde6b@top-level-context))) (if tdea8@t ((lambda (tdeaa@env) (let ((tdeac@label (tdb02@gen-top-level-label tdea4@id tdea5@rib)) (tdead@locs (tde23@interaction-env-locs tdeaa@env))) (values tdeac@label (let ((tdeb0@t (assq tdeac@label tdead@locs))) (if tdeb0@t (cdr tdeb0@t) (let ((tdeb2@loc (tdafc@gen-lexical tdea4@id))) (begin (tde25@set-interaction-env-locs! tdeaa@env (cons (cons tdeac@label tdeb2@loc) tdead@locs)) tdeb2@loc))))))) tdea8@t) (values (gensym) (tdafc@gen-lexical tdea4@id)))))) (set! td27cb@tdb04@gen-define-label+loc tdb04@gen-define-label+loc) (set! tdb06@gen-define-label (lambda (tdeb4@id tdeb5@rib) (if (tde6b@top-level-context) (tdb02@gen-top-level-label tdeb4@id tdeb5@rib) (gensym)))) (set! td27cc@tdb06@gen-define-label tdb06@gen-define-label) (set! tdb10@rib? (lambda (tdeb8@x) (and (simple-struct? tdeb8@x) (eq? (simple-struct-name tdeb8@x) 'rib)))) (set! td27cd@tdb10@rib? tdb10@rib?) (set! tdb12@rib-sym* (lambda (tdeba@x) (simple-struct-ref tdeba@x '0))) (set! td27ce@tdb12@rib-sym* tdb12@rib-sym*) (set! tdb14@set-rib-sym*! (lambda (tdebc@x tdebd@val) (simple-struct-set! tdebc@x '0 tdebd@val))) (set! td27cf@tdb14@set-rib-sym*! tdb14@set-rib-sym*!) (set! tdb16@rib-mark** (lambda (tdec0@x) (simple-struct-ref tdec0@x '1))) (set! td27d0@tdb16@rib-mark** tdb16@rib-mark**) (set! tdb18@set-rib-mark**! (lambda (tdec2@x tdec3@val) (simple-struct-set! tdec2@x '1 tdec3@val))) (set! td27d1@tdb18@set-rib-mark**! tdb18@set-rib-mark**!) (set! tdb1a@rib-label* (lambda (tdec6@x) (simple-struct-ref tdec6@x '2))) (set! td27d2@tdb1a@rib-label* tdb1a@rib-label*) (set! tdb1c@set-rib-label*! (lambda (tdec8@x tdec9@val) (simple-struct-set! tdec8@x '2 tdec9@val))) (set! td27d3@tdb1c@set-rib-label*! tdb1c@set-rib-label*!) (set! tdb1e@rib-sealed/freq (lambda (tdecc@x) (simple-struct-ref tdecc@x '3))) (set! td27d4@tdb1e@rib-sealed/freq tdb1e@rib-sealed/freq) (set! tdb20@set-rib-sealed/freq! (lambda (tdece@x tdecf@val) (simple-struct-set! tdece@x '3 tdecf@val))) (set! td27d5@tdb20@set-rib-sealed/freq! tdb20@set-rib-sealed/freq!) (set! tdb22@rib-cache (lambda (tded2@x) (simple-struct-ref tded2@x '4))) (set! td27d6@tdb22@rib-cache tdb22@rib-cache) (set! tdb24@set-rib-cache! (lambda (tded4@x tded5@val) (simple-struct-set! tded4@x '4 tded5@val))) (set! td27d7@tdb24@set-rib-cache! tdb24@set-rib-cache!) (set! tdb26@dummy '3) (set! td27d8@tdb26@dummy tdb26@dummy) (set! tdb28@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! td27d9@tdb28@make-empty-rib tdb28@make-empty-rib) (set! tdb2a@extend-rib! (lambda (tded8@rib tded9@id tdeda@label) (let ((tdedf@find '#f)) (begin (set! tdedf@find (lambda (tdeec@sym tdeed@mark* tdeee@sym* tdeef@mark** tdef0@label*) (and (pair? tdeee@sym*) (if (and (eq? tdeec@sym (car tdeee@sym*)) (same-marks? tdeed@mark* (car tdeef@mark**))) tdef0@label* (tdedf@find tdeec@sym tdeed@mark* (cdr tdeee@sym*) (cdr tdeef@mark**) (cdr tdef0@label*)))))) (begin (if (tdb1e@rib-sealed/freq tded8@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" tded8@rib) (void)) (let ((tdee0@sym (tdb76@id->sym tded9@id)) (tdee1@mark* (tdb46@stx-mark* tded9@id))) (let ((tdee4@sym* (tdb12@rib-sym* tded8@rib))) (let ((tdee6@t (and (memq tdee0@sym (tdb12@rib-sym* tded8@rib)) (tdedf@find tdee0@sym tdee1@mark* tdee4@sym* (tdb16@rib-mark** tded8@rib) (tdb1a@rib-label* tded8@rib))))) (if tdee6@t ((lambda (tdee8@p) (if (not (eq? tdeda@label (car tdee8@p))) (if (tde6b@top-level-context) (set-car! tdee8@p tdeda@label) (tde5b@syntax-violation '#f '"multiple definitions of identifier" tded9@id)) (void))) tdee6@t) (begin (if (tdb22@rib-cache tded8@rib) (hashtable-update! (tdb22@rib-cache tded8@rib) tdee0@sym (lambda (tdeea@e) (cons (cons tdee1@mark* tdeda@label) tdeea@e)) '()) (void)) (tdb14@set-rib-sym*! tded8@rib (cons tdee0@sym tdee4@sym*)) (tdb18@set-rib-mark**! tded8@rib (cons tdee1@mark* (tdb16@rib-mark** tded8@rib))) (tdb1c@set-rib-label*! tded8@rib (cons tdeda@label (tdb1a@rib-label* tded8@rib))))))))))))) (set! td27da@tdb2a@extend-rib! tdb2a@extend-rib!) (set! tdb2c@extend-rib/nc! (lambda (tdef6@rib tdef7@id tdef8@label) (let ((tdefc@sym (tdb76@id->sym tdef7@id)) (tdefd@mark* (tdb46@stx-mark* tdef7@id))) (let ((tdf00@sym* (tdb12@rib-sym* tdef6@rib))) (begin (if (tdb22@rib-cache tdef6@rib) (hashtable-update! (tdb22@rib-cache tdef6@rib) tdefc@sym (lambda (tdf02@e) (cons (cons tdefd@mark* tdef8@label) tdf02@e)) '()) (void)) (tdb14@set-rib-sym*! tdef6@rib (cons tdefc@sym tdf00@sym*)) (tdb18@set-rib-mark**! tdef6@rib (cons tdefd@mark* (tdb16@rib-mark** tdef6@rib))) (tdb1c@set-rib-label*! tdef6@rib (cons tdef8@label (tdb1a@rib-label* tdef6@rib)))))))) (set! td27db@tdb2c@extend-rib/nc! tdb2c@extend-rib/nc!) (set! tdb2e@make-rib-map (lambda (tdf04@sym*) (let ((tdf06@ht (make-eq-hashtable))) (let tdf0c@f ((tdf08@i '0) (tdf09@sym* tdf04@sym*)) (if (null? tdf09@sym*) tdf06@ht (begin (hashtable-update! tdf06@ht (car tdf09@sym*) (lambda (tdf0e@x) (cons tdf08@i tdf0e@x)) '()) (tdf0c@f (+ tdf08@i '1) (cdr tdf09@sym*)))))))) (set! td27dc@tdb2e@make-rib-map tdb2e@make-rib-map) (set! tdb30@seal-rib! (lambda (tdf10@rib) (let ((tdf12@sym* (tdb12@rib-sym* tdf10@rib))) (if (not (null? tdf12@sym*)) (begin (tdb14@set-rib-sym*! tdf10@rib (list->vector tdf12@sym*)) (tdb18@set-rib-mark**! tdf10@rib (list->vector (tdb16@rib-mark** tdf10@rib))) (tdb1c@set-rib-label*! tdf10@rib (list->vector (tdb1a@rib-label* tdf10@rib))) (tdb20@set-rib-sealed/freq! tdf10@rib (tdb2e@make-rib-map tdf12@sym*))) (void))))) (set! td27dd@tdb30@seal-rib! tdb30@seal-rib!) (set! tdb32@unseal-rib! (lambda (tdf14@rib) (if (tdb1e@rib-sealed/freq tdf14@rib) (begin (tdb20@set-rib-sealed/freq! tdf14@rib '#f) (tdb14@set-rib-sym*! tdf14@rib (vector->list (tdb12@rib-sym* tdf14@rib))) (tdb18@set-rib-mark**! tdf14@rib (vector->list (tdb16@rib-mark** tdf14@rib))) (tdb1c@set-rib-label*! tdf14@rib (vector->list (tdb1a@rib-label* tdf14@rib)))) (void)))) (set! td27de@tdb32@unseal-rib! tdb32@unseal-rib!) (set! tdb34@make-full-rib (lambda (tdf16@id* tdf17@label*) (let ((tdf1a@r (make-simple-struct 'rib '6 (list (map tdb76@id->sym tdf16@id*) (map tdb46@stx-mark* tdf16@id*) tdf17@label* '#f '#f)))) (begin (tdb30@seal-rib! tdf1a@r) tdf1a@r)))) (set! td27df@tdb34@make-full-rib tdb34@make-full-rib) (set! tdb36@rp (td6bb@td597@make-record-printer 'stx (lambda (tdf1c@x tdf1d@p tdf1e@wr) (begin (display '"#<syntax " tdf1d@p) (write (tdb88@stx->datum tdf1c@x) tdf1d@p) (let ((tdf22@expr (tdb42@stx-expr tdf1c@x))) (if (td6b3@td587@annotation? tdf22@expr) (let ((tdf24@src (td6b4@td589@annotation-source tdf22@expr))) (if (pair? tdf24@src) (begin (display '" [" tdf1d@p) (display (cdr tdf24@src) tdf1d@p) (display '" of " tdf1d@p) (display (car tdf24@src) tdf1d@p) (display '"]" tdf1d@p)) (void))) (void))) (display '">" tdf1d@p))))) (set! td27e0@tdb36@rp tdb36@rp) (set! tdb40@stx? (lambda (tdf26@x) (and (simple-struct? tdf26@x) (eq? (simple-struct-name tdf26@x) 'stx)))) (set! td27e1@tdb40@stx? tdb40@stx?) (set! tdb42@stx-expr (lambda (tdf28@x) (simple-struct-ref tdf28@x '0))) (set! td27e2@tdb42@stx-expr tdb42@stx-expr) (set! tdb44@set-stx-expr! (lambda (tdf2a@x tdf2b@val) (simple-struct-set! tdf2a@x '0 tdf2b@val))) (set! td27e3@tdb44@set-stx-expr! tdb44@set-stx-expr!) (set! tdb46@stx-mark* (lambda (tdf2e@x) (simple-struct-ref tdf2e@x '1))) (set! td27e4@tdb46@stx-mark* tdb46@stx-mark*) (set! tdb48@set-stx-mark*! (lambda (tdf30@x tdf31@val) (simple-struct-set! tdf30@x '1 tdf31@val))) (set! td27e5@tdb48@set-stx-mark*! tdb48@set-stx-mark*!) (set! tdb4a@stx-subst* (lambda (tdf34@x) (simple-struct-ref tdf34@x '2))) (set! td27e6@tdb4a@stx-subst* tdb4a@stx-subst*) (set! tdb4c@set-stx-subst*! (lambda (tdf36@x tdf37@val) (simple-struct-set! tdf36@x '2 tdf37@val))) (set! td27e7@tdb4c@set-stx-subst*! tdb4c@set-stx-subst*!) (set! tdb4e@stx-ae* (lambda (tdf3a@x) (simple-struct-ref tdf3a@x '3))) (set! td27e8@tdb4e@stx-ae* tdb4e@stx-ae*) (set! tdb50@set-stx-ae*! (lambda (tdf3c@x tdf3d@val) (simple-struct-set! tdf3c@x '3 tdf3d@val))) (set! td27e9@tdb50@set-stx-ae*! tdb50@set-stx-ae*!) (set! tdb52@dummy '3) (set! td27ea@tdb52@dummy tdb52@dummy) (set! tdb54@datum->stx (lambda (tdf40@id tdf41@datum) (make-simple-struct 'stx '5 (list tdf41@datum (tdb46@stx-mark* tdf40@id) (tdb4a@stx-subst* tdf40@id) (tdb4e@stx-ae* tdf40@id))))) (set! td27eb@tdb54@datum->stx tdb54@datum->stx) (set! tdb56@gen-mark (lambda () (string '#\m))) (set! td27ec@tdb56@gen-mark tdb56@gen-mark) (set! tdb58@anti-mark '#f) (set! td27ed@tdb58@anti-mark tdb58@anti-mark) (set! tdb5a@anti-mark? not) (set! td27ee@tdb5a@anti-mark? tdb5a@anti-mark?) (set! tdb5c@mkstx (lambda (tdf44@e tdf45@m* tdf46@s* tdf47@ae*) (if (and (tdb40@stx? tdf44@e) (not (tdafa@top-marked? tdf45@m*))) (call-with-values (lambda () (join-wraps tdf45@m* tdf46@s* tdf47@ae* tdf44@e)) (lambda (tdf52@tdf4d tdf53@tdf4f tdf54@tdf51) (let ((tdf58@ae* tdf54@tdf51) (tdf59@s* tdf53@tdf4f) (tdf5a@m* tdf52@tdf4d)) (make-simple-struct 'stx '5 (list (tdb42@stx-expr tdf44@e) tdf5a@m* tdf59@s* tdf58@ae*))))) (make-simple-struct 'stx '5 (list tdf44@e tdf45@m* tdf46@s* tdf47@ae*))))) (set! td27ef@tdb5c@mkstx tdb5c@mkstx) (set! tdb5e@add-mark (lambda (tdf5e@m tdf5f@e tdf60@ae) (tdb5c@mkstx tdf5f@e (list tdf5e@m) '(shift) (list tdf60@ae)))) (set! td27f0@tdb5e@add-mark tdb5e@add-mark) (set! tdb60@add-subst (lambda (tdf64@subst tdf65@e) (tdb5c@mkstx tdf65@e '() (list tdf64@subst) '()))) (set! td27f1@tdb60@add-subst tdb60@add-subst) (set! tdb62@syntax-kind? (lambda (tdf68@x tdf69@p?) (if (tdb40@stx? tdf68@x) (tdb62@syntax-kind? (tdb42@stx-expr tdf68@x) tdf69@p?) (if (td6b3@td587@annotation? tdf68@x) (tdb62@syntax-kind? (td6b5@td58b@annotation-expression tdf68@x) tdf69@p?) (tdf69@p? tdf68@x))))) (set! td27f2@tdb62@syntax-kind? tdb62@syntax-kind?) (set! tdb64@syntax-vector->list (lambda (tdf6c@x) (if (tdb40@stx? tdf6c@x) (let ((tdf6e@ls (tdb64@syntax-vector->list (tdb42@stx-expr tdf6c@x))) (tdf6f@m* (tdb46@stx-mark* tdf6c@x)) (tdf70@s* (tdb4a@stx-subst* tdf6c@x)) (tdf71@ae* (tdb4e@stx-ae* tdf6c@x))) (map (lambda (tdf76@x) (tdb5c@mkstx tdf76@x tdf6f@m* tdf70@s* tdf71@ae*)) tdf6e@ls)) (if (td6b3@td587@annotation? tdf6c@x) (tdb64@syntax-vector->list (td6b5@td58b@annotation-expression tdf6c@x)) (if (vector? tdf6c@x) (vector->list tdf6c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" tdf6c@x)))))) (set! td27f3@tdb64@syntax-vector->list tdb64@syntax-vector->list) (set! tdb66@syntax-pair? (lambda (tdf78@x) (tdb62@syntax-kind? tdf78@x pair?))) (set! td27f4@tdb66@syntax-pair? tdb66@syntax-pair?) (set! tdb68@syntax-vector? (lambda (tdf7a@x) (tdb62@syntax-kind? tdf7a@x vector?))) (set! td27f5@tdb68@syntax-vector? tdb68@syntax-vector?) (set! tdb6a@syntax-null? (lambda (tdf7c@x) (tdb62@syntax-kind? tdf7c@x null?))) (set! td27f6@tdb6a@syntax-null? tdb6a@syntax-null?) (set! tdb6c@syntax-list? (lambda (tdf7e@x) (or (tdb6a@syntax-null? tdf7e@x) (and (tdb66@syntax-pair? tdf7e@x) (tdb6c@syntax-list? (tdb70@syntax-cdr tdf7e@x)))))) (set! td27f7@tdb6c@syntax-list? tdb6c@syntax-list?) (set! tdb6e@syntax-car (lambda (tdf80@x) (if (tdb40@stx? tdf80@x) (tdb5c@mkstx (tdb6e@syntax-car (tdb42@stx-expr tdf80@x)) (tdb46@stx-mark* tdf80@x) (tdb4a@stx-subst* tdf80@x) (tdb4e@stx-ae* tdf80@x)) (if (td6b3@td587@annotation? tdf80@x) (tdb6e@syntax-car (td6b5@td58b@annotation-expression tdf80@x)) (if (pair? tdf80@x) (car tdf80@x) (assertion-violation 'syntax-car '"BUG: not a pair" tdf80@x)))))) (set! td27f8@tdb6e@syntax-car tdb6e@syntax-car) (set! tdb70@syntax-cdr (lambda (tdf82@x) (if (tdb40@stx? tdf82@x) (tdb5c@mkstx (tdb70@syntax-cdr (tdb42@stx-expr tdf82@x)) (tdb46@stx-mark* tdf82@x) (tdb4a@stx-subst* tdf82@x) (tdb4e@stx-ae* tdf82@x)) (if (td6b3@td587@annotation? tdf82@x) (tdb70@syntax-cdr (td6b5@td58b@annotation-expression tdf82@x)) (if (pair? tdf82@x) (cdr tdf82@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" tdf82@x)))))) (set! td27f9@tdb70@syntax-cdr tdb70@syntax-cdr) (set! tdb72@syntax->list (lambda (tdf84@x) (if (tdb66@syntax-pair? tdf84@x) (cons (tdb6e@syntax-car tdf84@x) (tdb72@syntax->list (tdb70@syntax-cdr tdf84@x))) (if (tdb6a@syntax-null? tdf84@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" tdf84@x))))) (set! td27fa@tdb72@syntax->list tdb72@syntax->list) (set! tdb74@id? (lambda (tdf86@x) (and (tdb40@stx? tdf86@x) (symbol? (tdb42@stx-expr tdf86@x))))) (set! td27fb@tdb74@id? tdb74@id?) (set! tdb76@id->sym (lambda (tdf88@x) (tdb42@stx-expr tdf88@x))) (set! td27fc@tdb76@id->sym tdb76@id->sym) (set! tdb78@bound-id=? (lambda (tdf8a@x tdf8b@y) (and (eq? (tdb76@id->sym tdf8a@x) (tdb76@id->sym tdf8b@y)) (same-marks? (tdb46@stx-mark* tdf8a@x) (tdb46@stx-mark* tdf8b@y))))) (set! td27fd@tdb78@bound-id=? tdb78@bound-id=?) (set! tdb7a@free-id=? (lambda (tdf8e@i tdf8f@j) (let ((tdf92@t0 (id->real-label tdf8e@i)) (tdf93@t1 (id->real-label tdf8f@j))) (if (or tdf92@t0 tdf93@t1) (eq? tdf92@t0 tdf93@t1) (eq? (tdb76@id->sym tdf8e@i) (tdb76@id->sym tdf8f@j)))))) (set! td27fe@tdb7a@free-id=? tdb7a@free-id=?) (set! tdb7c@valid-bound-ids? (lambda (tdf96@id*) (and (for-all tdb74@id? tdf96@id*) (tdb7e@distinct-bound-ids? tdf96@id*)))) (set! td27ff@tdb7c@valid-bound-ids? tdb7c@valid-bound-ids?) (set! tdb7e@distinct-bound-ids? (lambda (tdf98@id*) (or (null? tdf98@id*) (and (not (tdb80@bound-id-member? (car tdf98@id*) (cdr tdf98@id*))) (tdb7e@distinct-bound-ids? (cdr tdf98@id*)))))) (set! td2800@tdb7e@distinct-bound-ids? tdb7e@distinct-bound-ids?) (set! tdb80@bound-id-member? (lambda (tdf9a@id tdf9b@id*) (and (pair? tdf9b@id*) (or (tdb78@bound-id=? tdf9a@id (car tdf9b@id*)) (tdb80@bound-id-member? tdf9a@id (cdr tdf9b@id*)))))) (set! td2801@tdb80@bound-id-member? tdb80@bound-id-member?) (set! tdb82@self-evaluating? (lambda (tdf9e@x) (or (number? tdf9e@x) (string? tdf9e@x) (char? tdf9e@x) (boolean? tdf9e@x) (regexp? tdf9e@x) (bytevector? tdf9e@x)))) (set! td2802@tdb82@self-evaluating? tdb82@self-evaluating?) (set! tdb84@strip-annotations (lambda (tdfa0@x) (if (pair? tdfa0@x) (cons (tdb84@strip-annotations (car tdfa0@x)) (tdb84@strip-annotations (cdr tdfa0@x))) (if (vector? tdfa0@x) (vector-map tdb84@strip-annotations tdfa0@x) (if (td6b3@td587@annotation? tdfa0@x) (td6b2@td585@annotation-stripped tdfa0@x) tdfa0@x))))) (set! td2803@tdb84@strip-annotations tdb84@strip-annotations) (set! tdb86@strip (lambda (tdfa2@x tdfa3@m*) (if (tdafa@top-marked? tdfa3@m*) (if (or (td6b3@td587@annotation? tdfa2@x) (and (pair? tdfa2@x) (td6b3@td587@annotation? (car tdfa2@x))) (and (vector? tdfa2@x) (> (vector-length tdfa2@x) '0) (td6b3@td587@annotation? (vector-ref tdfa2@x '0)))) (tdb84@strip-annotations tdfa2@x) tdfa2@x) (let tdfa8@f ((tdfa6@x tdfa2@x)) (if (tdb40@stx? tdfa6@x) (tdb86@strip (tdb42@stx-expr tdfa6@x) (tdb46@stx-mark* tdfa6@x)) (if (td6b3@td587@annotation? tdfa6@x) (td6b2@td585@annotation-stripped tdfa6@x) (if (pair? tdfa6@x) (let ((tdfaa@a (tdfa8@f (car tdfa6@x))) (tdfab@d (tdfa8@f (cdr tdfa6@x)))) (if (and (eq? tdfaa@a (car tdfa6@x)) (eq? tdfab@d (cdr tdfa6@x))) tdfa6@x (cons tdfaa@a tdfab@d))) (if (vector? tdfa6@x) (let ((tdfae@old (vector->list tdfa6@x))) (let ((tdfb0@new (map tdfa8@f tdfae@old))) (if (for-all eq? tdfae@old tdfb0@new) tdfa6@x (list->vector tdfb0@new)))) tdfa6@x)))))))) (set! td2804@tdb86@strip tdb86@strip) (set! tdb88@stx->datum (lambda (tdfb2@x) (tdb86@strip tdfb2@x '()))) (set! td2805@tdb88@stx->datum tdb88@stx->datum) (set! tdb8a@id->label (lambda (tdfb4@id) (or (id->real-label tdfb4@id) (let ((tdfb6@t (tde6b@top-level-context))) (if tdfb6@t ((lambda (tdfb8@env) (let ((tdfba@rib (tde1b@interaction-env-rib tdfb8@env))) (call-with-values (lambda () (tdb04@gen-define-label+loc tdfb4@id tdfba@rib)) (lambda (tdfc0@tdfbd tdfc1@tdfbf) (let ((tdfc4@loc_ tdfc1@tdfbf) (tdfc5@lab tdfc0@tdfbd)) (begin (tdb2a@extend-rib! tdfba@rib tdfb4@id tdfc5@lab) tdfc5@lab)))))) tdfb6@t) '#f))))) (set! td2806@tdb8a@id->label tdb8a@id->label) (set! tdb8c@label->binding (lambda (tdfc8@x tdfc9@r) (let ((tdfcc@t (td989@td7d6@imported-label->binding tdfc8@x))) (if tdfcc@t ((lambda (tdfce@b) (if (and (pair? tdfce@b) (eq? (car tdfce@b) '$core-rtd)) (cons '$rtd (map tdd31@bless (cdr tdfce@b))) (if (and (pair? tdfce@b) (eq? (car tdfce@b) 'global-rtd)) (let ((tdfd0@lib (cadr tdfce@b)) (tdfd1@loc (cddr tdfce@b))) (cons '$rtd (symbol-value tdfd1@loc))) tdfce@b))) tdfcc@t) (let ((tdfd4@t (assq tdfc8@x tdfc9@r))) (if tdfd4@t (cdr tdfd4@t) (let ((tdfd6@t (tde6b@top-level-context))) (if tdfd6@t ((lambda (tdfd8@env) (let ((tdfda@t (assq tdfc8@x (tde23@interaction-env-locs tdfd8@env)))) (if tdfda@t ((lambda (tdfdc@p) (cons* 'lexical (cdr tdfdc@p) '#f)) tdfda@t) '(displaced-lexical . #f)))) tdfd6@t) '(displaced-lexical . #f))))))))) (set! td2807@tdb8c@label->binding tdb8c@label->binding) (set! tdb8e@make-binding cons) (set! td2808@tdb8e@make-binding tdb8e@make-binding) (set! tdb90@binding-type car) (set! td2809@tdb90@binding-type tdb90@binding-type) (set! tdb92@binding-value cdr) (set! td280a@tdb92@binding-value tdb92@binding-value) (set! tdb94@raise-unbound-error (lambda (tdfde@id) (tde59@syntax-violation* '#f '"unbound identifier" tdfde@id (td2c00@td2a46@make-undefined-violation)))) (set! td280b@tdb94@raise-unbound-error tdb94@raise-unbound-error) (set! tdb96@syntax-type (lambda (tdfe0@e tdfe1@r) (if (tdb74@id? tdfe0@e) (let ((tdfe4@id tdfe0@e)) (let ((tdfe6@label (tdb8a@id->label tdfe4@id))) (let ((tdfe8@b (tdb8c@label->binding tdfe6@label tdfe1@r))) (let ((tdfea@type (tdb90@binding-type tdfe8@b))) (begin (if (not tdfe6@label) (tdb94@raise-unbound-error tdfe4@id) (void)) (let ((tdfec@t tdfea@type)) (if (memv tdfec@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values tdfea@type (tdb92@binding-value tdfe8@b) tdfe4@id) (values 'other '#f '#f)))))))) (if (tdb66@syntax-pair? tdfe0@e) (let ((tdfee@id (tdb6e@syntax-car tdfe0@e))) (if (tdb74@id? tdfee@id) (let ((tdff0@label (tdb8a@id->label tdfee@id))) (let ((tdff2@b (tdb8c@label->binding tdff0@label tdfe1@r))) (let ((tdff4@type (tdb90@binding-type tdff2@b))) (begin (if (not tdff0@label) (tdb94@raise-unbound-error tdfee@id) (void)) (let ((tdff6@t tdff4@type)) (if (memv tdff6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values tdff4@type (tdb92@binding-value tdff2@b) tdfee@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((tdff8@d (tdb88@stx->datum tdfe0@e))) (if (tdb82@self-evaluating? tdff8@d) (values 'constant tdff8@d '#f) (values 'other '#f '#f))))))) (set! td280c@tdb96@syntax-type tdb96@syntax-type) (set! tdba4@sanitize-binding (lambda (tdffa@x tdffb@src) (if (procedure? tdffa@x) (cons* 'local-macro tdffa@x tdffb@src) (if (and (pair? tdffa@x) (eq? (car tdffa@x) 'macro!) (procedure? (cdr tdffa@x))) (cons* 'local-macro! (cdr tdffa@x) tdffb@src) (if (and (pair? tdffa@x) (eq? (car tdffa@x) '$rtd)) tdffa@x (assertion-violation 'expand '"invalid transformer" tdffa@x)))))) (set! td280d@tdba4@sanitize-binding tdba4@sanitize-binding) (set! tdba6@make-variable-transformer (lambda (tdffe@x) (if (procedure? tdffe@x) (cons 'macro! tdffe@x) (assertion-violation 'make-variable-transformer '"not a procedure" tdffe@x)))) (set! td280e@tdba6@make-variable-transformer tdba6@make-variable-transformer) (set! tdba8@variable-transformer? (lambda (td1000@x) (and (pair? td1000@x) (eq? (car td1000@x) 'macro!) (procedure? (cdr td1000@x))))) (set! td280f@tdba8@variable-transformer? tdba8@variable-transformer?) (set! tdbaa@variable-transformer-procedure (lambda (td1002@x) (if (tdba8@variable-transformer? td1002@x) (cdr td1002@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" td1002@x)))) (set! td2810@tdbaa@variable-transformer-procedure tdbaa@variable-transformer-procedure) (set! tdbac@make-eval-transformer (lambda (td1004@x) (tdba4@sanitize-binding (eval-core (td714@td6cc@expanded->core td1004@x)) td1004@x))) (set! td2811@tdbac@make-eval-transformer tdbac@make-eval-transformer) (set! tdcfd@parse-define (lambda (td1006@x) (let ((td1008@t td1006@x)) (let ((td100a@ls/false (tdd7b@syntax-dispatch td1008@t '(_ (any . any) any . each-any)))) (if (and td100a@ls/false (apply (lambda (td100c@id td100d@fmls td100e@b td100f@b*) (tdb74@id? td100c@id)) td100a@ls/false)) (apply (lambda (td1014@id td1015@fmls td1016@b td1017@b*) (begin (tdda1@verify-formals td1015@fmls td1006@x) (values td1014@id (cons 'defun (cons td1015@fmls (cons td1016@b td1017@b*)))))) td100a@ls/false) (let ((td101c@t td1008@t)) (let ((td101e@ls/false (tdd7b@syntax-dispatch td101c@t '(_ any any)))) (if (and td101e@ls/false (apply (lambda (td1020@id td1021@val) (tdb74@id? td1020@id)) td101e@ls/false)) (apply (lambda (td1024@id td1025@val) (values td1024@id (cons 'expr td1025@val))) td101e@ls/false) (let ((td1028@t td101c@t)) (let ((td102a@ls/false (tdd7b@syntax-dispatch td1028@t '(_ any)))) (if (and td102a@ls/false (apply (lambda (td102c@id) (tdb74@id? td102c@id)) td102a@ls/false)) (apply (lambda (td102e@id) (values td102e@id (cons 'expr (tdd31@bless '(void))))) td102a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1028@t)))))))))))) (set! td2812@tdcfd@parse-define tdcfd@parse-define) (set! tdcff@parse-define-syntax (lambda (td1030@x) (let ((td1032@t td1030@x)) (let ((td1034@ls/false (tdd7b@syntax-dispatch td1032@t '(_ any any)))) (if (and td1034@ls/false (apply (lambda (td1036@id td1037@val) (tdb74@id? td1036@id)) td1034@ls/false)) (apply (lambda (td103a@id td103b@val) (values td103a@id td103b@val)) td1034@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1032@t)))))) (set! td2813@tdcff@parse-define-syntax tdcff@parse-define-syntax) (set! tdd01@scheme-stx-hashtable (make-eq-hashtable)) (set! td2814@tdd01@scheme-stx-hashtable tdd01@scheme-stx-hashtable) (set! tdd03@scheme-stx (lambda (td103e@sym) (or (hashtable-ref tdd01@scheme-stx-hashtable td103e@sym '#f) (let ((td1040@subst (td965@td78e@library-subst (td983@td7ca@find-library-by-name '(psyntax system $all))))) (let ((td1042@stx (make-simple-struct 'stx '5 (list td103e@sym tdaf8@top-mark* '() '())))) (let ((td1044@stx (let ((td1046@t (assq td103e@sym td1040@subst))) (if td1046@t ((lambda (td1048@x) (let ((td104a@name (car td1048@x)) (td104b@label (cdr td1048@x))) (tdb60@add-subst (make-simple-struct 'rib '6 (list (list td104a@name) (list tdaf8@top-mark*) (list td104b@label) '#f '#f)) td1042@stx))) td1046@t) td1042@stx)))) (begin (hashtable-set! tdd01@scheme-stx-hashtable td103e@sym td1044@stx) td1044@stx))))))) (set! td2815@tdd03@scheme-stx tdd03@scheme-stx) (set! tdd05@lexical-var car) (set! td2816@tdd05@lexical-var tdd05@lexical-var) (set! tdd07@lexical-mutable? cdr) (set! td2817@tdd07@lexical-mutable? tdd07@lexical-mutable?) (set! tdd09@set-lexical-mutable! set-cdr!) (set! td2818@tdd09@set-lexical-mutable! tdd09@set-lexical-mutable!) (set! tdd0b@add-lexical (lambda (td104e@lab td104f@lex td1050@r) (cons (cons* td104e@lab 'lexical td104f@lex '#f) td1050@r))) (set! td2819@tdd0b@add-lexical tdd0b@add-lexical) (set! tdd0d@add-lexicals (lambda (td1054@lab* td1055@lex* td1056@r) (if (null? td1054@lab*) td1056@r (tdd0d@add-lexicals (cdr td1054@lab*) (cdr td1055@lex*) (tdd0b@add-lexical (car td1054@lab*) (car td1055@lex*) td1056@r))))) (set! td281a@tdd0d@add-lexicals tdd0d@add-lexicals) (set! tdd0f@letrec-helper (lambda (td105a@e td105b@r td105c@mr td105d@build) (let ((td1062@t td105a@e)) (let ((td1064@ls/false (tdd7b@syntax-dispatch td1062@t '(_ #(each (any any)) any . each-any)))) (if td1064@ls/false (apply (lambda (td1066@lhs* td1067@rhs* td1068@b td1069@b*) (if (not (tdb7c@valid-bound-ids? td1066@lhs*)) (tdd35@invalid-fmls-error td105a@e td1066@lhs*) (let ((td106e@lex* (map tdafc@gen-lexical td1066@lhs*)) (td106f@lab* (map tdb00@gen-label td1066@lhs*))) (let ((td1072@rib (tdb34@make-full-rib td1066@lhs* td106f@lab*)) (td1073@r (tdd0d@add-lexicals td106f@lab* td106e@lex* td105b@r))) (let ((td1076@body (tddb3@chi-internal (tdb60@add-subst td1072@rib (cons td1068@b td1069@b*)) td1073@r td105c@mr)) (td1077@rhs* (tdd99@chi-expr* (map (lambda (td107a@x) (tdb60@add-subst td1072@rib td107a@x)) td1067@rhs*) td1073@r td105c@mr))) (td105d@build '#f td106e@lex* td1077@rhs* td1076@body)))))) td1064@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1062@t)))))) (set! td281b@tdd0f@letrec-helper tdd0f@letrec-helper) (set! tdd11@let-transformer (lambda (td107c@e td107d@r td107e@mr) (let ((td1082@t td107c@e)) (let ((td1084@ls/false (tdd7b@syntax-dispatch td1082@t '(_ #(each (any any)) any . each-any)))) (if td1084@ls/false (apply (lambda (td1086@lhs* td1087@rhs* td1088@b td1089@b*) (if (not (tdb7c@valid-bound-ids? td1086@lhs*)) (tdd35@invalid-fmls-error td107c@e td1086@lhs*) (let ((td108e@lex* (map tdafc@gen-lexical td1086@lhs*)) (td108f@lab* (map tdb00@gen-label td1086@lhs*)) (td1090@rhs* (tdd99@chi-expr* td1087@rhs* td107d@r td107e@mr))) (let ((td1094@rib (tdb34@make-full-rib td1086@lhs* td108f@lab*)) (td1095@r (tdd0d@add-lexicals td108f@lab* td108e@lex* td107d@r))) (let ((td1098@body (tddb3@chi-internal (tdb60@add-subst td1094@rib (cons td1088@b td1089@b*)) td1095@r td107e@mr))) (tdadc@tda39@build-let '#f td108e@lex* td1090@rhs* td1098@body)))))) td1084@ls/false) (let ((td109a@t td1082@t)) (let ((td109c@ls/false (tdd7b@syntax-dispatch td109a@t '(_ any #(each (any any)) any . each-any)))) (if td109c@ls/false (apply (lambda (td109e@loop td109f@lhs* td10a0@rhs* td10a1@b td10a2@b*) (if (not (tdb7c@valid-bound-ids? td109f@lhs*)) (tdd35@invalid-fmls-error td107c@e td109f@lhs*) (let ((td10a8@lex* (map tdafc@gen-lexical td109f@lhs*)) (td10a9@lab* (map tdb00@gen-label td109f@lhs*)) (td10aa@rhs* (tdd99@chi-expr* td10a0@rhs* td107d@r td107e@mr)) (td10ab@loop-lex (tdafc@gen-lexical td109e@loop)) (td10ac@loop-lab (tdb00@gen-label td109e@loop))) (let ((td10b2@loop-rib (tdb34@make-full-rib (list td109e@loop) (list td10ac@loop-lab))) (td10b3@rib (tdb34@make-full-rib td109f@lhs* td10a9@lab*)) (td10b4@r (tdd0d@add-lexicals (cons td10ac@loop-lab td10a9@lab*) (cons td10ab@loop-lex td10a8@lex*) td107d@r))) (let ((td10b8@body (tddb3@chi-internal (tdb60@add-subst td10b2@loop-rib (tdb60@add-subst td10b3@rib (cons td10a1@b td10a2@b*))) td10b4@r td107e@mr))) (tdadd@tda3b@build-named-let '#f td10ab@loop-lex td10a8@lex* td10aa@rhs* td10b8@body)))))) td109c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td109a@t))))))))) (set! td281c@tdd11@let-transformer tdd11@let-transformer) (set! tdd13@letrec-transformer (lambda (td10ba@e td10bb@r td10bc@mr) (tdd0f@letrec-helper td10ba@e td10bb@r td10bc@mr tdadb@tda37@build-letrec))) (set! td281d@tdd13@letrec-transformer tdd13@letrec-transformer) (set! tdd15@letrec*-transformer (lambda (td10c0@e td10c1@r td10c2@mr) (tdd0f@letrec-helper td10c0@e td10c1@r td10c2@mr tdade@tda3d@build-letrec*))) (set! td281e@tdd15@letrec*-transformer tdd15@letrec*-transformer) (set! tdd17@fluid-let-syntax-transformer (lambda (td10c6@e td10c7@r td10c8@mr) (let ((td10cd@lookup '#f)) (begin (set! td10cd@lookup (lambda (td10e0@x) (or (tdb8a@id->label td10e0@x) (tde5b@syntax-violation '#f '"unbound identifier" td10c6@e td10e0@x)))) (let ((td10ce@t td10c6@e)) (let ((td10d0@ls/false (tdd7b@syntax-dispatch td10ce@t '(_ #(each (any any)) any . each-any)))) (if td10d0@ls/false (apply (lambda (td10d2@lhs* td10d3@rhs* td10d4@b td10d5@b*) (if (not (tdb7c@valid-bound-ids? td10d2@lhs*)) (tdd35@invalid-fmls-error td10c6@e td10d2@lhs*) (let ((td10da@lab* (map td10cd@lookup td10d2@lhs*)) (td10db@rhs* (map (lambda (td10de@x) (tdbac@make-eval-transformer (tddd5@expand-transformer td10de@x td10c8@mr))) td10d3@rhs*))) (tddb3@chi-internal (cons td10d4@b td10d5@b*) (append (map cons td10da@lab* td10db@rhs*) td10c7@r) (append (map cons td10da@lab* td10db@rhs*) td10c8@mr))))) td10d0@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td10ce@t)))))))) (set! td281f@tdd17@fluid-let-syntax-transformer tdd17@fluid-let-syntax-transformer) (set! tdd19@type-descriptor-transformer (lambda (td10e2@e td10e3@r td10e4@mr) (let ((td10e8@t td10e2@e)) (let ((td10ea@ls/false (tdd7b@syntax-dispatch td10e8@t '(_ any)))) (if (and td10ea@ls/false (apply (lambda (td10ec@id) (tdb74@id? td10ec@id)) td10ea@ls/false)) (apply (lambda (td10ee@id) (let ((td10f0@lab (tdb8a@id->label td10ee@id))) (let ((td10f2@b (tdb8c@label->binding td10f0@lab td10e3@r))) (let ((td10f4@type (tdb90@binding-type td10f2@b))) (begin (if (not td10f0@lab) (tdb94@raise-unbound-error td10ee@id) (void)) (if (not (and (eq? td10f4@type '$rtd) (not (list? (tdb92@binding-value td10f2@b))))) (tde5b@syntax-violation '#f '"not a record type" td10e2@e) (void)) (list 'quote (tdb92@binding-value td10f2@b))))))) td10ea@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td10e8@t)))))) (set! td2820@tdd19@type-descriptor-transformer tdd19@type-descriptor-transformer) (set! tdd1b@record-type-descriptor-transformer (lambda (td10f6@e td10f7@r td10f8@mr) (let ((td10fc@t td10f6@e)) (let ((td10fe@ls/false (tdd7b@syntax-dispatch td10fc@t '(_ any)))) (if (and td10fe@ls/false (apply (lambda (td1100@id) (tdb74@id? td1100@id)) td10fe@ls/false)) (apply (lambda (td1102@id) (let ((td1104@lab (tdb8a@id->label td1102@id))) (let ((td1106@b (tdb8c@label->binding td1104@lab td10f7@r))) (let ((td1108@type (tdb90@binding-type td1106@b))) (begin (if (not td1104@lab) (tdb94@raise-unbound-error td1102@id) (void)) (if (not (and (eq? td1108@type '$rtd) (list? (tdb92@binding-value td1106@b)))) (tde5b@syntax-violation '#f '"not a record type" td10f6@e) (void)) (tdd9d@chi-expr (car (tdb92@binding-value td1106@b)) td10f7@r td10f8@mr)))))) td10fe@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td10fc@t)))))) (set! td2821@tdd1b@record-type-descriptor-transformer tdd1b@record-type-descriptor-transformer) (set! tdd1d@record-constructor-descriptor-transformer (lambda (td110a@e td110b@r td110c@mr) (let ((td1110@t td110a@e)) (let ((td1112@ls/false (tdd7b@syntax-dispatch td1110@t '(_ any)))) (if (and td1112@ls/false (apply (lambda (td1114@id) (tdb74@id? td1114@id)) td1112@ls/false)) (apply (lambda (td1116@id) (let ((td1118@lab (tdb8a@id->label td1116@id))) (let ((td111a@b (tdb8c@label->binding td1118@lab td110b@r))) (let ((td111c@type (tdb90@binding-type td111a@b))) (begin (if (not td1118@lab) (tdb94@raise-unbound-error td1116@id) (void)) (if (not (and (eq? td111c@type '$rtd) (list? (tdb92@binding-value td111a@b)))) (tde5b@syntax-violation '#f '"invalid type" td110a@e) (void)) (tdd9d@chi-expr (cadr (tdb92@binding-value td111a@b)) td110b@r td110c@mr)))))) td1112@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1110@t)))))) (set! td2822@tdd1d@record-constructor-descriptor-transformer tdd1d@record-constructor-descriptor-transformer) (set! tdd1f@when-macro (lambda (td111e@e) (let ((td1120@t td111e@e)) (let ((td1122@ls/false (tdd7b@syntax-dispatch td1120@t '(_ any any . each-any)))) (if td1122@ls/false (apply (lambda (td1124@test td1125@e td1126@e*) (tdd31@bless (list 'if td1124@test (cons 'begin (cons td1125@e td1126@e*))))) td1122@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1120@t)))))) (set! td2823@tdd1f@when-macro tdd1f@when-macro) (set! tdd21@unless-macro (lambda (td112a@e) (let ((td112c@t td112a@e)) (let ((td112e@ls/false (tdd7b@syntax-dispatch td112c@t '(_ any any . each-any)))) (if td112e@ls/false (apply (lambda (td1130@test td1131@e td1132@e*) (tdd31@bless (list 'if (list 'not td1130@test) (cons 'begin (cons td1131@e td1132@e*))))) td112e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td112c@t)))))) (set! td2824@tdd21@unless-macro tdd21@unless-macro) (set! tdd23@if-transformer (lambda (td1136@e td1137@r td1138@mr) (let ((td113c@t td1136@e)) (let ((td113e@ls/false (tdd7b@syntax-dispatch td113c@t '(_ any any any)))) (if td113e@ls/false (apply (lambda (td1140@e0 td1141@e1 td1142@e2) (list 'if (tdd9d@chi-expr td1140@e0 td1137@r td1138@mr) (tdd9d@chi-expr td1141@e1 td1137@r td1138@mr) (tdd9d@chi-expr td1142@e2 td1137@r td1138@mr))) td113e@ls/false) (let ((td1146@t td113c@t)) (let ((td1148@ls/false (tdd7b@syntax-dispatch td1146@t '(_ any any)))) (if td1148@ls/false (apply (lambda (td114a@e0 td114b@e1) (list 'if (tdd9d@chi-expr td114a@e0 td1137@r td1138@mr) (tdd9d@chi-expr td114b@e1 td1137@r td1138@mr) (tdada@tda35@build-void))) td1148@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1146@t))))))))) (set! td2825@tdd23@if-transformer tdd23@if-transformer) (set! tdd25@and-transformer (lambda (td114e@e td114f@r td1150@mr) (let ((td1154@t td114e@e)) (let ((td1156@ls/false (tdd7b@syntax-dispatch td1154@t '(_ . each-any)))) (if td1156@ls/false (apply (lambda (td1158@e*) (cons 'and (tdd99@chi-expr* td1158@e* td114f@r td1150@mr))) td1156@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1154@t)))))) (set! td2826@tdd25@and-transformer tdd25@and-transformer) (set! tdd27@or-transformer (lambda (td115a@e td115b@r td115c@mr) (let ((td1160@t td115a@e)) (let ((td1162@ls/false (tdd7b@syntax-dispatch td1160@t '(_ . each-any)))) (if td1162@ls/false (apply (lambda (td1164@e*) (cons 'or (tdd99@chi-expr* td1164@e* td115b@r td115c@mr))) td1162@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1160@t)))))) (set! td2827@tdd27@or-transformer tdd27@or-transformer) (set! tdd29@case-macro (lambda (td1166@e) (let ((td1169@build-last '#f) (td116b@build-one '#f)) (begin (set! td1169@build-last (lambda (td1190@cls) (let ((td1192@t td1190@cls)) (let ((td1194@ls/false (tdd7b@syntax-dispatch td1192@t '(#(scheme-id else) any . each-any)))) (if td1194@ls/false (apply (lambda (td1196@e td1197@e*) (cons 'begin (cons td1196@e td1197@e*))) td1194@ls/false) (let ((td119a@t td1192@t)) (let ((td119c@ls/false (tdd7b@syntax-dispatch td119a@t '_))) (if td119c@ls/false (apply (lambda () (td116b@build-one td1190@cls '(if #f #f))) td119c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td119a@t))))))))) (set! td116b@build-one (lambda (td1182@cls td1183@k) (let ((td1186@t td1182@cls)) (let ((td1188@ls/false (tdd7b@syntax-dispatch td1186@t '(each-any any . each-any)))) (if td1188@ls/false (apply (lambda (td118a@d* td118b@e td118c@e*) (list 'if (list 'memv 't (list 'quote td118a@d*)) (cons 'begin (cons td118b@e td118c@e*)) td1183@k)) td1188@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1186@t)))))) (let ((td116c@t td1166@e)) (let ((td116e@ls/false (tdd7b@syntax-dispatch td116c@t '(_ any)))) (if td116e@ls/false (apply (lambda (td1170@expr) (tdd31@bless (cons 'let (cons (list (list 't td1170@expr)) '((if #f #f)))))) td116e@ls/false) (let ((td1172@t td116c@t)) (let ((td1174@ls/false (tdd7b@syntax-dispatch td1172@t '(_ any any . each-any)))) (if td1174@ls/false (apply (lambda (td1176@expr td1177@cls td1178@cls*) (tdd31@bless (list 'let (list (list 't td1176@expr)) (let td1180@f ((td117c@cls td1177@cls) (td117d@cls* td1178@cls*)) (if (null? td117d@cls*) (td1169@build-last td117c@cls) (td116b@build-one td117c@cls (td1180@f (car td117d@cls*) (cdr td117d@cls*)))))))) td1174@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1172@t))))))))))) (set! td2828@tdd29@case-macro tdd29@case-macro) (set! tdd2b@quote-transformer (lambda (td119e@e td119f@r td11a0@mr) (let ((td11a4@t td119e@e)) (let ((td11a6@ls/false (tdd7b@syntax-dispatch td11a4@t '(_ any)))) (if td11a6@ls/false (apply (lambda (td11a8@datum) (list 'quote (tdb88@stx->datum td11a8@datum))) td11a6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td11a4@t)))))) (set! td2829@tdd2b@quote-transformer tdd2b@quote-transformer) (set! tdd2d@case-lambda-transformer (lambda (td11aa@e td11ab@r td11ac@mr) (let ((td11b0@t td11aa@e)) (let ((td11b2@ls/false (tdd7b@syntax-dispatch td11b0@t '(_ . #(each (any any . each-any)))))) (if td11b2@ls/false (apply (lambda (td11b4@fmls* td11b5@b* td11b6@b**) (call-with-values (lambda () (tdda5@chi-lambda-clause* td11aa@e td11b4@fmls* (map cons td11b5@b* td11b6@b**) td11ab@r td11ac@mr)) (lambda (td11be@td11bb td11bf@td11bd) (let ((td11c2@body* td11bf@td11bd) (td11c3@fmls* td11be@td11bb)) (tdad8@tda05@build-case-lambda '#f td11c3@fmls* td11c2@body*))))) td11b2@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td11b0@t)))))) (set! td282a@tdd2d@case-lambda-transformer tdd2d@case-lambda-transformer) (set! tdd2f@lambda-transformer (lambda (td11c6@e td11c7@r td11c8@mr) (let ((td11cc@t td11c6@e)) (let ((td11ce@ls/false (tdd7b@syntax-dispatch td11cc@t '(_ any any . each-any)))) (if td11ce@ls/false (apply (lambda (td11d0@fmls td11d1@b td11d2@b*) (call-with-values (lambda () (tdda3@chi-lambda-clause td11c6@e td11d0@fmls (cons td11d1@b td11d2@b*) td11c7@r td11c8@mr)) (lambda (td11da@td11d7 td11db@td11d9) (let ((td11de@body td11db@td11d9) (td11df@fmls td11da@td11d7)) (tdad7@tda03@build-lambda '#f td11df@fmls td11de@body))))) td11ce@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td11cc@t)))))) (set! td282b@tdd2f@lambda-transformer tdd2f@lambda-transformer) (set! tdd31@bless (lambda (td11e2@x) (tdb5c@mkstx (let td11e6@f ((td11e4@x td11e2@x)) (if (tdb40@stx? td11e4@x) td11e4@x (if (pair? td11e4@x) (cons (td11e6@f (car td11e4@x)) (td11e6@f (cdr td11e4@x))) (if (symbol? td11e4@x) (tdd03@scheme-stx td11e4@x) (if (vector? td11e4@x) (vector-map td11e6@f td11e4@x) td11e4@x))))) '() '() '()))) (set! td282c@tdd31@bless tdd31@bless) (set! tdd33@with-syntax-macro (lambda (td11e8@e) (let ((td11ea@t td11e8@e)) (let ((td11ec@ls/false (tdd7b@syntax-dispatch td11ea@t '(_ #(each (any any)) any . each-any)))) (if td11ec@ls/false (apply (lambda (td11ee@pat* td11ef@expr* td11f0@b td11f1@b*) (let ((td11f6@idn* (let td11fa@f ((td11f8@pat* td11ee@pat*)) (if (null? td11f8@pat*) '() (call-with-values (lambda () (tdd79@convert-pattern (car td11f8@pat*) '())) (lambda (td1200@td11fd td1201@td11ff) (let ((td1204@idn* td1201@td11ff) (td1205@pat td1200@td11fd)) (append td1204@idn* (td11fa@f (cdr td11f8@pat*)))))))))) (begin (tdda1@verify-formals (map car td11f6@idn*) td11e8@e) (let ((td1208@t* (tde49@generate-temporaries td11ef@expr*))) (tdd31@bless (list 'let (map list td1208@t* td11ef@expr*) (let td120e@f ((td120a@pat* td11ee@pat*) (td120b@t* td1208@t*)) (if (null? td120a@pat*) (cons 'begin (cons '#f (cons td11f0@b td11f1@b*))) (list 'syntax-case (car td120b@t*) '() (list (car td120a@pat*) (td120e@f (cdr td120a@pat*) (cdr td120b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car td120a@pat*)) (car td120b@t*)))))))))))) td11ec@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td11ea@t)))))) (set! td282d@tdd33@with-syntax-macro tdd33@with-syntax-macro) (set! tdd35@invalid-fmls-error (lambda (td1210@stx td1211@fmls) (let ((td1214@t td1211@fmls)) (let ((td1216@ls/false (tdd7b@syntax-dispatch td1214@t '#(each+ any () any)))) (if td1216@ls/false (apply (lambda (td1218@id* td1219@last) (let td121e@f ((td121c@id* (if (tdb74@id? td1219@last) (cons td1219@last td1218@id*) (if (tdb6a@syntax-null? td1219@last) td1218@id* (tde5b@syntax-violation '#f '"not an identifier" td1210@stx td1219@last))))) (if (null? td121c@id*) (values) (if (not (tdb74@id? (car td121c@id*))) (tde5b@syntax-violation '#f '"not an identifier" td1210@stx (car td121c@id*)) (begin (td121e@f (cdr td121c@id*)) (if (tdb80@bound-id-member? (car td121c@id*) (cdr td121c@id*)) (tde5b@syntax-violation '#f '"duplicate binding" td1210@stx (car td121c@id*)) (void))))))) td1216@ls/false) (let ((td1220@t td1214@t)) (let ((td1222@ls/false (tdd7b@syntax-dispatch td1220@t '_))) (if td1222@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"malformed binding form" td1210@stx td1211@fmls)) td1222@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1220@t))))))))) (set! td282e@tdd35@invalid-fmls-error tdd35@invalid-fmls-error) (set! tdd37@let-macro (lambda (td1224@stx) (let ((td1226@t td1224@stx)) (let ((td1228@ls/false (tdd7b@syntax-dispatch td1226@t '(_ #(each (any any)) any . each-any)))) (if td1228@ls/false (apply (lambda (td122a@lhs* td122b@rhs* td122c@b td122d@b*) (if (tdb7c@valid-bound-ids? td122a@lhs*) (tdd31@bless (cons (cons 'lambda (cons td122a@lhs* (cons td122c@b td122d@b*))) td122b@rhs*)) (tdd35@invalid-fmls-error td1224@stx td122a@lhs*))) td1228@ls/false) (let ((td1232@t td1226@t)) (let ((td1234@ls/false (tdd7b@syntax-dispatch td1232@t '(_ any #(each (any any)) any . each-any)))) (if (and td1234@ls/false (apply (lambda (td1236@f td1237@lhs* td1238@rhs* td1239@b td123a@b*) (tdb74@id? td1236@f)) td1234@ls/false)) (apply (lambda (td1240@f td1241@lhs* td1242@rhs* td1243@b td1244@b*) (if (tdb7c@valid-bound-ids? td1241@lhs*) (tdd31@bless (cons (list 'letrec (list (list td1240@f (cons 'lambda (cons td1241@lhs* (cons td1243@b td1244@b*))))) td1240@f) td1242@rhs*)) (tdd35@invalid-fmls-error td1224@stx td1241@lhs*))) td1234@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1232@t))))))))) (set! td282f@tdd37@let-macro tdd37@let-macro) (set! tdd39@let-values-macro (lambda (td124a@stx) (let ((td124d@rename '#f) (td124f@rename* '#f)) (begin (set! td124d@rename (lambda (td12b2@x td12b3@old* td12b4@new*) (begin (if (not (tdb74@id? td12b2@x)) (tde5b@syntax-violation '#f '"not an indentifier" td124a@stx td12b2@x) (void)) (if (tdb80@bound-id-member? td12b2@x td12b3@old*) (tde5b@syntax-violation '#f '"duplicate binding" td124a@stx td12b2@x) (void)) (let ((td12b8@y (gensym (tde61@syntax->datum td12b2@x)))) (values td12b8@y (cons td12b2@x td12b3@old*) (cons td12b8@y td12b4@new*)))))) (set! td124f@rename* (lambda (td12a0@x* td12a1@old* td12a2@new*) (if (null? td12a0@x*) (values '() td12a1@old* td12a2@new*) (call-with-values (lambda () (td124d@rename (car td12a0@x*) td12a1@old* td12a2@new*)) (lambda (td12a6@x td12a7@old* td12a8@new*) (call-with-values (lambda () (td124f@rename* (cdr td12a0@x*) td12a7@old* td12a8@new*)) (lambda (td12ac@x* td12ad@old* td12ae@new*) (values (cons td12a6@x td12ac@x*) td12ad@old* td12ae@new*)))))))) (let ((td1250@t td124a@stx)) (let ((td1252@ls/false (tdd7b@syntax-dispatch td1250@t '(_ () any . each-any)))) (if td1252@ls/false (apply (lambda (td1254@b td1255@b*) (cons* (tdd31@bless 'let) '() td1254@b td1255@b*)) td1252@ls/false) (let ((td1258@t td1250@t)) (let ((td125a@ls/false (tdd7b@syntax-dispatch td1258@t '(_ #(each (any any)) any . each-any)))) (if td125a@ls/false (apply (lambda (td125c@lhs* td125d@rhs* td125e@b td125f@b*) (tdd31@bless (let td126c@f ((td1264@lhs* td125c@lhs*) (td1265@rhs* td125d@rhs*) (td1266@old* '()) (td1267@new* '())) (if (null? td1264@lhs*) (cons 'let (cons (map list td1266@old* td1267@new*) (cons td125e@b td125f@b*))) (let ((td126e@t (car td1264@lhs*))) (let ((td1270@ls/false (tdd7b@syntax-dispatch td126e@t 'each-any))) (if td1270@ls/false (apply (lambda (td1272@x*) (call-with-values (lambda () (td124f@rename* td1272@x* td1266@old* td1267@new*)) (lambda (td127a@td1275 td127b@td1277 td127c@td1279) (let ((td1280@new* td127c@td1279) (td1281@old* td127b@td1277) (td1282@y* td127a@td1275)) (list 'call-with-values (list 'lambda '() (car td1265@rhs*)) (list 'lambda td1282@y* (td126c@f (cdr td1264@lhs*) (cdr td1265@rhs*) td1281@old* td1280@new*))))))) td1270@ls/false) (let ((td1286@t td126e@t)) (let ((td1288@ls/false (tdd7b@syntax-dispatch td1286@t '#(each+ any () any)))) (if td1288@ls/false (apply (lambda (td128a@x* td128b@x) (call-with-values (lambda () (td124d@rename td128b@x td1266@old* td1267@new*)) (lambda (td128e@y td128f@old* td1290@new*) (call-with-values (lambda () (td124f@rename* td128a@x* td128f@old* td1290@new*)) (lambda (td1294@y* td1295@old* td1296@new*) (list 'call-with-values (list 'lambda '() (car td1265@rhs*)) (list 'lambda (append td1294@y* td128e@y) (td126c@f (cdr td1264@lhs*) (cdr td1265@rhs*) td1295@old* td1296@new*)))))))) td1288@ls/false) (let ((td129a@t td1286@t)) (let ((td129c@ls/false (tdd7b@syntax-dispatch td129a@t 'any))) (if td129c@ls/false (apply (lambda (td129e@others) (tde5b@syntax-violation '#f '"malformed bindings" td124a@stx td129e@others)) td129c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td129a@t)))))))))))))) td125a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1258@t))))))))))) (set! td2830@tdd39@let-values-macro tdd39@let-values-macro) (set! tdd3b@let*-values-macro (lambda (td12ba@stx) (let ((td12bd@check '#f)) (begin (set! td12bd@check (lambda (td12ec@x*) (if (not (null? td12ec@x*)) (let ((td12ee@x (car td12ec@x*))) (begin (if (not (tdb74@id? td12ee@x)) (tde5b@syntax-violation '#f '"not an identifier" td12ba@stx td12ee@x) (void)) (td12bd@check (cdr td12ec@x*)) (if (tdb80@bound-id-member? td12ee@x (cdr td12ec@x*)) (tde5b@syntax-violation '#f '"duplicate identifier" td12ba@stx td12ee@x) (void)))) (void)))) (let ((td12be@t td12ba@stx)) (let ((td12c0@ls/false (tdd7b@syntax-dispatch td12be@t '(_ () any . each-any)))) (if td12c0@ls/false (apply (lambda (td12c2@b td12c3@b*) (cons* (tdd31@bless 'let) '() td12c2@b td12c3@b*)) td12c0@ls/false) (let ((td12c6@t td12be@t)) (let ((td12c8@ls/false (tdd7b@syntax-dispatch td12c6@t '(_ #(each (any any)) any . each-any)))) (if td12c8@ls/false (apply (lambda (td12ca@lhs* td12cb@rhs* td12cc@b td12cd@b*) (tdd31@bless (let td12d6@f ((td12d2@lhs* td12ca@lhs*) (td12d3@rhs* td12cb@rhs*)) (if (null? td12d2@lhs*) (cons 'begin (cons td12cc@b td12cd@b*)) (let ((td12d8@t (car td12d2@lhs*))) (let ((td12da@ls/false (tdd7b@syntax-dispatch td12d8@t 'each-any))) (if td12da@ls/false (apply (lambda (td12dc@x*) (begin (td12bd@check td12dc@x*) (list 'call-with-values (list 'lambda '() (car td12d3@rhs*)) (list 'lambda td12dc@x* (td12d6@f (cdr td12d2@lhs*) (cdr td12d3@rhs*)))))) td12da@ls/false) (let ((td12de@t td12d8@t)) (let ((td12e0@ls/false (tdd7b@syntax-dispatch td12de@t '#(each+ any () any)))) (if td12e0@ls/false (apply (lambda (td12e2@x* td12e3@x) (begin (td12bd@check (cons td12e3@x td12e2@x*)) (list 'call-with-values (list 'lambda '() (car td12d3@rhs*)) (list 'lambda (append td12e2@x* td12e3@x) (td12d6@f (cdr td12d2@lhs*) (cdr td12d3@rhs*)))))) td12e0@ls/false) (let ((td12e6@t td12de@t)) (let ((td12e8@ls/false (tdd7b@syntax-dispatch td12e6@t 'any))) (if td12e8@ls/false (apply (lambda (td12ea@others) (tde5b@syntax-violation '#f '"malformed bindings" td12ba@stx td12ea@others)) td12e8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td12e6@t)))))))))))))) td12c8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td12c6@t))))))))))) (set! td2831@tdd3b@let*-values-macro tdd3b@let*-values-macro) (set! tdd3d@trace-lambda-macro (lambda (td12f0@stx) (let ((td12f2@t td12f0@stx)) (let ((td12f4@ls/false (tdd7b@syntax-dispatch td12f2@t '(_ any each-any any . each-any)))) (if td12f4@ls/false (apply (lambda (td12f6@who td12f7@fmls td12f8@b td12f9@b*) (if (tdb7c@valid-bound-ids? td12f7@fmls) (tdd31@bless (list 'make-traced-procedure (list 'quote td12f6@who) (cons 'lambda (cons td12f7@fmls (cons td12f8@b td12f9@b*))))) (tdd35@invalid-fmls-error td12f0@stx td12f7@fmls))) td12f4@ls/false) (let ((td12fe@t td12f2@t)) (let ((td1300@ls/false (tdd7b@syntax-dispatch td12fe@t '(_ any #(each+ any () any) any . each-any)))) (if td1300@ls/false (apply (lambda (td1302@who td1303@fmls td1304@last td1305@b td1306@b*) (if (tdb7c@valid-bound-ids? (cons td1304@last td1303@fmls)) (tdd31@bless (list 'make-traced-procedure (list 'quote td1302@who) (cons 'lambda (cons (append td1303@fmls td1304@last) (cons td1305@b td1306@b*))))) (tdd35@invalid-fmls-error td12f0@stx (append td1303@fmls td1304@last)))) td1300@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td12fe@t))))))))) (set! td2832@tdd3d@trace-lambda-macro tdd3d@trace-lambda-macro) (set! tdd3f@trace-define-macro (lambda (td130c@stx) (let ((td130e@t td130c@stx)) (let ((td1310@ls/false (tdd7b@syntax-dispatch td130e@t '(_ (any . each-any) any . each-any)))) (if td1310@ls/false (apply (lambda (td1312@who td1313@fmls td1314@b td1315@b*) (if (tdb7c@valid-bound-ids? td1313@fmls) (tdd31@bless (list 'define td1312@who (list 'make-traced-procedure (list 'quote td1312@who) (cons 'lambda (cons td1313@fmls (cons td1314@b td1315@b*)))))) (tdd35@invalid-fmls-error td130c@stx td1313@fmls))) td1310@ls/false) (let ((td131a@t td130e@t)) (let ((td131c@ls/false (tdd7b@syntax-dispatch td131a@t '(_ (any . #(each+ any () any)) any . each-any)))) (if td131c@ls/false (apply (lambda (td131e@who td131f@fmls td1320@last td1321@b td1322@b*) (if (tdb7c@valid-bound-ids? (cons td1320@last td131f@fmls)) (tdd31@bless (list 'define td131e@who (list 'make-traced-procedure (list 'quote td131e@who) (cons 'lambda (cons (append td131f@fmls td1320@last) (cons td1321@b td1322@b*)))))) (tdd35@invalid-fmls-error td130c@stx (append td131f@fmls td1320@last)))) td131c@ls/false) (let ((td1328@t td131a@t)) (let ((td132a@ls/false (tdd7b@syntax-dispatch td1328@t '(_ any any)))) (if td132a@ls/false (apply (lambda (td132c@who td132d@expr) (if (tdb74@id? td132c@who) (tdd31@bless (list 'define td132c@who (list 'let (list (list 'v td132d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote td132c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (tde5b@syntax-violation '#f '"invalid name" td130c@stx))) td132a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1328@t)))))))))))) (set! td2833@tdd3f@trace-define-macro tdd3f@trace-define-macro) (set! tdd41@trace-define-syntax-macro (lambda (td1330@stx) (let ((td1332@t td1330@stx)) (let ((td1334@ls/false (tdd7b@syntax-dispatch td1332@t '(_ any any)))) (if td1334@ls/false (apply (lambda (td1336@who td1337@expr) (if (tdb74@id? td1336@who) (tdd31@bless (list 'define-syntax td1336@who (list 'make-traced-macro (list 'quote td1336@who) td1337@expr))) (tde5b@syntax-violation '#f '"invalid name" td1330@stx))) td1334@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1332@t)))))) (set! td2834@tdd41@trace-define-syntax-macro tdd41@trace-define-syntax-macro) (set! tdd43@trace-let/rec-syntax (lambda (td133a@who) (lambda (td133c@stx) (let ((td133e@t td133c@stx)) (let ((td1340@ls/false (tdd7b@syntax-dispatch td133e@t '(_ #(each (any any)) any . each-any)))) (if td1340@ls/false (apply (lambda (td1342@lhs* td1343@rhs* td1344@b td1345@b*) (if (tdb7c@valid-bound-ids? td1342@lhs*) (let ((td134a@rhs* (map (lambda (td134c@lhs td134d@rhs) (list 'make-traced-macro (list 'quote td134c@lhs) td134d@rhs)) td1342@lhs* td1343@rhs*))) (tdd31@bless (cons td133a@who (cons (map list td1342@lhs* td134a@rhs*) (cons td1344@b td1345@b*))))) (tdd35@invalid-fmls-error td133c@stx td1342@lhs*))) td1340@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td133e@t))))))) (set! td2835@tdd43@trace-let/rec-syntax tdd43@trace-let/rec-syntax) (set! tdd45@trace-let-syntax-macro (tdd43@trace-let/rec-syntax 'let-syntax)) (set! td2836@tdd45@trace-let-syntax-macro tdd45@trace-let-syntax-macro) (set! tdd47@trace-letrec-syntax-macro (tdd43@trace-let/rec-syntax 'letrec-syntax)) (set! td2837@tdd47@trace-letrec-syntax-macro tdd47@trace-letrec-syntax-macro) (set! tdd49@guard-macro (lambda (td1350@x) (let ((td1353@gen-clauses '#f)) (begin (set! td1353@gen-clauses (lambda (td136a@con td136b@outerk td136c@clause*) (let ((td1371@f '#f) (td1373@f* '#f)) (begin (set! td1371@f (lambda (td13aa@x td13ab@k) (let ((td13ae@t td13aa@x)) (let ((td13b0@ls/false (tdd7b@syntax-dispatch td13ae@t '(any #(scheme-id =>) any)))) (if td13b0@ls/false (apply (lambda (td13b2@e td13b3@p) (let ((td13b6@t (gensym))) (list 'let (list (list td13b6@t td13b2@e)) (list 'if td13b6@t (list td13b3@p td13b6@t) td13ab@k)))) td13b0@ls/false) (let ((td13b8@t td13ae@t)) (let ((td13ba@ls/false (tdd7b@syntax-dispatch td13b8@t '(any)))) (if td13ba@ls/false (apply (lambda (td13bc@e) (let ((td13be@t (gensym))) (list 'let (list (list td13be@t td13bc@e)) (list 'if td13be@t td13be@t td13ab@k)))) td13ba@ls/false) (let ((td13c0@t td13b8@t)) (let ((td13c2@ls/false (tdd7b@syntax-dispatch td13c0@t '(any any . each-any)))) (if td13c2@ls/false (apply (lambda (td13c4@e td13c5@v td13c6@v*) (list 'if td13c4@e (cons 'begin (cons td13c5@v td13c6@v*)) td13ab@k)) td13c2@ls/false) (let ((td13ca@t td13c0@t)) (let ((td13cc@ls/false (tdd7b@syntax-dispatch td13ca@t '_))) (if td13cc@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid guard clause" td13aa@x)) td13cc@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13ca@t))))))))))))))) (set! td1373@f* (lambda (td1380@x*) (let ((td1382@t td1380@x*)) (let ((td1384@ls/false (tdd7b@syntax-dispatch td1382@t '()))) (if td1384@ls/false (apply (lambda () (let ((td1386@g (gensym))) (values (list td1386@g (list 'lambda '() (list 'raise-continuable td136a@con))) td1386@g))) td1384@ls/false) (let ((td1388@t td1382@t)) (let ((td138a@ls/false (tdd7b@syntax-dispatch td1388@t '((#(scheme-id else) any . each-any))))) (if td138a@ls/false (apply (lambda (td138c@e td138d@e*) (values (cons 'begin (cons td138c@e td138d@e*)) '#f)) td138a@ls/false) (let ((td1390@t td1388@t)) (let ((td1392@ls/false (tdd7b@syntax-dispatch td1390@t '(any . any)))) (if td1392@ls/false (apply (lambda (td1394@cls td1395@cls*) (call-with-values (lambda () (td1373@f* td1395@cls*)) (lambda (td139c@td1399 td139d@td139b) (let ((td13a0@g td139d@td139b) (td13a1@e td139c@td1399)) (values (td1371@f td1394@cls td13a1@e) td13a0@g))))) td1392@ls/false) (let ((td13a4@t td1390@t)) (let ((td13a6@ls/false (tdd7b@syntax-dispatch td13a4@t 'any))) (if td13a6@ls/false (apply (lambda (td13a8@others) (tde5b@syntax-violation '#f '"invalid guard clause" td13a8@others)) td13a6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13a4@t))))))))))))))) (call-with-values (lambda () (td1373@f* td136c@clause*)) (lambda (td1378@td1375 td1379@td1377) (let ((td137c@raisek td1379@td1377) (td137d@code td1378@td1375)) (if td137c@raisek (list (list 'call/cc (list 'lambda (list td137c@raisek) (list td136b@outerk (list 'lambda '() td137d@code))))) (list td136b@outerk (list 'lambda '() td137d@code)))))))))) (let ((td1354@t td1350@x)) (let ((td1356@ls/false (tdd7b@syntax-dispatch td1354@t '(_ (any . each-any) any . each-any)))) (if (and td1356@ls/false (apply (lambda (td1358@con td1359@clause* td135a@b td135b@b*) (tdb74@id? td1358@con)) td1356@ls/false)) (apply (lambda (td1360@con td1361@clause* td1362@b td1363@b*) (let ((td1368@outerk (gensym))) (tdd31@bless (list (list 'call/cc (list 'lambda (list td1368@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list td1360@con) (td1353@gen-clauses td1360@con td1368@outerk td1361@clause*)) (cons 'lambda (cons '() (cons td1362@b td1363@b*))))))))))) td1356@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1354@t)))))))) (set! td2838@tdd49@guard-macro tdd49@guard-macro) (set! tdd4b@define-enumeration-macro (lambda (td13ce@stx) (let ((td13d1@set? '#f) (td13d3@remove-dups '#f)) (begin (set! td13d1@set? (lambda (td13ea@x) (or (null? td13ea@x) (and (not (memq (car td13ea@x) (cdr td13ea@x))) (td13d1@set? (cdr td13ea@x)))))) (set! td13d3@remove-dups (lambda (td13e8@ls) (if (null? td13e8@ls) '() (cons (car td13e8@ls) (td13d3@remove-dups (remq (car td13e8@ls) (cdr td13e8@ls))))))) (let ((td13d4@t td13ce@stx)) (let ((td13d6@ls/false (tdd7b@syntax-dispatch td13d4@t '(_ any each-any any)))) (if (and td13d6@ls/false (apply (lambda (td13d8@name td13d9@id* td13da@maker) (and (tdb74@id? td13d8@name) (tdb74@id? td13da@maker) (for-all tdb74@id? td13d9@id*))) td13d6@ls/false)) (apply (lambda (td13de@name td13df@id* td13e0@maker) (let ((td13e4@name* (td13d3@remove-dups (tde61@syntax->datum td13df@id*))) (td13e5@mk (gensym))) (tdd31@bless (list 'begin (list 'define td13e5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote td13e4@name*)))) (list 'define-syntax td13de@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote td13e4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote td13de@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax td13e0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote td13e0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote td13e4@name*)) (cons 'syntax-violation (cons (list 'quote td13e0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons td13e5@mk '('(n* ...))))))))))))) td13d6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13d4@t)))))))) (set! td2839@tdd4b@define-enumeration-macro tdd4b@define-enumeration-macro) (set! tdd4d@time-macro (lambda (td13ec@stx) (let ((td13ee@t td13ec@stx)) (let ((td13f0@ls/false (tdd7b@syntax-dispatch td13ee@t '(_ any)))) (if td13f0@ls/false (apply (lambda (td13f2@expr) (tdd31@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() td13f2@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) td13f0@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13ee@t)))))) (set! td283a@tdd4d@time-macro tdd4d@time-macro) (set! tdd4f@delay-macro (lambda (td13f4@stx) (let ((td13f6@t td13f4@stx)) (let ((td13f8@ls/false (tdd7b@syntax-dispatch td13f6@t '(_ any)))) (if td13f8@ls/false (apply (lambda (td13fa@expr) (tdd31@bless (list 'make-promise (list 'lambda '() td13fa@expr)))) td13f8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13f6@t)))))) (set! td283b@tdd4f@delay-macro tdd4f@delay-macro) (set! tdd51@assert-macro (lambda (td13fc@stx) (let ((td13fe@t td13fc@stx)) (let ((td1400@ls/false (tdd7b@syntax-dispatch td13fe@t '(_ any)))) (if td1400@ls/false (apply (lambda (td1402@expr) (let ((td1404@pos (or (tde53@expression-position td13fc@stx) (tde53@expression-position td1402@expr)))) (tdd31@bless (list 'unless td1402@expr (list 'assertion-error (list 'quote td1402@expr) (list 'quote td1404@pos)))))) td1400@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td13fe@t)))))) (set! td283c@tdd51@assert-macro tdd51@assert-macro) (set! tdd53@endianness-macro (lambda (td1406@stx) (let ((td1408@t td1406@stx)) (let ((td140a@ls/false (tdd7b@syntax-dispatch td1408@t '(_ any)))) (if td140a@ls/false (apply (lambda (td140c@e) (let ((td140e@t (tde61@syntax->datum td140c@e))) (if (memv td140e@t '(little)) (tdd31@bless ''little) (if (memv td140e@t '(big)) (tdd31@bless ''big) (tde5b@syntax-violation '#f '"endianness must be big or little" td1406@stx))))) td140a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1408@t)))))) (set! td283d@tdd53@endianness-macro tdd53@endianness-macro) (set! tdd55@identifier-syntax-macro (lambda (td1410@stx) (let ((td1412@t td1410@stx)) (let ((td1414@ls/false (tdd7b@syntax-dispatch td1412@t '(_ any)))) (if td1414@ls/false (apply (lambda (td1416@expr) (tdd31@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax td1416@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax td1416@expr) '((syntax (e* ...)))))))))) td1414@ls/false) (let ((td1418@t td1412@t)) (let ((td141a@ls/false (tdd7b@syntax-dispatch td1418@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and td141a@ls/false (apply (lambda (td141c@id1 td141d@expr1 td141e@id2 td141f@expr2 td1420@expr3) (and (tdb74@id? td141c@id1) (tdb74@id? td141e@id2) (tdb74@id? td141f@expr2))) td141a@ls/false)) (apply (lambda (td1426@id1 td1427@expr1 td1428@id2 td1429@expr2 td142a@expr3) (tdd31@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax td1427@expr1)) (list (list 'set! 'id td1429@expr2) (list 'syntax td142a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons td1427@expr1 '(e* ...))))))))) td141a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1418@t))))))))) (set! td283e@tdd55@identifier-syntax-macro tdd55@identifier-syntax-macro) (set! tdd57@do-macro (lambda (td1430@stx) (let ((td1433@bind '#f)) (begin (set! td1433@bind (lambda (td144a@x) (let ((td144c@t td144a@x)) (let ((td144e@ls/false (tdd7b@syntax-dispatch td144c@t '(any any)))) (if td144e@ls/false (apply (lambda (td1450@x td1451@init) (list td1450@x td1451@init td1450@x)) td144e@ls/false) (let ((td1454@t td144c@t)) (let ((td1456@ls/false (tdd7b@syntax-dispatch td1454@t '(any any any)))) (if td1456@ls/false (apply (lambda (td1458@x td1459@init td145a@step) (list td1458@x td1459@init td145a@step)) td1456@ls/false) (let ((td145e@t td1454@t)) (let ((td1460@ls/false (tdd7b@syntax-dispatch td145e@t '_))) (if td1460@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid binding" td1430@stx)) td1460@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td145e@t)))))))))))) (let ((td1434@t td1430@stx)) (let ((td1436@ls/false (tdd7b@syntax-dispatch td1434@t '(_ each-any (any . each-any) . each-any)))) (if td1436@ls/false (apply (lambda (td1438@binding* td1439@test td143a@expr* td143b@command*) (let ((td1440@t (map td1433@bind td1438@binding*))) (let ((td1442@ls/false (tdd7b@syntax-dispatch td1440@t '#(each (any any any))))) (if td1442@ls/false (apply (lambda (td1444@x* td1445@init* td1446@step*) (if (tdb7c@valid-bound-ids? td1444@x*) (tdd31@bless (list 'letrec (list (list 'loop (list 'lambda td1444@x* (list 'if td1439@test (cons 'begin (cons '(if #f #f) td143a@expr*)) (cons 'begin (append td143b@command* (list (cons 'loop td1446@step*)))))))) (cons 'loop td1445@init*))) (tde5b@syntax-violation '#f '"invalid bindings" td1430@stx))) td1442@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1440@t))))) td1436@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1434@t)))))))) (set! td283f@tdd57@do-macro tdd57@do-macro) (set! tdd59@let*-macro (lambda (td1462@stx) (let ((td1464@t td1462@stx)) (let ((td1466@ls/false (tdd7b@syntax-dispatch td1464@t '(_ #(each (any any)) any . each-any)))) (if (and td1466@ls/false (apply (lambda (td1468@lhs* td1469@rhs* td146a@b td146b@b*) (for-all tdb74@id? td1468@lhs*)) td1466@ls/false)) (apply (lambda (td1470@lhs* td1471@rhs* td1472@b td1473@b*) (tdd31@bless (let td147a@f ((td1478@x* (map list td1470@lhs* td1471@rhs*))) (if (null? td1478@x*) (cons 'let (cons '() (cons td1472@b td1473@b*))) (list 'let (list (car td1478@x*)) (td147a@f (cdr td1478@x*))))))) td1466@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1464@t)))))) (set! td2840@tdd59@let*-macro tdd59@let*-macro) (set! tdd5b@or-macro (lambda (td147c@stx) (let ((td147e@t td147c@stx)) (let ((td1480@ls/false (tdd7b@syntax-dispatch td147e@t '(_)))) (if td1480@ls/false (apply (lambda () '#f) td1480@ls/false) (let ((td1482@t td147e@t)) (let ((td1484@ls/false (tdd7b@syntax-dispatch td1482@t '(_ any . each-any)))) (if td1484@ls/false (apply (lambda (td1486@e td1487@e*) (tdd31@bless (let td148e@f ((td148a@e td1486@e) (td148b@e* td1487@e*)) (if (null? td148b@e*) (list 'begin '#f td148a@e) (list 'let (list (list 't td148a@e)) (list 'if 't 't (td148e@f (car td148b@e*) (cdr td148b@e*)))))))) td1484@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1482@t))))))))) (set! td2841@tdd5b@or-macro tdd5b@or-macro) (set! tdd5d@and-macro (lambda (td1490@stx) (let ((td1492@t td1490@stx)) (let ((td1494@ls/false (tdd7b@syntax-dispatch td1492@t '(_)))) (if td1494@ls/false (apply (lambda () '#t) td1494@ls/false) (let ((td1496@t td1492@t)) (let ((td1498@ls/false (tdd7b@syntax-dispatch td1496@t '(_ any . each-any)))) (if td1498@ls/false (apply (lambda (td149a@e td149b@e*) (tdd31@bless (let td14a2@f ((td149e@e td149a@e) (td149f@e* td149b@e*)) (if (null? td149f@e*) (list 'begin '#f td149e@e) (cons 'if (cons td149e@e (cons (td14a2@f (car td149f@e*) (cdr td149f@e*)) '(#f)))))))) td1498@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1496@t))))))))) (set! td2842@tdd5d@and-macro tdd5d@and-macro) (set! tdd5f@cond-macro (lambda (td14a4@stx) (let ((td14a6@t td14a4@stx)) (let ((td14a8@ls/false (tdd7b@syntax-dispatch td14a6@t '(_ any . each-any)))) (if td14a8@ls/false (apply (lambda (td14aa@cls td14ab@cls*) (tdd31@bless (let td14b2@f ((td14ae@cls td14aa@cls) (td14af@cls* td14ab@cls*)) (if (null? td14af@cls*) (let ((td14b4@t td14ae@cls)) (let ((td14b6@ls/false (tdd7b@syntax-dispatch td14b4@t '(#(scheme-id else) any . each-any)))) (if td14b6@ls/false (apply (lambda (td14b8@e td14b9@e*) (cons 'begin (cons td14b8@e td14b9@e*))) td14b6@ls/false) (let ((td14bc@t td14b4@t)) (let ((td14be@ls/false (tdd7b@syntax-dispatch td14bc@t '(any #(scheme-id =>) any)))) (if td14be@ls/false (apply (lambda (td14c0@e td14c1@p) (list 'let (list (list 't td14c0@e)) (list 'if 't (cons td14c1@p '(t))))) td14be@ls/false) (let ((td14c4@t td14bc@t)) (let ((td14c6@ls/false (tdd7b@syntax-dispatch td14c4@t '(any)))) (if td14c6@ls/false (apply (lambda (td14c8@e) (cons 'or (cons td14c8@e '((if #f #f))))) td14c6@ls/false) (let ((td14ca@t td14c4@t)) (let ((td14cc@ls/false (tdd7b@syntax-dispatch td14ca@t '(any . each-any)))) (if td14cc@ls/false (apply (lambda (td14ce@e td14cf@e*) (list 'if td14ce@e (cons 'begin td14cf@e*))) td14cc@ls/false) (let ((td14d2@t td14ca@t)) (let ((td14d4@ls/false (tdd7b@syntax-dispatch td14d2@t '_))) (if td14d4@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid last clause" td14a4@stx)) td14d4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td14d2@t)))))))))))))))) (let ((td14d6@t td14ae@cls)) (let ((td14d8@ls/false (tdd7b@syntax-dispatch td14d6@t '(#(scheme-id else) any . each-any)))) (if td14d8@ls/false (apply (lambda (td14da@e td14db@e*) (tde5b@syntax-violation '#f '"incorrect position of keyword else" td14a4@stx)) td14d8@ls/false) (let ((td14de@t td14d6@t)) (let ((td14e0@ls/false (tdd7b@syntax-dispatch td14de@t '(any #(scheme-id =>) any)))) (if td14e0@ls/false (apply (lambda (td14e2@e td14e3@p) (list 'let (list (list 't td14e2@e)) (list 'if 't (cons td14e3@p '(t)) (td14b2@f (car td14af@cls*) (cdr td14af@cls*))))) td14e0@ls/false) (let ((td14e6@t td14de@t)) (let ((td14e8@ls/false (tdd7b@syntax-dispatch td14e6@t '(any)))) (if td14e8@ls/false (apply (lambda (td14ea@e) (list 'or td14ea@e (td14b2@f (car td14af@cls*) (cdr td14af@cls*)))) td14e8@ls/false) (let ((td14ec@t td14e6@t)) (let ((td14ee@ls/false (tdd7b@syntax-dispatch td14ec@t '(any . each-any)))) (if td14ee@ls/false (apply (lambda (td14f0@e td14f1@e*) (list 'if td14f0@e (cons 'begin td14f1@e*) (td14b2@f (car td14af@cls*) (cdr td14af@cls*)))) td14ee@ls/false) (let ((td14f4@t td14ec@t)) (let ((td14f6@ls/false (tdd7b@syntax-dispatch td14f4@t '_))) (if td14f6@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid last clause" td14a4@stx)) td14f6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td14f4@t)))))))))))))))))))) td14a8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td14a6@t)))))) (set! td2843@tdd5f@cond-macro tdd5f@cond-macro) (set! tdd61@do-include (lambda (td14f8@stx td14f9@id td14fa@filename) (let ((td14fe@filename (tdb88@stx->datum td14fa@filename))) (begin (if (not (and (string? td14fe@filename) (tdb74@id? td14f9@id))) (tde5b@syntax-violation '#f '"invalid syntax" td14f8@stx) (void)) (cons (tdd31@bless 'begin) (with-input-from-file td14fe@filename (lambda () (let td1502@f ((td1500@ls '())) (let ((td1504@x (td6b1@td583@read-annotated))) (if (eof-object? td1504@x) (reverse td1500@ls) (td1502@f (cons (tdb54@datum->stx td14f9@id td1504@x) td1500@ls)))))))))))) (set! td2844@tdd61@do-include tdd61@do-include) (set! tdd63@include-macro (lambda (td1506@e) (let ((td1508@t td1506@e)) (let ((td150a@ls/false (tdd7b@syntax-dispatch td1508@t '(any any)))) (if td150a@ls/false (apply (lambda (td150c@id td150d@filename) (tdd61@do-include td1506@e td150c@id td150d@filename)) td150a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1508@t)))))) (set! td2845@tdd63@include-macro tdd63@include-macro) (set! tdd65@include-into-macro (lambda (td1510@e) (let ((td1512@t td1510@e)) (let ((td1514@ls/false (tdd7b@syntax-dispatch td1512@t '(_ any any)))) (if td1514@ls/false (apply (lambda (td1516@id td1517@filename) (tdd61@do-include td1510@e td1516@id td1517@filename)) td1514@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1512@t)))))) (set! td2846@tdd65@include-into-macro tdd65@include-into-macro) (set! tdd67@syntax-rules-macro (lambda (td151a@e) (let ((td151c@t td151a@e)) (let ((td151e@ls/false (tdd7b@syntax-dispatch td151c@t '(_ each-any . #(each (any any)))))) (if td151e@ls/false (apply (lambda (td1520@lits td1521@pat* td1522@tmp*) (begin (tdd81@verify-literals td1520@lits td151a@e) (tdd31@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons td1520@lits (map (lambda (td1526@pat td1527@tmp) (let ((td152a@t td1526@pat)) (let ((td152c@ls/false (tdd7b@syntax-dispatch td152a@t '(_ . any)))) (if td152c@ls/false (apply (lambda (td152e@rest) (list (cons 'g td152e@rest) (list 'syntax td1527@tmp))) td152c@ls/false) (let ((td1530@t td152a@t)) (let ((td1532@ls/false (tdd7b@syntax-dispatch td1530@t '_))) (if td1532@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid syntax-rules pattern" td151a@e td1526@pat)) td1532@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1530@t)))))))) td1521@pat* td1522@tmp*)))))))) td151e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td151c@t)))))) (set! td2847@tdd67@syntax-rules-macro tdd67@syntax-rules-macro) (set! tdd69@quasiquote-macro (let ((td1535@datum '#f) (td1551@quasicons* '#f) (td1553@quasicons '#f) (td1555@quasiappend '#f) (td1557@quasivector '#f) (td1559@vquasi '#f) (td155b@quasi '#f)) (begin (set! td1535@datum (lambda (td1636@x) (list (tdd03@scheme-stx 'quote) (tdb5c@mkstx td1636@x '() '() '())))) (set! td1551@quasicons* (lambda (td162e@x td162f@y) (let td1634@f ((td1632@x td162e@x)) (if (null? td1632@x) td162f@y (td1553@quasicons (car td1632@x) (td1634@f (cdr td1632@x))))))) (set! td1553@quasicons (lambda (td1608@x td1609@y) (let ((td160c@t td1609@y)) (let ((td160e@ls/false (tdd7b@syntax-dispatch td160c@t '(#(scheme-id quote) any)))) (if td160e@ls/false (apply (lambda (td1610@dy) (let ((td1612@t td1608@x)) (let ((td1614@ls/false (tdd7b@syntax-dispatch td1612@t '(#(scheme-id quote) any)))) (if td1614@ls/false (apply (lambda (td1616@dx) (list (tdd03@scheme-stx 'quote) (cons td1616@dx td1610@dy))) td1614@ls/false) (let ((td1618@t td1612@t)) (let ((td161a@ls/false (tdd7b@syntax-dispatch td1618@t '_))) (if td161a@ls/false (apply (lambda () (let ((td161c@t td1610@dy)) (let ((td161e@ls/false (tdd7b@syntax-dispatch td161c@t '()))) (if td161e@ls/false (apply (lambda () (list (tdd03@scheme-stx 'list) td1608@x)) td161e@ls/false) (let ((td1620@t td161c@t)) (let ((td1622@ls/false (tdd7b@syntax-dispatch td1620@t '_))) (if td1622@ls/false (apply (lambda () (list (tdd03@scheme-stx 'cons) td1608@x td1609@y)) td1622@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1620@t)))))))) td161a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1618@t)))))))) td160e@ls/false) (let ((td1624@t td160c@t)) (let ((td1626@ls/false (tdd7b@syntax-dispatch td1624@t '(#(scheme-id list) . each-any)))) (if td1626@ls/false (apply (lambda (td1628@stuff) (cons* (tdd03@scheme-stx 'list) td1608@x td1628@stuff)) td1626@ls/false) (let ((td162a@t td1624@t)) (let ((td162c@ls/false (tdd7b@syntax-dispatch td162a@t '_))) (if td162c@ls/false (apply (lambda () (list (tdd03@scheme-stx 'cons) td1608@x td1609@y)) td162c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td162a@t)))))))))))) (set! td1555@quasiappend (lambda (td15ee@x td15ef@y) (let ((td15f2@ls (let td15f6@f ((td15f4@x td15ee@x)) (if (null? td15f4@x) (let ((td15f8@t td15ef@y)) (let ((td15fa@ls/false (tdd7b@syntax-dispatch td15f8@t '(#(scheme-id quote) ())))) (if td15fa@ls/false (apply (lambda () '()) td15fa@ls/false) (let ((td15fc@t td15f8@t)) (let ((td15fe@ls/false (tdd7b@syntax-dispatch td15fc@t '_))) (if td15fe@ls/false (apply (lambda () (list td15ef@y)) td15fe@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td15fc@t))))))) (let ((td1600@t (car td15f4@x))) (let ((td1602@ls/false (tdd7b@syntax-dispatch td1600@t '(#(scheme-id quote) ())))) (if td1602@ls/false (apply (lambda () (td15f6@f (cdr td15f4@x))) td1602@ls/false) (let ((td1604@t td1600@t)) (let ((td1606@ls/false (tdd7b@syntax-dispatch td1604@t '_))) (if td1606@ls/false (apply (lambda () (cons (car td15f4@x) (td15f6@f (cdr td15f4@x)))) td1606@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1604@t))))))))))) (if (null? td15f2@ls) (list (tdd03@scheme-stx 'quote) '()) (if (null? (cdr td15f2@ls)) (car td15f2@ls) (cons* (tdd03@scheme-stx 'append) td15f2@ls)))))) (set! td1557@quasivector (lambda (td15bc@x) (let ((td15be@pat-x td15bc@x)) (let ((td15c0@t td15be@pat-x)) (let ((td15c2@ls/false (tdd7b@syntax-dispatch td15c0@t '(#(scheme-id quote) each-any)))) (if td15c2@ls/false (apply (lambda (td15c4@x*) (list (tdd03@scheme-stx 'quote) (list->vector td15c4@x*))) td15c2@ls/false) (let ((td15c6@t td15c0@t)) (let ((td15c8@ls/false (tdd7b@syntax-dispatch td15c6@t '_))) (if td15c8@ls/false (apply (lambda () (let td15d0@f ((td15ca@x td15bc@x) (td15cb@k (lambda (td15ce@ls) (cons* (tdd03@scheme-stx 'vector) td15ce@ls)))) (let ((td15d2@t td15ca@x)) (let ((td15d4@ls/false (tdd7b@syntax-dispatch td15d2@t '(#(scheme-id quote) each-any)))) (if td15d4@ls/false (apply (lambda (td15d6@x*) (td15cb@k (map (lambda (td15d8@x) (list (tdd03@scheme-stx 'quote) td15d8@x)) td15d6@x*))) td15d4@ls/false) (let ((td15da@t td15d2@t)) (let ((td15dc@ls/false (tdd7b@syntax-dispatch td15da@t '(#(scheme-id list) . each-any)))) (if td15dc@ls/false (apply (lambda (td15de@x*) (td15cb@k td15de@x*)) td15dc@ls/false) (let ((td15e0@t td15da@t)) (let ((td15e2@ls/false (tdd7b@syntax-dispatch td15e0@t '(#(scheme-id cons) any any)))) (if td15e2@ls/false (apply (lambda (td15e4@x td15e5@y) (td15d0@f td15e5@y (lambda (td15e8@ls) (td15cb@k (cons td15e4@x td15e8@ls))))) td15e2@ls/false) (let ((td15ea@t td15e0@t)) (let ((td15ec@ls/false (tdd7b@syntax-dispatch td15ea@t '_))) (if td15ec@ls/false (apply (lambda () (list (tdd03@scheme-stx 'list->vector) td15be@pat-x)) td15ec@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td15ea@t))))))))))))))) td15c8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td15c6@t)))))))))) (set! td1559@vquasi (lambda (td159a@p td159b@lev) (let ((td159e@t td159a@p)) (let ((td15a0@ls/false (tdd7b@syntax-dispatch td159e@t '(any . any)))) (if td15a0@ls/false (apply (lambda (td15a2@p td15a3@q) (let ((td15a6@t td15a2@p)) (let ((td15a8@ls/false (tdd7b@syntax-dispatch td15a6@t '(#(scheme-id unquote) . each-any)))) (if td15a8@ls/false (apply (lambda (td15aa@p) (if (= td159b@lev '0) (td1551@quasicons* td15aa@p (td1559@vquasi td15a3@q td159b@lev)) (td1553@quasicons (td1553@quasicons (td1535@datum 'unquote) (td155b@quasi td15aa@p (- td159b@lev '1))) (td1559@vquasi td15a3@q td159b@lev)))) td15a8@ls/false) (let ((td15ac@t td15a6@t)) (let ((td15ae@ls/false (tdd7b@syntax-dispatch td15ac@t '(#(scheme-id unquote-splicing) . each-any)))) (if td15ae@ls/false (apply (lambda (td15b0@p) (if (= td159b@lev '0) (td1555@quasiappend td15b0@p (td1559@vquasi td15a3@q td159b@lev)) (td1553@quasicons (td1553@quasicons (td1535@datum 'unquote-splicing) (td155b@quasi td15b0@p (- td159b@lev '1))) (td1559@vquasi td15a3@q td159b@lev)))) td15ae@ls/false) (let ((td15b2@t td15ac@t)) (let ((td15b4@ls/false (tdd7b@syntax-dispatch td15b2@t 'any))) (if td15b4@ls/false (apply (lambda (td15b6@p) (td1553@quasicons (td155b@quasi td15b6@p td159b@lev) (td1559@vquasi td15a3@q td159b@lev))) td15b4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td15b2@t))))))))))) td15a0@ls/false) (let ((td15b8@t td159e@t)) (let ((td15ba@ls/false (tdd7b@syntax-dispatch td15b8@t '()))) (if td15ba@ls/false (apply (lambda () (list (tdd03@scheme-stx 'quote) '())) td15ba@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td15b8@t))))))))) (set! td155b@quasi (lambda (td1564@p td1565@lev) (let ((td1568@t td1564@p)) (let ((td156a@ls/false (tdd7b@syntax-dispatch td1568@t '(#(scheme-id unquote) any)))) (if td156a@ls/false (apply (lambda (td156c@p) (if (= td1565@lev '0) td156c@p (td1553@quasicons (td1535@datum 'unquote) (td155b@quasi (list td156c@p) (- td1565@lev '1))))) td156a@ls/false) (let ((td156e@t td1568@t)) (let ((td1570@ls/false (tdd7b@syntax-dispatch td156e@t '((#(scheme-id unquote) . each-any) . any)))) (if td1570@ls/false (apply (lambda (td1572@p td1573@q) (if (= td1565@lev '0) (td1551@quasicons* td1572@p (td155b@quasi td1573@q td1565@lev)) (td1553@quasicons (td1553@quasicons (td1535@datum 'unquote) (td155b@quasi td1572@p (- td1565@lev '1))) (td155b@quasi td1573@q td1565@lev)))) td1570@ls/false) (let ((td1576@t td156e@t)) (let ((td1578@ls/false (tdd7b@syntax-dispatch td1576@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if td1578@ls/false (apply (lambda (td157a@p td157b@q) (if (= td1565@lev '0) (td1555@quasiappend td157a@p (td155b@quasi td157b@q td1565@lev)) (td1553@quasicons (td1553@quasicons (td1535@datum 'unquote-splicing) (td155b@quasi td157a@p (- td1565@lev '1))) (td155b@quasi td157b@q td1565@lev)))) td1578@ls/false) (let ((td157e@t td1576@t)) (let ((td1580@ls/false (tdd7b@syntax-dispatch td157e@t '(#(scheme-id quasiquote) any)))) (if td1580@ls/false (apply (lambda (td1582@p) (td1553@quasicons (td1535@datum 'quasiquote) (td155b@quasi (list td1582@p) (+ td1565@lev '1)))) td1580@ls/false) (let ((td1584@t td157e@t)) (let ((td1586@ls/false (tdd7b@syntax-dispatch td1584@t '(any . any)))) (if td1586@ls/false (apply (lambda (td1588@p td1589@q) (td1553@quasicons (td155b@quasi td1588@p td1565@lev) (td155b@quasi td1589@q td1565@lev))) td1586@ls/false) (let ((td158c@t td1584@t)) (let ((td158e@ls/false (tdd7b@syntax-dispatch td158c@t '#(vector each-any)))) (if (and td158e@ls/false (apply (lambda (td1590@x) (not (tdb40@stx? td1590@x))) td158e@ls/false)) (apply (lambda (td1592@x) (td1557@quasivector (td1559@vquasi td1592@x td1565@lev))) td158e@ls/false) (let ((td1594@t td158c@t)) (let ((td1596@ls/false (tdd7b@syntax-dispatch td1594@t 'any))) (if td1596@ls/false (apply (lambda (td1598@p) (list (tdd03@scheme-stx 'quote) td1598@p)) td1596@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1594@t)))))))))))))))))))))))) (lambda (td155c@x) (let ((td155e@t td155c@x)) (let ((td1560@ls/false (tdd7b@syntax-dispatch td155e@t '(_ any)))) (if td1560@ls/false (apply (lambda (td1562@e) (td155b@quasi td1562@e '0)) td1560@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td155e@t)))))))) (set! td2848@tdd69@quasiquote-macro tdd69@quasiquote-macro) (set! tdd6b@quasisyntax-macro (let ((td1639@quasi '#f)) (begin (set! td1639@quasi (lambda (td1654@p td1655@lev) (let ((td1658@t td1654@p)) (let ((td165a@ls/false (tdd7b@syntax-dispatch td1658@t '(#(scheme-id unsyntax) any)))) (if td165a@ls/false (apply (lambda (td165c@p) (if (= td1655@lev '0) (let ((td165e@g (gensym))) (values (list td165e@g) (list td165c@p) td165e@g)) (call-with-values (lambda () (td1639@quasi td165c@p (- td1655@lev '1))) (lambda (td1666@td1661 td1667@td1663 td1668@td1665) (let ((td166c@p td1668@td1665) (td166d@rhs* td1667@td1663) (td166e@lhs* td1666@td1661)) (values td166e@lhs* td166d@rhs* (list 'unsyntax td166c@p))))))) td165a@ls/false) (let ((td1672@t td1658@t)) (let ((td1674@ls/false (tdd7b@syntax-dispatch td1672@t '#(scheme-id unsyntax)))) (if (and td1674@ls/false (apply (lambda () (= td1655@lev '0)) td1674@ls/false)) (apply (lambda () (tde5b@syntax-violation '#f '"incorrect use of unsyntax" td1654@p)) td1674@ls/false) (let ((td1676@t td1672@t)) (let ((td1678@ls/false (tdd7b@syntax-dispatch td1676@t '((#(scheme-id unsyntax) . each-any) . any)))) (if td1678@ls/false (apply (lambda (td167a@p* td167b@q) (call-with-values (lambda () (td1639@quasi td167b@q td1655@lev)) (lambda (td1684@td167f td1685@td1681 td1686@td1683) (let ((td168a@q td1686@td1683) (td168b@rhs* td1685@td1681) (td168c@lhs* td1684@td167f)) (if (= td1655@lev '0) (let ((td1690@g* (map (lambda (td1692@x) (gensym)) td167a@p*))) (values (append td1690@g* td168c@lhs*) (append td167a@p* td168b@rhs*) (append td1690@g* td168a@q))) (call-with-values (lambda () (td1639@quasi td167a@p* (- td1655@lev '1))) (lambda (td169a@td1695 td169b@td1697 td169c@td1699) (let ((td16a0@p* td169c@td1699) (td16a1@rhs2* td169b@td1697) (td16a2@lhs2* td169a@td1695)) (values (append td16a2@lhs2* td168c@lhs*) (append td16a1@rhs2* td168b@rhs*) (cons (cons 'unsyntax td16a0@p*) td168a@q)))))))))) td1678@ls/false) (let ((td16a6@t td1676@t)) (let ((td16a8@ls/false (tdd7b@syntax-dispatch td16a6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if td16a8@ls/false (apply (lambda (td16aa@p* td16ab@q) (call-with-values (lambda () (td1639@quasi td16ab@q td1655@lev)) (lambda (td16b4@td16af td16b5@td16b1 td16b6@td16b3) (let ((td16ba@q td16b6@td16b3) (td16bb@rhs* td16b5@td16b1) (td16bc@lhs* td16b4@td16af)) (if (= td1655@lev '0) (let ((td16c0@g* (map (lambda (td16c2@x) (gensym)) td16aa@p*))) (values (append (map (lambda (td16c4@g) (cons td16c4@g '(...))) td16c0@g*) td16bc@lhs*) (append td16aa@p* td16bb@rhs*) (append (apply append (map (lambda (td16c6@g) (cons td16c6@g '(...))) td16c0@g*)) td16ba@q))) (call-with-values (lambda () (td1639@quasi td16aa@p* (- td1655@lev '1))) (lambda (td16ce@td16c9 td16cf@td16cb td16d0@td16cd) (let ((td16d4@p* td16d0@td16cd) (td16d5@rhs2* td16cf@td16cb) (td16d6@lhs2* td16ce@td16c9)) (values (append td16d6@lhs2* td16bc@lhs*) (append td16d5@rhs2* td16bb@rhs*) (cons (cons 'unsyntax-splicing td16d4@p*) td16ba@q)))))))))) td16a8@ls/false) (let ((td16da@t td16a6@t)) (let ((td16dc@ls/false (tdd7b@syntax-dispatch td16da@t '#(scheme-id unsyntax-splicing)))) (if (and td16dc@ls/false (apply (lambda () (= td1655@lev '0)) td16dc@ls/false)) (apply (lambda () (tde5b@syntax-violation '#f '"incorrect use of unsyntax-splicing" td1654@p)) td16dc@ls/false) (let ((td16de@t td16da@t)) (let ((td16e0@ls/false (tdd7b@syntax-dispatch td16de@t '(#(scheme-id quasisyntax) any)))) (if td16e0@ls/false (apply (lambda (td16e2@p) (call-with-values (lambda () (td1639@quasi td16e2@p (+ td1655@lev '1))) (lambda (td16ea@td16e5 td16eb@td16e7 td16ec@td16e9) (let ((td16f0@p td16ec@td16e9) (td16f1@rhs* td16eb@td16e7) (td16f2@lhs* td16ea@td16e5)) (values td16f2@lhs* td16f1@rhs* (list 'quasisyntax td16f0@p)))))) td16e0@ls/false) (let ((td16f6@t td16de@t)) (let ((td16f8@ls/false (tdd7b@syntax-dispatch td16f6@t '(any . any)))) (if td16f8@ls/false (apply (lambda (td16fa@p td16fb@q) (call-with-values (lambda () (td1639@quasi td16fa@p td1655@lev)) (lambda (td170a@td16ff td170b@td1701 td170c@td1703) (call-with-values (lambda () (td1639@quasi td16fb@q td1655@lev)) (lambda (td1710@td1705 td1711@td1707 td1712@td1709) (let ((td1716@q td1712@td1709) (td1717@rhs2* td1711@td1707) (td1718@lhs2* td1710@td1705) (td1719@p td170c@td1703) (td171a@rhs* td170b@td1701) (td171b@lhs* td170a@td16ff)) (values (append td1718@lhs2* td171b@lhs*) (append td1717@rhs2* td171a@rhs*) (cons td1719@p td1716@q)))))))) td16f8@ls/false) (let ((td1722@t td16f6@t)) (let ((td1724@ls/false (tdd7b@syntax-dispatch td1722@t '#(vector each-any)))) (if td1724@ls/false (apply (lambda (td1726@x*) (call-with-values (lambda () (td1639@quasi td1726@x* td1655@lev)) (lambda (td172e@td1729 td172f@td172b td1730@td172d) (let ((td1734@x* td1730@td172d) (td1735@rhs* td172f@td172b) (td1736@lhs* td172e@td1729)) (values td1736@lhs* td1735@rhs* (list->vector td1734@x*)))))) td1724@ls/false) (let ((td173a@t td1722@t)) (let ((td173c@ls/false (tdd7b@syntax-dispatch td173a@t '_))) (if td173c@ls/false (apply (lambda () (values '() '() td1654@p)) td173c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td173a@t)))))))))))))))))))))))))))))) (lambda (td163a@x) (let ((td163c@t td163a@x)) (let ((td163e@ls/false (tdd7b@syntax-dispatch td163c@t '(_ any)))) (if td163e@ls/false (apply (lambda (td1640@e) (call-with-values (lambda () (td1639@quasi td1640@e '0)) (lambda (td1648@td1643 td1649@td1645 td164a@td1647) (let ((td164e@v td164a@td1647) (td164f@rhs* td1649@td1645) (td1650@lhs* td1648@td1643)) (tdd31@bless (list 'syntax-case (cons 'list td164f@rhs*) '() (list td1650@lhs* (list 'syntax td164e@v)))))))) td163e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td163c@t)))))))) (set! td2849@tdd6b@quasisyntax-macro tdd6b@quasisyntax-macro) (set! tdd6d@define-struct-macro (lambda (td173e@stx) (tde5b@syntax-violation '#f '"define-struct not supported" td173e@stx))) (set! td284a@tdd6d@define-struct-macro tdd6d@define-struct-macro) (set! tdd6f@define-record-type-macro (lambda (td1740@x) (let ((td1743@id '#f) (td1745@get-record-name '#f) (td1747@get-record-constructor-name '#f) (td1749@get-record-predicate-name '#f) (td174b@get-clause '#f) (td174d@foo-rtd-code '#f) (td174f@parent-rtd-code '#f) (td1751@parent-rcd-code '#f) (td1753@foo-rcd-code '#f) (td1755@get-protocol-code '#f) (td1757@get-fields '#f) (td1759@get-mutator-indices '#f) (td175b@get-mutators '#f) (td175d@get-accessors '#f) (td175f@enumerate '#f) (td1761@do-define-record '#f) (td1763@verify-clauses '#f)) (begin (set! td1743@id (lambda (td1936@ctxt . td1938@str*) (tde5f@datum->syntax td1936@ctxt (string->symbol (apply string-append (map (lambda (td193a@x) (if (symbol? td193a@x) (symbol->string td193a@x) (if (string? td193a@x) td193a@x (assertion-violation 'define-record-type '"BUG")))) td1938@str*)))))) (set! td1745@get-record-name (lambda (td1924@spec) (let ((td1926@t td1924@spec)) (let ((td1928@ls/false (tdd7b@syntax-dispatch td1926@t '(any any any)))) (if td1928@ls/false (apply (lambda (td192a@foo td192b@make-foo td192c@foo?) td192a@foo) td1928@ls/false) (let ((td1930@t td1926@t)) (let ((td1932@ls/false (tdd7b@syntax-dispatch td1930@t 'any))) (if td1932@ls/false (apply (lambda (td1934@foo) td1934@foo) td1932@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1930@t))))))))) (set! td1747@get-record-constructor-name (lambda (td1910@spec) (let ((td1912@t td1910@spec)) (let ((td1914@ls/false (tdd7b@syntax-dispatch td1912@t '(any any any)))) (if td1914@ls/false (apply (lambda (td1916@foo td1917@make-foo td1918@foo?) td1917@make-foo) td1914@ls/false) (let ((td191c@t td1912@t)) (let ((td191e@ls/false (tdd7b@syntax-dispatch td191c@t 'any))) (if (and td191e@ls/false (apply (lambda (td1920@foo) (tdb74@id? td1920@foo)) td191e@ls/false)) (apply (lambda (td1922@foo) (td1743@id td1922@foo '"make-" (tdb88@stx->datum td1922@foo))) td191e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td191c@t))))))))) (set! td1749@get-record-predicate-name (lambda (td18fc@spec) (let ((td18fe@t td18fc@spec)) (let ((td1900@ls/false (tdd7b@syntax-dispatch td18fe@t '(any any any)))) (if td1900@ls/false (apply (lambda (td1902@foo td1903@make-foo td1904@foo?) td1904@foo?) td1900@ls/false) (let ((td1908@t td18fe@t)) (let ((td190a@ls/false (tdd7b@syntax-dispatch td1908@t 'any))) (if (and td190a@ls/false (apply (lambda (td190c@foo) (tdb74@id? td190c@foo)) td190a@ls/false)) (apply (lambda (td190e@foo) (td1743@id td190e@foo (tdb88@stx->datum td190e@foo) '"?")) td190a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1908@t))))))))) (set! td174b@get-clause (lambda (td18ea@id td18eb@ls) (let ((td18ee@t td18eb@ls)) (let ((td18f0@ls/false (tdd7b@syntax-dispatch td18ee@t '()))) (if td18f0@ls/false (apply (lambda () '#f) td18f0@ls/false) (let ((td18f2@t td18ee@t)) (let ((td18f4@ls/false (tdd7b@syntax-dispatch td18f2@t '((any . any) . any)))) (if td18f4@ls/false (apply (lambda (td18f6@x td18f7@rest td18f8@ls) (if (tdb7a@free-id=? (tdd31@bless td18ea@id) td18f6@x) (cons td18f6@x td18f7@rest) (td174b@get-clause td18ea@id td18f8@ls))) td18f4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18f2@t))))))))) (set! td174d@foo-rtd-code (lambda (td1898@name td1899@clause* td189a@parent-rtd-code) (let ((td189f@convert-field-spec* '#f)) (begin (set! td189f@convert-field-spec* (lambda (td18d0@ls) (list->vector (map (lambda (td18d2@x) (let ((td18d4@t td18d2@x)) (let ((td18d6@ls/false (tdd7b@syntax-dispatch td18d4@t '(#(scheme-id mutable) any . any)))) (if td18d6@ls/false (apply (lambda (td18d8@name td18d9@rest) (list 'mutable td18d8@name)) td18d6@ls/false) (let ((td18dc@t td18d4@t)) (let ((td18de@ls/false (tdd7b@syntax-dispatch td18dc@t '(#(scheme-id immutable) any . any)))) (if td18de@ls/false (apply (lambda (td18e0@name td18e1@rest) (list 'immutable td18e0@name)) td18de@ls/false) (let ((td18e4@t td18dc@t)) (let ((td18e6@ls/false (tdd7b@syntax-dispatch td18e4@t 'any))) (if td18e6@ls/false (apply (lambda (td18e8@name) (list 'immutable td18e8@name)) td18e6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18e4@t))))))))))) td18d0@ls)))) (let ((td18a0@uid-code (let ((td18a8@t (td174b@get-clause 'nongenerative td1899@clause*))) (let ((td18aa@ls/false (tdd7b@syntax-dispatch td18a8@t '(_)))) (if td18aa@ls/false (apply (lambda () (list 'quote (gensym))) td18aa@ls/false) (let ((td18ac@t td18a8@t)) (let ((td18ae@ls/false (tdd7b@syntax-dispatch td18ac@t '(_ any)))) (if td18ae@ls/false (apply (lambda (td18b0@uid) (list 'quote td18b0@uid)) td18ae@ls/false) (let ((td18b2@t td18ac@t)) (let ((td18b4@ls/false (tdd7b@syntax-dispatch td18b2@t '_))) (if td18b4@ls/false (apply (lambda () '#f) td18b4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18b2@t))))))))))) (td18a1@sealed? (let ((td18b6@t (td174b@get-clause 'sealed td1899@clause*))) (let ((td18b8@ls/false (tdd7b@syntax-dispatch td18b6@t '(_ #(atom #t))))) (if td18b8@ls/false (apply (lambda () '#t) td18b8@ls/false) (let ((td18ba@t td18b6@t)) (let ((td18bc@ls/false (tdd7b@syntax-dispatch td18ba@t '_))) (if td18bc@ls/false (apply (lambda () '#f) td18bc@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18ba@t)))))))) (td18a2@opaque? (let ((td18be@t (td174b@get-clause 'opaque td1899@clause*))) (let ((td18c0@ls/false (tdd7b@syntax-dispatch td18be@t '(_ #(atom #t))))) (if td18c0@ls/false (apply (lambda () '#t) td18c0@ls/false) (let ((td18c2@t td18be@t)) (let ((td18c4@ls/false (tdd7b@syntax-dispatch td18c2@t '_))) (if td18c4@ls/false (apply (lambda () '#f) td18c4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18c2@t)))))))) (td18a3@fields (let ((td18c6@t (td174b@get-clause 'fields td1899@clause*))) (let ((td18c8@ls/false (tdd7b@syntax-dispatch td18c6@t '(_ . each-any)))) (if td18c8@ls/false (apply (lambda (td18ca@field-spec*) (list 'quote (td189f@convert-field-spec* td18ca@field-spec*))) td18c8@ls/false) (let ((td18cc@t td18c6@t)) (let ((td18ce@ls/false (tdd7b@syntax-dispatch td18cc@t '_))) (if td18ce@ls/false (apply (lambda () ''#()) td18ce@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td18cc@t))))))))) (tdd31@bless (list 'make-record-type-descriptor (list 'quote td1898@name) td189a@parent-rtd-code td18a0@uid-code td18a1@sealed? td18a2@opaque? td18a3@fields))))))) (set! td174f@parent-rtd-code (lambda (td1880@clause*) (let ((td1882@t (td174b@get-clause 'parent td1880@clause*))) (let ((td1884@ls/false (tdd7b@syntax-dispatch td1882@t '(_ any)))) (if td1884@ls/false (apply (lambda (td1886@name) (list 'record-type-descriptor td1886@name)) td1884@ls/false) (let ((td1888@t td1882@t)) (let ((td188a@ls/false (tdd7b@syntax-dispatch td1888@t '#(atom #f)))) (if td188a@ls/false (apply (lambda () (let ((td188c@t (td174b@get-clause 'parent-rtd td1880@clause*))) (let ((td188e@ls/false (tdd7b@syntax-dispatch td188c@t '(_ any any)))) (if td188e@ls/false (apply (lambda (td1890@rtd td1891@rcd) td1890@rtd) td188e@ls/false) (let ((td1894@t td188c@t)) (let ((td1896@ls/false (tdd7b@syntax-dispatch td1894@t '#(atom #f)))) (if td1896@ls/false (apply (lambda () '#f) td1896@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1894@t)))))))) td188a@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1888@t))))))))) (set! td1751@parent-rcd-code (lambda (td1868@clause*) (let ((td186a@t (td174b@get-clause 'parent td1868@clause*))) (let ((td186c@ls/false (tdd7b@syntax-dispatch td186a@t '(_ any)))) (if td186c@ls/false (apply (lambda (td186e@name) (list 'record-constructor-descriptor td186e@name)) td186c@ls/false) (let ((td1870@t td186a@t)) (let ((td1872@ls/false (tdd7b@syntax-dispatch td1870@t '#(atom #f)))) (if td1872@ls/false (apply (lambda () (let ((td1874@t (td174b@get-clause 'parent-rtd td1868@clause*))) (let ((td1876@ls/false (tdd7b@syntax-dispatch td1874@t '(_ any any)))) (if td1876@ls/false (apply (lambda (td1878@rtd td1879@rcd) td1879@rcd) td1876@ls/false) (let ((td187c@t td1874@t)) (let ((td187e@ls/false (tdd7b@syntax-dispatch td187c@t '#(atom #f)))) (if td187e@ls/false (apply (lambda () '#f) td187e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td187c@t)))))))) td1872@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1870@t))))))))) (set! td1753@foo-rcd-code (lambda (td1860@clause* td1861@foo-rtd td1862@protocol td1863@parent-rcd-code) (list 'make-record-constructor-descriptor td1861@foo-rtd td1863@parent-rcd-code td1862@protocol))) (set! td1755@get-protocol-code (lambda (td1854@clause*) (let ((td1856@t (td174b@get-clause 'protocol td1854@clause*))) (let ((td1858@ls/false (tdd7b@syntax-dispatch td1856@t '(_ any)))) (if td1858@ls/false (apply (lambda (td185a@expr) td185a@expr) td1858@ls/false) (let ((td185c@t td1856@t)) (let ((td185e@ls/false (tdd7b@syntax-dispatch td185c@t '_))) (if td185e@ls/false (apply (lambda () '#f) td185e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td185c@t))))))))) (set! td1757@get-fields (lambda (td1842@clause*) (let ((td1844@t td1842@clause*)) (let ((td1846@ls/false (tdd7b@syntax-dispatch td1844@t '()))) (if td1846@ls/false (apply (lambda () '()) td1846@ls/false) (let ((td1848@t td1844@t)) (let ((td184a@ls/false (tdd7b@syntax-dispatch td1848@t '((#(scheme-id fields) . each-any) . _)))) (if td184a@ls/false (apply (lambda (td184c@f*) td184c@f*) td184a@ls/false) (let ((td184e@t td1848@t)) (let ((td1850@ls/false (tdd7b@syntax-dispatch td184e@t '(_ . any)))) (if td1850@ls/false (apply (lambda (td1852@rest) (td1757@get-fields td1852@rest)) td1850@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td184e@t)))))))))))) (set! td1759@get-mutator-indices (lambda (td182a@fields) (let td1830@f ((td182c@fields td182a@fields) (td182d@i '0)) (let ((td1832@t td182c@fields)) (let ((td1834@ls/false (tdd7b@syntax-dispatch td1832@t '()))) (if td1834@ls/false (apply (lambda () '()) td1834@ls/false) (let ((td1836@t td1832@t)) (let ((td1838@ls/false (tdd7b@syntax-dispatch td1836@t '((#(scheme-id mutable) . _) . any)))) (if td1838@ls/false (apply (lambda (td183a@rest) (cons td182d@i (td1830@f td183a@rest (+ td182d@i '1)))) td1838@ls/false) (let ((td183c@t td1836@t)) (let ((td183e@ls/false (tdd7b@syntax-dispatch td183c@t '(_ . any)))) (if td183e@ls/false (apply (lambda (td1840@rest) (td1830@f td1840@rest (+ td182d@i '1))) td183e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td183c@t))))))))))))) (set! td175b@get-mutators (lambda (td1800@foo td1801@fields) (let ((td1805@gen-name '#f)) (begin (set! td1805@gen-name (lambda (td1828@x) (tde5f@datum->syntax td1800@foo (string->symbol (string-append (symbol->string (tde61@syntax->datum td1800@foo)) '"-" (symbol->string (tde61@syntax->datum td1828@x)) '"-set!"))))) (let td1808@f ((td1806@fields td1801@fields)) (let ((td180a@t td1806@fields)) (let ((td180c@ls/false (tdd7b@syntax-dispatch td180a@t '()))) (if td180c@ls/false (apply (lambda () '()) td180c@ls/false) (let ((td180e@t td180a@t)) (let ((td1810@ls/false (tdd7b@syntax-dispatch td180e@t '((#(scheme-id mutable) any any any) . any)))) (if td1810@ls/false (apply (lambda (td1812@name td1813@accessor td1814@mutator td1815@rest) (cons td1814@mutator (td1808@f td1815@rest))) td1810@ls/false) (let ((td181a@t td180e@t)) (let ((td181c@ls/false (tdd7b@syntax-dispatch td181a@t '((#(scheme-id mutable) any) . any)))) (if td181c@ls/false (apply (lambda (td181e@name td181f@rest) (cons (td1805@gen-name td181e@name) (td1808@f td181f@rest))) td181c@ls/false) (let ((td1822@t td181a@t)) (let ((td1824@ls/false (tdd7b@syntax-dispatch td1822@t '(_ . any)))) (if td1824@ls/false (apply (lambda (td1826@rest) (td1808@f td1826@rest)) td1824@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1822@t)))))))))))))))))) (set! td175d@get-accessors (lambda (td17bc@foo td17bd@fields) (let ((td17c1@gen-name '#f)) (begin (set! td17c1@gen-name (lambda (td17fe@x) (tde5f@datum->syntax td17bc@foo (string->symbol (string-append (symbol->string (tde61@syntax->datum td17bc@foo)) '"-" (symbol->string (tde61@syntax->datum td17fe@x))))))) (map (lambda (td17c2@field) (let ((td17c4@t td17c2@field)) (let ((td17c6@ls/false (tdd7b@syntax-dispatch td17c4@t '(#(scheme-id mutable) any any any)))) (if (and td17c6@ls/false (apply (lambda (td17c8@name td17c9@accessor td17ca@mutator) (tdb74@id? td17c9@accessor)) td17c6@ls/false)) (apply (lambda (td17ce@name td17cf@accessor td17d0@mutator) td17cf@accessor) td17c6@ls/false) (let ((td17d4@t td17c4@t)) (let ((td17d6@ls/false (tdd7b@syntax-dispatch td17d4@t '(#(scheme-id immutable) any any)))) (if (and td17d6@ls/false (apply (lambda (td17d8@name td17d9@accessor) (tdb74@id? td17d9@accessor)) td17d6@ls/false)) (apply (lambda (td17dc@name td17dd@accessor) td17dd@accessor) td17d6@ls/false) (let ((td17e0@t td17d4@t)) (let ((td17e2@ls/false (tdd7b@syntax-dispatch td17e0@t '(#(scheme-id mutable) any)))) (if (and td17e2@ls/false (apply (lambda (td17e4@name) (tdb74@id? td17e4@name)) td17e2@ls/false)) (apply (lambda (td17e6@name) (td17c1@gen-name td17e6@name)) td17e2@ls/false) (let ((td17e8@t td17e0@t)) (let ((td17ea@ls/false (tdd7b@syntax-dispatch td17e8@t '(#(scheme-id immutable) any)))) (if (and td17ea@ls/false (apply (lambda (td17ec@name) (tdb74@id? td17ec@name)) td17ea@ls/false)) (apply (lambda (td17ee@name) (td17c1@gen-name td17ee@name)) td17ea@ls/false) (let ((td17f0@t td17e8@t)) (let ((td17f2@ls/false (tdd7b@syntax-dispatch td17f0@t 'any))) (if (and td17f2@ls/false (apply (lambda (td17f4@name) (tdb74@id? td17f4@name)) td17f2@ls/false)) (apply (lambda (td17f6@name) (td17c1@gen-name td17f6@name)) td17f2@ls/false) (let ((td17f8@t td17f0@t)) (let ((td17fa@ls/false (tdd7b@syntax-dispatch td17f8@t 'any))) (if td17fa@ls/false (apply (lambda (td17fc@others) (tde5b@syntax-violation '#f '"invalid field spec" td17c2@field)) td17fa@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td17f8@t)))))))))))))))))))) td17bd@fields))))) (set! td175f@enumerate (lambda (td17b4@ls) (let td17ba@f ((td17b6@ls td17b4@ls) (td17b7@i '0)) (if (null? td17b6@ls) '() (cons td17b7@i (td17ba@f (cdr td17b6@ls) (+ td17b7@i '1))))))) (set! td1761@do-define-record (lambda (td178c@namespec td178d@clause*) (let ((td1790@foo (td1745@get-record-name td178c@namespec))) (let ((td1792@foo-rtd (gensym))) (let ((td1794@foo-rcd (gensym))) (let ((td1796@protocol (gensym))) (let ((td1798@make-foo (td1747@get-record-constructor-name td178c@namespec))) (let ((td179a@fields (td1757@get-fields td178d@clause*))) (let ((td179c@idx* (td175f@enumerate td179a@fields))) (let ((td179e@foo-x* (td175d@get-accessors td1790@foo td179a@fields))) (let ((td17a0@set-foo-x!* (td175b@get-mutators td1790@foo td179a@fields))) (let ((td17a2@set-foo-idx* (td1759@get-mutator-indices td179a@fields))) (let ((td17a4@foo? (td1749@get-record-predicate-name td178c@namespec))) (let ((td17a6@foo-rtd-code (td174d@foo-rtd-code td1790@foo td178d@clause* (td174f@parent-rtd-code td178d@clause*)))) (let ((td17a8@foo-rcd-code (td1753@foo-rcd-code td178d@clause* td1792@foo-rtd td1796@protocol (td1751@parent-rcd-code td178d@clause*)))) (let ((td17aa@protocol-code (td1755@get-protocol-code td178d@clause*))) (tdd31@bless (cons 'begin (cons (list 'define td1792@foo-rtd td17a6@foo-rtd-code) (cons (list 'define td1796@protocol td17aa@protocol-code) (cons (list 'define td1794@foo-rcd td17a8@foo-rcd-code) (cons (list 'define-syntax td1790@foo (list 'list ''$rtd (list 'syntax td1792@foo-rtd) (list 'syntax td1794@foo-rcd))) (cons (list 'define td17a4@foo? (list 'record-predicate td1792@foo-rtd)) (cons (list 'define td1798@make-foo (list 'record-constructor td1794@foo-rcd)) (append (map (lambda (td17ac@foo-x td17ad@idx) (list 'define td17ac@foo-x (list 'record-accessor td1792@foo-rtd td17ad@idx))) td179e@foo-x* td179c@idx*) (map (lambda (td17b0@set-foo-x! td17b1@idx) (list 'define td17b0@set-foo-x! (list 'record-mutator td1792@foo-rtd td17b1@idx))) td17a0@set-foo-x!* td17a2@set-foo-idx*)))))))))))))))))))))))))) (set! td1763@verify-clauses (lambda (td176c@x td176d@cls*) (let ((td1771@valid-kwds '#f) (td1773@free-id-member? '#f)) (begin (set! td1771@valid-kwds (map tdd31@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! td1773@free-id-member? (lambda (td1788@x td1789@ls) (and (pair? td1789@ls) (or (tdb7a@free-id=? td1788@x (car td1789@ls)) (td1773@free-id-member? td1788@x (cdr td1789@ls)))))) (let td1778@f ((td1774@cls* td176d@cls*) (td1775@seen* '())) (if (not (null? td1774@cls*)) (let ((td177a@t (car td1774@cls*))) (let ((td177c@ls/false (tdd7b@syntax-dispatch td177a@t '(any . any)))) (if td177c@ls/false (apply (lambda (td177e@kwd td177f@rest) (if (or (not (tdb74@id? td177e@kwd)) (not (td1773@free-id-member? td177e@kwd td1771@valid-kwds))) (tde5b@syntax-violation '#f '"not a valid define-record-type keyword" td177e@kwd) (if (tdb80@bound-id-member? td177e@kwd td1775@seen*) (tde5b@syntax-violation '#f '"duplicate use of keyword " td176c@x td177e@kwd) (td1778@f (cdr td1774@cls*) (cons td177e@kwd td1775@seen*))))) td177c@ls/false) (let ((td1782@t td177a@t)) (let ((td1784@ls/false (tdd7b@syntax-dispatch td1782@t 'any))) (if td1784@ls/false (apply (lambda (td1786@cls) (tde5b@syntax-violation '#f '"malformed define-record-type clause" td1786@cls)) td1784@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1782@t))))))) (void))))))) (let ((td1764@t td1740@x)) (let ((td1766@ls/false (tdd7b@syntax-dispatch td1764@t '(_ any . each-any)))) (if td1766@ls/false (apply (lambda (td1768@namespec td1769@clause*) (begin (td1763@verify-clauses td1740@x td1769@clause*) (td1761@do-define-record td1768@namespec td1769@clause*))) td1766@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1764@t)))))))) (set! td284b@tdd6f@define-record-type-macro tdd6f@define-record-type-macro) (set! tdd71@define-condition-type-macro (lambda (td193c@x) (let ((td193f@mkname '#f)) (begin (set! td193f@mkname (lambda (td196c@name td196d@suffix) (tde5f@datum->syntax td196c@name (string->symbol (string-append (symbol->string (tde61@syntax->datum td196c@name)) td196d@suffix))))) (let ((td1940@t td193c@x)) (let ((td1942@ls/false (tdd7b@syntax-dispatch td1940@t '(any any any any any . #(each (any any)))))) (if (and td1942@ls/false (apply (lambda (td1944@ctxt td1945@name td1946@super td1947@constructor td1948@predicate td1949@field* td194a@accessor*) (and (tdb74@id? td1945@name) (tdb74@id? td1946@super) (tdb74@id? td1947@constructor) (tdb74@id? td1948@predicate) (for-all tdb74@id? td1949@field*) (for-all tdb74@id? td194a@accessor*))) td1942@ls/false)) (apply (lambda (td1952@ctxt td1953@name td1954@super td1955@constructor td1956@predicate td1957@field* td1958@accessor*) (let ((td1960@aux-accessor* (map (lambda (td1962@x) (gensym)) td1958@accessor*))) (tdd31@bless (cons 'begin (cons (cons 'define-record-type (cons (list td1953@name td1955@constructor (gensym)) (cons (list 'parent td1954@super) (cons (cons 'fields (map (lambda (td1964@field td1965@aux) (list 'immutable td1964@field td1965@aux)) td1957@field* td1960@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define td1956@predicate (list 'condition-predicate (list 'record-type-descriptor td1953@name))) (map (lambda (td1968@accessor td1969@aux) (list 'define td1968@accessor (list 'condition-accessor (list 'record-type-descriptor td1953@name) td1969@aux))) td1958@accessor* td1960@aux-accessor*))))))) td1942@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1940@t)))))))) (set! td284c@tdd71@define-condition-type-macro tdd71@define-condition-type-macro) (set! tdd73@incorrect-usage-macro (lambda (td1970@e) (tde5b@syntax-violation '#f '"incorrect usage of auxiliary keyword" td1970@e))) (set! td284d@tdd73@incorrect-usage-macro tdd73@incorrect-usage-macro) (set! tdd75@parameterize-macro (lambda (td1972@e) (let ((td1974@t td1972@e)) (let ((td1976@ls/false (tdd7b@syntax-dispatch td1974@t '(_ () any . each-any)))) (if td1976@ls/false (apply (lambda (td1978@b td1979@b*) (tdd31@bless (cons 'let (cons '() (cons td1978@b td1979@b*))))) td1976@ls/false) (let ((td197c@t td1974@t)) (let ((td197e@ls/false (tdd7b@syntax-dispatch td197c@t '(_ #(each (any any)) any . each-any)))) (if td197e@ls/false (apply (lambda (td1980@olhs* td1981@orhs* td1982@b td1983@b*) (let ((td1988@lhs* (tde49@generate-temporaries td1980@olhs*)) (td1989@rhs* (tde49@generate-temporaries td1981@orhs*))) (tdd31@bless (cons (list 'lambda (append td1988@lhs* td1989@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (td198c@lhs td198d@rhs) (list 'let (list (list 't (list td198c@lhs))) (list td198c@lhs td198d@rhs) (cons 'set! (cons td198d@rhs '(t))))) td1988@lhs* td1989@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons td1982@b td1983@b*))) '(swap)))))) (append td1980@olhs* td1981@orhs*))))) td197e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td197c@t))))))))) (set! td284e@tdd75@parameterize-macro tdd75@parameterize-macro) (set! tdd77@foreign-call-transformer (lambda (td1990@e td1991@r td1992@mr) (let ((td1996@t td1990@e)) (let ((td1998@ls/false (tdd7b@syntax-dispatch td1996@t '(_ any . each-any)))) (if td1998@ls/false (apply (lambda (td199a@name td199b@arg*) (cons 'foreign-call (cons (tdd9d@chi-expr td199a@name td1991@r td1992@mr) (tdd99@chi-expr* td199b@arg* td1991@r td1992@mr)))) td1998@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1996@t)))))) (set! td284f@tdd77@foreign-call-transformer tdd77@foreign-call-transformer) (set! tdd79@convert-pattern (lambda (td199e@pattern td199f@keys) (let ((td19a3@cvt* '#f) (td19a5@cvt '#f)) (begin (set! td19a3@cvt* (lambda (td1a42@p* td1a43@n td1a44@ids) (if (null? td1a42@p*) (values '() td1a44@ids) (call-with-values (lambda () (td19a3@cvt* (cdr td1a42@p*) td1a43@n td1a44@ids)) (lambda (td1a4c@td1a49 td1a4d@td1a4b) (let ((td1a50@ids td1a4d@td1a4b) (td1a51@y td1a4c@td1a49)) (call-with-values (lambda () (td19a5@cvt (car td1a42@p*) td1a43@n td1a50@ids)) (lambda (td1a58@td1a55 td1a59@td1a57) (let ((td1a5c@ids td1a59@td1a57) (td1a5d@x td1a58@td1a55)) (values (cons td1a5d@x td1a51@y) td1a5c@ids)))))))))) (set! td19a5@cvt (lambda (td19a6@p td19a7@n td19a8@ids) (let ((td19ac@t td19a6@p)) (let ((td19ae@ls/false (tdd7b@syntax-dispatch td19ac@t 'any))) (if (and td19ae@ls/false (apply (lambda (td19b0@id) (tdb74@id? td19b0@id)) td19ae@ls/false)) (apply (lambda (td19b2@id) (if (tdb80@bound-id-member? td19a6@p td199f@keys) (values (vector 'free-id td19a6@p) td19a8@ids) (if (tdb7a@free-id=? td19a6@p (tdd03@scheme-stx '_)) (values '_ td19a8@ids) (values 'any (cons (cons td19a6@p td19a7@n) td19a8@ids))))) td19ae@ls/false) (let ((td19b4@t td19ac@t)) (let ((td19b6@ls/false (tdd7b@syntax-dispatch td19b4@t '(any any)))) (if (and td19b6@ls/false (apply (lambda (td19b8@p td19b9@dots) (tdd7d@ellipsis? td19b9@dots)) td19b6@ls/false)) (apply (lambda (td19bc@p td19bd@dots) (call-with-values (lambda () (td19a5@cvt td19bc@p (+ td19a7@n '1) td19a8@ids)) (lambda (td19c4@td19c1 td19c5@td19c3) (let ((td19c8@ids td19c5@td19c3) (td19c9@p td19c4@td19c1)) (values (if (eq? td19c9@p 'any) 'each-any (vector 'each td19c9@p)) td19c8@ids))))) td19b6@ls/false) (let ((td19cc@t td19b4@t)) (let ((td19ce@ls/false (tdd7b@syntax-dispatch td19cc@t '(any any . #(each+ any () any))))) (if (and td19ce@ls/false (apply (lambda (td19d0@x td19d1@dots td19d2@ys td19d3@z) (tdd7d@ellipsis? td19d1@dots)) td19ce@ls/false)) (apply (lambda (td19d8@x td19d9@dots td19da@ys td19db@z) (call-with-values (lambda () (td19a5@cvt td19db@z td19a7@n td19a8@ids)) (lambda (td19e4@td19e1 td19e5@td19e3) (let ((td19e8@ids td19e5@td19e3) (td19e9@z td19e4@td19e1)) (call-with-values (lambda () (td19a3@cvt* td19da@ys td19a7@n td19e8@ids)) (lambda (td19f0@td19ed td19f1@td19ef) (let ((td19f4@ids td19f1@td19ef) (td19f5@ys td19f0@td19ed)) (call-with-values (lambda () (td19a5@cvt td19d8@x (+ td19a7@n '1) td19f4@ids)) (lambda (td19fc@td19f9 td19fd@td19fb) (let ((td1a00@ids td19fd@td19fb) (td1a01@x td19fc@td19f9)) (values (vector 'each+ td1a01@x (reverse td19f5@ys) td19e9@z) td1a00@ids))))))))))) td19ce@ls/false) (let ((td1a04@t td19cc@t)) (let ((td1a06@ls/false (tdd7b@syntax-dispatch td1a04@t '(any . any)))) (if td1a06@ls/false (apply (lambda (td1a08@x td1a09@y) (call-with-values (lambda () (td19a5@cvt td1a09@y td19a7@n td19a8@ids)) (lambda (td1a10@td1a0d td1a11@td1a0f) (let ((td1a14@ids td1a11@td1a0f) (td1a15@y td1a10@td1a0d)) (call-with-values (lambda () (td19a5@cvt td1a08@x td19a7@n td1a14@ids)) (lambda (td1a1c@td1a19 td1a1d@td1a1b) (let ((td1a20@ids td1a1d@td1a1b) (td1a21@x td1a1c@td1a19)) (values (cons td1a21@x td1a15@y) td1a20@ids)))))))) td1a06@ls/false) (let ((td1a24@t td1a04@t)) (let ((td1a26@ls/false (tdd7b@syntax-dispatch td1a24@t '()))) (if td1a26@ls/false (apply (lambda () (values '() td19a8@ids)) td1a26@ls/false) (let ((td1a28@t td1a24@t)) (let ((td1a2a@ls/false (tdd7b@syntax-dispatch td1a28@t '#(vector each-any)))) (if (and td1a2a@ls/false (apply (lambda (td1a2c@p) (not (tdb40@stx? td1a2c@p))) td1a2a@ls/false)) (apply (lambda (td1a2e@p) (call-with-values (lambda () (td19a5@cvt td1a2e@p td19a7@n td19a8@ids)) (lambda (td1a34@td1a31 td1a35@td1a33) (let ((td1a38@ids td1a35@td1a33) (td1a39@p td1a34@td1a31)) (values (vector 'vector td1a39@p) td1a38@ids))))) td1a2a@ls/false) (let ((td1a3c@t td1a28@t)) (let ((td1a3e@ls/false (tdd7b@syntax-dispatch td1a3c@t 'any))) (if td1a3e@ls/false (apply (lambda (td1a40@datum) (values (vector 'atom (tdb88@stx->datum td1a40@datum)) td19a8@ids)) td1a3e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1a3c@t)))))))))))))))))))))))) (td19a5@cvt td199e@pattern '0 '()))))) (set! td2850@tdd79@convert-pattern tdd79@convert-pattern) (set! tdd7b@syntax-dispatch (let ((td1a61@stx^ '#f) (td1a63@match-each '#f) (td1a65@match-each+ '#f) (td1a67@match-each-any '#f) (td1a69@match-empty '#f) (td1a6b@combine '#f) (td1a6d@match* '#f) (td1a6f@match '#f)) (begin (set! td1a61@stx^ (lambda (td1b3c@e td1b3d@m* td1b3e@s* td1b3f@ae*) (if (and (null? td1b3d@m*) (null? td1b3e@s*) (null? td1b3f@ae*)) td1b3c@e (tdb5c@mkstx td1b3c@e td1b3d@m* td1b3e@s* td1b3f@ae*)))) (set! td1a63@match-each (lambda (td1b1c@e td1b1d@p td1b1e@m* td1b1f@s* td1b20@ae*) (if (pair? td1b1c@e) (let ((td1b26@first (td1a6f@match (car td1b1c@e) td1b1d@p td1b1e@m* td1b1f@s* td1b20@ae* '()))) (and td1b26@first (let ((td1b28@rest (td1a63@match-each (cdr td1b1c@e) td1b1d@p td1b1e@m* td1b1f@s* td1b20@ae*))) (and td1b28@rest (cons td1b26@first td1b28@rest))))) (if (null? td1b1c@e) '() (if (tdb40@stx? td1b1c@e) (and (not (tdafa@top-marked? td1b1e@m*)) (call-with-values (lambda () (join-wraps td1b1e@m* td1b1f@s* td1b20@ae* td1b1c@e)) (lambda (td1b30@td1b2b td1b31@td1b2d td1b32@td1b2f) (let ((td1b36@ae* td1b32@td1b2f) (td1b37@s* td1b31@td1b2d) (td1b38@m* td1b30@td1b2b)) (td1a63@match-each (tdb42@stx-expr td1b1c@e) td1b1d@p td1b38@m* td1b37@s* td1b36@ae*))))) (if (td6b3@td587@annotation? td1b1c@e) (td1a63@match-each (td6b5@td58b@annotation-expression td1b1c@e) td1b1d@p td1b1e@m* td1b1f@s* td1b20@ae*) '#f)))))) (set! td1a65@match-each+ (lambda (td1adc@e td1add@x-pat td1ade@y-pat td1adf@z-pat td1ae0@m* td1ae1@s* td1ae2@ae* td1ae3@r) (let td1af4@f ((td1aec@e td1adc@e) (td1aed@m* td1ae0@m*) (td1aee@s* td1ae1@s*) (td1aef@ae* td1ae2@ae*)) (if (pair? td1aec@e) (call-with-values (lambda () (td1af4@f (cdr td1aec@e) td1aed@m* td1aee@s* td1aef@ae*)) (lambda (td1afc@td1af7 td1afd@td1af9 td1afe@td1afb) (let ((td1b02@r td1afe@td1afb) (td1b03@y-pat td1afd@td1af9) (td1b04@xr* td1afc@td1af7)) (if td1b02@r (if (null? td1b03@y-pat) (let ((td1b08@xr (td1a6f@match (car td1aec@e) td1add@x-pat td1aed@m* td1aee@s* td1aef@ae* '()))) (if td1b08@xr (values (cons td1b08@xr td1b04@xr*) td1b03@y-pat td1b02@r) (values '#f '#f '#f))) (values '() (cdr td1b03@y-pat) (td1a6f@match (car td1aec@e) (car td1b03@y-pat) td1aed@m* td1aee@s* td1aef@ae* td1b02@r))) (values '#f '#f '#f))))) (if (tdb40@stx? td1aec@e) (if (tdafa@top-marked? td1aed@m*) (values '() td1ade@y-pat (td1a6f@match td1aec@e td1adf@z-pat td1aed@m* td1aee@s* td1aef@ae* td1ae3@r)) (call-with-values (lambda () (join-wraps td1aed@m* td1aee@s* td1aef@ae* td1aec@e)) (lambda (td1b10@td1b0b td1b11@td1b0d td1b12@td1b0f) (let ((td1b16@ae* td1b12@td1b0f) (td1b17@s* td1b11@td1b0d) (td1b18@m* td1b10@td1b0b)) (td1af4@f (tdb42@stx-expr td1aec@e) td1b18@m* td1b17@s* td1b16@ae*))))) (if (td6b3@td587@annotation? td1aec@e) (td1af4@f (td6b5@td58b@annotation-expression td1aec@e) td1aed@m* td1aee@s* td1aef@ae*) (values '() td1ade@y-pat (td1a6f@match td1aec@e td1adf@z-pat td1aed@m* td1aee@s* td1aef@ae* td1ae3@r)))))))) (set! td1a67@match-each-any (lambda (td1ac0@e td1ac1@m* td1ac2@s* td1ac3@ae*) (if (pair? td1ac0@e) (let ((td1ac8@l (td1a67@match-each-any (cdr td1ac0@e) td1ac1@m* td1ac2@s* td1ac3@ae*))) (and td1ac8@l (cons (td1a61@stx^ (car td1ac0@e) td1ac1@m* td1ac2@s* td1ac3@ae*) td1ac8@l))) (if (null? td1ac0@e) '() (if (tdb40@stx? td1ac0@e) (and (not (tdafa@top-marked? td1ac1@m*)) (call-with-values (lambda () (join-wraps td1ac1@m* td1ac2@s* td1ac3@ae* td1ac0@e)) (lambda (td1ad0@td1acb td1ad1@td1acd td1ad2@td1acf) (let ((td1ad6@ae* td1ad2@td1acf) (td1ad7@s* td1ad1@td1acd) (td1ad8@m* td1ad0@td1acb)) (td1a67@match-each-any (tdb42@stx-expr td1ac0@e) td1ad8@m* td1ad7@s* td1ad6@ae*))))) (if (td6b3@td587@annotation? td1ac0@e) (td1a67@match-each-any (td6b5@td58b@annotation-expression td1ac0@e) td1ac1@m* td1ac2@s* td1ac3@ae*) '#f)))))) (set! td1a69@match-empty (lambda (td1aba@p td1abb@r) (if (null? td1aba@p) td1abb@r (if (eq? td1aba@p '_) td1abb@r (if (eq? td1aba@p 'any) (cons '() td1abb@r) (if (pair? td1aba@p) (td1a69@match-empty (car td1aba@p) (td1a69@match-empty (cdr td1aba@p) td1abb@r)) (if (eq? td1aba@p 'each-any) (cons '() td1abb@r) (let ((td1abe@t (vector-ref td1aba@p '0))) (if (memv td1abe@t '(each)) (td1a69@match-empty (vector-ref td1aba@p '1) td1abb@r) (if (memv td1abe@t '(each+)) (td1a69@match-empty (vector-ref td1aba@p '1) (td1a69@match-empty (reverse (vector-ref td1aba@p '2)) (td1a69@match-empty (vector-ref td1aba@p '3) td1abb@r))) (if (memv td1abe@t '(free-id atom)) td1abb@r (if (memv td1abe@t '(scheme-id atom)) td1abb@r (if (memv td1abe@t '(vector)) (td1a69@match-empty (vector-ref td1aba@p '1) td1abb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" td1aba@p)))))))))))))) (set! td1a6b@combine (lambda (td1ab6@r* td1ab7@r) (if (null? (car td1ab6@r*)) td1ab7@r (cons (map car td1ab6@r*) (td1a6b@combine (map cdr td1ab6@r*) td1ab7@r))))) (set! td1a6d@match* (lambda (td1a92@e td1a93@p td1a94@m* td1a95@s* td1a96@ae* td1a97@r) (if (null? td1a93@p) (and (null? td1a92@e) td1a97@r) (if (pair? td1a93@p) (and (pair? td1a92@e) (td1a6f@match (car td1a92@e) (car td1a93@p) td1a94@m* td1a95@s* td1a96@ae* (td1a6f@match (cdr td1a92@e) (cdr td1a93@p) td1a94@m* td1a95@s* td1a96@ae* td1a97@r))) (if (eq? td1a93@p 'each-any) (let ((td1a9e@l (td1a67@match-each-any td1a92@e td1a94@m* td1a95@s* td1a96@ae*))) (and td1a9e@l (cons td1a9e@l td1a97@r))) (let ((td1aa0@t (vector-ref td1a93@p '0))) (if (memv td1aa0@t '(each)) (if (null? td1a92@e) (td1a69@match-empty (vector-ref td1a93@p '1) td1a97@r) (let ((td1aa2@r* (td1a63@match-each td1a92@e (vector-ref td1a93@p '1) td1a94@m* td1a95@s* td1a96@ae*))) (and td1aa2@r* (td1a6b@combine td1aa2@r* td1a97@r)))) (if (memv td1aa0@t '(free-id)) (and (symbol? td1a92@e) (tdafa@top-marked? td1a94@m*) (tdb7a@free-id=? (td1a61@stx^ td1a92@e td1a94@m* td1a95@s* td1a96@ae*) (vector-ref td1a93@p '1)) td1a97@r) (if (memv td1aa0@t '(scheme-id)) (and (symbol? td1a92@e) (tdafa@top-marked? td1a94@m*) (tdb7a@free-id=? (td1a61@stx^ td1a92@e td1a94@m* td1a95@s* td1a96@ae*) (tdd03@scheme-stx (vector-ref td1a93@p '1))) td1a97@r) (if (memv td1aa0@t '(each+)) (call-with-values (lambda () (td1a65@match-each+ td1a92@e (vector-ref td1a93@p '1) (vector-ref td1a93@p '2) (vector-ref td1a93@p '3) td1a94@m* td1a95@s* td1a96@ae* td1a97@r)) (lambda (td1aaa@td1aa5 td1aab@td1aa7 td1aac@td1aa9) (let ((td1ab0@r td1aac@td1aa9) (td1ab1@y-pat td1aab@td1aa7) (td1ab2@xr* td1aaa@td1aa5)) (and td1ab0@r (null? td1ab1@y-pat) (if (null? td1ab2@xr*) (td1a69@match-empty (vector-ref td1a93@p '1) td1ab0@r) (td1a6b@combine td1ab2@xr* td1ab0@r)))))) (if (memv td1aa0@t '(atom)) (and (fast-equal? (vector-ref td1a93@p '1) (tdb86@strip td1a92@e td1a94@m*)) td1a97@r) (if (memv td1aa0@t '(vector)) (and (vector? td1a92@e) (td1a6f@match (vector->list td1a92@e) (vector-ref td1a93@p '1) td1a94@m* td1a95@s* td1a96@ae* td1a97@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" td1a93@p))))))))))))) (set! td1a6f@match (lambda (td1a74@e td1a75@p td1a76@m* td1a77@s* td1a78@ae* td1a79@r) (if (not td1a79@r) '#f (if (eq? td1a75@p '_) td1a79@r (if (eq? td1a75@p 'any) (cons (td1a61@stx^ td1a74@e td1a76@m* td1a77@s* td1a78@ae*) td1a79@r) (if (tdb40@stx? td1a74@e) (and (not (tdafa@top-marked? td1a76@m*)) (call-with-values (lambda () (join-wraps td1a76@m* td1a77@s* td1a78@ae* td1a74@e)) (lambda (td1a86@td1a81 td1a87@td1a83 td1a88@td1a85) (let ((td1a8c@ae* td1a88@td1a85) (td1a8d@s* td1a87@td1a83) (td1a8e@m* td1a86@td1a81)) (td1a6f@match (tdb42@stx-expr td1a74@e) td1a75@p td1a8e@m* td1a8d@s* td1a8c@ae* td1a79@r))))) (if (td6b3@td587@annotation? td1a74@e) (td1a6f@match (td6b5@td58b@annotation-expression td1a74@e) td1a75@p td1a76@m* td1a77@s* td1a78@ae* td1a79@r) (td1a6d@match* td1a74@e td1a75@p td1a76@m* td1a77@s* td1a78@ae* td1a79@r)))))))) (lambda (td1a70@e td1a71@p) (td1a6f@match td1a70@e td1a71@p '() '() '() '()))))) (set! td2851@tdd7b@syntax-dispatch tdd7b@syntax-dispatch) (set! tdd7d@ellipsis? (lambda (td1b44@x) (and (tdb74@id? td1b44@x) (tdb7a@free-id=? td1b44@x (tdd03@scheme-stx '...))))) (set! td2852@tdd7d@ellipsis? tdd7d@ellipsis?) (set! tdd7f@underscore? (lambda (td1b46@x) (and (tdb74@id? td1b46@x) (tdb7a@free-id=? td1b46@x (tdd03@scheme-stx '_))))) (set! td2853@tdd7f@underscore? tdd7f@underscore?) (set! tdd81@verify-literals (lambda (td1b48@lits td1b49@expr) (for-each (lambda (td1b4c@x) (if (or (not (tdb74@id? td1b4c@x)) (tdd7d@ellipsis? td1b4c@x) (tdd7f@underscore? td1b4c@x)) (tde5b@syntax-violation '#f '"invalid literal" td1b49@expr td1b4c@x) (void))) td1b48@lits))) (set! td2854@tdd81@verify-literals tdd81@verify-literals) (set! tdd83@syntax-case-transformer (let ((td1b4f@build-dispatch-call '#f) (td1b51@invalid-ids-error '#f) (td1b53@gen-clause '#f) (td1b55@gen-syntax-case '#f)) (begin (set! td1b4f@build-dispatch-call (lambda (td1bc0@pvars td1bc1@expr td1bc2@y td1bc3@r td1bc4@mr) (let ((td1bca@ids (map car td1bc0@pvars)) (td1bcb@levels (map cdr td1bc0@pvars))) (let ((td1bce@labels (map tdb00@gen-label td1bca@ids)) (td1bcf@new-vars (map tdafc@gen-lexical td1bca@ids))) (let ((td1bd2@body (tdd9d@chi-expr (tdb60@add-subst (tdb34@make-full-rib td1bca@ids td1bce@labels) td1bc1@expr) (append (map (lambda (td1bd4@label td1bd5@var td1bd6@level) (cons td1bd4@label (tdb8e@make-binding 'syntax (cons td1bd5@var td1bd6@level)))) td1bce@labels td1bcf@new-vars (map cdr td1bc0@pvars)) td1bc3@r) td1bc4@mr))) (list '(primitive apply) (tdad7@tda03@build-lambda '#f td1bcf@new-vars td1bd2@body) td1bc2@y)))))) (set! td1b51@invalid-ids-error (lambda (td1bb4@id* td1bb5@e td1bb6@class) (let td1bbe@find ((td1bba@id* td1bb4@id*) (td1bbb@ok* '())) (if (null? td1bba@id*) (tde5b@syntax-violation '#f '"invalid syntax" td1bb5@e) (if (tdb74@id? (car td1bba@id*)) (if (tdb80@bound-id-member? (car td1bba@id*) td1bbb@ok*) (tde57@syntax-error (car td1bba@id*) '"duplicate " td1bb6@class) (td1bbe@find (cdr td1bba@id*) (cons (car td1bba@id*) td1bbb@ok*))) (tde57@syntax-error (car td1bba@id*) '"invalid " td1bb6@class)))))) (set! td1b53@gen-clause (lambda (td1b8c@x td1b8d@keys td1b8e@clauses td1b8f@r td1b90@mr td1b91@pat td1b92@fender td1b93@expr) (call-with-values (lambda () (tdd79@convert-pattern td1b91@pat td1b8d@keys)) (lambda (td1ba0@td1b9d td1ba1@td1b9f) (let ((td1ba4@pvars td1ba1@td1b9f) (td1ba5@p td1ba0@td1b9d)) (if (not (tdb7e@distinct-bound-ids? (map car td1ba4@pvars))) (td1b51@invalid-ids-error (map car td1ba4@pvars) td1b91@pat '"pattern variable") (if (not (for-all (lambda (td1ba8@x) (not (tdd7d@ellipsis? (car td1ba8@x)))) td1ba4@pvars)) (tde5b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" td1b91@pat) (let ((td1baa@y (tdafc@gen-lexical 'tmp))) (let ((td1bac@test (if (eq? td1b92@fender '#t) td1baa@y (let ((td1bae@call (td1b4f@build-dispatch-call td1ba4@pvars td1b92@fender td1baa@y td1b8f@r td1b90@mr))) (list 'if td1baa@y td1bae@call (list 'quote '#f)))))) (let ((td1bb0@conseq (td1b4f@build-dispatch-call td1ba4@pvars td1b93@expr td1baa@y td1b8f@r td1b90@mr))) (let ((td1bb2@altern (td1b55@gen-syntax-case td1b8c@x td1b8d@keys td1b8e@clauses td1b8f@r td1b90@mr))) (list (tdad7@tda03@build-lambda '#f (list td1baa@y) (list 'if td1bac@test td1bb0@conseq td1bb2@altern)) (list '(primitive syntax-dispatch) td1b8c@x (list 'quote td1ba5@p)))))))))))))) (set! td1b55@gen-syntax-case (lambda (td1b6a@x td1b6b@keys td1b6c@clauses td1b6d@r td1b6e@mr) (if (null? td1b6c@clauses) (list '(primitive syntax-error) td1b6a@x) (let ((td1b74@t (car td1b6c@clauses))) (let ((td1b76@ls/false (tdd7b@syntax-dispatch td1b74@t '(any any)))) (if td1b76@ls/false (apply (lambda (td1b78@pat td1b79@expr) (if (and (tdb74@id? td1b78@pat) (not (tdb80@bound-id-member? td1b78@pat td1b6b@keys)) (not (tdd7d@ellipsis? td1b78@pat))) (if (tdb7a@free-id=? td1b78@pat (tdd03@scheme-stx '_)) (tdd9d@chi-expr td1b79@expr td1b6d@r td1b6e@mr) (let ((td1b7c@lab (tdb00@gen-label td1b78@pat)) (td1b7d@lex (tdafc@gen-lexical td1b78@pat))) (let ((td1b80@body (tdd9d@chi-expr (tdb60@add-subst (tdb34@make-full-rib (list td1b78@pat) (list td1b7c@lab)) td1b79@expr) (cons (cons td1b7c@lab (tdb8e@make-binding 'syntax (cons td1b7d@lex '0))) td1b6d@r) td1b6e@mr))) (list (tdad7@tda03@build-lambda '#f (list td1b7d@lex) td1b80@body) td1b6a@x)))) (td1b53@gen-clause td1b6a@x td1b6b@keys (cdr td1b6c@clauses) td1b6d@r td1b6e@mr td1b78@pat '#t td1b79@expr))) td1b76@ls/false) (let ((td1b82@t td1b74@t)) (let ((td1b84@ls/false (tdd7b@syntax-dispatch td1b82@t '(any any any)))) (if td1b84@ls/false (apply (lambda (td1b86@pat td1b87@fender td1b88@expr) (td1b53@gen-clause td1b6a@x td1b6b@keys (cdr td1b6c@clauses) td1b6d@r td1b6e@mr td1b86@pat td1b87@fender td1b88@expr)) td1b84@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1b82@t)))))))))) (lambda (td1b56@e td1b57@r td1b58@mr) (let ((td1b5c@t td1b56@e)) (let ((td1b5e@ls/false (tdd7b@syntax-dispatch td1b5c@t '(_ any each-any . each-any)))) (if td1b5e@ls/false (apply (lambda (td1b60@expr td1b61@keys td1b62@clauses) (begin (tdd81@verify-literals td1b61@keys td1b56@e) (let ((td1b66@x (tdafc@gen-lexical 'tmp))) (let ((td1b68@body (td1b55@gen-syntax-case td1b66@x td1b61@keys td1b62@clauses td1b57@r td1b58@mr))) (list (tdad7@tda03@build-lambda '#f (list td1b66@x) td1b68@body) (tdd9d@chi-expr td1b60@expr td1b57@r td1b58@mr)))))) td1b5e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1b5c@t)))))))) (set! td2855@tdd83@syntax-case-transformer tdd83@syntax-case-transformer) (set! tdd85@ellipsis-map (lambda (td1bda@proc td1bdb@ls . td1bde@ls*) (let ((td1be1@who '#f)) (begin (set! td1be1@who '...) (begin (if (not (list? td1bdb@ls)) (assertion-violation td1be1@who '"not a list" td1bdb@ls) (void)) (if (not (null? td1bde@ls*)) (let ((td1be2@n (length td1bdb@ls))) (for-each (lambda (td1be4@x) (begin (if (not (list? td1be4@x)) (assertion-violation td1be1@who '"not a list" td1be4@x) (void)) (if (not (= (length td1be4@x) td1be2@n)) (assertion-violation td1be1@who '"length mismatch" td1bdb@ls td1be4@x) (void)))) td1bde@ls*)) (void)) (apply map td1bda@proc td1bdb@ls td1bde@ls*)))))) (set! td2856@tdd85@ellipsis-map tdd85@ellipsis-map) (set! tdd87@syntax-transformer (let ((td1be7@gen-syntax '#f) (td1be9@gen-ref '#f) (td1beb@gen-append '#f) (td1bed@gen-mappend '#f) (td1bef@gen-map '#f) (td1bf1@gen-cons '#f) (td1bf3@gen-vector '#f) (td1bf5@regen '#f)) (begin (set! td1be7@gen-syntax (lambda (td1c5e@src td1c5f@e td1c60@r td1c61@maps td1c62@ellipsis? td1c63@vec?) (let ((td1c6a@t td1c5f@e)) (let ((td1c6c@ls/false (tdd7b@syntax-dispatch td1c6a@t 'any))) (if (and td1c6c@ls/false (apply (lambda (td1c6e@dots) (td1c62@ellipsis? td1c6e@dots)) td1c6c@ls/false)) (apply (lambda (td1c70@dots) (tde5b@syntax-violation '#f '"misplaced ellipsis in syntax form" td1c5e@src)) td1c6c@ls/false) (let ((td1c72@t td1c6a@t)) (let ((td1c74@ls/false (tdd7b@syntax-dispatch td1c72@t 'any))) (if (and td1c74@ls/false (apply (lambda (td1c76@id) (tdb74@id? td1c76@id)) td1c74@ls/false)) (apply (lambda (td1c78@id) (let ((td1c7a@label (tdb8a@id->label td1c5f@e))) (let ((td1c7c@b (tdb8c@label->binding td1c7a@label td1c60@r))) (if (eq? (tdb90@binding-type td1c7c@b) 'syntax) (call-with-values (lambda () (let ((td1c82@var.lev (tdb92@binding-value td1c7c@b))) (td1be9@gen-ref td1c5e@src (car td1c82@var.lev) (cdr td1c82@var.lev) td1c61@maps))) (lambda (td1c84@td1c7f td1c85@td1c81) (let ((td1c88@maps td1c85@td1c81) (td1c89@var td1c84@td1c7f)) (values (list 'ref td1c89@var) td1c88@maps)))) (values (list 'quote td1c5f@e) td1c61@maps))))) td1c74@ls/false) (let ((td1c8c@t td1c72@t)) (let ((td1c8e@ls/false (tdd7b@syntax-dispatch td1c8c@t '(any any)))) (if (and td1c8e@ls/false (apply (lambda (td1c90@dots td1c91@e) (td1c62@ellipsis? td1c90@dots)) td1c8e@ls/false)) (apply (lambda (td1c94@dots td1c95@e) (if td1c63@vec? (tde5b@syntax-violation '#f '"misplaced ellipsis in syntax form" td1c5e@src) (td1be7@gen-syntax td1c5e@src td1c95@e td1c60@r td1c61@maps (lambda (td1c98@x) '#f) '#f))) td1c8e@ls/false) (let ((td1c9a@t td1c8c@t)) (let ((td1c9c@ls/false (tdd7b@syntax-dispatch td1c9a@t '(any any . any)))) (if (and td1c9c@ls/false (apply (lambda (td1c9e@x td1c9f@dots td1ca0@y) (td1c62@ellipsis? td1c9f@dots)) td1c9c@ls/false)) (apply (lambda (td1ca4@x td1ca5@dots td1ca6@y) (let td1cbc@f ((td1caa@y td1ca6@y) (td1cab@k (lambda (td1cae@maps) (call-with-values (lambda () (td1be7@gen-syntax td1c5e@src td1ca4@x td1c60@r (cons '() td1cae@maps) td1c62@ellipsis? '#f)) (lambda (td1cb4@td1cb1 td1cb5@td1cb3) (let ((td1cb8@maps td1cb5@td1cb3) (td1cb9@x td1cb4@td1cb1)) (if (null? (car td1cb8@maps)) (tde5b@syntax-violation '#f '"extra ellipsis in syntax form" td1c5e@src) (values (td1bef@gen-map td1cb9@x (car td1cb8@maps)) (cdr td1cb8@maps))))))))) (let ((td1cbe@t td1caa@y)) (let ((td1cc0@ls/false (tdd7b@syntax-dispatch td1cbe@t '()))) (if td1cc0@ls/false (apply (lambda () (td1cab@k td1c61@maps)) td1cc0@ls/false) (let ((td1cc2@t td1cbe@t)) (let ((td1cc4@ls/false (tdd7b@syntax-dispatch td1cc2@t '(any . any)))) (if (and td1cc4@ls/false (apply (lambda (td1cc6@dots td1cc7@y) (td1c62@ellipsis? td1cc6@dots)) td1cc4@ls/false)) (apply (lambda (td1cca@dots td1ccb@y) (td1cbc@f td1ccb@y (lambda (td1cce@maps) (call-with-values (lambda () (td1cab@k (cons '() td1cce@maps))) (lambda (td1cd4@td1cd1 td1cd5@td1cd3) (let ((td1cd8@maps td1cd5@td1cd3) (td1cd9@x td1cd4@td1cd1)) (if (null? (car td1cd8@maps)) (tde5b@syntax-violation '#f '"extra ellipsis in syntax form" td1c5e@src) (values (td1bed@gen-mappend td1cd9@x (car td1cd8@maps)) (cdr td1cd8@maps))))))))) td1cc4@ls/false) (let ((td1cdc@t td1cc2@t)) (let ((td1cde@ls/false (tdd7b@syntax-dispatch td1cdc@t '_))) (if td1cde@ls/false (apply (lambda () (call-with-values (lambda () (td1be7@gen-syntax td1c5e@src td1caa@y td1c60@r td1c61@maps td1c62@ellipsis? td1c63@vec?)) (lambda (td1ce4@td1ce1 td1ce5@td1ce3) (let ((td1ce8@maps td1ce5@td1ce3) (td1ce9@y td1ce4@td1ce1)) (call-with-values (lambda () (td1cab@k td1ce8@maps)) (lambda (td1cf0@td1ced td1cf1@td1cef) (let ((td1cf4@maps td1cf1@td1cef) (td1cf5@x td1cf0@td1ced)) (values (td1beb@gen-append td1cf5@x td1ce9@y) td1cf4@maps)))))))) td1cde@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1cdc@t)))))))))))) td1c9c@ls/false) (let ((td1cf8@t td1c9a@t)) (let ((td1cfa@ls/false (tdd7b@syntax-dispatch td1cf8@t '(any . any)))) (if td1cfa@ls/false (apply (lambda (td1cfc@x td1cfd@y) (call-with-values (lambda () (td1be7@gen-syntax td1c5e@src td1cfc@x td1c60@r td1c61@maps td1c62@ellipsis? '#f)) (lambda (td1d04@td1d01 td1d05@td1d03) (let ((td1d08@maps td1d05@td1d03) (td1d09@xnew td1d04@td1d01)) (call-with-values (lambda () (td1be7@gen-syntax td1c5e@src td1cfd@y td1c60@r td1d08@maps td1c62@ellipsis? td1c63@vec?)) (lambda (td1d10@td1d0d td1d11@td1d0f) (let ((td1d14@maps td1d11@td1d0f) (td1d15@ynew td1d10@td1d0d)) (values (td1bf1@gen-cons td1c5f@e td1cfc@x td1cfd@y td1d09@xnew td1d15@ynew) td1d14@maps)))))))) td1cfa@ls/false) (let ((td1d18@t td1cf8@t)) (let ((td1d1a@ls/false (tdd7b@syntax-dispatch td1d18@t '#(vector each-any)))) (if td1d1a@ls/false (apply (lambda (td1d1c@ls) (call-with-values (lambda () (td1be7@gen-syntax td1c5e@src td1d1c@ls td1c60@r td1c61@maps td1c62@ellipsis? '#t)) (lambda (td1d22@td1d1f td1d23@td1d21) (let ((td1d26@maps td1d23@td1d21) (td1d27@lsnew td1d22@td1d1f)) (values (td1bf3@gen-vector td1c5f@e td1d1c@ls td1d27@lsnew) td1d26@maps))))) td1d1a@ls/false) (let ((td1d2a@t td1d18@t)) (let ((td1d2c@ls/false (tdd7b@syntax-dispatch td1d2a@t '_))) (if td1d2c@ls/false (apply (lambda () (values (list 'quote td1c5f@e) td1c61@maps)) td1d2c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1d2a@t)))))))))))))))))))))))) (set! td1be9@gen-ref (lambda (td1c44@src td1c45@var td1c46@level td1c47@maps) (if (= td1c46@level '0) (values td1c45@var td1c47@maps) (if (null? td1c47@maps) (tde5b@syntax-violation '#f '"missing ellipsis in syntax form" td1c44@src) (call-with-values (lambda () (td1be9@gen-ref td1c44@src td1c45@var (- td1c46@level '1) (cdr td1c47@maps))) (lambda (td1c50@td1c4d td1c51@td1c4f) (let ((td1c54@outer-maps td1c51@td1c4f) (td1c55@outer-var td1c50@td1c4d)) (let ((td1c58@t (assq td1c55@outer-var (car td1c47@maps)))) (if td1c58@t ((lambda (td1c5a@b) (values (cdr td1c5a@b) td1c47@maps)) td1c58@t) (let ((td1c5c@inner-var (tdafc@gen-lexical 'tmp))) (values td1c5c@inner-var (cons (cons (cons td1c55@outer-var td1c5c@inner-var) (car td1c47@maps)) td1c54@outer-maps)))))))))))) (set! td1beb@gen-append (lambda (td1c40@x td1c41@y) (if (fast-equal? td1c41@y ''()) td1c40@x (list 'append td1c40@x td1c41@y)))) (set! td1bed@gen-mappend (lambda (td1c3c@e td1c3d@map-env) (list 'apply '(primitive append) (td1bef@gen-map td1c3c@e td1c3d@map-env)))) (set! td1bef@gen-map (lambda (td1c2a@e td1c2b@map-env) (let ((td1c2e@formals (map cdr td1c2b@map-env)) (td1c2f@actuals (map (lambda (td1c32@x) (list 'ref (car td1c32@x))) td1c2b@map-env))) (if (eq? (car td1c2a@e) 'ref) (car td1c2f@actuals) (if (for-all (lambda (td1c34@x) (and (eq? (car td1c34@x) 'ref) (memq (cadr td1c34@x) td1c2e@formals))) (cdr td1c2a@e)) (let ((td1c36@args (map (let ((td1c38@r (map cons td1c2e@formals td1c2f@actuals))) (lambda (td1c3a@x) (cdr (assq (cadr td1c3a@x) td1c38@r)))) (cdr td1c2a@e)))) (cons 'map (cons (list 'primitive (car td1c2a@e)) td1c36@args))) (cons* 'map (list 'lambda td1c2e@formals td1c2a@e) td1c2f@actuals)))))) (set! td1bf1@gen-cons (lambda (td1c1a@e td1c1b@x td1c1c@y td1c1d@xnew td1c1e@ynew) (let ((td1c24@t (car td1c1e@ynew))) (if (memv td1c24@t '(quote)) (if (eq? (car td1c1d@xnew) 'quote) (let ((td1c26@xnew (cadr td1c1d@xnew)) (td1c27@ynew (cadr td1c1e@ynew))) (if (and (eq? td1c26@xnew td1c1b@x) (eq? td1c27@ynew td1c1c@y)) (list 'quote td1c1a@e) (list 'quote (cons td1c26@xnew td1c27@ynew)))) (if (null? (cadr td1c1e@ynew)) (list 'list td1c1d@xnew) (list 'cons td1c1d@xnew td1c1e@ynew))) (if (memv td1c24@t '(list)) (cons 'list (cons td1c1d@xnew (cdr td1c1e@ynew))) (list 'cons td1c1d@xnew td1c1e@ynew)))))) (set! td1bf3@gen-vector (lambda (td1c14@e td1c15@ls td1c16@lsnew) (if (eq? (car td1c16@lsnew) 'quote) (if (eq? (cadr td1c16@lsnew) td1c15@ls) (list 'quote td1c14@e) (list 'quote (list->vector (cadr td1c16@lsnew)))) (if (eq? (car td1c16@lsnew) 'list) (cons 'vector (cdr td1c16@lsnew)) (list 'list->vector td1c16@lsnew))))) (set! td1bf5@regen (lambda (td1c0e@x) (let ((td1c10@t (car td1c0e@x))) (if (memv td1c10@t '(ref)) (cadr td1c0e@x) (if (memv td1c10@t '(primitive)) (list 'primitive (cadr td1c0e@x)) (if (memv td1c10@t '(quote)) (list 'quote (cadr td1c0e@x)) (if (memv td1c10@t '(lambda)) (tdad7@tda03@build-lambda '#f (cadr td1c0e@x) (td1bf5@regen (caddr td1c0e@x))) (if (memv td1c10@t '(map)) (let ((td1c12@ls (map td1bf5@regen (cdr td1c0e@x)))) (cons '(primitive ellipsis-map) td1c12@ls)) (cons (list 'primitive (car td1c0e@x)) (map td1bf5@regen (cdr td1c0e@x))))))))))) (lambda (td1bf6@e td1bf7@r td1bf8@mr) (let ((td1bfc@t td1bf6@e)) (let ((td1bfe@ls/false (tdd7b@syntax-dispatch td1bfc@t '(_ any)))) (if td1bfe@ls/false (apply (lambda (td1c00@x) (call-with-values (lambda () (td1be7@gen-syntax td1bf6@e td1c00@x td1bf7@r '() tdd7d@ellipsis? '#f)) (lambda (td1c06@td1c03 td1c07@td1c05) (let ((td1c0a@maps td1c07@td1c05) (td1c0b@e td1c06@td1c03)) (td1bf5@regen td1c0b@e))))) td1bfe@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1bfc@t)))))))) (set! td2857@tdd87@syntax-transformer tdd87@syntax-transformer) (set! tdd89@core-macro-transformer (lambda (td1d2e@name) (let ((td1d30@t td1d2e@name)) (if (memv td1d30@t '(quote)) tdd2b@quote-transformer (if (memv td1d30@t '(lambda)) tdd2f@lambda-transformer (if (memv td1d30@t '(case-lambda)) tdd2d@case-lambda-transformer (if (memv td1d30@t '(letrec)) tdd13@letrec-transformer (if (memv td1d30@t '(letrec*)) tdd15@letrec*-transformer (if (memv td1d30@t '(let)) tdd11@let-transformer (if (memv td1d30@t '(if)) tdd23@if-transformer (if (memv td1d30@t '(and)) tdd25@and-transformer (if (memv td1d30@t '(or)) tdd27@or-transformer (if (memv td1d30@t '(foreign-call)) tdd77@foreign-call-transformer (if (memv td1d30@t '(syntax-case)) tdd83@syntax-case-transformer (if (memv td1d30@t '(syntax)) tdd87@syntax-transformer (if (memv td1d30@t '(type-descriptor)) tdd19@type-descriptor-transformer (if (memv td1d30@t '(record-type-descriptor)) tdd1b@record-type-descriptor-transformer (if (memv td1d30@t '(record-constructor-descriptor)) tdd1d@record-constructor-descriptor-transformer (if (memv td1d30@t '(fluid-let-syntax)) tdd17@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" td1d2e@name)))))))))))))))))))) (set! td2858@tdd89@core-macro-transformer tdd89@core-macro-transformer) (set! tdd8b@symbol-macro (lambda (td1d32@x td1d33@set) (let ((td1d36@t td1d32@x)) (let ((td1d38@ls/false (tdd7b@syntax-dispatch td1d36@t '(_ any)))) (if (and td1d38@ls/false (apply (lambda (td1d3a@name) (and (tdb74@id? td1d3a@name) (memq (tdb76@id->sym td1d3a@name) td1d33@set))) td1d38@ls/false)) (apply (lambda (td1d3c@name) (tdd31@bless (list 'quote td1d3c@name))) td1d38@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1d36@t)))))) (set! td2859@tdd8b@symbol-macro tdd8b@symbol-macro) (set! tdd8d@macro-transformer (lambda (td1d3e@x) (if (procedure? td1d3e@x) td1d3e@x (if (symbol? td1d3e@x) (let ((td1d40@t td1d3e@x)) (if (memv td1d40@t '(define-record-type)) tdd6f@define-record-type-macro (if (memv td1d40@t '(define-struct)) tdd6d@define-struct-macro (if (memv td1d40@t '(include)) tdd63@include-macro (if (memv td1d40@t '(cond)) tdd5f@cond-macro (if (memv td1d40@t '(let)) tdd37@let-macro (if (memv td1d40@t '(do)) tdd57@do-macro (if (memv td1d40@t '(or)) tdd5b@or-macro (if (memv td1d40@t '(and)) tdd5d@and-macro (if (memv td1d40@t '(let*)) tdd59@let*-macro (if (memv td1d40@t '(let-values)) tdd39@let-values-macro (if (memv td1d40@t '(let*-values)) tdd3b@let*-values-macro (if (memv td1d40@t '(syntax-rules)) tdd67@syntax-rules-macro (if (memv td1d40@t '(quasiquote)) tdd69@quasiquote-macro (if (memv td1d40@t '(quasisyntax)) tdd6b@quasisyntax-macro (if (memv td1d40@t '(with-syntax)) tdd33@with-syntax-macro (if (memv td1d40@t '(when)) tdd1f@when-macro (if (memv td1d40@t '(unless)) tdd21@unless-macro (if (memv td1d40@t '(case)) tdd29@case-macro (if (memv td1d40@t '(identifier-syntax)) tdd55@identifier-syntax-macro (if (memv td1d40@t '(time)) tdd4d@time-macro (if (memv td1d40@t '(delay)) tdd4f@delay-macro (if (memv td1d40@t '(assert)) tdd51@assert-macro (if (memv td1d40@t '(endianness)) tdd53@endianness-macro (if (memv td1d40@t '(guard)) tdd49@guard-macro (if (memv td1d40@t '(define-enumeration)) tdd4b@define-enumeration-macro (if (memv td1d40@t '(trace-lambda)) tdd3d@trace-lambda-macro (if (memv td1d40@t '(trace-define)) tdd3f@trace-define-macro (if (memv td1d40@t '(trace-define-syntax)) tdd41@trace-define-syntax-macro (if (memv td1d40@t '(trace-let-syntax)) tdd45@trace-let-syntax-macro (if (memv td1d40@t '(trace-letrec-syntax)) tdd47@trace-letrec-syntax-macro (if (memv td1d40@t '(define-condition-type)) tdd71@define-condition-type-macro (if (memv td1d40@t '(parameterize)) tdd75@parameterize-macro (if (memv td1d40@t '(include-into)) tdd65@include-into-macro (if (memv td1d40@t '(eol-style)) (lambda (td1d42@x) (tdd8b@symbol-macro td1d42@x '(none lf cr crlf nel crnel ls))) (if (memv td1d40@t '(error-handling-mode)) (lambda (td1d44@x) (tdd8b@symbol-macro td1d44@x '(ignore raise replace))) (if (memv td1d40@t '(buffer-mode)) (lambda (td1d46@x) (tdd8b@symbol-macro td1d46@x '(none line block))) (if (memv td1d40@t '(file-options)) tdaef@file-options-macro (if (memv td1d40@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) tdd73@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" td1d3e@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" td1d3e@x))))) (set! td285a@tdd8d@macro-transformer tdd8d@macro-transformer) (set! tdd8f@local-macro-transformer (lambda (td1d48@x) (car td1d48@x))) (set! td285b@tdd8f@local-macro-transformer tdd8f@local-macro-transformer) (set! tdd91@do-macro-call (lambda (td1d4a@transformer td1d4b@expr) (let ((td1d4e@out (td1d4a@transformer (tdb5e@add-mark tdb58@anti-mark td1d4b@expr '#f)))) (begin (let td1d52@f ((td1d50@x td1d4e@out)) (if (not (tdb40@stx? td1d50@x)) (if (pair? td1d50@x) (begin (td1d52@f (car td1d50@x)) (td1d52@f (cdr td1d50@x))) (if (vector? td1d50@x) (vector-for-each td1d52@f td1d50@x) (if (symbol? td1d50@x) (tde5b@syntax-violation '#f '"raw symbol encountered in output of macro" td1d4b@expr td1d50@x) (void)))) (void))) (tdb5e@add-mark (tdb56@gen-mark) td1d4e@out td1d4b@expr))))) (set! td285c@tdd91@do-macro-call tdd91@do-macro-call) (set! tdd93@chi-macro (lambda (td1d54@p td1d55@e) (tdd91@do-macro-call (tdd8d@macro-transformer td1d54@p) td1d55@e))) (set! td285d@tdd93@chi-macro tdd93@chi-macro) (set! tdd95@chi-local-macro (lambda (td1d58@p td1d59@e) (tdd91@do-macro-call (tdd8f@local-macro-transformer td1d58@p) td1d59@e))) (set! td285e@tdd95@chi-local-macro tdd95@chi-local-macro) (set! tdd97@chi-global-macro (lambda (td1d5c@p td1d5d@e) (let ((td1d60@lib (car td1d5c@p)) (td1d61@loc (cdr td1d5c@p))) (begin (td98b@td7da@visit-library td1d60@lib) (let ((td1d64@x (symbol-value td1d61@loc))) (let ((td1d66@transformer (if (procedure? td1d64@x) td1d64@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" td1d64@x)))) (tdd91@do-macro-call td1d66@transformer td1d5d@e))))))) (set! td285f@tdd97@chi-global-macro tdd97@chi-global-macro) (set! tdd99@chi-expr* (lambda (td1d68@e* td1d69@r td1d6a@mr) (if (null? td1d68@e*) '() (let ((td1d6e@e (tdd9d@chi-expr (car td1d68@e*) td1d69@r td1d6a@mr))) (cons td1d6e@e (tdd99@chi-expr* (cdr td1d68@e*) td1d69@r td1d6a@mr)))))) (set! td2860@tdd99@chi-expr* tdd99@chi-expr*) (set! tdd9b@chi-application (lambda (td1d70@e td1d71@r td1d72@mr) (let ((td1d76@t td1d70@e)) (let ((td1d78@ls/false (tdd7b@syntax-dispatch td1d76@t '(any . each-any)))) (if td1d78@ls/false (apply (lambda (td1d7a@rator td1d7b@rands) (let ((td1d7e@rator (tdd9d@chi-expr td1d7a@rator td1d71@r td1d72@mr))) (cons td1d7e@rator (tdd99@chi-expr* td1d7b@rands td1d71@r td1d72@mr)))) td1d78@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1d76@t)))))) (set! td2861@tdd9b@chi-application tdd9b@chi-application) (set! tdd9d@chi-expr (lambda (td1d80@e td1d81@r td1d82@mr) (call-with-values (lambda () (tdb96@syntax-type td1d80@e td1d81@r)) (lambda (td1d8c@td1d87 td1d8d@td1d89 td1d8e@td1d8b) (let ((td1d92@kwd td1d8e@td1d8b) (td1d93@value td1d8d@td1d89) (td1d94@type td1d8c@td1d87)) (let ((td1d98@t td1d94@type)) (if (memv td1d98@t '(core-macro)) (let ((td1d9a@transformer (tdd89@core-macro-transformer td1d93@value))) (td1d9a@transformer td1d80@e td1d81@r td1d82@mr)) (if (memv td1d98@t '(global)) (let ((td1d9c@lib (car td1d93@value))) (let ((td1d9e@loc (cdr td1d93@value))) (begin ((tdde3@inv-collector) td1d9c@lib) td1d9e@loc))) (if (memv td1d98@t '(core-prim)) (let ((td1da0@name td1d93@value)) (list 'primitive td1da0@name)) (if (memv td1d98@t '(call)) (tdd9b@chi-application td1d80@e td1d81@r td1d82@mr) (if (memv td1d98@t '(lexical)) (let ((td1da2@lex (tdd05@lexical-var td1d93@value))) td1da2@lex) (if (memv td1d98@t '(global-macro global-macro!)) (tdd9d@chi-expr (tdd97@chi-global-macro td1d93@value td1d80@e) td1d81@r td1d82@mr) (if (memv td1d98@t '(local-macro local-macro!)) (tdd9d@chi-expr (tdd95@chi-local-macro td1d93@value td1d80@e) td1d81@r td1d82@mr) (if (memv td1d98@t '(macro macro!)) (tdd9d@chi-expr (tdd93@chi-macro td1d93@value td1d80@e) td1d81@r td1d82@mr) (if (memv td1d98@t '(constant)) (let ((td1da4@datum td1d93@value)) (list 'quote td1da4@datum)) (if (memv td1d98@t '(set!)) (tdd9f@chi-set! td1d80@e td1d81@r td1d82@mr) (if (memv td1d98@t '(begin)) (let ((td1da6@t td1d80@e)) (let ((td1da8@ls/false (tdd7b@syntax-dispatch td1da6@t '(_ any . each-any)))) (if td1da8@ls/false (apply (lambda (td1daa@x td1dab@x*) (tdad9@tda33@build-sequence '#f (tdd99@chi-expr* (cons td1daa@x td1dab@x*) td1d81@r td1d82@mr))) td1da8@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1da6@t)))) (if (memv td1d98@t '(let-syntax letrec-syntax)) (let ((td1dae@t td1d80@e)) (let ((td1db0@ls/false (tdd7b@syntax-dispatch td1dae@t '(_ #(each (any any)) any . each-any)))) (if (and td1db0@ls/false (apply (lambda (td1db2@xlhs* td1db3@xrhs* td1db4@xbody td1db5@xbody*) (if (not (tdb7c@valid-bound-ids? td1db2@xlhs*)) (tde5b@syntax-violation '#f '"invalid identifiers" td1d80@e) (void))) td1db0@ls/false)) (apply (lambda (td1dba@xlhs* td1dbb@xrhs* td1dbc@xbody td1dbd@xbody*) (let ((td1dc2@xlab* (map tdb00@gen-label td1dba@xlhs*))) (let ((td1dc4@xrib (tdb34@make-full-rib td1dba@xlhs* td1dc2@xlab*))) (let ((td1dc6@xb* (map (lambda (td1dc8@x) (tdbac@make-eval-transformer (tddd5@expand-transformer (if (eq? td1d94@type 'let-syntax) td1dc8@x (tdb60@add-subst td1dc4@xrib td1dc8@x)) td1d82@mr))) td1dbb@xrhs*))) (tdad9@tda33@build-sequence '#f (tdd99@chi-expr* (map (lambda (td1dca@x) (tdb60@add-subst td1dc4@xrib td1dca@x)) (cons td1dbc@xbody td1dbd@xbody*)) (append (map cons td1dc2@xlab* td1dc6@xb*) td1d81@r) (append (map cons td1dc2@xlab* td1dc6@xb*) td1d82@mr))))))) td1db0@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1dae@t)))) (if (memv td1d98@t '(displaced-lexical)) (tde5b@syntax-violation '#f '"identifier out of context" td1d80@e) (if (memv td1d98@t '(syntax)) (tde5b@syntax-violation '#f '"reference to pattern variable outside a syntax form" td1d80@e) (if (memv td1d98@t '(define define-syntax module import library)) (tde5b@syntax-violation '#f (string-append (let ((td1dcc@t td1d94@type)) (if (memv td1dcc@t '(define)) '"a definition" (if (memv td1dcc@t '(define-syntax)) '"a define-syntax" (if (memv td1dcc@t '(module)) '"a module definition" (if (memv td1dcc@t '(library)) '"a library definition" (if (memv td1dcc@t '(import)) '"an import declaration" (if (memv td1dcc@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") td1d80@e) (if (memv td1d98@t '(mutable)) (tde5b@syntax-violation '#f '"attempt to reference an unexportable variable" td1d80@e) (tde5b@syntax-violation '#f '"invalid expression" td1d80@e))))))))))))))))))))))) (set! td2862@tdd9d@chi-expr tdd9d@chi-expr) (set! tdd9f@chi-set! (lambda (td1dce@e td1dcf@r td1dd0@mr) (let ((td1dd4@t td1dce@e)) (let ((td1dd6@ls/false (tdd7b@syntax-dispatch td1dd4@t '(_ any any)))) (if (and td1dd6@ls/false (apply (lambda (td1dd8@x td1dd9@v) (tdb74@id? td1dd8@x)) td1dd6@ls/false)) (apply (lambda (td1ddc@x td1ddd@v) (call-with-values (lambda () (tdb96@syntax-type td1ddc@x td1dcf@r)) (lambda (td1de6@td1de1 td1de7@td1de3 td1de8@td1de5) (let ((td1dec@kwd td1de8@td1de5) (td1ded@value td1de7@td1de3) (td1dee@type td1de6@td1de1)) (let ((td1df2@t td1dee@type)) (if (memv td1df2@t '(lexical)) (begin (tdd09@set-lexical-mutable! td1ded@value '#t) (list 'set! (tdd05@lexical-var td1ded@value) (tdd9d@chi-expr td1ddd@v td1dcf@r td1dd0@mr))) (if (memv td1df2@t '(core-prim)) (tde5b@syntax-violation '#f '"cannot modify imported core primitive" td1dce@e) (if (memv td1df2@t '(global)) (tde5b@syntax-violation '#f '"attempt to modify imported binding" td1dce@e) (if (memv td1df2@t '(global-macro!)) (tdd9d@chi-expr (tdd97@chi-global-macro td1ded@value td1dce@e) td1dcf@r td1dd0@mr) (if (memv td1df2@t '(local-macro!)) (tdd9d@chi-expr (tdd95@chi-local-macro td1ded@value td1dce@e) td1dcf@r td1dd0@mr) (if (memv td1df2@t '(mutable)) (tde5b@syntax-violation '#f '"attempt to assign to an unexportable variable" td1dce@e) (tde5b@syntax-violation '#f '"invalid syntax" td1dce@e)))))))))))) td1dd6@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1dd4@t)))))) (set! td2863@tdd9f@chi-set! tdd9f@chi-set!) (set! tdda1@verify-formals (lambda (td1df4@fmls td1df5@stx) (let ((td1df8@t td1df4@fmls)) (let ((td1dfa@ls/false (tdd7b@syntax-dispatch td1df8@t 'each-any))) (if td1dfa@ls/false (apply (lambda (td1dfc@x*) (if (not (tdb7c@valid-bound-ids? td1dfc@x*)) (tdd35@invalid-fmls-error td1df5@stx td1df4@fmls) (void))) td1dfa@ls/false) (let ((td1dfe@t td1df8@t)) (let ((td1e00@ls/false (tdd7b@syntax-dispatch td1dfe@t '#(each+ any () any)))) (if td1e00@ls/false (apply (lambda (td1e02@x* td1e03@x) (if (not (tdb7c@valid-bound-ids? (cons td1e03@x td1e02@x*))) (tdd35@invalid-fmls-error td1df5@stx td1df4@fmls) (void))) td1e00@ls/false) (let ((td1e06@t td1dfe@t)) (let ((td1e08@ls/false (tdd7b@syntax-dispatch td1e06@t '_))) (if td1e08@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid syntax" td1df5@stx)) td1e08@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1e06@t)))))))))))) (set! td2864@tdda1@verify-formals tdda1@verify-formals) (set! tdda3@chi-lambda-clause (lambda (td1e0a@stx td1e0b@fmls td1e0c@body* td1e0d@r td1e0e@mr) (let ((td1e14@t td1e0b@fmls)) (let ((td1e16@ls/false (tdd7b@syntax-dispatch td1e14@t 'each-any))) (if td1e16@ls/false (apply (lambda (td1e18@x*) (begin (tdda1@verify-formals td1e0b@fmls td1e0a@stx) (let ((td1e1a@lex* (map tdafc@gen-lexical td1e18@x*)) (td1e1b@lab* (map tdb00@gen-label td1e18@x*))) (values td1e1a@lex* (tddb3@chi-internal (tdb60@add-subst (tdb34@make-full-rib td1e18@x* td1e1b@lab*) td1e0c@body*) (tdd0d@add-lexicals td1e1b@lab* td1e1a@lex* td1e0d@r) td1e0e@mr))))) td1e16@ls/false) (let ((td1e1e@t td1e14@t)) (let ((td1e20@ls/false (tdd7b@syntax-dispatch td1e1e@t '#(each+ any () any)))) (if td1e20@ls/false (apply (lambda (td1e22@x* td1e23@x) (begin (tdda1@verify-formals td1e0b@fmls td1e0a@stx) (let ((td1e26@lex* (map tdafc@gen-lexical td1e22@x*)) (td1e27@lab* (map tdb00@gen-label td1e22@x*)) (td1e28@lex (tdafc@gen-lexical td1e23@x)) (td1e29@lab (tdb00@gen-label td1e23@x))) (values (append td1e26@lex* td1e28@lex) (tddb3@chi-internal (tdb60@add-subst (tdb34@make-full-rib (cons td1e23@x td1e22@x*) (cons td1e29@lab td1e27@lab*)) td1e0c@body*) (tdd0d@add-lexicals (cons td1e29@lab td1e27@lab*) (cons td1e28@lex td1e26@lex*) td1e0d@r) td1e0e@mr))))) td1e20@ls/false) (let ((td1e2e@t td1e1e@t)) (let ((td1e30@ls/false (tdd7b@syntax-dispatch td1e2e@t '_))) (if td1e30@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid syntax" td1e0b@fmls)) td1e30@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1e2e@t)))))))))))) (set! td2865@tdda3@chi-lambda-clause tdda3@chi-lambda-clause) (set! tdda5@chi-lambda-clause* (lambda (td1e32@stx td1e33@fmls* td1e34@body** td1e35@r td1e36@mr) (if (null? td1e33@fmls*) (values '() '()) (call-with-values (lambda () (tdda3@chi-lambda-clause td1e32@stx (car td1e33@fmls*) (car td1e34@body**) td1e35@r td1e36@mr)) (lambda (td1e40@td1e3d td1e41@td1e3f) (let ((td1e44@b td1e41@td1e3f) (td1e45@a td1e40@td1e3d)) (call-with-values (lambda () (tdda5@chi-lambda-clause* td1e32@stx (cdr td1e33@fmls*) (cdr td1e34@body**) td1e35@r td1e36@mr)) (lambda (td1e4c@td1e49 td1e4d@td1e4b) (let ((td1e50@b* td1e4d@td1e4b) (td1e51@a* td1e4c@td1e49)) (values (cons td1e45@a td1e51@a*) (cons td1e44@b td1e50@b*))))))))))) (set! td2866@tdda5@chi-lambda-clause* tdda5@chi-lambda-clause*) (set! tdda7@chi-defun (lambda (td1e54@x td1e55@r td1e56@mr) (let ((td1e5a@fmls (car td1e54@x)) (td1e5b@body* (cdr td1e54@x))) (call-with-values (lambda () (tdda3@chi-lambda-clause td1e5a@fmls td1e5a@fmls td1e5b@body* td1e55@r td1e56@mr)) (lambda (td1e62@td1e5f td1e63@td1e61) (let ((td1e66@body td1e63@td1e61) (td1e67@fmls td1e62@td1e5f)) (tdad7@tda03@build-lambda '#f td1e67@fmls td1e66@body))))))) (set! td2867@tdda7@chi-defun tdda7@chi-defun) (set! tdda9@chi-rhs (lambda (td1e6a@rhs td1e6b@r td1e6c@mr) (let ((td1e70@t (car td1e6a@rhs))) (if (memv td1e70@t '(defun)) (tdda7@chi-defun (cdr td1e6a@rhs) td1e6b@r td1e6c@mr) (if (memv td1e70@t '(expr)) (let ((td1e72@expr (cdr td1e6a@rhs))) (tdd9d@chi-expr td1e72@expr td1e6b@r td1e6c@mr)) (if (memv td1e70@t '(top-expr)) (let ((td1e74@expr (cdr td1e6a@rhs))) (tdad9@tda33@build-sequence '#f (list (tdd9d@chi-expr td1e74@expr td1e6b@r td1e6c@mr) (tdada@tda35@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" td1e6a@rhs))))))) (set! td2868@tdda9@chi-rhs tdda9@chi-rhs) (set! tddab@expand-interaction-rhs*/init* (lambda (td1e76@lhs* td1e77@rhs* td1e78@init* td1e79@r td1e7a@mr) (let td1e84@f ((td1e80@lhs* td1e76@lhs*) (td1e81@rhs* td1e77@rhs*)) (if (null? td1e80@lhs*) (map (lambda (td1e86@x) (tdd9d@chi-expr td1e86@x td1e79@r td1e7a@mr)) td1e78@init*) (let ((td1e88@lhs (car td1e80@lhs*)) (td1e89@rhs (car td1e81@rhs*))) (let ((td1e8c@t (car td1e89@rhs))) (if (memv td1e8c@t '(defun)) (let ((td1e8e@rhs (tdda7@chi-defun (cdr td1e89@rhs) td1e79@r td1e7a@mr))) (cons (list 'set! td1e88@lhs td1e8e@rhs) (td1e84@f (cdr td1e80@lhs*) (cdr td1e81@rhs*)))) (if (memv td1e8c@t '(expr)) (let ((td1e90@rhs (tdd9d@chi-expr (cdr td1e89@rhs) td1e79@r td1e7a@mr))) (cons (list 'set! td1e88@lhs td1e90@rhs) (td1e84@f (cdr td1e80@lhs*) (cdr td1e81@rhs*)))) (if (memv td1e8c@t '(top-expr)) (let ((td1e92@e (tdd9d@chi-expr (cdr td1e89@rhs) td1e79@r td1e7a@mr))) (cons td1e92@e (td1e84@f (cdr td1e80@lhs*) (cdr td1e81@rhs*)))) (error 'expand-interaction '"invallid" td1e89@rhs)))))))))) (set! td2869@tddab@expand-interaction-rhs*/init* tddab@expand-interaction-rhs*/init*) (set! tddad@chi-rhs* (lambda (td1e94@rhs* td1e95@r td1e96@mr) (let td1e9c@f ((td1e9a@ls td1e94@rhs*)) (if (null? td1e9a@ls) '() (let ((td1e9e@a (tdda9@chi-rhs (car td1e9a@ls) td1e95@r td1e96@mr))) (cons td1e9e@a (td1e9c@f (cdr td1e9a@ls)))))))) (set! td286a@tddad@chi-rhs* tddad@chi-rhs*) (set! tddaf@find-bound=? (lambda (td1ea0@x td1ea1@lhs* td1ea2@rhs*) (if (null? td1ea1@lhs*) '#f (if (tdb78@bound-id=? td1ea0@x (car td1ea1@lhs*)) (car td1ea2@rhs*) (tddaf@find-bound=? td1ea0@x (cdr td1ea1@lhs*) (cdr td1ea2@rhs*)))))) (set! td286b@tddaf@find-bound=? tddaf@find-bound=?) (set! tddb1@find-dups (lambda (td1ea6@ls) (let td1eac@f ((td1ea8@ls td1ea6@ls) (td1ea9@dups '())) (if (null? td1ea8@ls) td1ea9@dups (let ((td1eae@t (tddaf@find-bound=? (car td1ea8@ls) (cdr td1ea8@ls) (cdr td1ea8@ls)))) (if td1eae@t ((lambda (td1eb0@x) (td1eac@f (cdr td1ea8@ls) (cons (list (car td1ea8@ls) td1eb0@x) td1ea9@dups))) td1eae@t) (td1eac@f (cdr td1ea8@ls) td1ea9@dups))))))) (set! td286c@tddb1@find-dups tddb1@find-dups) (set! tddb3@chi-internal (lambda (td1eb2@e* td1eb3@r td1eb4@mr) (let ((td1eb8@rib (tdb28@make-empty-rib))) (call-with-values (lambda () (tddd3@chi-body* (map (lambda (td1eca@x) (tdb60@add-subst td1eb8@rib td1eca@x)) (tdb72@syntax->list td1eb2@e*)) td1eb3@r td1eb4@mr '() '() '() '() '() td1eb8@rib '#f)) (lambda (td1ecc@td1ebb td1ecd@td1ebd td1ece@td1ebf td1ecf@td1ec1 td1ed0@td1ec3 td1ed1@td1ec5 td1ed2@td1ec7 td1ed3@td1ec9) (let ((td1edc@_exp* td1ed3@td1ec9) (td1edd@kwd* td1ed2@td1ec7) (td1ede@mod** td1ed1@td1ec5) (td1edf@rhs* td1ed0@td1ec3) (td1ee0@lex* td1ecf@td1ec1) (td1ee1@mr td1ece@td1ebf) (td1ee2@r td1ecd@td1ebd) (td1ee3@e* td1ecc@td1ebb)) (begin (if (null? td1ee3@e*) (tde5b@syntax-violation '#f '"no expression in body" td1ee3@e*) (void)) (let ((td1eec@init* (tdd99@chi-expr* (append (apply append (reverse td1ede@mod**)) td1ee3@e*) td1ee2@r td1ee1@mr))) (let ((td1eee@rhs* (tddad@chi-rhs* td1edf@rhs* td1ee2@r td1ee1@mr))) (tdade@tda3d@build-letrec* '#f (reverse td1ee0@lex*) (reverse td1eee@rhs*) (tdad9@tda33@build-sequence '#f td1eec@init*))))))))))) (set! td286d@tddb3@chi-internal tddb3@chi-internal) (set! tddb5@parse-module (lambda (td1ef0@e) (let ((td1ef2@t td1ef0@e)) (let ((td1ef4@ls/false (tdd7b@syntax-dispatch td1ef2@t '(_ each-any . each-any)))) (if td1ef4@ls/false (apply (lambda (td1ef6@export* td1ef7@b*) (begin (if (not (for-all tdb74@id? td1ef6@export*)) (tde5b@syntax-violation '#f '"module exports must be identifiers" td1ef0@e) (void)) (values '#f (list->vector td1ef6@export*) td1ef7@b*))) td1ef4@ls/false) (let ((td1efa@t td1ef2@t)) (let ((td1efc@ls/false (tdd7b@syntax-dispatch td1efa@t '(_ any each-any . each-any)))) (if td1efc@ls/false (apply (lambda (td1efe@name td1eff@export* td1f00@b*) (begin (if (not (tdb74@id? td1efe@name)) (tde5b@syntax-violation '#f '"module name must be an identifier" td1ef0@e) (void)) (if (not (for-all tdb74@id? td1eff@export*)) (tde5b@syntax-violation '#f '"module exports must be identifiers" td1ef0@e) (void)) (values td1efe@name (list->vector td1eff@export*) td1f00@b*))) td1efc@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1efa@t))))))))) (set! td286e@tddb5@parse-module tddb5@parse-module) (set! tddbf@module-interface? (lambda (td1f04@x) (and (simple-struct? td1f04@x) (eq? (simple-struct-name td1f04@x) 'module-interface)))) (set! td286f@tddbf@module-interface? tddbf@module-interface?) (set! tddc1@module-interface-first-mark (lambda (td1f06@x) (simple-struct-ref td1f06@x '0))) (set! td2870@tddc1@module-interface-first-mark tddc1@module-interface-first-mark) (set! tddc3@set-module-interface-first-mark! (lambda (td1f08@x td1f09@val) (simple-struct-set! td1f08@x '0 td1f09@val))) (set! td2871@tddc3@set-module-interface-first-mark! tddc3@set-module-interface-first-mark!) (set! tddc5@module-interface-exp-id-vec (lambda (td1f0c@x) (simple-struct-ref td1f0c@x '1))) (set! td2872@tddc5@module-interface-exp-id-vec tddc5@module-interface-exp-id-vec) (set! tddc7@set-module-interface-exp-id-vec! (lambda (td1f0e@x td1f0f@val) (simple-struct-set! td1f0e@x '1 td1f0f@val))) (set! td2873@tddc7@set-module-interface-exp-id-vec! tddc7@set-module-interface-exp-id-vec!) (set! tddc9@module-interface-exp-lab-vec (lambda (td1f12@x) (simple-struct-ref td1f12@x '2))) (set! td2874@tddc9@module-interface-exp-lab-vec tddc9@module-interface-exp-lab-vec) (set! tddcb@set-module-interface-exp-lab-vec! (lambda (td1f14@x td1f15@val) (simple-struct-set! td1f14@x '2 td1f15@val))) (set! td2875@tddcb@set-module-interface-exp-lab-vec! tddcb@set-module-interface-exp-lab-vec!) (set! tddcd@dummy '3) (set! td2876@tddcd@dummy tddcd@dummy) (set! tddcf@module-interface-exp-id* (lambda (td1f18@iface td1f19@id) (let ((td1f1d@diff-marks '#f)) (begin (set! td1f1d@diff-marks (lambda (td1f24@ls td1f25@x) (begin (if (null? td1f24@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((td1f28@a (car td1f24@ls))) (if (eq? td1f28@a td1f25@x) '() (cons td1f28@a (td1f1d@diff-marks (cdr td1f24@ls) td1f25@x))))))) (let ((td1f1e@diff (td1f1d@diff-marks (tdb46@stx-mark* td1f19@id) (tddc1@module-interface-first-mark td1f18@iface))) (td1f1f@id-vec (tddc5@module-interface-exp-id-vec td1f18@iface))) (if (null? td1f1e@diff) td1f1f@id-vec (vector-map (lambda (td1f22@x) (make-simple-struct 'stx '5 (list (tdb42@stx-expr td1f22@x) (append td1f1e@diff (tdb46@stx-mark* td1f22@x)) '() '()))) td1f1f@id-vec))))))) (set! td2877@tddcf@module-interface-exp-id* tddcf@module-interface-exp-id*) (set! tddd1@chi-internal-module (lambda (td1f2a@e td1f2b@r td1f2c@mr td1f2d@lex* td1f2e@rhs* td1f2f@mod** td1f30@kwd*) (call-with-values (lambda () (tddb5@parse-module td1f2a@e)) (lambda (td1f3e@td1f39 td1f3f@td1f3b td1f40@td1f3d) (let ((td1f44@e* td1f40@td1f3d) (td1f45@exp-id* td1f3f@td1f3b) (td1f46@name td1f3e@td1f39)) (let ((td1f4a@rib (tdb28@make-empty-rib))) (let ((td1f4c@e* (map (lambda (td1f4e@x) (tdb60@add-subst td1f4a@rib td1f4e@x)) (tdb72@syntax->list td1f44@e*)))) (call-with-values (lambda () (tddd3@chi-body* td1f4c@e* td1f2b@r td1f2c@mr td1f2d@lex* td1f2e@rhs* td1f2f@mod** td1f30@kwd* '() td1f4a@rib '#f)) (lambda (td1f60@td1f51 td1f61@td1f53 td1f62@td1f55 td1f63@td1f57 td1f64@td1f59 td1f65@td1f5b td1f66@td1f5d td1f67@td1f5f) (let ((td1f70@_exp* td1f67@td1f5f) (td1f71@kwd* td1f66@td1f5d) (td1f72@mod** td1f65@td1f5b) (td1f73@rhs* td1f64@td1f59) (td1f74@lex* td1f63@td1f57) (td1f75@mr td1f62@td1f55) (td1f76@r td1f61@td1f53) (td1f77@e* td1f60@td1f51)) (let ((td1f80@exp-lab* (vector-map (lambda (td1f84@x) (or (tdb8a@id->label (make-simple-struct 'stx '5 (list (tdb76@id->sym td1f84@x) (tdb46@stx-mark* td1f84@x) (list td1f4a@rib) '()))) (tde5b@syntax-violation '#f '"cannot find module export" td1f84@x))) td1f45@exp-id*)) (td1f81@mod** (cons td1f77@e* td1f72@mod**))) (if (not td1f46@name) (values td1f74@lex* td1f73@rhs* td1f45@exp-id* td1f80@exp-lab* td1f76@r td1f75@mr td1f81@mod** td1f71@kwd*) (let ((td1f86@lab (tdb00@gen-label 'module)) (td1f87@iface (make-simple-struct 'module-interface '4 (list (car (tdb46@stx-mark* td1f46@name)) (vector-map (lambda (td1f8a@x) (make-simple-struct 'stx '5 (list (tdb42@stx-expr td1f8a@x) (tdb46@stx-mark* td1f8a@x) '() '()))) td1f45@exp-id*) td1f80@exp-lab*)))) (values td1f74@lex* td1f73@rhs* (vector td1f46@name) (vector td1f86@lab) (cons (cons td1f86@lab (cons '$module td1f87@iface)) td1f76@r) (cons (cons td1f86@lab (cons '$module td1f87@iface)) td1f75@mr) td1f81@mod** td1f71@kwd*)))))))))))))) (set! td2878@tddd1@chi-internal-module tddd1@chi-internal-module) (set! tddd3@chi-body* (lambda (td1f8c@e* td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1f92@kwd* td1f93@exp* td1f94@rib td1f95@top?) (if (null? td1f8c@e*) (values td1f8c@e* td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1f92@kwd* td1f93@exp*) (let ((td1fa0@e (car td1f8c@e*))) (call-with-values (lambda () (tdb96@syntax-type td1fa0@e td1f8d@r)) (lambda (td1fa8@td1fa3 td1fa9@td1fa5 td1faa@td1fa7) (let ((td1fae@kwd td1faa@td1fa7) (td1faf@value td1fa9@td1fa5) (td1fb0@type td1fa8@td1fa3)) (let ((td1fb4@kwd* (if (tdb74@id? td1fae@kwd) (cons td1fae@kwd td1f92@kwd*) td1f92@kwd*))) (let ((td1fb6@t td1fb0@type)) (if (memv td1fb6@t '(define)) (call-with-values (lambda () (tdcfd@parse-define td1fa0@e)) (lambda (td1fbc@td1fb9 td1fbd@td1fbb) (let ((td1fc0@rhs td1fbd@td1fbb) (td1fc1@id td1fbc@td1fb9)) (begin (if (tdb80@bound-id-member? td1fc1@id td1fb4@kwd*) (tde5b@syntax-violation '#f '"cannot redefine keyword" td1fa0@e) (void)) (call-with-values (lambda () (tdb04@gen-define-label+loc td1fc1@id td1f94@rib)) (lambda (td1fc8@td1fc5 td1fc9@td1fc7) (let ((td1fcc@lex td1fc9@td1fc7) (td1fcd@lab td1fc8@td1fc5)) (begin (tdb2a@extend-rib! td1f94@rib td1fc1@id td1fcd@lab) (tddd3@chi-body* (cdr td1f8c@e*) (tdd0b@add-lexical td1fcd@lab td1fcc@lex td1f8d@r) td1f8e@mr (cons td1fcc@lex td1f8f@lex*) (cons td1fc0@rhs td1f90@rhs*) td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?))))))))) (if (memv td1fb6@t '(define-syntax)) (call-with-values (lambda () (tdcff@parse-define-syntax td1fa0@e)) (lambda (td1fd4@td1fd1 td1fd5@td1fd3) (let ((td1fd8@rhs td1fd5@td1fd3) (td1fd9@id td1fd4@td1fd1)) (begin (if (tdb80@bound-id-member? td1fd9@id td1fb4@kwd*) (tde5b@syntax-violation '#f '"cannot redefine keyword" td1fa0@e) (void)) (let ((td1fdc@lab (tdb06@gen-define-label td1fd9@id td1f94@rib)) (td1fdd@expanded-rhs (tddd5@expand-transformer td1fd8@rhs td1f8e@mr))) (begin (tdb2a@extend-rib! td1f94@rib td1fd9@id td1fdc@lab) (let ((td1fe0@b (tdbac@make-eval-transformer td1fdd@expanded-rhs))) (tddd3@chi-body* (cdr td1f8c@e*) (cons (cons td1fdc@lab td1fe0@b) td1f8d@r) (cons (cons td1fdc@lab td1fe0@b) td1f8e@mr) td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?)))))))) (if (memv td1fb6@t '(let-syntax letrec-syntax)) (let ((td1fe2@t td1fa0@e)) (let ((td1fe4@ls/false (tdd7b@syntax-dispatch td1fe2@t '(_ #(each (any any)) . each-any)))) (if (and td1fe4@ls/false (apply (lambda (td1fe6@xlhs* td1fe7@xrhs* td1fe8@xbody*) (if (not (tdb7c@valid-bound-ids? td1fe6@xlhs*)) (tde5b@syntax-violation '#f '"invalid identifiers" td1fa0@e) (void))) td1fe4@ls/false)) (apply (lambda (td1fec@xlhs* td1fed@xrhs* td1fee@xbody*) (let ((td1ff2@xlab* (map tdb00@gen-label td1fec@xlhs*))) (let ((td1ff4@xrib (tdb34@make-full-rib td1fec@xlhs* td1ff2@xlab*))) (let ((td1ff6@xb* (map (lambda (td1ff8@x) (tdbac@make-eval-transformer (tddd5@expand-transformer (if (eq? td1fb0@type 'let-syntax) td1ff8@x (tdb60@add-subst td1ff4@xrib td1ff8@x)) td1f8e@mr))) td1fed@xrhs*))) (tddd3@chi-body* (append (map (lambda (td1ffa@x) (tdb60@add-subst td1ff4@xrib td1ffa@x)) td1fee@xbody*) (cdr td1f8c@e*)) (append (map cons td1ff2@xlab* td1ff6@xb*) td1f8d@r) (append (map cons td1ff2@xlab* td1ff6@xb*) td1f8e@mr) td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?))))) td1fe4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1fe2@t)))) (if (memv td1fb6@t '(begin)) (let ((td1ffc@t td1fa0@e)) (let ((td1ffe@ls/false (tdd7b@syntax-dispatch td1ffc@t '(_ . each-any)))) (if td1ffe@ls/false (apply (lambda (td2000@x*) (tddd3@chi-body* (append td2000@x* (cdr td1f8c@e*)) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?)) td1ffe@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td1ffc@t)))) (if (memv td1fb6@t '(global-macro global-macro!)) (tddd3@chi-body* (cons (tdb60@add-subst td1f94@rib (tdd97@chi-global-macro td1faf@value td1fa0@e)) (cdr td1f8c@e*)) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?) (if (memv td1fb6@t '(local-macro local-macro!)) (tddd3@chi-body* (cons (tdb60@add-subst td1f94@rib (tdd95@chi-local-macro td1faf@value td1fa0@e)) (cdr td1f8c@e*)) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?) (if (memv td1fb6@t '(macro macro!)) (tddd3@chi-body* (cons (tdb60@add-subst td1f94@rib (tdd93@chi-macro td1faf@value td1fa0@e)) (cdr td1f8c@e*)) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?) (if (memv td1fb6@t '(module)) (call-with-values (lambda () (tddd1@chi-internal-module td1fa0@e td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd*)) (lambda (td2012@td2003 td2013@td2005 td2014@td2007 td2015@td2009 td2016@td200b td2017@td200d td2018@td200f td2019@td2011) (let ((td2022@kwd* td2019@td2011) (td2023@mod** td2018@td200f) (td2024@mr td2017@td200d) (td2025@r td2016@td200b) (td2026@m-exp-lab* td2015@td2009) (td2027@m-exp-id* td2014@td2007) (td2028@rhs* td2013@td2005) (td2029@lex* td2012@td2003)) (begin (vector-for-each (lambda (td2032@id td2033@lab) (tdb2a@extend-rib! td1f94@rib td2032@id td2033@lab)) td2027@m-exp-id* td2026@m-exp-lab*) (tddd3@chi-body* (cdr td1f8c@e*) td2025@r td2024@mr td2029@lex* td2028@rhs* td2023@mod** td2022@kwd* td1f93@exp* td1f94@rib td1f95@top?))))) (if (memv td1fb6@t '(library)) (begin (tde3d@library-expander (tdb88@stx->datum td1fa0@e)) (tddd3@chi-body* (cdr td1f8c@e*) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?)) (if (memv td1fb6@t '(export)) (let ((td2036@t td1fa0@e)) (let ((td2038@ls/false (tdd7b@syntax-dispatch td2036@t '(_ . each-any)))) (if td2038@ls/false (apply (lambda (td203a@exp-decl*) (tddd3@chi-body* (cdr td1f8c@e*) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* (append td203a@exp-decl* td1f93@exp*) td1f94@rib td1f95@top?)) td2038@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2036@t)))) (if (memv td1fb6@t '(import)) (let ((td203d@module-import? '#f) (td203f@module-import '#f) (td2041@library-import '#f)) (begin (set! td203d@module-import? (lambda (td2090@e) (let ((td2092@t td2090@e)) (let ((td2094@ls/false (tdd7b@syntax-dispatch td2092@t '(_ any)))) (if (and td2094@ls/false (apply (lambda (td2096@id) (tdb74@id? td2096@id)) td2094@ls/false)) (apply (lambda (td2098@id) '#t) td2094@ls/false) (let ((td209a@t td2092@t)) (let ((td209c@ls/false (tdd7b@syntax-dispatch td209a@t '(_ . each-any)))) (if td209c@ls/false (apply (lambda (td209e@imp*) '#f) td209c@ls/false) (let ((td20a0@t td209a@t)) (let ((td20a2@ls/false (tdd7b@syntax-dispatch td20a0@t '_))) (if td20a2@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"malformed import form" td2090@e)) td20a2@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td20a0@t)))))))))))) (set! td203f@module-import (lambda (td206e@e td206f@r) (let ((td2072@t td206e@e)) (let ((td2074@ls/false (tdd7b@syntax-dispatch td2072@t '(_ any)))) (if (and td2074@ls/false (apply (lambda (td2076@id) (tdb74@id? td2076@id)) td2074@ls/false)) (apply (lambda (td2078@id) (call-with-values (lambda () (tdb96@syntax-type td2078@id td206f@r)) (lambda (td2080@td207b td2081@td207d td2082@td207f) (let ((td2086@kwd td2082@td207f) (td2087@value td2081@td207d) (td2088@type td2080@td207b)) (let ((td208c@t td2088@type)) (if (memv td208c@t '($module)) (let ((td208e@iface td2087@value)) (values (tddcf@module-interface-exp-id* td208e@iface td2078@id) (tddc9@module-interface-exp-lab-vec td208e@iface))) (tde5b@syntax-violation '#f '"invalid import" td206e@e))))))) td2074@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2072@t)))))) (set! td2041@library-import (lambda (td2052@e) (let ((td2054@t td2052@e)) (let ((td2056@ls/false (tdd7b@syntax-dispatch td2054@t '(any . each-any)))) (if td2056@ls/false (apply (lambda (td2058@ctxt td2059@imp*) (call-with-values (lambda () (tdddd@parse-import-spec* (tde61@syntax->datum td2059@imp*))) (lambda (td2060@td205d td2061@td205f) (let ((td2064@subst-labels td2061@td205f) (td2065@subst-names td2060@td205d)) (values (vector-map (lambda (td2068@name) (tdb54@datum->stx td2058@ctxt td2068@name)) td2065@subst-names) td2064@subst-labels))))) td2056@ls/false) (let ((td206a@t td2054@t)) (let ((td206c@ls/false (tdd7b@syntax-dispatch td206a@t '_))) (if td206c@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid import form" td2052@e)) td206c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td206a@t))))))))) (begin (call-with-values (lambda () (if (td203d@module-import? td1fa0@e) (td203f@module-import td1fa0@e td1f8d@r) (td2041@library-import td1fa0@e))) (lambda (td2046@td2043 td2047@td2045) (let ((td204a@lab* td2047@td2045) (td204b@id* td2046@td2043)) (vector-for-each (lambda (td204e@id td204f@lab) (tdb2a@extend-rib! td1f94@rib td204e@id td204f@lab)) td204b@id* td204a@lab*)))) (tddd3@chi-body* (cdr td1f8c@e*) td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?)))) (if td1f95@top? (tddd3@chi-body* (cdr td1f8c@e*) td1f8d@r td1f8e@mr (cons (tdafc@gen-lexical 'dummy) td1f8f@lex*) (cons (cons 'top-expr td1fa0@e) td1f90@rhs*) td1f91@mod** td1fb4@kwd* td1f93@exp* td1f94@rib td1f95@top?) (values td1f8c@e* td1f8d@r td1f8e@mr td1f8f@lex* td1f90@rhs* td1f91@mod** td1fb4@kwd* td1f93@exp*)))))))))))))))))))))) (set! td2879@tddd3@chi-body* tddd3@chi-body*) (set! tddd5@expand-transformer (lambda (td20a4@expr td20a5@r) (let ((td20a8@rtc (tdde1@make-collector))) (let ((td20aa@expanded-rhs (let ((td20b4@td20ad tdde3@inv-collector) (td20b5@td20af tdde5@vis-collector) (td20b6@td20b1 td20a8@rtc) (td20b7@td20b3 (lambda (td20bc@x) (values)))) (let ((td20be@swap (lambda () (begin (let ((td20c0@t (td20b4@td20ad))) (begin (td20b4@td20ad td20b6@td20b1) (set! td20b6@td20b1 td20c0@t))) (let ((td20c2@t (td20b5@td20af))) (begin (td20b5@td20af td20b7@td20b3) (set! td20b7@td20b3 td20c2@t))))))) (dynamic-wind td20be@swap (lambda () (tdd9d@chi-expr td20a4@expr td20a5@r td20a5@r)) td20be@swap))))) (begin (for-each (let ((td20c4@mark-visit (tdde5@vis-collector))) (lambda (td20c6@x) (begin (td98a@td7d8@invoke-library td20c6@x) (td20c4@mark-visit td20c6@x)))) (td20a8@rtc)) td20aa@expanded-rhs))))) (set! td287a@tddd5@expand-transformer tddd5@expand-transformer) (set! tddd7@parse-exports (lambda (td20c8@exp*) (let td20d0@f ((td20ca@exp* td20c8@exp*) (td20cb@int* '()) (td20cc@ext* '())) (if (null? td20ca@exp*) (begin (if (not (tdb7c@valid-bound-ids? td20cc@ext*)) (tde5b@syntax-violation 'export '"invalid exports" (tddb1@find-dups td20cc@ext*)) (void)) (values (map tde61@syntax->datum td20cc@ext*) td20cb@int*)) (let ((td20d2@t (car td20ca@exp*))) (let ((td20d4@ls/false (tdd7b@syntax-dispatch td20d2@t '(any . #(each (any any)))))) (if td20d4@ls/false (apply (lambda (td20d6@rename td20d7@i* td20d8@e*) (begin (if (not (and (eq? (tde61@syntax->datum td20d6@rename) 'rename) (for-all tdb74@id? td20d7@i*) (for-all tdb74@id? td20d8@e*))) (tde5b@syntax-violation 'export '"invalid export specifier" (car td20ca@exp*)) (void)) (td20d0@f (cdr td20ca@exp*) (append td20d7@i* td20cb@int*) (append td20d8@e* td20cc@ext*)))) td20d4@ls/false) (let ((td20dc@t td20d2@t)) (let ((td20de@ls/false (tdd7b@syntax-dispatch td20dc@t 'any))) (if td20de@ls/false (apply (lambda (td20e0@ie) (begin (if (not (tdb74@id? td20e0@ie)) (tde5b@syntax-violation 'export '"invalid export" td20e0@ie) (void)) (td20d0@f (cdr td20ca@exp*) (cons td20e0@ie td20cb@int*) (cons td20e0@ie td20cc@ext*)))) td20de@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td20dc@t))))))))))) (set! td287b@tddd7@parse-exports tddd7@parse-exports) (set! tddd9@parse-library-name (lambda (td20e2@spec) (let ((td20e5@parse '#f)) (begin (set! td20e5@parse (lambda (td20f2@x) (let ((td20f4@t td20f2@x)) (let ((td20f6@ls/false (tdd7b@syntax-dispatch td20f4@t '(each-any)))) (if (and td20f6@ls/false (apply (lambda (td20f8@v*) (for-all (lambda (td20fa@x) (let ((td20fc@x (tde61@syntax->datum td20fa@x))) (and (integer? td20fc@x) (exact? td20fc@x)))) td20f8@v*)) td20f6@ls/false)) (apply (lambda (td20fe@v*) (values '() (map tde61@syntax->datum td20fe@v*))) td20f6@ls/false) (let ((td2100@t td20f4@t)) (let ((td2102@ls/false (tdd7b@syntax-dispatch td2100@t '(any . any)))) (if (and td2102@ls/false (apply (lambda (td2104@x td2105@rest) (symbol? (tde61@syntax->datum td2104@x))) td2102@ls/false)) (apply (lambda (td2108@x td2109@rest) (call-with-values (lambda () (td20e5@parse td2109@rest)) (lambda (td2110@td210d td2111@td210f) (let ((td2114@v* td2111@td210f) (td2115@x* td2110@td210d)) (values (cons (tde61@syntax->datum td2108@x) td2115@x*) td2114@v*))))) td2102@ls/false) (let ((td2118@t td2100@t)) (let ((td211a@ls/false (tdd7b@syntax-dispatch td2118@t '()))) (if td211a@ls/false (apply (lambda () (values '() '())) td211a@ls/false) (let ((td211c@t td2118@t)) (let ((td211e@ls/false (tdd7b@syntax-dispatch td211c@t '_))) (if td211e@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid library name" td20e2@spec)) td211e@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td211c@t))))))))))))))) (call-with-values (lambda () (td20e5@parse td20e2@spec)) (lambda (td20ea@td20e7 td20eb@td20e9) (let ((td20ee@ver* td20eb@td20e9) (td20ef@name* td20ea@td20e7)) (begin (if (null? td20ef@name*) (tde5b@syntax-violation '#f '"empty library name" td20e2@spec) (void)) (values td20ef@name* td20ee@ver*))))))))) (set! td287c@tddd9@parse-library-name tddd9@parse-library-name) (set! tdddb@parse-library (lambda (td2120@e) (let ((td2122@t td2120@e)) (let ((td2124@ls/false (tdd7b@syntax-dispatch td2122@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and td2124@ls/false (apply (lambda (td2126@library td2127@name* td2128@export td2129@exp* td212a@import td212b@imp* td212c@b*) (and (eq? (tde61@syntax->datum td2128@export) 'export) (eq? (tde61@syntax->datum td212a@import) 'import) (eq? (tde61@syntax->datum td2126@library) 'library))) td2124@ls/false)) (apply (lambda (td2134@library td2135@name* td2136@export td2137@exp* td2138@import td2139@imp* td213a@b*) (values td2135@name* td2137@exp* td2139@imp* td213a@b*)) td2124@ls/false) (let ((td2142@t td2122@t)) (let ((td2144@ls/false (tdd7b@syntax-dispatch td2142@t '_))) (if td2144@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"malformed library" td2120@e)) td2144@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2142@t))))))))) (set! td287d@tdddb@parse-library tdddb@parse-library) (set! tdddd@parse-import-spec* (let ((td2147@idsyn? '#f) (td2149@dup-error '#f) (td214b@merge-substs '#f) (td214d@exclude* '#f) (td214f@find* '#f) (td2151@rem* '#f) (td2153@remove-dups '#f) (td2155@parse-library-name '#f) (td2157@import-library '#f) (td2159@get-import '#f) (td215b@add-imports! '#f)) (begin (set! td2147@idsyn? (lambda (td2350@x) (symbol? (tde61@syntax->datum td2350@x)))) (set! td2149@dup-error (lambda (td234e@name) (tde5b@syntax-violation 'import '"two imports with different bindings" td234e@name))) (set! td214b@merge-substs (lambda (td233c@s td233d@subst) (let ((td2341@insert-to-subst '#f)) (begin (set! td2341@insert-to-subst (lambda (td2342@a td2343@subst) (let ((td2346@name (car td2342@a)) (td2347@label (cdr td2342@a))) (let ((td234a@t (assq td2346@name td2343@subst))) (if td234a@t ((lambda (td234c@x) (if (eq? (cdr td234c@x) td2347@label) td2343@subst (td2149@dup-error td2346@name))) td234a@t) (cons td2342@a td2343@subst)))))) (if (null? td233c@s) td233d@subst (td2341@insert-to-subst (car td233c@s) (td214b@merge-substs (cdr td233c@s) td233d@subst))))))) (set! td214d@exclude* (lambda (td230c@sym* td230d@subst) (let ((td2311@exclude '#f)) (begin (set! td2311@exclude (lambda (td232a@sym td232b@subst) (if (null? td232b@subst) (tde5b@syntax-violation 'import '"cannot rename unbound identifier" td232a@sym) (if (eq? td232a@sym (caar td232b@subst)) (values (cdar td232b@subst) (cdr td232b@subst)) (let ((td232e@a (car td232b@subst))) (call-with-values (lambda () (td2311@exclude td232a@sym (cdr td232b@subst))) (lambda (td2334@td2331 td2335@td2333) (let ((td2338@subst td2335@td2333) (td2339@old td2334@td2331)) (values td2339@old (cons td232e@a td2338@subst)))))))))) (if (null? td230c@sym*) (values '() td230d@subst) (call-with-values (lambda () (td2311@exclude (car td230c@sym*) td230d@subst)) (lambda (td2316@td2313 td2317@td2315) (let ((td231a@subst td2317@td2315) (td231b@old td2316@td2313)) (call-with-values (lambda () (td214d@exclude* (cdr td230c@sym*) td231a@subst)) (lambda (td2322@td231f td2323@td2321) (let ((td2326@subst td2323@td2321) (td2327@old* td2322@td231f)) (values (cons td231b@old td2327@old*) td2326@subst)))))))))))) (set! td214f@find* (lambda (td2304@sym* td2305@subst) (map (lambda (td2308@x) (let ((td230a@t (assq td2308@x td2305@subst))) (if td230a@t (cdr td230a@t) (tde5b@syntax-violation 'import '"cannot find identifier" td2308@x)))) td2304@sym*))) (set! td2151@rem* (lambda (td22fc@sym* td22fd@subst) (let td2302@f ((td2300@subst td22fd@subst)) (if (null? td2300@subst) '() (if (memq (caar td2300@subst) td22fc@sym*) (td2302@f (cdr td2300@subst)) (cons (car td2300@subst) (td2302@f (cdr td2300@subst)))))))) (set! td2153@remove-dups (lambda (td22fa@ls) (if (null? td22fa@ls) '() (if (memq (car td22fa@ls) (cdr td22fa@ls)) (td2153@remove-dups (cdr td22fa@ls)) (cons (car td22fa@ls) (td2153@remove-dups (cdr td22fa@ls))))))) (set! td2155@parse-library-name (lambda (td2212@spec) (let ((td2215@subversion? '#f) (td2217@subversion-pred '#f) (td2219@version-pred '#f)) (begin (set! td2215@subversion? (lambda (td22f6@x) (let ((td22f8@x (tde61@syntax->datum td22f6@x))) (and (integer? td22f8@x) (exact? td22f8@x) (>= td22f8@x '0))))) (set! td2217@subversion-pred (lambda (td2296@x*) (let ((td2298@t td2296@x*)) (let ((td229a@ls/false (tdd7b@syntax-dispatch td2298@t 'any))) (if (and td229a@ls/false (apply (lambda (td229c@n) (td2215@subversion? td229c@n)) td229a@ls/false)) (apply (lambda (td229e@n) (lambda (td22a0@x) (= td22a0@x (tde61@syntax->datum td229e@n)))) td229a@ls/false) (let ((td22a2@t td2298@t)) (let ((td22a4@ls/false (tdd7b@syntax-dispatch td22a2@t '(any . each-any)))) (if (and td22a4@ls/false (apply (lambda (td22a6@p? td22a7@sub*) (eq? (tde61@syntax->datum td22a6@p?) 'and)) td22a4@ls/false)) (apply (lambda (td22aa@p? td22ab@sub*) (let ((td22ae@p* (map td2217@subversion-pred td22ab@sub*))) (lambda (td22b0@x) (for-all (lambda (td22b2@p) (td22b2@p td22b0@x)) td22ae@p*)))) td22a4@ls/false) (let ((td22b4@t td22a2@t)) (let ((td22b6@ls/false (tdd7b@syntax-dispatch td22b4@t '(any . each-any)))) (if (and td22b6@ls/false (apply (lambda (td22b8@p? td22b9@sub*) (eq? (tde61@syntax->datum td22b8@p?) 'or)) td22b6@ls/false)) (apply (lambda (td22bc@p? td22bd@sub*) (let ((td22c0@p* (map td2217@subversion-pred td22bd@sub*))) (lambda (td22c2@x) (exists (lambda (td22c4@p) (td22c4@p td22c2@x)) td22c0@p*)))) td22b6@ls/false) (let ((td22c6@t td22b4@t)) (let ((td22c8@ls/false (tdd7b@syntax-dispatch td22c6@t '(any any)))) (if (and td22c8@ls/false (apply (lambda (td22ca@p? td22cb@sub) (eq? (tde61@syntax->datum td22ca@p?) 'not)) td22c8@ls/false)) (apply (lambda (td22ce@p? td22cf@sub) (let ((td22d2@p (td2217@subversion-pred td22cf@sub))) (lambda (td22d4@x) (not (td22d2@p td22d4@x))))) td22c8@ls/false) (let ((td22d6@t td22c6@t)) (let ((td22d8@ls/false (tdd7b@syntax-dispatch td22d6@t '(any any)))) (if (and td22d8@ls/false (apply (lambda (td22da@p? td22db@n) (and (eq? (tde61@syntax->datum td22da@p?) '<=) (td2215@subversion? td22db@n))) td22d8@ls/false)) (apply (lambda (td22de@p? td22df@n) (lambda (td22e2@x) (<= td22e2@x (tde61@syntax->datum td22df@n)))) td22d8@ls/false) (let ((td22e4@t td22d6@t)) (let ((td22e6@ls/false (tdd7b@syntax-dispatch td22e4@t '(any any)))) (if (and td22e6@ls/false (apply (lambda (td22e8@p? td22e9@n) (and (eq? (tde61@syntax->datum td22e8@p?) '>=) (td2215@subversion? td22e9@n))) td22e6@ls/false)) (apply (lambda (td22ec@p? td22ed@n) (lambda (td22f0@x) (>= td22f0@x (tde61@syntax->datum td22ed@n)))) td22e6@ls/false) (let ((td22f2@t td22e4@t)) (let ((td22f4@ls/false (tdd7b@syntax-dispatch td22f2@t '_))) (if td22f4@ls/false (apply (lambda () (tde5b@syntax-violation 'import '"invalid sub-version spec" td2212@spec td2296@x*)) td22f4@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td22f2@t)))))))))))))))))))))))) (set! td2219@version-pred (lambda (td2246@x*) (let ((td2248@t td2246@x*)) (let ((td224a@ls/false (tdd7b@syntax-dispatch td2248@t '()))) (if td224a@ls/false (apply (lambda () (lambda (td224c@x) '#t)) td224a@ls/false) (let ((td224e@t td2248@t)) (let ((td2250@ls/false (tdd7b@syntax-dispatch td224e@t '(any . each-any)))) (if (and td2250@ls/false (apply (lambda (td2252@c td2253@ver*) (eq? (tde61@syntax->datum td2252@c) 'and)) td2250@ls/false)) (apply (lambda (td2256@c td2257@ver*) (let ((td225a@p* (map td2219@version-pred td2257@ver*))) (lambda (td225c@x) (for-all (lambda (td225e@p) (td225e@p td225c@x)) td225a@p*)))) td2250@ls/false) (let ((td2260@t td224e@t)) (let ((td2262@ls/false (tdd7b@syntax-dispatch td2260@t '(any . each-any)))) (if (and td2262@ls/false (apply (lambda (td2264@c td2265@ver*) (eq? (tde61@syntax->datum td2264@c) 'or)) td2262@ls/false)) (apply (lambda (td2268@c td2269@ver*) (let ((td226c@p* (map td2219@version-pred td2269@ver*))) (lambda (td226e@x) (exists (lambda (td2270@p) (td2270@p td226e@x)) td226c@p*)))) td2262@ls/false) (let ((td2272@t td2260@t)) (let ((td2274@ls/false (tdd7b@syntax-dispatch td2272@t '(any any)))) (if (and td2274@ls/false (apply (lambda (td2276@c td2277@ver) (eq? (tde61@syntax->datum td2276@c) 'not)) td2274@ls/false)) (apply (lambda (td227a@c td227b@ver) (let ((td227e@p (td2219@version-pred td227b@ver))) (lambda (td2280@x) (not (td227e@p td2280@x))))) td2274@ls/false) (let ((td2282@t td2272@t)) (let ((td2284@ls/false (tdd7b@syntax-dispatch td2282@t 'each-any))) (if td2284@ls/false (apply (lambda (td2286@sub*) (let ((td2288@p* (map td2217@subversion-pred td2286@sub*))) (lambda (td228a@x) (let td2290@f ((td228c@p* td2288@p*) (td228d@x td228a@x)) (if (null? td228c@p*) '#t (if (null? td228d@x) '#f (and ((car td228c@p*) (car td228d@x)) (td2290@f (cdr td228c@p*) (cdr td228d@x))))))))) td2284@ls/false) (let ((td2292@t td2282@t)) (let ((td2294@ls/false (tdd7b@syntax-dispatch td2292@t '_))) (if td2294@ls/false (apply (lambda () (tde5b@syntax-violation 'import '"invalid version spec" td2212@spec td2246@x*)) td2294@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2292@t))))))))))))))))))))) (let td221c@f ((td221a@x td2212@spec)) (let ((td221e@t td221a@x)) (let ((td2220@ls/false (tdd7b@syntax-dispatch td221e@t '(each-any)))) (if td2220@ls/false (apply (lambda (td2222@version-spec*) (values '() (td2219@version-pred td2222@version-spec*))) td2220@ls/false) (let ((td2224@t td221e@t)) (let ((td2226@ls/false (tdd7b@syntax-dispatch td2224@t '(any . any)))) (if (and td2226@ls/false (apply (lambda (td2228@x td2229@x*) (td2147@idsyn? td2228@x)) td2226@ls/false)) (apply (lambda (td222c@x td222d@x*) (call-with-values (lambda () (td221c@f td222d@x*)) (lambda (td2234@td2231 td2235@td2233) (let ((td2238@pred td2235@td2233) (td2239@name td2234@td2231)) (values (cons (tde61@syntax->datum td222c@x) td2239@name) td2238@pred))))) td2226@ls/false) (let ((td223c@t td2224@t)) (let ((td223e@ls/false (tdd7b@syntax-dispatch td223c@t '()))) (if td223e@ls/false (apply (lambda () (values '() (lambda (td2240@x) '#t))) td223e@ls/false) (let ((td2242@t td223c@t)) (let ((td2244@ls/false (tdd7b@syntax-dispatch td2242@t '_))) (if td2244@ls/false (apply (lambda () (tde5b@syntax-violation '#f '"invalid import spec" td2212@spec)) td2244@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2242@t)))))))))))))))))) (set! td2157@import-library (lambda (td2202@spec*) (call-with-values (lambda () (td2155@parse-library-name td2202@spec*)) (lambda (td2208@td2205 td2209@td2207) (let ((td220c@pred td2209@td2207) (td220d@name td2208@td2205)) (begin (if (null? td220d@name) (tde5b@syntax-violation 'import '"empty library name" td2202@spec*) (void)) (let ((td2210@lib (td983@td7ca@find-library-by-name td220d@name))) (begin (if (not td2210@lib) (tde5b@syntax-violation 'import '"cannot find library with required name" td220d@name) (void)) (if (not (td220c@pred (td95d@td77e@library-version td2210@lib))) (tde5b@syntax-violation 'import '"library does not satisfy version specification" td2202@spec* td2210@lib) (void)) ((tdde7@imp-collector) td2210@lib) (td965@td78e@library-subst td2210@lib))))))))) (set! td2159@get-import (lambda (td2174@spec) (let ((td2176@t td2174@spec)) (let ((td2178@ls/false (tdd7b@syntax-dispatch td2176@t '(any . each-any)))) (if (and td2178@ls/false (apply (lambda (td217a@x td217b@x*) (not (memq (tde61@syntax->datum td217a@x) '(for rename except only prefix library)))) td2178@ls/false)) (apply (lambda (td217e@x td217f@x*) (td2157@import-library (cons td217e@x td217f@x*))) td2178@ls/false) (let ((td2182@t td2176@t)) (let ((td2184@ls/false (tdd7b@syntax-dispatch td2182@t '(any any . #(each (any any)))))) (if (and td2184@ls/false (apply (lambda (td2186@rename td2187@isp td2188@old* td2189@new*) (and (eq? (tde61@syntax->datum td2186@rename) 'rename) (for-all td2147@idsyn? td2188@old*) (for-all td2147@idsyn? td2189@new*))) td2184@ls/false)) (apply (lambda (td218e@rename td218f@isp td2190@old* td2191@new*) (let ((td2196@subst (td2159@get-import td218f@isp)) (td2197@old* (map tde61@syntax->datum td2190@old*)) (td2198@new* (map tde61@syntax->datum td2191@new*))) (let ((td219c@old-label* (td214f@find* td2197@old* td2196@subst))) (let ((td219e@subst (td2151@rem* td2197@old* td2196@subst))) (td214b@merge-substs (map cons td2198@new* td219c@old-label*) td219e@subst))))) td2184@ls/false) (let ((td21a0@t td2182@t)) (let ((td21a2@ls/false (tdd7b@syntax-dispatch td21a0@t '(any any . each-any)))) (if (and td21a2@ls/false (apply (lambda (td21a4@except td21a5@isp td21a6@sym*) (and (eq? (tde61@syntax->datum td21a4@except) 'except) (for-all td2147@idsyn? td21a6@sym*))) td21a2@ls/false)) (apply (lambda (td21aa@except td21ab@isp td21ac@sym*) (let ((td21b0@subst (td2159@get-import td21ab@isp))) (td2151@rem* (map tde61@syntax->datum td21ac@sym*) td21b0@subst))) td21a2@ls/false) (let ((td21b2@t td21a0@t)) (let ((td21b4@ls/false (tdd7b@syntax-dispatch td21b2@t '(any any . each-any)))) (if (and td21b4@ls/false (apply (lambda (td21b6@only td21b7@isp td21b8@sym*) (and (eq? (tde61@syntax->datum td21b6@only) 'only) (for-all td2147@idsyn? td21b8@sym*))) td21b4@ls/false)) (apply (lambda (td21bc@only td21bd@isp td21be@sym*) (let ((td21c2@subst (td2159@get-import td21bd@isp)) (td21c3@sym* (map tde61@syntax->datum td21be@sym*))) (let ((td21c6@sym* (td2153@remove-dups td21c3@sym*))) (let ((td21c8@lab* (td214f@find* td21c6@sym* td21c2@subst))) (map cons td21c6@sym* td21c8@lab*))))) td21b4@ls/false) (let ((td21ca@t td21b2@t)) (let ((td21cc@ls/false (tdd7b@syntax-dispatch td21ca@t '(any any any)))) (if (and td21cc@ls/false (apply (lambda (td21ce@prefix td21cf@isp td21d0@p) (and (eq? (tde61@syntax->datum td21ce@prefix) 'prefix) (td2147@idsyn? td21d0@p))) td21cc@ls/false)) (apply (lambda (td21d4@prefix td21d5@isp td21d6@p) (let ((td21da@subst (td2159@get-import td21d5@isp)) (td21db@prefix (symbol->string (tde61@syntax->datum td21d6@p)))) (map (lambda (td21de@x) (cons (string->symbol (string-append td21db@prefix (symbol->string (car td21de@x)))) (cdr td21de@x))) td21da@subst))) td21cc@ls/false) (let ((td21e0@t td21ca@t)) (let ((td21e2@ls/false (tdd7b@syntax-dispatch td21e0@t '(any each-any)))) (if (and td21e2@ls/false (apply (lambda (td21e4@library td21e5@spec*) (eq? (tde61@syntax->datum td21e4@library) 'library)) td21e2@ls/false)) (apply (lambda (td21e8@library td21e9@spec*) (td2157@import-library td21e9@spec*)) td21e2@ls/false) (let ((td21ec@t td21e0@t)) (let ((td21ee@ls/false (tdd7b@syntax-dispatch td21ec@t '(any any . any)))) (if (and td21ee@ls/false (apply (lambda (td21f0@for td21f1@isp td21f2@rest) (eq? (tde61@syntax->datum td21f0@for) 'for)) td21ee@ls/false)) (apply (lambda (td21f6@for td21f7@isp td21f8@rest) (td2159@get-import td21f7@isp)) td21ee@ls/false) (let ((td21fc@t td21ec@t)) (let ((td21fe@ls/false (tdd7b@syntax-dispatch td21fc@t 'any))) (if td21fe@ls/false (apply (lambda (td2200@spec) (tde5b@syntax-violation 'import '"invalid import spec" td2200@spec)) td21fe@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td21fc@t))))))))))))))))))))))))))) (set! td215b@add-imports! (lambda (td2164@imp td2165@h) (let ((td2168@subst (td2159@get-import td2164@imp))) (for-each (lambda (td216a@x) (let ((td216c@name (car td216a@x)) (td216d@label (cdr td216a@x))) (let ((td2170@t (hashtable-ref td2165@h td216c@name '#f))) (if td2170@t ((lambda (td2172@l) (if (not (eq? td2172@l td216d@label)) (td2149@dup-error td216c@name) (void))) td2170@t) (hashtable-set! td2165@h td216c@name td216d@label))))) td2168@subst)))) (lambda (td215c@imp*) (let td2162@f ((td215e@imp* td215c@imp*) (td215f@h (make-eq-hashtable))) (if (null? td215e@imp*) (hashtable-entries td215f@h) (begin (td215b@add-imports! (car td215e@imp*) td215f@h) (td2162@f (cdr td215e@imp*) td215f@h)))))))) (set! td287e@tdddd@parse-import-spec* tdddd@parse-import-spec*) (set! tdddf@make-top-rib (lambda (td2352@names td2353@labels) (let ((td2356@rib (tdb28@make-empty-rib))) (begin (vector-for-each (lambda (td2358@name td2359@label) (begin (if (not (symbol? td2358@name)) (error 'make-top-rib '"BUG: not a symbol" td2358@name) (void)) (tdb2c@extend-rib/nc! td2356@rib (make-simple-struct 'stx '5 (list td2358@name tdaf8@top-mark* '() '())) td2359@label))) td2352@names td2353@labels) td2356@rib)))) (set! td287f@tdddf@make-top-rib tdddf@make-top-rib) (set! tdde1@make-collector (lambda () (let ((td235c@ls '())) (lambda td2360 (let ((td2361 (length td2360))) (if (= td2361 '0) (apply (lambda () td235c@ls) td2360) (if (= td2361 '1) (apply (lambda (td235e@x) (set! td235c@ls (tdaf1@set-cons td235e@x td235c@ls))) td2360) (error 'apply '"invalid arg count")))))))) (set! td2880@tdde1@make-collector tdde1@make-collector) (set! tdde3@inv-collector (td6be@td59d@make-parameter (lambda td2362@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (td2364@x) (begin (if (not (procedure? td2364@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" td2364@x) (void)) td2364@x)))) (set! td2881@tdde3@inv-collector tdde3@inv-collector) (set! tdde5@vis-collector (td6be@td59d@make-parameter (lambda td2366@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (td2368@x) (begin (if (not (procedure? td2368@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" td2368@x) (void)) td2368@x)))) (set! td2882@tdde5@vis-collector tdde5@vis-collector) (set! tdde7@imp-collector (td6be@td59d@make-parameter (lambda td236a@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (td236c@x) (begin (if (not (procedure? td236c@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" td236c@x) (void)) td236c@x)))) (set! td2883@tdde7@imp-collector tdde7@imp-collector) (set! tdde9@chi-library-internal (lambda (td236e@e* td236f@rib td2370@top?) (call-with-values (lambda () (tddd3@chi-body* td236e@e* '() '() '() '() '() '() '() td236f@rib td2370@top?)) (lambda (td2384@td2375 td2385@td2377 td2386@td2379 td2387@td237b td2388@td237d td2389@td237f td238a@td2381 td238b@td2383) (let ((td2394@exp* td238b@td2383) (td2395@_kwd* td238a@td2381) (td2396@mod** td2389@td237f) (td2397@rhs* td2388@td237d) (td2398@lex* td2387@td237b) (td2399@mr td2386@td2379) (td239a@r td2385@td2377) (td239b@e* td2384@td2375)) (values (append (apply append (reverse td2396@mod**)) td239b@e*) td239a@r td2399@mr (reverse td2398@lex*) (reverse td2397@rhs*) td2394@exp*)))))) (set! td2884@tdde9@chi-library-internal tdde9@chi-library-internal) (set! tddeb@chi-interaction-expr (lambda (td23a4@e td23a5@rib td23a6@r) (call-with-values (lambda () (tddd3@chi-body* (list td23a4@e) td23a6@r td23a6@r '() '() '() '() '() td23a5@rib '#t)) (lambda (td23ba@td23ab td23bb@td23ad td23bc@td23af td23bd@td23b1 td23be@td23b3 td23bf@td23b5 td23c0@td23b7 td23c1@td23b9) (let ((td23ca@_exp* td23c1@td23b9) (td23cb@_kwd* td23c0@td23b7) (td23cc@mod** td23bf@td23b5) (td23cd@rhs* td23be@td23b3) (td23ce@lex* td23bd@td23b1) (td23cf@mr td23bc@td23af) (td23d0@r td23bb@td23ad) (td23d1@e* td23ba@td23ab)) (let ((td23da@e* (tddab@expand-interaction-rhs*/init* (reverse td23ce@lex*) (reverse td23cd@rhs*) (append (apply append (reverse td23cc@mod**)) td23d1@e*) td23d0@r td23cf@mr))) (let ((td23dc@e (if (null? td23da@e*) (tdada@tda35@build-void) (if (null? (cdr td23da@e*)) (car td23da@e*) (tdad9@tda33@build-sequence '#f td23da@e*))))) (values td23dc@e td23d0@r)))))))) (set! td2885@tddeb@chi-interaction-expr tddeb@chi-interaction-expr) (set! tdded@library-body-expander (lambda (td23de@name td23df@main-exp* td23e0@imp* td23e1@b* td23e2@top?) (let ((td23e9@itc '#f)) (begin (set! td23e9@itc (tdde1@make-collector)) (let ((td23f2@td23eb tdde7@imp-collector) (td23f3@td23ed tde6b@top-level-context) (td23f4@td23ef td23e9@itc) (td23f5@td23f1 '#f)) (let ((td23fa@swap (lambda () (begin (let ((td23fc@t (td23f2@td23eb))) (begin (td23f2@td23eb td23f4@td23ef) (set! td23f4@td23ef td23fc@t))) (let ((td23fe@t (td23f3@td23ed))) (begin (td23f3@td23ed td23f5@td23f1) (set! td23f5@td23f1 td23fe@t))))))) (dynamic-wind td23fa@swap (lambda () (call-with-values (lambda () (tdddd@parse-import-spec* td23e0@imp*)) (lambda (td2404@td2401 td2405@td2403) (let ((td2408@subst-labels td2405@td2403) (td2409@subst-names td2404@td2401)) (let ((td240c@rib (tdddf@make-top-rib td2409@subst-names td2408@subst-labels))) (let ((td240f@wrap '#f)) (begin (set! td240f@wrap (lambda (td248a@x) (make-simple-struct 'stx '5 (list td248a@x tdaf8@top-mark* (list td240c@rib) '())))) (let ((td2410@b* (map td240f@wrap td23e1@b*)) (td2411@main-exp* (map td240f@wrap td23df@main-exp*)) (td2412@rtc (tdde1@make-collector)) (td2413@vtc (tdde1@make-collector))) (let ((td2420@td2419 tdde3@inv-collector) (td2421@td241b tdde5@vis-collector) (td2422@td241d td2412@rtc) (td2423@td241f td2413@vtc)) (let ((td2428@swap (lambda () (begin (let ((td242a@t (td2420@td2419))) (begin (td2420@td2419 td2422@td241d) (set! td2422@td241d td242a@t))) (let ((td242c@t (td2421@td241b))) (begin (td2421@td241b td2423@td241f) (set! td2423@td241f td242c@t))))))) (dynamic-wind td2428@swap (lambda () (call-with-values (lambda () (tdde9@chi-library-internal td2410@b* td240c@rib td23e2@top?)) (lambda (td243a@td242f td243b@td2431 td243c@td2433 td243d@td2435 td243e@td2437 td243f@td2439) (let ((td2446@internal-exp* td243f@td2439) (td2447@rhs* td243e@td2437) (td2448@lex* td243d@td2435) (td2449@mr td243c@td2433) (td244a@r td243b@td2431) (td244b@init* td243a@td242f)) (call-with-values (lambda () (tddd7@parse-exports (append td2411@main-exp* td2446@internal-exp*))) (lambda (td2456@td2453 td2457@td2455) (let ((td245a@exp-id* td2457@td2455) (td245b@exp-name* td2456@td2453)) (begin (tdb30@seal-rib! td240c@rib) (let ((td245e@init* (tdd99@chi-expr* td244b@init* td244a@r td2449@mr))) (let ((td2460@rhs* (tddad@chi-rhs* td2447@rhs* td244a@r td2449@mr))) (begin (tdb32@unseal-rib! td240c@rib) (let ((td2462@loc* (map tdafe@gen-global td2448@lex*)) (td2463@export-subst (tde45@make-export-subst td245b@exp-name* td245a@exp-id*))) (let ((td2467@errstr '#f)) (begin (set! td2467@errstr '"attempt to export mutated variable") (call-with-values (lambda () (tde47@make-export-env/macros td2448@lex* td2462@loc* td244a@r)) (lambda (td246e@td2469 td246f@td246b td2470@td246d) (let ((td2474@macro* td2470@td246d) (td2475@global* td246f@td246b) (td2476@export-env td246e@td2469)) (begin (for-each (lambda (td247a@s) (let ((td247c@name (car td247a@s)) (td247d@label (cdr td247a@s))) (let ((td2480@p (assq td247d@label td2476@export-env))) (if td2480@p (let ((td2482@b (cdr td2480@p))) (let ((td2484@type (car td2482@b))) (if (eq? td2484@type 'mutable) (tde5b@syntax-violation 'export td2467@errstr td247c@name) (void)))) (void))))) td2463@export-subst) (let ((td2486@invoke-body (tdadf@tda3f@build-library-letrec* '#f td23de@name td2448@lex* td2462@loc* td2460@rhs* (if (null? td245e@init*) (tdada@tda35@build-void) (tdad9@tda33@build-sequence '#f td245e@init*)))) (td2487@invoke-definitions (map tdad6@td992@build-global-define (map cdr td2475@global*)))) (values (td23e9@itc) (td2412@rtc) (td2413@vtc) (tdad9@tda33@build-sequence '#f (append td2487@invoke-definitions (list td2486@invoke-body))) td2474@macro* td2463@export-subst td2476@export-env)))))))))))))))))))) td2428@swap))))))))))) td23fa@swap))))))) (set! td2886@tdded@library-body-expander tdded@library-body-expander) (set! tddef@core-library-expander (lambda (td248c@e td248d@verify-name) (call-with-values (lambda () (tdddb@parse-library td248c@e)) (lambda (td2498@td2491 td2499@td2493 td249a@td2495 td249b@td2497) (let ((td24a0@b* td249b@td2497) (td24a1@imp* td249a@td2495) (td24a2@exp* td2499@td2493) (td24a3@name* td2498@td2491)) (call-with-values (lambda () (tddd9@parse-library-name td24a3@name*)) (lambda (td24ac@td24a9 td24ad@td24ab) (let ((td24b0@ver td24ad@td24ab) (td24b1@name td24ac@td24a9)) (begin (td248d@verify-name td24b1@name) (call-with-values (lambda () (tdded@library-body-expander td24b1@name td24a2@exp* td24a1@imp* td24a0@b* '#f)) (lambda (td24c2@td24b5 td24c3@td24b7 td24c4@td24b9 td24c5@td24bb td24c6@td24bd td24c7@td24bf td24c8@td24c1) (let ((td24d0@export-env td24c8@td24c1) (td24d1@export-subst td24c7@td24bf) (td24d2@visit-code td24c6@td24bd) (td24d3@invoke-code td24c5@td24bb) (td24d4@visit-req* td24c4@td24b9) (td24d5@invoke-req* td24c3@td24b7) (td24d6@imp* td24c2@td24b5)) (values td24b1@name td24b0@ver td24d6@imp* td24d5@invoke-req* td24d4@visit-req* td24d3@invoke-code td24d2@visit-code td24d1@export-subst td24d0@export-env))))))))))))) (set! td2887@tddef@core-library-expander tddef@core-library-expander) (set! tddf1@parse-top-level-program (lambda (td24de@e*) (let ((td24e0@t td24de@e*)) (let ((td24e2@ls/false (tdd7b@syntax-dispatch td24e0@t '((any . each-any) . each-any)))) (if (and td24e2@ls/false (apply (lambda (td24e4@import td24e5@imp* td24e6@b*) (eq? (tde61@syntax->datum td24e4@import) 'import)) td24e2@ls/false)) (apply (lambda (td24ea@import td24eb@imp* td24ec@b*) (values td24eb@imp* td24ec@b*)) td24e2@ls/false) (let ((td24f0@t td24e0@t)) (let ((td24f2@ls/false (tdd7b@syntax-dispatch td24f0@t '((any . any) . any)))) (if (and td24f2@ls/false (apply (lambda (td24f4@import td24f5@x td24f6@y) (eq? (tde61@syntax->datum td24f4@import) 'import)) td24f2@ls/false)) (apply (lambda (td24fa@import td24fb@x td24fc@y) (tde5b@syntax-violation 'expander '"invalid syntax of top-level program" (tdb6e@syntax-car td24de@e*))) td24f2@ls/false) (let ((td2500@t td24f0@t)) (let ((td2502@ls/false (tdd7b@syntax-dispatch td2500@t '_))) (if td2502@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) td2502@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2500@t)))))))))))) (set! td2888@tddf1@parse-top-level-program tddf1@parse-top-level-program) (set! tddf3@top-level-expander (lambda (td2504@e*) (call-with-values (lambda () (tddf1@parse-top-level-program td2504@e*)) (lambda (td250a@td2507 td250b@td2509) (let ((td250e@b* td250b@td2509) (td250f@imp* td250a@td2507)) (call-with-values (lambda () (tdded@library-body-expander '() '() td250f@imp* td250e@b* '#t)) (lambda (td2520@td2513 td2521@td2515 td2522@td2517 td2523@td2519 td2524@td251b td2525@td251d td2526@td251f) (let ((td252e@export-env td2526@td251f) (td252f@export-subst td2525@td251d) (td2530@visit-code td2524@td251b) (td2531@invoke-code td2523@td2519) (td2532@visit-req* td2522@td2517) (td2533@invoke-req* td2521@td2515) (td2534@imp* td2520@td2513)) (values td2533@invoke-req* td2531@invoke-code))))))))) (set! td2889@tddf3@top-level-expander tddf3@top-level-expander) (set! tddf5@rp (td6bb@td597@make-record-printer 'env (lambda (td253c@x td253d@p td253e@wr) (display '"#<environment>" td253d@p)))) (set! td288a@tddf5@rp tddf5@rp) (set! tddff@env? (lambda (td2542@x) (and (simple-struct? td2542@x) (eq? (simple-struct-name td2542@x) 'env)))) (set! td288b@tddff@env? tddff@env?) (set! tde01@env-names (lambda (td2544@x) (simple-struct-ref td2544@x '0))) (set! td288c@tde01@env-names tde01@env-names) (set! tde03@set-env-names! (lambda (td2546@x td2547@val) (simple-struct-set! td2546@x '0 td2547@val))) (set! td288d@tde03@set-env-names! tde03@set-env-names!) (set! tde05@env-labels (lambda (td254a@x) (simple-struct-ref td254a@x '1))) (set! td288e@tde05@env-labels tde05@env-labels) (set! tde07@set-env-labels! (lambda (td254c@x td254d@val) (simple-struct-set! td254c@x '1 td254d@val))) (set! td288f@tde07@set-env-labels! tde07@set-env-labels!) (set! tde09@env-itc (lambda (td2550@x) (simple-struct-ref td2550@x '2))) (set! td2890@tde09@env-itc tde09@env-itc) (set! tde0b@set-env-itc! (lambda (td2552@x td2553@val) (simple-struct-set! td2552@x '2 td2553@val))) (set! td2891@tde0b@set-env-itc! tde0b@set-env-itc!) (set! tde0d@dummy '3) (set! td2892@tde0d@dummy tde0d@dummy) (set! tde0f@rp (td6bb@td597@make-record-printer 'interaction-env (lambda (td2556@x td2557@p td2558@wr) (display '"#<environment>" td2557@p)))) (set! td2893@tde0f@rp tde0f@rp) (set! tde19@interaction-env? (lambda (td255c@x) (and (simple-struct? td255c@x) (eq? (simple-struct-name td255c@x) 'interaction-env)))) (set! td2894@tde19@interaction-env? tde19@interaction-env?) (set! tde1b@interaction-env-rib (lambda (td255e@x) (simple-struct-ref td255e@x '0))) (set! td2895@tde1b@interaction-env-rib tde1b@interaction-env-rib) (set! tde1d@set-interaction-env-rib! (lambda (td2560@x td2561@val) (simple-struct-set! td2560@x '0 td2561@val))) (set! td2896@tde1d@set-interaction-env-rib! tde1d@set-interaction-env-rib!) (set! tde1f@interaction-env-r (lambda (td2564@x) (simple-struct-ref td2564@x '1))) (set! td2897@tde1f@interaction-env-r tde1f@interaction-env-r) (set! tde21@set-interaction-env-r! (lambda (td2566@x td2567@val) (simple-struct-set! td2566@x '1 td2567@val))) (set! td2898@tde21@set-interaction-env-r! tde21@set-interaction-env-r!) (set! tde23@interaction-env-locs (lambda (td256a@x) (simple-struct-ref td256a@x '2))) (set! td2899@tde23@interaction-env-locs tde23@interaction-env-locs) (set! tde25@set-interaction-env-locs! (lambda (td256c@x td256d@val) (simple-struct-set! td256c@x '2 td256d@val))) (set! td289a@tde25@set-interaction-env-locs! tde25@set-interaction-env-locs!) (set! tde27@dummy '3) (set! td289b@tde27@dummy tde27@dummy) (set! tde29@interaction-environment-symbols (lambda () (tde31@environment-symbols (tde69@interaction-environment)))) (set! td289c@tde29@interaction-environment-symbols tde29@interaction-environment-symbols) (set! tde2b@environment-bindings (lambda (td2570@e) (vector->list (vector-map (lambda (td2572@name td2573@label) (tde2d@parse-binding (cons td2572@name (td989@td7d6@imported-label->binding td2573@label)))) (tde01@env-names td2570@e) (tde05@env-labels td2570@e))))) (set! td289d@tde2b@environment-bindings tde2b@environment-bindings) (set! tde2d@parse-binding (lambda (td2576@b) (cons (car td2576@b) (let ((td2578@t (cadr td2576@b))) (if (memv td2578@t '(core-prim global)) 'procedure (if (memv td2578@t '(core-macro macro global-macro)) 'syntax (if (memv td2578@t '($core-rtd)) 'record (if (eq? (car td2576@b) (cadr td2576@b)) 'syntax 'unknown)))))))) (set! td289e@tde2d@parse-binding tde2d@parse-binding) (set! tde2f@environment? (lambda (td257a@x) (or (tddff@env? td257a@x) (tde19@interaction-env? td257a@x)))) (set! td289f@tde2f@environment? tde2f@environment?) (set! tde31@environment-symbols (lambda (td257c@x) (if (tddff@env? td257c@x) (vector->list (tde01@env-names td257c@x)) (if (tde19@interaction-env? td257c@x) (map values (tdb12@rib-sym* (tde1b@interaction-env-rib td257c@x))) (assertion-violation 'environment-symbols '"not an environment" td257c@x))))) (set! td28a0@tde31@environment-symbols tde31@environment-symbols) (set! tde33@environment (lambda td257e@imp* (let ((td2580@itc (tdde1@make-collector))) (let ((td2586@td2583 tdde7@imp-collector) (td2587@td2585 td2580@itc)) (let ((td258a@swap (lambda () (let ((td258c@t (td2586@td2583))) (begin (td2586@td2583 td2587@td2585) (set! td2587@td2585 td258c@t)))))) (dynamic-wind td258a@swap (lambda () (call-with-values (lambda () (tdddd@parse-import-spec* td257e@imp*)) (lambda (td2592@td258f td2593@td2591) (let ((td2596@subst-labels td2593@td2591) (td2597@subst-names td2592@td258f)) (make-simple-struct 'env '4 (list td2597@subst-names td2596@subst-labels td2580@itc)))))) td258a@swap)))))) (set! td28a1@tde33@environment tde33@environment) (set! tde35@null-environment (lambda (td259a@n) (begin (if (not (eqv? td259a@n '5)) (assertion-violation 'null-environment '"not 5" td259a@n) (void)) (tde33@environment '(psyntax null-environment-5))))) (set! td28a2@tde35@null-environment tde35@null-environment) (set! tde37@scheme-report-environment (lambda (td259c@n) (begin (if (not (eqv? td259c@n '5)) (assertion-violation 'scheme-report-environment '"not 5" td259c@n) (void)) (tde33@environment '(psyntax scheme-report-environment-5))))) (set! td28a3@tde37@scheme-report-environment tde37@scheme-report-environment) (set! tde39@expand (lambda (td259e@x td259f@env) (if (tddff@env? td259f@env) (let ((td25a2@rib (tdddf@make-top-rib (tde01@env-names td259f@env) (tde05@env-labels td259f@env)))) (let ((td25a4@x (make-simple-struct 'stx '5 (list td259e@x tdaf8@top-mark* (list td25a2@rib) '()))) (td25a5@itc (tde09@env-itc td259f@env)) (td25a6@rtc (tdde1@make-collector)) (td25a7@vtc (tdde1@make-collector))) (let ((td25ac@x (let ((td25be@td25af tde6b@top-level-context) (td25bf@td25b1 tdde3@inv-collector) (td25c0@td25b3 tdde5@vis-collector) (td25c1@td25b5 tdde7@imp-collector) (td25c2@td25b7 '#f) (td25c3@td25b9 td25a6@rtc) (td25c4@td25bb td25a7@vtc) (td25c5@td25bd td25a5@itc)) (let ((td25ce@swap (lambda () (begin (let ((td25d0@t (td25be@td25af))) (begin (td25be@td25af td25c2@td25b7) (set! td25c2@td25b7 td25d0@t))) (let ((td25d2@t (td25bf@td25b1))) (begin (td25bf@td25b1 td25c3@td25b9) (set! td25c3@td25b9 td25d2@t))) (let ((td25d4@t (td25c0@td25b3))) (begin (td25c0@td25b3 td25c4@td25bb) (set! td25c4@td25bb td25d4@t))) (let ((td25d6@t (td25c1@td25b5))) (begin (td25c1@td25b5 td25c5@td25bd) (set! td25c5@td25bd td25d6@t))))))) (dynamic-wind td25ce@swap (lambda () (tdd9d@chi-expr td25a4@x '() '())) td25ce@swap))))) (begin (tdb30@seal-rib! td25a2@rib) (values td25ac@x (td25a6@rtc)))))) (if (tde19@interaction-env? td259f@env) (let ((td25d8@rib (tde1b@interaction-env-rib td259f@env)) (td25d9@r (tde1f@interaction-env-r td259f@env)) (td25da@rtc (tdde1@make-collector))) (let ((td25de@x (make-simple-struct 'stx '5 (list td259e@x tdaf8@top-mark* (list td25d8@rib) '())))) (call-with-values (lambda () (let ((td25f4@td25e5 tde6b@top-level-context) (td25f5@td25e7 tdde3@inv-collector) (td25f6@td25e9 tdde5@vis-collector) (td25f7@td25eb tdde7@imp-collector) (td25f8@td25ed td259f@env) (td25f9@td25ef td25da@rtc) (td25fa@td25f1 (tdde1@make-collector)) (td25fb@td25f3 (tdde1@make-collector))) (let ((td2604@swap (lambda () (begin (let ((td2606@t (td25f4@td25e5))) (begin (td25f4@td25e5 td25f8@td25ed) (set! td25f8@td25ed td2606@t))) (let ((td2608@t (td25f5@td25e7))) (begin (td25f5@td25e7 td25f9@td25ef) (set! td25f9@td25ef td2608@t))) (let ((td260a@t (td25f6@td25e9))) (begin (td25f6@td25e9 td25fa@td25f1) (set! td25fa@td25f1 td260a@t))) (let ((td260c@t (td25f7@td25eb))) (begin (td25f7@td25eb td25fb@td25f3) (set! td25fb@td25f3 td260c@t))))))) (dynamic-wind td2604@swap (lambda () (tddeb@chi-interaction-expr td25de@x td25d8@rib td25d9@r)) td2604@swap)))) (lambda (td260e@td25e1 td260f@td25e3) (let ((td2612@r^ td260f@td25e3) (td2613@e td260e@td25e1)) (begin (tde21@set-interaction-env-r! td259f@env td2612@r^) (values td2613@e (td25da@rtc)))))))) (assertion-violation 'expand '"not an environment" td259f@env))))) (set! td28a4@tde39@expand tde39@expand) (set! tde3b@eval (lambda (td2616@x td2617@env) (begin (if (not (tde2f@environment? td2617@env)) (error 'eval '"not an environment" td2617@env) (void)) (call-with-values (lambda () (tde39@expand td2616@x td2617@env)) (lambda (td261e@td261b td261f@td261d) (let ((td2622@invoke-req* td261f@td261d) (td2623@x td261e@td261b)) (begin (for-each td98a@td7d8@invoke-library td2622@invoke-req*) (eval-core (td714@td6cc@expanded->core td2623@x))))))))) (set! td28a5@tde3b@eval tde3b@eval) (set! tde3d@library-expander (lambda td2694 (let ((td2695 (length td2694))) (if (= td2695 '3) (apply (lambda (td2626@x td2627@filename td2628@verify-name) (let ((td262d@build-visit-code '#f) (td262f@visit! '#f)) (begin (set! td262d@build-visit-code (lambda (td2682@macro*) (if (null? td2682@macro*) (tdada@tda35@build-void) (tdad9@tda33@build-sequence '#f (map (lambda (td2684@x) (let ((td2686@loc (car td2684@x)) (td2687@src (cddr td2684@x))) (list 'set! td2686@loc td2687@src))) td2682@macro*))))) (set! td262f@visit! (lambda (td267a@macro*) (for-each (lambda (td267c@x) (let ((td267e@loc (car td267c@x)) (td267f@proc (cadr td267c@x))) (set-symbol-value! td267e@loc td267f@proc))) td267a@macro*))) (call-with-values (lambda () (tddef@core-library-expander td2626@x td2628@verify-name)) (lambda (td2642@td2631 td2643@td2633 td2644@td2635 td2645@td2637 td2646@td2639 td2647@td263b td2648@td263d td2649@td263f td264a@td2641) (let ((td2654@export-env td264a@td2641) (td2655@export-subst td2649@td263f) (td2656@macro* td2648@td263d) (td2657@invoke-code td2647@td263b) (td2658@vis* td2646@td2639) (td2659@inv* td2645@td2637) (td265a@imp* td2644@td2635) (td265b@ver td2643@td2633) (td265c@name td2642@td2631)) (let ((td2666@id (gensym)) (td2667@name td265c@name) (td2668@ver td265b@ver) (td2669@imp* (map td98e@td7e0@library-spec td265a@imp*)) (td266a@vis* (map td98e@td7e0@library-spec td2658@vis*)) (td266b@inv* (map td98e@td7e0@library-spec td2659@inv*)) (td266c@visit-proc (lambda () (td262f@visit! td2656@macro*))) (td266d@invoke-proc (lambda () (eval-core (td714@td6cc@expanded->core td2657@invoke-code)))) (td266e@visit-code (td262d@build-visit-code td2656@macro*)) (td266f@invoke-code td2657@invoke-code)) (begin (td988@td7d4@install-library td2666@id td2667@name td2668@ver td2669@imp* td266a@vis* td266b@inv* td2655@export-subst td2654@export-env td266c@visit-proc td266d@invoke-proc td266e@visit-code td266f@invoke-code '#t td2627@filename) (values td2666@id td2667@name td2668@ver td2669@imp* td266a@vis* td266b@inv* td266f@invoke-code td266e@visit-code td2655@export-subst td2654@export-env))))))))) td2694) (if (= td2695 '2) (apply (lambda (td268a@x td268b@filename) (tde3d@library-expander td268a@x td268b@filename (lambda (td268e@x) (values)))) td2694) (if (= td2695 '1) (apply (lambda (td2690@x) (tde3d@library-expander td2690@x '#f (lambda (td2692@x) (values)))) td2694) (error 'apply '"invalid arg count"))))))) (set! td28a6@tde3d@library-expander tde3d@library-expander) (set! tde3f@boot-library-expand (lambda (td2696@x) (call-with-values (lambda () (tde3d@library-expander td2696@x)) (lambda (td26ac@td2699 td26ad@td269b td26ae@td269d td26af@td269f td26b0@td26a1 td26b1@td26a3 td26b2@td26a5 td26b3@td26a7 td26b4@td26a9 td26b5@td26ab) (let ((td26c0@export-env td26b5@td26ab) (td26c1@export-subst td26b4@td26a9) (td26c2@visit-code td26b3@td26a7) (td26c3@invoke-code td26b2@td26a5) (td26c4@inv* td26b1@td26a3) (td26c5@vis* td26b0@td26a1) (td26c6@imp* td26af@td269f) (td26c7@ver td26ae@td269d) (td26c8@name td26ad@td269b) (td26c9@id td26ac@td2699)) (values td26c8@name td26c3@invoke-code td26c1@export-subst td26c0@export-env)))))) (set! td28a7@tde3f@boot-library-expand tde3f@boot-library-expand) (set! tde41@rev-map-append (lambda (td26d4@f td26d5@ls td26d6@ac) (if (null? td26d5@ls) td26d6@ac (tde41@rev-map-append td26d4@f (cdr td26d5@ls) (cons (td26d4@f (car td26d5@ls)) td26d6@ac))))) (set! td28a8@tde41@rev-map-append tde41@rev-map-append) (set! tde43@build-exports (lambda (td26da@lex*+loc* td26db@init*) (tdad9@tda33@build-sequence '#f (cons (tdada@tda35@build-void) (tde41@rev-map-append (lambda (td26de@x) (list 'set! (cdr td26de@x) (car td26de@x))) td26da@lex*+loc* td26db@init*))))) (set! td28a9@tde43@build-exports tde43@build-exports) (set! tde45@make-export-subst (lambda (td26e0@name* td26e1@id*) (map (lambda (td26e4@name td26e5@id) (let ((td26e8@label (tdb8a@id->label td26e5@id))) (begin (if (not td26e8@label) (tde5b@syntax-violation '#f '"cannot export unbound identifier" td26e5@id) (void)) (cons td26e4@name td26e8@label)))) td26e0@name* td26e1@id*))) (set! td28aa@tde45@make-export-subst tde45@make-export-subst) (set! tde47@make-export-env/macros (lambda (td26ea@lex* td26eb@loc* td26ec@r) (let ((td26f1@lookup '#f)) (begin (set! td26f1@lookup (lambda (td270e@x) (let td2716@f ((td2710@x td270e@x) (td2711@lex* td26ea@lex*) (td2712@loc* td26eb@loc*)) (if (pair? td2711@lex*) (if (eq? td2710@x (car td2711@lex*)) (car td2712@loc*) (td2716@f td2710@x (cdr td2711@lex*) (cdr td2712@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let td26fa@f ((td26f2@r td26ec@r) (td26f3@env '()) (td26f4@global* '()) (td26f5@macro* '())) (if (null? td26f2@r) (values td26f3@env td26f4@global* td26f5@macro*) (let ((td26fc@x (car td26f2@r))) (let ((td26fe@label (car td26fc@x)) (td26ff@b (cdr td26fc@x))) (let ((td2702@t (tdb90@binding-type td26ff@b))) (if (memv td2702@t '(lexical)) (let ((td2704@v (tdb92@binding-value td26ff@b))) (let ((td2706@loc (td26f1@lookup (tdd05@lexical-var td2704@v))) (td2707@type (if (tdd07@lexical-mutable? td2704@v) 'mutable 'global))) (td26fa@f (cdr td26f2@r) (cons (cons* td26fe@label td2707@type td2706@loc) td26f3@env) (cons (cons (tdd05@lexical-var td2704@v) td2706@loc) td26f4@global*) td26f5@macro*))) (if (memv td2702@t '(local-macro)) (let ((td270a@loc (gensym))) (td26fa@f (cdr td26f2@r) (cons (cons* td26fe@label 'global-macro td270a@loc) td26f3@env) td26f4@global* (cons (cons td270a@loc (tdb92@binding-value td26ff@b)) td26f5@macro*))) (if (memv td2702@t '(local-macro!)) (let ((td270c@loc (gensym))) (td26fa@f (cdr td26f2@r) (cons (cons* td26fe@label 'global-macro! td270c@loc) td26f3@env) td26f4@global* (cons (cons td270c@loc (tdb92@binding-value td26ff@b)) td26f5@macro*))) (if (memv td2702@t '($rtd $module)) (td26fa@f (cdr td26f2@r) (cons td26fc@x td26f3@env) td26f4@global* td26f5@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (tdb90@binding-type td26ff@b) (tdb92@binding-value td26ff@b))))))))))))))) (set! td28ab@tde47@make-export-env/macros tde47@make-export-env/macros) (set! tde49@generate-temporaries (lambda (td2718@ls) (let ((td271a@t td2718@ls)) (let ((td271c@ls/false (tdd7b@syntax-dispatch td271a@t 'each-any))) (if td271c@ls/false (apply (lambda (td271e@ls) (map (lambda (td2720@x) (make-simple-struct 'stx '5 (list (let ((td2722@x (tde61@syntax->datum td2720@x))) (if (or (symbol? td2722@x) (string? td2722@x)) (gensym td2722@x) (gensym 't))) tdaf8@top-mark* '() '()))) td271e@ls)) td271c@ls/false) (let ((td2724@t td271a@t)) (let ((td2726@ls/false (tdd7b@syntax-dispatch td2724@t '_))) (if td2726@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) td2726@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td2724@t))))))))) (set! td28ac@tde49@generate-temporaries tde49@generate-temporaries) (set! tde4b@free-identifier=? (lambda (td2728@x td2729@y) (if (tdb74@id? td2728@x) (if (tdb74@id? td2729@y) (tdb7a@free-id=? td2728@x td2729@y) (assertion-violation 'free-identifier=? '"not an identifier" td2729@y)) (assertion-violation 'free-identifier=? '"not an identifier" td2728@x)))) (set! td28ad@tde4b@free-identifier=? tde4b@free-identifier=?) (set! tde4d@bound-identifier=? (lambda (td272c@x td272d@y) (if (tdb74@id? td272c@x) (if (tdb74@id? td272d@y) (tdb78@bound-id=? td272c@x td272d@y) (assertion-violation 'bound-identifier=? '"not an identifier" td272d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" td272c@x)))) (set! td28ae@tde4d@bound-identifier=? tde4d@bound-identifier=?) (set! tde4f@make-source-condition (lambda (td2730@x) (let ((td273a@td2735 '#f) (td273c@td2737 '#f) (td273e@td2736 '#f) (td2741@td2734 '#f) (td2743@make-source-condition '#f) (td2745@td2732 '#f) (td2747@td2733 '#f) (td2749@source-condition? '#f) (td274b@source-filename '#f) (td274d@source-character '#f)) (begin (set! td273a@td2735 (make-record-type-descriptor '&source-information td2b90@td28d7@&condition-rtd 'td2738 '#f '#f '#((immutable file-name) (immutable character)))) (set! td273c@td2737 '#f) (set! td273e@td2736 (make-record-constructor-descriptor td273a@td2735 td2b91@td28d9@&condition-rcd td273c@td2737)) (set! td2741@td2734 (record-predicate td273a@td2735)) (set! td2743@make-source-condition (record-constructor td273e@td2736)) (set! td2745@td2732 (record-accessor td273a@td2735 '0)) (set! td2747@td2733 (record-accessor td273a@td2735 '1)) (set! td2749@source-condition? (condition-predicate td273a@td2735)) (set! td274b@source-filename (condition-accessor td273a@td2735 td2745@td2732)) (set! td274d@source-character (condition-accessor td273a@td2735 td2747@td2733)) (if (pair? td2730@x) (td2743@make-source-condition (car td2730@x) (cdr td2730@x)) (condition)))))) (set! td28af@tde4f@make-source-condition tde4f@make-source-condition) (set! tde51@extract-position-condition (lambda (td274e@x) (tde4f@make-source-condition (tde53@expression-position td274e@x)))) (set! td28b0@tde51@extract-position-condition tde51@extract-position-condition) (set! tde53@expression-position (lambda (td2750@x) (and (tdb40@stx? td2750@x) (let ((td2752@x (tdb42@stx-expr td2750@x))) (and (td6b3@td587@annotation? td2752@x) (td6b4@td589@annotation-source td2752@x)))))) (set! td28b1@tde53@expression-position tde53@expression-position) (set! tde55@assertion-error (lambda (td2754@expr td2755@pos) (raise (condition (td2bc0@td299b@make-assertion-violation) (td2bd2@td29cd@make-who-condition 'assert) (td2b96@td292e@make-message-condition '"assertion failed") (td2bc8@td29b2@make-irritants-condition (list td2754@expr)) (tde4f@make-source-condition td2755@pos))))) (set! td28b2@tde55@assertion-error tde55@assertion-error) (set! tde57@syntax-error (lambda (td2758@x . td275a@args) (begin (if (not (for-all string? td275a@args)) (assertion-violation 'syntax-error '"invalid argument" td275a@args) (void)) (raise (condition (td2b96@td292e@make-message-condition (if (null? td275a@args) '"invalid syntax" (apply string-append td275a@args))) (td2bf4@td2a29@make-syntax-violation (tde61@syntax->datum td2758@x) '#f) (tde51@extract-position-condition td2758@x)))))) (set! td28b3@tde57@syntax-error tde57@syntax-error) (set! tde59@syntax-violation* (lambda (td275c@who td275d@msg td275e@form td275f@condition-object) (begin (if (not (string? td275d@msg)) (assertion-violation 'syntax-violation '"message is not a string" td275d@msg) (void)) (let ((td2764@who (if (or (string? td275c@who) (symbol? td275c@who)) td275c@who (if (not td275c@who) (let ((td2766@t td275e@form)) (let ((td2768@ls/false (tdd7b@syntax-dispatch td2766@t 'any))) (if (and td2768@ls/false (apply (lambda (td276a@id) (tdb74@id? td276a@id)) td2768@ls/false)) (apply (lambda (td276c@id) (tde61@syntax->datum td276c@id)) td2768@ls/false) (let ((td276e@t td2766@t)) (let ((td2770@ls/false (tdd7b@syntax-dispatch td276e@t '(any . any)))) (if (and td2770@ls/false (apply (lambda (td2772@id td2773@rest) (tdb74@id? td2772@id)) td2770@ls/false)) (apply (lambda (td2776@id td2777@rest) (tde61@syntax->datum td2776@id)) td2770@ls/false) (let ((td277a@t td276e@t)) (let ((td277c@ls/false (tdd7b@syntax-dispatch td277a@t '_))) (if td277c@ls/false (apply (lambda () '#f) td277c@ls/false) (tde5b@syntax-violation '#f '"invalid syntax" td277a@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" td275c@who))))) (raise (condition (if td2764@who (td2bd2@td29cd@make-who-condition td2764@who) (condition)) (td2b96@td292e@make-message-condition td275d@msg) td275f@condition-object (tde51@extract-position-condition td275e@form))))))) (set! td28b4@tde59@syntax-violation* tde59@syntax-violation*) (set! tde5b@syntax-violation (lambda td278c (let ((td278d (length td278c))) (if (= td278d '3) (apply (lambda (td277e@who td277f@msg td2780@form) (tde5b@syntax-violation td277e@who td277f@msg td2780@form '#f)) td278c) (if (= td278d '4) (apply (lambda (td2784@who td2785@msg td2786@form td2787@subform) (tde59@syntax-violation* td2784@who td2785@msg td2786@form (td2bf4@td2a29@make-syntax-violation (tde61@syntax->datum td2786@form) (tde61@syntax->datum td2787@subform)))) td278c) (error 'apply '"invalid arg count")))))) (set! td28b5@tde5b@syntax-violation tde5b@syntax-violation) (set! tde5d@identifier? (lambda (td278e@x) (tdb74@id? td278e@x))) (set! td28b6@tde5d@identifier? tde5d@identifier?) (set! tde5f@datum->syntax (lambda (td2790@id td2791@datum) (if (tdb74@id? td2790@id) (tdb54@datum->stx td2790@id td2791@datum) (assertion-violation 'datum->syntax '"not an identifier" td2790@id)))) (set! td28b7@tde5f@datum->syntax tde5f@datum->syntax) (set! tde61@syntax->datum (lambda (td2794@x) (tdb88@stx->datum td2794@x))) (set! td28b8@tde61@syntax->datum tde61@syntax->datum) (set! tde63@ungensym-all (lambda (td2796@code) (if (pair? td2796@code) (cons (tde63@ungensym-all (car td2796@code)) (tde63@ungensym-all (cdr td2796@code))) (if (symbol? td2796@code) (ungensym td2796@code) td2796@code)))) (set! td28b9@tde63@ungensym-all tde63@ungensym-all) (set! tde65@compile-r6rs-top-level (lambda (td2798@x*) (call-with-values (lambda () (tddf3@top-level-expander td2798@x*)) (lambda (td279e@td279b td279f@td279d) (let ((td27a2@invoke-code td279f@td279d) (td27a3@lib* td279e@td279b)) (lambda () (begin (for-each td98a@td7d8@invoke-library td27a3@lib*) (let ((td27a6@expanded (td714@td6cc@expanded->core td27a2@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (tde63@ungensym-all td27a6@expanded)) (void)) (eval-core td27a6@expanded)))))))))) (set! td28ba@tde65@compile-r6rs-top-level tde65@compile-r6rs-top-level) (set! tde67@pre-compile-r6rs-top-level (lambda (td27a8@x*) (call-with-values (lambda () (tddf3@top-level-expander td27a8@x*)) (lambda (td27ae@td27ab td27af@td27ad) (let ((td27b2@invoke-code td27af@td27ad) (td27b3@lib* td27ae@td27ab)) (begin (for-each td98a@td7d8@invoke-library td27b3@lib*) (td6bc@td599@compile-core (td714@td6cc@expanded->core td27b2@invoke-code)))))))) (set! td28bb@tde67@pre-compile-r6rs-top-level tde67@pre-compile-r6rs-top-level) (set! tde69@interaction-environment (let ((td27b6@the-env '#f)) (lambda () (or td27b6@the-env (let ((td27b8@lib (td983@td7ca@find-library-by-name '(mosh interaction))) (td27b9@rib (tdb28@make-empty-rib))) (begin (let ((td27bc@subst (td965@td78e@library-subst td27b8@lib))) (begin (tdb14@set-rib-sym*! td27b9@rib (map car td27bc@subst)) (tdb18@set-rib-mark**! td27b9@rib (map (lambda (td27be@x) tdaf8@top-mark*) td27bc@subst)) (tdb1c@set-rib-label*! td27b9@rib (map cdr td27bc@subst)))) (let ((td27c0@env (make-simple-struct 'interaction-env '4 (list td27b9@rib '() '())))) (begin (set! td27b6@the-env td27c0@env) td27c0@env)))))))) (set! td28bc@tde69@interaction-environment tde69@interaction-environment) (set! tde6b@top-level-context (td6be@td59d@make-parameter '#f)) (set! td28bd@tde6b@top-level-context tde6b@top-level-context) (td980@td7c4@current-library-expander tde3d@library-expander))
(begin (set! td28cc@td28c7 (unspecified)) (set! td28ce@td28c9 (unspecified)) (set! td28d0@td28c8 (unspecified)) (set! td28d3@&condition? (unspecified)) (set! td28d5@make-&condition (unspecified)) (set! td28d7@&condition-rtd (unspecified)) (set! td28d9@&condition-rcd (unspecified)) (set! td2925@td2920 (unspecified)) (set! td2927@td2922 (unspecified)) (set! td2929@td2921 (unspecified)) (set! td292c@p? (unspecified)) (set! td292e@make-message-condition (unspecified)) (set! td2930@td291f (unspecified)) (set! td2932@message-condition? (unspecified)) (set! td2934@condition-message (unspecified)) (set! td2936@&message-rtd (unspecified)) (set! td2938@&message-rcd (unspecified)) (set! td293e@td2939 (unspecified)) (set! td2940@td293b (unspecified)) (set! td2942@td293a (unspecified)) (set! td2945@p? (unspecified)) (set! td2947@make-warning (unspecified)) (set! td2949@warning? (unspecified)) (set! td294b@&warning-rtd (unspecified)) (set! td294d@&warning-rcd (unspecified)) (set! td2953@td294e (unspecified)) (set! td2955@td2950 (unspecified)) (set! td2957@td294f (unspecified)) (set! td295a@p? (unspecified)) (set! td295c@make-serious-condition (unspecified)) (set! td295e@serious-condition? (unspecified)) (set! td2960@&serious-rtd (unspecified)) (set! td2962@&serious-rcd (unspecified)) (set! td2968@td2963 (unspecified)) (set! td296a@td2965 (unspecified)) (set! td296c@td2964 (unspecified)) (set! td296f@p? (unspecified)) (set! td2971@make-error (unspecified)) (set! td2973@error? (unspecified)) (set! td2975@&error-rtd (unspecified)) (set! td2977@&error-rcd (unspecified)) (set! td297d@td2978 (unspecified)) (set! td297f@td297a (unspecified)) (set! td2981@td2979 (unspecified)) (set! td2984@p? (unspecified)) (set! td2986@make-violation (unspecified)) (set! td2988@violation? (unspecified)) (set! td298a@&violation-rtd (unspecified)) (set! td298c@&violation-rcd (unspecified)) (set! td2992@td298d (unspecified)) (set! td2994@td298f (unspecified)) (set! td2996@td298e (unspecified)) (set! td2999@p? (unspecified)) (set! td299b@make-assertion-violation (unspecified)) (set! td299d@assertion-violation? (unspecified)) (set! td299f@&assertion-rtd (unspecified)) (set! td29a1@&assertion-rcd (unspecified)) (set! td29a9@td29a4 (unspecified)) (set! td29ab@td29a6 (unspecified)) (set! td29ad@td29a5 (unspecified)) (set! td29b0@p? (unspecified)) (set! td29b2@make-irritants-condition (unspecified)) (set! td29b4@td29a3 (unspecified)) (set! td29b6@irritants-condition? (unspecified)) (set! td29b8@condition-irritants (unspecified)) (set! td29ba@&irritants-rtd (unspecified)) (set! td29bc@&irritants-rcd (unspecified)) (set! td29c4@td29bf (unspecified)) (set! td29c6@td29c1 (unspecified)) (set! td29c8@td29c0 (unspecified)) (set! td29cb@p? (unspecified)) (set! td29cd@make-who-condition (unspecified)) (set! td29cf@td29be (unspecified)) (set! td29d1@who-condition? (unspecified)) (set! td29d3@condition-who (unspecified)) (set! td29d5@&who-rtd (unspecified)) (set! td29d7@&who-rcd (unspecified)) (set! td29dd@td29d8 (unspecified)) (set! td29df@td29da (unspecified)) (set! td29e1@td29d9 (unspecified)) (set! td29e4@p? (unspecified)) (set! td29e6@make-non-continuable-violation (unspecified)) (set! td29e8@non-continuable-violation? (unspecified)) (set! td29ea@&non-continuable-rtd (unspecified)) (set! td29ec@&non-continuable-rcd (unspecified)) (set! td29f2@td29ed (unspecified)) (set! td29f4@td29ef (unspecified)) (set! td29f6@td29ee (unspecified)) (set! td29f9@p? (unspecified)) (set! td29fb@make-implementation-restriction-violation (unspecified)) (set! td29fd@implementation-restriction-violation? (unspecified)) (set! td29ff@&implementation-restriction-rtd (unspecified)) (set! td2a01@&implementation-restriction-rcd (unspecified)) (set! td2a07@td2a02 (unspecified)) (set! td2a09@td2a04 (unspecified)) (set! td2a0b@td2a03 (unspecified)) (set! td2a0e@p? (unspecified)) (set! td2a10@make-lexical-violation (unspecified)) (set! td2a12@lexical-violation? (unspecified)) (set! td2a14@&lexical-rtd (unspecified)) (set! td2a16@&lexical-rcd (unspecified)) (set! td2a20@td2a1b (unspecified)) (set! td2a22@td2a1d (unspecified)) (set! td2a24@td2a1c (unspecified)) (set! td2a27@p? (unspecified)) (set! td2a29@make-syntax-violation (unspecified)) (set! td2a2b@td2a18 (unspecified)) (set! td2a2d@td2a1a (unspecified)) (set! td2a2f@syntax-violation? (unspecified)) (set! td2a31@syntax-violation-form (unspecified)) (set! td2a33@syntax-violation-subform (unspecified)) (set! td2a35@&syntax-rtd (unspecified)) (set! td2a37@&syntax-rcd (unspecified)) (set! td2a3d@td2a38 (unspecified)) (set! td2a3f@td2a3a (unspecified)) (set! td2a41@td2a39 (unspecified)) (set! td2a44@p? (unspecified)) (set! td2a46@make-undefined-violation (unspecified)) (set! td2a48@undefined-violation? (unspecified)) (set! td2a4a@&undefined-rtd (unspecified)) (set! td2a4c@&undefined-rcd (unspecified)) (set! td2a52@td2a4d (unspecified)) (set! td2a54@td2a4f (unspecified)) (set! td2a56@td2a4e (unspecified)) (set! td2a59@p? (unspecified)) (set! td2a5b@make-i/o-error (unspecified)) (set! td2a5d@i/o-error? (unspecified)) (set! td2a5f@&i/o-rtd (unspecified)) (set! td2a61@&i/o-rcd (unspecified)) (set! td2a67@td2a62 (unspecified)) (set! td2a69@td2a64 (unspecified)) (set! td2a6b@td2a63 (unspecified)) (set! td2a6e@p? (unspecified)) (set! td2a70@make-i/o-read-error (unspecified)) (set! td2a72@i/o-read-error? (unspecified)) (set! td2a74@&i/o-read-rtd (unspecified)) (set! td2a76@&i/o-read-rcd (unspecified)) (set! td2a7c@td2a77 (unspecified)) (set! td2a7e@td2a79 (unspecified)) (set! td2a80@td2a78 (unspecified)) (set! td2a83@p? (unspecified)) (set! td2a85@make-i/o-write-error (unspecified)) (set! td2a87@i/o-write-error? (unspecified)) (set! td2a89@&i/o-write-rtd (unspecified)) (set! td2a8b@&i/o-write-rcd (unspecified)) (set! td2a93@td2a8e (unspecified)) (set! td2a95@td2a90 (unspecified)) (set! td2a97@td2a8f (unspecified)) (set! td2a9a@p? (unspecified)) (set! td2a9c@make-i/o-invalid-position-error (unspecified)) (set! td2a9e@td2a8d (unspecified)) (set! td2aa0@i/o-invalid-position-error? (unspecified)) (set! td2aa2@i/o-error-position (unspecified)) (set! td2aa4@&i/o-invalid-position-rtd (unspecified)) (set! td2aa6@&i/o-invalid-position-rcd (unspecified)) (set! td2aae@td2aa9 (unspecified)) (set! td2ab0@td2aab (unspecified)) (set! td2ab2@td2aaa (unspecified)) (set! td2ab5@p? (unspecified)) (set! td2ab7@make-i/o-filename-error (unspecified)) (set! td2ab9@td2aa8 (unspecified)) (set! td2abb@i/o-filename-error? (unspecified)) (set! td2abd@i/o-error-filename (unspecified)) (set! td2abf@&i/o-filename-rtd (unspecified)) (set! td2ac1@&i/o-filename-rcd (unspecified)) (set! td2ac7@td2ac2 (unspecified)) (set! td2ac9@td2ac4 (unspecified)) (set! td2acb@td2ac3 (unspecified)) (set! td2ace@p? (unspecified)) (set! td2ad0@make-i/o-file-protection-error (unspecified)) (set! td2ad2@i/o-file-protection-error? (unspecified)) (set! td2ad4@&i/o-file-protection-rtd (unspecified)) (set! td2ad6@&i/o-file-protection-rcd (unspecified)) (set! td2adc@td2ad7 (unspecified)) (set! td2ade@td2ad9 (unspecified)) (set! td2ae0@td2ad8 (unspecified)) (set! td2ae3@p? (unspecified)) (set! td2ae5@make-i/o-file-is-read-only-error (unspecified)) (set! td2ae7@i/o-file-is-read-only-error? (unspecified)) (set! td2ae9@&i/o-file-is-read-only-rtd (unspecified)) (set! td2aeb@&i/o-file-is-read-only-rcd (unspecified)) (set! td2af1@td2aec (unspecified)) (set! td2af3@td2aee (unspecified)) (set! td2af5@td2aed (unspecified)) (set! td2af8@p? (unspecified)) (set! td2afa@make-i/o-file-already-exists-error (unspecified)) (set! td2afc@i/o-file-already-exists-error? (unspecified)) (set! td2afe@&i/o-file-already-exists-rtd (unspecified)) (set! td2b00@&i/o-file-already-exists-rcd (unspecified)) (set! td2b06@td2b01 (unspecified)) (set! td2b08@td2b03 (unspecified)) (set! td2b0a@td2b02 (unspecified)) (set! td2b0d@p? (unspecified)) (set! td2b0f@make-i/o-file-does-not-exist-error (unspecified)) (set! td2b11@i/o-file-does-not-exist-error? (unspecified)) (set! td2b13@&i/o-file-does-not-exist-rtd (unspecified)) (set! td2b15@&i/o-file-does-not-exist-rcd (unspecified)) (set! td2b1d@td2b18 (unspecified)) (set! td2b1f@td2b1a (unspecified)) (set! td2b21@td2b19 (unspecified)) (set! td2b24@p? (unspecified)) (set! td2b26@make-i/o-port-error (unspecified)) (set! td2b28@td2b17 (unspecified)) (set! td2b2a@i/o-port-error? (unspecified)) (set! td2b2c@i/o-error-port (unspecified)) (set! td2b2e@&i/o-port-rtd (unspecified)) (set! td2b30@&i/o-port-rcd (unspecified)) (set! td2b36@td2b31 (unspecified)) (set! td2b38@td2b33 (unspecified)) (set! td2b3a@td2b32 (unspecified)) (set! td2b3d@p? (unspecified)) (set! td2b3f@make-i/o-decoding-error (unspecified)) (set! td2b41@i/o-decoding-error? (unspecified)) (set! td2b43@&i/o-decoding-rtd (unspecified)) (set! td2b45@&i/o-decoding-rcd (unspecified)) (set! td2b4d@td2b48 (unspecified)) (set! td2b4f@td2b4a (unspecified)) (set! td2b51@td2b49 (unspecified)) (set! td2b54@p? (unspecified)) (set! td2b56@make-i/o-encoding-error (unspecified)) (set! td2b58@td2b47 (unspecified)) (set! td2b5a@i/o-encoding-error? (unspecified)) (set! td2b5c@i/o-encoding-error-char (unspecified)) (set! td2b5e@&i/o-encoding-rtd (unspecified)) (set! td2b60@&i/o-encoding-rcd (unspecified)) (set! td2b66@td2b61 (unspecified)) (set! td2b68@td2b63 (unspecified)) (set! td2b6a@td2b62 (unspecified)) (set! td2b6d@p? (unspecified)) (set! td2b6f@make-no-infinities-violation (unspecified)) (set! td2b71@no-infinities-violation? (unspecified)) (set! td2b73@&no-infinities-rtd (unspecified)) (set! td2b75@&no-infinities-rcd (unspecified)) (set! td2b7b@td2b76 (unspecified)) (set! td2b7d@td2b78 (unspecified)) (set! td2b7f@td2b77 (unspecified)) (set! td2b82@p? (unspecified)) (set! td2b84@make-no-nans-violation (unspecified)) (set! td2b86@no-nans-violation? (unspecified)) (set! td2b88@&no-nans-rtd (unspecified)) (set! td2b8a@&no-nans-rcd (unspecified)) (set! td28cc@td28c7 (make-record-type-descriptor '&condition '#f 'td28ca '#f '#f '#())) (set! td2b8b@td28cc@td28c7 td28cc@td28c7) (set! td28ce@td28c9 '#f) (set! td2b8c@td28ce@td28c9 td28ce@td28c9) (set! td28d0@td28c8 (make-record-constructor-descriptor td28cc@td28c7 '#f td28ce@td28c9)) (set! td2b8d@td28d0@td28c8 td28d0@td28c8) (set! td28d3@&condition? (record-predicate td28cc@td28c7)) (set! td2b8e@td28d3@&condition? td28d3@&condition?) (set! td28d5@make-&condition (record-constructor td28d0@td28c8)) (set! td2b8f@td28d5@make-&condition td28d5@make-&condition) (set! td28d7@&condition-rtd td28cc@td28c7) (set! td2b90@td28d7@&condition-rtd td28d7@&condition-rtd) (set! td28d9@&condition-rcd td28d0@td28c8) (set! td2b91@td28d9@&condition-rcd td28d9@&condition-rcd) (set! td2925@td2920 (make-record-type-descriptor '&message td28cc@td28c7 'td2923 '#f '#f '#((immutable message)))) (set! td2b92@td2925@td2920 td2925@td2920) (set! td2927@td2922 '#f) (set! td2b93@td2927@td2922 td2927@td2922) (set! td2929@td2921 (make-record-constructor-descriptor td2925@td2920 td28d0@td28c8 td2927@td2922)) (set! td2b94@td2929@td2921 td2929@td2921) (set! td292c@p? (record-predicate td2925@td2920)) (set! td2b95@td292c@p? td292c@p?) (set! td292e@make-message-condition (record-constructor td2929@td2921)) (set! td2b96@td292e@make-message-condition td292e@make-message-condition) (set! td2930@td291f (record-accessor td2925@td2920 '0)) (set! td2b97@td2930@td291f td2930@td291f) (set! td2932@message-condition? (condition-predicate td2925@td2920)) (set! td2b98@td2932@message-condition? td2932@message-condition?) (set! td2934@condition-message (condition-accessor td2925@td2920 td2930@td291f)) (set! td2b99@td2934@condition-message td2934@condition-message) (set! td2936@&message-rtd td2925@td2920) (set! td2b9a@td2936@&message-rtd td2936@&message-rtd) (set! td2938@&message-rcd td2929@td2921) (set! td2b9b@td2938@&message-rcd td2938@&message-rcd) (set! td293e@td2939 (make-record-type-descriptor '&warning td28cc@td28c7 'td293c '#f '#f '#())) (set! td2b9c@td293e@td2939 td293e@td2939) (set! td2940@td293b '#f) (set! td2b9d@td2940@td293b td2940@td293b) (set! td2942@td293a (make-record-constructor-descriptor td293e@td2939 td28d0@td28c8 td2940@td293b)) (set! td2b9e@td2942@td293a td2942@td293a) (set! td2945@p? (record-predicate td293e@td2939)) (set! td2b9f@td2945@p? td2945@p?) (set! td2947@make-warning (record-constructor td2942@td293a)) (set! td2ba0@td2947@make-warning td2947@make-warning) (set! td2949@warning? (condition-predicate td293e@td2939)) (set! td2ba1@td2949@warning? td2949@warning?) (set! td294b@&warning-rtd td293e@td2939) (set! td2ba2@td294b@&warning-rtd td294b@&warning-rtd) (set! td294d@&warning-rcd td2942@td293a) (set! td2ba3@td294d@&warning-rcd td294d@&warning-rcd) (set! td2953@td294e (make-record-type-descriptor '&serious td28cc@td28c7 'td2951 '#f '#f '#())) (set! td2ba4@td2953@td294e td2953@td294e) (set! td2955@td2950 '#f) (set! td2ba5@td2955@td2950 td2955@td2950) (set! td2957@td294f (make-record-constructor-descriptor td2953@td294e td28d0@td28c8 td2955@td2950)) (set! td2ba6@td2957@td294f td2957@td294f) (set! td295a@p? (record-predicate td2953@td294e)) (set! td2ba7@td295a@p? td295a@p?) (set! td295c@make-serious-condition (record-constructor td2957@td294f)) (set! td2ba8@td295c@make-serious-condition td295c@make-serious-condition) (set! td295e@serious-condition? (condition-predicate td2953@td294e)) (set! td2ba9@td295e@serious-condition? td295e@serious-condition?) (set! td2960@&serious-rtd td2953@td294e) (set! td2baa@td2960@&serious-rtd td2960@&serious-rtd) (set! td2962@&serious-rcd td2957@td294f) (set! td2bab@td2962@&serious-rcd td2962@&serious-rcd) (set! td2968@td2963 (make-record-type-descriptor '&error td2953@td294e 'td2966 '#f '#f '#())) (set! td2bac@td2968@td2963 td2968@td2963) (set! td296a@td2965 '#f) (set! td2bad@td296a@td2965 td296a@td2965) (set! td296c@td2964 (make-record-constructor-descriptor td2968@td2963 td2957@td294f td296a@td2965)) (set! td2bae@td296c@td2964 td296c@td2964) (set! td296f@p? (record-predicate td2968@td2963)) (set! td2baf@td296f@p? td296f@p?) (set! td2971@make-error (record-constructor td296c@td2964)) (set! td2bb0@td2971@make-error td2971@make-error) (set! td2973@error? (condition-predicate td2968@td2963)) (set! td2bb1@td2973@error? td2973@error?) (set! td2975@&error-rtd td2968@td2963) (set! td2bb2@td2975@&error-rtd td2975@&error-rtd) (set! td2977@&error-rcd td296c@td2964) (set! td2bb3@td2977@&error-rcd td2977@&error-rcd) (set! td297d@td2978 (make-record-type-descriptor '&violation td2953@td294e 'td297b '#f '#f '#())) (set! td2bb4@td297d@td2978 td297d@td2978) (set! td297f@td297a '#f) (set! td2bb5@td297f@td297a td297f@td297a) (set! td2981@td2979 (make-record-constructor-descriptor td297d@td2978 td2957@td294f td297f@td297a)) (set! td2bb6@td2981@td2979 td2981@td2979) (set! td2984@p? (record-predicate td297d@td2978)) (set! td2bb7@td2984@p? td2984@p?) (set! td2986@make-violation (record-constructor td2981@td2979)) (set! td2bb8@td2986@make-violation td2986@make-violation) (set! td2988@violation? (condition-predicate td297d@td2978)) (set! td2bb9@td2988@violation? td2988@violation?) (set! td298a@&violation-rtd td297d@td2978) (set! td2bba@td298a@&violation-rtd td298a@&violation-rtd) (set! td298c@&violation-rcd td2981@td2979) (set! td2bbb@td298c@&violation-rcd td298c@&violation-rcd) (set! td2992@td298d (make-record-type-descriptor '&assertion td297d@td2978 'td2990 '#f '#f '#())) (set! td2bbc@td2992@td298d td2992@td298d) (set! td2994@td298f '#f) (set! td2bbd@td2994@td298f td2994@td298f) (set! td2996@td298e (make-record-constructor-descriptor td2992@td298d td2981@td2979 td2994@td298f)) (set! td2bbe@td2996@td298e td2996@td298e) (set! td2999@p? (record-predicate td2992@td298d)) (set! td2bbf@td2999@p? td2999@p?) (set! td299b@make-assertion-violation (record-constructor td2996@td298e)) (set! td2bc0@td299b@make-assertion-violation td299b@make-assertion-violation) (set! td299d@assertion-violation? (condition-predicate td2992@td298d)) (set! td2bc1@td299d@assertion-violation? td299d@assertion-violation?) (set! td299f@&assertion-rtd td2992@td298d) (set! td2bc2@td299f@&assertion-rtd td299f@&assertion-rtd) (set! td29a1@&assertion-rcd td2996@td298e) (set! td2bc3@td29a1@&assertion-rcd td29a1@&assertion-rcd) (set! td29a9@td29a4 (make-record-type-descriptor '&irritants td28cc@td28c7 'td29a7 '#f '#f '#((immutable irritants)))) (set! td2bc4@td29a9@td29a4 td29a9@td29a4) (set! td29ab@td29a6 '#f) (set! td2bc5@td29ab@td29a6 td29ab@td29a6) (set! td29ad@td29a5 (make-record-constructor-descriptor td29a9@td29a4 td28d0@td28c8 td29ab@td29a6)) (set! td2bc6@td29ad@td29a5 td29ad@td29a5) (set! td29b0@p? (record-predicate td29a9@td29a4)) (set! td2bc7@td29b0@p? td29b0@p?) (set! td29b2@make-irritants-condition (record-constructor td29ad@td29a5)) (set! td2bc8@td29b2@make-irritants-condition td29b2@make-irritants-condition) (set! td29b4@td29a3 (record-accessor td29a9@td29a4 '0)) (set! td2bc9@td29b4@td29a3 td29b4@td29a3) (set! td29b6@irritants-condition? (condition-predicate td29a9@td29a4)) (set! td2bca@td29b6@irritants-condition? td29b6@irritants-condition?) (set! td29b8@condition-irritants (condition-accessor td29a9@td29a4 td29b4@td29a3)) (set! td2bcb@td29b8@condition-irritants td29b8@condition-irritants) (set! td29ba@&irritants-rtd td29a9@td29a4) (set! td2bcc@td29ba@&irritants-rtd td29ba@&irritants-rtd) (set! td29bc@&irritants-rcd td29ad@td29a5) (set! td2bcd@td29bc@&irritants-rcd td29bc@&irritants-rcd) (set! td29c4@td29bf (make-record-type-descriptor '&who td28cc@td28c7 'td29c2 '#f '#f '#((immutable who)))) (set! td2bce@td29c4@td29bf td29c4@td29bf) (set! td29c6@td29c1 '#f) (set! td2bcf@td29c6@td29c1 td29c6@td29c1) (set! td29c8@td29c0 (make-record-constructor-descriptor td29c4@td29bf td28d0@td28c8 td29c6@td29c1)) (set! td2bd0@td29c8@td29c0 td29c8@td29c0) (set! td29cb@p? (record-predicate td29c4@td29bf)) (set! td2bd1@td29cb@p? td29cb@p?) (set! td29cd@make-who-condition (record-constructor td29c8@td29c0)) (set! td2bd2@td29cd@make-who-condition td29cd@make-who-condition) (set! td29cf@td29be (record-accessor td29c4@td29bf '0)) (set! td2bd3@td29cf@td29be td29cf@td29be) (set! td29d1@who-condition? (condition-predicate td29c4@td29bf)) (set! td2bd4@td29d1@who-condition? td29d1@who-condition?) (set! td29d3@condition-who (condition-accessor td29c4@td29bf td29cf@td29be)) (set! td2bd5@td29d3@condition-who td29d3@condition-who) (set! td29d5@&who-rtd td29c4@td29bf) (set! td2bd6@td29d5@&who-rtd td29d5@&who-rtd) (set! td29d7@&who-rcd td29c8@td29c0) (set! td2bd7@td29d7@&who-rcd td29d7@&who-rcd) (set! td29dd@td29d8 (make-record-type-descriptor '&non-continuable td297d@td2978 'td29db '#f '#f '#())) (set! td2bd8@td29dd@td29d8 td29dd@td29d8) (set! td29df@td29da '#f) (set! td2bd9@td29df@td29da td29df@td29da) (set! td29e1@td29d9 (make-record-constructor-descriptor td29dd@td29d8 td2981@td2979 td29df@td29da)) (set! td2bda@td29e1@td29d9 td29e1@td29d9) (set! td29e4@p? (record-predicate td29dd@td29d8)) (set! td2bdb@td29e4@p? td29e4@p?) (set! td29e6@make-non-continuable-violation (record-constructor td29e1@td29d9)) (set! td2bdc@td29e6@make-non-continuable-violation td29e6@make-non-continuable-violation) (set! td29e8@non-continuable-violation? (condition-predicate td29dd@td29d8)) (set! td2bdd@td29e8@non-continuable-violation? td29e8@non-continuable-violation?) (set! td29ea@&non-continuable-rtd td29dd@td29d8) (set! td2bde@td29ea@&non-continuable-rtd td29ea@&non-continuable-rtd) (set! td29ec@&non-continuable-rcd td29e1@td29d9) (set! td2bdf@td29ec@&non-continuable-rcd td29ec@&non-continuable-rcd) (set! td29f2@td29ed (make-record-type-descriptor '&implementation-restriction td297d@td2978 'td29f0 '#f '#f '#())) (set! td2be0@td29f2@td29ed td29f2@td29ed) (set! td29f4@td29ef '#f) (set! td2be1@td29f4@td29ef td29f4@td29ef) (set! td29f6@td29ee (make-record-constructor-descriptor td29f2@td29ed td2981@td2979 td29f4@td29ef)) (set! td2be2@td29f6@td29ee td29f6@td29ee) (set! td29f9@p? (record-predicate td29f2@td29ed)) (set! td2be3@td29f9@p? td29f9@p?) (set! td29fb@make-implementation-restriction-violation (record-constructor td29f6@td29ee)) (set! td2be4@td29fb@make-implementation-restriction-violation td29fb@make-implementation-restriction-violation) (set! td29fd@implementation-restriction-violation? (condition-predicate td29f2@td29ed)) (set! td2be5@td29fd@implementation-restriction-violation? td29fd@implementation-restriction-violation?) (set! td29ff@&implementation-restriction-rtd td29f2@td29ed) (set! td2be6@td29ff@&implementation-restriction-rtd td29ff@&implementation-restriction-rtd) (set! td2a01@&implementation-restriction-rcd td29f6@td29ee) (set! td2be7@td2a01@&implementation-restriction-rcd td2a01@&implementation-restriction-rcd) (set! td2a07@td2a02 (make-record-type-descriptor '&lexical td297d@td2978 'td2a05 '#f '#f '#())) (set! td2be8@td2a07@td2a02 td2a07@td2a02) (set! td2a09@td2a04 '#f) (set! td2be9@td2a09@td2a04 td2a09@td2a04) (set! td2a0b@td2a03 (make-record-constructor-descriptor td2a07@td2a02 td2981@td2979 td2a09@td2a04)) (set! td2bea@td2a0b@td2a03 td2a0b@td2a03) (set! td2a0e@p? (record-predicate td2a07@td2a02)) (set! td2beb@td2a0e@p? td2a0e@p?) (set! td2a10@make-lexical-violation (record-constructor td2a0b@td2a03)) (set! td2bec@td2a10@make-lexical-violation td2a10@make-lexical-violation) (set! td2a12@lexical-violation? (condition-predicate td2a07@td2a02)) (set! td2bed@td2a12@lexical-violation? td2a12@lexical-violation?) (set! td2a14@&lexical-rtd td2a07@td2a02) (set! td2bee@td2a14@&lexical-rtd td2a14@&lexical-rtd) (set! td2a16@&lexical-rcd td2a0b@td2a03) (set! td2bef@td2a16@&lexical-rcd td2a16@&lexical-rcd) (set! td2a20@td2a1b (make-record-type-descriptor '&syntax td297d@td2978 'td2a1e '#f '#f '#((immutable form) (immutable subform)))) (set! td2bf0@td2a20@td2a1b td2a20@td2a1b) (set! td2a22@td2a1d '#f) (set! td2bf1@td2a22@td2a1d td2a22@td2a1d) (set! td2a24@td2a1c (make-record-constructor-descriptor td2a20@td2a1b td2981@td2979 td2a22@td2a1d)) (set! td2bf2@td2a24@td2a1c td2a24@td2a1c) (set! td2a27@p? (record-predicate td2a20@td2a1b)) (set! td2bf3@td2a27@p? td2a27@p?) (set! td2a29@make-syntax-violation (record-constructor td2a24@td2a1c)) (set! td2bf4@td2a29@make-syntax-violation td2a29@make-syntax-violation) (set! td2a2b@td2a18 (record-accessor td2a20@td2a1b '0)) (set! td2bf5@td2a2b@td2a18 td2a2b@td2a18) (set! td2a2d@td2a1a (record-accessor td2a20@td2a1b '1)) (set! td2bf6@td2a2d@td2a1a td2a2d@td2a1a) (set! td2a2f@syntax-violation? (condition-predicate td2a20@td2a1b)) (set! td2bf7@td2a2f@syntax-violation? td2a2f@syntax-violation?) (set! td2a31@syntax-violation-form (condition-accessor td2a20@td2a1b td2a2b@td2a18)) (set! td2bf8@td2a31@syntax-violation-form td2a31@syntax-violation-form) (set! td2a33@syntax-violation-subform (condition-accessor td2a20@td2a1b td2a2d@td2a1a)) (set! td2bf9@td2a33@syntax-violation-subform td2a33@syntax-violation-subform) (set! td2a35@&syntax-rtd td2a20@td2a1b) (set! td2bfa@td2a35@&syntax-rtd td2a35@&syntax-rtd) (set! td2a37@&syntax-rcd td2a24@td2a1c) (set! td2bfb@td2a37@&syntax-rcd td2a37@&syntax-rcd) (set! td2a3d@td2a38 (make-record-type-descriptor '&undefined td297d@td2978 'td2a3b '#f '#f '#())) (set! td2bfc@td2a3d@td2a38 td2a3d@td2a38) (set! td2a3f@td2a3a '#f) (set! td2bfd@td2a3f@td2a3a td2a3f@td2a3a) (set! td2a41@td2a39 (make-record-constructor-descriptor td2a3d@td2a38 td2981@td2979 td2a3f@td2a3a)) (set! td2bfe@td2a41@td2a39 td2a41@td2a39) (set! td2a44@p? (record-predicate td2a3d@td2a38)) (set! td2bff@td2a44@p? td2a44@p?) (set! td2a46@make-undefined-violation (record-constructor td2a41@td2a39)) (set! td2c00@td2a46@make-undefined-violation td2a46@make-undefined-violation) (set! td2a48@undefined-violation? (condition-predicate td2a3d@td2a38)) (set! td2c01@td2a48@undefined-violation? td2a48@undefined-violation?) (set! td2a4a@&undefined-rtd td2a3d@td2a38) (set! td2c02@td2a4a@&undefined-rtd td2a4a@&undefined-rtd) (set! td2a4c@&undefined-rcd td2a41@td2a39) (set! td2c03@td2a4c@&undefined-rcd td2a4c@&undefined-rcd) (set! td2a52@td2a4d (make-record-type-descriptor '&i/o td2968@td2963 'td2a50 '#f '#f '#())) (set! td2c04@td2a52@td2a4d td2a52@td2a4d) (set! td2a54@td2a4f '#f) (set! td2c05@td2a54@td2a4f td2a54@td2a4f) (set! td2a56@td2a4e (make-record-constructor-descriptor td2a52@td2a4d td296c@td2964 td2a54@td2a4f)) (set! td2c06@td2a56@td2a4e td2a56@td2a4e) (set! td2a59@p? (record-predicate td2a52@td2a4d)) (set! td2c07@td2a59@p? td2a59@p?) (set! td2a5b@make-i/o-error (record-constructor td2a56@td2a4e)) (set! td2c08@td2a5b@make-i/o-error td2a5b@make-i/o-error) (set! td2a5d@i/o-error? (condition-predicate td2a52@td2a4d)) (set! td2c09@td2a5d@i/o-error? td2a5d@i/o-error?) (set! td2a5f@&i/o-rtd td2a52@td2a4d) (set! td2c0a@td2a5f@&i/o-rtd td2a5f@&i/o-rtd) (set! td2a61@&i/o-rcd td2a56@td2a4e) (set! td2c0b@td2a61@&i/o-rcd td2a61@&i/o-rcd) (set! td2a67@td2a62 (make-record-type-descriptor '&i/o-read td2a52@td2a4d 'td2a65 '#f '#f '#())) (set! td2c0c@td2a67@td2a62 td2a67@td2a62) (set! td2a69@td2a64 '#f) (set! td2c0d@td2a69@td2a64 td2a69@td2a64) (set! td2a6b@td2a63 (make-record-constructor-descriptor td2a67@td2a62 td2a56@td2a4e td2a69@td2a64)) (set! td2c0e@td2a6b@td2a63 td2a6b@td2a63) (set! td2a6e@p? (record-predicate td2a67@td2a62)) (set! td2c0f@td2a6e@p? td2a6e@p?) (set! td2a70@make-i/o-read-error (record-constructor td2a6b@td2a63)) (set! td2c10@td2a70@make-i/o-read-error td2a70@make-i/o-read-error) (set! td2a72@i/o-read-error? (condition-predicate td2a67@td2a62)) (set! td2c11@td2a72@i/o-read-error? td2a72@i/o-read-error?) (set! td2a74@&i/o-read-rtd td2a67@td2a62) (set! td2c12@td2a74@&i/o-read-rtd td2a74@&i/o-read-rtd) (set! td2a76@&i/o-read-rcd td2a6b@td2a63) (set! td2c13@td2a76@&i/o-read-rcd td2a76@&i/o-read-rcd) (set! td2a7c@td2a77 (make-record-type-descriptor '&i/o-write td2a52@td2a4d 'td2a7a '#f '#f '#())) (set! td2c14@td2a7c@td2a77 td2a7c@td2a77) (set! td2a7e@td2a79 '#f) (set! td2c15@td2a7e@td2a79 td2a7e@td2a79) (set! td2a80@td2a78 (make-record-constructor-descriptor td2a7c@td2a77 td2a56@td2a4e td2a7e@td2a79)) (set! td2c16@td2a80@td2a78 td2a80@td2a78) (set! td2a83@p? (record-predicate td2a7c@td2a77)) (set! td2c17@td2a83@p? td2a83@p?) (set! td2a85@make-i/o-write-error (record-constructor td2a80@td2a78)) (set! td2c18@td2a85@make-i/o-write-error td2a85@make-i/o-write-error) (set! td2a87@i/o-write-error? (condition-predicate td2a7c@td2a77)) (set! td2c19@td2a87@i/o-write-error? td2a87@i/o-write-error?) (set! td2a89@&i/o-write-rtd td2a7c@td2a77) (set! td2c1a@td2a89@&i/o-write-rtd td2a89@&i/o-write-rtd) (set! td2a8b@&i/o-write-rcd td2a80@td2a78) (set! td2c1b@td2a8b@&i/o-write-rcd td2a8b@&i/o-write-rcd) (set! td2a93@td2a8e (make-record-type-descriptor '&i/o-invalid-position td2a52@td2a4d 'td2a91 '#f '#f '#((immutable position)))) (set! td2c1c@td2a93@td2a8e td2a93@td2a8e) (set! td2a95@td2a90 '#f) (set! td2c1d@td2a95@td2a90 td2a95@td2a90) (set! td2a97@td2a8f (make-record-constructor-descriptor td2a93@td2a8e td2a56@td2a4e td2a95@td2a90)) (set! td2c1e@td2a97@td2a8f td2a97@td2a8f) (set! td2a9a@p? (record-predicate td2a93@td2a8e)) (set! td2c1f@td2a9a@p? td2a9a@p?) (set! td2a9c@make-i/o-invalid-position-error (record-constructor td2a97@td2a8f)) (set! td2c20@td2a9c@make-i/o-invalid-position-error td2a9c@make-i/o-invalid-position-error) (set! td2a9e@td2a8d (record-accessor td2a93@td2a8e '0)) (set! td2c21@td2a9e@td2a8d td2a9e@td2a8d) (set! td2aa0@i/o-invalid-position-error? (condition-predicate td2a93@td2a8e)) (set! td2c22@td2aa0@i/o-invalid-position-error? td2aa0@i/o-invalid-position-error?) (set! td2aa2@i/o-error-position (condition-accessor td2a93@td2a8e td2a9e@td2a8d)) (set! td2c23@td2aa2@i/o-error-position td2aa2@i/o-error-position) (set! td2aa4@&i/o-invalid-position-rtd td2a93@td2a8e) (set! td2c24@td2aa4@&i/o-invalid-position-rtd td2aa4@&i/o-invalid-position-rtd) (set! td2aa6@&i/o-invalid-position-rcd td2a97@td2a8f) (set! td2c25@td2aa6@&i/o-invalid-position-rcd td2aa6@&i/o-invalid-position-rcd) (set! td2aae@td2aa9 (make-record-type-descriptor '&i/o-filename td2a52@td2a4d 'td2aac '#f '#f '#((immutable filename)))) (set! td2c26@td2aae@td2aa9 td2aae@td2aa9) (set! td2ab0@td2aab '#f) (set! td2c27@td2ab0@td2aab td2ab0@td2aab) (set! td2ab2@td2aaa (make-record-constructor-descriptor td2aae@td2aa9 td2a56@td2a4e td2ab0@td2aab)) (set! td2c28@td2ab2@td2aaa td2ab2@td2aaa) (set! td2ab5@p? (record-predicate td2aae@td2aa9)) (set! td2c29@td2ab5@p? td2ab5@p?) (set! td2ab7@make-i/o-filename-error (record-constructor td2ab2@td2aaa)) (set! td2c2a@td2ab7@make-i/o-filename-error td2ab7@make-i/o-filename-error) (set! td2ab9@td2aa8 (record-accessor td2aae@td2aa9 '0)) (set! td2c2b@td2ab9@td2aa8 td2ab9@td2aa8) (set! td2abb@i/o-filename-error? (condition-predicate td2aae@td2aa9)) (set! td2c2c@td2abb@i/o-filename-error? td2abb@i/o-filename-error?) (set! td2abd@i/o-error-filename (condition-accessor td2aae@td2aa9 td2ab9@td2aa8)) (set! td2c2d@td2abd@i/o-error-filename td2abd@i/o-error-filename) (set! td2abf@&i/o-filename-rtd td2aae@td2aa9) (set! td2c2e@td2abf@&i/o-filename-rtd td2abf@&i/o-filename-rtd) (set! td2ac1@&i/o-filename-rcd td2ab2@td2aaa) (set! td2c2f@td2ac1@&i/o-filename-rcd td2ac1@&i/o-filename-rcd) (set! td2ac7@td2ac2 (make-record-type-descriptor '&i/o-file-protection td2aae@td2aa9 'td2ac5 '#f '#f '#())) (set! td2c30@td2ac7@td2ac2 td2ac7@td2ac2) (set! td2ac9@td2ac4 '#f) (set! td2c31@td2ac9@td2ac4 td2ac9@td2ac4) (set! td2acb@td2ac3 (make-record-constructor-descriptor td2ac7@td2ac2 td2ab2@td2aaa td2ac9@td2ac4)) (set! td2c32@td2acb@td2ac3 td2acb@td2ac3) (set! td2ace@p? (record-predicate td2ac7@td2ac2)) (set! td2c33@td2ace@p? td2ace@p?) (set! td2ad0@make-i/o-file-protection-error (record-constructor td2acb@td2ac3)) (set! td2c34@td2ad0@make-i/o-file-protection-error td2ad0@make-i/o-file-protection-error) (set! td2ad2@i/o-file-protection-error? (condition-predicate td2ac7@td2ac2)) (set! td2c35@td2ad2@i/o-file-protection-error? td2ad2@i/o-file-protection-error?) (set! td2ad4@&i/o-file-protection-rtd td2ac7@td2ac2) (set! td2c36@td2ad4@&i/o-file-protection-rtd td2ad4@&i/o-file-protection-rtd) (set! td2ad6@&i/o-file-protection-rcd td2acb@td2ac3) (set! td2c37@td2ad6@&i/o-file-protection-rcd td2ad6@&i/o-file-protection-rcd) (set! td2adc@td2ad7 (make-record-type-descriptor '&i/o-file-is-read-only td2ac7@td2ac2 'td2ada '#f '#f '#())) (set! td2c38@td2adc@td2ad7 td2adc@td2ad7) (set! td2ade@td2ad9 '#f) (set! td2c39@td2ade@td2ad9 td2ade@td2ad9) (set! td2ae0@td2ad8 (make-record-constructor-descriptor td2adc@td2ad7 td2acb@td2ac3 td2ade@td2ad9)) (set! td2c3a@td2ae0@td2ad8 td2ae0@td2ad8) (set! td2ae3@p? (record-predicate td2adc@td2ad7)) (set! td2c3b@td2ae3@p? td2ae3@p?) (set! td2ae5@make-i/o-file-is-read-only-error (record-constructor td2ae0@td2ad8)) (set! td2c3c@td2ae5@make-i/o-file-is-read-only-error td2ae5@make-i/o-file-is-read-only-error) (set! td2ae7@i/o-file-is-read-only-error? (condition-predicate td2adc@td2ad7)) (set! td2c3d@td2ae7@i/o-file-is-read-only-error? td2ae7@i/o-file-is-read-only-error?) (set! td2ae9@&i/o-file-is-read-only-rtd td2adc@td2ad7) (set! td2c3e@td2ae9@&i/o-file-is-read-only-rtd td2ae9@&i/o-file-is-read-only-rtd) (set! td2aeb@&i/o-file-is-read-only-rcd td2ae0@td2ad8) (set! td2c3f@td2aeb@&i/o-file-is-read-only-rcd td2aeb@&i/o-file-is-read-only-rcd) (set! td2af1@td2aec (make-record-type-descriptor '&i/o-file-already-exists td2aae@td2aa9 'td2aef '#f '#f '#())) (set! td2c40@td2af1@td2aec td2af1@td2aec) (set! td2af3@td2aee '#f) (set! td2c41@td2af3@td2aee td2af3@td2aee) (set! td2af5@td2aed (make-record-constructor-descriptor td2af1@td2aec td2ab2@td2aaa td2af3@td2aee)) (set! td2c42@td2af5@td2aed td2af5@td2aed) (set! td2af8@p? (record-predicate td2af1@td2aec)) (set! td2c43@td2af8@p? td2af8@p?) (set! td2afa@make-i/o-file-already-exists-error (record-constructor td2af5@td2aed)) (set! td2c44@td2afa@make-i/o-file-already-exists-error td2afa@make-i/o-file-already-exists-error) (set! td2afc@i/o-file-already-exists-error? (condition-predicate td2af1@td2aec)) (set! td2c45@td2afc@i/o-file-already-exists-error? td2afc@i/o-file-already-exists-error?) (set! td2afe@&i/o-file-already-exists-rtd td2af1@td2aec) (set! td2c46@td2afe@&i/o-file-already-exists-rtd td2afe@&i/o-file-already-exists-rtd) (set! td2b00@&i/o-file-already-exists-rcd td2af5@td2aed) (set! td2c47@td2b00@&i/o-file-already-exists-rcd td2b00@&i/o-file-already-exists-rcd) (set! td2b06@td2b01 (make-record-type-descriptor '&i/o-file-does-not-exist td2aae@td2aa9 'td2b04 '#f '#f '#())) (set! td2c48@td2b06@td2b01 td2b06@td2b01) (set! td2b08@td2b03 '#f) (set! td2c49@td2b08@td2b03 td2b08@td2b03) (set! td2b0a@td2b02 (make-record-constructor-descriptor td2b06@td2b01 td2ab2@td2aaa td2b08@td2b03)) (set! td2c4a@td2b0a@td2b02 td2b0a@td2b02) (set! td2b0d@p? (record-predicate td2b06@td2b01)) (set! td2c4b@td2b0d@p? td2b0d@p?) (set! td2b0f@make-i/o-file-does-not-exist-error (record-constructor td2b0a@td2b02)) (set! td2c4c@td2b0f@make-i/o-file-does-not-exist-error td2b0f@make-i/o-file-does-not-exist-error) (set! td2b11@i/o-file-does-not-exist-error? (condition-predicate td2b06@td2b01)) (set! td2c4d@td2b11@i/o-file-does-not-exist-error? td2b11@i/o-file-does-not-exist-error?) (set! td2b13@&i/o-file-does-not-exist-rtd td2b06@td2b01) (set! td2c4e@td2b13@&i/o-file-does-not-exist-rtd td2b13@&i/o-file-does-not-exist-rtd) (set! td2b15@&i/o-file-does-not-exist-rcd td2b0a@td2b02) (set! td2c4f@td2b15@&i/o-file-does-not-exist-rcd td2b15@&i/o-file-does-not-exist-rcd) (set! td2b1d@td2b18 (make-record-type-descriptor '&i/o-port td2a52@td2a4d 'td2b1b '#f '#f '#((immutable port)))) (set! td2c50@td2b1d@td2b18 td2b1d@td2b18) (set! td2b1f@td2b1a '#f) (set! td2c51@td2b1f@td2b1a td2b1f@td2b1a) (set! td2b21@td2b19 (make-record-constructor-descriptor td2b1d@td2b18 td2a56@td2a4e td2b1f@td2b1a)) (set! td2c52@td2b21@td2b19 td2b21@td2b19) (set! td2b24@p? (record-predicate td2b1d@td2b18)) (set! td2c53@td2b24@p? td2b24@p?) (set! td2b26@make-i/o-port-error (record-constructor td2b21@td2b19)) (set! td2c54@td2b26@make-i/o-port-error td2b26@make-i/o-port-error) (set! td2b28@td2b17 (record-accessor td2b1d@td2b18 '0)) (set! td2c55@td2b28@td2b17 td2b28@td2b17) (set! td2b2a@i/o-port-error? (condition-predicate td2b1d@td2b18)) (set! td2c56@td2b2a@i/o-port-error? td2b2a@i/o-port-error?) (set! td2b2c@i/o-error-port (condition-accessor td2b1d@td2b18 td2b28@td2b17)) (set! td2c57@td2b2c@i/o-error-port td2b2c@i/o-error-port) (set! td2b2e@&i/o-port-rtd td2b1d@td2b18) (set! td2c58@td2b2e@&i/o-port-rtd td2b2e@&i/o-port-rtd) (set! td2b30@&i/o-port-rcd td2b21@td2b19) (set! td2c59@td2b30@&i/o-port-rcd td2b30@&i/o-port-rcd) (set! td2b36@td2b31 (make-record-type-descriptor '&i/o-decoding td2b1d@td2b18 'td2b34 '#f '#f '#())) (set! td2c5a@td2b36@td2b31 td2b36@td2b31) (set! td2b38@td2b33 '#f) (set! td2c5b@td2b38@td2b33 td2b38@td2b33) (set! td2b3a@td2b32 (make-record-constructor-descriptor td2b36@td2b31 td2b21@td2b19 td2b38@td2b33)) (set! td2c5c@td2b3a@td2b32 td2b3a@td2b32) (set! td2b3d@p? (record-predicate td2b36@td2b31)) (set! td2c5d@td2b3d@p? td2b3d@p?) (set! td2b3f@make-i/o-decoding-error (record-constructor td2b3a@td2b32)) (set! td2c5e@td2b3f@make-i/o-decoding-error td2b3f@make-i/o-decoding-error) (set! td2b41@i/o-decoding-error? (condition-predicate td2b36@td2b31)) (set! td2c5f@td2b41@i/o-decoding-error? td2b41@i/o-decoding-error?) (set! td2b43@&i/o-decoding-rtd td2b36@td2b31) (set! td2c60@td2b43@&i/o-decoding-rtd td2b43@&i/o-decoding-rtd) (set! td2b45@&i/o-decoding-rcd td2b3a@td2b32) (set! td2c61@td2b45@&i/o-decoding-rcd td2b45@&i/o-decoding-rcd) (set! td2b4d@td2b48 (make-record-type-descriptor '&i/o-encoding td2b1d@td2b18 'td2b4b '#f '#f '#((immutable char)))) (set! td2c62@td2b4d@td2b48 td2b4d@td2b48) (set! td2b4f@td2b4a '#f) (set! td2c63@td2b4f@td2b4a td2b4f@td2b4a) (set! td2b51@td2b49 (make-record-constructor-descriptor td2b4d@td2b48 td2b21@td2b19 td2b4f@td2b4a)) (set! td2c64@td2b51@td2b49 td2b51@td2b49) (set! td2b54@p? (record-predicate td2b4d@td2b48)) (set! td2c65@td2b54@p? td2b54@p?) (set! td2b56@make-i/o-encoding-error (record-constructor td2b51@td2b49)) (set! td2c66@td2b56@make-i/o-encoding-error td2b56@make-i/o-encoding-error) (set! td2b58@td2b47 (record-accessor td2b4d@td2b48 '0)) (set! td2c67@td2b58@td2b47 td2b58@td2b47) (set! td2b5a@i/o-encoding-error? (condition-predicate td2b4d@td2b48)) (set! td2c68@td2b5a@i/o-encoding-error? td2b5a@i/o-encoding-error?) (set! td2b5c@i/o-encoding-error-char (condition-accessor td2b4d@td2b48 td2b58@td2b47)) (set! td2c69@td2b5c@i/o-encoding-error-char td2b5c@i/o-encoding-error-char) (set! td2b5e@&i/o-encoding-rtd td2b4d@td2b48) (set! td2c6a@td2b5e@&i/o-encoding-rtd td2b5e@&i/o-encoding-rtd) (set! td2b60@&i/o-encoding-rcd td2b51@td2b49) (set! td2c6b@td2b60@&i/o-encoding-rcd td2b60@&i/o-encoding-rcd) (set! td2b66@td2b61 (make-record-type-descriptor '&no-infinities td29f2@td29ed 'td2b64 '#f '#f '#())) (set! td2c6c@td2b66@td2b61 td2b66@td2b61) (set! td2b68@td2b63 '#f) (set! td2c6d@td2b68@td2b63 td2b68@td2b63) (set! td2b6a@td2b62 (make-record-constructor-descriptor td2b66@td2b61 td29f6@td29ee td2b68@td2b63)) (set! td2c6e@td2b6a@td2b62 td2b6a@td2b62) (set! td2b6d@p? (record-predicate td2b66@td2b61)) (set! td2c6f@td2b6d@p? td2b6d@p?) (set! td2b6f@make-no-infinities-violation (record-constructor td2b6a@td2b62)) (set! td2c70@td2b6f@make-no-infinities-violation td2b6f@make-no-infinities-violation) (set! td2b71@no-infinities-violation? (condition-predicate td2b66@td2b61)) (set! td2c71@td2b71@no-infinities-violation? td2b71@no-infinities-violation?) (set! td2b73@&no-infinities-rtd td2b66@td2b61) (set! td2c72@td2b73@&no-infinities-rtd td2b73@&no-infinities-rtd) (set! td2b75@&no-infinities-rcd td2b6a@td2b62) (set! td2c73@td2b75@&no-infinities-rcd td2b75@&no-infinities-rcd) (set! td2b7b@td2b76 (make-record-type-descriptor '&no-nans td29f2@td29ed 'td2b79 '#f '#f '#())) (set! td2c74@td2b7b@td2b76 td2b7b@td2b76) (set! td2b7d@td2b78 '#f) (set! td2c75@td2b7d@td2b78 td2b7d@td2b78) (set! td2b7f@td2b77 (make-record-constructor-descriptor td2b7b@td2b76 td29f6@td29ee td2b7d@td2b78)) (set! td2c76@td2b7f@td2b77 td2b7f@td2b77) (set! td2b82@p? (record-predicate td2b7b@td2b76)) (set! td2c77@td2b82@p? td2b82@p?) (set! td2b84@make-no-nans-violation (record-constructor td2b7f@td2b77)) (set! td2c78@td2b84@make-no-nans-violation td2b84@make-no-nans-violation) (set! td2b86@no-nans-violation? (condition-predicate td2b7b@td2b76)) (set! td2c79@td2b86@no-nans-violation? td2b86@no-nans-violation?) (set! td2b88@&no-nans-rtd td2b7b@td2b76) (set! td2c7a@td2b88@&no-nans-rtd td2b88@&no-nans-rtd) (set! td2b8a@&no-nans-rcd td2b7f@td2b77) (set! td2c7b@td2b8a@&no-nans-rcd td2b8a@&no-nans-rcd) (void))
(begin (begin (td711@td6c6@current-primitive-locations (lambda (td3148@x) (let ((td314a@t (assq td3148@x '((&no-nans-rcd . td2c7b@td2b8a@&no-nans-rcd) (&no-nans-rtd . td2c7a@td2b88@&no-nans-rtd) (&no-infinities-rcd . td2c73@td2b75@&no-infinities-rcd) (&no-infinities-rtd . td2c72@td2b73@&no-infinities-rtd) (&i/o-encoding-rcd . td2c6b@td2b60@&i/o-encoding-rcd) (&i/o-encoding-rtd . td2c6a@td2b5e@&i/o-encoding-rtd) (&i/o-decoding-rcd . td2c61@td2b45@&i/o-decoding-rcd) (&i/o-decoding-rtd . td2c60@td2b43@&i/o-decoding-rtd) (&i/o-port-rcd . td2c59@td2b30@&i/o-port-rcd) (&i/o-port-rtd . td2c58@td2b2e@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . td2c4f@td2b15@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . td2c4e@td2b13@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . td2c47@td2b00@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . td2c46@td2afe@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . td2c3f@td2aeb@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . td2c3e@td2ae9@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . td2c37@td2ad6@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . td2c36@td2ad4@&i/o-file-protection-rtd) (&i/o-filename-rcd . td2c2f@td2ac1@&i/o-filename-rcd) (&i/o-filename-rtd . td2c2e@td2abf@&i/o-filename-rtd) (&i/o-invalid-position-rcd . td2c25@td2aa6@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . td2c24@td2aa4@&i/o-invalid-position-rtd) (&i/o-write-rcd . td2c1b@td2a8b@&i/o-write-rcd) (&i/o-write-rtd . td2c1a@td2a89@&i/o-write-rtd) (&i/o-read-rcd . td2c13@td2a76@&i/o-read-rcd) (&i/o-read-rtd . td2c12@td2a74@&i/o-read-rtd) (&i/o-rcd . td2c0b@td2a61@&i/o-rcd) (&i/o-rtd . td2c0a@td2a5f@&i/o-rtd) (&undefined-rcd . td2c03@td2a4c@&undefined-rcd) (&undefined-rtd . td2c02@td2a4a@&undefined-rtd) (&syntax-rcd . td2bfb@td2a37@&syntax-rcd) (&syntax-rtd . td2bfa@td2a35@&syntax-rtd) (&lexical-rcd . td2bef@td2a16@&lexical-rcd) (&lexical-rtd . td2bee@td2a14@&lexical-rtd) (&implementation-restriction-rcd . td2be7@td2a01@&implementation-restriction-rcd) (&implementation-restriction-rtd . td2be6@td29ff@&implementation-restriction-rtd) (&non-continuable-rcd . td2bdf@td29ec@&non-continuable-rcd) (&non-continuable-rtd . td2bde@td29ea@&non-continuable-rtd) (&who-rcd . td2bd7@td29d7@&who-rcd) (&who-rtd . td2bd6@td29d5@&who-rtd) (&irritants-rcd . td2bcd@td29bc@&irritants-rcd) (&irritants-rtd . td2bcc@td29ba@&irritants-rtd) (&assertion-rcd . td2bc3@td29a1@&assertion-rcd) (&assertion-rtd . td2bc2@td299f@&assertion-rtd) (&violation-rcd . td2bbb@td298c@&violation-rcd) (&violation-rtd . td2bba@td298a@&violation-rtd) (&error-rcd . td2bb3@td2977@&error-rcd) (&error-rtd . td2bb2@td2975@&error-rtd) (&serious-rcd . td2bab@td2962@&serious-rcd) (&serious-rtd . td2baa@td2960@&serious-rtd) (&warning-rcd . td2ba3@td294d@&warning-rcd) (&warning-rtd . td2ba2@td294b@&warning-rtd) (&message-rcd . td2b9b@td2938@&message-rcd) (&message-rtd . td2b9a@td2936@&message-rtd) (&condition-rcd . td2b91@td28d9@&condition-rcd) (&condition-rtd . td2b90@td28d7@&condition-rtd) (syntax-error . td28b3@tde57@syntax-error) (syntax-dispatch . td2851@tdd7b@syntax-dispatch) (load . td2df0@td2c9b@load) (interaction-environment . td28bc@tde69@interaction-environment) (library-path . td978@td7b4@library-path) (mosh-cache-dir . td6bf@td59f@mosh-cache-dir) (make-parameter . td6be@td59d@make-parameter) (make-variable-transformer . td280e@tdba6@make-variable-transformer) (identifier? . td28b6@tde5d@identifier?) (generate-temporaries . td28ac@tde49@generate-temporaries) (free-identifier=? . td28ad@tde4b@free-identifier=?) (syntax->datum . td28b8@tde61@syntax->datum) (datum->syntax . td28b7@tde5f@datum->syntax) (bound-identifier=? . td28ae@tde4d@bound-identifier=?) (make-i/o-write-error . td2c18@td2a85@make-i/o-write-error) (make-i/o-read-error . td2c10@td2a70@make-i/o-read-error) (make-i/o-port-error . td2c54@td2b26@make-i/o-port-error) (make-i/o-invalid-position-error . td2c20@td2a9c@make-i/o-invalid-position-error) (make-i/o-filename-error . td2c2a@td2ab7@make-i/o-filename-error) (make-i/o-file-protection-error . td2c34@td2ad0@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . td2c3c@td2ae5@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . td2c4c@td2b0f@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . td2c44@td2afa@make-i/o-file-already-exists-error) (make-i/o-error . td2c08@td2a5b@make-i/o-error) (make-i/o-encoding-error . td2c66@td2b56@make-i/o-encoding-error) (make-i/o-decoding-error . td2c5e@td2b3f@make-i/o-decoding-error) (i/o-write-error? . td2c19@td2a87@i/o-write-error?) (i/o-read-error? . td2c11@td2a72@i/o-read-error?) (i/o-port-error? . td2c56@td2b2a@i/o-port-error?) (i/o-invalid-position-error? . td2c22@td2aa0@i/o-invalid-position-error?) (i/o-filename-error? . td2c2c@td2abb@i/o-filename-error?) (i/o-file-protection-error? . td2c35@td2ad2@i/o-file-protection-error?) (i/o-file-is-read-only-error? . td2c3d@td2ae7@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . td2c4d@td2b11@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . td2c45@td2afc@i/o-file-already-exists-error?) (i/o-error? . td2c09@td2a5d@i/o-error?) (i/o-error-position . td2c23@td2aa2@i/o-error-position) (i/o-error-port . td2c57@td2b2c@i/o-error-port) (i/o-error-filename . td2c2d@td2abd@i/o-error-filename) (i/o-encoding-error? . td2c68@td2b5a@i/o-encoding-error?) (i/o-encoding-error-char . td2c69@td2b5c@i/o-encoding-error-char) (i/o-decoding-error? . td2c5f@td2b41@i/o-decoding-error?) (scheme-report-environment . td28a3@tde37@scheme-report-environment) (null-environment . td28a2@tde35@null-environment) (command-line . td2ded@td2c95@command-line) (eval . td28a5@tde3b@eval) (environment . td28a1@tde33@environment) (who-condition? . td2bd4@td29d1@who-condition?) (warning? . td2ba1@td2949@warning?) (violation? . td2bb9@td2988@violation?) (undefined-violation? . td2c01@td2a48@undefined-violation?) (syntax-violation? . td2bf7@td2a2f@syntax-violation?) (syntax-violation-subform . td2bf9@td2a33@syntax-violation-subform) (syntax-violation-form . td2bf8@td2a31@syntax-violation-form) (syntax-violation . td28b5@tde5b@syntax-violation) (serious-condition? . td2ba9@td295e@serious-condition?) (non-continuable-violation? . td2bdd@td29e8@non-continuable-violation?) (message-condition? . td2b98@td2932@message-condition?) (make-who-condition . td2bd2@td29cd@make-who-condition) (make-warning . td2ba0@td2947@make-warning) (make-violation . td2bb8@td2986@make-violation) (make-undefined-violation . td2c00@td2a46@make-undefined-violation) (make-syntax-violation . td2bf4@td2a29@make-syntax-violation) (make-serious-condition . td2ba8@td295c@make-serious-condition) (make-non-continuable-violation . td2bdc@td29e6@make-non-continuable-violation) (make-message-condition . td2b96@td292e@make-message-condition) (make-lexical-violation . td2bec@td2a10@make-lexical-violation) (make-irritants-condition . td2bc8@td29b2@make-irritants-condition) (make-implementation-restriction-violation . td2be4@td29fb@make-implementation-restriction-violation) (make-error . td2bb0@td2971@make-error) (make-assertion-violation . td2bc0@td299b@make-assertion-violation) (lexical-violation? . td2bed@td2a12@lexical-violation?) (irritants-condition? . td2bca@td29b6@irritants-condition?) (implementation-restriction-violation? . td2be5@td29fd@implementation-restriction-violation?) (error? . td2bb1@td2973@error?) (condition-who . td2bd5@td29d3@condition-who) (condition-message . td2b99@td2934@condition-message) (condition-irritants . td2bcb@td29b8@condition-irritants) (assertion-violation? . td2bc1@td299d@assertion-violation?) (no-nans-violation? . td2c79@td2b86@no-nans-violation?) (no-infinities-violation? . td2c71@td2b71@no-infinities-violation?) (make-no-nans-violation . td2c78@td2b84@make-no-nans-violation) (make-no-infinities-violation . td2c70@td2b6f@make-no-infinities-violation) (assertion-error . td28b2@tde55@assertion-error))))) (if td314a@t (cdr td314a@t) '#f)))) (td988@td7d4@install-library 'td3125 '(mosh interaction) '() '() '() '() '((regexp? . td311d) (alist->eq-hash-table . td3119) (format . td3116) (string-split . td310b) (call-process . td3105) (set-current-directory! . td3101) (expand-path . td3100) (current-directory . td30ff) (%spawn . td30fe) (%waitpid . td30fd) (simple-struct-name . td30fc) (simple-struct-set! . td30fb) (simple-struct-ref . td30fa) (make-simple-struct . td30f9) (simple-struct? . td30f8) (pointer-ref-c-int64 . td30f7) (pointer-ref-c-int32 . td30f6) (pointer-ref-c-int16 . td30f5) (pointer-ref-c-int8 . td30f4) (pointer-ref-c-uint64 . td30f3) (pointer-ref-c-uint32 . td30f2) (pointer-ref-c-uint16 . td30f1) (pointer-ref-c-uint8 . td30f0) (pointer-set-c-uint64! . td30ef) (pointer-set-c-uint32! . td30ee) (pointer-set-c-uint16! . td30ed) (pointer-set-c-uint8! . td30ec) (pointer-set-c-int64! . td30eb) (pointer-set-c-int32! . td30ea) (pointer-set-c-int16! . td30e9) (pointer-set-c-int8! . td30e8) (pointer-set-c-pointer! . td30e7) (pointer-set-c-double! . td30e6) (pointer-set-c-float! . td30e5) (pointer-set-c-long-long! . td30e4) (pointer-set-c-long! . td30e3) (pointer-set-c-int! . td30e2) (pointer-set-c-short! . td30e1) (pointer-set-c-char! . td30e0) (pointer-ref-c-pointer . td30df) (pointer-ref-c-double . td30de) (pointer-ref-c-float . td30dd) (pointer-ref-c-unsigned-long-long . td30dc) (pointer-ref-c-signed-long-long . td30db) (pointer-ref-c-unsigned-long . td30da) (pointer-ref-c-signed-long . td30d9) (pointer-ref-c-unsigned-int . td30d8) (pointer-ref-c-signed-int . td30d7) (pointer-ref-c-unsigned-short . td30d6) (pointer-ref-c-signed-short . td30d5) (pointer-ref-c-unsigned-char . td30d4) (pointer-ref-c-signed-char . td30d3) (pointer->integer . td30d2) (integer->pointer . td30d1) (pointer? . td30d0) (shared-errno . td30cf) (%ffi-supported? . td30cb) (%ffi-pointer->string . td30ca) (%ffi-call->string-or-zero . td30c9) (%ffi-call->double . td30c8) (%ffi-call->void* . td30c7) (%ffi-call->void . td30c6) (%ffi-call->char . td30c5) (%ffi-call->int . td30c4) (%ffi-lookup . td30c3) (%ffi-open . td30c2) (%fork . td30c1) (%pipe . td30c0) (p . td30bf) (whereis . td30a3) (register . td30a2) (vm-join! . td30a1) (vm-set-value! . td30a0) (vm? . td309f) (main-vm? . td309e) (vm-eval . td309d) (vm-self . td309c) (vm-start! . td309b) (make-vm . td309a) (mutex-try-lock! . td3099) (mutex-unlock! . td3098) (mutex-lock! . td3097) (mutex? . td3096) (make-mutex . td3095) (condition-variable-notify-all! . td3094) (condition-variable-notify! . td3093) (condition-variable-wait! . td3092) (make-condition-variable . td3091) (string-upcase . td3079) (string-titlecase . td3078) (string-normalize-nfkd . td3077) (string-normalize-nfkc . td3076) (string-normalize-nfd . td3075) (string-normalize-nfc . td3074) (string-foldcase . td3073) (string-downcase . td3072) (string-ci>? . td3071) (string-ci>=? . td3070) (string-ci=? . td306f) (string-ci<? . td306e) (string-ci<=? . td306d) (char-whitespace? . td306c) (char-upper-case? . td306b) (char-title-case? . td306a) (char-numeric? . td3069) (char-lower-case? . td3068) (char-general-category . td3067) (char-upcase . td3066) (char-titlecase . td3065) (char-foldcase . td3064) (char-downcase . td3063) (char-ci>? . td3062) (char-ci>=? . td3061) (char-ci=? . td3060) (char-ci<? . td305f) (char-ci<=? . td305e) (char-alphabetic? . td305d) (make-variable-transformer . tdba5) (identifier? . tde5c) (generate-temporaries . tde48) (free-identifier=? . tde4a) (syntax->datum . tde60) (datum->syntax . tde5e) (bound-identifier=? . tde4c) (record-type-descriptor? . td305c) (record-predicate . td305b) (record-mutator . td305a) (record-constructor . td3059) (record-accessor . td3058) (make-record-type-descriptor . td3057) (make-record-constructor-descriptor . td3056) (record? . td3055) (record-type-uid . td3054) (record-type-sealed? . td3053) (record-type-parent . td3052) (record-type-opaque? . td3051) (record-type-name . td3050) (record-type-generative? . td304f) (record-type-field-names . td304e) (record-rtd . td304d) (record-field-mutable? . td304c) (delete-file . td304b) (file-exists? . td304a) (vector-sort! . td3049) (vector-sort . td3048) (list-sort . td3047) (symbol-hash . td3046) (string-ci-hash . td3045) (string-hash . td3044) (equal-hash . td3043) (hashtable-equivalence-function . td3042) (make-hashtable . td3041) (hashtable-hash-function . td3040) (make-eqv-hashtable . td303f) (make-eq-hashtable . td303e) (hashtable? . td303d) (hashtable-update! . td303c) (hashtable-size . td303b) (hashtable-set! . td303a) (hashtable-ref . td3039) (hashtable-mutable? . td3038) (hashtable-keys . td3037) (hashtable-entries . td3036) (hashtable-delete! . td3035) (hashtable-copy . td3034) (hashtable-contains? . td3033) (hashtable-clear! . td3032) (call-with-output-file . td3031) (call-with-input-file . td3030) (write-char . td302f) (write . td302e) (with-output-to-file . td302d) (with-input-from-file . td302c) (read-char . td302b) (read . td302a) (peek-char . td3029) (open-output-file . td3028) (open-input-file . td3027) (newline . td3026) (display . td3025) (close-output-port . td3024) (close-input-port . td3023) (eof-object? . td3022) (eof-object . td3021) (current-error-port . td3020) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (utf-8-codec . td301b) (utf-16-codec . td301a) (transcoder-error-handling-mode . td3019) (transcoder-eol-style . td3018) (transcoder-codec . td3017) (transcoded-port . td3016) (textual-port? . td3015) (string->bytevector . td3014) (standard-output-port . td3013) (standard-input-port . td3012) (standard-error-port . td3011) (set-port-position! . td3010) (put-u8 . td300f) (put-string . td300e) (put-datum . td300d) (put-char . td300c) (put-bytevector . td300b) (port? . td300a) (port-transcoder . td3009) (port-position . td3008) (port-has-set-port-position!? . td3007) (port-has-port-position? . td3006) (port-eof? . td3005) (output-port-buffer-mode . td3004) (open-string-output-port . td3003) (open-string-input-port . td3002) (open-file-output-port . td3001) (open-file-input/output-port . td3000) (open-file-input-port . td2fff) (open-bytevector-output-port . td2ffe) (open-bytevector-input-port . td2ffd) (native-transcoder . td2ffc) (native-eol-style . td2ffb) (make-transcoder . td2ffa) (latin-1-codec . td2ff9) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (make-i/o-encoding-error . td2b55) (make-i/o-decoding-error . td2b3e) (make-custom-textual-output-port . td2ff8) (make-custom-textual-input/output-port . td2ff7) (make-custom-textual-input-port . td2ff6) (make-custom-binary-output-port . td2ff5) (make-custom-binary-input/output-port . td2ff4) (make-custom-binary-input-port . td2ff3) (make-bytevector . td2ff2) (lookahead-u8 . td2ff1) (lookahead-char . td2ff0) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (i/o-encoding-error? . td2b59) (i/o-encoding-error-char . td2b5b) (i/o-decoding-error? . td2b40) (get-u8 . td2fef) (get-string-n! . td2fee) (get-string-n . td2fed) (get-string-all . td2fec) (get-line . td2feb) (get-datum . td2fea) (get-char . td2fe9) (get-bytevector-some . td2fe8) (get-bytevector-n! . td2fe7) (get-bytevector-n . td2fe6) (get-bytevector-all . td2fe5) (flush-output-port . td2fe4) (close-port . td2fe3) (exit . td2fdb) (command-line . td2c94) (string-fill! . td2fda) (string-set! . td2fd9) (set-cdr! . td2fd8) (set-car! . td2fd7) (remove . td2fd6) (remv . td2fd5) (remp . td2fd4) (remq . td2fd3) (partition . td2fd2) (memv . td2fd1) (memq . td2fd0) (memp . td2fcf) (member . td2fce) (exists . td2fcd) (for-all . td2fcc) (fold-right . td2fcb) (fold-left . td2fca) (find . td2fc9) (filter . td2fc8) (cons* . td2fc7) (assv . td2fc6) (assq . td2fc5) (assp . td2fc4) (assoc . td2fc3) (call-with-string-output-port . td2fc2) (call-with-port . td2fc1) (call-with-bytevector-output-port . td2fc0) (bytevector->string . td2fbf) (buffer-mode? . td2fbe) (binary-port? . td2fbd) (with-exception-handler . td2fbc) (raise-continuable . td2fbb) (raise . td2fba) (eval . tde3a) (environment . tde32) (make-enumeration . td2fb9) (enum-set=? . td2fb8) (enum-set-universe . td2fb7) (enum-set-union . td2fb6) (enum-set-subset? . td2fb5) (enum-set-projection . td2fb4) (enum-set-member? . td2fb3) (enum-set-intersection . td2fb2) (enum-set-indexer . td2fb1) (enum-set-difference . td2fb0) (enum-set-constructor . td2faf) (enum-set-complement . td2fae) (enum-set->list . td2fad) (who-condition? . td29d0) (warning? . td2948) (violation? . td2987) (undefined-violation? . td2a47) (syntax-violation? . td2a2e) (syntax-violation-subform . td2a32) (syntax-violation-form . td2a30) (syntax-violation . tde5a) (simple-conditions . td2fac) (serious-condition? . td295d) (non-continuable-violation? . td29e7) (message-condition? . td2931) (make-who-condition . td29cc) (make-warning . td2946) (make-violation . td2985) (make-undefined-violation . td2a45) (make-syntax-violation . td2a28) (make-serious-condition . td295b) (make-non-continuable-violation . td29e5) (make-message-condition . td292d) (make-lexical-violation . td2a0f) (make-irritants-condition . td29b1) (make-implementation-restriction-violation . td29fa) (make-error . td2970) (make-assertion-violation . td299a) (lexical-violation? . td2a11) (irritants-condition? . td29b5) (implementation-restriction-violation? . td29fc) (error? . td2972) (condition-who . td29d2) (condition-predicate . td2fab) (condition-message . td2933) (condition-irritants . td29b7) (condition-accessor . td2faa) (condition . td2fa9) (assertion-violation? . td299c) (condition? . td2fa8) (utf32->string . td2fa7) (utf16->string . td2fa6) (utf8->string . td2fa5) (uint-list->bytevector . td2fa4) (u8-list->bytevector . td2fa3) (string->utf8 . td2fa2) (string->utf32 . td2fa1) (string->utf16 . td2fa0) (sint-list->bytevector . td2f9f) (native-endianness . td2f9e) (bytevector? . td2f9d) (bytevector=? . td2f9c) (bytevector-uint-set! . td2f9b) (bytevector-uint-ref . td2f9a) (bytevector-u8-set! . td2f99) (bytevector-u8-ref . td2f98) (bytevector-u64-set! . td2f97) (bytevector-u64-ref . td2f96) (bytevector-u64-native-set! . td2f95) (bytevector-u64-native-ref . td2f94) (bytevector-u32-set! . td2f93) (bytevector-u32-ref . td2f92) (bytevector-u32-native-set! . td2f91) (bytevector-u32-native-ref . td2f90) (bytevector-u16-set! . td2f8f) (bytevector-u16-ref . td2f8e) (bytevector-u16-native-set! . td2f8d) (bytevector-u16-native-ref . td2f8c) (bytevector-sint-set! . td2f8b) (bytevector-sint-ref . td2f8a) (bytevector-s8-set! . td2f89) (bytevector-s8-ref . td2f88) (bytevector-s64-set! . td2f87) (bytevector-s64-ref . td2f86) (bytevector-s64-native-set! . td2f85) (bytevector-s64-native-ref . td2f84) (bytevector-s32-set! . td2f83) (bytevector-s32-ref . td2f82) (bytevector-s32-native-set! . td2f81) (bytevector-s32-native-ref . td2f80) (bytevector-s16-set! . td2f7f) (bytevector-s16-ref . td2f7e) (bytevector-s16-native-set! . td2f7d) (bytevector-s16-native-ref . td2f7c) (bytevector-length . td2f7b) (bytevector-ieee-single-ref . td2f7a) (bytevector-ieee-single-set! . td2f79) (bytevector-ieee-single-native-set! . td2f78) (bytevector-ieee-single-native-ref . td2f77) (bytevector-ieee-double-set! . td2f76) (bytevector-ieee-double-ref . td2f75) (bytevector-ieee-double-native-set! . td2f74) (bytevector-ieee-double-native-ref . td2f73) (bytevector-fill! . td2f72) (bytevector-copy! . td2f71) (bytevector-copy . td2f70) (bytevector->uint-list . td2f6f) (bytevector->u8-list . td2f6e) (bytevector->sint-list . td2f6d) (no-nans-violation? . td2b85) (no-infinities-violation? . td2b70) (make-no-nans-violation . td2b83) (make-no-infinities-violation . td2b6e) (real->flonum . td2f6c) (flzero? . td2f6b) (fltruncate . td2f6a) (fltan . td2f69) (flsqrt . td2f68) (flsin . td2f67) (flround . td2f66) (flpositive? . td2f65) (flonum? . td2f64) (flodd? . td2f63) (flnumerator . td2f62) (flnegative? . td2f61) (flnan? . td2f60) (flmod0 . td2f5f) (flmod . td2f5e) (flmin . td2f5d) (flmax . td2f5c) (fllog . td2f5b) (flinteger? . td2f5a) (flinfinite? . td2f59) (flfloor . td2f58) (flfinite? . td2f57) (flexpt . td2f56) (flexp . td2f55) (fleven? . td2f54) (fldiv0-and-mod0 . td2f53) (fldiv0 . td2f52) (fldiv-and-mod . td2f51) (fldiv . td2f50) (fldenominator . td2f4f) (flcos . td2f4e) (flceiling . td2f4d) (flatan . td2f4c) (flasin . td2f4b) (flacos . td2f4a) (flabs . td2f49) (fl>? . td2f48) (fl>=? . td2f47) (fl=? . td2f46) (fl<? . td2f45) (fl<=? . td2f44) (fl/ . td2f43) (fl- . td2f42) (fl+ . td2f41) (fl* . td2f40) (fixnum->flonum . td2f3f) (fxzero? . td2f3e) (fxxor . td2f3d) (fxrotate-bit-field . td2f3c) (fxreverse-bit-field . td2f3b) (fxpositive? . td2f3a) (fxodd? . td2f39) (fxnot . td2f38) (fxnegative? . td2f37) (fxmod0 . td2f36) (fxmod . td2f35) (fxmin . td2f34) (fxmax . td2f33) (fxlength . td2f32) (fxior . td2f31) (fxif . td2f30) (fxfirst-bit-set . td2f2f) (fxeven? . td2f2e) (fxdiv0-and-mod0 . td2f2d) (fxdiv0 . td2f2c) (fxdiv-and-mod . td2f2b) (fxdiv . td2f2a) (fxcopy-bit-field . td2f29) (fxcopy-bit . td2f28) (fxbit-set? . td2f27) (fxbit-field . td2f26) (fxbit-count . td2f25) (fxarithmetic-shift-right . td2f24) (fxarithmetic-shift-left . td2f23) (fxarithmetic-shift . td2f22) (fxand . td2f21) (fx>? . td2f20) (fx>=? . td2f1f) (fx=? . td2f1e) (fx<? . td2f1d) (fx<=? . td2f1c) (fx-/carry . td2f1b) (fx- . td2f1a) (fx+/carry . td2f19) (fx+ . td2f18) (fx*/carry . td2f17) (fx* . td2f16) (greatest-fixnum . td2f15) (least-fixnum . td2f14) (fixnum-width . td2f13) (fixnum? . td2f12) (bitwise-rotate-bit-field . td2f11) (bitwise-reverse-bit-field . td2f10) (bitwise-length . td2f0f) (bitwise-if . td2f0e) (bitwise-first-bit-set . td2f0d) (bitwise-copy-bit-field . td2f0c) (bitwise-copy-bit . td2f0b) (bitwise-bit-set? . td2f0a) (bitwise-bit-field . td2f09) (bitwise-bit-count . td2f08) (bitwise-xor . td2f07) (bitwise-ior . td2f06) (bitwise-and . td2f05) (bitwise-not . td2f04) (bitwise-arithmetic-shift-right . td2f03) (bitwise-arithmetic-shift-left . td2f02) (bitwise-arithmetic-shift . td2f01) (zero? . td2f00) (vector? . td2eff) (vector-set! . td2efe) (vector-ref . td2efd) (vector-map . td2efc) (vector-length . td2efb) (vector-for-each . td2efa) (vector-fill! . td2ef9) (vector->list . td2ef8) (vector . td2ef7) (values . td2ef6) (truncate . td2ef5) (tan . td2ef4) (symbol? . td2ef3) (symbol=? . td2ef2) (symbol->string . td2ef1) (substring . td2ef0) (string? . td2eef) (string>? . td2eee) (string>=? . td2eed) (string=? . td2eec) (string<? . td2eeb) (string<=? . td2eea) (string-ref . td2ee9) (string-length . td2ee8) (string-for-each . td2ee7) (string-copy . td2ee6) (string-append . td2ee5) (string->symbol . td2ee4) (string->number . td2ee3) (string->list . td2ee2) (string . td2ee1) (sqrt . td2ee0) (sin . td2edf) (round . td2ede) (reverse . td2edd) (real? . td2edc) (real-valued? . td2edb) (real-part . td2eda) (rationalize . td2ed9) (rational? . td2ed8) (rational-valued? . td2ed7) (procedure? . td2ed6) (positive? . td2ed5) (pair? . td2ed4) (odd? . td2ed3) (numerator . td2ed2) (number? . td2ed1) (number->string . td2ed0) (null? . td2ecf) (not . td2ece) (negative? . td2ecd) (nan? . td2ecc) (min . td2ecb) (max . td2eca) (map . td2ec9) (make-vector . td2ec8) (make-string . td2ec7) (make-rectangular . td2ec6) (make-polar . td2ec5) (magnitude . td2ec4) (log . td2ec3) (list? . td2ec2) (list-tail . td2ec1) (list-ref . td2ec0) (list->vector . td2ebf) (list->string . td2ebe) (list . td2ebd) (length . td2ebc) (lcm . td2ebb) (integer? . td2eba) (integer-valued? . td2eb9) (integer->char . td2eb8) (infinite? . td2eb7) (inexact? . td2eb6) (inexact . td2eb5) (imag-part . td2eb4) (gcd . td2eb3) (for-each . td2eb2) (floor . td2eb1) (finite? . td2eb0) (expt . td2eaf) (exp . td2eae) (exact? . td2ead) (exact-integer-sqrt . td2eac) (exact . td2eab) (even? . td2eaa) (error . td2ea9) (eqv? . td2ea8) (equal? . td2ea7) (eq? . td2ea6) (dynamic-wind . td2ea5) (div0-and-mod0 . td2ea4) (mod0 . td2ea3) (div0 . td2ea2) (div-and-mod . td2ea1) (mod . td2ea0) (div . td2e9f) (denominator . td2e9e) (cos . td2e9d) (cons . td2e9c) (complex? . td2e9b) (char? . td2e9a) (char>? . td2e99) (char>=? . td2e98) (char=? . td2e97) (char<? . td2e96) (char<=? . td2e95) (char->integer . td2e94) (ceiling . td2e93) (call-with-values . td2e92) (call/cc . td2e91) (call-with-current-continuation . td2e90) (cddddr . td2e8f) (cdddar . td2e8e) (cddadr . td2e8d) (cddaar . td2e8c) (cdaddr . td2e8b) (cdadar . td2e8a) (cdaadr . td2e89) (cdaaar . td2e88) (cadddr . td2e87) (caddar . td2e86) (cadadr . td2e85) (cadaar . td2e84) (caaddr . td2e83) (caadar . td2e82) (caaadr . td2e81) (caaaar . td2e80) (cdddr . td2e7f) (cddar . td2e7e) (cdadr . td2e7d) (cdaar . td2e7c) (caddr . td2e7b) (cadar . td2e7a) (caadr . td2e79) (caaar . td2e78) (cddr . td2e77) (cdar . td2e76) (cadr . td2e75) (caar . td2e74) (cdr . td2e73) (car . td2e72) (boolean? . td2e71) (boolean=? . td2e70) (atan . td2e6f) (assertion-violation . td2e6e) (asin . td2e6d) (apply . td2e6c) (append . td2e6b) (angle . td2e6a) (acos . td2e69) (abs . td2e68) (/ . td2e67) (* . td2e66) (- . td2e65) (+ . td2e64) (>= . td2e63) (> . td2e62) (= . td2e61) (<= . td2e60) (< . td2e5f) (library . td2e5e) (&no-nans . td2e5d) (&no-infinities . td2e5c) (&i/o-encoding . td2e5b) (&i/o-decoding . td2e5a) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50) (&undefined . td2e4f) (&syntax . td2e4e) (&lexical . td2e4d) (&implementation-restriction . td2e4c) (&non-continuable . td2e4b) (&who . td2e4a) (&irritants . td2e49) (&assertion . td2e48) (&violation . td2e47) (&error . td2e46) (&serious . td2e45) (&warning . td2e44) (&message . td2e43) (&condition . td2e42) (define-condition-type . td2e41) (define-enumeration . td2e40) (define-record-type . td2e3f) (parent-rtd . td2e3e) (nongenerative . td2e3d) (opaque . td2e3c) (sealed . td2e3b) (protocol . td2e3a) (parent . td2e39) (immutable . td2e38) (mutable . td2e37) (fields . td2e36) (error-handling-mode . td2e35) (file-options . td2e34) (buffer-mode . td2e33) (eol-style . td2e32) (guard . td2e31) (unsyntax-splicing . td2e2e) (unsyntax . td2e2d) (unquote-splicing . td2e2c) (unquote . td2e2b) (_ . td2e2a) (else . td2e29) (=> . td2e28) (... . td2e27) (assert . td2e26) (endianness . td2e25) (time . td2e23) (do . td2e22) (cond . td2e21) (let* . td2e20) (let*-values . td2e1f) (let-values . td2e1e) (identifier-syntax . td2e1d) (with-syntax . td2e1c) (quasisyntax . td2e1b) (quasiquote . td2e1a) (syntax-rules . td2e19) (include . td2e18) (record-constructor-descriptor . td2e16) (record-type-descriptor . td2e15) (case . td2e14) (unless . td2e12) (when . td2e11) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec* . td2e0c) (letrec . td2e0b) (case-lambda . td2e09) (lambda . td2e08) (syntax . td2e07) (syntax-case . td2e06) (quote . td2e05) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (import . td2e00) (begin . td2dff) (define-syntax . td2dfd) (define . td2dfc)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3126 '(psyntax null-environment-5) '() '() '() '() '((make-promise . td2fdc) (unquote-splicing . td2e2c) (unquote . td2e2b) (_ . td2e2a) (else . td2e29) (=> . td2e28) (... . td2e27) (delay . td2e24) (do . td2e22) (cond . td2e21) (let* . td2e20) (quasiquote . td2e1a) (syntax-rules . td2e19) (case . td2e14) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec . td2e0b) (lambda . td2e08) (quote . td2e05) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (begin . td2dff) (define-syntax . td2dfd) (define . td2dfc)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3127 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . td3071) (string-ci>=? . td3070) (string-ci=? . td306f) (string-ci<? . td306e) (string-ci<=? . td306d) (char-whitespace? . td306c) (char-upper-case? . td306b) (char-numeric? . td3069) (char-lower-case? . td3068) (char-upcase . td3066) (char-downcase . td3063) (char-ci>? . td3062) (char-ci>=? . td3061) (char-ci=? . td3060) (char-ci<? . td305f) (char-ci<=? . td305e) (char-alphabetic? . td305d) (call-with-output-file . td3031) (call-with-input-file . td3030) (write-char . td302f) (write . td302e) (with-output-to-file . td302d) (with-input-from-file . td302c) (read-char . td302b) (read . td302a) (peek-char . td3029) (open-output-file . td3028) (open-input-file . td3027) (newline . td3026) (display . td3025) (close-output-port . td3024) (close-input-port . td3023) (eof-object . td3021) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (scheme-report-environment . tde36) (quotient . td2fe2) (null-environment . tde34) (remainder . td2fe1) (modulo . td2fe0) (inexact->exact . td2fdf) (force . td2fde) (exact->inexact . td2fdd) (make-promise . td2fdc) (string-fill! . td2fda) (string-set! . td2fd9) (set-cdr! . td2fd8) (set-car! . td2fd7) (memv . td2fd1) (memq . td2fd0) (member . td2fce) (assv . td2fc6) (assq . td2fc5) (assoc . td2fc3) (eval . tde3a) (zero? . td2f00) (vector? . td2eff) (vector-set! . td2efe) (vector-ref . td2efd) (vector-length . td2efb) (vector-fill! . td2ef9) (vector->list . td2ef8) (vector . td2ef7) (values . td2ef6) (truncate . td2ef5) (tan . td2ef4) (symbol? . td2ef3) (symbol->string . td2ef1) (substring . td2ef0) (string? . td2eef) (string>? . td2eee) (string>=? . td2eed) (string=? . td2eec) (string<? . td2eeb) (string<=? . td2eea) (string-ref . td2ee9) (string-length . td2ee8) (string-copy . td2ee6) (string-append . td2ee5) (string->symbol . td2ee4) (string->number . td2ee3) (string->list . td2ee2) (string . td2ee1) (sqrt . td2ee0) (sin . td2edf) (round . td2ede) (reverse . td2edd) (real? . td2edc) (real-part . td2eda) (rationalize . td2ed9) (rational? . td2ed8) (procedure? . td2ed6) (positive? . td2ed5) (pair? . td2ed4) (odd? . td2ed3) (numerator . td2ed2) (number? . td2ed1) (number->string . td2ed0) (not . td2ece) (negative? . td2ecd) (min . td2ecb) (max . td2eca) (map . td2ec9) (make-vector . td2ec8) (make-string . td2ec7) (make-rectangular . td2ec6) (make-polar . td2ec5) (magnitude . td2ec4) (log . td2ec3) (list? . td2ec2) (list-tail . td2ec1) (list-ref . td2ec0) (list->vector . td2ebf) (list->string . td2ebe) (list . td2ebd) (length . td2ebc) (lcm . td2ebb) (integer? . td2eba) (integer->char . td2eb8) (inexact? . td2eb6) (imag-part . td2eb4) (gcd . td2eb3) (for-each . td2eb2) (floor . td2eb1) (expt . td2eaf) (exp . td2eae) (exact? . td2ead) (even? . td2eaa) (eqv? . td2ea8) (equal? . td2ea7) (eq? . td2ea6) (dynamic-wind . td2ea5) (denominator . td2e9e) (cos . td2e9d) (cons . td2e9c) (complex? . td2e9b) (char? . td2e9a) (char>? . td2e99) (char>=? . td2e98) (char=? . td2e97) (char<? . td2e96) (char<=? . td2e95) (char->integer . td2e94) (ceiling . td2e93) (call-with-values . td2e92) (call-with-current-continuation . td2e90) (cddddr . td2e8f) (cdddar . td2e8e) (cddadr . td2e8d) (cddaar . td2e8c) (cdaddr . td2e8b) (cdadar . td2e8a) (cdaadr . td2e89) (cdaaar . td2e88) (cadddr . td2e87) (caddar . td2e86) (cadadr . td2e85) (cadaar . td2e84) (caaddr . td2e83) (caadar . td2e82) (caaadr . td2e81) (caaaar . td2e80) (cdddr . td2e7f) (cddar . td2e7e) (cdadr . td2e7d) (cdaar . td2e7c) (caddr . td2e7b) (cadar . td2e7a) (caadr . td2e79) (caaar . td2e78) (cddr . td2e77) (cdar . td2e76) (cadr . td2e75) (caar . td2e74) (cdr . td2e73) (car . td2e72) (boolean? . td2e71) (atan . td2e6f) (asin . td2e6d) (apply . td2e6c) (append . td2e6b) (angle . td2e6a) (acos . td2e69) (abs . td2e68) (/ . td2e67) (* . td2e66) (- . td2e65) (+ . td2e64) (>= . td2e63) (> . td2e62) (= . td2e61) (<= . td2e60) (< . td2e5f) (unquote-splicing . td2e2c) (unquote . td2e2b) (else . td2e29) (=> . td2e28) (... . td2e27) (delay . td2e24) (do . td2e22) (cond . td2e21) (let* . td2e20) (quasiquote . td2e1a) (syntax-rules . td2e19) (case . td2e14) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec . td2e0b) (lambda . td2e08) (quote . td2e05) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (begin . td2dff) (define-syntax . td2dfd) (define . td2dfc)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3128 '(psyntax modules) '() '() '() '() '((module . td2dfe)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3129 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312a '(rnrs) '(6) '() '() '() '((regexp? . td311d) (string-upcase . td3079) (string-titlecase . td3078) (string-normalize-nfkd . td3077) (string-normalize-nfkc . td3076) (string-normalize-nfd . td3075) (string-normalize-nfc . td3074) (string-foldcase . td3073) (string-downcase . td3072) (string-ci>? . td3071) (string-ci>=? . td3070) (string-ci=? . td306f) (string-ci<? . td306e) (string-ci<=? . td306d) (char-whitespace? . td306c) (char-upper-case? . td306b) (char-title-case? . td306a) (char-numeric? . td3069) (char-lower-case? . td3068) (char-general-category . td3067) (char-upcase . td3066) (char-titlecase . td3065) (char-foldcase . td3064) (char-downcase . td3063) (char-ci>? . td3062) (char-ci>=? . td3061) (char-ci=? . td3060) (char-ci<? . td305f) (char-ci<=? . td305e) (char-alphabetic? . td305d) (make-variable-transformer . tdba5) (identifier? . tde5c) (generate-temporaries . tde48) (free-identifier=? . tde4a) (syntax->datum . tde60) (datum->syntax . tde5e) (bound-identifier=? . tde4c) (record-type-descriptor? . td305c) (record-predicate . td305b) (record-mutator . td305a) (record-constructor . td3059) (record-accessor . td3058) (make-record-type-descriptor . td3057) (make-record-constructor-descriptor . td3056) (record? . td3055) (record-type-uid . td3054) (record-type-sealed? . td3053) (record-type-parent . td3052) (record-type-opaque? . td3051) (record-type-name . td3050) (record-type-generative? . td304f) (record-type-field-names . td304e) (record-rtd . td304d) (record-field-mutable? . td304c) (delete-file . td304b) (file-exists? . td304a) (vector-sort! . td3049) (vector-sort . td3048) (list-sort . td3047) (symbol-hash . td3046) (string-ci-hash . td3045) (string-hash . td3044) (equal-hash . td3043) (hashtable-equivalence-function . td3042) (make-hashtable . td3041) (hashtable-hash-function . td3040) (make-eqv-hashtable . td303f) (make-eq-hashtable . td303e) (hashtable? . td303d) (hashtable-update! . td303c) (hashtable-size . td303b) (hashtable-set! . td303a) (hashtable-ref . td3039) (hashtable-mutable? . td3038) (hashtable-keys . td3037) (hashtable-entries . td3036) (hashtable-delete! . td3035) (hashtable-copy . td3034) (hashtable-contains? . td3033) (hashtable-clear! . td3032) (call-with-output-file . td3031) (call-with-input-file . td3030) (write-char . td302f) (write . td302e) (with-output-to-file . td302d) (with-input-from-file . td302c) (read-char . td302b) (read . td302a) (peek-char . td3029) (open-output-file . td3028) (open-input-file . td3027) (newline . td3026) (display . td3025) (close-output-port . td3024) (close-input-port . td3023) (eof-object? . td3022) (eof-object . td3021) (current-error-port . td3020) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (utf-8-codec . td301b) (utf-16-codec . td301a) (transcoder-error-handling-mode . td3019) (transcoder-eol-style . td3018) (transcoder-codec . td3017) (transcoded-port . td3016) (textual-port? . td3015) (string->bytevector . td3014) (standard-output-port . td3013) (standard-input-port . td3012) (standard-error-port . td3011) (set-port-position! . td3010) (put-u8 . td300f) (put-string . td300e) (put-datum . td300d) (put-char . td300c) (put-bytevector . td300b) (port? . td300a) (port-transcoder . td3009) (port-position . td3008) (port-has-set-port-position!? . td3007) (port-has-port-position? . td3006) (port-eof? . td3005) (output-port-buffer-mode . td3004) (open-string-output-port . td3003) (open-string-input-port . td3002) (open-file-output-port . td3001) (open-file-input/output-port . td3000) (open-file-input-port . td2fff) (open-bytevector-output-port . td2ffe) (open-bytevector-input-port . td2ffd) (native-transcoder . td2ffc) (native-eol-style . td2ffb) (make-transcoder . td2ffa) (latin-1-codec . td2ff9) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (make-i/o-encoding-error . td2b55) (make-i/o-decoding-error . td2b3e) (make-custom-textual-output-port . td2ff8) (make-custom-textual-input/output-port . td2ff7) (make-custom-textual-input-port . td2ff6) (make-custom-binary-output-port . td2ff5) (make-custom-binary-input/output-port . td2ff4) (make-custom-binary-input-port . td2ff3) (make-bytevector . td2ff2) (lookahead-u8 . td2ff1) (lookahead-char . td2ff0) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (i/o-encoding-error? . td2b59) (i/o-encoding-error-char . td2b5b) (i/o-decoding-error? . td2b40) (get-u8 . td2fef) (get-string-n! . td2fee) (get-string-n . td2fed) (get-string-all . td2fec) (get-line . td2feb) (get-datum . td2fea) (get-char . td2fe9) (get-bytevector-some . td2fe8) (get-bytevector-n! . td2fe7) (get-bytevector-n . td2fe6) (get-bytevector-all . td2fe5) (flush-output-port . td2fe4) (close-port . td2fe3) (exit . td2fdb) (command-line . td2c94) (remove . td2fd6) (remv . td2fd5) (remp . td2fd4) (remq . td2fd3) (partition . td2fd2) (memv . td2fd1) (memq . td2fd0) (memp . td2fcf) (member . td2fce) (exists . td2fcd) (for-all . td2fcc) (fold-right . td2fcb) (fold-left . td2fca) (find . td2fc9) (filter . td2fc8) (cons* . td2fc7) (assv . td2fc6) (assq . td2fc5) (assp . td2fc4) (assoc . td2fc3) (call-with-string-output-port . td2fc2) (call-with-port . td2fc1) (call-with-bytevector-output-port . td2fc0) (bytevector->string . td2fbf) (buffer-mode? . td2fbe) (binary-port? . td2fbd) (with-exception-handler . td2fbc) (raise-continuable . td2fbb) (raise . td2fba) (make-enumeration . td2fb9) (enum-set=? . td2fb8) (enum-set-universe . td2fb7) (enum-set-union . td2fb6) (enum-set-subset? . td2fb5) (enum-set-projection . td2fb4) (enum-set-member? . td2fb3) (enum-set-intersection . td2fb2) (enum-set-indexer . td2fb1) (enum-set-difference . td2fb0) (enum-set-constructor . td2faf) (enum-set-complement . td2fae) (enum-set->list . td2fad) (who-condition? . td29d0) (warning? . td2948) (violation? . td2987) (undefined-violation? . td2a47) (syntax-violation? . td2a2e) (syntax-violation-subform . td2a32) (syntax-violation-form . td2a30) (syntax-violation . tde5a) (simple-conditions . td2fac) (serious-condition? . td295d) (non-continuable-violation? . td29e7) (message-condition? . td2931) (make-who-condition . td29cc) (make-warning . td2946) (make-violation . td2985) (make-undefined-violation . td2a45) (make-syntax-violation . td2a28) (make-serious-condition . td295b) (make-non-continuable-violation . td29e5) (make-message-condition . td292d) (make-lexical-violation . td2a0f) (make-irritants-condition . td29b1) (make-implementation-restriction-violation . td29fa) (make-error . td2970) (make-assertion-violation . td299a) (lexical-violation? . td2a11) (irritants-condition? . td29b5) (implementation-restriction-violation? . td29fc) (error? . td2972) (condition-who . td29d2) (condition-predicate . td2fab) (condition-message . td2933) (condition-irritants . td29b7) (condition-accessor . td2faa) (condition . td2fa9) (assertion-violation? . td299c) (condition? . td2fa8) (utf32->string . td2fa7) (utf16->string . td2fa6) (utf8->string . td2fa5) (uint-list->bytevector . td2fa4) (u8-list->bytevector . td2fa3) (string->utf8 . td2fa2) (string->utf32 . td2fa1) (string->utf16 . td2fa0) (sint-list->bytevector . td2f9f) (native-endianness . td2f9e) (bytevector? . td2f9d) (bytevector=? . td2f9c) (bytevector-uint-set! . td2f9b) (bytevector-uint-ref . td2f9a) (bytevector-u8-set! . td2f99) (bytevector-u8-ref . td2f98) (bytevector-u64-set! . td2f97) (bytevector-u64-ref . td2f96) (bytevector-u64-native-set! . td2f95) (bytevector-u64-native-ref . td2f94) (bytevector-u32-set! . td2f93) (bytevector-u32-ref . td2f92) (bytevector-u32-native-set! . td2f91) (bytevector-u32-native-ref . td2f90) (bytevector-u16-set! . td2f8f) (bytevector-u16-ref . td2f8e) (bytevector-u16-native-set! . td2f8d) (bytevector-u16-native-ref . td2f8c) (bytevector-sint-set! . td2f8b) (bytevector-sint-ref . td2f8a) (bytevector-s8-set! . td2f89) (bytevector-s8-ref . td2f88) (bytevector-s64-set! . td2f87) (bytevector-s64-ref . td2f86) (bytevector-s64-native-set! . td2f85) (bytevector-s64-native-ref . td2f84) (bytevector-s32-set! . td2f83) (bytevector-s32-ref . td2f82) (bytevector-s32-native-set! . td2f81) (bytevector-s32-native-ref . td2f80) (bytevector-s16-set! . td2f7f) (bytevector-s16-ref . td2f7e) (bytevector-s16-native-set! . td2f7d) (bytevector-s16-native-ref . td2f7c) (bytevector-length . td2f7b) (bytevector-ieee-single-ref . td2f7a) (bytevector-ieee-single-set! . td2f79) (bytevector-ieee-single-native-set! . td2f78) (bytevector-ieee-single-native-ref . td2f77) (bytevector-ieee-double-set! . td2f76) (bytevector-ieee-double-ref . td2f75) (bytevector-ieee-double-native-set! . td2f74) (bytevector-ieee-double-native-ref . td2f73) (bytevector-fill! . td2f72) (bytevector-copy! . td2f71) (bytevector-copy . td2f70) (bytevector->uint-list . td2f6f) (bytevector->u8-list . td2f6e) (bytevector->sint-list . td2f6d) (no-nans-violation? . td2b85) (no-infinities-violation? . td2b70) (make-no-nans-violation . td2b83) (make-no-infinities-violation . td2b6e) (real->flonum . td2f6c) (flzero? . td2f6b) (fltruncate . td2f6a) (fltan . td2f69) (flsqrt . td2f68) (flsin . td2f67) (flround . td2f66) (flpositive? . td2f65) (flonum? . td2f64) (flodd? . td2f63) (flnumerator . td2f62) (flnegative? . td2f61) (flnan? . td2f60) (flmod0 . td2f5f) (flmod . td2f5e) (flmin . td2f5d) (flmax . td2f5c) (fllog . td2f5b) (flinteger? . td2f5a) (flinfinite? . td2f59) (flfloor . td2f58) (flfinite? . td2f57) (flexpt . td2f56) (flexp . td2f55) (fleven? . td2f54) (fldiv0-and-mod0 . td2f53) (fldiv0 . td2f52) (fldiv-and-mod . td2f51) (fldiv . td2f50) (fldenominator . td2f4f) (flcos . td2f4e) (flceiling . td2f4d) (flatan . td2f4c) (flasin . td2f4b) (flacos . td2f4a) (flabs . td2f49) (fl>? . td2f48) (fl>=? . td2f47) (fl=? . td2f46) (fl<? . td2f45) (fl<=? . td2f44) (fl/ . td2f43) (fl- . td2f42) (fl+ . td2f41) (fl* . td2f40) (fixnum->flonum . td2f3f) (fxzero? . td2f3e) (fxxor . td2f3d) (fxrotate-bit-field . td2f3c) (fxreverse-bit-field . td2f3b) (fxpositive? . td2f3a) (fxodd? . td2f39) (fxnot . td2f38) (fxnegative? . td2f37) (fxmod0 . td2f36) (fxmod . td2f35) (fxmin . td2f34) (fxmax . td2f33) (fxlength . td2f32) (fxior . td2f31) (fxif . td2f30) (fxfirst-bit-set . td2f2f) (fxeven? . td2f2e) (fxdiv0-and-mod0 . td2f2d) (fxdiv0 . td2f2c) (fxdiv-and-mod . td2f2b) (fxdiv . td2f2a) (fxcopy-bit-field . td2f29) (fxcopy-bit . td2f28) (fxbit-set? . td2f27) (fxbit-field . td2f26) (fxbit-count . td2f25) (fxarithmetic-shift-right . td2f24) (fxarithmetic-shift-left . td2f23) (fxarithmetic-shift . td2f22) (fxand . td2f21) (fx>? . td2f20) (fx>=? . td2f1f) (fx=? . td2f1e) (fx<? . td2f1d) (fx<=? . td2f1c) (fx-/carry . td2f1b) (fx- . td2f1a) (fx+/carry . td2f19) (fx+ . td2f18) (fx*/carry . td2f17) (fx* . td2f16) (greatest-fixnum . td2f15) (least-fixnum . td2f14) (fixnum-width . td2f13) (fixnum? . td2f12) (bitwise-rotate-bit-field . td2f11) (bitwise-reverse-bit-field . td2f10) (bitwise-length . td2f0f) (bitwise-if . td2f0e) (bitwise-first-bit-set . td2f0d) (bitwise-copy-bit-field . td2f0c) (bitwise-copy-bit . td2f0b) (bitwise-bit-set? . td2f0a) (bitwise-bit-field . td2f09) (bitwise-bit-count . td2f08) (bitwise-xor . td2f07) (bitwise-ior . td2f06) (bitwise-and . td2f05) (bitwise-not . td2f04) (bitwise-arithmetic-shift-right . td2f03) (bitwise-arithmetic-shift-left . td2f02) (bitwise-arithmetic-shift . td2f01) (zero? . td2f00) (vector? . td2eff) (vector-set! . td2efe) (vector-ref . td2efd) (vector-map . td2efc) (vector-length . td2efb) (vector-for-each . td2efa) (vector-fill! . td2ef9) (vector->list . td2ef8) (vector . td2ef7) (values . td2ef6) (truncate . td2ef5) (tan . td2ef4) (symbol? . td2ef3) (symbol=? . td2ef2) (symbol->string . td2ef1) (substring . td2ef0) (string? . td2eef) (string>? . td2eee) (string>=? . td2eed) (string=? . td2eec) (string<? . td2eeb) (string<=? . td2eea) (string-ref . td2ee9) (string-length . td2ee8) (string-for-each . td2ee7) (string-copy . td2ee6) (string-append . td2ee5) (string->symbol . td2ee4) (string->number . td2ee3) (string->list . td2ee2) (string . td2ee1) (sqrt . td2ee0) (sin . td2edf) (round . td2ede) (reverse . td2edd) (real? . td2edc) (real-valued? . td2edb) (real-part . td2eda) (rationalize . td2ed9) (rational? . td2ed8) (rational-valued? . td2ed7) (procedure? . td2ed6) (positive? . td2ed5) (pair? . td2ed4) (odd? . td2ed3) (numerator . td2ed2) (number? . td2ed1) (number->string . td2ed0) (null? . td2ecf) (not . td2ece) (negative? . td2ecd) (nan? . td2ecc) (min . td2ecb) (max . td2eca) (map . td2ec9) (make-vector . td2ec8) (make-string . td2ec7) (make-rectangular . td2ec6) (make-polar . td2ec5) (magnitude . td2ec4) (log . td2ec3) (list? . td2ec2) (list-tail . td2ec1) (list-ref . td2ec0) (list->vector . td2ebf) (list->string . td2ebe) (list . td2ebd) (length . td2ebc) (lcm . td2ebb) (integer? . td2eba) (integer-valued? . td2eb9) (integer->char . td2eb8) (infinite? . td2eb7) (inexact? . td2eb6) (inexact . td2eb5) (imag-part . td2eb4) (gcd . td2eb3) (for-each . td2eb2) (floor . td2eb1) (finite? . td2eb0) (expt . td2eaf) (exp . td2eae) (exact? . td2ead) (exact-integer-sqrt . td2eac) (exact . td2eab) (even? . td2eaa) (error . td2ea9) (eqv? . td2ea8) (equal? . td2ea7) (eq? . td2ea6) (dynamic-wind . td2ea5) (div0-and-mod0 . td2ea4) (mod0 . td2ea3) (div0 . td2ea2) (div-and-mod . td2ea1) (mod . td2ea0) (div . td2e9f) (denominator . td2e9e) (cos . td2e9d) (cons . td2e9c) (complex? . td2e9b) (char? . td2e9a) (char>? . td2e99) (char>=? . td2e98) (char=? . td2e97) (char<? . td2e96) (char<=? . td2e95) (char->integer . td2e94) (ceiling . td2e93) (call-with-values . td2e92) (call/cc . td2e91) (call-with-current-continuation . td2e90) (cddddr . td2e8f) (cdddar . td2e8e) (cddadr . td2e8d) (cddaar . td2e8c) (cdaddr . td2e8b) (cdadar . td2e8a) (cdaadr . td2e89) (cdaaar . td2e88) (cadddr . td2e87) (caddar . td2e86) (cadadr . td2e85) (cadaar . td2e84) (caaddr . td2e83) (caadar . td2e82) (caaadr . td2e81) (caaaar . td2e80) (cdddr . td2e7f) (cddar . td2e7e) (cdadr . td2e7d) (cdaar . td2e7c) (caddr . td2e7b) (cadar . td2e7a) (caadr . td2e79) (caaar . td2e78) (cddr . td2e77) (cdar . td2e76) (cadr . td2e75) (caar . td2e74) (cdr . td2e73) (car . td2e72) (boolean? . td2e71) (boolean=? . td2e70) (atan . td2e6f) (assertion-violation . td2e6e) (asin . td2e6d) (apply . td2e6c) (append . td2e6b) (angle . td2e6a) (acos . td2e69) (abs . td2e68) (/ . td2e67) (* . td2e66) (- . td2e65) (+ . td2e64) (>= . td2e63) (> . td2e62) (= . td2e61) (<= . td2e60) (< . td2e5f) (&no-nans . td2e5d) (&no-infinities . td2e5c) (&i/o-encoding . td2e5b) (&i/o-decoding . td2e5a) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50) (&undefined . td2e4f) (&syntax . td2e4e) (&lexical . td2e4d) (&implementation-restriction . td2e4c) (&non-continuable . td2e4b) (&who . td2e4a) (&irritants . td2e49) (&assertion . td2e48) (&violation . td2e47) (&error . td2e46) (&serious . td2e45) (&warning . td2e44) (&message . td2e43) (&condition . td2e42) (define-condition-type . td2e41) (define-enumeration . td2e40) (define-record-type . td2e3f) (parent-rtd . td2e3e) (nongenerative . td2e3d) (opaque . td2e3c) (sealed . td2e3b) (protocol . td2e3a) (parent . td2e39) (immutable . td2e38) (mutable . td2e37) (fields . td2e36) (error-handling-mode . td2e35) (file-options . td2e34) (buffer-mode . td2e33) (eol-style . td2e32) (guard . td2e31) (unsyntax-splicing . td2e2e) (unsyntax . td2e2d) (unquote-splicing . td2e2c) (unquote . td2e2b) (_ . td2e2a) (else . td2e29) (=> . td2e28) (... . td2e27) (assert . td2e26) (endianness . td2e25) (do . td2e22) (cond . td2e21) (let* . td2e20) (let*-values . td2e1f) (let-values . td2e1e) (identifier-syntax . td2e1d) (with-syntax . td2e1c) (quasisyntax . td2e1b) (quasiquote . td2e1a) (syntax-rules . td2e19) (record-constructor-descriptor . td2e16) (record-type-descriptor . td2e15) (case . td2e14) (unless . td2e12) (when . td2e11) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec* . td2e0c) (letrec . td2e0b) (case-lambda . td2e09) (lambda . td2e08) (syntax . td2e07) (syntax-case . td2e06) (quote . td2e05) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (begin . td2dff) (define-syntax . td2dfd) (define . td2dfc)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . tde36) (quotient . td2fe2) (null-environment . tde34) (remainder . td2fe1) (modulo . td2fe0) (inexact->exact . td2fdf) (force . td2fde) (exact->inexact . td2fdd) (make-promise . td2fdc) (delay . td2e24)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312c '(rnrs control) '(6) '() '() '() '((do . td2e22) (unless . td2e12) (when . td2e11) (case-lambda . td2e09)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312d '(rnrs eval) '(6) '() '() '() '((eval . tde3a) (environment . tde32)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . td2fd8) (set-car! . td2fd7)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td312f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . td2fda) (string-set! . td2fd9)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3130 '(rnrs programs) '(6) '() '() '() '((exit . td2fdb) (command-line . td2c94)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3131 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . tdba5) (identifier? . tde5c) (generate-temporaries . tde48) (free-identifier=? . tde4a) (syntax->datum . tde60) (datum->syntax . tde5e) (bound-identifier=? . tde4c) (syntax-violation . tde5a) (unsyntax-splicing . td2e2e) (unsyntax . td2e2d) (_ . td2e2a) (... . td2e27) (with-syntax . td2e1c) (quasisyntax . td2e1b) (syntax . td2e07) (syntax-case . td2e06)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3132 '(rnrs files) '(6) '() '() '() '((delete-file . td304b) (file-exists? . td304a) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3133 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . td3049) (vector-sort . td3048) (list-sort . td3047)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3134 '(rnrs base) '(6) '() '() '() '((zero? . td2f00) (vector? . td2eff) (vector-set! . td2efe) (vector-ref . td2efd) (vector-map . td2efc) (vector-length . td2efb) (vector-for-each . td2efa) (vector-fill! . td2ef9) (vector->list . td2ef8) (vector . td2ef7) (values . td2ef6) (truncate . td2ef5) (tan . td2ef4) (symbol? . td2ef3) (symbol=? . td2ef2) (symbol->string . td2ef1) (substring . td2ef0) (string? . td2eef) (string>? . td2eee) (string>=? . td2eed) (string=? . td2eec) (string<? . td2eeb) (string<=? . td2eea) (string-ref . td2ee9) (string-length . td2ee8) (string-for-each . td2ee7) (string-copy . td2ee6) (string-append . td2ee5) (string->symbol . td2ee4) (string->number . td2ee3) (string->list . td2ee2) (string . td2ee1) (sqrt . td2ee0) (sin . td2edf) (round . td2ede) (reverse . td2edd) (real? . td2edc) (real-valued? . td2edb) (real-part . td2eda) (rationalize . td2ed9) (rational? . td2ed8) (rational-valued? . td2ed7) (procedure? . td2ed6) (positive? . td2ed5) (pair? . td2ed4) (odd? . td2ed3) (numerator . td2ed2) (number? . td2ed1) (number->string . td2ed0) (null? . td2ecf) (not . td2ece) (negative? . td2ecd) (nan? . td2ecc) (min . td2ecb) (max . td2eca) (map . td2ec9) (make-vector . td2ec8) (make-string . td2ec7) (make-rectangular . td2ec6) (make-polar . td2ec5) (magnitude . td2ec4) (log . td2ec3) (list? . td2ec2) (list-tail . td2ec1) (list-ref . td2ec0) (list->vector . td2ebf) (list->string . td2ebe) (list . td2ebd) (length . td2ebc) (lcm . td2ebb) (integer? . td2eba) (integer-valued? . td2eb9) (integer->char . td2eb8) (infinite? . td2eb7) (inexact? . td2eb6) (inexact . td2eb5) (imag-part . td2eb4) (gcd . td2eb3) (for-each . td2eb2) (floor . td2eb1) (finite? . td2eb0) (expt . td2eaf) (exp . td2eae) (exact? . td2ead) (exact-integer-sqrt . td2eac) (exact . td2eab) (even? . td2eaa) (error . td2ea9) (eqv? . td2ea8) (equal? . td2ea7) (eq? . td2ea6) (dynamic-wind . td2ea5) (div0-and-mod0 . td2ea4) (mod0 . td2ea3) (div0 . td2ea2) (div-and-mod . td2ea1) (mod . td2ea0) (div . td2e9f) (denominator . td2e9e) (cos . td2e9d) (cons . td2e9c) (complex? . td2e9b) (char? . td2e9a) (char>? . td2e99) (char>=? . td2e98) (char=? . td2e97) (char<? . td2e96) (char<=? . td2e95) (char->integer . td2e94) (ceiling . td2e93) (call-with-values . td2e92) (call/cc . td2e91) (call-with-current-continuation . td2e90) (cddddr . td2e8f) (cdddar . td2e8e) (cddadr . td2e8d) (cddaar . td2e8c) (cdaddr . td2e8b) (cdadar . td2e8a) (cdaadr . td2e89) (cdaaar . td2e88) (cadddr . td2e87) (caddar . td2e86) (cadadr . td2e85) (cadaar . td2e84) (caaddr . td2e83) (caadar . td2e82) (caaadr . td2e81) (caaaar . td2e80) (cdddr . td2e7f) (cddar . td2e7e) (cdadr . td2e7d) (cdaar . td2e7c) (caddr . td2e7b) (cadar . td2e7a) (caadr . td2e79) (caaar . td2e78) (cddr . td2e77) (cdar . td2e76) (cadr . td2e75) (caar . td2e74) (cdr . td2e73) (car . td2e72) (boolean? . td2e71) (boolean=? . td2e70) (atan . td2e6f) (assertion-violation . td2e6e) (asin . td2e6d) (apply . td2e6c) (append . td2e6b) (angle . td2e6a) (acos . td2e69) (abs . td2e68) (/ . td2e67) (* . td2e66) (- . td2e65) (+ . td2e64) (>= . td2e63) (> . td2e62) (= . td2e61) (<= . td2e60) (< . td2e5f) (unquote-splicing . td2e2c) (unquote . td2e2b) (_ . td2e2a) (else . td2e29) (=> . td2e28) (... . td2e27) (assert . td2e26) (cond . td2e21) (let* . td2e20) (let*-values . td2e1f) (let-values . td2e1e) (identifier-syntax . td2e1d) (quasiquote . td2e1a) (syntax-rules . td2e19) (case . td2e14) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec* . td2e0c) (letrec . td2e0b) (lambda . td2e08) (quote . td2e05) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (begin . td2dff) (define-syntax . td2dfd) (define . td2dfc)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3135 '(rnrs lists) '(6) '() '() '() '((remove . td2fd6) (remv . td2fd5) (remp . td2fd4) (remq . td2fd3) (partition . td2fd2) (memv . td2fd1) (memq . td2fd0) (memp . td2fcf) (member . td2fce) (exists . td2fcd) (for-all . td2fcc) (fold-right . td2fcb) (fold-left . td2fca) (find . td2fc9) (filter . td2fc8) (cons* . td2fc7) (assv . td2fc6) (assq . td2fc5) (assp . td2fc4) (assoc . td2fc3)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3136 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . td3031) (call-with-input-file . td3030) (write-char . td302f) (write . td302e) (with-output-to-file . td302d) (with-input-from-file . td302c) (read-char . td302b) (read . td302a) (peek-char . td3029) (open-output-file . td3028) (open-input-file . td3027) (newline . td3026) (display . td3025) (close-output-port . td3024) (close-input-port . td3023) (eof-object? . td3022) (eof-object . td3021) (current-error-port . td3020) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3137 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . td2ff2) (utf32->string . td2fa7) (utf16->string . td2fa6) (utf8->string . td2fa5) (uint-list->bytevector . td2fa4) (u8-list->bytevector . td2fa3) (string->utf8 . td2fa2) (string->utf32 . td2fa1) (string->utf16 . td2fa0) (sint-list->bytevector . td2f9f) (native-endianness . td2f9e) (bytevector? . td2f9d) (bytevector=? . td2f9c) (bytevector-uint-set! . td2f9b) (bytevector-uint-ref . td2f9a) (bytevector-u8-set! . td2f99) (bytevector-u8-ref . td2f98) (bytevector-u64-set! . td2f97) (bytevector-u64-ref . td2f96) (bytevector-u64-native-set! . td2f95) (bytevector-u64-native-ref . td2f94) (bytevector-u32-set! . td2f93) (bytevector-u32-ref . td2f92) (bytevector-u32-native-set! . td2f91) (bytevector-u32-native-ref . td2f90) (bytevector-u16-set! . td2f8f) (bytevector-u16-ref . td2f8e) (bytevector-u16-native-set! . td2f8d) (bytevector-u16-native-ref . td2f8c) (bytevector-sint-set! . td2f8b) (bytevector-sint-ref . td2f8a) (bytevector-s8-set! . td2f89) (bytevector-s8-ref . td2f88) (bytevector-s64-set! . td2f87) (bytevector-s64-ref . td2f86) (bytevector-s64-native-set! . td2f85) (bytevector-s64-native-ref . td2f84) (bytevector-s32-set! . td2f83) (bytevector-s32-ref . td2f82) (bytevector-s32-native-set! . td2f81) (bytevector-s32-native-ref . td2f80) (bytevector-s16-set! . td2f7f) (bytevector-s16-ref . td2f7e) (bytevector-s16-native-set! . td2f7d) (bytevector-s16-native-ref . td2f7c) (bytevector-length . td2f7b) (bytevector-ieee-single-ref . td2f7a) (bytevector-ieee-single-set! . td2f79) (bytevector-ieee-single-native-set! . td2f78) (bytevector-ieee-single-native-ref . td2f77) (bytevector-ieee-double-set! . td2f76) (bytevector-ieee-double-ref . td2f75) (bytevector-ieee-double-native-set! . td2f74) (bytevector-ieee-double-native-ref . td2f73) (bytevector-fill! . td2f72) (bytevector-copy! . td2f71) (bytevector-copy . td2f70) (bytevector->uint-list . td2f6f) (bytevector->u8-list . td2f6e) (bytevector->sint-list . td2f6d) (endianness . td2e25)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3138 '(rnrs unicode) '(6) '() '() '() '((string-upcase . td3079) (string-titlecase . td3078) (string-normalize-nfkd . td3077) (string-normalize-nfkc . td3076) (string-normalize-nfd . td3075) (string-normalize-nfc . td3074) (string-foldcase . td3073) (string-downcase . td3072) (string-ci>? . td3071) (string-ci>=? . td3070) (string-ci=? . td306f) (string-ci<? . td306e) (string-ci<=? . td306d) (char-whitespace? . td306c) (char-upper-case? . td306b) (char-title-case? . td306a) (char-numeric? . td3069) (char-lower-case? . td3068) (char-general-category . td3067) (char-upcase . td3066) (char-titlecase . td3065) (char-foldcase . td3064) (char-downcase . td3063) (char-ci>? . td3062) (char-ci>=? . td3061) (char-ci=? . td3060) (char-ci<? . td305f) (char-ci<=? . td305e) (char-alphabetic? . td305d)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3139 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . td2fbc) (raise-continuable . td2fbb) (raise . td2fba) (guard . td2e31) (else . td2e29) (=> . td2e28)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . td2f11) (bitwise-reverse-bit-field . td2f10) (bitwise-length . td2f0f) (bitwise-if . td2f0e) (bitwise-first-bit-set . td2f0d) (bitwise-copy-bit-field . td2f0c) (bitwise-copy-bit . td2f0b) (bitwise-bit-set? . td2f0a) (bitwise-bit-field . td2f09) (bitwise-bit-count . td2f08) (bitwise-xor . td2f07) (bitwise-ior . td2f06) (bitwise-and . td2f05) (bitwise-not . td2f04) (bitwise-arithmetic-shift-right . td2f03) (bitwise-arithmetic-shift-left . td2f02) (bitwise-arithmetic-shift . td2f01)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . td2f3e) (fxxor . td2f3d) (fxrotate-bit-field . td2f3c) (fxreverse-bit-field . td2f3b) (fxpositive? . td2f3a) (fxodd? . td2f39) (fxnot . td2f38) (fxnegative? . td2f37) (fxmod0 . td2f36) (fxmod . td2f35) (fxmin . td2f34) (fxmax . td2f33) (fxlength . td2f32) (fxior . td2f31) (fxif . td2f30) (fxfirst-bit-set . td2f2f) (fxeven? . td2f2e) (fxdiv0-and-mod0 . td2f2d) (fxdiv0 . td2f2c) (fxdiv-and-mod . td2f2b) (fxdiv . td2f2a) (fxcopy-bit-field . td2f29) (fxcopy-bit . td2f28) (fxbit-set? . td2f27) (fxbit-field . td2f26) (fxbit-count . td2f25) (fxarithmetic-shift-right . td2f24) (fxarithmetic-shift-left . td2f23) (fxarithmetic-shift . td2f22) (fxand . td2f21) (fx>? . td2f20) (fx>=? . td2f1f) (fx=? . td2f1e) (fx<? . td2f1d) (fx<=? . td2f1c) (fx-/carry . td2f1b) (fx- . td2f1a) (fx+/carry . td2f19) (fx+ . td2f18) (fx*/carry . td2f17) (fx* . td2f16) (greatest-fixnum . td2f15) (least-fixnum . td2f14) (fixnum-width . td2f13) (fixnum? . td2f12)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . td2b85) (no-infinities-violation? . td2b70) (make-no-nans-violation . td2b83) (make-no-infinities-violation . td2b6e) (real->flonum . td2f6c) (flzero? . td2f6b) (fltruncate . td2f6a) (fltan . td2f69) (flsqrt . td2f68) (flsin . td2f67) (flround . td2f66) (flpositive? . td2f65) (flonum? . td2f64) (flodd? . td2f63) (flnumerator . td2f62) (flnegative? . td2f61) (flnan? . td2f60) (flmod0 . td2f5f) (flmod . td2f5e) (flmin . td2f5d) (flmax . td2f5c) (fllog . td2f5b) (flinteger? . td2f5a) (flinfinite? . td2f59) (flfloor . td2f58) (flfinite? . td2f57) (flexpt . td2f56) (flexp . td2f55) (fleven? . td2f54) (fldiv0-and-mod0 . td2f53) (fldiv0 . td2f52) (fldiv-and-mod . td2f51) (fldiv . td2f50) (fldenominator . td2f4f) (flcos . td2f4e) (flceiling . td2f4d) (flatan . td2f4c) (flasin . td2f4b) (flacos . td2f4a) (flabs . td2f49) (fl>? . td2f48) (fl>=? . td2f47) (fl=? . td2f46) (fl<? . td2f45) (fl<=? . td2f44) (fl/ . td2f43) (fl- . td2f42) (fl+ . td2f41) (fl* . td2f40) (fixnum->flonum . td2f3f) (&no-nans . td2e5d) (&no-infinities . td2e5c)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . td3046) (string-ci-hash . td3045) (string-hash . td3044) (equal-hash . td3043) (hashtable-equivalence-function . td3042) (make-hashtable . td3041) (hashtable-hash-function . td3040) (make-eqv-hashtable . td303f) (make-eq-hashtable . td303e) (hashtable? . td303d) (hashtable-update! . td303c) (hashtable-size . td303b) (hashtable-set! . td303a) (hashtable-ref . td3039) (hashtable-mutable? . td3038) (hashtable-keys . td3037) (hashtable-entries . td3036) (hashtable-delete! . td3035) (hashtable-copy . td3034) (hashtable-contains? . td3033) (hashtable-clear! . td3032)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313e '(rnrs io ports) '(6) '() '() '() '((eof-object? . td3022) (eof-object . td3021) (current-error-port . td3020) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (utf-8-codec . td301b) (utf-16-codec . td301a) (transcoder-error-handling-mode . td3019) (transcoder-eol-style . td3018) (transcoder-codec . td3017) (transcoded-port . td3016) (textual-port? . td3015) (string->bytevector . td3014) (standard-output-port . td3013) (standard-input-port . td3012) (standard-error-port . td3011) (set-port-position! . td3010) (put-u8 . td300f) (put-string . td300e) (put-datum . td300d) (put-char . td300c) (put-bytevector . td300b) (port? . td300a) (port-transcoder . td3009) (port-position . td3008) (port-has-set-port-position!? . td3007) (port-has-port-position? . td3006) (port-eof? . td3005) (output-port-buffer-mode . td3004) (open-string-output-port . td3003) (open-string-input-port . td3002) (open-file-output-port . td3001) (open-file-input/output-port . td3000) (open-file-input-port . td2fff) (open-bytevector-output-port . td2ffe) (open-bytevector-input-port . td2ffd) (native-transcoder . td2ffc) (native-eol-style . td2ffb) (make-transcoder . td2ffa) (latin-1-codec . td2ff9) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (make-i/o-encoding-error . td2b55) (make-i/o-decoding-error . td2b3e) (make-custom-textual-output-port . td2ff8) (make-custom-textual-input/output-port . td2ff7) (make-custom-textual-input-port . td2ff6) (make-custom-binary-output-port . td2ff5) (make-custom-binary-input/output-port . td2ff4) (make-custom-binary-input-port . td2ff3) (lookahead-u8 . td2ff1) (lookahead-char . td2ff0) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (i/o-encoding-error? . td2b59) (i/o-encoding-error-char . td2b5b) (i/o-decoding-error? . td2b40) (get-u8 . td2fef) (get-string-n! . td2fee) (get-string-n . td2fed) (get-string-all . td2fec) (get-line . td2feb) (get-datum . td2fea) (get-char . td2fe9) (get-bytevector-some . td2fe8) (get-bytevector-n! . td2fe7) (get-bytevector-n . td2fe6) (get-bytevector-all . td2fe5) (flush-output-port . td2fe4) (close-port . td2fe3) (call-with-string-output-port . td2fc2) (call-with-port . td2fc1) (call-with-bytevector-output-port . td2fc0) (bytevector->string . td2fbf) (buffer-mode? . td2fbe) (binary-port? . td2fbd) (&i/o-encoding . td2e5b) (&i/o-decoding . td2e5a) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50) (error-handling-mode . td2e35) (file-options . td2e34) (buffer-mode . td2e33) (eol-style . td2e32)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td313f '(rnrs enums) '(6) '() '() '() '((make-enumeration . td2fb9) (enum-set=? . td2fb8) (enum-set-universe . td2fb7) (enum-set-union . td2fb6) (enum-set-subset? . td2fb5) (enum-set-projection . td2fb4) (enum-set-member? . td2fb3) (enum-set-intersection . td2fb2) (enum-set-indexer . td2fb1) (enum-set-difference . td2fb0) (enum-set-constructor . td2faf) (enum-set-complement . td2fae) (enum-set->list . td2fad) (define-enumeration . td2e40)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3140 '(rnrs conditions) '(6) '() '() '() '((who-condition? . td29d0) (warning? . td2948) (violation? . td2987) (undefined-violation? . td2a47) (syntax-violation? . td2a2e) (syntax-violation-subform . td2a32) (syntax-violation-form . td2a30) (syntax-violation . tde5a) (simple-conditions . td2fac) (serious-condition? . td295d) (non-continuable-violation? . td29e7) (message-condition? . td2931) (make-who-condition . td29cc) (make-warning . td2946) (make-violation . td2985) (make-undefined-violation . td2a45) (make-syntax-violation . td2a28) (make-serious-condition . td295b) (make-non-continuable-violation . td29e5) (make-message-condition . td292d) (make-lexical-violation . td2a0f) (make-irritants-condition . td29b1) (make-implementation-restriction-violation . td29fa) (make-error . td2970) (make-assertion-violation . td299a) (lexical-violation? . td2a11) (irritants-condition? . td29b5) (implementation-restriction-violation? . td29fc) (error? . td2972) (condition-who . td29d2) (condition-predicate . td2fab) (condition-message . td2933) (condition-irritants . td29b7) (condition-accessor . td2faa) (condition . td2fa9) (assertion-violation? . td299c) (condition? . td2fa8) (&undefined . td2e4f) (&syntax . td2e4e) (&lexical . td2e4d) (&implementation-restriction . td2e4c) (&non-continuable . td2e4b) (&who . td2e4a) (&irritants . td2e49) (&assertion . td2e48) (&violation . td2e47) (&error . td2e46) (&serious . td2e45) (&warning . td2e44) (&message . td2e43) (&condition . td2e42) (define-condition-type . td2e41)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3141 '(rnrs records inspection) '(6) '() '() '() '((record? . td3055) (record-type-uid . td3054) (record-type-sealed? . td3053) (record-type-parent . td3052) (record-type-opaque? . td3051) (record-type-name . td3050) (record-type-generative? . td304f) (record-type-field-names . td304e) (record-rtd . td304d) (record-field-mutable? . td304c)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3142 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . td305c) (record-predicate . td305b) (record-mutator . td305a) (record-constructor . td3059) (record-accessor . td3058) (make-record-type-descriptor . td3057) (make-record-constructor-descriptor . td3056)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3143 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . td2e3f) (parent-rtd . td2e3e) (nongenerative . td2e3d) (opaque . td2e3c) (sealed . td2e3b) (protocol . td2e3a) (parent . td2e39) (immutable . td2e38) (mutable . td2e37) (fields . td2e36) (record-constructor-descriptor . td2e16) (record-type-descriptor . td2e15)) '() values values '#f '#f '#t '#f) (td988@td7d4@install-library 'td3144 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . td2b89) (&no-nans-rtd . td2b87) (&no-infinities-rcd . td2b74) (&no-infinities-rtd . td2b72) (&i/o-encoding-rcd . td2b5f) (&i/o-encoding-rtd . td2b5d) (&i/o-decoding-rcd . td2b44) (&i/o-decoding-rtd . td2b42) (&i/o-port-rcd . td2b2f) (&i/o-port-rtd . td2b2d) (&i/o-file-does-not-exist-rcd . td2b14) (&i/o-file-does-not-exist-rtd . td2b12) (&i/o-file-already-exists-rcd . td2aff) (&i/o-file-already-exists-rtd . td2afd) (&i/o-file-is-read-only-rcd . td2aea) (&i/o-file-is-read-only-rtd . td2ae8) (&i/o-file-protection-rcd . td2ad5) (&i/o-file-protection-rtd . td2ad3) (&i/o-filename-rcd . td2ac0) (&i/o-filename-rtd . td2abe) (&i/o-invalid-position-rcd . td2aa5) (&i/o-invalid-position-rtd . td2aa3) (&i/o-write-rcd . td2a8a) (&i/o-write-rtd . td2a88) (&i/o-read-rcd . td2a75) (&i/o-read-rtd . td2a73) (&i/o-rcd . td2a60) (&i/o-rtd . td2a5e) (&undefined-rcd . td2a4b) (&undefined-rtd . td2a49) (&syntax-rcd . td2a36) (&syntax-rtd . td2a34) (&lexical-rcd . td2a15) (&lexical-rtd . td2a13) (&implementation-restriction-rcd . td2a00) (&implementation-restriction-rtd . td29fe) (&non-continuable-rcd . td29eb) (&non-continuable-rtd . td29e9) (&who-rcd . td29d6) (&who-rtd . td29d4) (&irritants-rcd . td29bb) (&irritants-rtd . td29b9) (&assertion-rcd . td29a0) (&assertion-rtd . td299e) (&violation-rcd . td298b) (&violation-rtd . td2989) (&error-rcd . td2976) (&error-rtd . td2974) (&serious-rcd . td2961) (&serious-rtd . td295f) (&warning-rcd . td294c) (&warning-rtd . td294a) (&message-rcd . td2937) (&message-rtd . td2935) (&condition-rcd . td28d8) (&condition-rtd . td28d6) (syntax-error . tde56) (syntax-dispatch . tdd7a) (pretty-print . td3124) (eval-core . td3123) (set-symbol-value! . td3122) (symbol-value . td3121) (gensym . td3120) (void . td311f) (load . td2c9a) (interaction-environment . tde68) (char-ready? . td311e) (regexp? . td311d) (read-line . td311c) (gensym-prefix-set! . td311b) (ungensym . td311a) (alist->eq-hash-table . td3119) (assoc-ref . td3118) (print . td3117) (format . td3116) (host-os . td3115) (library-path . td7b3) (standard-library-path . td3114) (file-newer? . td3113) (stat-mtime . td3112) (write-to-file . td3111) (file->list . td3110) (file->string . td310f) (digit->integer . td310e) (call-with-string-input-port . td310d) (call-with-string-io . td310c) (string-split . td310b) (bytevector-for-each . td310a) (string->regexp . td3109) (rxmatch . td3108) (regexp-replace-all . td3107) (hashtable-for-each . td3106) (mosh-cache-dir . td59e) (call-process . td3105) (local-tz-offset . td3104) (microseconds . td3103) (directory-list . td3102) (set-current-directory! . td3101) (expand-path . td3100) (current-directory . td30ff) (%spawn . td30fe) (%waitpid . td30fd) (simple-struct-name . td30fc) (simple-struct-set! . td30fb) (simple-struct-ref . td30fa) (make-simple-struct . td30f9) (simple-struct? . td30f8) (pointer-ref-c-int64 . td30f7) (pointer-ref-c-int32 . td30f6) (pointer-ref-c-int16 . td30f5) (pointer-ref-c-int8 . td30f4) (pointer-ref-c-uint64 . td30f3) (pointer-ref-c-uint32 . td30f2) (pointer-ref-c-uint16 . td30f1) (pointer-ref-c-uint8 . td30f0) (pointer-set-c-uint64! . td30ef) (pointer-set-c-uint32! . td30ee) (pointer-set-c-uint16! . td30ed) (pointer-set-c-uint8! . td30ec) (pointer-set-c-int64! . td30eb) (pointer-set-c-int32! . td30ea) (pointer-set-c-int16! . td30e9) (pointer-set-c-int8! . td30e8) (pointer-set-c-pointer! . td30e7) (pointer-set-c-double! . td30e6) (pointer-set-c-float! . td30e5) (pointer-set-c-long-long! . td30e4) (pointer-set-c-long! . td30e3) (pointer-set-c-int! . td30e2) (pointer-set-c-short! . td30e1) (pointer-set-c-char! . td30e0) (pointer-ref-c-pointer . td30df) (pointer-ref-c-double . td30de) (pointer-ref-c-float . td30dd) (pointer-ref-c-unsigned-long-long . td30dc) (pointer-ref-c-signed-long-long . td30db) (pointer-ref-c-unsigned-long . td30da) (pointer-ref-c-signed-long . td30d9) (pointer-ref-c-unsigned-int . td30d8) (pointer-ref-c-signed-int . td30d7) (pointer-ref-c-unsigned-short . td30d6) (pointer-ref-c-signed-short . td30d5) (pointer-ref-c-unsigned-char . td30d4) (pointer-ref-c-signed-char . td30d3) (pointer->integer . td30d2) (integer->pointer . td30d1) (pointer? . td30d0) (shared-errno . td30cf) (%ffi-make-c-callback-trampoline . td30ce) (%ffi-free . td30cd) (%ffi-malloc . td30cc) (%ffi-supported? . td30cb) (%ffi-pointer->string . td30ca) (%ffi-call->string-or-zero . td30c9) (%ffi-call->double . td30c8) (%ffi-call->void* . td30c7) (%ffi-call->void . td30c6) (%ffi-call->char . td30c5) (%ffi-call->int . td30c4) (%ffi-lookup . td30c3) (%ffi-open . td30c2) (%fork . td30c1) (%pipe . td30c0) (p . td30bf) (open-output-string . td30be) (get-output-string . td30bd) (file-stat-ctime . td30bc) (file-stat-atime . td30bb) (file-stat-mtime . td30ba) (file-size-in-bytes . td30b9) (file-writable? . td30b8) (file-executable? . td30b7) (file-readable? . td30b6) (file-regular? . td30b5) (file-symbolic-link? . td30b4) (file-directory? . td30b3) (create-symbolic-link . td30b2) (rename-file . td30b1) (delete-directory . td30b0) (create-directory . td30af) (create-mosh-cache-dir . td30ae) (get-environment-variables . td30ad) (current-exception-handler . td30ac) (get-environment-variable . td30ab) (join-wraps . td30aa) (id->real-label . td30a9) (same-marks? . td30a8) (same-marks*? . td30a7) (get-timeofday . td30a6) (get-command-line . td30a5) (sys-display . td30a4) (whereis . td30a3) (register . td30a2) (vm-join! . td30a1) (vm-set-value! . td30a0) (vm? . td309f) (main-vm? . td309e) (vm-eval . td309d) (vm-self . td309c) (vm-start! . td309b) (make-vm . td309a) (mutex-try-lock! . td3099) (mutex-unlock! . td3098) (mutex-lock! . td3097) (mutex? . td3096) (make-mutex . td3095) (condition-variable-notify-all! . td3094) (condition-variable-notify! . td3093) (condition-variable-wait! . td3092) (make-condition-variable . td3091) (mosh-executable-path . td3090) (make-file-options . td308f) (source-info . td308e) (make-compiler-instruction . td308d) (make-instruction . td308c) (set-source-info! . td308b) (bignum? . td308a) (fast-equal? . td3089) (fasl-read . td3088) (fasl-write . td3087) (time-usage . td3086) (os-constant . td3085) (disasm . td3084) (make-parameter . td59c) (socket-port . td3083) (socket-shutdown . td3082) (socket-close . td3081) (socket-send . td3080) (socket-recv! . td307f) (socket-recv . td307e) (make-server-socket . td307d) (make-client-socket . td307c) (socket-accept . td307b) (socket? . td307a) (string-upcase . td3079) (string-titlecase . td3078) (string-normalize-nfkd . td3077) (string-normalize-nfkc . td3076) (string-normalize-nfd . td3075) (string-normalize-nfc . td3074) (string-foldcase . td3073) (string-downcase . td3072) (string-ci>? . td3071) (string-ci>=? . td3070) (string-ci=? . td306f) (string-ci<? . td306e) (string-ci<=? . td306d) (char-whitespace? . td306c) (char-upper-case? . td306b) (char-title-case? . td306a) (char-numeric? . td3069) (char-lower-case? . td3068) (char-general-category . td3067) (char-upcase . td3066) (char-titlecase . td3065) (char-foldcase . td3064) (char-downcase . td3063) (char-ci>? . td3062) (char-ci>=? . td3061) (char-ci=? . td3060) (char-ci<? . td305f) (char-ci<=? . td305e) (char-alphabetic? . td305d) (make-variable-transformer . tdba5) (identifier? . tde5c) (generate-temporaries . tde48) (free-identifier=? . tde4a) (syntax->datum . tde60) (datum->syntax . tde5e) (bound-identifier=? . tde4c) (record-type-descriptor? . td305c) (record-predicate . td305b) (record-mutator . td305a) (record-constructor . td3059) (record-accessor . td3058) (make-record-type-descriptor . td3057) (make-record-constructor-descriptor . td3056) (record? . td3055) (record-type-uid . td3054) (record-type-sealed? . td3053) (record-type-parent . td3052) (record-type-opaque? . td3051) (record-type-name . td3050) (record-type-generative? . td304f) (record-type-field-names . td304e) (record-rtd . td304d) (record-field-mutable? . td304c) (delete-file . td304b) (file-exists? . td304a) (vector-sort! . td3049) (vector-sort . td3048) (list-sort . td3047) (symbol-hash . td3046) (string-ci-hash . td3045) (string-hash . td3044) (equal-hash . td3043) (hashtable-equivalence-function . td3042) (make-hashtable . td3041) (hashtable-hash-function . td3040) (make-eqv-hashtable . td303f) (make-eq-hashtable . td303e) (hashtable? . td303d) (hashtable-update! . td303c) (hashtable-size . td303b) (hashtable-set! . td303a) (hashtable-ref . td3039) (hashtable-mutable? . td3038) (hashtable-keys . td3037) (hashtable-entries . td3036) (hashtable-delete! . td3035) (hashtable-copy . td3034) (hashtable-contains? . td3033) (hashtable-clear! . td3032) (call-with-output-file . td3031) (call-with-input-file . td3030) (write-char . td302f) (write . td302e) (with-output-to-file . td302d) (with-input-from-file . td302c) (read-char . td302b) (read . td302a) (peek-char . td3029) (open-output-file . td3028) (open-input-file . td3027) (newline . td3026) (display . td3025) (close-output-port . td3024) (close-input-port . td3023) (eof-object? . td3022) (eof-object . td3021) (current-error-port . td3020) (current-output-port . td301f) (current-input-port . td301e) (output-port? . td301d) (input-port? . td301c) (utf-8-codec . td301b) (utf-16-codec . td301a) (transcoder-error-handling-mode . td3019) (transcoder-eol-style . td3018) (transcoder-codec . td3017) (transcoded-port . td3016) (textual-port? . td3015) (string->bytevector . td3014) (standard-output-port . td3013) (standard-input-port . td3012) (standard-error-port . td3011) (set-port-position! . td3010) (put-u8 . td300f) (put-string . td300e) (put-datum . td300d) (put-char . td300c) (put-bytevector . td300b) (port? . td300a) (port-transcoder . td3009) (port-position . td3008) (port-has-set-port-position!? . td3007) (port-has-port-position? . td3006) (port-eof? . td3005) (output-port-buffer-mode . td3004) (open-string-output-port . td3003) (open-string-input-port . td3002) (open-file-output-port . td3001) (open-file-input/output-port . td3000) (open-file-input-port . td2fff) (open-bytevector-output-port . td2ffe) (open-bytevector-input-port . td2ffd) (native-transcoder . td2ffc) (native-eol-style . td2ffb) (make-transcoder . td2ffa) (latin-1-codec . td2ff9) (make-i/o-write-error . td2a84) (make-i/o-read-error . td2a6f) (make-i/o-port-error . td2b25) (make-i/o-invalid-position-error . td2a9b) (make-i/o-filename-error . td2ab6) (make-i/o-file-protection-error . td2acf) (make-i/o-file-is-read-only-error . td2ae4) (make-i/o-file-does-not-exist-error . td2b0e) (make-i/o-file-already-exists-error . td2af9) (make-i/o-error . td2a5a) (make-i/o-encoding-error . td2b55) (make-i/o-decoding-error . td2b3e) (make-custom-textual-output-port . td2ff8) (make-custom-textual-input/output-port . td2ff7) (make-custom-textual-input-port . td2ff6) (make-custom-binary-output-port . td2ff5) (make-custom-binary-input/output-port . td2ff4) (make-custom-binary-input-port . td2ff3) (make-bytevector . td2ff2) (lookahead-u8 . td2ff1) (lookahead-char . td2ff0) (i/o-write-error? . td2a86) (i/o-read-error? . td2a71) (i/o-port-error? . td2b29) (i/o-invalid-position-error? . td2a9f) (i/o-filename-error? . td2aba) (i/o-file-protection-error? . td2ad1) (i/o-file-is-read-only-error? . td2ae6) (i/o-file-does-not-exist-error? . td2b10) (i/o-file-already-exists-error? . td2afb) (i/o-error? . td2a5c) (i/o-error-position . td2aa1) (i/o-error-port . td2b2b) (i/o-error-filename . td2abc) (i/o-encoding-error? . td2b59) (i/o-encoding-error-char . td2b5b) (i/o-decoding-error? . td2b40) (get-u8 . td2fef) (get-string-n! . td2fee) (get-string-n . td2fed) (get-string-all . td2fec) (get-line . td2feb) (get-datum . td2fea) (get-char . td2fe9) (get-bytevector-some . td2fe8) (get-bytevector-n! . td2fe7) (get-bytevector-n . td2fe6) (get-bytevector-all . td2fe5) (flush-output-port . td2fe4) (close-port . td2fe3) (scheme-report-environment . tde36) (quotient . td2fe2) (null-environment . tde34) (remainder . td2fe1) (modulo . td2fe0) (inexact->exact . td2fdf) (force . td2fde) (exact->inexact . td2fdd) (make-promise . td2fdc) (exit . td2fdb) (command-line . td2c94) (string-fill! . td2fda) (string-set! . td2fd9) (set-cdr! . td2fd8) (set-car! . td2fd7) (remove . td2fd6) (remv . td2fd5) (remp . td2fd4) (remq . td2fd3) (partition . td2fd2) (memv . td2fd1) (memq . td2fd0) (memp . td2fcf) (member . td2fce) (exists . td2fcd) (for-all . td2fcc) (fold-right . td2fcb) (fold-left . td2fca) (find . td2fc9) (filter . td2fc8) (cons* . td2fc7) (assv . td2fc6) (assq . td2fc5) (assp . td2fc4) (assoc . td2fc3) (call-with-string-output-port . td2fc2) (call-with-port . td2fc1) (call-with-bytevector-output-port . td2fc0) (bytevector->string . td2fbf) (buffer-mode? . td2fbe) (binary-port? . td2fbd) (with-exception-handler . td2fbc) (raise-continuable . td2fbb) (raise . td2fba) (eval . tde3a) (environment . tde32) (make-enumeration . td2fb9) (enum-set=? . td2fb8) (enum-set-universe . td2fb7) (enum-set-union . td2fb6) (enum-set-subset? . td2fb5) (enum-set-projection . td2fb4) (enum-set-member? . td2fb3) (enum-set-intersection . td2fb2) (enum-set-indexer . td2fb1) (enum-set-difference . td2fb0) (enum-set-constructor . td2faf) (enum-set-complement . td2fae) (enum-set->list . td2fad) (who-condition? . td29d0) (warning? . td2948) (violation? . td2987) (undefined-violation? . td2a47) (syntax-violation? . td2a2e) (syntax-violation-subform . td2a32) (syntax-violation-form . td2a30) (syntax-violation . tde5a) (simple-conditions . td2fac) (serious-condition? . td295d) (non-continuable-violation? . td29e7) (message-condition? . td2931) (make-who-condition . td29cc) (make-warning . td2946) (make-violation . td2985) (make-undefined-violation . td2a45) (make-syntax-violation . td2a28) (make-serious-condition . td295b) (make-non-continuable-violation . td29e5) (make-message-condition . td292d) (make-lexical-violation . td2a0f) (make-irritants-condition . td29b1) (make-implementation-restriction-violation . td29fa) (make-error . td2970) (make-assertion-violation . td299a) (lexical-violation? . td2a11) (irritants-condition? . td29b5) (implementation-restriction-violation? . td29fc) (error? . td2972) (condition-who . td29d2) (condition-predicate . td2fab) (condition-message . td2933) (condition-irritants . td29b7) (condition-accessor . td2faa) (condition . td2fa9) (assertion-violation? . td299c) (condition? . td2fa8) (utf32->string . td2fa7) (utf16->string . td2fa6) (utf8->string . td2fa5) (uint-list->bytevector . td2fa4) (u8-list->bytevector . td2fa3) (string->utf8 . td2fa2) (string->utf32 . td2fa1) (string->utf16 . td2fa0) (sint-list->bytevector . td2f9f) (native-endianness . td2f9e) (bytevector? . td2f9d) (bytevector=? . td2f9c) (bytevector-uint-set! . td2f9b) (bytevector-uint-ref . td2f9a) (bytevector-u8-set! . td2f99) (bytevector-u8-ref . td2f98) (bytevector-u64-set! . td2f97) (bytevector-u64-ref . td2f96) (bytevector-u64-native-set! . td2f95) (bytevector-u64-native-ref . td2f94) (bytevector-u32-set! . td2f93) (bytevector-u32-ref . td2f92) (bytevector-u32-native-set! . td2f91) (bytevector-u32-native-ref . td2f90) (bytevector-u16-set! . td2f8f) (bytevector-u16-ref . td2f8e) (bytevector-u16-native-set! . td2f8d) (bytevector-u16-native-ref . td2f8c) (bytevector-sint-set! . td2f8b) (bytevector-sint-ref . td2f8a) (bytevector-s8-set! . td2f89) (bytevector-s8-ref . td2f88) (bytevector-s64-set! . td2f87) (bytevector-s64-ref . td2f86) (bytevector-s64-native-set! . td2f85) (bytevector-s64-native-ref . td2f84) (bytevector-s32-set! . td2f83) (bytevector-s32-ref . td2f82) (bytevector-s32-native-set! . td2f81) (bytevector-s32-native-ref . td2f80) (bytevector-s16-set! . td2f7f) (bytevector-s16-ref . td2f7e) (bytevector-s16-native-set! . td2f7d) (bytevector-s16-native-ref . td2f7c) (bytevector-length . td2f7b) (bytevector-ieee-single-ref . td2f7a) (bytevector-ieee-single-set! . td2f79) (bytevector-ieee-single-native-set! . td2f78) (bytevector-ieee-single-native-ref . td2f77) (bytevector-ieee-double-set! . td2f76) (bytevector-ieee-double-ref . td2f75) (bytevector-ieee-double-native-set! . td2f74) (bytevector-ieee-double-native-ref . td2f73) (bytevector-fill! . td2f72) (bytevector-copy! . td2f71) (bytevector-copy . td2f70) (bytevector->uint-list . td2f6f) (bytevector->u8-list . td2f6e) (bytevector->sint-list . td2f6d) (no-nans-violation? . td2b85) (no-infinities-violation? . td2b70) (make-no-nans-violation . td2b83) (make-no-infinities-violation . td2b6e) (real->flonum . td2f6c) (flzero? . td2f6b) (fltruncate . td2f6a) (fltan . td2f69) (flsqrt . td2f68) (flsin . td2f67) (flround . td2f66) (flpositive? . td2f65) (flonum? . td2f64) (flodd? . td2f63) (flnumerator . td2f62) (flnegative? . td2f61) (flnan? . td2f60) (flmod0 . td2f5f) (flmod . td2f5e) (flmin . td2f5d) (flmax . td2f5c) (fllog . td2f5b) (flinteger? . td2f5a) (flinfinite? . td2f59) (flfloor . td2f58) (flfinite? . td2f57) (flexpt . td2f56) (flexp . td2f55) (fleven? . td2f54) (fldiv0-and-mod0 . td2f53) (fldiv0 . td2f52) (fldiv-and-mod . td2f51) (fldiv . td2f50) (fldenominator . td2f4f) (flcos . td2f4e) (flceiling . td2f4d) (flatan . td2f4c) (flasin . td2f4b) (flacos . td2f4a) (flabs . td2f49) (fl>? . td2f48) (fl>=? . td2f47) (fl=? . td2f46) (fl<? . td2f45) (fl<=? . td2f44) (fl/ . td2f43) (fl- . td2f42) (fl+ . td2f41) (fl* . td2f40) (fixnum->flonum . td2f3f) (fxzero? . td2f3e) (fxxor . td2f3d) (fxrotate-bit-field . td2f3c) (fxreverse-bit-field . td2f3b) (fxpositive? . td2f3a) (fxodd? . td2f39) (fxnot . td2f38) (fxnegative? . td2f37) (fxmod0 . td2f36) (fxmod . td2f35) (fxmin . td2f34) (fxmax . td2f33) (fxlength . td2f32) (fxior . td2f31) (fxif . td2f30) (fxfirst-bit-set . td2f2f) (fxeven? . td2f2e) (fxdiv0-and-mod0 . td2f2d) (fxdiv0 . td2f2c) (fxdiv-and-mod . td2f2b) (fxdiv . td2f2a) (fxcopy-bit-field . td2f29) (fxcopy-bit . td2f28) (fxbit-set? . td2f27) (fxbit-field . td2f26) (fxbit-count . td2f25) (fxarithmetic-shift-right . td2f24) (fxarithmetic-shift-left . td2f23) (fxarithmetic-shift . td2f22) (fxand . td2f21) (fx>? . td2f20) (fx>=? . td2f1f) (fx=? . td2f1e) (fx<? . td2f1d) (fx<=? . td2f1c) (fx-/carry . td2f1b) (fx- . td2f1a) (fx+/carry . td2f19) (fx+ . td2f18) (fx*/carry . td2f17) (fx* . td2f16) (greatest-fixnum . td2f15) (least-fixnum . td2f14) (fixnum-width . td2f13) (fixnum? . td2f12) (bitwise-rotate-bit-field . td2f11) (bitwise-reverse-bit-field . td2f10) (bitwise-length . td2f0f) (bitwise-if . td2f0e) (bitwise-first-bit-set . td2f0d) (bitwise-copy-bit-field . td2f0c) (bitwise-copy-bit . td2f0b) (bitwise-bit-set? . td2f0a) (bitwise-bit-field . td2f09) (bitwise-bit-count . td2f08) (bitwise-xor . td2f07) (bitwise-ior . td2f06) (bitwise-and . td2f05) (bitwise-not . td2f04) (bitwise-arithmetic-shift-right . td2f03) (bitwise-arithmetic-shift-left . td2f02) (bitwise-arithmetic-shift . td2f01) (zero? . td2f00) (vector? . td2eff) (vector-set! . td2efe) (vector-ref . td2efd) (vector-map . td2efc) (vector-length . td2efb) (vector-for-each . td2efa) (vector-fill! . td2ef9) (vector->list . td2ef8) (vector . td2ef7) (values . td2ef6) (truncate . td2ef5) (tan . td2ef4) (symbol? . td2ef3) (symbol=? . td2ef2) (symbol->string . td2ef1) (substring . td2ef0) (string? . td2eef) (string>? . td2eee) (string>=? . td2eed) (string=? . td2eec) (string<? . td2eeb) (string<=? . td2eea) (string-ref . td2ee9) (string-length . td2ee8) (string-for-each . td2ee7) (string-copy . td2ee6) (string-append . td2ee5) (string->symbol . td2ee4) (string->number . td2ee3) (string->list . td2ee2) (string . td2ee1) (sqrt . td2ee0) (sin . td2edf) (round . td2ede) (reverse . td2edd) (real? . td2edc) (real-valued? . td2edb) (real-part . td2eda) (rationalize . td2ed9) (rational? . td2ed8) (rational-valued? . td2ed7) (procedure? . td2ed6) (positive? . td2ed5) (pair? . td2ed4) (odd? . td2ed3) (numerator . td2ed2) (number? . td2ed1) (number->string . td2ed0) (null? . td2ecf) (not . td2ece) (negative? . td2ecd) (nan? . td2ecc) (min . td2ecb) (max . td2eca) (map . td2ec9) (make-vector . td2ec8) (make-string . td2ec7) (make-rectangular . td2ec6) (make-polar . td2ec5) (magnitude . td2ec4) (log . td2ec3) (list? . td2ec2) (list-tail . td2ec1) (list-ref . td2ec0) (list->vector . td2ebf) (list->string . td2ebe) (list . td2ebd) (length . td2ebc) (lcm . td2ebb) (integer? . td2eba) (integer-valued? . td2eb9) (integer->char . td2eb8) (infinite? . td2eb7) (inexact? . td2eb6) (inexact . td2eb5) (imag-part . td2eb4) (gcd . td2eb3) (for-each . td2eb2) (floor . td2eb1) (finite? . td2eb0) (expt . td2eaf) (exp . td2eae) (exact? . td2ead) (exact-integer-sqrt . td2eac) (exact . td2eab) (even? . td2eaa) (error . td2ea9) (eqv? . td2ea8) (equal? . td2ea7) (eq? . td2ea6) (dynamic-wind . td2ea5) (div0-and-mod0 . td2ea4) (mod0 . td2ea3) (div0 . td2ea2) (div-and-mod . td2ea1) (mod . td2ea0) (div . td2e9f) (denominator . td2e9e) (cos . td2e9d) (cons . td2e9c) (complex? . td2e9b) (char? . td2e9a) (char>? . td2e99) (char>=? . td2e98) (char=? . td2e97) (char<? . td2e96) (char<=? . td2e95) (char->integer . td2e94) (ceiling . td2e93) (call-with-values . td2e92) (call/cc . td2e91) (call-with-current-continuation . td2e90) (cddddr . td2e8f) (cdddar . td2e8e) (cddadr . td2e8d) (cddaar . td2e8c) (cdaddr . td2e8b) (cdadar . td2e8a) (cdaadr . td2e89) (cdaaar . td2e88) (cadddr . td2e87) (caddar . td2e86) (cadadr . td2e85) (cadaar . td2e84) (caaddr . td2e83) (caadar . td2e82) (caaadr . td2e81) (caaaar . td2e80) (cdddr . td2e7f) (cddar . td2e7e) (cdadr . td2e7d) (cdaar . td2e7c) (caddr . td2e7b) (cadar . td2e7a) (caadr . td2e79) (caaar . td2e78) (cddr . td2e77) (cdar . td2e76) (cadr . td2e75) (caar . td2e74) (cdr . td2e73) (car . td2e72) (boolean? . td2e71) (boolean=? . td2e70) (atan . td2e6f) (assertion-violation . td2e6e) (assertion-error . tde54) (asin . td2e6d) (apply . td2e6c) (append . td2e6b) (angle . td2e6a) (acos . td2e69) (abs . td2e68) (/ . td2e67) (* . td2e66) (- . td2e65) (+ . td2e64) (>= . td2e63) (> . td2e62) (= . td2e61) (<= . td2e60) (< . td2e5f) (library . td2e5e) (&no-nans . td2e5d) (&no-infinities . td2e5c) (&i/o-encoding . td2e5b) (&i/o-decoding . td2e5a) (&i/o-port . td2e59) (&i/o-file-does-not-exist . td2e58) (&i/o-file-already-exists . td2e57) (&i/o-file-is-read-only . td2e56) (&i/o-file-protection . td2e55) (&i/o-filename . td2e54) (&i/o-invalid-position . td2e53) (&i/o-write . td2e52) (&i/o-read . td2e51) (&i/o . td2e50) (&undefined . td2e4f) (&syntax . td2e4e) (&lexical . td2e4d) (&implementation-restriction . td2e4c) (&non-continuable . td2e4b) (&who . td2e4a) (&irritants . td2e49) (&assertion . td2e48) (&violation . td2e47) (&error . td2e46) (&serious . td2e45) (&warning . td2e44) (&message . td2e43) (&condition . td2e42) (define-condition-type . td2e41) (define-enumeration . td2e40) (define-record-type . td2e3f) (parent-rtd . td2e3e) (nongenerative . td2e3d) (opaque . td2e3c) (sealed . td2e3b) (protocol . td2e3a) (parent . td2e39) (immutable . td2e38) (mutable . td2e37) (fields . td2e36) (error-handling-mode . td2e35) (file-options . td2e34) (buffer-mode . td2e33) (eol-style . td2e32) (guard . td2e31) (trace-define . td2e30) (trace-lambda . td2e2f) (unsyntax-splicing . td2e2e) (unsyntax . td2e2d) (unquote-splicing . td2e2c) (unquote . td2e2b) (_ . td2e2a) (else . td2e29) (=> . td2e28) (... . td2e27) (assert . td2e26) (endianness . td2e25) (delay . td2e24) (time . td2e23) (do . td2e22) (cond . td2e21) (let* . td2e20) (let*-values . td2e1f) (let-values . td2e1e) (identifier-syntax . td2e1d) (with-syntax . td2e1c) (quasisyntax . td2e1b) (quasiquote . td2e1a) (syntax-rules . td2e19) (include . td2e18) (define-struct . td2e17) (record-constructor-descriptor . td2e16) (record-type-descriptor . td2e15) (case . td2e14) (parameterize . td2e13) (unless . td2e12) (when . td2e11) (or . td2e10) (and . td2e0f) (if . td2e0e) (let . td2e0d) (letrec* . td2e0c) (letrec . td2e0b) (type-descriptor . td2e0a) (case-lambda . td2e09) (lambda . td2e08) (syntax . td2e07) (syntax-case . td2e06) (quote . td2e05) (foreign-call . td2e04) (letrec-syntax . td2e03) (let-syntax . td2e02) (set! . td2e01) (import . td2e00) (begin . td2dff) (module . td2dfe) (define-syntax . td2dfd) (define . td2dfc)) '((td2b89 core-prim . &no-nans-rcd) (td2b87 core-prim . &no-nans-rtd) (td2b74 core-prim . &no-infinities-rcd) (td2b72 core-prim . &no-infinities-rtd) (td2b5f core-prim . &i/o-encoding-rcd) (td2b5d core-prim . &i/o-encoding-rtd) (td2b44 core-prim . &i/o-decoding-rcd) (td2b42 core-prim . &i/o-decoding-rtd) (td2b2f core-prim . &i/o-port-rcd) (td2b2d core-prim . &i/o-port-rtd) (td2b14 core-prim . &i/o-file-does-not-exist-rcd) (td2b12 core-prim . &i/o-file-does-not-exist-rtd) (td2aff core-prim . &i/o-file-already-exists-rcd) (td2afd core-prim . &i/o-file-already-exists-rtd) (td2aea core-prim . &i/o-file-is-read-only-rcd) (td2ae8 core-prim . &i/o-file-is-read-only-rtd) (td2ad5 core-prim . &i/o-file-protection-rcd) (td2ad3 core-prim . &i/o-file-protection-rtd) (td2ac0 core-prim . &i/o-filename-rcd) (td2abe core-prim . &i/o-filename-rtd) (td2aa5 core-prim . &i/o-invalid-position-rcd) (td2aa3 core-prim . &i/o-invalid-position-rtd) (td2a8a core-prim . &i/o-write-rcd) (td2a88 core-prim . &i/o-write-rtd) (td2a75 core-prim . &i/o-read-rcd) (td2a73 core-prim . &i/o-read-rtd) (td2a60 core-prim . &i/o-rcd) (td2a5e core-prim . &i/o-rtd) (td2a4b core-prim . &undefined-rcd) (td2a49 core-prim . &undefined-rtd) (td2a36 core-prim . &syntax-rcd) (td2a34 core-prim . &syntax-rtd) (td2a15 core-prim . &lexical-rcd) (td2a13 core-prim . &lexical-rtd) (td2a00 core-prim . &implementation-restriction-rcd) (td29fe core-prim . &implementation-restriction-rtd) (td29eb core-prim . &non-continuable-rcd) (td29e9 core-prim . &non-continuable-rtd) (td29d6 core-prim . &who-rcd) (td29d4 core-prim . &who-rtd) (td29bb core-prim . &irritants-rcd) (td29b9 core-prim . &irritants-rtd) (td29a0 core-prim . &assertion-rcd) (td299e core-prim . &assertion-rtd) (td298b core-prim . &violation-rcd) (td2989 core-prim . &violation-rtd) (td2976 core-prim . &error-rcd) (td2974 core-prim . &error-rtd) (td2961 core-prim . &serious-rcd) (td295f core-prim . &serious-rtd) (td294c core-prim . &warning-rcd) (td294a core-prim . &warning-rtd) (td2937 core-prim . &message-rcd) (td2935 core-prim . &message-rtd) (td28d8 core-prim . &condition-rcd) (td28d6 core-prim . &condition-rtd) (tde56 core-prim . syntax-error) (tdd7a core-prim . syntax-dispatch) (td3124 core-prim . pretty-print) (td3123 core-prim . eval-core) (td3122 core-prim . set-symbol-value!) (td3121 core-prim . symbol-value) (td3120 core-prim . gensym) (td311f core-prim . void) (td2c9a core-prim . load) (tde68 core-prim . interaction-environment) (td311e core-prim . char-ready?) (td311d core-prim . regexp?) (td311c core-prim . read-line) (td311b core-prim . gensym-prefix-set!) (td311a core-prim . ungensym) (td3119 core-prim . alist->eq-hash-table) (td3118 core-prim . assoc-ref) (td3117 core-prim . print) (td3116 core-prim . format) (td3115 core-prim . host-os) (td7b3 core-prim . library-path) (td3114 core-prim . standard-library-path) (td3113 core-prim . file-newer?) (td3112 core-prim . stat-mtime) (td3111 core-prim . write-to-file) (td3110 core-prim . file->list) (td310f core-prim . file->string) (td310e core-prim . digit->integer) (td310d core-prim . call-with-string-input-port) (td310c core-prim . call-with-string-io) (td310b core-prim . string-split) (td310a core-prim . bytevector-for-each) (td3109 core-prim . string->regexp) (td3108 core-prim . rxmatch) (td3107 core-prim . regexp-replace-all) (td3106 core-prim . hashtable-for-each) (td59e core-prim . mosh-cache-dir) (td3105 core-prim . call-process) (td3104 core-prim . local-tz-offset) (td3103 core-prim . microseconds) (td3102 core-prim . directory-list) (td3101 core-prim . set-current-directory!) (td3100 core-prim . expand-path) (td30ff core-prim . current-directory) (td30fe core-prim . %spawn) (td30fd core-prim . %waitpid) (td30fc core-prim . simple-struct-name) (td30fb core-prim . simple-struct-set!) (td30fa core-prim . simple-struct-ref) (td30f9 core-prim . make-simple-struct) (td30f8 core-prim . simple-struct?) (td30f7 core-prim . pointer-ref-c-int64) (td30f6 core-prim . pointer-ref-c-int32) (td30f5 core-prim . pointer-ref-c-int16) (td30f4 core-prim . pointer-ref-c-int8) (td30f3 core-prim . pointer-ref-c-uint64) (td30f2 core-prim . pointer-ref-c-uint32) (td30f1 core-prim . pointer-ref-c-uint16) (td30f0 core-prim . pointer-ref-c-uint8) (td30ef core-prim . pointer-set-c-uint64!) (td30ee core-prim . pointer-set-c-uint32!) (td30ed core-prim . pointer-set-c-uint16!) (td30ec core-prim . pointer-set-c-uint8!) (td30eb core-prim . pointer-set-c-int64!) (td30ea core-prim . pointer-set-c-int32!) (td30e9 core-prim . pointer-set-c-int16!) (td30e8 core-prim . pointer-set-c-int8!) (td30e7 core-prim . pointer-set-c-pointer!) (td30e6 core-prim . pointer-set-c-double!) (td30e5 core-prim . pointer-set-c-float!) (td30e4 core-prim . pointer-set-c-long-long!) (td30e3 core-prim . pointer-set-c-long!) (td30e2 core-prim . pointer-set-c-int!) (td30e1 core-prim . pointer-set-c-short!) (td30e0 core-prim . pointer-set-c-char!) (td30df core-prim . pointer-ref-c-pointer) (td30de core-prim . pointer-ref-c-double) (td30dd core-prim . pointer-ref-c-float) (td30dc core-prim . pointer-ref-c-unsigned-long-long) (td30db core-prim . pointer-ref-c-signed-long-long) (td30da core-prim . pointer-ref-c-unsigned-long) (td30d9 core-prim . pointer-ref-c-signed-long) (td30d8 core-prim . pointer-ref-c-unsigned-int) (td30d7 core-prim . pointer-ref-c-signed-int) (td30d6 core-prim . pointer-ref-c-unsigned-short) (td30d5 core-prim . pointer-ref-c-signed-short) (td30d4 core-prim . pointer-ref-c-unsigned-char) (td30d3 core-prim . pointer-ref-c-signed-char) (td30d2 core-prim . pointer->integer) (td30d1 core-prim . integer->pointer) (td30d0 core-prim . pointer?) (td30cf core-prim . shared-errno) (td30ce core-prim . %ffi-make-c-callback-trampoline) (td30cd core-prim . %ffi-free) (td30cc core-prim . %ffi-malloc) (td30cb core-prim . %ffi-supported?) (td30ca core-prim . %ffi-pointer->string) (td30c9 core-prim . %ffi-call->string-or-zero) (td30c8 core-prim . %ffi-call->double) (td30c7 core-prim . %ffi-call->void*) (td30c6 core-prim . %ffi-call->void) (td30c5 core-prim . %ffi-call->char) (td30c4 core-prim . %ffi-call->int) (td30c3 core-prim . %ffi-lookup) (td30c2 core-prim . %ffi-open) (td30c1 core-prim . %fork) (td30c0 core-prim . %pipe) (td30bf core-prim . p) (td30be core-prim . open-output-string) (td30bd core-prim . get-output-string) (td30bc core-prim . file-stat-ctime) (td30bb core-prim . file-stat-atime) (td30ba core-prim . file-stat-mtime) (td30b9 core-prim . file-size-in-bytes) (td30b8 core-prim . file-writable?) (td30b7 core-prim . file-executable?) (td30b6 core-prim . file-readable?) (td30b5 core-prim . file-regular?) (td30b4 core-prim . file-symbolic-link?) (td30b3 core-prim . file-directory?) (td30b2 core-prim . create-symbolic-link) (td30b1 core-prim . rename-file) (td30b0 core-prim . delete-directory) (td30af core-prim . create-directory) (td30ae core-prim . create-mosh-cache-dir) (td30ad core-prim . get-environment-variables) (td30ac core-prim . current-exception-handler) (td30ab core-prim . get-environment-variable) (td30aa core-prim . join-wraps) (td30a9 core-prim . id->real-label) (td30a8 core-prim . same-marks?) (td30a7 core-prim . same-marks*?) (td30a6 core-prim . get-timeofday) (td30a5 core-prim . get-command-line) (td30a4 core-prim . sys-display) (td30a3 core-prim . whereis) (td30a2 core-prim . register) (td30a1 core-prim . vm-join!) (td30a0 core-prim . vm-set-value!) (td309f core-prim . vm?) (td309e core-prim . main-vm?) (td309d core-prim . vm-eval) (td309c core-prim . vm-self) (td309b core-prim . vm-start!) (td309a core-prim . make-vm) (td3099 core-prim . mutex-try-lock!) (td3098 core-prim . mutex-unlock!) (td3097 core-prim . mutex-lock!) (td3096 core-prim . mutex?) (td3095 core-prim . make-mutex) (td3094 core-prim . condition-variable-notify-all!) (td3093 core-prim . condition-variable-notify!) (td3092 core-prim . condition-variable-wait!) (td3091 core-prim . make-condition-variable) (td3090 core-prim . mosh-executable-path) (td308f core-prim . make-file-options) (td308e core-prim . source-info) (td308d core-prim . make-compiler-instruction) (td308c core-prim . make-instruction) (td308b core-prim . set-source-info!) (td308a core-prim . bignum?) (td3089 core-prim . fast-equal?) (td3088 core-prim . fasl-read) (td3087 core-prim . fasl-write) (td3086 core-prim . time-usage) (td3085 core-prim . os-constant) (td3084 core-prim . disasm) (td59c core-prim . make-parameter) (td3083 core-prim . socket-port) (td3082 core-prim . socket-shutdown) (td3081 core-prim . socket-close) (td3080 core-prim . socket-send) (td307f core-prim . socket-recv!) (td307e core-prim . socket-recv) (td307d core-prim . make-server-socket) (td307c core-prim . make-client-socket) (td307b core-prim . socket-accept) (td307a core-prim . socket?) (td3079 core-prim . string-upcase) (td3078 core-prim . string-titlecase) (td3077 core-prim . string-normalize-nfkd) (td3076 core-prim . string-normalize-nfkc) (td3075 core-prim . string-normalize-nfd) (td3074 core-prim . string-normalize-nfc) (td3073 core-prim . string-foldcase) (td3072 core-prim . string-downcase) (td3071 core-prim . string-ci>?) (td3070 core-prim . string-ci>=?) (td306f core-prim . string-ci=?) (td306e core-prim . string-ci<?) (td306d core-prim . string-ci<=?) (td306c core-prim . char-whitespace?) (td306b core-prim . char-upper-case?) (td306a core-prim . char-title-case?) (td3069 core-prim . char-numeric?) (td3068 core-prim . char-lower-case?) (td3067 core-prim . char-general-category) (td3066 core-prim . char-upcase) (td3065 core-prim . char-titlecase) (td3064 core-prim . char-foldcase) (td3063 core-prim . char-downcase) (td3062 core-prim . char-ci>?) (td3061 core-prim . char-ci>=?) (td3060 core-prim . char-ci=?) (td305f core-prim . char-ci<?) (td305e core-prim . char-ci<=?) (td305d core-prim . char-alphabetic?) (tdba5 core-prim . make-variable-transformer) (tde5c core-prim . identifier?) (tde48 core-prim . generate-temporaries) (tde4a core-prim . free-identifier=?) (tde60 core-prim . syntax->datum) (tde5e core-prim . datum->syntax) (tde4c core-prim . bound-identifier=?) (td305c core-prim . record-type-descriptor?) (td305b core-prim . record-predicate) (td305a core-prim . record-mutator) (td3059 core-prim . record-constructor) (td3058 core-prim . record-accessor) (td3057 core-prim . make-record-type-descriptor) (td3056 core-prim . make-record-constructor-descriptor) (td3055 core-prim . record?) (td3054 core-prim . record-type-uid) (td3053 core-prim . record-type-sealed?) (td3052 core-prim . record-type-parent) (td3051 core-prim . record-type-opaque?) (td3050 core-prim . record-type-name) (td304f core-prim . record-type-generative?) (td304e core-prim . record-type-field-names) (td304d core-prim . record-rtd) (td304c core-prim . record-field-mutable?) (td304b core-prim . delete-file) (td304a core-prim . file-exists?) (td3049 core-prim . vector-sort!) (td3048 core-prim . vector-sort) (td3047 core-prim . list-sort) (td3046 core-prim . symbol-hash) (td3045 core-prim . string-ci-hash) (td3044 core-prim . string-hash) (td3043 core-prim . equal-hash) (td3042 core-prim . hashtable-equivalence-function) (td3041 core-prim . make-hashtable) (td3040 core-prim . hashtable-hash-function) (td303f core-prim . make-eqv-hashtable) (td303e core-prim . make-eq-hashtable) (td303d core-prim . hashtable?) (td303c core-prim . hashtable-update!) (td303b core-prim . hashtable-size) (td303a core-prim . hashtable-set!) (td3039 core-prim . hashtable-ref) (td3038 core-prim . hashtable-mutable?) (td3037 core-prim . hashtable-keys) (td3036 core-prim . hashtable-entries) (td3035 core-prim . hashtable-delete!) (td3034 core-prim . hashtable-copy) (td3033 core-prim . hashtable-contains?) (td3032 core-prim . hashtable-clear!) (td3031 core-prim . call-with-output-file) (td3030 core-prim . call-with-input-file) (td302f core-prim . write-char) (td302e core-prim . write) (td302d core-prim . with-output-to-file) (td302c core-prim . with-input-from-file) (td302b core-prim . read-char) (td302a core-prim . read) (td3029 core-prim . peek-char) (td3028 core-prim . open-output-file) (td3027 core-prim . open-input-file) (td3026 core-prim . newline) (td3025 core-prim . display) (td3024 core-prim . close-output-port) (td3023 core-prim . close-input-port) (td3022 core-prim . eof-object?) (td3021 core-prim . eof-object) (td3020 core-prim . current-error-port) (td301f core-prim . current-output-port) (td301e core-prim . current-input-port) (td301d core-prim . output-port?) (td301c core-prim . input-port?) (td301b core-prim . utf-8-codec) (td301a core-prim . utf-16-codec) (td3019 core-prim . transcoder-error-handling-mode) (td3018 core-prim . transcoder-eol-style) (td3017 core-prim . transcoder-codec) (td3016 core-prim . transcoded-port) (td3015 core-prim . textual-port?) (td3014 core-prim . string->bytevector) (td3013 core-prim . standard-output-port) (td3012 core-prim . standard-input-port) (td3011 core-prim . standard-error-port) (td3010 core-prim . set-port-position!) (td300f core-prim . put-u8) (td300e core-prim . put-string) (td300d core-prim . put-datum) (td300c core-prim . put-char) (td300b core-prim . put-bytevector) (td300a core-prim . port?) (td3009 core-prim . port-transcoder) (td3008 core-prim . port-position) (td3007 core-prim . port-has-set-port-position!?) (td3006 core-prim . port-has-port-position?) (td3005 core-prim . port-eof?) (td3004 core-prim . output-port-buffer-mode) (td3003 core-prim . open-string-output-port) (td3002 core-prim . open-string-input-port) (td3001 core-prim . open-file-output-port) (td3000 core-prim . open-file-input/output-port) (td2fff core-prim . open-file-input-port) (td2ffe core-prim . open-bytevector-output-port) (td2ffd core-prim . open-bytevector-input-port) (td2ffc core-prim . native-transcoder) (td2ffb core-prim . native-eol-style) (td2ffa core-prim . make-transcoder) (td2ff9 core-prim . latin-1-codec) (td2a84 core-prim . make-i/o-write-error) (td2a6f core-prim . make-i/o-read-error) (td2b25 core-prim . make-i/o-port-error) (td2a9b core-prim . make-i/o-invalid-position-error) (td2ab6 core-prim . make-i/o-filename-error) (td2acf core-prim . make-i/o-file-protection-error) (td2ae4 core-prim . make-i/o-file-is-read-only-error) (td2b0e core-prim . make-i/o-file-does-not-exist-error) (td2af9 core-prim . make-i/o-file-already-exists-error) (td2a5a core-prim . make-i/o-error) (td2b55 core-prim . make-i/o-encoding-error) (td2b3e core-prim . make-i/o-decoding-error) (td2ff8 core-prim . make-custom-textual-output-port) (td2ff7 core-prim . make-custom-textual-input/output-port) (td2ff6 core-prim . make-custom-textual-input-port) (td2ff5 core-prim . make-custom-binary-output-port) (td2ff4 core-prim . make-custom-binary-input/output-port) (td2ff3 core-prim . make-custom-binary-input-port) (td2ff2 core-prim . make-bytevector) (td2ff1 core-prim . lookahead-u8) (td2ff0 core-prim . lookahead-char) (td2a86 core-prim . i/o-write-error?) (td2a71 core-prim . i/o-read-error?) (td2b29 core-prim . i/o-port-error?) (td2a9f core-prim . i/o-invalid-position-error?) (td2aba core-prim . i/o-filename-error?) (td2ad1 core-prim . i/o-file-protection-error?) (td2ae6 core-prim . i/o-file-is-read-only-error?) (td2b10 core-prim . i/o-file-does-not-exist-error?) (td2afb core-prim . i/o-file-already-exists-error?) (td2a5c core-prim . i/o-error?) (td2aa1 core-prim . i/o-error-position) (td2b2b core-prim . i/o-error-port) (td2abc core-prim . i/o-error-filename) (td2b59 core-prim . i/o-encoding-error?) (td2b5b core-prim . i/o-encoding-error-char) (td2b40 core-prim . i/o-decoding-error?) (td2fef core-prim . get-u8) (td2fee core-prim . get-string-n!) (td2fed core-prim . get-string-n) (td2fec core-prim . get-string-all) (td2feb core-prim . get-line) (td2fea core-prim . get-datum) (td2fe9 core-prim . get-char) (td2fe8 core-prim . get-bytevector-some) (td2fe7 core-prim . get-bytevector-n!) (td2fe6 core-prim . get-bytevector-n) (td2fe5 core-prim . get-bytevector-all) (td2fe4 core-prim . flush-output-port) (td2fe3 core-prim . close-port) (tde36 core-prim . scheme-report-environment) (td2fe2 core-prim . quotient) (tde34 core-prim . null-environment) (td2fe1 core-prim . remainder) (td2fe0 core-prim . modulo) (td2fdf core-prim . inexact->exact) (td2fde core-prim . force) (td2fdd core-prim . exact->inexact) (td2fdc core-prim . make-promise) (td2fdb core-prim . exit) (td2c94 core-prim . command-line) (td2fda core-prim . string-fill!) (td2fd9 core-prim . string-set!) (td2fd8 core-prim . set-cdr!) (td2fd7 core-prim . set-car!) (td2fd6 core-prim . remove) (td2fd5 core-prim . remv) (td2fd4 core-prim . remp) (td2fd3 core-prim . remq) (td2fd2 core-prim . partition) (td2fd1 core-prim . memv) (td2fd0 core-prim . memq) (td2fcf core-prim . memp) (td2fce core-prim . member) (td2fcd core-prim . exists) (td2fcc core-prim . for-all) (td2fcb core-prim . fold-right) (td2fca core-prim . fold-left) (td2fc9 core-prim . find) (td2fc8 core-prim . filter) (td2fc7 core-prim . cons*) (td2fc6 core-prim . assv) (td2fc5 core-prim . assq) (td2fc4 core-prim . assp) (td2fc3 core-prim . assoc) (td2fc2 core-prim . call-with-string-output-port) (td2fc1 core-prim . call-with-port) (td2fc0 core-prim . call-with-bytevector-output-port) (td2fbf core-prim . bytevector->string) (td2fbe core-prim . buffer-mode?) (td2fbd core-prim . binary-port?) (td2fbc core-prim . with-exception-handler) (td2fbb core-prim . raise-continuable) (td2fba core-prim . raise) (tde3a core-prim . eval) (tde32 core-prim . environment) (td2fb9 core-prim . make-enumeration) (td2fb8 core-prim . enum-set=?) (td2fb7 core-prim . enum-set-universe) (td2fb6 core-prim . enum-set-union) (td2fb5 core-prim . enum-set-subset?) (td2fb4 core-prim . enum-set-projection) (td2fb3 core-prim . enum-set-member?) (td2fb2 core-prim . enum-set-intersection) (td2fb1 core-prim . enum-set-indexer) (td2fb0 core-prim . enum-set-difference) (td2faf core-prim . enum-set-constructor) (td2fae core-prim . enum-set-complement) (td2fad core-prim . enum-set->list) (td29d0 core-prim . who-condition?) (td2948 core-prim . warning?) (td2987 core-prim . violation?) (td2a47 core-prim . undefined-violation?) (td2a2e core-prim . syntax-violation?) (td2a32 core-prim . syntax-violation-subform) (td2a30 core-prim . syntax-violation-form) (tde5a core-prim . syntax-violation) (td2fac core-prim . simple-conditions) (td295d core-prim . serious-condition?) (td29e7 core-prim . non-continuable-violation?) (td2931 core-prim . message-condition?) (td29cc core-prim . make-who-condition) (td2946 core-prim . make-warning) (td2985 core-prim . make-violation) (td2a45 core-prim . make-undefined-violation) (td2a28 core-prim . make-syntax-violation) (td295b core-prim . make-serious-condition) (td29e5 core-prim . make-non-continuable-violation) (td292d core-prim . make-message-condition) (td2a0f core-prim . make-lexical-violation) (td29b1 core-prim . make-irritants-condition) (td29fa core-prim . make-implementation-restriction-violation) (td2970 core-prim . make-error) (td299a core-prim . make-assertion-violation) (td2a11 core-prim . lexical-violation?) (td29b5 core-prim . irritants-condition?) (td29fc core-prim . implementation-restriction-violation?) (td2972 core-prim . error?) (td29d2 core-prim . condition-who) (td2fab core-prim . condition-predicate) (td2933 core-prim . condition-message) (td29b7 core-prim . condition-irritants) (td2faa core-prim . condition-accessor) (td2fa9 core-prim . condition) (td299c core-prim . assertion-violation?) (td2fa8 core-prim . condition?) (td2fa7 core-prim . utf32->string) (td2fa6 core-prim . utf16->string) (td2fa5 core-prim . utf8->string) (td2fa4 core-prim . uint-list->bytevector) (td2fa3 core-prim . u8-list->bytevector) (td2fa2 core-prim . string->utf8) (td2fa1 core-prim . string->utf32) (td2fa0 core-prim . string->utf16) (td2f9f core-prim . sint-list->bytevector) (td2f9e core-prim . native-endianness) (td2f9d core-prim . bytevector?) (td2f9c core-prim . bytevector=?) (td2f9b core-prim . bytevector-uint-set!) (td2f9a core-prim . bytevector-uint-ref) (td2f99 core-prim . bytevector-u8-set!) (td2f98 core-prim . bytevector-u8-ref) (td2f97 core-prim . bytevector-u64-set!) (td2f96 core-prim . bytevector-u64-ref) (td2f95 core-prim . bytevector-u64-native-set!) (td2f94 core-prim . bytevector-u64-native-ref) (td2f93 core-prim . bytevector-u32-set!) (td2f92 core-prim . bytevector-u32-ref) (td2f91 core-prim . bytevector-u32-native-set!) (td2f90 core-prim . bytevector-u32-native-ref) (td2f8f core-prim . bytevector-u16-set!) (td2f8e core-prim . bytevector-u16-ref) (td2f8d core-prim . bytevector-u16-native-set!) (td2f8c core-prim . bytevector-u16-native-ref) (td2f8b core-prim . bytevector-sint-set!) (td2f8a core-prim . bytevector-sint-ref) (td2f89 core-prim . bytevector-s8-set!) (td2f88 core-prim . bytevector-s8-ref) (td2f87 core-prim . bytevector-s64-set!) (td2f86 core-prim . bytevector-s64-ref) (td2f85 core-prim . bytevector-s64-native-set!) (td2f84 core-prim . bytevector-s64-native-ref) (td2f83 core-prim . bytevector-s32-set!) (td2f82 core-prim . bytevector-s32-ref) (td2f81 core-prim . bytevector-s32-native-set!) (td2f80 core-prim . bytevector-s32-native-ref) (td2f7f core-prim . bytevector-s16-set!) (td2f7e core-prim . bytevector-s16-ref) (td2f7d core-prim . bytevector-s16-native-set!) (td2f7c core-prim . bytevector-s16-native-ref) (td2f7b core-prim . bytevector-length) (td2f7a core-prim . bytevector-ieee-single-ref) (td2f79 core-prim . bytevector-ieee-single-set!) (td2f78 core-prim . bytevector-ieee-single-native-set!) (td2f77 core-prim . bytevector-ieee-single-native-ref) (td2f76 core-prim . bytevector-ieee-double-set!) (td2f75 core-prim . bytevector-ieee-double-ref) (td2f74 core-prim . bytevector-ieee-double-native-set!) (td2f73 core-prim . bytevector-ieee-double-native-ref) (td2f72 core-prim . bytevector-fill!) (td2f71 core-prim . bytevector-copy!) (td2f70 core-prim . bytevector-copy) (td2f6f core-prim . bytevector->uint-list) (td2f6e core-prim . bytevector->u8-list) (td2f6d core-prim . bytevector->sint-list) (td2b85 core-prim . no-nans-violation?) (td2b70 core-prim . no-infinities-violation?) (td2b83 core-prim . make-no-nans-violation) (td2b6e core-prim . make-no-infinities-violation) (td2f6c core-prim . real->flonum) (td2f6b core-prim . flzero?) (td2f6a core-prim . fltruncate) (td2f69 core-prim . fltan) (td2f68 core-prim . flsqrt) (td2f67 core-prim . flsin) (td2f66 core-prim . flround) (td2f65 core-prim . flpositive?) (td2f64 core-prim . flonum?) (td2f63 core-prim . flodd?) (td2f62 core-prim . flnumerator) (td2f61 core-prim . flnegative?) (td2f60 core-prim . flnan?) (td2f5f core-prim . flmod0) (td2f5e core-prim . flmod) (td2f5d core-prim . flmin) (td2f5c core-prim . flmax) (td2f5b core-prim . fllog) (td2f5a core-prim . flinteger?) (td2f59 core-prim . flinfinite?) (td2f58 core-prim . flfloor) (td2f57 core-prim . flfinite?) (td2f56 core-prim . flexpt) (td2f55 core-prim . flexp) (td2f54 core-prim . fleven?) (td2f53 core-prim . fldiv0-and-mod0) (td2f52 core-prim . fldiv0) (td2f51 core-prim . fldiv-and-mod) (td2f50 core-prim . fldiv) (td2f4f core-prim . fldenominator) (td2f4e core-prim . flcos) (td2f4d core-prim . flceiling) (td2f4c core-prim . flatan) (td2f4b core-prim . flasin) (td2f4a core-prim . flacos) (td2f49 core-prim . flabs) (td2f48 core-prim . fl>?) (td2f47 core-prim . fl>=?) (td2f46 core-prim . fl=?) (td2f45 core-prim . fl<?) (td2f44 core-prim . fl<=?) (td2f43 core-prim . fl/) (td2f42 core-prim . fl-) (td2f41 core-prim . fl+) (td2f40 core-prim . fl*) (td2f3f core-prim . fixnum->flonum) (td2f3e core-prim . fxzero?) (td2f3d core-prim . fxxor) (td2f3c core-prim . fxrotate-bit-field) (td2f3b core-prim . fxreverse-bit-field) (td2f3a core-prim . fxpositive?) (td2f39 core-prim . fxodd?) (td2f38 core-prim . fxnot) (td2f37 core-prim . fxnegative?) (td2f36 core-prim . fxmod0) (td2f35 core-prim . fxmod) (td2f34 core-prim . fxmin) (td2f33 core-prim . fxmax) (td2f32 core-prim . fxlength) (td2f31 core-prim . fxior) (td2f30 core-prim . fxif) (td2f2f core-prim . fxfirst-bit-set) (td2f2e core-prim . fxeven?) (td2f2d core-prim . fxdiv0-and-mod0) (td2f2c core-prim . fxdiv0) (td2f2b core-prim . fxdiv-and-mod) (td2f2a core-prim . fxdiv) (td2f29 core-prim . fxcopy-bit-field) (td2f28 core-prim . fxcopy-bit) (td2f27 core-prim . fxbit-set?) (td2f26 core-prim . fxbit-field) (td2f25 core-prim . fxbit-count) (td2f24 core-prim . fxarithmetic-shift-right) (td2f23 core-prim . fxarithmetic-shift-left) (td2f22 core-prim . fxarithmetic-shift) (td2f21 core-prim . fxand) (td2f20 core-prim . fx>?) (td2f1f core-prim . fx>=?) (td2f1e core-prim . fx=?) (td2f1d core-prim . fx<?) (td2f1c core-prim . fx<=?) (td2f1b core-prim . fx-/carry) (td2f1a core-prim . fx-) (td2f19 core-prim . fx+/carry) (td2f18 core-prim . fx+) (td2f17 core-prim . fx*/carry) (td2f16 core-prim . fx*) (td2f15 core-prim . greatest-fixnum) (td2f14 core-prim . least-fixnum) (td2f13 core-prim . fixnum-width) (td2f12 core-prim . fixnum?) (td2f11 core-prim . bitwise-rotate-bit-field) (td2f10 core-prim . bitwise-reverse-bit-field) (td2f0f core-prim . bitwise-length) (td2f0e core-prim . bitwise-if) (td2f0d core-prim . bitwise-first-bit-set) (td2f0c core-prim . bitwise-copy-bit-field) (td2f0b core-prim . bitwise-copy-bit) (td2f0a core-prim . bitwise-bit-set?) (td2f09 core-prim . bitwise-bit-field) (td2f08 core-prim . bitwise-bit-count) (td2f07 core-prim . bitwise-xor) (td2f06 core-prim . bitwise-ior) (td2f05 core-prim . bitwise-and) (td2f04 core-prim . bitwise-not) (td2f03 core-prim . bitwise-arithmetic-shift-right) (td2f02 core-prim . bitwise-arithmetic-shift-left) (td2f01 core-prim . bitwise-arithmetic-shift) (td2f00 core-prim . zero?) (td2eff core-prim . vector?) (td2efe core-prim . vector-set!) (td2efd core-prim . vector-ref) (td2efc core-prim . vector-map) (td2efb core-prim . vector-length) (td2efa core-prim . vector-for-each) (td2ef9 core-prim . vector-fill!) (td2ef8 core-prim . vector->list) (td2ef7 core-prim . vector) (td2ef6 core-prim . values) (td2ef5 core-prim . truncate) (td2ef4 core-prim . tan) (td2ef3 core-prim . symbol?) (td2ef2 core-prim . symbol=?) (td2ef1 core-prim . symbol->string) (td2ef0 core-prim . substring) (td2eef core-prim . string?) (td2eee core-prim . string>?) (td2eed core-prim . string>=?) (td2eec core-prim . string=?) (td2eeb core-prim . string<?) (td2eea core-prim . string<=?) (td2ee9 core-prim . string-ref) (td2ee8 core-prim . string-length) (td2ee7 core-prim . string-for-each) (td2ee6 core-prim . string-copy) (td2ee5 core-prim . string-append) (td2ee4 core-prim . string->symbol) (td2ee3 core-prim . string->number) (td2ee2 core-prim . string->list) (td2ee1 core-prim . string) (td2ee0 core-prim . sqrt) (td2edf core-prim . sin) (td2ede core-prim . round) (td2edd core-prim . reverse) (td2edc core-prim . real?) (td2edb core-prim . real-valued?) (td2eda core-prim . real-part) (td2ed9 core-prim . rationalize) (td2ed8 core-prim . rational?) (td2ed7 core-prim . rational-valued?) (td2ed6 core-prim . procedure?) (td2ed5 core-prim . positive?) (td2ed4 core-prim . pair?) (td2ed3 core-prim . odd?) (td2ed2 core-prim . numerator) (td2ed1 core-prim . number?) (td2ed0 core-prim . number->string) (td2ecf core-prim . null?) (td2ece core-prim . not) (td2ecd core-prim . negative?) (td2ecc core-prim . nan?) (td2ecb core-prim . min) (td2eca core-prim . max) (td2ec9 core-prim . map) (td2ec8 core-prim . make-vector) (td2ec7 core-prim . make-string) (td2ec6 core-prim . make-rectangular) (td2ec5 core-prim . make-polar) (td2ec4 core-prim . magnitude) (td2ec3 core-prim . log) (td2ec2 core-prim . list?) (td2ec1 core-prim . list-tail) (td2ec0 core-prim . list-ref) (td2ebf core-prim . list->vector) (td2ebe core-prim . list->string) (td2ebd core-prim . list) (td2ebc core-prim . length) (td2ebb core-prim . lcm) (td2eba core-prim . integer?) (td2eb9 core-prim . integer-valued?) (td2eb8 core-prim . integer->char) (td2eb7 core-prim . infinite?) (td2eb6 core-prim . inexact?) (td2eb5 core-prim . inexact) (td2eb4 core-prim . imag-part) (td2eb3 core-prim . gcd) (td2eb2 core-prim . for-each) (td2eb1 core-prim . floor) (td2eb0 core-prim . finite?) (td2eaf core-prim . expt) (td2eae core-prim . exp) (td2ead core-prim . exact?) (td2eac core-prim . exact-integer-sqrt) (td2eab core-prim . exact) (td2eaa core-prim . even?) (td2ea9 core-prim . error) (td2ea8 core-prim . eqv?) (td2ea7 core-prim . equal?) (td2ea6 core-prim . eq?) (td2ea5 core-prim . dynamic-wind) (td2ea4 core-prim . div0-and-mod0) (td2ea3 core-prim . mod0) (td2ea2 core-prim . div0) (td2ea1 core-prim . div-and-mod) (td2ea0 core-prim . mod) (td2e9f core-prim . div) (td2e9e core-prim . denominator) (td2e9d core-prim . cos) (td2e9c core-prim . cons) (td2e9b core-prim . complex?) (td2e9a core-prim . char?) (td2e99 core-prim . char>?) (td2e98 core-prim . char>=?) (td2e97 core-prim . char=?) (td2e96 core-prim . char<?) (td2e95 core-prim . char<=?) (td2e94 core-prim . char->integer) (td2e93 core-prim . ceiling) (td2e92 core-prim . call-with-values) (td2e91 core-prim . call/cc) (td2e90 core-prim . call-with-current-continuation) (td2e8f core-prim . cddddr) (td2e8e core-prim . cdddar) (td2e8d core-prim . cddadr) (td2e8c core-prim . cddaar) (td2e8b core-prim . cdaddr) (td2e8a core-prim . cdadar) (td2e89 core-prim . cdaadr) (td2e88 core-prim . cdaaar) (td2e87 core-prim . cadddr) (td2e86 core-prim . caddar) (td2e85 core-prim . cadadr) (td2e84 core-prim . cadaar) (td2e83 core-prim . caaddr) (td2e82 core-prim . caadar) (td2e81 core-prim . caaadr) (td2e80 core-prim . caaaar) (td2e7f core-prim . cdddr) (td2e7e core-prim . cddar) (td2e7d core-prim . cdadr) (td2e7c core-prim . cdaar) (td2e7b core-prim . caddr) (td2e7a core-prim . cadar) (td2e79 core-prim . caadr) (td2e78 core-prim . caaar) (td2e77 core-prim . cddr) (td2e76 core-prim . cdar) (td2e75 core-prim . cadr) (td2e74 core-prim . caar) (td2e73 core-prim . cdr) (td2e72 core-prim . car) (td2e71 core-prim . boolean?) (td2e70 core-prim . boolean=?) (td2e6f core-prim . atan) (td2e6e core-prim . assertion-violation) (tde54 core-prim . assertion-error) (td2e6d core-prim . asin) (td2e6c core-prim . apply) (td2e6b core-prim . append) (td2e6a core-prim . angle) (td2e69 core-prim . acos) (td2e68 core-prim . abs) (td2e67 core-prim . /) (td2e66 core-prim . *) (td2e65 core-prim . -) (td2e64 core-prim . +) (td2e63 core-prim . >=) (td2e62 core-prim . >) (td2e61 core-prim . =) (td2e60 core-prim . <=) (td2e5f core-prim . <) (td2e5e core-prim . library) (td2e5d $core-rtd &no-nans-rtd &no-nans-rcd) (td2e5c $core-rtd &no-infinities-rtd &no-infinities-rcd) (td2e5b $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (td2e5a $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (td2e59 $core-rtd &i/o-port-rtd &i/o-port-rcd) (td2e58 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (td2e57 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (td2e56 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (td2e55 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (td2e54 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (td2e53 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (td2e52 $core-rtd &i/o-write-rtd &i/o-write-rcd) (td2e51 $core-rtd &i/o-read-rtd &i/o-read-rcd) (td2e50 $core-rtd &i/o-rtd &i/o-rcd) (td2e4f $core-rtd &undefined-rtd &undefined-rcd) (td2e4e $core-rtd &syntax-rtd &syntax-rcd) (td2e4d $core-rtd &lexical-rtd &lexical-rcd) (td2e4c $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (td2e4b $core-rtd &non-continuable-rtd &non-continuable-rcd) (td2e4a $core-rtd &who-rtd &who-rcd) (td2e49 $core-rtd &irritants-rtd &irritants-rcd) (td2e48 $core-rtd &assertion-rtd &assertion-rcd) (td2e47 $core-rtd &violation-rtd &violation-rcd) (td2e46 $core-rtd &error-rtd &error-rcd) (td2e45 $core-rtd &serious-rtd &serious-rcd) (td2e44 $core-rtd &warning-rtd &warning-rcd) (td2e43 $core-rtd &message-rtd &message-rcd) (td2e42 $core-rtd &condition-rtd &condition-rcd) (td2e41 macro . define-condition-type) (td2e40 macro . define-enumeration) (td2e3f macro . define-record-type) (td2e3e macro . parent-rtd) (td2e3d macro . nongenerative) (td2e3c macro . opaque) (td2e3b macro . sealed) (td2e3a macro . protocol) (td2e39 macro . parent) (td2e38 macro . immutable) (td2e37 macro . mutable) (td2e36 macro . fields) (td2e35 macro . error-handling-mode) (td2e34 macro . file-options) (td2e33 macro . buffer-mode) (td2e32 macro . eol-style) (td2e31 macro . guard) (td2e30 macro . trace-define) (td2e2f macro . trace-lambda) (td2e2e macro . unsyntax-splicing) (td2e2d macro . unsyntax) (td2e2c macro . unquote-splicing) (td2e2b macro . unquote) (td2e2a macro . _) (td2e29 macro . else) (td2e28 macro . =>) (td2e27 macro . ...) (td2e26 macro . assert) (td2e25 macro . endianness) (td2e24 macro . delay) (td2e23 macro . time) (td2e22 macro . do) (td2e21 macro . cond) (td2e20 macro . let*) (td2e1f macro . let*-values) (td2e1e macro . let-values) (td2e1d macro . identifier-syntax) (td2e1c macro . with-syntax) (td2e1b macro . quasisyntax) (td2e1a macro . quasiquote) (td2e19 macro . syntax-rules) (td2e18 macro . include) (td2e17 macro . define-struct) (td2e16 core-macro . record-constructor-descriptor) (td2e15 core-macro . record-type-descriptor) (td2e14 macro . case) (td2e13 macro . parameterize) (td2e12 macro . unless) (td2e11 macro . when) (td2e10 core-macro . or) (td2e0f core-macro . and) (td2e0e core-macro . if) (td2e0d core-macro . let) (td2e0c core-macro . letrec*) (td2e0b core-macro . letrec) (td2e0a core-macro . type-descriptor) (td2e09 core-macro . case-lambda) (td2e08 core-macro . lambda) (td2e07 core-macro . syntax) (td2e06 core-macro . syntax-case) (td2e05 core-macro . quote) (td2e04 core-macro . foreign-call) (td2e03 letrec-syntax) (td2e02 let-syntax) (td2e01 set!) (td2e00 import) (td2dff begin) (td2dfe module) (td2dfd define-syntax) (td2dfc define)) values values '#f '#f '#f '#f) (td988@td7d4@install-library 'td3145 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . td3124) (eval-core . td3123) (set-symbol-value! . td3122) (symbol-value . td3121) (gensym . td3120) (void . td311f)) '() values values '#f '#f '#f '#f) (td988@td7d4@install-library 'td3146 '(mosh) '() '() '() '() '((set-symbol-value! . td3122) (symbol-value . td3121) (regexp? . td311d) (read-line . td311c) (ungensym . td311a) (alist->eq-hash-table . td3119) (assoc-ref . td3118) (print . td3117) (format . td3116) (host-os . td3115) (library-path . td7b3) (standard-library-path . td3114) (file-newer? . td3113) (stat-mtime . td3112) (digit->integer . td310e) (call-with-string-input-port . td310d) (call-with-string-io . td310c) (string-split . td310b) (bytevector-for-each . td310a) (string->regexp . td3109) (rxmatch . td3108) (regexp-replace-all . td3107) (hashtable-for-each . td3106) (set-current-directory! . td3101) (expand-path . td3100) (current-directory . td30ff) (p . td30bf) (get-timeofday . td30a6) (get-command-line . td30a5) (sys-display . td30a4) (whereis . td30a3) (register . td30a2) (vm-join! . td30a1) (vm-set-value! . td30a0) (vm? . td309f) (main-vm? . td309e) (vm-eval . td309d) (vm-self . td309c) (vm-start! . td309b) (make-vm . td309a) (mutex-try-lock! . td3099) (mutex-unlock! . td3098) (mutex-lock! . td3097) (mutex? . td3096) (make-mutex . td3095) (condition-variable-notify-all! . td3094) (condition-variable-notify! . td3093) (condition-variable-wait! . td3092) (make-condition-variable . td3091) (mosh-executable-path . td3090) (make-file-options . td308f) (source-info . td308e) (make-compiler-instruction . td308d) (make-instruction . td308c) (set-source-info! . td308b) (bignum? . td308a) (fast-equal? . td3089) (fasl-read . td3088) (fasl-write . td3087) (time-usage . td3086) (os-constant . td3085) (time . td2e23) (include . td2e18)) '() values values '#f '#f '#f '#f) (td988@td7d4@install-library 'td3147 '(system) '() '() '() '() '((gensym-prefix-set! . td311b) (write-to-file . td3111) (file->list . td3110) (file->string . td310f) (mosh-cache-dir . td59e) (call-process . td3105) (local-tz-offset . td3104) (microseconds . td3103) (directory-list . td3102) (expand-path . td3100) (%spawn . td30fe) (%waitpid . td30fd) (simple-struct-name . td30fc) (simple-struct-set! . td30fb) (simple-struct-ref . td30fa) (make-simple-struct . td30f9) (simple-struct? . td30f8) (pointer-ref-c-int64 . td30f7) (pointer-ref-c-int32 . td30f6) (pointer-ref-c-int16 . td30f5) (pointer-ref-c-int8 . td30f4) (pointer-ref-c-uint64 . td30f3) (pointer-ref-c-uint32 . td30f2) (pointer-ref-c-uint16 . td30f1) (pointer-ref-c-uint8 . td30f0) (pointer-set-c-uint64! . td30ef) (pointer-set-c-uint32! . td30ee) (pointer-set-c-uint16! . td30ed) (pointer-set-c-uint8! . td30ec) (pointer-set-c-int64! . td30eb) (pointer-set-c-int32! . td30ea) (pointer-set-c-int16! . td30e9) (pointer-set-c-int8! . td30e8) (pointer-set-c-pointer! . td30e7) (pointer-set-c-double! . td30e6) (pointer-set-c-float! . td30e5) (pointer-set-c-long-long! . td30e4) (pointer-set-c-long! . td30e3) (pointer-set-c-int! . td30e2) (pointer-set-c-short! . td30e1) (pointer-set-c-char! . td30e0) (pointer-ref-c-pointer . td30df) (pointer-ref-c-double . td30de) (pointer-ref-c-float . td30dd) (pointer-ref-c-unsigned-long-long . td30dc) (pointer-ref-c-signed-long-long . td30db) (pointer-ref-c-unsigned-long . td30da) (pointer-ref-c-signed-long . td30d9) (pointer-ref-c-unsigned-int . td30d8) (pointer-ref-c-signed-int . td30d7) (pointer-ref-c-unsigned-short . td30d6) (pointer-ref-c-signed-short . td30d5) (pointer-ref-c-unsigned-char . td30d4) (pointer-ref-c-signed-char . td30d3) (pointer->integer . td30d2) (integer->pointer . td30d1) (pointer? . td30d0) (shared-errno . td30cf) (%ffi-make-c-callback-trampoline . td30ce) (%ffi-free . td30cd) (%ffi-malloc . td30cc) (%ffi-supported? . td30cb) (%ffi-pointer->string . td30ca) (%ffi-call->string-or-zero . td30c9) (%ffi-call->double . td30c8) (%ffi-call->void* . td30c7) (%ffi-call->void . td30c6) (%ffi-call->char . td30c5) (%ffi-call->int . td30c4) (%ffi-lookup . td30c3) (%ffi-open . td30c2) (%fork . td30c1) (%pipe . td30c0) (open-output-string . td30be) (get-output-string . td30bd) (file-stat-ctime . td30bc) (file-stat-atime . td30bb) (file-stat-mtime . td30ba) (file-size-in-bytes . td30b9) (file-writable? . td30b8) (file-executable? . td30b7) (file-readable? . td30b6) (file-regular? . td30b5) (file-symbolic-link? . td30b4) (file-directory? . td30b3) (create-symbolic-link . td30b2) (rename-file . td30b1) (delete-directory . td30b0) (create-directory . td30af) (create-mosh-cache-dir . td30ae) (get-environment-variables . td30ad) (current-exception-handler . td30ac) (get-environment-variable . td30ab) (join-wraps . td30aa) (id->real-label . td30a9) (same-marks? . td30a8) (same-marks*? . td30a7) (disasm . td3084) (make-parameter . td59c) (socket-port . td3083) (socket-shutdown . td3082) (socket-close . td3081) (socket-send . td3080) (socket-recv! . td307f) (socket-recv . td307e) (make-server-socket . td307d) (make-client-socket . td307c) (socket-accept . td307b) (socket? . td307a) (parameterize . td2e13)) '() values values '#f '#f '#f '#f)))
(begin (set! td2c7f@ref (unspecified)) (set! td2c81@x* (unspecified)) (set! td2c83@add-library-path! (unspecified)) (set! td2c85@parse-and-add-library-path (unspecified)) (set! td2c87@for-each-with-index (unspecified)) (set! td2c89@rpad (unspecified)) (set! td2c8b@condition-printer (unspecified)) (set! td2c8d@record->field-alist (unspecified)) (set! td2c8f@map-with-index (unspecified)) (set! td2c91@repl (unspecified)) (set! td2c93@trace-printer (unspecified)) (set! td2c95@command-line (unspecified)) (set! td2c97@local-library-path (unspecified)) (set! td2c99@load/args (unspecified)) (set! td2c9b@load (unspecified)) (set! td2c9d@ironscheme-build (unspecified)) (set! td2c9f@eval-top-level (unspecified)) (set! td2ca1@compile-system-libraries (unspecified)) (set! td2ca3@compile (unspecified)) (set! td2ca5@compile->closure (unspecified)) (set! td2ca7@pre-compile-r6rs-file (unspecified)) (set! td2ca9@load-r6rs-top-level (unspecified)) (set! td2cab@load-r6rs-top-level-sexp (unspecified)) (set! td2cad@prefix-inc (unspecified)) (set! td2caf@prefix-inc! (unspecified)) (set! td2c7f@ref (lambda (td2cea@rtd td2ceb@i td2cec@x) (let ((td2cf0@val ((record-accessor td2cea@rtd td2ceb@i) td2cec@x))) (if (symbol? td2cf0@val) (ungensym td2cf0@val) td2cf0@val)))) (set! td2de2@td2c7f@ref td2c7f@ref) (set! td2c81@x* '()) (set! td2de3@td2c81@x* td2c81@x*) (set! td2c83@add-library-path! (lambda (td2cf2@path) (td978@td7b4@library-path (append (td978@td7b4@library-path) (list td2cf2@path))))) (set! td2de4@td2c83@add-library-path! td2c83@add-library-path!) (set! td2c85@parse-and-add-library-path (lambda (td2cf4@paths td2cf5@message) (let ((td2cf9@separator '#f)) (begin (set! td2cf9@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((td2cfa@t td2cf4@paths)) (if td2cfa@t ((lambda (td2cfc@paths) (for-each (lambda (td2cfe@path) (if (file-exists? td2cfe@path) (td2c83@add-library-path! (expand-path td2cfe@path)) (format (current-error-port) td2cf5@message td2cfe@path))) (string-split td2cfc@paths td2cf9@separator))) td2cfa@t) (void))))))) (set! td2de5@td2c85@parse-and-add-library-path td2c85@parse-and-add-library-path) (set! td2c87@for-each-with-index (lambda (td2d00@proc td2d01@lst) (letrec ((td2d04@loop (lambda (td2d06@i td2d07@lst) (if (null? td2d07@lst) (if '#f '#f (void)) (begin (td2d00@proc td2d06@i (car td2d07@lst)) (td2d04@loop (+ td2d06@i '1) (cdr td2d07@lst))))))) (td2d04@loop '1 td2d01@lst)))) (set! td2de6@td2c87@for-each-with-index td2c87@for-each-with-index) (set! td2c89@rpad (lambda (td2d0a@str td2d0b@pad td2d0c@n) (let ((td2d10@rest (- td2d0c@n (string-length (format '"~a" td2d0a@str))))) (let td2d16@loop ((td2d12@rest td2d10@rest) (td2d13@ret (format '"~a" td2d0a@str))) (if (<= td2d12@rest '0) td2d13@ret (td2d16@loop (- td2d12@rest '1) (string-append td2d13@ret td2d0b@pad))))))) (set! td2de7@td2c89@rpad td2c89@rpad) (set! td2c8b@condition-printer (lambda (td2d18@e td2d19@port) (let ((td2d1d@max-condition-len '#f)) (begin (set! td2d1d@max-condition-len (apply max (map (lambda (td2d2e@c) (string-length (symbol->string (record-type-name (record-rtd td2d2e@c))))) (simple-conditions td2d18@e)))) (begin (display '" Condition components:\n" td2d19@port) (td2c87@for-each-with-index (lambda (td2d1e@i td2d1f@x) (let ((td2d22@rtd (record-rtd td2d1f@x)) (td2d23@fields-alist (td2c8d@record->field-alist td2d1f@x))) (begin (format td2d19@port '" ~d. ~a" td2d1e@i (td2c89@rpad (symbol->string (record-type-name td2d22@rtd)) '" " td2d1d@max-condition-len)) (if (null? td2d23@fields-alist) (newline td2d19@port) (void)) (let td2d2a@loop ((td2d26@first '#t) (td2d27@fields-alist td2d23@fields-alist)) (if (null? td2d27@fields-alist) '() (let ((td2d2c@field (car td2d27@fields-alist))) (begin (if (not td2d26@first) (display (td2c89@rpad '"" '" " (+ '4 td2d1d@max-condition-len)) td2d19@port) (void)) (display '"       " td2d19@port) (display (car td2d2c@field) td2d19@port) (display '": " td2d19@port) (write (cdr td2d2c@field) td2d19@port) (newline td2d19@port) (td2d2a@loop '#f (cdr td2d27@fields-alist))))))))) (simple-conditions td2d18@e))))))) (set! td2de8@td2c8b@condition-printer td2c8b@condition-printer) (set! td2c8d@record->field-alist (lambda (td2d30@r) (let ((td2d33@ref '#f)) (begin (set! td2d33@ref (lambda (td2d3e@rtd td2d3f@i td2d40@x) (let ((td2d44@val ((record-accessor td2d3e@rtd td2d3f@i) td2d40@x))) (if (symbol? td2d44@val) (ungensym td2d44@val) td2d44@val)))) (let td2d38@loop ((td2d34@ret '()) (td2d35@rtd (record-rtd td2d30@r))) (if td2d35@rtd (td2d38@loop (append td2d34@ret (td2c8f@map-with-index (lambda (td2d3a@i td2d3b@field) (cons td2d3b@field (td2d33@ref td2d35@rtd td2d3a@i td2d30@r))) (vector->list (record-type-field-names td2d35@rtd)))) (record-type-parent td2d35@rtd)) td2d34@ret)))))) (set! td2de9@td2c8d@record->field-alist td2c8d@record->field-alist) (set! td2c8f@map-with-index (lambda (td2d46@proc td2d47@lst) (let td2d50@loop ((td2d4a@i '0) (td2d4b@lst td2d47@lst) (td2d4c@ret '())) (if (null? td2d4b@lst) (reverse td2d4c@ret) (td2d50@loop (+ td2d4a@i '1) (cdr td2d4b@lst) (cons (td2d46@proc td2d4a@i (car td2d4b@lst)) td2d4c@ret)))))) (set! td2dea@td2c8f@map-with-index td2c8f@map-with-index) (set! td2c91@repl (lambda td2d52@x (let ((td2d55@rec '#f)) (begin (set! td2d55@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (td2d58@td2d56) (lambda () (with-exception-handler (lambda (td2d5a@e) ((call/cc (lambda (td2d5c@td2d57) (td2d58@td2d56 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? td2d5a@e) (td2c8b@condition-printer td2d5a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" td2d5a@e))) (td2d5c@td2d57 (lambda () (raise-continuable td2d5a@e)))))))))) (lambda () (let td2d62@loop ((td2d5e@line (get-line (current-input-port))) (td2d5f@accum '"")) (let ((td2d65@parentheses-ok? '#f) (td2d67@eval-string-print '#f)) (begin (set! td2d65@parentheses-ok? (lambda (td2d6c@text) (let td2d74@loop ((td2d6e@chars (string->list td2d6c@text)) (td2d6f@p0 '0) (td2d70@p1 '0)) (if (null? td2d6e@chars) (= '0 td2d6f@p0 td2d70@p1) (let ((td2d76@t (car td2d6e@chars))) (if (memv td2d76@t '(#\()) (td2d74@loop (cdr td2d6e@chars) (+ td2d6f@p0 '1) td2d70@p1) (if (memv td2d76@t '(#\))) (td2d74@loop (cdr td2d6e@chars) (- td2d6f@p0 '1) td2d70@p1) (if (memv td2d76@t '(#\[)) (td2d74@loop (cdr td2d6e@chars) td2d6f@p0 (+ td2d70@p1 '1)) (if (memv td2d76@t '(#\])) (td2d74@loop (cdr td2d6e@chars) td2d6f@p0 (- td2d70@p1 '1)) (td2d74@loop (cdr td2d6e@chars) td2d6f@p0 td2d70@p1)))))))))) (set! td2d67@eval-string-print (lambda (td2d6a@text) (if (not (or (string=? '"\n" td2d6a@text) (= '0 (string-length td2d6a@text)))) (write (td2c9f@eval-top-level (call-with-port (open-string-input-port td2d6a@text) read))) (void)))) (if (eof-object? td2d5e@line) (begin (td2d67@eval-string-print td2d5f@accum) (exit)) (let ((td2d68@current (string-append td2d5f@accum td2d5e@line))) (if (td2d65@parentheses-ok? td2d68@current) (td2d67@eval-string-print td2d68@current) (td2d62@loop (get-line (current-input-port)) td2d68@current))))))))))))) (newline) (td2d55@rec)))) (td2d55@rec))))) (set! td2deb@td2c91@repl td2c91@repl) (set! td2c93@trace-printer (td6be@td59d@make-parameter write)) (set! td2dec@td2c93@trace-printer td2c93@trace-printer) (set! td2c95@command-line (td6be@td59d@make-parameter (get-command-line))) (set! td2ded@td2c95@command-line td2c95@command-line) (set! td2c97@local-library-path (lambda (td2d78@filename) (td978@td7b4@library-path))) (set! td2dee@td2c97@local-library-path td2c97@local-library-path) (set! td2c99@load/args (lambda (td2d7a@filename . td2d7c@args) (begin (apply td2ca9@load-r6rs-top-level td2d7a@filename 'load td2d7c@args) (void)))) (set! td2def@td2c99@load/args td2c99@load/args) (set! td2c9b@load (lambda (td2d7e@filename) (begin (apply td2ca9@load-r6rs-top-level td2d7e@filename 'load (td2c95@command-line)) (void)))) (set! td2df0@td2c9b@load td2c9b@load) (set! td2c9d@ironscheme-build (lambda () (td2c9b@load '"ironscheme-buildscript.ss"))) (set! td2df1@td2c9d@ironscheme-build td2c9d@ironscheme-build) (set! td2c9f@eval-top-level (lambda (td2d80@x) (td28a5@tde3b@eval td2d80@x (td28bc@tde69@interaction-environment)))) (set! td2df2@td2c9f@eval-top-level td2c9f@eval-top-level) (set! td2ca1@compile-system-libraries (lambda () (td2c9f@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! td2df3@td2ca1@compile-system-libraries td2ca1@compile-system-libraries) (set! td2ca3@compile (lambda (td2d82@filename) (td2ca9@load-r6rs-top-level td2d82@filename 'compile))) (set! td2df4@td2ca3@compile td2ca3@compile) (set! td2ca5@compile->closure (lambda (td2d84@filename) (td2ca9@load-r6rs-top-level td2d84@filename 'closure))) (set! td2df5@td2ca5@compile->closure td2ca5@compile->closure) (set! td2ca7@pre-compile-r6rs-file (lambda (td2d86@filename) (td2ca9@load-r6rs-top-level td2d86@filename 'compile))) (set! td2df6@td2ca7@pre-compile-r6rs-file td2ca7@pre-compile-r6rs-file) (set! td2ca9@load-r6rs-top-level (lambda (td2d88@filename td2d89@how . td2d8c@args) (begin (td978@td7b4@library-path (td2c97@local-library-path td2d88@filename)) (let ((td2d8e@x* (with-input-from-file td2d88@filename (lambda () (let td2d90@f () (let ((td2d92@x (td6b1@td583@read-annotated))) (if (eof-object? td2d92@x) '() (cons td2d92@x (td2d90@f))))))))) (let ((td2d94@t td2d89@how)) (if (memv td2d94@t '(closure)) (td28bb@tde67@pre-compile-r6rs-top-level td2d8e@x*) (if (memv td2d94@t '(load)) (begin (td2c95@command-line (cons td2d88@filename (car td2d8c@args))) (td6bf@td59f@mosh-cache-dir (create-mosh-cache-dir)) (if (td6bf@td59f@mosh-cache-dir) (gensym-prefix-set! (td2caf@prefix-inc! (string-append (td6bf@td59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (td2d96@file) ((call/cc (lambda (td2d9a@td2d98) (lambda () (with-exception-handler (lambda (td2d9c@c) ((call/cc (lambda (td2d9e@td2d99) (td2d9a@td2d98 (lambda () (if '#t '#t (td2d9e@td2d99 (lambda () (raise-continuable td2d9c@c)))))))))) (lambda () (delete-file (string-append (td6bf@td59f@mosh-cache-dir) '"/" td2d96@file))))))))) (directory-list (td6bf@td59f@mosh-cache-dir))) (void)) (let ((td2da0@compiled (td28ba@tde65@compile-r6rs-top-level td2d8e@x*))) (begin (if (and (td6bf@td59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (td97c@td7bc@serialize-all td6b9@td593@serialize-library td715@td6ce@compile-core-expr) (void)) (td2da0@compiled)))) (if (memv td2d94@t '(compile)) (begin (td28ba@tde65@compile-r6rs-top-level td2d8e@x*) (td97c@td7bc@serialize-all td6b9@td593@serialize-library td715@td6ce@compile-core-expr)) (if '#f '#f (void)))))))))) (set! td2df7@td2ca9@load-r6rs-top-level td2ca9@load-r6rs-top-level) (set! td2cab@load-r6rs-top-level-sexp (lambda (td2da2@import-spec td2da3@thunk) (let ((td2dae@td2da7 td978@td7b4@library-path) (td2daf@td2da9 td6bf@td59f@mosh-cache-dir) (td2db0@td2dab (td2c97@local-library-path '"")) (td2db1@td2dad (create-mosh-cache-dir))) (let ((td2db6@swap (lambda () (begin (let ((td2db8@t (td2dae@td2da7))) (begin (td2dae@td2da7 td2db0@td2dab) (set! td2db0@td2dab td2db8@t))) (let ((td2dba@t (td2daf@td2da9))) (begin (td2daf@td2da9 td2db1@td2dad) (set! td2db1@td2dad td2dba@t))))))) (dynamic-wind td2db6@swap (lambda () (begin (if (td6bf@td59f@mosh-cache-dir) (gensym-prefix-set! (td2caf@prefix-inc! (string-append (td6bf@td59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((td2dc0@td2dbd td2c95@command-line) (td2dc1@td2dbf '())) (let ((td2dc4@swap (lambda () (let ((td2dc6@t (td2dc0@td2dbd))) (begin (td2dc0@td2dbd td2dc1@td2dbf) (set! td2dc1@td2dbf td2dc6@t)))))) (dynamic-wind td2dc4@swap (lambda () ((td28ba@tde65@compile-r6rs-top-level (list (cons 'import td2da2@import-spec) (list td2da3@thunk))))) td2dc4@swap))))) td2db6@swap))))) (set! td2df8@td2cab@load-r6rs-top-level-sexp td2cab@load-r6rs-top-level-sexp) (set! td2cad@prefix-inc (lambda (td2dc8@prefix-string) (let ((td2dca@prefix (symbol->string td2dc8@prefix-string))) (let ((td2dcc@len (string-length td2dca@prefix))) (let td2dd4@loop ((td2dce@i (- td2dcc@len '1)) (td2dcf@carry? '#t) (td2dd0@accum '())) (if (< td2dce@i '0) (string->symbol (list->string (if td2dcf@carry? (cons '#\a td2dd0@accum) td2dd0@accum))) (if td2dcf@carry? (let ((td2dd6@next-integer (+ '1 (char->integer (string-ref td2dca@prefix td2dce@i))))) (if (= td2dd6@next-integer '123) (td2dd4@loop (- td2dce@i '1) '#f (cons '#\A td2dd0@accum)) (if (= td2dd6@next-integer '91) (td2dd4@loop (- td2dce@i '1) '#t (cons '#\a td2dd0@accum)) (td2dd4@loop (- td2dce@i '1) '#f (cons (integer->char td2dd6@next-integer) td2dd0@accum))))) (td2dd4@loop (- td2dce@i '1) '#f (cons (string-ref td2dca@prefix td2dce@i) td2dd0@accum))))))))) (set! td2df9@td2cad@prefix-inc td2cad@prefix-inc) (set! td2caf@prefix-inc! (lambda (td2dd8@file) (begin (if (not (file-exists? td2dd8@file)) (call-with-output-file td2dd8@file (lambda (td2dda@port) (write 'd td2dda@port))) (void)) (let ((td2ddc@prefix (call-with-input-file td2dd8@file read))) (let ((td2dde@next-prefix (td2cad@prefix-inc td2ddc@prefix))) (begin (call-with-port (open-file-output-port td2dd8@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (td2de0@port) (write td2dde@next-prefix td2de0@port))) td2ddc@prefix)))))) (set! td2dfa@td2caf@prefix-inc! td2caf@prefix-inc!) (begin (td97d@td7be@current-precompiled-library-loader td6ba@td595@load-serialized-library) (set-symbol-value! 'load td2c9b@load) (set-symbol-value! 'pre-compile-r6rs-file td2ca7@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs td2c9f@eval-top-level) (set-symbol-value! 'int-env-syms td289c@tde29@interaction-environment-symbols) (set-symbol-value! 'expanded2core td714@td6cc@expanded->core) (set-symbol-value! 'trace-printer td2c93@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (td2cb0@c) (condition (td2bdc@td29e6@make-non-continuable-violation) (td2bd2@td29cd@make-who-condition 'raise) (td2b96@td292e@make-message-condition '"returned from non-continuable exception") (td2bc8@td29b2@make-irritants-condition (list td2cb0@c))))) (td2c85@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (td2c85@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (td2c83@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (td2c83@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (td2c83@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((td2cb2@prefix (lambda (td2cb4@ext td2cb5@ls) (append (map (lambda (td2cb8@x) (string-append td2cb4@ext td2cb8@x)) td2cb5@ls) td2cb5@ls)))) (td979@td7b6@library-extensions (td2cb2@prefix '".mosh" (td979@td7b6@library-extensions)))) (current-exception-handler (lambda (td2cba@c) (if (condition? td2cba@c) (td2c8b@condition-printer td2cba@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" td2cba@c)))) (if ((call/cc (lambda (td2cbe@td2cbc) (lambda () (with-exception-handler (lambda (td2cc0@c) ((call/cc (lambda (td2cc2@td2cbd) (td2cbe@td2cbc (lambda () (if '#t '#f (td2cc2@td2cbd (lambda () (raise-continuable td2cc0@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (td2cab@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (td2c95@command-line)) (let ((td2ccc@td2cc5 td2c95@command-line) (td2ccd@td2cc7 td6bf@td59f@mosh-cache-dir) (td2cce@td2cc9 '()) (td2ccf@td2ccb (create-mosh-cache-dir))) (let ((td2cd4@swap (lambda () (begin (let ((td2cd6@t (td2ccc@td2cc5))) (begin (td2ccc@td2cc5 td2cce@td2cc9) (set! td2cce@td2cc9 td2cd6@t))) (let ((td2cd8@t (td2ccd@td2cc7))) (begin (td2ccd@td2cc7 td2ccf@td2ccb) (set! td2ccf@td2ccb td2cd8@t))))))) (dynamic-wind td2cd4@swap (lambda () (begin (if (td6bf@td59f@mosh-cache-dir) (gensym-prefix-set! (td2caf@prefix-inc! (string-append (td6bf@td59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (td2c91@repl))) td2cd4@swap))) (begin (td978@td7b4@library-path (td2c97@local-library-path (car (td2c95@command-line)))) (set! td2c81@x* (with-input-from-file (car (td2c95@command-line)) (lambda () (let td2cda@f () (let ((td2cdc@x (td6b1@td583@read-annotated))) (if (eof-object? td2cdc@x) '() (cons td2cdc@x (td2cda@f)))))))) (td2c95@command-line (cons (car (td2c95@command-line)) (cdr (td2c95@command-line)))) (td6bf@td59f@mosh-cache-dir (create-mosh-cache-dir)) (if (td6bf@td59f@mosh-cache-dir) (gensym-prefix-set! (td2caf@prefix-inc! (string-append (td6bf@td59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (td2cde@file) ((call/cc (lambda (td2ce2@td2ce0) (lambda () (with-exception-handler (lambda (td2ce4@c) ((call/cc (lambda (td2ce6@td2ce1) (td2ce2@td2ce0 (lambda () (if '#t '#t (td2ce6@td2ce1 (lambda () (raise-continuable td2ce4@c)))))))))) (lambda () (delete-file (string-append (td6bf@td59f@mosh-cache-dir) '"/" td2cde@file))))))))) (directory-list (td6bf@td59f@mosh-cache-dir))) (void)) (let ((td2ce8@compiled (td28ba@tde65@compile-r6rs-top-level td2c81@x*))) (begin (if (and (td6bf@td59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (td97c@td7bc@serialize-all td6b9@td593@serialize-library td715@td6ce@compile-core-expr) (void)) (td2ce8@compiled))))))))
