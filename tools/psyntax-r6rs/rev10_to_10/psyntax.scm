;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! t57f@library-file-path->cache-path (unspecified)) (set! t581@read-annotated (unspecified)) (set! t583@annotation-stripped (unspecified)) (set! t585@annotation? (unspecified)) (set! t587@annotation-source (unspecified)) (set! t589@annotation-expression (unspecified)) (set! t58b@scm->fasl (unspecified)) (set! t58d@fasl-save (unspecified)) (set! t58f@fasl-load (unspecified)) (set! t591@serialize-library (unspecified)) (set! t593@load-serialized-library (unspecified)) (set! t595@make-record-printer (unspecified)) (set! t597@compile-core (unspecified)) (set! t599@read-library-source-file (unspecified)) (set! t59b@make-parameter (unspecified)) (set! t59d@mosh-cache-dir (unspecified)) (set! t633@file-options-spec (unspecified)) (set! t57f@library-file-path->cache-path (lambda (t634@x) (call-with-values (lambda () (open-string-output-port)) (lambda (t63a@t637 t63b@t639) (let ((t63e@extract t63b@t639) (t63f@p t63a@t637)) (let ((t643@display-hex '#f)) (begin (set! t643@display-hex (lambda (t64c@n) (if (<= '0 t64c@n '9) (display t64c@n t63f@p) (display (integer->char (+ (char->integer '#\a) (- t64c@n '10))) t63f@p)))) (begin (let t646@f ((t644@ls (string-split t634@x '#\/))) (if (not (null? t644@ls)) (begin (display '"_" t63f@p) (for-each (lambda (t648@c) (if (or (char<=? '#\a t648@c '#\z) (char<=? '#\A t648@c '#\Z) (char<=? '#\0 t648@c '#\9) (memv t648@c '(#\- #\. #\_ #\~))) (display t648@c t63f@p) (begin (display '"%" t63f@p) (let ((t64a@n (char->integer t648@c))) (begin (t643@display-hex (quotient t64a@n '16)) (t643@display-hex (remainder t64a@n '16))))))) (string->list (car t644@ls))) (t646@f (cdr t644@ls))) (void))) (t63e@extract))))))))) (set! t6ae@t57f@library-file-path->cache-path t57f@library-file-path->cache-path) (set! t581@read-annotated read) (set! t6af@t581@read-annotated t581@read-annotated) (set! t583@annotation-stripped (lambda (t64e@x) (t589@annotation-expression t64e@x))) (set! t6b0@t583@annotation-stripped t583@annotation-stripped) (set! t585@annotation? (lambda (t650@x) (source-info t650@x))) (set! t6b1@t585@annotation? t585@annotation?) (set! t587@annotation-source (lambda (t652@x) (source-info t652@x))) (set! t6b2@t587@annotation-source t587@annotation-source) (set! t589@annotation-expression (lambda (t654@x) (if (pair? t654@x) (cons (car t654@x) (cdr t654@x)) (if (procedure? t654@x) (set-source-info! t654@x '#f) t654@x)))) (set! t6b3@t589@annotation-expression t589@annotation-expression) (set! t58b@scm->fasl (lambda (t656@filename) (string-append (t59d@mosh-cache-dir) '"/" (t57f@library-file-path->cache-path t656@filename) '".mosh-fasl"))) (set! t6b4@t58b@scm->fasl t58b@scm->fasl) (set! t58d@fasl-save (lambda (t658@filename t659@obj) (call-with-port (open-file-output-port t658@filename) (lambda (t65c@port) ((symbol-value 'fasl-write!) t659@obj t65c@port))))) (set! t6b5@t58d@fasl-save t58d@fasl-save) (set! t58f@fasl-load (lambda (t65e@filename) (call-with-port (open-file-input-port t65e@filename) (symbol-value 'fasl-read!)))) (set! t6b6@t58f@fasl-load t58f@fasl-load) (set! t591@serialize-library (lambda (t660@filename t661@obj) (begin (let ((t664@expanded2core (symbol-value 'expanded2core))) (let ((t666@compile (symbol-value 'compile-w/o-halt))) (let ((t668@code t661@obj)) (let ((t66a@pivot (cddddr (cddddr t668@code)))) (let ((t66c@visit (t666@compile (t664@expanded2core (car t66a@pivot))))) (begin (set-car! t66a@pivot t66c@visit) (let ((t66e@pivot (cdr t66a@pivot))) (let ((t670@invoke (t666@compile (t664@expanded2core (car t66e@pivot))))) (set-car! t66e@pivot t670@invoke))))))))) (let ((t672@fasl-file (t58b@scm->fasl t660@filename))) (begin (if (file-exists? t672@fasl-file) (delete-file t672@fasl-file) (void)) ((call/cc (lambda (t676@t674) (lambda () (with-exception-handler (lambda (t678@c) ((call/cc (lambda (t67a@t675) (t676@t674 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " t660@filename) (if (file-exists? t672@fasl-file) (delete-file t672@fasl-file) (void)) '#f) (t67a@t675 (lambda () (raise-continuable t678@c)))))))))) (lambda () (t58d@fasl-save t672@fasl-file t661@obj)))))))))))) (set! t6b7@t591@serialize-library t591@serialize-library) (set! t593@load-serialized-library (lambda (t67c@filename t67d@obj) (and (t59d@mosh-cache-dir) (let ((t680@fasl-file (t58b@scm->fasl t67c@filename))) (if (and (file-exists? t680@fasl-file) ((symbol-value 'file-newer?) t680@fasl-file t67c@filename)) (let ((t682@expanded2core (symbol-value 'expanded2core))) (let ((t684@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((t686@code (t58f@fasl-load t680@fasl-file))) (let ((t688@pivot (cddddr (cddddr t686@code)))) (let ((t68a@visit (car t688@pivot))) (let ((t68c@visit-proc (lambda () (t684@eval-compiled-core t68a@visit)))) (begin (set-car! t688@pivot t68c@visit-proc) (let ((t68e@pivot (cdr t688@pivot))) (let ((t690@invoke (car t68e@pivot))) (begin (set-car! t68e@pivot (lambda () (t684@eval-compiled-core t690@invoke))) (apply t67d@obj t686@code))))))))))) '#f))))) (set! t6b8@t593@load-serialized-library t593@load-serialized-library) (set! t595@make-record-printer (lambda (t692@name t693@printer) (lambda t696@x (begin (display '"record printer") (for-each display t696@x))))) (set! t6b9@t595@make-record-printer t595@make-record-printer) (set! t597@compile-core (lambda t698@x (apply error 'comile-core '"not implementated" t698@x))) (set! t6ba@t597@compile-core t597@compile-core) (set! t599@read-library-source-file (lambda (t69a@file-name) (with-input-from-file t69a@file-name t581@read-annotated))) (set! t6bb@t599@read-library-source-file t599@read-library-source-file) (set! t59b@make-parameter (lambda t6aa (let ((t6ab (length t6aa))) (if (= t6ab '1) (apply (lambda (t69c@x) (t59b@make-parameter t69c@x (lambda (t69e@x) t69e@x))) t6aa) (if (= t6ab '2) (apply (lambda (t6a0@x t6a1@fender) (let ((t6a4@x (t6a1@fender t6a0@x))) (lambda t6a8 (let ((t6a9 (length t6a8))) (if (= t6a9 '0) (apply (lambda () t6a4@x) t6a8) (if (= t6a9 '1) (apply (lambda (t6a6@v) (set! t6a4@x (t6a1@fender t6a6@v))) t6a8) (error 'apply '"invalid arg count"))))))) t6aa) (error 'apply '"invalid arg count")))))) (set! t6bc@t59b@make-parameter t59b@make-parameter) (set! t59d@mosh-cache-dir (t59b@make-parameter '#f)) (set! t6bd@t59d@mosh-cache-dir t59d@mosh-cache-dir) (set! t633@file-options-spec (lambda (t6ac@x) t6ac@x)) (set! t6be@t633@file-options-spec t633@file-options-spec) (void))
(begin (set! t6c4@current-primitive-locations (unspecified)) (set! t6c6@mutable? (unspecified)) (set! t6c8@rewriter (unspecified)) (set! t6ca@expanded->core (unspecified)) (set! t6cc@compile-core-expr (unspecified)) (set! t6ce@pretty-print (unspecified)) (set! t6d0@compile-core-expr-to-port (unspecified)) (set! t6c4@current-primitive-locations (t6bc@t59b@make-parameter (lambda (t6d1@x) '#f) (lambda (t6d3@p) t6d3@p))) (set! t70f@t6c4@current-primitive-locations t6c4@current-primitive-locations) (set! t6c6@mutable? (lambda (t6d5@x) (or (pair? t6d5@x) (vector? t6d5@x) (hashtable? t6d5@x)))) (set! t710@t6c6@mutable? t6c6@mutable?) (set! t6c8@rewriter (lambda (t6d7@quote-hack?) (let ((t6da@f '#f)) (begin (set! t6da@f (lambda (t6db@x) (if (pair? t6db@x) (let ((t6dd@t (car t6db@x))) (if (memv t6dd@t '(quote)) (if (and t6d7@quote-hack? (t6c6@mutable? (cadr t6db@x))) (let ((t6df@g (gensym))) (begin (set-symbol-value! t6df@g (cadr t6db@x)) t6df@g)) t6db@x) (if (memv t6dd@t '(case-lambda)) (cons 'case-lambda (map (lambda (t6e1@x) (cons (car t6e1@x) (map t6da@f (cdr t6e1@x)))) (cdr t6db@x))) (if (memv t6dd@t '(lambda)) (cons* 'lambda (cadr t6db@x) (map t6da@f (cddr t6db@x))) (if (memv t6dd@t '(letrec)) (let ((t6e3@bindings (cadr t6db@x)) (t6e4@body* (cddr t6db@x))) (let ((t6e7@lhs* (map car t6e3@bindings)) (t6e8@rhs* (map cadr t6e3@bindings))) (cons* 'letrec (map list t6e7@lhs* (map t6da@f t6e8@rhs*)) (map t6da@f t6e4@body*)))) (if (memv t6dd@t '(letrec*)) (let ((t6eb@bindings (cadr t6db@x)) (t6ec@body* (cddr t6db@x))) (let ((t6ef@lhs* (map car t6eb@bindings)) (t6f0@rhs* (map cadr t6eb@bindings))) (cons* 'letrec* (map list t6ef@lhs* (map t6da@f t6f0@rhs*)) (map t6da@f t6ec@body*)))) (if (memv t6dd@t '(library-letrec*)) (let ((t6f3@name (cadr t6db@x)) (t6f4@x (cdr t6db@x))) (let ((t6f7@bindings (cadr t6f4@x)) (t6f8@body* (cddr t6f4@x))) (let ((t6fb@lhs* (map car t6f7@bindings)) (t6fc@lhs** (map cadr t6f7@bindings)) (t6fd@rhs* (map caddr t6f7@bindings))) (cons* 'library-letrec* t6f3@name (map list t6fb@lhs* t6fc@lhs** (map t6da@f t6fd@rhs*)) (map t6da@f t6f8@body*))))) (if (memv t6dd@t '(begin)) (cons 'begin (map t6da@f (cdr t6db@x))) (if (memv t6dd@t '(set!)) (list 'set! (cadr t6db@x) (t6da@f (caddr t6db@x))) (if (memv t6dd@t '(primitive)) (let ((t701@op (cadr t6db@x))) (let ((t703@t ((t6c4@current-primitive-locations) t701@op))) (if t703@t ((lambda (t705@loc) t705@loc) t703@t) t701@op))) (if (memv t6dd@t '(define)) t6db@x (if (list? t6db@x) (map t6da@f t6db@x) (error 'rewrite '"invalid form ~s ~s" t6db@x (list? t6db@x)))))))))))))) t6db@x))) t6da@f)))) (set! t711@t6c8@rewriter t6c8@rewriter) (set! t6ca@expanded->core (lambda (t707@x) ((t6c8@rewriter '#f) t707@x))) (set! t712@t6ca@expanded->core t6ca@expanded->core) (set! t6cc@compile-core-expr (lambda (t709@x) ((t6c8@rewriter '#f) t709@x))) (set! t713@t6cc@compile-core-expr t6cc@compile-core-expr) (set! t6ce@pretty-print write) (set! t714@t6ce@pretty-print t6ce@pretty-print) (set! t6d0@compile-core-expr-to-port (lambda (t70b@x t70c@p) (t6ce@pretty-print ((t6c8@rewriter '#f) t70b@x) t70c@p))) (set! t715@t6d0@compile-core-expr-to-port t6d0@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! t764@make-collection (unspecified)) (set! t766@current-library-collection (unspecified)) (set! t768@rp (unspecified)) (set! t772@library? (unspecified)) (set! t774@library-id (unspecified)) (set! t776@set-library-id! (unspecified)) (set! t778@library-name (unspecified)) (set! t77a@set-library-name! (unspecified)) (set! t77c@library-version (unspecified)) (set! t77e@set-library-version! (unspecified)) (set! t780@library-imp* (unspecified)) (set! t782@set-library-imp*! (unspecified)) (set! t784@library-vis* (unspecified)) (set! t786@set-library-vis*! (unspecified)) (set! t788@library-inv* (unspecified)) (set! t78a@set-library-inv*! (unspecified)) (set! t78c@library-subst (unspecified)) (set! t78e@set-library-subst! (unspecified)) (set! t790@library-env (unspecified)) (set! t792@set-library-env! (unspecified)) (set! t794@library-visit-state (unspecified)) (set! t796@set-library-visit-state! (unspecified)) (set! t798@library-invoke-state (unspecified)) (set! t79a@set-library-invoke-state! (unspecified)) (set! t79c@library-visit-code (unspecified)) (set! t79e@set-library-visit-code! (unspecified)) (set! t7a0@library-invoke-code (unspecified)) (set! t7a2@set-library-invoke-code! (unspecified)) (set! t7a4@library-visible? (unspecified)) (set! t7a6@set-library-visible?! (unspecified)) (set! t7a8@library-source-file-name (unspecified)) (set! t7aa@set-library-source-file-name! (unspecified)) (set! t7ac@dummy (unspecified)) (set! t7ae@find-dependencies (unspecified)) (set! t7b0@find-library-by (unspecified)) (set! t7b2@library-path (unspecified)) (set! t7b4@library-extensions (unspecified)) (set! t7b6@library-name->file-name (unspecified)) (set! t7b8@file-locator (unspecified)) (set! t7ba@serialize-all (unspecified)) (set! t7bc@current-precompiled-library-loader (unspecified)) (set! t7be@try-load-from-file (unspecified)) (set! t7c0@library-loader (unspecified)) (set! t7c2@current-library-expander (unspecified)) (set! t7c4@external-pending-libraries (unspecified)) (set! t7c6@find-external-library (unspecified)) (set! t7c8@find-library-by-name (unspecified)) (set! t7ca@library-exists? (unspecified)) (set! t7cc@find-library-by-spec/die (unspecified)) (set! t7ce@label->binding-table (unspecified)) (set! t7d0@install-library-record (unspecified)) (set! t7d2@install-library (unspecified)) (set! t7d4@imported-label->binding (unspecified)) (set! t7d6@invoke-library (unspecified)) (set! t7d8@visit-library (unspecified)) (set! t7da@invoke-library-by-spec (unspecified)) (set! t7dc@installed-libraries (unspecified)) (set! t7de@library-spec (unspecified)) (set! t764@make-collection (lambda () (let ((t7df@set '())) (let ((t7e2@set-cons '#f)) (begin (set! t7e2@set-cons (lambda (t7e7@x t7e8@ls) (if (memq t7e7@x t7e8@ls) t7e8@ls (cons t7e7@x t7e8@ls)))) (lambda t7e5 (let ((t7e6 (length t7e5))) (if (= t7e6 '0) (apply (lambda () t7df@set) t7e5) (if (= t7e6 '1) (apply (lambda (t7e3@x) (set! t7df@set (t7e2@set-cons t7e3@x t7df@set))) t7e5) (error 'apply '"invalid arg count")))))))))) (set! t953@t764@make-collection t764@make-collection) (set! t766@current-library-collection (t6bc@t59b@make-parameter (t764@make-collection) (lambda (t7eb@x) (begin (if (not (procedure? t7eb@x)) (assertion-violation 'current-library-collection '"not a procedure" t7eb@x) (void)) t7eb@x)))) (set! t954@t766@current-library-collection t766@current-library-collection) (set! t768@rp (t6b9@t595@make-record-printer 'library (lambda (t7ed@x t7ee@p t7ef@wr) (begin (if (not (t772@library? t7ed@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (t77c@library-version t7ed@x)) (t778@library-name t7ed@x) (append (t778@library-name t7ed@x) (list (t77c@library-version t7ed@x))))) t7ee@p))))) (set! t955@t768@rp t768@rp) (set! t772@library? (lambda (t7f3@x) (and (simple-struct? t7f3@x) (eq? (simple-struct-name t7f3@x) 'library)))) (set! t956@t772@library? t772@library?) (set! t774@library-id (lambda (t7f5@x) (simple-struct-ref t7f5@x '0))) (set! t957@t774@library-id t774@library-id) (set! t776@set-library-id! (lambda (t7f7@x t7f8@val) (simple-struct-set! t7f7@x '0 t7f8@val))) (set! t958@t776@set-library-id! t776@set-library-id!) (set! t778@library-name (lambda (t7fb@x) (simple-struct-ref t7fb@x '1))) (set! t959@t778@library-name t778@library-name) (set! t77a@set-library-name! (lambda (t7fd@x t7fe@val) (simple-struct-set! t7fd@x '1 t7fe@val))) (set! t95a@t77a@set-library-name! t77a@set-library-name!) (set! t77c@library-version (lambda (t801@x) (simple-struct-ref t801@x '2))) (set! t95b@t77c@library-version t77c@library-version) (set! t77e@set-library-version! (lambda (t803@x t804@val) (simple-struct-set! t803@x '2 t804@val))) (set! t95c@t77e@set-library-version! t77e@set-library-version!) (set! t780@library-imp* (lambda (t807@x) (simple-struct-ref t807@x '3))) (set! t95d@t780@library-imp* t780@library-imp*) (set! t782@set-library-imp*! (lambda (t809@x t80a@val) (simple-struct-set! t809@x '3 t80a@val))) (set! t95e@t782@set-library-imp*! t782@set-library-imp*!) (set! t784@library-vis* (lambda (t80d@x) (simple-struct-ref t80d@x '4))) (set! t95f@t784@library-vis* t784@library-vis*) (set! t786@set-library-vis*! (lambda (t80f@x t810@val) (simple-struct-set! t80f@x '4 t810@val))) (set! t960@t786@set-library-vis*! t786@set-library-vis*!) (set! t788@library-inv* (lambda (t813@x) (simple-struct-ref t813@x '5))) (set! t961@t788@library-inv* t788@library-inv*) (set! t78a@set-library-inv*! (lambda (t815@x t816@val) (simple-struct-set! t815@x '5 t816@val))) (set! t962@t78a@set-library-inv*! t78a@set-library-inv*!) (set! t78c@library-subst (lambda (t819@x) (simple-struct-ref t819@x '6))) (set! t963@t78c@library-subst t78c@library-subst) (set! t78e@set-library-subst! (lambda (t81b@x t81c@val) (simple-struct-set! t81b@x '6 t81c@val))) (set! t964@t78e@set-library-subst! t78e@set-library-subst!) (set! t790@library-env (lambda (t81f@x) (simple-struct-ref t81f@x '7))) (set! t965@t790@library-env t790@library-env) (set! t792@set-library-env! (lambda (t821@x t822@val) (simple-struct-set! t821@x '7 t822@val))) (set! t966@t792@set-library-env! t792@set-library-env!) (set! t794@library-visit-state (lambda (t825@x) (simple-struct-ref t825@x '8))) (set! t967@t794@library-visit-state t794@library-visit-state) (set! t796@set-library-visit-state! (lambda (t827@x t828@val) (simple-struct-set! t827@x '8 t828@val))) (set! t968@t796@set-library-visit-state! t796@set-library-visit-state!) (set! t798@library-invoke-state (lambda (t82b@x) (simple-struct-ref t82b@x '9))) (set! t969@t798@library-invoke-state t798@library-invoke-state) (set! t79a@set-library-invoke-state! (lambda (t82d@x t82e@val) (simple-struct-set! t82d@x '9 t82e@val))) (set! t96a@t79a@set-library-invoke-state! t79a@set-library-invoke-state!) (set! t79c@library-visit-code (lambda (t831@x) (simple-struct-ref t831@x '10))) (set! t96b@t79c@library-visit-code t79c@library-visit-code) (set! t79e@set-library-visit-code! (lambda (t833@x t834@val) (simple-struct-set! t833@x '10 t834@val))) (set! t96c@t79e@set-library-visit-code! t79e@set-library-visit-code!) (set! t7a0@library-invoke-code (lambda (t837@x) (simple-struct-ref t837@x '11))) (set! t96d@t7a0@library-invoke-code t7a0@library-invoke-code) (set! t7a2@set-library-invoke-code! (lambda (t839@x t83a@val) (simple-struct-set! t839@x '11 t83a@val))) (set! t96e@t7a2@set-library-invoke-code! t7a2@set-library-invoke-code!) (set! t7a4@library-visible? (lambda (t83d@x) (simple-struct-ref t83d@x '12))) (set! t96f@t7a4@library-visible? t7a4@library-visible?) (set! t7a6@set-library-visible?! (lambda (t83f@x t840@val) (simple-struct-set! t83f@x '12 t840@val))) (set! t970@t7a6@set-library-visible?! t7a6@set-library-visible?!) (set! t7a8@library-source-file-name (lambda (t843@x) (simple-struct-ref t843@x '13))) (set! t971@t7a8@library-source-file-name t7a8@library-source-file-name) (set! t7aa@set-library-source-file-name! (lambda (t845@x t846@val) (simple-struct-set! t845@x '13 t846@val))) (set! t972@t7aa@set-library-source-file-name! t7aa@set-library-source-file-name!) (set! t7ac@dummy '3) (set! t973@t7ac@dummy t7ac@dummy) (set! t7ae@find-dependencies (lambda (t849@ls) (if (null? t849@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! t974@t7ae@find-dependencies t7ae@find-dependencies) (set! t7b0@find-library-by (lambda (t84b@pred) (let t84f@f ((t84d@ls ((t766@current-library-collection)))) (if (null? t84d@ls) '#f (if (t84b@pred (car t84d@ls)) (car t84d@ls) (t84f@f (cdr t84d@ls))))))) (set! t975@t7b0@find-library-by t7b0@find-library-by) (set! t7b2@library-path (t6bc@t59b@make-parameter '(".") (lambda (t851@x) (if (and (list? t851@x) (for-all string? t851@x)) (map (lambda (t853@x) t853@x) t851@x) (assertion-violation 'library-path '"not a list of strings" t851@x))))) (set! t976@t7b2@library-path t7b2@library-path) (set! t7b4@library-extensions (t6bc@t59b@make-parameter '(".sls" ".ss" ".scm") (lambda (t855@x) (if (and (list? t855@x) (for-all string? t855@x)) (map (lambda (t857@x) t857@x) t855@x) (assertion-violation 'library-extensions '"not a list of strings" t855@x))))) (set! t977@t7b4@library-extensions t7b4@library-extensions) (set! t7b6@library-name->file-name (lambda (t859@x) (call-with-values (lambda () (open-string-output-port)) (lambda (t85f@t85c t860@t85e) (let ((t863@extract t860@t85e) (t864@p t85f@t85c)) (let ((t868@display-hex '#f)) (begin (set! t868@display-hex (lambda (t871@n) (if (<= '0 t871@n '9) (display t871@n t864@p) (display (integer->char (+ (char->integer '#\a) (- t871@n '10))) t864@p)))) (begin (let t86b@f ((t869@ls t859@x)) (if (not (null? t869@ls)) (begin (display '"/" t864@p) (for-each (lambda (t86d@c) (if (or (char<=? '#\a t86d@c '#\z) (char<=? '#\A t86d@c '#\Z) (char<=? '#\0 t86d@c '#\9) (memv t86d@c '(#\- #\. #\_ #\~))) (display t86d@c t864@p) (begin (display '"%" t864@p) (let ((t86f@n (char->integer t86d@c))) (begin (t868@display-hex (quotient t86f@n '16)) (t868@display-hex (remainder t86f@n '16))))))) (string->list (symbol->string (car t869@ls)))) (t86b@f (cdr t869@ls))) (void))) (t863@extract))))))))) (set! t978@t7b6@library-name->file-name t7b6@library-name->file-name) (set! t7b8@file-locator (t6bc@t59b@make-parameter (lambda (t873@x) (let ((t875@str (t7b6@library-name->file-name t873@x))) (let t87d@f ((t877@ls (t7b2@library-path)) (t878@exts (t7b4@library-extensions)) (t879@failed-list '())) (if (null? t877@ls) (let ((t887@t882 '#f) (t889@t884 '#f) (t88b@t883 '#f) (t88e@t881 '#f) (t890@make-library-resolution-condition '#f) (t892@t87f '#f) (t894@t880 '#f) (t896@library-resolution-condition? '#f) (t898@condition-library '#f) (t89a@condition-files '#f)) (begin (set! t887@t882 (make-record-type-descriptor '&library-resolution t2b8e@t28d5@&condition-rtd 't885 '#f '#f '#((immutable library) (immutable files)))) (set! t889@t884 '#f) (set! t88b@t883 (make-record-constructor-descriptor t887@t882 t2b8f@t28d7@&condition-rcd t889@t884)) (set! t88e@t881 (record-predicate t887@t882)) (set! t890@make-library-resolution-condition (record-constructor t88b@t883)) (set! t892@t87f (record-accessor t887@t882 '0)) (set! t894@t880 (record-accessor t887@t882 '1)) (set! t896@library-resolution-condition? (condition-predicate t887@t882)) (set! t898@condition-library (condition-accessor t887@t882 t892@t87f)) (set! t89a@condition-files (condition-accessor t887@t882 t894@t880)) (raise (condition (t2bae@t296f@make-error) (t2bd0@t29cb@make-who-condition 'expander) (t2b94@t292c@make-message-condition '"cannot locate library in library-path") (t890@make-library-resolution-condition t873@x (reverse t879@failed-list)))))) (if (null? t878@exts) (t87d@f (cdr t877@ls) (t7b4@library-extensions) t879@failed-list) (let ((t89b@name (string-append (car t877@ls) t875@str (car t878@exts)))) (if (file-exists? t89b@name) t89b@name (t87d@f t877@ls (cdr t878@exts) (cons t89b@name t879@failed-list))))))))) (lambda (t89d@f) (if (procedure? t89d@f) t89d@f (assertion-violation 'file-locator '"not a procedure" t89d@f))))) (set! t979@t7b8@file-locator t7b8@file-locator) (set! t7ba@serialize-all (lambda (t89f@serialize t8a0@compile) (let ((t8a4@library-desc '#f)) (begin (set! t8a4@library-desc (lambda (t8a7@x) (list (t774@library-id t8a7@x) (t778@library-name t8a7@x)))) (for-each (lambda (t8a5@x) (if (t7a8@library-source-file-name t8a5@x) (t89f@serialize (t7a8@library-source-file-name t8a5@x) (list (t774@library-id t8a5@x) (t778@library-name t8a5@x) (t77c@library-version t8a5@x) (map t8a4@library-desc (t780@library-imp* t8a5@x)) (map t8a4@library-desc (t784@library-vis* t8a5@x)) (map t8a4@library-desc (t788@library-inv* t8a5@x)) (t78c@library-subst t8a5@x) (t790@library-env t8a5@x) (t8a0@compile (t79c@library-visit-code t8a5@x)) (t8a0@compile (t7a0@library-invoke-code t8a5@x)) (t7a4@library-visible? t8a5@x))) (void))) ((t766@current-library-collection))))))) (set! t97a@t7ba@serialize-all t7ba@serialize-all) (set! t7bc@current-precompiled-library-loader (t6bc@t59b@make-parameter (lambda (t8a9@filename t8aa@sk) '#f))) (set! t97b@t7bc@current-precompiled-library-loader t7bc@current-precompiled-library-loader) (set! t7be@try-load-from-file (lambda (t8ad@filename) ((t7bc@current-precompiled-library-loader) t8ad@filename (lambda t8d3 (let ((t8d4 (length t8d3))) (if (= t8d4 '11) (apply (lambda (t8af@id t8b0@name t8b1@ver t8b2@imp* t8b3@vis* t8b4@inv* t8b5@exp-subst t8b6@exp-env t8b7@visit-proc t8b8@invoke-proc t8b9@visible?) (let t8c7@f ((t8c5@deps (append t8b2@imp* t8b3@vis* t8b4@inv*))) (if (null? t8c5@deps) (begin (t7d2@install-library t8af@id t8b0@name t8b1@ver t8b2@imp* t8b3@vis* t8b4@inv* t8b5@exp-subst t8b6@exp-env t8b7@visit-proc t8b8@invoke-proc '#f '#f t8b9@visible? '#f) '#t) (let ((t8c9@d (car t8c5@deps))) (let ((t8cb@label (car t8c9@d)) (t8cc@dname (cadr t8c9@d))) (let ((t8cf@l (t7c8@find-library-by-name t8cc@dname))) (if (and (t772@library? t8cf@l) (eq? t8cb@label (t774@library-id t8cf@l))) (t8c7@f (cdr t8c5@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" t8b0@name t8cc@dname t8ad@filename t8cf@l t8cb@label (t774@library-id t8cf@l)) '#f)))))))) t8d3) (if (>= t8d4 '0) (apply (lambda t8d1@others '#f) t8d3) (error 'apply '"invalid arg count")))))))) (set! t97c@t7be@try-load-from-file t7be@try-load-from-file) (set! t7c0@library-loader (t6bc@t59b@make-parameter (lambda (t8d5@x) (let ((t8d7@file-name ((t7b8@file-locator) t8d5@x))) (if (not t8d7@file-name) (assertion-violation '#f '"cannot file library" t8d5@x) (or (t7be@try-load-from-file t8d7@file-name) ((t7c2@current-library-expander) (t6bb@t599@read-library-source-file t8d7@file-name) t8d7@file-name (lambda (t8d9@name) (if (not (fast-equal? t8d9@name t8d5@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (t8df@t8dc t8e0@t8de) (let ((t8e3@e t8e0@t8de) (t8e4@p t8df@t8dc)) (begin (display '"expected to find library " t8e4@p) (write t8d5@x t8e4@p) (display '" in file " t8e4@p) (display t8d7@file-name t8e4@p) (display '", found " t8e4@p) (write t8d9@name t8e4@p) (display '" instead" t8e4@p) (t8e3@e)))))) (void)))))))) (lambda (t8e7@f) (if (procedure? t8e7@f) t8e7@f (assertion-violation 'library-locator '"not a procedure" t8e7@f))))) (set! t97d@t7c0@library-loader t7c0@library-loader) (set! t7c2@current-library-expander (t6bc@t59b@make-parameter (lambda (t8e9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (t8eb@f) (if (procedure? t8eb@f) t8eb@f (assertion-violation 'library-expander '"not a procedure" t8eb@f))))) (set! t97e@t7c2@current-library-expander t7c2@current-library-expander) (set! t7c4@external-pending-libraries (t6bc@t59b@make-parameter '())) (set! t97f@t7c4@external-pending-libraries t7c4@external-pending-libraries) (set! t7c6@find-external-library (lambda (t8ed@name) (begin (if (member t8ed@name (t7c4@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" t8ed@name) (void)) (let ((t8f3@t8f0 t7c4@external-pending-libraries) (t8f4@t8f2 (cons t8ed@name (t7c4@external-pending-libraries)))) (let ((t8f7@swap (lambda () (let ((t8f9@t (t8f3@t8f0))) (begin (t8f3@t8f0 t8f4@t8f2) (set! t8f4@t8f2 t8f9@t)))))) (dynamic-wind t8f7@swap (lambda () (begin ((t7c0@library-loader) t8ed@name) (or (t7b0@find-library-by (lambda (t8fb@x) (fast-equal? (t778@library-name t8fb@x) t8ed@name))) (assertion-violation '#f '"handling external library did not yield the correct library" t8ed@name)))) t8f7@swap)))))) (set! t980@t7c6@find-external-library t7c6@find-external-library) (set! t7c8@find-library-by-name (lambda (t8fd@name) (or (t7b0@find-library-by (lambda (t8ff@x) (fast-equal? (t778@library-name t8ff@x) t8fd@name))) (t7c6@find-external-library t8fd@name)))) (set! t981@t7c8@find-library-by-name t7c8@find-library-by-name) (set! t7ca@library-exists? (lambda (t901@name) (and (t7b0@find-library-by (lambda (t903@x) (fast-equal? (t778@library-name t903@x) t901@name))) '#t))) (set! t982@t7ca@library-exists? t7ca@library-exists?) (set! t7cc@find-library-by-spec/die (lambda (t905@spec) (let ((t907@id (car t905@spec))) (or (t7b0@find-library-by (lambda (t909@x) (eq? t907@id (t774@library-id t909@x)))) (assertion-violation '#f '"cannot find library with required spec" t905@spec))))) (set! t983@t7cc@find-library-by-spec/die t7cc@find-library-by-spec/die) (set! t7ce@label->binding-table (make-eq-hashtable)) (set! t984@t7ce@label->binding-table t7ce@label->binding-table) (set! t7d0@install-library-record (lambda (t90b@lib) (begin (let ((t90d@exp-env (t790@library-env t90b@lib))) (for-each (lambda (t90f@x) (let ((t911@label (car t90f@x)) (t912@binding (cdr t90f@x))) (let ((t915@binding (let ((t917@t (car t912@binding))) (if (memv t917@t '(global)) (cons 'global (cons t90b@lib (cdr t912@binding))) (if (memv t917@t '(global-macro)) (cons 'global-macro (cons t90b@lib (cdr t912@binding))) (if (memv t917@t '(global-macro!)) (cons 'global-macro! (cons t90b@lib (cdr t912@binding))) t912@binding)))))) (begin (if (hashtable-ref t7ce@label->binding-table t911@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" t911@label (hashtable-ref t7ce@label->binding-table t911@label '#f) t915@binding) (exit)) (void)) (hashtable-set! t7ce@label->binding-table t911@label t915@binding))))) t90d@exp-env)) ((t766@current-library-collection) t90b@lib)))) (set! t985@t7d0@install-library-record t7d0@install-library-record) (set! t7d2@install-library (lambda (t919@id t91a@name t91b@ver t91c@imp* t91d@vis* t91e@inv* t91f@exp-subst t920@exp-env t921@visit-proc t922@invoke-proc t923@visit-code t924@invoke-code t925@visible? t926@source-file-name) (let ((t935@imp-lib* (map t7cc@find-library-by-spec/die t91c@imp*)) (t936@vis-lib* (map t7cc@find-library-by-spec/die t91d@vis*)) (t937@inv-lib* (map t7cc@find-library-by-spec/die t91e@inv*))) (begin (if (not (and (symbol? t919@id) (list? t91a@name) (list? t91b@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" t919@id t91a@name t91b@ver) (void)) (if (t7ca@library-exists? t91a@name) (assertion-violation 'install-library '"library is already installed" t91a@name) (void)) (let ((t93b@lib (make-simple-struct 'library '15 (list t919@id t91a@name t91b@ver t935@imp-lib* t936@vis-lib* t937@inv-lib* t91f@exp-subst t920@exp-env t921@visit-proc t922@invoke-proc t923@visit-code t924@invoke-code t925@visible? t926@source-file-name)))) (t7d0@install-library-record t93b@lib)))))) (set! t986@t7d2@install-library t7d2@install-library) (set! t7d4@imported-label->binding (lambda (t93d@lab) (hashtable-ref t7ce@label->binding-table t93d@lab '#f))) (set! t987@t7d4@imported-label->binding t7d4@imported-label->binding) (set! t7d6@invoke-library (lambda (t93f@lib) (let ((t941@invoke (t798@library-invoke-state t93f@lib))) (if (procedure? t941@invoke) (begin (t79a@set-library-invoke-state! t93f@lib (lambda () (assertion-violation 'invoke '"circularity detected" t93f@lib))) (for-each t7d6@invoke-library (t788@library-inv* t93f@lib)) (t79a@set-library-invoke-state! t93f@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" t93f@lib))) (t941@invoke) (t79a@set-library-invoke-state! t93f@lib '#t)) (void))))) (set! t988@t7d6@invoke-library t7d6@invoke-library) (set! t7d8@visit-library (lambda (t943@lib) (let ((t945@visit (t794@library-visit-state t943@lib))) (if (procedure? t945@visit) (begin (t796@set-library-visit-state! t943@lib (lambda () (assertion-violation 'visit '"circularity detected" t943@lib))) (for-each t7d6@invoke-library (t784@library-vis* t943@lib)) (t796@set-library-visit-state! t943@lib (lambda () (assertion-violation 'invoke '"first visit did not return" t943@lib))) (t945@visit) (t796@set-library-visit-state! t943@lib '#t)) (void))))) (set! t989@t7d8@visit-library t7d8@visit-library) (set! t7da@invoke-library-by-spec (lambda (t947@spec) (t7d6@invoke-library (t7cc@find-library-by-spec/die t947@spec)))) (set! t98a@t7da@invoke-library-by-spec t7da@invoke-library-by-spec) (set! t7dc@installed-libraries (lambda t94f (let ((t950 (length t94f))) (if (= t950 '1) (apply (lambda (t949@all?) (let t94d@f ((t94b@ls ((t766@current-library-collection)))) (if (null? t94b@ls) '() (if (or t949@all? (t7a4@library-visible? (car t94b@ls))) (cons (car t94b@ls) (t94d@f (cdr t94b@ls))) (t94d@f (cdr t94b@ls)))))) t94f) (if (= t950 '0) (apply (lambda () (t7dc@installed-libraries '#f)) t94f) (error 'apply '"invalid arg count")))))) (set! t98b@t7dc@installed-libraries t7dc@installed-libraries) (set! t7de@library-spec (lambda (t951@x) (begin (if (not (t772@library? t951@x)) (assertion-violation 'library-spec '"not a library" t951@x) (void)) (list (t774@library-id t951@x) (t778@library-name t951@x) (t77c@library-version t951@x))))) (set! t98c@t7de@library-spec t7de@library-spec) (void))
(begin (set! t990@build-global-define (unspecified)) (set! ta01@build-lambda (unspecified)) (set! ta03@build-case-lambda (unspecified)) (set! ta31@build-sequence (unspecified)) (set! ta33@build-void (unspecified)) (set! ta35@build-letrec (unspecified)) (set! ta37@build-let (unspecified)) (set! ta39@build-named-let (unspecified)) (set! ta3b@build-letrec* (unspecified)) (set! ta3d@build-library-letrec* (unspecified)) (set! ta3f@build-receive (unspecified)) (set! t990@build-global-define (lambda (ta40@x) (ta33@build-void))) (set! tad4@t990@build-global-define t990@build-global-define) (set! ta01@build-lambda (lambda (ta42@ae ta43@vars ta44@exp) (list 'lambda ta43@vars ta44@exp))) (set! tad5@ta01@build-lambda ta01@build-lambda) (set! ta03@build-case-lambda (lambda (ta48@ae ta49@vars* ta4a@exp*) (let ((ta4f@build-error '#f) (ta51@build-pred '#f) (ta53@build-apply '#f) (ta55@expand-case-lambda '#f)) (begin (set! ta4f@build-error (lambda (ta86@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ta51@build-pred (lambda (ta6e@ae ta6f@n ta70@vars) (call-with-values (lambda () (let ta7c@f ((ta78@vars ta70@vars) (ta79@count '0)) (if (pair? ta78@vars) (ta7c@f (cdr ta78@vars) (+ ta79@count '1)) (if (null? ta78@vars) (values ta79@count '=) (values ta79@count '>=))))) (lambda (ta7e@ta75 ta7f@ta77) (let ((ta82@pred ta7f@ta77) (ta83@count ta7e@ta75)) (list (list 'primitive ta82@pred) ta6f@n (list 'quote ta83@count))))))) (set! ta53@build-apply (lambda (ta66@ae ta67@g ta68@vars ta69@exp) (list '(primitive apply) (ta01@build-lambda ta66@ae ta68@vars ta69@exp) ta67@g))) (set! ta55@expand-case-lambda (lambda (ta56@ae ta57@vars ta58@exp*) (let ((ta5c@g (gensym)) (ta5d@n (gensym))) (list 'lambda ta5c@g (ta37@build-let ta56@ae (list ta5d@n) (list (list '(primitive length) ta5c@g)) (let ta64@f ((ta60@vars* ta49@vars*) (ta61@exp* ta58@exp*)) (if (null? ta60@vars*) (ta4f@build-error ta56@ae) (list 'if (ta51@build-pred ta56@ae ta5d@n (car ta60@vars*)) (ta53@build-apply ta56@ae ta5c@g (car ta60@vars*) (car ta61@exp*)) (ta64@f (cdr ta60@vars*) (cdr ta61@exp*)))))))))) (if (= (length ta4a@exp*) '1) (ta01@build-lambda ta48@ae (car ta49@vars*) (car ta4a@exp*)) (ta55@expand-case-lambda ta48@ae ta49@vars* ta4a@exp*)))))) (set! tad6@ta03@build-case-lambda ta03@build-case-lambda) (set! ta31@build-sequence (lambda (ta88@ae ta89@exps) (let ta8e@loop ((ta8c@exps ta89@exps)) (if (null? (cdr ta8c@exps)) (car ta8c@exps) (if (equal? (car ta8c@exps) (ta33@build-void)) (ta8e@loop (cdr ta8c@exps)) (cons 'begin ta8c@exps)))))) (set! tad7@ta31@build-sequence ta31@build-sequence) (set! ta33@build-void (lambda () '((primitive void)))) (set! tad8@ta33@build-void ta33@build-void) (set! ta35@build-letrec (lambda (ta90@ae ta91@vars ta92@val-exps ta93@body-exp) (if (null? ta91@vars) ta93@body-exp (list 'letrec (map list ta91@vars ta92@val-exps) ta93@body-exp)))) (set! tad9@ta35@build-letrec ta35@build-letrec) (set! ta37@build-let (lambda (ta98@ae ta99@vars ta9a@val-exps ta9b@body-exp) (if (null? ta99@vars) ta9b@body-exp (list 'let (map list ta99@vars ta9a@val-exps) ta9b@body-exp)))) (set! tada@ta37@build-let ta37@build-let) (set! ta39@build-named-let (lambda (taa0@ae taa1@name taa2@vars taa3@val-exps taa4@body-exp) (list 'let taa1@name (map list taa2@vars taa3@val-exps) taa4@body-exp))) (set! tadb@ta39@build-named-let ta39@build-named-let) (set! ta3b@build-letrec* (lambda (taaa@ae taab@vars taac@val-exps taad@body-exp) (if (null? taab@vars) taad@body-exp (ta37@build-let taaa@ae taab@vars (map (lambda (tab2@x) (list 'quote '#f)) taab@vars) (ta31@build-sequence taaa@ae (append (map (lambda (tab4@lhs tab5@rhs) (list 'set! tab4@lhs tab5@rhs)) taab@vars taac@val-exps) (list taad@body-exp))))))) (set! tadc@ta3b@build-letrec* ta3b@build-letrec*) (set! ta3d@build-library-letrec* (lambda (tab8@ae tab9@name taba@vars tabb@locs tabc@val-exps tabd@body-exp) (cons 'begin (append (map (lambda (tac4@var) (cons 'set! (cons tac4@var '((unspecified))))) taba@vars) (append (apply append (map (lambda (tac6@var tac7@loc tac8@val-exp) (list (list 'set! tac6@var tac8@val-exp) (list 'set! tac7@loc tac6@var))) taba@vars tabb@locs tabc@val-exps)) (list tabd@body-exp)))))) (set! tadd@ta3d@build-library-letrec* ta3d@build-library-letrec*) (set! ta3f@build-receive (lambda (tacc@ae tacd@vars tace@producer tacf@body*) (begin (display '"************** in ") (cons 'receive (cons tacd@vars (cons tace@producer tacf@body*)))))) (set! tade@ta3f@build-receive ta3f@build-receive) (void))
(begin (set! taed@file-options-macro (unspecified)) (set! taef@set-cons (unspecified)) (set! taf1@set-union (unspecified)) (set! taf6@top-mark* (unspecified)) (set! taf8@top-marked? (unspecified)) (set! tafa@gen-lexical (unspecified)) (set! tafc@gen-global (unspecified)) (set! tafe@gen-label (unspecified)) (set! tb00@gen-top-level-label (unspecified)) (set! tb02@gen-define-label+loc (unspecified)) (set! tb04@gen-define-label (unspecified)) (set! tb0e@rib? (unspecified)) (set! tb10@rib-sym* (unspecified)) (set! tb12@set-rib-sym*! (unspecified)) (set! tb14@rib-mark** (unspecified)) (set! tb16@set-rib-mark**! (unspecified)) (set! tb18@rib-label* (unspecified)) (set! tb1a@set-rib-label*! (unspecified)) (set! tb1c@rib-sealed/freq (unspecified)) (set! tb1e@set-rib-sealed/freq! (unspecified)) (set! tb20@rib-cache (unspecified)) (set! tb22@set-rib-cache! (unspecified)) (set! tb24@dummy (unspecified)) (set! tb26@make-empty-rib (unspecified)) (set! tb28@extend-rib! (unspecified)) (set! tb2a@extend-rib/nc! (unspecified)) (set! tb2c@make-rib-map (unspecified)) (set! tb2e@seal-rib! (unspecified)) (set! tb30@unseal-rib! (unspecified)) (set! tb32@make-full-rib (unspecified)) (set! tb34@rp (unspecified)) (set! tb3e@stx? (unspecified)) (set! tb40@stx-expr (unspecified)) (set! tb42@set-stx-expr! (unspecified)) (set! tb44@stx-mark* (unspecified)) (set! tb46@set-stx-mark*! (unspecified)) (set! tb48@stx-subst* (unspecified)) (set! tb4a@set-stx-subst*! (unspecified)) (set! tb4c@stx-ae* (unspecified)) (set! tb4e@set-stx-ae*! (unspecified)) (set! tb50@dummy (unspecified)) (set! tb52@datum->stx (unspecified)) (set! tb54@gen-mark (unspecified)) (set! tb56@anti-mark (unspecified)) (set! tb58@anti-mark? (unspecified)) (set! tb5a@mkstx (unspecified)) (set! tb5c@add-mark (unspecified)) (set! tb5e@add-subst (unspecified)) (set! tb60@syntax-kind? (unspecified)) (set! tb62@syntax-vector->list (unspecified)) (set! tb64@syntax-pair? (unspecified)) (set! tb66@syntax-vector? (unspecified)) (set! tb68@syntax-null? (unspecified)) (set! tb6a@syntax-list? (unspecified)) (set! tb6c@syntax-car (unspecified)) (set! tb6e@syntax-cdr (unspecified)) (set! tb70@syntax->list (unspecified)) (set! tb72@id? (unspecified)) (set! tb74@id->sym (unspecified)) (set! tb76@bound-id=? (unspecified)) (set! tb78@free-id=? (unspecified)) (set! tb7a@valid-bound-ids? (unspecified)) (set! tb7c@distinct-bound-ids? (unspecified)) (set! tb7e@bound-id-member? (unspecified)) (set! tb80@self-evaluating? (unspecified)) (set! tb82@strip-annotations (unspecified)) (set! tb84@strip (unspecified)) (set! tb86@stx->datum (unspecified)) (set! tb88@id->label (unspecified)) (set! tb8a@label->binding (unspecified)) (set! tb8c@make-binding (unspecified)) (set! tb8e@binding-type (unspecified)) (set! tb90@binding-value (unspecified)) (set! tb92@raise-unbound-error (unspecified)) (set! tb94@syntax-type (unspecified)) (set! tba2@sanitize-binding (unspecified)) (set! tba4@make-variable-transformer (unspecified)) (set! tba6@variable-transformer? (unspecified)) (set! tba8@variable-transformer-procedure (unspecified)) (set! tbaa@make-eval-transformer (unspecified)) (set! tcfb@parse-define (unspecified)) (set! tcfd@parse-define-syntax (unspecified)) (set! tcff@scheme-stx-hashtable (unspecified)) (set! td01@scheme-stx (unspecified)) (set! td03@lexical-var (unspecified)) (set! td05@lexical-mutable? (unspecified)) (set! td07@set-lexical-mutable! (unspecified)) (set! td09@add-lexical (unspecified)) (set! td0b@add-lexicals (unspecified)) (set! td0d@letrec-helper (unspecified)) (set! td0f@let-transformer (unspecified)) (set! td11@letrec-transformer (unspecified)) (set! td13@letrec*-transformer (unspecified)) (set! td15@fluid-let-syntax-transformer (unspecified)) (set! td17@type-descriptor-transformer (unspecified)) (set! td19@record-type-descriptor-transformer (unspecified)) (set! td1b@record-constructor-descriptor-transformer (unspecified)) (set! td1d@when-macro (unspecified)) (set! td1f@unless-macro (unspecified)) (set! td21@if-transformer (unspecified)) (set! td23@and-transformer (unspecified)) (set! td25@or-transformer (unspecified)) (set! td27@case-macro (unspecified)) (set! td29@quote-transformer (unspecified)) (set! td2b@case-lambda-transformer (unspecified)) (set! td2d@lambda-transformer (unspecified)) (set! td2f@bless (unspecified)) (set! td31@with-syntax-macro (unspecified)) (set! td33@invalid-fmls-error (unspecified)) (set! td35@let-macro (unspecified)) (set! td37@let-values-macro (unspecified)) (set! td39@let*-values-macro (unspecified)) (set! td3b@trace-lambda-macro (unspecified)) (set! td3d@trace-define-macro (unspecified)) (set! td3f@trace-define-syntax-macro (unspecified)) (set! td41@trace-let/rec-syntax (unspecified)) (set! td43@trace-let-syntax-macro (unspecified)) (set! td45@trace-letrec-syntax-macro (unspecified)) (set! td47@guard-macro (unspecified)) (set! td49@define-enumeration-macro (unspecified)) (set! td4b@time-macro (unspecified)) (set! td4d@delay-macro (unspecified)) (set! td4f@assert-macro (unspecified)) (set! td51@endianness-macro (unspecified)) (set! td53@identifier-syntax-macro (unspecified)) (set! td55@do-macro (unspecified)) (set! td57@let*-macro (unspecified)) (set! td59@or-macro (unspecified)) (set! td5b@and-macro (unspecified)) (set! td5d@cond-macro (unspecified)) (set! td5f@do-include (unspecified)) (set! td61@include-macro (unspecified)) (set! td63@include-into-macro (unspecified)) (set! td65@syntax-rules-macro (unspecified)) (set! td67@quasiquote-macro (unspecified)) (set! td69@quasisyntax-macro (unspecified)) (set! td6b@define-struct-macro (unspecified)) (set! td6d@define-record-type-macro (unspecified)) (set! td6f@define-condition-type-macro (unspecified)) (set! td71@incorrect-usage-macro (unspecified)) (set! td73@parameterize-macro (unspecified)) (set! td75@foreign-call-transformer (unspecified)) (set! td77@convert-pattern (unspecified)) (set! td79@syntax-dispatch (unspecified)) (set! td7b@ellipsis? (unspecified)) (set! td7d@underscore? (unspecified)) (set! td7f@verify-literals (unspecified)) (set! td81@syntax-case-transformer (unspecified)) (set! td83@ellipsis-map (unspecified)) (set! td85@syntax-transformer (unspecified)) (set! td87@core-macro-transformer (unspecified)) (set! td89@symbol-macro (unspecified)) (set! td8b@macro-transformer (unspecified)) (set! td8d@local-macro-transformer (unspecified)) (set! td8f@do-macro-call (unspecified)) (set! td91@chi-macro (unspecified)) (set! td93@chi-local-macro (unspecified)) (set! td95@chi-global-macro (unspecified)) (set! td97@chi-expr* (unspecified)) (set! td99@chi-application (unspecified)) (set! td9b@chi-expr (unspecified)) (set! td9d@chi-set! (unspecified)) (set! td9f@verify-formals (unspecified)) (set! tda1@chi-lambda-clause (unspecified)) (set! tda3@chi-lambda-clause* (unspecified)) (set! tda5@chi-defun (unspecified)) (set! tda7@chi-rhs (unspecified)) (set! tda9@expand-interaction-rhs*/init* (unspecified)) (set! tdab@chi-rhs* (unspecified)) (set! tdad@find-bound=? (unspecified)) (set! tdaf@find-dups (unspecified)) (set! tdb1@chi-internal (unspecified)) (set! tdb3@parse-module (unspecified)) (set! tdbd@module-interface? (unspecified)) (set! tdbf@module-interface-first-mark (unspecified)) (set! tdc1@set-module-interface-first-mark! (unspecified)) (set! tdc3@module-interface-exp-id-vec (unspecified)) (set! tdc5@set-module-interface-exp-id-vec! (unspecified)) (set! tdc7@module-interface-exp-lab-vec (unspecified)) (set! tdc9@set-module-interface-exp-lab-vec! (unspecified)) (set! tdcb@dummy (unspecified)) (set! tdcd@module-interface-exp-id* (unspecified)) (set! tdcf@chi-internal-module (unspecified)) (set! tdd1@chi-body* (unspecified)) (set! tdd3@expand-transformer (unspecified)) (set! tdd5@parse-exports (unspecified)) (set! tdd7@parse-library-name (unspecified)) (set! tdd9@parse-library (unspecified)) (set! tddb@parse-import-spec* (unspecified)) (set! tddd@make-top-rib (unspecified)) (set! tddf@make-collector (unspecified)) (set! tde1@inv-collector (unspecified)) (set! tde3@vis-collector (unspecified)) (set! tde5@imp-collector (unspecified)) (set! tde7@chi-library-internal (unspecified)) (set! tde9@chi-interaction-expr (unspecified)) (set! tdeb@library-body-expander (unspecified)) (set! tded@core-library-expander (unspecified)) (set! tdef@parse-top-level-program (unspecified)) (set! tdf1@top-level-expander (unspecified)) (set! tdf3@rp (unspecified)) (set! tdfd@env? (unspecified)) (set! tdff@env-names (unspecified)) (set! te01@set-env-names! (unspecified)) (set! te03@env-labels (unspecified)) (set! te05@set-env-labels! (unspecified)) (set! te07@env-itc (unspecified)) (set! te09@set-env-itc! (unspecified)) (set! te0b@dummy (unspecified)) (set! te0d@rp (unspecified)) (set! te17@interaction-env? (unspecified)) (set! te19@interaction-env-rib (unspecified)) (set! te1b@set-interaction-env-rib! (unspecified)) (set! te1d@interaction-env-r (unspecified)) (set! te1f@set-interaction-env-r! (unspecified)) (set! te21@interaction-env-locs (unspecified)) (set! te23@set-interaction-env-locs! (unspecified)) (set! te25@dummy (unspecified)) (set! te27@interaction-environment-symbols (unspecified)) (set! te29@environment-bindings (unspecified)) (set! te2b@parse-binding (unspecified)) (set! te2d@environment? (unspecified)) (set! te2f@environment-symbols (unspecified)) (set! te31@environment (unspecified)) (set! te33@null-environment (unspecified)) (set! te35@scheme-report-environment (unspecified)) (set! te37@expand (unspecified)) (set! te39@eval (unspecified)) (set! te3b@library-expander (unspecified)) (set! te3d@boot-library-expand (unspecified)) (set! te3f@rev-map-append (unspecified)) (set! te41@build-exports (unspecified)) (set! te43@make-export-subst (unspecified)) (set! te45@make-export-env/macros (unspecified)) (set! te47@generate-temporaries (unspecified)) (set! te49@free-identifier=? (unspecified)) (set! te4b@bound-identifier=? (unspecified)) (set! te4d@make-source-condition (unspecified)) (set! te4f@extract-position-condition (unspecified)) (set! te51@expression-position (unspecified)) (set! te53@assertion-error (unspecified)) (set! te55@syntax-error (unspecified)) (set! te57@syntax-violation* (unspecified)) (set! te59@syntax-violation (unspecified)) (set! te5b@identifier? (unspecified)) (set! te5d@datum->syntax (unspecified)) (set! te5f@syntax->datum (unspecified)) (set! te61@ungensym-all (unspecified)) (set! te63@compile-r6rs-top-level (unspecified)) (set! te65@pre-compile-r6rs-top-level (unspecified)) (set! te67@interaction-environment (unspecified)) (set! te69@top-level-context (unspecified)) (set! taed@file-options-macro (lambda (te6a@x) (let ((te6d@valid-option? '#f)) (begin (set! te6d@valid-option? (lambda (te76@x) (and (tb72@id? te76@x) (memq (tb74@id->sym te76@x) '(no-fail no-create no-truncate))))) (let ((te6e@t te6a@x)) (let ((te70@ls/false (td79@syntax-dispatch te6e@t '(_ . each-any)))) (if (and te70@ls/false (apply (lambda (te72@opt*) (for-all te6d@valid-option? te72@opt*)) te70@ls/false)) (apply (lambda (te74@opt*) (td2f@bless (list 'make-file-options (list 'quote te74@opt*)))) te70@ls/false) (te59@syntax-violation '#f '"invalid syntax" te6e@t)))))))) (set! t27c0@taed@file-options-macro taed@file-options-macro) (set! taef@set-cons (lambda (te78@x te79@ls) (if (memq te78@x te79@ls) te79@ls (cons te78@x te79@ls)))) (set! t27c1@taef@set-cons taef@set-cons) (set! taf1@set-union (lambda (te7c@ls1 te7d@ls2) (if (null? te7c@ls1) te7d@ls2 (if (memq (car te7c@ls1) te7d@ls2) (taf1@set-union (cdr te7c@ls1) te7d@ls2) (cons (car te7c@ls1) (taf1@set-union (cdr te7c@ls1) te7d@ls2)))))) (set! t27c2@taf1@set-union taf1@set-union) (set! taf6@top-mark* '(top)) (set! t27c3@taf6@top-mark* taf6@top-mark*) (set! taf8@top-marked? (lambda (te80@m*) (memq 'top te80@m*))) (set! t27c4@taf8@top-marked? taf8@top-marked?) (set! tafa@gen-lexical (lambda (te82@sym) (if (symbol? te82@sym) (gensym te82@sym) (if (tb3e@stx? te82@sym) (tafa@gen-lexical (tb74@id->sym te82@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" te82@sym))))) (set! t27c5@tafa@gen-lexical tafa@gen-lexical) (set! tafc@gen-global (lambda (te84@x) (tafa@gen-lexical te84@x))) (set! t27c6@tafc@gen-global tafc@gen-global) (set! tafe@gen-label (lambda (te86@_) (gensym))) (set! t27c7@tafe@gen-label tafe@gen-label) (set! tb00@gen-top-level-label (lambda (te88@id te89@rib) (let ((te8d@find '#f)) (begin (set! te8d@find (lambda (te98@sym te99@mark* te9a@sym* te9b@mark** te9c@label*) (and (pair? te9a@sym*) (if (and (eq? te98@sym (car te9a@sym*)) (same-marks? te99@mark* (car te9b@mark**))) (car te9c@label*) (te8d@find te98@sym te99@mark* (cdr te9a@sym*) (cdr te9b@mark**) (cdr te9c@label*)))))) (let ((te8e@sym (tb74@id->sym te88@id)) (te8f@mark* (tb44@stx-mark* te88@id))) (let ((te92@sym* (tb10@rib-sym* te89@rib))) (let ((te94@t (and (memq te8e@sym (tb10@rib-sym* te89@rib)) (te8d@find te8e@sym te8f@mark* te92@sym* (tb14@rib-mark** te89@rib) (tb18@rib-label* te89@rib))))) (if te94@t ((lambda (te96@label) (if (t987@t7d4@imported-label->binding te96@label) (gensym) te96@label)) te94@t) (gensym))))))))) (set! t27c8@tb00@gen-top-level-label tb00@gen-top-level-label) (set! tb02@gen-define-label+loc (lambda (tea2@id tea3@rib) (let ((tea6@t (te69@top-level-context))) (if tea6@t ((lambda (tea8@env) (let ((teaa@label (tb00@gen-top-level-label tea2@id tea3@rib)) (teab@locs (te21@interaction-env-locs tea8@env))) (values teaa@label (let ((teae@t (assq teaa@label teab@locs))) (if teae@t (cdr teae@t) (let ((teb0@loc (tafa@gen-lexical tea2@id))) (begin (te23@set-interaction-env-locs! tea8@env (cons (cons teaa@label teb0@loc) teab@locs)) teb0@loc))))))) tea6@t) (values (gensym) (tafa@gen-lexical tea2@id)))))) (set! t27c9@tb02@gen-define-label+loc tb02@gen-define-label+loc) (set! tb04@gen-define-label (lambda (teb2@id teb3@rib) (if (te69@top-level-context) (tb00@gen-top-level-label teb2@id teb3@rib) (gensym)))) (set! t27ca@tb04@gen-define-label tb04@gen-define-label) (set! tb0e@rib? (lambda (teb6@x) (and (simple-struct? teb6@x) (eq? (simple-struct-name teb6@x) 'rib)))) (set! t27cb@tb0e@rib? tb0e@rib?) (set! tb10@rib-sym* (lambda (teb8@x) (simple-struct-ref teb8@x '0))) (set! t27cc@tb10@rib-sym* tb10@rib-sym*) (set! tb12@set-rib-sym*! (lambda (teba@x tebb@val) (simple-struct-set! teba@x '0 tebb@val))) (set! t27cd@tb12@set-rib-sym*! tb12@set-rib-sym*!) (set! tb14@rib-mark** (lambda (tebe@x) (simple-struct-ref tebe@x '1))) (set! t27ce@tb14@rib-mark** tb14@rib-mark**) (set! tb16@set-rib-mark**! (lambda (tec0@x tec1@val) (simple-struct-set! tec0@x '1 tec1@val))) (set! t27cf@tb16@set-rib-mark**! tb16@set-rib-mark**!) (set! tb18@rib-label* (lambda (tec4@x) (simple-struct-ref tec4@x '2))) (set! t27d0@tb18@rib-label* tb18@rib-label*) (set! tb1a@set-rib-label*! (lambda (tec6@x tec7@val) (simple-struct-set! tec6@x '2 tec7@val))) (set! t27d1@tb1a@set-rib-label*! tb1a@set-rib-label*!) (set! tb1c@rib-sealed/freq (lambda (teca@x) (simple-struct-ref teca@x '3))) (set! t27d2@tb1c@rib-sealed/freq tb1c@rib-sealed/freq) (set! tb1e@set-rib-sealed/freq! (lambda (tecc@x tecd@val) (simple-struct-set! tecc@x '3 tecd@val))) (set! t27d3@tb1e@set-rib-sealed/freq! tb1e@set-rib-sealed/freq!) (set! tb20@rib-cache (lambda (ted0@x) (simple-struct-ref ted0@x '4))) (set! t27d4@tb20@rib-cache tb20@rib-cache) (set! tb22@set-rib-cache! (lambda (ted2@x ted3@val) (simple-struct-set! ted2@x '4 ted3@val))) (set! t27d5@tb22@set-rib-cache! tb22@set-rib-cache!) (set! tb24@dummy '3) (set! t27d6@tb24@dummy tb24@dummy) (set! tb26@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! t27d7@tb26@make-empty-rib tb26@make-empty-rib) (set! tb28@extend-rib! (lambda (ted6@rib ted7@id ted8@label) (let ((tedd@find '#f)) (begin (set! tedd@find (lambda (teea@sym teeb@mark* teec@sym* teed@mark** teee@label*) (and (pair? teec@sym*) (if (and (eq? teea@sym (car teec@sym*)) (same-marks? teeb@mark* (car teed@mark**))) teee@label* (tedd@find teea@sym teeb@mark* (cdr teec@sym*) (cdr teed@mark**) (cdr teee@label*)))))) (begin (if (tb1c@rib-sealed/freq ted6@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ted6@rib) (void)) (let ((tede@sym (tb74@id->sym ted7@id)) (tedf@mark* (tb44@stx-mark* ted7@id))) (let ((tee2@sym* (tb10@rib-sym* ted6@rib))) (let ((tee4@t (and (memq tede@sym (tb10@rib-sym* ted6@rib)) (tedd@find tede@sym tedf@mark* tee2@sym* (tb14@rib-mark** ted6@rib) (tb18@rib-label* ted6@rib))))) (if tee4@t ((lambda (tee6@p) (if (not (eq? ted8@label (car tee6@p))) (if (te69@top-level-context) (set-car! tee6@p ted8@label) (te59@syntax-violation '#f '"multiple definitions of identifier" ted7@id)) (void))) tee4@t) (begin (if (tb20@rib-cache ted6@rib) (hashtable-update! (tb20@rib-cache ted6@rib) tede@sym (lambda (tee8@e) (cons (cons tedf@mark* ted8@label) tee8@e)) '()) (void)) (tb12@set-rib-sym*! ted6@rib (cons tede@sym tee2@sym*)) (tb16@set-rib-mark**! ted6@rib (cons tedf@mark* (tb14@rib-mark** ted6@rib))) (tb1a@set-rib-label*! ted6@rib (cons ted8@label (tb18@rib-label* ted6@rib))))))))))))) (set! t27d8@tb28@extend-rib! tb28@extend-rib!) (set! tb2a@extend-rib/nc! (lambda (tef4@rib tef5@id tef6@label) (let ((tefa@sym (tb74@id->sym tef5@id)) (tefb@mark* (tb44@stx-mark* tef5@id))) (let ((tefe@sym* (tb10@rib-sym* tef4@rib))) (begin (if (tb20@rib-cache tef4@rib) (hashtable-update! (tb20@rib-cache tef4@rib) tefa@sym (lambda (tf00@e) (cons (cons tefb@mark* tef6@label) tf00@e)) '()) (void)) (tb12@set-rib-sym*! tef4@rib (cons tefa@sym tefe@sym*)) (tb16@set-rib-mark**! tef4@rib (cons tefb@mark* (tb14@rib-mark** tef4@rib))) (tb1a@set-rib-label*! tef4@rib (cons tef6@label (tb18@rib-label* tef4@rib)))))))) (set! t27d9@tb2a@extend-rib/nc! tb2a@extend-rib/nc!) (set! tb2c@make-rib-map (lambda (tf02@sym*) (let ((tf04@ht (make-eq-hashtable))) (let tf0a@f ((tf06@i '0) (tf07@sym* tf02@sym*)) (if (null? tf07@sym*) tf04@ht (begin (hashtable-update! tf04@ht (car tf07@sym*) (lambda (tf0c@x) (cons tf06@i tf0c@x)) '()) (tf0a@f (+ tf06@i '1) (cdr tf07@sym*)))))))) (set! t27da@tb2c@make-rib-map tb2c@make-rib-map) (set! tb2e@seal-rib! (lambda (tf0e@rib) (let ((tf10@sym* (tb10@rib-sym* tf0e@rib))) (if (not (null? tf10@sym*)) (begin (tb12@set-rib-sym*! tf0e@rib (list->vector tf10@sym*)) (tb16@set-rib-mark**! tf0e@rib (list->vector (tb14@rib-mark** tf0e@rib))) (tb1a@set-rib-label*! tf0e@rib (list->vector (tb18@rib-label* tf0e@rib))) (tb1e@set-rib-sealed/freq! tf0e@rib (tb2c@make-rib-map tf10@sym*))) (void))))) (set! t27db@tb2e@seal-rib! tb2e@seal-rib!) (set! tb30@unseal-rib! (lambda (tf12@rib) (if (tb1c@rib-sealed/freq tf12@rib) (begin (tb1e@set-rib-sealed/freq! tf12@rib '#f) (tb12@set-rib-sym*! tf12@rib (vector->list (tb10@rib-sym* tf12@rib))) (tb16@set-rib-mark**! tf12@rib (vector->list (tb14@rib-mark** tf12@rib))) (tb1a@set-rib-label*! tf12@rib (vector->list (tb18@rib-label* tf12@rib)))) (void)))) (set! t27dc@tb30@unseal-rib! tb30@unseal-rib!) (set! tb32@make-full-rib (lambda (tf14@id* tf15@label*) (let ((tf18@r (make-simple-struct 'rib '6 (list (map tb74@id->sym tf14@id*) (map tb44@stx-mark* tf14@id*) tf15@label* '#f '#f)))) (begin (tb2e@seal-rib! tf18@r) tf18@r)))) (set! t27dd@tb32@make-full-rib tb32@make-full-rib) (set! tb34@rp (t6b9@t595@make-record-printer 'stx (lambda (tf1a@x tf1b@p tf1c@wr) (begin (display '"#<syntax " tf1b@p) (write (tb86@stx->datum tf1a@x) tf1b@p) (let ((tf20@expr (tb40@stx-expr tf1a@x))) (if (t6b1@t585@annotation? tf20@expr) (let ((tf22@src (t6b2@t587@annotation-source tf20@expr))) (if (pair? tf22@src) (begin (display '" [" tf1b@p) (display (cdr tf22@src) tf1b@p) (display '" of " tf1b@p) (display (car tf22@src) tf1b@p) (display '"]" tf1b@p)) (void))) (void))) (display '">" tf1b@p))))) (set! t27de@tb34@rp tb34@rp) (set! tb3e@stx? (lambda (tf24@x) (and (simple-struct? tf24@x) (eq? (simple-struct-name tf24@x) 'stx)))) (set! t27df@tb3e@stx? tb3e@stx?) (set! tb40@stx-expr (lambda (tf26@x) (simple-struct-ref tf26@x '0))) (set! t27e0@tb40@stx-expr tb40@stx-expr) (set! tb42@set-stx-expr! (lambda (tf28@x tf29@val) (simple-struct-set! tf28@x '0 tf29@val))) (set! t27e1@tb42@set-stx-expr! tb42@set-stx-expr!) (set! tb44@stx-mark* (lambda (tf2c@x) (simple-struct-ref tf2c@x '1))) (set! t27e2@tb44@stx-mark* tb44@stx-mark*) (set! tb46@set-stx-mark*! (lambda (tf2e@x tf2f@val) (simple-struct-set! tf2e@x '1 tf2f@val))) (set! t27e3@tb46@set-stx-mark*! tb46@set-stx-mark*!) (set! tb48@stx-subst* (lambda (tf32@x) (simple-struct-ref tf32@x '2))) (set! t27e4@tb48@stx-subst* tb48@stx-subst*) (set! tb4a@set-stx-subst*! (lambda (tf34@x tf35@val) (simple-struct-set! tf34@x '2 tf35@val))) (set! t27e5@tb4a@set-stx-subst*! tb4a@set-stx-subst*!) (set! tb4c@stx-ae* (lambda (tf38@x) (simple-struct-ref tf38@x '3))) (set! t27e6@tb4c@stx-ae* tb4c@stx-ae*) (set! tb4e@set-stx-ae*! (lambda (tf3a@x tf3b@val) (simple-struct-set! tf3a@x '3 tf3b@val))) (set! t27e7@tb4e@set-stx-ae*! tb4e@set-stx-ae*!) (set! tb50@dummy '3) (set! t27e8@tb50@dummy tb50@dummy) (set! tb52@datum->stx (lambda (tf3e@id tf3f@datum) (make-simple-struct 'stx '5 (list tf3f@datum (tb44@stx-mark* tf3e@id) (tb48@stx-subst* tf3e@id) (tb4c@stx-ae* tf3e@id))))) (set! t27e9@tb52@datum->stx tb52@datum->stx) (set! tb54@gen-mark (lambda () (string '#\m))) (set! t27ea@tb54@gen-mark tb54@gen-mark) (set! tb56@anti-mark '#f) (set! t27eb@tb56@anti-mark tb56@anti-mark) (set! tb58@anti-mark? not) (set! t27ec@tb58@anti-mark? tb58@anti-mark?) (set! tb5a@mkstx (lambda (tf42@e tf43@m* tf44@s* tf45@ae*) (if (and (tb3e@stx? tf42@e) (not (taf8@top-marked? tf43@m*))) (call-with-values (lambda () (join-wraps tf43@m* tf44@s* tf45@ae* tf42@e)) (lambda (tf50@tf4b tf51@tf4d tf52@tf4f) (let ((tf56@ae* tf52@tf4f) (tf57@s* tf51@tf4d) (tf58@m* tf50@tf4b)) (make-simple-struct 'stx '5 (list (tb40@stx-expr tf42@e) tf58@m* tf57@s* tf56@ae*))))) (make-simple-struct 'stx '5 (list tf42@e tf43@m* tf44@s* tf45@ae*))))) (set! t27ed@tb5a@mkstx tb5a@mkstx) (set! tb5c@add-mark (lambda (tf5c@m tf5d@e tf5e@ae) (tb5a@mkstx tf5d@e (list tf5c@m) '(shift) (list tf5e@ae)))) (set! t27ee@tb5c@add-mark tb5c@add-mark) (set! tb5e@add-subst (lambda (tf62@subst tf63@e) (tb5a@mkstx tf63@e '() (list tf62@subst) '()))) (set! t27ef@tb5e@add-subst tb5e@add-subst) (set! tb60@syntax-kind? (lambda (tf66@x tf67@p?) (if (tb3e@stx? tf66@x) (tb60@syntax-kind? (tb40@stx-expr tf66@x) tf67@p?) (if (t6b1@t585@annotation? tf66@x) (tb60@syntax-kind? (t6b3@t589@annotation-expression tf66@x) tf67@p?) (tf67@p? tf66@x))))) (set! t27f0@tb60@syntax-kind? tb60@syntax-kind?) (set! tb62@syntax-vector->list (lambda (tf6a@x) (if (tb3e@stx? tf6a@x) (let ((tf6c@ls (tb62@syntax-vector->list (tb40@stx-expr tf6a@x))) (tf6d@m* (tb44@stx-mark* tf6a@x)) (tf6e@s* (tb48@stx-subst* tf6a@x)) (tf6f@ae* (tb4c@stx-ae* tf6a@x))) (map (lambda (tf74@x) (tb5a@mkstx tf74@x tf6d@m* tf6e@s* tf6f@ae*)) tf6c@ls)) (if (t6b1@t585@annotation? tf6a@x) (tb62@syntax-vector->list (t6b3@t589@annotation-expression tf6a@x)) (if (vector? tf6a@x) (vector->list tf6a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" tf6a@x)))))) (set! t27f1@tb62@syntax-vector->list tb62@syntax-vector->list) (set! tb64@syntax-pair? (lambda (tf76@x) (tb60@syntax-kind? tf76@x pair?))) (set! t27f2@tb64@syntax-pair? tb64@syntax-pair?) (set! tb66@syntax-vector? (lambda (tf78@x) (tb60@syntax-kind? tf78@x vector?))) (set! t27f3@tb66@syntax-vector? tb66@syntax-vector?) (set! tb68@syntax-null? (lambda (tf7a@x) (tb60@syntax-kind? tf7a@x null?))) (set! t27f4@tb68@syntax-null? tb68@syntax-null?) (set! tb6a@syntax-list? (lambda (tf7c@x) (or (tb68@syntax-null? tf7c@x) (and (tb64@syntax-pair? tf7c@x) (tb6a@syntax-list? (tb6e@syntax-cdr tf7c@x)))))) (set! t27f5@tb6a@syntax-list? tb6a@syntax-list?) (set! tb6c@syntax-car (lambda (tf7e@x) (if (tb3e@stx? tf7e@x) (tb5a@mkstx (tb6c@syntax-car (tb40@stx-expr tf7e@x)) (tb44@stx-mark* tf7e@x) (tb48@stx-subst* tf7e@x) (tb4c@stx-ae* tf7e@x)) (if (t6b1@t585@annotation? tf7e@x) (tb6c@syntax-car (t6b3@t589@annotation-expression tf7e@x)) (if (pair? tf7e@x) (car tf7e@x) (assertion-violation 'syntax-car '"BUG: not a pair" tf7e@x)))))) (set! t27f6@tb6c@syntax-car tb6c@syntax-car) (set! tb6e@syntax-cdr (lambda (tf80@x) (if (tb3e@stx? tf80@x) (tb5a@mkstx (tb6e@syntax-cdr (tb40@stx-expr tf80@x)) (tb44@stx-mark* tf80@x) (tb48@stx-subst* tf80@x) (tb4c@stx-ae* tf80@x)) (if (t6b1@t585@annotation? tf80@x) (tb6e@syntax-cdr (t6b3@t589@annotation-expression tf80@x)) (if (pair? tf80@x) (cdr tf80@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" tf80@x)))))) (set! t27f7@tb6e@syntax-cdr tb6e@syntax-cdr) (set! tb70@syntax->list (lambda (tf82@x) (if (tb64@syntax-pair? tf82@x) (cons (tb6c@syntax-car tf82@x) (tb70@syntax->list (tb6e@syntax-cdr tf82@x))) (if (tb68@syntax-null? tf82@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" tf82@x))))) (set! t27f8@tb70@syntax->list tb70@syntax->list) (set! tb72@id? (lambda (tf84@x) (and (tb3e@stx? tf84@x) (symbol? (tb40@stx-expr tf84@x))))) (set! t27f9@tb72@id? tb72@id?) (set! tb74@id->sym (lambda (tf86@x) (tb40@stx-expr tf86@x))) (set! t27fa@tb74@id->sym tb74@id->sym) (set! tb76@bound-id=? (lambda (tf88@x tf89@y) (and (eq? (tb74@id->sym tf88@x) (tb74@id->sym tf89@y)) (same-marks? (tb44@stx-mark* tf88@x) (tb44@stx-mark* tf89@y))))) (set! t27fb@tb76@bound-id=? tb76@bound-id=?) (set! tb78@free-id=? (lambda (tf8c@i tf8d@j) (let ((tf90@t0 (id->real-label tf8c@i)) (tf91@t1 (id->real-label tf8d@j))) (if (or tf90@t0 tf91@t1) (eq? tf90@t0 tf91@t1) (eq? (tb74@id->sym tf8c@i) (tb74@id->sym tf8d@j)))))) (set! t27fc@tb78@free-id=? tb78@free-id=?) (set! tb7a@valid-bound-ids? (lambda (tf94@id*) (and (for-all tb72@id? tf94@id*) (tb7c@distinct-bound-ids? tf94@id*)))) (set! t27fd@tb7a@valid-bound-ids? tb7a@valid-bound-ids?) (set! tb7c@distinct-bound-ids? (lambda (tf96@id*) (or (null? tf96@id*) (and (not (tb7e@bound-id-member? (car tf96@id*) (cdr tf96@id*))) (tb7c@distinct-bound-ids? (cdr tf96@id*)))))) (set! t27fe@tb7c@distinct-bound-ids? tb7c@distinct-bound-ids?) (set! tb7e@bound-id-member? (lambda (tf98@id tf99@id*) (and (pair? tf99@id*) (or (tb76@bound-id=? tf98@id (car tf99@id*)) (tb7e@bound-id-member? tf98@id (cdr tf99@id*)))))) (set! t27ff@tb7e@bound-id-member? tb7e@bound-id-member?) (set! tb80@self-evaluating? (lambda (tf9c@x) (or (number? tf9c@x) (string? tf9c@x) (char? tf9c@x) (boolean? tf9c@x) (regexp? tf9c@x) (bytevector? tf9c@x)))) (set! t2800@tb80@self-evaluating? tb80@self-evaluating?) (set! tb82@strip-annotations (lambda (tf9e@x) (if (pair? tf9e@x) (cons (tb82@strip-annotations (car tf9e@x)) (tb82@strip-annotations (cdr tf9e@x))) (if (vector? tf9e@x) (vector-map tb82@strip-annotations tf9e@x) (if (t6b1@t585@annotation? tf9e@x) (t6b0@t583@annotation-stripped tf9e@x) tf9e@x))))) (set! t2801@tb82@strip-annotations tb82@strip-annotations) (set! tb84@strip (lambda (tfa0@x tfa1@m*) (if (taf8@top-marked? tfa1@m*) (if (or (t6b1@t585@annotation? tfa0@x) (and (pair? tfa0@x) (t6b1@t585@annotation? (car tfa0@x))) (and (vector? tfa0@x) (> (vector-length tfa0@x) '0) (t6b1@t585@annotation? (vector-ref tfa0@x '0)))) (tb82@strip-annotations tfa0@x) tfa0@x) (let tfa6@f ((tfa4@x tfa0@x)) (if (tb3e@stx? tfa4@x) (tb84@strip (tb40@stx-expr tfa4@x) (tb44@stx-mark* tfa4@x)) (if (t6b1@t585@annotation? tfa4@x) (t6b0@t583@annotation-stripped tfa4@x) (if (pair? tfa4@x) (let ((tfa8@a (tfa6@f (car tfa4@x))) (tfa9@d (tfa6@f (cdr tfa4@x)))) (if (and (eq? tfa8@a (car tfa4@x)) (eq? tfa9@d (cdr tfa4@x))) tfa4@x (cons tfa8@a tfa9@d))) (if (vector? tfa4@x) (let ((tfac@old (vector->list tfa4@x))) (let ((tfae@new (map tfa6@f tfac@old))) (if (for-all eq? tfac@old tfae@new) tfa4@x (list->vector tfae@new)))) tfa4@x)))))))) (set! t2802@tb84@strip tb84@strip) (set! tb86@stx->datum (lambda (tfb0@x) (tb84@strip tfb0@x '()))) (set! t2803@tb86@stx->datum tb86@stx->datum) (set! tb88@id->label (lambda (tfb2@id) (or (id->real-label tfb2@id) (let ((tfb4@t (te69@top-level-context))) (if tfb4@t ((lambda (tfb6@env) (let ((tfb8@rib (te19@interaction-env-rib tfb6@env))) (call-with-values (lambda () (tb02@gen-define-label+loc tfb2@id tfb8@rib)) (lambda (tfbe@tfbb tfbf@tfbd) (let ((tfc2@loc_ tfbf@tfbd) (tfc3@lab tfbe@tfbb)) (begin (tb28@extend-rib! tfb8@rib tfb2@id tfc3@lab) tfc3@lab)))))) tfb4@t) '#f))))) (set! t2804@tb88@id->label tb88@id->label) (set! tb8a@label->binding (lambda (tfc6@x tfc7@r) (let ((tfca@t (t987@t7d4@imported-label->binding tfc6@x))) (if tfca@t ((lambda (tfcc@b) (if (and (pair? tfcc@b) (eq? (car tfcc@b) '$core-rtd)) (cons '$rtd (map td2f@bless (cdr tfcc@b))) (if (and (pair? tfcc@b) (eq? (car tfcc@b) 'global-rtd)) (let ((tfce@lib (cadr tfcc@b)) (tfcf@loc (cddr tfcc@b))) (cons '$rtd (symbol-value tfcf@loc))) tfcc@b))) tfca@t) (let ((tfd2@t (assq tfc6@x tfc7@r))) (if tfd2@t (cdr tfd2@t) (let ((tfd4@t (te69@top-level-context))) (if tfd4@t ((lambda (tfd6@env) (let ((tfd8@t (assq tfc6@x (te21@interaction-env-locs tfd6@env)))) (if tfd8@t ((lambda (tfda@p) (cons* 'lexical (cdr tfda@p) '#f)) tfd8@t) '(displaced-lexical . #f)))) tfd4@t) '(displaced-lexical . #f))))))))) (set! t2805@tb8a@label->binding tb8a@label->binding) (set! tb8c@make-binding cons) (set! t2806@tb8c@make-binding tb8c@make-binding) (set! tb8e@binding-type car) (set! t2807@tb8e@binding-type tb8e@binding-type) (set! tb90@binding-value cdr) (set! t2808@tb90@binding-value tb90@binding-value) (set! tb92@raise-unbound-error (lambda (tfdc@id) (te57@syntax-violation* '#f '"unbound identifier" tfdc@id (t2bfe@t2a44@make-undefined-violation)))) (set! t2809@tb92@raise-unbound-error tb92@raise-unbound-error) (set! tb94@syntax-type (lambda (tfde@e tfdf@r) (if (tb72@id? tfde@e) (let ((tfe2@id tfde@e)) (let ((tfe4@label (tb88@id->label tfe2@id))) (let ((tfe6@b (tb8a@label->binding tfe4@label tfdf@r))) (let ((tfe8@type (tb8e@binding-type tfe6@b))) (begin (if (not tfe4@label) (tb92@raise-unbound-error tfe2@id) (void)) (let ((tfea@t tfe8@type)) (if (memv tfea@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values tfe8@type (tb90@binding-value tfe6@b) tfe2@id) (values 'other '#f '#f)))))))) (if (tb64@syntax-pair? tfde@e) (let ((tfec@id (tb6c@syntax-car tfde@e))) (if (tb72@id? tfec@id) (let ((tfee@label (tb88@id->label tfec@id))) (let ((tff0@b (tb8a@label->binding tfee@label tfdf@r))) (let ((tff2@type (tb8e@binding-type tff0@b))) (begin (if (not tfee@label) (tb92@raise-unbound-error tfec@id) (void)) (let ((tff4@t tff2@type)) (if (memv tff4@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values tff2@type (tb90@binding-value tff0@b) tfec@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((tff6@d (tb86@stx->datum tfde@e))) (if (tb80@self-evaluating? tff6@d) (values 'constant tff6@d '#f) (values 'other '#f '#f))))))) (set! t280a@tb94@syntax-type tb94@syntax-type) (set! tba2@sanitize-binding (lambda (tff8@x tff9@src) (if (procedure? tff8@x) (cons* 'local-macro tff8@x tff9@src) (if (and (pair? tff8@x) (eq? (car tff8@x) 'macro!) (procedure? (cdr tff8@x))) (cons* 'local-macro! (cdr tff8@x) tff9@src) (if (and (pair? tff8@x) (eq? (car tff8@x) '$rtd)) tff8@x (assertion-violation 'expand '"invalid transformer" tff8@x)))))) (set! t280b@tba2@sanitize-binding tba2@sanitize-binding) (set! tba4@make-variable-transformer (lambda (tffc@x) (if (procedure? tffc@x) (cons 'macro! tffc@x) (assertion-violation 'make-variable-transformer '"not a procedure" tffc@x)))) (set! t280c@tba4@make-variable-transformer tba4@make-variable-transformer) (set! tba6@variable-transformer? (lambda (tffe@x) (and (pair? tffe@x) (eq? (car tffe@x) 'macro!) (procedure? (cdr tffe@x))))) (set! t280d@tba6@variable-transformer? tba6@variable-transformer?) (set! tba8@variable-transformer-procedure (lambda (t1000@x) (if (tba6@variable-transformer? t1000@x) (cdr t1000@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" t1000@x)))) (set! t280e@tba8@variable-transformer-procedure tba8@variable-transformer-procedure) (set! tbaa@make-eval-transformer (lambda (t1002@x) (tba2@sanitize-binding (eval-core (t712@t6ca@expanded->core t1002@x)) t1002@x))) (set! t280f@tbaa@make-eval-transformer tbaa@make-eval-transformer) (set! tcfb@parse-define (lambda (t1004@x) (let ((t1006@t t1004@x)) (let ((t1008@ls/false (td79@syntax-dispatch t1006@t '(_ (any . any) any . each-any)))) (if (and t1008@ls/false (apply (lambda (t100a@id t100b@fmls t100c@b t100d@b*) (tb72@id? t100a@id)) t1008@ls/false)) (apply (lambda (t1012@id t1013@fmls t1014@b t1015@b*) (begin (td9f@verify-formals t1013@fmls t1004@x) (values t1012@id (cons 'defun (cons t1013@fmls (cons t1014@b t1015@b*)))))) t1008@ls/false) (let ((t101a@t t1006@t)) (let ((t101c@ls/false (td79@syntax-dispatch t101a@t '(_ any any)))) (if (and t101c@ls/false (apply (lambda (t101e@id t101f@val) (tb72@id? t101e@id)) t101c@ls/false)) (apply (lambda (t1022@id t1023@val) (values t1022@id (cons 'expr t1023@val))) t101c@ls/false) (let ((t1026@t t101a@t)) (let ((t1028@ls/false (td79@syntax-dispatch t1026@t '(_ any)))) (if (and t1028@ls/false (apply (lambda (t102a@id) (tb72@id? t102a@id)) t1028@ls/false)) (apply (lambda (t102c@id) (values t102c@id (cons 'expr (td2f@bless '(void))))) t1028@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1026@t)))))))))))) (set! t2810@tcfb@parse-define tcfb@parse-define) (set! tcfd@parse-define-syntax (lambda (t102e@x) (let ((t1030@t t102e@x)) (let ((t1032@ls/false (td79@syntax-dispatch t1030@t '(_ any any)))) (if (and t1032@ls/false (apply (lambda (t1034@id t1035@val) (tb72@id? t1034@id)) t1032@ls/false)) (apply (lambda (t1038@id t1039@val) (values t1038@id t1039@val)) t1032@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1030@t)))))) (set! t2811@tcfd@parse-define-syntax tcfd@parse-define-syntax) (set! tcff@scheme-stx-hashtable (make-eq-hashtable)) (set! t2812@tcff@scheme-stx-hashtable tcff@scheme-stx-hashtable) (set! td01@scheme-stx (lambda (t103c@sym) (or (hashtable-ref tcff@scheme-stx-hashtable t103c@sym '#f) (let ((t103e@subst (t963@t78c@library-subst (t981@t7c8@find-library-by-name '(psyntax system $all))))) (let ((t1040@stx (make-simple-struct 'stx '5 (list t103c@sym taf6@top-mark* '() '())))) (let ((t1042@stx (let ((t1044@t (assq t103c@sym t103e@subst))) (if t1044@t ((lambda (t1046@x) (let ((t1048@name (car t1046@x)) (t1049@label (cdr t1046@x))) (tb5e@add-subst (make-simple-struct 'rib '6 (list (list t1048@name) (list taf6@top-mark*) (list t1049@label) '#f '#f)) t1040@stx))) t1044@t) t1040@stx)))) (begin (hashtable-set! tcff@scheme-stx-hashtable t103c@sym t1042@stx) t1042@stx))))))) (set! t2813@td01@scheme-stx td01@scheme-stx) (set! td03@lexical-var car) (set! t2814@td03@lexical-var td03@lexical-var) (set! td05@lexical-mutable? cdr) (set! t2815@td05@lexical-mutable? td05@lexical-mutable?) (set! td07@set-lexical-mutable! set-cdr!) (set! t2816@td07@set-lexical-mutable! td07@set-lexical-mutable!) (set! td09@add-lexical (lambda (t104c@lab t104d@lex t104e@r) (cons (cons* t104c@lab 'lexical t104d@lex '#f) t104e@r))) (set! t2817@td09@add-lexical td09@add-lexical) (set! td0b@add-lexicals (lambda (t1052@lab* t1053@lex* t1054@r) (if (null? t1052@lab*) t1054@r (td0b@add-lexicals (cdr t1052@lab*) (cdr t1053@lex*) (td09@add-lexical (car t1052@lab*) (car t1053@lex*) t1054@r))))) (set! t2818@td0b@add-lexicals td0b@add-lexicals) (set! td0d@letrec-helper (lambda (t1058@e t1059@r t105a@mr t105b@build) (let ((t1060@t t1058@e)) (let ((t1062@ls/false (td79@syntax-dispatch t1060@t '(_ #(each (any any)) any . each-any)))) (if t1062@ls/false (apply (lambda (t1064@lhs* t1065@rhs* t1066@b t1067@b*) (if (not (tb7a@valid-bound-ids? t1064@lhs*)) (td33@invalid-fmls-error t1058@e t1064@lhs*) (let ((t106c@lex* (map tafa@gen-lexical t1064@lhs*)) (t106d@lab* (map tafe@gen-label t1064@lhs*))) (let ((t1070@rib (tb32@make-full-rib t1064@lhs* t106d@lab*)) (t1071@r (td0b@add-lexicals t106d@lab* t106c@lex* t1059@r))) (let ((t1074@body (tdb1@chi-internal (tb5e@add-subst t1070@rib (cons t1066@b t1067@b*)) t1071@r t105a@mr)) (t1075@rhs* (td97@chi-expr* (map (lambda (t1078@x) (tb5e@add-subst t1070@rib t1078@x)) t1065@rhs*) t1071@r t105a@mr))) (t105b@build '#f t106c@lex* t1075@rhs* t1074@body)))))) t1062@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1060@t)))))) (set! t2819@td0d@letrec-helper td0d@letrec-helper) (set! td0f@let-transformer (lambda (t107a@e t107b@r t107c@mr) (let ((t1080@t t107a@e)) (let ((t1082@ls/false (td79@syntax-dispatch t1080@t '(_ #(each (any any)) any . each-any)))) (if t1082@ls/false (apply (lambda (t1084@lhs* t1085@rhs* t1086@b t1087@b*) (if (not (tb7a@valid-bound-ids? t1084@lhs*)) (td33@invalid-fmls-error t107a@e t1084@lhs*) (let ((t108c@lex* (map tafa@gen-lexical t1084@lhs*)) (t108d@lab* (map tafe@gen-label t1084@lhs*)) (t108e@rhs* (td97@chi-expr* t1085@rhs* t107b@r t107c@mr))) (let ((t1092@rib (tb32@make-full-rib t1084@lhs* t108d@lab*)) (t1093@r (td0b@add-lexicals t108d@lab* t108c@lex* t107b@r))) (let ((t1096@body (tdb1@chi-internal (tb5e@add-subst t1092@rib (cons t1086@b t1087@b*)) t1093@r t107c@mr))) (tada@ta37@build-let '#f t108c@lex* t108e@rhs* t1096@body)))))) t1082@ls/false) (let ((t1098@t t1080@t)) (let ((t109a@ls/false (td79@syntax-dispatch t1098@t '(_ any #(each (any any)) any . each-any)))) (if t109a@ls/false (apply (lambda (t109c@loop t109d@lhs* t109e@rhs* t109f@b t10a0@b*) (if (not (tb7a@valid-bound-ids? t109d@lhs*)) (td33@invalid-fmls-error t107a@e t109d@lhs*) (let ((t10a6@lex* (map tafa@gen-lexical t109d@lhs*)) (t10a7@lab* (map tafe@gen-label t109d@lhs*)) (t10a8@rhs* (td97@chi-expr* t109e@rhs* t107b@r t107c@mr)) (t10a9@loop-lex (tafa@gen-lexical t109c@loop)) (t10aa@loop-lab (tafe@gen-label t109c@loop))) (let ((t10b0@loop-rib (tb32@make-full-rib (list t109c@loop) (list t10aa@loop-lab))) (t10b1@rib (tb32@make-full-rib t109d@lhs* t10a7@lab*)) (t10b2@r (td0b@add-lexicals (cons t10aa@loop-lab t10a7@lab*) (cons t10a9@loop-lex t10a6@lex*) t107b@r))) (let ((t10b6@body (tdb1@chi-internal (tb5e@add-subst t10b0@loop-rib (tb5e@add-subst t10b1@rib (cons t109f@b t10a0@b*))) t10b2@r t107c@mr))) (tadb@ta39@build-named-let '#f t10a9@loop-lex t10a6@lex* t10a8@rhs* t10b6@body)))))) t109a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1098@t))))))))) (set! t281a@td0f@let-transformer td0f@let-transformer) (set! td11@letrec-transformer (lambda (t10b8@e t10b9@r t10ba@mr) (td0d@letrec-helper t10b8@e t10b9@r t10ba@mr tad9@ta35@build-letrec))) (set! t281b@td11@letrec-transformer td11@letrec-transformer) (set! td13@letrec*-transformer (lambda (t10be@e t10bf@r t10c0@mr) (td0d@letrec-helper t10be@e t10bf@r t10c0@mr tadc@ta3b@build-letrec*))) (set! t281c@td13@letrec*-transformer td13@letrec*-transformer) (set! td15@fluid-let-syntax-transformer (lambda (t10c4@e t10c5@r t10c6@mr) (let ((t10cb@lookup '#f)) (begin (set! t10cb@lookup (lambda (t10de@x) (or (tb88@id->label t10de@x) (te59@syntax-violation '#f '"unbound identifier" t10c4@e t10de@x)))) (let ((t10cc@t t10c4@e)) (let ((t10ce@ls/false (td79@syntax-dispatch t10cc@t '(_ #(each (any any)) any . each-any)))) (if t10ce@ls/false (apply (lambda (t10d0@lhs* t10d1@rhs* t10d2@b t10d3@b*) (if (not (tb7a@valid-bound-ids? t10d0@lhs*)) (td33@invalid-fmls-error t10c4@e t10d0@lhs*) (let ((t10d8@lab* (map t10cb@lookup t10d0@lhs*)) (t10d9@rhs* (map (lambda (t10dc@x) (tbaa@make-eval-transformer (tdd3@expand-transformer t10dc@x t10c6@mr))) t10d1@rhs*))) (tdb1@chi-internal (cons t10d2@b t10d3@b*) (append (map cons t10d8@lab* t10d9@rhs*) t10c5@r) (append (map cons t10d8@lab* t10d9@rhs*) t10c6@mr))))) t10ce@ls/false) (te59@syntax-violation '#f '"invalid syntax" t10cc@t)))))))) (set! t281d@td15@fluid-let-syntax-transformer td15@fluid-let-syntax-transformer) (set! td17@type-descriptor-transformer (lambda (t10e0@e t10e1@r t10e2@mr) (let ((t10e6@t t10e0@e)) (let ((t10e8@ls/false (td79@syntax-dispatch t10e6@t '(_ any)))) (if (and t10e8@ls/false (apply (lambda (t10ea@id) (tb72@id? t10ea@id)) t10e8@ls/false)) (apply (lambda (t10ec@id) (let ((t10ee@lab (tb88@id->label t10ec@id))) (let ((t10f0@b (tb8a@label->binding t10ee@lab t10e1@r))) (let ((t10f2@type (tb8e@binding-type t10f0@b))) (begin (if (not t10ee@lab) (tb92@raise-unbound-error t10ec@id) (void)) (if (not (and (eq? t10f2@type '$rtd) (not (list? (tb90@binding-value t10f0@b))))) (te59@syntax-violation '#f '"not a record type" t10e0@e) (void)) (list 'quote (tb90@binding-value t10f0@b))))))) t10e8@ls/false) (te59@syntax-violation '#f '"invalid syntax" t10e6@t)))))) (set! t281e@td17@type-descriptor-transformer td17@type-descriptor-transformer) (set! td19@record-type-descriptor-transformer (lambda (t10f4@e t10f5@r t10f6@mr) (let ((t10fa@t t10f4@e)) (let ((t10fc@ls/false (td79@syntax-dispatch t10fa@t '(_ any)))) (if (and t10fc@ls/false (apply (lambda (t10fe@id) (tb72@id? t10fe@id)) t10fc@ls/false)) (apply (lambda (t1100@id) (let ((t1102@lab (tb88@id->label t1100@id))) (let ((t1104@b (tb8a@label->binding t1102@lab t10f5@r))) (let ((t1106@type (tb8e@binding-type t1104@b))) (begin (if (not t1102@lab) (tb92@raise-unbound-error t1100@id) (void)) (if (not (and (eq? t1106@type '$rtd) (list? (tb90@binding-value t1104@b)))) (te59@syntax-violation '#f '"not a record type" t10f4@e) (void)) (td9b@chi-expr (car (tb90@binding-value t1104@b)) t10f5@r t10f6@mr)))))) t10fc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t10fa@t)))))) (set! t281f@td19@record-type-descriptor-transformer td19@record-type-descriptor-transformer) (set! td1b@record-constructor-descriptor-transformer (lambda (t1108@e t1109@r t110a@mr) (let ((t110e@t t1108@e)) (let ((t1110@ls/false (td79@syntax-dispatch t110e@t '(_ any)))) (if (and t1110@ls/false (apply (lambda (t1112@id) (tb72@id? t1112@id)) t1110@ls/false)) (apply (lambda (t1114@id) (let ((t1116@lab (tb88@id->label t1114@id))) (let ((t1118@b (tb8a@label->binding t1116@lab t1109@r))) (let ((t111a@type (tb8e@binding-type t1118@b))) (begin (if (not t1116@lab) (tb92@raise-unbound-error t1114@id) (void)) (if (not (and (eq? t111a@type '$rtd) (list? (tb90@binding-value t1118@b)))) (te59@syntax-violation '#f '"invalid type" t1108@e) (void)) (td9b@chi-expr (cadr (tb90@binding-value t1118@b)) t1109@r t110a@mr)))))) t1110@ls/false) (te59@syntax-violation '#f '"invalid syntax" t110e@t)))))) (set! t2820@td1b@record-constructor-descriptor-transformer td1b@record-constructor-descriptor-transformer) (set! td1d@when-macro (lambda (t111c@e) (let ((t111e@t t111c@e)) (let ((t1120@ls/false (td79@syntax-dispatch t111e@t '(_ any any . each-any)))) (if t1120@ls/false (apply (lambda (t1122@test t1123@e t1124@e*) (td2f@bless (list 'if t1122@test (cons 'begin (cons t1123@e t1124@e*))))) t1120@ls/false) (te59@syntax-violation '#f '"invalid syntax" t111e@t)))))) (set! t2821@td1d@when-macro td1d@when-macro) (set! td1f@unless-macro (lambda (t1128@e) (let ((t112a@t t1128@e)) (let ((t112c@ls/false (td79@syntax-dispatch t112a@t '(_ any any . each-any)))) (if t112c@ls/false (apply (lambda (t112e@test t112f@e t1130@e*) (td2f@bless (list 'if (list 'not t112e@test) (cons 'begin (cons t112f@e t1130@e*))))) t112c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t112a@t)))))) (set! t2822@td1f@unless-macro td1f@unless-macro) (set! td21@if-transformer (lambda (t1134@e t1135@r t1136@mr) (let ((t113a@t t1134@e)) (let ((t113c@ls/false (td79@syntax-dispatch t113a@t '(_ any any any)))) (if t113c@ls/false (apply (lambda (t113e@e0 t113f@e1 t1140@e2) (list 'if (td9b@chi-expr t113e@e0 t1135@r t1136@mr) (td9b@chi-expr t113f@e1 t1135@r t1136@mr) (td9b@chi-expr t1140@e2 t1135@r t1136@mr))) t113c@ls/false) (let ((t1144@t t113a@t)) (let ((t1146@ls/false (td79@syntax-dispatch t1144@t '(_ any any)))) (if t1146@ls/false (apply (lambda (t1148@e0 t1149@e1) (list 'if (td9b@chi-expr t1148@e0 t1135@r t1136@mr) (td9b@chi-expr t1149@e1 t1135@r t1136@mr) (tad8@ta33@build-void))) t1146@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1144@t))))))))) (set! t2823@td21@if-transformer td21@if-transformer) (set! td23@and-transformer (lambda (t114c@e t114d@r t114e@mr) (let ((t1152@t t114c@e)) (let ((t1154@ls/false (td79@syntax-dispatch t1152@t '(_ . each-any)))) (if t1154@ls/false (apply (lambda (t1156@e*) (cons 'and (td97@chi-expr* t1156@e* t114d@r t114e@mr))) t1154@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1152@t)))))) (set! t2824@td23@and-transformer td23@and-transformer) (set! td25@or-transformer (lambda (t1158@e t1159@r t115a@mr) (let ((t115e@t t1158@e)) (let ((t1160@ls/false (td79@syntax-dispatch t115e@t '(_ . each-any)))) (if t1160@ls/false (apply (lambda (t1162@e*) (cons 'or (td97@chi-expr* t1162@e* t1159@r t115a@mr))) t1160@ls/false) (te59@syntax-violation '#f '"invalid syntax" t115e@t)))))) (set! t2825@td25@or-transformer td25@or-transformer) (set! td27@case-macro (lambda (t1164@e) (let ((t1167@build-last '#f) (t1169@build-one '#f)) (begin (set! t1167@build-last (lambda (t118e@cls) (let ((t1190@t t118e@cls)) (let ((t1192@ls/false (td79@syntax-dispatch t1190@t '(#(scheme-id else) any . each-any)))) (if t1192@ls/false (apply (lambda (t1194@e t1195@e*) (cons 'begin (cons t1194@e t1195@e*))) t1192@ls/false) (let ((t1198@t t1190@t)) (let ((t119a@ls/false (td79@syntax-dispatch t1198@t '_))) (if t119a@ls/false (apply (lambda () (t1169@build-one t118e@cls '(if #f #f))) t119a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1198@t))))))))) (set! t1169@build-one (lambda (t1180@cls t1181@k) (let ((t1184@t t1180@cls)) (let ((t1186@ls/false (td79@syntax-dispatch t1184@t '(each-any any . each-any)))) (if t1186@ls/false (apply (lambda (t1188@d* t1189@e t118a@e*) (list 'if (list 'memv 't (list 'quote t1188@d*)) (cons 'begin (cons t1189@e t118a@e*)) t1181@k)) t1186@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1184@t)))))) (let ((t116a@t t1164@e)) (let ((t116c@ls/false (td79@syntax-dispatch t116a@t '(_ any)))) (if t116c@ls/false (apply (lambda (t116e@expr) (td2f@bless (cons 'let (cons (list (list 't t116e@expr)) '((if #f #f)))))) t116c@ls/false) (let ((t1170@t t116a@t)) (let ((t1172@ls/false (td79@syntax-dispatch t1170@t '(_ any any . each-any)))) (if t1172@ls/false (apply (lambda (t1174@expr t1175@cls t1176@cls*) (td2f@bless (list 'let (list (list 't t1174@expr)) (let t117e@f ((t117a@cls t1175@cls) (t117b@cls* t1176@cls*)) (if (null? t117b@cls*) (t1167@build-last t117a@cls) (t1169@build-one t117a@cls (t117e@f (car t117b@cls*) (cdr t117b@cls*)))))))) t1172@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1170@t))))))))))) (set! t2826@td27@case-macro td27@case-macro) (set! td29@quote-transformer (lambda (t119c@e t119d@r t119e@mr) (let ((t11a2@t t119c@e)) (let ((t11a4@ls/false (td79@syntax-dispatch t11a2@t '(_ any)))) (if t11a4@ls/false (apply (lambda (t11a6@datum) (list 'quote (tb86@stx->datum t11a6@datum))) t11a4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t11a2@t)))))) (set! t2827@td29@quote-transformer td29@quote-transformer) (set! td2b@case-lambda-transformer (lambda (t11a8@e t11a9@r t11aa@mr) (let ((t11ae@t t11a8@e)) (let ((t11b0@ls/false (td79@syntax-dispatch t11ae@t '(_ . #(each (any any . each-any)))))) (if t11b0@ls/false (apply (lambda (t11b2@fmls* t11b3@b* t11b4@b**) (call-with-values (lambda () (tda3@chi-lambda-clause* t11a8@e t11b2@fmls* (map cons t11b3@b* t11b4@b**) t11a9@r t11aa@mr)) (lambda (t11bc@t11b9 t11bd@t11bb) (let ((t11c0@body* t11bd@t11bb) (t11c1@fmls* t11bc@t11b9)) (tad6@ta03@build-case-lambda '#f t11c1@fmls* t11c0@body*))))) t11b0@ls/false) (te59@syntax-violation '#f '"invalid syntax" t11ae@t)))))) (set! t2828@td2b@case-lambda-transformer td2b@case-lambda-transformer) (set! td2d@lambda-transformer (lambda (t11c4@e t11c5@r t11c6@mr) (let ((t11ca@t t11c4@e)) (let ((t11cc@ls/false (td79@syntax-dispatch t11ca@t '(_ any any . each-any)))) (if t11cc@ls/false (apply (lambda (t11ce@fmls t11cf@b t11d0@b*) (call-with-values (lambda () (tda1@chi-lambda-clause t11c4@e t11ce@fmls (cons t11cf@b t11d0@b*) t11c5@r t11c6@mr)) (lambda (t11d8@t11d5 t11d9@t11d7) (let ((t11dc@body t11d9@t11d7) (t11dd@fmls t11d8@t11d5)) (tad5@ta01@build-lambda '#f t11dd@fmls t11dc@body))))) t11cc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t11ca@t)))))) (set! t2829@td2d@lambda-transformer td2d@lambda-transformer) (set! td2f@bless (lambda (t11e0@x) (tb5a@mkstx (let t11e4@f ((t11e2@x t11e0@x)) (if (tb3e@stx? t11e2@x) t11e2@x (if (pair? t11e2@x) (cons (t11e4@f (car t11e2@x)) (t11e4@f (cdr t11e2@x))) (if (symbol? t11e2@x) (td01@scheme-stx t11e2@x) (if (vector? t11e2@x) (vector-map t11e4@f t11e2@x) t11e2@x))))) '() '() '()))) (set! t282a@td2f@bless td2f@bless) (set! td31@with-syntax-macro (lambda (t11e6@e) (let ((t11e8@t t11e6@e)) (let ((t11ea@ls/false (td79@syntax-dispatch t11e8@t '(_ #(each (any any)) any . each-any)))) (if t11ea@ls/false (apply (lambda (t11ec@pat* t11ed@expr* t11ee@b t11ef@b*) (let ((t11f4@idn* (let t11f8@f ((t11f6@pat* t11ec@pat*)) (if (null? t11f6@pat*) '() (call-with-values (lambda () (td77@convert-pattern (car t11f6@pat*) '())) (lambda (t11fe@t11fb t11ff@t11fd) (let ((t1202@idn* t11ff@t11fd) (t1203@pat t11fe@t11fb)) (append t1202@idn* (t11f8@f (cdr t11f6@pat*)))))))))) (begin (td9f@verify-formals (map car t11f4@idn*) t11e6@e) (let ((t1206@t* (te47@generate-temporaries t11ed@expr*))) (td2f@bless (list 'let (map list t1206@t* t11ed@expr*) (let t120c@f ((t1208@pat* t11ec@pat*) (t1209@t* t1206@t*)) (if (null? t1208@pat*) (cons 'begin (cons '#f (cons t11ee@b t11ef@b*))) (list 'syntax-case (car t1209@t*) '() (list (car t1208@pat*) (t120c@f (cdr t1208@pat*) (cdr t1209@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car t1208@pat*)) (car t1209@t*)))))))))))) t11ea@ls/false) (te59@syntax-violation '#f '"invalid syntax" t11e8@t)))))) (set! t282b@td31@with-syntax-macro td31@with-syntax-macro) (set! td33@invalid-fmls-error (lambda (t120e@stx t120f@fmls) (let ((t1212@t t120f@fmls)) (let ((t1214@ls/false (td79@syntax-dispatch t1212@t '#(each+ any () any)))) (if t1214@ls/false (apply (lambda (t1216@id* t1217@last) (let t121c@f ((t121a@id* (if (tb72@id? t1217@last) (cons t1217@last t1216@id*) (if (tb68@syntax-null? t1217@last) t1216@id* (te59@syntax-violation '#f '"not an identifier" t120e@stx t1217@last))))) (if (null? t121a@id*) (values) (if (not (tb72@id? (car t121a@id*))) (te59@syntax-violation '#f '"not an identifier" t120e@stx (car t121a@id*)) (begin (t121c@f (cdr t121a@id*)) (if (tb7e@bound-id-member? (car t121a@id*) (cdr t121a@id*)) (te59@syntax-violation '#f '"duplicate binding" t120e@stx (car t121a@id*)) (void))))))) t1214@ls/false) (let ((t121e@t t1212@t)) (let ((t1220@ls/false (td79@syntax-dispatch t121e@t '_))) (if t1220@ls/false (apply (lambda () (te59@syntax-violation '#f '"malformed binding form" t120e@stx t120f@fmls)) t1220@ls/false) (te59@syntax-violation '#f '"invalid syntax" t121e@t))))))))) (set! t282c@td33@invalid-fmls-error td33@invalid-fmls-error) (set! td35@let-macro (lambda (t1222@stx) (let ((t1224@t t1222@stx)) (let ((t1226@ls/false (td79@syntax-dispatch t1224@t '(_ #(each (any any)) any . each-any)))) (if t1226@ls/false (apply (lambda (t1228@lhs* t1229@rhs* t122a@b t122b@b*) (if (tb7a@valid-bound-ids? t1228@lhs*) (td2f@bless (cons (cons 'lambda (cons t1228@lhs* (cons t122a@b t122b@b*))) t1229@rhs*)) (td33@invalid-fmls-error t1222@stx t1228@lhs*))) t1226@ls/false) (let ((t1230@t t1224@t)) (let ((t1232@ls/false (td79@syntax-dispatch t1230@t '(_ any #(each (any any)) any . each-any)))) (if (and t1232@ls/false (apply (lambda (t1234@f t1235@lhs* t1236@rhs* t1237@b t1238@b*) (tb72@id? t1234@f)) t1232@ls/false)) (apply (lambda (t123e@f t123f@lhs* t1240@rhs* t1241@b t1242@b*) (if (tb7a@valid-bound-ids? t123f@lhs*) (td2f@bless (cons (list 'letrec (list (list t123e@f (cons 'lambda (cons t123f@lhs* (cons t1241@b t1242@b*))))) t123e@f) t1240@rhs*)) (td33@invalid-fmls-error t1222@stx t123f@lhs*))) t1232@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1230@t))))))))) (set! t282d@td35@let-macro td35@let-macro) (set! td37@let-values-macro (lambda (t1248@stx) (let ((t124b@rename '#f) (t124d@rename* '#f)) (begin (set! t124b@rename (lambda (t12b0@x t12b1@old* t12b2@new*) (begin (if (not (tb72@id? t12b0@x)) (te59@syntax-violation '#f '"not an indentifier" t1248@stx t12b0@x) (void)) (if (tb7e@bound-id-member? t12b0@x t12b1@old*) (te59@syntax-violation '#f '"duplicate binding" t1248@stx t12b0@x) (void)) (let ((t12b6@y (gensym (te5f@syntax->datum t12b0@x)))) (values t12b6@y (cons t12b0@x t12b1@old*) (cons t12b6@y t12b2@new*)))))) (set! t124d@rename* (lambda (t129e@x* t129f@old* t12a0@new*) (if (null? t129e@x*) (values '() t129f@old* t12a0@new*) (call-with-values (lambda () (t124b@rename (car t129e@x*) t129f@old* t12a0@new*)) (lambda (t12a4@x t12a5@old* t12a6@new*) (call-with-values (lambda () (t124d@rename* (cdr t129e@x*) t12a5@old* t12a6@new*)) (lambda (t12aa@x* t12ab@old* t12ac@new*) (values (cons t12a4@x t12aa@x*) t12ab@old* t12ac@new*)))))))) (let ((t124e@t t1248@stx)) (let ((t1250@ls/false (td79@syntax-dispatch t124e@t '(_ () any . each-any)))) (if t1250@ls/false (apply (lambda (t1252@b t1253@b*) (cons* (td2f@bless 'let) '() t1252@b t1253@b*)) t1250@ls/false) (let ((t1256@t t124e@t)) (let ((t1258@ls/false (td79@syntax-dispatch t1256@t '(_ #(each (any any)) any . each-any)))) (if t1258@ls/false (apply (lambda (t125a@lhs* t125b@rhs* t125c@b t125d@b*) (td2f@bless (let t126a@f ((t1262@lhs* t125a@lhs*) (t1263@rhs* t125b@rhs*) (t1264@old* '()) (t1265@new* '())) (if (null? t1262@lhs*) (cons 'let (cons (map list t1264@old* t1265@new*) (cons t125c@b t125d@b*))) (let ((t126c@t (car t1262@lhs*))) (let ((t126e@ls/false (td79@syntax-dispatch t126c@t 'each-any))) (if t126e@ls/false (apply (lambda (t1270@x*) (call-with-values (lambda () (t124d@rename* t1270@x* t1264@old* t1265@new*)) (lambda (t1278@t1273 t1279@t1275 t127a@t1277) (let ((t127e@new* t127a@t1277) (t127f@old* t1279@t1275) (t1280@y* t1278@t1273)) (list 'call-with-values (list 'lambda '() (car t1263@rhs*)) (list 'lambda t1280@y* (t126a@f (cdr t1262@lhs*) (cdr t1263@rhs*) t127f@old* t127e@new*))))))) t126e@ls/false) (let ((t1284@t t126c@t)) (let ((t1286@ls/false (td79@syntax-dispatch t1284@t '#(each+ any () any)))) (if t1286@ls/false (apply (lambda (t1288@x* t1289@x) (call-with-values (lambda () (t124b@rename t1289@x t1264@old* t1265@new*)) (lambda (t128c@y t128d@old* t128e@new*) (call-with-values (lambda () (t124d@rename* t1288@x* t128d@old* t128e@new*)) (lambda (t1292@y* t1293@old* t1294@new*) (list 'call-with-values (list 'lambda '() (car t1263@rhs*)) (list 'lambda (append t1292@y* t128c@y) (t126a@f (cdr t1262@lhs*) (cdr t1263@rhs*) t1293@old* t1294@new*)))))))) t1286@ls/false) (let ((t1298@t t1284@t)) (let ((t129a@ls/false (td79@syntax-dispatch t1298@t 'any))) (if t129a@ls/false (apply (lambda (t129c@others) (te59@syntax-violation '#f '"malformed bindings" t1248@stx t129c@others)) t129a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1298@t)))))))))))))) t1258@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1256@t))))))))))) (set! t282e@td37@let-values-macro td37@let-values-macro) (set! td39@let*-values-macro (lambda (t12b8@stx) (let ((t12bb@check '#f)) (begin (set! t12bb@check (lambda (t12ea@x*) (if (not (null? t12ea@x*)) (let ((t12ec@x (car t12ea@x*))) (begin (if (not (tb72@id? t12ec@x)) (te59@syntax-violation '#f '"not an identifier" t12b8@stx t12ec@x) (void)) (t12bb@check (cdr t12ea@x*)) (if (tb7e@bound-id-member? t12ec@x (cdr t12ea@x*)) (te59@syntax-violation '#f '"duplicate identifier" t12b8@stx t12ec@x) (void)))) (void)))) (let ((t12bc@t t12b8@stx)) (let ((t12be@ls/false (td79@syntax-dispatch t12bc@t '(_ () any . each-any)))) (if t12be@ls/false (apply (lambda (t12c0@b t12c1@b*) (cons* (td2f@bless 'let) '() t12c0@b t12c1@b*)) t12be@ls/false) (let ((t12c4@t t12bc@t)) (let ((t12c6@ls/false (td79@syntax-dispatch t12c4@t '(_ #(each (any any)) any . each-any)))) (if t12c6@ls/false (apply (lambda (t12c8@lhs* t12c9@rhs* t12ca@b t12cb@b*) (td2f@bless (let t12d4@f ((t12d0@lhs* t12c8@lhs*) (t12d1@rhs* t12c9@rhs*)) (if (null? t12d0@lhs*) (cons 'begin (cons t12ca@b t12cb@b*)) (let ((t12d6@t (car t12d0@lhs*))) (let ((t12d8@ls/false (td79@syntax-dispatch t12d6@t 'each-any))) (if t12d8@ls/false (apply (lambda (t12da@x*) (begin (t12bb@check t12da@x*) (list 'call-with-values (list 'lambda '() (car t12d1@rhs*)) (list 'lambda t12da@x* (t12d4@f (cdr t12d0@lhs*) (cdr t12d1@rhs*)))))) t12d8@ls/false) (let ((t12dc@t t12d6@t)) (let ((t12de@ls/false (td79@syntax-dispatch t12dc@t '#(each+ any () any)))) (if t12de@ls/false (apply (lambda (t12e0@x* t12e1@x) (begin (t12bb@check (cons t12e1@x t12e0@x*)) (list 'call-with-values (list 'lambda '() (car t12d1@rhs*)) (list 'lambda (append t12e0@x* t12e1@x) (t12d4@f (cdr t12d0@lhs*) (cdr t12d1@rhs*)))))) t12de@ls/false) (let ((t12e4@t t12dc@t)) (let ((t12e6@ls/false (td79@syntax-dispatch t12e4@t 'any))) (if t12e6@ls/false (apply (lambda (t12e8@others) (te59@syntax-violation '#f '"malformed bindings" t12b8@stx t12e8@others)) t12e6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t12e4@t)))))))))))))) t12c6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t12c4@t))))))))))) (set! t282f@td39@let*-values-macro td39@let*-values-macro) (set! td3b@trace-lambda-macro (lambda (t12ee@stx) (let ((t12f0@t t12ee@stx)) (let ((t12f2@ls/false (td79@syntax-dispatch t12f0@t '(_ any each-any any . each-any)))) (if t12f2@ls/false (apply (lambda (t12f4@who t12f5@fmls t12f6@b t12f7@b*) (if (tb7a@valid-bound-ids? t12f5@fmls) (td2f@bless (list 'make-traced-procedure (list 'quote t12f4@who) (cons 'lambda (cons t12f5@fmls (cons t12f6@b t12f7@b*))))) (td33@invalid-fmls-error t12ee@stx t12f5@fmls))) t12f2@ls/false) (let ((t12fc@t t12f0@t)) (let ((t12fe@ls/false (td79@syntax-dispatch t12fc@t '(_ any #(each+ any () any) any . each-any)))) (if t12fe@ls/false (apply (lambda (t1300@who t1301@fmls t1302@last t1303@b t1304@b*) (if (tb7a@valid-bound-ids? (cons t1302@last t1301@fmls)) (td2f@bless (list 'make-traced-procedure (list 'quote t1300@who) (cons 'lambda (cons (append t1301@fmls t1302@last) (cons t1303@b t1304@b*))))) (td33@invalid-fmls-error t12ee@stx (append t1301@fmls t1302@last)))) t12fe@ls/false) (te59@syntax-violation '#f '"invalid syntax" t12fc@t))))))))) (set! t2830@td3b@trace-lambda-macro td3b@trace-lambda-macro) (set! td3d@trace-define-macro (lambda (t130a@stx) (let ((t130c@t t130a@stx)) (let ((t130e@ls/false (td79@syntax-dispatch t130c@t '(_ (any . each-any) any . each-any)))) (if t130e@ls/false (apply (lambda (t1310@who t1311@fmls t1312@b t1313@b*) (if (tb7a@valid-bound-ids? t1311@fmls) (td2f@bless (list 'define t1310@who (list 'make-traced-procedure (list 'quote t1310@who) (cons 'lambda (cons t1311@fmls (cons t1312@b t1313@b*)))))) (td33@invalid-fmls-error t130a@stx t1311@fmls))) t130e@ls/false) (let ((t1318@t t130c@t)) (let ((t131a@ls/false (td79@syntax-dispatch t1318@t '(_ (any . #(each+ any () any)) any . each-any)))) (if t131a@ls/false (apply (lambda (t131c@who t131d@fmls t131e@last t131f@b t1320@b*) (if (tb7a@valid-bound-ids? (cons t131e@last t131d@fmls)) (td2f@bless (list 'define t131c@who (list 'make-traced-procedure (list 'quote t131c@who) (cons 'lambda (cons (append t131d@fmls t131e@last) (cons t131f@b t1320@b*)))))) (td33@invalid-fmls-error t130a@stx (append t131d@fmls t131e@last)))) t131a@ls/false) (let ((t1326@t t1318@t)) (let ((t1328@ls/false (td79@syntax-dispatch t1326@t '(_ any any)))) (if t1328@ls/false (apply (lambda (t132a@who t132b@expr) (if (tb72@id? t132a@who) (td2f@bless (list 'define t132a@who (list 'let (list (list 'v t132b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote t132a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (te59@syntax-violation '#f '"invalid name" t130a@stx))) t1328@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1326@t)))))))))))) (set! t2831@td3d@trace-define-macro td3d@trace-define-macro) (set! td3f@trace-define-syntax-macro (lambda (t132e@stx) (let ((t1330@t t132e@stx)) (let ((t1332@ls/false (td79@syntax-dispatch t1330@t '(_ any any)))) (if t1332@ls/false (apply (lambda (t1334@who t1335@expr) (if (tb72@id? t1334@who) (td2f@bless (list 'define-syntax t1334@who (list 'make-traced-macro (list 'quote t1334@who) t1335@expr))) (te59@syntax-violation '#f '"invalid name" t132e@stx))) t1332@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1330@t)))))) (set! t2832@td3f@trace-define-syntax-macro td3f@trace-define-syntax-macro) (set! td41@trace-let/rec-syntax (lambda (t1338@who) (lambda (t133a@stx) (let ((t133c@t t133a@stx)) (let ((t133e@ls/false (td79@syntax-dispatch t133c@t '(_ #(each (any any)) any . each-any)))) (if t133e@ls/false (apply (lambda (t1340@lhs* t1341@rhs* t1342@b t1343@b*) (if (tb7a@valid-bound-ids? t1340@lhs*) (let ((t1348@rhs* (map (lambda (t134a@lhs t134b@rhs) (list 'make-traced-macro (list 'quote t134a@lhs) t134b@rhs)) t1340@lhs* t1341@rhs*))) (td2f@bless (cons t1338@who (cons (map list t1340@lhs* t1348@rhs*) (cons t1342@b t1343@b*))))) (td33@invalid-fmls-error t133a@stx t1340@lhs*))) t133e@ls/false) (te59@syntax-violation '#f '"invalid syntax" t133c@t))))))) (set! t2833@td41@trace-let/rec-syntax td41@trace-let/rec-syntax) (set! td43@trace-let-syntax-macro (td41@trace-let/rec-syntax 'let-syntax)) (set! t2834@td43@trace-let-syntax-macro td43@trace-let-syntax-macro) (set! td45@trace-letrec-syntax-macro (td41@trace-let/rec-syntax 'letrec-syntax)) (set! t2835@td45@trace-letrec-syntax-macro td45@trace-letrec-syntax-macro) (set! td47@guard-macro (lambda (t134e@x) (let ((t1351@gen-clauses '#f)) (begin (set! t1351@gen-clauses (lambda (t1368@con t1369@outerk t136a@clause*) (let ((t136f@f '#f) (t1371@f* '#f)) (begin (set! t136f@f (lambda (t13a8@x t13a9@k) (let ((t13ac@t t13a8@x)) (let ((t13ae@ls/false (td79@syntax-dispatch t13ac@t '(any #(scheme-id =>) any)))) (if t13ae@ls/false (apply (lambda (t13b0@e t13b1@p) (let ((t13b4@t (gensym))) (list 'let (list (list t13b4@t t13b0@e)) (list 'if t13b4@t (list t13b1@p t13b4@t) t13a9@k)))) t13ae@ls/false) (let ((t13b6@t t13ac@t)) (let ((t13b8@ls/false (td79@syntax-dispatch t13b6@t '(any)))) (if t13b8@ls/false (apply (lambda (t13ba@e) (let ((t13bc@t (gensym))) (list 'let (list (list t13bc@t t13ba@e)) (list 'if t13bc@t t13bc@t t13a9@k)))) t13b8@ls/false) (let ((t13be@t t13b6@t)) (let ((t13c0@ls/false (td79@syntax-dispatch t13be@t '(any any . each-any)))) (if t13c0@ls/false (apply (lambda (t13c2@e t13c3@v t13c4@v*) (list 'if t13c2@e (cons 'begin (cons t13c3@v t13c4@v*)) t13a9@k)) t13c0@ls/false) (let ((t13c8@t t13be@t)) (let ((t13ca@ls/false (td79@syntax-dispatch t13c8@t '_))) (if t13ca@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid guard clause" t13a8@x)) t13ca@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13c8@t))))))))))))))) (set! t1371@f* (lambda (t137e@x*) (let ((t1380@t t137e@x*)) (let ((t1382@ls/false (td79@syntax-dispatch t1380@t '()))) (if t1382@ls/false (apply (lambda () (let ((t1384@g (gensym))) (values (list t1384@g (list 'lambda '() (list 'raise-continuable t1368@con))) t1384@g))) t1382@ls/false) (let ((t1386@t t1380@t)) (let ((t1388@ls/false (td79@syntax-dispatch t1386@t '((#(scheme-id else) any . each-any))))) (if t1388@ls/false (apply (lambda (t138a@e t138b@e*) (values (cons 'begin (cons t138a@e t138b@e*)) '#f)) t1388@ls/false) (let ((t138e@t t1386@t)) (let ((t1390@ls/false (td79@syntax-dispatch t138e@t '(any . any)))) (if t1390@ls/false (apply (lambda (t1392@cls t1393@cls*) (call-with-values (lambda () (t1371@f* t1393@cls*)) (lambda (t139a@t1397 t139b@t1399) (let ((t139e@g t139b@t1399) (t139f@e t139a@t1397)) (values (t136f@f t1392@cls t139f@e) t139e@g))))) t1390@ls/false) (let ((t13a2@t t138e@t)) (let ((t13a4@ls/false (td79@syntax-dispatch t13a2@t 'any))) (if t13a4@ls/false (apply (lambda (t13a6@others) (te59@syntax-violation '#f '"invalid guard clause" t13a6@others)) t13a4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13a2@t))))))))))))))) (call-with-values (lambda () (t1371@f* t136a@clause*)) (lambda (t1376@t1373 t1377@t1375) (let ((t137a@raisek t1377@t1375) (t137b@code t1376@t1373)) (if t137a@raisek (list (list 'call/cc (list 'lambda (list t137a@raisek) (list t1369@outerk (list 'lambda '() t137b@code))))) (list t1369@outerk (list 'lambda '() t137b@code)))))))))) (let ((t1352@t t134e@x)) (let ((t1354@ls/false (td79@syntax-dispatch t1352@t '(_ (any . each-any) any . each-any)))) (if (and t1354@ls/false (apply (lambda (t1356@con t1357@clause* t1358@b t1359@b*) (tb72@id? t1356@con)) t1354@ls/false)) (apply (lambda (t135e@con t135f@clause* t1360@b t1361@b*) (let ((t1366@outerk (gensym))) (td2f@bless (list (list 'call/cc (list 'lambda (list t1366@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list t135e@con) (t1351@gen-clauses t135e@con t1366@outerk t135f@clause*)) (cons 'lambda (cons '() (cons t1360@b t1361@b*))))))))))) t1354@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1352@t)))))))) (set! t2836@td47@guard-macro td47@guard-macro) (set! td49@define-enumeration-macro (lambda (t13cc@stx) (let ((t13cf@set? '#f) (t13d1@remove-dups '#f)) (begin (set! t13cf@set? (lambda (t13e8@x) (or (null? t13e8@x) (and (not (memq (car t13e8@x) (cdr t13e8@x))) (t13cf@set? (cdr t13e8@x)))))) (set! t13d1@remove-dups (lambda (t13e6@ls) (if (null? t13e6@ls) '() (cons (car t13e6@ls) (t13d1@remove-dups (remq (car t13e6@ls) (cdr t13e6@ls))))))) (let ((t13d2@t t13cc@stx)) (let ((t13d4@ls/false (td79@syntax-dispatch t13d2@t '(_ any each-any any)))) (if (and t13d4@ls/false (apply (lambda (t13d6@name t13d7@id* t13d8@maker) (and (tb72@id? t13d6@name) (tb72@id? t13d8@maker) (for-all tb72@id? t13d7@id*))) t13d4@ls/false)) (apply (lambda (t13dc@name t13dd@id* t13de@maker) (let ((t13e2@name* (t13d1@remove-dups (te5f@syntax->datum t13dd@id*))) (t13e3@mk (gensym))) (td2f@bless (list 'begin (list 'define t13e3@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote t13e2@name*)))) (list 'define-syntax t13dc@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote t13e2@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote t13dc@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax t13de@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote t13de@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote t13e2@name*)) (cons 'syntax-violation (cons (list 'quote t13de@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons t13e3@mk '('(n* ...))))))))))))) t13d4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13d2@t)))))))) (set! t2837@td49@define-enumeration-macro td49@define-enumeration-macro) (set! td4b@time-macro (lambda (t13ea@stx) (let ((t13ec@t t13ea@stx)) (let ((t13ee@ls/false (td79@syntax-dispatch t13ec@t '(_ any)))) (if t13ee@ls/false (apply (lambda (t13f0@expr) (td2f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() t13f0@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) t13ee@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13ec@t)))))) (set! t2838@td4b@time-macro td4b@time-macro) (set! td4d@delay-macro (lambda (t13f2@stx) (let ((t13f4@t t13f2@stx)) (let ((t13f6@ls/false (td79@syntax-dispatch t13f4@t '(_ any)))) (if t13f6@ls/false (apply (lambda (t13f8@expr) (td2f@bless (list 'make-promise (list 'lambda '() t13f8@expr)))) t13f6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13f4@t)))))) (set! t2839@td4d@delay-macro td4d@delay-macro) (set! td4f@assert-macro (lambda (t13fa@stx) (let ((t13fc@t t13fa@stx)) (let ((t13fe@ls/false (td79@syntax-dispatch t13fc@t '(_ any)))) (if t13fe@ls/false (apply (lambda (t1400@expr) (let ((t1402@pos (or (te51@expression-position t13fa@stx) (te51@expression-position t1400@expr)))) (td2f@bless (list 'let (list (list 'x t1400@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote t1400@expr) (list 'quote t1402@pos))))))) t13fe@ls/false) (te59@syntax-violation '#f '"invalid syntax" t13fc@t)))))) (set! t283a@td4f@assert-macro td4f@assert-macro) (set! td51@endianness-macro (lambda (t1404@stx) (let ((t1406@t t1404@stx)) (let ((t1408@ls/false (td79@syntax-dispatch t1406@t '(_ any)))) (if t1408@ls/false (apply (lambda (t140a@e) (let ((t140c@t (te5f@syntax->datum t140a@e))) (if (memv t140c@t '(little)) (td2f@bless ''little) (if (memv t140c@t '(big)) (td2f@bless ''big) (te59@syntax-violation '#f '"endianness must be big or little" t1404@stx))))) t1408@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1406@t)))))) (set! t283b@td51@endianness-macro td51@endianness-macro) (set! td53@identifier-syntax-macro (lambda (t140e@stx) (let ((t1410@t t140e@stx)) (let ((t1412@ls/false (td79@syntax-dispatch t1410@t '(_ any)))) (if t1412@ls/false (apply (lambda (t1414@expr) (td2f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax t1414@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax t1414@expr) '((syntax (e* ...)))))))))) t1412@ls/false) (let ((t1416@t t1410@t)) (let ((t1418@ls/false (td79@syntax-dispatch t1416@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and t1418@ls/false (apply (lambda (t141a@id1 t141b@expr1 t141c@id2 t141d@expr2 t141e@expr3) (and (tb72@id? t141a@id1) (tb72@id? t141c@id2) (tb72@id? t141d@expr2))) t1418@ls/false)) (apply (lambda (t1424@id1 t1425@expr1 t1426@id2 t1427@expr2 t1428@expr3) (td2f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax t1425@expr1)) (list (list 'set! 'id t1427@expr2) (list 'syntax t1428@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons t1425@expr1 '(e* ...))))))))) t1418@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1416@t))))))))) (set! t283c@td53@identifier-syntax-macro td53@identifier-syntax-macro) (set! td55@do-macro (lambda (t142e@stx) (let ((t1431@bind '#f)) (begin (set! t1431@bind (lambda (t1448@x) (let ((t144a@t t1448@x)) (let ((t144c@ls/false (td79@syntax-dispatch t144a@t '(any any)))) (if t144c@ls/false (apply (lambda (t144e@x t144f@init) (list t144e@x t144f@init t144e@x)) t144c@ls/false) (let ((t1452@t t144a@t)) (let ((t1454@ls/false (td79@syntax-dispatch t1452@t '(any any any)))) (if t1454@ls/false (apply (lambda (t1456@x t1457@init t1458@step) (list t1456@x t1457@init t1458@step)) t1454@ls/false) (let ((t145c@t t1452@t)) (let ((t145e@ls/false (td79@syntax-dispatch t145c@t '_))) (if t145e@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid binding" t142e@stx)) t145e@ls/false) (te59@syntax-violation '#f '"invalid syntax" t145c@t)))))))))))) (let ((t1432@t t142e@stx)) (let ((t1434@ls/false (td79@syntax-dispatch t1432@t '(_ each-any (any . each-any) . each-any)))) (if t1434@ls/false (apply (lambda (t1436@binding* t1437@test t1438@expr* t1439@command*) (let ((t143e@t (map t1431@bind t1436@binding*))) (let ((t1440@ls/false (td79@syntax-dispatch t143e@t '#(each (any any any))))) (if t1440@ls/false (apply (lambda (t1442@x* t1443@init* t1444@step*) (if (tb7a@valid-bound-ids? t1442@x*) (td2f@bless (list 'letrec (list (list 'loop (list 'lambda t1442@x* (list 'if t1437@test (cons 'begin (cons '(if #f #f) t1438@expr*)) (cons 'begin (append t1439@command* (list (cons 'loop t1444@step*)))))))) (cons 'loop t1443@init*))) (te59@syntax-violation '#f '"invalid bindings" t142e@stx))) t1440@ls/false) (te59@syntax-violation '#f '"invalid syntax" t143e@t))))) t1434@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1432@t)))))))) (set! t283d@td55@do-macro td55@do-macro) (set! td57@let*-macro (lambda (t1460@stx) (let ((t1462@t t1460@stx)) (let ((t1464@ls/false (td79@syntax-dispatch t1462@t '(_ #(each (any any)) any . each-any)))) (if (and t1464@ls/false (apply (lambda (t1466@lhs* t1467@rhs* t1468@b t1469@b*) (for-all tb72@id? t1466@lhs*)) t1464@ls/false)) (apply (lambda (t146e@lhs* t146f@rhs* t1470@b t1471@b*) (td2f@bless (let t1478@f ((t1476@x* (map list t146e@lhs* t146f@rhs*))) (if (null? t1476@x*) (cons 'let (cons '() (cons t1470@b t1471@b*))) (list 'let (list (car t1476@x*)) (t1478@f (cdr t1476@x*))))))) t1464@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1462@t)))))) (set! t283e@td57@let*-macro td57@let*-macro) (set! td59@or-macro (lambda (t147a@stx) (let ((t147c@t t147a@stx)) (let ((t147e@ls/false (td79@syntax-dispatch t147c@t '(_)))) (if t147e@ls/false (apply (lambda () '#f) t147e@ls/false) (let ((t1480@t t147c@t)) (let ((t1482@ls/false (td79@syntax-dispatch t1480@t '(_ any . each-any)))) (if t1482@ls/false (apply (lambda (t1484@e t1485@e*) (td2f@bless (let t148c@f ((t1488@e t1484@e) (t1489@e* t1485@e*)) (if (null? t1489@e*) (list 'begin '#f t1488@e) (list 'let (list (list 't t1488@e)) (list 'if 't 't (t148c@f (car t1489@e*) (cdr t1489@e*)))))))) t1482@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1480@t))))))))) (set! t283f@td59@or-macro td59@or-macro) (set! td5b@and-macro (lambda (t148e@stx) (let ((t1490@t t148e@stx)) (let ((t1492@ls/false (td79@syntax-dispatch t1490@t '(_)))) (if t1492@ls/false (apply (lambda () '#t) t1492@ls/false) (let ((t1494@t t1490@t)) (let ((t1496@ls/false (td79@syntax-dispatch t1494@t '(_ any . each-any)))) (if t1496@ls/false (apply (lambda (t1498@e t1499@e*) (td2f@bless (let t14a0@f ((t149c@e t1498@e) (t149d@e* t1499@e*)) (if (null? t149d@e*) (list 'begin '#f t149c@e) (cons 'if (cons t149c@e (cons (t14a0@f (car t149d@e*) (cdr t149d@e*)) '(#f)))))))) t1496@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1494@t))))))))) (set! t2840@td5b@and-macro td5b@and-macro) (set! td5d@cond-macro (lambda (t14a2@stx) (let ((t14a4@t t14a2@stx)) (let ((t14a6@ls/false (td79@syntax-dispatch t14a4@t '(_ any . each-any)))) (if t14a6@ls/false (apply (lambda (t14a8@cls t14a9@cls*) (td2f@bless (let t14b0@f ((t14ac@cls t14a8@cls) (t14ad@cls* t14a9@cls*)) (if (null? t14ad@cls*) (let ((t14b2@t t14ac@cls)) (let ((t14b4@ls/false (td79@syntax-dispatch t14b2@t '(#(scheme-id else) any . each-any)))) (if t14b4@ls/false (apply (lambda (t14b6@e t14b7@e*) (cons 'begin (cons t14b6@e t14b7@e*))) t14b4@ls/false) (let ((t14ba@t t14b2@t)) (let ((t14bc@ls/false (td79@syntax-dispatch t14ba@t '(any #(scheme-id =>) any)))) (if t14bc@ls/false (apply (lambda (t14be@e t14bf@p) (list 'let (list (list 't t14be@e)) (list 'if 't (cons t14bf@p '(t))))) t14bc@ls/false) (let ((t14c2@t t14ba@t)) (let ((t14c4@ls/false (td79@syntax-dispatch t14c2@t '(any)))) (if t14c4@ls/false (apply (lambda (t14c6@e) (cons 'or (cons t14c6@e '((if #f #f))))) t14c4@ls/false) (let ((t14c8@t t14c2@t)) (let ((t14ca@ls/false (td79@syntax-dispatch t14c8@t '(any . each-any)))) (if t14ca@ls/false (apply (lambda (t14cc@e t14cd@e*) (list 'if t14cc@e (cons 'begin t14cd@e*))) t14ca@ls/false) (let ((t14d0@t t14c8@t)) (let ((t14d2@ls/false (td79@syntax-dispatch t14d0@t '_))) (if t14d2@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid last clause" t14a2@stx)) t14d2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t14d0@t)))))))))))))))) (let ((t14d4@t t14ac@cls)) (let ((t14d6@ls/false (td79@syntax-dispatch t14d4@t '(#(scheme-id else) any . each-any)))) (if t14d6@ls/false (apply (lambda (t14d8@e t14d9@e*) (te59@syntax-violation '#f '"incorrect position of keyword else" t14a2@stx)) t14d6@ls/false) (let ((t14dc@t t14d4@t)) (let ((t14de@ls/false (td79@syntax-dispatch t14dc@t '(any #(scheme-id =>) any)))) (if t14de@ls/false (apply (lambda (t14e0@e t14e1@p) (list 'let (list (list 't t14e0@e)) (list 'if 't (cons t14e1@p '(t)) (t14b0@f (car t14ad@cls*) (cdr t14ad@cls*))))) t14de@ls/false) (let ((t14e4@t t14dc@t)) (let ((t14e6@ls/false (td79@syntax-dispatch t14e4@t '(any)))) (if t14e6@ls/false (apply (lambda (t14e8@e) (list 'or t14e8@e (t14b0@f (car t14ad@cls*) (cdr t14ad@cls*)))) t14e6@ls/false) (let ((t14ea@t t14e4@t)) (let ((t14ec@ls/false (td79@syntax-dispatch t14ea@t '(any . each-any)))) (if t14ec@ls/false (apply (lambda (t14ee@e t14ef@e*) (list 'if t14ee@e (cons 'begin t14ef@e*) (t14b0@f (car t14ad@cls*) (cdr t14ad@cls*)))) t14ec@ls/false) (let ((t14f2@t t14ea@t)) (let ((t14f4@ls/false (td79@syntax-dispatch t14f2@t '_))) (if t14f4@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid last clause" t14a2@stx)) t14f4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t14f2@t)))))))))))))))))))) t14a6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t14a4@t)))))) (set! t2841@td5d@cond-macro td5d@cond-macro) (set! td5f@do-include (lambda (t14f6@stx t14f7@id t14f8@filename) (let ((t14fc@filename (tb86@stx->datum t14f8@filename))) (begin (if (not (and (string? t14fc@filename) (tb72@id? t14f7@id))) (te59@syntax-violation '#f '"invalid syntax" t14f6@stx) (void)) (cons (td2f@bless 'begin) (with-input-from-file t14fc@filename (lambda () (let t1500@f ((t14fe@ls '())) (let ((t1502@x (t6af@t581@read-annotated))) (if (eof-object? t1502@x) (reverse t14fe@ls) (t1500@f (cons (tb52@datum->stx t14f7@id t1502@x) t14fe@ls)))))))))))) (set! t2842@td5f@do-include td5f@do-include) (set! td61@include-macro (lambda (t1504@e) (let ((t1506@t t1504@e)) (let ((t1508@ls/false (td79@syntax-dispatch t1506@t '(any any)))) (if t1508@ls/false (apply (lambda (t150a@id t150b@filename) (td5f@do-include t1504@e t150a@id t150b@filename)) t1508@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1506@t)))))) (set! t2843@td61@include-macro td61@include-macro) (set! td63@include-into-macro (lambda (t150e@e) (let ((t1510@t t150e@e)) (let ((t1512@ls/false (td79@syntax-dispatch t1510@t '(_ any any)))) (if t1512@ls/false (apply (lambda (t1514@id t1515@filename) (td5f@do-include t150e@e t1514@id t1515@filename)) t1512@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1510@t)))))) (set! t2844@td63@include-into-macro td63@include-into-macro) (set! td65@syntax-rules-macro (lambda (t1518@e) (let ((t151a@t t1518@e)) (let ((t151c@ls/false (td79@syntax-dispatch t151a@t '(_ each-any . #(each (any any)))))) (if t151c@ls/false (apply (lambda (t151e@lits t151f@pat* t1520@tmp*) (begin (td7f@verify-literals t151e@lits t1518@e) (td2f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons t151e@lits (map (lambda (t1524@pat t1525@tmp) (let ((t1528@t t1524@pat)) (let ((t152a@ls/false (td79@syntax-dispatch t1528@t '(_ . any)))) (if t152a@ls/false (apply (lambda (t152c@rest) (list (cons 'g t152c@rest) (list 'syntax t1525@tmp))) t152a@ls/false) (let ((t152e@t t1528@t)) (let ((t1530@ls/false (td79@syntax-dispatch t152e@t '_))) (if t1530@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid syntax-rules pattern" t1518@e t1524@pat)) t1530@ls/false) (te59@syntax-violation '#f '"invalid syntax" t152e@t)))))))) t151f@pat* t1520@tmp*)))))))) t151c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t151a@t)))))) (set! t2845@td65@syntax-rules-macro td65@syntax-rules-macro) (set! td67@quasiquote-macro (let ((t1533@datum '#f) (t154f@quasicons* '#f) (t1551@quasicons '#f) (t1553@quasiappend '#f) (t1555@quasivector '#f) (t1557@vquasi '#f) (t1559@quasi '#f)) (begin (set! t1533@datum (lambda (t1634@x) (list (td01@scheme-stx 'quote) (tb5a@mkstx t1634@x '() '() '())))) (set! t154f@quasicons* (lambda (t162c@x t162d@y) (let t1632@f ((t1630@x t162c@x)) (if (null? t1630@x) t162d@y (t1551@quasicons (car t1630@x) (t1632@f (cdr t1630@x))))))) (set! t1551@quasicons (lambda (t1606@x t1607@y) (let ((t160a@t t1607@y)) (let ((t160c@ls/false (td79@syntax-dispatch t160a@t '(#(scheme-id quote) any)))) (if t160c@ls/false (apply (lambda (t160e@dy) (let ((t1610@t t1606@x)) (let ((t1612@ls/false (td79@syntax-dispatch t1610@t '(#(scheme-id quote) any)))) (if t1612@ls/false (apply (lambda (t1614@dx) (list (td01@scheme-stx 'quote) (cons t1614@dx t160e@dy))) t1612@ls/false) (let ((t1616@t t1610@t)) (let ((t1618@ls/false (td79@syntax-dispatch t1616@t '_))) (if t1618@ls/false (apply (lambda () (let ((t161a@t t160e@dy)) (let ((t161c@ls/false (td79@syntax-dispatch t161a@t '()))) (if t161c@ls/false (apply (lambda () (list (td01@scheme-stx 'list) t1606@x)) t161c@ls/false) (let ((t161e@t t161a@t)) (let ((t1620@ls/false (td79@syntax-dispatch t161e@t '_))) (if t1620@ls/false (apply (lambda () (list (td01@scheme-stx 'cons) t1606@x t1607@y)) t1620@ls/false) (te59@syntax-violation '#f '"invalid syntax" t161e@t)))))))) t1618@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1616@t)))))))) t160c@ls/false) (let ((t1622@t t160a@t)) (let ((t1624@ls/false (td79@syntax-dispatch t1622@t '(#(scheme-id list) . each-any)))) (if t1624@ls/false (apply (lambda (t1626@stuff) (cons* (td01@scheme-stx 'list) t1606@x t1626@stuff)) t1624@ls/false) (let ((t1628@t t1622@t)) (let ((t162a@ls/false (td79@syntax-dispatch t1628@t '_))) (if t162a@ls/false (apply (lambda () (list (td01@scheme-stx 'cons) t1606@x t1607@y)) t162a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1628@t)))))))))))) (set! t1553@quasiappend (lambda (t15ec@x t15ed@y) (let ((t15f0@ls (let t15f4@f ((t15f2@x t15ec@x)) (if (null? t15f2@x) (let ((t15f6@t t15ed@y)) (let ((t15f8@ls/false (td79@syntax-dispatch t15f6@t '(#(scheme-id quote) ())))) (if t15f8@ls/false (apply (lambda () '()) t15f8@ls/false) (let ((t15fa@t t15f6@t)) (let ((t15fc@ls/false (td79@syntax-dispatch t15fa@t '_))) (if t15fc@ls/false (apply (lambda () (list t15ed@y)) t15fc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t15fa@t))))))) (let ((t15fe@t (car t15f2@x))) (let ((t1600@ls/false (td79@syntax-dispatch t15fe@t '(#(scheme-id quote) ())))) (if t1600@ls/false (apply (lambda () (t15f4@f (cdr t15f2@x))) t1600@ls/false) (let ((t1602@t t15fe@t)) (let ((t1604@ls/false (td79@syntax-dispatch t1602@t '_))) (if t1604@ls/false (apply (lambda () (cons (car t15f2@x) (t15f4@f (cdr t15f2@x)))) t1604@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1602@t))))))))))) (if (null? t15f0@ls) (list (td01@scheme-stx 'quote) '()) (if (null? (cdr t15f0@ls)) (car t15f0@ls) (cons* (td01@scheme-stx 'append) t15f0@ls)))))) (set! t1555@quasivector (lambda (t15ba@x) (let ((t15bc@pat-x t15ba@x)) (let ((t15be@t t15bc@pat-x)) (let ((t15c0@ls/false (td79@syntax-dispatch t15be@t '(#(scheme-id quote) each-any)))) (if t15c0@ls/false (apply (lambda (t15c2@x*) (list (td01@scheme-stx 'quote) (list->vector t15c2@x*))) t15c0@ls/false) (let ((t15c4@t t15be@t)) (let ((t15c6@ls/false (td79@syntax-dispatch t15c4@t '_))) (if t15c6@ls/false (apply (lambda () (let t15ce@f ((t15c8@x t15ba@x) (t15c9@k (lambda (t15cc@ls) (cons* (td01@scheme-stx 'vector) t15cc@ls)))) (let ((t15d0@t t15c8@x)) (let ((t15d2@ls/false (td79@syntax-dispatch t15d0@t '(#(scheme-id quote) each-any)))) (if t15d2@ls/false (apply (lambda (t15d4@x*) (t15c9@k (map (lambda (t15d6@x) (list (td01@scheme-stx 'quote) t15d6@x)) t15d4@x*))) t15d2@ls/false) (let ((t15d8@t t15d0@t)) (let ((t15da@ls/false (td79@syntax-dispatch t15d8@t '(#(scheme-id list) . each-any)))) (if t15da@ls/false (apply (lambda (t15dc@x*) (t15c9@k t15dc@x*)) t15da@ls/false) (let ((t15de@t t15d8@t)) (let ((t15e0@ls/false (td79@syntax-dispatch t15de@t '(#(scheme-id cons) any any)))) (if t15e0@ls/false (apply (lambda (t15e2@x t15e3@y) (t15ce@f t15e3@y (lambda (t15e6@ls) (t15c9@k (cons t15e2@x t15e6@ls))))) t15e0@ls/false) (let ((t15e8@t t15de@t)) (let ((t15ea@ls/false (td79@syntax-dispatch t15e8@t '_))) (if t15ea@ls/false (apply (lambda () (list (td01@scheme-stx 'list->vector) t15bc@pat-x)) t15ea@ls/false) (te59@syntax-violation '#f '"invalid syntax" t15e8@t))))))))))))))) t15c6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t15c4@t)))))))))) (set! t1557@vquasi (lambda (t1598@p t1599@lev) (let ((t159c@t t1598@p)) (let ((t159e@ls/false (td79@syntax-dispatch t159c@t '(any . any)))) (if t159e@ls/false (apply (lambda (t15a0@p t15a1@q) (let ((t15a4@t t15a0@p)) (let ((t15a6@ls/false (td79@syntax-dispatch t15a4@t '(#(scheme-id unquote) . each-any)))) (if t15a6@ls/false (apply (lambda (t15a8@p) (if (= t1599@lev '0) (t154f@quasicons* t15a8@p (t1557@vquasi t15a1@q t1599@lev)) (t1551@quasicons (t1551@quasicons (t1533@datum 'unquote) (t1559@quasi t15a8@p (- t1599@lev '1))) (t1557@vquasi t15a1@q t1599@lev)))) t15a6@ls/false) (let ((t15aa@t t15a4@t)) (let ((t15ac@ls/false (td79@syntax-dispatch t15aa@t '(#(scheme-id unquote-splicing) . each-any)))) (if t15ac@ls/false (apply (lambda (t15ae@p) (if (= t1599@lev '0) (t1553@quasiappend t15ae@p (t1557@vquasi t15a1@q t1599@lev)) (t1551@quasicons (t1551@quasicons (t1533@datum 'unquote-splicing) (t1559@quasi t15ae@p (- t1599@lev '1))) (t1557@vquasi t15a1@q t1599@lev)))) t15ac@ls/false) (let ((t15b0@t t15aa@t)) (let ((t15b2@ls/false (td79@syntax-dispatch t15b0@t 'any))) (if t15b2@ls/false (apply (lambda (t15b4@p) (t1551@quasicons (t1559@quasi t15b4@p t1599@lev) (t1557@vquasi t15a1@q t1599@lev))) t15b2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t15b0@t))))))))))) t159e@ls/false) (let ((t15b6@t t159c@t)) (let ((t15b8@ls/false (td79@syntax-dispatch t15b6@t '()))) (if t15b8@ls/false (apply (lambda () (list (td01@scheme-stx 'quote) '())) t15b8@ls/false) (te59@syntax-violation '#f '"invalid syntax" t15b6@t))))))))) (set! t1559@quasi (lambda (t1562@p t1563@lev) (let ((t1566@t t1562@p)) (let ((t1568@ls/false (td79@syntax-dispatch t1566@t '(#(scheme-id unquote) any)))) (if t1568@ls/false (apply (lambda (t156a@p) (if (= t1563@lev '0) t156a@p (t1551@quasicons (t1533@datum 'unquote) (t1559@quasi (list t156a@p) (- t1563@lev '1))))) t1568@ls/false) (let ((t156c@t t1566@t)) (let ((t156e@ls/false (td79@syntax-dispatch t156c@t '((#(scheme-id unquote) . each-any) . any)))) (if t156e@ls/false (apply (lambda (t1570@p t1571@q) (if (= t1563@lev '0) (t154f@quasicons* t1570@p (t1559@quasi t1571@q t1563@lev)) (t1551@quasicons (t1551@quasicons (t1533@datum 'unquote) (t1559@quasi t1570@p (- t1563@lev '1))) (t1559@quasi t1571@q t1563@lev)))) t156e@ls/false) (let ((t1574@t t156c@t)) (let ((t1576@ls/false (td79@syntax-dispatch t1574@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if t1576@ls/false (apply (lambda (t1578@p t1579@q) (if (= t1563@lev '0) (t1553@quasiappend t1578@p (t1559@quasi t1579@q t1563@lev)) (t1551@quasicons (t1551@quasicons (t1533@datum 'unquote-splicing) (t1559@quasi t1578@p (- t1563@lev '1))) (t1559@quasi t1579@q t1563@lev)))) t1576@ls/false) (let ((t157c@t t1574@t)) (let ((t157e@ls/false (td79@syntax-dispatch t157c@t '(#(scheme-id quasiquote) any)))) (if t157e@ls/false (apply (lambda (t1580@p) (t1551@quasicons (t1533@datum 'quasiquote) (t1559@quasi (list t1580@p) (+ t1563@lev '1)))) t157e@ls/false) (let ((t1582@t t157c@t)) (let ((t1584@ls/false (td79@syntax-dispatch t1582@t '(any . any)))) (if t1584@ls/false (apply (lambda (t1586@p t1587@q) (t1551@quasicons (t1559@quasi t1586@p t1563@lev) (t1559@quasi t1587@q t1563@lev))) t1584@ls/false) (let ((t158a@t t1582@t)) (let ((t158c@ls/false (td79@syntax-dispatch t158a@t '#(vector each-any)))) (if (and t158c@ls/false (apply (lambda (t158e@x) (not (tb3e@stx? t158e@x))) t158c@ls/false)) (apply (lambda (t1590@x) (t1555@quasivector (t1557@vquasi t1590@x t1563@lev))) t158c@ls/false) (let ((t1592@t t158a@t)) (let ((t1594@ls/false (td79@syntax-dispatch t1592@t 'any))) (if t1594@ls/false (apply (lambda (t1596@p) (list (td01@scheme-stx 'quote) t1596@p)) t1594@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1592@t)))))))))))))))))))))))) (lambda (t155a@x) (let ((t155c@t t155a@x)) (let ((t155e@ls/false (td79@syntax-dispatch t155c@t '(_ any)))) (if t155e@ls/false (apply (lambda (t1560@e) (t1559@quasi t1560@e '0)) t155e@ls/false) (te59@syntax-violation '#f '"invalid syntax" t155c@t)))))))) (set! t2846@td67@quasiquote-macro td67@quasiquote-macro) (set! td69@quasisyntax-macro (let ((t1637@quasi '#f)) (begin (set! t1637@quasi (lambda (t1652@p t1653@lev) (let ((t1656@t t1652@p)) (let ((t1658@ls/false (td79@syntax-dispatch t1656@t '(#(scheme-id unsyntax) any)))) (if t1658@ls/false (apply (lambda (t165a@p) (if (= t1653@lev '0) (let ((t165c@g (gensym))) (values (list t165c@g) (list t165a@p) t165c@g)) (call-with-values (lambda () (t1637@quasi t165a@p (- t1653@lev '1))) (lambda (t1664@t165f t1665@t1661 t1666@t1663) (let ((t166a@p t1666@t1663) (t166b@rhs* t1665@t1661) (t166c@lhs* t1664@t165f)) (values t166c@lhs* t166b@rhs* (list 'unsyntax t166a@p))))))) t1658@ls/false) (let ((t1670@t t1656@t)) (let ((t1672@ls/false (td79@syntax-dispatch t1670@t '#(scheme-id unsyntax)))) (if (and t1672@ls/false (apply (lambda () (= t1653@lev '0)) t1672@ls/false)) (apply (lambda () (te59@syntax-violation '#f '"incorrect use of unsyntax" t1652@p)) t1672@ls/false) (let ((t1674@t t1670@t)) (let ((t1676@ls/false (td79@syntax-dispatch t1674@t '((#(scheme-id unsyntax) . each-any) . any)))) (if t1676@ls/false (apply (lambda (t1678@p* t1679@q) (call-with-values (lambda () (t1637@quasi t1679@q t1653@lev)) (lambda (t1682@t167d t1683@t167f t1684@t1681) (let ((t1688@q t1684@t1681) (t1689@rhs* t1683@t167f) (t168a@lhs* t1682@t167d)) (if (= t1653@lev '0) (let ((t168e@g* (map (lambda (t1690@x) (gensym)) t1678@p*))) (values (append t168e@g* t168a@lhs*) (append t1678@p* t1689@rhs*) (append t168e@g* t1688@q))) (call-with-values (lambda () (t1637@quasi t1678@p* (- t1653@lev '1))) (lambda (t1698@t1693 t1699@t1695 t169a@t1697) (let ((t169e@p* t169a@t1697) (t169f@rhs2* t1699@t1695) (t16a0@lhs2* t1698@t1693)) (values (append t16a0@lhs2* t168a@lhs*) (append t169f@rhs2* t1689@rhs*) (cons (cons 'unsyntax t169e@p*) t1688@q)))))))))) t1676@ls/false) (let ((t16a4@t t1674@t)) (let ((t16a6@ls/false (td79@syntax-dispatch t16a4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if t16a6@ls/false (apply (lambda (t16a8@p* t16a9@q) (call-with-values (lambda () (t1637@quasi t16a9@q t1653@lev)) (lambda (t16b2@t16ad t16b3@t16af t16b4@t16b1) (let ((t16b8@q t16b4@t16b1) (t16b9@rhs* t16b3@t16af) (t16ba@lhs* t16b2@t16ad)) (if (= t1653@lev '0) (let ((t16be@g* (map (lambda (t16c0@x) (gensym)) t16a8@p*))) (values (append (map (lambda (t16c2@g) (cons t16c2@g '(...))) t16be@g*) t16ba@lhs*) (append t16a8@p* t16b9@rhs*) (append (apply append (map (lambda (t16c4@g) (cons t16c4@g '(...))) t16be@g*)) t16b8@q))) (call-with-values (lambda () (t1637@quasi t16a8@p* (- t1653@lev '1))) (lambda (t16cc@t16c7 t16cd@t16c9 t16ce@t16cb) (let ((t16d2@p* t16ce@t16cb) (t16d3@rhs2* t16cd@t16c9) (t16d4@lhs2* t16cc@t16c7)) (values (append t16d4@lhs2* t16ba@lhs*) (append t16d3@rhs2* t16b9@rhs*) (cons (cons 'unsyntax-splicing t16d2@p*) t16b8@q)))))))))) t16a6@ls/false) (let ((t16d8@t t16a4@t)) (let ((t16da@ls/false (td79@syntax-dispatch t16d8@t '#(scheme-id unsyntax-splicing)))) (if (and t16da@ls/false (apply (lambda () (= t1653@lev '0)) t16da@ls/false)) (apply (lambda () (te59@syntax-violation '#f '"incorrect use of unsyntax-splicing" t1652@p)) t16da@ls/false) (let ((t16dc@t t16d8@t)) (let ((t16de@ls/false (td79@syntax-dispatch t16dc@t '(#(scheme-id quasisyntax) any)))) (if t16de@ls/false (apply (lambda (t16e0@p) (call-with-values (lambda () (t1637@quasi t16e0@p (+ t1653@lev '1))) (lambda (t16e8@t16e3 t16e9@t16e5 t16ea@t16e7) (let ((t16ee@p t16ea@t16e7) (t16ef@rhs* t16e9@t16e5) (t16f0@lhs* t16e8@t16e3)) (values t16f0@lhs* t16ef@rhs* (list 'quasisyntax t16ee@p)))))) t16de@ls/false) (let ((t16f4@t t16dc@t)) (let ((t16f6@ls/false (td79@syntax-dispatch t16f4@t '(any . any)))) (if t16f6@ls/false (apply (lambda (t16f8@p t16f9@q) (call-with-values (lambda () (t1637@quasi t16f8@p t1653@lev)) (lambda (t1708@t16fd t1709@t16ff t170a@t1701) (call-with-values (lambda () (t1637@quasi t16f9@q t1653@lev)) (lambda (t170e@t1703 t170f@t1705 t1710@t1707) (let ((t1714@q t1710@t1707) (t1715@rhs2* t170f@t1705) (t1716@lhs2* t170e@t1703) (t1717@p t170a@t1701) (t1718@rhs* t1709@t16ff) (t1719@lhs* t1708@t16fd)) (values (append t1716@lhs2* t1719@lhs*) (append t1715@rhs2* t1718@rhs*) (cons t1717@p t1714@q)))))))) t16f6@ls/false) (let ((t1720@t t16f4@t)) (let ((t1722@ls/false (td79@syntax-dispatch t1720@t '#(vector each-any)))) (if t1722@ls/false (apply (lambda (t1724@x*) (call-with-values (lambda () (t1637@quasi t1724@x* t1653@lev)) (lambda (t172c@t1727 t172d@t1729 t172e@t172b) (let ((t1732@x* t172e@t172b) (t1733@rhs* t172d@t1729) (t1734@lhs* t172c@t1727)) (values t1734@lhs* t1733@rhs* (list->vector t1732@x*)))))) t1722@ls/false) (let ((t1738@t t1720@t)) (let ((t173a@ls/false (td79@syntax-dispatch t1738@t '_))) (if t173a@ls/false (apply (lambda () (values '() '() t1652@p)) t173a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1738@t)))))))))))))))))))))))))))))) (lambda (t1638@x) (let ((t163a@t t1638@x)) (let ((t163c@ls/false (td79@syntax-dispatch t163a@t '(_ any)))) (if t163c@ls/false (apply (lambda (t163e@e) (call-with-values (lambda () (t1637@quasi t163e@e '0)) (lambda (t1646@t1641 t1647@t1643 t1648@t1645) (let ((t164c@v t1648@t1645) (t164d@rhs* t1647@t1643) (t164e@lhs* t1646@t1641)) (td2f@bless (list 'syntax-case (cons 'list t164d@rhs*) '() (list t164e@lhs* (list 'syntax t164c@v)))))))) t163c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t163a@t)))))))) (set! t2847@td69@quasisyntax-macro td69@quasisyntax-macro) (set! td6b@define-struct-macro (lambda (t173c@stx) (te59@syntax-violation '#f '"define-struct not supported" t173c@stx))) (set! t2848@td6b@define-struct-macro td6b@define-struct-macro) (set! td6d@define-record-type-macro (lambda (t173e@x) (let ((t1741@id '#f) (t1743@get-record-name '#f) (t1745@get-record-constructor-name '#f) (t1747@get-record-predicate-name '#f) (t1749@get-clause '#f) (t174b@foo-rtd-code '#f) (t174d@parent-rtd-code '#f) (t174f@parent-rcd-code '#f) (t1751@foo-rcd-code '#f) (t1753@get-protocol-code '#f) (t1755@get-fields '#f) (t1757@get-mutator-indices '#f) (t1759@get-mutators '#f) (t175b@get-accessors '#f) (t175d@enumerate '#f) (t175f@do-define-record '#f) (t1761@verify-clauses '#f)) (begin (set! t1741@id (lambda (t1934@ctxt . t1936@str*) (te5d@datum->syntax t1934@ctxt (string->symbol (apply string-append (map (lambda (t1938@x) (if (symbol? t1938@x) (symbol->string t1938@x) (if (string? t1938@x) t1938@x (assertion-violation 'define-record-type '"BUG")))) t1936@str*)))))) (set! t1743@get-record-name (lambda (t1922@spec) (let ((t1924@t t1922@spec)) (let ((t1926@ls/false (td79@syntax-dispatch t1924@t '(any any any)))) (if t1926@ls/false (apply (lambda (t1928@foo t1929@make-foo t192a@foo?) t1928@foo) t1926@ls/false) (let ((t192e@t t1924@t)) (let ((t1930@ls/false (td79@syntax-dispatch t192e@t 'any))) (if t1930@ls/false (apply (lambda (t1932@foo) t1932@foo) t1930@ls/false) (te59@syntax-violation '#f '"invalid syntax" t192e@t))))))))) (set! t1745@get-record-constructor-name (lambda (t190e@spec) (let ((t1910@t t190e@spec)) (let ((t1912@ls/false (td79@syntax-dispatch t1910@t '(any any any)))) (if t1912@ls/false (apply (lambda (t1914@foo t1915@make-foo t1916@foo?) t1915@make-foo) t1912@ls/false) (let ((t191a@t t1910@t)) (let ((t191c@ls/false (td79@syntax-dispatch t191a@t 'any))) (if (and t191c@ls/false (apply (lambda (t191e@foo) (tb72@id? t191e@foo)) t191c@ls/false)) (apply (lambda (t1920@foo) (t1741@id t1920@foo '"make-" (tb86@stx->datum t1920@foo))) t191c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t191a@t))))))))) (set! t1747@get-record-predicate-name (lambda (t18fa@spec) (let ((t18fc@t t18fa@spec)) (let ((t18fe@ls/false (td79@syntax-dispatch t18fc@t '(any any any)))) (if t18fe@ls/false (apply (lambda (t1900@foo t1901@make-foo t1902@foo?) t1902@foo?) t18fe@ls/false) (let ((t1906@t t18fc@t)) (let ((t1908@ls/false (td79@syntax-dispatch t1906@t 'any))) (if (and t1908@ls/false (apply (lambda (t190a@foo) (tb72@id? t190a@foo)) t1908@ls/false)) (apply (lambda (t190c@foo) (t1741@id t190c@foo (tb86@stx->datum t190c@foo) '"?")) t1908@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1906@t))))))))) (set! t1749@get-clause (lambda (t18e8@id t18e9@ls) (let ((t18ec@t t18e9@ls)) (let ((t18ee@ls/false (td79@syntax-dispatch t18ec@t '()))) (if t18ee@ls/false (apply (lambda () '#f) t18ee@ls/false) (let ((t18f0@t t18ec@t)) (let ((t18f2@ls/false (td79@syntax-dispatch t18f0@t '((any . any) . any)))) (if t18f2@ls/false (apply (lambda (t18f4@x t18f5@rest t18f6@ls) (if (tb78@free-id=? (td2f@bless t18e8@id) t18f4@x) (cons t18f4@x t18f5@rest) (t1749@get-clause t18e8@id t18f6@ls))) t18f2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18f0@t))))))))) (set! t174b@foo-rtd-code (lambda (t1896@name t1897@clause* t1898@parent-rtd-code) (let ((t189d@convert-field-spec* '#f)) (begin (set! t189d@convert-field-spec* (lambda (t18ce@ls) (list->vector (map (lambda (t18d0@x) (let ((t18d2@t t18d0@x)) (let ((t18d4@ls/false (td79@syntax-dispatch t18d2@t '(#(scheme-id mutable) any . any)))) (if t18d4@ls/false (apply (lambda (t18d6@name t18d7@rest) (list 'mutable t18d6@name)) t18d4@ls/false) (let ((t18da@t t18d2@t)) (let ((t18dc@ls/false (td79@syntax-dispatch t18da@t '(#(scheme-id immutable) any . any)))) (if t18dc@ls/false (apply (lambda (t18de@name t18df@rest) (list 'immutable t18de@name)) t18dc@ls/false) (let ((t18e2@t t18da@t)) (let ((t18e4@ls/false (td79@syntax-dispatch t18e2@t 'any))) (if t18e4@ls/false (apply (lambda (t18e6@name) (list 'immutable t18e6@name)) t18e4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18e2@t))))))))))) t18ce@ls)))) (let ((t189e@uid-code (let ((t18a6@t (t1749@get-clause 'nongenerative t1897@clause*))) (let ((t18a8@ls/false (td79@syntax-dispatch t18a6@t '(_)))) (if t18a8@ls/false (apply (lambda () (list 'quote (gensym))) t18a8@ls/false) (let ((t18aa@t t18a6@t)) (let ((t18ac@ls/false (td79@syntax-dispatch t18aa@t '(_ any)))) (if t18ac@ls/false (apply (lambda (t18ae@uid) (list 'quote t18ae@uid)) t18ac@ls/false) (let ((t18b0@t t18aa@t)) (let ((t18b2@ls/false (td79@syntax-dispatch t18b0@t '_))) (if t18b2@ls/false (apply (lambda () '#f) t18b2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18b0@t))))))))))) (t189f@sealed? (let ((t18b4@t (t1749@get-clause 'sealed t1897@clause*))) (let ((t18b6@ls/false (td79@syntax-dispatch t18b4@t '(_ #(atom #t))))) (if t18b6@ls/false (apply (lambda () '#t) t18b6@ls/false) (let ((t18b8@t t18b4@t)) (let ((t18ba@ls/false (td79@syntax-dispatch t18b8@t '_))) (if t18ba@ls/false (apply (lambda () '#f) t18ba@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18b8@t)))))))) (t18a0@opaque? (let ((t18bc@t (t1749@get-clause 'opaque t1897@clause*))) (let ((t18be@ls/false (td79@syntax-dispatch t18bc@t '(_ #(atom #t))))) (if t18be@ls/false (apply (lambda () '#t) t18be@ls/false) (let ((t18c0@t t18bc@t)) (let ((t18c2@ls/false (td79@syntax-dispatch t18c0@t '_))) (if t18c2@ls/false (apply (lambda () '#f) t18c2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18c0@t)))))))) (t18a1@fields (let ((t18c4@t (t1749@get-clause 'fields t1897@clause*))) (let ((t18c6@ls/false (td79@syntax-dispatch t18c4@t '(_ . each-any)))) (if t18c6@ls/false (apply (lambda (t18c8@field-spec*) (list 'quote (t189d@convert-field-spec* t18c8@field-spec*))) t18c6@ls/false) (let ((t18ca@t t18c4@t)) (let ((t18cc@ls/false (td79@syntax-dispatch t18ca@t '_))) (if t18cc@ls/false (apply (lambda () ''#()) t18cc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t18ca@t))))))))) (td2f@bless (list 'make-record-type-descriptor (list 'quote t1896@name) t1898@parent-rtd-code t189e@uid-code t189f@sealed? t18a0@opaque? t18a1@fields))))))) (set! t174d@parent-rtd-code (lambda (t187e@clause*) (let ((t1880@t (t1749@get-clause 'parent t187e@clause*))) (let ((t1882@ls/false (td79@syntax-dispatch t1880@t '(_ any)))) (if t1882@ls/false (apply (lambda (t1884@name) (list 'record-type-descriptor t1884@name)) t1882@ls/false) (let ((t1886@t t1880@t)) (let ((t1888@ls/false (td79@syntax-dispatch t1886@t '#(atom #f)))) (if t1888@ls/false (apply (lambda () (let ((t188a@t (t1749@get-clause 'parent-rtd t187e@clause*))) (let ((t188c@ls/false (td79@syntax-dispatch t188a@t '(_ any any)))) (if t188c@ls/false (apply (lambda (t188e@rtd t188f@rcd) t188e@rtd) t188c@ls/false) (let ((t1892@t t188a@t)) (let ((t1894@ls/false (td79@syntax-dispatch t1892@t '#(atom #f)))) (if t1894@ls/false (apply (lambda () '#f) t1894@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1892@t)))))))) t1888@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1886@t))))))))) (set! t174f@parent-rcd-code (lambda (t1866@clause*) (let ((t1868@t (t1749@get-clause 'parent t1866@clause*))) (let ((t186a@ls/false (td79@syntax-dispatch t1868@t '(_ any)))) (if t186a@ls/false (apply (lambda (t186c@name) (list 'record-constructor-descriptor t186c@name)) t186a@ls/false) (let ((t186e@t t1868@t)) (let ((t1870@ls/false (td79@syntax-dispatch t186e@t '#(atom #f)))) (if t1870@ls/false (apply (lambda () (let ((t1872@t (t1749@get-clause 'parent-rtd t1866@clause*))) (let ((t1874@ls/false (td79@syntax-dispatch t1872@t '(_ any any)))) (if t1874@ls/false (apply (lambda (t1876@rtd t1877@rcd) t1877@rcd) t1874@ls/false) (let ((t187a@t t1872@t)) (let ((t187c@ls/false (td79@syntax-dispatch t187a@t '#(atom #f)))) (if t187c@ls/false (apply (lambda () '#f) t187c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t187a@t)))))))) t1870@ls/false) (te59@syntax-violation '#f '"invalid syntax" t186e@t))))))))) (set! t1751@foo-rcd-code (lambda (t185e@clause* t185f@foo-rtd t1860@protocol t1861@parent-rcd-code) (list 'make-record-constructor-descriptor t185f@foo-rtd t1861@parent-rcd-code t1860@protocol))) (set! t1753@get-protocol-code (lambda (t1852@clause*) (let ((t1854@t (t1749@get-clause 'protocol t1852@clause*))) (let ((t1856@ls/false (td79@syntax-dispatch t1854@t '(_ any)))) (if t1856@ls/false (apply (lambda (t1858@expr) t1858@expr) t1856@ls/false) (let ((t185a@t t1854@t)) (let ((t185c@ls/false (td79@syntax-dispatch t185a@t '_))) (if t185c@ls/false (apply (lambda () '#f) t185c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t185a@t))))))))) (set! t1755@get-fields (lambda (t1840@clause*) (let ((t1842@t t1840@clause*)) (let ((t1844@ls/false (td79@syntax-dispatch t1842@t '()))) (if t1844@ls/false (apply (lambda () '()) t1844@ls/false) (let ((t1846@t t1842@t)) (let ((t1848@ls/false (td79@syntax-dispatch t1846@t '((#(scheme-id fields) . each-any) . _)))) (if t1848@ls/false (apply (lambda (t184a@f*) t184a@f*) t1848@ls/false) (let ((t184c@t t1846@t)) (let ((t184e@ls/false (td79@syntax-dispatch t184c@t '(_ . any)))) (if t184e@ls/false (apply (lambda (t1850@rest) (t1755@get-fields t1850@rest)) t184e@ls/false) (te59@syntax-violation '#f '"invalid syntax" t184c@t)))))))))))) (set! t1757@get-mutator-indices (lambda (t1828@fields) (let t182e@f ((t182a@fields t1828@fields) (t182b@i '0)) (let ((t1830@t t182a@fields)) (let ((t1832@ls/false (td79@syntax-dispatch t1830@t '()))) (if t1832@ls/false (apply (lambda () '()) t1832@ls/false) (let ((t1834@t t1830@t)) (let ((t1836@ls/false (td79@syntax-dispatch t1834@t '((#(scheme-id mutable) . _) . any)))) (if t1836@ls/false (apply (lambda (t1838@rest) (cons t182b@i (t182e@f t1838@rest (+ t182b@i '1)))) t1836@ls/false) (let ((t183a@t t1834@t)) (let ((t183c@ls/false (td79@syntax-dispatch t183a@t '(_ . any)))) (if t183c@ls/false (apply (lambda (t183e@rest) (t182e@f t183e@rest (+ t182b@i '1))) t183c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t183a@t))))))))))))) (set! t1759@get-mutators (lambda (t17fe@foo t17ff@fields) (let ((t1803@gen-name '#f)) (begin (set! t1803@gen-name (lambda (t1826@x) (te5d@datum->syntax t17fe@foo (string->symbol (string-append (symbol->string (te5f@syntax->datum t17fe@foo)) '"-" (symbol->string (te5f@syntax->datum t1826@x)) '"-set!"))))) (let t1806@f ((t1804@fields t17ff@fields)) (let ((t1808@t t1804@fields)) (let ((t180a@ls/false (td79@syntax-dispatch t1808@t '()))) (if t180a@ls/false (apply (lambda () '()) t180a@ls/false) (let ((t180c@t t1808@t)) (let ((t180e@ls/false (td79@syntax-dispatch t180c@t '((#(scheme-id mutable) any any any) . any)))) (if t180e@ls/false (apply (lambda (t1810@name t1811@accessor t1812@mutator t1813@rest) (cons t1812@mutator (t1806@f t1813@rest))) t180e@ls/false) (let ((t1818@t t180c@t)) (let ((t181a@ls/false (td79@syntax-dispatch t1818@t '((#(scheme-id mutable) any) . any)))) (if t181a@ls/false (apply (lambda (t181c@name t181d@rest) (cons (t1803@gen-name t181c@name) (t1806@f t181d@rest))) t181a@ls/false) (let ((t1820@t t1818@t)) (let ((t1822@ls/false (td79@syntax-dispatch t1820@t '(_ . any)))) (if t1822@ls/false (apply (lambda (t1824@rest) (t1806@f t1824@rest)) t1822@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1820@t)))))))))))))))))) (set! t175b@get-accessors (lambda (t17ba@foo t17bb@fields) (let ((t17bf@gen-name '#f)) (begin (set! t17bf@gen-name (lambda (t17fc@x) (te5d@datum->syntax t17ba@foo (string->symbol (string-append (symbol->string (te5f@syntax->datum t17ba@foo)) '"-" (symbol->string (te5f@syntax->datum t17fc@x))))))) (map (lambda (t17c0@field) (let ((t17c2@t t17c0@field)) (let ((t17c4@ls/false (td79@syntax-dispatch t17c2@t '(#(scheme-id mutable) any any any)))) (if (and t17c4@ls/false (apply (lambda (t17c6@name t17c7@accessor t17c8@mutator) (tb72@id? t17c7@accessor)) t17c4@ls/false)) (apply (lambda (t17cc@name t17cd@accessor t17ce@mutator) t17cd@accessor) t17c4@ls/false) (let ((t17d2@t t17c2@t)) (let ((t17d4@ls/false (td79@syntax-dispatch t17d2@t '(#(scheme-id immutable) any any)))) (if (and t17d4@ls/false (apply (lambda (t17d6@name t17d7@accessor) (tb72@id? t17d7@accessor)) t17d4@ls/false)) (apply (lambda (t17da@name t17db@accessor) t17db@accessor) t17d4@ls/false) (let ((t17de@t t17d2@t)) (let ((t17e0@ls/false (td79@syntax-dispatch t17de@t '(#(scheme-id mutable) any)))) (if (and t17e0@ls/false (apply (lambda (t17e2@name) (tb72@id? t17e2@name)) t17e0@ls/false)) (apply (lambda (t17e4@name) (t17bf@gen-name t17e4@name)) t17e0@ls/false) (let ((t17e6@t t17de@t)) (let ((t17e8@ls/false (td79@syntax-dispatch t17e6@t '(#(scheme-id immutable) any)))) (if (and t17e8@ls/false (apply (lambda (t17ea@name) (tb72@id? t17ea@name)) t17e8@ls/false)) (apply (lambda (t17ec@name) (t17bf@gen-name t17ec@name)) t17e8@ls/false) (let ((t17ee@t t17e6@t)) (let ((t17f0@ls/false (td79@syntax-dispatch t17ee@t 'any))) (if (and t17f0@ls/false (apply (lambda (t17f2@name) (tb72@id? t17f2@name)) t17f0@ls/false)) (apply (lambda (t17f4@name) (t17bf@gen-name t17f4@name)) t17f0@ls/false) (let ((t17f6@t t17ee@t)) (let ((t17f8@ls/false (td79@syntax-dispatch t17f6@t 'any))) (if t17f8@ls/false (apply (lambda (t17fa@others) (te59@syntax-violation '#f '"invalid field spec" t17c0@field)) t17f8@ls/false) (te59@syntax-violation '#f '"invalid syntax" t17f6@t)))))))))))))))))))) t17bb@fields))))) (set! t175d@enumerate (lambda (t17b2@ls) (let t17b8@f ((t17b4@ls t17b2@ls) (t17b5@i '0)) (if (null? t17b4@ls) '() (cons t17b5@i (t17b8@f (cdr t17b4@ls) (+ t17b5@i '1))))))) (set! t175f@do-define-record (lambda (t178a@namespec t178b@clause*) (let ((t178e@foo (t1743@get-record-name t178a@namespec))) (let ((t1790@foo-rtd (gensym))) (let ((t1792@foo-rcd (gensym))) (let ((t1794@protocol (gensym))) (let ((t1796@make-foo (t1745@get-record-constructor-name t178a@namespec))) (let ((t1798@fields (t1755@get-fields t178b@clause*))) (let ((t179a@idx* (t175d@enumerate t1798@fields))) (let ((t179c@foo-x* (t175b@get-accessors t178e@foo t1798@fields))) (let ((t179e@set-foo-x!* (t1759@get-mutators t178e@foo t1798@fields))) (let ((t17a0@set-foo-idx* (t1757@get-mutator-indices t1798@fields))) (let ((t17a2@foo? (t1747@get-record-predicate-name t178a@namespec))) (let ((t17a4@foo-rtd-code (t174b@foo-rtd-code t178e@foo t178b@clause* (t174d@parent-rtd-code t178b@clause*)))) (let ((t17a6@foo-rcd-code (t1751@foo-rcd-code t178b@clause* t1790@foo-rtd t1794@protocol (t174f@parent-rcd-code t178b@clause*)))) (let ((t17a8@protocol-code (t1753@get-protocol-code t178b@clause*))) (td2f@bless (cons 'begin (cons (list 'define t1790@foo-rtd t17a4@foo-rtd-code) (cons (list 'define t1794@protocol t17a8@protocol-code) (cons (list 'define t1792@foo-rcd t17a6@foo-rcd-code) (cons (list 'define-syntax t178e@foo (list 'list ''$rtd (list 'syntax t1790@foo-rtd) (list 'syntax t1792@foo-rcd))) (cons (list 'define t17a2@foo? (list 'record-predicate t1790@foo-rtd)) (cons (list 'define t1796@make-foo (list 'record-constructor t1792@foo-rcd)) (append (map (lambda (t17aa@foo-x t17ab@idx) (list 'define t17aa@foo-x (list 'record-accessor t1790@foo-rtd t17ab@idx))) t179c@foo-x* t179a@idx*) (map (lambda (t17ae@set-foo-x! t17af@idx) (list 'define t17ae@set-foo-x! (list 'record-mutator t1790@foo-rtd t17af@idx))) t179e@set-foo-x!* t17a0@set-foo-idx*)))))))))))))))))))))))))) (set! t1761@verify-clauses (lambda (t176a@x t176b@cls*) (let ((t176f@valid-kwds '#f) (t1771@free-id-member? '#f)) (begin (set! t176f@valid-kwds (map td2f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! t1771@free-id-member? (lambda (t1786@x t1787@ls) (and (pair? t1787@ls) (or (tb78@free-id=? t1786@x (car t1787@ls)) (t1771@free-id-member? t1786@x (cdr t1787@ls)))))) (let t1776@f ((t1772@cls* t176b@cls*) (t1773@seen* '())) (if (not (null? t1772@cls*)) (let ((t1778@t (car t1772@cls*))) (let ((t177a@ls/false (td79@syntax-dispatch t1778@t '(any . any)))) (if t177a@ls/false (apply (lambda (t177c@kwd t177d@rest) (if (or (not (tb72@id? t177c@kwd)) (not (t1771@free-id-member? t177c@kwd t176f@valid-kwds))) (te59@syntax-violation '#f '"not a valid define-record-type keyword" t177c@kwd) (if (tb7e@bound-id-member? t177c@kwd t1773@seen*) (te59@syntax-violation '#f '"duplicate use of keyword " t176a@x t177c@kwd) (t1776@f (cdr t1772@cls*) (cons t177c@kwd t1773@seen*))))) t177a@ls/false) (let ((t1780@t t1778@t)) (let ((t1782@ls/false (td79@syntax-dispatch t1780@t 'any))) (if t1782@ls/false (apply (lambda (t1784@cls) (te59@syntax-violation '#f '"malformed define-record-type clause" t1784@cls)) t1782@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1780@t))))))) (void))))))) (let ((t1762@t t173e@x)) (let ((t1764@ls/false (td79@syntax-dispatch t1762@t '(_ any . each-any)))) (if t1764@ls/false (apply (lambda (t1766@namespec t1767@clause*) (begin (t1761@verify-clauses t173e@x t1767@clause*) (t175f@do-define-record t1766@namespec t1767@clause*))) t1764@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1762@t)))))))) (set! t2849@td6d@define-record-type-macro td6d@define-record-type-macro) (set! td6f@define-condition-type-macro (lambda (t193a@x) (let ((t193d@mkname '#f)) (begin (set! t193d@mkname (lambda (t196a@name t196b@suffix) (te5d@datum->syntax t196a@name (string->symbol (string-append (symbol->string (te5f@syntax->datum t196a@name)) t196b@suffix))))) (let ((t193e@t t193a@x)) (let ((t1940@ls/false (td79@syntax-dispatch t193e@t '(any any any any any . #(each (any any)))))) (if (and t1940@ls/false (apply (lambda (t1942@ctxt t1943@name t1944@super t1945@constructor t1946@predicate t1947@field* t1948@accessor*) (and (tb72@id? t1943@name) (tb72@id? t1944@super) (tb72@id? t1945@constructor) (tb72@id? t1946@predicate) (for-all tb72@id? t1947@field*) (for-all tb72@id? t1948@accessor*))) t1940@ls/false)) (apply (lambda (t1950@ctxt t1951@name t1952@super t1953@constructor t1954@predicate t1955@field* t1956@accessor*) (let ((t195e@aux-accessor* (map (lambda (t1960@x) (gensym)) t1956@accessor*))) (td2f@bless (cons 'begin (cons (cons 'define-record-type (cons (list t1951@name t1953@constructor (gensym)) (cons (list 'parent t1952@super) (cons (cons 'fields (map (lambda (t1962@field t1963@aux) (list 'immutable t1962@field t1963@aux)) t1955@field* t195e@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define t1954@predicate (list 'condition-predicate (list 'record-type-descriptor t1951@name))) (map (lambda (t1966@accessor t1967@aux) (list 'define t1966@accessor (list 'condition-accessor (list 'record-type-descriptor t1951@name) t1967@aux))) t1956@accessor* t195e@aux-accessor*))))))) t1940@ls/false) (te59@syntax-violation '#f '"invalid syntax" t193e@t)))))))) (set! t284a@td6f@define-condition-type-macro td6f@define-condition-type-macro) (set! td71@incorrect-usage-macro (lambda (t196e@e) (te59@syntax-violation '#f '"incorrect usage of auxiliary keyword" t196e@e))) (set! t284b@td71@incorrect-usage-macro td71@incorrect-usage-macro) (set! td73@parameterize-macro (lambda (t1970@e) (let ((t1972@t t1970@e)) (let ((t1974@ls/false (td79@syntax-dispatch t1972@t '(_ () any . each-any)))) (if t1974@ls/false (apply (lambda (t1976@b t1977@b*) (td2f@bless (cons 'let (cons '() (cons t1976@b t1977@b*))))) t1974@ls/false) (let ((t197a@t t1972@t)) (let ((t197c@ls/false (td79@syntax-dispatch t197a@t '(_ #(each (any any)) any . each-any)))) (if t197c@ls/false (apply (lambda (t197e@olhs* t197f@orhs* t1980@b t1981@b*) (let ((t1986@lhs* (te47@generate-temporaries t197e@olhs*)) (t1987@rhs* (te47@generate-temporaries t197f@orhs*))) (td2f@bless (cons (list 'lambda (append t1986@lhs* t1987@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (t198a@lhs t198b@rhs) (list 'let (list (list 't (list t198a@lhs))) (list t198a@lhs t198b@rhs) (cons 'set! (cons t198b@rhs '(t))))) t1986@lhs* t1987@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons t1980@b t1981@b*))) '(swap)))))) (append t197e@olhs* t197f@orhs*))))) t197c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t197a@t))))))))) (set! t284c@td73@parameterize-macro td73@parameterize-macro) (set! td75@foreign-call-transformer (lambda (t198e@e t198f@r t1990@mr) (let ((t1994@t t198e@e)) (let ((t1996@ls/false (td79@syntax-dispatch t1994@t '(_ any . each-any)))) (if t1996@ls/false (apply (lambda (t1998@name t1999@arg*) (cons 'foreign-call (cons (td9b@chi-expr t1998@name t198f@r t1990@mr) (td97@chi-expr* t1999@arg* t198f@r t1990@mr)))) t1996@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1994@t)))))) (set! t284d@td75@foreign-call-transformer td75@foreign-call-transformer) (set! td77@convert-pattern (lambda (t199c@pattern t199d@keys) (let ((t19a1@cvt* '#f) (t19a3@cvt '#f)) (begin (set! t19a1@cvt* (lambda (t1a40@p* t1a41@n t1a42@ids) (if (null? t1a40@p*) (values '() t1a42@ids) (call-with-values (lambda () (t19a1@cvt* (cdr t1a40@p*) t1a41@n t1a42@ids)) (lambda (t1a4a@t1a47 t1a4b@t1a49) (let ((t1a4e@ids t1a4b@t1a49) (t1a4f@y t1a4a@t1a47)) (call-with-values (lambda () (t19a3@cvt (car t1a40@p*) t1a41@n t1a4e@ids)) (lambda (t1a56@t1a53 t1a57@t1a55) (let ((t1a5a@ids t1a57@t1a55) (t1a5b@x t1a56@t1a53)) (values (cons t1a5b@x t1a4f@y) t1a5a@ids)))))))))) (set! t19a3@cvt (lambda (t19a4@p t19a5@n t19a6@ids) (let ((t19aa@t t19a4@p)) (let ((t19ac@ls/false (td79@syntax-dispatch t19aa@t 'any))) (if (and t19ac@ls/false (apply (lambda (t19ae@id) (tb72@id? t19ae@id)) t19ac@ls/false)) (apply (lambda (t19b0@id) (if (tb7e@bound-id-member? t19a4@p t199d@keys) (values (vector 'free-id t19a4@p) t19a6@ids) (if (tb78@free-id=? t19a4@p (td01@scheme-stx '_)) (values '_ t19a6@ids) (values 'any (cons (cons t19a4@p t19a5@n) t19a6@ids))))) t19ac@ls/false) (let ((t19b2@t t19aa@t)) (let ((t19b4@ls/false (td79@syntax-dispatch t19b2@t '(any any)))) (if (and t19b4@ls/false (apply (lambda (t19b6@p t19b7@dots) (td7b@ellipsis? t19b7@dots)) t19b4@ls/false)) (apply (lambda (t19ba@p t19bb@dots) (call-with-values (lambda () (t19a3@cvt t19ba@p (+ t19a5@n '1) t19a6@ids)) (lambda (t19c2@t19bf t19c3@t19c1) (let ((t19c6@ids t19c3@t19c1) (t19c7@p t19c2@t19bf)) (values (if (eq? t19c7@p 'any) 'each-any (vector 'each t19c7@p)) t19c6@ids))))) t19b4@ls/false) (let ((t19ca@t t19b2@t)) (let ((t19cc@ls/false (td79@syntax-dispatch t19ca@t '(any any . #(each+ any () any))))) (if (and t19cc@ls/false (apply (lambda (t19ce@x t19cf@dots t19d0@ys t19d1@z) (td7b@ellipsis? t19cf@dots)) t19cc@ls/false)) (apply (lambda (t19d6@x t19d7@dots t19d8@ys t19d9@z) (call-with-values (lambda () (t19a3@cvt t19d9@z t19a5@n t19a6@ids)) (lambda (t19e2@t19df t19e3@t19e1) (let ((t19e6@ids t19e3@t19e1) (t19e7@z t19e2@t19df)) (call-with-values (lambda () (t19a1@cvt* t19d8@ys t19a5@n t19e6@ids)) (lambda (t19ee@t19eb t19ef@t19ed) (let ((t19f2@ids t19ef@t19ed) (t19f3@ys t19ee@t19eb)) (call-with-values (lambda () (t19a3@cvt t19d6@x (+ t19a5@n '1) t19f2@ids)) (lambda (t19fa@t19f7 t19fb@t19f9) (let ((t19fe@ids t19fb@t19f9) (t19ff@x t19fa@t19f7)) (values (vector 'each+ t19ff@x (reverse t19f3@ys) t19e7@z) t19fe@ids))))))))))) t19cc@ls/false) (let ((t1a02@t t19ca@t)) (let ((t1a04@ls/false (td79@syntax-dispatch t1a02@t '(any . any)))) (if t1a04@ls/false (apply (lambda (t1a06@x t1a07@y) (call-with-values (lambda () (t19a3@cvt t1a07@y t19a5@n t19a6@ids)) (lambda (t1a0e@t1a0b t1a0f@t1a0d) (let ((t1a12@ids t1a0f@t1a0d) (t1a13@y t1a0e@t1a0b)) (call-with-values (lambda () (t19a3@cvt t1a06@x t19a5@n t1a12@ids)) (lambda (t1a1a@t1a17 t1a1b@t1a19) (let ((t1a1e@ids t1a1b@t1a19) (t1a1f@x t1a1a@t1a17)) (values (cons t1a1f@x t1a13@y) t1a1e@ids)))))))) t1a04@ls/false) (let ((t1a22@t t1a02@t)) (let ((t1a24@ls/false (td79@syntax-dispatch t1a22@t '()))) (if t1a24@ls/false (apply (lambda () (values '() t19a6@ids)) t1a24@ls/false) (let ((t1a26@t t1a22@t)) (let ((t1a28@ls/false (td79@syntax-dispatch t1a26@t '#(vector each-any)))) (if (and t1a28@ls/false (apply (lambda (t1a2a@p) (not (tb3e@stx? t1a2a@p))) t1a28@ls/false)) (apply (lambda (t1a2c@p) (call-with-values (lambda () (t19a3@cvt t1a2c@p t19a5@n t19a6@ids)) (lambda (t1a32@t1a2f t1a33@t1a31) (let ((t1a36@ids t1a33@t1a31) (t1a37@p t1a32@t1a2f)) (values (vector 'vector t1a37@p) t1a36@ids))))) t1a28@ls/false) (let ((t1a3a@t t1a26@t)) (let ((t1a3c@ls/false (td79@syntax-dispatch t1a3a@t 'any))) (if t1a3c@ls/false (apply (lambda (t1a3e@datum) (values (vector 'atom (tb86@stx->datum t1a3e@datum)) t19a6@ids)) t1a3c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1a3a@t)))))))))))))))))))))))) (t19a3@cvt t199c@pattern '0 '()))))) (set! t284e@td77@convert-pattern td77@convert-pattern) (set! td79@syntax-dispatch (let ((t1a5f@stx^ '#f) (t1a61@match-each '#f) (t1a63@match-each+ '#f) (t1a65@match-each-any '#f) (t1a67@match-empty '#f) (t1a69@combine '#f) (t1a6b@match* '#f) (t1a6d@match '#f)) (begin (set! t1a5f@stx^ (lambda (t1b3a@e t1b3b@m* t1b3c@s* t1b3d@ae*) (if (and (null? t1b3b@m*) (null? t1b3c@s*) (null? t1b3d@ae*)) t1b3a@e (tb5a@mkstx t1b3a@e t1b3b@m* t1b3c@s* t1b3d@ae*)))) (set! t1a61@match-each (lambda (t1b1a@e t1b1b@p t1b1c@m* t1b1d@s* t1b1e@ae*) (if (pair? t1b1a@e) (let ((t1b24@first (t1a6d@match (car t1b1a@e) t1b1b@p t1b1c@m* t1b1d@s* t1b1e@ae* '()))) (and t1b24@first (let ((t1b26@rest (t1a61@match-each (cdr t1b1a@e) t1b1b@p t1b1c@m* t1b1d@s* t1b1e@ae*))) (and t1b26@rest (cons t1b24@first t1b26@rest))))) (if (null? t1b1a@e) '() (if (tb3e@stx? t1b1a@e) (and (not (taf8@top-marked? t1b1c@m*)) (call-with-values (lambda () (join-wraps t1b1c@m* t1b1d@s* t1b1e@ae* t1b1a@e)) (lambda (t1b2e@t1b29 t1b2f@t1b2b t1b30@t1b2d) (let ((t1b34@ae* t1b30@t1b2d) (t1b35@s* t1b2f@t1b2b) (t1b36@m* t1b2e@t1b29)) (t1a61@match-each (tb40@stx-expr t1b1a@e) t1b1b@p t1b36@m* t1b35@s* t1b34@ae*))))) (if (t6b1@t585@annotation? t1b1a@e) (t1a61@match-each (t6b3@t589@annotation-expression t1b1a@e) t1b1b@p t1b1c@m* t1b1d@s* t1b1e@ae*) '#f)))))) (set! t1a63@match-each+ (lambda (t1ada@e t1adb@x-pat t1adc@y-pat t1add@z-pat t1ade@m* t1adf@s* t1ae0@ae* t1ae1@r) (let t1af2@f ((t1aea@e t1ada@e) (t1aeb@m* t1ade@m*) (t1aec@s* t1adf@s*) (t1aed@ae* t1ae0@ae*)) (if (pair? t1aea@e) (call-with-values (lambda () (t1af2@f (cdr t1aea@e) t1aeb@m* t1aec@s* t1aed@ae*)) (lambda (t1afa@t1af5 t1afb@t1af7 t1afc@t1af9) (let ((t1b00@r t1afc@t1af9) (t1b01@y-pat t1afb@t1af7) (t1b02@xr* t1afa@t1af5)) (if t1b00@r (if (null? t1b01@y-pat) (let ((t1b06@xr (t1a6d@match (car t1aea@e) t1adb@x-pat t1aeb@m* t1aec@s* t1aed@ae* '()))) (if t1b06@xr (values (cons t1b06@xr t1b02@xr*) t1b01@y-pat t1b00@r) (values '#f '#f '#f))) (values '() (cdr t1b01@y-pat) (t1a6d@match (car t1aea@e) (car t1b01@y-pat) t1aeb@m* t1aec@s* t1aed@ae* t1b00@r))) (values '#f '#f '#f))))) (if (tb3e@stx? t1aea@e) (if (taf8@top-marked? t1aeb@m*) (values '() t1adc@y-pat (t1a6d@match t1aea@e t1add@z-pat t1aeb@m* t1aec@s* t1aed@ae* t1ae1@r)) (call-with-values (lambda () (join-wraps t1aeb@m* t1aec@s* t1aed@ae* t1aea@e)) (lambda (t1b0e@t1b09 t1b0f@t1b0b t1b10@t1b0d) (let ((t1b14@ae* t1b10@t1b0d) (t1b15@s* t1b0f@t1b0b) (t1b16@m* t1b0e@t1b09)) (t1af2@f (tb40@stx-expr t1aea@e) t1b16@m* t1b15@s* t1b14@ae*))))) (if (t6b1@t585@annotation? t1aea@e) (t1af2@f (t6b3@t589@annotation-expression t1aea@e) t1aeb@m* t1aec@s* t1aed@ae*) (values '() t1adc@y-pat (t1a6d@match t1aea@e t1add@z-pat t1aeb@m* t1aec@s* t1aed@ae* t1ae1@r)))))))) (set! t1a65@match-each-any (lambda (t1abe@e t1abf@m* t1ac0@s* t1ac1@ae*) (if (pair? t1abe@e) (let ((t1ac6@l (t1a65@match-each-any (cdr t1abe@e) t1abf@m* t1ac0@s* t1ac1@ae*))) (and t1ac6@l (cons (t1a5f@stx^ (car t1abe@e) t1abf@m* t1ac0@s* t1ac1@ae*) t1ac6@l))) (if (null? t1abe@e) '() (if (tb3e@stx? t1abe@e) (and (not (taf8@top-marked? t1abf@m*)) (call-with-values (lambda () (join-wraps t1abf@m* t1ac0@s* t1ac1@ae* t1abe@e)) (lambda (t1ace@t1ac9 t1acf@t1acb t1ad0@t1acd) (let ((t1ad4@ae* t1ad0@t1acd) (t1ad5@s* t1acf@t1acb) (t1ad6@m* t1ace@t1ac9)) (t1a65@match-each-any (tb40@stx-expr t1abe@e) t1ad6@m* t1ad5@s* t1ad4@ae*))))) (if (t6b1@t585@annotation? t1abe@e) (t1a65@match-each-any (t6b3@t589@annotation-expression t1abe@e) t1abf@m* t1ac0@s* t1ac1@ae*) '#f)))))) (set! t1a67@match-empty (lambda (t1ab8@p t1ab9@r) (if (null? t1ab8@p) t1ab9@r (if (eq? t1ab8@p '_) t1ab9@r (if (eq? t1ab8@p 'any) (cons '() t1ab9@r) (if (pair? t1ab8@p) (t1a67@match-empty (car t1ab8@p) (t1a67@match-empty (cdr t1ab8@p) t1ab9@r)) (if (eq? t1ab8@p 'each-any) (cons '() t1ab9@r) (let ((t1abc@t (vector-ref t1ab8@p '0))) (if (memv t1abc@t '(each)) (t1a67@match-empty (vector-ref t1ab8@p '1) t1ab9@r) (if (memv t1abc@t '(each+)) (t1a67@match-empty (vector-ref t1ab8@p '1) (t1a67@match-empty (reverse (vector-ref t1ab8@p '2)) (t1a67@match-empty (vector-ref t1ab8@p '3) t1ab9@r))) (if (memv t1abc@t '(free-id atom)) t1ab9@r (if (memv t1abc@t '(scheme-id atom)) t1ab9@r (if (memv t1abc@t '(vector)) (t1a67@match-empty (vector-ref t1ab8@p '1) t1ab9@r) (assertion-violation 'syntax-dispatch '"invalid pattern" t1ab8@p)))))))))))))) (set! t1a69@combine (lambda (t1ab4@r* t1ab5@r) (if (null? (car t1ab4@r*)) t1ab5@r (cons (map car t1ab4@r*) (t1a69@combine (map cdr t1ab4@r*) t1ab5@r))))) (set! t1a6b@match* (lambda (t1a90@e t1a91@p t1a92@m* t1a93@s* t1a94@ae* t1a95@r) (if (null? t1a91@p) (and (null? t1a90@e) t1a95@r) (if (pair? t1a91@p) (and (pair? t1a90@e) (t1a6d@match (car t1a90@e) (car t1a91@p) t1a92@m* t1a93@s* t1a94@ae* (t1a6d@match (cdr t1a90@e) (cdr t1a91@p) t1a92@m* t1a93@s* t1a94@ae* t1a95@r))) (if (eq? t1a91@p 'each-any) (let ((t1a9c@l (t1a65@match-each-any t1a90@e t1a92@m* t1a93@s* t1a94@ae*))) (and t1a9c@l (cons t1a9c@l t1a95@r))) (let ((t1a9e@t (vector-ref t1a91@p '0))) (if (memv t1a9e@t '(each)) (if (null? t1a90@e) (t1a67@match-empty (vector-ref t1a91@p '1) t1a95@r) (let ((t1aa0@r* (t1a61@match-each t1a90@e (vector-ref t1a91@p '1) t1a92@m* t1a93@s* t1a94@ae*))) (and t1aa0@r* (t1a69@combine t1aa0@r* t1a95@r)))) (if (memv t1a9e@t '(free-id)) (and (symbol? t1a90@e) (taf8@top-marked? t1a92@m*) (tb78@free-id=? (t1a5f@stx^ t1a90@e t1a92@m* t1a93@s* t1a94@ae*) (vector-ref t1a91@p '1)) t1a95@r) (if (memv t1a9e@t '(scheme-id)) (and (symbol? t1a90@e) (taf8@top-marked? t1a92@m*) (tb78@free-id=? (t1a5f@stx^ t1a90@e t1a92@m* t1a93@s* t1a94@ae*) (td01@scheme-stx (vector-ref t1a91@p '1))) t1a95@r) (if (memv t1a9e@t '(each+)) (call-with-values (lambda () (t1a63@match-each+ t1a90@e (vector-ref t1a91@p '1) (vector-ref t1a91@p '2) (vector-ref t1a91@p '3) t1a92@m* t1a93@s* t1a94@ae* t1a95@r)) (lambda (t1aa8@t1aa3 t1aa9@t1aa5 t1aaa@t1aa7) (let ((t1aae@r t1aaa@t1aa7) (t1aaf@y-pat t1aa9@t1aa5) (t1ab0@xr* t1aa8@t1aa3)) (and t1aae@r (null? t1aaf@y-pat) (if (null? t1ab0@xr*) (t1a67@match-empty (vector-ref t1a91@p '1) t1aae@r) (t1a69@combine t1ab0@xr* t1aae@r)))))) (if (memv t1a9e@t '(atom)) (and (fast-equal? (vector-ref t1a91@p '1) (tb84@strip t1a90@e t1a92@m*)) t1a95@r) (if (memv t1a9e@t '(vector)) (and (vector? t1a90@e) (t1a6d@match (vector->list t1a90@e) (vector-ref t1a91@p '1) t1a92@m* t1a93@s* t1a94@ae* t1a95@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" t1a91@p))))))))))))) (set! t1a6d@match (lambda (t1a72@e t1a73@p t1a74@m* t1a75@s* t1a76@ae* t1a77@r) (if (not t1a77@r) '#f (if (eq? t1a73@p '_) t1a77@r (if (eq? t1a73@p 'any) (cons (t1a5f@stx^ t1a72@e t1a74@m* t1a75@s* t1a76@ae*) t1a77@r) (if (tb3e@stx? t1a72@e) (and (not (taf8@top-marked? t1a74@m*)) (call-with-values (lambda () (join-wraps t1a74@m* t1a75@s* t1a76@ae* t1a72@e)) (lambda (t1a84@t1a7f t1a85@t1a81 t1a86@t1a83) (let ((t1a8a@ae* t1a86@t1a83) (t1a8b@s* t1a85@t1a81) (t1a8c@m* t1a84@t1a7f)) (t1a6d@match (tb40@stx-expr t1a72@e) t1a73@p t1a8c@m* t1a8b@s* t1a8a@ae* t1a77@r))))) (if (t6b1@t585@annotation? t1a72@e) (t1a6d@match (t6b3@t589@annotation-expression t1a72@e) t1a73@p t1a74@m* t1a75@s* t1a76@ae* t1a77@r) (t1a6b@match* t1a72@e t1a73@p t1a74@m* t1a75@s* t1a76@ae* t1a77@r)))))))) (lambda (t1a6e@e t1a6f@p) (t1a6d@match t1a6e@e t1a6f@p '() '() '() '()))))) (set! t284f@td79@syntax-dispatch td79@syntax-dispatch) (set! td7b@ellipsis? (lambda (t1b42@x) (and (tb72@id? t1b42@x) (tb78@free-id=? t1b42@x (td01@scheme-stx '...))))) (set! t2850@td7b@ellipsis? td7b@ellipsis?) (set! td7d@underscore? (lambda (t1b44@x) (and (tb72@id? t1b44@x) (tb78@free-id=? t1b44@x (td01@scheme-stx '_))))) (set! t2851@td7d@underscore? td7d@underscore?) (set! td7f@verify-literals (lambda (t1b46@lits t1b47@expr) (for-each (lambda (t1b4a@x) (if (or (not (tb72@id? t1b4a@x)) (td7b@ellipsis? t1b4a@x) (td7d@underscore? t1b4a@x)) (te59@syntax-violation '#f '"invalid literal" t1b47@expr t1b4a@x) (void))) t1b46@lits))) (set! t2852@td7f@verify-literals td7f@verify-literals) (set! td81@syntax-case-transformer (let ((t1b4d@build-dispatch-call '#f) (t1b4f@invalid-ids-error '#f) (t1b51@gen-clause '#f) (t1b53@gen-syntax-case '#f)) (begin (set! t1b4d@build-dispatch-call (lambda (t1bbe@pvars t1bbf@expr t1bc0@y t1bc1@r t1bc2@mr) (let ((t1bc8@ids (map car t1bbe@pvars)) (t1bc9@levels (map cdr t1bbe@pvars))) (let ((t1bcc@labels (map tafe@gen-label t1bc8@ids)) (t1bcd@new-vars (map tafa@gen-lexical t1bc8@ids))) (let ((t1bd0@body (td9b@chi-expr (tb5e@add-subst (tb32@make-full-rib t1bc8@ids t1bcc@labels) t1bbf@expr) (append (map (lambda (t1bd2@label t1bd3@var t1bd4@level) (cons t1bd2@label (tb8c@make-binding 'syntax (cons t1bd3@var t1bd4@level)))) t1bcc@labels t1bcd@new-vars (map cdr t1bbe@pvars)) t1bc1@r) t1bc2@mr))) (list '(primitive apply) (tad5@ta01@build-lambda '#f t1bcd@new-vars t1bd0@body) t1bc0@y)))))) (set! t1b4f@invalid-ids-error (lambda (t1bb2@id* t1bb3@e t1bb4@class) (let t1bbc@find ((t1bb8@id* t1bb2@id*) (t1bb9@ok* '())) (if (null? t1bb8@id*) (te59@syntax-violation '#f '"invalid syntax" t1bb3@e) (if (tb72@id? (car t1bb8@id*)) (if (tb7e@bound-id-member? (car t1bb8@id*) t1bb9@ok*) (te55@syntax-error (car t1bb8@id*) '"duplicate " t1bb4@class) (t1bbc@find (cdr t1bb8@id*) (cons (car t1bb8@id*) t1bb9@ok*))) (te55@syntax-error (car t1bb8@id*) '"invalid " t1bb4@class)))))) (set! t1b51@gen-clause (lambda (t1b8a@x t1b8b@keys t1b8c@clauses t1b8d@r t1b8e@mr t1b8f@pat t1b90@fender t1b91@expr) (call-with-values (lambda () (td77@convert-pattern t1b8f@pat t1b8b@keys)) (lambda (t1b9e@t1b9b t1b9f@t1b9d) (let ((t1ba2@pvars t1b9f@t1b9d) (t1ba3@p t1b9e@t1b9b)) (if (not (tb7c@distinct-bound-ids? (map car t1ba2@pvars))) (t1b4f@invalid-ids-error (map car t1ba2@pvars) t1b8f@pat '"pattern variable") (if (not (for-all (lambda (t1ba6@x) (not (td7b@ellipsis? (car t1ba6@x)))) t1ba2@pvars)) (te59@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" t1b8f@pat) (let ((t1ba8@y (tafa@gen-lexical 'tmp))) (let ((t1baa@test (if (eq? t1b90@fender '#t) t1ba8@y (let ((t1bac@call (t1b4d@build-dispatch-call t1ba2@pvars t1b90@fender t1ba8@y t1b8d@r t1b8e@mr))) (list 'if t1ba8@y t1bac@call (list 'quote '#f)))))) (let ((t1bae@conseq (t1b4d@build-dispatch-call t1ba2@pvars t1b91@expr t1ba8@y t1b8d@r t1b8e@mr))) (let ((t1bb0@altern (t1b53@gen-syntax-case t1b8a@x t1b8b@keys t1b8c@clauses t1b8d@r t1b8e@mr))) (list (tad5@ta01@build-lambda '#f (list t1ba8@y) (list 'if t1baa@test t1bae@conseq t1bb0@altern)) (list '(primitive syntax-dispatch) t1b8a@x (list 'quote t1ba3@p)))))))))))))) (set! t1b53@gen-syntax-case (lambda (t1b68@x t1b69@keys t1b6a@clauses t1b6b@r t1b6c@mr) (if (null? t1b6a@clauses) (list '(primitive syntax-error) t1b68@x) (let ((t1b72@t (car t1b6a@clauses))) (let ((t1b74@ls/false (td79@syntax-dispatch t1b72@t '(any any)))) (if t1b74@ls/false (apply (lambda (t1b76@pat t1b77@expr) (if (and (tb72@id? t1b76@pat) (not (tb7e@bound-id-member? t1b76@pat t1b69@keys)) (not (td7b@ellipsis? t1b76@pat))) (if (tb78@free-id=? t1b76@pat (td01@scheme-stx '_)) (td9b@chi-expr t1b77@expr t1b6b@r t1b6c@mr) (let ((t1b7a@lab (tafe@gen-label t1b76@pat)) (t1b7b@lex (tafa@gen-lexical t1b76@pat))) (let ((t1b7e@body (td9b@chi-expr (tb5e@add-subst (tb32@make-full-rib (list t1b76@pat) (list t1b7a@lab)) t1b77@expr) (cons (cons t1b7a@lab (tb8c@make-binding 'syntax (cons t1b7b@lex '0))) t1b6b@r) t1b6c@mr))) (list (tad5@ta01@build-lambda '#f (list t1b7b@lex) t1b7e@body) t1b68@x)))) (t1b51@gen-clause t1b68@x t1b69@keys (cdr t1b6a@clauses) t1b6b@r t1b6c@mr t1b76@pat '#t t1b77@expr))) t1b74@ls/false) (let ((t1b80@t t1b72@t)) (let ((t1b82@ls/false (td79@syntax-dispatch t1b80@t '(any any any)))) (if t1b82@ls/false (apply (lambda (t1b84@pat t1b85@fender t1b86@expr) (t1b51@gen-clause t1b68@x t1b69@keys (cdr t1b6a@clauses) t1b6b@r t1b6c@mr t1b84@pat t1b85@fender t1b86@expr)) t1b82@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1b80@t)))))))))) (lambda (t1b54@e t1b55@r t1b56@mr) (let ((t1b5a@t t1b54@e)) (let ((t1b5c@ls/false (td79@syntax-dispatch t1b5a@t '(_ any each-any . each-any)))) (if t1b5c@ls/false (apply (lambda (t1b5e@expr t1b5f@keys t1b60@clauses) (begin (td7f@verify-literals t1b5f@keys t1b54@e) (let ((t1b64@x (tafa@gen-lexical 'tmp))) (let ((t1b66@body (t1b53@gen-syntax-case t1b64@x t1b5f@keys t1b60@clauses t1b55@r t1b56@mr))) (list (tad5@ta01@build-lambda '#f (list t1b64@x) t1b66@body) (td9b@chi-expr t1b5e@expr t1b55@r t1b56@mr)))))) t1b5c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1b5a@t)))))))) (set! t2853@td81@syntax-case-transformer td81@syntax-case-transformer) (set! td83@ellipsis-map (lambda (t1bd8@proc t1bd9@ls . t1bdc@ls*) (let ((t1bdf@who '#f)) (begin (set! t1bdf@who '...) (begin (if (not (list? t1bd9@ls)) (assertion-violation t1bdf@who '"not a list" t1bd9@ls) (void)) (if (not (null? t1bdc@ls*)) (let ((t1be0@n (length t1bd9@ls))) (for-each (lambda (t1be2@x) (begin (if (not (list? t1be2@x)) (assertion-violation t1bdf@who '"not a list" t1be2@x) (void)) (if (not (= (length t1be2@x) t1be0@n)) (assertion-violation t1bdf@who '"length mismatch" t1bd9@ls t1be2@x) (void)))) t1bdc@ls*)) (void)) (apply map t1bd8@proc t1bd9@ls t1bdc@ls*)))))) (set! t2854@td83@ellipsis-map td83@ellipsis-map) (set! td85@syntax-transformer (let ((t1be5@gen-syntax '#f) (t1be7@gen-ref '#f) (t1be9@gen-append '#f) (t1beb@gen-mappend '#f) (t1bed@gen-map '#f) (t1bef@gen-cons '#f) (t1bf1@gen-vector '#f) (t1bf3@regen '#f)) (begin (set! t1be5@gen-syntax (lambda (t1c5c@src t1c5d@e t1c5e@r t1c5f@maps t1c60@ellipsis? t1c61@vec?) (let ((t1c68@t t1c5d@e)) (let ((t1c6a@ls/false (td79@syntax-dispatch t1c68@t 'any))) (if (and t1c6a@ls/false (apply (lambda (t1c6c@dots) (t1c60@ellipsis? t1c6c@dots)) t1c6a@ls/false)) (apply (lambda (t1c6e@dots) (te59@syntax-violation '#f '"misplaced ellipsis in syntax form" t1c5c@src)) t1c6a@ls/false) (let ((t1c70@t t1c68@t)) (let ((t1c72@ls/false (td79@syntax-dispatch t1c70@t 'any))) (if (and t1c72@ls/false (apply (lambda (t1c74@id) (tb72@id? t1c74@id)) t1c72@ls/false)) (apply (lambda (t1c76@id) (let ((t1c78@label (tb88@id->label t1c5d@e))) (let ((t1c7a@b (tb8a@label->binding t1c78@label t1c5e@r))) (if (eq? (tb8e@binding-type t1c7a@b) 'syntax) (call-with-values (lambda () (let ((t1c80@var.lev (tb90@binding-value t1c7a@b))) (t1be7@gen-ref t1c5c@src (car t1c80@var.lev) (cdr t1c80@var.lev) t1c5f@maps))) (lambda (t1c82@t1c7d t1c83@t1c7f) (let ((t1c86@maps t1c83@t1c7f) (t1c87@var t1c82@t1c7d)) (values (list 'ref t1c87@var) t1c86@maps)))) (values (list 'quote t1c5d@e) t1c5f@maps))))) t1c72@ls/false) (let ((t1c8a@t t1c70@t)) (let ((t1c8c@ls/false (td79@syntax-dispatch t1c8a@t '(any any)))) (if (and t1c8c@ls/false (apply (lambda (t1c8e@dots t1c8f@e) (t1c60@ellipsis? t1c8e@dots)) t1c8c@ls/false)) (apply (lambda (t1c92@dots t1c93@e) (if t1c61@vec? (te59@syntax-violation '#f '"misplaced ellipsis in syntax form" t1c5c@src) (t1be5@gen-syntax t1c5c@src t1c93@e t1c5e@r t1c5f@maps (lambda (t1c96@x) '#f) '#f))) t1c8c@ls/false) (let ((t1c98@t t1c8a@t)) (let ((t1c9a@ls/false (td79@syntax-dispatch t1c98@t '(any any . any)))) (if (and t1c9a@ls/false (apply (lambda (t1c9c@x t1c9d@dots t1c9e@y) (t1c60@ellipsis? t1c9d@dots)) t1c9a@ls/false)) (apply (lambda (t1ca2@x t1ca3@dots t1ca4@y) (let t1cba@f ((t1ca8@y t1ca4@y) (t1ca9@k (lambda (t1cac@maps) (call-with-values (lambda () (t1be5@gen-syntax t1c5c@src t1ca2@x t1c5e@r (cons '() t1cac@maps) t1c60@ellipsis? '#f)) (lambda (t1cb2@t1caf t1cb3@t1cb1) (let ((t1cb6@maps t1cb3@t1cb1) (t1cb7@x t1cb2@t1caf)) (if (null? (car t1cb6@maps)) (te59@syntax-violation '#f '"extra ellipsis in syntax form" t1c5c@src) (values (t1bed@gen-map t1cb7@x (car t1cb6@maps)) (cdr t1cb6@maps))))))))) (let ((t1cbc@t t1ca8@y)) (let ((t1cbe@ls/false (td79@syntax-dispatch t1cbc@t '()))) (if t1cbe@ls/false (apply (lambda () (t1ca9@k t1c5f@maps)) t1cbe@ls/false) (let ((t1cc0@t t1cbc@t)) (let ((t1cc2@ls/false (td79@syntax-dispatch t1cc0@t '(any . any)))) (if (and t1cc2@ls/false (apply (lambda (t1cc4@dots t1cc5@y) (t1c60@ellipsis? t1cc4@dots)) t1cc2@ls/false)) (apply (lambda (t1cc8@dots t1cc9@y) (t1cba@f t1cc9@y (lambda (t1ccc@maps) (call-with-values (lambda () (t1ca9@k (cons '() t1ccc@maps))) (lambda (t1cd2@t1ccf t1cd3@t1cd1) (let ((t1cd6@maps t1cd3@t1cd1) (t1cd7@x t1cd2@t1ccf)) (if (null? (car t1cd6@maps)) (te59@syntax-violation '#f '"extra ellipsis in syntax form" t1c5c@src) (values (t1beb@gen-mappend t1cd7@x (car t1cd6@maps)) (cdr t1cd6@maps))))))))) t1cc2@ls/false) (let ((t1cda@t t1cc0@t)) (let ((t1cdc@ls/false (td79@syntax-dispatch t1cda@t '_))) (if t1cdc@ls/false (apply (lambda () (call-with-values (lambda () (t1be5@gen-syntax t1c5c@src t1ca8@y t1c5e@r t1c5f@maps t1c60@ellipsis? t1c61@vec?)) (lambda (t1ce2@t1cdf t1ce3@t1ce1) (let ((t1ce6@maps t1ce3@t1ce1) (t1ce7@y t1ce2@t1cdf)) (call-with-values (lambda () (t1ca9@k t1ce6@maps)) (lambda (t1cee@t1ceb t1cef@t1ced) (let ((t1cf2@maps t1cef@t1ced) (t1cf3@x t1cee@t1ceb)) (values (t1be9@gen-append t1cf3@x t1ce7@y) t1cf2@maps)))))))) t1cdc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1cda@t)))))))))))) t1c9a@ls/false) (let ((t1cf6@t t1c98@t)) (let ((t1cf8@ls/false (td79@syntax-dispatch t1cf6@t '(any . any)))) (if t1cf8@ls/false (apply (lambda (t1cfa@x t1cfb@y) (call-with-values (lambda () (t1be5@gen-syntax t1c5c@src t1cfa@x t1c5e@r t1c5f@maps t1c60@ellipsis? '#f)) (lambda (t1d02@t1cff t1d03@t1d01) (let ((t1d06@maps t1d03@t1d01) (t1d07@xnew t1d02@t1cff)) (call-with-values (lambda () (t1be5@gen-syntax t1c5c@src t1cfb@y t1c5e@r t1d06@maps t1c60@ellipsis? t1c61@vec?)) (lambda (t1d0e@t1d0b t1d0f@t1d0d) (let ((t1d12@maps t1d0f@t1d0d) (t1d13@ynew t1d0e@t1d0b)) (values (t1bef@gen-cons t1c5d@e t1cfa@x t1cfb@y t1d07@xnew t1d13@ynew) t1d12@maps)))))))) t1cf8@ls/false) (let ((t1d16@t t1cf6@t)) (let ((t1d18@ls/false (td79@syntax-dispatch t1d16@t '#(vector each-any)))) (if t1d18@ls/false (apply (lambda (t1d1a@ls) (call-with-values (lambda () (t1be5@gen-syntax t1c5c@src t1d1a@ls t1c5e@r t1c5f@maps t1c60@ellipsis? '#t)) (lambda (t1d20@t1d1d t1d21@t1d1f) (let ((t1d24@maps t1d21@t1d1f) (t1d25@lsnew t1d20@t1d1d)) (values (t1bf1@gen-vector t1c5d@e t1d1a@ls t1d25@lsnew) t1d24@maps))))) t1d18@ls/false) (let ((t1d28@t t1d16@t)) (let ((t1d2a@ls/false (td79@syntax-dispatch t1d28@t '_))) (if t1d2a@ls/false (apply (lambda () (values (list 'quote t1c5d@e) t1c5f@maps)) t1d2a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1d28@t)))))))))))))))))))))))) (set! t1be7@gen-ref (lambda (t1c42@src t1c43@var t1c44@level t1c45@maps) (if (= t1c44@level '0) (values t1c43@var t1c45@maps) (if (null? t1c45@maps) (te59@syntax-violation '#f '"missing ellipsis in syntax form" t1c42@src) (call-with-values (lambda () (t1be7@gen-ref t1c42@src t1c43@var (- t1c44@level '1) (cdr t1c45@maps))) (lambda (t1c4e@t1c4b t1c4f@t1c4d) (let ((t1c52@outer-maps t1c4f@t1c4d) (t1c53@outer-var t1c4e@t1c4b)) (let ((t1c56@t (assq t1c53@outer-var (car t1c45@maps)))) (if t1c56@t ((lambda (t1c58@b) (values (cdr t1c58@b) t1c45@maps)) t1c56@t) (let ((t1c5a@inner-var (tafa@gen-lexical 'tmp))) (values t1c5a@inner-var (cons (cons (cons t1c53@outer-var t1c5a@inner-var) (car t1c45@maps)) t1c52@outer-maps)))))))))))) (set! t1be9@gen-append (lambda (t1c3e@x t1c3f@y) (if (fast-equal? t1c3f@y ''()) t1c3e@x (list 'append t1c3e@x t1c3f@y)))) (set! t1beb@gen-mappend (lambda (t1c3a@e t1c3b@map-env) (list 'apply '(primitive append) (t1bed@gen-map t1c3a@e t1c3b@map-env)))) (set! t1bed@gen-map (lambda (t1c28@e t1c29@map-env) (let ((t1c2c@formals (map cdr t1c29@map-env)) (t1c2d@actuals (map (lambda (t1c30@x) (list 'ref (car t1c30@x))) t1c29@map-env))) (if (eq? (car t1c28@e) 'ref) (car t1c2d@actuals) (if (for-all (lambda (t1c32@x) (and (eq? (car t1c32@x) 'ref) (memq (cadr t1c32@x) t1c2c@formals))) (cdr t1c28@e)) (let ((t1c34@args (map (let ((t1c36@r (map cons t1c2c@formals t1c2d@actuals))) (lambda (t1c38@x) (cdr (assq (cadr t1c38@x) t1c36@r)))) (cdr t1c28@e)))) (cons 'map (cons (list 'primitive (car t1c28@e)) t1c34@args))) (cons* 'map (list 'lambda t1c2c@formals t1c28@e) t1c2d@actuals)))))) (set! t1bef@gen-cons (lambda (t1c18@e t1c19@x t1c1a@y t1c1b@xnew t1c1c@ynew) (let ((t1c22@t (car t1c1c@ynew))) (if (memv t1c22@t '(quote)) (if (eq? (car t1c1b@xnew) 'quote) (let ((t1c24@xnew (cadr t1c1b@xnew)) (t1c25@ynew (cadr t1c1c@ynew))) (if (and (eq? t1c24@xnew t1c19@x) (eq? t1c25@ynew t1c1a@y)) (list 'quote t1c18@e) (list 'quote (cons t1c24@xnew t1c25@ynew)))) (if (null? (cadr t1c1c@ynew)) (list 'list t1c1b@xnew) (list 'cons t1c1b@xnew t1c1c@ynew))) (if (memv t1c22@t '(list)) (cons 'list (cons t1c1b@xnew (cdr t1c1c@ynew))) (list 'cons t1c1b@xnew t1c1c@ynew)))))) (set! t1bf1@gen-vector (lambda (t1c12@e t1c13@ls t1c14@lsnew) (if (eq? (car t1c14@lsnew) 'quote) (if (eq? (cadr t1c14@lsnew) t1c13@ls) (list 'quote t1c12@e) (list 'quote (list->vector (cadr t1c14@lsnew)))) (if (eq? (car t1c14@lsnew) 'list) (cons 'vector (cdr t1c14@lsnew)) (list 'list->vector t1c14@lsnew))))) (set! t1bf3@regen (lambda (t1c0c@x) (let ((t1c0e@t (car t1c0c@x))) (if (memv t1c0e@t '(ref)) (cadr t1c0c@x) (if (memv t1c0e@t '(primitive)) (list 'primitive (cadr t1c0c@x)) (if (memv t1c0e@t '(quote)) (list 'quote (cadr t1c0c@x)) (if (memv t1c0e@t '(lambda)) (tad5@ta01@build-lambda '#f (cadr t1c0c@x) (t1bf3@regen (caddr t1c0c@x))) (if (memv t1c0e@t '(map)) (let ((t1c10@ls (map t1bf3@regen (cdr t1c0c@x)))) (cons '(primitive ellipsis-map) t1c10@ls)) (cons (list 'primitive (car t1c0c@x)) (map t1bf3@regen (cdr t1c0c@x))))))))))) (lambda (t1bf4@e t1bf5@r t1bf6@mr) (let ((t1bfa@t t1bf4@e)) (let ((t1bfc@ls/false (td79@syntax-dispatch t1bfa@t '(_ any)))) (if t1bfc@ls/false (apply (lambda (t1bfe@x) (call-with-values (lambda () (t1be5@gen-syntax t1bf4@e t1bfe@x t1bf5@r '() td7b@ellipsis? '#f)) (lambda (t1c04@t1c01 t1c05@t1c03) (let ((t1c08@maps t1c05@t1c03) (t1c09@e t1c04@t1c01)) (t1bf3@regen t1c09@e))))) t1bfc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1bfa@t)))))))) (set! t2855@td85@syntax-transformer td85@syntax-transformer) (set! td87@core-macro-transformer (lambda (t1d2c@name) (let ((t1d2e@t t1d2c@name)) (if (memv t1d2e@t '(quote)) td29@quote-transformer (if (memv t1d2e@t '(lambda)) td2d@lambda-transformer (if (memv t1d2e@t '(case-lambda)) td2b@case-lambda-transformer (if (memv t1d2e@t '(letrec)) td11@letrec-transformer (if (memv t1d2e@t '(letrec*)) td13@letrec*-transformer (if (memv t1d2e@t '(let)) td0f@let-transformer (if (memv t1d2e@t '(if)) td21@if-transformer (if (memv t1d2e@t '(and)) td23@and-transformer (if (memv t1d2e@t '(or)) td25@or-transformer (if (memv t1d2e@t '(foreign-call)) td75@foreign-call-transformer (if (memv t1d2e@t '(syntax-case)) td81@syntax-case-transformer (if (memv t1d2e@t '(syntax)) td85@syntax-transformer (if (memv t1d2e@t '(type-descriptor)) td17@type-descriptor-transformer (if (memv t1d2e@t '(record-type-descriptor)) td19@record-type-descriptor-transformer (if (memv t1d2e@t '(record-constructor-descriptor)) td1b@record-constructor-descriptor-transformer (if (memv t1d2e@t '(fluid-let-syntax)) td15@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" t1d2c@name)))))))))))))))))))) (set! t2856@td87@core-macro-transformer td87@core-macro-transformer) (set! td89@symbol-macro (lambda (t1d30@x t1d31@set) (let ((t1d34@t t1d30@x)) (let ((t1d36@ls/false (td79@syntax-dispatch t1d34@t '(_ any)))) (if (and t1d36@ls/false (apply (lambda (t1d38@name) (and (tb72@id? t1d38@name) (memq (tb74@id->sym t1d38@name) t1d31@set))) t1d36@ls/false)) (apply (lambda (t1d3a@name) (td2f@bless (list 'quote t1d3a@name))) t1d36@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1d34@t)))))) (set! t2857@td89@symbol-macro td89@symbol-macro) (set! td8b@macro-transformer (lambda (t1d3c@x) (if (procedure? t1d3c@x) t1d3c@x (if (symbol? t1d3c@x) (let ((t1d3e@t t1d3c@x)) (if (memv t1d3e@t '(define-record-type)) td6d@define-record-type-macro (if (memv t1d3e@t '(define-struct)) td6b@define-struct-macro (if (memv t1d3e@t '(include)) td61@include-macro (if (memv t1d3e@t '(cond)) td5d@cond-macro (if (memv t1d3e@t '(let)) td35@let-macro (if (memv t1d3e@t '(do)) td55@do-macro (if (memv t1d3e@t '(or)) td59@or-macro (if (memv t1d3e@t '(and)) td5b@and-macro (if (memv t1d3e@t '(let*)) td57@let*-macro (if (memv t1d3e@t '(let-values)) td37@let-values-macro (if (memv t1d3e@t '(let*-values)) td39@let*-values-macro (if (memv t1d3e@t '(syntax-rules)) td65@syntax-rules-macro (if (memv t1d3e@t '(quasiquote)) td67@quasiquote-macro (if (memv t1d3e@t '(quasisyntax)) td69@quasisyntax-macro (if (memv t1d3e@t '(with-syntax)) td31@with-syntax-macro (if (memv t1d3e@t '(when)) td1d@when-macro (if (memv t1d3e@t '(unless)) td1f@unless-macro (if (memv t1d3e@t '(case)) td27@case-macro (if (memv t1d3e@t '(identifier-syntax)) td53@identifier-syntax-macro (if (memv t1d3e@t '(time)) td4b@time-macro (if (memv t1d3e@t '(delay)) td4d@delay-macro (if (memv t1d3e@t '(assert)) td4f@assert-macro (if (memv t1d3e@t '(endianness)) td51@endianness-macro (if (memv t1d3e@t '(guard)) td47@guard-macro (if (memv t1d3e@t '(define-enumeration)) td49@define-enumeration-macro (if (memv t1d3e@t '(trace-lambda)) td3b@trace-lambda-macro (if (memv t1d3e@t '(trace-define)) td3d@trace-define-macro (if (memv t1d3e@t '(trace-define-syntax)) td3f@trace-define-syntax-macro (if (memv t1d3e@t '(trace-let-syntax)) td43@trace-let-syntax-macro (if (memv t1d3e@t '(trace-letrec-syntax)) td45@trace-letrec-syntax-macro (if (memv t1d3e@t '(define-condition-type)) td6f@define-condition-type-macro (if (memv t1d3e@t '(parameterize)) td73@parameterize-macro (if (memv t1d3e@t '(include-into)) td63@include-into-macro (if (memv t1d3e@t '(eol-style)) (lambda (t1d40@x) (td89@symbol-macro t1d40@x '(none lf cr crlf nel crnel ls))) (if (memv t1d3e@t '(error-handling-mode)) (lambda (t1d42@x) (td89@symbol-macro t1d42@x '(ignore raise replace))) (if (memv t1d3e@t '(buffer-mode)) (lambda (t1d44@x) (td89@symbol-macro t1d44@x '(none line block))) (if (memv t1d3e@t '(file-options)) taed@file-options-macro (if (memv t1d3e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) td71@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" t1d3c@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" t1d3c@x))))) (set! t2858@td8b@macro-transformer td8b@macro-transformer) (set! td8d@local-macro-transformer (lambda (t1d46@x) (car t1d46@x))) (set! t2859@td8d@local-macro-transformer td8d@local-macro-transformer) (set! td8f@do-macro-call (lambda (t1d48@transformer t1d49@expr) (let ((t1d4c@out (t1d48@transformer (tb5c@add-mark tb56@anti-mark t1d49@expr '#f)))) (begin (let t1d50@f ((t1d4e@x t1d4c@out)) (if (not (tb3e@stx? t1d4e@x)) (if (pair? t1d4e@x) (begin (t1d50@f (car t1d4e@x)) (t1d50@f (cdr t1d4e@x))) (if (vector? t1d4e@x) (vector-for-each t1d50@f t1d4e@x) (if (symbol? t1d4e@x) (te59@syntax-violation '#f '"raw symbol encountered in output of macro" t1d49@expr t1d4e@x) (void)))) (void))) (tb5c@add-mark (tb54@gen-mark) t1d4c@out t1d49@expr))))) (set! t285a@td8f@do-macro-call td8f@do-macro-call) (set! td91@chi-macro (lambda (t1d52@p t1d53@e) (td8f@do-macro-call (td8b@macro-transformer t1d52@p) t1d53@e))) (set! t285b@td91@chi-macro td91@chi-macro) (set! td93@chi-local-macro (lambda (t1d56@p t1d57@e) (td8f@do-macro-call (td8d@local-macro-transformer t1d56@p) t1d57@e))) (set! t285c@td93@chi-local-macro td93@chi-local-macro) (set! td95@chi-global-macro (lambda (t1d5a@p t1d5b@e) (let ((t1d5e@lib (car t1d5a@p)) (t1d5f@loc (cdr t1d5a@p))) (begin (t989@t7d8@visit-library t1d5e@lib) (let ((t1d62@x (symbol-value t1d5f@loc))) (let ((t1d64@transformer (if (procedure? t1d62@x) t1d62@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" t1d62@x)))) (td8f@do-macro-call t1d64@transformer t1d5b@e))))))) (set! t285d@td95@chi-global-macro td95@chi-global-macro) (set! td97@chi-expr* (lambda (t1d66@e* t1d67@r t1d68@mr) (if (null? t1d66@e*) '() (let ((t1d6c@e (td9b@chi-expr (car t1d66@e*) t1d67@r t1d68@mr))) (cons t1d6c@e (td97@chi-expr* (cdr t1d66@e*) t1d67@r t1d68@mr)))))) (set! t285e@td97@chi-expr* td97@chi-expr*) (set! td99@chi-application (lambda (t1d6e@e t1d6f@r t1d70@mr) (let ((t1d74@t t1d6e@e)) (let ((t1d76@ls/false (td79@syntax-dispatch t1d74@t '(any . each-any)))) (if t1d76@ls/false (apply (lambda (t1d78@rator t1d79@rands) (let ((t1d7c@rator (td9b@chi-expr t1d78@rator t1d6f@r t1d70@mr))) (cons t1d7c@rator (td97@chi-expr* t1d79@rands t1d6f@r t1d70@mr)))) t1d76@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1d74@t)))))) (set! t285f@td99@chi-application td99@chi-application) (set! td9b@chi-expr (lambda (t1d7e@e t1d7f@r t1d80@mr) (call-with-values (lambda () (tb94@syntax-type t1d7e@e t1d7f@r)) (lambda (t1d8a@t1d85 t1d8b@t1d87 t1d8c@t1d89) (let ((t1d90@kwd t1d8c@t1d89) (t1d91@value t1d8b@t1d87) (t1d92@type t1d8a@t1d85)) (let ((t1d96@t t1d92@type)) (if (memv t1d96@t '(core-macro)) (let ((t1d98@transformer (td87@core-macro-transformer t1d91@value))) (t1d98@transformer t1d7e@e t1d7f@r t1d80@mr)) (if (memv t1d96@t '(global)) (let ((t1d9a@lib (car t1d91@value))) (let ((t1d9c@loc (cdr t1d91@value))) (begin ((tde1@inv-collector) t1d9a@lib) t1d9c@loc))) (if (memv t1d96@t '(core-prim)) (let ((t1d9e@name t1d91@value)) (list 'primitive t1d9e@name)) (if (memv t1d96@t '(call)) (td99@chi-application t1d7e@e t1d7f@r t1d80@mr) (if (memv t1d96@t '(lexical)) (let ((t1da0@lex (td03@lexical-var t1d91@value))) t1da0@lex) (if (memv t1d96@t '(global-macro global-macro!)) (td9b@chi-expr (td95@chi-global-macro t1d91@value t1d7e@e) t1d7f@r t1d80@mr) (if (memv t1d96@t '(local-macro local-macro!)) (td9b@chi-expr (td93@chi-local-macro t1d91@value t1d7e@e) t1d7f@r t1d80@mr) (if (memv t1d96@t '(macro macro!)) (td9b@chi-expr (td91@chi-macro t1d91@value t1d7e@e) t1d7f@r t1d80@mr) (if (memv t1d96@t '(constant)) (let ((t1da2@datum t1d91@value)) (list 'quote t1da2@datum)) (if (memv t1d96@t '(set!)) (td9d@chi-set! t1d7e@e t1d7f@r t1d80@mr) (if (memv t1d96@t '(begin)) (let ((t1da4@t t1d7e@e)) (let ((t1da6@ls/false (td79@syntax-dispatch t1da4@t '(_ any . each-any)))) (if t1da6@ls/false (apply (lambda (t1da8@x t1da9@x*) (tad7@ta31@build-sequence '#f (td97@chi-expr* (cons t1da8@x t1da9@x*) t1d7f@r t1d80@mr))) t1da6@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1da4@t)))) (if (memv t1d96@t '(let-syntax letrec-syntax)) (let ((t1dac@t t1d7e@e)) (let ((t1dae@ls/false (td79@syntax-dispatch t1dac@t '(_ #(each (any any)) any . each-any)))) (if (and t1dae@ls/false (apply (lambda (t1db0@xlhs* t1db1@xrhs* t1db2@xbody t1db3@xbody*) (if (not (tb7a@valid-bound-ids? t1db0@xlhs*)) (te59@syntax-violation '#f '"invalid identifiers" t1d7e@e) (void))) t1dae@ls/false)) (apply (lambda (t1db8@xlhs* t1db9@xrhs* t1dba@xbody t1dbb@xbody*) (let ((t1dc0@xlab* (map tafe@gen-label t1db8@xlhs*))) (let ((t1dc2@xrib (tb32@make-full-rib t1db8@xlhs* t1dc0@xlab*))) (let ((t1dc4@xb* (map (lambda (t1dc6@x) (tbaa@make-eval-transformer (tdd3@expand-transformer (if (eq? t1d92@type 'let-syntax) t1dc6@x (tb5e@add-subst t1dc2@xrib t1dc6@x)) t1d80@mr))) t1db9@xrhs*))) (tad7@ta31@build-sequence '#f (td97@chi-expr* (map (lambda (t1dc8@x) (tb5e@add-subst t1dc2@xrib t1dc8@x)) (cons t1dba@xbody t1dbb@xbody*)) (append (map cons t1dc0@xlab* t1dc4@xb*) t1d7f@r) (append (map cons t1dc0@xlab* t1dc4@xb*) t1d80@mr))))))) t1dae@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1dac@t)))) (if (memv t1d96@t '(displaced-lexical)) (te59@syntax-violation '#f '"identifier out of context" t1d7e@e) (if (memv t1d96@t '(syntax)) (te59@syntax-violation '#f '"reference to pattern variable outside a syntax form" t1d7e@e) (if (memv t1d96@t '(define define-syntax module import library)) (te59@syntax-violation '#f (string-append (let ((t1dca@t t1d92@type)) (if (memv t1dca@t '(define)) '"a definition" (if (memv t1dca@t '(define-syntax)) '"a define-syntax" (if (memv t1dca@t '(module)) '"a module definition" (if (memv t1dca@t '(library)) '"a library definition" (if (memv t1dca@t '(import)) '"an import declaration" (if (memv t1dca@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") t1d7e@e) (if (memv t1d96@t '(mutable)) (te59@syntax-violation '#f '"attempt to reference an unexportable variable" t1d7e@e) (te59@syntax-violation '#f '"invalid expression" t1d7e@e))))))))))))))))))))))) (set! t2860@td9b@chi-expr td9b@chi-expr) (set! td9d@chi-set! (lambda (t1dcc@e t1dcd@r t1dce@mr) (let ((t1dd2@t t1dcc@e)) (let ((t1dd4@ls/false (td79@syntax-dispatch t1dd2@t '(_ any any)))) (if (and t1dd4@ls/false (apply (lambda (t1dd6@x t1dd7@v) (tb72@id? t1dd6@x)) t1dd4@ls/false)) (apply (lambda (t1dda@x t1ddb@v) (call-with-values (lambda () (tb94@syntax-type t1dda@x t1dcd@r)) (lambda (t1de4@t1ddf t1de5@t1de1 t1de6@t1de3) (let ((t1dea@kwd t1de6@t1de3) (t1deb@value t1de5@t1de1) (t1dec@type t1de4@t1ddf)) (let ((t1df0@t t1dec@type)) (if (memv t1df0@t '(lexical)) (begin (td07@set-lexical-mutable! t1deb@value '#t) (list 'set! (td03@lexical-var t1deb@value) (td9b@chi-expr t1ddb@v t1dcd@r t1dce@mr))) (if (memv t1df0@t '(core-prim)) (te59@syntax-violation '#f '"cannot modify imported core primitive" t1dcc@e) (if (memv t1df0@t '(global)) (te59@syntax-violation '#f '"attempt to modify imported binding" t1dcc@e) (if (memv t1df0@t '(global-macro!)) (td9b@chi-expr (td95@chi-global-macro t1deb@value t1dcc@e) t1dcd@r t1dce@mr) (if (memv t1df0@t '(local-macro!)) (td9b@chi-expr (td93@chi-local-macro t1deb@value t1dcc@e) t1dcd@r t1dce@mr) (if (memv t1df0@t '(mutable)) (te59@syntax-violation '#f '"attempt to assign to an unexportable variable" t1dcc@e) (te59@syntax-violation '#f '"invalid syntax" t1dcc@e)))))))))))) t1dd4@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1dd2@t)))))) (set! t2861@td9d@chi-set! td9d@chi-set!) (set! td9f@verify-formals (lambda (t1df2@fmls t1df3@stx) (let ((t1df6@t t1df2@fmls)) (let ((t1df8@ls/false (td79@syntax-dispatch t1df6@t 'each-any))) (if t1df8@ls/false (apply (lambda (t1dfa@x*) (if (not (tb7a@valid-bound-ids? t1dfa@x*)) (td33@invalid-fmls-error t1df3@stx t1df2@fmls) (void))) t1df8@ls/false) (let ((t1dfc@t t1df6@t)) (let ((t1dfe@ls/false (td79@syntax-dispatch t1dfc@t '#(each+ any () any)))) (if t1dfe@ls/false (apply (lambda (t1e00@x* t1e01@x) (if (not (tb7a@valid-bound-ids? (cons t1e01@x t1e00@x*))) (td33@invalid-fmls-error t1df3@stx t1df2@fmls) (void))) t1dfe@ls/false) (let ((t1e04@t t1dfc@t)) (let ((t1e06@ls/false (td79@syntax-dispatch t1e04@t '_))) (if t1e06@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid syntax" t1df3@stx)) t1e06@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1e04@t)))))))))))) (set! t2862@td9f@verify-formals td9f@verify-formals) (set! tda1@chi-lambda-clause (lambda (t1e08@stx t1e09@fmls t1e0a@body* t1e0b@r t1e0c@mr) (let ((t1e12@t t1e09@fmls)) (let ((t1e14@ls/false (td79@syntax-dispatch t1e12@t 'each-any))) (if t1e14@ls/false (apply (lambda (t1e16@x*) (begin (td9f@verify-formals t1e09@fmls t1e08@stx) (let ((t1e18@lex* (map tafa@gen-lexical t1e16@x*)) (t1e19@lab* (map tafe@gen-label t1e16@x*))) (values t1e18@lex* (tdb1@chi-internal (tb5e@add-subst (tb32@make-full-rib t1e16@x* t1e19@lab*) t1e0a@body*) (td0b@add-lexicals t1e19@lab* t1e18@lex* t1e0b@r) t1e0c@mr))))) t1e14@ls/false) (let ((t1e1c@t t1e12@t)) (let ((t1e1e@ls/false (td79@syntax-dispatch t1e1c@t '#(each+ any () any)))) (if t1e1e@ls/false (apply (lambda (t1e20@x* t1e21@x) (begin (td9f@verify-formals t1e09@fmls t1e08@stx) (let ((t1e24@lex* (map tafa@gen-lexical t1e20@x*)) (t1e25@lab* (map tafe@gen-label t1e20@x*)) (t1e26@lex (tafa@gen-lexical t1e21@x)) (t1e27@lab (tafe@gen-label t1e21@x))) (values (append t1e24@lex* t1e26@lex) (tdb1@chi-internal (tb5e@add-subst (tb32@make-full-rib (cons t1e21@x t1e20@x*) (cons t1e27@lab t1e25@lab*)) t1e0a@body*) (td0b@add-lexicals (cons t1e27@lab t1e25@lab*) (cons t1e26@lex t1e24@lex*) t1e0b@r) t1e0c@mr))))) t1e1e@ls/false) (let ((t1e2c@t t1e1c@t)) (let ((t1e2e@ls/false (td79@syntax-dispatch t1e2c@t '_))) (if t1e2e@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid syntax" t1e09@fmls)) t1e2e@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1e2c@t)))))))))))) (set! t2863@tda1@chi-lambda-clause tda1@chi-lambda-clause) (set! tda3@chi-lambda-clause* (lambda (t1e30@stx t1e31@fmls* t1e32@body** t1e33@r t1e34@mr) (if (null? t1e31@fmls*) (values '() '()) (call-with-values (lambda () (tda1@chi-lambda-clause t1e30@stx (car t1e31@fmls*) (car t1e32@body**) t1e33@r t1e34@mr)) (lambda (t1e3e@t1e3b t1e3f@t1e3d) (let ((t1e42@b t1e3f@t1e3d) (t1e43@a t1e3e@t1e3b)) (call-with-values (lambda () (tda3@chi-lambda-clause* t1e30@stx (cdr t1e31@fmls*) (cdr t1e32@body**) t1e33@r t1e34@mr)) (lambda (t1e4a@t1e47 t1e4b@t1e49) (let ((t1e4e@b* t1e4b@t1e49) (t1e4f@a* t1e4a@t1e47)) (values (cons t1e43@a t1e4f@a*) (cons t1e42@b t1e4e@b*))))))))))) (set! t2864@tda3@chi-lambda-clause* tda3@chi-lambda-clause*) (set! tda5@chi-defun (lambda (t1e52@x t1e53@r t1e54@mr) (let ((t1e58@fmls (car t1e52@x)) (t1e59@body* (cdr t1e52@x))) (call-with-values (lambda () (tda1@chi-lambda-clause t1e58@fmls t1e58@fmls t1e59@body* t1e53@r t1e54@mr)) (lambda (t1e60@t1e5d t1e61@t1e5f) (let ((t1e64@body t1e61@t1e5f) (t1e65@fmls t1e60@t1e5d)) (tad5@ta01@build-lambda '#f t1e65@fmls t1e64@body))))))) (set! t2865@tda5@chi-defun tda5@chi-defun) (set! tda7@chi-rhs (lambda (t1e68@rhs t1e69@r t1e6a@mr) (let ((t1e6e@t (car t1e68@rhs))) (if (memv t1e6e@t '(defun)) (tda5@chi-defun (cdr t1e68@rhs) t1e69@r t1e6a@mr) (if (memv t1e6e@t '(expr)) (let ((t1e70@expr (cdr t1e68@rhs))) (td9b@chi-expr t1e70@expr t1e69@r t1e6a@mr)) (if (memv t1e6e@t '(top-expr)) (let ((t1e72@expr (cdr t1e68@rhs))) (tad7@ta31@build-sequence '#f (list (td9b@chi-expr t1e72@expr t1e69@r t1e6a@mr) (tad8@ta33@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" t1e68@rhs))))))) (set! t2866@tda7@chi-rhs tda7@chi-rhs) (set! tda9@expand-interaction-rhs*/init* (lambda (t1e74@lhs* t1e75@rhs* t1e76@init* t1e77@r t1e78@mr) (let t1e82@f ((t1e7e@lhs* t1e74@lhs*) (t1e7f@rhs* t1e75@rhs*)) (if (null? t1e7e@lhs*) (map (lambda (t1e84@x) (td9b@chi-expr t1e84@x t1e77@r t1e78@mr)) t1e76@init*) (let ((t1e86@lhs (car t1e7e@lhs*)) (t1e87@rhs (car t1e7f@rhs*))) (let ((t1e8a@t (car t1e87@rhs))) (if (memv t1e8a@t '(defun)) (let ((t1e8c@rhs (tda5@chi-defun (cdr t1e87@rhs) t1e77@r t1e78@mr))) (cons (list 'set! t1e86@lhs t1e8c@rhs) (t1e82@f (cdr t1e7e@lhs*) (cdr t1e7f@rhs*)))) (if (memv t1e8a@t '(expr)) (let ((t1e8e@rhs (td9b@chi-expr (cdr t1e87@rhs) t1e77@r t1e78@mr))) (cons (list 'set! t1e86@lhs t1e8e@rhs) (t1e82@f (cdr t1e7e@lhs*) (cdr t1e7f@rhs*)))) (if (memv t1e8a@t '(top-expr)) (let ((t1e90@e (td9b@chi-expr (cdr t1e87@rhs) t1e77@r t1e78@mr))) (cons t1e90@e (t1e82@f (cdr t1e7e@lhs*) (cdr t1e7f@rhs*)))) (error 'expand-interaction '"invallid" t1e87@rhs)))))))))) (set! t2867@tda9@expand-interaction-rhs*/init* tda9@expand-interaction-rhs*/init*) (set! tdab@chi-rhs* (lambda (t1e92@rhs* t1e93@r t1e94@mr) (let t1e9a@f ((t1e98@ls t1e92@rhs*)) (if (null? t1e98@ls) '() (let ((t1e9c@a (tda7@chi-rhs (car t1e98@ls) t1e93@r t1e94@mr))) (cons t1e9c@a (t1e9a@f (cdr t1e98@ls)))))))) (set! t2868@tdab@chi-rhs* tdab@chi-rhs*) (set! tdad@find-bound=? (lambda (t1e9e@x t1e9f@lhs* t1ea0@rhs*) (if (null? t1e9f@lhs*) '#f (if (tb76@bound-id=? t1e9e@x (car t1e9f@lhs*)) (car t1ea0@rhs*) (tdad@find-bound=? t1e9e@x (cdr t1e9f@lhs*) (cdr t1ea0@rhs*)))))) (set! t2869@tdad@find-bound=? tdad@find-bound=?) (set! tdaf@find-dups (lambda (t1ea4@ls) (let t1eaa@f ((t1ea6@ls t1ea4@ls) (t1ea7@dups '())) (if (null? t1ea6@ls) t1ea7@dups (let ((t1eac@t (tdad@find-bound=? (car t1ea6@ls) (cdr t1ea6@ls) (cdr t1ea6@ls)))) (if t1eac@t ((lambda (t1eae@x) (t1eaa@f (cdr t1ea6@ls) (cons (list (car t1ea6@ls) t1eae@x) t1ea7@dups))) t1eac@t) (t1eaa@f (cdr t1ea6@ls) t1ea7@dups))))))) (set! t286a@tdaf@find-dups tdaf@find-dups) (set! tdb1@chi-internal (lambda (t1eb0@e* t1eb1@r t1eb2@mr) (let ((t1eb6@rib (tb26@make-empty-rib))) (call-with-values (lambda () (tdd1@chi-body* (map (lambda (t1ec8@x) (tb5e@add-subst t1eb6@rib t1ec8@x)) (tb70@syntax->list t1eb0@e*)) t1eb1@r t1eb2@mr '() '() '() '() '() t1eb6@rib '#f)) (lambda (t1eca@t1eb9 t1ecb@t1ebb t1ecc@t1ebd t1ecd@t1ebf t1ece@t1ec1 t1ecf@t1ec3 t1ed0@t1ec5 t1ed1@t1ec7) (let ((t1eda@_exp* t1ed1@t1ec7) (t1edb@kwd* t1ed0@t1ec5) (t1edc@mod** t1ecf@t1ec3) (t1edd@rhs* t1ece@t1ec1) (t1ede@lex* t1ecd@t1ebf) (t1edf@mr t1ecc@t1ebd) (t1ee0@r t1ecb@t1ebb) (t1ee1@e* t1eca@t1eb9)) (begin (if (null? t1ee1@e*) (te59@syntax-violation '#f '"no expression in body" t1ee1@e*) (void)) (let ((t1eea@init* (td97@chi-expr* (append (apply append (reverse t1edc@mod**)) t1ee1@e*) t1ee0@r t1edf@mr))) (let ((t1eec@rhs* (tdab@chi-rhs* t1edd@rhs* t1ee0@r t1edf@mr))) (tadc@ta3b@build-letrec* '#f (reverse t1ede@lex*) (reverse t1eec@rhs*) (tad7@ta31@build-sequence '#f t1eea@init*))))))))))) (set! t286b@tdb1@chi-internal tdb1@chi-internal) (set! tdb3@parse-module (lambda (t1eee@e) (let ((t1ef0@t t1eee@e)) (let ((t1ef2@ls/false (td79@syntax-dispatch t1ef0@t '(_ each-any . each-any)))) (if t1ef2@ls/false (apply (lambda (t1ef4@export* t1ef5@b*) (begin (if (not (for-all tb72@id? t1ef4@export*)) (te59@syntax-violation '#f '"module exports must be identifiers" t1eee@e) (void)) (values '#f (list->vector t1ef4@export*) t1ef5@b*))) t1ef2@ls/false) (let ((t1ef8@t t1ef0@t)) (let ((t1efa@ls/false (td79@syntax-dispatch t1ef8@t '(_ any each-any . each-any)))) (if t1efa@ls/false (apply (lambda (t1efc@name t1efd@export* t1efe@b*) (begin (if (not (tb72@id? t1efc@name)) (te59@syntax-violation '#f '"module name must be an identifier" t1eee@e) (void)) (if (not (for-all tb72@id? t1efd@export*)) (te59@syntax-violation '#f '"module exports must be identifiers" t1eee@e) (void)) (values t1efc@name (list->vector t1efd@export*) t1efe@b*))) t1efa@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1ef8@t))))))))) (set! t286c@tdb3@parse-module tdb3@parse-module) (set! tdbd@module-interface? (lambda (t1f02@x) (and (simple-struct? t1f02@x) (eq? (simple-struct-name t1f02@x) 'module-interface)))) (set! t286d@tdbd@module-interface? tdbd@module-interface?) (set! tdbf@module-interface-first-mark (lambda (t1f04@x) (simple-struct-ref t1f04@x '0))) (set! t286e@tdbf@module-interface-first-mark tdbf@module-interface-first-mark) (set! tdc1@set-module-interface-first-mark! (lambda (t1f06@x t1f07@val) (simple-struct-set! t1f06@x '0 t1f07@val))) (set! t286f@tdc1@set-module-interface-first-mark! tdc1@set-module-interface-first-mark!) (set! tdc3@module-interface-exp-id-vec (lambda (t1f0a@x) (simple-struct-ref t1f0a@x '1))) (set! t2870@tdc3@module-interface-exp-id-vec tdc3@module-interface-exp-id-vec) (set! tdc5@set-module-interface-exp-id-vec! (lambda (t1f0c@x t1f0d@val) (simple-struct-set! t1f0c@x '1 t1f0d@val))) (set! t2871@tdc5@set-module-interface-exp-id-vec! tdc5@set-module-interface-exp-id-vec!) (set! tdc7@module-interface-exp-lab-vec (lambda (t1f10@x) (simple-struct-ref t1f10@x '2))) (set! t2872@tdc7@module-interface-exp-lab-vec tdc7@module-interface-exp-lab-vec) (set! tdc9@set-module-interface-exp-lab-vec! (lambda (t1f12@x t1f13@val) (simple-struct-set! t1f12@x '2 t1f13@val))) (set! t2873@tdc9@set-module-interface-exp-lab-vec! tdc9@set-module-interface-exp-lab-vec!) (set! tdcb@dummy '3) (set! t2874@tdcb@dummy tdcb@dummy) (set! tdcd@module-interface-exp-id* (lambda (t1f16@iface t1f17@id) (let ((t1f1b@diff-marks '#f)) (begin (set! t1f1b@diff-marks (lambda (t1f22@ls t1f23@x) (begin (if (null? t1f22@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((t1f26@a (car t1f22@ls))) (if (eq? t1f26@a t1f23@x) '() (cons t1f26@a (t1f1b@diff-marks (cdr t1f22@ls) t1f23@x))))))) (let ((t1f1c@diff (t1f1b@diff-marks (tb44@stx-mark* t1f17@id) (tdbf@module-interface-first-mark t1f16@iface))) (t1f1d@id-vec (tdc3@module-interface-exp-id-vec t1f16@iface))) (if (null? t1f1c@diff) t1f1d@id-vec (vector-map (lambda (t1f20@x) (make-simple-struct 'stx '5 (list (tb40@stx-expr t1f20@x) (append t1f1c@diff (tb44@stx-mark* t1f20@x)) '() '()))) t1f1d@id-vec))))))) (set! t2875@tdcd@module-interface-exp-id* tdcd@module-interface-exp-id*) (set! tdcf@chi-internal-module (lambda (t1f28@e t1f29@r t1f2a@mr t1f2b@lex* t1f2c@rhs* t1f2d@mod** t1f2e@kwd*) (call-with-values (lambda () (tdb3@parse-module t1f28@e)) (lambda (t1f3c@t1f37 t1f3d@t1f39 t1f3e@t1f3b) (let ((t1f42@e* t1f3e@t1f3b) (t1f43@exp-id* t1f3d@t1f39) (t1f44@name t1f3c@t1f37)) (let ((t1f48@rib (tb26@make-empty-rib))) (let ((t1f4a@e* (map (lambda (t1f4c@x) (tb5e@add-subst t1f48@rib t1f4c@x)) (tb70@syntax->list t1f42@e*)))) (call-with-values (lambda () (tdd1@chi-body* t1f4a@e* t1f29@r t1f2a@mr t1f2b@lex* t1f2c@rhs* t1f2d@mod** t1f2e@kwd* '() t1f48@rib '#f)) (lambda (t1f5e@t1f4f t1f5f@t1f51 t1f60@t1f53 t1f61@t1f55 t1f62@t1f57 t1f63@t1f59 t1f64@t1f5b t1f65@t1f5d) (let ((t1f6e@_exp* t1f65@t1f5d) (t1f6f@kwd* t1f64@t1f5b) (t1f70@mod** t1f63@t1f59) (t1f71@rhs* t1f62@t1f57) (t1f72@lex* t1f61@t1f55) (t1f73@mr t1f60@t1f53) (t1f74@r t1f5f@t1f51) (t1f75@e* t1f5e@t1f4f)) (let ((t1f7e@exp-lab* (vector-map (lambda (t1f82@x) (or (tb88@id->label (make-simple-struct 'stx '5 (list (tb74@id->sym t1f82@x) (tb44@stx-mark* t1f82@x) (list t1f48@rib) '()))) (te59@syntax-violation '#f '"cannot find module export" t1f82@x))) t1f43@exp-id*)) (t1f7f@mod** (cons t1f75@e* t1f70@mod**))) (if (not t1f44@name) (values t1f72@lex* t1f71@rhs* t1f43@exp-id* t1f7e@exp-lab* t1f74@r t1f73@mr t1f7f@mod** t1f6f@kwd*) (let ((t1f84@lab (tafe@gen-label 'module)) (t1f85@iface (make-simple-struct 'module-interface '4 (list (car (tb44@stx-mark* t1f44@name)) (vector-map (lambda (t1f88@x) (make-simple-struct 'stx '5 (list (tb40@stx-expr t1f88@x) (tb44@stx-mark* t1f88@x) '() '()))) t1f43@exp-id*) t1f7e@exp-lab*)))) (values t1f72@lex* t1f71@rhs* (vector t1f44@name) (vector t1f84@lab) (cons (cons t1f84@lab (cons '$module t1f85@iface)) t1f74@r) (cons (cons t1f84@lab (cons '$module t1f85@iface)) t1f73@mr) t1f7f@mod** t1f6f@kwd*)))))))))))))) (set! t2876@tdcf@chi-internal-module tdcf@chi-internal-module) (set! tdd1@chi-body* (lambda (t1f8a@e* t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1f90@kwd* t1f91@exp* t1f92@rib t1f93@top?) (if (null? t1f8a@e*) (values t1f8a@e* t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1f90@kwd* t1f91@exp*) (let ((t1f9e@e (car t1f8a@e*))) (call-with-values (lambda () (tb94@syntax-type t1f9e@e t1f8b@r)) (lambda (t1fa6@t1fa1 t1fa7@t1fa3 t1fa8@t1fa5) (let ((t1fac@kwd t1fa8@t1fa5) (t1fad@value t1fa7@t1fa3) (t1fae@type t1fa6@t1fa1)) (let ((t1fb2@kwd* (if (tb72@id? t1fac@kwd) (cons t1fac@kwd t1f90@kwd*) t1f90@kwd*))) (let ((t1fb4@t t1fae@type)) (if (memv t1fb4@t '(define)) (call-with-values (lambda () (tcfb@parse-define t1f9e@e)) (lambda (t1fba@t1fb7 t1fbb@t1fb9) (let ((t1fbe@rhs t1fbb@t1fb9) (t1fbf@id t1fba@t1fb7)) (begin (if (tb7e@bound-id-member? t1fbf@id t1fb2@kwd*) (te59@syntax-violation '#f '"cannot redefine keyword" t1f9e@e) (void)) (call-with-values (lambda () (tb02@gen-define-label+loc t1fbf@id t1f92@rib)) (lambda (t1fc6@t1fc3 t1fc7@t1fc5) (let ((t1fca@lex t1fc7@t1fc5) (t1fcb@lab t1fc6@t1fc3)) (begin (tb28@extend-rib! t1f92@rib t1fbf@id t1fcb@lab) (tdd1@chi-body* (cdr t1f8a@e*) (td09@add-lexical t1fcb@lab t1fca@lex t1f8b@r) t1f8c@mr (cons t1fca@lex t1f8d@lex*) (cons t1fbe@rhs t1f8e@rhs*) t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?))))))))) (if (memv t1fb4@t '(define-syntax)) (call-with-values (lambda () (tcfd@parse-define-syntax t1f9e@e)) (lambda (t1fd2@t1fcf t1fd3@t1fd1) (let ((t1fd6@rhs t1fd3@t1fd1) (t1fd7@id t1fd2@t1fcf)) (begin (if (tb7e@bound-id-member? t1fd7@id t1fb2@kwd*) (te59@syntax-violation '#f '"cannot redefine keyword" t1f9e@e) (void)) (let ((t1fda@lab (tb04@gen-define-label t1fd7@id t1f92@rib)) (t1fdb@expanded-rhs (tdd3@expand-transformer t1fd6@rhs t1f8c@mr))) (begin (tb28@extend-rib! t1f92@rib t1fd7@id t1fda@lab) (let ((t1fde@b (tbaa@make-eval-transformer t1fdb@expanded-rhs))) (tdd1@chi-body* (cdr t1f8a@e*) (cons (cons t1fda@lab t1fde@b) t1f8b@r) (cons (cons t1fda@lab t1fde@b) t1f8c@mr) t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?)))))))) (if (memv t1fb4@t '(let-syntax letrec-syntax)) (let ((t1fe0@t t1f9e@e)) (let ((t1fe2@ls/false (td79@syntax-dispatch t1fe0@t '(_ #(each (any any)) . each-any)))) (if (and t1fe2@ls/false (apply (lambda (t1fe4@xlhs* t1fe5@xrhs* t1fe6@xbody*) (if (not (tb7a@valid-bound-ids? t1fe4@xlhs*)) (te59@syntax-violation '#f '"invalid identifiers" t1f9e@e) (void))) t1fe2@ls/false)) (apply (lambda (t1fea@xlhs* t1feb@xrhs* t1fec@xbody*) (let ((t1ff0@xlab* (map tafe@gen-label t1fea@xlhs*))) (let ((t1ff2@xrib (tb32@make-full-rib t1fea@xlhs* t1ff0@xlab*))) (let ((t1ff4@xb* (map (lambda (t1ff6@x) (tbaa@make-eval-transformer (tdd3@expand-transformer (if (eq? t1fae@type 'let-syntax) t1ff6@x (tb5e@add-subst t1ff2@xrib t1ff6@x)) t1f8c@mr))) t1feb@xrhs*))) (tdd1@chi-body* (append (map (lambda (t1ff8@x) (tb5e@add-subst t1ff2@xrib t1ff8@x)) t1fec@xbody*) (cdr t1f8a@e*)) (append (map cons t1ff0@xlab* t1ff4@xb*) t1f8b@r) (append (map cons t1ff0@xlab* t1ff4@xb*) t1f8c@mr) t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?))))) t1fe2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1fe0@t)))) (if (memv t1fb4@t '(begin)) (let ((t1ffa@t t1f9e@e)) (let ((t1ffc@ls/false (td79@syntax-dispatch t1ffa@t '(_ . each-any)))) (if t1ffc@ls/false (apply (lambda (t1ffe@x*) (tdd1@chi-body* (append t1ffe@x* (cdr t1f8a@e*)) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?)) t1ffc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t1ffa@t)))) (if (memv t1fb4@t '(global-macro global-macro!)) (tdd1@chi-body* (cons (tb5e@add-subst t1f92@rib (td95@chi-global-macro t1fad@value t1f9e@e)) (cdr t1f8a@e*)) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?) (if (memv t1fb4@t '(local-macro local-macro!)) (tdd1@chi-body* (cons (tb5e@add-subst t1f92@rib (td93@chi-local-macro t1fad@value t1f9e@e)) (cdr t1f8a@e*)) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?) (if (memv t1fb4@t '(macro macro!)) (tdd1@chi-body* (cons (tb5e@add-subst t1f92@rib (td91@chi-macro t1fad@value t1f9e@e)) (cdr t1f8a@e*)) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?) (if (memv t1fb4@t '(module)) (call-with-values (lambda () (tdcf@chi-internal-module t1f9e@e t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd*)) (lambda (t2010@t2001 t2011@t2003 t2012@t2005 t2013@t2007 t2014@t2009 t2015@t200b t2016@t200d t2017@t200f) (let ((t2020@kwd* t2017@t200f) (t2021@mod** t2016@t200d) (t2022@mr t2015@t200b) (t2023@r t2014@t2009) (t2024@m-exp-lab* t2013@t2007) (t2025@m-exp-id* t2012@t2005) (t2026@rhs* t2011@t2003) (t2027@lex* t2010@t2001)) (begin (vector-for-each (lambda (t2030@id t2031@lab) (tb28@extend-rib! t1f92@rib t2030@id t2031@lab)) t2025@m-exp-id* t2024@m-exp-lab*) (tdd1@chi-body* (cdr t1f8a@e*) t2023@r t2022@mr t2027@lex* t2026@rhs* t2021@mod** t2020@kwd* t1f91@exp* t1f92@rib t1f93@top?))))) (if (memv t1fb4@t '(library)) (begin (te3b@library-expander (tb86@stx->datum t1f9e@e)) (tdd1@chi-body* (cdr t1f8a@e*) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?)) (if (memv t1fb4@t '(export)) (let ((t2034@t t1f9e@e)) (let ((t2036@ls/false (td79@syntax-dispatch t2034@t '(_ . each-any)))) (if t2036@ls/false (apply (lambda (t2038@exp-decl*) (tdd1@chi-body* (cdr t1f8a@e*) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* (append t2038@exp-decl* t1f91@exp*) t1f92@rib t1f93@top?)) t2036@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2034@t)))) (if (memv t1fb4@t '(import)) (let ((t203b@module-import? '#f) (t203d@module-import '#f) (t203f@library-import '#f)) (begin (set! t203b@module-import? (lambda (t208e@e) (let ((t2090@t t208e@e)) (let ((t2092@ls/false (td79@syntax-dispatch t2090@t '(_ any)))) (if (and t2092@ls/false (apply (lambda (t2094@id) (tb72@id? t2094@id)) t2092@ls/false)) (apply (lambda (t2096@id) '#t) t2092@ls/false) (let ((t2098@t t2090@t)) (let ((t209a@ls/false (td79@syntax-dispatch t2098@t '(_ . each-any)))) (if t209a@ls/false (apply (lambda (t209c@imp*) '#f) t209a@ls/false) (let ((t209e@t t2098@t)) (let ((t20a0@ls/false (td79@syntax-dispatch t209e@t '_))) (if t20a0@ls/false (apply (lambda () (te59@syntax-violation '#f '"malformed import form" t208e@e)) t20a0@ls/false) (te59@syntax-violation '#f '"invalid syntax" t209e@t)))))))))))) (set! t203d@module-import (lambda (t206c@e t206d@r) (let ((t2070@t t206c@e)) (let ((t2072@ls/false (td79@syntax-dispatch t2070@t '(_ any)))) (if (and t2072@ls/false (apply (lambda (t2074@id) (tb72@id? t2074@id)) t2072@ls/false)) (apply (lambda (t2076@id) (call-with-values (lambda () (tb94@syntax-type t2076@id t206d@r)) (lambda (t207e@t2079 t207f@t207b t2080@t207d) (let ((t2084@kwd t2080@t207d) (t2085@value t207f@t207b) (t2086@type t207e@t2079)) (let ((t208a@t t2086@type)) (if (memv t208a@t '($module)) (let ((t208c@iface t2085@value)) (values (tdcd@module-interface-exp-id* t208c@iface t2076@id) (tdc7@module-interface-exp-lab-vec t208c@iface))) (te59@syntax-violation '#f '"invalid import" t206c@e))))))) t2072@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2070@t)))))) (set! t203f@library-import (lambda (t2050@e) (let ((t2052@t t2050@e)) (let ((t2054@ls/false (td79@syntax-dispatch t2052@t '(any . each-any)))) (if t2054@ls/false (apply (lambda (t2056@ctxt t2057@imp*) (call-with-values (lambda () (tddb@parse-import-spec* (te5f@syntax->datum t2057@imp*))) (lambda (t205e@t205b t205f@t205d) (let ((t2062@subst-labels t205f@t205d) (t2063@subst-names t205e@t205b)) (values (vector-map (lambda (t2066@name) (tb52@datum->stx t2056@ctxt t2066@name)) t2063@subst-names) t2062@subst-labels))))) t2054@ls/false) (let ((t2068@t t2052@t)) (let ((t206a@ls/false (td79@syntax-dispatch t2068@t '_))) (if t206a@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid import form" t2050@e)) t206a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2068@t))))))))) (begin (call-with-values (lambda () (if (t203b@module-import? t1f9e@e) (t203d@module-import t1f9e@e t1f8b@r) (t203f@library-import t1f9e@e))) (lambda (t2044@t2041 t2045@t2043) (let ((t2048@lab* t2045@t2043) (t2049@id* t2044@t2041)) (vector-for-each (lambda (t204c@id t204d@lab) (tb28@extend-rib! t1f92@rib t204c@id t204d@lab)) t2049@id* t2048@lab*)))) (tdd1@chi-body* (cdr t1f8a@e*) t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?)))) (if t1f93@top? (tdd1@chi-body* (cdr t1f8a@e*) t1f8b@r t1f8c@mr (cons (tafa@gen-lexical 'dummy) t1f8d@lex*) (cons (cons 'top-expr t1f9e@e) t1f8e@rhs*) t1f8f@mod** t1fb2@kwd* t1f91@exp* t1f92@rib t1f93@top?) (values t1f8a@e* t1f8b@r t1f8c@mr t1f8d@lex* t1f8e@rhs* t1f8f@mod** t1fb2@kwd* t1f91@exp*)))))))))))))))))))))) (set! t2877@tdd1@chi-body* tdd1@chi-body*) (set! tdd3@expand-transformer (lambda (t20a2@expr t20a3@r) (let ((t20a6@rtc (tddf@make-collector))) (let ((t20a8@expanded-rhs (let ((t20b2@t20ab tde1@inv-collector) (t20b3@t20ad tde3@vis-collector) (t20b4@t20af t20a6@rtc) (t20b5@t20b1 (lambda (t20ba@x) (values)))) (let ((t20bc@swap (lambda () (begin (let ((t20be@t (t20b2@t20ab))) (begin (t20b2@t20ab t20b4@t20af) (set! t20b4@t20af t20be@t))) (let ((t20c0@t (t20b3@t20ad))) (begin (t20b3@t20ad t20b5@t20b1) (set! t20b5@t20b1 t20c0@t))))))) (dynamic-wind t20bc@swap (lambda () (td9b@chi-expr t20a2@expr t20a3@r t20a3@r)) t20bc@swap))))) (begin (for-each (let ((t20c2@mark-visit (tde3@vis-collector))) (lambda (t20c4@x) (begin (t988@t7d6@invoke-library t20c4@x) (t20c2@mark-visit t20c4@x)))) (t20a6@rtc)) t20a8@expanded-rhs))))) (set! t2878@tdd3@expand-transformer tdd3@expand-transformer) (set! tdd5@parse-exports (lambda (t20c6@exp*) (let t20ce@f ((t20c8@exp* t20c6@exp*) (t20c9@int* '()) (t20ca@ext* '())) (if (null? t20c8@exp*) (begin (if (not (tb7a@valid-bound-ids? t20ca@ext*)) (te59@syntax-violation 'export '"invalid exports" (tdaf@find-dups t20ca@ext*)) (void)) (values (map te5f@syntax->datum t20ca@ext*) t20c9@int*)) (let ((t20d0@t (car t20c8@exp*))) (let ((t20d2@ls/false (td79@syntax-dispatch t20d0@t '(any . #(each (any any)))))) (if t20d2@ls/false (apply (lambda (t20d4@rename t20d5@i* t20d6@e*) (begin (if (not (and (eq? (te5f@syntax->datum t20d4@rename) 'rename) (for-all tb72@id? t20d5@i*) (for-all tb72@id? t20d6@e*))) (te59@syntax-violation 'export '"invalid export specifier" (car t20c8@exp*)) (void)) (t20ce@f (cdr t20c8@exp*) (append t20d5@i* t20c9@int*) (append t20d6@e* t20ca@ext*)))) t20d2@ls/false) (let ((t20da@t t20d0@t)) (let ((t20dc@ls/false (td79@syntax-dispatch t20da@t 'any))) (if t20dc@ls/false (apply (lambda (t20de@ie) (begin (if (not (tb72@id? t20de@ie)) (te59@syntax-violation 'export '"invalid export" t20de@ie) (void)) (t20ce@f (cdr t20c8@exp*) (cons t20de@ie t20c9@int*) (cons t20de@ie t20ca@ext*)))) t20dc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t20da@t))))))))))) (set! t2879@tdd5@parse-exports tdd5@parse-exports) (set! tdd7@parse-library-name (lambda (t20e0@spec) (let ((t20e3@parse '#f)) (begin (set! t20e3@parse (lambda (t20f0@x) (let ((t20f2@t t20f0@x)) (let ((t20f4@ls/false (td79@syntax-dispatch t20f2@t '(each-any)))) (if (and t20f4@ls/false (apply (lambda (t20f6@v*) (for-all (lambda (t20f8@x) (let ((t20fa@x (te5f@syntax->datum t20f8@x))) (and (integer? t20fa@x) (exact? t20fa@x)))) t20f6@v*)) t20f4@ls/false)) (apply (lambda (t20fc@v*) (values '() (map te5f@syntax->datum t20fc@v*))) t20f4@ls/false) (let ((t20fe@t t20f2@t)) (let ((t2100@ls/false (td79@syntax-dispatch t20fe@t '(any . any)))) (if (and t2100@ls/false (apply (lambda (t2102@x t2103@rest) (symbol? (te5f@syntax->datum t2102@x))) t2100@ls/false)) (apply (lambda (t2106@x t2107@rest) (call-with-values (lambda () (t20e3@parse t2107@rest)) (lambda (t210e@t210b t210f@t210d) (let ((t2112@v* t210f@t210d) (t2113@x* t210e@t210b)) (values (cons (te5f@syntax->datum t2106@x) t2113@x*) t2112@v*))))) t2100@ls/false) (let ((t2116@t t20fe@t)) (let ((t2118@ls/false (td79@syntax-dispatch t2116@t '()))) (if t2118@ls/false (apply (lambda () (values '() '())) t2118@ls/false) (let ((t211a@t t2116@t)) (let ((t211c@ls/false (td79@syntax-dispatch t211a@t '_))) (if t211c@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid library name" t20e0@spec)) t211c@ls/false) (te59@syntax-violation '#f '"invalid syntax" t211a@t))))))))))))))) (call-with-values (lambda () (t20e3@parse t20e0@spec)) (lambda (t20e8@t20e5 t20e9@t20e7) (let ((t20ec@ver* t20e9@t20e7) (t20ed@name* t20e8@t20e5)) (begin (if (null? t20ed@name*) (te59@syntax-violation '#f '"empty library name" t20e0@spec) (void)) (values t20ed@name* t20ec@ver*))))))))) (set! t287a@tdd7@parse-library-name tdd7@parse-library-name) (set! tdd9@parse-library (lambda (t211e@e) (let ((t2120@t t211e@e)) (let ((t2122@ls/false (td79@syntax-dispatch t2120@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and t2122@ls/false (apply (lambda (t2124@library t2125@name* t2126@export t2127@exp* t2128@import t2129@imp* t212a@b*) (and (eq? (te5f@syntax->datum t2126@export) 'export) (eq? (te5f@syntax->datum t2128@import) 'import) (eq? (te5f@syntax->datum t2124@library) 'library))) t2122@ls/false)) (apply (lambda (t2132@library t2133@name* t2134@export t2135@exp* t2136@import t2137@imp* t2138@b*) (values t2133@name* t2135@exp* t2137@imp* t2138@b*)) t2122@ls/false) (let ((t2140@t t2120@t)) (let ((t2142@ls/false (td79@syntax-dispatch t2140@t '_))) (if t2142@ls/false (apply (lambda () (te59@syntax-violation '#f '"malformed library" t211e@e)) t2142@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2140@t))))))))) (set! t287b@tdd9@parse-library tdd9@parse-library) (set! tddb@parse-import-spec* (let ((t2145@idsyn? '#f) (t2147@dup-error '#f) (t2149@merge-substs '#f) (t214b@exclude* '#f) (t214d@find* '#f) (t214f@rem* '#f) (t2151@remove-dups '#f) (t2153@parse-library-name '#f) (t2155@import-library '#f) (t2157@get-import '#f) (t2159@add-imports! '#f)) (begin (set! t2145@idsyn? (lambda (t234e@x) (symbol? (te5f@syntax->datum t234e@x)))) (set! t2147@dup-error (lambda (t234c@name) (te59@syntax-violation 'import '"two imports with different bindings" t234c@name))) (set! t2149@merge-substs (lambda (t233a@s t233b@subst) (let ((t233f@insert-to-subst '#f)) (begin (set! t233f@insert-to-subst (lambda (t2340@a t2341@subst) (let ((t2344@name (car t2340@a)) (t2345@label (cdr t2340@a))) (let ((t2348@t (assq t2344@name t2341@subst))) (if t2348@t ((lambda (t234a@x) (if (eq? (cdr t234a@x) t2345@label) t2341@subst (t2147@dup-error t2344@name))) t2348@t) (cons t2340@a t2341@subst)))))) (if (null? t233a@s) t233b@subst (t233f@insert-to-subst (car t233a@s) (t2149@merge-substs (cdr t233a@s) t233b@subst))))))) (set! t214b@exclude* (lambda (t230a@sym* t230b@subst) (let ((t230f@exclude '#f)) (begin (set! t230f@exclude (lambda (t2328@sym t2329@subst) (if (null? t2329@subst) (te59@syntax-violation 'import '"cannot rename unbound identifier" t2328@sym) (if (eq? t2328@sym (caar t2329@subst)) (values (cdar t2329@subst) (cdr t2329@subst)) (let ((t232c@a (car t2329@subst))) (call-with-values (lambda () (t230f@exclude t2328@sym (cdr t2329@subst))) (lambda (t2332@t232f t2333@t2331) (let ((t2336@subst t2333@t2331) (t2337@old t2332@t232f)) (values t2337@old (cons t232c@a t2336@subst)))))))))) (if (null? t230a@sym*) (values '() t230b@subst) (call-with-values (lambda () (t230f@exclude (car t230a@sym*) t230b@subst)) (lambda (t2314@t2311 t2315@t2313) (let ((t2318@subst t2315@t2313) (t2319@old t2314@t2311)) (call-with-values (lambda () (t214b@exclude* (cdr t230a@sym*) t2318@subst)) (lambda (t2320@t231d t2321@t231f) (let ((t2324@subst t2321@t231f) (t2325@old* t2320@t231d)) (values (cons t2319@old t2325@old*) t2324@subst)))))))))))) (set! t214d@find* (lambda (t2302@sym* t2303@subst) (map (lambda (t2306@x) (let ((t2308@t (assq t2306@x t2303@subst))) (if t2308@t (cdr t2308@t) (te59@syntax-violation 'import '"cannot find identifier" t2306@x)))) t2302@sym*))) (set! t214f@rem* (lambda (t22fa@sym* t22fb@subst) (let t2300@f ((t22fe@subst t22fb@subst)) (if (null? t22fe@subst) '() (if (memq (caar t22fe@subst) t22fa@sym*) (t2300@f (cdr t22fe@subst)) (cons (car t22fe@subst) (t2300@f (cdr t22fe@subst)))))))) (set! t2151@remove-dups (lambda (t22f8@ls) (if (null? t22f8@ls) '() (if (memq (car t22f8@ls) (cdr t22f8@ls)) (t2151@remove-dups (cdr t22f8@ls)) (cons (car t22f8@ls) (t2151@remove-dups (cdr t22f8@ls))))))) (set! t2153@parse-library-name (lambda (t2210@spec) (let ((t2213@subversion? '#f) (t2215@subversion-pred '#f) (t2217@version-pred '#f)) (begin (set! t2213@subversion? (lambda (t22f4@x) (let ((t22f6@x (te5f@syntax->datum t22f4@x))) (and (integer? t22f6@x) (exact? t22f6@x) (>= t22f6@x '0))))) (set! t2215@subversion-pred (lambda (t2294@x*) (let ((t2296@t t2294@x*)) (let ((t2298@ls/false (td79@syntax-dispatch t2296@t 'any))) (if (and t2298@ls/false (apply (lambda (t229a@n) (t2213@subversion? t229a@n)) t2298@ls/false)) (apply (lambda (t229c@n) (lambda (t229e@x) (= t229e@x (te5f@syntax->datum t229c@n)))) t2298@ls/false) (let ((t22a0@t t2296@t)) (let ((t22a2@ls/false (td79@syntax-dispatch t22a0@t '(any . each-any)))) (if (and t22a2@ls/false (apply (lambda (t22a4@p? t22a5@sub*) (eq? (te5f@syntax->datum t22a4@p?) 'and)) t22a2@ls/false)) (apply (lambda (t22a8@p? t22a9@sub*) (let ((t22ac@p* (map t2215@subversion-pred t22a9@sub*))) (lambda (t22ae@x) (for-all (lambda (t22b0@p) (t22b0@p t22ae@x)) t22ac@p*)))) t22a2@ls/false) (let ((t22b2@t t22a0@t)) (let ((t22b4@ls/false (td79@syntax-dispatch t22b2@t '(any . each-any)))) (if (and t22b4@ls/false (apply (lambda (t22b6@p? t22b7@sub*) (eq? (te5f@syntax->datum t22b6@p?) 'or)) t22b4@ls/false)) (apply (lambda (t22ba@p? t22bb@sub*) (let ((t22be@p* (map t2215@subversion-pred t22bb@sub*))) (lambda (t22c0@x) (exists (lambda (t22c2@p) (t22c2@p t22c0@x)) t22be@p*)))) t22b4@ls/false) (let ((t22c4@t t22b2@t)) (let ((t22c6@ls/false (td79@syntax-dispatch t22c4@t '(any any)))) (if (and t22c6@ls/false (apply (lambda (t22c8@p? t22c9@sub) (eq? (te5f@syntax->datum t22c8@p?) 'not)) t22c6@ls/false)) (apply (lambda (t22cc@p? t22cd@sub) (let ((t22d0@p (t2215@subversion-pred t22cd@sub))) (lambda (t22d2@x) (not (t22d0@p t22d2@x))))) t22c6@ls/false) (let ((t22d4@t t22c4@t)) (let ((t22d6@ls/false (td79@syntax-dispatch t22d4@t '(any any)))) (if (and t22d6@ls/false (apply (lambda (t22d8@p? t22d9@n) (and (eq? (te5f@syntax->datum t22d8@p?) '<=) (t2213@subversion? t22d9@n))) t22d6@ls/false)) (apply (lambda (t22dc@p? t22dd@n) (lambda (t22e0@x) (<= t22e0@x (te5f@syntax->datum t22dd@n)))) t22d6@ls/false) (let ((t22e2@t t22d4@t)) (let ((t22e4@ls/false (td79@syntax-dispatch t22e2@t '(any any)))) (if (and t22e4@ls/false (apply (lambda (t22e6@p? t22e7@n) (and (eq? (te5f@syntax->datum t22e6@p?) '>=) (t2213@subversion? t22e7@n))) t22e4@ls/false)) (apply (lambda (t22ea@p? t22eb@n) (lambda (t22ee@x) (>= t22ee@x (te5f@syntax->datum t22eb@n)))) t22e4@ls/false) (let ((t22f0@t t22e2@t)) (let ((t22f2@ls/false (td79@syntax-dispatch t22f0@t '_))) (if t22f2@ls/false (apply (lambda () (te59@syntax-violation 'import '"invalid sub-version spec" t2210@spec t2294@x*)) t22f2@ls/false) (te59@syntax-violation '#f '"invalid syntax" t22f0@t)))))))))))))))))))))))) (set! t2217@version-pred (lambda (t2244@x*) (let ((t2246@t t2244@x*)) (let ((t2248@ls/false (td79@syntax-dispatch t2246@t '()))) (if t2248@ls/false (apply (lambda () (lambda (t224a@x) '#t)) t2248@ls/false) (let ((t224c@t t2246@t)) (let ((t224e@ls/false (td79@syntax-dispatch t224c@t '(any . each-any)))) (if (and t224e@ls/false (apply (lambda (t2250@c t2251@ver*) (eq? (te5f@syntax->datum t2250@c) 'and)) t224e@ls/false)) (apply (lambda (t2254@c t2255@ver*) (let ((t2258@p* (map t2217@version-pred t2255@ver*))) (lambda (t225a@x) (for-all (lambda (t225c@p) (t225c@p t225a@x)) t2258@p*)))) t224e@ls/false) (let ((t225e@t t224c@t)) (let ((t2260@ls/false (td79@syntax-dispatch t225e@t '(any . each-any)))) (if (and t2260@ls/false (apply (lambda (t2262@c t2263@ver*) (eq? (te5f@syntax->datum t2262@c) 'or)) t2260@ls/false)) (apply (lambda (t2266@c t2267@ver*) (let ((t226a@p* (map t2217@version-pred t2267@ver*))) (lambda (t226c@x) (exists (lambda (t226e@p) (t226e@p t226c@x)) t226a@p*)))) t2260@ls/false) (let ((t2270@t t225e@t)) (let ((t2272@ls/false (td79@syntax-dispatch t2270@t '(any any)))) (if (and t2272@ls/false (apply (lambda (t2274@c t2275@ver) (eq? (te5f@syntax->datum t2274@c) 'not)) t2272@ls/false)) (apply (lambda (t2278@c t2279@ver) (let ((t227c@p (t2217@version-pred t2279@ver))) (lambda (t227e@x) (not (t227c@p t227e@x))))) t2272@ls/false) (let ((t2280@t t2270@t)) (let ((t2282@ls/false (td79@syntax-dispatch t2280@t 'each-any))) (if t2282@ls/false (apply (lambda (t2284@sub*) (let ((t2286@p* (map t2215@subversion-pred t2284@sub*))) (lambda (t2288@x) (let t228e@f ((t228a@p* t2286@p*) (t228b@x t2288@x)) (if (null? t228a@p*) '#t (if (null? t228b@x) '#f (and ((car t228a@p*) (car t228b@x)) (t228e@f (cdr t228a@p*) (cdr t228b@x))))))))) t2282@ls/false) (let ((t2290@t t2280@t)) (let ((t2292@ls/false (td79@syntax-dispatch t2290@t '_))) (if t2292@ls/false (apply (lambda () (te59@syntax-violation 'import '"invalid version spec" t2210@spec t2244@x*)) t2292@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2290@t))))))))))))))))))))) (let t221a@f ((t2218@x t2210@spec)) (let ((t221c@t t2218@x)) (let ((t221e@ls/false (td79@syntax-dispatch t221c@t '(each-any)))) (if t221e@ls/false (apply (lambda (t2220@version-spec*) (values '() (t2217@version-pred t2220@version-spec*))) t221e@ls/false) (let ((t2222@t t221c@t)) (let ((t2224@ls/false (td79@syntax-dispatch t2222@t '(any . any)))) (if (and t2224@ls/false (apply (lambda (t2226@x t2227@x*) (t2145@idsyn? t2226@x)) t2224@ls/false)) (apply (lambda (t222a@x t222b@x*) (call-with-values (lambda () (t221a@f t222b@x*)) (lambda (t2232@t222f t2233@t2231) (let ((t2236@pred t2233@t2231) (t2237@name t2232@t222f)) (values (cons (te5f@syntax->datum t222a@x) t2237@name) t2236@pred))))) t2224@ls/false) (let ((t223a@t t2222@t)) (let ((t223c@ls/false (td79@syntax-dispatch t223a@t '()))) (if t223c@ls/false (apply (lambda () (values '() (lambda (t223e@x) '#t))) t223c@ls/false) (let ((t2240@t t223a@t)) (let ((t2242@ls/false (td79@syntax-dispatch t2240@t '_))) (if t2242@ls/false (apply (lambda () (te59@syntax-violation '#f '"invalid import spec" t2210@spec)) t2242@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2240@t)))))))))))))))))) (set! t2155@import-library (lambda (t2200@spec*) (call-with-values (lambda () (t2153@parse-library-name t2200@spec*)) (lambda (t2206@t2203 t2207@t2205) (let ((t220a@pred t2207@t2205) (t220b@name t2206@t2203)) (begin (if (null? t220b@name) (te59@syntax-violation 'import '"empty library name" t2200@spec*) (void)) (let ((t220e@lib (t981@t7c8@find-library-by-name t220b@name))) (begin (if (not t220e@lib) (te59@syntax-violation 'import '"cannot find library with required name" t220b@name) (void)) (if (not (t220a@pred (t95b@t77c@library-version t220e@lib))) (te59@syntax-violation 'import '"library does not satisfy version specification" t2200@spec* t220e@lib) (void)) ((tde5@imp-collector) t220e@lib) (t963@t78c@library-subst t220e@lib))))))))) (set! t2157@get-import (lambda (t2172@spec) (let ((t2174@t t2172@spec)) (let ((t2176@ls/false (td79@syntax-dispatch t2174@t '(any . each-any)))) (if (and t2176@ls/false (apply (lambda (t2178@x t2179@x*) (not (memq (te5f@syntax->datum t2178@x) '(for rename except only prefix library)))) t2176@ls/false)) (apply (lambda (t217c@x t217d@x*) (t2155@import-library (cons t217c@x t217d@x*))) t2176@ls/false) (let ((t2180@t t2174@t)) (let ((t2182@ls/false (td79@syntax-dispatch t2180@t '(any any . #(each (any any)))))) (if (and t2182@ls/false (apply (lambda (t2184@rename t2185@isp t2186@old* t2187@new*) (and (eq? (te5f@syntax->datum t2184@rename) 'rename) (for-all t2145@idsyn? t2186@old*) (for-all t2145@idsyn? t2187@new*))) t2182@ls/false)) (apply (lambda (t218c@rename t218d@isp t218e@old* t218f@new*) (let ((t2194@subst (t2157@get-import t218d@isp)) (t2195@old* (map te5f@syntax->datum t218e@old*)) (t2196@new* (map te5f@syntax->datum t218f@new*))) (let ((t219a@old-label* (t214d@find* t2195@old* t2194@subst))) (let ((t219c@subst (t214f@rem* t2195@old* t2194@subst))) (t2149@merge-substs (map cons t2196@new* t219a@old-label*) t219c@subst))))) t2182@ls/false) (let ((t219e@t t2180@t)) (let ((t21a0@ls/false (td79@syntax-dispatch t219e@t '(any any . each-any)))) (if (and t21a0@ls/false (apply (lambda (t21a2@except t21a3@isp t21a4@sym*) (and (eq? (te5f@syntax->datum t21a2@except) 'except) (for-all t2145@idsyn? t21a4@sym*))) t21a0@ls/false)) (apply (lambda (t21a8@except t21a9@isp t21aa@sym*) (let ((t21ae@subst (t2157@get-import t21a9@isp))) (t214f@rem* (map te5f@syntax->datum t21aa@sym*) t21ae@subst))) t21a0@ls/false) (let ((t21b0@t t219e@t)) (let ((t21b2@ls/false (td79@syntax-dispatch t21b0@t '(any any . each-any)))) (if (and t21b2@ls/false (apply (lambda (t21b4@only t21b5@isp t21b6@sym*) (and (eq? (te5f@syntax->datum t21b4@only) 'only) (for-all t2145@idsyn? t21b6@sym*))) t21b2@ls/false)) (apply (lambda (t21ba@only t21bb@isp t21bc@sym*) (let ((t21c0@subst (t2157@get-import t21bb@isp)) (t21c1@sym* (map te5f@syntax->datum t21bc@sym*))) (let ((t21c4@sym* (t2151@remove-dups t21c1@sym*))) (let ((t21c6@lab* (t214d@find* t21c4@sym* t21c0@subst))) (map cons t21c4@sym* t21c6@lab*))))) t21b2@ls/false) (let ((t21c8@t t21b0@t)) (let ((t21ca@ls/false (td79@syntax-dispatch t21c8@t '(any any any)))) (if (and t21ca@ls/false (apply (lambda (t21cc@prefix t21cd@isp t21ce@p) (and (eq? (te5f@syntax->datum t21cc@prefix) 'prefix) (t2145@idsyn? t21ce@p))) t21ca@ls/false)) (apply (lambda (t21d2@prefix t21d3@isp t21d4@p) (let ((t21d8@subst (t2157@get-import t21d3@isp)) (t21d9@prefix (symbol->string (te5f@syntax->datum t21d4@p)))) (map (lambda (t21dc@x) (cons (string->symbol (string-append t21d9@prefix (symbol->string (car t21dc@x)))) (cdr t21dc@x))) t21d8@subst))) t21ca@ls/false) (let ((t21de@t t21c8@t)) (let ((t21e0@ls/false (td79@syntax-dispatch t21de@t '(any each-any)))) (if (and t21e0@ls/false (apply (lambda (t21e2@library t21e3@spec*) (eq? (te5f@syntax->datum t21e2@library) 'library)) t21e0@ls/false)) (apply (lambda (t21e6@library t21e7@spec*) (t2155@import-library t21e7@spec*)) t21e0@ls/false) (let ((t21ea@t t21de@t)) (let ((t21ec@ls/false (td79@syntax-dispatch t21ea@t '(any any . any)))) (if (and t21ec@ls/false (apply (lambda (t21ee@for t21ef@isp t21f0@rest) (eq? (te5f@syntax->datum t21ee@for) 'for)) t21ec@ls/false)) (apply (lambda (t21f4@for t21f5@isp t21f6@rest) (t2157@get-import t21f5@isp)) t21ec@ls/false) (let ((t21fa@t t21ea@t)) (let ((t21fc@ls/false (td79@syntax-dispatch t21fa@t 'any))) (if t21fc@ls/false (apply (lambda (t21fe@spec) (te59@syntax-violation 'import '"invalid import spec" t21fe@spec)) t21fc@ls/false) (te59@syntax-violation '#f '"invalid syntax" t21fa@t))))))))))))))))))))))))))) (set! t2159@add-imports! (lambda (t2162@imp t2163@h) (let ((t2166@subst (t2157@get-import t2162@imp))) (for-each (lambda (t2168@x) (let ((t216a@name (car t2168@x)) (t216b@label (cdr t2168@x))) (let ((t216e@t (hashtable-ref t2163@h t216a@name '#f))) (if t216e@t ((lambda (t2170@l) (if (not (eq? t2170@l t216b@label)) (t2147@dup-error t216a@name) (void))) t216e@t) (hashtable-set! t2163@h t216a@name t216b@label))))) t2166@subst)))) (lambda (t215a@imp*) (let t2160@f ((t215c@imp* t215a@imp*) (t215d@h (make-eq-hashtable))) (if (null? t215c@imp*) (hashtable-entries t215d@h) (begin (t2159@add-imports! (car t215c@imp*) t215d@h) (t2160@f (cdr t215c@imp*) t215d@h)))))))) (set! t287c@tddb@parse-import-spec* tddb@parse-import-spec*) (set! tddd@make-top-rib (lambda (t2350@names t2351@labels) (let ((t2354@rib (tb26@make-empty-rib))) (begin (vector-for-each (lambda (t2356@name t2357@label) (begin (if (not (symbol? t2356@name)) (error 'make-top-rib '"BUG: not a symbol" t2356@name) (void)) (tb2a@extend-rib/nc! t2354@rib (make-simple-struct 'stx '5 (list t2356@name taf6@top-mark* '() '())) t2357@label))) t2350@names t2351@labels) t2354@rib)))) (set! t287d@tddd@make-top-rib tddd@make-top-rib) (set! tddf@make-collector (lambda () (let ((t235a@ls '())) (lambda t235e (let ((t235f (length t235e))) (if (= t235f '0) (apply (lambda () t235a@ls) t235e) (if (= t235f '1) (apply (lambda (t235c@x) (set! t235a@ls (taef@set-cons t235c@x t235a@ls))) t235e) (error 'apply '"invalid arg count")))))))) (set! t287e@tddf@make-collector tddf@make-collector) (set! tde1@inv-collector (t6bc@t59b@make-parameter (lambda t2360@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (t2362@x) (begin (if (not (procedure? t2362@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" t2362@x) (void)) t2362@x)))) (set! t287f@tde1@inv-collector tde1@inv-collector) (set! tde3@vis-collector (t6bc@t59b@make-parameter (lambda t2364@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (t2366@x) (begin (if (not (procedure? t2366@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" t2366@x) (void)) t2366@x)))) (set! t2880@tde3@vis-collector tde3@vis-collector) (set! tde5@imp-collector (t6bc@t59b@make-parameter (lambda t2368@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (t236a@x) (begin (if (not (procedure? t236a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" t236a@x) (void)) t236a@x)))) (set! t2881@tde5@imp-collector tde5@imp-collector) (set! tde7@chi-library-internal (lambda (t236c@e* t236d@rib t236e@top?) (call-with-values (lambda () (tdd1@chi-body* t236c@e* '() '() '() '() '() '() '() t236d@rib t236e@top?)) (lambda (t2382@t2373 t2383@t2375 t2384@t2377 t2385@t2379 t2386@t237b t2387@t237d t2388@t237f t2389@t2381) (let ((t2392@exp* t2389@t2381) (t2393@_kwd* t2388@t237f) (t2394@mod** t2387@t237d) (t2395@rhs* t2386@t237b) (t2396@lex* t2385@t2379) (t2397@mr t2384@t2377) (t2398@r t2383@t2375) (t2399@e* t2382@t2373)) (values (append (apply append (reverse t2394@mod**)) t2399@e*) t2398@r t2397@mr (reverse t2396@lex*) (reverse t2395@rhs*) t2392@exp*)))))) (set! t2882@tde7@chi-library-internal tde7@chi-library-internal) (set! tde9@chi-interaction-expr (lambda (t23a2@e t23a3@rib t23a4@r) (call-with-values (lambda () (tdd1@chi-body* (list t23a2@e) t23a4@r t23a4@r '() '() '() '() '() t23a3@rib '#t)) (lambda (t23b8@t23a9 t23b9@t23ab t23ba@t23ad t23bb@t23af t23bc@t23b1 t23bd@t23b3 t23be@t23b5 t23bf@t23b7) (let ((t23c8@_exp* t23bf@t23b7) (t23c9@_kwd* t23be@t23b5) (t23ca@mod** t23bd@t23b3) (t23cb@rhs* t23bc@t23b1) (t23cc@lex* t23bb@t23af) (t23cd@mr t23ba@t23ad) (t23ce@r t23b9@t23ab) (t23cf@e* t23b8@t23a9)) (let ((t23d8@e* (tda9@expand-interaction-rhs*/init* (reverse t23cc@lex*) (reverse t23cb@rhs*) (append (apply append (reverse t23ca@mod**)) t23cf@e*) t23ce@r t23cd@mr))) (let ((t23da@e (if (null? t23d8@e*) (tad8@ta33@build-void) (if (null? (cdr t23d8@e*)) (car t23d8@e*) (tad7@ta31@build-sequence '#f t23d8@e*))))) (values t23da@e t23ce@r)))))))) (set! t2883@tde9@chi-interaction-expr tde9@chi-interaction-expr) (set! tdeb@library-body-expander (lambda (t23dc@name t23dd@main-exp* t23de@imp* t23df@b* t23e0@top?) (let ((t23e7@itc '#f)) (begin (set! t23e7@itc (tddf@make-collector)) (let ((t23f0@t23e9 tde5@imp-collector) (t23f1@t23eb te69@top-level-context) (t23f2@t23ed t23e7@itc) (t23f3@t23ef '#f)) (let ((t23f8@swap (lambda () (begin (let ((t23fa@t (t23f0@t23e9))) (begin (t23f0@t23e9 t23f2@t23ed) (set! t23f2@t23ed t23fa@t))) (let ((t23fc@t (t23f1@t23eb))) (begin (t23f1@t23eb t23f3@t23ef) (set! t23f3@t23ef t23fc@t))))))) (dynamic-wind t23f8@swap (lambda () (call-with-values (lambda () (tddb@parse-import-spec* t23de@imp*)) (lambda (t2402@t23ff t2403@t2401) (let ((t2406@subst-labels t2403@t2401) (t2407@subst-names t2402@t23ff)) (let ((t240a@rib (tddd@make-top-rib t2407@subst-names t2406@subst-labels))) (let ((t240d@wrap '#f)) (begin (set! t240d@wrap (lambda (t2488@x) (make-simple-struct 'stx '5 (list t2488@x taf6@top-mark* (list t240a@rib) '())))) (let ((t240e@b* (map t240d@wrap t23df@b*)) (t240f@main-exp* (map t240d@wrap t23dd@main-exp*)) (t2410@rtc (tddf@make-collector)) (t2411@vtc (tddf@make-collector))) (let ((t241e@t2417 tde1@inv-collector) (t241f@t2419 tde3@vis-collector) (t2420@t241b t2410@rtc) (t2421@t241d t2411@vtc)) (let ((t2426@swap (lambda () (begin (let ((t2428@t (t241e@t2417))) (begin (t241e@t2417 t2420@t241b) (set! t2420@t241b t2428@t))) (let ((t242a@t (t241f@t2419))) (begin (t241f@t2419 t2421@t241d) (set! t2421@t241d t242a@t))))))) (dynamic-wind t2426@swap (lambda () (call-with-values (lambda () (tde7@chi-library-internal t240e@b* t240a@rib t23e0@top?)) (lambda (t2438@t242d t2439@t242f t243a@t2431 t243b@t2433 t243c@t2435 t243d@t2437) (let ((t2444@internal-exp* t243d@t2437) (t2445@rhs* t243c@t2435) (t2446@lex* t243b@t2433) (t2447@mr t243a@t2431) (t2448@r t2439@t242f) (t2449@init* t2438@t242d)) (call-with-values (lambda () (tdd5@parse-exports (append t240f@main-exp* t2444@internal-exp*))) (lambda (t2454@t2451 t2455@t2453) (let ((t2458@exp-id* t2455@t2453) (t2459@exp-name* t2454@t2451)) (begin (tb2e@seal-rib! t240a@rib) (let ((t245c@init* (td97@chi-expr* t2449@init* t2448@r t2447@mr))) (let ((t245e@rhs* (tdab@chi-rhs* t2445@rhs* t2448@r t2447@mr))) (begin (tb30@unseal-rib! t240a@rib) (let ((t2460@loc* (map tafc@gen-global t2446@lex*)) (t2461@export-subst (te43@make-export-subst t2459@exp-name* t2458@exp-id*))) (let ((t2465@errstr '#f)) (begin (set! t2465@errstr '"attempt to export mutated variable") (call-with-values (lambda () (te45@make-export-env/macros t2446@lex* t2460@loc* t2448@r)) (lambda (t246c@t2467 t246d@t2469 t246e@t246b) (let ((t2472@macro* t246e@t246b) (t2473@global* t246d@t2469) (t2474@export-env t246c@t2467)) (begin (for-each (lambda (t2478@s) (let ((t247a@name (car t2478@s)) (t247b@label (cdr t2478@s))) (let ((t247e@p (assq t247b@label t2474@export-env))) (if t247e@p (let ((t2480@b (cdr t247e@p))) (let ((t2482@type (car t2480@b))) (if (eq? t2482@type 'mutable) (te59@syntax-violation 'export t2465@errstr t247a@name) (void)))) (void))))) t2461@export-subst) (let ((t2484@invoke-body (tadd@ta3d@build-library-letrec* '#f t23dc@name t2446@lex* t2460@loc* t245e@rhs* (if (null? t245c@init*) (tad8@ta33@build-void) (tad7@ta31@build-sequence '#f t245c@init*)))) (t2485@invoke-definitions (map tad4@t990@build-global-define (map cdr t2473@global*)))) (values (t23e7@itc) (t2410@rtc) (t2411@vtc) (tad7@ta31@build-sequence '#f (append t2485@invoke-definitions (list t2484@invoke-body))) t2472@macro* t2461@export-subst t2474@export-env)))))))))))))))))))) t2426@swap))))))))))) t23f8@swap))))))) (set! t2884@tdeb@library-body-expander tdeb@library-body-expander) (set! tded@core-library-expander (lambda (t248a@e t248b@verify-name) (call-with-values (lambda () (tdd9@parse-library t248a@e)) (lambda (t2496@t248f t2497@t2491 t2498@t2493 t2499@t2495) (let ((t249e@b* t2499@t2495) (t249f@imp* t2498@t2493) (t24a0@exp* t2497@t2491) (t24a1@name* t2496@t248f)) (call-with-values (lambda () (tdd7@parse-library-name t24a1@name*)) (lambda (t24aa@t24a7 t24ab@t24a9) (let ((t24ae@ver t24ab@t24a9) (t24af@name t24aa@t24a7)) (begin (t248b@verify-name t24af@name) (call-with-values (lambda () (tdeb@library-body-expander t24af@name t24a0@exp* t249f@imp* t249e@b* '#f)) (lambda (t24c0@t24b3 t24c1@t24b5 t24c2@t24b7 t24c3@t24b9 t24c4@t24bb t24c5@t24bd t24c6@t24bf) (let ((t24ce@export-env t24c6@t24bf) (t24cf@export-subst t24c5@t24bd) (t24d0@visit-code t24c4@t24bb) (t24d1@invoke-code t24c3@t24b9) (t24d2@visit-req* t24c2@t24b7) (t24d3@invoke-req* t24c1@t24b5) (t24d4@imp* t24c0@t24b3)) (values t24af@name t24ae@ver t24d4@imp* t24d3@invoke-req* t24d2@visit-req* t24d1@invoke-code t24d0@visit-code t24cf@export-subst t24ce@export-env))))))))))))) (set! t2885@tded@core-library-expander tded@core-library-expander) (set! tdef@parse-top-level-program (lambda (t24dc@e*) (let ((t24de@t t24dc@e*)) (let ((t24e0@ls/false (td79@syntax-dispatch t24de@t '((any . each-any) . each-any)))) (if (and t24e0@ls/false (apply (lambda (t24e2@import t24e3@imp* t24e4@b*) (eq? (te5f@syntax->datum t24e2@import) 'import)) t24e0@ls/false)) (apply (lambda (t24e8@import t24e9@imp* t24ea@b*) (values t24e9@imp* t24ea@b*)) t24e0@ls/false) (let ((t24ee@t t24de@t)) (let ((t24f0@ls/false (td79@syntax-dispatch t24ee@t '((any . any) . any)))) (if (and t24f0@ls/false (apply (lambda (t24f2@import t24f3@x t24f4@y) (eq? (te5f@syntax->datum t24f2@import) 'import)) t24f0@ls/false)) (apply (lambda (t24f8@import t24f9@x t24fa@y) (te59@syntax-violation 'expander '"invalid syntax of top-level program" (tb6c@syntax-car t24dc@e*))) t24f0@ls/false) (let ((t24fe@t t24ee@t)) (let ((t2500@ls/false (td79@syntax-dispatch t24fe@t '_))) (if t2500@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) t2500@ls/false) (te59@syntax-violation '#f '"invalid syntax" t24fe@t)))))))))))) (set! t2886@tdef@parse-top-level-program tdef@parse-top-level-program) (set! tdf1@top-level-expander (lambda (t2502@e*) (call-with-values (lambda () (tdef@parse-top-level-program t2502@e*)) (lambda (t2508@t2505 t2509@t2507) (let ((t250c@b* t2509@t2507) (t250d@imp* t2508@t2505)) (call-with-values (lambda () (tdeb@library-body-expander '() '() t250d@imp* t250c@b* '#t)) (lambda (t251e@t2511 t251f@t2513 t2520@t2515 t2521@t2517 t2522@t2519 t2523@t251b t2524@t251d) (let ((t252c@export-env t2524@t251d) (t252d@export-subst t2523@t251b) (t252e@visit-code t2522@t2519) (t252f@invoke-code t2521@t2517) (t2530@visit-req* t2520@t2515) (t2531@invoke-req* t251f@t2513) (t2532@imp* t251e@t2511)) (values t2531@invoke-req* t252f@invoke-code))))))))) (set! t2887@tdf1@top-level-expander tdf1@top-level-expander) (set! tdf3@rp (t6b9@t595@make-record-printer 'env (lambda (t253a@x t253b@p t253c@wr) (display '"#<environment>" t253b@p)))) (set! t2888@tdf3@rp tdf3@rp) (set! tdfd@env? (lambda (t2540@x) (and (simple-struct? t2540@x) (eq? (simple-struct-name t2540@x) 'env)))) (set! t2889@tdfd@env? tdfd@env?) (set! tdff@env-names (lambda (t2542@x) (simple-struct-ref t2542@x '0))) (set! t288a@tdff@env-names tdff@env-names) (set! te01@set-env-names! (lambda (t2544@x t2545@val) (simple-struct-set! t2544@x '0 t2545@val))) (set! t288b@te01@set-env-names! te01@set-env-names!) (set! te03@env-labels (lambda (t2548@x) (simple-struct-ref t2548@x '1))) (set! t288c@te03@env-labels te03@env-labels) (set! te05@set-env-labels! (lambda (t254a@x t254b@val) (simple-struct-set! t254a@x '1 t254b@val))) (set! t288d@te05@set-env-labels! te05@set-env-labels!) (set! te07@env-itc (lambda (t254e@x) (simple-struct-ref t254e@x '2))) (set! t288e@te07@env-itc te07@env-itc) (set! te09@set-env-itc! (lambda (t2550@x t2551@val) (simple-struct-set! t2550@x '2 t2551@val))) (set! t288f@te09@set-env-itc! te09@set-env-itc!) (set! te0b@dummy '3) (set! t2890@te0b@dummy te0b@dummy) (set! te0d@rp (t6b9@t595@make-record-printer 'interaction-env (lambda (t2554@x t2555@p t2556@wr) (display '"#<environment>" t2555@p)))) (set! t2891@te0d@rp te0d@rp) (set! te17@interaction-env? (lambda (t255a@x) (and (simple-struct? t255a@x) (eq? (simple-struct-name t255a@x) 'interaction-env)))) (set! t2892@te17@interaction-env? te17@interaction-env?) (set! te19@interaction-env-rib (lambda (t255c@x) (simple-struct-ref t255c@x '0))) (set! t2893@te19@interaction-env-rib te19@interaction-env-rib) (set! te1b@set-interaction-env-rib! (lambda (t255e@x t255f@val) (simple-struct-set! t255e@x '0 t255f@val))) (set! t2894@te1b@set-interaction-env-rib! te1b@set-interaction-env-rib!) (set! te1d@interaction-env-r (lambda (t2562@x) (simple-struct-ref t2562@x '1))) (set! t2895@te1d@interaction-env-r te1d@interaction-env-r) (set! te1f@set-interaction-env-r! (lambda (t2564@x t2565@val) (simple-struct-set! t2564@x '1 t2565@val))) (set! t2896@te1f@set-interaction-env-r! te1f@set-interaction-env-r!) (set! te21@interaction-env-locs (lambda (t2568@x) (simple-struct-ref t2568@x '2))) (set! t2897@te21@interaction-env-locs te21@interaction-env-locs) (set! te23@set-interaction-env-locs! (lambda (t256a@x t256b@val) (simple-struct-set! t256a@x '2 t256b@val))) (set! t2898@te23@set-interaction-env-locs! te23@set-interaction-env-locs!) (set! te25@dummy '3) (set! t2899@te25@dummy te25@dummy) (set! te27@interaction-environment-symbols (lambda () (te2f@environment-symbols (te67@interaction-environment)))) (set! t289a@te27@interaction-environment-symbols te27@interaction-environment-symbols) (set! te29@environment-bindings (lambda (t256e@e) (vector->list (vector-map (lambda (t2570@name t2571@label) (te2b@parse-binding (cons t2570@name (t987@t7d4@imported-label->binding t2571@label)))) (tdff@env-names t256e@e) (te03@env-labels t256e@e))))) (set! t289b@te29@environment-bindings te29@environment-bindings) (set! te2b@parse-binding (lambda (t2574@b) (cons (car t2574@b) (let ((t2576@t (cadr t2574@b))) (if (memv t2576@t '(core-prim global)) 'procedure (if (memv t2576@t '(core-macro macro global-macro)) 'syntax (if (memv t2576@t '($core-rtd)) 'record (if (eq? (car t2574@b) (cadr t2574@b)) 'syntax 'unknown)))))))) (set! t289c@te2b@parse-binding te2b@parse-binding) (set! te2d@environment? (lambda (t2578@x) (or (tdfd@env? t2578@x) (te17@interaction-env? t2578@x)))) (set! t289d@te2d@environment? te2d@environment?) (set! te2f@environment-symbols (lambda (t257a@x) (if (tdfd@env? t257a@x) (vector->list (tdff@env-names t257a@x)) (if (te17@interaction-env? t257a@x) (map values (tb10@rib-sym* (te19@interaction-env-rib t257a@x))) (assertion-violation 'environment-symbols '"not an environment" t257a@x))))) (set! t289e@te2f@environment-symbols te2f@environment-symbols) (set! te31@environment (lambda t257c@imp* (let ((t257e@itc (tddf@make-collector))) (let ((t2584@t2581 tde5@imp-collector) (t2585@t2583 t257e@itc)) (let ((t2588@swap (lambda () (let ((t258a@t (t2584@t2581))) (begin (t2584@t2581 t2585@t2583) (set! t2585@t2583 t258a@t)))))) (dynamic-wind t2588@swap (lambda () (call-with-values (lambda () (tddb@parse-import-spec* t257c@imp*)) (lambda (t2590@t258d t2591@t258f) (let ((t2594@subst-labels t2591@t258f) (t2595@subst-names t2590@t258d)) (make-simple-struct 'env '4 (list t2595@subst-names t2594@subst-labels t257e@itc)))))) t2588@swap)))))) (set! t289f@te31@environment te31@environment) (set! te33@null-environment (lambda (t2598@n) (begin (if (not (eqv? t2598@n '5)) (assertion-violation 'null-environment '"not 5" t2598@n) (void)) (te31@environment '(psyntax null-environment-5))))) (set! t28a0@te33@null-environment te33@null-environment) (set! te35@scheme-report-environment (lambda (t259a@n) (begin (if (not (eqv? t259a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" t259a@n) (void)) (te31@environment '(psyntax scheme-report-environment-5))))) (set! t28a1@te35@scheme-report-environment te35@scheme-report-environment) (set! te37@expand (lambda (t259c@x t259d@env) (if (tdfd@env? t259d@env) (let ((t25a0@rib (tddd@make-top-rib (tdff@env-names t259d@env) (te03@env-labels t259d@env)))) (let ((t25a2@x (make-simple-struct 'stx '5 (list t259c@x taf6@top-mark* (list t25a0@rib) '()))) (t25a3@itc (te07@env-itc t259d@env)) (t25a4@rtc (tddf@make-collector)) (t25a5@vtc (tddf@make-collector))) (let ((t25aa@x (let ((t25bc@t25ad te69@top-level-context) (t25bd@t25af tde1@inv-collector) (t25be@t25b1 tde3@vis-collector) (t25bf@t25b3 tde5@imp-collector) (t25c0@t25b5 '#f) (t25c1@t25b7 t25a4@rtc) (t25c2@t25b9 t25a5@vtc) (t25c3@t25bb t25a3@itc)) (let ((t25cc@swap (lambda () (begin (let ((t25ce@t (t25bc@t25ad))) (begin (t25bc@t25ad t25c0@t25b5) (set! t25c0@t25b5 t25ce@t))) (let ((t25d0@t (t25bd@t25af))) (begin (t25bd@t25af t25c1@t25b7) (set! t25c1@t25b7 t25d0@t))) (let ((t25d2@t (t25be@t25b1))) (begin (t25be@t25b1 t25c2@t25b9) (set! t25c2@t25b9 t25d2@t))) (let ((t25d4@t (t25bf@t25b3))) (begin (t25bf@t25b3 t25c3@t25bb) (set! t25c3@t25bb t25d4@t))))))) (dynamic-wind t25cc@swap (lambda () (td9b@chi-expr t25a2@x '() '())) t25cc@swap))))) (begin (tb2e@seal-rib! t25a0@rib) (values t25aa@x (t25a4@rtc)))))) (if (te17@interaction-env? t259d@env) (let ((t25d6@rib (te19@interaction-env-rib t259d@env)) (t25d7@r (te1d@interaction-env-r t259d@env)) (t25d8@rtc (tddf@make-collector))) (let ((t25dc@x (make-simple-struct 'stx '5 (list t259c@x taf6@top-mark* (list t25d6@rib) '())))) (call-with-values (lambda () (let ((t25f2@t25e3 te69@top-level-context) (t25f3@t25e5 tde1@inv-collector) (t25f4@t25e7 tde3@vis-collector) (t25f5@t25e9 tde5@imp-collector) (t25f6@t25eb t259d@env) (t25f7@t25ed t25d8@rtc) (t25f8@t25ef (tddf@make-collector)) (t25f9@t25f1 (tddf@make-collector))) (let ((t2602@swap (lambda () (begin (let ((t2604@t (t25f2@t25e3))) (begin (t25f2@t25e3 t25f6@t25eb) (set! t25f6@t25eb t2604@t))) (let ((t2606@t (t25f3@t25e5))) (begin (t25f3@t25e5 t25f7@t25ed) (set! t25f7@t25ed t2606@t))) (let ((t2608@t (t25f4@t25e7))) (begin (t25f4@t25e7 t25f8@t25ef) (set! t25f8@t25ef t2608@t))) (let ((t260a@t (t25f5@t25e9))) (begin (t25f5@t25e9 t25f9@t25f1) (set! t25f9@t25f1 t260a@t))))))) (dynamic-wind t2602@swap (lambda () (tde9@chi-interaction-expr t25dc@x t25d6@rib t25d7@r)) t2602@swap)))) (lambda (t260c@t25df t260d@t25e1) (let ((t2610@r^ t260d@t25e1) (t2611@e t260c@t25df)) (begin (te1f@set-interaction-env-r! t259d@env t2610@r^) (values t2611@e (t25d8@rtc)))))))) (assertion-violation 'expand '"not an environment" t259d@env))))) (set! t28a2@te37@expand te37@expand) (set! te39@eval (lambda (t2614@x t2615@env) (begin (if (not (te2d@environment? t2615@env)) (error 'eval '"not an environment" t2615@env) (void)) (call-with-values (lambda () (te37@expand t2614@x t2615@env)) (lambda (t261c@t2619 t261d@t261b) (let ((t2620@invoke-req* t261d@t261b) (t2621@x t261c@t2619)) (begin (for-each t988@t7d6@invoke-library t2620@invoke-req*) (eval-core (t712@t6ca@expanded->core t2621@x))))))))) (set! t28a3@te39@eval te39@eval) (set! te3b@library-expander (lambda t2692 (let ((t2693 (length t2692))) (if (= t2693 '3) (apply (lambda (t2624@x t2625@filename t2626@verify-name) (let ((t262b@build-visit-code '#f) (t262d@visit! '#f)) (begin (set! t262b@build-visit-code (lambda (t2680@macro*) (if (null? t2680@macro*) (tad8@ta33@build-void) (tad7@ta31@build-sequence '#f (map (lambda (t2682@x) (let ((t2684@loc (car t2682@x)) (t2685@src (cddr t2682@x))) (list 'set! t2684@loc t2685@src))) t2680@macro*))))) (set! t262d@visit! (lambda (t2678@macro*) (for-each (lambda (t267a@x) (let ((t267c@loc (car t267a@x)) (t267d@proc (cadr t267a@x))) (set-symbol-value! t267c@loc t267d@proc))) t2678@macro*))) (call-with-values (lambda () (tded@core-library-expander t2624@x t2626@verify-name)) (lambda (t2640@t262f t2641@t2631 t2642@t2633 t2643@t2635 t2644@t2637 t2645@t2639 t2646@t263b t2647@t263d t2648@t263f) (let ((t2652@export-env t2648@t263f) (t2653@export-subst t2647@t263d) (t2654@macro* t2646@t263b) (t2655@invoke-code t2645@t2639) (t2656@vis* t2644@t2637) (t2657@inv* t2643@t2635) (t2658@imp* t2642@t2633) (t2659@ver t2641@t2631) (t265a@name t2640@t262f)) (let ((t2664@id (gensym)) (t2665@name t265a@name) (t2666@ver t2659@ver) (t2667@imp* (map t98c@t7de@library-spec t2658@imp*)) (t2668@vis* (map t98c@t7de@library-spec t2656@vis*)) (t2669@inv* (map t98c@t7de@library-spec t2657@inv*)) (t266a@visit-proc (lambda () (t262d@visit! t2654@macro*))) (t266b@invoke-proc (lambda () (eval-core (t712@t6ca@expanded->core t2655@invoke-code)))) (t266c@visit-code (t262b@build-visit-code t2654@macro*)) (t266d@invoke-code t2655@invoke-code)) (begin (t986@t7d2@install-library t2664@id t2665@name t2666@ver t2667@imp* t2668@vis* t2669@inv* t2653@export-subst t2652@export-env t266a@visit-proc t266b@invoke-proc t266c@visit-code t266d@invoke-code '#t t2625@filename) (values t2664@id t2665@name t2666@ver t2667@imp* t2668@vis* t2669@inv* t266d@invoke-code t266c@visit-code t2653@export-subst t2652@export-env))))))))) t2692) (if (= t2693 '2) (apply (lambda (t2688@x t2689@filename) (te3b@library-expander t2688@x t2689@filename (lambda (t268c@x) (values)))) t2692) (if (= t2693 '1) (apply (lambda (t268e@x) (te3b@library-expander t268e@x '#f (lambda (t2690@x) (values)))) t2692) (error 'apply '"invalid arg count"))))))) (set! t28a4@te3b@library-expander te3b@library-expander) (set! te3d@boot-library-expand (lambda (t2694@x) (call-with-values (lambda () (te3b@library-expander t2694@x)) (lambda (t26aa@t2697 t26ab@t2699 t26ac@t269b t26ad@t269d t26ae@t269f t26af@t26a1 t26b0@t26a3 t26b1@t26a5 t26b2@t26a7 t26b3@t26a9) (let ((t26be@export-env t26b3@t26a9) (t26bf@export-subst t26b2@t26a7) (t26c0@visit-code t26b1@t26a5) (t26c1@invoke-code t26b0@t26a3) (t26c2@inv* t26af@t26a1) (t26c3@vis* t26ae@t269f) (t26c4@imp* t26ad@t269d) (t26c5@ver t26ac@t269b) (t26c6@name t26ab@t2699) (t26c7@id t26aa@t2697)) (values t26c6@name t26c1@invoke-code t26bf@export-subst t26be@export-env)))))) (set! t28a5@te3d@boot-library-expand te3d@boot-library-expand) (set! te3f@rev-map-append (lambda (t26d2@f t26d3@ls t26d4@ac) (if (null? t26d3@ls) t26d4@ac (te3f@rev-map-append t26d2@f (cdr t26d3@ls) (cons (t26d2@f (car t26d3@ls)) t26d4@ac))))) (set! t28a6@te3f@rev-map-append te3f@rev-map-append) (set! te41@build-exports (lambda (t26d8@lex*+loc* t26d9@init*) (tad7@ta31@build-sequence '#f (cons (tad8@ta33@build-void) (te3f@rev-map-append (lambda (t26dc@x) (list 'set! (cdr t26dc@x) (car t26dc@x))) t26d8@lex*+loc* t26d9@init*))))) (set! t28a7@te41@build-exports te41@build-exports) (set! te43@make-export-subst (lambda (t26de@name* t26df@id*) (map (lambda (t26e2@name t26e3@id) (let ((t26e6@label (tb88@id->label t26e3@id))) (begin (if (not t26e6@label) (te59@syntax-violation '#f '"cannot export unbound identifier" t26e3@id) (void)) (cons t26e2@name t26e6@label)))) t26de@name* t26df@id*))) (set! t28a8@te43@make-export-subst te43@make-export-subst) (set! te45@make-export-env/macros (lambda (t26e8@lex* t26e9@loc* t26ea@r) (let ((t26ef@lookup '#f)) (begin (set! t26ef@lookup (lambda (t270c@x) (let t2714@f ((t270e@x t270c@x) (t270f@lex* t26e8@lex*) (t2710@loc* t26e9@loc*)) (if (pair? t270f@lex*) (if (eq? t270e@x (car t270f@lex*)) (car t2710@loc*) (t2714@f t270e@x (cdr t270f@lex*) (cdr t2710@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let t26f8@f ((t26f0@r t26ea@r) (t26f1@env '()) (t26f2@global* '()) (t26f3@macro* '())) (if (null? t26f0@r) (values t26f1@env t26f2@global* t26f3@macro*) (let ((t26fa@x (car t26f0@r))) (let ((t26fc@label (car t26fa@x)) (t26fd@b (cdr t26fa@x))) (let ((t2700@t (tb8e@binding-type t26fd@b))) (if (memv t2700@t '(lexical)) (let ((t2702@v (tb90@binding-value t26fd@b))) (let ((t2704@loc (t26ef@lookup (td03@lexical-var t2702@v))) (t2705@type (if (td05@lexical-mutable? t2702@v) 'mutable 'global))) (t26f8@f (cdr t26f0@r) (cons (cons* t26fc@label t2705@type t2704@loc) t26f1@env) (cons (cons (td03@lexical-var t2702@v) t2704@loc) t26f2@global*) t26f3@macro*))) (if (memv t2700@t '(local-macro)) (let ((t2708@loc (gensym))) (t26f8@f (cdr t26f0@r) (cons (cons* t26fc@label 'global-macro t2708@loc) t26f1@env) t26f2@global* (cons (cons t2708@loc (tb90@binding-value t26fd@b)) t26f3@macro*))) (if (memv t2700@t '(local-macro!)) (let ((t270a@loc (gensym))) (t26f8@f (cdr t26f0@r) (cons (cons* t26fc@label 'global-macro! t270a@loc) t26f1@env) t26f2@global* (cons (cons t270a@loc (tb90@binding-value t26fd@b)) t26f3@macro*))) (if (memv t2700@t '($rtd $module)) (t26f8@f (cdr t26f0@r) (cons t26fa@x t26f1@env) t26f2@global* t26f3@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (tb8e@binding-type t26fd@b) (tb90@binding-value t26fd@b))))))))))))))) (set! t28a9@te45@make-export-env/macros te45@make-export-env/macros) (set! te47@generate-temporaries (lambda (t2716@ls) (let ((t2718@t t2716@ls)) (let ((t271a@ls/false (td79@syntax-dispatch t2718@t 'each-any))) (if t271a@ls/false (apply (lambda (t271c@ls) (map (lambda (t271e@x) (make-simple-struct 'stx '5 (list (let ((t2720@x (te5f@syntax->datum t271e@x))) (if (or (symbol? t2720@x) (string? t2720@x)) (gensym t2720@x) (gensym 't))) taf6@top-mark* '() '()))) t271c@ls)) t271a@ls/false) (let ((t2722@t t2718@t)) (let ((t2724@ls/false (td79@syntax-dispatch t2722@t '_))) (if t2724@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) t2724@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2722@t))))))))) (set! t28aa@te47@generate-temporaries te47@generate-temporaries) (set! te49@free-identifier=? (lambda (t2726@x t2727@y) (if (tb72@id? t2726@x) (if (tb72@id? t2727@y) (tb78@free-id=? t2726@x t2727@y) (assertion-violation 'free-identifier=? '"not an identifier" t2727@y)) (assertion-violation 'free-identifier=? '"not an identifier" t2726@x)))) (set! t28ab@te49@free-identifier=? te49@free-identifier=?) (set! te4b@bound-identifier=? (lambda (t272a@x t272b@y) (if (tb72@id? t272a@x) (if (tb72@id? t272b@y) (tb76@bound-id=? t272a@x t272b@y) (assertion-violation 'bound-identifier=? '"not an identifier" t272b@y)) (assertion-violation 'bound-identifier=? '"not an identifier" t272a@x)))) (set! t28ac@te4b@bound-identifier=? te4b@bound-identifier=?) (set! te4d@make-source-condition (lambda (t272e@x) (let ((t2738@t2733 '#f) (t273a@t2735 '#f) (t273c@t2734 '#f) (t273f@t2732 '#f) (t2741@make-source-condition '#f) (t2743@t2730 '#f) (t2745@t2731 '#f) (t2747@source-condition? '#f) (t2749@source-filename '#f) (t274b@source-character '#f)) (begin (set! t2738@t2733 (make-record-type-descriptor '&source-information t2b8e@t28d5@&condition-rtd 't2736 '#f '#f '#((immutable file-name) (immutable character)))) (set! t273a@t2735 '#f) (set! t273c@t2734 (make-record-constructor-descriptor t2738@t2733 t2b8f@t28d7@&condition-rcd t273a@t2735)) (set! t273f@t2732 (record-predicate t2738@t2733)) (set! t2741@make-source-condition (record-constructor t273c@t2734)) (set! t2743@t2730 (record-accessor t2738@t2733 '0)) (set! t2745@t2731 (record-accessor t2738@t2733 '1)) (set! t2747@source-condition? (condition-predicate t2738@t2733)) (set! t2749@source-filename (condition-accessor t2738@t2733 t2743@t2730)) (set! t274b@source-character (condition-accessor t2738@t2733 t2745@t2731)) (if (pair? t272e@x) (t2741@make-source-condition (car t272e@x) (cdr t272e@x)) (condition)))))) (set! t28ad@te4d@make-source-condition te4d@make-source-condition) (set! te4f@extract-position-condition (lambda (t274c@x) (te4d@make-source-condition (te51@expression-position t274c@x)))) (set! t28ae@te4f@extract-position-condition te4f@extract-position-condition) (set! te51@expression-position (lambda (t274e@x) (and (tb3e@stx? t274e@x) (let ((t2750@x (tb40@stx-expr t274e@x))) (and (t6b1@t585@annotation? t2750@x) (t6b2@t587@annotation-source t2750@x)))))) (set! t28af@te51@expression-position te51@expression-position) (set! te53@assertion-error (lambda (t2752@expr t2753@pos) (raise (condition (t2bbe@t2999@make-assertion-violation) (t2bd0@t29cb@make-who-condition 'assert) (t2b94@t292c@make-message-condition '"assertion failed") (t2bc6@t29b0@make-irritants-condition (list t2752@expr)) (te4d@make-source-condition t2753@pos))))) (set! t28b0@te53@assertion-error te53@assertion-error) (set! te55@syntax-error (lambda (t2756@x . t2758@args) (begin (if (not (for-all string? t2758@args)) (assertion-violation 'syntax-error '"invalid argument" t2758@args) (void)) (raise (condition (t2b94@t292c@make-message-condition (if (null? t2758@args) '"invalid syntax" (apply string-append t2758@args))) (t2bf2@t2a27@make-syntax-violation (te5f@syntax->datum t2756@x) '#f) (te4f@extract-position-condition t2756@x)))))) (set! t28b1@te55@syntax-error te55@syntax-error) (set! te57@syntax-violation* (lambda (t275a@who t275b@msg t275c@form t275d@condition-object) (begin (if (not (string? t275b@msg)) (assertion-violation 'syntax-violation '"message is not a string" t275b@msg) (void)) (let ((t2762@who (if (or (string? t275a@who) (symbol? t275a@who)) t275a@who (if (not t275a@who) (let ((t2764@t t275c@form)) (let ((t2766@ls/false (td79@syntax-dispatch t2764@t 'any))) (if (and t2766@ls/false (apply (lambda (t2768@id) (tb72@id? t2768@id)) t2766@ls/false)) (apply (lambda (t276a@id) (te5f@syntax->datum t276a@id)) t2766@ls/false) (let ((t276c@t t2764@t)) (let ((t276e@ls/false (td79@syntax-dispatch t276c@t '(any . any)))) (if (and t276e@ls/false (apply (lambda (t2770@id t2771@rest) (tb72@id? t2770@id)) t276e@ls/false)) (apply (lambda (t2774@id t2775@rest) (te5f@syntax->datum t2774@id)) t276e@ls/false) (let ((t2778@t t276c@t)) (let ((t277a@ls/false (td79@syntax-dispatch t2778@t '_))) (if t277a@ls/false (apply (lambda () '#f) t277a@ls/false) (te59@syntax-violation '#f '"invalid syntax" t2778@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" t275a@who))))) (raise (condition (if t2762@who (t2bd0@t29cb@make-who-condition t2762@who) (condition)) (t2b94@t292c@make-message-condition t275b@msg) t275d@condition-object (te4f@extract-position-condition t275c@form))))))) (set! t28b2@te57@syntax-violation* te57@syntax-violation*) (set! te59@syntax-violation (lambda t278a (let ((t278b (length t278a))) (if (= t278b '3) (apply (lambda (t277c@who t277d@msg t277e@form) (te59@syntax-violation t277c@who t277d@msg t277e@form '#f)) t278a) (if (= t278b '4) (apply (lambda (t2782@who t2783@msg t2784@form t2785@subform) (te57@syntax-violation* t2782@who t2783@msg t2784@form (t2bf2@t2a27@make-syntax-violation (te5f@syntax->datum t2784@form) (te5f@syntax->datum t2785@subform)))) t278a) (error 'apply '"invalid arg count")))))) (set! t28b3@te59@syntax-violation te59@syntax-violation) (set! te5b@identifier? (lambda (t278c@x) (tb72@id? t278c@x))) (set! t28b4@te5b@identifier? te5b@identifier?) (set! te5d@datum->syntax (lambda (t278e@id t278f@datum) (if (tb72@id? t278e@id) (tb52@datum->stx t278e@id t278f@datum) (assertion-violation 'datum->syntax '"not an identifier" t278e@id)))) (set! t28b5@te5d@datum->syntax te5d@datum->syntax) (set! te5f@syntax->datum (lambda (t2792@x) (tb86@stx->datum t2792@x))) (set! t28b6@te5f@syntax->datum te5f@syntax->datum) (set! te61@ungensym-all (lambda (t2794@code) (if (pair? t2794@code) (cons (te61@ungensym-all (car t2794@code)) (te61@ungensym-all (cdr t2794@code))) (if (symbol? t2794@code) (ungensym t2794@code) t2794@code)))) (set! t28b7@te61@ungensym-all te61@ungensym-all) (set! te63@compile-r6rs-top-level (lambda (t2796@x*) (call-with-values (lambda () (tdf1@top-level-expander t2796@x*)) (lambda (t279c@t2799 t279d@t279b) (let ((t27a0@invoke-code t279d@t279b) (t27a1@lib* t279c@t2799)) (lambda () (begin (for-each t988@t7d6@invoke-library t27a1@lib*) (let ((t27a4@expanded (t712@t6ca@expanded->core t27a0@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (te61@ungensym-all t27a4@expanded)) (void)) (eval-core t27a4@expanded)))))))))) (set! t28b8@te63@compile-r6rs-top-level te63@compile-r6rs-top-level) (set! te65@pre-compile-r6rs-top-level (lambda (t27a6@x*) (call-with-values (lambda () (tdf1@top-level-expander t27a6@x*)) (lambda (t27ac@t27a9 t27ad@t27ab) (let ((t27b0@invoke-code t27ad@t27ab) (t27b1@lib* t27ac@t27a9)) (begin (for-each t988@t7d6@invoke-library t27b1@lib*) (t6ba@t597@compile-core (t712@t6ca@expanded->core t27b0@invoke-code)))))))) (set! t28b9@te65@pre-compile-r6rs-top-level te65@pre-compile-r6rs-top-level) (set! te67@interaction-environment (let ((t27b4@the-env '#f)) (lambda () (or t27b4@the-env (let ((t27b6@lib (t981@t7c8@find-library-by-name '(mosh interaction))) (t27b7@rib (tb26@make-empty-rib))) (begin (let ((t27ba@subst (t963@t78c@library-subst t27b6@lib))) (begin (tb12@set-rib-sym*! t27b7@rib (map car t27ba@subst)) (tb16@set-rib-mark**! t27b7@rib (map (lambda (t27bc@x) taf6@top-mark*) t27ba@subst)) (tb1a@set-rib-label*! t27b7@rib (map cdr t27ba@subst)))) (let ((t27be@env (make-simple-struct 'interaction-env '4 (list t27b7@rib '() '())))) (begin (set! t27b4@the-env t27be@env) t27be@env)))))))) (set! t28ba@te67@interaction-environment te67@interaction-environment) (set! te69@top-level-context (t6bc@t59b@make-parameter '#f)) (set! t28bb@te69@top-level-context te69@top-level-context) (t97e@t7c2@current-library-expander te3b@library-expander))
(begin (set! t28ca@t28c5 (unspecified)) (set! t28cc@t28c7 (unspecified)) (set! t28ce@t28c6 (unspecified)) (set! t28d1@&condition? (unspecified)) (set! t28d3@make-&condition (unspecified)) (set! t28d5@&condition-rtd (unspecified)) (set! t28d7@&condition-rcd (unspecified)) (set! t2923@t291e (unspecified)) (set! t2925@t2920 (unspecified)) (set! t2927@t291f (unspecified)) (set! t292a@p? (unspecified)) (set! t292c@make-message-condition (unspecified)) (set! t292e@t291d (unspecified)) (set! t2930@message-condition? (unspecified)) (set! t2932@condition-message (unspecified)) (set! t2934@&message-rtd (unspecified)) (set! t2936@&message-rcd (unspecified)) (set! t293c@t2937 (unspecified)) (set! t293e@t2939 (unspecified)) (set! t2940@t2938 (unspecified)) (set! t2943@p? (unspecified)) (set! t2945@make-warning (unspecified)) (set! t2947@warning? (unspecified)) (set! t2949@&warning-rtd (unspecified)) (set! t294b@&warning-rcd (unspecified)) (set! t2951@t294c (unspecified)) (set! t2953@t294e (unspecified)) (set! t2955@t294d (unspecified)) (set! t2958@p? (unspecified)) (set! t295a@make-serious-condition (unspecified)) (set! t295c@serious-condition? (unspecified)) (set! t295e@&serious-rtd (unspecified)) (set! t2960@&serious-rcd (unspecified)) (set! t2966@t2961 (unspecified)) (set! t2968@t2963 (unspecified)) (set! t296a@t2962 (unspecified)) (set! t296d@p? (unspecified)) (set! t296f@make-error (unspecified)) (set! t2971@error? (unspecified)) (set! t2973@&error-rtd (unspecified)) (set! t2975@&error-rcd (unspecified)) (set! t297b@t2976 (unspecified)) (set! t297d@t2978 (unspecified)) (set! t297f@t2977 (unspecified)) (set! t2982@p? (unspecified)) (set! t2984@make-violation (unspecified)) (set! t2986@violation? (unspecified)) (set! t2988@&violation-rtd (unspecified)) (set! t298a@&violation-rcd (unspecified)) (set! t2990@t298b (unspecified)) (set! t2992@t298d (unspecified)) (set! t2994@t298c (unspecified)) (set! t2997@p? (unspecified)) (set! t2999@make-assertion-violation (unspecified)) (set! t299b@assertion-violation? (unspecified)) (set! t299d@&assertion-rtd (unspecified)) (set! t299f@&assertion-rcd (unspecified)) (set! t29a7@t29a2 (unspecified)) (set! t29a9@t29a4 (unspecified)) (set! t29ab@t29a3 (unspecified)) (set! t29ae@p? (unspecified)) (set! t29b0@make-irritants-condition (unspecified)) (set! t29b2@t29a1 (unspecified)) (set! t29b4@irritants-condition? (unspecified)) (set! t29b6@condition-irritants (unspecified)) (set! t29b8@&irritants-rtd (unspecified)) (set! t29ba@&irritants-rcd (unspecified)) (set! t29c2@t29bd (unspecified)) (set! t29c4@t29bf (unspecified)) (set! t29c6@t29be (unspecified)) (set! t29c9@p? (unspecified)) (set! t29cb@make-who-condition (unspecified)) (set! t29cd@t29bc (unspecified)) (set! t29cf@who-condition? (unspecified)) (set! t29d1@condition-who (unspecified)) (set! t29d3@&who-rtd (unspecified)) (set! t29d5@&who-rcd (unspecified)) (set! t29db@t29d6 (unspecified)) (set! t29dd@t29d8 (unspecified)) (set! t29df@t29d7 (unspecified)) (set! t29e2@p? (unspecified)) (set! t29e4@make-non-continuable-violation (unspecified)) (set! t29e6@non-continuable-violation? (unspecified)) (set! t29e8@&non-continuable-rtd (unspecified)) (set! t29ea@&non-continuable-rcd (unspecified)) (set! t29f0@t29eb (unspecified)) (set! t29f2@t29ed (unspecified)) (set! t29f4@t29ec (unspecified)) (set! t29f7@p? (unspecified)) (set! t29f9@make-implementation-restriction-violation (unspecified)) (set! t29fb@implementation-restriction-violation? (unspecified)) (set! t29fd@&implementation-restriction-rtd (unspecified)) (set! t29ff@&implementation-restriction-rcd (unspecified)) (set! t2a05@t2a00 (unspecified)) (set! t2a07@t2a02 (unspecified)) (set! t2a09@t2a01 (unspecified)) (set! t2a0c@p? (unspecified)) (set! t2a0e@make-lexical-violation (unspecified)) (set! t2a10@lexical-violation? (unspecified)) (set! t2a12@&lexical-rtd (unspecified)) (set! t2a14@&lexical-rcd (unspecified)) (set! t2a1e@t2a19 (unspecified)) (set! t2a20@t2a1b (unspecified)) (set! t2a22@t2a1a (unspecified)) (set! t2a25@p? (unspecified)) (set! t2a27@make-syntax-violation (unspecified)) (set! t2a29@t2a16 (unspecified)) (set! t2a2b@t2a18 (unspecified)) (set! t2a2d@syntax-violation? (unspecified)) (set! t2a2f@syntax-violation-form (unspecified)) (set! t2a31@syntax-violation-subform (unspecified)) (set! t2a33@&syntax-rtd (unspecified)) (set! t2a35@&syntax-rcd (unspecified)) (set! t2a3b@t2a36 (unspecified)) (set! t2a3d@t2a38 (unspecified)) (set! t2a3f@t2a37 (unspecified)) (set! t2a42@p? (unspecified)) (set! t2a44@make-undefined-violation (unspecified)) (set! t2a46@undefined-violation? (unspecified)) (set! t2a48@&undefined-rtd (unspecified)) (set! t2a4a@&undefined-rcd (unspecified)) (set! t2a50@t2a4b (unspecified)) (set! t2a52@t2a4d (unspecified)) (set! t2a54@t2a4c (unspecified)) (set! t2a57@p? (unspecified)) (set! t2a59@make-i/o-error (unspecified)) (set! t2a5b@i/o-error? (unspecified)) (set! t2a5d@&i/o-rtd (unspecified)) (set! t2a5f@&i/o-rcd (unspecified)) (set! t2a65@t2a60 (unspecified)) (set! t2a67@t2a62 (unspecified)) (set! t2a69@t2a61 (unspecified)) (set! t2a6c@p? (unspecified)) (set! t2a6e@make-i/o-read-error (unspecified)) (set! t2a70@i/o-read-error? (unspecified)) (set! t2a72@&i/o-read-rtd (unspecified)) (set! t2a74@&i/o-read-rcd (unspecified)) (set! t2a7a@t2a75 (unspecified)) (set! t2a7c@t2a77 (unspecified)) (set! t2a7e@t2a76 (unspecified)) (set! t2a81@p? (unspecified)) (set! t2a83@make-i/o-write-error (unspecified)) (set! t2a85@i/o-write-error? (unspecified)) (set! t2a87@&i/o-write-rtd (unspecified)) (set! t2a89@&i/o-write-rcd (unspecified)) (set! t2a91@t2a8c (unspecified)) (set! t2a93@t2a8e (unspecified)) (set! t2a95@t2a8d (unspecified)) (set! t2a98@p? (unspecified)) (set! t2a9a@make-i/o-invalid-position-error (unspecified)) (set! t2a9c@t2a8b (unspecified)) (set! t2a9e@i/o-invalid-position-error? (unspecified)) (set! t2aa0@i/o-error-position (unspecified)) (set! t2aa2@&i/o-invalid-position-rtd (unspecified)) (set! t2aa4@&i/o-invalid-position-rcd (unspecified)) (set! t2aac@t2aa7 (unspecified)) (set! t2aae@t2aa9 (unspecified)) (set! t2ab0@t2aa8 (unspecified)) (set! t2ab3@p? (unspecified)) (set! t2ab5@make-i/o-filename-error (unspecified)) (set! t2ab7@t2aa6 (unspecified)) (set! t2ab9@i/o-filename-error? (unspecified)) (set! t2abb@i/o-error-filename (unspecified)) (set! t2abd@&i/o-filename-rtd (unspecified)) (set! t2abf@&i/o-filename-rcd (unspecified)) (set! t2ac5@t2ac0 (unspecified)) (set! t2ac7@t2ac2 (unspecified)) (set! t2ac9@t2ac1 (unspecified)) (set! t2acc@p? (unspecified)) (set! t2ace@make-i/o-file-protection-error (unspecified)) (set! t2ad0@i/o-file-protection-error? (unspecified)) (set! t2ad2@&i/o-file-protection-rtd (unspecified)) (set! t2ad4@&i/o-file-protection-rcd (unspecified)) (set! t2ada@t2ad5 (unspecified)) (set! t2adc@t2ad7 (unspecified)) (set! t2ade@t2ad6 (unspecified)) (set! t2ae1@p? (unspecified)) (set! t2ae3@make-i/o-file-is-read-only-error (unspecified)) (set! t2ae5@i/o-file-is-read-only-error? (unspecified)) (set! t2ae7@&i/o-file-is-read-only-rtd (unspecified)) (set! t2ae9@&i/o-file-is-read-only-rcd (unspecified)) (set! t2aef@t2aea (unspecified)) (set! t2af1@t2aec (unspecified)) (set! t2af3@t2aeb (unspecified)) (set! t2af6@p? (unspecified)) (set! t2af8@make-i/o-file-already-exists-error (unspecified)) (set! t2afa@i/o-file-already-exists-error? (unspecified)) (set! t2afc@&i/o-file-already-exists-rtd (unspecified)) (set! t2afe@&i/o-file-already-exists-rcd (unspecified)) (set! t2b04@t2aff (unspecified)) (set! t2b06@t2b01 (unspecified)) (set! t2b08@t2b00 (unspecified)) (set! t2b0b@p? (unspecified)) (set! t2b0d@make-i/o-file-does-not-exist-error (unspecified)) (set! t2b0f@i/o-file-does-not-exist-error? (unspecified)) (set! t2b11@&i/o-file-does-not-exist-rtd (unspecified)) (set! t2b13@&i/o-file-does-not-exist-rcd (unspecified)) (set! t2b1b@t2b16 (unspecified)) (set! t2b1d@t2b18 (unspecified)) (set! t2b1f@t2b17 (unspecified)) (set! t2b22@p? (unspecified)) (set! t2b24@make-i/o-port-error (unspecified)) (set! t2b26@t2b15 (unspecified)) (set! t2b28@i/o-port-error? (unspecified)) (set! t2b2a@i/o-error-port (unspecified)) (set! t2b2c@&i/o-port-rtd (unspecified)) (set! t2b2e@&i/o-port-rcd (unspecified)) (set! t2b34@t2b2f (unspecified)) (set! t2b36@t2b31 (unspecified)) (set! t2b38@t2b30 (unspecified)) (set! t2b3b@p? (unspecified)) (set! t2b3d@make-i/o-decoding-error (unspecified)) (set! t2b3f@i/o-decoding-error? (unspecified)) (set! t2b41@&i/o-decoding-rtd (unspecified)) (set! t2b43@&i/o-decoding-rcd (unspecified)) (set! t2b4b@t2b46 (unspecified)) (set! t2b4d@t2b48 (unspecified)) (set! t2b4f@t2b47 (unspecified)) (set! t2b52@p? (unspecified)) (set! t2b54@make-i/o-encoding-error (unspecified)) (set! t2b56@t2b45 (unspecified)) (set! t2b58@i/o-encoding-error? (unspecified)) (set! t2b5a@i/o-encoding-error-char (unspecified)) (set! t2b5c@&i/o-encoding-rtd (unspecified)) (set! t2b5e@&i/o-encoding-rcd (unspecified)) (set! t2b64@t2b5f (unspecified)) (set! t2b66@t2b61 (unspecified)) (set! t2b68@t2b60 (unspecified)) (set! t2b6b@p? (unspecified)) (set! t2b6d@make-no-infinities-violation (unspecified)) (set! t2b6f@no-infinities-violation? (unspecified)) (set! t2b71@&no-infinities-rtd (unspecified)) (set! t2b73@&no-infinities-rcd (unspecified)) (set! t2b79@t2b74 (unspecified)) (set! t2b7b@t2b76 (unspecified)) (set! t2b7d@t2b75 (unspecified)) (set! t2b80@p? (unspecified)) (set! t2b82@make-no-nans-violation (unspecified)) (set! t2b84@no-nans-violation? (unspecified)) (set! t2b86@&no-nans-rtd (unspecified)) (set! t2b88@&no-nans-rcd (unspecified)) (set! t28ca@t28c5 (make-record-type-descriptor '&condition '#f 't28c8 '#f '#f '#())) (set! t2b89@t28ca@t28c5 t28ca@t28c5) (set! t28cc@t28c7 '#f) (set! t2b8a@t28cc@t28c7 t28cc@t28c7) (set! t28ce@t28c6 (make-record-constructor-descriptor t28ca@t28c5 '#f t28cc@t28c7)) (set! t2b8b@t28ce@t28c6 t28ce@t28c6) (set! t28d1@&condition? (record-predicate t28ca@t28c5)) (set! t2b8c@t28d1@&condition? t28d1@&condition?) (set! t28d3@make-&condition (record-constructor t28ce@t28c6)) (set! t2b8d@t28d3@make-&condition t28d3@make-&condition) (set! t28d5@&condition-rtd t28ca@t28c5) (set! t2b8e@t28d5@&condition-rtd t28d5@&condition-rtd) (set! t28d7@&condition-rcd t28ce@t28c6) (set! t2b8f@t28d7@&condition-rcd t28d7@&condition-rcd) (set! t2923@t291e (make-record-type-descriptor '&message t28ca@t28c5 't2921 '#f '#f '#((immutable message)))) (set! t2b90@t2923@t291e t2923@t291e) (set! t2925@t2920 '#f) (set! t2b91@t2925@t2920 t2925@t2920) (set! t2927@t291f (make-record-constructor-descriptor t2923@t291e t28ce@t28c6 t2925@t2920)) (set! t2b92@t2927@t291f t2927@t291f) (set! t292a@p? (record-predicate t2923@t291e)) (set! t2b93@t292a@p? t292a@p?) (set! t292c@make-message-condition (record-constructor t2927@t291f)) (set! t2b94@t292c@make-message-condition t292c@make-message-condition) (set! t292e@t291d (record-accessor t2923@t291e '0)) (set! t2b95@t292e@t291d t292e@t291d) (set! t2930@message-condition? (condition-predicate t2923@t291e)) (set! t2b96@t2930@message-condition? t2930@message-condition?) (set! t2932@condition-message (condition-accessor t2923@t291e t292e@t291d)) (set! t2b97@t2932@condition-message t2932@condition-message) (set! t2934@&message-rtd t2923@t291e) (set! t2b98@t2934@&message-rtd t2934@&message-rtd) (set! t2936@&message-rcd t2927@t291f) (set! t2b99@t2936@&message-rcd t2936@&message-rcd) (set! t293c@t2937 (make-record-type-descriptor '&warning t28ca@t28c5 't293a '#f '#f '#())) (set! t2b9a@t293c@t2937 t293c@t2937) (set! t293e@t2939 '#f) (set! t2b9b@t293e@t2939 t293e@t2939) (set! t2940@t2938 (make-record-constructor-descriptor t293c@t2937 t28ce@t28c6 t293e@t2939)) (set! t2b9c@t2940@t2938 t2940@t2938) (set! t2943@p? (record-predicate t293c@t2937)) (set! t2b9d@t2943@p? t2943@p?) (set! t2945@make-warning (record-constructor t2940@t2938)) (set! t2b9e@t2945@make-warning t2945@make-warning) (set! t2947@warning? (condition-predicate t293c@t2937)) (set! t2b9f@t2947@warning? t2947@warning?) (set! t2949@&warning-rtd t293c@t2937) (set! t2ba0@t2949@&warning-rtd t2949@&warning-rtd) (set! t294b@&warning-rcd t2940@t2938) (set! t2ba1@t294b@&warning-rcd t294b@&warning-rcd) (set! t2951@t294c (make-record-type-descriptor '&serious t28ca@t28c5 't294f '#f '#f '#())) (set! t2ba2@t2951@t294c t2951@t294c) (set! t2953@t294e '#f) (set! t2ba3@t2953@t294e t2953@t294e) (set! t2955@t294d (make-record-constructor-descriptor t2951@t294c t28ce@t28c6 t2953@t294e)) (set! t2ba4@t2955@t294d t2955@t294d) (set! t2958@p? (record-predicate t2951@t294c)) (set! t2ba5@t2958@p? t2958@p?) (set! t295a@make-serious-condition (record-constructor t2955@t294d)) (set! t2ba6@t295a@make-serious-condition t295a@make-serious-condition) (set! t295c@serious-condition? (condition-predicate t2951@t294c)) (set! t2ba7@t295c@serious-condition? t295c@serious-condition?) (set! t295e@&serious-rtd t2951@t294c) (set! t2ba8@t295e@&serious-rtd t295e@&serious-rtd) (set! t2960@&serious-rcd t2955@t294d) (set! t2ba9@t2960@&serious-rcd t2960@&serious-rcd) (set! t2966@t2961 (make-record-type-descriptor '&error t2951@t294c 't2964 '#f '#f '#())) (set! t2baa@t2966@t2961 t2966@t2961) (set! t2968@t2963 '#f) (set! t2bab@t2968@t2963 t2968@t2963) (set! t296a@t2962 (make-record-constructor-descriptor t2966@t2961 t2955@t294d t2968@t2963)) (set! t2bac@t296a@t2962 t296a@t2962) (set! t296d@p? (record-predicate t2966@t2961)) (set! t2bad@t296d@p? t296d@p?) (set! t296f@make-error (record-constructor t296a@t2962)) (set! t2bae@t296f@make-error t296f@make-error) (set! t2971@error? (condition-predicate t2966@t2961)) (set! t2baf@t2971@error? t2971@error?) (set! t2973@&error-rtd t2966@t2961) (set! t2bb0@t2973@&error-rtd t2973@&error-rtd) (set! t2975@&error-rcd t296a@t2962) (set! t2bb1@t2975@&error-rcd t2975@&error-rcd) (set! t297b@t2976 (make-record-type-descriptor '&violation t2951@t294c 't2979 '#f '#f '#())) (set! t2bb2@t297b@t2976 t297b@t2976) (set! t297d@t2978 '#f) (set! t2bb3@t297d@t2978 t297d@t2978) (set! t297f@t2977 (make-record-constructor-descriptor t297b@t2976 t2955@t294d t297d@t2978)) (set! t2bb4@t297f@t2977 t297f@t2977) (set! t2982@p? (record-predicate t297b@t2976)) (set! t2bb5@t2982@p? t2982@p?) (set! t2984@make-violation (record-constructor t297f@t2977)) (set! t2bb6@t2984@make-violation t2984@make-violation) (set! t2986@violation? (condition-predicate t297b@t2976)) (set! t2bb7@t2986@violation? t2986@violation?) (set! t2988@&violation-rtd t297b@t2976) (set! t2bb8@t2988@&violation-rtd t2988@&violation-rtd) (set! t298a@&violation-rcd t297f@t2977) (set! t2bb9@t298a@&violation-rcd t298a@&violation-rcd) (set! t2990@t298b (make-record-type-descriptor '&assertion t297b@t2976 't298e '#f '#f '#())) (set! t2bba@t2990@t298b t2990@t298b) (set! t2992@t298d '#f) (set! t2bbb@t2992@t298d t2992@t298d) (set! t2994@t298c (make-record-constructor-descriptor t2990@t298b t297f@t2977 t2992@t298d)) (set! t2bbc@t2994@t298c t2994@t298c) (set! t2997@p? (record-predicate t2990@t298b)) (set! t2bbd@t2997@p? t2997@p?) (set! t2999@make-assertion-violation (record-constructor t2994@t298c)) (set! t2bbe@t2999@make-assertion-violation t2999@make-assertion-violation) (set! t299b@assertion-violation? (condition-predicate t2990@t298b)) (set! t2bbf@t299b@assertion-violation? t299b@assertion-violation?) (set! t299d@&assertion-rtd t2990@t298b) (set! t2bc0@t299d@&assertion-rtd t299d@&assertion-rtd) (set! t299f@&assertion-rcd t2994@t298c) (set! t2bc1@t299f@&assertion-rcd t299f@&assertion-rcd) (set! t29a7@t29a2 (make-record-type-descriptor '&irritants t28ca@t28c5 't29a5 '#f '#f '#((immutable irritants)))) (set! t2bc2@t29a7@t29a2 t29a7@t29a2) (set! t29a9@t29a4 '#f) (set! t2bc3@t29a9@t29a4 t29a9@t29a4) (set! t29ab@t29a3 (make-record-constructor-descriptor t29a7@t29a2 t28ce@t28c6 t29a9@t29a4)) (set! t2bc4@t29ab@t29a3 t29ab@t29a3) (set! t29ae@p? (record-predicate t29a7@t29a2)) (set! t2bc5@t29ae@p? t29ae@p?) (set! t29b0@make-irritants-condition (record-constructor t29ab@t29a3)) (set! t2bc6@t29b0@make-irritants-condition t29b0@make-irritants-condition) (set! t29b2@t29a1 (record-accessor t29a7@t29a2 '0)) (set! t2bc7@t29b2@t29a1 t29b2@t29a1) (set! t29b4@irritants-condition? (condition-predicate t29a7@t29a2)) (set! t2bc8@t29b4@irritants-condition? t29b4@irritants-condition?) (set! t29b6@condition-irritants (condition-accessor t29a7@t29a2 t29b2@t29a1)) (set! t2bc9@t29b6@condition-irritants t29b6@condition-irritants) (set! t29b8@&irritants-rtd t29a7@t29a2) (set! t2bca@t29b8@&irritants-rtd t29b8@&irritants-rtd) (set! t29ba@&irritants-rcd t29ab@t29a3) (set! t2bcb@t29ba@&irritants-rcd t29ba@&irritants-rcd) (set! t29c2@t29bd (make-record-type-descriptor '&who t28ca@t28c5 't29c0 '#f '#f '#((immutable who)))) (set! t2bcc@t29c2@t29bd t29c2@t29bd) (set! t29c4@t29bf '#f) (set! t2bcd@t29c4@t29bf t29c4@t29bf) (set! t29c6@t29be (make-record-constructor-descriptor t29c2@t29bd t28ce@t28c6 t29c4@t29bf)) (set! t2bce@t29c6@t29be t29c6@t29be) (set! t29c9@p? (record-predicate t29c2@t29bd)) (set! t2bcf@t29c9@p? t29c9@p?) (set! t29cb@make-who-condition (record-constructor t29c6@t29be)) (set! t2bd0@t29cb@make-who-condition t29cb@make-who-condition) (set! t29cd@t29bc (record-accessor t29c2@t29bd '0)) (set! t2bd1@t29cd@t29bc t29cd@t29bc) (set! t29cf@who-condition? (condition-predicate t29c2@t29bd)) (set! t2bd2@t29cf@who-condition? t29cf@who-condition?) (set! t29d1@condition-who (condition-accessor t29c2@t29bd t29cd@t29bc)) (set! t2bd3@t29d1@condition-who t29d1@condition-who) (set! t29d3@&who-rtd t29c2@t29bd) (set! t2bd4@t29d3@&who-rtd t29d3@&who-rtd) (set! t29d5@&who-rcd t29c6@t29be) (set! t2bd5@t29d5@&who-rcd t29d5@&who-rcd) (set! t29db@t29d6 (make-record-type-descriptor '&non-continuable t297b@t2976 't29d9 '#f '#f '#())) (set! t2bd6@t29db@t29d6 t29db@t29d6) (set! t29dd@t29d8 '#f) (set! t2bd7@t29dd@t29d8 t29dd@t29d8) (set! t29df@t29d7 (make-record-constructor-descriptor t29db@t29d6 t297f@t2977 t29dd@t29d8)) (set! t2bd8@t29df@t29d7 t29df@t29d7) (set! t29e2@p? (record-predicate t29db@t29d6)) (set! t2bd9@t29e2@p? t29e2@p?) (set! t29e4@make-non-continuable-violation (record-constructor t29df@t29d7)) (set! t2bda@t29e4@make-non-continuable-violation t29e4@make-non-continuable-violation) (set! t29e6@non-continuable-violation? (condition-predicate t29db@t29d6)) (set! t2bdb@t29e6@non-continuable-violation? t29e6@non-continuable-violation?) (set! t29e8@&non-continuable-rtd t29db@t29d6) (set! t2bdc@t29e8@&non-continuable-rtd t29e8@&non-continuable-rtd) (set! t29ea@&non-continuable-rcd t29df@t29d7) (set! t2bdd@t29ea@&non-continuable-rcd t29ea@&non-continuable-rcd) (set! t29f0@t29eb (make-record-type-descriptor '&implementation-restriction t297b@t2976 't29ee '#f '#f '#())) (set! t2bde@t29f0@t29eb t29f0@t29eb) (set! t29f2@t29ed '#f) (set! t2bdf@t29f2@t29ed t29f2@t29ed) (set! t29f4@t29ec (make-record-constructor-descriptor t29f0@t29eb t297f@t2977 t29f2@t29ed)) (set! t2be0@t29f4@t29ec t29f4@t29ec) (set! t29f7@p? (record-predicate t29f0@t29eb)) (set! t2be1@t29f7@p? t29f7@p?) (set! t29f9@make-implementation-restriction-violation (record-constructor t29f4@t29ec)) (set! t2be2@t29f9@make-implementation-restriction-violation t29f9@make-implementation-restriction-violation) (set! t29fb@implementation-restriction-violation? (condition-predicate t29f0@t29eb)) (set! t2be3@t29fb@implementation-restriction-violation? t29fb@implementation-restriction-violation?) (set! t29fd@&implementation-restriction-rtd t29f0@t29eb) (set! t2be4@t29fd@&implementation-restriction-rtd t29fd@&implementation-restriction-rtd) (set! t29ff@&implementation-restriction-rcd t29f4@t29ec) (set! t2be5@t29ff@&implementation-restriction-rcd t29ff@&implementation-restriction-rcd) (set! t2a05@t2a00 (make-record-type-descriptor '&lexical t297b@t2976 't2a03 '#f '#f '#())) (set! t2be6@t2a05@t2a00 t2a05@t2a00) (set! t2a07@t2a02 '#f) (set! t2be7@t2a07@t2a02 t2a07@t2a02) (set! t2a09@t2a01 (make-record-constructor-descriptor t2a05@t2a00 t297f@t2977 t2a07@t2a02)) (set! t2be8@t2a09@t2a01 t2a09@t2a01) (set! t2a0c@p? (record-predicate t2a05@t2a00)) (set! t2be9@t2a0c@p? t2a0c@p?) (set! t2a0e@make-lexical-violation (record-constructor t2a09@t2a01)) (set! t2bea@t2a0e@make-lexical-violation t2a0e@make-lexical-violation) (set! t2a10@lexical-violation? (condition-predicate t2a05@t2a00)) (set! t2beb@t2a10@lexical-violation? t2a10@lexical-violation?) (set! t2a12@&lexical-rtd t2a05@t2a00) (set! t2bec@t2a12@&lexical-rtd t2a12@&lexical-rtd) (set! t2a14@&lexical-rcd t2a09@t2a01) (set! t2bed@t2a14@&lexical-rcd t2a14@&lexical-rcd) (set! t2a1e@t2a19 (make-record-type-descriptor '&syntax t297b@t2976 't2a1c '#f '#f '#((immutable form) (immutable subform)))) (set! t2bee@t2a1e@t2a19 t2a1e@t2a19) (set! t2a20@t2a1b '#f) (set! t2bef@t2a20@t2a1b t2a20@t2a1b) (set! t2a22@t2a1a (make-record-constructor-descriptor t2a1e@t2a19 t297f@t2977 t2a20@t2a1b)) (set! t2bf0@t2a22@t2a1a t2a22@t2a1a) (set! t2a25@p? (record-predicate t2a1e@t2a19)) (set! t2bf1@t2a25@p? t2a25@p?) (set! t2a27@make-syntax-violation (record-constructor t2a22@t2a1a)) (set! t2bf2@t2a27@make-syntax-violation t2a27@make-syntax-violation) (set! t2a29@t2a16 (record-accessor t2a1e@t2a19 '0)) (set! t2bf3@t2a29@t2a16 t2a29@t2a16) (set! t2a2b@t2a18 (record-accessor t2a1e@t2a19 '1)) (set! t2bf4@t2a2b@t2a18 t2a2b@t2a18) (set! t2a2d@syntax-violation? (condition-predicate t2a1e@t2a19)) (set! t2bf5@t2a2d@syntax-violation? t2a2d@syntax-violation?) (set! t2a2f@syntax-violation-form (condition-accessor t2a1e@t2a19 t2a29@t2a16)) (set! t2bf6@t2a2f@syntax-violation-form t2a2f@syntax-violation-form) (set! t2a31@syntax-violation-subform (condition-accessor t2a1e@t2a19 t2a2b@t2a18)) (set! t2bf7@t2a31@syntax-violation-subform t2a31@syntax-violation-subform) (set! t2a33@&syntax-rtd t2a1e@t2a19) (set! t2bf8@t2a33@&syntax-rtd t2a33@&syntax-rtd) (set! t2a35@&syntax-rcd t2a22@t2a1a) (set! t2bf9@t2a35@&syntax-rcd t2a35@&syntax-rcd) (set! t2a3b@t2a36 (make-record-type-descriptor '&undefined t297b@t2976 't2a39 '#f '#f '#())) (set! t2bfa@t2a3b@t2a36 t2a3b@t2a36) (set! t2a3d@t2a38 '#f) (set! t2bfb@t2a3d@t2a38 t2a3d@t2a38) (set! t2a3f@t2a37 (make-record-constructor-descriptor t2a3b@t2a36 t297f@t2977 t2a3d@t2a38)) (set! t2bfc@t2a3f@t2a37 t2a3f@t2a37) (set! t2a42@p? (record-predicate t2a3b@t2a36)) (set! t2bfd@t2a42@p? t2a42@p?) (set! t2a44@make-undefined-violation (record-constructor t2a3f@t2a37)) (set! t2bfe@t2a44@make-undefined-violation t2a44@make-undefined-violation) (set! t2a46@undefined-violation? (condition-predicate t2a3b@t2a36)) (set! t2bff@t2a46@undefined-violation? t2a46@undefined-violation?) (set! t2a48@&undefined-rtd t2a3b@t2a36) (set! t2c00@t2a48@&undefined-rtd t2a48@&undefined-rtd) (set! t2a4a@&undefined-rcd t2a3f@t2a37) (set! t2c01@t2a4a@&undefined-rcd t2a4a@&undefined-rcd) (set! t2a50@t2a4b (make-record-type-descriptor '&i/o t2966@t2961 't2a4e '#f '#f '#())) (set! t2c02@t2a50@t2a4b t2a50@t2a4b) (set! t2a52@t2a4d '#f) (set! t2c03@t2a52@t2a4d t2a52@t2a4d) (set! t2a54@t2a4c (make-record-constructor-descriptor t2a50@t2a4b t296a@t2962 t2a52@t2a4d)) (set! t2c04@t2a54@t2a4c t2a54@t2a4c) (set! t2a57@p? (record-predicate t2a50@t2a4b)) (set! t2c05@t2a57@p? t2a57@p?) (set! t2a59@make-i/o-error (record-constructor t2a54@t2a4c)) (set! t2c06@t2a59@make-i/o-error t2a59@make-i/o-error) (set! t2a5b@i/o-error? (condition-predicate t2a50@t2a4b)) (set! t2c07@t2a5b@i/o-error? t2a5b@i/o-error?) (set! t2a5d@&i/o-rtd t2a50@t2a4b) (set! t2c08@t2a5d@&i/o-rtd t2a5d@&i/o-rtd) (set! t2a5f@&i/o-rcd t2a54@t2a4c) (set! t2c09@t2a5f@&i/o-rcd t2a5f@&i/o-rcd) (set! t2a65@t2a60 (make-record-type-descriptor '&i/o-read t2a50@t2a4b 't2a63 '#f '#f '#())) (set! t2c0a@t2a65@t2a60 t2a65@t2a60) (set! t2a67@t2a62 '#f) (set! t2c0b@t2a67@t2a62 t2a67@t2a62) (set! t2a69@t2a61 (make-record-constructor-descriptor t2a65@t2a60 t2a54@t2a4c t2a67@t2a62)) (set! t2c0c@t2a69@t2a61 t2a69@t2a61) (set! t2a6c@p? (record-predicate t2a65@t2a60)) (set! t2c0d@t2a6c@p? t2a6c@p?) (set! t2a6e@make-i/o-read-error (record-constructor t2a69@t2a61)) (set! t2c0e@t2a6e@make-i/o-read-error t2a6e@make-i/o-read-error) (set! t2a70@i/o-read-error? (condition-predicate t2a65@t2a60)) (set! t2c0f@t2a70@i/o-read-error? t2a70@i/o-read-error?) (set! t2a72@&i/o-read-rtd t2a65@t2a60) (set! t2c10@t2a72@&i/o-read-rtd t2a72@&i/o-read-rtd) (set! t2a74@&i/o-read-rcd t2a69@t2a61) (set! t2c11@t2a74@&i/o-read-rcd t2a74@&i/o-read-rcd) (set! t2a7a@t2a75 (make-record-type-descriptor '&i/o-write t2a50@t2a4b 't2a78 '#f '#f '#())) (set! t2c12@t2a7a@t2a75 t2a7a@t2a75) (set! t2a7c@t2a77 '#f) (set! t2c13@t2a7c@t2a77 t2a7c@t2a77) (set! t2a7e@t2a76 (make-record-constructor-descriptor t2a7a@t2a75 t2a54@t2a4c t2a7c@t2a77)) (set! t2c14@t2a7e@t2a76 t2a7e@t2a76) (set! t2a81@p? (record-predicate t2a7a@t2a75)) (set! t2c15@t2a81@p? t2a81@p?) (set! t2a83@make-i/o-write-error (record-constructor t2a7e@t2a76)) (set! t2c16@t2a83@make-i/o-write-error t2a83@make-i/o-write-error) (set! t2a85@i/o-write-error? (condition-predicate t2a7a@t2a75)) (set! t2c17@t2a85@i/o-write-error? t2a85@i/o-write-error?) (set! t2a87@&i/o-write-rtd t2a7a@t2a75) (set! t2c18@t2a87@&i/o-write-rtd t2a87@&i/o-write-rtd) (set! t2a89@&i/o-write-rcd t2a7e@t2a76) (set! t2c19@t2a89@&i/o-write-rcd t2a89@&i/o-write-rcd) (set! t2a91@t2a8c (make-record-type-descriptor '&i/o-invalid-position t2a50@t2a4b 't2a8f '#f '#f '#((immutable position)))) (set! t2c1a@t2a91@t2a8c t2a91@t2a8c) (set! t2a93@t2a8e '#f) (set! t2c1b@t2a93@t2a8e t2a93@t2a8e) (set! t2a95@t2a8d (make-record-constructor-descriptor t2a91@t2a8c t2a54@t2a4c t2a93@t2a8e)) (set! t2c1c@t2a95@t2a8d t2a95@t2a8d) (set! t2a98@p? (record-predicate t2a91@t2a8c)) (set! t2c1d@t2a98@p? t2a98@p?) (set! t2a9a@make-i/o-invalid-position-error (record-constructor t2a95@t2a8d)) (set! t2c1e@t2a9a@make-i/o-invalid-position-error t2a9a@make-i/o-invalid-position-error) (set! t2a9c@t2a8b (record-accessor t2a91@t2a8c '0)) (set! t2c1f@t2a9c@t2a8b t2a9c@t2a8b) (set! t2a9e@i/o-invalid-position-error? (condition-predicate t2a91@t2a8c)) (set! t2c20@t2a9e@i/o-invalid-position-error? t2a9e@i/o-invalid-position-error?) (set! t2aa0@i/o-error-position (condition-accessor t2a91@t2a8c t2a9c@t2a8b)) (set! t2c21@t2aa0@i/o-error-position t2aa0@i/o-error-position) (set! t2aa2@&i/o-invalid-position-rtd t2a91@t2a8c) (set! t2c22@t2aa2@&i/o-invalid-position-rtd t2aa2@&i/o-invalid-position-rtd) (set! t2aa4@&i/o-invalid-position-rcd t2a95@t2a8d) (set! t2c23@t2aa4@&i/o-invalid-position-rcd t2aa4@&i/o-invalid-position-rcd) (set! t2aac@t2aa7 (make-record-type-descriptor '&i/o-filename t2a50@t2a4b 't2aaa '#f '#f '#((immutable filename)))) (set! t2c24@t2aac@t2aa7 t2aac@t2aa7) (set! t2aae@t2aa9 '#f) (set! t2c25@t2aae@t2aa9 t2aae@t2aa9) (set! t2ab0@t2aa8 (make-record-constructor-descriptor t2aac@t2aa7 t2a54@t2a4c t2aae@t2aa9)) (set! t2c26@t2ab0@t2aa8 t2ab0@t2aa8) (set! t2ab3@p? (record-predicate t2aac@t2aa7)) (set! t2c27@t2ab3@p? t2ab3@p?) (set! t2ab5@make-i/o-filename-error (record-constructor t2ab0@t2aa8)) (set! t2c28@t2ab5@make-i/o-filename-error t2ab5@make-i/o-filename-error) (set! t2ab7@t2aa6 (record-accessor t2aac@t2aa7 '0)) (set! t2c29@t2ab7@t2aa6 t2ab7@t2aa6) (set! t2ab9@i/o-filename-error? (condition-predicate t2aac@t2aa7)) (set! t2c2a@t2ab9@i/o-filename-error? t2ab9@i/o-filename-error?) (set! t2abb@i/o-error-filename (condition-accessor t2aac@t2aa7 t2ab7@t2aa6)) (set! t2c2b@t2abb@i/o-error-filename t2abb@i/o-error-filename) (set! t2abd@&i/o-filename-rtd t2aac@t2aa7) (set! t2c2c@t2abd@&i/o-filename-rtd t2abd@&i/o-filename-rtd) (set! t2abf@&i/o-filename-rcd t2ab0@t2aa8) (set! t2c2d@t2abf@&i/o-filename-rcd t2abf@&i/o-filename-rcd) (set! t2ac5@t2ac0 (make-record-type-descriptor '&i/o-file-protection t2aac@t2aa7 't2ac3 '#f '#f '#())) (set! t2c2e@t2ac5@t2ac0 t2ac5@t2ac0) (set! t2ac7@t2ac2 '#f) (set! t2c2f@t2ac7@t2ac2 t2ac7@t2ac2) (set! t2ac9@t2ac1 (make-record-constructor-descriptor t2ac5@t2ac0 t2ab0@t2aa8 t2ac7@t2ac2)) (set! t2c30@t2ac9@t2ac1 t2ac9@t2ac1) (set! t2acc@p? (record-predicate t2ac5@t2ac0)) (set! t2c31@t2acc@p? t2acc@p?) (set! t2ace@make-i/o-file-protection-error (record-constructor t2ac9@t2ac1)) (set! t2c32@t2ace@make-i/o-file-protection-error t2ace@make-i/o-file-protection-error) (set! t2ad0@i/o-file-protection-error? (condition-predicate t2ac5@t2ac0)) (set! t2c33@t2ad0@i/o-file-protection-error? t2ad0@i/o-file-protection-error?) (set! t2ad2@&i/o-file-protection-rtd t2ac5@t2ac0) (set! t2c34@t2ad2@&i/o-file-protection-rtd t2ad2@&i/o-file-protection-rtd) (set! t2ad4@&i/o-file-protection-rcd t2ac9@t2ac1) (set! t2c35@t2ad4@&i/o-file-protection-rcd t2ad4@&i/o-file-protection-rcd) (set! t2ada@t2ad5 (make-record-type-descriptor '&i/o-file-is-read-only t2ac5@t2ac0 't2ad8 '#f '#f '#())) (set! t2c36@t2ada@t2ad5 t2ada@t2ad5) (set! t2adc@t2ad7 '#f) (set! t2c37@t2adc@t2ad7 t2adc@t2ad7) (set! t2ade@t2ad6 (make-record-constructor-descriptor t2ada@t2ad5 t2ac9@t2ac1 t2adc@t2ad7)) (set! t2c38@t2ade@t2ad6 t2ade@t2ad6) (set! t2ae1@p? (record-predicate t2ada@t2ad5)) (set! t2c39@t2ae1@p? t2ae1@p?) (set! t2ae3@make-i/o-file-is-read-only-error (record-constructor t2ade@t2ad6)) (set! t2c3a@t2ae3@make-i/o-file-is-read-only-error t2ae3@make-i/o-file-is-read-only-error) (set! t2ae5@i/o-file-is-read-only-error? (condition-predicate t2ada@t2ad5)) (set! t2c3b@t2ae5@i/o-file-is-read-only-error? t2ae5@i/o-file-is-read-only-error?) (set! t2ae7@&i/o-file-is-read-only-rtd t2ada@t2ad5) (set! t2c3c@t2ae7@&i/o-file-is-read-only-rtd t2ae7@&i/o-file-is-read-only-rtd) (set! t2ae9@&i/o-file-is-read-only-rcd t2ade@t2ad6) (set! t2c3d@t2ae9@&i/o-file-is-read-only-rcd t2ae9@&i/o-file-is-read-only-rcd) (set! t2aef@t2aea (make-record-type-descriptor '&i/o-file-already-exists t2aac@t2aa7 't2aed '#f '#f '#())) (set! t2c3e@t2aef@t2aea t2aef@t2aea) (set! t2af1@t2aec '#f) (set! t2c3f@t2af1@t2aec t2af1@t2aec) (set! t2af3@t2aeb (make-record-constructor-descriptor t2aef@t2aea t2ab0@t2aa8 t2af1@t2aec)) (set! t2c40@t2af3@t2aeb t2af3@t2aeb) (set! t2af6@p? (record-predicate t2aef@t2aea)) (set! t2c41@t2af6@p? t2af6@p?) (set! t2af8@make-i/o-file-already-exists-error (record-constructor t2af3@t2aeb)) (set! t2c42@t2af8@make-i/o-file-already-exists-error t2af8@make-i/o-file-already-exists-error) (set! t2afa@i/o-file-already-exists-error? (condition-predicate t2aef@t2aea)) (set! t2c43@t2afa@i/o-file-already-exists-error? t2afa@i/o-file-already-exists-error?) (set! t2afc@&i/o-file-already-exists-rtd t2aef@t2aea) (set! t2c44@t2afc@&i/o-file-already-exists-rtd t2afc@&i/o-file-already-exists-rtd) (set! t2afe@&i/o-file-already-exists-rcd t2af3@t2aeb) (set! t2c45@t2afe@&i/o-file-already-exists-rcd t2afe@&i/o-file-already-exists-rcd) (set! t2b04@t2aff (make-record-type-descriptor '&i/o-file-does-not-exist t2aac@t2aa7 't2b02 '#f '#f '#())) (set! t2c46@t2b04@t2aff t2b04@t2aff) (set! t2b06@t2b01 '#f) (set! t2c47@t2b06@t2b01 t2b06@t2b01) (set! t2b08@t2b00 (make-record-constructor-descriptor t2b04@t2aff t2ab0@t2aa8 t2b06@t2b01)) (set! t2c48@t2b08@t2b00 t2b08@t2b00) (set! t2b0b@p? (record-predicate t2b04@t2aff)) (set! t2c49@t2b0b@p? t2b0b@p?) (set! t2b0d@make-i/o-file-does-not-exist-error (record-constructor t2b08@t2b00)) (set! t2c4a@t2b0d@make-i/o-file-does-not-exist-error t2b0d@make-i/o-file-does-not-exist-error) (set! t2b0f@i/o-file-does-not-exist-error? (condition-predicate t2b04@t2aff)) (set! t2c4b@t2b0f@i/o-file-does-not-exist-error? t2b0f@i/o-file-does-not-exist-error?) (set! t2b11@&i/o-file-does-not-exist-rtd t2b04@t2aff) (set! t2c4c@t2b11@&i/o-file-does-not-exist-rtd t2b11@&i/o-file-does-not-exist-rtd) (set! t2b13@&i/o-file-does-not-exist-rcd t2b08@t2b00) (set! t2c4d@t2b13@&i/o-file-does-not-exist-rcd t2b13@&i/o-file-does-not-exist-rcd) (set! t2b1b@t2b16 (make-record-type-descriptor '&i/o-port t2a50@t2a4b 't2b19 '#f '#f '#((immutable port)))) (set! t2c4e@t2b1b@t2b16 t2b1b@t2b16) (set! t2b1d@t2b18 '#f) (set! t2c4f@t2b1d@t2b18 t2b1d@t2b18) (set! t2b1f@t2b17 (make-record-constructor-descriptor t2b1b@t2b16 t2a54@t2a4c t2b1d@t2b18)) (set! t2c50@t2b1f@t2b17 t2b1f@t2b17) (set! t2b22@p? (record-predicate t2b1b@t2b16)) (set! t2c51@t2b22@p? t2b22@p?) (set! t2b24@make-i/o-port-error (record-constructor t2b1f@t2b17)) (set! t2c52@t2b24@make-i/o-port-error t2b24@make-i/o-port-error) (set! t2b26@t2b15 (record-accessor t2b1b@t2b16 '0)) (set! t2c53@t2b26@t2b15 t2b26@t2b15) (set! t2b28@i/o-port-error? (condition-predicate t2b1b@t2b16)) (set! t2c54@t2b28@i/o-port-error? t2b28@i/o-port-error?) (set! t2b2a@i/o-error-port (condition-accessor t2b1b@t2b16 t2b26@t2b15)) (set! t2c55@t2b2a@i/o-error-port t2b2a@i/o-error-port) (set! t2b2c@&i/o-port-rtd t2b1b@t2b16) (set! t2c56@t2b2c@&i/o-port-rtd t2b2c@&i/o-port-rtd) (set! t2b2e@&i/o-port-rcd t2b1f@t2b17) (set! t2c57@t2b2e@&i/o-port-rcd t2b2e@&i/o-port-rcd) (set! t2b34@t2b2f (make-record-type-descriptor '&i/o-decoding t2b1b@t2b16 't2b32 '#f '#f '#())) (set! t2c58@t2b34@t2b2f t2b34@t2b2f) (set! t2b36@t2b31 '#f) (set! t2c59@t2b36@t2b31 t2b36@t2b31) (set! t2b38@t2b30 (make-record-constructor-descriptor t2b34@t2b2f t2b1f@t2b17 t2b36@t2b31)) (set! t2c5a@t2b38@t2b30 t2b38@t2b30) (set! t2b3b@p? (record-predicate t2b34@t2b2f)) (set! t2c5b@t2b3b@p? t2b3b@p?) (set! t2b3d@make-i/o-decoding-error (record-constructor t2b38@t2b30)) (set! t2c5c@t2b3d@make-i/o-decoding-error t2b3d@make-i/o-decoding-error) (set! t2b3f@i/o-decoding-error? (condition-predicate t2b34@t2b2f)) (set! t2c5d@t2b3f@i/o-decoding-error? t2b3f@i/o-decoding-error?) (set! t2b41@&i/o-decoding-rtd t2b34@t2b2f) (set! t2c5e@t2b41@&i/o-decoding-rtd t2b41@&i/o-decoding-rtd) (set! t2b43@&i/o-decoding-rcd t2b38@t2b30) (set! t2c5f@t2b43@&i/o-decoding-rcd t2b43@&i/o-decoding-rcd) (set! t2b4b@t2b46 (make-record-type-descriptor '&i/o-encoding t2b1b@t2b16 't2b49 '#f '#f '#((immutable char)))) (set! t2c60@t2b4b@t2b46 t2b4b@t2b46) (set! t2b4d@t2b48 '#f) (set! t2c61@t2b4d@t2b48 t2b4d@t2b48) (set! t2b4f@t2b47 (make-record-constructor-descriptor t2b4b@t2b46 t2b1f@t2b17 t2b4d@t2b48)) (set! t2c62@t2b4f@t2b47 t2b4f@t2b47) (set! t2b52@p? (record-predicate t2b4b@t2b46)) (set! t2c63@t2b52@p? t2b52@p?) (set! t2b54@make-i/o-encoding-error (record-constructor t2b4f@t2b47)) (set! t2c64@t2b54@make-i/o-encoding-error t2b54@make-i/o-encoding-error) (set! t2b56@t2b45 (record-accessor t2b4b@t2b46 '0)) (set! t2c65@t2b56@t2b45 t2b56@t2b45) (set! t2b58@i/o-encoding-error? (condition-predicate t2b4b@t2b46)) (set! t2c66@t2b58@i/o-encoding-error? t2b58@i/o-encoding-error?) (set! t2b5a@i/o-encoding-error-char (condition-accessor t2b4b@t2b46 t2b56@t2b45)) (set! t2c67@t2b5a@i/o-encoding-error-char t2b5a@i/o-encoding-error-char) (set! t2b5c@&i/o-encoding-rtd t2b4b@t2b46) (set! t2c68@t2b5c@&i/o-encoding-rtd t2b5c@&i/o-encoding-rtd) (set! t2b5e@&i/o-encoding-rcd t2b4f@t2b47) (set! t2c69@t2b5e@&i/o-encoding-rcd t2b5e@&i/o-encoding-rcd) (set! t2b64@t2b5f (make-record-type-descriptor '&no-infinities t29f0@t29eb 't2b62 '#f '#f '#())) (set! t2c6a@t2b64@t2b5f t2b64@t2b5f) (set! t2b66@t2b61 '#f) (set! t2c6b@t2b66@t2b61 t2b66@t2b61) (set! t2b68@t2b60 (make-record-constructor-descriptor t2b64@t2b5f t29f4@t29ec t2b66@t2b61)) (set! t2c6c@t2b68@t2b60 t2b68@t2b60) (set! t2b6b@p? (record-predicate t2b64@t2b5f)) (set! t2c6d@t2b6b@p? t2b6b@p?) (set! t2b6d@make-no-infinities-violation (record-constructor t2b68@t2b60)) (set! t2c6e@t2b6d@make-no-infinities-violation t2b6d@make-no-infinities-violation) (set! t2b6f@no-infinities-violation? (condition-predicate t2b64@t2b5f)) (set! t2c6f@t2b6f@no-infinities-violation? t2b6f@no-infinities-violation?) (set! t2b71@&no-infinities-rtd t2b64@t2b5f) (set! t2c70@t2b71@&no-infinities-rtd t2b71@&no-infinities-rtd) (set! t2b73@&no-infinities-rcd t2b68@t2b60) (set! t2c71@t2b73@&no-infinities-rcd t2b73@&no-infinities-rcd) (set! t2b79@t2b74 (make-record-type-descriptor '&no-nans t29f0@t29eb 't2b77 '#f '#f '#())) (set! t2c72@t2b79@t2b74 t2b79@t2b74) (set! t2b7b@t2b76 '#f) (set! t2c73@t2b7b@t2b76 t2b7b@t2b76) (set! t2b7d@t2b75 (make-record-constructor-descriptor t2b79@t2b74 t29f4@t29ec t2b7b@t2b76)) (set! t2c74@t2b7d@t2b75 t2b7d@t2b75) (set! t2b80@p? (record-predicate t2b79@t2b74)) (set! t2c75@t2b80@p? t2b80@p?) (set! t2b82@make-no-nans-violation (record-constructor t2b7d@t2b75)) (set! t2c76@t2b82@make-no-nans-violation t2b82@make-no-nans-violation) (set! t2b84@no-nans-violation? (condition-predicate t2b79@t2b74)) (set! t2c77@t2b84@no-nans-violation? t2b84@no-nans-violation?) (set! t2b86@&no-nans-rtd t2b79@t2b74) (set! t2c78@t2b86@&no-nans-rtd t2b86@&no-nans-rtd) (set! t2b88@&no-nans-rcd t2b7d@t2b75) (set! t2c79@t2b88@&no-nans-rcd t2b88@&no-nans-rcd) (void))
(begin (begin (t70f@t6c4@current-primitive-locations (lambda (t3144@x) (let ((t3146@t (assq t3144@x '((&no-nans-rcd . t2c79@t2b88@&no-nans-rcd) (&no-nans-rtd . t2c78@t2b86@&no-nans-rtd) (&no-infinities-rcd . t2c71@t2b73@&no-infinities-rcd) (&no-infinities-rtd . t2c70@t2b71@&no-infinities-rtd) (&i/o-encoding-rcd . t2c69@t2b5e@&i/o-encoding-rcd) (&i/o-encoding-rtd . t2c68@t2b5c@&i/o-encoding-rtd) (&i/o-decoding-rcd . t2c5f@t2b43@&i/o-decoding-rcd) (&i/o-decoding-rtd . t2c5e@t2b41@&i/o-decoding-rtd) (&i/o-port-rcd . t2c57@t2b2e@&i/o-port-rcd) (&i/o-port-rtd . t2c56@t2b2c@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . t2c4d@t2b13@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . t2c4c@t2b11@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . t2c45@t2afe@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . t2c44@t2afc@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . t2c3d@t2ae9@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . t2c3c@t2ae7@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . t2c35@t2ad4@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . t2c34@t2ad2@&i/o-file-protection-rtd) (&i/o-filename-rcd . t2c2d@t2abf@&i/o-filename-rcd) (&i/o-filename-rtd . t2c2c@t2abd@&i/o-filename-rtd) (&i/o-invalid-position-rcd . t2c23@t2aa4@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . t2c22@t2aa2@&i/o-invalid-position-rtd) (&i/o-write-rcd . t2c19@t2a89@&i/o-write-rcd) (&i/o-write-rtd . t2c18@t2a87@&i/o-write-rtd) (&i/o-read-rcd . t2c11@t2a74@&i/o-read-rcd) (&i/o-read-rtd . t2c10@t2a72@&i/o-read-rtd) (&i/o-rcd . t2c09@t2a5f@&i/o-rcd) (&i/o-rtd . t2c08@t2a5d@&i/o-rtd) (&undefined-rcd . t2c01@t2a4a@&undefined-rcd) (&undefined-rtd . t2c00@t2a48@&undefined-rtd) (&syntax-rcd . t2bf9@t2a35@&syntax-rcd) (&syntax-rtd . t2bf8@t2a33@&syntax-rtd) (&lexical-rcd . t2bed@t2a14@&lexical-rcd) (&lexical-rtd . t2bec@t2a12@&lexical-rtd) (&implementation-restriction-rcd . t2be5@t29ff@&implementation-restriction-rcd) (&implementation-restriction-rtd . t2be4@t29fd@&implementation-restriction-rtd) (&non-continuable-rcd . t2bdd@t29ea@&non-continuable-rcd) (&non-continuable-rtd . t2bdc@t29e8@&non-continuable-rtd) (&who-rcd . t2bd5@t29d5@&who-rcd) (&who-rtd . t2bd4@t29d3@&who-rtd) (&irritants-rcd . t2bcb@t29ba@&irritants-rcd) (&irritants-rtd . t2bca@t29b8@&irritants-rtd) (&assertion-rcd . t2bc1@t299f@&assertion-rcd) (&assertion-rtd . t2bc0@t299d@&assertion-rtd) (&violation-rcd . t2bb9@t298a@&violation-rcd) (&violation-rtd . t2bb8@t2988@&violation-rtd) (&error-rcd . t2bb1@t2975@&error-rcd) (&error-rtd . t2bb0@t2973@&error-rtd) (&serious-rcd . t2ba9@t2960@&serious-rcd) (&serious-rtd . t2ba8@t295e@&serious-rtd) (&warning-rcd . t2ba1@t294b@&warning-rcd) (&warning-rtd . t2ba0@t2949@&warning-rtd) (&message-rcd . t2b99@t2936@&message-rcd) (&message-rtd . t2b98@t2934@&message-rtd) (&condition-rcd . t2b8f@t28d7@&condition-rcd) (&condition-rtd . t2b8e@t28d5@&condition-rtd) (syntax-error . t28b1@te55@syntax-error) (syntax-dispatch . t284f@td79@syntax-dispatch) (load . t2dee@t2c99@load) (interaction-environment . t28ba@te67@interaction-environment) (library-path . t976@t7b2@library-path) (mosh-cache-dir . t6bd@t59d@mosh-cache-dir) (make-parameter . t6bc@t59b@make-parameter) (make-variable-transformer . t280c@tba4@make-variable-transformer) (identifier? . t28b4@te5b@identifier?) (generate-temporaries . t28aa@te47@generate-temporaries) (free-identifier=? . t28ab@te49@free-identifier=?) (syntax->datum . t28b6@te5f@syntax->datum) (datum->syntax . t28b5@te5d@datum->syntax) (bound-identifier=? . t28ac@te4b@bound-identifier=?) (make-i/o-write-error . t2c16@t2a83@make-i/o-write-error) (make-i/o-read-error . t2c0e@t2a6e@make-i/o-read-error) (make-i/o-port-error . t2c52@t2b24@make-i/o-port-error) (make-i/o-invalid-position-error . t2c1e@t2a9a@make-i/o-invalid-position-error) (make-i/o-filename-error . t2c28@t2ab5@make-i/o-filename-error) (make-i/o-file-protection-error . t2c32@t2ace@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . t2c3a@t2ae3@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . t2c4a@t2b0d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . t2c42@t2af8@make-i/o-file-already-exists-error) (make-i/o-error . t2c06@t2a59@make-i/o-error) (make-i/o-encoding-error . t2c64@t2b54@make-i/o-encoding-error) (make-i/o-decoding-error . t2c5c@t2b3d@make-i/o-decoding-error) (i/o-write-error? . t2c17@t2a85@i/o-write-error?) (i/o-read-error? . t2c0f@t2a70@i/o-read-error?) (i/o-port-error? . t2c54@t2b28@i/o-port-error?) (i/o-invalid-position-error? . t2c20@t2a9e@i/o-invalid-position-error?) (i/o-filename-error? . t2c2a@t2ab9@i/o-filename-error?) (i/o-file-protection-error? . t2c33@t2ad0@i/o-file-protection-error?) (i/o-file-is-read-only-error? . t2c3b@t2ae5@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . t2c4b@t2b0f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . t2c43@t2afa@i/o-file-already-exists-error?) (i/o-error? . t2c07@t2a5b@i/o-error?) (i/o-error-position . t2c21@t2aa0@i/o-error-position) (i/o-error-port . t2c55@t2b2a@i/o-error-port) (i/o-error-filename . t2c2b@t2abb@i/o-error-filename) (i/o-encoding-error? . t2c66@t2b58@i/o-encoding-error?) (i/o-encoding-error-char . t2c67@t2b5a@i/o-encoding-error-char) (i/o-decoding-error? . t2c5d@t2b3f@i/o-decoding-error?) (scheme-report-environment . t28a1@te35@scheme-report-environment) (null-environment . t28a0@te33@null-environment) (command-line . t2deb@t2c93@command-line) (eval . t28a3@te39@eval) (environment . t289f@te31@environment) (who-condition? . t2bd2@t29cf@who-condition?) (warning? . t2b9f@t2947@warning?) (violation? . t2bb7@t2986@violation?) (undefined-violation? . t2bff@t2a46@undefined-violation?) (syntax-violation? . t2bf5@t2a2d@syntax-violation?) (syntax-violation-subform . t2bf7@t2a31@syntax-violation-subform) (syntax-violation-form . t2bf6@t2a2f@syntax-violation-form) (syntax-violation . t28b3@te59@syntax-violation) (serious-condition? . t2ba7@t295c@serious-condition?) (non-continuable-violation? . t2bdb@t29e6@non-continuable-violation?) (message-condition? . t2b96@t2930@message-condition?) (make-who-condition . t2bd0@t29cb@make-who-condition) (make-warning . t2b9e@t2945@make-warning) (make-violation . t2bb6@t2984@make-violation) (make-undefined-violation . t2bfe@t2a44@make-undefined-violation) (make-syntax-violation . t2bf2@t2a27@make-syntax-violation) (make-serious-condition . t2ba6@t295a@make-serious-condition) (make-non-continuable-violation . t2bda@t29e4@make-non-continuable-violation) (make-message-condition . t2b94@t292c@make-message-condition) (make-lexical-violation . t2bea@t2a0e@make-lexical-violation) (make-irritants-condition . t2bc6@t29b0@make-irritants-condition) (make-implementation-restriction-violation . t2be2@t29f9@make-implementation-restriction-violation) (make-error . t2bae@t296f@make-error) (make-assertion-violation . t2bbe@t2999@make-assertion-violation) (lexical-violation? . t2beb@t2a10@lexical-violation?) (irritants-condition? . t2bc8@t29b4@irritants-condition?) (implementation-restriction-violation? . t2be3@t29fb@implementation-restriction-violation?) (error? . t2baf@t2971@error?) (condition-who . t2bd3@t29d1@condition-who) (condition-message . t2b97@t2932@condition-message) (condition-irritants . t2bc9@t29b6@condition-irritants) (assertion-violation? . t2bbf@t299b@assertion-violation?) (no-nans-violation? . t2c77@t2b84@no-nans-violation?) (no-infinities-violation? . t2c6f@t2b6f@no-infinities-violation?) (make-no-nans-violation . t2c76@t2b82@make-no-nans-violation) (make-no-infinities-violation . t2c6e@t2b6d@make-no-infinities-violation) (assertion-error . t28b0@te53@assertion-error))))) (if t3146@t (cdr t3146@t) '#f)))) (t986@t7d2@install-library 't3121 '(mosh interaction) '() '() '() '() '((regexp? . t3119) (alist->eq-hash-table . t3115) (format . t3112) (string-split . t3107) (call-process . t3101) (set-current-directory! . t30fd) (expand-path . t30fc) (current-directory . t30fb) (%spawn . t30fa) (%waitpid . t30f9) (simple-struct-name . t30f8) (simple-struct-set! . t30f7) (simple-struct-ref . t30f6) (make-simple-struct . t30f5) (simple-struct? . t30f4) (pointer-ref-c-int64 . t30f3) (pointer-ref-c-int32 . t30f2) (pointer-ref-c-int16 . t30f1) (pointer-ref-c-int8 . t30f0) (pointer-ref-c-uint64 . t30ef) (pointer-ref-c-uint32 . t30ee) (pointer-ref-c-uint16 . t30ed) (pointer-ref-c-uint8 . t30ec) (pointer-set-c-uint64! . t30eb) (pointer-set-c-uint32! . t30ea) (pointer-set-c-uint16! . t30e9) (pointer-set-c-uint8! . t30e8) (pointer-set-c-int64! . t30e7) (pointer-set-c-int32! . t30e6) (pointer-set-c-int16! . t30e5) (pointer-set-c-int8! . t30e4) (pointer-set-c-pointer! . t30e3) (pointer-set-c-double! . t30e2) (pointer-set-c-float! . t30e1) (pointer-set-c-long-long! . t30e0) (pointer-set-c-long! . t30df) (pointer-set-c-int! . t30de) (pointer-set-c-short! . t30dd) (pointer-set-c-char! . t30dc) (pointer-ref-c-pointer . t30db) (pointer-ref-c-double . t30da) (pointer-ref-c-float . t30d9) (pointer-ref-c-unsigned-long-long . t30d8) (pointer-ref-c-signed-long-long . t30d7) (pointer-ref-c-unsigned-long . t30d6) (pointer-ref-c-signed-long . t30d5) (pointer-ref-c-unsigned-int . t30d4) (pointer-ref-c-signed-int . t30d3) (pointer-ref-c-unsigned-short . t30d2) (pointer-ref-c-signed-short . t30d1) (pointer-ref-c-unsigned-char . t30d0) (pointer-ref-c-signed-char . t30cf) (pointer->integer . t30ce) (integer->pointer . t30cd) (pointer? . t30cc) (shared-errno . t30cb) (%ffi-supported? . t30c6) (%ffi-pointer->string . t30c5) (%ffi-call . t30c4) (%ffi-lookup . t30c3) (%ffi-open . t30c2) (null-terminated-utf8->string . t30c1) (null-terminated-bytevector->string . t30c0) (%fork . t30bf) (%pipe . t30be) (p . t30bd) (whereis . t30a1) (register . t30a0) (vm-join! . t309f) (vm-set-value! . t309e) (vm? . t309d) (main-vm? . t309c) (vm-eval . t309b) (vm-self . t309a) (vm-start! . t3099) (make-vm . t3098) (mutex-try-lock! . t3097) (mutex-unlock! . t3096) (mutex-lock! . t3095) (mutex? . t3094) (make-mutex . t3093) (condition-variable-notify-all! . t3092) (condition-variable-notify! . t3091) (condition-variable-wait! . t3090) (make-condition-variable . t308f) (string-upcase . t3077) (string-titlecase . t3076) (string-normalize-nfkd . t3075) (string-normalize-nfkc . t3074) (string-normalize-nfd . t3073) (string-normalize-nfc . t3072) (string-foldcase . t3071) (string-downcase . t3070) (string-ci>? . t306f) (string-ci>=? . t306e) (string-ci=? . t306d) (string-ci<? . t306c) (string-ci<=? . t306b) (char-whitespace? . t306a) (char-upper-case? . t3069) (char-title-case? . t3068) (char-numeric? . t3067) (char-lower-case? . t3066) (char-general-category . t3065) (char-upcase . t3064) (char-titlecase . t3063) (char-foldcase . t3062) (char-downcase . t3061) (char-ci>? . t3060) (char-ci>=? . t305f) (char-ci=? . t305e) (char-ci<? . t305d) (char-ci<=? . t305c) (char-alphabetic? . t305b) (make-variable-transformer . tba3) (identifier? . te5a) (generate-temporaries . te46) (free-identifier=? . te48) (syntax->datum . te5e) (datum->syntax . te5c) (bound-identifier=? . te4a) (record-type-descriptor? . t305a) (record-predicate . t3059) (record-mutator . t3058) (record-constructor . t3057) (record-accessor . t3056) (make-record-type-descriptor . t3055) (make-record-constructor-descriptor . t3054) (record? . t3053) (record-type-uid . t3052) (record-type-sealed? . t3051) (record-type-parent . t3050) (record-type-opaque? . t304f) (record-type-name . t304e) (record-type-generative? . t304d) (record-type-field-names . t304c) (record-rtd . t304b) (record-field-mutable? . t304a) (delete-file . t3049) (file-exists? . t3048) (vector-sort! . t3047) (vector-sort . t3046) (list-sort . t3045) (symbol-hash . t3044) (string-ci-hash . t3043) (string-hash . t3042) (equal-hash . t3041) (hashtable-equivalence-function . t3040) (make-hashtable . t303f) (hashtable-hash-function . t303e) (make-eqv-hashtable . t303d) (make-eq-hashtable . t303c) (hashtable? . t303b) (hashtable-update! . t303a) (hashtable-size . t3039) (hashtable-set! . t3038) (hashtable-ref . t3037) (hashtable-mutable? . t3036) (hashtable-keys . t3035) (hashtable-entries . t3034) (hashtable-delete! . t3033) (hashtable-copy . t3032) (hashtable-contains? . t3031) (hashtable-clear! . t3030) (call-with-output-file . t302f) (call-with-input-file . t302e) (write-char . t302d) (write . t302c) (with-output-to-file . t302b) (with-input-from-file . t302a) (read-char . t3029) (read . t3028) (peek-char . t3027) (open-output-file . t3026) (open-input-file . t3025) (newline . t3024) (display . t3023) (close-output-port . t3022) (close-input-port . t3021) (eof-object? . t3020) (eof-object . t301f) (current-error-port . t301e) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (utf-8-codec . t3019) (utf-16-codec . t3018) (transcoder-error-handling-mode . t3017) (transcoder-eol-style . t3016) (transcoder-codec . t3015) (transcoded-port . t3014) (textual-port? . t3013) (string->bytevector . t3012) (standard-output-port . t3011) (standard-input-port . t3010) (standard-error-port . t300f) (set-port-position! . t300e) (put-u8 . t300d) (put-string . t300c) (put-datum . t300b) (put-char . t300a) (put-bytevector . t3009) (port? . t3008) (port-transcoder . t3007) (port-position . t3006) (port-has-set-port-position!? . t3005) (port-has-port-position? . t3004) (port-eof? . t3003) (output-port-buffer-mode . t3002) (open-string-output-port . t3001) (open-string-input-port . t3000) (open-file-output-port . t2fff) (open-file-input/output-port . t2ffe) (open-file-input-port . t2ffd) (open-bytevector-output-port . t2ffc) (open-bytevector-input-port . t2ffb) (native-transcoder . t2ffa) (native-eol-style . t2ff9) (make-transcoder . t2ff8) (latin-1-codec . t2ff7) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (make-i/o-encoding-error . t2b53) (make-i/o-decoding-error . t2b3c) (make-custom-textual-output-port . t2ff6) (make-custom-textual-input/output-port . t2ff5) (make-custom-textual-input-port . t2ff4) (make-custom-binary-output-port . t2ff3) (make-custom-binary-input/output-port . t2ff2) (make-custom-binary-input-port . t2ff1) (make-bytevector . t2ff0) (lookahead-u8 . t2fef) (lookahead-char . t2fee) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (i/o-encoding-error? . t2b57) (i/o-encoding-error-char . t2b59) (i/o-decoding-error? . t2b3e) (get-u8 . t2fed) (get-string-n! . t2fec) (get-string-n . t2feb) (get-string-all . t2fea) (get-line . t2fe9) (get-datum . t2fe8) (get-char . t2fe7) (get-bytevector-some . t2fe6) (get-bytevector-n! . t2fe5) (get-bytevector-n . t2fe4) (get-bytevector-all . t2fe3) (flush-output-port . t2fe2) (close-port . t2fe1) (exit . t2fd9) (command-line . t2c92) (string-fill! . t2fd8) (string-set! . t2fd7) (set-cdr! . t2fd6) (set-car! . t2fd5) (remove . t2fd4) (remv . t2fd3) (remp . t2fd2) (remq . t2fd1) (partition . t2fd0) (memv . t2fcf) (memq . t2fce) (memp . t2fcd) (member . t2fcc) (exists . t2fcb) (for-all . t2fca) (fold-right . t2fc9) (fold-left . t2fc8) (find . t2fc7) (filter . t2fc6) (cons* . t2fc5) (assv . t2fc4) (assq . t2fc3) (assp . t2fc2) (assoc . t2fc1) (call-with-string-output-port . t2fc0) (call-with-port . t2fbf) (call-with-bytevector-output-port . t2fbe) (bytevector->string . t2fbd) (buffer-mode? . t2fbc) (binary-port? . t2fbb) (with-exception-handler . t2fba) (raise-continuable . t2fb9) (raise . t2fb8) (eval . te38) (environment . te30) (make-enumeration . t2fb7) (enum-set=? . t2fb6) (enum-set-universe . t2fb5) (enum-set-union . t2fb4) (enum-set-subset? . t2fb3) (enum-set-projection . t2fb2) (enum-set-member? . t2fb1) (enum-set-intersection . t2fb0) (enum-set-indexer . t2faf) (enum-set-difference . t2fae) (enum-set-constructor . t2fad) (enum-set-complement . t2fac) (enum-set->list . t2fab) (who-condition? . t29ce) (warning? . t2946) (violation? . t2985) (undefined-violation? . t2a45) (syntax-violation? . t2a2c) (syntax-violation-subform . t2a30) (syntax-violation-form . t2a2e) (syntax-violation . te58) (simple-conditions . t2faa) (serious-condition? . t295b) (non-continuable-violation? . t29e5) (message-condition? . t292f) (make-who-condition . t29ca) (make-warning . t2944) (make-violation . t2983) (make-undefined-violation . t2a43) (make-syntax-violation . t2a26) (make-serious-condition . t2959) (make-non-continuable-violation . t29e3) (make-message-condition . t292b) (make-lexical-violation . t2a0d) (make-irritants-condition . t29af) (make-implementation-restriction-violation . t29f8) (make-error . t296e) (make-assertion-violation . t2998) (lexical-violation? . t2a0f) (irritants-condition? . t29b3) (implementation-restriction-violation? . t29fa) (error? . t2970) (condition-who . t29d0) (condition-predicate . t2fa9) (condition-message . t2931) (condition-irritants . t29b5) (condition-accessor . t2fa8) (condition . t2fa7) (assertion-violation? . t299a) (condition? . t2fa6) (utf32->string . t2fa5) (utf16->string . t2fa4) (utf8->string . t2fa3) (uint-list->bytevector . t2fa2) (u8-list->bytevector . t2fa1) (string->utf8 . t2fa0) (string->utf32 . t2f9f) (string->utf16 . t2f9e) (sint-list->bytevector . t2f9d) (native-endianness . t2f9c) (bytevector? . t2f9b) (bytevector=? . t2f9a) (bytevector-uint-set! . t2f99) (bytevector-uint-ref . t2f98) (bytevector-u8-set! . t2f97) (bytevector-u8-ref . t2f96) (bytevector-u64-set! . t2f95) (bytevector-u64-ref . t2f94) (bytevector-u64-native-set! . t2f93) (bytevector-u64-native-ref . t2f92) (bytevector-u32-set! . t2f91) (bytevector-u32-ref . t2f90) (bytevector-u32-native-set! . t2f8f) (bytevector-u32-native-ref . t2f8e) (bytevector-u16-set! . t2f8d) (bytevector-u16-ref . t2f8c) (bytevector-u16-native-set! . t2f8b) (bytevector-u16-native-ref . t2f8a) (bytevector-sint-set! . t2f89) (bytevector-sint-ref . t2f88) (bytevector-s8-set! . t2f87) (bytevector-s8-ref . t2f86) (bytevector-s64-set! . t2f85) (bytevector-s64-ref . t2f84) (bytevector-s64-native-set! . t2f83) (bytevector-s64-native-ref . t2f82) (bytevector-s32-set! . t2f81) (bytevector-s32-ref . t2f80) (bytevector-s32-native-set! . t2f7f) (bytevector-s32-native-ref . t2f7e) (bytevector-s16-set! . t2f7d) (bytevector-s16-ref . t2f7c) (bytevector-s16-native-set! . t2f7b) (bytevector-s16-native-ref . t2f7a) (bytevector-length . t2f79) (bytevector-ieee-single-ref . t2f78) (bytevector-ieee-single-set! . t2f77) (bytevector-ieee-single-native-set! . t2f76) (bytevector-ieee-single-native-ref . t2f75) (bytevector-ieee-double-set! . t2f74) (bytevector-ieee-double-ref . t2f73) (bytevector-ieee-double-native-set! . t2f72) (bytevector-ieee-double-native-ref . t2f71) (bytevector-fill! . t2f70) (bytevector-copy! . t2f6f) (bytevector-copy . t2f6e) (bytevector->uint-list . t2f6d) (bytevector->u8-list . t2f6c) (bytevector->sint-list . t2f6b) (no-nans-violation? . t2b83) (no-infinities-violation? . t2b6e) (make-no-nans-violation . t2b81) (make-no-infinities-violation . t2b6c) (real->flonum . t2f6a) (flzero? . t2f69) (fltruncate . t2f68) (fltan . t2f67) (flsqrt . t2f66) (flsin . t2f65) (flround . t2f64) (flpositive? . t2f63) (flonum? . t2f62) (flodd? . t2f61) (flnumerator . t2f60) (flnegative? . t2f5f) (flnan? . t2f5e) (flmod0 . t2f5d) (flmod . t2f5c) (flmin . t2f5b) (flmax . t2f5a) (fllog . t2f59) (flinteger? . t2f58) (flinfinite? . t2f57) (flfloor . t2f56) (flfinite? . t2f55) (flexpt . t2f54) (flexp . t2f53) (fleven? . t2f52) (fldiv0-and-mod0 . t2f51) (fldiv0 . t2f50) (fldiv-and-mod . t2f4f) (fldiv . t2f4e) (fldenominator . t2f4d) (flcos . t2f4c) (flceiling . t2f4b) (flatan . t2f4a) (flasin . t2f49) (flacos . t2f48) (flabs . t2f47) (fl>? . t2f46) (fl>=? . t2f45) (fl=? . t2f44) (fl<? . t2f43) (fl<=? . t2f42) (fl/ . t2f41) (fl- . t2f40) (fl+ . t2f3f) (fl* . t2f3e) (fixnum->flonum . t2f3d) (fxzero? . t2f3c) (fxxor . t2f3b) (fxrotate-bit-field . t2f3a) (fxreverse-bit-field . t2f39) (fxpositive? . t2f38) (fxodd? . t2f37) (fxnot . t2f36) (fxnegative? . t2f35) (fxmod0 . t2f34) (fxmod . t2f33) (fxmin . t2f32) (fxmax . t2f31) (fxlength . t2f30) (fxior . t2f2f) (fxif . t2f2e) (fxfirst-bit-set . t2f2d) (fxeven? . t2f2c) (fxdiv0-and-mod0 . t2f2b) (fxdiv0 . t2f2a) (fxdiv-and-mod . t2f29) (fxdiv . t2f28) (fxcopy-bit-field . t2f27) (fxcopy-bit . t2f26) (fxbit-set? . t2f25) (fxbit-field . t2f24) (fxbit-count . t2f23) (fxarithmetic-shift-right . t2f22) (fxarithmetic-shift-left . t2f21) (fxarithmetic-shift . t2f20) (fxand . t2f1f) (fx>? . t2f1e) (fx>=? . t2f1d) (fx=? . t2f1c) (fx<? . t2f1b) (fx<=? . t2f1a) (fx-/carry . t2f19) (fx- . t2f18) (fx+/carry . t2f17) (fx+ . t2f16) (fx*/carry . t2f15) (fx* . t2f14) (greatest-fixnum . t2f13) (least-fixnum . t2f12) (fixnum-width . t2f11) (fixnum? . t2f10) (bitwise-rotate-bit-field . t2f0f) (bitwise-reverse-bit-field . t2f0e) (bitwise-length . t2f0d) (bitwise-if . t2f0c) (bitwise-first-bit-set . t2f0b) (bitwise-copy-bit-field . t2f0a) (bitwise-copy-bit . t2f09) (bitwise-bit-set? . t2f08) (bitwise-bit-field . t2f07) (bitwise-bit-count . t2f06) (bitwise-xor . t2f05) (bitwise-ior . t2f04) (bitwise-and . t2f03) (bitwise-not . t2f02) (bitwise-arithmetic-shift-right . t2f01) (bitwise-arithmetic-shift-left . t2f00) (bitwise-arithmetic-shift . t2eff) (zero? . t2efe) (vector? . t2efd) (vector-set! . t2efc) (vector-ref . t2efb) (vector-map . t2efa) (vector-length . t2ef9) (vector-for-each . t2ef8) (vector-fill! . t2ef7) (vector->list . t2ef6) (vector . t2ef5) (values . t2ef4) (truncate . t2ef3) (tan . t2ef2) (symbol? . t2ef1) (symbol=? . t2ef0) (symbol->string . t2eef) (substring . t2eee) (string? . t2eed) (string>? . t2eec) (string>=? . t2eeb) (string=? . t2eea) (string<? . t2ee9) (string<=? . t2ee8) (string-ref . t2ee7) (string-length . t2ee6) (string-for-each . t2ee5) (string-copy . t2ee4) (string-append . t2ee3) (string->symbol . t2ee2) (string->number . t2ee1) (string->list . t2ee0) (string . t2edf) (sqrt . t2ede) (sin . t2edd) (round . t2edc) (reverse . t2edb) (real? . t2eda) (real-valued? . t2ed9) (real-part . t2ed8) (rationalize . t2ed7) (rational? . t2ed6) (rational-valued? . t2ed5) (procedure? . t2ed4) (positive? . t2ed3) (pair? . t2ed2) (odd? . t2ed1) (numerator . t2ed0) (number? . t2ecf) (number->string . t2ece) (null? . t2ecd) (not . t2ecc) (negative? . t2ecb) (nan? . t2eca) (min . t2ec9) (max . t2ec8) (map . t2ec7) (make-vector . t2ec6) (make-string . t2ec5) (make-rectangular . t2ec4) (make-polar . t2ec3) (magnitude . t2ec2) (log . t2ec1) (list? . t2ec0) (list-tail . t2ebf) (list-ref . t2ebe) (list->vector . t2ebd) (list->string . t2ebc) (list . t2ebb) (length . t2eba) (lcm . t2eb9) (integer? . t2eb8) (integer-valued? . t2eb7) (integer->char . t2eb6) (infinite? . t2eb5) (inexact? . t2eb4) (inexact . t2eb3) (imag-part . t2eb2) (gcd . t2eb1) (for-each . t2eb0) (floor . t2eaf) (finite? . t2eae) (expt . t2ead) (exp . t2eac) (exact? . t2eab) (exact-integer-sqrt . t2eaa) (exact . t2ea9) (even? . t2ea8) (error . t2ea7) (eqv? . t2ea6) (equal? . t2ea5) (eq? . t2ea4) (dynamic-wind . t2ea3) (div0-and-mod0 . t2ea2) (mod0 . t2ea1) (div0 . t2ea0) (div-and-mod . t2e9f) (mod . t2e9e) (div . t2e9d) (denominator . t2e9c) (cos . t2e9b) (cons . t2e9a) (complex? . t2e99) (char? . t2e98) (char>? . t2e97) (char>=? . t2e96) (char=? . t2e95) (char<? . t2e94) (char<=? . t2e93) (char->integer . t2e92) (ceiling . t2e91) (call-with-values . t2e90) (call/cc . t2e8f) (call-with-current-continuation . t2e8e) (cddddr . t2e8d) (cdddar . t2e8c) (cddadr . t2e8b) (cddaar . t2e8a) (cdaddr . t2e89) (cdadar . t2e88) (cdaadr . t2e87) (cdaaar . t2e86) (cadddr . t2e85) (caddar . t2e84) (cadadr . t2e83) (cadaar . t2e82) (caaddr . t2e81) (caadar . t2e80) (caaadr . t2e7f) (caaaar . t2e7e) (cdddr . t2e7d) (cddar . t2e7c) (cdadr . t2e7b) (cdaar . t2e7a) (caddr . t2e79) (cadar . t2e78) (caadr . t2e77) (caaar . t2e76) (cddr . t2e75) (cdar . t2e74) (cadr . t2e73) (caar . t2e72) (cdr . t2e71) (car . t2e70) (boolean? . t2e6f) (boolean=? . t2e6e) (atan . t2e6d) (assertion-violation . t2e6c) (asin . t2e6b) (apply . t2e6a) (append . t2e69) (angle . t2e68) (acos . t2e67) (abs . t2e66) (/ . t2e65) (* . t2e64) (- . t2e63) (+ . t2e62) (>= . t2e61) (> . t2e60) (= . t2e5f) (<= . t2e5e) (< . t2e5d) (library . t2e5c) (&no-nans . t2e5b) (&no-infinities . t2e5a) (&i/o-encoding . t2e59) (&i/o-decoding . t2e58) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e) (&undefined . t2e4d) (&syntax . t2e4c) (&lexical . t2e4b) (&implementation-restriction . t2e4a) (&non-continuable . t2e49) (&who . t2e48) (&irritants . t2e47) (&assertion . t2e46) (&violation . t2e45) (&error . t2e44) (&serious . t2e43) (&warning . t2e42) (&message . t2e41) (&condition . t2e40) (define-condition-type . t2e3f) (define-enumeration . t2e3e) (define-record-type . t2e3d) (parent-rtd . t2e3c) (nongenerative . t2e3b) (opaque . t2e3a) (sealed . t2e39) (protocol . t2e38) (parent . t2e37) (immutable . t2e36) (mutable . t2e35) (fields . t2e34) (error-handling-mode . t2e33) (file-options . t2e32) (buffer-mode . t2e31) (eol-style . t2e30) (guard . t2e2f) (unsyntax-splicing . t2e2c) (unsyntax . t2e2b) (unquote-splicing . t2e2a) (unquote . t2e29) (_ . t2e28) (else . t2e27) (=> . t2e26) (... . t2e25) (assert . t2e24) (endianness . t2e23) (time . t2e21) (do . t2e20) (cond . t2e1f) (let* . t2e1e) (let*-values . t2e1d) (let-values . t2e1c) (identifier-syntax . t2e1b) (with-syntax . t2e1a) (quasisyntax . t2e19) (quasiquote . t2e18) (syntax-rules . t2e17) (include . t2e16) (record-constructor-descriptor . t2e14) (record-type-descriptor . t2e13) (case . t2e12) (unless . t2e10) (when . t2e0f) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec* . t2e0a) (letrec . t2e09) (case-lambda . t2e07) (lambda . t2e06) (syntax . t2e05) (syntax-case . t2e04) (quote . t2e03) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (import . t2dfe) (begin . t2dfd) (define-syntax . t2dfb) (define . t2dfa)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3122 '(psyntax null-environment-5) '() '() '() '() '((make-promise . t2fda) (unquote-splicing . t2e2a) (unquote . t2e29) (_ . t2e28) (else . t2e27) (=> . t2e26) (... . t2e25) (delay . t2e22) (do . t2e20) (cond . t2e1f) (let* . t2e1e) (quasiquote . t2e18) (syntax-rules . t2e17) (case . t2e12) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec . t2e09) (lambda . t2e06) (quote . t2e03) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (begin . t2dfd) (define-syntax . t2dfb) (define . t2dfa)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3123 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . t306f) (string-ci>=? . t306e) (string-ci=? . t306d) (string-ci<? . t306c) (string-ci<=? . t306b) (char-whitespace? . t306a) (char-upper-case? . t3069) (char-numeric? . t3067) (char-lower-case? . t3066) (char-upcase . t3064) (char-downcase . t3061) (char-ci>? . t3060) (char-ci>=? . t305f) (char-ci=? . t305e) (char-ci<? . t305d) (char-ci<=? . t305c) (char-alphabetic? . t305b) (call-with-output-file . t302f) (call-with-input-file . t302e) (write-char . t302d) (write . t302c) (with-output-to-file . t302b) (with-input-from-file . t302a) (read-char . t3029) (read . t3028) (peek-char . t3027) (open-output-file . t3026) (open-input-file . t3025) (newline . t3024) (display . t3023) (close-output-port . t3022) (close-input-port . t3021) (eof-object . t301f) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (scheme-report-environment . te34) (quotient . t2fe0) (null-environment . te32) (remainder . t2fdf) (modulo . t2fde) (inexact->exact . t2fdd) (force . t2fdc) (exact->inexact . t2fdb) (make-promise . t2fda) (string-fill! . t2fd8) (string-set! . t2fd7) (set-cdr! . t2fd6) (set-car! . t2fd5) (memv . t2fcf) (memq . t2fce) (member . t2fcc) (assv . t2fc4) (assq . t2fc3) (assoc . t2fc1) (eval . te38) (zero? . t2efe) (vector? . t2efd) (vector-set! . t2efc) (vector-ref . t2efb) (vector-length . t2ef9) (vector-fill! . t2ef7) (vector->list . t2ef6) (vector . t2ef5) (values . t2ef4) (truncate . t2ef3) (tan . t2ef2) (symbol? . t2ef1) (symbol->string . t2eef) (substring . t2eee) (string? . t2eed) (string>? . t2eec) (string>=? . t2eeb) (string=? . t2eea) (string<? . t2ee9) (string<=? . t2ee8) (string-ref . t2ee7) (string-length . t2ee6) (string-copy . t2ee4) (string-append . t2ee3) (string->symbol . t2ee2) (string->number . t2ee1) (string->list . t2ee0) (string . t2edf) (sqrt . t2ede) (sin . t2edd) (round . t2edc) (reverse . t2edb) (real? . t2eda) (real-part . t2ed8) (rationalize . t2ed7) (rational? . t2ed6) (procedure? . t2ed4) (positive? . t2ed3) (pair? . t2ed2) (odd? . t2ed1) (numerator . t2ed0) (number? . t2ecf) (number->string . t2ece) (not . t2ecc) (negative? . t2ecb) (min . t2ec9) (max . t2ec8) (map . t2ec7) (make-vector . t2ec6) (make-string . t2ec5) (make-rectangular . t2ec4) (make-polar . t2ec3) (magnitude . t2ec2) (log . t2ec1) (list? . t2ec0) (list-tail . t2ebf) (list-ref . t2ebe) (list->vector . t2ebd) (list->string . t2ebc) (list . t2ebb) (length . t2eba) (lcm . t2eb9) (integer? . t2eb8) (integer->char . t2eb6) (inexact? . t2eb4) (imag-part . t2eb2) (gcd . t2eb1) (for-each . t2eb0) (floor . t2eaf) (expt . t2ead) (exp . t2eac) (exact? . t2eab) (even? . t2ea8) (eqv? . t2ea6) (equal? . t2ea5) (eq? . t2ea4) (dynamic-wind . t2ea3) (denominator . t2e9c) (cos . t2e9b) (cons . t2e9a) (complex? . t2e99) (char? . t2e98) (char>? . t2e97) (char>=? . t2e96) (char=? . t2e95) (char<? . t2e94) (char<=? . t2e93) (char->integer . t2e92) (ceiling . t2e91) (call-with-values . t2e90) (call-with-current-continuation . t2e8e) (cddddr . t2e8d) (cdddar . t2e8c) (cddadr . t2e8b) (cddaar . t2e8a) (cdaddr . t2e89) (cdadar . t2e88) (cdaadr . t2e87) (cdaaar . t2e86) (cadddr . t2e85) (caddar . t2e84) (cadadr . t2e83) (cadaar . t2e82) (caaddr . t2e81) (caadar . t2e80) (caaadr . t2e7f) (caaaar . t2e7e) (cdddr . t2e7d) (cddar . t2e7c) (cdadr . t2e7b) (cdaar . t2e7a) (caddr . t2e79) (cadar . t2e78) (caadr . t2e77) (caaar . t2e76) (cddr . t2e75) (cdar . t2e74) (cadr . t2e73) (caar . t2e72) (cdr . t2e71) (car . t2e70) (boolean? . t2e6f) (atan . t2e6d) (asin . t2e6b) (apply . t2e6a) (append . t2e69) (angle . t2e68) (acos . t2e67) (abs . t2e66) (/ . t2e65) (* . t2e64) (- . t2e63) (+ . t2e62) (>= . t2e61) (> . t2e60) (= . t2e5f) (<= . t2e5e) (< . t2e5d) (unquote-splicing . t2e2a) (unquote . t2e29) (else . t2e27) (=> . t2e26) (... . t2e25) (delay . t2e22) (do . t2e20) (cond . t2e1f) (let* . t2e1e) (quasiquote . t2e18) (syntax-rules . t2e17) (case . t2e12) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec . t2e09) (lambda . t2e06) (quote . t2e03) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (begin . t2dfd) (define-syntax . t2dfb) (define . t2dfa)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3124 '(psyntax modules) '() '() '() '() '((module . t2dfc)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3125 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3126 '(rnrs) '(6) '() '() '() '((regexp? . t3119) (string-upcase . t3077) (string-titlecase . t3076) (string-normalize-nfkd . t3075) (string-normalize-nfkc . t3074) (string-normalize-nfd . t3073) (string-normalize-nfc . t3072) (string-foldcase . t3071) (string-downcase . t3070) (string-ci>? . t306f) (string-ci>=? . t306e) (string-ci=? . t306d) (string-ci<? . t306c) (string-ci<=? . t306b) (char-whitespace? . t306a) (char-upper-case? . t3069) (char-title-case? . t3068) (char-numeric? . t3067) (char-lower-case? . t3066) (char-general-category . t3065) (char-upcase . t3064) (char-titlecase . t3063) (char-foldcase . t3062) (char-downcase . t3061) (char-ci>? . t3060) (char-ci>=? . t305f) (char-ci=? . t305e) (char-ci<? . t305d) (char-ci<=? . t305c) (char-alphabetic? . t305b) (make-variable-transformer . tba3) (identifier? . te5a) (generate-temporaries . te46) (free-identifier=? . te48) (syntax->datum . te5e) (datum->syntax . te5c) (bound-identifier=? . te4a) (record-type-descriptor? . t305a) (record-predicate . t3059) (record-mutator . t3058) (record-constructor . t3057) (record-accessor . t3056) (make-record-type-descriptor . t3055) (make-record-constructor-descriptor . t3054) (record? . t3053) (record-type-uid . t3052) (record-type-sealed? . t3051) (record-type-parent . t3050) (record-type-opaque? . t304f) (record-type-name . t304e) (record-type-generative? . t304d) (record-type-field-names . t304c) (record-rtd . t304b) (record-field-mutable? . t304a) (delete-file . t3049) (file-exists? . t3048) (vector-sort! . t3047) (vector-sort . t3046) (list-sort . t3045) (symbol-hash . t3044) (string-ci-hash . t3043) (string-hash . t3042) (equal-hash . t3041) (hashtable-equivalence-function . t3040) (make-hashtable . t303f) (hashtable-hash-function . t303e) (make-eqv-hashtable . t303d) (make-eq-hashtable . t303c) (hashtable? . t303b) (hashtable-update! . t303a) (hashtable-size . t3039) (hashtable-set! . t3038) (hashtable-ref . t3037) (hashtable-mutable? . t3036) (hashtable-keys . t3035) (hashtable-entries . t3034) (hashtable-delete! . t3033) (hashtable-copy . t3032) (hashtable-contains? . t3031) (hashtable-clear! . t3030) (call-with-output-file . t302f) (call-with-input-file . t302e) (write-char . t302d) (write . t302c) (with-output-to-file . t302b) (with-input-from-file . t302a) (read-char . t3029) (read . t3028) (peek-char . t3027) (open-output-file . t3026) (open-input-file . t3025) (newline . t3024) (display . t3023) (close-output-port . t3022) (close-input-port . t3021) (eof-object? . t3020) (eof-object . t301f) (current-error-port . t301e) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (utf-8-codec . t3019) (utf-16-codec . t3018) (transcoder-error-handling-mode . t3017) (transcoder-eol-style . t3016) (transcoder-codec . t3015) (transcoded-port . t3014) (textual-port? . t3013) (string->bytevector . t3012) (standard-output-port . t3011) (standard-input-port . t3010) (standard-error-port . t300f) (set-port-position! . t300e) (put-u8 . t300d) (put-string . t300c) (put-datum . t300b) (put-char . t300a) (put-bytevector . t3009) (port? . t3008) (port-transcoder . t3007) (port-position . t3006) (port-has-set-port-position!? . t3005) (port-has-port-position? . t3004) (port-eof? . t3003) (output-port-buffer-mode . t3002) (open-string-output-port . t3001) (open-string-input-port . t3000) (open-file-output-port . t2fff) (open-file-input/output-port . t2ffe) (open-file-input-port . t2ffd) (open-bytevector-output-port . t2ffc) (open-bytevector-input-port . t2ffb) (native-transcoder . t2ffa) (native-eol-style . t2ff9) (make-transcoder . t2ff8) (latin-1-codec . t2ff7) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (make-i/o-encoding-error . t2b53) (make-i/o-decoding-error . t2b3c) (make-custom-textual-output-port . t2ff6) (make-custom-textual-input/output-port . t2ff5) (make-custom-textual-input-port . t2ff4) (make-custom-binary-output-port . t2ff3) (make-custom-binary-input/output-port . t2ff2) (make-custom-binary-input-port . t2ff1) (make-bytevector . t2ff0) (lookahead-u8 . t2fef) (lookahead-char . t2fee) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (i/o-encoding-error? . t2b57) (i/o-encoding-error-char . t2b59) (i/o-decoding-error? . t2b3e) (get-u8 . t2fed) (get-string-n! . t2fec) (get-string-n . t2feb) (get-string-all . t2fea) (get-line . t2fe9) (get-datum . t2fe8) (get-char . t2fe7) (get-bytevector-some . t2fe6) (get-bytevector-n! . t2fe5) (get-bytevector-n . t2fe4) (get-bytevector-all . t2fe3) (flush-output-port . t2fe2) (close-port . t2fe1) (exit . t2fd9) (command-line . t2c92) (remove . t2fd4) (remv . t2fd3) (remp . t2fd2) (remq . t2fd1) (partition . t2fd0) (memv . t2fcf) (memq . t2fce) (memp . t2fcd) (member . t2fcc) (exists . t2fcb) (for-all . t2fca) (fold-right . t2fc9) (fold-left . t2fc8) (find . t2fc7) (filter . t2fc6) (cons* . t2fc5) (assv . t2fc4) (assq . t2fc3) (assp . t2fc2) (assoc . t2fc1) (call-with-string-output-port . t2fc0) (call-with-port . t2fbf) (call-with-bytevector-output-port . t2fbe) (bytevector->string . t2fbd) (buffer-mode? . t2fbc) (binary-port? . t2fbb) (with-exception-handler . t2fba) (raise-continuable . t2fb9) (raise . t2fb8) (make-enumeration . t2fb7) (enum-set=? . t2fb6) (enum-set-universe . t2fb5) (enum-set-union . t2fb4) (enum-set-subset? . t2fb3) (enum-set-projection . t2fb2) (enum-set-member? . t2fb1) (enum-set-intersection . t2fb0) (enum-set-indexer . t2faf) (enum-set-difference . t2fae) (enum-set-constructor . t2fad) (enum-set-complement . t2fac) (enum-set->list . t2fab) (who-condition? . t29ce) (warning? . t2946) (violation? . t2985) (undefined-violation? . t2a45) (syntax-violation? . t2a2c) (syntax-violation-subform . t2a30) (syntax-violation-form . t2a2e) (syntax-violation . te58) (simple-conditions . t2faa) (serious-condition? . t295b) (non-continuable-violation? . t29e5) (message-condition? . t292f) (make-who-condition . t29ca) (make-warning . t2944) (make-violation . t2983) (make-undefined-violation . t2a43) (make-syntax-violation . t2a26) (make-serious-condition . t2959) (make-non-continuable-violation . t29e3) (make-message-condition . t292b) (make-lexical-violation . t2a0d) (make-irritants-condition . t29af) (make-implementation-restriction-violation . t29f8) (make-error . t296e) (make-assertion-violation . t2998) (lexical-violation? . t2a0f) (irritants-condition? . t29b3) (implementation-restriction-violation? . t29fa) (error? . t2970) (condition-who . t29d0) (condition-predicate . t2fa9) (condition-message . t2931) (condition-irritants . t29b5) (condition-accessor . t2fa8) (condition . t2fa7) (assertion-violation? . t299a) (condition? . t2fa6) (utf32->string . t2fa5) (utf16->string . t2fa4) (utf8->string . t2fa3) (uint-list->bytevector . t2fa2) (u8-list->bytevector . t2fa1) (string->utf8 . t2fa0) (string->utf32 . t2f9f) (string->utf16 . t2f9e) (sint-list->bytevector . t2f9d) (native-endianness . t2f9c) (bytevector? . t2f9b) (bytevector=? . t2f9a) (bytevector-uint-set! . t2f99) (bytevector-uint-ref . t2f98) (bytevector-u8-set! . t2f97) (bytevector-u8-ref . t2f96) (bytevector-u64-set! . t2f95) (bytevector-u64-ref . t2f94) (bytevector-u64-native-set! . t2f93) (bytevector-u64-native-ref . t2f92) (bytevector-u32-set! . t2f91) (bytevector-u32-ref . t2f90) (bytevector-u32-native-set! . t2f8f) (bytevector-u32-native-ref . t2f8e) (bytevector-u16-set! . t2f8d) (bytevector-u16-ref . t2f8c) (bytevector-u16-native-set! . t2f8b) (bytevector-u16-native-ref . t2f8a) (bytevector-sint-set! . t2f89) (bytevector-sint-ref . t2f88) (bytevector-s8-set! . t2f87) (bytevector-s8-ref . t2f86) (bytevector-s64-set! . t2f85) (bytevector-s64-ref . t2f84) (bytevector-s64-native-set! . t2f83) (bytevector-s64-native-ref . t2f82) (bytevector-s32-set! . t2f81) (bytevector-s32-ref . t2f80) (bytevector-s32-native-set! . t2f7f) (bytevector-s32-native-ref . t2f7e) (bytevector-s16-set! . t2f7d) (bytevector-s16-ref . t2f7c) (bytevector-s16-native-set! . t2f7b) (bytevector-s16-native-ref . t2f7a) (bytevector-length . t2f79) (bytevector-ieee-single-ref . t2f78) (bytevector-ieee-single-set! . t2f77) (bytevector-ieee-single-native-set! . t2f76) (bytevector-ieee-single-native-ref . t2f75) (bytevector-ieee-double-set! . t2f74) (bytevector-ieee-double-ref . t2f73) (bytevector-ieee-double-native-set! . t2f72) (bytevector-ieee-double-native-ref . t2f71) (bytevector-fill! . t2f70) (bytevector-copy! . t2f6f) (bytevector-copy . t2f6e) (bytevector->uint-list . t2f6d) (bytevector->u8-list . t2f6c) (bytevector->sint-list . t2f6b) (no-nans-violation? . t2b83) (no-infinities-violation? . t2b6e) (make-no-nans-violation . t2b81) (make-no-infinities-violation . t2b6c) (real->flonum . t2f6a) (flzero? . t2f69) (fltruncate . t2f68) (fltan . t2f67) (flsqrt . t2f66) (flsin . t2f65) (flround . t2f64) (flpositive? . t2f63) (flonum? . t2f62) (flodd? . t2f61) (flnumerator . t2f60) (flnegative? . t2f5f) (flnan? . t2f5e) (flmod0 . t2f5d) (flmod . t2f5c) (flmin . t2f5b) (flmax . t2f5a) (fllog . t2f59) (flinteger? . t2f58) (flinfinite? . t2f57) (flfloor . t2f56) (flfinite? . t2f55) (flexpt . t2f54) (flexp . t2f53) (fleven? . t2f52) (fldiv0-and-mod0 . t2f51) (fldiv0 . t2f50) (fldiv-and-mod . t2f4f) (fldiv . t2f4e) (fldenominator . t2f4d) (flcos . t2f4c) (flceiling . t2f4b) (flatan . t2f4a) (flasin . t2f49) (flacos . t2f48) (flabs . t2f47) (fl>? . t2f46) (fl>=? . t2f45) (fl=? . t2f44) (fl<? . t2f43) (fl<=? . t2f42) (fl/ . t2f41) (fl- . t2f40) (fl+ . t2f3f) (fl* . t2f3e) (fixnum->flonum . t2f3d) (fxzero? . t2f3c) (fxxor . t2f3b) (fxrotate-bit-field . t2f3a) (fxreverse-bit-field . t2f39) (fxpositive? . t2f38) (fxodd? . t2f37) (fxnot . t2f36) (fxnegative? . t2f35) (fxmod0 . t2f34) (fxmod . t2f33) (fxmin . t2f32) (fxmax . t2f31) (fxlength . t2f30) (fxior . t2f2f) (fxif . t2f2e) (fxfirst-bit-set . t2f2d) (fxeven? . t2f2c) (fxdiv0-and-mod0 . t2f2b) (fxdiv0 . t2f2a) (fxdiv-and-mod . t2f29) (fxdiv . t2f28) (fxcopy-bit-field . t2f27) (fxcopy-bit . t2f26) (fxbit-set? . t2f25) (fxbit-field . t2f24) (fxbit-count . t2f23) (fxarithmetic-shift-right . t2f22) (fxarithmetic-shift-left . t2f21) (fxarithmetic-shift . t2f20) (fxand . t2f1f) (fx>? . t2f1e) (fx>=? . t2f1d) (fx=? . t2f1c) (fx<? . t2f1b) (fx<=? . t2f1a) (fx-/carry . t2f19) (fx- . t2f18) (fx+/carry . t2f17) (fx+ . t2f16) (fx*/carry . t2f15) (fx* . t2f14) (greatest-fixnum . t2f13) (least-fixnum . t2f12) (fixnum-width . t2f11) (fixnum? . t2f10) (bitwise-rotate-bit-field . t2f0f) (bitwise-reverse-bit-field . t2f0e) (bitwise-length . t2f0d) (bitwise-if . t2f0c) (bitwise-first-bit-set . t2f0b) (bitwise-copy-bit-field . t2f0a) (bitwise-copy-bit . t2f09) (bitwise-bit-set? . t2f08) (bitwise-bit-field . t2f07) (bitwise-bit-count . t2f06) (bitwise-xor . t2f05) (bitwise-ior . t2f04) (bitwise-and . t2f03) (bitwise-not . t2f02) (bitwise-arithmetic-shift-right . t2f01) (bitwise-arithmetic-shift-left . t2f00) (bitwise-arithmetic-shift . t2eff) (zero? . t2efe) (vector? . t2efd) (vector-set! . t2efc) (vector-ref . t2efb) (vector-map . t2efa) (vector-length . t2ef9) (vector-for-each . t2ef8) (vector-fill! . t2ef7) (vector->list . t2ef6) (vector . t2ef5) (values . t2ef4) (truncate . t2ef3) (tan . t2ef2) (symbol? . t2ef1) (symbol=? . t2ef0) (symbol->string . t2eef) (substring . t2eee) (string? . t2eed) (string>? . t2eec) (string>=? . t2eeb) (string=? . t2eea) (string<? . t2ee9) (string<=? . t2ee8) (string-ref . t2ee7) (string-length . t2ee6) (string-for-each . t2ee5) (string-copy . t2ee4) (string-append . t2ee3) (string->symbol . t2ee2) (string->number . t2ee1) (string->list . t2ee0) (string . t2edf) (sqrt . t2ede) (sin . t2edd) (round . t2edc) (reverse . t2edb) (real? . t2eda) (real-valued? . t2ed9) (real-part . t2ed8) (rationalize . t2ed7) (rational? . t2ed6) (rational-valued? . t2ed5) (procedure? . t2ed4) (positive? . t2ed3) (pair? . t2ed2) (odd? . t2ed1) (numerator . t2ed0) (number? . t2ecf) (number->string . t2ece) (null? . t2ecd) (not . t2ecc) (negative? . t2ecb) (nan? . t2eca) (min . t2ec9) (max . t2ec8) (map . t2ec7) (make-vector . t2ec6) (make-string . t2ec5) (make-rectangular . t2ec4) (make-polar . t2ec3) (magnitude . t2ec2) (log . t2ec1) (list? . t2ec0) (list-tail . t2ebf) (list-ref . t2ebe) (list->vector . t2ebd) (list->string . t2ebc) (list . t2ebb) (length . t2eba) (lcm . t2eb9) (integer? . t2eb8) (integer-valued? . t2eb7) (integer->char . t2eb6) (infinite? . t2eb5) (inexact? . t2eb4) (inexact . t2eb3) (imag-part . t2eb2) (gcd . t2eb1) (for-each . t2eb0) (floor . t2eaf) (finite? . t2eae) (expt . t2ead) (exp . t2eac) (exact? . t2eab) (exact-integer-sqrt . t2eaa) (exact . t2ea9) (even? . t2ea8) (error . t2ea7) (eqv? . t2ea6) (equal? . t2ea5) (eq? . t2ea4) (dynamic-wind . t2ea3) (div0-and-mod0 . t2ea2) (mod0 . t2ea1) (div0 . t2ea0) (div-and-mod . t2e9f) (mod . t2e9e) (div . t2e9d) (denominator . t2e9c) (cos . t2e9b) (cons . t2e9a) (complex? . t2e99) (char? . t2e98) (char>? . t2e97) (char>=? . t2e96) (char=? . t2e95) (char<? . t2e94) (char<=? . t2e93) (char->integer . t2e92) (ceiling . t2e91) (call-with-values . t2e90) (call/cc . t2e8f) (call-with-current-continuation . t2e8e) (cddddr . t2e8d) (cdddar . t2e8c) (cddadr . t2e8b) (cddaar . t2e8a) (cdaddr . t2e89) (cdadar . t2e88) (cdaadr . t2e87) (cdaaar . t2e86) (cadddr . t2e85) (caddar . t2e84) (cadadr . t2e83) (cadaar . t2e82) (caaddr . t2e81) (caadar . t2e80) (caaadr . t2e7f) (caaaar . t2e7e) (cdddr . t2e7d) (cddar . t2e7c) (cdadr . t2e7b) (cdaar . t2e7a) (caddr . t2e79) (cadar . t2e78) (caadr . t2e77) (caaar . t2e76) (cddr . t2e75) (cdar . t2e74) (cadr . t2e73) (caar . t2e72) (cdr . t2e71) (car . t2e70) (boolean? . t2e6f) (boolean=? . t2e6e) (atan . t2e6d) (assertion-violation . t2e6c) (asin . t2e6b) (apply . t2e6a) (append . t2e69) (angle . t2e68) (acos . t2e67) (abs . t2e66) (/ . t2e65) (* . t2e64) (- . t2e63) (+ . t2e62) (>= . t2e61) (> . t2e60) (= . t2e5f) (<= . t2e5e) (< . t2e5d) (&no-nans . t2e5b) (&no-infinities . t2e5a) (&i/o-encoding . t2e59) (&i/o-decoding . t2e58) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e) (&undefined . t2e4d) (&syntax . t2e4c) (&lexical . t2e4b) (&implementation-restriction . t2e4a) (&non-continuable . t2e49) (&who . t2e48) (&irritants . t2e47) (&assertion . t2e46) (&violation . t2e45) (&error . t2e44) (&serious . t2e43) (&warning . t2e42) (&message . t2e41) (&condition . t2e40) (define-condition-type . t2e3f) (define-enumeration . t2e3e) (define-record-type . t2e3d) (parent-rtd . t2e3c) (nongenerative . t2e3b) (opaque . t2e3a) (sealed . t2e39) (protocol . t2e38) (parent . t2e37) (immutable . t2e36) (mutable . t2e35) (fields . t2e34) (error-handling-mode . t2e33) (file-options . t2e32) (buffer-mode . t2e31) (eol-style . t2e30) (guard . t2e2f) (unsyntax-splicing . t2e2c) (unsyntax . t2e2b) (unquote-splicing . t2e2a) (unquote . t2e29) (_ . t2e28) (else . t2e27) (=> . t2e26) (... . t2e25) (assert . t2e24) (endianness . t2e23) (do . t2e20) (cond . t2e1f) (let* . t2e1e) (let*-values . t2e1d) (let-values . t2e1c) (identifier-syntax . t2e1b) (with-syntax . t2e1a) (quasisyntax . t2e19) (quasiquote . t2e18) (syntax-rules . t2e17) (record-constructor-descriptor . t2e14) (record-type-descriptor . t2e13) (case . t2e12) (unless . t2e10) (when . t2e0f) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec* . t2e0a) (letrec . t2e09) (case-lambda . t2e07) (lambda . t2e06) (syntax . t2e05) (syntax-case . t2e04) (quote . t2e03) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (begin . t2dfd) (define-syntax . t2dfb) (define . t2dfa)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3127 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . te34) (quotient . t2fe0) (null-environment . te32) (remainder . t2fdf) (modulo . t2fde) (inexact->exact . t2fdd) (force . t2fdc) (exact->inexact . t2fdb) (make-promise . t2fda) (delay . t2e22)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3128 '(rnrs control) '(6) '() '() '() '((do . t2e20) (unless . t2e10) (when . t2e0f) (case-lambda . t2e07)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3129 '(rnrs eval) '(6) '() '() '() '((eval . te38) (environment . te30)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . t2fd6) (set-car! . t2fd5)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . t2fd8) (string-set! . t2fd7)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312c '(rnrs programs) '(6) '() '() '() '((exit . t2fd9) (command-line . t2c92)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . tba3) (identifier? . te5a) (generate-temporaries . te46) (free-identifier=? . te48) (syntax->datum . te5e) (datum->syntax . te5c) (bound-identifier=? . te4a) (syntax-violation . te58) (unsyntax-splicing . t2e2c) (unsyntax . t2e2b) (_ . t2e28) (... . t2e25) (with-syntax . t2e1a) (quasisyntax . t2e19) (syntax . t2e05) (syntax-case . t2e04)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312e '(rnrs files) '(6) '() '() '() '((delete-file . t3049) (file-exists? . t3048) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't312f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . t3047) (vector-sort . t3046) (list-sort . t3045)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3130 '(rnrs base) '(6) '() '() '() '((zero? . t2efe) (vector? . t2efd) (vector-set! . t2efc) (vector-ref . t2efb) (vector-map . t2efa) (vector-length . t2ef9) (vector-for-each . t2ef8) (vector-fill! . t2ef7) (vector->list . t2ef6) (vector . t2ef5) (values . t2ef4) (truncate . t2ef3) (tan . t2ef2) (symbol? . t2ef1) (symbol=? . t2ef0) (symbol->string . t2eef) (substring . t2eee) (string? . t2eed) (string>? . t2eec) (string>=? . t2eeb) (string=? . t2eea) (string<? . t2ee9) (string<=? . t2ee8) (string-ref . t2ee7) (string-length . t2ee6) (string-for-each . t2ee5) (string-copy . t2ee4) (string-append . t2ee3) (string->symbol . t2ee2) (string->number . t2ee1) (string->list . t2ee0) (string . t2edf) (sqrt . t2ede) (sin . t2edd) (round . t2edc) (reverse . t2edb) (real? . t2eda) (real-valued? . t2ed9) (real-part . t2ed8) (rationalize . t2ed7) (rational? . t2ed6) (rational-valued? . t2ed5) (procedure? . t2ed4) (positive? . t2ed3) (pair? . t2ed2) (odd? . t2ed1) (numerator . t2ed0) (number? . t2ecf) (number->string . t2ece) (null? . t2ecd) (not . t2ecc) (negative? . t2ecb) (nan? . t2eca) (min . t2ec9) (max . t2ec8) (map . t2ec7) (make-vector . t2ec6) (make-string . t2ec5) (make-rectangular . t2ec4) (make-polar . t2ec3) (magnitude . t2ec2) (log . t2ec1) (list? . t2ec0) (list-tail . t2ebf) (list-ref . t2ebe) (list->vector . t2ebd) (list->string . t2ebc) (list . t2ebb) (length . t2eba) (lcm . t2eb9) (integer? . t2eb8) (integer-valued? . t2eb7) (integer->char . t2eb6) (infinite? . t2eb5) (inexact? . t2eb4) (inexact . t2eb3) (imag-part . t2eb2) (gcd . t2eb1) (for-each . t2eb0) (floor . t2eaf) (finite? . t2eae) (expt . t2ead) (exp . t2eac) (exact? . t2eab) (exact-integer-sqrt . t2eaa) (exact . t2ea9) (even? . t2ea8) (error . t2ea7) (eqv? . t2ea6) (equal? . t2ea5) (eq? . t2ea4) (dynamic-wind . t2ea3) (div0-and-mod0 . t2ea2) (mod0 . t2ea1) (div0 . t2ea0) (div-and-mod . t2e9f) (mod . t2e9e) (div . t2e9d) (denominator . t2e9c) (cos . t2e9b) (cons . t2e9a) (complex? . t2e99) (char? . t2e98) (char>? . t2e97) (char>=? . t2e96) (char=? . t2e95) (char<? . t2e94) (char<=? . t2e93) (char->integer . t2e92) (ceiling . t2e91) (call-with-values . t2e90) (call/cc . t2e8f) (call-with-current-continuation . t2e8e) (cddddr . t2e8d) (cdddar . t2e8c) (cddadr . t2e8b) (cddaar . t2e8a) (cdaddr . t2e89) (cdadar . t2e88) (cdaadr . t2e87) (cdaaar . t2e86) (cadddr . t2e85) (caddar . t2e84) (cadadr . t2e83) (cadaar . t2e82) (caaddr . t2e81) (caadar . t2e80) (caaadr . t2e7f) (caaaar . t2e7e) (cdddr . t2e7d) (cddar . t2e7c) (cdadr . t2e7b) (cdaar . t2e7a) (caddr . t2e79) (cadar . t2e78) (caadr . t2e77) (caaar . t2e76) (cddr . t2e75) (cdar . t2e74) (cadr . t2e73) (caar . t2e72) (cdr . t2e71) (car . t2e70) (boolean? . t2e6f) (boolean=? . t2e6e) (atan . t2e6d) (assertion-violation . t2e6c) (asin . t2e6b) (apply . t2e6a) (append . t2e69) (angle . t2e68) (acos . t2e67) (abs . t2e66) (/ . t2e65) (* . t2e64) (- . t2e63) (+ . t2e62) (>= . t2e61) (> . t2e60) (= . t2e5f) (<= . t2e5e) (< . t2e5d) (unquote-splicing . t2e2a) (unquote . t2e29) (_ . t2e28) (else . t2e27) (=> . t2e26) (... . t2e25) (assert . t2e24) (cond . t2e1f) (let* . t2e1e) (let*-values . t2e1d) (let-values . t2e1c) (identifier-syntax . t2e1b) (quasiquote . t2e18) (syntax-rules . t2e17) (case . t2e12) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec* . t2e0a) (letrec . t2e09) (lambda . t2e06) (quote . t2e03) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (begin . t2dfd) (define-syntax . t2dfb) (define . t2dfa)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3131 '(rnrs lists) '(6) '() '() '() '((remove . t2fd4) (remv . t2fd3) (remp . t2fd2) (remq . t2fd1) (partition . t2fd0) (memv . t2fcf) (memq . t2fce) (memp . t2fcd) (member . t2fcc) (exists . t2fcb) (for-all . t2fca) (fold-right . t2fc9) (fold-left . t2fc8) (find . t2fc7) (filter . t2fc6) (cons* . t2fc5) (assv . t2fc4) (assq . t2fc3) (assp . t2fc2) (assoc . t2fc1)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3132 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . t302f) (call-with-input-file . t302e) (write-char . t302d) (write . t302c) (with-output-to-file . t302b) (with-input-from-file . t302a) (read-char . t3029) (read . t3028) (peek-char . t3027) (open-output-file . t3026) (open-input-file . t3025) (newline . t3024) (display . t3023) (close-output-port . t3022) (close-input-port . t3021) (eof-object? . t3020) (eof-object . t301f) (current-error-port . t301e) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3133 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . t2ff0) (utf32->string . t2fa5) (utf16->string . t2fa4) (utf8->string . t2fa3) (uint-list->bytevector . t2fa2) (u8-list->bytevector . t2fa1) (string->utf8 . t2fa0) (string->utf32 . t2f9f) (string->utf16 . t2f9e) (sint-list->bytevector . t2f9d) (native-endianness . t2f9c) (bytevector? . t2f9b) (bytevector=? . t2f9a) (bytevector-uint-set! . t2f99) (bytevector-uint-ref . t2f98) (bytevector-u8-set! . t2f97) (bytevector-u8-ref . t2f96) (bytevector-u64-set! . t2f95) (bytevector-u64-ref . t2f94) (bytevector-u64-native-set! . t2f93) (bytevector-u64-native-ref . t2f92) (bytevector-u32-set! . t2f91) (bytevector-u32-ref . t2f90) (bytevector-u32-native-set! . t2f8f) (bytevector-u32-native-ref . t2f8e) (bytevector-u16-set! . t2f8d) (bytevector-u16-ref . t2f8c) (bytevector-u16-native-set! . t2f8b) (bytevector-u16-native-ref . t2f8a) (bytevector-sint-set! . t2f89) (bytevector-sint-ref . t2f88) (bytevector-s8-set! . t2f87) (bytevector-s8-ref . t2f86) (bytevector-s64-set! . t2f85) (bytevector-s64-ref . t2f84) (bytevector-s64-native-set! . t2f83) (bytevector-s64-native-ref . t2f82) (bytevector-s32-set! . t2f81) (bytevector-s32-ref . t2f80) (bytevector-s32-native-set! . t2f7f) (bytevector-s32-native-ref . t2f7e) (bytevector-s16-set! . t2f7d) (bytevector-s16-ref . t2f7c) (bytevector-s16-native-set! . t2f7b) (bytevector-s16-native-ref . t2f7a) (bytevector-length . t2f79) (bytevector-ieee-single-ref . t2f78) (bytevector-ieee-single-set! . t2f77) (bytevector-ieee-single-native-set! . t2f76) (bytevector-ieee-single-native-ref . t2f75) (bytevector-ieee-double-set! . t2f74) (bytevector-ieee-double-ref . t2f73) (bytevector-ieee-double-native-set! . t2f72) (bytevector-ieee-double-native-ref . t2f71) (bytevector-fill! . t2f70) (bytevector-copy! . t2f6f) (bytevector-copy . t2f6e) (bytevector->uint-list . t2f6d) (bytevector->u8-list . t2f6c) (bytevector->sint-list . t2f6b) (endianness . t2e23)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3134 '(rnrs unicode) '(6) '() '() '() '((string-upcase . t3077) (string-titlecase . t3076) (string-normalize-nfkd . t3075) (string-normalize-nfkc . t3074) (string-normalize-nfd . t3073) (string-normalize-nfc . t3072) (string-foldcase . t3071) (string-downcase . t3070) (string-ci>? . t306f) (string-ci>=? . t306e) (string-ci=? . t306d) (string-ci<? . t306c) (string-ci<=? . t306b) (char-whitespace? . t306a) (char-upper-case? . t3069) (char-title-case? . t3068) (char-numeric? . t3067) (char-lower-case? . t3066) (char-general-category . t3065) (char-upcase . t3064) (char-titlecase . t3063) (char-foldcase . t3062) (char-downcase . t3061) (char-ci>? . t3060) (char-ci>=? . t305f) (char-ci=? . t305e) (char-ci<? . t305d) (char-ci<=? . t305c) (char-alphabetic? . t305b)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3135 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . t2fba) (raise-continuable . t2fb9) (raise . t2fb8) (guard . t2e2f) (else . t2e27) (=> . t2e26)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3136 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . t2f0f) (bitwise-reverse-bit-field . t2f0e) (bitwise-length . t2f0d) (bitwise-if . t2f0c) (bitwise-first-bit-set . t2f0b) (bitwise-copy-bit-field . t2f0a) (bitwise-copy-bit . t2f09) (bitwise-bit-set? . t2f08) (bitwise-bit-field . t2f07) (bitwise-bit-count . t2f06) (bitwise-xor . t2f05) (bitwise-ior . t2f04) (bitwise-and . t2f03) (bitwise-not . t2f02) (bitwise-arithmetic-shift-right . t2f01) (bitwise-arithmetic-shift-left . t2f00) (bitwise-arithmetic-shift . t2eff)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3137 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . t2f3c) (fxxor . t2f3b) (fxrotate-bit-field . t2f3a) (fxreverse-bit-field . t2f39) (fxpositive? . t2f38) (fxodd? . t2f37) (fxnot . t2f36) (fxnegative? . t2f35) (fxmod0 . t2f34) (fxmod . t2f33) (fxmin . t2f32) (fxmax . t2f31) (fxlength . t2f30) (fxior . t2f2f) (fxif . t2f2e) (fxfirst-bit-set . t2f2d) (fxeven? . t2f2c) (fxdiv0-and-mod0 . t2f2b) (fxdiv0 . t2f2a) (fxdiv-and-mod . t2f29) (fxdiv . t2f28) (fxcopy-bit-field . t2f27) (fxcopy-bit . t2f26) (fxbit-set? . t2f25) (fxbit-field . t2f24) (fxbit-count . t2f23) (fxarithmetic-shift-right . t2f22) (fxarithmetic-shift-left . t2f21) (fxarithmetic-shift . t2f20) (fxand . t2f1f) (fx>? . t2f1e) (fx>=? . t2f1d) (fx=? . t2f1c) (fx<? . t2f1b) (fx<=? . t2f1a) (fx-/carry . t2f19) (fx- . t2f18) (fx+/carry . t2f17) (fx+ . t2f16) (fx*/carry . t2f15) (fx* . t2f14) (greatest-fixnum . t2f13) (least-fixnum . t2f12) (fixnum-width . t2f11) (fixnum? . t2f10)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3138 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . t2b83) (no-infinities-violation? . t2b6e) (make-no-nans-violation . t2b81) (make-no-infinities-violation . t2b6c) (real->flonum . t2f6a) (flzero? . t2f69) (fltruncate . t2f68) (fltan . t2f67) (flsqrt . t2f66) (flsin . t2f65) (flround . t2f64) (flpositive? . t2f63) (flonum? . t2f62) (flodd? . t2f61) (flnumerator . t2f60) (flnegative? . t2f5f) (flnan? . t2f5e) (flmod0 . t2f5d) (flmod . t2f5c) (flmin . t2f5b) (flmax . t2f5a) (fllog . t2f59) (flinteger? . t2f58) (flinfinite? . t2f57) (flfloor . t2f56) (flfinite? . t2f55) (flexpt . t2f54) (flexp . t2f53) (fleven? . t2f52) (fldiv0-and-mod0 . t2f51) (fldiv0 . t2f50) (fldiv-and-mod . t2f4f) (fldiv . t2f4e) (fldenominator . t2f4d) (flcos . t2f4c) (flceiling . t2f4b) (flatan . t2f4a) (flasin . t2f49) (flacos . t2f48) (flabs . t2f47) (fl>? . t2f46) (fl>=? . t2f45) (fl=? . t2f44) (fl<? . t2f43) (fl<=? . t2f42) (fl/ . t2f41) (fl- . t2f40) (fl+ . t2f3f) (fl* . t2f3e) (fixnum->flonum . t2f3d) (&no-nans . t2e5b) (&no-infinities . t2e5a)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3139 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . t3044) (string-ci-hash . t3043) (string-hash . t3042) (equal-hash . t3041) (hashtable-equivalence-function . t3040) (make-hashtable . t303f) (hashtable-hash-function . t303e) (make-eqv-hashtable . t303d) (make-eq-hashtable . t303c) (hashtable? . t303b) (hashtable-update! . t303a) (hashtable-size . t3039) (hashtable-set! . t3038) (hashtable-ref . t3037) (hashtable-mutable? . t3036) (hashtable-keys . t3035) (hashtable-entries . t3034) (hashtable-delete! . t3033) (hashtable-copy . t3032) (hashtable-contains? . t3031) (hashtable-clear! . t3030)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313a '(rnrs io ports) '(6) '() '() '() '((eof-object? . t3020) (eof-object . t301f) (current-error-port . t301e) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (utf-8-codec . t3019) (utf-16-codec . t3018) (transcoder-error-handling-mode . t3017) (transcoder-eol-style . t3016) (transcoder-codec . t3015) (transcoded-port . t3014) (textual-port? . t3013) (string->bytevector . t3012) (standard-output-port . t3011) (standard-input-port . t3010) (standard-error-port . t300f) (set-port-position! . t300e) (put-u8 . t300d) (put-string . t300c) (put-datum . t300b) (put-char . t300a) (put-bytevector . t3009) (port? . t3008) (port-transcoder . t3007) (port-position . t3006) (port-has-set-port-position!? . t3005) (port-has-port-position? . t3004) (port-eof? . t3003) (output-port-buffer-mode . t3002) (open-string-output-port . t3001) (open-string-input-port . t3000) (open-file-output-port . t2fff) (open-file-input/output-port . t2ffe) (open-file-input-port . t2ffd) (open-bytevector-output-port . t2ffc) (open-bytevector-input-port . t2ffb) (native-transcoder . t2ffa) (native-eol-style . t2ff9) (make-transcoder . t2ff8) (latin-1-codec . t2ff7) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (make-i/o-encoding-error . t2b53) (make-i/o-decoding-error . t2b3c) (make-custom-textual-output-port . t2ff6) (make-custom-textual-input/output-port . t2ff5) (make-custom-textual-input-port . t2ff4) (make-custom-binary-output-port . t2ff3) (make-custom-binary-input/output-port . t2ff2) (make-custom-binary-input-port . t2ff1) (lookahead-u8 . t2fef) (lookahead-char . t2fee) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (i/o-encoding-error? . t2b57) (i/o-encoding-error-char . t2b59) (i/o-decoding-error? . t2b3e) (get-u8 . t2fed) (get-string-n! . t2fec) (get-string-n . t2feb) (get-string-all . t2fea) (get-line . t2fe9) (get-datum . t2fe8) (get-char . t2fe7) (get-bytevector-some . t2fe6) (get-bytevector-n! . t2fe5) (get-bytevector-n . t2fe4) (get-bytevector-all . t2fe3) (flush-output-port . t2fe2) (close-port . t2fe1) (call-with-string-output-port . t2fc0) (call-with-port . t2fbf) (call-with-bytevector-output-port . t2fbe) (bytevector->string . t2fbd) (buffer-mode? . t2fbc) (binary-port? . t2fbb) (&i/o-encoding . t2e59) (&i/o-decoding . t2e58) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e) (error-handling-mode . t2e33) (file-options . t2e32) (buffer-mode . t2e31) (eol-style . t2e30)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313b '(rnrs enums) '(6) '() '() '() '((make-enumeration . t2fb7) (enum-set=? . t2fb6) (enum-set-universe . t2fb5) (enum-set-union . t2fb4) (enum-set-subset? . t2fb3) (enum-set-projection . t2fb2) (enum-set-member? . t2fb1) (enum-set-intersection . t2fb0) (enum-set-indexer . t2faf) (enum-set-difference . t2fae) (enum-set-constructor . t2fad) (enum-set-complement . t2fac) (enum-set->list . t2fab) (define-enumeration . t2e3e)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313c '(rnrs conditions) '(6) '() '() '() '((who-condition? . t29ce) (warning? . t2946) (violation? . t2985) (undefined-violation? . t2a45) (syntax-violation? . t2a2c) (syntax-violation-subform . t2a30) (syntax-violation-form . t2a2e) (syntax-violation . te58) (simple-conditions . t2faa) (serious-condition? . t295b) (non-continuable-violation? . t29e5) (message-condition? . t292f) (make-who-condition . t29ca) (make-warning . t2944) (make-violation . t2983) (make-undefined-violation . t2a43) (make-syntax-violation . t2a26) (make-serious-condition . t2959) (make-non-continuable-violation . t29e3) (make-message-condition . t292b) (make-lexical-violation . t2a0d) (make-irritants-condition . t29af) (make-implementation-restriction-violation . t29f8) (make-error . t296e) (make-assertion-violation . t2998) (lexical-violation? . t2a0f) (irritants-condition? . t29b3) (implementation-restriction-violation? . t29fa) (error? . t2970) (condition-who . t29d0) (condition-predicate . t2fa9) (condition-message . t2931) (condition-irritants . t29b5) (condition-accessor . t2fa8) (condition . t2fa7) (assertion-violation? . t299a) (condition? . t2fa6) (&undefined . t2e4d) (&syntax . t2e4c) (&lexical . t2e4b) (&implementation-restriction . t2e4a) (&non-continuable . t2e49) (&who . t2e48) (&irritants . t2e47) (&assertion . t2e46) (&violation . t2e45) (&error . t2e44) (&serious . t2e43) (&warning . t2e42) (&message . t2e41) (&condition . t2e40) (define-condition-type . t2e3f)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313d '(rnrs records inspection) '(6) '() '() '() '((record? . t3053) (record-type-uid . t3052) (record-type-sealed? . t3051) (record-type-parent . t3050) (record-type-opaque? . t304f) (record-type-name . t304e) (record-type-generative? . t304d) (record-type-field-names . t304c) (record-rtd . t304b) (record-field-mutable? . t304a)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . t305a) (record-predicate . t3059) (record-mutator . t3058) (record-constructor . t3057) (record-accessor . t3056) (make-record-type-descriptor . t3055) (make-record-constructor-descriptor . t3054)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't313f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . t2e3d) (parent-rtd . t2e3c) (nongenerative . t2e3b) (opaque . t2e3a) (sealed . t2e39) (protocol . t2e38) (parent . t2e37) (immutable . t2e36) (mutable . t2e35) (fields . t2e34) (record-constructor-descriptor . t2e14) (record-type-descriptor . t2e13)) '() values values '#f '#f '#t '#f) (t986@t7d2@install-library 't3140 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . t2b87) (&no-nans-rtd . t2b85) (&no-infinities-rcd . t2b72) (&no-infinities-rtd . t2b70) (&i/o-encoding-rcd . t2b5d) (&i/o-encoding-rtd . t2b5b) (&i/o-decoding-rcd . t2b42) (&i/o-decoding-rtd . t2b40) (&i/o-port-rcd . t2b2d) (&i/o-port-rtd . t2b2b) (&i/o-file-does-not-exist-rcd . t2b12) (&i/o-file-does-not-exist-rtd . t2b10) (&i/o-file-already-exists-rcd . t2afd) (&i/o-file-already-exists-rtd . t2afb) (&i/o-file-is-read-only-rcd . t2ae8) (&i/o-file-is-read-only-rtd . t2ae6) (&i/o-file-protection-rcd . t2ad3) (&i/o-file-protection-rtd . t2ad1) (&i/o-filename-rcd . t2abe) (&i/o-filename-rtd . t2abc) (&i/o-invalid-position-rcd . t2aa3) (&i/o-invalid-position-rtd . t2aa1) (&i/o-write-rcd . t2a88) (&i/o-write-rtd . t2a86) (&i/o-read-rcd . t2a73) (&i/o-read-rtd . t2a71) (&i/o-rcd . t2a5e) (&i/o-rtd . t2a5c) (&undefined-rcd . t2a49) (&undefined-rtd . t2a47) (&syntax-rcd . t2a34) (&syntax-rtd . t2a32) (&lexical-rcd . t2a13) (&lexical-rtd . t2a11) (&implementation-restriction-rcd . t29fe) (&implementation-restriction-rtd . t29fc) (&non-continuable-rcd . t29e9) (&non-continuable-rtd . t29e7) (&who-rcd . t29d4) (&who-rtd . t29d2) (&irritants-rcd . t29b9) (&irritants-rtd . t29b7) (&assertion-rcd . t299e) (&assertion-rtd . t299c) (&violation-rcd . t2989) (&violation-rtd . t2987) (&error-rcd . t2974) (&error-rtd . t2972) (&serious-rcd . t295f) (&serious-rtd . t295d) (&warning-rcd . t294a) (&warning-rtd . t2948) (&message-rcd . t2935) (&message-rtd . t2933) (&condition-rcd . t28d6) (&condition-rtd . t28d4) (syntax-error . te54) (syntax-dispatch . td78) (pretty-print . t3120) (eval-core . t311f) (set-symbol-value! . t311e) (symbol-value . t311d) (gensym . t311c) (void . t311b) (load . t2c98) (interaction-environment . te66) (char-ready? . t311a) (regexp? . t3119) (read-line . t3118) (gensym-prefix-set! . t3117) (ungensym . t3116) (alist->eq-hash-table . t3115) (assoc-ref . t3114) (print . t3113) (format . t3112) (host-os . t3111) (library-path . t7b1) (standard-library-path . t3110) (file-newer? . t310f) (stat-mtime . t310e) (write-to-file . t310d) (file->list . t310c) (file->string . t310b) (digit->integer . t310a) (call-with-string-input-port . t3109) (call-with-string-io . t3108) (string-split . t3107) (bytevector-for-each . t3106) (string->regexp . t3105) (rxmatch . t3104) (regexp-replace-all . t3103) (hashtable-for-each . t3102) (mosh-cache-dir . t59c) (call-process . t3101) (local-tz-offset . t3100) (microseconds . t30ff) (directory-list . t30fe) (set-current-directory! . t30fd) (expand-path . t30fc) (current-directory . t30fb) (%spawn . t30fa) (%waitpid . t30f9) (simple-struct-name . t30f8) (simple-struct-set! . t30f7) (simple-struct-ref . t30f6) (make-simple-struct . t30f5) (simple-struct? . t30f4) (pointer-ref-c-int64 . t30f3) (pointer-ref-c-int32 . t30f2) (pointer-ref-c-int16 . t30f1) (pointer-ref-c-int8 . t30f0) (pointer-ref-c-uint64 . t30ef) (pointer-ref-c-uint32 . t30ee) (pointer-ref-c-uint16 . t30ed) (pointer-ref-c-uint8 . t30ec) (pointer-set-c-uint64! . t30eb) (pointer-set-c-uint32! . t30ea) (pointer-set-c-uint16! . t30e9) (pointer-set-c-uint8! . t30e8) (pointer-set-c-int64! . t30e7) (pointer-set-c-int32! . t30e6) (pointer-set-c-int16! . t30e5) (pointer-set-c-int8! . t30e4) (pointer-set-c-pointer! . t30e3) (pointer-set-c-double! . t30e2) (pointer-set-c-float! . t30e1) (pointer-set-c-long-long! . t30e0) (pointer-set-c-long! . t30df) (pointer-set-c-int! . t30de) (pointer-set-c-short! . t30dd) (pointer-set-c-char! . t30dc) (pointer-ref-c-pointer . t30db) (pointer-ref-c-double . t30da) (pointer-ref-c-float . t30d9) (pointer-ref-c-unsigned-long-long . t30d8) (pointer-ref-c-signed-long-long . t30d7) (pointer-ref-c-unsigned-long . t30d6) (pointer-ref-c-signed-long . t30d5) (pointer-ref-c-unsigned-int . t30d4) (pointer-ref-c-signed-int . t30d3) (pointer-ref-c-unsigned-short . t30d2) (pointer-ref-c-signed-short . t30d1) (pointer-ref-c-unsigned-char . t30d0) (pointer-ref-c-signed-char . t30cf) (pointer->integer . t30ce) (integer->pointer . t30cd) (pointer? . t30cc) (shared-errno . t30cb) (%ffi-free-c-callback-trampoline . t30ca) (%ffi-make-c-callback-trampoline . t30c9) (%ffi-free . t30c8) (%ffi-malloc . t30c7) (%ffi-supported? . t30c6) (%ffi-pointer->string . t30c5) (%ffi-call . t30c4) (%ffi-lookup . t30c3) (%ffi-open . t30c2) (null-terminated-utf8->string . t30c1) (null-terminated-bytevector->string . t30c0) (%fork . t30bf) (%pipe . t30be) (p . t30bd) (open-output-string . t30bc) (get-output-string . t30bb) (file-stat-ctime . t30ba) (file-stat-atime . t30b9) (file-stat-mtime . t30b8) (file-size-in-bytes . t30b7) (file-writable? . t30b6) (file-executable? . t30b5) (file-readable? . t30b4) (file-regular? . t30b3) (file-symbolic-link? . t30b2) (file-directory? . t30b1) (create-symbolic-link . t30b0) (rename-file . t30af) (delete-directory . t30ae) (create-directory . t30ad) (create-mosh-cache-dir . t30ac) (get-environment-variables . t30ab) (current-exception-handler . t30aa) (get-environment-variable . t30a9) (join-wraps . t30a8) (id->real-label . t30a7) (same-marks? . t30a6) (same-marks*? . t30a5) (get-timeofday . t30a4) (get-command-line . t30a3) (sys-display . t30a2) (whereis . t30a1) (register . t30a0) (vm-join! . t309f) (vm-set-value! . t309e) (vm? . t309d) (main-vm? . t309c) (vm-eval . t309b) (vm-self . t309a) (vm-start! . t3099) (make-vm . t3098) (mutex-try-lock! . t3097) (mutex-unlock! . t3096) (mutex-lock! . t3095) (mutex? . t3094) (make-mutex . t3093) (condition-variable-notify-all! . t3092) (condition-variable-notify! . t3091) (condition-variable-wait! . t3090) (make-condition-variable . t308f) (mosh-executable-path . t308e) (make-file-options . t308d) (source-info . t308c) (make-compiler-instruction . t308b) (make-instruction . t308a) (set-source-info! . t3089) (bignum? . t3088) (fast-equal? . t3087) (fasl-read . t3086) (fasl-write . t3085) (time-usage . t3084) (os-constant . t3083) (disasm . t3082) (make-parameter . t59a) (socket-port . t3081) (socket-shutdown . t3080) (socket-close . t307f) (socket-send . t307e) (socket-recv! . t307d) (socket-recv . t307c) (make-server-socket . t307b) (make-client-socket . t307a) (socket-accept . t3079) (socket? . t3078) (string-upcase . t3077) (string-titlecase . t3076) (string-normalize-nfkd . t3075) (string-normalize-nfkc . t3074) (string-normalize-nfd . t3073) (string-normalize-nfc . t3072) (string-foldcase . t3071) (string-downcase . t3070) (string-ci>? . t306f) (string-ci>=? . t306e) (string-ci=? . t306d) (string-ci<? . t306c) (string-ci<=? . t306b) (char-whitespace? . t306a) (char-upper-case? . t3069) (char-title-case? . t3068) (char-numeric? . t3067) (char-lower-case? . t3066) (char-general-category . t3065) (char-upcase . t3064) (char-titlecase . t3063) (char-foldcase . t3062) (char-downcase . t3061) (char-ci>? . t3060) (char-ci>=? . t305f) (char-ci=? . t305e) (char-ci<? . t305d) (char-ci<=? . t305c) (char-alphabetic? . t305b) (make-variable-transformer . tba3) (identifier? . te5a) (generate-temporaries . te46) (free-identifier=? . te48) (syntax->datum . te5e) (datum->syntax . te5c) (bound-identifier=? . te4a) (record-type-descriptor? . t305a) (record-predicate . t3059) (record-mutator . t3058) (record-constructor . t3057) (record-accessor . t3056) (make-record-type-descriptor . t3055) (make-record-constructor-descriptor . t3054) (record? . t3053) (record-type-uid . t3052) (record-type-sealed? . t3051) (record-type-parent . t3050) (record-type-opaque? . t304f) (record-type-name . t304e) (record-type-generative? . t304d) (record-type-field-names . t304c) (record-rtd . t304b) (record-field-mutable? . t304a) (delete-file . t3049) (file-exists? . t3048) (vector-sort! . t3047) (vector-sort . t3046) (list-sort . t3045) (symbol-hash . t3044) (string-ci-hash . t3043) (string-hash . t3042) (equal-hash . t3041) (hashtable-equivalence-function . t3040) (make-hashtable . t303f) (hashtable-hash-function . t303e) (make-eqv-hashtable . t303d) (make-eq-hashtable . t303c) (hashtable? . t303b) (hashtable-update! . t303a) (hashtable-size . t3039) (hashtable-set! . t3038) (hashtable-ref . t3037) (hashtable-mutable? . t3036) (hashtable-keys . t3035) (hashtable-entries . t3034) (hashtable-delete! . t3033) (hashtable-copy . t3032) (hashtable-contains? . t3031) (hashtable-clear! . t3030) (call-with-output-file . t302f) (call-with-input-file . t302e) (write-char . t302d) (write . t302c) (with-output-to-file . t302b) (with-input-from-file . t302a) (read-char . t3029) (read . t3028) (peek-char . t3027) (open-output-file . t3026) (open-input-file . t3025) (newline . t3024) (display . t3023) (close-output-port . t3022) (close-input-port . t3021) (eof-object? . t3020) (eof-object . t301f) (current-error-port . t301e) (current-output-port . t301d) (current-input-port . t301c) (output-port? . t301b) (input-port? . t301a) (utf-8-codec . t3019) (utf-16-codec . t3018) (transcoder-error-handling-mode . t3017) (transcoder-eol-style . t3016) (transcoder-codec . t3015) (transcoded-port . t3014) (textual-port? . t3013) (string->bytevector . t3012) (standard-output-port . t3011) (standard-input-port . t3010) (standard-error-port . t300f) (set-port-position! . t300e) (put-u8 . t300d) (put-string . t300c) (put-datum . t300b) (put-char . t300a) (put-bytevector . t3009) (port? . t3008) (port-transcoder . t3007) (port-position . t3006) (port-has-set-port-position!? . t3005) (port-has-port-position? . t3004) (port-eof? . t3003) (output-port-buffer-mode . t3002) (open-string-output-port . t3001) (open-string-input-port . t3000) (open-file-output-port . t2fff) (open-file-input/output-port . t2ffe) (open-file-input-port . t2ffd) (open-bytevector-output-port . t2ffc) (open-bytevector-input-port . t2ffb) (native-transcoder . t2ffa) (native-eol-style . t2ff9) (make-transcoder . t2ff8) (latin-1-codec . t2ff7) (make-i/o-write-error . t2a82) (make-i/o-read-error . t2a6d) (make-i/o-port-error . t2b23) (make-i/o-invalid-position-error . t2a99) (make-i/o-filename-error . t2ab4) (make-i/o-file-protection-error . t2acd) (make-i/o-file-is-read-only-error . t2ae2) (make-i/o-file-does-not-exist-error . t2b0c) (make-i/o-file-already-exists-error . t2af7) (make-i/o-error . t2a58) (make-i/o-encoding-error . t2b53) (make-i/o-decoding-error . t2b3c) (make-custom-textual-output-port . t2ff6) (make-custom-textual-input/output-port . t2ff5) (make-custom-textual-input-port . t2ff4) (make-custom-binary-output-port . t2ff3) (make-custom-binary-input/output-port . t2ff2) (make-custom-binary-input-port . t2ff1) (make-bytevector . t2ff0) (lookahead-u8 . t2fef) (lookahead-char . t2fee) (i/o-write-error? . t2a84) (i/o-read-error? . t2a6f) (i/o-port-error? . t2b27) (i/o-invalid-position-error? . t2a9d) (i/o-filename-error? . t2ab8) (i/o-file-protection-error? . t2acf) (i/o-file-is-read-only-error? . t2ae4) (i/o-file-does-not-exist-error? . t2b0e) (i/o-file-already-exists-error? . t2af9) (i/o-error? . t2a5a) (i/o-error-position . t2a9f) (i/o-error-port . t2b29) (i/o-error-filename . t2aba) (i/o-encoding-error? . t2b57) (i/o-encoding-error-char . t2b59) (i/o-decoding-error? . t2b3e) (get-u8 . t2fed) (get-string-n! . t2fec) (get-string-n . t2feb) (get-string-all . t2fea) (get-line . t2fe9) (get-datum . t2fe8) (get-char . t2fe7) (get-bytevector-some . t2fe6) (get-bytevector-n! . t2fe5) (get-bytevector-n . t2fe4) (get-bytevector-all . t2fe3) (flush-output-port . t2fe2) (close-port . t2fe1) (scheme-report-environment . te34) (quotient . t2fe0) (null-environment . te32) (remainder . t2fdf) (modulo . t2fde) (inexact->exact . t2fdd) (force . t2fdc) (exact->inexact . t2fdb) (make-promise . t2fda) (exit . t2fd9) (command-line . t2c92) (string-fill! . t2fd8) (string-set! . t2fd7) (set-cdr! . t2fd6) (set-car! . t2fd5) (remove . t2fd4) (remv . t2fd3) (remp . t2fd2) (remq . t2fd1) (partition . t2fd0) (memv . t2fcf) (memq . t2fce) (memp . t2fcd) (member . t2fcc) (exists . t2fcb) (for-all . t2fca) (fold-right . t2fc9) (fold-left . t2fc8) (find . t2fc7) (filter . t2fc6) (cons* . t2fc5) (assv . t2fc4) (assq . t2fc3) (assp . t2fc2) (assoc . t2fc1) (call-with-string-output-port . t2fc0) (call-with-port . t2fbf) (call-with-bytevector-output-port . t2fbe) (bytevector->string . t2fbd) (buffer-mode? . t2fbc) (binary-port? . t2fbb) (with-exception-handler . t2fba) (raise-continuable . t2fb9) (raise . t2fb8) (eval . te38) (environment . te30) (make-enumeration . t2fb7) (enum-set=? . t2fb6) (enum-set-universe . t2fb5) (enum-set-union . t2fb4) (enum-set-subset? . t2fb3) (enum-set-projection . t2fb2) (enum-set-member? . t2fb1) (enum-set-intersection . t2fb0) (enum-set-indexer . t2faf) (enum-set-difference . t2fae) (enum-set-constructor . t2fad) (enum-set-complement . t2fac) (enum-set->list . t2fab) (who-condition? . t29ce) (warning? . t2946) (violation? . t2985) (undefined-violation? . t2a45) (syntax-violation? . t2a2c) (syntax-violation-subform . t2a30) (syntax-violation-form . t2a2e) (syntax-violation . te58) (simple-conditions . t2faa) (serious-condition? . t295b) (non-continuable-violation? . t29e5) (message-condition? . t292f) (make-who-condition . t29ca) (make-warning . t2944) (make-violation . t2983) (make-undefined-violation . t2a43) (make-syntax-violation . t2a26) (make-serious-condition . t2959) (make-non-continuable-violation . t29e3) (make-message-condition . t292b) (make-lexical-violation . t2a0d) (make-irritants-condition . t29af) (make-implementation-restriction-violation . t29f8) (make-error . t296e) (make-assertion-violation . t2998) (lexical-violation? . t2a0f) (irritants-condition? . t29b3) (implementation-restriction-violation? . t29fa) (error? . t2970) (condition-who . t29d0) (condition-predicate . t2fa9) (condition-message . t2931) (condition-irritants . t29b5) (condition-accessor . t2fa8) (condition . t2fa7) (assertion-violation? . t299a) (condition? . t2fa6) (utf32->string . t2fa5) (utf16->string . t2fa4) (utf8->string . t2fa3) (uint-list->bytevector . t2fa2) (u8-list->bytevector . t2fa1) (string->utf8 . t2fa0) (string->utf32 . t2f9f) (string->utf16 . t2f9e) (sint-list->bytevector . t2f9d) (native-endianness . t2f9c) (bytevector? . t2f9b) (bytevector=? . t2f9a) (bytevector-uint-set! . t2f99) (bytevector-uint-ref . t2f98) (bytevector-u8-set! . t2f97) (bytevector-u8-ref . t2f96) (bytevector-u64-set! . t2f95) (bytevector-u64-ref . t2f94) (bytevector-u64-native-set! . t2f93) (bytevector-u64-native-ref . t2f92) (bytevector-u32-set! . t2f91) (bytevector-u32-ref . t2f90) (bytevector-u32-native-set! . t2f8f) (bytevector-u32-native-ref . t2f8e) (bytevector-u16-set! . t2f8d) (bytevector-u16-ref . t2f8c) (bytevector-u16-native-set! . t2f8b) (bytevector-u16-native-ref . t2f8a) (bytevector-sint-set! . t2f89) (bytevector-sint-ref . t2f88) (bytevector-s8-set! . t2f87) (bytevector-s8-ref . t2f86) (bytevector-s64-set! . t2f85) (bytevector-s64-ref . t2f84) (bytevector-s64-native-set! . t2f83) (bytevector-s64-native-ref . t2f82) (bytevector-s32-set! . t2f81) (bytevector-s32-ref . t2f80) (bytevector-s32-native-set! . t2f7f) (bytevector-s32-native-ref . t2f7e) (bytevector-s16-set! . t2f7d) (bytevector-s16-ref . t2f7c) (bytevector-s16-native-set! . t2f7b) (bytevector-s16-native-ref . t2f7a) (bytevector-length . t2f79) (bytevector-ieee-single-ref . t2f78) (bytevector-ieee-single-set! . t2f77) (bytevector-ieee-single-native-set! . t2f76) (bytevector-ieee-single-native-ref . t2f75) (bytevector-ieee-double-set! . t2f74) (bytevector-ieee-double-ref . t2f73) (bytevector-ieee-double-native-set! . t2f72) (bytevector-ieee-double-native-ref . t2f71) (bytevector-fill! . t2f70) (bytevector-copy! . t2f6f) (bytevector-copy . t2f6e) (bytevector->uint-list . t2f6d) (bytevector->u8-list . t2f6c) (bytevector->sint-list . t2f6b) (no-nans-violation? . t2b83) (no-infinities-violation? . t2b6e) (make-no-nans-violation . t2b81) (make-no-infinities-violation . t2b6c) (real->flonum . t2f6a) (flzero? . t2f69) (fltruncate . t2f68) (fltan . t2f67) (flsqrt . t2f66) (flsin . t2f65) (flround . t2f64) (flpositive? . t2f63) (flonum? . t2f62) (flodd? . t2f61) (flnumerator . t2f60) (flnegative? . t2f5f) (flnan? . t2f5e) (flmod0 . t2f5d) (flmod . t2f5c) (flmin . t2f5b) (flmax . t2f5a) (fllog . t2f59) (flinteger? . t2f58) (flinfinite? . t2f57) (flfloor . t2f56) (flfinite? . t2f55) (flexpt . t2f54) (flexp . t2f53) (fleven? . t2f52) (fldiv0-and-mod0 . t2f51) (fldiv0 . t2f50) (fldiv-and-mod . t2f4f) (fldiv . t2f4e) (fldenominator . t2f4d) (flcos . t2f4c) (flceiling . t2f4b) (flatan . t2f4a) (flasin . t2f49) (flacos . t2f48) (flabs . t2f47) (fl>? . t2f46) (fl>=? . t2f45) (fl=? . t2f44) (fl<? . t2f43) (fl<=? . t2f42) (fl/ . t2f41) (fl- . t2f40) (fl+ . t2f3f) (fl* . t2f3e) (fixnum->flonum . t2f3d) (fxzero? . t2f3c) (fxxor . t2f3b) (fxrotate-bit-field . t2f3a) (fxreverse-bit-field . t2f39) (fxpositive? . t2f38) (fxodd? . t2f37) (fxnot . t2f36) (fxnegative? . t2f35) (fxmod0 . t2f34) (fxmod . t2f33) (fxmin . t2f32) (fxmax . t2f31) (fxlength . t2f30) (fxior . t2f2f) (fxif . t2f2e) (fxfirst-bit-set . t2f2d) (fxeven? . t2f2c) (fxdiv0-and-mod0 . t2f2b) (fxdiv0 . t2f2a) (fxdiv-and-mod . t2f29) (fxdiv . t2f28) (fxcopy-bit-field . t2f27) (fxcopy-bit . t2f26) (fxbit-set? . t2f25) (fxbit-field . t2f24) (fxbit-count . t2f23) (fxarithmetic-shift-right . t2f22) (fxarithmetic-shift-left . t2f21) (fxarithmetic-shift . t2f20) (fxand . t2f1f) (fx>? . t2f1e) (fx>=? . t2f1d) (fx=? . t2f1c) (fx<? . t2f1b) (fx<=? . t2f1a) (fx-/carry . t2f19) (fx- . t2f18) (fx+/carry . t2f17) (fx+ . t2f16) (fx*/carry . t2f15) (fx* . t2f14) (greatest-fixnum . t2f13) (least-fixnum . t2f12) (fixnum-width . t2f11) (fixnum? . t2f10) (bitwise-rotate-bit-field . t2f0f) (bitwise-reverse-bit-field . t2f0e) (bitwise-length . t2f0d) (bitwise-if . t2f0c) (bitwise-first-bit-set . t2f0b) (bitwise-copy-bit-field . t2f0a) (bitwise-copy-bit . t2f09) (bitwise-bit-set? . t2f08) (bitwise-bit-field . t2f07) (bitwise-bit-count . t2f06) (bitwise-xor . t2f05) (bitwise-ior . t2f04) (bitwise-and . t2f03) (bitwise-not . t2f02) (bitwise-arithmetic-shift-right . t2f01) (bitwise-arithmetic-shift-left . t2f00) (bitwise-arithmetic-shift . t2eff) (zero? . t2efe) (vector? . t2efd) (vector-set! . t2efc) (vector-ref . t2efb) (vector-map . t2efa) (vector-length . t2ef9) (vector-for-each . t2ef8) (vector-fill! . t2ef7) (vector->list . t2ef6) (vector . t2ef5) (values . t2ef4) (truncate . t2ef3) (tan . t2ef2) (symbol? . t2ef1) (symbol=? . t2ef0) (symbol->string . t2eef) (substring . t2eee) (string? . t2eed) (string>? . t2eec) (string>=? . t2eeb) (string=? . t2eea) (string<? . t2ee9) (string<=? . t2ee8) (string-ref . t2ee7) (string-length . t2ee6) (string-for-each . t2ee5) (string-copy . t2ee4) (string-append . t2ee3) (string->symbol . t2ee2) (string->number . t2ee1) (string->list . t2ee0) (string . t2edf) (sqrt . t2ede) (sin . t2edd) (round . t2edc) (reverse . t2edb) (real? . t2eda) (real-valued? . t2ed9) (real-part . t2ed8) (rationalize . t2ed7) (rational? . t2ed6) (rational-valued? . t2ed5) (procedure? . t2ed4) (positive? . t2ed3) (pair? . t2ed2) (odd? . t2ed1) (numerator . t2ed0) (number? . t2ecf) (number->string . t2ece) (null? . t2ecd) (not . t2ecc) (negative? . t2ecb) (nan? . t2eca) (min . t2ec9) (max . t2ec8) (map . t2ec7) (make-vector . t2ec6) (make-string . t2ec5) (make-rectangular . t2ec4) (make-polar . t2ec3) (magnitude . t2ec2) (log . t2ec1) (list? . t2ec0) (list-tail . t2ebf) (list-ref . t2ebe) (list->vector . t2ebd) (list->string . t2ebc) (list . t2ebb) (length . t2eba) (lcm . t2eb9) (integer? . t2eb8) (integer-valued? . t2eb7) (integer->char . t2eb6) (infinite? . t2eb5) (inexact? . t2eb4) (inexact . t2eb3) (imag-part . t2eb2) (gcd . t2eb1) (for-each . t2eb0) (floor . t2eaf) (finite? . t2eae) (expt . t2ead) (exp . t2eac) (exact? . t2eab) (exact-integer-sqrt . t2eaa) (exact . t2ea9) (even? . t2ea8) (error . t2ea7) (eqv? . t2ea6) (equal? . t2ea5) (eq? . t2ea4) (dynamic-wind . t2ea3) (div0-and-mod0 . t2ea2) (mod0 . t2ea1) (div0 . t2ea0) (div-and-mod . t2e9f) (mod . t2e9e) (div . t2e9d) (denominator . t2e9c) (cos . t2e9b) (cons . t2e9a) (complex? . t2e99) (char? . t2e98) (char>? . t2e97) (char>=? . t2e96) (char=? . t2e95) (char<? . t2e94) (char<=? . t2e93) (char->integer . t2e92) (ceiling . t2e91) (call-with-values . t2e90) (call/cc . t2e8f) (call-with-current-continuation . t2e8e) (cddddr . t2e8d) (cdddar . t2e8c) (cddadr . t2e8b) (cddaar . t2e8a) (cdaddr . t2e89) (cdadar . t2e88) (cdaadr . t2e87) (cdaaar . t2e86) (cadddr . t2e85) (caddar . t2e84) (cadadr . t2e83) (cadaar . t2e82) (caaddr . t2e81) (caadar . t2e80) (caaadr . t2e7f) (caaaar . t2e7e) (cdddr . t2e7d) (cddar . t2e7c) (cdadr . t2e7b) (cdaar . t2e7a) (caddr . t2e79) (cadar . t2e78) (caadr . t2e77) (caaar . t2e76) (cddr . t2e75) (cdar . t2e74) (cadr . t2e73) (caar . t2e72) (cdr . t2e71) (car . t2e70) (boolean? . t2e6f) (boolean=? . t2e6e) (atan . t2e6d) (assertion-violation . t2e6c) (assertion-error . te52) (asin . t2e6b) (apply . t2e6a) (append . t2e69) (angle . t2e68) (acos . t2e67) (abs . t2e66) (/ . t2e65) (* . t2e64) (- . t2e63) (+ . t2e62) (>= . t2e61) (> . t2e60) (= . t2e5f) (<= . t2e5e) (< . t2e5d) (library . t2e5c) (&no-nans . t2e5b) (&no-infinities . t2e5a) (&i/o-encoding . t2e59) (&i/o-decoding . t2e58) (&i/o-port . t2e57) (&i/o-file-does-not-exist . t2e56) (&i/o-file-already-exists . t2e55) (&i/o-file-is-read-only . t2e54) (&i/o-file-protection . t2e53) (&i/o-filename . t2e52) (&i/o-invalid-position . t2e51) (&i/o-write . t2e50) (&i/o-read . t2e4f) (&i/o . t2e4e) (&undefined . t2e4d) (&syntax . t2e4c) (&lexical . t2e4b) (&implementation-restriction . t2e4a) (&non-continuable . t2e49) (&who . t2e48) (&irritants . t2e47) (&assertion . t2e46) (&violation . t2e45) (&error . t2e44) (&serious . t2e43) (&warning . t2e42) (&message . t2e41) (&condition . t2e40) (define-condition-type . t2e3f) (define-enumeration . t2e3e) (define-record-type . t2e3d) (parent-rtd . t2e3c) (nongenerative . t2e3b) (opaque . t2e3a) (sealed . t2e39) (protocol . t2e38) (parent . t2e37) (immutable . t2e36) (mutable . t2e35) (fields . t2e34) (error-handling-mode . t2e33) (file-options . t2e32) (buffer-mode . t2e31) (eol-style . t2e30) (guard . t2e2f) (trace-define . t2e2e) (trace-lambda . t2e2d) (unsyntax-splicing . t2e2c) (unsyntax . t2e2b) (unquote-splicing . t2e2a) (unquote . t2e29) (_ . t2e28) (else . t2e27) (=> . t2e26) (... . t2e25) (assert . t2e24) (endianness . t2e23) (delay . t2e22) (time . t2e21) (do . t2e20) (cond . t2e1f) (let* . t2e1e) (let*-values . t2e1d) (let-values . t2e1c) (identifier-syntax . t2e1b) (with-syntax . t2e1a) (quasisyntax . t2e19) (quasiquote . t2e18) (syntax-rules . t2e17) (include . t2e16) (define-struct . t2e15) (record-constructor-descriptor . t2e14) (record-type-descriptor . t2e13) (case . t2e12) (parameterize . t2e11) (unless . t2e10) (when . t2e0f) (or . t2e0e) (and . t2e0d) (if . t2e0c) (let . t2e0b) (letrec* . t2e0a) (letrec . t2e09) (type-descriptor . t2e08) (case-lambda . t2e07) (lambda . t2e06) (syntax . t2e05) (syntax-case . t2e04) (quote . t2e03) (foreign-call . t2e02) (letrec-syntax . t2e01) (let-syntax . t2e00) (set! . t2dff) (import . t2dfe) (begin . t2dfd) (module . t2dfc) (define-syntax . t2dfb) (define . t2dfa)) '((t2b87 core-prim . &no-nans-rcd) (t2b85 core-prim . &no-nans-rtd) (t2b72 core-prim . &no-infinities-rcd) (t2b70 core-prim . &no-infinities-rtd) (t2b5d core-prim . &i/o-encoding-rcd) (t2b5b core-prim . &i/o-encoding-rtd) (t2b42 core-prim . &i/o-decoding-rcd) (t2b40 core-prim . &i/o-decoding-rtd) (t2b2d core-prim . &i/o-port-rcd) (t2b2b core-prim . &i/o-port-rtd) (t2b12 core-prim . &i/o-file-does-not-exist-rcd) (t2b10 core-prim . &i/o-file-does-not-exist-rtd) (t2afd core-prim . &i/o-file-already-exists-rcd) (t2afb core-prim . &i/o-file-already-exists-rtd) (t2ae8 core-prim . &i/o-file-is-read-only-rcd) (t2ae6 core-prim . &i/o-file-is-read-only-rtd) (t2ad3 core-prim . &i/o-file-protection-rcd) (t2ad1 core-prim . &i/o-file-protection-rtd) (t2abe core-prim . &i/o-filename-rcd) (t2abc core-prim . &i/o-filename-rtd) (t2aa3 core-prim . &i/o-invalid-position-rcd) (t2aa1 core-prim . &i/o-invalid-position-rtd) (t2a88 core-prim . &i/o-write-rcd) (t2a86 core-prim . &i/o-write-rtd) (t2a73 core-prim . &i/o-read-rcd) (t2a71 core-prim . &i/o-read-rtd) (t2a5e core-prim . &i/o-rcd) (t2a5c core-prim . &i/o-rtd) (t2a49 core-prim . &undefined-rcd) (t2a47 core-prim . &undefined-rtd) (t2a34 core-prim . &syntax-rcd) (t2a32 core-prim . &syntax-rtd) (t2a13 core-prim . &lexical-rcd) (t2a11 core-prim . &lexical-rtd) (t29fe core-prim . &implementation-restriction-rcd) (t29fc core-prim . &implementation-restriction-rtd) (t29e9 core-prim . &non-continuable-rcd) (t29e7 core-prim . &non-continuable-rtd) (t29d4 core-prim . &who-rcd) (t29d2 core-prim . &who-rtd) (t29b9 core-prim . &irritants-rcd) (t29b7 core-prim . &irritants-rtd) (t299e core-prim . &assertion-rcd) (t299c core-prim . &assertion-rtd) (t2989 core-prim . &violation-rcd) (t2987 core-prim . &violation-rtd) (t2974 core-prim . &error-rcd) (t2972 core-prim . &error-rtd) (t295f core-prim . &serious-rcd) (t295d core-prim . &serious-rtd) (t294a core-prim . &warning-rcd) (t2948 core-prim . &warning-rtd) (t2935 core-prim . &message-rcd) (t2933 core-prim . &message-rtd) (t28d6 core-prim . &condition-rcd) (t28d4 core-prim . &condition-rtd) (te54 core-prim . syntax-error) (td78 core-prim . syntax-dispatch) (t3120 core-prim . pretty-print) (t311f core-prim . eval-core) (t311e core-prim . set-symbol-value!) (t311d core-prim . symbol-value) (t311c core-prim . gensym) (t311b core-prim . void) (t2c98 core-prim . load) (te66 core-prim . interaction-environment) (t311a core-prim . char-ready?) (t3119 core-prim . regexp?) (t3118 core-prim . read-line) (t3117 core-prim . gensym-prefix-set!) (t3116 core-prim . ungensym) (t3115 core-prim . alist->eq-hash-table) (t3114 core-prim . assoc-ref) (t3113 core-prim . print) (t3112 core-prim . format) (t3111 core-prim . host-os) (t7b1 core-prim . library-path) (t3110 core-prim . standard-library-path) (t310f core-prim . file-newer?) (t310e core-prim . stat-mtime) (t310d core-prim . write-to-file) (t310c core-prim . file->list) (t310b core-prim . file->string) (t310a core-prim . digit->integer) (t3109 core-prim . call-with-string-input-port) (t3108 core-prim . call-with-string-io) (t3107 core-prim . string-split) (t3106 core-prim . bytevector-for-each) (t3105 core-prim . string->regexp) (t3104 core-prim . rxmatch) (t3103 core-prim . regexp-replace-all) (t3102 core-prim . hashtable-for-each) (t59c core-prim . mosh-cache-dir) (t3101 core-prim . call-process) (t3100 core-prim . local-tz-offset) (t30ff core-prim . microseconds) (t30fe core-prim . directory-list) (t30fd core-prim . set-current-directory!) (t30fc core-prim . expand-path) (t30fb core-prim . current-directory) (t30fa core-prim . %spawn) (t30f9 core-prim . %waitpid) (t30f8 core-prim . simple-struct-name) (t30f7 core-prim . simple-struct-set!) (t30f6 core-prim . simple-struct-ref) (t30f5 core-prim . make-simple-struct) (t30f4 core-prim . simple-struct?) (t30f3 core-prim . pointer-ref-c-int64) (t30f2 core-prim . pointer-ref-c-int32) (t30f1 core-prim . pointer-ref-c-int16) (t30f0 core-prim . pointer-ref-c-int8) (t30ef core-prim . pointer-ref-c-uint64) (t30ee core-prim . pointer-ref-c-uint32) (t30ed core-prim . pointer-ref-c-uint16) (t30ec core-prim . pointer-ref-c-uint8) (t30eb core-prim . pointer-set-c-uint64!) (t30ea core-prim . pointer-set-c-uint32!) (t30e9 core-prim . pointer-set-c-uint16!) (t30e8 core-prim . pointer-set-c-uint8!) (t30e7 core-prim . pointer-set-c-int64!) (t30e6 core-prim . pointer-set-c-int32!) (t30e5 core-prim . pointer-set-c-int16!) (t30e4 core-prim . pointer-set-c-int8!) (t30e3 core-prim . pointer-set-c-pointer!) (t30e2 core-prim . pointer-set-c-double!) (t30e1 core-prim . pointer-set-c-float!) (t30e0 core-prim . pointer-set-c-long-long!) (t30df core-prim . pointer-set-c-long!) (t30de core-prim . pointer-set-c-int!) (t30dd core-prim . pointer-set-c-short!) (t30dc core-prim . pointer-set-c-char!) (t30db core-prim . pointer-ref-c-pointer) (t30da core-prim . pointer-ref-c-double) (t30d9 core-prim . pointer-ref-c-float) (t30d8 core-prim . pointer-ref-c-unsigned-long-long) (t30d7 core-prim . pointer-ref-c-signed-long-long) (t30d6 core-prim . pointer-ref-c-unsigned-long) (t30d5 core-prim . pointer-ref-c-signed-long) (t30d4 core-prim . pointer-ref-c-unsigned-int) (t30d3 core-prim . pointer-ref-c-signed-int) (t30d2 core-prim . pointer-ref-c-unsigned-short) (t30d1 core-prim . pointer-ref-c-signed-short) (t30d0 core-prim . pointer-ref-c-unsigned-char) (t30cf core-prim . pointer-ref-c-signed-char) (t30ce core-prim . pointer->integer) (t30cd core-prim . integer->pointer) (t30cc core-prim . pointer?) (t30cb core-prim . shared-errno) (t30ca core-prim . %ffi-free-c-callback-trampoline) (t30c9 core-prim . %ffi-make-c-callback-trampoline) (t30c8 core-prim . %ffi-free) (t30c7 core-prim . %ffi-malloc) (t30c6 core-prim . %ffi-supported?) (t30c5 core-prim . %ffi-pointer->string) (t30c4 core-prim . %ffi-call) (t30c3 core-prim . %ffi-lookup) (t30c2 core-prim . %ffi-open) (t30c1 core-prim . null-terminated-utf8->string) (t30c0 core-prim . null-terminated-bytevector->string) (t30bf core-prim . %fork) (t30be core-prim . %pipe) (t30bd core-prim . p) (t30bc core-prim . open-output-string) (t30bb core-prim . get-output-string) (t30ba core-prim . file-stat-ctime) (t30b9 core-prim . file-stat-atime) (t30b8 core-prim . file-stat-mtime) (t30b7 core-prim . file-size-in-bytes) (t30b6 core-prim . file-writable?) (t30b5 core-prim . file-executable?) (t30b4 core-prim . file-readable?) (t30b3 core-prim . file-regular?) (t30b2 core-prim . file-symbolic-link?) (t30b1 core-prim . file-directory?) (t30b0 core-prim . create-symbolic-link) (t30af core-prim . rename-file) (t30ae core-prim . delete-directory) (t30ad core-prim . create-directory) (t30ac core-prim . create-mosh-cache-dir) (t30ab core-prim . get-environment-variables) (t30aa core-prim . current-exception-handler) (t30a9 core-prim . get-environment-variable) (t30a8 core-prim . join-wraps) (t30a7 core-prim . id->real-label) (t30a6 core-prim . same-marks?) (t30a5 core-prim . same-marks*?) (t30a4 core-prim . get-timeofday) (t30a3 core-prim . get-command-line) (t30a2 core-prim . sys-display) (t30a1 core-prim . whereis) (t30a0 core-prim . register) (t309f core-prim . vm-join!) (t309e core-prim . vm-set-value!) (t309d core-prim . vm?) (t309c core-prim . main-vm?) (t309b core-prim . vm-eval) (t309a core-prim . vm-self) (t3099 core-prim . vm-start!) (t3098 core-prim . make-vm) (t3097 core-prim . mutex-try-lock!) (t3096 core-prim . mutex-unlock!) (t3095 core-prim . mutex-lock!) (t3094 core-prim . mutex?) (t3093 core-prim . make-mutex) (t3092 core-prim . condition-variable-notify-all!) (t3091 core-prim . condition-variable-notify!) (t3090 core-prim . condition-variable-wait!) (t308f core-prim . make-condition-variable) (t308e core-prim . mosh-executable-path) (t308d core-prim . make-file-options) (t308c core-prim . source-info) (t308b core-prim . make-compiler-instruction) (t308a core-prim . make-instruction) (t3089 core-prim . set-source-info!) (t3088 core-prim . bignum?) (t3087 core-prim . fast-equal?) (t3086 core-prim . fasl-read) (t3085 core-prim . fasl-write) (t3084 core-prim . time-usage) (t3083 core-prim . os-constant) (t3082 core-prim . disasm) (t59a core-prim . make-parameter) (t3081 core-prim . socket-port) (t3080 core-prim . socket-shutdown) (t307f core-prim . socket-close) (t307e core-prim . socket-send) (t307d core-prim . socket-recv!) (t307c core-prim . socket-recv) (t307b core-prim . make-server-socket) (t307a core-prim . make-client-socket) (t3079 core-prim . socket-accept) (t3078 core-prim . socket?) (t3077 core-prim . string-upcase) (t3076 core-prim . string-titlecase) (t3075 core-prim . string-normalize-nfkd) (t3074 core-prim . string-normalize-nfkc) (t3073 core-prim . string-normalize-nfd) (t3072 core-prim . string-normalize-nfc) (t3071 core-prim . string-foldcase) (t3070 core-prim . string-downcase) (t306f core-prim . string-ci>?) (t306e core-prim . string-ci>=?) (t306d core-prim . string-ci=?) (t306c core-prim . string-ci<?) (t306b core-prim . string-ci<=?) (t306a core-prim . char-whitespace?) (t3069 core-prim . char-upper-case?) (t3068 core-prim . char-title-case?) (t3067 core-prim . char-numeric?) (t3066 core-prim . char-lower-case?) (t3065 core-prim . char-general-category) (t3064 core-prim . char-upcase) (t3063 core-prim . char-titlecase) (t3062 core-prim . char-foldcase) (t3061 core-prim . char-downcase) (t3060 core-prim . char-ci>?) (t305f core-prim . char-ci>=?) (t305e core-prim . char-ci=?) (t305d core-prim . char-ci<?) (t305c core-prim . char-ci<=?) (t305b core-prim . char-alphabetic?) (tba3 core-prim . make-variable-transformer) (te5a core-prim . identifier?) (te46 core-prim . generate-temporaries) (te48 core-prim . free-identifier=?) (te5e core-prim . syntax->datum) (te5c core-prim . datum->syntax) (te4a core-prim . bound-identifier=?) (t305a core-prim . record-type-descriptor?) (t3059 core-prim . record-predicate) (t3058 core-prim . record-mutator) (t3057 core-prim . record-constructor) (t3056 core-prim . record-accessor) (t3055 core-prim . make-record-type-descriptor) (t3054 core-prim . make-record-constructor-descriptor) (t3053 core-prim . record?) (t3052 core-prim . record-type-uid) (t3051 core-prim . record-type-sealed?) (t3050 core-prim . record-type-parent) (t304f core-prim . record-type-opaque?) (t304e core-prim . record-type-name) (t304d core-prim . record-type-generative?) (t304c core-prim . record-type-field-names) (t304b core-prim . record-rtd) (t304a core-prim . record-field-mutable?) (t3049 core-prim . delete-file) (t3048 core-prim . file-exists?) (t3047 core-prim . vector-sort!) (t3046 core-prim . vector-sort) (t3045 core-prim . list-sort) (t3044 core-prim . symbol-hash) (t3043 core-prim . string-ci-hash) (t3042 core-prim . string-hash) (t3041 core-prim . equal-hash) (t3040 core-prim . hashtable-equivalence-function) (t303f core-prim . make-hashtable) (t303e core-prim . hashtable-hash-function) (t303d core-prim . make-eqv-hashtable) (t303c core-prim . make-eq-hashtable) (t303b core-prim . hashtable?) (t303a core-prim . hashtable-update!) (t3039 core-prim . hashtable-size) (t3038 core-prim . hashtable-set!) (t3037 core-prim . hashtable-ref) (t3036 core-prim . hashtable-mutable?) (t3035 core-prim . hashtable-keys) (t3034 core-prim . hashtable-entries) (t3033 core-prim . hashtable-delete!) (t3032 core-prim . hashtable-copy) (t3031 core-prim . hashtable-contains?) (t3030 core-prim . hashtable-clear!) (t302f core-prim . call-with-output-file) (t302e core-prim . call-with-input-file) (t302d core-prim . write-char) (t302c core-prim . write) (t302b core-prim . with-output-to-file) (t302a core-prim . with-input-from-file) (t3029 core-prim . read-char) (t3028 core-prim . read) (t3027 core-prim . peek-char) (t3026 core-prim . open-output-file) (t3025 core-prim . open-input-file) (t3024 core-prim . newline) (t3023 core-prim . display) (t3022 core-prim . close-output-port) (t3021 core-prim . close-input-port) (t3020 core-prim . eof-object?) (t301f core-prim . eof-object) (t301e core-prim . current-error-port) (t301d core-prim . current-output-port) (t301c core-prim . current-input-port) (t301b core-prim . output-port?) (t301a core-prim . input-port?) (t3019 core-prim . utf-8-codec) (t3018 core-prim . utf-16-codec) (t3017 core-prim . transcoder-error-handling-mode) (t3016 core-prim . transcoder-eol-style) (t3015 core-prim . transcoder-codec) (t3014 core-prim . transcoded-port) (t3013 core-prim . textual-port?) (t3012 core-prim . string->bytevector) (t3011 core-prim . standard-output-port) (t3010 core-prim . standard-input-port) (t300f core-prim . standard-error-port) (t300e core-prim . set-port-position!) (t300d core-prim . put-u8) (t300c core-prim . put-string) (t300b core-prim . put-datum) (t300a core-prim . put-char) (t3009 core-prim . put-bytevector) (t3008 core-prim . port?) (t3007 core-prim . port-transcoder) (t3006 core-prim . port-position) (t3005 core-prim . port-has-set-port-position!?) (t3004 core-prim . port-has-port-position?) (t3003 core-prim . port-eof?) (t3002 core-prim . output-port-buffer-mode) (t3001 core-prim . open-string-output-port) (t3000 core-prim . open-string-input-port) (t2fff core-prim . open-file-output-port) (t2ffe core-prim . open-file-input/output-port) (t2ffd core-prim . open-file-input-port) (t2ffc core-prim . open-bytevector-output-port) (t2ffb core-prim . open-bytevector-input-port) (t2ffa core-prim . native-transcoder) (t2ff9 core-prim . native-eol-style) (t2ff8 core-prim . make-transcoder) (t2ff7 core-prim . latin-1-codec) (t2a82 core-prim . make-i/o-write-error) (t2a6d core-prim . make-i/o-read-error) (t2b23 core-prim . make-i/o-port-error) (t2a99 core-prim . make-i/o-invalid-position-error) (t2ab4 core-prim . make-i/o-filename-error) (t2acd core-prim . make-i/o-file-protection-error) (t2ae2 core-prim . make-i/o-file-is-read-only-error) (t2b0c core-prim . make-i/o-file-does-not-exist-error) (t2af7 core-prim . make-i/o-file-already-exists-error) (t2a58 core-prim . make-i/o-error) (t2b53 core-prim . make-i/o-encoding-error) (t2b3c core-prim . make-i/o-decoding-error) (t2ff6 core-prim . make-custom-textual-output-port) (t2ff5 core-prim . make-custom-textual-input/output-port) (t2ff4 core-prim . make-custom-textual-input-port) (t2ff3 core-prim . make-custom-binary-output-port) (t2ff2 core-prim . make-custom-binary-input/output-port) (t2ff1 core-prim . make-custom-binary-input-port) (t2ff0 core-prim . make-bytevector) (t2fef core-prim . lookahead-u8) (t2fee core-prim . lookahead-char) (t2a84 core-prim . i/o-write-error?) (t2a6f core-prim . i/o-read-error?) (t2b27 core-prim . i/o-port-error?) (t2a9d core-prim . i/o-invalid-position-error?) (t2ab8 core-prim . i/o-filename-error?) (t2acf core-prim . i/o-file-protection-error?) (t2ae4 core-prim . i/o-file-is-read-only-error?) (t2b0e core-prim . i/o-file-does-not-exist-error?) (t2af9 core-prim . i/o-file-already-exists-error?) (t2a5a core-prim . i/o-error?) (t2a9f core-prim . i/o-error-position) (t2b29 core-prim . i/o-error-port) (t2aba core-prim . i/o-error-filename) (t2b57 core-prim . i/o-encoding-error?) (t2b59 core-prim . i/o-encoding-error-char) (t2b3e core-prim . i/o-decoding-error?) (t2fed core-prim . get-u8) (t2fec core-prim . get-string-n!) (t2feb core-prim . get-string-n) (t2fea core-prim . get-string-all) (t2fe9 core-prim . get-line) (t2fe8 core-prim . get-datum) (t2fe7 core-prim . get-char) (t2fe6 core-prim . get-bytevector-some) (t2fe5 core-prim . get-bytevector-n!) (t2fe4 core-prim . get-bytevector-n) (t2fe3 core-prim . get-bytevector-all) (t2fe2 core-prim . flush-output-port) (t2fe1 core-prim . close-port) (te34 core-prim . scheme-report-environment) (t2fe0 core-prim . quotient) (te32 core-prim . null-environment) (t2fdf core-prim . remainder) (t2fde core-prim . modulo) (t2fdd core-prim . inexact->exact) (t2fdc core-prim . force) (t2fdb core-prim . exact->inexact) (t2fda core-prim . make-promise) (t2fd9 core-prim . exit) (t2c92 core-prim . command-line) (t2fd8 core-prim . string-fill!) (t2fd7 core-prim . string-set!) (t2fd6 core-prim . set-cdr!) (t2fd5 core-prim . set-car!) (t2fd4 core-prim . remove) (t2fd3 core-prim . remv) (t2fd2 core-prim . remp) (t2fd1 core-prim . remq) (t2fd0 core-prim . partition) (t2fcf core-prim . memv) (t2fce core-prim . memq) (t2fcd core-prim . memp) (t2fcc core-prim . member) (t2fcb core-prim . exists) (t2fca core-prim . for-all) (t2fc9 core-prim . fold-right) (t2fc8 core-prim . fold-left) (t2fc7 core-prim . find) (t2fc6 core-prim . filter) (t2fc5 core-prim . cons*) (t2fc4 core-prim . assv) (t2fc3 core-prim . assq) (t2fc2 core-prim . assp) (t2fc1 core-prim . assoc) (t2fc0 core-prim . call-with-string-output-port) (t2fbf core-prim . call-with-port) (t2fbe core-prim . call-with-bytevector-output-port) (t2fbd core-prim . bytevector->string) (t2fbc core-prim . buffer-mode?) (t2fbb core-prim . binary-port?) (t2fba core-prim . with-exception-handler) (t2fb9 core-prim . raise-continuable) (t2fb8 core-prim . raise) (te38 core-prim . eval) (te30 core-prim . environment) (t2fb7 core-prim . make-enumeration) (t2fb6 core-prim . enum-set=?) (t2fb5 core-prim . enum-set-universe) (t2fb4 core-prim . enum-set-union) (t2fb3 core-prim . enum-set-subset?) (t2fb2 core-prim . enum-set-projection) (t2fb1 core-prim . enum-set-member?) (t2fb0 core-prim . enum-set-intersection) (t2faf core-prim . enum-set-indexer) (t2fae core-prim . enum-set-difference) (t2fad core-prim . enum-set-constructor) (t2fac core-prim . enum-set-complement) (t2fab core-prim . enum-set->list) (t29ce core-prim . who-condition?) (t2946 core-prim . warning?) (t2985 core-prim . violation?) (t2a45 core-prim . undefined-violation?) (t2a2c core-prim . syntax-violation?) (t2a30 core-prim . syntax-violation-subform) (t2a2e core-prim . syntax-violation-form) (te58 core-prim . syntax-violation) (t2faa core-prim . simple-conditions) (t295b core-prim . serious-condition?) (t29e5 core-prim . non-continuable-violation?) (t292f core-prim . message-condition?) (t29ca core-prim . make-who-condition) (t2944 core-prim . make-warning) (t2983 core-prim . make-violation) (t2a43 core-prim . make-undefined-violation) (t2a26 core-prim . make-syntax-violation) (t2959 core-prim . make-serious-condition) (t29e3 core-prim . make-non-continuable-violation) (t292b core-prim . make-message-condition) (t2a0d core-prim . make-lexical-violation) (t29af core-prim . make-irritants-condition) (t29f8 core-prim . make-implementation-restriction-violation) (t296e core-prim . make-error) (t2998 core-prim . make-assertion-violation) (t2a0f core-prim . lexical-violation?) (t29b3 core-prim . irritants-condition?) (t29fa core-prim . implementation-restriction-violation?) (t2970 core-prim . error?) (t29d0 core-prim . condition-who) (t2fa9 core-prim . condition-predicate) (t2931 core-prim . condition-message) (t29b5 core-prim . condition-irritants) (t2fa8 core-prim . condition-accessor) (t2fa7 core-prim . condition) (t299a core-prim . assertion-violation?) (t2fa6 core-prim . condition?) (t2fa5 core-prim . utf32->string) (t2fa4 core-prim . utf16->string) (t2fa3 core-prim . utf8->string) (t2fa2 core-prim . uint-list->bytevector) (t2fa1 core-prim . u8-list->bytevector) (t2fa0 core-prim . string->utf8) (t2f9f core-prim . string->utf32) (t2f9e core-prim . string->utf16) (t2f9d core-prim . sint-list->bytevector) (t2f9c core-prim . native-endianness) (t2f9b core-prim . bytevector?) (t2f9a core-prim . bytevector=?) (t2f99 core-prim . bytevector-uint-set!) (t2f98 core-prim . bytevector-uint-ref) (t2f97 core-prim . bytevector-u8-set!) (t2f96 core-prim . bytevector-u8-ref) (t2f95 core-prim . bytevector-u64-set!) (t2f94 core-prim . bytevector-u64-ref) (t2f93 core-prim . bytevector-u64-native-set!) (t2f92 core-prim . bytevector-u64-native-ref) (t2f91 core-prim . bytevector-u32-set!) (t2f90 core-prim . bytevector-u32-ref) (t2f8f core-prim . bytevector-u32-native-set!) (t2f8e core-prim . bytevector-u32-native-ref) (t2f8d core-prim . bytevector-u16-set!) (t2f8c core-prim . bytevector-u16-ref) (t2f8b core-prim . bytevector-u16-native-set!) (t2f8a core-prim . bytevector-u16-native-ref) (t2f89 core-prim . bytevector-sint-set!) (t2f88 core-prim . bytevector-sint-ref) (t2f87 core-prim . bytevector-s8-set!) (t2f86 core-prim . bytevector-s8-ref) (t2f85 core-prim . bytevector-s64-set!) (t2f84 core-prim . bytevector-s64-ref) (t2f83 core-prim . bytevector-s64-native-set!) (t2f82 core-prim . bytevector-s64-native-ref) (t2f81 core-prim . bytevector-s32-set!) (t2f80 core-prim . bytevector-s32-ref) (t2f7f core-prim . bytevector-s32-native-set!) (t2f7e core-prim . bytevector-s32-native-ref) (t2f7d core-prim . bytevector-s16-set!) (t2f7c core-prim . bytevector-s16-ref) (t2f7b core-prim . bytevector-s16-native-set!) (t2f7a core-prim . bytevector-s16-native-ref) (t2f79 core-prim . bytevector-length) (t2f78 core-prim . bytevector-ieee-single-ref) (t2f77 core-prim . bytevector-ieee-single-set!) (t2f76 core-prim . bytevector-ieee-single-native-set!) (t2f75 core-prim . bytevector-ieee-single-native-ref) (t2f74 core-prim . bytevector-ieee-double-set!) (t2f73 core-prim . bytevector-ieee-double-ref) (t2f72 core-prim . bytevector-ieee-double-native-set!) (t2f71 core-prim . bytevector-ieee-double-native-ref) (t2f70 core-prim . bytevector-fill!) (t2f6f core-prim . bytevector-copy!) (t2f6e core-prim . bytevector-copy) (t2f6d core-prim . bytevector->uint-list) (t2f6c core-prim . bytevector->u8-list) (t2f6b core-prim . bytevector->sint-list) (t2b83 core-prim . no-nans-violation?) (t2b6e core-prim . no-infinities-violation?) (t2b81 core-prim . make-no-nans-violation) (t2b6c core-prim . make-no-infinities-violation) (t2f6a core-prim . real->flonum) (t2f69 core-prim . flzero?) (t2f68 core-prim . fltruncate) (t2f67 core-prim . fltan) (t2f66 core-prim . flsqrt) (t2f65 core-prim . flsin) (t2f64 core-prim . flround) (t2f63 core-prim . flpositive?) (t2f62 core-prim . flonum?) (t2f61 core-prim . flodd?) (t2f60 core-prim . flnumerator) (t2f5f core-prim . flnegative?) (t2f5e core-prim . flnan?) (t2f5d core-prim . flmod0) (t2f5c core-prim . flmod) (t2f5b core-prim . flmin) (t2f5a core-prim . flmax) (t2f59 core-prim . fllog) (t2f58 core-prim . flinteger?) (t2f57 core-prim . flinfinite?) (t2f56 core-prim . flfloor) (t2f55 core-prim . flfinite?) (t2f54 core-prim . flexpt) (t2f53 core-prim . flexp) (t2f52 core-prim . fleven?) (t2f51 core-prim . fldiv0-and-mod0) (t2f50 core-prim . fldiv0) (t2f4f core-prim . fldiv-and-mod) (t2f4e core-prim . fldiv) (t2f4d core-prim . fldenominator) (t2f4c core-prim . flcos) (t2f4b core-prim . flceiling) (t2f4a core-prim . flatan) (t2f49 core-prim . flasin) (t2f48 core-prim . flacos) (t2f47 core-prim . flabs) (t2f46 core-prim . fl>?) (t2f45 core-prim . fl>=?) (t2f44 core-prim . fl=?) (t2f43 core-prim . fl<?) (t2f42 core-prim . fl<=?) (t2f41 core-prim . fl/) (t2f40 core-prim . fl-) (t2f3f core-prim . fl+) (t2f3e core-prim . fl*) (t2f3d core-prim . fixnum->flonum) (t2f3c core-prim . fxzero?) (t2f3b core-prim . fxxor) (t2f3a core-prim . fxrotate-bit-field) (t2f39 core-prim . fxreverse-bit-field) (t2f38 core-prim . fxpositive?) (t2f37 core-prim . fxodd?) (t2f36 core-prim . fxnot) (t2f35 core-prim . fxnegative?) (t2f34 core-prim . fxmod0) (t2f33 core-prim . fxmod) (t2f32 core-prim . fxmin) (t2f31 core-prim . fxmax) (t2f30 core-prim . fxlength) (t2f2f core-prim . fxior) (t2f2e core-prim . fxif) (t2f2d core-prim . fxfirst-bit-set) (t2f2c core-prim . fxeven?) (t2f2b core-prim . fxdiv0-and-mod0) (t2f2a core-prim . fxdiv0) (t2f29 core-prim . fxdiv-and-mod) (t2f28 core-prim . fxdiv) (t2f27 core-prim . fxcopy-bit-field) (t2f26 core-prim . fxcopy-bit) (t2f25 core-prim . fxbit-set?) (t2f24 core-prim . fxbit-field) (t2f23 core-prim . fxbit-count) (t2f22 core-prim . fxarithmetic-shift-right) (t2f21 core-prim . fxarithmetic-shift-left) (t2f20 core-prim . fxarithmetic-shift) (t2f1f core-prim . fxand) (t2f1e core-prim . fx>?) (t2f1d core-prim . fx>=?) (t2f1c core-prim . fx=?) (t2f1b core-prim . fx<?) (t2f1a core-prim . fx<=?) (t2f19 core-prim . fx-/carry) (t2f18 core-prim . fx-) (t2f17 core-prim . fx+/carry) (t2f16 core-prim . fx+) (t2f15 core-prim . fx*/carry) (t2f14 core-prim . fx*) (t2f13 core-prim . greatest-fixnum) (t2f12 core-prim . least-fixnum) (t2f11 core-prim . fixnum-width) (t2f10 core-prim . fixnum?) (t2f0f core-prim . bitwise-rotate-bit-field) (t2f0e core-prim . bitwise-reverse-bit-field) (t2f0d core-prim . bitwise-length) (t2f0c core-prim . bitwise-if) (t2f0b core-prim . bitwise-first-bit-set) (t2f0a core-prim . bitwise-copy-bit-field) (t2f09 core-prim . bitwise-copy-bit) (t2f08 core-prim . bitwise-bit-set?) (t2f07 core-prim . bitwise-bit-field) (t2f06 core-prim . bitwise-bit-count) (t2f05 core-prim . bitwise-xor) (t2f04 core-prim . bitwise-ior) (t2f03 core-prim . bitwise-and) (t2f02 core-prim . bitwise-not) (t2f01 core-prim . bitwise-arithmetic-shift-right) (t2f00 core-prim . bitwise-arithmetic-shift-left) (t2eff core-prim . bitwise-arithmetic-shift) (t2efe core-prim . zero?) (t2efd core-prim . vector?) (t2efc core-prim . vector-set!) (t2efb core-prim . vector-ref) (t2efa core-prim . vector-map) (t2ef9 core-prim . vector-length) (t2ef8 core-prim . vector-for-each) (t2ef7 core-prim . vector-fill!) (t2ef6 core-prim . vector->list) (t2ef5 core-prim . vector) (t2ef4 core-prim . values) (t2ef3 core-prim . truncate) (t2ef2 core-prim . tan) (t2ef1 core-prim . symbol?) (t2ef0 core-prim . symbol=?) (t2eef core-prim . symbol->string) (t2eee core-prim . substring) (t2eed core-prim . string?) (t2eec core-prim . string>?) (t2eeb core-prim . string>=?) (t2eea core-prim . string=?) (t2ee9 core-prim . string<?) (t2ee8 core-prim . string<=?) (t2ee7 core-prim . string-ref) (t2ee6 core-prim . string-length) (t2ee5 core-prim . string-for-each) (t2ee4 core-prim . string-copy) (t2ee3 core-prim . string-append) (t2ee2 core-prim . string->symbol) (t2ee1 core-prim . string->number) (t2ee0 core-prim . string->list) (t2edf core-prim . string) (t2ede core-prim . sqrt) (t2edd core-prim . sin) (t2edc core-prim . round) (t2edb core-prim . reverse) (t2eda core-prim . real?) (t2ed9 core-prim . real-valued?) (t2ed8 core-prim . real-part) (t2ed7 core-prim . rationalize) (t2ed6 core-prim . rational?) (t2ed5 core-prim . rational-valued?) (t2ed4 core-prim . procedure?) (t2ed3 core-prim . positive?) (t2ed2 core-prim . pair?) (t2ed1 core-prim . odd?) (t2ed0 core-prim . numerator) (t2ecf core-prim . number?) (t2ece core-prim . number->string) (t2ecd core-prim . null?) (t2ecc core-prim . not) (t2ecb core-prim . negative?) (t2eca core-prim . nan?) (t2ec9 core-prim . min) (t2ec8 core-prim . max) (t2ec7 core-prim . map) (t2ec6 core-prim . make-vector) (t2ec5 core-prim . make-string) (t2ec4 core-prim . make-rectangular) (t2ec3 core-prim . make-polar) (t2ec2 core-prim . magnitude) (t2ec1 core-prim . log) (t2ec0 core-prim . list?) (t2ebf core-prim . list-tail) (t2ebe core-prim . list-ref) (t2ebd core-prim . list->vector) (t2ebc core-prim . list->string) (t2ebb core-prim . list) (t2eba core-prim . length) (t2eb9 core-prim . lcm) (t2eb8 core-prim . integer?) (t2eb7 core-prim . integer-valued?) (t2eb6 core-prim . integer->char) (t2eb5 core-prim . infinite?) (t2eb4 core-prim . inexact?) (t2eb3 core-prim . inexact) (t2eb2 core-prim . imag-part) (t2eb1 core-prim . gcd) (t2eb0 core-prim . for-each) (t2eaf core-prim . floor) (t2eae core-prim . finite?) (t2ead core-prim . expt) (t2eac core-prim . exp) (t2eab core-prim . exact?) (t2eaa core-prim . exact-integer-sqrt) (t2ea9 core-prim . exact) (t2ea8 core-prim . even?) (t2ea7 core-prim . error) (t2ea6 core-prim . eqv?) (t2ea5 core-prim . equal?) (t2ea4 core-prim . eq?) (t2ea3 core-prim . dynamic-wind) (t2ea2 core-prim . div0-and-mod0) (t2ea1 core-prim . mod0) (t2ea0 core-prim . div0) (t2e9f core-prim . div-and-mod) (t2e9e core-prim . mod) (t2e9d core-prim . div) (t2e9c core-prim . denominator) (t2e9b core-prim . cos) (t2e9a core-prim . cons) (t2e99 core-prim . complex?) (t2e98 core-prim . char?) (t2e97 core-prim . char>?) (t2e96 core-prim . char>=?) (t2e95 core-prim . char=?) (t2e94 core-prim . char<?) (t2e93 core-prim . char<=?) (t2e92 core-prim . char->integer) (t2e91 core-prim . ceiling) (t2e90 core-prim . call-with-values) (t2e8f core-prim . call/cc) (t2e8e core-prim . call-with-current-continuation) (t2e8d core-prim . cddddr) (t2e8c core-prim . cdddar) (t2e8b core-prim . cddadr) (t2e8a core-prim . cddaar) (t2e89 core-prim . cdaddr) (t2e88 core-prim . cdadar) (t2e87 core-prim . cdaadr) (t2e86 core-prim . cdaaar) (t2e85 core-prim . cadddr) (t2e84 core-prim . caddar) (t2e83 core-prim . cadadr) (t2e82 core-prim . cadaar) (t2e81 core-prim . caaddr) (t2e80 core-prim . caadar) (t2e7f core-prim . caaadr) (t2e7e core-prim . caaaar) (t2e7d core-prim . cdddr) (t2e7c core-prim . cddar) (t2e7b core-prim . cdadr) (t2e7a core-prim . cdaar) (t2e79 core-prim . caddr) (t2e78 core-prim . cadar) (t2e77 core-prim . caadr) (t2e76 core-prim . caaar) (t2e75 core-prim . cddr) (t2e74 core-prim . cdar) (t2e73 core-prim . cadr) (t2e72 core-prim . caar) (t2e71 core-prim . cdr) (t2e70 core-prim . car) (t2e6f core-prim . boolean?) (t2e6e core-prim . boolean=?) (t2e6d core-prim . atan) (t2e6c core-prim . assertion-violation) (te52 core-prim . assertion-error) (t2e6b core-prim . asin) (t2e6a core-prim . apply) (t2e69 core-prim . append) (t2e68 core-prim . angle) (t2e67 core-prim . acos) (t2e66 core-prim . abs) (t2e65 core-prim . /) (t2e64 core-prim . *) (t2e63 core-prim . -) (t2e62 core-prim . +) (t2e61 core-prim . >=) (t2e60 core-prim . >) (t2e5f core-prim . =) (t2e5e core-prim . <=) (t2e5d core-prim . <) (t2e5c core-prim . library) (t2e5b $core-rtd &no-nans-rtd &no-nans-rcd) (t2e5a $core-rtd &no-infinities-rtd &no-infinities-rcd) (t2e59 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (t2e58 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (t2e57 $core-rtd &i/o-port-rtd &i/o-port-rcd) (t2e56 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (t2e55 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (t2e54 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (t2e53 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (t2e52 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (t2e51 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (t2e50 $core-rtd &i/o-write-rtd &i/o-write-rcd) (t2e4f $core-rtd &i/o-read-rtd &i/o-read-rcd) (t2e4e $core-rtd &i/o-rtd &i/o-rcd) (t2e4d $core-rtd &undefined-rtd &undefined-rcd) (t2e4c $core-rtd &syntax-rtd &syntax-rcd) (t2e4b $core-rtd &lexical-rtd &lexical-rcd) (t2e4a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (t2e49 $core-rtd &non-continuable-rtd &non-continuable-rcd) (t2e48 $core-rtd &who-rtd &who-rcd) (t2e47 $core-rtd &irritants-rtd &irritants-rcd) (t2e46 $core-rtd &assertion-rtd &assertion-rcd) (t2e45 $core-rtd &violation-rtd &violation-rcd) (t2e44 $core-rtd &error-rtd &error-rcd) (t2e43 $core-rtd &serious-rtd &serious-rcd) (t2e42 $core-rtd &warning-rtd &warning-rcd) (t2e41 $core-rtd &message-rtd &message-rcd) (t2e40 $core-rtd &condition-rtd &condition-rcd) (t2e3f macro . define-condition-type) (t2e3e macro . define-enumeration) (t2e3d macro . define-record-type) (t2e3c macro . parent-rtd) (t2e3b macro . nongenerative) (t2e3a macro . opaque) (t2e39 macro . sealed) (t2e38 macro . protocol) (t2e37 macro . parent) (t2e36 macro . immutable) (t2e35 macro . mutable) (t2e34 macro . fields) (t2e33 macro . error-handling-mode) (t2e32 macro . file-options) (t2e31 macro . buffer-mode) (t2e30 macro . eol-style) (t2e2f macro . guard) (t2e2e macro . trace-define) (t2e2d macro . trace-lambda) (t2e2c macro . unsyntax-splicing) (t2e2b macro . unsyntax) (t2e2a macro . unquote-splicing) (t2e29 macro . unquote) (t2e28 macro . _) (t2e27 macro . else) (t2e26 macro . =>) (t2e25 macro . ...) (t2e24 macro . assert) (t2e23 macro . endianness) (t2e22 macro . delay) (t2e21 macro . time) (t2e20 macro . do) (t2e1f macro . cond) (t2e1e macro . let*) (t2e1d macro . let*-values) (t2e1c macro . let-values) (t2e1b macro . identifier-syntax) (t2e1a macro . with-syntax) (t2e19 macro . quasisyntax) (t2e18 macro . quasiquote) (t2e17 macro . syntax-rules) (t2e16 macro . include) (t2e15 macro . define-struct) (t2e14 core-macro . record-constructor-descriptor) (t2e13 core-macro . record-type-descriptor) (t2e12 macro . case) (t2e11 macro . parameterize) (t2e10 macro . unless) (t2e0f macro . when) (t2e0e core-macro . or) (t2e0d core-macro . and) (t2e0c core-macro . if) (t2e0b core-macro . let) (t2e0a core-macro . letrec*) (t2e09 core-macro . letrec) (t2e08 core-macro . type-descriptor) (t2e07 core-macro . case-lambda) (t2e06 core-macro . lambda) (t2e05 core-macro . syntax) (t2e04 core-macro . syntax-case) (t2e03 core-macro . quote) (t2e02 core-macro . foreign-call) (t2e01 letrec-syntax) (t2e00 let-syntax) (t2dff set!) (t2dfe import) (t2dfd begin) (t2dfc module) (t2dfb define-syntax) (t2dfa define)) values values '#f '#f '#f '#f) (t986@t7d2@install-library 't3141 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . t3120) (eval-core . t311f) (set-symbol-value! . t311e) (symbol-value . t311d) (gensym . t311c) (void . t311b)) '() values values '#f '#f '#f '#f) (t986@t7d2@install-library 't3142 '(mosh) '() '() '() '() '((set-symbol-value! . t311e) (symbol-value . t311d) (regexp? . t3119) (read-line . t3118) (ungensym . t3116) (alist->eq-hash-table . t3115) (assoc-ref . t3114) (print . t3113) (format . t3112) (host-os . t3111) (library-path . t7b1) (standard-library-path . t3110) (file-newer? . t310f) (stat-mtime . t310e) (digit->integer . t310a) (call-with-string-input-port . t3109) (call-with-string-io . t3108) (string-split . t3107) (bytevector-for-each . t3106) (string->regexp . t3105) (rxmatch . t3104) (regexp-replace-all . t3103) (hashtable-for-each . t3102) (set-current-directory! . t30fd) (expand-path . t30fc) (current-directory . t30fb) (p . t30bd) (get-timeofday . t30a4) (get-command-line . t30a3) (sys-display . t30a2) (whereis . t30a1) (register . t30a0) (vm-join! . t309f) (vm-set-value! . t309e) (vm? . t309d) (main-vm? . t309c) (vm-eval . t309b) (vm-self . t309a) (vm-start! . t3099) (make-vm . t3098) (mutex-try-lock! . t3097) (mutex-unlock! . t3096) (mutex-lock! . t3095) (mutex? . t3094) (make-mutex . t3093) (condition-variable-notify-all! . t3092) (condition-variable-notify! . t3091) (condition-variable-wait! . t3090) (make-condition-variable . t308f) (mosh-executable-path . t308e) (make-file-options . t308d) (source-info . t308c) (make-compiler-instruction . t308b) (make-instruction . t308a) (set-source-info! . t3089) (bignum? . t3088) (fast-equal? . t3087) (fasl-read . t3086) (fasl-write . t3085) (time-usage . t3084) (os-constant . t3083) (time . t2e21) (include . t2e16)) '() values values '#f '#f '#f '#f) (t986@t7d2@install-library 't3143 '(system) '() '() '() '() '((gensym-prefix-set! . t3117) (write-to-file . t310d) (file->list . t310c) (file->string . t310b) (mosh-cache-dir . t59c) (call-process . t3101) (local-tz-offset . t3100) (microseconds . t30ff) (directory-list . t30fe) (expand-path . t30fc) (%spawn . t30fa) (%waitpid . t30f9) (simple-struct-name . t30f8) (simple-struct-set! . t30f7) (simple-struct-ref . t30f6) (make-simple-struct . t30f5) (simple-struct? . t30f4) (pointer-ref-c-int64 . t30f3) (pointer-ref-c-int32 . t30f2) (pointer-ref-c-int16 . t30f1) (pointer-ref-c-int8 . t30f0) (pointer-ref-c-uint64 . t30ef) (pointer-ref-c-uint32 . t30ee) (pointer-ref-c-uint16 . t30ed) (pointer-ref-c-uint8 . t30ec) (pointer-set-c-uint64! . t30eb) (pointer-set-c-uint32! . t30ea) (pointer-set-c-uint16! . t30e9) (pointer-set-c-uint8! . t30e8) (pointer-set-c-int64! . t30e7) (pointer-set-c-int32! . t30e6) (pointer-set-c-int16! . t30e5) (pointer-set-c-int8! . t30e4) (pointer-set-c-pointer! . t30e3) (pointer-set-c-double! . t30e2) (pointer-set-c-float! . t30e1) (pointer-set-c-long-long! . t30e0) (pointer-set-c-long! . t30df) (pointer-set-c-int! . t30de) (pointer-set-c-short! . t30dd) (pointer-set-c-char! . t30dc) (pointer-ref-c-pointer . t30db) (pointer-ref-c-double . t30da) (pointer-ref-c-float . t30d9) (pointer-ref-c-unsigned-long-long . t30d8) (pointer-ref-c-signed-long-long . t30d7) (pointer-ref-c-unsigned-long . t30d6) (pointer-ref-c-signed-long . t30d5) (pointer-ref-c-unsigned-int . t30d4) (pointer-ref-c-signed-int . t30d3) (pointer-ref-c-unsigned-short . t30d2) (pointer-ref-c-signed-short . t30d1) (pointer-ref-c-unsigned-char . t30d0) (pointer-ref-c-signed-char . t30cf) (pointer->integer . t30ce) (integer->pointer . t30cd) (pointer? . t30cc) (shared-errno . t30cb) (%ffi-free-c-callback-trampoline . t30ca) (%ffi-make-c-callback-trampoline . t30c9) (%ffi-free . t30c8) (%ffi-malloc . t30c7) (%ffi-supported? . t30c6) (%ffi-pointer->string . t30c5) (%ffi-call . t30c4) (%ffi-lookup . t30c3) (%ffi-open . t30c2) (null-terminated-utf8->string . t30c1) (null-terminated-bytevector->string . t30c0) (%fork . t30bf) (%pipe . t30be) (open-output-string . t30bc) (get-output-string . t30bb) (file-stat-ctime . t30ba) (file-stat-atime . t30b9) (file-stat-mtime . t30b8) (file-size-in-bytes . t30b7) (file-writable? . t30b6) (file-executable? . t30b5) (file-readable? . t30b4) (file-regular? . t30b3) (file-symbolic-link? . t30b2) (file-directory? . t30b1) (create-symbolic-link . t30b0) (rename-file . t30af) (delete-directory . t30ae) (create-directory . t30ad) (create-mosh-cache-dir . t30ac) (get-environment-variables . t30ab) (current-exception-handler . t30aa) (get-environment-variable . t30a9) (join-wraps . t30a8) (id->real-label . t30a7) (same-marks? . t30a6) (same-marks*? . t30a5) (disasm . t3082) (make-parameter . t59a) (socket-port . t3081) (socket-shutdown . t3080) (socket-close . t307f) (socket-send . t307e) (socket-recv! . t307d) (socket-recv . t307c) (make-server-socket . t307b) (make-client-socket . t307a) (socket-accept . t3079) (socket? . t3078) (parameterize . t2e11)) '() values values '#f '#f '#f '#f)))
(begin (set! t2c7d@ref (unspecified)) (set! t2c7f@x* (unspecified)) (set! t2c81@add-library-path! (unspecified)) (set! t2c83@parse-and-add-library-path (unspecified)) (set! t2c85@for-each-with-index (unspecified)) (set! t2c87@rpad (unspecified)) (set! t2c89@condition-printer (unspecified)) (set! t2c8b@record->field-alist (unspecified)) (set! t2c8d@map-with-index (unspecified)) (set! t2c8f@repl (unspecified)) (set! t2c91@trace-printer (unspecified)) (set! t2c93@command-line (unspecified)) (set! t2c95@local-library-path (unspecified)) (set! t2c97@load/args (unspecified)) (set! t2c99@load (unspecified)) (set! t2c9b@ironscheme-build (unspecified)) (set! t2c9d@eval-top-level (unspecified)) (set! t2c9f@compile-system-libraries (unspecified)) (set! t2ca1@compile (unspecified)) (set! t2ca3@compile->closure (unspecified)) (set! t2ca5@pre-compile-r6rs-file (unspecified)) (set! t2ca7@load-r6rs-top-level (unspecified)) (set! t2ca9@load-r6rs-top-level-sexp (unspecified)) (set! t2cab@prefix-inc (unspecified)) (set! t2cad@prefix-inc! (unspecified)) (set! t2c7d@ref (lambda (t2ce8@rtd t2ce9@i t2cea@x) (let ((t2cee@val ((record-accessor t2ce8@rtd t2ce9@i) t2cea@x))) (if (symbol? t2cee@val) (ungensym t2cee@val) t2cee@val)))) (set! t2de0@t2c7d@ref t2c7d@ref) (set! t2c7f@x* '()) (set! t2de1@t2c7f@x* t2c7f@x*) (set! t2c81@add-library-path! (lambda (t2cf0@path) (t976@t7b2@library-path (append (t976@t7b2@library-path) (list t2cf0@path))))) (set! t2de2@t2c81@add-library-path! t2c81@add-library-path!) (set! t2c83@parse-and-add-library-path (lambda (t2cf2@paths t2cf3@message) (let ((t2cf7@separator '#f)) (begin (set! t2cf7@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((t2cf8@t t2cf2@paths)) (if t2cf8@t ((lambda (t2cfa@paths) (for-each (lambda (t2cfc@path) (if (file-exists? t2cfc@path) (t2c81@add-library-path! (expand-path t2cfc@path)) (format (current-error-port) t2cf3@message t2cfc@path))) (string-split t2cfa@paths t2cf7@separator))) t2cf8@t) (void))))))) (set! t2de3@t2c83@parse-and-add-library-path t2c83@parse-and-add-library-path) (set! t2c85@for-each-with-index (lambda (t2cfe@proc t2cff@lst) (letrec ((t2d02@loop (lambda (t2d04@i t2d05@lst) (if (null? t2d05@lst) (if '#f '#f (void)) (begin (t2cfe@proc t2d04@i (car t2d05@lst)) (t2d02@loop (+ t2d04@i '1) (cdr t2d05@lst))))))) (t2d02@loop '1 t2cff@lst)))) (set! t2de4@t2c85@for-each-with-index t2c85@for-each-with-index) (set! t2c87@rpad (lambda (t2d08@str t2d09@pad t2d0a@n) (let ((t2d0e@rest (- t2d0a@n (string-length (format '"~a" t2d08@str))))) (let t2d14@loop ((t2d10@rest t2d0e@rest) (t2d11@ret (format '"~a" t2d08@str))) (if (<= t2d10@rest '0) t2d11@ret (t2d14@loop (- t2d10@rest '1) (string-append t2d11@ret t2d09@pad))))))) (set! t2de5@t2c87@rpad t2c87@rpad) (set! t2c89@condition-printer (lambda (t2d16@e t2d17@port) (let ((t2d1b@max-condition-len '#f)) (begin (set! t2d1b@max-condition-len (apply max (map (lambda (t2d2c@c) (string-length (symbol->string (record-type-name (record-rtd t2d2c@c))))) (simple-conditions t2d16@e)))) (begin (display '" Condition components:\n" t2d17@port) (t2c85@for-each-with-index (lambda (t2d1c@i t2d1d@x) (let ((t2d20@rtd (record-rtd t2d1d@x)) (t2d21@fields-alist (t2c8b@record->field-alist t2d1d@x))) (begin (format t2d17@port '" ~d. ~a" t2d1c@i (t2c87@rpad (symbol->string (record-type-name t2d20@rtd)) '" " t2d1b@max-condition-len)) (if (null? t2d21@fields-alist) (newline t2d17@port) (void)) (let t2d28@loop ((t2d24@first '#t) (t2d25@fields-alist t2d21@fields-alist)) (if (null? t2d25@fields-alist) '() (let ((t2d2a@field (car t2d25@fields-alist))) (begin (if (not t2d24@first) (display (t2c87@rpad '"" '" " (+ '4 t2d1b@max-condition-len)) t2d17@port) (void)) (display '"       " t2d17@port) (display (car t2d2a@field) t2d17@port) (display '": " t2d17@port) (write (cdr t2d2a@field) t2d17@port) (newline t2d17@port) (t2d28@loop '#f (cdr t2d25@fields-alist))))))))) (simple-conditions t2d16@e))))))) (set! t2de6@t2c89@condition-printer t2c89@condition-printer) (set! t2c8b@record->field-alist (lambda (t2d2e@r) (let ((t2d31@ref '#f)) (begin (set! t2d31@ref (lambda (t2d3c@rtd t2d3d@i t2d3e@x) (let ((t2d42@val ((record-accessor t2d3c@rtd t2d3d@i) t2d3e@x))) (if (symbol? t2d42@val) (ungensym t2d42@val) t2d42@val)))) (let t2d36@loop ((t2d32@ret '()) (t2d33@rtd (record-rtd t2d2e@r))) (if t2d33@rtd (t2d36@loop (append t2d32@ret (t2c8d@map-with-index (lambda (t2d38@i t2d39@field) (cons t2d39@field (t2d31@ref t2d33@rtd t2d38@i t2d2e@r))) (vector->list (record-type-field-names t2d33@rtd)))) (record-type-parent t2d33@rtd)) t2d32@ret)))))) (set! t2de7@t2c8b@record->field-alist t2c8b@record->field-alist) (set! t2c8d@map-with-index (lambda (t2d44@proc t2d45@lst) (let t2d4e@loop ((t2d48@i '0) (t2d49@lst t2d45@lst) (t2d4a@ret '())) (if (null? t2d49@lst) (reverse t2d4a@ret) (t2d4e@loop (+ t2d48@i '1) (cdr t2d49@lst) (cons (t2d44@proc t2d48@i (car t2d49@lst)) t2d4a@ret)))))) (set! t2de8@t2c8d@map-with-index t2c8d@map-with-index) (set! t2c8f@repl (lambda t2d50@x (let ((t2d53@rec '#f)) (begin (set! t2d53@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (t2d56@t2d54) (lambda () (with-exception-handler (lambda (t2d58@e) ((call/cc (lambda (t2d5a@t2d55) (t2d56@t2d54 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? t2d58@e) (t2c89@condition-printer t2d58@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" t2d58@e))) (t2d5a@t2d55 (lambda () (raise-continuable t2d58@e)))))))))) (lambda () (let t2d60@loop ((t2d5c@line (get-line (current-input-port))) (t2d5d@accum '"")) (let ((t2d63@parentheses-ok? '#f) (t2d65@eval-string-print '#f)) (begin (set! t2d63@parentheses-ok? (lambda (t2d6a@text) (let t2d72@loop ((t2d6c@chars (string->list t2d6a@text)) (t2d6d@p0 '0) (t2d6e@p1 '0)) (if (null? t2d6c@chars) (= '0 t2d6d@p0 t2d6e@p1) (let ((t2d74@t (car t2d6c@chars))) (if (memv t2d74@t '(#\()) (t2d72@loop (cdr t2d6c@chars) (+ t2d6d@p0 '1) t2d6e@p1) (if (memv t2d74@t '(#\))) (t2d72@loop (cdr t2d6c@chars) (- t2d6d@p0 '1) t2d6e@p1) (if (memv t2d74@t '(#\[)) (t2d72@loop (cdr t2d6c@chars) t2d6d@p0 (+ t2d6e@p1 '1)) (if (memv t2d74@t '(#\])) (t2d72@loop (cdr t2d6c@chars) t2d6d@p0 (- t2d6e@p1 '1)) (t2d72@loop (cdr t2d6c@chars) t2d6d@p0 t2d6e@p1)))))))))) (set! t2d65@eval-string-print (lambda (t2d68@text) (if (not (or (string=? '"\n" t2d68@text) (= '0 (string-length t2d68@text)))) (write (t2c9d@eval-top-level (call-with-port (open-string-input-port t2d68@text) read))) (void)))) (if (eof-object? t2d5c@line) (begin (t2d65@eval-string-print t2d5d@accum) (exit)) (let ((t2d66@current (string-append t2d5d@accum t2d5c@line))) (if (t2d63@parentheses-ok? t2d66@current) (t2d65@eval-string-print t2d66@current) (t2d60@loop (get-line (current-input-port)) t2d66@current))))))))))))) (newline) (t2d53@rec)))) (t2d53@rec))))) (set! t2de9@t2c8f@repl t2c8f@repl) (set! t2c91@trace-printer (t6bc@t59b@make-parameter write)) (set! t2dea@t2c91@trace-printer t2c91@trace-printer) (set! t2c93@command-line (t6bc@t59b@make-parameter (get-command-line))) (set! t2deb@t2c93@command-line t2c93@command-line) (set! t2c95@local-library-path (lambda (t2d76@filename) (t976@t7b2@library-path))) (set! t2dec@t2c95@local-library-path t2c95@local-library-path) (set! t2c97@load/args (lambda (t2d78@filename . t2d7a@args) (begin (apply t2ca7@load-r6rs-top-level t2d78@filename 'load t2d7a@args) (void)))) (set! t2ded@t2c97@load/args t2c97@load/args) (set! t2c99@load (lambda (t2d7c@filename) (begin (apply t2ca7@load-r6rs-top-level t2d7c@filename 'load (t2c93@command-line)) (void)))) (set! t2dee@t2c99@load t2c99@load) (set! t2c9b@ironscheme-build (lambda () (t2c99@load '"ironscheme-buildscript.ss"))) (set! t2def@t2c9b@ironscheme-build t2c9b@ironscheme-build) (set! t2c9d@eval-top-level (lambda (t2d7e@x) (t28a3@te39@eval t2d7e@x (t28ba@te67@interaction-environment)))) (set! t2df0@t2c9d@eval-top-level t2c9d@eval-top-level) (set! t2c9f@compile-system-libraries (lambda () (t2c9d@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! t2df1@t2c9f@compile-system-libraries t2c9f@compile-system-libraries) (set! t2ca1@compile (lambda (t2d80@filename) (t2ca7@load-r6rs-top-level t2d80@filename 'compile))) (set! t2df2@t2ca1@compile t2ca1@compile) (set! t2ca3@compile->closure (lambda (t2d82@filename) (t2ca7@load-r6rs-top-level t2d82@filename 'closure))) (set! t2df3@t2ca3@compile->closure t2ca3@compile->closure) (set! t2ca5@pre-compile-r6rs-file (lambda (t2d84@filename) (t2ca7@load-r6rs-top-level t2d84@filename 'compile))) (set! t2df4@t2ca5@pre-compile-r6rs-file t2ca5@pre-compile-r6rs-file) (set! t2ca7@load-r6rs-top-level (lambda (t2d86@filename t2d87@how . t2d8a@args) (begin (t976@t7b2@library-path (t2c95@local-library-path t2d86@filename)) (let ((t2d8c@x* (with-input-from-file t2d86@filename (lambda () (let t2d8e@f () (let ((t2d90@x (t6af@t581@read-annotated))) (if (eof-object? t2d90@x) '() (cons t2d90@x (t2d8e@f))))))))) (let ((t2d92@t t2d87@how)) (if (memv t2d92@t '(closure)) (t28b9@te65@pre-compile-r6rs-top-level t2d8c@x*) (if (memv t2d92@t '(load)) (begin (t2c93@command-line (cons t2d86@filename (car t2d8a@args))) (t6bd@t59d@mosh-cache-dir (create-mosh-cache-dir)) (if (t6bd@t59d@mosh-cache-dir) (gensym-prefix-set! (t2cad@prefix-inc! (string-append (t6bd@t59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (t2d94@file) ((call/cc (lambda (t2d98@t2d96) (lambda () (with-exception-handler (lambda (t2d9a@c) ((call/cc (lambda (t2d9c@t2d97) (t2d98@t2d96 (lambda () (if '#t '#t (t2d9c@t2d97 (lambda () (raise-continuable t2d9a@c)))))))))) (lambda () (delete-file (string-append (t6bd@t59d@mosh-cache-dir) '"/" t2d94@file))))))))) (directory-list (t6bd@t59d@mosh-cache-dir))) (void)) (let ((t2d9e@compiled (t28b8@te63@compile-r6rs-top-level t2d8c@x*))) (begin (if (and (t6bd@t59d@mosh-cache-dir) (not (symbol-value '%disable-acc))) (t97a@t7ba@serialize-all t6b7@t591@serialize-library t713@t6cc@compile-core-expr) (void)) (t2d9e@compiled)))) (if (memv t2d92@t '(compile)) (begin (t28b8@te63@compile-r6rs-top-level t2d8c@x*) (t97a@t7ba@serialize-all t6b7@t591@serialize-library t713@t6cc@compile-core-expr)) (if '#f '#f (void)))))))))) (set! t2df5@t2ca7@load-r6rs-top-level t2ca7@load-r6rs-top-level) (set! t2ca9@load-r6rs-top-level-sexp (lambda (t2da0@import-spec t2da1@thunk) (let ((t2dac@t2da5 t976@t7b2@library-path) (t2dad@t2da7 t6bd@t59d@mosh-cache-dir) (t2dae@t2da9 (t2c95@local-library-path '"")) (t2daf@t2dab (create-mosh-cache-dir))) (let ((t2db4@swap (lambda () (begin (let ((t2db6@t (t2dac@t2da5))) (begin (t2dac@t2da5 t2dae@t2da9) (set! t2dae@t2da9 t2db6@t))) (let ((t2db8@t (t2dad@t2da7))) (begin (t2dad@t2da7 t2daf@t2dab) (set! t2daf@t2dab t2db8@t))))))) (dynamic-wind t2db4@swap (lambda () (begin (if (t6bd@t59d@mosh-cache-dir) (gensym-prefix-set! (t2cad@prefix-inc! (string-append (t6bd@t59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((t2dbe@t2dbb t2c93@command-line) (t2dbf@t2dbd '())) (let ((t2dc2@swap (lambda () (let ((t2dc4@t (t2dbe@t2dbb))) (begin (t2dbe@t2dbb t2dbf@t2dbd) (set! t2dbf@t2dbd t2dc4@t)))))) (dynamic-wind t2dc2@swap (lambda () ((t28b8@te63@compile-r6rs-top-level (list (cons 'import t2da0@import-spec) (list t2da1@thunk))))) t2dc2@swap))))) t2db4@swap))))) (set! t2df6@t2ca9@load-r6rs-top-level-sexp t2ca9@load-r6rs-top-level-sexp) (set! t2cab@prefix-inc (lambda (t2dc6@prefix-string) (let ((t2dc8@prefix (symbol->string t2dc6@prefix-string))) (let ((t2dca@len (string-length t2dc8@prefix))) (let t2dd2@loop ((t2dcc@i (- t2dca@len '1)) (t2dcd@carry? '#t) (t2dce@accum '())) (if (< t2dcc@i '0) (string->symbol (list->string (if t2dcd@carry? (cons '#\a t2dce@accum) t2dce@accum))) (if t2dcd@carry? (let ((t2dd4@next-integer (+ '1 (char->integer (string-ref t2dc8@prefix t2dcc@i))))) (if (= t2dd4@next-integer '123) (t2dd2@loop (- t2dcc@i '1) '#f (cons '#\A t2dce@accum)) (if (= t2dd4@next-integer '91) (t2dd2@loop (- t2dcc@i '1) '#t (cons '#\a t2dce@accum)) (t2dd2@loop (- t2dcc@i '1) '#f (cons (integer->char t2dd4@next-integer) t2dce@accum))))) (t2dd2@loop (- t2dcc@i '1) '#f (cons (string-ref t2dc8@prefix t2dcc@i) t2dce@accum))))))))) (set! t2df7@t2cab@prefix-inc t2cab@prefix-inc) (set! t2cad@prefix-inc! (lambda (t2dd6@file) (begin (if (not (file-exists? t2dd6@file)) (call-with-output-file t2dd6@file (lambda (t2dd8@port) (write 'd t2dd8@port))) (void)) (let ((t2dda@prefix (call-with-input-file t2dd6@file read))) (let ((t2ddc@next-prefix (t2cab@prefix-inc t2dda@prefix))) (begin (call-with-port (open-file-output-port t2dd6@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (t2dde@port) (write t2ddc@next-prefix t2dde@port))) t2dda@prefix)))))) (set! t2df8@t2cad@prefix-inc! t2cad@prefix-inc!) (begin (t97b@t7bc@current-precompiled-library-loader t6b8@t593@load-serialized-library) (set-symbol-value! 'load t2c99@load) (set-symbol-value! 'pre-compile-r6rs-file t2ca5@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs t2c9d@eval-top-level) (set-symbol-value! 'int-env-syms t289a@te27@interaction-environment-symbols) (set-symbol-value! 'expanded2core t712@t6ca@expanded->core) (set-symbol-value! 'trace-printer t2c91@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (t2cae@c) (condition (t2bda@t29e4@make-non-continuable-violation) (t2bd0@t29cb@make-who-condition 'raise) (t2b94@t292c@make-message-condition '"returned from non-continuable exception") (t2bc6@t29b0@make-irritants-condition (list t2cae@c))))) (t2c83@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (t2c83@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (t2c81@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (t2c81@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (t2c81@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((t2cb0@prefix (lambda (t2cb2@ext t2cb3@ls) (append (map (lambda (t2cb6@x) (string-append t2cb2@ext t2cb6@x)) t2cb3@ls) t2cb3@ls)))) (t977@t7b4@library-extensions (t2cb0@prefix '".mosh" (t977@t7b4@library-extensions)))) (current-exception-handler (lambda (t2cb8@c) (if (condition? t2cb8@c) (t2c89@condition-printer t2cb8@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" t2cb8@c)))) (if ((call/cc (lambda (t2cbc@t2cba) (lambda () (with-exception-handler (lambda (t2cbe@c) ((call/cc (lambda (t2cc0@t2cbb) (t2cbc@t2cba (lambda () (if '#t '#f (t2cc0@t2cbb (lambda () (raise-continuable t2cbe@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (t2ca9@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (t2c93@command-line)) (let ((t2cca@t2cc3 t2c93@command-line) (t2ccb@t2cc5 t6bd@t59d@mosh-cache-dir) (t2ccc@t2cc7 '()) (t2ccd@t2cc9 (create-mosh-cache-dir))) (let ((t2cd2@swap (lambda () (begin (let ((t2cd4@t (t2cca@t2cc3))) (begin (t2cca@t2cc3 t2ccc@t2cc7) (set! t2ccc@t2cc7 t2cd4@t))) (let ((t2cd6@t (t2ccb@t2cc5))) (begin (t2ccb@t2cc5 t2ccd@t2cc9) (set! t2ccd@t2cc9 t2cd6@t))))))) (dynamic-wind t2cd2@swap (lambda () (begin (if (t6bd@t59d@mosh-cache-dir) (gensym-prefix-set! (t2cad@prefix-inc! (string-append (t6bd@t59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (t2c8f@repl))) t2cd2@swap))) (begin (t976@t7b2@library-path (t2c95@local-library-path (car (t2c93@command-line)))) (set! t2c7f@x* (with-input-from-file (car (t2c93@command-line)) (lambda () (let t2cd8@f () (let ((t2cda@x (t6af@t581@read-annotated))) (if (eof-object? t2cda@x) '() (cons t2cda@x (t2cd8@f)))))))) (t2c93@command-line (cons (car (t2c93@command-line)) (cdr (t2c93@command-line)))) (t6bd@t59d@mosh-cache-dir (create-mosh-cache-dir)) (if (t6bd@t59d@mosh-cache-dir) (gensym-prefix-set! (t2cad@prefix-inc! (string-append (t6bd@t59d@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (t2cdc@file) ((call/cc (lambda (t2ce0@t2cde) (lambda () (with-exception-handler (lambda (t2ce2@c) ((call/cc (lambda (t2ce4@t2cdf) (t2ce0@t2cde (lambda () (if '#t '#t (t2ce4@t2cdf (lambda () (raise-continuable t2ce2@c)))))))))) (lambda () (delete-file (string-append (t6bd@t59d@mosh-cache-dir) '"/" t2cdc@file))))))))) (directory-list (t6bd@t59d@mosh-cache-dir))) (void)) (let ((t2ce6@compiled (t28b8@te63@compile-r6rs-top-level t2c7f@x*))) (begin (if (and (t6bd@t59d@mosh-cache-dir) (not (symbol-value '%disable-acc))) (t97a@t7ba@serialize-all t6b7@t591@serialize-library t713@t6cc@compile-core-expr) (void)) (t2ce6@compiled))))))))
