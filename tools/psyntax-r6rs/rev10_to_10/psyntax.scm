;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (bx57b@library-file-path->cache-path bx57d@read-annotated bx57f@annotation-stripped bx581@annotation? bx583@annotation-source bx585@annotation-expression bx587@scm->fasl bx589@fasl-save bx58b@fasl-load bx58d@serialize-library bx58f@load-serialized-library bx591@make-record-printer bx593@compile-core bx595@read-library-source-file bx597@make-parameter bx599@mosh-cache-dir bx62f@file-options-spec) (begin (set! bx57b@library-file-path->cache-path (lambda (bx630@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bx636@bx633 bx637@bx635) ((lambda (bx63a@extract bx63b@p) ((lambda (bx63f@display-hex) (begin (set! bx63f@display-hex (lambda (bx648@n) (if (<= '0 bx648@n '9) (display bx648@n bx63b@p) (display (integer->char (+ (char->integer '#\a) (- bx648@n '10))) bx63b@p)))) (begin ((letrec ((bx640@f (lambda (bx642@ls) (if (not (null? bx642@ls)) (begin (display '"_" bx63b@p) (for-each (lambda (bx644@c) (if (or (char<=? '#\a bx644@c '#\z) (char<=? '#\A bx644@c '#\Z) (char<=? '#\0 bx644@c '#\9) (memv bx644@c '(#\- #\. #\_ #\~))) (display bx644@c bx63b@p) (begin (display '"%" bx63b@p) ((lambda (bx646@n) (begin (bx63f@display-hex (quotient bx646@n '16)) (bx63f@display-hex (remainder bx646@n '16)))) (char->integer bx644@c))))) (string->list (car bx642@ls))) (bx640@f (cdr bx642@ls))) (void))))) bx640@f) (string-split bx630@x '#\/)) (bx63a@extract)))) '#f)) bx637@bx635 bx636@bx633))))) (set! bx57d@read-annotated read) (set! bx57f@annotation-stripped (lambda (bx64a@x) (bx585@annotation-expression bx64a@x))) (set! bx581@annotation? (lambda (bx64c@x) (source-info bx64c@x))) (set! bx583@annotation-source (lambda (bx64e@x) (source-info bx64e@x))) (set! bx585@annotation-expression (lambda (bx650@x) (if (pair? bx650@x) (cons (car bx650@x) (cdr bx650@x)) (display '"line:46\n")))) (set! bx587@scm->fasl (lambda (bx652@filename) (string-append (bx599@mosh-cache-dir) '"/" (bx57b@library-file-path->cache-path bx652@filename) '".mosh-fasl"))) (set! bx589@fasl-save (lambda (bx654@filename bx655@obj) (call-with-port (open-file-output-port bx654@filename) (lambda (bx658@port) ((symbol-value 'fasl-write!) bx655@obj bx658@port))))) (set! bx58b@fasl-load (lambda (bx65a@filename) (call-with-port (open-file-input-port bx65a@filename) (symbol-value 'fasl-read!)))) (set! bx58d@serialize-library (lambda (bx65c@filename bx65d@obj) (begin ((lambda (bx660@expanded2core) ((lambda (bx662@compile) ((lambda (bx664@code) ((lambda (bx666@pivot) ((lambda (bx668@visit) ((lambda () (begin (set-car! bx666@pivot bx668@visit) ((lambda (bx66a@pivot) ((lambda (bx66c@invoke) ((lambda () (set-car! bx66a@pivot bx66c@invoke)))) (bx662@compile (bx660@expanded2core (car bx66a@pivot))))) (cdr bx666@pivot)))))) (bx662@compile (bx660@expanded2core (car bx666@pivot))))) (cddddr (cddddr bx664@code)))) bx65d@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (bx66e@fasl-file) (begin (if (file-exists? bx66e@fasl-file) (delete-file bx66e@fasl-file) (void)) ((call/cc (lambda (bx672@bx670) (lambda () (with-exception-handler (lambda (bx674@c) ((call/cc (lambda (bx676@bx671) (bx672@bx670 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " bx65c@filename) (if (file-exists? bx66e@fasl-file) (delete-file bx66e@fasl-file) (void)) '#f) (bx676@bx671 (lambda () (raise-continuable bx674@c)))))))))) (lambda () (bx589@fasl-save bx66e@fasl-file bx65d@obj))))))))) (bx587@scm->fasl bx65c@filename))))) (set! bx58f@load-serialized-library (lambda (bx678@filename bx679@obj) (and (bx599@mosh-cache-dir) ((lambda (bx67c@fasl-file) (if (and (file-exists? bx67c@fasl-file) ((symbol-value 'file-newer?) bx67c@fasl-file bx678@filename)) ((lambda (bx67e@expanded2core) ((lambda (bx680@eval-compiled-core) ((lambda (bx682@code) ((lambda (bx684@pivot) ((lambda (bx686@visit) ((lambda (bx688@visit-proc) ((lambda () (begin (set-car! bx684@pivot bx688@visit-proc) ((lambda (bx68a@pivot) ((lambda (bx68c@invoke) ((lambda () (begin (set-car! bx68a@pivot (lambda () (bx680@eval-compiled-core bx68c@invoke))) (apply bx679@obj bx682@code))))) (car bx68a@pivot))) (cdr bx684@pivot)))))) (lambda () (bx680@eval-compiled-core bx686@visit)))) (car bx684@pivot))) (cddddr (cddddr bx682@code)))) (bx58b@fasl-load bx67c@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (bx587@scm->fasl bx678@filename))))) (set! bx591@make-record-printer (lambda (bx68e@name bx68f@printer) (lambda bx692@x (begin (display '"record printer") (for-each display bx692@x))))) (set! bx593@compile-core (lambda bx694@x (apply error 'comile-core '"not implementated" bx694@x))) (set! bx595@read-library-source-file (lambda (bx696@file-name) (with-input-from-file bx696@file-name bx57d@read-annotated))) (set! bx597@make-parameter (lambda bx6a6 ((lambda (bx6a7) (if (= bx6a7 '1) (apply (lambda (bx698@x) (bx597@make-parameter bx698@x (lambda (bx69a@x) bx69a@x))) bx6a6) (if (= bx6a7 '2) (apply (lambda (bx69c@x bx69d@fender) ((lambda (bx6a0@x) (lambda bx6a4 ((lambda (bx6a5) (if (= bx6a5 '0) (apply (lambda () bx6a0@x) bx6a4) (if (= bx6a5 '1) (apply (lambda (bx6a2@v) (set! bx6a0@x (bx69d@fender bx6a2@v))) bx6a4) (error 'apply '"invalid arg count")))) (length bx6a4)))) (bx69d@fender bx69c@x))) bx6a6) (error 'apply '"invalid arg count")))) (length bx6a6)))) (set! bx599@mosh-cache-dir (bx597@make-parameter '#f)) (set! bx62f@file-options-spec (lambda (bx6a8@x) bx6a8@x)) (begin (set! bx6ba@bx62f@file-options-spec bx62f@file-options-spec) (set! bx6b9@bx599@mosh-cache-dir bx599@mosh-cache-dir) (set! bx6b8@bx597@make-parameter bx597@make-parameter) (set! bx6b7@bx595@read-library-source-file bx595@read-library-source-file) (set! bx6b6@bx593@compile-core bx593@compile-core) (set! bx6b5@bx591@make-record-printer bx591@make-record-printer) (set! bx6b4@bx58f@load-serialized-library bx58f@load-serialized-library) (set! bx6b3@bx58d@serialize-library bx58d@serialize-library) (set! bx6b2@bx58b@fasl-load bx58b@fasl-load) (set! bx6b1@bx589@fasl-save bx589@fasl-save) (set! bx6b0@bx587@scm->fasl bx587@scm->fasl) (set! bx6af@bx585@annotation-expression bx585@annotation-expression) (set! bx6ae@bx583@annotation-source bx583@annotation-source) (set! bx6ad@bx581@annotation? bx581@annotation?) (set! bx6ac@bx57f@annotation-stripped bx57f@annotation-stripped) (set! bx6ab@bx57d@read-annotated bx57d@read-annotated) (set! bx6aa@bx57b@library-file-path->cache-path bx57b@library-file-path->cache-path)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bx6c0@current-primitive-locations bx6c2@mutable? bx6c4@rewriter bx6c6@expanded->core bx6c8@compile-core-expr bx6ca@pretty-print bx6cc@compile-core-expr-to-port) (begin (set! bx6c0@current-primitive-locations (bx6b8@bx597@make-parameter (lambda (bx6cd@x) '#f) (lambda (bx6cf@p) bx6cf@p))) (set! bx6c2@mutable? (lambda (bx6d1@x) (or (pair? bx6d1@x) (vector? bx6d1@x) (hashtable? bx6d1@x)))) (set! bx6c4@rewriter (lambda (bx6d3@quote-hack?) ((lambda (bx6d6@f) (begin (set! bx6d6@f (lambda (bx6d7@x) (if (pair? bx6d7@x) ((lambda (bx6d9@t) (if (memv bx6d9@t '(quote)) (if (and bx6d3@quote-hack? (bx6c2@mutable? (cadr bx6d7@x))) ((lambda (bx6db@g) (begin (set-symbol-value! bx6db@g (cadr bx6d7@x)) bx6db@g)) (gensym)) bx6d7@x) (if (memv bx6d9@t '(case-lambda)) (cons 'case-lambda (map (lambda (bx6dd@x) (cons (car bx6dd@x) (map bx6d6@f (cdr bx6dd@x)))) (cdr bx6d7@x))) (if (memv bx6d9@t '(lambda)) (cons* 'lambda (cadr bx6d7@x) (map bx6d6@f (cddr bx6d7@x))) (if (memv bx6d9@t '(letrec)) ((lambda (bx6df@bindings bx6e0@body*) ((lambda (bx6e3@lhs* bx6e4@rhs*) (cons* 'letrec (map list bx6e3@lhs* (map bx6d6@f bx6e4@rhs*)) (map bx6d6@f bx6e0@body*))) (map car bx6df@bindings) (map cadr bx6df@bindings))) (cadr bx6d7@x) (cddr bx6d7@x)) (if (memv bx6d9@t '(letrec*)) ((lambda (bx6e7@bindings bx6e8@body*) ((lambda (bx6eb@lhs* bx6ec@rhs*) (cons* 'letrec* (map list bx6eb@lhs* (map bx6d6@f bx6ec@rhs*)) (map bx6d6@f bx6e8@body*))) (map car bx6e7@bindings) (map cadr bx6e7@bindings))) (cadr bx6d7@x) (cddr bx6d7@x)) (if (memv bx6d9@t '(library-letrec*)) ((lambda (bx6ef@name bx6f0@x) ((lambda (bx6f3@bindings bx6f4@body*) ((lambda (bx6f7@lhs* bx6f8@lhs** bx6f9@rhs*) (cons* 'library-letrec* bx6ef@name (map list bx6f7@lhs* bx6f8@lhs** (map bx6d6@f bx6f9@rhs*)) (map bx6d6@f bx6f4@body*))) (map car bx6f3@bindings) (map cadr bx6f3@bindings) (map caddr bx6f3@bindings))) (cadr bx6f0@x) (cddr bx6f0@x))) (cadr bx6d7@x) (cdr bx6d7@x)) (if (memv bx6d9@t '(begin)) (cons 'begin (map bx6d6@f (cdr bx6d7@x))) (if (memv bx6d9@t '(set!)) (list 'set! (cadr bx6d7@x) (bx6d6@f (caddr bx6d7@x))) (if (memv bx6d9@t '(primitive)) ((lambda (bx6fd@op) ((lambda (bx6ff@t) (if bx6ff@t ((lambda (bx701@loc) bx701@loc) bx6ff@t) bx6fd@op)) ((bx6c0@current-primitive-locations) bx6fd@op))) (cadr bx6d7@x)) (if (memv bx6d9@t '(define)) bx6d7@x (if (list? bx6d7@x) (map bx6d6@f bx6d7@x) (error 'rewrite '"invalid form ~s ~s" bx6d7@x (list? bx6d7@x)))))))))))))) (car bx6d7@x)) bx6d7@x))) bx6d6@f)) '#f))) (set! bx6c6@expanded->core (lambda (bx703@x) ((bx6c4@rewriter '#f) bx703@x))) (set! bx6c8@compile-core-expr (lambda (bx705@x) ((bx6c4@rewriter '#f) bx705@x))) (set! bx6ca@pretty-print write) (set! bx6cc@compile-core-expr-to-port (lambda (bx707@x bx708@p) (bx6ca@pretty-print ((bx6c4@rewriter '#f) bx707@x) bx708@p))) (begin (set! bx711@bx6cc@compile-core-expr-to-port bx6cc@compile-core-expr-to-port) (set! bx710@bx6ca@pretty-print bx6ca@pretty-print) (set! bx70f@bx6c8@compile-core-expr bx6c8@compile-core-expr) (set! bx70e@bx6c6@expanded->core bx6c6@expanded->core) (set! bx70d@bx6c4@rewriter bx6c4@rewriter) (set! bx70c@bx6c2@mutable? bx6c2@mutable?) (set! bx70b@bx6c0@current-primitive-locations bx6c0@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (bx760@make-collection bx762@current-library-collection bx764@rp bx76e@library? bx770@library-id bx772@set-library-id! bx774@library-name bx776@set-library-name! bx778@library-version bx77a@set-library-version! bx77c@library-imp* bx77e@set-library-imp*! bx780@library-vis* bx782@set-library-vis*! bx784@library-inv* bx786@set-library-inv*! bx788@library-subst bx78a@set-library-subst! bx78c@library-env bx78e@set-library-env! bx790@library-visit-state bx792@set-library-visit-state! bx794@library-invoke-state bx796@set-library-invoke-state! bx798@library-visit-code bx79a@set-library-visit-code! bx79c@library-invoke-code bx79e@set-library-invoke-code! bx7a0@library-visible? bx7a2@set-library-visible?! bx7a4@library-source-file-name bx7a6@set-library-source-file-name! bx7a8@dummy bx7aa@find-dependencies bx7ac@find-library-by bx7ae@library-path bx7b0@library-extensions bx7b2@library-name->file-name bx7b4@file-locator bx7b6@serialize-all bx7b8@current-precompiled-library-loader bx7ba@try-load-from-file bx7bc@library-loader bx7be@current-library-expander bx7c0@external-pending-libraries bx7c2@find-external-library bx7c4@find-library-by-name bx7c6@library-exists? bx7c8@find-library-by-spec/die bx7ca@label->binding-table bx7cc@install-library-record bx7ce@install-library bx7d0@imported-label->binding bx7d2@invoke-library bx7d4@visit-library bx7d6@invoke-library-by-spec bx7d8@installed-libraries bx7da@library-spec) (begin (set! bx760@make-collection (lambda () ((lambda (bx7db@set) ((lambda (bx7de@set-cons) (begin (set! bx7de@set-cons (lambda (bx7e3@x bx7e4@ls) (if (memq bx7e3@x bx7e4@ls) bx7e4@ls (cons bx7e3@x bx7e4@ls)))) (lambda bx7e1 ((lambda (bx7e2) (if (= bx7e2 '0) (apply (lambda () bx7db@set) bx7e1) (if (= bx7e2 '1) (apply (lambda (bx7df@x) (set! bx7db@set (bx7de@set-cons bx7df@x bx7db@set))) bx7e1) (error 'apply '"invalid arg count")))) (length bx7e1))))) '#f)) '()))) (set! bx762@current-library-collection (bx6b8@bx597@make-parameter (bx760@make-collection) (lambda (bx7e7@x) (begin (if (not (procedure? bx7e7@x)) (assertion-violation 'current-library-collection '"not a procedure" bx7e7@x) (void)) bx7e7@x)))) (set! bx764@rp (bx6b5@bx591@make-record-printer 'library (lambda (bx7e9@x bx7ea@p bx7eb@wr) (begin (if (not (bx76e@library? bx7e9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bx778@library-version bx7e9@x)) (bx774@library-name bx7e9@x) (append (bx774@library-name bx7e9@x) (list (bx778@library-version bx7e9@x))))) bx7ea@p))))) (set! bx76e@library? (lambda (bx7ef@x) (and (simple-struct? bx7ef@x) (eq? (simple-struct-name bx7ef@x) 'library)))) (set! bx770@library-id (lambda (bx7f1@x) (simple-struct-ref bx7f1@x '0))) (set! bx772@set-library-id! (lambda (bx7f3@x bx7f4@val) (simple-struct-set! bx7f3@x '0 bx7f4@val))) (set! bx774@library-name (lambda (bx7f7@x) (simple-struct-ref bx7f7@x '1))) (set! bx776@set-library-name! (lambda (bx7f9@x bx7fa@val) (simple-struct-set! bx7f9@x '1 bx7fa@val))) (set! bx778@library-version (lambda (bx7fd@x) (simple-struct-ref bx7fd@x '2))) (set! bx77a@set-library-version! (lambda (bx7ff@x bx800@val) (simple-struct-set! bx7ff@x '2 bx800@val))) (set! bx77c@library-imp* (lambda (bx803@x) (simple-struct-ref bx803@x '3))) (set! bx77e@set-library-imp*! (lambda (bx805@x bx806@val) (simple-struct-set! bx805@x '3 bx806@val))) (set! bx780@library-vis* (lambda (bx809@x) (simple-struct-ref bx809@x '4))) (set! bx782@set-library-vis*! (lambda (bx80b@x bx80c@val) (simple-struct-set! bx80b@x '4 bx80c@val))) (set! bx784@library-inv* (lambda (bx80f@x) (simple-struct-ref bx80f@x '5))) (set! bx786@set-library-inv*! (lambda (bx811@x bx812@val) (simple-struct-set! bx811@x '5 bx812@val))) (set! bx788@library-subst (lambda (bx815@x) (simple-struct-ref bx815@x '6))) (set! bx78a@set-library-subst! (lambda (bx817@x bx818@val) (simple-struct-set! bx817@x '6 bx818@val))) (set! bx78c@library-env (lambda (bx81b@x) (simple-struct-ref bx81b@x '7))) (set! bx78e@set-library-env! (lambda (bx81d@x bx81e@val) (simple-struct-set! bx81d@x '7 bx81e@val))) (set! bx790@library-visit-state (lambda (bx821@x) (simple-struct-ref bx821@x '8))) (set! bx792@set-library-visit-state! (lambda (bx823@x bx824@val) (simple-struct-set! bx823@x '8 bx824@val))) (set! bx794@library-invoke-state (lambda (bx827@x) (simple-struct-ref bx827@x '9))) (set! bx796@set-library-invoke-state! (lambda (bx829@x bx82a@val) (simple-struct-set! bx829@x '9 bx82a@val))) (set! bx798@library-visit-code (lambda (bx82d@x) (simple-struct-ref bx82d@x '10))) (set! bx79a@set-library-visit-code! (lambda (bx82f@x bx830@val) (simple-struct-set! bx82f@x '10 bx830@val))) (set! bx79c@library-invoke-code (lambda (bx833@x) (simple-struct-ref bx833@x '11))) (set! bx79e@set-library-invoke-code! (lambda (bx835@x bx836@val) (simple-struct-set! bx835@x '11 bx836@val))) (set! bx7a0@library-visible? (lambda (bx839@x) (simple-struct-ref bx839@x '12))) (set! bx7a2@set-library-visible?! (lambda (bx83b@x bx83c@val) (simple-struct-set! bx83b@x '12 bx83c@val))) (set! bx7a4@library-source-file-name (lambda (bx83f@x) (simple-struct-ref bx83f@x '13))) (set! bx7a6@set-library-source-file-name! (lambda (bx841@x bx842@val) (simple-struct-set! bx841@x '13 bx842@val))) (set! bx7a8@dummy '3) (set! bx7aa@find-dependencies (lambda (bx845@ls) (if (null? bx845@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bx7ac@find-library-by (lambda (bx847@pred) ((letrec ((bx849@f (lambda (bx84b@ls) (if (null? bx84b@ls) '#f (if (bx847@pred (car bx84b@ls)) (car bx84b@ls) (bx849@f (cdr bx84b@ls))))))) bx849@f) ((bx762@current-library-collection))))) (set! bx7ae@library-path (bx6b8@bx597@make-parameter '(".") (lambda (bx84d@x) (if (and (list? bx84d@x) (for-all string? bx84d@x)) (map (lambda (bx84f@x) bx84f@x) bx84d@x) (assertion-violation 'library-path '"not a list of strings" bx84d@x))))) (set! bx7b0@library-extensions (bx6b8@bx597@make-parameter '(".sls" ".ss" ".scm") (lambda (bx851@x) (if (and (list? bx851@x) (for-all string? bx851@x)) (map (lambda (bx853@x) bx853@x) bx851@x) (assertion-violation 'library-extensions '"not a list of strings" bx851@x))))) (set! bx7b2@library-name->file-name (lambda (bx855@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bx85b@bx858 bx85c@bx85a) ((lambda (bx85f@extract bx860@p) ((lambda (bx864@display-hex) (begin (set! bx864@display-hex (lambda (bx86d@n) (if (<= '0 bx86d@n '9) (display bx86d@n bx860@p) (display (integer->char (+ (char->integer '#\a) (- bx86d@n '10))) bx860@p)))) (begin ((letrec ((bx865@f (lambda (bx867@ls) (if (not (null? bx867@ls)) (begin (display '"/" bx860@p) (for-each (lambda (bx869@c) (if (or (char<=? '#\a bx869@c '#\z) (char<=? '#\A bx869@c '#\Z) (char<=? '#\0 bx869@c '#\9) (memv bx869@c '(#\- #\. #\_ #\~))) (display bx869@c bx860@p) (begin (display '"%" bx860@p) ((lambda (bx86b@n) (begin (bx864@display-hex (quotient bx86b@n '16)) (bx864@display-hex (remainder bx86b@n '16)))) (char->integer bx869@c))))) (string->list (symbol->string (car bx867@ls)))) (bx865@f (cdr bx867@ls))) (void))))) bx865@f) bx855@x) (bx85f@extract)))) '#f)) bx85c@bx85a bx85b@bx858))))) (set! bx7b4@file-locator (bx6b8@bx597@make-parameter (lambda (bx86f@x) ((lambda (bx871@str) ((letrec ((bx873@f (lambda (bx875@ls bx876@exts bx877@failed-list) (if (null? bx875@ls) ((lambda () ((lambda (bx883@bx87e bx885@bx880 bx887@bx87f bx88a@bx87d bx88c@make-library-resolution-condition bx88e@bx87b bx890@bx87c bx892@library-resolution-condition? bx894@condition-library bx896@condition-files) (begin (set! bx883@bx87e (make-record-type-descriptor '&library-resolution bx2b2d@bx2874@&condition-rtd 'bx881 '#f '#f '#((immutable library) (immutable files)))) (set! bx885@bx880 '#f) (set! bx887@bx87f (make-record-constructor-descriptor bx883@bx87e bx2b2e@bx2876@&condition-rcd bx885@bx880)) (set! bx88a@bx87d (record-predicate bx883@bx87e)) (set! bx88c@make-library-resolution-condition (record-constructor bx887@bx87f)) (set! bx88e@bx87b (record-accessor bx883@bx87e '0)) (set! bx890@bx87c (record-accessor bx883@bx87e '1)) (set! bx892@library-resolution-condition? (condition-predicate bx883@bx87e)) (set! bx894@condition-library (condition-accessor bx883@bx87e bx88e@bx87b)) (set! bx896@condition-files (condition-accessor bx883@bx87e bx890@bx87c)) (raise (condition (bx2b4d@bx290e@make-error) (bx2b6f@bx296a@make-who-condition 'expander) (bx2b33@bx28cb@make-message-condition '"cannot locate library in library-path") (bx88c@make-library-resolution-condition bx86f@x (reverse bx877@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? bx876@exts) (bx873@f (cdr bx875@ls) (bx7b0@library-extensions) bx877@failed-list) ((lambda (bx897@name) (if (file-exists? bx897@name) bx897@name (bx873@f bx875@ls (cdr bx876@exts) (cons bx897@name bx877@failed-list)))) (string-append (car bx875@ls) bx871@str (car bx876@exts)))))))) bx873@f) (bx7ae@library-path) (bx7b0@library-extensions) '())) (bx7b2@library-name->file-name bx86f@x))) (lambda (bx899@f) (if (procedure? bx899@f) bx899@f (assertion-violation 'file-locator '"not a procedure" bx899@f))))) (set! bx7b6@serialize-all (lambda (bx89b@serialize bx89c@compile) ((lambda (bx8a0@library-desc) (begin (set! bx8a0@library-desc (lambda (bx8a3@x) (list (bx770@library-id bx8a3@x) (bx774@library-name bx8a3@x)))) (for-each (lambda (bx8a1@x) (if (bx7a4@library-source-file-name bx8a1@x) (bx89b@serialize (bx7a4@library-source-file-name bx8a1@x) (list (bx770@library-id bx8a1@x) (bx774@library-name bx8a1@x) (bx778@library-version bx8a1@x) (map bx8a0@library-desc (bx77c@library-imp* bx8a1@x)) (map bx8a0@library-desc (bx780@library-vis* bx8a1@x)) (map bx8a0@library-desc (bx784@library-inv* bx8a1@x)) (bx788@library-subst bx8a1@x) (bx78c@library-env bx8a1@x) (bx89c@compile (bx798@library-visit-code bx8a1@x)) (bx89c@compile (bx79c@library-invoke-code bx8a1@x)) (bx7a0@library-visible? bx8a1@x))) (void))) ((bx762@current-library-collection))))) '#f))) (set! bx7b8@current-precompiled-library-loader (bx6b8@bx597@make-parameter (lambda (bx8a5@filename bx8a6@sk) '#f))) (set! bx7ba@try-load-from-file (lambda (bx8a9@filename) ((bx7b8@current-precompiled-library-loader) bx8a9@filename (lambda bx8cf ((lambda (bx8d0) (if (= bx8d0 '11) (apply (lambda (bx8ab@id bx8ac@name bx8ad@ver bx8ae@imp* bx8af@vis* bx8b0@inv* bx8b1@exp-subst bx8b2@exp-env bx8b3@visit-proc bx8b4@invoke-proc bx8b5@visible?) ((letrec ((bx8c1@f (lambda (bx8c3@deps) (if (null? bx8c3@deps) (begin (bx7ce@install-library bx8ab@id bx8ac@name bx8ad@ver bx8ae@imp* bx8af@vis* bx8b0@inv* bx8b1@exp-subst bx8b2@exp-env bx8b3@visit-proc bx8b4@invoke-proc '#f '#f bx8b5@visible? '#f) '#t) ((lambda (bx8c5@d) ((lambda (bx8c7@label bx8c8@dname) ((lambda (bx8cb@l) (if (and (bx76e@library? bx8cb@l) (eq? bx8c7@label (bx770@library-id bx8cb@l))) (bx8c1@f (cdr bx8c3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" bx8ac@name bx8c8@dname bx8a9@filename bx8cb@l bx8c7@label (bx770@library-id bx8cb@l)) '#f))) (bx7c4@find-library-by-name bx8c8@dname))) (car bx8c5@d) (cadr bx8c5@d))) (car bx8c3@deps)))))) bx8c1@f) (append bx8ae@imp* bx8af@vis* bx8b0@inv*))) bx8cf) (if (>= bx8d0 '0) (apply (lambda bx8cd@others '#f) bx8cf) (error 'apply '"invalid arg count")))) (length bx8cf)))))) (set! bx7bc@library-loader (bx6b8@bx597@make-parameter (lambda (bx8d1@x) ((lambda (bx8d3@file-name) (if (not bx8d3@file-name) (assertion-violation '#f '"cannot file library" bx8d1@x) (or (bx7ba@try-load-from-file bx8d3@file-name) ((bx7be@current-library-expander) (bx6b7@bx595@read-library-source-file bx8d3@file-name) bx8d3@file-name (lambda (bx8d5@name) (if (not (fast-equal? bx8d5@name bx8d1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bx8db@bx8d8 bx8dc@bx8da) ((lambda (bx8df@e bx8e0@p) (begin (display '"expected to find library " bx8e0@p) (write bx8d1@x bx8e0@p) (display '" in file " bx8e0@p) (display bx8d3@file-name bx8e0@p) (display '", found " bx8e0@p) (write bx8d5@name bx8e0@p) (display '" instead" bx8e0@p) (bx8df@e))) bx8dc@bx8da bx8db@bx8d8)))) (void))))))) ((bx7b4@file-locator) bx8d1@x))) (lambda (bx8e3@f) (if (procedure? bx8e3@f) bx8e3@f (assertion-violation 'library-locator '"not a procedure" bx8e3@f))))) (set! bx7be@current-library-expander (bx6b8@bx597@make-parameter (lambda (bx8e5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bx8e7@f) (if (procedure? bx8e7@f) bx8e7@f (assertion-violation 'library-expander '"not a procedure" bx8e7@f))))) (set! bx7c0@external-pending-libraries (bx6b8@bx597@make-parameter '())) (set! bx7c2@find-external-library (lambda (bx8e9@name) (begin (if (member bx8e9@name (bx7c0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bx8e9@name) (void)) ((lambda (bx8ef@bx8ec bx8f0@bx8ee) ((lambda (bx8f3@swap) (dynamic-wind bx8f3@swap (lambda () (begin ((bx7bc@library-loader) bx8e9@name) (or (bx7ac@find-library-by (lambda (bx8f5@x) (fast-equal? (bx774@library-name bx8f5@x) bx8e9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bx8e9@name)))) bx8f3@swap)) (lambda () ((lambda (bx8f7@t) (begin (bx8ef@bx8ec bx8f0@bx8ee) (set! bx8f0@bx8ee bx8f7@t))) (bx8ef@bx8ec))))) bx7c0@external-pending-libraries (cons bx8e9@name (bx7c0@external-pending-libraries)))))) (set! bx7c4@find-library-by-name (lambda (bx8f9@name) (or (bx7ac@find-library-by (lambda (bx8fb@x) (fast-equal? (bx774@library-name bx8fb@x) bx8f9@name))) (bx7c2@find-external-library bx8f9@name)))) (set! bx7c6@library-exists? (lambda (bx8fd@name) (and (bx7ac@find-library-by (lambda (bx8ff@x) (fast-equal? (bx774@library-name bx8ff@x) bx8fd@name))) '#t))) (set! bx7c8@find-library-by-spec/die (lambda (bx901@spec) ((lambda (bx903@id) (or (bx7ac@find-library-by (lambda (bx905@x) (eq? bx903@id (bx770@library-id bx905@x)))) (assertion-violation '#f '"cannot find library with required spec" bx901@spec))) (car bx901@spec)))) (set! bx7ca@label->binding-table (make-eq-hashtable)) (set! bx7cc@install-library-record (lambda (bx907@lib) (begin ((lambda (bx909@exp-env) (for-each (lambda (bx90b@x) ((lambda (bx90d@label bx90e@binding) ((lambda (bx911@binding) (begin (if (hashtable-ref bx7ca@label->binding-table bx90d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bx90d@label (hashtable-ref bx7ca@label->binding-table bx90d@label '#f) bx911@binding) (exit)) (void)) (hashtable-set! bx7ca@label->binding-table bx90d@label bx911@binding))) ((lambda (bx913@t) (if (memv bx913@t '(global)) (cons 'global (cons bx907@lib (cdr bx90e@binding))) (if (memv bx913@t '(global-macro)) (cons 'global-macro (cons bx907@lib (cdr bx90e@binding))) (if (memv bx913@t '(global-macro!)) (cons 'global-macro! (cons bx907@lib (cdr bx90e@binding))) bx90e@binding)))) (car bx90e@binding)))) (car bx90b@x) (cdr bx90b@x))) bx909@exp-env)) (bx78c@library-env bx907@lib)) ((bx762@current-library-collection) bx907@lib)))) (set! bx7ce@install-library (lambda (bx915@id bx916@name bx917@ver bx918@imp* bx919@vis* bx91a@inv* bx91b@exp-subst bx91c@exp-env bx91d@visit-proc bx91e@invoke-proc bx91f@visit-code bx920@invoke-code bx921@visible? bx922@source-file-name) ((lambda (bx931@imp-lib* bx932@vis-lib* bx933@inv-lib*) (begin (if (not (and (symbol? bx915@id) (list? bx916@name) (list? bx917@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bx915@id bx916@name bx917@ver) (void)) (if (bx7c6@library-exists? bx916@name) (assertion-violation 'install-library '"library is already installed" bx916@name) (void)) ((lambda (bx937@lib) (bx7cc@install-library-record bx937@lib)) (make-simple-struct 'library '15 (list bx915@id bx916@name bx917@ver bx931@imp-lib* bx932@vis-lib* bx933@inv-lib* bx91b@exp-subst bx91c@exp-env bx91d@visit-proc bx91e@invoke-proc bx91f@visit-code bx920@invoke-code bx921@visible? bx922@source-file-name))))) (map bx7c8@find-library-by-spec/die bx918@imp*) (map bx7c8@find-library-by-spec/die bx919@vis*) (map bx7c8@find-library-by-spec/die bx91a@inv*)))) (set! bx7d0@imported-label->binding (lambda (bx939@lab) (hashtable-ref bx7ca@label->binding-table bx939@lab '#f))) (set! bx7d2@invoke-library (lambda (bx93b@lib) ((lambda (bx93d@invoke) (if (procedure? bx93d@invoke) (begin (bx796@set-library-invoke-state! bx93b@lib (lambda () (assertion-violation 'invoke '"circularity detected" bx93b@lib))) (for-each bx7d2@invoke-library (bx784@library-inv* bx93b@lib)) (bx796@set-library-invoke-state! bx93b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bx93b@lib))) (bx93d@invoke) (bx796@set-library-invoke-state! bx93b@lib '#t)) (void))) (bx794@library-invoke-state bx93b@lib)))) (set! bx7d4@visit-library (lambda (bx93f@lib) ((lambda (bx941@visit) (if (procedure? bx941@visit) (begin (bx792@set-library-visit-state! bx93f@lib (lambda () (assertion-violation 'visit '"circularity detected" bx93f@lib))) (for-each bx7d2@invoke-library (bx780@library-vis* bx93f@lib)) (bx792@set-library-visit-state! bx93f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bx93f@lib))) (bx941@visit) (bx792@set-library-visit-state! bx93f@lib '#t)) (void))) (bx790@library-visit-state bx93f@lib)))) (set! bx7d6@invoke-library-by-spec (lambda (bx943@spec) (bx7d2@invoke-library (bx7c8@find-library-by-spec/die bx943@spec)))) (set! bx7d8@installed-libraries (lambda bx94b ((lambda (bx94c) (if (= bx94c '1) (apply (lambda (bx945@all?) ((letrec ((bx947@f (lambda (bx949@ls) (if (null? bx949@ls) '() (if (or bx945@all? (bx7a0@library-visible? (car bx949@ls))) (cons (car bx949@ls) (bx947@f (cdr bx949@ls))) (bx947@f (cdr bx949@ls))))))) bx947@f) ((bx762@current-library-collection)))) bx94b) (if (= bx94c '0) (apply (lambda () (bx7d8@installed-libraries '#f)) bx94b) (error 'apply '"invalid arg count")))) (length bx94b)))) (set! bx7da@library-spec (lambda (bx94d@x) (begin (if (not (bx76e@library? bx94d@x)) (assertion-violation 'library-spec '"not a library" bx94d@x) (void)) (list (bx770@library-id bx94d@x) (bx774@library-name bx94d@x) (bx778@library-version bx94d@x))))) (begin (set! bx988@bx7da@library-spec bx7da@library-spec) (set! bx987@bx7d8@installed-libraries bx7d8@installed-libraries) (set! bx986@bx7d6@invoke-library-by-spec bx7d6@invoke-library-by-spec) (set! bx985@bx7d4@visit-library bx7d4@visit-library) (set! bx984@bx7d2@invoke-library bx7d2@invoke-library) (set! bx983@bx7d0@imported-label->binding bx7d0@imported-label->binding) (set! bx982@bx7ce@install-library bx7ce@install-library) (set! bx981@bx7cc@install-library-record bx7cc@install-library-record) (set! bx980@bx7ca@label->binding-table bx7ca@label->binding-table) (set! bx97f@bx7c8@find-library-by-spec/die bx7c8@find-library-by-spec/die) (set! bx97e@bx7c6@library-exists? bx7c6@library-exists?) (set! bx97d@bx7c4@find-library-by-name bx7c4@find-library-by-name) (set! bx97c@bx7c2@find-external-library bx7c2@find-external-library) (set! bx97b@bx7c0@external-pending-libraries bx7c0@external-pending-libraries) (set! bx97a@bx7be@current-library-expander bx7be@current-library-expander) (set! bx979@bx7bc@library-loader bx7bc@library-loader) (set! bx978@bx7ba@try-load-from-file bx7ba@try-load-from-file) (set! bx977@bx7b8@current-precompiled-library-loader bx7b8@current-precompiled-library-loader) (set! bx976@bx7b6@serialize-all bx7b6@serialize-all) (set! bx975@bx7b4@file-locator bx7b4@file-locator) (set! bx974@bx7b2@library-name->file-name bx7b2@library-name->file-name) (set! bx973@bx7b0@library-extensions bx7b0@library-extensions) (set! bx972@bx7ae@library-path bx7ae@library-path) (set! bx971@bx7ac@find-library-by bx7ac@find-library-by) (set! bx970@bx7aa@find-dependencies bx7aa@find-dependencies) (set! bx96f@bx7a8@dummy bx7a8@dummy) (set! bx96e@bx7a6@set-library-source-file-name! bx7a6@set-library-source-file-name!) (set! bx96d@bx7a4@library-source-file-name bx7a4@library-source-file-name) (set! bx96c@bx7a2@set-library-visible?! bx7a2@set-library-visible?!) (set! bx96b@bx7a0@library-visible? bx7a0@library-visible?) (set! bx96a@bx79e@set-library-invoke-code! bx79e@set-library-invoke-code!) (set! bx969@bx79c@library-invoke-code bx79c@library-invoke-code) (set! bx968@bx79a@set-library-visit-code! bx79a@set-library-visit-code!) (set! bx967@bx798@library-visit-code bx798@library-visit-code) (set! bx966@bx796@set-library-invoke-state! bx796@set-library-invoke-state!) (set! bx965@bx794@library-invoke-state bx794@library-invoke-state) (set! bx964@bx792@set-library-visit-state! bx792@set-library-visit-state!) (set! bx963@bx790@library-visit-state bx790@library-visit-state) (set! bx962@bx78e@set-library-env! bx78e@set-library-env!) (set! bx961@bx78c@library-env bx78c@library-env) (set! bx960@bx78a@set-library-subst! bx78a@set-library-subst!) (set! bx95f@bx788@library-subst bx788@library-subst) (set! bx95e@bx786@set-library-inv*! bx786@set-library-inv*!) (set! bx95d@bx784@library-inv* bx784@library-inv*) (set! bx95c@bx782@set-library-vis*! bx782@set-library-vis*!) (set! bx95b@bx780@library-vis* bx780@library-vis*) (set! bx95a@bx77e@set-library-imp*! bx77e@set-library-imp*!) (set! bx959@bx77c@library-imp* bx77c@library-imp*) (set! bx958@bx77a@set-library-version! bx77a@set-library-version!) (set! bx957@bx778@library-version bx778@library-version) (set! bx956@bx776@set-library-name! bx776@set-library-name!) (set! bx955@bx774@library-name bx774@library-name) (set! bx954@bx772@set-library-id! bx772@set-library-id!) (set! bx953@bx770@library-id bx770@library-id) (set! bx952@bx76e@library? bx76e@library?) (set! bx951@bx764@rp bx764@rp) (set! bx950@bx762@current-library-collection bx762@current-library-collection) (set! bx94f@bx760@make-collection bx760@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bx98c@build-global-define bx9fd@build-lambda bx9ff@build-case-lambda bxa01@build-let bxa2f@build-sequence bxa31@build-void bxa33@build-letrec bxa35@build-letrec* bxa37@build-library-letrec* bxa39@build-receive) (begin (set! bx98c@build-global-define (lambda (bxa3a@x) (bxa31@build-void))) (set! bx9fd@build-lambda (lambda (bxa3c@ae bxa3d@vars bxa3e@exp) (list 'lambda bxa3d@vars bxa3e@exp))) (set! bx9ff@build-case-lambda (lambda (bxa42@ae bxa43@vars* bxa44@exp*) ((lambda (bxa49@build-error bxa4b@build-pred bxa4d@build-apply bxa4f@expand-case-lambda) (begin (set! bxa49@build-error (lambda (bxa80@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! bxa4b@build-pred (lambda (bxa68@ae bxa69@n bxa6a@vars) (call-with-values (lambda () ((letrec ((bxa72@f (lambda (bxa74@vars bxa75@count) (if (pair? bxa74@vars) (bxa72@f (cdr bxa74@vars) (+ bxa75@count '1)) (if (null? bxa74@vars) (values bxa75@count '=) (values bxa75@count '>=)))))) bxa72@f) bxa6a@vars '0)) (lambda (bxa78@bxa6f bxa79@bxa71) ((lambda (bxa7c@pred bxa7d@count) (list (list 'primitive bxa7c@pred) bxa69@n (list 'quote bxa7d@count))) bxa79@bxa71 bxa78@bxa6f))))) (set! bxa4d@build-apply (lambda (bxa60@ae bxa61@g bxa62@vars bxa63@exp) (list '(primitive apply) (bx9fd@build-lambda bxa60@ae bxa62@vars bxa63@exp) bxa61@g))) (set! bxa4f@expand-case-lambda (lambda (bxa50@ae bxa51@vars bxa52@exp*) ((lambda (bxa56@g bxa57@n) (list 'lambda bxa56@g (bxa01@build-let bxa50@ae (list bxa57@n) (list (list '(primitive length) bxa56@g)) ((letrec ((bxa5a@f (lambda (bxa5c@vars* bxa5d@exp*) (if (null? bxa5c@vars*) (bxa49@build-error bxa50@ae) (list 'if (bxa4b@build-pred bxa50@ae bxa57@n (car bxa5c@vars*)) (bxa4d@build-apply bxa50@ae bxa56@g (car bxa5c@vars*) (car bxa5d@exp*)) (bxa5a@f (cdr bxa5c@vars*) (cdr bxa5d@exp*))))))) bxa5a@f) bxa43@vars* bxa52@exp*)))) (gensym) (gensym)))) (if (= (length bxa44@exp*) '1) (bx9fd@build-lambda bxa42@ae (car bxa43@vars*) (car bxa44@exp*)) (bxa4f@expand-case-lambda bxa42@ae bxa43@vars* bxa44@exp*)))) '#f '#f '#f '#f))) (set! bxa01@build-let (lambda (bxa82@ae bxa83@lhs* bxa84@rhs* bxa85@body) (cons (bx9fd@build-lambda bxa82@ae bxa83@lhs* bxa85@body) bxa84@rhs*))) (set! bxa2f@build-sequence (lambda (bxa8a@ae bxa8b@exps) ((letrec ((bxa8e@loop (lambda (bxa90@exps) (if (null? (cdr bxa90@exps)) (car bxa90@exps) (if (equal? (car bxa90@exps) (bxa31@build-void)) (bxa8e@loop (cdr bxa90@exps)) (cons 'begin bxa90@exps)))))) bxa8e@loop) bxa8b@exps))) (set! bxa31@build-void (lambda () '((primitive void)))) (set! bxa33@build-letrec (lambda (bxa92@ae bxa93@vars bxa94@val-exps bxa95@body-exp) (if (null? bxa93@vars) bxa95@body-exp (list 'letrec (map list bxa93@vars bxa94@val-exps) bxa95@body-exp)))) (set! bxa35@build-letrec* (lambda (bxa9a@ae bxa9b@vars bxa9c@val-exps bxa9d@body-exp) (if (null? bxa9b@vars) bxa9d@body-exp (bxa01@build-let bxa9a@ae bxa9b@vars (map (lambda (bxaa2@x) (list 'quote '#f)) bxa9b@vars) (bxa2f@build-sequence bxa9a@ae (append (map (lambda (bxaa4@lhs bxaa5@rhs) (list 'set! bxaa4@lhs bxaa5@rhs)) bxa9b@vars bxa9c@val-exps) (list bxa9d@body-exp))))))) (set! bxa37@build-library-letrec* (lambda (bxaa8@ae bxaa9@name bxaaa@vars bxaab@locs bxaac@val-exps bxaad@body-exp) (list 'library-letrec* bxaa9@name (map list bxaaa@vars bxaab@locs bxaac@val-exps) bxaad@body-exp))) (set! bxa39@build-receive (lambda (bxab4@ae bxab5@vars bxab6@producer bxab7@body*) (begin (display '"************** in ") (cons 'receive (cons bxab5@vars (cons bxab6@producer bxab7@body*)))))) (begin (set! bxac5@bxa39@build-receive bxa39@build-receive) (set! bxac4@bxa37@build-library-letrec* bxa37@build-library-letrec*) (set! bxac3@bxa35@build-letrec* bxa35@build-letrec*) (set! bxac2@bxa33@build-letrec bxa33@build-letrec) (set! bxac1@bxa31@build-void bxa31@build-void) (set! bxac0@bxa2f@build-sequence bxa2f@build-sequence) (set! bxabf@bxa01@build-let bxa01@build-let) (set! bxabe@bx9ff@build-case-lambda bx9ff@build-case-lambda) (set! bxabd@bx9fd@build-lambda bx9fd@build-lambda) (set! bxabc@bx98c@build-global-define bx98c@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bxad4@file-options-macro bxad6@set-cons bxad8@set-union bxadd@top-mark* bxadf@top-marked? bxae1@gen-lexical bxae3@gen-global bxae5@gen-label bxae7@gen-top-level-label bxae9@gen-define-label+loc bxaeb@gen-define-label bxaf5@rib? bxaf7@rib-sym* bxaf9@set-rib-sym*! bxafb@rib-mark** bxafd@set-rib-mark**! bxaff@rib-label* bxb01@set-rib-label*! bxb03@rib-sealed/freq bxb05@set-rib-sealed/freq! bxb07@rib-cache bxb09@set-rib-cache! bxb0b@dummy bxb0d@make-empty-rib bxb0f@extend-rib! bxb11@extend-rib/nc! bxb13@make-rib-map bxb15@seal-rib! bxb17@unseal-rib! bxb19@make-full-rib bxb1b@rp bxb25@stx? bxb27@stx-expr bxb29@set-stx-expr! bxb2b@stx-mark* bxb2d@set-stx-mark*! bxb2f@stx-subst* bxb31@set-stx-subst*! bxb33@stx-ae* bxb35@set-stx-ae*! bxb37@dummy bxb39@datum->stx bxb3b@gen-mark bxb3d@anti-mark bxb3f@anti-mark? bxb41@mkstx bxb43@add-mark bxb45@add-subst bxb47@syntax-kind? bxb49@syntax-vector->list bxb4b@syntax-pair? bxb4d@syntax-vector? bxb4f@syntax-null? bxb51@syntax-list? bxb53@syntax-car bxb55@syntax-cdr bxb57@syntax->list bxb59@id? bxb5b@id->sym bxb5d@bound-id=? bxb5f@free-id=? bxb61@valid-bound-ids? bxb63@distinct-bound-ids? bxb65@bound-id-member? bxb67@self-evaluating? bxb69@strip-annotations bxb6b@strip bxb6d@stx->datum bxb6f@id->label bxb71@label->binding bxb73@make-binding bxb75@binding-type bxb77@binding-value bxb79@raise-unbound-error bxb7b@syntax-type bxb89@sanitize-binding bxb8b@make-variable-transformer bxb8d@variable-transformer? bxb8f@variable-transformer-procedure bxb91@make-eval-transformer bxce2@parse-define bxce4@parse-define-syntax bxce6@scheme-stx-hashtable bxce8@scheme-stx bxcea@lexical-var bxcec@lexical-mutable? bxcee@set-lexical-mutable! bxcf0@add-lexical bxcf2@add-lexicals bxcf4@letrec-helper bxcf6@letrec-transformer bxcf8@letrec*-transformer bxcfa@fluid-let-syntax-transformer bxcfc@type-descriptor-transformer bxcfe@record-type-descriptor-transformer bxd00@record-constructor-descriptor-transformer bxd02@when-macro bxd04@unless-macro bxd06@if-transformer bxd08@and-transformer bxd0a@or-transformer bxd0c@case-macro bxd0e@quote-transformer bxd10@case-lambda-transformer bxd12@lambda-transformer bxd14@bless bxd16@with-syntax-macro bxd18@invalid-fmls-error bxd1a@let-macro bxd1c@let-values-macro bxd1e@let*-values-macro bxd20@trace-lambda-macro bxd22@trace-define-macro bxd24@trace-define-syntax-macro bxd26@trace-let/rec-syntax bxd28@trace-let-syntax-macro bxd2a@trace-letrec-syntax-macro bxd2c@guard-macro bxd2e@define-enumeration-macro bxd30@time-macro bxd32@delay-macro bxd34@assert-macro bxd36@endianness-macro bxd38@identifier-syntax-macro bxd3a@do-macro bxd3c@let*-macro bxd3e@or-macro bxd40@and-macro bxd42@cond-macro bxd44@do-include bxd46@include-macro bxd48@include-into-macro bxd4a@syntax-rules-macro bxd4c@quasiquote-macro bxd4e@quasisyntax-macro bxd50@define-struct-macro bxd52@define-record-type-macro bxd54@define-condition-type-macro bxd56@incorrect-usage-macro bxd58@parameterize-macro bxd5a@foreign-call-transformer bxd5c@convert-pattern bxd5e@syntax-dispatch bxd60@ellipsis? bxd62@underscore? bxd64@verify-literals bxd66@syntax-case-transformer bxd68@ellipsis-map bxd6a@syntax-transformer bxd6c@core-macro-transformer bxd6e@symbol-macro bxd70@macro-transformer bxd72@local-macro-transformer bxd74@do-macro-call bxd76@chi-macro bxd78@chi-local-macro bxd7a@chi-global-macro bxd7c@chi-expr* bxd7e@chi-application bxd80@chi-expr bxd82@chi-set! bxd84@verify-formals bxd86@chi-lambda-clause bxd88@chi-lambda-clause* bxd8a@chi-defun bxd8c@chi-rhs bxd8e@expand-interaction-rhs*/init* bxd90@chi-rhs* bxd92@find-bound=? bxd94@find-dups bxd96@chi-internal bxd98@parse-module bxda2@module-interface? bxda4@module-interface-first-mark bxda6@set-module-interface-first-mark! bxda8@module-interface-exp-id-vec bxdaa@set-module-interface-exp-id-vec! bxdac@module-interface-exp-lab-vec bxdae@set-module-interface-exp-lab-vec! bxdb0@dummy bxdb2@module-interface-exp-id* bxdb4@chi-internal-module bxdb6@chi-body* bxdb8@expand-transformer bxdba@parse-exports bxdbc@parse-library-name bxdbe@parse-library bxdc0@parse-import-spec* bxdc2@make-top-rib bxdc4@make-collector bxdc6@inv-collector bxdc8@vis-collector bxdca@imp-collector bxdcc@chi-library-internal bxdce@chi-interaction-expr bxdd0@library-body-expander bxdd2@core-library-expander bxdd4@parse-top-level-program bxdd6@top-level-expander bxdd8@rp bxde2@env? bxde4@env-names bxde6@set-env-names! bxde8@env-labels bxdea@set-env-labels! bxdec@env-itc bxdee@set-env-itc! bxdf0@dummy bxdf2@rp bxdfc@interaction-env? bxdfe@interaction-env-rib bxe00@set-interaction-env-rib! bxe02@interaction-env-r bxe04@set-interaction-env-r! bxe06@interaction-env-locs bxe08@set-interaction-env-locs! bxe0a@dummy bxe0c@interaction-environment-symbols bxe0e@environment-bindings bxe10@parse-binding bxe12@environment? bxe14@environment-symbols bxe16@environment bxe18@null-environment bxe1a@scheme-report-environment bxe1c@expand bxe1e@eval bxe20@library-expander bxe22@boot-library-expand bxe24@rev-map-append bxe26@build-exports bxe28@make-export-subst bxe2a@make-export-env/macros bxe2c@generate-temporaries bxe2e@free-identifier=? bxe30@bound-identifier=? bxe32@make-source-condition bxe34@extract-position-condition bxe36@expression-position bxe38@assertion-error bxe3a@syntax-error bxe3c@syntax-violation* bxe3e@syntax-violation bxe40@identifier? bxe42@datum->syntax bxe44@syntax->datum bxe46@compile-r6rs-top-level bxe48@pre-compile-r6rs-top-level bxe4a@interaction-environment bxe4c@top-level-context) (begin (set! bxad4@file-options-macro (lambda (bxe4d@x) ((lambda (bxe50@valid-option?) (begin (set! bxe50@valid-option? (lambda (bxe59@x) (and (bxb59@id? bxe59@x) (memq (bxb5b@id->sym bxe59@x) '(no-fail no-create no-truncate))))) ((lambda (bxe51@t) ((lambda (bxe53@ls/false) (if (and bxe53@ls/false (apply (lambda (bxe55@opt*) (for-all bxe50@valid-option? bxe55@opt*)) bxe53@ls/false)) (apply (lambda (bxe57@opt*) (bxd14@bless (list 'make-file-options (list 'quote bxe57@opt*)))) bxe53@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bxe51@t))) (bxd5e@syntax-dispatch bxe51@t '(_ . each-any)))) bxe4d@x))) '#f))) (set! bxad6@set-cons (lambda (bxe5b@x bxe5c@ls) (if (memq bxe5b@x bxe5c@ls) bxe5c@ls (cons bxe5b@x bxe5c@ls)))) (set! bxad8@set-union (lambda (bxe5f@ls1 bxe60@ls2) (if (null? bxe5f@ls1) bxe60@ls2 (if (memq (car bxe5f@ls1) bxe60@ls2) (bxad8@set-union (cdr bxe5f@ls1) bxe60@ls2) (cons (car bxe5f@ls1) (bxad8@set-union (cdr bxe5f@ls1) bxe60@ls2)))))) (set! bxadd@top-mark* '(top)) (set! bxadf@top-marked? (lambda (bxe63@m*) (memq 'top bxe63@m*))) (set! bxae1@gen-lexical (lambda (bxe65@sym) (if (symbol? bxe65@sym) (gensym bxe65@sym) (if (bxb25@stx? bxe65@sym) (bxae1@gen-lexical (bxb5b@id->sym bxe65@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bxe65@sym))))) (set! bxae3@gen-global (lambda (bxe67@x) (bxae1@gen-lexical bxe67@x))) (set! bxae5@gen-label (lambda (bxe69@_) (gensym))) (set! bxae7@gen-top-level-label (lambda (bxe6b@id bxe6c@rib) ((lambda (bxe70@find) (begin (set! bxe70@find (lambda (bxe7b@sym bxe7c@mark* bxe7d@sym* bxe7e@mark** bxe7f@label*) (and (pair? bxe7d@sym*) (if (and (eq? bxe7b@sym (car bxe7d@sym*)) (same-marks? bxe7c@mark* (car bxe7e@mark**))) (car bxe7f@label*) (bxe70@find bxe7b@sym bxe7c@mark* (cdr bxe7d@sym*) (cdr bxe7e@mark**) (cdr bxe7f@label*)))))) ((lambda (bxe71@sym bxe72@mark*) ((lambda (bxe75@sym*) ((lambda (bxe77@t) (if bxe77@t ((lambda (bxe79@label) (if (bx983@bx7d0@imported-label->binding bxe79@label) (gensym) bxe79@label)) bxe77@t) (gensym))) (and (memq bxe71@sym (bxaf7@rib-sym* bxe6c@rib)) (bxe70@find bxe71@sym bxe72@mark* bxe75@sym* (bxafb@rib-mark** bxe6c@rib) (bxaff@rib-label* bxe6c@rib))))) (bxaf7@rib-sym* bxe6c@rib))) (bxb5b@id->sym bxe6b@id) (bxb2b@stx-mark* bxe6b@id)))) '#f))) (set! bxae9@gen-define-label+loc (lambda (bxe85@id bxe86@rib) ((lambda (bxe89@t) (if bxe89@t ((lambda (bxe8b@env) ((lambda (bxe8d@label bxe8e@locs) (values bxe8d@label ((lambda (bxe91@t) (if bxe91@t (cdr bxe91@t) ((lambda (bxe93@loc) (begin (bxe08@set-interaction-env-locs! bxe8b@env (cons (cons bxe8d@label bxe93@loc) bxe8e@locs)) bxe93@loc)) (bxae1@gen-lexical bxe85@id)))) (assq bxe8d@label bxe8e@locs)))) (bxae7@gen-top-level-label bxe85@id bxe86@rib) (bxe06@interaction-env-locs bxe8b@env))) bxe89@t) (values (gensym) (bxae1@gen-lexical bxe85@id)))) (bxe4c@top-level-context)))) (set! bxaeb@gen-define-label (lambda (bxe95@id bxe96@rib) (if (bxe4c@top-level-context) (bxae7@gen-top-level-label bxe95@id bxe96@rib) (gensym)))) (set! bxaf5@rib? (lambda (bxe99@x) (and (simple-struct? bxe99@x) (eq? (simple-struct-name bxe99@x) 'rib)))) (set! bxaf7@rib-sym* (lambda (bxe9b@x) (simple-struct-ref bxe9b@x '0))) (set! bxaf9@set-rib-sym*! (lambda (bxe9d@x bxe9e@val) (simple-struct-set! bxe9d@x '0 bxe9e@val))) (set! bxafb@rib-mark** (lambda (bxea1@x) (simple-struct-ref bxea1@x '1))) (set! bxafd@set-rib-mark**! (lambda (bxea3@x bxea4@val) (simple-struct-set! bxea3@x '1 bxea4@val))) (set! bxaff@rib-label* (lambda (bxea7@x) (simple-struct-ref bxea7@x '2))) (set! bxb01@set-rib-label*! (lambda (bxea9@x bxeaa@val) (simple-struct-set! bxea9@x '2 bxeaa@val))) (set! bxb03@rib-sealed/freq (lambda (bxead@x) (simple-struct-ref bxead@x '3))) (set! bxb05@set-rib-sealed/freq! (lambda (bxeaf@x bxeb0@val) (simple-struct-set! bxeaf@x '3 bxeb0@val))) (set! bxb07@rib-cache (lambda (bxeb3@x) (simple-struct-ref bxeb3@x '4))) (set! bxb09@set-rib-cache! (lambda (bxeb5@x bxeb6@val) (simple-struct-set! bxeb5@x '4 bxeb6@val))) (set! bxb0b@dummy '3) (set! bxb0d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bxb0f@extend-rib! (lambda (bxeb9@rib bxeba@id bxebb@label) ((lambda (bxec0@find) (begin (set! bxec0@find (lambda (bxecd@sym bxece@mark* bxecf@sym* bxed0@mark** bxed1@label*) (and (pair? bxecf@sym*) (if (and (eq? bxecd@sym (car bxecf@sym*)) (same-marks? bxece@mark* (car bxed0@mark**))) bxed1@label* (bxec0@find bxecd@sym bxece@mark* (cdr bxecf@sym*) (cdr bxed0@mark**) (cdr bxed1@label*)))))) (begin (if (bxb03@rib-sealed/freq bxeb9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bxeb9@rib) (void)) ((lambda (bxec1@sym bxec2@mark*) ((lambda (bxec5@sym*) ((lambda (bxec7@t) (if bxec7@t ((lambda (bxec9@p) (if (not (eq? bxebb@label (car bxec9@p))) (if (bxe4c@top-level-context) (set-car! bxec9@p bxebb@label) (bxe3e@syntax-violation '#f '"multiple definitions of identifier" bxeba@id)) (void))) bxec7@t) (begin (if (bxb07@rib-cache bxeb9@rib) (hashtable-update! (bxb07@rib-cache bxeb9@rib) bxec1@sym (lambda (bxecb@e) (cons (cons bxec2@mark* bxebb@label) bxecb@e)) '()) (void)) (bxaf9@set-rib-sym*! bxeb9@rib (cons bxec1@sym bxec5@sym*)) (bxafd@set-rib-mark**! bxeb9@rib (cons bxec2@mark* (bxafb@rib-mark** bxeb9@rib))) (bxb01@set-rib-label*! bxeb9@rib (cons bxebb@label (bxaff@rib-label* bxeb9@rib)))))) (and (memq bxec1@sym (bxaf7@rib-sym* bxeb9@rib)) (bxec0@find bxec1@sym bxec2@mark* bxec5@sym* (bxafb@rib-mark** bxeb9@rib) (bxaff@rib-label* bxeb9@rib))))) (bxaf7@rib-sym* bxeb9@rib))) (bxb5b@id->sym bxeba@id) (bxb2b@stx-mark* bxeba@id))))) '#f))) (set! bxb11@extend-rib/nc! (lambda (bxed7@rib bxed8@id bxed9@label) ((lambda (bxedd@sym bxede@mark*) ((lambda (bxee1@sym*) (begin (if (bxb07@rib-cache bxed7@rib) (hashtable-update! (bxb07@rib-cache bxed7@rib) bxedd@sym (lambda (bxee3@e) (cons (cons bxede@mark* bxed9@label) bxee3@e)) '()) (void)) (bxaf9@set-rib-sym*! bxed7@rib (cons bxedd@sym bxee1@sym*)) (bxafd@set-rib-mark**! bxed7@rib (cons bxede@mark* (bxafb@rib-mark** bxed7@rib))) (bxb01@set-rib-label*! bxed7@rib (cons bxed9@label (bxaff@rib-label* bxed7@rib))))) (bxaf7@rib-sym* bxed7@rib))) (bxb5b@id->sym bxed8@id) (bxb2b@stx-mark* bxed8@id)))) (set! bxb13@make-rib-map (lambda (bxee5@sym*) ((lambda (bxee7@ht) ((letrec ((bxee9@f (lambda (bxeeb@i bxeec@sym*) (if (null? bxeec@sym*) bxee7@ht (begin (hashtable-update! bxee7@ht (car bxeec@sym*) (lambda (bxeef@x) (cons bxeeb@i bxeef@x)) '()) (bxee9@f (+ bxeeb@i '1) (cdr bxeec@sym*))))))) bxee9@f) '0 bxee5@sym*)) (make-eq-hashtable)))) (set! bxb15@seal-rib! (lambda (bxef1@rib) ((lambda (bxef3@sym*) (if (not (null? bxef3@sym*)) (begin (bxaf9@set-rib-sym*! bxef1@rib (list->vector bxef3@sym*)) (bxafd@set-rib-mark**! bxef1@rib (list->vector (bxafb@rib-mark** bxef1@rib))) (bxb01@set-rib-label*! bxef1@rib (list->vector (bxaff@rib-label* bxef1@rib))) (bxb05@set-rib-sealed/freq! bxef1@rib (bxb13@make-rib-map bxef3@sym*))) (void))) (bxaf7@rib-sym* bxef1@rib)))) (set! bxb17@unseal-rib! (lambda (bxef5@rib) (if (bxb03@rib-sealed/freq bxef5@rib) (begin (bxb05@set-rib-sealed/freq! bxef5@rib '#f) (bxaf9@set-rib-sym*! bxef5@rib (vector->list (bxaf7@rib-sym* bxef5@rib))) (bxafd@set-rib-mark**! bxef5@rib (vector->list (bxafb@rib-mark** bxef5@rib))) (bxb01@set-rib-label*! bxef5@rib (vector->list (bxaff@rib-label* bxef5@rib)))) (void)))) (set! bxb19@make-full-rib (lambda (bxef7@id* bxef8@label*) ((lambda (bxefb@r) (begin (bxb15@seal-rib! bxefb@r) bxefb@r)) (make-simple-struct 'rib '6 (list (map bxb5b@id->sym bxef7@id*) (map bxb2b@stx-mark* bxef7@id*) bxef8@label* '#f '#f))))) (set! bxb1b@rp (bx6b5@bx591@make-record-printer 'stx (lambda (bxefd@x bxefe@p bxeff@wr) (begin (display '"#<syntax " bxefe@p) (write (bxb6d@stx->datum bxefd@x) bxefe@p) ((lambda (bxf03@expr) (if (bx6ad@bx581@annotation? bxf03@expr) ((lambda (bxf05@src) (if (pair? bxf05@src) (begin (display '" [" bxefe@p) (display (cdr bxf05@src) bxefe@p) (display '" of " bxefe@p) (display (car bxf05@src) bxefe@p) (display '"]" bxefe@p)) (void))) (bx6ae@bx583@annotation-source bxf03@expr)) (void))) (bxb27@stx-expr bxefd@x)) (display '">" bxefe@p))))) (set! bxb25@stx? (lambda (bxf07@x) (and (simple-struct? bxf07@x) (eq? (simple-struct-name bxf07@x) 'stx)))) (set! bxb27@stx-expr (lambda (bxf09@x) (simple-struct-ref bxf09@x '0))) (set! bxb29@set-stx-expr! (lambda (bxf0b@x bxf0c@val) (simple-struct-set! bxf0b@x '0 bxf0c@val))) (set! bxb2b@stx-mark* (lambda (bxf0f@x) (simple-struct-ref bxf0f@x '1))) (set! bxb2d@set-stx-mark*! (lambda (bxf11@x bxf12@val) (simple-struct-set! bxf11@x '1 bxf12@val))) (set! bxb2f@stx-subst* (lambda (bxf15@x) (simple-struct-ref bxf15@x '2))) (set! bxb31@set-stx-subst*! (lambda (bxf17@x bxf18@val) (simple-struct-set! bxf17@x '2 bxf18@val))) (set! bxb33@stx-ae* (lambda (bxf1b@x) (simple-struct-ref bxf1b@x '3))) (set! bxb35@set-stx-ae*! (lambda (bxf1d@x bxf1e@val) (simple-struct-set! bxf1d@x '3 bxf1e@val))) (set! bxb37@dummy '3) (set! bxb39@datum->stx (lambda (bxf21@id bxf22@datum) (make-simple-struct 'stx '5 (list bxf22@datum (bxb2b@stx-mark* bxf21@id) (bxb2f@stx-subst* bxf21@id) (bxb33@stx-ae* bxf21@id))))) (set! bxb3b@gen-mark (lambda () (string '#\m))) (set! bxb3d@anti-mark '#f) (set! bxb3f@anti-mark? not) (set! bxb41@mkstx (lambda (bxf25@e bxf26@m* bxf27@s* bxf28@ae*) (if (and (bxb25@stx? bxf25@e) (not (bxadf@top-marked? bxf26@m*))) (call-with-values (lambda () (join-wraps bxf26@m* bxf27@s* bxf28@ae* bxf25@e)) (lambda (bxf33@bxf2e bxf34@bxf30 bxf35@bxf32) ((lambda (bxf39@ae* bxf3a@s* bxf3b@m*) (make-simple-struct 'stx '5 (list (bxb27@stx-expr bxf25@e) bxf3b@m* bxf3a@s* bxf39@ae*))) bxf35@bxf32 bxf34@bxf30 bxf33@bxf2e))) (make-simple-struct 'stx '5 (list bxf25@e bxf26@m* bxf27@s* bxf28@ae*))))) (set! bxb43@add-mark (lambda (bxf3f@m bxf40@e bxf41@ae) (bxb41@mkstx bxf40@e (list bxf3f@m) '(shift) (list bxf41@ae)))) (set! bxb45@add-subst (lambda (bxf45@subst bxf46@e) (bxb41@mkstx bxf46@e '() (list bxf45@subst) '()))) (set! bxb47@syntax-kind? (lambda (bxf49@x bxf4a@p?) (if (bxb25@stx? bxf49@x) (bxb47@syntax-kind? (bxb27@stx-expr bxf49@x) bxf4a@p?) (if (bx6ad@bx581@annotation? bxf49@x) (bxb47@syntax-kind? (bx6af@bx585@annotation-expression bxf49@x) bxf4a@p?) (bxf4a@p? bxf49@x))))) (set! bxb49@syntax-vector->list (lambda (bxf4d@x) (if (bxb25@stx? bxf4d@x) ((lambda (bxf4f@ls bxf50@m* bxf51@s* bxf52@ae*) (map (lambda (bxf57@x) (bxb41@mkstx bxf57@x bxf50@m* bxf51@s* bxf52@ae*)) bxf4f@ls)) (bxb49@syntax-vector->list (bxb27@stx-expr bxf4d@x)) (bxb2b@stx-mark* bxf4d@x) (bxb2f@stx-subst* bxf4d@x) (bxb33@stx-ae* bxf4d@x)) (if (bx6ad@bx581@annotation? bxf4d@x) (bxb49@syntax-vector->list (bx6af@bx585@annotation-expression bxf4d@x)) (if (vector? bxf4d@x) (vector->list bxf4d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bxf4d@x)))))) (set! bxb4b@syntax-pair? (lambda (bxf59@x) (bxb47@syntax-kind? bxf59@x pair?))) (set! bxb4d@syntax-vector? (lambda (bxf5b@x) (bxb47@syntax-kind? bxf5b@x vector?))) (set! bxb4f@syntax-null? (lambda (bxf5d@x) (bxb47@syntax-kind? bxf5d@x null?))) (set! bxb51@syntax-list? (lambda (bxf5f@x) (or (bxb4f@syntax-null? bxf5f@x) (and (bxb4b@syntax-pair? bxf5f@x) (bxb51@syntax-list? (bxb55@syntax-cdr bxf5f@x)))))) (set! bxb53@syntax-car (lambda (bxf61@x) (if (bxb25@stx? bxf61@x) (bxb41@mkstx (bxb53@syntax-car (bxb27@stx-expr bxf61@x)) (bxb2b@stx-mark* bxf61@x) (bxb2f@stx-subst* bxf61@x) (bxb33@stx-ae* bxf61@x)) (if (bx6ad@bx581@annotation? bxf61@x) (bxb53@syntax-car (bx6af@bx585@annotation-expression bxf61@x)) (if (pair? bxf61@x) (car bxf61@x) (assertion-violation 'syntax-car '"BUG: not a pair" bxf61@x)))))) (set! bxb55@syntax-cdr (lambda (bxf63@x) (if (bxb25@stx? bxf63@x) (bxb41@mkstx (bxb55@syntax-cdr (bxb27@stx-expr bxf63@x)) (bxb2b@stx-mark* bxf63@x) (bxb2f@stx-subst* bxf63@x) (bxb33@stx-ae* bxf63@x)) (if (bx6ad@bx581@annotation? bxf63@x) (bxb55@syntax-cdr (bx6af@bx585@annotation-expression bxf63@x)) (if (pair? bxf63@x) (cdr bxf63@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bxf63@x)))))) (set! bxb57@syntax->list (lambda (bxf65@x) (if (bxb4b@syntax-pair? bxf65@x) (cons (bxb53@syntax-car bxf65@x) (bxb57@syntax->list (bxb55@syntax-cdr bxf65@x))) (if (bxb4f@syntax-null? bxf65@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bxf65@x))))) (set! bxb59@id? (lambda (bxf67@x) (and (bxb25@stx? bxf67@x) (symbol? (bxb27@stx-expr bxf67@x))))) (set! bxb5b@id->sym (lambda (bxf69@x) (bxb27@stx-expr bxf69@x))) (set! bxb5d@bound-id=? (lambda (bxf6b@x bxf6c@y) (and (eq? (bxb5b@id->sym bxf6b@x) (bxb5b@id->sym bxf6c@y)) (same-marks? (bxb2b@stx-mark* bxf6b@x) (bxb2b@stx-mark* bxf6c@y))))) (set! bxb5f@free-id=? (lambda (bxf6f@i bxf70@j) ((lambda (bxf73@t0 bxf74@t1) (if (or bxf73@t0 bxf74@t1) (eq? bxf73@t0 bxf74@t1) (eq? (bxb5b@id->sym bxf6f@i) (bxb5b@id->sym bxf70@j)))) (id->real-label bxf6f@i) (id->real-label bxf70@j)))) (set! bxb61@valid-bound-ids? (lambda (bxf77@id*) (and (for-all bxb59@id? bxf77@id*) (bxb63@distinct-bound-ids? bxf77@id*)))) (set! bxb63@distinct-bound-ids? (lambda (bxf79@id*) (or (null? bxf79@id*) (and (not (bxb65@bound-id-member? (car bxf79@id*) (cdr bxf79@id*))) (bxb63@distinct-bound-ids? (cdr bxf79@id*)))))) (set! bxb65@bound-id-member? (lambda (bxf7b@id bxf7c@id*) (and (pair? bxf7c@id*) (or (bxb5d@bound-id=? bxf7b@id (car bxf7c@id*)) (bxb65@bound-id-member? bxf7b@id (cdr bxf7c@id*)))))) (set! bxb67@self-evaluating? (lambda (bxf7f@x) (or (number? bxf7f@x) (string? bxf7f@x) (char? bxf7f@x) (boolean? bxf7f@x) (regexp? bxf7f@x) (bytevector? bxf7f@x)))) (set! bxb69@strip-annotations (lambda (bxf81@x) (if (pair? bxf81@x) (cons (bxb69@strip-annotations (car bxf81@x)) (bxb69@strip-annotations (cdr bxf81@x))) (if (vector? bxf81@x) (vector-map bxb69@strip-annotations bxf81@x) (if (bx6ad@bx581@annotation? bxf81@x) (bx6ac@bx57f@annotation-stripped bxf81@x) bxf81@x))))) (set! bxb6b@strip (lambda (bxf83@x bxf84@m*) (if (bxadf@top-marked? bxf84@m*) (if (or (bx6ad@bx581@annotation? bxf83@x) (and (pair? bxf83@x) (bx6ad@bx581@annotation? (car bxf83@x))) (and (vector? bxf83@x) (> (vector-length bxf83@x) '0) (bx6ad@bx581@annotation? (vector-ref bxf83@x '0)))) (bxb69@strip-annotations bxf83@x) bxf83@x) ((letrec ((bxf87@f (lambda (bxf89@x) (if (bxb25@stx? bxf89@x) (bxb6b@strip (bxb27@stx-expr bxf89@x) (bxb2b@stx-mark* bxf89@x)) (if (bx6ad@bx581@annotation? bxf89@x) (bx6ac@bx57f@annotation-stripped bxf89@x) (if (pair? bxf89@x) ((lambda (bxf8b@a bxf8c@d) (if (and (eq? bxf8b@a (car bxf89@x)) (eq? bxf8c@d (cdr bxf89@x))) bxf89@x (cons bxf8b@a bxf8c@d))) (bxf87@f (car bxf89@x)) (bxf87@f (cdr bxf89@x))) (if (vector? bxf89@x) ((lambda (bxf8f@old) ((lambda (bxf91@new) (if (for-all eq? bxf8f@old bxf91@new) bxf89@x (list->vector bxf91@new))) (map bxf87@f bxf8f@old))) (vector->list bxf89@x)) bxf89@x))))))) bxf87@f) bxf83@x)))) (set! bxb6d@stx->datum (lambda (bxf93@x) (bxb6b@strip bxf93@x '()))) (set! bxb6f@id->label (lambda (bxf95@id) (or (id->real-label bxf95@id) ((lambda (bxf97@t) (if bxf97@t ((lambda (bxf99@env) ((lambda (bxf9b@rib) (call-with-values (lambda () (bxae9@gen-define-label+loc bxf95@id bxf9b@rib)) (lambda (bxfa1@bxf9e bxfa2@bxfa0) ((lambda (bxfa5@loc_ bxfa6@lab) (begin (bxb0f@extend-rib! bxf9b@rib bxf95@id bxfa6@lab) bxfa6@lab)) bxfa2@bxfa0 bxfa1@bxf9e)))) (bxdfe@interaction-env-rib bxf99@env))) bxf97@t) '#f)) (bxe4c@top-level-context))))) (set! bxb71@label->binding (lambda (bxfa9@x bxfaa@r) ((lambda (bxfad@t) (if bxfad@t ((lambda (bxfaf@b) (if (and (pair? bxfaf@b) (eq? (car bxfaf@b) '$core-rtd)) (cons '$rtd (map bxd14@bless (cdr bxfaf@b))) (if (and (pair? bxfaf@b) (eq? (car bxfaf@b) 'global-rtd)) ((lambda (bxfb1@lib bxfb2@loc) (cons '$rtd (symbol-value bxfb2@loc))) (cadr bxfaf@b) (cddr bxfaf@b)) bxfaf@b))) bxfad@t) ((lambda (bxfb5@t) (if bxfb5@t (cdr bxfb5@t) ((lambda (bxfb7@t) (if bxfb7@t ((lambda (bxfb9@env) ((lambda (bxfbb@t) (if bxfbb@t ((lambda (bxfbd@p) (cons* 'lexical (cdr bxfbd@p) '#f)) bxfbb@t) '(displaced-lexical . #f))) (assq bxfa9@x (bxe06@interaction-env-locs bxfb9@env)))) bxfb7@t) '(displaced-lexical . #f))) (bxe4c@top-level-context)))) (assq bxfa9@x bxfaa@r)))) (bx983@bx7d0@imported-label->binding bxfa9@x)))) (set! bxb73@make-binding cons) (set! bxb75@binding-type car) (set! bxb77@binding-value cdr) (set! bxb79@raise-unbound-error (lambda (bxfbf@id) (bxe3c@syntax-violation* '#f '"unbound identifier" bxfbf@id (bx2b9d@bx29e3@make-undefined-violation)))) (set! bxb7b@syntax-type (lambda (bxfc1@e bxfc2@r) (if (bxb59@id? bxfc1@e) ((lambda (bxfc5@id) ((lambda (bxfc7@label) ((lambda (bxfc9@b) ((lambda (bxfcb@type) ((lambda () (begin (if (not bxfc7@label) (bxb79@raise-unbound-error bxfc5@id) (void)) ((lambda (bxfcd@t) (if (memv bxfcd@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bxfcb@type (bxb77@binding-value bxfc9@b) bxfc5@id) (values 'other '#f '#f))) bxfcb@type))))) (bxb75@binding-type bxfc9@b))) (bxb71@label->binding bxfc7@label bxfc2@r))) (bxb6f@id->label bxfc5@id))) bxfc1@e) (if (bxb4b@syntax-pair? bxfc1@e) ((lambda (bxfcf@id) (if (bxb59@id? bxfcf@id) ((lambda (bxfd1@label) ((lambda (bxfd3@b) ((lambda (bxfd5@type) ((lambda () (begin (if (not bxfd1@label) (bxb79@raise-unbound-error bxfcf@id) (void)) ((lambda (bxfd7@t) (if (memv bxfd7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bxfd5@type (bxb77@binding-value bxfd3@b) bxfcf@id) (values 'call '#f '#f))) bxfd5@type))))) (bxb75@binding-type bxfd3@b))) (bxb71@label->binding bxfd1@label bxfc2@r))) (bxb6f@id->label bxfcf@id)) (values 'call '#f '#f))) (bxb53@syntax-car bxfc1@e)) ((lambda (bxfd9@d) (if (bxb67@self-evaluating? bxfd9@d) (values 'constant bxfd9@d '#f) (values 'other '#f '#f))) (bxb6d@stx->datum bxfc1@e)))))) (set! bxb89@sanitize-binding (lambda (bxfdb@x bxfdc@src) (if (procedure? bxfdb@x) (cons* 'local-macro bxfdb@x bxfdc@src) (if (and (pair? bxfdb@x) (eq? (car bxfdb@x) 'macro!) (procedure? (cdr bxfdb@x))) (cons* 'local-macro! (cdr bxfdb@x) bxfdc@src) (if (and (pair? bxfdb@x) (eq? (car bxfdb@x) '$rtd)) bxfdb@x (assertion-violation 'expand '"invalid transformer" bxfdb@x)))))) (set! bxb8b@make-variable-transformer (lambda (bxfdf@x) (if (procedure? bxfdf@x) (cons 'macro! bxfdf@x) (assertion-violation 'make-variable-transformer '"not a procedure" bxfdf@x)))) (set! bxb8d@variable-transformer? (lambda (bxfe1@x) (and (pair? bxfe1@x) (eq? (car bxfe1@x) 'macro!) (procedure? (cdr bxfe1@x))))) (set! bxb8f@variable-transformer-procedure (lambda (bxfe3@x) (if (bxb8d@variable-transformer? bxfe3@x) (cdr bxfe3@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bxfe3@x)))) (set! bxb91@make-eval-transformer (lambda (bxfe5@x) (bxb89@sanitize-binding (eval-core (bx70e@bx6c6@expanded->core bxfe5@x)) bxfe5@x))) (set! bxce2@parse-define (lambda (bxfe7@x) ((lambda (bxfe9@t) ((lambda (bxfeb@ls/false) (if (and bxfeb@ls/false (apply (lambda (bxfed@id bxfee@fmls bxfef@b bxff0@b*) (bxb59@id? bxfed@id)) bxfeb@ls/false)) (apply (lambda (bxff5@id bxff6@fmls bxff7@b bxff8@b*) (begin (bxd84@verify-formals bxff6@fmls bxfe7@x) (values bxff5@id (cons 'defun (cons bxff6@fmls (cons bxff7@b bxff8@b*)))))) bxfeb@ls/false) ((lambda (bxffd@t) ((lambda (bxfff@ls/false) (if (and bxfff@ls/false (apply (lambda (bx1001@id bx1002@val) (bxb59@id? bx1001@id)) bxfff@ls/false)) (apply (lambda (bx1005@id bx1006@val) (values bx1005@id (cons 'expr bx1006@val))) bxfff@ls/false) ((lambda (bx1009@t) ((lambda (bx100b@ls/false) (if (and bx100b@ls/false (apply (lambda (bx100d@id) (bxb59@id? bx100d@id)) bx100b@ls/false)) (apply (lambda (bx100f@id) (values bx100f@id (cons 'expr (bxd14@bless '(void))))) bx100b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1009@t))) (bxd5e@syntax-dispatch bx1009@t '(_ any)))) bxffd@t))) (bxd5e@syntax-dispatch bxffd@t '(_ any any)))) bxfe9@t))) (bxd5e@syntax-dispatch bxfe9@t '(_ (any . any) any . each-any)))) bxfe7@x))) (set! bxce4@parse-define-syntax (lambda (bx1011@x) ((lambda (bx1013@t) ((lambda (bx1015@ls/false) (if (and bx1015@ls/false (apply (lambda (bx1017@id bx1018@val) (bxb59@id? bx1017@id)) bx1015@ls/false)) (apply (lambda (bx101b@id bx101c@val) (values bx101b@id bx101c@val)) bx1015@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1013@t))) (bxd5e@syntax-dispatch bx1013@t '(_ any any)))) bx1011@x))) (set! bxce6@scheme-stx-hashtable (make-eq-hashtable)) (set! bxce8@scheme-stx (lambda (bx101f@sym) (or (hashtable-ref bxce6@scheme-stx-hashtable bx101f@sym '#f) ((lambda (bx1021@subst) ((lambda (bx1023@stx) ((lambda (bx1025@stx) ((lambda () (begin (hashtable-set! bxce6@scheme-stx-hashtable bx101f@sym bx1025@stx) bx1025@stx)))) ((lambda (bx1027@t) (if bx1027@t ((lambda (bx1029@x) ((lambda (bx102b@name bx102c@label) (bxb45@add-subst (make-simple-struct 'rib '6 (list (list bx102b@name) (list bxadd@top-mark*) (list bx102c@label) '#f '#f)) bx1023@stx)) (car bx1029@x) (cdr bx1029@x))) bx1027@t) bx1023@stx)) (assq bx101f@sym bx1021@subst)))) (make-simple-struct 'stx '5 (list bx101f@sym bxadd@top-mark* '() '())))) (bx95f@bx788@library-subst (bx97d@bx7c4@find-library-by-name '(psyntax system $all))))))) (set! bxcea@lexical-var car) (set! bxcec@lexical-mutable? cdr) (set! bxcee@set-lexical-mutable! set-cdr!) (set! bxcf0@add-lexical (lambda (bx102f@lab bx1030@lex bx1031@r) (cons (cons* bx102f@lab 'lexical bx1030@lex '#f) bx1031@r))) (set! bxcf2@add-lexicals (lambda (bx1035@lab* bx1036@lex* bx1037@r) (if (null? bx1035@lab*) bx1037@r (bxcf2@add-lexicals (cdr bx1035@lab*) (cdr bx1036@lex*) (bxcf0@add-lexical (car bx1035@lab*) (car bx1036@lex*) bx1037@r))))) (set! bxcf4@letrec-helper (lambda (bx103b@e bx103c@r bx103d@mr bx103e@build) ((lambda (bx1043@t) ((lambda (bx1045@ls/false) (if bx1045@ls/false (apply (lambda (bx1047@lhs* bx1048@rhs* bx1049@b bx104a@b*) (if (not (bxb61@valid-bound-ids? bx1047@lhs*)) (bxd18@invalid-fmls-error bx103b@e bx1047@lhs*) ((lambda (bx104f@lex* bx1050@lab*) ((lambda (bx1053@rib bx1054@r) ((lambda (bx1057@body bx1058@rhs*) (bx103e@build '#f bx104f@lex* bx1058@rhs* bx1057@body)) (bxd96@chi-internal (bxb45@add-subst bx1053@rib (cons bx1049@b bx104a@b*)) bx1054@r bx103d@mr) (bxd7c@chi-expr* (map (lambda (bx105b@x) (bxb45@add-subst bx1053@rib bx105b@x)) bx1048@rhs*) bx1054@r bx103d@mr))) (bxb19@make-full-rib bx1047@lhs* bx1050@lab*) (bxcf2@add-lexicals bx1050@lab* bx104f@lex* bx103c@r))) (map bxae1@gen-lexical bx1047@lhs*) (map bxae5@gen-label bx1047@lhs*)))) bx1045@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1043@t))) (bxd5e@syntax-dispatch bx1043@t '(_ #(each (any any)) any . each-any)))) bx103b@e))) (set! bxcf6@letrec-transformer (lambda (bx105d@e bx105e@r bx105f@mr) (bxcf4@letrec-helper bx105d@e bx105e@r bx105f@mr bxac2@bxa33@build-letrec))) (set! bxcf8@letrec*-transformer (lambda (bx1063@e bx1064@r bx1065@mr) (bxcf4@letrec-helper bx1063@e bx1064@r bx1065@mr bxac3@bxa35@build-letrec*))) (set! bxcfa@fluid-let-syntax-transformer (lambda (bx1069@e bx106a@r bx106b@mr) ((lambda (bx1070@lookup) (begin (set! bx1070@lookup (lambda (bx1083@x) (or (bxb6f@id->label bx1083@x) (bxe3e@syntax-violation '#f '"unbound identifier" bx1069@e bx1083@x)))) ((lambda (bx1071@t) ((lambda (bx1073@ls/false) (if bx1073@ls/false (apply (lambda (bx1075@lhs* bx1076@rhs* bx1077@b bx1078@b*) (if (not (bxb61@valid-bound-ids? bx1075@lhs*)) (bxd18@invalid-fmls-error bx1069@e bx1075@lhs*) ((lambda (bx107d@lab* bx107e@rhs*) (bxd96@chi-internal (cons bx1077@b bx1078@b*) (append (map cons bx107d@lab* bx107e@rhs*) bx106a@r) (append (map cons bx107d@lab* bx107e@rhs*) bx106b@mr))) (map bx1070@lookup bx1075@lhs*) (map (lambda (bx1081@x) (bxb91@make-eval-transformer (bxdb8@expand-transformer bx1081@x bx106b@mr))) bx1076@rhs*)))) bx1073@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1071@t))) (bxd5e@syntax-dispatch bx1071@t '(_ #(each (any any)) any . each-any)))) bx1069@e))) '#f))) (set! bxcfc@type-descriptor-transformer (lambda (bx1085@e bx1086@r bx1087@mr) ((lambda (bx108b@t) ((lambda (bx108d@ls/false) (if (and bx108d@ls/false (apply (lambda (bx108f@id) (bxb59@id? bx108f@id)) bx108d@ls/false)) (apply (lambda (bx1091@id) ((lambda (bx1093@lab) ((lambda (bx1095@b) ((lambda (bx1097@type) ((lambda () (begin (if (not bx1093@lab) (bxb79@raise-unbound-error bx1091@id) (void)) (if (not (and (eq? bx1097@type '$rtd) (not (list? (bxb77@binding-value bx1095@b))))) (bxe3e@syntax-violation '#f '"not a record type" bx1085@e) (void)) (list 'quote (bxb77@binding-value bx1095@b)))))) (bxb75@binding-type bx1095@b))) (bxb71@label->binding bx1093@lab bx1086@r))) (bxb6f@id->label bx1091@id))) bx108d@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx108b@t))) (bxd5e@syntax-dispatch bx108b@t '(_ any)))) bx1085@e))) (set! bxcfe@record-type-descriptor-transformer (lambda (bx1099@e bx109a@r bx109b@mr) ((lambda (bx109f@t) ((lambda (bx10a1@ls/false) (if (and bx10a1@ls/false (apply (lambda (bx10a3@id) (bxb59@id? bx10a3@id)) bx10a1@ls/false)) (apply (lambda (bx10a5@id) ((lambda (bx10a7@lab) ((lambda (bx10a9@b) ((lambda (bx10ab@type) ((lambda () (begin (if (not bx10a7@lab) (bxb79@raise-unbound-error bx10a5@id) (void)) (if (not (and (eq? bx10ab@type '$rtd) (list? (bxb77@binding-value bx10a9@b)))) (bxe3e@syntax-violation '#f '"not a record type" bx1099@e) (void)) (bxd80@chi-expr (car (bxb77@binding-value bx10a9@b)) bx109a@r bx109b@mr))))) (bxb75@binding-type bx10a9@b))) (bxb71@label->binding bx10a7@lab bx109a@r))) (bxb6f@id->label bx10a5@id))) bx10a1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx109f@t))) (bxd5e@syntax-dispatch bx109f@t '(_ any)))) bx1099@e))) (set! bxd00@record-constructor-descriptor-transformer (lambda (bx10ad@e bx10ae@r bx10af@mr) ((lambda (bx10b3@t) ((lambda (bx10b5@ls/false) (if (and bx10b5@ls/false (apply (lambda (bx10b7@id) (bxb59@id? bx10b7@id)) bx10b5@ls/false)) (apply (lambda (bx10b9@id) ((lambda (bx10bb@lab) ((lambda (bx10bd@b) ((lambda (bx10bf@type) ((lambda () (begin (if (not bx10bb@lab) (bxb79@raise-unbound-error bx10b9@id) (void)) (if (not (and (eq? bx10bf@type '$rtd) (list? (bxb77@binding-value bx10bd@b)))) (bxe3e@syntax-violation '#f '"invalid type" bx10ad@e) (void)) (bxd80@chi-expr (cadr (bxb77@binding-value bx10bd@b)) bx10ae@r bx10af@mr))))) (bxb75@binding-type bx10bd@b))) (bxb71@label->binding bx10bb@lab bx10ae@r))) (bxb6f@id->label bx10b9@id))) bx10b5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx10b3@t))) (bxd5e@syntax-dispatch bx10b3@t '(_ any)))) bx10ad@e))) (set! bxd02@when-macro (lambda (bx10c1@e) ((lambda (bx10c3@t) ((lambda (bx10c5@ls/false) (if bx10c5@ls/false (apply (lambda (bx10c7@test bx10c8@e bx10c9@e*) (bxd14@bless (list 'if bx10c7@test (cons 'begin (cons bx10c8@e bx10c9@e*))))) bx10c5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx10c3@t))) (bxd5e@syntax-dispatch bx10c3@t '(_ any any . each-any)))) bx10c1@e))) (set! bxd04@unless-macro (lambda (bx10cd@e) ((lambda (bx10cf@t) ((lambda (bx10d1@ls/false) (if bx10d1@ls/false (apply (lambda (bx10d3@test bx10d4@e bx10d5@e*) (bxd14@bless (list 'if (list 'not bx10d3@test) (cons 'begin (cons bx10d4@e bx10d5@e*))))) bx10d1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx10cf@t))) (bxd5e@syntax-dispatch bx10cf@t '(_ any any . each-any)))) bx10cd@e))) (set! bxd06@if-transformer (lambda (bx10d9@e bx10da@r bx10db@mr) ((lambda (bx10df@t) ((lambda (bx10e1@ls/false) (if bx10e1@ls/false (apply (lambda (bx10e3@e0 bx10e4@e1 bx10e5@e2) (list 'if (bxd80@chi-expr bx10e3@e0 bx10da@r bx10db@mr) (bxd80@chi-expr bx10e4@e1 bx10da@r bx10db@mr) (bxd80@chi-expr bx10e5@e2 bx10da@r bx10db@mr))) bx10e1@ls/false) ((lambda (bx10e9@t) ((lambda (bx10eb@ls/false) (if bx10eb@ls/false (apply (lambda (bx10ed@e0 bx10ee@e1) (list 'if (bxd80@chi-expr bx10ed@e0 bx10da@r bx10db@mr) (bxd80@chi-expr bx10ee@e1 bx10da@r bx10db@mr) (bxac1@bxa31@build-void))) bx10eb@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx10e9@t))) (bxd5e@syntax-dispatch bx10e9@t '(_ any any)))) bx10df@t))) (bxd5e@syntax-dispatch bx10df@t '(_ any any any)))) bx10d9@e))) (set! bxd08@and-transformer (lambda (bx10f1@e bx10f2@r bx10f3@mr) ((lambda (bx10f7@t) ((lambda (bx10f9@ls/false) (if bx10f9@ls/false (apply (lambda (bx10fb@e*) (cons 'and (bxd7c@chi-expr* bx10fb@e* bx10f2@r bx10f3@mr))) bx10f9@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx10f7@t))) (bxd5e@syntax-dispatch bx10f7@t '(_ . each-any)))) bx10f1@e))) (set! bxd0a@or-transformer (lambda (bx10fd@e bx10fe@r bx10ff@mr) ((lambda (bx1103@t) ((lambda (bx1105@ls/false) (if bx1105@ls/false (apply (lambda (bx1107@e*) (cons 'or (bxd7c@chi-expr* bx1107@e* bx10fe@r bx10ff@mr))) bx1105@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1103@t))) (bxd5e@syntax-dispatch bx1103@t '(_ . each-any)))) bx10fd@e))) (set! bxd0c@case-macro (lambda (bx1109@e) ((lambda (bx110c@build-last bx110e@build-one) (begin (set! bx110c@build-last (lambda (bx1133@cls) ((lambda (bx1135@t) ((lambda (bx1137@ls/false) (if bx1137@ls/false (apply (lambda (bx1139@e bx113a@e*) (cons 'begin (cons bx1139@e bx113a@e*))) bx1137@ls/false) ((lambda (bx113d@t) ((lambda (bx113f@ls/false) (if bx113f@ls/false (apply (lambda () (bx110e@build-one bx1133@cls '(if #f #f))) bx113f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx113d@t))) (bxd5e@syntax-dispatch bx113d@t '_))) bx1135@t))) (bxd5e@syntax-dispatch bx1135@t '(#(scheme-id else) any . each-any)))) bx1133@cls))) (set! bx110e@build-one (lambda (bx1125@cls bx1126@k) ((lambda (bx1129@t) ((lambda (bx112b@ls/false) (if bx112b@ls/false (apply (lambda (bx112d@d* bx112e@e bx112f@e*) (list 'if (list 'memv 't (list 'quote bx112d@d*)) (cons 'begin (cons bx112e@e bx112f@e*)) bx1126@k)) bx112b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1129@t))) (bxd5e@syntax-dispatch bx1129@t '(each-any any . each-any)))) bx1125@cls))) ((lambda (bx110f@t) ((lambda (bx1111@ls/false) (if bx1111@ls/false (apply (lambda (bx1113@expr) (bxd14@bless (cons 'let (cons (list (list 't bx1113@expr)) '((if #f #f)))))) bx1111@ls/false) ((lambda (bx1115@t) ((lambda (bx1117@ls/false) (if bx1117@ls/false (apply (lambda (bx1119@expr bx111a@cls bx111b@cls*) (bxd14@bless (list 'let (list (list 't bx1119@expr)) ((letrec ((bx111f@f (lambda (bx1121@cls bx1122@cls*) (if (null? bx1122@cls*) (bx110c@build-last bx1121@cls) (bx110e@build-one bx1121@cls (bx111f@f (car bx1122@cls*) (cdr bx1122@cls*))))))) bx111f@f) bx111a@cls bx111b@cls*)))) bx1117@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1115@t))) (bxd5e@syntax-dispatch bx1115@t '(_ any any . each-any)))) bx110f@t))) (bxd5e@syntax-dispatch bx110f@t '(_ any)))) bx1109@e))) '#f '#f))) (set! bxd0e@quote-transformer (lambda (bx1141@e bx1142@r bx1143@mr) ((lambda (bx1147@t) ((lambda (bx1149@ls/false) (if bx1149@ls/false (apply (lambda (bx114b@datum) (list 'quote (bxb6d@stx->datum bx114b@datum))) bx1149@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1147@t))) (bxd5e@syntax-dispatch bx1147@t '(_ any)))) bx1141@e))) (set! bxd10@case-lambda-transformer (lambda (bx114d@e bx114e@r bx114f@mr) ((lambda (bx1153@t) ((lambda (bx1155@ls/false) (if bx1155@ls/false (apply (lambda (bx1157@fmls* bx1158@b* bx1159@b**) (call-with-values (lambda () (bxd88@chi-lambda-clause* bx114d@e bx1157@fmls* (map cons bx1158@b* bx1159@b**) bx114e@r bx114f@mr)) (lambda (bx1161@bx115e bx1162@bx1160) ((lambda (bx1165@body* bx1166@fmls*) (bxabe@bx9ff@build-case-lambda '#f bx1166@fmls* bx1165@body*)) bx1162@bx1160 bx1161@bx115e)))) bx1155@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1153@t))) (bxd5e@syntax-dispatch bx1153@t '(_ . #(each (any any . each-any)))))) bx114d@e))) (set! bxd12@lambda-transformer (lambda (bx1169@e bx116a@r bx116b@mr) ((lambda (bx116f@t) ((lambda (bx1171@ls/false) (if bx1171@ls/false (apply (lambda (bx1173@fmls bx1174@b bx1175@b*) (call-with-values (lambda () (bxd86@chi-lambda-clause bx1169@e bx1173@fmls (cons bx1174@b bx1175@b*) bx116a@r bx116b@mr)) (lambda (bx117d@bx117a bx117e@bx117c) ((lambda (bx1181@body bx1182@fmls) (bxabd@bx9fd@build-lambda '#f bx1182@fmls bx1181@body)) bx117e@bx117c bx117d@bx117a)))) bx1171@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx116f@t))) (bxd5e@syntax-dispatch bx116f@t '(_ any any . each-any)))) bx1169@e))) (set! bxd14@bless (lambda (bx1185@x) (bxb41@mkstx ((letrec ((bx1187@f (lambda (bx1189@x) (if (bxb25@stx? bx1189@x) bx1189@x (if (pair? bx1189@x) (cons (bx1187@f (car bx1189@x)) (bx1187@f (cdr bx1189@x))) (if (symbol? bx1189@x) (bxce8@scheme-stx bx1189@x) (if (vector? bx1189@x) (vector-map bx1187@f bx1189@x) bx1189@x))))))) bx1187@f) bx1185@x) '() '() '()))) (set! bxd16@with-syntax-macro (lambda (bx118b@e) ((lambda (bx118d@t) ((lambda (bx118f@ls/false) (if bx118f@ls/false (apply (lambda (bx1191@pat* bx1192@expr* bx1193@b bx1194@b*) ((lambda (bx1199@idn*) (begin (bxd84@verify-formals (map car bx1199@idn*) bx118b@e) ((lambda (bx119b@t*) (bxd14@bless (list 'let (map list bx119b@t* bx1192@expr*) ((letrec ((bx119d@f (lambda (bx119f@pat* bx11a0@t*) (if (null? bx119f@pat*) (cons 'begin (cons '#f (cons bx1193@b bx1194@b*))) (list 'syntax-case (car bx11a0@t*) '() (list (car bx119f@pat*) (bx119d@f (cdr bx119f@pat*) (cdr bx11a0@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bx119f@pat*)) (car bx11a0@t*)))))))) bx119d@f) bx1191@pat* bx119b@t*)))) (bxe2c@generate-temporaries bx1192@expr*)))) ((letrec ((bx11a3@f (lambda (bx11a5@pat*) (if (null? bx11a5@pat*) '() (call-with-values (lambda () (bxd5c@convert-pattern (car bx11a5@pat*) '())) (lambda (bx11ab@bx11a8 bx11ac@bx11aa) ((lambda (bx11af@idn* bx11b0@pat) (append bx11af@idn* (bx11a3@f (cdr bx11a5@pat*)))) bx11ac@bx11aa bx11ab@bx11a8))))))) bx11a3@f) bx1191@pat*))) bx118f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx118d@t))) (bxd5e@syntax-dispatch bx118d@t '(_ #(each (any any)) any . each-any)))) bx118b@e))) (set! bxd18@invalid-fmls-error (lambda (bx11b3@stx bx11b4@fmls) ((lambda (bx11b7@t) ((lambda (bx11b9@ls/false) (if bx11b9@ls/false (apply (lambda (bx11bb@id* bx11bc@last) ((letrec ((bx11bf@f (lambda (bx11c1@id*) (if (null? bx11c1@id*) (values) (if (not (bxb59@id? (car bx11c1@id*))) (bxe3e@syntax-violation '#f '"not an identifier" bx11b3@stx (car bx11c1@id*)) (begin (bx11bf@f (cdr bx11c1@id*)) (if (bxb65@bound-id-member? (car bx11c1@id*) (cdr bx11c1@id*)) (bxe3e@syntax-violation '#f '"duplicate binding" bx11b3@stx (car bx11c1@id*)) (void)))))))) bx11bf@f) (if (bxb59@id? bx11bc@last) (cons bx11bc@last bx11bb@id*) (if (bxb4f@syntax-null? bx11bc@last) bx11bb@id* (bxe3e@syntax-violation '#f '"not an identifier" bx11b3@stx bx11bc@last))))) bx11b9@ls/false) ((lambda (bx11c3@t) ((lambda (bx11c5@ls/false) (if bx11c5@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"malformed binding form" bx11b3@stx bx11b4@fmls)) bx11c5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx11c3@t))) (bxd5e@syntax-dispatch bx11c3@t '_))) bx11b7@t))) (bxd5e@syntax-dispatch bx11b7@t '#(each+ any () any)))) bx11b4@fmls))) (set! bxd1a@let-macro (lambda (bx11c7@stx) ((lambda (bx11c9@t) ((lambda (bx11cb@ls/false) (if bx11cb@ls/false (apply (lambda (bx11cd@lhs* bx11ce@rhs* bx11cf@b bx11d0@b*) (if (bxb61@valid-bound-ids? bx11cd@lhs*) (bxd14@bless (cons (cons 'lambda (cons bx11cd@lhs* (cons bx11cf@b bx11d0@b*))) bx11ce@rhs*)) (bxd18@invalid-fmls-error bx11c7@stx bx11cd@lhs*))) bx11cb@ls/false) ((lambda (bx11d5@t) ((lambda (bx11d7@ls/false) (if (and bx11d7@ls/false (apply (lambda (bx11d9@f bx11da@lhs* bx11db@rhs* bx11dc@b bx11dd@b*) (bxb59@id? bx11d9@f)) bx11d7@ls/false)) (apply (lambda (bx11e3@f bx11e4@lhs* bx11e5@rhs* bx11e6@b bx11e7@b*) (if (bxb61@valid-bound-ids? bx11e4@lhs*) (bxd14@bless (cons (list 'letrec (list (list bx11e3@f (cons 'lambda (cons bx11e4@lhs* (cons bx11e6@b bx11e7@b*))))) bx11e3@f) bx11e5@rhs*)) (bxd18@invalid-fmls-error bx11c7@stx bx11e4@lhs*))) bx11d7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx11d5@t))) (bxd5e@syntax-dispatch bx11d5@t '(_ any #(each (any any)) any . each-any)))) bx11c9@t))) (bxd5e@syntax-dispatch bx11c9@t '(_ #(each (any any)) any . each-any)))) bx11c7@stx))) (set! bxd1c@let-values-macro (lambda (bx11ed@stx) ((lambda (bx11f0@rename bx11f2@rename*) (begin (set! bx11f0@rename (lambda (bx1255@x bx1256@old* bx1257@new*) (begin (if (not (bxb59@id? bx1255@x)) (bxe3e@syntax-violation '#f '"not an indentifier" bx11ed@stx bx1255@x) (void)) (if (bxb65@bound-id-member? bx1255@x bx1256@old*) (bxe3e@syntax-violation '#f '"duplicate binding" bx11ed@stx bx1255@x) (void)) ((lambda (bx125b@y) (values bx125b@y (cons bx1255@x bx1256@old*) (cons bx125b@y bx1257@new*))) (gensym (bxe44@syntax->datum bx1255@x)))))) (set! bx11f2@rename* (lambda (bx1243@x* bx1244@old* bx1245@new*) (if (null? bx1243@x*) (values '() bx1244@old* bx1245@new*) (call-with-values (lambda () (bx11f0@rename (car bx1243@x*) bx1244@old* bx1245@new*)) (lambda (bx1249@x bx124a@old* bx124b@new*) (call-with-values (lambda () (bx11f2@rename* (cdr bx1243@x*) bx124a@old* bx124b@new*)) (lambda (bx124f@x* bx1250@old* bx1251@new*) (values (cons bx1249@x bx124f@x*) bx1250@old* bx1251@new*)))))))) ((lambda (bx11f3@t) ((lambda (bx11f5@ls/false) (if bx11f5@ls/false (apply (lambda (bx11f7@b bx11f8@b*) (cons* (bxd14@bless 'let) '() bx11f7@b bx11f8@b*)) bx11f5@ls/false) ((lambda (bx11fb@t) ((lambda (bx11fd@ls/false) (if bx11fd@ls/false (apply (lambda (bx11ff@lhs* bx1200@rhs* bx1201@b bx1202@b*) (bxd14@bless ((letrec ((bx1207@f (lambda (bx1209@lhs* bx120a@rhs* bx120b@old* bx120c@new*) (if (null? bx1209@lhs*) (cons 'let (cons (map list bx120b@old* bx120c@new*) (cons bx1201@b bx1202@b*))) ((lambda (bx1211@t) ((lambda (bx1213@ls/false) (if bx1213@ls/false (apply (lambda (bx1215@x*) (call-with-values (lambda () (bx11f2@rename* bx1215@x* bx120b@old* bx120c@new*)) (lambda (bx121d@bx1218 bx121e@bx121a bx121f@bx121c) ((lambda (bx1223@new* bx1224@old* bx1225@y*) (list 'call-with-values (list 'lambda '() (car bx120a@rhs*)) (list 'lambda bx1225@y* (bx1207@f (cdr bx1209@lhs*) (cdr bx120a@rhs*) bx1224@old* bx1223@new*)))) bx121f@bx121c bx121e@bx121a bx121d@bx1218)))) bx1213@ls/false) ((lambda (bx1229@t) ((lambda (bx122b@ls/false) (if bx122b@ls/false (apply (lambda (bx122d@x* bx122e@x) (call-with-values (lambda () (bx11f0@rename bx122e@x bx120b@old* bx120c@new*)) (lambda (bx1231@y bx1232@old* bx1233@new*) (call-with-values (lambda () (bx11f2@rename* bx122d@x* bx1232@old* bx1233@new*)) (lambda (bx1237@y* bx1238@old* bx1239@new*) (list 'call-with-values (list 'lambda '() (car bx120a@rhs*)) (list 'lambda (append bx1237@y* bx1231@y) (bx1207@f (cdr bx1209@lhs*) (cdr bx120a@rhs*) bx1238@old* bx1239@new*)))))))) bx122b@ls/false) ((lambda (bx123d@t) ((lambda (bx123f@ls/false) (if bx123f@ls/false (apply (lambda (bx1241@others) (bxe3e@syntax-violation '#f '"malformed bindings" bx11ed@stx bx1241@others)) bx123f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx123d@t))) (bxd5e@syntax-dispatch bx123d@t 'any))) bx1229@t))) (bxd5e@syntax-dispatch bx1229@t '#(each+ any () any)))) bx1211@t))) (bxd5e@syntax-dispatch bx1211@t 'each-any))) (car bx1209@lhs*)))))) bx1207@f) bx11ff@lhs* bx1200@rhs* '() '()))) bx11fd@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx11fb@t))) (bxd5e@syntax-dispatch bx11fb@t '(_ #(each (any any)) any . each-any)))) bx11f3@t))) (bxd5e@syntax-dispatch bx11f3@t '(_ () any . each-any)))) bx11ed@stx))) '#f '#f))) (set! bxd1e@let*-values-macro (lambda (bx125d@stx) ((lambda (bx1260@check) (begin (set! bx1260@check (lambda (bx128f@x*) (if (not (null? bx128f@x*)) ((lambda (bx1291@x) (begin (if (not (bxb59@id? bx1291@x)) (bxe3e@syntax-violation '#f '"not an identifier" bx125d@stx bx1291@x) (void)) (bx1260@check (cdr bx128f@x*)) (if (bxb65@bound-id-member? bx1291@x (cdr bx128f@x*)) (bxe3e@syntax-violation '#f '"duplicate identifier" bx125d@stx bx1291@x) (void)))) (car bx128f@x*)) (void)))) ((lambda (bx1261@t) ((lambda (bx1263@ls/false) (if bx1263@ls/false (apply (lambda (bx1265@b bx1266@b*) (cons* (bxd14@bless 'let) '() bx1265@b bx1266@b*)) bx1263@ls/false) ((lambda (bx1269@t) ((lambda (bx126b@ls/false) (if bx126b@ls/false (apply (lambda (bx126d@lhs* bx126e@rhs* bx126f@b bx1270@b*) (bxd14@bless ((letrec ((bx1275@f (lambda (bx1277@lhs* bx1278@rhs*) (if (null? bx1277@lhs*) (cons 'begin (cons bx126f@b bx1270@b*)) ((lambda (bx127b@t) ((lambda (bx127d@ls/false) (if bx127d@ls/false (apply (lambda (bx127f@x*) (begin (bx1260@check bx127f@x*) (list 'call-with-values (list 'lambda '() (car bx1278@rhs*)) (list 'lambda bx127f@x* (bx1275@f (cdr bx1277@lhs*) (cdr bx1278@rhs*)))))) bx127d@ls/false) ((lambda (bx1281@t) ((lambda (bx1283@ls/false) (if bx1283@ls/false (apply (lambda (bx1285@x* bx1286@x) (begin (bx1260@check (cons bx1286@x bx1285@x*)) (list 'call-with-values (list 'lambda '() (car bx1278@rhs*)) (list 'lambda (append bx1285@x* bx1286@x) (bx1275@f (cdr bx1277@lhs*) (cdr bx1278@rhs*)))))) bx1283@ls/false) ((lambda (bx1289@t) ((lambda (bx128b@ls/false) (if bx128b@ls/false (apply (lambda (bx128d@others) (bxe3e@syntax-violation '#f '"malformed bindings" bx125d@stx bx128d@others)) bx128b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1289@t))) (bxd5e@syntax-dispatch bx1289@t 'any))) bx1281@t))) (bxd5e@syntax-dispatch bx1281@t '#(each+ any () any)))) bx127b@t))) (bxd5e@syntax-dispatch bx127b@t 'each-any))) (car bx1277@lhs*)))))) bx1275@f) bx126d@lhs* bx126e@rhs*))) bx126b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1269@t))) (bxd5e@syntax-dispatch bx1269@t '(_ #(each (any any)) any . each-any)))) bx1261@t))) (bxd5e@syntax-dispatch bx1261@t '(_ () any . each-any)))) bx125d@stx))) '#f))) (set! bxd20@trace-lambda-macro (lambda (bx1293@stx) ((lambda (bx1295@t) ((lambda (bx1297@ls/false) (if bx1297@ls/false (apply (lambda (bx1299@who bx129a@fmls bx129b@b bx129c@b*) (if (bxb61@valid-bound-ids? bx129a@fmls) (bxd14@bless (list 'make-traced-procedure (list 'quote bx1299@who) (cons 'lambda (cons bx129a@fmls (cons bx129b@b bx129c@b*))))) (bxd18@invalid-fmls-error bx1293@stx bx129a@fmls))) bx1297@ls/false) ((lambda (bx12a1@t) ((lambda (bx12a3@ls/false) (if bx12a3@ls/false (apply (lambda (bx12a5@who bx12a6@fmls bx12a7@last bx12a8@b bx12a9@b*) (if (bxb61@valid-bound-ids? (cons bx12a7@last bx12a6@fmls)) (bxd14@bless (list 'make-traced-procedure (list 'quote bx12a5@who) (cons 'lambda (cons (append bx12a6@fmls bx12a7@last) (cons bx12a8@b bx12a9@b*))))) (bxd18@invalid-fmls-error bx1293@stx (append bx12a6@fmls bx12a7@last)))) bx12a3@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx12a1@t))) (bxd5e@syntax-dispatch bx12a1@t '(_ any #(each+ any () any) any . each-any)))) bx1295@t))) (bxd5e@syntax-dispatch bx1295@t '(_ any each-any any . each-any)))) bx1293@stx))) (set! bxd22@trace-define-macro (lambda (bx12af@stx) ((lambda (bx12b1@t) ((lambda (bx12b3@ls/false) (if bx12b3@ls/false (apply (lambda (bx12b5@who bx12b6@fmls bx12b7@b bx12b8@b*) (if (bxb61@valid-bound-ids? bx12b6@fmls) (bxd14@bless (list 'define bx12b5@who (list 'make-traced-procedure (list 'quote bx12b5@who) (cons 'lambda (cons bx12b6@fmls (cons bx12b7@b bx12b8@b*)))))) (bxd18@invalid-fmls-error bx12af@stx bx12b6@fmls))) bx12b3@ls/false) ((lambda (bx12bd@t) ((lambda (bx12bf@ls/false) (if bx12bf@ls/false (apply (lambda (bx12c1@who bx12c2@fmls bx12c3@last bx12c4@b bx12c5@b*) (if (bxb61@valid-bound-ids? (cons bx12c3@last bx12c2@fmls)) (bxd14@bless (list 'define bx12c1@who (list 'make-traced-procedure (list 'quote bx12c1@who) (cons 'lambda (cons (append bx12c2@fmls bx12c3@last) (cons bx12c4@b bx12c5@b*)))))) (bxd18@invalid-fmls-error bx12af@stx (append bx12c2@fmls bx12c3@last)))) bx12bf@ls/false) ((lambda (bx12cb@t) ((lambda (bx12cd@ls/false) (if bx12cd@ls/false (apply (lambda (bx12cf@who bx12d0@expr) (if (bxb59@id? bx12cf@who) (bxd14@bless (list 'define bx12cf@who (list 'let (list (list 'v bx12d0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bx12cf@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bxe3e@syntax-violation '#f '"invalid name" bx12af@stx))) bx12cd@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx12cb@t))) (bxd5e@syntax-dispatch bx12cb@t '(_ any any)))) bx12bd@t))) (bxd5e@syntax-dispatch bx12bd@t '(_ (any . #(each+ any () any)) any . each-any)))) bx12b1@t))) (bxd5e@syntax-dispatch bx12b1@t '(_ (any . each-any) any . each-any)))) bx12af@stx))) (set! bxd24@trace-define-syntax-macro (lambda (bx12d3@stx) ((lambda (bx12d5@t) ((lambda (bx12d7@ls/false) (if bx12d7@ls/false (apply (lambda (bx12d9@who bx12da@expr) (if (bxb59@id? bx12d9@who) (bxd14@bless (list 'define-syntax bx12d9@who (list 'make-traced-macro (list 'quote bx12d9@who) bx12da@expr))) (bxe3e@syntax-violation '#f '"invalid name" bx12d3@stx))) bx12d7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx12d5@t))) (bxd5e@syntax-dispatch bx12d5@t '(_ any any)))) bx12d3@stx))) (set! bxd26@trace-let/rec-syntax (lambda (bx12dd@who) (lambda (bx12df@stx) ((lambda (bx12e1@t) ((lambda (bx12e3@ls/false) (if bx12e3@ls/false (apply (lambda (bx12e5@lhs* bx12e6@rhs* bx12e7@b bx12e8@b*) (if (bxb61@valid-bound-ids? bx12e5@lhs*) ((lambda (bx12ed@rhs*) (bxd14@bless (cons bx12dd@who (cons (map list bx12e5@lhs* bx12ed@rhs*) (cons bx12e7@b bx12e8@b*))))) (map (lambda (bx12ef@lhs bx12f0@rhs) (list 'make-traced-macro (list 'quote bx12ef@lhs) bx12f0@rhs)) bx12e5@lhs* bx12e6@rhs*)) (bxd18@invalid-fmls-error bx12df@stx bx12e5@lhs*))) bx12e3@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx12e1@t))) (bxd5e@syntax-dispatch bx12e1@t '(_ #(each (any any)) any . each-any)))) bx12df@stx)))) (set! bxd28@trace-let-syntax-macro (bxd26@trace-let/rec-syntax 'let-syntax)) (set! bxd2a@trace-letrec-syntax-macro (bxd26@trace-let/rec-syntax 'letrec-syntax)) (set! bxd2c@guard-macro (lambda (bx12f3@x) ((lambda (bx12f6@gen-clauses) (begin (set! bx12f6@gen-clauses (lambda (bx130d@con bx130e@outerk bx130f@clause*) ((lambda (bx1314@f bx1316@f*) (begin (set! bx1314@f (lambda (bx134d@x bx134e@k) ((lambda (bx1351@t) ((lambda (bx1353@ls/false) (if bx1353@ls/false (apply (lambda (bx1355@e bx1356@p) ((lambda (bx1359@t) (list 'let (list (list bx1359@t bx1355@e)) (list 'if bx1359@t (list bx1356@p bx1359@t) bx134e@k))) (gensym))) bx1353@ls/false) ((lambda (bx135b@t) ((lambda (bx135d@ls/false) (if bx135d@ls/false (apply (lambda (bx135f@e) ((lambda (bx1361@t) (list 'let (list (list bx1361@t bx135f@e)) (list 'if bx1361@t bx1361@t bx134e@k))) (gensym))) bx135d@ls/false) ((lambda (bx1363@t) ((lambda (bx1365@ls/false) (if bx1365@ls/false (apply (lambda (bx1367@e bx1368@v bx1369@v*) (list 'if bx1367@e (cons 'begin (cons bx1368@v bx1369@v*)) bx134e@k)) bx1365@ls/false) ((lambda (bx136d@t) ((lambda (bx136f@ls/false) (if bx136f@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid guard clause" bx134d@x)) bx136f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx136d@t))) (bxd5e@syntax-dispatch bx136d@t '_))) bx1363@t))) (bxd5e@syntax-dispatch bx1363@t '(any any . each-any)))) bx135b@t))) (bxd5e@syntax-dispatch bx135b@t '(any)))) bx1351@t))) (bxd5e@syntax-dispatch bx1351@t '(any #(scheme-id =>) any)))) bx134d@x))) (set! bx1316@f* (lambda (bx1323@x*) ((lambda (bx1325@t) ((lambda (bx1327@ls/false) (if bx1327@ls/false (apply (lambda () ((lambda (bx1329@g) (values (list bx1329@g (list 'lambda '() (list 'raise-continuable bx130d@con))) bx1329@g)) (gensym))) bx1327@ls/false) ((lambda (bx132b@t) ((lambda (bx132d@ls/false) (if bx132d@ls/false (apply (lambda (bx132f@e bx1330@e*) (values (cons 'begin (cons bx132f@e bx1330@e*)) '#f)) bx132d@ls/false) ((lambda (bx1333@t) ((lambda (bx1335@ls/false) (if bx1335@ls/false (apply (lambda (bx1337@cls bx1338@cls*) (call-with-values (lambda () (bx1316@f* bx1338@cls*)) (lambda (bx133f@bx133c bx1340@bx133e) ((lambda (bx1343@g bx1344@e) (values (bx1314@f bx1337@cls bx1344@e) bx1343@g)) bx1340@bx133e bx133f@bx133c)))) bx1335@ls/false) ((lambda (bx1347@t) ((lambda (bx1349@ls/false) (if bx1349@ls/false (apply (lambda (bx134b@others) (bxe3e@syntax-violation '#f '"invalid guard clause" bx134b@others)) bx1349@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1347@t))) (bxd5e@syntax-dispatch bx1347@t 'any))) bx1333@t))) (bxd5e@syntax-dispatch bx1333@t '(any . any)))) bx132b@t))) (bxd5e@syntax-dispatch bx132b@t '((#(scheme-id else) any . each-any))))) bx1325@t))) (bxd5e@syntax-dispatch bx1325@t '()))) bx1323@x*))) (call-with-values (lambda () (bx1316@f* bx130f@clause*)) (lambda (bx131b@bx1318 bx131c@bx131a) ((lambda (bx131f@raisek bx1320@code) (if bx131f@raisek (list (list 'call/cc (list 'lambda (list bx131f@raisek) (list bx130e@outerk (list 'lambda '() bx1320@code))))) (list bx130e@outerk (list 'lambda '() bx1320@code)))) bx131c@bx131a bx131b@bx1318))))) '#f '#f))) ((lambda (bx12f7@t) ((lambda (bx12f9@ls/false) (if (and bx12f9@ls/false (apply (lambda (bx12fb@con bx12fc@clause* bx12fd@b bx12fe@b*) (bxb59@id? bx12fb@con)) bx12f9@ls/false)) (apply (lambda (bx1303@con bx1304@clause* bx1305@b bx1306@b*) ((lambda (bx130b@outerk) (bxd14@bless (list (list 'call/cc (list 'lambda (list bx130b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bx1303@con) (bx12f6@gen-clauses bx1303@con bx130b@outerk bx1304@clause*)) (cons 'lambda (cons '() (cons bx1305@b bx1306@b*)))))))))) (gensym))) bx12f9@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx12f7@t))) (bxd5e@syntax-dispatch bx12f7@t '(_ (any . each-any) any . each-any)))) bx12f3@x))) '#f))) (set! bxd2e@define-enumeration-macro (lambda (bx1371@stx) ((lambda (bx1374@set? bx1376@remove-dups) (begin (set! bx1374@set? (lambda (bx138d@x) (or (null? bx138d@x) (and (not (memq (car bx138d@x) (cdr bx138d@x))) (bx1374@set? (cdr bx138d@x)))))) (set! bx1376@remove-dups (lambda (bx138b@ls) (if (null? bx138b@ls) '() (cons (car bx138b@ls) (bx1376@remove-dups (remq (car bx138b@ls) (cdr bx138b@ls))))))) ((lambda (bx1377@t) ((lambda (bx1379@ls/false) (if (and bx1379@ls/false (apply (lambda (bx137b@name bx137c@id* bx137d@maker) (and (bxb59@id? bx137b@name) (bxb59@id? bx137d@maker) (for-all bxb59@id? bx137c@id*))) bx1379@ls/false)) (apply (lambda (bx1381@name bx1382@id* bx1383@maker) ((lambda (bx1387@name* bx1388@mk) (bxd14@bless (list 'begin (list 'define bx1388@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bx1387@name*)))) (list 'define-syntax bx1381@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bx1387@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bx1381@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bx1383@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bx1383@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bx1387@name*)) (cons 'syntax-violation (cons (list 'quote bx1383@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bx1388@mk '('(n* ...)))))))))))) (bx1376@remove-dups (bxe44@syntax->datum bx1382@id*)) (gensym))) bx1379@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1377@t))) (bxd5e@syntax-dispatch bx1377@t '(_ any each-any any)))) bx1371@stx))) '#f '#f))) (set! bxd30@time-macro (lambda (bx138f@stx) ((lambda (bx1391@t) ((lambda (bx1393@ls/false) (if bx1393@ls/false (apply (lambda (bx1395@expr) (bxd14@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bx1395@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bx1393@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1391@t))) (bxd5e@syntax-dispatch bx1391@t '(_ any)))) bx138f@stx))) (set! bxd32@delay-macro (lambda (bx1397@stx) ((lambda (bx1399@t) ((lambda (bx139b@ls/false) (if bx139b@ls/false (apply (lambda (bx139d@expr) (bxd14@bless (list 'make-promise (list 'lambda '() bx139d@expr)))) bx139b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1399@t))) (bxd5e@syntax-dispatch bx1399@t '(_ any)))) bx1397@stx))) (set! bxd34@assert-macro (lambda (bx139f@stx) ((lambda (bx13a1@t) ((lambda (bx13a3@ls/false) (if bx13a3@ls/false (apply (lambda (bx13a5@expr) ((lambda (bx13a7@pos) (bxd14@bless (list 'unless bx13a5@expr (list 'assertion-error (list 'quote bx13a5@expr) (list 'quote bx13a7@pos))))) (or (bxe36@expression-position bx139f@stx) (bxe36@expression-position bx13a5@expr)))) bx13a3@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx13a1@t))) (bxd5e@syntax-dispatch bx13a1@t '(_ any)))) bx139f@stx))) (set! bxd36@endianness-macro (lambda (bx13a9@stx) ((lambda (bx13ab@t) ((lambda (bx13ad@ls/false) (if bx13ad@ls/false (apply (lambda (bx13af@e) ((lambda (bx13b1@t) (if (memv bx13b1@t '(little)) (bxd14@bless ''little) (if (memv bx13b1@t '(big)) (bxd14@bless ''big) (bxe3e@syntax-violation '#f '"endianness must be big or little" bx13a9@stx)))) (bxe44@syntax->datum bx13af@e))) bx13ad@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx13ab@t))) (bxd5e@syntax-dispatch bx13ab@t '(_ any)))) bx13a9@stx))) (set! bxd38@identifier-syntax-macro (lambda (bx13b3@stx) ((lambda (bx13b5@t) ((lambda (bx13b7@ls/false) (if bx13b7@ls/false (apply (lambda (bx13b9@expr) (bxd14@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bx13b9@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bx13b9@expr) '((syntax (e* ...)))))))))) bx13b7@ls/false) ((lambda (bx13bb@t) ((lambda (bx13bd@ls/false) (if (and bx13bd@ls/false (apply (lambda (bx13bf@id1 bx13c0@expr1 bx13c1@id2 bx13c2@expr2 bx13c3@expr3) (and (bxb59@id? bx13bf@id1) (bxb59@id? bx13c1@id2) (bxb59@id? bx13c2@expr2))) bx13bd@ls/false)) (apply (lambda (bx13c9@id1 bx13ca@expr1 bx13cb@id2 bx13cc@expr2 bx13cd@expr3) (bxd14@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bx13ca@expr1)) (list (list 'set! 'id bx13cc@expr2) (list 'syntax bx13cd@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bx13ca@expr1 '(e* ...))))))))) bx13bd@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx13bb@t))) (bxd5e@syntax-dispatch bx13bb@t '(_ (any any) ((#(scheme-id set!) any any) any))))) bx13b5@t))) (bxd5e@syntax-dispatch bx13b5@t '(_ any)))) bx13b3@stx))) (set! bxd3a@do-macro (lambda (bx13d3@stx) ((lambda (bx13d6@bind) (begin (set! bx13d6@bind (lambda (bx13ed@x) ((lambda (bx13ef@t) ((lambda (bx13f1@ls/false) (if bx13f1@ls/false (apply (lambda (bx13f3@x bx13f4@init) (list bx13f3@x bx13f4@init bx13f3@x)) bx13f1@ls/false) ((lambda (bx13f7@t) ((lambda (bx13f9@ls/false) (if bx13f9@ls/false (apply (lambda (bx13fb@x bx13fc@init bx13fd@step) (list bx13fb@x bx13fc@init bx13fd@step)) bx13f9@ls/false) ((lambda (bx1401@t) ((lambda (bx1403@ls/false) (if bx1403@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid binding" bx13d3@stx)) bx1403@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1401@t))) (bxd5e@syntax-dispatch bx1401@t '_))) bx13f7@t))) (bxd5e@syntax-dispatch bx13f7@t '(any any any)))) bx13ef@t))) (bxd5e@syntax-dispatch bx13ef@t '(any any)))) bx13ed@x))) ((lambda (bx13d7@t) ((lambda (bx13d9@ls/false) (if bx13d9@ls/false (apply (lambda (bx13db@binding* bx13dc@test bx13dd@expr* bx13de@command*) ((lambda (bx13e3@t) ((lambda (bx13e5@ls/false) (if bx13e5@ls/false (apply (lambda (bx13e7@x* bx13e8@init* bx13e9@step*) (if (bxb61@valid-bound-ids? bx13e7@x*) (bxd14@bless (list 'letrec (list (list 'loop (list 'lambda bx13e7@x* (list 'if bx13dc@test (cons 'begin (cons '(if #f #f) bx13dd@expr*)) (cons 'begin (append bx13de@command* (list (cons 'loop bx13e9@step*)))))))) (cons 'loop bx13e8@init*))) (bxe3e@syntax-violation '#f '"invalid bindings" bx13d3@stx))) bx13e5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx13e3@t))) (bxd5e@syntax-dispatch bx13e3@t '#(each (any any any))))) (map bx13d6@bind bx13db@binding*))) bx13d9@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx13d7@t))) (bxd5e@syntax-dispatch bx13d7@t '(_ each-any (any . each-any) . each-any)))) bx13d3@stx))) '#f))) (set! bxd3c@let*-macro (lambda (bx1405@stx) ((lambda (bx1407@t) ((lambda (bx1409@ls/false) (if (and bx1409@ls/false (apply (lambda (bx140b@lhs* bx140c@rhs* bx140d@b bx140e@b*) (for-all bxb59@id? bx140b@lhs*)) bx1409@ls/false)) (apply (lambda (bx1413@lhs* bx1414@rhs* bx1415@b bx1416@b*) (bxd14@bless ((letrec ((bx141b@f (lambda (bx141d@x*) (if (null? bx141d@x*) (cons 'let (cons '() (cons bx1415@b bx1416@b*))) (list 'let (list (car bx141d@x*)) (bx141b@f (cdr bx141d@x*))))))) bx141b@f) (map list bx1413@lhs* bx1414@rhs*)))) bx1409@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1407@t))) (bxd5e@syntax-dispatch bx1407@t '(_ #(each (any any)) any . each-any)))) bx1405@stx))) (set! bxd3e@or-macro (lambda (bx141f@stx) ((lambda (bx1421@t) ((lambda (bx1423@ls/false) (if bx1423@ls/false (apply (lambda () '#f) bx1423@ls/false) ((lambda (bx1425@t) ((lambda (bx1427@ls/false) (if bx1427@ls/false (apply (lambda (bx1429@e bx142a@e*) (bxd14@bless ((letrec ((bx142d@f (lambda (bx142f@e bx1430@e*) (if (null? bx1430@e*) (list 'begin '#f bx142f@e) (list 'let (list (list 't bx142f@e)) (list 'if 't 't (bx142d@f (car bx1430@e*) (cdr bx1430@e*)))))))) bx142d@f) bx1429@e bx142a@e*))) bx1427@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1425@t))) (bxd5e@syntax-dispatch bx1425@t '(_ any . each-any)))) bx1421@t))) (bxd5e@syntax-dispatch bx1421@t '(_)))) bx141f@stx))) (set! bxd40@and-macro (lambda (bx1433@stx) ((lambda (bx1435@t) ((lambda (bx1437@ls/false) (if bx1437@ls/false (apply (lambda () '#t) bx1437@ls/false) ((lambda (bx1439@t) ((lambda (bx143b@ls/false) (if bx143b@ls/false (apply (lambda (bx143d@e bx143e@e*) (bxd14@bless ((letrec ((bx1441@f (lambda (bx1443@e bx1444@e*) (if (null? bx1444@e*) (list 'begin '#f bx1443@e) (cons 'if (cons bx1443@e (cons (bx1441@f (car bx1444@e*) (cdr bx1444@e*)) '(#f)))))))) bx1441@f) bx143d@e bx143e@e*))) bx143b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1439@t))) (bxd5e@syntax-dispatch bx1439@t '(_ any . each-any)))) bx1435@t))) (bxd5e@syntax-dispatch bx1435@t '(_)))) bx1433@stx))) (set! bxd42@cond-macro (lambda (bx1447@stx) ((lambda (bx1449@t) ((lambda (bx144b@ls/false) (if bx144b@ls/false (apply (lambda (bx144d@cls bx144e@cls*) (bxd14@bless ((letrec ((bx1451@f (lambda (bx1453@cls bx1454@cls*) (if (null? bx1454@cls*) ((lambda (bx1457@t) ((lambda (bx1459@ls/false) (if bx1459@ls/false (apply (lambda (bx145b@e bx145c@e*) (cons 'begin (cons bx145b@e bx145c@e*))) bx1459@ls/false) ((lambda (bx145f@t) ((lambda (bx1461@ls/false) (if bx1461@ls/false (apply (lambda (bx1463@e bx1464@p) (list 'let (list (list 't bx1463@e)) (list 'if 't (cons bx1464@p '(t))))) bx1461@ls/false) ((lambda (bx1467@t) ((lambda (bx1469@ls/false) (if bx1469@ls/false (apply (lambda (bx146b@e) (cons 'or (cons bx146b@e '((if #f #f))))) bx1469@ls/false) ((lambda (bx146d@t) ((lambda (bx146f@ls/false) (if bx146f@ls/false (apply (lambda (bx1471@e bx1472@e*) (list 'if bx1471@e (cons 'begin bx1472@e*))) bx146f@ls/false) ((lambda (bx1475@t) ((lambda (bx1477@ls/false) (if bx1477@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid last clause" bx1447@stx)) bx1477@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1475@t))) (bxd5e@syntax-dispatch bx1475@t '_))) bx146d@t))) (bxd5e@syntax-dispatch bx146d@t '(any . each-any)))) bx1467@t))) (bxd5e@syntax-dispatch bx1467@t '(any)))) bx145f@t))) (bxd5e@syntax-dispatch bx145f@t '(any #(scheme-id =>) any)))) bx1457@t))) (bxd5e@syntax-dispatch bx1457@t '(#(scheme-id else) any . each-any)))) bx1453@cls) ((lambda (bx1479@t) ((lambda (bx147b@ls/false) (if bx147b@ls/false (apply (lambda (bx147d@e bx147e@e*) (bxe3e@syntax-violation '#f '"incorrect position of keyword else" bx1447@stx)) bx147b@ls/false) ((lambda (bx1481@t) ((lambda (bx1483@ls/false) (if bx1483@ls/false (apply (lambda (bx1485@e bx1486@p) (list 'let (list (list 't bx1485@e)) (list 'if 't (cons bx1486@p '(t)) (bx1451@f (car bx1454@cls*) (cdr bx1454@cls*))))) bx1483@ls/false) ((lambda (bx1489@t) ((lambda (bx148b@ls/false) (if bx148b@ls/false (apply (lambda (bx148d@e) (list 'or bx148d@e (bx1451@f (car bx1454@cls*) (cdr bx1454@cls*)))) bx148b@ls/false) ((lambda (bx148f@t) ((lambda (bx1491@ls/false) (if bx1491@ls/false (apply (lambda (bx1493@e bx1494@e*) (list 'if bx1493@e (cons 'begin bx1494@e*) (bx1451@f (car bx1454@cls*) (cdr bx1454@cls*)))) bx1491@ls/false) ((lambda (bx1497@t) ((lambda (bx1499@ls/false) (if bx1499@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid last clause" bx1447@stx)) bx1499@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1497@t))) (bxd5e@syntax-dispatch bx1497@t '_))) bx148f@t))) (bxd5e@syntax-dispatch bx148f@t '(any . each-any)))) bx1489@t))) (bxd5e@syntax-dispatch bx1489@t '(any)))) bx1481@t))) (bxd5e@syntax-dispatch bx1481@t '(any #(scheme-id =>) any)))) bx1479@t))) (bxd5e@syntax-dispatch bx1479@t '(#(scheme-id else) any . each-any)))) bx1453@cls))))) bx1451@f) bx144d@cls bx144e@cls*))) bx144b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1449@t))) (bxd5e@syntax-dispatch bx1449@t '(_ any . each-any)))) bx1447@stx))) (set! bxd44@do-include (lambda (bx149b@stx bx149c@id bx149d@filename) ((lambda (bx14a1@filename) (begin (if (not (and (string? bx14a1@filename) (bxb59@id? bx149c@id))) (bxe3e@syntax-violation '#f '"invalid syntax" bx149b@stx) (void)) (cons (bxd14@bless 'begin) (with-input-from-file bx14a1@filename (lambda () ((letrec ((bx14a3@f (lambda (bx14a5@ls) ((lambda (bx14a7@x) (if (eof-object? bx14a7@x) (reverse bx14a5@ls) (bx14a3@f (cons (bxb39@datum->stx bx149c@id bx14a7@x) bx14a5@ls)))) (bx6ab@bx57d@read-annotated))))) bx14a3@f) '())))))) (bxb6d@stx->datum bx149d@filename)))) (set! bxd46@include-macro (lambda (bx14a9@e) ((lambda (bx14ab@t) ((lambda (bx14ad@ls/false) (if bx14ad@ls/false (apply (lambda (bx14af@id bx14b0@filename) (bxd44@do-include bx14a9@e bx14af@id bx14b0@filename)) bx14ad@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx14ab@t))) (bxd5e@syntax-dispatch bx14ab@t '(any any)))) bx14a9@e))) (set! bxd48@include-into-macro (lambda (bx14b3@e) ((lambda (bx14b5@t) ((lambda (bx14b7@ls/false) (if bx14b7@ls/false (apply (lambda (bx14b9@id bx14ba@filename) (bxd44@do-include bx14b3@e bx14b9@id bx14ba@filename)) bx14b7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx14b5@t))) (bxd5e@syntax-dispatch bx14b5@t '(_ any any)))) bx14b3@e))) (set! bxd4a@syntax-rules-macro (lambda (bx14bd@e) ((lambda (bx14bf@t) ((lambda (bx14c1@ls/false) (if bx14c1@ls/false (apply (lambda (bx14c3@lits bx14c4@pat* bx14c5@tmp*) (begin (bxd64@verify-literals bx14c3@lits bx14bd@e) (bxd14@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bx14c3@lits (map (lambda (bx14c9@pat bx14ca@tmp) ((lambda (bx14cd@t) ((lambda (bx14cf@ls/false) (if bx14cf@ls/false (apply (lambda (bx14d1@rest) (list (cons 'g bx14d1@rest) (list 'syntax bx14ca@tmp))) bx14cf@ls/false) ((lambda (bx14d3@t) ((lambda (bx14d5@ls/false) (if bx14d5@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid syntax-rules pattern" bx14bd@e bx14c9@pat)) bx14d5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx14d3@t))) (bxd5e@syntax-dispatch bx14d3@t '_))) bx14cd@t))) (bxd5e@syntax-dispatch bx14cd@t '(_ . any)))) bx14c9@pat)) bx14c4@pat* bx14c5@tmp*)))))))) bx14c1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx14bf@t))) (bxd5e@syntax-dispatch bx14bf@t '(_ each-any . #(each (any any)))))) bx14bd@e))) (set! bxd4c@quasiquote-macro ((lambda () ((lambda (bx14d8@datum bx14f4@quasicons* bx14f6@quasicons bx14f8@quasiappend bx14fa@quasivector bx14fc@vquasi bx14fe@quasi) (begin (set! bx14d8@datum (lambda (bx15d9@x) (list (bxce8@scheme-stx 'quote) (bxb41@mkstx bx15d9@x '() '() '())))) (set! bx14f4@quasicons* (lambda (bx15d1@x bx15d2@y) ((letrec ((bx15d5@f (lambda (bx15d7@x) (if (null? bx15d7@x) bx15d2@y (bx14f6@quasicons (car bx15d7@x) (bx15d5@f (cdr bx15d7@x))))))) bx15d5@f) bx15d1@x))) (set! bx14f6@quasicons (lambda (bx15ab@x bx15ac@y) ((lambda (bx15af@t) ((lambda (bx15b1@ls/false) (if bx15b1@ls/false (apply (lambda (bx15b3@dy) ((lambda (bx15b5@t) ((lambda (bx15b7@ls/false) (if bx15b7@ls/false (apply (lambda (bx15b9@dx) (list (bxce8@scheme-stx 'quote) (cons bx15b9@dx bx15b3@dy))) bx15b7@ls/false) ((lambda (bx15bb@t) ((lambda (bx15bd@ls/false) (if bx15bd@ls/false (apply (lambda () ((lambda (bx15bf@t) ((lambda (bx15c1@ls/false) (if bx15c1@ls/false (apply (lambda () (list (bxce8@scheme-stx 'list) bx15ab@x)) bx15c1@ls/false) ((lambda (bx15c3@t) ((lambda (bx15c5@ls/false) (if bx15c5@ls/false (apply (lambda () (list (bxce8@scheme-stx 'cons) bx15ab@x bx15ac@y)) bx15c5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx15c3@t))) (bxd5e@syntax-dispatch bx15c3@t '_))) bx15bf@t))) (bxd5e@syntax-dispatch bx15bf@t '()))) bx15b3@dy)) bx15bd@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx15bb@t))) (bxd5e@syntax-dispatch bx15bb@t '_))) bx15b5@t))) (bxd5e@syntax-dispatch bx15b5@t '(#(scheme-id quote) any)))) bx15ab@x)) bx15b1@ls/false) ((lambda (bx15c7@t) ((lambda (bx15c9@ls/false) (if bx15c9@ls/false (apply (lambda (bx15cb@stuff) (cons* (bxce8@scheme-stx 'list) bx15ab@x bx15cb@stuff)) bx15c9@ls/false) ((lambda (bx15cd@t) ((lambda (bx15cf@ls/false) (if bx15cf@ls/false (apply (lambda () (list (bxce8@scheme-stx 'cons) bx15ab@x bx15ac@y)) bx15cf@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx15cd@t))) (bxd5e@syntax-dispatch bx15cd@t '_))) bx15c7@t))) (bxd5e@syntax-dispatch bx15c7@t '(#(scheme-id list) . each-any)))) bx15af@t))) (bxd5e@syntax-dispatch bx15af@t '(#(scheme-id quote) any)))) bx15ac@y))) (set! bx14f8@quasiappend (lambda (bx1591@x bx1592@y) ((lambda (bx1595@ls) (if (null? bx1595@ls) (list (bxce8@scheme-stx 'quote) '()) (if (null? (cdr bx1595@ls)) (car bx1595@ls) (cons* (bxce8@scheme-stx 'append) bx1595@ls)))) ((letrec ((bx1597@f (lambda (bx1599@x) (if (null? bx1599@x) ((lambda (bx159b@t) ((lambda (bx159d@ls/false) (if bx159d@ls/false (apply (lambda () '()) bx159d@ls/false) ((lambda (bx159f@t) ((lambda (bx15a1@ls/false) (if bx15a1@ls/false (apply (lambda () (list bx1592@y)) bx15a1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx159f@t))) (bxd5e@syntax-dispatch bx159f@t '_))) bx159b@t))) (bxd5e@syntax-dispatch bx159b@t '(#(scheme-id quote) ())))) bx1592@y) ((lambda (bx15a3@t) ((lambda (bx15a5@ls/false) (if bx15a5@ls/false (apply (lambda () (bx1597@f (cdr bx1599@x))) bx15a5@ls/false) ((lambda (bx15a7@t) ((lambda (bx15a9@ls/false) (if bx15a9@ls/false (apply (lambda () (cons (car bx1599@x) (bx1597@f (cdr bx1599@x)))) bx15a9@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx15a7@t))) (bxd5e@syntax-dispatch bx15a7@t '_))) bx15a3@t))) (bxd5e@syntax-dispatch bx15a3@t '(#(scheme-id quote) ())))) (car bx1599@x)))))) bx1597@f) bx1591@x)))) (set! bx14fa@quasivector (lambda (bx155f@x) ((lambda (bx1561@pat-x) ((lambda (bx1563@t) ((lambda (bx1565@ls/false) (if bx1565@ls/false (apply (lambda (bx1567@x*) (list (bxce8@scheme-stx 'quote) (list->vector bx1567@x*))) bx1565@ls/false) ((lambda (bx1569@t) ((lambda (bx156b@ls/false) (if bx156b@ls/false (apply (lambda () ((letrec ((bx156d@f (lambda (bx156f@x bx1570@k) ((lambda (bx1573@t) ((lambda (bx1575@ls/false) (if bx1575@ls/false (apply (lambda (bx1577@x*) (bx1570@k (map (lambda (bx1579@x) (list (bxce8@scheme-stx 'quote) bx1579@x)) bx1577@x*))) bx1575@ls/false) ((lambda (bx157b@t) ((lambda (bx157d@ls/false) (if bx157d@ls/false (apply (lambda (bx157f@x*) (bx1570@k bx157f@x*)) bx157d@ls/false) ((lambda (bx1581@t) ((lambda (bx1583@ls/false) (if bx1583@ls/false (apply (lambda (bx1585@x bx1586@y) (bx156d@f bx1586@y (lambda (bx1589@ls) (bx1570@k (cons bx1585@x bx1589@ls))))) bx1583@ls/false) ((lambda (bx158b@t) ((lambda (bx158d@ls/false) (if bx158d@ls/false (apply (lambda () (list (bxce8@scheme-stx 'list->vector) bx1561@pat-x)) bx158d@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx158b@t))) (bxd5e@syntax-dispatch bx158b@t '_))) bx1581@t))) (bxd5e@syntax-dispatch bx1581@t '(#(scheme-id cons) any any)))) bx157b@t))) (bxd5e@syntax-dispatch bx157b@t '(#(scheme-id list) . each-any)))) bx1573@t))) (bxd5e@syntax-dispatch bx1573@t '(#(scheme-id quote) each-any)))) bx156f@x)))) bx156d@f) bx155f@x (lambda (bx158f@ls) (cons* (bxce8@scheme-stx 'vector) bx158f@ls)))) bx156b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1569@t))) (bxd5e@syntax-dispatch bx1569@t '_))) bx1563@t))) (bxd5e@syntax-dispatch bx1563@t '(#(scheme-id quote) each-any)))) bx1561@pat-x)) bx155f@x))) (set! bx14fc@vquasi (lambda (bx153d@p bx153e@lev) ((lambda (bx1541@t) ((lambda (bx1543@ls/false) (if bx1543@ls/false (apply (lambda (bx1545@p bx1546@q) ((lambda (bx1549@t) ((lambda (bx154b@ls/false) (if bx154b@ls/false (apply (lambda (bx154d@p) (if (= bx153e@lev '0) (bx14f4@quasicons* bx154d@p (bx14fc@vquasi bx1546@q bx153e@lev)) (bx14f6@quasicons (bx14f6@quasicons (bx14d8@datum 'unquote) (bx14fe@quasi bx154d@p (- bx153e@lev '1))) (bx14fc@vquasi bx1546@q bx153e@lev)))) bx154b@ls/false) ((lambda (bx154f@t) ((lambda (bx1551@ls/false) (if bx1551@ls/false (apply (lambda (bx1553@p) (if (= bx153e@lev '0) (bx14f8@quasiappend bx1553@p (bx14fc@vquasi bx1546@q bx153e@lev)) (bx14f6@quasicons (bx14f6@quasicons (bx14d8@datum 'unquote-splicing) (bx14fe@quasi bx1553@p (- bx153e@lev '1))) (bx14fc@vquasi bx1546@q bx153e@lev)))) bx1551@ls/false) ((lambda (bx1555@t) ((lambda (bx1557@ls/false) (if bx1557@ls/false (apply (lambda (bx1559@p) (bx14f6@quasicons (bx14fe@quasi bx1559@p bx153e@lev) (bx14fc@vquasi bx1546@q bx153e@lev))) bx1557@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1555@t))) (bxd5e@syntax-dispatch bx1555@t 'any))) bx154f@t))) (bxd5e@syntax-dispatch bx154f@t '(#(scheme-id unquote-splicing) . each-any)))) bx1549@t))) (bxd5e@syntax-dispatch bx1549@t '(#(scheme-id unquote) . each-any)))) bx1545@p)) bx1543@ls/false) ((lambda (bx155b@t) ((lambda (bx155d@ls/false) (if bx155d@ls/false (apply (lambda () (list (bxce8@scheme-stx 'quote) '())) bx155d@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx155b@t))) (bxd5e@syntax-dispatch bx155b@t '()))) bx1541@t))) (bxd5e@syntax-dispatch bx1541@t '(any . any)))) bx153d@p))) (set! bx14fe@quasi (lambda (bx1507@p bx1508@lev) ((lambda (bx150b@t) ((lambda (bx150d@ls/false) (if bx150d@ls/false (apply (lambda (bx150f@p) (if (= bx1508@lev '0) bx150f@p (bx14f6@quasicons (bx14d8@datum 'unquote) (bx14fe@quasi (list bx150f@p) (- bx1508@lev '1))))) bx150d@ls/false) ((lambda (bx1511@t) ((lambda (bx1513@ls/false) (if bx1513@ls/false (apply (lambda (bx1515@p bx1516@q) (if (= bx1508@lev '0) (bx14f4@quasicons* bx1515@p (bx14fe@quasi bx1516@q bx1508@lev)) (bx14f6@quasicons (bx14f6@quasicons (bx14d8@datum 'unquote) (bx14fe@quasi bx1515@p (- bx1508@lev '1))) (bx14fe@quasi bx1516@q bx1508@lev)))) bx1513@ls/false) ((lambda (bx1519@t) ((lambda (bx151b@ls/false) (if bx151b@ls/false (apply (lambda (bx151d@p bx151e@q) (if (= bx1508@lev '0) (bx14f8@quasiappend bx151d@p (bx14fe@quasi bx151e@q bx1508@lev)) (bx14f6@quasicons (bx14f6@quasicons (bx14d8@datum 'unquote-splicing) (bx14fe@quasi bx151d@p (- bx1508@lev '1))) (bx14fe@quasi bx151e@q bx1508@lev)))) bx151b@ls/false) ((lambda (bx1521@t) ((lambda (bx1523@ls/false) (if bx1523@ls/false (apply (lambda (bx1525@p) (bx14f6@quasicons (bx14d8@datum 'quasiquote) (bx14fe@quasi (list bx1525@p) (+ bx1508@lev '1)))) bx1523@ls/false) ((lambda (bx1527@t) ((lambda (bx1529@ls/false) (if bx1529@ls/false (apply (lambda (bx152b@p bx152c@q) (bx14f6@quasicons (bx14fe@quasi bx152b@p bx1508@lev) (bx14fe@quasi bx152c@q bx1508@lev))) bx1529@ls/false) ((lambda (bx152f@t) ((lambda (bx1531@ls/false) (if (and bx1531@ls/false (apply (lambda (bx1533@x) (not (bxb25@stx? bx1533@x))) bx1531@ls/false)) (apply (lambda (bx1535@x) (bx14fa@quasivector (bx14fc@vquasi bx1535@x bx1508@lev))) bx1531@ls/false) ((lambda (bx1537@t) ((lambda (bx1539@ls/false) (if bx1539@ls/false (apply (lambda (bx153b@p) (list (bxce8@scheme-stx 'quote) bx153b@p)) bx1539@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1537@t))) (bxd5e@syntax-dispatch bx1537@t 'any))) bx152f@t))) (bxd5e@syntax-dispatch bx152f@t '#(vector each-any)))) bx1527@t))) (bxd5e@syntax-dispatch bx1527@t '(any . any)))) bx1521@t))) (bxd5e@syntax-dispatch bx1521@t '(#(scheme-id quasiquote) any)))) bx1519@t))) (bxd5e@syntax-dispatch bx1519@t '((#(scheme-id unquote-splicing) . each-any) . any)))) bx1511@t))) (bxd5e@syntax-dispatch bx1511@t '((#(scheme-id unquote) . each-any) . any)))) bx150b@t))) (bxd5e@syntax-dispatch bx150b@t '(#(scheme-id unquote) any)))) bx1507@p))) (lambda (bx14ff@x) ((lambda (bx1501@t) ((lambda (bx1503@ls/false) (if bx1503@ls/false (apply (lambda (bx1505@e) (bx14fe@quasi bx1505@e '0)) bx1503@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1501@t))) (bxd5e@syntax-dispatch bx1501@t '(_ any)))) bx14ff@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! bxd4e@quasisyntax-macro ((lambda () ((lambda (bx15dc@quasi) (begin (set! bx15dc@quasi (lambda (bx15f7@p bx15f8@lev) ((lambda (bx15fb@t) ((lambda (bx15fd@ls/false) (if bx15fd@ls/false (apply (lambda (bx15ff@p) (if (= bx15f8@lev '0) ((lambda (bx1601@g) (values (list bx1601@g) (list bx15ff@p) bx1601@g)) (gensym)) (call-with-values (lambda () (bx15dc@quasi bx15ff@p (- bx15f8@lev '1))) (lambda (bx1609@bx1604 bx160a@bx1606 bx160b@bx1608) ((lambda (bx160f@p bx1610@rhs* bx1611@lhs*) (values bx1611@lhs* bx1610@rhs* (list 'unsyntax bx160f@p))) bx160b@bx1608 bx160a@bx1606 bx1609@bx1604))))) bx15fd@ls/false) ((lambda (bx1615@t) ((lambda (bx1617@ls/false) (if (and bx1617@ls/false (apply (lambda () (= bx15f8@lev '0)) bx1617@ls/false)) (apply (lambda () (bxe3e@syntax-violation '#f '"incorrect use of unsyntax" bx15f7@p)) bx1617@ls/false) ((lambda (bx1619@t) ((lambda (bx161b@ls/false) (if bx161b@ls/false (apply (lambda (bx161d@p* bx161e@q) (call-with-values (lambda () (bx15dc@quasi bx161e@q bx15f8@lev)) (lambda (bx1627@bx1622 bx1628@bx1624 bx1629@bx1626) ((lambda (bx162d@q bx162e@rhs* bx162f@lhs*) (if (= bx15f8@lev '0) ((lambda (bx1633@g*) (values (append bx1633@g* bx162f@lhs*) (append bx161d@p* bx162e@rhs*) (append bx1633@g* bx162d@q))) (map (lambda (bx1635@x) (gensym)) bx161d@p*)) (call-with-values (lambda () (bx15dc@quasi bx161d@p* (- bx15f8@lev '1))) (lambda (bx163d@bx1638 bx163e@bx163a bx163f@bx163c) ((lambda (bx1643@p* bx1644@rhs2* bx1645@lhs2*) (values (append bx1645@lhs2* bx162f@lhs*) (append bx1644@rhs2* bx162e@rhs*) (cons (cons 'unsyntax bx1643@p*) bx162d@q))) bx163f@bx163c bx163e@bx163a bx163d@bx1638))))) bx1629@bx1626 bx1628@bx1624 bx1627@bx1622)))) bx161b@ls/false) ((lambda (bx1649@t) ((lambda (bx164b@ls/false) (if bx164b@ls/false (apply (lambda (bx164d@p* bx164e@q) (call-with-values (lambda () (bx15dc@quasi bx164e@q bx15f8@lev)) (lambda (bx1657@bx1652 bx1658@bx1654 bx1659@bx1656) ((lambda (bx165d@q bx165e@rhs* bx165f@lhs*) (if (= bx15f8@lev '0) ((lambda (bx1663@g*) (values (append (map (lambda (bx1665@g) (cons bx1665@g '(...))) bx1663@g*) bx165f@lhs*) (append bx164d@p* bx165e@rhs*) (append (apply append (map (lambda (bx1667@g) (cons bx1667@g '(...))) bx1663@g*)) bx165d@q))) (map (lambda (bx1669@x) (gensym)) bx164d@p*)) (call-with-values (lambda () (bx15dc@quasi bx164d@p* (- bx15f8@lev '1))) (lambda (bx1671@bx166c bx1672@bx166e bx1673@bx1670) ((lambda (bx1677@p* bx1678@rhs2* bx1679@lhs2*) (values (append bx1679@lhs2* bx165f@lhs*) (append bx1678@rhs2* bx165e@rhs*) (cons (cons 'unsyntax-splicing bx1677@p*) bx165d@q))) bx1673@bx1670 bx1672@bx166e bx1671@bx166c))))) bx1659@bx1656 bx1658@bx1654 bx1657@bx1652)))) bx164b@ls/false) ((lambda (bx167d@t) ((lambda (bx167f@ls/false) (if (and bx167f@ls/false (apply (lambda () (= bx15f8@lev '0)) bx167f@ls/false)) (apply (lambda () (bxe3e@syntax-violation '#f '"incorrect use of unsyntax-splicing" bx15f7@p)) bx167f@ls/false) ((lambda (bx1681@t) ((lambda (bx1683@ls/false) (if bx1683@ls/false (apply (lambda (bx1685@p) (call-with-values (lambda () (bx15dc@quasi bx1685@p (+ bx15f8@lev '1))) (lambda (bx168d@bx1688 bx168e@bx168a bx168f@bx168c) ((lambda (bx1693@p bx1694@rhs* bx1695@lhs*) (values bx1695@lhs* bx1694@rhs* (list 'quasisyntax bx1693@p))) bx168f@bx168c bx168e@bx168a bx168d@bx1688)))) bx1683@ls/false) ((lambda (bx1699@t) ((lambda (bx169b@ls/false) (if bx169b@ls/false (apply (lambda (bx169d@p bx169e@q) (call-with-values (lambda () (bx15dc@quasi bx169d@p bx15f8@lev)) (lambda (bx16ad@bx16a2 bx16ae@bx16a4 bx16af@bx16a6) (call-with-values (lambda () (bx15dc@quasi bx169e@q bx15f8@lev)) (lambda (bx16b3@bx16a8 bx16b4@bx16aa bx16b5@bx16ac) ((lambda (bx16b9@q bx16ba@rhs2* bx16bb@lhs2* bx16bc@p bx16bd@rhs* bx16be@lhs*) (values (append bx16bb@lhs2* bx16be@lhs*) (append bx16ba@rhs2* bx16bd@rhs*) (cons bx16bc@p bx16b9@q))) bx16b5@bx16ac bx16b4@bx16aa bx16b3@bx16a8 bx16af@bx16a6 bx16ae@bx16a4 bx16ad@bx16a2)))))) bx169b@ls/false) ((lambda (bx16c5@t) ((lambda (bx16c7@ls/false) (if bx16c7@ls/false (apply (lambda (bx16c9@x*) (call-with-values (lambda () (bx15dc@quasi bx16c9@x* bx15f8@lev)) (lambda (bx16d1@bx16cc bx16d2@bx16ce bx16d3@bx16d0) ((lambda (bx16d7@x* bx16d8@rhs* bx16d9@lhs*) (values bx16d9@lhs* bx16d8@rhs* (list->vector bx16d7@x*))) bx16d3@bx16d0 bx16d2@bx16ce bx16d1@bx16cc)))) bx16c7@ls/false) ((lambda (bx16dd@t) ((lambda (bx16df@ls/false) (if bx16df@ls/false (apply (lambda () (values '() '() bx15f7@p)) bx16df@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx16dd@t))) (bxd5e@syntax-dispatch bx16dd@t '_))) bx16c5@t))) (bxd5e@syntax-dispatch bx16c5@t '#(vector each-any)))) bx1699@t))) (bxd5e@syntax-dispatch bx1699@t '(any . any)))) bx1681@t))) (bxd5e@syntax-dispatch bx1681@t '(#(scheme-id quasisyntax) any)))) bx167d@t))) (bxd5e@syntax-dispatch bx167d@t '#(scheme-id unsyntax-splicing)))) bx1649@t))) (bxd5e@syntax-dispatch bx1649@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) bx1619@t))) (bxd5e@syntax-dispatch bx1619@t '((#(scheme-id unsyntax) . each-any) . any)))) bx1615@t))) (bxd5e@syntax-dispatch bx1615@t '#(scheme-id unsyntax)))) bx15fb@t))) (bxd5e@syntax-dispatch bx15fb@t '(#(scheme-id unsyntax) any)))) bx15f7@p))) (lambda (bx15dd@x) ((lambda (bx15df@t) ((lambda (bx15e1@ls/false) (if bx15e1@ls/false (apply (lambda (bx15e3@e) (call-with-values (lambda () (bx15dc@quasi bx15e3@e '0)) (lambda (bx15eb@bx15e6 bx15ec@bx15e8 bx15ed@bx15ea) ((lambda (bx15f1@v bx15f2@rhs* bx15f3@lhs*) (bxd14@bless (list 'syntax-case (cons 'list bx15f2@rhs*) '() (list bx15f3@lhs* (list 'syntax bx15f1@v))))) bx15ed@bx15ea bx15ec@bx15e8 bx15eb@bx15e6)))) bx15e1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx15df@t))) (bxd5e@syntax-dispatch bx15df@t '(_ any)))) bx15dd@x)))) '#f)))) (set! bxd50@define-struct-macro (lambda (bx16e1@stx) (bxe3e@syntax-violation '#f '"define-struct not supported" bx16e1@stx))) (set! bxd52@define-record-type-macro (lambda (bx16e3@x) ((lambda (bx16e6@id bx16e8@get-record-name bx16ea@get-record-constructor-name bx16ec@get-record-predicate-name bx16ee@get-clause bx16f0@foo-rtd-code bx16f2@parent-rtd-code bx16f4@parent-rcd-code bx16f6@foo-rcd-code bx16f8@get-protocol-code bx16fa@get-fields bx16fc@get-mutator-indices bx16fe@get-mutators bx1700@get-accessors bx1702@enumerate bx1704@do-define-record bx1706@verify-clauses) (begin (set! bx16e6@id (lambda (bx18d9@ctxt . bx18db@str*) (bxe42@datum->syntax bx18d9@ctxt (string->symbol (apply string-append (map (lambda (bx18dd@x) (if (symbol? bx18dd@x) (symbol->string bx18dd@x) (if (string? bx18dd@x) bx18dd@x (assertion-violation 'define-record-type '"BUG")))) bx18db@str*)))))) (set! bx16e8@get-record-name (lambda (bx18c7@spec) ((lambda (bx18c9@t) ((lambda (bx18cb@ls/false) (if bx18cb@ls/false (apply (lambda (bx18cd@foo bx18ce@make-foo bx18cf@foo?) bx18cd@foo) bx18cb@ls/false) ((lambda (bx18d3@t) ((lambda (bx18d5@ls/false) (if bx18d5@ls/false (apply (lambda (bx18d7@foo) bx18d7@foo) bx18d5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx18d3@t))) (bxd5e@syntax-dispatch bx18d3@t 'any))) bx18c9@t))) (bxd5e@syntax-dispatch bx18c9@t '(any any any)))) bx18c7@spec))) (set! bx16ea@get-record-constructor-name (lambda (bx18b3@spec) ((lambda (bx18b5@t) ((lambda (bx18b7@ls/false) (if bx18b7@ls/false (apply (lambda (bx18b9@foo bx18ba@make-foo bx18bb@foo?) bx18ba@make-foo) bx18b7@ls/false) ((lambda (bx18bf@t) ((lambda (bx18c1@ls/false) (if (and bx18c1@ls/false (apply (lambda (bx18c3@foo) (bxb59@id? bx18c3@foo)) bx18c1@ls/false)) (apply (lambda (bx18c5@foo) (bx16e6@id bx18c5@foo '"make-" (bxb6d@stx->datum bx18c5@foo))) bx18c1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx18bf@t))) (bxd5e@syntax-dispatch bx18bf@t 'any))) bx18b5@t))) (bxd5e@syntax-dispatch bx18b5@t '(any any any)))) bx18b3@spec))) (set! bx16ec@get-record-predicate-name (lambda (bx189f@spec) ((lambda (bx18a1@t) ((lambda (bx18a3@ls/false) (if bx18a3@ls/false (apply (lambda (bx18a5@foo bx18a6@make-foo bx18a7@foo?) bx18a7@foo?) bx18a3@ls/false) ((lambda (bx18ab@t) ((lambda (bx18ad@ls/false) (if (and bx18ad@ls/false (apply (lambda (bx18af@foo) (bxb59@id? bx18af@foo)) bx18ad@ls/false)) (apply (lambda (bx18b1@foo) (bx16e6@id bx18b1@foo (bxb6d@stx->datum bx18b1@foo) '"?")) bx18ad@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx18ab@t))) (bxd5e@syntax-dispatch bx18ab@t 'any))) bx18a1@t))) (bxd5e@syntax-dispatch bx18a1@t '(any any any)))) bx189f@spec))) (set! bx16ee@get-clause (lambda (bx188d@id bx188e@ls) ((lambda (bx1891@t) ((lambda (bx1893@ls/false) (if bx1893@ls/false (apply (lambda () '#f) bx1893@ls/false) ((lambda (bx1895@t) ((lambda (bx1897@ls/false) (if bx1897@ls/false (apply (lambda (bx1899@x bx189a@rest bx189b@ls) (if (bxb5f@free-id=? (bxd14@bless bx188d@id) bx1899@x) (cons bx1899@x bx189a@rest) (bx16ee@get-clause bx188d@id bx189b@ls))) bx1897@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1895@t))) (bxd5e@syntax-dispatch bx1895@t '((any . any) . any)))) bx1891@t))) (bxd5e@syntax-dispatch bx1891@t '()))) bx188e@ls))) (set! bx16f0@foo-rtd-code (lambda (bx183b@name bx183c@clause* bx183d@parent-rtd-code) ((lambda (bx1842@convert-field-spec*) (begin (set! bx1842@convert-field-spec* (lambda (bx1873@ls) (list->vector (map (lambda (bx1875@x) ((lambda (bx1877@t) ((lambda (bx1879@ls/false) (if bx1879@ls/false (apply (lambda (bx187b@name bx187c@rest) (list 'mutable bx187b@name)) bx1879@ls/false) ((lambda (bx187f@t) ((lambda (bx1881@ls/false) (if bx1881@ls/false (apply (lambda (bx1883@name bx1884@rest) (list 'immutable bx1883@name)) bx1881@ls/false) ((lambda (bx1887@t) ((lambda (bx1889@ls/false) (if bx1889@ls/false (apply (lambda (bx188b@name) (list 'immutable bx188b@name)) bx1889@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1887@t))) (bxd5e@syntax-dispatch bx1887@t 'any))) bx187f@t))) (bxd5e@syntax-dispatch bx187f@t '(#(scheme-id immutable) any . any)))) bx1877@t))) (bxd5e@syntax-dispatch bx1877@t '(#(scheme-id mutable) any . any)))) bx1875@x)) bx1873@ls)))) ((lambda (bx1843@uid-code bx1844@sealed? bx1845@opaque? bx1846@fields) (bxd14@bless (list 'make-record-type-descriptor (list 'quote bx183b@name) bx183d@parent-rtd-code bx1843@uid-code bx1844@sealed? bx1845@opaque? bx1846@fields))) ((lambda (bx184b@t) ((lambda (bx184d@ls/false) (if bx184d@ls/false (apply (lambda () (list 'quote (gensym))) bx184d@ls/false) ((lambda (bx184f@t) ((lambda (bx1851@ls/false) (if bx1851@ls/false (apply (lambda (bx1853@uid) (list 'quote bx1853@uid)) bx1851@ls/false) ((lambda (bx1855@t) ((lambda (bx1857@ls/false) (if bx1857@ls/false (apply (lambda () '#f) bx1857@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1855@t))) (bxd5e@syntax-dispatch bx1855@t '_))) bx184f@t))) (bxd5e@syntax-dispatch bx184f@t '(_ any)))) bx184b@t))) (bxd5e@syntax-dispatch bx184b@t '(_)))) (bx16ee@get-clause 'nongenerative bx183c@clause*)) ((lambda (bx1859@t) ((lambda (bx185b@ls/false) (if bx185b@ls/false (apply (lambda () '#t) bx185b@ls/false) ((lambda (bx185d@t) ((lambda (bx185f@ls/false) (if bx185f@ls/false (apply (lambda () '#f) bx185f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx185d@t))) (bxd5e@syntax-dispatch bx185d@t '_))) bx1859@t))) (bxd5e@syntax-dispatch bx1859@t '(_ #(atom #t))))) (bx16ee@get-clause 'sealed bx183c@clause*)) ((lambda (bx1861@t) ((lambda (bx1863@ls/false) (if bx1863@ls/false (apply (lambda () '#t) bx1863@ls/false) ((lambda (bx1865@t) ((lambda (bx1867@ls/false) (if bx1867@ls/false (apply (lambda () '#f) bx1867@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1865@t))) (bxd5e@syntax-dispatch bx1865@t '_))) bx1861@t))) (bxd5e@syntax-dispatch bx1861@t '(_ #(atom #t))))) (bx16ee@get-clause 'opaque bx183c@clause*)) ((lambda (bx1869@t) ((lambda (bx186b@ls/false) (if bx186b@ls/false (apply (lambda (bx186d@field-spec*) (list 'quote (bx1842@convert-field-spec* bx186d@field-spec*))) bx186b@ls/false) ((lambda (bx186f@t) ((lambda (bx1871@ls/false) (if bx1871@ls/false (apply (lambda () ''#()) bx1871@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx186f@t))) (bxd5e@syntax-dispatch bx186f@t '_))) bx1869@t))) (bxd5e@syntax-dispatch bx1869@t '(_ . each-any)))) (bx16ee@get-clause 'fields bx183c@clause*))))) '#f))) (set! bx16f2@parent-rtd-code (lambda (bx1823@clause*) ((lambda (bx1825@t) ((lambda (bx1827@ls/false) (if bx1827@ls/false (apply (lambda (bx1829@name) (list 'record-type-descriptor bx1829@name)) bx1827@ls/false) ((lambda (bx182b@t) ((lambda (bx182d@ls/false) (if bx182d@ls/false (apply (lambda () ((lambda (bx182f@t) ((lambda (bx1831@ls/false) (if bx1831@ls/false (apply (lambda (bx1833@rtd bx1834@rcd) bx1833@rtd) bx1831@ls/false) ((lambda (bx1837@t) ((lambda (bx1839@ls/false) (if bx1839@ls/false (apply (lambda () '#f) bx1839@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1837@t))) (bxd5e@syntax-dispatch bx1837@t '#(atom #f)))) bx182f@t))) (bxd5e@syntax-dispatch bx182f@t '(_ any any)))) (bx16ee@get-clause 'parent-rtd bx1823@clause*))) bx182d@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx182b@t))) (bxd5e@syntax-dispatch bx182b@t '#(atom #f)))) bx1825@t))) (bxd5e@syntax-dispatch bx1825@t '(_ any)))) (bx16ee@get-clause 'parent bx1823@clause*)))) (set! bx16f4@parent-rcd-code (lambda (bx180b@clause*) ((lambda (bx180d@t) ((lambda (bx180f@ls/false) (if bx180f@ls/false (apply (lambda (bx1811@name) (list 'record-constructor-descriptor bx1811@name)) bx180f@ls/false) ((lambda (bx1813@t) ((lambda (bx1815@ls/false) (if bx1815@ls/false (apply (lambda () ((lambda (bx1817@t) ((lambda (bx1819@ls/false) (if bx1819@ls/false (apply (lambda (bx181b@rtd bx181c@rcd) bx181c@rcd) bx1819@ls/false) ((lambda (bx181f@t) ((lambda (bx1821@ls/false) (if bx1821@ls/false (apply (lambda () '#f) bx1821@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx181f@t))) (bxd5e@syntax-dispatch bx181f@t '#(atom #f)))) bx1817@t))) (bxd5e@syntax-dispatch bx1817@t '(_ any any)))) (bx16ee@get-clause 'parent-rtd bx180b@clause*))) bx1815@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1813@t))) (bxd5e@syntax-dispatch bx1813@t '#(atom #f)))) bx180d@t))) (bxd5e@syntax-dispatch bx180d@t '(_ any)))) (bx16ee@get-clause 'parent bx180b@clause*)))) (set! bx16f6@foo-rcd-code (lambda (bx1803@clause* bx1804@foo-rtd bx1805@protocol bx1806@parent-rcd-code) (list 'make-record-constructor-descriptor bx1804@foo-rtd bx1806@parent-rcd-code bx1805@protocol))) (set! bx16f8@get-protocol-code (lambda (bx17f7@clause*) ((lambda (bx17f9@t) ((lambda (bx17fb@ls/false) (if bx17fb@ls/false (apply (lambda (bx17fd@expr) bx17fd@expr) bx17fb@ls/false) ((lambda (bx17ff@t) ((lambda (bx1801@ls/false) (if bx1801@ls/false (apply (lambda () '#f) bx1801@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx17ff@t))) (bxd5e@syntax-dispatch bx17ff@t '_))) bx17f9@t))) (bxd5e@syntax-dispatch bx17f9@t '(_ any)))) (bx16ee@get-clause 'protocol bx17f7@clause*)))) (set! bx16fa@get-fields (lambda (bx17e5@clause*) ((lambda (bx17e7@t) ((lambda (bx17e9@ls/false) (if bx17e9@ls/false (apply (lambda () '()) bx17e9@ls/false) ((lambda (bx17eb@t) ((lambda (bx17ed@ls/false) (if bx17ed@ls/false (apply (lambda (bx17ef@f*) bx17ef@f*) bx17ed@ls/false) ((lambda (bx17f1@t) ((lambda (bx17f3@ls/false) (if bx17f3@ls/false (apply (lambda (bx17f5@rest) (bx16fa@get-fields bx17f5@rest)) bx17f3@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx17f1@t))) (bxd5e@syntax-dispatch bx17f1@t '(_ . any)))) bx17eb@t))) (bxd5e@syntax-dispatch bx17eb@t '((#(scheme-id fields) . each-any) . _)))) bx17e7@t))) (bxd5e@syntax-dispatch bx17e7@t '()))) bx17e5@clause*))) (set! bx16fc@get-mutator-indices (lambda (bx17cd@fields) ((letrec ((bx17cf@f (lambda (bx17d1@fields bx17d2@i) ((lambda (bx17d5@t) ((lambda (bx17d7@ls/false) (if bx17d7@ls/false (apply (lambda () '()) bx17d7@ls/false) ((lambda (bx17d9@t) ((lambda (bx17db@ls/false) (if bx17db@ls/false (apply (lambda (bx17dd@rest) (cons bx17d2@i (bx17cf@f bx17dd@rest (+ bx17d2@i '1)))) bx17db@ls/false) ((lambda (bx17df@t) ((lambda (bx17e1@ls/false) (if bx17e1@ls/false (apply (lambda (bx17e3@rest) (bx17cf@f bx17e3@rest (+ bx17d2@i '1))) bx17e1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx17df@t))) (bxd5e@syntax-dispatch bx17df@t '(_ . any)))) bx17d9@t))) (bxd5e@syntax-dispatch bx17d9@t '((#(scheme-id mutable) . _) . any)))) bx17d5@t))) (bxd5e@syntax-dispatch bx17d5@t '()))) bx17d1@fields)))) bx17cf@f) bx17cd@fields '0))) (set! bx16fe@get-mutators (lambda (bx17a3@foo bx17a4@fields) ((lambda (bx17a8@gen-name) (begin (set! bx17a8@gen-name (lambda (bx17cb@x) (bxe42@datum->syntax bx17a3@foo (string->symbol (string-append (symbol->string (bxe44@syntax->datum bx17a3@foo)) '"-" (symbol->string (bxe44@syntax->datum bx17cb@x)) '"-set!"))))) ((letrec ((bx17a9@f (lambda (bx17ab@fields) ((lambda (bx17ad@t) ((lambda (bx17af@ls/false) (if bx17af@ls/false (apply (lambda () '()) bx17af@ls/false) ((lambda (bx17b1@t) ((lambda (bx17b3@ls/false) (if bx17b3@ls/false (apply (lambda (bx17b5@name bx17b6@accessor bx17b7@mutator bx17b8@rest) (cons bx17b7@mutator (bx17a9@f bx17b8@rest))) bx17b3@ls/false) ((lambda (bx17bd@t) ((lambda (bx17bf@ls/false) (if bx17bf@ls/false (apply (lambda (bx17c1@name bx17c2@rest) (cons (bx17a8@gen-name bx17c1@name) (bx17a9@f bx17c2@rest))) bx17bf@ls/false) ((lambda (bx17c5@t) ((lambda (bx17c7@ls/false) (if bx17c7@ls/false (apply (lambda (bx17c9@rest) (bx17a9@f bx17c9@rest)) bx17c7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx17c5@t))) (bxd5e@syntax-dispatch bx17c5@t '(_ . any)))) bx17bd@t))) (bxd5e@syntax-dispatch bx17bd@t '((#(scheme-id mutable) any) . any)))) bx17b1@t))) (bxd5e@syntax-dispatch bx17b1@t '((#(scheme-id mutable) any any any) . any)))) bx17ad@t))) (bxd5e@syntax-dispatch bx17ad@t '()))) bx17ab@fields)))) bx17a9@f) bx17a4@fields))) '#f))) (set! bx1700@get-accessors (lambda (bx175f@foo bx1760@fields) ((lambda (bx1764@gen-name) (begin (set! bx1764@gen-name (lambda (bx17a1@x) (bxe42@datum->syntax bx175f@foo (string->symbol (string-append (symbol->string (bxe44@syntax->datum bx175f@foo)) '"-" (symbol->string (bxe44@syntax->datum bx17a1@x))))))) (map (lambda (bx1765@field) ((lambda (bx1767@t) ((lambda (bx1769@ls/false) (if (and bx1769@ls/false (apply (lambda (bx176b@name bx176c@accessor bx176d@mutator) (bxb59@id? bx176c@accessor)) bx1769@ls/false)) (apply (lambda (bx1771@name bx1772@accessor bx1773@mutator) bx1772@accessor) bx1769@ls/false) ((lambda (bx1777@t) ((lambda (bx1779@ls/false) (if (and bx1779@ls/false (apply (lambda (bx177b@name bx177c@accessor) (bxb59@id? bx177c@accessor)) bx1779@ls/false)) (apply (lambda (bx177f@name bx1780@accessor) bx1780@accessor) bx1779@ls/false) ((lambda (bx1783@t) ((lambda (bx1785@ls/false) (if (and bx1785@ls/false (apply (lambda (bx1787@name) (bxb59@id? bx1787@name)) bx1785@ls/false)) (apply (lambda (bx1789@name) (bx1764@gen-name bx1789@name)) bx1785@ls/false) ((lambda (bx178b@t) ((lambda (bx178d@ls/false) (if (and bx178d@ls/false (apply (lambda (bx178f@name) (bxb59@id? bx178f@name)) bx178d@ls/false)) (apply (lambda (bx1791@name) (bx1764@gen-name bx1791@name)) bx178d@ls/false) ((lambda (bx1793@t) ((lambda (bx1795@ls/false) (if (and bx1795@ls/false (apply (lambda (bx1797@name) (bxb59@id? bx1797@name)) bx1795@ls/false)) (apply (lambda (bx1799@name) (bx1764@gen-name bx1799@name)) bx1795@ls/false) ((lambda (bx179b@t) ((lambda (bx179d@ls/false) (if bx179d@ls/false (apply (lambda (bx179f@others) (bxe3e@syntax-violation '#f '"invalid field spec" bx1765@field)) bx179d@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx179b@t))) (bxd5e@syntax-dispatch bx179b@t 'any))) bx1793@t))) (bxd5e@syntax-dispatch bx1793@t 'any))) bx178b@t))) (bxd5e@syntax-dispatch bx178b@t '(#(scheme-id immutable) any)))) bx1783@t))) (bxd5e@syntax-dispatch bx1783@t '(#(scheme-id mutable) any)))) bx1777@t))) (bxd5e@syntax-dispatch bx1777@t '(#(scheme-id immutable) any any)))) bx1767@t))) (bxd5e@syntax-dispatch bx1767@t '(#(scheme-id mutable) any any any)))) bx1765@field)) bx1760@fields))) '#f))) (set! bx1702@enumerate (lambda (bx1757@ls) ((letrec ((bx1759@f (lambda (bx175b@ls bx175c@i) (if (null? bx175b@ls) '() (cons bx175c@i (bx1759@f (cdr bx175b@ls) (+ bx175c@i '1))))))) bx1759@f) bx1757@ls '0))) (set! bx1704@do-define-record (lambda (bx172f@namespec bx1730@clause*) ((lambda (bx1733@foo) ((lambda (bx1735@foo-rtd) ((lambda (bx1737@foo-rcd) ((lambda (bx1739@protocol) ((lambda (bx173b@make-foo) ((lambda (bx173d@fields) ((lambda (bx173f@idx*) ((lambda (bx1741@foo-x*) ((lambda (bx1743@set-foo-x!*) ((lambda (bx1745@set-foo-idx*) ((lambda (bx1747@foo?) ((lambda (bx1749@foo-rtd-code) ((lambda (bx174b@foo-rcd-code) ((lambda (bx174d@protocol-code) ((lambda () (bxd14@bless (cons 'begin (cons (list 'define bx1735@foo-rtd bx1749@foo-rtd-code) (cons (list 'define bx1739@protocol bx174d@protocol-code) (cons (list 'define bx1737@foo-rcd bx174b@foo-rcd-code) (cons (list 'define-syntax bx1733@foo (list 'list ''$rtd (list 'syntax bx1735@foo-rtd) (list 'syntax bx1737@foo-rcd))) (cons (list 'define bx1747@foo? (list 'record-predicate bx1735@foo-rtd)) (cons (list 'define bx173b@make-foo (list 'record-constructor bx1737@foo-rcd)) (append (map (lambda (bx174f@foo-x bx1750@idx) (list 'define bx174f@foo-x (list 'record-accessor bx1735@foo-rtd bx1750@idx))) bx1741@foo-x* bx173f@idx*) (map (lambda (bx1753@set-foo-x! bx1754@idx) (list 'define bx1753@set-foo-x! (list 'record-mutator bx1735@foo-rtd bx1754@idx))) bx1743@set-foo-x!* bx1745@set-foo-idx*))))))))))))) (bx16f8@get-protocol-code bx1730@clause*))) (bx16f6@foo-rcd-code bx1730@clause* bx1735@foo-rtd bx1739@protocol (bx16f4@parent-rcd-code bx1730@clause*)))) (bx16f0@foo-rtd-code bx1733@foo bx1730@clause* (bx16f2@parent-rtd-code bx1730@clause*)))) (bx16ec@get-record-predicate-name bx172f@namespec))) (bx16fc@get-mutator-indices bx173d@fields))) (bx16fe@get-mutators bx1733@foo bx173d@fields))) (bx1700@get-accessors bx1733@foo bx173d@fields))) (bx1702@enumerate bx173d@fields))) (bx16fa@get-fields bx1730@clause*))) (bx16ea@get-record-constructor-name bx172f@namespec))) (gensym))) (gensym))) (gensym))) (bx16e8@get-record-name bx172f@namespec)))) (set! bx1706@verify-clauses (lambda (bx170f@x bx1710@cls*) ((lambda (bx1714@valid-kwds bx1716@free-id-member?) (begin (set! bx1714@valid-kwds (map bxd14@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! bx1716@free-id-member? (lambda (bx172b@x bx172c@ls) (and (pair? bx172c@ls) (or (bxb5f@free-id=? bx172b@x (car bx172c@ls)) (bx1716@free-id-member? bx172b@x (cdr bx172c@ls)))))) ((letrec ((bx1717@f (lambda (bx1719@cls* bx171a@seen*) (if (not (null? bx1719@cls*)) ((lambda (bx171d@t) ((lambda (bx171f@ls/false) (if bx171f@ls/false (apply (lambda (bx1721@kwd bx1722@rest) (if (or (not (bxb59@id? bx1721@kwd)) (not (bx1716@free-id-member? bx1721@kwd bx1714@valid-kwds))) (bxe3e@syntax-violation '#f '"not a valid define-record-type keyword" bx1721@kwd) (if (bxb65@bound-id-member? bx1721@kwd bx171a@seen*) (bxe3e@syntax-violation '#f '"duplicate use of keyword " bx170f@x bx1721@kwd) (bx1717@f (cdr bx1719@cls*) (cons bx1721@kwd bx171a@seen*))))) bx171f@ls/false) ((lambda (bx1725@t) ((lambda (bx1727@ls/false) (if bx1727@ls/false (apply (lambda (bx1729@cls) (bxe3e@syntax-violation '#f '"malformed define-record-type clause" bx1729@cls)) bx1727@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1725@t))) (bxd5e@syntax-dispatch bx1725@t 'any))) bx171d@t))) (bxd5e@syntax-dispatch bx171d@t '(any . any)))) (car bx1719@cls*)) (void))))) bx1717@f) bx1710@cls* '()))) '#f '#f))) ((lambda (bx1707@t) ((lambda (bx1709@ls/false) (if bx1709@ls/false (apply (lambda (bx170b@namespec bx170c@clause*) (begin (bx1706@verify-clauses bx16e3@x bx170c@clause*) (bx1704@do-define-record bx170b@namespec bx170c@clause*))) bx1709@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1707@t))) (bxd5e@syntax-dispatch bx1707@t '(_ any . each-any)))) bx16e3@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! bxd54@define-condition-type-macro (lambda (bx18df@x) ((lambda (bx18e2@mkname) (begin (set! bx18e2@mkname (lambda (bx190f@name bx1910@suffix) (bxe42@datum->syntax bx190f@name (string->symbol (string-append (symbol->string (bxe44@syntax->datum bx190f@name)) bx1910@suffix))))) ((lambda (bx18e3@t) ((lambda (bx18e5@ls/false) (if (and bx18e5@ls/false (apply (lambda (bx18e7@ctxt bx18e8@name bx18e9@super bx18ea@constructor bx18eb@predicate bx18ec@field* bx18ed@accessor*) (and (bxb59@id? bx18e8@name) (bxb59@id? bx18e9@super) (bxb59@id? bx18ea@constructor) (bxb59@id? bx18eb@predicate) (for-all bxb59@id? bx18ec@field*) (for-all bxb59@id? bx18ed@accessor*))) bx18e5@ls/false)) (apply (lambda (bx18f5@ctxt bx18f6@name bx18f7@super bx18f8@constructor bx18f9@predicate bx18fa@field* bx18fb@accessor*) ((lambda (bx1903@aux-accessor*) (bxd14@bless (cons 'begin (cons (cons 'define-record-type (cons (list bx18f6@name bx18f8@constructor (gensym)) (cons (list 'parent bx18f7@super) (cons (cons 'fields (map (lambda (bx1905@field bx1906@aux) (list 'immutable bx1905@field bx1906@aux)) bx18fa@field* bx1903@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bx18f9@predicate (list 'condition-predicate (list 'record-type-descriptor bx18f6@name))) (map (lambda (bx1909@accessor bx190a@aux) (list 'define bx1909@accessor (list 'condition-accessor (list 'record-type-descriptor bx18f6@name) bx190a@aux))) bx18fb@accessor* bx1903@aux-accessor*)))))) (map (lambda (bx190d@x) (gensym)) bx18fb@accessor*))) bx18e5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx18e3@t))) (bxd5e@syntax-dispatch bx18e3@t '(any any any any any . #(each (any any)))))) bx18df@x))) '#f))) (set! bxd56@incorrect-usage-macro (lambda (bx1913@e) (bxe3e@syntax-violation '#f '"incorrect usage of auxiliary keyword" bx1913@e))) (set! bxd58@parameterize-macro (lambda (bx1915@e) ((lambda (bx1917@t) ((lambda (bx1919@ls/false) (if bx1919@ls/false (apply (lambda (bx191b@b bx191c@b*) (bxd14@bless (cons 'let (cons '() (cons bx191b@b bx191c@b*))))) bx1919@ls/false) ((lambda (bx191f@t) ((lambda (bx1921@ls/false) (if bx1921@ls/false (apply (lambda (bx1923@olhs* bx1924@orhs* bx1925@b bx1926@b*) ((lambda (bx192b@lhs* bx192c@rhs*) (bxd14@bless (cons (list 'lambda (append bx192b@lhs* bx192c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bx192f@lhs bx1930@rhs) (list 'let (list (list 't (list bx192f@lhs))) (list bx192f@lhs bx1930@rhs) (cons 'set! (cons bx1930@rhs '(t))))) bx192b@lhs* bx192c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bx1925@b bx1926@b*))) '(swap)))))) (append bx1923@olhs* bx1924@orhs*)))) (bxe2c@generate-temporaries bx1923@olhs*) (bxe2c@generate-temporaries bx1924@orhs*))) bx1921@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx191f@t))) (bxd5e@syntax-dispatch bx191f@t '(_ #(each (any any)) any . each-any)))) bx1917@t))) (bxd5e@syntax-dispatch bx1917@t '(_ () any . each-any)))) bx1915@e))) (set! bxd5a@foreign-call-transformer (lambda (bx1933@e bx1934@r bx1935@mr) ((lambda (bx1939@t) ((lambda (bx193b@ls/false) (if bx193b@ls/false (apply (lambda (bx193d@name bx193e@arg*) (cons 'foreign-call (cons (bxd80@chi-expr bx193d@name bx1934@r bx1935@mr) (bxd7c@chi-expr* bx193e@arg* bx1934@r bx1935@mr)))) bx193b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1939@t))) (bxd5e@syntax-dispatch bx1939@t '(_ any . each-any)))) bx1933@e))) (set! bxd5c@convert-pattern (lambda (bx1941@pattern bx1942@keys) ((lambda (bx1946@cvt* bx1948@cvt) (begin (set! bx1946@cvt* (lambda (bx19e5@p* bx19e6@n bx19e7@ids) (if (null? bx19e5@p*) (values '() bx19e7@ids) (call-with-values (lambda () (bx1946@cvt* (cdr bx19e5@p*) bx19e6@n bx19e7@ids)) (lambda (bx19ef@bx19ec bx19f0@bx19ee) ((lambda (bx19f3@ids bx19f4@y) (call-with-values (lambda () (bx1948@cvt (car bx19e5@p*) bx19e6@n bx19f3@ids)) (lambda (bx19fb@bx19f8 bx19fc@bx19fa) ((lambda (bx19ff@ids bx1a00@x) (values (cons bx1a00@x bx19f4@y) bx19ff@ids)) bx19fc@bx19fa bx19fb@bx19f8)))) bx19f0@bx19ee bx19ef@bx19ec)))))) (set! bx1948@cvt (lambda (bx1949@p bx194a@n bx194b@ids) ((lambda (bx194f@t) ((lambda (bx1951@ls/false) (if (and bx1951@ls/false (apply (lambda (bx1953@id) (bxb59@id? bx1953@id)) bx1951@ls/false)) (apply (lambda (bx1955@id) (if (bxb65@bound-id-member? bx1949@p bx1942@keys) (values (vector 'free-id bx1949@p) bx194b@ids) (if (bxb5f@free-id=? bx1949@p (bxce8@scheme-stx '_)) (values '_ bx194b@ids) (values 'any (cons (cons bx1949@p bx194a@n) bx194b@ids))))) bx1951@ls/false) ((lambda (bx1957@t) ((lambda (bx1959@ls/false) (if (and bx1959@ls/false (apply (lambda (bx195b@p bx195c@dots) (bxd60@ellipsis? bx195c@dots)) bx1959@ls/false)) (apply (lambda (bx195f@p bx1960@dots) (call-with-values (lambda () (bx1948@cvt bx195f@p (+ bx194a@n '1) bx194b@ids)) (lambda (bx1967@bx1964 bx1968@bx1966) ((lambda (bx196b@ids bx196c@p) (values (if (eq? bx196c@p 'any) 'each-any (vector 'each bx196c@p)) bx196b@ids)) bx1968@bx1966 bx1967@bx1964)))) bx1959@ls/false) ((lambda (bx196f@t) ((lambda (bx1971@ls/false) (if (and bx1971@ls/false (apply (lambda (bx1973@x bx1974@dots bx1975@ys bx1976@z) (bxd60@ellipsis? bx1974@dots)) bx1971@ls/false)) (apply (lambda (bx197b@x bx197c@dots bx197d@ys bx197e@z) (call-with-values (lambda () (bx1948@cvt bx197e@z bx194a@n bx194b@ids)) (lambda (bx1987@bx1984 bx1988@bx1986) ((lambda (bx198b@ids bx198c@z) (call-with-values (lambda () (bx1946@cvt* bx197d@ys bx194a@n bx198b@ids)) (lambda (bx1993@bx1990 bx1994@bx1992) ((lambda (bx1997@ids bx1998@ys) (call-with-values (lambda () (bx1948@cvt bx197b@x (+ bx194a@n '1) bx1997@ids)) (lambda (bx199f@bx199c bx19a0@bx199e) ((lambda (bx19a3@ids bx19a4@x) (values (vector 'each+ bx19a4@x (reverse bx1998@ys) bx198c@z) bx19a3@ids)) bx19a0@bx199e bx199f@bx199c)))) bx1994@bx1992 bx1993@bx1990)))) bx1988@bx1986 bx1987@bx1984)))) bx1971@ls/false) ((lambda (bx19a7@t) ((lambda (bx19a9@ls/false) (if bx19a9@ls/false (apply (lambda (bx19ab@x bx19ac@y) (call-with-values (lambda () (bx1948@cvt bx19ac@y bx194a@n bx194b@ids)) (lambda (bx19b3@bx19b0 bx19b4@bx19b2) ((lambda (bx19b7@ids bx19b8@y) (call-with-values (lambda () (bx1948@cvt bx19ab@x bx194a@n bx19b7@ids)) (lambda (bx19bf@bx19bc bx19c0@bx19be) ((lambda (bx19c3@ids bx19c4@x) (values (cons bx19c4@x bx19b8@y) bx19c3@ids)) bx19c0@bx19be bx19bf@bx19bc)))) bx19b4@bx19b2 bx19b3@bx19b0)))) bx19a9@ls/false) ((lambda (bx19c7@t) ((lambda (bx19c9@ls/false) (if bx19c9@ls/false (apply (lambda () (values '() bx194b@ids)) bx19c9@ls/false) ((lambda (bx19cb@t) ((lambda (bx19cd@ls/false) (if (and bx19cd@ls/false (apply (lambda (bx19cf@p) (not (bxb25@stx? bx19cf@p))) bx19cd@ls/false)) (apply (lambda (bx19d1@p) (call-with-values (lambda () (bx1948@cvt bx19d1@p bx194a@n bx194b@ids)) (lambda (bx19d7@bx19d4 bx19d8@bx19d6) ((lambda (bx19db@ids bx19dc@p) (values (vector 'vector bx19dc@p) bx19db@ids)) bx19d8@bx19d6 bx19d7@bx19d4)))) bx19cd@ls/false) ((lambda (bx19df@t) ((lambda (bx19e1@ls/false) (if bx19e1@ls/false (apply (lambda (bx19e3@datum) (values (vector 'atom (bxb6d@stx->datum bx19e3@datum)) bx194b@ids)) bx19e1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx19df@t))) (bxd5e@syntax-dispatch bx19df@t 'any))) bx19cb@t))) (bxd5e@syntax-dispatch bx19cb@t '#(vector each-any)))) bx19c7@t))) (bxd5e@syntax-dispatch bx19c7@t '()))) bx19a7@t))) (bxd5e@syntax-dispatch bx19a7@t '(any . any)))) bx196f@t))) (bxd5e@syntax-dispatch bx196f@t '(any any . #(each+ any () any))))) bx1957@t))) (bxd5e@syntax-dispatch bx1957@t '(any any)))) bx194f@t))) (bxd5e@syntax-dispatch bx194f@t 'any))) bx1949@p))) (bx1948@cvt bx1941@pattern '0 '()))) '#f '#f))) (set! bxd5e@syntax-dispatch ((lambda () ((lambda (bx1a04@stx^ bx1a06@match-each bx1a08@match-each+ bx1a0a@match-each-any bx1a0c@match-empty bx1a0e@combine bx1a10@match* bx1a12@match) (begin (set! bx1a04@stx^ (lambda (bx1adf@e bx1ae0@m* bx1ae1@s* bx1ae2@ae*) (if (and (null? bx1ae0@m*) (null? bx1ae1@s*) (null? bx1ae2@ae*)) bx1adf@e (bxb41@mkstx bx1adf@e bx1ae0@m* bx1ae1@s* bx1ae2@ae*)))) (set! bx1a06@match-each (lambda (bx1abf@e bx1ac0@p bx1ac1@m* bx1ac2@s* bx1ac3@ae*) (if (pair? bx1abf@e) ((lambda (bx1ac9@first) (and bx1ac9@first ((lambda (bx1acb@rest) (and bx1acb@rest (cons bx1ac9@first bx1acb@rest))) (bx1a06@match-each (cdr bx1abf@e) bx1ac0@p bx1ac1@m* bx1ac2@s* bx1ac3@ae*)))) (bx1a12@match (car bx1abf@e) bx1ac0@p bx1ac1@m* bx1ac2@s* bx1ac3@ae* '())) (if (null? bx1abf@e) '() (if (bxb25@stx? bx1abf@e) (and (not (bxadf@top-marked? bx1ac1@m*)) (call-with-values (lambda () (join-wraps bx1ac1@m* bx1ac2@s* bx1ac3@ae* bx1abf@e)) (lambda (bx1ad3@bx1ace bx1ad4@bx1ad0 bx1ad5@bx1ad2) ((lambda (bx1ad9@ae* bx1ada@s* bx1adb@m*) (bx1a06@match-each (bxb27@stx-expr bx1abf@e) bx1ac0@p bx1adb@m* bx1ada@s* bx1ad9@ae*)) bx1ad5@bx1ad2 bx1ad4@bx1ad0 bx1ad3@bx1ace)))) (if (bx6ad@bx581@annotation? bx1abf@e) (bx1a06@match-each (bx6af@bx585@annotation-expression bx1abf@e) bx1ac0@p bx1ac1@m* bx1ac2@s* bx1ac3@ae*) '#f)))))) (set! bx1a08@match-each+ (lambda (bx1a7f@e bx1a80@x-pat bx1a81@y-pat bx1a82@z-pat bx1a83@m* bx1a84@s* bx1a85@ae* bx1a86@r) ((letrec ((bx1a8f@f (lambda (bx1a91@e bx1a92@m* bx1a93@s* bx1a94@ae*) (if (pair? bx1a91@e) (call-with-values (lambda () (bx1a8f@f (cdr bx1a91@e) bx1a92@m* bx1a93@s* bx1a94@ae*)) (lambda (bx1a9f@bx1a9a bx1aa0@bx1a9c bx1aa1@bx1a9e) ((lambda (bx1aa5@r bx1aa6@y-pat bx1aa7@xr*) (if bx1aa5@r (if (null? bx1aa6@y-pat) ((lambda (bx1aab@xr) (if bx1aab@xr (values (cons bx1aab@xr bx1aa7@xr*) bx1aa6@y-pat bx1aa5@r) (values '#f '#f '#f))) (bx1a12@match (car bx1a91@e) bx1a80@x-pat bx1a92@m* bx1a93@s* bx1a94@ae* '())) (values '() (cdr bx1aa6@y-pat) (bx1a12@match (car bx1a91@e) (car bx1aa6@y-pat) bx1a92@m* bx1a93@s* bx1a94@ae* bx1aa5@r))) (values '#f '#f '#f))) bx1aa1@bx1a9e bx1aa0@bx1a9c bx1a9f@bx1a9a))) (if (bxb25@stx? bx1a91@e) (if (bxadf@top-marked? bx1a92@m*) (values '() bx1a81@y-pat (bx1a12@match bx1a91@e bx1a82@z-pat bx1a92@m* bx1a93@s* bx1a94@ae* bx1a86@r)) (call-with-values (lambda () (join-wraps bx1a92@m* bx1a93@s* bx1a94@ae* bx1a91@e)) (lambda (bx1ab3@bx1aae bx1ab4@bx1ab0 bx1ab5@bx1ab2) ((lambda (bx1ab9@ae* bx1aba@s* bx1abb@m*) (bx1a8f@f (bxb27@stx-expr bx1a91@e) bx1abb@m* bx1aba@s* bx1ab9@ae*)) bx1ab5@bx1ab2 bx1ab4@bx1ab0 bx1ab3@bx1aae)))) (if (bx6ad@bx581@annotation? bx1a91@e) (bx1a8f@f (bx6af@bx585@annotation-expression bx1a91@e) bx1a92@m* bx1a93@s* bx1a94@ae*) (values '() bx1a81@y-pat (bx1a12@match bx1a91@e bx1a82@z-pat bx1a92@m* bx1a93@s* bx1a94@ae* bx1a86@r)))))))) bx1a8f@f) bx1a7f@e bx1a83@m* bx1a84@s* bx1a85@ae*))) (set! bx1a0a@match-each-any (lambda (bx1a63@e bx1a64@m* bx1a65@s* bx1a66@ae*) (if (pair? bx1a63@e) ((lambda (bx1a6b@l) (and bx1a6b@l (cons (bx1a04@stx^ (car bx1a63@e) bx1a64@m* bx1a65@s* bx1a66@ae*) bx1a6b@l))) (bx1a0a@match-each-any (cdr bx1a63@e) bx1a64@m* bx1a65@s* bx1a66@ae*)) (if (null? bx1a63@e) '() (if (bxb25@stx? bx1a63@e) (and (not (bxadf@top-marked? bx1a64@m*)) (call-with-values (lambda () (join-wraps bx1a64@m* bx1a65@s* bx1a66@ae* bx1a63@e)) (lambda (bx1a73@bx1a6e bx1a74@bx1a70 bx1a75@bx1a72) ((lambda (bx1a79@ae* bx1a7a@s* bx1a7b@m*) (bx1a0a@match-each-any (bxb27@stx-expr bx1a63@e) bx1a7b@m* bx1a7a@s* bx1a79@ae*)) bx1a75@bx1a72 bx1a74@bx1a70 bx1a73@bx1a6e)))) (if (bx6ad@bx581@annotation? bx1a63@e) (bx1a0a@match-each-any (bx6af@bx585@annotation-expression bx1a63@e) bx1a64@m* bx1a65@s* bx1a66@ae*) '#f)))))) (set! bx1a0c@match-empty (lambda (bx1a5d@p bx1a5e@r) (if (null? bx1a5d@p) bx1a5e@r (if (eq? bx1a5d@p '_) bx1a5e@r (if (eq? bx1a5d@p 'any) (cons '() bx1a5e@r) (if (pair? bx1a5d@p) (bx1a0c@match-empty (car bx1a5d@p) (bx1a0c@match-empty (cdr bx1a5d@p) bx1a5e@r)) (if (eq? bx1a5d@p 'each-any) (cons '() bx1a5e@r) ((lambda (bx1a61@t) (if (memv bx1a61@t '(each)) (bx1a0c@match-empty (vector-ref bx1a5d@p '1) bx1a5e@r) (if (memv bx1a61@t '(each+)) (bx1a0c@match-empty (vector-ref bx1a5d@p '1) (bx1a0c@match-empty (reverse (vector-ref bx1a5d@p '2)) (bx1a0c@match-empty (vector-ref bx1a5d@p '3) bx1a5e@r))) (if (memv bx1a61@t '(free-id atom)) bx1a5e@r (if (memv bx1a61@t '(scheme-id atom)) bx1a5e@r (if (memv bx1a61@t '(vector)) (bx1a0c@match-empty (vector-ref bx1a5d@p '1) bx1a5e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bx1a5d@p))))))) (vector-ref bx1a5d@p '0))))))))) (set! bx1a0e@combine (lambda (bx1a59@r* bx1a5a@r) (if (null? (car bx1a59@r*)) bx1a5a@r (cons (map car bx1a59@r*) (bx1a0e@combine (map cdr bx1a59@r*) bx1a5a@r))))) (set! bx1a10@match* (lambda (bx1a35@e bx1a36@p bx1a37@m* bx1a38@s* bx1a39@ae* bx1a3a@r) (if (null? bx1a36@p) (and (null? bx1a35@e) bx1a3a@r) (if (pair? bx1a36@p) (and (pair? bx1a35@e) (bx1a12@match (car bx1a35@e) (car bx1a36@p) bx1a37@m* bx1a38@s* bx1a39@ae* (bx1a12@match (cdr bx1a35@e) (cdr bx1a36@p) bx1a37@m* bx1a38@s* bx1a39@ae* bx1a3a@r))) (if (eq? bx1a36@p 'each-any) ((lambda (bx1a41@l) (and bx1a41@l (cons bx1a41@l bx1a3a@r))) (bx1a0a@match-each-any bx1a35@e bx1a37@m* bx1a38@s* bx1a39@ae*)) ((lambda (bx1a43@t) (if (memv bx1a43@t '(each)) (if (null? bx1a35@e) (bx1a0c@match-empty (vector-ref bx1a36@p '1) bx1a3a@r) ((lambda (bx1a45@r*) (and bx1a45@r* (bx1a0e@combine bx1a45@r* bx1a3a@r))) (bx1a06@match-each bx1a35@e (vector-ref bx1a36@p '1) bx1a37@m* bx1a38@s* bx1a39@ae*))) (if (memv bx1a43@t '(free-id)) (and (symbol? bx1a35@e) (bxadf@top-marked? bx1a37@m*) (bxb5f@free-id=? (bx1a04@stx^ bx1a35@e bx1a37@m* bx1a38@s* bx1a39@ae*) (vector-ref bx1a36@p '1)) bx1a3a@r) (if (memv bx1a43@t '(scheme-id)) (and (symbol? bx1a35@e) (bxadf@top-marked? bx1a37@m*) (bxb5f@free-id=? (bx1a04@stx^ bx1a35@e bx1a37@m* bx1a38@s* bx1a39@ae*) (bxce8@scheme-stx (vector-ref bx1a36@p '1))) bx1a3a@r) (if (memv bx1a43@t '(each+)) (call-with-values (lambda () (bx1a08@match-each+ bx1a35@e (vector-ref bx1a36@p '1) (vector-ref bx1a36@p '2) (vector-ref bx1a36@p '3) bx1a37@m* bx1a38@s* bx1a39@ae* bx1a3a@r)) (lambda (bx1a4d@bx1a48 bx1a4e@bx1a4a bx1a4f@bx1a4c) ((lambda (bx1a53@r bx1a54@y-pat bx1a55@xr*) (and bx1a53@r (null? bx1a54@y-pat) (if (null? bx1a55@xr*) (bx1a0c@match-empty (vector-ref bx1a36@p '1) bx1a53@r) (bx1a0e@combine bx1a55@xr* bx1a53@r)))) bx1a4f@bx1a4c bx1a4e@bx1a4a bx1a4d@bx1a48))) (if (memv bx1a43@t '(atom)) (and (fast-equal? (vector-ref bx1a36@p '1) (bxb6b@strip bx1a35@e bx1a37@m*)) bx1a3a@r) (if (memv bx1a43@t '(vector)) (and (vector? bx1a35@e) (bx1a12@match (vector->list bx1a35@e) (vector-ref bx1a36@p '1) bx1a37@m* bx1a38@s* bx1a39@ae* bx1a3a@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bx1a36@p)))))))) (vector-ref bx1a36@p '0))))))) (set! bx1a12@match (lambda (bx1a17@e bx1a18@p bx1a19@m* bx1a1a@s* bx1a1b@ae* bx1a1c@r) (if (not bx1a1c@r) '#f (if (eq? bx1a18@p '_) bx1a1c@r (if (eq? bx1a18@p 'any) (cons (bx1a04@stx^ bx1a17@e bx1a19@m* bx1a1a@s* bx1a1b@ae*) bx1a1c@r) (if (bxb25@stx? bx1a17@e) (and (not (bxadf@top-marked? bx1a19@m*)) (call-with-values (lambda () (join-wraps bx1a19@m* bx1a1a@s* bx1a1b@ae* bx1a17@e)) (lambda (bx1a29@bx1a24 bx1a2a@bx1a26 bx1a2b@bx1a28) ((lambda (bx1a2f@ae* bx1a30@s* bx1a31@m*) (bx1a12@match (bxb27@stx-expr bx1a17@e) bx1a18@p bx1a31@m* bx1a30@s* bx1a2f@ae* bx1a1c@r)) bx1a2b@bx1a28 bx1a2a@bx1a26 bx1a29@bx1a24)))) (if (bx6ad@bx581@annotation? bx1a17@e) (bx1a12@match (bx6af@bx585@annotation-expression bx1a17@e) bx1a18@p bx1a19@m* bx1a1a@s* bx1a1b@ae* bx1a1c@r) (bx1a10@match* bx1a17@e bx1a18@p bx1a19@m* bx1a1a@s* bx1a1b@ae* bx1a1c@r)))))))) (lambda (bx1a13@e bx1a14@p) (bx1a12@match bx1a13@e bx1a14@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bxd60@ellipsis? (lambda (bx1ae7@x) (and (bxb59@id? bx1ae7@x) (bxb5f@free-id=? bx1ae7@x (bxce8@scheme-stx '...))))) (set! bxd62@underscore? (lambda (bx1ae9@x) (and (bxb59@id? bx1ae9@x) (bxb5f@free-id=? bx1ae9@x (bxce8@scheme-stx '_))))) (set! bxd64@verify-literals (lambda (bx1aeb@lits bx1aec@expr) (for-each (lambda (bx1aef@x) (if (or (not (bxb59@id? bx1aef@x)) (bxd60@ellipsis? bx1aef@x) (bxd62@underscore? bx1aef@x)) (bxe3e@syntax-violation '#f '"invalid literal" bx1aec@expr bx1aef@x) (void))) bx1aeb@lits))) (set! bxd66@syntax-case-transformer ((lambda () ((lambda (bx1af2@build-dispatch-call bx1af4@invalid-ids-error bx1af6@gen-clause bx1af8@gen-syntax-case) (begin (set! bx1af2@build-dispatch-call (lambda (bx1b63@pvars bx1b64@expr bx1b65@y bx1b66@r bx1b67@mr) ((lambda (bx1b6d@ids bx1b6e@levels) ((lambda (bx1b71@labels bx1b72@new-vars) ((lambda (bx1b75@body) (list '(primitive apply) (bxabd@bx9fd@build-lambda '#f bx1b72@new-vars bx1b75@body) bx1b65@y)) (bxd80@chi-expr (bxb45@add-subst (bxb19@make-full-rib bx1b6d@ids bx1b71@labels) bx1b64@expr) (append (map (lambda (bx1b77@label bx1b78@var bx1b79@level) (cons bx1b77@label (bxb73@make-binding 'syntax (cons bx1b78@var bx1b79@level)))) bx1b71@labels bx1b72@new-vars (map cdr bx1b63@pvars)) bx1b66@r) bx1b67@mr))) (map bxae5@gen-label bx1b6d@ids) (map bxae1@gen-lexical bx1b6d@ids))) (map car bx1b63@pvars) (map cdr bx1b63@pvars)))) (set! bx1af4@invalid-ids-error (lambda (bx1b57@id* bx1b58@e bx1b59@class) ((letrec ((bx1b5d@find (lambda (bx1b5f@id* bx1b60@ok*) (if (null? bx1b5f@id*) (bxe3e@syntax-violation '#f '"invalid syntax" bx1b58@e) (if (bxb59@id? (car bx1b5f@id*)) (if (bxb65@bound-id-member? (car bx1b5f@id*) bx1b60@ok*) (bxe3a@syntax-error (car bx1b5f@id*) '"duplicate " bx1b59@class) (bx1b5d@find (cdr bx1b5f@id*) (cons (car bx1b5f@id*) bx1b60@ok*))) (bxe3a@syntax-error (car bx1b5f@id*) '"invalid " bx1b59@class)))))) bx1b5d@find) bx1b57@id* '()))) (set! bx1af6@gen-clause (lambda (bx1b2f@x bx1b30@keys bx1b31@clauses bx1b32@r bx1b33@mr bx1b34@pat bx1b35@fender bx1b36@expr) (call-with-values (lambda () (bxd5c@convert-pattern bx1b34@pat bx1b30@keys)) (lambda (bx1b43@bx1b40 bx1b44@bx1b42) ((lambda (bx1b47@pvars bx1b48@p) (if (not (bxb63@distinct-bound-ids? (map car bx1b47@pvars))) (bx1af4@invalid-ids-error (map car bx1b47@pvars) bx1b34@pat '"pattern variable") (if (not (for-all (lambda (bx1b4b@x) (not (bxd60@ellipsis? (car bx1b4b@x)))) bx1b47@pvars)) (bxe3e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bx1b34@pat) ((lambda (bx1b4d@y) ((lambda (bx1b4f@test) ((lambda (bx1b51@conseq) ((lambda (bx1b53@altern) (list (bxabd@bx9fd@build-lambda '#f (list bx1b4d@y) (list 'if bx1b4f@test bx1b51@conseq bx1b53@altern)) (list '(primitive syntax-dispatch) bx1b2f@x (list 'quote bx1b48@p)))) (bx1af8@gen-syntax-case bx1b2f@x bx1b30@keys bx1b31@clauses bx1b32@r bx1b33@mr))) (bx1af2@build-dispatch-call bx1b47@pvars bx1b36@expr bx1b4d@y bx1b32@r bx1b33@mr))) (if (eq? bx1b35@fender '#t) bx1b4d@y ((lambda (bx1b55@call) (list 'if bx1b4d@y bx1b55@call (list 'quote '#f))) (bx1af2@build-dispatch-call bx1b47@pvars bx1b35@fender bx1b4d@y bx1b32@r bx1b33@mr))))) (bxae1@gen-lexical 'tmp))))) bx1b44@bx1b42 bx1b43@bx1b40))))) (set! bx1af8@gen-syntax-case (lambda (bx1b0d@x bx1b0e@keys bx1b0f@clauses bx1b10@r bx1b11@mr) (if (null? bx1b0f@clauses) (list '(primitive syntax-error) bx1b0d@x) ((lambda (bx1b17@t) ((lambda (bx1b19@ls/false) (if bx1b19@ls/false (apply (lambda (bx1b1b@pat bx1b1c@expr) (if (and (bxb59@id? bx1b1b@pat) (not (bxb65@bound-id-member? bx1b1b@pat bx1b0e@keys)) (not (bxd60@ellipsis? bx1b1b@pat))) (if (bxb5f@free-id=? bx1b1b@pat (bxce8@scheme-stx '_)) (bxd80@chi-expr bx1b1c@expr bx1b10@r bx1b11@mr) ((lambda (bx1b1f@lab bx1b20@lex) ((lambda (bx1b23@body) (list (bxabd@bx9fd@build-lambda '#f (list bx1b20@lex) bx1b23@body) bx1b0d@x)) (bxd80@chi-expr (bxb45@add-subst (bxb19@make-full-rib (list bx1b1b@pat) (list bx1b1f@lab)) bx1b1c@expr) (cons (cons bx1b1f@lab (bxb73@make-binding 'syntax (cons bx1b20@lex '0))) bx1b10@r) bx1b11@mr))) (bxae5@gen-label bx1b1b@pat) (bxae1@gen-lexical bx1b1b@pat))) (bx1af6@gen-clause bx1b0d@x bx1b0e@keys (cdr bx1b0f@clauses) bx1b10@r bx1b11@mr bx1b1b@pat '#t bx1b1c@expr))) bx1b19@ls/false) ((lambda (bx1b25@t) ((lambda (bx1b27@ls/false) (if bx1b27@ls/false (apply (lambda (bx1b29@pat bx1b2a@fender bx1b2b@expr) (bx1af6@gen-clause bx1b0d@x bx1b0e@keys (cdr bx1b0f@clauses) bx1b10@r bx1b11@mr bx1b29@pat bx1b2a@fender bx1b2b@expr)) bx1b27@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1b25@t))) (bxd5e@syntax-dispatch bx1b25@t '(any any any)))) bx1b17@t))) (bxd5e@syntax-dispatch bx1b17@t '(any any)))) (car bx1b0f@clauses))))) (lambda (bx1af9@e bx1afa@r bx1afb@mr) ((lambda (bx1aff@t) ((lambda (bx1b01@ls/false) (if bx1b01@ls/false (apply (lambda (bx1b03@expr bx1b04@keys bx1b05@clauses) (begin (bxd64@verify-literals bx1b04@keys bx1af9@e) ((lambda (bx1b09@x) ((lambda (bx1b0b@body) (list (bxabd@bx9fd@build-lambda '#f (list bx1b09@x) bx1b0b@body) (bxd80@chi-expr bx1b03@expr bx1afa@r bx1afb@mr))) (bx1af8@gen-syntax-case bx1b09@x bx1b04@keys bx1b05@clauses bx1afa@r bx1afb@mr))) (bxae1@gen-lexical 'tmp)))) bx1b01@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1aff@t))) (bxd5e@syntax-dispatch bx1aff@t '(_ any each-any . each-any)))) bx1af9@e)))) '#f '#f '#f '#f)))) (set! bxd68@ellipsis-map (lambda (bx1b7d@proc bx1b7e@ls . bx1b81@ls*) ((lambda (bx1b84@who) (begin (set! bx1b84@who '...) (begin (if (not (list? bx1b7e@ls)) (assertion-violation bx1b84@who '"not a list" bx1b7e@ls) (void)) (if (not (null? bx1b81@ls*)) ((lambda (bx1b85@n) (for-each (lambda (bx1b87@x) (begin (if (not (list? bx1b87@x)) (assertion-violation bx1b84@who '"not a list" bx1b87@x) (void)) (if (not (= (length bx1b87@x) bx1b85@n)) (assertion-violation bx1b84@who '"length mismatch" bx1b7e@ls bx1b87@x) (void)))) bx1b81@ls*)) (length bx1b7e@ls)) (void)) (apply map bx1b7d@proc bx1b7e@ls bx1b81@ls*)))) '#f))) (set! bxd6a@syntax-transformer ((lambda () ((lambda (bx1b8a@gen-syntax bx1b8c@gen-ref bx1b8e@gen-append bx1b90@gen-mappend bx1b92@gen-map bx1b94@gen-cons bx1b96@gen-vector bx1b98@regen) (begin (set! bx1b8a@gen-syntax (lambda (bx1c01@src bx1c02@e bx1c03@r bx1c04@maps bx1c05@ellipsis? bx1c06@vec?) ((lambda (bx1c0d@t) ((lambda (bx1c0f@ls/false) (if (and bx1c0f@ls/false (apply (lambda (bx1c11@dots) (bx1c05@ellipsis? bx1c11@dots)) bx1c0f@ls/false)) (apply (lambda (bx1c13@dots) (bxe3e@syntax-violation '#f '"misplaced ellipsis in syntax form" bx1c01@src)) bx1c0f@ls/false) ((lambda (bx1c15@t) ((lambda (bx1c17@ls/false) (if (and bx1c17@ls/false (apply (lambda (bx1c19@id) (bxb59@id? bx1c19@id)) bx1c17@ls/false)) (apply (lambda (bx1c1b@id) ((lambda (bx1c1d@label) ((lambda (bx1c1f@b) ((lambda () (if (eq? (bxb75@binding-type bx1c1f@b) 'syntax) (call-with-values (lambda () ((lambda (bx1c25@var.lev) (bx1b8c@gen-ref bx1c01@src (car bx1c25@var.lev) (cdr bx1c25@var.lev) bx1c04@maps)) (bxb77@binding-value bx1c1f@b))) (lambda (bx1c27@bx1c22 bx1c28@bx1c24) ((lambda (bx1c2b@maps bx1c2c@var) (values (list 'ref bx1c2c@var) bx1c2b@maps)) bx1c28@bx1c24 bx1c27@bx1c22))) (values (list 'quote bx1c02@e) bx1c04@maps))))) (bxb71@label->binding bx1c1d@label bx1c03@r))) (bxb6f@id->label bx1c02@e))) bx1c17@ls/false) ((lambda (bx1c2f@t) ((lambda (bx1c31@ls/false) (if (and bx1c31@ls/false (apply (lambda (bx1c33@dots bx1c34@e) (bx1c05@ellipsis? bx1c33@dots)) bx1c31@ls/false)) (apply (lambda (bx1c37@dots bx1c38@e) (if bx1c06@vec? (bxe3e@syntax-violation '#f '"misplaced ellipsis in syntax form" bx1c01@src) (bx1b8a@gen-syntax bx1c01@src bx1c38@e bx1c03@r bx1c04@maps (lambda (bx1c3b@x) '#f) '#f))) bx1c31@ls/false) ((lambda (bx1c3d@t) ((lambda (bx1c3f@ls/false) (if (and bx1c3f@ls/false (apply (lambda (bx1c41@x bx1c42@dots bx1c43@y) (bx1c05@ellipsis? bx1c42@dots)) bx1c3f@ls/false)) (apply (lambda (bx1c47@x bx1c48@dots bx1c49@y) ((letrec ((bx1c4d@f (lambda (bx1c4f@y bx1c50@k) ((lambda (bx1c53@t) ((lambda (bx1c55@ls/false) (if bx1c55@ls/false (apply (lambda () (bx1c50@k bx1c04@maps)) bx1c55@ls/false) ((lambda (bx1c57@t) ((lambda (bx1c59@ls/false) (if (and bx1c59@ls/false (apply (lambda (bx1c5b@dots bx1c5c@y) (bx1c05@ellipsis? bx1c5b@dots)) bx1c59@ls/false)) (apply (lambda (bx1c5f@dots bx1c60@y) (bx1c4d@f bx1c60@y (lambda (bx1c63@maps) (call-with-values (lambda () (bx1c50@k (cons '() bx1c63@maps))) (lambda (bx1c69@bx1c66 bx1c6a@bx1c68) ((lambda (bx1c6d@maps bx1c6e@x) (if (null? (car bx1c6d@maps)) (bxe3e@syntax-violation '#f '"extra ellipsis in syntax form" bx1c01@src) (values (bx1b90@gen-mappend bx1c6e@x (car bx1c6d@maps)) (cdr bx1c6d@maps)))) bx1c6a@bx1c68 bx1c69@bx1c66)))))) bx1c59@ls/false) ((lambda (bx1c71@t) ((lambda (bx1c73@ls/false) (if bx1c73@ls/false (apply (lambda () (call-with-values (lambda () (bx1b8a@gen-syntax bx1c01@src bx1c4f@y bx1c03@r bx1c04@maps bx1c05@ellipsis? bx1c06@vec?)) (lambda (bx1c79@bx1c76 bx1c7a@bx1c78) ((lambda (bx1c7d@maps bx1c7e@y) (call-with-values (lambda () (bx1c50@k bx1c7d@maps)) (lambda (bx1c85@bx1c82 bx1c86@bx1c84) ((lambda (bx1c89@maps bx1c8a@x) (values (bx1b8e@gen-append bx1c8a@x bx1c7e@y) bx1c89@maps)) bx1c86@bx1c84 bx1c85@bx1c82)))) bx1c7a@bx1c78 bx1c79@bx1c76)))) bx1c73@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1c71@t))) (bxd5e@syntax-dispatch bx1c71@t '_))) bx1c57@t))) (bxd5e@syntax-dispatch bx1c57@t '(any . any)))) bx1c53@t))) (bxd5e@syntax-dispatch bx1c53@t '()))) bx1c4f@y)))) bx1c4d@f) bx1c49@y (lambda (bx1c8d@maps) (call-with-values (lambda () (bx1b8a@gen-syntax bx1c01@src bx1c47@x bx1c03@r (cons '() bx1c8d@maps) bx1c05@ellipsis? '#f)) (lambda (bx1c93@bx1c90 bx1c94@bx1c92) ((lambda (bx1c97@maps bx1c98@x) (if (null? (car bx1c97@maps)) (bxe3e@syntax-violation '#f '"extra ellipsis in syntax form" bx1c01@src) (values (bx1b92@gen-map bx1c98@x (car bx1c97@maps)) (cdr bx1c97@maps)))) bx1c94@bx1c92 bx1c93@bx1c90)))))) bx1c3f@ls/false) ((lambda (bx1c9b@t) ((lambda (bx1c9d@ls/false) (if bx1c9d@ls/false (apply (lambda (bx1c9f@x bx1ca0@y) (call-with-values (lambda () (bx1b8a@gen-syntax bx1c01@src bx1c9f@x bx1c03@r bx1c04@maps bx1c05@ellipsis? '#f)) (lambda (bx1ca7@bx1ca4 bx1ca8@bx1ca6) ((lambda (bx1cab@maps bx1cac@xnew) (call-with-values (lambda () (bx1b8a@gen-syntax bx1c01@src bx1ca0@y bx1c03@r bx1cab@maps bx1c05@ellipsis? bx1c06@vec?)) (lambda (bx1cb3@bx1cb0 bx1cb4@bx1cb2) ((lambda (bx1cb7@maps bx1cb8@ynew) (values (bx1b94@gen-cons bx1c02@e bx1c9f@x bx1ca0@y bx1cac@xnew bx1cb8@ynew) bx1cb7@maps)) bx1cb4@bx1cb2 bx1cb3@bx1cb0)))) bx1ca8@bx1ca6 bx1ca7@bx1ca4)))) bx1c9d@ls/false) ((lambda (bx1cbb@t) ((lambda (bx1cbd@ls/false) (if bx1cbd@ls/false (apply (lambda (bx1cbf@ls) (call-with-values (lambda () (bx1b8a@gen-syntax bx1c01@src bx1cbf@ls bx1c03@r bx1c04@maps bx1c05@ellipsis? '#t)) (lambda (bx1cc5@bx1cc2 bx1cc6@bx1cc4) ((lambda (bx1cc9@maps bx1cca@lsnew) (values (bx1b96@gen-vector bx1c02@e bx1cbf@ls bx1cca@lsnew) bx1cc9@maps)) bx1cc6@bx1cc4 bx1cc5@bx1cc2)))) bx1cbd@ls/false) ((lambda (bx1ccd@t) ((lambda (bx1ccf@ls/false) (if bx1ccf@ls/false (apply (lambda () (values (list 'quote bx1c02@e) bx1c04@maps)) bx1ccf@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1ccd@t))) (bxd5e@syntax-dispatch bx1ccd@t '_))) bx1cbb@t))) (bxd5e@syntax-dispatch bx1cbb@t '#(vector each-any)))) bx1c9b@t))) (bxd5e@syntax-dispatch bx1c9b@t '(any . any)))) bx1c3d@t))) (bxd5e@syntax-dispatch bx1c3d@t '(any any . any)))) bx1c2f@t))) (bxd5e@syntax-dispatch bx1c2f@t '(any any)))) bx1c15@t))) (bxd5e@syntax-dispatch bx1c15@t 'any))) bx1c0d@t))) (bxd5e@syntax-dispatch bx1c0d@t 'any))) bx1c02@e))) (set! bx1b8c@gen-ref (lambda (bx1be7@src bx1be8@var bx1be9@level bx1bea@maps) (if (= bx1be9@level '0) (values bx1be8@var bx1bea@maps) (if (null? bx1bea@maps) (bxe3e@syntax-violation '#f '"missing ellipsis in syntax form" bx1be7@src) (call-with-values (lambda () (bx1b8c@gen-ref bx1be7@src bx1be8@var (- bx1be9@level '1) (cdr bx1bea@maps))) (lambda (bx1bf3@bx1bf0 bx1bf4@bx1bf2) ((lambda (bx1bf7@outer-maps bx1bf8@outer-var) ((lambda (bx1bfb@t) (if bx1bfb@t ((lambda (bx1bfd@b) (values (cdr bx1bfd@b) bx1bea@maps)) bx1bfb@t) ((lambda (bx1bff@inner-var) (values bx1bff@inner-var (cons (cons (cons bx1bf8@outer-var bx1bff@inner-var) (car bx1bea@maps)) bx1bf7@outer-maps))) (bxae1@gen-lexical 'tmp)))) (assq bx1bf8@outer-var (car bx1bea@maps)))) bx1bf4@bx1bf2 bx1bf3@bx1bf0))))))) (set! bx1b8e@gen-append (lambda (bx1be3@x bx1be4@y) (if (fast-equal? bx1be4@y ''()) bx1be3@x (list 'append bx1be3@x bx1be4@y)))) (set! bx1b90@gen-mappend (lambda (bx1bdf@e bx1be0@map-env) (list 'apply '(primitive append) (bx1b92@gen-map bx1bdf@e bx1be0@map-env)))) (set! bx1b92@gen-map (lambda (bx1bcd@e bx1bce@map-env) ((lambda (bx1bd1@formals bx1bd2@actuals) (if (eq? (car bx1bcd@e) 'ref) (car bx1bd2@actuals) (if (for-all (lambda (bx1bd5@x) (and (eq? (car bx1bd5@x) 'ref) (memq (cadr bx1bd5@x) bx1bd1@formals))) (cdr bx1bcd@e)) ((lambda (bx1bd7@args) (cons 'map (cons (list 'primitive (car bx1bcd@e)) bx1bd7@args))) (map ((lambda (bx1bd9@r) (lambda (bx1bdb@x) (cdr (assq (cadr bx1bdb@x) bx1bd9@r)))) (map cons bx1bd1@formals bx1bd2@actuals)) (cdr bx1bcd@e))) (cons* 'map (list 'lambda bx1bd1@formals bx1bcd@e) bx1bd2@actuals)))) (map cdr bx1bce@map-env) (map (lambda (bx1bdd@x) (list 'ref (car bx1bdd@x))) bx1bce@map-env)))) (set! bx1b94@gen-cons (lambda (bx1bbd@e bx1bbe@x bx1bbf@y bx1bc0@xnew bx1bc1@ynew) ((lambda (bx1bc7@t) (if (memv bx1bc7@t '(quote)) (if (eq? (car bx1bc0@xnew) 'quote) ((lambda (bx1bc9@xnew bx1bca@ynew) (if (and (eq? bx1bc9@xnew bx1bbe@x) (eq? bx1bca@ynew bx1bbf@y)) (list 'quote bx1bbd@e) (list 'quote (cons bx1bc9@xnew bx1bca@ynew)))) (cadr bx1bc0@xnew) (cadr bx1bc1@ynew)) (if (null? (cadr bx1bc1@ynew)) (list 'list bx1bc0@xnew) (list 'cons bx1bc0@xnew bx1bc1@ynew))) (if (memv bx1bc7@t '(list)) (cons 'list (cons bx1bc0@xnew (cdr bx1bc1@ynew))) (list 'cons bx1bc0@xnew bx1bc1@ynew)))) (car bx1bc1@ynew)))) (set! bx1b96@gen-vector (lambda (bx1bb7@e bx1bb8@ls bx1bb9@lsnew) (if (eq? (car bx1bb9@lsnew) 'quote) (if (eq? (cadr bx1bb9@lsnew) bx1bb8@ls) (list 'quote bx1bb7@e) (list 'quote (list->vector (cadr bx1bb9@lsnew)))) (if (eq? (car bx1bb9@lsnew) 'list) (cons 'vector (cdr bx1bb9@lsnew)) (list 'list->vector bx1bb9@lsnew))))) (set! bx1b98@regen (lambda (bx1bb1@x) ((lambda (bx1bb3@t) (if (memv bx1bb3@t '(ref)) (cadr bx1bb1@x) (if (memv bx1bb3@t '(primitive)) (list 'primitive (cadr bx1bb1@x)) (if (memv bx1bb3@t '(quote)) (list 'quote (cadr bx1bb1@x)) (if (memv bx1bb3@t '(lambda)) (bxabd@bx9fd@build-lambda '#f (cadr bx1bb1@x) (bx1b98@regen (caddr bx1bb1@x))) (if (memv bx1bb3@t '(map)) ((lambda (bx1bb5@ls) (cons '(primitive ellipsis-map) bx1bb5@ls)) (map bx1b98@regen (cdr bx1bb1@x))) (cons (list 'primitive (car bx1bb1@x)) (map bx1b98@regen (cdr bx1bb1@x))))))))) (car bx1bb1@x)))) (lambda (bx1b99@e bx1b9a@r bx1b9b@mr) ((lambda (bx1b9f@t) ((lambda (bx1ba1@ls/false) (if bx1ba1@ls/false (apply (lambda (bx1ba3@x) (call-with-values (lambda () (bx1b8a@gen-syntax bx1b99@e bx1ba3@x bx1b9a@r '() bxd60@ellipsis? '#f)) (lambda (bx1ba9@bx1ba6 bx1baa@bx1ba8) ((lambda (bx1bad@maps bx1bae@e) (bx1b98@regen bx1bae@e)) bx1baa@bx1ba8 bx1ba9@bx1ba6)))) bx1ba1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1b9f@t))) (bxd5e@syntax-dispatch bx1b9f@t '(_ any)))) bx1b99@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bxd6c@core-macro-transformer (lambda (bx1cd1@name) ((lambda (bx1cd3@t) (if (memv bx1cd3@t '(quote)) bxd0e@quote-transformer (if (memv bx1cd3@t '(lambda)) bxd12@lambda-transformer (if (memv bx1cd3@t '(case-lambda)) bxd10@case-lambda-transformer (if (memv bx1cd3@t '(letrec)) bxcf6@letrec-transformer (if (memv bx1cd3@t '(letrec*)) bxcf8@letrec*-transformer (if (memv bx1cd3@t '(if)) bxd06@if-transformer (if (memv bx1cd3@t '(and)) bxd08@and-transformer (if (memv bx1cd3@t '(or)) bxd0a@or-transformer (if (memv bx1cd3@t '(foreign-call)) bxd5a@foreign-call-transformer (if (memv bx1cd3@t '(syntax-case)) bxd66@syntax-case-transformer (if (memv bx1cd3@t '(syntax)) bxd6a@syntax-transformer (if (memv bx1cd3@t '(type-descriptor)) bxcfc@type-descriptor-transformer (if (memv bx1cd3@t '(record-type-descriptor)) bxcfe@record-type-descriptor-transformer (if (memv bx1cd3@t '(record-constructor-descriptor)) bxd00@record-constructor-descriptor-transformer (if (memv bx1cd3@t '(fluid-let-syntax)) bxcfa@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bx1cd1@name))))))))))))))))) bx1cd1@name))) (set! bxd6e@symbol-macro (lambda (bx1cd5@x bx1cd6@set) ((lambda (bx1cd9@t) ((lambda (bx1cdb@ls/false) (if (and bx1cdb@ls/false (apply (lambda (bx1cdd@name) (and (bxb59@id? bx1cdd@name) (memq (bxb5b@id->sym bx1cdd@name) bx1cd6@set))) bx1cdb@ls/false)) (apply (lambda (bx1cdf@name) (bxd14@bless (list 'quote bx1cdf@name))) bx1cdb@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1cd9@t))) (bxd5e@syntax-dispatch bx1cd9@t '(_ any)))) bx1cd5@x))) (set! bxd70@macro-transformer (lambda (bx1ce1@x) (if (procedure? bx1ce1@x) bx1ce1@x (if (symbol? bx1ce1@x) ((lambda (bx1ce3@t) (if (memv bx1ce3@t '(define-record-type)) bxd52@define-record-type-macro (if (memv bx1ce3@t '(define-struct)) bxd50@define-struct-macro (if (memv bx1ce3@t '(include)) bxd46@include-macro (if (memv bx1ce3@t '(cond)) bxd42@cond-macro (if (memv bx1ce3@t '(let)) bxd1a@let-macro (if (memv bx1ce3@t '(do)) bxd3a@do-macro (if (memv bx1ce3@t '(or)) bxd3e@or-macro (if (memv bx1ce3@t '(and)) bxd40@and-macro (if (memv bx1ce3@t '(let*)) bxd3c@let*-macro (if (memv bx1ce3@t '(let-values)) bxd1c@let-values-macro (if (memv bx1ce3@t '(let*-values)) bxd1e@let*-values-macro (if (memv bx1ce3@t '(syntax-rules)) bxd4a@syntax-rules-macro (if (memv bx1ce3@t '(quasiquote)) bxd4c@quasiquote-macro (if (memv bx1ce3@t '(quasisyntax)) bxd4e@quasisyntax-macro (if (memv bx1ce3@t '(with-syntax)) bxd16@with-syntax-macro (if (memv bx1ce3@t '(when)) bxd02@when-macro (if (memv bx1ce3@t '(unless)) bxd04@unless-macro (if (memv bx1ce3@t '(case)) bxd0c@case-macro (if (memv bx1ce3@t '(identifier-syntax)) bxd38@identifier-syntax-macro (if (memv bx1ce3@t '(time)) bxd30@time-macro (if (memv bx1ce3@t '(delay)) bxd32@delay-macro (if (memv bx1ce3@t '(assert)) bxd34@assert-macro (if (memv bx1ce3@t '(endianness)) bxd36@endianness-macro (if (memv bx1ce3@t '(guard)) bxd2c@guard-macro (if (memv bx1ce3@t '(define-enumeration)) bxd2e@define-enumeration-macro (if (memv bx1ce3@t '(trace-lambda)) bxd20@trace-lambda-macro (if (memv bx1ce3@t '(trace-define)) bxd22@trace-define-macro (if (memv bx1ce3@t '(trace-define-syntax)) bxd24@trace-define-syntax-macro (if (memv bx1ce3@t '(trace-let-syntax)) bxd28@trace-let-syntax-macro (if (memv bx1ce3@t '(trace-letrec-syntax)) bxd2a@trace-letrec-syntax-macro (if (memv bx1ce3@t '(define-condition-type)) bxd54@define-condition-type-macro (if (memv bx1ce3@t '(parameterize)) bxd58@parameterize-macro (if (memv bx1ce3@t '(include-into)) bxd48@include-into-macro (if (memv bx1ce3@t '(eol-style)) (lambda (bx1ce5@x) (bxd6e@symbol-macro bx1ce5@x '(none lf cr crlf nel crnel ls))) (if (memv bx1ce3@t '(error-handling-mode)) (lambda (bx1ce7@x) (bxd6e@symbol-macro bx1ce7@x '(ignore raise replace))) (if (memv bx1ce3@t '(buffer-mode)) (lambda (bx1ce9@x) (bxd6e@symbol-macro bx1ce9@x '(none line block))) (if (memv bx1ce3@t '(file-options)) bxad4@file-options-macro (if (memv bx1ce3@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bxd56@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bx1ce1@x)))))))))))))))))))))))))))))))))))))))) bx1ce1@x) (error 'core-macro-transformer '"BUG: invalid macro" bx1ce1@x))))) (set! bxd72@local-macro-transformer (lambda (bx1ceb@x) (car bx1ceb@x))) (set! bxd74@do-macro-call (lambda (bx1ced@transformer bx1cee@expr) ((lambda (bx1cf1@out) (begin ((letrec ((bx1cf3@f (lambda (bx1cf5@x) (if (not (bxb25@stx? bx1cf5@x)) (if (pair? bx1cf5@x) (begin (bx1cf3@f (car bx1cf5@x)) (bx1cf3@f (cdr bx1cf5@x))) (if (vector? bx1cf5@x) (vector-for-each bx1cf3@f bx1cf5@x) (if (symbol? bx1cf5@x) (bxe3e@syntax-violation '#f '"raw symbol encountered in output of macro" bx1cee@expr bx1cf5@x) (void)))) (void))))) bx1cf3@f) bx1cf1@out) (bxb43@add-mark (bxb3b@gen-mark) bx1cf1@out bx1cee@expr))) (bx1ced@transformer (bxb43@add-mark bxb3d@anti-mark bx1cee@expr '#f))))) (set! bxd76@chi-macro (lambda (bx1cf7@p bx1cf8@e) (bxd74@do-macro-call (bxd70@macro-transformer bx1cf7@p) bx1cf8@e))) (set! bxd78@chi-local-macro (lambda (bx1cfb@p bx1cfc@e) (bxd74@do-macro-call (bxd72@local-macro-transformer bx1cfb@p) bx1cfc@e))) (set! bxd7a@chi-global-macro (lambda (bx1cff@p bx1d00@e) ((lambda (bx1d03@lib bx1d04@loc) (begin (bx985@bx7d4@visit-library bx1d03@lib) ((lambda (bx1d07@x) ((lambda (bx1d09@transformer) (bxd74@do-macro-call bx1d09@transformer bx1d00@e)) (if (procedure? bx1d07@x) bx1d07@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bx1d07@x)))) (symbol-value bx1d04@loc)))) (car bx1cff@p) (cdr bx1cff@p)))) (set! bxd7c@chi-expr* (lambda (bx1d0b@e* bx1d0c@r bx1d0d@mr) (if (null? bx1d0b@e*) '() ((lambda (bx1d11@e) (cons bx1d11@e (bxd7c@chi-expr* (cdr bx1d0b@e*) bx1d0c@r bx1d0d@mr))) (bxd80@chi-expr (car bx1d0b@e*) bx1d0c@r bx1d0d@mr))))) (set! bxd7e@chi-application (lambda (bx1d13@e bx1d14@r bx1d15@mr) ((lambda (bx1d19@t) ((lambda (bx1d1b@ls/false) (if bx1d1b@ls/false (apply (lambda (bx1d1d@rator bx1d1e@rands) ((lambda (bx1d21@rator) (cons bx1d21@rator (bxd7c@chi-expr* bx1d1e@rands bx1d14@r bx1d15@mr))) (bxd80@chi-expr bx1d1d@rator bx1d14@r bx1d15@mr))) bx1d1b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1d19@t))) (bxd5e@syntax-dispatch bx1d19@t '(any . each-any)))) bx1d13@e))) (set! bxd80@chi-expr (lambda (bx1d23@e bx1d24@r bx1d25@mr) (call-with-values (lambda () (bxb7b@syntax-type bx1d23@e bx1d24@r)) (lambda (bx1d2f@bx1d2a bx1d30@bx1d2c bx1d31@bx1d2e) ((lambda (bx1d35@kwd bx1d36@value bx1d37@type) ((lambda (bx1d3b@t) (if (memv bx1d3b@t '(core-macro)) ((lambda (bx1d3d@transformer) (bx1d3d@transformer bx1d23@e bx1d24@r bx1d25@mr)) (bxd6c@core-macro-transformer bx1d36@value)) (if (memv bx1d3b@t '(global)) ((lambda (bx1d3f@lib) ((lambda (bx1d41@loc) ((lambda () (begin ((bxdc6@inv-collector) bx1d3f@lib) bx1d41@loc)))) (cdr bx1d36@value))) (car bx1d36@value)) (if (memv bx1d3b@t '(core-prim)) ((lambda (bx1d43@name) (list 'primitive bx1d43@name)) bx1d36@value) (if (memv bx1d3b@t '(call)) (bxd7e@chi-application bx1d23@e bx1d24@r bx1d25@mr) (if (memv bx1d3b@t '(lexical)) ((lambda (bx1d45@lex) bx1d45@lex) (bxcea@lexical-var bx1d36@value)) (if (memv bx1d3b@t '(global-macro global-macro!)) (bxd80@chi-expr (bxd7a@chi-global-macro bx1d36@value bx1d23@e) bx1d24@r bx1d25@mr) (if (memv bx1d3b@t '(local-macro local-macro!)) (bxd80@chi-expr (bxd78@chi-local-macro bx1d36@value bx1d23@e) bx1d24@r bx1d25@mr) (if (memv bx1d3b@t '(macro macro!)) (bxd80@chi-expr (bxd76@chi-macro bx1d36@value bx1d23@e) bx1d24@r bx1d25@mr) (if (memv bx1d3b@t '(constant)) ((lambda (bx1d47@datum) (list 'quote bx1d47@datum)) bx1d36@value) (if (memv bx1d3b@t '(set!)) (bxd82@chi-set! bx1d23@e bx1d24@r bx1d25@mr) (if (memv bx1d3b@t '(begin)) ((lambda (bx1d49@t) ((lambda (bx1d4b@ls/false) (if bx1d4b@ls/false (apply (lambda (bx1d4d@x bx1d4e@x*) (bxac0@bxa2f@build-sequence '#f (bxd7c@chi-expr* (cons bx1d4d@x bx1d4e@x*) bx1d24@r bx1d25@mr))) bx1d4b@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1d49@t))) (bxd5e@syntax-dispatch bx1d49@t '(_ any . each-any)))) bx1d23@e) (if (memv bx1d3b@t '(let-syntax letrec-syntax)) ((lambda (bx1d51@t) ((lambda (bx1d53@ls/false) (if (and bx1d53@ls/false (apply (lambda (bx1d55@xlhs* bx1d56@xrhs* bx1d57@xbody bx1d58@xbody*) (if (not (bxb61@valid-bound-ids? bx1d55@xlhs*)) (bxe3e@syntax-violation '#f '"invalid identifiers" bx1d23@e) (void))) bx1d53@ls/false)) (apply (lambda (bx1d5d@xlhs* bx1d5e@xrhs* bx1d5f@xbody bx1d60@xbody*) ((lambda (bx1d65@xlab*) ((lambda (bx1d67@xrib) ((lambda (bx1d69@xb*) ((lambda () (bxac0@bxa2f@build-sequence '#f (bxd7c@chi-expr* (map (lambda (bx1d6b@x) (bxb45@add-subst bx1d67@xrib bx1d6b@x)) (cons bx1d5f@xbody bx1d60@xbody*)) (append (map cons bx1d65@xlab* bx1d69@xb*) bx1d24@r) (append (map cons bx1d65@xlab* bx1d69@xb*) bx1d25@mr)))))) (map (lambda (bx1d6d@x) (bxb91@make-eval-transformer (bxdb8@expand-transformer (if (eq? bx1d37@type 'let-syntax) bx1d6d@x (bxb45@add-subst bx1d67@xrib bx1d6d@x)) bx1d25@mr))) bx1d5e@xrhs*))) (bxb19@make-full-rib bx1d5d@xlhs* bx1d65@xlab*))) (map bxae5@gen-label bx1d5d@xlhs*))) bx1d53@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1d51@t))) (bxd5e@syntax-dispatch bx1d51@t '(_ #(each (any any)) any . each-any)))) bx1d23@e) (if (memv bx1d3b@t '(displaced-lexical)) (bxe3e@syntax-violation '#f '"identifier out of context" bx1d23@e) (if (memv bx1d3b@t '(syntax)) (bxe3e@syntax-violation '#f '"reference to pattern variable outside a syntax form" bx1d23@e) (if (memv bx1d3b@t '(define define-syntax module import library)) (bxe3e@syntax-violation '#f (string-append ((lambda (bx1d6f@t) (if (memv bx1d6f@t '(define)) '"a definition" (if (memv bx1d6f@t '(define-syntax)) '"a define-syntax" (if (memv bx1d6f@t '(module)) '"a module definition" (if (memv bx1d6f@t '(library)) '"a library definition" (if (memv bx1d6f@t '(import)) '"an import declaration" (if (memv bx1d6f@t '(export)) '"an export declaration" '"a non-expression"))))))) bx1d37@type) '" was found where an expression was expected") bx1d23@e) (if (memv bx1d3b@t '(mutable)) (bxe3e@syntax-violation '#f '"attempt to reference an unexportable variable" bx1d23@e) (bxe3e@syntax-violation '#f '"invalid expression" bx1d23@e)))))))))))))))))) bx1d37@type)) bx1d31@bx1d2e bx1d30@bx1d2c bx1d2f@bx1d2a))))) (set! bxd82@chi-set! (lambda (bx1d71@e bx1d72@r bx1d73@mr) ((lambda (bx1d77@t) ((lambda (bx1d79@ls/false) (if (and bx1d79@ls/false (apply (lambda (bx1d7b@x bx1d7c@v) (bxb59@id? bx1d7b@x)) bx1d79@ls/false)) (apply (lambda (bx1d7f@x bx1d80@v) (call-with-values (lambda () (bxb7b@syntax-type bx1d7f@x bx1d72@r)) (lambda (bx1d89@bx1d84 bx1d8a@bx1d86 bx1d8b@bx1d88) ((lambda (bx1d8f@kwd bx1d90@value bx1d91@type) ((lambda (bx1d95@t) (if (memv bx1d95@t '(lexical)) (begin (bxcee@set-lexical-mutable! bx1d90@value '#t) (list 'set! (bxcea@lexical-var bx1d90@value) (bxd80@chi-expr bx1d80@v bx1d72@r bx1d73@mr))) (if (memv bx1d95@t '(core-prim)) (bxe3e@syntax-violation '#f '"cannot modify imported core primitive" bx1d71@e) (if (memv bx1d95@t '(global)) (bxe3e@syntax-violation '#f '"attempt to modify imported binding" bx1d71@e) (if (memv bx1d95@t '(global-macro!)) (bxd80@chi-expr (bxd7a@chi-global-macro bx1d90@value bx1d71@e) bx1d72@r bx1d73@mr) (if (memv bx1d95@t '(local-macro!)) (bxd80@chi-expr (bxd78@chi-local-macro bx1d90@value bx1d71@e) bx1d72@r bx1d73@mr) (if (memv bx1d95@t '(mutable)) (bxe3e@syntax-violation '#f '"attempt to assign to an unexportable variable" bx1d71@e) (bxe3e@syntax-violation '#f '"invalid syntax" bx1d71@e)))))))) bx1d91@type)) bx1d8b@bx1d88 bx1d8a@bx1d86 bx1d89@bx1d84)))) bx1d79@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1d77@t))) (bxd5e@syntax-dispatch bx1d77@t '(_ any any)))) bx1d71@e))) (set! bxd84@verify-formals (lambda (bx1d97@fmls bx1d98@stx) ((lambda (bx1d9b@t) ((lambda (bx1d9d@ls/false) (if bx1d9d@ls/false (apply (lambda (bx1d9f@x*) (if (not (bxb61@valid-bound-ids? bx1d9f@x*)) (bxd18@invalid-fmls-error bx1d98@stx bx1d97@fmls) (void))) bx1d9d@ls/false) ((lambda (bx1da1@t) ((lambda (bx1da3@ls/false) (if bx1da3@ls/false (apply (lambda (bx1da5@x* bx1da6@x) (if (not (bxb61@valid-bound-ids? (cons bx1da6@x bx1da5@x*))) (bxd18@invalid-fmls-error bx1d98@stx bx1d97@fmls) (void))) bx1da3@ls/false) ((lambda (bx1da9@t) ((lambda (bx1dab@ls/false) (if bx1dab@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid syntax" bx1d98@stx)) bx1dab@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1da9@t))) (bxd5e@syntax-dispatch bx1da9@t '_))) bx1da1@t))) (bxd5e@syntax-dispatch bx1da1@t '#(each+ any () any)))) bx1d9b@t))) (bxd5e@syntax-dispatch bx1d9b@t 'each-any))) bx1d97@fmls))) (set! bxd86@chi-lambda-clause (lambda (bx1dad@stx bx1dae@fmls bx1daf@body* bx1db0@r bx1db1@mr) ((lambda (bx1db7@t) ((lambda (bx1db9@ls/false) (if bx1db9@ls/false (apply (lambda (bx1dbb@x*) (begin (bxd84@verify-formals bx1dae@fmls bx1dad@stx) ((lambda (bx1dbd@lex* bx1dbe@lab*) (values bx1dbd@lex* (bxd96@chi-internal (bxb45@add-subst (bxb19@make-full-rib bx1dbb@x* bx1dbe@lab*) bx1daf@body*) (bxcf2@add-lexicals bx1dbe@lab* bx1dbd@lex* bx1db0@r) bx1db1@mr))) (map bxae1@gen-lexical bx1dbb@x*) (map bxae5@gen-label bx1dbb@x*)))) bx1db9@ls/false) ((lambda (bx1dc1@t) ((lambda (bx1dc3@ls/false) (if bx1dc3@ls/false (apply (lambda (bx1dc5@x* bx1dc6@x) (begin (bxd84@verify-formals bx1dae@fmls bx1dad@stx) ((lambda (bx1dc9@lex* bx1dca@lab* bx1dcb@lex bx1dcc@lab) (values (append bx1dc9@lex* bx1dcb@lex) (bxd96@chi-internal (bxb45@add-subst (bxb19@make-full-rib (cons bx1dc6@x bx1dc5@x*) (cons bx1dcc@lab bx1dca@lab*)) bx1daf@body*) (bxcf2@add-lexicals (cons bx1dcc@lab bx1dca@lab*) (cons bx1dcb@lex bx1dc9@lex*) bx1db0@r) bx1db1@mr))) (map bxae1@gen-lexical bx1dc5@x*) (map bxae5@gen-label bx1dc5@x*) (bxae1@gen-lexical bx1dc6@x) (bxae5@gen-label bx1dc6@x)))) bx1dc3@ls/false) ((lambda (bx1dd1@t) ((lambda (bx1dd3@ls/false) (if bx1dd3@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid syntax" bx1dae@fmls)) bx1dd3@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1dd1@t))) (bxd5e@syntax-dispatch bx1dd1@t '_))) bx1dc1@t))) (bxd5e@syntax-dispatch bx1dc1@t '#(each+ any () any)))) bx1db7@t))) (bxd5e@syntax-dispatch bx1db7@t 'each-any))) bx1dae@fmls))) (set! bxd88@chi-lambda-clause* (lambda (bx1dd5@stx bx1dd6@fmls* bx1dd7@body** bx1dd8@r bx1dd9@mr) (if (null? bx1dd6@fmls*) (values '() '()) (call-with-values (lambda () (bxd86@chi-lambda-clause bx1dd5@stx (car bx1dd6@fmls*) (car bx1dd7@body**) bx1dd8@r bx1dd9@mr)) (lambda (bx1de3@bx1de0 bx1de4@bx1de2) ((lambda (bx1de7@b bx1de8@a) (call-with-values (lambda () (bxd88@chi-lambda-clause* bx1dd5@stx (cdr bx1dd6@fmls*) (cdr bx1dd7@body**) bx1dd8@r bx1dd9@mr)) (lambda (bx1def@bx1dec bx1df0@bx1dee) ((lambda (bx1df3@b* bx1df4@a*) (values (cons bx1de8@a bx1df4@a*) (cons bx1de7@b bx1df3@b*))) bx1df0@bx1dee bx1def@bx1dec)))) bx1de4@bx1de2 bx1de3@bx1de0)))))) (set! bxd8a@chi-defun (lambda (bx1df7@x bx1df8@r bx1df9@mr) ((lambda (bx1dfd@fmls bx1dfe@body*) (call-with-values (lambda () (bxd86@chi-lambda-clause bx1dfd@fmls bx1dfd@fmls bx1dfe@body* bx1df8@r bx1df9@mr)) (lambda (bx1e05@bx1e02 bx1e06@bx1e04) ((lambda (bx1e09@body bx1e0a@fmls) (bxabd@bx9fd@build-lambda '#f bx1e0a@fmls bx1e09@body)) bx1e06@bx1e04 bx1e05@bx1e02)))) (car bx1df7@x) (cdr bx1df7@x)))) (set! bxd8c@chi-rhs (lambda (bx1e0d@rhs bx1e0e@r bx1e0f@mr) ((lambda (bx1e13@t) (if (memv bx1e13@t '(defun)) (bxd8a@chi-defun (cdr bx1e0d@rhs) bx1e0e@r bx1e0f@mr) (if (memv bx1e13@t '(expr)) ((lambda (bx1e15@expr) (bxd80@chi-expr bx1e15@expr bx1e0e@r bx1e0f@mr)) (cdr bx1e0d@rhs)) (if (memv bx1e13@t '(top-expr)) ((lambda (bx1e17@expr) (bxac0@bxa2f@build-sequence '#f (list (bxd80@chi-expr bx1e17@expr bx1e0e@r bx1e0f@mr) (bxac1@bxa31@build-void)))) (cdr bx1e0d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bx1e0d@rhs))))) (car bx1e0d@rhs)))) (set! bxd8e@expand-interaction-rhs*/init* (lambda (bx1e19@lhs* bx1e1a@rhs* bx1e1b@init* bx1e1c@r bx1e1d@mr) ((letrec ((bx1e23@f (lambda (bx1e25@lhs* bx1e26@rhs*) (if (null? bx1e25@lhs*) (map (lambda (bx1e29@x) (bxd80@chi-expr bx1e29@x bx1e1c@r bx1e1d@mr)) bx1e1b@init*) ((lambda (bx1e2b@lhs bx1e2c@rhs) ((lambda (bx1e2f@t) (if (memv bx1e2f@t '(defun)) ((lambda (bx1e31@rhs) (cons (list 'set! bx1e2b@lhs bx1e31@rhs) (bx1e23@f (cdr bx1e25@lhs*) (cdr bx1e26@rhs*)))) (bxd8a@chi-defun (cdr bx1e2c@rhs) bx1e1c@r bx1e1d@mr)) (if (memv bx1e2f@t '(expr)) ((lambda (bx1e33@rhs) (cons (list 'set! bx1e2b@lhs bx1e33@rhs) (bx1e23@f (cdr bx1e25@lhs*) (cdr bx1e26@rhs*)))) (bxd80@chi-expr (cdr bx1e2c@rhs) bx1e1c@r bx1e1d@mr)) (if (memv bx1e2f@t '(top-expr)) ((lambda (bx1e35@e) (cons bx1e35@e (bx1e23@f (cdr bx1e25@lhs*) (cdr bx1e26@rhs*)))) (bxd80@chi-expr (cdr bx1e2c@rhs) bx1e1c@r bx1e1d@mr)) (error 'expand-interaction '"invallid" bx1e2c@rhs))))) (car bx1e2c@rhs))) (car bx1e25@lhs*) (car bx1e26@rhs*)))))) bx1e23@f) bx1e19@lhs* bx1e1a@rhs*))) (set! bxd90@chi-rhs* (lambda (bx1e37@rhs* bx1e38@r bx1e39@mr) ((letrec ((bx1e3d@f (lambda (bx1e3f@ls) (if (null? bx1e3f@ls) '() ((lambda (bx1e41@a) (cons bx1e41@a (bx1e3d@f (cdr bx1e3f@ls)))) (bxd8c@chi-rhs (car bx1e3f@ls) bx1e38@r bx1e39@mr)))))) bx1e3d@f) bx1e37@rhs*))) (set! bxd92@find-bound=? (lambda (bx1e43@x bx1e44@lhs* bx1e45@rhs*) (if (null? bx1e44@lhs*) '#f (if (bxb5d@bound-id=? bx1e43@x (car bx1e44@lhs*)) (car bx1e45@rhs*) (bxd92@find-bound=? bx1e43@x (cdr bx1e44@lhs*) (cdr bx1e45@rhs*)))))) (set! bxd94@find-dups (lambda (bx1e49@ls) ((letrec ((bx1e4b@f (lambda (bx1e4d@ls bx1e4e@dups) (if (null? bx1e4d@ls) bx1e4e@dups ((lambda (bx1e51@t) (if bx1e51@t ((lambda (bx1e53@x) (bx1e4b@f (cdr bx1e4d@ls) (cons (list (car bx1e4d@ls) bx1e53@x) bx1e4e@dups))) bx1e51@t) (bx1e4b@f (cdr bx1e4d@ls) bx1e4e@dups))) (bxd92@find-bound=? (car bx1e4d@ls) (cdr bx1e4d@ls) (cdr bx1e4d@ls))))))) bx1e4b@f) bx1e49@ls '()))) (set! bxd96@chi-internal (lambda (bx1e55@e* bx1e56@r bx1e57@mr) ((lambda (bx1e5b@rib) (call-with-values (lambda () (bxdb6@chi-body* (map (lambda (bx1e6d@x) (bxb45@add-subst bx1e5b@rib bx1e6d@x)) (bxb57@syntax->list bx1e55@e*)) bx1e56@r bx1e57@mr '() '() '() '() '() bx1e5b@rib '#f)) (lambda (bx1e6f@bx1e5e bx1e70@bx1e60 bx1e71@bx1e62 bx1e72@bx1e64 bx1e73@bx1e66 bx1e74@bx1e68 bx1e75@bx1e6a bx1e76@bx1e6c) ((lambda (bx1e7f@_exp* bx1e80@kwd* bx1e81@mod** bx1e82@rhs* bx1e83@lex* bx1e84@mr bx1e85@r bx1e86@e*) (begin (if (null? bx1e86@e*) (bxe3e@syntax-violation '#f '"no expression in body" bx1e86@e*) (void)) ((lambda (bx1e8f@init*) ((lambda (bx1e91@rhs*) ((lambda () (bxac3@bxa35@build-letrec* '#f (reverse bx1e83@lex*) (reverse bx1e91@rhs*) (bxac0@bxa2f@build-sequence '#f bx1e8f@init*))))) (bxd90@chi-rhs* bx1e82@rhs* bx1e85@r bx1e84@mr))) (bxd7c@chi-expr* (append (apply append (reverse bx1e81@mod**)) bx1e86@e*) bx1e85@r bx1e84@mr)))) bx1e76@bx1e6c bx1e75@bx1e6a bx1e74@bx1e68 bx1e73@bx1e66 bx1e72@bx1e64 bx1e71@bx1e62 bx1e70@bx1e60 bx1e6f@bx1e5e)))) (bxb0d@make-empty-rib)))) (set! bxd98@parse-module (lambda (bx1e93@e) ((lambda (bx1e95@t) ((lambda (bx1e97@ls/false) (if bx1e97@ls/false (apply (lambda (bx1e99@export* bx1e9a@b*) (begin (if (not (for-all bxb59@id? bx1e99@export*)) (bxe3e@syntax-violation '#f '"module exports must be identifiers" bx1e93@e) (void)) (values '#f (list->vector bx1e99@export*) bx1e9a@b*))) bx1e97@ls/false) ((lambda (bx1e9d@t) ((lambda (bx1e9f@ls/false) (if bx1e9f@ls/false (apply (lambda (bx1ea1@name bx1ea2@export* bx1ea3@b*) (begin (if (not (bxb59@id? bx1ea1@name)) (bxe3e@syntax-violation '#f '"module name must be an identifier" bx1e93@e) (void)) (if (not (for-all bxb59@id? bx1ea2@export*)) (bxe3e@syntax-violation '#f '"module exports must be identifiers" bx1e93@e) (void)) (values bx1ea1@name (list->vector bx1ea2@export*) bx1ea3@b*))) bx1e9f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1e9d@t))) (bxd5e@syntax-dispatch bx1e9d@t '(_ any each-any . each-any)))) bx1e95@t))) (bxd5e@syntax-dispatch bx1e95@t '(_ each-any . each-any)))) bx1e93@e))) (set! bxda2@module-interface? (lambda (bx1ea7@x) (and (simple-struct? bx1ea7@x) (eq? (simple-struct-name bx1ea7@x) 'module-interface)))) (set! bxda4@module-interface-first-mark (lambda (bx1ea9@x) (simple-struct-ref bx1ea9@x '0))) (set! bxda6@set-module-interface-first-mark! (lambda (bx1eab@x bx1eac@val) (simple-struct-set! bx1eab@x '0 bx1eac@val))) (set! bxda8@module-interface-exp-id-vec (lambda (bx1eaf@x) (simple-struct-ref bx1eaf@x '1))) (set! bxdaa@set-module-interface-exp-id-vec! (lambda (bx1eb1@x bx1eb2@val) (simple-struct-set! bx1eb1@x '1 bx1eb2@val))) (set! bxdac@module-interface-exp-lab-vec (lambda (bx1eb5@x) (simple-struct-ref bx1eb5@x '2))) (set! bxdae@set-module-interface-exp-lab-vec! (lambda (bx1eb7@x bx1eb8@val) (simple-struct-set! bx1eb7@x '2 bx1eb8@val))) (set! bxdb0@dummy '3) (set! bxdb2@module-interface-exp-id* (lambda (bx1ebb@iface bx1ebc@id) ((lambda (bx1ec0@diff-marks) (begin (set! bx1ec0@diff-marks (lambda (bx1ec7@ls bx1ec8@x) (begin (if (null? bx1ec7@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (bx1ecb@a) (if (eq? bx1ecb@a bx1ec8@x) '() (cons bx1ecb@a (bx1ec0@diff-marks (cdr bx1ec7@ls) bx1ec8@x)))) (car bx1ec7@ls))))) ((lambda (bx1ec1@diff bx1ec2@id-vec) (if (null? bx1ec1@diff) bx1ec2@id-vec (vector-map (lambda (bx1ec5@x) (make-simple-struct 'stx '5 (list (bxb27@stx-expr bx1ec5@x) (append bx1ec1@diff (bxb2b@stx-mark* bx1ec5@x)) '() '()))) bx1ec2@id-vec))) (bx1ec0@diff-marks (bxb2b@stx-mark* bx1ebc@id) (bxda4@module-interface-first-mark bx1ebb@iface)) (bxda8@module-interface-exp-id-vec bx1ebb@iface)))) '#f))) (set! bxdb4@chi-internal-module (lambda (bx1ecd@e bx1ece@r bx1ecf@mr bx1ed0@lex* bx1ed1@rhs* bx1ed2@mod** bx1ed3@kwd*) (call-with-values (lambda () (bxd98@parse-module bx1ecd@e)) (lambda (bx1ee1@bx1edc bx1ee2@bx1ede bx1ee3@bx1ee0) ((lambda (bx1ee7@e* bx1ee8@exp-id* bx1ee9@name) ((lambda (bx1eed@rib) ((lambda (bx1eef@e*) ((lambda () (call-with-values (lambda () (bxdb6@chi-body* bx1eef@e* bx1ece@r bx1ecf@mr bx1ed0@lex* bx1ed1@rhs* bx1ed2@mod** bx1ed3@kwd* '() bx1eed@rib '#f)) (lambda (bx1f01@bx1ef2 bx1f02@bx1ef4 bx1f03@bx1ef6 bx1f04@bx1ef8 bx1f05@bx1efa bx1f06@bx1efc bx1f07@bx1efe bx1f08@bx1f00) ((lambda (bx1f11@_exp* bx1f12@kwd* bx1f13@mod** bx1f14@rhs* bx1f15@lex* bx1f16@mr bx1f17@r bx1f18@e*) ((lambda (bx1f21@exp-lab* bx1f22@mod**) (if (not bx1ee9@name) (values bx1f15@lex* bx1f14@rhs* bx1ee8@exp-id* bx1f21@exp-lab* bx1f17@r bx1f16@mr bx1f22@mod** bx1f12@kwd*) ((lambda (bx1f25@lab bx1f26@iface) (values bx1f15@lex* bx1f14@rhs* (vector bx1ee9@name) (vector bx1f25@lab) (cons (cons bx1f25@lab (cons '$module bx1f26@iface)) bx1f17@r) (cons (cons bx1f25@lab (cons '$module bx1f26@iface)) bx1f16@mr) bx1f22@mod** bx1f12@kwd*)) (bxae5@gen-label 'module) (make-simple-struct 'module-interface '4 (list (car (bxb2b@stx-mark* bx1ee9@name)) (vector-map (lambda (bx1f29@x) (make-simple-struct 'stx '5 (list (bxb27@stx-expr bx1f29@x) (bxb2b@stx-mark* bx1f29@x) '() '()))) bx1ee8@exp-id*) bx1f21@exp-lab*))))) (vector-map (lambda (bx1f2b@x) (or (bxb6f@id->label (make-simple-struct 'stx '5 (list (bxb5b@id->sym bx1f2b@x) (bxb2b@stx-mark* bx1f2b@x) (list bx1eed@rib) '()))) (bxe3e@syntax-violation '#f '"cannot find module export" bx1f2b@x))) bx1ee8@exp-id*) (cons bx1f18@e* bx1f13@mod**))) bx1f08@bx1f00 bx1f07@bx1efe bx1f06@bx1efc bx1f05@bx1efa bx1f04@bx1ef8 bx1f03@bx1ef6 bx1f02@bx1ef4 bx1f01@bx1ef2)))))) (map (lambda (bx1f2d@x) (bxb45@add-subst bx1eed@rib bx1f2d@x)) (bxb57@syntax->list bx1ee7@e*)))) (bxb0d@make-empty-rib))) bx1ee3@bx1ee0 bx1ee2@bx1ede bx1ee1@bx1edc))))) (set! bxdb6@chi-body* (lambda (bx1f2f@e* bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f35@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?) (if (null? bx1f2f@e*) (values bx1f2f@e* bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f35@kwd* bx1f36@exp*) ((lambda (bx1f43@e) (call-with-values (lambda () (bxb7b@syntax-type bx1f43@e bx1f30@r)) (lambda (bx1f4b@bx1f46 bx1f4c@bx1f48 bx1f4d@bx1f4a) ((lambda (bx1f51@kwd bx1f52@value bx1f53@type) ((lambda (bx1f57@kwd*) ((lambda (bx1f59@t) (if (memv bx1f59@t '(define)) (call-with-values (lambda () (bxce2@parse-define bx1f43@e)) (lambda (bx1f5f@bx1f5c bx1f60@bx1f5e) ((lambda (bx1f63@rhs bx1f64@id) (begin (if (bxb65@bound-id-member? bx1f64@id bx1f57@kwd*) (bxe3e@syntax-violation '#f '"cannot redefine keyword" bx1f43@e) (void)) (call-with-values (lambda () (bxae9@gen-define-label+loc bx1f64@id bx1f37@rib)) (lambda (bx1f6b@bx1f68 bx1f6c@bx1f6a) ((lambda (bx1f6f@lex bx1f70@lab) (begin (bxb0f@extend-rib! bx1f37@rib bx1f64@id bx1f70@lab) (bxdb6@chi-body* (cdr bx1f2f@e*) (bxcf0@add-lexical bx1f70@lab bx1f6f@lex bx1f30@r) bx1f31@mr (cons bx1f6f@lex bx1f32@lex*) (cons bx1f63@rhs bx1f33@rhs*) bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?))) bx1f6c@bx1f6a bx1f6b@bx1f68))))) bx1f60@bx1f5e bx1f5f@bx1f5c))) (if (memv bx1f59@t '(define-syntax)) (call-with-values (lambda () (bxce4@parse-define-syntax bx1f43@e)) (lambda (bx1f77@bx1f74 bx1f78@bx1f76) ((lambda (bx1f7b@rhs bx1f7c@id) (begin (if (bxb65@bound-id-member? bx1f7c@id bx1f57@kwd*) (bxe3e@syntax-violation '#f '"cannot redefine keyword" bx1f43@e) (void)) ((lambda (bx1f7f@lab bx1f80@expanded-rhs) (begin (bxb0f@extend-rib! bx1f37@rib bx1f7c@id bx1f7f@lab) ((lambda (bx1f83@b) (bxdb6@chi-body* (cdr bx1f2f@e*) (cons (cons bx1f7f@lab bx1f83@b) bx1f30@r) (cons (cons bx1f7f@lab bx1f83@b) bx1f31@mr) bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?)) (bxb91@make-eval-transformer bx1f80@expanded-rhs)))) (bxaeb@gen-define-label bx1f7c@id bx1f37@rib) (bxdb8@expand-transformer bx1f7b@rhs bx1f31@mr)))) bx1f78@bx1f76 bx1f77@bx1f74))) (if (memv bx1f59@t '(let-syntax letrec-syntax)) ((lambda (bx1f85@t) ((lambda (bx1f87@ls/false) (if (and bx1f87@ls/false (apply (lambda (bx1f89@xlhs* bx1f8a@xrhs* bx1f8b@xbody*) (if (not (bxb61@valid-bound-ids? bx1f89@xlhs*)) (bxe3e@syntax-violation '#f '"invalid identifiers" bx1f43@e) (void))) bx1f87@ls/false)) (apply (lambda (bx1f8f@xlhs* bx1f90@xrhs* bx1f91@xbody*) ((lambda (bx1f95@xlab*) ((lambda (bx1f97@xrib) ((lambda (bx1f99@xb*) ((lambda () (bxdb6@chi-body* (append (map (lambda (bx1f9b@x) (bxb45@add-subst bx1f97@xrib bx1f9b@x)) bx1f91@xbody*) (cdr bx1f2f@e*)) (append (map cons bx1f95@xlab* bx1f99@xb*) bx1f30@r) (append (map cons bx1f95@xlab* bx1f99@xb*) bx1f31@mr) bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?)))) (map (lambda (bx1f9d@x) (bxb91@make-eval-transformer (bxdb8@expand-transformer (if (eq? bx1f53@type 'let-syntax) bx1f9d@x (bxb45@add-subst bx1f97@xrib bx1f9d@x)) bx1f31@mr))) bx1f90@xrhs*))) (bxb19@make-full-rib bx1f8f@xlhs* bx1f95@xlab*))) (map bxae5@gen-label bx1f8f@xlhs*))) bx1f87@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1f85@t))) (bxd5e@syntax-dispatch bx1f85@t '(_ #(each (any any)) . each-any)))) bx1f43@e) (if (memv bx1f59@t '(begin)) ((lambda (bx1f9f@t) ((lambda (bx1fa1@ls/false) (if bx1fa1@ls/false (apply (lambda (bx1fa3@x*) (bxdb6@chi-body* (append bx1fa3@x* (cdr bx1f2f@e*)) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?)) bx1fa1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1f9f@t))) (bxd5e@syntax-dispatch bx1f9f@t '(_ . each-any)))) bx1f43@e) (if (memv bx1f59@t '(global-macro global-macro!)) (bxdb6@chi-body* (cons (bxb45@add-subst bx1f37@rib (bxd7a@chi-global-macro bx1f52@value bx1f43@e)) (cdr bx1f2f@e*)) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?) (if (memv bx1f59@t '(local-macro local-macro!)) (bxdb6@chi-body* (cons (bxb45@add-subst bx1f37@rib (bxd78@chi-local-macro bx1f52@value bx1f43@e)) (cdr bx1f2f@e*)) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?) (if (memv bx1f59@t '(macro macro!)) (bxdb6@chi-body* (cons (bxb45@add-subst bx1f37@rib (bxd76@chi-macro bx1f52@value bx1f43@e)) (cdr bx1f2f@e*)) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?) (if (memv bx1f59@t '(module)) (call-with-values (lambda () (bxdb4@chi-internal-module bx1f43@e bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd*)) (lambda (bx1fb5@bx1fa6 bx1fb6@bx1fa8 bx1fb7@bx1faa bx1fb8@bx1fac bx1fb9@bx1fae bx1fba@bx1fb0 bx1fbb@bx1fb2 bx1fbc@bx1fb4) ((lambda (bx1fc5@kwd* bx1fc6@mod** bx1fc7@mr bx1fc8@r bx1fc9@m-exp-lab* bx1fca@m-exp-id* bx1fcb@rhs* bx1fcc@lex*) (begin (vector-for-each (lambda (bx1fd5@id bx1fd6@lab) (bxb0f@extend-rib! bx1f37@rib bx1fd5@id bx1fd6@lab)) bx1fca@m-exp-id* bx1fc9@m-exp-lab*) (bxdb6@chi-body* (cdr bx1f2f@e*) bx1fc8@r bx1fc7@mr bx1fcc@lex* bx1fcb@rhs* bx1fc6@mod** bx1fc5@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?))) bx1fbc@bx1fb4 bx1fbb@bx1fb2 bx1fba@bx1fb0 bx1fb9@bx1fae bx1fb8@bx1fac bx1fb7@bx1faa bx1fb6@bx1fa8 bx1fb5@bx1fa6))) (if (memv bx1f59@t '(library)) (begin (bxe20@library-expander (bxb6d@stx->datum bx1f43@e)) (bxdb6@chi-body* (cdr bx1f2f@e*) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?)) (if (memv bx1f59@t '(export)) ((lambda (bx1fd9@t) ((lambda (bx1fdb@ls/false) (if bx1fdb@ls/false (apply (lambda (bx1fdd@exp-decl*) (bxdb6@chi-body* (cdr bx1f2f@e*) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* (append bx1fdd@exp-decl* bx1f36@exp*) bx1f37@rib bx1f38@top?)) bx1fdb@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx1fd9@t))) (bxd5e@syntax-dispatch bx1fd9@t '(_ . each-any)))) bx1f43@e) (if (memv bx1f59@t '(import)) ((lambda () ((lambda (bx1fe0@module-import? bx1fe2@module-import bx1fe4@library-import) (begin (set! bx1fe0@module-import? (lambda (bx2033@e) ((lambda (bx2035@t) ((lambda (bx2037@ls/false) (if (and bx2037@ls/false (apply (lambda (bx2039@id) (bxb59@id? bx2039@id)) bx2037@ls/false)) (apply (lambda (bx203b@id) '#t) bx2037@ls/false) ((lambda (bx203d@t) ((lambda (bx203f@ls/false) (if bx203f@ls/false (apply (lambda (bx2041@imp*) '#f) bx203f@ls/false) ((lambda (bx2043@t) ((lambda (bx2045@ls/false) (if bx2045@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"malformed import form" bx2033@e)) bx2045@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx2043@t))) (bxd5e@syntax-dispatch bx2043@t '_))) bx203d@t))) (bxd5e@syntax-dispatch bx203d@t '(_ . each-any)))) bx2035@t))) (bxd5e@syntax-dispatch bx2035@t '(_ any)))) bx2033@e))) (set! bx1fe2@module-import (lambda (bx2011@e bx2012@r) ((lambda (bx2015@t) ((lambda (bx2017@ls/false) (if (and bx2017@ls/false (apply (lambda (bx2019@id) (bxb59@id? bx2019@id)) bx2017@ls/false)) (apply (lambda (bx201b@id) (call-with-values (lambda () (bxb7b@syntax-type bx201b@id bx2012@r)) (lambda (bx2023@bx201e bx2024@bx2020 bx2025@bx2022) ((lambda (bx2029@kwd bx202a@value bx202b@type) ((lambda (bx202f@t) (if (memv bx202f@t '($module)) ((lambda (bx2031@iface) (values (bxdb2@module-interface-exp-id* bx2031@iface bx201b@id) (bxdac@module-interface-exp-lab-vec bx2031@iface))) bx202a@value) (bxe3e@syntax-violation '#f '"invalid import" bx2011@e))) bx202b@type)) bx2025@bx2022 bx2024@bx2020 bx2023@bx201e)))) bx2017@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx2015@t))) (bxd5e@syntax-dispatch bx2015@t '(_ any)))) bx2011@e))) (set! bx1fe4@library-import (lambda (bx1ff5@e) ((lambda (bx1ff7@t) ((lambda (bx1ff9@ls/false) (if bx1ff9@ls/false (apply (lambda (bx1ffb@ctxt bx1ffc@imp*) (call-with-values (lambda () (bxdc0@parse-import-spec* (bxe44@syntax->datum bx1ffc@imp*))) (lambda (bx2003@bx2000 bx2004@bx2002) ((lambda (bx2007@subst-labels bx2008@subst-names) (values (vector-map (lambda (bx200b@name) (bxb39@datum->stx bx1ffb@ctxt bx200b@name)) bx2008@subst-names) bx2007@subst-labels)) bx2004@bx2002 bx2003@bx2000)))) bx1ff9@ls/false) ((lambda (bx200d@t) ((lambda (bx200f@ls/false) (if bx200f@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid import form" bx1ff5@e)) bx200f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx200d@t))) (bxd5e@syntax-dispatch bx200d@t '_))) bx1ff7@t))) (bxd5e@syntax-dispatch bx1ff7@t '(any . each-any)))) bx1ff5@e))) (begin (call-with-values (lambda () (if (bx1fe0@module-import? bx1f43@e) (bx1fe2@module-import bx1f43@e bx1f30@r) (bx1fe4@library-import bx1f43@e))) (lambda (bx1fe9@bx1fe6 bx1fea@bx1fe8) ((lambda (bx1fed@lab* bx1fee@id*) (vector-for-each (lambda (bx1ff1@id bx1ff2@lab) (bxb0f@extend-rib! bx1f37@rib bx1ff1@id bx1ff2@lab)) bx1fee@id* bx1fed@lab*)) bx1fea@bx1fe8 bx1fe9@bx1fe6))) (bxdb6@chi-body* (cdr bx1f2f@e*) bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?)))) '#f '#f '#f))) (if bx1f38@top? (bxdb6@chi-body* (cdr bx1f2f@e*) bx1f30@r bx1f31@mr (cons (bxae1@gen-lexical 'dummy) bx1f32@lex*) (cons (cons 'top-expr bx1f43@e) bx1f33@rhs*) bx1f34@mod** bx1f57@kwd* bx1f36@exp* bx1f37@rib bx1f38@top?) (values bx1f2f@e* bx1f30@r bx1f31@mr bx1f32@lex* bx1f33@rhs* bx1f34@mod** bx1f57@kwd* bx1f36@exp*)))))))))))))) bx1f53@type)) (if (bxb59@id? bx1f51@kwd) (cons bx1f51@kwd bx1f35@kwd*) bx1f35@kwd*))) bx1f4d@bx1f4a bx1f4c@bx1f48 bx1f4b@bx1f46)))) (car bx1f2f@e*))))) (set! bxdb8@expand-transformer (lambda (bx2047@expr bx2048@r) ((lambda (bx204b@rtc) ((lambda (bx204d@expanded-rhs) (begin (for-each ((lambda (bx204f@mark-visit) (lambda (bx2051@x) (begin (bx984@bx7d2@invoke-library bx2051@x) (bx204f@mark-visit bx2051@x)))) (bxdc8@vis-collector)) (bx204b@rtc)) bx204d@expanded-rhs)) ((lambda (bx205b@bx2054 bx205c@bx2056 bx205d@bx2058 bx205e@bx205a) ((lambda (bx2063@swap) (dynamic-wind bx2063@swap (lambda () (bxd80@chi-expr bx2047@expr bx2048@r bx2048@r)) bx2063@swap)) (lambda () (begin ((lambda (bx2065@t) (begin (bx205b@bx2054 bx205d@bx2058) (set! bx205d@bx2058 bx2065@t))) (bx205b@bx2054)) ((lambda (bx2067@t) (begin (bx205c@bx2056 bx205e@bx205a) (set! bx205e@bx205a bx2067@t))) (bx205c@bx2056)))))) bxdc6@inv-collector bxdc8@vis-collector bx204b@rtc (lambda (bx2069@x) (values))))) (bxdc4@make-collector)))) (set! bxdba@parse-exports (lambda (bx206b@exp*) ((letrec ((bx206d@f (lambda (bx206f@exp* bx2070@int* bx2071@ext*) (if (null? bx206f@exp*) (begin (if (not (bxb61@valid-bound-ids? bx2071@ext*)) (bxe3e@syntax-violation 'export '"invalid exports" (bxd94@find-dups bx2071@ext*)) (void)) (values (map bxe44@syntax->datum bx2071@ext*) bx2070@int*)) ((lambda (bx2075@t) ((lambda (bx2077@ls/false) (if bx2077@ls/false (apply (lambda (bx2079@rename bx207a@i* bx207b@e*) (begin (if (not (and (eq? (bxe44@syntax->datum bx2079@rename) 'rename) (for-all bxb59@id? bx207a@i*) (for-all bxb59@id? bx207b@e*))) (bxe3e@syntax-violation 'export '"invalid export specifier" (car bx206f@exp*)) (void)) (bx206d@f (cdr bx206f@exp*) (append bx207a@i* bx2070@int*) (append bx207b@e* bx2071@ext*)))) bx2077@ls/false) ((lambda (bx207f@t) ((lambda (bx2081@ls/false) (if bx2081@ls/false (apply (lambda (bx2083@ie) (begin (if (not (bxb59@id? bx2083@ie)) (bxe3e@syntax-violation 'export '"invalid export" bx2083@ie) (void)) (bx206d@f (cdr bx206f@exp*) (cons bx2083@ie bx2070@int*) (cons bx2083@ie bx2071@ext*)))) bx2081@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx207f@t))) (bxd5e@syntax-dispatch bx207f@t 'any))) bx2075@t))) (bxd5e@syntax-dispatch bx2075@t '(any . #(each (any any)))))) (car bx206f@exp*)))))) bx206d@f) bx206b@exp* '() '()))) (set! bxdbc@parse-library-name (lambda (bx2085@spec) ((lambda (bx2088@parse) (begin (set! bx2088@parse (lambda (bx2095@x) ((lambda (bx2097@t) ((lambda (bx2099@ls/false) (if (and bx2099@ls/false (apply (lambda (bx209b@v*) (for-all (lambda (bx209d@x) ((lambda (bx209f@x) (and (integer? bx209f@x) (exact? bx209f@x))) (bxe44@syntax->datum bx209d@x))) bx209b@v*)) bx2099@ls/false)) (apply (lambda (bx20a1@v*) (values '() (map bxe44@syntax->datum bx20a1@v*))) bx2099@ls/false) ((lambda (bx20a3@t) ((lambda (bx20a5@ls/false) (if (and bx20a5@ls/false (apply (lambda (bx20a7@x bx20a8@rest) (symbol? (bxe44@syntax->datum bx20a7@x))) bx20a5@ls/false)) (apply (lambda (bx20ab@x bx20ac@rest) (call-with-values (lambda () (bx2088@parse bx20ac@rest)) (lambda (bx20b3@bx20b0 bx20b4@bx20b2) ((lambda (bx20b7@v* bx20b8@x*) (values (cons (bxe44@syntax->datum bx20ab@x) bx20b8@x*) bx20b7@v*)) bx20b4@bx20b2 bx20b3@bx20b0)))) bx20a5@ls/false) ((lambda (bx20bb@t) ((lambda (bx20bd@ls/false) (if bx20bd@ls/false (apply (lambda () (values '() '())) bx20bd@ls/false) ((lambda (bx20bf@t) ((lambda (bx20c1@ls/false) (if bx20c1@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid library name" bx2085@spec)) bx20c1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx20bf@t))) (bxd5e@syntax-dispatch bx20bf@t '_))) bx20bb@t))) (bxd5e@syntax-dispatch bx20bb@t '()))) bx20a3@t))) (bxd5e@syntax-dispatch bx20a3@t '(any . any)))) bx2097@t))) (bxd5e@syntax-dispatch bx2097@t '(each-any)))) bx2095@x))) (call-with-values (lambda () (bx2088@parse bx2085@spec)) (lambda (bx208d@bx208a bx208e@bx208c) ((lambda (bx2091@ver* bx2092@name*) (begin (if (null? bx2092@name*) (bxe3e@syntax-violation '#f '"empty library name" bx2085@spec) (void)) (values bx2092@name* bx2091@ver*))) bx208e@bx208c bx208d@bx208a))))) '#f))) (set! bxdbe@parse-library (lambda (bx20c3@e) ((lambda (bx20c5@t) ((lambda (bx20c7@ls/false) (if (and bx20c7@ls/false (apply (lambda (bx20c9@library bx20ca@name* bx20cb@export bx20cc@exp* bx20cd@import bx20ce@imp* bx20cf@b*) (and (eq? (bxe44@syntax->datum bx20cb@export) 'export) (eq? (bxe44@syntax->datum bx20cd@import) 'import) (eq? (bxe44@syntax->datum bx20c9@library) 'library))) bx20c7@ls/false)) (apply (lambda (bx20d7@library bx20d8@name* bx20d9@export bx20da@exp* bx20db@import bx20dc@imp* bx20dd@b*) (values bx20d8@name* bx20da@exp* bx20dc@imp* bx20dd@b*)) bx20c7@ls/false) ((lambda (bx20e5@t) ((lambda (bx20e7@ls/false) (if bx20e7@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"malformed library" bx20c3@e)) bx20e7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx20e5@t))) (bxd5e@syntax-dispatch bx20e5@t '_))) bx20c5@t))) (bxd5e@syntax-dispatch bx20c5@t '(any each-any (any . each-any) (any . each-any) . each-any)))) bx20c3@e))) (set! bxdc0@parse-import-spec* ((lambda () ((lambda (bx20ea@idsyn? bx20ec@dup-error bx20ee@merge-substs bx20f0@exclude* bx20f2@find* bx20f4@rem* bx20f6@remove-dups bx20f8@parse-library-name bx20fa@import-library bx20fc@get-import bx20fe@add-imports!) (begin (set! bx20ea@idsyn? (lambda (bx22f3@x) (symbol? (bxe44@syntax->datum bx22f3@x)))) (set! bx20ec@dup-error (lambda (bx22f1@name) (bxe3e@syntax-violation 'import '"two imports with different bindings" bx22f1@name))) (set! bx20ee@merge-substs (lambda (bx22df@s bx22e0@subst) ((lambda (bx22e4@insert-to-subst) (begin (set! bx22e4@insert-to-subst (lambda (bx22e5@a bx22e6@subst) ((lambda (bx22e9@name bx22ea@label) ((lambda (bx22ed@t) (if bx22ed@t ((lambda (bx22ef@x) (if (eq? (cdr bx22ef@x) bx22ea@label) bx22e6@subst (bx20ec@dup-error bx22e9@name))) bx22ed@t) (cons bx22e5@a bx22e6@subst))) (assq bx22e9@name bx22e6@subst))) (car bx22e5@a) (cdr bx22e5@a)))) (if (null? bx22df@s) bx22e0@subst (bx22e4@insert-to-subst (car bx22df@s) (bx20ee@merge-substs (cdr bx22df@s) bx22e0@subst))))) '#f))) (set! bx20f0@exclude* (lambda (bx22af@sym* bx22b0@subst) ((lambda (bx22b4@exclude) (begin (set! bx22b4@exclude (lambda (bx22cd@sym bx22ce@subst) (if (null? bx22ce@subst) (bxe3e@syntax-violation 'import '"cannot rename unbound identifier" bx22cd@sym) (if (eq? bx22cd@sym (caar bx22ce@subst)) (values (cdar bx22ce@subst) (cdr bx22ce@subst)) ((lambda (bx22d1@a) (call-with-values (lambda () (bx22b4@exclude bx22cd@sym (cdr bx22ce@subst))) (lambda (bx22d7@bx22d4 bx22d8@bx22d6) ((lambda (bx22db@subst bx22dc@old) (values bx22dc@old (cons bx22d1@a bx22db@subst))) bx22d8@bx22d6 bx22d7@bx22d4)))) (car bx22ce@subst)))))) (if (null? bx22af@sym*) (values '() bx22b0@subst) (call-with-values (lambda () (bx22b4@exclude (car bx22af@sym*) bx22b0@subst)) (lambda (bx22b9@bx22b6 bx22ba@bx22b8) ((lambda (bx22bd@subst bx22be@old) (call-with-values (lambda () (bx20f0@exclude* (cdr bx22af@sym*) bx22bd@subst)) (lambda (bx22c5@bx22c2 bx22c6@bx22c4) ((lambda (bx22c9@subst bx22ca@old*) (values (cons bx22be@old bx22ca@old*) bx22c9@subst)) bx22c6@bx22c4 bx22c5@bx22c2)))) bx22ba@bx22b8 bx22b9@bx22b6)))))) '#f))) (set! bx20f2@find* (lambda (bx22a7@sym* bx22a8@subst) (map (lambda (bx22ab@x) ((lambda (bx22ad@t) (if bx22ad@t (cdr bx22ad@t) (bxe3e@syntax-violation 'import '"cannot find identifier" bx22ab@x))) (assq bx22ab@x bx22a8@subst))) bx22a7@sym*))) (set! bx20f4@rem* (lambda (bx229f@sym* bx22a0@subst) ((letrec ((bx22a3@f (lambda (bx22a5@subst) (if (null? bx22a5@subst) '() (if (memq (caar bx22a5@subst) bx229f@sym*) (bx22a3@f (cdr bx22a5@subst)) (cons (car bx22a5@subst) (bx22a3@f (cdr bx22a5@subst)))))))) bx22a3@f) bx22a0@subst))) (set! bx20f6@remove-dups (lambda (bx229d@ls) (if (null? bx229d@ls) '() (if (memq (car bx229d@ls) (cdr bx229d@ls)) (bx20f6@remove-dups (cdr bx229d@ls)) (cons (car bx229d@ls) (bx20f6@remove-dups (cdr bx229d@ls))))))) (set! bx20f8@parse-library-name (lambda (bx21b5@spec) ((lambda (bx21b8@subversion? bx21ba@subversion-pred bx21bc@version-pred) (begin (set! bx21b8@subversion? (lambda (bx2299@x) ((lambda (bx229b@x) (and (integer? bx229b@x) (exact? bx229b@x) (>= bx229b@x '0))) (bxe44@syntax->datum bx2299@x)))) (set! bx21ba@subversion-pred (lambda (bx2239@x*) ((lambda (bx223b@t) ((lambda (bx223d@ls/false) (if (and bx223d@ls/false (apply (lambda (bx223f@n) (bx21b8@subversion? bx223f@n)) bx223d@ls/false)) (apply (lambda (bx2241@n) (lambda (bx2243@x) (= bx2243@x (bxe44@syntax->datum bx2241@n)))) bx223d@ls/false) ((lambda (bx2245@t) ((lambda (bx2247@ls/false) (if (and bx2247@ls/false (apply (lambda (bx2249@p? bx224a@sub*) (eq? (bxe44@syntax->datum bx2249@p?) 'and)) bx2247@ls/false)) (apply (lambda (bx224d@p? bx224e@sub*) ((lambda (bx2251@p*) (lambda (bx2253@x) (for-all (lambda (bx2255@p) (bx2255@p bx2253@x)) bx2251@p*))) (map bx21ba@subversion-pred bx224e@sub*))) bx2247@ls/false) ((lambda (bx2257@t) ((lambda (bx2259@ls/false) (if (and bx2259@ls/false (apply (lambda (bx225b@p? bx225c@sub*) (eq? (bxe44@syntax->datum bx225b@p?) 'or)) bx2259@ls/false)) (apply (lambda (bx225f@p? bx2260@sub*) ((lambda (bx2263@p*) (lambda (bx2265@x) (exists (lambda (bx2267@p) (bx2267@p bx2265@x)) bx2263@p*))) (map bx21ba@subversion-pred bx2260@sub*))) bx2259@ls/false) ((lambda (bx2269@t) ((lambda (bx226b@ls/false) (if (and bx226b@ls/false (apply (lambda (bx226d@p? bx226e@sub) (eq? (bxe44@syntax->datum bx226d@p?) 'not)) bx226b@ls/false)) (apply (lambda (bx2271@p? bx2272@sub) ((lambda (bx2275@p) (lambda (bx2277@x) (not (bx2275@p bx2277@x)))) (bx21ba@subversion-pred bx2272@sub))) bx226b@ls/false) ((lambda (bx2279@t) ((lambda (bx227b@ls/false) (if (and bx227b@ls/false (apply (lambda (bx227d@p? bx227e@n) (and (eq? (bxe44@syntax->datum bx227d@p?) '<=) (bx21b8@subversion? bx227e@n))) bx227b@ls/false)) (apply (lambda (bx2281@p? bx2282@n) (lambda (bx2285@x) (<= bx2285@x (bxe44@syntax->datum bx2282@n)))) bx227b@ls/false) ((lambda (bx2287@t) ((lambda (bx2289@ls/false) (if (and bx2289@ls/false (apply (lambda (bx228b@p? bx228c@n) (and (eq? (bxe44@syntax->datum bx228b@p?) '>=) (bx21b8@subversion? bx228c@n))) bx2289@ls/false)) (apply (lambda (bx228f@p? bx2290@n) (lambda (bx2293@x) (>= bx2293@x (bxe44@syntax->datum bx2290@n)))) bx2289@ls/false) ((lambda (bx2295@t) ((lambda (bx2297@ls/false) (if bx2297@ls/false (apply (lambda () (bxe3e@syntax-violation 'import '"invalid sub-version spec" bx21b5@spec bx2239@x*)) bx2297@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx2295@t))) (bxd5e@syntax-dispatch bx2295@t '_))) bx2287@t))) (bxd5e@syntax-dispatch bx2287@t '(any any)))) bx2279@t))) (bxd5e@syntax-dispatch bx2279@t '(any any)))) bx2269@t))) (bxd5e@syntax-dispatch bx2269@t '(any any)))) bx2257@t))) (bxd5e@syntax-dispatch bx2257@t '(any . each-any)))) bx2245@t))) (bxd5e@syntax-dispatch bx2245@t '(any . each-any)))) bx223b@t))) (bxd5e@syntax-dispatch bx223b@t 'any))) bx2239@x*))) (set! bx21bc@version-pred (lambda (bx21e9@x*) ((lambda (bx21eb@t) ((lambda (bx21ed@ls/false) (if bx21ed@ls/false (apply (lambda () (lambda (bx21ef@x) '#t)) bx21ed@ls/false) ((lambda (bx21f1@t) ((lambda (bx21f3@ls/false) (if (and bx21f3@ls/false (apply (lambda (bx21f5@c bx21f6@ver*) (eq? (bxe44@syntax->datum bx21f5@c) 'and)) bx21f3@ls/false)) (apply (lambda (bx21f9@c bx21fa@ver*) ((lambda (bx21fd@p*) (lambda (bx21ff@x) (for-all (lambda (bx2201@p) (bx2201@p bx21ff@x)) bx21fd@p*))) (map bx21bc@version-pred bx21fa@ver*))) bx21f3@ls/false) ((lambda (bx2203@t) ((lambda (bx2205@ls/false) (if (and bx2205@ls/false (apply (lambda (bx2207@c bx2208@ver*) (eq? (bxe44@syntax->datum bx2207@c) 'or)) bx2205@ls/false)) (apply (lambda (bx220b@c bx220c@ver*) ((lambda (bx220f@p*) (lambda (bx2211@x) (exists (lambda (bx2213@p) (bx2213@p bx2211@x)) bx220f@p*))) (map bx21bc@version-pred bx220c@ver*))) bx2205@ls/false) ((lambda (bx2215@t) ((lambda (bx2217@ls/false) (if (and bx2217@ls/false (apply (lambda (bx2219@c bx221a@ver) (eq? (bxe44@syntax->datum bx2219@c) 'not)) bx2217@ls/false)) (apply (lambda (bx221d@c bx221e@ver) ((lambda (bx2221@p) (lambda (bx2223@x) (not (bx2221@p bx2223@x)))) (bx21bc@version-pred bx221e@ver))) bx2217@ls/false) ((lambda (bx2225@t) ((lambda (bx2227@ls/false) (if bx2227@ls/false (apply (lambda (bx2229@sub*) ((lambda (bx222b@p*) (lambda (bx222d@x) ((letrec ((bx222f@f (lambda (bx2231@p* bx2232@x) (if (null? bx2231@p*) '#t (if (null? bx2232@x) '#f (and ((car bx2231@p*) (car bx2232@x)) (bx222f@f (cdr bx2231@p*) (cdr bx2232@x)))))))) bx222f@f) bx222b@p* bx222d@x))) (map bx21ba@subversion-pred bx2229@sub*))) bx2227@ls/false) ((lambda (bx2235@t) ((lambda (bx2237@ls/false) (if bx2237@ls/false (apply (lambda () (bxe3e@syntax-violation 'import '"invalid version spec" bx21b5@spec bx21e9@x*)) bx2237@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx2235@t))) (bxd5e@syntax-dispatch bx2235@t '_))) bx2225@t))) (bxd5e@syntax-dispatch bx2225@t 'each-any))) bx2215@t))) (bxd5e@syntax-dispatch bx2215@t '(any any)))) bx2203@t))) (bxd5e@syntax-dispatch bx2203@t '(any . each-any)))) bx21f1@t))) (bxd5e@syntax-dispatch bx21f1@t '(any . each-any)))) bx21eb@t))) (bxd5e@syntax-dispatch bx21eb@t '()))) bx21e9@x*))) ((letrec ((bx21bd@f (lambda (bx21bf@x) ((lambda (bx21c1@t) ((lambda (bx21c3@ls/false) (if bx21c3@ls/false (apply (lambda (bx21c5@version-spec*) (values '() (bx21bc@version-pred bx21c5@version-spec*))) bx21c3@ls/false) ((lambda (bx21c7@t) ((lambda (bx21c9@ls/false) (if (and bx21c9@ls/false (apply (lambda (bx21cb@x bx21cc@x*) (bx20ea@idsyn? bx21cb@x)) bx21c9@ls/false)) (apply (lambda (bx21cf@x bx21d0@x*) (call-with-values (lambda () (bx21bd@f bx21d0@x*)) (lambda (bx21d7@bx21d4 bx21d8@bx21d6) ((lambda (bx21db@pred bx21dc@name) (values (cons (bxe44@syntax->datum bx21cf@x) bx21dc@name) bx21db@pred)) bx21d8@bx21d6 bx21d7@bx21d4)))) bx21c9@ls/false) ((lambda (bx21df@t) ((lambda (bx21e1@ls/false) (if bx21e1@ls/false (apply (lambda () (values '() (lambda (bx21e3@x) '#t))) bx21e1@ls/false) ((lambda (bx21e5@t) ((lambda (bx21e7@ls/false) (if bx21e7@ls/false (apply (lambda () (bxe3e@syntax-violation '#f '"invalid import spec" bx21b5@spec)) bx21e7@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx21e5@t))) (bxd5e@syntax-dispatch bx21e5@t '_))) bx21df@t))) (bxd5e@syntax-dispatch bx21df@t '()))) bx21c7@t))) (bxd5e@syntax-dispatch bx21c7@t '(any . any)))) bx21c1@t))) (bxd5e@syntax-dispatch bx21c1@t '(each-any)))) bx21bf@x)))) bx21bd@f) bx21b5@spec))) '#f '#f '#f))) (set! bx20fa@import-library (lambda (bx21a5@spec*) (call-with-values (lambda () (bx20f8@parse-library-name bx21a5@spec*)) (lambda (bx21ab@bx21a8 bx21ac@bx21aa) ((lambda (bx21af@pred bx21b0@name) (begin (if (null? bx21b0@name) (bxe3e@syntax-violation 'import '"empty library name" bx21a5@spec*) (void)) ((lambda (bx21b3@lib) (begin (if (not bx21b3@lib) (bxe3e@syntax-violation 'import '"cannot find library with required name" bx21b0@name) (void)) (if (not (bx21af@pred (bx957@bx778@library-version bx21b3@lib))) (bxe3e@syntax-violation 'import '"library does not satisfy version specification" bx21a5@spec* bx21b3@lib) (void)) ((bxdca@imp-collector) bx21b3@lib) (bx95f@bx788@library-subst bx21b3@lib))) (bx97d@bx7c4@find-library-by-name bx21b0@name)))) bx21ac@bx21aa bx21ab@bx21a8))))) (set! bx20fc@get-import (lambda (bx2117@spec) ((lambda (bx2119@t) ((lambda (bx211b@ls/false) (if (and bx211b@ls/false (apply (lambda (bx211d@x bx211e@x*) (not (memq (bxe44@syntax->datum bx211d@x) '(for rename except only prefix library)))) bx211b@ls/false)) (apply (lambda (bx2121@x bx2122@x*) (bx20fa@import-library (cons bx2121@x bx2122@x*))) bx211b@ls/false) ((lambda (bx2125@t) ((lambda (bx2127@ls/false) (if (and bx2127@ls/false (apply (lambda (bx2129@rename bx212a@isp bx212b@old* bx212c@new*) (and (eq? (bxe44@syntax->datum bx2129@rename) 'rename) (for-all bx20ea@idsyn? bx212b@old*) (for-all bx20ea@idsyn? bx212c@new*))) bx2127@ls/false)) (apply (lambda (bx2131@rename bx2132@isp bx2133@old* bx2134@new*) ((lambda (bx2139@subst bx213a@old* bx213b@new*) ((lambda (bx213f@old-label*) ((lambda (bx2141@subst) (bx20ee@merge-substs (map cons bx213b@new* bx213f@old-label*) bx2141@subst)) (bx20f4@rem* bx213a@old* bx2139@subst))) (bx20f2@find* bx213a@old* bx2139@subst))) (bx20fc@get-import bx2132@isp) (map bxe44@syntax->datum bx2133@old*) (map bxe44@syntax->datum bx2134@new*))) bx2127@ls/false) ((lambda (bx2143@t) ((lambda (bx2145@ls/false) (if (and bx2145@ls/false (apply (lambda (bx2147@except bx2148@isp bx2149@sym*) (and (eq? (bxe44@syntax->datum bx2147@except) 'except) (for-all bx20ea@idsyn? bx2149@sym*))) bx2145@ls/false)) (apply (lambda (bx214d@except bx214e@isp bx214f@sym*) ((lambda (bx2153@subst) (bx20f4@rem* (map bxe44@syntax->datum bx214f@sym*) bx2153@subst)) (bx20fc@get-import bx214e@isp))) bx2145@ls/false) ((lambda (bx2155@t) ((lambda (bx2157@ls/false) (if (and bx2157@ls/false (apply (lambda (bx2159@only bx215a@isp bx215b@sym*) (and (eq? (bxe44@syntax->datum bx2159@only) 'only) (for-all bx20ea@idsyn? bx215b@sym*))) bx2157@ls/false)) (apply (lambda (bx215f@only bx2160@isp bx2161@sym*) ((lambda (bx2165@subst bx2166@sym*) ((lambda (bx2169@sym*) ((lambda (bx216b@lab*) (map cons bx2169@sym* bx216b@lab*)) (bx20f2@find* bx2169@sym* bx2165@subst))) (bx20f6@remove-dups bx2166@sym*))) (bx20fc@get-import bx2160@isp) (map bxe44@syntax->datum bx2161@sym*))) bx2157@ls/false) ((lambda (bx216d@t) ((lambda (bx216f@ls/false) (if (and bx216f@ls/false (apply (lambda (bx2171@prefix bx2172@isp bx2173@p) (and (eq? (bxe44@syntax->datum bx2171@prefix) 'prefix) (bx20ea@idsyn? bx2173@p))) bx216f@ls/false)) (apply (lambda (bx2177@prefix bx2178@isp bx2179@p) ((lambda (bx217d@subst bx217e@prefix) (map (lambda (bx2181@x) (cons (string->symbol (string-append bx217e@prefix (symbol->string (car bx2181@x)))) (cdr bx2181@x))) bx217d@subst)) (bx20fc@get-import bx2178@isp) (symbol->string (bxe44@syntax->datum bx2179@p)))) bx216f@ls/false) ((lambda (bx2183@t) ((lambda (bx2185@ls/false) (if (and bx2185@ls/false (apply (lambda (bx2187@library bx2188@spec*) (eq? (bxe44@syntax->datum bx2187@library) 'library)) bx2185@ls/false)) (apply (lambda (bx218b@library bx218c@spec*) (bx20fa@import-library bx218c@spec*)) bx2185@ls/false) ((lambda (bx218f@t) ((lambda (bx2191@ls/false) (if (and bx2191@ls/false (apply (lambda (bx2193@for bx2194@isp bx2195@rest) (eq? (bxe44@syntax->datum bx2193@for) 'for)) bx2191@ls/false)) (apply (lambda (bx2199@for bx219a@isp bx219b@rest) (bx20fc@get-import bx219a@isp)) bx2191@ls/false) ((lambda (bx219f@t) ((lambda (bx21a1@ls/false) (if bx21a1@ls/false (apply (lambda (bx21a3@spec) (bxe3e@syntax-violation 'import '"invalid import spec" bx21a3@spec)) bx21a1@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx219f@t))) (bxd5e@syntax-dispatch bx219f@t 'any))) bx218f@t))) (bxd5e@syntax-dispatch bx218f@t '(any any . any)))) bx2183@t))) (bxd5e@syntax-dispatch bx2183@t '(any each-any)))) bx216d@t))) (bxd5e@syntax-dispatch bx216d@t '(any any any)))) bx2155@t))) (bxd5e@syntax-dispatch bx2155@t '(any any . each-any)))) bx2143@t))) (bxd5e@syntax-dispatch bx2143@t '(any any . each-any)))) bx2125@t))) (bxd5e@syntax-dispatch bx2125@t '(any any . #(each (any any)))))) bx2119@t))) (bxd5e@syntax-dispatch bx2119@t '(any . each-any)))) bx2117@spec))) (set! bx20fe@add-imports! (lambda (bx2107@imp bx2108@h) ((lambda (bx210b@subst) (for-each (lambda (bx210d@x) ((lambda (bx210f@name bx2110@label) ((lambda (bx2113@t) (if bx2113@t ((lambda (bx2115@l) (if (not (eq? bx2115@l bx2110@label)) (bx20ec@dup-error bx210f@name) (void))) bx2113@t) (hashtable-set! bx2108@h bx210f@name bx2110@label))) (hashtable-ref bx2108@h bx210f@name '#f))) (car bx210d@x) (cdr bx210d@x))) bx210b@subst)) (bx20fc@get-import bx2107@imp)))) (lambda (bx20ff@imp*) ((letrec ((bx2101@f (lambda (bx2103@imp* bx2104@h) (if (null? bx2103@imp*) (hashtable-entries bx2104@h) (begin (bx20fe@add-imports! (car bx2103@imp*) bx2104@h) (bx2101@f (cdr bx2103@imp*) bx2104@h)))))) bx2101@f) bx20ff@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! bxdc2@make-top-rib (lambda (bx22f5@names bx22f6@labels) ((lambda (bx22f9@rib) (begin (vector-for-each (lambda (bx22fb@name bx22fc@label) (begin (if (not (symbol? bx22fb@name)) (error 'make-top-rib '"BUG: not a symbol" bx22fb@name) (void)) (bxb11@extend-rib/nc! bx22f9@rib (make-simple-struct 'stx '5 (list bx22fb@name bxadd@top-mark* '() '())) bx22fc@label))) bx22f5@names bx22f6@labels) bx22f9@rib)) (bxb0d@make-empty-rib)))) (set! bxdc4@make-collector (lambda () ((lambda (bx22ff@ls) (lambda bx2303 ((lambda (bx2304) (if (= bx2304 '0) (apply (lambda () bx22ff@ls) bx2303) (if (= bx2304 '1) (apply (lambda (bx2301@x) (set! bx22ff@ls (bxad6@set-cons bx2301@x bx22ff@ls))) bx2303) (error 'apply '"invalid arg count")))) (length bx2303)))) '()))) (set! bxdc6@inv-collector (bx6b8@bx597@make-parameter (lambda bx2305@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bx2307@x) (begin (if (not (procedure? bx2307@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bx2307@x) (void)) bx2307@x)))) (set! bxdc8@vis-collector (bx6b8@bx597@make-parameter (lambda bx2309@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bx230b@x) (begin (if (not (procedure? bx230b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bx230b@x) (void)) bx230b@x)))) (set! bxdca@imp-collector (bx6b8@bx597@make-parameter (lambda bx230d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bx230f@x) (begin (if (not (procedure? bx230f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bx230f@x) (void)) bx230f@x)))) (set! bxdcc@chi-library-internal (lambda (bx2311@e* bx2312@rib bx2313@top?) (call-with-values (lambda () (bxdb6@chi-body* bx2311@e* '() '() '() '() '() '() '() bx2312@rib bx2313@top?)) (lambda (bx2327@bx2318 bx2328@bx231a bx2329@bx231c bx232a@bx231e bx232b@bx2320 bx232c@bx2322 bx232d@bx2324 bx232e@bx2326) ((lambda (bx2337@exp* bx2338@_kwd* bx2339@mod** bx233a@rhs* bx233b@lex* bx233c@mr bx233d@r bx233e@e*) (values (append (apply append (reverse bx2339@mod**)) bx233e@e*) bx233d@r bx233c@mr (reverse bx233b@lex*) (reverse bx233a@rhs*) bx2337@exp*)) bx232e@bx2326 bx232d@bx2324 bx232c@bx2322 bx232b@bx2320 bx232a@bx231e bx2329@bx231c bx2328@bx231a bx2327@bx2318))))) (set! bxdce@chi-interaction-expr (lambda (bx2347@e bx2348@rib bx2349@r) (call-with-values (lambda () (bxdb6@chi-body* (list bx2347@e) bx2349@r bx2349@r '() '() '() '() '() bx2348@rib '#t)) (lambda (bx235d@bx234e bx235e@bx2350 bx235f@bx2352 bx2360@bx2354 bx2361@bx2356 bx2362@bx2358 bx2363@bx235a bx2364@bx235c) ((lambda (bx236d@_exp* bx236e@_kwd* bx236f@mod** bx2370@rhs* bx2371@lex* bx2372@mr bx2373@r bx2374@e*) ((lambda (bx237d@e*) ((lambda (bx237f@e) (values bx237f@e bx2373@r)) (if (null? bx237d@e*) (bxac1@bxa31@build-void) (if (null? (cdr bx237d@e*)) (car bx237d@e*) (bxac0@bxa2f@build-sequence '#f bx237d@e*))))) (bxd8e@expand-interaction-rhs*/init* (reverse bx2371@lex*) (reverse bx2370@rhs*) (append (apply append (reverse bx236f@mod**)) bx2374@e*) bx2373@r bx2372@mr))) bx2364@bx235c bx2363@bx235a bx2362@bx2358 bx2361@bx2356 bx2360@bx2354 bx235f@bx2352 bx235e@bx2350 bx235d@bx234e))))) (set! bxdd0@library-body-expander (lambda (bx2381@name bx2382@main-exp* bx2383@imp* bx2384@b* bx2385@top?) ((lambda (bx238c@itc) (begin (set! bx238c@itc (bxdc4@make-collector)) ((lambda (bx2395@bx238e bx2396@bx2390 bx2397@bx2392 bx2398@bx2394) ((lambda (bx239d@swap) (dynamic-wind bx239d@swap (lambda () (call-with-values (lambda () (bxdc0@parse-import-spec* bx2383@imp*)) (lambda (bx23a3@bx23a0 bx23a4@bx23a2) ((lambda (bx23a7@subst-labels bx23a8@subst-names) ((lambda (bx23ab@rib) ((lambda (bx23ae@wrap) (begin (set! bx23ae@wrap (lambda (bx2429@x) (make-simple-struct 'stx '5 (list bx2429@x bxadd@top-mark* (list bx23ab@rib) '())))) ((lambda (bx23af@b* bx23b0@main-exp* bx23b1@rtc bx23b2@vtc) ((lambda (bx23bf@bx23b8 bx23c0@bx23ba bx23c1@bx23bc bx23c2@bx23be) ((lambda (bx23c7@swap) (dynamic-wind bx23c7@swap (lambda () (call-with-values (lambda () (bxdcc@chi-library-internal bx23af@b* bx23ab@rib bx2385@top?)) (lambda (bx23d5@bx23ca bx23d6@bx23cc bx23d7@bx23ce bx23d8@bx23d0 bx23d9@bx23d2 bx23da@bx23d4) ((lambda (bx23e1@internal-exp* bx23e2@rhs* bx23e3@lex* bx23e4@mr bx23e5@r bx23e6@init*) (call-with-values (lambda () (bxdba@parse-exports (append bx23b0@main-exp* bx23e1@internal-exp*))) (lambda (bx23f1@bx23ee bx23f2@bx23f0) ((lambda (bx23f5@exp-id* bx23f6@exp-name*) (begin (bxb15@seal-rib! bx23ab@rib) ((lambda (bx23f9@init*) ((lambda (bx23fb@rhs*) ((lambda () (begin (bxb17@unseal-rib! bx23ab@rib) ((lambda (bx23fd@loc* bx23fe@export-subst) ((lambda (bx2402@errstr) (begin (set! bx2402@errstr '"attempt to export mutated variable") (call-with-values (lambda () (bxe2a@make-export-env/macros bx23e3@lex* bx23fd@loc* bx23e5@r)) (lambda (bx2409@bx2404 bx240a@bx2406 bx240b@bx2408) ((lambda (bx240f@macro* bx2410@global* bx2411@export-env) (begin (for-each (lambda (bx2415@s) ((lambda (bx2417@name bx2418@label) ((lambda (bx241b@p) (if bx241b@p ((lambda (bx241d@b) ((lambda (bx241f@type) (if (eq? bx241f@type 'mutable) (bxe3e@syntax-violation 'export bx2402@errstr bx2417@name) (void))) (car bx241d@b))) (cdr bx241b@p)) (void))) (assq bx2418@label bx2411@export-env))) (car bx2415@s) (cdr bx2415@s))) bx23fe@export-subst) ((lambda (bx2421@invoke-body bx2422@invoke-definitions) (values (bx238c@itc) (bx23b1@rtc) (bx23b2@vtc) (bxac0@bxa2f@build-sequence '#f (append bx2422@invoke-definitions (list bx2421@invoke-body))) bx240f@macro* bx23fe@export-subst bx2411@export-env)) (bxac3@bxa35@build-letrec* '#f bx23e3@lex* bx23fb@rhs* (bxe26@build-exports bx2410@global* bx23f9@init*)) (map bxabc@bx98c@build-global-define (map cdr bx2410@global*))))) bx240b@bx2408 bx240a@bx2406 bx2409@bx2404))))) '#f)) (map bxae3@gen-global bx23e3@lex*) (bxe28@make-export-subst bx23f6@exp-name* bx23f5@exp-id*)))))) (bxd90@chi-rhs* bx23e2@rhs* bx23e5@r bx23e4@mr))) (bxd7c@chi-expr* bx23e6@init* bx23e5@r bx23e4@mr)))) bx23f2@bx23f0 bx23f1@bx23ee)))) bx23da@bx23d4 bx23d9@bx23d2 bx23d8@bx23d0 bx23d7@bx23ce bx23d6@bx23cc bx23d5@bx23ca)))) bx23c7@swap)) (lambda () (begin ((lambda (bx2425@t) (begin (bx23bf@bx23b8 bx23c1@bx23bc) (set! bx23c1@bx23bc bx2425@t))) (bx23bf@bx23b8)) ((lambda (bx2427@t) (begin (bx23c0@bx23ba bx23c2@bx23be) (set! bx23c2@bx23be bx2427@t))) (bx23c0@bx23ba)))))) bxdc6@inv-collector bxdc8@vis-collector bx23b1@rtc bx23b2@vtc)) (map bx23ae@wrap bx2384@b*) (map bx23ae@wrap bx2382@main-exp*) (bxdc4@make-collector) (bxdc4@make-collector)))) '#f)) (bxdc2@make-top-rib bx23a8@subst-names bx23a7@subst-labels))) bx23a4@bx23a2 bx23a3@bx23a0)))) bx239d@swap)) (lambda () (begin ((lambda (bx242b@t) (begin (bx2395@bx238e bx2397@bx2392) (set! bx2397@bx2392 bx242b@t))) (bx2395@bx238e)) ((lambda (bx242d@t) (begin (bx2396@bx2390 bx2398@bx2394) (set! bx2398@bx2394 bx242d@t))) (bx2396@bx2390)))))) bxdca@imp-collector bxe4c@top-level-context bx238c@itc '#f))) '#f))) (set! bxdd2@core-library-expander (lambda (bx242f@e bx2430@verify-name) (call-with-values (lambda () (bxdbe@parse-library bx242f@e)) (lambda (bx243b@bx2434 bx243c@bx2436 bx243d@bx2438 bx243e@bx243a) ((lambda (bx2443@b* bx2444@imp* bx2445@exp* bx2446@name*) (call-with-values (lambda () (bxdbc@parse-library-name bx2446@name*)) (lambda (bx244f@bx244c bx2450@bx244e) ((lambda (bx2453@ver bx2454@name) (begin (bx2430@verify-name bx2454@name) (call-with-values (lambda () (bxdd0@library-body-expander bx2454@name bx2445@exp* bx2444@imp* bx2443@b* '#f)) (lambda (bx2465@bx2458 bx2466@bx245a bx2467@bx245c bx2468@bx245e bx2469@bx2460 bx246a@bx2462 bx246b@bx2464) ((lambda (bx2473@export-env bx2474@export-subst bx2475@visit-code bx2476@invoke-code bx2477@visit-req* bx2478@invoke-req* bx2479@imp*) (values bx2454@name bx2453@ver bx2479@imp* bx2478@invoke-req* bx2477@visit-req* bx2476@invoke-code bx2475@visit-code bx2474@export-subst bx2473@export-env)) bx246b@bx2464 bx246a@bx2462 bx2469@bx2460 bx2468@bx245e bx2467@bx245c bx2466@bx245a bx2465@bx2458))))) bx2450@bx244e bx244f@bx244c)))) bx243e@bx243a bx243d@bx2438 bx243c@bx2436 bx243b@bx2434))))) (set! bxdd4@parse-top-level-program (lambda (bx2481@e*) ((lambda (bx2483@t) ((lambda (bx2485@ls/false) (if (and bx2485@ls/false (apply (lambda (bx2487@import bx2488@imp* bx2489@b*) (eq? (bxe44@syntax->datum bx2487@import) 'import)) bx2485@ls/false)) (apply (lambda (bx248d@import bx248e@imp* bx248f@b*) (values bx248e@imp* bx248f@b*)) bx2485@ls/false) ((lambda (bx2493@t) ((lambda (bx2495@ls/false) (if (and bx2495@ls/false (apply (lambda (bx2497@import bx2498@x bx2499@y) (eq? (bxe44@syntax->datum bx2497@import) 'import)) bx2495@ls/false)) (apply (lambda (bx249d@import bx249e@x bx249f@y) (bxe3e@syntax-violation 'expander '"invalid syntax of top-level program" (bxb53@syntax-car bx2481@e*))) bx2495@ls/false) ((lambda (bx24a3@t) ((lambda (bx24a5@ls/false) (if bx24a5@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bx24a5@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx24a3@t))) (bxd5e@syntax-dispatch bx24a3@t '_))) bx2493@t))) (bxd5e@syntax-dispatch bx2493@t '((any . any) . any)))) bx2483@t))) (bxd5e@syntax-dispatch bx2483@t '((any . each-any) . each-any)))) bx2481@e*))) (set! bxdd6@top-level-expander (lambda (bx24a7@e*) (call-with-values (lambda () (bxdd4@parse-top-level-program bx24a7@e*)) (lambda (bx24ad@bx24aa bx24ae@bx24ac) ((lambda (bx24b1@b* bx24b2@imp*) (call-with-values (lambda () (bxdd0@library-body-expander '() '() bx24b2@imp* bx24b1@b* '#t)) (lambda (bx24c3@bx24b6 bx24c4@bx24b8 bx24c5@bx24ba bx24c6@bx24bc bx24c7@bx24be bx24c8@bx24c0 bx24c9@bx24c2) ((lambda (bx24d1@export-env bx24d2@export-subst bx24d3@visit-code bx24d4@invoke-code bx24d5@visit-req* bx24d6@invoke-req* bx24d7@imp*) (values bx24d6@invoke-req* bx24d4@invoke-code)) bx24c9@bx24c2 bx24c8@bx24c0 bx24c7@bx24be bx24c6@bx24bc bx24c5@bx24ba bx24c4@bx24b8 bx24c3@bx24b6)))) bx24ae@bx24ac bx24ad@bx24aa))))) (set! bxdd8@rp (bx6b5@bx591@make-record-printer 'env (lambda (bx24df@x bx24e0@p bx24e1@wr) (display '"#<environment>" bx24e0@p)))) (set! bxde2@env? (lambda (bx24e5@x) (and (simple-struct? bx24e5@x) (eq? (simple-struct-name bx24e5@x) 'env)))) (set! bxde4@env-names (lambda (bx24e7@x) (simple-struct-ref bx24e7@x '0))) (set! bxde6@set-env-names! (lambda (bx24e9@x bx24ea@val) (simple-struct-set! bx24e9@x '0 bx24ea@val))) (set! bxde8@env-labels (lambda (bx24ed@x) (simple-struct-ref bx24ed@x '1))) (set! bxdea@set-env-labels! (lambda (bx24ef@x bx24f0@val) (simple-struct-set! bx24ef@x '1 bx24f0@val))) (set! bxdec@env-itc (lambda (bx24f3@x) (simple-struct-ref bx24f3@x '2))) (set! bxdee@set-env-itc! (lambda (bx24f5@x bx24f6@val) (simple-struct-set! bx24f5@x '2 bx24f6@val))) (set! bxdf0@dummy '3) (set! bxdf2@rp (bx6b5@bx591@make-record-printer 'interaction-env (lambda (bx24f9@x bx24fa@p bx24fb@wr) (display '"#<environment>" bx24fa@p)))) (set! bxdfc@interaction-env? (lambda (bx24ff@x) (and (simple-struct? bx24ff@x) (eq? (simple-struct-name bx24ff@x) 'interaction-env)))) (set! bxdfe@interaction-env-rib (lambda (bx2501@x) (simple-struct-ref bx2501@x '0))) (set! bxe00@set-interaction-env-rib! (lambda (bx2503@x bx2504@val) (simple-struct-set! bx2503@x '0 bx2504@val))) (set! bxe02@interaction-env-r (lambda (bx2507@x) (simple-struct-ref bx2507@x '1))) (set! bxe04@set-interaction-env-r! (lambda (bx2509@x bx250a@val) (simple-struct-set! bx2509@x '1 bx250a@val))) (set! bxe06@interaction-env-locs (lambda (bx250d@x) (simple-struct-ref bx250d@x '2))) (set! bxe08@set-interaction-env-locs! (lambda (bx250f@x bx2510@val) (simple-struct-set! bx250f@x '2 bx2510@val))) (set! bxe0a@dummy '3) (set! bxe0c@interaction-environment-symbols (lambda () (bxe14@environment-symbols (bxe4a@interaction-environment)))) (set! bxe0e@environment-bindings (lambda (bx2513@e) (vector->list (vector-map (lambda (bx2515@name bx2516@label) (bxe10@parse-binding (cons bx2515@name (bx983@bx7d0@imported-label->binding bx2516@label)))) (bxde4@env-names bx2513@e) (bxde8@env-labels bx2513@e))))) (set! bxe10@parse-binding (lambda (bx2519@b) (cons (car bx2519@b) ((lambda (bx251b@t) (if (memv bx251b@t '(core-prim global)) 'procedure (if (memv bx251b@t '(core-macro macro global-macro)) 'syntax (if (memv bx251b@t '($core-rtd)) 'record (if (eq? (car bx2519@b) (cadr bx2519@b)) 'syntax 'unknown))))) (cadr bx2519@b))))) (set! bxe12@environment? (lambda (bx251d@x) (or (bxde2@env? bx251d@x) (bxdfc@interaction-env? bx251d@x)))) (set! bxe14@environment-symbols (lambda (bx251f@x) (if (bxde2@env? bx251f@x) (vector->list (bxde4@env-names bx251f@x)) (if (bxdfc@interaction-env? bx251f@x) (map values (bxaf7@rib-sym* (bxdfe@interaction-env-rib bx251f@x))) (assertion-violation 'environment-symbols '"not an environment" bx251f@x))))) (set! bxe16@environment (lambda bx2521@imp* ((lambda (bx2523@itc) ((lambda (bx2529@bx2526 bx252a@bx2528) ((lambda (bx252d@swap) (dynamic-wind bx252d@swap (lambda () (call-with-values (lambda () (bxdc0@parse-import-spec* bx2521@imp*)) (lambda (bx2533@bx2530 bx2534@bx2532) ((lambda (bx2537@subst-labels bx2538@subst-names) (make-simple-struct 'env '4 (list bx2538@subst-names bx2537@subst-labels bx2523@itc))) bx2534@bx2532 bx2533@bx2530)))) bx252d@swap)) (lambda () ((lambda (bx253b@t) (begin (bx2529@bx2526 bx252a@bx2528) (set! bx252a@bx2528 bx253b@t))) (bx2529@bx2526))))) bxdca@imp-collector bx2523@itc)) (bxdc4@make-collector)))) (set! bxe18@null-environment (lambda (bx253d@n) (begin (if (not (eqv? bx253d@n '5)) (assertion-violation 'null-environment '"not 5" bx253d@n) (void)) (bxe16@environment '(psyntax null-environment-5))))) (set! bxe1a@scheme-report-environment (lambda (bx253f@n) (begin (if (not (eqv? bx253f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bx253f@n) (void)) (bxe16@environment '(psyntax scheme-report-environment-5))))) (set! bxe1c@expand (lambda (bx2541@x bx2542@env) (if (bxde2@env? bx2542@env) ((lambda (bx2545@rib) ((lambda (bx2547@x bx2548@itc bx2549@rtc bx254a@vtc) ((lambda (bx254f@x) (begin (bxb15@seal-rib! bx2545@rib) (values bx254f@x (bx2549@rtc)))) ((lambda (bx2561@bx2552 bx2562@bx2554 bx2563@bx2556 bx2564@bx2558 bx2565@bx255a bx2566@bx255c bx2567@bx255e bx2568@bx2560) ((lambda (bx2571@swap) (dynamic-wind bx2571@swap (lambda () (bxd80@chi-expr bx2547@x '() '())) bx2571@swap)) (lambda () (begin ((lambda (bx2573@t) (begin (bx2561@bx2552 bx2565@bx255a) (set! bx2565@bx255a bx2573@t))) (bx2561@bx2552)) ((lambda (bx2575@t) (begin (bx2562@bx2554 bx2566@bx255c) (set! bx2566@bx255c bx2575@t))) (bx2562@bx2554)) ((lambda (bx2577@t) (begin (bx2563@bx2556 bx2567@bx255e) (set! bx2567@bx255e bx2577@t))) (bx2563@bx2556)) ((lambda (bx2579@t) (begin (bx2564@bx2558 bx2568@bx2560) (set! bx2568@bx2560 bx2579@t))) (bx2564@bx2558)))))) bxe4c@top-level-context bxdc6@inv-collector bxdc8@vis-collector bxdca@imp-collector '#f bx2549@rtc bx254a@vtc bx2548@itc))) (make-simple-struct 'stx '5 (list bx2541@x bxadd@top-mark* (list bx2545@rib) '())) (bxdec@env-itc bx2542@env) (bxdc4@make-collector) (bxdc4@make-collector))) (bxdc2@make-top-rib (bxde4@env-names bx2542@env) (bxde8@env-labels bx2542@env))) (if (bxdfc@interaction-env? bx2542@env) ((lambda (bx257b@rib bx257c@r bx257d@rtc) ((lambda (bx2581@x) (call-with-values (lambda () ((lambda (bx2597@bx2588 bx2598@bx258a bx2599@bx258c bx259a@bx258e bx259b@bx2590 bx259c@bx2592 bx259d@bx2594 bx259e@bx2596) ((lambda (bx25a7@swap) (dynamic-wind bx25a7@swap (lambda () (bxdce@chi-interaction-expr bx2581@x bx257b@rib bx257c@r)) bx25a7@swap)) (lambda () (begin ((lambda (bx25a9@t) (begin (bx2597@bx2588 bx259b@bx2590) (set! bx259b@bx2590 bx25a9@t))) (bx2597@bx2588)) ((lambda (bx25ab@t) (begin (bx2598@bx258a bx259c@bx2592) (set! bx259c@bx2592 bx25ab@t))) (bx2598@bx258a)) ((lambda (bx25ad@t) (begin (bx2599@bx258c bx259d@bx2594) (set! bx259d@bx2594 bx25ad@t))) (bx2599@bx258c)) ((lambda (bx25af@t) (begin (bx259a@bx258e bx259e@bx2596) (set! bx259e@bx2596 bx25af@t))) (bx259a@bx258e)))))) bxe4c@top-level-context bxdc6@inv-collector bxdc8@vis-collector bxdca@imp-collector bx2542@env bx257d@rtc (bxdc4@make-collector) (bxdc4@make-collector))) (lambda (bx25b1@bx2584 bx25b2@bx2586) ((lambda (bx25b5@r^ bx25b6@e) (begin (bxe04@set-interaction-env-r! bx2542@env bx25b5@r^) (values bx25b6@e (bx257d@rtc)))) bx25b2@bx2586 bx25b1@bx2584)))) (make-simple-struct 'stx '5 (list bx2541@x bxadd@top-mark* (list bx257b@rib) '())))) (bxdfe@interaction-env-rib bx2542@env) (bxe02@interaction-env-r bx2542@env) (bxdc4@make-collector)) (assertion-violation 'expand '"not an environment" bx2542@env))))) (set! bxe1e@eval (lambda (bx25b9@x bx25ba@env) (begin (if (not (bxe12@environment? bx25ba@env)) (error 'eval '"not an environment" bx25ba@env) (void)) (call-with-values (lambda () (bxe1c@expand bx25b9@x bx25ba@env)) (lambda (bx25c1@bx25be bx25c2@bx25c0) ((lambda (bx25c5@invoke-req* bx25c6@x) (begin (for-each bx984@bx7d2@invoke-library bx25c5@invoke-req*) (eval-core (bx70e@bx6c6@expanded->core bx25c6@x)))) bx25c2@bx25c0 bx25c1@bx25be)))))) (set! bxe20@library-expander (lambda bx2637 ((lambda (bx2638) (if (= bx2638 '3) (apply (lambda (bx25c9@x bx25ca@filename bx25cb@verify-name) ((lambda (bx25d0@build-visit-code bx25d2@visit!) (begin (set! bx25d0@build-visit-code (lambda (bx2625@macro*) (if (null? bx2625@macro*) (bxac1@bxa31@build-void) (bxac0@bxa2f@build-sequence '#f (map (lambda (bx2627@x) ((lambda (bx2629@loc bx262a@src) (list 'set! bx2629@loc bx262a@src)) (car bx2627@x) (cddr bx2627@x))) bx2625@macro*))))) (set! bx25d2@visit! (lambda (bx261d@macro*) (for-each (lambda (bx261f@x) ((lambda (bx2621@loc bx2622@proc) (set-symbol-value! bx2621@loc bx2622@proc)) (car bx261f@x) (cadr bx261f@x))) bx261d@macro*))) (call-with-values (lambda () (bxdd2@core-library-expander bx25c9@x bx25cb@verify-name)) (lambda (bx25e5@bx25d4 bx25e6@bx25d6 bx25e7@bx25d8 bx25e8@bx25da bx25e9@bx25dc bx25ea@bx25de bx25eb@bx25e0 bx25ec@bx25e2 bx25ed@bx25e4) ((lambda (bx25f7@export-env bx25f8@export-subst bx25f9@macro* bx25fa@invoke-code bx25fb@vis* bx25fc@inv* bx25fd@imp* bx25fe@ver bx25ff@name) ((lambda (bx2609@id bx260a@name bx260b@ver bx260c@imp* bx260d@vis* bx260e@inv* bx260f@visit-proc bx2610@invoke-proc bx2611@visit-code bx2612@invoke-code) (begin (bx982@bx7ce@install-library bx2609@id bx260a@name bx260b@ver bx260c@imp* bx260d@vis* bx260e@inv* bx25f8@export-subst bx25f7@export-env bx260f@visit-proc bx2610@invoke-proc bx2611@visit-code bx2612@invoke-code '#t bx25ca@filename) (values bx2609@id bx260a@name bx260b@ver bx260c@imp* bx260d@vis* bx260e@inv* bx2612@invoke-code bx2611@visit-code bx25f8@export-subst bx25f7@export-env))) (gensym) bx25ff@name bx25fe@ver (map bx988@bx7da@library-spec bx25fd@imp*) (map bx988@bx7da@library-spec bx25fb@vis*) (map bx988@bx7da@library-spec bx25fc@inv*) (lambda () (bx25d2@visit! bx25f9@macro*)) (lambda () (eval-core (bx70e@bx6c6@expanded->core bx25fa@invoke-code))) (bx25d0@build-visit-code bx25f9@macro*) bx25fa@invoke-code)) bx25ed@bx25e4 bx25ec@bx25e2 bx25eb@bx25e0 bx25ea@bx25de bx25e9@bx25dc bx25e8@bx25da bx25e7@bx25d8 bx25e6@bx25d6 bx25e5@bx25d4))))) '#f '#f)) bx2637) (if (= bx2638 '2) (apply (lambda (bx262d@x bx262e@filename) (bxe20@library-expander bx262d@x bx262e@filename (lambda (bx2631@x) (values)))) bx2637) (if (= bx2638 '1) (apply (lambda (bx2633@x) (bxe20@library-expander bx2633@x '#f (lambda (bx2635@x) (values)))) bx2637) (error 'apply '"invalid arg count"))))) (length bx2637)))) (set! bxe22@boot-library-expand (lambda (bx2639@x) (call-with-values (lambda () (bxe20@library-expander bx2639@x)) (lambda (bx264f@bx263c bx2650@bx263e bx2651@bx2640 bx2652@bx2642 bx2653@bx2644 bx2654@bx2646 bx2655@bx2648 bx2656@bx264a bx2657@bx264c bx2658@bx264e) ((lambda (bx2663@export-env bx2664@export-subst bx2665@visit-code bx2666@invoke-code bx2667@inv* bx2668@vis* bx2669@imp* bx266a@ver bx266b@name bx266c@id) (values bx266b@name bx2666@invoke-code bx2664@export-subst bx2663@export-env)) bx2658@bx264e bx2657@bx264c bx2656@bx264a bx2655@bx2648 bx2654@bx2646 bx2653@bx2644 bx2652@bx2642 bx2651@bx2640 bx2650@bx263e bx264f@bx263c))))) (set! bxe24@rev-map-append (lambda (bx2677@f bx2678@ls bx2679@ac) (if (null? bx2678@ls) bx2679@ac (bxe24@rev-map-append bx2677@f (cdr bx2678@ls) (cons (bx2677@f (car bx2678@ls)) bx2679@ac))))) (set! bxe26@build-exports (lambda (bx267d@lex*+loc* bx267e@init*) (bxac0@bxa2f@build-sequence '#f (cons (bxac1@bxa31@build-void) (bxe24@rev-map-append (lambda (bx2681@x) (list 'set! (cdr bx2681@x) (car bx2681@x))) bx267d@lex*+loc* bx267e@init*))))) (set! bxe28@make-export-subst (lambda (bx2683@name* bx2684@id*) (map (lambda (bx2687@name bx2688@id) ((lambda (bx268b@label) (begin (if (not bx268b@label) (bxe3e@syntax-violation '#f '"cannot export unbound identifier" bx2688@id) (void)) (cons bx2687@name bx268b@label))) (bxb6f@id->label bx2688@id))) bx2683@name* bx2684@id*))) (set! bxe2a@make-export-env/macros (lambda (bx268d@lex* bx268e@loc* bx268f@r) ((lambda (bx2694@lookup) (begin (set! bx2694@lookup (lambda (bx26b1@x) ((letrec ((bx26b3@f (lambda (bx26b5@x bx26b6@lex* bx26b7@loc*) (if (pair? bx26b6@lex*) (if (eq? bx26b5@x (car bx26b6@lex*)) (car bx26b7@loc*) (bx26b3@f bx26b5@x (cdr bx26b6@lex*) (cdr bx26b7@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) bx26b3@f) bx26b1@x bx268d@lex* bx268e@loc*))) ((letrec ((bx2695@f (lambda (bx2697@r bx2698@env bx2699@global* bx269a@macro*) (if (null? bx2697@r) (values bx2698@env bx2699@global* bx269a@macro*) ((lambda (bx269f@x) ((lambda (bx26a1@label bx26a2@b) ((lambda (bx26a5@t) (if (memv bx26a5@t '(lexical)) ((lambda (bx26a7@v) ((lambda (bx26a9@loc bx26aa@type) (bx2695@f (cdr bx2697@r) (cons (cons* bx26a1@label bx26aa@type bx26a9@loc) bx2698@env) (cons (cons (bxcea@lexical-var bx26a7@v) bx26a9@loc) bx2699@global*) bx269a@macro*)) (bx2694@lookup (bxcea@lexical-var bx26a7@v)) (if (bxcec@lexical-mutable? bx26a7@v) 'mutable 'global))) (bxb77@binding-value bx26a2@b)) (if (memv bx26a5@t '(local-macro)) ((lambda (bx26ad@loc) (bx2695@f (cdr bx2697@r) (cons (cons* bx26a1@label 'global-macro bx26ad@loc) bx2698@env) bx2699@global* (cons (cons bx26ad@loc (bxb77@binding-value bx26a2@b)) bx269a@macro*))) (gensym)) (if (memv bx26a5@t '(local-macro!)) ((lambda (bx26af@loc) (bx2695@f (cdr bx2697@r) (cons (cons* bx26a1@label 'global-macro! bx26af@loc) bx2698@env) bx2699@global* (cons (cons bx26af@loc (bxb77@binding-value bx26a2@b)) bx269a@macro*))) (gensym)) (if (memv bx26a5@t '($rtd $module)) (bx2695@f (cdr bx2697@r) (cons bx269f@x bx2698@env) bx2699@global* bx269a@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bxb75@binding-type bx26a2@b) (bxb77@binding-value bx26a2@b))))))) (bxb75@binding-type bx26a2@b))) (car bx269f@x) (cdr bx269f@x))) (car bx2697@r)))))) bx2695@f) bx268f@r '() '() '()))) '#f))) (set! bxe2c@generate-temporaries (lambda (bx26bb@ls) ((lambda (bx26bd@t) ((lambda (bx26bf@ls/false) (if bx26bf@ls/false (apply (lambda (bx26c1@ls) (map (lambda (bx26c3@x) (make-simple-struct 'stx '5 (list ((lambda (bx26c5@x) (if (or (symbol? bx26c5@x) (string? bx26c5@x)) (gensym bx26c5@x) (gensym 't))) (bxe44@syntax->datum bx26c3@x)) bxadd@top-mark* '() '()))) bx26c1@ls)) bx26bf@ls/false) ((lambda (bx26c7@t) ((lambda (bx26c9@ls/false) (if bx26c9@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bx26c9@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx26c7@t))) (bxd5e@syntax-dispatch bx26c7@t '_))) bx26bd@t))) (bxd5e@syntax-dispatch bx26bd@t 'each-any))) bx26bb@ls))) (set! bxe2e@free-identifier=? (lambda (bx26cb@x bx26cc@y) (if (bxb59@id? bx26cb@x) (if (bxb59@id? bx26cc@y) (bxb5f@free-id=? bx26cb@x bx26cc@y) (assertion-violation 'free-identifier=? '"not an identifier" bx26cc@y)) (assertion-violation 'free-identifier=? '"not an identifier" bx26cb@x)))) (set! bxe30@bound-identifier=? (lambda (bx26cf@x bx26d0@y) (if (bxb59@id? bx26cf@x) (if (bxb59@id? bx26d0@y) (bxb5d@bound-id=? bx26cf@x bx26d0@y) (assertion-violation 'bound-identifier=? '"not an identifier" bx26d0@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bx26cf@x)))) (set! bxe32@make-source-condition (lambda (bx26d3@x) ((lambda (bx26dd@bx26d8 bx26df@bx26da bx26e1@bx26d9 bx26e4@bx26d7 bx26e6@make-source-condition bx26e8@bx26d5 bx26ea@bx26d6 bx26ec@source-condition? bx26ee@source-filename bx26f0@source-character) (begin (set! bx26dd@bx26d8 (make-record-type-descriptor '&source-information bx2b2d@bx2874@&condition-rtd 'bx26db '#f '#f '#((immutable file-name) (immutable character)))) (set! bx26df@bx26da '#f) (set! bx26e1@bx26d9 (make-record-constructor-descriptor bx26dd@bx26d8 bx2b2e@bx2876@&condition-rcd bx26df@bx26da)) (set! bx26e4@bx26d7 (record-predicate bx26dd@bx26d8)) (set! bx26e6@make-source-condition (record-constructor bx26e1@bx26d9)) (set! bx26e8@bx26d5 (record-accessor bx26dd@bx26d8 '0)) (set! bx26ea@bx26d6 (record-accessor bx26dd@bx26d8 '1)) (set! bx26ec@source-condition? (condition-predicate bx26dd@bx26d8)) (set! bx26ee@source-filename (condition-accessor bx26dd@bx26d8 bx26e8@bx26d5)) (set! bx26f0@source-character (condition-accessor bx26dd@bx26d8 bx26ea@bx26d6)) (if (pair? bx26d3@x) (bx26e6@make-source-condition (car bx26d3@x) (cdr bx26d3@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! bxe34@extract-position-condition (lambda (bx26f1@x) (bxe32@make-source-condition (bxe36@expression-position bx26f1@x)))) (set! bxe36@expression-position (lambda (bx26f3@x) (and (bxb25@stx? bx26f3@x) ((lambda (bx26f5@x) (and (bx6ad@bx581@annotation? bx26f5@x) (bx6ae@bx583@annotation-source bx26f5@x))) (bxb27@stx-expr bx26f3@x))))) (set! bxe38@assertion-error (lambda (bx26f7@expr bx26f8@pos) (raise (condition (bx2b5d@bx2938@make-assertion-violation) (bx2b6f@bx296a@make-who-condition 'assert) (bx2b33@bx28cb@make-message-condition '"assertion failed") (bx2b65@bx294f@make-irritants-condition (list bx26f7@expr)) (bxe32@make-source-condition bx26f8@pos))))) (set! bxe3a@syntax-error (lambda (bx26fb@x . bx26fd@args) (begin (if (not (for-all string? bx26fd@args)) (assertion-violation 'syntax-error '"invalid argument" bx26fd@args) (void)) (raise (condition (bx2b33@bx28cb@make-message-condition (if (null? bx26fd@args) '"invalid syntax" (apply string-append bx26fd@args))) (bx2b91@bx29c6@make-syntax-violation (bxe44@syntax->datum bx26fb@x) '#f) (bxe34@extract-position-condition bx26fb@x)))))) (set! bxe3c@syntax-violation* (lambda (bx26ff@who bx2700@msg bx2701@form bx2702@condition-object) (begin (if (not (string? bx2700@msg)) (assertion-violation 'syntax-violation '"message is not a string" bx2700@msg) (void)) ((lambda (bx2707@who) (raise (condition (if bx2707@who (bx2b6f@bx296a@make-who-condition bx2707@who) (condition)) (bx2b33@bx28cb@make-message-condition bx2700@msg) bx2702@condition-object (bxe34@extract-position-condition bx2701@form)))) (if (or (string? bx26ff@who) (symbol? bx26ff@who)) bx26ff@who (if (not bx26ff@who) ((lambda (bx2709@t) ((lambda (bx270b@ls/false) (if (and bx270b@ls/false (apply (lambda (bx270d@id) (bxb59@id? bx270d@id)) bx270b@ls/false)) (apply (lambda (bx270f@id) (bxe44@syntax->datum bx270f@id)) bx270b@ls/false) ((lambda (bx2711@t) ((lambda (bx2713@ls/false) (if (and bx2713@ls/false (apply (lambda (bx2715@id bx2716@rest) (bxb59@id? bx2715@id)) bx2713@ls/false)) (apply (lambda (bx2719@id bx271a@rest) (bxe44@syntax->datum bx2719@id)) bx2713@ls/false) ((lambda (bx271d@t) ((lambda (bx271f@ls/false) (if bx271f@ls/false (apply (lambda () '#f) bx271f@ls/false) (bxe3e@syntax-violation '#f '"invalid syntax" bx271d@t))) (bxd5e@syntax-dispatch bx271d@t '_))) bx2711@t))) (bxd5e@syntax-dispatch bx2711@t '(any . any)))) bx2709@t))) (bxd5e@syntax-dispatch bx2709@t 'any))) bx2701@form) (assertion-violation 'syntax-violation '"invalid who argument" bx26ff@who))))))) (set! bxe3e@syntax-violation (lambda bx272f ((lambda (bx2730) (if (= bx2730 '3) (apply (lambda (bx2721@who bx2722@msg bx2723@form) (bxe3e@syntax-violation bx2721@who bx2722@msg bx2723@form '#f)) bx272f) (if (= bx2730 '4) (apply (lambda (bx2727@who bx2728@msg bx2729@form bx272a@subform) (bxe3c@syntax-violation* bx2727@who bx2728@msg bx2729@form (bx2b91@bx29c6@make-syntax-violation (bxe44@syntax->datum bx2729@form) (bxe44@syntax->datum bx272a@subform)))) bx272f) (error 'apply '"invalid arg count")))) (length bx272f)))) (set! bxe40@identifier? (lambda (bx2731@x) (bxb59@id? bx2731@x))) (set! bxe42@datum->syntax (lambda (bx2733@id bx2734@datum) (if (bxb59@id? bx2733@id) (bxb39@datum->stx bx2733@id bx2734@datum) (assertion-violation 'datum->syntax '"not an identifier" bx2733@id)))) (set! bxe44@syntax->datum (lambda (bx2737@x) (bxb6d@stx->datum bx2737@x))) (set! bxe46@compile-r6rs-top-level (lambda (bx2739@x*) (call-with-values (lambda () (bxdd6@top-level-expander bx2739@x*)) (lambda (bx273f@bx273c bx2740@bx273e) ((lambda (bx2743@invoke-code bx2744@lib*) (lambda () (begin (for-each bx984@bx7d2@invoke-library bx2744@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bx70e@bx6c6@expanded->core bx2743@invoke-code)) (void)) (eval-core (bx70e@bx6c6@expanded->core bx2743@invoke-code))))) bx2740@bx273e bx273f@bx273c))))) (set! bxe48@pre-compile-r6rs-top-level (lambda (bx2747@x*) (call-with-values (lambda () (bxdd6@top-level-expander bx2747@x*)) (lambda (bx274d@bx274a bx274e@bx274c) ((lambda (bx2751@invoke-code bx2752@lib*) (begin (for-each bx984@bx7d2@invoke-library bx2752@lib*) (bx6b6@bx593@compile-core (bx70e@bx6c6@expanded->core bx2751@invoke-code)))) bx274e@bx274c bx274d@bx274a))))) (set! bxe4a@interaction-environment ((lambda (bx2755@the-env) (lambda () (or bx2755@the-env ((lambda (bx2757@lib bx2758@rib) (begin ((lambda (bx275b@subst) (begin (bxaf9@set-rib-sym*! bx2758@rib (map car bx275b@subst)) (bxafd@set-rib-mark**! bx2758@rib (map (lambda (bx275d@x) bxadd@top-mark*) bx275b@subst)) (bxb01@set-rib-label*! bx2758@rib (map cdr bx275b@subst)))) (bx95f@bx788@library-subst bx2757@lib)) ((lambda (bx275f@env) (begin (set! bx2755@the-env bx275f@env) bx275f@env)) (make-simple-struct 'interaction-env '4 (list bx2758@rib '() '()))))) (bx97d@bx7c4@find-library-by-name '(mosh interaction)) (bxb0d@make-empty-rib))))) '#f)) (set! bxe4c@top-level-context (bx6b8@bx597@make-parameter '#f)) (begin (set! bx285a@bxe4c@top-level-context bxe4c@top-level-context) (set! bx2859@bxe4a@interaction-environment bxe4a@interaction-environment) (set! bx2858@bxe48@pre-compile-r6rs-top-level bxe48@pre-compile-r6rs-top-level) (set! bx2857@bxe46@compile-r6rs-top-level bxe46@compile-r6rs-top-level) (set! bx2856@bxe44@syntax->datum bxe44@syntax->datum) (set! bx2855@bxe42@datum->syntax bxe42@datum->syntax) (set! bx2854@bxe40@identifier? bxe40@identifier?) (set! bx2853@bxe3e@syntax-violation bxe3e@syntax-violation) (set! bx2852@bxe3c@syntax-violation* bxe3c@syntax-violation*) (set! bx2851@bxe3a@syntax-error bxe3a@syntax-error) (set! bx2850@bxe38@assertion-error bxe38@assertion-error) (set! bx284f@bxe36@expression-position bxe36@expression-position) (set! bx284e@bxe34@extract-position-condition bxe34@extract-position-condition) (set! bx284d@bxe32@make-source-condition bxe32@make-source-condition) (set! bx284c@bxe30@bound-identifier=? bxe30@bound-identifier=?) (set! bx284b@bxe2e@free-identifier=? bxe2e@free-identifier=?) (set! bx284a@bxe2c@generate-temporaries bxe2c@generate-temporaries) (set! bx2849@bxe2a@make-export-env/macros bxe2a@make-export-env/macros) (set! bx2848@bxe28@make-export-subst bxe28@make-export-subst) (set! bx2847@bxe26@build-exports bxe26@build-exports) (set! bx2846@bxe24@rev-map-append bxe24@rev-map-append) (set! bx2845@bxe22@boot-library-expand bxe22@boot-library-expand) (set! bx2844@bxe20@library-expander bxe20@library-expander) (set! bx2843@bxe1e@eval bxe1e@eval) (set! bx2842@bxe1c@expand bxe1c@expand) (set! bx2841@bxe1a@scheme-report-environment bxe1a@scheme-report-environment) (set! bx2840@bxe18@null-environment bxe18@null-environment) (set! bx283f@bxe16@environment bxe16@environment) (set! bx283e@bxe14@environment-symbols bxe14@environment-symbols) (set! bx283d@bxe12@environment? bxe12@environment?) (set! bx283c@bxe10@parse-binding bxe10@parse-binding) (set! bx283b@bxe0e@environment-bindings bxe0e@environment-bindings) (set! bx283a@bxe0c@interaction-environment-symbols bxe0c@interaction-environment-symbols) (set! bx2839@bxe0a@dummy bxe0a@dummy) (set! bx2838@bxe08@set-interaction-env-locs! bxe08@set-interaction-env-locs!) (set! bx2837@bxe06@interaction-env-locs bxe06@interaction-env-locs) (set! bx2836@bxe04@set-interaction-env-r! bxe04@set-interaction-env-r!) (set! bx2835@bxe02@interaction-env-r bxe02@interaction-env-r) (set! bx2834@bxe00@set-interaction-env-rib! bxe00@set-interaction-env-rib!) (set! bx2833@bxdfe@interaction-env-rib bxdfe@interaction-env-rib) (set! bx2832@bxdfc@interaction-env? bxdfc@interaction-env?) (set! bx2831@bxdf2@rp bxdf2@rp) (set! bx2830@bxdf0@dummy bxdf0@dummy) (set! bx282f@bxdee@set-env-itc! bxdee@set-env-itc!) (set! bx282e@bxdec@env-itc bxdec@env-itc) (set! bx282d@bxdea@set-env-labels! bxdea@set-env-labels!) (set! bx282c@bxde8@env-labels bxde8@env-labels) (set! bx282b@bxde6@set-env-names! bxde6@set-env-names!) (set! bx282a@bxde4@env-names bxde4@env-names) (set! bx2829@bxde2@env? bxde2@env?) (set! bx2828@bxdd8@rp bxdd8@rp) (set! bx2827@bxdd6@top-level-expander bxdd6@top-level-expander) (set! bx2826@bxdd4@parse-top-level-program bxdd4@parse-top-level-program) (set! bx2825@bxdd2@core-library-expander bxdd2@core-library-expander) (set! bx2824@bxdd0@library-body-expander bxdd0@library-body-expander) (set! bx2823@bxdce@chi-interaction-expr bxdce@chi-interaction-expr) (set! bx2822@bxdcc@chi-library-internal bxdcc@chi-library-internal) (set! bx2821@bxdca@imp-collector bxdca@imp-collector) (set! bx2820@bxdc8@vis-collector bxdc8@vis-collector) (set! bx281f@bxdc6@inv-collector bxdc6@inv-collector) (set! bx281e@bxdc4@make-collector bxdc4@make-collector) (set! bx281d@bxdc2@make-top-rib bxdc2@make-top-rib) (set! bx281c@bxdc0@parse-import-spec* bxdc0@parse-import-spec*) (set! bx281b@bxdbe@parse-library bxdbe@parse-library) (set! bx281a@bxdbc@parse-library-name bxdbc@parse-library-name) (set! bx2819@bxdba@parse-exports bxdba@parse-exports) (set! bx2818@bxdb8@expand-transformer bxdb8@expand-transformer) (set! bx2817@bxdb6@chi-body* bxdb6@chi-body*) (set! bx2816@bxdb4@chi-internal-module bxdb4@chi-internal-module) (set! bx2815@bxdb2@module-interface-exp-id* bxdb2@module-interface-exp-id*) (set! bx2814@bxdb0@dummy bxdb0@dummy) (set! bx2813@bxdae@set-module-interface-exp-lab-vec! bxdae@set-module-interface-exp-lab-vec!) (set! bx2812@bxdac@module-interface-exp-lab-vec bxdac@module-interface-exp-lab-vec) (set! bx2811@bxdaa@set-module-interface-exp-id-vec! bxdaa@set-module-interface-exp-id-vec!) (set! bx2810@bxda8@module-interface-exp-id-vec bxda8@module-interface-exp-id-vec) (set! bx280f@bxda6@set-module-interface-first-mark! bxda6@set-module-interface-first-mark!) (set! bx280e@bxda4@module-interface-first-mark bxda4@module-interface-first-mark) (set! bx280d@bxda2@module-interface? bxda2@module-interface?) (set! bx280c@bxd98@parse-module bxd98@parse-module) (set! bx280b@bxd96@chi-internal bxd96@chi-internal) (set! bx280a@bxd94@find-dups bxd94@find-dups) (set! bx2809@bxd92@find-bound=? bxd92@find-bound=?) (set! bx2808@bxd90@chi-rhs* bxd90@chi-rhs*) (set! bx2807@bxd8e@expand-interaction-rhs*/init* bxd8e@expand-interaction-rhs*/init*) (set! bx2806@bxd8c@chi-rhs bxd8c@chi-rhs) (set! bx2805@bxd8a@chi-defun bxd8a@chi-defun) (set! bx2804@bxd88@chi-lambda-clause* bxd88@chi-lambda-clause*) (set! bx2803@bxd86@chi-lambda-clause bxd86@chi-lambda-clause) (set! bx2802@bxd84@verify-formals bxd84@verify-formals) (set! bx2801@bxd82@chi-set! bxd82@chi-set!) (set! bx2800@bxd80@chi-expr bxd80@chi-expr) (set! bx27ff@bxd7e@chi-application bxd7e@chi-application) (set! bx27fe@bxd7c@chi-expr* bxd7c@chi-expr*) (set! bx27fd@bxd7a@chi-global-macro bxd7a@chi-global-macro) (set! bx27fc@bxd78@chi-local-macro bxd78@chi-local-macro) (set! bx27fb@bxd76@chi-macro bxd76@chi-macro) (set! bx27fa@bxd74@do-macro-call bxd74@do-macro-call) (set! bx27f9@bxd72@local-macro-transformer bxd72@local-macro-transformer) (set! bx27f8@bxd70@macro-transformer bxd70@macro-transformer) (set! bx27f7@bxd6e@symbol-macro bxd6e@symbol-macro) (set! bx27f6@bxd6c@core-macro-transformer bxd6c@core-macro-transformer) (set! bx27f5@bxd6a@syntax-transformer bxd6a@syntax-transformer) (set! bx27f4@bxd68@ellipsis-map bxd68@ellipsis-map) (set! bx27f3@bxd66@syntax-case-transformer bxd66@syntax-case-transformer) (set! bx27f2@bxd64@verify-literals bxd64@verify-literals) (set! bx27f1@bxd62@underscore? bxd62@underscore?) (set! bx27f0@bxd60@ellipsis? bxd60@ellipsis?) (set! bx27ef@bxd5e@syntax-dispatch bxd5e@syntax-dispatch) (set! bx27ee@bxd5c@convert-pattern bxd5c@convert-pattern) (set! bx27ed@bxd5a@foreign-call-transformer bxd5a@foreign-call-transformer) (set! bx27ec@bxd58@parameterize-macro bxd58@parameterize-macro) (set! bx27eb@bxd56@incorrect-usage-macro bxd56@incorrect-usage-macro) (set! bx27ea@bxd54@define-condition-type-macro bxd54@define-condition-type-macro) (set! bx27e9@bxd52@define-record-type-macro bxd52@define-record-type-macro) (set! bx27e8@bxd50@define-struct-macro bxd50@define-struct-macro) (set! bx27e7@bxd4e@quasisyntax-macro bxd4e@quasisyntax-macro) (set! bx27e6@bxd4c@quasiquote-macro bxd4c@quasiquote-macro) (set! bx27e5@bxd4a@syntax-rules-macro bxd4a@syntax-rules-macro) (set! bx27e4@bxd48@include-into-macro bxd48@include-into-macro) (set! bx27e3@bxd46@include-macro bxd46@include-macro) (set! bx27e2@bxd44@do-include bxd44@do-include) (set! bx27e1@bxd42@cond-macro bxd42@cond-macro) (set! bx27e0@bxd40@and-macro bxd40@and-macro) (set! bx27df@bxd3e@or-macro bxd3e@or-macro) (set! bx27de@bxd3c@let*-macro bxd3c@let*-macro) (set! bx27dd@bxd3a@do-macro bxd3a@do-macro) (set! bx27dc@bxd38@identifier-syntax-macro bxd38@identifier-syntax-macro) (set! bx27db@bxd36@endianness-macro bxd36@endianness-macro) (set! bx27da@bxd34@assert-macro bxd34@assert-macro) (set! bx27d9@bxd32@delay-macro bxd32@delay-macro) (set! bx27d8@bxd30@time-macro bxd30@time-macro) (set! bx27d7@bxd2e@define-enumeration-macro bxd2e@define-enumeration-macro) (set! bx27d6@bxd2c@guard-macro bxd2c@guard-macro) (set! bx27d5@bxd2a@trace-letrec-syntax-macro bxd2a@trace-letrec-syntax-macro) (set! bx27d4@bxd28@trace-let-syntax-macro bxd28@trace-let-syntax-macro) (set! bx27d3@bxd26@trace-let/rec-syntax bxd26@trace-let/rec-syntax) (set! bx27d2@bxd24@trace-define-syntax-macro bxd24@trace-define-syntax-macro) (set! bx27d1@bxd22@trace-define-macro bxd22@trace-define-macro) (set! bx27d0@bxd20@trace-lambda-macro bxd20@trace-lambda-macro) (set! bx27cf@bxd1e@let*-values-macro bxd1e@let*-values-macro) (set! bx27ce@bxd1c@let-values-macro bxd1c@let-values-macro) (set! bx27cd@bxd1a@let-macro bxd1a@let-macro) (set! bx27cc@bxd18@invalid-fmls-error bxd18@invalid-fmls-error) (set! bx27cb@bxd16@with-syntax-macro bxd16@with-syntax-macro) (set! bx27ca@bxd14@bless bxd14@bless) (set! bx27c9@bxd12@lambda-transformer bxd12@lambda-transformer) (set! bx27c8@bxd10@case-lambda-transformer bxd10@case-lambda-transformer) (set! bx27c7@bxd0e@quote-transformer bxd0e@quote-transformer) (set! bx27c6@bxd0c@case-macro bxd0c@case-macro) (set! bx27c5@bxd0a@or-transformer bxd0a@or-transformer) (set! bx27c4@bxd08@and-transformer bxd08@and-transformer) (set! bx27c3@bxd06@if-transformer bxd06@if-transformer) (set! bx27c2@bxd04@unless-macro bxd04@unless-macro) (set! bx27c1@bxd02@when-macro bxd02@when-macro) (set! bx27c0@bxd00@record-constructor-descriptor-transformer bxd00@record-constructor-descriptor-transformer) (set! bx27bf@bxcfe@record-type-descriptor-transformer bxcfe@record-type-descriptor-transformer) (set! bx27be@bxcfc@type-descriptor-transformer bxcfc@type-descriptor-transformer) (set! bx27bd@bxcfa@fluid-let-syntax-transformer bxcfa@fluid-let-syntax-transformer) (set! bx27bc@bxcf8@letrec*-transformer bxcf8@letrec*-transformer) (set! bx27bb@bxcf6@letrec-transformer bxcf6@letrec-transformer) (set! bx27ba@bxcf4@letrec-helper bxcf4@letrec-helper) (set! bx27b9@bxcf2@add-lexicals bxcf2@add-lexicals) (set! bx27b8@bxcf0@add-lexical bxcf0@add-lexical) (set! bx27b7@bxcee@set-lexical-mutable! bxcee@set-lexical-mutable!) (set! bx27b6@bxcec@lexical-mutable? bxcec@lexical-mutable?) (set! bx27b5@bxcea@lexical-var bxcea@lexical-var) (set! bx27b4@bxce8@scheme-stx bxce8@scheme-stx) (set! bx27b3@bxce6@scheme-stx-hashtable bxce6@scheme-stx-hashtable) (set! bx27b2@bxce4@parse-define-syntax bxce4@parse-define-syntax) (set! bx27b1@bxce2@parse-define bxce2@parse-define) (set! bx27b0@bxb91@make-eval-transformer bxb91@make-eval-transformer) (set! bx27af@bxb8f@variable-transformer-procedure bxb8f@variable-transformer-procedure) (set! bx27ae@bxb8d@variable-transformer? bxb8d@variable-transformer?) (set! bx27ad@bxb8b@make-variable-transformer bxb8b@make-variable-transformer) (set! bx27ac@bxb89@sanitize-binding bxb89@sanitize-binding) (set! bx27ab@bxb7b@syntax-type bxb7b@syntax-type) (set! bx27aa@bxb79@raise-unbound-error bxb79@raise-unbound-error) (set! bx27a9@bxb77@binding-value bxb77@binding-value) (set! bx27a8@bxb75@binding-type bxb75@binding-type) (set! bx27a7@bxb73@make-binding bxb73@make-binding) (set! bx27a6@bxb71@label->binding bxb71@label->binding) (set! bx27a5@bxb6f@id->label bxb6f@id->label) (set! bx27a4@bxb6d@stx->datum bxb6d@stx->datum) (set! bx27a3@bxb6b@strip bxb6b@strip) (set! bx27a2@bxb69@strip-annotations bxb69@strip-annotations) (set! bx27a1@bxb67@self-evaluating? bxb67@self-evaluating?) (set! bx27a0@bxb65@bound-id-member? bxb65@bound-id-member?) (set! bx279f@bxb63@distinct-bound-ids? bxb63@distinct-bound-ids?) (set! bx279e@bxb61@valid-bound-ids? bxb61@valid-bound-ids?) (set! bx279d@bxb5f@free-id=? bxb5f@free-id=?) (set! bx279c@bxb5d@bound-id=? bxb5d@bound-id=?) (set! bx279b@bxb5b@id->sym bxb5b@id->sym) (set! bx279a@bxb59@id? bxb59@id?) (set! bx2799@bxb57@syntax->list bxb57@syntax->list) (set! bx2798@bxb55@syntax-cdr bxb55@syntax-cdr) (set! bx2797@bxb53@syntax-car bxb53@syntax-car) (set! bx2796@bxb51@syntax-list? bxb51@syntax-list?) (set! bx2795@bxb4f@syntax-null? bxb4f@syntax-null?) (set! bx2794@bxb4d@syntax-vector? bxb4d@syntax-vector?) (set! bx2793@bxb4b@syntax-pair? bxb4b@syntax-pair?) (set! bx2792@bxb49@syntax-vector->list bxb49@syntax-vector->list) (set! bx2791@bxb47@syntax-kind? bxb47@syntax-kind?) (set! bx2790@bxb45@add-subst bxb45@add-subst) (set! bx278f@bxb43@add-mark bxb43@add-mark) (set! bx278e@bxb41@mkstx bxb41@mkstx) (set! bx278d@bxb3f@anti-mark? bxb3f@anti-mark?) (set! bx278c@bxb3d@anti-mark bxb3d@anti-mark) (set! bx278b@bxb3b@gen-mark bxb3b@gen-mark) (set! bx278a@bxb39@datum->stx bxb39@datum->stx) (set! bx2789@bxb37@dummy bxb37@dummy) (set! bx2788@bxb35@set-stx-ae*! bxb35@set-stx-ae*!) (set! bx2787@bxb33@stx-ae* bxb33@stx-ae*) (set! bx2786@bxb31@set-stx-subst*! bxb31@set-stx-subst*!) (set! bx2785@bxb2f@stx-subst* bxb2f@stx-subst*) (set! bx2784@bxb2d@set-stx-mark*! bxb2d@set-stx-mark*!) (set! bx2783@bxb2b@stx-mark* bxb2b@stx-mark*) (set! bx2782@bxb29@set-stx-expr! bxb29@set-stx-expr!) (set! bx2781@bxb27@stx-expr bxb27@stx-expr) (set! bx2780@bxb25@stx? bxb25@stx?) (set! bx277f@bxb1b@rp bxb1b@rp) (set! bx277e@bxb19@make-full-rib bxb19@make-full-rib) (set! bx277d@bxb17@unseal-rib! bxb17@unseal-rib!) (set! bx277c@bxb15@seal-rib! bxb15@seal-rib!) (set! bx277b@bxb13@make-rib-map bxb13@make-rib-map) (set! bx277a@bxb11@extend-rib/nc! bxb11@extend-rib/nc!) (set! bx2779@bxb0f@extend-rib! bxb0f@extend-rib!) (set! bx2778@bxb0d@make-empty-rib bxb0d@make-empty-rib) (set! bx2777@bxb0b@dummy bxb0b@dummy) (set! bx2776@bxb09@set-rib-cache! bxb09@set-rib-cache!) (set! bx2775@bxb07@rib-cache bxb07@rib-cache) (set! bx2774@bxb05@set-rib-sealed/freq! bxb05@set-rib-sealed/freq!) (set! bx2773@bxb03@rib-sealed/freq bxb03@rib-sealed/freq) (set! bx2772@bxb01@set-rib-label*! bxb01@set-rib-label*!) (set! bx2771@bxaff@rib-label* bxaff@rib-label*) (set! bx2770@bxafd@set-rib-mark**! bxafd@set-rib-mark**!) (set! bx276f@bxafb@rib-mark** bxafb@rib-mark**) (set! bx276e@bxaf9@set-rib-sym*! bxaf9@set-rib-sym*!) (set! bx276d@bxaf7@rib-sym* bxaf7@rib-sym*) (set! bx276c@bxaf5@rib? bxaf5@rib?) (set! bx276b@bxaeb@gen-define-label bxaeb@gen-define-label) (set! bx276a@bxae9@gen-define-label+loc bxae9@gen-define-label+loc) (set! bx2769@bxae7@gen-top-level-label bxae7@gen-top-level-label) (set! bx2768@bxae5@gen-label bxae5@gen-label) (set! bx2767@bxae3@gen-global bxae3@gen-global) (set! bx2766@bxae1@gen-lexical bxae1@gen-lexical) (set! bx2765@bxadf@top-marked? bxadf@top-marked?) (set! bx2764@bxadd@top-mark* bxadd@top-mark*) (set! bx2763@bxad8@set-union bxad8@set-union) (set! bx2762@bxad6@set-cons bxad6@set-cons) (set! bx2761@bxad4@file-options-macro bxad4@file-options-macro) (bx97a@bx7be@current-library-expander bxe20@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (bx2869@bx2864 bx286b@bx2866 bx286d@bx2865 bx2870@&condition? bx2872@make-&condition bx2874@&condition-rtd bx2876@&condition-rcd bx28c2@bx28bd bx28c4@bx28bf bx28c6@bx28be bx28c9@p? bx28cb@make-message-condition bx28cd@bx28bc bx28cf@message-condition? bx28d1@condition-message bx28d3@&message-rtd bx28d5@&message-rcd bx28db@bx28d6 bx28dd@bx28d8 bx28df@bx28d7 bx28e2@p? bx28e4@make-warning bx28e6@warning? bx28e8@&warning-rtd bx28ea@&warning-rcd bx28f0@bx28eb bx28f2@bx28ed bx28f4@bx28ec bx28f7@p? bx28f9@make-serious-condition bx28fb@serious-condition? bx28fd@&serious-rtd bx28ff@&serious-rcd bx2905@bx2900 bx2907@bx2902 bx2909@bx2901 bx290c@p? bx290e@make-error bx2910@error? bx2912@&error-rtd bx2914@&error-rcd bx291a@bx2915 bx291c@bx2917 bx291e@bx2916 bx2921@p? bx2923@make-violation bx2925@violation? bx2927@&violation-rtd bx2929@&violation-rcd bx292f@bx292a bx2931@bx292c bx2933@bx292b bx2936@p? bx2938@make-assertion-violation bx293a@assertion-violation? bx293c@&assertion-rtd bx293e@&assertion-rcd bx2946@bx2941 bx2948@bx2943 bx294a@bx2942 bx294d@p? bx294f@make-irritants-condition bx2951@bx2940 bx2953@irritants-condition? bx2955@condition-irritants bx2957@&irritants-rtd bx2959@&irritants-rcd bx2961@bx295c bx2963@bx295e bx2965@bx295d bx2968@p? bx296a@make-who-condition bx296c@bx295b bx296e@who-condition? bx2970@condition-who bx2972@&who-rtd bx2974@&who-rcd bx297a@bx2975 bx297c@bx2977 bx297e@bx2976 bx2981@p? bx2983@make-non-continuable-violation bx2985@non-continuable-violation? bx2987@&non-continuable-rtd bx2989@&non-continuable-rcd bx298f@bx298a bx2991@bx298c bx2993@bx298b bx2996@p? bx2998@make-implementation-restriction-violation bx299a@implementation-restriction-violation? bx299c@&implementation-restriction-rtd bx299e@&implementation-restriction-rcd bx29a4@bx299f bx29a6@bx29a1 bx29a8@bx29a0 bx29ab@p? bx29ad@make-lexical-violation bx29af@lexical-violation? bx29b1@&lexical-rtd bx29b3@&lexical-rcd bx29bd@bx29b8 bx29bf@bx29ba bx29c1@bx29b9 bx29c4@p? bx29c6@make-syntax-violation bx29c8@bx29b5 bx29ca@bx29b7 bx29cc@syntax-violation? bx29ce@syntax-violation-form bx29d0@syntax-violation-subform bx29d2@&syntax-rtd bx29d4@&syntax-rcd bx29da@bx29d5 bx29dc@bx29d7 bx29de@bx29d6 bx29e1@p? bx29e3@make-undefined-violation bx29e5@undefined-violation? bx29e7@&undefined-rtd bx29e9@&undefined-rcd bx29ef@bx29ea bx29f1@bx29ec bx29f3@bx29eb bx29f6@p? bx29f8@make-i/o-error bx29fa@i/o-error? bx29fc@&i/o-rtd bx29fe@&i/o-rcd bx2a04@bx29ff bx2a06@bx2a01 bx2a08@bx2a00 bx2a0b@p? bx2a0d@make-i/o-read-error bx2a0f@i/o-read-error? bx2a11@&i/o-read-rtd bx2a13@&i/o-read-rcd bx2a19@bx2a14 bx2a1b@bx2a16 bx2a1d@bx2a15 bx2a20@p? bx2a22@make-i/o-write-error bx2a24@i/o-write-error? bx2a26@&i/o-write-rtd bx2a28@&i/o-write-rcd bx2a30@bx2a2b bx2a32@bx2a2d bx2a34@bx2a2c bx2a37@p? bx2a39@make-i/o-invalid-position-error bx2a3b@bx2a2a bx2a3d@i/o-invalid-position-error? bx2a3f@i/o-error-position bx2a41@&i/o-invalid-position-rtd bx2a43@&i/o-invalid-position-rcd bx2a4b@bx2a46 bx2a4d@bx2a48 bx2a4f@bx2a47 bx2a52@p? bx2a54@make-i/o-filename-error bx2a56@bx2a45 bx2a58@i/o-filename-error? bx2a5a@i/o-error-filename bx2a5c@&i/o-filename-rtd bx2a5e@&i/o-filename-rcd bx2a64@bx2a5f bx2a66@bx2a61 bx2a68@bx2a60 bx2a6b@p? bx2a6d@make-i/o-file-protection-error bx2a6f@i/o-file-protection-error? bx2a71@&i/o-file-protection-rtd bx2a73@&i/o-file-protection-rcd bx2a79@bx2a74 bx2a7b@bx2a76 bx2a7d@bx2a75 bx2a80@p? bx2a82@make-i/o-file-is-read-only-error bx2a84@i/o-file-is-read-only-error? bx2a86@&i/o-file-is-read-only-rtd bx2a88@&i/o-file-is-read-only-rcd bx2a8e@bx2a89 bx2a90@bx2a8b bx2a92@bx2a8a bx2a95@p? bx2a97@make-i/o-file-already-exists-error bx2a99@i/o-file-already-exists-error? bx2a9b@&i/o-file-already-exists-rtd bx2a9d@&i/o-file-already-exists-rcd bx2aa3@bx2a9e bx2aa5@bx2aa0 bx2aa7@bx2a9f bx2aaa@p? bx2aac@make-i/o-file-does-not-exist-error bx2aae@i/o-file-does-not-exist-error? bx2ab0@&i/o-file-does-not-exist-rtd bx2ab2@&i/o-file-does-not-exist-rcd bx2aba@bx2ab5 bx2abc@bx2ab7 bx2abe@bx2ab6 bx2ac1@p? bx2ac3@make-i/o-port-error bx2ac5@bx2ab4 bx2ac7@i/o-port-error? bx2ac9@i/o-error-port bx2acb@&i/o-port-rtd bx2acd@&i/o-port-rcd bx2ad3@bx2ace bx2ad5@bx2ad0 bx2ad7@bx2acf bx2ada@p? bx2adc@make-i/o-decoding-error bx2ade@i/o-decoding-error? bx2ae0@&i/o-decoding-rtd bx2ae2@&i/o-decoding-rcd bx2aea@bx2ae5 bx2aec@bx2ae7 bx2aee@bx2ae6 bx2af1@p? bx2af3@make-i/o-encoding-error bx2af5@bx2ae4 bx2af7@i/o-encoding-error? bx2af9@i/o-encoding-error-char bx2afb@&i/o-encoding-rtd bx2afd@&i/o-encoding-rcd bx2b03@bx2afe bx2b05@bx2b00 bx2b07@bx2aff bx2b0a@p? bx2b0c@make-no-infinities-violation bx2b0e@no-infinities-violation? bx2b10@&no-infinities-rtd bx2b12@&no-infinities-rcd bx2b18@bx2b13 bx2b1a@bx2b15 bx2b1c@bx2b14 bx2b1f@p? bx2b21@make-no-nans-violation bx2b23@no-nans-violation? bx2b25@&no-nans-rtd bx2b27@&no-nans-rcd) (begin (set! bx2869@bx2864 (make-record-type-descriptor '&condition '#f 'bx2867 '#f '#f '#())) (set! bx286b@bx2866 '#f) (set! bx286d@bx2865 (make-record-constructor-descriptor bx2869@bx2864 '#f bx286b@bx2866)) (set! bx2870@&condition? (record-predicate bx2869@bx2864)) (set! bx2872@make-&condition (record-constructor bx286d@bx2865)) (set! bx2874@&condition-rtd bx2869@bx2864) (set! bx2876@&condition-rcd bx286d@bx2865) (set! bx28c2@bx28bd (make-record-type-descriptor '&message bx2869@bx2864 'bx28c0 '#f '#f '#((immutable message)))) (set! bx28c4@bx28bf '#f) (set! bx28c6@bx28be (make-record-constructor-descriptor bx28c2@bx28bd bx286d@bx2865 bx28c4@bx28bf)) (set! bx28c9@p? (record-predicate bx28c2@bx28bd)) (set! bx28cb@make-message-condition (record-constructor bx28c6@bx28be)) (set! bx28cd@bx28bc (record-accessor bx28c2@bx28bd '0)) (set! bx28cf@message-condition? (condition-predicate bx28c2@bx28bd)) (set! bx28d1@condition-message (condition-accessor bx28c2@bx28bd bx28cd@bx28bc)) (set! bx28d3@&message-rtd bx28c2@bx28bd) (set! bx28d5@&message-rcd bx28c6@bx28be) (set! bx28db@bx28d6 (make-record-type-descriptor '&warning bx2869@bx2864 'bx28d9 '#f '#f '#())) (set! bx28dd@bx28d8 '#f) (set! bx28df@bx28d7 (make-record-constructor-descriptor bx28db@bx28d6 bx286d@bx2865 bx28dd@bx28d8)) (set! bx28e2@p? (record-predicate bx28db@bx28d6)) (set! bx28e4@make-warning (record-constructor bx28df@bx28d7)) (set! bx28e6@warning? (condition-predicate bx28db@bx28d6)) (set! bx28e8@&warning-rtd bx28db@bx28d6) (set! bx28ea@&warning-rcd bx28df@bx28d7) (set! bx28f0@bx28eb (make-record-type-descriptor '&serious bx2869@bx2864 'bx28ee '#f '#f '#())) (set! bx28f2@bx28ed '#f) (set! bx28f4@bx28ec (make-record-constructor-descriptor bx28f0@bx28eb bx286d@bx2865 bx28f2@bx28ed)) (set! bx28f7@p? (record-predicate bx28f0@bx28eb)) (set! bx28f9@make-serious-condition (record-constructor bx28f4@bx28ec)) (set! bx28fb@serious-condition? (condition-predicate bx28f0@bx28eb)) (set! bx28fd@&serious-rtd bx28f0@bx28eb) (set! bx28ff@&serious-rcd bx28f4@bx28ec) (set! bx2905@bx2900 (make-record-type-descriptor '&error bx28f0@bx28eb 'bx2903 '#f '#f '#())) (set! bx2907@bx2902 '#f) (set! bx2909@bx2901 (make-record-constructor-descriptor bx2905@bx2900 bx28f4@bx28ec bx2907@bx2902)) (set! bx290c@p? (record-predicate bx2905@bx2900)) (set! bx290e@make-error (record-constructor bx2909@bx2901)) (set! bx2910@error? (condition-predicate bx2905@bx2900)) (set! bx2912@&error-rtd bx2905@bx2900) (set! bx2914@&error-rcd bx2909@bx2901) (set! bx291a@bx2915 (make-record-type-descriptor '&violation bx28f0@bx28eb 'bx2918 '#f '#f '#())) (set! bx291c@bx2917 '#f) (set! bx291e@bx2916 (make-record-constructor-descriptor bx291a@bx2915 bx28f4@bx28ec bx291c@bx2917)) (set! bx2921@p? (record-predicate bx291a@bx2915)) (set! bx2923@make-violation (record-constructor bx291e@bx2916)) (set! bx2925@violation? (condition-predicate bx291a@bx2915)) (set! bx2927@&violation-rtd bx291a@bx2915) (set! bx2929@&violation-rcd bx291e@bx2916) (set! bx292f@bx292a (make-record-type-descriptor '&assertion bx291a@bx2915 'bx292d '#f '#f '#())) (set! bx2931@bx292c '#f) (set! bx2933@bx292b (make-record-constructor-descriptor bx292f@bx292a bx291e@bx2916 bx2931@bx292c)) (set! bx2936@p? (record-predicate bx292f@bx292a)) (set! bx2938@make-assertion-violation (record-constructor bx2933@bx292b)) (set! bx293a@assertion-violation? (condition-predicate bx292f@bx292a)) (set! bx293c@&assertion-rtd bx292f@bx292a) (set! bx293e@&assertion-rcd bx2933@bx292b) (set! bx2946@bx2941 (make-record-type-descriptor '&irritants bx2869@bx2864 'bx2944 '#f '#f '#((immutable irritants)))) (set! bx2948@bx2943 '#f) (set! bx294a@bx2942 (make-record-constructor-descriptor bx2946@bx2941 bx286d@bx2865 bx2948@bx2943)) (set! bx294d@p? (record-predicate bx2946@bx2941)) (set! bx294f@make-irritants-condition (record-constructor bx294a@bx2942)) (set! bx2951@bx2940 (record-accessor bx2946@bx2941 '0)) (set! bx2953@irritants-condition? (condition-predicate bx2946@bx2941)) (set! bx2955@condition-irritants (condition-accessor bx2946@bx2941 bx2951@bx2940)) (set! bx2957@&irritants-rtd bx2946@bx2941) (set! bx2959@&irritants-rcd bx294a@bx2942) (set! bx2961@bx295c (make-record-type-descriptor '&who bx2869@bx2864 'bx295f '#f '#f '#((immutable who)))) (set! bx2963@bx295e '#f) (set! bx2965@bx295d (make-record-constructor-descriptor bx2961@bx295c bx286d@bx2865 bx2963@bx295e)) (set! bx2968@p? (record-predicate bx2961@bx295c)) (set! bx296a@make-who-condition (record-constructor bx2965@bx295d)) (set! bx296c@bx295b (record-accessor bx2961@bx295c '0)) (set! bx296e@who-condition? (condition-predicate bx2961@bx295c)) (set! bx2970@condition-who (condition-accessor bx2961@bx295c bx296c@bx295b)) (set! bx2972@&who-rtd bx2961@bx295c) (set! bx2974@&who-rcd bx2965@bx295d) (set! bx297a@bx2975 (make-record-type-descriptor '&non-continuable bx291a@bx2915 'bx2978 '#f '#f '#())) (set! bx297c@bx2977 '#f) (set! bx297e@bx2976 (make-record-constructor-descriptor bx297a@bx2975 bx291e@bx2916 bx297c@bx2977)) (set! bx2981@p? (record-predicate bx297a@bx2975)) (set! bx2983@make-non-continuable-violation (record-constructor bx297e@bx2976)) (set! bx2985@non-continuable-violation? (condition-predicate bx297a@bx2975)) (set! bx2987@&non-continuable-rtd bx297a@bx2975) (set! bx2989@&non-continuable-rcd bx297e@bx2976) (set! bx298f@bx298a (make-record-type-descriptor '&implementation-restriction bx291a@bx2915 'bx298d '#f '#f '#())) (set! bx2991@bx298c '#f) (set! bx2993@bx298b (make-record-constructor-descriptor bx298f@bx298a bx291e@bx2916 bx2991@bx298c)) (set! bx2996@p? (record-predicate bx298f@bx298a)) (set! bx2998@make-implementation-restriction-violation (record-constructor bx2993@bx298b)) (set! bx299a@implementation-restriction-violation? (condition-predicate bx298f@bx298a)) (set! bx299c@&implementation-restriction-rtd bx298f@bx298a) (set! bx299e@&implementation-restriction-rcd bx2993@bx298b) (set! bx29a4@bx299f (make-record-type-descriptor '&lexical bx291a@bx2915 'bx29a2 '#f '#f '#())) (set! bx29a6@bx29a1 '#f) (set! bx29a8@bx29a0 (make-record-constructor-descriptor bx29a4@bx299f bx291e@bx2916 bx29a6@bx29a1)) (set! bx29ab@p? (record-predicate bx29a4@bx299f)) (set! bx29ad@make-lexical-violation (record-constructor bx29a8@bx29a0)) (set! bx29af@lexical-violation? (condition-predicate bx29a4@bx299f)) (set! bx29b1@&lexical-rtd bx29a4@bx299f) (set! bx29b3@&lexical-rcd bx29a8@bx29a0) (set! bx29bd@bx29b8 (make-record-type-descriptor '&syntax bx291a@bx2915 'bx29bb '#f '#f '#((immutable form) (immutable subform)))) (set! bx29bf@bx29ba '#f) (set! bx29c1@bx29b9 (make-record-constructor-descriptor bx29bd@bx29b8 bx291e@bx2916 bx29bf@bx29ba)) (set! bx29c4@p? (record-predicate bx29bd@bx29b8)) (set! bx29c6@make-syntax-violation (record-constructor bx29c1@bx29b9)) (set! bx29c8@bx29b5 (record-accessor bx29bd@bx29b8 '0)) (set! bx29ca@bx29b7 (record-accessor bx29bd@bx29b8 '1)) (set! bx29cc@syntax-violation? (condition-predicate bx29bd@bx29b8)) (set! bx29ce@syntax-violation-form (condition-accessor bx29bd@bx29b8 bx29c8@bx29b5)) (set! bx29d0@syntax-violation-subform (condition-accessor bx29bd@bx29b8 bx29ca@bx29b7)) (set! bx29d2@&syntax-rtd bx29bd@bx29b8) (set! bx29d4@&syntax-rcd bx29c1@bx29b9) (set! bx29da@bx29d5 (make-record-type-descriptor '&undefined bx291a@bx2915 'bx29d8 '#f '#f '#())) (set! bx29dc@bx29d7 '#f) (set! bx29de@bx29d6 (make-record-constructor-descriptor bx29da@bx29d5 bx291e@bx2916 bx29dc@bx29d7)) (set! bx29e1@p? (record-predicate bx29da@bx29d5)) (set! bx29e3@make-undefined-violation (record-constructor bx29de@bx29d6)) (set! bx29e5@undefined-violation? (condition-predicate bx29da@bx29d5)) (set! bx29e7@&undefined-rtd bx29da@bx29d5) (set! bx29e9@&undefined-rcd bx29de@bx29d6) (set! bx29ef@bx29ea (make-record-type-descriptor '&i/o bx2905@bx2900 'bx29ed '#f '#f '#())) (set! bx29f1@bx29ec '#f) (set! bx29f3@bx29eb (make-record-constructor-descriptor bx29ef@bx29ea bx2909@bx2901 bx29f1@bx29ec)) (set! bx29f6@p? (record-predicate bx29ef@bx29ea)) (set! bx29f8@make-i/o-error (record-constructor bx29f3@bx29eb)) (set! bx29fa@i/o-error? (condition-predicate bx29ef@bx29ea)) (set! bx29fc@&i/o-rtd bx29ef@bx29ea) (set! bx29fe@&i/o-rcd bx29f3@bx29eb) (set! bx2a04@bx29ff (make-record-type-descriptor '&i/o-read bx29ef@bx29ea 'bx2a02 '#f '#f '#())) (set! bx2a06@bx2a01 '#f) (set! bx2a08@bx2a00 (make-record-constructor-descriptor bx2a04@bx29ff bx29f3@bx29eb bx2a06@bx2a01)) (set! bx2a0b@p? (record-predicate bx2a04@bx29ff)) (set! bx2a0d@make-i/o-read-error (record-constructor bx2a08@bx2a00)) (set! bx2a0f@i/o-read-error? (condition-predicate bx2a04@bx29ff)) (set! bx2a11@&i/o-read-rtd bx2a04@bx29ff) (set! bx2a13@&i/o-read-rcd bx2a08@bx2a00) (set! bx2a19@bx2a14 (make-record-type-descriptor '&i/o-write bx29ef@bx29ea 'bx2a17 '#f '#f '#())) (set! bx2a1b@bx2a16 '#f) (set! bx2a1d@bx2a15 (make-record-constructor-descriptor bx2a19@bx2a14 bx29f3@bx29eb bx2a1b@bx2a16)) (set! bx2a20@p? (record-predicate bx2a19@bx2a14)) (set! bx2a22@make-i/o-write-error (record-constructor bx2a1d@bx2a15)) (set! bx2a24@i/o-write-error? (condition-predicate bx2a19@bx2a14)) (set! bx2a26@&i/o-write-rtd bx2a19@bx2a14) (set! bx2a28@&i/o-write-rcd bx2a1d@bx2a15) (set! bx2a30@bx2a2b (make-record-type-descriptor '&i/o-invalid-position bx29ef@bx29ea 'bx2a2e '#f '#f '#((immutable position)))) (set! bx2a32@bx2a2d '#f) (set! bx2a34@bx2a2c (make-record-constructor-descriptor bx2a30@bx2a2b bx29f3@bx29eb bx2a32@bx2a2d)) (set! bx2a37@p? (record-predicate bx2a30@bx2a2b)) (set! bx2a39@make-i/o-invalid-position-error (record-constructor bx2a34@bx2a2c)) (set! bx2a3b@bx2a2a (record-accessor bx2a30@bx2a2b '0)) (set! bx2a3d@i/o-invalid-position-error? (condition-predicate bx2a30@bx2a2b)) (set! bx2a3f@i/o-error-position (condition-accessor bx2a30@bx2a2b bx2a3b@bx2a2a)) (set! bx2a41@&i/o-invalid-position-rtd bx2a30@bx2a2b) (set! bx2a43@&i/o-invalid-position-rcd bx2a34@bx2a2c) (set! bx2a4b@bx2a46 (make-record-type-descriptor '&i/o-filename bx29ef@bx29ea 'bx2a49 '#f '#f '#((immutable filename)))) (set! bx2a4d@bx2a48 '#f) (set! bx2a4f@bx2a47 (make-record-constructor-descriptor bx2a4b@bx2a46 bx29f3@bx29eb bx2a4d@bx2a48)) (set! bx2a52@p? (record-predicate bx2a4b@bx2a46)) (set! bx2a54@make-i/o-filename-error (record-constructor bx2a4f@bx2a47)) (set! bx2a56@bx2a45 (record-accessor bx2a4b@bx2a46 '0)) (set! bx2a58@i/o-filename-error? (condition-predicate bx2a4b@bx2a46)) (set! bx2a5a@i/o-error-filename (condition-accessor bx2a4b@bx2a46 bx2a56@bx2a45)) (set! bx2a5c@&i/o-filename-rtd bx2a4b@bx2a46) (set! bx2a5e@&i/o-filename-rcd bx2a4f@bx2a47) (set! bx2a64@bx2a5f (make-record-type-descriptor '&i/o-file-protection bx2a4b@bx2a46 'bx2a62 '#f '#f '#())) (set! bx2a66@bx2a61 '#f) (set! bx2a68@bx2a60 (make-record-constructor-descriptor bx2a64@bx2a5f bx2a4f@bx2a47 bx2a66@bx2a61)) (set! bx2a6b@p? (record-predicate bx2a64@bx2a5f)) (set! bx2a6d@make-i/o-file-protection-error (record-constructor bx2a68@bx2a60)) (set! bx2a6f@i/o-file-protection-error? (condition-predicate bx2a64@bx2a5f)) (set! bx2a71@&i/o-file-protection-rtd bx2a64@bx2a5f) (set! bx2a73@&i/o-file-protection-rcd bx2a68@bx2a60) (set! bx2a79@bx2a74 (make-record-type-descriptor '&i/o-file-is-read-only bx2a64@bx2a5f 'bx2a77 '#f '#f '#())) (set! bx2a7b@bx2a76 '#f) (set! bx2a7d@bx2a75 (make-record-constructor-descriptor bx2a79@bx2a74 bx2a68@bx2a60 bx2a7b@bx2a76)) (set! bx2a80@p? (record-predicate bx2a79@bx2a74)) (set! bx2a82@make-i/o-file-is-read-only-error (record-constructor bx2a7d@bx2a75)) (set! bx2a84@i/o-file-is-read-only-error? (condition-predicate bx2a79@bx2a74)) (set! bx2a86@&i/o-file-is-read-only-rtd bx2a79@bx2a74) (set! bx2a88@&i/o-file-is-read-only-rcd bx2a7d@bx2a75) (set! bx2a8e@bx2a89 (make-record-type-descriptor '&i/o-file-already-exists bx2a4b@bx2a46 'bx2a8c '#f '#f '#())) (set! bx2a90@bx2a8b '#f) (set! bx2a92@bx2a8a (make-record-constructor-descriptor bx2a8e@bx2a89 bx2a4f@bx2a47 bx2a90@bx2a8b)) (set! bx2a95@p? (record-predicate bx2a8e@bx2a89)) (set! bx2a97@make-i/o-file-already-exists-error (record-constructor bx2a92@bx2a8a)) (set! bx2a99@i/o-file-already-exists-error? (condition-predicate bx2a8e@bx2a89)) (set! bx2a9b@&i/o-file-already-exists-rtd bx2a8e@bx2a89) (set! bx2a9d@&i/o-file-already-exists-rcd bx2a92@bx2a8a) (set! bx2aa3@bx2a9e (make-record-type-descriptor '&i/o-file-does-not-exist bx2a4b@bx2a46 'bx2aa1 '#f '#f '#())) (set! bx2aa5@bx2aa0 '#f) (set! bx2aa7@bx2a9f (make-record-constructor-descriptor bx2aa3@bx2a9e bx2a4f@bx2a47 bx2aa5@bx2aa0)) (set! bx2aaa@p? (record-predicate bx2aa3@bx2a9e)) (set! bx2aac@make-i/o-file-does-not-exist-error (record-constructor bx2aa7@bx2a9f)) (set! bx2aae@i/o-file-does-not-exist-error? (condition-predicate bx2aa3@bx2a9e)) (set! bx2ab0@&i/o-file-does-not-exist-rtd bx2aa3@bx2a9e) (set! bx2ab2@&i/o-file-does-not-exist-rcd bx2aa7@bx2a9f) (set! bx2aba@bx2ab5 (make-record-type-descriptor '&i/o-port bx29ef@bx29ea 'bx2ab8 '#f '#f '#((immutable port)))) (set! bx2abc@bx2ab7 '#f) (set! bx2abe@bx2ab6 (make-record-constructor-descriptor bx2aba@bx2ab5 bx29f3@bx29eb bx2abc@bx2ab7)) (set! bx2ac1@p? (record-predicate bx2aba@bx2ab5)) (set! bx2ac3@make-i/o-port-error (record-constructor bx2abe@bx2ab6)) (set! bx2ac5@bx2ab4 (record-accessor bx2aba@bx2ab5 '0)) (set! bx2ac7@i/o-port-error? (condition-predicate bx2aba@bx2ab5)) (set! bx2ac9@i/o-error-port (condition-accessor bx2aba@bx2ab5 bx2ac5@bx2ab4)) (set! bx2acb@&i/o-port-rtd bx2aba@bx2ab5) (set! bx2acd@&i/o-port-rcd bx2abe@bx2ab6) (set! bx2ad3@bx2ace (make-record-type-descriptor '&i/o-decoding bx2aba@bx2ab5 'bx2ad1 '#f '#f '#())) (set! bx2ad5@bx2ad0 '#f) (set! bx2ad7@bx2acf (make-record-constructor-descriptor bx2ad3@bx2ace bx2abe@bx2ab6 bx2ad5@bx2ad0)) (set! bx2ada@p? (record-predicate bx2ad3@bx2ace)) (set! bx2adc@make-i/o-decoding-error (record-constructor bx2ad7@bx2acf)) (set! bx2ade@i/o-decoding-error? (condition-predicate bx2ad3@bx2ace)) (set! bx2ae0@&i/o-decoding-rtd bx2ad3@bx2ace) (set! bx2ae2@&i/o-decoding-rcd bx2ad7@bx2acf) (set! bx2aea@bx2ae5 (make-record-type-descriptor '&i/o-encoding bx2aba@bx2ab5 'bx2ae8 '#f '#f '#((immutable char)))) (set! bx2aec@bx2ae7 '#f) (set! bx2aee@bx2ae6 (make-record-constructor-descriptor bx2aea@bx2ae5 bx2abe@bx2ab6 bx2aec@bx2ae7)) (set! bx2af1@p? (record-predicate bx2aea@bx2ae5)) (set! bx2af3@make-i/o-encoding-error (record-constructor bx2aee@bx2ae6)) (set! bx2af5@bx2ae4 (record-accessor bx2aea@bx2ae5 '0)) (set! bx2af7@i/o-encoding-error? (condition-predicate bx2aea@bx2ae5)) (set! bx2af9@i/o-encoding-error-char (condition-accessor bx2aea@bx2ae5 bx2af5@bx2ae4)) (set! bx2afb@&i/o-encoding-rtd bx2aea@bx2ae5) (set! bx2afd@&i/o-encoding-rcd bx2aee@bx2ae6) (set! bx2b03@bx2afe (make-record-type-descriptor '&no-infinities bx298f@bx298a 'bx2b01 '#f '#f '#())) (set! bx2b05@bx2b00 '#f) (set! bx2b07@bx2aff (make-record-constructor-descriptor bx2b03@bx2afe bx2993@bx298b bx2b05@bx2b00)) (set! bx2b0a@p? (record-predicate bx2b03@bx2afe)) (set! bx2b0c@make-no-infinities-violation (record-constructor bx2b07@bx2aff)) (set! bx2b0e@no-infinities-violation? (condition-predicate bx2b03@bx2afe)) (set! bx2b10@&no-infinities-rtd bx2b03@bx2afe) (set! bx2b12@&no-infinities-rcd bx2b07@bx2aff) (set! bx2b18@bx2b13 (make-record-type-descriptor '&no-nans bx298f@bx298a 'bx2b16 '#f '#f '#())) (set! bx2b1a@bx2b15 '#f) (set! bx2b1c@bx2b14 (make-record-constructor-descriptor bx2b18@bx2b13 bx2993@bx298b bx2b1a@bx2b15)) (set! bx2b1f@p? (record-predicate bx2b18@bx2b13)) (set! bx2b21@make-no-nans-violation (record-constructor bx2b1c@bx2b14)) (set! bx2b23@no-nans-violation? (condition-predicate bx2b18@bx2b13)) (set! bx2b25@&no-nans-rtd bx2b18@bx2b13) (set! bx2b27@&no-nans-rcd bx2b1c@bx2b14) (begin (set! bx2c18@bx2b27@&no-nans-rcd bx2b27@&no-nans-rcd) (set! bx2c17@bx2b25@&no-nans-rtd bx2b25@&no-nans-rtd) (set! bx2c16@bx2b23@no-nans-violation? bx2b23@no-nans-violation?) (set! bx2c15@bx2b21@make-no-nans-violation bx2b21@make-no-nans-violation) (set! bx2c14@bx2b1f@p? bx2b1f@p?) (set! bx2c13@bx2b1c@bx2b14 bx2b1c@bx2b14) (set! bx2c12@bx2b1a@bx2b15 bx2b1a@bx2b15) (set! bx2c11@bx2b18@bx2b13 bx2b18@bx2b13) (set! bx2c10@bx2b12@&no-infinities-rcd bx2b12@&no-infinities-rcd) (set! bx2c0f@bx2b10@&no-infinities-rtd bx2b10@&no-infinities-rtd) (set! bx2c0e@bx2b0e@no-infinities-violation? bx2b0e@no-infinities-violation?) (set! bx2c0d@bx2b0c@make-no-infinities-violation bx2b0c@make-no-infinities-violation) (set! bx2c0c@bx2b0a@p? bx2b0a@p?) (set! bx2c0b@bx2b07@bx2aff bx2b07@bx2aff) (set! bx2c0a@bx2b05@bx2b00 bx2b05@bx2b00) (set! bx2c09@bx2b03@bx2afe bx2b03@bx2afe) (set! bx2c08@bx2afd@&i/o-encoding-rcd bx2afd@&i/o-encoding-rcd) (set! bx2c07@bx2afb@&i/o-encoding-rtd bx2afb@&i/o-encoding-rtd) (set! bx2c06@bx2af9@i/o-encoding-error-char bx2af9@i/o-encoding-error-char) (set! bx2c05@bx2af7@i/o-encoding-error? bx2af7@i/o-encoding-error?) (set! bx2c04@bx2af5@bx2ae4 bx2af5@bx2ae4) (set! bx2c03@bx2af3@make-i/o-encoding-error bx2af3@make-i/o-encoding-error) (set! bx2c02@bx2af1@p? bx2af1@p?) (set! bx2c01@bx2aee@bx2ae6 bx2aee@bx2ae6) (set! bx2c00@bx2aec@bx2ae7 bx2aec@bx2ae7) (set! bx2bff@bx2aea@bx2ae5 bx2aea@bx2ae5) (set! bx2bfe@bx2ae2@&i/o-decoding-rcd bx2ae2@&i/o-decoding-rcd) (set! bx2bfd@bx2ae0@&i/o-decoding-rtd bx2ae0@&i/o-decoding-rtd) (set! bx2bfc@bx2ade@i/o-decoding-error? bx2ade@i/o-decoding-error?) (set! bx2bfb@bx2adc@make-i/o-decoding-error bx2adc@make-i/o-decoding-error) (set! bx2bfa@bx2ada@p? bx2ada@p?) (set! bx2bf9@bx2ad7@bx2acf bx2ad7@bx2acf) (set! bx2bf8@bx2ad5@bx2ad0 bx2ad5@bx2ad0) (set! bx2bf7@bx2ad3@bx2ace bx2ad3@bx2ace) (set! bx2bf6@bx2acd@&i/o-port-rcd bx2acd@&i/o-port-rcd) (set! bx2bf5@bx2acb@&i/o-port-rtd bx2acb@&i/o-port-rtd) (set! bx2bf4@bx2ac9@i/o-error-port bx2ac9@i/o-error-port) (set! bx2bf3@bx2ac7@i/o-port-error? bx2ac7@i/o-port-error?) (set! bx2bf2@bx2ac5@bx2ab4 bx2ac5@bx2ab4) (set! bx2bf1@bx2ac3@make-i/o-port-error bx2ac3@make-i/o-port-error) (set! bx2bf0@bx2ac1@p? bx2ac1@p?) (set! bx2bef@bx2abe@bx2ab6 bx2abe@bx2ab6) (set! bx2bee@bx2abc@bx2ab7 bx2abc@bx2ab7) (set! bx2bed@bx2aba@bx2ab5 bx2aba@bx2ab5) (set! bx2bec@bx2ab2@&i/o-file-does-not-exist-rcd bx2ab2@&i/o-file-does-not-exist-rcd) (set! bx2beb@bx2ab0@&i/o-file-does-not-exist-rtd bx2ab0@&i/o-file-does-not-exist-rtd) (set! bx2bea@bx2aae@i/o-file-does-not-exist-error? bx2aae@i/o-file-does-not-exist-error?) (set! bx2be9@bx2aac@make-i/o-file-does-not-exist-error bx2aac@make-i/o-file-does-not-exist-error) (set! bx2be8@bx2aaa@p? bx2aaa@p?) (set! bx2be7@bx2aa7@bx2a9f bx2aa7@bx2a9f) (set! bx2be6@bx2aa5@bx2aa0 bx2aa5@bx2aa0) (set! bx2be5@bx2aa3@bx2a9e bx2aa3@bx2a9e) (set! bx2be4@bx2a9d@&i/o-file-already-exists-rcd bx2a9d@&i/o-file-already-exists-rcd) (set! bx2be3@bx2a9b@&i/o-file-already-exists-rtd bx2a9b@&i/o-file-already-exists-rtd) (set! bx2be2@bx2a99@i/o-file-already-exists-error? bx2a99@i/o-file-already-exists-error?) (set! bx2be1@bx2a97@make-i/o-file-already-exists-error bx2a97@make-i/o-file-already-exists-error) (set! bx2be0@bx2a95@p? bx2a95@p?) (set! bx2bdf@bx2a92@bx2a8a bx2a92@bx2a8a) (set! bx2bde@bx2a90@bx2a8b bx2a90@bx2a8b) (set! bx2bdd@bx2a8e@bx2a89 bx2a8e@bx2a89) (set! bx2bdc@bx2a88@&i/o-file-is-read-only-rcd bx2a88@&i/o-file-is-read-only-rcd) (set! bx2bdb@bx2a86@&i/o-file-is-read-only-rtd bx2a86@&i/o-file-is-read-only-rtd) (set! bx2bda@bx2a84@i/o-file-is-read-only-error? bx2a84@i/o-file-is-read-only-error?) (set! bx2bd9@bx2a82@make-i/o-file-is-read-only-error bx2a82@make-i/o-file-is-read-only-error) (set! bx2bd8@bx2a80@p? bx2a80@p?) (set! bx2bd7@bx2a7d@bx2a75 bx2a7d@bx2a75) (set! bx2bd6@bx2a7b@bx2a76 bx2a7b@bx2a76) (set! bx2bd5@bx2a79@bx2a74 bx2a79@bx2a74) (set! bx2bd4@bx2a73@&i/o-file-protection-rcd bx2a73@&i/o-file-protection-rcd) (set! bx2bd3@bx2a71@&i/o-file-protection-rtd bx2a71@&i/o-file-protection-rtd) (set! bx2bd2@bx2a6f@i/o-file-protection-error? bx2a6f@i/o-file-protection-error?) (set! bx2bd1@bx2a6d@make-i/o-file-protection-error bx2a6d@make-i/o-file-protection-error) (set! bx2bd0@bx2a6b@p? bx2a6b@p?) (set! bx2bcf@bx2a68@bx2a60 bx2a68@bx2a60) (set! bx2bce@bx2a66@bx2a61 bx2a66@bx2a61) (set! bx2bcd@bx2a64@bx2a5f bx2a64@bx2a5f) (set! bx2bcc@bx2a5e@&i/o-filename-rcd bx2a5e@&i/o-filename-rcd) (set! bx2bcb@bx2a5c@&i/o-filename-rtd bx2a5c@&i/o-filename-rtd) (set! bx2bca@bx2a5a@i/o-error-filename bx2a5a@i/o-error-filename) (set! bx2bc9@bx2a58@i/o-filename-error? bx2a58@i/o-filename-error?) (set! bx2bc8@bx2a56@bx2a45 bx2a56@bx2a45) (set! bx2bc7@bx2a54@make-i/o-filename-error bx2a54@make-i/o-filename-error) (set! bx2bc6@bx2a52@p? bx2a52@p?) (set! bx2bc5@bx2a4f@bx2a47 bx2a4f@bx2a47) (set! bx2bc4@bx2a4d@bx2a48 bx2a4d@bx2a48) (set! bx2bc3@bx2a4b@bx2a46 bx2a4b@bx2a46) (set! bx2bc2@bx2a43@&i/o-invalid-position-rcd bx2a43@&i/o-invalid-position-rcd) (set! bx2bc1@bx2a41@&i/o-invalid-position-rtd bx2a41@&i/o-invalid-position-rtd) (set! bx2bc0@bx2a3f@i/o-error-position bx2a3f@i/o-error-position) (set! bx2bbf@bx2a3d@i/o-invalid-position-error? bx2a3d@i/o-invalid-position-error?) (set! bx2bbe@bx2a3b@bx2a2a bx2a3b@bx2a2a) (set! bx2bbd@bx2a39@make-i/o-invalid-position-error bx2a39@make-i/o-invalid-position-error) (set! bx2bbc@bx2a37@p? bx2a37@p?) (set! bx2bbb@bx2a34@bx2a2c bx2a34@bx2a2c) (set! bx2bba@bx2a32@bx2a2d bx2a32@bx2a2d) (set! bx2bb9@bx2a30@bx2a2b bx2a30@bx2a2b) (set! bx2bb8@bx2a28@&i/o-write-rcd bx2a28@&i/o-write-rcd) (set! bx2bb7@bx2a26@&i/o-write-rtd bx2a26@&i/o-write-rtd) (set! bx2bb6@bx2a24@i/o-write-error? bx2a24@i/o-write-error?) (set! bx2bb5@bx2a22@make-i/o-write-error bx2a22@make-i/o-write-error) (set! bx2bb4@bx2a20@p? bx2a20@p?) (set! bx2bb3@bx2a1d@bx2a15 bx2a1d@bx2a15) (set! bx2bb2@bx2a1b@bx2a16 bx2a1b@bx2a16) (set! bx2bb1@bx2a19@bx2a14 bx2a19@bx2a14) (set! bx2bb0@bx2a13@&i/o-read-rcd bx2a13@&i/o-read-rcd) (set! bx2baf@bx2a11@&i/o-read-rtd bx2a11@&i/o-read-rtd) (set! bx2bae@bx2a0f@i/o-read-error? bx2a0f@i/o-read-error?) (set! bx2bad@bx2a0d@make-i/o-read-error bx2a0d@make-i/o-read-error) (set! bx2bac@bx2a0b@p? bx2a0b@p?) (set! bx2bab@bx2a08@bx2a00 bx2a08@bx2a00) (set! bx2baa@bx2a06@bx2a01 bx2a06@bx2a01) (set! bx2ba9@bx2a04@bx29ff bx2a04@bx29ff) (set! bx2ba8@bx29fe@&i/o-rcd bx29fe@&i/o-rcd) (set! bx2ba7@bx29fc@&i/o-rtd bx29fc@&i/o-rtd) (set! bx2ba6@bx29fa@i/o-error? bx29fa@i/o-error?) (set! bx2ba5@bx29f8@make-i/o-error bx29f8@make-i/o-error) (set! bx2ba4@bx29f6@p? bx29f6@p?) (set! bx2ba3@bx29f3@bx29eb bx29f3@bx29eb) (set! bx2ba2@bx29f1@bx29ec bx29f1@bx29ec) (set! bx2ba1@bx29ef@bx29ea bx29ef@bx29ea) (set! bx2ba0@bx29e9@&undefined-rcd bx29e9@&undefined-rcd) (set! bx2b9f@bx29e7@&undefined-rtd bx29e7@&undefined-rtd) (set! bx2b9e@bx29e5@undefined-violation? bx29e5@undefined-violation?) (set! bx2b9d@bx29e3@make-undefined-violation bx29e3@make-undefined-violation) (set! bx2b9c@bx29e1@p? bx29e1@p?) (set! bx2b9b@bx29de@bx29d6 bx29de@bx29d6) (set! bx2b9a@bx29dc@bx29d7 bx29dc@bx29d7) (set! bx2b99@bx29da@bx29d5 bx29da@bx29d5) (set! bx2b98@bx29d4@&syntax-rcd bx29d4@&syntax-rcd) (set! bx2b97@bx29d2@&syntax-rtd bx29d2@&syntax-rtd) (set! bx2b96@bx29d0@syntax-violation-subform bx29d0@syntax-violation-subform) (set! bx2b95@bx29ce@syntax-violation-form bx29ce@syntax-violation-form) (set! bx2b94@bx29cc@syntax-violation? bx29cc@syntax-violation?) (set! bx2b93@bx29ca@bx29b7 bx29ca@bx29b7) (set! bx2b92@bx29c8@bx29b5 bx29c8@bx29b5) (set! bx2b91@bx29c6@make-syntax-violation bx29c6@make-syntax-violation) (set! bx2b90@bx29c4@p? bx29c4@p?) (set! bx2b8f@bx29c1@bx29b9 bx29c1@bx29b9) (set! bx2b8e@bx29bf@bx29ba bx29bf@bx29ba) (set! bx2b8d@bx29bd@bx29b8 bx29bd@bx29b8) (set! bx2b8c@bx29b3@&lexical-rcd bx29b3@&lexical-rcd) (set! bx2b8b@bx29b1@&lexical-rtd bx29b1@&lexical-rtd) (set! bx2b8a@bx29af@lexical-violation? bx29af@lexical-violation?) (set! bx2b89@bx29ad@make-lexical-violation bx29ad@make-lexical-violation) (set! bx2b88@bx29ab@p? bx29ab@p?) (set! bx2b87@bx29a8@bx29a0 bx29a8@bx29a0) (set! bx2b86@bx29a6@bx29a1 bx29a6@bx29a1) (set! bx2b85@bx29a4@bx299f bx29a4@bx299f) (set! bx2b84@bx299e@&implementation-restriction-rcd bx299e@&implementation-restriction-rcd) (set! bx2b83@bx299c@&implementation-restriction-rtd bx299c@&implementation-restriction-rtd) (set! bx2b82@bx299a@implementation-restriction-violation? bx299a@implementation-restriction-violation?) (set! bx2b81@bx2998@make-implementation-restriction-violation bx2998@make-implementation-restriction-violation) (set! bx2b80@bx2996@p? bx2996@p?) (set! bx2b7f@bx2993@bx298b bx2993@bx298b) (set! bx2b7e@bx2991@bx298c bx2991@bx298c) (set! bx2b7d@bx298f@bx298a bx298f@bx298a) (set! bx2b7c@bx2989@&non-continuable-rcd bx2989@&non-continuable-rcd) (set! bx2b7b@bx2987@&non-continuable-rtd bx2987@&non-continuable-rtd) (set! bx2b7a@bx2985@non-continuable-violation? bx2985@non-continuable-violation?) (set! bx2b79@bx2983@make-non-continuable-violation bx2983@make-non-continuable-violation) (set! bx2b78@bx2981@p? bx2981@p?) (set! bx2b77@bx297e@bx2976 bx297e@bx2976) (set! bx2b76@bx297c@bx2977 bx297c@bx2977) (set! bx2b75@bx297a@bx2975 bx297a@bx2975) (set! bx2b74@bx2974@&who-rcd bx2974@&who-rcd) (set! bx2b73@bx2972@&who-rtd bx2972@&who-rtd) (set! bx2b72@bx2970@condition-who bx2970@condition-who) (set! bx2b71@bx296e@who-condition? bx296e@who-condition?) (set! bx2b70@bx296c@bx295b bx296c@bx295b) (set! bx2b6f@bx296a@make-who-condition bx296a@make-who-condition) (set! bx2b6e@bx2968@p? bx2968@p?) (set! bx2b6d@bx2965@bx295d bx2965@bx295d) (set! bx2b6c@bx2963@bx295e bx2963@bx295e) (set! bx2b6b@bx2961@bx295c bx2961@bx295c) (set! bx2b6a@bx2959@&irritants-rcd bx2959@&irritants-rcd) (set! bx2b69@bx2957@&irritants-rtd bx2957@&irritants-rtd) (set! bx2b68@bx2955@condition-irritants bx2955@condition-irritants) (set! bx2b67@bx2953@irritants-condition? bx2953@irritants-condition?) (set! bx2b66@bx2951@bx2940 bx2951@bx2940) (set! bx2b65@bx294f@make-irritants-condition bx294f@make-irritants-condition) (set! bx2b64@bx294d@p? bx294d@p?) (set! bx2b63@bx294a@bx2942 bx294a@bx2942) (set! bx2b62@bx2948@bx2943 bx2948@bx2943) (set! bx2b61@bx2946@bx2941 bx2946@bx2941) (set! bx2b60@bx293e@&assertion-rcd bx293e@&assertion-rcd) (set! bx2b5f@bx293c@&assertion-rtd bx293c@&assertion-rtd) (set! bx2b5e@bx293a@assertion-violation? bx293a@assertion-violation?) (set! bx2b5d@bx2938@make-assertion-violation bx2938@make-assertion-violation) (set! bx2b5c@bx2936@p? bx2936@p?) (set! bx2b5b@bx2933@bx292b bx2933@bx292b) (set! bx2b5a@bx2931@bx292c bx2931@bx292c) (set! bx2b59@bx292f@bx292a bx292f@bx292a) (set! bx2b58@bx2929@&violation-rcd bx2929@&violation-rcd) (set! bx2b57@bx2927@&violation-rtd bx2927@&violation-rtd) (set! bx2b56@bx2925@violation? bx2925@violation?) (set! bx2b55@bx2923@make-violation bx2923@make-violation) (set! bx2b54@bx2921@p? bx2921@p?) (set! bx2b53@bx291e@bx2916 bx291e@bx2916) (set! bx2b52@bx291c@bx2917 bx291c@bx2917) (set! bx2b51@bx291a@bx2915 bx291a@bx2915) (set! bx2b50@bx2914@&error-rcd bx2914@&error-rcd) (set! bx2b4f@bx2912@&error-rtd bx2912@&error-rtd) (set! bx2b4e@bx2910@error? bx2910@error?) (set! bx2b4d@bx290e@make-error bx290e@make-error) (set! bx2b4c@bx290c@p? bx290c@p?) (set! bx2b4b@bx2909@bx2901 bx2909@bx2901) (set! bx2b4a@bx2907@bx2902 bx2907@bx2902) (set! bx2b49@bx2905@bx2900 bx2905@bx2900) (set! bx2b48@bx28ff@&serious-rcd bx28ff@&serious-rcd) (set! bx2b47@bx28fd@&serious-rtd bx28fd@&serious-rtd) (set! bx2b46@bx28fb@serious-condition? bx28fb@serious-condition?) (set! bx2b45@bx28f9@make-serious-condition bx28f9@make-serious-condition) (set! bx2b44@bx28f7@p? bx28f7@p?) (set! bx2b43@bx28f4@bx28ec bx28f4@bx28ec) (set! bx2b42@bx28f2@bx28ed bx28f2@bx28ed) (set! bx2b41@bx28f0@bx28eb bx28f0@bx28eb) (set! bx2b40@bx28ea@&warning-rcd bx28ea@&warning-rcd) (set! bx2b3f@bx28e8@&warning-rtd bx28e8@&warning-rtd) (set! bx2b3e@bx28e6@warning? bx28e6@warning?) (set! bx2b3d@bx28e4@make-warning bx28e4@make-warning) (set! bx2b3c@bx28e2@p? bx28e2@p?) (set! bx2b3b@bx28df@bx28d7 bx28df@bx28d7) (set! bx2b3a@bx28dd@bx28d8 bx28dd@bx28d8) (set! bx2b39@bx28db@bx28d6 bx28db@bx28d6) (set! bx2b38@bx28d5@&message-rcd bx28d5@&message-rcd) (set! bx2b37@bx28d3@&message-rtd bx28d3@&message-rtd) (set! bx2b36@bx28d1@condition-message bx28d1@condition-message) (set! bx2b35@bx28cf@message-condition? bx28cf@message-condition?) (set! bx2b34@bx28cd@bx28bc bx28cd@bx28bc) (set! bx2b33@bx28cb@make-message-condition bx28cb@make-message-condition) (set! bx2b32@bx28c9@p? bx28c9@p?) (set! bx2b31@bx28c6@bx28be bx28c6@bx28be) (set! bx2b30@bx28c4@bx28bf bx28c4@bx28bf) (set! bx2b2f@bx28c2@bx28bd bx28c2@bx28bd) (set! bx2b2e@bx2876@&condition-rcd bx2876@&condition-rcd) (set! bx2b2d@bx2874@&condition-rtd bx2874@&condition-rtd) (set! bx2b2c@bx2872@make-&condition bx2872@make-&condition) (set! bx2b2b@bx2870@&condition? bx2870@&condition?) (set! bx2b2a@bx286d@bx2865 bx286d@bx2865) (set! bx2b29@bx286b@bx2866 bx286b@bx2866) (set! bx2b28@bx2869@bx2864 bx2869@bx2864)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (bx70b@bx6c0@current-primitive-locations (lambda (bx30f0@x) ((lambda (bx30f2@t) (if bx30f2@t (cdr bx30f2@t) '#f)) (assq bx30f0@x '((&no-nans-rcd . bx2c18@bx2b27@&no-nans-rcd) (&no-nans-rtd . bx2c17@bx2b25@&no-nans-rtd) (&no-infinities-rcd . bx2c10@bx2b12@&no-infinities-rcd) (&no-infinities-rtd . bx2c0f@bx2b10@&no-infinities-rtd) (&i/o-encoding-rcd . bx2c08@bx2afd@&i/o-encoding-rcd) (&i/o-encoding-rtd . bx2c07@bx2afb@&i/o-encoding-rtd) (&i/o-decoding-rcd . bx2bfe@bx2ae2@&i/o-decoding-rcd) (&i/o-decoding-rtd . bx2bfd@bx2ae0@&i/o-decoding-rtd) (&i/o-port-rcd . bx2bf6@bx2acd@&i/o-port-rcd) (&i/o-port-rtd . bx2bf5@bx2acb@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . bx2bec@bx2ab2@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . bx2beb@bx2ab0@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . bx2be4@bx2a9d@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . bx2be3@bx2a9b@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . bx2bdc@bx2a88@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . bx2bdb@bx2a86@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . bx2bd4@bx2a73@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . bx2bd3@bx2a71@&i/o-file-protection-rtd) (&i/o-filename-rcd . bx2bcc@bx2a5e@&i/o-filename-rcd) (&i/o-filename-rtd . bx2bcb@bx2a5c@&i/o-filename-rtd) (&i/o-invalid-position-rcd . bx2bc2@bx2a43@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . bx2bc1@bx2a41@&i/o-invalid-position-rtd) (&i/o-write-rcd . bx2bb8@bx2a28@&i/o-write-rcd) (&i/o-write-rtd . bx2bb7@bx2a26@&i/o-write-rtd) (&i/o-read-rcd . bx2bb0@bx2a13@&i/o-read-rcd) (&i/o-read-rtd . bx2baf@bx2a11@&i/o-read-rtd) (&i/o-rcd . bx2ba8@bx29fe@&i/o-rcd) (&i/o-rtd . bx2ba7@bx29fc@&i/o-rtd) (&undefined-rcd . bx2ba0@bx29e9@&undefined-rcd) (&undefined-rtd . bx2b9f@bx29e7@&undefined-rtd) (&syntax-rcd . bx2b98@bx29d4@&syntax-rcd) (&syntax-rtd . bx2b97@bx29d2@&syntax-rtd) (&lexical-rcd . bx2b8c@bx29b3@&lexical-rcd) (&lexical-rtd . bx2b8b@bx29b1@&lexical-rtd) (&implementation-restriction-rcd . bx2b84@bx299e@&implementation-restriction-rcd) (&implementation-restriction-rtd . bx2b83@bx299c@&implementation-restriction-rtd) (&non-continuable-rcd . bx2b7c@bx2989@&non-continuable-rcd) (&non-continuable-rtd . bx2b7b@bx2987@&non-continuable-rtd) (&who-rcd . bx2b74@bx2974@&who-rcd) (&who-rtd . bx2b73@bx2972@&who-rtd) (&irritants-rcd . bx2b6a@bx2959@&irritants-rcd) (&irritants-rtd . bx2b69@bx2957@&irritants-rtd) (&assertion-rcd . bx2b60@bx293e@&assertion-rcd) (&assertion-rtd . bx2b5f@bx293c@&assertion-rtd) (&violation-rcd . bx2b58@bx2929@&violation-rcd) (&violation-rtd . bx2b57@bx2927@&violation-rtd) (&error-rcd . bx2b50@bx2914@&error-rcd) (&error-rtd . bx2b4f@bx2912@&error-rtd) (&serious-rcd . bx2b48@bx28ff@&serious-rcd) (&serious-rtd . bx2b47@bx28fd@&serious-rtd) (&warning-rcd . bx2b40@bx28ea@&warning-rcd) (&warning-rtd . bx2b3f@bx28e8@&warning-rtd) (&message-rcd . bx2b38@bx28d5@&message-rcd) (&message-rtd . bx2b37@bx28d3@&message-rtd) (&condition-rcd . bx2b2e@bx2876@&condition-rcd) (&condition-rtd . bx2b2d@bx2874@&condition-rtd) (syntax-error . bx2851@bxe3a@syntax-error) (syntax-dispatch . bx27ef@bxd5e@syntax-dispatch) (load . bx2d9d@bx2c34@load) (interaction-environment . bx2859@bxe4a@interaction-environment) (library-path . bx972@bx7ae@library-path) (make-parameter . bx6b8@bx597@make-parameter) (make-variable-transformer . bx27ad@bxb8b@make-variable-transformer) (identifier? . bx2854@bxe40@identifier?) (generate-temporaries . bx284a@bxe2c@generate-temporaries) (free-identifier=? . bx284b@bxe2e@free-identifier=?) (syntax->datum . bx2856@bxe44@syntax->datum) (datum->syntax . bx2855@bxe42@datum->syntax) (bound-identifier=? . bx284c@bxe30@bound-identifier=?) (make-i/o-write-error . bx2bb5@bx2a22@make-i/o-write-error) (make-i/o-read-error . bx2bad@bx2a0d@make-i/o-read-error) (make-i/o-port-error . bx2bf1@bx2ac3@make-i/o-port-error) (make-i/o-invalid-position-error . bx2bbd@bx2a39@make-i/o-invalid-position-error) (make-i/o-filename-error . bx2bc7@bx2a54@make-i/o-filename-error) (make-i/o-file-protection-error . bx2bd1@bx2a6d@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . bx2bd9@bx2a82@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . bx2be9@bx2aac@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . bx2be1@bx2a97@make-i/o-file-already-exists-error) (make-i/o-error . bx2ba5@bx29f8@make-i/o-error) (make-i/o-encoding-error . bx2c03@bx2af3@make-i/o-encoding-error) (make-i/o-decoding-error . bx2bfb@bx2adc@make-i/o-decoding-error) (i/o-write-error? . bx2bb6@bx2a24@i/o-write-error?) (i/o-read-error? . bx2bae@bx2a0f@i/o-read-error?) (i/o-port-error? . bx2bf3@bx2ac7@i/o-port-error?) (i/o-invalid-position-error? . bx2bbf@bx2a3d@i/o-invalid-position-error?) (i/o-filename-error? . bx2bc9@bx2a58@i/o-filename-error?) (i/o-file-protection-error? . bx2bd2@bx2a6f@i/o-file-protection-error?) (i/o-file-is-read-only-error? . bx2bda@bx2a84@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . bx2bea@bx2aae@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . bx2be2@bx2a99@i/o-file-already-exists-error?) (i/o-error? . bx2ba6@bx29fa@i/o-error?) (i/o-error-position . bx2bc0@bx2a3f@i/o-error-position) (i/o-error-port . bx2bf4@bx2ac9@i/o-error-port) (i/o-error-filename . bx2bca@bx2a5a@i/o-error-filename) (i/o-encoding-error? . bx2c05@bx2af7@i/o-encoding-error?) (i/o-encoding-error-char . bx2c06@bx2af9@i/o-encoding-error-char) (i/o-decoding-error? . bx2bfc@bx2ade@i/o-decoding-error?) (scheme-report-environment . bx2841@bxe1a@scheme-report-environment) (null-environment . bx2840@bxe18@null-environment) (command-line . bx2d9a@bx2c2e@command-line) (eval . bx2843@bxe1e@eval) (environment . bx283f@bxe16@environment) (who-condition? . bx2b71@bx296e@who-condition?) (warning? . bx2b3e@bx28e6@warning?) (violation? . bx2b56@bx2925@violation?) (undefined-violation? . bx2b9e@bx29e5@undefined-violation?) (syntax-violation? . bx2b94@bx29cc@syntax-violation?) (syntax-violation-subform . bx2b96@bx29d0@syntax-violation-subform) (syntax-violation-form . bx2b95@bx29ce@syntax-violation-form) (syntax-violation . bx2853@bxe3e@syntax-violation) (serious-condition? . bx2b46@bx28fb@serious-condition?) (non-continuable-violation? . bx2b7a@bx2985@non-continuable-violation?) (message-condition? . bx2b35@bx28cf@message-condition?) (make-who-condition . bx2b6f@bx296a@make-who-condition) (make-warning . bx2b3d@bx28e4@make-warning) (make-violation . bx2b55@bx2923@make-violation) (make-undefined-violation . bx2b9d@bx29e3@make-undefined-violation) (make-syntax-violation . bx2b91@bx29c6@make-syntax-violation) (make-serious-condition . bx2b45@bx28f9@make-serious-condition) (make-non-continuable-violation . bx2b79@bx2983@make-non-continuable-violation) (make-message-condition . bx2b33@bx28cb@make-message-condition) (make-lexical-violation . bx2b89@bx29ad@make-lexical-violation) (make-irritants-condition . bx2b65@bx294f@make-irritants-condition) (make-implementation-restriction-violation . bx2b81@bx2998@make-implementation-restriction-violation) (make-error . bx2b4d@bx290e@make-error) (make-assertion-violation . bx2b5d@bx2938@make-assertion-violation) (lexical-violation? . bx2b8a@bx29af@lexical-violation?) (irritants-condition? . bx2b67@bx2953@irritants-condition?) (implementation-restriction-violation? . bx2b82@bx299a@implementation-restriction-violation?) (error? . bx2b4e@bx2910@error?) (condition-who . bx2b72@bx2970@condition-who) (condition-message . bx2b36@bx28d1@condition-message) (condition-irritants . bx2b68@bx2955@condition-irritants) (assertion-violation? . bx2b5e@bx293a@assertion-violation?) (no-nans-violation? . bx2c16@bx2b23@no-nans-violation?) (no-infinities-violation? . bx2c0e@bx2b0e@no-infinities-violation?) (make-no-nans-violation . bx2c15@bx2b21@make-no-nans-violation) (make-no-infinities-violation . bx2c0d@bx2b0c@make-no-infinities-violation) (assertion-error . bx2850@bxe38@assertion-error)))))) (bx982@bx7ce@install-library 'bx30cd '(mosh interaction) '() '() '() '() '((regexp? . bx30c5) (alist->eq-hash-table . bx30c1) (format . bx30be) (string-split . bx30b3) (call-process . bx30ad) (set-current-directory! . bx30a9) (expand-path . bx30a8) (current-directory . bx30a7) (%spawn . bx30a6) (%waitpid . bx30a5) (simple-struct-name . bx30a4) (simple-struct-set! . bx30a3) (simple-struct-ref . bx30a2) (make-simple-struct . bx30a1) (simple-struct? . bx30a0) (pointer-ref-c-int64 . bx309f) (pointer-ref-c-int32 . bx309e) (pointer-ref-c-int16 . bx309d) (pointer-ref-c-int8 . bx309c) (pointer-ref-c-uint64 . bx309b) (pointer-ref-c-uint32 . bx309a) (pointer-ref-c-uint16 . bx3099) (pointer-ref-c-uint8 . bx3098) (pointer-set-c-uint64! . bx3097) (pointer-set-c-uint32! . bx3096) (pointer-set-c-uint16! . bx3095) (pointer-set-c-uint8! . bx3094) (pointer-set-c-int64! . bx3093) (pointer-set-c-int32! . bx3092) (pointer-set-c-int16! . bx3091) (pointer-set-c-int8! . bx3090) (pointer-set-c-pointer! . bx308f) (pointer-set-c-double! . bx308e) (pointer-set-c-float! . bx308d) (pointer-set-c-long-long! . bx308c) (pointer-set-c-long! . bx308b) (pointer-set-c-int! . bx308a) (pointer-set-c-short! . bx3089) (pointer-set-c-char! . bx3088) (pointer-ref-c-pointer . bx3087) (pointer-ref-c-double . bx3086) (pointer-ref-c-float . bx3085) (pointer-ref-c-unsigned-long-long . bx3084) (pointer-ref-c-signed-long-long . bx3083) (pointer-ref-c-unsigned-long . bx3082) (pointer-ref-c-signed-long . bx3081) (pointer-ref-c-unsigned-int . bx3080) (pointer-ref-c-signed-int . bx307f) (pointer-ref-c-unsigned-short . bx307e) (pointer-ref-c-signed-short . bx307d) (pointer-ref-c-unsigned-char . bx307c) (pointer-ref-c-signed-char . bx307b) (pointer->integer . bx307a) (integer->pointer . bx3079) (pointer? . bx3078) (shared-errno . bx3077) (%ffi-supported? . bx3076) (%ffi-pointer->string . bx3075) (%ffi-call->string-or-zero . bx3074) (%ffi-call->double . bx3073) (%ffi-call->void* . bx3072) (%ffi-call->void . bx3071) (%ffi-call->char . bx3070) (%ffi-call->int . bx306f) (%ffi-lookup . bx306e) (%ffi-open . bx306d) (%fork . bx306c) (%pipe . bx306b) (p . bx306a) (whereis . bx304f) (register . bx304e) (vm-join! . bx304d) (vm-set-value! . bx304c) (vm? . bx304b) (main-vm? . bx304a) (vm-eval . bx3049) (vm-self . bx3048) (vm-start! . bx3047) (make-vm . bx3046) (mutex-try-lock! . bx3045) (mutex-unlock! . bx3044) (mutex-lock! . bx3043) (mutex? . bx3042) (make-mutex . bx3041) (condition-variable-notify-all! . bx3040) (condition-variable-notify! . bx303f) (condition-variable-wait! . bx303e) (make-condition-variable . bx303d) (string-upcase . bx3026) (string-titlecase . bx3025) (string-normalize-nfkd . bx3024) (string-normalize-nfkc . bx3023) (string-normalize-nfd . bx3022) (string-normalize-nfc . bx3021) (string-foldcase . bx3020) (string-downcase . bx301f) (string-ci>? . bx301e) (string-ci>=? . bx301d) (string-ci=? . bx301c) (string-ci<? . bx301b) (string-ci<=? . bx301a) (char-whitespace? . bx3019) (char-upper-case? . bx3018) (char-title-case? . bx3017) (char-numeric? . bx3016) (char-lower-case? . bx3015) (char-general-category . bx3014) (char-upcase . bx3013) (char-titlecase . bx3012) (char-foldcase . bx3011) (char-downcase . bx3010) (char-ci>? . bx300f) (char-ci>=? . bx300e) (char-ci=? . bx300d) (char-ci<? . bx300c) (char-ci<=? . bx300b) (char-alphabetic? . bx300a) (make-variable-transformer . bxb8a) (identifier? . bxe3f) (generate-temporaries . bxe2b) (free-identifier=? . bxe2d) (syntax->datum . bxe43) (datum->syntax . bxe41) (bound-identifier=? . bxe2f) (record-type-descriptor? . bx3009) (record-predicate . bx3008) (record-mutator . bx3007) (record-constructor . bx3006) (record-accessor . bx3005) (make-record-type-descriptor . bx3004) (make-record-constructor-descriptor . bx3003) (record? . bx3002) (record-type-uid . bx3001) (record-type-sealed? . bx3000) (record-type-parent . bx2fff) (record-type-opaque? . bx2ffe) (record-type-name . bx2ffd) (record-type-generative? . bx2ffc) (record-type-field-names . bx2ffb) (record-rtd . bx2ffa) (record-field-mutable? . bx2ff9) (delete-file . bx2ff8) (file-exists? . bx2ff7) (vector-sort! . bx2ff6) (vector-sort . bx2ff5) (list-sort . bx2ff4) (symbol-hash . bx2ff3) (string-ci-hash . bx2ff2) (string-hash . bx2ff1) (equal-hash . bx2ff0) (hashtable-equivalence-function . bx2fef) (make-hashtable . bx2fee) (hashtable-hash-function . bx2fed) (make-eqv-hashtable . bx2fec) (make-eq-hashtable . bx2feb) (hashtable? . bx2fea) (hashtable-update! . bx2fe9) (hashtable-size . bx2fe8) (hashtable-set! . bx2fe7) (hashtable-ref . bx2fe6) (hashtable-mutable? . bx2fe5) (hashtable-keys . bx2fe4) (hashtable-entries . bx2fe3) (hashtable-delete! . bx2fe2) (hashtable-copy . bx2fe1) (hashtable-contains? . bx2fe0) (hashtable-clear! . bx2fdf) (call-with-output-file . bx2fde) (call-with-input-file . bx2fdd) (write-char . bx2fdc) (write . bx2fdb) (with-output-to-file . bx2fda) (with-input-from-file . bx2fd9) (read-char . bx2fd8) (read . bx2fd7) (peek-char . bx2fd6) (open-output-file . bx2fd5) (open-input-file . bx2fd4) (newline . bx2fd3) (display . bx2fd2) (close-output-port . bx2fd1) (close-input-port . bx2fd0) (eof-object? . bx2fcf) (eof-object . bx2fce) (current-error-port . bx2fcd) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (utf-8-codec . bx2fc8) (utf-16-codec . bx2fc7) (transcoder-error-handling-mode . bx2fc6) (transcoder-eol-style . bx2fc5) (transcoder-codec . bx2fc4) (transcoded-port . bx2fc3) (textual-port? . bx2fc2) (string->bytevector . bx2fc1) (standard-output-port . bx2fc0) (standard-input-port . bx2fbf) (standard-error-port . bx2fbe) (set-port-position! . bx2fbd) (put-u8 . bx2fbc) (put-string . bx2fbb) (put-datum . bx2fba) (put-char . bx2fb9) (put-bytevector . bx2fb8) (port? . bx2fb7) (port-transcoder . bx2fb6) (port-position . bx2fb5) (port-has-set-port-position!? . bx2fb4) (port-has-port-position? . bx2fb3) (port-eof? . bx2fb2) (output-port-buffer-mode . bx2fb1) (open-string-output-port . bx2fb0) (open-string-input-port . bx2faf) (open-file-output-port . bx2fae) (open-file-input/output-port . bx2fad) (open-file-input-port . bx2fac) (open-bytevector-output-port . bx2fab) (open-bytevector-input-port . bx2faa) (native-transcoder . bx2fa9) (native-eol-style . bx2fa8) (make-transcoder . bx2fa7) (latin-1-codec . bx2fa6) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (make-i/o-encoding-error . bx2af2) (make-i/o-decoding-error . bx2adb) (make-custom-textual-output-port . bx2fa5) (make-custom-textual-input/output-port . bx2fa4) (make-custom-textual-input-port . bx2fa3) (make-custom-binary-output-port . bx2fa2) (make-custom-binary-input/output-port . bx2fa1) (make-custom-binary-input-port . bx2fa0) (make-bytevector . bx2f9f) (lookahead-u8 . bx2f9e) (lookahead-char . bx2f9d) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (i/o-encoding-error? . bx2af6) (i/o-encoding-error-char . bx2af8) (i/o-decoding-error? . bx2add) (get-u8 . bx2f9c) (get-string-n! . bx2f9b) (get-string-n . bx2f9a) (get-string-all . bx2f99) (get-line . bx2f98) (get-datum . bx2f97) (get-char . bx2f96) (get-bytevector-some . bx2f95) (get-bytevector-n! . bx2f94) (get-bytevector-n . bx2f93) (get-bytevector-all . bx2f92) (flush-output-port . bx2f91) (close-port . bx2f90) (exit . bx2f88) (command-line . bx2c2d) (string-fill! . bx2f87) (string-set! . bx2f86) (set-cdr! . bx2f85) (set-car! . bx2f84) (remove . bx2f83) (remv . bx2f82) (remp . bx2f81) (remq . bx2f80) (partition . bx2f7f) (memv . bx2f7e) (memq . bx2f7d) (memp . bx2f7c) (member . bx2f7b) (exists . bx2f7a) (for-all . bx2f79) (fold-right . bx2f78) (fold-left . bx2f77) (find . bx2f76) (filter . bx2f75) (cons* . bx2f74) (assv . bx2f73) (assq . bx2f72) (assp . bx2f71) (assoc . bx2f70) (call-with-string-output-port . bx2f6f) (call-with-port . bx2f6e) (call-with-bytevector-output-port . bx2f6d) (bytevector->string . bx2f6c) (buffer-mode? . bx2f6b) (binary-port? . bx2f6a) (with-exception-handler . bx2f69) (raise-continuable . bx2f68) (raise . bx2f67) (eval . bxe1d) (environment . bxe15) (make-enumeration . bx2f66) (enum-set=? . bx2f65) (enum-set-universe . bx2f64) (enum-set-union . bx2f63) (enum-set-subset? . bx2f62) (enum-set-projection . bx2f61) (enum-set-member? . bx2f60) (enum-set-intersection . bx2f5f) (enum-set-indexer . bx2f5e) (enum-set-difference . bx2f5d) (enum-set-constructor . bx2f5c) (enum-set-complement . bx2f5b) (enum-set->list . bx2f5a) (who-condition? . bx296d) (warning? . bx28e5) (violation? . bx2924) (undefined-violation? . bx29e4) (syntax-violation? . bx29cb) (syntax-violation-subform . bx29cf) (syntax-violation-form . bx29cd) (syntax-violation . bxe3d) (simple-conditions . bx2f59) (serious-condition? . bx28fa) (non-continuable-violation? . bx2984) (message-condition? . bx28ce) (make-who-condition . bx2969) (make-warning . bx28e3) (make-violation . bx2922) (make-undefined-violation . bx29e2) (make-syntax-violation . bx29c5) (make-serious-condition . bx28f8) (make-non-continuable-violation . bx2982) (make-message-condition . bx28ca) (make-lexical-violation . bx29ac) (make-irritants-condition . bx294e) (make-implementation-restriction-violation . bx2997) (make-error . bx290d) (make-assertion-violation . bx2937) (lexical-violation? . bx29ae) (irritants-condition? . bx2952) (implementation-restriction-violation? . bx2999) (error? . bx290f) (condition-who . bx296f) (condition-predicate . bx2f58) (condition-message . bx28d0) (condition-irritants . bx2954) (condition-accessor . bx2f57) (condition . bx2f56) (assertion-violation? . bx2939) (condition? . bx2f55) (utf32->string . bx2f54) (utf16->string . bx2f53) (utf8->string . bx2f52) (uint-list->bytevector . bx2f51) (u8-list->bytevector . bx2f50) (string->utf8 . bx2f4f) (string->utf32 . bx2f4e) (string->utf16 . bx2f4d) (sint-list->bytevector . bx2f4c) (native-endianness . bx2f4b) (bytevector? . bx2f4a) (bytevector=? . bx2f49) (bytevector-uint-set! . bx2f48) (bytevector-uint-ref . bx2f47) (bytevector-u8-set! . bx2f46) (bytevector-u8-ref . bx2f45) (bytevector-u64-set! . bx2f44) (bytevector-u64-ref . bx2f43) (bytevector-u64-native-set! . bx2f42) (bytevector-u64-native-ref . bx2f41) (bytevector-u32-set! . bx2f40) (bytevector-u32-ref . bx2f3f) (bytevector-u32-native-set! . bx2f3e) (bytevector-u32-native-ref . bx2f3d) (bytevector-u16-set! . bx2f3c) (bytevector-u16-ref . bx2f3b) (bytevector-u16-native-set! . bx2f3a) (bytevector-u16-native-ref . bx2f39) (bytevector-sint-set! . bx2f38) (bytevector-sint-ref . bx2f37) (bytevector-s8-set! . bx2f36) (bytevector-s8-ref . bx2f35) (bytevector-s64-set! . bx2f34) (bytevector-s64-ref . bx2f33) (bytevector-s64-native-set! . bx2f32) (bytevector-s64-native-ref . bx2f31) (bytevector-s32-set! . bx2f30) (bytevector-s32-ref . bx2f2f) (bytevector-s32-native-set! . bx2f2e) (bytevector-s32-native-ref . bx2f2d) (bytevector-s16-set! . bx2f2c) (bytevector-s16-ref . bx2f2b) (bytevector-s16-native-set! . bx2f2a) (bytevector-s16-native-ref . bx2f29) (bytevector-length . bx2f28) (bytevector-ieee-single-ref . bx2f27) (bytevector-ieee-single-set! . bx2f26) (bytevector-ieee-single-native-set! . bx2f25) (bytevector-ieee-single-native-ref . bx2f24) (bytevector-ieee-double-set! . bx2f23) (bytevector-ieee-double-ref . bx2f22) (bytevector-ieee-double-native-set! . bx2f21) (bytevector-ieee-double-native-ref . bx2f20) (bytevector-fill! . bx2f1f) (bytevector-copy! . bx2f1e) (bytevector-copy . bx2f1d) (bytevector->uint-list . bx2f1c) (bytevector->u8-list . bx2f1b) (bytevector->sint-list . bx2f1a) (no-nans-violation? . bx2b22) (no-infinities-violation? . bx2b0d) (make-no-nans-violation . bx2b20) (make-no-infinities-violation . bx2b0b) (real->flonum . bx2f19) (flzero? . bx2f18) (fltruncate . bx2f17) (fltan . bx2f16) (flsqrt . bx2f15) (flsin . bx2f14) (flround . bx2f13) (flpositive? . bx2f12) (flonum? . bx2f11) (flodd? . bx2f10) (flnumerator . bx2f0f) (flnegative? . bx2f0e) (flnan? . bx2f0d) (flmod0 . bx2f0c) (flmod . bx2f0b) (flmin . bx2f0a) (flmax . bx2f09) (fllog . bx2f08) (flinteger? . bx2f07) (flinfinite? . bx2f06) (flfloor . bx2f05) (flfinite? . bx2f04) (flexpt . bx2f03) (flexp . bx2f02) (fleven? . bx2f01) (fldiv0-and-mod0 . bx2f00) (fldiv0 . bx2eff) (fldiv-and-mod . bx2efe) (fldiv . bx2efd) (fldenominator . bx2efc) (flcos . bx2efb) (flceiling . bx2efa) (flatan . bx2ef9) (flasin . bx2ef8) (flacos . bx2ef7) (flabs . bx2ef6) (fl>? . bx2ef5) (fl>=? . bx2ef4) (fl=? . bx2ef3) (fl<? . bx2ef2) (fl<=? . bx2ef1) (fl/ . bx2ef0) (fl- . bx2eef) (fl+ . bx2eee) (fl* . bx2eed) (fixnum->flonum . bx2eec) (fxzero? . bx2eeb) (fxxor . bx2eea) (fxrotate-bit-field . bx2ee9) (fxreverse-bit-field . bx2ee8) (fxpositive? . bx2ee7) (fxodd? . bx2ee6) (fxnot . bx2ee5) (fxnegative? . bx2ee4) (fxmod0 . bx2ee3) (fxmod . bx2ee2) (fxmin . bx2ee1) (fxmax . bx2ee0) (fxlength . bx2edf) (fxior . bx2ede) (fxif . bx2edd) (fxfirst-bit-set . bx2edc) (fxeven? . bx2edb) (fxdiv0-and-mod0 . bx2eda) (fxdiv0 . bx2ed9) (fxdiv-and-mod . bx2ed8) (fxdiv . bx2ed7) (fxcopy-bit-field . bx2ed6) (fxcopy-bit . bx2ed5) (fxbit-set? . bx2ed4) (fxbit-field . bx2ed3) (fxbit-count . bx2ed2) (fxarithmetic-shift-right . bx2ed1) (fxarithmetic-shift-left . bx2ed0) (fxarithmetic-shift . bx2ecf) (fxand . bx2ece) (fx>? . bx2ecd) (fx>=? . bx2ecc) (fx=? . bx2ecb) (fx<? . bx2eca) (fx<=? . bx2ec9) (fx-/carry . bx2ec8) (fx- . bx2ec7) (fx+/carry . bx2ec6) (fx+ . bx2ec5) (fx*/carry . bx2ec4) (fx* . bx2ec3) (greatest-fixnum . bx2ec2) (least-fixnum . bx2ec1) (fixnum-width . bx2ec0) (fixnum? . bx2ebf) (bitwise-rotate-bit-field . bx2ebe) (bitwise-reverse-bit-field . bx2ebd) (bitwise-length . bx2ebc) (bitwise-if . bx2ebb) (bitwise-first-bit-set . bx2eba) (bitwise-copy-bit-field . bx2eb9) (bitwise-copy-bit . bx2eb8) (bitwise-bit-set? . bx2eb7) (bitwise-bit-field . bx2eb6) (bitwise-bit-count . bx2eb5) (bitwise-xor . bx2eb4) (bitwise-ior . bx2eb3) (bitwise-and . bx2eb2) (bitwise-not . bx2eb1) (bitwise-arithmetic-shift-right . bx2eb0) (bitwise-arithmetic-shift-left . bx2eaf) (bitwise-arithmetic-shift . bx2eae) (zero? . bx2ead) (vector? . bx2eac) (vector-set! . bx2eab) (vector-ref . bx2eaa) (vector-map . bx2ea9) (vector-length . bx2ea8) (vector-for-each . bx2ea7) (vector-fill! . bx2ea6) (vector->list . bx2ea5) (vector . bx2ea4) (values . bx2ea3) (truncate . bx2ea2) (tan . bx2ea1) (symbol? . bx2ea0) (symbol=? . bx2e9f) (symbol->string . bx2e9e) (substring . bx2e9d) (string? . bx2e9c) (string>? . bx2e9b) (string>=? . bx2e9a) (string=? . bx2e99) (string<? . bx2e98) (string<=? . bx2e97) (string-ref . bx2e96) (string-length . bx2e95) (string-for-each . bx2e94) (string-copy . bx2e93) (string-append . bx2e92) (string->symbol . bx2e91) (string->number . bx2e90) (string->list . bx2e8f) (string . bx2e8e) (sqrt . bx2e8d) (sin . bx2e8c) (round . bx2e8b) (reverse . bx2e8a) (real? . bx2e89) (real-valued? . bx2e88) (real-part . bx2e87) (rationalize . bx2e86) (rational? . bx2e85) (rational-valued? . bx2e84) (procedure? . bx2e83) (positive? . bx2e82) (pair? . bx2e81) (odd? . bx2e80) (numerator . bx2e7f) (number? . bx2e7e) (number->string . bx2e7d) (null? . bx2e7c) (not . bx2e7b) (negative? . bx2e7a) (nan? . bx2e79) (min . bx2e78) (max . bx2e77) (map . bx2e76) (make-vector . bx2e75) (make-string . bx2e74) (make-rectangular . bx2e73) (make-polar . bx2e72) (magnitude . bx2e71) (log . bx2e70) (list? . bx2e6f) (list-tail . bx2e6e) (list-ref . bx2e6d) (list->vector . bx2e6c) (list->string . bx2e6b) (list . bx2e6a) (length . bx2e69) (lcm . bx2e68) (integer? . bx2e67) (integer-valued? . bx2e66) (integer->char . bx2e65) (infinite? . bx2e64) (inexact? . bx2e63) (inexact . bx2e62) (imag-part . bx2e61) (gcd . bx2e60) (for-each . bx2e5f) (floor . bx2e5e) (finite? . bx2e5d) (expt . bx2e5c) (exp . bx2e5b) (exact? . bx2e5a) (exact-integer-sqrt . bx2e59) (exact . bx2e58) (even? . bx2e57) (error . bx2e56) (eqv? . bx2e55) (equal? . bx2e54) (eq? . bx2e53) (dynamic-wind . bx2e52) (div0-and-mod0 . bx2e51) (mod0 . bx2e50) (div0 . bx2e4f) (div-and-mod . bx2e4e) (mod . bx2e4d) (div . bx2e4c) (denominator . bx2e4b) (cos . bx2e4a) (cons . bx2e49) (complex? . bx2e48) (char? . bx2e47) (char>? . bx2e46) (char>=? . bx2e45) (char=? . bx2e44) (char<? . bx2e43) (char<=? . bx2e42) (char->integer . bx2e41) (ceiling . bx2e40) (call-with-values . bx2e3f) (call/cc . bx2e3e) (call-with-current-continuation . bx2e3d) (cddddr . bx2e3c) (cdddar . bx2e3b) (cddadr . bx2e3a) (cddaar . bx2e39) (cdaddr . bx2e38) (cdadar . bx2e37) (cdaadr . bx2e36) (cdaaar . bx2e35) (cadddr . bx2e34) (caddar . bx2e33) (cadadr . bx2e32) (cadaar . bx2e31) (caaddr . bx2e30) (caadar . bx2e2f) (caaadr . bx2e2e) (caaaar . bx2e2d) (cdddr . bx2e2c) (cddar . bx2e2b) (cdadr . bx2e2a) (cdaar . bx2e29) (caddr . bx2e28) (cadar . bx2e27) (caadr . bx2e26) (caaar . bx2e25) (cddr . bx2e24) (cdar . bx2e23) (cadr . bx2e22) (caar . bx2e21) (cdr . bx2e20) (car . bx2e1f) (boolean? . bx2e1e) (boolean=? . bx2e1d) (atan . bx2e1c) (assertion-violation . bx2e1b) (asin . bx2e1a) (apply . bx2e19) (append . bx2e18) (angle . bx2e17) (acos . bx2e16) (abs . bx2e15) (/ . bx2e14) (* . bx2e13) (- . bx2e12) (+ . bx2e11) (>= . bx2e10) (> . bx2e0f) (= . bx2e0e) (<= . bx2e0d) (< . bx2e0c) (library . bx2e0b) (&no-nans . bx2e0a) (&no-infinities . bx2e09) (&i/o-encoding . bx2e08) (&i/o-decoding . bx2e07) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd) (&undefined . bx2dfc) (&syntax . bx2dfb) (&lexical . bx2dfa) (&implementation-restriction . bx2df9) (&non-continuable . bx2df8) (&who . bx2df7) (&irritants . bx2df6) (&assertion . bx2df5) (&violation . bx2df4) (&error . bx2df3) (&serious . bx2df2) (&warning . bx2df1) (&message . bx2df0) (&condition . bx2def) (define-condition-type . bx2dee) (define-enumeration . bx2ded) (define-record-type . bx2dec) (parent-rtd . bx2deb) (nongenerative . bx2dea) (opaque . bx2de9) (sealed . bx2de8) (protocol . bx2de7) (parent . bx2de6) (immutable . bx2de5) (mutable . bx2de4) (fields . bx2de3) (error-handling-mode . bx2de2) (file-options . bx2de1) (buffer-mode . bx2de0) (eol-style . bx2ddf) (guard . bx2dde) (unsyntax-splicing . bx2ddb) (unsyntax . bx2dda) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (_ . bx2dd7) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (assert . bx2dd3) (endianness . bx2dd2) (time . bx2dd0) (do . bx2dcf) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (let*-values . bx2dcb) (let-values . bx2dca) (identifier-syntax . bx2dc9) (with-syntax . bx2dc8) (quasisyntax . bx2dc7) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (include . bx2dc4) (record-constructor-descriptor . bx2dc2) (record-type-descriptor . bx2dc1) (case . bx2dc0) (unless . bx2dbe) (when . bx2dbd) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec* . bx2db9) (letrec . bx2db8) (case-lambda . bx2db6) (lambda . bx2db5) (syntax . bx2db4) (syntax-case . bx2db3) (quote . bx2db2) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (import . bx2dad) (begin . bx2dac) (define-syntax . bx2daa) (define . bx2da9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30ce '(psyntax null-environment-5) '() '() '() '() '((make-promise . bx2f89) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (_ . bx2dd7) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (delay . bx2dd1) (do . bx2dcf) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (case . bx2dc0) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec . bx2db8) (lambda . bx2db5) (quote . bx2db2) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (begin . bx2dac) (define-syntax . bx2daa) (define . bx2da9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30cf '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bx301e) (string-ci>=? . bx301d) (string-ci=? . bx301c) (string-ci<? . bx301b) (string-ci<=? . bx301a) (char-whitespace? . bx3019) (char-upper-case? . bx3018) (char-numeric? . bx3016) (char-lower-case? . bx3015) (char-upcase . bx3013) (char-downcase . bx3010) (char-ci>? . bx300f) (char-ci>=? . bx300e) (char-ci=? . bx300d) (char-ci<? . bx300c) (char-ci<=? . bx300b) (char-alphabetic? . bx300a) (call-with-output-file . bx2fde) (call-with-input-file . bx2fdd) (write-char . bx2fdc) (write . bx2fdb) (with-output-to-file . bx2fda) (with-input-from-file . bx2fd9) (read-char . bx2fd8) (read . bx2fd7) (peek-char . bx2fd6) (open-output-file . bx2fd5) (open-input-file . bx2fd4) (newline . bx2fd3) (display . bx2fd2) (close-output-port . bx2fd1) (close-input-port . bx2fd0) (eof-object . bx2fce) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (scheme-report-environment . bxe19) (quotient . bx2f8f) (null-environment . bxe17) (remainder . bx2f8e) (modulo . bx2f8d) (inexact->exact . bx2f8c) (force . bx2f8b) (exact->inexact . bx2f8a) (make-promise . bx2f89) (string-fill! . bx2f87) (string-set! . bx2f86) (set-cdr! . bx2f85) (set-car! . bx2f84) (memv . bx2f7e) (memq . bx2f7d) (member . bx2f7b) (assv . bx2f73) (assq . bx2f72) (assoc . bx2f70) (eval . bxe1d) (zero? . bx2ead) (vector? . bx2eac) (vector-set! . bx2eab) (vector-ref . bx2eaa) (vector-length . bx2ea8) (vector-fill! . bx2ea6) (vector->list . bx2ea5) (vector . bx2ea4) (values . bx2ea3) (truncate . bx2ea2) (tan . bx2ea1) (symbol? . bx2ea0) (symbol->string . bx2e9e) (substring . bx2e9d) (string? . bx2e9c) (string>? . bx2e9b) (string>=? . bx2e9a) (string=? . bx2e99) (string<? . bx2e98) (string<=? . bx2e97) (string-ref . bx2e96) (string-length . bx2e95) (string-copy . bx2e93) (string-append . bx2e92) (string->symbol . bx2e91) (string->number . bx2e90) (string->list . bx2e8f) (string . bx2e8e) (sqrt . bx2e8d) (sin . bx2e8c) (round . bx2e8b) (reverse . bx2e8a) (real? . bx2e89) (real-part . bx2e87) (rationalize . bx2e86) (rational? . bx2e85) (procedure? . bx2e83) (positive? . bx2e82) (pair? . bx2e81) (odd? . bx2e80) (numerator . bx2e7f) (number? . bx2e7e) (number->string . bx2e7d) (not . bx2e7b) (negative? . bx2e7a) (min . bx2e78) (max . bx2e77) (map . bx2e76) (make-vector . bx2e75) (make-string . bx2e74) (make-rectangular . bx2e73) (make-polar . bx2e72) (magnitude . bx2e71) (log . bx2e70) (list? . bx2e6f) (list-tail . bx2e6e) (list-ref . bx2e6d) (list->vector . bx2e6c) (list->string . bx2e6b) (list . bx2e6a) (length . bx2e69) (lcm . bx2e68) (integer? . bx2e67) (integer->char . bx2e65) (inexact? . bx2e63) (imag-part . bx2e61) (gcd . bx2e60) (for-each . bx2e5f) (floor . bx2e5e) (expt . bx2e5c) (exp . bx2e5b) (exact? . bx2e5a) (even? . bx2e57) (eqv? . bx2e55) (equal? . bx2e54) (eq? . bx2e53) (dynamic-wind . bx2e52) (denominator . bx2e4b) (cos . bx2e4a) (cons . bx2e49) (complex? . bx2e48) (char? . bx2e47) (char>? . bx2e46) (char>=? . bx2e45) (char=? . bx2e44) (char<? . bx2e43) (char<=? . bx2e42) (char->integer . bx2e41) (ceiling . bx2e40) (call-with-values . bx2e3f) (call-with-current-continuation . bx2e3d) (cddddr . bx2e3c) (cdddar . bx2e3b) (cddadr . bx2e3a) (cddaar . bx2e39) (cdaddr . bx2e38) (cdadar . bx2e37) (cdaadr . bx2e36) (cdaaar . bx2e35) (cadddr . bx2e34) (caddar . bx2e33) (cadadr . bx2e32) (cadaar . bx2e31) (caaddr . bx2e30) (caadar . bx2e2f) (caaadr . bx2e2e) (caaaar . bx2e2d) (cdddr . bx2e2c) (cddar . bx2e2b) (cdadr . bx2e2a) (cdaar . bx2e29) (caddr . bx2e28) (cadar . bx2e27) (caadr . bx2e26) (caaar . bx2e25) (cddr . bx2e24) (cdar . bx2e23) (cadr . bx2e22) (caar . bx2e21) (cdr . bx2e20) (car . bx2e1f) (boolean? . bx2e1e) (atan . bx2e1c) (asin . bx2e1a) (apply . bx2e19) (append . bx2e18) (angle . bx2e17) (acos . bx2e16) (abs . bx2e15) (/ . bx2e14) (* . bx2e13) (- . bx2e12) (+ . bx2e11) (>= . bx2e10) (> . bx2e0f) (= . bx2e0e) (<= . bx2e0d) (< . bx2e0c) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (delay . bx2dd1) (do . bx2dcf) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (case . bx2dc0) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec . bx2db8) (lambda . bx2db5) (quote . bx2db2) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (begin . bx2dac) (define-syntax . bx2daa) (define . bx2da9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d0 '(psyntax modules) '() '() '() '() '((module . bx2dab)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d2 '(rnrs) '(6) '() '() '() '((regexp? . bx30c5) (string-upcase . bx3026) (string-titlecase . bx3025) (string-normalize-nfkd . bx3024) (string-normalize-nfkc . bx3023) (string-normalize-nfd . bx3022) (string-normalize-nfc . bx3021) (string-foldcase . bx3020) (string-downcase . bx301f) (string-ci>? . bx301e) (string-ci>=? . bx301d) (string-ci=? . bx301c) (string-ci<? . bx301b) (string-ci<=? . bx301a) (char-whitespace? . bx3019) (char-upper-case? . bx3018) (char-title-case? . bx3017) (char-numeric? . bx3016) (char-lower-case? . bx3015) (char-general-category . bx3014) (char-upcase . bx3013) (char-titlecase . bx3012) (char-foldcase . bx3011) (char-downcase . bx3010) (char-ci>? . bx300f) (char-ci>=? . bx300e) (char-ci=? . bx300d) (char-ci<? . bx300c) (char-ci<=? . bx300b) (char-alphabetic? . bx300a) (make-variable-transformer . bxb8a) (identifier? . bxe3f) (generate-temporaries . bxe2b) (free-identifier=? . bxe2d) (syntax->datum . bxe43) (datum->syntax . bxe41) (bound-identifier=? . bxe2f) (record-type-descriptor? . bx3009) (record-predicate . bx3008) (record-mutator . bx3007) (record-constructor . bx3006) (record-accessor . bx3005) (make-record-type-descriptor . bx3004) (make-record-constructor-descriptor . bx3003) (record? . bx3002) (record-type-uid . bx3001) (record-type-sealed? . bx3000) (record-type-parent . bx2fff) (record-type-opaque? . bx2ffe) (record-type-name . bx2ffd) (record-type-generative? . bx2ffc) (record-type-field-names . bx2ffb) (record-rtd . bx2ffa) (record-field-mutable? . bx2ff9) (delete-file . bx2ff8) (file-exists? . bx2ff7) (vector-sort! . bx2ff6) (vector-sort . bx2ff5) (list-sort . bx2ff4) (symbol-hash . bx2ff3) (string-ci-hash . bx2ff2) (string-hash . bx2ff1) (equal-hash . bx2ff0) (hashtable-equivalence-function . bx2fef) (make-hashtable . bx2fee) (hashtable-hash-function . bx2fed) (make-eqv-hashtable . bx2fec) (make-eq-hashtable . bx2feb) (hashtable? . bx2fea) (hashtable-update! . bx2fe9) (hashtable-size . bx2fe8) (hashtable-set! . bx2fe7) (hashtable-ref . bx2fe6) (hashtable-mutable? . bx2fe5) (hashtable-keys . bx2fe4) (hashtable-entries . bx2fe3) (hashtable-delete! . bx2fe2) (hashtable-copy . bx2fe1) (hashtable-contains? . bx2fe0) (hashtable-clear! . bx2fdf) (call-with-output-file . bx2fde) (call-with-input-file . bx2fdd) (write-char . bx2fdc) (write . bx2fdb) (with-output-to-file . bx2fda) (with-input-from-file . bx2fd9) (read-char . bx2fd8) (read . bx2fd7) (peek-char . bx2fd6) (open-output-file . bx2fd5) (open-input-file . bx2fd4) (newline . bx2fd3) (display . bx2fd2) (close-output-port . bx2fd1) (close-input-port . bx2fd0) (eof-object? . bx2fcf) (eof-object . bx2fce) (current-error-port . bx2fcd) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (utf-8-codec . bx2fc8) (utf-16-codec . bx2fc7) (transcoder-error-handling-mode . bx2fc6) (transcoder-eol-style . bx2fc5) (transcoder-codec . bx2fc4) (transcoded-port . bx2fc3) (textual-port? . bx2fc2) (string->bytevector . bx2fc1) (standard-output-port . bx2fc0) (standard-input-port . bx2fbf) (standard-error-port . bx2fbe) (set-port-position! . bx2fbd) (put-u8 . bx2fbc) (put-string . bx2fbb) (put-datum . bx2fba) (put-char . bx2fb9) (put-bytevector . bx2fb8) (port? . bx2fb7) (port-transcoder . bx2fb6) (port-position . bx2fb5) (port-has-set-port-position!? . bx2fb4) (port-has-port-position? . bx2fb3) (port-eof? . bx2fb2) (output-port-buffer-mode . bx2fb1) (open-string-output-port . bx2fb0) (open-string-input-port . bx2faf) (open-file-output-port . bx2fae) (open-file-input/output-port . bx2fad) (open-file-input-port . bx2fac) (open-bytevector-output-port . bx2fab) (open-bytevector-input-port . bx2faa) (native-transcoder . bx2fa9) (native-eol-style . bx2fa8) (make-transcoder . bx2fa7) (latin-1-codec . bx2fa6) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (make-i/o-encoding-error . bx2af2) (make-i/o-decoding-error . bx2adb) (make-custom-textual-output-port . bx2fa5) (make-custom-textual-input/output-port . bx2fa4) (make-custom-textual-input-port . bx2fa3) (make-custom-binary-output-port . bx2fa2) (make-custom-binary-input/output-port . bx2fa1) (make-custom-binary-input-port . bx2fa0) (make-bytevector . bx2f9f) (lookahead-u8 . bx2f9e) (lookahead-char . bx2f9d) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (i/o-encoding-error? . bx2af6) (i/o-encoding-error-char . bx2af8) (i/o-decoding-error? . bx2add) (get-u8 . bx2f9c) (get-string-n! . bx2f9b) (get-string-n . bx2f9a) (get-string-all . bx2f99) (get-line . bx2f98) (get-datum . bx2f97) (get-char . bx2f96) (get-bytevector-some . bx2f95) (get-bytevector-n! . bx2f94) (get-bytevector-n . bx2f93) (get-bytevector-all . bx2f92) (flush-output-port . bx2f91) (close-port . bx2f90) (exit . bx2f88) (command-line . bx2c2d) (remove . bx2f83) (remv . bx2f82) (remp . bx2f81) (remq . bx2f80) (partition . bx2f7f) (memv . bx2f7e) (memq . bx2f7d) (memp . bx2f7c) (member . bx2f7b) (exists . bx2f7a) (for-all . bx2f79) (fold-right . bx2f78) (fold-left . bx2f77) (find . bx2f76) (filter . bx2f75) (cons* . bx2f74) (assv . bx2f73) (assq . bx2f72) (assp . bx2f71) (assoc . bx2f70) (call-with-string-output-port . bx2f6f) (call-with-port . bx2f6e) (call-with-bytevector-output-port . bx2f6d) (bytevector->string . bx2f6c) (buffer-mode? . bx2f6b) (binary-port? . bx2f6a) (with-exception-handler . bx2f69) (raise-continuable . bx2f68) (raise . bx2f67) (make-enumeration . bx2f66) (enum-set=? . bx2f65) (enum-set-universe . bx2f64) (enum-set-union . bx2f63) (enum-set-subset? . bx2f62) (enum-set-projection . bx2f61) (enum-set-member? . bx2f60) (enum-set-intersection . bx2f5f) (enum-set-indexer . bx2f5e) (enum-set-difference . bx2f5d) (enum-set-constructor . bx2f5c) (enum-set-complement . bx2f5b) (enum-set->list . bx2f5a) (who-condition? . bx296d) (warning? . bx28e5) (violation? . bx2924) (undefined-violation? . bx29e4) (syntax-violation? . bx29cb) (syntax-violation-subform . bx29cf) (syntax-violation-form . bx29cd) (syntax-violation . bxe3d) (simple-conditions . bx2f59) (serious-condition? . bx28fa) (non-continuable-violation? . bx2984) (message-condition? . bx28ce) (make-who-condition . bx2969) (make-warning . bx28e3) (make-violation . bx2922) (make-undefined-violation . bx29e2) (make-syntax-violation . bx29c5) (make-serious-condition . bx28f8) (make-non-continuable-violation . bx2982) (make-message-condition . bx28ca) (make-lexical-violation . bx29ac) (make-irritants-condition . bx294e) (make-implementation-restriction-violation . bx2997) (make-error . bx290d) (make-assertion-violation . bx2937) (lexical-violation? . bx29ae) (irritants-condition? . bx2952) (implementation-restriction-violation? . bx2999) (error? . bx290f) (condition-who . bx296f) (condition-predicate . bx2f58) (condition-message . bx28d0) (condition-irritants . bx2954) (condition-accessor . bx2f57) (condition . bx2f56) (assertion-violation? . bx2939) (condition? . bx2f55) (utf32->string . bx2f54) (utf16->string . bx2f53) (utf8->string . bx2f52) (uint-list->bytevector . bx2f51) (u8-list->bytevector . bx2f50) (string->utf8 . bx2f4f) (string->utf32 . bx2f4e) (string->utf16 . bx2f4d) (sint-list->bytevector . bx2f4c) (native-endianness . bx2f4b) (bytevector? . bx2f4a) (bytevector=? . bx2f49) (bytevector-uint-set! . bx2f48) (bytevector-uint-ref . bx2f47) (bytevector-u8-set! . bx2f46) (bytevector-u8-ref . bx2f45) (bytevector-u64-set! . bx2f44) (bytevector-u64-ref . bx2f43) (bytevector-u64-native-set! . bx2f42) (bytevector-u64-native-ref . bx2f41) (bytevector-u32-set! . bx2f40) (bytevector-u32-ref . bx2f3f) (bytevector-u32-native-set! . bx2f3e) (bytevector-u32-native-ref . bx2f3d) (bytevector-u16-set! . bx2f3c) (bytevector-u16-ref . bx2f3b) (bytevector-u16-native-set! . bx2f3a) (bytevector-u16-native-ref . bx2f39) (bytevector-sint-set! . bx2f38) (bytevector-sint-ref . bx2f37) (bytevector-s8-set! . bx2f36) (bytevector-s8-ref . bx2f35) (bytevector-s64-set! . bx2f34) (bytevector-s64-ref . bx2f33) (bytevector-s64-native-set! . bx2f32) (bytevector-s64-native-ref . bx2f31) (bytevector-s32-set! . bx2f30) (bytevector-s32-ref . bx2f2f) (bytevector-s32-native-set! . bx2f2e) (bytevector-s32-native-ref . bx2f2d) (bytevector-s16-set! . bx2f2c) (bytevector-s16-ref . bx2f2b) (bytevector-s16-native-set! . bx2f2a) (bytevector-s16-native-ref . bx2f29) (bytevector-length . bx2f28) (bytevector-ieee-single-ref . bx2f27) (bytevector-ieee-single-set! . bx2f26) (bytevector-ieee-single-native-set! . bx2f25) (bytevector-ieee-single-native-ref . bx2f24) (bytevector-ieee-double-set! . bx2f23) (bytevector-ieee-double-ref . bx2f22) (bytevector-ieee-double-native-set! . bx2f21) (bytevector-ieee-double-native-ref . bx2f20) (bytevector-fill! . bx2f1f) (bytevector-copy! . bx2f1e) (bytevector-copy . bx2f1d) (bytevector->uint-list . bx2f1c) (bytevector->u8-list . bx2f1b) (bytevector->sint-list . bx2f1a) (no-nans-violation? . bx2b22) (no-infinities-violation? . bx2b0d) (make-no-nans-violation . bx2b20) (make-no-infinities-violation . bx2b0b) (real->flonum . bx2f19) (flzero? . bx2f18) (fltruncate . bx2f17) (fltan . bx2f16) (flsqrt . bx2f15) (flsin . bx2f14) (flround . bx2f13) (flpositive? . bx2f12) (flonum? . bx2f11) (flodd? . bx2f10) (flnumerator . bx2f0f) (flnegative? . bx2f0e) (flnan? . bx2f0d) (flmod0 . bx2f0c) (flmod . bx2f0b) (flmin . bx2f0a) (flmax . bx2f09) (fllog . bx2f08) (flinteger? . bx2f07) (flinfinite? . bx2f06) (flfloor . bx2f05) (flfinite? . bx2f04) (flexpt . bx2f03) (flexp . bx2f02) (fleven? . bx2f01) (fldiv0-and-mod0 . bx2f00) (fldiv0 . bx2eff) (fldiv-and-mod . bx2efe) (fldiv . bx2efd) (fldenominator . bx2efc) (flcos . bx2efb) (flceiling . bx2efa) (flatan . bx2ef9) (flasin . bx2ef8) (flacos . bx2ef7) (flabs . bx2ef6) (fl>? . bx2ef5) (fl>=? . bx2ef4) (fl=? . bx2ef3) (fl<? . bx2ef2) (fl<=? . bx2ef1) (fl/ . bx2ef0) (fl- . bx2eef) (fl+ . bx2eee) (fl* . bx2eed) (fixnum->flonum . bx2eec) (fxzero? . bx2eeb) (fxxor . bx2eea) (fxrotate-bit-field . bx2ee9) (fxreverse-bit-field . bx2ee8) (fxpositive? . bx2ee7) (fxodd? . bx2ee6) (fxnot . bx2ee5) (fxnegative? . bx2ee4) (fxmod0 . bx2ee3) (fxmod . bx2ee2) (fxmin . bx2ee1) (fxmax . bx2ee0) (fxlength . bx2edf) (fxior . bx2ede) (fxif . bx2edd) (fxfirst-bit-set . bx2edc) (fxeven? . bx2edb) (fxdiv0-and-mod0 . bx2eda) (fxdiv0 . bx2ed9) (fxdiv-and-mod . bx2ed8) (fxdiv . bx2ed7) (fxcopy-bit-field . bx2ed6) (fxcopy-bit . bx2ed5) (fxbit-set? . bx2ed4) (fxbit-field . bx2ed3) (fxbit-count . bx2ed2) (fxarithmetic-shift-right . bx2ed1) (fxarithmetic-shift-left . bx2ed0) (fxarithmetic-shift . bx2ecf) (fxand . bx2ece) (fx>? . bx2ecd) (fx>=? . bx2ecc) (fx=? . bx2ecb) (fx<? . bx2eca) (fx<=? . bx2ec9) (fx-/carry . bx2ec8) (fx- . bx2ec7) (fx+/carry . bx2ec6) (fx+ . bx2ec5) (fx*/carry . bx2ec4) (fx* . bx2ec3) (greatest-fixnum . bx2ec2) (least-fixnum . bx2ec1) (fixnum-width . bx2ec0) (fixnum? . bx2ebf) (bitwise-rotate-bit-field . bx2ebe) (bitwise-reverse-bit-field . bx2ebd) (bitwise-length . bx2ebc) (bitwise-if . bx2ebb) (bitwise-first-bit-set . bx2eba) (bitwise-copy-bit-field . bx2eb9) (bitwise-copy-bit . bx2eb8) (bitwise-bit-set? . bx2eb7) (bitwise-bit-field . bx2eb6) (bitwise-bit-count . bx2eb5) (bitwise-xor . bx2eb4) (bitwise-ior . bx2eb3) (bitwise-and . bx2eb2) (bitwise-not . bx2eb1) (bitwise-arithmetic-shift-right . bx2eb0) (bitwise-arithmetic-shift-left . bx2eaf) (bitwise-arithmetic-shift . bx2eae) (zero? . bx2ead) (vector? . bx2eac) (vector-set! . bx2eab) (vector-ref . bx2eaa) (vector-map . bx2ea9) (vector-length . bx2ea8) (vector-for-each . bx2ea7) (vector-fill! . bx2ea6) (vector->list . bx2ea5) (vector . bx2ea4) (values . bx2ea3) (truncate . bx2ea2) (tan . bx2ea1) (symbol? . bx2ea0) (symbol=? . bx2e9f) (symbol->string . bx2e9e) (substring . bx2e9d) (string? . bx2e9c) (string>? . bx2e9b) (string>=? . bx2e9a) (string=? . bx2e99) (string<? . bx2e98) (string<=? . bx2e97) (string-ref . bx2e96) (string-length . bx2e95) (string-for-each . bx2e94) (string-copy . bx2e93) (string-append . bx2e92) (string->symbol . bx2e91) (string->number . bx2e90) (string->list . bx2e8f) (string . bx2e8e) (sqrt . bx2e8d) (sin . bx2e8c) (round . bx2e8b) (reverse . bx2e8a) (real? . bx2e89) (real-valued? . bx2e88) (real-part . bx2e87) (rationalize . bx2e86) (rational? . bx2e85) (rational-valued? . bx2e84) (procedure? . bx2e83) (positive? . bx2e82) (pair? . bx2e81) (odd? . bx2e80) (numerator . bx2e7f) (number? . bx2e7e) (number->string . bx2e7d) (null? . bx2e7c) (not . bx2e7b) (negative? . bx2e7a) (nan? . bx2e79) (min . bx2e78) (max . bx2e77) (map . bx2e76) (make-vector . bx2e75) (make-string . bx2e74) (make-rectangular . bx2e73) (make-polar . bx2e72) (magnitude . bx2e71) (log . bx2e70) (list? . bx2e6f) (list-tail . bx2e6e) (list-ref . bx2e6d) (list->vector . bx2e6c) (list->string . bx2e6b) (list . bx2e6a) (length . bx2e69) (lcm . bx2e68) (integer? . bx2e67) (integer-valued? . bx2e66) (integer->char . bx2e65) (infinite? . bx2e64) (inexact? . bx2e63) (inexact . bx2e62) (imag-part . bx2e61) (gcd . bx2e60) (for-each . bx2e5f) (floor . bx2e5e) (finite? . bx2e5d) (expt . bx2e5c) (exp . bx2e5b) (exact? . bx2e5a) (exact-integer-sqrt . bx2e59) (exact . bx2e58) (even? . bx2e57) (error . bx2e56) (eqv? . bx2e55) (equal? . bx2e54) (eq? . bx2e53) (dynamic-wind . bx2e52) (div0-and-mod0 . bx2e51) (mod0 . bx2e50) (div0 . bx2e4f) (div-and-mod . bx2e4e) (mod . bx2e4d) (div . bx2e4c) (denominator . bx2e4b) (cos . bx2e4a) (cons . bx2e49) (complex? . bx2e48) (char? . bx2e47) (char>? . bx2e46) (char>=? . bx2e45) (char=? . bx2e44) (char<? . bx2e43) (char<=? . bx2e42) (char->integer . bx2e41) (ceiling . bx2e40) (call-with-values . bx2e3f) (call/cc . bx2e3e) (call-with-current-continuation . bx2e3d) (cddddr . bx2e3c) (cdddar . bx2e3b) (cddadr . bx2e3a) (cddaar . bx2e39) (cdaddr . bx2e38) (cdadar . bx2e37) (cdaadr . bx2e36) (cdaaar . bx2e35) (cadddr . bx2e34) (caddar . bx2e33) (cadadr . bx2e32) (cadaar . bx2e31) (caaddr . bx2e30) (caadar . bx2e2f) (caaadr . bx2e2e) (caaaar . bx2e2d) (cdddr . bx2e2c) (cddar . bx2e2b) (cdadr . bx2e2a) (cdaar . bx2e29) (caddr . bx2e28) (cadar . bx2e27) (caadr . bx2e26) (caaar . bx2e25) (cddr . bx2e24) (cdar . bx2e23) (cadr . bx2e22) (caar . bx2e21) (cdr . bx2e20) (car . bx2e1f) (boolean? . bx2e1e) (boolean=? . bx2e1d) (atan . bx2e1c) (assertion-violation . bx2e1b) (asin . bx2e1a) (apply . bx2e19) (append . bx2e18) (angle . bx2e17) (acos . bx2e16) (abs . bx2e15) (/ . bx2e14) (* . bx2e13) (- . bx2e12) (+ . bx2e11) (>= . bx2e10) (> . bx2e0f) (= . bx2e0e) (<= . bx2e0d) (< . bx2e0c) (&no-nans . bx2e0a) (&no-infinities . bx2e09) (&i/o-encoding . bx2e08) (&i/o-decoding . bx2e07) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd) (&undefined . bx2dfc) (&syntax . bx2dfb) (&lexical . bx2dfa) (&implementation-restriction . bx2df9) (&non-continuable . bx2df8) (&who . bx2df7) (&irritants . bx2df6) (&assertion . bx2df5) (&violation . bx2df4) (&error . bx2df3) (&serious . bx2df2) (&warning . bx2df1) (&message . bx2df0) (&condition . bx2def) (define-condition-type . bx2dee) (define-enumeration . bx2ded) (define-record-type . bx2dec) (parent-rtd . bx2deb) (nongenerative . bx2dea) (opaque . bx2de9) (sealed . bx2de8) (protocol . bx2de7) (parent . bx2de6) (immutable . bx2de5) (mutable . bx2de4) (fields . bx2de3) (error-handling-mode . bx2de2) (file-options . bx2de1) (buffer-mode . bx2de0) (eol-style . bx2ddf) (guard . bx2dde) (unsyntax-splicing . bx2ddb) (unsyntax . bx2dda) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (_ . bx2dd7) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (assert . bx2dd3) (endianness . bx2dd2) (do . bx2dcf) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (let*-values . bx2dcb) (let-values . bx2dca) (identifier-syntax . bx2dc9) (with-syntax . bx2dc8) (quasisyntax . bx2dc7) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (record-constructor-descriptor . bx2dc2) (record-type-descriptor . bx2dc1) (case . bx2dc0) (unless . bx2dbe) (when . bx2dbd) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec* . bx2db9) (letrec . bx2db8) (case-lambda . bx2db6) (lambda . bx2db5) (syntax . bx2db4) (syntax-case . bx2db3) (quote . bx2db2) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (begin . bx2dac) (define-syntax . bx2daa) (define . bx2da9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bxe19) (quotient . bx2f8f) (null-environment . bxe17) (remainder . bx2f8e) (modulo . bx2f8d) (inexact->exact . bx2f8c) (force . bx2f8b) (exact->inexact . bx2f8a) (make-promise . bx2f89) (delay . bx2dd1)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d4 '(rnrs control) '(6) '() '() '() '((do . bx2dcf) (unless . bx2dbe) (when . bx2dbd) (case-lambda . bx2db6)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d5 '(rnrs eval) '(6) '() '() '() '((eval . bxe1d) (environment . bxe15)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bx2f85) (set-car! . bx2f84)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bx2f87) (string-set! . bx2f86)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d8 '(rnrs programs) '(6) '() '() '() '((exit . bx2f88) (command-line . bx2c2d)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30d9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bxb8a) (identifier? . bxe3f) (generate-temporaries . bxe2b) (free-identifier=? . bxe2d) (syntax->datum . bxe43) (datum->syntax . bxe41) (bound-identifier=? . bxe2f) (syntax-violation . bxe3d) (unsyntax-splicing . bx2ddb) (unsyntax . bx2dda) (_ . bx2dd7) (... . bx2dd4) (with-syntax . bx2dc8) (quasisyntax . bx2dc7) (syntax . bx2db4) (syntax-case . bx2db3)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30da '(rnrs files) '(6) '() '() '() '((delete-file . bx2ff8) (file-exists? . bx2ff7) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30db '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bx2ff6) (vector-sort . bx2ff5) (list-sort . bx2ff4)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30dc '(rnrs base) '(6) '() '() '() '((zero? . bx2ead) (vector? . bx2eac) (vector-set! . bx2eab) (vector-ref . bx2eaa) (vector-map . bx2ea9) (vector-length . bx2ea8) (vector-for-each . bx2ea7) (vector-fill! . bx2ea6) (vector->list . bx2ea5) (vector . bx2ea4) (values . bx2ea3) (truncate . bx2ea2) (tan . bx2ea1) (symbol? . bx2ea0) (symbol=? . bx2e9f) (symbol->string . bx2e9e) (substring . bx2e9d) (string? . bx2e9c) (string>? . bx2e9b) (string>=? . bx2e9a) (string=? . bx2e99) (string<? . bx2e98) (string<=? . bx2e97) (string-ref . bx2e96) (string-length . bx2e95) (string-for-each . bx2e94) (string-copy . bx2e93) (string-append . bx2e92) (string->symbol . bx2e91) (string->number . bx2e90) (string->list . bx2e8f) (string . bx2e8e) (sqrt . bx2e8d) (sin . bx2e8c) (round . bx2e8b) (reverse . bx2e8a) (real? . bx2e89) (real-valued? . bx2e88) (real-part . bx2e87) (rationalize . bx2e86) (rational? . bx2e85) (rational-valued? . bx2e84) (procedure? . bx2e83) (positive? . bx2e82) (pair? . bx2e81) (odd? . bx2e80) (numerator . bx2e7f) (number? . bx2e7e) (number->string . bx2e7d) (null? . bx2e7c) (not . bx2e7b) (negative? . bx2e7a) (nan? . bx2e79) (min . bx2e78) (max . bx2e77) (map . bx2e76) (make-vector . bx2e75) (make-string . bx2e74) (make-rectangular . bx2e73) (make-polar . bx2e72) (magnitude . bx2e71) (log . bx2e70) (list? . bx2e6f) (list-tail . bx2e6e) (list-ref . bx2e6d) (list->vector . bx2e6c) (list->string . bx2e6b) (list . bx2e6a) (length . bx2e69) (lcm . bx2e68) (integer? . bx2e67) (integer-valued? . bx2e66) (integer->char . bx2e65) (infinite? . bx2e64) (inexact? . bx2e63) (inexact . bx2e62) (imag-part . bx2e61) (gcd . bx2e60) (for-each . bx2e5f) (floor . bx2e5e) (finite? . bx2e5d) (expt . bx2e5c) (exp . bx2e5b) (exact? . bx2e5a) (exact-integer-sqrt . bx2e59) (exact . bx2e58) (even? . bx2e57) (error . bx2e56) (eqv? . bx2e55) (equal? . bx2e54) (eq? . bx2e53) (dynamic-wind . bx2e52) (div0-and-mod0 . bx2e51) (mod0 . bx2e50) (div0 . bx2e4f) (div-and-mod . bx2e4e) (mod . bx2e4d) (div . bx2e4c) (denominator . bx2e4b) (cos . bx2e4a) (cons . bx2e49) (complex? . bx2e48) (char? . bx2e47) (char>? . bx2e46) (char>=? . bx2e45) (char=? . bx2e44) (char<? . bx2e43) (char<=? . bx2e42) (char->integer . bx2e41) (ceiling . bx2e40) (call-with-values . bx2e3f) (call/cc . bx2e3e) (call-with-current-continuation . bx2e3d) (cddddr . bx2e3c) (cdddar . bx2e3b) (cddadr . bx2e3a) (cddaar . bx2e39) (cdaddr . bx2e38) (cdadar . bx2e37) (cdaadr . bx2e36) (cdaaar . bx2e35) (cadddr . bx2e34) (caddar . bx2e33) (cadadr . bx2e32) (cadaar . bx2e31) (caaddr . bx2e30) (caadar . bx2e2f) (caaadr . bx2e2e) (caaaar . bx2e2d) (cdddr . bx2e2c) (cddar . bx2e2b) (cdadr . bx2e2a) (cdaar . bx2e29) (caddr . bx2e28) (cadar . bx2e27) (caadr . bx2e26) (caaar . bx2e25) (cddr . bx2e24) (cdar . bx2e23) (cadr . bx2e22) (caar . bx2e21) (cdr . bx2e20) (car . bx2e1f) (boolean? . bx2e1e) (boolean=? . bx2e1d) (atan . bx2e1c) (assertion-violation . bx2e1b) (asin . bx2e1a) (apply . bx2e19) (append . bx2e18) (angle . bx2e17) (acos . bx2e16) (abs . bx2e15) (/ . bx2e14) (* . bx2e13) (- . bx2e12) (+ . bx2e11) (>= . bx2e10) (> . bx2e0f) (= . bx2e0e) (<= . bx2e0d) (< . bx2e0c) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (_ . bx2dd7) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (assert . bx2dd3) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (let*-values . bx2dcb) (let-values . bx2dca) (identifier-syntax . bx2dc9) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (case . bx2dc0) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec* . bx2db9) (letrec . bx2db8) (lambda . bx2db5) (quote . bx2db2) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (begin . bx2dac) (define-syntax . bx2daa) (define . bx2da9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30dd '(rnrs lists) '(6) '() '() '() '((remove . bx2f83) (remv . bx2f82) (remp . bx2f81) (remq . bx2f80) (partition . bx2f7f) (memv . bx2f7e) (memq . bx2f7d) (memp . bx2f7c) (member . bx2f7b) (exists . bx2f7a) (for-all . bx2f79) (fold-right . bx2f78) (fold-left . bx2f77) (find . bx2f76) (filter . bx2f75) (cons* . bx2f74) (assv . bx2f73) (assq . bx2f72) (assp . bx2f71) (assoc . bx2f70)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30de '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bx2fde) (call-with-input-file . bx2fdd) (write-char . bx2fdc) (write . bx2fdb) (with-output-to-file . bx2fda) (with-input-from-file . bx2fd9) (read-char . bx2fd8) (read . bx2fd7) (peek-char . bx2fd6) (open-output-file . bx2fd5) (open-input-file . bx2fd4) (newline . bx2fd3) (display . bx2fd2) (close-output-port . bx2fd1) (close-input-port . bx2fd0) (eof-object? . bx2fcf) (eof-object . bx2fce) (current-error-port . bx2fcd) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30df '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bx2f9f) (utf32->string . bx2f54) (utf16->string . bx2f53) (utf8->string . bx2f52) (uint-list->bytevector . bx2f51) (u8-list->bytevector . bx2f50) (string->utf8 . bx2f4f) (string->utf32 . bx2f4e) (string->utf16 . bx2f4d) (sint-list->bytevector . bx2f4c) (native-endianness . bx2f4b) (bytevector? . bx2f4a) (bytevector=? . bx2f49) (bytevector-uint-set! . bx2f48) (bytevector-uint-ref . bx2f47) (bytevector-u8-set! . bx2f46) (bytevector-u8-ref . bx2f45) (bytevector-u64-set! . bx2f44) (bytevector-u64-ref . bx2f43) (bytevector-u64-native-set! . bx2f42) (bytevector-u64-native-ref . bx2f41) (bytevector-u32-set! . bx2f40) (bytevector-u32-ref . bx2f3f) (bytevector-u32-native-set! . bx2f3e) (bytevector-u32-native-ref . bx2f3d) (bytevector-u16-set! . bx2f3c) (bytevector-u16-ref . bx2f3b) (bytevector-u16-native-set! . bx2f3a) (bytevector-u16-native-ref . bx2f39) (bytevector-sint-set! . bx2f38) (bytevector-sint-ref . bx2f37) (bytevector-s8-set! . bx2f36) (bytevector-s8-ref . bx2f35) (bytevector-s64-set! . bx2f34) (bytevector-s64-ref . bx2f33) (bytevector-s64-native-set! . bx2f32) (bytevector-s64-native-ref . bx2f31) (bytevector-s32-set! . bx2f30) (bytevector-s32-ref . bx2f2f) (bytevector-s32-native-set! . bx2f2e) (bytevector-s32-native-ref . bx2f2d) (bytevector-s16-set! . bx2f2c) (bytevector-s16-ref . bx2f2b) (bytevector-s16-native-set! . bx2f2a) (bytevector-s16-native-ref . bx2f29) (bytevector-length . bx2f28) (bytevector-ieee-single-ref . bx2f27) (bytevector-ieee-single-set! . bx2f26) (bytevector-ieee-single-native-set! . bx2f25) (bytevector-ieee-single-native-ref . bx2f24) (bytevector-ieee-double-set! . bx2f23) (bytevector-ieee-double-ref . bx2f22) (bytevector-ieee-double-native-set! . bx2f21) (bytevector-ieee-double-native-ref . bx2f20) (bytevector-fill! . bx2f1f) (bytevector-copy! . bx2f1e) (bytevector-copy . bx2f1d) (bytevector->uint-list . bx2f1c) (bytevector->u8-list . bx2f1b) (bytevector->sint-list . bx2f1a) (endianness . bx2dd2)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e0 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bx3026) (string-titlecase . bx3025) (string-normalize-nfkd . bx3024) (string-normalize-nfkc . bx3023) (string-normalize-nfd . bx3022) (string-normalize-nfc . bx3021) (string-foldcase . bx3020) (string-downcase . bx301f) (string-ci>? . bx301e) (string-ci>=? . bx301d) (string-ci=? . bx301c) (string-ci<? . bx301b) (string-ci<=? . bx301a) (char-whitespace? . bx3019) (char-upper-case? . bx3018) (char-title-case? . bx3017) (char-numeric? . bx3016) (char-lower-case? . bx3015) (char-general-category . bx3014) (char-upcase . bx3013) (char-titlecase . bx3012) (char-foldcase . bx3011) (char-downcase . bx3010) (char-ci>? . bx300f) (char-ci>=? . bx300e) (char-ci=? . bx300d) (char-ci<? . bx300c) (char-ci<=? . bx300b) (char-alphabetic? . bx300a)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e1 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bx2f69) (raise-continuable . bx2f68) (raise . bx2f67) (guard . bx2dde) (else . bx2dd6) (=> . bx2dd5)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e2 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bx2ebe) (bitwise-reverse-bit-field . bx2ebd) (bitwise-length . bx2ebc) (bitwise-if . bx2ebb) (bitwise-first-bit-set . bx2eba) (bitwise-copy-bit-field . bx2eb9) (bitwise-copy-bit . bx2eb8) (bitwise-bit-set? . bx2eb7) (bitwise-bit-field . bx2eb6) (bitwise-bit-count . bx2eb5) (bitwise-xor . bx2eb4) (bitwise-ior . bx2eb3) (bitwise-and . bx2eb2) (bitwise-not . bx2eb1) (bitwise-arithmetic-shift-right . bx2eb0) (bitwise-arithmetic-shift-left . bx2eaf) (bitwise-arithmetic-shift . bx2eae)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e3 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bx2eeb) (fxxor . bx2eea) (fxrotate-bit-field . bx2ee9) (fxreverse-bit-field . bx2ee8) (fxpositive? . bx2ee7) (fxodd? . bx2ee6) (fxnot . bx2ee5) (fxnegative? . bx2ee4) (fxmod0 . bx2ee3) (fxmod . bx2ee2) (fxmin . bx2ee1) (fxmax . bx2ee0) (fxlength . bx2edf) (fxior . bx2ede) (fxif . bx2edd) (fxfirst-bit-set . bx2edc) (fxeven? . bx2edb) (fxdiv0-and-mod0 . bx2eda) (fxdiv0 . bx2ed9) (fxdiv-and-mod . bx2ed8) (fxdiv . bx2ed7) (fxcopy-bit-field . bx2ed6) (fxcopy-bit . bx2ed5) (fxbit-set? . bx2ed4) (fxbit-field . bx2ed3) (fxbit-count . bx2ed2) (fxarithmetic-shift-right . bx2ed1) (fxarithmetic-shift-left . bx2ed0) (fxarithmetic-shift . bx2ecf) (fxand . bx2ece) (fx>? . bx2ecd) (fx>=? . bx2ecc) (fx=? . bx2ecb) (fx<? . bx2eca) (fx<=? . bx2ec9) (fx-/carry . bx2ec8) (fx- . bx2ec7) (fx+/carry . bx2ec6) (fx+ . bx2ec5) (fx*/carry . bx2ec4) (fx* . bx2ec3) (greatest-fixnum . bx2ec2) (least-fixnum . bx2ec1) (fixnum-width . bx2ec0) (fixnum? . bx2ebf)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e4 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bx2b22) (no-infinities-violation? . bx2b0d) (make-no-nans-violation . bx2b20) (make-no-infinities-violation . bx2b0b) (real->flonum . bx2f19) (flzero? . bx2f18) (fltruncate . bx2f17) (fltan . bx2f16) (flsqrt . bx2f15) (flsin . bx2f14) (flround . bx2f13) (flpositive? . bx2f12) (flonum? . bx2f11) (flodd? . bx2f10) (flnumerator . bx2f0f) (flnegative? . bx2f0e) (flnan? . bx2f0d) (flmod0 . bx2f0c) (flmod . bx2f0b) (flmin . bx2f0a) (flmax . bx2f09) (fllog . bx2f08) (flinteger? . bx2f07) (flinfinite? . bx2f06) (flfloor . bx2f05) (flfinite? . bx2f04) (flexpt . bx2f03) (flexp . bx2f02) (fleven? . bx2f01) (fldiv0-and-mod0 . bx2f00) (fldiv0 . bx2eff) (fldiv-and-mod . bx2efe) (fldiv . bx2efd) (fldenominator . bx2efc) (flcos . bx2efb) (flceiling . bx2efa) (flatan . bx2ef9) (flasin . bx2ef8) (flacos . bx2ef7) (flabs . bx2ef6) (fl>? . bx2ef5) (fl>=? . bx2ef4) (fl=? . bx2ef3) (fl<? . bx2ef2) (fl<=? . bx2ef1) (fl/ . bx2ef0) (fl- . bx2eef) (fl+ . bx2eee) (fl* . bx2eed) (fixnum->flonum . bx2eec) (&no-nans . bx2e0a) (&no-infinities . bx2e09)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e5 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bx2ff3) (string-ci-hash . bx2ff2) (string-hash . bx2ff1) (equal-hash . bx2ff0) (hashtable-equivalence-function . bx2fef) (make-hashtable . bx2fee) (hashtable-hash-function . bx2fed) (make-eqv-hashtable . bx2fec) (make-eq-hashtable . bx2feb) (hashtable? . bx2fea) (hashtable-update! . bx2fe9) (hashtable-size . bx2fe8) (hashtable-set! . bx2fe7) (hashtable-ref . bx2fe6) (hashtable-mutable? . bx2fe5) (hashtable-keys . bx2fe4) (hashtable-entries . bx2fe3) (hashtable-delete! . bx2fe2) (hashtable-copy . bx2fe1) (hashtable-contains? . bx2fe0) (hashtable-clear! . bx2fdf)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e6 '(rnrs io ports) '(6) '() '() '() '((eof-object? . bx2fcf) (eof-object . bx2fce) (current-error-port . bx2fcd) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (utf-8-codec . bx2fc8) (utf-16-codec . bx2fc7) (transcoder-error-handling-mode . bx2fc6) (transcoder-eol-style . bx2fc5) (transcoder-codec . bx2fc4) (transcoded-port . bx2fc3) (textual-port? . bx2fc2) (string->bytevector . bx2fc1) (standard-output-port . bx2fc0) (standard-input-port . bx2fbf) (standard-error-port . bx2fbe) (set-port-position! . bx2fbd) (put-u8 . bx2fbc) (put-string . bx2fbb) (put-datum . bx2fba) (put-char . bx2fb9) (put-bytevector . bx2fb8) (port? . bx2fb7) (port-transcoder . bx2fb6) (port-position . bx2fb5) (port-has-set-port-position!? . bx2fb4) (port-has-port-position? . bx2fb3) (port-eof? . bx2fb2) (output-port-buffer-mode . bx2fb1) (open-string-output-port . bx2fb0) (open-string-input-port . bx2faf) (open-file-output-port . bx2fae) (open-file-input/output-port . bx2fad) (open-file-input-port . bx2fac) (open-bytevector-output-port . bx2fab) (open-bytevector-input-port . bx2faa) (native-transcoder . bx2fa9) (native-eol-style . bx2fa8) (make-transcoder . bx2fa7) (latin-1-codec . bx2fa6) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (make-i/o-encoding-error . bx2af2) (make-i/o-decoding-error . bx2adb) (make-custom-textual-output-port . bx2fa5) (make-custom-textual-input/output-port . bx2fa4) (make-custom-textual-input-port . bx2fa3) (make-custom-binary-output-port . bx2fa2) (make-custom-binary-input/output-port . bx2fa1) (make-custom-binary-input-port . bx2fa0) (lookahead-u8 . bx2f9e) (lookahead-char . bx2f9d) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (i/o-encoding-error? . bx2af6) (i/o-encoding-error-char . bx2af8) (i/o-decoding-error? . bx2add) (get-u8 . bx2f9c) (get-string-n! . bx2f9b) (get-string-n . bx2f9a) (get-string-all . bx2f99) (get-line . bx2f98) (get-datum . bx2f97) (get-char . bx2f96) (get-bytevector-some . bx2f95) (get-bytevector-n! . bx2f94) (get-bytevector-n . bx2f93) (get-bytevector-all . bx2f92) (flush-output-port . bx2f91) (close-port . bx2f90) (call-with-string-output-port . bx2f6f) (call-with-port . bx2f6e) (call-with-bytevector-output-port . bx2f6d) (bytevector->string . bx2f6c) (buffer-mode? . bx2f6b) (binary-port? . bx2f6a) (&i/o-encoding . bx2e08) (&i/o-decoding . bx2e07) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd) (error-handling-mode . bx2de2) (file-options . bx2de1) (buffer-mode . bx2de0) (eol-style . bx2ddf)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e7 '(rnrs enums) '(6) '() '() '() '((make-enumeration . bx2f66) (enum-set=? . bx2f65) (enum-set-universe . bx2f64) (enum-set-union . bx2f63) (enum-set-subset? . bx2f62) (enum-set-projection . bx2f61) (enum-set-member? . bx2f60) (enum-set-intersection . bx2f5f) (enum-set-indexer . bx2f5e) (enum-set-difference . bx2f5d) (enum-set-constructor . bx2f5c) (enum-set-complement . bx2f5b) (enum-set->list . bx2f5a) (define-enumeration . bx2ded)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e8 '(rnrs conditions) '(6) '() '() '() '((who-condition? . bx296d) (warning? . bx28e5) (violation? . bx2924) (undefined-violation? . bx29e4) (syntax-violation? . bx29cb) (syntax-violation-subform . bx29cf) (syntax-violation-form . bx29cd) (syntax-violation . bxe3d) (simple-conditions . bx2f59) (serious-condition? . bx28fa) (non-continuable-violation? . bx2984) (message-condition? . bx28ce) (make-who-condition . bx2969) (make-warning . bx28e3) (make-violation . bx2922) (make-undefined-violation . bx29e2) (make-syntax-violation . bx29c5) (make-serious-condition . bx28f8) (make-non-continuable-violation . bx2982) (make-message-condition . bx28ca) (make-lexical-violation . bx29ac) (make-irritants-condition . bx294e) (make-implementation-restriction-violation . bx2997) (make-error . bx290d) (make-assertion-violation . bx2937) (lexical-violation? . bx29ae) (irritants-condition? . bx2952) (implementation-restriction-violation? . bx2999) (error? . bx290f) (condition-who . bx296f) (condition-predicate . bx2f58) (condition-message . bx28d0) (condition-irritants . bx2954) (condition-accessor . bx2f57) (condition . bx2f56) (assertion-violation? . bx2939) (condition? . bx2f55) (&undefined . bx2dfc) (&syntax . bx2dfb) (&lexical . bx2dfa) (&implementation-restriction . bx2df9) (&non-continuable . bx2df8) (&who . bx2df7) (&irritants . bx2df6) (&assertion . bx2df5) (&violation . bx2df4) (&error . bx2df3) (&serious . bx2df2) (&warning . bx2df1) (&message . bx2df0) (&condition . bx2def) (define-condition-type . bx2dee)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30e9 '(rnrs records inspection) '(6) '() '() '() '((record? . bx3002) (record-type-uid . bx3001) (record-type-sealed? . bx3000) (record-type-parent . bx2fff) (record-type-opaque? . bx2ffe) (record-type-name . bx2ffd) (record-type-generative? . bx2ffc) (record-type-field-names . bx2ffb) (record-rtd . bx2ffa) (record-field-mutable? . bx2ff9)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30ea '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bx3009) (record-predicate . bx3008) (record-mutator . bx3007) (record-constructor . bx3006) (record-accessor . bx3005) (make-record-type-descriptor . bx3004) (make-record-constructor-descriptor . bx3003)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30eb '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bx2dec) (parent-rtd . bx2deb) (nongenerative . bx2dea) (opaque . bx2de9) (sealed . bx2de8) (protocol . bx2de7) (parent . bx2de6) (immutable . bx2de5) (mutable . bx2de4) (fields . bx2de3) (record-constructor-descriptor . bx2dc2) (record-type-descriptor . bx2dc1)) '() values values '#f '#f '#t '#f) (bx982@bx7ce@install-library 'bx30ec '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bx2b26) (&no-nans-rtd . bx2b24) (&no-infinities-rcd . bx2b11) (&no-infinities-rtd . bx2b0f) (&i/o-encoding-rcd . bx2afc) (&i/o-encoding-rtd . bx2afa) (&i/o-decoding-rcd . bx2ae1) (&i/o-decoding-rtd . bx2adf) (&i/o-port-rcd . bx2acc) (&i/o-port-rtd . bx2aca) (&i/o-file-does-not-exist-rcd . bx2ab1) (&i/o-file-does-not-exist-rtd . bx2aaf) (&i/o-file-already-exists-rcd . bx2a9c) (&i/o-file-already-exists-rtd . bx2a9a) (&i/o-file-is-read-only-rcd . bx2a87) (&i/o-file-is-read-only-rtd . bx2a85) (&i/o-file-protection-rcd . bx2a72) (&i/o-file-protection-rtd . bx2a70) (&i/o-filename-rcd . bx2a5d) (&i/o-filename-rtd . bx2a5b) (&i/o-invalid-position-rcd . bx2a42) (&i/o-invalid-position-rtd . bx2a40) (&i/o-write-rcd . bx2a27) (&i/o-write-rtd . bx2a25) (&i/o-read-rcd . bx2a12) (&i/o-read-rtd . bx2a10) (&i/o-rcd . bx29fd) (&i/o-rtd . bx29fb) (&undefined-rcd . bx29e8) (&undefined-rtd . bx29e6) (&syntax-rcd . bx29d3) (&syntax-rtd . bx29d1) (&lexical-rcd . bx29b2) (&lexical-rtd . bx29b0) (&implementation-restriction-rcd . bx299d) (&implementation-restriction-rtd . bx299b) (&non-continuable-rcd . bx2988) (&non-continuable-rtd . bx2986) (&who-rcd . bx2973) (&who-rtd . bx2971) (&irritants-rcd . bx2958) (&irritants-rtd . bx2956) (&assertion-rcd . bx293d) (&assertion-rtd . bx293b) (&violation-rcd . bx2928) (&violation-rtd . bx2926) (&error-rcd . bx2913) (&error-rtd . bx2911) (&serious-rcd . bx28fe) (&serious-rtd . bx28fc) (&warning-rcd . bx28e9) (&warning-rtd . bx28e7) (&message-rcd . bx28d4) (&message-rtd . bx28d2) (&condition-rcd . bx2875) (&condition-rtd . bx2873) (syntax-error . bxe39) (syntax-dispatch . bxd5d) (pretty-print . bx30cc) (eval-core . bx30cb) (set-symbol-value! . bx30ca) (symbol-value . bx30c9) (gensym . bx30c8) (void . bx30c7) (load . bx2c33) (interaction-environment . bxe49) (char-ready? . bx30c6) (regexp? . bx30c5) (read-line . bx30c4) (gensym-prefix-set! . bx30c3) (ungensym . bx30c2) (alist->eq-hash-table . bx30c1) (assoc-ref . bx30c0) (print . bx30bf) (format . bx30be) (host-os . bx30bd) (library-path . bx7ad) (standard-library-path . bx30bc) (file-newer? . bx30bb) (stat-mtime . bx30ba) (write-to-file . bx30b9) (file->list . bx30b8) (file->string . bx30b7) (digit->integer . bx30b6) (call-with-string-input-port . bx30b5) (call-with-string-io . bx30b4) (string-split . bx30b3) (bytevector-for-each . bx30b2) (string->regexp . bx30b1) (rxmatch . bx30b0) (regexp-replace-all . bx30af) (hashtable-for-each . bx30ae) (call-process . bx30ad) (local-tz-offset . bx30ac) (microseconds . bx30ab) (directory-list . bx30aa) (set-current-directory! . bx30a9) (expand-path . bx30a8) (current-directory . bx30a7) (%spawn . bx30a6) (%waitpid . bx30a5) (simple-struct-name . bx30a4) (simple-struct-set! . bx30a3) (simple-struct-ref . bx30a2) (make-simple-struct . bx30a1) (simple-struct? . bx30a0) (pointer-ref-c-int64 . bx309f) (pointer-ref-c-int32 . bx309e) (pointer-ref-c-int16 . bx309d) (pointer-ref-c-int8 . bx309c) (pointer-ref-c-uint64 . bx309b) (pointer-ref-c-uint32 . bx309a) (pointer-ref-c-uint16 . bx3099) (pointer-ref-c-uint8 . bx3098) (pointer-set-c-uint64! . bx3097) (pointer-set-c-uint32! . bx3096) (pointer-set-c-uint16! . bx3095) (pointer-set-c-uint8! . bx3094) (pointer-set-c-int64! . bx3093) (pointer-set-c-int32! . bx3092) (pointer-set-c-int16! . bx3091) (pointer-set-c-int8! . bx3090) (pointer-set-c-pointer! . bx308f) (pointer-set-c-double! . bx308e) (pointer-set-c-float! . bx308d) (pointer-set-c-long-long! . bx308c) (pointer-set-c-long! . bx308b) (pointer-set-c-int! . bx308a) (pointer-set-c-short! . bx3089) (pointer-set-c-char! . bx3088) (pointer-ref-c-pointer . bx3087) (pointer-ref-c-double . bx3086) (pointer-ref-c-float . bx3085) (pointer-ref-c-unsigned-long-long . bx3084) (pointer-ref-c-signed-long-long . bx3083) (pointer-ref-c-unsigned-long . bx3082) (pointer-ref-c-signed-long . bx3081) (pointer-ref-c-unsigned-int . bx3080) (pointer-ref-c-signed-int . bx307f) (pointer-ref-c-unsigned-short . bx307e) (pointer-ref-c-signed-short . bx307d) (pointer-ref-c-unsigned-char . bx307c) (pointer-ref-c-signed-char . bx307b) (pointer->integer . bx307a) (integer->pointer . bx3079) (pointer? . bx3078) (shared-errno . bx3077) (%ffi-supported? . bx3076) (%ffi-pointer->string . bx3075) (%ffi-call->string-or-zero . bx3074) (%ffi-call->double . bx3073) (%ffi-call->void* . bx3072) (%ffi-call->void . bx3071) (%ffi-call->char . bx3070) (%ffi-call->int . bx306f) (%ffi-lookup . bx306e) (%ffi-open . bx306d) (%fork . bx306c) (%pipe . bx306b) (p . bx306a) (open-output-string . bx3069) (get-output-string . bx3068) (file-stat-ctime . bx3067) (file-stat-atime . bx3066) (file-stat-mtime . bx3065) (file-size-in-bytes . bx3064) (file-writable? . bx3063) (file-executable? . bx3062) (file-readable? . bx3061) (file-regular? . bx3060) (file-symbolic-link? . bx305f) (file-directory? . bx305e) (create-symbolic-link . bx305d) (rename-file . bx305c) (delete-directory . bx305b) (create-directory . bx305a) (create-mosh-cache-dir . bx3059) (get-environment-variables . bx3058) (get-environment-variable . bx3057) (join-wraps . bx3056) (id->real-label . bx3055) (same-marks? . bx3054) (same-marks*? . bx3053) (get-timeofday . bx3052) (get-command-line . bx3051) (sys-display . bx3050) (whereis . bx304f) (register . bx304e) (vm-join! . bx304d) (vm-set-value! . bx304c) (vm? . bx304b) (main-vm? . bx304a) (vm-eval . bx3049) (vm-self . bx3048) (vm-start! . bx3047) (make-vm . bx3046) (mutex-try-lock! . bx3045) (mutex-unlock! . bx3044) (mutex-lock! . bx3043) (mutex? . bx3042) (make-mutex . bx3041) (condition-variable-notify-all! . bx3040) (condition-variable-notify! . bx303f) (condition-variable-wait! . bx303e) (make-condition-variable . bx303d) (mosh-executable-path . bx303c) (make-file-options . bx303b) (source-info . bx303a) (make-compiler-instruction . bx3039) (make-instruction . bx3038) (set-source-info! . bx3037) (bignum? . bx3036) (fast-equal? . bx3035) (fasl-read . bx3034) (fasl-write . bx3033) (time-usage . bx3032) (os-constant . bx3031) (make-parameter . bx596) (socket-port . bx3030) (socket-shutdown . bx302f) (socket-close . bx302e) (socket-send . bx302d) (socket-recv! . bx302c) (socket-recv . bx302b) (make-server-socket . bx302a) (make-client-socket . bx3029) (socket-accept . bx3028) (socket? . bx3027) (string-upcase . bx3026) (string-titlecase . bx3025) (string-normalize-nfkd . bx3024) (string-normalize-nfkc . bx3023) (string-normalize-nfd . bx3022) (string-normalize-nfc . bx3021) (string-foldcase . bx3020) (string-downcase . bx301f) (string-ci>? . bx301e) (string-ci>=? . bx301d) (string-ci=? . bx301c) (string-ci<? . bx301b) (string-ci<=? . bx301a) (char-whitespace? . bx3019) (char-upper-case? . bx3018) (char-title-case? . bx3017) (char-numeric? . bx3016) (char-lower-case? . bx3015) (char-general-category . bx3014) (char-upcase . bx3013) (char-titlecase . bx3012) (char-foldcase . bx3011) (char-downcase . bx3010) (char-ci>? . bx300f) (char-ci>=? . bx300e) (char-ci=? . bx300d) (char-ci<? . bx300c) (char-ci<=? . bx300b) (char-alphabetic? . bx300a) (make-variable-transformer . bxb8a) (identifier? . bxe3f) (generate-temporaries . bxe2b) (free-identifier=? . bxe2d) (syntax->datum . bxe43) (datum->syntax . bxe41) (bound-identifier=? . bxe2f) (record-type-descriptor? . bx3009) (record-predicate . bx3008) (record-mutator . bx3007) (record-constructor . bx3006) (record-accessor . bx3005) (make-record-type-descriptor . bx3004) (make-record-constructor-descriptor . bx3003) (record? . bx3002) (record-type-uid . bx3001) (record-type-sealed? . bx3000) (record-type-parent . bx2fff) (record-type-opaque? . bx2ffe) (record-type-name . bx2ffd) (record-type-generative? . bx2ffc) (record-type-field-names . bx2ffb) (record-rtd . bx2ffa) (record-field-mutable? . bx2ff9) (delete-file . bx2ff8) (file-exists? . bx2ff7) (vector-sort! . bx2ff6) (vector-sort . bx2ff5) (list-sort . bx2ff4) (symbol-hash . bx2ff3) (string-ci-hash . bx2ff2) (string-hash . bx2ff1) (equal-hash . bx2ff0) (hashtable-equivalence-function . bx2fef) (make-hashtable . bx2fee) (hashtable-hash-function . bx2fed) (make-eqv-hashtable . bx2fec) (make-eq-hashtable . bx2feb) (hashtable? . bx2fea) (hashtable-update! . bx2fe9) (hashtable-size . bx2fe8) (hashtable-set! . bx2fe7) (hashtable-ref . bx2fe6) (hashtable-mutable? . bx2fe5) (hashtable-keys . bx2fe4) (hashtable-entries . bx2fe3) (hashtable-delete! . bx2fe2) (hashtable-copy . bx2fe1) (hashtable-contains? . bx2fe0) (hashtable-clear! . bx2fdf) (call-with-output-file . bx2fde) (call-with-input-file . bx2fdd) (write-char . bx2fdc) (write . bx2fdb) (with-output-to-file . bx2fda) (with-input-from-file . bx2fd9) (read-char . bx2fd8) (read . bx2fd7) (peek-char . bx2fd6) (open-output-file . bx2fd5) (open-input-file . bx2fd4) (newline . bx2fd3) (display . bx2fd2) (close-output-port . bx2fd1) (close-input-port . bx2fd0) (eof-object? . bx2fcf) (eof-object . bx2fce) (current-error-port . bx2fcd) (current-output-port . bx2fcc) (current-input-port . bx2fcb) (output-port? . bx2fca) (input-port? . bx2fc9) (utf-8-codec . bx2fc8) (utf-16-codec . bx2fc7) (transcoder-error-handling-mode . bx2fc6) (transcoder-eol-style . bx2fc5) (transcoder-codec . bx2fc4) (transcoded-port . bx2fc3) (textual-port? . bx2fc2) (string->bytevector . bx2fc1) (standard-output-port . bx2fc0) (standard-input-port . bx2fbf) (standard-error-port . bx2fbe) (set-port-position! . bx2fbd) (put-u8 . bx2fbc) (put-string . bx2fbb) (put-datum . bx2fba) (put-char . bx2fb9) (put-bytevector . bx2fb8) (port? . bx2fb7) (port-transcoder . bx2fb6) (port-position . bx2fb5) (port-has-set-port-position!? . bx2fb4) (port-has-port-position? . bx2fb3) (port-eof? . bx2fb2) (output-port-buffer-mode . bx2fb1) (open-string-output-port . bx2fb0) (open-string-input-port . bx2faf) (open-file-output-port . bx2fae) (open-file-input/output-port . bx2fad) (open-file-input-port . bx2fac) (open-bytevector-output-port . bx2fab) (open-bytevector-input-port . bx2faa) (native-transcoder . bx2fa9) (native-eol-style . bx2fa8) (make-transcoder . bx2fa7) (latin-1-codec . bx2fa6) (make-i/o-write-error . bx2a21) (make-i/o-read-error . bx2a0c) (make-i/o-port-error . bx2ac2) (make-i/o-invalid-position-error . bx2a38) (make-i/o-filename-error . bx2a53) (make-i/o-file-protection-error . bx2a6c) (make-i/o-file-is-read-only-error . bx2a81) (make-i/o-file-does-not-exist-error . bx2aab) (make-i/o-file-already-exists-error . bx2a96) (make-i/o-error . bx29f7) (make-i/o-encoding-error . bx2af2) (make-i/o-decoding-error . bx2adb) (make-custom-textual-output-port . bx2fa5) (make-custom-textual-input/output-port . bx2fa4) (make-custom-textual-input-port . bx2fa3) (make-custom-binary-output-port . bx2fa2) (make-custom-binary-input/output-port . bx2fa1) (make-custom-binary-input-port . bx2fa0) (make-bytevector . bx2f9f) (lookahead-u8 . bx2f9e) (lookahead-char . bx2f9d) (i/o-write-error? . bx2a23) (i/o-read-error? . bx2a0e) (i/o-port-error? . bx2ac6) (i/o-invalid-position-error? . bx2a3c) (i/o-filename-error? . bx2a57) (i/o-file-protection-error? . bx2a6e) (i/o-file-is-read-only-error? . bx2a83) (i/o-file-does-not-exist-error? . bx2aad) (i/o-file-already-exists-error? . bx2a98) (i/o-error? . bx29f9) (i/o-error-position . bx2a3e) (i/o-error-port . bx2ac8) (i/o-error-filename . bx2a59) (i/o-encoding-error? . bx2af6) (i/o-encoding-error-char . bx2af8) (i/o-decoding-error? . bx2add) (get-u8 . bx2f9c) (get-string-n! . bx2f9b) (get-string-n . bx2f9a) (get-string-all . bx2f99) (get-line . bx2f98) (get-datum . bx2f97) (get-char . bx2f96) (get-bytevector-some . bx2f95) (get-bytevector-n! . bx2f94) (get-bytevector-n . bx2f93) (get-bytevector-all . bx2f92) (flush-output-port . bx2f91) (close-port . bx2f90) (scheme-report-environment . bxe19) (quotient . bx2f8f) (null-environment . bxe17) (remainder . bx2f8e) (modulo . bx2f8d) (inexact->exact . bx2f8c) (force . bx2f8b) (exact->inexact . bx2f8a) (make-promise . bx2f89) (exit . bx2f88) (command-line . bx2c2d) (string-fill! . bx2f87) (string-set! . bx2f86) (set-cdr! . bx2f85) (set-car! . bx2f84) (remove . bx2f83) (remv . bx2f82) (remp . bx2f81) (remq . bx2f80) (partition . bx2f7f) (memv . bx2f7e) (memq . bx2f7d) (memp . bx2f7c) (member . bx2f7b) (exists . bx2f7a) (for-all . bx2f79) (fold-right . bx2f78) (fold-left . bx2f77) (find . bx2f76) (filter . bx2f75) (cons* . bx2f74) (assv . bx2f73) (assq . bx2f72) (assp . bx2f71) (assoc . bx2f70) (call-with-string-output-port . bx2f6f) (call-with-port . bx2f6e) (call-with-bytevector-output-port . bx2f6d) (bytevector->string . bx2f6c) (buffer-mode? . bx2f6b) (binary-port? . bx2f6a) (with-exception-handler . bx2f69) (raise-continuable . bx2f68) (raise . bx2f67) (eval . bxe1d) (environment . bxe15) (make-enumeration . bx2f66) (enum-set=? . bx2f65) (enum-set-universe . bx2f64) (enum-set-union . bx2f63) (enum-set-subset? . bx2f62) (enum-set-projection . bx2f61) (enum-set-member? . bx2f60) (enum-set-intersection . bx2f5f) (enum-set-indexer . bx2f5e) (enum-set-difference . bx2f5d) (enum-set-constructor . bx2f5c) (enum-set-complement . bx2f5b) (enum-set->list . bx2f5a) (who-condition? . bx296d) (warning? . bx28e5) (violation? . bx2924) (undefined-violation? . bx29e4) (syntax-violation? . bx29cb) (syntax-violation-subform . bx29cf) (syntax-violation-form . bx29cd) (syntax-violation . bxe3d) (simple-conditions . bx2f59) (serious-condition? . bx28fa) (non-continuable-violation? . bx2984) (message-condition? . bx28ce) (make-who-condition . bx2969) (make-warning . bx28e3) (make-violation . bx2922) (make-undefined-violation . bx29e2) (make-syntax-violation . bx29c5) (make-serious-condition . bx28f8) (make-non-continuable-violation . bx2982) (make-message-condition . bx28ca) (make-lexical-violation . bx29ac) (make-irritants-condition . bx294e) (make-implementation-restriction-violation . bx2997) (make-error . bx290d) (make-assertion-violation . bx2937) (lexical-violation? . bx29ae) (irritants-condition? . bx2952) (implementation-restriction-violation? . bx2999) (error? . bx290f) (condition-who . bx296f) (condition-predicate . bx2f58) (condition-message . bx28d0) (condition-irritants . bx2954) (condition-accessor . bx2f57) (condition . bx2f56) (assertion-violation? . bx2939) (condition? . bx2f55) (utf32->string . bx2f54) (utf16->string . bx2f53) (utf8->string . bx2f52) (uint-list->bytevector . bx2f51) (u8-list->bytevector . bx2f50) (string->utf8 . bx2f4f) (string->utf32 . bx2f4e) (string->utf16 . bx2f4d) (sint-list->bytevector . bx2f4c) (native-endianness . bx2f4b) (bytevector? . bx2f4a) (bytevector=? . bx2f49) (bytevector-uint-set! . bx2f48) (bytevector-uint-ref . bx2f47) (bytevector-u8-set! . bx2f46) (bytevector-u8-ref . bx2f45) (bytevector-u64-set! . bx2f44) (bytevector-u64-ref . bx2f43) (bytevector-u64-native-set! . bx2f42) (bytevector-u64-native-ref . bx2f41) (bytevector-u32-set! . bx2f40) (bytevector-u32-ref . bx2f3f) (bytevector-u32-native-set! . bx2f3e) (bytevector-u32-native-ref . bx2f3d) (bytevector-u16-set! . bx2f3c) (bytevector-u16-ref . bx2f3b) (bytevector-u16-native-set! . bx2f3a) (bytevector-u16-native-ref . bx2f39) (bytevector-sint-set! . bx2f38) (bytevector-sint-ref . bx2f37) (bytevector-s8-set! . bx2f36) (bytevector-s8-ref . bx2f35) (bytevector-s64-set! . bx2f34) (bytevector-s64-ref . bx2f33) (bytevector-s64-native-set! . bx2f32) (bytevector-s64-native-ref . bx2f31) (bytevector-s32-set! . bx2f30) (bytevector-s32-ref . bx2f2f) (bytevector-s32-native-set! . bx2f2e) (bytevector-s32-native-ref . bx2f2d) (bytevector-s16-set! . bx2f2c) (bytevector-s16-ref . bx2f2b) (bytevector-s16-native-set! . bx2f2a) (bytevector-s16-native-ref . bx2f29) (bytevector-length . bx2f28) (bytevector-ieee-single-ref . bx2f27) (bytevector-ieee-single-set! . bx2f26) (bytevector-ieee-single-native-set! . bx2f25) (bytevector-ieee-single-native-ref . bx2f24) (bytevector-ieee-double-set! . bx2f23) (bytevector-ieee-double-ref . bx2f22) (bytevector-ieee-double-native-set! . bx2f21) (bytevector-ieee-double-native-ref . bx2f20) (bytevector-fill! . bx2f1f) (bytevector-copy! . bx2f1e) (bytevector-copy . bx2f1d) (bytevector->uint-list . bx2f1c) (bytevector->u8-list . bx2f1b) (bytevector->sint-list . bx2f1a) (no-nans-violation? . bx2b22) (no-infinities-violation? . bx2b0d) (make-no-nans-violation . bx2b20) (make-no-infinities-violation . bx2b0b) (real->flonum . bx2f19) (flzero? . bx2f18) (fltruncate . bx2f17) (fltan . bx2f16) (flsqrt . bx2f15) (flsin . bx2f14) (flround . bx2f13) (flpositive? . bx2f12) (flonum? . bx2f11) (flodd? . bx2f10) (flnumerator . bx2f0f) (flnegative? . bx2f0e) (flnan? . bx2f0d) (flmod0 . bx2f0c) (flmod . bx2f0b) (flmin . bx2f0a) (flmax . bx2f09) (fllog . bx2f08) (flinteger? . bx2f07) (flinfinite? . bx2f06) (flfloor . bx2f05) (flfinite? . bx2f04) (flexpt . bx2f03) (flexp . bx2f02) (fleven? . bx2f01) (fldiv0-and-mod0 . bx2f00) (fldiv0 . bx2eff) (fldiv-and-mod . bx2efe) (fldiv . bx2efd) (fldenominator . bx2efc) (flcos . bx2efb) (flceiling . bx2efa) (flatan . bx2ef9) (flasin . bx2ef8) (flacos . bx2ef7) (flabs . bx2ef6) (fl>? . bx2ef5) (fl>=? . bx2ef4) (fl=? . bx2ef3) (fl<? . bx2ef2) (fl<=? . bx2ef1) (fl/ . bx2ef0) (fl- . bx2eef) (fl+ . bx2eee) (fl* . bx2eed) (fixnum->flonum . bx2eec) (fxzero? . bx2eeb) (fxxor . bx2eea) (fxrotate-bit-field . bx2ee9) (fxreverse-bit-field . bx2ee8) (fxpositive? . bx2ee7) (fxodd? . bx2ee6) (fxnot . bx2ee5) (fxnegative? . bx2ee4) (fxmod0 . bx2ee3) (fxmod . bx2ee2) (fxmin . bx2ee1) (fxmax . bx2ee0) (fxlength . bx2edf) (fxior . bx2ede) (fxif . bx2edd) (fxfirst-bit-set . bx2edc) (fxeven? . bx2edb) (fxdiv0-and-mod0 . bx2eda) (fxdiv0 . bx2ed9) (fxdiv-and-mod . bx2ed8) (fxdiv . bx2ed7) (fxcopy-bit-field . bx2ed6) (fxcopy-bit . bx2ed5) (fxbit-set? . bx2ed4) (fxbit-field . bx2ed3) (fxbit-count . bx2ed2) (fxarithmetic-shift-right . bx2ed1) (fxarithmetic-shift-left . bx2ed0) (fxarithmetic-shift . bx2ecf) (fxand . bx2ece) (fx>? . bx2ecd) (fx>=? . bx2ecc) (fx=? . bx2ecb) (fx<? . bx2eca) (fx<=? . bx2ec9) (fx-/carry . bx2ec8) (fx- . bx2ec7) (fx+/carry . bx2ec6) (fx+ . bx2ec5) (fx*/carry . bx2ec4) (fx* . bx2ec3) (greatest-fixnum . bx2ec2) (least-fixnum . bx2ec1) (fixnum-width . bx2ec0) (fixnum? . bx2ebf) (bitwise-rotate-bit-field . bx2ebe) (bitwise-reverse-bit-field . bx2ebd) (bitwise-length . bx2ebc) (bitwise-if . bx2ebb) (bitwise-first-bit-set . bx2eba) (bitwise-copy-bit-field . bx2eb9) (bitwise-copy-bit . bx2eb8) (bitwise-bit-set? . bx2eb7) (bitwise-bit-field . bx2eb6) (bitwise-bit-count . bx2eb5) (bitwise-xor . bx2eb4) (bitwise-ior . bx2eb3) (bitwise-and . bx2eb2) (bitwise-not . bx2eb1) (bitwise-arithmetic-shift-right . bx2eb0) (bitwise-arithmetic-shift-left . bx2eaf) (bitwise-arithmetic-shift . bx2eae) (zero? . bx2ead) (vector? . bx2eac) (vector-set! . bx2eab) (vector-ref . bx2eaa) (vector-map . bx2ea9) (vector-length . bx2ea8) (vector-for-each . bx2ea7) (vector-fill! . bx2ea6) (vector->list . bx2ea5) (vector . bx2ea4) (values . bx2ea3) (truncate . bx2ea2) (tan . bx2ea1) (symbol? . bx2ea0) (symbol=? . bx2e9f) (symbol->string . bx2e9e) (substring . bx2e9d) (string? . bx2e9c) (string>? . bx2e9b) (string>=? . bx2e9a) (string=? . bx2e99) (string<? . bx2e98) (string<=? . bx2e97) (string-ref . bx2e96) (string-length . bx2e95) (string-for-each . bx2e94) (string-copy . bx2e93) (string-append . bx2e92) (string->symbol . bx2e91) (string->number . bx2e90) (string->list . bx2e8f) (string . bx2e8e) (sqrt . bx2e8d) (sin . bx2e8c) (round . bx2e8b) (reverse . bx2e8a) (real? . bx2e89) (real-valued? . bx2e88) (real-part . bx2e87) (rationalize . bx2e86) (rational? . bx2e85) (rational-valued? . bx2e84) (procedure? . bx2e83) (positive? . bx2e82) (pair? . bx2e81) (odd? . bx2e80) (numerator . bx2e7f) (number? . bx2e7e) (number->string . bx2e7d) (null? . bx2e7c) (not . bx2e7b) (negative? . bx2e7a) (nan? . bx2e79) (min . bx2e78) (max . bx2e77) (map . bx2e76) (make-vector . bx2e75) (make-string . bx2e74) (make-rectangular . bx2e73) (make-polar . bx2e72) (magnitude . bx2e71) (log . bx2e70) (list? . bx2e6f) (list-tail . bx2e6e) (list-ref . bx2e6d) (list->vector . bx2e6c) (list->string . bx2e6b) (list . bx2e6a) (length . bx2e69) (lcm . bx2e68) (integer? . bx2e67) (integer-valued? . bx2e66) (integer->char . bx2e65) (infinite? . bx2e64) (inexact? . bx2e63) (inexact . bx2e62) (imag-part . bx2e61) (gcd . bx2e60) (for-each . bx2e5f) (floor . bx2e5e) (finite? . bx2e5d) (expt . bx2e5c) (exp . bx2e5b) (exact? . bx2e5a) (exact-integer-sqrt . bx2e59) (exact . bx2e58) (even? . bx2e57) (error . bx2e56) (eqv? . bx2e55) (equal? . bx2e54) (eq? . bx2e53) (dynamic-wind . bx2e52) (div0-and-mod0 . bx2e51) (mod0 . bx2e50) (div0 . bx2e4f) (div-and-mod . bx2e4e) (mod . bx2e4d) (div . bx2e4c) (denominator . bx2e4b) (cos . bx2e4a) (cons . bx2e49) (complex? . bx2e48) (char? . bx2e47) (char>? . bx2e46) (char>=? . bx2e45) (char=? . bx2e44) (char<? . bx2e43) (char<=? . bx2e42) (char->integer . bx2e41) (ceiling . bx2e40) (call-with-values . bx2e3f) (call/cc . bx2e3e) (call-with-current-continuation . bx2e3d) (cddddr . bx2e3c) (cdddar . bx2e3b) (cddadr . bx2e3a) (cddaar . bx2e39) (cdaddr . bx2e38) (cdadar . bx2e37) (cdaadr . bx2e36) (cdaaar . bx2e35) (cadddr . bx2e34) (caddar . bx2e33) (cadadr . bx2e32) (cadaar . bx2e31) (caaddr . bx2e30) (caadar . bx2e2f) (caaadr . bx2e2e) (caaaar . bx2e2d) (cdddr . bx2e2c) (cddar . bx2e2b) (cdadr . bx2e2a) (cdaar . bx2e29) (caddr . bx2e28) (cadar . bx2e27) (caadr . bx2e26) (caaar . bx2e25) (cddr . bx2e24) (cdar . bx2e23) (cadr . bx2e22) (caar . bx2e21) (cdr . bx2e20) (car . bx2e1f) (boolean? . bx2e1e) (boolean=? . bx2e1d) (atan . bx2e1c) (assertion-violation . bx2e1b) (assertion-error . bxe37) (asin . bx2e1a) (apply . bx2e19) (append . bx2e18) (angle . bx2e17) (acos . bx2e16) (abs . bx2e15) (/ . bx2e14) (* . bx2e13) (- . bx2e12) (+ . bx2e11) (>= . bx2e10) (> . bx2e0f) (= . bx2e0e) (<= . bx2e0d) (< . bx2e0c) (library . bx2e0b) (&no-nans . bx2e0a) (&no-infinities . bx2e09) (&i/o-encoding . bx2e08) (&i/o-decoding . bx2e07) (&i/o-port . bx2e06) (&i/o-file-does-not-exist . bx2e05) (&i/o-file-already-exists . bx2e04) (&i/o-file-is-read-only . bx2e03) (&i/o-file-protection . bx2e02) (&i/o-filename . bx2e01) (&i/o-invalid-position . bx2e00) (&i/o-write . bx2dff) (&i/o-read . bx2dfe) (&i/o . bx2dfd) (&undefined . bx2dfc) (&syntax . bx2dfb) (&lexical . bx2dfa) (&implementation-restriction . bx2df9) (&non-continuable . bx2df8) (&who . bx2df7) (&irritants . bx2df6) (&assertion . bx2df5) (&violation . bx2df4) (&error . bx2df3) (&serious . bx2df2) (&warning . bx2df1) (&message . bx2df0) (&condition . bx2def) (define-condition-type . bx2dee) (define-enumeration . bx2ded) (define-record-type . bx2dec) (parent-rtd . bx2deb) (nongenerative . bx2dea) (opaque . bx2de9) (sealed . bx2de8) (protocol . bx2de7) (parent . bx2de6) (immutable . bx2de5) (mutable . bx2de4) (fields . bx2de3) (error-handling-mode . bx2de2) (file-options . bx2de1) (buffer-mode . bx2de0) (eol-style . bx2ddf) (guard . bx2dde) (trace-define . bx2ddd) (trace-lambda . bx2ddc) (unsyntax-splicing . bx2ddb) (unsyntax . bx2dda) (unquote-splicing . bx2dd9) (unquote . bx2dd8) (_ . bx2dd7) (else . bx2dd6) (=> . bx2dd5) (... . bx2dd4) (assert . bx2dd3) (endianness . bx2dd2) (delay . bx2dd1) (time . bx2dd0) (do . bx2dcf) (cond . bx2dce) (let* . bx2dcd) (let . bx2dcc) (let*-values . bx2dcb) (let-values . bx2dca) (identifier-syntax . bx2dc9) (with-syntax . bx2dc8) (quasisyntax . bx2dc7) (quasiquote . bx2dc6) (syntax-rules . bx2dc5) (include . bx2dc4) (define-struct . bx2dc3) (record-constructor-descriptor . bx2dc2) (record-type-descriptor . bx2dc1) (case . bx2dc0) (parameterize . bx2dbf) (unless . bx2dbe) (when . bx2dbd) (or . bx2dbc) (and . bx2dbb) (if . bx2dba) (letrec* . bx2db9) (letrec . bx2db8) (type-descriptor . bx2db7) (case-lambda . bx2db6) (lambda . bx2db5) (syntax . bx2db4) (syntax-case . bx2db3) (quote . bx2db2) (foreign-call . bx2db1) (letrec-syntax . bx2db0) (let-syntax . bx2daf) (set! . bx2dae) (import . bx2dad) (begin . bx2dac) (module . bx2dab) (define-syntax . bx2daa) (define . bx2da9)) '((bx2b26 core-prim . &no-nans-rcd) (bx2b24 core-prim . &no-nans-rtd) (bx2b11 core-prim . &no-infinities-rcd) (bx2b0f core-prim . &no-infinities-rtd) (bx2afc core-prim . &i/o-encoding-rcd) (bx2afa core-prim . &i/o-encoding-rtd) (bx2ae1 core-prim . &i/o-decoding-rcd) (bx2adf core-prim . &i/o-decoding-rtd) (bx2acc core-prim . &i/o-port-rcd) (bx2aca core-prim . &i/o-port-rtd) (bx2ab1 core-prim . &i/o-file-does-not-exist-rcd) (bx2aaf core-prim . &i/o-file-does-not-exist-rtd) (bx2a9c core-prim . &i/o-file-already-exists-rcd) (bx2a9a core-prim . &i/o-file-already-exists-rtd) (bx2a87 core-prim . &i/o-file-is-read-only-rcd) (bx2a85 core-prim . &i/o-file-is-read-only-rtd) (bx2a72 core-prim . &i/o-file-protection-rcd) (bx2a70 core-prim . &i/o-file-protection-rtd) (bx2a5d core-prim . &i/o-filename-rcd) (bx2a5b core-prim . &i/o-filename-rtd) (bx2a42 core-prim . &i/o-invalid-position-rcd) (bx2a40 core-prim . &i/o-invalid-position-rtd) (bx2a27 core-prim . &i/o-write-rcd) (bx2a25 core-prim . &i/o-write-rtd) (bx2a12 core-prim . &i/o-read-rcd) (bx2a10 core-prim . &i/o-read-rtd) (bx29fd core-prim . &i/o-rcd) (bx29fb core-prim . &i/o-rtd) (bx29e8 core-prim . &undefined-rcd) (bx29e6 core-prim . &undefined-rtd) (bx29d3 core-prim . &syntax-rcd) (bx29d1 core-prim . &syntax-rtd) (bx29b2 core-prim . &lexical-rcd) (bx29b0 core-prim . &lexical-rtd) (bx299d core-prim . &implementation-restriction-rcd) (bx299b core-prim . &implementation-restriction-rtd) (bx2988 core-prim . &non-continuable-rcd) (bx2986 core-prim . &non-continuable-rtd) (bx2973 core-prim . &who-rcd) (bx2971 core-prim . &who-rtd) (bx2958 core-prim . &irritants-rcd) (bx2956 core-prim . &irritants-rtd) (bx293d core-prim . &assertion-rcd) (bx293b core-prim . &assertion-rtd) (bx2928 core-prim . &violation-rcd) (bx2926 core-prim . &violation-rtd) (bx2913 core-prim . &error-rcd) (bx2911 core-prim . &error-rtd) (bx28fe core-prim . &serious-rcd) (bx28fc core-prim . &serious-rtd) (bx28e9 core-prim . &warning-rcd) (bx28e7 core-prim . &warning-rtd) (bx28d4 core-prim . &message-rcd) (bx28d2 core-prim . &message-rtd) (bx2875 core-prim . &condition-rcd) (bx2873 core-prim . &condition-rtd) (bxe39 core-prim . syntax-error) (bxd5d core-prim . syntax-dispatch) (bx30cc core-prim . pretty-print) (bx30cb core-prim . eval-core) (bx30ca core-prim . set-symbol-value!) (bx30c9 core-prim . symbol-value) (bx30c8 core-prim . gensym) (bx30c7 core-prim . void) (bx2c33 core-prim . load) (bxe49 core-prim . interaction-environment) (bx30c6 core-prim . char-ready?) (bx30c5 core-prim . regexp?) (bx30c4 core-prim . read-line) (bx30c3 core-prim . gensym-prefix-set!) (bx30c2 core-prim . ungensym) (bx30c1 core-prim . alist->eq-hash-table) (bx30c0 core-prim . assoc-ref) (bx30bf core-prim . print) (bx30be core-prim . format) (bx30bd core-prim . host-os) (bx7ad core-prim . library-path) (bx30bc core-prim . standard-library-path) (bx30bb core-prim . file-newer?) (bx30ba core-prim . stat-mtime) (bx30b9 core-prim . write-to-file) (bx30b8 core-prim . file->list) (bx30b7 core-prim . file->string) (bx30b6 core-prim . digit->integer) (bx30b5 core-prim . call-with-string-input-port) (bx30b4 core-prim . call-with-string-io) (bx30b3 core-prim . string-split) (bx30b2 core-prim . bytevector-for-each) (bx30b1 core-prim . string->regexp) (bx30b0 core-prim . rxmatch) (bx30af core-prim . regexp-replace-all) (bx30ae core-prim . hashtable-for-each) (bx30ad core-prim . call-process) (bx30ac core-prim . local-tz-offset) (bx30ab core-prim . microseconds) (bx30aa core-prim . directory-list) (bx30a9 core-prim . set-current-directory!) (bx30a8 core-prim . expand-path) (bx30a7 core-prim . current-directory) (bx30a6 core-prim . %spawn) (bx30a5 core-prim . %waitpid) (bx30a4 core-prim . simple-struct-name) (bx30a3 core-prim . simple-struct-set!) (bx30a2 core-prim . simple-struct-ref) (bx30a1 core-prim . make-simple-struct) (bx30a0 core-prim . simple-struct?) (bx309f core-prim . pointer-ref-c-int64) (bx309e core-prim . pointer-ref-c-int32) (bx309d core-prim . pointer-ref-c-int16) (bx309c core-prim . pointer-ref-c-int8) (bx309b core-prim . pointer-ref-c-uint64) (bx309a core-prim . pointer-ref-c-uint32) (bx3099 core-prim . pointer-ref-c-uint16) (bx3098 core-prim . pointer-ref-c-uint8) (bx3097 core-prim . pointer-set-c-uint64!) (bx3096 core-prim . pointer-set-c-uint32!) (bx3095 core-prim . pointer-set-c-uint16!) (bx3094 core-prim . pointer-set-c-uint8!) (bx3093 core-prim . pointer-set-c-int64!) (bx3092 core-prim . pointer-set-c-int32!) (bx3091 core-prim . pointer-set-c-int16!) (bx3090 core-prim . pointer-set-c-int8!) (bx308f core-prim . pointer-set-c-pointer!) (bx308e core-prim . pointer-set-c-double!) (bx308d core-prim . pointer-set-c-float!) (bx308c core-prim . pointer-set-c-long-long!) (bx308b core-prim . pointer-set-c-long!) (bx308a core-prim . pointer-set-c-int!) (bx3089 core-prim . pointer-set-c-short!) (bx3088 core-prim . pointer-set-c-char!) (bx3087 core-prim . pointer-ref-c-pointer) (bx3086 core-prim . pointer-ref-c-double) (bx3085 core-prim . pointer-ref-c-float) (bx3084 core-prim . pointer-ref-c-unsigned-long-long) (bx3083 core-prim . pointer-ref-c-signed-long-long) (bx3082 core-prim . pointer-ref-c-unsigned-long) (bx3081 core-prim . pointer-ref-c-signed-long) (bx3080 core-prim . pointer-ref-c-unsigned-int) (bx307f core-prim . pointer-ref-c-signed-int) (bx307e core-prim . pointer-ref-c-unsigned-short) (bx307d core-prim . pointer-ref-c-signed-short) (bx307c core-prim . pointer-ref-c-unsigned-char) (bx307b core-prim . pointer-ref-c-signed-char) (bx307a core-prim . pointer->integer) (bx3079 core-prim . integer->pointer) (bx3078 core-prim . pointer?) (bx3077 core-prim . shared-errno) (bx3076 core-prim . %ffi-supported?) (bx3075 core-prim . %ffi-pointer->string) (bx3074 core-prim . %ffi-call->string-or-zero) (bx3073 core-prim . %ffi-call->double) (bx3072 core-prim . %ffi-call->void*) (bx3071 core-prim . %ffi-call->void) (bx3070 core-prim . %ffi-call->char) (bx306f core-prim . %ffi-call->int) (bx306e core-prim . %ffi-lookup) (bx306d core-prim . %ffi-open) (bx306c core-prim . %fork) (bx306b core-prim . %pipe) (bx306a core-prim . p) (bx3069 core-prim . open-output-string) (bx3068 core-prim . get-output-string) (bx3067 core-prim . file-stat-ctime) (bx3066 core-prim . file-stat-atime) (bx3065 core-prim . file-stat-mtime) (bx3064 core-prim . file-size-in-bytes) (bx3063 core-prim . file-writable?) (bx3062 core-prim . file-executable?) (bx3061 core-prim . file-readable?) (bx3060 core-prim . file-regular?) (bx305f core-prim . file-symbolic-link?) (bx305e core-prim . file-directory?) (bx305d core-prim . create-symbolic-link) (bx305c core-prim . rename-file) (bx305b core-prim . delete-directory) (bx305a core-prim . create-directory) (bx3059 core-prim . create-mosh-cache-dir) (bx3058 core-prim . get-environment-variables) (bx3057 core-prim . get-environment-variable) (bx3056 core-prim . join-wraps) (bx3055 core-prim . id->real-label) (bx3054 core-prim . same-marks?) (bx3053 core-prim . same-marks*?) (bx3052 core-prim . get-timeofday) (bx3051 core-prim . get-command-line) (bx3050 core-prim . sys-display) (bx304f core-prim . whereis) (bx304e core-prim . register) (bx304d core-prim . vm-join!) (bx304c core-prim . vm-set-value!) (bx304b core-prim . vm?) (bx304a core-prim . main-vm?) (bx3049 core-prim . vm-eval) (bx3048 core-prim . vm-self) (bx3047 core-prim . vm-start!) (bx3046 core-prim . make-vm) (bx3045 core-prim . mutex-try-lock!) (bx3044 core-prim . mutex-unlock!) (bx3043 core-prim . mutex-lock!) (bx3042 core-prim . mutex?) (bx3041 core-prim . make-mutex) (bx3040 core-prim . condition-variable-notify-all!) (bx303f core-prim . condition-variable-notify!) (bx303e core-prim . condition-variable-wait!) (bx303d core-prim . make-condition-variable) (bx303c core-prim . mosh-executable-path) (bx303b core-prim . make-file-options) (bx303a core-prim . source-info) (bx3039 core-prim . make-compiler-instruction) (bx3038 core-prim . make-instruction) (bx3037 core-prim . set-source-info!) (bx3036 core-prim . bignum?) (bx3035 core-prim . fast-equal?) (bx3034 core-prim . fasl-read) (bx3033 core-prim . fasl-write) (bx3032 core-prim . time-usage) (bx3031 core-prim . os-constant) (bx596 core-prim . make-parameter) (bx3030 core-prim . socket-port) (bx302f core-prim . socket-shutdown) (bx302e core-prim . socket-close) (bx302d core-prim . socket-send) (bx302c core-prim . socket-recv!) (bx302b core-prim . socket-recv) (bx302a core-prim . make-server-socket) (bx3029 core-prim . make-client-socket) (bx3028 core-prim . socket-accept) (bx3027 core-prim . socket?) (bx3026 core-prim . string-upcase) (bx3025 core-prim . string-titlecase) (bx3024 core-prim . string-normalize-nfkd) (bx3023 core-prim . string-normalize-nfkc) (bx3022 core-prim . string-normalize-nfd) (bx3021 core-prim . string-normalize-nfc) (bx3020 core-prim . string-foldcase) (bx301f core-prim . string-downcase) (bx301e core-prim . string-ci>?) (bx301d core-prim . string-ci>=?) (bx301c core-prim . string-ci=?) (bx301b core-prim . string-ci<?) (bx301a core-prim . string-ci<=?) (bx3019 core-prim . char-whitespace?) (bx3018 core-prim . char-upper-case?) (bx3017 core-prim . char-title-case?) (bx3016 core-prim . char-numeric?) (bx3015 core-prim . char-lower-case?) (bx3014 core-prim . char-general-category) (bx3013 core-prim . char-upcase) (bx3012 core-prim . char-titlecase) (bx3011 core-prim . char-foldcase) (bx3010 core-prim . char-downcase) (bx300f core-prim . char-ci>?) (bx300e core-prim . char-ci>=?) (bx300d core-prim . char-ci=?) (bx300c core-prim . char-ci<?) (bx300b core-prim . char-ci<=?) (bx300a core-prim . char-alphabetic?) (bxb8a core-prim . make-variable-transformer) (bxe3f core-prim . identifier?) (bxe2b core-prim . generate-temporaries) (bxe2d core-prim . free-identifier=?) (bxe43 core-prim . syntax->datum) (bxe41 core-prim . datum->syntax) (bxe2f core-prim . bound-identifier=?) (bx3009 core-prim . record-type-descriptor?) (bx3008 core-prim . record-predicate) (bx3007 core-prim . record-mutator) (bx3006 core-prim . record-constructor) (bx3005 core-prim . record-accessor) (bx3004 core-prim . make-record-type-descriptor) (bx3003 core-prim . make-record-constructor-descriptor) (bx3002 core-prim . record?) (bx3001 core-prim . record-type-uid) (bx3000 core-prim . record-type-sealed?) (bx2fff core-prim . record-type-parent) (bx2ffe core-prim . record-type-opaque?) (bx2ffd core-prim . record-type-name) (bx2ffc core-prim . record-type-generative?) (bx2ffb core-prim . record-type-field-names) (bx2ffa core-prim . record-rtd) (bx2ff9 core-prim . record-field-mutable?) (bx2ff8 core-prim . delete-file) (bx2ff7 core-prim . file-exists?) (bx2ff6 core-prim . vector-sort!) (bx2ff5 core-prim . vector-sort) (bx2ff4 core-prim . list-sort) (bx2ff3 core-prim . symbol-hash) (bx2ff2 core-prim . string-ci-hash) (bx2ff1 core-prim . string-hash) (bx2ff0 core-prim . equal-hash) (bx2fef core-prim . hashtable-equivalence-function) (bx2fee core-prim . make-hashtable) (bx2fed core-prim . hashtable-hash-function) (bx2fec core-prim . make-eqv-hashtable) (bx2feb core-prim . make-eq-hashtable) (bx2fea core-prim . hashtable?) (bx2fe9 core-prim . hashtable-update!) (bx2fe8 core-prim . hashtable-size) (bx2fe7 core-prim . hashtable-set!) (bx2fe6 core-prim . hashtable-ref) (bx2fe5 core-prim . hashtable-mutable?) (bx2fe4 core-prim . hashtable-keys) (bx2fe3 core-prim . hashtable-entries) (bx2fe2 core-prim . hashtable-delete!) (bx2fe1 core-prim . hashtable-copy) (bx2fe0 core-prim . hashtable-contains?) (bx2fdf core-prim . hashtable-clear!) (bx2fde core-prim . call-with-output-file) (bx2fdd core-prim . call-with-input-file) (bx2fdc core-prim . write-char) (bx2fdb core-prim . write) (bx2fda core-prim . with-output-to-file) (bx2fd9 core-prim . with-input-from-file) (bx2fd8 core-prim . read-char) (bx2fd7 core-prim . read) (bx2fd6 core-prim . peek-char) (bx2fd5 core-prim . open-output-file) (bx2fd4 core-prim . open-input-file) (bx2fd3 core-prim . newline) (bx2fd2 core-prim . display) (bx2fd1 core-prim . close-output-port) (bx2fd0 core-prim . close-input-port) (bx2fcf core-prim . eof-object?) (bx2fce core-prim . eof-object) (bx2fcd core-prim . current-error-port) (bx2fcc core-prim . current-output-port) (bx2fcb core-prim . current-input-port) (bx2fca core-prim . output-port?) (bx2fc9 core-prim . input-port?) (bx2fc8 core-prim . utf-8-codec) (bx2fc7 core-prim . utf-16-codec) (bx2fc6 core-prim . transcoder-error-handling-mode) (bx2fc5 core-prim . transcoder-eol-style) (bx2fc4 core-prim . transcoder-codec) (bx2fc3 core-prim . transcoded-port) (bx2fc2 core-prim . textual-port?) (bx2fc1 core-prim . string->bytevector) (bx2fc0 core-prim . standard-output-port) (bx2fbf core-prim . standard-input-port) (bx2fbe core-prim . standard-error-port) (bx2fbd core-prim . set-port-position!) (bx2fbc core-prim . put-u8) (bx2fbb core-prim . put-string) (bx2fba core-prim . put-datum) (bx2fb9 core-prim . put-char) (bx2fb8 core-prim . put-bytevector) (bx2fb7 core-prim . port?) (bx2fb6 core-prim . port-transcoder) (bx2fb5 core-prim . port-position) (bx2fb4 core-prim . port-has-set-port-position!?) (bx2fb3 core-prim . port-has-port-position?) (bx2fb2 core-prim . port-eof?) (bx2fb1 core-prim . output-port-buffer-mode) (bx2fb0 core-prim . open-string-output-port) (bx2faf core-prim . open-string-input-port) (bx2fae core-prim . open-file-output-port) (bx2fad core-prim . open-file-input/output-port) (bx2fac core-prim . open-file-input-port) (bx2fab core-prim . open-bytevector-output-port) (bx2faa core-prim . open-bytevector-input-port) (bx2fa9 core-prim . native-transcoder) (bx2fa8 core-prim . native-eol-style) (bx2fa7 core-prim . make-transcoder) (bx2fa6 core-prim . latin-1-codec) (bx2a21 core-prim . make-i/o-write-error) (bx2a0c core-prim . make-i/o-read-error) (bx2ac2 core-prim . make-i/o-port-error) (bx2a38 core-prim . make-i/o-invalid-position-error) (bx2a53 core-prim . make-i/o-filename-error) (bx2a6c core-prim . make-i/o-file-protection-error) (bx2a81 core-prim . make-i/o-file-is-read-only-error) (bx2aab core-prim . make-i/o-file-does-not-exist-error) (bx2a96 core-prim . make-i/o-file-already-exists-error) (bx29f7 core-prim . make-i/o-error) (bx2af2 core-prim . make-i/o-encoding-error) (bx2adb core-prim . make-i/o-decoding-error) (bx2fa5 core-prim . make-custom-textual-output-port) (bx2fa4 core-prim . make-custom-textual-input/output-port) (bx2fa3 core-prim . make-custom-textual-input-port) (bx2fa2 core-prim . make-custom-binary-output-port) (bx2fa1 core-prim . make-custom-binary-input/output-port) (bx2fa0 core-prim . make-custom-binary-input-port) (bx2f9f core-prim . make-bytevector) (bx2f9e core-prim . lookahead-u8) (bx2f9d core-prim . lookahead-char) (bx2a23 core-prim . i/o-write-error?) (bx2a0e core-prim . i/o-read-error?) (bx2ac6 core-prim . i/o-port-error?) (bx2a3c core-prim . i/o-invalid-position-error?) (bx2a57 core-prim . i/o-filename-error?) (bx2a6e core-prim . i/o-file-protection-error?) (bx2a83 core-prim . i/o-file-is-read-only-error?) (bx2aad core-prim . i/o-file-does-not-exist-error?) (bx2a98 core-prim . i/o-file-already-exists-error?) (bx29f9 core-prim . i/o-error?) (bx2a3e core-prim . i/o-error-position) (bx2ac8 core-prim . i/o-error-port) (bx2a59 core-prim . i/o-error-filename) (bx2af6 core-prim . i/o-encoding-error?) (bx2af8 core-prim . i/o-encoding-error-char) (bx2add core-prim . i/o-decoding-error?) (bx2f9c core-prim . get-u8) (bx2f9b core-prim . get-string-n!) (bx2f9a core-prim . get-string-n) (bx2f99 core-prim . get-string-all) (bx2f98 core-prim . get-line) (bx2f97 core-prim . get-datum) (bx2f96 core-prim . get-char) (bx2f95 core-prim . get-bytevector-some) (bx2f94 core-prim . get-bytevector-n!) (bx2f93 core-prim . get-bytevector-n) (bx2f92 core-prim . get-bytevector-all) (bx2f91 core-prim . flush-output-port) (bx2f90 core-prim . close-port) (bxe19 core-prim . scheme-report-environment) (bx2f8f core-prim . quotient) (bxe17 core-prim . null-environment) (bx2f8e core-prim . remainder) (bx2f8d core-prim . modulo) (bx2f8c core-prim . inexact->exact) (bx2f8b core-prim . force) (bx2f8a core-prim . exact->inexact) (bx2f89 core-prim . make-promise) (bx2f88 core-prim . exit) (bx2c2d core-prim . command-line) (bx2f87 core-prim . string-fill!) (bx2f86 core-prim . string-set!) (bx2f85 core-prim . set-cdr!) (bx2f84 core-prim . set-car!) (bx2f83 core-prim . remove) (bx2f82 core-prim . remv) (bx2f81 core-prim . remp) (bx2f80 core-prim . remq) (bx2f7f core-prim . partition) (bx2f7e core-prim . memv) (bx2f7d core-prim . memq) (bx2f7c core-prim . memp) (bx2f7b core-prim . member) (bx2f7a core-prim . exists) (bx2f79 core-prim . for-all) (bx2f78 core-prim . fold-right) (bx2f77 core-prim . fold-left) (bx2f76 core-prim . find) (bx2f75 core-prim . filter) (bx2f74 core-prim . cons*) (bx2f73 core-prim . assv) (bx2f72 core-prim . assq) (bx2f71 core-prim . assp) (bx2f70 core-prim . assoc) (bx2f6f core-prim . call-with-string-output-port) (bx2f6e core-prim . call-with-port) (bx2f6d core-prim . call-with-bytevector-output-port) (bx2f6c core-prim . bytevector->string) (bx2f6b core-prim . buffer-mode?) (bx2f6a core-prim . binary-port?) (bx2f69 core-prim . with-exception-handler) (bx2f68 core-prim . raise-continuable) (bx2f67 core-prim . raise) (bxe1d core-prim . eval) (bxe15 core-prim . environment) (bx2f66 core-prim . make-enumeration) (bx2f65 core-prim . enum-set=?) (bx2f64 core-prim . enum-set-universe) (bx2f63 core-prim . enum-set-union) (bx2f62 core-prim . enum-set-subset?) (bx2f61 core-prim . enum-set-projection) (bx2f60 core-prim . enum-set-member?) (bx2f5f core-prim . enum-set-intersection) (bx2f5e core-prim . enum-set-indexer) (bx2f5d core-prim . enum-set-difference) (bx2f5c core-prim . enum-set-constructor) (bx2f5b core-prim . enum-set-complement) (bx2f5a core-prim . enum-set->list) (bx296d core-prim . who-condition?) (bx28e5 core-prim . warning?) (bx2924 core-prim . violation?) (bx29e4 core-prim . undefined-violation?) (bx29cb core-prim . syntax-violation?) (bx29cf core-prim . syntax-violation-subform) (bx29cd core-prim . syntax-violation-form) (bxe3d core-prim . syntax-violation) (bx2f59 core-prim . simple-conditions) (bx28fa core-prim . serious-condition?) (bx2984 core-prim . non-continuable-violation?) (bx28ce core-prim . message-condition?) (bx2969 core-prim . make-who-condition) (bx28e3 core-prim . make-warning) (bx2922 core-prim . make-violation) (bx29e2 core-prim . make-undefined-violation) (bx29c5 core-prim . make-syntax-violation) (bx28f8 core-prim . make-serious-condition) (bx2982 core-prim . make-non-continuable-violation) (bx28ca core-prim . make-message-condition) (bx29ac core-prim . make-lexical-violation) (bx294e core-prim . make-irritants-condition) (bx2997 core-prim . make-implementation-restriction-violation) (bx290d core-prim . make-error) (bx2937 core-prim . make-assertion-violation) (bx29ae core-prim . lexical-violation?) (bx2952 core-prim . irritants-condition?) (bx2999 core-prim . implementation-restriction-violation?) (bx290f core-prim . error?) (bx296f core-prim . condition-who) (bx2f58 core-prim . condition-predicate) (bx28d0 core-prim . condition-message) (bx2954 core-prim . condition-irritants) (bx2f57 core-prim . condition-accessor) (bx2f56 core-prim . condition) (bx2939 core-prim . assertion-violation?) (bx2f55 core-prim . condition?) (bx2f54 core-prim . utf32->string) (bx2f53 core-prim . utf16->string) (bx2f52 core-prim . utf8->string) (bx2f51 core-prim . uint-list->bytevector) (bx2f50 core-prim . u8-list->bytevector) (bx2f4f core-prim . string->utf8) (bx2f4e core-prim . string->utf32) (bx2f4d core-prim . string->utf16) (bx2f4c core-prim . sint-list->bytevector) (bx2f4b core-prim . native-endianness) (bx2f4a core-prim . bytevector?) (bx2f49 core-prim . bytevector=?) (bx2f48 core-prim . bytevector-uint-set!) (bx2f47 core-prim . bytevector-uint-ref) (bx2f46 core-prim . bytevector-u8-set!) (bx2f45 core-prim . bytevector-u8-ref) (bx2f44 core-prim . bytevector-u64-set!) (bx2f43 core-prim . bytevector-u64-ref) (bx2f42 core-prim . bytevector-u64-native-set!) (bx2f41 core-prim . bytevector-u64-native-ref) (bx2f40 core-prim . bytevector-u32-set!) (bx2f3f core-prim . bytevector-u32-ref) (bx2f3e core-prim . bytevector-u32-native-set!) (bx2f3d core-prim . bytevector-u32-native-ref) (bx2f3c core-prim . bytevector-u16-set!) (bx2f3b core-prim . bytevector-u16-ref) (bx2f3a core-prim . bytevector-u16-native-set!) (bx2f39 core-prim . bytevector-u16-native-ref) (bx2f38 core-prim . bytevector-sint-set!) (bx2f37 core-prim . bytevector-sint-ref) (bx2f36 core-prim . bytevector-s8-set!) (bx2f35 core-prim . bytevector-s8-ref) (bx2f34 core-prim . bytevector-s64-set!) (bx2f33 core-prim . bytevector-s64-ref) (bx2f32 core-prim . bytevector-s64-native-set!) (bx2f31 core-prim . bytevector-s64-native-ref) (bx2f30 core-prim . bytevector-s32-set!) (bx2f2f core-prim . bytevector-s32-ref) (bx2f2e core-prim . bytevector-s32-native-set!) (bx2f2d core-prim . bytevector-s32-native-ref) (bx2f2c core-prim . bytevector-s16-set!) (bx2f2b core-prim . bytevector-s16-ref) (bx2f2a core-prim . bytevector-s16-native-set!) (bx2f29 core-prim . bytevector-s16-native-ref) (bx2f28 core-prim . bytevector-length) (bx2f27 core-prim . bytevector-ieee-single-ref) (bx2f26 core-prim . bytevector-ieee-single-set!) (bx2f25 core-prim . bytevector-ieee-single-native-set!) (bx2f24 core-prim . bytevector-ieee-single-native-ref) (bx2f23 core-prim . bytevector-ieee-double-set!) (bx2f22 core-prim . bytevector-ieee-double-ref) (bx2f21 core-prim . bytevector-ieee-double-native-set!) (bx2f20 core-prim . bytevector-ieee-double-native-ref) (bx2f1f core-prim . bytevector-fill!) (bx2f1e core-prim . bytevector-copy!) (bx2f1d core-prim . bytevector-copy) (bx2f1c core-prim . bytevector->uint-list) (bx2f1b core-prim . bytevector->u8-list) (bx2f1a core-prim . bytevector->sint-list) (bx2b22 core-prim . no-nans-violation?) (bx2b0d core-prim . no-infinities-violation?) (bx2b20 core-prim . make-no-nans-violation) (bx2b0b core-prim . make-no-infinities-violation) (bx2f19 core-prim . real->flonum) (bx2f18 core-prim . flzero?) (bx2f17 core-prim . fltruncate) (bx2f16 core-prim . fltan) (bx2f15 core-prim . flsqrt) (bx2f14 core-prim . flsin) (bx2f13 core-prim . flround) (bx2f12 core-prim . flpositive?) (bx2f11 core-prim . flonum?) (bx2f10 core-prim . flodd?) (bx2f0f core-prim . flnumerator) (bx2f0e core-prim . flnegative?) (bx2f0d core-prim . flnan?) (bx2f0c core-prim . flmod0) (bx2f0b core-prim . flmod) (bx2f0a core-prim . flmin) (bx2f09 core-prim . flmax) (bx2f08 core-prim . fllog) (bx2f07 core-prim . flinteger?) (bx2f06 core-prim . flinfinite?) (bx2f05 core-prim . flfloor) (bx2f04 core-prim . flfinite?) (bx2f03 core-prim . flexpt) (bx2f02 core-prim . flexp) (bx2f01 core-prim . fleven?) (bx2f00 core-prim . fldiv0-and-mod0) (bx2eff core-prim . fldiv0) (bx2efe core-prim . fldiv-and-mod) (bx2efd core-prim . fldiv) (bx2efc core-prim . fldenominator) (bx2efb core-prim . flcos) (bx2efa core-prim . flceiling) (bx2ef9 core-prim . flatan) (bx2ef8 core-prim . flasin) (bx2ef7 core-prim . flacos) (bx2ef6 core-prim . flabs) (bx2ef5 core-prim . fl>?) (bx2ef4 core-prim . fl>=?) (bx2ef3 core-prim . fl=?) (bx2ef2 core-prim . fl<?) (bx2ef1 core-prim . fl<=?) (bx2ef0 core-prim . fl/) (bx2eef core-prim . fl-) (bx2eee core-prim . fl+) (bx2eed core-prim . fl*) (bx2eec core-prim . fixnum->flonum) (bx2eeb core-prim . fxzero?) (bx2eea core-prim . fxxor) (bx2ee9 core-prim . fxrotate-bit-field) (bx2ee8 core-prim . fxreverse-bit-field) (bx2ee7 core-prim . fxpositive?) (bx2ee6 core-prim . fxodd?) (bx2ee5 core-prim . fxnot) (bx2ee4 core-prim . fxnegative?) (bx2ee3 core-prim . fxmod0) (bx2ee2 core-prim . fxmod) (bx2ee1 core-prim . fxmin) (bx2ee0 core-prim . fxmax) (bx2edf core-prim . fxlength) (bx2ede core-prim . fxior) (bx2edd core-prim . fxif) (bx2edc core-prim . fxfirst-bit-set) (bx2edb core-prim . fxeven?) (bx2eda core-prim . fxdiv0-and-mod0) (bx2ed9 core-prim . fxdiv0) (bx2ed8 core-prim . fxdiv-and-mod) (bx2ed7 core-prim . fxdiv) (bx2ed6 core-prim . fxcopy-bit-field) (bx2ed5 core-prim . fxcopy-bit) (bx2ed4 core-prim . fxbit-set?) (bx2ed3 core-prim . fxbit-field) (bx2ed2 core-prim . fxbit-count) (bx2ed1 core-prim . fxarithmetic-shift-right) (bx2ed0 core-prim . fxarithmetic-shift-left) (bx2ecf core-prim . fxarithmetic-shift) (bx2ece core-prim . fxand) (bx2ecd core-prim . fx>?) (bx2ecc core-prim . fx>=?) (bx2ecb core-prim . fx=?) (bx2eca core-prim . fx<?) (bx2ec9 core-prim . fx<=?) (bx2ec8 core-prim . fx-/carry) (bx2ec7 core-prim . fx-) (bx2ec6 core-prim . fx+/carry) (bx2ec5 core-prim . fx+) (bx2ec4 core-prim . fx*/carry) (bx2ec3 core-prim . fx*) (bx2ec2 core-prim . greatest-fixnum) (bx2ec1 core-prim . least-fixnum) (bx2ec0 core-prim . fixnum-width) (bx2ebf core-prim . fixnum?) (bx2ebe core-prim . bitwise-rotate-bit-field) (bx2ebd core-prim . bitwise-reverse-bit-field) (bx2ebc core-prim . bitwise-length) (bx2ebb core-prim . bitwise-if) (bx2eba core-prim . bitwise-first-bit-set) (bx2eb9 core-prim . bitwise-copy-bit-field) (bx2eb8 core-prim . bitwise-copy-bit) (bx2eb7 core-prim . bitwise-bit-set?) (bx2eb6 core-prim . bitwise-bit-field) (bx2eb5 core-prim . bitwise-bit-count) (bx2eb4 core-prim . bitwise-xor) (bx2eb3 core-prim . bitwise-ior) (bx2eb2 core-prim . bitwise-and) (bx2eb1 core-prim . bitwise-not) (bx2eb0 core-prim . bitwise-arithmetic-shift-right) (bx2eaf core-prim . bitwise-arithmetic-shift-left) (bx2eae core-prim . bitwise-arithmetic-shift) (bx2ead core-prim . zero?) (bx2eac core-prim . vector?) (bx2eab core-prim . vector-set!) (bx2eaa core-prim . vector-ref) (bx2ea9 core-prim . vector-map) (bx2ea8 core-prim . vector-length) (bx2ea7 core-prim . vector-for-each) (bx2ea6 core-prim . vector-fill!) (bx2ea5 core-prim . vector->list) (bx2ea4 core-prim . vector) (bx2ea3 core-prim . values) (bx2ea2 core-prim . truncate) (bx2ea1 core-prim . tan) (bx2ea0 core-prim . symbol?) (bx2e9f core-prim . symbol=?) (bx2e9e core-prim . symbol->string) (bx2e9d core-prim . substring) (bx2e9c core-prim . string?) (bx2e9b core-prim . string>?) (bx2e9a core-prim . string>=?) (bx2e99 core-prim . string=?) (bx2e98 core-prim . string<?) (bx2e97 core-prim . string<=?) (bx2e96 core-prim . string-ref) (bx2e95 core-prim . string-length) (bx2e94 core-prim . string-for-each) (bx2e93 core-prim . string-copy) (bx2e92 core-prim . string-append) (bx2e91 core-prim . string->symbol) (bx2e90 core-prim . string->number) (bx2e8f core-prim . string->list) (bx2e8e core-prim . string) (bx2e8d core-prim . sqrt) (bx2e8c core-prim . sin) (bx2e8b core-prim . round) (bx2e8a core-prim . reverse) (bx2e89 core-prim . real?) (bx2e88 core-prim . real-valued?) (bx2e87 core-prim . real-part) (bx2e86 core-prim . rationalize) (bx2e85 core-prim . rational?) (bx2e84 core-prim . rational-valued?) (bx2e83 core-prim . procedure?) (bx2e82 core-prim . positive?) (bx2e81 core-prim . pair?) (bx2e80 core-prim . odd?) (bx2e7f core-prim . numerator) (bx2e7e core-prim . number?) (bx2e7d core-prim . number->string) (bx2e7c core-prim . null?) (bx2e7b core-prim . not) (bx2e7a core-prim . negative?) (bx2e79 core-prim . nan?) (bx2e78 core-prim . min) (bx2e77 core-prim . max) (bx2e76 core-prim . map) (bx2e75 core-prim . make-vector) (bx2e74 core-prim . make-string) (bx2e73 core-prim . make-rectangular) (bx2e72 core-prim . make-polar) (bx2e71 core-prim . magnitude) (bx2e70 core-prim . log) (bx2e6f core-prim . list?) (bx2e6e core-prim . list-tail) (bx2e6d core-prim . list-ref) (bx2e6c core-prim . list->vector) (bx2e6b core-prim . list->string) (bx2e6a core-prim . list) (bx2e69 core-prim . length) (bx2e68 core-prim . lcm) (bx2e67 core-prim . integer?) (bx2e66 core-prim . integer-valued?) (bx2e65 core-prim . integer->char) (bx2e64 core-prim . infinite?) (bx2e63 core-prim . inexact?) (bx2e62 core-prim . inexact) (bx2e61 core-prim . imag-part) (bx2e60 core-prim . gcd) (bx2e5f core-prim . for-each) (bx2e5e core-prim . floor) (bx2e5d core-prim . finite?) (bx2e5c core-prim . expt) (bx2e5b core-prim . exp) (bx2e5a core-prim . exact?) (bx2e59 core-prim . exact-integer-sqrt) (bx2e58 core-prim . exact) (bx2e57 core-prim . even?) (bx2e56 core-prim . error) (bx2e55 core-prim . eqv?) (bx2e54 core-prim . equal?) (bx2e53 core-prim . eq?) (bx2e52 core-prim . dynamic-wind) (bx2e51 core-prim . div0-and-mod0) (bx2e50 core-prim . mod0) (bx2e4f core-prim . div0) (bx2e4e core-prim . div-and-mod) (bx2e4d core-prim . mod) (bx2e4c core-prim . div) (bx2e4b core-prim . denominator) (bx2e4a core-prim . cos) (bx2e49 core-prim . cons) (bx2e48 core-prim . complex?) (bx2e47 core-prim . char?) (bx2e46 core-prim . char>?) (bx2e45 core-prim . char>=?) (bx2e44 core-prim . char=?) (bx2e43 core-prim . char<?) (bx2e42 core-prim . char<=?) (bx2e41 core-prim . char->integer) (bx2e40 core-prim . ceiling) (bx2e3f core-prim . call-with-values) (bx2e3e core-prim . call/cc) (bx2e3d core-prim . call-with-current-continuation) (bx2e3c core-prim . cddddr) (bx2e3b core-prim . cdddar) (bx2e3a core-prim . cddadr) (bx2e39 core-prim . cddaar) (bx2e38 core-prim . cdaddr) (bx2e37 core-prim . cdadar) (bx2e36 core-prim . cdaadr) (bx2e35 core-prim . cdaaar) (bx2e34 core-prim . cadddr) (bx2e33 core-prim . caddar) (bx2e32 core-prim . cadadr) (bx2e31 core-prim . cadaar) (bx2e30 core-prim . caaddr) (bx2e2f core-prim . caadar) (bx2e2e core-prim . caaadr) (bx2e2d core-prim . caaaar) (bx2e2c core-prim . cdddr) (bx2e2b core-prim . cddar) (bx2e2a core-prim . cdadr) (bx2e29 core-prim . cdaar) (bx2e28 core-prim . caddr) (bx2e27 core-prim . cadar) (bx2e26 core-prim . caadr) (bx2e25 core-prim . caaar) (bx2e24 core-prim . cddr) (bx2e23 core-prim . cdar) (bx2e22 core-prim . cadr) (bx2e21 core-prim . caar) (bx2e20 core-prim . cdr) (bx2e1f core-prim . car) (bx2e1e core-prim . boolean?) (bx2e1d core-prim . boolean=?) (bx2e1c core-prim . atan) (bx2e1b core-prim . assertion-violation) (bxe37 core-prim . assertion-error) (bx2e1a core-prim . asin) (bx2e19 core-prim . apply) (bx2e18 core-prim . append) (bx2e17 core-prim . angle) (bx2e16 core-prim . acos) (bx2e15 core-prim . abs) (bx2e14 core-prim . /) (bx2e13 core-prim . *) (bx2e12 core-prim . -) (bx2e11 core-prim . +) (bx2e10 core-prim . >=) (bx2e0f core-prim . >) (bx2e0e core-prim . =) (bx2e0d core-prim . <=) (bx2e0c core-prim . <) (bx2e0b core-prim . library) (bx2e0a $core-rtd &no-nans-rtd &no-nans-rcd) (bx2e09 $core-rtd &no-infinities-rtd &no-infinities-rcd) (bx2e08 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bx2e07 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bx2e06 $core-rtd &i/o-port-rtd &i/o-port-rcd) (bx2e05 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bx2e04 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bx2e03 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bx2e02 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bx2e01 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bx2e00 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bx2dff $core-rtd &i/o-write-rtd &i/o-write-rcd) (bx2dfe $core-rtd &i/o-read-rtd &i/o-read-rcd) (bx2dfd $core-rtd &i/o-rtd &i/o-rcd) (bx2dfc $core-rtd &undefined-rtd &undefined-rcd) (bx2dfb $core-rtd &syntax-rtd &syntax-rcd) (bx2dfa $core-rtd &lexical-rtd &lexical-rcd) (bx2df9 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bx2df8 $core-rtd &non-continuable-rtd &non-continuable-rcd) (bx2df7 $core-rtd &who-rtd &who-rcd) (bx2df6 $core-rtd &irritants-rtd &irritants-rcd) (bx2df5 $core-rtd &assertion-rtd &assertion-rcd) (bx2df4 $core-rtd &violation-rtd &violation-rcd) (bx2df3 $core-rtd &error-rtd &error-rcd) (bx2df2 $core-rtd &serious-rtd &serious-rcd) (bx2df1 $core-rtd &warning-rtd &warning-rcd) (bx2df0 $core-rtd &message-rtd &message-rcd) (bx2def $core-rtd &condition-rtd &condition-rcd) (bx2dee macro . define-condition-type) (bx2ded macro . define-enumeration) (bx2dec macro . define-record-type) (bx2deb macro . parent-rtd) (bx2dea macro . nongenerative) (bx2de9 macro . opaque) (bx2de8 macro . sealed) (bx2de7 macro . protocol) (bx2de6 macro . parent) (bx2de5 macro . immutable) (bx2de4 macro . mutable) (bx2de3 macro . fields) (bx2de2 macro . error-handling-mode) (bx2de1 macro . file-options) (bx2de0 macro . buffer-mode) (bx2ddf macro . eol-style) (bx2dde macro . guard) (bx2ddd macro . trace-define) (bx2ddc macro . trace-lambda) (bx2ddb macro . unsyntax-splicing) (bx2dda macro . unsyntax) (bx2dd9 macro . unquote-splicing) (bx2dd8 macro . unquote) (bx2dd7 macro . _) (bx2dd6 macro . else) (bx2dd5 macro . =>) (bx2dd4 macro . ...) (bx2dd3 macro . assert) (bx2dd2 macro . endianness) (bx2dd1 macro . delay) (bx2dd0 macro . time) (bx2dcf macro . do) (bx2dce macro . cond) (bx2dcd macro . let*) (bx2dcc macro . let) (bx2dcb macro . let*-values) (bx2dca macro . let-values) (bx2dc9 macro . identifier-syntax) (bx2dc8 macro . with-syntax) (bx2dc7 macro . quasisyntax) (bx2dc6 macro . quasiquote) (bx2dc5 macro . syntax-rules) (bx2dc4 macro . include) (bx2dc3 macro . define-struct) (bx2dc2 core-macro . record-constructor-descriptor) (bx2dc1 core-macro . record-type-descriptor) (bx2dc0 macro . case) (bx2dbf macro . parameterize) (bx2dbe macro . unless) (bx2dbd macro . when) (bx2dbc core-macro . or) (bx2dbb core-macro . and) (bx2dba core-macro . if) (bx2db9 core-macro . letrec*) (bx2db8 core-macro . letrec) (bx2db7 core-macro . type-descriptor) (bx2db6 core-macro . case-lambda) (bx2db5 core-macro . lambda) (bx2db4 core-macro . syntax) (bx2db3 core-macro . syntax-case) (bx2db2 core-macro . quote) (bx2db1 core-macro . foreign-call) (bx2db0 letrec-syntax) (bx2daf let-syntax) (bx2dae set!) (bx2dad import) (bx2dac begin) (bx2dab module) (bx2daa define-syntax) (bx2da9 define)) values values '#f '#f '#f '#f) (bx982@bx7ce@install-library 'bx30ed '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bx30cc) (eval-core . bx30cb) (set-symbol-value! . bx30ca) (symbol-value . bx30c9) (gensym . bx30c8) (void . bx30c7)) '() values values '#f '#f '#f '#f) (bx982@bx7ce@install-library 'bx30ee '(mosh) '() '() '() '() '((set-symbol-value! . bx30ca) (symbol-value . bx30c9) (regexp? . bx30c5) (read-line . bx30c4) (ungensym . bx30c2) (alist->eq-hash-table . bx30c1) (assoc-ref . bx30c0) (print . bx30bf) (format . bx30be) (host-os . bx30bd) (library-path . bx7ad) (standard-library-path . bx30bc) (file-newer? . bx30bb) (stat-mtime . bx30ba) (digit->integer . bx30b6) (call-with-string-input-port . bx30b5) (call-with-string-io . bx30b4) (string-split . bx30b3) (bytevector-for-each . bx30b2) (string->regexp . bx30b1) (rxmatch . bx30b0) (regexp-replace-all . bx30af) (hashtable-for-each . bx30ae) (set-current-directory! . bx30a9) (expand-path . bx30a8) (current-directory . bx30a7) (p . bx306a) (get-timeofday . bx3052) (get-command-line . bx3051) (sys-display . bx3050) (whereis . bx304f) (register . bx304e) (vm-join! . bx304d) (vm-set-value! . bx304c) (vm? . bx304b) (main-vm? . bx304a) (vm-eval . bx3049) (vm-self . bx3048) (vm-start! . bx3047) (make-vm . bx3046) (mutex-try-lock! . bx3045) (mutex-unlock! . bx3044) (mutex-lock! . bx3043) (mutex? . bx3042) (make-mutex . bx3041) (condition-variable-notify-all! . bx3040) (condition-variable-notify! . bx303f) (condition-variable-wait! . bx303e) (make-condition-variable . bx303d) (mosh-executable-path . bx303c) (make-file-options . bx303b) (source-info . bx303a) (make-compiler-instruction . bx3039) (make-instruction . bx3038) (set-source-info! . bx3037) (bignum? . bx3036) (fast-equal? . bx3035) (fasl-read . bx3034) (fasl-write . bx3033) (time-usage . bx3032) (os-constant . bx3031) (time . bx2dd0) (include . bx2dc4)) '() values values '#f '#f '#f '#f) (bx982@bx7ce@install-library 'bx30ef '(system) '() '() '() '() '((gensym-prefix-set! . bx30c3) (write-to-file . bx30b9) (file->list . bx30b8) (file->string . bx30b7) (call-process . bx30ad) (local-tz-offset . bx30ac) (microseconds . bx30ab) (directory-list . bx30aa) (expand-path . bx30a8) (%spawn . bx30a6) (%waitpid . bx30a5) (simple-struct-name . bx30a4) (simple-struct-set! . bx30a3) (simple-struct-ref . bx30a2) (make-simple-struct . bx30a1) (simple-struct? . bx30a0) (pointer-ref-c-int64 . bx309f) (pointer-ref-c-int32 . bx309e) (pointer-ref-c-int16 . bx309d) (pointer-ref-c-int8 . bx309c) (pointer-ref-c-uint64 . bx309b) (pointer-ref-c-uint32 . bx309a) (pointer-ref-c-uint16 . bx3099) (pointer-ref-c-uint8 . bx3098) (pointer-set-c-uint64! . bx3097) (pointer-set-c-uint32! . bx3096) (pointer-set-c-uint16! . bx3095) (pointer-set-c-uint8! . bx3094) (pointer-set-c-int64! . bx3093) (pointer-set-c-int32! . bx3092) (pointer-set-c-int16! . bx3091) (pointer-set-c-int8! . bx3090) (pointer-set-c-pointer! . bx308f) (pointer-set-c-double! . bx308e) (pointer-set-c-float! . bx308d) (pointer-set-c-long-long! . bx308c) (pointer-set-c-long! . bx308b) (pointer-set-c-int! . bx308a) (pointer-set-c-short! . bx3089) (pointer-set-c-char! . bx3088) (pointer-ref-c-pointer . bx3087) (pointer-ref-c-double . bx3086) (pointer-ref-c-float . bx3085) (pointer-ref-c-unsigned-long-long . bx3084) (pointer-ref-c-signed-long-long . bx3083) (pointer-ref-c-unsigned-long . bx3082) (pointer-ref-c-signed-long . bx3081) (pointer-ref-c-unsigned-int . bx3080) (pointer-ref-c-signed-int . bx307f) (pointer-ref-c-unsigned-short . bx307e) (pointer-ref-c-signed-short . bx307d) (pointer-ref-c-unsigned-char . bx307c) (pointer-ref-c-signed-char . bx307b) (pointer->integer . bx307a) (integer->pointer . bx3079) (pointer? . bx3078) (shared-errno . bx3077) (%ffi-supported? . bx3076) (%ffi-pointer->string . bx3075) (%ffi-call->string-or-zero . bx3074) (%ffi-call->double . bx3073) (%ffi-call->void* . bx3072) (%ffi-call->void . bx3071) (%ffi-call->char . bx3070) (%ffi-call->int . bx306f) (%ffi-lookup . bx306e) (%ffi-open . bx306d) (%fork . bx306c) (%pipe . bx306b) (open-output-string . bx3069) (get-output-string . bx3068) (file-stat-ctime . bx3067) (file-stat-atime . bx3066) (file-stat-mtime . bx3065) (file-size-in-bytes . bx3064) (file-writable? . bx3063) (file-executable? . bx3062) (file-readable? . bx3061) (file-regular? . bx3060) (file-symbolic-link? . bx305f) (file-directory? . bx305e) (create-symbolic-link . bx305d) (rename-file . bx305c) (delete-directory . bx305b) (create-directory . bx305a) (create-mosh-cache-dir . bx3059) (get-environment-variables . bx3058) (get-environment-variable . bx3057) (join-wraps . bx3056) (id->real-label . bx3055) (same-marks? . bx3054) (same-marks*? . bx3053) (make-parameter . bx596) (socket-port . bx3030) (socket-shutdown . bx302f) (socket-close . bx302e) (socket-send . bx302d) (socket-recv! . bx302c) (socket-recv . bx302b) (make-server-socket . bx302a) (make-client-socket . bx3029) (socket-accept . bx3028) (socket? . bx3027) (parameterize . bx2dbf)) '() values values '#f '#f '#f '#f))
((lambda (bx2c1c@add-library-path! bx2c1e@parse-and-add-library-path bx2c20@for-each-with-index bx2c22@rpad bx2c24@condition-printer bx2c26@record->field-alist bx2c28@map-with-index bx2c2a@repl bx2c2c@trace-printer bx2c2e@command-line bx2c30@local-library-path bx2c32@load/args bx2c34@load bx2c36@ironscheme-build bx2c38@eval-top-level bx2c3a@compile-system-libraries bx2c3c@compile bx2c3e@compile->closure bx2c40@pre-compile-r6rs-file bx2c42@load-r6rs-top-level bx2c44@load-r6rs-top-level-sexp bx2c46@prefix-inc bx2c48@prefix-inc!) (begin (set! bx2c1c@add-library-path! (lambda (bx2c81@path) (bx972@bx7ae@library-path (append (bx972@bx7ae@library-path) (list bx2c81@path))))) (set! bx2c1e@parse-and-add-library-path (lambda (bx2c83@paths bx2c84@message) ((lambda (bx2c87@t) (if bx2c87@t ((lambda (bx2c89@paths) (for-each (lambda (bx2c8b@path) (if (file-exists? bx2c8b@path) (bx2c1c@add-library-path! (expand-path bx2c8b@path)) (format (current-error-port) bx2c84@message bx2c8b@path))) (string-split bx2c89@paths '#\:))) bx2c87@t) (void))) bx2c83@paths))) (set! bx2c20@for-each-with-index (lambda (bx2c8d@proc bx2c8e@lst) (letrec ((bx2c91@loop (lambda (bx2c93@i bx2c94@lst) (if (null? bx2c94@lst) (if '#f '#f (void)) (begin (bx2c8d@proc bx2c93@i (car bx2c94@lst)) (bx2c91@loop (+ bx2c93@i '1) (cdr bx2c94@lst))))))) (bx2c91@loop '1 bx2c8e@lst)))) (set! bx2c22@rpad (lambda (bx2c97@str bx2c98@pad bx2c99@n) ((lambda (bx2c9d@rest) ((letrec ((bx2c9f@loop (lambda (bx2ca1@rest bx2ca2@ret) (if (<= bx2ca1@rest '0) bx2ca2@ret (bx2c9f@loop (- bx2ca1@rest '1) (string-append bx2ca2@ret bx2c98@pad)))))) bx2c9f@loop) bx2c9d@rest (format '"~a" bx2c97@str))) (- bx2c99@n (string-length (format '"~a" bx2c97@str)))))) (set! bx2c24@condition-printer (lambda (bx2ca5@e bx2ca6@port) ((lambda (bx2caa@max-condition-len) (begin (set! bx2caa@max-condition-len (apply max (map (lambda (bx2cbb@c) (string-length (symbol->string (record-type-name (record-rtd bx2cbb@c))))) (simple-conditions bx2ca5@e)))) (begin (display '" Condition components:\n" bx2ca6@port) (bx2c20@for-each-with-index (lambda (bx2cab@i bx2cac@x) ((lambda (bx2caf@rtd bx2cb0@fields-alist) (begin (format bx2ca6@port '" ~d. ~a" bx2cab@i (bx2c22@rpad (symbol->string (record-type-name bx2caf@rtd)) '" " bx2caa@max-condition-len)) (if (null? bx2cb0@fields-alist) (newline bx2ca6@port) (void)) ((letrec ((bx2cb3@loop (lambda (bx2cb5@first bx2cb6@fields-alist) (if (null? bx2cb6@fields-alist) '() ((lambda (bx2cb9@field) (begin (if (not bx2cb5@first) (display (bx2c22@rpad '"" '" " (+ '4 bx2caa@max-condition-len)) bx2ca6@port) (void)) (display '"       " bx2ca6@port) (display (car bx2cb9@field) bx2ca6@port) (display '": " bx2ca6@port) (write (cdr bx2cb9@field) bx2ca6@port) (newline bx2ca6@port) (bx2cb3@loop '#f (cdr bx2cb6@fields-alist)))) (car bx2cb6@fields-alist)))))) bx2cb3@loop) '#t bx2cb0@fields-alist))) (record-rtd bx2cac@x) (bx2c26@record->field-alist bx2cac@x))) (simple-conditions bx2ca5@e))))) '#f))) (set! bx2c26@record->field-alist (lambda (bx2cbd@r) ((lambda (bx2cc0@ref) (begin (set! bx2cc0@ref (lambda (bx2ccb@rtd bx2ccc@i bx2ccd@x) ((lambda (bx2cd1@val) (if (symbol? bx2cd1@val) (ungensym bx2cd1@val) bx2cd1@val)) ((record-accessor bx2ccb@rtd bx2ccc@i) bx2ccd@x)))) ((letrec ((bx2cc1@loop (lambda (bx2cc3@ret bx2cc4@rtd) (if bx2cc4@rtd (bx2cc1@loop (append bx2cc3@ret (bx2c28@map-with-index (lambda (bx2cc7@i bx2cc8@field) (cons bx2cc8@field (bx2cc0@ref bx2cc4@rtd bx2cc7@i bx2cbd@r))) (vector->list (record-type-field-names bx2cc4@rtd)))) (record-type-parent bx2cc4@rtd)) bx2cc3@ret)))) bx2cc1@loop) '() (record-rtd bx2cbd@r)))) '#f))) (set! bx2c28@map-with-index (lambda (bx2cd3@proc bx2cd4@lst) ((letrec ((bx2cd7@loop (lambda (bx2cd9@i bx2cda@lst bx2cdb@ret) (if (null? bx2cda@lst) (reverse bx2cdb@ret) (bx2cd7@loop (+ bx2cd9@i '1) (cdr bx2cda@lst) (cons (bx2cd3@proc bx2cd9@i (car bx2cda@lst)) bx2cdb@ret)))))) bx2cd7@loop) '0 bx2cd4@lst '()))) (set! bx2c2a@repl (lambda bx2cdf@x ((lambda (bx2ce2@rec) (begin (set! bx2ce2@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (bx2ce5@bx2ce3) (lambda () (with-exception-handler (lambda (bx2ce7@e) ((call/cc (lambda (bx2ce9@bx2ce4) (bx2ce5@bx2ce3 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bx2ce7@e) (bx2c24@condition-printer bx2ce7@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bx2ce7@e))) (bx2ce9@bx2ce4 (lambda () (raise-continuable bx2ce7@e)))))))))) (lambda () ((letrec ((bx2ceb@loop (lambda (bx2ced@line bx2cee@accum) ((lambda (bx2cf2@parentheses-ok? bx2cf4@eval-string-print) (begin (set! bx2cf2@parentheses-ok? (lambda (bx2cf9@text) ((letrec ((bx2cfb@loop (lambda (bx2cfd@chars bx2cfe@p0 bx2cff@p1) (if (null? bx2cfd@chars) (= '0 bx2cfe@p0 bx2cff@p1) ((lambda (bx2d03@t) (if (memv bx2d03@t '(#\()) (bx2cfb@loop (cdr bx2cfd@chars) (+ bx2cfe@p0 '1) bx2cff@p1) (if (memv bx2d03@t '(#\))) (bx2cfb@loop (cdr bx2cfd@chars) (- bx2cfe@p0 '1) bx2cff@p1) (if (memv bx2d03@t '(#\[)) (bx2cfb@loop (cdr bx2cfd@chars) bx2cfe@p0 (+ bx2cff@p1 '1)) (if (memv bx2d03@t '(#\])) (bx2cfb@loop (cdr bx2cfd@chars) bx2cfe@p0 (- bx2cff@p1 '1)) (bx2cfb@loop (cdr bx2cfd@chars) bx2cfe@p0 bx2cff@p1)))))) (car bx2cfd@chars)))))) bx2cfb@loop) (string->list bx2cf9@text) '0 '0))) (set! bx2cf4@eval-string-print (lambda (bx2cf7@text) (if (not (or (string=? '"\n" bx2cf7@text) (= '0 (string-length bx2cf7@text)))) (write (bx2c38@eval-top-level (call-with-port (open-string-input-port bx2cf7@text) read))) (void)))) (if (eof-object? bx2ced@line) (begin (bx2cf4@eval-string-print bx2cee@accum) (exit)) ((lambda (bx2cf5@current) (if (bx2cf2@parentheses-ok? bx2cf5@current) (bx2cf4@eval-string-print bx2cf5@current) (bx2ceb@loop (get-line (current-input-port)) bx2cf5@current))) (string-append bx2cee@accum bx2ced@line))))) '#f '#f)))) bx2ceb@loop) (get-line (current-input-port)) '""))))))) (newline) (bx2ce2@rec)))) (bx2ce2@rec))) '#f))) (set! bx2c2c@trace-printer (bx6b8@bx597@make-parameter write)) (set! bx2c2e@command-line (bx6b8@bx597@make-parameter (get-command-line))) (set! bx2c30@local-library-path (lambda (bx2d05@filename) (bx972@bx7ae@library-path))) (set! bx2c32@load/args (lambda (bx2d07@filename . bx2d09@args) (begin (apply bx2c42@load-r6rs-top-level bx2d07@filename 'load bx2d09@args) (void)))) (set! bx2c34@load (lambda (bx2d0b@filename) (begin (apply bx2c42@load-r6rs-top-level bx2d0b@filename 'load (bx2c2e@command-line)) (void)))) (set! bx2c36@ironscheme-build (lambda () (bx2c34@load '"ironscheme-buildscript.ss"))) (set! bx2c38@eval-top-level (lambda (bx2d0d@x) (bx2843@bxe1e@eval bx2d0d@x (bx2859@bxe4a@interaction-environment)))) (set! bx2c3a@compile-system-libraries (lambda () (bx2c38@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bx2c3c@compile (lambda (bx2d0f@filename) (bx2c42@load-r6rs-top-level bx2d0f@filename 'compile))) (set! bx2c3e@compile->closure (lambda (bx2d11@filename) (bx2c42@load-r6rs-top-level bx2d11@filename 'closure))) (set! bx2c40@pre-compile-r6rs-file (lambda (bx2d13@filename) (bx2c42@load-r6rs-top-level bx2d13@filename 'compile))) (set! bx2c42@load-r6rs-top-level (lambda (bx2d15@filename bx2d16@how . bx2d19@args) ((lambda (bx2d1f@bx2d1c bx2d20@bx2d1e) ((lambda (bx2d23@swap) (dynamic-wind bx2d23@swap (lambda () ((lambda (bx2d25@x*) ((lambda (bx2d27@t) (if (memv bx2d27@t '(closure)) (bx2858@bxe48@pre-compile-r6rs-top-level bx2d25@x*) (if (memv bx2d27@t '(load)) ((lambda (bx2d31@bx2d2a bx2d32@bx2d2c bx2d33@bx2d2e bx2d34@bx2d30) ((lambda (bx2d39@swap) (dynamic-wind bx2d39@swap (lambda () (begin (if (bx6b9@bx599@mosh-cache-dir) (gensym-prefix-set! (bx2c48@prefix-inc! (string-append (bx6b9@bx599@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bx2d3b@file) ((call/cc (lambda (bx2d3f@bx2d3d) (lambda () (with-exception-handler (lambda (bx2d41@c) ((call/cc (lambda (bx2d43@bx2d3e) (bx2d3f@bx2d3d (lambda () (if '#t '#t (bx2d43@bx2d3e (lambda () (raise-continuable bx2d41@c)))))))))) (lambda () (delete-file (string-append (bx6b9@bx599@mosh-cache-dir) '"/" bx2d3b@file))))))))) (directory-list (bx6b9@bx599@mosh-cache-dir))) (void)) ((lambda (bx2d45@compiled) (begin (if (and (bx6b9@bx599@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bx976@bx7b6@serialize-all bx6b3@bx58d@serialize-library bx70f@bx6c8@compile-core-expr) (void)) (bx2d45@compiled))) (bx2857@bxe46@compile-r6rs-top-level bx2d25@x*)))) bx2d39@swap)) (lambda () (begin ((lambda (bx2d47@t) (begin (bx2d31@bx2d2a bx2d33@bx2d2e) (set! bx2d33@bx2d2e bx2d47@t))) (bx2d31@bx2d2a)) ((lambda (bx2d49@t) (begin (bx2d32@bx2d2c bx2d34@bx2d30) (set! bx2d34@bx2d30 bx2d49@t))) (bx2d32@bx2d2c)))))) bx2c2e@command-line bx6b9@bx599@mosh-cache-dir (cons bx2d15@filename (car bx2d19@args)) (create-mosh-cache-dir)) (if (memv bx2d27@t '(compile)) (begin (bx2857@bxe46@compile-r6rs-top-level bx2d25@x*) (bx976@bx7b6@serialize-all bx6b3@bx58d@serialize-library bx70f@bx6c8@compile-core-expr)) (if '#f '#f (void)))))) bx2d16@how)) (with-input-from-file bx2d15@filename (lambda () ((letrec ((bx2d4b@f (lambda () ((lambda (bx2d4d@x) (if (eof-object? bx2d4d@x) '() (cons bx2d4d@x (bx2d4b@f)))) (bx6ab@bx57d@read-annotated))))) bx2d4b@f)))))) bx2d23@swap)) (lambda () ((lambda (bx2d4f@t) (begin (bx2d1f@bx2d1c bx2d20@bx2d1e) (set! bx2d20@bx2d1e bx2d4f@t))) (bx2d1f@bx2d1c))))) bx972@bx7ae@library-path (bx2c30@local-library-path bx2d15@filename)))) (set! bx2c44@load-r6rs-top-level-sexp (lambda (bx2d51@import-spec bx2d52@thunk) ((lambda (bx2d5d@bx2d56 bx2d5e@bx2d58 bx2d5f@bx2d5a bx2d60@bx2d5c) ((lambda (bx2d65@swap) (dynamic-wind bx2d65@swap (lambda () (begin (if (bx6b9@bx599@mosh-cache-dir) (gensym-prefix-set! (bx2c48@prefix-inc! (string-append (bx6b9@bx599@mosh-cache-dir) '"/prefix.txt"))) (void)) ((lambda (bx2d6b@bx2d68 bx2d6c@bx2d6a) ((lambda (bx2d6f@swap) (dynamic-wind bx2d6f@swap (lambda () ((bx2857@bxe46@compile-r6rs-top-level (list (cons 'import bx2d51@import-spec) (list bx2d52@thunk))))) bx2d6f@swap)) (lambda () ((lambda (bx2d71@t) (begin (bx2d6b@bx2d68 bx2d6c@bx2d6a) (set! bx2d6c@bx2d6a bx2d71@t))) (bx2d6b@bx2d68))))) bx2c2e@command-line '()))) bx2d65@swap)) (lambda () (begin ((lambda (bx2d73@t) (begin (bx2d5d@bx2d56 bx2d5f@bx2d5a) (set! bx2d5f@bx2d5a bx2d73@t))) (bx2d5d@bx2d56)) ((lambda (bx2d75@t) (begin (bx2d5e@bx2d58 bx2d60@bx2d5c) (set! bx2d60@bx2d5c bx2d75@t))) (bx2d5e@bx2d58)))))) bx972@bx7ae@library-path bx6b9@bx599@mosh-cache-dir (bx2c30@local-library-path '"") (create-mosh-cache-dir)))) (set! bx2c46@prefix-inc (lambda (bx2d77@prefix-string) ((lambda (bx2d79@prefix) ((lambda (bx2d7b@len) ((lambda () ((letrec ((bx2d7d@loop (lambda (bx2d7f@i bx2d80@carry? bx2d81@accum) (if (< bx2d7f@i '0) (string->symbol (list->string (if bx2d80@carry? (cons '#\a bx2d81@accum) bx2d81@accum))) (if bx2d80@carry? ((lambda (bx2d85@next-integer) (if (= bx2d85@next-integer '123) (bx2d7d@loop (- bx2d7f@i '1) '#f (cons '#\A bx2d81@accum)) (if (= bx2d85@next-integer '91) (bx2d7d@loop (- bx2d7f@i '1) '#t (cons '#\a bx2d81@accum)) (bx2d7d@loop (- bx2d7f@i '1) '#f (cons (integer->char bx2d85@next-integer) bx2d81@accum))))) (+ '1 (char->integer (string-ref bx2d79@prefix bx2d7f@i)))) (bx2d7d@loop (- bx2d7f@i '1) '#f (cons (string-ref bx2d79@prefix bx2d7f@i) bx2d81@accum))))))) bx2d7d@loop) (- bx2d7b@len '1) '#t '())))) (string-length bx2d79@prefix))) (symbol->string bx2d77@prefix-string)))) (set! bx2c48@prefix-inc! (lambda (bx2d87@file) (begin (if (not (file-exists? bx2d87@file)) (call-with-output-file bx2d87@file (lambda (bx2d89@port) (write 'd bx2d89@port))) (void)) ((lambda (bx2d8b@prefix) ((lambda (bx2d8d@next-prefix) ((lambda () (begin (call-with-port (open-file-output-port bx2d87@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bx2d8f@port) (write bx2d8d@next-prefix bx2d8f@port))) bx2d8b@prefix)))) (bx2c46@prefix-inc bx2d8b@prefix))) (call-with-input-file bx2d87@file read))))) (begin (set! bx2da7@bx2c48@prefix-inc! bx2c48@prefix-inc!) (set! bx2da6@bx2c46@prefix-inc bx2c46@prefix-inc) (set! bx2da5@bx2c44@load-r6rs-top-level-sexp bx2c44@load-r6rs-top-level-sexp) (set! bx2da4@bx2c42@load-r6rs-top-level bx2c42@load-r6rs-top-level) (set! bx2da3@bx2c40@pre-compile-r6rs-file bx2c40@pre-compile-r6rs-file) (set! bx2da2@bx2c3e@compile->closure bx2c3e@compile->closure) (set! bx2da1@bx2c3c@compile bx2c3c@compile) (set! bx2da0@bx2c3a@compile-system-libraries bx2c3a@compile-system-libraries) (set! bx2d9f@bx2c38@eval-top-level bx2c38@eval-top-level) (set! bx2d9e@bx2c36@ironscheme-build bx2c36@ironscheme-build) (set! bx2d9d@bx2c34@load bx2c34@load) (set! bx2d9c@bx2c32@load/args bx2c32@load/args) (set! bx2d9b@bx2c30@local-library-path bx2c30@local-library-path) (set! bx2d9a@bx2c2e@command-line bx2c2e@command-line) (set! bx2d99@bx2c2c@trace-printer bx2c2c@trace-printer) (set! bx2d98@bx2c2a@repl bx2c2a@repl) (set! bx2d97@bx2c28@map-with-index bx2c28@map-with-index) (set! bx2d96@bx2c26@record->field-alist bx2c26@record->field-alist) (set! bx2d95@bx2c24@condition-printer bx2c24@condition-printer) (set! bx2d94@bx2c22@rpad bx2c22@rpad) (set! bx2d93@bx2c20@for-each-with-index bx2c20@for-each-with-index) (set! bx2d92@bx2c1e@parse-and-add-library-path bx2c1e@parse-and-add-library-path) (set! bx2d91@bx2c1c@add-library-path! bx2c1c@add-library-path!) (bx977@bx7b8@current-precompiled-library-loader bx6b4@bx58f@load-serialized-library) (set-symbol-value! 'load bx2c34@load) (set-symbol-value! 'pre-compile-r6rs-file bx2c40@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bx2c38@eval-top-level) (set-symbol-value! 'int-env-syms bx283a@bxe0c@interaction-environment-symbols) (set-symbol-value! 'expanded2core bx70e@bx6c6@expanded->core) (set-symbol-value! 'trace-printer bx2c2c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bx2c49@c) (condition (bx2b79@bx2983@make-non-continuable-violation) (bx2b6f@bx296a@make-who-condition 'raise) (bx2b33@bx28cb@make-message-condition '"returned from non-continuable exception") (bx2b65@bx294f@make-irritants-condition (list bx2c49@c))))) (bx2c1e@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bx2c1e@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bx2c1c@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bx2c1c@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bx2c1c@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (bx2c4b@prefix) (bx973@bx7b0@library-extensions (bx2c4b@prefix '".mosh" (bx973@bx7b0@library-extensions)))) (lambda (bx2c4d@ext bx2c4e@ls) (append (map (lambda (bx2c51@x) (string-append bx2c4d@ext bx2c51@x)) bx2c4e@ls) bx2c4e@ls))) ((lambda (bx2c53@args bx2c54@port) ((lambda (bx2c58@ref) (begin (set! bx2c58@ref (lambda (bx2c79@rtd bx2c7a@i bx2c7b@x) ((lambda (bx2c7f@val) (if (symbol? bx2c7f@val) (ungensym bx2c7f@val) bx2c7f@val)) ((record-accessor bx2c79@rtd bx2c7a@i) bx2c7b@x)))) (with-exception-handler (lambda (bx2c59@c) (if (condition? bx2c59@c) (bx2c24@condition-printer bx2c59@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bx2c59@c))) (lambda () (if ((call/cc (lambda (bx2c5d@bx2c5b) (lambda () (with-exception-handler (lambda (bx2c5f@c) ((call/cc (lambda (bx2c61@bx2c5c) (bx2c5d@bx2c5b (lambda () (if '#t '#f (bx2c61@bx2c5c (lambda () (raise-continuable bx2c5f@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bx2c44@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? bx2c53@args) ((lambda (bx2c6b@bx2c64 bx2c6c@bx2c66 bx2c6d@bx2c68 bx2c6e@bx2c6a) ((lambda (bx2c73@swap) (dynamic-wind bx2c73@swap (lambda () (begin (if (bx6b9@bx599@mosh-cache-dir) (gensym-prefix-set! (bx2c48@prefix-inc! (string-append (bx6b9@bx599@mosh-cache-dir) '"/prefix.txt"))) (void)) (bx2c2a@repl))) bx2c73@swap)) (lambda () (begin ((lambda (bx2c75@t) (begin (bx2c6b@bx2c64 bx2c6d@bx2c68) (set! bx2c6d@bx2c68 bx2c75@t))) (bx2c6b@bx2c64)) ((lambda (bx2c77@t) (begin (bx2c6c@bx2c66 bx2c6e@bx2c6a) (set! bx2c6e@bx2c6a bx2c77@t))) (bx2c6c@bx2c66)))))) bx2c2e@command-line bx6b9@bx599@mosh-cache-dir '() (create-mosh-cache-dir)) (bx2c42@load-r6rs-top-level (car bx2c53@args) 'load (cdr bx2c53@args)))))))) '#f)) (bx2c2e@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
