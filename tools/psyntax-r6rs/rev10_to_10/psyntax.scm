;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! nf287d@library-file-path->cache-path (unspecified)) (set! nf287f@read-annotated (unspecified)) (set! nf2881@annotation-stripped (unspecified)) (set! nf2883@annotation? (unspecified)) (set! nf2885@annotation-source (unspecified)) (set! nf2887@annotation-expression (unspecified)) (set! nf2889@scm->fasl (unspecified)) (set! nf288b@fasl-save (unspecified)) (set! nf288d@fasl-load (unspecified)) (set! nf288f@serialize-library (unspecified)) (set! nf2891@load-serialized-library (unspecified)) (set! nf2893@make-record-printer (unspecified)) (set! nf2895@compile-core (unspecified)) (set! nf2897@read-library-source-file (unspecified)) (set! nf2899@make-parameter (unspecified)) (set! nf289b@mosh-cache-dir (unspecified)) (set! nf2931@file-options-spec (unspecified)) (set! nf287d@library-file-path->cache-path (lambda (nf2932@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nf2938@nf2935 nf2939@nf2937) (let ((nf293c@extract nf2939@nf2937) (nf293d@p nf2938@nf2935)) (let ((nf2941@display-hex '#f)) (begin (set! nf2941@display-hex (lambda (nf294a@n) (if (<= '0 nf294a@n '9) (display nf294a@n nf293d@p) (display (integer->char (+ (char->integer '#\a) (- nf294a@n '10))) nf293d@p)))) (begin (let nf2944@f ((nf2942@ls (string-split nf2932@x '#\/))) (if (not (null? nf2942@ls)) (begin (display '"_" nf293d@p) (for-each (lambda (nf2946@c) (if (or (char<=? '#\a nf2946@c '#\z) (char<=? '#\A nf2946@c '#\Z) (char<=? '#\0 nf2946@c '#\9) (memv nf2946@c '(#\- #\. #\_ #\~))) (display nf2946@c nf293d@p) (begin (display '"%" nf293d@p) (let ((nf2948@n (char->integer nf2946@c))) (begin (nf2941@display-hex (quotient nf2948@n '16)) (nf2941@display-hex (remainder nf2948@n '16))))))) (string->list (car nf2942@ls))) (nf2944@f (cdr nf2942@ls))) (void))) (nf293c@extract))))))))) (set! nf29ac@nf287d@library-file-path->cache-path nf287d@library-file-path->cache-path) (set! nf287f@read-annotated read) (set! nf29ad@nf287f@read-annotated nf287f@read-annotated) (set! nf2881@annotation-stripped (lambda (nf294c@x) (nf2887@annotation-expression nf294c@x))) (set! nf29ae@nf2881@annotation-stripped nf2881@annotation-stripped) (set! nf2883@annotation? (lambda (nf294e@x) (source-info nf294e@x))) (set! nf29af@nf2883@annotation? nf2883@annotation?) (set! nf2885@annotation-source (lambda (nf2950@x) (source-info nf2950@x))) (set! nf29b0@nf2885@annotation-source nf2885@annotation-source) (set! nf2887@annotation-expression (lambda (nf2952@x) (if (pair? nf2952@x) (cons (car nf2952@x) (cdr nf2952@x)) nf2952@x))) (set! nf29b1@nf2887@annotation-expression nf2887@annotation-expression) (set! nf2889@scm->fasl (lambda (nf2954@filename) (string-append (nf289b@mosh-cache-dir) '"/" (nf287d@library-file-path->cache-path nf2954@filename) '".mosh-fasl"))) (set! nf29b2@nf2889@scm->fasl nf2889@scm->fasl) (set! nf288b@fasl-save (lambda (nf2956@filename nf2957@obj) (call-with-port (open-file-output-port nf2956@filename) (lambda (nf295a@port) ((symbol-value 'fasl-write!) nf2957@obj nf295a@port))))) (set! nf29b3@nf288b@fasl-save nf288b@fasl-save) (set! nf288d@fasl-load (lambda (nf295c@filename) (call-with-port (open-file-input-port nf295c@filename) (symbol-value 'fasl-read!)))) (set! nf29b4@nf288d@fasl-load nf288d@fasl-load) (set! nf288f@serialize-library (lambda (nf295e@filename nf295f@obj) (begin (let ((nf2962@expanded2core (symbol-value 'expanded2core))) (let ((nf2964@compile (symbol-value 'compile-w/o-halt))) (let ((nf2966@code nf295f@obj)) (let ((nf2968@pivot (cddddr (cddddr nf2966@code)))) (let ((nf296a@visit (nf2964@compile (nf2962@expanded2core (car nf2968@pivot))))) (begin (set-car! nf2968@pivot nf296a@visit) (let ((nf296c@pivot (cdr nf2968@pivot))) (let ((nf296e@invoke (nf2964@compile (nf2962@expanded2core (car nf296c@pivot))))) (set-car! nf296c@pivot nf296e@invoke))))))))) (let ((nf2970@fasl-file (nf2889@scm->fasl nf295e@filename))) (begin (if (file-exists? nf2970@fasl-file) (delete-file nf2970@fasl-file) (void)) ((call/cc (lambda (nf2974@nf2972) (lambda () (with-exception-handler (lambda (nf2976@c) ((call/cc (lambda (nf2978@nf2973) (nf2974@nf2972 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " nf295e@filename) (if (file-exists? nf2970@fasl-file) (delete-file nf2970@fasl-file) (void)) '#f) (nf2978@nf2973 (lambda () (raise-continuable nf2976@c)))))))))) (lambda () (nf288b@fasl-save nf2970@fasl-file nf295f@obj)))))))))))) (set! nf29b5@nf288f@serialize-library nf288f@serialize-library) (set! nf2891@load-serialized-library (lambda (nf297a@filename nf297b@obj) (and (nf289b@mosh-cache-dir) (let ((nf297e@fasl-file (nf2889@scm->fasl nf297a@filename))) (if (and (file-exists? nf297e@fasl-file) ((symbol-value 'file-newer?) nf297e@fasl-file nf297a@filename)) (let ((nf2980@expanded2core (symbol-value 'expanded2core))) (let ((nf2982@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((nf2984@code (nf288d@fasl-load nf297e@fasl-file))) (let ((nf2986@pivot (cddddr (cddddr nf2984@code)))) (let ((nf2988@visit (car nf2986@pivot))) (let ((nf298a@visit-proc (lambda () (nf2982@eval-compiled-core nf2988@visit)))) (begin (set-car! nf2986@pivot nf298a@visit-proc) (let ((nf298c@pivot (cdr nf2986@pivot))) (let ((nf298e@invoke (car nf298c@pivot))) (begin (set-car! nf298c@pivot (lambda () (nf2982@eval-compiled-core nf298e@invoke))) (apply nf297b@obj nf2984@code))))))))))) '#f))))) (set! nf29b6@nf2891@load-serialized-library nf2891@load-serialized-library) (set! nf2893@make-record-printer (lambda (nf2990@name nf2991@printer) (lambda nf2994@x (begin (display '"record printer") (for-each display nf2994@x))))) (set! nf29b7@nf2893@make-record-printer nf2893@make-record-printer) (set! nf2895@compile-core (lambda nf2996@x (apply error 'comile-core '"not implementated" nf2996@x))) (set! nf29b8@nf2895@compile-core nf2895@compile-core) (set! nf2897@read-library-source-file (lambda (nf2998@file-name) (with-input-from-file nf2998@file-name nf287f@read-annotated))) (set! nf29b9@nf2897@read-library-source-file nf2897@read-library-source-file) (set! nf2899@make-parameter (lambda nf29a8 (let ((nf29a9 (length nf29a8))) (if (= nf29a9 '1) (apply (lambda (nf299a@x) (nf2899@make-parameter nf299a@x (lambda (nf299c@x) nf299c@x))) nf29a8) (if (= nf29a9 '2) (apply (lambda (nf299e@x nf299f@fender) (let ((nf29a2@x (nf299f@fender nf299e@x))) (lambda nf29a6 (let ((nf29a7 (length nf29a6))) (if (= nf29a7 '0) (apply (lambda () nf29a2@x) nf29a6) (if (= nf29a7 '1) (apply (lambda (nf29a4@v) (set! nf29a2@x (nf299f@fender nf29a4@v))) nf29a6) (error 'apply '"invalid arg count"))))))) nf29a8) (error 'apply '"invalid arg count")))))) (set! nf29ba@nf2899@make-parameter nf2899@make-parameter) (set! nf289b@mosh-cache-dir (nf2899@make-parameter '#f)) (set! nf29bb@nf289b@mosh-cache-dir nf289b@mosh-cache-dir) (set! nf2931@file-options-spec (lambda (nf29aa@x) nf29aa@x)) (set! nf29bc@nf2931@file-options-spec nf2931@file-options-spec) (void))
(begin (set! nf29c2@current-primitive-locations (unspecified)) (set! nf29c4@mutable? (unspecified)) (set! nf29c6@rewriter (unspecified)) (set! nf29c8@expanded->core (unspecified)) (set! nf29ca@compile-core-expr (unspecified)) (set! nf29cc@pretty-print (unspecified)) (set! nf29ce@compile-core-expr-to-port (unspecified)) (set! nf29c2@current-primitive-locations (nf29ba@nf2899@make-parameter (lambda (nf29cf@x) '#f) (lambda (nf29d1@p) nf29d1@p))) (set! nf2a0d@nf29c2@current-primitive-locations nf29c2@current-primitive-locations) (set! nf29c4@mutable? (lambda (nf29d3@x) (or (pair? nf29d3@x) (vector? nf29d3@x) (hashtable? nf29d3@x)))) (set! nf2a0e@nf29c4@mutable? nf29c4@mutable?) (set! nf29c6@rewriter (lambda (nf29d5@quote-hack?) (let ((nf29d8@f '#f)) (begin (set! nf29d8@f (lambda (nf29d9@x) (if (pair? nf29d9@x) (let ((nf29db@t (car nf29d9@x))) (if (memv nf29db@t '(quote)) (if (and nf29d5@quote-hack? (nf29c4@mutable? (cadr nf29d9@x))) (let ((nf29dd@g (gensym))) (begin (set-symbol-value! nf29dd@g (cadr nf29d9@x)) nf29dd@g)) nf29d9@x) (if (memv nf29db@t '(case-lambda)) (cons 'case-lambda (map (lambda (nf29df@x) (cons (car nf29df@x) (map nf29d8@f (cdr nf29df@x)))) (cdr nf29d9@x))) (if (memv nf29db@t '(lambda)) (cons* 'lambda (cadr nf29d9@x) (map nf29d8@f (cddr nf29d9@x))) (if (memv nf29db@t '(letrec)) (let ((nf29e1@bindings (cadr nf29d9@x)) (nf29e2@body* (cddr nf29d9@x))) (let ((nf29e5@lhs* (map car nf29e1@bindings)) (nf29e6@rhs* (map cadr nf29e1@bindings))) (cons* 'letrec (map list nf29e5@lhs* (map nf29d8@f nf29e6@rhs*)) (map nf29d8@f nf29e2@body*)))) (if (memv nf29db@t '(letrec*)) (let ((nf29e9@bindings (cadr nf29d9@x)) (nf29ea@body* (cddr nf29d9@x))) (let ((nf29ed@lhs* (map car nf29e9@bindings)) (nf29ee@rhs* (map cadr nf29e9@bindings))) (cons* 'letrec* (map list nf29ed@lhs* (map nf29d8@f nf29ee@rhs*)) (map nf29d8@f nf29ea@body*)))) (if (memv nf29db@t '(library-letrec*)) (let ((nf29f1@name (cadr nf29d9@x)) (nf29f2@x (cdr nf29d9@x))) (let ((nf29f5@bindings (cadr nf29f2@x)) (nf29f6@body* (cddr nf29f2@x))) (let ((nf29f9@lhs* (map car nf29f5@bindings)) (nf29fa@lhs** (map cadr nf29f5@bindings)) (nf29fb@rhs* (map caddr nf29f5@bindings))) (cons* 'library-letrec* nf29f1@name (map list nf29f9@lhs* nf29fa@lhs** (map nf29d8@f nf29fb@rhs*)) (map nf29d8@f nf29f6@body*))))) (if (memv nf29db@t '(begin)) (cons 'begin (map nf29d8@f (cdr nf29d9@x))) (if (memv nf29db@t '(set!)) (list 'set! (cadr nf29d9@x) (nf29d8@f (caddr nf29d9@x))) (if (memv nf29db@t '(primitive)) (let ((nf29ff@op (cadr nf29d9@x))) (let ((nf2a01@t ((nf29c2@current-primitive-locations) nf29ff@op))) (if nf2a01@t ((lambda (nf2a03@loc) nf2a03@loc) nf2a01@t) nf29ff@op))) (if (memv nf29db@t '(define)) nf29d9@x (if (list? nf29d9@x) (map nf29d8@f nf29d9@x) (error 'rewrite '"invalid form ~s ~s" nf29d9@x (list? nf29d9@x)))))))))))))) nf29d9@x))) nf29d8@f)))) (set! nf2a0f@nf29c6@rewriter nf29c6@rewriter) (set! nf29c8@expanded->core (lambda (nf2a05@x) ((nf29c6@rewriter '#f) nf2a05@x))) (set! nf2a10@nf29c8@expanded->core nf29c8@expanded->core) (set! nf29ca@compile-core-expr (lambda (nf2a07@x) ((nf29c6@rewriter '#f) nf2a07@x))) (set! nf2a11@nf29ca@compile-core-expr nf29ca@compile-core-expr) (set! nf29cc@pretty-print write) (set! nf2a12@nf29cc@pretty-print nf29cc@pretty-print) (set! nf29ce@compile-core-expr-to-port (lambda (nf2a09@x nf2a0a@p) (nf29cc@pretty-print ((nf29c6@rewriter '#f) nf2a09@x) nf2a0a@p))) (set! nf2a13@nf29ce@compile-core-expr-to-port nf29ce@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! nf2a62@make-collection (unspecified)) (set! nf2a64@current-library-collection (unspecified)) (set! nf2a66@rp (unspecified)) (set! nf2a70@library? (unspecified)) (set! nf2a72@library-id (unspecified)) (set! nf2a74@set-library-id! (unspecified)) (set! nf2a76@library-name (unspecified)) (set! nf2a78@set-library-name! (unspecified)) (set! nf2a7a@library-version (unspecified)) (set! nf2a7c@set-library-version! (unspecified)) (set! nf2a7e@library-imp* (unspecified)) (set! nf2a80@set-library-imp*! (unspecified)) (set! nf2a82@library-vis* (unspecified)) (set! nf2a84@set-library-vis*! (unspecified)) (set! nf2a86@library-inv* (unspecified)) (set! nf2a88@set-library-inv*! (unspecified)) (set! nf2a8a@library-subst (unspecified)) (set! nf2a8c@set-library-subst! (unspecified)) (set! nf2a8e@library-env (unspecified)) (set! nf2a90@set-library-env! (unspecified)) (set! nf2a92@library-visit-state (unspecified)) (set! nf2a94@set-library-visit-state! (unspecified)) (set! nf2a96@library-invoke-state (unspecified)) (set! nf2a98@set-library-invoke-state! (unspecified)) (set! nf2a9a@library-visit-code (unspecified)) (set! nf2a9c@set-library-visit-code! (unspecified)) (set! nf2a9e@library-invoke-code (unspecified)) (set! nf2aa0@set-library-invoke-code! (unspecified)) (set! nf2aa2@library-visible? (unspecified)) (set! nf2aa4@set-library-visible?! (unspecified)) (set! nf2aa6@library-source-file-name (unspecified)) (set! nf2aa8@set-library-source-file-name! (unspecified)) (set! nf2aaa@dummy (unspecified)) (set! nf2aac@find-dependencies (unspecified)) (set! nf2aae@find-library-by (unspecified)) (set! nf2ab0@library-path (unspecified)) (set! nf2ab2@library-extensions (unspecified)) (set! nf2ab4@library-name->file-name (unspecified)) (set! nf2ab6@file-locator (unspecified)) (set! nf2ab8@serialize-all (unspecified)) (set! nf2aba@current-precompiled-library-loader (unspecified)) (set! nf2abc@try-load-from-file (unspecified)) (set! nf2abe@library-loader (unspecified)) (set! nf2ac0@current-library-expander (unspecified)) (set! nf2ac2@external-pending-libraries (unspecified)) (set! nf2ac4@find-external-library (unspecified)) (set! nf2ac6@find-library-by-name (unspecified)) (set! nf2ac8@library-exists? (unspecified)) (set! nf2aca@find-library-by-spec/die (unspecified)) (set! nf2acc@label->binding-table (unspecified)) (set! nf2ace@install-library-record (unspecified)) (set! nf2ad0@install-library (unspecified)) (set! nf2ad2@imported-label->binding (unspecified)) (set! nf2ad4@invoke-library (unspecified)) (set! nf2ad6@visit-library (unspecified)) (set! nf2ad8@invoke-library-by-spec (unspecified)) (set! nf2ada@installed-libraries (unspecified)) (set! nf2adc@library-spec (unspecified)) (set! nf2a62@make-collection (lambda () (let ((nf2add@set '())) (let ((nf2ae0@set-cons '#f)) (begin (set! nf2ae0@set-cons (lambda (nf2ae5@x nf2ae6@ls) (if (memq nf2ae5@x nf2ae6@ls) nf2ae6@ls (cons nf2ae5@x nf2ae6@ls)))) (lambda nf2ae3 (let ((nf2ae4 (length nf2ae3))) (if (= nf2ae4 '0) (apply (lambda () nf2add@set) nf2ae3) (if (= nf2ae4 '1) (apply (lambda (nf2ae1@x) (set! nf2add@set (nf2ae0@set-cons nf2ae1@x nf2add@set))) nf2ae3) (error 'apply '"invalid arg count")))))))))) (set! nf2c51@nf2a62@make-collection nf2a62@make-collection) (set! nf2a64@current-library-collection (nf29ba@nf2899@make-parameter (nf2a62@make-collection) (lambda (nf2ae9@x) (begin (if (not (procedure? nf2ae9@x)) (assertion-violation 'current-library-collection '"not a procedure" nf2ae9@x) (void)) nf2ae9@x)))) (set! nf2c52@nf2a64@current-library-collection nf2a64@current-library-collection) (set! nf2a66@rp (nf29b7@nf2893@make-record-printer 'library (lambda (nf2aeb@x nf2aec@p nf2aed@wr) (begin (if (not (nf2a70@library? nf2aeb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (nf2a7a@library-version nf2aeb@x)) (nf2a76@library-name nf2aeb@x) (append (nf2a76@library-name nf2aeb@x) (list (nf2a7a@library-version nf2aeb@x))))) nf2aec@p))))) (set! nf2c53@nf2a66@rp nf2a66@rp) (set! nf2a70@library? (lambda (nf2af1@x) (and (simple-struct? nf2af1@x) (eq? (simple-struct-name nf2af1@x) 'library)))) (set! nf2c54@nf2a70@library? nf2a70@library?) (set! nf2a72@library-id (lambda (nf2af3@x) (simple-struct-ref nf2af3@x '0))) (set! nf2c55@nf2a72@library-id nf2a72@library-id) (set! nf2a74@set-library-id! (lambda (nf2af5@x nf2af6@val) (simple-struct-set! nf2af5@x '0 nf2af6@val))) (set! nf2c56@nf2a74@set-library-id! nf2a74@set-library-id!) (set! nf2a76@library-name (lambda (nf2af9@x) (simple-struct-ref nf2af9@x '1))) (set! nf2c57@nf2a76@library-name nf2a76@library-name) (set! nf2a78@set-library-name! (lambda (nf2afb@x nf2afc@val) (simple-struct-set! nf2afb@x '1 nf2afc@val))) (set! nf2c58@nf2a78@set-library-name! nf2a78@set-library-name!) (set! nf2a7a@library-version (lambda (nf2aff@x) (simple-struct-ref nf2aff@x '2))) (set! nf2c59@nf2a7a@library-version nf2a7a@library-version) (set! nf2a7c@set-library-version! (lambda (nf2b01@x nf2b02@val) (simple-struct-set! nf2b01@x '2 nf2b02@val))) (set! nf2c5a@nf2a7c@set-library-version! nf2a7c@set-library-version!) (set! nf2a7e@library-imp* (lambda (nf2b05@x) (simple-struct-ref nf2b05@x '3))) (set! nf2c5b@nf2a7e@library-imp* nf2a7e@library-imp*) (set! nf2a80@set-library-imp*! (lambda (nf2b07@x nf2b08@val) (simple-struct-set! nf2b07@x '3 nf2b08@val))) (set! nf2c5c@nf2a80@set-library-imp*! nf2a80@set-library-imp*!) (set! nf2a82@library-vis* (lambda (nf2b0b@x) (simple-struct-ref nf2b0b@x '4))) (set! nf2c5d@nf2a82@library-vis* nf2a82@library-vis*) (set! nf2a84@set-library-vis*! (lambda (nf2b0d@x nf2b0e@val) (simple-struct-set! nf2b0d@x '4 nf2b0e@val))) (set! nf2c5e@nf2a84@set-library-vis*! nf2a84@set-library-vis*!) (set! nf2a86@library-inv* (lambda (nf2b11@x) (simple-struct-ref nf2b11@x '5))) (set! nf2c5f@nf2a86@library-inv* nf2a86@library-inv*) (set! nf2a88@set-library-inv*! (lambda (nf2b13@x nf2b14@val) (simple-struct-set! nf2b13@x '5 nf2b14@val))) (set! nf2c60@nf2a88@set-library-inv*! nf2a88@set-library-inv*!) (set! nf2a8a@library-subst (lambda (nf2b17@x) (simple-struct-ref nf2b17@x '6))) (set! nf2c61@nf2a8a@library-subst nf2a8a@library-subst) (set! nf2a8c@set-library-subst! (lambda (nf2b19@x nf2b1a@val) (simple-struct-set! nf2b19@x '6 nf2b1a@val))) (set! nf2c62@nf2a8c@set-library-subst! nf2a8c@set-library-subst!) (set! nf2a8e@library-env (lambda (nf2b1d@x) (simple-struct-ref nf2b1d@x '7))) (set! nf2c63@nf2a8e@library-env nf2a8e@library-env) (set! nf2a90@set-library-env! (lambda (nf2b1f@x nf2b20@val) (simple-struct-set! nf2b1f@x '7 nf2b20@val))) (set! nf2c64@nf2a90@set-library-env! nf2a90@set-library-env!) (set! nf2a92@library-visit-state (lambda (nf2b23@x) (simple-struct-ref nf2b23@x '8))) (set! nf2c65@nf2a92@library-visit-state nf2a92@library-visit-state) (set! nf2a94@set-library-visit-state! (lambda (nf2b25@x nf2b26@val) (simple-struct-set! nf2b25@x '8 nf2b26@val))) (set! nf2c66@nf2a94@set-library-visit-state! nf2a94@set-library-visit-state!) (set! nf2a96@library-invoke-state (lambda (nf2b29@x) (simple-struct-ref nf2b29@x '9))) (set! nf2c67@nf2a96@library-invoke-state nf2a96@library-invoke-state) (set! nf2a98@set-library-invoke-state! (lambda (nf2b2b@x nf2b2c@val) (simple-struct-set! nf2b2b@x '9 nf2b2c@val))) (set! nf2c68@nf2a98@set-library-invoke-state! nf2a98@set-library-invoke-state!) (set! nf2a9a@library-visit-code (lambda (nf2b2f@x) (simple-struct-ref nf2b2f@x '10))) (set! nf2c69@nf2a9a@library-visit-code nf2a9a@library-visit-code) (set! nf2a9c@set-library-visit-code! (lambda (nf2b31@x nf2b32@val) (simple-struct-set! nf2b31@x '10 nf2b32@val))) (set! nf2c6a@nf2a9c@set-library-visit-code! nf2a9c@set-library-visit-code!) (set! nf2a9e@library-invoke-code (lambda (nf2b35@x) (simple-struct-ref nf2b35@x '11))) (set! nf2c6b@nf2a9e@library-invoke-code nf2a9e@library-invoke-code) (set! nf2aa0@set-library-invoke-code! (lambda (nf2b37@x nf2b38@val) (simple-struct-set! nf2b37@x '11 nf2b38@val))) (set! nf2c6c@nf2aa0@set-library-invoke-code! nf2aa0@set-library-invoke-code!) (set! nf2aa2@library-visible? (lambda (nf2b3b@x) (simple-struct-ref nf2b3b@x '12))) (set! nf2c6d@nf2aa2@library-visible? nf2aa2@library-visible?) (set! nf2aa4@set-library-visible?! (lambda (nf2b3d@x nf2b3e@val) (simple-struct-set! nf2b3d@x '12 nf2b3e@val))) (set! nf2c6e@nf2aa4@set-library-visible?! nf2aa4@set-library-visible?!) (set! nf2aa6@library-source-file-name (lambda (nf2b41@x) (simple-struct-ref nf2b41@x '13))) (set! nf2c6f@nf2aa6@library-source-file-name nf2aa6@library-source-file-name) (set! nf2aa8@set-library-source-file-name! (lambda (nf2b43@x nf2b44@val) (simple-struct-set! nf2b43@x '13 nf2b44@val))) (set! nf2c70@nf2aa8@set-library-source-file-name! nf2aa8@set-library-source-file-name!) (set! nf2aaa@dummy '3) (set! nf2c71@nf2aaa@dummy nf2aaa@dummy) (set! nf2aac@find-dependencies (lambda (nf2b47@ls) (if (null? nf2b47@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! nf2c72@nf2aac@find-dependencies nf2aac@find-dependencies) (set! nf2aae@find-library-by (lambda (nf2b49@pred) (let nf2b4d@f ((nf2b4b@ls ((nf2a64@current-library-collection)))) (if (null? nf2b4b@ls) '#f (if (nf2b49@pred (car nf2b4b@ls)) (car nf2b4b@ls) (nf2b4d@f (cdr nf2b4b@ls))))))) (set! nf2c73@nf2aae@find-library-by nf2aae@find-library-by) (set! nf2ab0@library-path (nf29ba@nf2899@make-parameter '(".") (lambda (nf2b4f@x) (if (and (list? nf2b4f@x) (for-all string? nf2b4f@x)) (map (lambda (nf2b51@x) nf2b51@x) nf2b4f@x) (assertion-violation 'library-path '"not a list of strings" nf2b4f@x))))) (set! nf2c74@nf2ab0@library-path nf2ab0@library-path) (set! nf2ab2@library-extensions (nf29ba@nf2899@make-parameter '(".sls" ".ss" ".scm") (lambda (nf2b53@x) (if (and (list? nf2b53@x) (for-all string? nf2b53@x)) (map (lambda (nf2b55@x) nf2b55@x) nf2b53@x) (assertion-violation 'library-extensions '"not a list of strings" nf2b53@x))))) (set! nf2c75@nf2ab2@library-extensions nf2ab2@library-extensions) (set! nf2ab4@library-name->file-name (lambda (nf2b57@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nf2b5d@nf2b5a nf2b5e@nf2b5c) (let ((nf2b61@extract nf2b5e@nf2b5c) (nf2b62@p nf2b5d@nf2b5a)) (let ((nf2b66@display-hex '#f)) (begin (set! nf2b66@display-hex (lambda (nf2b6f@n) (if (<= '0 nf2b6f@n '9) (display nf2b6f@n nf2b62@p) (display (integer->char (+ (char->integer '#\a) (- nf2b6f@n '10))) nf2b62@p)))) (begin (let nf2b69@f ((nf2b67@ls nf2b57@x)) (if (not (null? nf2b67@ls)) (begin (display '"/" nf2b62@p) (for-each (lambda (nf2b6b@c) (if (or (char<=? '#\a nf2b6b@c '#\z) (char<=? '#\A nf2b6b@c '#\Z) (char<=? '#\0 nf2b6b@c '#\9) (memv nf2b6b@c '(#\- #\. #\_ #\~))) (display nf2b6b@c nf2b62@p) (begin (display '"%" nf2b62@p) (let ((nf2b6d@n (char->integer nf2b6b@c))) (begin (nf2b66@display-hex (quotient nf2b6d@n '16)) (nf2b66@display-hex (remainder nf2b6d@n '16))))))) (string->list (symbol->string (car nf2b67@ls)))) (nf2b69@f (cdr nf2b67@ls))) (void))) (nf2b61@extract))))))))) (set! nf2c76@nf2ab4@library-name->file-name nf2ab4@library-name->file-name) (set! nf2ab6@file-locator (nf29ba@nf2899@make-parameter (lambda (nf2b71@x) (let ((nf2b73@str (nf2ab4@library-name->file-name nf2b71@x))) (let nf2b7b@f ((nf2b75@ls (nf2ab0@library-path)) (nf2b76@exts (nf2ab2@library-extensions)) (nf2b77@failed-list '())) (if (null? nf2b75@ls) (let ((nf2b85@nf2b80 '#f) (nf2b87@nf2b82 '#f) (nf2b89@nf2b81 '#f) (nf2b8c@nf2b7f '#f) (nf2b8e@make-library-resolution-condition '#f) (nf2b90@nf2b7d '#f) (nf2b92@nf2b7e '#f) (nf2b94@library-resolution-condition? '#f) (nf2b96@condition-library '#f) (nf2b98@condition-files '#f)) (begin (set! nf2b85@nf2b80 (make-record-type-descriptor '&library-resolution nf4e8c@nf4bd3@&condition-rtd 'nf2b83 '#f '#f '#((immutable library) (immutable files)))) (set! nf2b87@nf2b82 '#f) (set! nf2b89@nf2b81 (make-record-constructor-descriptor nf2b85@nf2b80 nf4e8d@nf4bd5@&condition-rcd nf2b87@nf2b82)) (set! nf2b8c@nf2b7f (record-predicate nf2b85@nf2b80)) (set! nf2b8e@make-library-resolution-condition (record-constructor nf2b89@nf2b81)) (set! nf2b90@nf2b7d (record-accessor nf2b85@nf2b80 '0)) (set! nf2b92@nf2b7e (record-accessor nf2b85@nf2b80 '1)) (set! nf2b94@library-resolution-condition? (condition-predicate nf2b85@nf2b80)) (set! nf2b96@condition-library (condition-accessor nf2b85@nf2b80 nf2b90@nf2b7d)) (set! nf2b98@condition-files (condition-accessor nf2b85@nf2b80 nf2b92@nf2b7e)) (raise (condition (nf4eac@nf4c6d@make-error) (nf4ece@nf4cc9@make-who-condition 'expander) (nf4e92@nf4c2a@make-message-condition '"cannot locate library in library-path") (nf2b8e@make-library-resolution-condition nf2b71@x (reverse nf2b77@failed-list)))))) (if (null? nf2b76@exts) (nf2b7b@f (cdr nf2b75@ls) (nf2ab2@library-extensions) nf2b77@failed-list) (let ((nf2b99@name (string-append (car nf2b75@ls) nf2b73@str (car nf2b76@exts)))) (if (file-exists? nf2b99@name) nf2b99@name (nf2b7b@f nf2b75@ls (cdr nf2b76@exts) (cons nf2b99@name nf2b77@failed-list))))))))) (lambda (nf2b9b@f) (if (procedure? nf2b9b@f) nf2b9b@f (assertion-violation 'file-locator '"not a procedure" nf2b9b@f))))) (set! nf2c77@nf2ab6@file-locator nf2ab6@file-locator) (set! nf2ab8@serialize-all (lambda (nf2b9d@serialize nf2b9e@compile) (let ((nf2ba2@library-desc '#f)) (begin (set! nf2ba2@library-desc (lambda (nf2ba5@x) (list (nf2a72@library-id nf2ba5@x) (nf2a76@library-name nf2ba5@x)))) (for-each (lambda (nf2ba3@x) (if (nf2aa6@library-source-file-name nf2ba3@x) (nf2b9d@serialize (nf2aa6@library-source-file-name nf2ba3@x) (list (nf2a72@library-id nf2ba3@x) (nf2a76@library-name nf2ba3@x) (nf2a7a@library-version nf2ba3@x) (map nf2ba2@library-desc (nf2a7e@library-imp* nf2ba3@x)) (map nf2ba2@library-desc (nf2a82@library-vis* nf2ba3@x)) (map nf2ba2@library-desc (nf2a86@library-inv* nf2ba3@x)) (nf2a8a@library-subst nf2ba3@x) (nf2a8e@library-env nf2ba3@x) (nf2b9e@compile (nf2a9a@library-visit-code nf2ba3@x)) (nf2b9e@compile (nf2a9e@library-invoke-code nf2ba3@x)) (nf2aa2@library-visible? nf2ba3@x))) (void))) ((nf2a64@current-library-collection))))))) (set! nf2c78@nf2ab8@serialize-all nf2ab8@serialize-all) (set! nf2aba@current-precompiled-library-loader (nf29ba@nf2899@make-parameter (lambda (nf2ba7@filename nf2ba8@sk) '#f))) (set! nf2c79@nf2aba@current-precompiled-library-loader nf2aba@current-precompiled-library-loader) (set! nf2abc@try-load-from-file (lambda (nf2bab@filename) ((nf2aba@current-precompiled-library-loader) nf2bab@filename (lambda nf2bd1 (let ((nf2bd2 (length nf2bd1))) (if (= nf2bd2 '11) (apply (lambda (nf2bad@id nf2bae@name nf2baf@ver nf2bb0@imp* nf2bb1@vis* nf2bb2@inv* nf2bb3@exp-subst nf2bb4@exp-env nf2bb5@visit-proc nf2bb6@invoke-proc nf2bb7@visible?) (let nf2bc5@f ((nf2bc3@deps (append nf2bb0@imp* nf2bb1@vis* nf2bb2@inv*))) (if (null? nf2bc3@deps) (begin (nf2ad0@install-library nf2bad@id nf2bae@name nf2baf@ver nf2bb0@imp* nf2bb1@vis* nf2bb2@inv* nf2bb3@exp-subst nf2bb4@exp-env nf2bb5@visit-proc nf2bb6@invoke-proc '#f '#f nf2bb7@visible? '#f) '#t) (let ((nf2bc7@d (car nf2bc3@deps))) (let ((nf2bc9@label (car nf2bc7@d)) (nf2bca@dname (cadr nf2bc7@d))) (let ((nf2bcd@l (nf2ac6@find-library-by-name nf2bca@dname))) (if (and (nf2a70@library? nf2bcd@l) (eq? nf2bc9@label (nf2a72@library-id nf2bcd@l))) (nf2bc5@f (cdr nf2bc3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" nf2bae@name nf2bca@dname nf2bab@filename nf2bcd@l nf2bc9@label (nf2a72@library-id nf2bcd@l)) '#f)))))))) nf2bd1) (if (>= nf2bd2 '0) (apply (lambda nf2bcf@others '#f) nf2bd1) (error 'apply '"invalid arg count")))))))) (set! nf2c7a@nf2abc@try-load-from-file nf2abc@try-load-from-file) (set! nf2abe@library-loader (nf29ba@nf2899@make-parameter (lambda (nf2bd3@x) (let ((nf2bd5@file-name ((nf2ab6@file-locator) nf2bd3@x))) (if (not nf2bd5@file-name) (assertion-violation '#f '"cannot file library" nf2bd3@x) (or (nf2abc@try-load-from-file nf2bd5@file-name) ((nf2ac0@current-library-expander) (nf29b9@nf2897@read-library-source-file nf2bd5@file-name) nf2bd5@file-name (lambda (nf2bd7@name) (if (not (fast-equal? nf2bd7@name nf2bd3@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (nf2bdd@nf2bda nf2bde@nf2bdc) (let ((nf2be1@e nf2bde@nf2bdc) (nf2be2@p nf2bdd@nf2bda)) (begin (display '"expected to find library " nf2be2@p) (write nf2bd3@x nf2be2@p) (display '" in file " nf2be2@p) (display nf2bd5@file-name nf2be2@p) (display '", found " nf2be2@p) (write nf2bd7@name nf2be2@p) (display '" instead" nf2be2@p) (nf2be1@e)))))) (void)))))))) (lambda (nf2be5@f) (if (procedure? nf2be5@f) nf2be5@f (assertion-violation 'library-locator '"not a procedure" nf2be5@f))))) (set! nf2c7b@nf2abe@library-loader nf2abe@library-loader) (set! nf2ac0@current-library-expander (nf29ba@nf2899@make-parameter (lambda (nf2be7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (nf2be9@f) (if (procedure? nf2be9@f) nf2be9@f (assertion-violation 'library-expander '"not a procedure" nf2be9@f))))) (set! nf2c7c@nf2ac0@current-library-expander nf2ac0@current-library-expander) (set! nf2ac2@external-pending-libraries (nf29ba@nf2899@make-parameter '())) (set! nf2c7d@nf2ac2@external-pending-libraries nf2ac2@external-pending-libraries) (set! nf2ac4@find-external-library (lambda (nf2beb@name) (begin (if (member nf2beb@name (nf2ac2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" nf2beb@name) (void)) (let ((nf2bf1@nf2bee nf2ac2@external-pending-libraries) (nf2bf2@nf2bf0 (cons nf2beb@name (nf2ac2@external-pending-libraries)))) (let ((nf2bf5@swap (lambda () (let ((nf2bf7@t (nf2bf1@nf2bee))) (begin (nf2bf1@nf2bee nf2bf2@nf2bf0) (set! nf2bf2@nf2bf0 nf2bf7@t)))))) (dynamic-wind nf2bf5@swap (lambda () (begin ((nf2abe@library-loader) nf2beb@name) (or (nf2aae@find-library-by (lambda (nf2bf9@x) (fast-equal? (nf2a76@library-name nf2bf9@x) nf2beb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" nf2beb@name)))) nf2bf5@swap)))))) (set! nf2c7e@nf2ac4@find-external-library nf2ac4@find-external-library) (set! nf2ac6@find-library-by-name (lambda (nf2bfb@name) (or (nf2aae@find-library-by (lambda (nf2bfd@x) (fast-equal? (nf2a76@library-name nf2bfd@x) nf2bfb@name))) (nf2ac4@find-external-library nf2bfb@name)))) (set! nf2c7f@nf2ac6@find-library-by-name nf2ac6@find-library-by-name) (set! nf2ac8@library-exists? (lambda (nf2bff@name) (and (nf2aae@find-library-by (lambda (nf2c01@x) (fast-equal? (nf2a76@library-name nf2c01@x) nf2bff@name))) '#t))) (set! nf2c80@nf2ac8@library-exists? nf2ac8@library-exists?) (set! nf2aca@find-library-by-spec/die (lambda (nf2c03@spec) (let ((nf2c05@id (car nf2c03@spec))) (or (nf2aae@find-library-by (lambda (nf2c07@x) (eq? nf2c05@id (nf2a72@library-id nf2c07@x)))) (assertion-violation '#f '"cannot find library with required spec" nf2c03@spec))))) (set! nf2c81@nf2aca@find-library-by-spec/die nf2aca@find-library-by-spec/die) (set! nf2acc@label->binding-table (make-eq-hashtable)) (set! nf2c82@nf2acc@label->binding-table nf2acc@label->binding-table) (set! nf2ace@install-library-record (lambda (nf2c09@lib) (begin (let ((nf2c0b@exp-env (nf2a8e@library-env nf2c09@lib))) (for-each (lambda (nf2c0d@x) (let ((nf2c0f@label (car nf2c0d@x)) (nf2c10@binding (cdr nf2c0d@x))) (let ((nf2c13@binding (let ((nf2c15@t (car nf2c10@binding))) (if (memv nf2c15@t '(global)) (cons 'global (cons nf2c09@lib (cdr nf2c10@binding))) (if (memv nf2c15@t '(global-macro)) (cons 'global-macro (cons nf2c09@lib (cdr nf2c10@binding))) (if (memv nf2c15@t '(global-macro!)) (cons 'global-macro! (cons nf2c09@lib (cdr nf2c10@binding))) nf2c10@binding)))))) (begin (if (hashtable-ref nf2acc@label->binding-table nf2c0f@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" nf2c0f@label (hashtable-ref nf2acc@label->binding-table nf2c0f@label '#f) nf2c13@binding) (exit)) (void)) (hashtable-set! nf2acc@label->binding-table nf2c0f@label nf2c13@binding))))) nf2c0b@exp-env)) ((nf2a64@current-library-collection) nf2c09@lib)))) (set! nf2c83@nf2ace@install-library-record nf2ace@install-library-record) (set! nf2ad0@install-library (lambda (nf2c17@id nf2c18@name nf2c19@ver nf2c1a@imp* nf2c1b@vis* nf2c1c@inv* nf2c1d@exp-subst nf2c1e@exp-env nf2c1f@visit-proc nf2c20@invoke-proc nf2c21@visit-code nf2c22@invoke-code nf2c23@visible? nf2c24@source-file-name) (let ((nf2c33@imp-lib* (map nf2aca@find-library-by-spec/die nf2c1a@imp*)) (nf2c34@vis-lib* (map nf2aca@find-library-by-spec/die nf2c1b@vis*)) (nf2c35@inv-lib* (map nf2aca@find-library-by-spec/die nf2c1c@inv*))) (begin (if (not (and (symbol? nf2c17@id) (list? nf2c18@name) (list? nf2c19@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" nf2c17@id nf2c18@name nf2c19@ver) (void)) (if (nf2ac8@library-exists? nf2c18@name) (assertion-violation 'install-library '"library is already installed" nf2c18@name) (void)) (let ((nf2c39@lib (make-simple-struct 'library '15 (list nf2c17@id nf2c18@name nf2c19@ver nf2c33@imp-lib* nf2c34@vis-lib* nf2c35@inv-lib* nf2c1d@exp-subst nf2c1e@exp-env nf2c1f@visit-proc nf2c20@invoke-proc nf2c21@visit-code nf2c22@invoke-code nf2c23@visible? nf2c24@source-file-name)))) (nf2ace@install-library-record nf2c39@lib)))))) (set! nf2c84@nf2ad0@install-library nf2ad0@install-library) (set! nf2ad2@imported-label->binding (lambda (nf2c3b@lab) (hashtable-ref nf2acc@label->binding-table nf2c3b@lab '#f))) (set! nf2c85@nf2ad2@imported-label->binding nf2ad2@imported-label->binding) (set! nf2ad4@invoke-library (lambda (nf2c3d@lib) (let ((nf2c3f@invoke (nf2a96@library-invoke-state nf2c3d@lib))) (if (procedure? nf2c3f@invoke) (begin (nf2a98@set-library-invoke-state! nf2c3d@lib (lambda () (assertion-violation 'invoke '"circularity detected" nf2c3d@lib))) (for-each nf2ad4@invoke-library (nf2a86@library-inv* nf2c3d@lib)) (nf2a98@set-library-invoke-state! nf2c3d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" nf2c3d@lib))) (nf2c3f@invoke) (nf2a98@set-library-invoke-state! nf2c3d@lib '#t)) (void))))) (set! nf2c86@nf2ad4@invoke-library nf2ad4@invoke-library) (set! nf2ad6@visit-library (lambda (nf2c41@lib) (let ((nf2c43@visit (nf2a92@library-visit-state nf2c41@lib))) (if (procedure? nf2c43@visit) (begin (nf2a94@set-library-visit-state! nf2c41@lib (lambda () (assertion-violation 'visit '"circularity detected" nf2c41@lib))) (for-each nf2ad4@invoke-library (nf2a82@library-vis* nf2c41@lib)) (nf2a94@set-library-visit-state! nf2c41@lib (lambda () (assertion-violation 'invoke '"first visit did not return" nf2c41@lib))) (nf2c43@visit) (nf2a94@set-library-visit-state! nf2c41@lib '#t)) (void))))) (set! nf2c87@nf2ad6@visit-library nf2ad6@visit-library) (set! nf2ad8@invoke-library-by-spec (lambda (nf2c45@spec) (nf2ad4@invoke-library (nf2aca@find-library-by-spec/die nf2c45@spec)))) (set! nf2c88@nf2ad8@invoke-library-by-spec nf2ad8@invoke-library-by-spec) (set! nf2ada@installed-libraries (lambda nf2c4d (let ((nf2c4e (length nf2c4d))) (if (= nf2c4e '1) (apply (lambda (nf2c47@all?) (let nf2c4b@f ((nf2c49@ls ((nf2a64@current-library-collection)))) (if (null? nf2c49@ls) '() (if (or nf2c47@all? (nf2aa2@library-visible? (car nf2c49@ls))) (cons (car nf2c49@ls) (nf2c4b@f (cdr nf2c49@ls))) (nf2c4b@f (cdr nf2c49@ls)))))) nf2c4d) (if (= nf2c4e '0) (apply (lambda () (nf2ada@installed-libraries '#f)) nf2c4d) (error 'apply '"invalid arg count")))))) (set! nf2c89@nf2ada@installed-libraries nf2ada@installed-libraries) (set! nf2adc@library-spec (lambda (nf2c4f@x) (begin (if (not (nf2a70@library? nf2c4f@x)) (assertion-violation 'library-spec '"not a library" nf2c4f@x) (void)) (list (nf2a72@library-id nf2c4f@x) (nf2a76@library-name nf2c4f@x) (nf2a7a@library-version nf2c4f@x))))) (set! nf2c8a@nf2adc@library-spec nf2adc@library-spec) (void))
(begin (set! nf2c8e@build-global-define (unspecified)) (set! nf2cff@build-lambda (unspecified)) (set! nf2d01@build-case-lambda (unspecified)) (set! nf2d2f@build-sequence (unspecified)) (set! nf2d31@build-void (unspecified)) (set! nf2d33@build-letrec (unspecified)) (set! nf2d35@build-let (unspecified)) (set! nf2d37@build-named-let (unspecified)) (set! nf2d39@build-letrec* (unspecified)) (set! nf2d3b@build-library-letrec* (unspecified)) (set! nf2d3d@build-receive (unspecified)) (set! nf2c8e@build-global-define (lambda (nf2d3e@x) (nf2d31@build-void))) (set! nf2dd2@nf2c8e@build-global-define nf2c8e@build-global-define) (set! nf2cff@build-lambda (lambda (nf2d40@ae nf2d41@vars nf2d42@exp) (list 'lambda nf2d41@vars nf2d42@exp))) (set! nf2dd3@nf2cff@build-lambda nf2cff@build-lambda) (set! nf2d01@build-case-lambda (lambda (nf2d46@ae nf2d47@vars* nf2d48@exp*) (let ((nf2d4d@build-error '#f) (nf2d4f@build-pred '#f) (nf2d51@build-apply '#f) (nf2d53@expand-case-lambda '#f)) (begin (set! nf2d4d@build-error (lambda (nf2d84@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! nf2d4f@build-pred (lambda (nf2d6c@ae nf2d6d@n nf2d6e@vars) (call-with-values (lambda () (let nf2d7a@f ((nf2d76@vars nf2d6e@vars) (nf2d77@count '0)) (if (pair? nf2d76@vars) (nf2d7a@f (cdr nf2d76@vars) (+ nf2d77@count '1)) (if (null? nf2d76@vars) (values nf2d77@count '=) (values nf2d77@count '>=))))) (lambda (nf2d7c@nf2d73 nf2d7d@nf2d75) (let ((nf2d80@pred nf2d7d@nf2d75) (nf2d81@count nf2d7c@nf2d73)) (list (list 'primitive nf2d80@pred) nf2d6d@n (list 'quote nf2d81@count))))))) (set! nf2d51@build-apply (lambda (nf2d64@ae nf2d65@g nf2d66@vars nf2d67@exp) (list '(primitive apply) (nf2cff@build-lambda nf2d64@ae nf2d66@vars nf2d67@exp) nf2d65@g))) (set! nf2d53@expand-case-lambda (lambda (nf2d54@ae nf2d55@vars nf2d56@exp*) (let ((nf2d5a@g (gensym)) (nf2d5b@n (gensym))) (list 'lambda nf2d5a@g (nf2d35@build-let nf2d54@ae (list nf2d5b@n) (list (list '(primitive length) nf2d5a@g)) (let nf2d62@f ((nf2d5e@vars* nf2d47@vars*) (nf2d5f@exp* nf2d56@exp*)) (if (null? nf2d5e@vars*) (nf2d4d@build-error nf2d54@ae) (list 'if (nf2d4f@build-pred nf2d54@ae nf2d5b@n (car nf2d5e@vars*)) (nf2d51@build-apply nf2d54@ae nf2d5a@g (car nf2d5e@vars*) (car nf2d5f@exp*)) (nf2d62@f (cdr nf2d5e@vars*) (cdr nf2d5f@exp*)))))))))) (if (= (length nf2d48@exp*) '1) (nf2cff@build-lambda nf2d46@ae (car nf2d47@vars*) (car nf2d48@exp*)) (nf2d53@expand-case-lambda nf2d46@ae nf2d47@vars* nf2d48@exp*)))))) (set! nf2dd4@nf2d01@build-case-lambda nf2d01@build-case-lambda) (set! nf2d2f@build-sequence (lambda (nf2d86@ae nf2d87@exps) (let nf2d8c@loop ((nf2d8a@exps nf2d87@exps)) (if (null? (cdr nf2d8a@exps)) (car nf2d8a@exps) (if (equal? (car nf2d8a@exps) (nf2d31@build-void)) (nf2d8c@loop (cdr nf2d8a@exps)) (cons 'begin nf2d8a@exps)))))) (set! nf2dd5@nf2d2f@build-sequence nf2d2f@build-sequence) (set! nf2d31@build-void (lambda () '((primitive void)))) (set! nf2dd6@nf2d31@build-void nf2d31@build-void) (set! nf2d33@build-letrec (lambda (nf2d8e@ae nf2d8f@vars nf2d90@val-exps nf2d91@body-exp) (if (null? nf2d8f@vars) nf2d91@body-exp (list 'letrec (map list nf2d8f@vars nf2d90@val-exps) nf2d91@body-exp)))) (set! nf2dd7@nf2d33@build-letrec nf2d33@build-letrec) (set! nf2d35@build-let (lambda (nf2d96@ae nf2d97@vars nf2d98@val-exps nf2d99@body-exp) (if (null? nf2d97@vars) nf2d99@body-exp (list 'let (map list nf2d97@vars nf2d98@val-exps) nf2d99@body-exp)))) (set! nf2dd8@nf2d35@build-let nf2d35@build-let) (set! nf2d37@build-named-let (lambda (nf2d9e@ae nf2d9f@name nf2da0@vars nf2da1@val-exps nf2da2@body-exp) (list 'let nf2d9f@name (map list nf2da0@vars nf2da1@val-exps) nf2da2@body-exp))) (set! nf2dd9@nf2d37@build-named-let nf2d37@build-named-let) (set! nf2d39@build-letrec* (lambda (nf2da8@ae nf2da9@vars nf2daa@val-exps nf2dab@body-exp) (if (null? nf2da9@vars) nf2dab@body-exp (nf2d35@build-let nf2da8@ae nf2da9@vars (map (lambda (nf2db0@x) (list 'quote '#f)) nf2da9@vars) (nf2d2f@build-sequence nf2da8@ae (append (map (lambda (nf2db2@lhs nf2db3@rhs) (list 'set! nf2db2@lhs nf2db3@rhs)) nf2da9@vars nf2daa@val-exps) (list nf2dab@body-exp))))))) (set! nf2dda@nf2d39@build-letrec* nf2d39@build-letrec*) (set! nf2d3b@build-library-letrec* (lambda (nf2db6@ae nf2db7@name nf2db8@vars nf2db9@locs nf2dba@val-exps nf2dbb@body-exp) (cons 'begin (append (map (lambda (nf2dc2@var) (cons 'set! (cons nf2dc2@var '((unspecified))))) nf2db8@vars) (append (apply append (map (lambda (nf2dc4@var nf2dc5@loc nf2dc6@val-exp) (list (list 'set! nf2dc4@var nf2dc6@val-exp) (list 'set! nf2dc5@loc nf2dc4@var))) nf2db8@vars nf2db9@locs nf2dba@val-exps)) (list nf2dbb@body-exp)))))) (set! nf2ddb@nf2d3b@build-library-letrec* nf2d3b@build-library-letrec*) (set! nf2d3d@build-receive (lambda (nf2dca@ae nf2dcb@vars nf2dcc@producer nf2dcd@body*) (begin (display '"************** in ") (cons 'receive (cons nf2dcb@vars (cons nf2dcc@producer nf2dcd@body*)))))) (set! nf2ddc@nf2d3d@build-receive nf2d3d@build-receive) (void))
(begin (set! nf2deb@file-options-macro (unspecified)) (set! nf2ded@set-cons (unspecified)) (set! nf2def@set-union (unspecified)) (set! nf2df4@top-mark* (unspecified)) (set! nf2df6@top-marked? (unspecified)) (set! nf2df8@gen-lexical (unspecified)) (set! nf2dfa@gen-global (unspecified)) (set! nf2dfc@gen-label (unspecified)) (set! nf2dfe@gen-top-level-label (unspecified)) (set! nf2e00@gen-define-label+loc (unspecified)) (set! nf2e02@gen-define-label (unspecified)) (set! nf2e0c@rib? (unspecified)) (set! nf2e0e@rib-sym* (unspecified)) (set! nf2e10@set-rib-sym*! (unspecified)) (set! nf2e12@rib-mark** (unspecified)) (set! nf2e14@set-rib-mark**! (unspecified)) (set! nf2e16@rib-label* (unspecified)) (set! nf2e18@set-rib-label*! (unspecified)) (set! nf2e1a@rib-sealed/freq (unspecified)) (set! nf2e1c@set-rib-sealed/freq! (unspecified)) (set! nf2e1e@rib-cache (unspecified)) (set! nf2e20@set-rib-cache! (unspecified)) (set! nf2e22@dummy (unspecified)) (set! nf2e24@make-empty-rib (unspecified)) (set! nf2e26@extend-rib! (unspecified)) (set! nf2e28@extend-rib/nc! (unspecified)) (set! nf2e2a@make-rib-map (unspecified)) (set! nf2e2c@seal-rib! (unspecified)) (set! nf2e2e@unseal-rib! (unspecified)) (set! nf2e30@make-full-rib (unspecified)) (set! nf2e32@rp (unspecified)) (set! nf2e3c@stx? (unspecified)) (set! nf2e3e@stx-expr (unspecified)) (set! nf2e40@set-stx-expr! (unspecified)) (set! nf2e42@stx-mark* (unspecified)) (set! nf2e44@set-stx-mark*! (unspecified)) (set! nf2e46@stx-subst* (unspecified)) (set! nf2e48@set-stx-subst*! (unspecified)) (set! nf2e4a@stx-ae* (unspecified)) (set! nf2e4c@set-stx-ae*! (unspecified)) (set! nf2e4e@dummy (unspecified)) (set! nf2e50@datum->stx (unspecified)) (set! nf2e52@gen-mark (unspecified)) (set! nf2e54@anti-mark (unspecified)) (set! nf2e56@anti-mark? (unspecified)) (set! nf2e58@mkstx (unspecified)) (set! nf2e5a@add-mark (unspecified)) (set! nf2e5c@add-subst (unspecified)) (set! nf2e5e@syntax-kind? (unspecified)) (set! nf2e60@syntax-vector->list (unspecified)) (set! nf2e62@syntax-pair? (unspecified)) (set! nf2e64@syntax-vector? (unspecified)) (set! nf2e66@syntax-null? (unspecified)) (set! nf2e68@syntax-list? (unspecified)) (set! nf2e6a@syntax-car (unspecified)) (set! nf2e6c@syntax-cdr (unspecified)) (set! nf2e6e@syntax->list (unspecified)) (set! nf2e70@id? (unspecified)) (set! nf2e72@id->sym (unspecified)) (set! nf2e74@bound-id=? (unspecified)) (set! nf2e76@free-id=? (unspecified)) (set! nf2e78@valid-bound-ids? (unspecified)) (set! nf2e7a@distinct-bound-ids? (unspecified)) (set! nf2e7c@bound-id-member? (unspecified)) (set! nf2e7e@self-evaluating? (unspecified)) (set! nf2e80@strip-annotations (unspecified)) (set! nf2e82@strip (unspecified)) (set! nf2e84@stx->datum (unspecified)) (set! nf2e86@id->label (unspecified)) (set! nf2e88@label->binding (unspecified)) (set! nf2e8a@make-binding (unspecified)) (set! nf2e8c@binding-type (unspecified)) (set! nf2e8e@binding-value (unspecified)) (set! nf2e90@raise-unbound-error (unspecified)) (set! nf2e92@syntax-type (unspecified)) (set! nf2ea0@sanitize-binding (unspecified)) (set! nf2ea2@make-variable-transformer (unspecified)) (set! nf2ea4@variable-transformer? (unspecified)) (set! nf2ea6@variable-transformer-procedure (unspecified)) (set! nf2ea8@make-eval-transformer (unspecified)) (set! nf2ff9@parse-define (unspecified)) (set! nf2ffb@parse-define-syntax (unspecified)) (set! nf2ffd@scheme-stx-hashtable (unspecified)) (set! nf2fff@scheme-stx (unspecified)) (set! nf3001@lexical-var (unspecified)) (set! nf3003@lexical-mutable? (unspecified)) (set! nf3005@set-lexical-mutable! (unspecified)) (set! nf3007@add-lexical (unspecified)) (set! nf3009@add-lexicals (unspecified)) (set! nf300b@letrec-helper (unspecified)) (set! nf300d@let-transformer (unspecified)) (set! nf300f@letrec-transformer (unspecified)) (set! nf3011@letrec*-transformer (unspecified)) (set! nf3013@fluid-let-syntax-transformer (unspecified)) (set! nf3015@type-descriptor-transformer (unspecified)) (set! nf3017@record-type-descriptor-transformer (unspecified)) (set! nf3019@record-constructor-descriptor-transformer (unspecified)) (set! nf301b@when-macro (unspecified)) (set! nf301d@unless-macro (unspecified)) (set! nf301f@if-transformer (unspecified)) (set! nf3021@and-transformer (unspecified)) (set! nf3023@or-transformer (unspecified)) (set! nf3025@case-macro (unspecified)) (set! nf3027@quote-transformer (unspecified)) (set! nf3029@case-lambda-transformer (unspecified)) (set! nf302b@lambda-transformer (unspecified)) (set! nf302d@bless (unspecified)) (set! nf302f@with-syntax-macro (unspecified)) (set! nf3031@invalid-fmls-error (unspecified)) (set! nf3033@let-macro (unspecified)) (set! nf3035@let-values-macro (unspecified)) (set! nf3037@let*-values-macro (unspecified)) (set! nf3039@trace-lambda-macro (unspecified)) (set! nf303b@trace-define-macro (unspecified)) (set! nf303d@trace-define-syntax-macro (unspecified)) (set! nf303f@trace-let/rec-syntax (unspecified)) (set! nf3041@trace-let-syntax-macro (unspecified)) (set! nf3043@trace-letrec-syntax-macro (unspecified)) (set! nf3045@guard-macro (unspecified)) (set! nf3047@define-enumeration-macro (unspecified)) (set! nf3049@time-macro (unspecified)) (set! nf304b@delay-macro (unspecified)) (set! nf304d@assert-macro (unspecified)) (set! nf304f@endianness-macro (unspecified)) (set! nf3051@identifier-syntax-macro (unspecified)) (set! nf3053@do-macro (unspecified)) (set! nf3055@let*-macro (unspecified)) (set! nf3057@or-macro (unspecified)) (set! nf3059@and-macro (unspecified)) (set! nf305b@cond-macro (unspecified)) (set! nf305d@do-include (unspecified)) (set! nf305f@include-macro (unspecified)) (set! nf3061@include-into-macro (unspecified)) (set! nf3063@syntax-rules-macro (unspecified)) (set! nf3065@quasiquote-macro (unspecified)) (set! nf3067@quasisyntax-macro (unspecified)) (set! nf3069@define-struct-macro (unspecified)) (set! nf306b@define-record-type-macro (unspecified)) (set! nf306d@define-condition-type-macro (unspecified)) (set! nf306f@incorrect-usage-macro (unspecified)) (set! nf3071@parameterize-macro (unspecified)) (set! nf3073@foreign-call-transformer (unspecified)) (set! nf3075@convert-pattern (unspecified)) (set! nf3077@syntax-dispatch (unspecified)) (set! nf3079@ellipsis? (unspecified)) (set! nf307b@underscore? (unspecified)) (set! nf307d@verify-literals (unspecified)) (set! nf307f@syntax-case-transformer (unspecified)) (set! nf3081@ellipsis-map (unspecified)) (set! nf3083@syntax-transformer (unspecified)) (set! nf3085@core-macro-transformer (unspecified)) (set! nf3087@symbol-macro (unspecified)) (set! nf3089@macro-transformer (unspecified)) (set! nf308b@local-macro-transformer (unspecified)) (set! nf308d@do-macro-call (unspecified)) (set! nf308f@chi-macro (unspecified)) (set! nf3091@chi-local-macro (unspecified)) (set! nf3093@chi-global-macro (unspecified)) (set! nf3095@chi-expr* (unspecified)) (set! nf3097@chi-application (unspecified)) (set! nf3099@chi-expr (unspecified)) (set! nf309b@chi-set! (unspecified)) (set! nf309d@verify-formals (unspecified)) (set! nf309f@chi-lambda-clause (unspecified)) (set! nf30a1@chi-lambda-clause* (unspecified)) (set! nf30a3@chi-defun (unspecified)) (set! nf30a5@chi-rhs (unspecified)) (set! nf30a7@expand-interaction-rhs*/init* (unspecified)) (set! nf30a9@chi-rhs* (unspecified)) (set! nf30ab@find-bound=? (unspecified)) (set! nf30ad@find-dups (unspecified)) (set! nf30af@chi-internal (unspecified)) (set! nf30b1@parse-module (unspecified)) (set! nf30bb@module-interface? (unspecified)) (set! nf30bd@module-interface-first-mark (unspecified)) (set! nf30bf@set-module-interface-first-mark! (unspecified)) (set! nf30c1@module-interface-exp-id-vec (unspecified)) (set! nf30c3@set-module-interface-exp-id-vec! (unspecified)) (set! nf30c5@module-interface-exp-lab-vec (unspecified)) (set! nf30c7@set-module-interface-exp-lab-vec! (unspecified)) (set! nf30c9@dummy (unspecified)) (set! nf30cb@module-interface-exp-id* (unspecified)) (set! nf30cd@chi-internal-module (unspecified)) (set! nf30cf@chi-body* (unspecified)) (set! nf30d1@expand-transformer (unspecified)) (set! nf30d3@parse-exports (unspecified)) (set! nf30d5@parse-library-name (unspecified)) (set! nf30d7@parse-library (unspecified)) (set! nf30d9@parse-import-spec* (unspecified)) (set! nf30db@make-top-rib (unspecified)) (set! nf30dd@make-collector (unspecified)) (set! nf30df@inv-collector (unspecified)) (set! nf30e1@vis-collector (unspecified)) (set! nf30e3@imp-collector (unspecified)) (set! nf30e5@chi-library-internal (unspecified)) (set! nf30e7@chi-interaction-expr (unspecified)) (set! nf30e9@library-body-expander (unspecified)) (set! nf30eb@core-library-expander (unspecified)) (set! nf30ed@parse-top-level-program (unspecified)) (set! nf30ef@top-level-expander (unspecified)) (set! nf30f1@rp (unspecified)) (set! nf30fb@env? (unspecified)) (set! nf30fd@env-names (unspecified)) (set! nf30ff@set-env-names! (unspecified)) (set! nf3101@env-labels (unspecified)) (set! nf3103@set-env-labels! (unspecified)) (set! nf3105@env-itc (unspecified)) (set! nf3107@set-env-itc! (unspecified)) (set! nf3109@dummy (unspecified)) (set! nf310b@rp (unspecified)) (set! nf3115@interaction-env? (unspecified)) (set! nf3117@interaction-env-rib (unspecified)) (set! nf3119@set-interaction-env-rib! (unspecified)) (set! nf311b@interaction-env-r (unspecified)) (set! nf311d@set-interaction-env-r! (unspecified)) (set! nf311f@interaction-env-locs (unspecified)) (set! nf3121@set-interaction-env-locs! (unspecified)) (set! nf3123@dummy (unspecified)) (set! nf3125@interaction-environment-symbols (unspecified)) (set! nf3127@environment-bindings (unspecified)) (set! nf3129@parse-binding (unspecified)) (set! nf312b@environment? (unspecified)) (set! nf312d@environment-symbols (unspecified)) (set! nf312f@environment (unspecified)) (set! nf3131@null-environment (unspecified)) (set! nf3133@scheme-report-environment (unspecified)) (set! nf3135@expand (unspecified)) (set! nf3137@eval (unspecified)) (set! nf3139@library-expander (unspecified)) (set! nf313b@boot-library-expand (unspecified)) (set! nf313d@rev-map-append (unspecified)) (set! nf313f@build-exports (unspecified)) (set! nf3141@make-export-subst (unspecified)) (set! nf3143@make-export-env/macros (unspecified)) (set! nf3145@generate-temporaries (unspecified)) (set! nf3147@free-identifier=? (unspecified)) (set! nf3149@bound-identifier=? (unspecified)) (set! nf314b@make-source-condition (unspecified)) (set! nf314d@extract-position-condition (unspecified)) (set! nf314f@expression-position (unspecified)) (set! nf3151@assertion-error (unspecified)) (set! nf3153@syntax-error (unspecified)) (set! nf3155@syntax-violation* (unspecified)) (set! nf3157@syntax-violation (unspecified)) (set! nf3159@identifier? (unspecified)) (set! nf315b@datum->syntax (unspecified)) (set! nf315d@syntax->datum (unspecified)) (set! nf315f@ungensym-all (unspecified)) (set! nf3161@compile-r6rs-top-level (unspecified)) (set! nf3163@pre-compile-r6rs-top-level (unspecified)) (set! nf3165@interaction-environment (unspecified)) (set! nf3167@top-level-context (unspecified)) (set! nf2deb@file-options-macro (lambda (nf3168@x) (let ((nf316b@valid-option? '#f)) (begin (set! nf316b@valid-option? (lambda (nf3174@x) (and (nf2e70@id? nf3174@x) (memq (nf2e72@id->sym nf3174@x) '(no-fail no-create no-truncate))))) (let ((nf316c@t nf3168@x)) (let ((nf316e@ls/false (nf3077@syntax-dispatch nf316c@t '(_ . each-any)))) (if (and nf316e@ls/false (apply (lambda (nf3170@opt*) (for-all nf316b@valid-option? nf3170@opt*)) nf316e@ls/false)) (apply (lambda (nf3172@opt*) (nf302d@bless (list 'make-file-options (list 'quote nf3172@opt*)))) nf316e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf316c@t)))))))) (set! nf4abe@nf2deb@file-options-macro nf2deb@file-options-macro) (set! nf2ded@set-cons (lambda (nf3176@x nf3177@ls) (if (memq nf3176@x nf3177@ls) nf3177@ls (cons nf3176@x nf3177@ls)))) (set! nf4abf@nf2ded@set-cons nf2ded@set-cons) (set! nf2def@set-union (lambda (nf317a@ls1 nf317b@ls2) (if (null? nf317a@ls1) nf317b@ls2 (if (memq (car nf317a@ls1) nf317b@ls2) (nf2def@set-union (cdr nf317a@ls1) nf317b@ls2) (cons (car nf317a@ls1) (nf2def@set-union (cdr nf317a@ls1) nf317b@ls2)))))) (set! nf4ac0@nf2def@set-union nf2def@set-union) (set! nf2df4@top-mark* '(top)) (set! nf4ac1@nf2df4@top-mark* nf2df4@top-mark*) (set! nf2df6@top-marked? (lambda (nf317e@m*) (memq 'top nf317e@m*))) (set! nf4ac2@nf2df6@top-marked? nf2df6@top-marked?) (set! nf2df8@gen-lexical (lambda (nf3180@sym) (if (symbol? nf3180@sym) (gensym nf3180@sym) (if (nf2e3c@stx? nf3180@sym) (nf2df8@gen-lexical (nf2e72@id->sym nf3180@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" nf3180@sym))))) (set! nf4ac3@nf2df8@gen-lexical nf2df8@gen-lexical) (set! nf2dfa@gen-global (lambda (nf3182@x) (nf2df8@gen-lexical nf3182@x))) (set! nf4ac4@nf2dfa@gen-global nf2dfa@gen-global) (set! nf2dfc@gen-label (lambda (nf3184@_) (gensym))) (set! nf4ac5@nf2dfc@gen-label nf2dfc@gen-label) (set! nf2dfe@gen-top-level-label (lambda (nf3186@id nf3187@rib) (let ((nf318b@find '#f)) (begin (set! nf318b@find (lambda (nf3196@sym nf3197@mark* nf3198@sym* nf3199@mark** nf319a@label*) (and (pair? nf3198@sym*) (if (and (eq? nf3196@sym (car nf3198@sym*)) (same-marks? nf3197@mark* (car nf3199@mark**))) (car nf319a@label*) (nf318b@find nf3196@sym nf3197@mark* (cdr nf3198@sym*) (cdr nf3199@mark**) (cdr nf319a@label*)))))) (let ((nf318c@sym (nf2e72@id->sym nf3186@id)) (nf318d@mark* (nf2e42@stx-mark* nf3186@id))) (let ((nf3190@sym* (nf2e0e@rib-sym* nf3187@rib))) (let ((nf3192@t (and (memq nf318c@sym (nf2e0e@rib-sym* nf3187@rib)) (nf318b@find nf318c@sym nf318d@mark* nf3190@sym* (nf2e12@rib-mark** nf3187@rib) (nf2e16@rib-label* nf3187@rib))))) (if nf3192@t ((lambda (nf3194@label) (if (nf2c85@nf2ad2@imported-label->binding nf3194@label) (gensym) nf3194@label)) nf3192@t) (gensym))))))))) (set! nf4ac6@nf2dfe@gen-top-level-label nf2dfe@gen-top-level-label) (set! nf2e00@gen-define-label+loc (lambda (nf31a0@id nf31a1@rib) (let ((nf31a4@t (nf3167@top-level-context))) (if nf31a4@t ((lambda (nf31a6@env) (let ((nf31a8@label (nf2dfe@gen-top-level-label nf31a0@id nf31a1@rib)) (nf31a9@locs (nf311f@interaction-env-locs nf31a6@env))) (values nf31a8@label (let ((nf31ac@t (assq nf31a8@label nf31a9@locs))) (if nf31ac@t (cdr nf31ac@t) (let ((nf31ae@loc (nf2df8@gen-lexical nf31a0@id))) (begin (nf3121@set-interaction-env-locs! nf31a6@env (cons (cons nf31a8@label nf31ae@loc) nf31a9@locs)) nf31ae@loc))))))) nf31a4@t) (values (gensym) (nf2df8@gen-lexical nf31a0@id)))))) (set! nf4ac7@nf2e00@gen-define-label+loc nf2e00@gen-define-label+loc) (set! nf2e02@gen-define-label (lambda (nf31b0@id nf31b1@rib) (if (nf3167@top-level-context) (nf2dfe@gen-top-level-label nf31b0@id nf31b1@rib) (gensym)))) (set! nf4ac8@nf2e02@gen-define-label nf2e02@gen-define-label) (set! nf2e0c@rib? (lambda (nf31b4@x) (and (simple-struct? nf31b4@x) (eq? (simple-struct-name nf31b4@x) 'rib)))) (set! nf4ac9@nf2e0c@rib? nf2e0c@rib?) (set! nf2e0e@rib-sym* (lambda (nf31b6@x) (simple-struct-ref nf31b6@x '0))) (set! nf4aca@nf2e0e@rib-sym* nf2e0e@rib-sym*) (set! nf2e10@set-rib-sym*! (lambda (nf31b8@x nf31b9@val) (simple-struct-set! nf31b8@x '0 nf31b9@val))) (set! nf4acb@nf2e10@set-rib-sym*! nf2e10@set-rib-sym*!) (set! nf2e12@rib-mark** (lambda (nf31bc@x) (simple-struct-ref nf31bc@x '1))) (set! nf4acc@nf2e12@rib-mark** nf2e12@rib-mark**) (set! nf2e14@set-rib-mark**! (lambda (nf31be@x nf31bf@val) (simple-struct-set! nf31be@x '1 nf31bf@val))) (set! nf4acd@nf2e14@set-rib-mark**! nf2e14@set-rib-mark**!) (set! nf2e16@rib-label* (lambda (nf31c2@x) (simple-struct-ref nf31c2@x '2))) (set! nf4ace@nf2e16@rib-label* nf2e16@rib-label*) (set! nf2e18@set-rib-label*! (lambda (nf31c4@x nf31c5@val) (simple-struct-set! nf31c4@x '2 nf31c5@val))) (set! nf4acf@nf2e18@set-rib-label*! nf2e18@set-rib-label*!) (set! nf2e1a@rib-sealed/freq (lambda (nf31c8@x) (simple-struct-ref nf31c8@x '3))) (set! nf4ad0@nf2e1a@rib-sealed/freq nf2e1a@rib-sealed/freq) (set! nf2e1c@set-rib-sealed/freq! (lambda (nf31ca@x nf31cb@val) (simple-struct-set! nf31ca@x '3 nf31cb@val))) (set! nf4ad1@nf2e1c@set-rib-sealed/freq! nf2e1c@set-rib-sealed/freq!) (set! nf2e1e@rib-cache (lambda (nf31ce@x) (simple-struct-ref nf31ce@x '4))) (set! nf4ad2@nf2e1e@rib-cache nf2e1e@rib-cache) (set! nf2e20@set-rib-cache! (lambda (nf31d0@x nf31d1@val) (simple-struct-set! nf31d0@x '4 nf31d1@val))) (set! nf4ad3@nf2e20@set-rib-cache! nf2e20@set-rib-cache!) (set! nf2e22@dummy '3) (set! nf4ad4@nf2e22@dummy nf2e22@dummy) (set! nf2e24@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! nf4ad5@nf2e24@make-empty-rib nf2e24@make-empty-rib) (set! nf2e26@extend-rib! (lambda (nf31d4@rib nf31d5@id nf31d6@label) (let ((nf31db@find '#f)) (begin (set! nf31db@find (lambda (nf31e8@sym nf31e9@mark* nf31ea@sym* nf31eb@mark** nf31ec@label*) (and (pair? nf31ea@sym*) (if (and (eq? nf31e8@sym (car nf31ea@sym*)) (same-marks? nf31e9@mark* (car nf31eb@mark**))) nf31ec@label* (nf31db@find nf31e8@sym nf31e9@mark* (cdr nf31ea@sym*) (cdr nf31eb@mark**) (cdr nf31ec@label*)))))) (begin (if (nf2e1a@rib-sealed/freq nf31d4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" nf31d4@rib) (void)) (let ((nf31dc@sym (nf2e72@id->sym nf31d5@id)) (nf31dd@mark* (nf2e42@stx-mark* nf31d5@id))) (let ((nf31e0@sym* (nf2e0e@rib-sym* nf31d4@rib))) (let ((nf31e2@t (and (memq nf31dc@sym (nf2e0e@rib-sym* nf31d4@rib)) (nf31db@find nf31dc@sym nf31dd@mark* nf31e0@sym* (nf2e12@rib-mark** nf31d4@rib) (nf2e16@rib-label* nf31d4@rib))))) (if nf31e2@t ((lambda (nf31e4@p) (if (not (eq? nf31d6@label (car nf31e4@p))) (if (nf3167@top-level-context) (set-car! nf31e4@p nf31d6@label) (nf3157@syntax-violation '#f '"multiple definitions of identifier" nf31d5@id)) (void))) nf31e2@t) (begin (if (nf2e1e@rib-cache nf31d4@rib) (hashtable-update! (nf2e1e@rib-cache nf31d4@rib) nf31dc@sym (lambda (nf31e6@e) (cons (cons nf31dd@mark* nf31d6@label) nf31e6@e)) '()) (void)) (nf2e10@set-rib-sym*! nf31d4@rib (cons nf31dc@sym nf31e0@sym*)) (nf2e14@set-rib-mark**! nf31d4@rib (cons nf31dd@mark* (nf2e12@rib-mark** nf31d4@rib))) (nf2e18@set-rib-label*! nf31d4@rib (cons nf31d6@label (nf2e16@rib-label* nf31d4@rib))))))))))))) (set! nf4ad6@nf2e26@extend-rib! nf2e26@extend-rib!) (set! nf2e28@extend-rib/nc! (lambda (nf31f2@rib nf31f3@id nf31f4@label) (let ((nf31f8@sym (nf2e72@id->sym nf31f3@id)) (nf31f9@mark* (nf2e42@stx-mark* nf31f3@id))) (let ((nf31fc@sym* (nf2e0e@rib-sym* nf31f2@rib))) (begin (if (nf2e1e@rib-cache nf31f2@rib) (hashtable-update! (nf2e1e@rib-cache nf31f2@rib) nf31f8@sym (lambda (nf31fe@e) (cons (cons nf31f9@mark* nf31f4@label) nf31fe@e)) '()) (void)) (nf2e10@set-rib-sym*! nf31f2@rib (cons nf31f8@sym nf31fc@sym*)) (nf2e14@set-rib-mark**! nf31f2@rib (cons nf31f9@mark* (nf2e12@rib-mark** nf31f2@rib))) (nf2e18@set-rib-label*! nf31f2@rib (cons nf31f4@label (nf2e16@rib-label* nf31f2@rib)))))))) (set! nf4ad7@nf2e28@extend-rib/nc! nf2e28@extend-rib/nc!) (set! nf2e2a@make-rib-map (lambda (nf3200@sym*) (let ((nf3202@ht (make-eq-hashtable))) (let nf3208@f ((nf3204@i '0) (nf3205@sym* nf3200@sym*)) (if (null? nf3205@sym*) nf3202@ht (begin (hashtable-update! nf3202@ht (car nf3205@sym*) (lambda (nf320a@x) (cons nf3204@i nf320a@x)) '()) (nf3208@f (+ nf3204@i '1) (cdr nf3205@sym*)))))))) (set! nf4ad8@nf2e2a@make-rib-map nf2e2a@make-rib-map) (set! nf2e2c@seal-rib! (lambda (nf320c@rib) (let ((nf320e@sym* (nf2e0e@rib-sym* nf320c@rib))) (if (not (null? nf320e@sym*)) (begin (nf2e10@set-rib-sym*! nf320c@rib (list->vector nf320e@sym*)) (nf2e14@set-rib-mark**! nf320c@rib (list->vector (nf2e12@rib-mark** nf320c@rib))) (nf2e18@set-rib-label*! nf320c@rib (list->vector (nf2e16@rib-label* nf320c@rib))) (nf2e1c@set-rib-sealed/freq! nf320c@rib (nf2e2a@make-rib-map nf320e@sym*))) (void))))) (set! nf4ad9@nf2e2c@seal-rib! nf2e2c@seal-rib!) (set! nf2e2e@unseal-rib! (lambda (nf3210@rib) (if (nf2e1a@rib-sealed/freq nf3210@rib) (begin (nf2e1c@set-rib-sealed/freq! nf3210@rib '#f) (nf2e10@set-rib-sym*! nf3210@rib (vector->list (nf2e0e@rib-sym* nf3210@rib))) (nf2e14@set-rib-mark**! nf3210@rib (vector->list (nf2e12@rib-mark** nf3210@rib))) (nf2e18@set-rib-label*! nf3210@rib (vector->list (nf2e16@rib-label* nf3210@rib)))) (void)))) (set! nf4ada@nf2e2e@unseal-rib! nf2e2e@unseal-rib!) (set! nf2e30@make-full-rib (lambda (nf3212@id* nf3213@label*) (let ((nf3216@r (make-simple-struct 'rib '6 (list (map nf2e72@id->sym nf3212@id*) (map nf2e42@stx-mark* nf3212@id*) nf3213@label* '#f '#f)))) (begin (nf2e2c@seal-rib! nf3216@r) nf3216@r)))) (set! nf4adb@nf2e30@make-full-rib nf2e30@make-full-rib) (set! nf2e32@rp (nf29b7@nf2893@make-record-printer 'stx (lambda (nf3218@x nf3219@p nf321a@wr) (begin (display '"#<syntax " nf3219@p) (write (nf2e84@stx->datum nf3218@x) nf3219@p) (let ((nf321e@expr (nf2e3e@stx-expr nf3218@x))) (if (nf29af@nf2883@annotation? nf321e@expr) (let ((nf3220@src (nf29b0@nf2885@annotation-source nf321e@expr))) (if (pair? nf3220@src) (begin (display '" [" nf3219@p) (display (cdr nf3220@src) nf3219@p) (display '" of " nf3219@p) (display (car nf3220@src) nf3219@p) (display '"]" nf3219@p)) (void))) (void))) (display '">" nf3219@p))))) (set! nf4adc@nf2e32@rp nf2e32@rp) (set! nf2e3c@stx? (lambda (nf3222@x) (and (simple-struct? nf3222@x) (eq? (simple-struct-name nf3222@x) 'stx)))) (set! nf4add@nf2e3c@stx? nf2e3c@stx?) (set! nf2e3e@stx-expr (lambda (nf3224@x) (simple-struct-ref nf3224@x '0))) (set! nf4ade@nf2e3e@stx-expr nf2e3e@stx-expr) (set! nf2e40@set-stx-expr! (lambda (nf3226@x nf3227@val) (simple-struct-set! nf3226@x '0 nf3227@val))) (set! nf4adf@nf2e40@set-stx-expr! nf2e40@set-stx-expr!) (set! nf2e42@stx-mark* (lambda (nf322a@x) (simple-struct-ref nf322a@x '1))) (set! nf4ae0@nf2e42@stx-mark* nf2e42@stx-mark*) (set! nf2e44@set-stx-mark*! (lambda (nf322c@x nf322d@val) (simple-struct-set! nf322c@x '1 nf322d@val))) (set! nf4ae1@nf2e44@set-stx-mark*! nf2e44@set-stx-mark*!) (set! nf2e46@stx-subst* (lambda (nf3230@x) (simple-struct-ref nf3230@x '2))) (set! nf4ae2@nf2e46@stx-subst* nf2e46@stx-subst*) (set! nf2e48@set-stx-subst*! (lambda (nf3232@x nf3233@val) (simple-struct-set! nf3232@x '2 nf3233@val))) (set! nf4ae3@nf2e48@set-stx-subst*! nf2e48@set-stx-subst*!) (set! nf2e4a@stx-ae* (lambda (nf3236@x) (simple-struct-ref nf3236@x '3))) (set! nf4ae4@nf2e4a@stx-ae* nf2e4a@stx-ae*) (set! nf2e4c@set-stx-ae*! (lambda (nf3238@x nf3239@val) (simple-struct-set! nf3238@x '3 nf3239@val))) (set! nf4ae5@nf2e4c@set-stx-ae*! nf2e4c@set-stx-ae*!) (set! nf2e4e@dummy '3) (set! nf4ae6@nf2e4e@dummy nf2e4e@dummy) (set! nf2e50@datum->stx (lambda (nf323c@id nf323d@datum) (make-simple-struct 'stx '5 (list nf323d@datum (nf2e42@stx-mark* nf323c@id) (nf2e46@stx-subst* nf323c@id) (nf2e4a@stx-ae* nf323c@id))))) (set! nf4ae7@nf2e50@datum->stx nf2e50@datum->stx) (set! nf2e52@gen-mark (lambda () (string '#\m))) (set! nf4ae8@nf2e52@gen-mark nf2e52@gen-mark) (set! nf2e54@anti-mark '#f) (set! nf4ae9@nf2e54@anti-mark nf2e54@anti-mark) (set! nf2e56@anti-mark? not) (set! nf4aea@nf2e56@anti-mark? nf2e56@anti-mark?) (set! nf2e58@mkstx (lambda (nf3240@e nf3241@m* nf3242@s* nf3243@ae*) (if (and (nf2e3c@stx? nf3240@e) (not (nf2df6@top-marked? nf3241@m*))) (call-with-values (lambda () (join-wraps nf3241@m* nf3242@s* nf3243@ae* nf3240@e)) (lambda (nf324e@nf3249 nf324f@nf324b nf3250@nf324d) (let ((nf3254@ae* nf3250@nf324d) (nf3255@s* nf324f@nf324b) (nf3256@m* nf324e@nf3249)) (make-simple-struct 'stx '5 (list (nf2e3e@stx-expr nf3240@e) nf3256@m* nf3255@s* nf3254@ae*))))) (make-simple-struct 'stx '5 (list nf3240@e nf3241@m* nf3242@s* nf3243@ae*))))) (set! nf4aeb@nf2e58@mkstx nf2e58@mkstx) (set! nf2e5a@add-mark (lambda (nf325a@m nf325b@e nf325c@ae) (nf2e58@mkstx nf325b@e (list nf325a@m) '(shift) (list nf325c@ae)))) (set! nf4aec@nf2e5a@add-mark nf2e5a@add-mark) (set! nf2e5c@add-subst (lambda (nf3260@subst nf3261@e) (nf2e58@mkstx nf3261@e '() (list nf3260@subst) '()))) (set! nf4aed@nf2e5c@add-subst nf2e5c@add-subst) (set! nf2e5e@syntax-kind? (lambda (nf3264@x nf3265@p?) (if (nf2e3c@stx? nf3264@x) (nf2e5e@syntax-kind? (nf2e3e@stx-expr nf3264@x) nf3265@p?) (if (nf29af@nf2883@annotation? nf3264@x) (nf2e5e@syntax-kind? (nf29b1@nf2887@annotation-expression nf3264@x) nf3265@p?) (nf3265@p? nf3264@x))))) (set! nf4aee@nf2e5e@syntax-kind? nf2e5e@syntax-kind?) (set! nf2e60@syntax-vector->list (lambda (nf3268@x) (if (nf2e3c@stx? nf3268@x) (let ((nf326a@ls (nf2e60@syntax-vector->list (nf2e3e@stx-expr nf3268@x))) (nf326b@m* (nf2e42@stx-mark* nf3268@x)) (nf326c@s* (nf2e46@stx-subst* nf3268@x)) (nf326d@ae* (nf2e4a@stx-ae* nf3268@x))) (map (lambda (nf3272@x) (nf2e58@mkstx nf3272@x nf326b@m* nf326c@s* nf326d@ae*)) nf326a@ls)) (if (nf29af@nf2883@annotation? nf3268@x) (nf2e60@syntax-vector->list (nf29b1@nf2887@annotation-expression nf3268@x)) (if (vector? nf3268@x) (vector->list nf3268@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" nf3268@x)))))) (set! nf4aef@nf2e60@syntax-vector->list nf2e60@syntax-vector->list) (set! nf2e62@syntax-pair? (lambda (nf3274@x) (nf2e5e@syntax-kind? nf3274@x pair?))) (set! nf4af0@nf2e62@syntax-pair? nf2e62@syntax-pair?) (set! nf2e64@syntax-vector? (lambda (nf3276@x) (nf2e5e@syntax-kind? nf3276@x vector?))) (set! nf4af1@nf2e64@syntax-vector? nf2e64@syntax-vector?) (set! nf2e66@syntax-null? (lambda (nf3278@x) (nf2e5e@syntax-kind? nf3278@x null?))) (set! nf4af2@nf2e66@syntax-null? nf2e66@syntax-null?) (set! nf2e68@syntax-list? (lambda (nf327a@x) (or (nf2e66@syntax-null? nf327a@x) (and (nf2e62@syntax-pair? nf327a@x) (nf2e68@syntax-list? (nf2e6c@syntax-cdr nf327a@x)))))) (set! nf4af3@nf2e68@syntax-list? nf2e68@syntax-list?) (set! nf2e6a@syntax-car (lambda (nf327c@x) (if (nf2e3c@stx? nf327c@x) (nf2e58@mkstx (nf2e6a@syntax-car (nf2e3e@stx-expr nf327c@x)) (nf2e42@stx-mark* nf327c@x) (nf2e46@stx-subst* nf327c@x) (nf2e4a@stx-ae* nf327c@x)) (if (nf29af@nf2883@annotation? nf327c@x) (nf2e6a@syntax-car (nf29b1@nf2887@annotation-expression nf327c@x)) (if (pair? nf327c@x) (car nf327c@x) (assertion-violation 'syntax-car '"BUG: not a pair" nf327c@x)))))) (set! nf4af4@nf2e6a@syntax-car nf2e6a@syntax-car) (set! nf2e6c@syntax-cdr (lambda (nf327e@x) (if (nf2e3c@stx? nf327e@x) (nf2e58@mkstx (nf2e6c@syntax-cdr (nf2e3e@stx-expr nf327e@x)) (nf2e42@stx-mark* nf327e@x) (nf2e46@stx-subst* nf327e@x) (nf2e4a@stx-ae* nf327e@x)) (if (nf29af@nf2883@annotation? nf327e@x) (nf2e6c@syntax-cdr (nf29b1@nf2887@annotation-expression nf327e@x)) (if (pair? nf327e@x) (cdr nf327e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" nf327e@x)))))) (set! nf4af5@nf2e6c@syntax-cdr nf2e6c@syntax-cdr) (set! nf2e6e@syntax->list (lambda (nf3280@x) (if (nf2e62@syntax-pair? nf3280@x) (cons (nf2e6a@syntax-car nf3280@x) (nf2e6e@syntax->list (nf2e6c@syntax-cdr nf3280@x))) (if (nf2e66@syntax-null? nf3280@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" nf3280@x))))) (set! nf4af6@nf2e6e@syntax->list nf2e6e@syntax->list) (set! nf2e70@id? (lambda (nf3282@x) (and (nf2e3c@stx? nf3282@x) (symbol? (nf2e3e@stx-expr nf3282@x))))) (set! nf4af7@nf2e70@id? nf2e70@id?) (set! nf2e72@id->sym (lambda (nf3284@x) (nf2e3e@stx-expr nf3284@x))) (set! nf4af8@nf2e72@id->sym nf2e72@id->sym) (set! nf2e74@bound-id=? (lambda (nf3286@x nf3287@y) (and (eq? (nf2e72@id->sym nf3286@x) (nf2e72@id->sym nf3287@y)) (same-marks? (nf2e42@stx-mark* nf3286@x) (nf2e42@stx-mark* nf3287@y))))) (set! nf4af9@nf2e74@bound-id=? nf2e74@bound-id=?) (set! nf2e76@free-id=? (lambda (nf328a@i nf328b@j) (let ((nf328e@t0 (id->real-label nf328a@i)) (nf328f@t1 (id->real-label nf328b@j))) (if (or nf328e@t0 nf328f@t1) (eq? nf328e@t0 nf328f@t1) (eq? (nf2e72@id->sym nf328a@i) (nf2e72@id->sym nf328b@j)))))) (set! nf4afa@nf2e76@free-id=? nf2e76@free-id=?) (set! nf2e78@valid-bound-ids? (lambda (nf3292@id*) (and (for-all nf2e70@id? nf3292@id*) (nf2e7a@distinct-bound-ids? nf3292@id*)))) (set! nf4afb@nf2e78@valid-bound-ids? nf2e78@valid-bound-ids?) (set! nf2e7a@distinct-bound-ids? (lambda (nf3294@id*) (or (null? nf3294@id*) (and (not (nf2e7c@bound-id-member? (car nf3294@id*) (cdr nf3294@id*))) (nf2e7a@distinct-bound-ids? (cdr nf3294@id*)))))) (set! nf4afc@nf2e7a@distinct-bound-ids? nf2e7a@distinct-bound-ids?) (set! nf2e7c@bound-id-member? (lambda (nf3296@id nf3297@id*) (and (pair? nf3297@id*) (or (nf2e74@bound-id=? nf3296@id (car nf3297@id*)) (nf2e7c@bound-id-member? nf3296@id (cdr nf3297@id*)))))) (set! nf4afd@nf2e7c@bound-id-member? nf2e7c@bound-id-member?) (set! nf2e7e@self-evaluating? (lambda (nf329a@x) (or (number? nf329a@x) (string? nf329a@x) (char? nf329a@x) (boolean? nf329a@x) (regexp? nf329a@x) (bytevector? nf329a@x)))) (set! nf4afe@nf2e7e@self-evaluating? nf2e7e@self-evaluating?) (set! nf2e80@strip-annotations (lambda (nf329c@x) (if (pair? nf329c@x) (cons (nf2e80@strip-annotations (car nf329c@x)) (nf2e80@strip-annotations (cdr nf329c@x))) (if (vector? nf329c@x) (vector-map nf2e80@strip-annotations nf329c@x) (if (nf29af@nf2883@annotation? nf329c@x) (nf29ae@nf2881@annotation-stripped nf329c@x) nf329c@x))))) (set! nf4aff@nf2e80@strip-annotations nf2e80@strip-annotations) (set! nf2e82@strip (lambda (nf329e@x nf329f@m*) (if (nf2df6@top-marked? nf329f@m*) (if (or (nf29af@nf2883@annotation? nf329e@x) (and (pair? nf329e@x) (nf29af@nf2883@annotation? (car nf329e@x))) (and (vector? nf329e@x) (> (vector-length nf329e@x) '0) (nf29af@nf2883@annotation? (vector-ref nf329e@x '0)))) (nf2e80@strip-annotations nf329e@x) nf329e@x) (let nf32a4@f ((nf32a2@x nf329e@x)) (if (nf2e3c@stx? nf32a2@x) (nf2e82@strip (nf2e3e@stx-expr nf32a2@x) (nf2e42@stx-mark* nf32a2@x)) (if (nf29af@nf2883@annotation? nf32a2@x) (nf29ae@nf2881@annotation-stripped nf32a2@x) (if (pair? nf32a2@x) (let ((nf32a6@a (nf32a4@f (car nf32a2@x))) (nf32a7@d (nf32a4@f (cdr nf32a2@x)))) (if (and (eq? nf32a6@a (car nf32a2@x)) (eq? nf32a7@d (cdr nf32a2@x))) nf32a2@x (cons nf32a6@a nf32a7@d))) (if (vector? nf32a2@x) (let ((nf32aa@old (vector->list nf32a2@x))) (let ((nf32ac@new (map nf32a4@f nf32aa@old))) (if (for-all eq? nf32aa@old nf32ac@new) nf32a2@x (list->vector nf32ac@new)))) nf32a2@x)))))))) (set! nf4b00@nf2e82@strip nf2e82@strip) (set! nf2e84@stx->datum (lambda (nf32ae@x) (nf2e82@strip nf32ae@x '()))) (set! nf4b01@nf2e84@stx->datum nf2e84@stx->datum) (set! nf2e86@id->label (lambda (nf32b0@id) (or (id->real-label nf32b0@id) (let ((nf32b2@t (nf3167@top-level-context))) (if nf32b2@t ((lambda (nf32b4@env) (let ((nf32b6@rib (nf3117@interaction-env-rib nf32b4@env))) (call-with-values (lambda () (nf2e00@gen-define-label+loc nf32b0@id nf32b6@rib)) (lambda (nf32bc@nf32b9 nf32bd@nf32bb) (let ((nf32c0@loc_ nf32bd@nf32bb) (nf32c1@lab nf32bc@nf32b9)) (begin (nf2e26@extend-rib! nf32b6@rib nf32b0@id nf32c1@lab) nf32c1@lab)))))) nf32b2@t) '#f))))) (set! nf4b02@nf2e86@id->label nf2e86@id->label) (set! nf2e88@label->binding (lambda (nf32c4@x nf32c5@r) (let ((nf32c8@t (nf2c85@nf2ad2@imported-label->binding nf32c4@x))) (if nf32c8@t ((lambda (nf32ca@b) (if (and (pair? nf32ca@b) (eq? (car nf32ca@b) '$core-rtd)) (cons '$rtd (map nf302d@bless (cdr nf32ca@b))) (if (and (pair? nf32ca@b) (eq? (car nf32ca@b) 'global-rtd)) (let ((nf32cc@lib (cadr nf32ca@b)) (nf32cd@loc (cddr nf32ca@b))) (cons '$rtd (symbol-value nf32cd@loc))) nf32ca@b))) nf32c8@t) (let ((nf32d0@t (assq nf32c4@x nf32c5@r))) (if nf32d0@t (cdr nf32d0@t) (let ((nf32d2@t (nf3167@top-level-context))) (if nf32d2@t ((lambda (nf32d4@env) (let ((nf32d6@t (assq nf32c4@x (nf311f@interaction-env-locs nf32d4@env)))) (if nf32d6@t ((lambda (nf32d8@p) (cons* 'lexical (cdr nf32d8@p) '#f)) nf32d6@t) '(displaced-lexical . #f)))) nf32d2@t) '(displaced-lexical . #f))))))))) (set! nf4b03@nf2e88@label->binding nf2e88@label->binding) (set! nf2e8a@make-binding cons) (set! nf4b04@nf2e8a@make-binding nf2e8a@make-binding) (set! nf2e8c@binding-type car) (set! nf4b05@nf2e8c@binding-type nf2e8c@binding-type) (set! nf2e8e@binding-value cdr) (set! nf4b06@nf2e8e@binding-value nf2e8e@binding-value) (set! nf2e90@raise-unbound-error (lambda (nf32da@id) (nf3155@syntax-violation* '#f '"unbound identifier" nf32da@id (nf4efc@nf4d42@make-undefined-violation)))) (set! nf4b07@nf2e90@raise-unbound-error nf2e90@raise-unbound-error) (set! nf2e92@syntax-type (lambda (nf32dc@e nf32dd@r) (if (nf2e70@id? nf32dc@e) (let ((nf32e0@id nf32dc@e)) (let ((nf32e2@label (nf2e86@id->label nf32e0@id))) (let ((nf32e4@b (nf2e88@label->binding nf32e2@label nf32dd@r))) (let ((nf32e6@type (nf2e8c@binding-type nf32e4@b))) (begin (if (not nf32e2@label) (nf2e90@raise-unbound-error nf32e0@id) (void)) (let ((nf32e8@t nf32e6@type)) (if (memv nf32e8@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values nf32e6@type (nf2e8e@binding-value nf32e4@b) nf32e0@id) (values 'other '#f '#f)))))))) (if (nf2e62@syntax-pair? nf32dc@e) (let ((nf32ea@id (nf2e6a@syntax-car nf32dc@e))) (if (nf2e70@id? nf32ea@id) (let ((nf32ec@label (nf2e86@id->label nf32ea@id))) (let ((nf32ee@b (nf2e88@label->binding nf32ec@label nf32dd@r))) (let ((nf32f0@type (nf2e8c@binding-type nf32ee@b))) (begin (if (not nf32ec@label) (nf2e90@raise-unbound-error nf32ea@id) (void)) (let ((nf32f2@t nf32f0@type)) (if (memv nf32f2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values nf32f0@type (nf2e8e@binding-value nf32ee@b) nf32ea@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((nf32f4@d (nf2e84@stx->datum nf32dc@e))) (if (nf2e7e@self-evaluating? nf32f4@d) (values 'constant nf32f4@d '#f) (values 'other '#f '#f))))))) (set! nf4b08@nf2e92@syntax-type nf2e92@syntax-type) (set! nf2ea0@sanitize-binding (lambda (nf32f6@x nf32f7@src) (if (procedure? nf32f6@x) (cons* 'local-macro nf32f6@x nf32f7@src) (if (and (pair? nf32f6@x) (eq? (car nf32f6@x) 'macro!) (procedure? (cdr nf32f6@x))) (cons* 'local-macro! (cdr nf32f6@x) nf32f7@src) (if (and (pair? nf32f6@x) (eq? (car nf32f6@x) '$rtd)) nf32f6@x (assertion-violation 'expand '"invalid transformer" nf32f6@x)))))) (set! nf4b09@nf2ea0@sanitize-binding nf2ea0@sanitize-binding) (set! nf2ea2@make-variable-transformer (lambda (nf32fa@x) (if (procedure? nf32fa@x) (cons 'macro! nf32fa@x) (assertion-violation 'make-variable-transformer '"not a procedure" nf32fa@x)))) (set! nf4b0a@nf2ea2@make-variable-transformer nf2ea2@make-variable-transformer) (set! nf2ea4@variable-transformer? (lambda (nf32fc@x) (and (pair? nf32fc@x) (eq? (car nf32fc@x) 'macro!) (procedure? (cdr nf32fc@x))))) (set! nf4b0b@nf2ea4@variable-transformer? nf2ea4@variable-transformer?) (set! nf2ea6@variable-transformer-procedure (lambda (nf32fe@x) (if (nf2ea4@variable-transformer? nf32fe@x) (cdr nf32fe@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" nf32fe@x)))) (set! nf4b0c@nf2ea6@variable-transformer-procedure nf2ea6@variable-transformer-procedure) (set! nf2ea8@make-eval-transformer (lambda (nf3300@x) (nf2ea0@sanitize-binding (eval-core (nf2a10@nf29c8@expanded->core nf3300@x)) nf3300@x))) (set! nf4b0d@nf2ea8@make-eval-transformer nf2ea8@make-eval-transformer) (set! nf2ff9@parse-define (lambda (nf3302@x) (let ((nf3304@t nf3302@x)) (let ((nf3306@ls/false (nf3077@syntax-dispatch nf3304@t '(_ (any . any) any . each-any)))) (if (and nf3306@ls/false (apply (lambda (nf3308@id nf3309@fmls nf330a@b nf330b@b*) (nf2e70@id? nf3308@id)) nf3306@ls/false)) (apply (lambda (nf3310@id nf3311@fmls nf3312@b nf3313@b*) (begin (nf309d@verify-formals nf3311@fmls nf3302@x) (values nf3310@id (cons 'defun (cons nf3311@fmls (cons nf3312@b nf3313@b*)))))) nf3306@ls/false) (let ((nf3318@t nf3304@t)) (let ((nf331a@ls/false (nf3077@syntax-dispatch nf3318@t '(_ any any)))) (if (and nf331a@ls/false (apply (lambda (nf331c@id nf331d@val) (nf2e70@id? nf331c@id)) nf331a@ls/false)) (apply (lambda (nf3320@id nf3321@val) (values nf3320@id (cons 'expr nf3321@val))) nf331a@ls/false) (let ((nf3324@t nf3318@t)) (let ((nf3326@ls/false (nf3077@syntax-dispatch nf3324@t '(_ any)))) (if (and nf3326@ls/false (apply (lambda (nf3328@id) (nf2e70@id? nf3328@id)) nf3326@ls/false)) (apply (lambda (nf332a@id) (values nf332a@id (cons 'expr (nf302d@bless '(void))))) nf3326@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3324@t)))))))))))) (set! nf4b0e@nf2ff9@parse-define nf2ff9@parse-define) (set! nf2ffb@parse-define-syntax (lambda (nf332c@x) (let ((nf332e@t nf332c@x)) (let ((nf3330@ls/false (nf3077@syntax-dispatch nf332e@t '(_ any any)))) (if (and nf3330@ls/false (apply (lambda (nf3332@id nf3333@val) (nf2e70@id? nf3332@id)) nf3330@ls/false)) (apply (lambda (nf3336@id nf3337@val) (values nf3336@id nf3337@val)) nf3330@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf332e@t)))))) (set! nf4b0f@nf2ffb@parse-define-syntax nf2ffb@parse-define-syntax) (set! nf2ffd@scheme-stx-hashtable (make-eq-hashtable)) (set! nf4b10@nf2ffd@scheme-stx-hashtable nf2ffd@scheme-stx-hashtable) (set! nf2fff@scheme-stx (lambda (nf333a@sym) (or (hashtable-ref nf2ffd@scheme-stx-hashtable nf333a@sym '#f) (let ((nf333c@subst (nf2c61@nf2a8a@library-subst (nf2c7f@nf2ac6@find-library-by-name '(psyntax system $all))))) (let ((nf333e@stx (make-simple-struct 'stx '5 (list nf333a@sym nf2df4@top-mark* '() '())))) (let ((nf3340@stx (let ((nf3342@t (assq nf333a@sym nf333c@subst))) (if nf3342@t ((lambda (nf3344@x) (let ((nf3346@name (car nf3344@x)) (nf3347@label (cdr nf3344@x))) (nf2e5c@add-subst (make-simple-struct 'rib '6 (list (list nf3346@name) (list nf2df4@top-mark*) (list nf3347@label) '#f '#f)) nf333e@stx))) nf3342@t) nf333e@stx)))) (begin (hashtable-set! nf2ffd@scheme-stx-hashtable nf333a@sym nf3340@stx) nf3340@stx))))))) (set! nf4b11@nf2fff@scheme-stx nf2fff@scheme-stx) (set! nf3001@lexical-var car) (set! nf4b12@nf3001@lexical-var nf3001@lexical-var) (set! nf3003@lexical-mutable? cdr) (set! nf4b13@nf3003@lexical-mutable? nf3003@lexical-mutable?) (set! nf3005@set-lexical-mutable! set-cdr!) (set! nf4b14@nf3005@set-lexical-mutable! nf3005@set-lexical-mutable!) (set! nf3007@add-lexical (lambda (nf334a@lab nf334b@lex nf334c@r) (cons (cons* nf334a@lab 'lexical nf334b@lex '#f) nf334c@r))) (set! nf4b15@nf3007@add-lexical nf3007@add-lexical) (set! nf3009@add-lexicals (lambda (nf3350@lab* nf3351@lex* nf3352@r) (if (null? nf3350@lab*) nf3352@r (nf3009@add-lexicals (cdr nf3350@lab*) (cdr nf3351@lex*) (nf3007@add-lexical (car nf3350@lab*) (car nf3351@lex*) nf3352@r))))) (set! nf4b16@nf3009@add-lexicals nf3009@add-lexicals) (set! nf300b@letrec-helper (lambda (nf3356@e nf3357@r nf3358@mr nf3359@build) (let ((nf335e@t nf3356@e)) (let ((nf3360@ls/false (nf3077@syntax-dispatch nf335e@t '(_ #(each (any any)) any . each-any)))) (if nf3360@ls/false (apply (lambda (nf3362@lhs* nf3363@rhs* nf3364@b nf3365@b*) (if (not (nf2e78@valid-bound-ids? nf3362@lhs*)) (nf3031@invalid-fmls-error nf3356@e nf3362@lhs*) (let ((nf336a@lex* (map nf2df8@gen-lexical nf3362@lhs*)) (nf336b@lab* (map nf2dfc@gen-label nf3362@lhs*))) (let ((nf336e@rib (nf2e30@make-full-rib nf3362@lhs* nf336b@lab*)) (nf336f@r (nf3009@add-lexicals nf336b@lab* nf336a@lex* nf3357@r))) (let ((nf3372@body (nf30af@chi-internal (nf2e5c@add-subst nf336e@rib (cons nf3364@b nf3365@b*)) nf336f@r nf3358@mr)) (nf3373@rhs* (nf3095@chi-expr* (map (lambda (nf3376@x) (nf2e5c@add-subst nf336e@rib nf3376@x)) nf3363@rhs*) nf336f@r nf3358@mr))) (nf3359@build '#f nf336a@lex* nf3373@rhs* nf3372@body)))))) nf3360@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf335e@t)))))) (set! nf4b17@nf300b@letrec-helper nf300b@letrec-helper) (set! nf300d@let-transformer (lambda (nf3378@e nf3379@r nf337a@mr) (let ((nf337e@t nf3378@e)) (let ((nf3380@ls/false (nf3077@syntax-dispatch nf337e@t '(_ #(each (any any)) any . each-any)))) (if nf3380@ls/false (apply (lambda (nf3382@lhs* nf3383@rhs* nf3384@b nf3385@b*) (if (not (nf2e78@valid-bound-ids? nf3382@lhs*)) (nf3031@invalid-fmls-error nf3378@e nf3382@lhs*) (let ((nf338a@lex* (map nf2df8@gen-lexical nf3382@lhs*)) (nf338b@lab* (map nf2dfc@gen-label nf3382@lhs*)) (nf338c@rhs* (nf3095@chi-expr* nf3383@rhs* nf3379@r nf337a@mr))) (let ((nf3390@rib (nf2e30@make-full-rib nf3382@lhs* nf338b@lab*)) (nf3391@r (nf3009@add-lexicals nf338b@lab* nf338a@lex* nf3379@r))) (let ((nf3394@body (nf30af@chi-internal (nf2e5c@add-subst nf3390@rib (cons nf3384@b nf3385@b*)) nf3391@r nf337a@mr))) (nf2dd8@nf2d35@build-let '#f nf338a@lex* nf338c@rhs* nf3394@body)))))) nf3380@ls/false) (let ((nf3396@t nf337e@t)) (let ((nf3398@ls/false (nf3077@syntax-dispatch nf3396@t '(_ any #(each (any any)) any . each-any)))) (if nf3398@ls/false (apply (lambda (nf339a@loop nf339b@lhs* nf339c@rhs* nf339d@b nf339e@b*) (if (not (nf2e78@valid-bound-ids? nf339b@lhs*)) (nf3031@invalid-fmls-error nf3378@e nf339b@lhs*) (let ((nf33a4@lex* (map nf2df8@gen-lexical nf339b@lhs*)) (nf33a5@lab* (map nf2dfc@gen-label nf339b@lhs*)) (nf33a6@rhs* (nf3095@chi-expr* nf339c@rhs* nf3379@r nf337a@mr)) (nf33a7@loop-lex (nf2df8@gen-lexical nf339a@loop)) (nf33a8@loop-lab (nf2dfc@gen-label nf339a@loop))) (let ((nf33ae@loop-rib (nf2e30@make-full-rib (list nf339a@loop) (list nf33a8@loop-lab))) (nf33af@rib (nf2e30@make-full-rib nf339b@lhs* nf33a5@lab*)) (nf33b0@r (nf3009@add-lexicals (cons nf33a8@loop-lab nf33a5@lab*) (cons nf33a7@loop-lex nf33a4@lex*) nf3379@r))) (let ((nf33b4@body (nf30af@chi-internal (nf2e5c@add-subst nf33ae@loop-rib (nf2e5c@add-subst nf33af@rib (cons nf339d@b nf339e@b*))) nf33b0@r nf337a@mr))) (nf2dd9@nf2d37@build-named-let '#f nf33a7@loop-lex nf33a4@lex* nf33a6@rhs* nf33b4@body)))))) nf3398@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3396@t))))))))) (set! nf4b18@nf300d@let-transformer nf300d@let-transformer) (set! nf300f@letrec-transformer (lambda (nf33b6@e nf33b7@r nf33b8@mr) (nf300b@letrec-helper nf33b6@e nf33b7@r nf33b8@mr nf2dd7@nf2d33@build-letrec))) (set! nf4b19@nf300f@letrec-transformer nf300f@letrec-transformer) (set! nf3011@letrec*-transformer (lambda (nf33bc@e nf33bd@r nf33be@mr) (nf300b@letrec-helper nf33bc@e nf33bd@r nf33be@mr nf2dda@nf2d39@build-letrec*))) (set! nf4b1a@nf3011@letrec*-transformer nf3011@letrec*-transformer) (set! nf3013@fluid-let-syntax-transformer (lambda (nf33c2@e nf33c3@r nf33c4@mr) (let ((nf33c9@lookup '#f)) (begin (set! nf33c9@lookup (lambda (nf33dc@x) (or (nf2e86@id->label nf33dc@x) (nf3157@syntax-violation '#f '"unbound identifier" nf33c2@e nf33dc@x)))) (let ((nf33ca@t nf33c2@e)) (let ((nf33cc@ls/false (nf3077@syntax-dispatch nf33ca@t '(_ #(each (any any)) any . each-any)))) (if nf33cc@ls/false (apply (lambda (nf33ce@lhs* nf33cf@rhs* nf33d0@b nf33d1@b*) (if (not (nf2e78@valid-bound-ids? nf33ce@lhs*)) (nf3031@invalid-fmls-error nf33c2@e nf33ce@lhs*) (let ((nf33d6@lab* (map nf33c9@lookup nf33ce@lhs*)) (nf33d7@rhs* (map (lambda (nf33da@x) (nf2ea8@make-eval-transformer (nf30d1@expand-transformer nf33da@x nf33c4@mr))) nf33cf@rhs*))) (nf30af@chi-internal (cons nf33d0@b nf33d1@b*) (append (map cons nf33d6@lab* nf33d7@rhs*) nf33c3@r) (append (map cons nf33d6@lab* nf33d7@rhs*) nf33c4@mr))))) nf33cc@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf33ca@t)))))))) (set! nf4b1b@nf3013@fluid-let-syntax-transformer nf3013@fluid-let-syntax-transformer) (set! nf3015@type-descriptor-transformer (lambda (nf33de@e nf33df@r nf33e0@mr) (let ((nf33e4@t nf33de@e)) (let ((nf33e6@ls/false (nf3077@syntax-dispatch nf33e4@t '(_ any)))) (if (and nf33e6@ls/false (apply (lambda (nf33e8@id) (nf2e70@id? nf33e8@id)) nf33e6@ls/false)) (apply (lambda (nf33ea@id) (let ((nf33ec@lab (nf2e86@id->label nf33ea@id))) (let ((nf33ee@b (nf2e88@label->binding nf33ec@lab nf33df@r))) (let ((nf33f0@type (nf2e8c@binding-type nf33ee@b))) (begin (if (not nf33ec@lab) (nf2e90@raise-unbound-error nf33ea@id) (void)) (if (not (and (eq? nf33f0@type '$rtd) (not (list? (nf2e8e@binding-value nf33ee@b))))) (nf3157@syntax-violation '#f '"not a record type" nf33de@e) (void)) (list 'quote (nf2e8e@binding-value nf33ee@b))))))) nf33e6@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf33e4@t)))))) (set! nf4b1c@nf3015@type-descriptor-transformer nf3015@type-descriptor-transformer) (set! nf3017@record-type-descriptor-transformer (lambda (nf33f2@e nf33f3@r nf33f4@mr) (let ((nf33f8@t nf33f2@e)) (let ((nf33fa@ls/false (nf3077@syntax-dispatch nf33f8@t '(_ any)))) (if (and nf33fa@ls/false (apply (lambda (nf33fc@id) (nf2e70@id? nf33fc@id)) nf33fa@ls/false)) (apply (lambda (nf33fe@id) (let ((nf3400@lab (nf2e86@id->label nf33fe@id))) (let ((nf3402@b (nf2e88@label->binding nf3400@lab nf33f3@r))) (let ((nf3404@type (nf2e8c@binding-type nf3402@b))) (begin (if (not nf3400@lab) (nf2e90@raise-unbound-error nf33fe@id) (void)) (if (not (and (eq? nf3404@type '$rtd) (list? (nf2e8e@binding-value nf3402@b)))) (nf3157@syntax-violation '#f '"not a record type" nf33f2@e) (void)) (nf3099@chi-expr (car (nf2e8e@binding-value nf3402@b)) nf33f3@r nf33f4@mr)))))) nf33fa@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf33f8@t)))))) (set! nf4b1d@nf3017@record-type-descriptor-transformer nf3017@record-type-descriptor-transformer) (set! nf3019@record-constructor-descriptor-transformer (lambda (nf3406@e nf3407@r nf3408@mr) (let ((nf340c@t nf3406@e)) (let ((nf340e@ls/false (nf3077@syntax-dispatch nf340c@t '(_ any)))) (if (and nf340e@ls/false (apply (lambda (nf3410@id) (nf2e70@id? nf3410@id)) nf340e@ls/false)) (apply (lambda (nf3412@id) (let ((nf3414@lab (nf2e86@id->label nf3412@id))) (let ((nf3416@b (nf2e88@label->binding nf3414@lab nf3407@r))) (let ((nf3418@type (nf2e8c@binding-type nf3416@b))) (begin (if (not nf3414@lab) (nf2e90@raise-unbound-error nf3412@id) (void)) (if (not (and (eq? nf3418@type '$rtd) (list? (nf2e8e@binding-value nf3416@b)))) (nf3157@syntax-violation '#f '"invalid type" nf3406@e) (void)) (nf3099@chi-expr (cadr (nf2e8e@binding-value nf3416@b)) nf3407@r nf3408@mr)))))) nf340e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf340c@t)))))) (set! nf4b1e@nf3019@record-constructor-descriptor-transformer nf3019@record-constructor-descriptor-transformer) (set! nf301b@when-macro (lambda (nf341a@e) (let ((nf341c@t nf341a@e)) (let ((nf341e@ls/false (nf3077@syntax-dispatch nf341c@t '(_ any any . each-any)))) (if nf341e@ls/false (apply (lambda (nf3420@test nf3421@e nf3422@e*) (nf302d@bless (list 'if nf3420@test (cons 'begin (cons nf3421@e nf3422@e*))))) nf341e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf341c@t)))))) (set! nf4b1f@nf301b@when-macro nf301b@when-macro) (set! nf301d@unless-macro (lambda (nf3426@e) (let ((nf3428@t nf3426@e)) (let ((nf342a@ls/false (nf3077@syntax-dispatch nf3428@t '(_ any any . each-any)))) (if nf342a@ls/false (apply (lambda (nf342c@test nf342d@e nf342e@e*) (nf302d@bless (list 'if (list 'not nf342c@test) (cons 'begin (cons nf342d@e nf342e@e*))))) nf342a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3428@t)))))) (set! nf4b20@nf301d@unless-macro nf301d@unless-macro) (set! nf301f@if-transformer (lambda (nf3432@e nf3433@r nf3434@mr) (let ((nf3438@t nf3432@e)) (let ((nf343a@ls/false (nf3077@syntax-dispatch nf3438@t '(_ any any any)))) (if nf343a@ls/false (apply (lambda (nf343c@e0 nf343d@e1 nf343e@e2) (list 'if (nf3099@chi-expr nf343c@e0 nf3433@r nf3434@mr) (nf3099@chi-expr nf343d@e1 nf3433@r nf3434@mr) (nf3099@chi-expr nf343e@e2 nf3433@r nf3434@mr))) nf343a@ls/false) (let ((nf3442@t nf3438@t)) (let ((nf3444@ls/false (nf3077@syntax-dispatch nf3442@t '(_ any any)))) (if nf3444@ls/false (apply (lambda (nf3446@e0 nf3447@e1) (list 'if (nf3099@chi-expr nf3446@e0 nf3433@r nf3434@mr) (nf3099@chi-expr nf3447@e1 nf3433@r nf3434@mr) (nf2dd6@nf2d31@build-void))) nf3444@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3442@t))))))))) (set! nf4b21@nf301f@if-transformer nf301f@if-transformer) (set! nf3021@and-transformer (lambda (nf344a@e nf344b@r nf344c@mr) (let ((nf3450@t nf344a@e)) (let ((nf3452@ls/false (nf3077@syntax-dispatch nf3450@t '(_ . each-any)))) (if nf3452@ls/false (apply (lambda (nf3454@e*) (cons 'and (nf3095@chi-expr* nf3454@e* nf344b@r nf344c@mr))) nf3452@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3450@t)))))) (set! nf4b22@nf3021@and-transformer nf3021@and-transformer) (set! nf3023@or-transformer (lambda (nf3456@e nf3457@r nf3458@mr) (let ((nf345c@t nf3456@e)) (let ((nf345e@ls/false (nf3077@syntax-dispatch nf345c@t '(_ . each-any)))) (if nf345e@ls/false (apply (lambda (nf3460@e*) (cons 'or (nf3095@chi-expr* nf3460@e* nf3457@r nf3458@mr))) nf345e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf345c@t)))))) (set! nf4b23@nf3023@or-transformer nf3023@or-transformer) (set! nf3025@case-macro (lambda (nf3462@e) (let ((nf3465@build-last '#f) (nf3467@build-one '#f)) (begin (set! nf3465@build-last (lambda (nf348c@cls) (let ((nf348e@t nf348c@cls)) (let ((nf3490@ls/false (nf3077@syntax-dispatch nf348e@t '(#(scheme-id else) any . each-any)))) (if nf3490@ls/false (apply (lambda (nf3492@e nf3493@e*) (cons 'begin (cons nf3492@e nf3493@e*))) nf3490@ls/false) (let ((nf3496@t nf348e@t)) (let ((nf3498@ls/false (nf3077@syntax-dispatch nf3496@t '_))) (if nf3498@ls/false (apply (lambda () (nf3467@build-one nf348c@cls '(if #f #f))) nf3498@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3496@t))))))))) (set! nf3467@build-one (lambda (nf347e@cls nf347f@k) (let ((nf3482@t nf347e@cls)) (let ((nf3484@ls/false (nf3077@syntax-dispatch nf3482@t '(each-any any . each-any)))) (if nf3484@ls/false (apply (lambda (nf3486@d* nf3487@e nf3488@e*) (list 'if (list 'memv 't (list 'quote nf3486@d*)) (cons 'begin (cons nf3487@e nf3488@e*)) nf347f@k)) nf3484@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3482@t)))))) (let ((nf3468@t nf3462@e)) (let ((nf346a@ls/false (nf3077@syntax-dispatch nf3468@t '(_ any)))) (if nf346a@ls/false (apply (lambda (nf346c@expr) (nf302d@bless (cons 'let (cons (list (list 't nf346c@expr)) '((if #f #f)))))) nf346a@ls/false) (let ((nf346e@t nf3468@t)) (let ((nf3470@ls/false (nf3077@syntax-dispatch nf346e@t '(_ any any . each-any)))) (if nf3470@ls/false (apply (lambda (nf3472@expr nf3473@cls nf3474@cls*) (nf302d@bless (list 'let (list (list 't nf3472@expr)) (let nf347c@f ((nf3478@cls nf3473@cls) (nf3479@cls* nf3474@cls*)) (if (null? nf3479@cls*) (nf3465@build-last nf3478@cls) (nf3467@build-one nf3478@cls (nf347c@f (car nf3479@cls*) (cdr nf3479@cls*)))))))) nf3470@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf346e@t))))))))))) (set! nf4b24@nf3025@case-macro nf3025@case-macro) (set! nf3027@quote-transformer (lambda (nf349a@e nf349b@r nf349c@mr) (let ((nf34a0@t nf349a@e)) (let ((nf34a2@ls/false (nf3077@syntax-dispatch nf34a0@t '(_ any)))) (if nf34a2@ls/false (apply (lambda (nf34a4@datum) (list 'quote (nf2e84@stx->datum nf34a4@datum))) nf34a2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf34a0@t)))))) (set! nf4b25@nf3027@quote-transformer nf3027@quote-transformer) (set! nf3029@case-lambda-transformer (lambda (nf34a6@e nf34a7@r nf34a8@mr) (let ((nf34ac@t nf34a6@e)) (let ((nf34ae@ls/false (nf3077@syntax-dispatch nf34ac@t '(_ . #(each (any any . each-any)))))) (if nf34ae@ls/false (apply (lambda (nf34b0@fmls* nf34b1@b* nf34b2@b**) (call-with-values (lambda () (nf30a1@chi-lambda-clause* nf34a6@e nf34b0@fmls* (map cons nf34b1@b* nf34b2@b**) nf34a7@r nf34a8@mr)) (lambda (nf34ba@nf34b7 nf34bb@nf34b9) (let ((nf34be@body* nf34bb@nf34b9) (nf34bf@fmls* nf34ba@nf34b7)) (nf2dd4@nf2d01@build-case-lambda '#f nf34bf@fmls* nf34be@body*))))) nf34ae@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf34ac@t)))))) (set! nf4b26@nf3029@case-lambda-transformer nf3029@case-lambda-transformer) (set! nf302b@lambda-transformer (lambda (nf34c2@e nf34c3@r nf34c4@mr) (let ((nf34c8@t nf34c2@e)) (let ((nf34ca@ls/false (nf3077@syntax-dispatch nf34c8@t '(_ any any . each-any)))) (if nf34ca@ls/false (apply (lambda (nf34cc@fmls nf34cd@b nf34ce@b*) (call-with-values (lambda () (nf309f@chi-lambda-clause nf34c2@e nf34cc@fmls (cons nf34cd@b nf34ce@b*) nf34c3@r nf34c4@mr)) (lambda (nf34d6@nf34d3 nf34d7@nf34d5) (let ((nf34da@body nf34d7@nf34d5) (nf34db@fmls nf34d6@nf34d3)) (nf2dd3@nf2cff@build-lambda '#f nf34db@fmls nf34da@body))))) nf34ca@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf34c8@t)))))) (set! nf4b27@nf302b@lambda-transformer nf302b@lambda-transformer) (set! nf302d@bless (lambda (nf34de@x) (nf2e58@mkstx (let nf34e2@f ((nf34e0@x nf34de@x)) (if (nf2e3c@stx? nf34e0@x) nf34e0@x (if (pair? nf34e0@x) (cons (nf34e2@f (car nf34e0@x)) (nf34e2@f (cdr nf34e0@x))) (if (symbol? nf34e0@x) (nf2fff@scheme-stx nf34e0@x) (if (vector? nf34e0@x) (vector-map nf34e2@f nf34e0@x) nf34e0@x))))) '() '() '()))) (set! nf4b28@nf302d@bless nf302d@bless) (set! nf302f@with-syntax-macro (lambda (nf34e4@e) (let ((nf34e6@t nf34e4@e)) (let ((nf34e8@ls/false (nf3077@syntax-dispatch nf34e6@t '(_ #(each (any any)) any . each-any)))) (if nf34e8@ls/false (apply (lambda (nf34ea@pat* nf34eb@expr* nf34ec@b nf34ed@b*) (let ((nf34f2@idn* (let nf34f6@f ((nf34f4@pat* nf34ea@pat*)) (if (null? nf34f4@pat*) '() (call-with-values (lambda () (nf3075@convert-pattern (car nf34f4@pat*) '())) (lambda (nf34fc@nf34f9 nf34fd@nf34fb) (let ((nf3500@idn* nf34fd@nf34fb) (nf3501@pat nf34fc@nf34f9)) (append nf3500@idn* (nf34f6@f (cdr nf34f4@pat*)))))))))) (begin (nf309d@verify-formals (map car nf34f2@idn*) nf34e4@e) (let ((nf3504@t* (nf3145@generate-temporaries nf34eb@expr*))) (nf302d@bless (list 'let (map list nf3504@t* nf34eb@expr*) (let nf350a@f ((nf3506@pat* nf34ea@pat*) (nf3507@t* nf3504@t*)) (if (null? nf3506@pat*) (cons 'begin (cons '#f (cons nf34ec@b nf34ed@b*))) (list 'syntax-case (car nf3507@t*) '() (list (car nf3506@pat*) (nf350a@f (cdr nf3506@pat*) (cdr nf3507@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car nf3506@pat*)) (car nf3507@t*)))))))))))) nf34e8@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf34e6@t)))))) (set! nf4b29@nf302f@with-syntax-macro nf302f@with-syntax-macro) (set! nf3031@invalid-fmls-error (lambda (nf350c@stx nf350d@fmls) (let ((nf3510@t nf350d@fmls)) (let ((nf3512@ls/false (nf3077@syntax-dispatch nf3510@t '#(each+ any () any)))) (if nf3512@ls/false (apply (lambda (nf3514@id* nf3515@last) (let nf351a@f ((nf3518@id* (if (nf2e70@id? nf3515@last) (cons nf3515@last nf3514@id*) (if (nf2e66@syntax-null? nf3515@last) nf3514@id* (nf3157@syntax-violation '#f '"not an identifier" nf350c@stx nf3515@last))))) (if (null? nf3518@id*) (values) (if (not (nf2e70@id? (car nf3518@id*))) (nf3157@syntax-violation '#f '"not an identifier" nf350c@stx (car nf3518@id*)) (begin (nf351a@f (cdr nf3518@id*)) (if (nf2e7c@bound-id-member? (car nf3518@id*) (cdr nf3518@id*)) (nf3157@syntax-violation '#f '"duplicate binding" nf350c@stx (car nf3518@id*)) (void))))))) nf3512@ls/false) (let ((nf351c@t nf3510@t)) (let ((nf351e@ls/false (nf3077@syntax-dispatch nf351c@t '_))) (if nf351e@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"malformed binding form" nf350c@stx nf350d@fmls)) nf351e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf351c@t))))))))) (set! nf4b2a@nf3031@invalid-fmls-error nf3031@invalid-fmls-error) (set! nf3033@let-macro (lambda (nf3520@stx) (let ((nf3522@t nf3520@stx)) (let ((nf3524@ls/false (nf3077@syntax-dispatch nf3522@t '(_ #(each (any any)) any . each-any)))) (if nf3524@ls/false (apply (lambda (nf3526@lhs* nf3527@rhs* nf3528@b nf3529@b*) (if (nf2e78@valid-bound-ids? nf3526@lhs*) (nf302d@bless (cons (cons 'lambda (cons nf3526@lhs* (cons nf3528@b nf3529@b*))) nf3527@rhs*)) (nf3031@invalid-fmls-error nf3520@stx nf3526@lhs*))) nf3524@ls/false) (let ((nf352e@t nf3522@t)) (let ((nf3530@ls/false (nf3077@syntax-dispatch nf352e@t '(_ any #(each (any any)) any . each-any)))) (if (and nf3530@ls/false (apply (lambda (nf3532@f nf3533@lhs* nf3534@rhs* nf3535@b nf3536@b*) (nf2e70@id? nf3532@f)) nf3530@ls/false)) (apply (lambda (nf353c@f nf353d@lhs* nf353e@rhs* nf353f@b nf3540@b*) (if (nf2e78@valid-bound-ids? nf353d@lhs*) (nf302d@bless (cons (list 'letrec (list (list nf353c@f (cons 'lambda (cons nf353d@lhs* (cons nf353f@b nf3540@b*))))) nf353c@f) nf353e@rhs*)) (nf3031@invalid-fmls-error nf3520@stx nf353d@lhs*))) nf3530@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf352e@t))))))))) (set! nf4b2b@nf3033@let-macro nf3033@let-macro) (set! nf3035@let-values-macro (lambda (nf3546@stx) (let ((nf3549@rename '#f) (nf354b@rename* '#f)) (begin (set! nf3549@rename (lambda (nf35ae@x nf35af@old* nf35b0@new*) (begin (if (not (nf2e70@id? nf35ae@x)) (nf3157@syntax-violation '#f '"not an indentifier" nf3546@stx nf35ae@x) (void)) (if (nf2e7c@bound-id-member? nf35ae@x nf35af@old*) (nf3157@syntax-violation '#f '"duplicate binding" nf3546@stx nf35ae@x) (void)) (let ((nf35b4@y (gensym (nf315d@syntax->datum nf35ae@x)))) (values nf35b4@y (cons nf35ae@x nf35af@old*) (cons nf35b4@y nf35b0@new*)))))) (set! nf354b@rename* (lambda (nf359c@x* nf359d@old* nf359e@new*) (if (null? nf359c@x*) (values '() nf359d@old* nf359e@new*) (call-with-values (lambda () (nf3549@rename (car nf359c@x*) nf359d@old* nf359e@new*)) (lambda (nf35a2@x nf35a3@old* nf35a4@new*) (call-with-values (lambda () (nf354b@rename* (cdr nf359c@x*) nf35a3@old* nf35a4@new*)) (lambda (nf35a8@x* nf35a9@old* nf35aa@new*) (values (cons nf35a2@x nf35a8@x*) nf35a9@old* nf35aa@new*)))))))) (let ((nf354c@t nf3546@stx)) (let ((nf354e@ls/false (nf3077@syntax-dispatch nf354c@t '(_ () any . each-any)))) (if nf354e@ls/false (apply (lambda (nf3550@b nf3551@b*) (cons* (nf302d@bless 'let) '() nf3550@b nf3551@b*)) nf354e@ls/false) (let ((nf3554@t nf354c@t)) (let ((nf3556@ls/false (nf3077@syntax-dispatch nf3554@t '(_ #(each (any any)) any . each-any)))) (if nf3556@ls/false (apply (lambda (nf3558@lhs* nf3559@rhs* nf355a@b nf355b@b*) (nf302d@bless (let nf3568@f ((nf3560@lhs* nf3558@lhs*) (nf3561@rhs* nf3559@rhs*) (nf3562@old* '()) (nf3563@new* '())) (if (null? nf3560@lhs*) (cons 'let (cons (map list nf3562@old* nf3563@new*) (cons nf355a@b nf355b@b*))) (let ((nf356a@t (car nf3560@lhs*))) (let ((nf356c@ls/false (nf3077@syntax-dispatch nf356a@t 'each-any))) (if nf356c@ls/false (apply (lambda (nf356e@x*) (call-with-values (lambda () (nf354b@rename* nf356e@x* nf3562@old* nf3563@new*)) (lambda (nf3576@nf3571 nf3577@nf3573 nf3578@nf3575) (let ((nf357c@new* nf3578@nf3575) (nf357d@old* nf3577@nf3573) (nf357e@y* nf3576@nf3571)) (list 'call-with-values (list 'lambda '() (car nf3561@rhs*)) (list 'lambda nf357e@y* (nf3568@f (cdr nf3560@lhs*) (cdr nf3561@rhs*) nf357d@old* nf357c@new*))))))) nf356c@ls/false) (let ((nf3582@t nf356a@t)) (let ((nf3584@ls/false (nf3077@syntax-dispatch nf3582@t '#(each+ any () any)))) (if nf3584@ls/false (apply (lambda (nf3586@x* nf3587@x) (call-with-values (lambda () (nf3549@rename nf3587@x nf3562@old* nf3563@new*)) (lambda (nf358a@y nf358b@old* nf358c@new*) (call-with-values (lambda () (nf354b@rename* nf3586@x* nf358b@old* nf358c@new*)) (lambda (nf3590@y* nf3591@old* nf3592@new*) (list 'call-with-values (list 'lambda '() (car nf3561@rhs*)) (list 'lambda (append nf3590@y* nf358a@y) (nf3568@f (cdr nf3560@lhs*) (cdr nf3561@rhs*) nf3591@old* nf3592@new*)))))))) nf3584@ls/false) (let ((nf3596@t nf3582@t)) (let ((nf3598@ls/false (nf3077@syntax-dispatch nf3596@t 'any))) (if nf3598@ls/false (apply (lambda (nf359a@others) (nf3157@syntax-violation '#f '"malformed bindings" nf3546@stx nf359a@others)) nf3598@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3596@t)))))))))))))) nf3556@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3554@t))))))))))) (set! nf4b2c@nf3035@let-values-macro nf3035@let-values-macro) (set! nf3037@let*-values-macro (lambda (nf35b6@stx) (let ((nf35b9@check '#f)) (begin (set! nf35b9@check (lambda (nf35e8@x*) (if (not (null? nf35e8@x*)) (let ((nf35ea@x (car nf35e8@x*))) (begin (if (not (nf2e70@id? nf35ea@x)) (nf3157@syntax-violation '#f '"not an identifier" nf35b6@stx nf35ea@x) (void)) (nf35b9@check (cdr nf35e8@x*)) (if (nf2e7c@bound-id-member? nf35ea@x (cdr nf35e8@x*)) (nf3157@syntax-violation '#f '"duplicate identifier" nf35b6@stx nf35ea@x) (void)))) (void)))) (let ((nf35ba@t nf35b6@stx)) (let ((nf35bc@ls/false (nf3077@syntax-dispatch nf35ba@t '(_ () any . each-any)))) (if nf35bc@ls/false (apply (lambda (nf35be@b nf35bf@b*) (cons* (nf302d@bless 'let) '() nf35be@b nf35bf@b*)) nf35bc@ls/false) (let ((nf35c2@t nf35ba@t)) (let ((nf35c4@ls/false (nf3077@syntax-dispatch nf35c2@t '(_ #(each (any any)) any . each-any)))) (if nf35c4@ls/false (apply (lambda (nf35c6@lhs* nf35c7@rhs* nf35c8@b nf35c9@b*) (nf302d@bless (let nf35d2@f ((nf35ce@lhs* nf35c6@lhs*) (nf35cf@rhs* nf35c7@rhs*)) (if (null? nf35ce@lhs*) (cons 'begin (cons nf35c8@b nf35c9@b*)) (let ((nf35d4@t (car nf35ce@lhs*))) (let ((nf35d6@ls/false (nf3077@syntax-dispatch nf35d4@t 'each-any))) (if nf35d6@ls/false (apply (lambda (nf35d8@x*) (begin (nf35b9@check nf35d8@x*) (list 'call-with-values (list 'lambda '() (car nf35cf@rhs*)) (list 'lambda nf35d8@x* (nf35d2@f (cdr nf35ce@lhs*) (cdr nf35cf@rhs*)))))) nf35d6@ls/false) (let ((nf35da@t nf35d4@t)) (let ((nf35dc@ls/false (nf3077@syntax-dispatch nf35da@t '#(each+ any () any)))) (if nf35dc@ls/false (apply (lambda (nf35de@x* nf35df@x) (begin (nf35b9@check (cons nf35df@x nf35de@x*)) (list 'call-with-values (list 'lambda '() (car nf35cf@rhs*)) (list 'lambda (append nf35de@x* nf35df@x) (nf35d2@f (cdr nf35ce@lhs*) (cdr nf35cf@rhs*)))))) nf35dc@ls/false) (let ((nf35e2@t nf35da@t)) (let ((nf35e4@ls/false (nf3077@syntax-dispatch nf35e2@t 'any))) (if nf35e4@ls/false (apply (lambda (nf35e6@others) (nf3157@syntax-violation '#f '"malformed bindings" nf35b6@stx nf35e6@others)) nf35e4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf35e2@t)))))))))))))) nf35c4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf35c2@t))))))))))) (set! nf4b2d@nf3037@let*-values-macro nf3037@let*-values-macro) (set! nf3039@trace-lambda-macro (lambda (nf35ec@stx) (let ((nf35ee@t nf35ec@stx)) (let ((nf35f0@ls/false (nf3077@syntax-dispatch nf35ee@t '(_ any each-any any . each-any)))) (if nf35f0@ls/false (apply (lambda (nf35f2@who nf35f3@fmls nf35f4@b nf35f5@b*) (if (nf2e78@valid-bound-ids? nf35f3@fmls) (nf302d@bless (list 'make-traced-procedure (list 'quote nf35f2@who) (cons 'lambda (cons nf35f3@fmls (cons nf35f4@b nf35f5@b*))))) (nf3031@invalid-fmls-error nf35ec@stx nf35f3@fmls))) nf35f0@ls/false) (let ((nf35fa@t nf35ee@t)) (let ((nf35fc@ls/false (nf3077@syntax-dispatch nf35fa@t '(_ any #(each+ any () any) any . each-any)))) (if nf35fc@ls/false (apply (lambda (nf35fe@who nf35ff@fmls nf3600@last nf3601@b nf3602@b*) (if (nf2e78@valid-bound-ids? (cons nf3600@last nf35ff@fmls)) (nf302d@bless (list 'make-traced-procedure (list 'quote nf35fe@who) (cons 'lambda (cons (append nf35ff@fmls nf3600@last) (cons nf3601@b nf3602@b*))))) (nf3031@invalid-fmls-error nf35ec@stx (append nf35ff@fmls nf3600@last)))) nf35fc@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf35fa@t))))))))) (set! nf4b2e@nf3039@trace-lambda-macro nf3039@trace-lambda-macro) (set! nf303b@trace-define-macro (lambda (nf3608@stx) (let ((nf360a@t nf3608@stx)) (let ((nf360c@ls/false (nf3077@syntax-dispatch nf360a@t '(_ (any . each-any) any . each-any)))) (if nf360c@ls/false (apply (lambda (nf360e@who nf360f@fmls nf3610@b nf3611@b*) (if (nf2e78@valid-bound-ids? nf360f@fmls) (nf302d@bless (list 'define nf360e@who (list 'make-traced-procedure (list 'quote nf360e@who) (cons 'lambda (cons nf360f@fmls (cons nf3610@b nf3611@b*)))))) (nf3031@invalid-fmls-error nf3608@stx nf360f@fmls))) nf360c@ls/false) (let ((nf3616@t nf360a@t)) (let ((nf3618@ls/false (nf3077@syntax-dispatch nf3616@t '(_ (any . #(each+ any () any)) any . each-any)))) (if nf3618@ls/false (apply (lambda (nf361a@who nf361b@fmls nf361c@last nf361d@b nf361e@b*) (if (nf2e78@valid-bound-ids? (cons nf361c@last nf361b@fmls)) (nf302d@bless (list 'define nf361a@who (list 'make-traced-procedure (list 'quote nf361a@who) (cons 'lambda (cons (append nf361b@fmls nf361c@last) (cons nf361d@b nf361e@b*)))))) (nf3031@invalid-fmls-error nf3608@stx (append nf361b@fmls nf361c@last)))) nf3618@ls/false) (let ((nf3624@t nf3616@t)) (let ((nf3626@ls/false (nf3077@syntax-dispatch nf3624@t '(_ any any)))) (if nf3626@ls/false (apply (lambda (nf3628@who nf3629@expr) (if (nf2e70@id? nf3628@who) (nf302d@bless (list 'define nf3628@who (list 'let (list (list 'v nf3629@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote nf3628@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (nf3157@syntax-violation '#f '"invalid name" nf3608@stx))) nf3626@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3624@t)))))))))))) (set! nf4b2f@nf303b@trace-define-macro nf303b@trace-define-macro) (set! nf303d@trace-define-syntax-macro (lambda (nf362c@stx) (let ((nf362e@t nf362c@stx)) (let ((nf3630@ls/false (nf3077@syntax-dispatch nf362e@t '(_ any any)))) (if nf3630@ls/false (apply (lambda (nf3632@who nf3633@expr) (if (nf2e70@id? nf3632@who) (nf302d@bless (list 'define-syntax nf3632@who (list 'make-traced-macro (list 'quote nf3632@who) nf3633@expr))) (nf3157@syntax-violation '#f '"invalid name" nf362c@stx))) nf3630@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf362e@t)))))) (set! nf4b30@nf303d@trace-define-syntax-macro nf303d@trace-define-syntax-macro) (set! nf303f@trace-let/rec-syntax (lambda (nf3636@who) (lambda (nf3638@stx) (let ((nf363a@t nf3638@stx)) (let ((nf363c@ls/false (nf3077@syntax-dispatch nf363a@t '(_ #(each (any any)) any . each-any)))) (if nf363c@ls/false (apply (lambda (nf363e@lhs* nf363f@rhs* nf3640@b nf3641@b*) (if (nf2e78@valid-bound-ids? nf363e@lhs*) (let ((nf3646@rhs* (map (lambda (nf3648@lhs nf3649@rhs) (list 'make-traced-macro (list 'quote nf3648@lhs) nf3649@rhs)) nf363e@lhs* nf363f@rhs*))) (nf302d@bless (cons nf3636@who (cons (map list nf363e@lhs* nf3646@rhs*) (cons nf3640@b nf3641@b*))))) (nf3031@invalid-fmls-error nf3638@stx nf363e@lhs*))) nf363c@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf363a@t))))))) (set! nf4b31@nf303f@trace-let/rec-syntax nf303f@trace-let/rec-syntax) (set! nf3041@trace-let-syntax-macro (nf303f@trace-let/rec-syntax 'let-syntax)) (set! nf4b32@nf3041@trace-let-syntax-macro nf3041@trace-let-syntax-macro) (set! nf3043@trace-letrec-syntax-macro (nf303f@trace-let/rec-syntax 'letrec-syntax)) (set! nf4b33@nf3043@trace-letrec-syntax-macro nf3043@trace-letrec-syntax-macro) (set! nf3045@guard-macro (lambda (nf364c@x) (let ((nf364f@gen-clauses '#f)) (begin (set! nf364f@gen-clauses (lambda (nf3666@con nf3667@outerk nf3668@clause*) (let ((nf366d@f '#f) (nf366f@f* '#f)) (begin (set! nf366d@f (lambda (nf36a6@x nf36a7@k) (let ((nf36aa@t nf36a6@x)) (let ((nf36ac@ls/false (nf3077@syntax-dispatch nf36aa@t '(any #(scheme-id =>) any)))) (if nf36ac@ls/false (apply (lambda (nf36ae@e nf36af@p) (let ((nf36b2@t (gensym))) (list 'let (list (list nf36b2@t nf36ae@e)) (list 'if nf36b2@t (list nf36af@p nf36b2@t) nf36a7@k)))) nf36ac@ls/false) (let ((nf36b4@t nf36aa@t)) (let ((nf36b6@ls/false (nf3077@syntax-dispatch nf36b4@t '(any)))) (if nf36b6@ls/false (apply (lambda (nf36b8@e) (let ((nf36ba@t (gensym))) (list 'let (list (list nf36ba@t nf36b8@e)) (list 'if nf36ba@t nf36ba@t nf36a7@k)))) nf36b6@ls/false) (let ((nf36bc@t nf36b4@t)) (let ((nf36be@ls/false (nf3077@syntax-dispatch nf36bc@t '(any any . each-any)))) (if nf36be@ls/false (apply (lambda (nf36c0@e nf36c1@v nf36c2@v*) (list 'if nf36c0@e (cons 'begin (cons nf36c1@v nf36c2@v*)) nf36a7@k)) nf36be@ls/false) (let ((nf36c6@t nf36bc@t)) (let ((nf36c8@ls/false (nf3077@syntax-dispatch nf36c6@t '_))) (if nf36c8@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid guard clause" nf36a6@x)) nf36c8@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36c6@t))))))))))))))) (set! nf366f@f* (lambda (nf367c@x*) (let ((nf367e@t nf367c@x*)) (let ((nf3680@ls/false (nf3077@syntax-dispatch nf367e@t '()))) (if nf3680@ls/false (apply (lambda () (let ((nf3682@g (gensym))) (values (list nf3682@g (list 'lambda '() (list 'raise-continuable nf3666@con))) nf3682@g))) nf3680@ls/false) (let ((nf3684@t nf367e@t)) (let ((nf3686@ls/false (nf3077@syntax-dispatch nf3684@t '((#(scheme-id else) any . each-any))))) (if nf3686@ls/false (apply (lambda (nf3688@e nf3689@e*) (values (cons 'begin (cons nf3688@e nf3689@e*)) '#f)) nf3686@ls/false) (let ((nf368c@t nf3684@t)) (let ((nf368e@ls/false (nf3077@syntax-dispatch nf368c@t '(any . any)))) (if nf368e@ls/false (apply (lambda (nf3690@cls nf3691@cls*) (call-with-values (lambda () (nf366f@f* nf3691@cls*)) (lambda (nf3698@nf3695 nf3699@nf3697) (let ((nf369c@g nf3699@nf3697) (nf369d@e nf3698@nf3695)) (values (nf366d@f nf3690@cls nf369d@e) nf369c@g))))) nf368e@ls/false) (let ((nf36a0@t nf368c@t)) (let ((nf36a2@ls/false (nf3077@syntax-dispatch nf36a0@t 'any))) (if nf36a2@ls/false (apply (lambda (nf36a4@others) (nf3157@syntax-violation '#f '"invalid guard clause" nf36a4@others)) nf36a2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36a0@t))))))))))))))) (call-with-values (lambda () (nf366f@f* nf3668@clause*)) (lambda (nf3674@nf3671 nf3675@nf3673) (let ((nf3678@raisek nf3675@nf3673) (nf3679@code nf3674@nf3671)) (if nf3678@raisek (list (list 'call/cc (list 'lambda (list nf3678@raisek) (list nf3667@outerk (list 'lambda '() nf3679@code))))) (list nf3667@outerk (list 'lambda '() nf3679@code)))))))))) (let ((nf3650@t nf364c@x)) (let ((nf3652@ls/false (nf3077@syntax-dispatch nf3650@t '(_ (any . each-any) any . each-any)))) (if (and nf3652@ls/false (apply (lambda (nf3654@con nf3655@clause* nf3656@b nf3657@b*) (nf2e70@id? nf3654@con)) nf3652@ls/false)) (apply (lambda (nf365c@con nf365d@clause* nf365e@b nf365f@b*) (let ((nf3664@outerk (gensym))) (nf302d@bless (list (list 'call/cc (list 'lambda (list nf3664@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list nf365c@con) (nf364f@gen-clauses nf365c@con nf3664@outerk nf365d@clause*)) (cons 'lambda (cons '() (cons nf365e@b nf365f@b*))))))))))) nf3652@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3650@t)))))))) (set! nf4b34@nf3045@guard-macro nf3045@guard-macro) (set! nf3047@define-enumeration-macro (lambda (nf36ca@stx) (let ((nf36cd@set? '#f) (nf36cf@remove-dups '#f)) (begin (set! nf36cd@set? (lambda (nf36e6@x) (or (null? nf36e6@x) (and (not (memq (car nf36e6@x) (cdr nf36e6@x))) (nf36cd@set? (cdr nf36e6@x)))))) (set! nf36cf@remove-dups (lambda (nf36e4@ls) (if (null? nf36e4@ls) '() (cons (car nf36e4@ls) (nf36cf@remove-dups (remq (car nf36e4@ls) (cdr nf36e4@ls))))))) (let ((nf36d0@t nf36ca@stx)) (let ((nf36d2@ls/false (nf3077@syntax-dispatch nf36d0@t '(_ any each-any any)))) (if (and nf36d2@ls/false (apply (lambda (nf36d4@name nf36d5@id* nf36d6@maker) (and (nf2e70@id? nf36d4@name) (nf2e70@id? nf36d6@maker) (for-all nf2e70@id? nf36d5@id*))) nf36d2@ls/false)) (apply (lambda (nf36da@name nf36db@id* nf36dc@maker) (let ((nf36e0@name* (nf36cf@remove-dups (nf315d@syntax->datum nf36db@id*))) (nf36e1@mk (gensym))) (nf302d@bless (list 'begin (list 'define nf36e1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote nf36e0@name*)))) (list 'define-syntax nf36da@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote nf36e0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote nf36da@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax nf36dc@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote nf36dc@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote nf36e0@name*)) (cons 'syntax-violation (cons (list 'quote nf36dc@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons nf36e1@mk '('(n* ...))))))))))))) nf36d2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36d0@t)))))))) (set! nf4b35@nf3047@define-enumeration-macro nf3047@define-enumeration-macro) (set! nf3049@time-macro (lambda (nf36e8@stx) (let ((nf36ea@t nf36e8@stx)) (let ((nf36ec@ls/false (nf3077@syntax-dispatch nf36ea@t '(_ any)))) (if nf36ec@ls/false (apply (lambda (nf36ee@expr) (nf302d@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() nf36ee@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) nf36ec@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36ea@t)))))) (set! nf4b36@nf3049@time-macro nf3049@time-macro) (set! nf304b@delay-macro (lambda (nf36f0@stx) (let ((nf36f2@t nf36f0@stx)) (let ((nf36f4@ls/false (nf3077@syntax-dispatch nf36f2@t '(_ any)))) (if nf36f4@ls/false (apply (lambda (nf36f6@expr) (nf302d@bless (list 'make-promise (list 'lambda '() nf36f6@expr)))) nf36f4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36f2@t)))))) (set! nf4b37@nf304b@delay-macro nf304b@delay-macro) (set! nf304d@assert-macro (lambda (nf36f8@stx) (let ((nf36fa@t nf36f8@stx)) (let ((nf36fc@ls/false (nf3077@syntax-dispatch nf36fa@t '(_ any)))) (if nf36fc@ls/false (apply (lambda (nf36fe@expr) (let ((nf3700@pos (or (nf314f@expression-position nf36f8@stx) (nf314f@expression-position nf36fe@expr)))) (nf302d@bless (list 'unless nf36fe@expr (list 'assertion-error (list 'quote nf36fe@expr) (list 'quote nf3700@pos)))))) nf36fc@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf36fa@t)))))) (set! nf4b38@nf304d@assert-macro nf304d@assert-macro) (set! nf304f@endianness-macro (lambda (nf3702@stx) (let ((nf3704@t nf3702@stx)) (let ((nf3706@ls/false (nf3077@syntax-dispatch nf3704@t '(_ any)))) (if nf3706@ls/false (apply (lambda (nf3708@e) (let ((nf370a@t (nf315d@syntax->datum nf3708@e))) (if (memv nf370a@t '(little)) (nf302d@bless ''little) (if (memv nf370a@t '(big)) (nf302d@bless ''big) (nf3157@syntax-violation '#f '"endianness must be big or little" nf3702@stx))))) nf3706@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3704@t)))))) (set! nf4b39@nf304f@endianness-macro nf304f@endianness-macro) (set! nf3051@identifier-syntax-macro (lambda (nf370c@stx) (let ((nf370e@t nf370c@stx)) (let ((nf3710@ls/false (nf3077@syntax-dispatch nf370e@t '(_ any)))) (if nf3710@ls/false (apply (lambda (nf3712@expr) (nf302d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax nf3712@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax nf3712@expr) '((syntax (e* ...)))))))))) nf3710@ls/false) (let ((nf3714@t nf370e@t)) (let ((nf3716@ls/false (nf3077@syntax-dispatch nf3714@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and nf3716@ls/false (apply (lambda (nf3718@id1 nf3719@expr1 nf371a@id2 nf371b@expr2 nf371c@expr3) (and (nf2e70@id? nf3718@id1) (nf2e70@id? nf371a@id2) (nf2e70@id? nf371b@expr2))) nf3716@ls/false)) (apply (lambda (nf3722@id1 nf3723@expr1 nf3724@id2 nf3725@expr2 nf3726@expr3) (nf302d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax nf3723@expr1)) (list (list 'set! 'id nf3725@expr2) (list 'syntax nf3726@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons nf3723@expr1 '(e* ...))))))))) nf3716@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3714@t))))))))) (set! nf4b3a@nf3051@identifier-syntax-macro nf3051@identifier-syntax-macro) (set! nf3053@do-macro (lambda (nf372c@stx) (let ((nf372f@bind '#f)) (begin (set! nf372f@bind (lambda (nf3746@x) (let ((nf3748@t nf3746@x)) (let ((nf374a@ls/false (nf3077@syntax-dispatch nf3748@t '(any any)))) (if nf374a@ls/false (apply (lambda (nf374c@x nf374d@init) (list nf374c@x nf374d@init nf374c@x)) nf374a@ls/false) (let ((nf3750@t nf3748@t)) (let ((nf3752@ls/false (nf3077@syntax-dispatch nf3750@t '(any any any)))) (if nf3752@ls/false (apply (lambda (nf3754@x nf3755@init nf3756@step) (list nf3754@x nf3755@init nf3756@step)) nf3752@ls/false) (let ((nf375a@t nf3750@t)) (let ((nf375c@ls/false (nf3077@syntax-dispatch nf375a@t '_))) (if nf375c@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid binding" nf372c@stx)) nf375c@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf375a@t)))))))))))) (let ((nf3730@t nf372c@stx)) (let ((nf3732@ls/false (nf3077@syntax-dispatch nf3730@t '(_ each-any (any . each-any) . each-any)))) (if nf3732@ls/false (apply (lambda (nf3734@binding* nf3735@test nf3736@expr* nf3737@command*) (let ((nf373c@t (map nf372f@bind nf3734@binding*))) (let ((nf373e@ls/false (nf3077@syntax-dispatch nf373c@t '#(each (any any any))))) (if nf373e@ls/false (apply (lambda (nf3740@x* nf3741@init* nf3742@step*) (if (nf2e78@valid-bound-ids? nf3740@x*) (nf302d@bless (list 'letrec (list (list 'loop (list 'lambda nf3740@x* (list 'if nf3735@test (cons 'begin (cons '(if #f #f) nf3736@expr*)) (cons 'begin (append nf3737@command* (list (cons 'loop nf3742@step*)))))))) (cons 'loop nf3741@init*))) (nf3157@syntax-violation '#f '"invalid bindings" nf372c@stx))) nf373e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf373c@t))))) nf3732@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3730@t)))))))) (set! nf4b3b@nf3053@do-macro nf3053@do-macro) (set! nf3055@let*-macro (lambda (nf375e@stx) (let ((nf3760@t nf375e@stx)) (let ((nf3762@ls/false (nf3077@syntax-dispatch nf3760@t '(_ #(each (any any)) any . each-any)))) (if (and nf3762@ls/false (apply (lambda (nf3764@lhs* nf3765@rhs* nf3766@b nf3767@b*) (for-all nf2e70@id? nf3764@lhs*)) nf3762@ls/false)) (apply (lambda (nf376c@lhs* nf376d@rhs* nf376e@b nf376f@b*) (nf302d@bless (let nf3776@f ((nf3774@x* (map list nf376c@lhs* nf376d@rhs*))) (if (null? nf3774@x*) (cons 'let (cons '() (cons nf376e@b nf376f@b*))) (list 'let (list (car nf3774@x*)) (nf3776@f (cdr nf3774@x*))))))) nf3762@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3760@t)))))) (set! nf4b3c@nf3055@let*-macro nf3055@let*-macro) (set! nf3057@or-macro (lambda (nf3778@stx) (let ((nf377a@t nf3778@stx)) (let ((nf377c@ls/false (nf3077@syntax-dispatch nf377a@t '(_)))) (if nf377c@ls/false (apply (lambda () '#f) nf377c@ls/false) (let ((nf377e@t nf377a@t)) (let ((nf3780@ls/false (nf3077@syntax-dispatch nf377e@t '(_ any . each-any)))) (if nf3780@ls/false (apply (lambda (nf3782@e nf3783@e*) (nf302d@bless (let nf378a@f ((nf3786@e nf3782@e) (nf3787@e* nf3783@e*)) (if (null? nf3787@e*) (list 'begin '#f nf3786@e) (list 'let (list (list 't nf3786@e)) (list 'if 't 't (nf378a@f (car nf3787@e*) (cdr nf3787@e*)))))))) nf3780@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf377e@t))))))))) (set! nf4b3d@nf3057@or-macro nf3057@or-macro) (set! nf3059@and-macro (lambda (nf378c@stx) (let ((nf378e@t nf378c@stx)) (let ((nf3790@ls/false (nf3077@syntax-dispatch nf378e@t '(_)))) (if nf3790@ls/false (apply (lambda () '#t) nf3790@ls/false) (let ((nf3792@t nf378e@t)) (let ((nf3794@ls/false (nf3077@syntax-dispatch nf3792@t '(_ any . each-any)))) (if nf3794@ls/false (apply (lambda (nf3796@e nf3797@e*) (nf302d@bless (let nf379e@f ((nf379a@e nf3796@e) (nf379b@e* nf3797@e*)) (if (null? nf379b@e*) (list 'begin '#f nf379a@e) (cons 'if (cons nf379a@e (cons (nf379e@f (car nf379b@e*) (cdr nf379b@e*)) '(#f)))))))) nf3794@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3792@t))))))))) (set! nf4b3e@nf3059@and-macro nf3059@and-macro) (set! nf305b@cond-macro (lambda (nf37a0@stx) (let ((nf37a2@t nf37a0@stx)) (let ((nf37a4@ls/false (nf3077@syntax-dispatch nf37a2@t '(_ any . each-any)))) (if nf37a4@ls/false (apply (lambda (nf37a6@cls nf37a7@cls*) (nf302d@bless (let nf37ae@f ((nf37aa@cls nf37a6@cls) (nf37ab@cls* nf37a7@cls*)) (if (null? nf37ab@cls*) (let ((nf37b0@t nf37aa@cls)) (let ((nf37b2@ls/false (nf3077@syntax-dispatch nf37b0@t '(#(scheme-id else) any . each-any)))) (if nf37b2@ls/false (apply (lambda (nf37b4@e nf37b5@e*) (cons 'begin (cons nf37b4@e nf37b5@e*))) nf37b2@ls/false) (let ((nf37b8@t nf37b0@t)) (let ((nf37ba@ls/false (nf3077@syntax-dispatch nf37b8@t '(any #(scheme-id =>) any)))) (if nf37ba@ls/false (apply (lambda (nf37bc@e nf37bd@p) (list 'let (list (list 't nf37bc@e)) (list 'if 't (cons nf37bd@p '(t))))) nf37ba@ls/false) (let ((nf37c0@t nf37b8@t)) (let ((nf37c2@ls/false (nf3077@syntax-dispatch nf37c0@t '(any)))) (if nf37c2@ls/false (apply (lambda (nf37c4@e) (cons 'or (cons nf37c4@e '((if #f #f))))) nf37c2@ls/false) (let ((nf37c6@t nf37c0@t)) (let ((nf37c8@ls/false (nf3077@syntax-dispatch nf37c6@t '(any . each-any)))) (if nf37c8@ls/false (apply (lambda (nf37ca@e nf37cb@e*) (list 'if nf37ca@e (cons 'begin nf37cb@e*))) nf37c8@ls/false) (let ((nf37ce@t nf37c6@t)) (let ((nf37d0@ls/false (nf3077@syntax-dispatch nf37ce@t '_))) (if nf37d0@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid last clause" nf37a0@stx)) nf37d0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf37ce@t)))))))))))))))) (let ((nf37d2@t nf37aa@cls)) (let ((nf37d4@ls/false (nf3077@syntax-dispatch nf37d2@t '(#(scheme-id else) any . each-any)))) (if nf37d4@ls/false (apply (lambda (nf37d6@e nf37d7@e*) (nf3157@syntax-violation '#f '"incorrect position of keyword else" nf37a0@stx)) nf37d4@ls/false) (let ((nf37da@t nf37d2@t)) (let ((nf37dc@ls/false (nf3077@syntax-dispatch nf37da@t '(any #(scheme-id =>) any)))) (if nf37dc@ls/false (apply (lambda (nf37de@e nf37df@p) (list 'let (list (list 't nf37de@e)) (list 'if 't (cons nf37df@p '(t)) (nf37ae@f (car nf37ab@cls*) (cdr nf37ab@cls*))))) nf37dc@ls/false) (let ((nf37e2@t nf37da@t)) (let ((nf37e4@ls/false (nf3077@syntax-dispatch nf37e2@t '(any)))) (if nf37e4@ls/false (apply (lambda (nf37e6@e) (list 'or nf37e6@e (nf37ae@f (car nf37ab@cls*) (cdr nf37ab@cls*)))) nf37e4@ls/false) (let ((nf37e8@t nf37e2@t)) (let ((nf37ea@ls/false (nf3077@syntax-dispatch nf37e8@t '(any . each-any)))) (if nf37ea@ls/false (apply (lambda (nf37ec@e nf37ed@e*) (list 'if nf37ec@e (cons 'begin nf37ed@e*) (nf37ae@f (car nf37ab@cls*) (cdr nf37ab@cls*)))) nf37ea@ls/false) (let ((nf37f0@t nf37e8@t)) (let ((nf37f2@ls/false (nf3077@syntax-dispatch nf37f0@t '_))) (if nf37f2@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid last clause" nf37a0@stx)) nf37f2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf37f0@t)))))))))))))))))))) nf37a4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf37a2@t)))))) (set! nf4b3f@nf305b@cond-macro nf305b@cond-macro) (set! nf305d@do-include (lambda (nf37f4@stx nf37f5@id nf37f6@filename) (let ((nf37fa@filename (nf2e84@stx->datum nf37f6@filename))) (begin (if (not (and (string? nf37fa@filename) (nf2e70@id? nf37f5@id))) (nf3157@syntax-violation '#f '"invalid syntax" nf37f4@stx) (void)) (cons (nf302d@bless 'begin) (with-input-from-file nf37fa@filename (lambda () (let nf37fe@f ((nf37fc@ls '())) (let ((nf3800@x (nf29ad@nf287f@read-annotated))) (if (eof-object? nf3800@x) (reverse nf37fc@ls) (nf37fe@f (cons (nf2e50@datum->stx nf37f5@id nf3800@x) nf37fc@ls)))))))))))) (set! nf4b40@nf305d@do-include nf305d@do-include) (set! nf305f@include-macro (lambda (nf3802@e) (let ((nf3804@t nf3802@e)) (let ((nf3806@ls/false (nf3077@syntax-dispatch nf3804@t '(any any)))) (if nf3806@ls/false (apply (lambda (nf3808@id nf3809@filename) (nf305d@do-include nf3802@e nf3808@id nf3809@filename)) nf3806@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3804@t)))))) (set! nf4b41@nf305f@include-macro nf305f@include-macro) (set! nf3061@include-into-macro (lambda (nf380c@e) (let ((nf380e@t nf380c@e)) (let ((nf3810@ls/false (nf3077@syntax-dispatch nf380e@t '(_ any any)))) (if nf3810@ls/false (apply (lambda (nf3812@id nf3813@filename) (nf305d@do-include nf380c@e nf3812@id nf3813@filename)) nf3810@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf380e@t)))))) (set! nf4b42@nf3061@include-into-macro nf3061@include-into-macro) (set! nf3063@syntax-rules-macro (lambda (nf3816@e) (let ((nf3818@t nf3816@e)) (let ((nf381a@ls/false (nf3077@syntax-dispatch nf3818@t '(_ each-any . #(each (any any)))))) (if nf381a@ls/false (apply (lambda (nf381c@lits nf381d@pat* nf381e@tmp*) (begin (nf307d@verify-literals nf381c@lits nf3816@e) (nf302d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons nf381c@lits (map (lambda (nf3822@pat nf3823@tmp) (let ((nf3826@t nf3822@pat)) (let ((nf3828@ls/false (nf3077@syntax-dispatch nf3826@t '(_ . any)))) (if nf3828@ls/false (apply (lambda (nf382a@rest) (list (cons 'g nf382a@rest) (list 'syntax nf3823@tmp))) nf3828@ls/false) (let ((nf382c@t nf3826@t)) (let ((nf382e@ls/false (nf3077@syntax-dispatch nf382c@t '_))) (if nf382e@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid syntax-rules pattern" nf3816@e nf3822@pat)) nf382e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf382c@t)))))))) nf381d@pat* nf381e@tmp*)))))))) nf381a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3818@t)))))) (set! nf4b43@nf3063@syntax-rules-macro nf3063@syntax-rules-macro) (set! nf3065@quasiquote-macro (let ((nf3831@datum '#f) (nf384d@quasicons* '#f) (nf384f@quasicons '#f) (nf3851@quasiappend '#f) (nf3853@quasivector '#f) (nf3855@vquasi '#f) (nf3857@quasi '#f)) (begin (set! nf3831@datum (lambda (nf3932@x) (list (nf2fff@scheme-stx 'quote) (nf2e58@mkstx nf3932@x '() '() '())))) (set! nf384d@quasicons* (lambda (nf392a@x nf392b@y) (let nf3930@f ((nf392e@x nf392a@x)) (if (null? nf392e@x) nf392b@y (nf384f@quasicons (car nf392e@x) (nf3930@f (cdr nf392e@x))))))) (set! nf384f@quasicons (lambda (nf3904@x nf3905@y) (let ((nf3908@t nf3905@y)) (let ((nf390a@ls/false (nf3077@syntax-dispatch nf3908@t '(#(scheme-id quote) any)))) (if nf390a@ls/false (apply (lambda (nf390c@dy) (let ((nf390e@t nf3904@x)) (let ((nf3910@ls/false (nf3077@syntax-dispatch nf390e@t '(#(scheme-id quote) any)))) (if nf3910@ls/false (apply (lambda (nf3912@dx) (list (nf2fff@scheme-stx 'quote) (cons nf3912@dx nf390c@dy))) nf3910@ls/false) (let ((nf3914@t nf390e@t)) (let ((nf3916@ls/false (nf3077@syntax-dispatch nf3914@t '_))) (if nf3916@ls/false (apply (lambda () (let ((nf3918@t nf390c@dy)) (let ((nf391a@ls/false (nf3077@syntax-dispatch nf3918@t '()))) (if nf391a@ls/false (apply (lambda () (list (nf2fff@scheme-stx 'list) nf3904@x)) nf391a@ls/false) (let ((nf391c@t nf3918@t)) (let ((nf391e@ls/false (nf3077@syntax-dispatch nf391c@t '_))) (if nf391e@ls/false (apply (lambda () (list (nf2fff@scheme-stx 'cons) nf3904@x nf3905@y)) nf391e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf391c@t)))))))) nf3916@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3914@t)))))))) nf390a@ls/false) (let ((nf3920@t nf3908@t)) (let ((nf3922@ls/false (nf3077@syntax-dispatch nf3920@t '(#(scheme-id list) . each-any)))) (if nf3922@ls/false (apply (lambda (nf3924@stuff) (cons* (nf2fff@scheme-stx 'list) nf3904@x nf3924@stuff)) nf3922@ls/false) (let ((nf3926@t nf3920@t)) (let ((nf3928@ls/false (nf3077@syntax-dispatch nf3926@t '_))) (if nf3928@ls/false (apply (lambda () (list (nf2fff@scheme-stx 'cons) nf3904@x nf3905@y)) nf3928@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3926@t)))))))))))) (set! nf3851@quasiappend (lambda (nf38ea@x nf38eb@y) (let ((nf38ee@ls (let nf38f2@f ((nf38f0@x nf38ea@x)) (if (null? nf38f0@x) (let ((nf38f4@t nf38eb@y)) (let ((nf38f6@ls/false (nf3077@syntax-dispatch nf38f4@t '(#(scheme-id quote) ())))) (if nf38f6@ls/false (apply (lambda () '()) nf38f6@ls/false) (let ((nf38f8@t nf38f4@t)) (let ((nf38fa@ls/false (nf3077@syntax-dispatch nf38f8@t '_))) (if nf38fa@ls/false (apply (lambda () (list nf38eb@y)) nf38fa@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf38f8@t))))))) (let ((nf38fc@t (car nf38f0@x))) (let ((nf38fe@ls/false (nf3077@syntax-dispatch nf38fc@t '(#(scheme-id quote) ())))) (if nf38fe@ls/false (apply (lambda () (nf38f2@f (cdr nf38f0@x))) nf38fe@ls/false) (let ((nf3900@t nf38fc@t)) (let ((nf3902@ls/false (nf3077@syntax-dispatch nf3900@t '_))) (if nf3902@ls/false (apply (lambda () (cons (car nf38f0@x) (nf38f2@f (cdr nf38f0@x)))) nf3902@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3900@t))))))))))) (if (null? nf38ee@ls) (list (nf2fff@scheme-stx 'quote) '()) (if (null? (cdr nf38ee@ls)) (car nf38ee@ls) (cons* (nf2fff@scheme-stx 'append) nf38ee@ls)))))) (set! nf3853@quasivector (lambda (nf38b8@x) (let ((nf38ba@pat-x nf38b8@x)) (let ((nf38bc@t nf38ba@pat-x)) (let ((nf38be@ls/false (nf3077@syntax-dispatch nf38bc@t '(#(scheme-id quote) each-any)))) (if nf38be@ls/false (apply (lambda (nf38c0@x*) (list (nf2fff@scheme-stx 'quote) (list->vector nf38c0@x*))) nf38be@ls/false) (let ((nf38c2@t nf38bc@t)) (let ((nf38c4@ls/false (nf3077@syntax-dispatch nf38c2@t '_))) (if nf38c4@ls/false (apply (lambda () (let nf38cc@f ((nf38c6@x nf38b8@x) (nf38c7@k (lambda (nf38ca@ls) (cons* (nf2fff@scheme-stx 'vector) nf38ca@ls)))) (let ((nf38ce@t nf38c6@x)) (let ((nf38d0@ls/false (nf3077@syntax-dispatch nf38ce@t '(#(scheme-id quote) each-any)))) (if nf38d0@ls/false (apply (lambda (nf38d2@x*) (nf38c7@k (map (lambda (nf38d4@x) (list (nf2fff@scheme-stx 'quote) nf38d4@x)) nf38d2@x*))) nf38d0@ls/false) (let ((nf38d6@t nf38ce@t)) (let ((nf38d8@ls/false (nf3077@syntax-dispatch nf38d6@t '(#(scheme-id list) . each-any)))) (if nf38d8@ls/false (apply (lambda (nf38da@x*) (nf38c7@k nf38da@x*)) nf38d8@ls/false) (let ((nf38dc@t nf38d6@t)) (let ((nf38de@ls/false (nf3077@syntax-dispatch nf38dc@t '(#(scheme-id cons) any any)))) (if nf38de@ls/false (apply (lambda (nf38e0@x nf38e1@y) (nf38cc@f nf38e1@y (lambda (nf38e4@ls) (nf38c7@k (cons nf38e0@x nf38e4@ls))))) nf38de@ls/false) (let ((nf38e6@t nf38dc@t)) (let ((nf38e8@ls/false (nf3077@syntax-dispatch nf38e6@t '_))) (if nf38e8@ls/false (apply (lambda () (list (nf2fff@scheme-stx 'list->vector) nf38ba@pat-x)) nf38e8@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf38e6@t))))))))))))))) nf38c4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf38c2@t)))))))))) (set! nf3855@vquasi (lambda (nf3896@p nf3897@lev) (let ((nf389a@t nf3896@p)) (let ((nf389c@ls/false (nf3077@syntax-dispatch nf389a@t '(any . any)))) (if nf389c@ls/false (apply (lambda (nf389e@p nf389f@q) (let ((nf38a2@t nf389e@p)) (let ((nf38a4@ls/false (nf3077@syntax-dispatch nf38a2@t '(#(scheme-id unquote) . each-any)))) (if nf38a4@ls/false (apply (lambda (nf38a6@p) (if (= nf3897@lev '0) (nf384d@quasicons* nf38a6@p (nf3855@vquasi nf389f@q nf3897@lev)) (nf384f@quasicons (nf384f@quasicons (nf3831@datum 'unquote) (nf3857@quasi nf38a6@p (- nf3897@lev '1))) (nf3855@vquasi nf389f@q nf3897@lev)))) nf38a4@ls/false) (let ((nf38a8@t nf38a2@t)) (let ((nf38aa@ls/false (nf3077@syntax-dispatch nf38a8@t '(#(scheme-id unquote-splicing) . each-any)))) (if nf38aa@ls/false (apply (lambda (nf38ac@p) (if (= nf3897@lev '0) (nf3851@quasiappend nf38ac@p (nf3855@vquasi nf389f@q nf3897@lev)) (nf384f@quasicons (nf384f@quasicons (nf3831@datum 'unquote-splicing) (nf3857@quasi nf38ac@p (- nf3897@lev '1))) (nf3855@vquasi nf389f@q nf3897@lev)))) nf38aa@ls/false) (let ((nf38ae@t nf38a8@t)) (let ((nf38b0@ls/false (nf3077@syntax-dispatch nf38ae@t 'any))) (if nf38b0@ls/false (apply (lambda (nf38b2@p) (nf384f@quasicons (nf3857@quasi nf38b2@p nf3897@lev) (nf3855@vquasi nf389f@q nf3897@lev))) nf38b0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf38ae@t))))))))))) nf389c@ls/false) (let ((nf38b4@t nf389a@t)) (let ((nf38b6@ls/false (nf3077@syntax-dispatch nf38b4@t '()))) (if nf38b6@ls/false (apply (lambda () (list (nf2fff@scheme-stx 'quote) '())) nf38b6@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf38b4@t))))))))) (set! nf3857@quasi (lambda (nf3860@p nf3861@lev) (let ((nf3864@t nf3860@p)) (let ((nf3866@ls/false (nf3077@syntax-dispatch nf3864@t '(#(scheme-id unquote) any)))) (if nf3866@ls/false (apply (lambda (nf3868@p) (if (= nf3861@lev '0) nf3868@p (nf384f@quasicons (nf3831@datum 'unquote) (nf3857@quasi (list nf3868@p) (- nf3861@lev '1))))) nf3866@ls/false) (let ((nf386a@t nf3864@t)) (let ((nf386c@ls/false (nf3077@syntax-dispatch nf386a@t '((#(scheme-id unquote) . each-any) . any)))) (if nf386c@ls/false (apply (lambda (nf386e@p nf386f@q) (if (= nf3861@lev '0) (nf384d@quasicons* nf386e@p (nf3857@quasi nf386f@q nf3861@lev)) (nf384f@quasicons (nf384f@quasicons (nf3831@datum 'unquote) (nf3857@quasi nf386e@p (- nf3861@lev '1))) (nf3857@quasi nf386f@q nf3861@lev)))) nf386c@ls/false) (let ((nf3872@t nf386a@t)) (let ((nf3874@ls/false (nf3077@syntax-dispatch nf3872@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if nf3874@ls/false (apply (lambda (nf3876@p nf3877@q) (if (= nf3861@lev '0) (nf3851@quasiappend nf3876@p (nf3857@quasi nf3877@q nf3861@lev)) (nf384f@quasicons (nf384f@quasicons (nf3831@datum 'unquote-splicing) (nf3857@quasi nf3876@p (- nf3861@lev '1))) (nf3857@quasi nf3877@q nf3861@lev)))) nf3874@ls/false) (let ((nf387a@t nf3872@t)) (let ((nf387c@ls/false (nf3077@syntax-dispatch nf387a@t '(#(scheme-id quasiquote) any)))) (if nf387c@ls/false (apply (lambda (nf387e@p) (nf384f@quasicons (nf3831@datum 'quasiquote) (nf3857@quasi (list nf387e@p) (+ nf3861@lev '1)))) nf387c@ls/false) (let ((nf3880@t nf387a@t)) (let ((nf3882@ls/false (nf3077@syntax-dispatch nf3880@t '(any . any)))) (if nf3882@ls/false (apply (lambda (nf3884@p nf3885@q) (nf384f@quasicons (nf3857@quasi nf3884@p nf3861@lev) (nf3857@quasi nf3885@q nf3861@lev))) nf3882@ls/false) (let ((nf3888@t nf3880@t)) (let ((nf388a@ls/false (nf3077@syntax-dispatch nf3888@t '#(vector each-any)))) (if (and nf388a@ls/false (apply (lambda (nf388c@x) (not (nf2e3c@stx? nf388c@x))) nf388a@ls/false)) (apply (lambda (nf388e@x) (nf3853@quasivector (nf3855@vquasi nf388e@x nf3861@lev))) nf388a@ls/false) (let ((nf3890@t nf3888@t)) (let ((nf3892@ls/false (nf3077@syntax-dispatch nf3890@t 'any))) (if nf3892@ls/false (apply (lambda (nf3894@p) (list (nf2fff@scheme-stx 'quote) nf3894@p)) nf3892@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3890@t)))))))))))))))))))))))) (lambda (nf3858@x) (let ((nf385a@t nf3858@x)) (let ((nf385c@ls/false (nf3077@syntax-dispatch nf385a@t '(_ any)))) (if nf385c@ls/false (apply (lambda (nf385e@e) (nf3857@quasi nf385e@e '0)) nf385c@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf385a@t)))))))) (set! nf4b44@nf3065@quasiquote-macro nf3065@quasiquote-macro) (set! nf3067@quasisyntax-macro (let ((nf3935@quasi '#f)) (begin (set! nf3935@quasi (lambda (nf3950@p nf3951@lev) (let ((nf3954@t nf3950@p)) (let ((nf3956@ls/false (nf3077@syntax-dispatch nf3954@t '(#(scheme-id unsyntax) any)))) (if nf3956@ls/false (apply (lambda (nf3958@p) (if (= nf3951@lev '0) (let ((nf395a@g (gensym))) (values (list nf395a@g) (list nf3958@p) nf395a@g)) (call-with-values (lambda () (nf3935@quasi nf3958@p (- nf3951@lev '1))) (lambda (nf3962@nf395d nf3963@nf395f nf3964@nf3961) (let ((nf3968@p nf3964@nf3961) (nf3969@rhs* nf3963@nf395f) (nf396a@lhs* nf3962@nf395d)) (values nf396a@lhs* nf3969@rhs* (list 'unsyntax nf3968@p))))))) nf3956@ls/false) (let ((nf396e@t nf3954@t)) (let ((nf3970@ls/false (nf3077@syntax-dispatch nf396e@t '#(scheme-id unsyntax)))) (if (and nf3970@ls/false (apply (lambda () (= nf3951@lev '0)) nf3970@ls/false)) (apply (lambda () (nf3157@syntax-violation '#f '"incorrect use of unsyntax" nf3950@p)) nf3970@ls/false) (let ((nf3972@t nf396e@t)) (let ((nf3974@ls/false (nf3077@syntax-dispatch nf3972@t '((#(scheme-id unsyntax) . each-any) . any)))) (if nf3974@ls/false (apply (lambda (nf3976@p* nf3977@q) (call-with-values (lambda () (nf3935@quasi nf3977@q nf3951@lev)) (lambda (nf3980@nf397b nf3981@nf397d nf3982@nf397f) (let ((nf3986@q nf3982@nf397f) (nf3987@rhs* nf3981@nf397d) (nf3988@lhs* nf3980@nf397b)) (if (= nf3951@lev '0) (let ((nf398c@g* (map (lambda (nf398e@x) (gensym)) nf3976@p*))) (values (append nf398c@g* nf3988@lhs*) (append nf3976@p* nf3987@rhs*) (append nf398c@g* nf3986@q))) (call-with-values (lambda () (nf3935@quasi nf3976@p* (- nf3951@lev '1))) (lambda (nf3996@nf3991 nf3997@nf3993 nf3998@nf3995) (let ((nf399c@p* nf3998@nf3995) (nf399d@rhs2* nf3997@nf3993) (nf399e@lhs2* nf3996@nf3991)) (values (append nf399e@lhs2* nf3988@lhs*) (append nf399d@rhs2* nf3987@rhs*) (cons (cons 'unsyntax nf399c@p*) nf3986@q)))))))))) nf3974@ls/false) (let ((nf39a2@t nf3972@t)) (let ((nf39a4@ls/false (nf3077@syntax-dispatch nf39a2@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if nf39a4@ls/false (apply (lambda (nf39a6@p* nf39a7@q) (call-with-values (lambda () (nf3935@quasi nf39a7@q nf3951@lev)) (lambda (nf39b0@nf39ab nf39b1@nf39ad nf39b2@nf39af) (let ((nf39b6@q nf39b2@nf39af) (nf39b7@rhs* nf39b1@nf39ad) (nf39b8@lhs* nf39b0@nf39ab)) (if (= nf3951@lev '0) (let ((nf39bc@g* (map (lambda (nf39be@x) (gensym)) nf39a6@p*))) (values (append (map (lambda (nf39c0@g) (cons nf39c0@g '(...))) nf39bc@g*) nf39b8@lhs*) (append nf39a6@p* nf39b7@rhs*) (append (apply append (map (lambda (nf39c2@g) (cons nf39c2@g '(...))) nf39bc@g*)) nf39b6@q))) (call-with-values (lambda () (nf3935@quasi nf39a6@p* (- nf3951@lev '1))) (lambda (nf39ca@nf39c5 nf39cb@nf39c7 nf39cc@nf39c9) (let ((nf39d0@p* nf39cc@nf39c9) (nf39d1@rhs2* nf39cb@nf39c7) (nf39d2@lhs2* nf39ca@nf39c5)) (values (append nf39d2@lhs2* nf39b8@lhs*) (append nf39d1@rhs2* nf39b7@rhs*) (cons (cons 'unsyntax-splicing nf39d0@p*) nf39b6@q)))))))))) nf39a4@ls/false) (let ((nf39d6@t nf39a2@t)) (let ((nf39d8@ls/false (nf3077@syntax-dispatch nf39d6@t '#(scheme-id unsyntax-splicing)))) (if (and nf39d8@ls/false (apply (lambda () (= nf3951@lev '0)) nf39d8@ls/false)) (apply (lambda () (nf3157@syntax-violation '#f '"incorrect use of unsyntax-splicing" nf3950@p)) nf39d8@ls/false) (let ((nf39da@t nf39d6@t)) (let ((nf39dc@ls/false (nf3077@syntax-dispatch nf39da@t '(#(scheme-id quasisyntax) any)))) (if nf39dc@ls/false (apply (lambda (nf39de@p) (call-with-values (lambda () (nf3935@quasi nf39de@p (+ nf3951@lev '1))) (lambda (nf39e6@nf39e1 nf39e7@nf39e3 nf39e8@nf39e5) (let ((nf39ec@p nf39e8@nf39e5) (nf39ed@rhs* nf39e7@nf39e3) (nf39ee@lhs* nf39e6@nf39e1)) (values nf39ee@lhs* nf39ed@rhs* (list 'quasisyntax nf39ec@p)))))) nf39dc@ls/false) (let ((nf39f2@t nf39da@t)) (let ((nf39f4@ls/false (nf3077@syntax-dispatch nf39f2@t '(any . any)))) (if nf39f4@ls/false (apply (lambda (nf39f6@p nf39f7@q) (call-with-values (lambda () (nf3935@quasi nf39f6@p nf3951@lev)) (lambda (nf3a06@nf39fb nf3a07@nf39fd nf3a08@nf39ff) (call-with-values (lambda () (nf3935@quasi nf39f7@q nf3951@lev)) (lambda (nf3a0c@nf3a01 nf3a0d@nf3a03 nf3a0e@nf3a05) (let ((nf3a12@q nf3a0e@nf3a05) (nf3a13@rhs2* nf3a0d@nf3a03) (nf3a14@lhs2* nf3a0c@nf3a01) (nf3a15@p nf3a08@nf39ff) (nf3a16@rhs* nf3a07@nf39fd) (nf3a17@lhs* nf3a06@nf39fb)) (values (append nf3a14@lhs2* nf3a17@lhs*) (append nf3a13@rhs2* nf3a16@rhs*) (cons nf3a15@p nf3a12@q)))))))) nf39f4@ls/false) (let ((nf3a1e@t nf39f2@t)) (let ((nf3a20@ls/false (nf3077@syntax-dispatch nf3a1e@t '#(vector each-any)))) (if nf3a20@ls/false (apply (lambda (nf3a22@x*) (call-with-values (lambda () (nf3935@quasi nf3a22@x* nf3951@lev)) (lambda (nf3a2a@nf3a25 nf3a2b@nf3a27 nf3a2c@nf3a29) (let ((nf3a30@x* nf3a2c@nf3a29) (nf3a31@rhs* nf3a2b@nf3a27) (nf3a32@lhs* nf3a2a@nf3a25)) (values nf3a32@lhs* nf3a31@rhs* (list->vector nf3a30@x*)))))) nf3a20@ls/false) (let ((nf3a36@t nf3a1e@t)) (let ((nf3a38@ls/false (nf3077@syntax-dispatch nf3a36@t '_))) (if nf3a38@ls/false (apply (lambda () (values '() '() nf3950@p)) nf3a38@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3a36@t)))))))))))))))))))))))))))))) (lambda (nf3936@x) (let ((nf3938@t nf3936@x)) (let ((nf393a@ls/false (nf3077@syntax-dispatch nf3938@t '(_ any)))) (if nf393a@ls/false (apply (lambda (nf393c@e) (call-with-values (lambda () (nf3935@quasi nf393c@e '0)) (lambda (nf3944@nf393f nf3945@nf3941 nf3946@nf3943) (let ((nf394a@v nf3946@nf3943) (nf394b@rhs* nf3945@nf3941) (nf394c@lhs* nf3944@nf393f)) (nf302d@bless (list 'syntax-case (cons 'list nf394b@rhs*) '() (list nf394c@lhs* (list 'syntax nf394a@v)))))))) nf393a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3938@t)))))))) (set! nf4b45@nf3067@quasisyntax-macro nf3067@quasisyntax-macro) (set! nf3069@define-struct-macro (lambda (nf3a3a@stx) (nf3157@syntax-violation '#f '"define-struct not supported" nf3a3a@stx))) (set! nf4b46@nf3069@define-struct-macro nf3069@define-struct-macro) (set! nf306b@define-record-type-macro (lambda (nf3a3c@x) (let ((nf3a3f@id '#f) (nf3a41@get-record-name '#f) (nf3a43@get-record-constructor-name '#f) (nf3a45@get-record-predicate-name '#f) (nf3a47@get-clause '#f) (nf3a49@foo-rtd-code '#f) (nf3a4b@parent-rtd-code '#f) (nf3a4d@parent-rcd-code '#f) (nf3a4f@foo-rcd-code '#f) (nf3a51@get-protocol-code '#f) (nf3a53@get-fields '#f) (nf3a55@get-mutator-indices '#f) (nf3a57@get-mutators '#f) (nf3a59@get-accessors '#f) (nf3a5b@enumerate '#f) (nf3a5d@do-define-record '#f) (nf3a5f@verify-clauses '#f)) (begin (set! nf3a3f@id (lambda (nf3c32@ctxt . nf3c34@str*) (nf315b@datum->syntax nf3c32@ctxt (string->symbol (apply string-append (map (lambda (nf3c36@x) (if (symbol? nf3c36@x) (symbol->string nf3c36@x) (if (string? nf3c36@x) nf3c36@x (assertion-violation 'define-record-type '"BUG")))) nf3c34@str*)))))) (set! nf3a41@get-record-name (lambda (nf3c20@spec) (let ((nf3c22@t nf3c20@spec)) (let ((nf3c24@ls/false (nf3077@syntax-dispatch nf3c22@t '(any any any)))) (if nf3c24@ls/false (apply (lambda (nf3c26@foo nf3c27@make-foo nf3c28@foo?) nf3c26@foo) nf3c24@ls/false) (let ((nf3c2c@t nf3c22@t)) (let ((nf3c2e@ls/false (nf3077@syntax-dispatch nf3c2c@t 'any))) (if nf3c2e@ls/false (apply (lambda (nf3c30@foo) nf3c30@foo) nf3c2e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c2c@t))))))))) (set! nf3a43@get-record-constructor-name (lambda (nf3c0c@spec) (let ((nf3c0e@t nf3c0c@spec)) (let ((nf3c10@ls/false (nf3077@syntax-dispatch nf3c0e@t '(any any any)))) (if nf3c10@ls/false (apply (lambda (nf3c12@foo nf3c13@make-foo nf3c14@foo?) nf3c13@make-foo) nf3c10@ls/false) (let ((nf3c18@t nf3c0e@t)) (let ((nf3c1a@ls/false (nf3077@syntax-dispatch nf3c18@t 'any))) (if (and nf3c1a@ls/false (apply (lambda (nf3c1c@foo) (nf2e70@id? nf3c1c@foo)) nf3c1a@ls/false)) (apply (lambda (nf3c1e@foo) (nf3a3f@id nf3c1e@foo '"make-" (nf2e84@stx->datum nf3c1e@foo))) nf3c1a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c18@t))))))))) (set! nf3a45@get-record-predicate-name (lambda (nf3bf8@spec) (let ((nf3bfa@t nf3bf8@spec)) (let ((nf3bfc@ls/false (nf3077@syntax-dispatch nf3bfa@t '(any any any)))) (if nf3bfc@ls/false (apply (lambda (nf3bfe@foo nf3bff@make-foo nf3c00@foo?) nf3c00@foo?) nf3bfc@ls/false) (let ((nf3c04@t nf3bfa@t)) (let ((nf3c06@ls/false (nf3077@syntax-dispatch nf3c04@t 'any))) (if (and nf3c06@ls/false (apply (lambda (nf3c08@foo) (nf2e70@id? nf3c08@foo)) nf3c06@ls/false)) (apply (lambda (nf3c0a@foo) (nf3a3f@id nf3c0a@foo (nf2e84@stx->datum nf3c0a@foo) '"?")) nf3c06@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c04@t))))))))) (set! nf3a47@get-clause (lambda (nf3be6@id nf3be7@ls) (let ((nf3bea@t nf3be7@ls)) (let ((nf3bec@ls/false (nf3077@syntax-dispatch nf3bea@t '()))) (if nf3bec@ls/false (apply (lambda () '#f) nf3bec@ls/false) (let ((nf3bee@t nf3bea@t)) (let ((nf3bf0@ls/false (nf3077@syntax-dispatch nf3bee@t '((any . any) . any)))) (if nf3bf0@ls/false (apply (lambda (nf3bf2@x nf3bf3@rest nf3bf4@ls) (if (nf2e76@free-id=? (nf302d@bless nf3be6@id) nf3bf2@x) (cons nf3bf2@x nf3bf3@rest) (nf3a47@get-clause nf3be6@id nf3bf4@ls))) nf3bf0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3bee@t))))))))) (set! nf3a49@foo-rtd-code (lambda (nf3b94@name nf3b95@clause* nf3b96@parent-rtd-code) (let ((nf3b9b@convert-field-spec* '#f)) (begin (set! nf3b9b@convert-field-spec* (lambda (nf3bcc@ls) (list->vector (map (lambda (nf3bce@x) (let ((nf3bd0@t nf3bce@x)) (let ((nf3bd2@ls/false (nf3077@syntax-dispatch nf3bd0@t '(#(scheme-id mutable) any . any)))) (if nf3bd2@ls/false (apply (lambda (nf3bd4@name nf3bd5@rest) (list 'mutable nf3bd4@name)) nf3bd2@ls/false) (let ((nf3bd8@t nf3bd0@t)) (let ((nf3bda@ls/false (nf3077@syntax-dispatch nf3bd8@t '(#(scheme-id immutable) any . any)))) (if nf3bda@ls/false (apply (lambda (nf3bdc@name nf3bdd@rest) (list 'immutable nf3bdc@name)) nf3bda@ls/false) (let ((nf3be0@t nf3bd8@t)) (let ((nf3be2@ls/false (nf3077@syntax-dispatch nf3be0@t 'any))) (if nf3be2@ls/false (apply (lambda (nf3be4@name) (list 'immutable nf3be4@name)) nf3be2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3be0@t))))))))))) nf3bcc@ls)))) (let ((nf3b9c@uid-code (let ((nf3ba4@t (nf3a47@get-clause 'nongenerative nf3b95@clause*))) (let ((nf3ba6@ls/false (nf3077@syntax-dispatch nf3ba4@t '(_)))) (if nf3ba6@ls/false (apply (lambda () (list 'quote (gensym))) nf3ba6@ls/false) (let ((nf3ba8@t nf3ba4@t)) (let ((nf3baa@ls/false (nf3077@syntax-dispatch nf3ba8@t '(_ any)))) (if nf3baa@ls/false (apply (lambda (nf3bac@uid) (list 'quote nf3bac@uid)) nf3baa@ls/false) (let ((nf3bae@t nf3ba8@t)) (let ((nf3bb0@ls/false (nf3077@syntax-dispatch nf3bae@t '_))) (if nf3bb0@ls/false (apply (lambda () '#f) nf3bb0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3bae@t))))))))))) (nf3b9d@sealed? (let ((nf3bb2@t (nf3a47@get-clause 'sealed nf3b95@clause*))) (let ((nf3bb4@ls/false (nf3077@syntax-dispatch nf3bb2@t '(_ #(atom #t))))) (if nf3bb4@ls/false (apply (lambda () '#t) nf3bb4@ls/false) (let ((nf3bb6@t nf3bb2@t)) (let ((nf3bb8@ls/false (nf3077@syntax-dispatch nf3bb6@t '_))) (if nf3bb8@ls/false (apply (lambda () '#f) nf3bb8@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3bb6@t)))))))) (nf3b9e@opaque? (let ((nf3bba@t (nf3a47@get-clause 'opaque nf3b95@clause*))) (let ((nf3bbc@ls/false (nf3077@syntax-dispatch nf3bba@t '(_ #(atom #t))))) (if nf3bbc@ls/false (apply (lambda () '#t) nf3bbc@ls/false) (let ((nf3bbe@t nf3bba@t)) (let ((nf3bc0@ls/false (nf3077@syntax-dispatch nf3bbe@t '_))) (if nf3bc0@ls/false (apply (lambda () '#f) nf3bc0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3bbe@t)))))))) (nf3b9f@fields (let ((nf3bc2@t (nf3a47@get-clause 'fields nf3b95@clause*))) (let ((nf3bc4@ls/false (nf3077@syntax-dispatch nf3bc2@t '(_ . each-any)))) (if nf3bc4@ls/false (apply (lambda (nf3bc6@field-spec*) (list 'quote (nf3b9b@convert-field-spec* nf3bc6@field-spec*))) nf3bc4@ls/false) (let ((nf3bc8@t nf3bc2@t)) (let ((nf3bca@ls/false (nf3077@syntax-dispatch nf3bc8@t '_))) (if nf3bca@ls/false (apply (lambda () ''#()) nf3bca@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3bc8@t))))))))) (nf302d@bless (list 'make-record-type-descriptor (list 'quote nf3b94@name) nf3b96@parent-rtd-code nf3b9c@uid-code nf3b9d@sealed? nf3b9e@opaque? nf3b9f@fields))))))) (set! nf3a4b@parent-rtd-code (lambda (nf3b7c@clause*) (let ((nf3b7e@t (nf3a47@get-clause 'parent nf3b7c@clause*))) (let ((nf3b80@ls/false (nf3077@syntax-dispatch nf3b7e@t '(_ any)))) (if nf3b80@ls/false (apply (lambda (nf3b82@name) (list 'record-type-descriptor nf3b82@name)) nf3b80@ls/false) (let ((nf3b84@t nf3b7e@t)) (let ((nf3b86@ls/false (nf3077@syntax-dispatch nf3b84@t '#(atom #f)))) (if nf3b86@ls/false (apply (lambda () (let ((nf3b88@t (nf3a47@get-clause 'parent-rtd nf3b7c@clause*))) (let ((nf3b8a@ls/false (nf3077@syntax-dispatch nf3b88@t '(_ any any)))) (if nf3b8a@ls/false (apply (lambda (nf3b8c@rtd nf3b8d@rcd) nf3b8c@rtd) nf3b8a@ls/false) (let ((nf3b90@t nf3b88@t)) (let ((nf3b92@ls/false (nf3077@syntax-dispatch nf3b90@t '#(atom #f)))) (if nf3b92@ls/false (apply (lambda () '#f) nf3b92@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b90@t)))))))) nf3b86@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b84@t))))))))) (set! nf3a4d@parent-rcd-code (lambda (nf3b64@clause*) (let ((nf3b66@t (nf3a47@get-clause 'parent nf3b64@clause*))) (let ((nf3b68@ls/false (nf3077@syntax-dispatch nf3b66@t '(_ any)))) (if nf3b68@ls/false (apply (lambda (nf3b6a@name) (list 'record-constructor-descriptor nf3b6a@name)) nf3b68@ls/false) (let ((nf3b6c@t nf3b66@t)) (let ((nf3b6e@ls/false (nf3077@syntax-dispatch nf3b6c@t '#(atom #f)))) (if nf3b6e@ls/false (apply (lambda () (let ((nf3b70@t (nf3a47@get-clause 'parent-rtd nf3b64@clause*))) (let ((nf3b72@ls/false (nf3077@syntax-dispatch nf3b70@t '(_ any any)))) (if nf3b72@ls/false (apply (lambda (nf3b74@rtd nf3b75@rcd) nf3b75@rcd) nf3b72@ls/false) (let ((nf3b78@t nf3b70@t)) (let ((nf3b7a@ls/false (nf3077@syntax-dispatch nf3b78@t '#(atom #f)))) (if nf3b7a@ls/false (apply (lambda () '#f) nf3b7a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b78@t)))))))) nf3b6e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b6c@t))))))))) (set! nf3a4f@foo-rcd-code (lambda (nf3b5c@clause* nf3b5d@foo-rtd nf3b5e@protocol nf3b5f@parent-rcd-code) (list 'make-record-constructor-descriptor nf3b5d@foo-rtd nf3b5f@parent-rcd-code nf3b5e@protocol))) (set! nf3a51@get-protocol-code (lambda (nf3b50@clause*) (let ((nf3b52@t (nf3a47@get-clause 'protocol nf3b50@clause*))) (let ((nf3b54@ls/false (nf3077@syntax-dispatch nf3b52@t '(_ any)))) (if nf3b54@ls/false (apply (lambda (nf3b56@expr) nf3b56@expr) nf3b54@ls/false) (let ((nf3b58@t nf3b52@t)) (let ((nf3b5a@ls/false (nf3077@syntax-dispatch nf3b58@t '_))) (if nf3b5a@ls/false (apply (lambda () '#f) nf3b5a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b58@t))))))))) (set! nf3a53@get-fields (lambda (nf3b3e@clause*) (let ((nf3b40@t nf3b3e@clause*)) (let ((nf3b42@ls/false (nf3077@syntax-dispatch nf3b40@t '()))) (if nf3b42@ls/false (apply (lambda () '()) nf3b42@ls/false) (let ((nf3b44@t nf3b40@t)) (let ((nf3b46@ls/false (nf3077@syntax-dispatch nf3b44@t '((#(scheme-id fields) . each-any) . _)))) (if nf3b46@ls/false (apply (lambda (nf3b48@f*) nf3b48@f*) nf3b46@ls/false) (let ((nf3b4a@t nf3b44@t)) (let ((nf3b4c@ls/false (nf3077@syntax-dispatch nf3b4a@t '(_ . any)))) (if nf3b4c@ls/false (apply (lambda (nf3b4e@rest) (nf3a53@get-fields nf3b4e@rest)) nf3b4c@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b4a@t)))))))))))) (set! nf3a55@get-mutator-indices (lambda (nf3b26@fields) (let nf3b2c@f ((nf3b28@fields nf3b26@fields) (nf3b29@i '0)) (let ((nf3b2e@t nf3b28@fields)) (let ((nf3b30@ls/false (nf3077@syntax-dispatch nf3b2e@t '()))) (if nf3b30@ls/false (apply (lambda () '()) nf3b30@ls/false) (let ((nf3b32@t nf3b2e@t)) (let ((nf3b34@ls/false (nf3077@syntax-dispatch nf3b32@t '((#(scheme-id mutable) . _) . any)))) (if nf3b34@ls/false (apply (lambda (nf3b36@rest) (cons nf3b29@i (nf3b2c@f nf3b36@rest (+ nf3b29@i '1)))) nf3b34@ls/false) (let ((nf3b38@t nf3b32@t)) (let ((nf3b3a@ls/false (nf3077@syntax-dispatch nf3b38@t '(_ . any)))) (if nf3b3a@ls/false (apply (lambda (nf3b3c@rest) (nf3b2c@f nf3b3c@rest (+ nf3b29@i '1))) nf3b3a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b38@t))))))))))))) (set! nf3a57@get-mutators (lambda (nf3afc@foo nf3afd@fields) (let ((nf3b01@gen-name '#f)) (begin (set! nf3b01@gen-name (lambda (nf3b24@x) (nf315b@datum->syntax nf3afc@foo (string->symbol (string-append (symbol->string (nf315d@syntax->datum nf3afc@foo)) '"-" (symbol->string (nf315d@syntax->datum nf3b24@x)) '"-set!"))))) (let nf3b04@f ((nf3b02@fields nf3afd@fields)) (let ((nf3b06@t nf3b02@fields)) (let ((nf3b08@ls/false (nf3077@syntax-dispatch nf3b06@t '()))) (if nf3b08@ls/false (apply (lambda () '()) nf3b08@ls/false) (let ((nf3b0a@t nf3b06@t)) (let ((nf3b0c@ls/false (nf3077@syntax-dispatch nf3b0a@t '((#(scheme-id mutable) any any any) . any)))) (if nf3b0c@ls/false (apply (lambda (nf3b0e@name nf3b0f@accessor nf3b10@mutator nf3b11@rest) (cons nf3b10@mutator (nf3b04@f nf3b11@rest))) nf3b0c@ls/false) (let ((nf3b16@t nf3b0a@t)) (let ((nf3b18@ls/false (nf3077@syntax-dispatch nf3b16@t '((#(scheme-id mutable) any) . any)))) (if nf3b18@ls/false (apply (lambda (nf3b1a@name nf3b1b@rest) (cons (nf3b01@gen-name nf3b1a@name) (nf3b04@f nf3b1b@rest))) nf3b18@ls/false) (let ((nf3b1e@t nf3b16@t)) (let ((nf3b20@ls/false (nf3077@syntax-dispatch nf3b1e@t '(_ . any)))) (if nf3b20@ls/false (apply (lambda (nf3b22@rest) (nf3b04@f nf3b22@rest)) nf3b20@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3b1e@t)))))))))))))))))) (set! nf3a59@get-accessors (lambda (nf3ab8@foo nf3ab9@fields) (let ((nf3abd@gen-name '#f)) (begin (set! nf3abd@gen-name (lambda (nf3afa@x) (nf315b@datum->syntax nf3ab8@foo (string->symbol (string-append (symbol->string (nf315d@syntax->datum nf3ab8@foo)) '"-" (symbol->string (nf315d@syntax->datum nf3afa@x))))))) (map (lambda (nf3abe@field) (let ((nf3ac0@t nf3abe@field)) (let ((nf3ac2@ls/false (nf3077@syntax-dispatch nf3ac0@t '(#(scheme-id mutable) any any any)))) (if (and nf3ac2@ls/false (apply (lambda (nf3ac4@name nf3ac5@accessor nf3ac6@mutator) (nf2e70@id? nf3ac5@accessor)) nf3ac2@ls/false)) (apply (lambda (nf3aca@name nf3acb@accessor nf3acc@mutator) nf3acb@accessor) nf3ac2@ls/false) (let ((nf3ad0@t nf3ac0@t)) (let ((nf3ad2@ls/false (nf3077@syntax-dispatch nf3ad0@t '(#(scheme-id immutable) any any)))) (if (and nf3ad2@ls/false (apply (lambda (nf3ad4@name nf3ad5@accessor) (nf2e70@id? nf3ad5@accessor)) nf3ad2@ls/false)) (apply (lambda (nf3ad8@name nf3ad9@accessor) nf3ad9@accessor) nf3ad2@ls/false) (let ((nf3adc@t nf3ad0@t)) (let ((nf3ade@ls/false (nf3077@syntax-dispatch nf3adc@t '(#(scheme-id mutable) any)))) (if (and nf3ade@ls/false (apply (lambda (nf3ae0@name) (nf2e70@id? nf3ae0@name)) nf3ade@ls/false)) (apply (lambda (nf3ae2@name) (nf3abd@gen-name nf3ae2@name)) nf3ade@ls/false) (let ((nf3ae4@t nf3adc@t)) (let ((nf3ae6@ls/false (nf3077@syntax-dispatch nf3ae4@t '(#(scheme-id immutable) any)))) (if (and nf3ae6@ls/false (apply (lambda (nf3ae8@name) (nf2e70@id? nf3ae8@name)) nf3ae6@ls/false)) (apply (lambda (nf3aea@name) (nf3abd@gen-name nf3aea@name)) nf3ae6@ls/false) (let ((nf3aec@t nf3ae4@t)) (let ((nf3aee@ls/false (nf3077@syntax-dispatch nf3aec@t 'any))) (if (and nf3aee@ls/false (apply (lambda (nf3af0@name) (nf2e70@id? nf3af0@name)) nf3aee@ls/false)) (apply (lambda (nf3af2@name) (nf3abd@gen-name nf3af2@name)) nf3aee@ls/false) (let ((nf3af4@t nf3aec@t)) (let ((nf3af6@ls/false (nf3077@syntax-dispatch nf3af4@t 'any))) (if nf3af6@ls/false (apply (lambda (nf3af8@others) (nf3157@syntax-violation '#f '"invalid field spec" nf3abe@field)) nf3af6@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3af4@t)))))))))))))))))))) nf3ab9@fields))))) (set! nf3a5b@enumerate (lambda (nf3ab0@ls) (let nf3ab6@f ((nf3ab2@ls nf3ab0@ls) (nf3ab3@i '0)) (if (null? nf3ab2@ls) '() (cons nf3ab3@i (nf3ab6@f (cdr nf3ab2@ls) (+ nf3ab3@i '1))))))) (set! nf3a5d@do-define-record (lambda (nf3a88@namespec nf3a89@clause*) (let ((nf3a8c@foo (nf3a41@get-record-name nf3a88@namespec))) (let ((nf3a8e@foo-rtd (gensym))) (let ((nf3a90@foo-rcd (gensym))) (let ((nf3a92@protocol (gensym))) (let ((nf3a94@make-foo (nf3a43@get-record-constructor-name nf3a88@namespec))) (let ((nf3a96@fields (nf3a53@get-fields nf3a89@clause*))) (let ((nf3a98@idx* (nf3a5b@enumerate nf3a96@fields))) (let ((nf3a9a@foo-x* (nf3a59@get-accessors nf3a8c@foo nf3a96@fields))) (let ((nf3a9c@set-foo-x!* (nf3a57@get-mutators nf3a8c@foo nf3a96@fields))) (let ((nf3a9e@set-foo-idx* (nf3a55@get-mutator-indices nf3a96@fields))) (let ((nf3aa0@foo? (nf3a45@get-record-predicate-name nf3a88@namespec))) (let ((nf3aa2@foo-rtd-code (nf3a49@foo-rtd-code nf3a8c@foo nf3a89@clause* (nf3a4b@parent-rtd-code nf3a89@clause*)))) (let ((nf3aa4@foo-rcd-code (nf3a4f@foo-rcd-code nf3a89@clause* nf3a8e@foo-rtd nf3a92@protocol (nf3a4d@parent-rcd-code nf3a89@clause*)))) (let ((nf3aa6@protocol-code (nf3a51@get-protocol-code nf3a89@clause*))) (nf302d@bless (cons 'begin (cons (list 'define nf3a8e@foo-rtd nf3aa2@foo-rtd-code) (cons (list 'define nf3a92@protocol nf3aa6@protocol-code) (cons (list 'define nf3a90@foo-rcd nf3aa4@foo-rcd-code) (cons (list 'define-syntax nf3a8c@foo (list 'list ''$rtd (list 'syntax nf3a8e@foo-rtd) (list 'syntax nf3a90@foo-rcd))) (cons (list 'define nf3aa0@foo? (list 'record-predicate nf3a8e@foo-rtd)) (cons (list 'define nf3a94@make-foo (list 'record-constructor nf3a90@foo-rcd)) (append (map (lambda (nf3aa8@foo-x nf3aa9@idx) (list 'define nf3aa8@foo-x (list 'record-accessor nf3a8e@foo-rtd nf3aa9@idx))) nf3a9a@foo-x* nf3a98@idx*) (map (lambda (nf3aac@set-foo-x! nf3aad@idx) (list 'define nf3aac@set-foo-x! (list 'record-mutator nf3a8e@foo-rtd nf3aad@idx))) nf3a9c@set-foo-x!* nf3a9e@set-foo-idx*)))))))))))))))))))))))))) (set! nf3a5f@verify-clauses (lambda (nf3a68@x nf3a69@cls*) (let ((nf3a6d@valid-kwds '#f) (nf3a6f@free-id-member? '#f)) (begin (set! nf3a6d@valid-kwds (map nf302d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! nf3a6f@free-id-member? (lambda (nf3a84@x nf3a85@ls) (and (pair? nf3a85@ls) (or (nf2e76@free-id=? nf3a84@x (car nf3a85@ls)) (nf3a6f@free-id-member? nf3a84@x (cdr nf3a85@ls)))))) (let nf3a74@f ((nf3a70@cls* nf3a69@cls*) (nf3a71@seen* '())) (if (not (null? nf3a70@cls*)) (let ((nf3a76@t (car nf3a70@cls*))) (let ((nf3a78@ls/false (nf3077@syntax-dispatch nf3a76@t '(any . any)))) (if nf3a78@ls/false (apply (lambda (nf3a7a@kwd nf3a7b@rest) (if (or (not (nf2e70@id? nf3a7a@kwd)) (not (nf3a6f@free-id-member? nf3a7a@kwd nf3a6d@valid-kwds))) (nf3157@syntax-violation '#f '"not a valid define-record-type keyword" nf3a7a@kwd) (if (nf2e7c@bound-id-member? nf3a7a@kwd nf3a71@seen*) (nf3157@syntax-violation '#f '"duplicate use of keyword " nf3a68@x nf3a7a@kwd) (nf3a74@f (cdr nf3a70@cls*) (cons nf3a7a@kwd nf3a71@seen*))))) nf3a78@ls/false) (let ((nf3a7e@t nf3a76@t)) (let ((nf3a80@ls/false (nf3077@syntax-dispatch nf3a7e@t 'any))) (if nf3a80@ls/false (apply (lambda (nf3a82@cls) (nf3157@syntax-violation '#f '"malformed define-record-type clause" nf3a82@cls)) nf3a80@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3a7e@t))))))) (void))))))) (let ((nf3a60@t nf3a3c@x)) (let ((nf3a62@ls/false (nf3077@syntax-dispatch nf3a60@t '(_ any . each-any)))) (if nf3a62@ls/false (apply (lambda (nf3a64@namespec nf3a65@clause*) (begin (nf3a5f@verify-clauses nf3a3c@x nf3a65@clause*) (nf3a5d@do-define-record nf3a64@namespec nf3a65@clause*))) nf3a62@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3a60@t)))))))) (set! nf4b47@nf306b@define-record-type-macro nf306b@define-record-type-macro) (set! nf306d@define-condition-type-macro (lambda (nf3c38@x) (let ((nf3c3b@mkname '#f)) (begin (set! nf3c3b@mkname (lambda (nf3c68@name nf3c69@suffix) (nf315b@datum->syntax nf3c68@name (string->symbol (string-append (symbol->string (nf315d@syntax->datum nf3c68@name)) nf3c69@suffix))))) (let ((nf3c3c@t nf3c38@x)) (let ((nf3c3e@ls/false (nf3077@syntax-dispatch nf3c3c@t '(any any any any any . #(each (any any)))))) (if (and nf3c3e@ls/false (apply (lambda (nf3c40@ctxt nf3c41@name nf3c42@super nf3c43@constructor nf3c44@predicate nf3c45@field* nf3c46@accessor*) (and (nf2e70@id? nf3c41@name) (nf2e70@id? nf3c42@super) (nf2e70@id? nf3c43@constructor) (nf2e70@id? nf3c44@predicate) (for-all nf2e70@id? nf3c45@field*) (for-all nf2e70@id? nf3c46@accessor*))) nf3c3e@ls/false)) (apply (lambda (nf3c4e@ctxt nf3c4f@name nf3c50@super nf3c51@constructor nf3c52@predicate nf3c53@field* nf3c54@accessor*) (let ((nf3c5c@aux-accessor* (map (lambda (nf3c5e@x) (gensym)) nf3c54@accessor*))) (nf302d@bless (cons 'begin (cons (cons 'define-record-type (cons (list nf3c4f@name nf3c51@constructor (gensym)) (cons (list 'parent nf3c50@super) (cons (cons 'fields (map (lambda (nf3c60@field nf3c61@aux) (list 'immutable nf3c60@field nf3c61@aux)) nf3c53@field* nf3c5c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define nf3c52@predicate (list 'condition-predicate (list 'record-type-descriptor nf3c4f@name))) (map (lambda (nf3c64@accessor nf3c65@aux) (list 'define nf3c64@accessor (list 'condition-accessor (list 'record-type-descriptor nf3c4f@name) nf3c65@aux))) nf3c54@accessor* nf3c5c@aux-accessor*))))))) nf3c3e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c3c@t)))))))) (set! nf4b48@nf306d@define-condition-type-macro nf306d@define-condition-type-macro) (set! nf306f@incorrect-usage-macro (lambda (nf3c6c@e) (nf3157@syntax-violation '#f '"incorrect usage of auxiliary keyword" nf3c6c@e))) (set! nf4b49@nf306f@incorrect-usage-macro nf306f@incorrect-usage-macro) (set! nf3071@parameterize-macro (lambda (nf3c6e@e) (let ((nf3c70@t nf3c6e@e)) (let ((nf3c72@ls/false (nf3077@syntax-dispatch nf3c70@t '(_ () any . each-any)))) (if nf3c72@ls/false (apply (lambda (nf3c74@b nf3c75@b*) (nf302d@bless (cons 'let (cons '() (cons nf3c74@b nf3c75@b*))))) nf3c72@ls/false) (let ((nf3c78@t nf3c70@t)) (let ((nf3c7a@ls/false (nf3077@syntax-dispatch nf3c78@t '(_ #(each (any any)) any . each-any)))) (if nf3c7a@ls/false (apply (lambda (nf3c7c@olhs* nf3c7d@orhs* nf3c7e@b nf3c7f@b*) (let ((nf3c84@lhs* (nf3145@generate-temporaries nf3c7c@olhs*)) (nf3c85@rhs* (nf3145@generate-temporaries nf3c7d@orhs*))) (nf302d@bless (cons (list 'lambda (append nf3c84@lhs* nf3c85@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (nf3c88@lhs nf3c89@rhs) (list 'let (list (list 't (list nf3c88@lhs))) (list nf3c88@lhs nf3c89@rhs) (cons 'set! (cons nf3c89@rhs '(t))))) nf3c84@lhs* nf3c85@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons nf3c7e@b nf3c7f@b*))) '(swap)))))) (append nf3c7c@olhs* nf3c7d@orhs*))))) nf3c7a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c78@t))))))))) (set! nf4b4a@nf3071@parameterize-macro nf3071@parameterize-macro) (set! nf3073@foreign-call-transformer (lambda (nf3c8c@e nf3c8d@r nf3c8e@mr) (let ((nf3c92@t nf3c8c@e)) (let ((nf3c94@ls/false (nf3077@syntax-dispatch nf3c92@t '(_ any . each-any)))) (if nf3c94@ls/false (apply (lambda (nf3c96@name nf3c97@arg*) (cons 'foreign-call (cons (nf3099@chi-expr nf3c96@name nf3c8d@r nf3c8e@mr) (nf3095@chi-expr* nf3c97@arg* nf3c8d@r nf3c8e@mr)))) nf3c94@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3c92@t)))))) (set! nf4b4b@nf3073@foreign-call-transformer nf3073@foreign-call-transformer) (set! nf3075@convert-pattern (lambda (nf3c9a@pattern nf3c9b@keys) (let ((nf3c9f@cvt* '#f) (nf3ca1@cvt '#f)) (begin (set! nf3c9f@cvt* (lambda (nf3d3e@p* nf3d3f@n nf3d40@ids) (if (null? nf3d3e@p*) (values '() nf3d40@ids) (call-with-values (lambda () (nf3c9f@cvt* (cdr nf3d3e@p*) nf3d3f@n nf3d40@ids)) (lambda (nf3d48@nf3d45 nf3d49@nf3d47) (let ((nf3d4c@ids nf3d49@nf3d47) (nf3d4d@y nf3d48@nf3d45)) (call-with-values (lambda () (nf3ca1@cvt (car nf3d3e@p*) nf3d3f@n nf3d4c@ids)) (lambda (nf3d54@nf3d51 nf3d55@nf3d53) (let ((nf3d58@ids nf3d55@nf3d53) (nf3d59@x nf3d54@nf3d51)) (values (cons nf3d59@x nf3d4d@y) nf3d58@ids)))))))))) (set! nf3ca1@cvt (lambda (nf3ca2@p nf3ca3@n nf3ca4@ids) (let ((nf3ca8@t nf3ca2@p)) (let ((nf3caa@ls/false (nf3077@syntax-dispatch nf3ca8@t 'any))) (if (and nf3caa@ls/false (apply (lambda (nf3cac@id) (nf2e70@id? nf3cac@id)) nf3caa@ls/false)) (apply (lambda (nf3cae@id) (if (nf2e7c@bound-id-member? nf3ca2@p nf3c9b@keys) (values (vector 'free-id nf3ca2@p) nf3ca4@ids) (if (nf2e76@free-id=? nf3ca2@p (nf2fff@scheme-stx '_)) (values '_ nf3ca4@ids) (values 'any (cons (cons nf3ca2@p nf3ca3@n) nf3ca4@ids))))) nf3caa@ls/false) (let ((nf3cb0@t nf3ca8@t)) (let ((nf3cb2@ls/false (nf3077@syntax-dispatch nf3cb0@t '(any any)))) (if (and nf3cb2@ls/false (apply (lambda (nf3cb4@p nf3cb5@dots) (nf3079@ellipsis? nf3cb5@dots)) nf3cb2@ls/false)) (apply (lambda (nf3cb8@p nf3cb9@dots) (call-with-values (lambda () (nf3ca1@cvt nf3cb8@p (+ nf3ca3@n '1) nf3ca4@ids)) (lambda (nf3cc0@nf3cbd nf3cc1@nf3cbf) (let ((nf3cc4@ids nf3cc1@nf3cbf) (nf3cc5@p nf3cc0@nf3cbd)) (values (if (eq? nf3cc5@p 'any) 'each-any (vector 'each nf3cc5@p)) nf3cc4@ids))))) nf3cb2@ls/false) (let ((nf3cc8@t nf3cb0@t)) (let ((nf3cca@ls/false (nf3077@syntax-dispatch nf3cc8@t '(any any . #(each+ any () any))))) (if (and nf3cca@ls/false (apply (lambda (nf3ccc@x nf3ccd@dots nf3cce@ys nf3ccf@z) (nf3079@ellipsis? nf3ccd@dots)) nf3cca@ls/false)) (apply (lambda (nf3cd4@x nf3cd5@dots nf3cd6@ys nf3cd7@z) (call-with-values (lambda () (nf3ca1@cvt nf3cd7@z nf3ca3@n nf3ca4@ids)) (lambda (nf3ce0@nf3cdd nf3ce1@nf3cdf) (let ((nf3ce4@ids nf3ce1@nf3cdf) (nf3ce5@z nf3ce0@nf3cdd)) (call-with-values (lambda () (nf3c9f@cvt* nf3cd6@ys nf3ca3@n nf3ce4@ids)) (lambda (nf3cec@nf3ce9 nf3ced@nf3ceb) (let ((nf3cf0@ids nf3ced@nf3ceb) (nf3cf1@ys nf3cec@nf3ce9)) (call-with-values (lambda () (nf3ca1@cvt nf3cd4@x (+ nf3ca3@n '1) nf3cf0@ids)) (lambda (nf3cf8@nf3cf5 nf3cf9@nf3cf7) (let ((nf3cfc@ids nf3cf9@nf3cf7) (nf3cfd@x nf3cf8@nf3cf5)) (values (vector 'each+ nf3cfd@x (reverse nf3cf1@ys) nf3ce5@z) nf3cfc@ids))))))))))) nf3cca@ls/false) (let ((nf3d00@t nf3cc8@t)) (let ((nf3d02@ls/false (nf3077@syntax-dispatch nf3d00@t '(any . any)))) (if nf3d02@ls/false (apply (lambda (nf3d04@x nf3d05@y) (call-with-values (lambda () (nf3ca1@cvt nf3d05@y nf3ca3@n nf3ca4@ids)) (lambda (nf3d0c@nf3d09 nf3d0d@nf3d0b) (let ((nf3d10@ids nf3d0d@nf3d0b) (nf3d11@y nf3d0c@nf3d09)) (call-with-values (lambda () (nf3ca1@cvt nf3d04@x nf3ca3@n nf3d10@ids)) (lambda (nf3d18@nf3d15 nf3d19@nf3d17) (let ((nf3d1c@ids nf3d19@nf3d17) (nf3d1d@x nf3d18@nf3d15)) (values (cons nf3d1d@x nf3d11@y) nf3d1c@ids)))))))) nf3d02@ls/false) (let ((nf3d20@t nf3d00@t)) (let ((nf3d22@ls/false (nf3077@syntax-dispatch nf3d20@t '()))) (if nf3d22@ls/false (apply (lambda () (values '() nf3ca4@ids)) nf3d22@ls/false) (let ((nf3d24@t nf3d20@t)) (let ((nf3d26@ls/false (nf3077@syntax-dispatch nf3d24@t '#(vector each-any)))) (if (and nf3d26@ls/false (apply (lambda (nf3d28@p) (not (nf2e3c@stx? nf3d28@p))) nf3d26@ls/false)) (apply (lambda (nf3d2a@p) (call-with-values (lambda () (nf3ca1@cvt nf3d2a@p nf3ca3@n nf3ca4@ids)) (lambda (nf3d30@nf3d2d nf3d31@nf3d2f) (let ((nf3d34@ids nf3d31@nf3d2f) (nf3d35@p nf3d30@nf3d2d)) (values (vector 'vector nf3d35@p) nf3d34@ids))))) nf3d26@ls/false) (let ((nf3d38@t nf3d24@t)) (let ((nf3d3a@ls/false (nf3077@syntax-dispatch nf3d38@t 'any))) (if nf3d3a@ls/false (apply (lambda (nf3d3c@datum) (values (vector 'atom (nf2e84@stx->datum nf3d3c@datum)) nf3ca4@ids)) nf3d3a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3d38@t)))))))))))))))))))))))) (nf3ca1@cvt nf3c9a@pattern '0 '()))))) (set! nf4b4c@nf3075@convert-pattern nf3075@convert-pattern) (set! nf3077@syntax-dispatch (let ((nf3d5d@stx^ '#f) (nf3d5f@match-each '#f) (nf3d61@match-each+ '#f) (nf3d63@match-each-any '#f) (nf3d65@match-empty '#f) (nf3d67@combine '#f) (nf3d69@match* '#f) (nf3d6b@match '#f)) (begin (set! nf3d5d@stx^ (lambda (nf3e38@e nf3e39@m* nf3e3a@s* nf3e3b@ae*) (if (and (null? nf3e39@m*) (null? nf3e3a@s*) (null? nf3e3b@ae*)) nf3e38@e (nf2e58@mkstx nf3e38@e nf3e39@m* nf3e3a@s* nf3e3b@ae*)))) (set! nf3d5f@match-each (lambda (nf3e18@e nf3e19@p nf3e1a@m* nf3e1b@s* nf3e1c@ae*) (if (pair? nf3e18@e) (let ((nf3e22@first (nf3d6b@match (car nf3e18@e) nf3e19@p nf3e1a@m* nf3e1b@s* nf3e1c@ae* '()))) (and nf3e22@first (let ((nf3e24@rest (nf3d5f@match-each (cdr nf3e18@e) nf3e19@p nf3e1a@m* nf3e1b@s* nf3e1c@ae*))) (and nf3e24@rest (cons nf3e22@first nf3e24@rest))))) (if (null? nf3e18@e) '() (if (nf2e3c@stx? nf3e18@e) (and (not (nf2df6@top-marked? nf3e1a@m*)) (call-with-values (lambda () (join-wraps nf3e1a@m* nf3e1b@s* nf3e1c@ae* nf3e18@e)) (lambda (nf3e2c@nf3e27 nf3e2d@nf3e29 nf3e2e@nf3e2b) (let ((nf3e32@ae* nf3e2e@nf3e2b) (nf3e33@s* nf3e2d@nf3e29) (nf3e34@m* nf3e2c@nf3e27)) (nf3d5f@match-each (nf2e3e@stx-expr nf3e18@e) nf3e19@p nf3e34@m* nf3e33@s* nf3e32@ae*))))) (if (nf29af@nf2883@annotation? nf3e18@e) (nf3d5f@match-each (nf29b1@nf2887@annotation-expression nf3e18@e) nf3e19@p nf3e1a@m* nf3e1b@s* nf3e1c@ae*) '#f)))))) (set! nf3d61@match-each+ (lambda (nf3dd8@e nf3dd9@x-pat nf3dda@y-pat nf3ddb@z-pat nf3ddc@m* nf3ddd@s* nf3dde@ae* nf3ddf@r) (let nf3df0@f ((nf3de8@e nf3dd8@e) (nf3de9@m* nf3ddc@m*) (nf3dea@s* nf3ddd@s*) (nf3deb@ae* nf3dde@ae*)) (if (pair? nf3de8@e) (call-with-values (lambda () (nf3df0@f (cdr nf3de8@e) nf3de9@m* nf3dea@s* nf3deb@ae*)) (lambda (nf3df8@nf3df3 nf3df9@nf3df5 nf3dfa@nf3df7) (let ((nf3dfe@r nf3dfa@nf3df7) (nf3dff@y-pat nf3df9@nf3df5) (nf3e00@xr* nf3df8@nf3df3)) (if nf3dfe@r (if (null? nf3dff@y-pat) (let ((nf3e04@xr (nf3d6b@match (car nf3de8@e) nf3dd9@x-pat nf3de9@m* nf3dea@s* nf3deb@ae* '()))) (if nf3e04@xr (values (cons nf3e04@xr nf3e00@xr*) nf3dff@y-pat nf3dfe@r) (values '#f '#f '#f))) (values '() (cdr nf3dff@y-pat) (nf3d6b@match (car nf3de8@e) (car nf3dff@y-pat) nf3de9@m* nf3dea@s* nf3deb@ae* nf3dfe@r))) (values '#f '#f '#f))))) (if (nf2e3c@stx? nf3de8@e) (if (nf2df6@top-marked? nf3de9@m*) (values '() nf3dda@y-pat (nf3d6b@match nf3de8@e nf3ddb@z-pat nf3de9@m* nf3dea@s* nf3deb@ae* nf3ddf@r)) (call-with-values (lambda () (join-wraps nf3de9@m* nf3dea@s* nf3deb@ae* nf3de8@e)) (lambda (nf3e0c@nf3e07 nf3e0d@nf3e09 nf3e0e@nf3e0b) (let ((nf3e12@ae* nf3e0e@nf3e0b) (nf3e13@s* nf3e0d@nf3e09) (nf3e14@m* nf3e0c@nf3e07)) (nf3df0@f (nf2e3e@stx-expr nf3de8@e) nf3e14@m* nf3e13@s* nf3e12@ae*))))) (if (nf29af@nf2883@annotation? nf3de8@e) (nf3df0@f (nf29b1@nf2887@annotation-expression nf3de8@e) nf3de9@m* nf3dea@s* nf3deb@ae*) (values '() nf3dda@y-pat (nf3d6b@match nf3de8@e nf3ddb@z-pat nf3de9@m* nf3dea@s* nf3deb@ae* nf3ddf@r)))))))) (set! nf3d63@match-each-any (lambda (nf3dbc@e nf3dbd@m* nf3dbe@s* nf3dbf@ae*) (if (pair? nf3dbc@e) (let ((nf3dc4@l (nf3d63@match-each-any (cdr nf3dbc@e) nf3dbd@m* nf3dbe@s* nf3dbf@ae*))) (and nf3dc4@l (cons (nf3d5d@stx^ (car nf3dbc@e) nf3dbd@m* nf3dbe@s* nf3dbf@ae*) nf3dc4@l))) (if (null? nf3dbc@e) '() (if (nf2e3c@stx? nf3dbc@e) (and (not (nf2df6@top-marked? nf3dbd@m*)) (call-with-values (lambda () (join-wraps nf3dbd@m* nf3dbe@s* nf3dbf@ae* nf3dbc@e)) (lambda (nf3dcc@nf3dc7 nf3dcd@nf3dc9 nf3dce@nf3dcb) (let ((nf3dd2@ae* nf3dce@nf3dcb) (nf3dd3@s* nf3dcd@nf3dc9) (nf3dd4@m* nf3dcc@nf3dc7)) (nf3d63@match-each-any (nf2e3e@stx-expr nf3dbc@e) nf3dd4@m* nf3dd3@s* nf3dd2@ae*))))) (if (nf29af@nf2883@annotation? nf3dbc@e) (nf3d63@match-each-any (nf29b1@nf2887@annotation-expression nf3dbc@e) nf3dbd@m* nf3dbe@s* nf3dbf@ae*) '#f)))))) (set! nf3d65@match-empty (lambda (nf3db6@p nf3db7@r) (if (null? nf3db6@p) nf3db7@r (if (eq? nf3db6@p '_) nf3db7@r (if (eq? nf3db6@p 'any) (cons '() nf3db7@r) (if (pair? nf3db6@p) (nf3d65@match-empty (car nf3db6@p) (nf3d65@match-empty (cdr nf3db6@p) nf3db7@r)) (if (eq? nf3db6@p 'each-any) (cons '() nf3db7@r) (let ((nf3dba@t (vector-ref nf3db6@p '0))) (if (memv nf3dba@t '(each)) (nf3d65@match-empty (vector-ref nf3db6@p '1) nf3db7@r) (if (memv nf3dba@t '(each+)) (nf3d65@match-empty (vector-ref nf3db6@p '1) (nf3d65@match-empty (reverse (vector-ref nf3db6@p '2)) (nf3d65@match-empty (vector-ref nf3db6@p '3) nf3db7@r))) (if (memv nf3dba@t '(free-id atom)) nf3db7@r (if (memv nf3dba@t '(scheme-id atom)) nf3db7@r (if (memv nf3dba@t '(vector)) (nf3d65@match-empty (vector-ref nf3db6@p '1) nf3db7@r) (assertion-violation 'syntax-dispatch '"invalid pattern" nf3db6@p)))))))))))))) (set! nf3d67@combine (lambda (nf3db2@r* nf3db3@r) (if (null? (car nf3db2@r*)) nf3db3@r (cons (map car nf3db2@r*) (nf3d67@combine (map cdr nf3db2@r*) nf3db3@r))))) (set! nf3d69@match* (lambda (nf3d8e@e nf3d8f@p nf3d90@m* nf3d91@s* nf3d92@ae* nf3d93@r) (if (null? nf3d8f@p) (and (null? nf3d8e@e) nf3d93@r) (if (pair? nf3d8f@p) (and (pair? nf3d8e@e) (nf3d6b@match (car nf3d8e@e) (car nf3d8f@p) nf3d90@m* nf3d91@s* nf3d92@ae* (nf3d6b@match (cdr nf3d8e@e) (cdr nf3d8f@p) nf3d90@m* nf3d91@s* nf3d92@ae* nf3d93@r))) (if (eq? nf3d8f@p 'each-any) (let ((nf3d9a@l (nf3d63@match-each-any nf3d8e@e nf3d90@m* nf3d91@s* nf3d92@ae*))) (and nf3d9a@l (cons nf3d9a@l nf3d93@r))) (let ((nf3d9c@t (vector-ref nf3d8f@p '0))) (if (memv nf3d9c@t '(each)) (if (null? nf3d8e@e) (nf3d65@match-empty (vector-ref nf3d8f@p '1) nf3d93@r) (let ((nf3d9e@r* (nf3d5f@match-each nf3d8e@e (vector-ref nf3d8f@p '1) nf3d90@m* nf3d91@s* nf3d92@ae*))) (and nf3d9e@r* (nf3d67@combine nf3d9e@r* nf3d93@r)))) (if (memv nf3d9c@t '(free-id)) (and (symbol? nf3d8e@e) (nf2df6@top-marked? nf3d90@m*) (nf2e76@free-id=? (nf3d5d@stx^ nf3d8e@e nf3d90@m* nf3d91@s* nf3d92@ae*) (vector-ref nf3d8f@p '1)) nf3d93@r) (if (memv nf3d9c@t '(scheme-id)) (and (symbol? nf3d8e@e) (nf2df6@top-marked? nf3d90@m*) (nf2e76@free-id=? (nf3d5d@stx^ nf3d8e@e nf3d90@m* nf3d91@s* nf3d92@ae*) (nf2fff@scheme-stx (vector-ref nf3d8f@p '1))) nf3d93@r) (if (memv nf3d9c@t '(each+)) (call-with-values (lambda () (nf3d61@match-each+ nf3d8e@e (vector-ref nf3d8f@p '1) (vector-ref nf3d8f@p '2) (vector-ref nf3d8f@p '3) nf3d90@m* nf3d91@s* nf3d92@ae* nf3d93@r)) (lambda (nf3da6@nf3da1 nf3da7@nf3da3 nf3da8@nf3da5) (let ((nf3dac@r nf3da8@nf3da5) (nf3dad@y-pat nf3da7@nf3da3) (nf3dae@xr* nf3da6@nf3da1)) (and nf3dac@r (null? nf3dad@y-pat) (if (null? nf3dae@xr*) (nf3d65@match-empty (vector-ref nf3d8f@p '1) nf3dac@r) (nf3d67@combine nf3dae@xr* nf3dac@r)))))) (if (memv nf3d9c@t '(atom)) (and (fast-equal? (vector-ref nf3d8f@p '1) (nf2e82@strip nf3d8e@e nf3d90@m*)) nf3d93@r) (if (memv nf3d9c@t '(vector)) (and (vector? nf3d8e@e) (nf3d6b@match (vector->list nf3d8e@e) (vector-ref nf3d8f@p '1) nf3d90@m* nf3d91@s* nf3d92@ae* nf3d93@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" nf3d8f@p))))))))))))) (set! nf3d6b@match (lambda (nf3d70@e nf3d71@p nf3d72@m* nf3d73@s* nf3d74@ae* nf3d75@r) (if (not nf3d75@r) '#f (if (eq? nf3d71@p '_) nf3d75@r (if (eq? nf3d71@p 'any) (cons (nf3d5d@stx^ nf3d70@e nf3d72@m* nf3d73@s* nf3d74@ae*) nf3d75@r) (if (nf2e3c@stx? nf3d70@e) (and (not (nf2df6@top-marked? nf3d72@m*)) (call-with-values (lambda () (join-wraps nf3d72@m* nf3d73@s* nf3d74@ae* nf3d70@e)) (lambda (nf3d82@nf3d7d nf3d83@nf3d7f nf3d84@nf3d81) (let ((nf3d88@ae* nf3d84@nf3d81) (nf3d89@s* nf3d83@nf3d7f) (nf3d8a@m* nf3d82@nf3d7d)) (nf3d6b@match (nf2e3e@stx-expr nf3d70@e) nf3d71@p nf3d8a@m* nf3d89@s* nf3d88@ae* nf3d75@r))))) (if (nf29af@nf2883@annotation? nf3d70@e) (nf3d6b@match (nf29b1@nf2887@annotation-expression nf3d70@e) nf3d71@p nf3d72@m* nf3d73@s* nf3d74@ae* nf3d75@r) (nf3d69@match* nf3d70@e nf3d71@p nf3d72@m* nf3d73@s* nf3d74@ae* nf3d75@r)))))))) (lambda (nf3d6c@e nf3d6d@p) (nf3d6b@match nf3d6c@e nf3d6d@p '() '() '() '()))))) (set! nf4b4d@nf3077@syntax-dispatch nf3077@syntax-dispatch) (set! nf3079@ellipsis? (lambda (nf3e40@x) (and (nf2e70@id? nf3e40@x) (nf2e76@free-id=? nf3e40@x (nf2fff@scheme-stx '...))))) (set! nf4b4e@nf3079@ellipsis? nf3079@ellipsis?) (set! nf307b@underscore? (lambda (nf3e42@x) (and (nf2e70@id? nf3e42@x) (nf2e76@free-id=? nf3e42@x (nf2fff@scheme-stx '_))))) (set! nf4b4f@nf307b@underscore? nf307b@underscore?) (set! nf307d@verify-literals (lambda (nf3e44@lits nf3e45@expr) (for-each (lambda (nf3e48@x) (if (or (not (nf2e70@id? nf3e48@x)) (nf3079@ellipsis? nf3e48@x) (nf307b@underscore? nf3e48@x)) (nf3157@syntax-violation '#f '"invalid literal" nf3e45@expr nf3e48@x) (void))) nf3e44@lits))) (set! nf4b50@nf307d@verify-literals nf307d@verify-literals) (set! nf307f@syntax-case-transformer (let ((nf3e4b@build-dispatch-call '#f) (nf3e4d@invalid-ids-error '#f) (nf3e4f@gen-clause '#f) (nf3e51@gen-syntax-case '#f)) (begin (set! nf3e4b@build-dispatch-call (lambda (nf3ebc@pvars nf3ebd@expr nf3ebe@y nf3ebf@r nf3ec0@mr) (let ((nf3ec6@ids (map car nf3ebc@pvars)) (nf3ec7@levels (map cdr nf3ebc@pvars))) (let ((nf3eca@labels (map nf2dfc@gen-label nf3ec6@ids)) (nf3ecb@new-vars (map nf2df8@gen-lexical nf3ec6@ids))) (let ((nf3ece@body (nf3099@chi-expr (nf2e5c@add-subst (nf2e30@make-full-rib nf3ec6@ids nf3eca@labels) nf3ebd@expr) (append (map (lambda (nf3ed0@label nf3ed1@var nf3ed2@level) (cons nf3ed0@label (nf2e8a@make-binding 'syntax (cons nf3ed1@var nf3ed2@level)))) nf3eca@labels nf3ecb@new-vars (map cdr nf3ebc@pvars)) nf3ebf@r) nf3ec0@mr))) (list '(primitive apply) (nf2dd3@nf2cff@build-lambda '#f nf3ecb@new-vars nf3ece@body) nf3ebe@y)))))) (set! nf3e4d@invalid-ids-error (lambda (nf3eb0@id* nf3eb1@e nf3eb2@class) (let nf3eba@find ((nf3eb6@id* nf3eb0@id*) (nf3eb7@ok* '())) (if (null? nf3eb6@id*) (nf3157@syntax-violation '#f '"invalid syntax" nf3eb1@e) (if (nf2e70@id? (car nf3eb6@id*)) (if (nf2e7c@bound-id-member? (car nf3eb6@id*) nf3eb7@ok*) (nf3153@syntax-error (car nf3eb6@id*) '"duplicate " nf3eb2@class) (nf3eba@find (cdr nf3eb6@id*) (cons (car nf3eb6@id*) nf3eb7@ok*))) (nf3153@syntax-error (car nf3eb6@id*) '"invalid " nf3eb2@class)))))) (set! nf3e4f@gen-clause (lambda (nf3e88@x nf3e89@keys nf3e8a@clauses nf3e8b@r nf3e8c@mr nf3e8d@pat nf3e8e@fender nf3e8f@expr) (call-with-values (lambda () (nf3075@convert-pattern nf3e8d@pat nf3e89@keys)) (lambda (nf3e9c@nf3e99 nf3e9d@nf3e9b) (let ((nf3ea0@pvars nf3e9d@nf3e9b) (nf3ea1@p nf3e9c@nf3e99)) (if (not (nf2e7a@distinct-bound-ids? (map car nf3ea0@pvars))) (nf3e4d@invalid-ids-error (map car nf3ea0@pvars) nf3e8d@pat '"pattern variable") (if (not (for-all (lambda (nf3ea4@x) (not (nf3079@ellipsis? (car nf3ea4@x)))) nf3ea0@pvars)) (nf3157@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" nf3e8d@pat) (let ((nf3ea6@y (nf2df8@gen-lexical 'tmp))) (let ((nf3ea8@test (if (eq? nf3e8e@fender '#t) nf3ea6@y (let ((nf3eaa@call (nf3e4b@build-dispatch-call nf3ea0@pvars nf3e8e@fender nf3ea6@y nf3e8b@r nf3e8c@mr))) (list 'if nf3ea6@y nf3eaa@call (list 'quote '#f)))))) (let ((nf3eac@conseq (nf3e4b@build-dispatch-call nf3ea0@pvars nf3e8f@expr nf3ea6@y nf3e8b@r nf3e8c@mr))) (let ((nf3eae@altern (nf3e51@gen-syntax-case nf3e88@x nf3e89@keys nf3e8a@clauses nf3e8b@r nf3e8c@mr))) (list (nf2dd3@nf2cff@build-lambda '#f (list nf3ea6@y) (list 'if nf3ea8@test nf3eac@conseq nf3eae@altern)) (list '(primitive syntax-dispatch) nf3e88@x (list 'quote nf3ea1@p)))))))))))))) (set! nf3e51@gen-syntax-case (lambda (nf3e66@x nf3e67@keys nf3e68@clauses nf3e69@r nf3e6a@mr) (if (null? nf3e68@clauses) (list '(primitive syntax-error) nf3e66@x) (let ((nf3e70@t (car nf3e68@clauses))) (let ((nf3e72@ls/false (nf3077@syntax-dispatch nf3e70@t '(any any)))) (if nf3e72@ls/false (apply (lambda (nf3e74@pat nf3e75@expr) (if (and (nf2e70@id? nf3e74@pat) (not (nf2e7c@bound-id-member? nf3e74@pat nf3e67@keys)) (not (nf3079@ellipsis? nf3e74@pat))) (if (nf2e76@free-id=? nf3e74@pat (nf2fff@scheme-stx '_)) (nf3099@chi-expr nf3e75@expr nf3e69@r nf3e6a@mr) (let ((nf3e78@lab (nf2dfc@gen-label nf3e74@pat)) (nf3e79@lex (nf2df8@gen-lexical nf3e74@pat))) (let ((nf3e7c@body (nf3099@chi-expr (nf2e5c@add-subst (nf2e30@make-full-rib (list nf3e74@pat) (list nf3e78@lab)) nf3e75@expr) (cons (cons nf3e78@lab (nf2e8a@make-binding 'syntax (cons nf3e79@lex '0))) nf3e69@r) nf3e6a@mr))) (list (nf2dd3@nf2cff@build-lambda '#f (list nf3e79@lex) nf3e7c@body) nf3e66@x)))) (nf3e4f@gen-clause nf3e66@x nf3e67@keys (cdr nf3e68@clauses) nf3e69@r nf3e6a@mr nf3e74@pat '#t nf3e75@expr))) nf3e72@ls/false) (let ((nf3e7e@t nf3e70@t)) (let ((nf3e80@ls/false (nf3077@syntax-dispatch nf3e7e@t '(any any any)))) (if nf3e80@ls/false (apply (lambda (nf3e82@pat nf3e83@fender nf3e84@expr) (nf3e4f@gen-clause nf3e66@x nf3e67@keys (cdr nf3e68@clauses) nf3e69@r nf3e6a@mr nf3e82@pat nf3e83@fender nf3e84@expr)) nf3e80@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3e7e@t)))))))))) (lambda (nf3e52@e nf3e53@r nf3e54@mr) (let ((nf3e58@t nf3e52@e)) (let ((nf3e5a@ls/false (nf3077@syntax-dispatch nf3e58@t '(_ any each-any . each-any)))) (if nf3e5a@ls/false (apply (lambda (nf3e5c@expr nf3e5d@keys nf3e5e@clauses) (begin (nf307d@verify-literals nf3e5d@keys nf3e52@e) (let ((nf3e62@x (nf2df8@gen-lexical 'tmp))) (let ((nf3e64@body (nf3e51@gen-syntax-case nf3e62@x nf3e5d@keys nf3e5e@clauses nf3e53@r nf3e54@mr))) (list (nf2dd3@nf2cff@build-lambda '#f (list nf3e62@x) nf3e64@body) (nf3099@chi-expr nf3e5c@expr nf3e53@r nf3e54@mr)))))) nf3e5a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3e58@t)))))))) (set! nf4b51@nf307f@syntax-case-transformer nf307f@syntax-case-transformer) (set! nf3081@ellipsis-map (lambda (nf3ed6@proc nf3ed7@ls . nf3eda@ls*) (let ((nf3edd@who '#f)) (begin (set! nf3edd@who '...) (begin (if (not (list? nf3ed7@ls)) (assertion-violation nf3edd@who '"not a list" nf3ed7@ls) (void)) (if (not (null? nf3eda@ls*)) (let ((nf3ede@n (length nf3ed7@ls))) (for-each (lambda (nf3ee0@x) (begin (if (not (list? nf3ee0@x)) (assertion-violation nf3edd@who '"not a list" nf3ee0@x) (void)) (if (not (= (length nf3ee0@x) nf3ede@n)) (assertion-violation nf3edd@who '"length mismatch" nf3ed7@ls nf3ee0@x) (void)))) nf3eda@ls*)) (void)) (apply map nf3ed6@proc nf3ed7@ls nf3eda@ls*)))))) (set! nf4b52@nf3081@ellipsis-map nf3081@ellipsis-map) (set! nf3083@syntax-transformer (let ((nf3ee3@gen-syntax '#f) (nf3ee5@gen-ref '#f) (nf3ee7@gen-append '#f) (nf3ee9@gen-mappend '#f) (nf3eeb@gen-map '#f) (nf3eed@gen-cons '#f) (nf3eef@gen-vector '#f) (nf3ef1@regen '#f)) (begin (set! nf3ee3@gen-syntax (lambda (nf3f5a@src nf3f5b@e nf3f5c@r nf3f5d@maps nf3f5e@ellipsis? nf3f5f@vec?) (let ((nf3f66@t nf3f5b@e)) (let ((nf3f68@ls/false (nf3077@syntax-dispatch nf3f66@t 'any))) (if (and nf3f68@ls/false (apply (lambda (nf3f6a@dots) (nf3f5e@ellipsis? nf3f6a@dots)) nf3f68@ls/false)) (apply (lambda (nf3f6c@dots) (nf3157@syntax-violation '#f '"misplaced ellipsis in syntax form" nf3f5a@src)) nf3f68@ls/false) (let ((nf3f6e@t nf3f66@t)) (let ((nf3f70@ls/false (nf3077@syntax-dispatch nf3f6e@t 'any))) (if (and nf3f70@ls/false (apply (lambda (nf3f72@id) (nf2e70@id? nf3f72@id)) nf3f70@ls/false)) (apply (lambda (nf3f74@id) (let ((nf3f76@label (nf2e86@id->label nf3f5b@e))) (let ((nf3f78@b (nf2e88@label->binding nf3f76@label nf3f5c@r))) (if (eq? (nf2e8c@binding-type nf3f78@b) 'syntax) (call-with-values (lambda () (let ((nf3f7e@var.lev (nf2e8e@binding-value nf3f78@b))) (nf3ee5@gen-ref nf3f5a@src (car nf3f7e@var.lev) (cdr nf3f7e@var.lev) nf3f5d@maps))) (lambda (nf3f80@nf3f7b nf3f81@nf3f7d) (let ((nf3f84@maps nf3f81@nf3f7d) (nf3f85@var nf3f80@nf3f7b)) (values (list 'ref nf3f85@var) nf3f84@maps)))) (values (list 'quote nf3f5b@e) nf3f5d@maps))))) nf3f70@ls/false) (let ((nf3f88@t nf3f6e@t)) (let ((nf3f8a@ls/false (nf3077@syntax-dispatch nf3f88@t '(any any)))) (if (and nf3f8a@ls/false (apply (lambda (nf3f8c@dots nf3f8d@e) (nf3f5e@ellipsis? nf3f8c@dots)) nf3f8a@ls/false)) (apply (lambda (nf3f90@dots nf3f91@e) (if nf3f5f@vec? (nf3157@syntax-violation '#f '"misplaced ellipsis in syntax form" nf3f5a@src) (nf3ee3@gen-syntax nf3f5a@src nf3f91@e nf3f5c@r nf3f5d@maps (lambda (nf3f94@x) '#f) '#f))) nf3f8a@ls/false) (let ((nf3f96@t nf3f88@t)) (let ((nf3f98@ls/false (nf3077@syntax-dispatch nf3f96@t '(any any . any)))) (if (and nf3f98@ls/false (apply (lambda (nf3f9a@x nf3f9b@dots nf3f9c@y) (nf3f5e@ellipsis? nf3f9b@dots)) nf3f98@ls/false)) (apply (lambda (nf3fa0@x nf3fa1@dots nf3fa2@y) (let nf3fb8@f ((nf3fa6@y nf3fa2@y) (nf3fa7@k (lambda (nf3faa@maps) (call-with-values (lambda () (nf3ee3@gen-syntax nf3f5a@src nf3fa0@x nf3f5c@r (cons '() nf3faa@maps) nf3f5e@ellipsis? '#f)) (lambda (nf3fb0@nf3fad nf3fb1@nf3faf) (let ((nf3fb4@maps nf3fb1@nf3faf) (nf3fb5@x nf3fb0@nf3fad)) (if (null? (car nf3fb4@maps)) (nf3157@syntax-violation '#f '"extra ellipsis in syntax form" nf3f5a@src) (values (nf3eeb@gen-map nf3fb5@x (car nf3fb4@maps)) (cdr nf3fb4@maps))))))))) (let ((nf3fba@t nf3fa6@y)) (let ((nf3fbc@ls/false (nf3077@syntax-dispatch nf3fba@t '()))) (if nf3fbc@ls/false (apply (lambda () (nf3fa7@k nf3f5d@maps)) nf3fbc@ls/false) (let ((nf3fbe@t nf3fba@t)) (let ((nf3fc0@ls/false (nf3077@syntax-dispatch nf3fbe@t '(any . any)))) (if (and nf3fc0@ls/false (apply (lambda (nf3fc2@dots nf3fc3@y) (nf3f5e@ellipsis? nf3fc2@dots)) nf3fc0@ls/false)) (apply (lambda (nf3fc6@dots nf3fc7@y) (nf3fb8@f nf3fc7@y (lambda (nf3fca@maps) (call-with-values (lambda () (nf3fa7@k (cons '() nf3fca@maps))) (lambda (nf3fd0@nf3fcd nf3fd1@nf3fcf) (let ((nf3fd4@maps nf3fd1@nf3fcf) (nf3fd5@x nf3fd0@nf3fcd)) (if (null? (car nf3fd4@maps)) (nf3157@syntax-violation '#f '"extra ellipsis in syntax form" nf3f5a@src) (values (nf3ee9@gen-mappend nf3fd5@x (car nf3fd4@maps)) (cdr nf3fd4@maps))))))))) nf3fc0@ls/false) (let ((nf3fd8@t nf3fbe@t)) (let ((nf3fda@ls/false (nf3077@syntax-dispatch nf3fd8@t '_))) (if nf3fda@ls/false (apply (lambda () (call-with-values (lambda () (nf3ee3@gen-syntax nf3f5a@src nf3fa6@y nf3f5c@r nf3f5d@maps nf3f5e@ellipsis? nf3f5f@vec?)) (lambda (nf3fe0@nf3fdd nf3fe1@nf3fdf) (let ((nf3fe4@maps nf3fe1@nf3fdf) (nf3fe5@y nf3fe0@nf3fdd)) (call-with-values (lambda () (nf3fa7@k nf3fe4@maps)) (lambda (nf3fec@nf3fe9 nf3fed@nf3feb) (let ((nf3ff0@maps nf3fed@nf3feb) (nf3ff1@x nf3fec@nf3fe9)) (values (nf3ee7@gen-append nf3ff1@x nf3fe5@y) nf3ff0@maps)))))))) nf3fda@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3fd8@t)))))))))))) nf3f98@ls/false) (let ((nf3ff4@t nf3f96@t)) (let ((nf3ff6@ls/false (nf3077@syntax-dispatch nf3ff4@t '(any . any)))) (if nf3ff6@ls/false (apply (lambda (nf3ff8@x nf3ff9@y) (call-with-values (lambda () (nf3ee3@gen-syntax nf3f5a@src nf3ff8@x nf3f5c@r nf3f5d@maps nf3f5e@ellipsis? '#f)) (lambda (nf4000@nf3ffd nf4001@nf3fff) (let ((nf4004@maps nf4001@nf3fff) (nf4005@xnew nf4000@nf3ffd)) (call-with-values (lambda () (nf3ee3@gen-syntax nf3f5a@src nf3ff9@y nf3f5c@r nf4004@maps nf3f5e@ellipsis? nf3f5f@vec?)) (lambda (nf400c@nf4009 nf400d@nf400b) (let ((nf4010@maps nf400d@nf400b) (nf4011@ynew nf400c@nf4009)) (values (nf3eed@gen-cons nf3f5b@e nf3ff8@x nf3ff9@y nf4005@xnew nf4011@ynew) nf4010@maps)))))))) nf3ff6@ls/false) (let ((nf4014@t nf3ff4@t)) (let ((nf4016@ls/false (nf3077@syntax-dispatch nf4014@t '#(vector each-any)))) (if nf4016@ls/false (apply (lambda (nf4018@ls) (call-with-values (lambda () (nf3ee3@gen-syntax nf3f5a@src nf4018@ls nf3f5c@r nf3f5d@maps nf3f5e@ellipsis? '#t)) (lambda (nf401e@nf401b nf401f@nf401d) (let ((nf4022@maps nf401f@nf401d) (nf4023@lsnew nf401e@nf401b)) (values (nf3eef@gen-vector nf3f5b@e nf4018@ls nf4023@lsnew) nf4022@maps))))) nf4016@ls/false) (let ((nf4026@t nf4014@t)) (let ((nf4028@ls/false (nf3077@syntax-dispatch nf4026@t '_))) (if nf4028@ls/false (apply (lambda () (values (list 'quote nf3f5b@e) nf3f5d@maps)) nf4028@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4026@t)))))))))))))))))))))))) (set! nf3ee5@gen-ref (lambda (nf3f40@src nf3f41@var nf3f42@level nf3f43@maps) (if (= nf3f42@level '0) (values nf3f41@var nf3f43@maps) (if (null? nf3f43@maps) (nf3157@syntax-violation '#f '"missing ellipsis in syntax form" nf3f40@src) (call-with-values (lambda () (nf3ee5@gen-ref nf3f40@src nf3f41@var (- nf3f42@level '1) (cdr nf3f43@maps))) (lambda (nf3f4c@nf3f49 nf3f4d@nf3f4b) (let ((nf3f50@outer-maps nf3f4d@nf3f4b) (nf3f51@outer-var nf3f4c@nf3f49)) (let ((nf3f54@t (assq nf3f51@outer-var (car nf3f43@maps)))) (if nf3f54@t ((lambda (nf3f56@b) (values (cdr nf3f56@b) nf3f43@maps)) nf3f54@t) (let ((nf3f58@inner-var (nf2df8@gen-lexical 'tmp))) (values nf3f58@inner-var (cons (cons (cons nf3f51@outer-var nf3f58@inner-var) (car nf3f43@maps)) nf3f50@outer-maps)))))))))))) (set! nf3ee7@gen-append (lambda (nf3f3c@x nf3f3d@y) (if (fast-equal? nf3f3d@y ''()) nf3f3c@x (list 'append nf3f3c@x nf3f3d@y)))) (set! nf3ee9@gen-mappend (lambda (nf3f38@e nf3f39@map-env) (list 'apply '(primitive append) (nf3eeb@gen-map nf3f38@e nf3f39@map-env)))) (set! nf3eeb@gen-map (lambda (nf3f26@e nf3f27@map-env) (let ((nf3f2a@formals (map cdr nf3f27@map-env)) (nf3f2b@actuals (map (lambda (nf3f2e@x) (list 'ref (car nf3f2e@x))) nf3f27@map-env))) (if (eq? (car nf3f26@e) 'ref) (car nf3f2b@actuals) (if (for-all (lambda (nf3f30@x) (and (eq? (car nf3f30@x) 'ref) (memq (cadr nf3f30@x) nf3f2a@formals))) (cdr nf3f26@e)) (let ((nf3f32@args (map (let ((nf3f34@r (map cons nf3f2a@formals nf3f2b@actuals))) (lambda (nf3f36@x) (cdr (assq (cadr nf3f36@x) nf3f34@r)))) (cdr nf3f26@e)))) (cons 'map (cons (list 'primitive (car nf3f26@e)) nf3f32@args))) (cons* 'map (list 'lambda nf3f2a@formals nf3f26@e) nf3f2b@actuals)))))) (set! nf3eed@gen-cons (lambda (nf3f16@e nf3f17@x nf3f18@y nf3f19@xnew nf3f1a@ynew) (let ((nf3f20@t (car nf3f1a@ynew))) (if (memv nf3f20@t '(quote)) (if (eq? (car nf3f19@xnew) 'quote) (let ((nf3f22@xnew (cadr nf3f19@xnew)) (nf3f23@ynew (cadr nf3f1a@ynew))) (if (and (eq? nf3f22@xnew nf3f17@x) (eq? nf3f23@ynew nf3f18@y)) (list 'quote nf3f16@e) (list 'quote (cons nf3f22@xnew nf3f23@ynew)))) (if (null? (cadr nf3f1a@ynew)) (list 'list nf3f19@xnew) (list 'cons nf3f19@xnew nf3f1a@ynew))) (if (memv nf3f20@t '(list)) (cons 'list (cons nf3f19@xnew (cdr nf3f1a@ynew))) (list 'cons nf3f19@xnew nf3f1a@ynew)))))) (set! nf3eef@gen-vector (lambda (nf3f10@e nf3f11@ls nf3f12@lsnew) (if (eq? (car nf3f12@lsnew) 'quote) (if (eq? (cadr nf3f12@lsnew) nf3f11@ls) (list 'quote nf3f10@e) (list 'quote (list->vector (cadr nf3f12@lsnew)))) (if (eq? (car nf3f12@lsnew) 'list) (cons 'vector (cdr nf3f12@lsnew)) (list 'list->vector nf3f12@lsnew))))) (set! nf3ef1@regen (lambda (nf3f0a@x) (let ((nf3f0c@t (car nf3f0a@x))) (if (memv nf3f0c@t '(ref)) (cadr nf3f0a@x) (if (memv nf3f0c@t '(primitive)) (list 'primitive (cadr nf3f0a@x)) (if (memv nf3f0c@t '(quote)) (list 'quote (cadr nf3f0a@x)) (if (memv nf3f0c@t '(lambda)) (nf2dd3@nf2cff@build-lambda '#f (cadr nf3f0a@x) (nf3ef1@regen (caddr nf3f0a@x))) (if (memv nf3f0c@t '(map)) (let ((nf3f0e@ls (map nf3ef1@regen (cdr nf3f0a@x)))) (cons '(primitive ellipsis-map) nf3f0e@ls)) (cons (list 'primitive (car nf3f0a@x)) (map nf3ef1@regen (cdr nf3f0a@x))))))))))) (lambda (nf3ef2@e nf3ef3@r nf3ef4@mr) (let ((nf3ef8@t nf3ef2@e)) (let ((nf3efa@ls/false (nf3077@syntax-dispatch nf3ef8@t '(_ any)))) (if nf3efa@ls/false (apply (lambda (nf3efc@x) (call-with-values (lambda () (nf3ee3@gen-syntax nf3ef2@e nf3efc@x nf3ef3@r '() nf3079@ellipsis? '#f)) (lambda (nf3f02@nf3eff nf3f03@nf3f01) (let ((nf3f06@maps nf3f03@nf3f01) (nf3f07@e nf3f02@nf3eff)) (nf3ef1@regen nf3f07@e))))) nf3efa@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf3ef8@t)))))))) (set! nf4b53@nf3083@syntax-transformer nf3083@syntax-transformer) (set! nf3085@core-macro-transformer (lambda (nf402a@name) (let ((nf402c@t nf402a@name)) (if (memv nf402c@t '(quote)) nf3027@quote-transformer (if (memv nf402c@t '(lambda)) nf302b@lambda-transformer (if (memv nf402c@t '(case-lambda)) nf3029@case-lambda-transformer (if (memv nf402c@t '(letrec)) nf300f@letrec-transformer (if (memv nf402c@t '(letrec*)) nf3011@letrec*-transformer (if (memv nf402c@t '(let)) nf300d@let-transformer (if (memv nf402c@t '(if)) nf301f@if-transformer (if (memv nf402c@t '(and)) nf3021@and-transformer (if (memv nf402c@t '(or)) nf3023@or-transformer (if (memv nf402c@t '(foreign-call)) nf3073@foreign-call-transformer (if (memv nf402c@t '(syntax-case)) nf307f@syntax-case-transformer (if (memv nf402c@t '(syntax)) nf3083@syntax-transformer (if (memv nf402c@t '(type-descriptor)) nf3015@type-descriptor-transformer (if (memv nf402c@t '(record-type-descriptor)) nf3017@record-type-descriptor-transformer (if (memv nf402c@t '(record-constructor-descriptor)) nf3019@record-constructor-descriptor-transformer (if (memv nf402c@t '(fluid-let-syntax)) nf3013@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" nf402a@name)))))))))))))))))))) (set! nf4b54@nf3085@core-macro-transformer nf3085@core-macro-transformer) (set! nf3087@symbol-macro (lambda (nf402e@x nf402f@set) (let ((nf4032@t nf402e@x)) (let ((nf4034@ls/false (nf3077@syntax-dispatch nf4032@t '(_ any)))) (if (and nf4034@ls/false (apply (lambda (nf4036@name) (and (nf2e70@id? nf4036@name) (memq (nf2e72@id->sym nf4036@name) nf402f@set))) nf4034@ls/false)) (apply (lambda (nf4038@name) (nf302d@bless (list 'quote nf4038@name))) nf4034@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4032@t)))))) (set! nf4b55@nf3087@symbol-macro nf3087@symbol-macro) (set! nf3089@macro-transformer (lambda (nf403a@x) (if (procedure? nf403a@x) nf403a@x (if (symbol? nf403a@x) (let ((nf403c@t nf403a@x)) (if (memv nf403c@t '(define-record-type)) nf306b@define-record-type-macro (if (memv nf403c@t '(define-struct)) nf3069@define-struct-macro (if (memv nf403c@t '(include)) nf305f@include-macro (if (memv nf403c@t '(cond)) nf305b@cond-macro (if (memv nf403c@t '(let)) nf3033@let-macro (if (memv nf403c@t '(do)) nf3053@do-macro (if (memv nf403c@t '(or)) nf3057@or-macro (if (memv nf403c@t '(and)) nf3059@and-macro (if (memv nf403c@t '(let*)) nf3055@let*-macro (if (memv nf403c@t '(let-values)) nf3035@let-values-macro (if (memv nf403c@t '(let*-values)) nf3037@let*-values-macro (if (memv nf403c@t '(syntax-rules)) nf3063@syntax-rules-macro (if (memv nf403c@t '(quasiquote)) nf3065@quasiquote-macro (if (memv nf403c@t '(quasisyntax)) nf3067@quasisyntax-macro (if (memv nf403c@t '(with-syntax)) nf302f@with-syntax-macro (if (memv nf403c@t '(when)) nf301b@when-macro (if (memv nf403c@t '(unless)) nf301d@unless-macro (if (memv nf403c@t '(case)) nf3025@case-macro (if (memv nf403c@t '(identifier-syntax)) nf3051@identifier-syntax-macro (if (memv nf403c@t '(time)) nf3049@time-macro (if (memv nf403c@t '(delay)) nf304b@delay-macro (if (memv nf403c@t '(assert)) nf304d@assert-macro (if (memv nf403c@t '(endianness)) nf304f@endianness-macro (if (memv nf403c@t '(guard)) nf3045@guard-macro (if (memv nf403c@t '(define-enumeration)) nf3047@define-enumeration-macro (if (memv nf403c@t '(trace-lambda)) nf3039@trace-lambda-macro (if (memv nf403c@t '(trace-define)) nf303b@trace-define-macro (if (memv nf403c@t '(trace-define-syntax)) nf303d@trace-define-syntax-macro (if (memv nf403c@t '(trace-let-syntax)) nf3041@trace-let-syntax-macro (if (memv nf403c@t '(trace-letrec-syntax)) nf3043@trace-letrec-syntax-macro (if (memv nf403c@t '(define-condition-type)) nf306d@define-condition-type-macro (if (memv nf403c@t '(parameterize)) nf3071@parameterize-macro (if (memv nf403c@t '(include-into)) nf3061@include-into-macro (if (memv nf403c@t '(eol-style)) (lambda (nf403e@x) (nf3087@symbol-macro nf403e@x '(none lf cr crlf nel crnel ls))) (if (memv nf403c@t '(error-handling-mode)) (lambda (nf4040@x) (nf3087@symbol-macro nf4040@x '(ignore raise replace))) (if (memv nf403c@t '(buffer-mode)) (lambda (nf4042@x) (nf3087@symbol-macro nf4042@x '(none line block))) (if (memv nf403c@t '(file-options)) nf2deb@file-options-macro (if (memv nf403c@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) nf306f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" nf403a@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" nf403a@x))))) (set! nf4b56@nf3089@macro-transformer nf3089@macro-transformer) (set! nf308b@local-macro-transformer (lambda (nf4044@x) (car nf4044@x))) (set! nf4b57@nf308b@local-macro-transformer nf308b@local-macro-transformer) (set! nf308d@do-macro-call (lambda (nf4046@transformer nf4047@expr) (let ((nf404a@out (nf4046@transformer (nf2e5a@add-mark nf2e54@anti-mark nf4047@expr '#f)))) (begin (let nf404e@f ((nf404c@x nf404a@out)) (if (not (nf2e3c@stx? nf404c@x)) (if (pair? nf404c@x) (begin (nf404e@f (car nf404c@x)) (nf404e@f (cdr nf404c@x))) (if (vector? nf404c@x) (vector-for-each nf404e@f nf404c@x) (if (symbol? nf404c@x) (nf3157@syntax-violation '#f '"raw symbol encountered in output of macro" nf4047@expr nf404c@x) (void)))) (void))) (nf2e5a@add-mark (nf2e52@gen-mark) nf404a@out nf4047@expr))))) (set! nf4b58@nf308d@do-macro-call nf308d@do-macro-call) (set! nf308f@chi-macro (lambda (nf4050@p nf4051@e) (nf308d@do-macro-call (nf3089@macro-transformer nf4050@p) nf4051@e))) (set! nf4b59@nf308f@chi-macro nf308f@chi-macro) (set! nf3091@chi-local-macro (lambda (nf4054@p nf4055@e) (nf308d@do-macro-call (nf308b@local-macro-transformer nf4054@p) nf4055@e))) (set! nf4b5a@nf3091@chi-local-macro nf3091@chi-local-macro) (set! nf3093@chi-global-macro (lambda (nf4058@p nf4059@e) (let ((nf405c@lib (car nf4058@p)) (nf405d@loc (cdr nf4058@p))) (begin (nf2c87@nf2ad6@visit-library nf405c@lib) (let ((nf4060@x (symbol-value nf405d@loc))) (let ((nf4062@transformer (if (procedure? nf4060@x) nf4060@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" nf4060@x)))) (nf308d@do-macro-call nf4062@transformer nf4059@e))))))) (set! nf4b5b@nf3093@chi-global-macro nf3093@chi-global-macro) (set! nf3095@chi-expr* (lambda (nf4064@e* nf4065@r nf4066@mr) (if (null? nf4064@e*) '() (let ((nf406a@e (nf3099@chi-expr (car nf4064@e*) nf4065@r nf4066@mr))) (cons nf406a@e (nf3095@chi-expr* (cdr nf4064@e*) nf4065@r nf4066@mr)))))) (set! nf4b5c@nf3095@chi-expr* nf3095@chi-expr*) (set! nf3097@chi-application (lambda (nf406c@e nf406d@r nf406e@mr) (let ((nf4072@t nf406c@e)) (let ((nf4074@ls/false (nf3077@syntax-dispatch nf4072@t '(any . each-any)))) (if nf4074@ls/false (apply (lambda (nf4076@rator nf4077@rands) (let ((nf407a@rator (nf3099@chi-expr nf4076@rator nf406d@r nf406e@mr))) (cons nf407a@rator (nf3095@chi-expr* nf4077@rands nf406d@r nf406e@mr)))) nf4074@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4072@t)))))) (set! nf4b5d@nf3097@chi-application nf3097@chi-application) (set! nf3099@chi-expr (lambda (nf407c@e nf407d@r nf407e@mr) (call-with-values (lambda () (nf2e92@syntax-type nf407c@e nf407d@r)) (lambda (nf4088@nf4083 nf4089@nf4085 nf408a@nf4087) (let ((nf408e@kwd nf408a@nf4087) (nf408f@value nf4089@nf4085) (nf4090@type nf4088@nf4083)) (let ((nf4094@t nf4090@type)) (if (memv nf4094@t '(core-macro)) (let ((nf4096@transformer (nf3085@core-macro-transformer nf408f@value))) (nf4096@transformer nf407c@e nf407d@r nf407e@mr)) (if (memv nf4094@t '(global)) (let ((nf4098@lib (car nf408f@value))) (let ((nf409a@loc (cdr nf408f@value))) (begin ((nf30df@inv-collector) nf4098@lib) nf409a@loc))) (if (memv nf4094@t '(core-prim)) (let ((nf409c@name nf408f@value)) (list 'primitive nf409c@name)) (if (memv nf4094@t '(call)) (nf3097@chi-application nf407c@e nf407d@r nf407e@mr) (if (memv nf4094@t '(lexical)) (let ((nf409e@lex (nf3001@lexical-var nf408f@value))) nf409e@lex) (if (memv nf4094@t '(global-macro global-macro!)) (nf3099@chi-expr (nf3093@chi-global-macro nf408f@value nf407c@e) nf407d@r nf407e@mr) (if (memv nf4094@t '(local-macro local-macro!)) (nf3099@chi-expr (nf3091@chi-local-macro nf408f@value nf407c@e) nf407d@r nf407e@mr) (if (memv nf4094@t '(macro macro!)) (nf3099@chi-expr (nf308f@chi-macro nf408f@value nf407c@e) nf407d@r nf407e@mr) (if (memv nf4094@t '(constant)) (let ((nf40a0@datum nf408f@value)) (list 'quote nf40a0@datum)) (if (memv nf4094@t '(set!)) (nf309b@chi-set! nf407c@e nf407d@r nf407e@mr) (if (memv nf4094@t '(begin)) (let ((nf40a2@t nf407c@e)) (let ((nf40a4@ls/false (nf3077@syntax-dispatch nf40a2@t '(_ any . each-any)))) (if nf40a4@ls/false (apply (lambda (nf40a6@x nf40a7@x*) (nf2dd5@nf2d2f@build-sequence '#f (nf3095@chi-expr* (cons nf40a6@x nf40a7@x*) nf407d@r nf407e@mr))) nf40a4@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf40a2@t)))) (if (memv nf4094@t '(let-syntax letrec-syntax)) (let ((nf40aa@t nf407c@e)) (let ((nf40ac@ls/false (nf3077@syntax-dispatch nf40aa@t '(_ #(each (any any)) any . each-any)))) (if (and nf40ac@ls/false (apply (lambda (nf40ae@xlhs* nf40af@xrhs* nf40b0@xbody nf40b1@xbody*) (if (not (nf2e78@valid-bound-ids? nf40ae@xlhs*)) (nf3157@syntax-violation '#f '"invalid identifiers" nf407c@e) (void))) nf40ac@ls/false)) (apply (lambda (nf40b6@xlhs* nf40b7@xrhs* nf40b8@xbody nf40b9@xbody*) (let ((nf40be@xlab* (map nf2dfc@gen-label nf40b6@xlhs*))) (let ((nf40c0@xrib (nf2e30@make-full-rib nf40b6@xlhs* nf40be@xlab*))) (let ((nf40c2@xb* (map (lambda (nf40c4@x) (nf2ea8@make-eval-transformer (nf30d1@expand-transformer (if (eq? nf4090@type 'let-syntax) nf40c4@x (nf2e5c@add-subst nf40c0@xrib nf40c4@x)) nf407e@mr))) nf40b7@xrhs*))) (nf2dd5@nf2d2f@build-sequence '#f (nf3095@chi-expr* (map (lambda (nf40c6@x) (nf2e5c@add-subst nf40c0@xrib nf40c6@x)) (cons nf40b8@xbody nf40b9@xbody*)) (append (map cons nf40be@xlab* nf40c2@xb*) nf407d@r) (append (map cons nf40be@xlab* nf40c2@xb*) nf407e@mr))))))) nf40ac@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf40aa@t)))) (if (memv nf4094@t '(displaced-lexical)) (nf3157@syntax-violation '#f '"identifier out of context" nf407c@e) (if (memv nf4094@t '(syntax)) (nf3157@syntax-violation '#f '"reference to pattern variable outside a syntax form" nf407c@e) (if (memv nf4094@t '(define define-syntax module import library)) (nf3157@syntax-violation '#f (string-append (let ((nf40c8@t nf4090@type)) (if (memv nf40c8@t '(define)) '"a definition" (if (memv nf40c8@t '(define-syntax)) '"a define-syntax" (if (memv nf40c8@t '(module)) '"a module definition" (if (memv nf40c8@t '(library)) '"a library definition" (if (memv nf40c8@t '(import)) '"an import declaration" (if (memv nf40c8@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") nf407c@e) (if (memv nf4094@t '(mutable)) (nf3157@syntax-violation '#f '"attempt to reference an unexportable variable" nf407c@e) (nf3157@syntax-violation '#f '"invalid expression" nf407c@e))))))))))))))))))))))) (set! nf4b5e@nf3099@chi-expr nf3099@chi-expr) (set! nf309b@chi-set! (lambda (nf40ca@e nf40cb@r nf40cc@mr) (let ((nf40d0@t nf40ca@e)) (let ((nf40d2@ls/false (nf3077@syntax-dispatch nf40d0@t '(_ any any)))) (if (and nf40d2@ls/false (apply (lambda (nf40d4@x nf40d5@v) (nf2e70@id? nf40d4@x)) nf40d2@ls/false)) (apply (lambda (nf40d8@x nf40d9@v) (call-with-values (lambda () (nf2e92@syntax-type nf40d8@x nf40cb@r)) (lambda (nf40e2@nf40dd nf40e3@nf40df nf40e4@nf40e1) (let ((nf40e8@kwd nf40e4@nf40e1) (nf40e9@value nf40e3@nf40df) (nf40ea@type nf40e2@nf40dd)) (let ((nf40ee@t nf40ea@type)) (if (memv nf40ee@t '(lexical)) (begin (nf3005@set-lexical-mutable! nf40e9@value '#t) (list 'set! (nf3001@lexical-var nf40e9@value) (nf3099@chi-expr nf40d9@v nf40cb@r nf40cc@mr))) (if (memv nf40ee@t '(core-prim)) (nf3157@syntax-violation '#f '"cannot modify imported core primitive" nf40ca@e) (if (memv nf40ee@t '(global)) (nf3157@syntax-violation '#f '"attempt to modify imported binding" nf40ca@e) (if (memv nf40ee@t '(global-macro!)) (nf3099@chi-expr (nf3093@chi-global-macro nf40e9@value nf40ca@e) nf40cb@r nf40cc@mr) (if (memv nf40ee@t '(local-macro!)) (nf3099@chi-expr (nf3091@chi-local-macro nf40e9@value nf40ca@e) nf40cb@r nf40cc@mr) (if (memv nf40ee@t '(mutable)) (nf3157@syntax-violation '#f '"attempt to assign to an unexportable variable" nf40ca@e) (nf3157@syntax-violation '#f '"invalid syntax" nf40ca@e)))))))))))) nf40d2@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf40d0@t)))))) (set! nf4b5f@nf309b@chi-set! nf309b@chi-set!) (set! nf309d@verify-formals (lambda (nf40f0@fmls nf40f1@stx) (let ((nf40f4@t nf40f0@fmls)) (let ((nf40f6@ls/false (nf3077@syntax-dispatch nf40f4@t 'each-any))) (if nf40f6@ls/false (apply (lambda (nf40f8@x*) (if (not (nf2e78@valid-bound-ids? nf40f8@x*)) (nf3031@invalid-fmls-error nf40f1@stx nf40f0@fmls) (void))) nf40f6@ls/false) (let ((nf40fa@t nf40f4@t)) (let ((nf40fc@ls/false (nf3077@syntax-dispatch nf40fa@t '#(each+ any () any)))) (if nf40fc@ls/false (apply (lambda (nf40fe@x* nf40ff@x) (if (not (nf2e78@valid-bound-ids? (cons nf40ff@x nf40fe@x*))) (nf3031@invalid-fmls-error nf40f1@stx nf40f0@fmls) (void))) nf40fc@ls/false) (let ((nf4102@t nf40fa@t)) (let ((nf4104@ls/false (nf3077@syntax-dispatch nf4102@t '_))) (if nf4104@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid syntax" nf40f1@stx)) nf4104@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4102@t)))))))))))) (set! nf4b60@nf309d@verify-formals nf309d@verify-formals) (set! nf309f@chi-lambda-clause (lambda (nf4106@stx nf4107@fmls nf4108@body* nf4109@r nf410a@mr) (let ((nf4110@t nf4107@fmls)) (let ((nf4112@ls/false (nf3077@syntax-dispatch nf4110@t 'each-any))) (if nf4112@ls/false (apply (lambda (nf4114@x*) (begin (nf309d@verify-formals nf4107@fmls nf4106@stx) (let ((nf4116@lex* (map nf2df8@gen-lexical nf4114@x*)) (nf4117@lab* (map nf2dfc@gen-label nf4114@x*))) (values nf4116@lex* (nf30af@chi-internal (nf2e5c@add-subst (nf2e30@make-full-rib nf4114@x* nf4117@lab*) nf4108@body*) (nf3009@add-lexicals nf4117@lab* nf4116@lex* nf4109@r) nf410a@mr))))) nf4112@ls/false) (let ((nf411a@t nf4110@t)) (let ((nf411c@ls/false (nf3077@syntax-dispatch nf411a@t '#(each+ any () any)))) (if nf411c@ls/false (apply (lambda (nf411e@x* nf411f@x) (begin (nf309d@verify-formals nf4107@fmls nf4106@stx) (let ((nf4122@lex* (map nf2df8@gen-lexical nf411e@x*)) (nf4123@lab* (map nf2dfc@gen-label nf411e@x*)) (nf4124@lex (nf2df8@gen-lexical nf411f@x)) (nf4125@lab (nf2dfc@gen-label nf411f@x))) (values (append nf4122@lex* nf4124@lex) (nf30af@chi-internal (nf2e5c@add-subst (nf2e30@make-full-rib (cons nf411f@x nf411e@x*) (cons nf4125@lab nf4123@lab*)) nf4108@body*) (nf3009@add-lexicals (cons nf4125@lab nf4123@lab*) (cons nf4124@lex nf4122@lex*) nf4109@r) nf410a@mr))))) nf411c@ls/false) (let ((nf412a@t nf411a@t)) (let ((nf412c@ls/false (nf3077@syntax-dispatch nf412a@t '_))) (if nf412c@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid syntax" nf4107@fmls)) nf412c@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf412a@t)))))))))))) (set! nf4b61@nf309f@chi-lambda-clause nf309f@chi-lambda-clause) (set! nf30a1@chi-lambda-clause* (lambda (nf412e@stx nf412f@fmls* nf4130@body** nf4131@r nf4132@mr) (if (null? nf412f@fmls*) (values '() '()) (call-with-values (lambda () (nf309f@chi-lambda-clause nf412e@stx (car nf412f@fmls*) (car nf4130@body**) nf4131@r nf4132@mr)) (lambda (nf413c@nf4139 nf413d@nf413b) (let ((nf4140@b nf413d@nf413b) (nf4141@a nf413c@nf4139)) (call-with-values (lambda () (nf30a1@chi-lambda-clause* nf412e@stx (cdr nf412f@fmls*) (cdr nf4130@body**) nf4131@r nf4132@mr)) (lambda (nf4148@nf4145 nf4149@nf4147) (let ((nf414c@b* nf4149@nf4147) (nf414d@a* nf4148@nf4145)) (values (cons nf4141@a nf414d@a*) (cons nf4140@b nf414c@b*))))))))))) (set! nf4b62@nf30a1@chi-lambda-clause* nf30a1@chi-lambda-clause*) (set! nf30a3@chi-defun (lambda (nf4150@x nf4151@r nf4152@mr) (let ((nf4156@fmls (car nf4150@x)) (nf4157@body* (cdr nf4150@x))) (call-with-values (lambda () (nf309f@chi-lambda-clause nf4156@fmls nf4156@fmls nf4157@body* nf4151@r nf4152@mr)) (lambda (nf415e@nf415b nf415f@nf415d) (let ((nf4162@body nf415f@nf415d) (nf4163@fmls nf415e@nf415b)) (nf2dd3@nf2cff@build-lambda '#f nf4163@fmls nf4162@body))))))) (set! nf4b63@nf30a3@chi-defun nf30a3@chi-defun) (set! nf30a5@chi-rhs (lambda (nf4166@rhs nf4167@r nf4168@mr) (let ((nf416c@t (car nf4166@rhs))) (if (memv nf416c@t '(defun)) (nf30a3@chi-defun (cdr nf4166@rhs) nf4167@r nf4168@mr) (if (memv nf416c@t '(expr)) (let ((nf416e@expr (cdr nf4166@rhs))) (nf3099@chi-expr nf416e@expr nf4167@r nf4168@mr)) (if (memv nf416c@t '(top-expr)) (let ((nf4170@expr (cdr nf4166@rhs))) (nf2dd5@nf2d2f@build-sequence '#f (list (nf3099@chi-expr nf4170@expr nf4167@r nf4168@mr) (nf2dd6@nf2d31@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" nf4166@rhs))))))) (set! nf4b64@nf30a5@chi-rhs nf30a5@chi-rhs) (set! nf30a7@expand-interaction-rhs*/init* (lambda (nf4172@lhs* nf4173@rhs* nf4174@init* nf4175@r nf4176@mr) (let nf4180@f ((nf417c@lhs* nf4172@lhs*) (nf417d@rhs* nf4173@rhs*)) (if (null? nf417c@lhs*) (map (lambda (nf4182@x) (nf3099@chi-expr nf4182@x nf4175@r nf4176@mr)) nf4174@init*) (let ((nf4184@lhs (car nf417c@lhs*)) (nf4185@rhs (car nf417d@rhs*))) (let ((nf4188@t (car nf4185@rhs))) (if (memv nf4188@t '(defun)) (let ((nf418a@rhs (nf30a3@chi-defun (cdr nf4185@rhs) nf4175@r nf4176@mr))) (cons (list 'set! nf4184@lhs nf418a@rhs) (nf4180@f (cdr nf417c@lhs*) (cdr nf417d@rhs*)))) (if (memv nf4188@t '(expr)) (let ((nf418c@rhs (nf3099@chi-expr (cdr nf4185@rhs) nf4175@r nf4176@mr))) (cons (list 'set! nf4184@lhs nf418c@rhs) (nf4180@f (cdr nf417c@lhs*) (cdr nf417d@rhs*)))) (if (memv nf4188@t '(top-expr)) (let ((nf418e@e (nf3099@chi-expr (cdr nf4185@rhs) nf4175@r nf4176@mr))) (cons nf418e@e (nf4180@f (cdr nf417c@lhs*) (cdr nf417d@rhs*)))) (error 'expand-interaction '"invallid" nf4185@rhs)))))))))) (set! nf4b65@nf30a7@expand-interaction-rhs*/init* nf30a7@expand-interaction-rhs*/init*) (set! nf30a9@chi-rhs* (lambda (nf4190@rhs* nf4191@r nf4192@mr) (let nf4198@f ((nf4196@ls nf4190@rhs*)) (if (null? nf4196@ls) '() (let ((nf419a@a (nf30a5@chi-rhs (car nf4196@ls) nf4191@r nf4192@mr))) (cons nf419a@a (nf4198@f (cdr nf4196@ls)))))))) (set! nf4b66@nf30a9@chi-rhs* nf30a9@chi-rhs*) (set! nf30ab@find-bound=? (lambda (nf419c@x nf419d@lhs* nf419e@rhs*) (if (null? nf419d@lhs*) '#f (if (nf2e74@bound-id=? nf419c@x (car nf419d@lhs*)) (car nf419e@rhs*) (nf30ab@find-bound=? nf419c@x (cdr nf419d@lhs*) (cdr nf419e@rhs*)))))) (set! nf4b67@nf30ab@find-bound=? nf30ab@find-bound=?) (set! nf30ad@find-dups (lambda (nf41a2@ls) (let nf41a8@f ((nf41a4@ls nf41a2@ls) (nf41a5@dups '())) (if (null? nf41a4@ls) nf41a5@dups (let ((nf41aa@t (nf30ab@find-bound=? (car nf41a4@ls) (cdr nf41a4@ls) (cdr nf41a4@ls)))) (if nf41aa@t ((lambda (nf41ac@x) (nf41a8@f (cdr nf41a4@ls) (cons (list (car nf41a4@ls) nf41ac@x) nf41a5@dups))) nf41aa@t) (nf41a8@f (cdr nf41a4@ls) nf41a5@dups))))))) (set! nf4b68@nf30ad@find-dups nf30ad@find-dups) (set! nf30af@chi-internal (lambda (nf41ae@e* nf41af@r nf41b0@mr) (let ((nf41b4@rib (nf2e24@make-empty-rib))) (call-with-values (lambda () (nf30cf@chi-body* (map (lambda (nf41c6@x) (nf2e5c@add-subst nf41b4@rib nf41c6@x)) (nf2e6e@syntax->list nf41ae@e*)) nf41af@r nf41b0@mr '() '() '() '() '() nf41b4@rib '#f)) (lambda (nf41c8@nf41b7 nf41c9@nf41b9 nf41ca@nf41bb nf41cb@nf41bd nf41cc@nf41bf nf41cd@nf41c1 nf41ce@nf41c3 nf41cf@nf41c5) (let ((nf41d8@_exp* nf41cf@nf41c5) (nf41d9@kwd* nf41ce@nf41c3) (nf41da@mod** nf41cd@nf41c1) (nf41db@rhs* nf41cc@nf41bf) (nf41dc@lex* nf41cb@nf41bd) (nf41dd@mr nf41ca@nf41bb) (nf41de@r nf41c9@nf41b9) (nf41df@e* nf41c8@nf41b7)) (begin (if (null? nf41df@e*) (nf3157@syntax-violation '#f '"no expression in body" nf41df@e*) (void)) (let ((nf41e8@init* (nf3095@chi-expr* (append (apply append (reverse nf41da@mod**)) nf41df@e*) nf41de@r nf41dd@mr))) (let ((nf41ea@rhs* (nf30a9@chi-rhs* nf41db@rhs* nf41de@r nf41dd@mr))) (nf2dda@nf2d39@build-letrec* '#f (reverse nf41dc@lex*) (reverse nf41ea@rhs*) (nf2dd5@nf2d2f@build-sequence '#f nf41e8@init*))))))))))) (set! nf4b69@nf30af@chi-internal nf30af@chi-internal) (set! nf30b1@parse-module (lambda (nf41ec@e) (let ((nf41ee@t nf41ec@e)) (let ((nf41f0@ls/false (nf3077@syntax-dispatch nf41ee@t '(_ each-any . each-any)))) (if nf41f0@ls/false (apply (lambda (nf41f2@export* nf41f3@b*) (begin (if (not (for-all nf2e70@id? nf41f2@export*)) (nf3157@syntax-violation '#f '"module exports must be identifiers" nf41ec@e) (void)) (values '#f (list->vector nf41f2@export*) nf41f3@b*))) nf41f0@ls/false) (let ((nf41f6@t nf41ee@t)) (let ((nf41f8@ls/false (nf3077@syntax-dispatch nf41f6@t '(_ any each-any . each-any)))) (if nf41f8@ls/false (apply (lambda (nf41fa@name nf41fb@export* nf41fc@b*) (begin (if (not (nf2e70@id? nf41fa@name)) (nf3157@syntax-violation '#f '"module name must be an identifier" nf41ec@e) (void)) (if (not (for-all nf2e70@id? nf41fb@export*)) (nf3157@syntax-violation '#f '"module exports must be identifiers" nf41ec@e) (void)) (values nf41fa@name (list->vector nf41fb@export*) nf41fc@b*))) nf41f8@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf41f6@t))))))))) (set! nf4b6a@nf30b1@parse-module nf30b1@parse-module) (set! nf30bb@module-interface? (lambda (nf4200@x) (and (simple-struct? nf4200@x) (eq? (simple-struct-name nf4200@x) 'module-interface)))) (set! nf4b6b@nf30bb@module-interface? nf30bb@module-interface?) (set! nf30bd@module-interface-first-mark (lambda (nf4202@x) (simple-struct-ref nf4202@x '0))) (set! nf4b6c@nf30bd@module-interface-first-mark nf30bd@module-interface-first-mark) (set! nf30bf@set-module-interface-first-mark! (lambda (nf4204@x nf4205@val) (simple-struct-set! nf4204@x '0 nf4205@val))) (set! nf4b6d@nf30bf@set-module-interface-first-mark! nf30bf@set-module-interface-first-mark!) (set! nf30c1@module-interface-exp-id-vec (lambda (nf4208@x) (simple-struct-ref nf4208@x '1))) (set! nf4b6e@nf30c1@module-interface-exp-id-vec nf30c1@module-interface-exp-id-vec) (set! nf30c3@set-module-interface-exp-id-vec! (lambda (nf420a@x nf420b@val) (simple-struct-set! nf420a@x '1 nf420b@val))) (set! nf4b6f@nf30c3@set-module-interface-exp-id-vec! nf30c3@set-module-interface-exp-id-vec!) (set! nf30c5@module-interface-exp-lab-vec (lambda (nf420e@x) (simple-struct-ref nf420e@x '2))) (set! nf4b70@nf30c5@module-interface-exp-lab-vec nf30c5@module-interface-exp-lab-vec) (set! nf30c7@set-module-interface-exp-lab-vec! (lambda (nf4210@x nf4211@val) (simple-struct-set! nf4210@x '2 nf4211@val))) (set! nf4b71@nf30c7@set-module-interface-exp-lab-vec! nf30c7@set-module-interface-exp-lab-vec!) (set! nf30c9@dummy '3) (set! nf4b72@nf30c9@dummy nf30c9@dummy) (set! nf30cb@module-interface-exp-id* (lambda (nf4214@iface nf4215@id) (let ((nf4219@diff-marks '#f)) (begin (set! nf4219@diff-marks (lambda (nf4220@ls nf4221@x) (begin (if (null? nf4220@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((nf4224@a (car nf4220@ls))) (if (eq? nf4224@a nf4221@x) '() (cons nf4224@a (nf4219@diff-marks (cdr nf4220@ls) nf4221@x))))))) (let ((nf421a@diff (nf4219@diff-marks (nf2e42@stx-mark* nf4215@id) (nf30bd@module-interface-first-mark nf4214@iface))) (nf421b@id-vec (nf30c1@module-interface-exp-id-vec nf4214@iface))) (if (null? nf421a@diff) nf421b@id-vec (vector-map (lambda (nf421e@x) (make-simple-struct 'stx '5 (list (nf2e3e@stx-expr nf421e@x) (append nf421a@diff (nf2e42@stx-mark* nf421e@x)) '() '()))) nf421b@id-vec))))))) (set! nf4b73@nf30cb@module-interface-exp-id* nf30cb@module-interface-exp-id*) (set! nf30cd@chi-internal-module (lambda (nf4226@e nf4227@r nf4228@mr nf4229@lex* nf422a@rhs* nf422b@mod** nf422c@kwd*) (call-with-values (lambda () (nf30b1@parse-module nf4226@e)) (lambda (nf423a@nf4235 nf423b@nf4237 nf423c@nf4239) (let ((nf4240@e* nf423c@nf4239) (nf4241@exp-id* nf423b@nf4237) (nf4242@name nf423a@nf4235)) (let ((nf4246@rib (nf2e24@make-empty-rib))) (let ((nf4248@e* (map (lambda (nf424a@x) (nf2e5c@add-subst nf4246@rib nf424a@x)) (nf2e6e@syntax->list nf4240@e*)))) (call-with-values (lambda () (nf30cf@chi-body* nf4248@e* nf4227@r nf4228@mr nf4229@lex* nf422a@rhs* nf422b@mod** nf422c@kwd* '() nf4246@rib '#f)) (lambda (nf425c@nf424d nf425d@nf424f nf425e@nf4251 nf425f@nf4253 nf4260@nf4255 nf4261@nf4257 nf4262@nf4259 nf4263@nf425b) (let ((nf426c@_exp* nf4263@nf425b) (nf426d@kwd* nf4262@nf4259) (nf426e@mod** nf4261@nf4257) (nf426f@rhs* nf4260@nf4255) (nf4270@lex* nf425f@nf4253) (nf4271@mr nf425e@nf4251) (nf4272@r nf425d@nf424f) (nf4273@e* nf425c@nf424d)) (let ((nf427c@exp-lab* (vector-map (lambda (nf4280@x) (or (nf2e86@id->label (make-simple-struct 'stx '5 (list (nf2e72@id->sym nf4280@x) (nf2e42@stx-mark* nf4280@x) (list nf4246@rib) '()))) (nf3157@syntax-violation '#f '"cannot find module export" nf4280@x))) nf4241@exp-id*)) (nf427d@mod** (cons nf4273@e* nf426e@mod**))) (if (not nf4242@name) (values nf4270@lex* nf426f@rhs* nf4241@exp-id* nf427c@exp-lab* nf4272@r nf4271@mr nf427d@mod** nf426d@kwd*) (let ((nf4282@lab (nf2dfc@gen-label 'module)) (nf4283@iface (make-simple-struct 'module-interface '4 (list (car (nf2e42@stx-mark* nf4242@name)) (vector-map (lambda (nf4286@x) (make-simple-struct 'stx '5 (list (nf2e3e@stx-expr nf4286@x) (nf2e42@stx-mark* nf4286@x) '() '()))) nf4241@exp-id*) nf427c@exp-lab*)))) (values nf4270@lex* nf426f@rhs* (vector nf4242@name) (vector nf4282@lab) (cons (cons nf4282@lab (cons '$module nf4283@iface)) nf4272@r) (cons (cons nf4282@lab (cons '$module nf4283@iface)) nf4271@mr) nf427d@mod** nf426d@kwd*)))))))))))))) (set! nf4b74@nf30cd@chi-internal-module nf30cd@chi-internal-module) (set! nf30cf@chi-body* (lambda (nf4288@e* nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf428e@kwd* nf428f@exp* nf4290@rib nf4291@top?) (if (null? nf4288@e*) (values nf4288@e* nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf428e@kwd* nf428f@exp*) (let ((nf429c@e (car nf4288@e*))) (call-with-values (lambda () (nf2e92@syntax-type nf429c@e nf4289@r)) (lambda (nf42a4@nf429f nf42a5@nf42a1 nf42a6@nf42a3) (let ((nf42aa@kwd nf42a6@nf42a3) (nf42ab@value nf42a5@nf42a1) (nf42ac@type nf42a4@nf429f)) (let ((nf42b0@kwd* (if (nf2e70@id? nf42aa@kwd) (cons nf42aa@kwd nf428e@kwd*) nf428e@kwd*))) (let ((nf42b2@t nf42ac@type)) (if (memv nf42b2@t '(define)) (call-with-values (lambda () (nf2ff9@parse-define nf429c@e)) (lambda (nf42b8@nf42b5 nf42b9@nf42b7) (let ((nf42bc@rhs nf42b9@nf42b7) (nf42bd@id nf42b8@nf42b5)) (begin (if (nf2e7c@bound-id-member? nf42bd@id nf42b0@kwd*) (nf3157@syntax-violation '#f '"cannot redefine keyword" nf429c@e) (void)) (call-with-values (lambda () (nf2e00@gen-define-label+loc nf42bd@id nf4290@rib)) (lambda (nf42c4@nf42c1 nf42c5@nf42c3) (let ((nf42c8@lex nf42c5@nf42c3) (nf42c9@lab nf42c4@nf42c1)) (begin (nf2e26@extend-rib! nf4290@rib nf42bd@id nf42c9@lab) (nf30cf@chi-body* (cdr nf4288@e*) (nf3007@add-lexical nf42c9@lab nf42c8@lex nf4289@r) nf428a@mr (cons nf42c8@lex nf428b@lex*) (cons nf42bc@rhs nf428c@rhs*) nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?))))))))) (if (memv nf42b2@t '(define-syntax)) (call-with-values (lambda () (nf2ffb@parse-define-syntax nf429c@e)) (lambda (nf42d0@nf42cd nf42d1@nf42cf) (let ((nf42d4@rhs nf42d1@nf42cf) (nf42d5@id nf42d0@nf42cd)) (begin (if (nf2e7c@bound-id-member? nf42d5@id nf42b0@kwd*) (nf3157@syntax-violation '#f '"cannot redefine keyword" nf429c@e) (void)) (let ((nf42d8@lab (nf2e02@gen-define-label nf42d5@id nf4290@rib)) (nf42d9@expanded-rhs (nf30d1@expand-transformer nf42d4@rhs nf428a@mr))) (begin (nf2e26@extend-rib! nf4290@rib nf42d5@id nf42d8@lab) (let ((nf42dc@b (nf2ea8@make-eval-transformer nf42d9@expanded-rhs))) (nf30cf@chi-body* (cdr nf4288@e*) (cons (cons nf42d8@lab nf42dc@b) nf4289@r) (cons (cons nf42d8@lab nf42dc@b) nf428a@mr) nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?)))))))) (if (memv nf42b2@t '(let-syntax letrec-syntax)) (let ((nf42de@t nf429c@e)) (let ((nf42e0@ls/false (nf3077@syntax-dispatch nf42de@t '(_ #(each (any any)) . each-any)))) (if (and nf42e0@ls/false (apply (lambda (nf42e2@xlhs* nf42e3@xrhs* nf42e4@xbody*) (if (not (nf2e78@valid-bound-ids? nf42e2@xlhs*)) (nf3157@syntax-violation '#f '"invalid identifiers" nf429c@e) (void))) nf42e0@ls/false)) (apply (lambda (nf42e8@xlhs* nf42e9@xrhs* nf42ea@xbody*) (let ((nf42ee@xlab* (map nf2dfc@gen-label nf42e8@xlhs*))) (let ((nf42f0@xrib (nf2e30@make-full-rib nf42e8@xlhs* nf42ee@xlab*))) (let ((nf42f2@xb* (map (lambda (nf42f4@x) (nf2ea8@make-eval-transformer (nf30d1@expand-transformer (if (eq? nf42ac@type 'let-syntax) nf42f4@x (nf2e5c@add-subst nf42f0@xrib nf42f4@x)) nf428a@mr))) nf42e9@xrhs*))) (nf30cf@chi-body* (append (map (lambda (nf42f6@x) (nf2e5c@add-subst nf42f0@xrib nf42f6@x)) nf42ea@xbody*) (cdr nf4288@e*)) (append (map cons nf42ee@xlab* nf42f2@xb*) nf4289@r) (append (map cons nf42ee@xlab* nf42f2@xb*) nf428a@mr) nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?))))) nf42e0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf42de@t)))) (if (memv nf42b2@t '(begin)) (let ((nf42f8@t nf429c@e)) (let ((nf42fa@ls/false (nf3077@syntax-dispatch nf42f8@t '(_ . each-any)))) (if nf42fa@ls/false (apply (lambda (nf42fc@x*) (nf30cf@chi-body* (append nf42fc@x* (cdr nf4288@e*)) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?)) nf42fa@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf42f8@t)))) (if (memv nf42b2@t '(global-macro global-macro!)) (nf30cf@chi-body* (cons (nf2e5c@add-subst nf4290@rib (nf3093@chi-global-macro nf42ab@value nf429c@e)) (cdr nf4288@e*)) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?) (if (memv nf42b2@t '(local-macro local-macro!)) (nf30cf@chi-body* (cons (nf2e5c@add-subst nf4290@rib (nf3091@chi-local-macro nf42ab@value nf429c@e)) (cdr nf4288@e*)) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?) (if (memv nf42b2@t '(macro macro!)) (nf30cf@chi-body* (cons (nf2e5c@add-subst nf4290@rib (nf308f@chi-macro nf42ab@value nf429c@e)) (cdr nf4288@e*)) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?) (if (memv nf42b2@t '(module)) (call-with-values (lambda () (nf30cd@chi-internal-module nf429c@e nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd*)) (lambda (nf430e@nf42ff nf430f@nf4301 nf4310@nf4303 nf4311@nf4305 nf4312@nf4307 nf4313@nf4309 nf4314@nf430b nf4315@nf430d) (let ((nf431e@kwd* nf4315@nf430d) (nf431f@mod** nf4314@nf430b) (nf4320@mr nf4313@nf4309) (nf4321@r nf4312@nf4307) (nf4322@m-exp-lab* nf4311@nf4305) (nf4323@m-exp-id* nf4310@nf4303) (nf4324@rhs* nf430f@nf4301) (nf4325@lex* nf430e@nf42ff)) (begin (vector-for-each (lambda (nf432e@id nf432f@lab) (nf2e26@extend-rib! nf4290@rib nf432e@id nf432f@lab)) nf4323@m-exp-id* nf4322@m-exp-lab*) (nf30cf@chi-body* (cdr nf4288@e*) nf4321@r nf4320@mr nf4325@lex* nf4324@rhs* nf431f@mod** nf431e@kwd* nf428f@exp* nf4290@rib nf4291@top?))))) (if (memv nf42b2@t '(library)) (begin (nf3139@library-expander (nf2e84@stx->datum nf429c@e)) (nf30cf@chi-body* (cdr nf4288@e*) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?)) (if (memv nf42b2@t '(export)) (let ((nf4332@t nf429c@e)) (let ((nf4334@ls/false (nf3077@syntax-dispatch nf4332@t '(_ . each-any)))) (if nf4334@ls/false (apply (lambda (nf4336@exp-decl*) (nf30cf@chi-body* (cdr nf4288@e*) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* (append nf4336@exp-decl* nf428f@exp*) nf4290@rib nf4291@top?)) nf4334@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4332@t)))) (if (memv nf42b2@t '(import)) (let ((nf4339@module-import? '#f) (nf433b@module-import '#f) (nf433d@library-import '#f)) (begin (set! nf4339@module-import? (lambda (nf438c@e) (let ((nf438e@t nf438c@e)) (let ((nf4390@ls/false (nf3077@syntax-dispatch nf438e@t '(_ any)))) (if (and nf4390@ls/false (apply (lambda (nf4392@id) (nf2e70@id? nf4392@id)) nf4390@ls/false)) (apply (lambda (nf4394@id) '#t) nf4390@ls/false) (let ((nf4396@t nf438e@t)) (let ((nf4398@ls/false (nf3077@syntax-dispatch nf4396@t '(_ . each-any)))) (if nf4398@ls/false (apply (lambda (nf439a@imp*) '#f) nf4398@ls/false) (let ((nf439c@t nf4396@t)) (let ((nf439e@ls/false (nf3077@syntax-dispatch nf439c@t '_))) (if nf439e@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"malformed import form" nf438c@e)) nf439e@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf439c@t)))))))))))) (set! nf433b@module-import (lambda (nf436a@e nf436b@r) (let ((nf436e@t nf436a@e)) (let ((nf4370@ls/false (nf3077@syntax-dispatch nf436e@t '(_ any)))) (if (and nf4370@ls/false (apply (lambda (nf4372@id) (nf2e70@id? nf4372@id)) nf4370@ls/false)) (apply (lambda (nf4374@id) (call-with-values (lambda () (nf2e92@syntax-type nf4374@id nf436b@r)) (lambda (nf437c@nf4377 nf437d@nf4379 nf437e@nf437b) (let ((nf4382@kwd nf437e@nf437b) (nf4383@value nf437d@nf4379) (nf4384@type nf437c@nf4377)) (let ((nf4388@t nf4384@type)) (if (memv nf4388@t '($module)) (let ((nf438a@iface nf4383@value)) (values (nf30cb@module-interface-exp-id* nf438a@iface nf4374@id) (nf30c5@module-interface-exp-lab-vec nf438a@iface))) (nf3157@syntax-violation '#f '"invalid import" nf436a@e))))))) nf4370@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf436e@t)))))) (set! nf433d@library-import (lambda (nf434e@e) (let ((nf4350@t nf434e@e)) (let ((nf4352@ls/false (nf3077@syntax-dispatch nf4350@t '(any . each-any)))) (if nf4352@ls/false (apply (lambda (nf4354@ctxt nf4355@imp*) (call-with-values (lambda () (nf30d9@parse-import-spec* (nf315d@syntax->datum nf4355@imp*))) (lambda (nf435c@nf4359 nf435d@nf435b) (let ((nf4360@subst-labels nf435d@nf435b) (nf4361@subst-names nf435c@nf4359)) (values (vector-map (lambda (nf4364@name) (nf2e50@datum->stx nf4354@ctxt nf4364@name)) nf4361@subst-names) nf4360@subst-labels))))) nf4352@ls/false) (let ((nf4366@t nf4350@t)) (let ((nf4368@ls/false (nf3077@syntax-dispatch nf4366@t '_))) (if nf4368@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid import form" nf434e@e)) nf4368@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4366@t))))))))) (begin (call-with-values (lambda () (if (nf4339@module-import? nf429c@e) (nf433b@module-import nf429c@e nf4289@r) (nf433d@library-import nf429c@e))) (lambda (nf4342@nf433f nf4343@nf4341) (let ((nf4346@lab* nf4343@nf4341) (nf4347@id* nf4342@nf433f)) (vector-for-each (lambda (nf434a@id nf434b@lab) (nf2e26@extend-rib! nf4290@rib nf434a@id nf434b@lab)) nf4347@id* nf4346@lab*)))) (nf30cf@chi-body* (cdr nf4288@e*) nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?)))) (if nf4291@top? (nf30cf@chi-body* (cdr nf4288@e*) nf4289@r nf428a@mr (cons (nf2df8@gen-lexical 'dummy) nf428b@lex*) (cons (cons 'top-expr nf429c@e) nf428c@rhs*) nf428d@mod** nf42b0@kwd* nf428f@exp* nf4290@rib nf4291@top?) (values nf4288@e* nf4289@r nf428a@mr nf428b@lex* nf428c@rhs* nf428d@mod** nf42b0@kwd* nf428f@exp*)))))))))))))))))))))) (set! nf4b75@nf30cf@chi-body* nf30cf@chi-body*) (set! nf30d1@expand-transformer (lambda (nf43a0@expr nf43a1@r) (let ((nf43a4@rtc (nf30dd@make-collector))) (let ((nf43a6@expanded-rhs (let ((nf43b0@nf43a9 nf30df@inv-collector) (nf43b1@nf43ab nf30e1@vis-collector) (nf43b2@nf43ad nf43a4@rtc) (nf43b3@nf43af (lambda (nf43b8@x) (values)))) (let ((nf43ba@swap (lambda () (begin (let ((nf43bc@t (nf43b0@nf43a9))) (begin (nf43b0@nf43a9 nf43b2@nf43ad) (set! nf43b2@nf43ad nf43bc@t))) (let ((nf43be@t (nf43b1@nf43ab))) (begin (nf43b1@nf43ab nf43b3@nf43af) (set! nf43b3@nf43af nf43be@t))))))) (dynamic-wind nf43ba@swap (lambda () (nf3099@chi-expr nf43a0@expr nf43a1@r nf43a1@r)) nf43ba@swap))))) (begin (for-each (let ((nf43c0@mark-visit (nf30e1@vis-collector))) (lambda (nf43c2@x) (begin (nf2c86@nf2ad4@invoke-library nf43c2@x) (nf43c0@mark-visit nf43c2@x)))) (nf43a4@rtc)) nf43a6@expanded-rhs))))) (set! nf4b76@nf30d1@expand-transformer nf30d1@expand-transformer) (set! nf30d3@parse-exports (lambda (nf43c4@exp*) (let nf43cc@f ((nf43c6@exp* nf43c4@exp*) (nf43c7@int* '()) (nf43c8@ext* '())) (if (null? nf43c6@exp*) (begin (if (not (nf2e78@valid-bound-ids? nf43c8@ext*)) (nf3157@syntax-violation 'export '"invalid exports" (nf30ad@find-dups nf43c8@ext*)) (void)) (values (map nf315d@syntax->datum nf43c8@ext*) nf43c7@int*)) (let ((nf43ce@t (car nf43c6@exp*))) (let ((nf43d0@ls/false (nf3077@syntax-dispatch nf43ce@t '(any . #(each (any any)))))) (if nf43d0@ls/false (apply (lambda (nf43d2@rename nf43d3@i* nf43d4@e*) (begin (if (not (and (eq? (nf315d@syntax->datum nf43d2@rename) 'rename) (for-all nf2e70@id? nf43d3@i*) (for-all nf2e70@id? nf43d4@e*))) (nf3157@syntax-violation 'export '"invalid export specifier" (car nf43c6@exp*)) (void)) (nf43cc@f (cdr nf43c6@exp*) (append nf43d3@i* nf43c7@int*) (append nf43d4@e* nf43c8@ext*)))) nf43d0@ls/false) (let ((nf43d8@t nf43ce@t)) (let ((nf43da@ls/false (nf3077@syntax-dispatch nf43d8@t 'any))) (if nf43da@ls/false (apply (lambda (nf43dc@ie) (begin (if (not (nf2e70@id? nf43dc@ie)) (nf3157@syntax-violation 'export '"invalid export" nf43dc@ie) (void)) (nf43cc@f (cdr nf43c6@exp*) (cons nf43dc@ie nf43c7@int*) (cons nf43dc@ie nf43c8@ext*)))) nf43da@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf43d8@t))))))))))) (set! nf4b77@nf30d3@parse-exports nf30d3@parse-exports) (set! nf30d5@parse-library-name (lambda (nf43de@spec) (let ((nf43e1@parse '#f)) (begin (set! nf43e1@parse (lambda (nf43ee@x) (let ((nf43f0@t nf43ee@x)) (let ((nf43f2@ls/false (nf3077@syntax-dispatch nf43f0@t '(each-any)))) (if (and nf43f2@ls/false (apply (lambda (nf43f4@v*) (for-all (lambda (nf43f6@x) (let ((nf43f8@x (nf315d@syntax->datum nf43f6@x))) (and (integer? nf43f8@x) (exact? nf43f8@x)))) nf43f4@v*)) nf43f2@ls/false)) (apply (lambda (nf43fa@v*) (values '() (map nf315d@syntax->datum nf43fa@v*))) nf43f2@ls/false) (let ((nf43fc@t nf43f0@t)) (let ((nf43fe@ls/false (nf3077@syntax-dispatch nf43fc@t '(any . any)))) (if (and nf43fe@ls/false (apply (lambda (nf4400@x nf4401@rest) (symbol? (nf315d@syntax->datum nf4400@x))) nf43fe@ls/false)) (apply (lambda (nf4404@x nf4405@rest) (call-with-values (lambda () (nf43e1@parse nf4405@rest)) (lambda (nf440c@nf4409 nf440d@nf440b) (let ((nf4410@v* nf440d@nf440b) (nf4411@x* nf440c@nf4409)) (values (cons (nf315d@syntax->datum nf4404@x) nf4411@x*) nf4410@v*))))) nf43fe@ls/false) (let ((nf4414@t nf43fc@t)) (let ((nf4416@ls/false (nf3077@syntax-dispatch nf4414@t '()))) (if nf4416@ls/false (apply (lambda () (values '() '())) nf4416@ls/false) (let ((nf4418@t nf4414@t)) (let ((nf441a@ls/false (nf3077@syntax-dispatch nf4418@t '_))) (if nf441a@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid library name" nf43de@spec)) nf441a@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4418@t))))))))))))))) (call-with-values (lambda () (nf43e1@parse nf43de@spec)) (lambda (nf43e6@nf43e3 nf43e7@nf43e5) (let ((nf43ea@ver* nf43e7@nf43e5) (nf43eb@name* nf43e6@nf43e3)) (begin (if (null? nf43eb@name*) (nf3157@syntax-violation '#f '"empty library name" nf43de@spec) (void)) (values nf43eb@name* nf43ea@ver*))))))))) (set! nf4b78@nf30d5@parse-library-name nf30d5@parse-library-name) (set! nf30d7@parse-library (lambda (nf441c@e) (let ((nf441e@t nf441c@e)) (let ((nf4420@ls/false (nf3077@syntax-dispatch nf441e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and nf4420@ls/false (apply (lambda (nf4422@library nf4423@name* nf4424@export nf4425@exp* nf4426@import nf4427@imp* nf4428@b*) (and (eq? (nf315d@syntax->datum nf4424@export) 'export) (eq? (nf315d@syntax->datum nf4426@import) 'import) (eq? (nf315d@syntax->datum nf4422@library) 'library))) nf4420@ls/false)) (apply (lambda (nf4430@library nf4431@name* nf4432@export nf4433@exp* nf4434@import nf4435@imp* nf4436@b*) (values nf4431@name* nf4433@exp* nf4435@imp* nf4436@b*)) nf4420@ls/false) (let ((nf443e@t nf441e@t)) (let ((nf4440@ls/false (nf3077@syntax-dispatch nf443e@t '_))) (if nf4440@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"malformed library" nf441c@e)) nf4440@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf443e@t))))))))) (set! nf4b79@nf30d7@parse-library nf30d7@parse-library) (set! nf30d9@parse-import-spec* (let ((nf4443@idsyn? '#f) (nf4445@dup-error '#f) (nf4447@merge-substs '#f) (nf4449@exclude* '#f) (nf444b@find* '#f) (nf444d@rem* '#f) (nf444f@remove-dups '#f) (nf4451@parse-library-name '#f) (nf4453@import-library '#f) (nf4455@get-import '#f) (nf4457@add-imports! '#f)) (begin (set! nf4443@idsyn? (lambda (nf464c@x) (symbol? (nf315d@syntax->datum nf464c@x)))) (set! nf4445@dup-error (lambda (nf464a@name) (nf3157@syntax-violation 'import '"two imports with different bindings" nf464a@name))) (set! nf4447@merge-substs (lambda (nf4638@s nf4639@subst) (let ((nf463d@insert-to-subst '#f)) (begin (set! nf463d@insert-to-subst (lambda (nf463e@a nf463f@subst) (let ((nf4642@name (car nf463e@a)) (nf4643@label (cdr nf463e@a))) (let ((nf4646@t (assq nf4642@name nf463f@subst))) (if nf4646@t ((lambda (nf4648@x) (if (eq? (cdr nf4648@x) nf4643@label) nf463f@subst (nf4445@dup-error nf4642@name))) nf4646@t) (cons nf463e@a nf463f@subst)))))) (if (null? nf4638@s) nf4639@subst (nf463d@insert-to-subst (car nf4638@s) (nf4447@merge-substs (cdr nf4638@s) nf4639@subst))))))) (set! nf4449@exclude* (lambda (nf4608@sym* nf4609@subst) (let ((nf460d@exclude '#f)) (begin (set! nf460d@exclude (lambda (nf4626@sym nf4627@subst) (if (null? nf4627@subst) (nf3157@syntax-violation 'import '"cannot rename unbound identifier" nf4626@sym) (if (eq? nf4626@sym (caar nf4627@subst)) (values (cdar nf4627@subst) (cdr nf4627@subst)) (let ((nf462a@a (car nf4627@subst))) (call-with-values (lambda () (nf460d@exclude nf4626@sym (cdr nf4627@subst))) (lambda (nf4630@nf462d nf4631@nf462f) (let ((nf4634@subst nf4631@nf462f) (nf4635@old nf4630@nf462d)) (values nf4635@old (cons nf462a@a nf4634@subst)))))))))) (if (null? nf4608@sym*) (values '() nf4609@subst) (call-with-values (lambda () (nf460d@exclude (car nf4608@sym*) nf4609@subst)) (lambda (nf4612@nf460f nf4613@nf4611) (let ((nf4616@subst nf4613@nf4611) (nf4617@old nf4612@nf460f)) (call-with-values (lambda () (nf4449@exclude* (cdr nf4608@sym*) nf4616@subst)) (lambda (nf461e@nf461b nf461f@nf461d) (let ((nf4622@subst nf461f@nf461d) (nf4623@old* nf461e@nf461b)) (values (cons nf4617@old nf4623@old*) nf4622@subst)))))))))))) (set! nf444b@find* (lambda (nf4600@sym* nf4601@subst) (map (lambda (nf4604@x) (let ((nf4606@t (assq nf4604@x nf4601@subst))) (if nf4606@t (cdr nf4606@t) (nf3157@syntax-violation 'import '"cannot find identifier" nf4604@x)))) nf4600@sym*))) (set! nf444d@rem* (lambda (nf45f8@sym* nf45f9@subst) (let nf45fe@f ((nf45fc@subst nf45f9@subst)) (if (null? nf45fc@subst) '() (if (memq (caar nf45fc@subst) nf45f8@sym*) (nf45fe@f (cdr nf45fc@subst)) (cons (car nf45fc@subst) (nf45fe@f (cdr nf45fc@subst)))))))) (set! nf444f@remove-dups (lambda (nf45f6@ls) (if (null? nf45f6@ls) '() (if (memq (car nf45f6@ls) (cdr nf45f6@ls)) (nf444f@remove-dups (cdr nf45f6@ls)) (cons (car nf45f6@ls) (nf444f@remove-dups (cdr nf45f6@ls))))))) (set! nf4451@parse-library-name (lambda (nf450e@spec) (let ((nf4511@subversion? '#f) (nf4513@subversion-pred '#f) (nf4515@version-pred '#f)) (begin (set! nf4511@subversion? (lambda (nf45f2@x) (let ((nf45f4@x (nf315d@syntax->datum nf45f2@x))) (and (integer? nf45f4@x) (exact? nf45f4@x) (>= nf45f4@x '0))))) (set! nf4513@subversion-pred (lambda (nf4592@x*) (let ((nf4594@t nf4592@x*)) (let ((nf4596@ls/false (nf3077@syntax-dispatch nf4594@t 'any))) (if (and nf4596@ls/false (apply (lambda (nf4598@n) (nf4511@subversion? nf4598@n)) nf4596@ls/false)) (apply (lambda (nf459a@n) (lambda (nf459c@x) (= nf459c@x (nf315d@syntax->datum nf459a@n)))) nf4596@ls/false) (let ((nf459e@t nf4594@t)) (let ((nf45a0@ls/false (nf3077@syntax-dispatch nf459e@t '(any . each-any)))) (if (and nf45a0@ls/false (apply (lambda (nf45a2@p? nf45a3@sub*) (eq? (nf315d@syntax->datum nf45a2@p?) 'and)) nf45a0@ls/false)) (apply (lambda (nf45a6@p? nf45a7@sub*) (let ((nf45aa@p* (map nf4513@subversion-pred nf45a7@sub*))) (lambda (nf45ac@x) (for-all (lambda (nf45ae@p) (nf45ae@p nf45ac@x)) nf45aa@p*)))) nf45a0@ls/false) (let ((nf45b0@t nf459e@t)) (let ((nf45b2@ls/false (nf3077@syntax-dispatch nf45b0@t '(any . each-any)))) (if (and nf45b2@ls/false (apply (lambda (nf45b4@p? nf45b5@sub*) (eq? (nf315d@syntax->datum nf45b4@p?) 'or)) nf45b2@ls/false)) (apply (lambda (nf45b8@p? nf45b9@sub*) (let ((nf45bc@p* (map nf4513@subversion-pred nf45b9@sub*))) (lambda (nf45be@x) (exists (lambda (nf45c0@p) (nf45c0@p nf45be@x)) nf45bc@p*)))) nf45b2@ls/false) (let ((nf45c2@t nf45b0@t)) (let ((nf45c4@ls/false (nf3077@syntax-dispatch nf45c2@t '(any any)))) (if (and nf45c4@ls/false (apply (lambda (nf45c6@p? nf45c7@sub) (eq? (nf315d@syntax->datum nf45c6@p?) 'not)) nf45c4@ls/false)) (apply (lambda (nf45ca@p? nf45cb@sub) (let ((nf45ce@p (nf4513@subversion-pred nf45cb@sub))) (lambda (nf45d0@x) (not (nf45ce@p nf45d0@x))))) nf45c4@ls/false) (let ((nf45d2@t nf45c2@t)) (let ((nf45d4@ls/false (nf3077@syntax-dispatch nf45d2@t '(any any)))) (if (and nf45d4@ls/false (apply (lambda (nf45d6@p? nf45d7@n) (and (eq? (nf315d@syntax->datum nf45d6@p?) '<=) (nf4511@subversion? nf45d7@n))) nf45d4@ls/false)) (apply (lambda (nf45da@p? nf45db@n) (lambda (nf45de@x) (<= nf45de@x (nf315d@syntax->datum nf45db@n)))) nf45d4@ls/false) (let ((nf45e0@t nf45d2@t)) (let ((nf45e2@ls/false (nf3077@syntax-dispatch nf45e0@t '(any any)))) (if (and nf45e2@ls/false (apply (lambda (nf45e4@p? nf45e5@n) (and (eq? (nf315d@syntax->datum nf45e4@p?) '>=) (nf4511@subversion? nf45e5@n))) nf45e2@ls/false)) (apply (lambda (nf45e8@p? nf45e9@n) (lambda (nf45ec@x) (>= nf45ec@x (nf315d@syntax->datum nf45e9@n)))) nf45e2@ls/false) (let ((nf45ee@t nf45e0@t)) (let ((nf45f0@ls/false (nf3077@syntax-dispatch nf45ee@t '_))) (if nf45f0@ls/false (apply (lambda () (nf3157@syntax-violation 'import '"invalid sub-version spec" nf450e@spec nf4592@x*)) nf45f0@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf45ee@t)))))))))))))))))))))))) (set! nf4515@version-pred (lambda (nf4542@x*) (let ((nf4544@t nf4542@x*)) (let ((nf4546@ls/false (nf3077@syntax-dispatch nf4544@t '()))) (if nf4546@ls/false (apply (lambda () (lambda (nf4548@x) '#t)) nf4546@ls/false) (let ((nf454a@t nf4544@t)) (let ((nf454c@ls/false (nf3077@syntax-dispatch nf454a@t '(any . each-any)))) (if (and nf454c@ls/false (apply (lambda (nf454e@c nf454f@ver*) (eq? (nf315d@syntax->datum nf454e@c) 'and)) nf454c@ls/false)) (apply (lambda (nf4552@c nf4553@ver*) (let ((nf4556@p* (map nf4515@version-pred nf4553@ver*))) (lambda (nf4558@x) (for-all (lambda (nf455a@p) (nf455a@p nf4558@x)) nf4556@p*)))) nf454c@ls/false) (let ((nf455c@t nf454a@t)) (let ((nf455e@ls/false (nf3077@syntax-dispatch nf455c@t '(any . each-any)))) (if (and nf455e@ls/false (apply (lambda (nf4560@c nf4561@ver*) (eq? (nf315d@syntax->datum nf4560@c) 'or)) nf455e@ls/false)) (apply (lambda (nf4564@c nf4565@ver*) (let ((nf4568@p* (map nf4515@version-pred nf4565@ver*))) (lambda (nf456a@x) (exists (lambda (nf456c@p) (nf456c@p nf456a@x)) nf4568@p*)))) nf455e@ls/false) (let ((nf456e@t nf455c@t)) (let ((nf4570@ls/false (nf3077@syntax-dispatch nf456e@t '(any any)))) (if (and nf4570@ls/false (apply (lambda (nf4572@c nf4573@ver) (eq? (nf315d@syntax->datum nf4572@c) 'not)) nf4570@ls/false)) (apply (lambda (nf4576@c nf4577@ver) (let ((nf457a@p (nf4515@version-pred nf4577@ver))) (lambda (nf457c@x) (not (nf457a@p nf457c@x))))) nf4570@ls/false) (let ((nf457e@t nf456e@t)) (let ((nf4580@ls/false (nf3077@syntax-dispatch nf457e@t 'each-any))) (if nf4580@ls/false (apply (lambda (nf4582@sub*) (let ((nf4584@p* (map nf4513@subversion-pred nf4582@sub*))) (lambda (nf4586@x) (let nf458c@f ((nf4588@p* nf4584@p*) (nf4589@x nf4586@x)) (if (null? nf4588@p*) '#t (if (null? nf4589@x) '#f (and ((car nf4588@p*) (car nf4589@x)) (nf458c@f (cdr nf4588@p*) (cdr nf4589@x))))))))) nf4580@ls/false) (let ((nf458e@t nf457e@t)) (let ((nf4590@ls/false (nf3077@syntax-dispatch nf458e@t '_))) (if nf4590@ls/false (apply (lambda () (nf3157@syntax-violation 'import '"invalid version spec" nf450e@spec nf4542@x*)) nf4590@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf458e@t))))))))))))))))))))) (let nf4518@f ((nf4516@x nf450e@spec)) (let ((nf451a@t nf4516@x)) (let ((nf451c@ls/false (nf3077@syntax-dispatch nf451a@t '(each-any)))) (if nf451c@ls/false (apply (lambda (nf451e@version-spec*) (values '() (nf4515@version-pred nf451e@version-spec*))) nf451c@ls/false) (let ((nf4520@t nf451a@t)) (let ((nf4522@ls/false (nf3077@syntax-dispatch nf4520@t '(any . any)))) (if (and nf4522@ls/false (apply (lambda (nf4524@x nf4525@x*) (nf4443@idsyn? nf4524@x)) nf4522@ls/false)) (apply (lambda (nf4528@x nf4529@x*) (call-with-values (lambda () (nf4518@f nf4529@x*)) (lambda (nf4530@nf452d nf4531@nf452f) (let ((nf4534@pred nf4531@nf452f) (nf4535@name nf4530@nf452d)) (values (cons (nf315d@syntax->datum nf4528@x) nf4535@name) nf4534@pred))))) nf4522@ls/false) (let ((nf4538@t nf4520@t)) (let ((nf453a@ls/false (nf3077@syntax-dispatch nf4538@t '()))) (if nf453a@ls/false (apply (lambda () (values '() (lambda (nf453c@x) '#t))) nf453a@ls/false) (let ((nf453e@t nf4538@t)) (let ((nf4540@ls/false (nf3077@syntax-dispatch nf453e@t '_))) (if nf4540@ls/false (apply (lambda () (nf3157@syntax-violation '#f '"invalid import spec" nf450e@spec)) nf4540@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf453e@t)))))))))))))))))) (set! nf4453@import-library (lambda (nf44fe@spec*) (call-with-values (lambda () (nf4451@parse-library-name nf44fe@spec*)) (lambda (nf4504@nf4501 nf4505@nf4503) (let ((nf4508@pred nf4505@nf4503) (nf4509@name nf4504@nf4501)) (begin (if (null? nf4509@name) (nf3157@syntax-violation 'import '"empty library name" nf44fe@spec*) (void)) (let ((nf450c@lib (nf2c7f@nf2ac6@find-library-by-name nf4509@name))) (begin (if (not nf450c@lib) (nf3157@syntax-violation 'import '"cannot find library with required name" nf4509@name) (void)) (if (not (nf4508@pred (nf2c59@nf2a7a@library-version nf450c@lib))) (nf3157@syntax-violation 'import '"library does not satisfy version specification" nf44fe@spec* nf450c@lib) (void)) ((nf30e3@imp-collector) nf450c@lib) (nf2c61@nf2a8a@library-subst nf450c@lib))))))))) (set! nf4455@get-import (lambda (nf4470@spec) (let ((nf4472@t nf4470@spec)) (let ((nf4474@ls/false (nf3077@syntax-dispatch nf4472@t '(any . each-any)))) (if (and nf4474@ls/false (apply (lambda (nf4476@x nf4477@x*) (not (memq (nf315d@syntax->datum nf4476@x) '(for rename except only prefix library)))) nf4474@ls/false)) (apply (lambda (nf447a@x nf447b@x*) (nf4453@import-library (cons nf447a@x nf447b@x*))) nf4474@ls/false) (let ((nf447e@t nf4472@t)) (let ((nf4480@ls/false (nf3077@syntax-dispatch nf447e@t '(any any . #(each (any any)))))) (if (and nf4480@ls/false (apply (lambda (nf4482@rename nf4483@isp nf4484@old* nf4485@new*) (and (eq? (nf315d@syntax->datum nf4482@rename) 'rename) (for-all nf4443@idsyn? nf4484@old*) (for-all nf4443@idsyn? nf4485@new*))) nf4480@ls/false)) (apply (lambda (nf448a@rename nf448b@isp nf448c@old* nf448d@new*) (let ((nf4492@subst (nf4455@get-import nf448b@isp)) (nf4493@old* (map nf315d@syntax->datum nf448c@old*)) (nf4494@new* (map nf315d@syntax->datum nf448d@new*))) (let ((nf4498@old-label* (nf444b@find* nf4493@old* nf4492@subst))) (let ((nf449a@subst (nf444d@rem* nf4493@old* nf4492@subst))) (nf4447@merge-substs (map cons nf4494@new* nf4498@old-label*) nf449a@subst))))) nf4480@ls/false) (let ((nf449c@t nf447e@t)) (let ((nf449e@ls/false (nf3077@syntax-dispatch nf449c@t '(any any . each-any)))) (if (and nf449e@ls/false (apply (lambda (nf44a0@except nf44a1@isp nf44a2@sym*) (and (eq? (nf315d@syntax->datum nf44a0@except) 'except) (for-all nf4443@idsyn? nf44a2@sym*))) nf449e@ls/false)) (apply (lambda (nf44a6@except nf44a7@isp nf44a8@sym*) (let ((nf44ac@subst (nf4455@get-import nf44a7@isp))) (nf444d@rem* (map nf315d@syntax->datum nf44a8@sym*) nf44ac@subst))) nf449e@ls/false) (let ((nf44ae@t nf449c@t)) (let ((nf44b0@ls/false (nf3077@syntax-dispatch nf44ae@t '(any any . each-any)))) (if (and nf44b0@ls/false (apply (lambda (nf44b2@only nf44b3@isp nf44b4@sym*) (and (eq? (nf315d@syntax->datum nf44b2@only) 'only) (for-all nf4443@idsyn? nf44b4@sym*))) nf44b0@ls/false)) (apply (lambda (nf44b8@only nf44b9@isp nf44ba@sym*) (let ((nf44be@subst (nf4455@get-import nf44b9@isp)) (nf44bf@sym* (map nf315d@syntax->datum nf44ba@sym*))) (let ((nf44c2@sym* (nf444f@remove-dups nf44bf@sym*))) (let ((nf44c4@lab* (nf444b@find* nf44c2@sym* nf44be@subst))) (map cons nf44c2@sym* nf44c4@lab*))))) nf44b0@ls/false) (let ((nf44c6@t nf44ae@t)) (let ((nf44c8@ls/false (nf3077@syntax-dispatch nf44c6@t '(any any any)))) (if (and nf44c8@ls/false (apply (lambda (nf44ca@prefix nf44cb@isp nf44cc@p) (and (eq? (nf315d@syntax->datum nf44ca@prefix) 'prefix) (nf4443@idsyn? nf44cc@p))) nf44c8@ls/false)) (apply (lambda (nf44d0@prefix nf44d1@isp nf44d2@p) (let ((nf44d6@subst (nf4455@get-import nf44d1@isp)) (nf44d7@prefix (symbol->string (nf315d@syntax->datum nf44d2@p)))) (map (lambda (nf44da@x) (cons (string->symbol (string-append nf44d7@prefix (symbol->string (car nf44da@x)))) (cdr nf44da@x))) nf44d6@subst))) nf44c8@ls/false) (let ((nf44dc@t nf44c6@t)) (let ((nf44de@ls/false (nf3077@syntax-dispatch nf44dc@t '(any each-any)))) (if (and nf44de@ls/false (apply (lambda (nf44e0@library nf44e1@spec*) (eq? (nf315d@syntax->datum nf44e0@library) 'library)) nf44de@ls/false)) (apply (lambda (nf44e4@library nf44e5@spec*) (nf4453@import-library nf44e5@spec*)) nf44de@ls/false) (let ((nf44e8@t nf44dc@t)) (let ((nf44ea@ls/false (nf3077@syntax-dispatch nf44e8@t '(any any . any)))) (if (and nf44ea@ls/false (apply (lambda (nf44ec@for nf44ed@isp nf44ee@rest) (eq? (nf315d@syntax->datum nf44ec@for) 'for)) nf44ea@ls/false)) (apply (lambda (nf44f2@for nf44f3@isp nf44f4@rest) (nf4455@get-import nf44f3@isp)) nf44ea@ls/false) (let ((nf44f8@t nf44e8@t)) (let ((nf44fa@ls/false (nf3077@syntax-dispatch nf44f8@t 'any))) (if nf44fa@ls/false (apply (lambda (nf44fc@spec) (nf3157@syntax-violation 'import '"invalid import spec" nf44fc@spec)) nf44fa@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf44f8@t))))))))))))))))))))))))))) (set! nf4457@add-imports! (lambda (nf4460@imp nf4461@h) (let ((nf4464@subst (nf4455@get-import nf4460@imp))) (for-each (lambda (nf4466@x) (let ((nf4468@name (car nf4466@x)) (nf4469@label (cdr nf4466@x))) (let ((nf446c@t (hashtable-ref nf4461@h nf4468@name '#f))) (if nf446c@t ((lambda (nf446e@l) (if (not (eq? nf446e@l nf4469@label)) (nf4445@dup-error nf4468@name) (void))) nf446c@t) (hashtable-set! nf4461@h nf4468@name nf4469@label))))) nf4464@subst)))) (lambda (nf4458@imp*) (let nf445e@f ((nf445a@imp* nf4458@imp*) (nf445b@h (make-eq-hashtable))) (if (null? nf445a@imp*) (hashtable-entries nf445b@h) (begin (nf4457@add-imports! (car nf445a@imp*) nf445b@h) (nf445e@f (cdr nf445a@imp*) nf445b@h)))))))) (set! nf4b7a@nf30d9@parse-import-spec* nf30d9@parse-import-spec*) (set! nf30db@make-top-rib (lambda (nf464e@names nf464f@labels) (let ((nf4652@rib (nf2e24@make-empty-rib))) (begin (vector-for-each (lambda (nf4654@name nf4655@label) (begin (if (not (symbol? nf4654@name)) (error 'make-top-rib '"BUG: not a symbol" nf4654@name) (void)) (nf2e28@extend-rib/nc! nf4652@rib (make-simple-struct 'stx '5 (list nf4654@name nf2df4@top-mark* '() '())) nf4655@label))) nf464e@names nf464f@labels) nf4652@rib)))) (set! nf4b7b@nf30db@make-top-rib nf30db@make-top-rib) (set! nf30dd@make-collector (lambda () (let ((nf4658@ls '())) (lambda nf465c (let ((nf465d (length nf465c))) (if (= nf465d '0) (apply (lambda () nf4658@ls) nf465c) (if (= nf465d '1) (apply (lambda (nf465a@x) (set! nf4658@ls (nf2ded@set-cons nf465a@x nf4658@ls))) nf465c) (error 'apply '"invalid arg count")))))))) (set! nf4b7c@nf30dd@make-collector nf30dd@make-collector) (set! nf30df@inv-collector (nf29ba@nf2899@make-parameter (lambda nf465e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (nf4660@x) (begin (if (not (procedure? nf4660@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" nf4660@x) (void)) nf4660@x)))) (set! nf4b7d@nf30df@inv-collector nf30df@inv-collector) (set! nf30e1@vis-collector (nf29ba@nf2899@make-parameter (lambda nf4662@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (nf4664@x) (begin (if (not (procedure? nf4664@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" nf4664@x) (void)) nf4664@x)))) (set! nf4b7e@nf30e1@vis-collector nf30e1@vis-collector) (set! nf30e3@imp-collector (nf29ba@nf2899@make-parameter (lambda nf4666@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (nf4668@x) (begin (if (not (procedure? nf4668@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" nf4668@x) (void)) nf4668@x)))) (set! nf4b7f@nf30e3@imp-collector nf30e3@imp-collector) (set! nf30e5@chi-library-internal (lambda (nf466a@e* nf466b@rib nf466c@top?) (call-with-values (lambda () (nf30cf@chi-body* nf466a@e* '() '() '() '() '() '() '() nf466b@rib nf466c@top?)) (lambda (nf4680@nf4671 nf4681@nf4673 nf4682@nf4675 nf4683@nf4677 nf4684@nf4679 nf4685@nf467b nf4686@nf467d nf4687@nf467f) (let ((nf4690@exp* nf4687@nf467f) (nf4691@_kwd* nf4686@nf467d) (nf4692@mod** nf4685@nf467b) (nf4693@rhs* nf4684@nf4679) (nf4694@lex* nf4683@nf4677) (nf4695@mr nf4682@nf4675) (nf4696@r nf4681@nf4673) (nf4697@e* nf4680@nf4671)) (values (append (apply append (reverse nf4692@mod**)) nf4697@e*) nf4696@r nf4695@mr (reverse nf4694@lex*) (reverse nf4693@rhs*) nf4690@exp*)))))) (set! nf4b80@nf30e5@chi-library-internal nf30e5@chi-library-internal) (set! nf30e7@chi-interaction-expr (lambda (nf46a0@e nf46a1@rib nf46a2@r) (call-with-values (lambda () (nf30cf@chi-body* (list nf46a0@e) nf46a2@r nf46a2@r '() '() '() '() '() nf46a1@rib '#t)) (lambda (nf46b6@nf46a7 nf46b7@nf46a9 nf46b8@nf46ab nf46b9@nf46ad nf46ba@nf46af nf46bb@nf46b1 nf46bc@nf46b3 nf46bd@nf46b5) (let ((nf46c6@_exp* nf46bd@nf46b5) (nf46c7@_kwd* nf46bc@nf46b3) (nf46c8@mod** nf46bb@nf46b1) (nf46c9@rhs* nf46ba@nf46af) (nf46ca@lex* nf46b9@nf46ad) (nf46cb@mr nf46b8@nf46ab) (nf46cc@r nf46b7@nf46a9) (nf46cd@e* nf46b6@nf46a7)) (let ((nf46d6@e* (nf30a7@expand-interaction-rhs*/init* (reverse nf46ca@lex*) (reverse nf46c9@rhs*) (append (apply append (reverse nf46c8@mod**)) nf46cd@e*) nf46cc@r nf46cb@mr))) (let ((nf46d8@e (if (null? nf46d6@e*) (nf2dd6@nf2d31@build-void) (if (null? (cdr nf46d6@e*)) (car nf46d6@e*) (nf2dd5@nf2d2f@build-sequence '#f nf46d6@e*))))) (values nf46d8@e nf46cc@r)))))))) (set! nf4b81@nf30e7@chi-interaction-expr nf30e7@chi-interaction-expr) (set! nf30e9@library-body-expander (lambda (nf46da@name nf46db@main-exp* nf46dc@imp* nf46dd@b* nf46de@top?) (let ((nf46e5@itc '#f)) (begin (set! nf46e5@itc (nf30dd@make-collector)) (let ((nf46ee@nf46e7 nf30e3@imp-collector) (nf46ef@nf46e9 nf3167@top-level-context) (nf46f0@nf46eb nf46e5@itc) (nf46f1@nf46ed '#f)) (let ((nf46f6@swap (lambda () (begin (let ((nf46f8@t (nf46ee@nf46e7))) (begin (nf46ee@nf46e7 nf46f0@nf46eb) (set! nf46f0@nf46eb nf46f8@t))) (let ((nf46fa@t (nf46ef@nf46e9))) (begin (nf46ef@nf46e9 nf46f1@nf46ed) (set! nf46f1@nf46ed nf46fa@t))))))) (dynamic-wind nf46f6@swap (lambda () (call-with-values (lambda () (nf30d9@parse-import-spec* nf46dc@imp*)) (lambda (nf4700@nf46fd nf4701@nf46ff) (let ((nf4704@subst-labels nf4701@nf46ff) (nf4705@subst-names nf4700@nf46fd)) (let ((nf4708@rib (nf30db@make-top-rib nf4705@subst-names nf4704@subst-labels))) (let ((nf470b@wrap '#f)) (begin (set! nf470b@wrap (lambda (nf4786@x) (make-simple-struct 'stx '5 (list nf4786@x nf2df4@top-mark* (list nf4708@rib) '())))) (let ((nf470c@b* (map nf470b@wrap nf46dd@b*)) (nf470d@main-exp* (map nf470b@wrap nf46db@main-exp*)) (nf470e@rtc (nf30dd@make-collector)) (nf470f@vtc (nf30dd@make-collector))) (let ((nf471c@nf4715 nf30df@inv-collector) (nf471d@nf4717 nf30e1@vis-collector) (nf471e@nf4719 nf470e@rtc) (nf471f@nf471b nf470f@vtc)) (let ((nf4724@swap (lambda () (begin (let ((nf4726@t (nf471c@nf4715))) (begin (nf471c@nf4715 nf471e@nf4719) (set! nf471e@nf4719 nf4726@t))) (let ((nf4728@t (nf471d@nf4717))) (begin (nf471d@nf4717 nf471f@nf471b) (set! nf471f@nf471b nf4728@t))))))) (dynamic-wind nf4724@swap (lambda () (call-with-values (lambda () (nf30e5@chi-library-internal nf470c@b* nf4708@rib nf46de@top?)) (lambda (nf4736@nf472b nf4737@nf472d nf4738@nf472f nf4739@nf4731 nf473a@nf4733 nf473b@nf4735) (let ((nf4742@internal-exp* nf473b@nf4735) (nf4743@rhs* nf473a@nf4733) (nf4744@lex* nf4739@nf4731) (nf4745@mr nf4738@nf472f) (nf4746@r nf4737@nf472d) (nf4747@init* nf4736@nf472b)) (call-with-values (lambda () (nf30d3@parse-exports (append nf470d@main-exp* nf4742@internal-exp*))) (lambda (nf4752@nf474f nf4753@nf4751) (let ((nf4756@exp-id* nf4753@nf4751) (nf4757@exp-name* nf4752@nf474f)) (begin (nf2e2c@seal-rib! nf4708@rib) (let ((nf475a@init* (nf3095@chi-expr* nf4747@init* nf4746@r nf4745@mr))) (let ((nf475c@rhs* (nf30a9@chi-rhs* nf4743@rhs* nf4746@r nf4745@mr))) (begin (nf2e2e@unseal-rib! nf4708@rib) (let ((nf475e@loc* (map nf2dfa@gen-global nf4744@lex*)) (nf475f@export-subst (nf3141@make-export-subst nf4757@exp-name* nf4756@exp-id*))) (let ((nf4763@errstr '#f)) (begin (set! nf4763@errstr '"attempt to export mutated variable") (call-with-values (lambda () (nf3143@make-export-env/macros nf4744@lex* nf475e@loc* nf4746@r)) (lambda (nf476a@nf4765 nf476b@nf4767 nf476c@nf4769) (let ((nf4770@macro* nf476c@nf4769) (nf4771@global* nf476b@nf4767) (nf4772@export-env nf476a@nf4765)) (begin (for-each (lambda (nf4776@s) (let ((nf4778@name (car nf4776@s)) (nf4779@label (cdr nf4776@s))) (let ((nf477c@p (assq nf4779@label nf4772@export-env))) (if nf477c@p (let ((nf477e@b (cdr nf477c@p))) (let ((nf4780@type (car nf477e@b))) (if (eq? nf4780@type 'mutable) (nf3157@syntax-violation 'export nf4763@errstr nf4778@name) (void)))) (void))))) nf475f@export-subst) (let ((nf4782@invoke-body (nf2ddb@nf2d3b@build-library-letrec* '#f nf46da@name nf4744@lex* nf475e@loc* nf475c@rhs* (if (null? nf475a@init*) (nf2dd6@nf2d31@build-void) (nf2dd5@nf2d2f@build-sequence '#f nf475a@init*)))) (nf4783@invoke-definitions (map nf2dd2@nf2c8e@build-global-define (map cdr nf4771@global*)))) (values (nf46e5@itc) (nf470e@rtc) (nf470f@vtc) (nf2dd5@nf2d2f@build-sequence '#f (append nf4783@invoke-definitions (list nf4782@invoke-body))) nf4770@macro* nf475f@export-subst nf4772@export-env)))))))))))))))))))) nf4724@swap))))))))))) nf46f6@swap))))))) (set! nf4b82@nf30e9@library-body-expander nf30e9@library-body-expander) (set! nf30eb@core-library-expander (lambda (nf4788@e nf4789@verify-name) (call-with-values (lambda () (nf30d7@parse-library nf4788@e)) (lambda (nf4794@nf478d nf4795@nf478f nf4796@nf4791 nf4797@nf4793) (let ((nf479c@b* nf4797@nf4793) (nf479d@imp* nf4796@nf4791) (nf479e@exp* nf4795@nf478f) (nf479f@name* nf4794@nf478d)) (call-with-values (lambda () (nf30d5@parse-library-name nf479f@name*)) (lambda (nf47a8@nf47a5 nf47a9@nf47a7) (let ((nf47ac@ver nf47a9@nf47a7) (nf47ad@name nf47a8@nf47a5)) (begin (nf4789@verify-name nf47ad@name) (call-with-values (lambda () (nf30e9@library-body-expander nf47ad@name nf479e@exp* nf479d@imp* nf479c@b* '#f)) (lambda (nf47be@nf47b1 nf47bf@nf47b3 nf47c0@nf47b5 nf47c1@nf47b7 nf47c2@nf47b9 nf47c3@nf47bb nf47c4@nf47bd) (let ((nf47cc@export-env nf47c4@nf47bd) (nf47cd@export-subst nf47c3@nf47bb) (nf47ce@visit-code nf47c2@nf47b9) (nf47cf@invoke-code nf47c1@nf47b7) (nf47d0@visit-req* nf47c0@nf47b5) (nf47d1@invoke-req* nf47bf@nf47b3) (nf47d2@imp* nf47be@nf47b1)) (values nf47ad@name nf47ac@ver nf47d2@imp* nf47d1@invoke-req* nf47d0@visit-req* nf47cf@invoke-code nf47ce@visit-code nf47cd@export-subst nf47cc@export-env))))))))))))) (set! nf4b83@nf30eb@core-library-expander nf30eb@core-library-expander) (set! nf30ed@parse-top-level-program (lambda (nf47da@e*) (let ((nf47dc@t nf47da@e*)) (let ((nf47de@ls/false (nf3077@syntax-dispatch nf47dc@t '((any . each-any) . each-any)))) (if (and nf47de@ls/false (apply (lambda (nf47e0@import nf47e1@imp* nf47e2@b*) (eq? (nf315d@syntax->datum nf47e0@import) 'import)) nf47de@ls/false)) (apply (lambda (nf47e6@import nf47e7@imp* nf47e8@b*) (values nf47e7@imp* nf47e8@b*)) nf47de@ls/false) (let ((nf47ec@t nf47dc@t)) (let ((nf47ee@ls/false (nf3077@syntax-dispatch nf47ec@t '((any . any) . any)))) (if (and nf47ee@ls/false (apply (lambda (nf47f0@import nf47f1@x nf47f2@y) (eq? (nf315d@syntax->datum nf47f0@import) 'import)) nf47ee@ls/false)) (apply (lambda (nf47f6@import nf47f7@x nf47f8@y) (nf3157@syntax-violation 'expander '"invalid syntax of top-level program" (nf2e6a@syntax-car nf47da@e*))) nf47ee@ls/false) (let ((nf47fc@t nf47ec@t)) (let ((nf47fe@ls/false (nf3077@syntax-dispatch nf47fc@t '_))) (if nf47fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) nf47fe@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf47fc@t)))))))))))) (set! nf4b84@nf30ed@parse-top-level-program nf30ed@parse-top-level-program) (set! nf30ef@top-level-expander (lambda (nf4800@e*) (call-with-values (lambda () (nf30ed@parse-top-level-program nf4800@e*)) (lambda (nf4806@nf4803 nf4807@nf4805) (let ((nf480a@b* nf4807@nf4805) (nf480b@imp* nf4806@nf4803)) (call-with-values (lambda () (nf30e9@library-body-expander '() '() nf480b@imp* nf480a@b* '#t)) (lambda (nf481c@nf480f nf481d@nf4811 nf481e@nf4813 nf481f@nf4815 nf4820@nf4817 nf4821@nf4819 nf4822@nf481b) (let ((nf482a@export-env nf4822@nf481b) (nf482b@export-subst nf4821@nf4819) (nf482c@visit-code nf4820@nf4817) (nf482d@invoke-code nf481f@nf4815) (nf482e@visit-req* nf481e@nf4813) (nf482f@invoke-req* nf481d@nf4811) (nf4830@imp* nf481c@nf480f)) (values nf482f@invoke-req* nf482d@invoke-code))))))))) (set! nf4b85@nf30ef@top-level-expander nf30ef@top-level-expander) (set! nf30f1@rp (nf29b7@nf2893@make-record-printer 'env (lambda (nf4838@x nf4839@p nf483a@wr) (display '"#<environment>" nf4839@p)))) (set! nf4b86@nf30f1@rp nf30f1@rp) (set! nf30fb@env? (lambda (nf483e@x) (and (simple-struct? nf483e@x) (eq? (simple-struct-name nf483e@x) 'env)))) (set! nf4b87@nf30fb@env? nf30fb@env?) (set! nf30fd@env-names (lambda (nf4840@x) (simple-struct-ref nf4840@x '0))) (set! nf4b88@nf30fd@env-names nf30fd@env-names) (set! nf30ff@set-env-names! (lambda (nf4842@x nf4843@val) (simple-struct-set! nf4842@x '0 nf4843@val))) (set! nf4b89@nf30ff@set-env-names! nf30ff@set-env-names!) (set! nf3101@env-labels (lambda (nf4846@x) (simple-struct-ref nf4846@x '1))) (set! nf4b8a@nf3101@env-labels nf3101@env-labels) (set! nf3103@set-env-labels! (lambda (nf4848@x nf4849@val) (simple-struct-set! nf4848@x '1 nf4849@val))) (set! nf4b8b@nf3103@set-env-labels! nf3103@set-env-labels!) (set! nf3105@env-itc (lambda (nf484c@x) (simple-struct-ref nf484c@x '2))) (set! nf4b8c@nf3105@env-itc nf3105@env-itc) (set! nf3107@set-env-itc! (lambda (nf484e@x nf484f@val) (simple-struct-set! nf484e@x '2 nf484f@val))) (set! nf4b8d@nf3107@set-env-itc! nf3107@set-env-itc!) (set! nf3109@dummy '3) (set! nf4b8e@nf3109@dummy nf3109@dummy) (set! nf310b@rp (nf29b7@nf2893@make-record-printer 'interaction-env (lambda (nf4852@x nf4853@p nf4854@wr) (display '"#<environment>" nf4853@p)))) (set! nf4b8f@nf310b@rp nf310b@rp) (set! nf3115@interaction-env? (lambda (nf4858@x) (and (simple-struct? nf4858@x) (eq? (simple-struct-name nf4858@x) 'interaction-env)))) (set! nf4b90@nf3115@interaction-env? nf3115@interaction-env?) (set! nf3117@interaction-env-rib (lambda (nf485a@x) (simple-struct-ref nf485a@x '0))) (set! nf4b91@nf3117@interaction-env-rib nf3117@interaction-env-rib) (set! nf3119@set-interaction-env-rib! (lambda (nf485c@x nf485d@val) (simple-struct-set! nf485c@x '0 nf485d@val))) (set! nf4b92@nf3119@set-interaction-env-rib! nf3119@set-interaction-env-rib!) (set! nf311b@interaction-env-r (lambda (nf4860@x) (simple-struct-ref nf4860@x '1))) (set! nf4b93@nf311b@interaction-env-r nf311b@interaction-env-r) (set! nf311d@set-interaction-env-r! (lambda (nf4862@x nf4863@val) (simple-struct-set! nf4862@x '1 nf4863@val))) (set! nf4b94@nf311d@set-interaction-env-r! nf311d@set-interaction-env-r!) (set! nf311f@interaction-env-locs (lambda (nf4866@x) (simple-struct-ref nf4866@x '2))) (set! nf4b95@nf311f@interaction-env-locs nf311f@interaction-env-locs) (set! nf3121@set-interaction-env-locs! (lambda (nf4868@x nf4869@val) (simple-struct-set! nf4868@x '2 nf4869@val))) (set! nf4b96@nf3121@set-interaction-env-locs! nf3121@set-interaction-env-locs!) (set! nf3123@dummy '3) (set! nf4b97@nf3123@dummy nf3123@dummy) (set! nf3125@interaction-environment-symbols (lambda () (nf312d@environment-symbols (nf3165@interaction-environment)))) (set! nf4b98@nf3125@interaction-environment-symbols nf3125@interaction-environment-symbols) (set! nf3127@environment-bindings (lambda (nf486c@e) (vector->list (vector-map (lambda (nf486e@name nf486f@label) (nf3129@parse-binding (cons nf486e@name (nf2c85@nf2ad2@imported-label->binding nf486f@label)))) (nf30fd@env-names nf486c@e) (nf3101@env-labels nf486c@e))))) (set! nf4b99@nf3127@environment-bindings nf3127@environment-bindings) (set! nf3129@parse-binding (lambda (nf4872@b) (cons (car nf4872@b) (let ((nf4874@t (cadr nf4872@b))) (if (memv nf4874@t '(core-prim global)) 'procedure (if (memv nf4874@t '(core-macro macro global-macro)) 'syntax (if (memv nf4874@t '($core-rtd)) 'record (if (eq? (car nf4872@b) (cadr nf4872@b)) 'syntax 'unknown)))))))) (set! nf4b9a@nf3129@parse-binding nf3129@parse-binding) (set! nf312b@environment? (lambda (nf4876@x) (or (nf30fb@env? nf4876@x) (nf3115@interaction-env? nf4876@x)))) (set! nf4b9b@nf312b@environment? nf312b@environment?) (set! nf312d@environment-symbols (lambda (nf4878@x) (if (nf30fb@env? nf4878@x) (vector->list (nf30fd@env-names nf4878@x)) (if (nf3115@interaction-env? nf4878@x) (map values (nf2e0e@rib-sym* (nf3117@interaction-env-rib nf4878@x))) (assertion-violation 'environment-symbols '"not an environment" nf4878@x))))) (set! nf4b9c@nf312d@environment-symbols nf312d@environment-symbols) (set! nf312f@environment (lambda nf487a@imp* (let ((nf487c@itc (nf30dd@make-collector))) (let ((nf4882@nf487f nf30e3@imp-collector) (nf4883@nf4881 nf487c@itc)) (let ((nf4886@swap (lambda () (let ((nf4888@t (nf4882@nf487f))) (begin (nf4882@nf487f nf4883@nf4881) (set! nf4883@nf4881 nf4888@t)))))) (dynamic-wind nf4886@swap (lambda () (call-with-values (lambda () (nf30d9@parse-import-spec* nf487a@imp*)) (lambda (nf488e@nf488b nf488f@nf488d) (let ((nf4892@subst-labels nf488f@nf488d) (nf4893@subst-names nf488e@nf488b)) (make-simple-struct 'env '4 (list nf4893@subst-names nf4892@subst-labels nf487c@itc)))))) nf4886@swap)))))) (set! nf4b9d@nf312f@environment nf312f@environment) (set! nf3131@null-environment (lambda (nf4896@n) (begin (if (not (eqv? nf4896@n '5)) (assertion-violation 'null-environment '"not 5" nf4896@n) (void)) (nf312f@environment '(psyntax null-environment-5))))) (set! nf4b9e@nf3131@null-environment nf3131@null-environment) (set! nf3133@scheme-report-environment (lambda (nf4898@n) (begin (if (not (eqv? nf4898@n '5)) (assertion-violation 'scheme-report-environment '"not 5" nf4898@n) (void)) (nf312f@environment '(psyntax scheme-report-environment-5))))) (set! nf4b9f@nf3133@scheme-report-environment nf3133@scheme-report-environment) (set! nf3135@expand (lambda (nf489a@x nf489b@env) (if (nf30fb@env? nf489b@env) (let ((nf489e@rib (nf30db@make-top-rib (nf30fd@env-names nf489b@env) (nf3101@env-labels nf489b@env)))) (let ((nf48a0@x (make-simple-struct 'stx '5 (list nf489a@x nf2df4@top-mark* (list nf489e@rib) '()))) (nf48a1@itc (nf3105@env-itc nf489b@env)) (nf48a2@rtc (nf30dd@make-collector)) (nf48a3@vtc (nf30dd@make-collector))) (let ((nf48a8@x (let ((nf48ba@nf48ab nf3167@top-level-context) (nf48bb@nf48ad nf30df@inv-collector) (nf48bc@nf48af nf30e1@vis-collector) (nf48bd@nf48b1 nf30e3@imp-collector) (nf48be@nf48b3 '#f) (nf48bf@nf48b5 nf48a2@rtc) (nf48c0@nf48b7 nf48a3@vtc) (nf48c1@nf48b9 nf48a1@itc)) (let ((nf48ca@swap (lambda () (begin (let ((nf48cc@t (nf48ba@nf48ab))) (begin (nf48ba@nf48ab nf48be@nf48b3) (set! nf48be@nf48b3 nf48cc@t))) (let ((nf48ce@t (nf48bb@nf48ad))) (begin (nf48bb@nf48ad nf48bf@nf48b5) (set! nf48bf@nf48b5 nf48ce@t))) (let ((nf48d0@t (nf48bc@nf48af))) (begin (nf48bc@nf48af nf48c0@nf48b7) (set! nf48c0@nf48b7 nf48d0@t))) (let ((nf48d2@t (nf48bd@nf48b1))) (begin (nf48bd@nf48b1 nf48c1@nf48b9) (set! nf48c1@nf48b9 nf48d2@t))))))) (dynamic-wind nf48ca@swap (lambda () (nf3099@chi-expr nf48a0@x '() '())) nf48ca@swap))))) (begin (nf2e2c@seal-rib! nf489e@rib) (values nf48a8@x (nf48a2@rtc)))))) (if (nf3115@interaction-env? nf489b@env) (let ((nf48d4@rib (nf3117@interaction-env-rib nf489b@env)) (nf48d5@r (nf311b@interaction-env-r nf489b@env)) (nf48d6@rtc (nf30dd@make-collector))) (let ((nf48da@x (make-simple-struct 'stx '5 (list nf489a@x nf2df4@top-mark* (list nf48d4@rib) '())))) (call-with-values (lambda () (let ((nf48f0@nf48e1 nf3167@top-level-context) (nf48f1@nf48e3 nf30df@inv-collector) (nf48f2@nf48e5 nf30e1@vis-collector) (nf48f3@nf48e7 nf30e3@imp-collector) (nf48f4@nf48e9 nf489b@env) (nf48f5@nf48eb nf48d6@rtc) (nf48f6@nf48ed (nf30dd@make-collector)) (nf48f7@nf48ef (nf30dd@make-collector))) (let ((nf4900@swap (lambda () (begin (let ((nf4902@t (nf48f0@nf48e1))) (begin (nf48f0@nf48e1 nf48f4@nf48e9) (set! nf48f4@nf48e9 nf4902@t))) (let ((nf4904@t (nf48f1@nf48e3))) (begin (nf48f1@nf48e3 nf48f5@nf48eb) (set! nf48f5@nf48eb nf4904@t))) (let ((nf4906@t (nf48f2@nf48e5))) (begin (nf48f2@nf48e5 nf48f6@nf48ed) (set! nf48f6@nf48ed nf4906@t))) (let ((nf4908@t (nf48f3@nf48e7))) (begin (nf48f3@nf48e7 nf48f7@nf48ef) (set! nf48f7@nf48ef nf4908@t))))))) (dynamic-wind nf4900@swap (lambda () (nf30e7@chi-interaction-expr nf48da@x nf48d4@rib nf48d5@r)) nf4900@swap)))) (lambda (nf490a@nf48dd nf490b@nf48df) (let ((nf490e@r^ nf490b@nf48df) (nf490f@e nf490a@nf48dd)) (begin (nf311d@set-interaction-env-r! nf489b@env nf490e@r^) (values nf490f@e (nf48d6@rtc)))))))) (assertion-violation 'expand '"not an environment" nf489b@env))))) (set! nf4ba0@nf3135@expand nf3135@expand) (set! nf3137@eval (lambda (nf4912@x nf4913@env) (begin (if (not (nf312b@environment? nf4913@env)) (error 'eval '"not an environment" nf4913@env) (void)) (call-with-values (lambda () (nf3135@expand nf4912@x nf4913@env)) (lambda (nf491a@nf4917 nf491b@nf4919) (let ((nf491e@invoke-req* nf491b@nf4919) (nf491f@x nf491a@nf4917)) (begin (for-each nf2c86@nf2ad4@invoke-library nf491e@invoke-req*) (eval-core (nf2a10@nf29c8@expanded->core nf491f@x))))))))) (set! nf4ba1@nf3137@eval nf3137@eval) (set! nf3139@library-expander (lambda nf4990 (let ((nf4991 (length nf4990))) (if (= nf4991 '3) (apply (lambda (nf4922@x nf4923@filename nf4924@verify-name) (let ((nf4929@build-visit-code '#f) (nf492b@visit! '#f)) (begin (set! nf4929@build-visit-code (lambda (nf497e@macro*) (if (null? nf497e@macro*) (nf2dd6@nf2d31@build-void) (nf2dd5@nf2d2f@build-sequence '#f (map (lambda (nf4980@x) (let ((nf4982@loc (car nf4980@x)) (nf4983@src (cddr nf4980@x))) (list 'set! nf4982@loc nf4983@src))) nf497e@macro*))))) (set! nf492b@visit! (lambda (nf4976@macro*) (for-each (lambda (nf4978@x) (let ((nf497a@loc (car nf4978@x)) (nf497b@proc (cadr nf4978@x))) (set-symbol-value! nf497a@loc nf497b@proc))) nf4976@macro*))) (call-with-values (lambda () (nf30eb@core-library-expander nf4922@x nf4924@verify-name)) (lambda (nf493e@nf492d nf493f@nf492f nf4940@nf4931 nf4941@nf4933 nf4942@nf4935 nf4943@nf4937 nf4944@nf4939 nf4945@nf493b nf4946@nf493d) (let ((nf4950@export-env nf4946@nf493d) (nf4951@export-subst nf4945@nf493b) (nf4952@macro* nf4944@nf4939) (nf4953@invoke-code nf4943@nf4937) (nf4954@vis* nf4942@nf4935) (nf4955@inv* nf4941@nf4933) (nf4956@imp* nf4940@nf4931) (nf4957@ver nf493f@nf492f) (nf4958@name nf493e@nf492d)) (let ((nf4962@id (gensym)) (nf4963@name nf4958@name) (nf4964@ver nf4957@ver) (nf4965@imp* (map nf2c8a@nf2adc@library-spec nf4956@imp*)) (nf4966@vis* (map nf2c8a@nf2adc@library-spec nf4954@vis*)) (nf4967@inv* (map nf2c8a@nf2adc@library-spec nf4955@inv*)) (nf4968@visit-proc (lambda () (nf492b@visit! nf4952@macro*))) (nf4969@invoke-proc (lambda () (eval-core (nf2a10@nf29c8@expanded->core nf4953@invoke-code)))) (nf496a@visit-code (nf4929@build-visit-code nf4952@macro*)) (nf496b@invoke-code nf4953@invoke-code)) (begin (nf2c84@nf2ad0@install-library nf4962@id nf4963@name nf4964@ver nf4965@imp* nf4966@vis* nf4967@inv* nf4951@export-subst nf4950@export-env nf4968@visit-proc nf4969@invoke-proc nf496a@visit-code nf496b@invoke-code '#t nf4923@filename) (values nf4962@id nf4963@name nf4964@ver nf4965@imp* nf4966@vis* nf4967@inv* nf496b@invoke-code nf496a@visit-code nf4951@export-subst nf4950@export-env))))))))) nf4990) (if (= nf4991 '2) (apply (lambda (nf4986@x nf4987@filename) (nf3139@library-expander nf4986@x nf4987@filename (lambda (nf498a@x) (values)))) nf4990) (if (= nf4991 '1) (apply (lambda (nf498c@x) (nf3139@library-expander nf498c@x '#f (lambda (nf498e@x) (values)))) nf4990) (error 'apply '"invalid arg count"))))))) (set! nf4ba2@nf3139@library-expander nf3139@library-expander) (set! nf313b@boot-library-expand (lambda (nf4992@x) (call-with-values (lambda () (nf3139@library-expander nf4992@x)) (lambda (nf49a8@nf4995 nf49a9@nf4997 nf49aa@nf4999 nf49ab@nf499b nf49ac@nf499d nf49ad@nf499f nf49ae@nf49a1 nf49af@nf49a3 nf49b0@nf49a5 nf49b1@nf49a7) (let ((nf49bc@export-env nf49b1@nf49a7) (nf49bd@export-subst nf49b0@nf49a5) (nf49be@visit-code nf49af@nf49a3) (nf49bf@invoke-code nf49ae@nf49a1) (nf49c0@inv* nf49ad@nf499f) (nf49c1@vis* nf49ac@nf499d) (nf49c2@imp* nf49ab@nf499b) (nf49c3@ver nf49aa@nf4999) (nf49c4@name nf49a9@nf4997) (nf49c5@id nf49a8@nf4995)) (values nf49c4@name nf49bf@invoke-code nf49bd@export-subst nf49bc@export-env)))))) (set! nf4ba3@nf313b@boot-library-expand nf313b@boot-library-expand) (set! nf313d@rev-map-append (lambda (nf49d0@f nf49d1@ls nf49d2@ac) (if (null? nf49d1@ls) nf49d2@ac (nf313d@rev-map-append nf49d0@f (cdr nf49d1@ls) (cons (nf49d0@f (car nf49d1@ls)) nf49d2@ac))))) (set! nf4ba4@nf313d@rev-map-append nf313d@rev-map-append) (set! nf313f@build-exports (lambda (nf49d6@lex*+loc* nf49d7@init*) (nf2dd5@nf2d2f@build-sequence '#f (cons (nf2dd6@nf2d31@build-void) (nf313d@rev-map-append (lambda (nf49da@x) (list 'set! (cdr nf49da@x) (car nf49da@x))) nf49d6@lex*+loc* nf49d7@init*))))) (set! nf4ba5@nf313f@build-exports nf313f@build-exports) (set! nf3141@make-export-subst (lambda (nf49dc@name* nf49dd@id*) (map (lambda (nf49e0@name nf49e1@id) (let ((nf49e4@label (nf2e86@id->label nf49e1@id))) (begin (if (not nf49e4@label) (nf3157@syntax-violation '#f '"cannot export unbound identifier" nf49e1@id) (void)) (cons nf49e0@name nf49e4@label)))) nf49dc@name* nf49dd@id*))) (set! nf4ba6@nf3141@make-export-subst nf3141@make-export-subst) (set! nf3143@make-export-env/macros (lambda (nf49e6@lex* nf49e7@loc* nf49e8@r) (let ((nf49ed@lookup '#f)) (begin (set! nf49ed@lookup (lambda (nf4a0a@x) (let nf4a12@f ((nf4a0c@x nf4a0a@x) (nf4a0d@lex* nf49e6@lex*) (nf4a0e@loc* nf49e7@loc*)) (if (pair? nf4a0d@lex*) (if (eq? nf4a0c@x (car nf4a0d@lex*)) (car nf4a0e@loc*) (nf4a12@f nf4a0c@x (cdr nf4a0d@lex*) (cdr nf4a0e@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let nf49f6@f ((nf49ee@r nf49e8@r) (nf49ef@env '()) (nf49f0@global* '()) (nf49f1@macro* '())) (if (null? nf49ee@r) (values nf49ef@env nf49f0@global* nf49f1@macro*) (let ((nf49f8@x (car nf49ee@r))) (let ((nf49fa@label (car nf49f8@x)) (nf49fb@b (cdr nf49f8@x))) (let ((nf49fe@t (nf2e8c@binding-type nf49fb@b))) (if (memv nf49fe@t '(lexical)) (let ((nf4a00@v (nf2e8e@binding-value nf49fb@b))) (let ((nf4a02@loc (nf49ed@lookup (nf3001@lexical-var nf4a00@v))) (nf4a03@type (if (nf3003@lexical-mutable? nf4a00@v) 'mutable 'global))) (nf49f6@f (cdr nf49ee@r) (cons (cons* nf49fa@label nf4a03@type nf4a02@loc) nf49ef@env) (cons (cons (nf3001@lexical-var nf4a00@v) nf4a02@loc) nf49f0@global*) nf49f1@macro*))) (if (memv nf49fe@t '(local-macro)) (let ((nf4a06@loc (gensym))) (nf49f6@f (cdr nf49ee@r) (cons (cons* nf49fa@label 'global-macro nf4a06@loc) nf49ef@env) nf49f0@global* (cons (cons nf4a06@loc (nf2e8e@binding-value nf49fb@b)) nf49f1@macro*))) (if (memv nf49fe@t '(local-macro!)) (let ((nf4a08@loc (gensym))) (nf49f6@f (cdr nf49ee@r) (cons (cons* nf49fa@label 'global-macro! nf4a08@loc) nf49ef@env) nf49f0@global* (cons (cons nf4a08@loc (nf2e8e@binding-value nf49fb@b)) nf49f1@macro*))) (if (memv nf49fe@t '($rtd $module)) (nf49f6@f (cdr nf49ee@r) (cons nf49f8@x nf49ef@env) nf49f0@global* nf49f1@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (nf2e8c@binding-type nf49fb@b) (nf2e8e@binding-value nf49fb@b))))))))))))))) (set! nf4ba7@nf3143@make-export-env/macros nf3143@make-export-env/macros) (set! nf3145@generate-temporaries (lambda (nf4a14@ls) (let ((nf4a16@t nf4a14@ls)) (let ((nf4a18@ls/false (nf3077@syntax-dispatch nf4a16@t 'each-any))) (if nf4a18@ls/false (apply (lambda (nf4a1a@ls) (map (lambda (nf4a1c@x) (make-simple-struct 'stx '5 (list (let ((nf4a1e@x (nf315d@syntax->datum nf4a1c@x))) (if (or (symbol? nf4a1e@x) (string? nf4a1e@x)) (gensym nf4a1e@x) (gensym 't))) nf2df4@top-mark* '() '()))) nf4a1a@ls)) nf4a18@ls/false) (let ((nf4a20@t nf4a16@t)) (let ((nf4a22@ls/false (nf3077@syntax-dispatch nf4a20@t '_))) (if nf4a22@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) nf4a22@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4a20@t))))))))) (set! nf4ba8@nf3145@generate-temporaries nf3145@generate-temporaries) (set! nf3147@free-identifier=? (lambda (nf4a24@x nf4a25@y) (if (nf2e70@id? nf4a24@x) (if (nf2e70@id? nf4a25@y) (nf2e76@free-id=? nf4a24@x nf4a25@y) (assertion-violation 'free-identifier=? '"not an identifier" nf4a25@y)) (assertion-violation 'free-identifier=? '"not an identifier" nf4a24@x)))) (set! nf4ba9@nf3147@free-identifier=? nf3147@free-identifier=?) (set! nf3149@bound-identifier=? (lambda (nf4a28@x nf4a29@y) (if (nf2e70@id? nf4a28@x) (if (nf2e70@id? nf4a29@y) (nf2e74@bound-id=? nf4a28@x nf4a29@y) (assertion-violation 'bound-identifier=? '"not an identifier" nf4a29@y)) (assertion-violation 'bound-identifier=? '"not an identifier" nf4a28@x)))) (set! nf4baa@nf3149@bound-identifier=? nf3149@bound-identifier=?) (set! nf314b@make-source-condition (lambda (nf4a2c@x) (let ((nf4a36@nf4a31 '#f) (nf4a38@nf4a33 '#f) (nf4a3a@nf4a32 '#f) (nf4a3d@nf4a30 '#f) (nf4a3f@make-source-condition '#f) (nf4a41@nf4a2e '#f) (nf4a43@nf4a2f '#f) (nf4a45@source-condition? '#f) (nf4a47@source-filename '#f) (nf4a49@source-character '#f)) (begin (set! nf4a36@nf4a31 (make-record-type-descriptor '&source-information nf4e8c@nf4bd3@&condition-rtd 'nf4a34 '#f '#f '#((immutable file-name) (immutable character)))) (set! nf4a38@nf4a33 '#f) (set! nf4a3a@nf4a32 (make-record-constructor-descriptor nf4a36@nf4a31 nf4e8d@nf4bd5@&condition-rcd nf4a38@nf4a33)) (set! nf4a3d@nf4a30 (record-predicate nf4a36@nf4a31)) (set! nf4a3f@make-source-condition (record-constructor nf4a3a@nf4a32)) (set! nf4a41@nf4a2e (record-accessor nf4a36@nf4a31 '0)) (set! nf4a43@nf4a2f (record-accessor nf4a36@nf4a31 '1)) (set! nf4a45@source-condition? (condition-predicate nf4a36@nf4a31)) (set! nf4a47@source-filename (condition-accessor nf4a36@nf4a31 nf4a41@nf4a2e)) (set! nf4a49@source-character (condition-accessor nf4a36@nf4a31 nf4a43@nf4a2f)) (if (pair? nf4a2c@x) (nf4a3f@make-source-condition (car nf4a2c@x) (cdr nf4a2c@x)) (condition)))))) (set! nf4bab@nf314b@make-source-condition nf314b@make-source-condition) (set! nf314d@extract-position-condition (lambda (nf4a4a@x) (nf314b@make-source-condition (nf314f@expression-position nf4a4a@x)))) (set! nf4bac@nf314d@extract-position-condition nf314d@extract-position-condition) (set! nf314f@expression-position (lambda (nf4a4c@x) (and (nf2e3c@stx? nf4a4c@x) (let ((nf4a4e@x (nf2e3e@stx-expr nf4a4c@x))) (and (nf29af@nf2883@annotation? nf4a4e@x) (nf29b0@nf2885@annotation-source nf4a4e@x)))))) (set! nf4bad@nf314f@expression-position nf314f@expression-position) (set! nf3151@assertion-error (lambda (nf4a50@expr nf4a51@pos) (raise (condition (nf4ebc@nf4c97@make-assertion-violation) (nf4ece@nf4cc9@make-who-condition 'assert) (nf4e92@nf4c2a@make-message-condition '"assertion failed") (nf4ec4@nf4cae@make-irritants-condition (list nf4a50@expr)) (nf314b@make-source-condition nf4a51@pos))))) (set! nf4bae@nf3151@assertion-error nf3151@assertion-error) (set! nf3153@syntax-error (lambda (nf4a54@x . nf4a56@args) (begin (if (not (for-all string? nf4a56@args)) (assertion-violation 'syntax-error '"invalid argument" nf4a56@args) (void)) (raise (condition (nf4e92@nf4c2a@make-message-condition (if (null? nf4a56@args) '"invalid syntax" (apply string-append nf4a56@args))) (nf4ef0@nf4d25@make-syntax-violation (nf315d@syntax->datum nf4a54@x) '#f) (nf314d@extract-position-condition nf4a54@x)))))) (set! nf4baf@nf3153@syntax-error nf3153@syntax-error) (set! nf3155@syntax-violation* (lambda (nf4a58@who nf4a59@msg nf4a5a@form nf4a5b@condition-object) (begin (if (not (string? nf4a59@msg)) (assertion-violation 'syntax-violation '"message is not a string" nf4a59@msg) (void)) (let ((nf4a60@who (if (or (string? nf4a58@who) (symbol? nf4a58@who)) nf4a58@who (if (not nf4a58@who) (let ((nf4a62@t nf4a5a@form)) (let ((nf4a64@ls/false (nf3077@syntax-dispatch nf4a62@t 'any))) (if (and nf4a64@ls/false (apply (lambda (nf4a66@id) (nf2e70@id? nf4a66@id)) nf4a64@ls/false)) (apply (lambda (nf4a68@id) (nf315d@syntax->datum nf4a68@id)) nf4a64@ls/false) (let ((nf4a6a@t nf4a62@t)) (let ((nf4a6c@ls/false (nf3077@syntax-dispatch nf4a6a@t '(any . any)))) (if (and nf4a6c@ls/false (apply (lambda (nf4a6e@id nf4a6f@rest) (nf2e70@id? nf4a6e@id)) nf4a6c@ls/false)) (apply (lambda (nf4a72@id nf4a73@rest) (nf315d@syntax->datum nf4a72@id)) nf4a6c@ls/false) (let ((nf4a76@t nf4a6a@t)) (let ((nf4a78@ls/false (nf3077@syntax-dispatch nf4a76@t '_))) (if nf4a78@ls/false (apply (lambda () '#f) nf4a78@ls/false) (nf3157@syntax-violation '#f '"invalid syntax" nf4a76@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" nf4a58@who))))) (raise (condition (if nf4a60@who (nf4ece@nf4cc9@make-who-condition nf4a60@who) (condition)) (nf4e92@nf4c2a@make-message-condition nf4a59@msg) nf4a5b@condition-object (nf314d@extract-position-condition nf4a5a@form))))))) (set! nf4bb0@nf3155@syntax-violation* nf3155@syntax-violation*) (set! nf3157@syntax-violation (lambda nf4a88 (let ((nf4a89 (length nf4a88))) (if (= nf4a89 '3) (apply (lambda (nf4a7a@who nf4a7b@msg nf4a7c@form) (nf3157@syntax-violation nf4a7a@who nf4a7b@msg nf4a7c@form '#f)) nf4a88) (if (= nf4a89 '4) (apply (lambda (nf4a80@who nf4a81@msg nf4a82@form nf4a83@subform) (nf3155@syntax-violation* nf4a80@who nf4a81@msg nf4a82@form (nf4ef0@nf4d25@make-syntax-violation (nf315d@syntax->datum nf4a82@form) (nf315d@syntax->datum nf4a83@subform)))) nf4a88) (error 'apply '"invalid arg count")))))) (set! nf4bb1@nf3157@syntax-violation nf3157@syntax-violation) (set! nf3159@identifier? (lambda (nf4a8a@x) (nf2e70@id? nf4a8a@x))) (set! nf4bb2@nf3159@identifier? nf3159@identifier?) (set! nf315b@datum->syntax (lambda (nf4a8c@id nf4a8d@datum) (if (nf2e70@id? nf4a8c@id) (nf2e50@datum->stx nf4a8c@id nf4a8d@datum) (assertion-violation 'datum->syntax '"not an identifier" nf4a8c@id)))) (set! nf4bb3@nf315b@datum->syntax nf315b@datum->syntax) (set! nf315d@syntax->datum (lambda (nf4a90@x) (nf2e84@stx->datum nf4a90@x))) (set! nf4bb4@nf315d@syntax->datum nf315d@syntax->datum) (set! nf315f@ungensym-all (lambda (nf4a92@code) (if (pair? nf4a92@code) (cons (nf315f@ungensym-all (car nf4a92@code)) (nf315f@ungensym-all (cdr nf4a92@code))) (if (symbol? nf4a92@code) (ungensym nf4a92@code) nf4a92@code)))) (set! nf4bb5@nf315f@ungensym-all nf315f@ungensym-all) (set! nf3161@compile-r6rs-top-level (lambda (nf4a94@x*) (call-with-values (lambda () (nf30ef@top-level-expander nf4a94@x*)) (lambda (nf4a9a@nf4a97 nf4a9b@nf4a99) (let ((nf4a9e@invoke-code nf4a9b@nf4a99) (nf4a9f@lib* nf4a9a@nf4a97)) (lambda () (begin (for-each nf2c86@nf2ad4@invoke-library nf4a9f@lib*) (let ((nf4aa2@expanded (nf2a10@nf29c8@expanded->core nf4a9e@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (nf315f@ungensym-all nf4aa2@expanded)) (void)) (eval-core nf4aa2@expanded)))))))))) (set! nf4bb6@nf3161@compile-r6rs-top-level nf3161@compile-r6rs-top-level) (set! nf3163@pre-compile-r6rs-top-level (lambda (nf4aa4@x*) (call-with-values (lambda () (nf30ef@top-level-expander nf4aa4@x*)) (lambda (nf4aaa@nf4aa7 nf4aab@nf4aa9) (let ((nf4aae@invoke-code nf4aab@nf4aa9) (nf4aaf@lib* nf4aaa@nf4aa7)) (begin (for-each nf2c86@nf2ad4@invoke-library nf4aaf@lib*) (nf29b8@nf2895@compile-core (nf2a10@nf29c8@expanded->core nf4aae@invoke-code)))))))) (set! nf4bb7@nf3163@pre-compile-r6rs-top-level nf3163@pre-compile-r6rs-top-level) (set! nf3165@interaction-environment (let ((nf4ab2@the-env '#f)) (lambda () (or nf4ab2@the-env (let ((nf4ab4@lib (nf2c7f@nf2ac6@find-library-by-name '(mosh interaction))) (nf4ab5@rib (nf2e24@make-empty-rib))) (begin (let ((nf4ab8@subst (nf2c61@nf2a8a@library-subst nf4ab4@lib))) (begin (nf2e10@set-rib-sym*! nf4ab5@rib (map car nf4ab8@subst)) (nf2e14@set-rib-mark**! nf4ab5@rib (map (lambda (nf4aba@x) nf2df4@top-mark*) nf4ab8@subst)) (nf2e18@set-rib-label*! nf4ab5@rib (map cdr nf4ab8@subst)))) (let ((nf4abc@env (make-simple-struct 'interaction-env '4 (list nf4ab5@rib '() '())))) (begin (set! nf4ab2@the-env nf4abc@env) nf4abc@env)))))))) (set! nf4bb8@nf3165@interaction-environment nf3165@interaction-environment) (set! nf3167@top-level-context (nf29ba@nf2899@make-parameter '#f)) (set! nf4bb9@nf3167@top-level-context nf3167@top-level-context) (nf2c7c@nf2ac0@current-library-expander nf3139@library-expander))
(begin (set! nf4bc8@nf4bc3 (unspecified)) (set! nf4bca@nf4bc5 (unspecified)) (set! nf4bcc@nf4bc4 (unspecified)) (set! nf4bcf@&condition? (unspecified)) (set! nf4bd1@make-&condition (unspecified)) (set! nf4bd3@&condition-rtd (unspecified)) (set! nf4bd5@&condition-rcd (unspecified)) (set! nf4c21@nf4c1c (unspecified)) (set! nf4c23@nf4c1e (unspecified)) (set! nf4c25@nf4c1d (unspecified)) (set! nf4c28@p? (unspecified)) (set! nf4c2a@make-message-condition (unspecified)) (set! nf4c2c@nf4c1b (unspecified)) (set! nf4c2e@message-condition? (unspecified)) (set! nf4c30@condition-message (unspecified)) (set! nf4c32@&message-rtd (unspecified)) (set! nf4c34@&message-rcd (unspecified)) (set! nf4c3a@nf4c35 (unspecified)) (set! nf4c3c@nf4c37 (unspecified)) (set! nf4c3e@nf4c36 (unspecified)) (set! nf4c41@p? (unspecified)) (set! nf4c43@make-warning (unspecified)) (set! nf4c45@warning? (unspecified)) (set! nf4c47@&warning-rtd (unspecified)) (set! nf4c49@&warning-rcd (unspecified)) (set! nf4c4f@nf4c4a (unspecified)) (set! nf4c51@nf4c4c (unspecified)) (set! nf4c53@nf4c4b (unspecified)) (set! nf4c56@p? (unspecified)) (set! nf4c58@make-serious-condition (unspecified)) (set! nf4c5a@serious-condition? (unspecified)) (set! nf4c5c@&serious-rtd (unspecified)) (set! nf4c5e@&serious-rcd (unspecified)) (set! nf4c64@nf4c5f (unspecified)) (set! nf4c66@nf4c61 (unspecified)) (set! nf4c68@nf4c60 (unspecified)) (set! nf4c6b@p? (unspecified)) (set! nf4c6d@make-error (unspecified)) (set! nf4c6f@error? (unspecified)) (set! nf4c71@&error-rtd (unspecified)) (set! nf4c73@&error-rcd (unspecified)) (set! nf4c79@nf4c74 (unspecified)) (set! nf4c7b@nf4c76 (unspecified)) (set! nf4c7d@nf4c75 (unspecified)) (set! nf4c80@p? (unspecified)) (set! nf4c82@make-violation (unspecified)) (set! nf4c84@violation? (unspecified)) (set! nf4c86@&violation-rtd (unspecified)) (set! nf4c88@&violation-rcd (unspecified)) (set! nf4c8e@nf4c89 (unspecified)) (set! nf4c90@nf4c8b (unspecified)) (set! nf4c92@nf4c8a (unspecified)) (set! nf4c95@p? (unspecified)) (set! nf4c97@make-assertion-violation (unspecified)) (set! nf4c99@assertion-violation? (unspecified)) (set! nf4c9b@&assertion-rtd (unspecified)) (set! nf4c9d@&assertion-rcd (unspecified)) (set! nf4ca5@nf4ca0 (unspecified)) (set! nf4ca7@nf4ca2 (unspecified)) (set! nf4ca9@nf4ca1 (unspecified)) (set! nf4cac@p? (unspecified)) (set! nf4cae@make-irritants-condition (unspecified)) (set! nf4cb0@nf4c9f (unspecified)) (set! nf4cb2@irritants-condition? (unspecified)) (set! nf4cb4@condition-irritants (unspecified)) (set! nf4cb6@&irritants-rtd (unspecified)) (set! nf4cb8@&irritants-rcd (unspecified)) (set! nf4cc0@nf4cbb (unspecified)) (set! nf4cc2@nf4cbd (unspecified)) (set! nf4cc4@nf4cbc (unspecified)) (set! nf4cc7@p? (unspecified)) (set! nf4cc9@make-who-condition (unspecified)) (set! nf4ccb@nf4cba (unspecified)) (set! nf4ccd@who-condition? (unspecified)) (set! nf4ccf@condition-who (unspecified)) (set! nf4cd1@&who-rtd (unspecified)) (set! nf4cd3@&who-rcd (unspecified)) (set! nf4cd9@nf4cd4 (unspecified)) (set! nf4cdb@nf4cd6 (unspecified)) (set! nf4cdd@nf4cd5 (unspecified)) (set! nf4ce0@p? (unspecified)) (set! nf4ce2@make-non-continuable-violation (unspecified)) (set! nf4ce4@non-continuable-violation? (unspecified)) (set! nf4ce6@&non-continuable-rtd (unspecified)) (set! nf4ce8@&non-continuable-rcd (unspecified)) (set! nf4cee@nf4ce9 (unspecified)) (set! nf4cf0@nf4ceb (unspecified)) (set! nf4cf2@nf4cea (unspecified)) (set! nf4cf5@p? (unspecified)) (set! nf4cf7@make-implementation-restriction-violation (unspecified)) (set! nf4cf9@implementation-restriction-violation? (unspecified)) (set! nf4cfb@&implementation-restriction-rtd (unspecified)) (set! nf4cfd@&implementation-restriction-rcd (unspecified)) (set! nf4d03@nf4cfe (unspecified)) (set! nf4d05@nf4d00 (unspecified)) (set! nf4d07@nf4cff (unspecified)) (set! nf4d0a@p? (unspecified)) (set! nf4d0c@make-lexical-violation (unspecified)) (set! nf4d0e@lexical-violation? (unspecified)) (set! nf4d10@&lexical-rtd (unspecified)) (set! nf4d12@&lexical-rcd (unspecified)) (set! nf4d1c@nf4d17 (unspecified)) (set! nf4d1e@nf4d19 (unspecified)) (set! nf4d20@nf4d18 (unspecified)) (set! nf4d23@p? (unspecified)) (set! nf4d25@make-syntax-violation (unspecified)) (set! nf4d27@nf4d14 (unspecified)) (set! nf4d29@nf4d16 (unspecified)) (set! nf4d2b@syntax-violation? (unspecified)) (set! nf4d2d@syntax-violation-form (unspecified)) (set! nf4d2f@syntax-violation-subform (unspecified)) (set! nf4d31@&syntax-rtd (unspecified)) (set! nf4d33@&syntax-rcd (unspecified)) (set! nf4d39@nf4d34 (unspecified)) (set! nf4d3b@nf4d36 (unspecified)) (set! nf4d3d@nf4d35 (unspecified)) (set! nf4d40@p? (unspecified)) (set! nf4d42@make-undefined-violation (unspecified)) (set! nf4d44@undefined-violation? (unspecified)) (set! nf4d46@&undefined-rtd (unspecified)) (set! nf4d48@&undefined-rcd (unspecified)) (set! nf4d4e@nf4d49 (unspecified)) (set! nf4d50@nf4d4b (unspecified)) (set! nf4d52@nf4d4a (unspecified)) (set! nf4d55@p? (unspecified)) (set! nf4d57@make-i/o-error (unspecified)) (set! nf4d59@i/o-error? (unspecified)) (set! nf4d5b@&i/o-rtd (unspecified)) (set! nf4d5d@&i/o-rcd (unspecified)) (set! nf4d63@nf4d5e (unspecified)) (set! nf4d65@nf4d60 (unspecified)) (set! nf4d67@nf4d5f (unspecified)) (set! nf4d6a@p? (unspecified)) (set! nf4d6c@make-i/o-read-error (unspecified)) (set! nf4d6e@i/o-read-error? (unspecified)) (set! nf4d70@&i/o-read-rtd (unspecified)) (set! nf4d72@&i/o-read-rcd (unspecified)) (set! nf4d78@nf4d73 (unspecified)) (set! nf4d7a@nf4d75 (unspecified)) (set! nf4d7c@nf4d74 (unspecified)) (set! nf4d7f@p? (unspecified)) (set! nf4d81@make-i/o-write-error (unspecified)) (set! nf4d83@i/o-write-error? (unspecified)) (set! nf4d85@&i/o-write-rtd (unspecified)) (set! nf4d87@&i/o-write-rcd (unspecified)) (set! nf4d8f@nf4d8a (unspecified)) (set! nf4d91@nf4d8c (unspecified)) (set! nf4d93@nf4d8b (unspecified)) (set! nf4d96@p? (unspecified)) (set! nf4d98@make-i/o-invalid-position-error (unspecified)) (set! nf4d9a@nf4d89 (unspecified)) (set! nf4d9c@i/o-invalid-position-error? (unspecified)) (set! nf4d9e@i/o-error-position (unspecified)) (set! nf4da0@&i/o-invalid-position-rtd (unspecified)) (set! nf4da2@&i/o-invalid-position-rcd (unspecified)) (set! nf4daa@nf4da5 (unspecified)) (set! nf4dac@nf4da7 (unspecified)) (set! nf4dae@nf4da6 (unspecified)) (set! nf4db1@p? (unspecified)) (set! nf4db3@make-i/o-filename-error (unspecified)) (set! nf4db5@nf4da4 (unspecified)) (set! nf4db7@i/o-filename-error? (unspecified)) (set! nf4db9@i/o-error-filename (unspecified)) (set! nf4dbb@&i/o-filename-rtd (unspecified)) (set! nf4dbd@&i/o-filename-rcd (unspecified)) (set! nf4dc3@nf4dbe (unspecified)) (set! nf4dc5@nf4dc0 (unspecified)) (set! nf4dc7@nf4dbf (unspecified)) (set! nf4dca@p? (unspecified)) (set! nf4dcc@make-i/o-file-protection-error (unspecified)) (set! nf4dce@i/o-file-protection-error? (unspecified)) (set! nf4dd0@&i/o-file-protection-rtd (unspecified)) (set! nf4dd2@&i/o-file-protection-rcd (unspecified)) (set! nf4dd8@nf4dd3 (unspecified)) (set! nf4dda@nf4dd5 (unspecified)) (set! nf4ddc@nf4dd4 (unspecified)) (set! nf4ddf@p? (unspecified)) (set! nf4de1@make-i/o-file-is-read-only-error (unspecified)) (set! nf4de3@i/o-file-is-read-only-error? (unspecified)) (set! nf4de5@&i/o-file-is-read-only-rtd (unspecified)) (set! nf4de7@&i/o-file-is-read-only-rcd (unspecified)) (set! nf4ded@nf4de8 (unspecified)) (set! nf4def@nf4dea (unspecified)) (set! nf4df1@nf4de9 (unspecified)) (set! nf4df4@p? (unspecified)) (set! nf4df6@make-i/o-file-already-exists-error (unspecified)) (set! nf4df8@i/o-file-already-exists-error? (unspecified)) (set! nf4dfa@&i/o-file-already-exists-rtd (unspecified)) (set! nf4dfc@&i/o-file-already-exists-rcd (unspecified)) (set! nf4e02@nf4dfd (unspecified)) (set! nf4e04@nf4dff (unspecified)) (set! nf4e06@nf4dfe (unspecified)) (set! nf4e09@p? (unspecified)) (set! nf4e0b@make-i/o-file-does-not-exist-error (unspecified)) (set! nf4e0d@i/o-file-does-not-exist-error? (unspecified)) (set! nf4e0f@&i/o-file-does-not-exist-rtd (unspecified)) (set! nf4e11@&i/o-file-does-not-exist-rcd (unspecified)) (set! nf4e19@nf4e14 (unspecified)) (set! nf4e1b@nf4e16 (unspecified)) (set! nf4e1d@nf4e15 (unspecified)) (set! nf4e20@p? (unspecified)) (set! nf4e22@make-i/o-port-error (unspecified)) (set! nf4e24@nf4e13 (unspecified)) (set! nf4e26@i/o-port-error? (unspecified)) (set! nf4e28@i/o-error-port (unspecified)) (set! nf4e2a@&i/o-port-rtd (unspecified)) (set! nf4e2c@&i/o-port-rcd (unspecified)) (set! nf4e32@nf4e2d (unspecified)) (set! nf4e34@nf4e2f (unspecified)) (set! nf4e36@nf4e2e (unspecified)) (set! nf4e39@p? (unspecified)) (set! nf4e3b@make-i/o-decoding-error (unspecified)) (set! nf4e3d@i/o-decoding-error? (unspecified)) (set! nf4e3f@&i/o-decoding-rtd (unspecified)) (set! nf4e41@&i/o-decoding-rcd (unspecified)) (set! nf4e49@nf4e44 (unspecified)) (set! nf4e4b@nf4e46 (unspecified)) (set! nf4e4d@nf4e45 (unspecified)) (set! nf4e50@p? (unspecified)) (set! nf4e52@make-i/o-encoding-error (unspecified)) (set! nf4e54@nf4e43 (unspecified)) (set! nf4e56@i/o-encoding-error? (unspecified)) (set! nf4e58@i/o-encoding-error-char (unspecified)) (set! nf4e5a@&i/o-encoding-rtd (unspecified)) (set! nf4e5c@&i/o-encoding-rcd (unspecified)) (set! nf4e62@nf4e5d (unspecified)) (set! nf4e64@nf4e5f (unspecified)) (set! nf4e66@nf4e5e (unspecified)) (set! nf4e69@p? (unspecified)) (set! nf4e6b@make-no-infinities-violation (unspecified)) (set! nf4e6d@no-infinities-violation? (unspecified)) (set! nf4e6f@&no-infinities-rtd (unspecified)) (set! nf4e71@&no-infinities-rcd (unspecified)) (set! nf4e77@nf4e72 (unspecified)) (set! nf4e79@nf4e74 (unspecified)) (set! nf4e7b@nf4e73 (unspecified)) (set! nf4e7e@p? (unspecified)) (set! nf4e80@make-no-nans-violation (unspecified)) (set! nf4e82@no-nans-violation? (unspecified)) (set! nf4e84@&no-nans-rtd (unspecified)) (set! nf4e86@&no-nans-rcd (unspecified)) (set! nf4bc8@nf4bc3 (make-record-type-descriptor '&condition '#f 'nf4bc6 '#f '#f '#())) (set! nf4e87@nf4bc8@nf4bc3 nf4bc8@nf4bc3) (set! nf4bca@nf4bc5 '#f) (set! nf4e88@nf4bca@nf4bc5 nf4bca@nf4bc5) (set! nf4bcc@nf4bc4 (make-record-constructor-descriptor nf4bc8@nf4bc3 '#f nf4bca@nf4bc5)) (set! nf4e89@nf4bcc@nf4bc4 nf4bcc@nf4bc4) (set! nf4bcf@&condition? (record-predicate nf4bc8@nf4bc3)) (set! nf4e8a@nf4bcf@&condition? nf4bcf@&condition?) (set! nf4bd1@make-&condition (record-constructor nf4bcc@nf4bc4)) (set! nf4e8b@nf4bd1@make-&condition nf4bd1@make-&condition) (set! nf4bd3@&condition-rtd nf4bc8@nf4bc3) (set! nf4e8c@nf4bd3@&condition-rtd nf4bd3@&condition-rtd) (set! nf4bd5@&condition-rcd nf4bcc@nf4bc4) (set! nf4e8d@nf4bd5@&condition-rcd nf4bd5@&condition-rcd) (set! nf4c21@nf4c1c (make-record-type-descriptor '&message nf4bc8@nf4bc3 'nf4c1f '#f '#f '#((immutable message)))) (set! nf4e8e@nf4c21@nf4c1c nf4c21@nf4c1c) (set! nf4c23@nf4c1e '#f) (set! nf4e8f@nf4c23@nf4c1e nf4c23@nf4c1e) (set! nf4c25@nf4c1d (make-record-constructor-descriptor nf4c21@nf4c1c nf4bcc@nf4bc4 nf4c23@nf4c1e)) (set! nf4e90@nf4c25@nf4c1d nf4c25@nf4c1d) (set! nf4c28@p? (record-predicate nf4c21@nf4c1c)) (set! nf4e91@nf4c28@p? nf4c28@p?) (set! nf4c2a@make-message-condition (record-constructor nf4c25@nf4c1d)) (set! nf4e92@nf4c2a@make-message-condition nf4c2a@make-message-condition) (set! nf4c2c@nf4c1b (record-accessor nf4c21@nf4c1c '0)) (set! nf4e93@nf4c2c@nf4c1b nf4c2c@nf4c1b) (set! nf4c2e@message-condition? (condition-predicate nf4c21@nf4c1c)) (set! nf4e94@nf4c2e@message-condition? nf4c2e@message-condition?) (set! nf4c30@condition-message (condition-accessor nf4c21@nf4c1c nf4c2c@nf4c1b)) (set! nf4e95@nf4c30@condition-message nf4c30@condition-message) (set! nf4c32@&message-rtd nf4c21@nf4c1c) (set! nf4e96@nf4c32@&message-rtd nf4c32@&message-rtd) (set! nf4c34@&message-rcd nf4c25@nf4c1d) (set! nf4e97@nf4c34@&message-rcd nf4c34@&message-rcd) (set! nf4c3a@nf4c35 (make-record-type-descriptor '&warning nf4bc8@nf4bc3 'nf4c38 '#f '#f '#())) (set! nf4e98@nf4c3a@nf4c35 nf4c3a@nf4c35) (set! nf4c3c@nf4c37 '#f) (set! nf4e99@nf4c3c@nf4c37 nf4c3c@nf4c37) (set! nf4c3e@nf4c36 (make-record-constructor-descriptor nf4c3a@nf4c35 nf4bcc@nf4bc4 nf4c3c@nf4c37)) (set! nf4e9a@nf4c3e@nf4c36 nf4c3e@nf4c36) (set! nf4c41@p? (record-predicate nf4c3a@nf4c35)) (set! nf4e9b@nf4c41@p? nf4c41@p?) (set! nf4c43@make-warning (record-constructor nf4c3e@nf4c36)) (set! nf4e9c@nf4c43@make-warning nf4c43@make-warning) (set! nf4c45@warning? (condition-predicate nf4c3a@nf4c35)) (set! nf4e9d@nf4c45@warning? nf4c45@warning?) (set! nf4c47@&warning-rtd nf4c3a@nf4c35) (set! nf4e9e@nf4c47@&warning-rtd nf4c47@&warning-rtd) (set! nf4c49@&warning-rcd nf4c3e@nf4c36) (set! nf4e9f@nf4c49@&warning-rcd nf4c49@&warning-rcd) (set! nf4c4f@nf4c4a (make-record-type-descriptor '&serious nf4bc8@nf4bc3 'nf4c4d '#f '#f '#())) (set! nf4ea0@nf4c4f@nf4c4a nf4c4f@nf4c4a) (set! nf4c51@nf4c4c '#f) (set! nf4ea1@nf4c51@nf4c4c nf4c51@nf4c4c) (set! nf4c53@nf4c4b (make-record-constructor-descriptor nf4c4f@nf4c4a nf4bcc@nf4bc4 nf4c51@nf4c4c)) (set! nf4ea2@nf4c53@nf4c4b nf4c53@nf4c4b) (set! nf4c56@p? (record-predicate nf4c4f@nf4c4a)) (set! nf4ea3@nf4c56@p? nf4c56@p?) (set! nf4c58@make-serious-condition (record-constructor nf4c53@nf4c4b)) (set! nf4ea4@nf4c58@make-serious-condition nf4c58@make-serious-condition) (set! nf4c5a@serious-condition? (condition-predicate nf4c4f@nf4c4a)) (set! nf4ea5@nf4c5a@serious-condition? nf4c5a@serious-condition?) (set! nf4c5c@&serious-rtd nf4c4f@nf4c4a) (set! nf4ea6@nf4c5c@&serious-rtd nf4c5c@&serious-rtd) (set! nf4c5e@&serious-rcd nf4c53@nf4c4b) (set! nf4ea7@nf4c5e@&serious-rcd nf4c5e@&serious-rcd) (set! nf4c64@nf4c5f (make-record-type-descriptor '&error nf4c4f@nf4c4a 'nf4c62 '#f '#f '#())) (set! nf4ea8@nf4c64@nf4c5f nf4c64@nf4c5f) (set! nf4c66@nf4c61 '#f) (set! nf4ea9@nf4c66@nf4c61 nf4c66@nf4c61) (set! nf4c68@nf4c60 (make-record-constructor-descriptor nf4c64@nf4c5f nf4c53@nf4c4b nf4c66@nf4c61)) (set! nf4eaa@nf4c68@nf4c60 nf4c68@nf4c60) (set! nf4c6b@p? (record-predicate nf4c64@nf4c5f)) (set! nf4eab@nf4c6b@p? nf4c6b@p?) (set! nf4c6d@make-error (record-constructor nf4c68@nf4c60)) (set! nf4eac@nf4c6d@make-error nf4c6d@make-error) (set! nf4c6f@error? (condition-predicate nf4c64@nf4c5f)) (set! nf4ead@nf4c6f@error? nf4c6f@error?) (set! nf4c71@&error-rtd nf4c64@nf4c5f) (set! nf4eae@nf4c71@&error-rtd nf4c71@&error-rtd) (set! nf4c73@&error-rcd nf4c68@nf4c60) (set! nf4eaf@nf4c73@&error-rcd nf4c73@&error-rcd) (set! nf4c79@nf4c74 (make-record-type-descriptor '&violation nf4c4f@nf4c4a 'nf4c77 '#f '#f '#())) (set! nf4eb0@nf4c79@nf4c74 nf4c79@nf4c74) (set! nf4c7b@nf4c76 '#f) (set! nf4eb1@nf4c7b@nf4c76 nf4c7b@nf4c76) (set! nf4c7d@nf4c75 (make-record-constructor-descriptor nf4c79@nf4c74 nf4c53@nf4c4b nf4c7b@nf4c76)) (set! nf4eb2@nf4c7d@nf4c75 nf4c7d@nf4c75) (set! nf4c80@p? (record-predicate nf4c79@nf4c74)) (set! nf4eb3@nf4c80@p? nf4c80@p?) (set! nf4c82@make-violation (record-constructor nf4c7d@nf4c75)) (set! nf4eb4@nf4c82@make-violation nf4c82@make-violation) (set! nf4c84@violation? (condition-predicate nf4c79@nf4c74)) (set! nf4eb5@nf4c84@violation? nf4c84@violation?) (set! nf4c86@&violation-rtd nf4c79@nf4c74) (set! nf4eb6@nf4c86@&violation-rtd nf4c86@&violation-rtd) (set! nf4c88@&violation-rcd nf4c7d@nf4c75) (set! nf4eb7@nf4c88@&violation-rcd nf4c88@&violation-rcd) (set! nf4c8e@nf4c89 (make-record-type-descriptor '&assertion nf4c79@nf4c74 'nf4c8c '#f '#f '#())) (set! nf4eb8@nf4c8e@nf4c89 nf4c8e@nf4c89) (set! nf4c90@nf4c8b '#f) (set! nf4eb9@nf4c90@nf4c8b nf4c90@nf4c8b) (set! nf4c92@nf4c8a (make-record-constructor-descriptor nf4c8e@nf4c89 nf4c7d@nf4c75 nf4c90@nf4c8b)) (set! nf4eba@nf4c92@nf4c8a nf4c92@nf4c8a) (set! nf4c95@p? (record-predicate nf4c8e@nf4c89)) (set! nf4ebb@nf4c95@p? nf4c95@p?) (set! nf4c97@make-assertion-violation (record-constructor nf4c92@nf4c8a)) (set! nf4ebc@nf4c97@make-assertion-violation nf4c97@make-assertion-violation) (set! nf4c99@assertion-violation? (condition-predicate nf4c8e@nf4c89)) (set! nf4ebd@nf4c99@assertion-violation? nf4c99@assertion-violation?) (set! nf4c9b@&assertion-rtd nf4c8e@nf4c89) (set! nf4ebe@nf4c9b@&assertion-rtd nf4c9b@&assertion-rtd) (set! nf4c9d@&assertion-rcd nf4c92@nf4c8a) (set! nf4ebf@nf4c9d@&assertion-rcd nf4c9d@&assertion-rcd) (set! nf4ca5@nf4ca0 (make-record-type-descriptor '&irritants nf4bc8@nf4bc3 'nf4ca3 '#f '#f '#((immutable irritants)))) (set! nf4ec0@nf4ca5@nf4ca0 nf4ca5@nf4ca0) (set! nf4ca7@nf4ca2 '#f) (set! nf4ec1@nf4ca7@nf4ca2 nf4ca7@nf4ca2) (set! nf4ca9@nf4ca1 (make-record-constructor-descriptor nf4ca5@nf4ca0 nf4bcc@nf4bc4 nf4ca7@nf4ca2)) (set! nf4ec2@nf4ca9@nf4ca1 nf4ca9@nf4ca1) (set! nf4cac@p? (record-predicate nf4ca5@nf4ca0)) (set! nf4ec3@nf4cac@p? nf4cac@p?) (set! nf4cae@make-irritants-condition (record-constructor nf4ca9@nf4ca1)) (set! nf4ec4@nf4cae@make-irritants-condition nf4cae@make-irritants-condition) (set! nf4cb0@nf4c9f (record-accessor nf4ca5@nf4ca0 '0)) (set! nf4ec5@nf4cb0@nf4c9f nf4cb0@nf4c9f) (set! nf4cb2@irritants-condition? (condition-predicate nf4ca5@nf4ca0)) (set! nf4ec6@nf4cb2@irritants-condition? nf4cb2@irritants-condition?) (set! nf4cb4@condition-irritants (condition-accessor nf4ca5@nf4ca0 nf4cb0@nf4c9f)) (set! nf4ec7@nf4cb4@condition-irritants nf4cb4@condition-irritants) (set! nf4cb6@&irritants-rtd nf4ca5@nf4ca0) (set! nf4ec8@nf4cb6@&irritants-rtd nf4cb6@&irritants-rtd) (set! nf4cb8@&irritants-rcd nf4ca9@nf4ca1) (set! nf4ec9@nf4cb8@&irritants-rcd nf4cb8@&irritants-rcd) (set! nf4cc0@nf4cbb (make-record-type-descriptor '&who nf4bc8@nf4bc3 'nf4cbe '#f '#f '#((immutable who)))) (set! nf4eca@nf4cc0@nf4cbb nf4cc0@nf4cbb) (set! nf4cc2@nf4cbd '#f) (set! nf4ecb@nf4cc2@nf4cbd nf4cc2@nf4cbd) (set! nf4cc4@nf4cbc (make-record-constructor-descriptor nf4cc0@nf4cbb nf4bcc@nf4bc4 nf4cc2@nf4cbd)) (set! nf4ecc@nf4cc4@nf4cbc nf4cc4@nf4cbc) (set! nf4cc7@p? (record-predicate nf4cc0@nf4cbb)) (set! nf4ecd@nf4cc7@p? nf4cc7@p?) (set! nf4cc9@make-who-condition (record-constructor nf4cc4@nf4cbc)) (set! nf4ece@nf4cc9@make-who-condition nf4cc9@make-who-condition) (set! nf4ccb@nf4cba (record-accessor nf4cc0@nf4cbb '0)) (set! nf4ecf@nf4ccb@nf4cba nf4ccb@nf4cba) (set! nf4ccd@who-condition? (condition-predicate nf4cc0@nf4cbb)) (set! nf4ed0@nf4ccd@who-condition? nf4ccd@who-condition?) (set! nf4ccf@condition-who (condition-accessor nf4cc0@nf4cbb nf4ccb@nf4cba)) (set! nf4ed1@nf4ccf@condition-who nf4ccf@condition-who) (set! nf4cd1@&who-rtd nf4cc0@nf4cbb) (set! nf4ed2@nf4cd1@&who-rtd nf4cd1@&who-rtd) (set! nf4cd3@&who-rcd nf4cc4@nf4cbc) (set! nf4ed3@nf4cd3@&who-rcd nf4cd3@&who-rcd) (set! nf4cd9@nf4cd4 (make-record-type-descriptor '&non-continuable nf4c79@nf4c74 'nf4cd7 '#f '#f '#())) (set! nf4ed4@nf4cd9@nf4cd4 nf4cd9@nf4cd4) (set! nf4cdb@nf4cd6 '#f) (set! nf4ed5@nf4cdb@nf4cd6 nf4cdb@nf4cd6) (set! nf4cdd@nf4cd5 (make-record-constructor-descriptor nf4cd9@nf4cd4 nf4c7d@nf4c75 nf4cdb@nf4cd6)) (set! nf4ed6@nf4cdd@nf4cd5 nf4cdd@nf4cd5) (set! nf4ce0@p? (record-predicate nf4cd9@nf4cd4)) (set! nf4ed7@nf4ce0@p? nf4ce0@p?) (set! nf4ce2@make-non-continuable-violation (record-constructor nf4cdd@nf4cd5)) (set! nf4ed8@nf4ce2@make-non-continuable-violation nf4ce2@make-non-continuable-violation) (set! nf4ce4@non-continuable-violation? (condition-predicate nf4cd9@nf4cd4)) (set! nf4ed9@nf4ce4@non-continuable-violation? nf4ce4@non-continuable-violation?) (set! nf4ce6@&non-continuable-rtd nf4cd9@nf4cd4) (set! nf4eda@nf4ce6@&non-continuable-rtd nf4ce6@&non-continuable-rtd) (set! nf4ce8@&non-continuable-rcd nf4cdd@nf4cd5) (set! nf4edb@nf4ce8@&non-continuable-rcd nf4ce8@&non-continuable-rcd) (set! nf4cee@nf4ce9 (make-record-type-descriptor '&implementation-restriction nf4c79@nf4c74 'nf4cec '#f '#f '#())) (set! nf4edc@nf4cee@nf4ce9 nf4cee@nf4ce9) (set! nf4cf0@nf4ceb '#f) (set! nf4edd@nf4cf0@nf4ceb nf4cf0@nf4ceb) (set! nf4cf2@nf4cea (make-record-constructor-descriptor nf4cee@nf4ce9 nf4c7d@nf4c75 nf4cf0@nf4ceb)) (set! nf4ede@nf4cf2@nf4cea nf4cf2@nf4cea) (set! nf4cf5@p? (record-predicate nf4cee@nf4ce9)) (set! nf4edf@nf4cf5@p? nf4cf5@p?) (set! nf4cf7@make-implementation-restriction-violation (record-constructor nf4cf2@nf4cea)) (set! nf4ee0@nf4cf7@make-implementation-restriction-violation nf4cf7@make-implementation-restriction-violation) (set! nf4cf9@implementation-restriction-violation? (condition-predicate nf4cee@nf4ce9)) (set! nf4ee1@nf4cf9@implementation-restriction-violation? nf4cf9@implementation-restriction-violation?) (set! nf4cfb@&implementation-restriction-rtd nf4cee@nf4ce9) (set! nf4ee2@nf4cfb@&implementation-restriction-rtd nf4cfb@&implementation-restriction-rtd) (set! nf4cfd@&implementation-restriction-rcd nf4cf2@nf4cea) (set! nf4ee3@nf4cfd@&implementation-restriction-rcd nf4cfd@&implementation-restriction-rcd) (set! nf4d03@nf4cfe (make-record-type-descriptor '&lexical nf4c79@nf4c74 'nf4d01 '#f '#f '#())) (set! nf4ee4@nf4d03@nf4cfe nf4d03@nf4cfe) (set! nf4d05@nf4d00 '#f) (set! nf4ee5@nf4d05@nf4d00 nf4d05@nf4d00) (set! nf4d07@nf4cff (make-record-constructor-descriptor nf4d03@nf4cfe nf4c7d@nf4c75 nf4d05@nf4d00)) (set! nf4ee6@nf4d07@nf4cff nf4d07@nf4cff) (set! nf4d0a@p? (record-predicate nf4d03@nf4cfe)) (set! nf4ee7@nf4d0a@p? nf4d0a@p?) (set! nf4d0c@make-lexical-violation (record-constructor nf4d07@nf4cff)) (set! nf4ee8@nf4d0c@make-lexical-violation nf4d0c@make-lexical-violation) (set! nf4d0e@lexical-violation? (condition-predicate nf4d03@nf4cfe)) (set! nf4ee9@nf4d0e@lexical-violation? nf4d0e@lexical-violation?) (set! nf4d10@&lexical-rtd nf4d03@nf4cfe) (set! nf4eea@nf4d10@&lexical-rtd nf4d10@&lexical-rtd) (set! nf4d12@&lexical-rcd nf4d07@nf4cff) (set! nf4eeb@nf4d12@&lexical-rcd nf4d12@&lexical-rcd) (set! nf4d1c@nf4d17 (make-record-type-descriptor '&syntax nf4c79@nf4c74 'nf4d1a '#f '#f '#((immutable form) (immutable subform)))) (set! nf4eec@nf4d1c@nf4d17 nf4d1c@nf4d17) (set! nf4d1e@nf4d19 '#f) (set! nf4eed@nf4d1e@nf4d19 nf4d1e@nf4d19) (set! nf4d20@nf4d18 (make-record-constructor-descriptor nf4d1c@nf4d17 nf4c7d@nf4c75 nf4d1e@nf4d19)) (set! nf4eee@nf4d20@nf4d18 nf4d20@nf4d18) (set! nf4d23@p? (record-predicate nf4d1c@nf4d17)) (set! nf4eef@nf4d23@p? nf4d23@p?) (set! nf4d25@make-syntax-violation (record-constructor nf4d20@nf4d18)) (set! nf4ef0@nf4d25@make-syntax-violation nf4d25@make-syntax-violation) (set! nf4d27@nf4d14 (record-accessor nf4d1c@nf4d17 '0)) (set! nf4ef1@nf4d27@nf4d14 nf4d27@nf4d14) (set! nf4d29@nf4d16 (record-accessor nf4d1c@nf4d17 '1)) (set! nf4ef2@nf4d29@nf4d16 nf4d29@nf4d16) (set! nf4d2b@syntax-violation? (condition-predicate nf4d1c@nf4d17)) (set! nf4ef3@nf4d2b@syntax-violation? nf4d2b@syntax-violation?) (set! nf4d2d@syntax-violation-form (condition-accessor nf4d1c@nf4d17 nf4d27@nf4d14)) (set! nf4ef4@nf4d2d@syntax-violation-form nf4d2d@syntax-violation-form) (set! nf4d2f@syntax-violation-subform (condition-accessor nf4d1c@nf4d17 nf4d29@nf4d16)) (set! nf4ef5@nf4d2f@syntax-violation-subform nf4d2f@syntax-violation-subform) (set! nf4d31@&syntax-rtd nf4d1c@nf4d17) (set! nf4ef6@nf4d31@&syntax-rtd nf4d31@&syntax-rtd) (set! nf4d33@&syntax-rcd nf4d20@nf4d18) (set! nf4ef7@nf4d33@&syntax-rcd nf4d33@&syntax-rcd) (set! nf4d39@nf4d34 (make-record-type-descriptor '&undefined nf4c79@nf4c74 'nf4d37 '#f '#f '#())) (set! nf4ef8@nf4d39@nf4d34 nf4d39@nf4d34) (set! nf4d3b@nf4d36 '#f) (set! nf4ef9@nf4d3b@nf4d36 nf4d3b@nf4d36) (set! nf4d3d@nf4d35 (make-record-constructor-descriptor nf4d39@nf4d34 nf4c7d@nf4c75 nf4d3b@nf4d36)) (set! nf4efa@nf4d3d@nf4d35 nf4d3d@nf4d35) (set! nf4d40@p? (record-predicate nf4d39@nf4d34)) (set! nf4efb@nf4d40@p? nf4d40@p?) (set! nf4d42@make-undefined-violation (record-constructor nf4d3d@nf4d35)) (set! nf4efc@nf4d42@make-undefined-violation nf4d42@make-undefined-violation) (set! nf4d44@undefined-violation? (condition-predicate nf4d39@nf4d34)) (set! nf4efd@nf4d44@undefined-violation? nf4d44@undefined-violation?) (set! nf4d46@&undefined-rtd nf4d39@nf4d34) (set! nf4efe@nf4d46@&undefined-rtd nf4d46@&undefined-rtd) (set! nf4d48@&undefined-rcd nf4d3d@nf4d35) (set! nf4eff@nf4d48@&undefined-rcd nf4d48@&undefined-rcd) (set! nf4d4e@nf4d49 (make-record-type-descriptor '&i/o nf4c64@nf4c5f 'nf4d4c '#f '#f '#())) (set! nf4f00@nf4d4e@nf4d49 nf4d4e@nf4d49) (set! nf4d50@nf4d4b '#f) (set! nf4f01@nf4d50@nf4d4b nf4d50@nf4d4b) (set! nf4d52@nf4d4a (make-record-constructor-descriptor nf4d4e@nf4d49 nf4c68@nf4c60 nf4d50@nf4d4b)) (set! nf4f02@nf4d52@nf4d4a nf4d52@nf4d4a) (set! nf4d55@p? (record-predicate nf4d4e@nf4d49)) (set! nf4f03@nf4d55@p? nf4d55@p?) (set! nf4d57@make-i/o-error (record-constructor nf4d52@nf4d4a)) (set! nf4f04@nf4d57@make-i/o-error nf4d57@make-i/o-error) (set! nf4d59@i/o-error? (condition-predicate nf4d4e@nf4d49)) (set! nf4f05@nf4d59@i/o-error? nf4d59@i/o-error?) (set! nf4d5b@&i/o-rtd nf4d4e@nf4d49) (set! nf4f06@nf4d5b@&i/o-rtd nf4d5b@&i/o-rtd) (set! nf4d5d@&i/o-rcd nf4d52@nf4d4a) (set! nf4f07@nf4d5d@&i/o-rcd nf4d5d@&i/o-rcd) (set! nf4d63@nf4d5e (make-record-type-descriptor '&i/o-read nf4d4e@nf4d49 'nf4d61 '#f '#f '#())) (set! nf4f08@nf4d63@nf4d5e nf4d63@nf4d5e) (set! nf4d65@nf4d60 '#f) (set! nf4f09@nf4d65@nf4d60 nf4d65@nf4d60) (set! nf4d67@nf4d5f (make-record-constructor-descriptor nf4d63@nf4d5e nf4d52@nf4d4a nf4d65@nf4d60)) (set! nf4f0a@nf4d67@nf4d5f nf4d67@nf4d5f) (set! nf4d6a@p? (record-predicate nf4d63@nf4d5e)) (set! nf4f0b@nf4d6a@p? nf4d6a@p?) (set! nf4d6c@make-i/o-read-error (record-constructor nf4d67@nf4d5f)) (set! nf4f0c@nf4d6c@make-i/o-read-error nf4d6c@make-i/o-read-error) (set! nf4d6e@i/o-read-error? (condition-predicate nf4d63@nf4d5e)) (set! nf4f0d@nf4d6e@i/o-read-error? nf4d6e@i/o-read-error?) (set! nf4d70@&i/o-read-rtd nf4d63@nf4d5e) (set! nf4f0e@nf4d70@&i/o-read-rtd nf4d70@&i/o-read-rtd) (set! nf4d72@&i/o-read-rcd nf4d67@nf4d5f) (set! nf4f0f@nf4d72@&i/o-read-rcd nf4d72@&i/o-read-rcd) (set! nf4d78@nf4d73 (make-record-type-descriptor '&i/o-write nf4d4e@nf4d49 'nf4d76 '#f '#f '#())) (set! nf4f10@nf4d78@nf4d73 nf4d78@nf4d73) (set! nf4d7a@nf4d75 '#f) (set! nf4f11@nf4d7a@nf4d75 nf4d7a@nf4d75) (set! nf4d7c@nf4d74 (make-record-constructor-descriptor nf4d78@nf4d73 nf4d52@nf4d4a nf4d7a@nf4d75)) (set! nf4f12@nf4d7c@nf4d74 nf4d7c@nf4d74) (set! nf4d7f@p? (record-predicate nf4d78@nf4d73)) (set! nf4f13@nf4d7f@p? nf4d7f@p?) (set! nf4d81@make-i/o-write-error (record-constructor nf4d7c@nf4d74)) (set! nf4f14@nf4d81@make-i/o-write-error nf4d81@make-i/o-write-error) (set! nf4d83@i/o-write-error? (condition-predicate nf4d78@nf4d73)) (set! nf4f15@nf4d83@i/o-write-error? nf4d83@i/o-write-error?) (set! nf4d85@&i/o-write-rtd nf4d78@nf4d73) (set! nf4f16@nf4d85@&i/o-write-rtd nf4d85@&i/o-write-rtd) (set! nf4d87@&i/o-write-rcd nf4d7c@nf4d74) (set! nf4f17@nf4d87@&i/o-write-rcd nf4d87@&i/o-write-rcd) (set! nf4d8f@nf4d8a (make-record-type-descriptor '&i/o-invalid-position nf4d4e@nf4d49 'nf4d8d '#f '#f '#((immutable position)))) (set! nf4f18@nf4d8f@nf4d8a nf4d8f@nf4d8a) (set! nf4d91@nf4d8c '#f) (set! nf4f19@nf4d91@nf4d8c nf4d91@nf4d8c) (set! nf4d93@nf4d8b (make-record-constructor-descriptor nf4d8f@nf4d8a nf4d52@nf4d4a nf4d91@nf4d8c)) (set! nf4f1a@nf4d93@nf4d8b nf4d93@nf4d8b) (set! nf4d96@p? (record-predicate nf4d8f@nf4d8a)) (set! nf4f1b@nf4d96@p? nf4d96@p?) (set! nf4d98@make-i/o-invalid-position-error (record-constructor nf4d93@nf4d8b)) (set! nf4f1c@nf4d98@make-i/o-invalid-position-error nf4d98@make-i/o-invalid-position-error) (set! nf4d9a@nf4d89 (record-accessor nf4d8f@nf4d8a '0)) (set! nf4f1d@nf4d9a@nf4d89 nf4d9a@nf4d89) (set! nf4d9c@i/o-invalid-position-error? (condition-predicate nf4d8f@nf4d8a)) (set! nf4f1e@nf4d9c@i/o-invalid-position-error? nf4d9c@i/o-invalid-position-error?) (set! nf4d9e@i/o-error-position (condition-accessor nf4d8f@nf4d8a nf4d9a@nf4d89)) (set! nf4f1f@nf4d9e@i/o-error-position nf4d9e@i/o-error-position) (set! nf4da0@&i/o-invalid-position-rtd nf4d8f@nf4d8a) (set! nf4f20@nf4da0@&i/o-invalid-position-rtd nf4da0@&i/o-invalid-position-rtd) (set! nf4da2@&i/o-invalid-position-rcd nf4d93@nf4d8b) (set! nf4f21@nf4da2@&i/o-invalid-position-rcd nf4da2@&i/o-invalid-position-rcd) (set! nf4daa@nf4da5 (make-record-type-descriptor '&i/o-filename nf4d4e@nf4d49 'nf4da8 '#f '#f '#((immutable filename)))) (set! nf4f22@nf4daa@nf4da5 nf4daa@nf4da5) (set! nf4dac@nf4da7 '#f) (set! nf4f23@nf4dac@nf4da7 nf4dac@nf4da7) (set! nf4dae@nf4da6 (make-record-constructor-descriptor nf4daa@nf4da5 nf4d52@nf4d4a nf4dac@nf4da7)) (set! nf4f24@nf4dae@nf4da6 nf4dae@nf4da6) (set! nf4db1@p? (record-predicate nf4daa@nf4da5)) (set! nf4f25@nf4db1@p? nf4db1@p?) (set! nf4db3@make-i/o-filename-error (record-constructor nf4dae@nf4da6)) (set! nf4f26@nf4db3@make-i/o-filename-error nf4db3@make-i/o-filename-error) (set! nf4db5@nf4da4 (record-accessor nf4daa@nf4da5 '0)) (set! nf4f27@nf4db5@nf4da4 nf4db5@nf4da4) (set! nf4db7@i/o-filename-error? (condition-predicate nf4daa@nf4da5)) (set! nf4f28@nf4db7@i/o-filename-error? nf4db7@i/o-filename-error?) (set! nf4db9@i/o-error-filename (condition-accessor nf4daa@nf4da5 nf4db5@nf4da4)) (set! nf4f29@nf4db9@i/o-error-filename nf4db9@i/o-error-filename) (set! nf4dbb@&i/o-filename-rtd nf4daa@nf4da5) (set! nf4f2a@nf4dbb@&i/o-filename-rtd nf4dbb@&i/o-filename-rtd) (set! nf4dbd@&i/o-filename-rcd nf4dae@nf4da6) (set! nf4f2b@nf4dbd@&i/o-filename-rcd nf4dbd@&i/o-filename-rcd) (set! nf4dc3@nf4dbe (make-record-type-descriptor '&i/o-file-protection nf4daa@nf4da5 'nf4dc1 '#f '#f '#())) (set! nf4f2c@nf4dc3@nf4dbe nf4dc3@nf4dbe) (set! nf4dc5@nf4dc0 '#f) (set! nf4f2d@nf4dc5@nf4dc0 nf4dc5@nf4dc0) (set! nf4dc7@nf4dbf (make-record-constructor-descriptor nf4dc3@nf4dbe nf4dae@nf4da6 nf4dc5@nf4dc0)) (set! nf4f2e@nf4dc7@nf4dbf nf4dc7@nf4dbf) (set! nf4dca@p? (record-predicate nf4dc3@nf4dbe)) (set! nf4f2f@nf4dca@p? nf4dca@p?) (set! nf4dcc@make-i/o-file-protection-error (record-constructor nf4dc7@nf4dbf)) (set! nf4f30@nf4dcc@make-i/o-file-protection-error nf4dcc@make-i/o-file-protection-error) (set! nf4dce@i/o-file-protection-error? (condition-predicate nf4dc3@nf4dbe)) (set! nf4f31@nf4dce@i/o-file-protection-error? nf4dce@i/o-file-protection-error?) (set! nf4dd0@&i/o-file-protection-rtd nf4dc3@nf4dbe) (set! nf4f32@nf4dd0@&i/o-file-protection-rtd nf4dd0@&i/o-file-protection-rtd) (set! nf4dd2@&i/o-file-protection-rcd nf4dc7@nf4dbf) (set! nf4f33@nf4dd2@&i/o-file-protection-rcd nf4dd2@&i/o-file-protection-rcd) (set! nf4dd8@nf4dd3 (make-record-type-descriptor '&i/o-file-is-read-only nf4dc3@nf4dbe 'nf4dd6 '#f '#f '#())) (set! nf4f34@nf4dd8@nf4dd3 nf4dd8@nf4dd3) (set! nf4dda@nf4dd5 '#f) (set! nf4f35@nf4dda@nf4dd5 nf4dda@nf4dd5) (set! nf4ddc@nf4dd4 (make-record-constructor-descriptor nf4dd8@nf4dd3 nf4dc7@nf4dbf nf4dda@nf4dd5)) (set! nf4f36@nf4ddc@nf4dd4 nf4ddc@nf4dd4) (set! nf4ddf@p? (record-predicate nf4dd8@nf4dd3)) (set! nf4f37@nf4ddf@p? nf4ddf@p?) (set! nf4de1@make-i/o-file-is-read-only-error (record-constructor nf4ddc@nf4dd4)) (set! nf4f38@nf4de1@make-i/o-file-is-read-only-error nf4de1@make-i/o-file-is-read-only-error) (set! nf4de3@i/o-file-is-read-only-error? (condition-predicate nf4dd8@nf4dd3)) (set! nf4f39@nf4de3@i/o-file-is-read-only-error? nf4de3@i/o-file-is-read-only-error?) (set! nf4de5@&i/o-file-is-read-only-rtd nf4dd8@nf4dd3) (set! nf4f3a@nf4de5@&i/o-file-is-read-only-rtd nf4de5@&i/o-file-is-read-only-rtd) (set! nf4de7@&i/o-file-is-read-only-rcd nf4ddc@nf4dd4) (set! nf4f3b@nf4de7@&i/o-file-is-read-only-rcd nf4de7@&i/o-file-is-read-only-rcd) (set! nf4ded@nf4de8 (make-record-type-descriptor '&i/o-file-already-exists nf4daa@nf4da5 'nf4deb '#f '#f '#())) (set! nf4f3c@nf4ded@nf4de8 nf4ded@nf4de8) (set! nf4def@nf4dea '#f) (set! nf4f3d@nf4def@nf4dea nf4def@nf4dea) (set! nf4df1@nf4de9 (make-record-constructor-descriptor nf4ded@nf4de8 nf4dae@nf4da6 nf4def@nf4dea)) (set! nf4f3e@nf4df1@nf4de9 nf4df1@nf4de9) (set! nf4df4@p? (record-predicate nf4ded@nf4de8)) (set! nf4f3f@nf4df4@p? nf4df4@p?) (set! nf4df6@make-i/o-file-already-exists-error (record-constructor nf4df1@nf4de9)) (set! nf4f40@nf4df6@make-i/o-file-already-exists-error nf4df6@make-i/o-file-already-exists-error) (set! nf4df8@i/o-file-already-exists-error? (condition-predicate nf4ded@nf4de8)) (set! nf4f41@nf4df8@i/o-file-already-exists-error? nf4df8@i/o-file-already-exists-error?) (set! nf4dfa@&i/o-file-already-exists-rtd nf4ded@nf4de8) (set! nf4f42@nf4dfa@&i/o-file-already-exists-rtd nf4dfa@&i/o-file-already-exists-rtd) (set! nf4dfc@&i/o-file-already-exists-rcd nf4df1@nf4de9) (set! nf4f43@nf4dfc@&i/o-file-already-exists-rcd nf4dfc@&i/o-file-already-exists-rcd) (set! nf4e02@nf4dfd (make-record-type-descriptor '&i/o-file-does-not-exist nf4daa@nf4da5 'nf4e00 '#f '#f '#())) (set! nf4f44@nf4e02@nf4dfd nf4e02@nf4dfd) (set! nf4e04@nf4dff '#f) (set! nf4f45@nf4e04@nf4dff nf4e04@nf4dff) (set! nf4e06@nf4dfe (make-record-constructor-descriptor nf4e02@nf4dfd nf4dae@nf4da6 nf4e04@nf4dff)) (set! nf4f46@nf4e06@nf4dfe nf4e06@nf4dfe) (set! nf4e09@p? (record-predicate nf4e02@nf4dfd)) (set! nf4f47@nf4e09@p? nf4e09@p?) (set! nf4e0b@make-i/o-file-does-not-exist-error (record-constructor nf4e06@nf4dfe)) (set! nf4f48@nf4e0b@make-i/o-file-does-not-exist-error nf4e0b@make-i/o-file-does-not-exist-error) (set! nf4e0d@i/o-file-does-not-exist-error? (condition-predicate nf4e02@nf4dfd)) (set! nf4f49@nf4e0d@i/o-file-does-not-exist-error? nf4e0d@i/o-file-does-not-exist-error?) (set! nf4e0f@&i/o-file-does-not-exist-rtd nf4e02@nf4dfd) (set! nf4f4a@nf4e0f@&i/o-file-does-not-exist-rtd nf4e0f@&i/o-file-does-not-exist-rtd) (set! nf4e11@&i/o-file-does-not-exist-rcd nf4e06@nf4dfe) (set! nf4f4b@nf4e11@&i/o-file-does-not-exist-rcd nf4e11@&i/o-file-does-not-exist-rcd) (set! nf4e19@nf4e14 (make-record-type-descriptor '&i/o-port nf4d4e@nf4d49 'nf4e17 '#f '#f '#((immutable port)))) (set! nf4f4c@nf4e19@nf4e14 nf4e19@nf4e14) (set! nf4e1b@nf4e16 '#f) (set! nf4f4d@nf4e1b@nf4e16 nf4e1b@nf4e16) (set! nf4e1d@nf4e15 (make-record-constructor-descriptor nf4e19@nf4e14 nf4d52@nf4d4a nf4e1b@nf4e16)) (set! nf4f4e@nf4e1d@nf4e15 nf4e1d@nf4e15) (set! nf4e20@p? (record-predicate nf4e19@nf4e14)) (set! nf4f4f@nf4e20@p? nf4e20@p?) (set! nf4e22@make-i/o-port-error (record-constructor nf4e1d@nf4e15)) (set! nf4f50@nf4e22@make-i/o-port-error nf4e22@make-i/o-port-error) (set! nf4e24@nf4e13 (record-accessor nf4e19@nf4e14 '0)) (set! nf4f51@nf4e24@nf4e13 nf4e24@nf4e13) (set! nf4e26@i/o-port-error? (condition-predicate nf4e19@nf4e14)) (set! nf4f52@nf4e26@i/o-port-error? nf4e26@i/o-port-error?) (set! nf4e28@i/o-error-port (condition-accessor nf4e19@nf4e14 nf4e24@nf4e13)) (set! nf4f53@nf4e28@i/o-error-port nf4e28@i/o-error-port) (set! nf4e2a@&i/o-port-rtd nf4e19@nf4e14) (set! nf4f54@nf4e2a@&i/o-port-rtd nf4e2a@&i/o-port-rtd) (set! nf4e2c@&i/o-port-rcd nf4e1d@nf4e15) (set! nf4f55@nf4e2c@&i/o-port-rcd nf4e2c@&i/o-port-rcd) (set! nf4e32@nf4e2d (make-record-type-descriptor '&i/o-decoding nf4e19@nf4e14 'nf4e30 '#f '#f '#())) (set! nf4f56@nf4e32@nf4e2d nf4e32@nf4e2d) (set! nf4e34@nf4e2f '#f) (set! nf4f57@nf4e34@nf4e2f nf4e34@nf4e2f) (set! nf4e36@nf4e2e (make-record-constructor-descriptor nf4e32@nf4e2d nf4e1d@nf4e15 nf4e34@nf4e2f)) (set! nf4f58@nf4e36@nf4e2e nf4e36@nf4e2e) (set! nf4e39@p? (record-predicate nf4e32@nf4e2d)) (set! nf4f59@nf4e39@p? nf4e39@p?) (set! nf4e3b@make-i/o-decoding-error (record-constructor nf4e36@nf4e2e)) (set! nf4f5a@nf4e3b@make-i/o-decoding-error nf4e3b@make-i/o-decoding-error) (set! nf4e3d@i/o-decoding-error? (condition-predicate nf4e32@nf4e2d)) (set! nf4f5b@nf4e3d@i/o-decoding-error? nf4e3d@i/o-decoding-error?) (set! nf4e3f@&i/o-decoding-rtd nf4e32@nf4e2d) (set! nf4f5c@nf4e3f@&i/o-decoding-rtd nf4e3f@&i/o-decoding-rtd) (set! nf4e41@&i/o-decoding-rcd nf4e36@nf4e2e) (set! nf4f5d@nf4e41@&i/o-decoding-rcd nf4e41@&i/o-decoding-rcd) (set! nf4e49@nf4e44 (make-record-type-descriptor '&i/o-encoding nf4e19@nf4e14 'nf4e47 '#f '#f '#((immutable char)))) (set! nf4f5e@nf4e49@nf4e44 nf4e49@nf4e44) (set! nf4e4b@nf4e46 '#f) (set! nf4f5f@nf4e4b@nf4e46 nf4e4b@nf4e46) (set! nf4e4d@nf4e45 (make-record-constructor-descriptor nf4e49@nf4e44 nf4e1d@nf4e15 nf4e4b@nf4e46)) (set! nf4f60@nf4e4d@nf4e45 nf4e4d@nf4e45) (set! nf4e50@p? (record-predicate nf4e49@nf4e44)) (set! nf4f61@nf4e50@p? nf4e50@p?) (set! nf4e52@make-i/o-encoding-error (record-constructor nf4e4d@nf4e45)) (set! nf4f62@nf4e52@make-i/o-encoding-error nf4e52@make-i/o-encoding-error) (set! nf4e54@nf4e43 (record-accessor nf4e49@nf4e44 '0)) (set! nf4f63@nf4e54@nf4e43 nf4e54@nf4e43) (set! nf4e56@i/o-encoding-error? (condition-predicate nf4e49@nf4e44)) (set! nf4f64@nf4e56@i/o-encoding-error? nf4e56@i/o-encoding-error?) (set! nf4e58@i/o-encoding-error-char (condition-accessor nf4e49@nf4e44 nf4e54@nf4e43)) (set! nf4f65@nf4e58@i/o-encoding-error-char nf4e58@i/o-encoding-error-char) (set! nf4e5a@&i/o-encoding-rtd nf4e49@nf4e44) (set! nf4f66@nf4e5a@&i/o-encoding-rtd nf4e5a@&i/o-encoding-rtd) (set! nf4e5c@&i/o-encoding-rcd nf4e4d@nf4e45) (set! nf4f67@nf4e5c@&i/o-encoding-rcd nf4e5c@&i/o-encoding-rcd) (set! nf4e62@nf4e5d (make-record-type-descriptor '&no-infinities nf4cee@nf4ce9 'nf4e60 '#f '#f '#())) (set! nf4f68@nf4e62@nf4e5d nf4e62@nf4e5d) (set! nf4e64@nf4e5f '#f) (set! nf4f69@nf4e64@nf4e5f nf4e64@nf4e5f) (set! nf4e66@nf4e5e (make-record-constructor-descriptor nf4e62@nf4e5d nf4cf2@nf4cea nf4e64@nf4e5f)) (set! nf4f6a@nf4e66@nf4e5e nf4e66@nf4e5e) (set! nf4e69@p? (record-predicate nf4e62@nf4e5d)) (set! nf4f6b@nf4e69@p? nf4e69@p?) (set! nf4e6b@make-no-infinities-violation (record-constructor nf4e66@nf4e5e)) (set! nf4f6c@nf4e6b@make-no-infinities-violation nf4e6b@make-no-infinities-violation) (set! nf4e6d@no-infinities-violation? (condition-predicate nf4e62@nf4e5d)) (set! nf4f6d@nf4e6d@no-infinities-violation? nf4e6d@no-infinities-violation?) (set! nf4e6f@&no-infinities-rtd nf4e62@nf4e5d) (set! nf4f6e@nf4e6f@&no-infinities-rtd nf4e6f@&no-infinities-rtd) (set! nf4e71@&no-infinities-rcd nf4e66@nf4e5e) (set! nf4f6f@nf4e71@&no-infinities-rcd nf4e71@&no-infinities-rcd) (set! nf4e77@nf4e72 (make-record-type-descriptor '&no-nans nf4cee@nf4ce9 'nf4e75 '#f '#f '#())) (set! nf4f70@nf4e77@nf4e72 nf4e77@nf4e72) (set! nf4e79@nf4e74 '#f) (set! nf4f71@nf4e79@nf4e74 nf4e79@nf4e74) (set! nf4e7b@nf4e73 (make-record-constructor-descriptor nf4e77@nf4e72 nf4cf2@nf4cea nf4e79@nf4e74)) (set! nf4f72@nf4e7b@nf4e73 nf4e7b@nf4e73) (set! nf4e7e@p? (record-predicate nf4e77@nf4e72)) (set! nf4f73@nf4e7e@p? nf4e7e@p?) (set! nf4e80@make-no-nans-violation (record-constructor nf4e7b@nf4e73)) (set! nf4f74@nf4e80@make-no-nans-violation nf4e80@make-no-nans-violation) (set! nf4e82@no-nans-violation? (condition-predicate nf4e77@nf4e72)) (set! nf4f75@nf4e82@no-nans-violation? nf4e82@no-nans-violation?) (set! nf4e84@&no-nans-rtd nf4e77@nf4e72) (set! nf4f76@nf4e84@&no-nans-rtd nf4e84@&no-nans-rtd) (set! nf4e86@&no-nans-rcd nf4e7b@nf4e73) (set! nf4f77@nf4e86@&no-nans-rcd nf4e86@&no-nans-rcd) (void))
(begin (begin (nf2a0d@nf29c2@current-primitive-locations (lambda (nf5445@x) (let ((nf5447@t (assq nf5445@x '((&no-nans-rcd . nf4f77@nf4e86@&no-nans-rcd) (&no-nans-rtd . nf4f76@nf4e84@&no-nans-rtd) (&no-infinities-rcd . nf4f6f@nf4e71@&no-infinities-rcd) (&no-infinities-rtd . nf4f6e@nf4e6f@&no-infinities-rtd) (&i/o-encoding-rcd . nf4f67@nf4e5c@&i/o-encoding-rcd) (&i/o-encoding-rtd . nf4f66@nf4e5a@&i/o-encoding-rtd) (&i/o-decoding-rcd . nf4f5d@nf4e41@&i/o-decoding-rcd) (&i/o-decoding-rtd . nf4f5c@nf4e3f@&i/o-decoding-rtd) (&i/o-port-rcd . nf4f55@nf4e2c@&i/o-port-rcd) (&i/o-port-rtd . nf4f54@nf4e2a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . nf4f4b@nf4e11@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . nf4f4a@nf4e0f@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . nf4f43@nf4dfc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . nf4f42@nf4dfa@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . nf4f3b@nf4de7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . nf4f3a@nf4de5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . nf4f33@nf4dd2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . nf4f32@nf4dd0@&i/o-file-protection-rtd) (&i/o-filename-rcd . nf4f2b@nf4dbd@&i/o-filename-rcd) (&i/o-filename-rtd . nf4f2a@nf4dbb@&i/o-filename-rtd) (&i/o-invalid-position-rcd . nf4f21@nf4da2@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . nf4f20@nf4da0@&i/o-invalid-position-rtd) (&i/o-write-rcd . nf4f17@nf4d87@&i/o-write-rcd) (&i/o-write-rtd . nf4f16@nf4d85@&i/o-write-rtd) (&i/o-read-rcd . nf4f0f@nf4d72@&i/o-read-rcd) (&i/o-read-rtd . nf4f0e@nf4d70@&i/o-read-rtd) (&i/o-rcd . nf4f07@nf4d5d@&i/o-rcd) (&i/o-rtd . nf4f06@nf4d5b@&i/o-rtd) (&undefined-rcd . nf4eff@nf4d48@&undefined-rcd) (&undefined-rtd . nf4efe@nf4d46@&undefined-rtd) (&syntax-rcd . nf4ef7@nf4d33@&syntax-rcd) (&syntax-rtd . nf4ef6@nf4d31@&syntax-rtd) (&lexical-rcd . nf4eeb@nf4d12@&lexical-rcd) (&lexical-rtd . nf4eea@nf4d10@&lexical-rtd) (&implementation-restriction-rcd . nf4ee3@nf4cfd@&implementation-restriction-rcd) (&implementation-restriction-rtd . nf4ee2@nf4cfb@&implementation-restriction-rtd) (&non-continuable-rcd . nf4edb@nf4ce8@&non-continuable-rcd) (&non-continuable-rtd . nf4eda@nf4ce6@&non-continuable-rtd) (&who-rcd . nf4ed3@nf4cd3@&who-rcd) (&who-rtd . nf4ed2@nf4cd1@&who-rtd) (&irritants-rcd . nf4ec9@nf4cb8@&irritants-rcd) (&irritants-rtd . nf4ec8@nf4cb6@&irritants-rtd) (&assertion-rcd . nf4ebf@nf4c9d@&assertion-rcd) (&assertion-rtd . nf4ebe@nf4c9b@&assertion-rtd) (&violation-rcd . nf4eb7@nf4c88@&violation-rcd) (&violation-rtd . nf4eb6@nf4c86@&violation-rtd) (&error-rcd . nf4eaf@nf4c73@&error-rcd) (&error-rtd . nf4eae@nf4c71@&error-rtd) (&serious-rcd . nf4ea7@nf4c5e@&serious-rcd) (&serious-rtd . nf4ea6@nf4c5c@&serious-rtd) (&warning-rcd . nf4e9f@nf4c49@&warning-rcd) (&warning-rtd . nf4e9e@nf4c47@&warning-rtd) (&message-rcd . nf4e97@nf4c34@&message-rcd) (&message-rtd . nf4e96@nf4c32@&message-rtd) (&condition-rcd . nf4e8d@nf4bd5@&condition-rcd) (&condition-rtd . nf4e8c@nf4bd3@&condition-rtd) (syntax-error . nf4baf@nf3153@syntax-error) (syntax-dispatch . nf4b4d@nf3077@syntax-dispatch) (load . nf50ec@nf4f97@load) (interaction-environment . nf4bb8@nf3165@interaction-environment) (library-path . nf2c74@nf2ab0@library-path) (mosh-cache-dir . nf29bb@nf289b@mosh-cache-dir) (make-parameter . nf29ba@nf2899@make-parameter) (make-variable-transformer . nf4b0a@nf2ea2@make-variable-transformer) (identifier? . nf4bb2@nf3159@identifier?) (generate-temporaries . nf4ba8@nf3145@generate-temporaries) (free-identifier=? . nf4ba9@nf3147@free-identifier=?) (syntax->datum . nf4bb4@nf315d@syntax->datum) (datum->syntax . nf4bb3@nf315b@datum->syntax) (bound-identifier=? . nf4baa@nf3149@bound-identifier=?) (make-i/o-write-error . nf4f14@nf4d81@make-i/o-write-error) (make-i/o-read-error . nf4f0c@nf4d6c@make-i/o-read-error) (make-i/o-port-error . nf4f50@nf4e22@make-i/o-port-error) (make-i/o-invalid-position-error . nf4f1c@nf4d98@make-i/o-invalid-position-error) (make-i/o-filename-error . nf4f26@nf4db3@make-i/o-filename-error) (make-i/o-file-protection-error . nf4f30@nf4dcc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . nf4f38@nf4de1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . nf4f48@nf4e0b@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . nf4f40@nf4df6@make-i/o-file-already-exists-error) (make-i/o-error . nf4f04@nf4d57@make-i/o-error) (make-i/o-encoding-error . nf4f62@nf4e52@make-i/o-encoding-error) (make-i/o-decoding-error . nf4f5a@nf4e3b@make-i/o-decoding-error) (i/o-write-error? . nf4f15@nf4d83@i/o-write-error?) (i/o-read-error? . nf4f0d@nf4d6e@i/o-read-error?) (i/o-port-error? . nf4f52@nf4e26@i/o-port-error?) (i/o-invalid-position-error? . nf4f1e@nf4d9c@i/o-invalid-position-error?) (i/o-filename-error? . nf4f28@nf4db7@i/o-filename-error?) (i/o-file-protection-error? . nf4f31@nf4dce@i/o-file-protection-error?) (i/o-file-is-read-only-error? . nf4f39@nf4de3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . nf4f49@nf4e0d@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . nf4f41@nf4df8@i/o-file-already-exists-error?) (i/o-error? . nf4f05@nf4d59@i/o-error?) (i/o-error-position . nf4f1f@nf4d9e@i/o-error-position) (i/o-error-port . nf4f53@nf4e28@i/o-error-port) (i/o-error-filename . nf4f29@nf4db9@i/o-error-filename) (i/o-encoding-error? . nf4f64@nf4e56@i/o-encoding-error?) (i/o-encoding-error-char . nf4f65@nf4e58@i/o-encoding-error-char) (i/o-decoding-error? . nf4f5b@nf4e3d@i/o-decoding-error?) (scheme-report-environment . nf4b9f@nf3133@scheme-report-environment) (null-environment . nf4b9e@nf3131@null-environment) (command-line . nf50e9@nf4f91@command-line) (eval . nf4ba1@nf3137@eval) (environment . nf4b9d@nf312f@environment) (who-condition? . nf4ed0@nf4ccd@who-condition?) (warning? . nf4e9d@nf4c45@warning?) (violation? . nf4eb5@nf4c84@violation?) (undefined-violation? . nf4efd@nf4d44@undefined-violation?) (syntax-violation? . nf4ef3@nf4d2b@syntax-violation?) (syntax-violation-subform . nf4ef5@nf4d2f@syntax-violation-subform) (syntax-violation-form . nf4ef4@nf4d2d@syntax-violation-form) (syntax-violation . nf4bb1@nf3157@syntax-violation) (serious-condition? . nf4ea5@nf4c5a@serious-condition?) (non-continuable-violation? . nf4ed9@nf4ce4@non-continuable-violation?) (message-condition? . nf4e94@nf4c2e@message-condition?) (make-who-condition . nf4ece@nf4cc9@make-who-condition) (make-warning . nf4e9c@nf4c43@make-warning) (make-violation . nf4eb4@nf4c82@make-violation) (make-undefined-violation . nf4efc@nf4d42@make-undefined-violation) (make-syntax-violation . nf4ef0@nf4d25@make-syntax-violation) (make-serious-condition . nf4ea4@nf4c58@make-serious-condition) (make-non-continuable-violation . nf4ed8@nf4ce2@make-non-continuable-violation) (make-message-condition . nf4e92@nf4c2a@make-message-condition) (make-lexical-violation . nf4ee8@nf4d0c@make-lexical-violation) (make-irritants-condition . nf4ec4@nf4cae@make-irritants-condition) (make-implementation-restriction-violation . nf4ee0@nf4cf7@make-implementation-restriction-violation) (make-error . nf4eac@nf4c6d@make-error) (make-assertion-violation . nf4ebc@nf4c97@make-assertion-violation) (lexical-violation? . nf4ee9@nf4d0e@lexical-violation?) (irritants-condition? . nf4ec6@nf4cb2@irritants-condition?) (implementation-restriction-violation? . nf4ee1@nf4cf9@implementation-restriction-violation?) (error? . nf4ead@nf4c6f@error?) (condition-who . nf4ed1@nf4ccf@condition-who) (condition-message . nf4e95@nf4c30@condition-message) (condition-irritants . nf4ec7@nf4cb4@condition-irritants) (assertion-violation? . nf4ebd@nf4c99@assertion-violation?) (no-nans-violation? . nf4f75@nf4e82@no-nans-violation?) (no-infinities-violation? . nf4f6d@nf4e6d@no-infinities-violation?) (make-no-nans-violation . nf4f74@nf4e80@make-no-nans-violation) (make-no-infinities-violation . nf4f6c@nf4e6b@make-no-infinities-violation) (assertion-error . nf4bae@nf3151@assertion-error))))) (if nf5447@t (cdr nf5447@t) '#f)))) (nf2c84@nf2ad0@install-library 'nf5422 '(mosh interaction) '() '() '() '() '((regexp? . nf541a) (alist->eq-hash-table . nf5416) (format . nf5413) (string-split . nf5408) (call-process . nf5402) (set-current-directory! . nf53fe) (expand-path . nf53fd) (current-directory . nf53fc) (%spawn . nf53fb) (%waitpid . nf53fa) (simple-struct-name . nf53f9) (simple-struct-set! . nf53f8) (simple-struct-ref . nf53f7) (make-simple-struct . nf53f6) (simple-struct? . nf53f5) (pointer-ref-c-int64 . nf53f4) (pointer-ref-c-int32 . nf53f3) (pointer-ref-c-int16 . nf53f2) (pointer-ref-c-int8 . nf53f1) (pointer-ref-c-uint64 . nf53f0) (pointer-ref-c-uint32 . nf53ef) (pointer-ref-c-uint16 . nf53ee) (pointer-ref-c-uint8 . nf53ed) (pointer-set-c-uint64! . nf53ec) (pointer-set-c-uint32! . nf53eb) (pointer-set-c-uint16! . nf53ea) (pointer-set-c-uint8! . nf53e9) (pointer-set-c-int64! . nf53e8) (pointer-set-c-int32! . nf53e7) (pointer-set-c-int16! . nf53e6) (pointer-set-c-int8! . nf53e5) (pointer-set-c-pointer! . nf53e4) (pointer-set-c-double! . nf53e3) (pointer-set-c-float! . nf53e2) (pointer-set-c-long-long! . nf53e1) (pointer-set-c-long! . nf53e0) (pointer-set-c-int! . nf53df) (pointer-set-c-short! . nf53de) (pointer-set-c-char! . nf53dd) (pointer-ref-c-pointer . nf53dc) (pointer-ref-c-double . nf53db) (pointer-ref-c-float . nf53da) (pointer-ref-c-unsigned-long-long . nf53d9) (pointer-ref-c-signed-long-long . nf53d8) (pointer-ref-c-unsigned-long . nf53d7) (pointer-ref-c-signed-long . nf53d6) (pointer-ref-c-unsigned-int . nf53d5) (pointer-ref-c-signed-int . nf53d4) (pointer-ref-c-unsigned-short . nf53d3) (pointer-ref-c-signed-short . nf53d2) (pointer-ref-c-unsigned-char . nf53d1) (pointer-ref-c-signed-char . nf53d0) (pointer->integer . nf53cf) (integer->pointer . nf53ce) (pointer? . nf53cd) (shared-errno . nf53cc) (%ffi-supported? . nf53c7) (%ffi-pointer->string . nf53c6) (%ffi-call->string-or-zero . nf53c5) (%ffi-call->double . nf53c4) (%ffi-call->void* . nf53c3) (%ffi-call->void . nf53c2) (%ffi-call->char . nf53c1) (%ffi-call->int . nf53c0) (%ffi-lookup . nf53bf) (%ffi-open . nf53be) (%fork . nf53bd) (%pipe . nf53bc) (p . nf53bb) (whereis . nf539f) (register . nf539e) (vm-join! . nf539d) (vm-set-value! . nf539c) (vm? . nf539b) (main-vm? . nf539a) (vm-eval . nf5399) (vm-self . nf5398) (vm-start! . nf5397) (make-vm . nf5396) (mutex-try-lock! . nf5395) (mutex-unlock! . nf5394) (mutex-lock! . nf5393) (mutex? . nf5392) (make-mutex . nf5391) (condition-variable-notify-all! . nf5390) (condition-variable-notify! . nf538f) (condition-variable-wait! . nf538e) (make-condition-variable . nf538d) (string-upcase . nf5375) (string-titlecase . nf5374) (string-normalize-nfkd . nf5373) (string-normalize-nfkc . nf5372) (string-normalize-nfd . nf5371) (string-normalize-nfc . nf5370) (string-foldcase . nf536f) (string-downcase . nf536e) (string-ci>? . nf536d) (string-ci>=? . nf536c) (string-ci=? . nf536b) (string-ci<? . nf536a) (string-ci<=? . nf5369) (char-whitespace? . nf5368) (char-upper-case? . nf5367) (char-title-case? . nf5366) (char-numeric? . nf5365) (char-lower-case? . nf5364) (char-general-category . nf5363) (char-upcase . nf5362) (char-titlecase . nf5361) (char-foldcase . nf5360) (char-downcase . nf535f) (char-ci>? . nf535e) (char-ci>=? . nf535d) (char-ci=? . nf535c) (char-ci<? . nf535b) (char-ci<=? . nf535a) (char-alphabetic? . nf5359) (make-variable-transformer . nf2ea1) (identifier? . nf3158) (generate-temporaries . nf3144) (free-identifier=? . nf3146) (syntax->datum . nf315c) (datum->syntax . nf315a) (bound-identifier=? . nf3148) (record-type-descriptor? . nf5358) (record-predicate . nf5357) (record-mutator . nf5356) (record-constructor . nf5355) (record-accessor . nf5354) (make-record-type-descriptor . nf5353) (make-record-constructor-descriptor . nf5352) (record? . nf5351) (record-type-uid . nf5350) (record-type-sealed? . nf534f) (record-type-parent . nf534e) (record-type-opaque? . nf534d) (record-type-name . nf534c) (record-type-generative? . nf534b) (record-type-field-names . nf534a) (record-rtd . nf5349) (record-field-mutable? . nf5348) (delete-file . nf5347) (file-exists? . nf5346) (vector-sort! . nf5345) (vector-sort . nf5344) (list-sort . nf5343) (symbol-hash . nf5342) (string-ci-hash . nf5341) (string-hash . nf5340) (equal-hash . nf533f) (hashtable-equivalence-function . nf533e) (make-hashtable . nf533d) (hashtable-hash-function . nf533c) (make-eqv-hashtable . nf533b) (make-eq-hashtable . nf533a) (hashtable? . nf5339) (hashtable-update! . nf5338) (hashtable-size . nf5337) (hashtable-set! . nf5336) (hashtable-ref . nf5335) (hashtable-mutable? . nf5334) (hashtable-keys . nf5333) (hashtable-entries . nf5332) (hashtable-delete! . nf5331) (hashtable-copy . nf5330) (hashtable-contains? . nf532f) (hashtable-clear! . nf532e) (call-with-output-file . nf532d) (call-with-input-file . nf532c) (write-char . nf532b) (write . nf532a) (with-output-to-file . nf5329) (with-input-from-file . nf5328) (read-char . nf5327) (read . nf5326) (peek-char . nf5325) (open-output-file . nf5324) (open-input-file . nf5323) (newline . nf5322) (display . nf5321) (close-output-port . nf5320) (close-input-port . nf531f) (eof-object? . nf531e) (eof-object . nf531d) (current-error-port . nf531c) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (utf-8-codec . nf5317) (utf-16-codec . nf5316) (transcoder-error-handling-mode . nf5315) (transcoder-eol-style . nf5314) (transcoder-codec . nf5313) (transcoded-port . nf5312) (textual-port? . nf5311) (string->bytevector . nf5310) (standard-output-port . nf530f) (standard-input-port . nf530e) (standard-error-port . nf530d) (set-port-position! . nf530c) (put-u8 . nf530b) (put-string . nf530a) (put-datum . nf5309) (put-char . nf5308) (put-bytevector . nf5307) (port? . nf5306) (port-transcoder . nf5305) (port-position . nf5304) (port-has-set-port-position!? . nf5303) (port-has-port-position? . nf5302) (port-eof? . nf5301) (output-port-buffer-mode . nf5300) (open-string-output-port . nf52ff) (open-string-input-port . nf52fe) (open-file-output-port . nf52fd) (open-file-input/output-port . nf52fc) (open-file-input-port . nf52fb) (open-bytevector-output-port . nf52fa) (open-bytevector-input-port . nf52f9) (native-transcoder . nf52f8) (native-eol-style . nf52f7) (make-transcoder . nf52f6) (latin-1-codec . nf52f5) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (make-i/o-encoding-error . nf4e51) (make-i/o-decoding-error . nf4e3a) (make-custom-textual-output-port . nf52f4) (make-custom-textual-input/output-port . nf52f3) (make-custom-textual-input-port . nf52f2) (make-custom-binary-output-port . nf52f1) (make-custom-binary-input/output-port . nf52f0) (make-custom-binary-input-port . nf52ef) (make-bytevector . nf52ee) (lookahead-u8 . nf52ed) (lookahead-char . nf52ec) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (i/o-encoding-error? . nf4e55) (i/o-encoding-error-char . nf4e57) (i/o-decoding-error? . nf4e3c) (get-u8 . nf52eb) (get-string-n! . nf52ea) (get-string-n . nf52e9) (get-string-all . nf52e8) (get-line . nf52e7) (get-datum . nf52e6) (get-char . nf52e5) (get-bytevector-some . nf52e4) (get-bytevector-n! . nf52e3) (get-bytevector-n . nf52e2) (get-bytevector-all . nf52e1) (flush-output-port . nf52e0) (close-port . nf52df) (exit . nf52d7) (command-line . nf4f90) (string-fill! . nf52d6) (string-set! . nf52d5) (set-cdr! . nf52d4) (set-car! . nf52d3) (remove . nf52d2) (remv . nf52d1) (remp . nf52d0) (remq . nf52cf) (partition . nf52ce) (memv . nf52cd) (memq . nf52cc) (memp . nf52cb) (member . nf52ca) (exists . nf52c9) (for-all . nf52c8) (fold-right . nf52c7) (fold-left . nf52c6) (find . nf52c5) (filter . nf52c4) (cons* . nf52c3) (assv . nf52c2) (assq . nf52c1) (assp . nf52c0) (assoc . nf52bf) (call-with-string-output-port . nf52be) (call-with-port . nf52bd) (call-with-bytevector-output-port . nf52bc) (bytevector->string . nf52bb) (buffer-mode? . nf52ba) (binary-port? . nf52b9) (with-exception-handler . nf52b8) (raise-continuable . nf52b7) (raise . nf52b6) (eval . nf3136) (environment . nf312e) (make-enumeration . nf52b5) (enum-set=? . nf52b4) (enum-set-universe . nf52b3) (enum-set-union . nf52b2) (enum-set-subset? . nf52b1) (enum-set-projection . nf52b0) (enum-set-member? . nf52af) (enum-set-intersection . nf52ae) (enum-set-indexer . nf52ad) (enum-set-difference . nf52ac) (enum-set-constructor . nf52ab) (enum-set-complement . nf52aa) (enum-set->list . nf52a9) (who-condition? . nf4ccc) (warning? . nf4c44) (violation? . nf4c83) (undefined-violation? . nf4d43) (syntax-violation? . nf4d2a) (syntax-violation-subform . nf4d2e) (syntax-violation-form . nf4d2c) (syntax-violation . nf3156) (simple-conditions . nf52a8) (serious-condition? . nf4c59) (non-continuable-violation? . nf4ce3) (message-condition? . nf4c2d) (make-who-condition . nf4cc8) (make-warning . nf4c42) (make-violation . nf4c81) (make-undefined-violation . nf4d41) (make-syntax-violation . nf4d24) (make-serious-condition . nf4c57) (make-non-continuable-violation . nf4ce1) (make-message-condition . nf4c29) (make-lexical-violation . nf4d0b) (make-irritants-condition . nf4cad) (make-implementation-restriction-violation . nf4cf6) (make-error . nf4c6c) (make-assertion-violation . nf4c96) (lexical-violation? . nf4d0d) (irritants-condition? . nf4cb1) (implementation-restriction-violation? . nf4cf8) (error? . nf4c6e) (condition-who . nf4cce) (condition-predicate . nf52a7) (condition-message . nf4c2f) (condition-irritants . nf4cb3) (condition-accessor . nf52a6) (condition . nf52a5) (assertion-violation? . nf4c98) (condition? . nf52a4) (utf32->string . nf52a3) (utf16->string . nf52a2) (utf8->string . nf52a1) (uint-list->bytevector . nf52a0) (u8-list->bytevector . nf529f) (string->utf8 . nf529e) (string->utf32 . nf529d) (string->utf16 . nf529c) (sint-list->bytevector . nf529b) (native-endianness . nf529a) (bytevector? . nf5299) (bytevector=? . nf5298) (bytevector-uint-set! . nf5297) (bytevector-uint-ref . nf5296) (bytevector-u8-set! . nf5295) (bytevector-u8-ref . nf5294) (bytevector-u64-set! . nf5293) (bytevector-u64-ref . nf5292) (bytevector-u64-native-set! . nf5291) (bytevector-u64-native-ref . nf5290) (bytevector-u32-set! . nf528f) (bytevector-u32-ref . nf528e) (bytevector-u32-native-set! . nf528d) (bytevector-u32-native-ref . nf528c) (bytevector-u16-set! . nf528b) (bytevector-u16-ref . nf528a) (bytevector-u16-native-set! . nf5289) (bytevector-u16-native-ref . nf5288) (bytevector-sint-set! . nf5287) (bytevector-sint-ref . nf5286) (bytevector-s8-set! . nf5285) (bytevector-s8-ref . nf5284) (bytevector-s64-set! . nf5283) (bytevector-s64-ref . nf5282) (bytevector-s64-native-set! . nf5281) (bytevector-s64-native-ref . nf5280) (bytevector-s32-set! . nf527f) (bytevector-s32-ref . nf527e) (bytevector-s32-native-set! . nf527d) (bytevector-s32-native-ref . nf527c) (bytevector-s16-set! . nf527b) (bytevector-s16-ref . nf527a) (bytevector-s16-native-set! . nf5279) (bytevector-s16-native-ref . nf5278) (bytevector-length . nf5277) (bytevector-ieee-single-ref . nf5276) (bytevector-ieee-single-set! . nf5275) (bytevector-ieee-single-native-set! . nf5274) (bytevector-ieee-single-native-ref . nf5273) (bytevector-ieee-double-set! . nf5272) (bytevector-ieee-double-ref . nf5271) (bytevector-ieee-double-native-set! . nf5270) (bytevector-ieee-double-native-ref . nf526f) (bytevector-fill! . nf526e) (bytevector-copy! . nf526d) (bytevector-copy . nf526c) (bytevector->uint-list . nf526b) (bytevector->u8-list . nf526a) (bytevector->sint-list . nf5269) (no-nans-violation? . nf4e81) (no-infinities-violation? . nf4e6c) (make-no-nans-violation . nf4e7f) (make-no-infinities-violation . nf4e6a) (real->flonum . nf5268) (flzero? . nf5267) (fltruncate . nf5266) (fltan . nf5265) (flsqrt . nf5264) (flsin . nf5263) (flround . nf5262) (flpositive? . nf5261) (flonum? . nf5260) (flodd? . nf525f) (flnumerator . nf525e) (flnegative? . nf525d) (flnan? . nf525c) (flmod0 . nf525b) (flmod . nf525a) (flmin . nf5259) (flmax . nf5258) (fllog . nf5257) (flinteger? . nf5256) (flinfinite? . nf5255) (flfloor . nf5254) (flfinite? . nf5253) (flexpt . nf5252) (flexp . nf5251) (fleven? . nf5250) (fldiv0-and-mod0 . nf524f) (fldiv0 . nf524e) (fldiv-and-mod . nf524d) (fldiv . nf524c) (fldenominator . nf524b) (flcos . nf524a) (flceiling . nf5249) (flatan . nf5248) (flasin . nf5247) (flacos . nf5246) (flabs . nf5245) (fl>? . nf5244) (fl>=? . nf5243) (fl=? . nf5242) (fl<? . nf5241) (fl<=? . nf5240) (fl/ . nf523f) (fl- . nf523e) (fl+ . nf523d) (fl* . nf523c) (fixnum->flonum . nf523b) (fxzero? . nf523a) (fxxor . nf5239) (fxrotate-bit-field . nf5238) (fxreverse-bit-field . nf5237) (fxpositive? . nf5236) (fxodd? . nf5235) (fxnot . nf5234) (fxnegative? . nf5233) (fxmod0 . nf5232) (fxmod . nf5231) (fxmin . nf5230) (fxmax . nf522f) (fxlength . nf522e) (fxior . nf522d) (fxif . nf522c) (fxfirst-bit-set . nf522b) (fxeven? . nf522a) (fxdiv0-and-mod0 . nf5229) (fxdiv0 . nf5228) (fxdiv-and-mod . nf5227) (fxdiv . nf5226) (fxcopy-bit-field . nf5225) (fxcopy-bit . nf5224) (fxbit-set? . nf5223) (fxbit-field . nf5222) (fxbit-count . nf5221) (fxarithmetic-shift-right . nf5220) (fxarithmetic-shift-left . nf521f) (fxarithmetic-shift . nf521e) (fxand . nf521d) (fx>? . nf521c) (fx>=? . nf521b) (fx=? . nf521a) (fx<? . nf5219) (fx<=? . nf5218) (fx-/carry . nf5217) (fx- . nf5216) (fx+/carry . nf5215) (fx+ . nf5214) (fx*/carry . nf5213) (fx* . nf5212) (greatest-fixnum . nf5211) (least-fixnum . nf5210) (fixnum-width . nf520f) (fixnum? . nf520e) (bitwise-rotate-bit-field . nf520d) (bitwise-reverse-bit-field . nf520c) (bitwise-length . nf520b) (bitwise-if . nf520a) (bitwise-first-bit-set . nf5209) (bitwise-copy-bit-field . nf5208) (bitwise-copy-bit . nf5207) (bitwise-bit-set? . nf5206) (bitwise-bit-field . nf5205) (bitwise-bit-count . nf5204) (bitwise-xor . nf5203) (bitwise-ior . nf5202) (bitwise-and . nf5201) (bitwise-not . nf5200) (bitwise-arithmetic-shift-right . nf51ff) (bitwise-arithmetic-shift-left . nf51fe) (bitwise-arithmetic-shift . nf51fd) (zero? . nf51fc) (vector? . nf51fb) (vector-set! . nf51fa) (vector-ref . nf51f9) (vector-map . nf51f8) (vector-length . nf51f7) (vector-for-each . nf51f6) (vector-fill! . nf51f5) (vector->list . nf51f4) (vector . nf51f3) (values . nf51f2) (truncate . nf51f1) (tan . nf51f0) (symbol? . nf51ef) (symbol=? . nf51ee) (symbol->string . nf51ed) (substring . nf51ec) (string? . nf51eb) (string>? . nf51ea) (string>=? . nf51e9) (string=? . nf51e8) (string<? . nf51e7) (string<=? . nf51e6) (string-ref . nf51e5) (string-length . nf51e4) (string-for-each . nf51e3) (string-copy . nf51e2) (string-append . nf51e1) (string->symbol . nf51e0) (string->number . nf51df) (string->list . nf51de) (string . nf51dd) (sqrt . nf51dc) (sin . nf51db) (round . nf51da) (reverse . nf51d9) (real? . nf51d8) (real-valued? . nf51d7) (real-part . nf51d6) (rationalize . nf51d5) (rational? . nf51d4) (rational-valued? . nf51d3) (procedure? . nf51d2) (positive? . nf51d1) (pair? . nf51d0) (odd? . nf51cf) (numerator . nf51ce) (number? . nf51cd) (number->string . nf51cc) (null? . nf51cb) (not . nf51ca) (negative? . nf51c9) (nan? . nf51c8) (min . nf51c7) (max . nf51c6) (map . nf51c5) (make-vector . nf51c4) (make-string . nf51c3) (make-rectangular . nf51c2) (make-polar . nf51c1) (magnitude . nf51c0) (log . nf51bf) (list? . nf51be) (list-tail . nf51bd) (list-ref . nf51bc) (list->vector . nf51bb) (list->string . nf51ba) (list . nf51b9) (length . nf51b8) (lcm . nf51b7) (integer? . nf51b6) (integer-valued? . nf51b5) (integer->char . nf51b4) (infinite? . nf51b3) (inexact? . nf51b2) (inexact . nf51b1) (imag-part . nf51b0) (gcd . nf51af) (for-each . nf51ae) (floor . nf51ad) (finite? . nf51ac) (expt . nf51ab) (exp . nf51aa) (exact? . nf51a9) (exact-integer-sqrt . nf51a8) (exact . nf51a7) (even? . nf51a6) (error . nf51a5) (eqv? . nf51a4) (equal? . nf51a3) (eq? . nf51a2) (dynamic-wind . nf51a1) (div0-and-mod0 . nf51a0) (mod0 . nf519f) (div0 . nf519e) (div-and-mod . nf519d) (mod . nf519c) (div . nf519b) (denominator . nf519a) (cos . nf5199) (cons . nf5198) (complex? . nf5197) (char? . nf5196) (char>? . nf5195) (char>=? . nf5194) (char=? . nf5193) (char<? . nf5192) (char<=? . nf5191) (char->integer . nf5190) (ceiling . nf518f) (call-with-values . nf518e) (call/cc . nf518d) (call-with-current-continuation . nf518c) (cddddr . nf518b) (cdddar . nf518a) (cddadr . nf5189) (cddaar . nf5188) (cdaddr . nf5187) (cdadar . nf5186) (cdaadr . nf5185) (cdaaar . nf5184) (cadddr . nf5183) (caddar . nf5182) (cadadr . nf5181) (cadaar . nf5180) (caaddr . nf517f) (caadar . nf517e) (caaadr . nf517d) (caaaar . nf517c) (cdddr . nf517b) (cddar . nf517a) (cdadr . nf5179) (cdaar . nf5178) (caddr . nf5177) (cadar . nf5176) (caadr . nf5175) (caaar . nf5174) (cddr . nf5173) (cdar . nf5172) (cadr . nf5171) (caar . nf5170) (cdr . nf516f) (car . nf516e) (boolean? . nf516d) (boolean=? . nf516c) (atan . nf516b) (assertion-violation . nf516a) (asin . nf5169) (apply . nf5168) (append . nf5167) (angle . nf5166) (acos . nf5165) (abs . nf5164) (/ . nf5163) (* . nf5162) (- . nf5161) (+ . nf5160) (>= . nf515f) (> . nf515e) (= . nf515d) (<= . nf515c) (< . nf515b) (library . nf515a) (&no-nans . nf5159) (&no-infinities . nf5158) (&i/o-encoding . nf5157) (&i/o-decoding . nf5156) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c) (&undefined . nf514b) (&syntax . nf514a) (&lexical . nf5149) (&implementation-restriction . nf5148) (&non-continuable . nf5147) (&who . nf5146) (&irritants . nf5145) (&assertion . nf5144) (&violation . nf5143) (&error . nf5142) (&serious . nf5141) (&warning . nf5140) (&message . nf513f) (&condition . nf513e) (define-condition-type . nf513d) (define-enumeration . nf513c) (define-record-type . nf513b) (parent-rtd . nf513a) (nongenerative . nf5139) (opaque . nf5138) (sealed . nf5137) (protocol . nf5136) (parent . nf5135) (immutable . nf5134) (mutable . nf5133) (fields . nf5132) (error-handling-mode . nf5131) (file-options . nf5130) (buffer-mode . nf512f) (eol-style . nf512e) (guard . nf512d) (unsyntax-splicing . nf512a) (unsyntax . nf5129) (unquote-splicing . nf5128) (unquote . nf5127) (_ . nf5126) (else . nf5125) (=> . nf5124) (... . nf5123) (assert . nf5122) (endianness . nf5121) (time . nf511f) (do . nf511e) (cond . nf511d) (let* . nf511c) (let*-values . nf511b) (let-values . nf511a) (identifier-syntax . nf5119) (with-syntax . nf5118) (quasisyntax . nf5117) (quasiquote . nf5116) (syntax-rules . nf5115) (include . nf5114) (record-constructor-descriptor . nf5112) (record-type-descriptor . nf5111) (case . nf5110) (unless . nf510e) (when . nf510d) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec* . nf5108) (letrec . nf5107) (case-lambda . nf5105) (lambda . nf5104) (syntax . nf5103) (syntax-case . nf5102) (quote . nf5101) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (import . nf50fc) (begin . nf50fb) (define-syntax . nf50f9) (define . nf50f8)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5423 '(psyntax null-environment-5) '() '() '() '() '((make-promise . nf52d8) (unquote-splicing . nf5128) (unquote . nf5127) (_ . nf5126) (else . nf5125) (=> . nf5124) (... . nf5123) (delay . nf5120) (do . nf511e) (cond . nf511d) (let* . nf511c) (quasiquote . nf5116) (syntax-rules . nf5115) (case . nf5110) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec . nf5107) (lambda . nf5104) (quote . nf5101) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (begin . nf50fb) (define-syntax . nf50f9) (define . nf50f8)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5424 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . nf536d) (string-ci>=? . nf536c) (string-ci=? . nf536b) (string-ci<? . nf536a) (string-ci<=? . nf5369) (char-whitespace? . nf5368) (char-upper-case? . nf5367) (char-numeric? . nf5365) (char-lower-case? . nf5364) (char-upcase . nf5362) (char-downcase . nf535f) (char-ci>? . nf535e) (char-ci>=? . nf535d) (char-ci=? . nf535c) (char-ci<? . nf535b) (char-ci<=? . nf535a) (char-alphabetic? . nf5359) (call-with-output-file . nf532d) (call-with-input-file . nf532c) (write-char . nf532b) (write . nf532a) (with-output-to-file . nf5329) (with-input-from-file . nf5328) (read-char . nf5327) (read . nf5326) (peek-char . nf5325) (open-output-file . nf5324) (open-input-file . nf5323) (newline . nf5322) (display . nf5321) (close-output-port . nf5320) (close-input-port . nf531f) (eof-object . nf531d) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (scheme-report-environment . nf3132) (quotient . nf52de) (null-environment . nf3130) (remainder . nf52dd) (modulo . nf52dc) (inexact->exact . nf52db) (force . nf52da) (exact->inexact . nf52d9) (make-promise . nf52d8) (string-fill! . nf52d6) (string-set! . nf52d5) (set-cdr! . nf52d4) (set-car! . nf52d3) (memv . nf52cd) (memq . nf52cc) (member . nf52ca) (assv . nf52c2) (assq . nf52c1) (assoc . nf52bf) (eval . nf3136) (zero? . nf51fc) (vector? . nf51fb) (vector-set! . nf51fa) (vector-ref . nf51f9) (vector-length . nf51f7) (vector-fill! . nf51f5) (vector->list . nf51f4) (vector . nf51f3) (values . nf51f2) (truncate . nf51f1) (tan . nf51f0) (symbol? . nf51ef) (symbol->string . nf51ed) (substring . nf51ec) (string? . nf51eb) (string>? . nf51ea) (string>=? . nf51e9) (string=? . nf51e8) (string<? . nf51e7) (string<=? . nf51e6) (string-ref . nf51e5) (string-length . nf51e4) (string-copy . nf51e2) (string-append . nf51e1) (string->symbol . nf51e0) (string->number . nf51df) (string->list . nf51de) (string . nf51dd) (sqrt . nf51dc) (sin . nf51db) (round . nf51da) (reverse . nf51d9) (real? . nf51d8) (real-part . nf51d6) (rationalize . nf51d5) (rational? . nf51d4) (procedure? . nf51d2) (positive? . nf51d1) (pair? . nf51d0) (odd? . nf51cf) (numerator . nf51ce) (number? . nf51cd) (number->string . nf51cc) (not . nf51ca) (negative? . nf51c9) (min . nf51c7) (max . nf51c6) (map . nf51c5) (make-vector . nf51c4) (make-string . nf51c3) (make-rectangular . nf51c2) (make-polar . nf51c1) (magnitude . nf51c0) (log . nf51bf) (list? . nf51be) (list-tail . nf51bd) (list-ref . nf51bc) (list->vector . nf51bb) (list->string . nf51ba) (list . nf51b9) (length . nf51b8) (lcm . nf51b7) (integer? . nf51b6) (integer->char . nf51b4) (inexact? . nf51b2) (imag-part . nf51b0) (gcd . nf51af) (for-each . nf51ae) (floor . nf51ad) (expt . nf51ab) (exp . nf51aa) (exact? . nf51a9) (even? . nf51a6) (eqv? . nf51a4) (equal? . nf51a3) (eq? . nf51a2) (dynamic-wind . nf51a1) (denominator . nf519a) (cos . nf5199) (cons . nf5198) (complex? . nf5197) (char? . nf5196) (char>? . nf5195) (char>=? . nf5194) (char=? . nf5193) (char<? . nf5192) (char<=? . nf5191) (char->integer . nf5190) (ceiling . nf518f) (call-with-values . nf518e) (call-with-current-continuation . nf518c) (cddddr . nf518b) (cdddar . nf518a) (cddadr . nf5189) (cddaar . nf5188) (cdaddr . nf5187) (cdadar . nf5186) (cdaadr . nf5185) (cdaaar . nf5184) (cadddr . nf5183) (caddar . nf5182) (cadadr . nf5181) (cadaar . nf5180) (caaddr . nf517f) (caadar . nf517e) (caaadr . nf517d) (caaaar . nf517c) (cdddr . nf517b) (cddar . nf517a) (cdadr . nf5179) (cdaar . nf5178) (caddr . nf5177) (cadar . nf5176) (caadr . nf5175) (caaar . nf5174) (cddr . nf5173) (cdar . nf5172) (cadr . nf5171) (caar . nf5170) (cdr . nf516f) (car . nf516e) (boolean? . nf516d) (atan . nf516b) (asin . nf5169) (apply . nf5168) (append . nf5167) (angle . nf5166) (acos . nf5165) (abs . nf5164) (/ . nf5163) (* . nf5162) (- . nf5161) (+ . nf5160) (>= . nf515f) (> . nf515e) (= . nf515d) (<= . nf515c) (< . nf515b) (unquote-splicing . nf5128) (unquote . nf5127) (else . nf5125) (=> . nf5124) (... . nf5123) (delay . nf5120) (do . nf511e) (cond . nf511d) (let* . nf511c) (quasiquote . nf5116) (syntax-rules . nf5115) (case . nf5110) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec . nf5107) (lambda . nf5104) (quote . nf5101) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (begin . nf50fb) (define-syntax . nf50f9) (define . nf50f8)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5425 '(psyntax modules) '() '() '() '() '((module . nf50fa)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5426 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5427 '(rnrs) '(6) '() '() '() '((regexp? . nf541a) (string-upcase . nf5375) (string-titlecase . nf5374) (string-normalize-nfkd . nf5373) (string-normalize-nfkc . nf5372) (string-normalize-nfd . nf5371) (string-normalize-nfc . nf5370) (string-foldcase . nf536f) (string-downcase . nf536e) (string-ci>? . nf536d) (string-ci>=? . nf536c) (string-ci=? . nf536b) (string-ci<? . nf536a) (string-ci<=? . nf5369) (char-whitespace? . nf5368) (char-upper-case? . nf5367) (char-title-case? . nf5366) (char-numeric? . nf5365) (char-lower-case? . nf5364) (char-general-category . nf5363) (char-upcase . nf5362) (char-titlecase . nf5361) (char-foldcase . nf5360) (char-downcase . nf535f) (char-ci>? . nf535e) (char-ci>=? . nf535d) (char-ci=? . nf535c) (char-ci<? . nf535b) (char-ci<=? . nf535a) (char-alphabetic? . nf5359) (make-variable-transformer . nf2ea1) (identifier? . nf3158) (generate-temporaries . nf3144) (free-identifier=? . nf3146) (syntax->datum . nf315c) (datum->syntax . nf315a) (bound-identifier=? . nf3148) (record-type-descriptor? . nf5358) (record-predicate . nf5357) (record-mutator . nf5356) (record-constructor . nf5355) (record-accessor . nf5354) (make-record-type-descriptor . nf5353) (make-record-constructor-descriptor . nf5352) (record? . nf5351) (record-type-uid . nf5350) (record-type-sealed? . nf534f) (record-type-parent . nf534e) (record-type-opaque? . nf534d) (record-type-name . nf534c) (record-type-generative? . nf534b) (record-type-field-names . nf534a) (record-rtd . nf5349) (record-field-mutable? . nf5348) (delete-file . nf5347) (file-exists? . nf5346) (vector-sort! . nf5345) (vector-sort . nf5344) (list-sort . nf5343) (symbol-hash . nf5342) (string-ci-hash . nf5341) (string-hash . nf5340) (equal-hash . nf533f) (hashtable-equivalence-function . nf533e) (make-hashtable . nf533d) (hashtable-hash-function . nf533c) (make-eqv-hashtable . nf533b) (make-eq-hashtable . nf533a) (hashtable? . nf5339) (hashtable-update! . nf5338) (hashtable-size . nf5337) (hashtable-set! . nf5336) (hashtable-ref . nf5335) (hashtable-mutable? . nf5334) (hashtable-keys . nf5333) (hashtable-entries . nf5332) (hashtable-delete! . nf5331) (hashtable-copy . nf5330) (hashtable-contains? . nf532f) (hashtable-clear! . nf532e) (call-with-output-file . nf532d) (call-with-input-file . nf532c) (write-char . nf532b) (write . nf532a) (with-output-to-file . nf5329) (with-input-from-file . nf5328) (read-char . nf5327) (read . nf5326) (peek-char . nf5325) (open-output-file . nf5324) (open-input-file . nf5323) (newline . nf5322) (display . nf5321) (close-output-port . nf5320) (close-input-port . nf531f) (eof-object? . nf531e) (eof-object . nf531d) (current-error-port . nf531c) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (utf-8-codec . nf5317) (utf-16-codec . nf5316) (transcoder-error-handling-mode . nf5315) (transcoder-eol-style . nf5314) (transcoder-codec . nf5313) (transcoded-port . nf5312) (textual-port? . nf5311) (string->bytevector . nf5310) (standard-output-port . nf530f) (standard-input-port . nf530e) (standard-error-port . nf530d) (set-port-position! . nf530c) (put-u8 . nf530b) (put-string . nf530a) (put-datum . nf5309) (put-char . nf5308) (put-bytevector . nf5307) (port? . nf5306) (port-transcoder . nf5305) (port-position . nf5304) (port-has-set-port-position!? . nf5303) (port-has-port-position? . nf5302) (port-eof? . nf5301) (output-port-buffer-mode . nf5300) (open-string-output-port . nf52ff) (open-string-input-port . nf52fe) (open-file-output-port . nf52fd) (open-file-input/output-port . nf52fc) (open-file-input-port . nf52fb) (open-bytevector-output-port . nf52fa) (open-bytevector-input-port . nf52f9) (native-transcoder . nf52f8) (native-eol-style . nf52f7) (make-transcoder . nf52f6) (latin-1-codec . nf52f5) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (make-i/o-encoding-error . nf4e51) (make-i/o-decoding-error . nf4e3a) (make-custom-textual-output-port . nf52f4) (make-custom-textual-input/output-port . nf52f3) (make-custom-textual-input-port . nf52f2) (make-custom-binary-output-port . nf52f1) (make-custom-binary-input/output-port . nf52f0) (make-custom-binary-input-port . nf52ef) (make-bytevector . nf52ee) (lookahead-u8 . nf52ed) (lookahead-char . nf52ec) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (i/o-encoding-error? . nf4e55) (i/o-encoding-error-char . nf4e57) (i/o-decoding-error? . nf4e3c) (get-u8 . nf52eb) (get-string-n! . nf52ea) (get-string-n . nf52e9) (get-string-all . nf52e8) (get-line . nf52e7) (get-datum . nf52e6) (get-char . nf52e5) (get-bytevector-some . nf52e4) (get-bytevector-n! . nf52e3) (get-bytevector-n . nf52e2) (get-bytevector-all . nf52e1) (flush-output-port . nf52e0) (close-port . nf52df) (exit . nf52d7) (command-line . nf4f90) (remove . nf52d2) (remv . nf52d1) (remp . nf52d0) (remq . nf52cf) (partition . nf52ce) (memv . nf52cd) (memq . nf52cc) (memp . nf52cb) (member . nf52ca) (exists . nf52c9) (for-all . nf52c8) (fold-right . nf52c7) (fold-left . nf52c6) (find . nf52c5) (filter . nf52c4) (cons* . nf52c3) (assv . nf52c2) (assq . nf52c1) (assp . nf52c0) (assoc . nf52bf) (call-with-string-output-port . nf52be) (call-with-port . nf52bd) (call-with-bytevector-output-port . nf52bc) (bytevector->string . nf52bb) (buffer-mode? . nf52ba) (binary-port? . nf52b9) (with-exception-handler . nf52b8) (raise-continuable . nf52b7) (raise . nf52b6) (make-enumeration . nf52b5) (enum-set=? . nf52b4) (enum-set-universe . nf52b3) (enum-set-union . nf52b2) (enum-set-subset? . nf52b1) (enum-set-projection . nf52b0) (enum-set-member? . nf52af) (enum-set-intersection . nf52ae) (enum-set-indexer . nf52ad) (enum-set-difference . nf52ac) (enum-set-constructor . nf52ab) (enum-set-complement . nf52aa) (enum-set->list . nf52a9) (who-condition? . nf4ccc) (warning? . nf4c44) (violation? . nf4c83) (undefined-violation? . nf4d43) (syntax-violation? . nf4d2a) (syntax-violation-subform . nf4d2e) (syntax-violation-form . nf4d2c) (syntax-violation . nf3156) (simple-conditions . nf52a8) (serious-condition? . nf4c59) (non-continuable-violation? . nf4ce3) (message-condition? . nf4c2d) (make-who-condition . nf4cc8) (make-warning . nf4c42) (make-violation . nf4c81) (make-undefined-violation . nf4d41) (make-syntax-violation . nf4d24) (make-serious-condition . nf4c57) (make-non-continuable-violation . nf4ce1) (make-message-condition . nf4c29) (make-lexical-violation . nf4d0b) (make-irritants-condition . nf4cad) (make-implementation-restriction-violation . nf4cf6) (make-error . nf4c6c) (make-assertion-violation . nf4c96) (lexical-violation? . nf4d0d) (irritants-condition? . nf4cb1) (implementation-restriction-violation? . nf4cf8) (error? . nf4c6e) (condition-who . nf4cce) (condition-predicate . nf52a7) (condition-message . nf4c2f) (condition-irritants . nf4cb3) (condition-accessor . nf52a6) (condition . nf52a5) (assertion-violation? . nf4c98) (condition? . nf52a4) (utf32->string . nf52a3) (utf16->string . nf52a2) (utf8->string . nf52a1) (uint-list->bytevector . nf52a0) (u8-list->bytevector . nf529f) (string->utf8 . nf529e) (string->utf32 . nf529d) (string->utf16 . nf529c) (sint-list->bytevector . nf529b) (native-endianness . nf529a) (bytevector? . nf5299) (bytevector=? . nf5298) (bytevector-uint-set! . nf5297) (bytevector-uint-ref . nf5296) (bytevector-u8-set! . nf5295) (bytevector-u8-ref . nf5294) (bytevector-u64-set! . nf5293) (bytevector-u64-ref . nf5292) (bytevector-u64-native-set! . nf5291) (bytevector-u64-native-ref . nf5290) (bytevector-u32-set! . nf528f) (bytevector-u32-ref . nf528e) (bytevector-u32-native-set! . nf528d) (bytevector-u32-native-ref . nf528c) (bytevector-u16-set! . nf528b) (bytevector-u16-ref . nf528a) (bytevector-u16-native-set! . nf5289) (bytevector-u16-native-ref . nf5288) (bytevector-sint-set! . nf5287) (bytevector-sint-ref . nf5286) (bytevector-s8-set! . nf5285) (bytevector-s8-ref . nf5284) (bytevector-s64-set! . nf5283) (bytevector-s64-ref . nf5282) (bytevector-s64-native-set! . nf5281) (bytevector-s64-native-ref . nf5280) (bytevector-s32-set! . nf527f) (bytevector-s32-ref . nf527e) (bytevector-s32-native-set! . nf527d) (bytevector-s32-native-ref . nf527c) (bytevector-s16-set! . nf527b) (bytevector-s16-ref . nf527a) (bytevector-s16-native-set! . nf5279) (bytevector-s16-native-ref . nf5278) (bytevector-length . nf5277) (bytevector-ieee-single-ref . nf5276) (bytevector-ieee-single-set! . nf5275) (bytevector-ieee-single-native-set! . nf5274) (bytevector-ieee-single-native-ref . nf5273) (bytevector-ieee-double-set! . nf5272) (bytevector-ieee-double-ref . nf5271) (bytevector-ieee-double-native-set! . nf5270) (bytevector-ieee-double-native-ref . nf526f) (bytevector-fill! . nf526e) (bytevector-copy! . nf526d) (bytevector-copy . nf526c) (bytevector->uint-list . nf526b) (bytevector->u8-list . nf526a) (bytevector->sint-list . nf5269) (no-nans-violation? . nf4e81) (no-infinities-violation? . nf4e6c) (make-no-nans-violation . nf4e7f) (make-no-infinities-violation . nf4e6a) (real->flonum . nf5268) (flzero? . nf5267) (fltruncate . nf5266) (fltan . nf5265) (flsqrt . nf5264) (flsin . nf5263) (flround . nf5262) (flpositive? . nf5261) (flonum? . nf5260) (flodd? . nf525f) (flnumerator . nf525e) (flnegative? . nf525d) (flnan? . nf525c) (flmod0 . nf525b) (flmod . nf525a) (flmin . nf5259) (flmax . nf5258) (fllog . nf5257) (flinteger? . nf5256) (flinfinite? . nf5255) (flfloor . nf5254) (flfinite? . nf5253) (flexpt . nf5252) (flexp . nf5251) (fleven? . nf5250) (fldiv0-and-mod0 . nf524f) (fldiv0 . nf524e) (fldiv-and-mod . nf524d) (fldiv . nf524c) (fldenominator . nf524b) (flcos . nf524a) (flceiling . nf5249) (flatan . nf5248) (flasin . nf5247) (flacos . nf5246) (flabs . nf5245) (fl>? . nf5244) (fl>=? . nf5243) (fl=? . nf5242) (fl<? . nf5241) (fl<=? . nf5240) (fl/ . nf523f) (fl- . nf523e) (fl+ . nf523d) (fl* . nf523c) (fixnum->flonum . nf523b) (fxzero? . nf523a) (fxxor . nf5239) (fxrotate-bit-field . nf5238) (fxreverse-bit-field . nf5237) (fxpositive? . nf5236) (fxodd? . nf5235) (fxnot . nf5234) (fxnegative? . nf5233) (fxmod0 . nf5232) (fxmod . nf5231) (fxmin . nf5230) (fxmax . nf522f) (fxlength . nf522e) (fxior . nf522d) (fxif . nf522c) (fxfirst-bit-set . nf522b) (fxeven? . nf522a) (fxdiv0-and-mod0 . nf5229) (fxdiv0 . nf5228) (fxdiv-and-mod . nf5227) (fxdiv . nf5226) (fxcopy-bit-field . nf5225) (fxcopy-bit . nf5224) (fxbit-set? . nf5223) (fxbit-field . nf5222) (fxbit-count . nf5221) (fxarithmetic-shift-right . nf5220) (fxarithmetic-shift-left . nf521f) (fxarithmetic-shift . nf521e) (fxand . nf521d) (fx>? . nf521c) (fx>=? . nf521b) (fx=? . nf521a) (fx<? . nf5219) (fx<=? . nf5218) (fx-/carry . nf5217) (fx- . nf5216) (fx+/carry . nf5215) (fx+ . nf5214) (fx*/carry . nf5213) (fx* . nf5212) (greatest-fixnum . nf5211) (least-fixnum . nf5210) (fixnum-width . nf520f) (fixnum? . nf520e) (bitwise-rotate-bit-field . nf520d) (bitwise-reverse-bit-field . nf520c) (bitwise-length . nf520b) (bitwise-if . nf520a) (bitwise-first-bit-set . nf5209) (bitwise-copy-bit-field . nf5208) (bitwise-copy-bit . nf5207) (bitwise-bit-set? . nf5206) (bitwise-bit-field . nf5205) (bitwise-bit-count . nf5204) (bitwise-xor . nf5203) (bitwise-ior . nf5202) (bitwise-and . nf5201) (bitwise-not . nf5200) (bitwise-arithmetic-shift-right . nf51ff) (bitwise-arithmetic-shift-left . nf51fe) (bitwise-arithmetic-shift . nf51fd) (zero? . nf51fc) (vector? . nf51fb) (vector-set! . nf51fa) (vector-ref . nf51f9) (vector-map . nf51f8) (vector-length . nf51f7) (vector-for-each . nf51f6) (vector-fill! . nf51f5) (vector->list . nf51f4) (vector . nf51f3) (values . nf51f2) (truncate . nf51f1) (tan . nf51f0) (symbol? . nf51ef) (symbol=? . nf51ee) (symbol->string . nf51ed) (substring . nf51ec) (string? . nf51eb) (string>? . nf51ea) (string>=? . nf51e9) (string=? . nf51e8) (string<? . nf51e7) (string<=? . nf51e6) (string-ref . nf51e5) (string-length . nf51e4) (string-for-each . nf51e3) (string-copy . nf51e2) (string-append . nf51e1) (string->symbol . nf51e0) (string->number . nf51df) (string->list . nf51de) (string . nf51dd) (sqrt . nf51dc) (sin . nf51db) (round . nf51da) (reverse . nf51d9) (real? . nf51d8) (real-valued? . nf51d7) (real-part . nf51d6) (rationalize . nf51d5) (rational? . nf51d4) (rational-valued? . nf51d3) (procedure? . nf51d2) (positive? . nf51d1) (pair? . nf51d0) (odd? . nf51cf) (numerator . nf51ce) (number? . nf51cd) (number->string . nf51cc) (null? . nf51cb) (not . nf51ca) (negative? . nf51c9) (nan? . nf51c8) (min . nf51c7) (max . nf51c6) (map . nf51c5) (make-vector . nf51c4) (make-string . nf51c3) (make-rectangular . nf51c2) (make-polar . nf51c1) (magnitude . nf51c0) (log . nf51bf) (list? . nf51be) (list-tail . nf51bd) (list-ref . nf51bc) (list->vector . nf51bb) (list->string . nf51ba) (list . nf51b9) (length . nf51b8) (lcm . nf51b7) (integer? . nf51b6) (integer-valued? . nf51b5) (integer->char . nf51b4) (infinite? . nf51b3) (inexact? . nf51b2) (inexact . nf51b1) (imag-part . nf51b0) (gcd . nf51af) (for-each . nf51ae) (floor . nf51ad) (finite? . nf51ac) (expt . nf51ab) (exp . nf51aa) (exact? . nf51a9) (exact-integer-sqrt . nf51a8) (exact . nf51a7) (even? . nf51a6) (error . nf51a5) (eqv? . nf51a4) (equal? . nf51a3) (eq? . nf51a2) (dynamic-wind . nf51a1) (div0-and-mod0 . nf51a0) (mod0 . nf519f) (div0 . nf519e) (div-and-mod . nf519d) (mod . nf519c) (div . nf519b) (denominator . nf519a) (cos . nf5199) (cons . nf5198) (complex? . nf5197) (char? . nf5196) (char>? . nf5195) (char>=? . nf5194) (char=? . nf5193) (char<? . nf5192) (char<=? . nf5191) (char->integer . nf5190) (ceiling . nf518f) (call-with-values . nf518e) (call/cc . nf518d) (call-with-current-continuation . nf518c) (cddddr . nf518b) (cdddar . nf518a) (cddadr . nf5189) (cddaar . nf5188) (cdaddr . nf5187) (cdadar . nf5186) (cdaadr . nf5185) (cdaaar . nf5184) (cadddr . nf5183) (caddar . nf5182) (cadadr . nf5181) (cadaar . nf5180) (caaddr . nf517f) (caadar . nf517e) (caaadr . nf517d) (caaaar . nf517c) (cdddr . nf517b) (cddar . nf517a) (cdadr . nf5179) (cdaar . nf5178) (caddr . nf5177) (cadar . nf5176) (caadr . nf5175) (caaar . nf5174) (cddr . nf5173) (cdar . nf5172) (cadr . nf5171) (caar . nf5170) (cdr . nf516f) (car . nf516e) (boolean? . nf516d) (boolean=? . nf516c) (atan . nf516b) (assertion-violation . nf516a) (asin . nf5169) (apply . nf5168) (append . nf5167) (angle . nf5166) (acos . nf5165) (abs . nf5164) (/ . nf5163) (* . nf5162) (- . nf5161) (+ . nf5160) (>= . nf515f) (> . nf515e) (= . nf515d) (<= . nf515c) (< . nf515b) (&no-nans . nf5159) (&no-infinities . nf5158) (&i/o-encoding . nf5157) (&i/o-decoding . nf5156) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c) (&undefined . nf514b) (&syntax . nf514a) (&lexical . nf5149) (&implementation-restriction . nf5148) (&non-continuable . nf5147) (&who . nf5146) (&irritants . nf5145) (&assertion . nf5144) (&violation . nf5143) (&error . nf5142) (&serious . nf5141) (&warning . nf5140) (&message . nf513f) (&condition . nf513e) (define-condition-type . nf513d) (define-enumeration . nf513c) (define-record-type . nf513b) (parent-rtd . nf513a) (nongenerative . nf5139) (opaque . nf5138) (sealed . nf5137) (protocol . nf5136) (parent . nf5135) (immutable . nf5134) (mutable . nf5133) (fields . nf5132) (error-handling-mode . nf5131) (file-options . nf5130) (buffer-mode . nf512f) (eol-style . nf512e) (guard . nf512d) (unsyntax-splicing . nf512a) (unsyntax . nf5129) (unquote-splicing . nf5128) (unquote . nf5127) (_ . nf5126) (else . nf5125) (=> . nf5124) (... . nf5123) (assert . nf5122) (endianness . nf5121) (do . nf511e) (cond . nf511d) (let* . nf511c) (let*-values . nf511b) (let-values . nf511a) (identifier-syntax . nf5119) (with-syntax . nf5118) (quasisyntax . nf5117) (quasiquote . nf5116) (syntax-rules . nf5115) (record-constructor-descriptor . nf5112) (record-type-descriptor . nf5111) (case . nf5110) (unless . nf510e) (when . nf510d) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec* . nf5108) (letrec . nf5107) (case-lambda . nf5105) (lambda . nf5104) (syntax . nf5103) (syntax-case . nf5102) (quote . nf5101) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (begin . nf50fb) (define-syntax . nf50f9) (define . nf50f8)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5428 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . nf3132) (quotient . nf52de) (null-environment . nf3130) (remainder . nf52dd) (modulo . nf52dc) (inexact->exact . nf52db) (force . nf52da) (exact->inexact . nf52d9) (make-promise . nf52d8) (delay . nf5120)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5429 '(rnrs control) '(6) '() '() '() '((do . nf511e) (unless . nf510e) (when . nf510d) (case-lambda . nf5105)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542a '(rnrs eval) '(6) '() '() '() '((eval . nf3136) (environment . nf312e)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . nf52d4) (set-car! . nf52d3)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . nf52d6) (string-set! . nf52d5)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542d '(rnrs programs) '(6) '() '() '() '((exit . nf52d7) (command-line . nf4f90)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . nf2ea1) (identifier? . nf3158) (generate-temporaries . nf3144) (free-identifier=? . nf3146) (syntax->datum . nf315c) (datum->syntax . nf315a) (bound-identifier=? . nf3148) (syntax-violation . nf3156) (unsyntax-splicing . nf512a) (unsyntax . nf5129) (_ . nf5126) (... . nf5123) (with-syntax . nf5118) (quasisyntax . nf5117) (syntax . nf5103) (syntax-case . nf5102)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf542f '(rnrs files) '(6) '() '() '() '((delete-file . nf5347) (file-exists? . nf5346) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5430 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . nf5345) (vector-sort . nf5344) (list-sort . nf5343)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5431 '(rnrs base) '(6) '() '() '() '((zero? . nf51fc) (vector? . nf51fb) (vector-set! . nf51fa) (vector-ref . nf51f9) (vector-map . nf51f8) (vector-length . nf51f7) (vector-for-each . nf51f6) (vector-fill! . nf51f5) (vector->list . nf51f4) (vector . nf51f3) (values . nf51f2) (truncate . nf51f1) (tan . nf51f0) (symbol? . nf51ef) (symbol=? . nf51ee) (symbol->string . nf51ed) (substring . nf51ec) (string? . nf51eb) (string>? . nf51ea) (string>=? . nf51e9) (string=? . nf51e8) (string<? . nf51e7) (string<=? . nf51e6) (string-ref . nf51e5) (string-length . nf51e4) (string-for-each . nf51e3) (string-copy . nf51e2) (string-append . nf51e1) (string->symbol . nf51e0) (string->number . nf51df) (string->list . nf51de) (string . nf51dd) (sqrt . nf51dc) (sin . nf51db) (round . nf51da) (reverse . nf51d9) (real? . nf51d8) (real-valued? . nf51d7) (real-part . nf51d6) (rationalize . nf51d5) (rational? . nf51d4) (rational-valued? . nf51d3) (procedure? . nf51d2) (positive? . nf51d1) (pair? . nf51d0) (odd? . nf51cf) (numerator . nf51ce) (number? . nf51cd) (number->string . nf51cc) (null? . nf51cb) (not . nf51ca) (negative? . nf51c9) (nan? . nf51c8) (min . nf51c7) (max . nf51c6) (map . nf51c5) (make-vector . nf51c4) (make-string . nf51c3) (make-rectangular . nf51c2) (make-polar . nf51c1) (magnitude . nf51c0) (log . nf51bf) (list? . nf51be) (list-tail . nf51bd) (list-ref . nf51bc) (list->vector . nf51bb) (list->string . nf51ba) (list . nf51b9) (length . nf51b8) (lcm . nf51b7) (integer? . nf51b6) (integer-valued? . nf51b5) (integer->char . nf51b4) (infinite? . nf51b3) (inexact? . nf51b2) (inexact . nf51b1) (imag-part . nf51b0) (gcd . nf51af) (for-each . nf51ae) (floor . nf51ad) (finite? . nf51ac) (expt . nf51ab) (exp . nf51aa) (exact? . nf51a9) (exact-integer-sqrt . nf51a8) (exact . nf51a7) (even? . nf51a6) (error . nf51a5) (eqv? . nf51a4) (equal? . nf51a3) (eq? . nf51a2) (dynamic-wind . nf51a1) (div0-and-mod0 . nf51a0) (mod0 . nf519f) (div0 . nf519e) (div-and-mod . nf519d) (mod . nf519c) (div . nf519b) (denominator . nf519a) (cos . nf5199) (cons . nf5198) (complex? . nf5197) (char? . nf5196) (char>? . nf5195) (char>=? . nf5194) (char=? . nf5193) (char<? . nf5192) (char<=? . nf5191) (char->integer . nf5190) (ceiling . nf518f) (call-with-values . nf518e) (call/cc . nf518d) (call-with-current-continuation . nf518c) (cddddr . nf518b) (cdddar . nf518a) (cddadr . nf5189) (cddaar . nf5188) (cdaddr . nf5187) (cdadar . nf5186) (cdaadr . nf5185) (cdaaar . nf5184) (cadddr . nf5183) (caddar . nf5182) (cadadr . nf5181) (cadaar . nf5180) (caaddr . nf517f) (caadar . nf517e) (caaadr . nf517d) (caaaar . nf517c) (cdddr . nf517b) (cddar . nf517a) (cdadr . nf5179) (cdaar . nf5178) (caddr . nf5177) (cadar . nf5176) (caadr . nf5175) (caaar . nf5174) (cddr . nf5173) (cdar . nf5172) (cadr . nf5171) (caar . nf5170) (cdr . nf516f) (car . nf516e) (boolean? . nf516d) (boolean=? . nf516c) (atan . nf516b) (assertion-violation . nf516a) (asin . nf5169) (apply . nf5168) (append . nf5167) (angle . nf5166) (acos . nf5165) (abs . nf5164) (/ . nf5163) (* . nf5162) (- . nf5161) (+ . nf5160) (>= . nf515f) (> . nf515e) (= . nf515d) (<= . nf515c) (< . nf515b) (unquote-splicing . nf5128) (unquote . nf5127) (_ . nf5126) (else . nf5125) (=> . nf5124) (... . nf5123) (assert . nf5122) (cond . nf511d) (let* . nf511c) (let*-values . nf511b) (let-values . nf511a) (identifier-syntax . nf5119) (quasiquote . nf5116) (syntax-rules . nf5115) (case . nf5110) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec* . nf5108) (letrec . nf5107) (lambda . nf5104) (quote . nf5101) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (begin . nf50fb) (define-syntax . nf50f9) (define . nf50f8)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5432 '(rnrs lists) '(6) '() '() '() '((remove . nf52d2) (remv . nf52d1) (remp . nf52d0) (remq . nf52cf) (partition . nf52ce) (memv . nf52cd) (memq . nf52cc) (memp . nf52cb) (member . nf52ca) (exists . nf52c9) (for-all . nf52c8) (fold-right . nf52c7) (fold-left . nf52c6) (find . nf52c5) (filter . nf52c4) (cons* . nf52c3) (assv . nf52c2) (assq . nf52c1) (assp . nf52c0) (assoc . nf52bf)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5433 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . nf532d) (call-with-input-file . nf532c) (write-char . nf532b) (write . nf532a) (with-output-to-file . nf5329) (with-input-from-file . nf5328) (read-char . nf5327) (read . nf5326) (peek-char . nf5325) (open-output-file . nf5324) (open-input-file . nf5323) (newline . nf5322) (display . nf5321) (close-output-port . nf5320) (close-input-port . nf531f) (eof-object? . nf531e) (eof-object . nf531d) (current-error-port . nf531c) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5434 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . nf52ee) (utf32->string . nf52a3) (utf16->string . nf52a2) (utf8->string . nf52a1) (uint-list->bytevector . nf52a0) (u8-list->bytevector . nf529f) (string->utf8 . nf529e) (string->utf32 . nf529d) (string->utf16 . nf529c) (sint-list->bytevector . nf529b) (native-endianness . nf529a) (bytevector? . nf5299) (bytevector=? . nf5298) (bytevector-uint-set! . nf5297) (bytevector-uint-ref . nf5296) (bytevector-u8-set! . nf5295) (bytevector-u8-ref . nf5294) (bytevector-u64-set! . nf5293) (bytevector-u64-ref . nf5292) (bytevector-u64-native-set! . nf5291) (bytevector-u64-native-ref . nf5290) (bytevector-u32-set! . nf528f) (bytevector-u32-ref . nf528e) (bytevector-u32-native-set! . nf528d) (bytevector-u32-native-ref . nf528c) (bytevector-u16-set! . nf528b) (bytevector-u16-ref . nf528a) (bytevector-u16-native-set! . nf5289) (bytevector-u16-native-ref . nf5288) (bytevector-sint-set! . nf5287) (bytevector-sint-ref . nf5286) (bytevector-s8-set! . nf5285) (bytevector-s8-ref . nf5284) (bytevector-s64-set! . nf5283) (bytevector-s64-ref . nf5282) (bytevector-s64-native-set! . nf5281) (bytevector-s64-native-ref . nf5280) (bytevector-s32-set! . nf527f) (bytevector-s32-ref . nf527e) (bytevector-s32-native-set! . nf527d) (bytevector-s32-native-ref . nf527c) (bytevector-s16-set! . nf527b) (bytevector-s16-ref . nf527a) (bytevector-s16-native-set! . nf5279) (bytevector-s16-native-ref . nf5278) (bytevector-length . nf5277) (bytevector-ieee-single-ref . nf5276) (bytevector-ieee-single-set! . nf5275) (bytevector-ieee-single-native-set! . nf5274) (bytevector-ieee-single-native-ref . nf5273) (bytevector-ieee-double-set! . nf5272) (bytevector-ieee-double-ref . nf5271) (bytevector-ieee-double-native-set! . nf5270) (bytevector-ieee-double-native-ref . nf526f) (bytevector-fill! . nf526e) (bytevector-copy! . nf526d) (bytevector-copy . nf526c) (bytevector->uint-list . nf526b) (bytevector->u8-list . nf526a) (bytevector->sint-list . nf5269) (endianness . nf5121)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5435 '(rnrs unicode) '(6) '() '() '() '((string-upcase . nf5375) (string-titlecase . nf5374) (string-normalize-nfkd . nf5373) (string-normalize-nfkc . nf5372) (string-normalize-nfd . nf5371) (string-normalize-nfc . nf5370) (string-foldcase . nf536f) (string-downcase . nf536e) (string-ci>? . nf536d) (string-ci>=? . nf536c) (string-ci=? . nf536b) (string-ci<? . nf536a) (string-ci<=? . nf5369) (char-whitespace? . nf5368) (char-upper-case? . nf5367) (char-title-case? . nf5366) (char-numeric? . nf5365) (char-lower-case? . nf5364) (char-general-category . nf5363) (char-upcase . nf5362) (char-titlecase . nf5361) (char-foldcase . nf5360) (char-downcase . nf535f) (char-ci>? . nf535e) (char-ci>=? . nf535d) (char-ci=? . nf535c) (char-ci<? . nf535b) (char-ci<=? . nf535a) (char-alphabetic? . nf5359)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5436 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . nf52b8) (raise-continuable . nf52b7) (raise . nf52b6) (guard . nf512d) (else . nf5125) (=> . nf5124)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5437 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . nf520d) (bitwise-reverse-bit-field . nf520c) (bitwise-length . nf520b) (bitwise-if . nf520a) (bitwise-first-bit-set . nf5209) (bitwise-copy-bit-field . nf5208) (bitwise-copy-bit . nf5207) (bitwise-bit-set? . nf5206) (bitwise-bit-field . nf5205) (bitwise-bit-count . nf5204) (bitwise-xor . nf5203) (bitwise-ior . nf5202) (bitwise-and . nf5201) (bitwise-not . nf5200) (bitwise-arithmetic-shift-right . nf51ff) (bitwise-arithmetic-shift-left . nf51fe) (bitwise-arithmetic-shift . nf51fd)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5438 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . nf523a) (fxxor . nf5239) (fxrotate-bit-field . nf5238) (fxreverse-bit-field . nf5237) (fxpositive? . nf5236) (fxodd? . nf5235) (fxnot . nf5234) (fxnegative? . nf5233) (fxmod0 . nf5232) (fxmod . nf5231) (fxmin . nf5230) (fxmax . nf522f) (fxlength . nf522e) (fxior . nf522d) (fxif . nf522c) (fxfirst-bit-set . nf522b) (fxeven? . nf522a) (fxdiv0-and-mod0 . nf5229) (fxdiv0 . nf5228) (fxdiv-and-mod . nf5227) (fxdiv . nf5226) (fxcopy-bit-field . nf5225) (fxcopy-bit . nf5224) (fxbit-set? . nf5223) (fxbit-field . nf5222) (fxbit-count . nf5221) (fxarithmetic-shift-right . nf5220) (fxarithmetic-shift-left . nf521f) (fxarithmetic-shift . nf521e) (fxand . nf521d) (fx>? . nf521c) (fx>=? . nf521b) (fx=? . nf521a) (fx<? . nf5219) (fx<=? . nf5218) (fx-/carry . nf5217) (fx- . nf5216) (fx+/carry . nf5215) (fx+ . nf5214) (fx*/carry . nf5213) (fx* . nf5212) (greatest-fixnum . nf5211) (least-fixnum . nf5210) (fixnum-width . nf520f) (fixnum? . nf520e)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5439 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . nf4e81) (no-infinities-violation? . nf4e6c) (make-no-nans-violation . nf4e7f) (make-no-infinities-violation . nf4e6a) (real->flonum . nf5268) (flzero? . nf5267) (fltruncate . nf5266) (fltan . nf5265) (flsqrt . nf5264) (flsin . nf5263) (flround . nf5262) (flpositive? . nf5261) (flonum? . nf5260) (flodd? . nf525f) (flnumerator . nf525e) (flnegative? . nf525d) (flnan? . nf525c) (flmod0 . nf525b) (flmod . nf525a) (flmin . nf5259) (flmax . nf5258) (fllog . nf5257) (flinteger? . nf5256) (flinfinite? . nf5255) (flfloor . nf5254) (flfinite? . nf5253) (flexpt . nf5252) (flexp . nf5251) (fleven? . nf5250) (fldiv0-and-mod0 . nf524f) (fldiv0 . nf524e) (fldiv-and-mod . nf524d) (fldiv . nf524c) (fldenominator . nf524b) (flcos . nf524a) (flceiling . nf5249) (flatan . nf5248) (flasin . nf5247) (flacos . nf5246) (flabs . nf5245) (fl>? . nf5244) (fl>=? . nf5243) (fl=? . nf5242) (fl<? . nf5241) (fl<=? . nf5240) (fl/ . nf523f) (fl- . nf523e) (fl+ . nf523d) (fl* . nf523c) (fixnum->flonum . nf523b) (&no-nans . nf5159) (&no-infinities . nf5158)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . nf5342) (string-ci-hash . nf5341) (string-hash . nf5340) (equal-hash . nf533f) (hashtable-equivalence-function . nf533e) (make-hashtable . nf533d) (hashtable-hash-function . nf533c) (make-eqv-hashtable . nf533b) (make-eq-hashtable . nf533a) (hashtable? . nf5339) (hashtable-update! . nf5338) (hashtable-size . nf5337) (hashtable-set! . nf5336) (hashtable-ref . nf5335) (hashtable-mutable? . nf5334) (hashtable-keys . nf5333) (hashtable-entries . nf5332) (hashtable-delete! . nf5331) (hashtable-copy . nf5330) (hashtable-contains? . nf532f) (hashtable-clear! . nf532e)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543b '(rnrs io ports) '(6) '() '() '() '((eof-object? . nf531e) (eof-object . nf531d) (current-error-port . nf531c) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (utf-8-codec . nf5317) (utf-16-codec . nf5316) (transcoder-error-handling-mode . nf5315) (transcoder-eol-style . nf5314) (transcoder-codec . nf5313) (transcoded-port . nf5312) (textual-port? . nf5311) (string->bytevector . nf5310) (standard-output-port . nf530f) (standard-input-port . nf530e) (standard-error-port . nf530d) (set-port-position! . nf530c) (put-u8 . nf530b) (put-string . nf530a) (put-datum . nf5309) (put-char . nf5308) (put-bytevector . nf5307) (port? . nf5306) (port-transcoder . nf5305) (port-position . nf5304) (port-has-set-port-position!? . nf5303) (port-has-port-position? . nf5302) (port-eof? . nf5301) (output-port-buffer-mode . nf5300) (open-string-output-port . nf52ff) (open-string-input-port . nf52fe) (open-file-output-port . nf52fd) (open-file-input/output-port . nf52fc) (open-file-input-port . nf52fb) (open-bytevector-output-port . nf52fa) (open-bytevector-input-port . nf52f9) (native-transcoder . nf52f8) (native-eol-style . nf52f7) (make-transcoder . nf52f6) (latin-1-codec . nf52f5) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (make-i/o-encoding-error . nf4e51) (make-i/o-decoding-error . nf4e3a) (make-custom-textual-output-port . nf52f4) (make-custom-textual-input/output-port . nf52f3) (make-custom-textual-input-port . nf52f2) (make-custom-binary-output-port . nf52f1) (make-custom-binary-input/output-port . nf52f0) (make-custom-binary-input-port . nf52ef) (lookahead-u8 . nf52ed) (lookahead-char . nf52ec) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (i/o-encoding-error? . nf4e55) (i/o-encoding-error-char . nf4e57) (i/o-decoding-error? . nf4e3c) (get-u8 . nf52eb) (get-string-n! . nf52ea) (get-string-n . nf52e9) (get-string-all . nf52e8) (get-line . nf52e7) (get-datum . nf52e6) (get-char . nf52e5) (get-bytevector-some . nf52e4) (get-bytevector-n! . nf52e3) (get-bytevector-n . nf52e2) (get-bytevector-all . nf52e1) (flush-output-port . nf52e0) (close-port . nf52df) (call-with-string-output-port . nf52be) (call-with-port . nf52bd) (call-with-bytevector-output-port . nf52bc) (bytevector->string . nf52bb) (buffer-mode? . nf52ba) (binary-port? . nf52b9) (&i/o-encoding . nf5157) (&i/o-decoding . nf5156) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c) (error-handling-mode . nf5131) (file-options . nf5130) (buffer-mode . nf512f) (eol-style . nf512e)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543c '(rnrs enums) '(6) '() '() '() '((make-enumeration . nf52b5) (enum-set=? . nf52b4) (enum-set-universe . nf52b3) (enum-set-union . nf52b2) (enum-set-subset? . nf52b1) (enum-set-projection . nf52b0) (enum-set-member? . nf52af) (enum-set-intersection . nf52ae) (enum-set-indexer . nf52ad) (enum-set-difference . nf52ac) (enum-set-constructor . nf52ab) (enum-set-complement . nf52aa) (enum-set->list . nf52a9) (define-enumeration . nf513c)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543d '(rnrs conditions) '(6) '() '() '() '((who-condition? . nf4ccc) (warning? . nf4c44) (violation? . nf4c83) (undefined-violation? . nf4d43) (syntax-violation? . nf4d2a) (syntax-violation-subform . nf4d2e) (syntax-violation-form . nf4d2c) (syntax-violation . nf3156) (simple-conditions . nf52a8) (serious-condition? . nf4c59) (non-continuable-violation? . nf4ce3) (message-condition? . nf4c2d) (make-who-condition . nf4cc8) (make-warning . nf4c42) (make-violation . nf4c81) (make-undefined-violation . nf4d41) (make-syntax-violation . nf4d24) (make-serious-condition . nf4c57) (make-non-continuable-violation . nf4ce1) (make-message-condition . nf4c29) (make-lexical-violation . nf4d0b) (make-irritants-condition . nf4cad) (make-implementation-restriction-violation . nf4cf6) (make-error . nf4c6c) (make-assertion-violation . nf4c96) (lexical-violation? . nf4d0d) (irritants-condition? . nf4cb1) (implementation-restriction-violation? . nf4cf8) (error? . nf4c6e) (condition-who . nf4cce) (condition-predicate . nf52a7) (condition-message . nf4c2f) (condition-irritants . nf4cb3) (condition-accessor . nf52a6) (condition . nf52a5) (assertion-violation? . nf4c98) (condition? . nf52a4) (&undefined . nf514b) (&syntax . nf514a) (&lexical . nf5149) (&implementation-restriction . nf5148) (&non-continuable . nf5147) (&who . nf5146) (&irritants . nf5145) (&assertion . nf5144) (&violation . nf5143) (&error . nf5142) (&serious . nf5141) (&warning . nf5140) (&message . nf513f) (&condition . nf513e) (define-condition-type . nf513d)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543e '(rnrs records inspection) '(6) '() '() '() '((record? . nf5351) (record-type-uid . nf5350) (record-type-sealed? . nf534f) (record-type-parent . nf534e) (record-type-opaque? . nf534d) (record-type-name . nf534c) (record-type-generative? . nf534b) (record-type-field-names . nf534a) (record-rtd . nf5349) (record-field-mutable? . nf5348)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf543f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . nf5358) (record-predicate . nf5357) (record-mutator . nf5356) (record-constructor . nf5355) (record-accessor . nf5354) (make-record-type-descriptor . nf5353) (make-record-constructor-descriptor . nf5352)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5440 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . nf513b) (parent-rtd . nf513a) (nongenerative . nf5139) (opaque . nf5138) (sealed . nf5137) (protocol . nf5136) (parent . nf5135) (immutable . nf5134) (mutable . nf5133) (fields . nf5132) (record-constructor-descriptor . nf5112) (record-type-descriptor . nf5111)) '() values values '#f '#f '#t '#f) (nf2c84@nf2ad0@install-library 'nf5441 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . nf4e85) (&no-nans-rtd . nf4e83) (&no-infinities-rcd . nf4e70) (&no-infinities-rtd . nf4e6e) (&i/o-encoding-rcd . nf4e5b) (&i/o-encoding-rtd . nf4e59) (&i/o-decoding-rcd . nf4e40) (&i/o-decoding-rtd . nf4e3e) (&i/o-port-rcd . nf4e2b) (&i/o-port-rtd . nf4e29) (&i/o-file-does-not-exist-rcd . nf4e10) (&i/o-file-does-not-exist-rtd . nf4e0e) (&i/o-file-already-exists-rcd . nf4dfb) (&i/o-file-already-exists-rtd . nf4df9) (&i/o-file-is-read-only-rcd . nf4de6) (&i/o-file-is-read-only-rtd . nf4de4) (&i/o-file-protection-rcd . nf4dd1) (&i/o-file-protection-rtd . nf4dcf) (&i/o-filename-rcd . nf4dbc) (&i/o-filename-rtd . nf4dba) (&i/o-invalid-position-rcd . nf4da1) (&i/o-invalid-position-rtd . nf4d9f) (&i/o-write-rcd . nf4d86) (&i/o-write-rtd . nf4d84) (&i/o-read-rcd . nf4d71) (&i/o-read-rtd . nf4d6f) (&i/o-rcd . nf4d5c) (&i/o-rtd . nf4d5a) (&undefined-rcd . nf4d47) (&undefined-rtd . nf4d45) (&syntax-rcd . nf4d32) (&syntax-rtd . nf4d30) (&lexical-rcd . nf4d11) (&lexical-rtd . nf4d0f) (&implementation-restriction-rcd . nf4cfc) (&implementation-restriction-rtd . nf4cfa) (&non-continuable-rcd . nf4ce7) (&non-continuable-rtd . nf4ce5) (&who-rcd . nf4cd2) (&who-rtd . nf4cd0) (&irritants-rcd . nf4cb7) (&irritants-rtd . nf4cb5) (&assertion-rcd . nf4c9c) (&assertion-rtd . nf4c9a) (&violation-rcd . nf4c87) (&violation-rtd . nf4c85) (&error-rcd . nf4c72) (&error-rtd . nf4c70) (&serious-rcd . nf4c5d) (&serious-rtd . nf4c5b) (&warning-rcd . nf4c48) (&warning-rtd . nf4c46) (&message-rcd . nf4c33) (&message-rtd . nf4c31) (&condition-rcd . nf4bd4) (&condition-rtd . nf4bd2) (syntax-error . nf3152) (syntax-dispatch . nf3076) (pretty-print . nf5421) (eval-core . nf5420) (set-symbol-value! . nf541f) (symbol-value . nf541e) (gensym . nf541d) (void . nf541c) (load . nf4f96) (interaction-environment . nf3164) (char-ready? . nf541b) (regexp? . nf541a) (read-line . nf5419) (gensym-prefix-set! . nf5418) (ungensym . nf5417) (alist->eq-hash-table . nf5416) (assoc-ref . nf5415) (print . nf5414) (format . nf5413) (host-os . nf5412) (library-path . nf2aaf) (standard-library-path . nf5411) (file-newer? . nf5410) (stat-mtime . nf540f) (write-to-file . nf540e) (file->list . nf540d) (file->string . nf540c) (digit->integer . nf540b) (call-with-string-input-port . nf540a) (call-with-string-io . nf5409) (string-split . nf5408) (bytevector-for-each . nf5407) (string->regexp . nf5406) (rxmatch . nf5405) (regexp-replace-all . nf5404) (hashtable-for-each . nf5403) (mosh-cache-dir . nf289a) (call-process . nf5402) (local-tz-offset . nf5401) (microseconds . nf5400) (directory-list . nf53ff) (set-current-directory! . nf53fe) (expand-path . nf53fd) (current-directory . nf53fc) (%spawn . nf53fb) (%waitpid . nf53fa) (simple-struct-name . nf53f9) (simple-struct-set! . nf53f8) (simple-struct-ref . nf53f7) (make-simple-struct . nf53f6) (simple-struct? . nf53f5) (pointer-ref-c-int64 . nf53f4) (pointer-ref-c-int32 . nf53f3) (pointer-ref-c-int16 . nf53f2) (pointer-ref-c-int8 . nf53f1) (pointer-ref-c-uint64 . nf53f0) (pointer-ref-c-uint32 . nf53ef) (pointer-ref-c-uint16 . nf53ee) (pointer-ref-c-uint8 . nf53ed) (pointer-set-c-uint64! . nf53ec) (pointer-set-c-uint32! . nf53eb) (pointer-set-c-uint16! . nf53ea) (pointer-set-c-uint8! . nf53e9) (pointer-set-c-int64! . nf53e8) (pointer-set-c-int32! . nf53e7) (pointer-set-c-int16! . nf53e6) (pointer-set-c-int8! . nf53e5) (pointer-set-c-pointer! . nf53e4) (pointer-set-c-double! . nf53e3) (pointer-set-c-float! . nf53e2) (pointer-set-c-long-long! . nf53e1) (pointer-set-c-long! . nf53e0) (pointer-set-c-int! . nf53df) (pointer-set-c-short! . nf53de) (pointer-set-c-char! . nf53dd) (pointer-ref-c-pointer . nf53dc) (pointer-ref-c-double . nf53db) (pointer-ref-c-float . nf53da) (pointer-ref-c-unsigned-long-long . nf53d9) (pointer-ref-c-signed-long-long . nf53d8) (pointer-ref-c-unsigned-long . nf53d7) (pointer-ref-c-signed-long . nf53d6) (pointer-ref-c-unsigned-int . nf53d5) (pointer-ref-c-signed-int . nf53d4) (pointer-ref-c-unsigned-short . nf53d3) (pointer-ref-c-signed-short . nf53d2) (pointer-ref-c-unsigned-char . nf53d1) (pointer-ref-c-signed-char . nf53d0) (pointer->integer . nf53cf) (integer->pointer . nf53ce) (pointer? . nf53cd) (shared-errno . nf53cc) (%ffi-free-c-callback-trampoline . nf53cb) (%ffi-make-c-callback-trampoline . nf53ca) (%ffi-free . nf53c9) (%ffi-malloc . nf53c8) (%ffi-supported? . nf53c7) (%ffi-pointer->string . nf53c6) (%ffi-call->string-or-zero . nf53c5) (%ffi-call->double . nf53c4) (%ffi-call->void* . nf53c3) (%ffi-call->void . nf53c2) (%ffi-call->char . nf53c1) (%ffi-call->int . nf53c0) (%ffi-lookup . nf53bf) (%ffi-open . nf53be) (%fork . nf53bd) (%pipe . nf53bc) (p . nf53bb) (open-output-string . nf53ba) (get-output-string . nf53b9) (file-stat-ctime . nf53b8) (file-stat-atime . nf53b7) (file-stat-mtime . nf53b6) (file-size-in-bytes . nf53b5) (file-writable? . nf53b4) (file-executable? . nf53b3) (file-readable? . nf53b2) (file-regular? . nf53b1) (file-symbolic-link? . nf53b0) (file-directory? . nf53af) (create-symbolic-link . nf53ae) (rename-file . nf53ad) (delete-directory . nf53ac) (create-directory . nf53ab) (create-mosh-cache-dir . nf53aa) (get-environment-variables . nf53a9) (current-exception-handler . nf53a8) (get-environment-variable . nf53a7) (join-wraps . nf53a6) (id->real-label . nf53a5) (same-marks? . nf53a4) (same-marks*? . nf53a3) (get-timeofday . nf53a2) (get-command-line . nf53a1) (sys-display . nf53a0) (whereis . nf539f) (register . nf539e) (vm-join! . nf539d) (vm-set-value! . nf539c) (vm? . nf539b) (main-vm? . nf539a) (vm-eval . nf5399) (vm-self . nf5398) (vm-start! . nf5397) (make-vm . nf5396) (mutex-try-lock! . nf5395) (mutex-unlock! . nf5394) (mutex-lock! . nf5393) (mutex? . nf5392) (make-mutex . nf5391) (condition-variable-notify-all! . nf5390) (condition-variable-notify! . nf538f) (condition-variable-wait! . nf538e) (make-condition-variable . nf538d) (mosh-executable-path . nf538c) (make-file-options . nf538b) (source-info . nf538a) (make-compiler-instruction . nf5389) (make-instruction . nf5388) (set-source-info! . nf5387) (bignum? . nf5386) (fast-equal? . nf5385) (fasl-read . nf5384) (fasl-write . nf5383) (time-usage . nf5382) (os-constant . nf5381) (disasm . nf5380) (make-parameter . nf2898) (socket-port . nf537f) (socket-shutdown . nf537e) (socket-close . nf537d) (socket-send . nf537c) (socket-recv! . nf537b) (socket-recv . nf537a) (make-server-socket . nf5379) (make-client-socket . nf5378) (socket-accept . nf5377) (socket? . nf5376) (string-upcase . nf5375) (string-titlecase . nf5374) (string-normalize-nfkd . nf5373) (string-normalize-nfkc . nf5372) (string-normalize-nfd . nf5371) (string-normalize-nfc . nf5370) (string-foldcase . nf536f) (string-downcase . nf536e) (string-ci>? . nf536d) (string-ci>=? . nf536c) (string-ci=? . nf536b) (string-ci<? . nf536a) (string-ci<=? . nf5369) (char-whitespace? . nf5368) (char-upper-case? . nf5367) (char-title-case? . nf5366) (char-numeric? . nf5365) (char-lower-case? . nf5364) (char-general-category . nf5363) (char-upcase . nf5362) (char-titlecase . nf5361) (char-foldcase . nf5360) (char-downcase . nf535f) (char-ci>? . nf535e) (char-ci>=? . nf535d) (char-ci=? . nf535c) (char-ci<? . nf535b) (char-ci<=? . nf535a) (char-alphabetic? . nf5359) (make-variable-transformer . nf2ea1) (identifier? . nf3158) (generate-temporaries . nf3144) (free-identifier=? . nf3146) (syntax->datum . nf315c) (datum->syntax . nf315a) (bound-identifier=? . nf3148) (record-type-descriptor? . nf5358) (record-predicate . nf5357) (record-mutator . nf5356) (record-constructor . nf5355) (record-accessor . nf5354) (make-record-type-descriptor . nf5353) (make-record-constructor-descriptor . nf5352) (record? . nf5351) (record-type-uid . nf5350) (record-type-sealed? . nf534f) (record-type-parent . nf534e) (record-type-opaque? . nf534d) (record-type-name . nf534c) (record-type-generative? . nf534b) (record-type-field-names . nf534a) (record-rtd . nf5349) (record-field-mutable? . nf5348) (delete-file . nf5347) (file-exists? . nf5346) (vector-sort! . nf5345) (vector-sort . nf5344) (list-sort . nf5343) (symbol-hash . nf5342) (string-ci-hash . nf5341) (string-hash . nf5340) (equal-hash . nf533f) (hashtable-equivalence-function . nf533e) (make-hashtable . nf533d) (hashtable-hash-function . nf533c) (make-eqv-hashtable . nf533b) (make-eq-hashtable . nf533a) (hashtable? . nf5339) (hashtable-update! . nf5338) (hashtable-size . nf5337) (hashtable-set! . nf5336) (hashtable-ref . nf5335) (hashtable-mutable? . nf5334) (hashtable-keys . nf5333) (hashtable-entries . nf5332) (hashtable-delete! . nf5331) (hashtable-copy . nf5330) (hashtable-contains? . nf532f) (hashtable-clear! . nf532e) (call-with-output-file . nf532d) (call-with-input-file . nf532c) (write-char . nf532b) (write . nf532a) (with-output-to-file . nf5329) (with-input-from-file . nf5328) (read-char . nf5327) (read . nf5326) (peek-char . nf5325) (open-output-file . nf5324) (open-input-file . nf5323) (newline . nf5322) (display . nf5321) (close-output-port . nf5320) (close-input-port . nf531f) (eof-object? . nf531e) (eof-object . nf531d) (current-error-port . nf531c) (current-output-port . nf531b) (current-input-port . nf531a) (output-port? . nf5319) (input-port? . nf5318) (utf-8-codec . nf5317) (utf-16-codec . nf5316) (transcoder-error-handling-mode . nf5315) (transcoder-eol-style . nf5314) (transcoder-codec . nf5313) (transcoded-port . nf5312) (textual-port? . nf5311) (string->bytevector . nf5310) (standard-output-port . nf530f) (standard-input-port . nf530e) (standard-error-port . nf530d) (set-port-position! . nf530c) (put-u8 . nf530b) (put-string . nf530a) (put-datum . nf5309) (put-char . nf5308) (put-bytevector . nf5307) (port? . nf5306) (port-transcoder . nf5305) (port-position . nf5304) (port-has-set-port-position!? . nf5303) (port-has-port-position? . nf5302) (port-eof? . nf5301) (output-port-buffer-mode . nf5300) (open-string-output-port . nf52ff) (open-string-input-port . nf52fe) (open-file-output-port . nf52fd) (open-file-input/output-port . nf52fc) (open-file-input-port . nf52fb) (open-bytevector-output-port . nf52fa) (open-bytevector-input-port . nf52f9) (native-transcoder . nf52f8) (native-eol-style . nf52f7) (make-transcoder . nf52f6) (latin-1-codec . nf52f5) (make-i/o-write-error . nf4d80) (make-i/o-read-error . nf4d6b) (make-i/o-port-error . nf4e21) (make-i/o-invalid-position-error . nf4d97) (make-i/o-filename-error . nf4db2) (make-i/o-file-protection-error . nf4dcb) (make-i/o-file-is-read-only-error . nf4de0) (make-i/o-file-does-not-exist-error . nf4e0a) (make-i/o-file-already-exists-error . nf4df5) (make-i/o-error . nf4d56) (make-i/o-encoding-error . nf4e51) (make-i/o-decoding-error . nf4e3a) (make-custom-textual-output-port . nf52f4) (make-custom-textual-input/output-port . nf52f3) (make-custom-textual-input-port . nf52f2) (make-custom-binary-output-port . nf52f1) (make-custom-binary-input/output-port . nf52f0) (make-custom-binary-input-port . nf52ef) (make-bytevector . nf52ee) (lookahead-u8 . nf52ed) (lookahead-char . nf52ec) (i/o-write-error? . nf4d82) (i/o-read-error? . nf4d6d) (i/o-port-error? . nf4e25) (i/o-invalid-position-error? . nf4d9b) (i/o-filename-error? . nf4db6) (i/o-file-protection-error? . nf4dcd) (i/o-file-is-read-only-error? . nf4de2) (i/o-file-does-not-exist-error? . nf4e0c) (i/o-file-already-exists-error? . nf4df7) (i/o-error? . nf4d58) (i/o-error-position . nf4d9d) (i/o-error-port . nf4e27) (i/o-error-filename . nf4db8) (i/o-encoding-error? . nf4e55) (i/o-encoding-error-char . nf4e57) (i/o-decoding-error? . nf4e3c) (get-u8 . nf52eb) (get-string-n! . nf52ea) (get-string-n . nf52e9) (get-string-all . nf52e8) (get-line . nf52e7) (get-datum . nf52e6) (get-char . nf52e5) (get-bytevector-some . nf52e4) (get-bytevector-n! . nf52e3) (get-bytevector-n . nf52e2) (get-bytevector-all . nf52e1) (flush-output-port . nf52e0) (close-port . nf52df) (scheme-report-environment . nf3132) (quotient . nf52de) (null-environment . nf3130) (remainder . nf52dd) (modulo . nf52dc) (inexact->exact . nf52db) (force . nf52da) (exact->inexact . nf52d9) (make-promise . nf52d8) (exit . nf52d7) (command-line . nf4f90) (string-fill! . nf52d6) (string-set! . nf52d5) (set-cdr! . nf52d4) (set-car! . nf52d3) (remove . nf52d2) (remv . nf52d1) (remp . nf52d0) (remq . nf52cf) (partition . nf52ce) (memv . nf52cd) (memq . nf52cc) (memp . nf52cb) (member . nf52ca) (exists . nf52c9) (for-all . nf52c8) (fold-right . nf52c7) (fold-left . nf52c6) (find . nf52c5) (filter . nf52c4) (cons* . nf52c3) (assv . nf52c2) (assq . nf52c1) (assp . nf52c0) (assoc . nf52bf) (call-with-string-output-port . nf52be) (call-with-port . nf52bd) (call-with-bytevector-output-port . nf52bc) (bytevector->string . nf52bb) (buffer-mode? . nf52ba) (binary-port? . nf52b9) (with-exception-handler . nf52b8) (raise-continuable . nf52b7) (raise . nf52b6) (eval . nf3136) (environment . nf312e) (make-enumeration . nf52b5) (enum-set=? . nf52b4) (enum-set-universe . nf52b3) (enum-set-union . nf52b2) (enum-set-subset? . nf52b1) (enum-set-projection . nf52b0) (enum-set-member? . nf52af) (enum-set-intersection . nf52ae) (enum-set-indexer . nf52ad) (enum-set-difference . nf52ac) (enum-set-constructor . nf52ab) (enum-set-complement . nf52aa) (enum-set->list . nf52a9) (who-condition? . nf4ccc) (warning? . nf4c44) (violation? . nf4c83) (undefined-violation? . nf4d43) (syntax-violation? . nf4d2a) (syntax-violation-subform . nf4d2e) (syntax-violation-form . nf4d2c) (syntax-violation . nf3156) (simple-conditions . nf52a8) (serious-condition? . nf4c59) (non-continuable-violation? . nf4ce3) (message-condition? . nf4c2d) (make-who-condition . nf4cc8) (make-warning . nf4c42) (make-violation . nf4c81) (make-undefined-violation . nf4d41) (make-syntax-violation . nf4d24) (make-serious-condition . nf4c57) (make-non-continuable-violation . nf4ce1) (make-message-condition . nf4c29) (make-lexical-violation . nf4d0b) (make-irritants-condition . nf4cad) (make-implementation-restriction-violation . nf4cf6) (make-error . nf4c6c) (make-assertion-violation . nf4c96) (lexical-violation? . nf4d0d) (irritants-condition? . nf4cb1) (implementation-restriction-violation? . nf4cf8) (error? . nf4c6e) (condition-who . nf4cce) (condition-predicate . nf52a7) (condition-message . nf4c2f) (condition-irritants . nf4cb3) (condition-accessor . nf52a6) (condition . nf52a5) (assertion-violation? . nf4c98) (condition? . nf52a4) (utf32->string . nf52a3) (utf16->string . nf52a2) (utf8->string . nf52a1) (uint-list->bytevector . nf52a0) (u8-list->bytevector . nf529f) (string->utf8 . nf529e) (string->utf32 . nf529d) (string->utf16 . nf529c) (sint-list->bytevector . nf529b) (native-endianness . nf529a) (bytevector? . nf5299) (bytevector=? . nf5298) (bytevector-uint-set! . nf5297) (bytevector-uint-ref . nf5296) (bytevector-u8-set! . nf5295) (bytevector-u8-ref . nf5294) (bytevector-u64-set! . nf5293) (bytevector-u64-ref . nf5292) (bytevector-u64-native-set! . nf5291) (bytevector-u64-native-ref . nf5290) (bytevector-u32-set! . nf528f) (bytevector-u32-ref . nf528e) (bytevector-u32-native-set! . nf528d) (bytevector-u32-native-ref . nf528c) (bytevector-u16-set! . nf528b) (bytevector-u16-ref . nf528a) (bytevector-u16-native-set! . nf5289) (bytevector-u16-native-ref . nf5288) (bytevector-sint-set! . nf5287) (bytevector-sint-ref . nf5286) (bytevector-s8-set! . nf5285) (bytevector-s8-ref . nf5284) (bytevector-s64-set! . nf5283) (bytevector-s64-ref . nf5282) (bytevector-s64-native-set! . nf5281) (bytevector-s64-native-ref . nf5280) (bytevector-s32-set! . nf527f) (bytevector-s32-ref . nf527e) (bytevector-s32-native-set! . nf527d) (bytevector-s32-native-ref . nf527c) (bytevector-s16-set! . nf527b) (bytevector-s16-ref . nf527a) (bytevector-s16-native-set! . nf5279) (bytevector-s16-native-ref . nf5278) (bytevector-length . nf5277) (bytevector-ieee-single-ref . nf5276) (bytevector-ieee-single-set! . nf5275) (bytevector-ieee-single-native-set! . nf5274) (bytevector-ieee-single-native-ref . nf5273) (bytevector-ieee-double-set! . nf5272) (bytevector-ieee-double-ref . nf5271) (bytevector-ieee-double-native-set! . nf5270) (bytevector-ieee-double-native-ref . nf526f) (bytevector-fill! . nf526e) (bytevector-copy! . nf526d) (bytevector-copy . nf526c) (bytevector->uint-list . nf526b) (bytevector->u8-list . nf526a) (bytevector->sint-list . nf5269) (no-nans-violation? . nf4e81) (no-infinities-violation? . nf4e6c) (make-no-nans-violation . nf4e7f) (make-no-infinities-violation . nf4e6a) (real->flonum . nf5268) (flzero? . nf5267) (fltruncate . nf5266) (fltan . nf5265) (flsqrt . nf5264) (flsin . nf5263) (flround . nf5262) (flpositive? . nf5261) (flonum? . nf5260) (flodd? . nf525f) (flnumerator . nf525e) (flnegative? . nf525d) (flnan? . nf525c) (flmod0 . nf525b) (flmod . nf525a) (flmin . nf5259) (flmax . nf5258) (fllog . nf5257) (flinteger? . nf5256) (flinfinite? . nf5255) (flfloor . nf5254) (flfinite? . nf5253) (flexpt . nf5252) (flexp . nf5251) (fleven? . nf5250) (fldiv0-and-mod0 . nf524f) (fldiv0 . nf524e) (fldiv-and-mod . nf524d) (fldiv . nf524c) (fldenominator . nf524b) (flcos . nf524a) (flceiling . nf5249) (flatan . nf5248) (flasin . nf5247) (flacos . nf5246) (flabs . nf5245) (fl>? . nf5244) (fl>=? . nf5243) (fl=? . nf5242) (fl<? . nf5241) (fl<=? . nf5240) (fl/ . nf523f) (fl- . nf523e) (fl+ . nf523d) (fl* . nf523c) (fixnum->flonum . nf523b) (fxzero? . nf523a) (fxxor . nf5239) (fxrotate-bit-field . nf5238) (fxreverse-bit-field . nf5237) (fxpositive? . nf5236) (fxodd? . nf5235) (fxnot . nf5234) (fxnegative? . nf5233) (fxmod0 . nf5232) (fxmod . nf5231) (fxmin . nf5230) (fxmax . nf522f) (fxlength . nf522e) (fxior . nf522d) (fxif . nf522c) (fxfirst-bit-set . nf522b) (fxeven? . nf522a) (fxdiv0-and-mod0 . nf5229) (fxdiv0 . nf5228) (fxdiv-and-mod . nf5227) (fxdiv . nf5226) (fxcopy-bit-field . nf5225) (fxcopy-bit . nf5224) (fxbit-set? . nf5223) (fxbit-field . nf5222) (fxbit-count . nf5221) (fxarithmetic-shift-right . nf5220) (fxarithmetic-shift-left . nf521f) (fxarithmetic-shift . nf521e) (fxand . nf521d) (fx>? . nf521c) (fx>=? . nf521b) (fx=? . nf521a) (fx<? . nf5219) (fx<=? . nf5218) (fx-/carry . nf5217) (fx- . nf5216) (fx+/carry . nf5215) (fx+ . nf5214) (fx*/carry . nf5213) (fx* . nf5212) (greatest-fixnum . nf5211) (least-fixnum . nf5210) (fixnum-width . nf520f) (fixnum? . nf520e) (bitwise-rotate-bit-field . nf520d) (bitwise-reverse-bit-field . nf520c) (bitwise-length . nf520b) (bitwise-if . nf520a) (bitwise-first-bit-set . nf5209) (bitwise-copy-bit-field . nf5208) (bitwise-copy-bit . nf5207) (bitwise-bit-set? . nf5206) (bitwise-bit-field . nf5205) (bitwise-bit-count . nf5204) (bitwise-xor . nf5203) (bitwise-ior . nf5202) (bitwise-and . nf5201) (bitwise-not . nf5200) (bitwise-arithmetic-shift-right . nf51ff) (bitwise-arithmetic-shift-left . nf51fe) (bitwise-arithmetic-shift . nf51fd) (zero? . nf51fc) (vector? . nf51fb) (vector-set! . nf51fa) (vector-ref . nf51f9) (vector-map . nf51f8) (vector-length . nf51f7) (vector-for-each . nf51f6) (vector-fill! . nf51f5) (vector->list . nf51f4) (vector . nf51f3) (values . nf51f2) (truncate . nf51f1) (tan . nf51f0) (symbol? . nf51ef) (symbol=? . nf51ee) (symbol->string . nf51ed) (substring . nf51ec) (string? . nf51eb) (string>? . nf51ea) (string>=? . nf51e9) (string=? . nf51e8) (string<? . nf51e7) (string<=? . nf51e6) (string-ref . nf51e5) (string-length . nf51e4) (string-for-each . nf51e3) (string-copy . nf51e2) (string-append . nf51e1) (string->symbol . nf51e0) (string->number . nf51df) (string->list . nf51de) (string . nf51dd) (sqrt . nf51dc) (sin . nf51db) (round . nf51da) (reverse . nf51d9) (real? . nf51d8) (real-valued? . nf51d7) (real-part . nf51d6) (rationalize . nf51d5) (rational? . nf51d4) (rational-valued? . nf51d3) (procedure? . nf51d2) (positive? . nf51d1) (pair? . nf51d0) (odd? . nf51cf) (numerator . nf51ce) (number? . nf51cd) (number->string . nf51cc) (null? . nf51cb) (not . nf51ca) (negative? . nf51c9) (nan? . nf51c8) (min . nf51c7) (max . nf51c6) (map . nf51c5) (make-vector . nf51c4) (make-string . nf51c3) (make-rectangular . nf51c2) (make-polar . nf51c1) (magnitude . nf51c0) (log . nf51bf) (list? . nf51be) (list-tail . nf51bd) (list-ref . nf51bc) (list->vector . nf51bb) (list->string . nf51ba) (list . nf51b9) (length . nf51b8) (lcm . nf51b7) (integer? . nf51b6) (integer-valued? . nf51b5) (integer->char . nf51b4) (infinite? . nf51b3) (inexact? . nf51b2) (inexact . nf51b1) (imag-part . nf51b0) (gcd . nf51af) (for-each . nf51ae) (floor . nf51ad) (finite? . nf51ac) (expt . nf51ab) (exp . nf51aa) (exact? . nf51a9) (exact-integer-sqrt . nf51a8) (exact . nf51a7) (even? . nf51a6) (error . nf51a5) (eqv? . nf51a4) (equal? . nf51a3) (eq? . nf51a2) (dynamic-wind . nf51a1) (div0-and-mod0 . nf51a0) (mod0 . nf519f) (div0 . nf519e) (div-and-mod . nf519d) (mod . nf519c) (div . nf519b) (denominator . nf519a) (cos . nf5199) (cons . nf5198) (complex? . nf5197) (char? . nf5196) (char>? . nf5195) (char>=? . nf5194) (char=? . nf5193) (char<? . nf5192) (char<=? . nf5191) (char->integer . nf5190) (ceiling . nf518f) (call-with-values . nf518e) (call/cc . nf518d) (call-with-current-continuation . nf518c) (cddddr . nf518b) (cdddar . nf518a) (cddadr . nf5189) (cddaar . nf5188) (cdaddr . nf5187) (cdadar . nf5186) (cdaadr . nf5185) (cdaaar . nf5184) (cadddr . nf5183) (caddar . nf5182) (cadadr . nf5181) (cadaar . nf5180) (caaddr . nf517f) (caadar . nf517e) (caaadr . nf517d) (caaaar . nf517c) (cdddr . nf517b) (cddar . nf517a) (cdadr . nf5179) (cdaar . nf5178) (caddr . nf5177) (cadar . nf5176) (caadr . nf5175) (caaar . nf5174) (cddr . nf5173) (cdar . nf5172) (cadr . nf5171) (caar . nf5170) (cdr . nf516f) (car . nf516e) (boolean? . nf516d) (boolean=? . nf516c) (atan . nf516b) (assertion-violation . nf516a) (assertion-error . nf3150) (asin . nf5169) (apply . nf5168) (append . nf5167) (angle . nf5166) (acos . nf5165) (abs . nf5164) (/ . nf5163) (* . nf5162) (- . nf5161) (+ . nf5160) (>= . nf515f) (> . nf515e) (= . nf515d) (<= . nf515c) (< . nf515b) (library . nf515a) (&no-nans . nf5159) (&no-infinities . nf5158) (&i/o-encoding . nf5157) (&i/o-decoding . nf5156) (&i/o-port . nf5155) (&i/o-file-does-not-exist . nf5154) (&i/o-file-already-exists . nf5153) (&i/o-file-is-read-only . nf5152) (&i/o-file-protection . nf5151) (&i/o-filename . nf5150) (&i/o-invalid-position . nf514f) (&i/o-write . nf514e) (&i/o-read . nf514d) (&i/o . nf514c) (&undefined . nf514b) (&syntax . nf514a) (&lexical . nf5149) (&implementation-restriction . nf5148) (&non-continuable . nf5147) (&who . nf5146) (&irritants . nf5145) (&assertion . nf5144) (&violation . nf5143) (&error . nf5142) (&serious . nf5141) (&warning . nf5140) (&message . nf513f) (&condition . nf513e) (define-condition-type . nf513d) (define-enumeration . nf513c) (define-record-type . nf513b) (parent-rtd . nf513a) (nongenerative . nf5139) (opaque . nf5138) (sealed . nf5137) (protocol . nf5136) (parent . nf5135) (immutable . nf5134) (mutable . nf5133) (fields . nf5132) (error-handling-mode . nf5131) (file-options . nf5130) (buffer-mode . nf512f) (eol-style . nf512e) (guard . nf512d) (trace-define . nf512c) (trace-lambda . nf512b) (unsyntax-splicing . nf512a) (unsyntax . nf5129) (unquote-splicing . nf5128) (unquote . nf5127) (_ . nf5126) (else . nf5125) (=> . nf5124) (... . nf5123) (assert . nf5122) (endianness . nf5121) (delay . nf5120) (time . nf511f) (do . nf511e) (cond . nf511d) (let* . nf511c) (let*-values . nf511b) (let-values . nf511a) (identifier-syntax . nf5119) (with-syntax . nf5118) (quasisyntax . nf5117) (quasiquote . nf5116) (syntax-rules . nf5115) (include . nf5114) (define-struct . nf5113) (record-constructor-descriptor . nf5112) (record-type-descriptor . nf5111) (case . nf5110) (parameterize . nf510f) (unless . nf510e) (when . nf510d) (or . nf510c) (and . nf510b) (if . nf510a) (let . nf5109) (letrec* . nf5108) (letrec . nf5107) (type-descriptor . nf5106) (case-lambda . nf5105) (lambda . nf5104) (syntax . nf5103) (syntax-case . nf5102) (quote . nf5101) (foreign-call . nf5100) (letrec-syntax . nf50ff) (let-syntax . nf50fe) (set! . nf50fd) (import . nf50fc) (begin . nf50fb) (module . nf50fa) (define-syntax . nf50f9) (define . nf50f8)) '((nf4e85 core-prim . &no-nans-rcd) (nf4e83 core-prim . &no-nans-rtd) (nf4e70 core-prim . &no-infinities-rcd) (nf4e6e core-prim . &no-infinities-rtd) (nf4e5b core-prim . &i/o-encoding-rcd) (nf4e59 core-prim . &i/o-encoding-rtd) (nf4e40 core-prim . &i/o-decoding-rcd) (nf4e3e core-prim . &i/o-decoding-rtd) (nf4e2b core-prim . &i/o-port-rcd) (nf4e29 core-prim . &i/o-port-rtd) (nf4e10 core-prim . &i/o-file-does-not-exist-rcd) (nf4e0e core-prim . &i/o-file-does-not-exist-rtd) (nf4dfb core-prim . &i/o-file-already-exists-rcd) (nf4df9 core-prim . &i/o-file-already-exists-rtd) (nf4de6 core-prim . &i/o-file-is-read-only-rcd) (nf4de4 core-prim . &i/o-file-is-read-only-rtd) (nf4dd1 core-prim . &i/o-file-protection-rcd) (nf4dcf core-prim . &i/o-file-protection-rtd) (nf4dbc core-prim . &i/o-filename-rcd) (nf4dba core-prim . &i/o-filename-rtd) (nf4da1 core-prim . &i/o-invalid-position-rcd) (nf4d9f core-prim . &i/o-invalid-position-rtd) (nf4d86 core-prim . &i/o-write-rcd) (nf4d84 core-prim . &i/o-write-rtd) (nf4d71 core-prim . &i/o-read-rcd) (nf4d6f core-prim . &i/o-read-rtd) (nf4d5c core-prim . &i/o-rcd) (nf4d5a core-prim . &i/o-rtd) (nf4d47 core-prim . &undefined-rcd) (nf4d45 core-prim . &undefined-rtd) (nf4d32 core-prim . &syntax-rcd) (nf4d30 core-prim . &syntax-rtd) (nf4d11 core-prim . &lexical-rcd) (nf4d0f core-prim . &lexical-rtd) (nf4cfc core-prim . &implementation-restriction-rcd) (nf4cfa core-prim . &implementation-restriction-rtd) (nf4ce7 core-prim . &non-continuable-rcd) (nf4ce5 core-prim . &non-continuable-rtd) (nf4cd2 core-prim . &who-rcd) (nf4cd0 core-prim . &who-rtd) (nf4cb7 core-prim . &irritants-rcd) (nf4cb5 core-prim . &irritants-rtd) (nf4c9c core-prim . &assertion-rcd) (nf4c9a core-prim . &assertion-rtd) (nf4c87 core-prim . &violation-rcd) (nf4c85 core-prim . &violation-rtd) (nf4c72 core-prim . &error-rcd) (nf4c70 core-prim . &error-rtd) (nf4c5d core-prim . &serious-rcd) (nf4c5b core-prim . &serious-rtd) (nf4c48 core-prim . &warning-rcd) (nf4c46 core-prim . &warning-rtd) (nf4c33 core-prim . &message-rcd) (nf4c31 core-prim . &message-rtd) (nf4bd4 core-prim . &condition-rcd) (nf4bd2 core-prim . &condition-rtd) (nf3152 core-prim . syntax-error) (nf3076 core-prim . syntax-dispatch) (nf5421 core-prim . pretty-print) (nf5420 core-prim . eval-core) (nf541f core-prim . set-symbol-value!) (nf541e core-prim . symbol-value) (nf541d core-prim . gensym) (nf541c core-prim . void) (nf4f96 core-prim . load) (nf3164 core-prim . interaction-environment) (nf541b core-prim . char-ready?) (nf541a core-prim . regexp?) (nf5419 core-prim . read-line) (nf5418 core-prim . gensym-prefix-set!) (nf5417 core-prim . ungensym) (nf5416 core-prim . alist->eq-hash-table) (nf5415 core-prim . assoc-ref) (nf5414 core-prim . print) (nf5413 core-prim . format) (nf5412 core-prim . host-os) (nf2aaf core-prim . library-path) (nf5411 core-prim . standard-library-path) (nf5410 core-prim . file-newer?) (nf540f core-prim . stat-mtime) (nf540e core-prim . write-to-file) (nf540d core-prim . file->list) (nf540c core-prim . file->string) (nf540b core-prim . digit->integer) (nf540a core-prim . call-with-string-input-port) (nf5409 core-prim . call-with-string-io) (nf5408 core-prim . string-split) (nf5407 core-prim . bytevector-for-each) (nf5406 core-prim . string->regexp) (nf5405 core-prim . rxmatch) (nf5404 core-prim . regexp-replace-all) (nf5403 core-prim . hashtable-for-each) (nf289a core-prim . mosh-cache-dir) (nf5402 core-prim . call-process) (nf5401 core-prim . local-tz-offset) (nf5400 core-prim . microseconds) (nf53ff core-prim . directory-list) (nf53fe core-prim . set-current-directory!) (nf53fd core-prim . expand-path) (nf53fc core-prim . current-directory) (nf53fb core-prim . %spawn) (nf53fa core-prim . %waitpid) (nf53f9 core-prim . simple-struct-name) (nf53f8 core-prim . simple-struct-set!) (nf53f7 core-prim . simple-struct-ref) (nf53f6 core-prim . make-simple-struct) (nf53f5 core-prim . simple-struct?) (nf53f4 core-prim . pointer-ref-c-int64) (nf53f3 core-prim . pointer-ref-c-int32) (nf53f2 core-prim . pointer-ref-c-int16) (nf53f1 core-prim . pointer-ref-c-int8) (nf53f0 core-prim . pointer-ref-c-uint64) (nf53ef core-prim . pointer-ref-c-uint32) (nf53ee core-prim . pointer-ref-c-uint16) (nf53ed core-prim . pointer-ref-c-uint8) (nf53ec core-prim . pointer-set-c-uint64!) (nf53eb core-prim . pointer-set-c-uint32!) (nf53ea core-prim . pointer-set-c-uint16!) (nf53e9 core-prim . pointer-set-c-uint8!) (nf53e8 core-prim . pointer-set-c-int64!) (nf53e7 core-prim . pointer-set-c-int32!) (nf53e6 core-prim . pointer-set-c-int16!) (nf53e5 core-prim . pointer-set-c-int8!) (nf53e4 core-prim . pointer-set-c-pointer!) (nf53e3 core-prim . pointer-set-c-double!) (nf53e2 core-prim . pointer-set-c-float!) (nf53e1 core-prim . pointer-set-c-long-long!) (nf53e0 core-prim . pointer-set-c-long!) (nf53df core-prim . pointer-set-c-int!) (nf53de core-prim . pointer-set-c-short!) (nf53dd core-prim . pointer-set-c-char!) (nf53dc core-prim . pointer-ref-c-pointer) (nf53db core-prim . pointer-ref-c-double) (nf53da core-prim . pointer-ref-c-float) (nf53d9 core-prim . pointer-ref-c-unsigned-long-long) (nf53d8 core-prim . pointer-ref-c-signed-long-long) (nf53d7 core-prim . pointer-ref-c-unsigned-long) (nf53d6 core-prim . pointer-ref-c-signed-long) (nf53d5 core-prim . pointer-ref-c-unsigned-int) (nf53d4 core-prim . pointer-ref-c-signed-int) (nf53d3 core-prim . pointer-ref-c-unsigned-short) (nf53d2 core-prim . pointer-ref-c-signed-short) (nf53d1 core-prim . pointer-ref-c-unsigned-char) (nf53d0 core-prim . pointer-ref-c-signed-char) (nf53cf core-prim . pointer->integer) (nf53ce core-prim . integer->pointer) (nf53cd core-prim . pointer?) (nf53cc core-prim . shared-errno) (nf53cb core-prim . %ffi-free-c-callback-trampoline) (nf53ca core-prim . %ffi-make-c-callback-trampoline) (nf53c9 core-prim . %ffi-free) (nf53c8 core-prim . %ffi-malloc) (nf53c7 core-prim . %ffi-supported?) (nf53c6 core-prim . %ffi-pointer->string) (nf53c5 core-prim . %ffi-call->string-or-zero) (nf53c4 core-prim . %ffi-call->double) (nf53c3 core-prim . %ffi-call->void*) (nf53c2 core-prim . %ffi-call->void) (nf53c1 core-prim . %ffi-call->char) (nf53c0 core-prim . %ffi-call->int) (nf53bf core-prim . %ffi-lookup) (nf53be core-prim . %ffi-open) (nf53bd core-prim . %fork) (nf53bc core-prim . %pipe) (nf53bb core-prim . p) (nf53ba core-prim . open-output-string) (nf53b9 core-prim . get-output-string) (nf53b8 core-prim . file-stat-ctime) (nf53b7 core-prim . file-stat-atime) (nf53b6 core-prim . file-stat-mtime) (nf53b5 core-prim . file-size-in-bytes) (nf53b4 core-prim . file-writable?) (nf53b3 core-prim . file-executable?) (nf53b2 core-prim . file-readable?) (nf53b1 core-prim . file-regular?) (nf53b0 core-prim . file-symbolic-link?) (nf53af core-prim . file-directory?) (nf53ae core-prim . create-symbolic-link) (nf53ad core-prim . rename-file) (nf53ac core-prim . delete-directory) (nf53ab core-prim . create-directory) (nf53aa core-prim . create-mosh-cache-dir) (nf53a9 core-prim . get-environment-variables) (nf53a8 core-prim . current-exception-handler) (nf53a7 core-prim . get-environment-variable) (nf53a6 core-prim . join-wraps) (nf53a5 core-prim . id->real-label) (nf53a4 core-prim . same-marks?) (nf53a3 core-prim . same-marks*?) (nf53a2 core-prim . get-timeofday) (nf53a1 core-prim . get-command-line) (nf53a0 core-prim . sys-display) (nf539f core-prim . whereis) (nf539e core-prim . register) (nf539d core-prim . vm-join!) (nf539c core-prim . vm-set-value!) (nf539b core-prim . vm?) (nf539a core-prim . main-vm?) (nf5399 core-prim . vm-eval) (nf5398 core-prim . vm-self) (nf5397 core-prim . vm-start!) (nf5396 core-prim . make-vm) (nf5395 core-prim . mutex-try-lock!) (nf5394 core-prim . mutex-unlock!) (nf5393 core-prim . mutex-lock!) (nf5392 core-prim . mutex?) (nf5391 core-prim . make-mutex) (nf5390 core-prim . condition-variable-notify-all!) (nf538f core-prim . condition-variable-notify!) (nf538e core-prim . condition-variable-wait!) (nf538d core-prim . make-condition-variable) (nf538c core-prim . mosh-executable-path) (nf538b core-prim . make-file-options) (nf538a core-prim . source-info) (nf5389 core-prim . make-compiler-instruction) (nf5388 core-prim . make-instruction) (nf5387 core-prim . set-source-info!) (nf5386 core-prim . bignum?) (nf5385 core-prim . fast-equal?) (nf5384 core-prim . fasl-read) (nf5383 core-prim . fasl-write) (nf5382 core-prim . time-usage) (nf5381 core-prim . os-constant) (nf5380 core-prim . disasm) (nf2898 core-prim . make-parameter) (nf537f core-prim . socket-port) (nf537e core-prim . socket-shutdown) (nf537d core-prim . socket-close) (nf537c core-prim . socket-send) (nf537b core-prim . socket-recv!) (nf537a core-prim . socket-recv) (nf5379 core-prim . make-server-socket) (nf5378 core-prim . make-client-socket) (nf5377 core-prim . socket-accept) (nf5376 core-prim . socket?) (nf5375 core-prim . string-upcase) (nf5374 core-prim . string-titlecase) (nf5373 core-prim . string-normalize-nfkd) (nf5372 core-prim . string-normalize-nfkc) (nf5371 core-prim . string-normalize-nfd) (nf5370 core-prim . string-normalize-nfc) (nf536f core-prim . string-foldcase) (nf536e core-prim . string-downcase) (nf536d core-prim . string-ci>?) (nf536c core-prim . string-ci>=?) (nf536b core-prim . string-ci=?) (nf536a core-prim . string-ci<?) (nf5369 core-prim . string-ci<=?) (nf5368 core-prim . char-whitespace?) (nf5367 core-prim . char-upper-case?) (nf5366 core-prim . char-title-case?) (nf5365 core-prim . char-numeric?) (nf5364 core-prim . char-lower-case?) (nf5363 core-prim . char-general-category) (nf5362 core-prim . char-upcase) (nf5361 core-prim . char-titlecase) (nf5360 core-prim . char-foldcase) (nf535f core-prim . char-downcase) (nf535e core-prim . char-ci>?) (nf535d core-prim . char-ci>=?) (nf535c core-prim . char-ci=?) (nf535b core-prim . char-ci<?) (nf535a core-prim . char-ci<=?) (nf5359 core-prim . char-alphabetic?) (nf2ea1 core-prim . make-variable-transformer) (nf3158 core-prim . identifier?) (nf3144 core-prim . generate-temporaries) (nf3146 core-prim . free-identifier=?) (nf315c core-prim . syntax->datum) (nf315a core-prim . datum->syntax) (nf3148 core-prim . bound-identifier=?) (nf5358 core-prim . record-type-descriptor?) (nf5357 core-prim . record-predicate) (nf5356 core-prim . record-mutator) (nf5355 core-prim . record-constructor) (nf5354 core-prim . record-accessor) (nf5353 core-prim . make-record-type-descriptor) (nf5352 core-prim . make-record-constructor-descriptor) (nf5351 core-prim . record?) (nf5350 core-prim . record-type-uid) (nf534f core-prim . record-type-sealed?) (nf534e core-prim . record-type-parent) (nf534d core-prim . record-type-opaque?) (nf534c core-prim . record-type-name) (nf534b core-prim . record-type-generative?) (nf534a core-prim . record-type-field-names) (nf5349 core-prim . record-rtd) (nf5348 core-prim . record-field-mutable?) (nf5347 core-prim . delete-file) (nf5346 core-prim . file-exists?) (nf5345 core-prim . vector-sort!) (nf5344 core-prim . vector-sort) (nf5343 core-prim . list-sort) (nf5342 core-prim . symbol-hash) (nf5341 core-prim . string-ci-hash) (nf5340 core-prim . string-hash) (nf533f core-prim . equal-hash) (nf533e core-prim . hashtable-equivalence-function) (nf533d core-prim . make-hashtable) (nf533c core-prim . hashtable-hash-function) (nf533b core-prim . make-eqv-hashtable) (nf533a core-prim . make-eq-hashtable) (nf5339 core-prim . hashtable?) (nf5338 core-prim . hashtable-update!) (nf5337 core-prim . hashtable-size) (nf5336 core-prim . hashtable-set!) (nf5335 core-prim . hashtable-ref) (nf5334 core-prim . hashtable-mutable?) (nf5333 core-prim . hashtable-keys) (nf5332 core-prim . hashtable-entries) (nf5331 core-prim . hashtable-delete!) (nf5330 core-prim . hashtable-copy) (nf532f core-prim . hashtable-contains?) (nf532e core-prim . hashtable-clear!) (nf532d core-prim . call-with-output-file) (nf532c core-prim . call-with-input-file) (nf532b core-prim . write-char) (nf532a core-prim . write) (nf5329 core-prim . with-output-to-file) (nf5328 core-prim . with-input-from-file) (nf5327 core-prim . read-char) (nf5326 core-prim . read) (nf5325 core-prim . peek-char) (nf5324 core-prim . open-output-file) (nf5323 core-prim . open-input-file) (nf5322 core-prim . newline) (nf5321 core-prim . display) (nf5320 core-prim . close-output-port) (nf531f core-prim . close-input-port) (nf531e core-prim . eof-object?) (nf531d core-prim . eof-object) (nf531c core-prim . current-error-port) (nf531b core-prim . current-output-port) (nf531a core-prim . current-input-port) (nf5319 core-prim . output-port?) (nf5318 core-prim . input-port?) (nf5317 core-prim . utf-8-codec) (nf5316 core-prim . utf-16-codec) (nf5315 core-prim . transcoder-error-handling-mode) (nf5314 core-prim . transcoder-eol-style) (nf5313 core-prim . transcoder-codec) (nf5312 core-prim . transcoded-port) (nf5311 core-prim . textual-port?) (nf5310 core-prim . string->bytevector) (nf530f core-prim . standard-output-port) (nf530e core-prim . standard-input-port) (nf530d core-prim . standard-error-port) (nf530c core-prim . set-port-position!) (nf530b core-prim . put-u8) (nf530a core-prim . put-string) (nf5309 core-prim . put-datum) (nf5308 core-prim . put-char) (nf5307 core-prim . put-bytevector) (nf5306 core-prim . port?) (nf5305 core-prim . port-transcoder) (nf5304 core-prim . port-position) (nf5303 core-prim . port-has-set-port-position!?) (nf5302 core-prim . port-has-port-position?) (nf5301 core-prim . port-eof?) (nf5300 core-prim . output-port-buffer-mode) (nf52ff core-prim . open-string-output-port) (nf52fe core-prim . open-string-input-port) (nf52fd core-prim . open-file-output-port) (nf52fc core-prim . open-file-input/output-port) (nf52fb core-prim . open-file-input-port) (nf52fa core-prim . open-bytevector-output-port) (nf52f9 core-prim . open-bytevector-input-port) (nf52f8 core-prim . native-transcoder) (nf52f7 core-prim . native-eol-style) (nf52f6 core-prim . make-transcoder) (nf52f5 core-prim . latin-1-codec) (nf4d80 core-prim . make-i/o-write-error) (nf4d6b core-prim . make-i/o-read-error) (nf4e21 core-prim . make-i/o-port-error) (nf4d97 core-prim . make-i/o-invalid-position-error) (nf4db2 core-prim . make-i/o-filename-error) (nf4dcb core-prim . make-i/o-file-protection-error) (nf4de0 core-prim . make-i/o-file-is-read-only-error) (nf4e0a core-prim . make-i/o-file-does-not-exist-error) (nf4df5 core-prim . make-i/o-file-already-exists-error) (nf4d56 core-prim . make-i/o-error) (nf4e51 core-prim . make-i/o-encoding-error) (nf4e3a core-prim . make-i/o-decoding-error) (nf52f4 core-prim . make-custom-textual-output-port) (nf52f3 core-prim . make-custom-textual-input/output-port) (nf52f2 core-prim . make-custom-textual-input-port) (nf52f1 core-prim . make-custom-binary-output-port) (nf52f0 core-prim . make-custom-binary-input/output-port) (nf52ef core-prim . make-custom-binary-input-port) (nf52ee core-prim . make-bytevector) (nf52ed core-prim . lookahead-u8) (nf52ec core-prim . lookahead-char) (nf4d82 core-prim . i/o-write-error?) (nf4d6d core-prim . i/o-read-error?) (nf4e25 core-prim . i/o-port-error?) (nf4d9b core-prim . i/o-invalid-position-error?) (nf4db6 core-prim . i/o-filename-error?) (nf4dcd core-prim . i/o-file-protection-error?) (nf4de2 core-prim . i/o-file-is-read-only-error?) (nf4e0c core-prim . i/o-file-does-not-exist-error?) (nf4df7 core-prim . i/o-file-already-exists-error?) (nf4d58 core-prim . i/o-error?) (nf4d9d core-prim . i/o-error-position) (nf4e27 core-prim . i/o-error-port) (nf4db8 core-prim . i/o-error-filename) (nf4e55 core-prim . i/o-encoding-error?) (nf4e57 core-prim . i/o-encoding-error-char) (nf4e3c core-prim . i/o-decoding-error?) (nf52eb core-prim . get-u8) (nf52ea core-prim . get-string-n!) (nf52e9 core-prim . get-string-n) (nf52e8 core-prim . get-string-all) (nf52e7 core-prim . get-line) (nf52e6 core-prim . get-datum) (nf52e5 core-prim . get-char) (nf52e4 core-prim . get-bytevector-some) (nf52e3 core-prim . get-bytevector-n!) (nf52e2 core-prim . get-bytevector-n) (nf52e1 core-prim . get-bytevector-all) (nf52e0 core-prim . flush-output-port) (nf52df core-prim . close-port) (nf3132 core-prim . scheme-report-environment) (nf52de core-prim . quotient) (nf3130 core-prim . null-environment) (nf52dd core-prim . remainder) (nf52dc core-prim . modulo) (nf52db core-prim . inexact->exact) (nf52da core-prim . force) (nf52d9 core-prim . exact->inexact) (nf52d8 core-prim . make-promise) (nf52d7 core-prim . exit) (nf4f90 core-prim . command-line) (nf52d6 core-prim . string-fill!) (nf52d5 core-prim . string-set!) (nf52d4 core-prim . set-cdr!) (nf52d3 core-prim . set-car!) (nf52d2 core-prim . remove) (nf52d1 core-prim . remv) (nf52d0 core-prim . remp) (nf52cf core-prim . remq) (nf52ce core-prim . partition) (nf52cd core-prim . memv) (nf52cc core-prim . memq) (nf52cb core-prim . memp) (nf52ca core-prim . member) (nf52c9 core-prim . exists) (nf52c8 core-prim . for-all) (nf52c7 core-prim . fold-right) (nf52c6 core-prim . fold-left) (nf52c5 core-prim . find) (nf52c4 core-prim . filter) (nf52c3 core-prim . cons*) (nf52c2 core-prim . assv) (nf52c1 core-prim . assq) (nf52c0 core-prim . assp) (nf52bf core-prim . assoc) (nf52be core-prim . call-with-string-output-port) (nf52bd core-prim . call-with-port) (nf52bc core-prim . call-with-bytevector-output-port) (nf52bb core-prim . bytevector->string) (nf52ba core-prim . buffer-mode?) (nf52b9 core-prim . binary-port?) (nf52b8 core-prim . with-exception-handler) (nf52b7 core-prim . raise-continuable) (nf52b6 core-prim . raise) (nf3136 core-prim . eval) (nf312e core-prim . environment) (nf52b5 core-prim . make-enumeration) (nf52b4 core-prim . enum-set=?) (nf52b3 core-prim . enum-set-universe) (nf52b2 core-prim . enum-set-union) (nf52b1 core-prim . enum-set-subset?) (nf52b0 core-prim . enum-set-projection) (nf52af core-prim . enum-set-member?) (nf52ae core-prim . enum-set-intersection) (nf52ad core-prim . enum-set-indexer) (nf52ac core-prim . enum-set-difference) (nf52ab core-prim . enum-set-constructor) (nf52aa core-prim . enum-set-complement) (nf52a9 core-prim . enum-set->list) (nf4ccc core-prim . who-condition?) (nf4c44 core-prim . warning?) (nf4c83 core-prim . violation?) (nf4d43 core-prim . undefined-violation?) (nf4d2a core-prim . syntax-violation?) (nf4d2e core-prim . syntax-violation-subform) (nf4d2c core-prim . syntax-violation-form) (nf3156 core-prim . syntax-violation) (nf52a8 core-prim . simple-conditions) (nf4c59 core-prim . serious-condition?) (nf4ce3 core-prim . non-continuable-violation?) (nf4c2d core-prim . message-condition?) (nf4cc8 core-prim . make-who-condition) (nf4c42 core-prim . make-warning) (nf4c81 core-prim . make-violation) (nf4d41 core-prim . make-undefined-violation) (nf4d24 core-prim . make-syntax-violation) (nf4c57 core-prim . make-serious-condition) (nf4ce1 core-prim . make-non-continuable-violation) (nf4c29 core-prim . make-message-condition) (nf4d0b core-prim . make-lexical-violation) (nf4cad core-prim . make-irritants-condition) (nf4cf6 core-prim . make-implementation-restriction-violation) (nf4c6c core-prim . make-error) (nf4c96 core-prim . make-assertion-violation) (nf4d0d core-prim . lexical-violation?) (nf4cb1 core-prim . irritants-condition?) (nf4cf8 core-prim . implementation-restriction-violation?) (nf4c6e core-prim . error?) (nf4cce core-prim . condition-who) (nf52a7 core-prim . condition-predicate) (nf4c2f core-prim . condition-message) (nf4cb3 core-prim . condition-irritants) (nf52a6 core-prim . condition-accessor) (nf52a5 core-prim . condition) (nf4c98 core-prim . assertion-violation?) (nf52a4 core-prim . condition?) (nf52a3 core-prim . utf32->string) (nf52a2 core-prim . utf16->string) (nf52a1 core-prim . utf8->string) (nf52a0 core-prim . uint-list->bytevector) (nf529f core-prim . u8-list->bytevector) (nf529e core-prim . string->utf8) (nf529d core-prim . string->utf32) (nf529c core-prim . string->utf16) (nf529b core-prim . sint-list->bytevector) (nf529a core-prim . native-endianness) (nf5299 core-prim . bytevector?) (nf5298 core-prim . bytevector=?) (nf5297 core-prim . bytevector-uint-set!) (nf5296 core-prim . bytevector-uint-ref) (nf5295 core-prim . bytevector-u8-set!) (nf5294 core-prim . bytevector-u8-ref) (nf5293 core-prim . bytevector-u64-set!) (nf5292 core-prim . bytevector-u64-ref) (nf5291 core-prim . bytevector-u64-native-set!) (nf5290 core-prim . bytevector-u64-native-ref) (nf528f core-prim . bytevector-u32-set!) (nf528e core-prim . bytevector-u32-ref) (nf528d core-prim . bytevector-u32-native-set!) (nf528c core-prim . bytevector-u32-native-ref) (nf528b core-prim . bytevector-u16-set!) (nf528a core-prim . bytevector-u16-ref) (nf5289 core-prim . bytevector-u16-native-set!) (nf5288 core-prim . bytevector-u16-native-ref) (nf5287 core-prim . bytevector-sint-set!) (nf5286 core-prim . bytevector-sint-ref) (nf5285 core-prim . bytevector-s8-set!) (nf5284 core-prim . bytevector-s8-ref) (nf5283 core-prim . bytevector-s64-set!) (nf5282 core-prim . bytevector-s64-ref) (nf5281 core-prim . bytevector-s64-native-set!) (nf5280 core-prim . bytevector-s64-native-ref) (nf527f core-prim . bytevector-s32-set!) (nf527e core-prim . bytevector-s32-ref) (nf527d core-prim . bytevector-s32-native-set!) (nf527c core-prim . bytevector-s32-native-ref) (nf527b core-prim . bytevector-s16-set!) (nf527a core-prim . bytevector-s16-ref) (nf5279 core-prim . bytevector-s16-native-set!) (nf5278 core-prim . bytevector-s16-native-ref) (nf5277 core-prim . bytevector-length) (nf5276 core-prim . bytevector-ieee-single-ref) (nf5275 core-prim . bytevector-ieee-single-set!) (nf5274 core-prim . bytevector-ieee-single-native-set!) (nf5273 core-prim . bytevector-ieee-single-native-ref) (nf5272 core-prim . bytevector-ieee-double-set!) (nf5271 core-prim . bytevector-ieee-double-ref) (nf5270 core-prim . bytevector-ieee-double-native-set!) (nf526f core-prim . bytevector-ieee-double-native-ref) (nf526e core-prim . bytevector-fill!) (nf526d core-prim . bytevector-copy!) (nf526c core-prim . bytevector-copy) (nf526b core-prim . bytevector->uint-list) (nf526a core-prim . bytevector->u8-list) (nf5269 core-prim . bytevector->sint-list) (nf4e81 core-prim . no-nans-violation?) (nf4e6c core-prim . no-infinities-violation?) (nf4e7f core-prim . make-no-nans-violation) (nf4e6a core-prim . make-no-infinities-violation) (nf5268 core-prim . real->flonum) (nf5267 core-prim . flzero?) (nf5266 core-prim . fltruncate) (nf5265 core-prim . fltan) (nf5264 core-prim . flsqrt) (nf5263 core-prim . flsin) (nf5262 core-prim . flround) (nf5261 core-prim . flpositive?) (nf5260 core-prim . flonum?) (nf525f core-prim . flodd?) (nf525e core-prim . flnumerator) (nf525d core-prim . flnegative?) (nf525c core-prim . flnan?) (nf525b core-prim . flmod0) (nf525a core-prim . flmod) (nf5259 core-prim . flmin) (nf5258 core-prim . flmax) (nf5257 core-prim . fllog) (nf5256 core-prim . flinteger?) (nf5255 core-prim . flinfinite?) (nf5254 core-prim . flfloor) (nf5253 core-prim . flfinite?) (nf5252 core-prim . flexpt) (nf5251 core-prim . flexp) (nf5250 core-prim . fleven?) (nf524f core-prim . fldiv0-and-mod0) (nf524e core-prim . fldiv0) (nf524d core-prim . fldiv-and-mod) (nf524c core-prim . fldiv) (nf524b core-prim . fldenominator) (nf524a core-prim . flcos) (nf5249 core-prim . flceiling) (nf5248 core-prim . flatan) (nf5247 core-prim . flasin) (nf5246 core-prim . flacos) (nf5245 core-prim . flabs) (nf5244 core-prim . fl>?) (nf5243 core-prim . fl>=?) (nf5242 core-prim . fl=?) (nf5241 core-prim . fl<?) (nf5240 core-prim . fl<=?) (nf523f core-prim . fl/) (nf523e core-prim . fl-) (nf523d core-prim . fl+) (nf523c core-prim . fl*) (nf523b core-prim . fixnum->flonum) (nf523a core-prim . fxzero?) (nf5239 core-prim . fxxor) (nf5238 core-prim . fxrotate-bit-field) (nf5237 core-prim . fxreverse-bit-field) (nf5236 core-prim . fxpositive?) (nf5235 core-prim . fxodd?) (nf5234 core-prim . fxnot) (nf5233 core-prim . fxnegative?) (nf5232 core-prim . fxmod0) (nf5231 core-prim . fxmod) (nf5230 core-prim . fxmin) (nf522f core-prim . fxmax) (nf522e core-prim . fxlength) (nf522d core-prim . fxior) (nf522c core-prim . fxif) (nf522b core-prim . fxfirst-bit-set) (nf522a core-prim . fxeven?) (nf5229 core-prim . fxdiv0-and-mod0) (nf5228 core-prim . fxdiv0) (nf5227 core-prim . fxdiv-and-mod) (nf5226 core-prim . fxdiv) (nf5225 core-prim . fxcopy-bit-field) (nf5224 core-prim . fxcopy-bit) (nf5223 core-prim . fxbit-set?) (nf5222 core-prim . fxbit-field) (nf5221 core-prim . fxbit-count) (nf5220 core-prim . fxarithmetic-shift-right) (nf521f core-prim . fxarithmetic-shift-left) (nf521e core-prim . fxarithmetic-shift) (nf521d core-prim . fxand) (nf521c core-prim . fx>?) (nf521b core-prim . fx>=?) (nf521a core-prim . fx=?) (nf5219 core-prim . fx<?) (nf5218 core-prim . fx<=?) (nf5217 core-prim . fx-/carry) (nf5216 core-prim . fx-) (nf5215 core-prim . fx+/carry) (nf5214 core-prim . fx+) (nf5213 core-prim . fx*/carry) (nf5212 core-prim . fx*) (nf5211 core-prim . greatest-fixnum) (nf5210 core-prim . least-fixnum) (nf520f core-prim . fixnum-width) (nf520e core-prim . fixnum?) (nf520d core-prim . bitwise-rotate-bit-field) (nf520c core-prim . bitwise-reverse-bit-field) (nf520b core-prim . bitwise-length) (nf520a core-prim . bitwise-if) (nf5209 core-prim . bitwise-first-bit-set) (nf5208 core-prim . bitwise-copy-bit-field) (nf5207 core-prim . bitwise-copy-bit) (nf5206 core-prim . bitwise-bit-set?) (nf5205 core-prim . bitwise-bit-field) (nf5204 core-prim . bitwise-bit-count) (nf5203 core-prim . bitwise-xor) (nf5202 core-prim . bitwise-ior) (nf5201 core-prim . bitwise-and) (nf5200 core-prim . bitwise-not) (nf51ff core-prim . bitwise-arithmetic-shift-right) (nf51fe core-prim . bitwise-arithmetic-shift-left) (nf51fd core-prim . bitwise-arithmetic-shift) (nf51fc core-prim . zero?) (nf51fb core-prim . vector?) (nf51fa core-prim . vector-set!) (nf51f9 core-prim . vector-ref) (nf51f8 core-prim . vector-map) (nf51f7 core-prim . vector-length) (nf51f6 core-prim . vector-for-each) (nf51f5 core-prim . vector-fill!) (nf51f4 core-prim . vector->list) (nf51f3 core-prim . vector) (nf51f2 core-prim . values) (nf51f1 core-prim . truncate) (nf51f0 core-prim . tan) (nf51ef core-prim . symbol?) (nf51ee core-prim . symbol=?) (nf51ed core-prim . symbol->string) (nf51ec core-prim . substring) (nf51eb core-prim . string?) (nf51ea core-prim . string>?) (nf51e9 core-prim . string>=?) (nf51e8 core-prim . string=?) (nf51e7 core-prim . string<?) (nf51e6 core-prim . string<=?) (nf51e5 core-prim . string-ref) (nf51e4 core-prim . string-length) (nf51e3 core-prim . string-for-each) (nf51e2 core-prim . string-copy) (nf51e1 core-prim . string-append) (nf51e0 core-prim . string->symbol) (nf51df core-prim . string->number) (nf51de core-prim . string->list) (nf51dd core-prim . string) (nf51dc core-prim . sqrt) (nf51db core-prim . sin) (nf51da core-prim . round) (nf51d9 core-prim . reverse) (nf51d8 core-prim . real?) (nf51d7 core-prim . real-valued?) (nf51d6 core-prim . real-part) (nf51d5 core-prim . rationalize) (nf51d4 core-prim . rational?) (nf51d3 core-prim . rational-valued?) (nf51d2 core-prim . procedure?) (nf51d1 core-prim . positive?) (nf51d0 core-prim . pair?) (nf51cf core-prim . odd?) (nf51ce core-prim . numerator) (nf51cd core-prim . number?) (nf51cc core-prim . number->string) (nf51cb core-prim . null?) (nf51ca core-prim . not) (nf51c9 core-prim . negative?) (nf51c8 core-prim . nan?) (nf51c7 core-prim . min) (nf51c6 core-prim . max) (nf51c5 core-prim . map) (nf51c4 core-prim . make-vector) (nf51c3 core-prim . make-string) (nf51c2 core-prim . make-rectangular) (nf51c1 core-prim . make-polar) (nf51c0 core-prim . magnitude) (nf51bf core-prim . log) (nf51be core-prim . list?) (nf51bd core-prim . list-tail) (nf51bc core-prim . list-ref) (nf51bb core-prim . list->vector) (nf51ba core-prim . list->string) (nf51b9 core-prim . list) (nf51b8 core-prim . length) (nf51b7 core-prim . lcm) (nf51b6 core-prim . integer?) (nf51b5 core-prim . integer-valued?) (nf51b4 core-prim . integer->char) (nf51b3 core-prim . infinite?) (nf51b2 core-prim . inexact?) (nf51b1 core-prim . inexact) (nf51b0 core-prim . imag-part) (nf51af core-prim . gcd) (nf51ae core-prim . for-each) (nf51ad core-prim . floor) (nf51ac core-prim . finite?) (nf51ab core-prim . expt) (nf51aa core-prim . exp) (nf51a9 core-prim . exact?) (nf51a8 core-prim . exact-integer-sqrt) (nf51a7 core-prim . exact) (nf51a6 core-prim . even?) (nf51a5 core-prim . error) (nf51a4 core-prim . eqv?) (nf51a3 core-prim . equal?) (nf51a2 core-prim . eq?) (nf51a1 core-prim . dynamic-wind) (nf51a0 core-prim . div0-and-mod0) (nf519f core-prim . mod0) (nf519e core-prim . div0) (nf519d core-prim . div-and-mod) (nf519c core-prim . mod) (nf519b core-prim . div) (nf519a core-prim . denominator) (nf5199 core-prim . cos) (nf5198 core-prim . cons) (nf5197 core-prim . complex?) (nf5196 core-prim . char?) (nf5195 core-prim . char>?) (nf5194 core-prim . char>=?) (nf5193 core-prim . char=?) (nf5192 core-prim . char<?) (nf5191 core-prim . char<=?) (nf5190 core-prim . char->integer) (nf518f core-prim . ceiling) (nf518e core-prim . call-with-values) (nf518d core-prim . call/cc) (nf518c core-prim . call-with-current-continuation) (nf518b core-prim . cddddr) (nf518a core-prim . cdddar) (nf5189 core-prim . cddadr) (nf5188 core-prim . cddaar) (nf5187 core-prim . cdaddr) (nf5186 core-prim . cdadar) (nf5185 core-prim . cdaadr) (nf5184 core-prim . cdaaar) (nf5183 core-prim . cadddr) (nf5182 core-prim . caddar) (nf5181 core-prim . cadadr) (nf5180 core-prim . cadaar) (nf517f core-prim . caaddr) (nf517e core-prim . caadar) (nf517d core-prim . caaadr) (nf517c core-prim . caaaar) (nf517b core-prim . cdddr) (nf517a core-prim . cddar) (nf5179 core-prim . cdadr) (nf5178 core-prim . cdaar) (nf5177 core-prim . caddr) (nf5176 core-prim . cadar) (nf5175 core-prim . caadr) (nf5174 core-prim . caaar) (nf5173 core-prim . cddr) (nf5172 core-prim . cdar) (nf5171 core-prim . cadr) (nf5170 core-prim . caar) (nf516f core-prim . cdr) (nf516e core-prim . car) (nf516d core-prim . boolean?) (nf516c core-prim . boolean=?) (nf516b core-prim . atan) (nf516a core-prim . assertion-violation) (nf3150 core-prim . assertion-error) (nf5169 core-prim . asin) (nf5168 core-prim . apply) (nf5167 core-prim . append) (nf5166 core-prim . angle) (nf5165 core-prim . acos) (nf5164 core-prim . abs) (nf5163 core-prim . /) (nf5162 core-prim . *) (nf5161 core-prim . -) (nf5160 core-prim . +) (nf515f core-prim . >=) (nf515e core-prim . >) (nf515d core-prim . =) (nf515c core-prim . <=) (nf515b core-prim . <) (nf515a core-prim . library) (nf5159 $core-rtd &no-nans-rtd &no-nans-rcd) (nf5158 $core-rtd &no-infinities-rtd &no-infinities-rcd) (nf5157 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (nf5156 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (nf5155 $core-rtd &i/o-port-rtd &i/o-port-rcd) (nf5154 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (nf5153 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (nf5152 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (nf5151 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (nf5150 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (nf514f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (nf514e $core-rtd &i/o-write-rtd &i/o-write-rcd) (nf514d $core-rtd &i/o-read-rtd &i/o-read-rcd) (nf514c $core-rtd &i/o-rtd &i/o-rcd) (nf514b $core-rtd &undefined-rtd &undefined-rcd) (nf514a $core-rtd &syntax-rtd &syntax-rcd) (nf5149 $core-rtd &lexical-rtd &lexical-rcd) (nf5148 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (nf5147 $core-rtd &non-continuable-rtd &non-continuable-rcd) (nf5146 $core-rtd &who-rtd &who-rcd) (nf5145 $core-rtd &irritants-rtd &irritants-rcd) (nf5144 $core-rtd &assertion-rtd &assertion-rcd) (nf5143 $core-rtd &violation-rtd &violation-rcd) (nf5142 $core-rtd &error-rtd &error-rcd) (nf5141 $core-rtd &serious-rtd &serious-rcd) (nf5140 $core-rtd &warning-rtd &warning-rcd) (nf513f $core-rtd &message-rtd &message-rcd) (nf513e $core-rtd &condition-rtd &condition-rcd) (nf513d macro . define-condition-type) (nf513c macro . define-enumeration) (nf513b macro . define-record-type) (nf513a macro . parent-rtd) (nf5139 macro . nongenerative) (nf5138 macro . opaque) (nf5137 macro . sealed) (nf5136 macro . protocol) (nf5135 macro . parent) (nf5134 macro . immutable) (nf5133 macro . mutable) (nf5132 macro . fields) (nf5131 macro . error-handling-mode) (nf5130 macro . file-options) (nf512f macro . buffer-mode) (nf512e macro . eol-style) (nf512d macro . guard) (nf512c macro . trace-define) (nf512b macro . trace-lambda) (nf512a macro . unsyntax-splicing) (nf5129 macro . unsyntax) (nf5128 macro . unquote-splicing) (nf5127 macro . unquote) (nf5126 macro . _) (nf5125 macro . else) (nf5124 macro . =>) (nf5123 macro . ...) (nf5122 macro . assert) (nf5121 macro . endianness) (nf5120 macro . delay) (nf511f macro . time) (nf511e macro . do) (nf511d macro . cond) (nf511c macro . let*) (nf511b macro . let*-values) (nf511a macro . let-values) (nf5119 macro . identifier-syntax) (nf5118 macro . with-syntax) (nf5117 macro . quasisyntax) (nf5116 macro . quasiquote) (nf5115 macro . syntax-rules) (nf5114 macro . include) (nf5113 macro . define-struct) (nf5112 core-macro . record-constructor-descriptor) (nf5111 core-macro . record-type-descriptor) (nf5110 macro . case) (nf510f macro . parameterize) (nf510e macro . unless) (nf510d macro . when) (nf510c core-macro . or) (nf510b core-macro . and) (nf510a core-macro . if) (nf5109 core-macro . let) (nf5108 core-macro . letrec*) (nf5107 core-macro . letrec) (nf5106 core-macro . type-descriptor) (nf5105 core-macro . case-lambda) (nf5104 core-macro . lambda) (nf5103 core-macro . syntax) (nf5102 core-macro . syntax-case) (nf5101 core-macro . quote) (nf5100 core-macro . foreign-call) (nf50ff letrec-syntax) (nf50fe let-syntax) (nf50fd set!) (nf50fc import) (nf50fb begin) (nf50fa module) (nf50f9 define-syntax) (nf50f8 define)) values values '#f '#f '#f '#f) (nf2c84@nf2ad0@install-library 'nf5442 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . nf5421) (eval-core . nf5420) (set-symbol-value! . nf541f) (symbol-value . nf541e) (gensym . nf541d) (void . nf541c)) '() values values '#f '#f '#f '#f) (nf2c84@nf2ad0@install-library 'nf5443 '(mosh) '() '() '() '() '((set-symbol-value! . nf541f) (symbol-value . nf541e) (regexp? . nf541a) (read-line . nf5419) (ungensym . nf5417) (alist->eq-hash-table . nf5416) (assoc-ref . nf5415) (print . nf5414) (format . nf5413) (host-os . nf5412) (library-path . nf2aaf) (standard-library-path . nf5411) (file-newer? . nf5410) (stat-mtime . nf540f) (digit->integer . nf540b) (call-with-string-input-port . nf540a) (call-with-string-io . nf5409) (string-split . nf5408) (bytevector-for-each . nf5407) (string->regexp . nf5406) (rxmatch . nf5405) (regexp-replace-all . nf5404) (hashtable-for-each . nf5403) (set-current-directory! . nf53fe) (expand-path . nf53fd) (current-directory . nf53fc) (p . nf53bb) (get-timeofday . nf53a2) (get-command-line . nf53a1) (sys-display . nf53a0) (whereis . nf539f) (register . nf539e) (vm-join! . nf539d) (vm-set-value! . nf539c) (vm? . nf539b) (main-vm? . nf539a) (vm-eval . nf5399) (vm-self . nf5398) (vm-start! . nf5397) (make-vm . nf5396) (mutex-try-lock! . nf5395) (mutex-unlock! . nf5394) (mutex-lock! . nf5393) (mutex? . nf5392) (make-mutex . nf5391) (condition-variable-notify-all! . nf5390) (condition-variable-notify! . nf538f) (condition-variable-wait! . nf538e) (make-condition-variable . nf538d) (mosh-executable-path . nf538c) (make-file-options . nf538b) (source-info . nf538a) (make-compiler-instruction . nf5389) (make-instruction . nf5388) (set-source-info! . nf5387) (bignum? . nf5386) (fast-equal? . nf5385) (fasl-read . nf5384) (fasl-write . nf5383) (time-usage . nf5382) (os-constant . nf5381) (time . nf511f) (include . nf5114)) '() values values '#f '#f '#f '#f) (nf2c84@nf2ad0@install-library 'nf5444 '(system) '() '() '() '() '((gensym-prefix-set! . nf5418) (write-to-file . nf540e) (file->list . nf540d) (file->string . nf540c) (mosh-cache-dir . nf289a) (call-process . nf5402) (local-tz-offset . nf5401) (microseconds . nf5400) (directory-list . nf53ff) (expand-path . nf53fd) (%spawn . nf53fb) (%waitpid . nf53fa) (simple-struct-name . nf53f9) (simple-struct-set! . nf53f8) (simple-struct-ref . nf53f7) (make-simple-struct . nf53f6) (simple-struct? . nf53f5) (pointer-ref-c-int64 . nf53f4) (pointer-ref-c-int32 . nf53f3) (pointer-ref-c-int16 . nf53f2) (pointer-ref-c-int8 . nf53f1) (pointer-ref-c-uint64 . nf53f0) (pointer-ref-c-uint32 . nf53ef) (pointer-ref-c-uint16 . nf53ee) (pointer-ref-c-uint8 . nf53ed) (pointer-set-c-uint64! . nf53ec) (pointer-set-c-uint32! . nf53eb) (pointer-set-c-uint16! . nf53ea) (pointer-set-c-uint8! . nf53e9) (pointer-set-c-int64! . nf53e8) (pointer-set-c-int32! . nf53e7) (pointer-set-c-int16! . nf53e6) (pointer-set-c-int8! . nf53e5) (pointer-set-c-pointer! . nf53e4) (pointer-set-c-double! . nf53e3) (pointer-set-c-float! . nf53e2) (pointer-set-c-long-long! . nf53e1) (pointer-set-c-long! . nf53e0) (pointer-set-c-int! . nf53df) (pointer-set-c-short! . nf53de) (pointer-set-c-char! . nf53dd) (pointer-ref-c-pointer . nf53dc) (pointer-ref-c-double . nf53db) (pointer-ref-c-float . nf53da) (pointer-ref-c-unsigned-long-long . nf53d9) (pointer-ref-c-signed-long-long . nf53d8) (pointer-ref-c-unsigned-long . nf53d7) (pointer-ref-c-signed-long . nf53d6) (pointer-ref-c-unsigned-int . nf53d5) (pointer-ref-c-signed-int . nf53d4) (pointer-ref-c-unsigned-short . nf53d3) (pointer-ref-c-signed-short . nf53d2) (pointer-ref-c-unsigned-char . nf53d1) (pointer-ref-c-signed-char . nf53d0) (pointer->integer . nf53cf) (integer->pointer . nf53ce) (pointer? . nf53cd) (shared-errno . nf53cc) (%ffi-free-c-callback-trampoline . nf53cb) (%ffi-make-c-callback-trampoline . nf53ca) (%ffi-free . nf53c9) (%ffi-malloc . nf53c8) (%ffi-supported? . nf53c7) (%ffi-pointer->string . nf53c6) (%ffi-call->string-or-zero . nf53c5) (%ffi-call->double . nf53c4) (%ffi-call->void* . nf53c3) (%ffi-call->void . nf53c2) (%ffi-call->char . nf53c1) (%ffi-call->int . nf53c0) (%ffi-lookup . nf53bf) (%ffi-open . nf53be) (%fork . nf53bd) (%pipe . nf53bc) (open-output-string . nf53ba) (get-output-string . nf53b9) (file-stat-ctime . nf53b8) (file-stat-atime . nf53b7) (file-stat-mtime . nf53b6) (file-size-in-bytes . nf53b5) (file-writable? . nf53b4) (file-executable? . nf53b3) (file-readable? . nf53b2) (file-regular? . nf53b1) (file-symbolic-link? . nf53b0) (file-directory? . nf53af) (create-symbolic-link . nf53ae) (rename-file . nf53ad) (delete-directory . nf53ac) (create-directory . nf53ab) (create-mosh-cache-dir . nf53aa) (get-environment-variables . nf53a9) (current-exception-handler . nf53a8) (get-environment-variable . nf53a7) (join-wraps . nf53a6) (id->real-label . nf53a5) (same-marks? . nf53a4) (same-marks*? . nf53a3) (disasm . nf5380) (make-parameter . nf2898) (socket-port . nf537f) (socket-shutdown . nf537e) (socket-close . nf537d) (socket-send . nf537c) (socket-recv! . nf537b) (socket-recv . nf537a) (make-server-socket . nf5379) (make-client-socket . nf5378) (socket-accept . nf5377) (socket? . nf5376) (parameterize . nf510f)) '() values values '#f '#f '#f '#f)))
(begin (set! nf4f7b@ref (unspecified)) (set! nf4f7d@x* (unspecified)) (set! nf4f7f@add-library-path! (unspecified)) (set! nf4f81@parse-and-add-library-path (unspecified)) (set! nf4f83@for-each-with-index (unspecified)) (set! nf4f85@rpad (unspecified)) (set! nf4f87@condition-printer (unspecified)) (set! nf4f89@record->field-alist (unspecified)) (set! nf4f8b@map-with-index (unspecified)) (set! nf4f8d@repl (unspecified)) (set! nf4f8f@trace-printer (unspecified)) (set! nf4f91@command-line (unspecified)) (set! nf4f93@local-library-path (unspecified)) (set! nf4f95@load/args (unspecified)) (set! nf4f97@load (unspecified)) (set! nf4f99@ironscheme-build (unspecified)) (set! nf4f9b@eval-top-level (unspecified)) (set! nf4f9d@compile-system-libraries (unspecified)) (set! nf4f9f@compile (unspecified)) (set! nf4fa1@compile->closure (unspecified)) (set! nf4fa3@pre-compile-r6rs-file (unspecified)) (set! nf4fa5@load-r6rs-top-level (unspecified)) (set! nf4fa7@load-r6rs-top-level-sexp (unspecified)) (set! nf4fa9@prefix-inc (unspecified)) (set! nf4fab@prefix-inc! (unspecified)) (set! nf4f7b@ref (lambda (nf4fe6@rtd nf4fe7@i nf4fe8@x) (let ((nf4fec@val ((record-accessor nf4fe6@rtd nf4fe7@i) nf4fe8@x))) (if (symbol? nf4fec@val) (ungensym nf4fec@val) nf4fec@val)))) (set! nf50de@nf4f7b@ref nf4f7b@ref) (set! nf4f7d@x* '()) (set! nf50df@nf4f7d@x* nf4f7d@x*) (set! nf4f7f@add-library-path! (lambda (nf4fee@path) (nf2c74@nf2ab0@library-path (append (nf2c74@nf2ab0@library-path) (list nf4fee@path))))) (set! nf50e0@nf4f7f@add-library-path! nf4f7f@add-library-path!) (set! nf4f81@parse-and-add-library-path (lambda (nf4ff0@paths nf4ff1@message) (let ((nf4ff5@separator '#f)) (begin (set! nf4ff5@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((nf4ff6@t nf4ff0@paths)) (if nf4ff6@t ((lambda (nf4ff8@paths) (for-each (lambda (nf4ffa@path) (if (file-exists? nf4ffa@path) (nf4f7f@add-library-path! (expand-path nf4ffa@path)) (format (current-error-port) nf4ff1@message nf4ffa@path))) (string-split nf4ff8@paths nf4ff5@separator))) nf4ff6@t) (void))))))) (set! nf50e1@nf4f81@parse-and-add-library-path nf4f81@parse-and-add-library-path) (set! nf4f83@for-each-with-index (lambda (nf4ffc@proc nf4ffd@lst) (letrec ((nf5000@loop (lambda (nf5002@i nf5003@lst) (if (null? nf5003@lst) (if '#f '#f (void)) (begin (nf4ffc@proc nf5002@i (car nf5003@lst)) (nf5000@loop (+ nf5002@i '1) (cdr nf5003@lst))))))) (nf5000@loop '1 nf4ffd@lst)))) (set! nf50e2@nf4f83@for-each-with-index nf4f83@for-each-with-index) (set! nf4f85@rpad (lambda (nf5006@str nf5007@pad nf5008@n) (let ((nf500c@rest (- nf5008@n (string-length (format '"~a" nf5006@str))))) (let nf5012@loop ((nf500e@rest nf500c@rest) (nf500f@ret (format '"~a" nf5006@str))) (if (<= nf500e@rest '0) nf500f@ret (nf5012@loop (- nf500e@rest '1) (string-append nf500f@ret nf5007@pad))))))) (set! nf50e3@nf4f85@rpad nf4f85@rpad) (set! nf4f87@condition-printer (lambda (nf5014@e nf5015@port) (let ((nf5019@max-condition-len '#f)) (begin (set! nf5019@max-condition-len (apply max (map (lambda (nf502a@c) (string-length (symbol->string (record-type-name (record-rtd nf502a@c))))) (simple-conditions nf5014@e)))) (begin (display '" Condition components:\n" nf5015@port) (nf4f83@for-each-with-index (lambda (nf501a@i nf501b@x) (let ((nf501e@rtd (record-rtd nf501b@x)) (nf501f@fields-alist (nf4f89@record->field-alist nf501b@x))) (begin (format nf5015@port '" ~d. ~a" nf501a@i (nf4f85@rpad (symbol->string (record-type-name nf501e@rtd)) '" " nf5019@max-condition-len)) (if (null? nf501f@fields-alist) (newline nf5015@port) (void)) (let nf5026@loop ((nf5022@first '#t) (nf5023@fields-alist nf501f@fields-alist)) (if (null? nf5023@fields-alist) '() (let ((nf5028@field (car nf5023@fields-alist))) (begin (if (not nf5022@first) (display (nf4f85@rpad '"" '" " (+ '4 nf5019@max-condition-len)) nf5015@port) (void)) (display '"       " nf5015@port) (display (car nf5028@field) nf5015@port) (display '": " nf5015@port) (write (cdr nf5028@field) nf5015@port) (newline nf5015@port) (nf5026@loop '#f (cdr nf5023@fields-alist))))))))) (simple-conditions nf5014@e))))))) (set! nf50e4@nf4f87@condition-printer nf4f87@condition-printer) (set! nf4f89@record->field-alist (lambda (nf502c@r) (let ((nf502f@ref '#f)) (begin (set! nf502f@ref (lambda (nf503a@rtd nf503b@i nf503c@x) (let ((nf5040@val ((record-accessor nf503a@rtd nf503b@i) nf503c@x))) (if (symbol? nf5040@val) (ungensym nf5040@val) nf5040@val)))) (let nf5034@loop ((nf5030@ret '()) (nf5031@rtd (record-rtd nf502c@r))) (if nf5031@rtd (nf5034@loop (append nf5030@ret (nf4f8b@map-with-index (lambda (nf5036@i nf5037@field) (cons nf5037@field (nf502f@ref nf5031@rtd nf5036@i nf502c@r))) (vector->list (record-type-field-names nf5031@rtd)))) (record-type-parent nf5031@rtd)) nf5030@ret)))))) (set! nf50e5@nf4f89@record->field-alist nf4f89@record->field-alist) (set! nf4f8b@map-with-index (lambda (nf5042@proc nf5043@lst) (let nf504c@loop ((nf5046@i '0) (nf5047@lst nf5043@lst) (nf5048@ret '())) (if (null? nf5047@lst) (reverse nf5048@ret) (nf504c@loop (+ nf5046@i '1) (cdr nf5047@lst) (cons (nf5042@proc nf5046@i (car nf5047@lst)) nf5048@ret)))))) (set! nf50e6@nf4f8b@map-with-index nf4f8b@map-with-index) (set! nf4f8d@repl (lambda nf504e@x (let ((nf5051@rec '#f)) (begin (set! nf5051@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (nf5054@nf5052) (lambda () (with-exception-handler (lambda (nf5056@e) ((call/cc (lambda (nf5058@nf5053) (nf5054@nf5052 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? nf5056@e) (nf4f87@condition-printer nf5056@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" nf5056@e))) (nf5058@nf5053 (lambda () (raise-continuable nf5056@e)))))))))) (lambda () (let nf505e@loop ((nf505a@line (get-line (current-input-port))) (nf505b@accum '"")) (let ((nf5061@parentheses-ok? '#f) (nf5063@eval-string-print '#f)) (begin (set! nf5061@parentheses-ok? (lambda (nf5068@text) (let nf5070@loop ((nf506a@chars (string->list nf5068@text)) (nf506b@p0 '0) (nf506c@p1 '0)) (if (null? nf506a@chars) (= '0 nf506b@p0 nf506c@p1) (let ((nf5072@t (car nf506a@chars))) (if (memv nf5072@t '(#\()) (nf5070@loop (cdr nf506a@chars) (+ nf506b@p0 '1) nf506c@p1) (if (memv nf5072@t '(#\))) (nf5070@loop (cdr nf506a@chars) (- nf506b@p0 '1) nf506c@p1) (if (memv nf5072@t '(#\[)) (nf5070@loop (cdr nf506a@chars) nf506b@p0 (+ nf506c@p1 '1)) (if (memv nf5072@t '(#\])) (nf5070@loop (cdr nf506a@chars) nf506b@p0 (- nf506c@p1 '1)) (nf5070@loop (cdr nf506a@chars) nf506b@p0 nf506c@p1)))))))))) (set! nf5063@eval-string-print (lambda (nf5066@text) (if (not (or (string=? '"\n" nf5066@text) (= '0 (string-length nf5066@text)))) (write (nf4f9b@eval-top-level (call-with-port (open-string-input-port nf5066@text) read))) (void)))) (if (eof-object? nf505a@line) (begin (nf5063@eval-string-print nf505b@accum) (exit)) (let ((nf5064@current (string-append nf505b@accum nf505a@line))) (if (nf5061@parentheses-ok? nf5064@current) (nf5063@eval-string-print nf5064@current) (nf505e@loop (get-line (current-input-port)) nf5064@current))))))))))))) (newline) (nf5051@rec)))) (nf5051@rec))))) (set! nf50e7@nf4f8d@repl nf4f8d@repl) (set! nf4f8f@trace-printer (nf29ba@nf2899@make-parameter write)) (set! nf50e8@nf4f8f@trace-printer nf4f8f@trace-printer) (set! nf4f91@command-line (nf29ba@nf2899@make-parameter (get-command-line))) (set! nf50e9@nf4f91@command-line nf4f91@command-line) (set! nf4f93@local-library-path (lambda (nf5074@filename) (nf2c74@nf2ab0@library-path))) (set! nf50ea@nf4f93@local-library-path nf4f93@local-library-path) (set! nf4f95@load/args (lambda (nf5076@filename . nf5078@args) (begin (apply nf4fa5@load-r6rs-top-level nf5076@filename 'load nf5078@args) (void)))) (set! nf50eb@nf4f95@load/args nf4f95@load/args) (set! nf4f97@load (lambda (nf507a@filename) (begin (apply nf4fa5@load-r6rs-top-level nf507a@filename 'load (nf4f91@command-line)) (void)))) (set! nf50ec@nf4f97@load nf4f97@load) (set! nf4f99@ironscheme-build (lambda () (nf4f97@load '"ironscheme-buildscript.ss"))) (set! nf50ed@nf4f99@ironscheme-build nf4f99@ironscheme-build) (set! nf4f9b@eval-top-level (lambda (nf507c@x) (nf4ba1@nf3137@eval nf507c@x (nf4bb8@nf3165@interaction-environment)))) (set! nf50ee@nf4f9b@eval-top-level nf4f9b@eval-top-level) (set! nf4f9d@compile-system-libraries (lambda () (nf4f9b@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! nf50ef@nf4f9d@compile-system-libraries nf4f9d@compile-system-libraries) (set! nf4f9f@compile (lambda (nf507e@filename) (nf4fa5@load-r6rs-top-level nf507e@filename 'compile))) (set! nf50f0@nf4f9f@compile nf4f9f@compile) (set! nf4fa1@compile->closure (lambda (nf5080@filename) (nf4fa5@load-r6rs-top-level nf5080@filename 'closure))) (set! nf50f1@nf4fa1@compile->closure nf4fa1@compile->closure) (set! nf4fa3@pre-compile-r6rs-file (lambda (nf5082@filename) (nf4fa5@load-r6rs-top-level nf5082@filename 'compile))) (set! nf50f2@nf4fa3@pre-compile-r6rs-file nf4fa3@pre-compile-r6rs-file) (set! nf4fa5@load-r6rs-top-level (lambda (nf5084@filename nf5085@how . nf5088@args) (begin (nf2c74@nf2ab0@library-path (nf4f93@local-library-path nf5084@filename)) (let ((nf508a@x* (with-input-from-file nf5084@filename (lambda () (let nf508c@f () (let ((nf508e@x (nf29ad@nf287f@read-annotated))) (if (eof-object? nf508e@x) '() (cons nf508e@x (nf508c@f))))))))) (let ((nf5090@t nf5085@how)) (if (memv nf5090@t '(closure)) (nf4bb7@nf3163@pre-compile-r6rs-top-level nf508a@x*) (if (memv nf5090@t '(load)) (begin (nf4f91@command-line (cons nf5084@filename (car nf5088@args))) (nf29bb@nf289b@mosh-cache-dir (create-mosh-cache-dir)) (if (nf29bb@nf289b@mosh-cache-dir) (gensym-prefix-set! (nf4fab@prefix-inc! (string-append (nf29bb@nf289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nf5092@file) ((call/cc (lambda (nf5096@nf5094) (lambda () (with-exception-handler (lambda (nf5098@c) ((call/cc (lambda (nf509a@nf5095) (nf5096@nf5094 (lambda () (if '#t '#t (nf509a@nf5095 (lambda () (raise-continuable nf5098@c)))))))))) (lambda () (delete-file (string-append (nf29bb@nf289b@mosh-cache-dir) '"/" nf5092@file))))))))) (directory-list (nf29bb@nf289b@mosh-cache-dir))) (void)) (let ((nf509c@compiled (nf4bb6@nf3161@compile-r6rs-top-level nf508a@x*))) (begin (if (and (nf29bb@nf289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nf2c78@nf2ab8@serialize-all nf29b5@nf288f@serialize-library nf2a11@nf29ca@compile-core-expr) (void)) (nf509c@compiled)))) (if (memv nf5090@t '(compile)) (begin (nf4bb6@nf3161@compile-r6rs-top-level nf508a@x*) (nf2c78@nf2ab8@serialize-all nf29b5@nf288f@serialize-library nf2a11@nf29ca@compile-core-expr)) (if '#f '#f (void)))))))))) (set! nf50f3@nf4fa5@load-r6rs-top-level nf4fa5@load-r6rs-top-level) (set! nf4fa7@load-r6rs-top-level-sexp (lambda (nf509e@import-spec nf509f@thunk) (let ((nf50aa@nf50a3 nf2c74@nf2ab0@library-path) (nf50ab@nf50a5 nf29bb@nf289b@mosh-cache-dir) (nf50ac@nf50a7 (nf4f93@local-library-path '"")) (nf50ad@nf50a9 (create-mosh-cache-dir))) (let ((nf50b2@swap (lambda () (begin (let ((nf50b4@t (nf50aa@nf50a3))) (begin (nf50aa@nf50a3 nf50ac@nf50a7) (set! nf50ac@nf50a7 nf50b4@t))) (let ((nf50b6@t (nf50ab@nf50a5))) (begin (nf50ab@nf50a5 nf50ad@nf50a9) (set! nf50ad@nf50a9 nf50b6@t))))))) (dynamic-wind nf50b2@swap (lambda () (begin (if (nf29bb@nf289b@mosh-cache-dir) (gensym-prefix-set! (nf4fab@prefix-inc! (string-append (nf29bb@nf289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((nf50bc@nf50b9 nf4f91@command-line) (nf50bd@nf50bb '())) (let ((nf50c0@swap (lambda () (let ((nf50c2@t (nf50bc@nf50b9))) (begin (nf50bc@nf50b9 nf50bd@nf50bb) (set! nf50bd@nf50bb nf50c2@t)))))) (dynamic-wind nf50c0@swap (lambda () ((nf4bb6@nf3161@compile-r6rs-top-level (list (cons 'import nf509e@import-spec) (list nf509f@thunk))))) nf50c0@swap))))) nf50b2@swap))))) (set! nf50f4@nf4fa7@load-r6rs-top-level-sexp nf4fa7@load-r6rs-top-level-sexp) (set! nf4fa9@prefix-inc (lambda (nf50c4@prefix-string) (let ((nf50c6@prefix (symbol->string nf50c4@prefix-string))) (let ((nf50c8@len (string-length nf50c6@prefix))) (let nf50d0@loop ((nf50ca@i (- nf50c8@len '1)) (nf50cb@carry? '#t) (nf50cc@accum '())) (if (< nf50ca@i '0) (string->symbol (list->string (if nf50cb@carry? (cons '#\a nf50cc@accum) nf50cc@accum))) (if nf50cb@carry? (let ((nf50d2@next-integer (+ '1 (char->integer (string-ref nf50c6@prefix nf50ca@i))))) (if (= nf50d2@next-integer '123) (nf50d0@loop (- nf50ca@i '1) '#f (cons '#\A nf50cc@accum)) (if (= nf50d2@next-integer '91) (nf50d0@loop (- nf50ca@i '1) '#t (cons '#\a nf50cc@accum)) (nf50d0@loop (- nf50ca@i '1) '#f (cons (integer->char nf50d2@next-integer) nf50cc@accum))))) (nf50d0@loop (- nf50ca@i '1) '#f (cons (string-ref nf50c6@prefix nf50ca@i) nf50cc@accum))))))))) (set! nf50f5@nf4fa9@prefix-inc nf4fa9@prefix-inc) (set! nf4fab@prefix-inc! (lambda (nf50d4@file) (begin (if (not (file-exists? nf50d4@file)) (call-with-output-file nf50d4@file (lambda (nf50d6@port) (write 'd nf50d6@port))) (void)) (let ((nf50d8@prefix (call-with-input-file nf50d4@file read))) (let ((nf50da@next-prefix (nf4fa9@prefix-inc nf50d8@prefix))) (begin (call-with-port (open-file-output-port nf50d4@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (nf50dc@port) (write nf50da@next-prefix nf50dc@port))) nf50d8@prefix)))))) (set! nf50f6@nf4fab@prefix-inc! nf4fab@prefix-inc!) (begin (nf2c79@nf2aba@current-precompiled-library-loader nf29b6@nf2891@load-serialized-library) (set-symbol-value! 'load nf4f97@load) (set-symbol-value! 'pre-compile-r6rs-file nf4fa3@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs nf4f9b@eval-top-level) (set-symbol-value! 'int-env-syms nf4b98@nf3125@interaction-environment-symbols) (set-symbol-value! 'expanded2core nf2a10@nf29c8@expanded->core) (set-symbol-value! 'trace-printer nf4f8f@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (nf4fac@c) (condition (nf4ed8@nf4ce2@make-non-continuable-violation) (nf4ece@nf4cc9@make-who-condition 'raise) (nf4e92@nf4c2a@make-message-condition '"returned from non-continuable exception") (nf4ec4@nf4cae@make-irritants-condition (list nf4fac@c))))) (nf4f81@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (nf4f81@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (nf4f7f@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (nf4f7f@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (nf4f7f@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((nf4fae@prefix (lambda (nf4fb0@ext nf4fb1@ls) (append (map (lambda (nf4fb4@x) (string-append nf4fb0@ext nf4fb4@x)) nf4fb1@ls) nf4fb1@ls)))) (nf2c75@nf2ab2@library-extensions (nf4fae@prefix '".mosh" (nf2c75@nf2ab2@library-extensions)))) (current-exception-handler (lambda (nf4fb6@c) (if (condition? nf4fb6@c) (nf4f87@condition-printer nf4fb6@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" nf4fb6@c)))) (if ((call/cc (lambda (nf4fba@nf4fb8) (lambda () (with-exception-handler (lambda (nf4fbc@c) ((call/cc (lambda (nf4fbe@nf4fb9) (nf4fba@nf4fb8 (lambda () (if '#t '#f (nf4fbe@nf4fb9 (lambda () (raise-continuable nf4fbc@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (nf4fa7@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (nf4f91@command-line)) (let ((nf4fc8@nf4fc1 nf4f91@command-line) (nf4fc9@nf4fc3 nf29bb@nf289b@mosh-cache-dir) (nf4fca@nf4fc5 '()) (nf4fcb@nf4fc7 (create-mosh-cache-dir))) (let ((nf4fd0@swap (lambda () (begin (let ((nf4fd2@t (nf4fc8@nf4fc1))) (begin (nf4fc8@nf4fc1 nf4fca@nf4fc5) (set! nf4fca@nf4fc5 nf4fd2@t))) (let ((nf4fd4@t (nf4fc9@nf4fc3))) (begin (nf4fc9@nf4fc3 nf4fcb@nf4fc7) (set! nf4fcb@nf4fc7 nf4fd4@t))))))) (dynamic-wind nf4fd0@swap (lambda () (begin (if (nf29bb@nf289b@mosh-cache-dir) (gensym-prefix-set! (nf4fab@prefix-inc! (string-append (nf29bb@nf289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (nf4f8d@repl))) nf4fd0@swap))) (begin (nf2c74@nf2ab0@library-path (nf4f93@local-library-path (car (nf4f91@command-line)))) (set! nf4f7d@x* (with-input-from-file (car (nf4f91@command-line)) (lambda () (let nf4fd6@f () (let ((nf4fd8@x (nf29ad@nf287f@read-annotated))) (if (eof-object? nf4fd8@x) '() (cons nf4fd8@x (nf4fd6@f)))))))) (nf4f91@command-line (cons (car (nf4f91@command-line)) (cdr (nf4f91@command-line)))) (nf29bb@nf289b@mosh-cache-dir (create-mosh-cache-dir)) (if (nf29bb@nf289b@mosh-cache-dir) (gensym-prefix-set! (nf4fab@prefix-inc! (string-append (nf29bb@nf289b@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nf4fda@file) ((call/cc (lambda (nf4fde@nf4fdc) (lambda () (with-exception-handler (lambda (nf4fe0@c) ((call/cc (lambda (nf4fe2@nf4fdd) (nf4fde@nf4fdc (lambda () (if '#t '#t (nf4fe2@nf4fdd (lambda () (raise-continuable nf4fe0@c)))))))))) (lambda () (delete-file (string-append (nf29bb@nf289b@mosh-cache-dir) '"/" nf4fda@file))))))))) (directory-list (nf29bb@nf289b@mosh-cache-dir))) (void)) (let ((nf4fe4@compiled (nf4bb6@nf3161@compile-r6rs-top-level nf4f7d@x*))) (begin (if (and (nf29bb@nf289b@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nf2c78@nf2ab8@serialize-all nf29b5@nf288f@serialize-library nf2a11@nf29ca@compile-core-expr) (void)) (nf4fe4@compiled))))))))
