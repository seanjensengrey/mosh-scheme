;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (h28a3@read-annotated h28a5@annotation-stripped h28a7@annotation? h28a9@annotation-source h28ab@annotation-expression h28ad@scm->fasl h28af@fasl-save h28b1@fasl-load h28b3@serialize-library h28b5@load-serialized-library h28b7@make-record-printer h28b9@compile-core h28bb@read-library-source-file h28bd@make-parameter h2953@file-options-spec) (begin (set! h28a3@read-annotated read) (set! h28a5@annotation-stripped (lambda (h2954@x) (h28ab@annotation-expression h2954@x))) (set! h28a7@annotation? (lambda (h2956@x) (source-info h2956@x))) (set! h28a9@annotation-source (lambda (h2958@x) (source-info h2958@x))) (set! h28ab@annotation-expression (lambda (h295a@x) (if (pair? h295a@x) (cons (car h295a@x) (cdr h295a@x)) (display '"line:46\n")))) (set! h28ad@scm->fasl (lambda (h295c@filename) (string-append h295c@filename '".mosh-fasl"))) (set! h28af@fasl-save (lambda (h295e@filename h295f@obj) (call-with-port (open-file-output-port h295e@filename) (lambda (h2962@port) ((symbol-value 'fasl-write!) h295f@obj h2962@port))))) (set! h28b1@fasl-load (lambda (h2964@filename) (call-with-port (open-file-input-port h2964@filename) (symbol-value 'fasl-read!)))) (set! h28b3@serialize-library (lambda (h2966@filename h2967@obj) (begin (format '#t '"serialize-library ~a\n..." h2966@filename) ((lambda (h296a@expanded2core) ((lambda (h296c@compile) ((lambda (h296e@code) ((lambda (h2970@pivot) ((lambda (h2972@visit) ((lambda () (begin (set-car! h2970@pivot h2972@visit) ((lambda (h2974@pivot) ((lambda (h2976@invoke) ((lambda () (set-car! h2974@pivot h2976@invoke)))) (h296c@compile (h296a@expanded2core (car h2974@pivot))))) (cdr h2970@pivot)))))) (h296c@compile (h296a@expanded2core (car h2970@pivot))))) (cddddr (cddddr h296e@code)))) h2967@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (h2978@fasl-file) (begin (if (file-exists? h2978@fasl-file) (delete-file h2978@fasl-file) (void)) ((call/cc (lambda (h297c@h297a) (lambda () (with-exception-handler (lambda (h297e@c) ((call/cc (lambda (h2980@h297b) (h297c@h297a (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " h2966@filename) (if (file-exists? h2978@fasl-file) (delete-file h2978@fasl-file) (void)) '#f) (h2980@h297b (lambda () (raise-continuable h297e@c)))))))))) (lambda () (begin (h28af@fasl-save h2978@fasl-file h2967@obj) (display '"OK\n")))))))))) (h28ad@scm->fasl h2966@filename))))) (set! h28b5@load-serialized-library (lambda (h2982@filename h2983@obj) ((lambda (h2986@fasl-file) (if (and (file-exists? h2986@fasl-file) ((symbol-value 'file-newer?) h2986@fasl-file h2982@filename)) ((lambda (h2988@expanded2core) ((lambda (h298a@eval-compiled-core) ((lambda (h298c@code) ((lambda (h298e@pivot) ((lambda (h2990@visit) ((lambda (h2992@visit-proc) ((lambda () (begin (set-car! h298e@pivot h2992@visit-proc) ((lambda (h2994@pivot) ((lambda (h2996@invoke) ((lambda () (begin (set-car! h2994@pivot (lambda () (h298a@eval-compiled-core h2996@invoke))) (apply h2983@obj h298c@code))))) (car h2994@pivot))) (cdr h298e@pivot)) '#t)))) (lambda () (h298a@eval-compiled-core h2990@visit)))) (car h298e@pivot))) (cddddr (cddddr h298c@code)))) (h28b1@fasl-load h2986@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (h28ad@scm->fasl h2982@filename)))) (set! h28b7@make-record-printer (lambda (h2998@name h2999@printer) (lambda h299c@x (begin (display '"record printer") (for-each display h299c@x))))) (set! h28b9@compile-core (lambda h299e@x (apply error 'comile-core '"not implementated" h299e@x))) (set! h28bb@read-library-source-file (lambda (h29a0@file-name) (with-input-from-file h29a0@file-name h28a3@read-annotated))) (set! h28bd@make-parameter (lambda h29b0 ((lambda (h29b1) (if (= h29b1 '1) (apply (lambda (h29a2@x) (h28bd@make-parameter h29a2@x (lambda (h29a4@x) h29a4@x))) h29b0) (if (= h29b1 '2) (apply (lambda (h29a6@x h29a7@fender) ((lambda (h29aa@x) (lambda h29ae ((lambda (h29af) (if (= h29af '0) (apply (lambda () h29aa@x) h29ae) (if (= h29af '1) (apply (lambda (h29ac@v) (set! h29aa@x (h29a7@fender h29ac@v))) h29ae) (error 'apply '"invalid arg count")))) (length h29ae)))) (h29a7@fender h29a6@x))) h29b0) (error 'apply '"invalid arg count")))) (length h29b0)))) (set! h2953@file-options-spec (lambda (h29b2@x) h29b2@x)) (begin (set! h29c2@h2953@file-options-spec h2953@file-options-spec) (set! h29c1@h28bd@make-parameter h28bd@make-parameter) (set! h29c0@h28bb@read-library-source-file h28bb@read-library-source-file) (set! h29bf@h28b9@compile-core h28b9@compile-core) (set! h29be@h28b7@make-record-printer h28b7@make-record-printer) (set! h29bd@h28b5@load-serialized-library h28b5@load-serialized-library) (set! h29bc@h28b3@serialize-library h28b3@serialize-library) (set! h29bb@h28b1@fasl-load h28b1@fasl-load) (set! h29ba@h28af@fasl-save h28af@fasl-save) (set! h29b9@h28ad@scm->fasl h28ad@scm->fasl) (set! h29b8@h28ab@annotation-expression h28ab@annotation-expression) (set! h29b7@h28a9@annotation-source h28a9@annotation-source) (set! h29b6@h28a7@annotation? h28a7@annotation?) (set! h29b5@h28a5@annotation-stripped h28a5@annotation-stripped) (set! h29b4@h28a3@read-annotated h28a3@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h29c8@current-primitive-locations h29ca@mutable? h29cc@rewriter h29ce@expanded->core h29d0@compile-core-expr h29d2@pretty-print h29d4@compile-core-expr-to-port) (begin (set! h29c8@current-primitive-locations (h29c1@h28bd@make-parameter (lambda (h29d5@x) '#f) (lambda (h29d7@p) h29d7@p))) (set! h29ca@mutable? (lambda (h29d9@x) (or (pair? h29d9@x) (vector? h29d9@x) (hashtable? h29d9@x)))) (set! h29cc@rewriter (lambda (h29db@quote-hack?) ((lambda (h29de@f) (begin (set! h29de@f (lambda (h29df@x) (if (pair? h29df@x) ((lambda (h29e1@t) (if (memv h29e1@t '(quote)) (if (and h29db@quote-hack? (h29ca@mutable? (cadr h29df@x))) ((lambda (h29e3@g) (begin (set-symbol-value! h29e3@g (cadr h29df@x)) h29e3@g)) (gensym)) h29df@x) (if (memv h29e1@t '(case-lambda)) (cons 'case-lambda (map (lambda (h29e5@x) (cons (car h29e5@x) (map h29de@f (cdr h29e5@x)))) (cdr h29df@x))) (if (memv h29e1@t '(lambda)) (cons* 'lambda (cadr h29df@x) (map h29de@f (cddr h29df@x))) (if (memv h29e1@t '(letrec)) ((lambda (h29e7@bindings h29e8@body*) ((lambda (h29eb@lhs* h29ec@rhs*) (cons* 'letrec (map list h29eb@lhs* (map h29de@f h29ec@rhs*)) (map h29de@f h29e8@body*))) (map car h29e7@bindings) (map cadr h29e7@bindings))) (cadr h29df@x) (cddr h29df@x)) (if (memv h29e1@t '(letrec*)) ((lambda (h29ef@bindings h29f0@body*) ((lambda (h29f3@lhs* h29f4@rhs*) (cons* 'letrec* (map list h29f3@lhs* (map h29de@f h29f4@rhs*)) (map h29de@f h29f0@body*))) (map car h29ef@bindings) (map cadr h29ef@bindings))) (cadr h29df@x) (cddr h29df@x)) (if (memv h29e1@t '(library-letrec*)) ((lambda (h29f7@name h29f8@x) ((lambda (h29fb@bindings h29fc@body*) ((lambda (h29ff@lhs* h2a00@lhs** h2a01@rhs*) (cons* 'library-letrec* h29f7@name (map list h29ff@lhs* h2a00@lhs** (map h29de@f h2a01@rhs*)) (map h29de@f h29fc@body*))) (map car h29fb@bindings) (map cadr h29fb@bindings) (map caddr h29fb@bindings))) (cadr h29f8@x) (cddr h29f8@x))) (cadr h29df@x) (cdr h29df@x)) (if (memv h29e1@t '(begin)) (cons 'begin (map h29de@f (cdr h29df@x))) (if (memv h29e1@t '(set!)) (list 'set! (cadr h29df@x) (h29de@f (caddr h29df@x))) (if (memv h29e1@t '(primitive)) ((lambda (h2a05@op) ((lambda (h2a07@t) (if h2a07@t ((lambda (h2a09@loc) h2a09@loc) h2a07@t) h2a05@op)) ((h29c8@current-primitive-locations) h2a05@op))) (cadr h29df@x)) (if (memv h29e1@t '(define)) h29df@x (if (list? h29df@x) (map h29de@f h29df@x) (error 'rewrite '"invalid form ~s ~s" h29df@x (list? h29df@x)))))))))))))) (car h29df@x)) h29df@x))) h29de@f)) '#f))) (set! h29ce@expanded->core (lambda (h2a0b@x) ((h29cc@rewriter '#f) h2a0b@x))) (set! h29d0@compile-core-expr (lambda (h2a0d@x) ((h29cc@rewriter '#f) h2a0d@x))) (set! h29d2@pretty-print write) (set! h29d4@compile-core-expr-to-port (lambda (h2a0f@x h2a10@p) (h29d2@pretty-print ((h29cc@rewriter '#f) h2a0f@x) h2a10@p))) (begin (set! h2a19@h29d4@compile-core-expr-to-port h29d4@compile-core-expr-to-port) (set! h2a18@h29d2@pretty-print h29d2@pretty-print) (set! h2a17@h29d0@compile-core-expr h29d0@compile-core-expr) (set! h2a16@h29ce@expanded->core h29ce@expanded->core) (set! h2a15@h29cc@rewriter h29cc@rewriter) (set! h2a14@h29ca@mutable? h29ca@mutable?) (set! h2a13@h29c8@current-primitive-locations h29c8@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (h2a68@make-collection h2a6a@current-library-collection h2a6c@rp h2a6e@make-library h2a70@library? h2a72@library-id h2a74@set-library-id! h2a76@library-name h2a78@set-library-name! h2a7a@library-version h2a7c@set-library-version! h2a7e@library-imp* h2a80@set-library-imp*! h2a82@library-vis* h2a84@set-library-vis*! h2a86@library-inv* h2a88@set-library-inv*! h2a8a@library-subst h2a8c@set-library-subst! h2a8e@library-env h2a90@set-library-env! h2a92@library-visit-state h2a94@set-library-visit-state! h2a96@library-invoke-state h2a98@set-library-invoke-state! h2a9a@library-visit-code h2a9c@set-library-visit-code! h2a9e@library-invoke-code h2aa0@set-library-invoke-code! h2aa2@library-visible? h2aa4@set-library-visible?! h2aa6@library-source-file-name h2aa8@set-library-source-file-name! h2aaa@dummy h2aac@find-dependencies h2aae@find-library-by h2ab0@library-path h2ab2@library-extensions h2ab4@library-name->file-name h2ab6@file-locator h2ab8@serialize-all h2aba@current-precompiled-library-loader h2abc@try-load-from-file h2abe@library-loader h2ac0@current-library-expander h2ac2@external-pending-libraries h2ac4@find-external-library h2ac6@find-library-by-name h2ac8@library-exists? h2aca@find-library-by-spec/die h2acc@label->binding-table h2ace@install-library-record h2ad0@install-library h2ad2@imported-label->binding h2ad4@invoke-library h2ad6@visit-library h2ad8@invoke-library-by-spec h2ada@installed-libraries h2adc@library-spec) (begin (set! h2a68@make-collection (lambda () ((lambda (h2add@set) ((lambda (h2ae0@set-cons) (begin (set! h2ae0@set-cons (lambda (h2ae5@x h2ae6@ls) (if (memq h2ae5@x h2ae6@ls) h2ae6@ls (cons h2ae5@x h2ae6@ls)))) (lambda h2ae3 ((lambda (h2ae4) (if (= h2ae4 '0) (apply (lambda () h2add@set) h2ae3) (if (= h2ae4 '1) (apply (lambda (h2ae1@x) (set! h2add@set (h2ae0@set-cons h2ae1@x h2add@set))) h2ae3) (error 'apply '"invalid arg count")))) (length h2ae3))))) '#f)) '()))) (set! h2a6a@current-library-collection (h29c1@h28bd@make-parameter (h2a68@make-collection) (lambda (h2ae9@x) (begin (if (not (procedure? h2ae9@x)) (assertion-violation 'current-library-collection '"not a procedure" h2ae9@x) (void)) h2ae9@x)))) (set! h2a6c@rp (h29be@h28b7@make-record-printer 'library (lambda (h2aeb@x h2aec@p h2aed@wr) (begin (if (not (h2a70@library? h2aeb@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (h2a7a@library-version h2aeb@x)) (h2a76@library-name h2aeb@x) (append (h2a76@library-name h2aeb@x) (list (h2a7a@library-version h2aeb@x))))) h2aec@p))))) (set! h2a6e@make-library (lambda h2af1@args ((lambda (h2af3@ret) (begin ((letrec ((h2af5@loop (lambda (h2af7@i h2af8@args) (if (= h2af7@i '15) '() (if (null? h2af8@args) (begin (simple-struct-set! h2af3@ret h2af7@i 'uninitialized) (h2af5@loop (+ h2af7@i '1) h2af8@args)) (begin (simple-struct-set! h2af3@ret h2af7@i (car h2af8@args)) (h2af5@loop (+ h2af7@i '1) (cdr h2af8@args)))))))) h2af5@loop) '0 h2af1@args) h2af3@ret)) (make-simple-struct 'library '15)))) (set! h2a70@library? (lambda (h2afb@x) (and (simple-struct? h2afb@x) (eq? (simple-struct-name h2afb@x) 'library)))) (set! h2a72@library-id (lambda (h2afd@x) (simple-struct-ref h2afd@x '0))) (set! h2a74@set-library-id! (lambda (h2aff@x h2b00@val) (simple-struct-set! h2aff@x '0 h2b00@val))) (set! h2a76@library-name (lambda (h2b03@x) (simple-struct-ref h2b03@x '1))) (set! h2a78@set-library-name! (lambda (h2b05@x h2b06@val) (simple-struct-set! h2b05@x '1 h2b06@val))) (set! h2a7a@library-version (lambda (h2b09@x) (simple-struct-ref h2b09@x '2))) (set! h2a7c@set-library-version! (lambda (h2b0b@x h2b0c@val) (simple-struct-set! h2b0b@x '2 h2b0c@val))) (set! h2a7e@library-imp* (lambda (h2b0f@x) (simple-struct-ref h2b0f@x '3))) (set! h2a80@set-library-imp*! (lambda (h2b11@x h2b12@val) (simple-struct-set! h2b11@x '3 h2b12@val))) (set! h2a82@library-vis* (lambda (h2b15@x) (simple-struct-ref h2b15@x '4))) (set! h2a84@set-library-vis*! (lambda (h2b17@x h2b18@val) (simple-struct-set! h2b17@x '4 h2b18@val))) (set! h2a86@library-inv* (lambda (h2b1b@x) (simple-struct-ref h2b1b@x '5))) (set! h2a88@set-library-inv*! (lambda (h2b1d@x h2b1e@val) (simple-struct-set! h2b1d@x '5 h2b1e@val))) (set! h2a8a@library-subst (lambda (h2b21@x) (simple-struct-ref h2b21@x '6))) (set! h2a8c@set-library-subst! (lambda (h2b23@x h2b24@val) (simple-struct-set! h2b23@x '6 h2b24@val))) (set! h2a8e@library-env (lambda (h2b27@x) (simple-struct-ref h2b27@x '7))) (set! h2a90@set-library-env! (lambda (h2b29@x h2b2a@val) (simple-struct-set! h2b29@x '7 h2b2a@val))) (set! h2a92@library-visit-state (lambda (h2b2d@x) (simple-struct-ref h2b2d@x '8))) (set! h2a94@set-library-visit-state! (lambda (h2b2f@x h2b30@val) (simple-struct-set! h2b2f@x '8 h2b30@val))) (set! h2a96@library-invoke-state (lambda (h2b33@x) (simple-struct-ref h2b33@x '9))) (set! h2a98@set-library-invoke-state! (lambda (h2b35@x h2b36@val) (simple-struct-set! h2b35@x '9 h2b36@val))) (set! h2a9a@library-visit-code (lambda (h2b39@x) (simple-struct-ref h2b39@x '10))) (set! h2a9c@set-library-visit-code! (lambda (h2b3b@x h2b3c@val) (simple-struct-set! h2b3b@x '10 h2b3c@val))) (set! h2a9e@library-invoke-code (lambda (h2b3f@x) (simple-struct-ref h2b3f@x '11))) (set! h2aa0@set-library-invoke-code! (lambda (h2b41@x h2b42@val) (simple-struct-set! h2b41@x '11 h2b42@val))) (set! h2aa2@library-visible? (lambda (h2b45@x) (simple-struct-ref h2b45@x '12))) (set! h2aa4@set-library-visible?! (lambda (h2b47@x h2b48@val) (simple-struct-set! h2b47@x '12 h2b48@val))) (set! h2aa6@library-source-file-name (lambda (h2b4b@x) (simple-struct-ref h2b4b@x '13))) (set! h2aa8@set-library-source-file-name! (lambda (h2b4d@x h2b4e@val) (simple-struct-set! h2b4d@x '13 h2b4e@val))) (set! h2aaa@dummy '3) (set! h2aac@find-dependencies (lambda (h2b51@ls) (if (null? h2b51@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! h2aae@find-library-by (lambda (h2b53@pred) ((letrec ((h2b55@f (lambda (h2b57@ls) (if (null? h2b57@ls) '#f (if (h2b53@pred (car h2b57@ls)) (car h2b57@ls) (h2b55@f (cdr h2b57@ls))))))) h2b55@f) ((h2a6a@current-library-collection))))) (set! h2ab0@library-path (h29c1@h28bd@make-parameter '(".") (lambda (h2b59@x) (if (and (list? h2b59@x) (for-all string? h2b59@x)) (map (lambda (h2b5b@x) h2b5b@x) h2b59@x) (assertion-violation 'library-path '"not a list of strings" h2b59@x))))) (set! h2ab2@library-extensions (h29c1@h28bd@make-parameter '(".sls" ".ss" ".scm") (lambda (h2b5d@x) (if (and (list? h2b5d@x) (for-all string? h2b5d@x)) (map (lambda (h2b5f@x) h2b5f@x) h2b5d@x) (assertion-violation 'library-extensions '"not a list of strings" h2b5d@x))))) (set! h2ab4@library-name->file-name (lambda (h2b61@x) (call-with-values (lambda () (open-string-output-port)) (lambda (h2b67@h2b64 h2b68@h2b66) ((lambda (h2b6b@extract h2b6c@p) ((lambda (h2b70@display-hex) (begin (set! h2b70@display-hex (lambda (h2b79@n) (if (<= '0 h2b79@n '9) (display h2b79@n h2b6c@p) (display (integer->char (+ (char->integer '#\a) (- h2b79@n '10))) h2b6c@p)))) (begin ((letrec ((h2b71@f (lambda (h2b73@ls) (if (not (null? h2b73@ls)) (begin (display '"/" h2b6c@p) (for-each (lambda (h2b75@c) (if (or (char<=? '#\a h2b75@c '#\z) (char<=? '#\A h2b75@c '#\Z) (char<=? '#\0 h2b75@c '#\9) (memv h2b75@c '(#\- #\. #\_ #\~))) (display h2b75@c h2b6c@p) (begin (display '"%" h2b6c@p) ((lambda (h2b77@n) (begin (h2b70@display-hex (quotient h2b77@n '16)) (h2b70@display-hex (remainder h2b77@n '16)))) (char->integer h2b75@c))))) (string->list (symbol->string (car h2b73@ls)))) (h2b71@f (cdr h2b73@ls))) (void))))) h2b71@f) h2b61@x) (h2b6b@extract)))) '#f)) h2b68@h2b66 h2b67@h2b64))))) (set! h2ab6@file-locator (h29c1@h28bd@make-parameter (lambda (h2b7b@x) ((lambda (h2b7d@str) ((letrec ((h2b7f@f (lambda (h2b81@ls h2b82@exts h2b83@failed-list) (if (null? h2b81@ls) ((lambda () ((lambda (h2b8f@h2b8a h2b91@h2b8c h2b93@h2b8b h2b96@h2b89 h2b98@make-library-resolution-condition h2b9a@h2b87 h2b9c@h2b88 h2b9e@library-resolution-condition? h2ba0@condition-library h2ba2@condition-files) (begin (set! h2b8f@h2b8a (make-record-type-descriptor '&library-resolution h4e99@h4be0@&condition-rtd 'h2b8d '#f '#f '#((immutable library) (immutable files)))) (set! h2b91@h2b8c '#f) (set! h2b93@h2b8b (make-record-constructor-descriptor h2b8f@h2b8a h4e9a@h4be2@&condition-rcd h2b91@h2b8c)) (set! h2b96@h2b89 (record-predicate h2b8f@h2b8a)) (set! h2b98@make-library-resolution-condition (record-constructor h2b93@h2b8b)) (set! h2b9a@h2b87 (record-accessor h2b8f@h2b8a '0)) (set! h2b9c@h2b88 (record-accessor h2b8f@h2b8a '1)) (set! h2b9e@library-resolution-condition? (condition-predicate h2b8f@h2b8a)) (set! h2ba0@condition-library (condition-accessor h2b8f@h2b8a h2b9a@h2b87)) (set! h2ba2@condition-files (condition-accessor h2b8f@h2b8a h2b9c@h2b88)) (raise (condition (h4eb9@h4c7a@make-error) (h4edb@h4cd6@make-who-condition 'expander) (h4e9f@h4c37@make-message-condition '"cannot locate library in library-path") (h2b98@make-library-resolution-condition h2b7b@x (reverse h2b83@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? h2b82@exts) (h2b7f@f (cdr h2b81@ls) (h2ab2@library-extensions) h2b83@failed-list) ((lambda (h2ba3@name) (if (file-exists? h2ba3@name) h2ba3@name (h2b7f@f h2b81@ls (cdr h2b82@exts) (cons h2ba3@name h2b83@failed-list)))) (string-append (car h2b81@ls) h2b7d@str (car h2b82@exts)))))))) h2b7f@f) (h2ab0@library-path) (h2ab2@library-extensions) '())) (h2ab4@library-name->file-name h2b7b@x))) (lambda (h2ba5@f) (if (procedure? h2ba5@f) h2ba5@f (assertion-violation 'file-locator '"not a procedure" h2ba5@f))))) (set! h2ab8@serialize-all (lambda (h2ba7@serialize h2ba8@compile) ((lambda (h2bac@library-desc) (begin (set! h2bac@library-desc (lambda (h2baf@x) (list (h2a72@library-id h2baf@x) (h2a76@library-name h2baf@x)))) (for-each (lambda (h2bad@x) (if (h2aa6@library-source-file-name h2bad@x) (h2ba7@serialize (h2aa6@library-source-file-name h2bad@x) (list (h2a72@library-id h2bad@x) (h2a76@library-name h2bad@x) (h2a7a@library-version h2bad@x) (map h2bac@library-desc (h2a7e@library-imp* h2bad@x)) (map h2bac@library-desc (h2a82@library-vis* h2bad@x)) (map h2bac@library-desc (h2a86@library-inv* h2bad@x)) (h2a8a@library-subst h2bad@x) (h2a8e@library-env h2bad@x) (h2ba8@compile (h2a9a@library-visit-code h2bad@x)) (h2ba8@compile (h2a9e@library-invoke-code h2bad@x)) (h2aa2@library-visible? h2bad@x))) (void))) ((h2a6a@current-library-collection))))) '#f))) (set! h2aba@current-precompiled-library-loader (h29c1@h28bd@make-parameter (lambda (h2bb1@filename h2bb2@sk) '#f))) (set! h2abc@try-load-from-file (lambda (h2bb5@filename) ((h2aba@current-precompiled-library-loader) h2bb5@filename (lambda h2bdb ((lambda (h2bdc) (if (= h2bdc '11) (apply (lambda (h2bb7@id h2bb8@name h2bb9@ver h2bba@imp* h2bbb@vis* h2bbc@inv* h2bbd@exp-subst h2bbe@exp-env h2bbf@visit-proc h2bc0@invoke-proc h2bc1@visible?) ((letrec ((h2bcd@f (lambda (h2bcf@deps) (if (null? h2bcf@deps) (begin (h2ad0@install-library h2bb7@id h2bb8@name h2bb9@ver h2bba@imp* h2bbb@vis* h2bbc@inv* h2bbd@exp-subst h2bbe@exp-env h2bbf@visit-proc h2bc0@invoke-proc '#f '#f h2bc1@visible? '#f) '#t) ((lambda (h2bd1@d) ((lambda (h2bd3@label h2bd4@dname) ((lambda (h2bd7@l) (if (and (h2a70@library? h2bd7@l) (eq? h2bd3@label (h2a72@library-id h2bd7@l))) (h2bcd@f (cdr h2bcf@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" h2bb8@name h2bd4@dname h2bb5@filename h2bd7@l h2bd3@label (h2a72@library-id h2bd7@l)) '#f))) (h2ac6@find-library-by-name h2bd4@dname))) (car h2bd1@d) (cadr h2bd1@d))) (car h2bcf@deps)))))) h2bcd@f) (append h2bba@imp* h2bbb@vis* h2bbc@inv*))) h2bdb) (if (>= h2bdc '0) (apply (lambda h2bd9@others '#f) h2bdb) (error 'apply '"invalid arg count")))) (length h2bdb)))))) (set! h2abe@library-loader (h29c1@h28bd@make-parameter (lambda (h2bdd@x) ((lambda (h2bdf@file-name) (if (not h2bdf@file-name) (assertion-violation '#f '"cannot file library" h2bdd@x) (or (h2abc@try-load-from-file h2bdf@file-name) ((h2ac0@current-library-expander) (h29c0@h28bb@read-library-source-file h2bdf@file-name) h2bdf@file-name (lambda (h2be1@name) (if (not (fast-equal? h2be1@name h2bdd@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (h2be7@h2be4 h2be8@h2be6) ((lambda (h2beb@e h2bec@p) (begin (display '"expected to find library " h2bec@p) (write h2bdd@x h2bec@p) (display '" in file " h2bec@p) (display h2bdf@file-name h2bec@p) (display '", found " h2bec@p) (write h2be1@name h2bec@p) (display '" instead" h2bec@p) (h2beb@e))) h2be8@h2be6 h2be7@h2be4)))) (void))))))) ((h2ab6@file-locator) h2bdd@x))) (lambda (h2bef@f) (if (procedure? h2bef@f) h2bef@f (assertion-violation 'library-locator '"not a procedure" h2bef@f))))) (set! h2ac0@current-library-expander (h29c1@h28bd@make-parameter (lambda (h2bf1@x) (assertion-violation 'library-expander '"not initialized")) (lambda (h2bf3@f) (if (procedure? h2bf3@f) h2bf3@f (assertion-violation 'library-expander '"not a procedure" h2bf3@f))))) (set! h2ac2@external-pending-libraries (h29c1@h28bd@make-parameter '())) (set! h2ac4@find-external-library (lambda (h2bf5@name) (begin (if (member h2bf5@name (h2ac2@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" h2bf5@name) (void)) ((lambda (h2bfb@h2bf8 h2bfc@h2bfa) ((lambda (h2bff@swap) (dynamic-wind h2bff@swap (lambda () (begin ((h2abe@library-loader) h2bf5@name) (or (h2aae@find-library-by (lambda (h2c01@x) (fast-equal? (h2a76@library-name h2c01@x) h2bf5@name))) (assertion-violation '#f '"handling external library did not yield the correct library" h2bf5@name)))) h2bff@swap)) (lambda () ((lambda (h2c03@t) (begin (h2bfb@h2bf8 h2bfc@h2bfa) (set! h2bfc@h2bfa h2c03@t))) (h2bfb@h2bf8))))) h2ac2@external-pending-libraries (cons h2bf5@name (h2ac2@external-pending-libraries)))))) (set! h2ac6@find-library-by-name (lambda (h2c05@name) (or (h2aae@find-library-by (lambda (h2c07@x) (fast-equal? (h2a76@library-name h2c07@x) h2c05@name))) (h2ac4@find-external-library h2c05@name)))) (set! h2ac8@library-exists? (lambda (h2c09@name) (and (h2aae@find-library-by (lambda (h2c0b@x) (fast-equal? (h2a76@library-name h2c0b@x) h2c09@name))) '#t))) (set! h2aca@find-library-by-spec/die (lambda (h2c0d@spec) ((lambda (h2c0f@id) (or (h2aae@find-library-by (lambda (h2c11@x) (eq? h2c0f@id (h2a72@library-id h2c11@x)))) (assertion-violation '#f '"cannot find library with required spec" h2c0d@spec))) (car h2c0d@spec)))) (set! h2acc@label->binding-table (make-eq-hashtable)) (set! h2ace@install-library-record (lambda (h2c13@lib) (begin ((lambda (h2c15@exp-env) (for-each (lambda (h2c17@x) ((lambda (h2c19@label h2c1a@binding) ((lambda (h2c1d@binding) (begin (if (hashtable-ref h2acc@label->binding-table h2c19@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" h2c19@label (hashtable-ref h2acc@label->binding-table h2c19@label '#f) h2c1d@binding) (exit)) (void)) (hashtable-set! h2acc@label->binding-table h2c19@label h2c1d@binding))) ((lambda (h2c1f@t) (if (memv h2c1f@t '(global)) (cons 'global (cons h2c13@lib (cdr h2c1a@binding))) (if (memv h2c1f@t '(global-macro)) (cons 'global-macro (cons h2c13@lib (cdr h2c1a@binding))) (if (memv h2c1f@t '(global-macro!)) (cons 'global-macro! (cons h2c13@lib (cdr h2c1a@binding))) h2c1a@binding)))) (car h2c1a@binding)))) (car h2c17@x) (cdr h2c17@x))) h2c15@exp-env)) (h2a8e@library-env h2c13@lib)) ((h2a6a@current-library-collection) h2c13@lib)))) (set! h2ad0@install-library (lambda (h2c21@id h2c22@name h2c23@ver h2c24@imp* h2c25@vis* h2c26@inv* h2c27@exp-subst h2c28@exp-env h2c29@visit-proc h2c2a@invoke-proc h2c2b@visit-code h2c2c@invoke-code h2c2d@visible? h2c2e@source-file-name) ((lambda (h2c3d@imp-lib* h2c3e@vis-lib* h2c3f@inv-lib*) (begin (if (not (and (symbol? h2c21@id) (list? h2c22@name) (list? h2c23@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" h2c21@id h2c22@name h2c23@ver) (void)) (if (h2ac8@library-exists? h2c22@name) (assertion-violation 'install-library '"library is already installed" h2c22@name) (void)) ((lambda (h2c43@lib) (h2ace@install-library-record h2c43@lib)) (h2a6e@make-library h2c21@id h2c22@name h2c23@ver h2c3d@imp-lib* h2c3e@vis-lib* h2c3f@inv-lib* h2c27@exp-subst h2c28@exp-env h2c29@visit-proc h2c2a@invoke-proc h2c2b@visit-code h2c2c@invoke-code h2c2d@visible? h2c2e@source-file-name)))) (map h2aca@find-library-by-spec/die h2c24@imp*) (map h2aca@find-library-by-spec/die h2c25@vis*) (map h2aca@find-library-by-spec/die h2c26@inv*)))) (set! h2ad2@imported-label->binding (lambda (h2c45@lab) (hashtable-ref h2acc@label->binding-table h2c45@lab '#f))) (set! h2ad4@invoke-library (lambda (h2c47@lib) ((lambda (h2c49@invoke) (if (procedure? h2c49@invoke) (begin (h2a98@set-library-invoke-state! h2c47@lib (lambda () (assertion-violation 'invoke '"circularity detected" h2c47@lib))) (for-each h2ad4@invoke-library (h2a86@library-inv* h2c47@lib)) (h2a98@set-library-invoke-state! h2c47@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" h2c47@lib))) (h2c49@invoke) (h2a98@set-library-invoke-state! h2c47@lib '#t)) (void))) (h2a96@library-invoke-state h2c47@lib)))) (set! h2ad6@visit-library (lambda (h2c4b@lib) ((lambda (h2c4d@visit) (if (procedure? h2c4d@visit) (begin (h2a94@set-library-visit-state! h2c4b@lib (lambda () (assertion-violation 'visit '"circularity detected" h2c4b@lib))) (for-each h2ad4@invoke-library (h2a82@library-vis* h2c4b@lib)) (h2a94@set-library-visit-state! h2c4b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" h2c4b@lib))) (h2c4d@visit) (h2a94@set-library-visit-state! h2c4b@lib '#t)) (void))) (h2a92@library-visit-state h2c4b@lib)))) (set! h2ad8@invoke-library-by-spec (lambda (h2c4f@spec) (h2ad4@invoke-library (h2aca@find-library-by-spec/die h2c4f@spec)))) (set! h2ada@installed-libraries (lambda h2c57 ((lambda (h2c58) (if (= h2c58 '1) (apply (lambda (h2c51@all?) ((letrec ((h2c53@f (lambda (h2c55@ls) (if (null? h2c55@ls) '() (if (or h2c51@all? (h2aa2@library-visible? (car h2c55@ls))) (cons (car h2c55@ls) (h2c53@f (cdr h2c55@ls))) (h2c53@f (cdr h2c55@ls))))))) h2c53@f) ((h2a6a@current-library-collection)))) h2c57) (if (= h2c58 '0) (apply (lambda () (h2ada@installed-libraries '#f)) h2c57) (error 'apply '"invalid arg count")))) (length h2c57)))) (set! h2adc@library-spec (lambda (h2c59@x) (begin (if (not (h2a70@library? h2c59@x)) (assertion-violation 'library-spec '"not a library" h2c59@x) (void)) (list (h2a72@library-id h2c59@x) (h2a76@library-name h2c59@x) (h2a7a@library-version h2c59@x))))) (begin (set! h2c95@h2adc@library-spec h2adc@library-spec) (set! h2c94@h2ada@installed-libraries h2ada@installed-libraries) (set! h2c93@h2ad8@invoke-library-by-spec h2ad8@invoke-library-by-spec) (set! h2c92@h2ad6@visit-library h2ad6@visit-library) (set! h2c91@h2ad4@invoke-library h2ad4@invoke-library) (set! h2c90@h2ad2@imported-label->binding h2ad2@imported-label->binding) (set! h2c8f@h2ad0@install-library h2ad0@install-library) (set! h2c8e@h2ace@install-library-record h2ace@install-library-record) (set! h2c8d@h2acc@label->binding-table h2acc@label->binding-table) (set! h2c8c@h2aca@find-library-by-spec/die h2aca@find-library-by-spec/die) (set! h2c8b@h2ac8@library-exists? h2ac8@library-exists?) (set! h2c8a@h2ac6@find-library-by-name h2ac6@find-library-by-name) (set! h2c89@h2ac4@find-external-library h2ac4@find-external-library) (set! h2c88@h2ac2@external-pending-libraries h2ac2@external-pending-libraries) (set! h2c87@h2ac0@current-library-expander h2ac0@current-library-expander) (set! h2c86@h2abe@library-loader h2abe@library-loader) (set! h2c85@h2abc@try-load-from-file h2abc@try-load-from-file) (set! h2c84@h2aba@current-precompiled-library-loader h2aba@current-precompiled-library-loader) (set! h2c83@h2ab8@serialize-all h2ab8@serialize-all) (set! h2c82@h2ab6@file-locator h2ab6@file-locator) (set! h2c81@h2ab4@library-name->file-name h2ab4@library-name->file-name) (set! h2c80@h2ab2@library-extensions h2ab2@library-extensions) (set! h2c7f@h2ab0@library-path h2ab0@library-path) (set! h2c7e@h2aae@find-library-by h2aae@find-library-by) (set! h2c7d@h2aac@find-dependencies h2aac@find-dependencies) (set! h2c7c@h2aaa@dummy h2aaa@dummy) (set! h2c7b@h2aa8@set-library-source-file-name! h2aa8@set-library-source-file-name!) (set! h2c7a@h2aa6@library-source-file-name h2aa6@library-source-file-name) (set! h2c79@h2aa4@set-library-visible?! h2aa4@set-library-visible?!) (set! h2c78@h2aa2@library-visible? h2aa2@library-visible?) (set! h2c77@h2aa0@set-library-invoke-code! h2aa0@set-library-invoke-code!) (set! h2c76@h2a9e@library-invoke-code h2a9e@library-invoke-code) (set! h2c75@h2a9c@set-library-visit-code! h2a9c@set-library-visit-code!) (set! h2c74@h2a9a@library-visit-code h2a9a@library-visit-code) (set! h2c73@h2a98@set-library-invoke-state! h2a98@set-library-invoke-state!) (set! h2c72@h2a96@library-invoke-state h2a96@library-invoke-state) (set! h2c71@h2a94@set-library-visit-state! h2a94@set-library-visit-state!) (set! h2c70@h2a92@library-visit-state h2a92@library-visit-state) (set! h2c6f@h2a90@set-library-env! h2a90@set-library-env!) (set! h2c6e@h2a8e@library-env h2a8e@library-env) (set! h2c6d@h2a8c@set-library-subst! h2a8c@set-library-subst!) (set! h2c6c@h2a8a@library-subst h2a8a@library-subst) (set! h2c6b@h2a88@set-library-inv*! h2a88@set-library-inv*!) (set! h2c6a@h2a86@library-inv* h2a86@library-inv*) (set! h2c69@h2a84@set-library-vis*! h2a84@set-library-vis*!) (set! h2c68@h2a82@library-vis* h2a82@library-vis*) (set! h2c67@h2a80@set-library-imp*! h2a80@set-library-imp*!) (set! h2c66@h2a7e@library-imp* h2a7e@library-imp*) (set! h2c65@h2a7c@set-library-version! h2a7c@set-library-version!) (set! h2c64@h2a7a@library-version h2a7a@library-version) (set! h2c63@h2a78@set-library-name! h2a78@set-library-name!) (set! h2c62@h2a76@library-name h2a76@library-name) (set! h2c61@h2a74@set-library-id! h2a74@set-library-id!) (set! h2c60@h2a72@library-id h2a72@library-id) (set! h2c5f@h2a70@library? h2a70@library?) (set! h2c5e@h2a6e@make-library h2a6e@make-library) (set! h2c5d@h2a6c@rp h2a6c@rp) (set! h2c5c@h2a6a@current-library-collection h2a6a@current-library-collection) (set! h2c5b@h2a68@make-collection h2a68@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h2c98@build-global-define h2d09@build-lambda h2d0b@build-case-lambda h2d0d@build-let h2d3b@build-sequence h2d3d@build-void h2d3f@build-letrec h2d41@build-letrec* h2d43@build-library-letrec* h2d45@build-receive) (begin (set! h2c98@build-global-define (lambda (h2d46@x) (h2d3d@build-void))) (set! h2d09@build-lambda (lambda (h2d48@ae h2d49@vars h2d4a@exp) (list 'lambda h2d49@vars h2d4a@exp))) (set! h2d0b@build-case-lambda (lambda (h2d4e@ae h2d4f@vars* h2d50@exp*) ((lambda (h2d55@build-error h2d57@build-pred h2d59@build-apply h2d5b@expand-case-lambda) (begin (set! h2d55@build-error (lambda (h2d8c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! h2d57@build-pred (lambda (h2d74@ae h2d75@n h2d76@vars) (call-with-values (lambda () ((letrec ((h2d7e@f (lambda (h2d80@vars h2d81@count) (if (pair? h2d80@vars) (h2d7e@f (cdr h2d80@vars) (+ h2d81@count '1)) (if (null? h2d80@vars) (values h2d81@count '=) (values h2d81@count '>=)))))) h2d7e@f) h2d76@vars '0)) (lambda (h2d84@h2d7b h2d85@h2d7d) ((lambda (h2d88@pred h2d89@count) (list (list 'primitive h2d88@pred) h2d75@n (list 'quote h2d89@count))) h2d85@h2d7d h2d84@h2d7b))))) (set! h2d59@build-apply (lambda (h2d6c@ae h2d6d@g h2d6e@vars h2d6f@exp) (list '(primitive apply) (h2d09@build-lambda h2d6c@ae h2d6e@vars h2d6f@exp) h2d6d@g))) (set! h2d5b@expand-case-lambda (lambda (h2d5c@ae h2d5d@vars h2d5e@exp*) ((lambda (h2d62@g h2d63@n) (list 'lambda h2d62@g (h2d0d@build-let h2d5c@ae (list h2d63@n) (list (list '(primitive length) h2d62@g)) ((letrec ((h2d66@f (lambda (h2d68@vars* h2d69@exp*) (if (null? h2d68@vars*) (h2d55@build-error h2d5c@ae) (list 'if (h2d57@build-pred h2d5c@ae h2d63@n (car h2d68@vars*)) (h2d59@build-apply h2d5c@ae h2d62@g (car h2d68@vars*) (car h2d69@exp*)) (h2d66@f (cdr h2d68@vars*) (cdr h2d69@exp*))))))) h2d66@f) h2d4f@vars* h2d5e@exp*)))) (gensym) (gensym)))) (if (= (length h2d50@exp*) '1) (h2d09@build-lambda h2d4e@ae (car h2d4f@vars*) (car h2d50@exp*)) (h2d5b@expand-case-lambda h2d4e@ae h2d4f@vars* h2d50@exp*)))) '#f '#f '#f '#f))) (set! h2d0d@build-let (lambda (h2d8e@ae h2d8f@lhs* h2d90@rhs* h2d91@body) (cons (h2d09@build-lambda h2d8e@ae h2d8f@lhs* h2d91@body) h2d90@rhs*))) (set! h2d3b@build-sequence (lambda (h2d96@ae h2d97@exps) ((letrec ((h2d9a@loop (lambda (h2d9c@exps) (if (null? (cdr h2d9c@exps)) (car h2d9c@exps) (if (equal? (car h2d9c@exps) (h2d3d@build-void)) (h2d9a@loop (cdr h2d9c@exps)) (cons 'begin h2d9c@exps)))))) h2d9a@loop) h2d97@exps))) (set! h2d3d@build-void (lambda () '((primitive void)))) (set! h2d3f@build-letrec (lambda (h2d9e@ae h2d9f@vars h2da0@val-exps h2da1@body-exp) (if (null? h2d9f@vars) h2da1@body-exp (list 'letrec (map list h2d9f@vars h2da0@val-exps) h2da1@body-exp)))) (set! h2d41@build-letrec* (lambda (h2da6@ae h2da7@vars h2da8@val-exps h2da9@body-exp) (if (null? h2da7@vars) h2da9@body-exp (h2d0d@build-let h2da6@ae h2da7@vars (map (lambda (h2dae@x) (list 'quote '#f)) h2da7@vars) (h2d3b@build-sequence h2da6@ae (append (map (lambda (h2db0@lhs h2db1@rhs) (list 'set! h2db0@lhs h2db1@rhs)) h2da7@vars h2da8@val-exps) (list h2da9@body-exp))))))) (set! h2d43@build-library-letrec* (lambda (h2db4@ae h2db5@name h2db6@vars h2db7@locs h2db8@val-exps h2db9@body-exp) (list 'library-letrec* h2db5@name (map list h2db6@vars h2db7@locs h2db8@val-exps) h2db9@body-exp))) (set! h2d45@build-receive (lambda (h2dc0@ae h2dc1@vars h2dc2@producer h2dc3@body*) (begin (display '"************** in ") (cons 'receive (cons h2dc1@vars (cons h2dc2@producer h2dc3@body*)))))) (begin (set! h2dd1@h2d45@build-receive h2d45@build-receive) (set! h2dd0@h2d43@build-library-letrec* h2d43@build-library-letrec*) (set! h2dcf@h2d41@build-letrec* h2d41@build-letrec*) (set! h2dce@h2d3f@build-letrec h2d3f@build-letrec) (set! h2dcd@h2d3d@build-void h2d3d@build-void) (set! h2dcc@h2d3b@build-sequence h2d3b@build-sequence) (set! h2dcb@h2d0d@build-let h2d0d@build-let) (set! h2dca@h2d0b@build-case-lambda h2d0b@build-case-lambda) (set! h2dc9@h2d09@build-lambda h2d09@build-lambda) (set! h2dc8@h2c98@build-global-define h2c98@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h2de0@file-options-macro h2de2@set-cons h2de4@set-union h2de9@top-mark* h2deb@top-marked? h2ded@gen-lexical h2def@gen-global h2df1@gen-label h2df3@gen-top-level-label h2df5@gen-define-label+loc h2df7@gen-define-label h2df9@make-rib h2dfb@rib? h2dfd@rib-sym* h2dff@set-rib-sym*! h2e01@rib-mark** h2e03@set-rib-mark**! h2e05@rib-label* h2e07@set-rib-label*! h2e09@rib-sealed/freq h2e0b@set-rib-sealed/freq! h2e0d@rib-cache h2e0f@set-rib-cache! h2e11@dummy h2e13@make-empty-rib h2e15@extend-rib! h2e17@extend-rib/nc! h2e19@make-rib-map h2e1b@seal-rib! h2e1d@unseal-rib! h2e1f@make-full-rib h2e21@rp h2e23@make-stx h2e25@stx? h2e27@stx-expr h2e29@set-stx-expr! h2e2b@stx-mark* h2e2d@set-stx-mark*! h2e2f@stx-subst* h2e31@set-stx-subst*! h2e33@stx-ae* h2e35@set-stx-ae*! h2e37@dummy h2e39@datum->stx h2e3b@gen-mark h2e3d@anti-mark h2e3f@anti-mark? h2e41@join-wraps h2e43@mkstx h2e45@add-mark h2e47@add-subst h2e49@syntax-kind? h2e4b@syntax-vector->list h2e4d@syntax-pair? h2e4f@syntax-vector? h2e51@syntax-null? h2e53@syntax-list? h2e55@syntax-car h2e57@syntax-cdr h2e59@syntax->list h2e5b@id? h2e5d@id->sym h2e5f@same-marks? h2e61@bound-id=? h2e63@free-id=? h2e65@valid-bound-ids? h2e67@distinct-bound-ids? h2e69@bound-id-member? h2e6b@self-evaluating? h2e6d@strip-annotations h2e6f@strip h2e71@stx->datum h2e73@same-marks*? h2e75@id->label h2e77@id->real-label h2e79@label->binding h2e7b@make-binding h2e7d@binding-type h2e7f@binding-value h2e81@raise-unbound-error h2e83@syntax-type h2e91@sanitize-binding h2e93@make-variable-transformer h2e95@variable-transformer? h2e97@variable-transformer-procedure h2e99@make-eval-transformer h2fea@parse-define h2fec@parse-define-syntax h2fee@scheme-stx-hashtable h2ff0@scheme-stx h2ff2@lexical-var h2ff4@lexical-mutable? h2ff6@set-lexical-mutable! h2ff8@add-lexical h2ffa@add-lexicals h2ffc@letrec-helper h2ffe@letrec-transformer h3000@letrec*-transformer h3002@fluid-let-syntax-transformer h3004@type-descriptor-transformer h3006@record-type-descriptor-transformer h3008@record-constructor-descriptor-transformer h300a@when-macro h300c@unless-macro h300e@if-transformer h3010@and-transformer h3012@or-transformer h3014@case-macro h3016@quote-transformer h3018@case-lambda-transformer h301a@lambda-transformer h301c@bless h301e@with-syntax-macro h3020@invalid-fmls-error h3022@let-macro h3024@let-values-macro h3026@let*-values-macro h3028@trace-lambda-macro h302a@trace-define-macro h302c@trace-define-syntax-macro h302e@trace-let/rec-syntax h3030@trace-let-syntax-macro h3032@trace-letrec-syntax-macro h3034@guard-macro h3036@define-enumeration-macro h3038@time-macro h303a@delay-macro h303c@assert-macro h303e@endianness-macro h3040@identifier-syntax-macro h3042@do-macro h3044@let*-macro h3046@or-macro h3048@and-macro h304a@cond-macro h304c@do-include h304e@include-macro h3050@include-into-macro h3052@syntax-rules-macro h3054@quasiquote-macro h3056@quasisyntax-macro h3058@define-struct-macro h305a@define-record-type-macro h305c@define-condition-type-macro h305e@incorrect-usage-macro h3060@parameterize-macro h3062@foreign-call-transformer h3064@convert-pattern h3066@syntax-dispatch h3068@ellipsis? h306a@underscore? h306c@verify-literals h306e@syntax-case-transformer h3070@ellipsis-map h3072@syntax-transformer h3074@core-macro-transformer h3076@symbol-macro h3078@macro-transformer h307a@local-macro-transformer h307c@do-macro-call h307e@chi-macro h3080@chi-local-macro h3082@chi-global-macro h3084@chi-expr* h3086@chi-application h3088@chi-expr h308a@chi-set! h308c@verify-formals h308e@chi-lambda-clause h3090@chi-lambda-clause* h3092@chi-defun h3094@chi-rhs h3096@expand-interaction-rhs*/init* h3098@chi-rhs* h309a@find-bound=? h309c@find-dups h309e@chi-internal h30a0@parse-module h30a2@make-module-interface h30a4@module-interface? h30a6@module-interface-first-mark h30a8@set-module-interface-first-mark! h30aa@module-interface-exp-id-vec h30ac@set-module-interface-exp-id-vec! h30ae@module-interface-exp-lab-vec h30b0@set-module-interface-exp-lab-vec! h30b2@dummy h30b4@module-interface-exp-id* h30b6@chi-internal-module h30b8@chi-body* h30ba@expand-transformer h30bc@parse-exports h30be@parse-library-name h30c0@parse-library h30c2@parse-import-spec* h30c4@make-top-rib h30c6@make-collector h30c8@inv-collector h30ca@vis-collector h30cc@imp-collector h30ce@chi-library-internal h30d0@chi-interaction-expr h30d2@library-body-expander h30d4@core-library-expander h30d6@parse-top-level-program h30d8@top-level-expander h30da@rp h30dc@make-env h30de@env? h30e0@env-names h30e2@set-env-names! h30e4@env-labels h30e6@set-env-labels! h30e8@env-itc h30ea@set-env-itc! h30ec@dummy h30ee@rp h30f0@make-interaction-env h30f2@interaction-env? h30f4@interaction-env-rib h30f6@set-interaction-env-rib! h30f8@interaction-env-r h30fa@set-interaction-env-r! h30fc@interaction-env-locs h30fe@set-interaction-env-locs! h3100@dummy h3102@interaction-environment-symbols h3104@environment-bindings h3106@parse-binding h3108@environment? h310a@environment-symbols h310c@environment h310e@null-environment h3110@scheme-report-environment h3112@expand h3114@eval h3116@library-expander h3118@boot-library-expand h311a@rev-map-append h311c@build-exports h311e@make-export-subst h3120@make-export-env/macros h3122@generate-temporaries h3124@free-identifier=? h3126@bound-identifier=? h3128@make-source-condition h312a@extract-position-condition h312c@expression-position h312e@assertion-error h3130@syntax-error h3132@syntax-violation* h3134@syntax-violation h3136@identifier? h3138@datum->syntax h313a@syntax->datum h313c@compile-r6rs-top-level h313e@pre-compile-r6rs-top-level h3140@interaction-environment h3142@top-level-context) (begin (set! h2de0@file-options-macro (lambda (h3143@x) ((lambda (h3146@valid-option?) (begin (set! h3146@valid-option? (lambda (h314f@x) (and (h2e5b@id? h314f@x) (memq (h2e5d@id->sym h314f@x) '(no-fail no-create no-truncate))))) ((lambda (h3147@t) ((lambda (h3149@ls/false) (if (and h3149@ls/false (apply (lambda (h314b@opt*) (for-all h3146@valid-option? h314b@opt*)) h3149@ls/false)) (apply (lambda (h314d@opt*) (h301c@bless (list 'make-file-options (list 'quote h314d@opt*)))) h3149@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3147@t))) (h3066@syntax-dispatch h3147@t '(_ . each-any)))) h3143@x))) '#f))) (set! h2de2@set-cons (lambda (h3151@x h3152@ls) (if (memq h3151@x h3152@ls) h3152@ls (cons h3151@x h3152@ls)))) (set! h2de4@set-union (lambda (h3155@ls1 h3156@ls2) (if (null? h3155@ls1) h3156@ls2 (if (memq (car h3155@ls1) h3156@ls2) (h2de4@set-union (cdr h3155@ls1) h3156@ls2) (cons (car h3155@ls1) (h2de4@set-union (cdr h3155@ls1) h3156@ls2)))))) (set! h2de9@top-mark* '(top)) (set! h2deb@top-marked? (lambda (h3159@m*) (memq 'top h3159@m*))) (set! h2ded@gen-lexical (lambda (h315b@sym) (if (symbol? h315b@sym) (gensym h315b@sym) (if (h2e25@stx? h315b@sym) (h2ded@gen-lexical (h2e5d@id->sym h315b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" h315b@sym))))) (set! h2def@gen-global (lambda (h315d@x) (h2ded@gen-lexical h315d@x))) (set! h2df1@gen-label (lambda (h315f@_) (gensym))) (set! h2df3@gen-top-level-label (lambda (h3161@id h3162@rib) ((lambda (h3166@find) (begin (set! h3166@find (lambda (h3171@sym h3172@mark* h3173@sym* h3174@mark** h3175@label*) (and (pair? h3173@sym*) (if (and (eq? h3171@sym (car h3173@sym*)) (h2e5f@same-marks? h3172@mark* (car h3174@mark**))) (car h3175@label*) (h3166@find h3171@sym h3172@mark* (cdr h3173@sym*) (cdr h3174@mark**) (cdr h3175@label*)))))) ((lambda (h3167@sym h3168@mark*) ((lambda (h316b@sym*) ((lambda (h316d@t) (if h316d@t ((lambda (h316f@label) (if (h2c90@h2ad2@imported-label->binding h316f@label) (gensym) h316f@label)) h316d@t) (gensym))) (and (memq h3167@sym (h2dfd@rib-sym* h3162@rib)) (h3166@find h3167@sym h3168@mark* h316b@sym* (h2e01@rib-mark** h3162@rib) (h2e05@rib-label* h3162@rib))))) (h2dfd@rib-sym* h3162@rib))) (h2e5d@id->sym h3161@id) (h2e2b@stx-mark* h3161@id)))) '#f))) (set! h2df5@gen-define-label+loc (lambda (h317b@id h317c@rib) ((lambda (h317f@t) (if h317f@t ((lambda (h3181@env) ((lambda (h3183@label h3184@locs) (values h3183@label ((lambda (h3187@t) (if h3187@t (cdr h3187@t) ((lambda (h3189@loc) (begin (h30fe@set-interaction-env-locs! h3181@env (cons (cons h3183@label h3189@loc) h3184@locs)) h3189@loc)) (h2ded@gen-lexical h317b@id)))) (assq h3183@label h3184@locs)))) (h2df3@gen-top-level-label h317b@id h317c@rib) (h30fc@interaction-env-locs h3181@env))) h317f@t) (values (gensym) (h2ded@gen-lexical h317b@id)))) (h3142@top-level-context)))) (set! h2df7@gen-define-label (lambda (h318b@id h318c@rib) (if (h3142@top-level-context) (h2df3@gen-top-level-label h318b@id h318c@rib) (gensym)))) (set! h2df9@make-rib (lambda h318f@args ((lambda (h3191@ret) (begin ((letrec ((h3193@loop (lambda (h3195@i h3196@args) (if (= h3195@i '6) '() (if (null? h3196@args) (begin (simple-struct-set! h3191@ret h3195@i 'uninitialized) (h3193@loop (+ h3195@i '1) h3196@args)) (begin (simple-struct-set! h3191@ret h3195@i (car h3196@args)) (h3193@loop (+ h3195@i '1) (cdr h3196@args)))))))) h3193@loop) '0 h318f@args) h3191@ret)) (make-simple-struct 'rib '6)))) (set! h2dfb@rib? (lambda (h3199@x) (and (simple-struct? h3199@x) (eq? (simple-struct-name h3199@x) 'rib)))) (set! h2dfd@rib-sym* (lambda (h319b@x) (simple-struct-ref h319b@x '0))) (set! h2dff@set-rib-sym*! (lambda (h319d@x h319e@val) (simple-struct-set! h319d@x '0 h319e@val))) (set! h2e01@rib-mark** (lambda (h31a1@x) (simple-struct-ref h31a1@x '1))) (set! h2e03@set-rib-mark**! (lambda (h31a3@x h31a4@val) (simple-struct-set! h31a3@x '1 h31a4@val))) (set! h2e05@rib-label* (lambda (h31a7@x) (simple-struct-ref h31a7@x '2))) (set! h2e07@set-rib-label*! (lambda (h31a9@x h31aa@val) (simple-struct-set! h31a9@x '2 h31aa@val))) (set! h2e09@rib-sealed/freq (lambda (h31ad@x) (simple-struct-ref h31ad@x '3))) (set! h2e0b@set-rib-sealed/freq! (lambda (h31af@x h31b0@val) (simple-struct-set! h31af@x '3 h31b0@val))) (set! h2e0d@rib-cache (lambda (h31b3@x) (simple-struct-ref h31b3@x '4))) (set! h2e0f@set-rib-cache! (lambda (h31b5@x h31b6@val) (simple-struct-set! h31b5@x '4 h31b6@val))) (set! h2e11@dummy '3) (set! h2e13@make-empty-rib (lambda () (h2df9@make-rib '() '() '() '#f '#f))) (set! h2e15@extend-rib! (lambda (h31b9@rib h31ba@id h31bb@label) ((lambda (h31c0@find) (begin (set! h31c0@find (lambda (h31cd@sym h31ce@mark* h31cf@sym* h31d0@mark** h31d1@label*) (and (pair? h31cf@sym*) (if (and (eq? h31cd@sym (car h31cf@sym*)) (h2e5f@same-marks? h31ce@mark* (car h31d0@mark**))) h31d1@label* (h31c0@find h31cd@sym h31ce@mark* (cdr h31cf@sym*) (cdr h31d0@mark**) (cdr h31d1@label*)))))) (begin (if (h2e09@rib-sealed/freq h31b9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" h31b9@rib) (void)) ((lambda (h31c1@sym h31c2@mark*) ((lambda (h31c5@sym*) ((lambda (h31c7@t) (if h31c7@t ((lambda (h31c9@p) (if (not (eq? h31bb@label (car h31c9@p))) (if (h3142@top-level-context) (set-car! h31c9@p h31bb@label) (h3134@syntax-violation '#f '"multiple definitions of identifier" h31ba@id)) (void))) h31c7@t) (begin (if (h2e0d@rib-cache h31b9@rib) (hashtable-update! (h2e0d@rib-cache h31b9@rib) h31c1@sym (lambda (h31cb@e) (cons (cons h31c2@mark* h31bb@label) h31cb@e)) '()) (void)) (h2dff@set-rib-sym*! h31b9@rib (cons h31c1@sym h31c5@sym*)) (h2e03@set-rib-mark**! h31b9@rib (cons h31c2@mark* (h2e01@rib-mark** h31b9@rib))) (h2e07@set-rib-label*! h31b9@rib (cons h31bb@label (h2e05@rib-label* h31b9@rib)))))) (and (memq h31c1@sym (h2dfd@rib-sym* h31b9@rib)) (h31c0@find h31c1@sym h31c2@mark* h31c5@sym* (h2e01@rib-mark** h31b9@rib) (h2e05@rib-label* h31b9@rib))))) (h2dfd@rib-sym* h31b9@rib))) (h2e5d@id->sym h31ba@id) (h2e2b@stx-mark* h31ba@id))))) '#f))) (set! h2e17@extend-rib/nc! (lambda (h31d7@rib h31d8@id h31d9@label) ((lambda (h31dd@sym h31de@mark*) ((lambda (h31e1@sym*) (begin (if (h2e0d@rib-cache h31d7@rib) (hashtable-update! (h2e0d@rib-cache h31d7@rib) h31dd@sym (lambda (h31e3@e) (cons (cons h31de@mark* h31d9@label) h31e3@e)) '()) (void)) (h2dff@set-rib-sym*! h31d7@rib (cons h31dd@sym h31e1@sym*)) (h2e03@set-rib-mark**! h31d7@rib (cons h31de@mark* (h2e01@rib-mark** h31d7@rib))) (h2e07@set-rib-label*! h31d7@rib (cons h31d9@label (h2e05@rib-label* h31d7@rib))))) (h2dfd@rib-sym* h31d7@rib))) (h2e5d@id->sym h31d8@id) (h2e2b@stx-mark* h31d8@id)))) (set! h2e19@make-rib-map (lambda (h31e5@sym*) ((lambda (h31e7@ht) ((letrec ((h31e9@f (lambda (h31eb@i h31ec@sym*) (if (null? h31ec@sym*) h31e7@ht (begin (hashtable-update! h31e7@ht (car h31ec@sym*) (lambda (h31ef@x) (cons h31eb@i h31ef@x)) '()) (h31e9@f (+ h31eb@i '1) (cdr h31ec@sym*))))))) h31e9@f) '0 h31e5@sym*)) (make-eq-hashtable)))) (set! h2e1b@seal-rib! (lambda (h31f1@rib) ((lambda (h31f3@sym*) (if (not (null? h31f3@sym*)) (begin (h2dff@set-rib-sym*! h31f1@rib (list->vector h31f3@sym*)) (h2e03@set-rib-mark**! h31f1@rib (list->vector (h2e01@rib-mark** h31f1@rib))) (h2e07@set-rib-label*! h31f1@rib (list->vector (h2e05@rib-label* h31f1@rib))) (h2e0b@set-rib-sealed/freq! h31f1@rib (h2e19@make-rib-map h31f3@sym*))) (void))) (h2dfd@rib-sym* h31f1@rib)))) (set! h2e1d@unseal-rib! (lambda (h31f5@rib) (if (h2e09@rib-sealed/freq h31f5@rib) (begin (h2e0b@set-rib-sealed/freq! h31f5@rib '#f) (h2dff@set-rib-sym*! h31f5@rib (vector->list (h2dfd@rib-sym* h31f5@rib))) (h2e03@set-rib-mark**! h31f5@rib (vector->list (h2e01@rib-mark** h31f5@rib))) (h2e07@set-rib-label*! h31f5@rib (vector->list (h2e05@rib-label* h31f5@rib)))) (void)))) (set! h2e1f@make-full-rib (lambda (h31f7@id* h31f8@label*) ((lambda (h31fb@r) (begin (h2e1b@seal-rib! h31fb@r) h31fb@r)) (h2df9@make-rib (map h2e5d@id->sym h31f7@id*) (map h2e2b@stx-mark* h31f7@id*) h31f8@label* '#f '#f)))) (set! h2e21@rp (h29be@h28b7@make-record-printer 'stx (lambda (h31fd@x h31fe@p h31ff@wr) (begin (display '"#<syntax " h31fe@p) (write (h2e71@stx->datum h31fd@x) h31fe@p) ((lambda (h3203@expr) (if (h29b6@h28a7@annotation? h3203@expr) ((lambda (h3205@src) (if (pair? h3205@src) (begin (display '" [" h31fe@p) (display (cdr h3205@src) h31fe@p) (display '" of " h31fe@p) (display (car h3205@src) h31fe@p) (display '"]" h31fe@p)) (void))) (h29b7@h28a9@annotation-source h3203@expr)) (void))) (h2e27@stx-expr h31fd@x)) (display '">" h31fe@p))))) (set! h2e23@make-stx (lambda h3207@args ((lambda (h3209@ret) (begin ((letrec ((h320b@loop (lambda (h320d@i h320e@args) (if (= h320d@i '5) '() (if (null? h320e@args) (begin (simple-struct-set! h3209@ret h320d@i 'uninitialized) (h320b@loop (+ h320d@i '1) h320e@args)) (begin (simple-struct-set! h3209@ret h320d@i (car h320e@args)) (h320b@loop (+ h320d@i '1) (cdr h320e@args)))))))) h320b@loop) '0 h3207@args) h3209@ret)) (make-simple-struct 'stx '5)))) (set! h2e25@stx? (lambda (h3211@x) (and (simple-struct? h3211@x) (eq? (simple-struct-name h3211@x) 'stx)))) (set! h2e27@stx-expr (lambda (h3213@x) (simple-struct-ref h3213@x '0))) (set! h2e29@set-stx-expr! (lambda (h3215@x h3216@val) (simple-struct-set! h3215@x '0 h3216@val))) (set! h2e2b@stx-mark* (lambda (h3219@x) (simple-struct-ref h3219@x '1))) (set! h2e2d@set-stx-mark*! (lambda (h321b@x h321c@val) (simple-struct-set! h321b@x '1 h321c@val))) (set! h2e2f@stx-subst* (lambda (h321f@x) (simple-struct-ref h321f@x '2))) (set! h2e31@set-stx-subst*! (lambda (h3221@x h3222@val) (simple-struct-set! h3221@x '2 h3222@val))) (set! h2e33@stx-ae* (lambda (h3225@x) (simple-struct-ref h3225@x '3))) (set! h2e35@set-stx-ae*! (lambda (h3227@x h3228@val) (simple-struct-set! h3227@x '3 h3228@val))) (set! h2e37@dummy '3) (set! h2e39@datum->stx (lambda (h322b@id h322c@datum) (h2e23@make-stx h322c@datum (h2e2b@stx-mark* h322b@id) (h2e2f@stx-subst* h322b@id) (h2e33@stx-ae* h322b@id)))) (set! h2e3b@gen-mark (lambda () (string '#\m))) (set! h2e3d@anti-mark '#f) (set! h2e3f@anti-mark? not) (set! h2e41@join-wraps (lambda (h322f@m1* h3230@s1* h3231@ae1* h3232@e) ((lambda (h3238@cancel) (begin (set! h3238@cancel (lambda (h323f@ls1 h3240@ls2) ((letrec ((h3243@f (lambda (h3245@x h3246@ls1) (if (null? h3246@ls1) (cdr h3240@ls2) (cons h3245@x (h3243@f (car h3246@ls1) (cdr h3246@ls1))))))) h3243@f) (car h323f@ls1) (cdr h323f@ls1)))) ((lambda (h3239@m2* h323a@s2* h323b@ae2*) (if (and (not (null? h322f@m1*)) (not (null? h3239@m2*)) (h2e3f@anti-mark? (car h3239@m2*))) (values (h3238@cancel h322f@m1* h3239@m2*) (h3238@cancel h3230@s1* h323a@s2*) (h3238@cancel h3231@ae1* h323b@ae2*)) (values (append h322f@m1* h3239@m2*) (append h3230@s1* h323a@s2*) (append h3231@ae1* h323b@ae2*)))) (h2e2b@stx-mark* h3232@e) (h2e2f@stx-subst* h3232@e) (h2e33@stx-ae* h3232@e)))) '#f))) (set! h2e43@mkstx (lambda (h3249@e h324a@m* h324b@s* h324c@ae*) (if (and (h2e25@stx? h3249@e) (not (h2deb@top-marked? h324a@m*))) (call-with-values (lambda () (h2e41@join-wraps h324a@m* h324b@s* h324c@ae* h3249@e)) (lambda (h3257@h3252 h3258@h3254 h3259@h3256) ((lambda (h325d@ae* h325e@s* h325f@m*) (h2e23@make-stx (h2e27@stx-expr h3249@e) h325f@m* h325e@s* h325d@ae*)) h3259@h3256 h3258@h3254 h3257@h3252))) (h2e23@make-stx h3249@e h324a@m* h324b@s* h324c@ae*)))) (set! h2e45@add-mark (lambda (h3263@m h3264@e h3265@ae) (h2e43@mkstx h3264@e (list h3263@m) '(shift) (list h3265@ae)))) (set! h2e47@add-subst (lambda (h3269@subst h326a@e) (h2e43@mkstx h326a@e '() (list h3269@subst) '()))) (set! h2e49@syntax-kind? (lambda (h326d@x h326e@p?) (if (h2e25@stx? h326d@x) (h2e49@syntax-kind? (h2e27@stx-expr h326d@x) h326e@p?) (if (h29b6@h28a7@annotation? h326d@x) (h2e49@syntax-kind? (h29b8@h28ab@annotation-expression h326d@x) h326e@p?) (h326e@p? h326d@x))))) (set! h2e4b@syntax-vector->list (lambda (h3271@x) (if (h2e25@stx? h3271@x) ((lambda (h3273@ls h3274@m* h3275@s* h3276@ae*) (map (lambda (h327b@x) (h2e43@mkstx h327b@x h3274@m* h3275@s* h3276@ae*)) h3273@ls)) (h2e4b@syntax-vector->list (h2e27@stx-expr h3271@x)) (h2e2b@stx-mark* h3271@x) (h2e2f@stx-subst* h3271@x) (h2e33@stx-ae* h3271@x)) (if (h29b6@h28a7@annotation? h3271@x) (h2e4b@syntax-vector->list (h29b8@h28ab@annotation-expression h3271@x)) (if (vector? h3271@x) (vector->list h3271@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" h3271@x)))))) (set! h2e4d@syntax-pair? (lambda (h327d@x) (h2e49@syntax-kind? h327d@x pair?))) (set! h2e4f@syntax-vector? (lambda (h327f@x) (h2e49@syntax-kind? h327f@x vector?))) (set! h2e51@syntax-null? (lambda (h3281@x) (h2e49@syntax-kind? h3281@x null?))) (set! h2e53@syntax-list? (lambda (h3283@x) (or (h2e51@syntax-null? h3283@x) (and (h2e4d@syntax-pair? h3283@x) (h2e53@syntax-list? (h2e57@syntax-cdr h3283@x)))))) (set! h2e55@syntax-car (lambda (h3285@x) (if (h2e25@stx? h3285@x) (h2e43@mkstx (h2e55@syntax-car (h2e27@stx-expr h3285@x)) (h2e2b@stx-mark* h3285@x) (h2e2f@stx-subst* h3285@x) (h2e33@stx-ae* h3285@x)) (if (h29b6@h28a7@annotation? h3285@x) (h2e55@syntax-car (h29b8@h28ab@annotation-expression h3285@x)) (if (pair? h3285@x) (car h3285@x) (assertion-violation 'syntax-car '"BUG: not a pair" h3285@x)))))) (set! h2e57@syntax-cdr (lambda (h3287@x) (if (h2e25@stx? h3287@x) (h2e43@mkstx (h2e57@syntax-cdr (h2e27@stx-expr h3287@x)) (h2e2b@stx-mark* h3287@x) (h2e2f@stx-subst* h3287@x) (h2e33@stx-ae* h3287@x)) (if (h29b6@h28a7@annotation? h3287@x) (h2e57@syntax-cdr (h29b8@h28ab@annotation-expression h3287@x)) (if (pair? h3287@x) (cdr h3287@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" h3287@x)))))) (set! h2e59@syntax->list (lambda (h3289@x) (if (h2e4d@syntax-pair? h3289@x) (cons (h2e55@syntax-car h3289@x) (h2e59@syntax->list (h2e57@syntax-cdr h3289@x))) (if (h2e51@syntax-null? h3289@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" h3289@x))))) (set! h2e5b@id? (lambda (h328b@x) (and (h2e25@stx? h328b@x) (symbol? (h2e27@stx-expr h328b@x))))) (set! h2e5d@id->sym (lambda (h328d@x) (h2e27@stx-expr h328d@x))) (set! h2e5f@same-marks? (lambda (h328f@x h3290@y) (or (and (null? h328f@x) (null? h3290@y)) (and (pair? h328f@x) (pair? h3290@y) (eq? (car h328f@x) (car h3290@y)) (h2e5f@same-marks? (cdr h328f@x) (cdr h3290@y)))))) (set! h2e61@bound-id=? (lambda (h3293@x h3294@y) (and (eq? (h2e5d@id->sym h3293@x) (h2e5d@id->sym h3294@y)) (h2e5f@same-marks? (h2e2b@stx-mark* h3293@x) (h2e2b@stx-mark* h3294@y))))) (set! h2e63@free-id=? (lambda (h3297@i h3298@j) ((lambda (h329b@t0 h329c@t1) (if (or h329b@t0 h329c@t1) (eq? h329b@t0 h329c@t1) (eq? (h2e5d@id->sym h3297@i) (h2e5d@id->sym h3298@j)))) (h2e77@id->real-label h3297@i) (h2e77@id->real-label h3298@j)))) (set! h2e65@valid-bound-ids? (lambda (h329f@id*) (and (for-all h2e5b@id? h329f@id*) (h2e67@distinct-bound-ids? h329f@id*)))) (set! h2e67@distinct-bound-ids? (lambda (h32a1@id*) (or (null? h32a1@id*) (and (not (h2e69@bound-id-member? (car h32a1@id*) (cdr h32a1@id*))) (h2e67@distinct-bound-ids? (cdr h32a1@id*)))))) (set! h2e69@bound-id-member? (lambda (h32a3@id h32a4@id*) (and (pair? h32a4@id*) (or (h2e61@bound-id=? h32a3@id (car h32a4@id*)) (h2e69@bound-id-member? h32a3@id (cdr h32a4@id*)))))) (set! h2e6b@self-evaluating? (lambda (h32a7@x) (or (number? h32a7@x) (string? h32a7@x) (char? h32a7@x) (boolean? h32a7@x) (regexp? h32a7@x) (bytevector? h32a7@x)))) (set! h2e6d@strip-annotations (lambda (h32a9@x) (if (pair? h32a9@x) (cons (h2e6d@strip-annotations (car h32a9@x)) (h2e6d@strip-annotations (cdr h32a9@x))) (if (vector? h32a9@x) (vector-map h2e6d@strip-annotations h32a9@x) (if (h29b6@h28a7@annotation? h32a9@x) (h29b5@h28a5@annotation-stripped h32a9@x) h32a9@x))))) (set! h2e6f@strip (lambda (h32ab@x h32ac@m*) (if (h2deb@top-marked? h32ac@m*) (if (or (h29b6@h28a7@annotation? h32ab@x) (and (pair? h32ab@x) (h29b6@h28a7@annotation? (car h32ab@x))) (and (vector? h32ab@x) (> (vector-length h32ab@x) '0) (h29b6@h28a7@annotation? (vector-ref h32ab@x '0)))) (h2e6d@strip-annotations h32ab@x) h32ab@x) ((letrec ((h32af@f (lambda (h32b1@x) (if (h2e25@stx? h32b1@x) (h2e6f@strip (h2e27@stx-expr h32b1@x) (h2e2b@stx-mark* h32b1@x)) (if (h29b6@h28a7@annotation? h32b1@x) (h29b5@h28a5@annotation-stripped h32b1@x) (if (pair? h32b1@x) ((lambda (h32b3@a h32b4@d) (if (and (eq? h32b3@a (car h32b1@x)) (eq? h32b4@d (cdr h32b1@x))) h32b1@x (cons h32b3@a h32b4@d))) (h32af@f (car h32b1@x)) (h32af@f (cdr h32b1@x))) (if (vector? h32b1@x) ((lambda (h32b7@old) ((lambda (h32b9@new) (if (for-all eq? h32b7@old h32b9@new) h32b1@x (list->vector h32b9@new))) (map h32af@f h32b7@old))) (vector->list h32b1@x)) h32b1@x))))))) h32af@f) h32ab@x)))) (set! h2e71@stx->datum (lambda (h32bb@x) (h2e6f@strip h32bb@x '()))) (set! h2e73@same-marks*? (lambda (h32bd@mark* h32be@mark** h32bf@si) (if (null? h32bf@si) '#f (if (h2e5f@same-marks? h32bd@mark* (vector-ref h32be@mark** (car h32bf@si))) (car h32bf@si) (h2e73@same-marks*? h32bd@mark* h32be@mark** (cdr h32bf@si)))))) (set! h2e75@id->label (lambda (h32c3@id) (or (h2e77@id->real-label h32c3@id) ((lambda (h32c5@t) (if h32c5@t ((lambda (h32c7@env) ((lambda (h32c9@rib) (call-with-values (lambda () (h2df5@gen-define-label+loc h32c3@id h32c9@rib)) (lambda (h32cf@h32cc h32d0@h32ce) ((lambda (h32d3@loc_ h32d4@lab) (begin (h2e15@extend-rib! h32c9@rib h32c3@id h32d4@lab) h32d4@lab)) h32d0@h32ce h32cf@h32cc)))) (h30f4@interaction-env-rib h32c7@env))) h32c5@t) '#f)) (h3142@top-level-context))))) (set! h2e77@id->real-label (lambda (h32d7@id) ((lambda (h32d9@sym) ((letrec ((h32db@search (lambda (h32dd@subst* h32de@mark*) (if (null? h32dd@subst*) '#f (if (eq? (car h32dd@subst*) 'shift) (h32db@search (cdr h32dd@subst*) (cdr h32de@mark*)) ((lambda (h32e1@rib) ((lambda (h32e3@t) (if h32e3@t ((lambda (h32e5@ht) ((lambda (h32e7@si) ((lambda (h32e9@i) (if h32e9@i (vector-ref (h2e05@rib-label* h32e1@rib) h32e9@i) (h32db@search (cdr h32dd@subst*) h32de@mark*))) (and h32e7@si (h2e73@same-marks*? h32de@mark* (h2e01@rib-mark** h32e1@rib) (reverse h32e7@si))))) (hashtable-ref h32e5@ht h32d9@sym '#f))) h32e3@t) ((letrec ((h32eb@f (lambda (h32ed@sym* h32ee@mark** h32ef@label*) (if (null? h32ed@sym*) (h32db@search (cdr h32dd@subst*) h32de@mark*) (if (and (eq? (car h32ed@sym*) h32d9@sym) (h2e5f@same-marks? (car h32ee@mark**) h32de@mark*)) (car h32ef@label*) (h32eb@f (cdr h32ed@sym*) (cdr h32ee@mark**) (cdr h32ef@label*))))))) h32eb@f) (h2dfd@rib-sym* h32e1@rib) (h2e01@rib-mark** h32e1@rib) (h2e05@rib-label* h32e1@rib)))) (h2e09@rib-sealed/freq h32e1@rib))) (car h32dd@subst*))))))) h32db@search) (h2e2f@stx-subst* h32d7@id) (h2e2b@stx-mark* h32d7@id))) (h2e5d@id->sym h32d7@id)))) (set! h2e79@label->binding (lambda (h32f3@x h32f4@r) ((lambda (h32f7@t) (if h32f7@t ((lambda (h32f9@b) (if (and (pair? h32f9@b) (eq? (car h32f9@b) '$core-rtd)) (cons '$rtd (map h301c@bless (cdr h32f9@b))) (if (and (pair? h32f9@b) (eq? (car h32f9@b) 'global-rtd)) ((lambda (h32fb@lib h32fc@loc) (cons '$rtd (symbol-value h32fc@loc))) (cadr h32f9@b) (cddr h32f9@b)) h32f9@b))) h32f7@t) ((lambda (h32ff@t) (if h32ff@t (cdr h32ff@t) ((lambda (h3301@t) (if h3301@t ((lambda (h3303@env) ((lambda (h3305@t) (if h3305@t ((lambda (h3307@p) (cons* 'lexical (cdr h3307@p) '#f)) h3305@t) '(displaced-lexical . #f))) (assq h32f3@x (h30fc@interaction-env-locs h3303@env)))) h3301@t) '(displaced-lexical . #f))) (h3142@top-level-context)))) (assq h32f3@x h32f4@r)))) (h2c90@h2ad2@imported-label->binding h32f3@x)))) (set! h2e7b@make-binding cons) (set! h2e7d@binding-type car) (set! h2e7f@binding-value cdr) (set! h2e81@raise-unbound-error (lambda (h3309@id) (h3132@syntax-violation* '#f '"unbound identifier" h3309@id (h4f09@h4d4f@make-undefined-violation)))) (set! h2e83@syntax-type (lambda (h330b@e h330c@r) (if (h2e5b@id? h330b@e) ((lambda (h330f@id) ((lambda (h3311@label) ((lambda (h3313@b) ((lambda (h3315@type) ((lambda () (begin (if (not h3311@label) (h2e81@raise-unbound-error h330f@id) (void)) ((lambda (h3317@t) (if (memv h3317@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values h3315@type (h2e7f@binding-value h3313@b) h330f@id) (values 'other '#f '#f))) h3315@type))))) (h2e7d@binding-type h3313@b))) (h2e79@label->binding h3311@label h330c@r))) (h2e75@id->label h330f@id))) h330b@e) (if (h2e4d@syntax-pair? h330b@e) ((lambda (h3319@id) (if (h2e5b@id? h3319@id) ((lambda (h331b@label) ((lambda (h331d@b) ((lambda (h331f@type) ((lambda () (begin (if (not h331b@label) (h2e81@raise-unbound-error h3319@id) (void)) ((lambda (h3321@t) (if (memv h3321@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values h331f@type (h2e7f@binding-value h331d@b) h3319@id) (values 'call '#f '#f))) h331f@type))))) (h2e7d@binding-type h331d@b))) (h2e79@label->binding h331b@label h330c@r))) (h2e75@id->label h3319@id)) (values 'call '#f '#f))) (h2e55@syntax-car h330b@e)) ((lambda (h3323@d) (if (h2e6b@self-evaluating? h3323@d) (values 'constant h3323@d '#f) (values 'other '#f '#f))) (h2e71@stx->datum h330b@e)))))) (set! h2e91@sanitize-binding (lambda (h3325@x h3326@src) (if (procedure? h3325@x) (cons* 'local-macro h3325@x h3326@src) (if (and (pair? h3325@x) (eq? (car h3325@x) 'macro!) (procedure? (cdr h3325@x))) (cons* 'local-macro! (cdr h3325@x) h3326@src) (if (and (pair? h3325@x) (eq? (car h3325@x) '$rtd)) h3325@x (assertion-violation 'expand '"invalid transformer" h3325@x)))))) (set! h2e93@make-variable-transformer (lambda (h3329@x) (if (procedure? h3329@x) (cons 'macro! h3329@x) (assertion-violation 'make-variable-transformer '"not a procedure" h3329@x)))) (set! h2e95@variable-transformer? (lambda (h332b@x) (and (pair? h332b@x) (eq? (car h332b@x) 'macro!) (procedure? (cdr h332b@x))))) (set! h2e97@variable-transformer-procedure (lambda (h332d@x) (if (h2e95@variable-transformer? h332d@x) (cdr h332d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" h332d@x)))) (set! h2e99@make-eval-transformer (lambda (h332f@x) (h2e91@sanitize-binding (eval-core (h2a16@h29ce@expanded->core h332f@x)) h332f@x))) (set! h2fea@parse-define (lambda (h3331@x) ((lambda (h3333@t) ((lambda (h3335@ls/false) (if (and h3335@ls/false (apply (lambda (h3337@id h3338@fmls h3339@b h333a@b*) (h2e5b@id? h3337@id)) h3335@ls/false)) (apply (lambda (h333f@id h3340@fmls h3341@b h3342@b*) (begin (h308c@verify-formals h3340@fmls h3331@x) (values h333f@id (cons 'defun (cons h3340@fmls (cons h3341@b h3342@b*)))))) h3335@ls/false) ((lambda (h3347@t) ((lambda (h3349@ls/false) (if (and h3349@ls/false (apply (lambda (h334b@id h334c@val) (h2e5b@id? h334b@id)) h3349@ls/false)) (apply (lambda (h334f@id h3350@val) (values h334f@id (cons 'expr h3350@val))) h3349@ls/false) ((lambda (h3353@t) ((lambda (h3355@ls/false) (if (and h3355@ls/false (apply (lambda (h3357@id) (h2e5b@id? h3357@id)) h3355@ls/false)) (apply (lambda (h3359@id) (values h3359@id (cons 'expr (h301c@bless '(void))))) h3355@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3353@t))) (h3066@syntax-dispatch h3353@t '(_ any)))) h3347@t))) (h3066@syntax-dispatch h3347@t '(_ any any)))) h3333@t))) (h3066@syntax-dispatch h3333@t '(_ (any . any) any . each-any)))) h3331@x))) (set! h2fec@parse-define-syntax (lambda (h335b@x) ((lambda (h335d@t) ((lambda (h335f@ls/false) (if (and h335f@ls/false (apply (lambda (h3361@id h3362@val) (h2e5b@id? h3361@id)) h335f@ls/false)) (apply (lambda (h3365@id h3366@val) (values h3365@id h3366@val)) h335f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h335d@t))) (h3066@syntax-dispatch h335d@t '(_ any any)))) h335b@x))) (set! h2fee@scheme-stx-hashtable (make-eq-hashtable)) (set! h2ff0@scheme-stx (lambda (h3369@sym) (or (hashtable-ref h2fee@scheme-stx-hashtable h3369@sym '#f) ((lambda (h336b@subst) ((lambda (h336d@stx) ((lambda (h336f@stx) ((lambda () (begin (hashtable-set! h2fee@scheme-stx-hashtable h3369@sym h336f@stx) h336f@stx)))) ((lambda (h3371@t) (if h3371@t ((lambda (h3373@x) ((lambda (h3375@name h3376@label) (h2e47@add-subst (h2df9@make-rib (list h3375@name) (list h2de9@top-mark*) (list h3376@label) '#f '#f) h336d@stx)) (car h3373@x) (cdr h3373@x))) h3371@t) h336d@stx)) (assq h3369@sym h336b@subst)))) (h2e23@make-stx h3369@sym h2de9@top-mark* '() '()))) (h2c6c@h2a8a@library-subst (h2c8a@h2ac6@find-library-by-name '(psyntax system $all))))))) (set! h2ff2@lexical-var car) (set! h2ff4@lexical-mutable? cdr) (set! h2ff6@set-lexical-mutable! set-cdr!) (set! h2ff8@add-lexical (lambda (h3379@lab h337a@lex h337b@r) (cons (cons* h3379@lab 'lexical h337a@lex '#f) h337b@r))) (set! h2ffa@add-lexicals (lambda (h337f@lab* h3380@lex* h3381@r) (if (null? h337f@lab*) h3381@r (h2ffa@add-lexicals (cdr h337f@lab*) (cdr h3380@lex*) (h2ff8@add-lexical (car h337f@lab*) (car h3380@lex*) h3381@r))))) (set! h2ffc@letrec-helper (lambda (h3385@e h3386@r h3387@mr h3388@build) ((lambda (h338d@t) ((lambda (h338f@ls/false) (if h338f@ls/false (apply (lambda (h3391@lhs* h3392@rhs* h3393@b h3394@b*) (if (not (h2e65@valid-bound-ids? h3391@lhs*)) (h3020@invalid-fmls-error h3385@e h3391@lhs*) ((lambda (h3399@lex* h339a@lab*) ((lambda (h339d@rib h339e@r) ((lambda (h33a1@body h33a2@rhs*) (h3388@build '#f h3399@lex* h33a2@rhs* h33a1@body)) (h309e@chi-internal (h2e47@add-subst h339d@rib (cons h3393@b h3394@b*)) h339e@r h3387@mr) (h3084@chi-expr* (map (lambda (h33a5@x) (h2e47@add-subst h339d@rib h33a5@x)) h3392@rhs*) h339e@r h3387@mr))) (h2e1f@make-full-rib h3391@lhs* h339a@lab*) (h2ffa@add-lexicals h339a@lab* h3399@lex* h3386@r))) (map h2ded@gen-lexical h3391@lhs*) (map h2df1@gen-label h3391@lhs*)))) h338f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h338d@t))) (h3066@syntax-dispatch h338d@t '(_ #(each (any any)) any . each-any)))) h3385@e))) (set! h2ffe@letrec-transformer (lambda (h33a7@e h33a8@r h33a9@mr) (h2ffc@letrec-helper h33a7@e h33a8@r h33a9@mr h2dce@h2d3f@build-letrec))) (set! h3000@letrec*-transformer (lambda (h33ad@e h33ae@r h33af@mr) (h2ffc@letrec-helper h33ad@e h33ae@r h33af@mr h2dcf@h2d41@build-letrec*))) (set! h3002@fluid-let-syntax-transformer (lambda (h33b3@e h33b4@r h33b5@mr) ((lambda (h33ba@lookup) (begin (set! h33ba@lookup (lambda (h33cd@x) (or (h2e75@id->label h33cd@x) (h3134@syntax-violation '#f '"unbound identifier" h33b3@e h33cd@x)))) ((lambda (h33bb@t) ((lambda (h33bd@ls/false) (if h33bd@ls/false (apply (lambda (h33bf@lhs* h33c0@rhs* h33c1@b h33c2@b*) (if (not (h2e65@valid-bound-ids? h33bf@lhs*)) (h3020@invalid-fmls-error h33b3@e h33bf@lhs*) ((lambda (h33c7@lab* h33c8@rhs*) (h309e@chi-internal (cons h33c1@b h33c2@b*) (append (map cons h33c7@lab* h33c8@rhs*) h33b4@r) (append (map cons h33c7@lab* h33c8@rhs*) h33b5@mr))) (map h33ba@lookup h33bf@lhs*) (map (lambda (h33cb@x) (h2e99@make-eval-transformer (h30ba@expand-transformer h33cb@x h33b5@mr))) h33c0@rhs*)))) h33bd@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h33bb@t))) (h3066@syntax-dispatch h33bb@t '(_ #(each (any any)) any . each-any)))) h33b3@e))) '#f))) (set! h3004@type-descriptor-transformer (lambda (h33cf@e h33d0@r h33d1@mr) ((lambda (h33d5@t) ((lambda (h33d7@ls/false) (if (and h33d7@ls/false (apply (lambda (h33d9@id) (h2e5b@id? h33d9@id)) h33d7@ls/false)) (apply (lambda (h33db@id) ((lambda (h33dd@lab) ((lambda (h33df@b) ((lambda (h33e1@type) ((lambda () (begin (if (not h33dd@lab) (h2e81@raise-unbound-error h33db@id) (void)) (if (not (and (eq? h33e1@type '$rtd) (not (list? (h2e7f@binding-value h33df@b))))) (h3134@syntax-violation '#f '"not a record type" h33cf@e) (void)) (list 'quote (h2e7f@binding-value h33df@b)))))) (h2e7d@binding-type h33df@b))) (h2e79@label->binding h33dd@lab h33d0@r))) (h2e75@id->label h33db@id))) h33d7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h33d5@t))) (h3066@syntax-dispatch h33d5@t '(_ any)))) h33cf@e))) (set! h3006@record-type-descriptor-transformer (lambda (h33e3@e h33e4@r h33e5@mr) ((lambda (h33e9@t) ((lambda (h33eb@ls/false) (if (and h33eb@ls/false (apply (lambda (h33ed@id) (h2e5b@id? h33ed@id)) h33eb@ls/false)) (apply (lambda (h33ef@id) ((lambda (h33f1@lab) ((lambda (h33f3@b) ((lambda (h33f5@type) ((lambda () (begin (if (not h33f1@lab) (h2e81@raise-unbound-error h33ef@id) (void)) (if (not (and (eq? h33f5@type '$rtd) (list? (h2e7f@binding-value h33f3@b)))) (h3134@syntax-violation '#f '"not a record type" h33e3@e) (void)) (h3088@chi-expr (car (h2e7f@binding-value h33f3@b)) h33e4@r h33e5@mr))))) (h2e7d@binding-type h33f3@b))) (h2e79@label->binding h33f1@lab h33e4@r))) (h2e75@id->label h33ef@id))) h33eb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h33e9@t))) (h3066@syntax-dispatch h33e9@t '(_ any)))) h33e3@e))) (set! h3008@record-constructor-descriptor-transformer (lambda (h33f7@e h33f8@r h33f9@mr) ((lambda (h33fd@t) ((lambda (h33ff@ls/false) (if (and h33ff@ls/false (apply (lambda (h3401@id) (h2e5b@id? h3401@id)) h33ff@ls/false)) (apply (lambda (h3403@id) ((lambda (h3405@lab) ((lambda (h3407@b) ((lambda (h3409@type) ((lambda () (begin (if (not h3405@lab) (h2e81@raise-unbound-error h3403@id) (void)) (if (not (and (eq? h3409@type '$rtd) (list? (h2e7f@binding-value h3407@b)))) (h3134@syntax-violation '#f '"invalid type" h33f7@e) (void)) (h3088@chi-expr (cadr (h2e7f@binding-value h3407@b)) h33f8@r h33f9@mr))))) (h2e7d@binding-type h3407@b))) (h2e79@label->binding h3405@lab h33f8@r))) (h2e75@id->label h3403@id))) h33ff@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h33fd@t))) (h3066@syntax-dispatch h33fd@t '(_ any)))) h33f7@e))) (set! h300a@when-macro (lambda (h340b@e) ((lambda (h340d@t) ((lambda (h340f@ls/false) (if h340f@ls/false (apply (lambda (h3411@test h3412@e h3413@e*) (h301c@bless (list 'if h3411@test (cons 'begin (cons h3412@e h3413@e*))))) h340f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h340d@t))) (h3066@syntax-dispatch h340d@t '(_ any any . each-any)))) h340b@e))) (set! h300c@unless-macro (lambda (h3417@e) ((lambda (h3419@t) ((lambda (h341b@ls/false) (if h341b@ls/false (apply (lambda (h341d@test h341e@e h341f@e*) (h301c@bless (list 'if (list 'not h341d@test) (cons 'begin (cons h341e@e h341f@e*))))) h341b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3419@t))) (h3066@syntax-dispatch h3419@t '(_ any any . each-any)))) h3417@e))) (set! h300e@if-transformer (lambda (h3423@e h3424@r h3425@mr) ((lambda (h3429@t) ((lambda (h342b@ls/false) (if h342b@ls/false (apply (lambda (h342d@e0 h342e@e1 h342f@e2) (list 'if (h3088@chi-expr h342d@e0 h3424@r h3425@mr) (h3088@chi-expr h342e@e1 h3424@r h3425@mr) (h3088@chi-expr h342f@e2 h3424@r h3425@mr))) h342b@ls/false) ((lambda (h3433@t) ((lambda (h3435@ls/false) (if h3435@ls/false (apply (lambda (h3437@e0 h3438@e1) (list 'if (h3088@chi-expr h3437@e0 h3424@r h3425@mr) (h3088@chi-expr h3438@e1 h3424@r h3425@mr) (h2dcd@h2d3d@build-void))) h3435@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3433@t))) (h3066@syntax-dispatch h3433@t '(_ any any)))) h3429@t))) (h3066@syntax-dispatch h3429@t '(_ any any any)))) h3423@e))) (set! h3010@and-transformer (lambda (h343b@e h343c@r h343d@mr) ((lambda (h3441@t) ((lambda (h3443@ls/false) (if h3443@ls/false (apply (lambda (h3445@e*) (cons 'and (h3084@chi-expr* h3445@e* h343c@r h343d@mr))) h3443@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3441@t))) (h3066@syntax-dispatch h3441@t '(_ . each-any)))) h343b@e))) (set! h3012@or-transformer (lambda (h3447@e h3448@r h3449@mr) ((lambda (h344d@t) ((lambda (h344f@ls/false) (if h344f@ls/false (apply (lambda (h3451@e*) (cons 'or (h3084@chi-expr* h3451@e* h3448@r h3449@mr))) h344f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h344d@t))) (h3066@syntax-dispatch h344d@t '(_ . each-any)))) h3447@e))) (set! h3014@case-macro (lambda (h3453@e) ((lambda (h3456@build-last h3458@build-one) (begin (set! h3456@build-last (lambda (h347d@cls) ((lambda (h347f@t) ((lambda (h3481@ls/false) (if h3481@ls/false (apply (lambda (h3483@e h3484@e*) (cons 'begin (cons h3483@e h3484@e*))) h3481@ls/false) ((lambda (h3487@t) ((lambda (h3489@ls/false) (if h3489@ls/false (apply (lambda () (h3458@build-one h347d@cls '(if #f #f))) h3489@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3487@t))) (h3066@syntax-dispatch h3487@t '_))) h347f@t))) (h3066@syntax-dispatch h347f@t '(#(scheme-id else) any . each-any)))) h347d@cls))) (set! h3458@build-one (lambda (h346f@cls h3470@k) ((lambda (h3473@t) ((lambda (h3475@ls/false) (if h3475@ls/false (apply (lambda (h3477@d* h3478@e h3479@e*) (list 'if (list 'memv 't (list 'quote h3477@d*)) (cons 'begin (cons h3478@e h3479@e*)) h3470@k)) h3475@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3473@t))) (h3066@syntax-dispatch h3473@t '(each-any any . each-any)))) h346f@cls))) ((lambda (h3459@t) ((lambda (h345b@ls/false) (if h345b@ls/false (apply (lambda (h345d@expr) (h301c@bless (cons 'let (cons (list (list 't h345d@expr)) '((if #f #f)))))) h345b@ls/false) ((lambda (h345f@t) ((lambda (h3461@ls/false) (if h3461@ls/false (apply (lambda (h3463@expr h3464@cls h3465@cls*) (h301c@bless (list 'let (list (list 't h3463@expr)) ((letrec ((h3469@f (lambda (h346b@cls h346c@cls*) (if (null? h346c@cls*) (h3456@build-last h346b@cls) (h3458@build-one h346b@cls (h3469@f (car h346c@cls*) (cdr h346c@cls*))))))) h3469@f) h3464@cls h3465@cls*)))) h3461@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h345f@t))) (h3066@syntax-dispatch h345f@t '(_ any any . each-any)))) h3459@t))) (h3066@syntax-dispatch h3459@t '(_ any)))) h3453@e))) '#f '#f))) (set! h3016@quote-transformer (lambda (h348b@e h348c@r h348d@mr) ((lambda (h3491@t) ((lambda (h3493@ls/false) (if h3493@ls/false (apply (lambda (h3495@datum) (list 'quote (h2e71@stx->datum h3495@datum))) h3493@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3491@t))) (h3066@syntax-dispatch h3491@t '(_ any)))) h348b@e))) (set! h3018@case-lambda-transformer (lambda (h3497@e h3498@r h3499@mr) ((lambda (h349d@t) ((lambda (h349f@ls/false) (if h349f@ls/false (apply (lambda (h34a1@fmls* h34a2@b* h34a3@b**) (call-with-values (lambda () (h3090@chi-lambda-clause* h3497@e h34a1@fmls* (map cons h34a2@b* h34a3@b**) h3498@r h3499@mr)) (lambda (h34ab@h34a8 h34ac@h34aa) ((lambda (h34af@body* h34b0@fmls*) (h2dca@h2d0b@build-case-lambda '#f h34b0@fmls* h34af@body*)) h34ac@h34aa h34ab@h34a8)))) h349f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h349d@t))) (h3066@syntax-dispatch h349d@t '(_ . #(each (any any . each-any)))))) h3497@e))) (set! h301a@lambda-transformer (lambda (h34b3@e h34b4@r h34b5@mr) ((lambda (h34b9@t) ((lambda (h34bb@ls/false) (if h34bb@ls/false (apply (lambda (h34bd@fmls h34be@b h34bf@b*) (call-with-values (lambda () (h308e@chi-lambda-clause h34b3@e h34bd@fmls (cons h34be@b h34bf@b*) h34b4@r h34b5@mr)) (lambda (h34c7@h34c4 h34c8@h34c6) ((lambda (h34cb@body h34cc@fmls) (h2dc9@h2d09@build-lambda '#f h34cc@fmls h34cb@body)) h34c8@h34c6 h34c7@h34c4)))) h34bb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h34b9@t))) (h3066@syntax-dispatch h34b9@t '(_ any any . each-any)))) h34b3@e))) (set! h301c@bless (lambda (h34cf@x) (h2e43@mkstx ((letrec ((h34d1@f (lambda (h34d3@x) (if (h2e25@stx? h34d3@x) h34d3@x (if (pair? h34d3@x) (cons (h34d1@f (car h34d3@x)) (h34d1@f (cdr h34d3@x))) (if (symbol? h34d3@x) (h2ff0@scheme-stx h34d3@x) (if (vector? h34d3@x) (vector-map h34d1@f h34d3@x) h34d3@x))))))) h34d1@f) h34cf@x) '() '() '()))) (set! h301e@with-syntax-macro (lambda (h34d5@e) ((lambda (h34d7@t) ((lambda (h34d9@ls/false) (if h34d9@ls/false (apply (lambda (h34db@pat* h34dc@expr* h34dd@b h34de@b*) ((lambda (h34e3@idn*) (begin (h308c@verify-formals (map car h34e3@idn*) h34d5@e) ((lambda (h34e5@t*) (h301c@bless (list 'let (map list h34e5@t* h34dc@expr*) ((letrec ((h34e7@f (lambda (h34e9@pat* h34ea@t*) (if (null? h34e9@pat*) (cons 'begin (cons '#f (cons h34dd@b h34de@b*))) (list 'syntax-case (car h34ea@t*) '() (list (car h34e9@pat*) (h34e7@f (cdr h34e9@pat*) (cdr h34ea@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car h34e9@pat*)) (car h34ea@t*)))))))) h34e7@f) h34db@pat* h34e5@t*)))) (h3122@generate-temporaries h34dc@expr*)))) ((letrec ((h34ed@f (lambda (h34ef@pat*) (if (null? h34ef@pat*) '() (call-with-values (lambda () (h3064@convert-pattern (car h34ef@pat*) '())) (lambda (h34f5@h34f2 h34f6@h34f4) ((lambda (h34f9@idn* h34fa@pat) (append h34f9@idn* (h34ed@f (cdr h34ef@pat*)))) h34f6@h34f4 h34f5@h34f2))))))) h34ed@f) h34db@pat*))) h34d9@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h34d7@t))) (h3066@syntax-dispatch h34d7@t '(_ #(each (any any)) any . each-any)))) h34d5@e))) (set! h3020@invalid-fmls-error (lambda (h34fd@stx h34fe@fmls) ((lambda (h3501@t) ((lambda (h3503@ls/false) (if h3503@ls/false (apply (lambda (h3505@id* h3506@last) ((letrec ((h3509@f (lambda (h350b@id*) (if (null? h350b@id*) (values) (if (not (h2e5b@id? (car h350b@id*))) (h3134@syntax-violation '#f '"not an identifier" h34fd@stx (car h350b@id*)) (begin (h3509@f (cdr h350b@id*)) (if (h2e69@bound-id-member? (car h350b@id*) (cdr h350b@id*)) (h3134@syntax-violation '#f '"duplicate binding" h34fd@stx (car h350b@id*)) (void)))))))) h3509@f) (if (h2e5b@id? h3506@last) (cons h3506@last h3505@id*) (if (h2e51@syntax-null? h3506@last) h3505@id* (h3134@syntax-violation '#f '"not an identifier" h34fd@stx h3506@last))))) h3503@ls/false) ((lambda (h350d@t) ((lambda (h350f@ls/false) (if h350f@ls/false (apply (lambda () (h3134@syntax-violation '#f '"malformed binding form" h34fd@stx h34fe@fmls)) h350f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h350d@t))) (h3066@syntax-dispatch h350d@t '_))) h3501@t))) (h3066@syntax-dispatch h3501@t '#(each+ any () any)))) h34fe@fmls))) (set! h3022@let-macro (lambda (h3511@stx) ((lambda (h3513@t) ((lambda (h3515@ls/false) (if h3515@ls/false (apply (lambda (h3517@lhs* h3518@rhs* h3519@b h351a@b*) (if (h2e65@valid-bound-ids? h3517@lhs*) (h301c@bless (cons (cons 'lambda (cons h3517@lhs* (cons h3519@b h351a@b*))) h3518@rhs*)) (h3020@invalid-fmls-error h3511@stx h3517@lhs*))) h3515@ls/false) ((lambda (h351f@t) ((lambda (h3521@ls/false) (if (and h3521@ls/false (apply (lambda (h3523@f h3524@lhs* h3525@rhs* h3526@b h3527@b*) (h2e5b@id? h3523@f)) h3521@ls/false)) (apply (lambda (h352d@f h352e@lhs* h352f@rhs* h3530@b h3531@b*) (if (h2e65@valid-bound-ids? h352e@lhs*) (h301c@bless (cons (list 'letrec (list (list h352d@f (cons 'lambda (cons h352e@lhs* (cons h3530@b h3531@b*))))) h352d@f) h352f@rhs*)) (h3020@invalid-fmls-error h3511@stx h352e@lhs*))) h3521@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h351f@t))) (h3066@syntax-dispatch h351f@t '(_ any #(each (any any)) any . each-any)))) h3513@t))) (h3066@syntax-dispatch h3513@t '(_ #(each (any any)) any . each-any)))) h3511@stx))) (set! h3024@let-values-macro (lambda (h3537@stx) ((lambda (h353a@rename h353c@rename*) (begin (set! h353a@rename (lambda (h359f@x h35a0@old* h35a1@new*) (begin (if (not (h2e5b@id? h359f@x)) (h3134@syntax-violation '#f '"not an indentifier" h3537@stx h359f@x) (void)) (if (h2e69@bound-id-member? h359f@x h35a0@old*) (h3134@syntax-violation '#f '"duplicate binding" h3537@stx h359f@x) (void)) ((lambda (h35a5@y) (values h35a5@y (cons h359f@x h35a0@old*) (cons h35a5@y h35a1@new*))) (gensym (h313a@syntax->datum h359f@x)))))) (set! h353c@rename* (lambda (h358d@x* h358e@old* h358f@new*) (if (null? h358d@x*) (values '() h358e@old* h358f@new*) (call-with-values (lambda () (h353a@rename (car h358d@x*) h358e@old* h358f@new*)) (lambda (h3593@x h3594@old* h3595@new*) (call-with-values (lambda () (h353c@rename* (cdr h358d@x*) h3594@old* h3595@new*)) (lambda (h3599@x* h359a@old* h359b@new*) (values (cons h3593@x h3599@x*) h359a@old* h359b@new*)))))))) ((lambda (h353d@t) ((lambda (h353f@ls/false) (if h353f@ls/false (apply (lambda (h3541@b h3542@b*) (cons* (h301c@bless 'let) '() h3541@b h3542@b*)) h353f@ls/false) ((lambda (h3545@t) ((lambda (h3547@ls/false) (if h3547@ls/false (apply (lambda (h3549@lhs* h354a@rhs* h354b@b h354c@b*) (h301c@bless ((letrec ((h3551@f (lambda (h3553@lhs* h3554@rhs* h3555@old* h3556@new*) (if (null? h3553@lhs*) (cons 'let (cons (map list h3555@old* h3556@new*) (cons h354b@b h354c@b*))) ((lambda (h355b@t) ((lambda (h355d@ls/false) (if h355d@ls/false (apply (lambda (h355f@x*) (call-with-values (lambda () (h353c@rename* h355f@x* h3555@old* h3556@new*)) (lambda (h3567@h3562 h3568@h3564 h3569@h3566) ((lambda (h356d@new* h356e@old* h356f@y*) (list 'call-with-values (list 'lambda '() (car h3554@rhs*)) (list 'lambda h356f@y* (h3551@f (cdr h3553@lhs*) (cdr h3554@rhs*) h356e@old* h356d@new*)))) h3569@h3566 h3568@h3564 h3567@h3562)))) h355d@ls/false) ((lambda (h3573@t) ((lambda (h3575@ls/false) (if h3575@ls/false (apply (lambda (h3577@x* h3578@x) (call-with-values (lambda () (h353a@rename h3578@x h3555@old* h3556@new*)) (lambda (h357b@y h357c@old* h357d@new*) (call-with-values (lambda () (h353c@rename* h3577@x* h357c@old* h357d@new*)) (lambda (h3581@y* h3582@old* h3583@new*) (list 'call-with-values (list 'lambda '() (car h3554@rhs*)) (list 'lambda (append h3581@y* h357b@y) (h3551@f (cdr h3553@lhs*) (cdr h3554@rhs*) h3582@old* h3583@new*)))))))) h3575@ls/false) ((lambda (h3587@t) ((lambda (h3589@ls/false) (if h3589@ls/false (apply (lambda (h358b@others) (h3134@syntax-violation '#f '"malformed bindings" h3537@stx h358b@others)) h3589@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3587@t))) (h3066@syntax-dispatch h3587@t 'any))) h3573@t))) (h3066@syntax-dispatch h3573@t '#(each+ any () any)))) h355b@t))) (h3066@syntax-dispatch h355b@t 'each-any))) (car h3553@lhs*)))))) h3551@f) h3549@lhs* h354a@rhs* '() '()))) h3547@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3545@t))) (h3066@syntax-dispatch h3545@t '(_ #(each (any any)) any . each-any)))) h353d@t))) (h3066@syntax-dispatch h353d@t '(_ () any . each-any)))) h3537@stx))) '#f '#f))) (set! h3026@let*-values-macro (lambda (h35a7@stx) ((lambda (h35aa@check) (begin (set! h35aa@check (lambda (h35d9@x*) (if (not (null? h35d9@x*)) ((lambda (h35db@x) (begin (if (not (h2e5b@id? h35db@x)) (h3134@syntax-violation '#f '"not an identifier" h35a7@stx h35db@x) (void)) (h35aa@check (cdr h35d9@x*)) (if (h2e69@bound-id-member? h35db@x (cdr h35d9@x*)) (h3134@syntax-violation '#f '"duplicate identifier" h35a7@stx h35db@x) (void)))) (car h35d9@x*)) (void)))) ((lambda (h35ab@t) ((lambda (h35ad@ls/false) (if h35ad@ls/false (apply (lambda (h35af@b h35b0@b*) (cons* (h301c@bless 'let) '() h35af@b h35b0@b*)) h35ad@ls/false) ((lambda (h35b3@t) ((lambda (h35b5@ls/false) (if h35b5@ls/false (apply (lambda (h35b7@lhs* h35b8@rhs* h35b9@b h35ba@b*) (h301c@bless ((letrec ((h35bf@f (lambda (h35c1@lhs* h35c2@rhs*) (if (null? h35c1@lhs*) (cons 'begin (cons h35b9@b h35ba@b*)) ((lambda (h35c5@t) ((lambda (h35c7@ls/false) (if h35c7@ls/false (apply (lambda (h35c9@x*) (begin (h35aa@check h35c9@x*) (list 'call-with-values (list 'lambda '() (car h35c2@rhs*)) (list 'lambda h35c9@x* (h35bf@f (cdr h35c1@lhs*) (cdr h35c2@rhs*)))))) h35c7@ls/false) ((lambda (h35cb@t) ((lambda (h35cd@ls/false) (if h35cd@ls/false (apply (lambda (h35cf@x* h35d0@x) (begin (h35aa@check (cons h35d0@x h35cf@x*)) (list 'call-with-values (list 'lambda '() (car h35c2@rhs*)) (list 'lambda (append h35cf@x* h35d0@x) (h35bf@f (cdr h35c1@lhs*) (cdr h35c2@rhs*)))))) h35cd@ls/false) ((lambda (h35d3@t) ((lambda (h35d5@ls/false) (if h35d5@ls/false (apply (lambda (h35d7@others) (h3134@syntax-violation '#f '"malformed bindings" h35a7@stx h35d7@others)) h35d5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h35d3@t))) (h3066@syntax-dispatch h35d3@t 'any))) h35cb@t))) (h3066@syntax-dispatch h35cb@t '#(each+ any () any)))) h35c5@t))) (h3066@syntax-dispatch h35c5@t 'each-any))) (car h35c1@lhs*)))))) h35bf@f) h35b7@lhs* h35b8@rhs*))) h35b5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h35b3@t))) (h3066@syntax-dispatch h35b3@t '(_ #(each (any any)) any . each-any)))) h35ab@t))) (h3066@syntax-dispatch h35ab@t '(_ () any . each-any)))) h35a7@stx))) '#f))) (set! h3028@trace-lambda-macro (lambda (h35dd@stx) ((lambda (h35df@t) ((lambda (h35e1@ls/false) (if h35e1@ls/false (apply (lambda (h35e3@who h35e4@fmls h35e5@b h35e6@b*) (if (h2e65@valid-bound-ids? h35e4@fmls) (h301c@bless (list 'make-traced-procedure (list 'quote h35e3@who) (cons 'lambda (cons h35e4@fmls (cons h35e5@b h35e6@b*))))) (h3020@invalid-fmls-error h35dd@stx h35e4@fmls))) h35e1@ls/false) ((lambda (h35eb@t) ((lambda (h35ed@ls/false) (if h35ed@ls/false (apply (lambda (h35ef@who h35f0@fmls h35f1@last h35f2@b h35f3@b*) (if (h2e65@valid-bound-ids? (cons h35f1@last h35f0@fmls)) (h301c@bless (list 'make-traced-procedure (list 'quote h35ef@who) (cons 'lambda (cons (append h35f0@fmls h35f1@last) (cons h35f2@b h35f3@b*))))) (h3020@invalid-fmls-error h35dd@stx (append h35f0@fmls h35f1@last)))) h35ed@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h35eb@t))) (h3066@syntax-dispatch h35eb@t '(_ any #(each+ any () any) any . each-any)))) h35df@t))) (h3066@syntax-dispatch h35df@t '(_ any each-any any . each-any)))) h35dd@stx))) (set! h302a@trace-define-macro (lambda (h35f9@stx) ((lambda (h35fb@t) ((lambda (h35fd@ls/false) (if h35fd@ls/false (apply (lambda (h35ff@who h3600@fmls h3601@b h3602@b*) (if (h2e65@valid-bound-ids? h3600@fmls) (h301c@bless (list 'define h35ff@who (list 'make-traced-procedure (list 'quote h35ff@who) (cons 'lambda (cons h3600@fmls (cons h3601@b h3602@b*)))))) (h3020@invalid-fmls-error h35f9@stx h3600@fmls))) h35fd@ls/false) ((lambda (h3607@t) ((lambda (h3609@ls/false) (if h3609@ls/false (apply (lambda (h360b@who h360c@fmls h360d@last h360e@b h360f@b*) (if (h2e65@valid-bound-ids? (cons h360d@last h360c@fmls)) (h301c@bless (list 'define h360b@who (list 'make-traced-procedure (list 'quote h360b@who) (cons 'lambda (cons (append h360c@fmls h360d@last) (cons h360e@b h360f@b*)))))) (h3020@invalid-fmls-error h35f9@stx (append h360c@fmls h360d@last)))) h3609@ls/false) ((lambda (h3615@t) ((lambda (h3617@ls/false) (if h3617@ls/false (apply (lambda (h3619@who h361a@expr) (if (h2e5b@id? h3619@who) (h301c@bless (list 'define h3619@who (list 'let (list (list 'v h361a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote h3619@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (h3134@syntax-violation '#f '"invalid name" h35f9@stx))) h3617@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3615@t))) (h3066@syntax-dispatch h3615@t '(_ any any)))) h3607@t))) (h3066@syntax-dispatch h3607@t '(_ (any . #(each+ any () any)) any . each-any)))) h35fb@t))) (h3066@syntax-dispatch h35fb@t '(_ (any . each-any) any . each-any)))) h35f9@stx))) (set! h302c@trace-define-syntax-macro (lambda (h361d@stx) ((lambda (h361f@t) ((lambda (h3621@ls/false) (if h3621@ls/false (apply (lambda (h3623@who h3624@expr) (if (h2e5b@id? h3623@who) (h301c@bless (list 'define-syntax h3623@who (list 'make-traced-macro (list 'quote h3623@who) h3624@expr))) (h3134@syntax-violation '#f '"invalid name" h361d@stx))) h3621@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h361f@t))) (h3066@syntax-dispatch h361f@t '(_ any any)))) h361d@stx))) (set! h302e@trace-let/rec-syntax (lambda (h3627@who) (lambda (h3629@stx) ((lambda (h362b@t) ((lambda (h362d@ls/false) (if h362d@ls/false (apply (lambda (h362f@lhs* h3630@rhs* h3631@b h3632@b*) (if (h2e65@valid-bound-ids? h362f@lhs*) ((lambda (h3637@rhs*) (h301c@bless (cons h3627@who (cons (map list h362f@lhs* h3637@rhs*) (cons h3631@b h3632@b*))))) (map (lambda (h3639@lhs h363a@rhs) (list 'make-traced-macro (list 'quote h3639@lhs) h363a@rhs)) h362f@lhs* h3630@rhs*)) (h3020@invalid-fmls-error h3629@stx h362f@lhs*))) h362d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h362b@t))) (h3066@syntax-dispatch h362b@t '(_ #(each (any any)) any . each-any)))) h3629@stx)))) (set! h3030@trace-let-syntax-macro (h302e@trace-let/rec-syntax 'let-syntax)) (set! h3032@trace-letrec-syntax-macro (h302e@trace-let/rec-syntax 'letrec-syntax)) (set! h3034@guard-macro (lambda (h363d@x) ((lambda (h3640@gen-clauses) (begin (set! h3640@gen-clauses (lambda (h3657@con h3658@outerk h3659@clause*) ((lambda (h365e@f h3660@f*) (begin (set! h365e@f (lambda (h3697@x h3698@k) ((lambda (h369b@t) ((lambda (h369d@ls/false) (if h369d@ls/false (apply (lambda (h369f@e h36a0@p) ((lambda (h36a3@t) (list 'let (list (list h36a3@t h369f@e)) (list 'if h36a3@t (list h36a0@p h36a3@t) h3698@k))) (gensym))) h369d@ls/false) ((lambda (h36a5@t) ((lambda (h36a7@ls/false) (if h36a7@ls/false (apply (lambda (h36a9@e) ((lambda (h36ab@t) (list 'let (list (list h36ab@t h36a9@e)) (list 'if h36ab@t h36ab@t h3698@k))) (gensym))) h36a7@ls/false) ((lambda (h36ad@t) ((lambda (h36af@ls/false) (if h36af@ls/false (apply (lambda (h36b1@e h36b2@v h36b3@v*) (list 'if h36b1@e (cons 'begin (cons h36b2@v h36b3@v*)) h3698@k)) h36af@ls/false) ((lambda (h36b7@t) ((lambda (h36b9@ls/false) (if h36b9@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid guard clause" h3697@x)) h36b9@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36b7@t))) (h3066@syntax-dispatch h36b7@t '_))) h36ad@t))) (h3066@syntax-dispatch h36ad@t '(any any . each-any)))) h36a5@t))) (h3066@syntax-dispatch h36a5@t '(any)))) h369b@t))) (h3066@syntax-dispatch h369b@t '(any #(scheme-id =>) any)))) h3697@x))) (set! h3660@f* (lambda (h366d@x*) ((lambda (h366f@t) ((lambda (h3671@ls/false) (if h3671@ls/false (apply (lambda () ((lambda (h3673@g) (values (list h3673@g (list 'lambda '() (list 'raise-continuable h3657@con))) h3673@g)) (gensym))) h3671@ls/false) ((lambda (h3675@t) ((lambda (h3677@ls/false) (if h3677@ls/false (apply (lambda (h3679@e h367a@e*) (values (cons 'begin (cons h3679@e h367a@e*)) '#f)) h3677@ls/false) ((lambda (h367d@t) ((lambda (h367f@ls/false) (if h367f@ls/false (apply (lambda (h3681@cls h3682@cls*) (call-with-values (lambda () (h3660@f* h3682@cls*)) (lambda (h3689@h3686 h368a@h3688) ((lambda (h368d@g h368e@e) (values (h365e@f h3681@cls h368e@e) h368d@g)) h368a@h3688 h3689@h3686)))) h367f@ls/false) ((lambda (h3691@t) ((lambda (h3693@ls/false) (if h3693@ls/false (apply (lambda (h3695@others) (h3134@syntax-violation '#f '"invalid guard clause" h3695@others)) h3693@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3691@t))) (h3066@syntax-dispatch h3691@t 'any))) h367d@t))) (h3066@syntax-dispatch h367d@t '(any . any)))) h3675@t))) (h3066@syntax-dispatch h3675@t '((#(scheme-id else) any . each-any))))) h366f@t))) (h3066@syntax-dispatch h366f@t '()))) h366d@x*))) (call-with-values (lambda () (h3660@f* h3659@clause*)) (lambda (h3665@h3662 h3666@h3664) ((lambda (h3669@raisek h366a@code) (if h3669@raisek (list (list 'call/cc (list 'lambda (list h3669@raisek) (list h3658@outerk (list 'lambda '() h366a@code))))) (list h3658@outerk (list 'lambda '() h366a@code)))) h3666@h3664 h3665@h3662))))) '#f '#f))) ((lambda (h3641@t) ((lambda (h3643@ls/false) (if (and h3643@ls/false (apply (lambda (h3645@con h3646@clause* h3647@b h3648@b*) (h2e5b@id? h3645@con)) h3643@ls/false)) (apply (lambda (h364d@con h364e@clause* h364f@b h3650@b*) ((lambda (h3655@outerk) (h301c@bless (list (list 'call/cc (list 'lambda (list h3655@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list h364d@con) (h3640@gen-clauses h364d@con h3655@outerk h364e@clause*)) (cons 'lambda (cons '() (cons h364f@b h3650@b*)))))))))) (gensym))) h3643@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3641@t))) (h3066@syntax-dispatch h3641@t '(_ (any . each-any) any . each-any)))) h363d@x))) '#f))) (set! h3036@define-enumeration-macro (lambda (h36bb@stx) ((lambda (h36be@set? h36c0@remove-dups) (begin (set! h36be@set? (lambda (h36d7@x) (or (null? h36d7@x) (and (not (memq (car h36d7@x) (cdr h36d7@x))) (h36be@set? (cdr h36d7@x)))))) (set! h36c0@remove-dups (lambda (h36d5@ls) (if (null? h36d5@ls) '() (cons (car h36d5@ls) (h36c0@remove-dups (remq (car h36d5@ls) (cdr h36d5@ls))))))) ((lambda (h36c1@t) ((lambda (h36c3@ls/false) (if (and h36c3@ls/false (apply (lambda (h36c5@name h36c6@id* h36c7@maker) (and (h2e5b@id? h36c5@name) (h2e5b@id? h36c7@maker) (for-all h2e5b@id? h36c6@id*))) h36c3@ls/false)) (apply (lambda (h36cb@name h36cc@id* h36cd@maker) ((lambda (h36d1@name* h36d2@mk) (h301c@bless (list 'begin (list 'define h36d2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote h36d1@name*)))) (list 'define-syntax h36cb@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote h36d1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote h36cb@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax h36cd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote h36cd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote h36d1@name*)) (cons 'syntax-violation (cons (list 'quote h36cd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons h36d2@mk '('(n* ...)))))))))))) (h36c0@remove-dups (h313a@syntax->datum h36cc@id*)) (gensym))) h36c3@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36c1@t))) (h3066@syntax-dispatch h36c1@t '(_ any each-any any)))) h36bb@stx))) '#f '#f))) (set! h3038@time-macro (lambda (h36d9@stx) ((lambda (h36db@t) ((lambda (h36dd@ls/false) (if h36dd@ls/false (apply (lambda (h36df@expr) (h301c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() h36df@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) h36dd@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36db@t))) (h3066@syntax-dispatch h36db@t '(_ any)))) h36d9@stx))) (set! h303a@delay-macro (lambda (h36e1@stx) ((lambda (h36e3@t) ((lambda (h36e5@ls/false) (if h36e5@ls/false (apply (lambda (h36e7@expr) (h301c@bless (list 'make-promise (list 'lambda '() h36e7@expr)))) h36e5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36e3@t))) (h3066@syntax-dispatch h36e3@t '(_ any)))) h36e1@stx))) (set! h303c@assert-macro (lambda (h36e9@stx) ((lambda (h36eb@t) ((lambda (h36ed@ls/false) (if h36ed@ls/false (apply (lambda (h36ef@expr) ((lambda (h36f1@pos) (h301c@bless (list 'unless h36ef@expr (list 'assertion-error (list 'quote h36ef@expr) (list 'quote h36f1@pos))))) (or (h312c@expression-position h36e9@stx) (h312c@expression-position h36ef@expr)))) h36ed@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36eb@t))) (h3066@syntax-dispatch h36eb@t '(_ any)))) h36e9@stx))) (set! h303e@endianness-macro (lambda (h36f3@stx) ((lambda (h36f5@t) ((lambda (h36f7@ls/false) (if h36f7@ls/false (apply (lambda (h36f9@e) ((lambda (h36fb@t) (if (memv h36fb@t '(little)) (h301c@bless ''little) (if (memv h36fb@t '(big)) (h301c@bless ''big) (h3134@syntax-violation '#f '"endianness must be big or little" h36f3@stx)))) (h313a@syntax->datum h36f9@e))) h36f7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h36f5@t))) (h3066@syntax-dispatch h36f5@t '(_ any)))) h36f3@stx))) (set! h3040@identifier-syntax-macro (lambda (h36fd@stx) ((lambda (h36ff@t) ((lambda (h3701@ls/false) (if h3701@ls/false (apply (lambda (h3703@expr) (h301c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax h3703@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax h3703@expr) '((syntax (e* ...)))))))))) h3701@ls/false) ((lambda (h3705@t) ((lambda (h3707@ls/false) (if (and h3707@ls/false (apply (lambda (h3709@id1 h370a@expr1 h370b@id2 h370c@expr2 h370d@expr3) (and (h2e5b@id? h3709@id1) (h2e5b@id? h370b@id2) (h2e5b@id? h370c@expr2))) h3707@ls/false)) (apply (lambda (h3713@id1 h3714@expr1 h3715@id2 h3716@expr2 h3717@expr3) (h301c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax h3714@expr1)) (list (list 'set! 'id h3716@expr2) (list 'syntax h3717@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons h3714@expr1 '(e* ...))))))))) h3707@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3705@t))) (h3066@syntax-dispatch h3705@t '(_ (any any) ((#(scheme-id set!) any any) any))))) h36ff@t))) (h3066@syntax-dispatch h36ff@t '(_ any)))) h36fd@stx))) (set! h3042@do-macro (lambda (h371d@stx) ((lambda (h3720@bind) (begin (set! h3720@bind (lambda (h3737@x) ((lambda (h3739@t) ((lambda (h373b@ls/false) (if h373b@ls/false (apply (lambda (h373d@x h373e@init) (list h373d@x h373e@init h373d@x)) h373b@ls/false) ((lambda (h3741@t) ((lambda (h3743@ls/false) (if h3743@ls/false (apply (lambda (h3745@x h3746@init h3747@step) (list h3745@x h3746@init h3747@step)) h3743@ls/false) ((lambda (h374b@t) ((lambda (h374d@ls/false) (if h374d@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid binding" h371d@stx)) h374d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h374b@t))) (h3066@syntax-dispatch h374b@t '_))) h3741@t))) (h3066@syntax-dispatch h3741@t '(any any any)))) h3739@t))) (h3066@syntax-dispatch h3739@t '(any any)))) h3737@x))) ((lambda (h3721@t) ((lambda (h3723@ls/false) (if h3723@ls/false (apply (lambda (h3725@binding* h3726@test h3727@expr* h3728@command*) ((lambda (h372d@t) ((lambda (h372f@ls/false) (if h372f@ls/false (apply (lambda (h3731@x* h3732@init* h3733@step*) (if (h2e65@valid-bound-ids? h3731@x*) (h301c@bless (list 'letrec (list (list 'loop (list 'lambda h3731@x* (list 'if h3726@test (cons 'begin (cons '(if #f #f) h3727@expr*)) (cons 'begin (append h3728@command* (list (cons 'loop h3733@step*)))))))) (cons 'loop h3732@init*))) (h3134@syntax-violation '#f '"invalid bindings" h371d@stx))) h372f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h372d@t))) (h3066@syntax-dispatch h372d@t '#(each (any any any))))) (map h3720@bind h3725@binding*))) h3723@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3721@t))) (h3066@syntax-dispatch h3721@t '(_ each-any (any . each-any) . each-any)))) h371d@stx))) '#f))) (set! h3044@let*-macro (lambda (h374f@stx) ((lambda (h3751@t) ((lambda (h3753@ls/false) (if (and h3753@ls/false (apply (lambda (h3755@lhs* h3756@rhs* h3757@b h3758@b*) (for-all h2e5b@id? h3755@lhs*)) h3753@ls/false)) (apply (lambda (h375d@lhs* h375e@rhs* h375f@b h3760@b*) (h301c@bless ((letrec ((h3765@f (lambda (h3767@x*) (if (null? h3767@x*) (cons 'let (cons '() (cons h375f@b h3760@b*))) (list 'let (list (car h3767@x*)) (h3765@f (cdr h3767@x*))))))) h3765@f) (map list h375d@lhs* h375e@rhs*)))) h3753@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3751@t))) (h3066@syntax-dispatch h3751@t '(_ #(each (any any)) any . each-any)))) h374f@stx))) (set! h3046@or-macro (lambda (h3769@stx) ((lambda (h376b@t) ((lambda (h376d@ls/false) (if h376d@ls/false (apply (lambda () '#f) h376d@ls/false) ((lambda (h376f@t) ((lambda (h3771@ls/false) (if h3771@ls/false (apply (lambda (h3773@e h3774@e*) (h301c@bless ((letrec ((h3777@f (lambda (h3779@e h377a@e*) (if (null? h377a@e*) (list 'begin '#f h3779@e) (list 'let (list (list 't h3779@e)) (list 'if 't 't (h3777@f (car h377a@e*) (cdr h377a@e*)))))))) h3777@f) h3773@e h3774@e*))) h3771@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h376f@t))) (h3066@syntax-dispatch h376f@t '(_ any . each-any)))) h376b@t))) (h3066@syntax-dispatch h376b@t '(_)))) h3769@stx))) (set! h3048@and-macro (lambda (h377d@stx) ((lambda (h377f@t) ((lambda (h3781@ls/false) (if h3781@ls/false (apply (lambda () '#t) h3781@ls/false) ((lambda (h3783@t) ((lambda (h3785@ls/false) (if h3785@ls/false (apply (lambda (h3787@e h3788@e*) (h301c@bless ((letrec ((h378b@f (lambda (h378d@e h378e@e*) (if (null? h378e@e*) (list 'begin '#f h378d@e) (cons 'if (cons h378d@e (cons (h378b@f (car h378e@e*) (cdr h378e@e*)) '(#f)))))))) h378b@f) h3787@e h3788@e*))) h3785@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3783@t))) (h3066@syntax-dispatch h3783@t '(_ any . each-any)))) h377f@t))) (h3066@syntax-dispatch h377f@t '(_)))) h377d@stx))) (set! h304a@cond-macro (lambda (h3791@stx) ((lambda (h3793@t) ((lambda (h3795@ls/false) (if h3795@ls/false (apply (lambda (h3797@cls h3798@cls*) (h301c@bless ((letrec ((h379b@f (lambda (h379d@cls h379e@cls*) (if (null? h379e@cls*) ((lambda (h37a1@t) ((lambda (h37a3@ls/false) (if h37a3@ls/false (apply (lambda (h37a5@e h37a6@e*) (cons 'begin (cons h37a5@e h37a6@e*))) h37a3@ls/false) ((lambda (h37a9@t) ((lambda (h37ab@ls/false) (if h37ab@ls/false (apply (lambda (h37ad@e h37ae@p) (list 'let (list (list 't h37ad@e)) (list 'if 't (cons h37ae@p '(t))))) h37ab@ls/false) ((lambda (h37b1@t) ((lambda (h37b3@ls/false) (if h37b3@ls/false (apply (lambda (h37b5@e) (cons 'or (cons h37b5@e '((if #f #f))))) h37b3@ls/false) ((lambda (h37b7@t) ((lambda (h37b9@ls/false) (if h37b9@ls/false (apply (lambda (h37bb@e h37bc@e*) (list 'if h37bb@e (cons 'begin h37bc@e*))) h37b9@ls/false) ((lambda (h37bf@t) ((lambda (h37c1@ls/false) (if h37c1@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid last clause" h3791@stx)) h37c1@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h37bf@t))) (h3066@syntax-dispatch h37bf@t '_))) h37b7@t))) (h3066@syntax-dispatch h37b7@t '(any . each-any)))) h37b1@t))) (h3066@syntax-dispatch h37b1@t '(any)))) h37a9@t))) (h3066@syntax-dispatch h37a9@t '(any #(scheme-id =>) any)))) h37a1@t))) (h3066@syntax-dispatch h37a1@t '(#(scheme-id else) any . each-any)))) h379d@cls) ((lambda (h37c3@t) ((lambda (h37c5@ls/false) (if h37c5@ls/false (apply (lambda (h37c7@e h37c8@e*) (h3134@syntax-violation '#f '"incorrect position of keyword else" h3791@stx)) h37c5@ls/false) ((lambda (h37cb@t) ((lambda (h37cd@ls/false) (if h37cd@ls/false (apply (lambda (h37cf@e h37d0@p) (list 'let (list (list 't h37cf@e)) (list 'if 't (cons h37d0@p '(t)) (h379b@f (car h379e@cls*) (cdr h379e@cls*))))) h37cd@ls/false) ((lambda (h37d3@t) ((lambda (h37d5@ls/false) (if h37d5@ls/false (apply (lambda (h37d7@e) (list 'or h37d7@e (h379b@f (car h379e@cls*) (cdr h379e@cls*)))) h37d5@ls/false) ((lambda (h37d9@t) ((lambda (h37db@ls/false) (if h37db@ls/false (apply (lambda (h37dd@e h37de@e*) (list 'if h37dd@e (cons 'begin h37de@e*) (h379b@f (car h379e@cls*) (cdr h379e@cls*)))) h37db@ls/false) ((lambda (h37e1@t) ((lambda (h37e3@ls/false) (if h37e3@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid last clause" h3791@stx)) h37e3@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h37e1@t))) (h3066@syntax-dispatch h37e1@t '_))) h37d9@t))) (h3066@syntax-dispatch h37d9@t '(any . each-any)))) h37d3@t))) (h3066@syntax-dispatch h37d3@t '(any)))) h37cb@t))) (h3066@syntax-dispatch h37cb@t '(any #(scheme-id =>) any)))) h37c3@t))) (h3066@syntax-dispatch h37c3@t '(#(scheme-id else) any . each-any)))) h379d@cls))))) h379b@f) h3797@cls h3798@cls*))) h3795@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3793@t))) (h3066@syntax-dispatch h3793@t '(_ any . each-any)))) h3791@stx))) (set! h304c@do-include (lambda (h37e5@stx h37e6@id h37e7@filename) ((lambda (h37eb@filename) (begin (if (not (and (string? h37eb@filename) (h2e5b@id? h37e6@id))) (h3134@syntax-violation '#f '"invalid syntax" h37e5@stx) (void)) (cons (h301c@bless 'begin) (with-input-from-file h37eb@filename (lambda () ((letrec ((h37ed@f (lambda (h37ef@ls) ((lambda (h37f1@x) (if (eof-object? h37f1@x) (reverse h37ef@ls) (h37ed@f (cons (h2e39@datum->stx h37e6@id h37f1@x) h37ef@ls)))) (h29b4@h28a3@read-annotated))))) h37ed@f) '())))))) (h2e71@stx->datum h37e7@filename)))) (set! h304e@include-macro (lambda (h37f3@e) ((lambda (h37f5@t) ((lambda (h37f7@ls/false) (if h37f7@ls/false (apply (lambda (h37f9@id h37fa@filename) (h304c@do-include h37f3@e h37f9@id h37fa@filename)) h37f7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h37f5@t))) (h3066@syntax-dispatch h37f5@t '(any any)))) h37f3@e))) (set! h3050@include-into-macro (lambda (h37fd@e) ((lambda (h37ff@t) ((lambda (h3801@ls/false) (if h3801@ls/false (apply (lambda (h3803@id h3804@filename) (h304c@do-include h37fd@e h3803@id h3804@filename)) h3801@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h37ff@t))) (h3066@syntax-dispatch h37ff@t '(_ any any)))) h37fd@e))) (set! h3052@syntax-rules-macro (lambda (h3807@e) ((lambda (h3809@t) ((lambda (h380b@ls/false) (if h380b@ls/false (apply (lambda (h380d@lits h380e@pat* h380f@tmp*) (begin (h306c@verify-literals h380d@lits h3807@e) (h301c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons h380d@lits (map (lambda (h3813@pat h3814@tmp) ((lambda (h3817@t) ((lambda (h3819@ls/false) (if h3819@ls/false (apply (lambda (h381b@rest) (list (cons 'g h381b@rest) (list 'syntax h3814@tmp))) h3819@ls/false) ((lambda (h381d@t) ((lambda (h381f@ls/false) (if h381f@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid syntax-rules pattern" h3807@e h3813@pat)) h381f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h381d@t))) (h3066@syntax-dispatch h381d@t '_))) h3817@t))) (h3066@syntax-dispatch h3817@t '(_ . any)))) h3813@pat)) h380e@pat* h380f@tmp*)))))))) h380b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3809@t))) (h3066@syntax-dispatch h3809@t '(_ each-any . #(each (any any)))))) h3807@e))) (set! h3054@quasiquote-macro ((lambda () ((lambda (h3822@datum h383e@quasicons* h3840@quasicons h3842@quasiappend h3844@quasivector h3846@vquasi h3848@quasi) (begin (set! h3822@datum (lambda (h3923@x) (list (h2ff0@scheme-stx 'quote) (h2e43@mkstx h3923@x '() '() '())))) (set! h383e@quasicons* (lambda (h391b@x h391c@y) ((letrec ((h391f@f (lambda (h3921@x) (if (null? h3921@x) h391c@y (h3840@quasicons (car h3921@x) (h391f@f (cdr h3921@x))))))) h391f@f) h391b@x))) (set! h3840@quasicons (lambda (h38f5@x h38f6@y) ((lambda (h38f9@t) ((lambda (h38fb@ls/false) (if h38fb@ls/false (apply (lambda (h38fd@dy) ((lambda (h38ff@t) ((lambda (h3901@ls/false) (if h3901@ls/false (apply (lambda (h3903@dx) (list (h2ff0@scheme-stx 'quote) (cons h3903@dx h38fd@dy))) h3901@ls/false) ((lambda (h3905@t) ((lambda (h3907@ls/false) (if h3907@ls/false (apply (lambda () ((lambda (h3909@t) ((lambda (h390b@ls/false) (if h390b@ls/false (apply (lambda () (list (h2ff0@scheme-stx 'list) h38f5@x)) h390b@ls/false) ((lambda (h390d@t) ((lambda (h390f@ls/false) (if h390f@ls/false (apply (lambda () (list (h2ff0@scheme-stx 'cons) h38f5@x h38f6@y)) h390f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h390d@t))) (h3066@syntax-dispatch h390d@t '_))) h3909@t))) (h3066@syntax-dispatch h3909@t '()))) h38fd@dy)) h3907@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3905@t))) (h3066@syntax-dispatch h3905@t '_))) h38ff@t))) (h3066@syntax-dispatch h38ff@t '(#(scheme-id quote) any)))) h38f5@x)) h38fb@ls/false) ((lambda (h3911@t) ((lambda (h3913@ls/false) (if h3913@ls/false (apply (lambda (h3915@stuff) (cons* (h2ff0@scheme-stx 'list) h38f5@x h3915@stuff)) h3913@ls/false) ((lambda (h3917@t) ((lambda (h3919@ls/false) (if h3919@ls/false (apply (lambda () (list (h2ff0@scheme-stx 'cons) h38f5@x h38f6@y)) h3919@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3917@t))) (h3066@syntax-dispatch h3917@t '_))) h3911@t))) (h3066@syntax-dispatch h3911@t '(#(scheme-id list) . each-any)))) h38f9@t))) (h3066@syntax-dispatch h38f9@t '(#(scheme-id quote) any)))) h38f6@y))) (set! h3842@quasiappend (lambda (h38db@x h38dc@y) ((lambda (h38df@ls) (if (null? h38df@ls) (list (h2ff0@scheme-stx 'quote) '()) (if (null? (cdr h38df@ls)) (car h38df@ls) (cons* (h2ff0@scheme-stx 'append) h38df@ls)))) ((letrec ((h38e1@f (lambda (h38e3@x) (if (null? h38e3@x) ((lambda (h38e5@t) ((lambda (h38e7@ls/false) (if h38e7@ls/false (apply (lambda () '()) h38e7@ls/false) ((lambda (h38e9@t) ((lambda (h38eb@ls/false) (if h38eb@ls/false (apply (lambda () (list h38dc@y)) h38eb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h38e9@t))) (h3066@syntax-dispatch h38e9@t '_))) h38e5@t))) (h3066@syntax-dispatch h38e5@t '(#(scheme-id quote) ())))) h38dc@y) ((lambda (h38ed@t) ((lambda (h38ef@ls/false) (if h38ef@ls/false (apply (lambda () (h38e1@f (cdr h38e3@x))) h38ef@ls/false) ((lambda (h38f1@t) ((lambda (h38f3@ls/false) (if h38f3@ls/false (apply (lambda () (cons (car h38e3@x) (h38e1@f (cdr h38e3@x)))) h38f3@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h38f1@t))) (h3066@syntax-dispatch h38f1@t '_))) h38ed@t))) (h3066@syntax-dispatch h38ed@t '(#(scheme-id quote) ())))) (car h38e3@x)))))) h38e1@f) h38db@x)))) (set! h3844@quasivector (lambda (h38a9@x) ((lambda (h38ab@pat-x) ((lambda (h38ad@t) ((lambda (h38af@ls/false) (if h38af@ls/false (apply (lambda (h38b1@x*) (list (h2ff0@scheme-stx 'quote) (list->vector h38b1@x*))) h38af@ls/false) ((lambda (h38b3@t) ((lambda (h38b5@ls/false) (if h38b5@ls/false (apply (lambda () ((letrec ((h38b7@f (lambda (h38b9@x h38ba@k) ((lambda (h38bd@t) ((lambda (h38bf@ls/false) (if h38bf@ls/false (apply (lambda (h38c1@x*) (h38ba@k (map (lambda (h38c3@x) (list (h2ff0@scheme-stx 'quote) h38c3@x)) h38c1@x*))) h38bf@ls/false) ((lambda (h38c5@t) ((lambda (h38c7@ls/false) (if h38c7@ls/false (apply (lambda (h38c9@x*) (h38ba@k h38c9@x*)) h38c7@ls/false) ((lambda (h38cb@t) ((lambda (h38cd@ls/false) (if h38cd@ls/false (apply (lambda (h38cf@x h38d0@y) (h38b7@f h38d0@y (lambda (h38d3@ls) (h38ba@k (cons h38cf@x h38d3@ls))))) h38cd@ls/false) ((lambda (h38d5@t) ((lambda (h38d7@ls/false) (if h38d7@ls/false (apply (lambda () (list (h2ff0@scheme-stx 'list->vector) h38ab@pat-x)) h38d7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h38d5@t))) (h3066@syntax-dispatch h38d5@t '_))) h38cb@t))) (h3066@syntax-dispatch h38cb@t '(#(scheme-id cons) any any)))) h38c5@t))) (h3066@syntax-dispatch h38c5@t '(#(scheme-id list) . each-any)))) h38bd@t))) (h3066@syntax-dispatch h38bd@t '(#(scheme-id quote) each-any)))) h38b9@x)))) h38b7@f) h38a9@x (lambda (h38d9@ls) (cons* (h2ff0@scheme-stx 'vector) h38d9@ls)))) h38b5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h38b3@t))) (h3066@syntax-dispatch h38b3@t '_))) h38ad@t))) (h3066@syntax-dispatch h38ad@t '(#(scheme-id quote) each-any)))) h38ab@pat-x)) h38a9@x))) (set! h3846@vquasi (lambda (h3887@p h3888@lev) ((lambda (h388b@t) ((lambda (h388d@ls/false) (if h388d@ls/false (apply (lambda (h388f@p h3890@q) ((lambda (h3893@t) ((lambda (h3895@ls/false) (if h3895@ls/false (apply (lambda (h3897@p) (if (= h3888@lev '0) (h383e@quasicons* h3897@p (h3846@vquasi h3890@q h3888@lev)) (h3840@quasicons (h3840@quasicons (h3822@datum 'unquote) (h3848@quasi h3897@p (- h3888@lev '1))) (h3846@vquasi h3890@q h3888@lev)))) h3895@ls/false) ((lambda (h3899@t) ((lambda (h389b@ls/false) (if h389b@ls/false (apply (lambda (h389d@p) (if (= h3888@lev '0) (h3842@quasiappend h389d@p (h3846@vquasi h3890@q h3888@lev)) (h3840@quasicons (h3840@quasicons (h3822@datum 'unquote-splicing) (h3848@quasi h389d@p (- h3888@lev '1))) (h3846@vquasi h3890@q h3888@lev)))) h389b@ls/false) ((lambda (h389f@t) ((lambda (h38a1@ls/false) (if h38a1@ls/false (apply (lambda (h38a3@p) (h3840@quasicons (h3848@quasi h38a3@p h3888@lev) (h3846@vquasi h3890@q h3888@lev))) h38a1@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h389f@t))) (h3066@syntax-dispatch h389f@t 'any))) h3899@t))) (h3066@syntax-dispatch h3899@t '(#(scheme-id unquote-splicing) . each-any)))) h3893@t))) (h3066@syntax-dispatch h3893@t '(#(scheme-id unquote) . each-any)))) h388f@p)) h388d@ls/false) ((lambda (h38a5@t) ((lambda (h38a7@ls/false) (if h38a7@ls/false (apply (lambda () (list (h2ff0@scheme-stx 'quote) '())) h38a7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h38a5@t))) (h3066@syntax-dispatch h38a5@t '()))) h388b@t))) (h3066@syntax-dispatch h388b@t '(any . any)))) h3887@p))) (set! h3848@quasi (lambda (h3851@p h3852@lev) ((lambda (h3855@t) ((lambda (h3857@ls/false) (if h3857@ls/false (apply (lambda (h3859@p) (if (= h3852@lev '0) h3859@p (h3840@quasicons (h3822@datum 'unquote) (h3848@quasi (list h3859@p) (- h3852@lev '1))))) h3857@ls/false) ((lambda (h385b@t) ((lambda (h385d@ls/false) (if h385d@ls/false (apply (lambda (h385f@p h3860@q) (if (= h3852@lev '0) (h383e@quasicons* h385f@p (h3848@quasi h3860@q h3852@lev)) (h3840@quasicons (h3840@quasicons (h3822@datum 'unquote) (h3848@quasi h385f@p (- h3852@lev '1))) (h3848@quasi h3860@q h3852@lev)))) h385d@ls/false) ((lambda (h3863@t) ((lambda (h3865@ls/false) (if h3865@ls/false (apply (lambda (h3867@p h3868@q) (if (= h3852@lev '0) (h3842@quasiappend h3867@p (h3848@quasi h3868@q h3852@lev)) (h3840@quasicons (h3840@quasicons (h3822@datum 'unquote-splicing) (h3848@quasi h3867@p (- h3852@lev '1))) (h3848@quasi h3868@q h3852@lev)))) h3865@ls/false) ((lambda (h386b@t) ((lambda (h386d@ls/false) (if h386d@ls/false (apply (lambda (h386f@p) (h3840@quasicons (h3822@datum 'quasiquote) (h3848@quasi (list h386f@p) (+ h3852@lev '1)))) h386d@ls/false) ((lambda (h3871@t) ((lambda (h3873@ls/false) (if h3873@ls/false (apply (lambda (h3875@p h3876@q) (h3840@quasicons (h3848@quasi h3875@p h3852@lev) (h3848@quasi h3876@q h3852@lev))) h3873@ls/false) ((lambda (h3879@t) ((lambda (h387b@ls/false) (if (and h387b@ls/false (apply (lambda (h387d@x) (not (h2e25@stx? h387d@x))) h387b@ls/false)) (apply (lambda (h387f@x) (h3844@quasivector (h3846@vquasi h387f@x h3852@lev))) h387b@ls/false) ((lambda (h3881@t) ((lambda (h3883@ls/false) (if h3883@ls/false (apply (lambda (h3885@p) (list (h2ff0@scheme-stx 'quote) h3885@p)) h3883@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3881@t))) (h3066@syntax-dispatch h3881@t 'any))) h3879@t))) (h3066@syntax-dispatch h3879@t '#(vector each-any)))) h3871@t))) (h3066@syntax-dispatch h3871@t '(any . any)))) h386b@t))) (h3066@syntax-dispatch h386b@t '(#(scheme-id quasiquote) any)))) h3863@t))) (h3066@syntax-dispatch h3863@t '((#(scheme-id unquote-splicing) . each-any) . any)))) h385b@t))) (h3066@syntax-dispatch h385b@t '((#(scheme-id unquote) . each-any) . any)))) h3855@t))) (h3066@syntax-dispatch h3855@t '(#(scheme-id unquote) any)))) h3851@p))) (lambda (h3849@x) ((lambda (h384b@t) ((lambda (h384d@ls/false) (if h384d@ls/false (apply (lambda (h384f@e) (h3848@quasi h384f@e '0)) h384d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h384b@t))) (h3066@syntax-dispatch h384b@t '(_ any)))) h3849@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! h3056@quasisyntax-macro ((lambda () ((lambda (h3926@quasi) (begin (set! h3926@quasi (lambda (h3941@p h3942@lev) ((lambda (h3945@t) ((lambda (h3947@ls/false) (if h3947@ls/false (apply (lambda (h3949@p) (if (= h3942@lev '0) ((lambda (h394b@g) (values (list h394b@g) (list h3949@p) h394b@g)) (gensym)) (call-with-values (lambda () (h3926@quasi h3949@p (- h3942@lev '1))) (lambda (h3953@h394e h3954@h3950 h3955@h3952) ((lambda (h3959@p h395a@rhs* h395b@lhs*) (values h395b@lhs* h395a@rhs* (list 'unsyntax h3959@p))) h3955@h3952 h3954@h3950 h3953@h394e))))) h3947@ls/false) ((lambda (h395f@t) ((lambda (h3961@ls/false) (if (and h3961@ls/false (apply (lambda () (= h3942@lev '0)) h3961@ls/false)) (apply (lambda () (h3134@syntax-violation '#f '"incorrect use of unsyntax" h3941@p)) h3961@ls/false) ((lambda (h3963@t) ((lambda (h3965@ls/false) (if h3965@ls/false (apply (lambda (h3967@p* h3968@q) (call-with-values (lambda () (h3926@quasi h3968@q h3942@lev)) (lambda (h3971@h396c h3972@h396e h3973@h3970) ((lambda (h3977@q h3978@rhs* h3979@lhs*) (if (= h3942@lev '0) ((lambda (h397d@g*) (values (append h397d@g* h3979@lhs*) (append h3967@p* h3978@rhs*) (append h397d@g* h3977@q))) (map (lambda (h397f@x) (gensym)) h3967@p*)) (call-with-values (lambda () (h3926@quasi h3967@p* (- h3942@lev '1))) (lambda (h3987@h3982 h3988@h3984 h3989@h3986) ((lambda (h398d@p* h398e@rhs2* h398f@lhs2*) (values (append h398f@lhs2* h3979@lhs*) (append h398e@rhs2* h3978@rhs*) (cons (cons 'unsyntax h398d@p*) h3977@q))) h3989@h3986 h3988@h3984 h3987@h3982))))) h3973@h3970 h3972@h396e h3971@h396c)))) h3965@ls/false) ((lambda (h3993@t) ((lambda (h3995@ls/false) (if h3995@ls/false (apply (lambda (h3997@p* h3998@q) (call-with-values (lambda () (h3926@quasi h3998@q h3942@lev)) (lambda (h39a1@h399c h39a2@h399e h39a3@h39a0) ((lambda (h39a7@q h39a8@rhs* h39a9@lhs*) (if (= h3942@lev '0) ((lambda (h39ad@g*) (values (append (map (lambda (h39af@g) (cons h39af@g '(...))) h39ad@g*) h39a9@lhs*) (append h3997@p* h39a8@rhs*) (append (apply append (map (lambda (h39b1@g) (cons h39b1@g '(...))) h39ad@g*)) h39a7@q))) (map (lambda (h39b3@x) (gensym)) h3997@p*)) (call-with-values (lambda () (h3926@quasi h3997@p* (- h3942@lev '1))) (lambda (h39bb@h39b6 h39bc@h39b8 h39bd@h39ba) ((lambda (h39c1@p* h39c2@rhs2* h39c3@lhs2*) (values (append h39c3@lhs2* h39a9@lhs*) (append h39c2@rhs2* h39a8@rhs*) (cons (cons 'unsyntax-splicing h39c1@p*) h39a7@q))) h39bd@h39ba h39bc@h39b8 h39bb@h39b6))))) h39a3@h39a0 h39a2@h399e h39a1@h399c)))) h3995@ls/false) ((lambda (h39c7@t) ((lambda (h39c9@ls/false) (if (and h39c9@ls/false (apply (lambda () (= h3942@lev '0)) h39c9@ls/false)) (apply (lambda () (h3134@syntax-violation '#f '"incorrect use of unsyntax-splicing" h3941@p)) h39c9@ls/false) ((lambda (h39cb@t) ((lambda (h39cd@ls/false) (if h39cd@ls/false (apply (lambda (h39cf@p) (call-with-values (lambda () (h3926@quasi h39cf@p (+ h3942@lev '1))) (lambda (h39d7@h39d2 h39d8@h39d4 h39d9@h39d6) ((lambda (h39dd@p h39de@rhs* h39df@lhs*) (values h39df@lhs* h39de@rhs* (list 'quasisyntax h39dd@p))) h39d9@h39d6 h39d8@h39d4 h39d7@h39d2)))) h39cd@ls/false) ((lambda (h39e3@t) ((lambda (h39e5@ls/false) (if h39e5@ls/false (apply (lambda (h39e7@p h39e8@q) (call-with-values (lambda () (h3926@quasi h39e7@p h3942@lev)) (lambda (h39f7@h39ec h39f8@h39ee h39f9@h39f0) (call-with-values (lambda () (h3926@quasi h39e8@q h3942@lev)) (lambda (h39fd@h39f2 h39fe@h39f4 h39ff@h39f6) ((lambda (h3a03@q h3a04@rhs2* h3a05@lhs2* h3a06@p h3a07@rhs* h3a08@lhs*) (values (append h3a05@lhs2* h3a08@lhs*) (append h3a04@rhs2* h3a07@rhs*) (cons h3a06@p h3a03@q))) h39ff@h39f6 h39fe@h39f4 h39fd@h39f2 h39f9@h39f0 h39f8@h39ee h39f7@h39ec)))))) h39e5@ls/false) ((lambda (h3a0f@t) ((lambda (h3a11@ls/false) (if h3a11@ls/false (apply (lambda (h3a13@x*) (call-with-values (lambda () (h3926@quasi h3a13@x* h3942@lev)) (lambda (h3a1b@h3a16 h3a1c@h3a18 h3a1d@h3a1a) ((lambda (h3a21@x* h3a22@rhs* h3a23@lhs*) (values h3a23@lhs* h3a22@rhs* (list->vector h3a21@x*))) h3a1d@h3a1a h3a1c@h3a18 h3a1b@h3a16)))) h3a11@ls/false) ((lambda (h3a27@t) ((lambda (h3a29@ls/false) (if h3a29@ls/false (apply (lambda () (values '() '() h3941@p)) h3a29@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3a27@t))) (h3066@syntax-dispatch h3a27@t '_))) h3a0f@t))) (h3066@syntax-dispatch h3a0f@t '#(vector each-any)))) h39e3@t))) (h3066@syntax-dispatch h39e3@t '(any . any)))) h39cb@t))) (h3066@syntax-dispatch h39cb@t '(#(scheme-id quasisyntax) any)))) h39c7@t))) (h3066@syntax-dispatch h39c7@t '#(scheme-id unsyntax-splicing)))) h3993@t))) (h3066@syntax-dispatch h3993@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) h3963@t))) (h3066@syntax-dispatch h3963@t '((#(scheme-id unsyntax) . each-any) . any)))) h395f@t))) (h3066@syntax-dispatch h395f@t '#(scheme-id unsyntax)))) h3945@t))) (h3066@syntax-dispatch h3945@t '(#(scheme-id unsyntax) any)))) h3941@p))) (lambda (h3927@x) ((lambda (h3929@t) ((lambda (h392b@ls/false) (if h392b@ls/false (apply (lambda (h392d@e) (call-with-values (lambda () (h3926@quasi h392d@e '0)) (lambda (h3935@h3930 h3936@h3932 h3937@h3934) ((lambda (h393b@v h393c@rhs* h393d@lhs*) (h301c@bless (list 'syntax-case (cons 'list h393c@rhs*) '() (list h393d@lhs* (list 'syntax h393b@v))))) h3937@h3934 h3936@h3932 h3935@h3930)))) h392b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3929@t))) (h3066@syntax-dispatch h3929@t '(_ any)))) h3927@x)))) '#f)))) (set! h3058@define-struct-macro (lambda (h3a2b@stx) (h3134@syntax-violation '#f '"define-struct not supported" h3a2b@stx))) (set! h305a@define-record-type-macro (lambda (h3a2d@x) ((lambda (h3a30@id h3a32@get-record-name h3a34@get-record-constructor-name h3a36@get-record-predicate-name h3a38@get-clause h3a3a@foo-rtd-code h3a3c@parent-rtd-code h3a3e@parent-rcd-code h3a40@foo-rcd-code h3a42@get-protocol-code h3a44@get-fields h3a46@get-mutator-indices h3a48@get-mutators h3a4a@get-accessors h3a4c@enumerate h3a4e@do-define-record h3a50@verify-clauses) (begin (set! h3a30@id (lambda (h3c23@ctxt . h3c25@str*) (h3138@datum->syntax h3c23@ctxt (string->symbol (apply string-append (map (lambda (h3c27@x) (if (symbol? h3c27@x) (symbol->string h3c27@x) (if (string? h3c27@x) h3c27@x (assertion-violation 'define-record-type '"BUG")))) h3c25@str*)))))) (set! h3a32@get-record-name (lambda (h3c11@spec) ((lambda (h3c13@t) ((lambda (h3c15@ls/false) (if h3c15@ls/false (apply (lambda (h3c17@foo h3c18@make-foo h3c19@foo?) h3c17@foo) h3c15@ls/false) ((lambda (h3c1d@t) ((lambda (h3c1f@ls/false) (if h3c1f@ls/false (apply (lambda (h3c21@foo) h3c21@foo) h3c1f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3c1d@t))) (h3066@syntax-dispatch h3c1d@t 'any))) h3c13@t))) (h3066@syntax-dispatch h3c13@t '(any any any)))) h3c11@spec))) (set! h3a34@get-record-constructor-name (lambda (h3bfd@spec) ((lambda (h3bff@t) ((lambda (h3c01@ls/false) (if h3c01@ls/false (apply (lambda (h3c03@foo h3c04@make-foo h3c05@foo?) h3c04@make-foo) h3c01@ls/false) ((lambda (h3c09@t) ((lambda (h3c0b@ls/false) (if (and h3c0b@ls/false (apply (lambda (h3c0d@foo) (h2e5b@id? h3c0d@foo)) h3c0b@ls/false)) (apply (lambda (h3c0f@foo) (h3a30@id h3c0f@foo '"make-" (h2e71@stx->datum h3c0f@foo))) h3c0b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3c09@t))) (h3066@syntax-dispatch h3c09@t 'any))) h3bff@t))) (h3066@syntax-dispatch h3bff@t '(any any any)))) h3bfd@spec))) (set! h3a36@get-record-predicate-name (lambda (h3be9@spec) ((lambda (h3beb@t) ((lambda (h3bed@ls/false) (if h3bed@ls/false (apply (lambda (h3bef@foo h3bf0@make-foo h3bf1@foo?) h3bf1@foo?) h3bed@ls/false) ((lambda (h3bf5@t) ((lambda (h3bf7@ls/false) (if (and h3bf7@ls/false (apply (lambda (h3bf9@foo) (h2e5b@id? h3bf9@foo)) h3bf7@ls/false)) (apply (lambda (h3bfb@foo) (h3a30@id h3bfb@foo (h2e71@stx->datum h3bfb@foo) '"?")) h3bf7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3bf5@t))) (h3066@syntax-dispatch h3bf5@t 'any))) h3beb@t))) (h3066@syntax-dispatch h3beb@t '(any any any)))) h3be9@spec))) (set! h3a38@get-clause (lambda (h3bd7@id h3bd8@ls) ((lambda (h3bdb@t) ((lambda (h3bdd@ls/false) (if h3bdd@ls/false (apply (lambda () '#f) h3bdd@ls/false) ((lambda (h3bdf@t) ((lambda (h3be1@ls/false) (if h3be1@ls/false (apply (lambda (h3be3@x h3be4@rest h3be5@ls) (if (h2e63@free-id=? (h301c@bless h3bd7@id) h3be3@x) (cons h3be3@x h3be4@rest) (h3a38@get-clause h3bd7@id h3be5@ls))) h3be1@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3bdf@t))) (h3066@syntax-dispatch h3bdf@t '((any . any) . any)))) h3bdb@t))) (h3066@syntax-dispatch h3bdb@t '()))) h3bd8@ls))) (set! h3a3a@foo-rtd-code (lambda (h3b85@name h3b86@clause* h3b87@parent-rtd-code) ((lambda (h3b8c@convert-field-spec*) (begin (set! h3b8c@convert-field-spec* (lambda (h3bbd@ls) (list->vector (map (lambda (h3bbf@x) ((lambda (h3bc1@t) ((lambda (h3bc3@ls/false) (if h3bc3@ls/false (apply (lambda (h3bc5@name h3bc6@rest) (list 'mutable h3bc5@name)) h3bc3@ls/false) ((lambda (h3bc9@t) ((lambda (h3bcb@ls/false) (if h3bcb@ls/false (apply (lambda (h3bcd@name h3bce@rest) (list 'immutable h3bcd@name)) h3bcb@ls/false) ((lambda (h3bd1@t) ((lambda (h3bd3@ls/false) (if h3bd3@ls/false (apply (lambda (h3bd5@name) (list 'immutable h3bd5@name)) h3bd3@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3bd1@t))) (h3066@syntax-dispatch h3bd1@t 'any))) h3bc9@t))) (h3066@syntax-dispatch h3bc9@t '(#(scheme-id immutable) any . any)))) h3bc1@t))) (h3066@syntax-dispatch h3bc1@t '(#(scheme-id mutable) any . any)))) h3bbf@x)) h3bbd@ls)))) ((lambda (h3b8d@uid-code h3b8e@sealed? h3b8f@opaque? h3b90@fields) (h301c@bless (list 'make-record-type-descriptor (list 'quote h3b85@name) h3b87@parent-rtd-code h3b8d@uid-code h3b8e@sealed? h3b8f@opaque? h3b90@fields))) ((lambda (h3b95@t) ((lambda (h3b97@ls/false) (if h3b97@ls/false (apply (lambda () (list 'quote (gensym))) h3b97@ls/false) ((lambda (h3b99@t) ((lambda (h3b9b@ls/false) (if h3b9b@ls/false (apply (lambda (h3b9d@uid) (list 'quote h3b9d@uid)) h3b9b@ls/false) ((lambda (h3b9f@t) ((lambda (h3ba1@ls/false) (if h3ba1@ls/false (apply (lambda () '#f) h3ba1@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b9f@t))) (h3066@syntax-dispatch h3b9f@t '_))) h3b99@t))) (h3066@syntax-dispatch h3b99@t '(_ any)))) h3b95@t))) (h3066@syntax-dispatch h3b95@t '(_)))) (h3a38@get-clause 'nongenerative h3b86@clause*)) ((lambda (h3ba3@t) ((lambda (h3ba5@ls/false) (if h3ba5@ls/false (apply (lambda () '#t) h3ba5@ls/false) ((lambda (h3ba7@t) ((lambda (h3ba9@ls/false) (if h3ba9@ls/false (apply (lambda () '#f) h3ba9@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3ba7@t))) (h3066@syntax-dispatch h3ba7@t '_))) h3ba3@t))) (h3066@syntax-dispatch h3ba3@t '(_ #(atom #t))))) (h3a38@get-clause 'sealed h3b86@clause*)) ((lambda (h3bab@t) ((lambda (h3bad@ls/false) (if h3bad@ls/false (apply (lambda () '#t) h3bad@ls/false) ((lambda (h3baf@t) ((lambda (h3bb1@ls/false) (if h3bb1@ls/false (apply (lambda () '#f) h3bb1@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3baf@t))) (h3066@syntax-dispatch h3baf@t '_))) h3bab@t))) (h3066@syntax-dispatch h3bab@t '(_ #(atom #t))))) (h3a38@get-clause 'opaque h3b86@clause*)) ((lambda (h3bb3@t) ((lambda (h3bb5@ls/false) (if h3bb5@ls/false (apply (lambda (h3bb7@field-spec*) (list 'quote (h3b8c@convert-field-spec* h3bb7@field-spec*))) h3bb5@ls/false) ((lambda (h3bb9@t) ((lambda (h3bbb@ls/false) (if h3bbb@ls/false (apply (lambda () ''#()) h3bbb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3bb9@t))) (h3066@syntax-dispatch h3bb9@t '_))) h3bb3@t))) (h3066@syntax-dispatch h3bb3@t '(_ . each-any)))) (h3a38@get-clause 'fields h3b86@clause*))))) '#f))) (set! h3a3c@parent-rtd-code (lambda (h3b6d@clause*) ((lambda (h3b6f@t) ((lambda (h3b71@ls/false) (if h3b71@ls/false (apply (lambda (h3b73@name) (list 'record-type-descriptor h3b73@name)) h3b71@ls/false) ((lambda (h3b75@t) ((lambda (h3b77@ls/false) (if h3b77@ls/false (apply (lambda () ((lambda (h3b79@t) ((lambda (h3b7b@ls/false) (if h3b7b@ls/false (apply (lambda (h3b7d@rtd h3b7e@rcd) h3b7d@rtd) h3b7b@ls/false) ((lambda (h3b81@t) ((lambda (h3b83@ls/false) (if h3b83@ls/false (apply (lambda () '#f) h3b83@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b81@t))) (h3066@syntax-dispatch h3b81@t '#(atom #f)))) h3b79@t))) (h3066@syntax-dispatch h3b79@t '(_ any any)))) (h3a38@get-clause 'parent-rtd h3b6d@clause*))) h3b77@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b75@t))) (h3066@syntax-dispatch h3b75@t '#(atom #f)))) h3b6f@t))) (h3066@syntax-dispatch h3b6f@t '(_ any)))) (h3a38@get-clause 'parent h3b6d@clause*)))) (set! h3a3e@parent-rcd-code (lambda (h3b55@clause*) ((lambda (h3b57@t) ((lambda (h3b59@ls/false) (if h3b59@ls/false (apply (lambda (h3b5b@name) (list 'record-constructor-descriptor h3b5b@name)) h3b59@ls/false) ((lambda (h3b5d@t) ((lambda (h3b5f@ls/false) (if h3b5f@ls/false (apply (lambda () ((lambda (h3b61@t) ((lambda (h3b63@ls/false) (if h3b63@ls/false (apply (lambda (h3b65@rtd h3b66@rcd) h3b66@rcd) h3b63@ls/false) ((lambda (h3b69@t) ((lambda (h3b6b@ls/false) (if h3b6b@ls/false (apply (lambda () '#f) h3b6b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b69@t))) (h3066@syntax-dispatch h3b69@t '#(atom #f)))) h3b61@t))) (h3066@syntax-dispatch h3b61@t '(_ any any)))) (h3a38@get-clause 'parent-rtd h3b55@clause*))) h3b5f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b5d@t))) (h3066@syntax-dispatch h3b5d@t '#(atom #f)))) h3b57@t))) (h3066@syntax-dispatch h3b57@t '(_ any)))) (h3a38@get-clause 'parent h3b55@clause*)))) (set! h3a40@foo-rcd-code (lambda (h3b4d@clause* h3b4e@foo-rtd h3b4f@protocol h3b50@parent-rcd-code) (list 'make-record-constructor-descriptor h3b4e@foo-rtd h3b50@parent-rcd-code h3b4f@protocol))) (set! h3a42@get-protocol-code (lambda (h3b41@clause*) ((lambda (h3b43@t) ((lambda (h3b45@ls/false) (if h3b45@ls/false (apply (lambda (h3b47@expr) h3b47@expr) h3b45@ls/false) ((lambda (h3b49@t) ((lambda (h3b4b@ls/false) (if h3b4b@ls/false (apply (lambda () '#f) h3b4b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b49@t))) (h3066@syntax-dispatch h3b49@t '_))) h3b43@t))) (h3066@syntax-dispatch h3b43@t '(_ any)))) (h3a38@get-clause 'protocol h3b41@clause*)))) (set! h3a44@get-fields (lambda (h3b2f@clause*) ((lambda (h3b31@t) ((lambda (h3b33@ls/false) (if h3b33@ls/false (apply (lambda () '()) h3b33@ls/false) ((lambda (h3b35@t) ((lambda (h3b37@ls/false) (if h3b37@ls/false (apply (lambda (h3b39@f*) h3b39@f*) h3b37@ls/false) ((lambda (h3b3b@t) ((lambda (h3b3d@ls/false) (if h3b3d@ls/false (apply (lambda (h3b3f@rest) (h3a44@get-fields h3b3f@rest)) h3b3d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b3b@t))) (h3066@syntax-dispatch h3b3b@t '(_ . any)))) h3b35@t))) (h3066@syntax-dispatch h3b35@t '((#(scheme-id fields) . each-any) . _)))) h3b31@t))) (h3066@syntax-dispatch h3b31@t '()))) h3b2f@clause*))) (set! h3a46@get-mutator-indices (lambda (h3b17@fields) ((letrec ((h3b19@f (lambda (h3b1b@fields h3b1c@i) ((lambda (h3b1f@t) ((lambda (h3b21@ls/false) (if h3b21@ls/false (apply (lambda () '()) h3b21@ls/false) ((lambda (h3b23@t) ((lambda (h3b25@ls/false) (if h3b25@ls/false (apply (lambda (h3b27@rest) (cons h3b1c@i (h3b19@f h3b27@rest (+ h3b1c@i '1)))) h3b25@ls/false) ((lambda (h3b29@t) ((lambda (h3b2b@ls/false) (if h3b2b@ls/false (apply (lambda (h3b2d@rest) (h3b19@f h3b2d@rest (+ h3b1c@i '1))) h3b2b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b29@t))) (h3066@syntax-dispatch h3b29@t '(_ . any)))) h3b23@t))) (h3066@syntax-dispatch h3b23@t '((#(scheme-id mutable) . _) . any)))) h3b1f@t))) (h3066@syntax-dispatch h3b1f@t '()))) h3b1b@fields)))) h3b19@f) h3b17@fields '0))) (set! h3a48@get-mutators (lambda (h3aed@foo h3aee@fields) ((lambda (h3af2@gen-name) (begin (set! h3af2@gen-name (lambda (h3b15@x) (h3138@datum->syntax h3aed@foo (string->symbol (string-append (symbol->string (h313a@syntax->datum h3aed@foo)) '"-" (symbol->string (h313a@syntax->datum h3b15@x)) '"-set!"))))) ((letrec ((h3af3@f (lambda (h3af5@fields) ((lambda (h3af7@t) ((lambda (h3af9@ls/false) (if h3af9@ls/false (apply (lambda () '()) h3af9@ls/false) ((lambda (h3afb@t) ((lambda (h3afd@ls/false) (if h3afd@ls/false (apply (lambda (h3aff@name h3b00@accessor h3b01@mutator h3b02@rest) (cons h3b01@mutator (h3af3@f h3b02@rest))) h3afd@ls/false) ((lambda (h3b07@t) ((lambda (h3b09@ls/false) (if h3b09@ls/false (apply (lambda (h3b0b@name h3b0c@rest) (cons (h3af2@gen-name h3b0b@name) (h3af3@f h3b0c@rest))) h3b09@ls/false) ((lambda (h3b0f@t) ((lambda (h3b11@ls/false) (if h3b11@ls/false (apply (lambda (h3b13@rest) (h3af3@f h3b13@rest)) h3b11@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3b0f@t))) (h3066@syntax-dispatch h3b0f@t '(_ . any)))) h3b07@t))) (h3066@syntax-dispatch h3b07@t '((#(scheme-id mutable) any) . any)))) h3afb@t))) (h3066@syntax-dispatch h3afb@t '((#(scheme-id mutable) any any any) . any)))) h3af7@t))) (h3066@syntax-dispatch h3af7@t '()))) h3af5@fields)))) h3af3@f) h3aee@fields))) '#f))) (set! h3a4a@get-accessors (lambda (h3aa9@foo h3aaa@fields) ((lambda (h3aae@gen-name) (begin (set! h3aae@gen-name (lambda (h3aeb@x) (h3138@datum->syntax h3aa9@foo (string->symbol (string-append (symbol->string (h313a@syntax->datum h3aa9@foo)) '"-" (symbol->string (h313a@syntax->datum h3aeb@x))))))) (map (lambda (h3aaf@field) ((lambda (h3ab1@t) ((lambda (h3ab3@ls/false) (if (and h3ab3@ls/false (apply (lambda (h3ab5@name h3ab6@accessor h3ab7@mutator) (h2e5b@id? h3ab6@accessor)) h3ab3@ls/false)) (apply (lambda (h3abb@name h3abc@accessor h3abd@mutator) h3abc@accessor) h3ab3@ls/false) ((lambda (h3ac1@t) ((lambda (h3ac3@ls/false) (if (and h3ac3@ls/false (apply (lambda (h3ac5@name h3ac6@accessor) (h2e5b@id? h3ac6@accessor)) h3ac3@ls/false)) (apply (lambda (h3ac9@name h3aca@accessor) h3aca@accessor) h3ac3@ls/false) ((lambda (h3acd@t) ((lambda (h3acf@ls/false) (if (and h3acf@ls/false (apply (lambda (h3ad1@name) (h2e5b@id? h3ad1@name)) h3acf@ls/false)) (apply (lambda (h3ad3@name) (h3aae@gen-name h3ad3@name)) h3acf@ls/false) ((lambda (h3ad5@t) ((lambda (h3ad7@ls/false) (if (and h3ad7@ls/false (apply (lambda (h3ad9@name) (h2e5b@id? h3ad9@name)) h3ad7@ls/false)) (apply (lambda (h3adb@name) (h3aae@gen-name h3adb@name)) h3ad7@ls/false) ((lambda (h3add@t) ((lambda (h3adf@ls/false) (if (and h3adf@ls/false (apply (lambda (h3ae1@name) (h2e5b@id? h3ae1@name)) h3adf@ls/false)) (apply (lambda (h3ae3@name) (h3aae@gen-name h3ae3@name)) h3adf@ls/false) ((lambda (h3ae5@t) ((lambda (h3ae7@ls/false) (if h3ae7@ls/false (apply (lambda (h3ae9@others) (h3134@syntax-violation '#f '"invalid field spec" h3aaf@field)) h3ae7@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3ae5@t))) (h3066@syntax-dispatch h3ae5@t 'any))) h3add@t))) (h3066@syntax-dispatch h3add@t 'any))) h3ad5@t))) (h3066@syntax-dispatch h3ad5@t '(#(scheme-id immutable) any)))) h3acd@t))) (h3066@syntax-dispatch h3acd@t '(#(scheme-id mutable) any)))) h3ac1@t))) (h3066@syntax-dispatch h3ac1@t '(#(scheme-id immutable) any any)))) h3ab1@t))) (h3066@syntax-dispatch h3ab1@t '(#(scheme-id mutable) any any any)))) h3aaf@field)) h3aaa@fields))) '#f))) (set! h3a4c@enumerate (lambda (h3aa1@ls) ((letrec ((h3aa3@f (lambda (h3aa5@ls h3aa6@i) (if (null? h3aa5@ls) '() (cons h3aa6@i (h3aa3@f (cdr h3aa5@ls) (+ h3aa6@i '1))))))) h3aa3@f) h3aa1@ls '0))) (set! h3a4e@do-define-record (lambda (h3a79@namespec h3a7a@clause*) ((lambda (h3a7d@foo) ((lambda (h3a7f@foo-rtd) ((lambda (h3a81@foo-rcd) ((lambda (h3a83@protocol) ((lambda (h3a85@make-foo) ((lambda (h3a87@fields) ((lambda (h3a89@idx*) ((lambda (h3a8b@foo-x*) ((lambda (h3a8d@set-foo-x!*) ((lambda (h3a8f@set-foo-idx*) ((lambda (h3a91@foo?) ((lambda (h3a93@foo-rtd-code) ((lambda (h3a95@foo-rcd-code) ((lambda (h3a97@protocol-code) ((lambda () (h301c@bless (cons 'begin (cons (list 'define h3a7f@foo-rtd h3a93@foo-rtd-code) (cons (list 'define h3a83@protocol h3a97@protocol-code) (cons (list 'define h3a81@foo-rcd h3a95@foo-rcd-code) (cons (list 'define-syntax h3a7d@foo (list 'list ''$rtd (list 'syntax h3a7f@foo-rtd) (list 'syntax h3a81@foo-rcd))) (cons (list 'define h3a91@foo? (list 'record-predicate h3a7f@foo-rtd)) (cons (list 'define h3a85@make-foo (list 'record-constructor h3a81@foo-rcd)) (append (map (lambda (h3a99@foo-x h3a9a@idx) (list 'define h3a99@foo-x (list 'record-accessor h3a7f@foo-rtd h3a9a@idx))) h3a8b@foo-x* h3a89@idx*) (map (lambda (h3a9d@set-foo-x! h3a9e@idx) (list 'define h3a9d@set-foo-x! (list 'record-mutator h3a7f@foo-rtd h3a9e@idx))) h3a8d@set-foo-x!* h3a8f@set-foo-idx*))))))))))))) (h3a42@get-protocol-code h3a7a@clause*))) (h3a40@foo-rcd-code h3a7a@clause* h3a7f@foo-rtd h3a83@protocol (h3a3e@parent-rcd-code h3a7a@clause*)))) (h3a3a@foo-rtd-code h3a7d@foo h3a7a@clause* (h3a3c@parent-rtd-code h3a7a@clause*)))) (h3a36@get-record-predicate-name h3a79@namespec))) (h3a46@get-mutator-indices h3a87@fields))) (h3a48@get-mutators h3a7d@foo h3a87@fields))) (h3a4a@get-accessors h3a7d@foo h3a87@fields))) (h3a4c@enumerate h3a87@fields))) (h3a44@get-fields h3a7a@clause*))) (h3a34@get-record-constructor-name h3a79@namespec))) (gensym))) (gensym))) (gensym))) (h3a32@get-record-name h3a79@namespec)))) (set! h3a50@verify-clauses (lambda (h3a59@x h3a5a@cls*) ((lambda (h3a5e@valid-kwds h3a60@free-id-member?) (begin (set! h3a5e@valid-kwds (map h301c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! h3a60@free-id-member? (lambda (h3a75@x h3a76@ls) (and (pair? h3a76@ls) (or (h2e63@free-id=? h3a75@x (car h3a76@ls)) (h3a60@free-id-member? h3a75@x (cdr h3a76@ls)))))) ((letrec ((h3a61@f (lambda (h3a63@cls* h3a64@seen*) (if (not (null? h3a63@cls*)) ((lambda (h3a67@t) ((lambda (h3a69@ls/false) (if h3a69@ls/false (apply (lambda (h3a6b@kwd h3a6c@rest) (if (or (not (h2e5b@id? h3a6b@kwd)) (not (h3a60@free-id-member? h3a6b@kwd h3a5e@valid-kwds))) (h3134@syntax-violation '#f '"not a valid define-record-type keyword" h3a6b@kwd) (if (h2e69@bound-id-member? h3a6b@kwd h3a64@seen*) (h3134@syntax-violation '#f '"duplicate use of keyword " h3a59@x h3a6b@kwd) (h3a61@f (cdr h3a63@cls*) (cons h3a6b@kwd h3a64@seen*))))) h3a69@ls/false) ((lambda (h3a6f@t) ((lambda (h3a71@ls/false) (if h3a71@ls/false (apply (lambda (h3a73@cls) (h3134@syntax-violation '#f '"malformed define-record-type clause" h3a73@cls)) h3a71@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3a6f@t))) (h3066@syntax-dispatch h3a6f@t 'any))) h3a67@t))) (h3066@syntax-dispatch h3a67@t '(any . any)))) (car h3a63@cls*)) (void))))) h3a61@f) h3a5a@cls* '()))) '#f '#f))) ((lambda (h3a51@t) ((lambda (h3a53@ls/false) (if h3a53@ls/false (apply (lambda (h3a55@namespec h3a56@clause*) (begin (h3a50@verify-clauses h3a2d@x h3a56@clause*) (h3a4e@do-define-record h3a55@namespec h3a56@clause*))) h3a53@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3a51@t))) (h3066@syntax-dispatch h3a51@t '(_ any . each-any)))) h3a2d@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! h305c@define-condition-type-macro (lambda (h3c29@x) ((lambda (h3c2c@mkname) (begin (set! h3c2c@mkname (lambda (h3c59@name h3c5a@suffix) (h3138@datum->syntax h3c59@name (string->symbol (string-append (symbol->string (h313a@syntax->datum h3c59@name)) h3c5a@suffix))))) ((lambda (h3c2d@t) ((lambda (h3c2f@ls/false) (if (and h3c2f@ls/false (apply (lambda (h3c31@ctxt h3c32@name h3c33@super h3c34@constructor h3c35@predicate h3c36@field* h3c37@accessor*) (and (h2e5b@id? h3c32@name) (h2e5b@id? h3c33@super) (h2e5b@id? h3c34@constructor) (h2e5b@id? h3c35@predicate) (for-all h2e5b@id? h3c36@field*) (for-all h2e5b@id? h3c37@accessor*))) h3c2f@ls/false)) (apply (lambda (h3c3f@ctxt h3c40@name h3c41@super h3c42@constructor h3c43@predicate h3c44@field* h3c45@accessor*) ((lambda (h3c4d@aux-accessor*) (h301c@bless (cons 'begin (cons (cons 'define-record-type (cons (list h3c40@name h3c42@constructor (gensym)) (cons (list 'parent h3c41@super) (cons (cons 'fields (map (lambda (h3c4f@field h3c50@aux) (list 'immutable h3c4f@field h3c50@aux)) h3c44@field* h3c4d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define h3c43@predicate (list 'condition-predicate (list 'record-type-descriptor h3c40@name))) (map (lambda (h3c53@accessor h3c54@aux) (list 'define h3c53@accessor (list 'condition-accessor (list 'record-type-descriptor h3c40@name) h3c54@aux))) h3c45@accessor* h3c4d@aux-accessor*)))))) (map (lambda (h3c57@x) (gensym)) h3c45@accessor*))) h3c2f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3c2d@t))) (h3066@syntax-dispatch h3c2d@t '(any any any any any . #(each (any any)))))) h3c29@x))) '#f))) (set! h305e@incorrect-usage-macro (lambda (h3c5d@e) (h3134@syntax-violation '#f '"incorrect usage of auxiliary keyword" h3c5d@e))) (set! h3060@parameterize-macro (lambda (h3c5f@e) ((lambda (h3c61@t) ((lambda (h3c63@ls/false) (if h3c63@ls/false (apply (lambda (h3c65@b h3c66@b*) (h301c@bless (cons 'let (cons '() (cons h3c65@b h3c66@b*))))) h3c63@ls/false) ((lambda (h3c69@t) ((lambda (h3c6b@ls/false) (if h3c6b@ls/false (apply (lambda (h3c6d@olhs* h3c6e@orhs* h3c6f@b h3c70@b*) ((lambda (h3c75@lhs* h3c76@rhs*) (h301c@bless (cons (list 'lambda (append h3c75@lhs* h3c76@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (h3c79@lhs h3c7a@rhs) (list 'let (list (list 't (list h3c79@lhs))) (list h3c79@lhs h3c7a@rhs) (cons 'set! (cons h3c7a@rhs '(t))))) h3c75@lhs* h3c76@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons h3c6f@b h3c70@b*))) '(swap)))))) (append h3c6d@olhs* h3c6e@orhs*)))) (h3122@generate-temporaries h3c6d@olhs*) (h3122@generate-temporaries h3c6e@orhs*))) h3c6b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3c69@t))) (h3066@syntax-dispatch h3c69@t '(_ #(each (any any)) any . each-any)))) h3c61@t))) (h3066@syntax-dispatch h3c61@t '(_ () any . each-any)))) h3c5f@e))) (set! h3062@foreign-call-transformer (lambda (h3c7d@e h3c7e@r h3c7f@mr) ((lambda (h3c83@t) ((lambda (h3c85@ls/false) (if h3c85@ls/false (apply (lambda (h3c87@name h3c88@arg*) (cons 'foreign-call (cons (h3088@chi-expr h3c87@name h3c7e@r h3c7f@mr) (h3084@chi-expr* h3c88@arg* h3c7e@r h3c7f@mr)))) h3c85@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3c83@t))) (h3066@syntax-dispatch h3c83@t '(_ any . each-any)))) h3c7d@e))) (set! h3064@convert-pattern (lambda (h3c8b@pattern h3c8c@keys) ((lambda (h3c90@cvt* h3c92@cvt) (begin (set! h3c90@cvt* (lambda (h3d2f@p* h3d30@n h3d31@ids) (if (null? h3d2f@p*) (values '() h3d31@ids) (call-with-values (lambda () (h3c90@cvt* (cdr h3d2f@p*) h3d30@n h3d31@ids)) (lambda (h3d39@h3d36 h3d3a@h3d38) ((lambda (h3d3d@ids h3d3e@y) (call-with-values (lambda () (h3c92@cvt (car h3d2f@p*) h3d30@n h3d3d@ids)) (lambda (h3d45@h3d42 h3d46@h3d44) ((lambda (h3d49@ids h3d4a@x) (values (cons h3d4a@x h3d3e@y) h3d49@ids)) h3d46@h3d44 h3d45@h3d42)))) h3d3a@h3d38 h3d39@h3d36)))))) (set! h3c92@cvt (lambda (h3c93@p h3c94@n h3c95@ids) ((lambda (h3c99@t) ((lambda (h3c9b@ls/false) (if (and h3c9b@ls/false (apply (lambda (h3c9d@id) (h2e5b@id? h3c9d@id)) h3c9b@ls/false)) (apply (lambda (h3c9f@id) (if (h2e69@bound-id-member? h3c93@p h3c8c@keys) (values (vector 'free-id h3c93@p) h3c95@ids) (if (h2e63@free-id=? h3c93@p (h2ff0@scheme-stx '_)) (values '_ h3c95@ids) (values 'any (cons (cons h3c93@p h3c94@n) h3c95@ids))))) h3c9b@ls/false) ((lambda (h3ca1@t) ((lambda (h3ca3@ls/false) (if (and h3ca3@ls/false (apply (lambda (h3ca5@p h3ca6@dots) (h3068@ellipsis? h3ca6@dots)) h3ca3@ls/false)) (apply (lambda (h3ca9@p h3caa@dots) (call-with-values (lambda () (h3c92@cvt h3ca9@p (+ h3c94@n '1) h3c95@ids)) (lambda (h3cb1@h3cae h3cb2@h3cb0) ((lambda (h3cb5@ids h3cb6@p) (values (if (eq? h3cb6@p 'any) 'each-any (vector 'each h3cb6@p)) h3cb5@ids)) h3cb2@h3cb0 h3cb1@h3cae)))) h3ca3@ls/false) ((lambda (h3cb9@t) ((lambda (h3cbb@ls/false) (if (and h3cbb@ls/false (apply (lambda (h3cbd@x h3cbe@dots h3cbf@ys h3cc0@z) (h3068@ellipsis? h3cbe@dots)) h3cbb@ls/false)) (apply (lambda (h3cc5@x h3cc6@dots h3cc7@ys h3cc8@z) (call-with-values (lambda () (h3c92@cvt h3cc8@z h3c94@n h3c95@ids)) (lambda (h3cd1@h3cce h3cd2@h3cd0) ((lambda (h3cd5@ids h3cd6@z) (call-with-values (lambda () (h3c90@cvt* h3cc7@ys h3c94@n h3cd5@ids)) (lambda (h3cdd@h3cda h3cde@h3cdc) ((lambda (h3ce1@ids h3ce2@ys) (call-with-values (lambda () (h3c92@cvt h3cc5@x (+ h3c94@n '1) h3ce1@ids)) (lambda (h3ce9@h3ce6 h3cea@h3ce8) ((lambda (h3ced@ids h3cee@x) (values (vector 'each+ h3cee@x (reverse h3ce2@ys) h3cd6@z) h3ced@ids)) h3cea@h3ce8 h3ce9@h3ce6)))) h3cde@h3cdc h3cdd@h3cda)))) h3cd2@h3cd0 h3cd1@h3cce)))) h3cbb@ls/false) ((lambda (h3cf1@t) ((lambda (h3cf3@ls/false) (if h3cf3@ls/false (apply (lambda (h3cf5@x h3cf6@y) (call-with-values (lambda () (h3c92@cvt h3cf6@y h3c94@n h3c95@ids)) (lambda (h3cfd@h3cfa h3cfe@h3cfc) ((lambda (h3d01@ids h3d02@y) (call-with-values (lambda () (h3c92@cvt h3cf5@x h3c94@n h3d01@ids)) (lambda (h3d09@h3d06 h3d0a@h3d08) ((lambda (h3d0d@ids h3d0e@x) (values (cons h3d0e@x h3d02@y) h3d0d@ids)) h3d0a@h3d08 h3d09@h3d06)))) h3cfe@h3cfc h3cfd@h3cfa)))) h3cf3@ls/false) ((lambda (h3d11@t) ((lambda (h3d13@ls/false) (if h3d13@ls/false (apply (lambda () (values '() h3c95@ids)) h3d13@ls/false) ((lambda (h3d15@t) ((lambda (h3d17@ls/false) (if (and h3d17@ls/false (apply (lambda (h3d19@p) (not (h2e25@stx? h3d19@p))) h3d17@ls/false)) (apply (lambda (h3d1b@p) (call-with-values (lambda () (h3c92@cvt h3d1b@p h3c94@n h3c95@ids)) (lambda (h3d21@h3d1e h3d22@h3d20) ((lambda (h3d25@ids h3d26@p) (values (vector 'vector h3d26@p) h3d25@ids)) h3d22@h3d20 h3d21@h3d1e)))) h3d17@ls/false) ((lambda (h3d29@t) ((lambda (h3d2b@ls/false) (if h3d2b@ls/false (apply (lambda (h3d2d@datum) (values (vector 'atom (h2e71@stx->datum h3d2d@datum)) h3c95@ids)) h3d2b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3d29@t))) (h3066@syntax-dispatch h3d29@t 'any))) h3d15@t))) (h3066@syntax-dispatch h3d15@t '#(vector each-any)))) h3d11@t))) (h3066@syntax-dispatch h3d11@t '()))) h3cf1@t))) (h3066@syntax-dispatch h3cf1@t '(any . any)))) h3cb9@t))) (h3066@syntax-dispatch h3cb9@t '(any any . #(each+ any () any))))) h3ca1@t))) (h3066@syntax-dispatch h3ca1@t '(any any)))) h3c99@t))) (h3066@syntax-dispatch h3c99@t 'any))) h3c93@p))) (h3c92@cvt h3c8b@pattern '0 '()))) '#f '#f))) (set! h3066@syntax-dispatch ((lambda () ((lambda (h3d4e@stx^ h3d50@match-each h3d52@match-each+ h3d54@match-each-any h3d56@match-empty h3d58@combine h3d5a@match* h3d5c@match) (begin (set! h3d4e@stx^ (lambda (h3e29@e h3e2a@m* h3e2b@s* h3e2c@ae*) (if (and (null? h3e2a@m*) (null? h3e2b@s*) (null? h3e2c@ae*)) h3e29@e (h2e43@mkstx h3e29@e h3e2a@m* h3e2b@s* h3e2c@ae*)))) (set! h3d50@match-each (lambda (h3e09@e h3e0a@p h3e0b@m* h3e0c@s* h3e0d@ae*) (if (pair? h3e09@e) ((lambda (h3e13@first) (and h3e13@first ((lambda (h3e15@rest) (and h3e15@rest (cons h3e13@first h3e15@rest))) (h3d50@match-each (cdr h3e09@e) h3e0a@p h3e0b@m* h3e0c@s* h3e0d@ae*)))) (h3d5c@match (car h3e09@e) h3e0a@p h3e0b@m* h3e0c@s* h3e0d@ae* '())) (if (null? h3e09@e) '() (if (h2e25@stx? h3e09@e) (and (not (h2deb@top-marked? h3e0b@m*)) (call-with-values (lambda () (h2e41@join-wraps h3e0b@m* h3e0c@s* h3e0d@ae* h3e09@e)) (lambda (h3e1d@h3e18 h3e1e@h3e1a h3e1f@h3e1c) ((lambda (h3e23@ae* h3e24@s* h3e25@m*) (h3d50@match-each (h2e27@stx-expr h3e09@e) h3e0a@p h3e25@m* h3e24@s* h3e23@ae*)) h3e1f@h3e1c h3e1e@h3e1a h3e1d@h3e18)))) (if (h29b6@h28a7@annotation? h3e09@e) (h3d50@match-each (h29b8@h28ab@annotation-expression h3e09@e) h3e0a@p h3e0b@m* h3e0c@s* h3e0d@ae*) '#f)))))) (set! h3d52@match-each+ (lambda (h3dc9@e h3dca@x-pat h3dcb@y-pat h3dcc@z-pat h3dcd@m* h3dce@s* h3dcf@ae* h3dd0@r) ((letrec ((h3dd9@f (lambda (h3ddb@e h3ddc@m* h3ddd@s* h3dde@ae*) (if (pair? h3ddb@e) (call-with-values (lambda () (h3dd9@f (cdr h3ddb@e) h3ddc@m* h3ddd@s* h3dde@ae*)) (lambda (h3de9@h3de4 h3dea@h3de6 h3deb@h3de8) ((lambda (h3def@r h3df0@y-pat h3df1@xr*) (if h3def@r (if (null? h3df0@y-pat) ((lambda (h3df5@xr) (if h3df5@xr (values (cons h3df5@xr h3df1@xr*) h3df0@y-pat h3def@r) (values '#f '#f '#f))) (h3d5c@match (car h3ddb@e) h3dca@x-pat h3ddc@m* h3ddd@s* h3dde@ae* '())) (values '() (cdr h3df0@y-pat) (h3d5c@match (car h3ddb@e) (car h3df0@y-pat) h3ddc@m* h3ddd@s* h3dde@ae* h3def@r))) (values '#f '#f '#f))) h3deb@h3de8 h3dea@h3de6 h3de9@h3de4))) (if (h2e25@stx? h3ddb@e) (if (h2deb@top-marked? h3ddc@m*) (values '() h3dcb@y-pat (h3d5c@match h3ddb@e h3dcc@z-pat h3ddc@m* h3ddd@s* h3dde@ae* h3dd0@r)) (call-with-values (lambda () (h2e41@join-wraps h3ddc@m* h3ddd@s* h3dde@ae* h3ddb@e)) (lambda (h3dfd@h3df8 h3dfe@h3dfa h3dff@h3dfc) ((lambda (h3e03@ae* h3e04@s* h3e05@m*) (h3dd9@f (h2e27@stx-expr h3ddb@e) h3e05@m* h3e04@s* h3e03@ae*)) h3dff@h3dfc h3dfe@h3dfa h3dfd@h3df8)))) (if (h29b6@h28a7@annotation? h3ddb@e) (h3dd9@f (h29b8@h28ab@annotation-expression h3ddb@e) h3ddc@m* h3ddd@s* h3dde@ae*) (values '() h3dcb@y-pat (h3d5c@match h3ddb@e h3dcc@z-pat h3ddc@m* h3ddd@s* h3dde@ae* h3dd0@r)))))))) h3dd9@f) h3dc9@e h3dcd@m* h3dce@s* h3dcf@ae*))) (set! h3d54@match-each-any (lambda (h3dad@e h3dae@m* h3daf@s* h3db0@ae*) (if (pair? h3dad@e) ((lambda (h3db5@l) (and h3db5@l (cons (h3d4e@stx^ (car h3dad@e) h3dae@m* h3daf@s* h3db0@ae*) h3db5@l))) (h3d54@match-each-any (cdr h3dad@e) h3dae@m* h3daf@s* h3db0@ae*)) (if (null? h3dad@e) '() (if (h2e25@stx? h3dad@e) (and (not (h2deb@top-marked? h3dae@m*)) (call-with-values (lambda () (h2e41@join-wraps h3dae@m* h3daf@s* h3db0@ae* h3dad@e)) (lambda (h3dbd@h3db8 h3dbe@h3dba h3dbf@h3dbc) ((lambda (h3dc3@ae* h3dc4@s* h3dc5@m*) (h3d54@match-each-any (h2e27@stx-expr h3dad@e) h3dc5@m* h3dc4@s* h3dc3@ae*)) h3dbf@h3dbc h3dbe@h3dba h3dbd@h3db8)))) (if (h29b6@h28a7@annotation? h3dad@e) (h3d54@match-each-any (h29b8@h28ab@annotation-expression h3dad@e) h3dae@m* h3daf@s* h3db0@ae*) '#f)))))) (set! h3d56@match-empty (lambda (h3da7@p h3da8@r) (if (null? h3da7@p) h3da8@r (if (eq? h3da7@p '_) h3da8@r (if (eq? h3da7@p 'any) (cons '() h3da8@r) (if (pair? h3da7@p) (h3d56@match-empty (car h3da7@p) (h3d56@match-empty (cdr h3da7@p) h3da8@r)) (if (eq? h3da7@p 'each-any) (cons '() h3da8@r) ((lambda (h3dab@t) (if (memv h3dab@t '(each)) (h3d56@match-empty (vector-ref h3da7@p '1) h3da8@r) (if (memv h3dab@t '(each+)) (h3d56@match-empty (vector-ref h3da7@p '1) (h3d56@match-empty (reverse (vector-ref h3da7@p '2)) (h3d56@match-empty (vector-ref h3da7@p '3) h3da8@r))) (if (memv h3dab@t '(free-id atom)) h3da8@r (if (memv h3dab@t '(scheme-id atom)) h3da8@r (if (memv h3dab@t '(vector)) (h3d56@match-empty (vector-ref h3da7@p '1) h3da8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" h3da7@p))))))) (vector-ref h3da7@p '0))))))))) (set! h3d58@combine (lambda (h3da3@r* h3da4@r) (if (null? (car h3da3@r*)) h3da4@r (cons (map car h3da3@r*) (h3d58@combine (map cdr h3da3@r*) h3da4@r))))) (set! h3d5a@match* (lambda (h3d7f@e h3d80@p h3d81@m* h3d82@s* h3d83@ae* h3d84@r) (if (null? h3d80@p) (and (null? h3d7f@e) h3d84@r) (if (pair? h3d80@p) (and (pair? h3d7f@e) (h3d5c@match (car h3d7f@e) (car h3d80@p) h3d81@m* h3d82@s* h3d83@ae* (h3d5c@match (cdr h3d7f@e) (cdr h3d80@p) h3d81@m* h3d82@s* h3d83@ae* h3d84@r))) (if (eq? h3d80@p 'each-any) ((lambda (h3d8b@l) (and h3d8b@l (cons h3d8b@l h3d84@r))) (h3d54@match-each-any h3d7f@e h3d81@m* h3d82@s* h3d83@ae*)) ((lambda (h3d8d@t) (if (memv h3d8d@t '(each)) (if (null? h3d7f@e) (h3d56@match-empty (vector-ref h3d80@p '1) h3d84@r) ((lambda (h3d8f@r*) (and h3d8f@r* (h3d58@combine h3d8f@r* h3d84@r))) (h3d50@match-each h3d7f@e (vector-ref h3d80@p '1) h3d81@m* h3d82@s* h3d83@ae*))) (if (memv h3d8d@t '(free-id)) (and (symbol? h3d7f@e) (h2deb@top-marked? h3d81@m*) (h2e63@free-id=? (h3d4e@stx^ h3d7f@e h3d81@m* h3d82@s* h3d83@ae*) (vector-ref h3d80@p '1)) h3d84@r) (if (memv h3d8d@t '(scheme-id)) (and (symbol? h3d7f@e) (h2deb@top-marked? h3d81@m*) (h2e63@free-id=? (h3d4e@stx^ h3d7f@e h3d81@m* h3d82@s* h3d83@ae*) (h2ff0@scheme-stx (vector-ref h3d80@p '1))) h3d84@r) (if (memv h3d8d@t '(each+)) (call-with-values (lambda () (h3d52@match-each+ h3d7f@e (vector-ref h3d80@p '1) (vector-ref h3d80@p '2) (vector-ref h3d80@p '3) h3d81@m* h3d82@s* h3d83@ae* h3d84@r)) (lambda (h3d97@h3d92 h3d98@h3d94 h3d99@h3d96) ((lambda (h3d9d@r h3d9e@y-pat h3d9f@xr*) (and h3d9d@r (null? h3d9e@y-pat) (if (null? h3d9f@xr*) (h3d56@match-empty (vector-ref h3d80@p '1) h3d9d@r) (h3d58@combine h3d9f@xr* h3d9d@r)))) h3d99@h3d96 h3d98@h3d94 h3d97@h3d92))) (if (memv h3d8d@t '(atom)) (and (fast-equal? (vector-ref h3d80@p '1) (h2e6f@strip h3d7f@e h3d81@m*)) h3d84@r) (if (memv h3d8d@t '(vector)) (and (vector? h3d7f@e) (h3d5c@match (vector->list h3d7f@e) (vector-ref h3d80@p '1) h3d81@m* h3d82@s* h3d83@ae* h3d84@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" h3d80@p)))))))) (vector-ref h3d80@p '0))))))) (set! h3d5c@match (lambda (h3d61@e h3d62@p h3d63@m* h3d64@s* h3d65@ae* h3d66@r) (if (not h3d66@r) '#f (if (eq? h3d62@p '_) h3d66@r (if (eq? h3d62@p 'any) (cons (h3d4e@stx^ h3d61@e h3d63@m* h3d64@s* h3d65@ae*) h3d66@r) (if (h2e25@stx? h3d61@e) (and (not (h2deb@top-marked? h3d63@m*)) (call-with-values (lambda () (h2e41@join-wraps h3d63@m* h3d64@s* h3d65@ae* h3d61@e)) (lambda (h3d73@h3d6e h3d74@h3d70 h3d75@h3d72) ((lambda (h3d79@ae* h3d7a@s* h3d7b@m*) (h3d5c@match (h2e27@stx-expr h3d61@e) h3d62@p h3d7b@m* h3d7a@s* h3d79@ae* h3d66@r)) h3d75@h3d72 h3d74@h3d70 h3d73@h3d6e)))) (if (h29b6@h28a7@annotation? h3d61@e) (h3d5c@match (h29b8@h28ab@annotation-expression h3d61@e) h3d62@p h3d63@m* h3d64@s* h3d65@ae* h3d66@r) (h3d5a@match* h3d61@e h3d62@p h3d63@m* h3d64@s* h3d65@ae* h3d66@r)))))))) (lambda (h3d5d@e h3d5e@p) (h3d5c@match h3d5d@e h3d5e@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h3068@ellipsis? (lambda (h3e31@x) (and (h2e5b@id? h3e31@x) (h2e63@free-id=? h3e31@x (h2ff0@scheme-stx '...))))) (set! h306a@underscore? (lambda (h3e33@x) (and (h2e5b@id? h3e33@x) (h2e63@free-id=? h3e33@x (h2ff0@scheme-stx '_))))) (set! h306c@verify-literals (lambda (h3e35@lits h3e36@expr) (for-each (lambda (h3e39@x) (if (or (not (h2e5b@id? h3e39@x)) (h3068@ellipsis? h3e39@x) (h306a@underscore? h3e39@x)) (h3134@syntax-violation '#f '"invalid literal" h3e36@expr h3e39@x) (void))) h3e35@lits))) (set! h306e@syntax-case-transformer ((lambda () ((lambda (h3e3c@build-dispatch-call h3e3e@invalid-ids-error h3e40@gen-clause h3e42@gen-syntax-case) (begin (set! h3e3c@build-dispatch-call (lambda (h3ead@pvars h3eae@expr h3eaf@y h3eb0@r h3eb1@mr) ((lambda (h3eb7@ids h3eb8@levels) ((lambda (h3ebb@labels h3ebc@new-vars) ((lambda (h3ebf@body) (list '(primitive apply) (h2dc9@h2d09@build-lambda '#f h3ebc@new-vars h3ebf@body) h3eaf@y)) (h3088@chi-expr (h2e47@add-subst (h2e1f@make-full-rib h3eb7@ids h3ebb@labels) h3eae@expr) (append (map (lambda (h3ec1@label h3ec2@var h3ec3@level) (cons h3ec1@label (h2e7b@make-binding 'syntax (cons h3ec2@var h3ec3@level)))) h3ebb@labels h3ebc@new-vars (map cdr h3ead@pvars)) h3eb0@r) h3eb1@mr))) (map h2df1@gen-label h3eb7@ids) (map h2ded@gen-lexical h3eb7@ids))) (map car h3ead@pvars) (map cdr h3ead@pvars)))) (set! h3e3e@invalid-ids-error (lambda (h3ea1@id* h3ea2@e h3ea3@class) ((letrec ((h3ea7@find (lambda (h3ea9@id* h3eaa@ok*) (if (null? h3ea9@id*) (h3134@syntax-violation '#f '"invalid syntax" h3ea2@e) (if (h2e5b@id? (car h3ea9@id*)) (if (h2e69@bound-id-member? (car h3ea9@id*) h3eaa@ok*) (h3130@syntax-error (car h3ea9@id*) '"duplicate " h3ea3@class) (h3ea7@find (cdr h3ea9@id*) (cons (car h3ea9@id*) h3eaa@ok*))) (h3130@syntax-error (car h3ea9@id*) '"invalid " h3ea3@class)))))) h3ea7@find) h3ea1@id* '()))) (set! h3e40@gen-clause (lambda (h3e79@x h3e7a@keys h3e7b@clauses h3e7c@r h3e7d@mr h3e7e@pat h3e7f@fender h3e80@expr) (call-with-values (lambda () (h3064@convert-pattern h3e7e@pat h3e7a@keys)) (lambda (h3e8d@h3e8a h3e8e@h3e8c) ((lambda (h3e91@pvars h3e92@p) (if (not (h2e67@distinct-bound-ids? (map car h3e91@pvars))) (h3e3e@invalid-ids-error (map car h3e91@pvars) h3e7e@pat '"pattern variable") (if (not (for-all (lambda (h3e95@x) (not (h3068@ellipsis? (car h3e95@x)))) h3e91@pvars)) (h3134@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" h3e7e@pat) ((lambda (h3e97@y) ((lambda (h3e99@test) ((lambda (h3e9b@conseq) ((lambda (h3e9d@altern) (list (h2dc9@h2d09@build-lambda '#f (list h3e97@y) (list 'if h3e99@test h3e9b@conseq h3e9d@altern)) (list '(primitive syntax-dispatch) h3e79@x (list 'quote h3e92@p)))) (h3e42@gen-syntax-case h3e79@x h3e7a@keys h3e7b@clauses h3e7c@r h3e7d@mr))) (h3e3c@build-dispatch-call h3e91@pvars h3e80@expr h3e97@y h3e7c@r h3e7d@mr))) (if (eq? h3e7f@fender '#t) h3e97@y ((lambda (h3e9f@call) (list 'if h3e97@y h3e9f@call (list 'quote '#f))) (h3e3c@build-dispatch-call h3e91@pvars h3e7f@fender h3e97@y h3e7c@r h3e7d@mr))))) (h2ded@gen-lexical 'tmp))))) h3e8e@h3e8c h3e8d@h3e8a))))) (set! h3e42@gen-syntax-case (lambda (h3e57@x h3e58@keys h3e59@clauses h3e5a@r h3e5b@mr) (if (null? h3e59@clauses) (list '(primitive syntax-error) h3e57@x) ((lambda (h3e61@t) ((lambda (h3e63@ls/false) (if h3e63@ls/false (apply (lambda (h3e65@pat h3e66@expr) (if (and (h2e5b@id? h3e65@pat) (not (h2e69@bound-id-member? h3e65@pat h3e58@keys)) (not (h3068@ellipsis? h3e65@pat))) (if (h2e63@free-id=? h3e65@pat (h2ff0@scheme-stx '_)) (h3088@chi-expr h3e66@expr h3e5a@r h3e5b@mr) ((lambda (h3e69@lab h3e6a@lex) ((lambda (h3e6d@body) (list (h2dc9@h2d09@build-lambda '#f (list h3e6a@lex) h3e6d@body) h3e57@x)) (h3088@chi-expr (h2e47@add-subst (h2e1f@make-full-rib (list h3e65@pat) (list h3e69@lab)) h3e66@expr) (cons (cons h3e69@lab (h2e7b@make-binding 'syntax (cons h3e6a@lex '0))) h3e5a@r) h3e5b@mr))) (h2df1@gen-label h3e65@pat) (h2ded@gen-lexical h3e65@pat))) (h3e40@gen-clause h3e57@x h3e58@keys (cdr h3e59@clauses) h3e5a@r h3e5b@mr h3e65@pat '#t h3e66@expr))) h3e63@ls/false) ((lambda (h3e6f@t) ((lambda (h3e71@ls/false) (if h3e71@ls/false (apply (lambda (h3e73@pat h3e74@fender h3e75@expr) (h3e40@gen-clause h3e57@x h3e58@keys (cdr h3e59@clauses) h3e5a@r h3e5b@mr h3e73@pat h3e74@fender h3e75@expr)) h3e71@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3e6f@t))) (h3066@syntax-dispatch h3e6f@t '(any any any)))) h3e61@t))) (h3066@syntax-dispatch h3e61@t '(any any)))) (car h3e59@clauses))))) (lambda (h3e43@e h3e44@r h3e45@mr) ((lambda (h3e49@t) ((lambda (h3e4b@ls/false) (if h3e4b@ls/false (apply (lambda (h3e4d@expr h3e4e@keys h3e4f@clauses) (begin (h306c@verify-literals h3e4e@keys h3e43@e) ((lambda (h3e53@x) ((lambda (h3e55@body) (list (h2dc9@h2d09@build-lambda '#f (list h3e53@x) h3e55@body) (h3088@chi-expr h3e4d@expr h3e44@r h3e45@mr))) (h3e42@gen-syntax-case h3e53@x h3e4e@keys h3e4f@clauses h3e44@r h3e45@mr))) (h2ded@gen-lexical 'tmp)))) h3e4b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3e49@t))) (h3066@syntax-dispatch h3e49@t '(_ any each-any . each-any)))) h3e43@e)))) '#f '#f '#f '#f)))) (set! h3070@ellipsis-map (lambda (h3ec7@proc h3ec8@ls . h3ecb@ls*) ((lambda (h3ece@who) (begin (set! h3ece@who '...) (begin (if (not (list? h3ec8@ls)) (assertion-violation h3ece@who '"not a list" h3ec8@ls) (void)) (if (not (null? h3ecb@ls*)) ((lambda (h3ecf@n) (for-each (lambda (h3ed1@x) (begin (if (not (list? h3ed1@x)) (assertion-violation h3ece@who '"not a list" h3ed1@x) (void)) (if (not (= (length h3ed1@x) h3ecf@n)) (assertion-violation h3ece@who '"length mismatch" h3ec8@ls h3ed1@x) (void)))) h3ecb@ls*)) (length h3ec8@ls)) (void)) (apply map h3ec7@proc h3ec8@ls h3ecb@ls*)))) '#f))) (set! h3072@syntax-transformer ((lambda () ((lambda (h3ed4@gen-syntax h3ed6@gen-ref h3ed8@gen-append h3eda@gen-mappend h3edc@gen-map h3ede@gen-cons h3ee0@gen-vector h3ee2@regen) (begin (set! h3ed4@gen-syntax (lambda (h3f4b@src h3f4c@e h3f4d@r h3f4e@maps h3f4f@ellipsis? h3f50@vec?) ((lambda (h3f57@t) ((lambda (h3f59@ls/false) (if (and h3f59@ls/false (apply (lambda (h3f5b@dots) (h3f4f@ellipsis? h3f5b@dots)) h3f59@ls/false)) (apply (lambda (h3f5d@dots) (h3134@syntax-violation '#f '"misplaced ellipsis in syntax form" h3f4b@src)) h3f59@ls/false) ((lambda (h3f5f@t) ((lambda (h3f61@ls/false) (if (and h3f61@ls/false (apply (lambda (h3f63@id) (h2e5b@id? h3f63@id)) h3f61@ls/false)) (apply (lambda (h3f65@id) ((lambda (h3f67@label) ((lambda (h3f69@b) ((lambda () (if (eq? (h2e7d@binding-type h3f69@b) 'syntax) (call-with-values (lambda () ((lambda (h3f6f@var.lev) (h3ed6@gen-ref h3f4b@src (car h3f6f@var.lev) (cdr h3f6f@var.lev) h3f4e@maps)) (h2e7f@binding-value h3f69@b))) (lambda (h3f71@h3f6c h3f72@h3f6e) ((lambda (h3f75@maps h3f76@var) (values (list 'ref h3f76@var) h3f75@maps)) h3f72@h3f6e h3f71@h3f6c))) (values (list 'quote h3f4c@e) h3f4e@maps))))) (h2e79@label->binding h3f67@label h3f4d@r))) (h2e75@id->label h3f4c@e))) h3f61@ls/false) ((lambda (h3f79@t) ((lambda (h3f7b@ls/false) (if (and h3f7b@ls/false (apply (lambda (h3f7d@dots h3f7e@e) (h3f4f@ellipsis? h3f7d@dots)) h3f7b@ls/false)) (apply (lambda (h3f81@dots h3f82@e) (if h3f50@vec? (h3134@syntax-violation '#f '"misplaced ellipsis in syntax form" h3f4b@src) (h3ed4@gen-syntax h3f4b@src h3f82@e h3f4d@r h3f4e@maps (lambda (h3f85@x) '#f) '#f))) h3f7b@ls/false) ((lambda (h3f87@t) ((lambda (h3f89@ls/false) (if (and h3f89@ls/false (apply (lambda (h3f8b@x h3f8c@dots h3f8d@y) (h3f4f@ellipsis? h3f8c@dots)) h3f89@ls/false)) (apply (lambda (h3f91@x h3f92@dots h3f93@y) ((letrec ((h3f97@f (lambda (h3f99@y h3f9a@k) ((lambda (h3f9d@t) ((lambda (h3f9f@ls/false) (if h3f9f@ls/false (apply (lambda () (h3f9a@k h3f4e@maps)) h3f9f@ls/false) ((lambda (h3fa1@t) ((lambda (h3fa3@ls/false) (if (and h3fa3@ls/false (apply (lambda (h3fa5@dots h3fa6@y) (h3f4f@ellipsis? h3fa5@dots)) h3fa3@ls/false)) (apply (lambda (h3fa9@dots h3faa@y) (h3f97@f h3faa@y (lambda (h3fad@maps) (call-with-values (lambda () (h3f9a@k (cons '() h3fad@maps))) (lambda (h3fb3@h3fb0 h3fb4@h3fb2) ((lambda (h3fb7@maps h3fb8@x) (if (null? (car h3fb7@maps)) (h3134@syntax-violation '#f '"extra ellipsis in syntax form" h3f4b@src) (values (h3eda@gen-mappend h3fb8@x (car h3fb7@maps)) (cdr h3fb7@maps)))) h3fb4@h3fb2 h3fb3@h3fb0)))))) h3fa3@ls/false) ((lambda (h3fbb@t) ((lambda (h3fbd@ls/false) (if h3fbd@ls/false (apply (lambda () (call-with-values (lambda () (h3ed4@gen-syntax h3f4b@src h3f99@y h3f4d@r h3f4e@maps h3f4f@ellipsis? h3f50@vec?)) (lambda (h3fc3@h3fc0 h3fc4@h3fc2) ((lambda (h3fc7@maps h3fc8@y) (call-with-values (lambda () (h3f9a@k h3fc7@maps)) (lambda (h3fcf@h3fcc h3fd0@h3fce) ((lambda (h3fd3@maps h3fd4@x) (values (h3ed8@gen-append h3fd4@x h3fc8@y) h3fd3@maps)) h3fd0@h3fce h3fcf@h3fcc)))) h3fc4@h3fc2 h3fc3@h3fc0)))) h3fbd@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3fbb@t))) (h3066@syntax-dispatch h3fbb@t '_))) h3fa1@t))) (h3066@syntax-dispatch h3fa1@t '(any . any)))) h3f9d@t))) (h3066@syntax-dispatch h3f9d@t '()))) h3f99@y)))) h3f97@f) h3f93@y (lambda (h3fd7@maps) (call-with-values (lambda () (h3ed4@gen-syntax h3f4b@src h3f91@x h3f4d@r (cons '() h3fd7@maps) h3f4f@ellipsis? '#f)) (lambda (h3fdd@h3fda h3fde@h3fdc) ((lambda (h3fe1@maps h3fe2@x) (if (null? (car h3fe1@maps)) (h3134@syntax-violation '#f '"extra ellipsis in syntax form" h3f4b@src) (values (h3edc@gen-map h3fe2@x (car h3fe1@maps)) (cdr h3fe1@maps)))) h3fde@h3fdc h3fdd@h3fda)))))) h3f89@ls/false) ((lambda (h3fe5@t) ((lambda (h3fe7@ls/false) (if h3fe7@ls/false (apply (lambda (h3fe9@x h3fea@y) (call-with-values (lambda () (h3ed4@gen-syntax h3f4b@src h3fe9@x h3f4d@r h3f4e@maps h3f4f@ellipsis? '#f)) (lambda (h3ff1@h3fee h3ff2@h3ff0) ((lambda (h3ff5@maps h3ff6@xnew) (call-with-values (lambda () (h3ed4@gen-syntax h3f4b@src h3fea@y h3f4d@r h3ff5@maps h3f4f@ellipsis? h3f50@vec?)) (lambda (h3ffd@h3ffa h3ffe@h3ffc) ((lambda (h4001@maps h4002@ynew) (values (h3ede@gen-cons h3f4c@e h3fe9@x h3fea@y h3ff6@xnew h4002@ynew) h4001@maps)) h3ffe@h3ffc h3ffd@h3ffa)))) h3ff2@h3ff0 h3ff1@h3fee)))) h3fe7@ls/false) ((lambda (h4005@t) ((lambda (h4007@ls/false) (if h4007@ls/false (apply (lambda (h4009@ls) (call-with-values (lambda () (h3ed4@gen-syntax h3f4b@src h4009@ls h3f4d@r h3f4e@maps h3f4f@ellipsis? '#t)) (lambda (h400f@h400c h4010@h400e) ((lambda (h4013@maps h4014@lsnew) (values (h3ee0@gen-vector h3f4c@e h4009@ls h4014@lsnew) h4013@maps)) h4010@h400e h400f@h400c)))) h4007@ls/false) ((lambda (h4017@t) ((lambda (h4019@ls/false) (if h4019@ls/false (apply (lambda () (values (list 'quote h3f4c@e) h3f4e@maps)) h4019@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4017@t))) (h3066@syntax-dispatch h4017@t '_))) h4005@t))) (h3066@syntax-dispatch h4005@t '#(vector each-any)))) h3fe5@t))) (h3066@syntax-dispatch h3fe5@t '(any . any)))) h3f87@t))) (h3066@syntax-dispatch h3f87@t '(any any . any)))) h3f79@t))) (h3066@syntax-dispatch h3f79@t '(any any)))) h3f5f@t))) (h3066@syntax-dispatch h3f5f@t 'any))) h3f57@t))) (h3066@syntax-dispatch h3f57@t 'any))) h3f4c@e))) (set! h3ed6@gen-ref (lambda (h3f31@src h3f32@var h3f33@level h3f34@maps) (if (= h3f33@level '0) (values h3f32@var h3f34@maps) (if (null? h3f34@maps) (h3134@syntax-violation '#f '"missing ellipsis in syntax form" h3f31@src) (call-with-values (lambda () (h3ed6@gen-ref h3f31@src h3f32@var (- h3f33@level '1) (cdr h3f34@maps))) (lambda (h3f3d@h3f3a h3f3e@h3f3c) ((lambda (h3f41@outer-maps h3f42@outer-var) ((lambda (h3f45@t) (if h3f45@t ((lambda (h3f47@b) (values (cdr h3f47@b) h3f34@maps)) h3f45@t) ((lambda (h3f49@inner-var) (values h3f49@inner-var (cons (cons (cons h3f42@outer-var h3f49@inner-var) (car h3f34@maps)) h3f41@outer-maps))) (h2ded@gen-lexical 'tmp)))) (assq h3f42@outer-var (car h3f34@maps)))) h3f3e@h3f3c h3f3d@h3f3a))))))) (set! h3ed8@gen-append (lambda (h3f2d@x h3f2e@y) (if (fast-equal? h3f2e@y ''()) h3f2d@x (list 'append h3f2d@x h3f2e@y)))) (set! h3eda@gen-mappend (lambda (h3f29@e h3f2a@map-env) (list 'apply '(primitive append) (h3edc@gen-map h3f29@e h3f2a@map-env)))) (set! h3edc@gen-map (lambda (h3f17@e h3f18@map-env) ((lambda (h3f1b@formals h3f1c@actuals) (if (eq? (car h3f17@e) 'ref) (car h3f1c@actuals) (if (for-all (lambda (h3f1f@x) (and (eq? (car h3f1f@x) 'ref) (memq (cadr h3f1f@x) h3f1b@formals))) (cdr h3f17@e)) ((lambda (h3f21@args) (cons 'map (cons (list 'primitive (car h3f17@e)) h3f21@args))) (map ((lambda (h3f23@r) (lambda (h3f25@x) (cdr (assq (cadr h3f25@x) h3f23@r)))) (map cons h3f1b@formals h3f1c@actuals)) (cdr h3f17@e))) (cons* 'map (list 'lambda h3f1b@formals h3f17@e) h3f1c@actuals)))) (map cdr h3f18@map-env) (map (lambda (h3f27@x) (list 'ref (car h3f27@x))) h3f18@map-env)))) (set! h3ede@gen-cons (lambda (h3f07@e h3f08@x h3f09@y h3f0a@xnew h3f0b@ynew) ((lambda (h3f11@t) (if (memv h3f11@t '(quote)) (if (eq? (car h3f0a@xnew) 'quote) ((lambda (h3f13@xnew h3f14@ynew) (if (and (eq? h3f13@xnew h3f08@x) (eq? h3f14@ynew h3f09@y)) (list 'quote h3f07@e) (list 'quote (cons h3f13@xnew h3f14@ynew)))) (cadr h3f0a@xnew) (cadr h3f0b@ynew)) (if (null? (cadr h3f0b@ynew)) (list 'list h3f0a@xnew) (list 'cons h3f0a@xnew h3f0b@ynew))) (if (memv h3f11@t '(list)) (cons 'list (cons h3f0a@xnew (cdr h3f0b@ynew))) (list 'cons h3f0a@xnew h3f0b@ynew)))) (car h3f0b@ynew)))) (set! h3ee0@gen-vector (lambda (h3f01@e h3f02@ls h3f03@lsnew) (if (eq? (car h3f03@lsnew) 'quote) (if (eq? (cadr h3f03@lsnew) h3f02@ls) (list 'quote h3f01@e) (list 'quote (list->vector (cadr h3f03@lsnew)))) (if (eq? (car h3f03@lsnew) 'list) (cons 'vector (cdr h3f03@lsnew)) (list 'list->vector h3f03@lsnew))))) (set! h3ee2@regen (lambda (h3efb@x) ((lambda (h3efd@t) (if (memv h3efd@t '(ref)) (cadr h3efb@x) (if (memv h3efd@t '(primitive)) (list 'primitive (cadr h3efb@x)) (if (memv h3efd@t '(quote)) (list 'quote (cadr h3efb@x)) (if (memv h3efd@t '(lambda)) (h2dc9@h2d09@build-lambda '#f (cadr h3efb@x) (h3ee2@regen (caddr h3efb@x))) (if (memv h3efd@t '(map)) ((lambda (h3eff@ls) (cons '(primitive ellipsis-map) h3eff@ls)) (map h3ee2@regen (cdr h3efb@x))) (cons (list 'primitive (car h3efb@x)) (map h3ee2@regen (cdr h3efb@x))))))))) (car h3efb@x)))) (lambda (h3ee3@e h3ee4@r h3ee5@mr) ((lambda (h3ee9@t) ((lambda (h3eeb@ls/false) (if h3eeb@ls/false (apply (lambda (h3eed@x) (call-with-values (lambda () (h3ed4@gen-syntax h3ee3@e h3eed@x h3ee4@r '() h3068@ellipsis? '#f)) (lambda (h3ef3@h3ef0 h3ef4@h3ef2) ((lambda (h3ef7@maps h3ef8@e) (h3ee2@regen h3ef8@e)) h3ef4@h3ef2 h3ef3@h3ef0)))) h3eeb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h3ee9@t))) (h3066@syntax-dispatch h3ee9@t '(_ any)))) h3ee3@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h3074@core-macro-transformer (lambda (h401b@name) ((lambda (h401d@t) (if (memv h401d@t '(quote)) h3016@quote-transformer (if (memv h401d@t '(lambda)) h301a@lambda-transformer (if (memv h401d@t '(case-lambda)) h3018@case-lambda-transformer (if (memv h401d@t '(letrec)) h2ffe@letrec-transformer (if (memv h401d@t '(letrec*)) h3000@letrec*-transformer (if (memv h401d@t '(if)) h300e@if-transformer (if (memv h401d@t '(and)) h3010@and-transformer (if (memv h401d@t '(or)) h3012@or-transformer (if (memv h401d@t '(foreign-call)) h3062@foreign-call-transformer (if (memv h401d@t '(syntax-case)) h306e@syntax-case-transformer (if (memv h401d@t '(syntax)) h3072@syntax-transformer (if (memv h401d@t '(type-descriptor)) h3004@type-descriptor-transformer (if (memv h401d@t '(record-type-descriptor)) h3006@record-type-descriptor-transformer (if (memv h401d@t '(record-constructor-descriptor)) h3008@record-constructor-descriptor-transformer (if (memv h401d@t '(fluid-let-syntax)) h3002@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" h401b@name))))))))))))))))) h401b@name))) (set! h3076@symbol-macro (lambda (h401f@x h4020@set) ((lambda (h4023@t) ((lambda (h4025@ls/false) (if (and h4025@ls/false (apply (lambda (h4027@name) (and (h2e5b@id? h4027@name) (memq (h2e5d@id->sym h4027@name) h4020@set))) h4025@ls/false)) (apply (lambda (h4029@name) (h301c@bless (list 'quote h4029@name))) h4025@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4023@t))) (h3066@syntax-dispatch h4023@t '(_ any)))) h401f@x))) (set! h3078@macro-transformer (lambda (h402b@x) (if (procedure? h402b@x) h402b@x (if (symbol? h402b@x) ((lambda (h402d@t) (if (memv h402d@t '(define-record-type)) h305a@define-record-type-macro (if (memv h402d@t '(define-struct)) h3058@define-struct-macro (if (memv h402d@t '(include)) h304e@include-macro (if (memv h402d@t '(cond)) h304a@cond-macro (if (memv h402d@t '(let)) h3022@let-macro (if (memv h402d@t '(do)) h3042@do-macro (if (memv h402d@t '(or)) h3046@or-macro (if (memv h402d@t '(and)) h3048@and-macro (if (memv h402d@t '(let*)) h3044@let*-macro (if (memv h402d@t '(let-values)) h3024@let-values-macro (if (memv h402d@t '(let*-values)) h3026@let*-values-macro (if (memv h402d@t '(syntax-rules)) h3052@syntax-rules-macro (if (memv h402d@t '(quasiquote)) h3054@quasiquote-macro (if (memv h402d@t '(quasisyntax)) h3056@quasisyntax-macro (if (memv h402d@t '(with-syntax)) h301e@with-syntax-macro (if (memv h402d@t '(when)) h300a@when-macro (if (memv h402d@t '(unless)) h300c@unless-macro (if (memv h402d@t '(case)) h3014@case-macro (if (memv h402d@t '(identifier-syntax)) h3040@identifier-syntax-macro (if (memv h402d@t '(time)) h3038@time-macro (if (memv h402d@t '(delay)) h303a@delay-macro (if (memv h402d@t '(assert)) h303c@assert-macro (if (memv h402d@t '(endianness)) h303e@endianness-macro (if (memv h402d@t '(guard)) h3034@guard-macro (if (memv h402d@t '(define-enumeration)) h3036@define-enumeration-macro (if (memv h402d@t '(trace-lambda)) h3028@trace-lambda-macro (if (memv h402d@t '(trace-define)) h302a@trace-define-macro (if (memv h402d@t '(trace-define-syntax)) h302c@trace-define-syntax-macro (if (memv h402d@t '(trace-let-syntax)) h3030@trace-let-syntax-macro (if (memv h402d@t '(trace-letrec-syntax)) h3032@trace-letrec-syntax-macro (if (memv h402d@t '(define-condition-type)) h305c@define-condition-type-macro (if (memv h402d@t '(parameterize)) h3060@parameterize-macro (if (memv h402d@t '(include-into)) h3050@include-into-macro (if (memv h402d@t '(eol-style)) (lambda (h402f@x) (h3076@symbol-macro h402f@x '(none lf cr crlf nel crnel ls))) (if (memv h402d@t '(error-handling-mode)) (lambda (h4031@x) (h3076@symbol-macro h4031@x '(ignore raise replace))) (if (memv h402d@t '(buffer-mode)) (lambda (h4033@x) (h3076@symbol-macro h4033@x '(none line block))) (if (memv h402d@t '(file-options)) h2de0@file-options-macro (if (memv h402d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) h305e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" h402b@x)))))))))))))))))))))))))))))))))))))))) h402b@x) (error 'core-macro-transformer '"BUG: invalid macro" h402b@x))))) (set! h307a@local-macro-transformer (lambda (h4035@x) (car h4035@x))) (set! h307c@do-macro-call (lambda (h4037@transformer h4038@expr) ((lambda (h403b@out) (begin ((letrec ((h403d@f (lambda (h403f@x) (if (not (h2e25@stx? h403f@x)) (if (pair? h403f@x) (begin (h403d@f (car h403f@x)) (h403d@f (cdr h403f@x))) (if (vector? h403f@x) (vector-for-each h403d@f h403f@x) (if (symbol? h403f@x) (h3134@syntax-violation '#f '"raw symbol encountered in output of macro" h4038@expr h403f@x) (void)))) (void))))) h403d@f) h403b@out) (h2e45@add-mark (h2e3b@gen-mark) h403b@out h4038@expr))) (h4037@transformer (h2e45@add-mark h2e3d@anti-mark h4038@expr '#f))))) (set! h307e@chi-macro (lambda (h4041@p h4042@e) (h307c@do-macro-call (h3078@macro-transformer h4041@p) h4042@e))) (set! h3080@chi-local-macro (lambda (h4045@p h4046@e) (h307c@do-macro-call (h307a@local-macro-transformer h4045@p) h4046@e))) (set! h3082@chi-global-macro (lambda (h4049@p h404a@e) ((lambda (h404d@lib h404e@loc) (begin (h2c92@h2ad6@visit-library h404d@lib) ((lambda (h4051@x) ((lambda (h4053@transformer) (h307c@do-macro-call h4053@transformer h404a@e)) (if (procedure? h4051@x) h4051@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" h4051@x)))) (symbol-value h404e@loc)))) (car h4049@p) (cdr h4049@p)))) (set! h3084@chi-expr* (lambda (h4055@e* h4056@r h4057@mr) (if (null? h4055@e*) '() ((lambda (h405b@e) (cons h405b@e (h3084@chi-expr* (cdr h4055@e*) h4056@r h4057@mr))) (h3088@chi-expr (car h4055@e*) h4056@r h4057@mr))))) (set! h3086@chi-application (lambda (h405d@e h405e@r h405f@mr) ((lambda (h4063@t) ((lambda (h4065@ls/false) (if h4065@ls/false (apply (lambda (h4067@rator h4068@rands) ((lambda (h406b@rator) (cons h406b@rator (h3084@chi-expr* h4068@rands h405e@r h405f@mr))) (h3088@chi-expr h4067@rator h405e@r h405f@mr))) h4065@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4063@t))) (h3066@syntax-dispatch h4063@t '(any . each-any)))) h405d@e))) (set! h3088@chi-expr (lambda (h406d@e h406e@r h406f@mr) (call-with-values (lambda () (h2e83@syntax-type h406d@e h406e@r)) (lambda (h4079@h4074 h407a@h4076 h407b@h4078) ((lambda (h407f@kwd h4080@value h4081@type) ((lambda (h4085@t) (if (memv h4085@t '(core-macro)) ((lambda (h4087@transformer) (h4087@transformer h406d@e h406e@r h406f@mr)) (h3074@core-macro-transformer h4080@value)) (if (memv h4085@t '(global)) ((lambda (h4089@lib) ((lambda (h408b@loc) ((lambda () (begin ((h30c8@inv-collector) h4089@lib) h408b@loc)))) (cdr h4080@value))) (car h4080@value)) (if (memv h4085@t '(core-prim)) ((lambda (h408d@name) (list 'primitive h408d@name)) h4080@value) (if (memv h4085@t '(call)) (h3086@chi-application h406d@e h406e@r h406f@mr) (if (memv h4085@t '(lexical)) ((lambda (h408f@lex) h408f@lex) (h2ff2@lexical-var h4080@value)) (if (memv h4085@t '(global-macro global-macro!)) (h3088@chi-expr (h3082@chi-global-macro h4080@value h406d@e) h406e@r h406f@mr) (if (memv h4085@t '(local-macro local-macro!)) (h3088@chi-expr (h3080@chi-local-macro h4080@value h406d@e) h406e@r h406f@mr) (if (memv h4085@t '(macro macro!)) (h3088@chi-expr (h307e@chi-macro h4080@value h406d@e) h406e@r h406f@mr) (if (memv h4085@t '(constant)) ((lambda (h4091@datum) (list 'quote h4091@datum)) h4080@value) (if (memv h4085@t '(set!)) (h308a@chi-set! h406d@e h406e@r h406f@mr) (if (memv h4085@t '(begin)) ((lambda (h4093@t) ((lambda (h4095@ls/false) (if h4095@ls/false (apply (lambda (h4097@x h4098@x*) (h2dcc@h2d3b@build-sequence '#f (h3084@chi-expr* (cons h4097@x h4098@x*) h406e@r h406f@mr))) h4095@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4093@t))) (h3066@syntax-dispatch h4093@t '(_ any . each-any)))) h406d@e) (if (memv h4085@t '(let-syntax letrec-syntax)) ((lambda (h409b@t) ((lambda (h409d@ls/false) (if (and h409d@ls/false (apply (lambda (h409f@xlhs* h40a0@xrhs* h40a1@xbody h40a2@xbody*) (if (not (h2e65@valid-bound-ids? h409f@xlhs*)) (h3134@syntax-violation '#f '"invalid identifiers" h406d@e) (void))) h409d@ls/false)) (apply (lambda (h40a7@xlhs* h40a8@xrhs* h40a9@xbody h40aa@xbody*) ((lambda (h40af@xlab*) ((lambda (h40b1@xrib) ((lambda (h40b3@xb*) ((lambda () (h2dcc@h2d3b@build-sequence '#f (h3084@chi-expr* (map (lambda (h40b5@x) (h2e47@add-subst h40b1@xrib h40b5@x)) (cons h40a9@xbody h40aa@xbody*)) (append (map cons h40af@xlab* h40b3@xb*) h406e@r) (append (map cons h40af@xlab* h40b3@xb*) h406f@mr)))))) (map (lambda (h40b7@x) (h2e99@make-eval-transformer (h30ba@expand-transformer (if (eq? h4081@type 'let-syntax) h40b7@x (h2e47@add-subst h40b1@xrib h40b7@x)) h406f@mr))) h40a8@xrhs*))) (h2e1f@make-full-rib h40a7@xlhs* h40af@xlab*))) (map h2df1@gen-label h40a7@xlhs*))) h409d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h409b@t))) (h3066@syntax-dispatch h409b@t '(_ #(each (any any)) any . each-any)))) h406d@e) (if (memv h4085@t '(displaced-lexical)) (h3134@syntax-violation '#f '"identifier out of context" h406d@e) (if (memv h4085@t '(syntax)) (h3134@syntax-violation '#f '"reference to pattern variable outside a syntax form" h406d@e) (if (memv h4085@t '(define define-syntax module import library)) (h3134@syntax-violation '#f (string-append ((lambda (h40b9@t) (if (memv h40b9@t '(define)) '"a definition" (if (memv h40b9@t '(define-syntax)) '"a define-syntax" (if (memv h40b9@t '(module)) '"a module definition" (if (memv h40b9@t '(library)) '"a library definition" (if (memv h40b9@t '(import)) '"an import declaration" (if (memv h40b9@t '(export)) '"an export declaration" '"a non-expression"))))))) h4081@type) '" was found where an expression was expected") h406d@e) (if (memv h4085@t '(mutable)) (h3134@syntax-violation '#f '"attempt to reference an unexportable variable" h406d@e) (h3134@syntax-violation '#f '"invalid expression" h406d@e)))))))))))))))))) h4081@type)) h407b@h4078 h407a@h4076 h4079@h4074))))) (set! h308a@chi-set! (lambda (h40bb@e h40bc@r h40bd@mr) ((lambda (h40c1@t) ((lambda (h40c3@ls/false) (if (and h40c3@ls/false (apply (lambda (h40c5@x h40c6@v) (h2e5b@id? h40c5@x)) h40c3@ls/false)) (apply (lambda (h40c9@x h40ca@v) (call-with-values (lambda () (h2e83@syntax-type h40c9@x h40bc@r)) (lambda (h40d3@h40ce h40d4@h40d0 h40d5@h40d2) ((lambda (h40d9@kwd h40da@value h40db@type) ((lambda (h40df@t) (if (memv h40df@t '(lexical)) (begin (h2ff6@set-lexical-mutable! h40da@value '#t) (list 'set! (h2ff2@lexical-var h40da@value) (h3088@chi-expr h40ca@v h40bc@r h40bd@mr))) (if (memv h40df@t '(core-prim)) (h3134@syntax-violation '#f '"cannot modify imported core primitive" h40bb@e) (if (memv h40df@t '(global)) (h3134@syntax-violation '#f '"attempt to modify imported binding" h40bb@e) (if (memv h40df@t '(global-macro!)) (h3088@chi-expr (h3082@chi-global-macro h40da@value h40bb@e) h40bc@r h40bd@mr) (if (memv h40df@t '(local-macro!)) (h3088@chi-expr (h3080@chi-local-macro h40da@value h40bb@e) h40bc@r h40bd@mr) (if (memv h40df@t '(mutable)) (h3134@syntax-violation '#f '"attempt to assign to an unexportable variable" h40bb@e) (h3134@syntax-violation '#f '"invalid syntax" h40bb@e)))))))) h40db@type)) h40d5@h40d2 h40d4@h40d0 h40d3@h40ce)))) h40c3@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h40c1@t))) (h3066@syntax-dispatch h40c1@t '(_ any any)))) h40bb@e))) (set! h308c@verify-formals (lambda (h40e1@fmls h40e2@stx) ((lambda (h40e5@t) ((lambda (h40e7@ls/false) (if h40e7@ls/false (apply (lambda (h40e9@x*) (if (not (h2e65@valid-bound-ids? h40e9@x*)) (h3020@invalid-fmls-error h40e2@stx h40e1@fmls) (void))) h40e7@ls/false) ((lambda (h40eb@t) ((lambda (h40ed@ls/false) (if h40ed@ls/false (apply (lambda (h40ef@x* h40f0@x) (if (not (h2e65@valid-bound-ids? (cons h40f0@x h40ef@x*))) (h3020@invalid-fmls-error h40e2@stx h40e1@fmls) (void))) h40ed@ls/false) ((lambda (h40f3@t) ((lambda (h40f5@ls/false) (if h40f5@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid syntax" h40e2@stx)) h40f5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h40f3@t))) (h3066@syntax-dispatch h40f3@t '_))) h40eb@t))) (h3066@syntax-dispatch h40eb@t '#(each+ any () any)))) h40e5@t))) (h3066@syntax-dispatch h40e5@t 'each-any))) h40e1@fmls))) (set! h308e@chi-lambda-clause (lambda (h40f7@stx h40f8@fmls h40f9@body* h40fa@r h40fb@mr) ((lambda (h4101@t) ((lambda (h4103@ls/false) (if h4103@ls/false (apply (lambda (h4105@x*) (begin (h308c@verify-formals h40f8@fmls h40f7@stx) ((lambda (h4107@lex* h4108@lab*) (values h4107@lex* (h309e@chi-internal (h2e47@add-subst (h2e1f@make-full-rib h4105@x* h4108@lab*) h40f9@body*) (h2ffa@add-lexicals h4108@lab* h4107@lex* h40fa@r) h40fb@mr))) (map h2ded@gen-lexical h4105@x*) (map h2df1@gen-label h4105@x*)))) h4103@ls/false) ((lambda (h410b@t) ((lambda (h410d@ls/false) (if h410d@ls/false (apply (lambda (h410f@x* h4110@x) (begin (h308c@verify-formals h40f8@fmls h40f7@stx) ((lambda (h4113@lex* h4114@lab* h4115@lex h4116@lab) (values (append h4113@lex* h4115@lex) (h309e@chi-internal (h2e47@add-subst (h2e1f@make-full-rib (cons h4110@x h410f@x*) (cons h4116@lab h4114@lab*)) h40f9@body*) (h2ffa@add-lexicals (cons h4116@lab h4114@lab*) (cons h4115@lex h4113@lex*) h40fa@r) h40fb@mr))) (map h2ded@gen-lexical h410f@x*) (map h2df1@gen-label h410f@x*) (h2ded@gen-lexical h4110@x) (h2df1@gen-label h4110@x)))) h410d@ls/false) ((lambda (h411b@t) ((lambda (h411d@ls/false) (if h411d@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid syntax" h40f8@fmls)) h411d@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h411b@t))) (h3066@syntax-dispatch h411b@t '_))) h410b@t))) (h3066@syntax-dispatch h410b@t '#(each+ any () any)))) h4101@t))) (h3066@syntax-dispatch h4101@t 'each-any))) h40f8@fmls))) (set! h3090@chi-lambda-clause* (lambda (h411f@stx h4120@fmls* h4121@body** h4122@r h4123@mr) (if (null? h4120@fmls*) (values '() '()) (call-with-values (lambda () (h308e@chi-lambda-clause h411f@stx (car h4120@fmls*) (car h4121@body**) h4122@r h4123@mr)) (lambda (h412d@h412a h412e@h412c) ((lambda (h4131@b h4132@a) (call-with-values (lambda () (h3090@chi-lambda-clause* h411f@stx (cdr h4120@fmls*) (cdr h4121@body**) h4122@r h4123@mr)) (lambda (h4139@h4136 h413a@h4138) ((lambda (h413d@b* h413e@a*) (values (cons h4132@a h413e@a*) (cons h4131@b h413d@b*))) h413a@h4138 h4139@h4136)))) h412e@h412c h412d@h412a)))))) (set! h3092@chi-defun (lambda (h4141@x h4142@r h4143@mr) ((lambda (h4147@fmls h4148@body*) (call-with-values (lambda () (h308e@chi-lambda-clause h4147@fmls h4147@fmls h4148@body* h4142@r h4143@mr)) (lambda (h414f@h414c h4150@h414e) ((lambda (h4153@body h4154@fmls) (h2dc9@h2d09@build-lambda '#f h4154@fmls h4153@body)) h4150@h414e h414f@h414c)))) (car h4141@x) (cdr h4141@x)))) (set! h3094@chi-rhs (lambda (h4157@rhs h4158@r h4159@mr) ((lambda (h415d@t) (if (memv h415d@t '(defun)) (h3092@chi-defun (cdr h4157@rhs) h4158@r h4159@mr) (if (memv h415d@t '(expr)) ((lambda (h415f@expr) (h3088@chi-expr h415f@expr h4158@r h4159@mr)) (cdr h4157@rhs)) (if (memv h415d@t '(top-expr)) ((lambda (h4161@expr) (h2dcc@h2d3b@build-sequence '#f (list (h3088@chi-expr h4161@expr h4158@r h4159@mr) (h2dcd@h2d3d@build-void)))) (cdr h4157@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" h4157@rhs))))) (car h4157@rhs)))) (set! h3096@expand-interaction-rhs*/init* (lambda (h4163@lhs* h4164@rhs* h4165@init* h4166@r h4167@mr) ((letrec ((h416d@f (lambda (h416f@lhs* h4170@rhs*) (if (null? h416f@lhs*) (map (lambda (h4173@x) (h3088@chi-expr h4173@x h4166@r h4167@mr)) h4165@init*) ((lambda (h4175@lhs h4176@rhs) ((lambda (h4179@t) (if (memv h4179@t '(defun)) ((lambda (h417b@rhs) (cons (list 'set! h4175@lhs h417b@rhs) (h416d@f (cdr h416f@lhs*) (cdr h4170@rhs*)))) (h3092@chi-defun (cdr h4176@rhs) h4166@r h4167@mr)) (if (memv h4179@t '(expr)) ((lambda (h417d@rhs) (cons (list 'set! h4175@lhs h417d@rhs) (h416d@f (cdr h416f@lhs*) (cdr h4170@rhs*)))) (h3088@chi-expr (cdr h4176@rhs) h4166@r h4167@mr)) (if (memv h4179@t '(top-expr)) ((lambda (h417f@e) (cons h417f@e (h416d@f (cdr h416f@lhs*) (cdr h4170@rhs*)))) (h3088@chi-expr (cdr h4176@rhs) h4166@r h4167@mr)) (error 'expand-interaction '"invallid" h4176@rhs))))) (car h4176@rhs))) (car h416f@lhs*) (car h4170@rhs*)))))) h416d@f) h4163@lhs* h4164@rhs*))) (set! h3098@chi-rhs* (lambda (h4181@rhs* h4182@r h4183@mr) ((letrec ((h4187@f (lambda (h4189@ls) (if (null? h4189@ls) '() ((lambda (h418b@a) (cons h418b@a (h4187@f (cdr h4189@ls)))) (h3094@chi-rhs (car h4189@ls) h4182@r h4183@mr)))))) h4187@f) h4181@rhs*))) (set! h309a@find-bound=? (lambda (h418d@x h418e@lhs* h418f@rhs*) (if (null? h418e@lhs*) '#f (if (h2e61@bound-id=? h418d@x (car h418e@lhs*)) (car h418f@rhs*) (h309a@find-bound=? h418d@x (cdr h418e@lhs*) (cdr h418f@rhs*)))))) (set! h309c@find-dups (lambda (h4193@ls) ((letrec ((h4195@f (lambda (h4197@ls h4198@dups) (if (null? h4197@ls) h4198@dups ((lambda (h419b@t) (if h419b@t ((lambda (h419d@x) (h4195@f (cdr h4197@ls) (cons (list (car h4197@ls) h419d@x) h4198@dups))) h419b@t) (h4195@f (cdr h4197@ls) h4198@dups))) (h309a@find-bound=? (car h4197@ls) (cdr h4197@ls) (cdr h4197@ls))))))) h4195@f) h4193@ls '()))) (set! h309e@chi-internal (lambda (h419f@e* h41a0@r h41a1@mr) ((lambda (h41a5@rib) (call-with-values (lambda () (h30b8@chi-body* (map (lambda (h41b7@x) (h2e47@add-subst h41a5@rib h41b7@x)) (h2e59@syntax->list h419f@e*)) h41a0@r h41a1@mr '() '() '() '() '() h41a5@rib '#f)) (lambda (h41b9@h41a8 h41ba@h41aa h41bb@h41ac h41bc@h41ae h41bd@h41b0 h41be@h41b2 h41bf@h41b4 h41c0@h41b6) ((lambda (h41c9@_exp* h41ca@kwd* h41cb@mod** h41cc@rhs* h41cd@lex* h41ce@mr h41cf@r h41d0@e*) (begin (if (null? h41d0@e*) (h3134@syntax-violation '#f '"no expression in body" h41d0@e*) (void)) ((lambda (h41d9@init*) ((lambda (h41db@rhs*) ((lambda () (h2dcf@h2d41@build-letrec* '#f (reverse h41cd@lex*) (reverse h41db@rhs*) (h2dcc@h2d3b@build-sequence '#f h41d9@init*))))) (h3098@chi-rhs* h41cc@rhs* h41cf@r h41ce@mr))) (h3084@chi-expr* (append (apply append (reverse h41cb@mod**)) h41d0@e*) h41cf@r h41ce@mr)))) h41c0@h41b6 h41bf@h41b4 h41be@h41b2 h41bd@h41b0 h41bc@h41ae h41bb@h41ac h41ba@h41aa h41b9@h41a8)))) (h2e13@make-empty-rib)))) (set! h30a0@parse-module (lambda (h41dd@e) ((lambda (h41df@t) ((lambda (h41e1@ls/false) (if h41e1@ls/false (apply (lambda (h41e3@export* h41e4@b*) (begin (if (not (for-all h2e5b@id? h41e3@export*)) (h3134@syntax-violation '#f '"module exports must be identifiers" h41dd@e) (void)) (values '#f (list->vector h41e3@export*) h41e4@b*))) h41e1@ls/false) ((lambda (h41e7@t) ((lambda (h41e9@ls/false) (if h41e9@ls/false (apply (lambda (h41eb@name h41ec@export* h41ed@b*) (begin (if (not (h2e5b@id? h41eb@name)) (h3134@syntax-violation '#f '"module name must be an identifier" h41dd@e) (void)) (if (not (for-all h2e5b@id? h41ec@export*)) (h3134@syntax-violation '#f '"module exports must be identifiers" h41dd@e) (void)) (values h41eb@name (list->vector h41ec@export*) h41ed@b*))) h41e9@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h41e7@t))) (h3066@syntax-dispatch h41e7@t '(_ any each-any . each-any)))) h41df@t))) (h3066@syntax-dispatch h41df@t '(_ each-any . each-any)))) h41dd@e))) (set! h30a2@make-module-interface (lambda h41f1@args ((lambda (h41f3@ret) (begin ((letrec ((h41f5@loop (lambda (h41f7@i h41f8@args) (if (= h41f7@i '4) '() (if (null? h41f8@args) (begin (simple-struct-set! h41f3@ret h41f7@i 'uninitialized) (h41f5@loop (+ h41f7@i '1) h41f8@args)) (begin (simple-struct-set! h41f3@ret h41f7@i (car h41f8@args)) (h41f5@loop (+ h41f7@i '1) (cdr h41f8@args)))))))) h41f5@loop) '0 h41f1@args) h41f3@ret)) (make-simple-struct 'module-interface '4)))) (set! h30a4@module-interface? (lambda (h41fb@x) (and (simple-struct? h41fb@x) (eq? (simple-struct-name h41fb@x) 'module-interface)))) (set! h30a6@module-interface-first-mark (lambda (h41fd@x) (simple-struct-ref h41fd@x '0))) (set! h30a8@set-module-interface-first-mark! (lambda (h41ff@x h4200@val) (simple-struct-set! h41ff@x '0 h4200@val))) (set! h30aa@module-interface-exp-id-vec (lambda (h4203@x) (simple-struct-ref h4203@x '1))) (set! h30ac@set-module-interface-exp-id-vec! (lambda (h4205@x h4206@val) (simple-struct-set! h4205@x '1 h4206@val))) (set! h30ae@module-interface-exp-lab-vec (lambda (h4209@x) (simple-struct-ref h4209@x '2))) (set! h30b0@set-module-interface-exp-lab-vec! (lambda (h420b@x h420c@val) (simple-struct-set! h420b@x '2 h420c@val))) (set! h30b2@dummy '3) (set! h30b4@module-interface-exp-id* (lambda (h420f@iface h4210@id) ((lambda (h4214@diff-marks) (begin (set! h4214@diff-marks (lambda (h421b@ls h421c@x) (begin (if (null? h421b@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (h421f@a) (if (eq? h421f@a h421c@x) '() (cons h421f@a (h4214@diff-marks (cdr h421b@ls) h421c@x)))) (car h421b@ls))))) ((lambda (h4215@diff h4216@id-vec) (if (null? h4215@diff) h4216@id-vec (vector-map (lambda (h4219@x) (h2e23@make-stx (h2e27@stx-expr h4219@x) (append h4215@diff (h2e2b@stx-mark* h4219@x)) '() '())) h4216@id-vec))) (h4214@diff-marks (h2e2b@stx-mark* h4210@id) (h30a6@module-interface-first-mark h420f@iface)) (h30aa@module-interface-exp-id-vec h420f@iface)))) '#f))) (set! h30b6@chi-internal-module (lambda (h4221@e h4222@r h4223@mr h4224@lex* h4225@rhs* h4226@mod** h4227@kwd*) (call-with-values (lambda () (h30a0@parse-module h4221@e)) (lambda (h4235@h4230 h4236@h4232 h4237@h4234) ((lambda (h423b@e* h423c@exp-id* h423d@name) ((lambda (h4241@rib) ((lambda (h4243@e*) ((lambda () (call-with-values (lambda () (h30b8@chi-body* h4243@e* h4222@r h4223@mr h4224@lex* h4225@rhs* h4226@mod** h4227@kwd* '() h4241@rib '#f)) (lambda (h4255@h4246 h4256@h4248 h4257@h424a h4258@h424c h4259@h424e h425a@h4250 h425b@h4252 h425c@h4254) ((lambda (h4265@_exp* h4266@kwd* h4267@mod** h4268@rhs* h4269@lex* h426a@mr h426b@r h426c@e*) ((lambda (h4275@exp-lab* h4276@mod**) (if (not h423d@name) (values h4269@lex* h4268@rhs* h423c@exp-id* h4275@exp-lab* h426b@r h426a@mr h4276@mod** h4266@kwd*) ((lambda (h4279@lab h427a@iface) (values h4269@lex* h4268@rhs* (vector h423d@name) (vector h4279@lab) (cons (cons h4279@lab (cons '$module h427a@iface)) h426b@r) (cons (cons h4279@lab (cons '$module h427a@iface)) h426a@mr) h4276@mod** h4266@kwd*)) (h2df1@gen-label 'module) (h30a2@make-module-interface (car (h2e2b@stx-mark* h423d@name)) (vector-map (lambda (h427d@x) (h2e23@make-stx (h2e27@stx-expr h427d@x) (h2e2b@stx-mark* h427d@x) '() '())) h423c@exp-id*) h4275@exp-lab*)))) (vector-map (lambda (h427f@x) (or (h2e75@id->label (h2e23@make-stx (h2e5d@id->sym h427f@x) (h2e2b@stx-mark* h427f@x) (list h4241@rib) '())) (h3134@syntax-violation '#f '"cannot find module export" h427f@x))) h423c@exp-id*) (cons h426c@e* h4267@mod**))) h425c@h4254 h425b@h4252 h425a@h4250 h4259@h424e h4258@h424c h4257@h424a h4256@h4248 h4255@h4246)))))) (map (lambda (h4281@x) (h2e47@add-subst h4241@rib h4281@x)) (h2e59@syntax->list h423b@e*)))) (h2e13@make-empty-rib))) h4237@h4234 h4236@h4232 h4235@h4230))))) (set! h30b8@chi-body* (lambda (h4283@e* h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h4289@kwd* h428a@exp* h428b@rib h428c@top?) (if (null? h4283@e*) (values h4283@e* h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h4289@kwd* h428a@exp*) ((lambda (h4297@e) (call-with-values (lambda () (h2e83@syntax-type h4297@e h4284@r)) (lambda (h429f@h429a h42a0@h429c h42a1@h429e) ((lambda (h42a5@kwd h42a6@value h42a7@type) ((lambda (h42ab@kwd*) ((lambda (h42ad@t) (if (memv h42ad@t '(define)) (call-with-values (lambda () (h2fea@parse-define h4297@e)) (lambda (h42b3@h42b0 h42b4@h42b2) ((lambda (h42b7@rhs h42b8@id) (begin (if (h2e69@bound-id-member? h42b8@id h42ab@kwd*) (h3134@syntax-violation '#f '"cannot redefine keyword" h4297@e) (void)) (call-with-values (lambda () (h2df5@gen-define-label+loc h42b8@id h428b@rib)) (lambda (h42bf@h42bc h42c0@h42be) ((lambda (h42c3@lex h42c4@lab) (begin (h2e15@extend-rib! h428b@rib h42b8@id h42c4@lab) (h30b8@chi-body* (cdr h4283@e*) (h2ff8@add-lexical h42c4@lab h42c3@lex h4284@r) h4285@mr (cons h42c3@lex h4286@lex*) (cons h42b7@rhs h4287@rhs*) h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?))) h42c0@h42be h42bf@h42bc))))) h42b4@h42b2 h42b3@h42b0))) (if (memv h42ad@t '(define-syntax)) (call-with-values (lambda () (h2fec@parse-define-syntax h4297@e)) (lambda (h42cb@h42c8 h42cc@h42ca) ((lambda (h42cf@rhs h42d0@id) (begin (if (h2e69@bound-id-member? h42d0@id h42ab@kwd*) (h3134@syntax-violation '#f '"cannot redefine keyword" h4297@e) (void)) ((lambda (h42d3@lab h42d4@expanded-rhs) (begin (h2e15@extend-rib! h428b@rib h42d0@id h42d3@lab) ((lambda (h42d7@b) (h30b8@chi-body* (cdr h4283@e*) (cons (cons h42d3@lab h42d7@b) h4284@r) (cons (cons h42d3@lab h42d7@b) h4285@mr) h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?)) (h2e99@make-eval-transformer h42d4@expanded-rhs)))) (h2df7@gen-define-label h42d0@id h428b@rib) (h30ba@expand-transformer h42cf@rhs h4285@mr)))) h42cc@h42ca h42cb@h42c8))) (if (memv h42ad@t '(let-syntax letrec-syntax)) ((lambda (h42d9@t) ((lambda (h42db@ls/false) (if (and h42db@ls/false (apply (lambda (h42dd@xlhs* h42de@xrhs* h42df@xbody*) (if (not (h2e65@valid-bound-ids? h42dd@xlhs*)) (h3134@syntax-violation '#f '"invalid identifiers" h4297@e) (void))) h42db@ls/false)) (apply (lambda (h42e3@xlhs* h42e4@xrhs* h42e5@xbody*) ((lambda (h42e9@xlab*) ((lambda (h42eb@xrib) ((lambda (h42ed@xb*) ((lambda () (h30b8@chi-body* (append (map (lambda (h42ef@x) (h2e47@add-subst h42eb@xrib h42ef@x)) h42e5@xbody*) (cdr h4283@e*)) (append (map cons h42e9@xlab* h42ed@xb*) h4284@r) (append (map cons h42e9@xlab* h42ed@xb*) h4285@mr) h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?)))) (map (lambda (h42f1@x) (h2e99@make-eval-transformer (h30ba@expand-transformer (if (eq? h42a7@type 'let-syntax) h42f1@x (h2e47@add-subst h42eb@xrib h42f1@x)) h4285@mr))) h42e4@xrhs*))) (h2e1f@make-full-rib h42e3@xlhs* h42e9@xlab*))) (map h2df1@gen-label h42e3@xlhs*))) h42db@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h42d9@t))) (h3066@syntax-dispatch h42d9@t '(_ #(each (any any)) . each-any)))) h4297@e) (if (memv h42ad@t '(begin)) ((lambda (h42f3@t) ((lambda (h42f5@ls/false) (if h42f5@ls/false (apply (lambda (h42f7@x*) (h30b8@chi-body* (append h42f7@x* (cdr h4283@e*)) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?)) h42f5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h42f3@t))) (h3066@syntax-dispatch h42f3@t '(_ . each-any)))) h4297@e) (if (memv h42ad@t '(global-macro global-macro!)) (h30b8@chi-body* (cons (h2e47@add-subst h428b@rib (h3082@chi-global-macro h42a6@value h4297@e)) (cdr h4283@e*)) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?) (if (memv h42ad@t '(local-macro local-macro!)) (h30b8@chi-body* (cons (h2e47@add-subst h428b@rib (h3080@chi-local-macro h42a6@value h4297@e)) (cdr h4283@e*)) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?) (if (memv h42ad@t '(macro macro!)) (h30b8@chi-body* (cons (h2e47@add-subst h428b@rib (h307e@chi-macro h42a6@value h4297@e)) (cdr h4283@e*)) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?) (if (memv h42ad@t '(module)) (call-with-values (lambda () (h30b6@chi-internal-module h4297@e h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd*)) (lambda (h4309@h42fa h430a@h42fc h430b@h42fe h430c@h4300 h430d@h4302 h430e@h4304 h430f@h4306 h4310@h4308) ((lambda (h4319@kwd* h431a@mod** h431b@mr h431c@r h431d@m-exp-lab* h431e@m-exp-id* h431f@rhs* h4320@lex*) (begin (vector-for-each (lambda (h4329@id h432a@lab) (h2e15@extend-rib! h428b@rib h4329@id h432a@lab)) h431e@m-exp-id* h431d@m-exp-lab*) (h30b8@chi-body* (cdr h4283@e*) h431c@r h431b@mr h4320@lex* h431f@rhs* h431a@mod** h4319@kwd* h428a@exp* h428b@rib h428c@top?))) h4310@h4308 h430f@h4306 h430e@h4304 h430d@h4302 h430c@h4300 h430b@h42fe h430a@h42fc h4309@h42fa))) (if (memv h42ad@t '(library)) (begin (h3116@library-expander (h2e71@stx->datum h4297@e)) (h30b8@chi-body* (cdr h4283@e*) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?)) (if (memv h42ad@t '(export)) ((lambda (h432d@t) ((lambda (h432f@ls/false) (if h432f@ls/false (apply (lambda (h4331@exp-decl*) (h30b8@chi-body* (cdr h4283@e*) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* (append h4331@exp-decl* h428a@exp*) h428b@rib h428c@top?)) h432f@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h432d@t))) (h3066@syntax-dispatch h432d@t '(_ . each-any)))) h4297@e) (if (memv h42ad@t '(import)) ((lambda () ((lambda (h4334@module-import? h4336@module-import h4338@library-import) (begin (set! h4334@module-import? (lambda (h4387@e) ((lambda (h4389@t) ((lambda (h438b@ls/false) (if (and h438b@ls/false (apply (lambda (h438d@id) (h2e5b@id? h438d@id)) h438b@ls/false)) (apply (lambda (h438f@id) '#t) h438b@ls/false) ((lambda (h4391@t) ((lambda (h4393@ls/false) (if h4393@ls/false (apply (lambda (h4395@imp*) '#f) h4393@ls/false) ((lambda (h4397@t) ((lambda (h4399@ls/false) (if h4399@ls/false (apply (lambda () (h3134@syntax-violation '#f '"malformed import form" h4387@e)) h4399@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4397@t))) (h3066@syntax-dispatch h4397@t '_))) h4391@t))) (h3066@syntax-dispatch h4391@t '(_ . each-any)))) h4389@t))) (h3066@syntax-dispatch h4389@t '(_ any)))) h4387@e))) (set! h4336@module-import (lambda (h4365@e h4366@r) ((lambda (h4369@t) ((lambda (h436b@ls/false) (if (and h436b@ls/false (apply (lambda (h436d@id) (h2e5b@id? h436d@id)) h436b@ls/false)) (apply (lambda (h436f@id) (call-with-values (lambda () (h2e83@syntax-type h436f@id h4366@r)) (lambda (h4377@h4372 h4378@h4374 h4379@h4376) ((lambda (h437d@kwd h437e@value h437f@type) ((lambda (h4383@t) (if (memv h4383@t '($module)) ((lambda (h4385@iface) (values (h30b4@module-interface-exp-id* h4385@iface h436f@id) (h30ae@module-interface-exp-lab-vec h4385@iface))) h437e@value) (h3134@syntax-violation '#f '"invalid import" h4365@e))) h437f@type)) h4379@h4376 h4378@h4374 h4377@h4372)))) h436b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4369@t))) (h3066@syntax-dispatch h4369@t '(_ any)))) h4365@e))) (set! h4338@library-import (lambda (h4349@e) ((lambda (h434b@t) ((lambda (h434d@ls/false) (if h434d@ls/false (apply (lambda (h434f@ctxt h4350@imp*) (call-with-values (lambda () (h30c2@parse-import-spec* (h313a@syntax->datum h4350@imp*))) (lambda (h4357@h4354 h4358@h4356) ((lambda (h435b@subst-labels h435c@subst-names) (values (vector-map (lambda (h435f@name) (h2e39@datum->stx h434f@ctxt h435f@name)) h435c@subst-names) h435b@subst-labels)) h4358@h4356 h4357@h4354)))) h434d@ls/false) ((lambda (h4361@t) ((lambda (h4363@ls/false) (if h4363@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid import form" h4349@e)) h4363@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4361@t))) (h3066@syntax-dispatch h4361@t '_))) h434b@t))) (h3066@syntax-dispatch h434b@t '(any . each-any)))) h4349@e))) (begin (call-with-values (lambda () (if (h4334@module-import? h4297@e) (h4336@module-import h4297@e h4284@r) (h4338@library-import h4297@e))) (lambda (h433d@h433a h433e@h433c) ((lambda (h4341@lab* h4342@id*) (vector-for-each (lambda (h4345@id h4346@lab) (h2e15@extend-rib! h428b@rib h4345@id h4346@lab)) h4342@id* h4341@lab*)) h433e@h433c h433d@h433a))) (h30b8@chi-body* (cdr h4283@e*) h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?)))) '#f '#f '#f))) (if h428c@top? (h30b8@chi-body* (cdr h4283@e*) h4284@r h4285@mr (cons (h2ded@gen-lexical 'dummy) h4286@lex*) (cons (cons 'top-expr h4297@e) h4287@rhs*) h4288@mod** h42ab@kwd* h428a@exp* h428b@rib h428c@top?) (values h4283@e* h4284@r h4285@mr h4286@lex* h4287@rhs* h4288@mod** h42ab@kwd* h428a@exp*)))))))))))))) h42a7@type)) (if (h2e5b@id? h42a5@kwd) (cons h42a5@kwd h4289@kwd*) h4289@kwd*))) h42a1@h429e h42a0@h429c h429f@h429a)))) (car h4283@e*))))) (set! h30ba@expand-transformer (lambda (h439b@expr h439c@r) ((lambda (h439f@rtc) ((lambda (h43a1@expanded-rhs) (begin (for-each ((lambda (h43a3@mark-visit) (lambda (h43a5@x) (begin (h2c91@h2ad4@invoke-library h43a5@x) (h43a3@mark-visit h43a5@x)))) (h30ca@vis-collector)) (h439f@rtc)) h43a1@expanded-rhs)) ((lambda (h43af@h43a8 h43b0@h43aa h43b1@h43ac h43b2@h43ae) ((lambda (h43b7@swap) (dynamic-wind h43b7@swap (lambda () (h3088@chi-expr h439b@expr h439c@r h439c@r)) h43b7@swap)) (lambda () (begin ((lambda (h43b9@t) (begin (h43af@h43a8 h43b1@h43ac) (set! h43b1@h43ac h43b9@t))) (h43af@h43a8)) ((lambda (h43bb@t) (begin (h43b0@h43aa h43b2@h43ae) (set! h43b2@h43ae h43bb@t))) (h43b0@h43aa)))))) h30c8@inv-collector h30ca@vis-collector h439f@rtc (lambda (h43bd@x) (values))))) (h30c6@make-collector)))) (set! h30bc@parse-exports (lambda (h43bf@exp*) ((letrec ((h43c1@f (lambda (h43c3@exp* h43c4@int* h43c5@ext*) (if (null? h43c3@exp*) (begin (if (not (h2e65@valid-bound-ids? h43c5@ext*)) (h3134@syntax-violation 'export '"invalid exports" (h309c@find-dups h43c5@ext*)) (void)) (values (map h313a@syntax->datum h43c5@ext*) h43c4@int*)) ((lambda (h43c9@t) ((lambda (h43cb@ls/false) (if h43cb@ls/false (apply (lambda (h43cd@rename h43ce@i* h43cf@e*) (begin (if (not (and (eq? (h313a@syntax->datum h43cd@rename) 'rename) (for-all h2e5b@id? h43ce@i*) (for-all h2e5b@id? h43cf@e*))) (h3134@syntax-violation 'export '"invalid export specifier" (car h43c3@exp*)) (void)) (h43c1@f (cdr h43c3@exp*) (append h43ce@i* h43c4@int*) (append h43cf@e* h43c5@ext*)))) h43cb@ls/false) ((lambda (h43d3@t) ((lambda (h43d5@ls/false) (if h43d5@ls/false (apply (lambda (h43d7@ie) (begin (if (not (h2e5b@id? h43d7@ie)) (h3134@syntax-violation 'export '"invalid export" h43d7@ie) (void)) (h43c1@f (cdr h43c3@exp*) (cons h43d7@ie h43c4@int*) (cons h43d7@ie h43c5@ext*)))) h43d5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h43d3@t))) (h3066@syntax-dispatch h43d3@t 'any))) h43c9@t))) (h3066@syntax-dispatch h43c9@t '(any . #(each (any any)))))) (car h43c3@exp*)))))) h43c1@f) h43bf@exp* '() '()))) (set! h30be@parse-library-name (lambda (h43d9@spec) ((lambda (h43dc@parse) (begin (set! h43dc@parse (lambda (h43e9@x) ((lambda (h43eb@t) ((lambda (h43ed@ls/false) (if (and h43ed@ls/false (apply (lambda (h43ef@v*) (for-all (lambda (h43f1@x) ((lambda (h43f3@x) (and (integer? h43f3@x) (exact? h43f3@x))) (h313a@syntax->datum h43f1@x))) h43ef@v*)) h43ed@ls/false)) (apply (lambda (h43f5@v*) (values '() (map h313a@syntax->datum h43f5@v*))) h43ed@ls/false) ((lambda (h43f7@t) ((lambda (h43f9@ls/false) (if (and h43f9@ls/false (apply (lambda (h43fb@x h43fc@rest) (symbol? (h313a@syntax->datum h43fb@x))) h43f9@ls/false)) (apply (lambda (h43ff@x h4400@rest) (call-with-values (lambda () (h43dc@parse h4400@rest)) (lambda (h4407@h4404 h4408@h4406) ((lambda (h440b@v* h440c@x*) (values (cons (h313a@syntax->datum h43ff@x) h440c@x*) h440b@v*)) h4408@h4406 h4407@h4404)))) h43f9@ls/false) ((lambda (h440f@t) ((lambda (h4411@ls/false) (if h4411@ls/false (apply (lambda () (values '() '())) h4411@ls/false) ((lambda (h4413@t) ((lambda (h4415@ls/false) (if h4415@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid library name" h43d9@spec)) h4415@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4413@t))) (h3066@syntax-dispatch h4413@t '_))) h440f@t))) (h3066@syntax-dispatch h440f@t '()))) h43f7@t))) (h3066@syntax-dispatch h43f7@t '(any . any)))) h43eb@t))) (h3066@syntax-dispatch h43eb@t '(each-any)))) h43e9@x))) (call-with-values (lambda () (h43dc@parse h43d9@spec)) (lambda (h43e1@h43de h43e2@h43e0) ((lambda (h43e5@ver* h43e6@name*) (begin (if (null? h43e6@name*) (h3134@syntax-violation '#f '"empty library name" h43d9@spec) (void)) (values h43e6@name* h43e5@ver*))) h43e2@h43e0 h43e1@h43de))))) '#f))) (set! h30c0@parse-library (lambda (h4417@e) ((lambda (h4419@t) ((lambda (h441b@ls/false) (if (and h441b@ls/false (apply (lambda (h441d@library h441e@name* h441f@export h4420@exp* h4421@import h4422@imp* h4423@b*) (and (eq? (h313a@syntax->datum h441f@export) 'export) (eq? (h313a@syntax->datum h4421@import) 'import) (eq? (h313a@syntax->datum h441d@library) 'library))) h441b@ls/false)) (apply (lambda (h442b@library h442c@name* h442d@export h442e@exp* h442f@import h4430@imp* h4431@b*) (values h442c@name* h442e@exp* h4430@imp* h4431@b*)) h441b@ls/false) ((lambda (h4439@t) ((lambda (h443b@ls/false) (if h443b@ls/false (apply (lambda () (h3134@syntax-violation '#f '"malformed library" h4417@e)) h443b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4439@t))) (h3066@syntax-dispatch h4439@t '_))) h4419@t))) (h3066@syntax-dispatch h4419@t '(any each-any (any . each-any) (any . each-any) . each-any)))) h4417@e))) (set! h30c2@parse-import-spec* ((lambda () ((lambda (h443e@idsyn? h4440@dup-error h4442@merge-substs h4444@exclude* h4446@find* h4448@rem* h444a@remove-dups h444c@parse-library-name h444e@import-library h4450@get-import h4452@add-imports!) (begin (set! h443e@idsyn? (lambda (h4647@x) (symbol? (h313a@syntax->datum h4647@x)))) (set! h4440@dup-error (lambda (h4645@name) (h3134@syntax-violation 'import '"two imports with different bindings" h4645@name))) (set! h4442@merge-substs (lambda (h4633@s h4634@subst) ((lambda (h4638@insert-to-subst) (begin (set! h4638@insert-to-subst (lambda (h4639@a h463a@subst) ((lambda (h463d@name h463e@label) ((lambda (h4641@t) (if h4641@t ((lambda (h4643@x) (if (eq? (cdr h4643@x) h463e@label) h463a@subst (h4440@dup-error h463d@name))) h4641@t) (cons h4639@a h463a@subst))) (assq h463d@name h463a@subst))) (car h4639@a) (cdr h4639@a)))) (if (null? h4633@s) h4634@subst (h4638@insert-to-subst (car h4633@s) (h4442@merge-substs (cdr h4633@s) h4634@subst))))) '#f))) (set! h4444@exclude* (lambda (h4603@sym* h4604@subst) ((lambda (h4608@exclude) (begin (set! h4608@exclude (lambda (h4621@sym h4622@subst) (if (null? h4622@subst) (h3134@syntax-violation 'import '"cannot rename unbound identifier" h4621@sym) (if (eq? h4621@sym (caar h4622@subst)) (values (cdar h4622@subst) (cdr h4622@subst)) ((lambda (h4625@a) (call-with-values (lambda () (h4608@exclude h4621@sym (cdr h4622@subst))) (lambda (h462b@h4628 h462c@h462a) ((lambda (h462f@subst h4630@old) (values h4630@old (cons h4625@a h462f@subst))) h462c@h462a h462b@h4628)))) (car h4622@subst)))))) (if (null? h4603@sym*) (values '() h4604@subst) (call-with-values (lambda () (h4608@exclude (car h4603@sym*) h4604@subst)) (lambda (h460d@h460a h460e@h460c) ((lambda (h4611@subst h4612@old) (call-with-values (lambda () (h4444@exclude* (cdr h4603@sym*) h4611@subst)) (lambda (h4619@h4616 h461a@h4618) ((lambda (h461d@subst h461e@old*) (values (cons h4612@old h461e@old*) h461d@subst)) h461a@h4618 h4619@h4616)))) h460e@h460c h460d@h460a)))))) '#f))) (set! h4446@find* (lambda (h45fb@sym* h45fc@subst) (map (lambda (h45ff@x) ((lambda (h4601@t) (if h4601@t (cdr h4601@t) (h3134@syntax-violation 'import '"cannot find identifier" h45ff@x))) (assq h45ff@x h45fc@subst))) h45fb@sym*))) (set! h4448@rem* (lambda (h45f3@sym* h45f4@subst) ((letrec ((h45f7@f (lambda (h45f9@subst) (if (null? h45f9@subst) '() (if (memq (caar h45f9@subst) h45f3@sym*) (h45f7@f (cdr h45f9@subst)) (cons (car h45f9@subst) (h45f7@f (cdr h45f9@subst)))))))) h45f7@f) h45f4@subst))) (set! h444a@remove-dups (lambda (h45f1@ls) (if (null? h45f1@ls) '() (if (memq (car h45f1@ls) (cdr h45f1@ls)) (h444a@remove-dups (cdr h45f1@ls)) (cons (car h45f1@ls) (h444a@remove-dups (cdr h45f1@ls))))))) (set! h444c@parse-library-name (lambda (h4509@spec) ((lambda (h450c@subversion? h450e@subversion-pred h4510@version-pred) (begin (set! h450c@subversion? (lambda (h45ed@x) ((lambda (h45ef@x) (and (integer? h45ef@x) (exact? h45ef@x) (>= h45ef@x '0))) (h313a@syntax->datum h45ed@x)))) (set! h450e@subversion-pred (lambda (h458d@x*) ((lambda (h458f@t) ((lambda (h4591@ls/false) (if (and h4591@ls/false (apply (lambda (h4593@n) (h450c@subversion? h4593@n)) h4591@ls/false)) (apply (lambda (h4595@n) (lambda (h4597@x) (= h4597@x (h313a@syntax->datum h4595@n)))) h4591@ls/false) ((lambda (h4599@t) ((lambda (h459b@ls/false) (if (and h459b@ls/false (apply (lambda (h459d@p? h459e@sub*) (eq? (h313a@syntax->datum h459d@p?) 'and)) h459b@ls/false)) (apply (lambda (h45a1@p? h45a2@sub*) ((lambda (h45a5@p*) (lambda (h45a7@x) (for-all (lambda (h45a9@p) (h45a9@p h45a7@x)) h45a5@p*))) (map h450e@subversion-pred h45a2@sub*))) h459b@ls/false) ((lambda (h45ab@t) ((lambda (h45ad@ls/false) (if (and h45ad@ls/false (apply (lambda (h45af@p? h45b0@sub*) (eq? (h313a@syntax->datum h45af@p?) 'or)) h45ad@ls/false)) (apply (lambda (h45b3@p? h45b4@sub*) ((lambda (h45b7@p*) (lambda (h45b9@x) (exists (lambda (h45bb@p) (h45bb@p h45b9@x)) h45b7@p*))) (map h450e@subversion-pred h45b4@sub*))) h45ad@ls/false) ((lambda (h45bd@t) ((lambda (h45bf@ls/false) (if (and h45bf@ls/false (apply (lambda (h45c1@p? h45c2@sub) (eq? (h313a@syntax->datum h45c1@p?) 'not)) h45bf@ls/false)) (apply (lambda (h45c5@p? h45c6@sub) ((lambda (h45c9@p) (lambda (h45cb@x) (not (h45c9@p h45cb@x)))) (h450e@subversion-pred h45c6@sub))) h45bf@ls/false) ((lambda (h45cd@t) ((lambda (h45cf@ls/false) (if (and h45cf@ls/false (apply (lambda (h45d1@p? h45d2@n) (and (eq? (h313a@syntax->datum h45d1@p?) '<=) (h450c@subversion? h45d2@n))) h45cf@ls/false)) (apply (lambda (h45d5@p? h45d6@n) (lambda (h45d9@x) (<= h45d9@x (h313a@syntax->datum h45d6@n)))) h45cf@ls/false) ((lambda (h45db@t) ((lambda (h45dd@ls/false) (if (and h45dd@ls/false (apply (lambda (h45df@p? h45e0@n) (and (eq? (h313a@syntax->datum h45df@p?) '>=) (h450c@subversion? h45e0@n))) h45dd@ls/false)) (apply (lambda (h45e3@p? h45e4@n) (lambda (h45e7@x) (>= h45e7@x (h313a@syntax->datum h45e4@n)))) h45dd@ls/false) ((lambda (h45e9@t) ((lambda (h45eb@ls/false) (if h45eb@ls/false (apply (lambda () (h3134@syntax-violation 'import '"invalid sub-version spec" h4509@spec h458d@x*)) h45eb@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h45e9@t))) (h3066@syntax-dispatch h45e9@t '_))) h45db@t))) (h3066@syntax-dispatch h45db@t '(any any)))) h45cd@t))) (h3066@syntax-dispatch h45cd@t '(any any)))) h45bd@t))) (h3066@syntax-dispatch h45bd@t '(any any)))) h45ab@t))) (h3066@syntax-dispatch h45ab@t '(any . each-any)))) h4599@t))) (h3066@syntax-dispatch h4599@t '(any . each-any)))) h458f@t))) (h3066@syntax-dispatch h458f@t 'any))) h458d@x*))) (set! h4510@version-pred (lambda (h453d@x*) ((lambda (h453f@t) ((lambda (h4541@ls/false) (if h4541@ls/false (apply (lambda () (lambda (h4543@x) '#t)) h4541@ls/false) ((lambda (h4545@t) ((lambda (h4547@ls/false) (if (and h4547@ls/false (apply (lambda (h4549@c h454a@ver*) (eq? (h313a@syntax->datum h4549@c) 'and)) h4547@ls/false)) (apply (lambda (h454d@c h454e@ver*) ((lambda (h4551@p*) (lambda (h4553@x) (for-all (lambda (h4555@p) (h4555@p h4553@x)) h4551@p*))) (map h4510@version-pred h454e@ver*))) h4547@ls/false) ((lambda (h4557@t) ((lambda (h4559@ls/false) (if (and h4559@ls/false (apply (lambda (h455b@c h455c@ver*) (eq? (h313a@syntax->datum h455b@c) 'or)) h4559@ls/false)) (apply (lambda (h455f@c h4560@ver*) ((lambda (h4563@p*) (lambda (h4565@x) (exists (lambda (h4567@p) (h4567@p h4565@x)) h4563@p*))) (map h4510@version-pred h4560@ver*))) h4559@ls/false) ((lambda (h4569@t) ((lambda (h456b@ls/false) (if (and h456b@ls/false (apply (lambda (h456d@c h456e@ver) (eq? (h313a@syntax->datum h456d@c) 'not)) h456b@ls/false)) (apply (lambda (h4571@c h4572@ver) ((lambda (h4575@p) (lambda (h4577@x) (not (h4575@p h4577@x)))) (h4510@version-pred h4572@ver))) h456b@ls/false) ((lambda (h4579@t) ((lambda (h457b@ls/false) (if h457b@ls/false (apply (lambda (h457d@sub*) ((lambda (h457f@p*) (lambda (h4581@x) ((letrec ((h4583@f (lambda (h4585@p* h4586@x) (if (null? h4585@p*) '#t (if (null? h4586@x) '#f (and ((car h4585@p*) (car h4586@x)) (h4583@f (cdr h4585@p*) (cdr h4586@x)))))))) h4583@f) h457f@p* h4581@x))) (map h450e@subversion-pred h457d@sub*))) h457b@ls/false) ((lambda (h4589@t) ((lambda (h458b@ls/false) (if h458b@ls/false (apply (lambda () (h3134@syntax-violation 'import '"invalid version spec" h4509@spec h453d@x*)) h458b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4589@t))) (h3066@syntax-dispatch h4589@t '_))) h4579@t))) (h3066@syntax-dispatch h4579@t 'each-any))) h4569@t))) (h3066@syntax-dispatch h4569@t '(any any)))) h4557@t))) (h3066@syntax-dispatch h4557@t '(any . each-any)))) h4545@t))) (h3066@syntax-dispatch h4545@t '(any . each-any)))) h453f@t))) (h3066@syntax-dispatch h453f@t '()))) h453d@x*))) ((letrec ((h4511@f (lambda (h4513@x) ((lambda (h4515@t) ((lambda (h4517@ls/false) (if h4517@ls/false (apply (lambda (h4519@version-spec*) (values '() (h4510@version-pred h4519@version-spec*))) h4517@ls/false) ((lambda (h451b@t) ((lambda (h451d@ls/false) (if (and h451d@ls/false (apply (lambda (h451f@x h4520@x*) (h443e@idsyn? h451f@x)) h451d@ls/false)) (apply (lambda (h4523@x h4524@x*) (call-with-values (lambda () (h4511@f h4524@x*)) (lambda (h452b@h4528 h452c@h452a) ((lambda (h452f@pred h4530@name) (values (cons (h313a@syntax->datum h4523@x) h4530@name) h452f@pred)) h452c@h452a h452b@h4528)))) h451d@ls/false) ((lambda (h4533@t) ((lambda (h4535@ls/false) (if h4535@ls/false (apply (lambda () (values '() (lambda (h4537@x) '#t))) h4535@ls/false) ((lambda (h4539@t) ((lambda (h453b@ls/false) (if h453b@ls/false (apply (lambda () (h3134@syntax-violation '#f '"invalid import spec" h4509@spec)) h453b@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4539@t))) (h3066@syntax-dispatch h4539@t '_))) h4533@t))) (h3066@syntax-dispatch h4533@t '()))) h451b@t))) (h3066@syntax-dispatch h451b@t '(any . any)))) h4515@t))) (h3066@syntax-dispatch h4515@t '(each-any)))) h4513@x)))) h4511@f) h4509@spec))) '#f '#f '#f))) (set! h444e@import-library (lambda (h44f9@spec*) (call-with-values (lambda () (h444c@parse-library-name h44f9@spec*)) (lambda (h44ff@h44fc h4500@h44fe) ((lambda (h4503@pred h4504@name) (begin (if (null? h4504@name) (h3134@syntax-violation 'import '"empty library name" h44f9@spec*) (void)) ((lambda (h4507@lib) (begin (if (not h4507@lib) (h3134@syntax-violation 'import '"cannot find library with required name" h4504@name) (void)) (if (not (h4503@pred (h2c64@h2a7a@library-version h4507@lib))) (h3134@syntax-violation 'import '"library does not satisfy version specification" h44f9@spec* h4507@lib) (void)) ((h30cc@imp-collector) h4507@lib) (h2c6c@h2a8a@library-subst h4507@lib))) (h2c8a@h2ac6@find-library-by-name h4504@name)))) h4500@h44fe h44ff@h44fc))))) (set! h4450@get-import (lambda (h446b@spec) ((lambda (h446d@t) ((lambda (h446f@ls/false) (if (and h446f@ls/false (apply (lambda (h4471@x h4472@x*) (not (memq (h313a@syntax->datum h4471@x) '(for rename except only prefix library)))) h446f@ls/false)) (apply (lambda (h4475@x h4476@x*) (h444e@import-library (cons h4475@x h4476@x*))) h446f@ls/false) ((lambda (h4479@t) ((lambda (h447b@ls/false) (if (and h447b@ls/false (apply (lambda (h447d@rename h447e@isp h447f@old* h4480@new*) (and (eq? (h313a@syntax->datum h447d@rename) 'rename) (for-all h443e@idsyn? h447f@old*) (for-all h443e@idsyn? h4480@new*))) h447b@ls/false)) (apply (lambda (h4485@rename h4486@isp h4487@old* h4488@new*) ((lambda (h448d@subst h448e@old* h448f@new*) ((lambda (h4493@old-label*) ((lambda (h4495@subst) (h4442@merge-substs (map cons h448f@new* h4493@old-label*) h4495@subst)) (h4448@rem* h448e@old* h448d@subst))) (h4446@find* h448e@old* h448d@subst))) (h4450@get-import h4486@isp) (map h313a@syntax->datum h4487@old*) (map h313a@syntax->datum h4488@new*))) h447b@ls/false) ((lambda (h4497@t) ((lambda (h4499@ls/false) (if (and h4499@ls/false (apply (lambda (h449b@except h449c@isp h449d@sym*) (and (eq? (h313a@syntax->datum h449b@except) 'except) (for-all h443e@idsyn? h449d@sym*))) h4499@ls/false)) (apply (lambda (h44a1@except h44a2@isp h44a3@sym*) ((lambda (h44a7@subst) (h4448@rem* (map h313a@syntax->datum h44a3@sym*) h44a7@subst)) (h4450@get-import h44a2@isp))) h4499@ls/false) ((lambda (h44a9@t) ((lambda (h44ab@ls/false) (if (and h44ab@ls/false (apply (lambda (h44ad@only h44ae@isp h44af@sym*) (and (eq? (h313a@syntax->datum h44ad@only) 'only) (for-all h443e@idsyn? h44af@sym*))) h44ab@ls/false)) (apply (lambda (h44b3@only h44b4@isp h44b5@sym*) ((lambda (h44b9@subst h44ba@sym*) ((lambda (h44bd@sym*) ((lambda (h44bf@lab*) (map cons h44bd@sym* h44bf@lab*)) (h4446@find* h44bd@sym* h44b9@subst))) (h444a@remove-dups h44ba@sym*))) (h4450@get-import h44b4@isp) (map h313a@syntax->datum h44b5@sym*))) h44ab@ls/false) ((lambda (h44c1@t) ((lambda (h44c3@ls/false) (if (and h44c3@ls/false (apply (lambda (h44c5@prefix h44c6@isp h44c7@p) (and (eq? (h313a@syntax->datum h44c5@prefix) 'prefix) (h443e@idsyn? h44c7@p))) h44c3@ls/false)) (apply (lambda (h44cb@prefix h44cc@isp h44cd@p) ((lambda (h44d1@subst h44d2@prefix) (map (lambda (h44d5@x) (cons (string->symbol (string-append h44d2@prefix (symbol->string (car h44d5@x)))) (cdr h44d5@x))) h44d1@subst)) (h4450@get-import h44cc@isp) (symbol->string (h313a@syntax->datum h44cd@p)))) h44c3@ls/false) ((lambda (h44d7@t) ((lambda (h44d9@ls/false) (if (and h44d9@ls/false (apply (lambda (h44db@library h44dc@spec*) (eq? (h313a@syntax->datum h44db@library) 'library)) h44d9@ls/false)) (apply (lambda (h44df@library h44e0@spec*) (h444e@import-library h44e0@spec*)) h44d9@ls/false) ((lambda (h44e3@t) ((lambda (h44e5@ls/false) (if (and h44e5@ls/false (apply (lambda (h44e7@for h44e8@isp h44e9@rest) (eq? (h313a@syntax->datum h44e7@for) 'for)) h44e5@ls/false)) (apply (lambda (h44ed@for h44ee@isp h44ef@rest) (h4450@get-import h44ee@isp)) h44e5@ls/false) ((lambda (h44f3@t) ((lambda (h44f5@ls/false) (if h44f5@ls/false (apply (lambda (h44f7@spec) (h3134@syntax-violation 'import '"invalid import spec" h44f7@spec)) h44f5@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h44f3@t))) (h3066@syntax-dispatch h44f3@t 'any))) h44e3@t))) (h3066@syntax-dispatch h44e3@t '(any any . any)))) h44d7@t))) (h3066@syntax-dispatch h44d7@t '(any each-any)))) h44c1@t))) (h3066@syntax-dispatch h44c1@t '(any any any)))) h44a9@t))) (h3066@syntax-dispatch h44a9@t '(any any . each-any)))) h4497@t))) (h3066@syntax-dispatch h4497@t '(any any . each-any)))) h4479@t))) (h3066@syntax-dispatch h4479@t '(any any . #(each (any any)))))) h446d@t))) (h3066@syntax-dispatch h446d@t '(any . each-any)))) h446b@spec))) (set! h4452@add-imports! (lambda (h445b@imp h445c@h) ((lambda (h445f@subst) (for-each (lambda (h4461@x) ((lambda (h4463@name h4464@label) ((lambda (h4467@t) (if h4467@t ((lambda (h4469@l) (if (not (eq? h4469@l h4464@label)) (h4440@dup-error h4463@name) (void))) h4467@t) (hashtable-set! h445c@h h4463@name h4464@label))) (hashtable-ref h445c@h h4463@name '#f))) (car h4461@x) (cdr h4461@x))) h445f@subst)) (h4450@get-import h445b@imp)))) (lambda (h4453@imp*) ((letrec ((h4455@f (lambda (h4457@imp* h4458@h) (if (null? h4457@imp*) (hashtable-entries h4458@h) (begin (h4452@add-imports! (car h4457@imp*) h4458@h) (h4455@f (cdr h4457@imp*) h4458@h)))))) h4455@f) h4453@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! h30c4@make-top-rib (lambda (h4649@names h464a@labels) ((lambda (h464d@rib) (begin (vector-for-each (lambda (h464f@name h4650@label) (begin (if (not (symbol? h464f@name)) (error 'make-top-rib '"BUG: not a symbol" h464f@name) (void)) (h2e17@extend-rib/nc! h464d@rib (h2e23@make-stx h464f@name h2de9@top-mark* '() '()) h4650@label))) h4649@names h464a@labels) h464d@rib)) (h2e13@make-empty-rib)))) (set! h30c6@make-collector (lambda () ((lambda (h4653@ls) (lambda h4657 ((lambda (h4658) (if (= h4658 '0) (apply (lambda () h4653@ls) h4657) (if (= h4658 '1) (apply (lambda (h4655@x) (set! h4653@ls (h2de2@set-cons h4655@x h4653@ls))) h4657) (error 'apply '"invalid arg count")))) (length h4657)))) '()))) (set! h30c8@inv-collector (h29c1@h28bd@make-parameter (lambda h4659@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (h465b@x) (begin (if (not (procedure? h465b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" h465b@x) (void)) h465b@x)))) (set! h30ca@vis-collector (h29c1@h28bd@make-parameter (lambda h465d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (h465f@x) (begin (if (not (procedure? h465f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" h465f@x) (void)) h465f@x)))) (set! h30cc@imp-collector (h29c1@h28bd@make-parameter (lambda h4661@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (h4663@x) (begin (if (not (procedure? h4663@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" h4663@x) (void)) h4663@x)))) (set! h30ce@chi-library-internal (lambda (h4665@e* h4666@rib h4667@top?) (call-with-values (lambda () (h30b8@chi-body* h4665@e* '() '() '() '() '() '() '() h4666@rib h4667@top?)) (lambda (h467b@h466c h467c@h466e h467d@h4670 h467e@h4672 h467f@h4674 h4680@h4676 h4681@h4678 h4682@h467a) ((lambda (h468b@exp* h468c@_kwd* h468d@mod** h468e@rhs* h468f@lex* h4690@mr h4691@r h4692@e*) (values (append (apply append (reverse h468d@mod**)) h4692@e*) h4691@r h4690@mr (reverse h468f@lex*) (reverse h468e@rhs*) h468b@exp*)) h4682@h467a h4681@h4678 h4680@h4676 h467f@h4674 h467e@h4672 h467d@h4670 h467c@h466e h467b@h466c))))) (set! h30d0@chi-interaction-expr (lambda (h469b@e h469c@rib h469d@r) (call-with-values (lambda () (h30b8@chi-body* (list h469b@e) h469d@r h469d@r '() '() '() '() '() h469c@rib '#t)) (lambda (h46b1@h46a2 h46b2@h46a4 h46b3@h46a6 h46b4@h46a8 h46b5@h46aa h46b6@h46ac h46b7@h46ae h46b8@h46b0) ((lambda (h46c1@_exp* h46c2@_kwd* h46c3@mod** h46c4@rhs* h46c5@lex* h46c6@mr h46c7@r h46c8@e*) ((lambda (h46d1@e*) ((lambda (h46d3@e) (values h46d3@e h46c7@r)) (if (null? h46d1@e*) (h2dcd@h2d3d@build-void) (if (null? (cdr h46d1@e*)) (car h46d1@e*) (h2dcc@h2d3b@build-sequence '#f h46d1@e*))))) (h3096@expand-interaction-rhs*/init* (reverse h46c5@lex*) (reverse h46c4@rhs*) (append (apply append (reverse h46c3@mod**)) h46c8@e*) h46c7@r h46c6@mr))) h46b8@h46b0 h46b7@h46ae h46b6@h46ac h46b5@h46aa h46b4@h46a8 h46b3@h46a6 h46b2@h46a4 h46b1@h46a2))))) (set! h30d2@library-body-expander (lambda (h46d5@name h46d6@main-exp* h46d7@imp* h46d8@b* h46d9@top?) ((lambda (h46e0@itc) (begin (set! h46e0@itc (h30c6@make-collector)) ((lambda (h46e9@h46e2 h46ea@h46e4 h46eb@h46e6 h46ec@h46e8) ((lambda (h46f1@swap) (dynamic-wind h46f1@swap (lambda () (call-with-values (lambda () (h30c2@parse-import-spec* h46d7@imp*)) (lambda (h46f7@h46f4 h46f8@h46f6) ((lambda (h46fb@subst-labels h46fc@subst-names) ((lambda (h46ff@rib) ((lambda (h4702@wrap) (begin (set! h4702@wrap (lambda (h477d@x) (h2e23@make-stx h477d@x h2de9@top-mark* (list h46ff@rib) '()))) ((lambda (h4703@b* h4704@main-exp* h4705@rtc h4706@vtc) ((lambda (h4713@h470c h4714@h470e h4715@h4710 h4716@h4712) ((lambda (h471b@swap) (dynamic-wind h471b@swap (lambda () (call-with-values (lambda () (h30ce@chi-library-internal h4703@b* h46ff@rib h46d9@top?)) (lambda (h4729@h471e h472a@h4720 h472b@h4722 h472c@h4724 h472d@h4726 h472e@h4728) ((lambda (h4735@internal-exp* h4736@rhs* h4737@lex* h4738@mr h4739@r h473a@init*) (call-with-values (lambda () (h30bc@parse-exports (append h4704@main-exp* h4735@internal-exp*))) (lambda (h4745@h4742 h4746@h4744) ((lambda (h4749@exp-id* h474a@exp-name*) (begin (h2e1b@seal-rib! h46ff@rib) ((lambda (h474d@init*) ((lambda (h474f@rhs*) ((lambda () (begin (h2e1d@unseal-rib! h46ff@rib) ((lambda (h4751@loc* h4752@export-subst) ((lambda (h4756@errstr) (begin (set! h4756@errstr '"attempt to export mutated variable") (call-with-values (lambda () (h3120@make-export-env/macros h4737@lex* h4751@loc* h4739@r)) (lambda (h475d@h4758 h475e@h475a h475f@h475c) ((lambda (h4763@macro* h4764@global* h4765@export-env) (begin (for-each (lambda (h4769@s) ((lambda (h476b@name h476c@label) ((lambda (h476f@p) (if h476f@p ((lambda (h4771@b) ((lambda (h4773@type) (if (eq? h4773@type 'mutable) (h3134@syntax-violation 'export h4756@errstr h476b@name) (void))) (car h4771@b))) (cdr h476f@p)) (void))) (assq h476c@label h4765@export-env))) (car h4769@s) (cdr h4769@s))) h4752@export-subst) ((lambda (h4775@invoke-body h4776@invoke-definitions) (values (h46e0@itc) (h4705@rtc) (h4706@vtc) (h2dcc@h2d3b@build-sequence '#f (append h4776@invoke-definitions (list h4775@invoke-body))) h4763@macro* h4752@export-subst h4765@export-env)) (h2dcf@h2d41@build-letrec* '#f h4737@lex* h474f@rhs* (h311c@build-exports h4764@global* h474d@init*)) (map h2dc8@h2c98@build-global-define (map cdr h4764@global*))))) h475f@h475c h475e@h475a h475d@h4758))))) '#f)) (map h2def@gen-global h4737@lex*) (h311e@make-export-subst h474a@exp-name* h4749@exp-id*)))))) (h3098@chi-rhs* h4736@rhs* h4739@r h4738@mr))) (h3084@chi-expr* h473a@init* h4739@r h4738@mr)))) h4746@h4744 h4745@h4742)))) h472e@h4728 h472d@h4726 h472c@h4724 h472b@h4722 h472a@h4720 h4729@h471e)))) h471b@swap)) (lambda () (begin ((lambda (h4779@t) (begin (h4713@h470c h4715@h4710) (set! h4715@h4710 h4779@t))) (h4713@h470c)) ((lambda (h477b@t) (begin (h4714@h470e h4716@h4712) (set! h4716@h4712 h477b@t))) (h4714@h470e)))))) h30c8@inv-collector h30ca@vis-collector h4705@rtc h4706@vtc)) (map h4702@wrap h46d8@b*) (map h4702@wrap h46d6@main-exp*) (h30c6@make-collector) (h30c6@make-collector)))) '#f)) (h30c4@make-top-rib h46fc@subst-names h46fb@subst-labels))) h46f8@h46f6 h46f7@h46f4)))) h46f1@swap)) (lambda () (begin ((lambda (h477f@t) (begin (h46e9@h46e2 h46eb@h46e6) (set! h46eb@h46e6 h477f@t))) (h46e9@h46e2)) ((lambda (h4781@t) (begin (h46ea@h46e4 h46ec@h46e8) (set! h46ec@h46e8 h4781@t))) (h46ea@h46e4)))))) h30cc@imp-collector h3142@top-level-context h46e0@itc '#f))) '#f))) (set! h30d4@core-library-expander (lambda (h4783@e h4784@verify-name) (call-with-values (lambda () (h30c0@parse-library h4783@e)) (lambda (h478f@h4788 h4790@h478a h4791@h478c h4792@h478e) ((lambda (h4797@b* h4798@imp* h4799@exp* h479a@name*) (call-with-values (lambda () (h30be@parse-library-name h479a@name*)) (lambda (h47a3@h47a0 h47a4@h47a2) ((lambda (h47a7@ver h47a8@name) (begin (h4784@verify-name h47a8@name) (call-with-values (lambda () (h30d2@library-body-expander h47a8@name h4799@exp* h4798@imp* h4797@b* '#f)) (lambda (h47b9@h47ac h47ba@h47ae h47bb@h47b0 h47bc@h47b2 h47bd@h47b4 h47be@h47b6 h47bf@h47b8) ((lambda (h47c7@export-env h47c8@export-subst h47c9@visit-code h47ca@invoke-code h47cb@visit-req* h47cc@invoke-req* h47cd@imp*) (values h47a8@name h47a7@ver h47cd@imp* h47cc@invoke-req* h47cb@visit-req* h47ca@invoke-code h47c9@visit-code h47c8@export-subst h47c7@export-env)) h47bf@h47b8 h47be@h47b6 h47bd@h47b4 h47bc@h47b2 h47bb@h47b0 h47ba@h47ae h47b9@h47ac))))) h47a4@h47a2 h47a3@h47a0)))) h4792@h478e h4791@h478c h4790@h478a h478f@h4788))))) (set! h30d6@parse-top-level-program (lambda (h47d5@e*) ((lambda (h47d7@t) ((lambda (h47d9@ls/false) (if (and h47d9@ls/false (apply (lambda (h47db@import h47dc@imp* h47dd@b*) (eq? (h313a@syntax->datum h47db@import) 'import)) h47d9@ls/false)) (apply (lambda (h47e1@import h47e2@imp* h47e3@b*) (values h47e2@imp* h47e3@b*)) h47d9@ls/false) ((lambda (h47e7@t) ((lambda (h47e9@ls/false) (if (and h47e9@ls/false (apply (lambda (h47eb@import h47ec@x h47ed@y) (eq? (h313a@syntax->datum h47eb@import) 'import)) h47e9@ls/false)) (apply (lambda (h47f1@import h47f2@x h47f3@y) (h3134@syntax-violation 'expander '"invalid syntax of top-level program" (h2e55@syntax-car h47d5@e*))) h47e9@ls/false) ((lambda (h47f7@t) ((lambda (h47f9@ls/false) (if h47f9@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) h47f9@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h47f7@t))) (h3066@syntax-dispatch h47f7@t '_))) h47e7@t))) (h3066@syntax-dispatch h47e7@t '((any . any) . any)))) h47d7@t))) (h3066@syntax-dispatch h47d7@t '((any . each-any) . each-any)))) h47d5@e*))) (set! h30d8@top-level-expander (lambda (h47fb@e*) (call-with-values (lambda () (h30d6@parse-top-level-program h47fb@e*)) (lambda (h4801@h47fe h4802@h4800) ((lambda (h4805@b* h4806@imp*) (call-with-values (lambda () (h30d2@library-body-expander '() '() h4806@imp* h4805@b* '#t)) (lambda (h4817@h480a h4818@h480c h4819@h480e h481a@h4810 h481b@h4812 h481c@h4814 h481d@h4816) ((lambda (h4825@export-env h4826@export-subst h4827@visit-code h4828@invoke-code h4829@visit-req* h482a@invoke-req* h482b@imp*) (values h482a@invoke-req* h4828@invoke-code)) h481d@h4816 h481c@h4814 h481b@h4812 h481a@h4810 h4819@h480e h4818@h480c h4817@h480a)))) h4802@h4800 h4801@h47fe))))) (set! h30da@rp (h29be@h28b7@make-record-printer 'env (lambda (h4833@x h4834@p h4835@wr) (display '"#<environment>" h4834@p)))) (set! h30dc@make-env (lambda h4839@args ((lambda (h483b@ret) (begin ((letrec ((h483d@loop (lambda (h483f@i h4840@args) (if (= h483f@i '4) '() (if (null? h4840@args) (begin (simple-struct-set! h483b@ret h483f@i 'uninitialized) (h483d@loop (+ h483f@i '1) h4840@args)) (begin (simple-struct-set! h483b@ret h483f@i (car h4840@args)) (h483d@loop (+ h483f@i '1) (cdr h4840@args)))))))) h483d@loop) '0 h4839@args) h483b@ret)) (make-simple-struct 'env '4)))) (set! h30de@env? (lambda (h4843@x) (and (simple-struct? h4843@x) (eq? (simple-struct-name h4843@x) 'env)))) (set! h30e0@env-names (lambda (h4845@x) (simple-struct-ref h4845@x '0))) (set! h30e2@set-env-names! (lambda (h4847@x h4848@val) (simple-struct-set! h4847@x '0 h4848@val))) (set! h30e4@env-labels (lambda (h484b@x) (simple-struct-ref h484b@x '1))) (set! h30e6@set-env-labels! (lambda (h484d@x h484e@val) (simple-struct-set! h484d@x '1 h484e@val))) (set! h30e8@env-itc (lambda (h4851@x) (simple-struct-ref h4851@x '2))) (set! h30ea@set-env-itc! (lambda (h4853@x h4854@val) (simple-struct-set! h4853@x '2 h4854@val))) (set! h30ec@dummy '3) (set! h30ee@rp (h29be@h28b7@make-record-printer 'interaction-env (lambda (h4857@x h4858@p h4859@wr) (display '"#<environment>" h4858@p)))) (set! h30f0@make-interaction-env (lambda h485d@args ((lambda (h485f@ret) (begin ((letrec ((h4861@loop (lambda (h4863@i h4864@args) (if (= h4863@i '4) '() (if (null? h4864@args) (begin (simple-struct-set! h485f@ret h4863@i 'uninitialized) (h4861@loop (+ h4863@i '1) h4864@args)) (begin (simple-struct-set! h485f@ret h4863@i (car h4864@args)) (h4861@loop (+ h4863@i '1) (cdr h4864@args)))))))) h4861@loop) '0 h485d@args) h485f@ret)) (make-simple-struct 'interaction-env '4)))) (set! h30f2@interaction-env? (lambda (h4867@x) (and (simple-struct? h4867@x) (eq? (simple-struct-name h4867@x) 'interaction-env)))) (set! h30f4@interaction-env-rib (lambda (h4869@x) (simple-struct-ref h4869@x '0))) (set! h30f6@set-interaction-env-rib! (lambda (h486b@x h486c@val) (simple-struct-set! h486b@x '0 h486c@val))) (set! h30f8@interaction-env-r (lambda (h486f@x) (simple-struct-ref h486f@x '1))) (set! h30fa@set-interaction-env-r! (lambda (h4871@x h4872@val) (simple-struct-set! h4871@x '1 h4872@val))) (set! h30fc@interaction-env-locs (lambda (h4875@x) (simple-struct-ref h4875@x '2))) (set! h30fe@set-interaction-env-locs! (lambda (h4877@x h4878@val) (simple-struct-set! h4877@x '2 h4878@val))) (set! h3100@dummy '3) (set! h3102@interaction-environment-symbols (lambda () (h310a@environment-symbols (h3140@interaction-environment)))) (set! h3104@environment-bindings (lambda (h487b@e) (vector->list (vector-map (lambda (h487d@name h487e@label) (h3106@parse-binding (cons h487d@name (h2c90@h2ad2@imported-label->binding h487e@label)))) (h30e0@env-names h487b@e) (h30e4@env-labels h487b@e))))) (set! h3106@parse-binding (lambda (h4881@b) (cons (car h4881@b) ((lambda (h4883@t) (if (memv h4883@t '(core-prim global)) 'procedure (if (memv h4883@t '(core-macro macro global-macro)) 'syntax (if (memv h4883@t '($core-rtd)) 'record (if (eq? (car h4881@b) (cadr h4881@b)) 'syntax 'unknown))))) (cadr h4881@b))))) (set! h3108@environment? (lambda (h4885@x) (or (h30de@env? h4885@x) (h30f2@interaction-env? h4885@x)))) (set! h310a@environment-symbols (lambda (h4887@x) (if (h30de@env? h4887@x) (vector->list (h30e0@env-names h4887@x)) (if (h30f2@interaction-env? h4887@x) (map values (h2dfd@rib-sym* (h30f4@interaction-env-rib h4887@x))) (assertion-violation 'environment-symbols '"not an environment" h4887@x))))) (set! h310c@environment (lambda h4889@imp* ((lambda (h488b@itc) ((lambda (h4891@h488e h4892@h4890) ((lambda (h4895@swap) (dynamic-wind h4895@swap (lambda () (call-with-values (lambda () (h30c2@parse-import-spec* h4889@imp*)) (lambda (h489b@h4898 h489c@h489a) ((lambda (h489f@subst-labels h48a0@subst-names) (h30dc@make-env h48a0@subst-names h489f@subst-labels h488b@itc)) h489c@h489a h489b@h4898)))) h4895@swap)) (lambda () ((lambda (h48a3@t) (begin (h4891@h488e h4892@h4890) (set! h4892@h4890 h48a3@t))) (h4891@h488e))))) h30cc@imp-collector h488b@itc)) (h30c6@make-collector)))) (set! h310e@null-environment (lambda (h48a5@n) (begin (if (not (eqv? h48a5@n '5)) (assertion-violation 'null-environment '"not 5" h48a5@n) (void)) (h310c@environment '(psyntax null-environment-5))))) (set! h3110@scheme-report-environment (lambda (h48a7@n) (begin (if (not (eqv? h48a7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" h48a7@n) (void)) (h310c@environment '(psyntax scheme-report-environment-5))))) (set! h3112@expand (lambda (h48a9@x h48aa@env) (if (h30de@env? h48aa@env) ((lambda (h48ad@rib) ((lambda (h48af@x h48b0@itc h48b1@rtc h48b2@vtc) ((lambda (h48b7@x) (begin (h2e1b@seal-rib! h48ad@rib) (values h48b7@x (h48b1@rtc)))) ((lambda (h48c9@h48ba h48ca@h48bc h48cb@h48be h48cc@h48c0 h48cd@h48c2 h48ce@h48c4 h48cf@h48c6 h48d0@h48c8) ((lambda (h48d9@swap) (dynamic-wind h48d9@swap (lambda () (h3088@chi-expr h48af@x '() '())) h48d9@swap)) (lambda () (begin ((lambda (h48db@t) (begin (h48c9@h48ba h48cd@h48c2) (set! h48cd@h48c2 h48db@t))) (h48c9@h48ba)) ((lambda (h48dd@t) (begin (h48ca@h48bc h48ce@h48c4) (set! h48ce@h48c4 h48dd@t))) (h48ca@h48bc)) ((lambda (h48df@t) (begin (h48cb@h48be h48cf@h48c6) (set! h48cf@h48c6 h48df@t))) (h48cb@h48be)) ((lambda (h48e1@t) (begin (h48cc@h48c0 h48d0@h48c8) (set! h48d0@h48c8 h48e1@t))) (h48cc@h48c0)))))) h3142@top-level-context h30c8@inv-collector h30ca@vis-collector h30cc@imp-collector '#f h48b1@rtc h48b2@vtc h48b0@itc))) (h2e23@make-stx h48a9@x h2de9@top-mark* (list h48ad@rib) '()) (h30e8@env-itc h48aa@env) (h30c6@make-collector) (h30c6@make-collector))) (h30c4@make-top-rib (h30e0@env-names h48aa@env) (h30e4@env-labels h48aa@env))) (if (h30f2@interaction-env? h48aa@env) ((lambda (h48e3@rib h48e4@r h48e5@rtc) ((lambda (h48e9@x) (call-with-values (lambda () ((lambda (h48ff@h48f0 h4900@h48f2 h4901@h48f4 h4902@h48f6 h4903@h48f8 h4904@h48fa h4905@h48fc h4906@h48fe) ((lambda (h490f@swap) (dynamic-wind h490f@swap (lambda () (h30d0@chi-interaction-expr h48e9@x h48e3@rib h48e4@r)) h490f@swap)) (lambda () (begin ((lambda (h4911@t) (begin (h48ff@h48f0 h4903@h48f8) (set! h4903@h48f8 h4911@t))) (h48ff@h48f0)) ((lambda (h4913@t) (begin (h4900@h48f2 h4904@h48fa) (set! h4904@h48fa h4913@t))) (h4900@h48f2)) ((lambda (h4915@t) (begin (h4901@h48f4 h4905@h48fc) (set! h4905@h48fc h4915@t))) (h4901@h48f4)) ((lambda (h4917@t) (begin (h4902@h48f6 h4906@h48fe) (set! h4906@h48fe h4917@t))) (h4902@h48f6)))))) h3142@top-level-context h30c8@inv-collector h30ca@vis-collector h30cc@imp-collector h48aa@env h48e5@rtc (h30c6@make-collector) (h30c6@make-collector))) (lambda (h4919@h48ec h491a@h48ee) ((lambda (h491d@r^ h491e@e) (begin (h30fa@set-interaction-env-r! h48aa@env h491d@r^) (values h491e@e (h48e5@rtc)))) h491a@h48ee h4919@h48ec)))) (h2e23@make-stx h48a9@x h2de9@top-mark* (list h48e3@rib) '()))) (h30f4@interaction-env-rib h48aa@env) (h30f8@interaction-env-r h48aa@env) (h30c6@make-collector)) (assertion-violation 'expand '"not an environment" h48aa@env))))) (set! h3114@eval (lambda (h4921@x h4922@env) (begin (if (not (h3108@environment? h4922@env)) (error 'eval '"not an environment" h4922@env) (void)) (call-with-values (lambda () (h3112@expand h4921@x h4922@env)) (lambda (h4929@h4926 h492a@h4928) ((lambda (h492d@invoke-req* h492e@x) (begin (for-each h2c91@h2ad4@invoke-library h492d@invoke-req*) (eval-core (h2a16@h29ce@expanded->core h492e@x)))) h492a@h4928 h4929@h4926)))))) (set! h3116@library-expander (lambda h499f ((lambda (h49a0) (if (= h49a0 '3) (apply (lambda (h4931@x h4932@filename h4933@verify-name) ((lambda (h4938@build-visit-code h493a@visit!) (begin (set! h4938@build-visit-code (lambda (h498d@macro*) (if (null? h498d@macro*) (h2dcd@h2d3d@build-void) (h2dcc@h2d3b@build-sequence '#f (map (lambda (h498f@x) ((lambda (h4991@loc h4992@src) (list 'set! h4991@loc h4992@src)) (car h498f@x) (cddr h498f@x))) h498d@macro*))))) (set! h493a@visit! (lambda (h4985@macro*) (for-each (lambda (h4987@x) ((lambda (h4989@loc h498a@proc) (set-symbol-value! h4989@loc h498a@proc)) (car h4987@x) (cadr h4987@x))) h4985@macro*))) (call-with-values (lambda () (h30d4@core-library-expander h4931@x h4933@verify-name)) (lambda (h494d@h493c h494e@h493e h494f@h4940 h4950@h4942 h4951@h4944 h4952@h4946 h4953@h4948 h4954@h494a h4955@h494c) ((lambda (h495f@export-env h4960@export-subst h4961@macro* h4962@invoke-code h4963@vis* h4964@inv* h4965@imp* h4966@ver h4967@name) ((lambda (h4971@id h4972@name h4973@ver h4974@imp* h4975@vis* h4976@inv* h4977@visit-proc h4978@invoke-proc h4979@visit-code h497a@invoke-code) (begin (h2c8f@h2ad0@install-library h4971@id h4972@name h4973@ver h4974@imp* h4975@vis* h4976@inv* h4960@export-subst h495f@export-env h4977@visit-proc h4978@invoke-proc h4979@visit-code h497a@invoke-code '#t h4932@filename) (values h4971@id h4972@name h4973@ver h4974@imp* h4975@vis* h4976@inv* h497a@invoke-code h4979@visit-code h4960@export-subst h495f@export-env))) (gensym) h4967@name h4966@ver (map h2c95@h2adc@library-spec h4965@imp*) (map h2c95@h2adc@library-spec h4963@vis*) (map h2c95@h2adc@library-spec h4964@inv*) (lambda () (h493a@visit! h4961@macro*)) (lambda () (eval-core (h2a16@h29ce@expanded->core h4962@invoke-code))) (h4938@build-visit-code h4961@macro*) h4962@invoke-code)) h4955@h494c h4954@h494a h4953@h4948 h4952@h4946 h4951@h4944 h4950@h4942 h494f@h4940 h494e@h493e h494d@h493c))))) '#f '#f)) h499f) (if (= h49a0 '2) (apply (lambda (h4995@x h4996@filename) (h3116@library-expander h4995@x h4996@filename (lambda (h4999@x) (values)))) h499f) (if (= h49a0 '1) (apply (lambda (h499b@x) (h3116@library-expander h499b@x '#f (lambda (h499d@x) (values)))) h499f) (error 'apply '"invalid arg count"))))) (length h499f)))) (set! h3118@boot-library-expand (lambda (h49a1@x) (call-with-values (lambda () (h3116@library-expander h49a1@x)) (lambda (h49b7@h49a4 h49b8@h49a6 h49b9@h49a8 h49ba@h49aa h49bb@h49ac h49bc@h49ae h49bd@h49b0 h49be@h49b2 h49bf@h49b4 h49c0@h49b6) ((lambda (h49cb@export-env h49cc@export-subst h49cd@visit-code h49ce@invoke-code h49cf@inv* h49d0@vis* h49d1@imp* h49d2@ver h49d3@name h49d4@id) (values h49d3@name h49ce@invoke-code h49cc@export-subst h49cb@export-env)) h49c0@h49b6 h49bf@h49b4 h49be@h49b2 h49bd@h49b0 h49bc@h49ae h49bb@h49ac h49ba@h49aa h49b9@h49a8 h49b8@h49a6 h49b7@h49a4))))) (set! h311a@rev-map-append (lambda (h49df@f h49e0@ls h49e1@ac) (if (null? h49e0@ls) h49e1@ac (h311a@rev-map-append h49df@f (cdr h49e0@ls) (cons (h49df@f (car h49e0@ls)) h49e1@ac))))) (set! h311c@build-exports (lambda (h49e5@lex*+loc* h49e6@init*) (h2dcc@h2d3b@build-sequence '#f (cons (h2dcd@h2d3d@build-void) (h311a@rev-map-append (lambda (h49e9@x) (list 'set! (cdr h49e9@x) (car h49e9@x))) h49e5@lex*+loc* h49e6@init*))))) (set! h311e@make-export-subst (lambda (h49eb@name* h49ec@id*) (map (lambda (h49ef@name h49f0@id) ((lambda (h49f3@label) (begin (if (not h49f3@label) (h3134@syntax-violation '#f '"cannot export unbound identifier" h49f0@id) (void)) (cons h49ef@name h49f3@label))) (h2e75@id->label h49f0@id))) h49eb@name* h49ec@id*))) (set! h3120@make-export-env/macros (lambda (h49f5@lex* h49f6@loc* h49f7@r) ((lambda (h49fc@lookup) (begin (set! h49fc@lookup (lambda (h4a19@x) ((letrec ((h4a1b@f (lambda (h4a1d@x h4a1e@lex* h4a1f@loc*) (if (pair? h4a1e@lex*) (if (eq? h4a1d@x (car h4a1e@lex*)) (car h4a1f@loc*) (h4a1b@f h4a1d@x (cdr h4a1e@lex*) (cdr h4a1f@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) h4a1b@f) h4a19@x h49f5@lex* h49f6@loc*))) ((letrec ((h49fd@f (lambda (h49ff@r h4a00@env h4a01@global* h4a02@macro*) (if (null? h49ff@r) (values h4a00@env h4a01@global* h4a02@macro*) ((lambda (h4a07@x) ((lambda (h4a09@label h4a0a@b) ((lambda (h4a0d@t) (if (memv h4a0d@t '(lexical)) ((lambda (h4a0f@v) ((lambda (h4a11@loc h4a12@type) (h49fd@f (cdr h49ff@r) (cons (cons* h4a09@label h4a12@type h4a11@loc) h4a00@env) (cons (cons (h2ff2@lexical-var h4a0f@v) h4a11@loc) h4a01@global*) h4a02@macro*)) (h49fc@lookup (h2ff2@lexical-var h4a0f@v)) (if (h2ff4@lexical-mutable? h4a0f@v) 'mutable 'global))) (h2e7f@binding-value h4a0a@b)) (if (memv h4a0d@t '(local-macro)) ((lambda (h4a15@loc) (h49fd@f (cdr h49ff@r) (cons (cons* h4a09@label 'global-macro h4a15@loc) h4a00@env) h4a01@global* (cons (cons h4a15@loc (h2e7f@binding-value h4a0a@b)) h4a02@macro*))) (gensym)) (if (memv h4a0d@t '(local-macro!)) ((lambda (h4a17@loc) (h49fd@f (cdr h49ff@r) (cons (cons* h4a09@label 'global-macro! h4a17@loc) h4a00@env) h4a01@global* (cons (cons h4a17@loc (h2e7f@binding-value h4a0a@b)) h4a02@macro*))) (gensym)) (if (memv h4a0d@t '($rtd $module)) (h49fd@f (cdr h49ff@r) (cons h4a07@x h4a00@env) h4a01@global* h4a02@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (h2e7d@binding-type h4a0a@b) (h2e7f@binding-value h4a0a@b))))))) (h2e7d@binding-type h4a0a@b))) (car h4a07@x) (cdr h4a07@x))) (car h49ff@r)))))) h49fd@f) h49f7@r '() '() '()))) '#f))) (set! h3122@generate-temporaries (lambda (h4a23@ls) ((lambda (h4a25@t) ((lambda (h4a27@ls/false) (if h4a27@ls/false (apply (lambda (h4a29@ls) (map (lambda (h4a2b@x) (h2e23@make-stx ((lambda (h4a2d@x) (if (or (symbol? h4a2d@x) (string? h4a2d@x)) (gensym h4a2d@x) (gensym 't))) (h313a@syntax->datum h4a2b@x)) h2de9@top-mark* '() '())) h4a29@ls)) h4a27@ls/false) ((lambda (h4a2f@t) ((lambda (h4a31@ls/false) (if h4a31@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) h4a31@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4a2f@t))) (h3066@syntax-dispatch h4a2f@t '_))) h4a25@t))) (h3066@syntax-dispatch h4a25@t 'each-any))) h4a23@ls))) (set! h3124@free-identifier=? (lambda (h4a33@x h4a34@y) (if (h2e5b@id? h4a33@x) (if (h2e5b@id? h4a34@y) (h2e63@free-id=? h4a33@x h4a34@y) (assertion-violation 'free-identifier=? '"not an identifier" h4a34@y)) (assertion-violation 'free-identifier=? '"not an identifier" h4a33@x)))) (set! h3126@bound-identifier=? (lambda (h4a37@x h4a38@y) (if (h2e5b@id? h4a37@x) (if (h2e5b@id? h4a38@y) (h2e61@bound-id=? h4a37@x h4a38@y) (assertion-violation 'bound-identifier=? '"not an identifier" h4a38@y)) (assertion-violation 'bound-identifier=? '"not an identifier" h4a37@x)))) (set! h3128@make-source-condition (lambda (h4a3b@x) ((lambda (h4a45@h4a40 h4a47@h4a42 h4a49@h4a41 h4a4c@h4a3f h4a4e@make-source-condition h4a50@h4a3d h4a52@h4a3e h4a54@source-condition? h4a56@source-filename h4a58@source-character) (begin (set! h4a45@h4a40 (make-record-type-descriptor '&source-information h4e99@h4be0@&condition-rtd 'h4a43 '#f '#f '#((immutable file-name) (immutable character)))) (set! h4a47@h4a42 '#f) (set! h4a49@h4a41 (make-record-constructor-descriptor h4a45@h4a40 h4e9a@h4be2@&condition-rcd h4a47@h4a42)) (set! h4a4c@h4a3f (record-predicate h4a45@h4a40)) (set! h4a4e@make-source-condition (record-constructor h4a49@h4a41)) (set! h4a50@h4a3d (record-accessor h4a45@h4a40 '0)) (set! h4a52@h4a3e (record-accessor h4a45@h4a40 '1)) (set! h4a54@source-condition? (condition-predicate h4a45@h4a40)) (set! h4a56@source-filename (condition-accessor h4a45@h4a40 h4a50@h4a3d)) (set! h4a58@source-character (condition-accessor h4a45@h4a40 h4a52@h4a3e)) (if (pair? h4a3b@x) (h4a4e@make-source-condition (car h4a3b@x) (cdr h4a3b@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! h312a@extract-position-condition (lambda (h4a59@x) (h3128@make-source-condition (h312c@expression-position h4a59@x)))) (set! h312c@expression-position (lambda (h4a5b@x) (and (h2e25@stx? h4a5b@x) ((lambda (h4a5d@x) (and (h29b6@h28a7@annotation? h4a5d@x) (h29b7@h28a9@annotation-source h4a5d@x))) (h2e27@stx-expr h4a5b@x))))) (set! h312e@assertion-error (lambda (h4a5f@expr h4a60@pos) (raise (condition (h4ec9@h4ca4@make-assertion-violation) (h4edb@h4cd6@make-who-condition 'assert) (h4e9f@h4c37@make-message-condition '"assertion failed") (h4ed1@h4cbb@make-irritants-condition (list h4a5f@expr)) (h3128@make-source-condition h4a60@pos))))) (set! h3130@syntax-error (lambda (h4a63@x . h4a65@args) (begin (if (not (for-all string? h4a65@args)) (assertion-violation 'syntax-error '"invalid argument" h4a65@args) (void)) (raise (condition (h4e9f@h4c37@make-message-condition (if (null? h4a65@args) '"invalid syntax" (apply string-append h4a65@args))) (h4efd@h4d32@make-syntax-violation (h313a@syntax->datum h4a63@x) '#f) (h312a@extract-position-condition h4a63@x)))))) (set! h3132@syntax-violation* (lambda (h4a67@who h4a68@msg h4a69@form h4a6a@condition-object) (begin (if (not (string? h4a68@msg)) (assertion-violation 'syntax-violation '"message is not a string" h4a68@msg) (void)) ((lambda (h4a6f@who) (raise (condition (if h4a6f@who (h4edb@h4cd6@make-who-condition h4a6f@who) (condition)) (h4e9f@h4c37@make-message-condition h4a68@msg) h4a6a@condition-object (h312a@extract-position-condition h4a69@form)))) (if (or (string? h4a67@who) (symbol? h4a67@who)) h4a67@who (if (not h4a67@who) ((lambda (h4a71@t) ((lambda (h4a73@ls/false) (if (and h4a73@ls/false (apply (lambda (h4a75@id) (h2e5b@id? h4a75@id)) h4a73@ls/false)) (apply (lambda (h4a77@id) (h313a@syntax->datum h4a77@id)) h4a73@ls/false) ((lambda (h4a79@t) ((lambda (h4a7b@ls/false) (if (and h4a7b@ls/false (apply (lambda (h4a7d@id h4a7e@rest) (h2e5b@id? h4a7d@id)) h4a7b@ls/false)) (apply (lambda (h4a81@id h4a82@rest) (h313a@syntax->datum h4a81@id)) h4a7b@ls/false) ((lambda (h4a85@t) ((lambda (h4a87@ls/false) (if h4a87@ls/false (apply (lambda () '#f) h4a87@ls/false) (h3134@syntax-violation '#f '"invalid syntax" h4a85@t))) (h3066@syntax-dispatch h4a85@t '_))) h4a79@t))) (h3066@syntax-dispatch h4a79@t '(any . any)))) h4a71@t))) (h3066@syntax-dispatch h4a71@t 'any))) h4a69@form) (assertion-violation 'syntax-violation '"invalid who argument" h4a67@who))))))) (set! h3134@syntax-violation (lambda h4a97 ((lambda (h4a98) (if (= h4a98 '3) (apply (lambda (h4a89@who h4a8a@msg h4a8b@form) (h3134@syntax-violation h4a89@who h4a8a@msg h4a8b@form '#f)) h4a97) (if (= h4a98 '4) (apply (lambda (h4a8f@who h4a90@msg h4a91@form h4a92@subform) (h3132@syntax-violation* h4a8f@who h4a90@msg h4a91@form (h4efd@h4d32@make-syntax-violation (h313a@syntax->datum h4a91@form) (h313a@syntax->datum h4a92@subform)))) h4a97) (error 'apply '"invalid arg count")))) (length h4a97)))) (set! h3136@identifier? (lambda (h4a99@x) (h2e5b@id? h4a99@x))) (set! h3138@datum->syntax (lambda (h4a9b@id h4a9c@datum) (if (h2e5b@id? h4a9b@id) (h2e39@datum->stx h4a9b@id h4a9c@datum) (assertion-violation 'datum->syntax '"not an identifier" h4a9b@id)))) (set! h313a@syntax->datum (lambda (h4a9f@x) (h2e71@stx->datum h4a9f@x))) (set! h313c@compile-r6rs-top-level (lambda (h4aa1@x*) (call-with-values (lambda () (h30d8@top-level-expander h4aa1@x*)) (lambda (h4aa7@h4aa4 h4aa8@h4aa6) ((lambda (h4aab@invoke-code h4aac@lib*) (lambda () (begin (for-each h2c91@h2ad4@invoke-library h4aac@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (h2a16@h29ce@expanded->core h4aab@invoke-code)) (void)) (eval-core (h2a16@h29ce@expanded->core h4aab@invoke-code))))) h4aa8@h4aa6 h4aa7@h4aa4))))) (set! h313e@pre-compile-r6rs-top-level (lambda (h4aaf@x*) (call-with-values (lambda () (h30d8@top-level-expander h4aaf@x*)) (lambda (h4ab5@h4ab2 h4ab6@h4ab4) ((lambda (h4ab9@invoke-code h4aba@lib*) (begin (for-each h2c91@h2ad4@invoke-library h4aba@lib*) (h29bf@h28b9@compile-core (h2a16@h29ce@expanded->core h4ab9@invoke-code)))) h4ab6@h4ab4 h4ab5@h4ab2))))) (set! h3140@interaction-environment ((lambda (h4abd@the-env) (lambda () (or h4abd@the-env ((lambda (h4abf@lib h4ac0@rib) (begin ((lambda (h4ac3@subst) (begin (h2dff@set-rib-sym*! h4ac0@rib (map car h4ac3@subst)) (h2e03@set-rib-mark**! h4ac0@rib (map (lambda (h4ac5@x) h2de9@top-mark*) h4ac3@subst)) (h2e07@set-rib-label*! h4ac0@rib (map cdr h4ac3@subst)))) (h2c6c@h2a8a@library-subst h4abf@lib)) ((lambda (h4ac7@env) (begin (set! h4abd@the-env h4ac7@env) h4ac7@env)) (h30f0@make-interaction-env h4ac0@rib '() '())))) (h2c8a@h2ac6@find-library-by-name '(mosh interaction)) (h2e13@make-empty-rib))))) '#f)) (set! h3142@top-level-context (h29c1@h28bd@make-parameter '#f)) (begin (set! h4bcb@h3142@top-level-context h3142@top-level-context) (set! h4bca@h3140@interaction-environment h3140@interaction-environment) (set! h4bc9@h313e@pre-compile-r6rs-top-level h313e@pre-compile-r6rs-top-level) (set! h4bc8@h313c@compile-r6rs-top-level h313c@compile-r6rs-top-level) (set! h4bc7@h313a@syntax->datum h313a@syntax->datum) (set! h4bc6@h3138@datum->syntax h3138@datum->syntax) (set! h4bc5@h3136@identifier? h3136@identifier?) (set! h4bc4@h3134@syntax-violation h3134@syntax-violation) (set! h4bc3@h3132@syntax-violation* h3132@syntax-violation*) (set! h4bc2@h3130@syntax-error h3130@syntax-error) (set! h4bc1@h312e@assertion-error h312e@assertion-error) (set! h4bc0@h312c@expression-position h312c@expression-position) (set! h4bbf@h312a@extract-position-condition h312a@extract-position-condition) (set! h4bbe@h3128@make-source-condition h3128@make-source-condition) (set! h4bbd@h3126@bound-identifier=? h3126@bound-identifier=?) (set! h4bbc@h3124@free-identifier=? h3124@free-identifier=?) (set! h4bbb@h3122@generate-temporaries h3122@generate-temporaries) (set! h4bba@h3120@make-export-env/macros h3120@make-export-env/macros) (set! h4bb9@h311e@make-export-subst h311e@make-export-subst) (set! h4bb8@h311c@build-exports h311c@build-exports) (set! h4bb7@h311a@rev-map-append h311a@rev-map-append) (set! h4bb6@h3118@boot-library-expand h3118@boot-library-expand) (set! h4bb5@h3116@library-expander h3116@library-expander) (set! h4bb4@h3114@eval h3114@eval) (set! h4bb3@h3112@expand h3112@expand) (set! h4bb2@h3110@scheme-report-environment h3110@scheme-report-environment) (set! h4bb1@h310e@null-environment h310e@null-environment) (set! h4bb0@h310c@environment h310c@environment) (set! h4baf@h310a@environment-symbols h310a@environment-symbols) (set! h4bae@h3108@environment? h3108@environment?) (set! h4bad@h3106@parse-binding h3106@parse-binding) (set! h4bac@h3104@environment-bindings h3104@environment-bindings) (set! h4bab@h3102@interaction-environment-symbols h3102@interaction-environment-symbols) (set! h4baa@h3100@dummy h3100@dummy) (set! h4ba9@h30fe@set-interaction-env-locs! h30fe@set-interaction-env-locs!) (set! h4ba8@h30fc@interaction-env-locs h30fc@interaction-env-locs) (set! h4ba7@h30fa@set-interaction-env-r! h30fa@set-interaction-env-r!) (set! h4ba6@h30f8@interaction-env-r h30f8@interaction-env-r) (set! h4ba5@h30f6@set-interaction-env-rib! h30f6@set-interaction-env-rib!) (set! h4ba4@h30f4@interaction-env-rib h30f4@interaction-env-rib) (set! h4ba3@h30f2@interaction-env? h30f2@interaction-env?) (set! h4ba2@h30f0@make-interaction-env h30f0@make-interaction-env) (set! h4ba1@h30ee@rp h30ee@rp) (set! h4ba0@h30ec@dummy h30ec@dummy) (set! h4b9f@h30ea@set-env-itc! h30ea@set-env-itc!) (set! h4b9e@h30e8@env-itc h30e8@env-itc) (set! h4b9d@h30e6@set-env-labels! h30e6@set-env-labels!) (set! h4b9c@h30e4@env-labels h30e4@env-labels) (set! h4b9b@h30e2@set-env-names! h30e2@set-env-names!) (set! h4b9a@h30e0@env-names h30e0@env-names) (set! h4b99@h30de@env? h30de@env?) (set! h4b98@h30dc@make-env h30dc@make-env) (set! h4b97@h30da@rp h30da@rp) (set! h4b96@h30d8@top-level-expander h30d8@top-level-expander) (set! h4b95@h30d6@parse-top-level-program h30d6@parse-top-level-program) (set! h4b94@h30d4@core-library-expander h30d4@core-library-expander) (set! h4b93@h30d2@library-body-expander h30d2@library-body-expander) (set! h4b92@h30d0@chi-interaction-expr h30d0@chi-interaction-expr) (set! h4b91@h30ce@chi-library-internal h30ce@chi-library-internal) (set! h4b90@h30cc@imp-collector h30cc@imp-collector) (set! h4b8f@h30ca@vis-collector h30ca@vis-collector) (set! h4b8e@h30c8@inv-collector h30c8@inv-collector) (set! h4b8d@h30c6@make-collector h30c6@make-collector) (set! h4b8c@h30c4@make-top-rib h30c4@make-top-rib) (set! h4b8b@h30c2@parse-import-spec* h30c2@parse-import-spec*) (set! h4b8a@h30c0@parse-library h30c0@parse-library) (set! h4b89@h30be@parse-library-name h30be@parse-library-name) (set! h4b88@h30bc@parse-exports h30bc@parse-exports) (set! h4b87@h30ba@expand-transformer h30ba@expand-transformer) (set! h4b86@h30b8@chi-body* h30b8@chi-body*) (set! h4b85@h30b6@chi-internal-module h30b6@chi-internal-module) (set! h4b84@h30b4@module-interface-exp-id* h30b4@module-interface-exp-id*) (set! h4b83@h30b2@dummy h30b2@dummy) (set! h4b82@h30b0@set-module-interface-exp-lab-vec! h30b0@set-module-interface-exp-lab-vec!) (set! h4b81@h30ae@module-interface-exp-lab-vec h30ae@module-interface-exp-lab-vec) (set! h4b80@h30ac@set-module-interface-exp-id-vec! h30ac@set-module-interface-exp-id-vec!) (set! h4b7f@h30aa@module-interface-exp-id-vec h30aa@module-interface-exp-id-vec) (set! h4b7e@h30a8@set-module-interface-first-mark! h30a8@set-module-interface-first-mark!) (set! h4b7d@h30a6@module-interface-first-mark h30a6@module-interface-first-mark) (set! h4b7c@h30a4@module-interface? h30a4@module-interface?) (set! h4b7b@h30a2@make-module-interface h30a2@make-module-interface) (set! h4b7a@h30a0@parse-module h30a0@parse-module) (set! h4b79@h309e@chi-internal h309e@chi-internal) (set! h4b78@h309c@find-dups h309c@find-dups) (set! h4b77@h309a@find-bound=? h309a@find-bound=?) (set! h4b76@h3098@chi-rhs* h3098@chi-rhs*) (set! h4b75@h3096@expand-interaction-rhs*/init* h3096@expand-interaction-rhs*/init*) (set! h4b74@h3094@chi-rhs h3094@chi-rhs) (set! h4b73@h3092@chi-defun h3092@chi-defun) (set! h4b72@h3090@chi-lambda-clause* h3090@chi-lambda-clause*) (set! h4b71@h308e@chi-lambda-clause h308e@chi-lambda-clause) (set! h4b70@h308c@verify-formals h308c@verify-formals) (set! h4b6f@h308a@chi-set! h308a@chi-set!) (set! h4b6e@h3088@chi-expr h3088@chi-expr) (set! h4b6d@h3086@chi-application h3086@chi-application) (set! h4b6c@h3084@chi-expr* h3084@chi-expr*) (set! h4b6b@h3082@chi-global-macro h3082@chi-global-macro) (set! h4b6a@h3080@chi-local-macro h3080@chi-local-macro) (set! h4b69@h307e@chi-macro h307e@chi-macro) (set! h4b68@h307c@do-macro-call h307c@do-macro-call) (set! h4b67@h307a@local-macro-transformer h307a@local-macro-transformer) (set! h4b66@h3078@macro-transformer h3078@macro-transformer) (set! h4b65@h3076@symbol-macro h3076@symbol-macro) (set! h4b64@h3074@core-macro-transformer h3074@core-macro-transformer) (set! h4b63@h3072@syntax-transformer h3072@syntax-transformer) (set! h4b62@h3070@ellipsis-map h3070@ellipsis-map) (set! h4b61@h306e@syntax-case-transformer h306e@syntax-case-transformer) (set! h4b60@h306c@verify-literals h306c@verify-literals) (set! h4b5f@h306a@underscore? h306a@underscore?) (set! h4b5e@h3068@ellipsis? h3068@ellipsis?) (set! h4b5d@h3066@syntax-dispatch h3066@syntax-dispatch) (set! h4b5c@h3064@convert-pattern h3064@convert-pattern) (set! h4b5b@h3062@foreign-call-transformer h3062@foreign-call-transformer) (set! h4b5a@h3060@parameterize-macro h3060@parameterize-macro) (set! h4b59@h305e@incorrect-usage-macro h305e@incorrect-usage-macro) (set! h4b58@h305c@define-condition-type-macro h305c@define-condition-type-macro) (set! h4b57@h305a@define-record-type-macro h305a@define-record-type-macro) (set! h4b56@h3058@define-struct-macro h3058@define-struct-macro) (set! h4b55@h3056@quasisyntax-macro h3056@quasisyntax-macro) (set! h4b54@h3054@quasiquote-macro h3054@quasiquote-macro) (set! h4b53@h3052@syntax-rules-macro h3052@syntax-rules-macro) (set! h4b52@h3050@include-into-macro h3050@include-into-macro) (set! h4b51@h304e@include-macro h304e@include-macro) (set! h4b50@h304c@do-include h304c@do-include) (set! h4b4f@h304a@cond-macro h304a@cond-macro) (set! h4b4e@h3048@and-macro h3048@and-macro) (set! h4b4d@h3046@or-macro h3046@or-macro) (set! h4b4c@h3044@let*-macro h3044@let*-macro) (set! h4b4b@h3042@do-macro h3042@do-macro) (set! h4b4a@h3040@identifier-syntax-macro h3040@identifier-syntax-macro) (set! h4b49@h303e@endianness-macro h303e@endianness-macro) (set! h4b48@h303c@assert-macro h303c@assert-macro) (set! h4b47@h303a@delay-macro h303a@delay-macro) (set! h4b46@h3038@time-macro h3038@time-macro) (set! h4b45@h3036@define-enumeration-macro h3036@define-enumeration-macro) (set! h4b44@h3034@guard-macro h3034@guard-macro) (set! h4b43@h3032@trace-letrec-syntax-macro h3032@trace-letrec-syntax-macro) (set! h4b42@h3030@trace-let-syntax-macro h3030@trace-let-syntax-macro) (set! h4b41@h302e@trace-let/rec-syntax h302e@trace-let/rec-syntax) (set! h4b40@h302c@trace-define-syntax-macro h302c@trace-define-syntax-macro) (set! h4b3f@h302a@trace-define-macro h302a@trace-define-macro) (set! h4b3e@h3028@trace-lambda-macro h3028@trace-lambda-macro) (set! h4b3d@h3026@let*-values-macro h3026@let*-values-macro) (set! h4b3c@h3024@let-values-macro h3024@let-values-macro) (set! h4b3b@h3022@let-macro h3022@let-macro) (set! h4b3a@h3020@invalid-fmls-error h3020@invalid-fmls-error) (set! h4b39@h301e@with-syntax-macro h301e@with-syntax-macro) (set! h4b38@h301c@bless h301c@bless) (set! h4b37@h301a@lambda-transformer h301a@lambda-transformer) (set! h4b36@h3018@case-lambda-transformer h3018@case-lambda-transformer) (set! h4b35@h3016@quote-transformer h3016@quote-transformer) (set! h4b34@h3014@case-macro h3014@case-macro) (set! h4b33@h3012@or-transformer h3012@or-transformer) (set! h4b32@h3010@and-transformer h3010@and-transformer) (set! h4b31@h300e@if-transformer h300e@if-transformer) (set! h4b30@h300c@unless-macro h300c@unless-macro) (set! h4b2f@h300a@when-macro h300a@when-macro) (set! h4b2e@h3008@record-constructor-descriptor-transformer h3008@record-constructor-descriptor-transformer) (set! h4b2d@h3006@record-type-descriptor-transformer h3006@record-type-descriptor-transformer) (set! h4b2c@h3004@type-descriptor-transformer h3004@type-descriptor-transformer) (set! h4b2b@h3002@fluid-let-syntax-transformer h3002@fluid-let-syntax-transformer) (set! h4b2a@h3000@letrec*-transformer h3000@letrec*-transformer) (set! h4b29@h2ffe@letrec-transformer h2ffe@letrec-transformer) (set! h4b28@h2ffc@letrec-helper h2ffc@letrec-helper) (set! h4b27@h2ffa@add-lexicals h2ffa@add-lexicals) (set! h4b26@h2ff8@add-lexical h2ff8@add-lexical) (set! h4b25@h2ff6@set-lexical-mutable! h2ff6@set-lexical-mutable!) (set! h4b24@h2ff4@lexical-mutable? h2ff4@lexical-mutable?) (set! h4b23@h2ff2@lexical-var h2ff2@lexical-var) (set! h4b22@h2ff0@scheme-stx h2ff0@scheme-stx) (set! h4b21@h2fee@scheme-stx-hashtable h2fee@scheme-stx-hashtable) (set! h4b20@h2fec@parse-define-syntax h2fec@parse-define-syntax) (set! h4b1f@h2fea@parse-define h2fea@parse-define) (set! h4b1e@h2e99@make-eval-transformer h2e99@make-eval-transformer) (set! h4b1d@h2e97@variable-transformer-procedure h2e97@variable-transformer-procedure) (set! h4b1c@h2e95@variable-transformer? h2e95@variable-transformer?) (set! h4b1b@h2e93@make-variable-transformer h2e93@make-variable-transformer) (set! h4b1a@h2e91@sanitize-binding h2e91@sanitize-binding) (set! h4b19@h2e83@syntax-type h2e83@syntax-type) (set! h4b18@h2e81@raise-unbound-error h2e81@raise-unbound-error) (set! h4b17@h2e7f@binding-value h2e7f@binding-value) (set! h4b16@h2e7d@binding-type h2e7d@binding-type) (set! h4b15@h2e7b@make-binding h2e7b@make-binding) (set! h4b14@h2e79@label->binding h2e79@label->binding) (set! h4b13@h2e77@id->real-label h2e77@id->real-label) (set! h4b12@h2e75@id->label h2e75@id->label) (set! h4b11@h2e73@same-marks*? h2e73@same-marks*?) (set! h4b10@h2e71@stx->datum h2e71@stx->datum) (set! h4b0f@h2e6f@strip h2e6f@strip) (set! h4b0e@h2e6d@strip-annotations h2e6d@strip-annotations) (set! h4b0d@h2e6b@self-evaluating? h2e6b@self-evaluating?) (set! h4b0c@h2e69@bound-id-member? h2e69@bound-id-member?) (set! h4b0b@h2e67@distinct-bound-ids? h2e67@distinct-bound-ids?) (set! h4b0a@h2e65@valid-bound-ids? h2e65@valid-bound-ids?) (set! h4b09@h2e63@free-id=? h2e63@free-id=?) (set! h4b08@h2e61@bound-id=? h2e61@bound-id=?) (set! h4b07@h2e5f@same-marks? h2e5f@same-marks?) (set! h4b06@h2e5d@id->sym h2e5d@id->sym) (set! h4b05@h2e5b@id? h2e5b@id?) (set! h4b04@h2e59@syntax->list h2e59@syntax->list) (set! h4b03@h2e57@syntax-cdr h2e57@syntax-cdr) (set! h4b02@h2e55@syntax-car h2e55@syntax-car) (set! h4b01@h2e53@syntax-list? h2e53@syntax-list?) (set! h4b00@h2e51@syntax-null? h2e51@syntax-null?) (set! h4aff@h2e4f@syntax-vector? h2e4f@syntax-vector?) (set! h4afe@h2e4d@syntax-pair? h2e4d@syntax-pair?) (set! h4afd@h2e4b@syntax-vector->list h2e4b@syntax-vector->list) (set! h4afc@h2e49@syntax-kind? h2e49@syntax-kind?) (set! h4afb@h2e47@add-subst h2e47@add-subst) (set! h4afa@h2e45@add-mark h2e45@add-mark) (set! h4af9@h2e43@mkstx h2e43@mkstx) (set! h4af8@h2e41@join-wraps h2e41@join-wraps) (set! h4af7@h2e3f@anti-mark? h2e3f@anti-mark?) (set! h4af6@h2e3d@anti-mark h2e3d@anti-mark) (set! h4af5@h2e3b@gen-mark h2e3b@gen-mark) (set! h4af4@h2e39@datum->stx h2e39@datum->stx) (set! h4af3@h2e37@dummy h2e37@dummy) (set! h4af2@h2e35@set-stx-ae*! h2e35@set-stx-ae*!) (set! h4af1@h2e33@stx-ae* h2e33@stx-ae*) (set! h4af0@h2e31@set-stx-subst*! h2e31@set-stx-subst*!) (set! h4aef@h2e2f@stx-subst* h2e2f@stx-subst*) (set! h4aee@h2e2d@set-stx-mark*! h2e2d@set-stx-mark*!) (set! h4aed@h2e2b@stx-mark* h2e2b@stx-mark*) (set! h4aec@h2e29@set-stx-expr! h2e29@set-stx-expr!) (set! h4aeb@h2e27@stx-expr h2e27@stx-expr) (set! h4aea@h2e25@stx? h2e25@stx?) (set! h4ae9@h2e23@make-stx h2e23@make-stx) (set! h4ae8@h2e21@rp h2e21@rp) (set! h4ae7@h2e1f@make-full-rib h2e1f@make-full-rib) (set! h4ae6@h2e1d@unseal-rib! h2e1d@unseal-rib!) (set! h4ae5@h2e1b@seal-rib! h2e1b@seal-rib!) (set! h4ae4@h2e19@make-rib-map h2e19@make-rib-map) (set! h4ae3@h2e17@extend-rib/nc! h2e17@extend-rib/nc!) (set! h4ae2@h2e15@extend-rib! h2e15@extend-rib!) (set! h4ae1@h2e13@make-empty-rib h2e13@make-empty-rib) (set! h4ae0@h2e11@dummy h2e11@dummy) (set! h4adf@h2e0f@set-rib-cache! h2e0f@set-rib-cache!) (set! h4ade@h2e0d@rib-cache h2e0d@rib-cache) (set! h4add@h2e0b@set-rib-sealed/freq! h2e0b@set-rib-sealed/freq!) (set! h4adc@h2e09@rib-sealed/freq h2e09@rib-sealed/freq) (set! h4adb@h2e07@set-rib-label*! h2e07@set-rib-label*!) (set! h4ada@h2e05@rib-label* h2e05@rib-label*) (set! h4ad9@h2e03@set-rib-mark**! h2e03@set-rib-mark**!) (set! h4ad8@h2e01@rib-mark** h2e01@rib-mark**) (set! h4ad7@h2dff@set-rib-sym*! h2dff@set-rib-sym*!) (set! h4ad6@h2dfd@rib-sym* h2dfd@rib-sym*) (set! h4ad5@h2dfb@rib? h2dfb@rib?) (set! h4ad4@h2df9@make-rib h2df9@make-rib) (set! h4ad3@h2df7@gen-define-label h2df7@gen-define-label) (set! h4ad2@h2df5@gen-define-label+loc h2df5@gen-define-label+loc) (set! h4ad1@h2df3@gen-top-level-label h2df3@gen-top-level-label) (set! h4ad0@h2df1@gen-label h2df1@gen-label) (set! h4acf@h2def@gen-global h2def@gen-global) (set! h4ace@h2ded@gen-lexical h2ded@gen-lexical) (set! h4acd@h2deb@top-marked? h2deb@top-marked?) (set! h4acc@h2de9@top-mark* h2de9@top-mark*) (set! h4acb@h2de4@set-union h2de4@set-union) (set! h4aca@h2de2@set-cons h2de2@set-cons) (set! h4ac9@h2de0@file-options-macro h2de0@file-options-macro) (h2c87@h2ac0@current-library-expander h3116@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (h4bd5@h4bd0 h4bd7@h4bd2 h4bd9@h4bd1 h4bdc@&condition? h4bde@make-&condition h4be0@&condition-rtd h4be2@&condition-rcd h4c2e@h4c29 h4c30@h4c2b h4c32@h4c2a h4c35@p? h4c37@make-message-condition h4c39@h4c28 h4c3b@message-condition? h4c3d@condition-message h4c3f@&message-rtd h4c41@&message-rcd h4c47@h4c42 h4c49@h4c44 h4c4b@h4c43 h4c4e@p? h4c50@make-warning h4c52@warning? h4c54@&warning-rtd h4c56@&warning-rcd h4c5c@h4c57 h4c5e@h4c59 h4c60@h4c58 h4c63@p? h4c65@make-serious-condition h4c67@serious-condition? h4c69@&serious-rtd h4c6b@&serious-rcd h4c71@h4c6c h4c73@h4c6e h4c75@h4c6d h4c78@p? h4c7a@make-error h4c7c@error? h4c7e@&error-rtd h4c80@&error-rcd h4c86@h4c81 h4c88@h4c83 h4c8a@h4c82 h4c8d@p? h4c8f@make-violation h4c91@violation? h4c93@&violation-rtd h4c95@&violation-rcd h4c9b@h4c96 h4c9d@h4c98 h4c9f@h4c97 h4ca2@p? h4ca4@make-assertion-violation h4ca6@assertion-violation? h4ca8@&assertion-rtd h4caa@&assertion-rcd h4cb2@h4cad h4cb4@h4caf h4cb6@h4cae h4cb9@p? h4cbb@make-irritants-condition h4cbd@h4cac h4cbf@irritants-condition? h4cc1@condition-irritants h4cc3@&irritants-rtd h4cc5@&irritants-rcd h4ccd@h4cc8 h4ccf@h4cca h4cd1@h4cc9 h4cd4@p? h4cd6@make-who-condition h4cd8@h4cc7 h4cda@who-condition? h4cdc@condition-who h4cde@&who-rtd h4ce0@&who-rcd h4ce6@h4ce1 h4ce8@h4ce3 h4cea@h4ce2 h4ced@p? h4cef@make-non-continuable-violation h4cf1@non-continuable-violation? h4cf3@&non-continuable-rtd h4cf5@&non-continuable-rcd h4cfb@h4cf6 h4cfd@h4cf8 h4cff@h4cf7 h4d02@p? h4d04@make-implementation-restriction-violation h4d06@implementation-restriction-violation? h4d08@&implementation-restriction-rtd h4d0a@&implementation-restriction-rcd h4d10@h4d0b h4d12@h4d0d h4d14@h4d0c h4d17@p? h4d19@make-lexical-violation h4d1b@lexical-violation? h4d1d@&lexical-rtd h4d1f@&lexical-rcd h4d29@h4d24 h4d2b@h4d26 h4d2d@h4d25 h4d30@p? h4d32@make-syntax-violation h4d34@h4d21 h4d36@h4d23 h4d38@syntax-violation? h4d3a@syntax-violation-form h4d3c@syntax-violation-subform h4d3e@&syntax-rtd h4d40@&syntax-rcd h4d46@h4d41 h4d48@h4d43 h4d4a@h4d42 h4d4d@p? h4d4f@make-undefined-violation h4d51@undefined-violation? h4d53@&undefined-rtd h4d55@&undefined-rcd h4d5b@h4d56 h4d5d@h4d58 h4d5f@h4d57 h4d62@p? h4d64@make-i/o-error h4d66@i/o-error? h4d68@&i/o-rtd h4d6a@&i/o-rcd h4d70@h4d6b h4d72@h4d6d h4d74@h4d6c h4d77@p? h4d79@make-i/o-read-error h4d7b@i/o-read-error? h4d7d@&i/o-read-rtd h4d7f@&i/o-read-rcd h4d85@h4d80 h4d87@h4d82 h4d89@h4d81 h4d8c@p? h4d8e@make-i/o-write-error h4d90@i/o-write-error? h4d92@&i/o-write-rtd h4d94@&i/o-write-rcd h4d9c@h4d97 h4d9e@h4d99 h4da0@h4d98 h4da3@p? h4da5@make-i/o-invalid-position-error h4da7@h4d96 h4da9@i/o-invalid-position-error? h4dab@i/o-error-position h4dad@&i/o-invalid-position-rtd h4daf@&i/o-invalid-position-rcd h4db7@h4db2 h4db9@h4db4 h4dbb@h4db3 h4dbe@p? h4dc0@make-i/o-filename-error h4dc2@h4db1 h4dc4@i/o-filename-error? h4dc6@i/o-error-filename h4dc8@&i/o-filename-rtd h4dca@&i/o-filename-rcd h4dd0@h4dcb h4dd2@h4dcd h4dd4@h4dcc h4dd7@p? h4dd9@make-i/o-file-protection-error h4ddb@i/o-file-protection-error? h4ddd@&i/o-file-protection-rtd h4ddf@&i/o-file-protection-rcd h4de5@h4de0 h4de7@h4de2 h4de9@h4de1 h4dec@p? h4dee@make-i/o-file-is-read-only-error h4df0@i/o-file-is-read-only-error? h4df2@&i/o-file-is-read-only-rtd h4df4@&i/o-file-is-read-only-rcd h4dfa@h4df5 h4dfc@h4df7 h4dfe@h4df6 h4e01@p? h4e03@make-i/o-file-already-exists-error h4e05@i/o-file-already-exists-error? h4e07@&i/o-file-already-exists-rtd h4e09@&i/o-file-already-exists-rcd h4e0f@h4e0a h4e11@h4e0c h4e13@h4e0b h4e16@p? h4e18@make-i/o-file-does-not-exist-error h4e1a@i/o-file-does-not-exist-error? h4e1c@&i/o-file-does-not-exist-rtd h4e1e@&i/o-file-does-not-exist-rcd h4e26@h4e21 h4e28@h4e23 h4e2a@h4e22 h4e2d@p? h4e2f@make-i/o-port-error h4e31@h4e20 h4e33@i/o-port-error? h4e35@i/o-error-port h4e37@&i/o-port-rtd h4e39@&i/o-port-rcd h4e3f@h4e3a h4e41@h4e3c h4e43@h4e3b h4e46@p? h4e48@make-i/o-decoding-error h4e4a@i/o-decoding-error? h4e4c@&i/o-decoding-rtd h4e4e@&i/o-decoding-rcd h4e56@h4e51 h4e58@h4e53 h4e5a@h4e52 h4e5d@p? h4e5f@make-i/o-encoding-error h4e61@h4e50 h4e63@i/o-encoding-error? h4e65@i/o-encoding-error-char h4e67@&i/o-encoding-rtd h4e69@&i/o-encoding-rcd h4e6f@h4e6a h4e71@h4e6c h4e73@h4e6b h4e76@p? h4e78@make-no-infinities-violation h4e7a@no-infinities-violation? h4e7c@&no-infinities-rtd h4e7e@&no-infinities-rcd h4e84@h4e7f h4e86@h4e81 h4e88@h4e80 h4e8b@p? h4e8d@make-no-nans-violation h4e8f@no-nans-violation? h4e91@&no-nans-rtd h4e93@&no-nans-rcd) (begin (set! h4bd5@h4bd0 (make-record-type-descriptor '&condition '#f 'h4bd3 '#f '#f '#())) (set! h4bd7@h4bd2 '#f) (set! h4bd9@h4bd1 (make-record-constructor-descriptor h4bd5@h4bd0 '#f h4bd7@h4bd2)) (set! h4bdc@&condition? (record-predicate h4bd5@h4bd0)) (set! h4bde@make-&condition (record-constructor h4bd9@h4bd1)) (set! h4be0@&condition-rtd h4bd5@h4bd0) (set! h4be2@&condition-rcd h4bd9@h4bd1) (set! h4c2e@h4c29 (make-record-type-descriptor '&message h4bd5@h4bd0 'h4c2c '#f '#f '#((immutable message)))) (set! h4c30@h4c2b '#f) (set! h4c32@h4c2a (make-record-constructor-descriptor h4c2e@h4c29 h4bd9@h4bd1 h4c30@h4c2b)) (set! h4c35@p? (record-predicate h4c2e@h4c29)) (set! h4c37@make-message-condition (record-constructor h4c32@h4c2a)) (set! h4c39@h4c28 (record-accessor h4c2e@h4c29 '0)) (set! h4c3b@message-condition? (condition-predicate h4c2e@h4c29)) (set! h4c3d@condition-message (condition-accessor h4c2e@h4c29 h4c39@h4c28)) (set! h4c3f@&message-rtd h4c2e@h4c29) (set! h4c41@&message-rcd h4c32@h4c2a) (set! h4c47@h4c42 (make-record-type-descriptor '&warning h4bd5@h4bd0 'h4c45 '#f '#f '#())) (set! h4c49@h4c44 '#f) (set! h4c4b@h4c43 (make-record-constructor-descriptor h4c47@h4c42 h4bd9@h4bd1 h4c49@h4c44)) (set! h4c4e@p? (record-predicate h4c47@h4c42)) (set! h4c50@make-warning (record-constructor h4c4b@h4c43)) (set! h4c52@warning? (condition-predicate h4c47@h4c42)) (set! h4c54@&warning-rtd h4c47@h4c42) (set! h4c56@&warning-rcd h4c4b@h4c43) (set! h4c5c@h4c57 (make-record-type-descriptor '&serious h4bd5@h4bd0 'h4c5a '#f '#f '#())) (set! h4c5e@h4c59 '#f) (set! h4c60@h4c58 (make-record-constructor-descriptor h4c5c@h4c57 h4bd9@h4bd1 h4c5e@h4c59)) (set! h4c63@p? (record-predicate h4c5c@h4c57)) (set! h4c65@make-serious-condition (record-constructor h4c60@h4c58)) (set! h4c67@serious-condition? (condition-predicate h4c5c@h4c57)) (set! h4c69@&serious-rtd h4c5c@h4c57) (set! h4c6b@&serious-rcd h4c60@h4c58) (set! h4c71@h4c6c (make-record-type-descriptor '&error h4c5c@h4c57 'h4c6f '#f '#f '#())) (set! h4c73@h4c6e '#f) (set! h4c75@h4c6d (make-record-constructor-descriptor h4c71@h4c6c h4c60@h4c58 h4c73@h4c6e)) (set! h4c78@p? (record-predicate h4c71@h4c6c)) (set! h4c7a@make-error (record-constructor h4c75@h4c6d)) (set! h4c7c@error? (condition-predicate h4c71@h4c6c)) (set! h4c7e@&error-rtd h4c71@h4c6c) (set! h4c80@&error-rcd h4c75@h4c6d) (set! h4c86@h4c81 (make-record-type-descriptor '&violation h4c5c@h4c57 'h4c84 '#f '#f '#())) (set! h4c88@h4c83 '#f) (set! h4c8a@h4c82 (make-record-constructor-descriptor h4c86@h4c81 h4c60@h4c58 h4c88@h4c83)) (set! h4c8d@p? (record-predicate h4c86@h4c81)) (set! h4c8f@make-violation (record-constructor h4c8a@h4c82)) (set! h4c91@violation? (condition-predicate h4c86@h4c81)) (set! h4c93@&violation-rtd h4c86@h4c81) (set! h4c95@&violation-rcd h4c8a@h4c82) (set! h4c9b@h4c96 (make-record-type-descriptor '&assertion h4c86@h4c81 'h4c99 '#f '#f '#())) (set! h4c9d@h4c98 '#f) (set! h4c9f@h4c97 (make-record-constructor-descriptor h4c9b@h4c96 h4c8a@h4c82 h4c9d@h4c98)) (set! h4ca2@p? (record-predicate h4c9b@h4c96)) (set! h4ca4@make-assertion-violation (record-constructor h4c9f@h4c97)) (set! h4ca6@assertion-violation? (condition-predicate h4c9b@h4c96)) (set! h4ca8@&assertion-rtd h4c9b@h4c96) (set! h4caa@&assertion-rcd h4c9f@h4c97) (set! h4cb2@h4cad (make-record-type-descriptor '&irritants h4bd5@h4bd0 'h4cb0 '#f '#f '#((immutable irritants)))) (set! h4cb4@h4caf '#f) (set! h4cb6@h4cae (make-record-constructor-descriptor h4cb2@h4cad h4bd9@h4bd1 h4cb4@h4caf)) (set! h4cb9@p? (record-predicate h4cb2@h4cad)) (set! h4cbb@make-irritants-condition (record-constructor h4cb6@h4cae)) (set! h4cbd@h4cac (record-accessor h4cb2@h4cad '0)) (set! h4cbf@irritants-condition? (condition-predicate h4cb2@h4cad)) (set! h4cc1@condition-irritants (condition-accessor h4cb2@h4cad h4cbd@h4cac)) (set! h4cc3@&irritants-rtd h4cb2@h4cad) (set! h4cc5@&irritants-rcd h4cb6@h4cae) (set! h4ccd@h4cc8 (make-record-type-descriptor '&who h4bd5@h4bd0 'h4ccb '#f '#f '#((immutable who)))) (set! h4ccf@h4cca '#f) (set! h4cd1@h4cc9 (make-record-constructor-descriptor h4ccd@h4cc8 h4bd9@h4bd1 h4ccf@h4cca)) (set! h4cd4@p? (record-predicate h4ccd@h4cc8)) (set! h4cd6@make-who-condition (record-constructor h4cd1@h4cc9)) (set! h4cd8@h4cc7 (record-accessor h4ccd@h4cc8 '0)) (set! h4cda@who-condition? (condition-predicate h4ccd@h4cc8)) (set! h4cdc@condition-who (condition-accessor h4ccd@h4cc8 h4cd8@h4cc7)) (set! h4cde@&who-rtd h4ccd@h4cc8) (set! h4ce0@&who-rcd h4cd1@h4cc9) (set! h4ce6@h4ce1 (make-record-type-descriptor '&non-continuable h4c86@h4c81 'h4ce4 '#f '#f '#())) (set! h4ce8@h4ce3 '#f) (set! h4cea@h4ce2 (make-record-constructor-descriptor h4ce6@h4ce1 h4c8a@h4c82 h4ce8@h4ce3)) (set! h4ced@p? (record-predicate h4ce6@h4ce1)) (set! h4cef@make-non-continuable-violation (record-constructor h4cea@h4ce2)) (set! h4cf1@non-continuable-violation? (condition-predicate h4ce6@h4ce1)) (set! h4cf3@&non-continuable-rtd h4ce6@h4ce1) (set! h4cf5@&non-continuable-rcd h4cea@h4ce2) (set! h4cfb@h4cf6 (make-record-type-descriptor '&implementation-restriction h4c86@h4c81 'h4cf9 '#f '#f '#())) (set! h4cfd@h4cf8 '#f) (set! h4cff@h4cf7 (make-record-constructor-descriptor h4cfb@h4cf6 h4c8a@h4c82 h4cfd@h4cf8)) (set! h4d02@p? (record-predicate h4cfb@h4cf6)) (set! h4d04@make-implementation-restriction-violation (record-constructor h4cff@h4cf7)) (set! h4d06@implementation-restriction-violation? (condition-predicate h4cfb@h4cf6)) (set! h4d08@&implementation-restriction-rtd h4cfb@h4cf6) (set! h4d0a@&implementation-restriction-rcd h4cff@h4cf7) (set! h4d10@h4d0b (make-record-type-descriptor '&lexical h4c86@h4c81 'h4d0e '#f '#f '#())) (set! h4d12@h4d0d '#f) (set! h4d14@h4d0c (make-record-constructor-descriptor h4d10@h4d0b h4c8a@h4c82 h4d12@h4d0d)) (set! h4d17@p? (record-predicate h4d10@h4d0b)) (set! h4d19@make-lexical-violation (record-constructor h4d14@h4d0c)) (set! h4d1b@lexical-violation? (condition-predicate h4d10@h4d0b)) (set! h4d1d@&lexical-rtd h4d10@h4d0b) (set! h4d1f@&lexical-rcd h4d14@h4d0c) (set! h4d29@h4d24 (make-record-type-descriptor '&syntax h4c86@h4c81 'h4d27 '#f '#f '#((immutable form) (immutable subform)))) (set! h4d2b@h4d26 '#f) (set! h4d2d@h4d25 (make-record-constructor-descriptor h4d29@h4d24 h4c8a@h4c82 h4d2b@h4d26)) (set! h4d30@p? (record-predicate h4d29@h4d24)) (set! h4d32@make-syntax-violation (record-constructor h4d2d@h4d25)) (set! h4d34@h4d21 (record-accessor h4d29@h4d24 '0)) (set! h4d36@h4d23 (record-accessor h4d29@h4d24 '1)) (set! h4d38@syntax-violation? (condition-predicate h4d29@h4d24)) (set! h4d3a@syntax-violation-form (condition-accessor h4d29@h4d24 h4d34@h4d21)) (set! h4d3c@syntax-violation-subform (condition-accessor h4d29@h4d24 h4d36@h4d23)) (set! h4d3e@&syntax-rtd h4d29@h4d24) (set! h4d40@&syntax-rcd h4d2d@h4d25) (set! h4d46@h4d41 (make-record-type-descriptor '&undefined h4c86@h4c81 'h4d44 '#f '#f '#())) (set! h4d48@h4d43 '#f) (set! h4d4a@h4d42 (make-record-constructor-descriptor h4d46@h4d41 h4c8a@h4c82 h4d48@h4d43)) (set! h4d4d@p? (record-predicate h4d46@h4d41)) (set! h4d4f@make-undefined-violation (record-constructor h4d4a@h4d42)) (set! h4d51@undefined-violation? (condition-predicate h4d46@h4d41)) (set! h4d53@&undefined-rtd h4d46@h4d41) (set! h4d55@&undefined-rcd h4d4a@h4d42) (set! h4d5b@h4d56 (make-record-type-descriptor '&i/o h4c71@h4c6c 'h4d59 '#f '#f '#())) (set! h4d5d@h4d58 '#f) (set! h4d5f@h4d57 (make-record-constructor-descriptor h4d5b@h4d56 h4c75@h4c6d h4d5d@h4d58)) (set! h4d62@p? (record-predicate h4d5b@h4d56)) (set! h4d64@make-i/o-error (record-constructor h4d5f@h4d57)) (set! h4d66@i/o-error? (condition-predicate h4d5b@h4d56)) (set! h4d68@&i/o-rtd h4d5b@h4d56) (set! h4d6a@&i/o-rcd h4d5f@h4d57) (set! h4d70@h4d6b (make-record-type-descriptor '&i/o-read h4d5b@h4d56 'h4d6e '#f '#f '#())) (set! h4d72@h4d6d '#f) (set! h4d74@h4d6c (make-record-constructor-descriptor h4d70@h4d6b h4d5f@h4d57 h4d72@h4d6d)) (set! h4d77@p? (record-predicate h4d70@h4d6b)) (set! h4d79@make-i/o-read-error (record-constructor h4d74@h4d6c)) (set! h4d7b@i/o-read-error? (condition-predicate h4d70@h4d6b)) (set! h4d7d@&i/o-read-rtd h4d70@h4d6b) (set! h4d7f@&i/o-read-rcd h4d74@h4d6c) (set! h4d85@h4d80 (make-record-type-descriptor '&i/o-write h4d5b@h4d56 'h4d83 '#f '#f '#())) (set! h4d87@h4d82 '#f) (set! h4d89@h4d81 (make-record-constructor-descriptor h4d85@h4d80 h4d5f@h4d57 h4d87@h4d82)) (set! h4d8c@p? (record-predicate h4d85@h4d80)) (set! h4d8e@make-i/o-write-error (record-constructor h4d89@h4d81)) (set! h4d90@i/o-write-error? (condition-predicate h4d85@h4d80)) (set! h4d92@&i/o-write-rtd h4d85@h4d80) (set! h4d94@&i/o-write-rcd h4d89@h4d81) (set! h4d9c@h4d97 (make-record-type-descriptor '&i/o-invalid-position h4d5b@h4d56 'h4d9a '#f '#f '#((immutable position)))) (set! h4d9e@h4d99 '#f) (set! h4da0@h4d98 (make-record-constructor-descriptor h4d9c@h4d97 h4d5f@h4d57 h4d9e@h4d99)) (set! h4da3@p? (record-predicate h4d9c@h4d97)) (set! h4da5@make-i/o-invalid-position-error (record-constructor h4da0@h4d98)) (set! h4da7@h4d96 (record-accessor h4d9c@h4d97 '0)) (set! h4da9@i/o-invalid-position-error? (condition-predicate h4d9c@h4d97)) (set! h4dab@i/o-error-position (condition-accessor h4d9c@h4d97 h4da7@h4d96)) (set! h4dad@&i/o-invalid-position-rtd h4d9c@h4d97) (set! h4daf@&i/o-invalid-position-rcd h4da0@h4d98) (set! h4db7@h4db2 (make-record-type-descriptor '&i/o-filename h4d5b@h4d56 'h4db5 '#f '#f '#((immutable filename)))) (set! h4db9@h4db4 '#f) (set! h4dbb@h4db3 (make-record-constructor-descriptor h4db7@h4db2 h4d5f@h4d57 h4db9@h4db4)) (set! h4dbe@p? (record-predicate h4db7@h4db2)) (set! h4dc0@make-i/o-filename-error (record-constructor h4dbb@h4db3)) (set! h4dc2@h4db1 (record-accessor h4db7@h4db2 '0)) (set! h4dc4@i/o-filename-error? (condition-predicate h4db7@h4db2)) (set! h4dc6@i/o-error-filename (condition-accessor h4db7@h4db2 h4dc2@h4db1)) (set! h4dc8@&i/o-filename-rtd h4db7@h4db2) (set! h4dca@&i/o-filename-rcd h4dbb@h4db3) (set! h4dd0@h4dcb (make-record-type-descriptor '&i/o-file-protection h4db7@h4db2 'h4dce '#f '#f '#())) (set! h4dd2@h4dcd '#f) (set! h4dd4@h4dcc (make-record-constructor-descriptor h4dd0@h4dcb h4dbb@h4db3 h4dd2@h4dcd)) (set! h4dd7@p? (record-predicate h4dd0@h4dcb)) (set! h4dd9@make-i/o-file-protection-error (record-constructor h4dd4@h4dcc)) (set! h4ddb@i/o-file-protection-error? (condition-predicate h4dd0@h4dcb)) (set! h4ddd@&i/o-file-protection-rtd h4dd0@h4dcb) (set! h4ddf@&i/o-file-protection-rcd h4dd4@h4dcc) (set! h4de5@h4de0 (make-record-type-descriptor '&i/o-file-is-read-only h4dd0@h4dcb 'h4de3 '#f '#f '#())) (set! h4de7@h4de2 '#f) (set! h4de9@h4de1 (make-record-constructor-descriptor h4de5@h4de0 h4dd4@h4dcc h4de7@h4de2)) (set! h4dec@p? (record-predicate h4de5@h4de0)) (set! h4dee@make-i/o-file-is-read-only-error (record-constructor h4de9@h4de1)) (set! h4df0@i/o-file-is-read-only-error? (condition-predicate h4de5@h4de0)) (set! h4df2@&i/o-file-is-read-only-rtd h4de5@h4de0) (set! h4df4@&i/o-file-is-read-only-rcd h4de9@h4de1) (set! h4dfa@h4df5 (make-record-type-descriptor '&i/o-file-already-exists h4db7@h4db2 'h4df8 '#f '#f '#())) (set! h4dfc@h4df7 '#f) (set! h4dfe@h4df6 (make-record-constructor-descriptor h4dfa@h4df5 h4dbb@h4db3 h4dfc@h4df7)) (set! h4e01@p? (record-predicate h4dfa@h4df5)) (set! h4e03@make-i/o-file-already-exists-error (record-constructor h4dfe@h4df6)) (set! h4e05@i/o-file-already-exists-error? (condition-predicate h4dfa@h4df5)) (set! h4e07@&i/o-file-already-exists-rtd h4dfa@h4df5) (set! h4e09@&i/o-file-already-exists-rcd h4dfe@h4df6) (set! h4e0f@h4e0a (make-record-type-descriptor '&i/o-file-does-not-exist h4db7@h4db2 'h4e0d '#f '#f '#())) (set! h4e11@h4e0c '#f) (set! h4e13@h4e0b (make-record-constructor-descriptor h4e0f@h4e0a h4dbb@h4db3 h4e11@h4e0c)) (set! h4e16@p? (record-predicate h4e0f@h4e0a)) (set! h4e18@make-i/o-file-does-not-exist-error (record-constructor h4e13@h4e0b)) (set! h4e1a@i/o-file-does-not-exist-error? (condition-predicate h4e0f@h4e0a)) (set! h4e1c@&i/o-file-does-not-exist-rtd h4e0f@h4e0a) (set! h4e1e@&i/o-file-does-not-exist-rcd h4e13@h4e0b) (set! h4e26@h4e21 (make-record-type-descriptor '&i/o-port h4d5b@h4d56 'h4e24 '#f '#f '#((immutable port)))) (set! h4e28@h4e23 '#f) (set! h4e2a@h4e22 (make-record-constructor-descriptor h4e26@h4e21 h4d5f@h4d57 h4e28@h4e23)) (set! h4e2d@p? (record-predicate h4e26@h4e21)) (set! h4e2f@make-i/o-port-error (record-constructor h4e2a@h4e22)) (set! h4e31@h4e20 (record-accessor h4e26@h4e21 '0)) (set! h4e33@i/o-port-error? (condition-predicate h4e26@h4e21)) (set! h4e35@i/o-error-port (condition-accessor h4e26@h4e21 h4e31@h4e20)) (set! h4e37@&i/o-port-rtd h4e26@h4e21) (set! h4e39@&i/o-port-rcd h4e2a@h4e22) (set! h4e3f@h4e3a (make-record-type-descriptor '&i/o-decoding h4e26@h4e21 'h4e3d '#f '#f '#())) (set! h4e41@h4e3c '#f) (set! h4e43@h4e3b (make-record-constructor-descriptor h4e3f@h4e3a h4e2a@h4e22 h4e41@h4e3c)) (set! h4e46@p? (record-predicate h4e3f@h4e3a)) (set! h4e48@make-i/o-decoding-error (record-constructor h4e43@h4e3b)) (set! h4e4a@i/o-decoding-error? (condition-predicate h4e3f@h4e3a)) (set! h4e4c@&i/o-decoding-rtd h4e3f@h4e3a) (set! h4e4e@&i/o-decoding-rcd h4e43@h4e3b) (set! h4e56@h4e51 (make-record-type-descriptor '&i/o-encoding h4e26@h4e21 'h4e54 '#f '#f '#((immutable char)))) (set! h4e58@h4e53 '#f) (set! h4e5a@h4e52 (make-record-constructor-descriptor h4e56@h4e51 h4e2a@h4e22 h4e58@h4e53)) (set! h4e5d@p? (record-predicate h4e56@h4e51)) (set! h4e5f@make-i/o-encoding-error (record-constructor h4e5a@h4e52)) (set! h4e61@h4e50 (record-accessor h4e56@h4e51 '0)) (set! h4e63@i/o-encoding-error? (condition-predicate h4e56@h4e51)) (set! h4e65@i/o-encoding-error-char (condition-accessor h4e56@h4e51 h4e61@h4e50)) (set! h4e67@&i/o-encoding-rtd h4e56@h4e51) (set! h4e69@&i/o-encoding-rcd h4e5a@h4e52) (set! h4e6f@h4e6a (make-record-type-descriptor '&no-infinities h4cfb@h4cf6 'h4e6d '#f '#f '#())) (set! h4e71@h4e6c '#f) (set! h4e73@h4e6b (make-record-constructor-descriptor h4e6f@h4e6a h4cff@h4cf7 h4e71@h4e6c)) (set! h4e76@p? (record-predicate h4e6f@h4e6a)) (set! h4e78@make-no-infinities-violation (record-constructor h4e73@h4e6b)) (set! h4e7a@no-infinities-violation? (condition-predicate h4e6f@h4e6a)) (set! h4e7c@&no-infinities-rtd h4e6f@h4e6a) (set! h4e7e@&no-infinities-rcd h4e73@h4e6b) (set! h4e84@h4e7f (make-record-type-descriptor '&no-nans h4cfb@h4cf6 'h4e82 '#f '#f '#())) (set! h4e86@h4e81 '#f) (set! h4e88@h4e80 (make-record-constructor-descriptor h4e84@h4e7f h4cff@h4cf7 h4e86@h4e81)) (set! h4e8b@p? (record-predicate h4e84@h4e7f)) (set! h4e8d@make-no-nans-violation (record-constructor h4e88@h4e80)) (set! h4e8f@no-nans-violation? (condition-predicate h4e84@h4e7f)) (set! h4e91@&no-nans-rtd h4e84@h4e7f) (set! h4e93@&no-nans-rcd h4e88@h4e80) (begin (set! h4f84@h4e93@&no-nans-rcd h4e93@&no-nans-rcd) (set! h4f83@h4e91@&no-nans-rtd h4e91@&no-nans-rtd) (set! h4f82@h4e8f@no-nans-violation? h4e8f@no-nans-violation?) (set! h4f81@h4e8d@make-no-nans-violation h4e8d@make-no-nans-violation) (set! h4f80@h4e8b@p? h4e8b@p?) (set! h4f7f@h4e88@h4e80 h4e88@h4e80) (set! h4f7e@h4e86@h4e81 h4e86@h4e81) (set! h4f7d@h4e84@h4e7f h4e84@h4e7f) (set! h4f7c@h4e7e@&no-infinities-rcd h4e7e@&no-infinities-rcd) (set! h4f7b@h4e7c@&no-infinities-rtd h4e7c@&no-infinities-rtd) (set! h4f7a@h4e7a@no-infinities-violation? h4e7a@no-infinities-violation?) (set! h4f79@h4e78@make-no-infinities-violation h4e78@make-no-infinities-violation) (set! h4f78@h4e76@p? h4e76@p?) (set! h4f77@h4e73@h4e6b h4e73@h4e6b) (set! h4f76@h4e71@h4e6c h4e71@h4e6c) (set! h4f75@h4e6f@h4e6a h4e6f@h4e6a) (set! h4f74@h4e69@&i/o-encoding-rcd h4e69@&i/o-encoding-rcd) (set! h4f73@h4e67@&i/o-encoding-rtd h4e67@&i/o-encoding-rtd) (set! h4f72@h4e65@i/o-encoding-error-char h4e65@i/o-encoding-error-char) (set! h4f71@h4e63@i/o-encoding-error? h4e63@i/o-encoding-error?) (set! h4f70@h4e61@h4e50 h4e61@h4e50) (set! h4f6f@h4e5f@make-i/o-encoding-error h4e5f@make-i/o-encoding-error) (set! h4f6e@h4e5d@p? h4e5d@p?) (set! h4f6d@h4e5a@h4e52 h4e5a@h4e52) (set! h4f6c@h4e58@h4e53 h4e58@h4e53) (set! h4f6b@h4e56@h4e51 h4e56@h4e51) (set! h4f6a@h4e4e@&i/o-decoding-rcd h4e4e@&i/o-decoding-rcd) (set! h4f69@h4e4c@&i/o-decoding-rtd h4e4c@&i/o-decoding-rtd) (set! h4f68@h4e4a@i/o-decoding-error? h4e4a@i/o-decoding-error?) (set! h4f67@h4e48@make-i/o-decoding-error h4e48@make-i/o-decoding-error) (set! h4f66@h4e46@p? h4e46@p?) (set! h4f65@h4e43@h4e3b h4e43@h4e3b) (set! h4f64@h4e41@h4e3c h4e41@h4e3c) (set! h4f63@h4e3f@h4e3a h4e3f@h4e3a) (set! h4f62@h4e39@&i/o-port-rcd h4e39@&i/o-port-rcd) (set! h4f61@h4e37@&i/o-port-rtd h4e37@&i/o-port-rtd) (set! h4f60@h4e35@i/o-error-port h4e35@i/o-error-port) (set! h4f5f@h4e33@i/o-port-error? h4e33@i/o-port-error?) (set! h4f5e@h4e31@h4e20 h4e31@h4e20) (set! h4f5d@h4e2f@make-i/o-port-error h4e2f@make-i/o-port-error) (set! h4f5c@h4e2d@p? h4e2d@p?) (set! h4f5b@h4e2a@h4e22 h4e2a@h4e22) (set! h4f5a@h4e28@h4e23 h4e28@h4e23) (set! h4f59@h4e26@h4e21 h4e26@h4e21) (set! h4f58@h4e1e@&i/o-file-does-not-exist-rcd h4e1e@&i/o-file-does-not-exist-rcd) (set! h4f57@h4e1c@&i/o-file-does-not-exist-rtd h4e1c@&i/o-file-does-not-exist-rtd) (set! h4f56@h4e1a@i/o-file-does-not-exist-error? h4e1a@i/o-file-does-not-exist-error?) (set! h4f55@h4e18@make-i/o-file-does-not-exist-error h4e18@make-i/o-file-does-not-exist-error) (set! h4f54@h4e16@p? h4e16@p?) (set! h4f53@h4e13@h4e0b h4e13@h4e0b) (set! h4f52@h4e11@h4e0c h4e11@h4e0c) (set! h4f51@h4e0f@h4e0a h4e0f@h4e0a) (set! h4f50@h4e09@&i/o-file-already-exists-rcd h4e09@&i/o-file-already-exists-rcd) (set! h4f4f@h4e07@&i/o-file-already-exists-rtd h4e07@&i/o-file-already-exists-rtd) (set! h4f4e@h4e05@i/o-file-already-exists-error? h4e05@i/o-file-already-exists-error?) (set! h4f4d@h4e03@make-i/o-file-already-exists-error h4e03@make-i/o-file-already-exists-error) (set! h4f4c@h4e01@p? h4e01@p?) (set! h4f4b@h4dfe@h4df6 h4dfe@h4df6) (set! h4f4a@h4dfc@h4df7 h4dfc@h4df7) (set! h4f49@h4dfa@h4df5 h4dfa@h4df5) (set! h4f48@h4df4@&i/o-file-is-read-only-rcd h4df4@&i/o-file-is-read-only-rcd) (set! h4f47@h4df2@&i/o-file-is-read-only-rtd h4df2@&i/o-file-is-read-only-rtd) (set! h4f46@h4df0@i/o-file-is-read-only-error? h4df0@i/o-file-is-read-only-error?) (set! h4f45@h4dee@make-i/o-file-is-read-only-error h4dee@make-i/o-file-is-read-only-error) (set! h4f44@h4dec@p? h4dec@p?) (set! h4f43@h4de9@h4de1 h4de9@h4de1) (set! h4f42@h4de7@h4de2 h4de7@h4de2) (set! h4f41@h4de5@h4de0 h4de5@h4de0) (set! h4f40@h4ddf@&i/o-file-protection-rcd h4ddf@&i/o-file-protection-rcd) (set! h4f3f@h4ddd@&i/o-file-protection-rtd h4ddd@&i/o-file-protection-rtd) (set! h4f3e@h4ddb@i/o-file-protection-error? h4ddb@i/o-file-protection-error?) (set! h4f3d@h4dd9@make-i/o-file-protection-error h4dd9@make-i/o-file-protection-error) (set! h4f3c@h4dd7@p? h4dd7@p?) (set! h4f3b@h4dd4@h4dcc h4dd4@h4dcc) (set! h4f3a@h4dd2@h4dcd h4dd2@h4dcd) (set! h4f39@h4dd0@h4dcb h4dd0@h4dcb) (set! h4f38@h4dca@&i/o-filename-rcd h4dca@&i/o-filename-rcd) (set! h4f37@h4dc8@&i/o-filename-rtd h4dc8@&i/o-filename-rtd) (set! h4f36@h4dc6@i/o-error-filename h4dc6@i/o-error-filename) (set! h4f35@h4dc4@i/o-filename-error? h4dc4@i/o-filename-error?) (set! h4f34@h4dc2@h4db1 h4dc2@h4db1) (set! h4f33@h4dc0@make-i/o-filename-error h4dc0@make-i/o-filename-error) (set! h4f32@h4dbe@p? h4dbe@p?) (set! h4f31@h4dbb@h4db3 h4dbb@h4db3) (set! h4f30@h4db9@h4db4 h4db9@h4db4) (set! h4f2f@h4db7@h4db2 h4db7@h4db2) (set! h4f2e@h4daf@&i/o-invalid-position-rcd h4daf@&i/o-invalid-position-rcd) (set! h4f2d@h4dad@&i/o-invalid-position-rtd h4dad@&i/o-invalid-position-rtd) (set! h4f2c@h4dab@i/o-error-position h4dab@i/o-error-position) (set! h4f2b@h4da9@i/o-invalid-position-error? h4da9@i/o-invalid-position-error?) (set! h4f2a@h4da7@h4d96 h4da7@h4d96) (set! h4f29@h4da5@make-i/o-invalid-position-error h4da5@make-i/o-invalid-position-error) (set! h4f28@h4da3@p? h4da3@p?) (set! h4f27@h4da0@h4d98 h4da0@h4d98) (set! h4f26@h4d9e@h4d99 h4d9e@h4d99) (set! h4f25@h4d9c@h4d97 h4d9c@h4d97) (set! h4f24@h4d94@&i/o-write-rcd h4d94@&i/o-write-rcd) (set! h4f23@h4d92@&i/o-write-rtd h4d92@&i/o-write-rtd) (set! h4f22@h4d90@i/o-write-error? h4d90@i/o-write-error?) (set! h4f21@h4d8e@make-i/o-write-error h4d8e@make-i/o-write-error) (set! h4f20@h4d8c@p? h4d8c@p?) (set! h4f1f@h4d89@h4d81 h4d89@h4d81) (set! h4f1e@h4d87@h4d82 h4d87@h4d82) (set! h4f1d@h4d85@h4d80 h4d85@h4d80) (set! h4f1c@h4d7f@&i/o-read-rcd h4d7f@&i/o-read-rcd) (set! h4f1b@h4d7d@&i/o-read-rtd h4d7d@&i/o-read-rtd) (set! h4f1a@h4d7b@i/o-read-error? h4d7b@i/o-read-error?) (set! h4f19@h4d79@make-i/o-read-error h4d79@make-i/o-read-error) (set! h4f18@h4d77@p? h4d77@p?) (set! h4f17@h4d74@h4d6c h4d74@h4d6c) (set! h4f16@h4d72@h4d6d h4d72@h4d6d) (set! h4f15@h4d70@h4d6b h4d70@h4d6b) (set! h4f14@h4d6a@&i/o-rcd h4d6a@&i/o-rcd) (set! h4f13@h4d68@&i/o-rtd h4d68@&i/o-rtd) (set! h4f12@h4d66@i/o-error? h4d66@i/o-error?) (set! h4f11@h4d64@make-i/o-error h4d64@make-i/o-error) (set! h4f10@h4d62@p? h4d62@p?) (set! h4f0f@h4d5f@h4d57 h4d5f@h4d57) (set! h4f0e@h4d5d@h4d58 h4d5d@h4d58) (set! h4f0d@h4d5b@h4d56 h4d5b@h4d56) (set! h4f0c@h4d55@&undefined-rcd h4d55@&undefined-rcd) (set! h4f0b@h4d53@&undefined-rtd h4d53@&undefined-rtd) (set! h4f0a@h4d51@undefined-violation? h4d51@undefined-violation?) (set! h4f09@h4d4f@make-undefined-violation h4d4f@make-undefined-violation) (set! h4f08@h4d4d@p? h4d4d@p?) (set! h4f07@h4d4a@h4d42 h4d4a@h4d42) (set! h4f06@h4d48@h4d43 h4d48@h4d43) (set! h4f05@h4d46@h4d41 h4d46@h4d41) (set! h4f04@h4d40@&syntax-rcd h4d40@&syntax-rcd) (set! h4f03@h4d3e@&syntax-rtd h4d3e@&syntax-rtd) (set! h4f02@h4d3c@syntax-violation-subform h4d3c@syntax-violation-subform) (set! h4f01@h4d3a@syntax-violation-form h4d3a@syntax-violation-form) (set! h4f00@h4d38@syntax-violation? h4d38@syntax-violation?) (set! h4eff@h4d36@h4d23 h4d36@h4d23) (set! h4efe@h4d34@h4d21 h4d34@h4d21) (set! h4efd@h4d32@make-syntax-violation h4d32@make-syntax-violation) (set! h4efc@h4d30@p? h4d30@p?) (set! h4efb@h4d2d@h4d25 h4d2d@h4d25) (set! h4efa@h4d2b@h4d26 h4d2b@h4d26) (set! h4ef9@h4d29@h4d24 h4d29@h4d24) (set! h4ef8@h4d1f@&lexical-rcd h4d1f@&lexical-rcd) (set! h4ef7@h4d1d@&lexical-rtd h4d1d@&lexical-rtd) (set! h4ef6@h4d1b@lexical-violation? h4d1b@lexical-violation?) (set! h4ef5@h4d19@make-lexical-violation h4d19@make-lexical-violation) (set! h4ef4@h4d17@p? h4d17@p?) (set! h4ef3@h4d14@h4d0c h4d14@h4d0c) (set! h4ef2@h4d12@h4d0d h4d12@h4d0d) (set! h4ef1@h4d10@h4d0b h4d10@h4d0b) (set! h4ef0@h4d0a@&implementation-restriction-rcd h4d0a@&implementation-restriction-rcd) (set! h4eef@h4d08@&implementation-restriction-rtd h4d08@&implementation-restriction-rtd) (set! h4eee@h4d06@implementation-restriction-violation? h4d06@implementation-restriction-violation?) (set! h4eed@h4d04@make-implementation-restriction-violation h4d04@make-implementation-restriction-violation) (set! h4eec@h4d02@p? h4d02@p?) (set! h4eeb@h4cff@h4cf7 h4cff@h4cf7) (set! h4eea@h4cfd@h4cf8 h4cfd@h4cf8) (set! h4ee9@h4cfb@h4cf6 h4cfb@h4cf6) (set! h4ee8@h4cf5@&non-continuable-rcd h4cf5@&non-continuable-rcd) (set! h4ee7@h4cf3@&non-continuable-rtd h4cf3@&non-continuable-rtd) (set! h4ee6@h4cf1@non-continuable-violation? h4cf1@non-continuable-violation?) (set! h4ee5@h4cef@make-non-continuable-violation h4cef@make-non-continuable-violation) (set! h4ee4@h4ced@p? h4ced@p?) (set! h4ee3@h4cea@h4ce2 h4cea@h4ce2) (set! h4ee2@h4ce8@h4ce3 h4ce8@h4ce3) (set! h4ee1@h4ce6@h4ce1 h4ce6@h4ce1) (set! h4ee0@h4ce0@&who-rcd h4ce0@&who-rcd) (set! h4edf@h4cde@&who-rtd h4cde@&who-rtd) (set! h4ede@h4cdc@condition-who h4cdc@condition-who) (set! h4edd@h4cda@who-condition? h4cda@who-condition?) (set! h4edc@h4cd8@h4cc7 h4cd8@h4cc7) (set! h4edb@h4cd6@make-who-condition h4cd6@make-who-condition) (set! h4eda@h4cd4@p? h4cd4@p?) (set! h4ed9@h4cd1@h4cc9 h4cd1@h4cc9) (set! h4ed8@h4ccf@h4cca h4ccf@h4cca) (set! h4ed7@h4ccd@h4cc8 h4ccd@h4cc8) (set! h4ed6@h4cc5@&irritants-rcd h4cc5@&irritants-rcd) (set! h4ed5@h4cc3@&irritants-rtd h4cc3@&irritants-rtd) (set! h4ed4@h4cc1@condition-irritants h4cc1@condition-irritants) (set! h4ed3@h4cbf@irritants-condition? h4cbf@irritants-condition?) (set! h4ed2@h4cbd@h4cac h4cbd@h4cac) (set! h4ed1@h4cbb@make-irritants-condition h4cbb@make-irritants-condition) (set! h4ed0@h4cb9@p? h4cb9@p?) (set! h4ecf@h4cb6@h4cae h4cb6@h4cae) (set! h4ece@h4cb4@h4caf h4cb4@h4caf) (set! h4ecd@h4cb2@h4cad h4cb2@h4cad) (set! h4ecc@h4caa@&assertion-rcd h4caa@&assertion-rcd) (set! h4ecb@h4ca8@&assertion-rtd h4ca8@&assertion-rtd) (set! h4eca@h4ca6@assertion-violation? h4ca6@assertion-violation?) (set! h4ec9@h4ca4@make-assertion-violation h4ca4@make-assertion-violation) (set! h4ec8@h4ca2@p? h4ca2@p?) (set! h4ec7@h4c9f@h4c97 h4c9f@h4c97) (set! h4ec6@h4c9d@h4c98 h4c9d@h4c98) (set! h4ec5@h4c9b@h4c96 h4c9b@h4c96) (set! h4ec4@h4c95@&violation-rcd h4c95@&violation-rcd) (set! h4ec3@h4c93@&violation-rtd h4c93@&violation-rtd) (set! h4ec2@h4c91@violation? h4c91@violation?) (set! h4ec1@h4c8f@make-violation h4c8f@make-violation) (set! h4ec0@h4c8d@p? h4c8d@p?) (set! h4ebf@h4c8a@h4c82 h4c8a@h4c82) (set! h4ebe@h4c88@h4c83 h4c88@h4c83) (set! h4ebd@h4c86@h4c81 h4c86@h4c81) (set! h4ebc@h4c80@&error-rcd h4c80@&error-rcd) (set! h4ebb@h4c7e@&error-rtd h4c7e@&error-rtd) (set! h4eba@h4c7c@error? h4c7c@error?) (set! h4eb9@h4c7a@make-error h4c7a@make-error) (set! h4eb8@h4c78@p? h4c78@p?) (set! h4eb7@h4c75@h4c6d h4c75@h4c6d) (set! h4eb6@h4c73@h4c6e h4c73@h4c6e) (set! h4eb5@h4c71@h4c6c h4c71@h4c6c) (set! h4eb4@h4c6b@&serious-rcd h4c6b@&serious-rcd) (set! h4eb3@h4c69@&serious-rtd h4c69@&serious-rtd) (set! h4eb2@h4c67@serious-condition? h4c67@serious-condition?) (set! h4eb1@h4c65@make-serious-condition h4c65@make-serious-condition) (set! h4eb0@h4c63@p? h4c63@p?) (set! h4eaf@h4c60@h4c58 h4c60@h4c58) (set! h4eae@h4c5e@h4c59 h4c5e@h4c59) (set! h4ead@h4c5c@h4c57 h4c5c@h4c57) (set! h4eac@h4c56@&warning-rcd h4c56@&warning-rcd) (set! h4eab@h4c54@&warning-rtd h4c54@&warning-rtd) (set! h4eaa@h4c52@warning? h4c52@warning?) (set! h4ea9@h4c50@make-warning h4c50@make-warning) (set! h4ea8@h4c4e@p? h4c4e@p?) (set! h4ea7@h4c4b@h4c43 h4c4b@h4c43) (set! h4ea6@h4c49@h4c44 h4c49@h4c44) (set! h4ea5@h4c47@h4c42 h4c47@h4c42) (set! h4ea4@h4c41@&message-rcd h4c41@&message-rcd) (set! h4ea3@h4c3f@&message-rtd h4c3f@&message-rtd) (set! h4ea2@h4c3d@condition-message h4c3d@condition-message) (set! h4ea1@h4c3b@message-condition? h4c3b@message-condition?) (set! h4ea0@h4c39@h4c28 h4c39@h4c28) (set! h4e9f@h4c37@make-message-condition h4c37@make-message-condition) (set! h4e9e@h4c35@p? h4c35@p?) (set! h4e9d@h4c32@h4c2a h4c32@h4c2a) (set! h4e9c@h4c30@h4c2b h4c30@h4c2b) (set! h4e9b@h4c2e@h4c29 h4c2e@h4c29) (set! h4e9a@h4be2@&condition-rcd h4be2@&condition-rcd) (set! h4e99@h4be0@&condition-rtd h4be0@&condition-rtd) (set! h4e98@h4bde@make-&condition h4bde@make-&condition) (set! h4e97@h4bdc@&condition? h4bdc@&condition?) (set! h4e96@h4bd9@h4bd1 h4bd9@h4bd1) (set! h4e95@h4bd7@h4bd2 h4bd7@h4bd2) (set! h4e94@h4bd5@h4bd0 h4bd5@h4bd0)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (h2a13@h29c8@current-primitive-locations (lambda (h5400@x) ((lambda (h5402@t) (if h5402@t (cdr h5402@t) '#f)) (assq h5400@x '((&no-nans-rcd . h4f84@h4e93@&no-nans-rcd) (&no-nans-rtd . h4f83@h4e91@&no-nans-rtd) (&no-infinities-rcd . h4f7c@h4e7e@&no-infinities-rcd) (&no-infinities-rtd . h4f7b@h4e7c@&no-infinities-rtd) (&i/o-encoding-rcd . h4f74@h4e69@&i/o-encoding-rcd) (&i/o-encoding-rtd . h4f73@h4e67@&i/o-encoding-rtd) (&i/o-decoding-rcd . h4f6a@h4e4e@&i/o-decoding-rcd) (&i/o-decoding-rtd . h4f69@h4e4c@&i/o-decoding-rtd) (&i/o-port-rcd . h4f62@h4e39@&i/o-port-rcd) (&i/o-port-rtd . h4f61@h4e37@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . h4f58@h4e1e@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . h4f57@h4e1c@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . h4f50@h4e09@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . h4f4f@h4e07@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . h4f48@h4df4@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . h4f47@h4df2@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . h4f40@h4ddf@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . h4f3f@h4ddd@&i/o-file-protection-rtd) (&i/o-filename-rcd . h4f38@h4dca@&i/o-filename-rcd) (&i/o-filename-rtd . h4f37@h4dc8@&i/o-filename-rtd) (&i/o-invalid-position-rcd . h4f2e@h4daf@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . h4f2d@h4dad@&i/o-invalid-position-rtd) (&i/o-write-rcd . h4f24@h4d94@&i/o-write-rcd) (&i/o-write-rtd . h4f23@h4d92@&i/o-write-rtd) (&i/o-read-rcd . h4f1c@h4d7f@&i/o-read-rcd) (&i/o-read-rtd . h4f1b@h4d7d@&i/o-read-rtd) (&i/o-rcd . h4f14@h4d6a@&i/o-rcd) (&i/o-rtd . h4f13@h4d68@&i/o-rtd) (&undefined-rcd . h4f0c@h4d55@&undefined-rcd) (&undefined-rtd . h4f0b@h4d53@&undefined-rtd) (&syntax-rcd . h4f04@h4d40@&syntax-rcd) (&syntax-rtd . h4f03@h4d3e@&syntax-rtd) (&lexical-rcd . h4ef8@h4d1f@&lexical-rcd) (&lexical-rtd . h4ef7@h4d1d@&lexical-rtd) (&implementation-restriction-rcd . h4ef0@h4d0a@&implementation-restriction-rcd) (&implementation-restriction-rtd . h4eef@h4d08@&implementation-restriction-rtd) (&non-continuable-rcd . h4ee8@h4cf5@&non-continuable-rcd) (&non-continuable-rtd . h4ee7@h4cf3@&non-continuable-rtd) (&who-rcd . h4ee0@h4ce0@&who-rcd) (&who-rtd . h4edf@h4cde@&who-rtd) (&irritants-rcd . h4ed6@h4cc5@&irritants-rcd) (&irritants-rtd . h4ed5@h4cc3@&irritants-rtd) (&assertion-rcd . h4ecc@h4caa@&assertion-rcd) (&assertion-rtd . h4ecb@h4ca8@&assertion-rtd) (&violation-rcd . h4ec4@h4c95@&violation-rcd) (&violation-rtd . h4ec3@h4c93@&violation-rtd) (&error-rcd . h4ebc@h4c80@&error-rcd) (&error-rtd . h4ebb@h4c7e@&error-rtd) (&serious-rcd . h4eb4@h4c6b@&serious-rcd) (&serious-rtd . h4eb3@h4c69@&serious-rtd) (&warning-rcd . h4eac@h4c56@&warning-rcd) (&warning-rtd . h4eab@h4c54@&warning-rtd) (&message-rcd . h4ea4@h4c41@&message-rcd) (&message-rtd . h4ea3@h4c3f@&message-rtd) (&condition-rcd . h4e9a@h4be2@&condition-rcd) (&condition-rtd . h4e99@h4be0@&condition-rtd) (syntax-error . h4bc2@h3130@syntax-error) (syntax-dispatch . h4b5d@h3066@syntax-dispatch) (load . h50b5@h4fa0@load) (interaction-environment . h4bca@h3140@interaction-environment) (library-path . h2c7f@h2ab0@library-path) (make-parameter . h29c1@h28bd@make-parameter) (make-variable-transformer . h4b1b@h2e93@make-variable-transformer) (identifier? . h4bc5@h3136@identifier?) (generate-temporaries . h4bbb@h3122@generate-temporaries) (free-identifier=? . h4bbc@h3124@free-identifier=?) (syntax->datum . h4bc7@h313a@syntax->datum) (datum->syntax . h4bc6@h3138@datum->syntax) (bound-identifier=? . h4bbd@h3126@bound-identifier=?) (make-i/o-write-error . h4f21@h4d8e@make-i/o-write-error) (make-i/o-read-error . h4f19@h4d79@make-i/o-read-error) (make-i/o-port-error . h4f5d@h4e2f@make-i/o-port-error) (make-i/o-invalid-position-error . h4f29@h4da5@make-i/o-invalid-position-error) (make-i/o-filename-error . h4f33@h4dc0@make-i/o-filename-error) (make-i/o-file-protection-error . h4f3d@h4dd9@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . h4f45@h4dee@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . h4f55@h4e18@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . h4f4d@h4e03@make-i/o-file-already-exists-error) (make-i/o-error . h4f11@h4d64@make-i/o-error) (make-i/o-encoding-error . h4f6f@h4e5f@make-i/o-encoding-error) (make-i/o-decoding-error . h4f67@h4e48@make-i/o-decoding-error) (i/o-write-error? . h4f22@h4d90@i/o-write-error?) (i/o-read-error? . h4f1a@h4d7b@i/o-read-error?) (i/o-port-error? . h4f5f@h4e33@i/o-port-error?) (i/o-invalid-position-error? . h4f2b@h4da9@i/o-invalid-position-error?) (i/o-filename-error? . h4f35@h4dc4@i/o-filename-error?) (i/o-file-protection-error? . h4f3e@h4ddb@i/o-file-protection-error?) (i/o-file-is-read-only-error? . h4f46@h4df0@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . h4f56@h4e1a@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . h4f4e@h4e05@i/o-file-already-exists-error?) (i/o-error? . h4f12@h4d66@i/o-error?) (i/o-error-position . h4f2c@h4dab@i/o-error-position) (i/o-error-port . h4f60@h4e35@i/o-error-port) (i/o-error-filename . h4f36@h4dc6@i/o-error-filename) (i/o-encoding-error? . h4f71@h4e63@i/o-encoding-error?) (i/o-encoding-error-char . h4f72@h4e65@i/o-encoding-error-char) (i/o-decoding-error? . h4f68@h4e4a@i/o-decoding-error?) (scheme-report-environment . h4bb2@h3110@scheme-report-environment) (null-environment . h4bb1@h310e@null-environment) (command-line . h50b2@h4f9a@command-line) (eval . h4bb4@h3114@eval) (environment . h4bb0@h310c@environment) (who-condition? . h4edd@h4cda@who-condition?) (warning? . h4eaa@h4c52@warning?) (violation? . h4ec2@h4c91@violation?) (undefined-violation? . h4f0a@h4d51@undefined-violation?) (syntax-violation? . h4f00@h4d38@syntax-violation?) (syntax-violation-subform . h4f02@h4d3c@syntax-violation-subform) (syntax-violation-form . h4f01@h4d3a@syntax-violation-form) (syntax-violation . h4bc4@h3134@syntax-violation) (serious-condition? . h4eb2@h4c67@serious-condition?) (non-continuable-violation? . h4ee6@h4cf1@non-continuable-violation?) (message-condition? . h4ea1@h4c3b@message-condition?) (make-who-condition . h4edb@h4cd6@make-who-condition) (make-warning . h4ea9@h4c50@make-warning) (make-violation . h4ec1@h4c8f@make-violation) (make-undefined-violation . h4f09@h4d4f@make-undefined-violation) (make-syntax-violation . h4efd@h4d32@make-syntax-violation) (make-serious-condition . h4eb1@h4c65@make-serious-condition) (make-non-continuable-violation . h4ee5@h4cef@make-non-continuable-violation) (make-message-condition . h4e9f@h4c37@make-message-condition) (make-lexical-violation . h4ef5@h4d19@make-lexical-violation) (make-irritants-condition . h4ed1@h4cbb@make-irritants-condition) (make-implementation-restriction-violation . h4eed@h4d04@make-implementation-restriction-violation) (make-error . h4eb9@h4c7a@make-error) (make-assertion-violation . h4ec9@h4ca4@make-assertion-violation) (lexical-violation? . h4ef6@h4d1b@lexical-violation?) (irritants-condition? . h4ed3@h4cbf@irritants-condition?) (implementation-restriction-violation? . h4eee@h4d06@implementation-restriction-violation?) (error? . h4eba@h4c7c@error?) (condition-who . h4ede@h4cdc@condition-who) (condition-message . h4ea2@h4c3d@condition-message) (condition-irritants . h4ed4@h4cc1@condition-irritants) (assertion-violation? . h4eca@h4ca6@assertion-violation?) (no-nans-violation? . h4f82@h4e8f@no-nans-violation?) (no-infinities-violation? . h4f7a@h4e7a@no-infinities-violation?) (make-no-nans-violation . h4f81@h4e8d@make-no-nans-violation) (make-no-infinities-violation . h4f79@h4e78@make-no-infinities-violation) (assertion-error . h4bc1@h312e@assertion-error)))))) (h2c8f@h2ad0@install-library 'h53dd '(mosh interaction) '() '() '() '() '((regexp? . h53d5) (alist->eq-hash-table . h53d2) (format . h53cf) (string-split . h53c4) (call-process . h53be) (set-current-directory! . h53ba) (expand-path . h53b9) (current-directory . h53b8) (%spawn . h53b7) (%waitpid . h53b6) (simple-struct-name . h53b5) (simple-struct-set! . h53b4) (simple-struct-ref . h53b3) (make-simple-struct . h53b2) (simple-struct? . h53b1) (pointer-ref-c-int64 . h53b0) (pointer-ref-c-int32 . h53af) (pointer-ref-c-int16 . h53ae) (pointer-ref-c-int8 . h53ad) (pointer-ref-c-uint64 . h53ac) (pointer-ref-c-uint32 . h53ab) (pointer-ref-c-uint16 . h53aa) (pointer-ref-c-uint8 . h53a9) (pointer-set-c-uint64! . h53a8) (pointer-set-c-uint32! . h53a7) (pointer-set-c-uint16! . h53a6) (pointer-set-c-uint8! . h53a5) (pointer-set-c-int64! . h53a4) (pointer-set-c-int32! . h53a3) (pointer-set-c-int16! . h53a2) (pointer-set-c-int8! . h53a1) (pointer-set-c-pointer! . h53a0) (pointer-set-c-double! . h539f) (pointer-set-c-float! . h539e) (pointer-set-c-long-long! . h539d) (pointer-set-c-long! . h539c) (pointer-set-c-int! . h539b) (pointer-set-c-short! . h539a) (pointer-set-c-char! . h5399) (pointer-ref-c-pointer . h5398) (pointer-ref-c-double . h5397) (pointer-ref-c-float . h5396) (pointer-ref-c-unsigned-long-long . h5395) (pointer-ref-c-signed-long-long . h5394) (pointer-ref-c-unsigned-long . h5393) (pointer-ref-c-signed-long . h5392) (pointer-ref-c-unsigned-int . h5391) (pointer-ref-c-signed-int . h5390) (pointer-ref-c-unsigned-short . h538f) (pointer-ref-c-signed-short . h538e) (pointer-ref-c-unsigned-char . h538d) (pointer-ref-c-signed-char . h538c) (pointer->integer . h538b) (integer->pointer . h538a) (pointer? . h5389) (shared-errno . h5388) (%ffi-supported? . h5387) (%ffi-pointer->string . h5386) (%ffi-call->string-or-zero . h5385) (%ffi-call->double . h5384) (%ffi-call->void* . h5383) (%ffi-call->void . h5382) (%ffi-call->char . h5381) (%ffi-call->int . h5380) (%ffi-lookup . h537f) (%ffi-open . h537e) (%fork . h537d) (%pipe . h537c) (p . h537b) (whereis . h5365) (register . h5364) (vm-join! . h5363) (vm-set-value! . h5362) (vm? . h5361) (main-vm? . h5360) (vm-eval . h535f) (vm-self . h535e) (vm-start! . h535d) (make-vm . h535c) (mutex-try-lock! . h535b) (mutex-unlock! . h535a) (mutex-lock! . h5359) (mutex? . h5358) (make-mutex . h5357) (condition-variable-notify-all! . h5356) (condition-variable-notify! . h5355) (condition-variable-wait! . h5354) (make-condition-variable . h5353) (string-upcase . h533c) (string-titlecase . h533b) (string-normalize-nfkd . h533a) (string-normalize-nfkc . h5339) (string-normalize-nfd . h5338) (string-normalize-nfc . h5337) (string-foldcase . h5336) (string-downcase . h5335) (string-ci>? . h5334) (string-ci>=? . h5333) (string-ci=? . h5332) (string-ci<? . h5331) (string-ci<=? . h5330) (char-whitespace? . h532f) (char-upper-case? . h532e) (char-title-case? . h532d) (char-numeric? . h532c) (char-lower-case? . h532b) (char-general-category . h532a) (char-upcase . h5329) (char-titlecase . h5328) (char-foldcase . h5327) (char-downcase . h5326) (char-ci>? . h5325) (char-ci>=? . h5324) (char-ci=? . h5323) (char-ci<? . h5322) (char-ci<=? . h5321) (char-alphabetic? . h5320) (make-variable-transformer . h2e92) (identifier? . h3135) (generate-temporaries . h3121) (free-identifier=? . h3123) (syntax->datum . h3139) (datum->syntax . h3137) (bound-identifier=? . h3125) (record-type-descriptor? . h531f) (record-predicate . h531e) (record-mutator . h531d) (record-constructor . h531c) (record-accessor . h531b) (make-record-type-descriptor . h531a) (make-record-constructor-descriptor . h5319) (record? . h5318) (record-type-uid . h5317) (record-type-sealed? . h5316) (record-type-parent . h5315) (record-type-opaque? . h5314) (record-type-name . h5313) (record-type-generative? . h5312) (record-type-field-names . h5311) (record-rtd . h5310) (record-field-mutable? . h530f) (delete-file . h530e) (file-exists? . h530d) (vector-sort! . h530c) (vector-sort . h530b) (list-sort . h530a) (symbol-hash . h5309) (string-ci-hash . h5308) (string-hash . h5307) (equal-hash . h5306) (hashtable-equivalence-function . h5305) (make-hashtable . h5304) (hashtable-hash-function . h5303) (make-eqv-hashtable . h5302) (make-eq-hashtable . h5301) (hashtable? . h5300) (hashtable-update! . h52ff) (hashtable-size . h52fe) (hashtable-set! . h52fd) (hashtable-ref . h52fc) (hashtable-mutable? . h52fb) (hashtable-keys . h52fa) (hashtable-entries . h52f9) (hashtable-delete! . h52f8) (hashtable-copy . h52f7) (hashtable-contains? . h52f6) (hashtable-clear! . h52f5) (call-with-output-file . h52f4) (call-with-input-file . h52f3) (write-char . h52f2) (write . h52f1) (with-output-to-file . h52f0) (with-input-from-file . h52ef) (read-char . h52ee) (read . h52ed) (peek-char . h52ec) (open-output-file . h52eb) (open-input-file . h52ea) (newline . h52e9) (display . h52e8) (close-output-port . h52e7) (close-input-port . h52e6) (eof-object? . h52e5) (eof-object . h52e4) (current-error-port . h52e3) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (utf-8-codec . h52de) (utf-16-codec . h52dd) (transcoder-error-handling-mode . h52dc) (transcoder-eol-style . h52db) (transcoder-codec . h52da) (transcoded-port . h52d9) (textual-port? . h52d8) (string->bytevector . h52d7) (standard-output-port . h52d6) (standard-input-port . h52d5) (standard-error-port . h52d4) (set-port-position! . h52d3) (put-u8 . h52d2) (put-string . h52d1) (put-datum . h52d0) (put-char . h52cf) (put-bytevector . h52ce) (port? . h52cd) (port-transcoder . h52cc) (port-position . h52cb) (port-has-set-port-position!? . h52ca) (port-has-port-position? . h52c9) (port-eof? . h52c8) (output-port-buffer-mode . h52c7) (open-string-output-port . h52c6) (open-string-input-port . h52c5) (open-file-output-port . h52c4) (open-file-input/output-port . h52c3) (open-file-input-port . h52c2) (open-bytevector-output-port . h52c1) (open-bytevector-input-port . h52c0) (native-transcoder . h52bf) (native-eol-style . h52be) (make-transcoder . h52bd) (latin-1-codec . h52bc) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (make-i/o-encoding-error . h4e5e) (make-i/o-decoding-error . h4e47) (make-custom-textual-output-port . h52bb) (make-custom-textual-input/output-port . h52ba) (make-custom-textual-input-port . h52b9) (make-custom-binary-output-port . h52b8) (make-custom-binary-input/output-port . h52b7) (make-custom-binary-input-port . h52b6) (make-bytevector . h52b5) (lookahead-u8 . h52b4) (lookahead-char . h52b3) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (i/o-encoding-error? . h4e62) (i/o-encoding-error-char . h4e64) (i/o-decoding-error? . h4e49) (get-u8 . h52b2) (get-string-n! . h52b1) (get-string-n . h52b0) (get-string-all . h52af) (get-line . h52ae) (get-datum . h52ad) (get-char . h52ac) (get-bytevector-some . h52ab) (get-bytevector-n! . h52aa) (get-bytevector-n . h52a9) (get-bytevector-all . h52a8) (flush-output-port . h52a7) (close-port . h52a6) (exit . h529e) (command-line . h4f99) (string-fill! . h529d) (string-set! . h529c) (set-cdr! . h529b) (set-car! . h529a) (remove . h5299) (remv . h5298) (remp . h5297) (remq . h5296) (partition . h5295) (memv . h5294) (memq . h5293) (memp . h5292) (member . h5291) (exists . h5290) (for-all . h528f) (fold-right . h528e) (fold-left . h528d) (find . h528c) (filter . h528b) (cons* . h528a) (assv . h5289) (assq . h5288) (assp . h5287) (assoc . h5286) (call-with-string-output-port . h5285) (call-with-port . h5284) (call-with-bytevector-output-port . h5283) (bytevector->string . h5282) (buffer-mode? . h5281) (binary-port? . h5280) (with-exception-handler . h527f) (raise-continuable . h527e) (raise . h527d) (eval . h3113) (environment . h310b) (make-enumeration . h527c) (enum-set=? . h527b) (enum-set-universe . h527a) (enum-set-union . h5279) (enum-set-subset? . h5278) (enum-set-projection . h5277) (enum-set-member? . h5276) (enum-set-intersection . h5275) (enum-set-indexer . h5274) (enum-set-difference . h5273) (enum-set-constructor . h5272) (enum-set-complement . h5271) (enum-set->list . h5270) (who-condition? . h4cd9) (warning? . h4c51) (violation? . h4c90) (undefined-violation? . h4d50) (syntax-violation? . h4d37) (syntax-violation-subform . h4d3b) (syntax-violation-form . h4d39) (syntax-violation . h3133) (simple-conditions . h526f) (serious-condition? . h4c66) (non-continuable-violation? . h4cf0) (message-condition? . h4c3a) (make-who-condition . h4cd5) (make-warning . h4c4f) (make-violation . h4c8e) (make-undefined-violation . h4d4e) (make-syntax-violation . h4d31) (make-serious-condition . h4c64) (make-non-continuable-violation . h4cee) (make-message-condition . h4c36) (make-lexical-violation . h4d18) (make-irritants-condition . h4cba) (make-implementation-restriction-violation . h4d03) (make-error . h4c79) (make-assertion-violation . h4ca3) (lexical-violation? . h4d1a) (irritants-condition? . h4cbe) (implementation-restriction-violation? . h4d05) (error? . h4c7b) (condition-who . h4cdb) (condition-predicate . h526e) (condition-message . h4c3c) (condition-irritants . h4cc0) (condition-accessor . h526d) (condition . h526c) (assertion-violation? . h4ca5) (condition? . h526b) (utf32->string . h526a) (utf16->string . h5269) (utf8->string . h5268) (uint-list->bytevector . h5267) (u8-list->bytevector . h5266) (string->utf8 . h5265) (string->utf32 . h5264) (string->utf16 . h5263) (sint-list->bytevector . h5262) (native-endianness . h5261) (bytevector? . h5260) (bytevector=? . h525f) (bytevector-uint-set! . h525e) (bytevector-uint-ref . h525d) (bytevector-u8-set! . h525c) (bytevector-u8-ref . h525b) (bytevector-u64-set! . h525a) (bytevector-u64-ref . h5259) (bytevector-u64-native-set! . h5258) (bytevector-u64-native-ref . h5257) (bytevector-u32-set! . h5256) (bytevector-u32-ref . h5255) (bytevector-u32-native-set! . h5254) (bytevector-u32-native-ref . h5253) (bytevector-u16-set! . h5252) (bytevector-u16-ref . h5251) (bytevector-u16-native-set! . h5250) (bytevector-u16-native-ref . h524f) (bytevector-sint-set! . h524e) (bytevector-sint-ref . h524d) (bytevector-s8-set! . h524c) (bytevector-s8-ref . h524b) (bytevector-s64-set! . h524a) (bytevector-s64-ref . h5249) (bytevector-s64-native-set! . h5248) (bytevector-s64-native-ref . h5247) (bytevector-s32-set! . h5246) (bytevector-s32-ref . h5245) (bytevector-s32-native-set! . h5244) (bytevector-s32-native-ref . h5243) (bytevector-s16-set! . h5242) (bytevector-s16-ref . h5241) (bytevector-s16-native-set! . h5240) (bytevector-s16-native-ref . h523f) (bytevector-length . h523e) (bytevector-ieee-single-ref . h523d) (bytevector-ieee-single-set! . h523c) (bytevector-ieee-single-native-set! . h523b) (bytevector-ieee-single-native-ref . h523a) (bytevector-ieee-double-set! . h5239) (bytevector-ieee-double-ref . h5238) (bytevector-ieee-double-native-set! . h5237) (bytevector-ieee-double-native-ref . h5236) (bytevector-fill! . h5235) (bytevector-copy! . h5234) (bytevector-copy . h5233) (bytevector->uint-list . h5232) (bytevector->u8-list . h5231) (bytevector->sint-list . h5230) (no-nans-violation? . h4e8e) (no-infinities-violation? . h4e79) (make-no-nans-violation . h4e8c) (make-no-infinities-violation . h4e77) (real->flonum . h522f) (flzero? . h522e) (fltruncate . h522d) (fltan . h522c) (flsqrt . h522b) (flsin . h522a) (flround . h5229) (flpositive? . h5228) (flonum? . h5227) (flodd? . h5226) (flnumerator . h5225) (flnegative? . h5224) (flnan? . h5223) (flmod0 . h5222) (flmod . h5221) (flmin . h5220) (flmax . h521f) (fllog . h521e) (flinteger? . h521d) (flinfinite? . h521c) (flfloor . h521b) (flfinite? . h521a) (flexpt . h5219) (flexp . h5218) (fleven? . h5217) (fldiv0-and-mod0 . h5216) (fldiv0 . h5215) (fldiv-and-mod . h5214) (fldiv . h5213) (fldenominator . h5212) (flcos . h5211) (flceiling . h5210) (flatan . h520f) (flasin . h520e) (flacos . h520d) (flabs . h520c) (fl>? . h520b) (fl>=? . h520a) (fl=? . h5209) (fl<? . h5208) (fl<=? . h5207) (fl/ . h5206) (fl- . h5205) (fl+ . h5204) (fl* . h5203) (fixnum->flonum . h5202) (fxzero? . h5201) (fxxor . h5200) (fxrotate-bit-field . h51ff) (fxreverse-bit-field . h51fe) (fxpositive? . h51fd) (fxodd? . h51fc) (fxnot . h51fb) (fxnegative? . h51fa) (fxmod0 . h51f9) (fxmod . h51f8) (fxmin . h51f7) (fxmax . h51f6) (fxlength . h51f5) (fxior . h51f4) (fxif . h51f3) (fxfirst-bit-set . h51f2) (fxeven? . h51f1) (fxdiv0-and-mod0 . h51f0) (fxdiv0 . h51ef) (fxdiv-and-mod . h51ee) (fxdiv . h51ed) (fxcopy-bit-field . h51ec) (fxcopy-bit . h51eb) (fxbit-set? . h51ea) (fxbit-field . h51e9) (fxbit-count . h51e8) (fxarithmetic-shift-right . h51e7) (fxarithmetic-shift-left . h51e6) (fxarithmetic-shift . h51e5) (fxand . h51e4) (fx>? . h51e3) (fx>=? . h51e2) (fx=? . h51e1) (fx<? . h51e0) (fx<=? . h51df) (fx-/carry . h51de) (fx- . h51dd) (fx+/carry . h51dc) (fx+ . h51db) (fx*/carry . h51da) (fx* . h51d9) (greatest-fixnum . h51d8) (least-fixnum . h51d7) (fixnum-width . h51d6) (fixnum? . h51d5) (bitwise-rotate-bit-field . h51d4) (bitwise-reverse-bit-field . h51d3) (bitwise-length . h51d2) (bitwise-if . h51d1) (bitwise-first-bit-set . h51d0) (bitwise-copy-bit-field . h51cf) (bitwise-copy-bit . h51ce) (bitwise-bit-set? . h51cd) (bitwise-bit-field . h51cc) (bitwise-bit-count . h51cb) (bitwise-xor . h51ca) (bitwise-ior . h51c9) (bitwise-and . h51c8) (bitwise-not . h51c7) (bitwise-arithmetic-shift-right . h51c6) (bitwise-arithmetic-shift-left . h51c5) (bitwise-arithmetic-shift . h51c4) (zero? . h51c3) (vector? . h51c2) (vector-set! . h51c1) (vector-ref . h51c0) (vector-map . h51bf) (vector-length . h51be) (vector-for-each . h51bd) (vector-fill! . h51bc) (vector->list . h51bb) (vector . h51ba) (values . h51b9) (truncate . h51b8) (tan . h51b7) (symbol? . h51b6) (symbol=? . h51b5) (symbol->string . h51b4) (substring . h51b3) (string? . h51b2) (string>? . h51b1) (string>=? . h51b0) (string=? . h51af) (string<? . h51ae) (string<=? . h51ad) (string-ref . h51ac) (string-length . h51ab) (string-for-each . h51aa) (string-copy . h51a9) (string-append . h51a8) (string->symbol . h51a7) (string->number . h51a6) (string->list . h51a5) (string . h51a4) (sqrt . h51a3) (sin . h51a2) (round . h51a1) (reverse . h51a0) (real? . h519f) (real-valued? . h519e) (real-part . h519d) (rationalize . h519c) (rational? . h519b) (rational-valued? . h519a) (procedure? . h5199) (positive? . h5198) (pair? . h5197) (odd? . h5196) (numerator . h5195) (number? . h5194) (number->string . h5193) (null? . h5192) (not . h5191) (negative? . h5190) (nan? . h518f) (min . h518e) (max . h518d) (map . h518c) (make-vector . h518b) (make-string . h518a) (make-rectangular . h5189) (make-polar . h5188) (magnitude . h5187) (log . h5186) (list? . h5185) (list-tail . h5184) (list-ref . h5183) (list->vector . h5182) (list->string . h5181) (list . h5180) (length . h517f) (lcm . h517e) (integer? . h517d) (integer-valued? . h517c) (integer->char . h517b) (infinite? . h517a) (inexact? . h5179) (inexact . h5178) (imag-part . h5177) (gcd . h5176) (for-each . h5175) (floor . h5174) (finite? . h5173) (expt . h5172) (exp . h5171) (exact? . h5170) (exact-integer-sqrt . h516f) (exact . h516e) (even? . h516d) (error . h516c) (eqv? . h516b) (equal? . h516a) (eq? . h5169) (dynamic-wind . h5168) (div0-and-mod0 . h5167) (mod0 . h5166) (div0 . h5165) (div-and-mod . h5164) (mod . h5163) (div . h5162) (denominator . h5161) (cos . h5160) (cons . h515f) (complex? . h515e) (char? . h515d) (char>? . h515c) (char>=? . h515b) (char=? . h515a) (char<? . h5159) (char<=? . h5158) (char->integer . h5157) (ceiling . h5156) (call-with-values . h5155) (call/cc . h5154) (call-with-current-continuation . h5153) (cddddr . h5152) (cdddar . h5151) (cddadr . h5150) (cddaar . h514f) (cdaddr . h514e) (cdadar . h514d) (cdaadr . h514c) (cdaaar . h514b) (cadddr . h514a) (caddar . h5149) (cadadr . h5148) (cadaar . h5147) (caaddr . h5146) (caadar . h5145) (caaadr . h5144) (caaaar . h5143) (cdddr . h5142) (cddar . h5141) (cdadr . h5140) (cdaar . h513f) (caddr . h513e) (cadar . h513d) (caadr . h513c) (caaar . h513b) (cddr . h513a) (cdar . h5139) (cadr . h5138) (caar . h5137) (cdr . h5136) (car . h5135) (boolean? . h5134) (boolean=? . h5133) (atan . h5132) (assertion-violation . h5131) (asin . h5130) (apply . h512f) (append . h512e) (angle . h512d) (acos . h512c) (abs . h512b) (/ . h512a) (* . h5129) (- . h5128) (+ . h5127) (>= . h5126) (> . h5125) (= . h5124) (<= . h5123) (< . h5122) (library . h5121) (&no-nans . h5120) (&no-infinities . h511f) (&i/o-encoding . h511e) (&i/o-decoding . h511d) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113) (&undefined . h5112) (&syntax . h5111) (&lexical . h5110) (&implementation-restriction . h510f) (&non-continuable . h510e) (&who . h510d) (&irritants . h510c) (&assertion . h510b) (&violation . h510a) (&error . h5109) (&serious . h5108) (&warning . h5107) (&message . h5106) (&condition . h5105) (define-condition-type . h5104) (define-enumeration . h5103) (define-record-type . h5102) (parent-rtd . h5101) (nongenerative . h5100) (opaque . h50ff) (sealed . h50fe) (protocol . h50fd) (parent . h50fc) (immutable . h50fb) (mutable . h50fa) (fields . h50f9) (error-handling-mode . h50f8) (file-options . h50f7) (buffer-mode . h50f6) (eol-style . h50f5) (guard . h50f4) (unsyntax-splicing . h50f1) (unsyntax . h50f0) (unquote-splicing . h50ef) (unquote . h50ee) (_ . h50ed) (else . h50ec) (=> . h50eb) (... . h50ea) (assert . h50e9) (endianness . h50e8) (time . h50e6) (do . h50e5) (cond . h50e4) (let* . h50e3) (let . h50e2) (let*-values . h50e1) (let-values . h50e0) (identifier-syntax . h50df) (with-syntax . h50de) (quasisyntax . h50dd) (quasiquote . h50dc) (syntax-rules . h50db) (include . h50da) (record-constructor-descriptor . h50d8) (record-type-descriptor . h50d7) (case . h50d6) (unless . h50d4) (when . h50d3) (or . h50d2) (and . h50d1) (if . h50d0) (letrec* . h50cf) (letrec . h50ce) (case-lambda . h50cc) (lambda . h50cb) (syntax . h50ca) (syntax-case . h50c9) (quote . h50c8) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (import . h50c3) (begin . h50c2) (define-syntax . h50c0) (define . h50bf)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53de '(psyntax null-environment-5) '() '() '() '() '((make-promise . h529f) (unquote-splicing . h50ef) (unquote . h50ee) (_ . h50ed) (else . h50ec) (=> . h50eb) (... . h50ea) (delay . h50e7) (do . h50e5) (cond . h50e4) (let* . h50e3) (let . h50e2) (quasiquote . h50dc) (syntax-rules . h50db) (case . h50d6) (or . h50d2) (and . h50d1) (if . h50d0) (letrec . h50ce) (lambda . h50cb) (quote . h50c8) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (begin . h50c2) (define-syntax . h50c0) (define . h50bf)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53df '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . h5334) (string-ci>=? . h5333) (string-ci=? . h5332) (string-ci<? . h5331) (string-ci<=? . h5330) (char-whitespace? . h532f) (char-upper-case? . h532e) (char-numeric? . h532c) (char-lower-case? . h532b) (char-upcase . h5329) (char-downcase . h5326) (char-ci>? . h5325) (char-ci>=? . h5324) (char-ci=? . h5323) (char-ci<? . h5322) (char-ci<=? . h5321) (char-alphabetic? . h5320) (call-with-output-file . h52f4) (call-with-input-file . h52f3) (write-char . h52f2) (write . h52f1) (with-output-to-file . h52f0) (with-input-from-file . h52ef) (read-char . h52ee) (read . h52ed) (peek-char . h52ec) (open-output-file . h52eb) (open-input-file . h52ea) (newline . h52e9) (display . h52e8) (close-output-port . h52e7) (close-input-port . h52e6) (eof-object . h52e4) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (scheme-report-environment . h310f) (quotient . h52a5) (null-environment . h310d) (remainder . h52a4) (modulo . h52a3) (inexact->exact . h52a2) (force . h52a1) (exact->inexact . h52a0) (make-promise . h529f) (string-fill! . h529d) (string-set! . h529c) (set-cdr! . h529b) (set-car! . h529a) (memv . h5294) (memq . h5293) (member . h5291) (assv . h5289) (assq . h5288) (assoc . h5286) (eval . h3113) (zero? . h51c3) (vector? . h51c2) (vector-set! . h51c1) (vector-ref . h51c0) (vector-length . h51be) (vector-fill! . h51bc) (vector->list . h51bb) (vector . h51ba) (values . h51b9) (truncate . h51b8) (tan . h51b7) (symbol? . h51b6) (symbol->string . h51b4) (substring . h51b3) (string? . h51b2) (string>? . h51b1) (string>=? . h51b0) (string=? . h51af) (string<? . h51ae) (string<=? . h51ad) (string-ref . h51ac) (string-length . h51ab) (string-copy . h51a9) (string-append . h51a8) (string->symbol . h51a7) (string->number . h51a6) (string->list . h51a5) (string . h51a4) (sqrt . h51a3) (sin . h51a2) (round . h51a1) (reverse . h51a0) (real? . h519f) (real-part . h519d) (rationalize . h519c) (rational? . h519b) (procedure? . h5199) (positive? . h5198) (pair? . h5197) (odd? . h5196) (numerator . h5195) (number? . h5194) (number->string . h5193) (not . h5191) (negative? . h5190) (min . h518e) (max . h518d) (map . h518c) (make-vector . h518b) (make-string . h518a) (make-rectangular . h5189) (make-polar . h5188) (magnitude . h5187) (log . h5186) (list? . h5185) (list-tail . h5184) (list-ref . h5183) (list->vector . h5182) (list->string . h5181) (list . h5180) (length . h517f) (lcm . h517e) (integer? . h517d) (integer->char . h517b) (inexact? . h5179) (imag-part . h5177) (gcd . h5176) (for-each . h5175) (floor . h5174) (expt . h5172) (exp . h5171) (exact? . h5170) (even? . h516d) (eqv? . h516b) (equal? . h516a) (eq? . h5169) (dynamic-wind . h5168) (denominator . h5161) (cos . h5160) (cons . h515f) (complex? . h515e) (char? . h515d) (char>? . h515c) (char>=? . h515b) (char=? . h515a) (char<? . h5159) (char<=? . h5158) (char->integer . h5157) (ceiling . h5156) (call-with-values . h5155) (call-with-current-continuation . h5153) (cddddr . h5152) (cdddar . h5151) (cddadr . h5150) (cddaar . h514f) (cdaddr . h514e) (cdadar . h514d) (cdaadr . h514c) (cdaaar . h514b) (cadddr . h514a) (caddar . h5149) (cadadr . h5148) (cadaar . h5147) (caaddr . h5146) (caadar . h5145) (caaadr . h5144) (caaaar . h5143) (cdddr . h5142) (cddar . h5141) (cdadr . h5140) (cdaar . h513f) (caddr . h513e) (cadar . h513d) (caadr . h513c) (caaar . h513b) (cddr . h513a) (cdar . h5139) (cadr . h5138) (caar . h5137) (cdr . h5136) (car . h5135) (boolean? . h5134) (atan . h5132) (asin . h5130) (apply . h512f) (append . h512e) (angle . h512d) (acos . h512c) (abs . h512b) (/ . h512a) (* . h5129) (- . h5128) (+ . h5127) (>= . h5126) (> . h5125) (= . h5124) (<= . h5123) (< . h5122) (unquote-splicing . h50ef) (unquote . h50ee) (else . h50ec) (=> . h50eb) (... . h50ea) (delay . h50e7) (do . h50e5) (cond . h50e4) (let* . h50e3) (let . h50e2) (quasiquote . h50dc) (syntax-rules . h50db) (case . h50d6) (or . h50d2) (and . h50d1) (if . h50d0) (letrec . h50ce) (lambda . h50cb) (quote . h50c8) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (begin . h50c2) (define-syntax . h50c0) (define . h50bf)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e0 '(psyntax modules) '() '() '() '() '((module . h50c1)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e2 '(rnrs) '(6) '() '() '() '((regexp? . h53d5) (string-upcase . h533c) (string-titlecase . h533b) (string-normalize-nfkd . h533a) (string-normalize-nfkc . h5339) (string-normalize-nfd . h5338) (string-normalize-nfc . h5337) (string-foldcase . h5336) (string-downcase . h5335) (string-ci>? . h5334) (string-ci>=? . h5333) (string-ci=? . h5332) (string-ci<? . h5331) (string-ci<=? . h5330) (char-whitespace? . h532f) (char-upper-case? . h532e) (char-title-case? . h532d) (char-numeric? . h532c) (char-lower-case? . h532b) (char-general-category . h532a) (char-upcase . h5329) (char-titlecase . h5328) (char-foldcase . h5327) (char-downcase . h5326) (char-ci>? . h5325) (char-ci>=? . h5324) (char-ci=? . h5323) (char-ci<? . h5322) (char-ci<=? . h5321) (char-alphabetic? . h5320) (make-variable-transformer . h2e92) (identifier? . h3135) (generate-temporaries . h3121) (free-identifier=? . h3123) (syntax->datum . h3139) (datum->syntax . h3137) (bound-identifier=? . h3125) (record-type-descriptor? . h531f) (record-predicate . h531e) (record-mutator . h531d) (record-constructor . h531c) (record-accessor . h531b) (make-record-type-descriptor . h531a) (make-record-constructor-descriptor . h5319) (record? . h5318) (record-type-uid . h5317) (record-type-sealed? . h5316) (record-type-parent . h5315) (record-type-opaque? . h5314) (record-type-name . h5313) (record-type-generative? . h5312) (record-type-field-names . h5311) (record-rtd . h5310) (record-field-mutable? . h530f) (delete-file . h530e) (file-exists? . h530d) (vector-sort! . h530c) (vector-sort . h530b) (list-sort . h530a) (symbol-hash . h5309) (string-ci-hash . h5308) (string-hash . h5307) (equal-hash . h5306) (hashtable-equivalence-function . h5305) (make-hashtable . h5304) (hashtable-hash-function . h5303) (make-eqv-hashtable . h5302) (make-eq-hashtable . h5301) (hashtable? . h5300) (hashtable-update! . h52ff) (hashtable-size . h52fe) (hashtable-set! . h52fd) (hashtable-ref . h52fc) (hashtable-mutable? . h52fb) (hashtable-keys . h52fa) (hashtable-entries . h52f9) (hashtable-delete! . h52f8) (hashtable-copy . h52f7) (hashtable-contains? . h52f6) (hashtable-clear! . h52f5) (call-with-output-file . h52f4) (call-with-input-file . h52f3) (write-char . h52f2) (write . h52f1) (with-output-to-file . h52f0) (with-input-from-file . h52ef) (read-char . h52ee) (read . h52ed) (peek-char . h52ec) (open-output-file . h52eb) (open-input-file . h52ea) (newline . h52e9) (display . h52e8) (close-output-port . h52e7) (close-input-port . h52e6) (eof-object? . h52e5) (eof-object . h52e4) (current-error-port . h52e3) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (utf-8-codec . h52de) (utf-16-codec . h52dd) (transcoder-error-handling-mode . h52dc) (transcoder-eol-style . h52db) (transcoder-codec . h52da) (transcoded-port . h52d9) (textual-port? . h52d8) (string->bytevector . h52d7) (standard-output-port . h52d6) (standard-input-port . h52d5) (standard-error-port . h52d4) (set-port-position! . h52d3) (put-u8 . h52d2) (put-string . h52d1) (put-datum . h52d0) (put-char . h52cf) (put-bytevector . h52ce) (port? . h52cd) (port-transcoder . h52cc) (port-position . h52cb) (port-has-set-port-position!? . h52ca) (port-has-port-position? . h52c9) (port-eof? . h52c8) (output-port-buffer-mode . h52c7) (open-string-output-port . h52c6) (open-string-input-port . h52c5) (open-file-output-port . h52c4) (open-file-input/output-port . h52c3) (open-file-input-port . h52c2) (open-bytevector-output-port . h52c1) (open-bytevector-input-port . h52c0) (native-transcoder . h52bf) (native-eol-style . h52be) (make-transcoder . h52bd) (latin-1-codec . h52bc) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (make-i/o-encoding-error . h4e5e) (make-i/o-decoding-error . h4e47) (make-custom-textual-output-port . h52bb) (make-custom-textual-input/output-port . h52ba) (make-custom-textual-input-port . h52b9) (make-custom-binary-output-port . h52b8) (make-custom-binary-input/output-port . h52b7) (make-custom-binary-input-port . h52b6) (make-bytevector . h52b5) (lookahead-u8 . h52b4) (lookahead-char . h52b3) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (i/o-encoding-error? . h4e62) (i/o-encoding-error-char . h4e64) (i/o-decoding-error? . h4e49) (get-u8 . h52b2) (get-string-n! . h52b1) (get-string-n . h52b0) (get-string-all . h52af) (get-line . h52ae) (get-datum . h52ad) (get-char . h52ac) (get-bytevector-some . h52ab) (get-bytevector-n! . h52aa) (get-bytevector-n . h52a9) (get-bytevector-all . h52a8) (flush-output-port . h52a7) (close-port . h52a6) (exit . h529e) (command-line . h4f99) (remove . h5299) (remv . h5298) (remp . h5297) (remq . h5296) (partition . h5295) (memv . h5294) (memq . h5293) (memp . h5292) (member . h5291) (exists . h5290) (for-all . h528f) (fold-right . h528e) (fold-left . h528d) (find . h528c) (filter . h528b) (cons* . h528a) (assv . h5289) (assq . h5288) (assp . h5287) (assoc . h5286) (call-with-string-output-port . h5285) (call-with-port . h5284) (call-with-bytevector-output-port . h5283) (bytevector->string . h5282) (buffer-mode? . h5281) (binary-port? . h5280) (with-exception-handler . h527f) (raise-continuable . h527e) (raise . h527d) (make-enumeration . h527c) (enum-set=? . h527b) (enum-set-universe . h527a) (enum-set-union . h5279) (enum-set-subset? . h5278) (enum-set-projection . h5277) (enum-set-member? . h5276) (enum-set-intersection . h5275) (enum-set-indexer . h5274) (enum-set-difference . h5273) (enum-set-constructor . h5272) (enum-set-complement . h5271) (enum-set->list . h5270) (who-condition? . h4cd9) (warning? . h4c51) (violation? . h4c90) (undefined-violation? . h4d50) (syntax-violation? . h4d37) (syntax-violation-subform . h4d3b) (syntax-violation-form . h4d39) (syntax-violation . h3133) (simple-conditions . h526f) (serious-condition? . h4c66) (non-continuable-violation? . h4cf0) (message-condition? . h4c3a) (make-who-condition . h4cd5) (make-warning . h4c4f) (make-violation . h4c8e) (make-undefined-violation . h4d4e) (make-syntax-violation . h4d31) (make-serious-condition . h4c64) (make-non-continuable-violation . h4cee) (make-message-condition . h4c36) (make-lexical-violation . h4d18) (make-irritants-condition . h4cba) (make-implementation-restriction-violation . h4d03) (make-error . h4c79) (make-assertion-violation . h4ca3) (lexical-violation? . h4d1a) (irritants-condition? . h4cbe) (implementation-restriction-violation? . h4d05) (error? . h4c7b) (condition-who . h4cdb) (condition-predicate . h526e) (condition-message . h4c3c) (condition-irritants . h4cc0) (condition-accessor . h526d) (condition . h526c) (assertion-violation? . h4ca5) (condition? . h526b) (utf32->string . h526a) (utf16->string . h5269) (utf8->string . h5268) (uint-list->bytevector . h5267) (u8-list->bytevector . h5266) (string->utf8 . h5265) (string->utf32 . h5264) (string->utf16 . h5263) (sint-list->bytevector . h5262) (native-endianness . h5261) (bytevector? . h5260) (bytevector=? . h525f) (bytevector-uint-set! . h525e) (bytevector-uint-ref . h525d) (bytevector-u8-set! . h525c) (bytevector-u8-ref . h525b) (bytevector-u64-set! . h525a) (bytevector-u64-ref . h5259) (bytevector-u64-native-set! . h5258) (bytevector-u64-native-ref . h5257) (bytevector-u32-set! . h5256) (bytevector-u32-ref . h5255) (bytevector-u32-native-set! . h5254) (bytevector-u32-native-ref . h5253) (bytevector-u16-set! . h5252) (bytevector-u16-ref . h5251) (bytevector-u16-native-set! . h5250) (bytevector-u16-native-ref . h524f) (bytevector-sint-set! . h524e) (bytevector-sint-ref . h524d) (bytevector-s8-set! . h524c) (bytevector-s8-ref . h524b) (bytevector-s64-set! . h524a) (bytevector-s64-ref . h5249) (bytevector-s64-native-set! . h5248) (bytevector-s64-native-ref . h5247) (bytevector-s32-set! . h5246) (bytevector-s32-ref . h5245) (bytevector-s32-native-set! . h5244) (bytevector-s32-native-ref . h5243) (bytevector-s16-set! . h5242) (bytevector-s16-ref . h5241) (bytevector-s16-native-set! . h5240) (bytevector-s16-native-ref . h523f) (bytevector-length . h523e) (bytevector-ieee-single-ref . h523d) (bytevector-ieee-single-set! . h523c) (bytevector-ieee-single-native-set! . h523b) (bytevector-ieee-single-native-ref . h523a) (bytevector-ieee-double-set! . h5239) (bytevector-ieee-double-ref . h5238) (bytevector-ieee-double-native-set! . h5237) (bytevector-ieee-double-native-ref . h5236) (bytevector-fill! . h5235) (bytevector-copy! . h5234) (bytevector-copy . h5233) (bytevector->uint-list . h5232) (bytevector->u8-list . h5231) (bytevector->sint-list . h5230) (no-nans-violation? . h4e8e) (no-infinities-violation? . h4e79) (make-no-nans-violation . h4e8c) (make-no-infinities-violation . h4e77) (real->flonum . h522f) (flzero? . h522e) (fltruncate . h522d) (fltan . h522c) (flsqrt . h522b) (flsin . h522a) (flround . h5229) (flpositive? . h5228) (flonum? . h5227) (flodd? . h5226) (flnumerator . h5225) (flnegative? . h5224) (flnan? . h5223) (flmod0 . h5222) (flmod . h5221) (flmin . h5220) (flmax . h521f) (fllog . h521e) (flinteger? . h521d) (flinfinite? . h521c) (flfloor . h521b) (flfinite? . h521a) (flexpt . h5219) (flexp . h5218) (fleven? . h5217) (fldiv0-and-mod0 . h5216) (fldiv0 . h5215) (fldiv-and-mod . h5214) (fldiv . h5213) (fldenominator . h5212) (flcos . h5211) (flceiling . h5210) (flatan . h520f) (flasin . h520e) (flacos . h520d) (flabs . h520c) (fl>? . h520b) (fl>=? . h520a) (fl=? . h5209) (fl<? . h5208) (fl<=? . h5207) (fl/ . h5206) (fl- . h5205) (fl+ . h5204) (fl* . h5203) (fixnum->flonum . h5202) (fxzero? . h5201) (fxxor . h5200) (fxrotate-bit-field . h51ff) (fxreverse-bit-field . h51fe) (fxpositive? . h51fd) (fxodd? . h51fc) (fxnot . h51fb) (fxnegative? . h51fa) (fxmod0 . h51f9) (fxmod . h51f8) (fxmin . h51f7) (fxmax . h51f6) (fxlength . h51f5) (fxior . h51f4) (fxif . h51f3) (fxfirst-bit-set . h51f2) (fxeven? . h51f1) (fxdiv0-and-mod0 . h51f0) (fxdiv0 . h51ef) (fxdiv-and-mod . h51ee) (fxdiv . h51ed) (fxcopy-bit-field . h51ec) (fxcopy-bit . h51eb) (fxbit-set? . h51ea) (fxbit-field . h51e9) (fxbit-count . h51e8) (fxarithmetic-shift-right . h51e7) (fxarithmetic-shift-left . h51e6) (fxarithmetic-shift . h51e5) (fxand . h51e4) (fx>? . h51e3) (fx>=? . h51e2) (fx=? . h51e1) (fx<? . h51e0) (fx<=? . h51df) (fx-/carry . h51de) (fx- . h51dd) (fx+/carry . h51dc) (fx+ . h51db) (fx*/carry . h51da) (fx* . h51d9) (greatest-fixnum . h51d8) (least-fixnum . h51d7) (fixnum-width . h51d6) (fixnum? . h51d5) (bitwise-rotate-bit-field . h51d4) (bitwise-reverse-bit-field . h51d3) (bitwise-length . h51d2) (bitwise-if . h51d1) (bitwise-first-bit-set . h51d0) (bitwise-copy-bit-field . h51cf) (bitwise-copy-bit . h51ce) (bitwise-bit-set? . h51cd) (bitwise-bit-field . h51cc) (bitwise-bit-count . h51cb) (bitwise-xor . h51ca) (bitwise-ior . h51c9) (bitwise-and . h51c8) (bitwise-not . h51c7) (bitwise-arithmetic-shift-right . h51c6) (bitwise-arithmetic-shift-left . h51c5) (bitwise-arithmetic-shift . h51c4) (zero? . h51c3) (vector? . h51c2) (vector-set! . h51c1) (vector-ref . h51c0) (vector-map . h51bf) (vector-length . h51be) (vector-for-each . h51bd) (vector-fill! . h51bc) (vector->list . h51bb) (vector . h51ba) (values . h51b9) (truncate . h51b8) (tan . h51b7) (symbol? . h51b6) (symbol=? . h51b5) (symbol->string . h51b4) (substring . h51b3) (string? . h51b2) (string>? . h51b1) (string>=? . h51b0) (string=? . h51af) (string<? . h51ae) (string<=? . h51ad) (string-ref . h51ac) (string-length . h51ab) (string-for-each . h51aa) (string-copy . h51a9) (string-append . h51a8) (string->symbol . h51a7) (string->number . h51a6) (string->list . h51a5) (string . h51a4) (sqrt . h51a3) (sin . h51a2) (round . h51a1) (reverse . h51a0) (real? . h519f) (real-valued? . h519e) (real-part . h519d) (rationalize . h519c) (rational? . h519b) (rational-valued? . h519a) (procedure? . h5199) (positive? . h5198) (pair? . h5197) (odd? . h5196) (numerator . h5195) (number? . h5194) (number->string . h5193) (null? . h5192) (not . h5191) (negative? . h5190) (nan? . h518f) (min . h518e) (max . h518d) (map . h518c) (make-vector . h518b) (make-string . h518a) (make-rectangular . h5189) (make-polar . h5188) (magnitude . h5187) (log . h5186) (list? . h5185) (list-tail . h5184) (list-ref . h5183) (list->vector . h5182) (list->string . h5181) (list . h5180) (length . h517f) (lcm . h517e) (integer? . h517d) (integer-valued? . h517c) (integer->char . h517b) (infinite? . h517a) (inexact? . h5179) (inexact . h5178) (imag-part . h5177) (gcd . h5176) (for-each . h5175) (floor . h5174) (finite? . h5173) (expt . h5172) (exp . h5171) (exact? . h5170) (exact-integer-sqrt . h516f) (exact . h516e) (even? . h516d) (error . h516c) (eqv? . h516b) (equal? . h516a) (eq? . h5169) (dynamic-wind . h5168) (div0-and-mod0 . h5167) (mod0 . h5166) (div0 . h5165) (div-and-mod . h5164) (mod . h5163) (div . h5162) (denominator . h5161) (cos . h5160) (cons . h515f) (complex? . h515e) (char? . h515d) (char>? . h515c) (char>=? . h515b) (char=? . h515a) (char<? . h5159) (char<=? . h5158) (char->integer . h5157) (ceiling . h5156) (call-with-values . h5155) (call/cc . h5154) (call-with-current-continuation . h5153) (cddddr . h5152) (cdddar . h5151) (cddadr . h5150) (cddaar . h514f) (cdaddr . h514e) (cdadar . h514d) (cdaadr . h514c) (cdaaar . h514b) (cadddr . h514a) (caddar . h5149) (cadadr . h5148) (cadaar . h5147) (caaddr . h5146) (caadar . h5145) (caaadr . h5144) (caaaar . h5143) (cdddr . h5142) (cddar . h5141) (cdadr . h5140) (cdaar . h513f) (caddr . h513e) (cadar . h513d) (caadr . h513c) (caaar . h513b) (cddr . h513a) (cdar . h5139) (cadr . h5138) (caar . h5137) (cdr . h5136) (car . h5135) (boolean? . h5134) (boolean=? . h5133) (atan . h5132) (assertion-violation . h5131) (asin . h5130) (apply . h512f) (append . h512e) (angle . h512d) (acos . h512c) (abs . h512b) (/ . h512a) (* . h5129) (- . h5128) (+ . h5127) (>= . h5126) (> . h5125) (= . h5124) (<= . h5123) (< . h5122) (&no-nans . h5120) (&no-infinities . h511f) (&i/o-encoding . h511e) (&i/o-decoding . h511d) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113) (&undefined . h5112) (&syntax . h5111) (&lexical . h5110) (&implementation-restriction . h510f) (&non-continuable . h510e) (&who . h510d) (&irritants . h510c) (&assertion . h510b) (&violation . h510a) (&error . h5109) (&serious . h5108) (&warning . h5107) (&message . h5106) (&condition . h5105) (define-condition-type . h5104) (define-enumeration . h5103) (define-record-type . h5102) (parent-rtd . h5101) (nongenerative . h5100) (opaque . h50ff) (sealed . h50fe) (protocol . h50fd) (parent . h50fc) (immutable . h50fb) (mutable . h50fa) (fields . h50f9) (error-handling-mode . h50f8) (file-options . h50f7) (buffer-mode . h50f6) (eol-style . h50f5) (guard . h50f4) (unsyntax-splicing . h50f1) (unsyntax . h50f0) (unquote-splicing . h50ef) (unquote . h50ee) (_ . h50ed) (else . h50ec) (=> . h50eb) (... . h50ea) (assert . h50e9) (endianness . h50e8) (do . h50e5) (cond . h50e4) (let* . h50e3) (let . h50e2) (let*-values . h50e1) (let-values . h50e0) (identifier-syntax . h50df) (with-syntax . h50de) (quasisyntax . h50dd) (quasiquote . h50dc) (syntax-rules . h50db) (record-constructor-descriptor . h50d8) (record-type-descriptor . h50d7) (case . h50d6) (unless . h50d4) (when . h50d3) (or . h50d2) (and . h50d1) (if . h50d0) (letrec* . h50cf) (letrec . h50ce) (case-lambda . h50cc) (lambda . h50cb) (syntax . h50ca) (syntax-case . h50c9) (quote . h50c8) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (begin . h50c2) (define-syntax . h50c0) (define . h50bf)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . h310f) (quotient . h52a5) (null-environment . h310d) (remainder . h52a4) (modulo . h52a3) (inexact->exact . h52a2) (force . h52a1) (exact->inexact . h52a0) (make-promise . h529f) (delay . h50e7)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e4 '(rnrs control) '(6) '() '() '() '((do . h50e5) (unless . h50d4) (when . h50d3) (case-lambda . h50cc)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e5 '(rnrs eval) '(6) '() '() '() '((eval . h3113) (environment . h310b)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . h529b) (set-car! . h529a)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . h529d) (string-set! . h529c)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e8 '(rnrs programs) '(6) '() '() '() '((exit . h529e) (command-line . h4f99)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53e9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . h2e92) (identifier? . h3135) (generate-temporaries . h3121) (free-identifier=? . h3123) (syntax->datum . h3139) (datum->syntax . h3137) (bound-identifier=? . h3125) (syntax-violation . h3133) (unsyntax-splicing . h50f1) (unsyntax . h50f0) (_ . h50ed) (... . h50ea) (with-syntax . h50de) (quasisyntax . h50dd) (syntax . h50ca) (syntax-case . h50c9)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53ea '(rnrs files) '(6) '() '() '() '((delete-file . h530e) (file-exists? . h530d) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53eb '(rnrs sorting) '(6) '() '() '() '((vector-sort! . h530c) (vector-sort . h530b) (list-sort . h530a)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53ec '(rnrs base) '(6) '() '() '() '((zero? . h51c3) (vector? . h51c2) (vector-set! . h51c1) (vector-ref . h51c0) (vector-map . h51bf) (vector-length . h51be) (vector-for-each . h51bd) (vector-fill! . h51bc) (vector->list . h51bb) (vector . h51ba) (values . h51b9) (truncate . h51b8) (tan . h51b7) (symbol? . h51b6) (symbol=? . h51b5) (symbol->string . h51b4) (substring . h51b3) (string? . h51b2) (string>? . h51b1) (string>=? . h51b0) (string=? . h51af) (string<? . h51ae) (string<=? . h51ad) (string-ref . h51ac) (string-length . h51ab) (string-for-each . h51aa) (string-copy . h51a9) (string-append . h51a8) (string->symbol . h51a7) (string->number . h51a6) (string->list . h51a5) (string . h51a4) (sqrt . h51a3) (sin . h51a2) (round . h51a1) (reverse . h51a0) (real? . h519f) (real-valued? . h519e) (real-part . h519d) (rationalize . h519c) (rational? . h519b) (rational-valued? . h519a) (procedure? . h5199) (positive? . h5198) (pair? . h5197) (odd? . h5196) (numerator . h5195) (number? . h5194) (number->string . h5193) (null? . h5192) (not . h5191) (negative? . h5190) (nan? . h518f) (min . h518e) (max . h518d) (map . h518c) (make-vector . h518b) (make-string . h518a) (make-rectangular . h5189) (make-polar . h5188) (magnitude . h5187) (log . h5186) (list? . h5185) (list-tail . h5184) (list-ref . h5183) (list->vector . h5182) (list->string . h5181) (list . h5180) (length . h517f) (lcm . h517e) (integer? . h517d) (integer-valued? . h517c) (integer->char . h517b) (infinite? . h517a) (inexact? . h5179) (inexact . h5178) (imag-part . h5177) (gcd . h5176) (for-each . h5175) (floor . h5174) (finite? . h5173) (expt . h5172) (exp . h5171) (exact? . h5170) (exact-integer-sqrt . h516f) (exact . h516e) (even? . h516d) (error . h516c) (eqv? . h516b) (equal? . h516a) (eq? . h5169) (dynamic-wind . h5168) (div0-and-mod0 . h5167) (mod0 . h5166) (div0 . h5165) (div-and-mod . h5164) (mod . h5163) (div . h5162) (denominator . h5161) (cos . h5160) (cons . h515f) (complex? . h515e) (char? . h515d) (char>? . h515c) (char>=? . h515b) (char=? . h515a) (char<? . h5159) (char<=? . h5158) (char->integer . h5157) (ceiling . h5156) (call-with-values . h5155) (call/cc . h5154) (call-with-current-continuation . h5153) (cddddr . h5152) (cdddar . h5151) (cddadr . h5150) (cddaar . h514f) (cdaddr . h514e) (cdadar . h514d) (cdaadr . h514c) (cdaaar . h514b) (cadddr . h514a) (caddar . h5149) (cadadr . h5148) (cadaar . h5147) (caaddr . h5146) (caadar . h5145) (caaadr . h5144) (caaaar . h5143) (cdddr . h5142) (cddar . h5141) (cdadr . h5140) (cdaar . h513f) (caddr . h513e) (cadar . h513d) (caadr . h513c) (caaar . h513b) (cddr . h513a) (cdar . h5139) (cadr . h5138) (caar . h5137) (cdr . h5136) (car . h5135) (boolean? . h5134) (boolean=? . h5133) (atan . h5132) (assertion-violation . h5131) (asin . h5130) (apply . h512f) (append . h512e) (angle . h512d) (acos . h512c) (abs . h512b) (/ . h512a) (* . h5129) (- . h5128) (+ . h5127) (>= . h5126) (> . h5125) (= . h5124) (<= . h5123) (< . h5122) (unquote-splicing . h50ef) (unquote . h50ee) (_ . h50ed) (else . h50ec) (=> . h50eb) (... . h50ea) (assert . h50e9) (cond . h50e4) (let* . h50e3) (let . h50e2) (let*-values . h50e1) (let-values . h50e0) (identifier-syntax . h50df) (quasiquote . h50dc) (syntax-rules . h50db) (case . h50d6) (or . h50d2) (and . h50d1) (if . h50d0) (letrec* . h50cf) (letrec . h50ce) (lambda . h50cb) (quote . h50c8) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (begin . h50c2) (define-syntax . h50c0) (define . h50bf)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53ed '(rnrs lists) '(6) '() '() '() '((remove . h5299) (remv . h5298) (remp . h5297) (remq . h5296) (partition . h5295) (memv . h5294) (memq . h5293) (memp . h5292) (member . h5291) (exists . h5290) (for-all . h528f) (fold-right . h528e) (fold-left . h528d) (find . h528c) (filter . h528b) (cons* . h528a) (assv . h5289) (assq . h5288) (assp . h5287) (assoc . h5286)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53ee '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . h52f4) (call-with-input-file . h52f3) (write-char . h52f2) (write . h52f1) (with-output-to-file . h52f0) (with-input-from-file . h52ef) (read-char . h52ee) (read . h52ed) (peek-char . h52ec) (open-output-file . h52eb) (open-input-file . h52ea) (newline . h52e9) (display . h52e8) (close-output-port . h52e7) (close-input-port . h52e6) (eof-object? . h52e5) (eof-object . h52e4) (current-error-port . h52e3) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53ef '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . h52b5) (utf32->string . h526a) (utf16->string . h5269) (utf8->string . h5268) (uint-list->bytevector . h5267) (u8-list->bytevector . h5266) (string->utf8 . h5265) (string->utf32 . h5264) (string->utf16 . h5263) (sint-list->bytevector . h5262) (native-endianness . h5261) (bytevector? . h5260) (bytevector=? . h525f) (bytevector-uint-set! . h525e) (bytevector-uint-ref . h525d) (bytevector-u8-set! . h525c) (bytevector-u8-ref . h525b) (bytevector-u64-set! . h525a) (bytevector-u64-ref . h5259) (bytevector-u64-native-set! . h5258) (bytevector-u64-native-ref . h5257) (bytevector-u32-set! . h5256) (bytevector-u32-ref . h5255) (bytevector-u32-native-set! . h5254) (bytevector-u32-native-ref . h5253) (bytevector-u16-set! . h5252) (bytevector-u16-ref . h5251) (bytevector-u16-native-set! . h5250) (bytevector-u16-native-ref . h524f) (bytevector-sint-set! . h524e) (bytevector-sint-ref . h524d) (bytevector-s8-set! . h524c) (bytevector-s8-ref . h524b) (bytevector-s64-set! . h524a) (bytevector-s64-ref . h5249) (bytevector-s64-native-set! . h5248) (bytevector-s64-native-ref . h5247) (bytevector-s32-set! . h5246) (bytevector-s32-ref . h5245) (bytevector-s32-native-set! . h5244) (bytevector-s32-native-ref . h5243) (bytevector-s16-set! . h5242) (bytevector-s16-ref . h5241) (bytevector-s16-native-set! . h5240) (bytevector-s16-native-ref . h523f) (bytevector-length . h523e) (bytevector-ieee-single-ref . h523d) (bytevector-ieee-single-set! . h523c) (bytevector-ieee-single-native-set! . h523b) (bytevector-ieee-single-native-ref . h523a) (bytevector-ieee-double-set! . h5239) (bytevector-ieee-double-ref . h5238) (bytevector-ieee-double-native-set! . h5237) (bytevector-ieee-double-native-ref . h5236) (bytevector-fill! . h5235) (bytevector-copy! . h5234) (bytevector-copy . h5233) (bytevector->uint-list . h5232) (bytevector->u8-list . h5231) (bytevector->sint-list . h5230) (endianness . h50e8)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f0 '(rnrs unicode) '(6) '() '() '() '((string-upcase . h533c) (string-titlecase . h533b) (string-normalize-nfkd . h533a) (string-normalize-nfkc . h5339) (string-normalize-nfd . h5338) (string-normalize-nfc . h5337) (string-foldcase . h5336) (string-downcase . h5335) (string-ci>? . h5334) (string-ci>=? . h5333) (string-ci=? . h5332) (string-ci<? . h5331) (string-ci<=? . h5330) (char-whitespace? . h532f) (char-upper-case? . h532e) (char-title-case? . h532d) (char-numeric? . h532c) (char-lower-case? . h532b) (char-general-category . h532a) (char-upcase . h5329) (char-titlecase . h5328) (char-foldcase . h5327) (char-downcase . h5326) (char-ci>? . h5325) (char-ci>=? . h5324) (char-ci=? . h5323) (char-ci<? . h5322) (char-ci<=? . h5321) (char-alphabetic? . h5320)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f1 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . h527f) (raise-continuable . h527e) (raise . h527d) (guard . h50f4) (else . h50ec) (=> . h50eb)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f2 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . h51d4) (bitwise-reverse-bit-field . h51d3) (bitwise-length . h51d2) (bitwise-if . h51d1) (bitwise-first-bit-set . h51d0) (bitwise-copy-bit-field . h51cf) (bitwise-copy-bit . h51ce) (bitwise-bit-set? . h51cd) (bitwise-bit-field . h51cc) (bitwise-bit-count . h51cb) (bitwise-xor . h51ca) (bitwise-ior . h51c9) (bitwise-and . h51c8) (bitwise-not . h51c7) (bitwise-arithmetic-shift-right . h51c6) (bitwise-arithmetic-shift-left . h51c5) (bitwise-arithmetic-shift . h51c4)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f3 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . h5201) (fxxor . h5200) (fxrotate-bit-field . h51ff) (fxreverse-bit-field . h51fe) (fxpositive? . h51fd) (fxodd? . h51fc) (fxnot . h51fb) (fxnegative? . h51fa) (fxmod0 . h51f9) (fxmod . h51f8) (fxmin . h51f7) (fxmax . h51f6) (fxlength . h51f5) (fxior . h51f4) (fxif . h51f3) (fxfirst-bit-set . h51f2) (fxeven? . h51f1) (fxdiv0-and-mod0 . h51f0) (fxdiv0 . h51ef) (fxdiv-and-mod . h51ee) (fxdiv . h51ed) (fxcopy-bit-field . h51ec) (fxcopy-bit . h51eb) (fxbit-set? . h51ea) (fxbit-field . h51e9) (fxbit-count . h51e8) (fxarithmetic-shift-right . h51e7) (fxarithmetic-shift-left . h51e6) (fxarithmetic-shift . h51e5) (fxand . h51e4) (fx>? . h51e3) (fx>=? . h51e2) (fx=? . h51e1) (fx<? . h51e0) (fx<=? . h51df) (fx-/carry . h51de) (fx- . h51dd) (fx+/carry . h51dc) (fx+ . h51db) (fx*/carry . h51da) (fx* . h51d9) (greatest-fixnum . h51d8) (least-fixnum . h51d7) (fixnum-width . h51d6) (fixnum? . h51d5)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f4 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . h4e8e) (no-infinities-violation? . h4e79) (make-no-nans-violation . h4e8c) (make-no-infinities-violation . h4e77) (real->flonum . h522f) (flzero? . h522e) (fltruncate . h522d) (fltan . h522c) (flsqrt . h522b) (flsin . h522a) (flround . h5229) (flpositive? . h5228) (flonum? . h5227) (flodd? . h5226) (flnumerator . h5225) (flnegative? . h5224) (flnan? . h5223) (flmod0 . h5222) (flmod . h5221) (flmin . h5220) (flmax . h521f) (fllog . h521e) (flinteger? . h521d) (flinfinite? . h521c) (flfloor . h521b) (flfinite? . h521a) (flexpt . h5219) (flexp . h5218) (fleven? . h5217) (fldiv0-and-mod0 . h5216) (fldiv0 . h5215) (fldiv-and-mod . h5214) (fldiv . h5213) (fldenominator . h5212) (flcos . h5211) (flceiling . h5210) (flatan . h520f) (flasin . h520e) (flacos . h520d) (flabs . h520c) (fl>? . h520b) (fl>=? . h520a) (fl=? . h5209) (fl<? . h5208) (fl<=? . h5207) (fl/ . h5206) (fl- . h5205) (fl+ . h5204) (fl* . h5203) (fixnum->flonum . h5202) (&no-nans . h5120) (&no-infinities . h511f)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f5 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . h5309) (string-ci-hash . h5308) (string-hash . h5307) (equal-hash . h5306) (hashtable-equivalence-function . h5305) (make-hashtable . h5304) (hashtable-hash-function . h5303) (make-eqv-hashtable . h5302) (make-eq-hashtable . h5301) (hashtable? . h5300) (hashtable-update! . h52ff) (hashtable-size . h52fe) (hashtable-set! . h52fd) (hashtable-ref . h52fc) (hashtable-mutable? . h52fb) (hashtable-keys . h52fa) (hashtable-entries . h52f9) (hashtable-delete! . h52f8) (hashtable-copy . h52f7) (hashtable-contains? . h52f6) (hashtable-clear! . h52f5)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f6 '(rnrs io ports) '(6) '() '() '() '((eof-object? . h52e5) (eof-object . h52e4) (current-error-port . h52e3) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (utf-8-codec . h52de) (utf-16-codec . h52dd) (transcoder-error-handling-mode . h52dc) (transcoder-eol-style . h52db) (transcoder-codec . h52da) (transcoded-port . h52d9) (textual-port? . h52d8) (string->bytevector . h52d7) (standard-output-port . h52d6) (standard-input-port . h52d5) (standard-error-port . h52d4) (set-port-position! . h52d3) (put-u8 . h52d2) (put-string . h52d1) (put-datum . h52d0) (put-char . h52cf) (put-bytevector . h52ce) (port? . h52cd) (port-transcoder . h52cc) (port-position . h52cb) (port-has-set-port-position!? . h52ca) (port-has-port-position? . h52c9) (port-eof? . h52c8) (output-port-buffer-mode . h52c7) (open-string-output-port . h52c6) (open-string-input-port . h52c5) (open-file-output-port . h52c4) (open-file-input/output-port . h52c3) (open-file-input-port . h52c2) (open-bytevector-output-port . h52c1) (open-bytevector-input-port . h52c0) (native-transcoder . h52bf) (native-eol-style . h52be) (make-transcoder . h52bd) (latin-1-codec . h52bc) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (make-i/o-encoding-error . h4e5e) (make-i/o-decoding-error . h4e47) (make-custom-textual-output-port . h52bb) (make-custom-textual-input/output-port . h52ba) (make-custom-textual-input-port . h52b9) (make-custom-binary-output-port . h52b8) (make-custom-binary-input/output-port . h52b7) (make-custom-binary-input-port . h52b6) (lookahead-u8 . h52b4) (lookahead-char . h52b3) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (i/o-encoding-error? . h4e62) (i/o-encoding-error-char . h4e64) (i/o-decoding-error? . h4e49) (get-u8 . h52b2) (get-string-n! . h52b1) (get-string-n . h52b0) (get-string-all . h52af) (get-line . h52ae) (get-datum . h52ad) (get-char . h52ac) (get-bytevector-some . h52ab) (get-bytevector-n! . h52aa) (get-bytevector-n . h52a9) (get-bytevector-all . h52a8) (flush-output-port . h52a7) (close-port . h52a6) (call-with-string-output-port . h5285) (call-with-port . h5284) (call-with-bytevector-output-port . h5283) (bytevector->string . h5282) (buffer-mode? . h5281) (binary-port? . h5280) (&i/o-encoding . h511e) (&i/o-decoding . h511d) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113) (error-handling-mode . h50f8) (file-options . h50f7) (buffer-mode . h50f6) (eol-style . h50f5)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f7 '(rnrs enums) '(6) '() '() '() '((make-enumeration . h527c) (enum-set=? . h527b) (enum-set-universe . h527a) (enum-set-union . h5279) (enum-set-subset? . h5278) (enum-set-projection . h5277) (enum-set-member? . h5276) (enum-set-intersection . h5275) (enum-set-indexer . h5274) (enum-set-difference . h5273) (enum-set-constructor . h5272) (enum-set-complement . h5271) (enum-set->list . h5270) (define-enumeration . h5103)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f8 '(rnrs conditions) '(6) '() '() '() '((who-condition? . h4cd9) (warning? . h4c51) (violation? . h4c90) (undefined-violation? . h4d50) (syntax-violation? . h4d37) (syntax-violation-subform . h4d3b) (syntax-violation-form . h4d39) (syntax-violation . h3133) (simple-conditions . h526f) (serious-condition? . h4c66) (non-continuable-violation? . h4cf0) (message-condition? . h4c3a) (make-who-condition . h4cd5) (make-warning . h4c4f) (make-violation . h4c8e) (make-undefined-violation . h4d4e) (make-syntax-violation . h4d31) (make-serious-condition . h4c64) (make-non-continuable-violation . h4cee) (make-message-condition . h4c36) (make-lexical-violation . h4d18) (make-irritants-condition . h4cba) (make-implementation-restriction-violation . h4d03) (make-error . h4c79) (make-assertion-violation . h4ca3) (lexical-violation? . h4d1a) (irritants-condition? . h4cbe) (implementation-restriction-violation? . h4d05) (error? . h4c7b) (condition-who . h4cdb) (condition-predicate . h526e) (condition-message . h4c3c) (condition-irritants . h4cc0) (condition-accessor . h526d) (condition . h526c) (assertion-violation? . h4ca5) (condition? . h526b) (&undefined . h5112) (&syntax . h5111) (&lexical . h5110) (&implementation-restriction . h510f) (&non-continuable . h510e) (&who . h510d) (&irritants . h510c) (&assertion . h510b) (&violation . h510a) (&error . h5109) (&serious . h5108) (&warning . h5107) (&message . h5106) (&condition . h5105) (define-condition-type . h5104)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53f9 '(rnrs records inspection) '(6) '() '() '() '((record? . h5318) (record-type-uid . h5317) (record-type-sealed? . h5316) (record-type-parent . h5315) (record-type-opaque? . h5314) (record-type-name . h5313) (record-type-generative? . h5312) (record-type-field-names . h5311) (record-rtd . h5310) (record-field-mutable? . h530f)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53fa '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . h531f) (record-predicate . h531e) (record-mutator . h531d) (record-constructor . h531c) (record-accessor . h531b) (make-record-type-descriptor . h531a) (make-record-constructor-descriptor . h5319)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53fb '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . h5102) (parent-rtd . h5101) (nongenerative . h5100) (opaque . h50ff) (sealed . h50fe) (protocol . h50fd) (parent . h50fc) (immutable . h50fb) (mutable . h50fa) (fields . h50f9) (record-constructor-descriptor . h50d8) (record-type-descriptor . h50d7)) '() values values '#f '#f '#t '#f) (h2c8f@h2ad0@install-library 'h53fc '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . h4e92) (&no-nans-rtd . h4e90) (&no-infinities-rcd . h4e7d) (&no-infinities-rtd . h4e7b) (&i/o-encoding-rcd . h4e68) (&i/o-encoding-rtd . h4e66) (&i/o-decoding-rcd . h4e4d) (&i/o-decoding-rtd . h4e4b) (&i/o-port-rcd . h4e38) (&i/o-port-rtd . h4e36) (&i/o-file-does-not-exist-rcd . h4e1d) (&i/o-file-does-not-exist-rtd . h4e1b) (&i/o-file-already-exists-rcd . h4e08) (&i/o-file-already-exists-rtd . h4e06) (&i/o-file-is-read-only-rcd . h4df3) (&i/o-file-is-read-only-rtd . h4df1) (&i/o-file-protection-rcd . h4dde) (&i/o-file-protection-rtd . h4ddc) (&i/o-filename-rcd . h4dc9) (&i/o-filename-rtd . h4dc7) (&i/o-invalid-position-rcd . h4dae) (&i/o-invalid-position-rtd . h4dac) (&i/o-write-rcd . h4d93) (&i/o-write-rtd . h4d91) (&i/o-read-rcd . h4d7e) (&i/o-read-rtd . h4d7c) (&i/o-rcd . h4d69) (&i/o-rtd . h4d67) (&undefined-rcd . h4d54) (&undefined-rtd . h4d52) (&syntax-rcd . h4d3f) (&syntax-rtd . h4d3d) (&lexical-rcd . h4d1e) (&lexical-rtd . h4d1c) (&implementation-restriction-rcd . h4d09) (&implementation-restriction-rtd . h4d07) (&non-continuable-rcd . h4cf4) (&non-continuable-rtd . h4cf2) (&who-rcd . h4cdf) (&who-rtd . h4cdd) (&irritants-rcd . h4cc4) (&irritants-rtd . h4cc2) (&assertion-rcd . h4ca9) (&assertion-rtd . h4ca7) (&violation-rcd . h4c94) (&violation-rtd . h4c92) (&error-rcd . h4c7f) (&error-rtd . h4c7d) (&serious-rcd . h4c6a) (&serious-rtd . h4c68) (&warning-rcd . h4c55) (&warning-rtd . h4c53) (&message-rcd . h4c40) (&message-rtd . h4c3e) (&condition-rcd . h4be1) (&condition-rtd . h4bdf) (syntax-error . h312f) (syntax-dispatch . h3065) (pretty-print . h53dc) (eval-core . h53db) (set-symbol-value! . h53da) (symbol-value . h53d9) (gensym . h53d8) (void . h53d7) (load . h4f9f) (interaction-environment . h313f) (char-ready? . h53d6) (regexp? . h53d5) (read-line . h53d4) (ungensym . h53d3) (alist->eq-hash-table . h53d2) (assoc-ref . h53d1) (print . h53d0) (format . h53cf) (host-os . h53ce) (library-path . h2aaf) (standard-library-path . h53cd) (file-newer? . h53cc) (stat-mtime . h53cb) (write-to-file . h53ca) (file->list . h53c9) (file->string . h53c8) (digit->integer . h53c7) (call-with-string-input-port . h53c6) (call-with-string-io . h53c5) (string-split . h53c4) (bytevector-for-each . h53c3) (string->regexp . h53c2) (rxmatch . h53c1) (regexp-replace-all . h53c0) (hashtable-for-each . h53bf) (call-process . h53be) (local-tz-offset . h53bd) (microseconds . h53bc) (directory-list . h53bb) (set-current-directory! . h53ba) (expand-path . h53b9) (current-directory . h53b8) (%spawn . h53b7) (%waitpid . h53b6) (simple-struct-name . h53b5) (simple-struct-set! . h53b4) (simple-struct-ref . h53b3) (make-simple-struct . h53b2) (simple-struct? . h53b1) (pointer-ref-c-int64 . h53b0) (pointer-ref-c-int32 . h53af) (pointer-ref-c-int16 . h53ae) (pointer-ref-c-int8 . h53ad) (pointer-ref-c-uint64 . h53ac) (pointer-ref-c-uint32 . h53ab) (pointer-ref-c-uint16 . h53aa) (pointer-ref-c-uint8 . h53a9) (pointer-set-c-uint64! . h53a8) (pointer-set-c-uint32! . h53a7) (pointer-set-c-uint16! . h53a6) (pointer-set-c-uint8! . h53a5) (pointer-set-c-int64! . h53a4) (pointer-set-c-int32! . h53a3) (pointer-set-c-int16! . h53a2) (pointer-set-c-int8! . h53a1) (pointer-set-c-pointer! . h53a0) (pointer-set-c-double! . h539f) (pointer-set-c-float! . h539e) (pointer-set-c-long-long! . h539d) (pointer-set-c-long! . h539c) (pointer-set-c-int! . h539b) (pointer-set-c-short! . h539a) (pointer-set-c-char! . h5399) (pointer-ref-c-pointer . h5398) (pointer-ref-c-double . h5397) (pointer-ref-c-float . h5396) (pointer-ref-c-unsigned-long-long . h5395) (pointer-ref-c-signed-long-long . h5394) (pointer-ref-c-unsigned-long . h5393) (pointer-ref-c-signed-long . h5392) (pointer-ref-c-unsigned-int . h5391) (pointer-ref-c-signed-int . h5390) (pointer-ref-c-unsigned-short . h538f) (pointer-ref-c-signed-short . h538e) (pointer-ref-c-unsigned-char . h538d) (pointer-ref-c-signed-char . h538c) (pointer->integer . h538b) (integer->pointer . h538a) (pointer? . h5389) (shared-errno . h5388) (%ffi-supported? . h5387) (%ffi-pointer->string . h5386) (%ffi-call->string-or-zero . h5385) (%ffi-call->double . h5384) (%ffi-call->void* . h5383) (%ffi-call->void . h5382) (%ffi-call->char . h5381) (%ffi-call->int . h5380) (%ffi-lookup . h537f) (%ffi-open . h537e) (%fork . h537d) (%pipe . h537c) (p . h537b) (open-output-string . h537a) (get-output-string . h5379) (file-stat-ctime . h5378) (file-stat-atime . h5377) (file-stat-mtime . h5376) (file-size-in-bytes . h5375) (file-writable? . h5374) (file-executable? . h5373) (file-readable? . h5372) (file-regular? . h5371) (file-symbolic-link? . h5370) (file-directory? . h536f) (create-symbolic-link . h536e) (rename-file . h536d) (delete-directory . h536c) (create-directory . h536b) (get-environment-variables . h536a) (get-environment-variable . h5369) (get-timeofday . h5368) (get-command-line . h5367) (sys-display . h5366) (whereis . h5365) (register . h5364) (vm-join! . h5363) (vm-set-value! . h5362) (vm? . h5361) (main-vm? . h5360) (vm-eval . h535f) (vm-self . h535e) (vm-start! . h535d) (make-vm . h535c) (mutex-try-lock! . h535b) (mutex-unlock! . h535a) (mutex-lock! . h5359) (mutex? . h5358) (make-mutex . h5357) (condition-variable-notify-all! . h5356) (condition-variable-notify! . h5355) (condition-variable-wait! . h5354) (make-condition-variable . h5353) (mosh-executable-path . h5352) (make-file-options . h5351) (source-info . h5350) (make-compiler-instruction . h534f) (make-instruction . h534e) (set-source-info! . h534d) (bignum? . h534c) (fast-equal? . h534b) (fasl-read . h534a) (fasl-write . h5349) (time-usage . h5348) (os-constant . h5347) (make-parameter . h28bc) (socket-port . h5346) (socket-shutdown . h5345) (socket-close . h5344) (socket-send . h5343) (socket-recv! . h5342) (socket-recv . h5341) (make-server-socket . h5340) (make-client-socket . h533f) (socket-accept . h533e) (socket? . h533d) (string-upcase . h533c) (string-titlecase . h533b) (string-normalize-nfkd . h533a) (string-normalize-nfkc . h5339) (string-normalize-nfd . h5338) (string-normalize-nfc . h5337) (string-foldcase . h5336) (string-downcase . h5335) (string-ci>? . h5334) (string-ci>=? . h5333) (string-ci=? . h5332) (string-ci<? . h5331) (string-ci<=? . h5330) (char-whitespace? . h532f) (char-upper-case? . h532e) (char-title-case? . h532d) (char-numeric? . h532c) (char-lower-case? . h532b) (char-general-category . h532a) (char-upcase . h5329) (char-titlecase . h5328) (char-foldcase . h5327) (char-downcase . h5326) (char-ci>? . h5325) (char-ci>=? . h5324) (char-ci=? . h5323) (char-ci<? . h5322) (char-ci<=? . h5321) (char-alphabetic? . h5320) (make-variable-transformer . h2e92) (identifier? . h3135) (generate-temporaries . h3121) (free-identifier=? . h3123) (syntax->datum . h3139) (datum->syntax . h3137) (bound-identifier=? . h3125) (record-type-descriptor? . h531f) (record-predicate . h531e) (record-mutator . h531d) (record-constructor . h531c) (record-accessor . h531b) (make-record-type-descriptor . h531a) (make-record-constructor-descriptor . h5319) (record? . h5318) (record-type-uid . h5317) (record-type-sealed? . h5316) (record-type-parent . h5315) (record-type-opaque? . h5314) (record-type-name . h5313) (record-type-generative? . h5312) (record-type-field-names . h5311) (record-rtd . h5310) (record-field-mutable? . h530f) (delete-file . h530e) (file-exists? . h530d) (vector-sort! . h530c) (vector-sort . h530b) (list-sort . h530a) (symbol-hash . h5309) (string-ci-hash . h5308) (string-hash . h5307) (equal-hash . h5306) (hashtable-equivalence-function . h5305) (make-hashtable . h5304) (hashtable-hash-function . h5303) (make-eqv-hashtable . h5302) (make-eq-hashtable . h5301) (hashtable? . h5300) (hashtable-update! . h52ff) (hashtable-size . h52fe) (hashtable-set! . h52fd) (hashtable-ref . h52fc) (hashtable-mutable? . h52fb) (hashtable-keys . h52fa) (hashtable-entries . h52f9) (hashtable-delete! . h52f8) (hashtable-copy . h52f7) (hashtable-contains? . h52f6) (hashtable-clear! . h52f5) (call-with-output-file . h52f4) (call-with-input-file . h52f3) (write-char . h52f2) (write . h52f1) (with-output-to-file . h52f0) (with-input-from-file . h52ef) (read-char . h52ee) (read . h52ed) (peek-char . h52ec) (open-output-file . h52eb) (open-input-file . h52ea) (newline . h52e9) (display . h52e8) (close-output-port . h52e7) (close-input-port . h52e6) (eof-object? . h52e5) (eof-object . h52e4) (current-error-port . h52e3) (current-output-port . h52e2) (current-input-port . h52e1) (output-port? . h52e0) (input-port? . h52df) (utf-8-codec . h52de) (utf-16-codec . h52dd) (transcoder-error-handling-mode . h52dc) (transcoder-eol-style . h52db) (transcoder-codec . h52da) (transcoded-port . h52d9) (textual-port? . h52d8) (string->bytevector . h52d7) (standard-output-port . h52d6) (standard-input-port . h52d5) (standard-error-port . h52d4) (set-port-position! . h52d3) (put-u8 . h52d2) (put-string . h52d1) (put-datum . h52d0) (put-char . h52cf) (put-bytevector . h52ce) (port? . h52cd) (port-transcoder . h52cc) (port-position . h52cb) (port-has-set-port-position!? . h52ca) (port-has-port-position? . h52c9) (port-eof? . h52c8) (output-port-buffer-mode . h52c7) (open-string-output-port . h52c6) (open-string-input-port . h52c5) (open-file-output-port . h52c4) (open-file-input/output-port . h52c3) (open-file-input-port . h52c2) (open-bytevector-output-port . h52c1) (open-bytevector-input-port . h52c0) (native-transcoder . h52bf) (native-eol-style . h52be) (make-transcoder . h52bd) (latin-1-codec . h52bc) (make-i/o-write-error . h4d8d) (make-i/o-read-error . h4d78) (make-i/o-port-error . h4e2e) (make-i/o-invalid-position-error . h4da4) (make-i/o-filename-error . h4dbf) (make-i/o-file-protection-error . h4dd8) (make-i/o-file-is-read-only-error . h4ded) (make-i/o-file-does-not-exist-error . h4e17) (make-i/o-file-already-exists-error . h4e02) (make-i/o-error . h4d63) (make-i/o-encoding-error . h4e5e) (make-i/o-decoding-error . h4e47) (make-custom-textual-output-port . h52bb) (make-custom-textual-input/output-port . h52ba) (make-custom-textual-input-port . h52b9) (make-custom-binary-output-port . h52b8) (make-custom-binary-input/output-port . h52b7) (make-custom-binary-input-port . h52b6) (make-bytevector . h52b5) (lookahead-u8 . h52b4) (lookahead-char . h52b3) (i/o-write-error? . h4d8f) (i/o-read-error? . h4d7a) (i/o-port-error? . h4e32) (i/o-invalid-position-error? . h4da8) (i/o-filename-error? . h4dc3) (i/o-file-protection-error? . h4dda) (i/o-file-is-read-only-error? . h4def) (i/o-file-does-not-exist-error? . h4e19) (i/o-file-already-exists-error? . h4e04) (i/o-error? . h4d65) (i/o-error-position . h4daa) (i/o-error-port . h4e34) (i/o-error-filename . h4dc5) (i/o-encoding-error? . h4e62) (i/o-encoding-error-char . h4e64) (i/o-decoding-error? . h4e49) (get-u8 . h52b2) (get-string-n! . h52b1) (get-string-n . h52b0) (get-string-all . h52af) (get-line . h52ae) (get-datum . h52ad) (get-char . h52ac) (get-bytevector-some . h52ab) (get-bytevector-n! . h52aa) (get-bytevector-n . h52a9) (get-bytevector-all . h52a8) (flush-output-port . h52a7) (close-port . h52a6) (scheme-report-environment . h310f) (quotient . h52a5) (null-environment . h310d) (remainder . h52a4) (modulo . h52a3) (inexact->exact . h52a2) (force . h52a1) (exact->inexact . h52a0) (make-promise . h529f) (exit . h529e) (command-line . h4f99) (string-fill! . h529d) (string-set! . h529c) (set-cdr! . h529b) (set-car! . h529a) (remove . h5299) (remv . h5298) (remp . h5297) (remq . h5296) (partition . h5295) (memv . h5294) (memq . h5293) (memp . h5292) (member . h5291) (exists . h5290) (for-all . h528f) (fold-right . h528e) (fold-left . h528d) (find . h528c) (filter . h528b) (cons* . h528a) (assv . h5289) (assq . h5288) (assp . h5287) (assoc . h5286) (call-with-string-output-port . h5285) (call-with-port . h5284) (call-with-bytevector-output-port . h5283) (bytevector->string . h5282) (buffer-mode? . h5281) (binary-port? . h5280) (with-exception-handler . h527f) (raise-continuable . h527e) (raise . h527d) (eval . h3113) (environment . h310b) (make-enumeration . h527c) (enum-set=? . h527b) (enum-set-universe . h527a) (enum-set-union . h5279) (enum-set-subset? . h5278) (enum-set-projection . h5277) (enum-set-member? . h5276) (enum-set-intersection . h5275) (enum-set-indexer . h5274) (enum-set-difference . h5273) (enum-set-constructor . h5272) (enum-set-complement . h5271) (enum-set->list . h5270) (who-condition? . h4cd9) (warning? . h4c51) (violation? . h4c90) (undefined-violation? . h4d50) (syntax-violation? . h4d37) (syntax-violation-subform . h4d3b) (syntax-violation-form . h4d39) (syntax-violation . h3133) (simple-conditions . h526f) (serious-condition? . h4c66) (non-continuable-violation? . h4cf0) (message-condition? . h4c3a) (make-who-condition . h4cd5) (make-warning . h4c4f) (make-violation . h4c8e) (make-undefined-violation . h4d4e) (make-syntax-violation . h4d31) (make-serious-condition . h4c64) (make-non-continuable-violation . h4cee) (make-message-condition . h4c36) (make-lexical-violation . h4d18) (make-irritants-condition . h4cba) (make-implementation-restriction-violation . h4d03) (make-error . h4c79) (make-assertion-violation . h4ca3) (lexical-violation? . h4d1a) (irritants-condition? . h4cbe) (implementation-restriction-violation? . h4d05) (error? . h4c7b) (condition-who . h4cdb) (condition-predicate . h526e) (condition-message . h4c3c) (condition-irritants . h4cc0) (condition-accessor . h526d) (condition . h526c) (assertion-violation? . h4ca5) (condition? . h526b) (utf32->string . h526a) (utf16->string . h5269) (utf8->string . h5268) (uint-list->bytevector . h5267) (u8-list->bytevector . h5266) (string->utf8 . h5265) (string->utf32 . h5264) (string->utf16 . h5263) (sint-list->bytevector . h5262) (native-endianness . h5261) (bytevector? . h5260) (bytevector=? . h525f) (bytevector-uint-set! . h525e) (bytevector-uint-ref . h525d) (bytevector-u8-set! . h525c) (bytevector-u8-ref . h525b) (bytevector-u64-set! . h525a) (bytevector-u64-ref . h5259) (bytevector-u64-native-set! . h5258) (bytevector-u64-native-ref . h5257) (bytevector-u32-set! . h5256) (bytevector-u32-ref . h5255) (bytevector-u32-native-set! . h5254) (bytevector-u32-native-ref . h5253) (bytevector-u16-set! . h5252) (bytevector-u16-ref . h5251) (bytevector-u16-native-set! . h5250) (bytevector-u16-native-ref . h524f) (bytevector-sint-set! . h524e) (bytevector-sint-ref . h524d) (bytevector-s8-set! . h524c) (bytevector-s8-ref . h524b) (bytevector-s64-set! . h524a) (bytevector-s64-ref . h5249) (bytevector-s64-native-set! . h5248) (bytevector-s64-native-ref . h5247) (bytevector-s32-set! . h5246) (bytevector-s32-ref . h5245) (bytevector-s32-native-set! . h5244) (bytevector-s32-native-ref . h5243) (bytevector-s16-set! . h5242) (bytevector-s16-ref . h5241) (bytevector-s16-native-set! . h5240) (bytevector-s16-native-ref . h523f) (bytevector-length . h523e) (bytevector-ieee-single-ref . h523d) (bytevector-ieee-single-set! . h523c) (bytevector-ieee-single-native-set! . h523b) (bytevector-ieee-single-native-ref . h523a) (bytevector-ieee-double-set! . h5239) (bytevector-ieee-double-ref . h5238) (bytevector-ieee-double-native-set! . h5237) (bytevector-ieee-double-native-ref . h5236) (bytevector-fill! . h5235) (bytevector-copy! . h5234) (bytevector-copy . h5233) (bytevector->uint-list . h5232) (bytevector->u8-list . h5231) (bytevector->sint-list . h5230) (no-nans-violation? . h4e8e) (no-infinities-violation? . h4e79) (make-no-nans-violation . h4e8c) (make-no-infinities-violation . h4e77) (real->flonum . h522f) (flzero? . h522e) (fltruncate . h522d) (fltan . h522c) (flsqrt . h522b) (flsin . h522a) (flround . h5229) (flpositive? . h5228) (flonum? . h5227) (flodd? . h5226) (flnumerator . h5225) (flnegative? . h5224) (flnan? . h5223) (flmod0 . h5222) (flmod . h5221) (flmin . h5220) (flmax . h521f) (fllog . h521e) (flinteger? . h521d) (flinfinite? . h521c) (flfloor . h521b) (flfinite? . h521a) (flexpt . h5219) (flexp . h5218) (fleven? . h5217) (fldiv0-and-mod0 . h5216) (fldiv0 . h5215) (fldiv-and-mod . h5214) (fldiv . h5213) (fldenominator . h5212) (flcos . h5211) (flceiling . h5210) (flatan . h520f) (flasin . h520e) (flacos . h520d) (flabs . h520c) (fl>? . h520b) (fl>=? . h520a) (fl=? . h5209) (fl<? . h5208) (fl<=? . h5207) (fl/ . h5206) (fl- . h5205) (fl+ . h5204) (fl* . h5203) (fixnum->flonum . h5202) (fxzero? . h5201) (fxxor . h5200) (fxrotate-bit-field . h51ff) (fxreverse-bit-field . h51fe) (fxpositive? . h51fd) (fxodd? . h51fc) (fxnot . h51fb) (fxnegative? . h51fa) (fxmod0 . h51f9) (fxmod . h51f8) (fxmin . h51f7) (fxmax . h51f6) (fxlength . h51f5) (fxior . h51f4) (fxif . h51f3) (fxfirst-bit-set . h51f2) (fxeven? . h51f1) (fxdiv0-and-mod0 . h51f0) (fxdiv0 . h51ef) (fxdiv-and-mod . h51ee) (fxdiv . h51ed) (fxcopy-bit-field . h51ec) (fxcopy-bit . h51eb) (fxbit-set? . h51ea) (fxbit-field . h51e9) (fxbit-count . h51e8) (fxarithmetic-shift-right . h51e7) (fxarithmetic-shift-left . h51e6) (fxarithmetic-shift . h51e5) (fxand . h51e4) (fx>? . h51e3) (fx>=? . h51e2) (fx=? . h51e1) (fx<? . h51e0) (fx<=? . h51df) (fx-/carry . h51de) (fx- . h51dd) (fx+/carry . h51dc) (fx+ . h51db) (fx*/carry . h51da) (fx* . h51d9) (greatest-fixnum . h51d8) (least-fixnum . h51d7) (fixnum-width . h51d6) (fixnum? . h51d5) (bitwise-rotate-bit-field . h51d4) (bitwise-reverse-bit-field . h51d3) (bitwise-length . h51d2) (bitwise-if . h51d1) (bitwise-first-bit-set . h51d0) (bitwise-copy-bit-field . h51cf) (bitwise-copy-bit . h51ce) (bitwise-bit-set? . h51cd) (bitwise-bit-field . h51cc) (bitwise-bit-count . h51cb) (bitwise-xor . h51ca) (bitwise-ior . h51c9) (bitwise-and . h51c8) (bitwise-not . h51c7) (bitwise-arithmetic-shift-right . h51c6) (bitwise-arithmetic-shift-left . h51c5) (bitwise-arithmetic-shift . h51c4) (zero? . h51c3) (vector? . h51c2) (vector-set! . h51c1) (vector-ref . h51c0) (vector-map . h51bf) (vector-length . h51be) (vector-for-each . h51bd) (vector-fill! . h51bc) (vector->list . h51bb) (vector . h51ba) (values . h51b9) (truncate . h51b8) (tan . h51b7) (symbol? . h51b6) (symbol=? . h51b5) (symbol->string . h51b4) (substring . h51b3) (string? . h51b2) (string>? . h51b1) (string>=? . h51b0) (string=? . h51af) (string<? . h51ae) (string<=? . h51ad) (string-ref . h51ac) (string-length . h51ab) (string-for-each . h51aa) (string-copy . h51a9) (string-append . h51a8) (string->symbol . h51a7) (string->number . h51a6) (string->list . h51a5) (string . h51a4) (sqrt . h51a3) (sin . h51a2) (round . h51a1) (reverse . h51a0) (real? . h519f) (real-valued? . h519e) (real-part . h519d) (rationalize . h519c) (rational? . h519b) (rational-valued? . h519a) (procedure? . h5199) (positive? . h5198) (pair? . h5197) (odd? . h5196) (numerator . h5195) (number? . h5194) (number->string . h5193) (null? . h5192) (not . h5191) (negative? . h5190) (nan? . h518f) (min . h518e) (max . h518d) (map . h518c) (make-vector . h518b) (make-string . h518a) (make-rectangular . h5189) (make-polar . h5188) (magnitude . h5187) (log . h5186) (list? . h5185) (list-tail . h5184) (list-ref . h5183) (list->vector . h5182) (list->string . h5181) (list . h5180) (length . h517f) (lcm . h517e) (integer? . h517d) (integer-valued? . h517c) (integer->char . h517b) (infinite? . h517a) (inexact? . h5179) (inexact . h5178) (imag-part . h5177) (gcd . h5176) (for-each . h5175) (floor . h5174) (finite? . h5173) (expt . h5172) (exp . h5171) (exact? . h5170) (exact-integer-sqrt . h516f) (exact . h516e) (even? . h516d) (error . h516c) (eqv? . h516b) (equal? . h516a) (eq? . h5169) (dynamic-wind . h5168) (div0-and-mod0 . h5167) (mod0 . h5166) (div0 . h5165) (div-and-mod . h5164) (mod . h5163) (div . h5162) (denominator . h5161) (cos . h5160) (cons . h515f) (complex? . h515e) (char? . h515d) (char>? . h515c) (char>=? . h515b) (char=? . h515a) (char<? . h5159) (char<=? . h5158) (char->integer . h5157) (ceiling . h5156) (call-with-values . h5155) (call/cc . h5154) (call-with-current-continuation . h5153) (cddddr . h5152) (cdddar . h5151) (cddadr . h5150) (cddaar . h514f) (cdaddr . h514e) (cdadar . h514d) (cdaadr . h514c) (cdaaar . h514b) (cadddr . h514a) (caddar . h5149) (cadadr . h5148) (cadaar . h5147) (caaddr . h5146) (caadar . h5145) (caaadr . h5144) (caaaar . h5143) (cdddr . h5142) (cddar . h5141) (cdadr . h5140) (cdaar . h513f) (caddr . h513e) (cadar . h513d) (caadr . h513c) (caaar . h513b) (cddr . h513a) (cdar . h5139) (cadr . h5138) (caar . h5137) (cdr . h5136) (car . h5135) (boolean? . h5134) (boolean=? . h5133) (atan . h5132) (assertion-violation . h5131) (assertion-error . h312d) (asin . h5130) (apply . h512f) (append . h512e) (angle . h512d) (acos . h512c) (abs . h512b) (/ . h512a) (* . h5129) (- . h5128) (+ . h5127) (>= . h5126) (> . h5125) (= . h5124) (<= . h5123) (< . h5122) (library . h5121) (&no-nans . h5120) (&no-infinities . h511f) (&i/o-encoding . h511e) (&i/o-decoding . h511d) (&i/o-port . h511c) (&i/o-file-does-not-exist . h511b) (&i/o-file-already-exists . h511a) (&i/o-file-is-read-only . h5119) (&i/o-file-protection . h5118) (&i/o-filename . h5117) (&i/o-invalid-position . h5116) (&i/o-write . h5115) (&i/o-read . h5114) (&i/o . h5113) (&undefined . h5112) (&syntax . h5111) (&lexical . h5110) (&implementation-restriction . h510f) (&non-continuable . h510e) (&who . h510d) (&irritants . h510c) (&assertion . h510b) (&violation . h510a) (&error . h5109) (&serious . h5108) (&warning . h5107) (&message . h5106) (&condition . h5105) (define-condition-type . h5104) (define-enumeration . h5103) (define-record-type . h5102) (parent-rtd . h5101) (nongenerative . h5100) (opaque . h50ff) (sealed . h50fe) (protocol . h50fd) (parent . h50fc) (immutable . h50fb) (mutable . h50fa) (fields . h50f9) (error-handling-mode . h50f8) (file-options . h50f7) (buffer-mode . h50f6) (eol-style . h50f5) (guard . h50f4) (trace-define . h50f3) (trace-lambda . h50f2) (unsyntax-splicing . h50f1) (unsyntax . h50f0) (unquote-splicing . h50ef) (unquote . h50ee) (_ . h50ed) (else . h50ec) (=> . h50eb) (... . h50ea) (assert . h50e9) (endianness . h50e8) (delay . h50e7) (time . h50e6) (do . h50e5) (cond . h50e4) (let* . h50e3) (let . h50e2) (let*-values . h50e1) (let-values . h50e0) (identifier-syntax . h50df) (with-syntax . h50de) (quasisyntax . h50dd) (quasiquote . h50dc) (syntax-rules . h50db) (include . h50da) (define-struct . h50d9) (record-constructor-descriptor . h50d8) (record-type-descriptor . h50d7) (case . h50d6) (parameterize . h50d5) (unless . h50d4) (when . h50d3) (or . h50d2) (and . h50d1) (if . h50d0) (letrec* . h50cf) (letrec . h50ce) (type-descriptor . h50cd) (case-lambda . h50cc) (lambda . h50cb) (syntax . h50ca) (syntax-case . h50c9) (quote . h50c8) (foreign-call . h50c7) (letrec-syntax . h50c6) (let-syntax . h50c5) (set! . h50c4) (import . h50c3) (begin . h50c2) (module . h50c1) (define-syntax . h50c0) (define . h50bf)) '((h4e92 core-prim . &no-nans-rcd) (h4e90 core-prim . &no-nans-rtd) (h4e7d core-prim . &no-infinities-rcd) (h4e7b core-prim . &no-infinities-rtd) (h4e68 core-prim . &i/o-encoding-rcd) (h4e66 core-prim . &i/o-encoding-rtd) (h4e4d core-prim . &i/o-decoding-rcd) (h4e4b core-prim . &i/o-decoding-rtd) (h4e38 core-prim . &i/o-port-rcd) (h4e36 core-prim . &i/o-port-rtd) (h4e1d core-prim . &i/o-file-does-not-exist-rcd) (h4e1b core-prim . &i/o-file-does-not-exist-rtd) (h4e08 core-prim . &i/o-file-already-exists-rcd) (h4e06 core-prim . &i/o-file-already-exists-rtd) (h4df3 core-prim . &i/o-file-is-read-only-rcd) (h4df1 core-prim . &i/o-file-is-read-only-rtd) (h4dde core-prim . &i/o-file-protection-rcd) (h4ddc core-prim . &i/o-file-protection-rtd) (h4dc9 core-prim . &i/o-filename-rcd) (h4dc7 core-prim . &i/o-filename-rtd) (h4dae core-prim . &i/o-invalid-position-rcd) (h4dac core-prim . &i/o-invalid-position-rtd) (h4d93 core-prim . &i/o-write-rcd) (h4d91 core-prim . &i/o-write-rtd) (h4d7e core-prim . &i/o-read-rcd) (h4d7c core-prim . &i/o-read-rtd) (h4d69 core-prim . &i/o-rcd) (h4d67 core-prim . &i/o-rtd) (h4d54 core-prim . &undefined-rcd) (h4d52 core-prim . &undefined-rtd) (h4d3f core-prim . &syntax-rcd) (h4d3d core-prim . &syntax-rtd) (h4d1e core-prim . &lexical-rcd) (h4d1c core-prim . &lexical-rtd) (h4d09 core-prim . &implementation-restriction-rcd) (h4d07 core-prim . &implementation-restriction-rtd) (h4cf4 core-prim . &non-continuable-rcd) (h4cf2 core-prim . &non-continuable-rtd) (h4cdf core-prim . &who-rcd) (h4cdd core-prim . &who-rtd) (h4cc4 core-prim . &irritants-rcd) (h4cc2 core-prim . &irritants-rtd) (h4ca9 core-prim . &assertion-rcd) (h4ca7 core-prim . &assertion-rtd) (h4c94 core-prim . &violation-rcd) (h4c92 core-prim . &violation-rtd) (h4c7f core-prim . &error-rcd) (h4c7d core-prim . &error-rtd) (h4c6a core-prim . &serious-rcd) (h4c68 core-prim . &serious-rtd) (h4c55 core-prim . &warning-rcd) (h4c53 core-prim . &warning-rtd) (h4c40 core-prim . &message-rcd) (h4c3e core-prim . &message-rtd) (h4be1 core-prim . &condition-rcd) (h4bdf core-prim . &condition-rtd) (h312f core-prim . syntax-error) (h3065 core-prim . syntax-dispatch) (h53dc core-prim . pretty-print) (h53db core-prim . eval-core) (h53da core-prim . set-symbol-value!) (h53d9 core-prim . symbol-value) (h53d8 core-prim . gensym) (h53d7 core-prim . void) (h4f9f core-prim . load) (h313f core-prim . interaction-environment) (h53d6 core-prim . char-ready?) (h53d5 core-prim . regexp?) (h53d4 core-prim . read-line) (h53d3 core-prim . ungensym) (h53d2 core-prim . alist->eq-hash-table) (h53d1 core-prim . assoc-ref) (h53d0 core-prim . print) (h53cf core-prim . format) (h53ce core-prim . host-os) (h2aaf core-prim . library-path) (h53cd core-prim . standard-library-path) (h53cc core-prim . file-newer?) (h53cb core-prim . stat-mtime) (h53ca core-prim . write-to-file) (h53c9 core-prim . file->list) (h53c8 core-prim . file->string) (h53c7 core-prim . digit->integer) (h53c6 core-prim . call-with-string-input-port) (h53c5 core-prim . call-with-string-io) (h53c4 core-prim . string-split) (h53c3 core-prim . bytevector-for-each) (h53c2 core-prim . string->regexp) (h53c1 core-prim . rxmatch) (h53c0 core-prim . regexp-replace-all) (h53bf core-prim . hashtable-for-each) (h53be core-prim . call-process) (h53bd core-prim . local-tz-offset) (h53bc core-prim . microseconds) (h53bb core-prim . directory-list) (h53ba core-prim . set-current-directory!) (h53b9 core-prim . expand-path) (h53b8 core-prim . current-directory) (h53b7 core-prim . %spawn) (h53b6 core-prim . %waitpid) (h53b5 core-prim . simple-struct-name) (h53b4 core-prim . simple-struct-set!) (h53b3 core-prim . simple-struct-ref) (h53b2 core-prim . make-simple-struct) (h53b1 core-prim . simple-struct?) (h53b0 core-prim . pointer-ref-c-int64) (h53af core-prim . pointer-ref-c-int32) (h53ae core-prim . pointer-ref-c-int16) (h53ad core-prim . pointer-ref-c-int8) (h53ac core-prim . pointer-ref-c-uint64) (h53ab core-prim . pointer-ref-c-uint32) (h53aa core-prim . pointer-ref-c-uint16) (h53a9 core-prim . pointer-ref-c-uint8) (h53a8 core-prim . pointer-set-c-uint64!) (h53a7 core-prim . pointer-set-c-uint32!) (h53a6 core-prim . pointer-set-c-uint16!) (h53a5 core-prim . pointer-set-c-uint8!) (h53a4 core-prim . pointer-set-c-int64!) (h53a3 core-prim . pointer-set-c-int32!) (h53a2 core-prim . pointer-set-c-int16!) (h53a1 core-prim . pointer-set-c-int8!) (h53a0 core-prim . pointer-set-c-pointer!) (h539f core-prim . pointer-set-c-double!) (h539e core-prim . pointer-set-c-float!) (h539d core-prim . pointer-set-c-long-long!) (h539c core-prim . pointer-set-c-long!) (h539b core-prim . pointer-set-c-int!) (h539a core-prim . pointer-set-c-short!) (h5399 core-prim . pointer-set-c-char!) (h5398 core-prim . pointer-ref-c-pointer) (h5397 core-prim . pointer-ref-c-double) (h5396 core-prim . pointer-ref-c-float) (h5395 core-prim . pointer-ref-c-unsigned-long-long) (h5394 core-prim . pointer-ref-c-signed-long-long) (h5393 core-prim . pointer-ref-c-unsigned-long) (h5392 core-prim . pointer-ref-c-signed-long) (h5391 core-prim . pointer-ref-c-unsigned-int) (h5390 core-prim . pointer-ref-c-signed-int) (h538f core-prim . pointer-ref-c-unsigned-short) (h538e core-prim . pointer-ref-c-signed-short) (h538d core-prim . pointer-ref-c-unsigned-char) (h538c core-prim . pointer-ref-c-signed-char) (h538b core-prim . pointer->integer) (h538a core-prim . integer->pointer) (h5389 core-prim . pointer?) (h5388 core-prim . shared-errno) (h5387 core-prim . %ffi-supported?) (h5386 core-prim . %ffi-pointer->string) (h5385 core-prim . %ffi-call->string-or-zero) (h5384 core-prim . %ffi-call->double) (h5383 core-prim . %ffi-call->void*) (h5382 core-prim . %ffi-call->void) (h5381 core-prim . %ffi-call->char) (h5380 core-prim . %ffi-call->int) (h537f core-prim . %ffi-lookup) (h537e core-prim . %ffi-open) (h537d core-prim . %fork) (h537c core-prim . %pipe) (h537b core-prim . p) (h537a core-prim . open-output-string) (h5379 core-prim . get-output-string) (h5378 core-prim . file-stat-ctime) (h5377 core-prim . file-stat-atime) (h5376 core-prim . file-stat-mtime) (h5375 core-prim . file-size-in-bytes) (h5374 core-prim . file-writable?) (h5373 core-prim . file-executable?) (h5372 core-prim . file-readable?) (h5371 core-prim . file-regular?) (h5370 core-prim . file-symbolic-link?) (h536f core-prim . file-directory?) (h536e core-prim . create-symbolic-link) (h536d core-prim . rename-file) (h536c core-prim . delete-directory) (h536b core-prim . create-directory) (h536a core-prim . get-environment-variables) (h5369 core-prim . get-environment-variable) (h5368 core-prim . get-timeofday) (h5367 core-prim . get-command-line) (h5366 core-prim . sys-display) (h5365 core-prim . whereis) (h5364 core-prim . register) (h5363 core-prim . vm-join!) (h5362 core-prim . vm-set-value!) (h5361 core-prim . vm?) (h5360 core-prim . main-vm?) (h535f core-prim . vm-eval) (h535e core-prim . vm-self) (h535d core-prim . vm-start!) (h535c core-prim . make-vm) (h535b core-prim . mutex-try-lock!) (h535a core-prim . mutex-unlock!) (h5359 core-prim . mutex-lock!) (h5358 core-prim . mutex?) (h5357 core-prim . make-mutex) (h5356 core-prim . condition-variable-notify-all!) (h5355 core-prim . condition-variable-notify!) (h5354 core-prim . condition-variable-wait!) (h5353 core-prim . make-condition-variable) (h5352 core-prim . mosh-executable-path) (h5351 core-prim . make-file-options) (h5350 core-prim . source-info) (h534f core-prim . make-compiler-instruction) (h534e core-prim . make-instruction) (h534d core-prim . set-source-info!) (h534c core-prim . bignum?) (h534b core-prim . fast-equal?) (h534a core-prim . fasl-read) (h5349 core-prim . fasl-write) (h5348 core-prim . time-usage) (h5347 core-prim . os-constant) (h28bc core-prim . make-parameter) (h5346 core-prim . socket-port) (h5345 core-prim . socket-shutdown) (h5344 core-prim . socket-close) (h5343 core-prim . socket-send) (h5342 core-prim . socket-recv!) (h5341 core-prim . socket-recv) (h5340 core-prim . make-server-socket) (h533f core-prim . make-client-socket) (h533e core-prim . socket-accept) (h533d core-prim . socket?) (h533c core-prim . string-upcase) (h533b core-prim . string-titlecase) (h533a core-prim . string-normalize-nfkd) (h5339 core-prim . string-normalize-nfkc) (h5338 core-prim . string-normalize-nfd) (h5337 core-prim . string-normalize-nfc) (h5336 core-prim . string-foldcase) (h5335 core-prim . string-downcase) (h5334 core-prim . string-ci>?) (h5333 core-prim . string-ci>=?) (h5332 core-prim . string-ci=?) (h5331 core-prim . string-ci<?) (h5330 core-prim . string-ci<=?) (h532f core-prim . char-whitespace?) (h532e core-prim . char-upper-case?) (h532d core-prim . char-title-case?) (h532c core-prim . char-numeric?) (h532b core-prim . char-lower-case?) (h532a core-prim . char-general-category) (h5329 core-prim . char-upcase) (h5328 core-prim . char-titlecase) (h5327 core-prim . char-foldcase) (h5326 core-prim . char-downcase) (h5325 core-prim . char-ci>?) (h5324 core-prim . char-ci>=?) (h5323 core-prim . char-ci=?) (h5322 core-prim . char-ci<?) (h5321 core-prim . char-ci<=?) (h5320 core-prim . char-alphabetic?) (h2e92 core-prim . make-variable-transformer) (h3135 core-prim . identifier?) (h3121 core-prim . generate-temporaries) (h3123 core-prim . free-identifier=?) (h3139 core-prim . syntax->datum) (h3137 core-prim . datum->syntax) (h3125 core-prim . bound-identifier=?) (h531f core-prim . record-type-descriptor?) (h531e core-prim . record-predicate) (h531d core-prim . record-mutator) (h531c core-prim . record-constructor) (h531b core-prim . record-accessor) (h531a core-prim . make-record-type-descriptor) (h5319 core-prim . make-record-constructor-descriptor) (h5318 core-prim . record?) (h5317 core-prim . record-type-uid) (h5316 core-prim . record-type-sealed?) (h5315 core-prim . record-type-parent) (h5314 core-prim . record-type-opaque?) (h5313 core-prim . record-type-name) (h5312 core-prim . record-type-generative?) (h5311 core-prim . record-type-field-names) (h5310 core-prim . record-rtd) (h530f core-prim . record-field-mutable?) (h530e core-prim . delete-file) (h530d core-prim . file-exists?) (h530c core-prim . vector-sort!) (h530b core-prim . vector-sort) (h530a core-prim . list-sort) (h5309 core-prim . symbol-hash) (h5308 core-prim . string-ci-hash) (h5307 core-prim . string-hash) (h5306 core-prim . equal-hash) (h5305 core-prim . hashtable-equivalence-function) (h5304 core-prim . make-hashtable) (h5303 core-prim . hashtable-hash-function) (h5302 core-prim . make-eqv-hashtable) (h5301 core-prim . make-eq-hashtable) (h5300 core-prim . hashtable?) (h52ff core-prim . hashtable-update!) (h52fe core-prim . hashtable-size) (h52fd core-prim . hashtable-set!) (h52fc core-prim . hashtable-ref) (h52fb core-prim . hashtable-mutable?) (h52fa core-prim . hashtable-keys) (h52f9 core-prim . hashtable-entries) (h52f8 core-prim . hashtable-delete!) (h52f7 core-prim . hashtable-copy) (h52f6 core-prim . hashtable-contains?) (h52f5 core-prim . hashtable-clear!) (h52f4 core-prim . call-with-output-file) (h52f3 core-prim . call-with-input-file) (h52f2 core-prim . write-char) (h52f1 core-prim . write) (h52f0 core-prim . with-output-to-file) (h52ef core-prim . with-input-from-file) (h52ee core-prim . read-char) (h52ed core-prim . read) (h52ec core-prim . peek-char) (h52eb core-prim . open-output-file) (h52ea core-prim . open-input-file) (h52e9 core-prim . newline) (h52e8 core-prim . display) (h52e7 core-prim . close-output-port) (h52e6 core-prim . close-input-port) (h52e5 core-prim . eof-object?) (h52e4 core-prim . eof-object) (h52e3 core-prim . current-error-port) (h52e2 core-prim . current-output-port) (h52e1 core-prim . current-input-port) (h52e0 core-prim . output-port?) (h52df core-prim . input-port?) (h52de core-prim . utf-8-codec) (h52dd core-prim . utf-16-codec) (h52dc core-prim . transcoder-error-handling-mode) (h52db core-prim . transcoder-eol-style) (h52da core-prim . transcoder-codec) (h52d9 core-prim . transcoded-port) (h52d8 core-prim . textual-port?) (h52d7 core-prim . string->bytevector) (h52d6 core-prim . standard-output-port) (h52d5 core-prim . standard-input-port) (h52d4 core-prim . standard-error-port) (h52d3 core-prim . set-port-position!) (h52d2 core-prim . put-u8) (h52d1 core-prim . put-string) (h52d0 core-prim . put-datum) (h52cf core-prim . put-char) (h52ce core-prim . put-bytevector) (h52cd core-prim . port?) (h52cc core-prim . port-transcoder) (h52cb core-prim . port-position) (h52ca core-prim . port-has-set-port-position!?) (h52c9 core-prim . port-has-port-position?) (h52c8 core-prim . port-eof?) (h52c7 core-prim . output-port-buffer-mode) (h52c6 core-prim . open-string-output-port) (h52c5 core-prim . open-string-input-port) (h52c4 core-prim . open-file-output-port) (h52c3 core-prim . open-file-input/output-port) (h52c2 core-prim . open-file-input-port) (h52c1 core-prim . open-bytevector-output-port) (h52c0 core-prim . open-bytevector-input-port) (h52bf core-prim . native-transcoder) (h52be core-prim . native-eol-style) (h52bd core-prim . make-transcoder) (h52bc core-prim . latin-1-codec) (h4d8d core-prim . make-i/o-write-error) (h4d78 core-prim . make-i/o-read-error) (h4e2e core-prim . make-i/o-port-error) (h4da4 core-prim . make-i/o-invalid-position-error) (h4dbf core-prim . make-i/o-filename-error) (h4dd8 core-prim . make-i/o-file-protection-error) (h4ded core-prim . make-i/o-file-is-read-only-error) (h4e17 core-prim . make-i/o-file-does-not-exist-error) (h4e02 core-prim . make-i/o-file-already-exists-error) (h4d63 core-prim . make-i/o-error) (h4e5e core-prim . make-i/o-encoding-error) (h4e47 core-prim . make-i/o-decoding-error) (h52bb core-prim . make-custom-textual-output-port) (h52ba core-prim . make-custom-textual-input/output-port) (h52b9 core-prim . make-custom-textual-input-port) (h52b8 core-prim . make-custom-binary-output-port) (h52b7 core-prim . make-custom-binary-input/output-port) (h52b6 core-prim . make-custom-binary-input-port) (h52b5 core-prim . make-bytevector) (h52b4 core-prim . lookahead-u8) (h52b3 core-prim . lookahead-char) (h4d8f core-prim . i/o-write-error?) (h4d7a core-prim . i/o-read-error?) (h4e32 core-prim . i/o-port-error?) (h4da8 core-prim . i/o-invalid-position-error?) (h4dc3 core-prim . i/o-filename-error?) (h4dda core-prim . i/o-file-protection-error?) (h4def core-prim . i/o-file-is-read-only-error?) (h4e19 core-prim . i/o-file-does-not-exist-error?) (h4e04 core-prim . i/o-file-already-exists-error?) (h4d65 core-prim . i/o-error?) (h4daa core-prim . i/o-error-position) (h4e34 core-prim . i/o-error-port) (h4dc5 core-prim . i/o-error-filename) (h4e62 core-prim . i/o-encoding-error?) (h4e64 core-prim . i/o-encoding-error-char) (h4e49 core-prim . i/o-decoding-error?) (h52b2 core-prim . get-u8) (h52b1 core-prim . get-string-n!) (h52b0 core-prim . get-string-n) (h52af core-prim . get-string-all) (h52ae core-prim . get-line) (h52ad core-prim . get-datum) (h52ac core-prim . get-char) (h52ab core-prim . get-bytevector-some) (h52aa core-prim . get-bytevector-n!) (h52a9 core-prim . get-bytevector-n) (h52a8 core-prim . get-bytevector-all) (h52a7 core-prim . flush-output-port) (h52a6 core-prim . close-port) (h310f core-prim . scheme-report-environment) (h52a5 core-prim . quotient) (h310d core-prim . null-environment) (h52a4 core-prim . remainder) (h52a3 core-prim . modulo) (h52a2 core-prim . inexact->exact) (h52a1 core-prim . force) (h52a0 core-prim . exact->inexact) (h529f core-prim . make-promise) (h529e core-prim . exit) (h4f99 core-prim . command-line) (h529d core-prim . string-fill!) (h529c core-prim . string-set!) (h529b core-prim . set-cdr!) (h529a core-prim . set-car!) (h5299 core-prim . remove) (h5298 core-prim . remv) (h5297 core-prim . remp) (h5296 core-prim . remq) (h5295 core-prim . partition) (h5294 core-prim . memv) (h5293 core-prim . memq) (h5292 core-prim . memp) (h5291 core-prim . member) (h5290 core-prim . exists) (h528f core-prim . for-all) (h528e core-prim . fold-right) (h528d core-prim . fold-left) (h528c core-prim . find) (h528b core-prim . filter) (h528a core-prim . cons*) (h5289 core-prim . assv) (h5288 core-prim . assq) (h5287 core-prim . assp) (h5286 core-prim . assoc) (h5285 core-prim . call-with-string-output-port) (h5284 core-prim . call-with-port) (h5283 core-prim . call-with-bytevector-output-port) (h5282 core-prim . bytevector->string) (h5281 core-prim . buffer-mode?) (h5280 core-prim . binary-port?) (h527f core-prim . with-exception-handler) (h527e core-prim . raise-continuable) (h527d core-prim . raise) (h3113 core-prim . eval) (h310b core-prim . environment) (h527c core-prim . make-enumeration) (h527b core-prim . enum-set=?) (h527a core-prim . enum-set-universe) (h5279 core-prim . enum-set-union) (h5278 core-prim . enum-set-subset?) (h5277 core-prim . enum-set-projection) (h5276 core-prim . enum-set-member?) (h5275 core-prim . enum-set-intersection) (h5274 core-prim . enum-set-indexer) (h5273 core-prim . enum-set-difference) (h5272 core-prim . enum-set-constructor) (h5271 core-prim . enum-set-complement) (h5270 core-prim . enum-set->list) (h4cd9 core-prim . who-condition?) (h4c51 core-prim . warning?) (h4c90 core-prim . violation?) (h4d50 core-prim . undefined-violation?) (h4d37 core-prim . syntax-violation?) (h4d3b core-prim . syntax-violation-subform) (h4d39 core-prim . syntax-violation-form) (h3133 core-prim . syntax-violation) (h526f core-prim . simple-conditions) (h4c66 core-prim . serious-condition?) (h4cf0 core-prim . non-continuable-violation?) (h4c3a core-prim . message-condition?) (h4cd5 core-prim . make-who-condition) (h4c4f core-prim . make-warning) (h4c8e core-prim . make-violation) (h4d4e core-prim . make-undefined-violation) (h4d31 core-prim . make-syntax-violation) (h4c64 core-prim . make-serious-condition) (h4cee core-prim . make-non-continuable-violation) (h4c36 core-prim . make-message-condition) (h4d18 core-prim . make-lexical-violation) (h4cba core-prim . make-irritants-condition) (h4d03 core-prim . make-implementation-restriction-violation) (h4c79 core-prim . make-error) (h4ca3 core-prim . make-assertion-violation) (h4d1a core-prim . lexical-violation?) (h4cbe core-prim . irritants-condition?) (h4d05 core-prim . implementation-restriction-violation?) (h4c7b core-prim . error?) (h4cdb core-prim . condition-who) (h526e core-prim . condition-predicate) (h4c3c core-prim . condition-message) (h4cc0 core-prim . condition-irritants) (h526d core-prim . condition-accessor) (h526c core-prim . condition) (h4ca5 core-prim . assertion-violation?) (h526b core-prim . condition?) (h526a core-prim . utf32->string) (h5269 core-prim . utf16->string) (h5268 core-prim . utf8->string) (h5267 core-prim . uint-list->bytevector) (h5266 core-prim . u8-list->bytevector) (h5265 core-prim . string->utf8) (h5264 core-prim . string->utf32) (h5263 core-prim . string->utf16) (h5262 core-prim . sint-list->bytevector) (h5261 core-prim . native-endianness) (h5260 core-prim . bytevector?) (h525f core-prim . bytevector=?) (h525e core-prim . bytevector-uint-set!) (h525d core-prim . bytevector-uint-ref) (h525c core-prim . bytevector-u8-set!) (h525b core-prim . bytevector-u8-ref) (h525a core-prim . bytevector-u64-set!) (h5259 core-prim . bytevector-u64-ref) (h5258 core-prim . bytevector-u64-native-set!) (h5257 core-prim . bytevector-u64-native-ref) (h5256 core-prim . bytevector-u32-set!) (h5255 core-prim . bytevector-u32-ref) (h5254 core-prim . bytevector-u32-native-set!) (h5253 core-prim . bytevector-u32-native-ref) (h5252 core-prim . bytevector-u16-set!) (h5251 core-prim . bytevector-u16-ref) (h5250 core-prim . bytevector-u16-native-set!) (h524f core-prim . bytevector-u16-native-ref) (h524e core-prim . bytevector-sint-set!) (h524d core-prim . bytevector-sint-ref) (h524c core-prim . bytevector-s8-set!) (h524b core-prim . bytevector-s8-ref) (h524a core-prim . bytevector-s64-set!) (h5249 core-prim . bytevector-s64-ref) (h5248 core-prim . bytevector-s64-native-set!) (h5247 core-prim . bytevector-s64-native-ref) (h5246 core-prim . bytevector-s32-set!) (h5245 core-prim . bytevector-s32-ref) (h5244 core-prim . bytevector-s32-native-set!) (h5243 core-prim . bytevector-s32-native-ref) (h5242 core-prim . bytevector-s16-set!) (h5241 core-prim . bytevector-s16-ref) (h5240 core-prim . bytevector-s16-native-set!) (h523f core-prim . bytevector-s16-native-ref) (h523e core-prim . bytevector-length) (h523d core-prim . bytevector-ieee-single-ref) (h523c core-prim . bytevector-ieee-single-set!) (h523b core-prim . bytevector-ieee-single-native-set!) (h523a core-prim . bytevector-ieee-single-native-ref) (h5239 core-prim . bytevector-ieee-double-set!) (h5238 core-prim . bytevector-ieee-double-ref) (h5237 core-prim . bytevector-ieee-double-native-set!) (h5236 core-prim . bytevector-ieee-double-native-ref) (h5235 core-prim . bytevector-fill!) (h5234 core-prim . bytevector-copy!) (h5233 core-prim . bytevector-copy) (h5232 core-prim . bytevector->uint-list) (h5231 core-prim . bytevector->u8-list) (h5230 core-prim . bytevector->sint-list) (h4e8e core-prim . no-nans-violation?) (h4e79 core-prim . no-infinities-violation?) (h4e8c core-prim . make-no-nans-violation) (h4e77 core-prim . make-no-infinities-violation) (h522f core-prim . real->flonum) (h522e core-prim . flzero?) (h522d core-prim . fltruncate) (h522c core-prim . fltan) (h522b core-prim . flsqrt) (h522a core-prim . flsin) (h5229 core-prim . flround) (h5228 core-prim . flpositive?) (h5227 core-prim . flonum?) (h5226 core-prim . flodd?) (h5225 core-prim . flnumerator) (h5224 core-prim . flnegative?) (h5223 core-prim . flnan?) (h5222 core-prim . flmod0) (h5221 core-prim . flmod) (h5220 core-prim . flmin) (h521f core-prim . flmax) (h521e core-prim . fllog) (h521d core-prim . flinteger?) (h521c core-prim . flinfinite?) (h521b core-prim . flfloor) (h521a core-prim . flfinite?) (h5219 core-prim . flexpt) (h5218 core-prim . flexp) (h5217 core-prim . fleven?) (h5216 core-prim . fldiv0-and-mod0) (h5215 core-prim . fldiv0) (h5214 core-prim . fldiv-and-mod) (h5213 core-prim . fldiv) (h5212 core-prim . fldenominator) (h5211 core-prim . flcos) (h5210 core-prim . flceiling) (h520f core-prim . flatan) (h520e core-prim . flasin) (h520d core-prim . flacos) (h520c core-prim . flabs) (h520b core-prim . fl>?) (h520a core-prim . fl>=?) (h5209 core-prim . fl=?) (h5208 core-prim . fl<?) (h5207 core-prim . fl<=?) (h5206 core-prim . fl/) (h5205 core-prim . fl-) (h5204 core-prim . fl+) (h5203 core-prim . fl*) (h5202 core-prim . fixnum->flonum) (h5201 core-prim . fxzero?) (h5200 core-prim . fxxor) (h51ff core-prim . fxrotate-bit-field) (h51fe core-prim . fxreverse-bit-field) (h51fd core-prim . fxpositive?) (h51fc core-prim . fxodd?) (h51fb core-prim . fxnot) (h51fa core-prim . fxnegative?) (h51f9 core-prim . fxmod0) (h51f8 core-prim . fxmod) (h51f7 core-prim . fxmin) (h51f6 core-prim . fxmax) (h51f5 core-prim . fxlength) (h51f4 core-prim . fxior) (h51f3 core-prim . fxif) (h51f2 core-prim . fxfirst-bit-set) (h51f1 core-prim . fxeven?) (h51f0 core-prim . fxdiv0-and-mod0) (h51ef core-prim . fxdiv0) (h51ee core-prim . fxdiv-and-mod) (h51ed core-prim . fxdiv) (h51ec core-prim . fxcopy-bit-field) (h51eb core-prim . fxcopy-bit) (h51ea core-prim . fxbit-set?) (h51e9 core-prim . fxbit-field) (h51e8 core-prim . fxbit-count) (h51e7 core-prim . fxarithmetic-shift-right) (h51e6 core-prim . fxarithmetic-shift-left) (h51e5 core-prim . fxarithmetic-shift) (h51e4 core-prim . fxand) (h51e3 core-prim . fx>?) (h51e2 core-prim . fx>=?) (h51e1 core-prim . fx=?) (h51e0 core-prim . fx<?) (h51df core-prim . fx<=?) (h51de core-prim . fx-/carry) (h51dd core-prim . fx-) (h51dc core-prim . fx+/carry) (h51db core-prim . fx+) (h51da core-prim . fx*/carry) (h51d9 core-prim . fx*) (h51d8 core-prim . greatest-fixnum) (h51d7 core-prim . least-fixnum) (h51d6 core-prim . fixnum-width) (h51d5 core-prim . fixnum?) (h51d4 core-prim . bitwise-rotate-bit-field) (h51d3 core-prim . bitwise-reverse-bit-field) (h51d2 core-prim . bitwise-length) (h51d1 core-prim . bitwise-if) (h51d0 core-prim . bitwise-first-bit-set) (h51cf core-prim . bitwise-copy-bit-field) (h51ce core-prim . bitwise-copy-bit) (h51cd core-prim . bitwise-bit-set?) (h51cc core-prim . bitwise-bit-field) (h51cb core-prim . bitwise-bit-count) (h51ca core-prim . bitwise-xor) (h51c9 core-prim . bitwise-ior) (h51c8 core-prim . bitwise-and) (h51c7 core-prim . bitwise-not) (h51c6 core-prim . bitwise-arithmetic-shift-right) (h51c5 core-prim . bitwise-arithmetic-shift-left) (h51c4 core-prim . bitwise-arithmetic-shift) (h51c3 core-prim . zero?) (h51c2 core-prim . vector?) (h51c1 core-prim . vector-set!) (h51c0 core-prim . vector-ref) (h51bf core-prim . vector-map) (h51be core-prim . vector-length) (h51bd core-prim . vector-for-each) (h51bc core-prim . vector-fill!) (h51bb core-prim . vector->list) (h51ba core-prim . vector) (h51b9 core-prim . values) (h51b8 core-prim . truncate) (h51b7 core-prim . tan) (h51b6 core-prim . symbol?) (h51b5 core-prim . symbol=?) (h51b4 core-prim . symbol->string) (h51b3 core-prim . substring) (h51b2 core-prim . string?) (h51b1 core-prim . string>?) (h51b0 core-prim . string>=?) (h51af core-prim . string=?) (h51ae core-prim . string<?) (h51ad core-prim . string<=?) (h51ac core-prim . string-ref) (h51ab core-prim . string-length) (h51aa core-prim . string-for-each) (h51a9 core-prim . string-copy) (h51a8 core-prim . string-append) (h51a7 core-prim . string->symbol) (h51a6 core-prim . string->number) (h51a5 core-prim . string->list) (h51a4 core-prim . string) (h51a3 core-prim . sqrt) (h51a2 core-prim . sin) (h51a1 core-prim . round) (h51a0 core-prim . reverse) (h519f core-prim . real?) (h519e core-prim . real-valued?) (h519d core-prim . real-part) (h519c core-prim . rationalize) (h519b core-prim . rational?) (h519a core-prim . rational-valued?) (h5199 core-prim . procedure?) (h5198 core-prim . positive?) (h5197 core-prim . pair?) (h5196 core-prim . odd?) (h5195 core-prim . numerator) (h5194 core-prim . number?) (h5193 core-prim . number->string) (h5192 core-prim . null?) (h5191 core-prim . not) (h5190 core-prim . negative?) (h518f core-prim . nan?) (h518e core-prim . min) (h518d core-prim . max) (h518c core-prim . map) (h518b core-prim . make-vector) (h518a core-prim . make-string) (h5189 core-prim . make-rectangular) (h5188 core-prim . make-polar) (h5187 core-prim . magnitude) (h5186 core-prim . log) (h5185 core-prim . list?) (h5184 core-prim . list-tail) (h5183 core-prim . list-ref) (h5182 core-prim . list->vector) (h5181 core-prim . list->string) (h5180 core-prim . list) (h517f core-prim . length) (h517e core-prim . lcm) (h517d core-prim . integer?) (h517c core-prim . integer-valued?) (h517b core-prim . integer->char) (h517a core-prim . infinite?) (h5179 core-prim . inexact?) (h5178 core-prim . inexact) (h5177 core-prim . imag-part) (h5176 core-prim . gcd) (h5175 core-prim . for-each) (h5174 core-prim . floor) (h5173 core-prim . finite?) (h5172 core-prim . expt) (h5171 core-prim . exp) (h5170 core-prim . exact?) (h516f core-prim . exact-integer-sqrt) (h516e core-prim . exact) (h516d core-prim . even?) (h516c core-prim . error) (h516b core-prim . eqv?) (h516a core-prim . equal?) (h5169 core-prim . eq?) (h5168 core-prim . dynamic-wind) (h5167 core-prim . div0-and-mod0) (h5166 core-prim . mod0) (h5165 core-prim . div0) (h5164 core-prim . div-and-mod) (h5163 core-prim . mod) (h5162 core-prim . div) (h5161 core-prim . denominator) (h5160 core-prim . cos) (h515f core-prim . cons) (h515e core-prim . complex?) (h515d core-prim . char?) (h515c core-prim . char>?) (h515b core-prim . char>=?) (h515a core-prim . char=?) (h5159 core-prim . char<?) (h5158 core-prim . char<=?) (h5157 core-prim . char->integer) (h5156 core-prim . ceiling) (h5155 core-prim . call-with-values) (h5154 core-prim . call/cc) (h5153 core-prim . call-with-current-continuation) (h5152 core-prim . cddddr) (h5151 core-prim . cdddar) (h5150 core-prim . cddadr) (h514f core-prim . cddaar) (h514e core-prim . cdaddr) (h514d core-prim . cdadar) (h514c core-prim . cdaadr) (h514b core-prim . cdaaar) (h514a core-prim . cadddr) (h5149 core-prim . caddar) (h5148 core-prim . cadadr) (h5147 core-prim . cadaar) (h5146 core-prim . caaddr) (h5145 core-prim . caadar) (h5144 core-prim . caaadr) (h5143 core-prim . caaaar) (h5142 core-prim . cdddr) (h5141 core-prim . cddar) (h5140 core-prim . cdadr) (h513f core-prim . cdaar) (h513e core-prim . caddr) (h513d core-prim . cadar) (h513c core-prim . caadr) (h513b core-prim . caaar) (h513a core-prim . cddr) (h5139 core-prim . cdar) (h5138 core-prim . cadr) (h5137 core-prim . caar) (h5136 core-prim . cdr) (h5135 core-prim . car) (h5134 core-prim . boolean?) (h5133 core-prim . boolean=?) (h5132 core-prim . atan) (h5131 core-prim . assertion-violation) (h312d core-prim . assertion-error) (h5130 core-prim . asin) (h512f core-prim . apply) (h512e core-prim . append) (h512d core-prim . angle) (h512c core-prim . acos) (h512b core-prim . abs) (h512a core-prim . /) (h5129 core-prim . *) (h5128 core-prim . -) (h5127 core-prim . +) (h5126 core-prim . >=) (h5125 core-prim . >) (h5124 core-prim . =) (h5123 core-prim . <=) (h5122 core-prim . <) (h5121 core-prim . library) (h5120 $core-rtd &no-nans-rtd &no-nans-rcd) (h511f $core-rtd &no-infinities-rtd &no-infinities-rcd) (h511e $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (h511d $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (h511c $core-rtd &i/o-port-rtd &i/o-port-rcd) (h511b $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (h511a $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (h5119 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (h5118 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (h5117 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (h5116 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (h5115 $core-rtd &i/o-write-rtd &i/o-write-rcd) (h5114 $core-rtd &i/o-read-rtd &i/o-read-rcd) (h5113 $core-rtd &i/o-rtd &i/o-rcd) (h5112 $core-rtd &undefined-rtd &undefined-rcd) (h5111 $core-rtd &syntax-rtd &syntax-rcd) (h5110 $core-rtd &lexical-rtd &lexical-rcd) (h510f $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (h510e $core-rtd &non-continuable-rtd &non-continuable-rcd) (h510d $core-rtd &who-rtd &who-rcd) (h510c $core-rtd &irritants-rtd &irritants-rcd) (h510b $core-rtd &assertion-rtd &assertion-rcd) (h510a $core-rtd &violation-rtd &violation-rcd) (h5109 $core-rtd &error-rtd &error-rcd) (h5108 $core-rtd &serious-rtd &serious-rcd) (h5107 $core-rtd &warning-rtd &warning-rcd) (h5106 $core-rtd &message-rtd &message-rcd) (h5105 $core-rtd &condition-rtd &condition-rcd) (h5104 macro . define-condition-type) (h5103 macro . define-enumeration) (h5102 macro . define-record-type) (h5101 macro . parent-rtd) (h5100 macro . nongenerative) (h50ff macro . opaque) (h50fe macro . sealed) (h50fd macro . protocol) (h50fc macro . parent) (h50fb macro . immutable) (h50fa macro . mutable) (h50f9 macro . fields) (h50f8 macro . error-handling-mode) (h50f7 macro . file-options) (h50f6 macro . buffer-mode) (h50f5 macro . eol-style) (h50f4 macro . guard) (h50f3 macro . trace-define) (h50f2 macro . trace-lambda) (h50f1 macro . unsyntax-splicing) (h50f0 macro . unsyntax) (h50ef macro . unquote-splicing) (h50ee macro . unquote) (h50ed macro . _) (h50ec macro . else) (h50eb macro . =>) (h50ea macro . ...) (h50e9 macro . assert) (h50e8 macro . endianness) (h50e7 macro . delay) (h50e6 macro . time) (h50e5 macro . do) (h50e4 macro . cond) (h50e3 macro . let*) (h50e2 macro . let) (h50e1 macro . let*-values) (h50e0 macro . let-values) (h50df macro . identifier-syntax) (h50de macro . with-syntax) (h50dd macro . quasisyntax) (h50dc macro . quasiquote) (h50db macro . syntax-rules) (h50da macro . include) (h50d9 macro . define-struct) (h50d8 core-macro . record-constructor-descriptor) (h50d7 core-macro . record-type-descriptor) (h50d6 macro . case) (h50d5 macro . parameterize) (h50d4 macro . unless) (h50d3 macro . when) (h50d2 core-macro . or) (h50d1 core-macro . and) (h50d0 core-macro . if) (h50cf core-macro . letrec*) (h50ce core-macro . letrec) (h50cd core-macro . type-descriptor) (h50cc core-macro . case-lambda) (h50cb core-macro . lambda) (h50ca core-macro . syntax) (h50c9 core-macro . syntax-case) (h50c8 core-macro . quote) (h50c7 core-macro . foreign-call) (h50c6 letrec-syntax) (h50c5 let-syntax) (h50c4 set!) (h50c3 import) (h50c2 begin) (h50c1 module) (h50c0 define-syntax) (h50bf define)) values values '#f '#f '#f '#f) (h2c8f@h2ad0@install-library 'h53fd '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . h53dc) (eval-core . h53db) (set-symbol-value! . h53da) (symbol-value . h53d9) (gensym . h53d8) (void . h53d7)) '() values values '#f '#f '#f '#f) (h2c8f@h2ad0@install-library 'h53fe '(mosh) '() '() '() '() '((set-symbol-value! . h53da) (symbol-value . h53d9) (regexp? . h53d5) (read-line . h53d4) (ungensym . h53d3) (alist->eq-hash-table . h53d2) (assoc-ref . h53d1) (print . h53d0) (format . h53cf) (host-os . h53ce) (library-path . h2aaf) (standard-library-path . h53cd) (file-newer? . h53cc) (stat-mtime . h53cb) (digit->integer . h53c7) (call-with-string-input-port . h53c6) (call-with-string-io . h53c5) (string-split . h53c4) (bytevector-for-each . h53c3) (string->regexp . h53c2) (rxmatch . h53c1) (regexp-replace-all . h53c0) (hashtable-for-each . h53bf) (set-current-directory! . h53ba) (expand-path . h53b9) (current-directory . h53b8) (p . h537b) (get-timeofday . h5368) (get-command-line . h5367) (sys-display . h5366) (whereis . h5365) (register . h5364) (vm-join! . h5363) (vm-set-value! . h5362) (vm? . h5361) (main-vm? . h5360) (vm-eval . h535f) (vm-self . h535e) (vm-start! . h535d) (make-vm . h535c) (mutex-try-lock! . h535b) (mutex-unlock! . h535a) (mutex-lock! . h5359) (mutex? . h5358) (make-mutex . h5357) (condition-variable-notify-all! . h5356) (condition-variable-notify! . h5355) (condition-variable-wait! . h5354) (make-condition-variable . h5353) (mosh-executable-path . h5352) (make-file-options . h5351) (source-info . h5350) (make-compiler-instruction . h534f) (make-instruction . h534e) (set-source-info! . h534d) (bignum? . h534c) (fast-equal? . h534b) (fasl-read . h534a) (fasl-write . h5349) (time-usage . h5348) (os-constant . h5347) (time . h50e6) (include . h50da)) '() values values '#f '#f '#f '#f) (h2c8f@h2ad0@install-library 'h53ff '(system) '() '() '() '() '((write-to-file . h53ca) (file->list . h53c9) (file->string . h53c8) (call-process . h53be) (local-tz-offset . h53bd) (microseconds . h53bc) (directory-list . h53bb) (expand-path . h53b9) (%spawn . h53b7) (%waitpid . h53b6) (simple-struct-name . h53b5) (simple-struct-set! . h53b4) (simple-struct-ref . h53b3) (make-simple-struct . h53b2) (simple-struct? . h53b1) (pointer-ref-c-int64 . h53b0) (pointer-ref-c-int32 . h53af) (pointer-ref-c-int16 . h53ae) (pointer-ref-c-int8 . h53ad) (pointer-ref-c-uint64 . h53ac) (pointer-ref-c-uint32 . h53ab) (pointer-ref-c-uint16 . h53aa) (pointer-ref-c-uint8 . h53a9) (pointer-set-c-uint64! . h53a8) (pointer-set-c-uint32! . h53a7) (pointer-set-c-uint16! . h53a6) (pointer-set-c-uint8! . h53a5) (pointer-set-c-int64! . h53a4) (pointer-set-c-int32! . h53a3) (pointer-set-c-int16! . h53a2) (pointer-set-c-int8! . h53a1) (pointer-set-c-pointer! . h53a0) (pointer-set-c-double! . h539f) (pointer-set-c-float! . h539e) (pointer-set-c-long-long! . h539d) (pointer-set-c-long! . h539c) (pointer-set-c-int! . h539b) (pointer-set-c-short! . h539a) (pointer-set-c-char! . h5399) (pointer-ref-c-pointer . h5398) (pointer-ref-c-double . h5397) (pointer-ref-c-float . h5396) (pointer-ref-c-unsigned-long-long . h5395) (pointer-ref-c-signed-long-long . h5394) (pointer-ref-c-unsigned-long . h5393) (pointer-ref-c-signed-long . h5392) (pointer-ref-c-unsigned-int . h5391) (pointer-ref-c-signed-int . h5390) (pointer-ref-c-unsigned-short . h538f) (pointer-ref-c-signed-short . h538e) (pointer-ref-c-unsigned-char . h538d) (pointer-ref-c-signed-char . h538c) (pointer->integer . h538b) (integer->pointer . h538a) (pointer? . h5389) (shared-errno . h5388) (%ffi-supported? . h5387) (%ffi-pointer->string . h5386) (%ffi-call->string-or-zero . h5385) (%ffi-call->double . h5384) (%ffi-call->void* . h5383) (%ffi-call->void . h5382) (%ffi-call->char . h5381) (%ffi-call->int . h5380) (%ffi-lookup . h537f) (%ffi-open . h537e) (%fork . h537d) (%pipe . h537c) (open-output-string . h537a) (get-output-string . h5379) (file-stat-ctime . h5378) (file-stat-atime . h5377) (file-stat-mtime . h5376) (file-size-in-bytes . h5375) (file-writable? . h5374) (file-executable? . h5373) (file-readable? . h5372) (file-regular? . h5371) (file-symbolic-link? . h5370) (file-directory? . h536f) (create-symbolic-link . h536e) (rename-file . h536d) (delete-directory . h536c) (create-directory . h536b) (get-environment-variables . h536a) (get-environment-variable . h5369) (make-parameter . h28bc) (socket-port . h5346) (socket-shutdown . h5345) (socket-close . h5344) (socket-send . h5343) (socket-recv! . h5342) (socket-recv . h5341) (make-server-socket . h5340) (make-client-socket . h533f) (socket-accept . h533e) (socket? . h533d) (parameterize . h50d5)) '() values values '#f '#f '#f '#f))
((lambda (h4f88@add-library-path! h4f8a@parse-and-add-library-path h4f8c@for-each-with-index h4f8e@rpad h4f90@condition-printer h4f92@record->field-alist h4f94@map-with-index h4f96@repl h4f98@trace-printer h4f9a@command-line h4f9c@local-library-path h4f9e@load/args h4fa0@load h4fa2@ironscheme-build h4fa4@eval-top-level h4fa6@compile-system-libraries h4fa8@compile h4faa@compile->closure h4fac@pre-compile-r6rs-file h4fae@load-r6rs-top-level h4fb0@load-r6rs-top-level-sexp) (begin (set! h4f88@add-library-path! (lambda (h4fd3@path) (h2c7f@h2ab0@library-path (append (h2c7f@h2ab0@library-path) (list h4fd3@path))))) (set! h4f8a@parse-and-add-library-path (lambda (h4fd5@paths h4fd6@message) ((lambda (h4fd9@t) (if h4fd9@t ((lambda (h4fdb@paths) (for-each (lambda (h4fdd@path) (if (file-exists? h4fdd@path) (h4f88@add-library-path! (expand-path h4fdd@path)) (format (current-error-port) h4fd6@message h4fdd@path))) (string-split h4fdb@paths '#\:))) h4fd9@t) (void))) h4fd5@paths))) (set! h4f8c@for-each-with-index (lambda (h4fdf@proc h4fe0@lst) (letrec ((h4fe3@loop (lambda (h4fe5@i h4fe6@lst) (if (null? h4fe6@lst) (if '#f '#f (void)) (begin (h4fdf@proc h4fe5@i (car h4fe6@lst)) (h4fe3@loop (+ h4fe5@i '1) (cdr h4fe6@lst))))))) (h4fe3@loop '1 h4fe0@lst)))) (set! h4f8e@rpad (lambda (h4fe9@str h4fea@pad h4feb@n) ((lambda (h4fef@rest) ((letrec ((h4ff1@loop (lambda (h4ff3@rest h4ff4@ret) (if (<= h4ff3@rest '0) h4ff4@ret (h4ff1@loop (- h4ff3@rest '1) (string-append h4ff4@ret h4fea@pad)))))) h4ff1@loop) h4fef@rest (format '"~a" h4fe9@str))) (- h4feb@n (string-length (format '"~a" h4fe9@str)))))) (set! h4f90@condition-printer (lambda (h4ff7@e h4ff8@port) ((lambda (h4ffc@max-condition-len) (begin (set! h4ffc@max-condition-len (apply max (map (lambda (h500d@c) (string-length (symbol->string (record-type-name (record-rtd h500d@c))))) (simple-conditions h4ff7@e)))) (begin (display '" Condition components:\n" h4ff8@port) (h4f8c@for-each-with-index (lambda (h4ffd@i h4ffe@x) ((lambda (h5001@rtd h5002@fields-alist) (begin (format h4ff8@port '" ~d. ~a" h4ffd@i (h4f8e@rpad (symbol->string (record-type-name h5001@rtd)) '" " h4ffc@max-condition-len)) (if (null? h5002@fields-alist) (newline h4ff8@port) (void)) ((letrec ((h5005@loop (lambda (h5007@first h5008@fields-alist) (if (null? h5008@fields-alist) '() ((lambda (h500b@field) (begin (if (not h5007@first) (display (h4f8e@rpad '"" '" " (+ '4 h4ffc@max-condition-len)) h4ff8@port) (void)) (display '"       " h4ff8@port) (display (car h500b@field) h4ff8@port) (display '": " h4ff8@port) (write (cdr h500b@field) h4ff8@port) (newline h4ff8@port) (h5005@loop '#f (cdr h5008@fields-alist)))) (car h5008@fields-alist)))))) h5005@loop) '#t h5002@fields-alist))) (record-rtd h4ffe@x) (h4f92@record->field-alist h4ffe@x))) (simple-conditions h4ff7@e))))) '#f))) (set! h4f92@record->field-alist (lambda (h500f@r) ((lambda (h5012@ref) (begin (set! h5012@ref (lambda (h501d@rtd h501e@i h501f@x) ((lambda (h5023@val) (if (symbol? h5023@val) (ungensym h5023@val) h5023@val)) ((record-accessor h501d@rtd h501e@i) h501f@x)))) ((letrec ((h5013@loop (lambda (h5015@ret h5016@rtd) (if h5016@rtd (h5013@loop (append h5015@ret (h4f94@map-with-index (lambda (h5019@i h501a@field) (cons h501a@field (h5012@ref h5016@rtd h5019@i h500f@r))) (vector->list (record-type-field-names h5016@rtd)))) (record-type-parent h5016@rtd)) h5015@ret)))) h5013@loop) '() (record-rtd h500f@r)))) '#f))) (set! h4f94@map-with-index (lambda (h5025@proc h5026@lst) ((letrec ((h5029@loop (lambda (h502b@i h502c@lst h502d@ret) (if (null? h502c@lst) (reverse h502d@ret) (h5029@loop (+ h502b@i '1) (cdr h502c@lst) (cons (h5025@proc h502b@i (car h502c@lst)) h502d@ret)))))) h5029@loop) '0 h5026@lst '()))) (set! h4f96@repl (lambda h5031@x ((lambda (h5034@rec) (begin (set! h5034@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (h5037@h5035) (lambda () (with-exception-handler (lambda (h5039@e) ((call/cc (lambda (h503b@h5036) (h5037@h5035 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? h5039@e) (h4f90@condition-printer h5039@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" h5039@e))) (h503b@h5036 (lambda () (raise-continuable h5039@e)))))))))) (lambda () ((letrec ((h503d@loop (lambda (h503f@line h5040@accum) ((lambda (h5044@parentheses-ok? h5046@eval-string-print) (begin (set! h5044@parentheses-ok? (lambda (h504b@text) ((letrec ((h504d@loop (lambda (h504f@chars h5050@p0 h5051@p1) (if (null? h504f@chars) (= '0 h5050@p0 h5051@p1) ((lambda (h5055@t) (if (memv h5055@t '(#\()) (h504d@loop (cdr h504f@chars) (+ h5050@p0 '1) h5051@p1) (if (memv h5055@t '(#\))) (h504d@loop (cdr h504f@chars) (- h5050@p0 '1) h5051@p1) (if (memv h5055@t '(#\[)) (h504d@loop (cdr h504f@chars) h5050@p0 (+ h5051@p1 '1)) (if (memv h5055@t '(#\])) (h504d@loop (cdr h504f@chars) h5050@p0 (- h5051@p1 '1)) (h504d@loop (cdr h504f@chars) h5050@p0 h5051@p1)))))) (car h504f@chars)))))) h504d@loop) (string->list h504b@text) '0 '0))) (set! h5046@eval-string-print (lambda (h5049@text) (if (not (or (string=? '"\n" h5049@text) (= '0 (string-length h5049@text)))) (write (h4fa4@eval-top-level (call-with-port (open-string-input-port h5049@text) read))) (void)))) (if (eof-object? h503f@line) (begin (h5046@eval-string-print h5040@accum) (exit)) ((lambda (h5047@current) (if (h5044@parentheses-ok? h5047@current) (h5046@eval-string-print h5047@current) (h503d@loop (get-line (current-input-port)) h5047@current))) (string-append h5040@accum h503f@line))))) '#f '#f)))) h503d@loop) (get-line (current-input-port)) '""))))))) (newline) (h5034@rec)))) (h5034@rec))) '#f))) (set! h4f98@trace-printer (h29c1@h28bd@make-parameter write)) (set! h4f9a@command-line (h29c1@h28bd@make-parameter (get-command-line))) (set! h4f9c@local-library-path (lambda (h5057@filename) (h2c7f@h2ab0@library-path))) (set! h4f9e@load/args (lambda (h5059@filename . h505b@args) (begin (apply h4fae@load-r6rs-top-level h5059@filename 'load h505b@args) (void)))) (set! h4fa0@load (lambda (h505d@filename) (begin (apply h4fae@load-r6rs-top-level h505d@filename 'load (h4f9a@command-line)) (void)))) (set! h4fa2@ironscheme-build (lambda () (h4fa0@load '"ironscheme-buildscript.ss"))) (set! h4fa4@eval-top-level (lambda (h505f@x) (h4bb4@h3114@eval h505f@x (h4bca@h3140@interaction-environment)))) (set! h4fa6@compile-system-libraries (lambda () (h4fa4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! h4fa8@compile (lambda (h5061@filename) (h4fae@load-r6rs-top-level h5061@filename 'compile))) (set! h4faa@compile->closure (lambda (h5063@filename) (h4fae@load-r6rs-top-level h5063@filename 'closure))) (set! h4fac@pre-compile-r6rs-file (lambda (h5065@filename) (h4fae@load-r6rs-top-level h5065@filename 'compile))) (set! h4fae@load-r6rs-top-level (lambda (h5067@filename h5068@how . h506b@args) ((lambda (h5071@h506e h5072@h5070) ((lambda (h5075@swap) (dynamic-wind h5075@swap (lambda () ((lambda (h5077@x*) ((lambda (h5079@t) (if (memv h5079@t '(closure)) (h4bc9@h313e@pre-compile-r6rs-top-level h5077@x*) (if (memv h5079@t '(load)) ((lambda (h507f@h507c h5080@h507e) ((lambda (h5083@swap) (dynamic-wind h5083@swap (lambda () ((h4bc8@h313c@compile-r6rs-top-level h5077@x*))) h5083@swap)) (lambda () ((lambda (h5085@t) (begin (h507f@h507c h5080@h507e) (set! h5080@h507e h5085@t))) (h507f@h507c))))) h4f9a@command-line (cons h5067@filename (car h506b@args))) (if (memv h5079@t '(compile)) (begin (h4bc8@h313c@compile-r6rs-top-level h5077@x*) (h2c83@h2ab8@serialize-all h29bc@h28b3@serialize-library h2a17@h29d0@compile-core-expr)) (if '#f '#f (void)))))) h5068@how)) (with-input-from-file h5067@filename (lambda () ((letrec ((h5087@f (lambda () ((lambda (h5089@x) (if (eof-object? h5089@x) '() (cons h5089@x (h5087@f)))) (h29b4@h28a3@read-annotated))))) h5087@f)))))) h5075@swap)) (lambda () ((lambda (h508b@t) (begin (h5071@h506e h5072@h5070) (set! h5072@h5070 h508b@t))) (h5071@h506e))))) h2c7f@h2ab0@library-path (h4f9c@local-library-path h5067@filename)))) (set! h4fb0@load-r6rs-top-level-sexp (lambda (h508d@import-spec h508e@thunk) ((lambda (h5095@h5092 h5096@h5094) ((lambda (h5099@swap) (dynamic-wind h5099@swap (lambda () ((lambda (h509f@h509c h50a0@h509e) ((lambda (h50a3@swap) (dynamic-wind h50a3@swap (lambda () ((h4bc8@h313c@compile-r6rs-top-level (list (cons 'import h508d@import-spec) (list h508e@thunk))))) h50a3@swap)) (lambda () ((lambda (h50a5@t) (begin (h509f@h509c h50a0@h509e) (set! h50a0@h509e h50a5@t))) (h509f@h509c))))) h4f9a@command-line '())) h5099@swap)) (lambda () ((lambda (h50a7@t) (begin (h5095@h5092 h5096@h5094) (set! h5096@h5094 h50a7@t))) (h5095@h5092))))) h2c7f@h2ab0@library-path (h4f9c@local-library-path '"")))) (begin (set! h50bd@h4fb0@load-r6rs-top-level-sexp h4fb0@load-r6rs-top-level-sexp) (set! h50bc@h4fae@load-r6rs-top-level h4fae@load-r6rs-top-level) (set! h50bb@h4fac@pre-compile-r6rs-file h4fac@pre-compile-r6rs-file) (set! h50ba@h4faa@compile->closure h4faa@compile->closure) (set! h50b9@h4fa8@compile h4fa8@compile) (set! h50b8@h4fa6@compile-system-libraries h4fa6@compile-system-libraries) (set! h50b7@h4fa4@eval-top-level h4fa4@eval-top-level) (set! h50b6@h4fa2@ironscheme-build h4fa2@ironscheme-build) (set! h50b5@h4fa0@load h4fa0@load) (set! h50b4@h4f9e@load/args h4f9e@load/args) (set! h50b3@h4f9c@local-library-path h4f9c@local-library-path) (set! h50b2@h4f9a@command-line h4f9a@command-line) (set! h50b1@h4f98@trace-printer h4f98@trace-printer) (set! h50b0@h4f96@repl h4f96@repl) (set! h50af@h4f94@map-with-index h4f94@map-with-index) (set! h50ae@h4f92@record->field-alist h4f92@record->field-alist) (set! h50ad@h4f90@condition-printer h4f90@condition-printer) (set! h50ac@h4f8e@rpad h4f8e@rpad) (set! h50ab@h4f8c@for-each-with-index h4f8c@for-each-with-index) (set! h50aa@h4f8a@parse-and-add-library-path h4f8a@parse-and-add-library-path) (set! h50a9@h4f88@add-library-path! h4f88@add-library-path!) (h2c84@h2aba@current-precompiled-library-loader h29bd@h28b5@load-serialized-library) (set-symbol-value! 'load h4fa0@load) (set-symbol-value! 'pre-compile-r6rs-file h4fac@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs h4fa4@eval-top-level) (set-symbol-value! 'int-env-syms h4bab@h3102@interaction-environment-symbols) (set-symbol-value! 'expanded2core h2a16@h29ce@expanded->core) (set-symbol-value! 'trace-printer h4f98@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (h4fb1@c) (condition (h4ee5@h4cef@make-non-continuable-violation) (h4edb@h4cd6@make-who-condition 'raise) (h4e9f@h4c37@make-message-condition '"returned from non-continuable exception") (h4ed1@h4cbb@make-irritants-condition (list h4fb1@c))))) (h4f8a@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (h4f8a@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (h4f88@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (h4f88@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (h4f88@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (h4fb3@prefix) (h2c80@h2ab2@library-extensions (h4fb3@prefix '".mosh" (h2c80@h2ab2@library-extensions)))) (lambda (h4fb5@ext h4fb6@ls) (append (map (lambda (h4fb9@x) (string-append h4fb5@ext h4fb9@x)) h4fb6@ls) h4fb6@ls))) ((lambda (h4fbb@args h4fbc@port) ((lambda (h4fc0@ref) (begin (set! h4fc0@ref (lambda (h4fcb@rtd h4fcc@i h4fcd@x) ((lambda (h4fd1@val) (if (symbol? h4fd1@val) (ungensym h4fd1@val) h4fd1@val)) ((record-accessor h4fcb@rtd h4fcc@i) h4fcd@x)))) (with-exception-handler (lambda (h4fc1@c) (if (condition? h4fc1@c) (h4f90@condition-printer h4fc1@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" h4fc1@c))) (lambda () (if ((call/cc (lambda (h4fc5@h4fc3) (lambda () (with-exception-handler (lambda (h4fc7@c) ((call/cc (lambda (h4fc9@h4fc4) (h4fc5@h4fc3 (lambda () (if '#t '#f (h4fc9@h4fc4 (lambda () (raise-continuable h4fc7@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (h4fb0@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? h4fbb@args) (h4f96@repl) (h4fae@load-r6rs-top-level (car h4fbb@args) 'load (cdr h4fbb@args)))))))) '#f)) (h4f9a@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
