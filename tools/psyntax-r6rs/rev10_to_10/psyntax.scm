;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (k2778@read-annotated k277a@annotation-stripped k277c@annotation? k277e@annotation-source k2780@annotation-expression k2782@scm->fasl k2784@fasl-save k2786@fasl-load k2788@serialize-library k278a@load-serialized-library k278c@make-record-printer k278e@compile-core k2790@read-library-source-file k2792@make-parameter k27fa@file-options-spec) (begin (set! k2778@read-annotated read) (set! k277a@annotation-stripped (lambda (k27fb@x) (k2780@annotation-expression k27fb@x))) (set! k277c@annotation? (lambda (k27fd@x) (source-info k27fd@x))) (set! k277e@annotation-source (lambda (k27ff@x) (source-info k27ff@x))) (set! k2780@annotation-expression (lambda (k2801@x) (if (pair? k2801@x) (cons (car k2801@x) (cdr k2801@x)) (display '"line:46\n")))) (set! k2782@scm->fasl (lambda (k2803@filename) (string-append k2803@filename '".mosh-fasl"))) (set! k2784@fasl-save (lambda (k2805@filename k2806@obj) (call-with-port (open-file-output-port k2805@filename) (lambda (k2809@port) ((symbol-value 'fasl-write!) k2806@obj k2809@port))))) (set! k2786@fasl-load (lambda (k280b@filename) (call-with-port (open-file-input-port k280b@filename) (symbol-value 'fasl-read!)))) (set! k2788@serialize-library (lambda (k280d@filename k280e@obj) (begin (format '#t '"serialize-library ~a\n..." k280d@filename) ((lambda (k2811@expanded2core) ((lambda (k2813@compile) ((lambda (k2815@code) ((lambda (k2817@pivot) ((lambda (k2819@visit) ((lambda () (begin (set-car! k2817@pivot k2819@visit) ((lambda (k281b@pivot) ((lambda (k281d@invoke) ((lambda () (set-car! k281b@pivot k281d@invoke)))) (k2813@compile (k2811@expanded2core (car k281b@pivot))))) (cdr k2817@pivot)))))) (k2813@compile (k2811@expanded2core (car k2817@pivot))))) (cddddr (cddddr k2815@code)))) k280e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (k281f@fasl-file) (begin (if (file-exists? k281f@fasl-file) (delete-file k281f@fasl-file) (void)) ((call/cc (lambda (k2823@k2821) (lambda () (with-exception-handler (lambda (k2825@c) ((call/cc (lambda (k2827@k2822) (k2823@k2821 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " k280d@filename) (if (file-exists? k281f@fasl-file) (delete-file k281f@fasl-file) (void)) '#f) (k2827@k2822 (lambda () (raise-continuable k2825@c)))))))))) (lambda () (begin (k2784@fasl-save k281f@fasl-file k280e@obj) (display '"OK\n")))))))))) (k2782@scm->fasl k280d@filename))))) (set! k278a@load-serialized-library (lambda (k2829@filename k282a@obj) ((lambda (k282d@fasl-file) (if (and (file-exists? k282d@fasl-file) ((symbol-value 'file-newer?) k282d@fasl-file k2829@filename)) ((lambda (k282f@expanded2core) ((lambda (k2831@eval-compiled-core) ((lambda (k2833@code) ((lambda (k2835@pivot) ((lambda (k2837@visit) ((lambda (k2839@visit-proc) ((lambda () (begin (set-car! k2835@pivot k2839@visit-proc) ((lambda (k283b@pivot) ((lambda (k283d@invoke) ((lambda () (begin (set-car! k283b@pivot (lambda () (k2831@eval-compiled-core k283d@invoke))) (apply k282a@obj k2833@code))))) (car k283b@pivot))) (cdr k2835@pivot)) '#t)))) (lambda () (k2831@eval-compiled-core k2837@visit)))) (car k2835@pivot))) (cddddr (cddddr k2833@code)))) (k2786@fasl-load k282d@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (k2782@scm->fasl k2829@filename)))) (set! k278c@make-record-printer (lambda (k283f@name k2840@printer) (lambda k2843@x (begin (display '"record printer") (for-each display k2843@x))))) (set! k278e@compile-core (lambda k2845@x (apply error 'comile-core '"not implementated" k2845@x))) (set! k2790@read-library-source-file (lambda (k2847@file-name) (with-input-from-file k2847@file-name k2778@read-annotated))) (set! k2792@make-parameter (lambda k2857 ((lambda (k2858) (if (= k2858 '1) (apply (lambda (k2849@x) (k2792@make-parameter k2849@x (lambda (k284b@x) k284b@x))) k2857) (if (= k2858 '2) (apply (lambda (k284d@x k284e@fender) ((lambda (k2851@x) (lambda k2855 ((lambda (k2856) (if (= k2856 '0) (apply (lambda () k2851@x) k2855) (if (= k2856 '1) (apply (lambda (k2853@v) (set! k2851@x (k284e@fender k2853@v))) k2855) (error 'apply '"invalid arg count")))) (length k2855)))) (k284e@fender k284d@x))) k2857) (error 'apply '"invalid arg count")))) (length k2857)))) (set! k27fa@file-options-spec (lambda (k2859@x) k2859@x)) (begin (set! k2869@k27fa@file-options-spec k27fa@file-options-spec) (set! k2868@k2792@make-parameter k2792@make-parameter) (set! k2867@k2790@read-library-source-file k2790@read-library-source-file) (set! k2866@k278e@compile-core k278e@compile-core) (set! k2865@k278c@make-record-printer k278c@make-record-printer) (set! k2864@k278a@load-serialized-library k278a@load-serialized-library) (set! k2863@k2788@serialize-library k2788@serialize-library) (set! k2862@k2786@fasl-load k2786@fasl-load) (set! k2861@k2784@fasl-save k2784@fasl-save) (set! k2860@k2782@scm->fasl k2782@scm->fasl) (set! k285f@k2780@annotation-expression k2780@annotation-expression) (set! k285e@k277e@annotation-source k277e@annotation-source) (set! k285d@k277c@annotation? k277c@annotation?) (set! k285c@k277a@annotation-stripped k277a@annotation-stripped) (set! k285b@k2778@read-annotated k2778@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k286e@current-primitive-locations k2870@mutable? k2872@rewriter k2874@expanded->core k2876@compile-core-expr k2878@pretty-print k287a@compile-core-expr-to-port) (begin (set! k286e@current-primitive-locations (k2868@k2792@make-parameter (lambda (k287b@x) '#f) (lambda (k287d@p) k287d@p))) (set! k2870@mutable? (lambda (k287f@x) (or (pair? k287f@x) (vector? k287f@x) (hashtable? k287f@x)))) (set! k2872@rewriter (lambda (k2881@quote-hack?) ((lambda (k2884@f) (begin (set! k2884@f (lambda (k2885@x) (if (pair? k2885@x) ((lambda (k2887@t) (if (memv k2887@t '(quote)) (if (and k2881@quote-hack? (k2870@mutable? (cadr k2885@x))) ((lambda (k2889@g) (begin (set-symbol-value! k2889@g (cadr k2885@x)) k2889@g)) (gensym)) k2885@x) (if (memv k2887@t '(case-lambda)) (cons 'case-lambda (map (lambda (k288b@x) (cons (car k288b@x) (map k2884@f (cdr k288b@x)))) (cdr k2885@x))) (if (memv k2887@t '(lambda)) (cons* 'lambda (cadr k2885@x) (map k2884@f (cddr k2885@x))) (if (memv k2887@t '(letrec)) ((lambda (k288d@bindings k288e@body*) ((lambda (k2891@lhs* k2892@rhs*) (cons* 'letrec (map list k2891@lhs* (map k2884@f k2892@rhs*)) (map k2884@f k288e@body*))) (map car k288d@bindings) (map cadr k288d@bindings))) (cadr k2885@x) (cddr k2885@x)) (if (memv k2887@t '(letrec*)) ((lambda (k2895@bindings k2896@body*) ((lambda (k2899@lhs* k289a@rhs*) (cons* 'letrec* (map list k2899@lhs* (map k2884@f k289a@rhs*)) (map k2884@f k2896@body*))) (map car k2895@bindings) (map cadr k2895@bindings))) (cadr k2885@x) (cddr k2885@x)) (if (memv k2887@t '(library-letrec*)) ((lambda (k289d@name k289e@x) ((lambda (k28a1@bindings k28a2@body*) ((lambda (k28a5@lhs* k28a6@lhs** k28a7@rhs*) (cons* 'library-letrec* k289d@name (map list k28a5@lhs* k28a6@lhs** (map k2884@f k28a7@rhs*)) (map k2884@f k28a2@body*))) (map car k28a1@bindings) (map cadr k28a1@bindings) (map caddr k28a1@bindings))) (cadr k289e@x) (cddr k289e@x))) (cadr k2885@x) (cdr k2885@x)) (if (memv k2887@t '(begin)) (cons 'begin (map k2884@f (cdr k2885@x))) (if (memv k2887@t '(set!)) (list 'set! (cadr k2885@x) (k2884@f (caddr k2885@x))) (if (memv k2887@t '(primitive)) ((lambda (k28ab@op) ((lambda (k28ad@t) (if k28ad@t ((lambda (k28af@loc) k28af@loc) k28ad@t) k28ab@op)) ((k286e@current-primitive-locations) k28ab@op))) (cadr k2885@x)) (if (memv k2887@t '(define)) k2885@x (if (list? k2885@x) (map k2884@f k2885@x) (error 'rewrite '"invalid form ~s ~s" k2885@x (list? k2885@x)))))))))))))) (car k2885@x)) k2885@x))) k2884@f)) '#f))) (set! k2874@expanded->core (lambda (k28b1@x) ((k2872@rewriter '#f) k28b1@x))) (set! k2876@compile-core-expr (lambda (k28b3@x) ((k2872@rewriter '#f) k28b3@x))) (set! k2878@pretty-print write) (set! k287a@compile-core-expr-to-port (lambda (k28b5@x k28b6@p) (k2878@pretty-print ((k2872@rewriter '#f) k28b5@x) k28b6@p))) (begin (set! k28bf@k287a@compile-core-expr-to-port k287a@compile-core-expr-to-port) (set! k28be@k2878@pretty-print k2878@pretty-print) (set! k28bd@k2876@compile-core-expr k2876@compile-core-expr) (set! k28bc@k2874@expanded->core k2874@expanded->core) (set! k28bb@k2872@rewriter k2872@rewriter) (set! k28ba@k2870@mutable? k2870@mutable?) (set! k28b9@k286e@current-primitive-locations k286e@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (k290e@make-collection k2910@current-library-collection k2916@k2911 k2918@k2913 k291a@k2912 k291d@library? k291f@make-library k2921@library-id k2923@library-name k2925@library-version k2927@library-imp* k2929@library-vis* k292b@library-inv* k292d@library-subst k292f@library-env k2931@library-visit-state k2933@library-invoke-state k2935@library-visit-code k2937@library-invoke-code k2939@library-visible? k293b@library-source-file-name k293d@set-library-id! k293f@set-library-name! k2941@set-library-version! k2943@set-library-imp*! k2945@set-library-vis*! k2947@set-library-inv*! k2949@set-library-subst! k294b@set-library-env! k294d@set-library-visit-state! k294f@set-library-invoke-state! k2951@set-library-visit-code! k2953@set-library-invoke-code! k2955@set-library-visible?! k2957@set-library-source-file-name! k2959@rp k295b@find-dependencies k295d@find-library-by k295f@library-path k2961@library-extensions k2963@library-name->file-name k2965@file-locator k2967@serialize-all k2969@current-precompiled-library-loader k296b@try-load-from-file k296d@library-loader k296f@current-library-expander k2971@external-pending-libraries k2973@find-external-library k2975@find-library-by-name k2977@library-exists? k2979@find-library-by-spec/die k297b@label->binding-table k297d@install-library-record k297f@install-library k2981@imported-label->binding k2983@invoke-library k2985@visit-library k2987@invoke-library-by-spec k2989@installed-libraries k298b@library-spec) (begin (set! k290e@make-collection (lambda () ((lambda (k298c@set) ((lambda (k298f@set-cons) (begin (set! k298f@set-cons (lambda (k2994@x k2995@ls) (if (memq k2994@x k2995@ls) k2995@ls (cons k2994@x k2995@ls)))) (lambda k2992 ((lambda (k2993) (if (= k2993 '0) (apply (lambda () k298c@set) k2992) (if (= k2993 '1) (apply (lambda (k2990@x) (set! k298c@set (k298f@set-cons k2990@x k298c@set))) k2992) (error 'apply '"invalid arg count")))) (length k2992))))) '#f)) '()))) (set! k2910@current-library-collection (k2868@k2792@make-parameter (k290e@make-collection) (lambda (k2998@x) (begin (if (not (procedure? k2998@x)) (assertion-violation 'current-library-collection '"not a procedure" k2998@x) (void)) k2998@x)))) (set! k2916@k2911 (make-record-type-descriptor 'library '#f 'k2914 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! k2918@k2913 '#f) (set! k291a@k2912 (make-record-constructor-descriptor k2916@k2911 '#f k2918@k2913)) (set! k291d@library? (record-predicate k2916@k2911)) (set! k291f@make-library (record-constructor k291a@k2912)) (set! k2921@library-id (record-accessor k2916@k2911 '0)) (set! k2923@library-name (record-accessor k2916@k2911 '1)) (set! k2925@library-version (record-accessor k2916@k2911 '2)) (set! k2927@library-imp* (record-accessor k2916@k2911 '3)) (set! k2929@library-vis* (record-accessor k2916@k2911 '4)) (set! k292b@library-inv* (record-accessor k2916@k2911 '5)) (set! k292d@library-subst (record-accessor k2916@k2911 '6)) (set! k292f@library-env (record-accessor k2916@k2911 '7)) (set! k2931@library-visit-state (record-accessor k2916@k2911 '8)) (set! k2933@library-invoke-state (record-accessor k2916@k2911 '9)) (set! k2935@library-visit-code (record-accessor k2916@k2911 '10)) (set! k2937@library-invoke-code (record-accessor k2916@k2911 '11)) (set! k2939@library-visible? (record-accessor k2916@k2911 '12)) (set! k293b@library-source-file-name (record-accessor k2916@k2911 '13)) (set! k293d@set-library-id! (record-mutator k2916@k2911 '0)) (set! k293f@set-library-name! (record-mutator k2916@k2911 '1)) (set! k2941@set-library-version! (record-mutator k2916@k2911 '2)) (set! k2943@set-library-imp*! (record-mutator k2916@k2911 '3)) (set! k2945@set-library-vis*! (record-mutator k2916@k2911 '4)) (set! k2947@set-library-inv*! (record-mutator k2916@k2911 '5)) (set! k2949@set-library-subst! (record-mutator k2916@k2911 '6)) (set! k294b@set-library-env! (record-mutator k2916@k2911 '7)) (set! k294d@set-library-visit-state! (record-mutator k2916@k2911 '8)) (set! k294f@set-library-invoke-state! (record-mutator k2916@k2911 '9)) (set! k2951@set-library-visit-code! (record-mutator k2916@k2911 '10)) (set! k2953@set-library-invoke-code! (record-mutator k2916@k2911 '11)) (set! k2955@set-library-visible?! (record-mutator k2916@k2911 '12)) (set! k2957@set-library-source-file-name! (record-mutator k2916@k2911 '13)) (set! k2959@rp (k2865@k278c@make-record-printer 'library (lambda (k299a@x k299b@p k299c@wr) (begin (if (not (k291d@library? k299a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (k2925@library-version k299a@x)) (k2923@library-name k299a@x) (append (k2923@library-name k299a@x) (list (k2925@library-version k299a@x))))) k299b@p))))) (set! k295b@find-dependencies (lambda (k29a0@ls) (if (null? k29a0@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! k295d@find-library-by (lambda (k29a2@pred) ((letrec ((k29a4@f (lambda (k29a6@ls) (if (null? k29a6@ls) '#f (if (k29a2@pred (car k29a6@ls)) (car k29a6@ls) (k29a4@f (cdr k29a6@ls))))))) k29a4@f) ((k2910@current-library-collection))))) (set! k295f@library-path (k2868@k2792@make-parameter '(".") (lambda (k29a8@x) (if (and (list? k29a8@x) (for-all string? k29a8@x)) (map (lambda (k29aa@x) k29aa@x) k29a8@x) (assertion-violation 'library-path '"not a list of strings" k29a8@x))))) (set! k2961@library-extensions (k2868@k2792@make-parameter '(".sls" ".ss" ".scm") (lambda (k29ac@x) (if (and (list? k29ac@x) (for-all string? k29ac@x)) (map (lambda (k29ae@x) k29ae@x) k29ac@x) (assertion-violation 'library-extensions '"not a list of strings" k29ac@x))))) (set! k2963@library-name->file-name (lambda (k29b0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (k29b6@k29b3 k29b7@k29b5) ((lambda (k29ba@extract k29bb@p) ((lambda (k29bf@display-hex) (begin (set! k29bf@display-hex (lambda (k29c8@n) (if (<= '0 k29c8@n '9) (display k29c8@n k29bb@p) (display (integer->char (+ (char->integer '#\a) (- k29c8@n '10))) k29bb@p)))) (begin ((letrec ((k29c0@f (lambda (k29c2@ls) (if (not (null? k29c2@ls)) (begin (display '"/" k29bb@p) (for-each (lambda (k29c4@c) (if (or (char<=? '#\a k29c4@c '#\z) (char<=? '#\A k29c4@c '#\Z) (char<=? '#\0 k29c4@c '#\9) (memv k29c4@c '(#\- #\. #\_ #\~))) (display k29c4@c k29bb@p) (begin (display '"%" k29bb@p) ((lambda (k29c6@n) (begin (k29bf@display-hex (quotient k29c6@n '16)) (k29bf@display-hex (remainder k29c6@n '16)))) (char->integer k29c4@c))))) (string->list (symbol->string (car k29c2@ls)))) (k29c0@f (cdr k29c2@ls))) (void))))) k29c0@f) k29b0@x) (k29ba@extract)))) '#f)) k29b7@k29b5 k29b6@k29b3))))) (set! k2965@file-locator (k2868@k2792@make-parameter (lambda (k29ca@x) ((lambda (k29cc@str) ((letrec ((k29ce@f (lambda (k29d0@ls k29d1@exts k29d2@failed-list) (if (null? k29d0@ls) ((lambda () ((lambda (k29de@k29d9 k29e0@k29db k29e2@k29da k29e5@k29d8 k29e7@make-library-resolution-condition k29e9@k29d6 k29eb@k29d7 k29ed@library-resolution-condition? k29ef@condition-library k29f1@condition-files) (begin (set! k29de@k29d9 (make-record-type-descriptor '&library-resolution k4c7f@k49c6@&condition-rtd 'k29dc '#f '#f '#((immutable library) (immutable files)))) (set! k29e0@k29db '#f) (set! k29e2@k29da (make-record-constructor-descriptor k29de@k29d9 k4c80@k49c8@&condition-rcd k29e0@k29db)) (set! k29e5@k29d8 (record-predicate k29de@k29d9)) (set! k29e7@make-library-resolution-condition (record-constructor k29e2@k29da)) (set! k29e9@k29d6 (record-accessor k29de@k29d9 '0)) (set! k29eb@k29d7 (record-accessor k29de@k29d9 '1)) (set! k29ed@library-resolution-condition? (condition-predicate k29de@k29d9)) (set! k29ef@condition-library (condition-accessor k29de@k29d9 k29e9@k29d6)) (set! k29f1@condition-files (condition-accessor k29de@k29d9 k29eb@k29d7)) (raise (condition (k4c9f@k4a60@make-error) (k4cc1@k4abc@make-who-condition 'expander) (k4c85@k4a1d@make-message-condition '"cannot locate library in library-path") (k29e7@make-library-resolution-condition k29ca@x (reverse k29d2@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? k29d1@exts) (k29ce@f (cdr k29d0@ls) (k2961@library-extensions) k29d2@failed-list) ((lambda (k29f2@name) (if (file-exists? k29f2@name) k29f2@name (k29ce@f k29d0@ls (cdr k29d1@exts) (cons k29f2@name k29d2@failed-list)))) (string-append (car k29d0@ls) k29cc@str (car k29d1@exts)))))))) k29ce@f) (k295f@library-path) (k2961@library-extensions) '())) (k2963@library-name->file-name k29ca@x))) (lambda (k29f4@f) (if (procedure? k29f4@f) k29f4@f (assertion-violation 'file-locator '"not a procedure" k29f4@f))))) (set! k2967@serialize-all (lambda (k29f6@serialize k29f7@compile) ((lambda (k29fb@library-desc) (begin (set! k29fb@library-desc (lambda (k29fe@x) (list (k2921@library-id k29fe@x) (k2923@library-name k29fe@x)))) (for-each (lambda (k29fc@x) (if (k293b@library-source-file-name k29fc@x) (k29f6@serialize (k293b@library-source-file-name k29fc@x) (list (k2921@library-id k29fc@x) (k2923@library-name k29fc@x) (k2925@library-version k29fc@x) (map k29fb@library-desc (k2927@library-imp* k29fc@x)) (map k29fb@library-desc (k2929@library-vis* k29fc@x)) (map k29fb@library-desc (k292b@library-inv* k29fc@x)) (k292d@library-subst k29fc@x) (k292f@library-env k29fc@x) (k29f7@compile (k2935@library-visit-code k29fc@x)) (k29f7@compile (k2937@library-invoke-code k29fc@x)) (k2939@library-visible? k29fc@x))) (void))) ((k2910@current-library-collection))))) '#f))) (set! k2969@current-precompiled-library-loader (k2868@k2792@make-parameter (lambda (k2a00@filename k2a01@sk) '#f))) (set! k296b@try-load-from-file (lambda (k2a04@filename) ((k2969@current-precompiled-library-loader) k2a04@filename (lambda k2a2a ((lambda (k2a2b) (if (= k2a2b '11) (apply (lambda (k2a06@id k2a07@name k2a08@ver k2a09@imp* k2a0a@vis* k2a0b@inv* k2a0c@exp-subst k2a0d@exp-env k2a0e@visit-proc k2a0f@invoke-proc k2a10@visible?) ((letrec ((k2a1c@f (lambda (k2a1e@deps) (if (null? k2a1e@deps) (begin (k297f@install-library k2a06@id k2a07@name k2a08@ver k2a09@imp* k2a0a@vis* k2a0b@inv* k2a0c@exp-subst k2a0d@exp-env k2a0e@visit-proc k2a0f@invoke-proc '#f '#f k2a10@visible? '#f) '#t) ((lambda (k2a20@d) ((lambda (k2a22@label k2a23@dname) ((lambda (k2a26@l) (if (and (k291d@library? k2a26@l) (eq? k2a22@label (k2921@library-id k2a26@l))) (k2a1c@f (cdr k2a1e@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" k2a07@name k2a23@dname k2a04@filename k2a26@l k2a22@label (k2921@library-id k2a26@l)) '#f))) (k2975@find-library-by-name k2a23@dname))) (car k2a20@d) (cadr k2a20@d))) (car k2a1e@deps)))))) k2a1c@f) (append k2a09@imp* k2a0a@vis* k2a0b@inv*))) k2a2a) (if (>= k2a2b '0) (apply (lambda k2a28@others '#f) k2a2a) (error 'apply '"invalid arg count")))) (length k2a2a)))))) (set! k296d@library-loader (k2868@k2792@make-parameter (lambda (k2a2c@x) ((lambda (k2a2e@file-name) (if (not k2a2e@file-name) (assertion-violation '#f '"cannot file library" k2a2c@x) (or (k296b@try-load-from-file k2a2e@file-name) ((k296f@current-library-expander) (k2867@k2790@read-library-source-file k2a2e@file-name) k2a2e@file-name (lambda (k2a30@name) (if (not (fast-equal? k2a30@name k2a2c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (k2a36@k2a33 k2a37@k2a35) ((lambda (k2a3a@e k2a3b@p) (begin (display '"expected to find library " k2a3b@p) (write k2a2c@x k2a3b@p) (display '" in file " k2a3b@p) (display k2a2e@file-name k2a3b@p) (display '", found " k2a3b@p) (write k2a30@name k2a3b@p) (display '" instead" k2a3b@p) (k2a3a@e))) k2a37@k2a35 k2a36@k2a33)))) (void))))))) ((k2965@file-locator) k2a2c@x))) (lambda (k2a3e@f) (if (procedure? k2a3e@f) k2a3e@f (assertion-violation 'library-locator '"not a procedure" k2a3e@f))))) (set! k296f@current-library-expander (k2868@k2792@make-parameter (lambda (k2a40@x) (assertion-violation 'library-expander '"not initialized")) (lambda (k2a42@f) (if (procedure? k2a42@f) k2a42@f (assertion-violation 'library-expander '"not a procedure" k2a42@f))))) (set! k2971@external-pending-libraries (k2868@k2792@make-parameter '())) (set! k2973@find-external-library (lambda (k2a44@name) (begin (if (member k2a44@name (k2971@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" k2a44@name) (void)) ((lambda (k2a4a@k2a47 k2a4b@k2a49) ((lambda (k2a4e@swap) (dynamic-wind k2a4e@swap (lambda () (begin ((k296d@library-loader) k2a44@name) (or (k295d@find-library-by (lambda (k2a50@x) (fast-equal? (k2923@library-name k2a50@x) k2a44@name))) (assertion-violation '#f '"handling external library did not yield the correct library" k2a44@name)))) k2a4e@swap)) (lambda () ((lambda (k2a52@t) (begin (k2a4a@k2a47 k2a4b@k2a49) (set! k2a4b@k2a49 k2a52@t))) (k2a4a@k2a47))))) k2971@external-pending-libraries (cons k2a44@name (k2971@external-pending-libraries)))))) (set! k2975@find-library-by-name (lambda (k2a54@name) (or (k295d@find-library-by (lambda (k2a56@x) (fast-equal? (k2923@library-name k2a56@x) k2a54@name))) (k2973@find-external-library k2a54@name)))) (set! k2977@library-exists? (lambda (k2a58@name) (and (k295d@find-library-by (lambda (k2a5a@x) (fast-equal? (k2923@library-name k2a5a@x) k2a58@name))) '#t))) (set! k2979@find-library-by-spec/die (lambda (k2a5c@spec) ((lambda (k2a5e@id) (or (k295d@find-library-by (lambda (k2a60@x) (eq? k2a5e@id (k2921@library-id k2a60@x)))) (assertion-violation '#f '"cannot find library with required spec" k2a5c@spec))) (car k2a5c@spec)))) (set! k297b@label->binding-table (make-eq-hashtable)) (set! k297d@install-library-record (lambda (k2a62@lib) (begin ((lambda (k2a64@exp-env) (for-each (lambda (k2a66@x) ((lambda (k2a68@label k2a69@binding) ((lambda (k2a6c@binding) (begin (if (hashtable-ref k297b@label->binding-table k2a68@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" k2a68@label (hashtable-ref k297b@label->binding-table k2a68@label '#f) k2a6c@binding) (exit)) (void)) (hashtable-set! k297b@label->binding-table k2a68@label k2a6c@binding))) ((lambda (k2a6e@t) (if (memv k2a6e@t '(global)) (cons 'global (cons k2a62@lib (cdr k2a69@binding))) (if (memv k2a6e@t '(global-macro)) (cons 'global-macro (cons k2a62@lib (cdr k2a69@binding))) (if (memv k2a6e@t '(global-macro!)) (cons 'global-macro! (cons k2a62@lib (cdr k2a69@binding))) k2a69@binding)))) (car k2a69@binding)))) (car k2a66@x) (cdr k2a66@x))) k2a64@exp-env)) (k292f@library-env k2a62@lib)) ((k2910@current-library-collection) k2a62@lib)))) (set! k297f@install-library (lambda (k2a70@id k2a71@name k2a72@ver k2a73@imp* k2a74@vis* k2a75@inv* k2a76@exp-subst k2a77@exp-env k2a78@visit-proc k2a79@invoke-proc k2a7a@visit-code k2a7b@invoke-code k2a7c@visible? k2a7d@source-file-name) ((lambda (k2a8c@imp-lib* k2a8d@vis-lib* k2a8e@inv-lib*) (begin (if (not (and (symbol? k2a70@id) (list? k2a71@name) (list? k2a72@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" k2a70@id k2a71@name k2a72@ver) (void)) (if (k2977@library-exists? k2a71@name) (assertion-violation 'install-library '"library is already installed" k2a71@name) (void)) ((lambda (k2a92@lib) (k297d@install-library-record k2a92@lib)) (k291f@make-library k2a70@id k2a71@name k2a72@ver k2a8c@imp-lib* k2a8d@vis-lib* k2a8e@inv-lib* k2a76@exp-subst k2a77@exp-env k2a78@visit-proc k2a79@invoke-proc k2a7a@visit-code k2a7b@invoke-code k2a7c@visible? k2a7d@source-file-name)))) (map k2979@find-library-by-spec/die k2a73@imp*) (map k2979@find-library-by-spec/die k2a74@vis*) (map k2979@find-library-by-spec/die k2a75@inv*)))) (set! k2981@imported-label->binding (lambda (k2a94@lab) (hashtable-ref k297b@label->binding-table k2a94@lab '#f))) (set! k2983@invoke-library (lambda (k2a96@lib) ((lambda (k2a98@invoke) (if (procedure? k2a98@invoke) (begin (k294f@set-library-invoke-state! k2a96@lib (lambda () (assertion-violation 'invoke '"circularity detected" k2a96@lib))) (for-each k2983@invoke-library (k292b@library-inv* k2a96@lib)) (k294f@set-library-invoke-state! k2a96@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" k2a96@lib))) (k2a98@invoke) (k294f@set-library-invoke-state! k2a96@lib '#t)) (void))) (k2933@library-invoke-state k2a96@lib)))) (set! k2985@visit-library (lambda (k2a9a@lib) ((lambda (k2a9c@visit) (if (procedure? k2a9c@visit) (begin (k294d@set-library-visit-state! k2a9a@lib (lambda () (assertion-violation 'visit '"circularity detected" k2a9a@lib))) (for-each k2983@invoke-library (k2929@library-vis* k2a9a@lib)) (k294d@set-library-visit-state! k2a9a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" k2a9a@lib))) (k2a9c@visit) (k294d@set-library-visit-state! k2a9a@lib '#t)) (void))) (k2931@library-visit-state k2a9a@lib)))) (set! k2987@invoke-library-by-spec (lambda (k2a9e@spec) (k2983@invoke-library (k2979@find-library-by-spec/die k2a9e@spec)))) (set! k2989@installed-libraries (lambda k2aa6 ((lambda (k2aa7) (if (= k2aa7 '1) (apply (lambda (k2aa0@all?) ((letrec ((k2aa2@f (lambda (k2aa4@ls) (if (null? k2aa4@ls) '() (if (or k2aa0@all? (k2939@library-visible? (car k2aa4@ls))) (cons (car k2aa4@ls) (k2aa2@f (cdr k2aa4@ls))) (k2aa2@f (cdr k2aa4@ls))))))) k2aa2@f) ((k2910@current-library-collection)))) k2aa6) (if (= k2aa7 '0) (apply (lambda () (k2989@installed-libraries '#f)) k2aa6) (error 'apply '"invalid arg count")))) (length k2aa6)))) (set! k298b@library-spec (lambda (k2aa8@x) (begin (if (not (k291d@library? k2aa8@x)) (assertion-violation 'library-spec '"not a library" k2aa8@x) (void)) (list (k2921@library-id k2aa8@x) (k2923@library-name k2aa8@x) (k2925@library-version k2aa8@x))))) (begin (set! k2ae6@k298b@library-spec k298b@library-spec) (set! k2ae5@k2989@installed-libraries k2989@installed-libraries) (set! k2ae4@k2987@invoke-library-by-spec k2987@invoke-library-by-spec) (set! k2ae3@k2985@visit-library k2985@visit-library) (set! k2ae2@k2983@invoke-library k2983@invoke-library) (set! k2ae1@k2981@imported-label->binding k2981@imported-label->binding) (set! k2ae0@k297f@install-library k297f@install-library) (set! k2adf@k297d@install-library-record k297d@install-library-record) (set! k2ade@k297b@label->binding-table k297b@label->binding-table) (set! k2add@k2979@find-library-by-spec/die k2979@find-library-by-spec/die) (set! k2adc@k2977@library-exists? k2977@library-exists?) (set! k2adb@k2975@find-library-by-name k2975@find-library-by-name) (set! k2ada@k2973@find-external-library k2973@find-external-library) (set! k2ad9@k2971@external-pending-libraries k2971@external-pending-libraries) (set! k2ad8@k296f@current-library-expander k296f@current-library-expander) (set! k2ad7@k296d@library-loader k296d@library-loader) (set! k2ad6@k296b@try-load-from-file k296b@try-load-from-file) (set! k2ad5@k2969@current-precompiled-library-loader k2969@current-precompiled-library-loader) (set! k2ad4@k2967@serialize-all k2967@serialize-all) (set! k2ad3@k2965@file-locator k2965@file-locator) (set! k2ad2@k2963@library-name->file-name k2963@library-name->file-name) (set! k2ad1@k2961@library-extensions k2961@library-extensions) (set! k2ad0@k295f@library-path k295f@library-path) (set! k2acf@k295d@find-library-by k295d@find-library-by) (set! k2ace@k295b@find-dependencies k295b@find-dependencies) (set! k2acd@k2959@rp k2959@rp) (set! k2acc@k2957@set-library-source-file-name! k2957@set-library-source-file-name!) (set! k2acb@k2955@set-library-visible?! k2955@set-library-visible?!) (set! k2aca@k2953@set-library-invoke-code! k2953@set-library-invoke-code!) (set! k2ac9@k2951@set-library-visit-code! k2951@set-library-visit-code!) (set! k2ac8@k294f@set-library-invoke-state! k294f@set-library-invoke-state!) (set! k2ac7@k294d@set-library-visit-state! k294d@set-library-visit-state!) (set! k2ac6@k294b@set-library-env! k294b@set-library-env!) (set! k2ac5@k2949@set-library-subst! k2949@set-library-subst!) (set! k2ac4@k2947@set-library-inv*! k2947@set-library-inv*!) (set! k2ac3@k2945@set-library-vis*! k2945@set-library-vis*!) (set! k2ac2@k2943@set-library-imp*! k2943@set-library-imp*!) (set! k2ac1@k2941@set-library-version! k2941@set-library-version!) (set! k2ac0@k293f@set-library-name! k293f@set-library-name!) (set! k2abf@k293d@set-library-id! k293d@set-library-id!) (set! k2abe@k293b@library-source-file-name k293b@library-source-file-name) (set! k2abd@k2939@library-visible? k2939@library-visible?) (set! k2abc@k2937@library-invoke-code k2937@library-invoke-code) (set! k2abb@k2935@library-visit-code k2935@library-visit-code) (set! k2aba@k2933@library-invoke-state k2933@library-invoke-state) (set! k2ab9@k2931@library-visit-state k2931@library-visit-state) (set! k2ab8@k292f@library-env k292f@library-env) (set! k2ab7@k292d@library-subst k292d@library-subst) (set! k2ab6@k292b@library-inv* k292b@library-inv*) (set! k2ab5@k2929@library-vis* k2929@library-vis*) (set! k2ab4@k2927@library-imp* k2927@library-imp*) (set! k2ab3@k2925@library-version k2925@library-version) (set! k2ab2@k2923@library-name k2923@library-name) (set! k2ab1@k2921@library-id k2921@library-id) (set! k2ab0@k291f@make-library k291f@make-library) (set! k2aaf@k291d@library? k291d@library?) (set! k2aae@k291a@k2912 k291a@k2912) (set! k2aad@k2918@k2913 k2918@k2913) (set! k2aac@k2916@k2911 k2916@k2911) (set! k2aab@k2910@current-library-collection k2910@current-library-collection) (set! k2aaa@k290e@make-collection k290e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2ae9@build-global-define k2b5a@build-lambda k2b5c@build-case-lambda k2b5e@build-let k2b8c@build-sequence k2b8e@build-void k2b90@build-letrec k2b92@build-letrec* k2b94@build-library-letrec* k2b96@build-receive) (begin (set! k2ae9@build-global-define (lambda (k2b97@x) (k2b8e@build-void))) (set! k2b5a@build-lambda (lambda (k2b99@ae k2b9a@vars k2b9b@exp) (list 'lambda k2b9a@vars k2b9b@exp))) (set! k2b5c@build-case-lambda (lambda (k2b9f@ae k2ba0@vars* k2ba1@exp*) ((lambda (k2ba6@build-error k2ba8@build-pred k2baa@build-apply k2bac@expand-case-lambda) (begin (set! k2ba6@build-error (lambda (k2bdd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! k2ba8@build-pred (lambda (k2bc5@ae k2bc6@n k2bc7@vars) (call-with-values (lambda () ((letrec ((k2bcf@f (lambda (k2bd1@vars k2bd2@count) (if (pair? k2bd1@vars) (k2bcf@f (cdr k2bd1@vars) (+ k2bd2@count '1)) (if (null? k2bd1@vars) (values k2bd2@count '=) (values k2bd2@count '>=)))))) k2bcf@f) k2bc7@vars '0)) (lambda (k2bd5@k2bcc k2bd6@k2bce) ((lambda (k2bd9@pred k2bda@count) (list (list 'primitive k2bd9@pred) k2bc6@n (list 'quote k2bda@count))) k2bd6@k2bce k2bd5@k2bcc))))) (set! k2baa@build-apply (lambda (k2bbd@ae k2bbe@g k2bbf@vars k2bc0@exp) (list '(primitive apply) (k2b5a@build-lambda k2bbd@ae k2bbf@vars k2bc0@exp) k2bbe@g))) (set! k2bac@expand-case-lambda (lambda (k2bad@ae k2bae@vars k2baf@exp*) ((lambda (k2bb3@g k2bb4@n) (list 'lambda k2bb3@g (k2b5e@build-let k2bad@ae (list k2bb4@n) (list (list '(primitive length) k2bb3@g)) ((letrec ((k2bb7@f (lambda (k2bb9@vars* k2bba@exp*) (if (null? k2bb9@vars*) (k2ba6@build-error k2bad@ae) (list 'if (k2ba8@build-pred k2bad@ae k2bb4@n (car k2bb9@vars*)) (k2baa@build-apply k2bad@ae k2bb3@g (car k2bb9@vars*) (car k2bba@exp*)) (k2bb7@f (cdr k2bb9@vars*) (cdr k2bba@exp*))))))) k2bb7@f) k2ba0@vars* k2baf@exp*)))) (gensym) (gensym)))) (if (= (length k2ba1@exp*) '1) (k2b5a@build-lambda k2b9f@ae (car k2ba0@vars*) (car k2ba1@exp*)) (k2bac@expand-case-lambda k2b9f@ae k2ba0@vars* k2ba1@exp*)))) '#f '#f '#f '#f))) (set! k2b5e@build-let (lambda (k2bdf@ae k2be0@lhs* k2be1@rhs* k2be2@body) (cons (k2b5a@build-lambda k2bdf@ae k2be0@lhs* k2be2@body) k2be1@rhs*))) (set! k2b8c@build-sequence (lambda (k2be7@ae k2be8@exps) ((letrec ((k2beb@loop (lambda (k2bed@exps) (if (null? (cdr k2bed@exps)) (car k2bed@exps) (if (equal? (car k2bed@exps) (k2b8e@build-void)) (k2beb@loop (cdr k2bed@exps)) (cons 'begin k2bed@exps)))))) k2beb@loop) k2be8@exps))) (set! k2b8e@build-void (lambda () '((primitive void)))) (set! k2b90@build-letrec (lambda (k2bef@ae k2bf0@vars k2bf1@val-exps k2bf2@body-exp) (if (null? k2bf0@vars) k2bf2@body-exp (list 'letrec (map list k2bf0@vars k2bf1@val-exps) k2bf2@body-exp)))) (set! k2b92@build-letrec* (lambda (k2bf7@ae k2bf8@vars k2bf9@val-exps k2bfa@body-exp) (if (null? k2bf8@vars) k2bfa@body-exp (k2b5e@build-let k2bf7@ae k2bf8@vars (map (lambda (k2bff@x) (list 'quote '#f)) k2bf8@vars) (k2b8c@build-sequence k2bf7@ae (append (map (lambda (k2c01@lhs k2c02@rhs) (list 'set! k2c01@lhs k2c02@rhs)) k2bf8@vars k2bf9@val-exps) (list k2bfa@body-exp))))))) (set! k2b94@build-library-letrec* (lambda (k2c05@ae k2c06@name k2c07@vars k2c08@locs k2c09@val-exps k2c0a@body-exp) (list 'library-letrec* k2c06@name (map list k2c07@vars k2c08@locs k2c09@val-exps) k2c0a@body-exp))) (set! k2b96@build-receive (lambda (k2c11@ae k2c12@vars k2c13@producer k2c14@body*) (begin (display '"************** in ") (cons 'receive (cons k2c12@vars (cons k2c13@producer k2c14@body*)))))) (begin (set! k2c22@k2b96@build-receive k2b96@build-receive) (set! k2c21@k2b94@build-library-letrec* k2b94@build-library-letrec*) (set! k2c20@k2b92@build-letrec* k2b92@build-letrec*) (set! k2c1f@k2b90@build-letrec k2b90@build-letrec) (set! k2c1e@k2b8e@build-void k2b8e@build-void) (set! k2c1d@k2b8c@build-sequence k2b8c@build-sequence) (set! k2c1c@k2b5e@build-let k2b5e@build-let) (set! k2c1b@k2b5c@build-case-lambda k2b5c@build-case-lambda) (set! k2c1a@k2b5a@build-lambda k2b5a@build-lambda) (set! k2c19@k2ae9@build-global-define k2ae9@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k2c31@file-options-macro k2c33@set-cons k2c35@set-union k2c3a@top-mark* k2c3c@top-marked? k2c3e@gen-lexical k2c40@gen-global k2c42@gen-label k2c44@gen-top-level-label k2c46@gen-define-label+loc k2c48@gen-define-label k2c4e@k2c49 k2c50@k2c4b k2c52@k2c4a k2c55@rib? k2c57@make-rib k2c59@rib-sym* k2c5b@rib-mark** k2c5d@rib-label* k2c5f@rib-sealed/freq k2c61@rib-cache k2c63@set-rib-sym*! k2c65@set-rib-mark**! k2c67@set-rib-label*! k2c69@set-rib-sealed/freq! k2c6b@set-rib-cache! k2c6d@make-empty-rib k2c6f@extend-rib! k2c71@extend-rib/nc! k2c73@make-rib-map k2c75@seal-rib! k2c77@unseal-rib! k2c79@make-full-rib k2c7f@k2c7a k2c81@k2c7c k2c83@k2c7b k2c86@stx? k2c88@make-stx k2c8a@stx-expr k2c8c@stx-mark* k2c8e@stx-subst* k2c90@stx-ae* k2c92@set-stx-expr! k2c94@set-stx-mark*! k2c96@set-stx-subst*! k2c98@set-stx-ae*! k2c9a@rp k2c9c@datum->stx k2c9e@gen-mark k2ca0@anti-mark k2ca2@anti-mark? k2ca4@join-wraps k2ca6@mkstx k2ca8@add-mark k2caa@add-subst k2cac@syntax-kind? k2cae@syntax-vector->list k2cb0@syntax-pair? k2cb2@syntax-vector? k2cb4@syntax-null? k2cb6@syntax-list? k2cb8@syntax-car k2cba@syntax-cdr k2cbc@syntax->list k2cbe@id? k2cc0@id->sym k2cc2@same-marks? k2cc4@bound-id=? k2cc6@free-id=? k2cc8@valid-bound-ids? k2cca@distinct-bound-ids? k2ccc@bound-id-member? k2cce@self-evaluating? k2cd0@strip-annotations k2cd2@strip k2cd4@stx->datum k2cd6@same-marks*? k2cd8@id->label k2cda@id->real-label k2cdc@label->binding k2cde@make-binding k2ce0@binding-type k2ce2@binding-value k2ce4@raise-unbound-error k2ce6@syntax-type k2cf4@sanitize-binding k2cf6@make-variable-transformer k2cf8@variable-transformer? k2cfa@variable-transformer-procedure k2cfc@make-eval-transformer k2e4d@parse-define k2e4f@parse-define-syntax k2e51@scheme-stx-hashtable k2e53@scheme-stx k2e55@lexical-var k2e57@lexical-mutable? k2e59@set-lexical-mutable! k2e5b@add-lexical k2e5d@add-lexicals k2e5f@letrec-helper k2e61@letrec-transformer k2e63@letrec*-transformer k2e65@fluid-let-syntax-transformer k2e67@type-descriptor-transformer k2e69@record-type-descriptor-transformer k2e6b@record-constructor-descriptor-transformer k2e6d@when-macro k2e6f@unless-macro k2e71@if-transformer k2e73@and-transformer k2e75@or-transformer k2e77@case-macro k2e79@quote-transformer k2e7b@case-lambda-transformer k2e7d@lambda-transformer k2e7f@bless k2e81@with-syntax-macro k2e83@invalid-fmls-error k2e85@let-macro k2e87@let-values-macro k2e89@let*-values-macro k2e8b@trace-lambda-macro k2e8d@trace-define-macro k2e8f@trace-define-syntax-macro k2e91@trace-let/rec-syntax k2e93@trace-let-syntax-macro k2e95@trace-letrec-syntax-macro k2e97@guard-macro k2e99@define-enumeration-macro k2e9b@time-macro k2e9d@delay-macro k2e9f@assert-macro k2ea1@endianness-macro k2ea3@identifier-syntax-macro k2ea5@do-macro k2ea7@let*-macro k2ea9@or-macro k2eab@and-macro k2ead@cond-macro k2eaf@do-include k2eb1@include-macro k2eb3@include-into-macro k2eb5@syntax-rules-macro k2eb7@quasiquote-macro k2eb9@quasisyntax-macro k2ebb@define-struct-macro k2ebd@define-record-type-macro k2ebf@define-condition-type-macro k2ec1@incorrect-usage-macro k2ec3@parameterize-macro k2ec5@foreign-call-transformer k2ec7@convert-pattern k2ec9@syntax-dispatch k2ecb@ellipsis? k2ecd@underscore? k2ecf@verify-literals k2ed1@syntax-case-transformer k2ed3@ellipsis-map k2ed5@syntax-transformer k2ed7@core-macro-transformer k2ed9@symbol-macro k2edb@macro-transformer k2edd@local-macro-transformer k2edf@do-macro-call k2ee1@chi-macro k2ee3@chi-local-macro k2ee5@chi-global-macro k2ee7@chi-expr* k2ee9@chi-application k2eeb@chi-expr k2eed@chi-set! k2eef@verify-formals k2ef1@chi-lambda-clause k2ef3@chi-lambda-clause* k2ef5@chi-defun k2ef7@chi-rhs k2ef9@expand-interaction-rhs*/init* k2efb@chi-rhs* k2efd@find-bound=? k2eff@find-dups k2f01@chi-internal k2f03@parse-module k2f09@k2f04 k2f0b@k2f06 k2f0d@k2f05 k2f10@module-interface? k2f12@make-module-interface k2f14@module-interface-first-mark k2f16@module-interface-exp-id-vec k2f18@module-interface-exp-lab-vec k2f1a@set-module-interface-first-mark! k2f1c@set-module-interface-exp-id-vec! k2f1e@set-module-interface-exp-lab-vec! k2f20@module-interface-exp-id* k2f22@chi-internal-module k2f24@chi-body* k2f26@expand-transformer k2f28@parse-exports k2f2a@parse-library-name k2f2c@parse-library k2f2e@parse-import-spec* k2f30@make-top-rib k2f32@make-collector k2f34@inv-collector k2f36@vis-collector k2f38@imp-collector k2f3a@chi-library-internal k2f3c@chi-interaction-expr k2f3e@library-body-expander k2f40@core-library-expander k2f42@parse-top-level-program k2f44@top-level-expander k2f4a@k2f45 k2f4c@k2f47 k2f4e@k2f46 k2f51@env? k2f53@make-env k2f55@env-names k2f57@env-labels k2f59@env-itc k2f5b@set-env-names! k2f5d@set-env-labels! k2f5f@set-env-itc! k2f61@rp k2f67@k2f62 k2f69@k2f64 k2f6b@k2f63 k2f6e@interaction-env? k2f70@make-interaction-env k2f72@interaction-env-rib k2f74@interaction-env-r k2f76@interaction-env-locs k2f78@set-interaction-env-rib! k2f7a@set-interaction-env-r! k2f7c@set-interaction-env-locs! k2f7e@rp k2f80@interaction-environment-symbols k2f82@environment-bindings k2f84@parse-binding k2f86@environment? k2f88@environment-symbols k2f8a@environment k2f8c@null-environment k2f8e@scheme-report-environment k2f90@expand k2f92@eval k2f94@library-expander k2f96@boot-library-expand k2f98@rev-map-append k2f9a@build-exports k2f9c@make-export-subst k2f9e@make-export-env/macros k2fa0@generate-temporaries k2fa2@free-identifier=? k2fa4@bound-identifier=? k2fa6@make-source-condition k2fa8@extract-position-condition k2faa@expression-position k2fac@assertion-error k2fae@syntax-error k2fb0@syntax-violation* k2fb2@syntax-violation k2fb4@identifier? k2fb6@datum->syntax k2fb8@syntax->datum k2fba@compile-r6rs-top-level k2fbc@pre-compile-r6rs-top-level k2fbe@interaction-environment k2fc0@top-level-context) (begin (set! k2c31@file-options-macro (lambda (k2fc1@x) ((lambda (k2fc4@valid-option?) (begin (set! k2fc4@valid-option? (lambda (k2fcd@x) (and (k2cbe@id? k2fcd@x) (memq (k2cc0@id->sym k2fcd@x) '(no-fail no-create no-truncate))))) ((lambda (k2fc5@t) ((lambda (k2fc7@ls/false) (if (and k2fc7@ls/false (apply (lambda (k2fc9@opt*) (for-all k2fc4@valid-option? k2fc9@opt*)) k2fc7@ls/false)) (apply (lambda (k2fcb@opt*) (k2e7f@bless (list 'make-file-options (list 'quote k2fcb@opt*)))) k2fc7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k2fc5@t))) (k2ec9@syntax-dispatch k2fc5@t '(_ . each-any)))) k2fc1@x))) '#f))) (set! k2c33@set-cons (lambda (k2fcf@x k2fd0@ls) (if (memq k2fcf@x k2fd0@ls) k2fd0@ls (cons k2fcf@x k2fd0@ls)))) (set! k2c35@set-union (lambda (k2fd3@ls1 k2fd4@ls2) (if (null? k2fd3@ls1) k2fd4@ls2 (if (memq (car k2fd3@ls1) k2fd4@ls2) (k2c35@set-union (cdr k2fd3@ls1) k2fd4@ls2) (cons (car k2fd3@ls1) (k2c35@set-union (cdr k2fd3@ls1) k2fd4@ls2)))))) (set! k2c3a@top-mark* '(top)) (set! k2c3c@top-marked? (lambda (k2fd7@m*) (memq 'top k2fd7@m*))) (set! k2c3e@gen-lexical (lambda (k2fd9@sym) (if (symbol? k2fd9@sym) (gensym k2fd9@sym) (if (k2c86@stx? k2fd9@sym) (k2c3e@gen-lexical (k2cc0@id->sym k2fd9@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" k2fd9@sym))))) (set! k2c40@gen-global (lambda (k2fdb@x) (k2c3e@gen-lexical k2fdb@x))) (set! k2c42@gen-label (lambda (k2fdd@_) (gensym))) (set! k2c44@gen-top-level-label (lambda (k2fdf@id k2fe0@rib) ((lambda (k2fe4@find) (begin (set! k2fe4@find (lambda (k2fef@sym k2ff0@mark* k2ff1@sym* k2ff2@mark** k2ff3@label*) (and (pair? k2ff1@sym*) (if (and (eq? k2fef@sym (car k2ff1@sym*)) (k2cc2@same-marks? k2ff0@mark* (car k2ff2@mark**))) (car k2ff3@label*) (k2fe4@find k2fef@sym k2ff0@mark* (cdr k2ff1@sym*) (cdr k2ff2@mark**) (cdr k2ff3@label*)))))) ((lambda (k2fe5@sym k2fe6@mark*) ((lambda (k2fe9@sym*) ((lambda (k2feb@t) (if k2feb@t ((lambda (k2fed@label) (if (k2ae1@k2981@imported-label->binding k2fed@label) (gensym) k2fed@label)) k2feb@t) (gensym))) (and (memq k2fe5@sym (k2c59@rib-sym* k2fe0@rib)) (k2fe4@find k2fe5@sym k2fe6@mark* k2fe9@sym* (k2c5b@rib-mark** k2fe0@rib) (k2c5d@rib-label* k2fe0@rib))))) (k2c59@rib-sym* k2fe0@rib))) (k2cc0@id->sym k2fdf@id) (k2c8c@stx-mark* k2fdf@id)))) '#f))) (set! k2c46@gen-define-label+loc (lambda (k2ff9@id k2ffa@rib) ((lambda (k2ffd@t) (if k2ffd@t ((lambda (k2fff@env) ((lambda (k3001@label k3002@locs) (values k3001@label ((lambda (k3005@t) (if k3005@t (cdr k3005@t) ((lambda (k3007@loc) (begin (k2f7c@set-interaction-env-locs! k2fff@env (cons (cons k3001@label k3007@loc) k3002@locs)) k3007@loc)) (k2c3e@gen-lexical k2ff9@id)))) (assq k3001@label k3002@locs)))) (k2c44@gen-top-level-label k2ff9@id k2ffa@rib) (k2f76@interaction-env-locs k2fff@env))) k2ffd@t) (values (gensym) (k2c3e@gen-lexical k2ff9@id)))) (k2fc0@top-level-context)))) (set! k2c48@gen-define-label (lambda (k3009@id k300a@rib) (if (k2fc0@top-level-context) (k2c44@gen-top-level-label k3009@id k300a@rib) (gensym)))) (set! k2c4e@k2c49 (make-record-type-descriptor 'rib '#f 'k2c4c '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! k2c50@k2c4b '#f) (set! k2c52@k2c4a (make-record-constructor-descriptor k2c4e@k2c49 '#f k2c50@k2c4b)) (set! k2c55@rib? (record-predicate k2c4e@k2c49)) (set! k2c57@make-rib (record-constructor k2c52@k2c4a)) (set! k2c59@rib-sym* (record-accessor k2c4e@k2c49 '0)) (set! k2c5b@rib-mark** (record-accessor k2c4e@k2c49 '1)) (set! k2c5d@rib-label* (record-accessor k2c4e@k2c49 '2)) (set! k2c5f@rib-sealed/freq (record-accessor k2c4e@k2c49 '3)) (set! k2c61@rib-cache (record-accessor k2c4e@k2c49 '4)) (set! k2c63@set-rib-sym*! (record-mutator k2c4e@k2c49 '0)) (set! k2c65@set-rib-mark**! (record-mutator k2c4e@k2c49 '1)) (set! k2c67@set-rib-label*! (record-mutator k2c4e@k2c49 '2)) (set! k2c69@set-rib-sealed/freq! (record-mutator k2c4e@k2c49 '3)) (set! k2c6b@set-rib-cache! (record-mutator k2c4e@k2c49 '4)) (set! k2c6d@make-empty-rib (lambda () (k2c57@make-rib '() '() '() '#f '#f))) (set! k2c6f@extend-rib! (lambda (k300d@rib k300e@id k300f@label) ((lambda (k3014@find) (begin (set! k3014@find (lambda (k3021@sym k3022@mark* k3023@sym* k3024@mark** k3025@label*) (and (pair? k3023@sym*) (if (and (eq? k3021@sym (car k3023@sym*)) (k2cc2@same-marks? k3022@mark* (car k3024@mark**))) k3025@label* (k3014@find k3021@sym k3022@mark* (cdr k3023@sym*) (cdr k3024@mark**) (cdr k3025@label*)))))) (begin (if (k2c5f@rib-sealed/freq k300d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" k300d@rib) (void)) ((lambda (k3015@sym k3016@mark*) ((lambda (k3019@sym*) ((lambda (k301b@t) (if k301b@t ((lambda (k301d@p) (if (not (eq? k300f@label (car k301d@p))) (if (k2fc0@top-level-context) (set-car! k301d@p k300f@label) (k2fb2@syntax-violation '#f '"multiple definitions of identifier" k300e@id)) (void))) k301b@t) (begin (if (k2c61@rib-cache k300d@rib) (hashtable-update! (k2c61@rib-cache k300d@rib) k3015@sym (lambda (k301f@e) (cons (cons k3016@mark* k300f@label) k301f@e)) '()) (void)) (k2c63@set-rib-sym*! k300d@rib (cons k3015@sym k3019@sym*)) (k2c65@set-rib-mark**! k300d@rib (cons k3016@mark* (k2c5b@rib-mark** k300d@rib))) (k2c67@set-rib-label*! k300d@rib (cons k300f@label (k2c5d@rib-label* k300d@rib)))))) (and (memq k3015@sym (k2c59@rib-sym* k300d@rib)) (k3014@find k3015@sym k3016@mark* k3019@sym* (k2c5b@rib-mark** k300d@rib) (k2c5d@rib-label* k300d@rib))))) (k2c59@rib-sym* k300d@rib))) (k2cc0@id->sym k300e@id) (k2c8c@stx-mark* k300e@id))))) '#f))) (set! k2c71@extend-rib/nc! (lambda (k302b@rib k302c@id k302d@label) ((lambda (k3031@sym k3032@mark*) ((lambda (k3035@sym*) (begin (if (k2c61@rib-cache k302b@rib) (hashtable-update! (k2c61@rib-cache k302b@rib) k3031@sym (lambda (k3037@e) (cons (cons k3032@mark* k302d@label) k3037@e)) '()) (void)) (k2c63@set-rib-sym*! k302b@rib (cons k3031@sym k3035@sym*)) (k2c65@set-rib-mark**! k302b@rib (cons k3032@mark* (k2c5b@rib-mark** k302b@rib))) (k2c67@set-rib-label*! k302b@rib (cons k302d@label (k2c5d@rib-label* k302b@rib))))) (k2c59@rib-sym* k302b@rib))) (k2cc0@id->sym k302c@id) (k2c8c@stx-mark* k302c@id)))) (set! k2c73@make-rib-map (lambda (k3039@sym*) ((lambda (k303b@ht) ((letrec ((k303d@f (lambda (k303f@i k3040@sym*) (if (null? k3040@sym*) k303b@ht (begin (hashtable-update! k303b@ht (car k3040@sym*) (lambda (k3043@x) (cons k303f@i k3043@x)) '()) (k303d@f (+ k303f@i '1) (cdr k3040@sym*))))))) k303d@f) '0 k3039@sym*)) (make-eq-hashtable)))) (set! k2c75@seal-rib! (lambda (k3045@rib) ((lambda (k3047@sym*) (if (not (null? k3047@sym*)) (begin (k2c63@set-rib-sym*! k3045@rib (list->vector k3047@sym*)) (k2c65@set-rib-mark**! k3045@rib (list->vector (k2c5b@rib-mark** k3045@rib))) (k2c67@set-rib-label*! k3045@rib (list->vector (k2c5d@rib-label* k3045@rib))) (k2c69@set-rib-sealed/freq! k3045@rib (k2c73@make-rib-map k3047@sym*))) (void))) (k2c59@rib-sym* k3045@rib)))) (set! k2c77@unseal-rib! (lambda (k3049@rib) (if (k2c5f@rib-sealed/freq k3049@rib) (begin (k2c69@set-rib-sealed/freq! k3049@rib '#f) (k2c63@set-rib-sym*! k3049@rib (vector->list (k2c59@rib-sym* k3049@rib))) (k2c65@set-rib-mark**! k3049@rib (vector->list (k2c5b@rib-mark** k3049@rib))) (k2c67@set-rib-label*! k3049@rib (vector->list (k2c5d@rib-label* k3049@rib)))) (void)))) (set! k2c79@make-full-rib (lambda (k304b@id* k304c@label*) ((lambda (k304f@r) (begin (k2c75@seal-rib! k304f@r) k304f@r)) (k2c57@make-rib (map k2cc0@id->sym k304b@id*) (map k2c8c@stx-mark* k304b@id*) k304c@label* '#f '#f)))) (set! k2c7f@k2c7a (make-record-type-descriptor 'stx '#f 'k2c7d '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! k2c81@k2c7c '#f) (set! k2c83@k2c7b (make-record-constructor-descriptor k2c7f@k2c7a '#f k2c81@k2c7c)) (set! k2c86@stx? (record-predicate k2c7f@k2c7a)) (set! k2c88@make-stx (record-constructor k2c83@k2c7b)) (set! k2c8a@stx-expr (record-accessor k2c7f@k2c7a '0)) (set! k2c8c@stx-mark* (record-accessor k2c7f@k2c7a '1)) (set! k2c8e@stx-subst* (record-accessor k2c7f@k2c7a '2)) (set! k2c90@stx-ae* (record-accessor k2c7f@k2c7a '3)) (set! k2c92@set-stx-expr! (record-mutator k2c7f@k2c7a '0)) (set! k2c94@set-stx-mark*! (record-mutator k2c7f@k2c7a '1)) (set! k2c96@set-stx-subst*! (record-mutator k2c7f@k2c7a '2)) (set! k2c98@set-stx-ae*! (record-mutator k2c7f@k2c7a '3)) (set! k2c9a@rp (k2865@k278c@make-record-printer 'stx (lambda (k3051@x k3052@p k3053@wr) (begin (display '"#<syntax " k3052@p) (write (k2cd4@stx->datum k3051@x) k3052@p) ((lambda (k3057@expr) (if (k285d@k277c@annotation? k3057@expr) ((lambda (k3059@src) (if (pair? k3059@src) (begin (display '" [" k3052@p) (display (cdr k3059@src) k3052@p) (display '" of " k3052@p) (display (car k3059@src) k3052@p) (display '"]" k3052@p)) (void))) (k285e@k277e@annotation-source k3057@expr)) (void))) (k2c8a@stx-expr k3051@x)) (display '">" k3052@p))))) (set! k2c9c@datum->stx (lambda (k305b@id k305c@datum) (k2c88@make-stx k305c@datum (k2c8c@stx-mark* k305b@id) (k2c8e@stx-subst* k305b@id) (k2c90@stx-ae* k305b@id)))) (set! k2c9e@gen-mark (lambda () (string '#\m))) (set! k2ca0@anti-mark '#f) (set! k2ca2@anti-mark? not) (set! k2ca4@join-wraps (lambda (k305f@m1* k3060@s1* k3061@ae1* k3062@e) ((lambda (k3068@cancel) (begin (set! k3068@cancel (lambda (k306f@ls1 k3070@ls2) ((letrec ((k3073@f (lambda (k3075@x k3076@ls1) (if (null? k3076@ls1) (cdr k3070@ls2) (cons k3075@x (k3073@f (car k3076@ls1) (cdr k3076@ls1))))))) k3073@f) (car k306f@ls1) (cdr k306f@ls1)))) ((lambda (k3069@m2* k306a@s2* k306b@ae2*) (if (and (not (null? k305f@m1*)) (not (null? k3069@m2*)) (k2ca2@anti-mark? (car k3069@m2*))) (values (k3068@cancel k305f@m1* k3069@m2*) (k3068@cancel k3060@s1* k306a@s2*) (k3068@cancel k3061@ae1* k306b@ae2*)) (values (append k305f@m1* k3069@m2*) (append k3060@s1* k306a@s2*) (append k3061@ae1* k306b@ae2*)))) (k2c8c@stx-mark* k3062@e) (k2c8e@stx-subst* k3062@e) (k2c90@stx-ae* k3062@e)))) '#f))) (set! k2ca6@mkstx (lambda (k3079@e k307a@m* k307b@s* k307c@ae*) (if (and (k2c86@stx? k3079@e) (not (k2c3c@top-marked? k307a@m*))) (call-with-values (lambda () (k2ca4@join-wraps k307a@m* k307b@s* k307c@ae* k3079@e)) (lambda (k3087@k3082 k3088@k3084 k3089@k3086) ((lambda (k308d@ae* k308e@s* k308f@m*) (k2c88@make-stx (k2c8a@stx-expr k3079@e) k308f@m* k308e@s* k308d@ae*)) k3089@k3086 k3088@k3084 k3087@k3082))) (k2c88@make-stx k3079@e k307a@m* k307b@s* k307c@ae*)))) (set! k2ca8@add-mark (lambda (k3093@m k3094@e k3095@ae) (k2ca6@mkstx k3094@e (list k3093@m) '(shift) (list k3095@ae)))) (set! k2caa@add-subst (lambda (k3099@subst k309a@e) (k2ca6@mkstx k309a@e '() (list k3099@subst) '()))) (set! k2cac@syntax-kind? (lambda (k309d@x k309e@p?) (if (k2c86@stx? k309d@x) (k2cac@syntax-kind? (k2c8a@stx-expr k309d@x) k309e@p?) (if (k285d@k277c@annotation? k309d@x) (k2cac@syntax-kind? (k285f@k2780@annotation-expression k309d@x) k309e@p?) (k309e@p? k309d@x))))) (set! k2cae@syntax-vector->list (lambda (k30a1@x) (if (k2c86@stx? k30a1@x) ((lambda (k30a3@ls k30a4@m* k30a5@s* k30a6@ae*) (map (lambda (k30ab@x) (k2ca6@mkstx k30ab@x k30a4@m* k30a5@s* k30a6@ae*)) k30a3@ls)) (k2cae@syntax-vector->list (k2c8a@stx-expr k30a1@x)) (k2c8c@stx-mark* k30a1@x) (k2c8e@stx-subst* k30a1@x) (k2c90@stx-ae* k30a1@x)) (if (k285d@k277c@annotation? k30a1@x) (k2cae@syntax-vector->list (k285f@k2780@annotation-expression k30a1@x)) (if (vector? k30a1@x) (vector->list k30a1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" k30a1@x)))))) (set! k2cb0@syntax-pair? (lambda (k30ad@x) (k2cac@syntax-kind? k30ad@x pair?))) (set! k2cb2@syntax-vector? (lambda (k30af@x) (k2cac@syntax-kind? k30af@x vector?))) (set! k2cb4@syntax-null? (lambda (k30b1@x) (k2cac@syntax-kind? k30b1@x null?))) (set! k2cb6@syntax-list? (lambda (k30b3@x) (or (k2cb4@syntax-null? k30b3@x) (and (k2cb0@syntax-pair? k30b3@x) (k2cb6@syntax-list? (k2cba@syntax-cdr k30b3@x)))))) (set! k2cb8@syntax-car (lambda (k30b5@x) (if (k2c86@stx? k30b5@x) (k2ca6@mkstx (k2cb8@syntax-car (k2c8a@stx-expr k30b5@x)) (k2c8c@stx-mark* k30b5@x) (k2c8e@stx-subst* k30b5@x) (k2c90@stx-ae* k30b5@x)) (if (k285d@k277c@annotation? k30b5@x) (k2cb8@syntax-car (k285f@k2780@annotation-expression k30b5@x)) (if (pair? k30b5@x) (car k30b5@x) (assertion-violation 'syntax-car '"BUG: not a pair" k30b5@x)))))) (set! k2cba@syntax-cdr (lambda (k30b7@x) (if (k2c86@stx? k30b7@x) (k2ca6@mkstx (k2cba@syntax-cdr (k2c8a@stx-expr k30b7@x)) (k2c8c@stx-mark* k30b7@x) (k2c8e@stx-subst* k30b7@x) (k2c90@stx-ae* k30b7@x)) (if (k285d@k277c@annotation? k30b7@x) (k2cba@syntax-cdr (k285f@k2780@annotation-expression k30b7@x)) (if (pair? k30b7@x) (cdr k30b7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" k30b7@x)))))) (set! k2cbc@syntax->list (lambda (k30b9@x) (if (k2cb0@syntax-pair? k30b9@x) (cons (k2cb8@syntax-car k30b9@x) (k2cbc@syntax->list (k2cba@syntax-cdr k30b9@x))) (if (k2cb4@syntax-null? k30b9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" k30b9@x))))) (set! k2cbe@id? (lambda (k30bb@x) (and (k2c86@stx? k30bb@x) ((lambda (k30bd@expr) (symbol? (if (k285d@k277c@annotation? k30bd@expr) (k285c@k277a@annotation-stripped k30bd@expr) k30bd@expr))) (k2c8a@stx-expr k30bb@x))))) (set! k2cc0@id->sym (lambda (k30bf@x) (begin (if (not (k2c86@stx? k30bf@x)) (error 'id->sym '"BUG in ikarus: not an id" k30bf@x) (void)) ((lambda (k30c1@expr) ((lambda (k30c3@sym) (if (symbol? k30c3@sym) k30c3@sym (error 'id->sym '"BUG in ikarus: not an id" k30bf@x))) (if (k285d@k277c@annotation? k30c1@expr) (k285c@k277a@annotation-stripped k30c1@expr) k30c1@expr))) (k2c8a@stx-expr k30bf@x))))) (set! k2cc2@same-marks? (lambda (k30c5@x k30c6@y) (or (and (null? k30c5@x) (null? k30c6@y)) (and (pair? k30c5@x) (pair? k30c6@y) (eq? (car k30c5@x) (car k30c6@y)) (k2cc2@same-marks? (cdr k30c5@x) (cdr k30c6@y)))))) (set! k2cc4@bound-id=? (lambda (k30c9@x k30ca@y) (and (eq? (k2cc0@id->sym k30c9@x) (k2cc0@id->sym k30ca@y)) (k2cc2@same-marks? (k2c8c@stx-mark* k30c9@x) (k2c8c@stx-mark* k30ca@y))))) (set! k2cc6@free-id=? (lambda (k30cd@i k30ce@j) ((lambda (k30d1@t0 k30d2@t1) (if (or k30d1@t0 k30d2@t1) (eq? k30d1@t0 k30d2@t1) (eq? (k2cc0@id->sym k30cd@i) (k2cc0@id->sym k30ce@j)))) (k2cda@id->real-label k30cd@i) (k2cda@id->real-label k30ce@j)))) (set! k2cc8@valid-bound-ids? (lambda (k30d5@id*) (and (for-all k2cbe@id? k30d5@id*) (k2cca@distinct-bound-ids? k30d5@id*)))) (set! k2cca@distinct-bound-ids? (lambda (k30d7@id*) (or (null? k30d7@id*) (and (not (k2ccc@bound-id-member? (car k30d7@id*) (cdr k30d7@id*))) (k2cca@distinct-bound-ids? (cdr k30d7@id*)))))) (set! k2ccc@bound-id-member? (lambda (k30d9@id k30da@id*) (and (pair? k30da@id*) (or (k2cc4@bound-id=? k30d9@id (car k30da@id*)) (k2ccc@bound-id-member? k30d9@id (cdr k30da@id*)))))) (set! k2cce@self-evaluating? (lambda (k30dd@x) (or (number? k30dd@x) (string? k30dd@x) (char? k30dd@x) (boolean? k30dd@x) (regexp? k30dd@x) (bytevector? k30dd@x)))) (set! k2cd0@strip-annotations (lambda (k30df@x) (if (pair? k30df@x) (cons (k2cd0@strip-annotations (car k30df@x)) (k2cd0@strip-annotations (cdr k30df@x))) (if (vector? k30df@x) (vector-map k2cd0@strip-annotations k30df@x) (if (k285d@k277c@annotation? k30df@x) (k285c@k277a@annotation-stripped k30df@x) k30df@x))))) (set! k2cd2@strip (lambda (k30e1@x k30e2@m*) (if (k2c3c@top-marked? k30e2@m*) (if (or (k285d@k277c@annotation? k30e1@x) (and (pair? k30e1@x) (k285d@k277c@annotation? (car k30e1@x))) (and (vector? k30e1@x) (> (vector-length k30e1@x) '0) (k285d@k277c@annotation? (vector-ref k30e1@x '0)))) (k2cd0@strip-annotations k30e1@x) k30e1@x) ((letrec ((k30e5@f (lambda (k30e7@x) (if (k2c86@stx? k30e7@x) (k2cd2@strip (k2c8a@stx-expr k30e7@x) (k2c8c@stx-mark* k30e7@x)) (if (k285d@k277c@annotation? k30e7@x) (k285c@k277a@annotation-stripped k30e7@x) (if (pair? k30e7@x) ((lambda (k30e9@a k30ea@d) (if (and (eq? k30e9@a (car k30e7@x)) (eq? k30ea@d (cdr k30e7@x))) k30e7@x (cons k30e9@a k30ea@d))) (k30e5@f (car k30e7@x)) (k30e5@f (cdr k30e7@x))) (if (vector? k30e7@x) ((lambda (k30ed@old) ((lambda (k30ef@new) (if (for-all eq? k30ed@old k30ef@new) k30e7@x (list->vector k30ef@new))) (map k30e5@f k30ed@old))) (vector->list k30e7@x)) k30e7@x))))))) k30e5@f) k30e1@x)))) (set! k2cd4@stx->datum (lambda (k30f1@x) (k2cd2@strip k30f1@x '()))) (set! k2cd6@same-marks*? (lambda (k30f3@mark* k30f4@mark** k30f5@si) (if (null? k30f5@si) '#f (if (k2cc2@same-marks? k30f3@mark* (vector-ref k30f4@mark** (car k30f5@si))) (car k30f5@si) (k2cd6@same-marks*? k30f3@mark* k30f4@mark** (cdr k30f5@si)))))) (set! k2cd8@id->label (lambda (k30f9@id) (or (k2cda@id->real-label k30f9@id) ((lambda (k30fb@t) (if k30fb@t ((lambda (k30fd@env) ((lambda (k30ff@rib) (call-with-values (lambda () (k2c46@gen-define-label+loc k30f9@id k30ff@rib)) (lambda (k3105@k3102 k3106@k3104) ((lambda (k3109@loc_ k310a@lab) (begin (k2c6f@extend-rib! k30ff@rib k30f9@id k310a@lab) k310a@lab)) k3106@k3104 k3105@k3102)))) (k2f72@interaction-env-rib k30fd@env))) k30fb@t) '#f)) (k2fc0@top-level-context))))) (set! k2cda@id->real-label (lambda (k310d@id) ((lambda (k310f@sym) ((letrec ((k3111@search (lambda (k3113@subst* k3114@mark*) (if (null? k3113@subst*) '#f (if (eq? (car k3113@subst*) 'shift) (k3111@search (cdr k3113@subst*) (cdr k3114@mark*)) ((lambda (k3117@rib) ((lambda (k3119@t) (if k3119@t ((lambda (k311b@ht) ((lambda (k311d@si) ((lambda (k311f@i) (if k311f@i (vector-ref (k2c5d@rib-label* k3117@rib) k311f@i) (k3111@search (cdr k3113@subst*) k3114@mark*))) (and k311d@si (k2cd6@same-marks*? k3114@mark* (k2c5b@rib-mark** k3117@rib) (reverse k311d@si))))) (hashtable-ref k311b@ht k310f@sym '#f))) k3119@t) ((letrec ((k3121@f (lambda (k3123@sym* k3124@mark** k3125@label*) (if (null? k3123@sym*) (k3111@search (cdr k3113@subst*) k3114@mark*) (if (and (eq? (car k3123@sym*) k310f@sym) (k2cc2@same-marks? (car k3124@mark**) k3114@mark*)) (car k3125@label*) (k3121@f (cdr k3123@sym*) (cdr k3124@mark**) (cdr k3125@label*))))))) k3121@f) (k2c59@rib-sym* k3117@rib) (k2c5b@rib-mark** k3117@rib) (k2c5d@rib-label* k3117@rib)))) (k2c5f@rib-sealed/freq k3117@rib))) (car k3113@subst*))))))) k3111@search) (k2c8e@stx-subst* k310d@id) (k2c8c@stx-mark* k310d@id))) (k2cc0@id->sym k310d@id)))) (set! k2cdc@label->binding (lambda (k3129@x k312a@r) ((lambda (k312d@t) (if k312d@t ((lambda (k312f@b) (if (and (pair? k312f@b) (eq? (car k312f@b) '$core-rtd)) (cons '$rtd (map k2e7f@bless (cdr k312f@b))) (if (and (pair? k312f@b) (eq? (car k312f@b) 'global-rtd)) ((lambda (k3131@lib k3132@loc) (cons '$rtd (symbol-value k3132@loc))) (cadr k312f@b) (cddr k312f@b)) k312f@b))) k312d@t) ((lambda (k3135@t) (if k3135@t (cdr k3135@t) ((lambda (k3137@t) (if k3137@t ((lambda (k3139@env) ((lambda (k313b@t) (if k313b@t ((lambda (k313d@p) (cons* 'lexical (cdr k313d@p) '#f)) k313b@t) '(displaced-lexical . #f))) (assq k3129@x (k2f76@interaction-env-locs k3139@env)))) k3137@t) '(displaced-lexical . #f))) (k2fc0@top-level-context)))) (assq k3129@x k312a@r)))) (k2ae1@k2981@imported-label->binding k3129@x)))) (set! k2cde@make-binding cons) (set! k2ce0@binding-type car) (set! k2ce2@binding-value cdr) (set! k2ce4@raise-unbound-error (lambda (k313f@id) (k2fb0@syntax-violation* '#f '"unbound identifier" k313f@id (k4cef@k4b35@make-undefined-violation)))) (set! k2ce6@syntax-type (lambda (k3141@e k3142@r) (if (k2cbe@id? k3141@e) ((lambda (k3145@id) ((lambda (k3147@label) ((lambda (k3149@b) ((lambda (k314b@type) ((lambda () (begin (if (not k3147@label) (k2ce4@raise-unbound-error k3145@id) (void)) ((lambda (k314d@t) (if (memv k314d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values k314b@type (k2ce2@binding-value k3149@b) k3145@id) (values 'other '#f '#f))) k314b@type))))) (k2ce0@binding-type k3149@b))) (k2cdc@label->binding k3147@label k3142@r))) (k2cd8@id->label k3145@id))) k3141@e) (if (k2cb0@syntax-pair? k3141@e) ((lambda (k314f@id) (if (k2cbe@id? k314f@id) ((lambda (k3151@label) ((lambda (k3153@b) ((lambda (k3155@type) ((lambda () (begin (if (not k3151@label) (k2ce4@raise-unbound-error k314f@id) (void)) ((lambda (k3157@t) (if (memv k3157@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values k3155@type (k2ce2@binding-value k3153@b) k314f@id) (values 'call '#f '#f))) k3155@type))))) (k2ce0@binding-type k3153@b))) (k2cdc@label->binding k3151@label k3142@r))) (k2cd8@id->label k314f@id)) (values 'call '#f '#f))) (k2cb8@syntax-car k3141@e)) ((lambda (k3159@d) (if (k2cce@self-evaluating? k3159@d) (values 'constant k3159@d '#f) (values 'other '#f '#f))) (k2cd4@stx->datum k3141@e)))))) (set! k2cf4@sanitize-binding (lambda (k315b@x k315c@src) (if (procedure? k315b@x) (cons* 'local-macro k315b@x k315c@src) (if (and (pair? k315b@x) (eq? (car k315b@x) 'macro!) (procedure? (cdr k315b@x))) (cons* 'local-macro! (cdr k315b@x) k315c@src) (if (and (pair? k315b@x) (eq? (car k315b@x) '$rtd)) k315b@x (assertion-violation 'expand '"invalid transformer" k315b@x)))))) (set! k2cf6@make-variable-transformer (lambda (k315f@x) (if (procedure? k315f@x) (cons 'macro! k315f@x) (assertion-violation 'make-variable-transformer '"not a procedure" k315f@x)))) (set! k2cf8@variable-transformer? (lambda (k3161@x) (and (pair? k3161@x) (eq? (car k3161@x) 'macro!) (procedure? (cdr k3161@x))))) (set! k2cfa@variable-transformer-procedure (lambda (k3163@x) (if (k2cf8@variable-transformer? k3163@x) (cdr k3163@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" k3163@x)))) (set! k2cfc@make-eval-transformer (lambda (k3165@x) (k2cf4@sanitize-binding (eval-core (k28bc@k2874@expanded->core k3165@x)) k3165@x))) (set! k2e4d@parse-define (lambda (k3167@x) ((lambda (k3169@t) ((lambda (k316b@ls/false) (if (and k316b@ls/false (apply (lambda (k316d@id k316e@fmls k316f@b k3170@b*) (k2cbe@id? k316d@id)) k316b@ls/false)) (apply (lambda (k3175@id k3176@fmls k3177@b k3178@b*) (begin (k2eef@verify-formals k3176@fmls k3167@x) (values k3175@id (cons 'defun (cons k3176@fmls (cons k3177@b k3178@b*)))))) k316b@ls/false) ((lambda (k317d@t) ((lambda (k317f@ls/false) (if (and k317f@ls/false (apply (lambda (k3181@id k3182@val) (k2cbe@id? k3181@id)) k317f@ls/false)) (apply (lambda (k3185@id k3186@val) (values k3185@id (cons 'expr k3186@val))) k317f@ls/false) ((lambda (k3189@t) ((lambda (k318b@ls/false) (if (and k318b@ls/false (apply (lambda (k318d@id) (k2cbe@id? k318d@id)) k318b@ls/false)) (apply (lambda (k318f@id) (values k318f@id (cons 'expr (k2e7f@bless '(void))))) k318b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3189@t))) (k2ec9@syntax-dispatch k3189@t '(_ any)))) k317d@t))) (k2ec9@syntax-dispatch k317d@t '(_ any any)))) k3169@t))) (k2ec9@syntax-dispatch k3169@t '(_ (any . any) any . each-any)))) k3167@x))) (set! k2e4f@parse-define-syntax (lambda (k3191@x) ((lambda (k3193@t) ((lambda (k3195@ls/false) (if (and k3195@ls/false (apply (lambda (k3197@id k3198@val) (k2cbe@id? k3197@id)) k3195@ls/false)) (apply (lambda (k319b@id k319c@val) (values k319b@id k319c@val)) k3195@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3193@t))) (k2ec9@syntax-dispatch k3193@t '(_ any any)))) k3191@x))) (set! k2e51@scheme-stx-hashtable (make-eq-hashtable)) (set! k2e53@scheme-stx (lambda (k319f@sym) (or (hashtable-ref k2e51@scheme-stx-hashtable k319f@sym '#f) ((lambda (k31a1@subst) ((lambda (k31a3@stx) ((lambda (k31a5@stx) ((lambda () (begin (hashtable-set! k2e51@scheme-stx-hashtable k319f@sym k31a5@stx) k31a5@stx)))) ((lambda (k31a7@t) (if k31a7@t ((lambda (k31a9@x) ((lambda (k31ab@name k31ac@label) (k2caa@add-subst (k2c57@make-rib (list k31ab@name) (list k2c3a@top-mark*) (list k31ac@label) '#f '#f) k31a3@stx)) (car k31a9@x) (cdr k31a9@x))) k31a7@t) k31a3@stx)) (assq k319f@sym k31a1@subst)))) (k2c88@make-stx k319f@sym k2c3a@top-mark* '() '()))) (k2ab7@k292d@library-subst (k2adb@k2975@find-library-by-name '(psyntax system $all))))))) (set! k2e55@lexical-var car) (set! k2e57@lexical-mutable? cdr) (set! k2e59@set-lexical-mutable! set-cdr!) (set! k2e5b@add-lexical (lambda (k31af@lab k31b0@lex k31b1@r) (cons (cons* k31af@lab 'lexical k31b0@lex '#f) k31b1@r))) (set! k2e5d@add-lexicals (lambda (k31b5@lab* k31b6@lex* k31b7@r) (if (null? k31b5@lab*) k31b7@r (k2e5d@add-lexicals (cdr k31b5@lab*) (cdr k31b6@lex*) (k2e5b@add-lexical (car k31b5@lab*) (car k31b6@lex*) k31b7@r))))) (set! k2e5f@letrec-helper (lambda (k31bb@e k31bc@r k31bd@mr k31be@build) ((lambda (k31c3@t) ((lambda (k31c5@ls/false) (if k31c5@ls/false (apply (lambda (k31c7@lhs* k31c8@rhs* k31c9@b k31ca@b*) (if (not (k2cc8@valid-bound-ids? k31c7@lhs*)) (k2e83@invalid-fmls-error k31bb@e k31c7@lhs*) ((lambda (k31cf@lex* k31d0@lab*) ((lambda (k31d3@rib k31d4@r) ((lambda (k31d7@body k31d8@rhs*) (k31be@build '#f k31cf@lex* k31d8@rhs* k31d7@body)) (k2f01@chi-internal (k2caa@add-subst k31d3@rib (cons k31c9@b k31ca@b*)) k31d4@r k31bd@mr) (k2ee7@chi-expr* (map (lambda (k31db@x) (k2caa@add-subst k31d3@rib k31db@x)) k31c8@rhs*) k31d4@r k31bd@mr))) (k2c79@make-full-rib k31c7@lhs* k31d0@lab*) (k2e5d@add-lexicals k31d0@lab* k31cf@lex* k31bc@r))) (map k2c3e@gen-lexical k31c7@lhs*) (map k2c42@gen-label k31c7@lhs*)))) k31c5@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k31c3@t))) (k2ec9@syntax-dispatch k31c3@t '(_ #(each (any any)) any . each-any)))) k31bb@e))) (set! k2e61@letrec-transformer (lambda (k31dd@e k31de@r k31df@mr) (k2e5f@letrec-helper k31dd@e k31de@r k31df@mr k2c1f@k2b90@build-letrec))) (set! k2e63@letrec*-transformer (lambda (k31e3@e k31e4@r k31e5@mr) (k2e5f@letrec-helper k31e3@e k31e4@r k31e5@mr k2c20@k2b92@build-letrec*))) (set! k2e65@fluid-let-syntax-transformer (lambda (k31e9@e k31ea@r k31eb@mr) ((lambda (k31f0@lookup) (begin (set! k31f0@lookup (lambda (k3203@x) (or (k2cd8@id->label k3203@x) (k2fb2@syntax-violation '#f '"unbound identifier" k31e9@e k3203@x)))) ((lambda (k31f1@t) ((lambda (k31f3@ls/false) (if k31f3@ls/false (apply (lambda (k31f5@lhs* k31f6@rhs* k31f7@b k31f8@b*) (if (not (k2cc8@valid-bound-ids? k31f5@lhs*)) (k2e83@invalid-fmls-error k31e9@e k31f5@lhs*) ((lambda (k31fd@lab* k31fe@rhs*) (k2f01@chi-internal (cons k31f7@b k31f8@b*) (append (map cons k31fd@lab* k31fe@rhs*) k31ea@r) (append (map cons k31fd@lab* k31fe@rhs*) k31eb@mr))) (map k31f0@lookup k31f5@lhs*) (map (lambda (k3201@x) (k2cfc@make-eval-transformer (k2f26@expand-transformer k3201@x k31eb@mr))) k31f6@rhs*)))) k31f3@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k31f1@t))) (k2ec9@syntax-dispatch k31f1@t '(_ #(each (any any)) any . each-any)))) k31e9@e))) '#f))) (set! k2e67@type-descriptor-transformer (lambda (k3205@e k3206@r k3207@mr) ((lambda (k320b@t) ((lambda (k320d@ls/false) (if (and k320d@ls/false (apply (lambda (k320f@id) (k2cbe@id? k320f@id)) k320d@ls/false)) (apply (lambda (k3211@id) ((lambda (k3213@lab) ((lambda (k3215@b) ((lambda (k3217@type) ((lambda () (begin (if (not k3213@lab) (k2ce4@raise-unbound-error k3211@id) (void)) (if (not (and (eq? k3217@type '$rtd) (not (list? (k2ce2@binding-value k3215@b))))) (k2fb2@syntax-violation '#f '"not a record type" k3205@e) (void)) (list 'quote (k2ce2@binding-value k3215@b)))))) (k2ce0@binding-type k3215@b))) (k2cdc@label->binding k3213@lab k3206@r))) (k2cd8@id->label k3211@id))) k320d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k320b@t))) (k2ec9@syntax-dispatch k320b@t '(_ any)))) k3205@e))) (set! k2e69@record-type-descriptor-transformer (lambda (k3219@e k321a@r k321b@mr) ((lambda (k321f@t) ((lambda (k3221@ls/false) (if (and k3221@ls/false (apply (lambda (k3223@id) (k2cbe@id? k3223@id)) k3221@ls/false)) (apply (lambda (k3225@id) ((lambda (k3227@lab) ((lambda (k3229@b) ((lambda (k322b@type) ((lambda () (begin (if (not k3227@lab) (k2ce4@raise-unbound-error k3225@id) (void)) (if (not (and (eq? k322b@type '$rtd) (list? (k2ce2@binding-value k3229@b)))) (k2fb2@syntax-violation '#f '"not a record type" k3219@e) (void)) (k2eeb@chi-expr (car (k2ce2@binding-value k3229@b)) k321a@r k321b@mr))))) (k2ce0@binding-type k3229@b))) (k2cdc@label->binding k3227@lab k321a@r))) (k2cd8@id->label k3225@id))) k3221@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k321f@t))) (k2ec9@syntax-dispatch k321f@t '(_ any)))) k3219@e))) (set! k2e6b@record-constructor-descriptor-transformer (lambda (k322d@e k322e@r k322f@mr) ((lambda (k3233@t) ((lambda (k3235@ls/false) (if (and k3235@ls/false (apply (lambda (k3237@id) (k2cbe@id? k3237@id)) k3235@ls/false)) (apply (lambda (k3239@id) ((lambda (k323b@lab) ((lambda (k323d@b) ((lambda (k323f@type) ((lambda () (begin (if (not k323b@lab) (k2ce4@raise-unbound-error k3239@id) (void)) (if (not (and (eq? k323f@type '$rtd) (list? (k2ce2@binding-value k323d@b)))) (k2fb2@syntax-violation '#f '"invalid type" k322d@e) (void)) (k2eeb@chi-expr (cadr (k2ce2@binding-value k323d@b)) k322e@r k322f@mr))))) (k2ce0@binding-type k323d@b))) (k2cdc@label->binding k323b@lab k322e@r))) (k2cd8@id->label k3239@id))) k3235@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3233@t))) (k2ec9@syntax-dispatch k3233@t '(_ any)))) k322d@e))) (set! k2e6d@when-macro (lambda (k3241@e) ((lambda (k3243@t) ((lambda (k3245@ls/false) (if k3245@ls/false (apply (lambda (k3247@test k3248@e k3249@e*) (k2e7f@bless (list 'if k3247@test (cons 'begin (cons k3248@e k3249@e*))))) k3245@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3243@t))) (k2ec9@syntax-dispatch k3243@t '(_ any any . each-any)))) k3241@e))) (set! k2e6f@unless-macro (lambda (k324d@e) ((lambda (k324f@t) ((lambda (k3251@ls/false) (if k3251@ls/false (apply (lambda (k3253@test k3254@e k3255@e*) (k2e7f@bless (list 'if (list 'not k3253@test) (cons 'begin (cons k3254@e k3255@e*))))) k3251@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k324f@t))) (k2ec9@syntax-dispatch k324f@t '(_ any any . each-any)))) k324d@e))) (set! k2e71@if-transformer (lambda (k3259@e k325a@r k325b@mr) ((lambda (k325f@t) ((lambda (k3261@ls/false) (if k3261@ls/false (apply (lambda (k3263@e0 k3264@e1 k3265@e2) (list 'if (k2eeb@chi-expr k3263@e0 k325a@r k325b@mr) (k2eeb@chi-expr k3264@e1 k325a@r k325b@mr) (k2eeb@chi-expr k3265@e2 k325a@r k325b@mr))) k3261@ls/false) ((lambda (k3269@t) ((lambda (k326b@ls/false) (if k326b@ls/false (apply (lambda (k326d@e0 k326e@e1) (list 'if (k2eeb@chi-expr k326d@e0 k325a@r k325b@mr) (k2eeb@chi-expr k326e@e1 k325a@r k325b@mr) (k2c1e@k2b8e@build-void))) k326b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3269@t))) (k2ec9@syntax-dispatch k3269@t '(_ any any)))) k325f@t))) (k2ec9@syntax-dispatch k325f@t '(_ any any any)))) k3259@e))) (set! k2e73@and-transformer (lambda (k3271@e k3272@r k3273@mr) ((lambda (k3277@t) ((lambda (k3279@ls/false) (if k3279@ls/false (apply (lambda (k327b@e*) (cons 'and (k2ee7@chi-expr* k327b@e* k3272@r k3273@mr))) k3279@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3277@t))) (k2ec9@syntax-dispatch k3277@t '(_ . each-any)))) k3271@e))) (set! k2e75@or-transformer (lambda (k327d@e k327e@r k327f@mr) ((lambda (k3283@t) ((lambda (k3285@ls/false) (if k3285@ls/false (apply (lambda (k3287@e*) (cons 'or (k2ee7@chi-expr* k3287@e* k327e@r k327f@mr))) k3285@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3283@t))) (k2ec9@syntax-dispatch k3283@t '(_ . each-any)))) k327d@e))) (set! k2e77@case-macro (lambda (k3289@e) ((lambda (k328c@build-last k328e@build-one) (begin (set! k328c@build-last (lambda (k32b3@cls) ((lambda (k32b5@t) ((lambda (k32b7@ls/false) (if k32b7@ls/false (apply (lambda (k32b9@e k32ba@e*) (cons 'begin (cons k32b9@e k32ba@e*))) k32b7@ls/false) ((lambda (k32bd@t) ((lambda (k32bf@ls/false) (if k32bf@ls/false (apply (lambda () (k328e@build-one k32b3@cls '(if #f #f))) k32bf@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k32bd@t))) (k2ec9@syntax-dispatch k32bd@t '_))) k32b5@t))) (k2ec9@syntax-dispatch k32b5@t '(#(scheme-id else) any . each-any)))) k32b3@cls))) (set! k328e@build-one (lambda (k32a5@cls k32a6@k) ((lambda (k32a9@t) ((lambda (k32ab@ls/false) (if k32ab@ls/false (apply (lambda (k32ad@d* k32ae@e k32af@e*) (list 'if (list 'memv 't (list 'quote k32ad@d*)) (cons 'begin (cons k32ae@e k32af@e*)) k32a6@k)) k32ab@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k32a9@t))) (k2ec9@syntax-dispatch k32a9@t '(each-any any . each-any)))) k32a5@cls))) ((lambda (k328f@t) ((lambda (k3291@ls/false) (if k3291@ls/false (apply (lambda (k3293@expr) (k2e7f@bless (cons 'let (cons (list (list 't k3293@expr)) '((if #f #f)))))) k3291@ls/false) ((lambda (k3295@t) ((lambda (k3297@ls/false) (if k3297@ls/false (apply (lambda (k3299@expr k329a@cls k329b@cls*) (k2e7f@bless (list 'let (list (list 't k3299@expr)) ((letrec ((k329f@f (lambda (k32a1@cls k32a2@cls*) (if (null? k32a2@cls*) (k328c@build-last k32a1@cls) (k328e@build-one k32a1@cls (k329f@f (car k32a2@cls*) (cdr k32a2@cls*))))))) k329f@f) k329a@cls k329b@cls*)))) k3297@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3295@t))) (k2ec9@syntax-dispatch k3295@t '(_ any any . each-any)))) k328f@t))) (k2ec9@syntax-dispatch k328f@t '(_ any)))) k3289@e))) '#f '#f))) (set! k2e79@quote-transformer (lambda (k32c1@e k32c2@r k32c3@mr) ((lambda (k32c7@t) ((lambda (k32c9@ls/false) (if k32c9@ls/false (apply (lambda (k32cb@datum) (list 'quote (k2cd4@stx->datum k32cb@datum))) k32c9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k32c7@t))) (k2ec9@syntax-dispatch k32c7@t '(_ any)))) k32c1@e))) (set! k2e7b@case-lambda-transformer (lambda (k32cd@e k32ce@r k32cf@mr) ((lambda (k32d3@t) ((lambda (k32d5@ls/false) (if k32d5@ls/false (apply (lambda (k32d7@fmls* k32d8@b* k32d9@b**) (call-with-values (lambda () (k2ef3@chi-lambda-clause* k32cd@e k32d7@fmls* (map cons k32d8@b* k32d9@b**) k32ce@r k32cf@mr)) (lambda (k32e1@k32de k32e2@k32e0) ((lambda (k32e5@body* k32e6@fmls*) (k2c1b@k2b5c@build-case-lambda '#f k32e6@fmls* k32e5@body*)) k32e2@k32e0 k32e1@k32de)))) k32d5@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k32d3@t))) (k2ec9@syntax-dispatch k32d3@t '(_ . #(each (any any . each-any)))))) k32cd@e))) (set! k2e7d@lambda-transformer (lambda (k32e9@e k32ea@r k32eb@mr) ((lambda (k32ef@t) ((lambda (k32f1@ls/false) (if k32f1@ls/false (apply (lambda (k32f3@fmls k32f4@b k32f5@b*) (call-with-values (lambda () (k2ef1@chi-lambda-clause k32e9@e k32f3@fmls (cons k32f4@b k32f5@b*) k32ea@r k32eb@mr)) (lambda (k32fd@k32fa k32fe@k32fc) ((lambda (k3301@body k3302@fmls) (k2c1a@k2b5a@build-lambda '#f k3302@fmls k3301@body)) k32fe@k32fc k32fd@k32fa)))) k32f1@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k32ef@t))) (k2ec9@syntax-dispatch k32ef@t '(_ any any . each-any)))) k32e9@e))) (set! k2e7f@bless (lambda (k3305@x) (k2ca6@mkstx ((letrec ((k3307@f (lambda (k3309@x) (if (k2c86@stx? k3309@x) k3309@x (if (pair? k3309@x) (cons (k3307@f (car k3309@x)) (k3307@f (cdr k3309@x))) (if (symbol? k3309@x) (k2e53@scheme-stx k3309@x) (if (vector? k3309@x) (vector-map k3307@f k3309@x) k3309@x))))))) k3307@f) k3305@x) '() '() '()))) (set! k2e81@with-syntax-macro (lambda (k330b@e) ((lambda (k330d@t) ((lambda (k330f@ls/false) (if k330f@ls/false (apply (lambda (k3311@pat* k3312@expr* k3313@b k3314@b*) ((lambda (k3319@idn*) (begin (k2eef@verify-formals (map car k3319@idn*) k330b@e) ((lambda (k331b@t*) (k2e7f@bless (list 'let (map list k331b@t* k3312@expr*) ((letrec ((k331d@f (lambda (k331f@pat* k3320@t*) (if (null? k331f@pat*) (cons 'begin (cons '#f (cons k3313@b k3314@b*))) (list 'syntax-case (car k3320@t*) '() (list (car k331f@pat*) (k331d@f (cdr k331f@pat*) (cdr k3320@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car k331f@pat*)) (car k3320@t*)))))))) k331d@f) k3311@pat* k331b@t*)))) (k2fa0@generate-temporaries k3312@expr*)))) ((letrec ((k3323@f (lambda (k3325@pat*) (if (null? k3325@pat*) '() (call-with-values (lambda () (k2ec7@convert-pattern (car k3325@pat*) '())) (lambda (k332b@k3328 k332c@k332a) ((lambda (k332f@idn* k3330@pat) (append k332f@idn* (k3323@f (cdr k3325@pat*)))) k332c@k332a k332b@k3328))))))) k3323@f) k3311@pat*))) k330f@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k330d@t))) (k2ec9@syntax-dispatch k330d@t '(_ #(each (any any)) any . each-any)))) k330b@e))) (set! k2e83@invalid-fmls-error (lambda (k3333@stx k3334@fmls) ((lambda (k3337@t) ((lambda (k3339@ls/false) (if k3339@ls/false (apply (lambda (k333b@id* k333c@last) ((letrec ((k333f@f (lambda (k3341@id*) (if (null? k3341@id*) (values) (if (not (k2cbe@id? (car k3341@id*))) (k2fb2@syntax-violation '#f '"not an identifier" k3333@stx (car k3341@id*)) (begin (k333f@f (cdr k3341@id*)) (if (k2ccc@bound-id-member? (car k3341@id*) (cdr k3341@id*)) (k2fb2@syntax-violation '#f '"duplicate binding" k3333@stx (car k3341@id*)) (void)))))))) k333f@f) (if (k2cbe@id? k333c@last) (cons k333c@last k333b@id*) (if (k2cb4@syntax-null? k333c@last) k333b@id* (k2fb2@syntax-violation '#f '"not an identifier" k3333@stx k333c@last))))) k3339@ls/false) ((lambda (k3343@t) ((lambda (k3345@ls/false) (if k3345@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"malformed binding form" k3333@stx k3334@fmls)) k3345@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3343@t))) (k2ec9@syntax-dispatch k3343@t '_))) k3337@t))) (k2ec9@syntax-dispatch k3337@t '#(each+ any () any)))) k3334@fmls))) (set! k2e85@let-macro (lambda (k3347@stx) ((lambda (k3349@t) ((lambda (k334b@ls/false) (if k334b@ls/false (apply (lambda (k334d@lhs* k334e@rhs* k334f@b k3350@b*) (if (k2cc8@valid-bound-ids? k334d@lhs*) (k2e7f@bless (cons (cons 'lambda (cons k334d@lhs* (cons k334f@b k3350@b*))) k334e@rhs*)) (k2e83@invalid-fmls-error k3347@stx k334d@lhs*))) k334b@ls/false) ((lambda (k3355@t) ((lambda (k3357@ls/false) (if (and k3357@ls/false (apply (lambda (k3359@f k335a@lhs* k335b@rhs* k335c@b k335d@b*) (k2cbe@id? k3359@f)) k3357@ls/false)) (apply (lambda (k3363@f k3364@lhs* k3365@rhs* k3366@b k3367@b*) (if (k2cc8@valid-bound-ids? k3364@lhs*) (k2e7f@bless (cons (list 'letrec (list (list k3363@f (cons 'lambda (cons k3364@lhs* (cons k3366@b k3367@b*))))) k3363@f) k3365@rhs*)) (k2e83@invalid-fmls-error k3347@stx k3364@lhs*))) k3357@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3355@t))) (k2ec9@syntax-dispatch k3355@t '(_ any #(each (any any)) any . each-any)))) k3349@t))) (k2ec9@syntax-dispatch k3349@t '(_ #(each (any any)) any . each-any)))) k3347@stx))) (set! k2e87@let-values-macro (lambda (k336d@stx) ((lambda (k3370@rename k3372@rename*) (begin (set! k3370@rename (lambda (k33d5@x k33d6@old* k33d7@new*) (begin (if (not (k2cbe@id? k33d5@x)) (k2fb2@syntax-violation '#f '"not an indentifier" k336d@stx k33d5@x) (void)) (if (k2ccc@bound-id-member? k33d5@x k33d6@old*) (k2fb2@syntax-violation '#f '"duplicate binding" k336d@stx k33d5@x) (void)) ((lambda (k33db@y) (values k33db@y (cons k33d5@x k33d6@old*) (cons k33db@y k33d7@new*))) (gensym (k2fb8@syntax->datum k33d5@x)))))) (set! k3372@rename* (lambda (k33c3@x* k33c4@old* k33c5@new*) (if (null? k33c3@x*) (values '() k33c4@old* k33c5@new*) (call-with-values (lambda () (k3370@rename (car k33c3@x*) k33c4@old* k33c5@new*)) (lambda (k33c9@x k33ca@old* k33cb@new*) (call-with-values (lambda () (k3372@rename* (cdr k33c3@x*) k33ca@old* k33cb@new*)) (lambda (k33cf@x* k33d0@old* k33d1@new*) (values (cons k33c9@x k33cf@x*) k33d0@old* k33d1@new*)))))))) ((lambda (k3373@t) ((lambda (k3375@ls/false) (if k3375@ls/false (apply (lambda (k3377@b k3378@b*) (cons* (k2e7f@bless 'let) '() k3377@b k3378@b*)) k3375@ls/false) ((lambda (k337b@t) ((lambda (k337d@ls/false) (if k337d@ls/false (apply (lambda (k337f@lhs* k3380@rhs* k3381@b k3382@b*) (k2e7f@bless ((letrec ((k3387@f (lambda (k3389@lhs* k338a@rhs* k338b@old* k338c@new*) (if (null? k3389@lhs*) (cons 'let (cons (map list k338b@old* k338c@new*) (cons k3381@b k3382@b*))) ((lambda (k3391@t) ((lambda (k3393@ls/false) (if k3393@ls/false (apply (lambda (k3395@x*) (call-with-values (lambda () (k3372@rename* k3395@x* k338b@old* k338c@new*)) (lambda (k339d@k3398 k339e@k339a k339f@k339c) ((lambda (k33a3@new* k33a4@old* k33a5@y*) (list 'call-with-values (list 'lambda '() (car k338a@rhs*)) (list 'lambda k33a5@y* (k3387@f (cdr k3389@lhs*) (cdr k338a@rhs*) k33a4@old* k33a3@new*)))) k339f@k339c k339e@k339a k339d@k3398)))) k3393@ls/false) ((lambda (k33a9@t) ((lambda (k33ab@ls/false) (if k33ab@ls/false (apply (lambda (k33ad@x* k33ae@x) (call-with-values (lambda () (k3370@rename k33ae@x k338b@old* k338c@new*)) (lambda (k33b1@y k33b2@old* k33b3@new*) (call-with-values (lambda () (k3372@rename* k33ad@x* k33b2@old* k33b3@new*)) (lambda (k33b7@y* k33b8@old* k33b9@new*) (list 'call-with-values (list 'lambda '() (car k338a@rhs*)) (list 'lambda (append k33b7@y* k33b1@y) (k3387@f (cdr k3389@lhs*) (cdr k338a@rhs*) k33b8@old* k33b9@new*)))))))) k33ab@ls/false) ((lambda (k33bd@t) ((lambda (k33bf@ls/false) (if k33bf@ls/false (apply (lambda (k33c1@others) (k2fb2@syntax-violation '#f '"malformed bindings" k336d@stx k33c1@others)) k33bf@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k33bd@t))) (k2ec9@syntax-dispatch k33bd@t 'any))) k33a9@t))) (k2ec9@syntax-dispatch k33a9@t '#(each+ any () any)))) k3391@t))) (k2ec9@syntax-dispatch k3391@t 'each-any))) (car k3389@lhs*)))))) k3387@f) k337f@lhs* k3380@rhs* '() '()))) k337d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k337b@t))) (k2ec9@syntax-dispatch k337b@t '(_ #(each (any any)) any . each-any)))) k3373@t))) (k2ec9@syntax-dispatch k3373@t '(_ () any . each-any)))) k336d@stx))) '#f '#f))) (set! k2e89@let*-values-macro (lambda (k33dd@stx) ((lambda (k33e0@check) (begin (set! k33e0@check (lambda (k340f@x*) (if (not (null? k340f@x*)) ((lambda (k3411@x) (begin (if (not (k2cbe@id? k3411@x)) (k2fb2@syntax-violation '#f '"not an identifier" k33dd@stx k3411@x) (void)) (k33e0@check (cdr k340f@x*)) (if (k2ccc@bound-id-member? k3411@x (cdr k340f@x*)) (k2fb2@syntax-violation '#f '"duplicate identifier" k33dd@stx k3411@x) (void)))) (car k340f@x*)) (void)))) ((lambda (k33e1@t) ((lambda (k33e3@ls/false) (if k33e3@ls/false (apply (lambda (k33e5@b k33e6@b*) (cons* (k2e7f@bless 'let) '() k33e5@b k33e6@b*)) k33e3@ls/false) ((lambda (k33e9@t) ((lambda (k33eb@ls/false) (if k33eb@ls/false (apply (lambda (k33ed@lhs* k33ee@rhs* k33ef@b k33f0@b*) (k2e7f@bless ((letrec ((k33f5@f (lambda (k33f7@lhs* k33f8@rhs*) (if (null? k33f7@lhs*) (cons 'begin (cons k33ef@b k33f0@b*)) ((lambda (k33fb@t) ((lambda (k33fd@ls/false) (if k33fd@ls/false (apply (lambda (k33ff@x*) (begin (k33e0@check k33ff@x*) (list 'call-with-values (list 'lambda '() (car k33f8@rhs*)) (list 'lambda k33ff@x* (k33f5@f (cdr k33f7@lhs*) (cdr k33f8@rhs*)))))) k33fd@ls/false) ((lambda (k3401@t) ((lambda (k3403@ls/false) (if k3403@ls/false (apply (lambda (k3405@x* k3406@x) (begin (k33e0@check (cons k3406@x k3405@x*)) (list 'call-with-values (list 'lambda '() (car k33f8@rhs*)) (list 'lambda (append k3405@x* k3406@x) (k33f5@f (cdr k33f7@lhs*) (cdr k33f8@rhs*)))))) k3403@ls/false) ((lambda (k3409@t) ((lambda (k340b@ls/false) (if k340b@ls/false (apply (lambda (k340d@others) (k2fb2@syntax-violation '#f '"malformed bindings" k33dd@stx k340d@others)) k340b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3409@t))) (k2ec9@syntax-dispatch k3409@t 'any))) k3401@t))) (k2ec9@syntax-dispatch k3401@t '#(each+ any () any)))) k33fb@t))) (k2ec9@syntax-dispatch k33fb@t 'each-any))) (car k33f7@lhs*)))))) k33f5@f) k33ed@lhs* k33ee@rhs*))) k33eb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k33e9@t))) (k2ec9@syntax-dispatch k33e9@t '(_ #(each (any any)) any . each-any)))) k33e1@t))) (k2ec9@syntax-dispatch k33e1@t '(_ () any . each-any)))) k33dd@stx))) '#f))) (set! k2e8b@trace-lambda-macro (lambda (k3413@stx) ((lambda (k3415@t) ((lambda (k3417@ls/false) (if k3417@ls/false (apply (lambda (k3419@who k341a@fmls k341b@b k341c@b*) (if (k2cc8@valid-bound-ids? k341a@fmls) (k2e7f@bless (list 'make-traced-procedure (list 'quote k3419@who) (cons 'lambda (cons k341a@fmls (cons k341b@b k341c@b*))))) (k2e83@invalid-fmls-error k3413@stx k341a@fmls))) k3417@ls/false) ((lambda (k3421@t) ((lambda (k3423@ls/false) (if k3423@ls/false (apply (lambda (k3425@who k3426@fmls k3427@last k3428@b k3429@b*) (if (k2cc8@valid-bound-ids? (cons k3427@last k3426@fmls)) (k2e7f@bless (list 'make-traced-procedure (list 'quote k3425@who) (cons 'lambda (cons (append k3426@fmls k3427@last) (cons k3428@b k3429@b*))))) (k2e83@invalid-fmls-error k3413@stx (append k3426@fmls k3427@last)))) k3423@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3421@t))) (k2ec9@syntax-dispatch k3421@t '(_ any #(each+ any () any) any . each-any)))) k3415@t))) (k2ec9@syntax-dispatch k3415@t '(_ any each-any any . each-any)))) k3413@stx))) (set! k2e8d@trace-define-macro (lambda (k342f@stx) ((lambda (k3431@t) ((lambda (k3433@ls/false) (if k3433@ls/false (apply (lambda (k3435@who k3436@fmls k3437@b k3438@b*) (if (k2cc8@valid-bound-ids? k3436@fmls) (k2e7f@bless (list 'define k3435@who (list 'make-traced-procedure (list 'quote k3435@who) (cons 'lambda (cons k3436@fmls (cons k3437@b k3438@b*)))))) (k2e83@invalid-fmls-error k342f@stx k3436@fmls))) k3433@ls/false) ((lambda (k343d@t) ((lambda (k343f@ls/false) (if k343f@ls/false (apply (lambda (k3441@who k3442@fmls k3443@last k3444@b k3445@b*) (if (k2cc8@valid-bound-ids? (cons k3443@last k3442@fmls)) (k2e7f@bless (list 'define k3441@who (list 'make-traced-procedure (list 'quote k3441@who) (cons 'lambda (cons (append k3442@fmls k3443@last) (cons k3444@b k3445@b*)))))) (k2e83@invalid-fmls-error k342f@stx (append k3442@fmls k3443@last)))) k343f@ls/false) ((lambda (k344b@t) ((lambda (k344d@ls/false) (if k344d@ls/false (apply (lambda (k344f@who k3450@expr) (if (k2cbe@id? k344f@who) (k2e7f@bless (list 'define k344f@who (list 'let (list (list 'v k3450@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote k344f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (k2fb2@syntax-violation '#f '"invalid name" k342f@stx))) k344d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k344b@t))) (k2ec9@syntax-dispatch k344b@t '(_ any any)))) k343d@t))) (k2ec9@syntax-dispatch k343d@t '(_ (any . #(each+ any () any)) any . each-any)))) k3431@t))) (k2ec9@syntax-dispatch k3431@t '(_ (any . each-any) any . each-any)))) k342f@stx))) (set! k2e8f@trace-define-syntax-macro (lambda (k3453@stx) ((lambda (k3455@t) ((lambda (k3457@ls/false) (if k3457@ls/false (apply (lambda (k3459@who k345a@expr) (if (k2cbe@id? k3459@who) (k2e7f@bless (list 'define-syntax k3459@who (list 'make-traced-macro (list 'quote k3459@who) k345a@expr))) (k2fb2@syntax-violation '#f '"invalid name" k3453@stx))) k3457@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3455@t))) (k2ec9@syntax-dispatch k3455@t '(_ any any)))) k3453@stx))) (set! k2e91@trace-let/rec-syntax (lambda (k345d@who) (lambda (k345f@stx) ((lambda (k3461@t) ((lambda (k3463@ls/false) (if k3463@ls/false (apply (lambda (k3465@lhs* k3466@rhs* k3467@b k3468@b*) (if (k2cc8@valid-bound-ids? k3465@lhs*) ((lambda (k346d@rhs*) (k2e7f@bless (cons k345d@who (cons (map list k3465@lhs* k346d@rhs*) (cons k3467@b k3468@b*))))) (map (lambda (k346f@lhs k3470@rhs) (list 'make-traced-macro (list 'quote k346f@lhs) k3470@rhs)) k3465@lhs* k3466@rhs*)) (k2e83@invalid-fmls-error k345f@stx k3465@lhs*))) k3463@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3461@t))) (k2ec9@syntax-dispatch k3461@t '(_ #(each (any any)) any . each-any)))) k345f@stx)))) (set! k2e93@trace-let-syntax-macro (k2e91@trace-let/rec-syntax 'let-syntax)) (set! k2e95@trace-letrec-syntax-macro (k2e91@trace-let/rec-syntax 'letrec-syntax)) (set! k2e97@guard-macro (lambda (k3473@x) ((lambda (k3476@gen-clauses) (begin (set! k3476@gen-clauses (lambda (k348d@con k348e@outerk k348f@clause*) ((lambda (k3494@f k3496@f*) (begin (set! k3494@f (lambda (k34cd@x k34ce@k) ((lambda (k34d1@t) ((lambda (k34d3@ls/false) (if k34d3@ls/false (apply (lambda (k34d5@e k34d6@p) ((lambda (k34d9@t) (list 'let (list (list k34d9@t k34d5@e)) (list 'if k34d9@t (list k34d6@p k34d9@t) k34ce@k))) (gensym))) k34d3@ls/false) ((lambda (k34db@t) ((lambda (k34dd@ls/false) (if k34dd@ls/false (apply (lambda (k34df@e) ((lambda (k34e1@t) (list 'let (list (list k34e1@t k34df@e)) (list 'if k34e1@t k34e1@t k34ce@k))) (gensym))) k34dd@ls/false) ((lambda (k34e3@t) ((lambda (k34e5@ls/false) (if k34e5@ls/false (apply (lambda (k34e7@e k34e8@v k34e9@v*) (list 'if k34e7@e (cons 'begin (cons k34e8@v k34e9@v*)) k34ce@k)) k34e5@ls/false) ((lambda (k34ed@t) ((lambda (k34ef@ls/false) (if k34ef@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid guard clause" k34cd@x)) k34ef@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k34ed@t))) (k2ec9@syntax-dispatch k34ed@t '_))) k34e3@t))) (k2ec9@syntax-dispatch k34e3@t '(any any . each-any)))) k34db@t))) (k2ec9@syntax-dispatch k34db@t '(any)))) k34d1@t))) (k2ec9@syntax-dispatch k34d1@t '(any #(scheme-id =>) any)))) k34cd@x))) (set! k3496@f* (lambda (k34a3@x*) ((lambda (k34a5@t) ((lambda (k34a7@ls/false) (if k34a7@ls/false (apply (lambda () ((lambda (k34a9@g) (values (list k34a9@g (list 'lambda '() (list 'raise-continuable k348d@con))) k34a9@g)) (gensym))) k34a7@ls/false) ((lambda (k34ab@t) ((lambda (k34ad@ls/false) (if k34ad@ls/false (apply (lambda (k34af@e k34b0@e*) (values (cons 'begin (cons k34af@e k34b0@e*)) '#f)) k34ad@ls/false) ((lambda (k34b3@t) ((lambda (k34b5@ls/false) (if k34b5@ls/false (apply (lambda (k34b7@cls k34b8@cls*) (call-with-values (lambda () (k3496@f* k34b8@cls*)) (lambda (k34bf@k34bc k34c0@k34be) ((lambda (k34c3@g k34c4@e) (values (k3494@f k34b7@cls k34c4@e) k34c3@g)) k34c0@k34be k34bf@k34bc)))) k34b5@ls/false) ((lambda (k34c7@t) ((lambda (k34c9@ls/false) (if k34c9@ls/false (apply (lambda (k34cb@others) (k2fb2@syntax-violation '#f '"invalid guard clause" k34cb@others)) k34c9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k34c7@t))) (k2ec9@syntax-dispatch k34c7@t 'any))) k34b3@t))) (k2ec9@syntax-dispatch k34b3@t '(any . any)))) k34ab@t))) (k2ec9@syntax-dispatch k34ab@t '((#(scheme-id else) any . each-any))))) k34a5@t))) (k2ec9@syntax-dispatch k34a5@t '()))) k34a3@x*))) (call-with-values (lambda () (k3496@f* k348f@clause*)) (lambda (k349b@k3498 k349c@k349a) ((lambda (k349f@raisek k34a0@code) (if k349f@raisek (list (list 'call/cc (list 'lambda (list k349f@raisek) (list k348e@outerk (list 'lambda '() k34a0@code))))) (list k348e@outerk (list 'lambda '() k34a0@code)))) k349c@k349a k349b@k3498))))) '#f '#f))) ((lambda (k3477@t) ((lambda (k3479@ls/false) (if (and k3479@ls/false (apply (lambda (k347b@con k347c@clause* k347d@b k347e@b*) (k2cbe@id? k347b@con)) k3479@ls/false)) (apply (lambda (k3483@con k3484@clause* k3485@b k3486@b*) ((lambda (k348b@outerk) (k2e7f@bless (list (list 'call/cc (list 'lambda (list k348b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list k3483@con) (k3476@gen-clauses k3483@con k348b@outerk k3484@clause*)) (cons 'lambda (cons '() (cons k3485@b k3486@b*)))))))))) (gensym))) k3479@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3477@t))) (k2ec9@syntax-dispatch k3477@t '(_ (any . each-any) any . each-any)))) k3473@x))) '#f))) (set! k2e99@define-enumeration-macro (lambda (k34f1@stx) ((lambda (k34f4@set? k34f6@remove-dups) (begin (set! k34f4@set? (lambda (k350d@x) (or (null? k350d@x) (and (not (memq (car k350d@x) (cdr k350d@x))) (k34f4@set? (cdr k350d@x)))))) (set! k34f6@remove-dups (lambda (k350b@ls) (if (null? k350b@ls) '() (cons (car k350b@ls) (k34f6@remove-dups (remq (car k350b@ls) (cdr k350b@ls))))))) ((lambda (k34f7@t) ((lambda (k34f9@ls/false) (if (and k34f9@ls/false (apply (lambda (k34fb@name k34fc@id* k34fd@maker) (and (k2cbe@id? k34fb@name) (k2cbe@id? k34fd@maker) (for-all k2cbe@id? k34fc@id*))) k34f9@ls/false)) (apply (lambda (k3501@name k3502@id* k3503@maker) ((lambda (k3507@name* k3508@mk) (k2e7f@bless (list 'begin (list 'define k3508@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote k3507@name*)))) (list 'define-syntax k3501@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote k3507@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote k3501@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax k3503@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote k3503@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote k3507@name*)) (cons 'syntax-violation (cons (list 'quote k3503@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons k3508@mk '('(n* ...)))))))))))) (k34f6@remove-dups (k2fb8@syntax->datum k3502@id*)) (gensym))) k34f9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k34f7@t))) (k2ec9@syntax-dispatch k34f7@t '(_ any each-any any)))) k34f1@stx))) '#f '#f))) (set! k2e9b@time-macro (lambda (k350f@stx) ((lambda (k3511@t) ((lambda (k3513@ls/false) (if k3513@ls/false (apply (lambda (k3515@expr) (k2e7f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() k3515@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) k3513@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3511@t))) (k2ec9@syntax-dispatch k3511@t '(_ any)))) k350f@stx))) (set! k2e9d@delay-macro (lambda (k3517@stx) ((lambda (k3519@t) ((lambda (k351b@ls/false) (if k351b@ls/false (apply (lambda (k351d@expr) (k2e7f@bless (list 'make-promise (list 'lambda '() k351d@expr)))) k351b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3519@t))) (k2ec9@syntax-dispatch k3519@t '(_ any)))) k3517@stx))) (set! k2e9f@assert-macro (lambda (k351f@stx) ((lambda (k3521@t) ((lambda (k3523@ls/false) (if k3523@ls/false (apply (lambda (k3525@expr) ((lambda (k3527@pos) (k2e7f@bless (list 'unless k3525@expr (list 'assertion-error (list 'quote k3525@expr) (list 'quote k3527@pos))))) (or (k2faa@expression-position k351f@stx) (k2faa@expression-position k3525@expr)))) k3523@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3521@t))) (k2ec9@syntax-dispatch k3521@t '(_ any)))) k351f@stx))) (set! k2ea1@endianness-macro (lambda (k3529@stx) ((lambda (k352b@t) ((lambda (k352d@ls/false) (if k352d@ls/false (apply (lambda (k352f@e) ((lambda (k3531@t) (if (memv k3531@t '(little)) (k2e7f@bless ''little) (if (memv k3531@t '(big)) (k2e7f@bless ''big) (k2fb2@syntax-violation '#f '"endianness must be big or little" k3529@stx)))) (k2fb8@syntax->datum k352f@e))) k352d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k352b@t))) (k2ec9@syntax-dispatch k352b@t '(_ any)))) k3529@stx))) (set! k2ea3@identifier-syntax-macro (lambda (k3533@stx) ((lambda (k3535@t) ((lambda (k3537@ls/false) (if k3537@ls/false (apply (lambda (k3539@expr) (k2e7f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax k3539@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax k3539@expr) '((syntax (e* ...)))))))))) k3537@ls/false) ((lambda (k353b@t) ((lambda (k353d@ls/false) (if (and k353d@ls/false (apply (lambda (k353f@id1 k3540@expr1 k3541@id2 k3542@expr2 k3543@expr3) (and (k2cbe@id? k353f@id1) (k2cbe@id? k3541@id2) (k2cbe@id? k3542@expr2))) k353d@ls/false)) (apply (lambda (k3549@id1 k354a@expr1 k354b@id2 k354c@expr2 k354d@expr3) (k2e7f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax k354a@expr1)) (list (list 'set! 'id k354c@expr2) (list 'syntax k354d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons k354a@expr1 '(e* ...))))))))) k353d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k353b@t))) (k2ec9@syntax-dispatch k353b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) k3535@t))) (k2ec9@syntax-dispatch k3535@t '(_ any)))) k3533@stx))) (set! k2ea5@do-macro (lambda (k3553@stx) ((lambda (k3556@bind) (begin (set! k3556@bind (lambda (k356d@x) ((lambda (k356f@t) ((lambda (k3571@ls/false) (if k3571@ls/false (apply (lambda (k3573@x k3574@init) (list k3573@x k3574@init k3573@x)) k3571@ls/false) ((lambda (k3577@t) ((lambda (k3579@ls/false) (if k3579@ls/false (apply (lambda (k357b@x k357c@init k357d@step) (list k357b@x k357c@init k357d@step)) k3579@ls/false) ((lambda (k3581@t) ((lambda (k3583@ls/false) (if k3583@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid binding" k3553@stx)) k3583@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3581@t))) (k2ec9@syntax-dispatch k3581@t '_))) k3577@t))) (k2ec9@syntax-dispatch k3577@t '(any any any)))) k356f@t))) (k2ec9@syntax-dispatch k356f@t '(any any)))) k356d@x))) ((lambda (k3557@t) ((lambda (k3559@ls/false) (if k3559@ls/false (apply (lambda (k355b@binding* k355c@test k355d@expr* k355e@command*) ((lambda (k3563@t) ((lambda (k3565@ls/false) (if k3565@ls/false (apply (lambda (k3567@x* k3568@init* k3569@step*) (if (k2cc8@valid-bound-ids? k3567@x*) (k2e7f@bless (list 'letrec (list (list 'loop (list 'lambda k3567@x* (list 'if k355c@test (cons 'begin (cons '(if #f #f) k355d@expr*)) (cons 'begin (append k355e@command* (list (cons 'loop k3569@step*)))))))) (cons 'loop k3568@init*))) (k2fb2@syntax-violation '#f '"invalid bindings" k3553@stx))) k3565@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3563@t))) (k2ec9@syntax-dispatch k3563@t '#(each (any any any))))) (map k3556@bind k355b@binding*))) k3559@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3557@t))) (k2ec9@syntax-dispatch k3557@t '(_ each-any (any . each-any) . each-any)))) k3553@stx))) '#f))) (set! k2ea7@let*-macro (lambda (k3585@stx) ((lambda (k3587@t) ((lambda (k3589@ls/false) (if (and k3589@ls/false (apply (lambda (k358b@lhs* k358c@rhs* k358d@b k358e@b*) (for-all k2cbe@id? k358b@lhs*)) k3589@ls/false)) (apply (lambda (k3593@lhs* k3594@rhs* k3595@b k3596@b*) (k2e7f@bless ((letrec ((k359b@f (lambda (k359d@x*) (if (null? k359d@x*) (cons 'let (cons '() (cons k3595@b k3596@b*))) (list 'let (list (car k359d@x*)) (k359b@f (cdr k359d@x*))))))) k359b@f) (map list k3593@lhs* k3594@rhs*)))) k3589@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3587@t))) (k2ec9@syntax-dispatch k3587@t '(_ #(each (any any)) any . each-any)))) k3585@stx))) (set! k2ea9@or-macro (lambda (k359f@stx) ((lambda (k35a1@t) ((lambda (k35a3@ls/false) (if k35a3@ls/false (apply (lambda () '#f) k35a3@ls/false) ((lambda (k35a5@t) ((lambda (k35a7@ls/false) (if k35a7@ls/false (apply (lambda (k35a9@e k35aa@e*) (k2e7f@bless ((letrec ((k35ad@f (lambda (k35af@e k35b0@e*) (if (null? k35b0@e*) (list 'begin '#f k35af@e) (list 'let (list (list 't k35af@e)) (list 'if 't 't (k35ad@f (car k35b0@e*) (cdr k35b0@e*)))))))) k35ad@f) k35a9@e k35aa@e*))) k35a7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k35a5@t))) (k2ec9@syntax-dispatch k35a5@t '(_ any . each-any)))) k35a1@t))) (k2ec9@syntax-dispatch k35a1@t '(_)))) k359f@stx))) (set! k2eab@and-macro (lambda (k35b3@stx) ((lambda (k35b5@t) ((lambda (k35b7@ls/false) (if k35b7@ls/false (apply (lambda () '#t) k35b7@ls/false) ((lambda (k35b9@t) ((lambda (k35bb@ls/false) (if k35bb@ls/false (apply (lambda (k35bd@e k35be@e*) (k2e7f@bless ((letrec ((k35c1@f (lambda (k35c3@e k35c4@e*) (if (null? k35c4@e*) (list 'begin '#f k35c3@e) (cons 'if (cons k35c3@e (cons (k35c1@f (car k35c4@e*) (cdr k35c4@e*)) '(#f)))))))) k35c1@f) k35bd@e k35be@e*))) k35bb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k35b9@t))) (k2ec9@syntax-dispatch k35b9@t '(_ any . each-any)))) k35b5@t))) (k2ec9@syntax-dispatch k35b5@t '(_)))) k35b3@stx))) (set! k2ead@cond-macro (lambda (k35c7@stx) ((lambda (k35c9@t) ((lambda (k35cb@ls/false) (if k35cb@ls/false (apply (lambda (k35cd@cls k35ce@cls*) (k2e7f@bless ((letrec ((k35d1@f (lambda (k35d3@cls k35d4@cls*) (if (null? k35d4@cls*) ((lambda (k35d7@t) ((lambda (k35d9@ls/false) (if k35d9@ls/false (apply (lambda (k35db@e k35dc@e*) (cons 'begin (cons k35db@e k35dc@e*))) k35d9@ls/false) ((lambda (k35df@t) ((lambda (k35e1@ls/false) (if k35e1@ls/false (apply (lambda (k35e3@e k35e4@p) (list 'let (list (list 't k35e3@e)) (list 'if 't (cons k35e4@p '(t))))) k35e1@ls/false) ((lambda (k35e7@t) ((lambda (k35e9@ls/false) (if k35e9@ls/false (apply (lambda (k35eb@e) (cons 'or (cons k35eb@e '((if #f #f))))) k35e9@ls/false) ((lambda (k35ed@t) ((lambda (k35ef@ls/false) (if k35ef@ls/false (apply (lambda (k35f1@e k35f2@e*) (list 'if k35f1@e (cons 'begin k35f2@e*))) k35ef@ls/false) ((lambda (k35f5@t) ((lambda (k35f7@ls/false) (if k35f7@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid last clause" k35c7@stx)) k35f7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k35f5@t))) (k2ec9@syntax-dispatch k35f5@t '_))) k35ed@t))) (k2ec9@syntax-dispatch k35ed@t '(any . each-any)))) k35e7@t))) (k2ec9@syntax-dispatch k35e7@t '(any)))) k35df@t))) (k2ec9@syntax-dispatch k35df@t '(any #(scheme-id =>) any)))) k35d7@t))) (k2ec9@syntax-dispatch k35d7@t '(#(scheme-id else) any . each-any)))) k35d3@cls) ((lambda (k35f9@t) ((lambda (k35fb@ls/false) (if k35fb@ls/false (apply (lambda (k35fd@e k35fe@e*) (k2fb2@syntax-violation '#f '"incorrect position of keyword else" k35c7@stx)) k35fb@ls/false) ((lambda (k3601@t) ((lambda (k3603@ls/false) (if k3603@ls/false (apply (lambda (k3605@e k3606@p) (list 'let (list (list 't k3605@e)) (list 'if 't (cons k3606@p '(t)) (k35d1@f (car k35d4@cls*) (cdr k35d4@cls*))))) k3603@ls/false) ((lambda (k3609@t) ((lambda (k360b@ls/false) (if k360b@ls/false (apply (lambda (k360d@e) (list 'or k360d@e (k35d1@f (car k35d4@cls*) (cdr k35d4@cls*)))) k360b@ls/false) ((lambda (k360f@t) ((lambda (k3611@ls/false) (if k3611@ls/false (apply (lambda (k3613@e k3614@e*) (list 'if k3613@e (cons 'begin k3614@e*) (k35d1@f (car k35d4@cls*) (cdr k35d4@cls*)))) k3611@ls/false) ((lambda (k3617@t) ((lambda (k3619@ls/false) (if k3619@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid last clause" k35c7@stx)) k3619@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3617@t))) (k2ec9@syntax-dispatch k3617@t '_))) k360f@t))) (k2ec9@syntax-dispatch k360f@t '(any . each-any)))) k3609@t))) (k2ec9@syntax-dispatch k3609@t '(any)))) k3601@t))) (k2ec9@syntax-dispatch k3601@t '(any #(scheme-id =>) any)))) k35f9@t))) (k2ec9@syntax-dispatch k35f9@t '(#(scheme-id else) any . each-any)))) k35d3@cls))))) k35d1@f) k35cd@cls k35ce@cls*))) k35cb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k35c9@t))) (k2ec9@syntax-dispatch k35c9@t '(_ any . each-any)))) k35c7@stx))) (set! k2eaf@do-include (lambda (k361b@stx k361c@id k361d@filename) ((lambda (k3621@filename) (begin (if (not (and (string? k3621@filename) (k2cbe@id? k361c@id))) (k2fb2@syntax-violation '#f '"invalid syntax" k361b@stx) (void)) (cons (k2e7f@bless 'begin) (with-input-from-file k3621@filename (lambda () ((letrec ((k3623@f (lambda (k3625@ls) ((lambda (k3627@x) (if (eof-object? k3627@x) (reverse k3625@ls) (k3623@f (cons (k2c9c@datum->stx k361c@id k3627@x) k3625@ls)))) (k285b@k2778@read-annotated))))) k3623@f) '())))))) (k2cd4@stx->datum k361d@filename)))) (set! k2eb1@include-macro (lambda (k3629@e) ((lambda (k362b@t) ((lambda (k362d@ls/false) (if k362d@ls/false (apply (lambda (k362f@id k3630@filename) (k2eaf@do-include k3629@e k362f@id k3630@filename)) k362d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k362b@t))) (k2ec9@syntax-dispatch k362b@t '(any any)))) k3629@e))) (set! k2eb3@include-into-macro (lambda (k3633@e) ((lambda (k3635@t) ((lambda (k3637@ls/false) (if k3637@ls/false (apply (lambda (k3639@id k363a@filename) (k2eaf@do-include k3633@e k3639@id k363a@filename)) k3637@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3635@t))) (k2ec9@syntax-dispatch k3635@t '(_ any any)))) k3633@e))) (set! k2eb5@syntax-rules-macro (lambda (k363d@e) ((lambda (k363f@t) ((lambda (k3641@ls/false) (if k3641@ls/false (apply (lambda (k3643@lits k3644@pat* k3645@tmp*) (begin (k2ecf@verify-literals k3643@lits k363d@e) (k2e7f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons k3643@lits (map (lambda (k3649@pat k364a@tmp) ((lambda (k364d@t) ((lambda (k364f@ls/false) (if k364f@ls/false (apply (lambda (k3651@rest) (list (cons 'g k3651@rest) (list 'syntax k364a@tmp))) k364f@ls/false) ((lambda (k3653@t) ((lambda (k3655@ls/false) (if k3655@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid syntax-rules pattern" k363d@e k3649@pat)) k3655@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3653@t))) (k2ec9@syntax-dispatch k3653@t '_))) k364d@t))) (k2ec9@syntax-dispatch k364d@t '(_ . any)))) k3649@pat)) k3644@pat* k3645@tmp*)))))))) k3641@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k363f@t))) (k2ec9@syntax-dispatch k363f@t '(_ each-any . #(each (any any)))))) k363d@e))) (set! k2eb7@quasiquote-macro ((lambda () ((lambda (k3658@datum k3674@quasicons* k3676@quasicons k3678@quasiappend k367a@quasivector k367c@vquasi k367e@quasi) (begin (set! k3658@datum (lambda (k3759@x) (list (k2e53@scheme-stx 'quote) (k2ca6@mkstx k3759@x '() '() '())))) (set! k3674@quasicons* (lambda (k3751@x k3752@y) ((letrec ((k3755@f (lambda (k3757@x) (if (null? k3757@x) k3752@y (k3676@quasicons (car k3757@x) (k3755@f (cdr k3757@x))))))) k3755@f) k3751@x))) (set! k3676@quasicons (lambda (k372b@x k372c@y) ((lambda (k372f@t) ((lambda (k3731@ls/false) (if k3731@ls/false (apply (lambda (k3733@dy) ((lambda (k3735@t) ((lambda (k3737@ls/false) (if k3737@ls/false (apply (lambda (k3739@dx) (list (k2e53@scheme-stx 'quote) (cons k3739@dx k3733@dy))) k3737@ls/false) ((lambda (k373b@t) ((lambda (k373d@ls/false) (if k373d@ls/false (apply (lambda () ((lambda (k373f@t) ((lambda (k3741@ls/false) (if k3741@ls/false (apply (lambda () (list (k2e53@scheme-stx 'list) k372b@x)) k3741@ls/false) ((lambda (k3743@t) ((lambda (k3745@ls/false) (if k3745@ls/false (apply (lambda () (list (k2e53@scheme-stx 'cons) k372b@x k372c@y)) k3745@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3743@t))) (k2ec9@syntax-dispatch k3743@t '_))) k373f@t))) (k2ec9@syntax-dispatch k373f@t '()))) k3733@dy)) k373d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k373b@t))) (k2ec9@syntax-dispatch k373b@t '_))) k3735@t))) (k2ec9@syntax-dispatch k3735@t '(#(scheme-id quote) any)))) k372b@x)) k3731@ls/false) ((lambda (k3747@t) ((lambda (k3749@ls/false) (if k3749@ls/false (apply (lambda (k374b@stuff) (cons* (k2e53@scheme-stx 'list) k372b@x k374b@stuff)) k3749@ls/false) ((lambda (k374d@t) ((lambda (k374f@ls/false) (if k374f@ls/false (apply (lambda () (list (k2e53@scheme-stx 'cons) k372b@x k372c@y)) k374f@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k374d@t))) (k2ec9@syntax-dispatch k374d@t '_))) k3747@t))) (k2ec9@syntax-dispatch k3747@t '(#(scheme-id list) . each-any)))) k372f@t))) (k2ec9@syntax-dispatch k372f@t '(#(scheme-id quote) any)))) k372c@y))) (set! k3678@quasiappend (lambda (k3711@x k3712@y) ((lambda (k3715@ls) (if (null? k3715@ls) (list (k2e53@scheme-stx 'quote) '()) (if (null? (cdr k3715@ls)) (car k3715@ls) (cons* (k2e53@scheme-stx 'append) k3715@ls)))) ((letrec ((k3717@f (lambda (k3719@x) (if (null? k3719@x) ((lambda (k371b@t) ((lambda (k371d@ls/false) (if k371d@ls/false (apply (lambda () '()) k371d@ls/false) ((lambda (k371f@t) ((lambda (k3721@ls/false) (if k3721@ls/false (apply (lambda () (list k3712@y)) k3721@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k371f@t))) (k2ec9@syntax-dispatch k371f@t '_))) k371b@t))) (k2ec9@syntax-dispatch k371b@t '(#(scheme-id quote) ())))) k3712@y) ((lambda (k3723@t) ((lambda (k3725@ls/false) (if k3725@ls/false (apply (lambda () (k3717@f (cdr k3719@x))) k3725@ls/false) ((lambda (k3727@t) ((lambda (k3729@ls/false) (if k3729@ls/false (apply (lambda () (cons (car k3719@x) (k3717@f (cdr k3719@x)))) k3729@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3727@t))) (k2ec9@syntax-dispatch k3727@t '_))) k3723@t))) (k2ec9@syntax-dispatch k3723@t '(#(scheme-id quote) ())))) (car k3719@x)))))) k3717@f) k3711@x)))) (set! k367a@quasivector (lambda (k36df@x) ((lambda (k36e1@pat-x) ((lambda (k36e3@t) ((lambda (k36e5@ls/false) (if k36e5@ls/false (apply (lambda (k36e7@x*) (list (k2e53@scheme-stx 'quote) (list->vector k36e7@x*))) k36e5@ls/false) ((lambda (k36e9@t) ((lambda (k36eb@ls/false) (if k36eb@ls/false (apply (lambda () ((letrec ((k36ed@f (lambda (k36ef@x k36f0@k) ((lambda (k36f3@t) ((lambda (k36f5@ls/false) (if k36f5@ls/false (apply (lambda (k36f7@x*) (k36f0@k (map (lambda (k36f9@x) (list (k2e53@scheme-stx 'quote) k36f9@x)) k36f7@x*))) k36f5@ls/false) ((lambda (k36fb@t) ((lambda (k36fd@ls/false) (if k36fd@ls/false (apply (lambda (k36ff@x*) (k36f0@k k36ff@x*)) k36fd@ls/false) ((lambda (k3701@t) ((lambda (k3703@ls/false) (if k3703@ls/false (apply (lambda (k3705@x k3706@y) (k36ed@f k3706@y (lambda (k3709@ls) (k36f0@k (cons k3705@x k3709@ls))))) k3703@ls/false) ((lambda (k370b@t) ((lambda (k370d@ls/false) (if k370d@ls/false (apply (lambda () (list (k2e53@scheme-stx 'list->vector) k36e1@pat-x)) k370d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k370b@t))) (k2ec9@syntax-dispatch k370b@t '_))) k3701@t))) (k2ec9@syntax-dispatch k3701@t '(#(scheme-id cons) any any)))) k36fb@t))) (k2ec9@syntax-dispatch k36fb@t '(#(scheme-id list) . each-any)))) k36f3@t))) (k2ec9@syntax-dispatch k36f3@t '(#(scheme-id quote) each-any)))) k36ef@x)))) k36ed@f) k36df@x (lambda (k370f@ls) (cons* (k2e53@scheme-stx 'vector) k370f@ls)))) k36eb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k36e9@t))) (k2ec9@syntax-dispatch k36e9@t '_))) k36e3@t))) (k2ec9@syntax-dispatch k36e3@t '(#(scheme-id quote) each-any)))) k36e1@pat-x)) k36df@x))) (set! k367c@vquasi (lambda (k36bd@p k36be@lev) ((lambda (k36c1@t) ((lambda (k36c3@ls/false) (if k36c3@ls/false (apply (lambda (k36c5@p k36c6@q) ((lambda (k36c9@t) ((lambda (k36cb@ls/false) (if k36cb@ls/false (apply (lambda (k36cd@p) (if (= k36be@lev '0) (k3674@quasicons* k36cd@p (k367c@vquasi k36c6@q k36be@lev)) (k3676@quasicons (k3676@quasicons (k3658@datum 'unquote) (k367e@quasi k36cd@p (- k36be@lev '1))) (k367c@vquasi k36c6@q k36be@lev)))) k36cb@ls/false) ((lambda (k36cf@t) ((lambda (k36d1@ls/false) (if k36d1@ls/false (apply (lambda (k36d3@p) (if (= k36be@lev '0) (k3678@quasiappend k36d3@p (k367c@vquasi k36c6@q k36be@lev)) (k3676@quasicons (k3676@quasicons (k3658@datum 'unquote-splicing) (k367e@quasi k36d3@p (- k36be@lev '1))) (k367c@vquasi k36c6@q k36be@lev)))) k36d1@ls/false) ((lambda (k36d5@t) ((lambda (k36d7@ls/false) (if k36d7@ls/false (apply (lambda (k36d9@p) (k3676@quasicons (k367e@quasi k36d9@p k36be@lev) (k367c@vquasi k36c6@q k36be@lev))) k36d7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k36d5@t))) (k2ec9@syntax-dispatch k36d5@t 'any))) k36cf@t))) (k2ec9@syntax-dispatch k36cf@t '(#(scheme-id unquote-splicing) . each-any)))) k36c9@t))) (k2ec9@syntax-dispatch k36c9@t '(#(scheme-id unquote) . each-any)))) k36c5@p)) k36c3@ls/false) ((lambda (k36db@t) ((lambda (k36dd@ls/false) (if k36dd@ls/false (apply (lambda () (list (k2e53@scheme-stx 'quote) '())) k36dd@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k36db@t))) (k2ec9@syntax-dispatch k36db@t '()))) k36c1@t))) (k2ec9@syntax-dispatch k36c1@t '(any . any)))) k36bd@p))) (set! k367e@quasi (lambda (k3687@p k3688@lev) ((lambda (k368b@t) ((lambda (k368d@ls/false) (if k368d@ls/false (apply (lambda (k368f@p) (if (= k3688@lev '0) k368f@p (k3676@quasicons (k3658@datum 'unquote) (k367e@quasi (list k368f@p) (- k3688@lev '1))))) k368d@ls/false) ((lambda (k3691@t) ((lambda (k3693@ls/false) (if k3693@ls/false (apply (lambda (k3695@p k3696@q) (if (= k3688@lev '0) (k3674@quasicons* k3695@p (k367e@quasi k3696@q k3688@lev)) (k3676@quasicons (k3676@quasicons (k3658@datum 'unquote) (k367e@quasi k3695@p (- k3688@lev '1))) (k367e@quasi k3696@q k3688@lev)))) k3693@ls/false) ((lambda (k3699@t) ((lambda (k369b@ls/false) (if k369b@ls/false (apply (lambda (k369d@p k369e@q) (if (= k3688@lev '0) (k3678@quasiappend k369d@p (k367e@quasi k369e@q k3688@lev)) (k3676@quasicons (k3676@quasicons (k3658@datum 'unquote-splicing) (k367e@quasi k369d@p (- k3688@lev '1))) (k367e@quasi k369e@q k3688@lev)))) k369b@ls/false) ((lambda (k36a1@t) ((lambda (k36a3@ls/false) (if k36a3@ls/false (apply (lambda (k36a5@p) (k3676@quasicons (k3658@datum 'quasiquote) (k367e@quasi (list k36a5@p) (+ k3688@lev '1)))) k36a3@ls/false) ((lambda (k36a7@t) ((lambda (k36a9@ls/false) (if k36a9@ls/false (apply (lambda (k36ab@p k36ac@q) (k3676@quasicons (k367e@quasi k36ab@p k3688@lev) (k367e@quasi k36ac@q k3688@lev))) k36a9@ls/false) ((lambda (k36af@t) ((lambda (k36b1@ls/false) (if (and k36b1@ls/false (apply (lambda (k36b3@x) (not (k2c86@stx? k36b3@x))) k36b1@ls/false)) (apply (lambda (k36b5@x) (k367a@quasivector (k367c@vquasi k36b5@x k3688@lev))) k36b1@ls/false) ((lambda (k36b7@t) ((lambda (k36b9@ls/false) (if k36b9@ls/false (apply (lambda (k36bb@p) (list (k2e53@scheme-stx 'quote) k36bb@p)) k36b9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k36b7@t))) (k2ec9@syntax-dispatch k36b7@t 'any))) k36af@t))) (k2ec9@syntax-dispatch k36af@t '#(vector each-any)))) k36a7@t))) (k2ec9@syntax-dispatch k36a7@t '(any . any)))) k36a1@t))) (k2ec9@syntax-dispatch k36a1@t '(#(scheme-id quasiquote) any)))) k3699@t))) (k2ec9@syntax-dispatch k3699@t '((#(scheme-id unquote-splicing) . each-any) . any)))) k3691@t))) (k2ec9@syntax-dispatch k3691@t '((#(scheme-id unquote) . each-any) . any)))) k368b@t))) (k2ec9@syntax-dispatch k368b@t '(#(scheme-id unquote) any)))) k3687@p))) (lambda (k367f@x) ((lambda (k3681@t) ((lambda (k3683@ls/false) (if k3683@ls/false (apply (lambda (k3685@e) (k367e@quasi k3685@e '0)) k3683@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3681@t))) (k2ec9@syntax-dispatch k3681@t '(_ any)))) k367f@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! k2eb9@quasisyntax-macro ((lambda () ((lambda (k375c@quasi) (begin (set! k375c@quasi (lambda (k3777@p k3778@lev) ((lambda (k377b@t) ((lambda (k377d@ls/false) (if k377d@ls/false (apply (lambda (k377f@p) (if (= k3778@lev '0) ((lambda (k3781@g) (values (list k3781@g) (list k377f@p) k3781@g)) (gensym)) (call-with-values (lambda () (k375c@quasi k377f@p (- k3778@lev '1))) (lambda (k3789@k3784 k378a@k3786 k378b@k3788) ((lambda (k378f@p k3790@rhs* k3791@lhs*) (values k3791@lhs* k3790@rhs* (list 'unsyntax k378f@p))) k378b@k3788 k378a@k3786 k3789@k3784))))) k377d@ls/false) ((lambda (k3795@t) ((lambda (k3797@ls/false) (if (and k3797@ls/false (apply (lambda () (= k3778@lev '0)) k3797@ls/false)) (apply (lambda () (k2fb2@syntax-violation '#f '"incorrect use of unsyntax" k3777@p)) k3797@ls/false) ((lambda (k3799@t) ((lambda (k379b@ls/false) (if k379b@ls/false (apply (lambda (k379d@p* k379e@q) (call-with-values (lambda () (k375c@quasi k379e@q k3778@lev)) (lambda (k37a7@k37a2 k37a8@k37a4 k37a9@k37a6) ((lambda (k37ad@q k37ae@rhs* k37af@lhs*) (if (= k3778@lev '0) ((lambda (k37b3@g*) (values (append k37b3@g* k37af@lhs*) (append k379d@p* k37ae@rhs*) (append k37b3@g* k37ad@q))) (map (lambda (k37b5@x) (gensym)) k379d@p*)) (call-with-values (lambda () (k375c@quasi k379d@p* (- k3778@lev '1))) (lambda (k37bd@k37b8 k37be@k37ba k37bf@k37bc) ((lambda (k37c3@p* k37c4@rhs2* k37c5@lhs2*) (values (append k37c5@lhs2* k37af@lhs*) (append k37c4@rhs2* k37ae@rhs*) (cons (cons 'unsyntax k37c3@p*) k37ad@q))) k37bf@k37bc k37be@k37ba k37bd@k37b8))))) k37a9@k37a6 k37a8@k37a4 k37a7@k37a2)))) k379b@ls/false) ((lambda (k37c9@t) ((lambda (k37cb@ls/false) (if k37cb@ls/false (apply (lambda (k37cd@p* k37ce@q) (call-with-values (lambda () (k375c@quasi k37ce@q k3778@lev)) (lambda (k37d7@k37d2 k37d8@k37d4 k37d9@k37d6) ((lambda (k37dd@q k37de@rhs* k37df@lhs*) (if (= k3778@lev '0) ((lambda (k37e3@g*) (values (append (map (lambda (k37e5@g) (cons k37e5@g '(...))) k37e3@g*) k37df@lhs*) (append k37cd@p* k37de@rhs*) (append (apply append (map (lambda (k37e7@g) (cons k37e7@g '(...))) k37e3@g*)) k37dd@q))) (map (lambda (k37e9@x) (gensym)) k37cd@p*)) (call-with-values (lambda () (k375c@quasi k37cd@p* (- k3778@lev '1))) (lambda (k37f1@k37ec k37f2@k37ee k37f3@k37f0) ((lambda (k37f7@p* k37f8@rhs2* k37f9@lhs2*) (values (append k37f9@lhs2* k37df@lhs*) (append k37f8@rhs2* k37de@rhs*) (cons (cons 'unsyntax-splicing k37f7@p*) k37dd@q))) k37f3@k37f0 k37f2@k37ee k37f1@k37ec))))) k37d9@k37d6 k37d8@k37d4 k37d7@k37d2)))) k37cb@ls/false) ((lambda (k37fd@t) ((lambda (k37ff@ls/false) (if (and k37ff@ls/false (apply (lambda () (= k3778@lev '0)) k37ff@ls/false)) (apply (lambda () (k2fb2@syntax-violation '#f '"incorrect use of unsyntax-splicing" k3777@p)) k37ff@ls/false) ((lambda (k3801@t) ((lambda (k3803@ls/false) (if k3803@ls/false (apply (lambda (k3805@p) (call-with-values (lambda () (k375c@quasi k3805@p (+ k3778@lev '1))) (lambda (k380d@k3808 k380e@k380a k380f@k380c) ((lambda (k3813@p k3814@rhs* k3815@lhs*) (values k3815@lhs* k3814@rhs* (list 'quasisyntax k3813@p))) k380f@k380c k380e@k380a k380d@k3808)))) k3803@ls/false) ((lambda (k3819@t) ((lambda (k381b@ls/false) (if k381b@ls/false (apply (lambda (k381d@p k381e@q) (call-with-values (lambda () (k375c@quasi k381d@p k3778@lev)) (lambda (k382d@k3822 k382e@k3824 k382f@k3826) (call-with-values (lambda () (k375c@quasi k381e@q k3778@lev)) (lambda (k3833@k3828 k3834@k382a k3835@k382c) ((lambda (k3839@q k383a@rhs2* k383b@lhs2* k383c@p k383d@rhs* k383e@lhs*) (values (append k383b@lhs2* k383e@lhs*) (append k383a@rhs2* k383d@rhs*) (cons k383c@p k3839@q))) k3835@k382c k3834@k382a k3833@k3828 k382f@k3826 k382e@k3824 k382d@k3822)))))) k381b@ls/false) ((lambda (k3845@t) ((lambda (k3847@ls/false) (if k3847@ls/false (apply (lambda (k3849@x*) (call-with-values (lambda () (k375c@quasi k3849@x* k3778@lev)) (lambda (k3851@k384c k3852@k384e k3853@k3850) ((lambda (k3857@x* k3858@rhs* k3859@lhs*) (values k3859@lhs* k3858@rhs* (list->vector k3857@x*))) k3853@k3850 k3852@k384e k3851@k384c)))) k3847@ls/false) ((lambda (k385d@t) ((lambda (k385f@ls/false) (if k385f@ls/false (apply (lambda () (values '() '() k3777@p)) k385f@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k385d@t))) (k2ec9@syntax-dispatch k385d@t '_))) k3845@t))) (k2ec9@syntax-dispatch k3845@t '#(vector each-any)))) k3819@t))) (k2ec9@syntax-dispatch k3819@t '(any . any)))) k3801@t))) (k2ec9@syntax-dispatch k3801@t '(#(scheme-id quasisyntax) any)))) k37fd@t))) (k2ec9@syntax-dispatch k37fd@t '#(scheme-id unsyntax-splicing)))) k37c9@t))) (k2ec9@syntax-dispatch k37c9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) k3799@t))) (k2ec9@syntax-dispatch k3799@t '((#(scheme-id unsyntax) . each-any) . any)))) k3795@t))) (k2ec9@syntax-dispatch k3795@t '#(scheme-id unsyntax)))) k377b@t))) (k2ec9@syntax-dispatch k377b@t '(#(scheme-id unsyntax) any)))) k3777@p))) (lambda (k375d@x) ((lambda (k375f@t) ((lambda (k3761@ls/false) (if k3761@ls/false (apply (lambda (k3763@e) (call-with-values (lambda () (k375c@quasi k3763@e '0)) (lambda (k376b@k3766 k376c@k3768 k376d@k376a) ((lambda (k3771@v k3772@rhs* k3773@lhs*) (k2e7f@bless (list 'syntax-case (cons 'list k3772@rhs*) '() (list k3773@lhs* (list 'syntax k3771@v))))) k376d@k376a k376c@k3768 k376b@k3766)))) k3761@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k375f@t))) (k2ec9@syntax-dispatch k375f@t '(_ any)))) k375d@x)))) '#f)))) (set! k2ebb@define-struct-macro (lambda (k3861@stx) (k2fb2@syntax-violation '#f '"define-struct not supported" k3861@stx))) (set! k2ebd@define-record-type-macro (lambda (k3863@x) ((lambda (k3866@id k3868@get-record-name k386a@get-record-constructor-name k386c@get-record-predicate-name k386e@get-clause k3870@foo-rtd-code k3872@parent-rtd-code k3874@parent-rcd-code k3876@foo-rcd-code k3878@get-protocol-code k387a@get-fields k387c@get-mutator-indices k387e@get-mutators k3880@get-accessors k3882@enumerate k3884@do-define-record k3886@verify-clauses) (begin (set! k3866@id (lambda (k3a59@ctxt . k3a5b@str*) (k2fb6@datum->syntax k3a59@ctxt (string->symbol (apply string-append (map (lambda (k3a5d@x) (if (symbol? k3a5d@x) (symbol->string k3a5d@x) (if (string? k3a5d@x) k3a5d@x (assertion-violation 'define-record-type '"BUG")))) k3a5b@str*)))))) (set! k3868@get-record-name (lambda (k3a47@spec) ((lambda (k3a49@t) ((lambda (k3a4b@ls/false) (if k3a4b@ls/false (apply (lambda (k3a4d@foo k3a4e@make-foo k3a4f@foo?) k3a4d@foo) k3a4b@ls/false) ((lambda (k3a53@t) ((lambda (k3a55@ls/false) (if k3a55@ls/false (apply (lambda (k3a57@foo) k3a57@foo) k3a55@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a53@t))) (k2ec9@syntax-dispatch k3a53@t 'any))) k3a49@t))) (k2ec9@syntax-dispatch k3a49@t '(any any any)))) k3a47@spec))) (set! k386a@get-record-constructor-name (lambda (k3a33@spec) ((lambda (k3a35@t) ((lambda (k3a37@ls/false) (if k3a37@ls/false (apply (lambda (k3a39@foo k3a3a@make-foo k3a3b@foo?) k3a3a@make-foo) k3a37@ls/false) ((lambda (k3a3f@t) ((lambda (k3a41@ls/false) (if (and k3a41@ls/false (apply (lambda (k3a43@foo) (k2cbe@id? k3a43@foo)) k3a41@ls/false)) (apply (lambda (k3a45@foo) (k3866@id k3a45@foo '"make-" (k2cd4@stx->datum k3a45@foo))) k3a41@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a3f@t))) (k2ec9@syntax-dispatch k3a3f@t 'any))) k3a35@t))) (k2ec9@syntax-dispatch k3a35@t '(any any any)))) k3a33@spec))) (set! k386c@get-record-predicate-name (lambda (k3a1f@spec) ((lambda (k3a21@t) ((lambda (k3a23@ls/false) (if k3a23@ls/false (apply (lambda (k3a25@foo k3a26@make-foo k3a27@foo?) k3a27@foo?) k3a23@ls/false) ((lambda (k3a2b@t) ((lambda (k3a2d@ls/false) (if (and k3a2d@ls/false (apply (lambda (k3a2f@foo) (k2cbe@id? k3a2f@foo)) k3a2d@ls/false)) (apply (lambda (k3a31@foo) (k3866@id k3a31@foo (k2cd4@stx->datum k3a31@foo) '"?")) k3a2d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a2b@t))) (k2ec9@syntax-dispatch k3a2b@t 'any))) k3a21@t))) (k2ec9@syntax-dispatch k3a21@t '(any any any)))) k3a1f@spec))) (set! k386e@get-clause (lambda (k3a0d@id k3a0e@ls) ((lambda (k3a11@t) ((lambda (k3a13@ls/false) (if k3a13@ls/false (apply (lambda () '#f) k3a13@ls/false) ((lambda (k3a15@t) ((lambda (k3a17@ls/false) (if k3a17@ls/false (apply (lambda (k3a19@x k3a1a@rest k3a1b@ls) (if (k2cc6@free-id=? (k2e7f@bless k3a0d@id) k3a19@x) (cons k3a19@x k3a1a@rest) (k386e@get-clause k3a0d@id k3a1b@ls))) k3a17@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a15@t))) (k2ec9@syntax-dispatch k3a15@t '((any . any) . any)))) k3a11@t))) (k2ec9@syntax-dispatch k3a11@t '()))) k3a0e@ls))) (set! k3870@foo-rtd-code (lambda (k39bb@name k39bc@clause* k39bd@parent-rtd-code) ((lambda (k39c2@convert-field-spec*) (begin (set! k39c2@convert-field-spec* (lambda (k39f3@ls) (list->vector (map (lambda (k39f5@x) ((lambda (k39f7@t) ((lambda (k39f9@ls/false) (if k39f9@ls/false (apply (lambda (k39fb@name k39fc@rest) (list 'mutable k39fb@name)) k39f9@ls/false) ((lambda (k39ff@t) ((lambda (k3a01@ls/false) (if k3a01@ls/false (apply (lambda (k3a03@name k3a04@rest) (list 'immutable k3a03@name)) k3a01@ls/false) ((lambda (k3a07@t) ((lambda (k3a09@ls/false) (if k3a09@ls/false (apply (lambda (k3a0b@name) (list 'immutable k3a0b@name)) k3a09@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a07@t))) (k2ec9@syntax-dispatch k3a07@t 'any))) k39ff@t))) (k2ec9@syntax-dispatch k39ff@t '(#(scheme-id immutable) any . any)))) k39f7@t))) (k2ec9@syntax-dispatch k39f7@t '(#(scheme-id mutable) any . any)))) k39f5@x)) k39f3@ls)))) ((lambda (k39c3@uid-code k39c4@sealed? k39c5@opaque? k39c6@fields) (k2e7f@bless (list 'make-record-type-descriptor (list 'quote k39bb@name) k39bd@parent-rtd-code k39c3@uid-code k39c4@sealed? k39c5@opaque? k39c6@fields))) ((lambda (k39cb@t) ((lambda (k39cd@ls/false) (if k39cd@ls/false (apply (lambda () (list 'quote (gensym))) k39cd@ls/false) ((lambda (k39cf@t) ((lambda (k39d1@ls/false) (if k39d1@ls/false (apply (lambda (k39d3@uid) (list 'quote k39d3@uid)) k39d1@ls/false) ((lambda (k39d5@t) ((lambda (k39d7@ls/false) (if k39d7@ls/false (apply (lambda () '#f) k39d7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39d5@t))) (k2ec9@syntax-dispatch k39d5@t '_))) k39cf@t))) (k2ec9@syntax-dispatch k39cf@t '(_ any)))) k39cb@t))) (k2ec9@syntax-dispatch k39cb@t '(_)))) (k386e@get-clause 'nongenerative k39bc@clause*)) ((lambda (k39d9@t) ((lambda (k39db@ls/false) (if k39db@ls/false (apply (lambda () '#t) k39db@ls/false) ((lambda (k39dd@t) ((lambda (k39df@ls/false) (if k39df@ls/false (apply (lambda () '#f) k39df@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39dd@t))) (k2ec9@syntax-dispatch k39dd@t '_))) k39d9@t))) (k2ec9@syntax-dispatch k39d9@t '(_ #(atom #t))))) (k386e@get-clause 'sealed k39bc@clause*)) ((lambda (k39e1@t) ((lambda (k39e3@ls/false) (if k39e3@ls/false (apply (lambda () '#t) k39e3@ls/false) ((lambda (k39e5@t) ((lambda (k39e7@ls/false) (if k39e7@ls/false (apply (lambda () '#f) k39e7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39e5@t))) (k2ec9@syntax-dispatch k39e5@t '_))) k39e1@t))) (k2ec9@syntax-dispatch k39e1@t '(_ #(atom #t))))) (k386e@get-clause 'opaque k39bc@clause*)) ((lambda (k39e9@t) ((lambda (k39eb@ls/false) (if k39eb@ls/false (apply (lambda (k39ed@field-spec*) (list 'quote (k39c2@convert-field-spec* k39ed@field-spec*))) k39eb@ls/false) ((lambda (k39ef@t) ((lambda (k39f1@ls/false) (if k39f1@ls/false (apply (lambda () ''#()) k39f1@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39ef@t))) (k2ec9@syntax-dispatch k39ef@t '_))) k39e9@t))) (k2ec9@syntax-dispatch k39e9@t '(_ . each-any)))) (k386e@get-clause 'fields k39bc@clause*))))) '#f))) (set! k3872@parent-rtd-code (lambda (k39a3@clause*) ((lambda (k39a5@t) ((lambda (k39a7@ls/false) (if k39a7@ls/false (apply (lambda (k39a9@name) (list 'record-type-descriptor k39a9@name)) k39a7@ls/false) ((lambda (k39ab@t) ((lambda (k39ad@ls/false) (if k39ad@ls/false (apply (lambda () ((lambda (k39af@t) ((lambda (k39b1@ls/false) (if k39b1@ls/false (apply (lambda (k39b3@rtd k39b4@rcd) k39b3@rtd) k39b1@ls/false) ((lambda (k39b7@t) ((lambda (k39b9@ls/false) (if k39b9@ls/false (apply (lambda () '#f) k39b9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39b7@t))) (k2ec9@syntax-dispatch k39b7@t '#(atom #f)))) k39af@t))) (k2ec9@syntax-dispatch k39af@t '(_ any any)))) (k386e@get-clause 'parent-rtd k39a3@clause*))) k39ad@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k39ab@t))) (k2ec9@syntax-dispatch k39ab@t '#(atom #f)))) k39a5@t))) (k2ec9@syntax-dispatch k39a5@t '(_ any)))) (k386e@get-clause 'parent k39a3@clause*)))) (set! k3874@parent-rcd-code (lambda (k398b@clause*) ((lambda (k398d@t) ((lambda (k398f@ls/false) (if k398f@ls/false (apply (lambda (k3991@name) (list 'record-constructor-descriptor k3991@name)) k398f@ls/false) ((lambda (k3993@t) ((lambda (k3995@ls/false) (if k3995@ls/false (apply (lambda () ((lambda (k3997@t) ((lambda (k3999@ls/false) (if k3999@ls/false (apply (lambda (k399b@rtd k399c@rcd) k399c@rcd) k3999@ls/false) ((lambda (k399f@t) ((lambda (k39a1@ls/false) (if k39a1@ls/false (apply (lambda () '#f) k39a1@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k399f@t))) (k2ec9@syntax-dispatch k399f@t '#(atom #f)))) k3997@t))) (k2ec9@syntax-dispatch k3997@t '(_ any any)))) (k386e@get-clause 'parent-rtd k398b@clause*))) k3995@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3993@t))) (k2ec9@syntax-dispatch k3993@t '#(atom #f)))) k398d@t))) (k2ec9@syntax-dispatch k398d@t '(_ any)))) (k386e@get-clause 'parent k398b@clause*)))) (set! k3876@foo-rcd-code (lambda (k3983@clause* k3984@foo-rtd k3985@protocol k3986@parent-rcd-code) (list 'make-record-constructor-descriptor k3984@foo-rtd k3986@parent-rcd-code k3985@protocol))) (set! k3878@get-protocol-code (lambda (k3977@clause*) ((lambda (k3979@t) ((lambda (k397b@ls/false) (if k397b@ls/false (apply (lambda (k397d@expr) k397d@expr) k397b@ls/false) ((lambda (k397f@t) ((lambda (k3981@ls/false) (if k3981@ls/false (apply (lambda () '#f) k3981@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k397f@t))) (k2ec9@syntax-dispatch k397f@t '_))) k3979@t))) (k2ec9@syntax-dispatch k3979@t '(_ any)))) (k386e@get-clause 'protocol k3977@clause*)))) (set! k387a@get-fields (lambda (k3965@clause*) ((lambda (k3967@t) ((lambda (k3969@ls/false) (if k3969@ls/false (apply (lambda () '()) k3969@ls/false) ((lambda (k396b@t) ((lambda (k396d@ls/false) (if k396d@ls/false (apply (lambda (k396f@f*) k396f@f*) k396d@ls/false) ((lambda (k3971@t) ((lambda (k3973@ls/false) (if k3973@ls/false (apply (lambda (k3975@rest) (k387a@get-fields k3975@rest)) k3973@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3971@t))) (k2ec9@syntax-dispatch k3971@t '(_ . any)))) k396b@t))) (k2ec9@syntax-dispatch k396b@t '((#(scheme-id fields) . each-any) . _)))) k3967@t))) (k2ec9@syntax-dispatch k3967@t '()))) k3965@clause*))) (set! k387c@get-mutator-indices (lambda (k394d@fields) ((letrec ((k394f@f (lambda (k3951@fields k3952@i) ((lambda (k3955@t) ((lambda (k3957@ls/false) (if k3957@ls/false (apply (lambda () '()) k3957@ls/false) ((lambda (k3959@t) ((lambda (k395b@ls/false) (if k395b@ls/false (apply (lambda (k395d@rest) (cons k3952@i (k394f@f k395d@rest (+ k3952@i '1)))) k395b@ls/false) ((lambda (k395f@t) ((lambda (k3961@ls/false) (if k3961@ls/false (apply (lambda (k3963@rest) (k394f@f k3963@rest (+ k3952@i '1))) k3961@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k395f@t))) (k2ec9@syntax-dispatch k395f@t '(_ . any)))) k3959@t))) (k2ec9@syntax-dispatch k3959@t '((#(scheme-id mutable) . _) . any)))) k3955@t))) (k2ec9@syntax-dispatch k3955@t '()))) k3951@fields)))) k394f@f) k394d@fields '0))) (set! k387e@get-mutators (lambda (k3923@foo k3924@fields) ((lambda (k3928@gen-name) (begin (set! k3928@gen-name (lambda (k394b@x) (k2fb6@datum->syntax k3923@foo (string->symbol (string-append (symbol->string (k2fb8@syntax->datum k3923@foo)) '"-" (symbol->string (k2fb8@syntax->datum k394b@x)) '"-set!"))))) ((letrec ((k3929@f (lambda (k392b@fields) ((lambda (k392d@t) ((lambda (k392f@ls/false) (if k392f@ls/false (apply (lambda () '()) k392f@ls/false) ((lambda (k3931@t) ((lambda (k3933@ls/false) (if k3933@ls/false (apply (lambda (k3935@name k3936@accessor k3937@mutator k3938@rest) (cons k3937@mutator (k3929@f k3938@rest))) k3933@ls/false) ((lambda (k393d@t) ((lambda (k393f@ls/false) (if k393f@ls/false (apply (lambda (k3941@name k3942@rest) (cons (k3928@gen-name k3941@name) (k3929@f k3942@rest))) k393f@ls/false) ((lambda (k3945@t) ((lambda (k3947@ls/false) (if k3947@ls/false (apply (lambda (k3949@rest) (k3929@f k3949@rest)) k3947@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3945@t))) (k2ec9@syntax-dispatch k3945@t '(_ . any)))) k393d@t))) (k2ec9@syntax-dispatch k393d@t '((#(scheme-id mutable) any) . any)))) k3931@t))) (k2ec9@syntax-dispatch k3931@t '((#(scheme-id mutable) any any any) . any)))) k392d@t))) (k2ec9@syntax-dispatch k392d@t '()))) k392b@fields)))) k3929@f) k3924@fields))) '#f))) (set! k3880@get-accessors (lambda (k38df@foo k38e0@fields) ((lambda (k38e4@gen-name) (begin (set! k38e4@gen-name (lambda (k3921@x) (k2fb6@datum->syntax k38df@foo (string->symbol (string-append (symbol->string (k2fb8@syntax->datum k38df@foo)) '"-" (symbol->string (k2fb8@syntax->datum k3921@x))))))) (map (lambda (k38e5@field) ((lambda (k38e7@t) ((lambda (k38e9@ls/false) (if (and k38e9@ls/false (apply (lambda (k38eb@name k38ec@accessor k38ed@mutator) (k2cbe@id? k38ec@accessor)) k38e9@ls/false)) (apply (lambda (k38f1@name k38f2@accessor k38f3@mutator) k38f2@accessor) k38e9@ls/false) ((lambda (k38f7@t) ((lambda (k38f9@ls/false) (if (and k38f9@ls/false (apply (lambda (k38fb@name k38fc@accessor) (k2cbe@id? k38fc@accessor)) k38f9@ls/false)) (apply (lambda (k38ff@name k3900@accessor) k3900@accessor) k38f9@ls/false) ((lambda (k3903@t) ((lambda (k3905@ls/false) (if (and k3905@ls/false (apply (lambda (k3907@name) (k2cbe@id? k3907@name)) k3905@ls/false)) (apply (lambda (k3909@name) (k38e4@gen-name k3909@name)) k3905@ls/false) ((lambda (k390b@t) ((lambda (k390d@ls/false) (if (and k390d@ls/false (apply (lambda (k390f@name) (k2cbe@id? k390f@name)) k390d@ls/false)) (apply (lambda (k3911@name) (k38e4@gen-name k3911@name)) k390d@ls/false) ((lambda (k3913@t) ((lambda (k3915@ls/false) (if (and k3915@ls/false (apply (lambda (k3917@name) (k2cbe@id? k3917@name)) k3915@ls/false)) (apply (lambda (k3919@name) (k38e4@gen-name k3919@name)) k3915@ls/false) ((lambda (k391b@t) ((lambda (k391d@ls/false) (if k391d@ls/false (apply (lambda (k391f@others) (k2fb2@syntax-violation '#f '"invalid field spec" k38e5@field)) k391d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k391b@t))) (k2ec9@syntax-dispatch k391b@t 'any))) k3913@t))) (k2ec9@syntax-dispatch k3913@t 'any))) k390b@t))) (k2ec9@syntax-dispatch k390b@t '(#(scheme-id immutable) any)))) k3903@t))) (k2ec9@syntax-dispatch k3903@t '(#(scheme-id mutable) any)))) k38f7@t))) (k2ec9@syntax-dispatch k38f7@t '(#(scheme-id immutable) any any)))) k38e7@t))) (k2ec9@syntax-dispatch k38e7@t '(#(scheme-id mutable) any any any)))) k38e5@field)) k38e0@fields))) '#f))) (set! k3882@enumerate (lambda (k38d7@ls) ((letrec ((k38d9@f (lambda (k38db@ls k38dc@i) (if (null? k38db@ls) '() (cons k38dc@i (k38d9@f (cdr k38db@ls) (+ k38dc@i '1))))))) k38d9@f) k38d7@ls '0))) (set! k3884@do-define-record (lambda (k38af@namespec k38b0@clause*) ((lambda (k38b3@foo) ((lambda (k38b5@foo-rtd) ((lambda (k38b7@foo-rcd) ((lambda (k38b9@protocol) ((lambda (k38bb@make-foo) ((lambda (k38bd@fields) ((lambda (k38bf@idx*) ((lambda (k38c1@foo-x*) ((lambda (k38c3@set-foo-x!*) ((lambda (k38c5@set-foo-idx*) ((lambda (k38c7@foo?) ((lambda (k38c9@foo-rtd-code) ((lambda (k38cb@foo-rcd-code) ((lambda (k38cd@protocol-code) ((lambda () (k2e7f@bless (cons 'begin (cons (list 'define k38b5@foo-rtd k38c9@foo-rtd-code) (cons (list 'define k38b9@protocol k38cd@protocol-code) (cons (list 'define k38b7@foo-rcd k38cb@foo-rcd-code) (cons (list 'define-syntax k38b3@foo (list 'list ''$rtd (list 'syntax k38b5@foo-rtd) (list 'syntax k38b7@foo-rcd))) (cons (list 'define k38c7@foo? (list 'record-predicate k38b5@foo-rtd)) (cons (list 'define k38bb@make-foo (list 'record-constructor k38b7@foo-rcd)) (append (map (lambda (k38cf@foo-x k38d0@idx) (list 'define k38cf@foo-x (list 'record-accessor k38b5@foo-rtd k38d0@idx))) k38c1@foo-x* k38bf@idx*) (map (lambda (k38d3@set-foo-x! k38d4@idx) (list 'define k38d3@set-foo-x! (list 'record-mutator k38b5@foo-rtd k38d4@idx))) k38c3@set-foo-x!* k38c5@set-foo-idx*))))))))))))) (k3878@get-protocol-code k38b0@clause*))) (k3876@foo-rcd-code k38b0@clause* k38b5@foo-rtd k38b9@protocol (k3874@parent-rcd-code k38b0@clause*)))) (k3870@foo-rtd-code k38b3@foo k38b0@clause* (k3872@parent-rtd-code k38b0@clause*)))) (k386c@get-record-predicate-name k38af@namespec))) (k387c@get-mutator-indices k38bd@fields))) (k387e@get-mutators k38b3@foo k38bd@fields))) (k3880@get-accessors k38b3@foo k38bd@fields))) (k3882@enumerate k38bd@fields))) (k387a@get-fields k38b0@clause*))) (k386a@get-record-constructor-name k38af@namespec))) (gensym))) (gensym))) (gensym))) (k3868@get-record-name k38af@namespec)))) (set! k3886@verify-clauses (lambda (k388f@x k3890@cls*) ((lambda (k3894@valid-kwds k3896@free-id-member?) (begin (set! k3894@valid-kwds (map k2e7f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! k3896@free-id-member? (lambda (k38ab@x k38ac@ls) (and (pair? k38ac@ls) (or (k2cc6@free-id=? k38ab@x (car k38ac@ls)) (k3896@free-id-member? k38ab@x (cdr k38ac@ls)))))) ((letrec ((k3897@f (lambda (k3899@cls* k389a@seen*) (if (not (null? k3899@cls*)) ((lambda (k389d@t) ((lambda (k389f@ls/false) (if k389f@ls/false (apply (lambda (k38a1@kwd k38a2@rest) (if (or (not (k2cbe@id? k38a1@kwd)) (not (k3896@free-id-member? k38a1@kwd k3894@valid-kwds))) (k2fb2@syntax-violation '#f '"not a valid define-record-type keyword" k38a1@kwd) (if (k2ccc@bound-id-member? k38a1@kwd k389a@seen*) (k2fb2@syntax-violation '#f '"duplicate use of keyword " k388f@x k38a1@kwd) (k3897@f (cdr k3899@cls*) (cons k38a1@kwd k389a@seen*))))) k389f@ls/false) ((lambda (k38a5@t) ((lambda (k38a7@ls/false) (if k38a7@ls/false (apply (lambda (k38a9@cls) (k2fb2@syntax-violation '#f '"malformed define-record-type clause" k38a9@cls)) k38a7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k38a5@t))) (k2ec9@syntax-dispatch k38a5@t 'any))) k389d@t))) (k2ec9@syntax-dispatch k389d@t '(any . any)))) (car k3899@cls*)) (void))))) k3897@f) k3890@cls* '()))) '#f '#f))) ((lambda (k3887@t) ((lambda (k3889@ls/false) (if k3889@ls/false (apply (lambda (k388b@namespec k388c@clause*) (begin (k3886@verify-clauses k3863@x k388c@clause*) (k3884@do-define-record k388b@namespec k388c@clause*))) k3889@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3887@t))) (k2ec9@syntax-dispatch k3887@t '(_ any . each-any)))) k3863@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k2ebf@define-condition-type-macro (lambda (k3a5f@x) ((lambda (k3a62@mkname) (begin (set! k3a62@mkname (lambda (k3a8f@name k3a90@suffix) (k2fb6@datum->syntax k3a8f@name (string->symbol (string-append (symbol->string (k2fb8@syntax->datum k3a8f@name)) k3a90@suffix))))) ((lambda (k3a63@t) ((lambda (k3a65@ls/false) (if (and k3a65@ls/false (apply (lambda (k3a67@ctxt k3a68@name k3a69@super k3a6a@constructor k3a6b@predicate k3a6c@field* k3a6d@accessor*) (and (k2cbe@id? k3a68@name) (k2cbe@id? k3a69@super) (k2cbe@id? k3a6a@constructor) (k2cbe@id? k3a6b@predicate) (for-all k2cbe@id? k3a6c@field*) (for-all k2cbe@id? k3a6d@accessor*))) k3a65@ls/false)) (apply (lambda (k3a75@ctxt k3a76@name k3a77@super k3a78@constructor k3a79@predicate k3a7a@field* k3a7b@accessor*) ((lambda (k3a83@aux-accessor*) (k2e7f@bless (cons 'begin (cons (cons 'define-record-type (cons (list k3a76@name k3a78@constructor (gensym)) (cons (list 'parent k3a77@super) (cons (cons 'fields (map (lambda (k3a85@field k3a86@aux) (list 'immutable k3a85@field k3a86@aux)) k3a7a@field* k3a83@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define k3a79@predicate (list 'condition-predicate (list 'record-type-descriptor k3a76@name))) (map (lambda (k3a89@accessor k3a8a@aux) (list 'define k3a89@accessor (list 'condition-accessor (list 'record-type-descriptor k3a76@name) k3a8a@aux))) k3a7b@accessor* k3a83@aux-accessor*)))))) (map (lambda (k3a8d@x) (gensym)) k3a7b@accessor*))) k3a65@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a63@t))) (k2ec9@syntax-dispatch k3a63@t '(any any any any any . #(each (any any)))))) k3a5f@x))) '#f))) (set! k2ec1@incorrect-usage-macro (lambda (k3a93@e) (k2fb2@syntax-violation '#f '"incorrect usage of auxiliary keyword" k3a93@e))) (set! k2ec3@parameterize-macro (lambda (k3a95@e) ((lambda (k3a97@t) ((lambda (k3a99@ls/false) (if k3a99@ls/false (apply (lambda (k3a9b@b k3a9c@b*) (k2e7f@bless (cons 'let (cons '() (cons k3a9b@b k3a9c@b*))))) k3a99@ls/false) ((lambda (k3a9f@t) ((lambda (k3aa1@ls/false) (if k3aa1@ls/false (apply (lambda (k3aa3@olhs* k3aa4@orhs* k3aa5@b k3aa6@b*) ((lambda (k3aab@lhs* k3aac@rhs*) (k2e7f@bless (cons (list 'lambda (append k3aab@lhs* k3aac@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (k3aaf@lhs k3ab0@rhs) (list 'let (list (list 't (list k3aaf@lhs))) (list k3aaf@lhs k3ab0@rhs) (cons 'set! (cons k3ab0@rhs '(t))))) k3aab@lhs* k3aac@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons k3aa5@b k3aa6@b*))) '(swap)))))) (append k3aa3@olhs* k3aa4@orhs*)))) (k2fa0@generate-temporaries k3aa3@olhs*) (k2fa0@generate-temporaries k3aa4@orhs*))) k3aa1@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3a9f@t))) (k2ec9@syntax-dispatch k3a9f@t '(_ #(each (any any)) any . each-any)))) k3a97@t))) (k2ec9@syntax-dispatch k3a97@t '(_ () any . each-any)))) k3a95@e))) (set! k2ec5@foreign-call-transformer (lambda (k3ab3@e k3ab4@r k3ab5@mr) ((lambda (k3ab9@t) ((lambda (k3abb@ls/false) (if k3abb@ls/false (apply (lambda (k3abd@name k3abe@arg*) (cons 'foreign-call (cons (k2eeb@chi-expr k3abd@name k3ab4@r k3ab5@mr) (k2ee7@chi-expr* k3abe@arg* k3ab4@r k3ab5@mr)))) k3abb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3ab9@t))) (k2ec9@syntax-dispatch k3ab9@t '(_ any . each-any)))) k3ab3@e))) (set! k2ec7@convert-pattern (lambda (k3ac1@pattern k3ac2@keys) ((lambda (k3ac6@cvt* k3ac8@cvt) (begin (set! k3ac6@cvt* (lambda (k3b65@p* k3b66@n k3b67@ids) (if (null? k3b65@p*) (values '() k3b67@ids) (call-with-values (lambda () (k3ac6@cvt* (cdr k3b65@p*) k3b66@n k3b67@ids)) (lambda (k3b6f@k3b6c k3b70@k3b6e) ((lambda (k3b73@ids k3b74@y) (call-with-values (lambda () (k3ac8@cvt (car k3b65@p*) k3b66@n k3b73@ids)) (lambda (k3b7b@k3b78 k3b7c@k3b7a) ((lambda (k3b7f@ids k3b80@x) (values (cons k3b80@x k3b74@y) k3b7f@ids)) k3b7c@k3b7a k3b7b@k3b78)))) k3b70@k3b6e k3b6f@k3b6c)))))) (set! k3ac8@cvt (lambda (k3ac9@p k3aca@n k3acb@ids) ((lambda (k3acf@t) ((lambda (k3ad1@ls/false) (if (and k3ad1@ls/false (apply (lambda (k3ad3@id) (k2cbe@id? k3ad3@id)) k3ad1@ls/false)) (apply (lambda (k3ad5@id) (if (k2ccc@bound-id-member? k3ac9@p k3ac2@keys) (values (vector 'free-id k3ac9@p) k3acb@ids) (if (k2cc6@free-id=? k3ac9@p (k2e53@scheme-stx '_)) (values '_ k3acb@ids) (values 'any (cons (cons k3ac9@p k3aca@n) k3acb@ids))))) k3ad1@ls/false) ((lambda (k3ad7@t) ((lambda (k3ad9@ls/false) (if (and k3ad9@ls/false (apply (lambda (k3adb@p k3adc@dots) (k2ecb@ellipsis? k3adc@dots)) k3ad9@ls/false)) (apply (lambda (k3adf@p k3ae0@dots) (call-with-values (lambda () (k3ac8@cvt k3adf@p (+ k3aca@n '1) k3acb@ids)) (lambda (k3ae7@k3ae4 k3ae8@k3ae6) ((lambda (k3aeb@ids k3aec@p) (values (if (eq? k3aec@p 'any) 'each-any (vector 'each k3aec@p)) k3aeb@ids)) k3ae8@k3ae6 k3ae7@k3ae4)))) k3ad9@ls/false) ((lambda (k3aef@t) ((lambda (k3af1@ls/false) (if (and k3af1@ls/false (apply (lambda (k3af3@x k3af4@dots k3af5@ys k3af6@z) (k2ecb@ellipsis? k3af4@dots)) k3af1@ls/false)) (apply (lambda (k3afb@x k3afc@dots k3afd@ys k3afe@z) (call-with-values (lambda () (k3ac8@cvt k3afe@z k3aca@n k3acb@ids)) (lambda (k3b07@k3b04 k3b08@k3b06) ((lambda (k3b0b@ids k3b0c@z) (call-with-values (lambda () (k3ac6@cvt* k3afd@ys k3aca@n k3b0b@ids)) (lambda (k3b13@k3b10 k3b14@k3b12) ((lambda (k3b17@ids k3b18@ys) (call-with-values (lambda () (k3ac8@cvt k3afb@x (+ k3aca@n '1) k3b17@ids)) (lambda (k3b1f@k3b1c k3b20@k3b1e) ((lambda (k3b23@ids k3b24@x) (values (vector 'each+ k3b24@x (reverse k3b18@ys) k3b0c@z) k3b23@ids)) k3b20@k3b1e k3b1f@k3b1c)))) k3b14@k3b12 k3b13@k3b10)))) k3b08@k3b06 k3b07@k3b04)))) k3af1@ls/false) ((lambda (k3b27@t) ((lambda (k3b29@ls/false) (if k3b29@ls/false (apply (lambda (k3b2b@x k3b2c@y) (call-with-values (lambda () (k3ac8@cvt k3b2c@y k3aca@n k3acb@ids)) (lambda (k3b33@k3b30 k3b34@k3b32) ((lambda (k3b37@ids k3b38@y) (call-with-values (lambda () (k3ac8@cvt k3b2b@x k3aca@n k3b37@ids)) (lambda (k3b3f@k3b3c k3b40@k3b3e) ((lambda (k3b43@ids k3b44@x) (values (cons k3b44@x k3b38@y) k3b43@ids)) k3b40@k3b3e k3b3f@k3b3c)))) k3b34@k3b32 k3b33@k3b30)))) k3b29@ls/false) ((lambda (k3b47@t) ((lambda (k3b49@ls/false) (if k3b49@ls/false (apply (lambda () (values '() k3acb@ids)) k3b49@ls/false) ((lambda (k3b4b@t) ((lambda (k3b4d@ls/false) (if (and k3b4d@ls/false (apply (lambda (k3b4f@p) (not (k2c86@stx? k3b4f@p))) k3b4d@ls/false)) (apply (lambda (k3b51@p) (call-with-values (lambda () (k3ac8@cvt k3b51@p k3aca@n k3acb@ids)) (lambda (k3b57@k3b54 k3b58@k3b56) ((lambda (k3b5b@ids k3b5c@p) (values (vector 'vector k3b5c@p) k3b5b@ids)) k3b58@k3b56 k3b57@k3b54)))) k3b4d@ls/false) ((lambda (k3b5f@t) ((lambda (k3b61@ls/false) (if k3b61@ls/false (apply (lambda (k3b63@datum) (values (vector 'atom (k2cd4@stx->datum k3b63@datum)) k3acb@ids)) k3b61@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3b5f@t))) (k2ec9@syntax-dispatch k3b5f@t 'any))) k3b4b@t))) (k2ec9@syntax-dispatch k3b4b@t '#(vector each-any)))) k3b47@t))) (k2ec9@syntax-dispatch k3b47@t '()))) k3b27@t))) (k2ec9@syntax-dispatch k3b27@t '(any . any)))) k3aef@t))) (k2ec9@syntax-dispatch k3aef@t '(any any . #(each+ any () any))))) k3ad7@t))) (k2ec9@syntax-dispatch k3ad7@t '(any any)))) k3acf@t))) (k2ec9@syntax-dispatch k3acf@t 'any))) k3ac9@p))) (k3ac8@cvt k3ac1@pattern '0 '()))) '#f '#f))) (set! k2ec9@syntax-dispatch ((lambda () ((lambda (k3b84@stx^ k3b86@match-each k3b88@match-each+ k3b8a@match-each-any k3b8c@match-empty k3b8e@combine k3b90@match* k3b92@match) (begin (set! k3b84@stx^ (lambda (k3c5f@e k3c60@m* k3c61@s* k3c62@ae*) (if (and (null? k3c60@m*) (null? k3c61@s*) (null? k3c62@ae*)) k3c5f@e (k2ca6@mkstx k3c5f@e k3c60@m* k3c61@s* k3c62@ae*)))) (set! k3b86@match-each (lambda (k3c3f@e k3c40@p k3c41@m* k3c42@s* k3c43@ae*) (if (pair? k3c3f@e) ((lambda (k3c49@first) (and k3c49@first ((lambda (k3c4b@rest) (and k3c4b@rest (cons k3c49@first k3c4b@rest))) (k3b86@match-each (cdr k3c3f@e) k3c40@p k3c41@m* k3c42@s* k3c43@ae*)))) (k3b92@match (car k3c3f@e) k3c40@p k3c41@m* k3c42@s* k3c43@ae* '())) (if (null? k3c3f@e) '() (if (k2c86@stx? k3c3f@e) (and (not (k2c3c@top-marked? k3c41@m*)) (call-with-values (lambda () (k2ca4@join-wraps k3c41@m* k3c42@s* k3c43@ae* k3c3f@e)) (lambda (k3c53@k3c4e k3c54@k3c50 k3c55@k3c52) ((lambda (k3c59@ae* k3c5a@s* k3c5b@m*) (k3b86@match-each (k2c8a@stx-expr k3c3f@e) k3c40@p k3c5b@m* k3c5a@s* k3c59@ae*)) k3c55@k3c52 k3c54@k3c50 k3c53@k3c4e)))) (if (k285d@k277c@annotation? k3c3f@e) (k3b86@match-each (k285f@k2780@annotation-expression k3c3f@e) k3c40@p k3c41@m* k3c42@s* k3c43@ae*) '#f)))))) (set! k3b88@match-each+ (lambda (k3bff@e k3c00@x-pat k3c01@y-pat k3c02@z-pat k3c03@m* k3c04@s* k3c05@ae* k3c06@r) ((letrec ((k3c0f@f (lambda (k3c11@e k3c12@m* k3c13@s* k3c14@ae*) (if (pair? k3c11@e) (call-with-values (lambda () (k3c0f@f (cdr k3c11@e) k3c12@m* k3c13@s* k3c14@ae*)) (lambda (k3c1f@k3c1a k3c20@k3c1c k3c21@k3c1e) ((lambda (k3c25@r k3c26@y-pat k3c27@xr*) (if k3c25@r (if (null? k3c26@y-pat) ((lambda (k3c2b@xr) (if k3c2b@xr (values (cons k3c2b@xr k3c27@xr*) k3c26@y-pat k3c25@r) (values '#f '#f '#f))) (k3b92@match (car k3c11@e) k3c00@x-pat k3c12@m* k3c13@s* k3c14@ae* '())) (values '() (cdr k3c26@y-pat) (k3b92@match (car k3c11@e) (car k3c26@y-pat) k3c12@m* k3c13@s* k3c14@ae* k3c25@r))) (values '#f '#f '#f))) k3c21@k3c1e k3c20@k3c1c k3c1f@k3c1a))) (if (k2c86@stx? k3c11@e) (if (k2c3c@top-marked? k3c12@m*) (values '() k3c01@y-pat (k3b92@match k3c11@e k3c02@z-pat k3c12@m* k3c13@s* k3c14@ae* k3c06@r)) (call-with-values (lambda () (k2ca4@join-wraps k3c12@m* k3c13@s* k3c14@ae* k3c11@e)) (lambda (k3c33@k3c2e k3c34@k3c30 k3c35@k3c32) ((lambda (k3c39@ae* k3c3a@s* k3c3b@m*) (k3c0f@f (k2c8a@stx-expr k3c11@e) k3c3b@m* k3c3a@s* k3c39@ae*)) k3c35@k3c32 k3c34@k3c30 k3c33@k3c2e)))) (if (k285d@k277c@annotation? k3c11@e) (k3c0f@f (k285f@k2780@annotation-expression k3c11@e) k3c12@m* k3c13@s* k3c14@ae*) (values '() k3c01@y-pat (k3b92@match k3c11@e k3c02@z-pat k3c12@m* k3c13@s* k3c14@ae* k3c06@r)))))))) k3c0f@f) k3bff@e k3c03@m* k3c04@s* k3c05@ae*))) (set! k3b8a@match-each-any (lambda (k3be3@e k3be4@m* k3be5@s* k3be6@ae*) (if (pair? k3be3@e) ((lambda (k3beb@l) (and k3beb@l (cons (k3b84@stx^ (car k3be3@e) k3be4@m* k3be5@s* k3be6@ae*) k3beb@l))) (k3b8a@match-each-any (cdr k3be3@e) k3be4@m* k3be5@s* k3be6@ae*)) (if (null? k3be3@e) '() (if (k2c86@stx? k3be3@e) (and (not (k2c3c@top-marked? k3be4@m*)) (call-with-values (lambda () (k2ca4@join-wraps k3be4@m* k3be5@s* k3be6@ae* k3be3@e)) (lambda (k3bf3@k3bee k3bf4@k3bf0 k3bf5@k3bf2) ((lambda (k3bf9@ae* k3bfa@s* k3bfb@m*) (k3b8a@match-each-any (k2c8a@stx-expr k3be3@e) k3bfb@m* k3bfa@s* k3bf9@ae*)) k3bf5@k3bf2 k3bf4@k3bf0 k3bf3@k3bee)))) (if (k285d@k277c@annotation? k3be3@e) (k3b8a@match-each-any (k285f@k2780@annotation-expression k3be3@e) k3be4@m* k3be5@s* k3be6@ae*) '#f)))))) (set! k3b8c@match-empty (lambda (k3bdd@p k3bde@r) (if (null? k3bdd@p) k3bde@r (if (eq? k3bdd@p '_) k3bde@r (if (eq? k3bdd@p 'any) (cons '() k3bde@r) (if (pair? k3bdd@p) (k3b8c@match-empty (car k3bdd@p) (k3b8c@match-empty (cdr k3bdd@p) k3bde@r)) (if (eq? k3bdd@p 'each-any) (cons '() k3bde@r) ((lambda (k3be1@t) (if (memv k3be1@t '(each)) (k3b8c@match-empty (vector-ref k3bdd@p '1) k3bde@r) (if (memv k3be1@t '(each+)) (k3b8c@match-empty (vector-ref k3bdd@p '1) (k3b8c@match-empty (reverse (vector-ref k3bdd@p '2)) (k3b8c@match-empty (vector-ref k3bdd@p '3) k3bde@r))) (if (memv k3be1@t '(free-id atom)) k3bde@r (if (memv k3be1@t '(scheme-id atom)) k3bde@r (if (memv k3be1@t '(vector)) (k3b8c@match-empty (vector-ref k3bdd@p '1) k3bde@r) (assertion-violation 'syntax-dispatch '"invalid pattern" k3bdd@p))))))) (vector-ref k3bdd@p '0))))))))) (set! k3b8e@combine (lambda (k3bd9@r* k3bda@r) (if (null? (car k3bd9@r*)) k3bda@r (cons (map car k3bd9@r*) (k3b8e@combine (map cdr k3bd9@r*) k3bda@r))))) (set! k3b90@match* (lambda (k3bb5@e k3bb6@p k3bb7@m* k3bb8@s* k3bb9@ae* k3bba@r) (if (null? k3bb6@p) (and (null? k3bb5@e) k3bba@r) (if (pair? k3bb6@p) (and (pair? k3bb5@e) (k3b92@match (car k3bb5@e) (car k3bb6@p) k3bb7@m* k3bb8@s* k3bb9@ae* (k3b92@match (cdr k3bb5@e) (cdr k3bb6@p) k3bb7@m* k3bb8@s* k3bb9@ae* k3bba@r))) (if (eq? k3bb6@p 'each-any) ((lambda (k3bc1@l) (and k3bc1@l (cons k3bc1@l k3bba@r))) (k3b8a@match-each-any k3bb5@e k3bb7@m* k3bb8@s* k3bb9@ae*)) ((lambda (k3bc3@t) (if (memv k3bc3@t '(each)) (if (null? k3bb5@e) (k3b8c@match-empty (vector-ref k3bb6@p '1) k3bba@r) ((lambda (k3bc5@r*) (and k3bc5@r* (k3b8e@combine k3bc5@r* k3bba@r))) (k3b86@match-each k3bb5@e (vector-ref k3bb6@p '1) k3bb7@m* k3bb8@s* k3bb9@ae*))) (if (memv k3bc3@t '(free-id)) (and (symbol? k3bb5@e) (k2c3c@top-marked? k3bb7@m*) (k2cc6@free-id=? (k3b84@stx^ k3bb5@e k3bb7@m* k3bb8@s* k3bb9@ae*) (vector-ref k3bb6@p '1)) k3bba@r) (if (memv k3bc3@t '(scheme-id)) (and (symbol? k3bb5@e) (k2c3c@top-marked? k3bb7@m*) (k2cc6@free-id=? (k3b84@stx^ k3bb5@e k3bb7@m* k3bb8@s* k3bb9@ae*) (k2e53@scheme-stx (vector-ref k3bb6@p '1))) k3bba@r) (if (memv k3bc3@t '(each+)) (call-with-values (lambda () (k3b88@match-each+ k3bb5@e (vector-ref k3bb6@p '1) (vector-ref k3bb6@p '2) (vector-ref k3bb6@p '3) k3bb7@m* k3bb8@s* k3bb9@ae* k3bba@r)) (lambda (k3bcd@k3bc8 k3bce@k3bca k3bcf@k3bcc) ((lambda (k3bd3@r k3bd4@y-pat k3bd5@xr*) (and k3bd3@r (null? k3bd4@y-pat) (if (null? k3bd5@xr*) (k3b8c@match-empty (vector-ref k3bb6@p '1) k3bd3@r) (k3b8e@combine k3bd5@xr* k3bd3@r)))) k3bcf@k3bcc k3bce@k3bca k3bcd@k3bc8))) (if (memv k3bc3@t '(atom)) (and (fast-equal? (vector-ref k3bb6@p '1) (k2cd2@strip k3bb5@e k3bb7@m*)) k3bba@r) (if (memv k3bc3@t '(vector)) (and (vector? k3bb5@e) (k3b92@match (vector->list k3bb5@e) (vector-ref k3bb6@p '1) k3bb7@m* k3bb8@s* k3bb9@ae* k3bba@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" k3bb6@p)))))))) (vector-ref k3bb6@p '0))))))) (set! k3b92@match (lambda (k3b97@e k3b98@p k3b99@m* k3b9a@s* k3b9b@ae* k3b9c@r) (if (not k3b9c@r) '#f (if (eq? k3b98@p '_) k3b9c@r (if (eq? k3b98@p 'any) (cons (k3b84@stx^ k3b97@e k3b99@m* k3b9a@s* k3b9b@ae*) k3b9c@r) (if (k2c86@stx? k3b97@e) (and (not (k2c3c@top-marked? k3b99@m*)) (call-with-values (lambda () (k2ca4@join-wraps k3b99@m* k3b9a@s* k3b9b@ae* k3b97@e)) (lambda (k3ba9@k3ba4 k3baa@k3ba6 k3bab@k3ba8) ((lambda (k3baf@ae* k3bb0@s* k3bb1@m*) (k3b92@match (k2c8a@stx-expr k3b97@e) k3b98@p k3bb1@m* k3bb0@s* k3baf@ae* k3b9c@r)) k3bab@k3ba8 k3baa@k3ba6 k3ba9@k3ba4)))) (if (k285d@k277c@annotation? k3b97@e) (k3b92@match (k285f@k2780@annotation-expression k3b97@e) k3b98@p k3b99@m* k3b9a@s* k3b9b@ae* k3b9c@r) (k3b90@match* k3b97@e k3b98@p k3b99@m* k3b9a@s* k3b9b@ae* k3b9c@r)))))))) (lambda (k3b93@e k3b94@p) (k3b92@match k3b93@e k3b94@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2ecb@ellipsis? (lambda (k3c67@x) (and (k2cbe@id? k3c67@x) (k2cc6@free-id=? k3c67@x (k2e53@scheme-stx '...))))) (set! k2ecd@underscore? (lambda (k3c69@x) (and (k2cbe@id? k3c69@x) (k2cc6@free-id=? k3c69@x (k2e53@scheme-stx '_))))) (set! k2ecf@verify-literals (lambda (k3c6b@lits k3c6c@expr) (for-each (lambda (k3c6f@x) (if (or (not (k2cbe@id? k3c6f@x)) (k2ecb@ellipsis? k3c6f@x) (k2ecd@underscore? k3c6f@x)) (k2fb2@syntax-violation '#f '"invalid literal" k3c6c@expr k3c6f@x) (void))) k3c6b@lits))) (set! k2ed1@syntax-case-transformer ((lambda () ((lambda (k3c72@build-dispatch-call k3c74@invalid-ids-error k3c76@gen-clause k3c78@gen-syntax-case) (begin (set! k3c72@build-dispatch-call (lambda (k3ce3@pvars k3ce4@expr k3ce5@y k3ce6@r k3ce7@mr) ((lambda (k3ced@ids k3cee@levels) ((lambda (k3cf1@labels k3cf2@new-vars) ((lambda (k3cf5@body) (list '(primitive apply) (k2c1a@k2b5a@build-lambda '#f k3cf2@new-vars k3cf5@body) k3ce5@y)) (k2eeb@chi-expr (k2caa@add-subst (k2c79@make-full-rib k3ced@ids k3cf1@labels) k3ce4@expr) (append (map (lambda (k3cf7@label k3cf8@var k3cf9@level) (cons k3cf7@label (k2cde@make-binding 'syntax (cons k3cf8@var k3cf9@level)))) k3cf1@labels k3cf2@new-vars (map cdr k3ce3@pvars)) k3ce6@r) k3ce7@mr))) (map k2c42@gen-label k3ced@ids) (map k2c3e@gen-lexical k3ced@ids))) (map car k3ce3@pvars) (map cdr k3ce3@pvars)))) (set! k3c74@invalid-ids-error (lambda (k3cd7@id* k3cd8@e k3cd9@class) ((letrec ((k3cdd@find (lambda (k3cdf@id* k3ce0@ok*) (if (null? k3cdf@id*) (k2fb2@syntax-violation '#f '"invalid syntax" k3cd8@e) (if (k2cbe@id? (car k3cdf@id*)) (if (k2ccc@bound-id-member? (car k3cdf@id*) k3ce0@ok*) (k2fae@syntax-error (car k3cdf@id*) '"duplicate " k3cd9@class) (k3cdd@find (cdr k3cdf@id*) (cons (car k3cdf@id*) k3ce0@ok*))) (k2fae@syntax-error (car k3cdf@id*) '"invalid " k3cd9@class)))))) k3cdd@find) k3cd7@id* '()))) (set! k3c76@gen-clause (lambda (k3caf@x k3cb0@keys k3cb1@clauses k3cb2@r k3cb3@mr k3cb4@pat k3cb5@fender k3cb6@expr) (call-with-values (lambda () (k2ec7@convert-pattern k3cb4@pat k3cb0@keys)) (lambda (k3cc3@k3cc0 k3cc4@k3cc2) ((lambda (k3cc7@pvars k3cc8@p) (if (not (k2cca@distinct-bound-ids? (map car k3cc7@pvars))) (k3c74@invalid-ids-error (map car k3cc7@pvars) k3cb4@pat '"pattern variable") (if (not (for-all (lambda (k3ccb@x) (not (k2ecb@ellipsis? (car k3ccb@x)))) k3cc7@pvars)) (k2fb2@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" k3cb4@pat) ((lambda (k3ccd@y) ((lambda (k3ccf@test) ((lambda (k3cd1@conseq) ((lambda (k3cd3@altern) (list (k2c1a@k2b5a@build-lambda '#f (list k3ccd@y) (list 'if k3ccf@test k3cd1@conseq k3cd3@altern)) (list '(primitive syntax-dispatch) k3caf@x (list 'quote k3cc8@p)))) (k3c78@gen-syntax-case k3caf@x k3cb0@keys k3cb1@clauses k3cb2@r k3cb3@mr))) (k3c72@build-dispatch-call k3cc7@pvars k3cb6@expr k3ccd@y k3cb2@r k3cb3@mr))) (if (eq? k3cb5@fender '#t) k3ccd@y ((lambda (k3cd5@call) (list 'if k3ccd@y k3cd5@call (list 'quote '#f))) (k3c72@build-dispatch-call k3cc7@pvars k3cb5@fender k3ccd@y k3cb2@r k3cb3@mr))))) (k2c3e@gen-lexical 'tmp))))) k3cc4@k3cc2 k3cc3@k3cc0))))) (set! k3c78@gen-syntax-case (lambda (k3c8d@x k3c8e@keys k3c8f@clauses k3c90@r k3c91@mr) (if (null? k3c8f@clauses) (list '(primitive syntax-error) k3c8d@x) ((lambda (k3c97@t) ((lambda (k3c99@ls/false) (if k3c99@ls/false (apply (lambda (k3c9b@pat k3c9c@expr) (if (and (k2cbe@id? k3c9b@pat) (not (k2ccc@bound-id-member? k3c9b@pat k3c8e@keys)) (not (k2ecb@ellipsis? k3c9b@pat))) (if (k2cc6@free-id=? k3c9b@pat (k2e53@scheme-stx '_)) (k2eeb@chi-expr k3c9c@expr k3c90@r k3c91@mr) ((lambda (k3c9f@lab k3ca0@lex) ((lambda (k3ca3@body) (list (k2c1a@k2b5a@build-lambda '#f (list k3ca0@lex) k3ca3@body) k3c8d@x)) (k2eeb@chi-expr (k2caa@add-subst (k2c79@make-full-rib (list k3c9b@pat) (list k3c9f@lab)) k3c9c@expr) (cons (cons k3c9f@lab (k2cde@make-binding 'syntax (cons k3ca0@lex '0))) k3c90@r) k3c91@mr))) (k2c42@gen-label k3c9b@pat) (k2c3e@gen-lexical k3c9b@pat))) (k3c76@gen-clause k3c8d@x k3c8e@keys (cdr k3c8f@clauses) k3c90@r k3c91@mr k3c9b@pat '#t k3c9c@expr))) k3c99@ls/false) ((lambda (k3ca5@t) ((lambda (k3ca7@ls/false) (if k3ca7@ls/false (apply (lambda (k3ca9@pat k3caa@fender k3cab@expr) (k3c76@gen-clause k3c8d@x k3c8e@keys (cdr k3c8f@clauses) k3c90@r k3c91@mr k3ca9@pat k3caa@fender k3cab@expr)) k3ca7@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3ca5@t))) (k2ec9@syntax-dispatch k3ca5@t '(any any any)))) k3c97@t))) (k2ec9@syntax-dispatch k3c97@t '(any any)))) (car k3c8f@clauses))))) (lambda (k3c79@e k3c7a@r k3c7b@mr) ((lambda (k3c7f@t) ((lambda (k3c81@ls/false) (if k3c81@ls/false (apply (lambda (k3c83@expr k3c84@keys k3c85@clauses) (begin (k2ecf@verify-literals k3c84@keys k3c79@e) ((lambda (k3c89@x) ((lambda (k3c8b@body) (list (k2c1a@k2b5a@build-lambda '#f (list k3c89@x) k3c8b@body) (k2eeb@chi-expr k3c83@expr k3c7a@r k3c7b@mr))) (k3c78@gen-syntax-case k3c89@x k3c84@keys k3c85@clauses k3c7a@r k3c7b@mr))) (k2c3e@gen-lexical 'tmp)))) k3c81@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3c7f@t))) (k2ec9@syntax-dispatch k3c7f@t '(_ any each-any . each-any)))) k3c79@e)))) '#f '#f '#f '#f)))) (set! k2ed3@ellipsis-map (lambda (k3cfd@proc k3cfe@ls . k3d01@ls*) ((lambda (k3d04@who) (begin (set! k3d04@who '...) (begin (if (not (list? k3cfe@ls)) (assertion-violation k3d04@who '"not a list" k3cfe@ls) (void)) (if (not (null? k3d01@ls*)) ((lambda (k3d05@n) (for-each (lambda (k3d07@x) (begin (if (not (list? k3d07@x)) (assertion-violation k3d04@who '"not a list" k3d07@x) (void)) (if (not (= (length k3d07@x) k3d05@n)) (assertion-violation k3d04@who '"length mismatch" k3cfe@ls k3d07@x) (void)))) k3d01@ls*)) (length k3cfe@ls)) (void)) (apply map k3cfd@proc k3cfe@ls k3d01@ls*)))) '#f))) (set! k2ed5@syntax-transformer ((lambda () ((lambda (k3d0a@gen-syntax k3d0c@gen-ref k3d0e@gen-append k3d10@gen-mappend k3d12@gen-map k3d14@gen-cons k3d16@gen-vector k3d18@regen) (begin (set! k3d0a@gen-syntax (lambda (k3d81@src k3d82@e k3d83@r k3d84@maps k3d85@ellipsis? k3d86@vec?) ((lambda (k3d8d@t) ((lambda (k3d8f@ls/false) (if (and k3d8f@ls/false (apply (lambda (k3d91@dots) (k3d85@ellipsis? k3d91@dots)) k3d8f@ls/false)) (apply (lambda (k3d93@dots) (k2fb2@syntax-violation '#f '"misplaced ellipsis in syntax form" k3d81@src)) k3d8f@ls/false) ((lambda (k3d95@t) ((lambda (k3d97@ls/false) (if (and k3d97@ls/false (apply (lambda (k3d99@id) (k2cbe@id? k3d99@id)) k3d97@ls/false)) (apply (lambda (k3d9b@id) ((lambda (k3d9d@label) ((lambda (k3d9f@b) ((lambda () (if (eq? (k2ce0@binding-type k3d9f@b) 'syntax) (call-with-values (lambda () ((lambda (k3da5@var.lev) (k3d0c@gen-ref k3d81@src (car k3da5@var.lev) (cdr k3da5@var.lev) k3d84@maps)) (k2ce2@binding-value k3d9f@b))) (lambda (k3da7@k3da2 k3da8@k3da4) ((lambda (k3dab@maps k3dac@var) (values (list 'ref k3dac@var) k3dab@maps)) k3da8@k3da4 k3da7@k3da2))) (values (list 'quote k3d82@e) k3d84@maps))))) (k2cdc@label->binding k3d9d@label k3d83@r))) (k2cd8@id->label k3d82@e))) k3d97@ls/false) ((lambda (k3daf@t) ((lambda (k3db1@ls/false) (if (and k3db1@ls/false (apply (lambda (k3db3@dots k3db4@e) (k3d85@ellipsis? k3db3@dots)) k3db1@ls/false)) (apply (lambda (k3db7@dots k3db8@e) (if k3d86@vec? (k2fb2@syntax-violation '#f '"misplaced ellipsis in syntax form" k3d81@src) (k3d0a@gen-syntax k3d81@src k3db8@e k3d83@r k3d84@maps (lambda (k3dbb@x) '#f) '#f))) k3db1@ls/false) ((lambda (k3dbd@t) ((lambda (k3dbf@ls/false) (if (and k3dbf@ls/false (apply (lambda (k3dc1@x k3dc2@dots k3dc3@y) (k3d85@ellipsis? k3dc2@dots)) k3dbf@ls/false)) (apply (lambda (k3dc7@x k3dc8@dots k3dc9@y) ((letrec ((k3dcd@f (lambda (k3dcf@y k3dd0@k) ((lambda (k3dd3@t) ((lambda (k3dd5@ls/false) (if k3dd5@ls/false (apply (lambda () (k3dd0@k k3d84@maps)) k3dd5@ls/false) ((lambda (k3dd7@t) ((lambda (k3dd9@ls/false) (if (and k3dd9@ls/false (apply (lambda (k3ddb@dots k3ddc@y) (k3d85@ellipsis? k3ddb@dots)) k3dd9@ls/false)) (apply (lambda (k3ddf@dots k3de0@y) (k3dcd@f k3de0@y (lambda (k3de3@maps) (call-with-values (lambda () (k3dd0@k (cons '() k3de3@maps))) (lambda (k3de9@k3de6 k3dea@k3de8) ((lambda (k3ded@maps k3dee@x) (if (null? (car k3ded@maps)) (k2fb2@syntax-violation '#f '"extra ellipsis in syntax form" k3d81@src) (values (k3d10@gen-mappend k3dee@x (car k3ded@maps)) (cdr k3ded@maps)))) k3dea@k3de8 k3de9@k3de6)))))) k3dd9@ls/false) ((lambda (k3df1@t) ((lambda (k3df3@ls/false) (if k3df3@ls/false (apply (lambda () (call-with-values (lambda () (k3d0a@gen-syntax k3d81@src k3dcf@y k3d83@r k3d84@maps k3d85@ellipsis? k3d86@vec?)) (lambda (k3df9@k3df6 k3dfa@k3df8) ((lambda (k3dfd@maps k3dfe@y) (call-with-values (lambda () (k3dd0@k k3dfd@maps)) (lambda (k3e05@k3e02 k3e06@k3e04) ((lambda (k3e09@maps k3e0a@x) (values (k3d0e@gen-append k3e0a@x k3dfe@y) k3e09@maps)) k3e06@k3e04 k3e05@k3e02)))) k3dfa@k3df8 k3df9@k3df6)))) k3df3@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3df1@t))) (k2ec9@syntax-dispatch k3df1@t '_))) k3dd7@t))) (k2ec9@syntax-dispatch k3dd7@t '(any . any)))) k3dd3@t))) (k2ec9@syntax-dispatch k3dd3@t '()))) k3dcf@y)))) k3dcd@f) k3dc9@y (lambda (k3e0d@maps) (call-with-values (lambda () (k3d0a@gen-syntax k3d81@src k3dc7@x k3d83@r (cons '() k3e0d@maps) k3d85@ellipsis? '#f)) (lambda (k3e13@k3e10 k3e14@k3e12) ((lambda (k3e17@maps k3e18@x) (if (null? (car k3e17@maps)) (k2fb2@syntax-violation '#f '"extra ellipsis in syntax form" k3d81@src) (values (k3d12@gen-map k3e18@x (car k3e17@maps)) (cdr k3e17@maps)))) k3e14@k3e12 k3e13@k3e10)))))) k3dbf@ls/false) ((lambda (k3e1b@t) ((lambda (k3e1d@ls/false) (if k3e1d@ls/false (apply (lambda (k3e1f@x k3e20@y) (call-with-values (lambda () (k3d0a@gen-syntax k3d81@src k3e1f@x k3d83@r k3d84@maps k3d85@ellipsis? '#f)) (lambda (k3e27@k3e24 k3e28@k3e26) ((lambda (k3e2b@maps k3e2c@xnew) (call-with-values (lambda () (k3d0a@gen-syntax k3d81@src k3e20@y k3d83@r k3e2b@maps k3d85@ellipsis? k3d86@vec?)) (lambda (k3e33@k3e30 k3e34@k3e32) ((lambda (k3e37@maps k3e38@ynew) (values (k3d14@gen-cons k3d82@e k3e1f@x k3e20@y k3e2c@xnew k3e38@ynew) k3e37@maps)) k3e34@k3e32 k3e33@k3e30)))) k3e28@k3e26 k3e27@k3e24)))) k3e1d@ls/false) ((lambda (k3e3b@t) ((lambda (k3e3d@ls/false) (if k3e3d@ls/false (apply (lambda (k3e3f@ls) (call-with-values (lambda () (k3d0a@gen-syntax k3d81@src k3e3f@ls k3d83@r k3d84@maps k3d85@ellipsis? '#t)) (lambda (k3e45@k3e42 k3e46@k3e44) ((lambda (k3e49@maps k3e4a@lsnew) (values (k3d16@gen-vector k3d82@e k3e3f@ls k3e4a@lsnew) k3e49@maps)) k3e46@k3e44 k3e45@k3e42)))) k3e3d@ls/false) ((lambda (k3e4d@t) ((lambda (k3e4f@ls/false) (if k3e4f@ls/false (apply (lambda () (values (list 'quote k3d82@e) k3d84@maps)) k3e4f@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3e4d@t))) (k2ec9@syntax-dispatch k3e4d@t '_))) k3e3b@t))) (k2ec9@syntax-dispatch k3e3b@t '#(vector each-any)))) k3e1b@t))) (k2ec9@syntax-dispatch k3e1b@t '(any . any)))) k3dbd@t))) (k2ec9@syntax-dispatch k3dbd@t '(any any . any)))) k3daf@t))) (k2ec9@syntax-dispatch k3daf@t '(any any)))) k3d95@t))) (k2ec9@syntax-dispatch k3d95@t 'any))) k3d8d@t))) (k2ec9@syntax-dispatch k3d8d@t 'any))) k3d82@e))) (set! k3d0c@gen-ref (lambda (k3d67@src k3d68@var k3d69@level k3d6a@maps) (if (= k3d69@level '0) (values k3d68@var k3d6a@maps) (if (null? k3d6a@maps) (k2fb2@syntax-violation '#f '"missing ellipsis in syntax form" k3d67@src) (call-with-values (lambda () (k3d0c@gen-ref k3d67@src k3d68@var (- k3d69@level '1) (cdr k3d6a@maps))) (lambda (k3d73@k3d70 k3d74@k3d72) ((lambda (k3d77@outer-maps k3d78@outer-var) ((lambda (k3d7b@t) (if k3d7b@t ((lambda (k3d7d@b) (values (cdr k3d7d@b) k3d6a@maps)) k3d7b@t) ((lambda (k3d7f@inner-var) (values k3d7f@inner-var (cons (cons (cons k3d78@outer-var k3d7f@inner-var) (car k3d6a@maps)) k3d77@outer-maps))) (k2c3e@gen-lexical 'tmp)))) (assq k3d78@outer-var (car k3d6a@maps)))) k3d74@k3d72 k3d73@k3d70))))))) (set! k3d0e@gen-append (lambda (k3d63@x k3d64@y) (if (fast-equal? k3d64@y ''()) k3d63@x (list 'append k3d63@x k3d64@y)))) (set! k3d10@gen-mappend (lambda (k3d5f@e k3d60@map-env) (list 'apply '(primitive append) (k3d12@gen-map k3d5f@e k3d60@map-env)))) (set! k3d12@gen-map (lambda (k3d4d@e k3d4e@map-env) ((lambda (k3d51@formals k3d52@actuals) (if (eq? (car k3d4d@e) 'ref) (car k3d52@actuals) (if (for-all (lambda (k3d55@x) (and (eq? (car k3d55@x) 'ref) (memq (cadr k3d55@x) k3d51@formals))) (cdr k3d4d@e)) ((lambda (k3d57@args) (cons 'map (cons (list 'primitive (car k3d4d@e)) k3d57@args))) (map ((lambda (k3d59@r) (lambda (k3d5b@x) (cdr (assq (cadr k3d5b@x) k3d59@r)))) (map cons k3d51@formals k3d52@actuals)) (cdr k3d4d@e))) (cons* 'map (list 'lambda k3d51@formals k3d4d@e) k3d52@actuals)))) (map cdr k3d4e@map-env) (map (lambda (k3d5d@x) (list 'ref (car k3d5d@x))) k3d4e@map-env)))) (set! k3d14@gen-cons (lambda (k3d3d@e k3d3e@x k3d3f@y k3d40@xnew k3d41@ynew) ((lambda (k3d47@t) (if (memv k3d47@t '(quote)) (if (eq? (car k3d40@xnew) 'quote) ((lambda (k3d49@xnew k3d4a@ynew) (if (and (eq? k3d49@xnew k3d3e@x) (eq? k3d4a@ynew k3d3f@y)) (list 'quote k3d3d@e) (list 'quote (cons k3d49@xnew k3d4a@ynew)))) (cadr k3d40@xnew) (cadr k3d41@ynew)) (if (null? (cadr k3d41@ynew)) (list 'list k3d40@xnew) (list 'cons k3d40@xnew k3d41@ynew))) (if (memv k3d47@t '(list)) (cons 'list (cons k3d40@xnew (cdr k3d41@ynew))) (list 'cons k3d40@xnew k3d41@ynew)))) (car k3d41@ynew)))) (set! k3d16@gen-vector (lambda (k3d37@e k3d38@ls k3d39@lsnew) (if (eq? (car k3d39@lsnew) 'quote) (if (eq? (cadr k3d39@lsnew) k3d38@ls) (list 'quote k3d37@e) (list 'quote (list->vector (cadr k3d39@lsnew)))) (if (eq? (car k3d39@lsnew) 'list) (cons 'vector (cdr k3d39@lsnew)) (list 'list->vector k3d39@lsnew))))) (set! k3d18@regen (lambda (k3d31@x) ((lambda (k3d33@t) (if (memv k3d33@t '(ref)) (cadr k3d31@x) (if (memv k3d33@t '(primitive)) (list 'primitive (cadr k3d31@x)) (if (memv k3d33@t '(quote)) (list 'quote (cadr k3d31@x)) (if (memv k3d33@t '(lambda)) (k2c1a@k2b5a@build-lambda '#f (cadr k3d31@x) (k3d18@regen (caddr k3d31@x))) (if (memv k3d33@t '(map)) ((lambda (k3d35@ls) (cons '(primitive ellipsis-map) k3d35@ls)) (map k3d18@regen (cdr k3d31@x))) (cons (list 'primitive (car k3d31@x)) (map k3d18@regen (cdr k3d31@x))))))))) (car k3d31@x)))) (lambda (k3d19@e k3d1a@r k3d1b@mr) ((lambda (k3d1f@t) ((lambda (k3d21@ls/false) (if k3d21@ls/false (apply (lambda (k3d23@x) (call-with-values (lambda () (k3d0a@gen-syntax k3d19@e k3d23@x k3d1a@r '() k2ecb@ellipsis? '#f)) (lambda (k3d29@k3d26 k3d2a@k3d28) ((lambda (k3d2d@maps k3d2e@e) (k3d18@regen k3d2e@e)) k3d2a@k3d28 k3d29@k3d26)))) k3d21@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3d1f@t))) (k2ec9@syntax-dispatch k3d1f@t '(_ any)))) k3d19@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2ed7@core-macro-transformer (lambda (k3e51@name) ((lambda (k3e53@t) (if (memv k3e53@t '(quote)) k2e79@quote-transformer (if (memv k3e53@t '(lambda)) k2e7d@lambda-transformer (if (memv k3e53@t '(case-lambda)) k2e7b@case-lambda-transformer (if (memv k3e53@t '(letrec)) k2e61@letrec-transformer (if (memv k3e53@t '(letrec*)) k2e63@letrec*-transformer (if (memv k3e53@t '(if)) k2e71@if-transformer (if (memv k3e53@t '(and)) k2e73@and-transformer (if (memv k3e53@t '(or)) k2e75@or-transformer (if (memv k3e53@t '(foreign-call)) k2ec5@foreign-call-transformer (if (memv k3e53@t '(syntax-case)) k2ed1@syntax-case-transformer (if (memv k3e53@t '(syntax)) k2ed5@syntax-transformer (if (memv k3e53@t '(type-descriptor)) k2e67@type-descriptor-transformer (if (memv k3e53@t '(record-type-descriptor)) k2e69@record-type-descriptor-transformer (if (memv k3e53@t '(record-constructor-descriptor)) k2e6b@record-constructor-descriptor-transformer (if (memv k3e53@t '(fluid-let-syntax)) k2e65@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" k3e51@name))))))))))))))))) k3e51@name))) (set! k2ed9@symbol-macro (lambda (k3e55@x k3e56@set) ((lambda (k3e59@t) ((lambda (k3e5b@ls/false) (if (and k3e5b@ls/false (apply (lambda (k3e5d@name) (and (k2cbe@id? k3e5d@name) (memq (k2cc0@id->sym k3e5d@name) k3e56@set))) k3e5b@ls/false)) (apply (lambda (k3e5f@name) (k2e7f@bless (list 'quote k3e5f@name))) k3e5b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3e59@t))) (k2ec9@syntax-dispatch k3e59@t '(_ any)))) k3e55@x))) (set! k2edb@macro-transformer (lambda (k3e61@x) (if (procedure? k3e61@x) k3e61@x (if (symbol? k3e61@x) ((lambda (k3e63@t) (if (memv k3e63@t '(define-record-type)) k2ebd@define-record-type-macro (if (memv k3e63@t '(define-struct)) k2ebb@define-struct-macro (if (memv k3e63@t '(include)) k2eb1@include-macro (if (memv k3e63@t '(cond)) k2ead@cond-macro (if (memv k3e63@t '(let)) k2e85@let-macro (if (memv k3e63@t '(do)) k2ea5@do-macro (if (memv k3e63@t '(or)) k2ea9@or-macro (if (memv k3e63@t '(and)) k2eab@and-macro (if (memv k3e63@t '(let*)) k2ea7@let*-macro (if (memv k3e63@t '(let-values)) k2e87@let-values-macro (if (memv k3e63@t '(let*-values)) k2e89@let*-values-macro (if (memv k3e63@t '(syntax-rules)) k2eb5@syntax-rules-macro (if (memv k3e63@t '(quasiquote)) k2eb7@quasiquote-macro (if (memv k3e63@t '(quasisyntax)) k2eb9@quasisyntax-macro (if (memv k3e63@t '(with-syntax)) k2e81@with-syntax-macro (if (memv k3e63@t '(when)) k2e6d@when-macro (if (memv k3e63@t '(unless)) k2e6f@unless-macro (if (memv k3e63@t '(case)) k2e77@case-macro (if (memv k3e63@t '(identifier-syntax)) k2ea3@identifier-syntax-macro (if (memv k3e63@t '(time)) k2e9b@time-macro (if (memv k3e63@t '(delay)) k2e9d@delay-macro (if (memv k3e63@t '(assert)) k2e9f@assert-macro (if (memv k3e63@t '(endianness)) k2ea1@endianness-macro (if (memv k3e63@t '(guard)) k2e97@guard-macro (if (memv k3e63@t '(define-enumeration)) k2e99@define-enumeration-macro (if (memv k3e63@t '(trace-lambda)) k2e8b@trace-lambda-macro (if (memv k3e63@t '(trace-define)) k2e8d@trace-define-macro (if (memv k3e63@t '(trace-define-syntax)) k2e8f@trace-define-syntax-macro (if (memv k3e63@t '(trace-let-syntax)) k2e93@trace-let-syntax-macro (if (memv k3e63@t '(trace-letrec-syntax)) k2e95@trace-letrec-syntax-macro (if (memv k3e63@t '(define-condition-type)) k2ebf@define-condition-type-macro (if (memv k3e63@t '(parameterize)) k2ec3@parameterize-macro (if (memv k3e63@t '(include-into)) k2eb3@include-into-macro (if (memv k3e63@t '(eol-style)) (lambda (k3e65@x) (k2ed9@symbol-macro k3e65@x '(none lf cr crlf nel crnel ls))) (if (memv k3e63@t '(error-handling-mode)) (lambda (k3e67@x) (k2ed9@symbol-macro k3e67@x '(ignore raise replace))) (if (memv k3e63@t '(buffer-mode)) (lambda (k3e69@x) (k2ed9@symbol-macro k3e69@x '(none line block))) (if (memv k3e63@t '(file-options)) k2c31@file-options-macro (if (memv k3e63@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) k2ec1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" k3e61@x)))))))))))))))))))))))))))))))))))))))) k3e61@x) (error 'core-macro-transformer '"BUG: invalid macro" k3e61@x))))) (set! k2edd@local-macro-transformer (lambda (k3e6b@x) (car k3e6b@x))) (set! k2edf@do-macro-call (lambda (k3e6d@transformer k3e6e@expr) ((lambda (k3e71@out) (begin ((letrec ((k3e73@f (lambda (k3e75@x) (if (not (k2c86@stx? k3e75@x)) (if (pair? k3e75@x) (begin (k3e73@f (car k3e75@x)) (k3e73@f (cdr k3e75@x))) (if (vector? k3e75@x) (vector-for-each k3e73@f k3e75@x) (if (symbol? k3e75@x) (k2fb2@syntax-violation '#f '"raw symbol encountered in output of macro" k3e6e@expr k3e75@x) (void)))) (void))))) k3e73@f) k3e71@out) (k2ca8@add-mark (k2c9e@gen-mark) k3e71@out k3e6e@expr))) (k3e6d@transformer (k2ca8@add-mark k2ca0@anti-mark k3e6e@expr '#f))))) (set! k2ee1@chi-macro (lambda (k3e77@p k3e78@e) (k2edf@do-macro-call (k2edb@macro-transformer k3e77@p) k3e78@e))) (set! k2ee3@chi-local-macro (lambda (k3e7b@p k3e7c@e) (k2edf@do-macro-call (k2edd@local-macro-transformer k3e7b@p) k3e7c@e))) (set! k2ee5@chi-global-macro (lambda (k3e7f@p k3e80@e) ((lambda (k3e83@lib k3e84@loc) (begin (k2ae3@k2985@visit-library k3e83@lib) ((lambda (k3e87@x) ((lambda (k3e89@transformer) (k2edf@do-macro-call k3e89@transformer k3e80@e)) (if (procedure? k3e87@x) k3e87@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" k3e87@x)))) (symbol-value k3e84@loc)))) (car k3e7f@p) (cdr k3e7f@p)))) (set! k2ee7@chi-expr* (lambda (k3e8b@e* k3e8c@r k3e8d@mr) (if (null? k3e8b@e*) '() ((lambda (k3e91@e) (cons k3e91@e (k2ee7@chi-expr* (cdr k3e8b@e*) k3e8c@r k3e8d@mr))) (k2eeb@chi-expr (car k3e8b@e*) k3e8c@r k3e8d@mr))))) (set! k2ee9@chi-application (lambda (k3e93@e k3e94@r k3e95@mr) ((lambda (k3e99@t) ((lambda (k3e9b@ls/false) (if k3e9b@ls/false (apply (lambda (k3e9d@rator k3e9e@rands) ((lambda (k3ea1@rator) (cons k3ea1@rator (k2ee7@chi-expr* k3e9e@rands k3e94@r k3e95@mr))) (k2eeb@chi-expr k3e9d@rator k3e94@r k3e95@mr))) k3e9b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3e99@t))) (k2ec9@syntax-dispatch k3e99@t '(any . each-any)))) k3e93@e))) (set! k2eeb@chi-expr (lambda (k3ea3@e k3ea4@r k3ea5@mr) (call-with-values (lambda () (k2ce6@syntax-type k3ea3@e k3ea4@r)) (lambda (k3eaf@k3eaa k3eb0@k3eac k3eb1@k3eae) ((lambda (k3eb5@kwd k3eb6@value k3eb7@type) ((lambda (k3ebb@t) (if (memv k3ebb@t '(core-macro)) ((lambda (k3ebd@transformer) (k3ebd@transformer k3ea3@e k3ea4@r k3ea5@mr)) (k2ed7@core-macro-transformer k3eb6@value)) (if (memv k3ebb@t '(global)) ((lambda (k3ebf@lib) ((lambda (k3ec1@loc) ((lambda () (begin ((k2f34@inv-collector) k3ebf@lib) k3ec1@loc)))) (cdr k3eb6@value))) (car k3eb6@value)) (if (memv k3ebb@t '(core-prim)) ((lambda (k3ec3@name) (list 'primitive k3ec3@name)) k3eb6@value) (if (memv k3ebb@t '(call)) (k2ee9@chi-application k3ea3@e k3ea4@r k3ea5@mr) (if (memv k3ebb@t '(lexical)) ((lambda (k3ec5@lex) k3ec5@lex) (k2e55@lexical-var k3eb6@value)) (if (memv k3ebb@t '(global-macro global-macro!)) (k2eeb@chi-expr (k2ee5@chi-global-macro k3eb6@value k3ea3@e) k3ea4@r k3ea5@mr) (if (memv k3ebb@t '(local-macro local-macro!)) (k2eeb@chi-expr (k2ee3@chi-local-macro k3eb6@value k3ea3@e) k3ea4@r k3ea5@mr) (if (memv k3ebb@t '(macro macro!)) (k2eeb@chi-expr (k2ee1@chi-macro k3eb6@value k3ea3@e) k3ea4@r k3ea5@mr) (if (memv k3ebb@t '(constant)) ((lambda (k3ec7@datum) (list 'quote k3ec7@datum)) k3eb6@value) (if (memv k3ebb@t '(set!)) (k2eed@chi-set! k3ea3@e k3ea4@r k3ea5@mr) (if (memv k3ebb@t '(begin)) ((lambda (k3ec9@t) ((lambda (k3ecb@ls/false) (if k3ecb@ls/false (apply (lambda (k3ecd@x k3ece@x*) (k2c1d@k2b8c@build-sequence '#f (k2ee7@chi-expr* (cons k3ecd@x k3ece@x*) k3ea4@r k3ea5@mr))) k3ecb@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3ec9@t))) (k2ec9@syntax-dispatch k3ec9@t '(_ any . each-any)))) k3ea3@e) (if (memv k3ebb@t '(let-syntax letrec-syntax)) ((lambda (k3ed1@t) ((lambda (k3ed3@ls/false) (if (and k3ed3@ls/false (apply (lambda (k3ed5@xlhs* k3ed6@xrhs* k3ed7@xbody k3ed8@xbody*) (if (not (k2cc8@valid-bound-ids? k3ed5@xlhs*)) (k2fb2@syntax-violation '#f '"invalid identifiers" k3ea3@e) (void))) k3ed3@ls/false)) (apply (lambda (k3edd@xlhs* k3ede@xrhs* k3edf@xbody k3ee0@xbody*) ((lambda (k3ee5@xlab*) ((lambda (k3ee7@xrib) ((lambda (k3ee9@xb*) ((lambda () (k2c1d@k2b8c@build-sequence '#f (k2ee7@chi-expr* (map (lambda (k3eeb@x) (k2caa@add-subst k3ee7@xrib k3eeb@x)) (cons k3edf@xbody k3ee0@xbody*)) (append (map cons k3ee5@xlab* k3ee9@xb*) k3ea4@r) (append (map cons k3ee5@xlab* k3ee9@xb*) k3ea5@mr)))))) (map (lambda (k3eed@x) (k2cfc@make-eval-transformer (k2f26@expand-transformer (if (eq? k3eb7@type 'let-syntax) k3eed@x (k2caa@add-subst k3ee7@xrib k3eed@x)) k3ea5@mr))) k3ede@xrhs*))) (k2c79@make-full-rib k3edd@xlhs* k3ee5@xlab*))) (map k2c42@gen-label k3edd@xlhs*))) k3ed3@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3ed1@t))) (k2ec9@syntax-dispatch k3ed1@t '(_ #(each (any any)) any . each-any)))) k3ea3@e) (if (memv k3ebb@t '(displaced-lexical)) (k2fb2@syntax-violation '#f '"identifier out of context" k3ea3@e) (if (memv k3ebb@t '(syntax)) (k2fb2@syntax-violation '#f '"reference to pattern variable outside a syntax form" k3ea3@e) (if (memv k3ebb@t '(define define-syntax module import library)) (k2fb2@syntax-violation '#f (string-append ((lambda (k3eef@t) (if (memv k3eef@t '(define)) '"a definition" (if (memv k3eef@t '(define-syntax)) '"a define-syntax" (if (memv k3eef@t '(module)) '"a module definition" (if (memv k3eef@t '(library)) '"a library definition" (if (memv k3eef@t '(import)) '"an import declaration" (if (memv k3eef@t '(export)) '"an export declaration" '"a non-expression"))))))) k3eb7@type) '" was found where an expression was expected") k3ea3@e) (if (memv k3ebb@t '(mutable)) (k2fb2@syntax-violation '#f '"attempt to reference an unexportable variable" k3ea3@e) (k2fb2@syntax-violation '#f '"invalid expression" k3ea3@e)))))))))))))))))) k3eb7@type)) k3eb1@k3eae k3eb0@k3eac k3eaf@k3eaa))))) (set! k2eed@chi-set! (lambda (k3ef1@e k3ef2@r k3ef3@mr) ((lambda (k3ef7@t) ((lambda (k3ef9@ls/false) (if (and k3ef9@ls/false (apply (lambda (k3efb@x k3efc@v) (k2cbe@id? k3efb@x)) k3ef9@ls/false)) (apply (lambda (k3eff@x k3f00@v) (call-with-values (lambda () (k2ce6@syntax-type k3eff@x k3ef2@r)) (lambda (k3f09@k3f04 k3f0a@k3f06 k3f0b@k3f08) ((lambda (k3f0f@kwd k3f10@value k3f11@type) ((lambda (k3f15@t) (if (memv k3f15@t '(lexical)) (begin (k2e59@set-lexical-mutable! k3f10@value '#t) (list 'set! (k2e55@lexical-var k3f10@value) (k2eeb@chi-expr k3f00@v k3ef2@r k3ef3@mr))) (if (memv k3f15@t '(core-prim)) (k2fb2@syntax-violation '#f '"cannot modify imported core primitive" k3ef1@e) (if (memv k3f15@t '(global)) (k2fb2@syntax-violation '#f '"attempt to modify imported binding" k3ef1@e) (if (memv k3f15@t '(global-macro!)) (k2eeb@chi-expr (k2ee5@chi-global-macro k3f10@value k3ef1@e) k3ef2@r k3ef3@mr) (if (memv k3f15@t '(local-macro!)) (k2eeb@chi-expr (k2ee3@chi-local-macro k3f10@value k3ef1@e) k3ef2@r k3ef3@mr) (if (memv k3f15@t '(mutable)) (k2fb2@syntax-violation '#f '"attempt to assign to an unexportable variable" k3ef1@e) (k2fb2@syntax-violation '#f '"invalid syntax" k3ef1@e)))))))) k3f11@type)) k3f0b@k3f08 k3f0a@k3f06 k3f09@k3f04)))) k3ef9@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3ef7@t))) (k2ec9@syntax-dispatch k3ef7@t '(_ any any)))) k3ef1@e))) (set! k2eef@verify-formals (lambda (k3f17@fmls k3f18@stx) ((lambda (k3f1b@t) ((lambda (k3f1d@ls/false) (if k3f1d@ls/false (apply (lambda (k3f1f@x*) (if (not (k2cc8@valid-bound-ids? k3f1f@x*)) (k2e83@invalid-fmls-error k3f18@stx k3f17@fmls) (void))) k3f1d@ls/false) ((lambda (k3f21@t) ((lambda (k3f23@ls/false) (if k3f23@ls/false (apply (lambda (k3f25@x* k3f26@x) (if (not (k2cc8@valid-bound-ids? (cons k3f26@x k3f25@x*))) (k2e83@invalid-fmls-error k3f18@stx k3f17@fmls) (void))) k3f23@ls/false) ((lambda (k3f29@t) ((lambda (k3f2b@ls/false) (if k3f2b@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid syntax" k3f18@stx)) k3f2b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3f29@t))) (k2ec9@syntax-dispatch k3f29@t '_))) k3f21@t))) (k2ec9@syntax-dispatch k3f21@t '#(each+ any () any)))) k3f1b@t))) (k2ec9@syntax-dispatch k3f1b@t 'each-any))) k3f17@fmls))) (set! k2ef1@chi-lambda-clause (lambda (k3f2d@stx k3f2e@fmls k3f2f@body* k3f30@r k3f31@mr) ((lambda (k3f37@t) ((lambda (k3f39@ls/false) (if k3f39@ls/false (apply (lambda (k3f3b@x*) (begin (k2eef@verify-formals k3f2e@fmls k3f2d@stx) ((lambda (k3f3d@lex* k3f3e@lab*) (values k3f3d@lex* (k2f01@chi-internal (k2caa@add-subst (k2c79@make-full-rib k3f3b@x* k3f3e@lab*) k3f2f@body*) (k2e5d@add-lexicals k3f3e@lab* k3f3d@lex* k3f30@r) k3f31@mr))) (map k2c3e@gen-lexical k3f3b@x*) (map k2c42@gen-label k3f3b@x*)))) k3f39@ls/false) ((lambda (k3f41@t) ((lambda (k3f43@ls/false) (if k3f43@ls/false (apply (lambda (k3f45@x* k3f46@x) (begin (k2eef@verify-formals k3f2e@fmls k3f2d@stx) ((lambda (k3f49@lex* k3f4a@lab* k3f4b@lex k3f4c@lab) (values (append k3f49@lex* k3f4b@lex) (k2f01@chi-internal (k2caa@add-subst (k2c79@make-full-rib (cons k3f46@x k3f45@x*) (cons k3f4c@lab k3f4a@lab*)) k3f2f@body*) (k2e5d@add-lexicals (cons k3f4c@lab k3f4a@lab*) (cons k3f4b@lex k3f49@lex*) k3f30@r) k3f31@mr))) (map k2c3e@gen-lexical k3f45@x*) (map k2c42@gen-label k3f45@x*) (k2c3e@gen-lexical k3f46@x) (k2c42@gen-label k3f46@x)))) k3f43@ls/false) ((lambda (k3f51@t) ((lambda (k3f53@ls/false) (if k3f53@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid syntax" k3f2e@fmls)) k3f53@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k3f51@t))) (k2ec9@syntax-dispatch k3f51@t '_))) k3f41@t))) (k2ec9@syntax-dispatch k3f41@t '#(each+ any () any)))) k3f37@t))) (k2ec9@syntax-dispatch k3f37@t 'each-any))) k3f2e@fmls))) (set! k2ef3@chi-lambda-clause* (lambda (k3f55@stx k3f56@fmls* k3f57@body** k3f58@r k3f59@mr) (if (null? k3f56@fmls*) (values '() '()) (call-with-values (lambda () (k2ef1@chi-lambda-clause k3f55@stx (car k3f56@fmls*) (car k3f57@body**) k3f58@r k3f59@mr)) (lambda (k3f63@k3f60 k3f64@k3f62) ((lambda (k3f67@b k3f68@a) (call-with-values (lambda () (k2ef3@chi-lambda-clause* k3f55@stx (cdr k3f56@fmls*) (cdr k3f57@body**) k3f58@r k3f59@mr)) (lambda (k3f6f@k3f6c k3f70@k3f6e) ((lambda (k3f73@b* k3f74@a*) (values (cons k3f68@a k3f74@a*) (cons k3f67@b k3f73@b*))) k3f70@k3f6e k3f6f@k3f6c)))) k3f64@k3f62 k3f63@k3f60)))))) (set! k2ef5@chi-defun (lambda (k3f77@x k3f78@r k3f79@mr) ((lambda (k3f7d@fmls k3f7e@body*) (call-with-values (lambda () (k2ef1@chi-lambda-clause k3f7d@fmls k3f7d@fmls k3f7e@body* k3f78@r k3f79@mr)) (lambda (k3f85@k3f82 k3f86@k3f84) ((lambda (k3f89@body k3f8a@fmls) (k2c1a@k2b5a@build-lambda '#f k3f8a@fmls k3f89@body)) k3f86@k3f84 k3f85@k3f82)))) (car k3f77@x) (cdr k3f77@x)))) (set! k2ef7@chi-rhs (lambda (k3f8d@rhs k3f8e@r k3f8f@mr) ((lambda (k3f93@t) (if (memv k3f93@t '(defun)) (k2ef5@chi-defun (cdr k3f8d@rhs) k3f8e@r k3f8f@mr) (if (memv k3f93@t '(expr)) ((lambda (k3f95@expr) (k2eeb@chi-expr k3f95@expr k3f8e@r k3f8f@mr)) (cdr k3f8d@rhs)) (if (memv k3f93@t '(top-expr)) ((lambda (k3f97@expr) (k2c1d@k2b8c@build-sequence '#f (list (k2eeb@chi-expr k3f97@expr k3f8e@r k3f8f@mr) (k2c1e@k2b8e@build-void)))) (cdr k3f8d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" k3f8d@rhs))))) (car k3f8d@rhs)))) (set! k2ef9@expand-interaction-rhs*/init* (lambda (k3f99@lhs* k3f9a@rhs* k3f9b@init* k3f9c@r k3f9d@mr) ((letrec ((k3fa3@f (lambda (k3fa5@lhs* k3fa6@rhs*) (if (null? k3fa5@lhs*) (map (lambda (k3fa9@x) (k2eeb@chi-expr k3fa9@x k3f9c@r k3f9d@mr)) k3f9b@init*) ((lambda (k3fab@lhs k3fac@rhs) ((lambda (k3faf@t) (if (memv k3faf@t '(defun)) ((lambda (k3fb1@rhs) (cons (list 'set! k3fab@lhs k3fb1@rhs) (k3fa3@f (cdr k3fa5@lhs*) (cdr k3fa6@rhs*)))) (k2ef5@chi-defun (cdr k3fac@rhs) k3f9c@r k3f9d@mr)) (if (memv k3faf@t '(expr)) ((lambda (k3fb3@rhs) (cons (list 'set! k3fab@lhs k3fb3@rhs) (k3fa3@f (cdr k3fa5@lhs*) (cdr k3fa6@rhs*)))) (k2eeb@chi-expr (cdr k3fac@rhs) k3f9c@r k3f9d@mr)) (if (memv k3faf@t '(top-expr)) ((lambda (k3fb5@e) (cons k3fb5@e (k3fa3@f (cdr k3fa5@lhs*) (cdr k3fa6@rhs*)))) (k2eeb@chi-expr (cdr k3fac@rhs) k3f9c@r k3f9d@mr)) (error 'expand-interaction '"invallid" k3fac@rhs))))) (car k3fac@rhs))) (car k3fa5@lhs*) (car k3fa6@rhs*)))))) k3fa3@f) k3f99@lhs* k3f9a@rhs*))) (set! k2efb@chi-rhs* (lambda (k3fb7@rhs* k3fb8@r k3fb9@mr) ((letrec ((k3fbd@f (lambda (k3fbf@ls) (if (null? k3fbf@ls) '() ((lambda (k3fc1@a) (cons k3fc1@a (k3fbd@f (cdr k3fbf@ls)))) (k2ef7@chi-rhs (car k3fbf@ls) k3fb8@r k3fb9@mr)))))) k3fbd@f) k3fb7@rhs*))) (set! k2efd@find-bound=? (lambda (k3fc3@x k3fc4@lhs* k3fc5@rhs*) (if (null? k3fc4@lhs*) '#f (if (k2cc4@bound-id=? k3fc3@x (car k3fc4@lhs*)) (car k3fc5@rhs*) (k2efd@find-bound=? k3fc3@x (cdr k3fc4@lhs*) (cdr k3fc5@rhs*)))))) (set! k2eff@find-dups (lambda (k3fc9@ls) ((letrec ((k3fcb@f (lambda (k3fcd@ls k3fce@dups) (if (null? k3fcd@ls) k3fce@dups ((lambda (k3fd1@t) (if k3fd1@t ((lambda (k3fd3@x) (k3fcb@f (cdr k3fcd@ls) (cons (list (car k3fcd@ls) k3fd3@x) k3fce@dups))) k3fd1@t) (k3fcb@f (cdr k3fcd@ls) k3fce@dups))) (k2efd@find-bound=? (car k3fcd@ls) (cdr k3fcd@ls) (cdr k3fcd@ls))))))) k3fcb@f) k3fc9@ls '()))) (set! k2f01@chi-internal (lambda (k3fd5@e* k3fd6@r k3fd7@mr) ((lambda (k3fdb@rib) (call-with-values (lambda () (k2f24@chi-body* (map (lambda (k3fed@x) (k2caa@add-subst k3fdb@rib k3fed@x)) (k2cbc@syntax->list k3fd5@e*)) k3fd6@r k3fd7@mr '() '() '() '() '() k3fdb@rib '#f)) (lambda (k3fef@k3fde k3ff0@k3fe0 k3ff1@k3fe2 k3ff2@k3fe4 k3ff3@k3fe6 k3ff4@k3fe8 k3ff5@k3fea k3ff6@k3fec) ((lambda (k3fff@_exp* k4000@kwd* k4001@mod** k4002@rhs* k4003@lex* k4004@mr k4005@r k4006@e*) (begin (if (null? k4006@e*) (k2fb2@syntax-violation '#f '"no expression in body" k4006@e*) (void)) ((lambda (k400f@init*) ((lambda (k4011@rhs*) ((lambda () (k2c20@k2b92@build-letrec* '#f (reverse k4003@lex*) (reverse k4011@rhs*) (k2c1d@k2b8c@build-sequence '#f k400f@init*))))) (k2efb@chi-rhs* k4002@rhs* k4005@r k4004@mr))) (k2ee7@chi-expr* (append (apply append (reverse k4001@mod**)) k4006@e*) k4005@r k4004@mr)))) k3ff6@k3fec k3ff5@k3fea k3ff4@k3fe8 k3ff3@k3fe6 k3ff2@k3fe4 k3ff1@k3fe2 k3ff0@k3fe0 k3fef@k3fde)))) (k2c6d@make-empty-rib)))) (set! k2f03@parse-module (lambda (k4013@e) ((lambda (k4015@t) ((lambda (k4017@ls/false) (if k4017@ls/false (apply (lambda (k4019@export* k401a@b*) (begin (if (not (for-all k2cbe@id? k4019@export*)) (k2fb2@syntax-violation '#f '"module exports must be identifiers" k4013@e) (void)) (values '#f (list->vector k4019@export*) k401a@b*))) k4017@ls/false) ((lambda (k401d@t) ((lambda (k401f@ls/false) (if k401f@ls/false (apply (lambda (k4021@name k4022@export* k4023@b*) (begin (if (not (k2cbe@id? k4021@name)) (k2fb2@syntax-violation '#f '"module name must be an identifier" k4013@e) (void)) (if (not (for-all k2cbe@id? k4022@export*)) (k2fb2@syntax-violation '#f '"module exports must be identifiers" k4013@e) (void)) (values k4021@name (list->vector k4022@export*) k4023@b*))) k401f@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k401d@t))) (k2ec9@syntax-dispatch k401d@t '(_ any each-any . each-any)))) k4015@t))) (k2ec9@syntax-dispatch k4015@t '(_ each-any . each-any)))) k4013@e))) (set! k2f09@k2f04 (make-record-type-descriptor 'module-interface '#f 'k2f07 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! k2f0b@k2f06 '#f) (set! k2f0d@k2f05 (make-record-constructor-descriptor k2f09@k2f04 '#f k2f0b@k2f06)) (set! k2f10@module-interface? (record-predicate k2f09@k2f04)) (set! k2f12@make-module-interface (record-constructor k2f0d@k2f05)) (set! k2f14@module-interface-first-mark (record-accessor k2f09@k2f04 '0)) (set! k2f16@module-interface-exp-id-vec (record-accessor k2f09@k2f04 '1)) (set! k2f18@module-interface-exp-lab-vec (record-accessor k2f09@k2f04 '2)) (set! k2f1a@set-module-interface-first-mark! (record-mutator k2f09@k2f04 '0)) (set! k2f1c@set-module-interface-exp-id-vec! (record-mutator k2f09@k2f04 '1)) (set! k2f1e@set-module-interface-exp-lab-vec! (record-mutator k2f09@k2f04 '2)) (set! k2f20@module-interface-exp-id* (lambda (k4027@iface k4028@id) ((lambda (k402c@diff-marks) (begin (set! k402c@diff-marks (lambda (k4033@ls k4034@x) (begin (if (null? k4033@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (k4037@a) (if (eq? k4037@a k4034@x) '() (cons k4037@a (k402c@diff-marks (cdr k4033@ls) k4034@x)))) (car k4033@ls))))) ((lambda (k402d@diff k402e@id-vec) (if (null? k402d@diff) k402e@id-vec (vector-map (lambda (k4031@x) (k2c88@make-stx (k2c8a@stx-expr k4031@x) (append k402d@diff (k2c8c@stx-mark* k4031@x)) '() '())) k402e@id-vec))) (k402c@diff-marks (k2c8c@stx-mark* k4028@id) (k2f14@module-interface-first-mark k4027@iface)) (k2f16@module-interface-exp-id-vec k4027@iface)))) '#f))) (set! k2f22@chi-internal-module (lambda (k4039@e k403a@r k403b@mr k403c@lex* k403d@rhs* k403e@mod** k403f@kwd*) (call-with-values (lambda () (k2f03@parse-module k4039@e)) (lambda (k404d@k4048 k404e@k404a k404f@k404c) ((lambda (k4053@e* k4054@exp-id* k4055@name) ((lambda (k4059@rib) ((lambda (k405b@e*) ((lambda () (call-with-values (lambda () (k2f24@chi-body* k405b@e* k403a@r k403b@mr k403c@lex* k403d@rhs* k403e@mod** k403f@kwd* '() k4059@rib '#f)) (lambda (k406d@k405e k406e@k4060 k406f@k4062 k4070@k4064 k4071@k4066 k4072@k4068 k4073@k406a k4074@k406c) ((lambda (k407d@_exp* k407e@kwd* k407f@mod** k4080@rhs* k4081@lex* k4082@mr k4083@r k4084@e*) ((lambda (k408d@exp-lab* k408e@mod**) (if (not k4055@name) (values k4081@lex* k4080@rhs* k4054@exp-id* k408d@exp-lab* k4083@r k4082@mr k408e@mod** k407e@kwd*) ((lambda (k4091@lab k4092@iface) (values k4081@lex* k4080@rhs* (vector k4055@name) (vector k4091@lab) (cons (cons k4091@lab (cons '$module k4092@iface)) k4083@r) (cons (cons k4091@lab (cons '$module k4092@iface)) k4082@mr) k408e@mod** k407e@kwd*)) (k2c42@gen-label 'module) (k2f12@make-module-interface (car (k2c8c@stx-mark* k4055@name)) (vector-map (lambda (k4095@x) (k2c88@make-stx (k2c8a@stx-expr k4095@x) (k2c8c@stx-mark* k4095@x) '() '())) k4054@exp-id*) k408d@exp-lab*)))) (vector-map (lambda (k4097@x) (or (k2cd8@id->label (k2c88@make-stx (k2cc0@id->sym k4097@x) (k2c8c@stx-mark* k4097@x) (list k4059@rib) '())) (k2fb2@syntax-violation '#f '"cannot find module export" k4097@x))) k4054@exp-id*) (cons k4084@e* k407f@mod**))) k4074@k406c k4073@k406a k4072@k4068 k4071@k4066 k4070@k4064 k406f@k4062 k406e@k4060 k406d@k405e)))))) (map (lambda (k4099@x) (k2caa@add-subst k4059@rib k4099@x)) (k2cbc@syntax->list k4053@e*)))) (k2c6d@make-empty-rib))) k404f@k404c k404e@k404a k404d@k4048))))) (set! k2f24@chi-body* (lambda (k409b@e* k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40a1@kwd* k40a2@exp* k40a3@rib k40a4@top?) (if (null? k409b@e*) (values k409b@e* k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40a1@kwd* k40a2@exp*) ((lambda (k40af@e) (call-with-values (lambda () (k2ce6@syntax-type k40af@e k409c@r)) (lambda (k40b7@k40b2 k40b8@k40b4 k40b9@k40b6) ((lambda (k40bd@kwd k40be@value k40bf@type) ((lambda (k40c3@kwd*) ((lambda (k40c5@t) (if (memv k40c5@t '(define)) (call-with-values (lambda () (k2e4d@parse-define k40af@e)) (lambda (k40cb@k40c8 k40cc@k40ca) ((lambda (k40cf@rhs k40d0@id) (begin (if (k2ccc@bound-id-member? k40d0@id k40c3@kwd*) (k2fb2@syntax-violation '#f '"cannot redefine keyword" k40af@e) (void)) (call-with-values (lambda () (k2c46@gen-define-label+loc k40d0@id k40a3@rib)) (lambda (k40d7@k40d4 k40d8@k40d6) ((lambda (k40db@lex k40dc@lab) (begin (k2c6f@extend-rib! k40a3@rib k40d0@id k40dc@lab) (k2f24@chi-body* (cdr k409b@e*) (k2e5b@add-lexical k40dc@lab k40db@lex k409c@r) k409d@mr (cons k40db@lex k409e@lex*) (cons k40cf@rhs k409f@rhs*) k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?))) k40d8@k40d6 k40d7@k40d4))))) k40cc@k40ca k40cb@k40c8))) (if (memv k40c5@t '(define-syntax)) (call-with-values (lambda () (k2e4f@parse-define-syntax k40af@e)) (lambda (k40e3@k40e0 k40e4@k40e2) ((lambda (k40e7@rhs k40e8@id) (begin (if (k2ccc@bound-id-member? k40e8@id k40c3@kwd*) (k2fb2@syntax-violation '#f '"cannot redefine keyword" k40af@e) (void)) ((lambda (k40eb@lab k40ec@expanded-rhs) (begin (k2c6f@extend-rib! k40a3@rib k40e8@id k40eb@lab) ((lambda (k40ef@b) (k2f24@chi-body* (cdr k409b@e*) (cons (cons k40eb@lab k40ef@b) k409c@r) (cons (cons k40eb@lab k40ef@b) k409d@mr) k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?)) (k2cfc@make-eval-transformer k40ec@expanded-rhs)))) (k2c48@gen-define-label k40e8@id k40a3@rib) (k2f26@expand-transformer k40e7@rhs k409d@mr)))) k40e4@k40e2 k40e3@k40e0))) (if (memv k40c5@t '(let-syntax letrec-syntax)) ((lambda (k40f1@t) ((lambda (k40f3@ls/false) (if (and k40f3@ls/false (apply (lambda (k40f5@xlhs* k40f6@xrhs* k40f7@xbody*) (if (not (k2cc8@valid-bound-ids? k40f5@xlhs*)) (k2fb2@syntax-violation '#f '"invalid identifiers" k40af@e) (void))) k40f3@ls/false)) (apply (lambda (k40fb@xlhs* k40fc@xrhs* k40fd@xbody*) ((lambda (k4101@xlab*) ((lambda (k4103@xrib) ((lambda (k4105@xb*) ((lambda () (k2f24@chi-body* (append (map (lambda (k4107@x) (k2caa@add-subst k4103@xrib k4107@x)) k40fd@xbody*) (cdr k409b@e*)) (append (map cons k4101@xlab* k4105@xb*) k409c@r) (append (map cons k4101@xlab* k4105@xb*) k409d@mr) k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?)))) (map (lambda (k4109@x) (k2cfc@make-eval-transformer (k2f26@expand-transformer (if (eq? k40bf@type 'let-syntax) k4109@x (k2caa@add-subst k4103@xrib k4109@x)) k409d@mr))) k40fc@xrhs*))) (k2c79@make-full-rib k40fb@xlhs* k4101@xlab*))) (map k2c42@gen-label k40fb@xlhs*))) k40f3@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k40f1@t))) (k2ec9@syntax-dispatch k40f1@t '(_ #(each (any any)) . each-any)))) k40af@e) (if (memv k40c5@t '(begin)) ((lambda (k410b@t) ((lambda (k410d@ls/false) (if k410d@ls/false (apply (lambda (k410f@x*) (k2f24@chi-body* (append k410f@x* (cdr k409b@e*)) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?)) k410d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k410b@t))) (k2ec9@syntax-dispatch k410b@t '(_ . each-any)))) k40af@e) (if (memv k40c5@t '(global-macro global-macro!)) (k2f24@chi-body* (cons (k2caa@add-subst k40a3@rib (k2ee5@chi-global-macro k40be@value k40af@e)) (cdr k409b@e*)) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?) (if (memv k40c5@t '(local-macro local-macro!)) (k2f24@chi-body* (cons (k2caa@add-subst k40a3@rib (k2ee3@chi-local-macro k40be@value k40af@e)) (cdr k409b@e*)) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?) (if (memv k40c5@t '(macro macro!)) (k2f24@chi-body* (cons (k2caa@add-subst k40a3@rib (k2ee1@chi-macro k40be@value k40af@e)) (cdr k409b@e*)) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?) (if (memv k40c5@t '(module)) (call-with-values (lambda () (k2f22@chi-internal-module k40af@e k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd*)) (lambda (k4121@k4112 k4122@k4114 k4123@k4116 k4124@k4118 k4125@k411a k4126@k411c k4127@k411e k4128@k4120) ((lambda (k4131@kwd* k4132@mod** k4133@mr k4134@r k4135@m-exp-lab* k4136@m-exp-id* k4137@rhs* k4138@lex*) (begin (vector-for-each (lambda (k4141@id k4142@lab) (k2c6f@extend-rib! k40a3@rib k4141@id k4142@lab)) k4136@m-exp-id* k4135@m-exp-lab*) (k2f24@chi-body* (cdr k409b@e*) k4134@r k4133@mr k4138@lex* k4137@rhs* k4132@mod** k4131@kwd* k40a2@exp* k40a3@rib k40a4@top?))) k4128@k4120 k4127@k411e k4126@k411c k4125@k411a k4124@k4118 k4123@k4116 k4122@k4114 k4121@k4112))) (if (memv k40c5@t '(library)) (begin (k2f94@library-expander (k2cd4@stx->datum k40af@e)) (k2f24@chi-body* (cdr k409b@e*) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?)) (if (memv k40c5@t '(export)) ((lambda (k4145@t) ((lambda (k4147@ls/false) (if k4147@ls/false (apply (lambda (k4149@exp-decl*) (k2f24@chi-body* (cdr k409b@e*) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* (append k4149@exp-decl* k40a2@exp*) k40a3@rib k40a4@top?)) k4147@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4145@t))) (k2ec9@syntax-dispatch k4145@t '(_ . each-any)))) k40af@e) (if (memv k40c5@t '(import)) ((lambda () ((lambda (k414c@module-import? k414e@module-import k4150@library-import) (begin (set! k414c@module-import? (lambda (k419f@e) ((lambda (k41a1@t) ((lambda (k41a3@ls/false) (if (and k41a3@ls/false (apply (lambda (k41a5@id) (k2cbe@id? k41a5@id)) k41a3@ls/false)) (apply (lambda (k41a7@id) '#t) k41a3@ls/false) ((lambda (k41a9@t) ((lambda (k41ab@ls/false) (if k41ab@ls/false (apply (lambda (k41ad@imp*) '#f) k41ab@ls/false) ((lambda (k41af@t) ((lambda (k41b1@ls/false) (if k41b1@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"malformed import form" k419f@e)) k41b1@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k41af@t))) (k2ec9@syntax-dispatch k41af@t '_))) k41a9@t))) (k2ec9@syntax-dispatch k41a9@t '(_ . each-any)))) k41a1@t))) (k2ec9@syntax-dispatch k41a1@t '(_ any)))) k419f@e))) (set! k414e@module-import (lambda (k417d@e k417e@r) ((lambda (k4181@t) ((lambda (k4183@ls/false) (if (and k4183@ls/false (apply (lambda (k4185@id) (k2cbe@id? k4185@id)) k4183@ls/false)) (apply (lambda (k4187@id) (call-with-values (lambda () (k2ce6@syntax-type k4187@id k417e@r)) (lambda (k418f@k418a k4190@k418c k4191@k418e) ((lambda (k4195@kwd k4196@value k4197@type) ((lambda (k419b@t) (if (memv k419b@t '($module)) ((lambda (k419d@iface) (values (k2f20@module-interface-exp-id* k419d@iface k4187@id) (k2f18@module-interface-exp-lab-vec k419d@iface))) k4196@value) (k2fb2@syntax-violation '#f '"invalid import" k417d@e))) k4197@type)) k4191@k418e k4190@k418c k418f@k418a)))) k4183@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4181@t))) (k2ec9@syntax-dispatch k4181@t '(_ any)))) k417d@e))) (set! k4150@library-import (lambda (k4161@e) ((lambda (k4163@t) ((lambda (k4165@ls/false) (if k4165@ls/false (apply (lambda (k4167@ctxt k4168@imp*) (call-with-values (lambda () (k2f2e@parse-import-spec* (k2fb8@syntax->datum k4168@imp*))) (lambda (k416f@k416c k4170@k416e) ((lambda (k4173@subst-labels k4174@subst-names) (values (vector-map (lambda (k4177@name) (k2c9c@datum->stx k4167@ctxt k4177@name)) k4174@subst-names) k4173@subst-labels)) k4170@k416e k416f@k416c)))) k4165@ls/false) ((lambda (k4179@t) ((lambda (k417b@ls/false) (if k417b@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid import form" k4161@e)) k417b@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4179@t))) (k2ec9@syntax-dispatch k4179@t '_))) k4163@t))) (k2ec9@syntax-dispatch k4163@t '(any . each-any)))) k4161@e))) (begin (call-with-values (lambda () (if (k414c@module-import? k40af@e) (k414e@module-import k40af@e k409c@r) (k4150@library-import k40af@e))) (lambda (k4155@k4152 k4156@k4154) ((lambda (k4159@lab* k415a@id*) (vector-for-each (lambda (k415d@id k415e@lab) (k2c6f@extend-rib! k40a3@rib k415d@id k415e@lab)) k415a@id* k4159@lab*)) k4156@k4154 k4155@k4152))) (k2f24@chi-body* (cdr k409b@e*) k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?)))) '#f '#f '#f))) (if k40a4@top? (k2f24@chi-body* (cdr k409b@e*) k409c@r k409d@mr (cons (k2c3e@gen-lexical 'dummy) k409e@lex*) (cons (cons 'top-expr k40af@e) k409f@rhs*) k40a0@mod** k40c3@kwd* k40a2@exp* k40a3@rib k40a4@top?) (values k409b@e* k409c@r k409d@mr k409e@lex* k409f@rhs* k40a0@mod** k40c3@kwd* k40a2@exp*)))))))))))))) k40bf@type)) (if (k2cbe@id? k40bd@kwd) (cons k40bd@kwd k40a1@kwd*) k40a1@kwd*))) k40b9@k40b6 k40b8@k40b4 k40b7@k40b2)))) (car k409b@e*))))) (set! k2f26@expand-transformer (lambda (k41b3@expr k41b4@r) ((lambda (k41b7@rtc) ((lambda (k41b9@expanded-rhs) (begin (for-each ((lambda (k41bb@mark-visit) (lambda (k41bd@x) (begin (k2ae2@k2983@invoke-library k41bd@x) (k41bb@mark-visit k41bd@x)))) (k2f36@vis-collector)) (k41b7@rtc)) k41b9@expanded-rhs)) ((lambda (k41c7@k41c0 k41c8@k41c2 k41c9@k41c4 k41ca@k41c6) ((lambda (k41cf@swap) (dynamic-wind k41cf@swap (lambda () (k2eeb@chi-expr k41b3@expr k41b4@r k41b4@r)) k41cf@swap)) (lambda () (begin ((lambda (k41d1@t) (begin (k41c7@k41c0 k41c9@k41c4) (set! k41c9@k41c4 k41d1@t))) (k41c7@k41c0)) ((lambda (k41d3@t) (begin (k41c8@k41c2 k41ca@k41c6) (set! k41ca@k41c6 k41d3@t))) (k41c8@k41c2)))))) k2f34@inv-collector k2f36@vis-collector k41b7@rtc (lambda (k41d5@x) (values))))) (k2f32@make-collector)))) (set! k2f28@parse-exports (lambda (k41d7@exp*) ((letrec ((k41d9@f (lambda (k41db@exp* k41dc@int* k41dd@ext*) (if (null? k41db@exp*) (begin (if (not (k2cc8@valid-bound-ids? k41dd@ext*)) (k2fb2@syntax-violation 'export '"invalid exports" (k2eff@find-dups k41dd@ext*)) (void)) (values (map k2fb8@syntax->datum k41dd@ext*) k41dc@int*)) ((lambda (k41e1@t) ((lambda (k41e3@ls/false) (if k41e3@ls/false (apply (lambda (k41e5@rename k41e6@i* k41e7@e*) (begin (if (not (and (eq? (k2fb8@syntax->datum k41e5@rename) 'rename) (for-all k2cbe@id? k41e6@i*) (for-all k2cbe@id? k41e7@e*))) (k2fb2@syntax-violation 'export '"invalid export specifier" (car k41db@exp*)) (void)) (k41d9@f (cdr k41db@exp*) (append k41e6@i* k41dc@int*) (append k41e7@e* k41dd@ext*)))) k41e3@ls/false) ((lambda (k41eb@t) ((lambda (k41ed@ls/false) (if k41ed@ls/false (apply (lambda (k41ef@ie) (begin (if (not (k2cbe@id? k41ef@ie)) (k2fb2@syntax-violation 'export '"invalid export" k41ef@ie) (void)) (k41d9@f (cdr k41db@exp*) (cons k41ef@ie k41dc@int*) (cons k41ef@ie k41dd@ext*)))) k41ed@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k41eb@t))) (k2ec9@syntax-dispatch k41eb@t 'any))) k41e1@t))) (k2ec9@syntax-dispatch k41e1@t '(any . #(each (any any)))))) (car k41db@exp*)))))) k41d9@f) k41d7@exp* '() '()))) (set! k2f2a@parse-library-name (lambda (k41f1@spec) ((lambda (k41f4@parse) (begin (set! k41f4@parse (lambda (k4201@x) ((lambda (k4203@t) ((lambda (k4205@ls/false) (if (and k4205@ls/false (apply (lambda (k4207@v*) (for-all (lambda (k4209@x) ((lambda (k420b@x) (and (integer? k420b@x) (exact? k420b@x))) (k2fb8@syntax->datum k4209@x))) k4207@v*)) k4205@ls/false)) (apply (lambda (k420d@v*) (values '() (map k2fb8@syntax->datum k420d@v*))) k4205@ls/false) ((lambda (k420f@t) ((lambda (k4211@ls/false) (if (and k4211@ls/false (apply (lambda (k4213@x k4214@rest) (symbol? (k2fb8@syntax->datum k4213@x))) k4211@ls/false)) (apply (lambda (k4217@x k4218@rest) (call-with-values (lambda () (k41f4@parse k4218@rest)) (lambda (k421f@k421c k4220@k421e) ((lambda (k4223@v* k4224@x*) (values (cons (k2fb8@syntax->datum k4217@x) k4224@x*) k4223@v*)) k4220@k421e k421f@k421c)))) k4211@ls/false) ((lambda (k4227@t) ((lambda (k4229@ls/false) (if k4229@ls/false (apply (lambda () (values '() '())) k4229@ls/false) ((lambda (k422b@t) ((lambda (k422d@ls/false) (if k422d@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid library name" k41f1@spec)) k422d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k422b@t))) (k2ec9@syntax-dispatch k422b@t '_))) k4227@t))) (k2ec9@syntax-dispatch k4227@t '()))) k420f@t))) (k2ec9@syntax-dispatch k420f@t '(any . any)))) k4203@t))) (k2ec9@syntax-dispatch k4203@t '(each-any)))) k4201@x))) (call-with-values (lambda () (k41f4@parse k41f1@spec)) (lambda (k41f9@k41f6 k41fa@k41f8) ((lambda (k41fd@ver* k41fe@name*) (begin (if (null? k41fe@name*) (k2fb2@syntax-violation '#f '"empty library name" k41f1@spec) (void)) (values k41fe@name* k41fd@ver*))) k41fa@k41f8 k41f9@k41f6))))) '#f))) (set! k2f2c@parse-library (lambda (k422f@e) ((lambda (k4231@t) ((lambda (k4233@ls/false) (if (and k4233@ls/false (apply (lambda (k4235@library k4236@name* k4237@export k4238@exp* k4239@import k423a@imp* k423b@b*) (and (eq? (k2fb8@syntax->datum k4237@export) 'export) (eq? (k2fb8@syntax->datum k4239@import) 'import) (eq? (k2fb8@syntax->datum k4235@library) 'library))) k4233@ls/false)) (apply (lambda (k4243@library k4244@name* k4245@export k4246@exp* k4247@import k4248@imp* k4249@b*) (values k4244@name* k4246@exp* k4248@imp* k4249@b*)) k4233@ls/false) ((lambda (k4251@t) ((lambda (k4253@ls/false) (if k4253@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"malformed library" k422f@e)) k4253@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4251@t))) (k2ec9@syntax-dispatch k4251@t '_))) k4231@t))) (k2ec9@syntax-dispatch k4231@t '(any each-any (any . each-any) (any . each-any) . each-any)))) k422f@e))) (set! k2f2e@parse-import-spec* ((lambda () ((lambda (k4256@idsyn? k4258@dup-error k425a@merge-substs k425c@exclude* k425e@find* k4260@rem* k4262@remove-dups k4264@parse-library-name k4266@import-library k4268@get-import k426a@add-imports!) (begin (set! k4256@idsyn? (lambda (k445f@x) (symbol? (k2fb8@syntax->datum k445f@x)))) (set! k4258@dup-error (lambda (k445d@name) (k2fb2@syntax-violation 'import '"two imports with different bindings" k445d@name))) (set! k425a@merge-substs (lambda (k444b@s k444c@subst) ((lambda (k4450@insert-to-subst) (begin (set! k4450@insert-to-subst (lambda (k4451@a k4452@subst) ((lambda (k4455@name k4456@label) ((lambda (k4459@t) (if k4459@t ((lambda (k445b@x) (if (eq? (cdr k445b@x) k4456@label) k4452@subst (k4258@dup-error k4455@name))) k4459@t) (cons k4451@a k4452@subst))) (assq k4455@name k4452@subst))) (car k4451@a) (cdr k4451@a)))) (if (null? k444b@s) k444c@subst (k4450@insert-to-subst (car k444b@s) (k425a@merge-substs (cdr k444b@s) k444c@subst))))) '#f))) (set! k425c@exclude* (lambda (k441b@sym* k441c@subst) ((lambda (k4420@exclude) (begin (set! k4420@exclude (lambda (k4439@sym k443a@subst) (if (null? k443a@subst) (k2fb2@syntax-violation 'import '"cannot rename unbound identifier" k4439@sym) (if (eq? k4439@sym (caar k443a@subst)) (values (cdar k443a@subst) (cdr k443a@subst)) ((lambda (k443d@a) (call-with-values (lambda () (k4420@exclude k4439@sym (cdr k443a@subst))) (lambda (k4443@k4440 k4444@k4442) ((lambda (k4447@subst k4448@old) (values k4448@old (cons k443d@a k4447@subst))) k4444@k4442 k4443@k4440)))) (car k443a@subst)))))) (if (null? k441b@sym*) (values '() k441c@subst) (call-with-values (lambda () (k4420@exclude (car k441b@sym*) k441c@subst)) (lambda (k4425@k4422 k4426@k4424) ((lambda (k4429@subst k442a@old) (call-with-values (lambda () (k425c@exclude* (cdr k441b@sym*) k4429@subst)) (lambda (k4431@k442e k4432@k4430) ((lambda (k4435@subst k4436@old*) (values (cons k442a@old k4436@old*) k4435@subst)) k4432@k4430 k4431@k442e)))) k4426@k4424 k4425@k4422)))))) '#f))) (set! k425e@find* (lambda (k4413@sym* k4414@subst) (map (lambda (k4417@x) ((lambda (k4419@t) (if k4419@t (cdr k4419@t) (k2fb2@syntax-violation 'import '"cannot find identifier" k4417@x))) (assq k4417@x k4414@subst))) k4413@sym*))) (set! k4260@rem* (lambda (k440b@sym* k440c@subst) ((letrec ((k440f@f (lambda (k4411@subst) (if (null? k4411@subst) '() (if (memq (caar k4411@subst) k440b@sym*) (k440f@f (cdr k4411@subst)) (cons (car k4411@subst) (k440f@f (cdr k4411@subst)))))))) k440f@f) k440c@subst))) (set! k4262@remove-dups (lambda (k4409@ls) (if (null? k4409@ls) '() (if (memq (car k4409@ls) (cdr k4409@ls)) (k4262@remove-dups (cdr k4409@ls)) (cons (car k4409@ls) (k4262@remove-dups (cdr k4409@ls))))))) (set! k4264@parse-library-name (lambda (k4321@spec) ((lambda (k4324@subversion? k4326@subversion-pred k4328@version-pred) (begin (set! k4324@subversion? (lambda (k4405@x) ((lambda (k4407@x) (and (integer? k4407@x) (exact? k4407@x) (>= k4407@x '0))) (k2fb8@syntax->datum k4405@x)))) (set! k4326@subversion-pred (lambda (k43a5@x*) ((lambda (k43a7@t) ((lambda (k43a9@ls/false) (if (and k43a9@ls/false (apply (lambda (k43ab@n) (k4324@subversion? k43ab@n)) k43a9@ls/false)) (apply (lambda (k43ad@n) (lambda (k43af@x) (= k43af@x (k2fb8@syntax->datum k43ad@n)))) k43a9@ls/false) ((lambda (k43b1@t) ((lambda (k43b3@ls/false) (if (and k43b3@ls/false (apply (lambda (k43b5@p? k43b6@sub*) (eq? (k2fb8@syntax->datum k43b5@p?) 'and)) k43b3@ls/false)) (apply (lambda (k43b9@p? k43ba@sub*) ((lambda (k43bd@p*) (lambda (k43bf@x) (for-all (lambda (k43c1@p) (k43c1@p k43bf@x)) k43bd@p*))) (map k4326@subversion-pred k43ba@sub*))) k43b3@ls/false) ((lambda (k43c3@t) ((lambda (k43c5@ls/false) (if (and k43c5@ls/false (apply (lambda (k43c7@p? k43c8@sub*) (eq? (k2fb8@syntax->datum k43c7@p?) 'or)) k43c5@ls/false)) (apply (lambda (k43cb@p? k43cc@sub*) ((lambda (k43cf@p*) (lambda (k43d1@x) (exists (lambda (k43d3@p) (k43d3@p k43d1@x)) k43cf@p*))) (map k4326@subversion-pred k43cc@sub*))) k43c5@ls/false) ((lambda (k43d5@t) ((lambda (k43d7@ls/false) (if (and k43d7@ls/false (apply (lambda (k43d9@p? k43da@sub) (eq? (k2fb8@syntax->datum k43d9@p?) 'not)) k43d7@ls/false)) (apply (lambda (k43dd@p? k43de@sub) ((lambda (k43e1@p) (lambda (k43e3@x) (not (k43e1@p k43e3@x)))) (k4326@subversion-pred k43de@sub))) k43d7@ls/false) ((lambda (k43e5@t) ((lambda (k43e7@ls/false) (if (and k43e7@ls/false (apply (lambda (k43e9@p? k43ea@n) (and (eq? (k2fb8@syntax->datum k43e9@p?) '<=) (k4324@subversion? k43ea@n))) k43e7@ls/false)) (apply (lambda (k43ed@p? k43ee@n) (lambda (k43f1@x) (<= k43f1@x (k2fb8@syntax->datum k43ee@n)))) k43e7@ls/false) ((lambda (k43f3@t) ((lambda (k43f5@ls/false) (if (and k43f5@ls/false (apply (lambda (k43f7@p? k43f8@n) (and (eq? (k2fb8@syntax->datum k43f7@p?) '>=) (k4324@subversion? k43f8@n))) k43f5@ls/false)) (apply (lambda (k43fb@p? k43fc@n) (lambda (k43ff@x) (>= k43ff@x (k2fb8@syntax->datum k43fc@n)))) k43f5@ls/false) ((lambda (k4401@t) ((lambda (k4403@ls/false) (if k4403@ls/false (apply (lambda () (k2fb2@syntax-violation 'import '"invalid sub-version spec" k4321@spec k43a5@x*)) k4403@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4401@t))) (k2ec9@syntax-dispatch k4401@t '_))) k43f3@t))) (k2ec9@syntax-dispatch k43f3@t '(any any)))) k43e5@t))) (k2ec9@syntax-dispatch k43e5@t '(any any)))) k43d5@t))) (k2ec9@syntax-dispatch k43d5@t '(any any)))) k43c3@t))) (k2ec9@syntax-dispatch k43c3@t '(any . each-any)))) k43b1@t))) (k2ec9@syntax-dispatch k43b1@t '(any . each-any)))) k43a7@t))) (k2ec9@syntax-dispatch k43a7@t 'any))) k43a5@x*))) (set! k4328@version-pred (lambda (k4355@x*) ((lambda (k4357@t) ((lambda (k4359@ls/false) (if k4359@ls/false (apply (lambda () (lambda (k435b@x) '#t)) k4359@ls/false) ((lambda (k435d@t) ((lambda (k435f@ls/false) (if (and k435f@ls/false (apply (lambda (k4361@c k4362@ver*) (eq? (k2fb8@syntax->datum k4361@c) 'and)) k435f@ls/false)) (apply (lambda (k4365@c k4366@ver*) ((lambda (k4369@p*) (lambda (k436b@x) (for-all (lambda (k436d@p) (k436d@p k436b@x)) k4369@p*))) (map k4328@version-pred k4366@ver*))) k435f@ls/false) ((lambda (k436f@t) ((lambda (k4371@ls/false) (if (and k4371@ls/false (apply (lambda (k4373@c k4374@ver*) (eq? (k2fb8@syntax->datum k4373@c) 'or)) k4371@ls/false)) (apply (lambda (k4377@c k4378@ver*) ((lambda (k437b@p*) (lambda (k437d@x) (exists (lambda (k437f@p) (k437f@p k437d@x)) k437b@p*))) (map k4328@version-pred k4378@ver*))) k4371@ls/false) ((lambda (k4381@t) ((lambda (k4383@ls/false) (if (and k4383@ls/false (apply (lambda (k4385@c k4386@ver) (eq? (k2fb8@syntax->datum k4385@c) 'not)) k4383@ls/false)) (apply (lambda (k4389@c k438a@ver) ((lambda (k438d@p) (lambda (k438f@x) (not (k438d@p k438f@x)))) (k4328@version-pred k438a@ver))) k4383@ls/false) ((lambda (k4391@t) ((lambda (k4393@ls/false) (if k4393@ls/false (apply (lambda (k4395@sub*) ((lambda (k4397@p*) (lambda (k4399@x) ((letrec ((k439b@f (lambda (k439d@p* k439e@x) (if (null? k439d@p*) '#t (if (null? k439e@x) '#f (and ((car k439d@p*) (car k439e@x)) (k439b@f (cdr k439d@p*) (cdr k439e@x)))))))) k439b@f) k4397@p* k4399@x))) (map k4326@subversion-pred k4395@sub*))) k4393@ls/false) ((lambda (k43a1@t) ((lambda (k43a3@ls/false) (if k43a3@ls/false (apply (lambda () (k2fb2@syntax-violation 'import '"invalid version spec" k4321@spec k4355@x*)) k43a3@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k43a1@t))) (k2ec9@syntax-dispatch k43a1@t '_))) k4391@t))) (k2ec9@syntax-dispatch k4391@t 'each-any))) k4381@t))) (k2ec9@syntax-dispatch k4381@t '(any any)))) k436f@t))) (k2ec9@syntax-dispatch k436f@t '(any . each-any)))) k435d@t))) (k2ec9@syntax-dispatch k435d@t '(any . each-any)))) k4357@t))) (k2ec9@syntax-dispatch k4357@t '()))) k4355@x*))) ((letrec ((k4329@f (lambda (k432b@x) ((lambda (k432d@t) ((lambda (k432f@ls/false) (if k432f@ls/false (apply (lambda (k4331@version-spec*) (values '() (k4328@version-pred k4331@version-spec*))) k432f@ls/false) ((lambda (k4333@t) ((lambda (k4335@ls/false) (if (and k4335@ls/false (apply (lambda (k4337@x k4338@x*) (k4256@idsyn? k4337@x)) k4335@ls/false)) (apply (lambda (k433b@x k433c@x*) (call-with-values (lambda () (k4329@f k433c@x*)) (lambda (k4343@k4340 k4344@k4342) ((lambda (k4347@pred k4348@name) (values (cons (k2fb8@syntax->datum k433b@x) k4348@name) k4347@pred)) k4344@k4342 k4343@k4340)))) k4335@ls/false) ((lambda (k434b@t) ((lambda (k434d@ls/false) (if k434d@ls/false (apply (lambda () (values '() (lambda (k434f@x) '#t))) k434d@ls/false) ((lambda (k4351@t) ((lambda (k4353@ls/false) (if k4353@ls/false (apply (lambda () (k2fb2@syntax-violation '#f '"invalid import spec" k4321@spec)) k4353@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4351@t))) (k2ec9@syntax-dispatch k4351@t '_))) k434b@t))) (k2ec9@syntax-dispatch k434b@t '()))) k4333@t))) (k2ec9@syntax-dispatch k4333@t '(any . any)))) k432d@t))) (k2ec9@syntax-dispatch k432d@t '(each-any)))) k432b@x)))) k4329@f) k4321@spec))) '#f '#f '#f))) (set! k4266@import-library (lambda (k4311@spec*) (call-with-values (lambda () (k4264@parse-library-name k4311@spec*)) (lambda (k4317@k4314 k4318@k4316) ((lambda (k431b@pred k431c@name) (begin (if (null? k431c@name) (k2fb2@syntax-violation 'import '"empty library name" k4311@spec*) (void)) ((lambda (k431f@lib) (begin (if (not k431f@lib) (k2fb2@syntax-violation 'import '"cannot find library with required name" k431c@name) (void)) (if (not (k431b@pred (k2ab3@k2925@library-version k431f@lib))) (k2fb2@syntax-violation 'import '"library does not satisfy version specification" k4311@spec* k431f@lib) (void)) ((k2f38@imp-collector) k431f@lib) (k2ab7@k292d@library-subst k431f@lib))) (k2adb@k2975@find-library-by-name k431c@name)))) k4318@k4316 k4317@k4314))))) (set! k4268@get-import (lambda (k4283@spec) ((lambda (k4285@t) ((lambda (k4287@ls/false) (if (and k4287@ls/false (apply (lambda (k4289@x k428a@x*) (not (memq (k2fb8@syntax->datum k4289@x) '(for rename except only prefix library)))) k4287@ls/false)) (apply (lambda (k428d@x k428e@x*) (k4266@import-library (cons k428d@x k428e@x*))) k4287@ls/false) ((lambda (k4291@t) ((lambda (k4293@ls/false) (if (and k4293@ls/false (apply (lambda (k4295@rename k4296@isp k4297@old* k4298@new*) (and (eq? (k2fb8@syntax->datum k4295@rename) 'rename) (for-all k4256@idsyn? k4297@old*) (for-all k4256@idsyn? k4298@new*))) k4293@ls/false)) (apply (lambda (k429d@rename k429e@isp k429f@old* k42a0@new*) ((lambda (k42a5@subst k42a6@old* k42a7@new*) ((lambda (k42ab@old-label*) ((lambda (k42ad@subst) (k425a@merge-substs (map cons k42a7@new* k42ab@old-label*) k42ad@subst)) (k4260@rem* k42a6@old* k42a5@subst))) (k425e@find* k42a6@old* k42a5@subst))) (k4268@get-import k429e@isp) (map k2fb8@syntax->datum k429f@old*) (map k2fb8@syntax->datum k42a0@new*))) k4293@ls/false) ((lambda (k42af@t) ((lambda (k42b1@ls/false) (if (and k42b1@ls/false (apply (lambda (k42b3@except k42b4@isp k42b5@sym*) (and (eq? (k2fb8@syntax->datum k42b3@except) 'except) (for-all k4256@idsyn? k42b5@sym*))) k42b1@ls/false)) (apply (lambda (k42b9@except k42ba@isp k42bb@sym*) ((lambda (k42bf@subst) (k4260@rem* (map k2fb8@syntax->datum k42bb@sym*) k42bf@subst)) (k4268@get-import k42ba@isp))) k42b1@ls/false) ((lambda (k42c1@t) ((lambda (k42c3@ls/false) (if (and k42c3@ls/false (apply (lambda (k42c5@only k42c6@isp k42c7@sym*) (and (eq? (k2fb8@syntax->datum k42c5@only) 'only) (for-all k4256@idsyn? k42c7@sym*))) k42c3@ls/false)) (apply (lambda (k42cb@only k42cc@isp k42cd@sym*) ((lambda (k42d1@subst k42d2@sym*) ((lambda (k42d5@sym*) ((lambda (k42d7@lab*) (map cons k42d5@sym* k42d7@lab*)) (k425e@find* k42d5@sym* k42d1@subst))) (k4262@remove-dups k42d2@sym*))) (k4268@get-import k42cc@isp) (map k2fb8@syntax->datum k42cd@sym*))) k42c3@ls/false) ((lambda (k42d9@t) ((lambda (k42db@ls/false) (if (and k42db@ls/false (apply (lambda (k42dd@prefix k42de@isp k42df@p) (and (eq? (k2fb8@syntax->datum k42dd@prefix) 'prefix) (k4256@idsyn? k42df@p))) k42db@ls/false)) (apply (lambda (k42e3@prefix k42e4@isp k42e5@p) ((lambda (k42e9@subst k42ea@prefix) (map (lambda (k42ed@x) (cons (string->symbol (string-append k42ea@prefix (symbol->string (car k42ed@x)))) (cdr k42ed@x))) k42e9@subst)) (k4268@get-import k42e4@isp) (symbol->string (k2fb8@syntax->datum k42e5@p)))) k42db@ls/false) ((lambda (k42ef@t) ((lambda (k42f1@ls/false) (if (and k42f1@ls/false (apply (lambda (k42f3@library k42f4@spec*) (eq? (k2fb8@syntax->datum k42f3@library) 'library)) k42f1@ls/false)) (apply (lambda (k42f7@library k42f8@spec*) (k4266@import-library k42f8@spec*)) k42f1@ls/false) ((lambda (k42fb@t) ((lambda (k42fd@ls/false) (if (and k42fd@ls/false (apply (lambda (k42ff@for k4300@isp k4301@rest) (eq? (k2fb8@syntax->datum k42ff@for) 'for)) k42fd@ls/false)) (apply (lambda (k4305@for k4306@isp k4307@rest) (k4268@get-import k4306@isp)) k42fd@ls/false) ((lambda (k430b@t) ((lambda (k430d@ls/false) (if k430d@ls/false (apply (lambda (k430f@spec) (k2fb2@syntax-violation 'import '"invalid import spec" k430f@spec)) k430d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k430b@t))) (k2ec9@syntax-dispatch k430b@t 'any))) k42fb@t))) (k2ec9@syntax-dispatch k42fb@t '(any any . any)))) k42ef@t))) (k2ec9@syntax-dispatch k42ef@t '(any each-any)))) k42d9@t))) (k2ec9@syntax-dispatch k42d9@t '(any any any)))) k42c1@t))) (k2ec9@syntax-dispatch k42c1@t '(any any . each-any)))) k42af@t))) (k2ec9@syntax-dispatch k42af@t '(any any . each-any)))) k4291@t))) (k2ec9@syntax-dispatch k4291@t '(any any . #(each (any any)))))) k4285@t))) (k2ec9@syntax-dispatch k4285@t '(any . each-any)))) k4283@spec))) (set! k426a@add-imports! (lambda (k4273@imp k4274@h) ((lambda (k4277@subst) (for-each (lambda (k4279@x) ((lambda (k427b@name k427c@label) ((lambda (k427f@t) (if k427f@t ((lambda (k4281@l) (if (not (eq? k4281@l k427c@label)) (k4258@dup-error k427b@name) (void))) k427f@t) (hashtable-set! k4274@h k427b@name k427c@label))) (hashtable-ref k4274@h k427b@name '#f))) (car k4279@x) (cdr k4279@x))) k4277@subst)) (k4268@get-import k4273@imp)))) (lambda (k426b@imp*) ((letrec ((k426d@f (lambda (k426f@imp* k4270@h) (if (null? k426f@imp*) (hashtable-entries k4270@h) (begin (k426a@add-imports! (car k426f@imp*) k4270@h) (k426d@f (cdr k426f@imp*) k4270@h)))))) k426d@f) k426b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! k2f30@make-top-rib (lambda (k4461@names k4462@labels) ((lambda (k4465@rib) (begin (vector-for-each (lambda (k4467@name k4468@label) (begin (if (not (symbol? k4467@name)) (error 'make-top-rib '"BUG: not a symbol" k4467@name) (void)) (k2c71@extend-rib/nc! k4465@rib (k2c88@make-stx k4467@name k2c3a@top-mark* '() '()) k4468@label))) k4461@names k4462@labels) k4465@rib)) (k2c6d@make-empty-rib)))) (set! k2f32@make-collector (lambda () ((lambda (k446b@ls) (lambda k446f ((lambda (k4470) (if (= k4470 '0) (apply (lambda () k446b@ls) k446f) (if (= k4470 '1) (apply (lambda (k446d@x) (set! k446b@ls (k2c33@set-cons k446d@x k446b@ls))) k446f) (error 'apply '"invalid arg count")))) (length k446f)))) '()))) (set! k2f34@inv-collector (k2868@k2792@make-parameter (lambda k4471@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (k4473@x) (begin (if (not (procedure? k4473@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" k4473@x) (void)) k4473@x)))) (set! k2f36@vis-collector (k2868@k2792@make-parameter (lambda k4475@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (k4477@x) (begin (if (not (procedure? k4477@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" k4477@x) (void)) k4477@x)))) (set! k2f38@imp-collector (k2868@k2792@make-parameter (lambda k4479@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (k447b@x) (begin (if (not (procedure? k447b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" k447b@x) (void)) k447b@x)))) (set! k2f3a@chi-library-internal (lambda (k447d@e* k447e@rib k447f@top?) (call-with-values (lambda () (k2f24@chi-body* k447d@e* '() '() '() '() '() '() '() k447e@rib k447f@top?)) (lambda (k4493@k4484 k4494@k4486 k4495@k4488 k4496@k448a k4497@k448c k4498@k448e k4499@k4490 k449a@k4492) ((lambda (k44a3@exp* k44a4@_kwd* k44a5@mod** k44a6@rhs* k44a7@lex* k44a8@mr k44a9@r k44aa@e*) (values (append (apply append (reverse k44a5@mod**)) k44aa@e*) k44a9@r k44a8@mr (reverse k44a7@lex*) (reverse k44a6@rhs*) k44a3@exp*)) k449a@k4492 k4499@k4490 k4498@k448e k4497@k448c k4496@k448a k4495@k4488 k4494@k4486 k4493@k4484))))) (set! k2f3c@chi-interaction-expr (lambda (k44b3@e k44b4@rib k44b5@r) (call-with-values (lambda () (k2f24@chi-body* (list k44b3@e) k44b5@r k44b5@r '() '() '() '() '() k44b4@rib '#t)) (lambda (k44c9@k44ba k44ca@k44bc k44cb@k44be k44cc@k44c0 k44cd@k44c2 k44ce@k44c4 k44cf@k44c6 k44d0@k44c8) ((lambda (k44d9@_exp* k44da@_kwd* k44db@mod** k44dc@rhs* k44dd@lex* k44de@mr k44df@r k44e0@e*) ((lambda (k44e9@e*) ((lambda (k44eb@e) (values k44eb@e k44df@r)) (if (null? k44e9@e*) (k2c1e@k2b8e@build-void) (if (null? (cdr k44e9@e*)) (car k44e9@e*) (k2c1d@k2b8c@build-sequence '#f k44e9@e*))))) (k2ef9@expand-interaction-rhs*/init* (reverse k44dd@lex*) (reverse k44dc@rhs*) (append (apply append (reverse k44db@mod**)) k44e0@e*) k44df@r k44de@mr))) k44d0@k44c8 k44cf@k44c6 k44ce@k44c4 k44cd@k44c2 k44cc@k44c0 k44cb@k44be k44ca@k44bc k44c9@k44ba))))) (set! k2f3e@library-body-expander (lambda (k44ed@name k44ee@main-exp* k44ef@imp* k44f0@b* k44f1@top?) ((lambda (k44f8@itc) (begin (set! k44f8@itc (k2f32@make-collector)) ((lambda (k4501@k44fa k4502@k44fc k4503@k44fe k4504@k4500) ((lambda (k4509@swap) (dynamic-wind k4509@swap (lambda () (call-with-values (lambda () (k2f2e@parse-import-spec* k44ef@imp*)) (lambda (k450f@k450c k4510@k450e) ((lambda (k4513@subst-labels k4514@subst-names) ((lambda (k4517@rib) ((lambda (k451a@wrap) (begin (set! k451a@wrap (lambda (k4595@x) (k2c88@make-stx k4595@x k2c3a@top-mark* (list k4517@rib) '()))) ((lambda (k451b@b* k451c@main-exp* k451d@rtc k451e@vtc) ((lambda (k452b@k4524 k452c@k4526 k452d@k4528 k452e@k452a) ((lambda (k4533@swap) (dynamic-wind k4533@swap (lambda () (call-with-values (lambda () (k2f3a@chi-library-internal k451b@b* k4517@rib k44f1@top?)) (lambda (k4541@k4536 k4542@k4538 k4543@k453a k4544@k453c k4545@k453e k4546@k4540) ((lambda (k454d@internal-exp* k454e@rhs* k454f@lex* k4550@mr k4551@r k4552@init*) (call-with-values (lambda () (k2f28@parse-exports (append k451c@main-exp* k454d@internal-exp*))) (lambda (k455d@k455a k455e@k455c) ((lambda (k4561@exp-id* k4562@exp-name*) (begin (k2c75@seal-rib! k4517@rib) ((lambda (k4565@init*) ((lambda (k4567@rhs*) ((lambda () (begin (k2c77@unseal-rib! k4517@rib) ((lambda (k4569@loc* k456a@export-subst) ((lambda (k456e@errstr) (begin (set! k456e@errstr '"attempt to export mutated variable") (call-with-values (lambda () (k2f9e@make-export-env/macros k454f@lex* k4569@loc* k4551@r)) (lambda (k4575@k4570 k4576@k4572 k4577@k4574) ((lambda (k457b@macro* k457c@global* k457d@export-env) (begin (for-each (lambda (k4581@s) ((lambda (k4583@name k4584@label) ((lambda (k4587@p) (if k4587@p ((lambda (k4589@b) ((lambda (k458b@type) (if (eq? k458b@type 'mutable) (k2fb2@syntax-violation 'export k456e@errstr k4583@name) (void))) (car k4589@b))) (cdr k4587@p)) (void))) (assq k4584@label k457d@export-env))) (car k4581@s) (cdr k4581@s))) k456a@export-subst) ((lambda (k458d@invoke-body k458e@invoke-definitions) (values (k44f8@itc) (k451d@rtc) (k451e@vtc) (k2c1d@k2b8c@build-sequence '#f (append k458e@invoke-definitions (list k458d@invoke-body))) k457b@macro* k456a@export-subst k457d@export-env)) (k2c20@k2b92@build-letrec* '#f k454f@lex* k4567@rhs* (k2f9a@build-exports k457c@global* k4565@init*)) (map k2c19@k2ae9@build-global-define (map cdr k457c@global*))))) k4577@k4574 k4576@k4572 k4575@k4570))))) '#f)) (map k2c40@gen-global k454f@lex*) (k2f9c@make-export-subst k4562@exp-name* k4561@exp-id*)))))) (k2efb@chi-rhs* k454e@rhs* k4551@r k4550@mr))) (k2ee7@chi-expr* k4552@init* k4551@r k4550@mr)))) k455e@k455c k455d@k455a)))) k4546@k4540 k4545@k453e k4544@k453c k4543@k453a k4542@k4538 k4541@k4536)))) k4533@swap)) (lambda () (begin ((lambda (k4591@t) (begin (k452b@k4524 k452d@k4528) (set! k452d@k4528 k4591@t))) (k452b@k4524)) ((lambda (k4593@t) (begin (k452c@k4526 k452e@k452a) (set! k452e@k452a k4593@t))) (k452c@k4526)))))) k2f34@inv-collector k2f36@vis-collector k451d@rtc k451e@vtc)) (map k451a@wrap k44f0@b*) (map k451a@wrap k44ee@main-exp*) (k2f32@make-collector) (k2f32@make-collector)))) '#f)) (k2f30@make-top-rib k4514@subst-names k4513@subst-labels))) k4510@k450e k450f@k450c)))) k4509@swap)) (lambda () (begin ((lambda (k4597@t) (begin (k4501@k44fa k4503@k44fe) (set! k4503@k44fe k4597@t))) (k4501@k44fa)) ((lambda (k4599@t) (begin (k4502@k44fc k4504@k4500) (set! k4504@k4500 k4599@t))) (k4502@k44fc)))))) k2f38@imp-collector k2fc0@top-level-context k44f8@itc '#f))) '#f))) (set! k2f40@core-library-expander (lambda (k459b@e k459c@verify-name) (call-with-values (lambda () (k2f2c@parse-library k459b@e)) (lambda (k45a7@k45a0 k45a8@k45a2 k45a9@k45a4 k45aa@k45a6) ((lambda (k45af@b* k45b0@imp* k45b1@exp* k45b2@name*) (call-with-values (lambda () (k2f2a@parse-library-name k45b2@name*)) (lambda (k45bb@k45b8 k45bc@k45ba) ((lambda (k45bf@ver k45c0@name) (begin (k459c@verify-name k45c0@name) (call-with-values (lambda () (k2f3e@library-body-expander k45c0@name k45b1@exp* k45b0@imp* k45af@b* '#f)) (lambda (k45d1@k45c4 k45d2@k45c6 k45d3@k45c8 k45d4@k45ca k45d5@k45cc k45d6@k45ce k45d7@k45d0) ((lambda (k45df@export-env k45e0@export-subst k45e1@visit-code k45e2@invoke-code k45e3@visit-req* k45e4@invoke-req* k45e5@imp*) (values k45c0@name k45bf@ver k45e5@imp* k45e4@invoke-req* k45e3@visit-req* k45e2@invoke-code k45e1@visit-code k45e0@export-subst k45df@export-env)) k45d7@k45d0 k45d6@k45ce k45d5@k45cc k45d4@k45ca k45d3@k45c8 k45d2@k45c6 k45d1@k45c4))))) k45bc@k45ba k45bb@k45b8)))) k45aa@k45a6 k45a9@k45a4 k45a8@k45a2 k45a7@k45a0))))) (set! k2f42@parse-top-level-program (lambda (k45ed@e*) ((lambda (k45ef@t) ((lambda (k45f1@ls/false) (if (and k45f1@ls/false (apply (lambda (k45f3@import k45f4@imp* k45f5@b*) (eq? (k2fb8@syntax->datum k45f3@import) 'import)) k45f1@ls/false)) (apply (lambda (k45f9@import k45fa@imp* k45fb@b*) (values k45fa@imp* k45fb@b*)) k45f1@ls/false) ((lambda (k45ff@t) ((lambda (k4601@ls/false) (if (and k4601@ls/false (apply (lambda (k4603@import k4604@x k4605@y) (eq? (k2fb8@syntax->datum k4603@import) 'import)) k4601@ls/false)) (apply (lambda (k4609@import k460a@x k460b@y) (k2fb2@syntax-violation 'expander '"invalid syntax of top-level program" (k2cb8@syntax-car k45ed@e*))) k4601@ls/false) ((lambda (k460f@t) ((lambda (k4611@ls/false) (if k4611@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) k4611@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k460f@t))) (k2ec9@syntax-dispatch k460f@t '_))) k45ff@t))) (k2ec9@syntax-dispatch k45ff@t '((any . any) . any)))) k45ef@t))) (k2ec9@syntax-dispatch k45ef@t '((any . each-any) . each-any)))) k45ed@e*))) (set! k2f44@top-level-expander (lambda (k4613@e*) (call-with-values (lambda () (k2f42@parse-top-level-program k4613@e*)) (lambda (k4619@k4616 k461a@k4618) ((lambda (k461d@b* k461e@imp*) (call-with-values (lambda () (k2f3e@library-body-expander '() '() k461e@imp* k461d@b* '#t)) (lambda (k462f@k4622 k4630@k4624 k4631@k4626 k4632@k4628 k4633@k462a k4634@k462c k4635@k462e) ((lambda (k463d@export-env k463e@export-subst k463f@visit-code k4640@invoke-code k4641@visit-req* k4642@invoke-req* k4643@imp*) (values k4642@invoke-req* k4640@invoke-code)) k4635@k462e k4634@k462c k4633@k462a k4632@k4628 k4631@k4626 k4630@k4624 k462f@k4622)))) k461a@k4618 k4619@k4616))))) (set! k2f4a@k2f45 (make-record-type-descriptor 'env '#f 'k2f48 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! k2f4c@k2f47 '#f) (set! k2f4e@k2f46 (make-record-constructor-descriptor k2f4a@k2f45 '#f k2f4c@k2f47)) (set! k2f51@env? (record-predicate k2f4a@k2f45)) (set! k2f53@make-env (record-constructor k2f4e@k2f46)) (set! k2f55@env-names (record-accessor k2f4a@k2f45 '0)) (set! k2f57@env-labels (record-accessor k2f4a@k2f45 '1)) (set! k2f59@env-itc (record-accessor k2f4a@k2f45 '2)) (set! k2f5b@set-env-names! (record-mutator k2f4a@k2f45 '0)) (set! k2f5d@set-env-labels! (record-mutator k2f4a@k2f45 '1)) (set! k2f5f@set-env-itc! (record-mutator k2f4a@k2f45 '2)) (set! k2f61@rp (k2865@k278c@make-record-printer 'env (lambda (k464b@x k464c@p k464d@wr) (display '"#<environment>" k464c@p)))) (set! k2f67@k2f62 (make-record-type-descriptor 'interaction-env '#f 'k2f65 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! k2f69@k2f64 '#f) (set! k2f6b@k2f63 (make-record-constructor-descriptor k2f67@k2f62 '#f k2f69@k2f64)) (set! k2f6e@interaction-env? (record-predicate k2f67@k2f62)) (set! k2f70@make-interaction-env (record-constructor k2f6b@k2f63)) (set! k2f72@interaction-env-rib (record-accessor k2f67@k2f62 '0)) (set! k2f74@interaction-env-r (record-accessor k2f67@k2f62 '1)) (set! k2f76@interaction-env-locs (record-accessor k2f67@k2f62 '2)) (set! k2f78@set-interaction-env-rib! (record-mutator k2f67@k2f62 '0)) (set! k2f7a@set-interaction-env-r! (record-mutator k2f67@k2f62 '1)) (set! k2f7c@set-interaction-env-locs! (record-mutator k2f67@k2f62 '2)) (set! k2f7e@rp (k2865@k278c@make-record-printer 'interaction-env (lambda (k4651@x k4652@p k4653@wr) (display '"#<environment>" k4652@p)))) (set! k2f80@interaction-environment-symbols (lambda () (k2f88@environment-symbols (k2fbe@interaction-environment)))) (set! k2f82@environment-bindings (lambda (k4657@e) (vector->list (vector-map (lambda (k4659@name k465a@label) (k2f84@parse-binding (cons k4659@name (k2ae1@k2981@imported-label->binding k465a@label)))) (k2f55@env-names k4657@e) (k2f57@env-labels k4657@e))))) (set! k2f84@parse-binding (lambda (k465d@b) (cons (car k465d@b) ((lambda (k465f@t) (if (memv k465f@t '(core-prim global)) 'procedure (if (memv k465f@t '(core-macro macro global-macro)) 'syntax (if (memv k465f@t '($core-rtd)) 'record (if (eq? (car k465d@b) (cadr k465d@b)) 'syntax 'unknown))))) (cadr k465d@b))))) (set! k2f86@environment? (lambda (k4661@x) (or (k2f51@env? k4661@x) (k2f6e@interaction-env? k4661@x)))) (set! k2f88@environment-symbols (lambda (k4663@x) (if (k2f51@env? k4663@x) (vector->list (k2f55@env-names k4663@x)) (if (k2f6e@interaction-env? k4663@x) (map values (k2c59@rib-sym* (k2f72@interaction-env-rib k4663@x))) (assertion-violation 'environment-symbols '"not an environment" k4663@x))))) (set! k2f8a@environment (lambda k4665@imp* ((lambda (k4667@itc) ((lambda (k466d@k466a k466e@k466c) ((lambda (k4671@swap) (dynamic-wind k4671@swap (lambda () (call-with-values (lambda () (k2f2e@parse-import-spec* k4665@imp*)) (lambda (k4677@k4674 k4678@k4676) ((lambda (k467b@subst-labels k467c@subst-names) (k2f53@make-env k467c@subst-names k467b@subst-labels k4667@itc)) k4678@k4676 k4677@k4674)))) k4671@swap)) (lambda () ((lambda (k467f@t) (begin (k466d@k466a k466e@k466c) (set! k466e@k466c k467f@t))) (k466d@k466a))))) k2f38@imp-collector k4667@itc)) (k2f32@make-collector)))) (set! k2f8c@null-environment (lambda (k4681@n) (begin (if (not (eqv? k4681@n '5)) (assertion-violation 'null-environment '"not 5" k4681@n) (void)) (k2f8a@environment '(psyntax null-environment-5))))) (set! k2f8e@scheme-report-environment (lambda (k4683@n) (begin (if (not (eqv? k4683@n '5)) (assertion-violation 'scheme-report-environment '"not 5" k4683@n) (void)) (k2f8a@environment '(psyntax scheme-report-environment-5))))) (set! k2f90@expand (lambda (k4685@x k4686@env) (if (k2f51@env? k4686@env) ((lambda (k4689@rib) ((lambda (k468b@x k468c@itc k468d@rtc k468e@vtc) ((lambda (k4693@x) (begin (k2c75@seal-rib! k4689@rib) (values k4693@x (k468d@rtc)))) ((lambda (k46a5@k4696 k46a6@k4698 k46a7@k469a k46a8@k469c k46a9@k469e k46aa@k46a0 k46ab@k46a2 k46ac@k46a4) ((lambda (k46b5@swap) (dynamic-wind k46b5@swap (lambda () (k2eeb@chi-expr k468b@x '() '())) k46b5@swap)) (lambda () (begin ((lambda (k46b7@t) (begin (k46a5@k4696 k46a9@k469e) (set! k46a9@k469e k46b7@t))) (k46a5@k4696)) ((lambda (k46b9@t) (begin (k46a6@k4698 k46aa@k46a0) (set! k46aa@k46a0 k46b9@t))) (k46a6@k4698)) ((lambda (k46bb@t) (begin (k46a7@k469a k46ab@k46a2) (set! k46ab@k46a2 k46bb@t))) (k46a7@k469a)) ((lambda (k46bd@t) (begin (k46a8@k469c k46ac@k46a4) (set! k46ac@k46a4 k46bd@t))) (k46a8@k469c)))))) k2fc0@top-level-context k2f34@inv-collector k2f36@vis-collector k2f38@imp-collector '#f k468d@rtc k468e@vtc k468c@itc))) (k2c88@make-stx k4685@x k2c3a@top-mark* (list k4689@rib) '()) (k2f59@env-itc k4686@env) (k2f32@make-collector) (k2f32@make-collector))) (k2f30@make-top-rib (k2f55@env-names k4686@env) (k2f57@env-labels k4686@env))) (if (k2f6e@interaction-env? k4686@env) ((lambda (k46bf@rib k46c0@r k46c1@rtc) ((lambda (k46c5@x) (call-with-values (lambda () ((lambda (k46db@k46cc k46dc@k46ce k46dd@k46d0 k46de@k46d2 k46df@k46d4 k46e0@k46d6 k46e1@k46d8 k46e2@k46da) ((lambda (k46eb@swap) (dynamic-wind k46eb@swap (lambda () (k2f3c@chi-interaction-expr k46c5@x k46bf@rib k46c0@r)) k46eb@swap)) (lambda () (begin ((lambda (k46ed@t) (begin (k46db@k46cc k46df@k46d4) (set! k46df@k46d4 k46ed@t))) (k46db@k46cc)) ((lambda (k46ef@t) (begin (k46dc@k46ce k46e0@k46d6) (set! k46e0@k46d6 k46ef@t))) (k46dc@k46ce)) ((lambda (k46f1@t) (begin (k46dd@k46d0 k46e1@k46d8) (set! k46e1@k46d8 k46f1@t))) (k46dd@k46d0)) ((lambda (k46f3@t) (begin (k46de@k46d2 k46e2@k46da) (set! k46e2@k46da k46f3@t))) (k46de@k46d2)))))) k2fc0@top-level-context k2f34@inv-collector k2f36@vis-collector k2f38@imp-collector k4686@env k46c1@rtc (k2f32@make-collector) (k2f32@make-collector))) (lambda (k46f5@k46c8 k46f6@k46ca) ((lambda (k46f9@r^ k46fa@e) (begin (k2f7a@set-interaction-env-r! k4686@env k46f9@r^) (values k46fa@e (k46c1@rtc)))) k46f6@k46ca k46f5@k46c8)))) (k2c88@make-stx k4685@x k2c3a@top-mark* (list k46bf@rib) '()))) (k2f72@interaction-env-rib k4686@env) (k2f74@interaction-env-r k4686@env) (k2f32@make-collector)) (assertion-violation 'expand '"not an environment" k4686@env))))) (set! k2f92@eval (lambda (k46fd@x k46fe@env) (begin (if (not (k2f86@environment? k46fe@env)) (error 'eval '"not an environment" k46fe@env) (void)) (call-with-values (lambda () (k2f90@expand k46fd@x k46fe@env)) (lambda (k4705@k4702 k4706@k4704) ((lambda (k4709@invoke-req* k470a@x) (begin (for-each k2ae2@k2983@invoke-library k4709@invoke-req*) (eval-core (k28bc@k2874@expanded->core k470a@x)))) k4706@k4704 k4705@k4702)))))) (set! k2f94@library-expander (lambda k477b ((lambda (k477c) (if (= k477c '3) (apply (lambda (k470d@x k470e@filename k470f@verify-name) ((lambda (k4714@build-visit-code k4716@visit!) (begin (set! k4714@build-visit-code (lambda (k4769@macro*) (if (null? k4769@macro*) (k2c1e@k2b8e@build-void) (k2c1d@k2b8c@build-sequence '#f (map (lambda (k476b@x) ((lambda (k476d@loc k476e@src) (list 'set! k476d@loc k476e@src)) (car k476b@x) (cddr k476b@x))) k4769@macro*))))) (set! k4716@visit! (lambda (k4761@macro*) (for-each (lambda (k4763@x) ((lambda (k4765@loc k4766@proc) (set-symbol-value! k4765@loc k4766@proc)) (car k4763@x) (cadr k4763@x))) k4761@macro*))) (call-with-values (lambda () (k2f40@core-library-expander k470d@x k470f@verify-name)) (lambda (k4729@k4718 k472a@k471a k472b@k471c k472c@k471e k472d@k4720 k472e@k4722 k472f@k4724 k4730@k4726 k4731@k4728) ((lambda (k473b@export-env k473c@export-subst k473d@macro* k473e@invoke-code k473f@vis* k4740@inv* k4741@imp* k4742@ver k4743@name) ((lambda (k474d@id k474e@name k474f@ver k4750@imp* k4751@vis* k4752@inv* k4753@visit-proc k4754@invoke-proc k4755@visit-code k4756@invoke-code) (begin (k2ae0@k297f@install-library k474d@id k474e@name k474f@ver k4750@imp* k4751@vis* k4752@inv* k473c@export-subst k473b@export-env k4753@visit-proc k4754@invoke-proc k4755@visit-code k4756@invoke-code '#t k470e@filename) (values k474d@id k474e@name k474f@ver k4750@imp* k4751@vis* k4752@inv* k4756@invoke-code k4755@visit-code k473c@export-subst k473b@export-env))) (gensym) k4743@name k4742@ver (map k2ae6@k298b@library-spec k4741@imp*) (map k2ae6@k298b@library-spec k473f@vis*) (map k2ae6@k298b@library-spec k4740@inv*) (lambda () (k4716@visit! k473d@macro*)) (lambda () (eval-core (k28bc@k2874@expanded->core k473e@invoke-code))) (k4714@build-visit-code k473d@macro*) k473e@invoke-code)) k4731@k4728 k4730@k4726 k472f@k4724 k472e@k4722 k472d@k4720 k472c@k471e k472b@k471c k472a@k471a k4729@k4718))))) '#f '#f)) k477b) (if (= k477c '2) (apply (lambda (k4771@x k4772@filename) (k2f94@library-expander k4771@x k4772@filename (lambda (k4775@x) (values)))) k477b) (if (= k477c '1) (apply (lambda (k4777@x) (k2f94@library-expander k4777@x '#f (lambda (k4779@x) (values)))) k477b) (error 'apply '"invalid arg count"))))) (length k477b)))) (set! k2f96@boot-library-expand (lambda (k477d@x) (call-with-values (lambda () (k2f94@library-expander k477d@x)) (lambda (k4793@k4780 k4794@k4782 k4795@k4784 k4796@k4786 k4797@k4788 k4798@k478a k4799@k478c k479a@k478e k479b@k4790 k479c@k4792) ((lambda (k47a7@export-env k47a8@export-subst k47a9@visit-code k47aa@invoke-code k47ab@inv* k47ac@vis* k47ad@imp* k47ae@ver k47af@name k47b0@id) (values k47af@name k47aa@invoke-code k47a8@export-subst k47a7@export-env)) k479c@k4792 k479b@k4790 k479a@k478e k4799@k478c k4798@k478a k4797@k4788 k4796@k4786 k4795@k4784 k4794@k4782 k4793@k4780))))) (set! k2f98@rev-map-append (lambda (k47bb@f k47bc@ls k47bd@ac) (if (null? k47bc@ls) k47bd@ac (k2f98@rev-map-append k47bb@f (cdr k47bc@ls) (cons (k47bb@f (car k47bc@ls)) k47bd@ac))))) (set! k2f9a@build-exports (lambda (k47c1@lex*+loc* k47c2@init*) (k2c1d@k2b8c@build-sequence '#f (cons (k2c1e@k2b8e@build-void) (k2f98@rev-map-append (lambda (k47c5@x) (list 'set! (cdr k47c5@x) (car k47c5@x))) k47c1@lex*+loc* k47c2@init*))))) (set! k2f9c@make-export-subst (lambda (k47c7@name* k47c8@id*) (map (lambda (k47cb@name k47cc@id) ((lambda (k47cf@label) (begin (if (not k47cf@label) (k2fb2@syntax-violation '#f '"cannot export unbound identifier" k47cc@id) (void)) (cons k47cb@name k47cf@label))) (k2cd8@id->label k47cc@id))) k47c7@name* k47c8@id*))) (set! k2f9e@make-export-env/macros (lambda (k47d1@lex* k47d2@loc* k47d3@r) ((lambda (k47d8@lookup) (begin (set! k47d8@lookup (lambda (k47f5@x) ((letrec ((k47f7@f (lambda (k47f9@x k47fa@lex* k47fb@loc*) (if (pair? k47fa@lex*) (if (eq? k47f9@x (car k47fa@lex*)) (car k47fb@loc*) (k47f7@f k47f9@x (cdr k47fa@lex*) (cdr k47fb@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) k47f7@f) k47f5@x k47d1@lex* k47d2@loc*))) ((letrec ((k47d9@f (lambda (k47db@r k47dc@env k47dd@global* k47de@macro*) (if (null? k47db@r) (values k47dc@env k47dd@global* k47de@macro*) ((lambda (k47e3@x) ((lambda (k47e5@label k47e6@b) ((lambda (k47e9@t) (if (memv k47e9@t '(lexical)) ((lambda (k47eb@v) ((lambda (k47ed@loc k47ee@type) (k47d9@f (cdr k47db@r) (cons (cons* k47e5@label k47ee@type k47ed@loc) k47dc@env) (cons (cons (k2e55@lexical-var k47eb@v) k47ed@loc) k47dd@global*) k47de@macro*)) (k47d8@lookup (k2e55@lexical-var k47eb@v)) (if (k2e57@lexical-mutable? k47eb@v) 'mutable 'global))) (k2ce2@binding-value k47e6@b)) (if (memv k47e9@t '(local-macro)) ((lambda (k47f1@loc) (k47d9@f (cdr k47db@r) (cons (cons* k47e5@label 'global-macro k47f1@loc) k47dc@env) k47dd@global* (cons (cons k47f1@loc (k2ce2@binding-value k47e6@b)) k47de@macro*))) (gensym)) (if (memv k47e9@t '(local-macro!)) ((lambda (k47f3@loc) (k47d9@f (cdr k47db@r) (cons (cons* k47e5@label 'global-macro! k47f3@loc) k47dc@env) k47dd@global* (cons (cons k47f3@loc (k2ce2@binding-value k47e6@b)) k47de@macro*))) (gensym)) (if (memv k47e9@t '($rtd $module)) (k47d9@f (cdr k47db@r) (cons k47e3@x k47dc@env) k47dd@global* k47de@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (k2ce0@binding-type k47e6@b) (k2ce2@binding-value k47e6@b))))))) (k2ce0@binding-type k47e6@b))) (car k47e3@x) (cdr k47e3@x))) (car k47db@r)))))) k47d9@f) k47d3@r '() '() '()))) '#f))) (set! k2fa0@generate-temporaries (lambda (k47ff@ls) ((lambda (k4801@t) ((lambda (k4803@ls/false) (if k4803@ls/false (apply (lambda (k4805@ls) (map (lambda (k4807@x) (k2c88@make-stx ((lambda (k4809@x) (if (or (symbol? k4809@x) (string? k4809@x)) (gensym k4809@x) (gensym 't))) (k2fb8@syntax->datum k4807@x)) k2c3a@top-mark* '() '())) k4805@ls)) k4803@ls/false) ((lambda (k480b@t) ((lambda (k480d@ls/false) (if k480d@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) k480d@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k480b@t))) (k2ec9@syntax-dispatch k480b@t '_))) k4801@t))) (k2ec9@syntax-dispatch k4801@t 'each-any))) k47ff@ls))) (set! k2fa2@free-identifier=? (lambda (k480f@x k4810@y) (if (k2cbe@id? k480f@x) (if (k2cbe@id? k4810@y) (k2cc6@free-id=? k480f@x k4810@y) (assertion-violation 'free-identifier=? '"not an identifier" k4810@y)) (assertion-violation 'free-identifier=? '"not an identifier" k480f@x)))) (set! k2fa4@bound-identifier=? (lambda (k4813@x k4814@y) (if (k2cbe@id? k4813@x) (if (k2cbe@id? k4814@y) (k2cc4@bound-id=? k4813@x k4814@y) (assertion-violation 'bound-identifier=? '"not an identifier" k4814@y)) (assertion-violation 'bound-identifier=? '"not an identifier" k4813@x)))) (set! k2fa6@make-source-condition (lambda (k4817@x) ((lambda (k4821@k481c k4823@k481e k4825@k481d k4828@k481b k482a@make-source-condition k482c@k4819 k482e@k481a k4830@source-condition? k4832@source-filename k4834@source-character) (begin (set! k4821@k481c (make-record-type-descriptor '&source-information k4c7f@k49c6@&condition-rtd 'k481f '#f '#f '#((immutable file-name) (immutable character)))) (set! k4823@k481e '#f) (set! k4825@k481d (make-record-constructor-descriptor k4821@k481c k4c80@k49c8@&condition-rcd k4823@k481e)) (set! k4828@k481b (record-predicate k4821@k481c)) (set! k482a@make-source-condition (record-constructor k4825@k481d)) (set! k482c@k4819 (record-accessor k4821@k481c '0)) (set! k482e@k481a (record-accessor k4821@k481c '1)) (set! k4830@source-condition? (condition-predicate k4821@k481c)) (set! k4832@source-filename (condition-accessor k4821@k481c k482c@k4819)) (set! k4834@source-character (condition-accessor k4821@k481c k482e@k481a)) (if (pair? k4817@x) (k482a@make-source-condition (car k4817@x) (cdr k4817@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! k2fa8@extract-position-condition (lambda (k4835@x) (k2fa6@make-source-condition (k2faa@expression-position k4835@x)))) (set! k2faa@expression-position (lambda (k4837@x) (and (k2c86@stx? k4837@x) ((lambda (k4839@x) (and (k285d@k277c@annotation? k4839@x) (k285e@k277e@annotation-source k4839@x))) (k2c8a@stx-expr k4837@x))))) (set! k2fac@assertion-error (lambda (k483b@expr k483c@pos) (raise (condition (k4caf@k4a8a@make-assertion-violation) (k4cc1@k4abc@make-who-condition 'assert) (k4c85@k4a1d@make-message-condition '"assertion failed") (k4cb7@k4aa1@make-irritants-condition (list k483b@expr)) (k2fa6@make-source-condition k483c@pos))))) (set! k2fae@syntax-error (lambda (k483f@x . k4841@args) (begin (if (not (for-all string? k4841@args)) (assertion-violation 'syntax-error '"invalid argument" k4841@args) (void)) (raise (condition (k4c85@k4a1d@make-message-condition (if (null? k4841@args) '"invalid syntax" (apply string-append k4841@args))) (k4ce3@k4b18@make-syntax-violation (k2fb8@syntax->datum k483f@x) '#f) (k2fa8@extract-position-condition k483f@x)))))) (set! k2fb0@syntax-violation* (lambda (k4843@who k4844@msg k4845@form k4846@condition-object) (begin (if (not (string? k4844@msg)) (assertion-violation 'syntax-violation '"message is not a string" k4844@msg) (void)) ((lambda (k484b@who) (raise (condition (if k484b@who (k4cc1@k4abc@make-who-condition k484b@who) (condition)) (k4c85@k4a1d@make-message-condition k4844@msg) k4846@condition-object (k2fa8@extract-position-condition k4845@form)))) (if (or (string? k4843@who) (symbol? k4843@who)) k4843@who (if (not k4843@who) ((lambda (k484d@t) ((lambda (k484f@ls/false) (if (and k484f@ls/false (apply (lambda (k4851@id) (k2cbe@id? k4851@id)) k484f@ls/false)) (apply (lambda (k4853@id) (k2fb8@syntax->datum k4853@id)) k484f@ls/false) ((lambda (k4855@t) ((lambda (k4857@ls/false) (if (and k4857@ls/false (apply (lambda (k4859@id k485a@rest) (k2cbe@id? k4859@id)) k4857@ls/false)) (apply (lambda (k485d@id k485e@rest) (k2fb8@syntax->datum k485d@id)) k4857@ls/false) ((lambda (k4861@t) ((lambda (k4863@ls/false) (if k4863@ls/false (apply (lambda () '#f) k4863@ls/false) (k2fb2@syntax-violation '#f '"invalid syntax" k4861@t))) (k2ec9@syntax-dispatch k4861@t '_))) k4855@t))) (k2ec9@syntax-dispatch k4855@t '(any . any)))) k484d@t))) (k2ec9@syntax-dispatch k484d@t 'any))) k4845@form) (assertion-violation 'syntax-violation '"invalid who argument" k4843@who))))))) (set! k2fb2@syntax-violation (lambda k4873 ((lambda (k4874) (if (= k4874 '3) (apply (lambda (k4865@who k4866@msg k4867@form) (k2fb2@syntax-violation k4865@who k4866@msg k4867@form '#f)) k4873) (if (= k4874 '4) (apply (lambda (k486b@who k486c@msg k486d@form k486e@subform) (k2fb0@syntax-violation* k486b@who k486c@msg k486d@form (k4ce3@k4b18@make-syntax-violation (k2fb8@syntax->datum k486d@form) (k2fb8@syntax->datum k486e@subform)))) k4873) (error 'apply '"invalid arg count")))) (length k4873)))) (set! k2fb4@identifier? (lambda (k4875@x) (k2cbe@id? k4875@x))) (set! k2fb6@datum->syntax (lambda (k4877@id k4878@datum) (if (k2cbe@id? k4877@id) (k2c9c@datum->stx k4877@id k4878@datum) (assertion-violation 'datum->syntax '"not an identifier" k4877@id)))) (set! k2fb8@syntax->datum (lambda (k487b@x) (k2cd4@stx->datum k487b@x))) (set! k2fba@compile-r6rs-top-level (lambda (k487d@x*) (call-with-values (lambda () (k2f44@top-level-expander k487d@x*)) (lambda (k4883@k4880 k4884@k4882) ((lambda (k4887@invoke-code k4888@lib*) (lambda () (begin (for-each k2ae2@k2983@invoke-library k4888@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (k28bc@k2874@expanded->core k4887@invoke-code)) (void)) (eval-core (k28bc@k2874@expanded->core k4887@invoke-code))))) k4884@k4882 k4883@k4880))))) (set! k2fbc@pre-compile-r6rs-top-level (lambda (k488b@x*) (call-with-values (lambda () (k2f44@top-level-expander k488b@x*)) (lambda (k4891@k488e k4892@k4890) ((lambda (k4895@invoke-code k4896@lib*) (begin (for-each k2ae2@k2983@invoke-library k4896@lib*) (k2866@k278e@compile-core (k28bc@k2874@expanded->core k4895@invoke-code)))) k4892@k4890 k4891@k488e))))) (set! k2fbe@interaction-environment ((lambda (k4899@the-env) (lambda () (or k4899@the-env ((lambda (k489b@lib k489c@rib) (begin ((lambda (k489f@subst) (begin (k2c63@set-rib-sym*! k489c@rib (map car k489f@subst)) (k2c65@set-rib-mark**! k489c@rib (map (lambda (k48a1@x) k2c3a@top-mark*) k489f@subst)) (k2c67@set-rib-label*! k489c@rib (map cdr k489f@subst)))) (k2ab7@k292d@library-subst k489b@lib)) ((lambda (k48a3@env) (begin (set! k4899@the-env k48a3@env) k48a3@env)) (k2f70@make-interaction-env k489c@rib '() '())))) (k2adb@k2975@find-library-by-name '(mosh interaction)) (k2c6d@make-empty-rib))))) '#f)) (set! k2fc0@top-level-context (k2868@k2792@make-parameter '#f)) (begin (set! k49b1@k2fc0@top-level-context k2fc0@top-level-context) (set! k49b0@k2fbe@interaction-environment k2fbe@interaction-environment) (set! k49af@k2fbc@pre-compile-r6rs-top-level k2fbc@pre-compile-r6rs-top-level) (set! k49ae@k2fba@compile-r6rs-top-level k2fba@compile-r6rs-top-level) (set! k49ad@k2fb8@syntax->datum k2fb8@syntax->datum) (set! k49ac@k2fb6@datum->syntax k2fb6@datum->syntax) (set! k49ab@k2fb4@identifier? k2fb4@identifier?) (set! k49aa@k2fb2@syntax-violation k2fb2@syntax-violation) (set! k49a9@k2fb0@syntax-violation* k2fb0@syntax-violation*) (set! k49a8@k2fae@syntax-error k2fae@syntax-error) (set! k49a7@k2fac@assertion-error k2fac@assertion-error) (set! k49a6@k2faa@expression-position k2faa@expression-position) (set! k49a5@k2fa8@extract-position-condition k2fa8@extract-position-condition) (set! k49a4@k2fa6@make-source-condition k2fa6@make-source-condition) (set! k49a3@k2fa4@bound-identifier=? k2fa4@bound-identifier=?) (set! k49a2@k2fa2@free-identifier=? k2fa2@free-identifier=?) (set! k49a1@k2fa0@generate-temporaries k2fa0@generate-temporaries) (set! k49a0@k2f9e@make-export-env/macros k2f9e@make-export-env/macros) (set! k499f@k2f9c@make-export-subst k2f9c@make-export-subst) (set! k499e@k2f9a@build-exports k2f9a@build-exports) (set! k499d@k2f98@rev-map-append k2f98@rev-map-append) (set! k499c@k2f96@boot-library-expand k2f96@boot-library-expand) (set! k499b@k2f94@library-expander k2f94@library-expander) (set! k499a@k2f92@eval k2f92@eval) (set! k4999@k2f90@expand k2f90@expand) (set! k4998@k2f8e@scheme-report-environment k2f8e@scheme-report-environment) (set! k4997@k2f8c@null-environment k2f8c@null-environment) (set! k4996@k2f8a@environment k2f8a@environment) (set! k4995@k2f88@environment-symbols k2f88@environment-symbols) (set! k4994@k2f86@environment? k2f86@environment?) (set! k4993@k2f84@parse-binding k2f84@parse-binding) (set! k4992@k2f82@environment-bindings k2f82@environment-bindings) (set! k4991@k2f80@interaction-environment-symbols k2f80@interaction-environment-symbols) (set! k4990@k2f7e@rp k2f7e@rp) (set! k498f@k2f7c@set-interaction-env-locs! k2f7c@set-interaction-env-locs!) (set! k498e@k2f7a@set-interaction-env-r! k2f7a@set-interaction-env-r!) (set! k498d@k2f78@set-interaction-env-rib! k2f78@set-interaction-env-rib!) (set! k498c@k2f76@interaction-env-locs k2f76@interaction-env-locs) (set! k498b@k2f74@interaction-env-r k2f74@interaction-env-r) (set! k498a@k2f72@interaction-env-rib k2f72@interaction-env-rib) (set! k4989@k2f70@make-interaction-env k2f70@make-interaction-env) (set! k4988@k2f6e@interaction-env? k2f6e@interaction-env?) (set! k4987@k2f6b@k2f63 k2f6b@k2f63) (set! k4986@k2f69@k2f64 k2f69@k2f64) (set! k4985@k2f67@k2f62 k2f67@k2f62) (set! k4984@k2f61@rp k2f61@rp) (set! k4983@k2f5f@set-env-itc! k2f5f@set-env-itc!) (set! k4982@k2f5d@set-env-labels! k2f5d@set-env-labels!) (set! k4981@k2f5b@set-env-names! k2f5b@set-env-names!) (set! k4980@k2f59@env-itc k2f59@env-itc) (set! k497f@k2f57@env-labels k2f57@env-labels) (set! k497e@k2f55@env-names k2f55@env-names) (set! k497d@k2f53@make-env k2f53@make-env) (set! k497c@k2f51@env? k2f51@env?) (set! k497b@k2f4e@k2f46 k2f4e@k2f46) (set! k497a@k2f4c@k2f47 k2f4c@k2f47) (set! k4979@k2f4a@k2f45 k2f4a@k2f45) (set! k4978@k2f44@top-level-expander k2f44@top-level-expander) (set! k4977@k2f42@parse-top-level-program k2f42@parse-top-level-program) (set! k4976@k2f40@core-library-expander k2f40@core-library-expander) (set! k4975@k2f3e@library-body-expander k2f3e@library-body-expander) (set! k4974@k2f3c@chi-interaction-expr k2f3c@chi-interaction-expr) (set! k4973@k2f3a@chi-library-internal k2f3a@chi-library-internal) (set! k4972@k2f38@imp-collector k2f38@imp-collector) (set! k4971@k2f36@vis-collector k2f36@vis-collector) (set! k4970@k2f34@inv-collector k2f34@inv-collector) (set! k496f@k2f32@make-collector k2f32@make-collector) (set! k496e@k2f30@make-top-rib k2f30@make-top-rib) (set! k496d@k2f2e@parse-import-spec* k2f2e@parse-import-spec*) (set! k496c@k2f2c@parse-library k2f2c@parse-library) (set! k496b@k2f2a@parse-library-name k2f2a@parse-library-name) (set! k496a@k2f28@parse-exports k2f28@parse-exports) (set! k4969@k2f26@expand-transformer k2f26@expand-transformer) (set! k4968@k2f24@chi-body* k2f24@chi-body*) (set! k4967@k2f22@chi-internal-module k2f22@chi-internal-module) (set! k4966@k2f20@module-interface-exp-id* k2f20@module-interface-exp-id*) (set! k4965@k2f1e@set-module-interface-exp-lab-vec! k2f1e@set-module-interface-exp-lab-vec!) (set! k4964@k2f1c@set-module-interface-exp-id-vec! k2f1c@set-module-interface-exp-id-vec!) (set! k4963@k2f1a@set-module-interface-first-mark! k2f1a@set-module-interface-first-mark!) (set! k4962@k2f18@module-interface-exp-lab-vec k2f18@module-interface-exp-lab-vec) (set! k4961@k2f16@module-interface-exp-id-vec k2f16@module-interface-exp-id-vec) (set! k4960@k2f14@module-interface-first-mark k2f14@module-interface-first-mark) (set! k495f@k2f12@make-module-interface k2f12@make-module-interface) (set! k495e@k2f10@module-interface? k2f10@module-interface?) (set! k495d@k2f0d@k2f05 k2f0d@k2f05) (set! k495c@k2f0b@k2f06 k2f0b@k2f06) (set! k495b@k2f09@k2f04 k2f09@k2f04) (set! k495a@k2f03@parse-module k2f03@parse-module) (set! k4959@k2f01@chi-internal k2f01@chi-internal) (set! k4958@k2eff@find-dups k2eff@find-dups) (set! k4957@k2efd@find-bound=? k2efd@find-bound=?) (set! k4956@k2efb@chi-rhs* k2efb@chi-rhs*) (set! k4955@k2ef9@expand-interaction-rhs*/init* k2ef9@expand-interaction-rhs*/init*) (set! k4954@k2ef7@chi-rhs k2ef7@chi-rhs) (set! k4953@k2ef5@chi-defun k2ef5@chi-defun) (set! k4952@k2ef3@chi-lambda-clause* k2ef3@chi-lambda-clause*) (set! k4951@k2ef1@chi-lambda-clause k2ef1@chi-lambda-clause) (set! k4950@k2eef@verify-formals k2eef@verify-formals) (set! k494f@k2eed@chi-set! k2eed@chi-set!) (set! k494e@k2eeb@chi-expr k2eeb@chi-expr) (set! k494d@k2ee9@chi-application k2ee9@chi-application) (set! k494c@k2ee7@chi-expr* k2ee7@chi-expr*) (set! k494b@k2ee5@chi-global-macro k2ee5@chi-global-macro) (set! k494a@k2ee3@chi-local-macro k2ee3@chi-local-macro) (set! k4949@k2ee1@chi-macro k2ee1@chi-macro) (set! k4948@k2edf@do-macro-call k2edf@do-macro-call) (set! k4947@k2edd@local-macro-transformer k2edd@local-macro-transformer) (set! k4946@k2edb@macro-transformer k2edb@macro-transformer) (set! k4945@k2ed9@symbol-macro k2ed9@symbol-macro) (set! k4944@k2ed7@core-macro-transformer k2ed7@core-macro-transformer) (set! k4943@k2ed5@syntax-transformer k2ed5@syntax-transformer) (set! k4942@k2ed3@ellipsis-map k2ed3@ellipsis-map) (set! k4941@k2ed1@syntax-case-transformer k2ed1@syntax-case-transformer) (set! k4940@k2ecf@verify-literals k2ecf@verify-literals) (set! k493f@k2ecd@underscore? k2ecd@underscore?) (set! k493e@k2ecb@ellipsis? k2ecb@ellipsis?) (set! k493d@k2ec9@syntax-dispatch k2ec9@syntax-dispatch) (set! k493c@k2ec7@convert-pattern k2ec7@convert-pattern) (set! k493b@k2ec5@foreign-call-transformer k2ec5@foreign-call-transformer) (set! k493a@k2ec3@parameterize-macro k2ec3@parameterize-macro) (set! k4939@k2ec1@incorrect-usage-macro k2ec1@incorrect-usage-macro) (set! k4938@k2ebf@define-condition-type-macro k2ebf@define-condition-type-macro) (set! k4937@k2ebd@define-record-type-macro k2ebd@define-record-type-macro) (set! k4936@k2ebb@define-struct-macro k2ebb@define-struct-macro) (set! k4935@k2eb9@quasisyntax-macro k2eb9@quasisyntax-macro) (set! k4934@k2eb7@quasiquote-macro k2eb7@quasiquote-macro) (set! k4933@k2eb5@syntax-rules-macro k2eb5@syntax-rules-macro) (set! k4932@k2eb3@include-into-macro k2eb3@include-into-macro) (set! k4931@k2eb1@include-macro k2eb1@include-macro) (set! k4930@k2eaf@do-include k2eaf@do-include) (set! k492f@k2ead@cond-macro k2ead@cond-macro) (set! k492e@k2eab@and-macro k2eab@and-macro) (set! k492d@k2ea9@or-macro k2ea9@or-macro) (set! k492c@k2ea7@let*-macro k2ea7@let*-macro) (set! k492b@k2ea5@do-macro k2ea5@do-macro) (set! k492a@k2ea3@identifier-syntax-macro k2ea3@identifier-syntax-macro) (set! k4929@k2ea1@endianness-macro k2ea1@endianness-macro) (set! k4928@k2e9f@assert-macro k2e9f@assert-macro) (set! k4927@k2e9d@delay-macro k2e9d@delay-macro) (set! k4926@k2e9b@time-macro k2e9b@time-macro) (set! k4925@k2e99@define-enumeration-macro k2e99@define-enumeration-macro) (set! k4924@k2e97@guard-macro k2e97@guard-macro) (set! k4923@k2e95@trace-letrec-syntax-macro k2e95@trace-letrec-syntax-macro) (set! k4922@k2e93@trace-let-syntax-macro k2e93@trace-let-syntax-macro) (set! k4921@k2e91@trace-let/rec-syntax k2e91@trace-let/rec-syntax) (set! k4920@k2e8f@trace-define-syntax-macro k2e8f@trace-define-syntax-macro) (set! k491f@k2e8d@trace-define-macro k2e8d@trace-define-macro) (set! k491e@k2e8b@trace-lambda-macro k2e8b@trace-lambda-macro) (set! k491d@k2e89@let*-values-macro k2e89@let*-values-macro) (set! k491c@k2e87@let-values-macro k2e87@let-values-macro) (set! k491b@k2e85@let-macro k2e85@let-macro) (set! k491a@k2e83@invalid-fmls-error k2e83@invalid-fmls-error) (set! k4919@k2e81@with-syntax-macro k2e81@with-syntax-macro) (set! k4918@k2e7f@bless k2e7f@bless) (set! k4917@k2e7d@lambda-transformer k2e7d@lambda-transformer) (set! k4916@k2e7b@case-lambda-transformer k2e7b@case-lambda-transformer) (set! k4915@k2e79@quote-transformer k2e79@quote-transformer) (set! k4914@k2e77@case-macro k2e77@case-macro) (set! k4913@k2e75@or-transformer k2e75@or-transformer) (set! k4912@k2e73@and-transformer k2e73@and-transformer) (set! k4911@k2e71@if-transformer k2e71@if-transformer) (set! k4910@k2e6f@unless-macro k2e6f@unless-macro) (set! k490f@k2e6d@when-macro k2e6d@when-macro) (set! k490e@k2e6b@record-constructor-descriptor-transformer k2e6b@record-constructor-descriptor-transformer) (set! k490d@k2e69@record-type-descriptor-transformer k2e69@record-type-descriptor-transformer) (set! k490c@k2e67@type-descriptor-transformer k2e67@type-descriptor-transformer) (set! k490b@k2e65@fluid-let-syntax-transformer k2e65@fluid-let-syntax-transformer) (set! k490a@k2e63@letrec*-transformer k2e63@letrec*-transformer) (set! k4909@k2e61@letrec-transformer k2e61@letrec-transformer) (set! k4908@k2e5f@letrec-helper k2e5f@letrec-helper) (set! k4907@k2e5d@add-lexicals k2e5d@add-lexicals) (set! k4906@k2e5b@add-lexical k2e5b@add-lexical) (set! k4905@k2e59@set-lexical-mutable! k2e59@set-lexical-mutable!) (set! k4904@k2e57@lexical-mutable? k2e57@lexical-mutable?) (set! k4903@k2e55@lexical-var k2e55@lexical-var) (set! k4902@k2e53@scheme-stx k2e53@scheme-stx) (set! k4901@k2e51@scheme-stx-hashtable k2e51@scheme-stx-hashtable) (set! k4900@k2e4f@parse-define-syntax k2e4f@parse-define-syntax) (set! k48ff@k2e4d@parse-define k2e4d@parse-define) (set! k48fe@k2cfc@make-eval-transformer k2cfc@make-eval-transformer) (set! k48fd@k2cfa@variable-transformer-procedure k2cfa@variable-transformer-procedure) (set! k48fc@k2cf8@variable-transformer? k2cf8@variable-transformer?) (set! k48fb@k2cf6@make-variable-transformer k2cf6@make-variable-transformer) (set! k48fa@k2cf4@sanitize-binding k2cf4@sanitize-binding) (set! k48f9@k2ce6@syntax-type k2ce6@syntax-type) (set! k48f8@k2ce4@raise-unbound-error k2ce4@raise-unbound-error) (set! k48f7@k2ce2@binding-value k2ce2@binding-value) (set! k48f6@k2ce0@binding-type k2ce0@binding-type) (set! k48f5@k2cde@make-binding k2cde@make-binding) (set! k48f4@k2cdc@label->binding k2cdc@label->binding) (set! k48f3@k2cda@id->real-label k2cda@id->real-label) (set! k48f2@k2cd8@id->label k2cd8@id->label) (set! k48f1@k2cd6@same-marks*? k2cd6@same-marks*?) (set! k48f0@k2cd4@stx->datum k2cd4@stx->datum) (set! k48ef@k2cd2@strip k2cd2@strip) (set! k48ee@k2cd0@strip-annotations k2cd0@strip-annotations) (set! k48ed@k2cce@self-evaluating? k2cce@self-evaluating?) (set! k48ec@k2ccc@bound-id-member? k2ccc@bound-id-member?) (set! k48eb@k2cca@distinct-bound-ids? k2cca@distinct-bound-ids?) (set! k48ea@k2cc8@valid-bound-ids? k2cc8@valid-bound-ids?) (set! k48e9@k2cc6@free-id=? k2cc6@free-id=?) (set! k48e8@k2cc4@bound-id=? k2cc4@bound-id=?) (set! k48e7@k2cc2@same-marks? k2cc2@same-marks?) (set! k48e6@k2cc0@id->sym k2cc0@id->sym) (set! k48e5@k2cbe@id? k2cbe@id?) (set! k48e4@k2cbc@syntax->list k2cbc@syntax->list) (set! k48e3@k2cba@syntax-cdr k2cba@syntax-cdr) (set! k48e2@k2cb8@syntax-car k2cb8@syntax-car) (set! k48e1@k2cb6@syntax-list? k2cb6@syntax-list?) (set! k48e0@k2cb4@syntax-null? k2cb4@syntax-null?) (set! k48df@k2cb2@syntax-vector? k2cb2@syntax-vector?) (set! k48de@k2cb0@syntax-pair? k2cb0@syntax-pair?) (set! k48dd@k2cae@syntax-vector->list k2cae@syntax-vector->list) (set! k48dc@k2cac@syntax-kind? k2cac@syntax-kind?) (set! k48db@k2caa@add-subst k2caa@add-subst) (set! k48da@k2ca8@add-mark k2ca8@add-mark) (set! k48d9@k2ca6@mkstx k2ca6@mkstx) (set! k48d8@k2ca4@join-wraps k2ca4@join-wraps) (set! k48d7@k2ca2@anti-mark? k2ca2@anti-mark?) (set! k48d6@k2ca0@anti-mark k2ca0@anti-mark) (set! k48d5@k2c9e@gen-mark k2c9e@gen-mark) (set! k48d4@k2c9c@datum->stx k2c9c@datum->stx) (set! k48d3@k2c9a@rp k2c9a@rp) (set! k48d2@k2c98@set-stx-ae*! k2c98@set-stx-ae*!) (set! k48d1@k2c96@set-stx-subst*! k2c96@set-stx-subst*!) (set! k48d0@k2c94@set-stx-mark*! k2c94@set-stx-mark*!) (set! k48cf@k2c92@set-stx-expr! k2c92@set-stx-expr!) (set! k48ce@k2c90@stx-ae* k2c90@stx-ae*) (set! k48cd@k2c8e@stx-subst* k2c8e@stx-subst*) (set! k48cc@k2c8c@stx-mark* k2c8c@stx-mark*) (set! k48cb@k2c8a@stx-expr k2c8a@stx-expr) (set! k48ca@k2c88@make-stx k2c88@make-stx) (set! k48c9@k2c86@stx? k2c86@stx?) (set! k48c8@k2c83@k2c7b k2c83@k2c7b) (set! k48c7@k2c81@k2c7c k2c81@k2c7c) (set! k48c6@k2c7f@k2c7a k2c7f@k2c7a) (set! k48c5@k2c79@make-full-rib k2c79@make-full-rib) (set! k48c4@k2c77@unseal-rib! k2c77@unseal-rib!) (set! k48c3@k2c75@seal-rib! k2c75@seal-rib!) (set! k48c2@k2c73@make-rib-map k2c73@make-rib-map) (set! k48c1@k2c71@extend-rib/nc! k2c71@extend-rib/nc!) (set! k48c0@k2c6f@extend-rib! k2c6f@extend-rib!) (set! k48bf@k2c6d@make-empty-rib k2c6d@make-empty-rib) (set! k48be@k2c6b@set-rib-cache! k2c6b@set-rib-cache!) (set! k48bd@k2c69@set-rib-sealed/freq! k2c69@set-rib-sealed/freq!) (set! k48bc@k2c67@set-rib-label*! k2c67@set-rib-label*!) (set! k48bb@k2c65@set-rib-mark**! k2c65@set-rib-mark**!) (set! k48ba@k2c63@set-rib-sym*! k2c63@set-rib-sym*!) (set! k48b9@k2c61@rib-cache k2c61@rib-cache) (set! k48b8@k2c5f@rib-sealed/freq k2c5f@rib-sealed/freq) (set! k48b7@k2c5d@rib-label* k2c5d@rib-label*) (set! k48b6@k2c5b@rib-mark** k2c5b@rib-mark**) (set! k48b5@k2c59@rib-sym* k2c59@rib-sym*) (set! k48b4@k2c57@make-rib k2c57@make-rib) (set! k48b3@k2c55@rib? k2c55@rib?) (set! k48b2@k2c52@k2c4a k2c52@k2c4a) (set! k48b1@k2c50@k2c4b k2c50@k2c4b) (set! k48b0@k2c4e@k2c49 k2c4e@k2c49) (set! k48af@k2c48@gen-define-label k2c48@gen-define-label) (set! k48ae@k2c46@gen-define-label+loc k2c46@gen-define-label+loc) (set! k48ad@k2c44@gen-top-level-label k2c44@gen-top-level-label) (set! k48ac@k2c42@gen-label k2c42@gen-label) (set! k48ab@k2c40@gen-global k2c40@gen-global) (set! k48aa@k2c3e@gen-lexical k2c3e@gen-lexical) (set! k48a9@k2c3c@top-marked? k2c3c@top-marked?) (set! k48a8@k2c3a@top-mark* k2c3a@top-mark*) (set! k48a7@k2c35@set-union k2c35@set-union) (set! k48a6@k2c33@set-cons k2c33@set-cons) (set! k48a5@k2c31@file-options-macro k2c31@file-options-macro) (k2ad8@k296f@current-library-expander k2f94@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (k49bb@k49b6 k49bd@k49b8 k49bf@k49b7 k49c2@&condition? k49c4@make-&condition k49c6@&condition-rtd k49c8@&condition-rcd k4a14@k4a0f k4a16@k4a11 k4a18@k4a10 k4a1b@p? k4a1d@make-message-condition k4a1f@k4a0e k4a21@message-condition? k4a23@condition-message k4a25@&message-rtd k4a27@&message-rcd k4a2d@k4a28 k4a2f@k4a2a k4a31@k4a29 k4a34@p? k4a36@make-warning k4a38@warning? k4a3a@&warning-rtd k4a3c@&warning-rcd k4a42@k4a3d k4a44@k4a3f k4a46@k4a3e k4a49@p? k4a4b@make-serious-condition k4a4d@serious-condition? k4a4f@&serious-rtd k4a51@&serious-rcd k4a57@k4a52 k4a59@k4a54 k4a5b@k4a53 k4a5e@p? k4a60@make-error k4a62@error? k4a64@&error-rtd k4a66@&error-rcd k4a6c@k4a67 k4a6e@k4a69 k4a70@k4a68 k4a73@p? k4a75@make-violation k4a77@violation? k4a79@&violation-rtd k4a7b@&violation-rcd k4a81@k4a7c k4a83@k4a7e k4a85@k4a7d k4a88@p? k4a8a@make-assertion-violation k4a8c@assertion-violation? k4a8e@&assertion-rtd k4a90@&assertion-rcd k4a98@k4a93 k4a9a@k4a95 k4a9c@k4a94 k4a9f@p? k4aa1@make-irritants-condition k4aa3@k4a92 k4aa5@irritants-condition? k4aa7@condition-irritants k4aa9@&irritants-rtd k4aab@&irritants-rcd k4ab3@k4aae k4ab5@k4ab0 k4ab7@k4aaf k4aba@p? k4abc@make-who-condition k4abe@k4aad k4ac0@who-condition? k4ac2@condition-who k4ac4@&who-rtd k4ac6@&who-rcd k4acc@k4ac7 k4ace@k4ac9 k4ad0@k4ac8 k4ad3@p? k4ad5@make-non-continuable-violation k4ad7@non-continuable-violation? k4ad9@&non-continuable-rtd k4adb@&non-continuable-rcd k4ae1@k4adc k4ae3@k4ade k4ae5@k4add k4ae8@p? k4aea@make-implementation-restriction-violation k4aec@implementation-restriction-violation? k4aee@&implementation-restriction-rtd k4af0@&implementation-restriction-rcd k4af6@k4af1 k4af8@k4af3 k4afa@k4af2 k4afd@p? k4aff@make-lexical-violation k4b01@lexical-violation? k4b03@&lexical-rtd k4b05@&lexical-rcd k4b0f@k4b0a k4b11@k4b0c k4b13@k4b0b k4b16@p? k4b18@make-syntax-violation k4b1a@k4b07 k4b1c@k4b09 k4b1e@syntax-violation? k4b20@syntax-violation-form k4b22@syntax-violation-subform k4b24@&syntax-rtd k4b26@&syntax-rcd k4b2c@k4b27 k4b2e@k4b29 k4b30@k4b28 k4b33@p? k4b35@make-undefined-violation k4b37@undefined-violation? k4b39@&undefined-rtd k4b3b@&undefined-rcd k4b41@k4b3c k4b43@k4b3e k4b45@k4b3d k4b48@p? k4b4a@make-i/o-error k4b4c@i/o-error? k4b4e@&i/o-rtd k4b50@&i/o-rcd k4b56@k4b51 k4b58@k4b53 k4b5a@k4b52 k4b5d@p? k4b5f@make-i/o-read-error k4b61@i/o-read-error? k4b63@&i/o-read-rtd k4b65@&i/o-read-rcd k4b6b@k4b66 k4b6d@k4b68 k4b6f@k4b67 k4b72@p? k4b74@make-i/o-write-error k4b76@i/o-write-error? k4b78@&i/o-write-rtd k4b7a@&i/o-write-rcd k4b82@k4b7d k4b84@k4b7f k4b86@k4b7e k4b89@p? k4b8b@make-i/o-invalid-position-error k4b8d@k4b7c k4b8f@i/o-invalid-position-error? k4b91@i/o-error-position k4b93@&i/o-invalid-position-rtd k4b95@&i/o-invalid-position-rcd k4b9d@k4b98 k4b9f@k4b9a k4ba1@k4b99 k4ba4@p? k4ba6@make-i/o-filename-error k4ba8@k4b97 k4baa@i/o-filename-error? k4bac@i/o-error-filename k4bae@&i/o-filename-rtd k4bb0@&i/o-filename-rcd k4bb6@k4bb1 k4bb8@k4bb3 k4bba@k4bb2 k4bbd@p? k4bbf@make-i/o-file-protection-error k4bc1@i/o-file-protection-error? k4bc3@&i/o-file-protection-rtd k4bc5@&i/o-file-protection-rcd k4bcb@k4bc6 k4bcd@k4bc8 k4bcf@k4bc7 k4bd2@p? k4bd4@make-i/o-file-is-read-only-error k4bd6@i/o-file-is-read-only-error? k4bd8@&i/o-file-is-read-only-rtd k4bda@&i/o-file-is-read-only-rcd k4be0@k4bdb k4be2@k4bdd k4be4@k4bdc k4be7@p? k4be9@make-i/o-file-already-exists-error k4beb@i/o-file-already-exists-error? k4bed@&i/o-file-already-exists-rtd k4bef@&i/o-file-already-exists-rcd k4bf5@k4bf0 k4bf7@k4bf2 k4bf9@k4bf1 k4bfc@p? k4bfe@make-i/o-file-does-not-exist-error k4c00@i/o-file-does-not-exist-error? k4c02@&i/o-file-does-not-exist-rtd k4c04@&i/o-file-does-not-exist-rcd k4c0c@k4c07 k4c0e@k4c09 k4c10@k4c08 k4c13@p? k4c15@make-i/o-port-error k4c17@k4c06 k4c19@i/o-port-error? k4c1b@i/o-error-port k4c1d@&i/o-port-rtd k4c1f@&i/o-port-rcd k4c25@k4c20 k4c27@k4c22 k4c29@k4c21 k4c2c@p? k4c2e@make-i/o-decoding-error k4c30@i/o-decoding-error? k4c32@&i/o-decoding-rtd k4c34@&i/o-decoding-rcd k4c3c@k4c37 k4c3e@k4c39 k4c40@k4c38 k4c43@p? k4c45@make-i/o-encoding-error k4c47@k4c36 k4c49@i/o-encoding-error? k4c4b@i/o-encoding-error-char k4c4d@&i/o-encoding-rtd k4c4f@&i/o-encoding-rcd k4c55@k4c50 k4c57@k4c52 k4c59@k4c51 k4c5c@p? k4c5e@make-no-infinities-violation k4c60@no-infinities-violation? k4c62@&no-infinities-rtd k4c64@&no-infinities-rcd k4c6a@k4c65 k4c6c@k4c67 k4c6e@k4c66 k4c71@p? k4c73@make-no-nans-violation k4c75@no-nans-violation? k4c77@&no-nans-rtd k4c79@&no-nans-rcd) (begin (set! k49bb@k49b6 (make-record-type-descriptor '&condition '#f 'k49b9 '#f '#f '#())) (set! k49bd@k49b8 '#f) (set! k49bf@k49b7 (make-record-constructor-descriptor k49bb@k49b6 '#f k49bd@k49b8)) (set! k49c2@&condition? (record-predicate k49bb@k49b6)) (set! k49c4@make-&condition (record-constructor k49bf@k49b7)) (set! k49c6@&condition-rtd k49bb@k49b6) (set! k49c8@&condition-rcd k49bf@k49b7) (set! k4a14@k4a0f (make-record-type-descriptor '&message k49bb@k49b6 'k4a12 '#f '#f '#((immutable message)))) (set! k4a16@k4a11 '#f) (set! k4a18@k4a10 (make-record-constructor-descriptor k4a14@k4a0f k49bf@k49b7 k4a16@k4a11)) (set! k4a1b@p? (record-predicate k4a14@k4a0f)) (set! k4a1d@make-message-condition (record-constructor k4a18@k4a10)) (set! k4a1f@k4a0e (record-accessor k4a14@k4a0f '0)) (set! k4a21@message-condition? (condition-predicate k4a14@k4a0f)) (set! k4a23@condition-message (condition-accessor k4a14@k4a0f k4a1f@k4a0e)) (set! k4a25@&message-rtd k4a14@k4a0f) (set! k4a27@&message-rcd k4a18@k4a10) (set! k4a2d@k4a28 (make-record-type-descriptor '&warning k49bb@k49b6 'k4a2b '#f '#f '#())) (set! k4a2f@k4a2a '#f) (set! k4a31@k4a29 (make-record-constructor-descriptor k4a2d@k4a28 k49bf@k49b7 k4a2f@k4a2a)) (set! k4a34@p? (record-predicate k4a2d@k4a28)) (set! k4a36@make-warning (record-constructor k4a31@k4a29)) (set! k4a38@warning? (condition-predicate k4a2d@k4a28)) (set! k4a3a@&warning-rtd k4a2d@k4a28) (set! k4a3c@&warning-rcd k4a31@k4a29) (set! k4a42@k4a3d (make-record-type-descriptor '&serious k49bb@k49b6 'k4a40 '#f '#f '#())) (set! k4a44@k4a3f '#f) (set! k4a46@k4a3e (make-record-constructor-descriptor k4a42@k4a3d k49bf@k49b7 k4a44@k4a3f)) (set! k4a49@p? (record-predicate k4a42@k4a3d)) (set! k4a4b@make-serious-condition (record-constructor k4a46@k4a3e)) (set! k4a4d@serious-condition? (condition-predicate k4a42@k4a3d)) (set! k4a4f@&serious-rtd k4a42@k4a3d) (set! k4a51@&serious-rcd k4a46@k4a3e) (set! k4a57@k4a52 (make-record-type-descriptor '&error k4a42@k4a3d 'k4a55 '#f '#f '#())) (set! k4a59@k4a54 '#f) (set! k4a5b@k4a53 (make-record-constructor-descriptor k4a57@k4a52 k4a46@k4a3e k4a59@k4a54)) (set! k4a5e@p? (record-predicate k4a57@k4a52)) (set! k4a60@make-error (record-constructor k4a5b@k4a53)) (set! k4a62@error? (condition-predicate k4a57@k4a52)) (set! k4a64@&error-rtd k4a57@k4a52) (set! k4a66@&error-rcd k4a5b@k4a53) (set! k4a6c@k4a67 (make-record-type-descriptor '&violation k4a42@k4a3d 'k4a6a '#f '#f '#())) (set! k4a6e@k4a69 '#f) (set! k4a70@k4a68 (make-record-constructor-descriptor k4a6c@k4a67 k4a46@k4a3e k4a6e@k4a69)) (set! k4a73@p? (record-predicate k4a6c@k4a67)) (set! k4a75@make-violation (record-constructor k4a70@k4a68)) (set! k4a77@violation? (condition-predicate k4a6c@k4a67)) (set! k4a79@&violation-rtd k4a6c@k4a67) (set! k4a7b@&violation-rcd k4a70@k4a68) (set! k4a81@k4a7c (make-record-type-descriptor '&assertion k4a6c@k4a67 'k4a7f '#f '#f '#())) (set! k4a83@k4a7e '#f) (set! k4a85@k4a7d (make-record-constructor-descriptor k4a81@k4a7c k4a70@k4a68 k4a83@k4a7e)) (set! k4a88@p? (record-predicate k4a81@k4a7c)) (set! k4a8a@make-assertion-violation (record-constructor k4a85@k4a7d)) (set! k4a8c@assertion-violation? (condition-predicate k4a81@k4a7c)) (set! k4a8e@&assertion-rtd k4a81@k4a7c) (set! k4a90@&assertion-rcd k4a85@k4a7d) (set! k4a98@k4a93 (make-record-type-descriptor '&irritants k49bb@k49b6 'k4a96 '#f '#f '#((immutable irritants)))) (set! k4a9a@k4a95 '#f) (set! k4a9c@k4a94 (make-record-constructor-descriptor k4a98@k4a93 k49bf@k49b7 k4a9a@k4a95)) (set! k4a9f@p? (record-predicate k4a98@k4a93)) (set! k4aa1@make-irritants-condition (record-constructor k4a9c@k4a94)) (set! k4aa3@k4a92 (record-accessor k4a98@k4a93 '0)) (set! k4aa5@irritants-condition? (condition-predicate k4a98@k4a93)) (set! k4aa7@condition-irritants (condition-accessor k4a98@k4a93 k4aa3@k4a92)) (set! k4aa9@&irritants-rtd k4a98@k4a93) (set! k4aab@&irritants-rcd k4a9c@k4a94) (set! k4ab3@k4aae (make-record-type-descriptor '&who k49bb@k49b6 'k4ab1 '#f '#f '#((immutable who)))) (set! k4ab5@k4ab0 '#f) (set! k4ab7@k4aaf (make-record-constructor-descriptor k4ab3@k4aae k49bf@k49b7 k4ab5@k4ab0)) (set! k4aba@p? (record-predicate k4ab3@k4aae)) (set! k4abc@make-who-condition (record-constructor k4ab7@k4aaf)) (set! k4abe@k4aad (record-accessor k4ab3@k4aae '0)) (set! k4ac0@who-condition? (condition-predicate k4ab3@k4aae)) (set! k4ac2@condition-who (condition-accessor k4ab3@k4aae k4abe@k4aad)) (set! k4ac4@&who-rtd k4ab3@k4aae) (set! k4ac6@&who-rcd k4ab7@k4aaf) (set! k4acc@k4ac7 (make-record-type-descriptor '&non-continuable k4a6c@k4a67 'k4aca '#f '#f '#())) (set! k4ace@k4ac9 '#f) (set! k4ad0@k4ac8 (make-record-constructor-descriptor k4acc@k4ac7 k4a70@k4a68 k4ace@k4ac9)) (set! k4ad3@p? (record-predicate k4acc@k4ac7)) (set! k4ad5@make-non-continuable-violation (record-constructor k4ad0@k4ac8)) (set! k4ad7@non-continuable-violation? (condition-predicate k4acc@k4ac7)) (set! k4ad9@&non-continuable-rtd k4acc@k4ac7) (set! k4adb@&non-continuable-rcd k4ad0@k4ac8) (set! k4ae1@k4adc (make-record-type-descriptor '&implementation-restriction k4a6c@k4a67 'k4adf '#f '#f '#())) (set! k4ae3@k4ade '#f) (set! k4ae5@k4add (make-record-constructor-descriptor k4ae1@k4adc k4a70@k4a68 k4ae3@k4ade)) (set! k4ae8@p? (record-predicate k4ae1@k4adc)) (set! k4aea@make-implementation-restriction-violation (record-constructor k4ae5@k4add)) (set! k4aec@implementation-restriction-violation? (condition-predicate k4ae1@k4adc)) (set! k4aee@&implementation-restriction-rtd k4ae1@k4adc) (set! k4af0@&implementation-restriction-rcd k4ae5@k4add) (set! k4af6@k4af1 (make-record-type-descriptor '&lexical k4a6c@k4a67 'k4af4 '#f '#f '#())) (set! k4af8@k4af3 '#f) (set! k4afa@k4af2 (make-record-constructor-descriptor k4af6@k4af1 k4a70@k4a68 k4af8@k4af3)) (set! k4afd@p? (record-predicate k4af6@k4af1)) (set! k4aff@make-lexical-violation (record-constructor k4afa@k4af2)) (set! k4b01@lexical-violation? (condition-predicate k4af6@k4af1)) (set! k4b03@&lexical-rtd k4af6@k4af1) (set! k4b05@&lexical-rcd k4afa@k4af2) (set! k4b0f@k4b0a (make-record-type-descriptor '&syntax k4a6c@k4a67 'k4b0d '#f '#f '#((immutable form) (immutable subform)))) (set! k4b11@k4b0c '#f) (set! k4b13@k4b0b (make-record-constructor-descriptor k4b0f@k4b0a k4a70@k4a68 k4b11@k4b0c)) (set! k4b16@p? (record-predicate k4b0f@k4b0a)) (set! k4b18@make-syntax-violation (record-constructor k4b13@k4b0b)) (set! k4b1a@k4b07 (record-accessor k4b0f@k4b0a '0)) (set! k4b1c@k4b09 (record-accessor k4b0f@k4b0a '1)) (set! k4b1e@syntax-violation? (condition-predicate k4b0f@k4b0a)) (set! k4b20@syntax-violation-form (condition-accessor k4b0f@k4b0a k4b1a@k4b07)) (set! k4b22@syntax-violation-subform (condition-accessor k4b0f@k4b0a k4b1c@k4b09)) (set! k4b24@&syntax-rtd k4b0f@k4b0a) (set! k4b26@&syntax-rcd k4b13@k4b0b) (set! k4b2c@k4b27 (make-record-type-descriptor '&undefined k4a6c@k4a67 'k4b2a '#f '#f '#())) (set! k4b2e@k4b29 '#f) (set! k4b30@k4b28 (make-record-constructor-descriptor k4b2c@k4b27 k4a70@k4a68 k4b2e@k4b29)) (set! k4b33@p? (record-predicate k4b2c@k4b27)) (set! k4b35@make-undefined-violation (record-constructor k4b30@k4b28)) (set! k4b37@undefined-violation? (condition-predicate k4b2c@k4b27)) (set! k4b39@&undefined-rtd k4b2c@k4b27) (set! k4b3b@&undefined-rcd k4b30@k4b28) (set! k4b41@k4b3c (make-record-type-descriptor '&i/o k4a57@k4a52 'k4b3f '#f '#f '#())) (set! k4b43@k4b3e '#f) (set! k4b45@k4b3d (make-record-constructor-descriptor k4b41@k4b3c k4a5b@k4a53 k4b43@k4b3e)) (set! k4b48@p? (record-predicate k4b41@k4b3c)) (set! k4b4a@make-i/o-error (record-constructor k4b45@k4b3d)) (set! k4b4c@i/o-error? (condition-predicate k4b41@k4b3c)) (set! k4b4e@&i/o-rtd k4b41@k4b3c) (set! k4b50@&i/o-rcd k4b45@k4b3d) (set! k4b56@k4b51 (make-record-type-descriptor '&i/o-read k4b41@k4b3c 'k4b54 '#f '#f '#())) (set! k4b58@k4b53 '#f) (set! k4b5a@k4b52 (make-record-constructor-descriptor k4b56@k4b51 k4b45@k4b3d k4b58@k4b53)) (set! k4b5d@p? (record-predicate k4b56@k4b51)) (set! k4b5f@make-i/o-read-error (record-constructor k4b5a@k4b52)) (set! k4b61@i/o-read-error? (condition-predicate k4b56@k4b51)) (set! k4b63@&i/o-read-rtd k4b56@k4b51) (set! k4b65@&i/o-read-rcd k4b5a@k4b52) (set! k4b6b@k4b66 (make-record-type-descriptor '&i/o-write k4b41@k4b3c 'k4b69 '#f '#f '#())) (set! k4b6d@k4b68 '#f) (set! k4b6f@k4b67 (make-record-constructor-descriptor k4b6b@k4b66 k4b45@k4b3d k4b6d@k4b68)) (set! k4b72@p? (record-predicate k4b6b@k4b66)) (set! k4b74@make-i/o-write-error (record-constructor k4b6f@k4b67)) (set! k4b76@i/o-write-error? (condition-predicate k4b6b@k4b66)) (set! k4b78@&i/o-write-rtd k4b6b@k4b66) (set! k4b7a@&i/o-write-rcd k4b6f@k4b67) (set! k4b82@k4b7d (make-record-type-descriptor '&i/o-invalid-position k4b41@k4b3c 'k4b80 '#f '#f '#((immutable position)))) (set! k4b84@k4b7f '#f) (set! k4b86@k4b7e (make-record-constructor-descriptor k4b82@k4b7d k4b45@k4b3d k4b84@k4b7f)) (set! k4b89@p? (record-predicate k4b82@k4b7d)) (set! k4b8b@make-i/o-invalid-position-error (record-constructor k4b86@k4b7e)) (set! k4b8d@k4b7c (record-accessor k4b82@k4b7d '0)) (set! k4b8f@i/o-invalid-position-error? (condition-predicate k4b82@k4b7d)) (set! k4b91@i/o-error-position (condition-accessor k4b82@k4b7d k4b8d@k4b7c)) (set! k4b93@&i/o-invalid-position-rtd k4b82@k4b7d) (set! k4b95@&i/o-invalid-position-rcd k4b86@k4b7e) (set! k4b9d@k4b98 (make-record-type-descriptor '&i/o-filename k4b41@k4b3c 'k4b9b '#f '#f '#((immutable filename)))) (set! k4b9f@k4b9a '#f) (set! k4ba1@k4b99 (make-record-constructor-descriptor k4b9d@k4b98 k4b45@k4b3d k4b9f@k4b9a)) (set! k4ba4@p? (record-predicate k4b9d@k4b98)) (set! k4ba6@make-i/o-filename-error (record-constructor k4ba1@k4b99)) (set! k4ba8@k4b97 (record-accessor k4b9d@k4b98 '0)) (set! k4baa@i/o-filename-error? (condition-predicate k4b9d@k4b98)) (set! k4bac@i/o-error-filename (condition-accessor k4b9d@k4b98 k4ba8@k4b97)) (set! k4bae@&i/o-filename-rtd k4b9d@k4b98) (set! k4bb0@&i/o-filename-rcd k4ba1@k4b99) (set! k4bb6@k4bb1 (make-record-type-descriptor '&i/o-file-protection k4b9d@k4b98 'k4bb4 '#f '#f '#())) (set! k4bb8@k4bb3 '#f) (set! k4bba@k4bb2 (make-record-constructor-descriptor k4bb6@k4bb1 k4ba1@k4b99 k4bb8@k4bb3)) (set! k4bbd@p? (record-predicate k4bb6@k4bb1)) (set! k4bbf@make-i/o-file-protection-error (record-constructor k4bba@k4bb2)) (set! k4bc1@i/o-file-protection-error? (condition-predicate k4bb6@k4bb1)) (set! k4bc3@&i/o-file-protection-rtd k4bb6@k4bb1) (set! k4bc5@&i/o-file-protection-rcd k4bba@k4bb2) (set! k4bcb@k4bc6 (make-record-type-descriptor '&i/o-file-is-read-only k4bb6@k4bb1 'k4bc9 '#f '#f '#())) (set! k4bcd@k4bc8 '#f) (set! k4bcf@k4bc7 (make-record-constructor-descriptor k4bcb@k4bc6 k4bba@k4bb2 k4bcd@k4bc8)) (set! k4bd2@p? (record-predicate k4bcb@k4bc6)) (set! k4bd4@make-i/o-file-is-read-only-error (record-constructor k4bcf@k4bc7)) (set! k4bd6@i/o-file-is-read-only-error? (condition-predicate k4bcb@k4bc6)) (set! k4bd8@&i/o-file-is-read-only-rtd k4bcb@k4bc6) (set! k4bda@&i/o-file-is-read-only-rcd k4bcf@k4bc7) (set! k4be0@k4bdb (make-record-type-descriptor '&i/o-file-already-exists k4b9d@k4b98 'k4bde '#f '#f '#())) (set! k4be2@k4bdd '#f) (set! k4be4@k4bdc (make-record-constructor-descriptor k4be0@k4bdb k4ba1@k4b99 k4be2@k4bdd)) (set! k4be7@p? (record-predicate k4be0@k4bdb)) (set! k4be9@make-i/o-file-already-exists-error (record-constructor k4be4@k4bdc)) (set! k4beb@i/o-file-already-exists-error? (condition-predicate k4be0@k4bdb)) (set! k4bed@&i/o-file-already-exists-rtd k4be0@k4bdb) (set! k4bef@&i/o-file-already-exists-rcd k4be4@k4bdc) (set! k4bf5@k4bf0 (make-record-type-descriptor '&i/o-file-does-not-exist k4b9d@k4b98 'k4bf3 '#f '#f '#())) (set! k4bf7@k4bf2 '#f) (set! k4bf9@k4bf1 (make-record-constructor-descriptor k4bf5@k4bf0 k4ba1@k4b99 k4bf7@k4bf2)) (set! k4bfc@p? (record-predicate k4bf5@k4bf0)) (set! k4bfe@make-i/o-file-does-not-exist-error (record-constructor k4bf9@k4bf1)) (set! k4c00@i/o-file-does-not-exist-error? (condition-predicate k4bf5@k4bf0)) (set! k4c02@&i/o-file-does-not-exist-rtd k4bf5@k4bf0) (set! k4c04@&i/o-file-does-not-exist-rcd k4bf9@k4bf1) (set! k4c0c@k4c07 (make-record-type-descriptor '&i/o-port k4b41@k4b3c 'k4c0a '#f '#f '#((immutable port)))) (set! k4c0e@k4c09 '#f) (set! k4c10@k4c08 (make-record-constructor-descriptor k4c0c@k4c07 k4b45@k4b3d k4c0e@k4c09)) (set! k4c13@p? (record-predicate k4c0c@k4c07)) (set! k4c15@make-i/o-port-error (record-constructor k4c10@k4c08)) (set! k4c17@k4c06 (record-accessor k4c0c@k4c07 '0)) (set! k4c19@i/o-port-error? (condition-predicate k4c0c@k4c07)) (set! k4c1b@i/o-error-port (condition-accessor k4c0c@k4c07 k4c17@k4c06)) (set! k4c1d@&i/o-port-rtd k4c0c@k4c07) (set! k4c1f@&i/o-port-rcd k4c10@k4c08) (set! k4c25@k4c20 (make-record-type-descriptor '&i/o-decoding k4c0c@k4c07 'k4c23 '#f '#f '#())) (set! k4c27@k4c22 '#f) (set! k4c29@k4c21 (make-record-constructor-descriptor k4c25@k4c20 k4c10@k4c08 k4c27@k4c22)) (set! k4c2c@p? (record-predicate k4c25@k4c20)) (set! k4c2e@make-i/o-decoding-error (record-constructor k4c29@k4c21)) (set! k4c30@i/o-decoding-error? (condition-predicate k4c25@k4c20)) (set! k4c32@&i/o-decoding-rtd k4c25@k4c20) (set! k4c34@&i/o-decoding-rcd k4c29@k4c21) (set! k4c3c@k4c37 (make-record-type-descriptor '&i/o-encoding k4c0c@k4c07 'k4c3a '#f '#f '#((immutable char)))) (set! k4c3e@k4c39 '#f) (set! k4c40@k4c38 (make-record-constructor-descriptor k4c3c@k4c37 k4c10@k4c08 k4c3e@k4c39)) (set! k4c43@p? (record-predicate k4c3c@k4c37)) (set! k4c45@make-i/o-encoding-error (record-constructor k4c40@k4c38)) (set! k4c47@k4c36 (record-accessor k4c3c@k4c37 '0)) (set! k4c49@i/o-encoding-error? (condition-predicate k4c3c@k4c37)) (set! k4c4b@i/o-encoding-error-char (condition-accessor k4c3c@k4c37 k4c47@k4c36)) (set! k4c4d@&i/o-encoding-rtd k4c3c@k4c37) (set! k4c4f@&i/o-encoding-rcd k4c40@k4c38) (set! k4c55@k4c50 (make-record-type-descriptor '&no-infinities k4ae1@k4adc 'k4c53 '#f '#f '#())) (set! k4c57@k4c52 '#f) (set! k4c59@k4c51 (make-record-constructor-descriptor k4c55@k4c50 k4ae5@k4add k4c57@k4c52)) (set! k4c5c@p? (record-predicate k4c55@k4c50)) (set! k4c5e@make-no-infinities-violation (record-constructor k4c59@k4c51)) (set! k4c60@no-infinities-violation? (condition-predicate k4c55@k4c50)) (set! k4c62@&no-infinities-rtd k4c55@k4c50) (set! k4c64@&no-infinities-rcd k4c59@k4c51) (set! k4c6a@k4c65 (make-record-type-descriptor '&no-nans k4ae1@k4adc 'k4c68 '#f '#f '#())) (set! k4c6c@k4c67 '#f) (set! k4c6e@k4c66 (make-record-constructor-descriptor k4c6a@k4c65 k4ae5@k4add k4c6c@k4c67)) (set! k4c71@p? (record-predicate k4c6a@k4c65)) (set! k4c73@make-no-nans-violation (record-constructor k4c6e@k4c66)) (set! k4c75@no-nans-violation? (condition-predicate k4c6a@k4c65)) (set! k4c77@&no-nans-rtd k4c6a@k4c65) (set! k4c79@&no-nans-rcd k4c6e@k4c66) (begin (set! k4d6a@k4c79@&no-nans-rcd k4c79@&no-nans-rcd) (set! k4d69@k4c77@&no-nans-rtd k4c77@&no-nans-rtd) (set! k4d68@k4c75@no-nans-violation? k4c75@no-nans-violation?) (set! k4d67@k4c73@make-no-nans-violation k4c73@make-no-nans-violation) (set! k4d66@k4c71@p? k4c71@p?) (set! k4d65@k4c6e@k4c66 k4c6e@k4c66) (set! k4d64@k4c6c@k4c67 k4c6c@k4c67) (set! k4d63@k4c6a@k4c65 k4c6a@k4c65) (set! k4d62@k4c64@&no-infinities-rcd k4c64@&no-infinities-rcd) (set! k4d61@k4c62@&no-infinities-rtd k4c62@&no-infinities-rtd) (set! k4d60@k4c60@no-infinities-violation? k4c60@no-infinities-violation?) (set! k4d5f@k4c5e@make-no-infinities-violation k4c5e@make-no-infinities-violation) (set! k4d5e@k4c5c@p? k4c5c@p?) (set! k4d5d@k4c59@k4c51 k4c59@k4c51) (set! k4d5c@k4c57@k4c52 k4c57@k4c52) (set! k4d5b@k4c55@k4c50 k4c55@k4c50) (set! k4d5a@k4c4f@&i/o-encoding-rcd k4c4f@&i/o-encoding-rcd) (set! k4d59@k4c4d@&i/o-encoding-rtd k4c4d@&i/o-encoding-rtd) (set! k4d58@k4c4b@i/o-encoding-error-char k4c4b@i/o-encoding-error-char) (set! k4d57@k4c49@i/o-encoding-error? k4c49@i/o-encoding-error?) (set! k4d56@k4c47@k4c36 k4c47@k4c36) (set! k4d55@k4c45@make-i/o-encoding-error k4c45@make-i/o-encoding-error) (set! k4d54@k4c43@p? k4c43@p?) (set! k4d53@k4c40@k4c38 k4c40@k4c38) (set! k4d52@k4c3e@k4c39 k4c3e@k4c39) (set! k4d51@k4c3c@k4c37 k4c3c@k4c37) (set! k4d50@k4c34@&i/o-decoding-rcd k4c34@&i/o-decoding-rcd) (set! k4d4f@k4c32@&i/o-decoding-rtd k4c32@&i/o-decoding-rtd) (set! k4d4e@k4c30@i/o-decoding-error? k4c30@i/o-decoding-error?) (set! k4d4d@k4c2e@make-i/o-decoding-error k4c2e@make-i/o-decoding-error) (set! k4d4c@k4c2c@p? k4c2c@p?) (set! k4d4b@k4c29@k4c21 k4c29@k4c21) (set! k4d4a@k4c27@k4c22 k4c27@k4c22) (set! k4d49@k4c25@k4c20 k4c25@k4c20) (set! k4d48@k4c1f@&i/o-port-rcd k4c1f@&i/o-port-rcd) (set! k4d47@k4c1d@&i/o-port-rtd k4c1d@&i/o-port-rtd) (set! k4d46@k4c1b@i/o-error-port k4c1b@i/o-error-port) (set! k4d45@k4c19@i/o-port-error? k4c19@i/o-port-error?) (set! k4d44@k4c17@k4c06 k4c17@k4c06) (set! k4d43@k4c15@make-i/o-port-error k4c15@make-i/o-port-error) (set! k4d42@k4c13@p? k4c13@p?) (set! k4d41@k4c10@k4c08 k4c10@k4c08) (set! k4d40@k4c0e@k4c09 k4c0e@k4c09) (set! k4d3f@k4c0c@k4c07 k4c0c@k4c07) (set! k4d3e@k4c04@&i/o-file-does-not-exist-rcd k4c04@&i/o-file-does-not-exist-rcd) (set! k4d3d@k4c02@&i/o-file-does-not-exist-rtd k4c02@&i/o-file-does-not-exist-rtd) (set! k4d3c@k4c00@i/o-file-does-not-exist-error? k4c00@i/o-file-does-not-exist-error?) (set! k4d3b@k4bfe@make-i/o-file-does-not-exist-error k4bfe@make-i/o-file-does-not-exist-error) (set! k4d3a@k4bfc@p? k4bfc@p?) (set! k4d39@k4bf9@k4bf1 k4bf9@k4bf1) (set! k4d38@k4bf7@k4bf2 k4bf7@k4bf2) (set! k4d37@k4bf5@k4bf0 k4bf5@k4bf0) (set! k4d36@k4bef@&i/o-file-already-exists-rcd k4bef@&i/o-file-already-exists-rcd) (set! k4d35@k4bed@&i/o-file-already-exists-rtd k4bed@&i/o-file-already-exists-rtd) (set! k4d34@k4beb@i/o-file-already-exists-error? k4beb@i/o-file-already-exists-error?) (set! k4d33@k4be9@make-i/o-file-already-exists-error k4be9@make-i/o-file-already-exists-error) (set! k4d32@k4be7@p? k4be7@p?) (set! k4d31@k4be4@k4bdc k4be4@k4bdc) (set! k4d30@k4be2@k4bdd k4be2@k4bdd) (set! k4d2f@k4be0@k4bdb k4be0@k4bdb) (set! k4d2e@k4bda@&i/o-file-is-read-only-rcd k4bda@&i/o-file-is-read-only-rcd) (set! k4d2d@k4bd8@&i/o-file-is-read-only-rtd k4bd8@&i/o-file-is-read-only-rtd) (set! k4d2c@k4bd6@i/o-file-is-read-only-error? k4bd6@i/o-file-is-read-only-error?) (set! k4d2b@k4bd4@make-i/o-file-is-read-only-error k4bd4@make-i/o-file-is-read-only-error) (set! k4d2a@k4bd2@p? k4bd2@p?) (set! k4d29@k4bcf@k4bc7 k4bcf@k4bc7) (set! k4d28@k4bcd@k4bc8 k4bcd@k4bc8) (set! k4d27@k4bcb@k4bc6 k4bcb@k4bc6) (set! k4d26@k4bc5@&i/o-file-protection-rcd k4bc5@&i/o-file-protection-rcd) (set! k4d25@k4bc3@&i/o-file-protection-rtd k4bc3@&i/o-file-protection-rtd) (set! k4d24@k4bc1@i/o-file-protection-error? k4bc1@i/o-file-protection-error?) (set! k4d23@k4bbf@make-i/o-file-protection-error k4bbf@make-i/o-file-protection-error) (set! k4d22@k4bbd@p? k4bbd@p?) (set! k4d21@k4bba@k4bb2 k4bba@k4bb2) (set! k4d20@k4bb8@k4bb3 k4bb8@k4bb3) (set! k4d1f@k4bb6@k4bb1 k4bb6@k4bb1) (set! k4d1e@k4bb0@&i/o-filename-rcd k4bb0@&i/o-filename-rcd) (set! k4d1d@k4bae@&i/o-filename-rtd k4bae@&i/o-filename-rtd) (set! k4d1c@k4bac@i/o-error-filename k4bac@i/o-error-filename) (set! k4d1b@k4baa@i/o-filename-error? k4baa@i/o-filename-error?) (set! k4d1a@k4ba8@k4b97 k4ba8@k4b97) (set! k4d19@k4ba6@make-i/o-filename-error k4ba6@make-i/o-filename-error) (set! k4d18@k4ba4@p? k4ba4@p?) (set! k4d17@k4ba1@k4b99 k4ba1@k4b99) (set! k4d16@k4b9f@k4b9a k4b9f@k4b9a) (set! k4d15@k4b9d@k4b98 k4b9d@k4b98) (set! k4d14@k4b95@&i/o-invalid-position-rcd k4b95@&i/o-invalid-position-rcd) (set! k4d13@k4b93@&i/o-invalid-position-rtd k4b93@&i/o-invalid-position-rtd) (set! k4d12@k4b91@i/o-error-position k4b91@i/o-error-position) (set! k4d11@k4b8f@i/o-invalid-position-error? k4b8f@i/o-invalid-position-error?) (set! k4d10@k4b8d@k4b7c k4b8d@k4b7c) (set! k4d0f@k4b8b@make-i/o-invalid-position-error k4b8b@make-i/o-invalid-position-error) (set! k4d0e@k4b89@p? k4b89@p?) (set! k4d0d@k4b86@k4b7e k4b86@k4b7e) (set! k4d0c@k4b84@k4b7f k4b84@k4b7f) (set! k4d0b@k4b82@k4b7d k4b82@k4b7d) (set! k4d0a@k4b7a@&i/o-write-rcd k4b7a@&i/o-write-rcd) (set! k4d09@k4b78@&i/o-write-rtd k4b78@&i/o-write-rtd) (set! k4d08@k4b76@i/o-write-error? k4b76@i/o-write-error?) (set! k4d07@k4b74@make-i/o-write-error k4b74@make-i/o-write-error) (set! k4d06@k4b72@p? k4b72@p?) (set! k4d05@k4b6f@k4b67 k4b6f@k4b67) (set! k4d04@k4b6d@k4b68 k4b6d@k4b68) (set! k4d03@k4b6b@k4b66 k4b6b@k4b66) (set! k4d02@k4b65@&i/o-read-rcd k4b65@&i/o-read-rcd) (set! k4d01@k4b63@&i/o-read-rtd k4b63@&i/o-read-rtd) (set! k4d00@k4b61@i/o-read-error? k4b61@i/o-read-error?) (set! k4cff@k4b5f@make-i/o-read-error k4b5f@make-i/o-read-error) (set! k4cfe@k4b5d@p? k4b5d@p?) (set! k4cfd@k4b5a@k4b52 k4b5a@k4b52) (set! k4cfc@k4b58@k4b53 k4b58@k4b53) (set! k4cfb@k4b56@k4b51 k4b56@k4b51) (set! k4cfa@k4b50@&i/o-rcd k4b50@&i/o-rcd) (set! k4cf9@k4b4e@&i/o-rtd k4b4e@&i/o-rtd) (set! k4cf8@k4b4c@i/o-error? k4b4c@i/o-error?) (set! k4cf7@k4b4a@make-i/o-error k4b4a@make-i/o-error) (set! k4cf6@k4b48@p? k4b48@p?) (set! k4cf5@k4b45@k4b3d k4b45@k4b3d) (set! k4cf4@k4b43@k4b3e k4b43@k4b3e) (set! k4cf3@k4b41@k4b3c k4b41@k4b3c) (set! k4cf2@k4b3b@&undefined-rcd k4b3b@&undefined-rcd) (set! k4cf1@k4b39@&undefined-rtd k4b39@&undefined-rtd) (set! k4cf0@k4b37@undefined-violation? k4b37@undefined-violation?) (set! k4cef@k4b35@make-undefined-violation k4b35@make-undefined-violation) (set! k4cee@k4b33@p? k4b33@p?) (set! k4ced@k4b30@k4b28 k4b30@k4b28) (set! k4cec@k4b2e@k4b29 k4b2e@k4b29) (set! k4ceb@k4b2c@k4b27 k4b2c@k4b27) (set! k4cea@k4b26@&syntax-rcd k4b26@&syntax-rcd) (set! k4ce9@k4b24@&syntax-rtd k4b24@&syntax-rtd) (set! k4ce8@k4b22@syntax-violation-subform k4b22@syntax-violation-subform) (set! k4ce7@k4b20@syntax-violation-form k4b20@syntax-violation-form) (set! k4ce6@k4b1e@syntax-violation? k4b1e@syntax-violation?) (set! k4ce5@k4b1c@k4b09 k4b1c@k4b09) (set! k4ce4@k4b1a@k4b07 k4b1a@k4b07) (set! k4ce3@k4b18@make-syntax-violation k4b18@make-syntax-violation) (set! k4ce2@k4b16@p? k4b16@p?) (set! k4ce1@k4b13@k4b0b k4b13@k4b0b) (set! k4ce0@k4b11@k4b0c k4b11@k4b0c) (set! k4cdf@k4b0f@k4b0a k4b0f@k4b0a) (set! k4cde@k4b05@&lexical-rcd k4b05@&lexical-rcd) (set! k4cdd@k4b03@&lexical-rtd k4b03@&lexical-rtd) (set! k4cdc@k4b01@lexical-violation? k4b01@lexical-violation?) (set! k4cdb@k4aff@make-lexical-violation k4aff@make-lexical-violation) (set! k4cda@k4afd@p? k4afd@p?) (set! k4cd9@k4afa@k4af2 k4afa@k4af2) (set! k4cd8@k4af8@k4af3 k4af8@k4af3) (set! k4cd7@k4af6@k4af1 k4af6@k4af1) (set! k4cd6@k4af0@&implementation-restriction-rcd k4af0@&implementation-restriction-rcd) (set! k4cd5@k4aee@&implementation-restriction-rtd k4aee@&implementation-restriction-rtd) (set! k4cd4@k4aec@implementation-restriction-violation? k4aec@implementation-restriction-violation?) (set! k4cd3@k4aea@make-implementation-restriction-violation k4aea@make-implementation-restriction-violation) (set! k4cd2@k4ae8@p? k4ae8@p?) (set! k4cd1@k4ae5@k4add k4ae5@k4add) (set! k4cd0@k4ae3@k4ade k4ae3@k4ade) (set! k4ccf@k4ae1@k4adc k4ae1@k4adc) (set! k4cce@k4adb@&non-continuable-rcd k4adb@&non-continuable-rcd) (set! k4ccd@k4ad9@&non-continuable-rtd k4ad9@&non-continuable-rtd) (set! k4ccc@k4ad7@non-continuable-violation? k4ad7@non-continuable-violation?) (set! k4ccb@k4ad5@make-non-continuable-violation k4ad5@make-non-continuable-violation) (set! k4cca@k4ad3@p? k4ad3@p?) (set! k4cc9@k4ad0@k4ac8 k4ad0@k4ac8) (set! k4cc8@k4ace@k4ac9 k4ace@k4ac9) (set! k4cc7@k4acc@k4ac7 k4acc@k4ac7) (set! k4cc6@k4ac6@&who-rcd k4ac6@&who-rcd) (set! k4cc5@k4ac4@&who-rtd k4ac4@&who-rtd) (set! k4cc4@k4ac2@condition-who k4ac2@condition-who) (set! k4cc3@k4ac0@who-condition? k4ac0@who-condition?) (set! k4cc2@k4abe@k4aad k4abe@k4aad) (set! k4cc1@k4abc@make-who-condition k4abc@make-who-condition) (set! k4cc0@k4aba@p? k4aba@p?) (set! k4cbf@k4ab7@k4aaf k4ab7@k4aaf) (set! k4cbe@k4ab5@k4ab0 k4ab5@k4ab0) (set! k4cbd@k4ab3@k4aae k4ab3@k4aae) (set! k4cbc@k4aab@&irritants-rcd k4aab@&irritants-rcd) (set! k4cbb@k4aa9@&irritants-rtd k4aa9@&irritants-rtd) (set! k4cba@k4aa7@condition-irritants k4aa7@condition-irritants) (set! k4cb9@k4aa5@irritants-condition? k4aa5@irritants-condition?) (set! k4cb8@k4aa3@k4a92 k4aa3@k4a92) (set! k4cb7@k4aa1@make-irritants-condition k4aa1@make-irritants-condition) (set! k4cb6@k4a9f@p? k4a9f@p?) (set! k4cb5@k4a9c@k4a94 k4a9c@k4a94) (set! k4cb4@k4a9a@k4a95 k4a9a@k4a95) (set! k4cb3@k4a98@k4a93 k4a98@k4a93) (set! k4cb2@k4a90@&assertion-rcd k4a90@&assertion-rcd) (set! k4cb1@k4a8e@&assertion-rtd k4a8e@&assertion-rtd) (set! k4cb0@k4a8c@assertion-violation? k4a8c@assertion-violation?) (set! k4caf@k4a8a@make-assertion-violation k4a8a@make-assertion-violation) (set! k4cae@k4a88@p? k4a88@p?) (set! k4cad@k4a85@k4a7d k4a85@k4a7d) (set! k4cac@k4a83@k4a7e k4a83@k4a7e) (set! k4cab@k4a81@k4a7c k4a81@k4a7c) (set! k4caa@k4a7b@&violation-rcd k4a7b@&violation-rcd) (set! k4ca9@k4a79@&violation-rtd k4a79@&violation-rtd) (set! k4ca8@k4a77@violation? k4a77@violation?) (set! k4ca7@k4a75@make-violation k4a75@make-violation) (set! k4ca6@k4a73@p? k4a73@p?) (set! k4ca5@k4a70@k4a68 k4a70@k4a68) (set! k4ca4@k4a6e@k4a69 k4a6e@k4a69) (set! k4ca3@k4a6c@k4a67 k4a6c@k4a67) (set! k4ca2@k4a66@&error-rcd k4a66@&error-rcd) (set! k4ca1@k4a64@&error-rtd k4a64@&error-rtd) (set! k4ca0@k4a62@error? k4a62@error?) (set! k4c9f@k4a60@make-error k4a60@make-error) (set! k4c9e@k4a5e@p? k4a5e@p?) (set! k4c9d@k4a5b@k4a53 k4a5b@k4a53) (set! k4c9c@k4a59@k4a54 k4a59@k4a54) (set! k4c9b@k4a57@k4a52 k4a57@k4a52) (set! k4c9a@k4a51@&serious-rcd k4a51@&serious-rcd) (set! k4c99@k4a4f@&serious-rtd k4a4f@&serious-rtd) (set! k4c98@k4a4d@serious-condition? k4a4d@serious-condition?) (set! k4c97@k4a4b@make-serious-condition k4a4b@make-serious-condition) (set! k4c96@k4a49@p? k4a49@p?) (set! k4c95@k4a46@k4a3e k4a46@k4a3e) (set! k4c94@k4a44@k4a3f k4a44@k4a3f) (set! k4c93@k4a42@k4a3d k4a42@k4a3d) (set! k4c92@k4a3c@&warning-rcd k4a3c@&warning-rcd) (set! k4c91@k4a3a@&warning-rtd k4a3a@&warning-rtd) (set! k4c90@k4a38@warning? k4a38@warning?) (set! k4c8f@k4a36@make-warning k4a36@make-warning) (set! k4c8e@k4a34@p? k4a34@p?) (set! k4c8d@k4a31@k4a29 k4a31@k4a29) (set! k4c8c@k4a2f@k4a2a k4a2f@k4a2a) (set! k4c8b@k4a2d@k4a28 k4a2d@k4a28) (set! k4c8a@k4a27@&message-rcd k4a27@&message-rcd) (set! k4c89@k4a25@&message-rtd k4a25@&message-rtd) (set! k4c88@k4a23@condition-message k4a23@condition-message) (set! k4c87@k4a21@message-condition? k4a21@message-condition?) (set! k4c86@k4a1f@k4a0e k4a1f@k4a0e) (set! k4c85@k4a1d@make-message-condition k4a1d@make-message-condition) (set! k4c84@k4a1b@p? k4a1b@p?) (set! k4c83@k4a18@k4a10 k4a18@k4a10) (set! k4c82@k4a16@k4a11 k4a16@k4a11) (set! k4c81@k4a14@k4a0f k4a14@k4a0f) (set! k4c80@k49c8@&condition-rcd k49c8@&condition-rcd) (set! k4c7f@k49c6@&condition-rtd k49c6@&condition-rtd) (set! k4c7e@k49c4@make-&condition k49c4@make-&condition) (set! k4c7d@k49c2@&condition? k49c2@&condition?) (set! k4c7c@k49bf@k49b7 k49bf@k49b7) (set! k4c7b@k49bd@k49b8 k49bd@k49b8) (set! k4c7a@k49bb@k49b6 k49bb@k49b6)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (k28b9@k286e@current-primitive-locations (lambda (k51aa@x) ((lambda (k51ac@t) (if k51ac@t (cdr k51ac@t) '#f)) (assq k51aa@x '((&no-nans-rcd . k4d6a@k4c79@&no-nans-rcd) (&no-nans-rtd . k4d69@k4c77@&no-nans-rtd) (&no-infinities-rcd . k4d62@k4c64@&no-infinities-rcd) (&no-infinities-rtd . k4d61@k4c62@&no-infinities-rtd) (&i/o-encoding-rcd . k4d5a@k4c4f@&i/o-encoding-rcd) (&i/o-encoding-rtd . k4d59@k4c4d@&i/o-encoding-rtd) (&i/o-decoding-rcd . k4d50@k4c34@&i/o-decoding-rcd) (&i/o-decoding-rtd . k4d4f@k4c32@&i/o-decoding-rtd) (&i/o-port-rcd . k4d48@k4c1f@&i/o-port-rcd) (&i/o-port-rtd . k4d47@k4c1d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . k4d3e@k4c04@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . k4d3d@k4c02@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . k4d36@k4bef@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . k4d35@k4bed@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . k4d2e@k4bda@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . k4d2d@k4bd8@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . k4d26@k4bc5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . k4d25@k4bc3@&i/o-file-protection-rtd) (&i/o-filename-rcd . k4d1e@k4bb0@&i/o-filename-rcd) (&i/o-filename-rtd . k4d1d@k4bae@&i/o-filename-rtd) (&i/o-invalid-position-rcd . k4d14@k4b95@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . k4d13@k4b93@&i/o-invalid-position-rtd) (&i/o-write-rcd . k4d0a@k4b7a@&i/o-write-rcd) (&i/o-write-rtd . k4d09@k4b78@&i/o-write-rtd) (&i/o-read-rcd . k4d02@k4b65@&i/o-read-rcd) (&i/o-read-rtd . k4d01@k4b63@&i/o-read-rtd) (&i/o-rcd . k4cfa@k4b50@&i/o-rcd) (&i/o-rtd . k4cf9@k4b4e@&i/o-rtd) (&undefined-rcd . k4cf2@k4b3b@&undefined-rcd) (&undefined-rtd . k4cf1@k4b39@&undefined-rtd) (&syntax-rcd . k4cea@k4b26@&syntax-rcd) (&syntax-rtd . k4ce9@k4b24@&syntax-rtd) (&lexical-rcd . k4cde@k4b05@&lexical-rcd) (&lexical-rtd . k4cdd@k4b03@&lexical-rtd) (&implementation-restriction-rcd . k4cd6@k4af0@&implementation-restriction-rcd) (&implementation-restriction-rtd . k4cd5@k4aee@&implementation-restriction-rtd) (&non-continuable-rcd . k4cce@k4adb@&non-continuable-rcd) (&non-continuable-rtd . k4ccd@k4ad9@&non-continuable-rtd) (&who-rcd . k4cc6@k4ac6@&who-rcd) (&who-rtd . k4cc5@k4ac4@&who-rtd) (&irritants-rcd . k4cbc@k4aab@&irritants-rcd) (&irritants-rtd . k4cbb@k4aa9@&irritants-rtd) (&assertion-rcd . k4cb2@k4a90@&assertion-rcd) (&assertion-rtd . k4cb1@k4a8e@&assertion-rtd) (&violation-rcd . k4caa@k4a7b@&violation-rcd) (&violation-rtd . k4ca9@k4a79@&violation-rtd) (&error-rcd . k4ca2@k4a66@&error-rcd) (&error-rtd . k4ca1@k4a64@&error-rtd) (&serious-rcd . k4c9a@k4a51@&serious-rcd) (&serious-rtd . k4c99@k4a4f@&serious-rtd) (&warning-rcd . k4c92@k4a3c@&warning-rcd) (&warning-rtd . k4c91@k4a3a@&warning-rtd) (&message-rcd . k4c8a@k4a27@&message-rcd) (&message-rtd . k4c89@k4a25@&message-rtd) (&condition-rcd . k4c80@k49c8@&condition-rcd) (&condition-rtd . k4c7f@k49c6@&condition-rtd) (syntax-error . k49a8@k2fae@syntax-error) (syntax-dispatch . k493d@k2ec9@syntax-dispatch) (load . k4e9b@k4d86@load) (interaction-environment . k49b0@k2fbe@interaction-environment) (library-path . k2ad0@k295f@library-path) (make-parameter . k2868@k2792@make-parameter) (make-variable-transformer . k48fb@k2cf6@make-variable-transformer) (identifier? . k49ab@k2fb4@identifier?) (generate-temporaries . k49a1@k2fa0@generate-temporaries) (free-identifier=? . k49a2@k2fa2@free-identifier=?) (syntax->datum . k49ad@k2fb8@syntax->datum) (datum->syntax . k49ac@k2fb6@datum->syntax) (bound-identifier=? . k49a3@k2fa4@bound-identifier=?) (make-i/o-write-error . k4d07@k4b74@make-i/o-write-error) (make-i/o-read-error . k4cff@k4b5f@make-i/o-read-error) (make-i/o-port-error . k4d43@k4c15@make-i/o-port-error) (make-i/o-invalid-position-error . k4d0f@k4b8b@make-i/o-invalid-position-error) (make-i/o-filename-error . k4d19@k4ba6@make-i/o-filename-error) (make-i/o-file-protection-error . k4d23@k4bbf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . k4d2b@k4bd4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . k4d3b@k4bfe@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . k4d33@k4be9@make-i/o-file-already-exists-error) (make-i/o-error . k4cf7@k4b4a@make-i/o-error) (make-i/o-encoding-error . k4d55@k4c45@make-i/o-encoding-error) (make-i/o-decoding-error . k4d4d@k4c2e@make-i/o-decoding-error) (i/o-write-error? . k4d08@k4b76@i/o-write-error?) (i/o-read-error? . k4d00@k4b61@i/o-read-error?) (i/o-port-error? . k4d45@k4c19@i/o-port-error?) (i/o-invalid-position-error? . k4d11@k4b8f@i/o-invalid-position-error?) (i/o-filename-error? . k4d1b@k4baa@i/o-filename-error?) (i/o-file-protection-error? . k4d24@k4bc1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . k4d2c@k4bd6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . k4d3c@k4c00@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . k4d34@k4beb@i/o-file-already-exists-error?) (i/o-error? . k4cf8@k4b4c@i/o-error?) (i/o-error-position . k4d12@k4b91@i/o-error-position) (i/o-error-port . k4d46@k4c1b@i/o-error-port) (i/o-error-filename . k4d1c@k4bac@i/o-error-filename) (i/o-encoding-error? . k4d57@k4c49@i/o-encoding-error?) (i/o-encoding-error-char . k4d58@k4c4b@i/o-encoding-error-char) (i/o-decoding-error? . k4d4e@k4c30@i/o-decoding-error?) (scheme-report-environment . k4998@k2f8e@scheme-report-environment) (null-environment . k4997@k2f8c@null-environment) (command-line . k4e98@k4d80@command-line) (eval . k499a@k2f92@eval) (environment . k4996@k2f8a@environment) (who-condition? . k4cc3@k4ac0@who-condition?) (warning? . k4c90@k4a38@warning?) (violation? . k4ca8@k4a77@violation?) (undefined-violation? . k4cf0@k4b37@undefined-violation?) (syntax-violation? . k4ce6@k4b1e@syntax-violation?) (syntax-violation-subform . k4ce8@k4b22@syntax-violation-subform) (syntax-violation-form . k4ce7@k4b20@syntax-violation-form) (syntax-violation . k49aa@k2fb2@syntax-violation) (serious-condition? . k4c98@k4a4d@serious-condition?) (non-continuable-violation? . k4ccc@k4ad7@non-continuable-violation?) (message-condition? . k4c87@k4a21@message-condition?) (make-who-condition . k4cc1@k4abc@make-who-condition) (make-warning . k4c8f@k4a36@make-warning) (make-violation . k4ca7@k4a75@make-violation) (make-undefined-violation . k4cef@k4b35@make-undefined-violation) (make-syntax-violation . k4ce3@k4b18@make-syntax-violation) (make-serious-condition . k4c97@k4a4b@make-serious-condition) (make-non-continuable-violation . k4ccb@k4ad5@make-non-continuable-violation) (make-message-condition . k4c85@k4a1d@make-message-condition) (make-lexical-violation . k4cdb@k4aff@make-lexical-violation) (make-irritants-condition . k4cb7@k4aa1@make-irritants-condition) (make-implementation-restriction-violation . k4cd3@k4aea@make-implementation-restriction-violation) (make-error . k4c9f@k4a60@make-error) (make-assertion-violation . k4caf@k4a8a@make-assertion-violation) (lexical-violation? . k4cdc@k4b01@lexical-violation?) (irritants-condition? . k4cb9@k4aa5@irritants-condition?) (implementation-restriction-violation? . k4cd4@k4aec@implementation-restriction-violation?) (error? . k4ca0@k4a62@error?) (condition-who . k4cc4@k4ac2@condition-who) (condition-message . k4c88@k4a23@condition-message) (condition-irritants . k4cba@k4aa7@condition-irritants) (assertion-violation? . k4cb0@k4a8c@assertion-violation?) (no-nans-violation? . k4d68@k4c75@no-nans-violation?) (no-infinities-violation? . k4d60@k4c60@no-infinities-violation?) (make-no-nans-violation . k4d67@k4c73@make-no-nans-violation) (make-no-infinities-violation . k4d5f@k4c5e@make-no-infinities-violation) (assertion-error . k49a7@k2fac@assertion-error)))))) (k2ae0@k297f@install-library 'k5187 '(mosh interaction) '() '() '() '() '((regexp? . k517f) (alist->eq-hash-table . k517c) (format . k5179) (string-split . k516e) (call-process . k5168) (set-current-directory! . k5164) (expand-path . k5163) (current-directory . k5162) (%spawn . k5161) (%waitpid . k5160) (%ffi-supported? . k515f) (%ffi-pointer-ref . k515e) (%ffi-pointer->string . k515d) (%ffi-call->string-or-zero . k515c) (%ffi-call->double . k515b) (%ffi-call->void* . k515a) (%ffi-call->void . k5159) (%ffi-call->int . k5158) (%ffi-lookup . k5157) (%ffi-open . k5156) (%fork . k5155) (%pipe . k5154) (p . k5153) (whereis . k514b) (register . k514a) (vm-join! . k5149) (vm-set-value! . k5148) (vm? . k5147) (main-vm? . k5146) (vm-eval . k5145) (vm-self . k5144) (vm-start! . k5143) (make-vm . k5142) (mutex-try-lock! . k5141) (mutex-unlock! . k5140) (mutex-lock! . k513f) (mutex? . k513e) (make-mutex . k513d) (condition-variable-notify-all! . k513c) (condition-variable-notify! . k513b) (condition-variable-wait! . k513a) (make-condition-variable . k5139) (string-upcase . k5122) (string-titlecase . k5121) (string-normalize-nfkd . k5120) (string-normalize-nfkc . k511f) (string-normalize-nfd . k511e) (string-normalize-nfc . k511d) (string-foldcase . k511c) (string-downcase . k511b) (string-ci>? . k511a) (string-ci>=? . k5119) (string-ci=? . k5118) (string-ci<? . k5117) (string-ci<=? . k5116) (char-whitespace? . k5115) (char-upper-case? . k5114) (char-title-case? . k5113) (char-numeric? . k5112) (char-lower-case? . k5111) (char-general-category . k5110) (char-upcase . k510f) (char-titlecase . k510e) (char-foldcase . k510d) (char-downcase . k510c) (char-ci>? . k510b) (char-ci>=? . k510a) (char-ci=? . k5109) (char-ci<? . k5108) (char-ci<=? . k5107) (char-alphabetic? . k5106) (make-variable-transformer . k2cf5) (identifier? . k2fb3) (generate-temporaries . k2f9f) (free-identifier=? . k2fa1) (syntax->datum . k2fb7) (datum->syntax . k2fb5) (bound-identifier=? . k2fa3) (record-type-descriptor? . k5105) (record-predicate . k5104) (record-mutator . k5103) (record-constructor . k5102) (record-accessor . k5101) (make-record-type-descriptor . k5100) (make-record-constructor-descriptor . k50ff) (record? . k50fe) (record-type-uid . k50fd) (record-type-sealed? . k50fc) (record-type-parent . k50fb) (record-type-opaque? . k50fa) (record-type-name . k50f9) (record-type-generative? . k50f8) (record-type-field-names . k50f7) (record-rtd . k50f6) (record-field-mutable? . k50f5) (delete-file . k50f4) (file-exists? . k50f3) (vector-sort! . k50f2) (vector-sort . k50f1) (list-sort . k50f0) (symbol-hash . k50ef) (string-ci-hash . k50ee) (string-hash . k50ed) (equal-hash . k50ec) (hashtable-equivalence-function . k50eb) (make-hashtable . k50ea) (hashtable-hash-function . k50e9) (make-eqv-hashtable . k50e8) (make-eq-hashtable . k50e7) (hashtable? . k50e6) (hashtable-update! . k50e5) (hashtable-size . k50e4) (hashtable-set! . k50e3) (hashtable-ref . k50e2) (hashtable-mutable? . k50e1) (hashtable-keys . k50e0) (hashtable-entries . k50df) (hashtable-delete! . k50de) (hashtable-copy . k50dd) (hashtable-contains? . k50dc) (hashtable-clear! . k50db) (call-with-output-file . k50da) (call-with-input-file . k50d9) (write-char . k50d8) (write . k50d7) (with-output-to-file . k50d6) (with-input-from-file . k50d5) (read-char . k50d4) (read . k50d3) (peek-char . k50d2) (open-output-file . k50d1) (open-input-file . k50d0) (newline . k50cf) (display . k50ce) (close-output-port . k50cd) (close-input-port . k50cc) (eof-object? . k50cb) (eof-object . k50ca) (current-error-port . k50c9) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (utf-8-codec . k50c4) (utf-16-codec . k50c3) (transcoder-error-handling-mode . k50c2) (transcoder-eol-style . k50c1) (transcoder-codec . k50c0) (transcoded-port . k50bf) (textual-port? . k50be) (string->bytevector . k50bd) (standard-output-port . k50bc) (standard-input-port . k50bb) (standard-error-port . k50ba) (set-port-position! . k50b9) (put-u8 . k50b8) (put-string . k50b7) (put-datum . k50b6) (put-char . k50b5) (put-bytevector . k50b4) (port? . k50b3) (port-transcoder . k50b2) (port-position . k50b1) (port-has-set-port-position!? . k50b0) (port-has-port-position? . k50af) (port-eof? . k50ae) (output-port-buffer-mode . k50ad) (open-string-output-port . k50ac) (open-string-input-port . k50ab) (open-file-output-port . k50aa) (open-file-input/output-port . k50a9) (open-file-input-port . k50a8) (open-bytevector-output-port . k50a7) (open-bytevector-input-port . k50a6) (native-transcoder . k50a5) (native-eol-style . k50a4) (make-transcoder . k50a3) (latin-1-codec . k50a2) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (make-i/o-encoding-error . k4c44) (make-i/o-decoding-error . k4c2d) (make-custom-textual-output-port . k50a1) (make-custom-textual-input/output-port . k50a0) (make-custom-textual-input-port . k509f) (make-custom-binary-output-port . k509e) (make-custom-binary-input/output-port . k509d) (make-custom-binary-input-port . k509c) (make-bytevector . k509b) (lookahead-u8 . k509a) (lookahead-char . k5099) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (i/o-encoding-error? . k4c48) (i/o-encoding-error-char . k4c4a) (i/o-decoding-error? . k4c2f) (get-u8 . k5098) (get-string-n! . k5097) (get-string-n . k5096) (get-string-all . k5095) (get-line . k5094) (get-datum . k5093) (get-char . k5092) (get-bytevector-some . k5091) (get-bytevector-n! . k5090) (get-bytevector-n . k508f) (get-bytevector-all . k508e) (flush-output-port . k508d) (close-port . k508c) (exit . k5084) (command-line . k4d7f) (string-fill! . k5083) (string-set! . k5082) (set-cdr! . k5081) (set-car! . k5080) (remove . k507f) (remv . k507e) (remp . k507d) (remq . k507c) (partition . k507b) (memv . k507a) (memq . k5079) (memp . k5078) (member . k5077) (exists . k5076) (for-all . k5075) (fold-right . k5074) (fold-left . k5073) (find . k5072) (filter . k5071) (cons* . k5070) (assv . k506f) (assq . k506e) (assp . k506d) (assoc . k506c) (call-with-string-output-port . k506b) (call-with-port . k506a) (call-with-bytevector-output-port . k5069) (bytevector->string . k5068) (buffer-mode? . k5067) (binary-port? . k5066) (with-exception-handler . k5065) (raise-continuable . k5064) (raise . k5063) (eval . k2f91) (environment . k2f89) (make-enumeration . k5062) (enum-set=? . k5061) (enum-set-universe . k5060) (enum-set-union . k505f) (enum-set-subset? . k505e) (enum-set-projection . k505d) (enum-set-member? . k505c) (enum-set-intersection . k505b) (enum-set-indexer . k505a) (enum-set-difference . k5059) (enum-set-constructor . k5058) (enum-set-complement . k5057) (enum-set->list . k5056) (who-condition? . k4abf) (warning? . k4a37) (violation? . k4a76) (undefined-violation? . k4b36) (syntax-violation? . k4b1d) (syntax-violation-subform . k4b21) (syntax-violation-form . k4b1f) (syntax-violation . k2fb1) (simple-conditions . k5055) (serious-condition? . k4a4c) (non-continuable-violation? . k4ad6) (message-condition? . k4a20) (make-who-condition . k4abb) (make-warning . k4a35) (make-violation . k4a74) (make-undefined-violation . k4b34) (make-syntax-violation . k4b17) (make-serious-condition . k4a4a) (make-non-continuable-violation . k4ad4) (make-message-condition . k4a1c) (make-lexical-violation . k4afe) (make-irritants-condition . k4aa0) (make-implementation-restriction-violation . k4ae9) (make-error . k4a5f) (make-assertion-violation . k4a89) (lexical-violation? . k4b00) (irritants-condition? . k4aa4) (implementation-restriction-violation? . k4aeb) (error? . k4a61) (condition-who . k4ac1) (condition-predicate . k5054) (condition-message . k4a22) (condition-irritants . k4aa6) (condition-accessor . k5053) (condition . k5052) (assertion-violation? . k4a8b) (condition? . k5051) (utf32->string . k5050) (utf16->string . k504f) (utf8->string . k504e) (uint-list->bytevector . k504d) (u8-list->bytevector . k504c) (string->utf8 . k504b) (string->utf32 . k504a) (string->utf16 . k5049) (sint-list->bytevector . k5048) (native-endianness . k5047) (bytevector? . k5046) (bytevector=? . k5045) (bytevector-uint-set! . k5044) (bytevector-uint-ref . k5043) (bytevector-u8-set! . k5042) (bytevector-u8-ref . k5041) (bytevector-u64-set! . k5040) (bytevector-u64-ref . k503f) (bytevector-u64-native-set! . k503e) (bytevector-u64-native-ref . k503d) (bytevector-u32-set! . k503c) (bytevector-u32-ref . k503b) (bytevector-u32-native-set! . k503a) (bytevector-u32-native-ref . k5039) (bytevector-u16-set! . k5038) (bytevector-u16-ref . k5037) (bytevector-u16-native-set! . k5036) (bytevector-u16-native-ref . k5035) (bytevector-sint-set! . k5034) (bytevector-sint-ref . k5033) (bytevector-s8-set! . k5032) (bytevector-s8-ref . k5031) (bytevector-s64-set! . k5030) (bytevector-s64-ref . k502f) (bytevector-s64-native-set! . k502e) (bytevector-s64-native-ref . k502d) (bytevector-s32-set! . k502c) (bytevector-s32-ref . k502b) (bytevector-s32-native-set! . k502a) (bytevector-s32-native-ref . k5029) (bytevector-s16-set! . k5028) (bytevector-s16-ref . k5027) (bytevector-s16-native-set! . k5026) (bytevector-s16-native-ref . k5025) (bytevector-length . k5024) (bytevector-ieee-single-ref . k5023) (bytevector-ieee-single-set! . k5022) (bytevector-ieee-single-native-set! . k5021) (bytevector-ieee-single-native-ref . k5020) (bytevector-ieee-double-set! . k501f) (bytevector-ieee-double-ref . k501e) (bytevector-ieee-double-native-set! . k501d) (bytevector-ieee-double-native-ref . k501c) (bytevector-fill! . k501b) (bytevector-copy! . k501a) (bytevector-copy . k5019) (bytevector->uint-list . k5018) (bytevector->u8-list . k5017) (bytevector->sint-list . k5016) (no-nans-violation? . k4c74) (no-infinities-violation? . k4c5f) (make-no-nans-violation . k4c72) (make-no-infinities-violation . k4c5d) (real->flonum . k5015) (flzero? . k5014) (fltruncate . k5013) (fltan . k5012) (flsqrt . k5011) (flsin . k5010) (flround . k500f) (flpositive? . k500e) (flonum? . k500d) (flodd? . k500c) (flnumerator . k500b) (flnegative? . k500a) (flnan? . k5009) (flmod0 . k5008) (flmod . k5007) (flmin . k5006) (flmax . k5005) (fllog . k5004) (flinteger? . k5003) (flinfinite? . k5002) (flfloor . k5001) (flfinite? . k5000) (flexpt . k4fff) (flexp . k4ffe) (fleven? . k4ffd) (fldiv0-and-mod0 . k4ffc) (fldiv0 . k4ffb) (fldiv-and-mod . k4ffa) (fldiv . k4ff9) (fldenominator . k4ff8) (flcos . k4ff7) (flceiling . k4ff6) (flatan . k4ff5) (flasin . k4ff4) (flacos . k4ff3) (flabs . k4ff2) (fl>? . k4ff1) (fl>=? . k4ff0) (fl=? . k4fef) (fl<? . k4fee) (fl<=? . k4fed) (fl/ . k4fec) (fl- . k4feb) (fl+ . k4fea) (fl* . k4fe9) (fixnum->flonum . k4fe8) (fxzero? . k4fe7) (fxxor . k4fe6) (fxrotate-bit-field . k4fe5) (fxreverse-bit-field . k4fe4) (fxpositive? . k4fe3) (fxodd? . k4fe2) (fxnot . k4fe1) (fxnegative? . k4fe0) (fxmod0 . k4fdf) (fxmod . k4fde) (fxmin . k4fdd) (fxmax . k4fdc) (fxlength . k4fdb) (fxior . k4fda) (fxif . k4fd9) (fxfirst-bit-set . k4fd8) (fxeven? . k4fd7) (fxdiv0-and-mod0 . k4fd6) (fxdiv0 . k4fd5) (fxdiv-and-mod . k4fd4) (fxdiv . k4fd3) (fxcopy-bit-field . k4fd2) (fxcopy-bit . k4fd1) (fxbit-set? . k4fd0) (fxbit-field . k4fcf) (fxbit-count . k4fce) (fxarithmetic-shift-right . k4fcd) (fxarithmetic-shift-left . k4fcc) (fxarithmetic-shift . k4fcb) (fxand . k4fca) (fx>? . k4fc9) (fx>=? . k4fc8) (fx=? . k4fc7) (fx<? . k4fc6) (fx<=? . k4fc5) (fx-/carry . k4fc4) (fx- . k4fc3) (fx+/carry . k4fc2) (fx+ . k4fc1) (fx*/carry . k4fc0) (fx* . k4fbf) (greatest-fixnum . k4fbe) (least-fixnum . k4fbd) (fixnum-width . k4fbc) (fixnum? . k4fbb) (bitwise-rotate-bit-field . k4fba) (bitwise-reverse-bit-field . k4fb9) (bitwise-length . k4fb8) (bitwise-if . k4fb7) (bitwise-first-bit-set . k4fb6) (bitwise-copy-bit-field . k4fb5) (bitwise-copy-bit . k4fb4) (bitwise-bit-set? . k4fb3) (bitwise-bit-field . k4fb2) (bitwise-bit-count . k4fb1) (bitwise-xor . k4fb0) (bitwise-ior . k4faf) (bitwise-and . k4fae) (bitwise-not . k4fad) (bitwise-arithmetic-shift-right . k4fac) (bitwise-arithmetic-shift-left . k4fab) (bitwise-arithmetic-shift . k4faa) (zero? . k4fa9) (vector? . k4fa8) (vector-set! . k4fa7) (vector-ref . k4fa6) (vector-map . k4fa5) (vector-length . k4fa4) (vector-for-each . k4fa3) (vector-fill! . k4fa2) (vector->list . k4fa1) (vector . k4fa0) (values . k4f9f) (truncate . k4f9e) (tan . k4f9d) (symbol? . k4f9c) (symbol=? . k4f9b) (symbol->string . k4f9a) (substring . k4f99) (string? . k4f98) (string>? . k4f97) (string>=? . k4f96) (string=? . k4f95) (string<? . k4f94) (string<=? . k4f93) (string-ref . k4f92) (string-length . k4f91) (string-for-each . k4f90) (string-copy . k4f8f) (string-append . k4f8e) (string->symbol . k4f8d) (string->number . k4f8c) (string->list . k4f8b) (string . k4f8a) (sqrt . k4f89) (sin . k4f88) (round . k4f87) (reverse . k4f86) (real? . k4f85) (real-valued? . k4f84) (real-part . k4f83) (rationalize . k4f82) (rational? . k4f81) (rational-valued? . k4f80) (procedure? . k4f7f) (positive? . k4f7e) (pair? . k4f7d) (odd? . k4f7c) (numerator . k4f7b) (number? . k4f7a) (number->string . k4f79) (null? . k4f78) (not . k4f77) (negative? . k4f76) (nan? . k4f75) (min . k4f74) (max . k4f73) (map . k4f72) (make-vector . k4f71) (make-string . k4f70) (make-rectangular . k4f6f) (make-polar . k4f6e) (magnitude . k4f6d) (log . k4f6c) (list? . k4f6b) (list-tail . k4f6a) (list-ref . k4f69) (list->vector . k4f68) (list->string . k4f67) (list . k4f66) (length . k4f65) (lcm . k4f64) (integer? . k4f63) (integer-valued? . k4f62) (integer->char . k4f61) (infinite? . k4f60) (inexact? . k4f5f) (inexact . k4f5e) (imag-part . k4f5d) (gcd . k4f5c) (for-each . k4f5b) (floor . k4f5a) (finite? . k4f59) (expt . k4f58) (exp . k4f57) (exact? . k4f56) (exact-integer-sqrt . k4f55) (exact . k4f54) (even? . k4f53) (error . k4f52) (eqv? . k4f51) (equal? . k4f50) (eq? . k4f4f) (dynamic-wind . k4f4e) (div0-and-mod0 . k4f4d) (mod0 . k4f4c) (div0 . k4f4b) (div-and-mod . k4f4a) (mod . k4f49) (div . k4f48) (denominator . k4f47) (cos . k4f46) (cons . k4f45) (complex? . k4f44) (char? . k4f43) (char>? . k4f42) (char>=? . k4f41) (char=? . k4f40) (char<? . k4f3f) (char<=? . k4f3e) (char->integer . k4f3d) (ceiling . k4f3c) (call-with-values . k4f3b) (call/cc . k4f3a) (call-with-current-continuation . k4f39) (cddddr . k4f38) (cdddar . k4f37) (cddadr . k4f36) (cddaar . k4f35) (cdaddr . k4f34) (cdadar . k4f33) (cdaadr . k4f32) (cdaaar . k4f31) (cadddr . k4f30) (caddar . k4f2f) (cadadr . k4f2e) (cadaar . k4f2d) (caaddr . k4f2c) (caadar . k4f2b) (caaadr . k4f2a) (caaaar . k4f29) (cdddr . k4f28) (cddar . k4f27) (cdadr . k4f26) (cdaar . k4f25) (caddr . k4f24) (cadar . k4f23) (caadr . k4f22) (caaar . k4f21) (cddr . k4f20) (cdar . k4f1f) (cadr . k4f1e) (caar . k4f1d) (cdr . k4f1c) (car . k4f1b) (boolean? . k4f1a) (boolean=? . k4f19) (atan . k4f18) (assertion-violation . k4f17) (asin . k4f16) (apply . k4f15) (append . k4f14) (angle . k4f13) (acos . k4f12) (abs . k4f11) (/ . k4f10) (* . k4f0f) (- . k4f0e) (+ . k4f0d) (>= . k4f0c) (> . k4f0b) (= . k4f0a) (<= . k4f09) (< . k4f08) (library . k4f07) (&no-nans . k4f06) (&no-infinities . k4f05) (&i/o-encoding . k4f04) (&i/o-decoding . k4f03) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9) (&undefined . k4ef8) (&syntax . k4ef7) (&lexical . k4ef6) (&implementation-restriction . k4ef5) (&non-continuable . k4ef4) (&who . k4ef3) (&irritants . k4ef2) (&assertion . k4ef1) (&violation . k4ef0) (&error . k4eef) (&serious . k4eee) (&warning . k4eed) (&message . k4eec) (&condition . k4eeb) (define-condition-type . k4eea) (define-enumeration . k4ee9) (define-record-type . k4ee8) (parent-rtd . k4ee7) (nongenerative . k4ee6) (opaque . k4ee5) (sealed . k4ee4) (protocol . k4ee3) (parent . k4ee2) (immutable . k4ee1) (mutable . k4ee0) (fields . k4edf) (error-handling-mode . k4ede) (file-options . k4edd) (buffer-mode . k4edc) (eol-style . k4edb) (guard . k4eda) (unsyntax-splicing . k4ed7) (unsyntax . k4ed6) (unquote-splicing . k4ed5) (unquote . k4ed4) (_ . k4ed3) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (assert . k4ecf) (endianness . k4ece) (time . k4ecc) (do . k4ecb) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (let*-values . k4ec7) (let-values . k4ec6) (identifier-syntax . k4ec5) (with-syntax . k4ec4) (quasisyntax . k4ec3) (quasiquote . k4ec2) (syntax-rules . k4ec1) (include . k4ec0) (record-constructor-descriptor . k4ebe) (record-type-descriptor . k4ebd) (case . k4ebc) (unless . k4eba) (when . k4eb9) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec* . k4eb5) (letrec . k4eb4) (case-lambda . k4eb2) (lambda . k4eb1) (syntax . k4eb0) (syntax-case . k4eaf) (quote . k4eae) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (import . k4ea9) (begin . k4ea8) (define-syntax . k4ea6) (define . k4ea5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5188 '(psyntax null-environment-5) '() '() '() '() '((make-promise . k5085) (unquote-splicing . k4ed5) (unquote . k4ed4) (_ . k4ed3) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (delay . k4ecd) (do . k4ecb) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (quasiquote . k4ec2) (syntax-rules . k4ec1) (case . k4ebc) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec . k4eb4) (lambda . k4eb1) (quote . k4eae) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (begin . k4ea8) (define-syntax . k4ea6) (define . k4ea5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5189 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . k511a) (string-ci>=? . k5119) (string-ci=? . k5118) (string-ci<? . k5117) (string-ci<=? . k5116) (char-whitespace? . k5115) (char-upper-case? . k5114) (char-numeric? . k5112) (char-lower-case? . k5111) (char-upcase . k510f) (char-downcase . k510c) (char-ci>? . k510b) (char-ci>=? . k510a) (char-ci=? . k5109) (char-ci<? . k5108) (char-ci<=? . k5107) (char-alphabetic? . k5106) (call-with-output-file . k50da) (call-with-input-file . k50d9) (write-char . k50d8) (write . k50d7) (with-output-to-file . k50d6) (with-input-from-file . k50d5) (read-char . k50d4) (read . k50d3) (peek-char . k50d2) (open-output-file . k50d1) (open-input-file . k50d0) (newline . k50cf) (display . k50ce) (close-output-port . k50cd) (close-input-port . k50cc) (eof-object . k50ca) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (scheme-report-environment . k2f8d) (quotient . k508b) (null-environment . k2f8b) (remainder . k508a) (modulo . k5089) (inexact->exact . k5088) (force . k5087) (exact->inexact . k5086) (make-promise . k5085) (string-fill! . k5083) (string-set! . k5082) (set-cdr! . k5081) (set-car! . k5080) (memv . k507a) (memq . k5079) (member . k5077) (assv . k506f) (assq . k506e) (assoc . k506c) (eval . k2f91) (zero? . k4fa9) (vector? . k4fa8) (vector-set! . k4fa7) (vector-ref . k4fa6) (vector-length . k4fa4) (vector-fill! . k4fa2) (vector->list . k4fa1) (vector . k4fa0) (values . k4f9f) (truncate . k4f9e) (tan . k4f9d) (symbol? . k4f9c) (symbol->string . k4f9a) (substring . k4f99) (string? . k4f98) (string>? . k4f97) (string>=? . k4f96) (string=? . k4f95) (string<? . k4f94) (string<=? . k4f93) (string-ref . k4f92) (string-length . k4f91) (string-copy . k4f8f) (string-append . k4f8e) (string->symbol . k4f8d) (string->number . k4f8c) (string->list . k4f8b) (string . k4f8a) (sqrt . k4f89) (sin . k4f88) (round . k4f87) (reverse . k4f86) (real? . k4f85) (real-part . k4f83) (rationalize . k4f82) (rational? . k4f81) (procedure? . k4f7f) (positive? . k4f7e) (pair? . k4f7d) (odd? . k4f7c) (numerator . k4f7b) (number? . k4f7a) (number->string . k4f79) (not . k4f77) (negative? . k4f76) (min . k4f74) (max . k4f73) (map . k4f72) (make-vector . k4f71) (make-string . k4f70) (make-rectangular . k4f6f) (make-polar . k4f6e) (magnitude . k4f6d) (log . k4f6c) (list? . k4f6b) (list-tail . k4f6a) (list-ref . k4f69) (list->vector . k4f68) (list->string . k4f67) (list . k4f66) (length . k4f65) (lcm . k4f64) (integer? . k4f63) (integer->char . k4f61) (inexact? . k4f5f) (imag-part . k4f5d) (gcd . k4f5c) (for-each . k4f5b) (floor . k4f5a) (expt . k4f58) (exp . k4f57) (exact? . k4f56) (even? . k4f53) (eqv? . k4f51) (equal? . k4f50) (eq? . k4f4f) (dynamic-wind . k4f4e) (denominator . k4f47) (cos . k4f46) (cons . k4f45) (complex? . k4f44) (char? . k4f43) (char>? . k4f42) (char>=? . k4f41) (char=? . k4f40) (char<? . k4f3f) (char<=? . k4f3e) (char->integer . k4f3d) (ceiling . k4f3c) (call-with-values . k4f3b) (call-with-current-continuation . k4f39) (cddddr . k4f38) (cdddar . k4f37) (cddadr . k4f36) (cddaar . k4f35) (cdaddr . k4f34) (cdadar . k4f33) (cdaadr . k4f32) (cdaaar . k4f31) (cadddr . k4f30) (caddar . k4f2f) (cadadr . k4f2e) (cadaar . k4f2d) (caaddr . k4f2c) (caadar . k4f2b) (caaadr . k4f2a) (caaaar . k4f29) (cdddr . k4f28) (cddar . k4f27) (cdadr . k4f26) (cdaar . k4f25) (caddr . k4f24) (cadar . k4f23) (caadr . k4f22) (caaar . k4f21) (cddr . k4f20) (cdar . k4f1f) (cadr . k4f1e) (caar . k4f1d) (cdr . k4f1c) (car . k4f1b) (boolean? . k4f1a) (atan . k4f18) (asin . k4f16) (apply . k4f15) (append . k4f14) (angle . k4f13) (acos . k4f12) (abs . k4f11) (/ . k4f10) (* . k4f0f) (- . k4f0e) (+ . k4f0d) (>= . k4f0c) (> . k4f0b) (= . k4f0a) (<= . k4f09) (< . k4f08) (unquote-splicing . k4ed5) (unquote . k4ed4) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (delay . k4ecd) (do . k4ecb) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (quasiquote . k4ec2) (syntax-rules . k4ec1) (case . k4ebc) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec . k4eb4) (lambda . k4eb1) (quote . k4eae) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (begin . k4ea8) (define-syntax . k4ea6) (define . k4ea5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518a '(psyntax modules) '() '() '() '() '((module . k4ea7)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518c '(rnrs) '(6) '() '() '() '((regexp? . k517f) (string-upcase . k5122) (string-titlecase . k5121) (string-normalize-nfkd . k5120) (string-normalize-nfkc . k511f) (string-normalize-nfd . k511e) (string-normalize-nfc . k511d) (string-foldcase . k511c) (string-downcase . k511b) (string-ci>? . k511a) (string-ci>=? . k5119) (string-ci=? . k5118) (string-ci<? . k5117) (string-ci<=? . k5116) (char-whitespace? . k5115) (char-upper-case? . k5114) (char-title-case? . k5113) (char-numeric? . k5112) (char-lower-case? . k5111) (char-general-category . k5110) (char-upcase . k510f) (char-titlecase . k510e) (char-foldcase . k510d) (char-downcase . k510c) (char-ci>? . k510b) (char-ci>=? . k510a) (char-ci=? . k5109) (char-ci<? . k5108) (char-ci<=? . k5107) (char-alphabetic? . k5106) (make-variable-transformer . k2cf5) (identifier? . k2fb3) (generate-temporaries . k2f9f) (free-identifier=? . k2fa1) (syntax->datum . k2fb7) (datum->syntax . k2fb5) (bound-identifier=? . k2fa3) (record-type-descriptor? . k5105) (record-predicate . k5104) (record-mutator . k5103) (record-constructor . k5102) (record-accessor . k5101) (make-record-type-descriptor . k5100) (make-record-constructor-descriptor . k50ff) (record? . k50fe) (record-type-uid . k50fd) (record-type-sealed? . k50fc) (record-type-parent . k50fb) (record-type-opaque? . k50fa) (record-type-name . k50f9) (record-type-generative? . k50f8) (record-type-field-names . k50f7) (record-rtd . k50f6) (record-field-mutable? . k50f5) (delete-file . k50f4) (file-exists? . k50f3) (vector-sort! . k50f2) (vector-sort . k50f1) (list-sort . k50f0) (symbol-hash . k50ef) (string-ci-hash . k50ee) (string-hash . k50ed) (equal-hash . k50ec) (hashtable-equivalence-function . k50eb) (make-hashtable . k50ea) (hashtable-hash-function . k50e9) (make-eqv-hashtable . k50e8) (make-eq-hashtable . k50e7) (hashtable? . k50e6) (hashtable-update! . k50e5) (hashtable-size . k50e4) (hashtable-set! . k50e3) (hashtable-ref . k50e2) (hashtable-mutable? . k50e1) (hashtable-keys . k50e0) (hashtable-entries . k50df) (hashtable-delete! . k50de) (hashtable-copy . k50dd) (hashtable-contains? . k50dc) (hashtable-clear! . k50db) (call-with-output-file . k50da) (call-with-input-file . k50d9) (write-char . k50d8) (write . k50d7) (with-output-to-file . k50d6) (with-input-from-file . k50d5) (read-char . k50d4) (read . k50d3) (peek-char . k50d2) (open-output-file . k50d1) (open-input-file . k50d0) (newline . k50cf) (display . k50ce) (close-output-port . k50cd) (close-input-port . k50cc) (eof-object? . k50cb) (eof-object . k50ca) (current-error-port . k50c9) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (utf-8-codec . k50c4) (utf-16-codec . k50c3) (transcoder-error-handling-mode . k50c2) (transcoder-eol-style . k50c1) (transcoder-codec . k50c0) (transcoded-port . k50bf) (textual-port? . k50be) (string->bytevector . k50bd) (standard-output-port . k50bc) (standard-input-port . k50bb) (standard-error-port . k50ba) (set-port-position! . k50b9) (put-u8 . k50b8) (put-string . k50b7) (put-datum . k50b6) (put-char . k50b5) (put-bytevector . k50b4) (port? . k50b3) (port-transcoder . k50b2) (port-position . k50b1) (port-has-set-port-position!? . k50b0) (port-has-port-position? . k50af) (port-eof? . k50ae) (output-port-buffer-mode . k50ad) (open-string-output-port . k50ac) (open-string-input-port . k50ab) (open-file-output-port . k50aa) (open-file-input/output-port . k50a9) (open-file-input-port . k50a8) (open-bytevector-output-port . k50a7) (open-bytevector-input-port . k50a6) (native-transcoder . k50a5) (native-eol-style . k50a4) (make-transcoder . k50a3) (latin-1-codec . k50a2) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (make-i/o-encoding-error . k4c44) (make-i/o-decoding-error . k4c2d) (make-custom-textual-output-port . k50a1) (make-custom-textual-input/output-port . k50a0) (make-custom-textual-input-port . k509f) (make-custom-binary-output-port . k509e) (make-custom-binary-input/output-port . k509d) (make-custom-binary-input-port . k509c) (make-bytevector . k509b) (lookahead-u8 . k509a) (lookahead-char . k5099) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (i/o-encoding-error? . k4c48) (i/o-encoding-error-char . k4c4a) (i/o-decoding-error? . k4c2f) (get-u8 . k5098) (get-string-n! . k5097) (get-string-n . k5096) (get-string-all . k5095) (get-line . k5094) (get-datum . k5093) (get-char . k5092) (get-bytevector-some . k5091) (get-bytevector-n! . k5090) (get-bytevector-n . k508f) (get-bytevector-all . k508e) (flush-output-port . k508d) (close-port . k508c) (exit . k5084) (command-line . k4d7f) (remove . k507f) (remv . k507e) (remp . k507d) (remq . k507c) (partition . k507b) (memv . k507a) (memq . k5079) (memp . k5078) (member . k5077) (exists . k5076) (for-all . k5075) (fold-right . k5074) (fold-left . k5073) (find . k5072) (filter . k5071) (cons* . k5070) (assv . k506f) (assq . k506e) (assp . k506d) (assoc . k506c) (call-with-string-output-port . k506b) (call-with-port . k506a) (call-with-bytevector-output-port . k5069) (bytevector->string . k5068) (buffer-mode? . k5067) (binary-port? . k5066) (with-exception-handler . k5065) (raise-continuable . k5064) (raise . k5063) (make-enumeration . k5062) (enum-set=? . k5061) (enum-set-universe . k5060) (enum-set-union . k505f) (enum-set-subset? . k505e) (enum-set-projection . k505d) (enum-set-member? . k505c) (enum-set-intersection . k505b) (enum-set-indexer . k505a) (enum-set-difference . k5059) (enum-set-constructor . k5058) (enum-set-complement . k5057) (enum-set->list . k5056) (who-condition? . k4abf) (warning? . k4a37) (violation? . k4a76) (undefined-violation? . k4b36) (syntax-violation? . k4b1d) (syntax-violation-subform . k4b21) (syntax-violation-form . k4b1f) (syntax-violation . k2fb1) (simple-conditions . k5055) (serious-condition? . k4a4c) (non-continuable-violation? . k4ad6) (message-condition? . k4a20) (make-who-condition . k4abb) (make-warning . k4a35) (make-violation . k4a74) (make-undefined-violation . k4b34) (make-syntax-violation . k4b17) (make-serious-condition . k4a4a) (make-non-continuable-violation . k4ad4) (make-message-condition . k4a1c) (make-lexical-violation . k4afe) (make-irritants-condition . k4aa0) (make-implementation-restriction-violation . k4ae9) (make-error . k4a5f) (make-assertion-violation . k4a89) (lexical-violation? . k4b00) (irritants-condition? . k4aa4) (implementation-restriction-violation? . k4aeb) (error? . k4a61) (condition-who . k4ac1) (condition-predicate . k5054) (condition-message . k4a22) (condition-irritants . k4aa6) (condition-accessor . k5053) (condition . k5052) (assertion-violation? . k4a8b) (condition? . k5051) (utf32->string . k5050) (utf16->string . k504f) (utf8->string . k504e) (uint-list->bytevector . k504d) (u8-list->bytevector . k504c) (string->utf8 . k504b) (string->utf32 . k504a) (string->utf16 . k5049) (sint-list->bytevector . k5048) (native-endianness . k5047) (bytevector? . k5046) (bytevector=? . k5045) (bytevector-uint-set! . k5044) (bytevector-uint-ref . k5043) (bytevector-u8-set! . k5042) (bytevector-u8-ref . k5041) (bytevector-u64-set! . k5040) (bytevector-u64-ref . k503f) (bytevector-u64-native-set! . k503e) (bytevector-u64-native-ref . k503d) (bytevector-u32-set! . k503c) (bytevector-u32-ref . k503b) (bytevector-u32-native-set! . k503a) (bytevector-u32-native-ref . k5039) (bytevector-u16-set! . k5038) (bytevector-u16-ref . k5037) (bytevector-u16-native-set! . k5036) (bytevector-u16-native-ref . k5035) (bytevector-sint-set! . k5034) (bytevector-sint-ref . k5033) (bytevector-s8-set! . k5032) (bytevector-s8-ref . k5031) (bytevector-s64-set! . k5030) (bytevector-s64-ref . k502f) (bytevector-s64-native-set! . k502e) (bytevector-s64-native-ref . k502d) (bytevector-s32-set! . k502c) (bytevector-s32-ref . k502b) (bytevector-s32-native-set! . k502a) (bytevector-s32-native-ref . k5029) (bytevector-s16-set! . k5028) (bytevector-s16-ref . k5027) (bytevector-s16-native-set! . k5026) (bytevector-s16-native-ref . k5025) (bytevector-length . k5024) (bytevector-ieee-single-ref . k5023) (bytevector-ieee-single-set! . k5022) (bytevector-ieee-single-native-set! . k5021) (bytevector-ieee-single-native-ref . k5020) (bytevector-ieee-double-set! . k501f) (bytevector-ieee-double-ref . k501e) (bytevector-ieee-double-native-set! . k501d) (bytevector-ieee-double-native-ref . k501c) (bytevector-fill! . k501b) (bytevector-copy! . k501a) (bytevector-copy . k5019) (bytevector->uint-list . k5018) (bytevector->u8-list . k5017) (bytevector->sint-list . k5016) (no-nans-violation? . k4c74) (no-infinities-violation? . k4c5f) (make-no-nans-violation . k4c72) (make-no-infinities-violation . k4c5d) (real->flonum . k5015) (flzero? . k5014) (fltruncate . k5013) (fltan . k5012) (flsqrt . k5011) (flsin . k5010) (flround . k500f) (flpositive? . k500e) (flonum? . k500d) (flodd? . k500c) (flnumerator . k500b) (flnegative? . k500a) (flnan? . k5009) (flmod0 . k5008) (flmod . k5007) (flmin . k5006) (flmax . k5005) (fllog . k5004) (flinteger? . k5003) (flinfinite? . k5002) (flfloor . k5001) (flfinite? . k5000) (flexpt . k4fff) (flexp . k4ffe) (fleven? . k4ffd) (fldiv0-and-mod0 . k4ffc) (fldiv0 . k4ffb) (fldiv-and-mod . k4ffa) (fldiv . k4ff9) (fldenominator . k4ff8) (flcos . k4ff7) (flceiling . k4ff6) (flatan . k4ff5) (flasin . k4ff4) (flacos . k4ff3) (flabs . k4ff2) (fl>? . k4ff1) (fl>=? . k4ff0) (fl=? . k4fef) (fl<? . k4fee) (fl<=? . k4fed) (fl/ . k4fec) (fl- . k4feb) (fl+ . k4fea) (fl* . k4fe9) (fixnum->flonum . k4fe8) (fxzero? . k4fe7) (fxxor . k4fe6) (fxrotate-bit-field . k4fe5) (fxreverse-bit-field . k4fe4) (fxpositive? . k4fe3) (fxodd? . k4fe2) (fxnot . k4fe1) (fxnegative? . k4fe0) (fxmod0 . k4fdf) (fxmod . k4fde) (fxmin . k4fdd) (fxmax . k4fdc) (fxlength . k4fdb) (fxior . k4fda) (fxif . k4fd9) (fxfirst-bit-set . k4fd8) (fxeven? . k4fd7) (fxdiv0-and-mod0 . k4fd6) (fxdiv0 . k4fd5) (fxdiv-and-mod . k4fd4) (fxdiv . k4fd3) (fxcopy-bit-field . k4fd2) (fxcopy-bit . k4fd1) (fxbit-set? . k4fd0) (fxbit-field . k4fcf) (fxbit-count . k4fce) (fxarithmetic-shift-right . k4fcd) (fxarithmetic-shift-left . k4fcc) (fxarithmetic-shift . k4fcb) (fxand . k4fca) (fx>? . k4fc9) (fx>=? . k4fc8) (fx=? . k4fc7) (fx<? . k4fc6) (fx<=? . k4fc5) (fx-/carry . k4fc4) (fx- . k4fc3) (fx+/carry . k4fc2) (fx+ . k4fc1) (fx*/carry . k4fc0) (fx* . k4fbf) (greatest-fixnum . k4fbe) (least-fixnum . k4fbd) (fixnum-width . k4fbc) (fixnum? . k4fbb) (bitwise-rotate-bit-field . k4fba) (bitwise-reverse-bit-field . k4fb9) (bitwise-length . k4fb8) (bitwise-if . k4fb7) (bitwise-first-bit-set . k4fb6) (bitwise-copy-bit-field . k4fb5) (bitwise-copy-bit . k4fb4) (bitwise-bit-set? . k4fb3) (bitwise-bit-field . k4fb2) (bitwise-bit-count . k4fb1) (bitwise-xor . k4fb0) (bitwise-ior . k4faf) (bitwise-and . k4fae) (bitwise-not . k4fad) (bitwise-arithmetic-shift-right . k4fac) (bitwise-arithmetic-shift-left . k4fab) (bitwise-arithmetic-shift . k4faa) (zero? . k4fa9) (vector? . k4fa8) (vector-set! . k4fa7) (vector-ref . k4fa6) (vector-map . k4fa5) (vector-length . k4fa4) (vector-for-each . k4fa3) (vector-fill! . k4fa2) (vector->list . k4fa1) (vector . k4fa0) (values . k4f9f) (truncate . k4f9e) (tan . k4f9d) (symbol? . k4f9c) (symbol=? . k4f9b) (symbol->string . k4f9a) (substring . k4f99) (string? . k4f98) (string>? . k4f97) (string>=? . k4f96) (string=? . k4f95) (string<? . k4f94) (string<=? . k4f93) (string-ref . k4f92) (string-length . k4f91) (string-for-each . k4f90) (string-copy . k4f8f) (string-append . k4f8e) (string->symbol . k4f8d) (string->number . k4f8c) (string->list . k4f8b) (string . k4f8a) (sqrt . k4f89) (sin . k4f88) (round . k4f87) (reverse . k4f86) (real? . k4f85) (real-valued? . k4f84) (real-part . k4f83) (rationalize . k4f82) (rational? . k4f81) (rational-valued? . k4f80) (procedure? . k4f7f) (positive? . k4f7e) (pair? . k4f7d) (odd? . k4f7c) (numerator . k4f7b) (number? . k4f7a) (number->string . k4f79) (null? . k4f78) (not . k4f77) (negative? . k4f76) (nan? . k4f75) (min . k4f74) (max . k4f73) (map . k4f72) (make-vector . k4f71) (make-string . k4f70) (make-rectangular . k4f6f) (make-polar . k4f6e) (magnitude . k4f6d) (log . k4f6c) (list? . k4f6b) (list-tail . k4f6a) (list-ref . k4f69) (list->vector . k4f68) (list->string . k4f67) (list . k4f66) (length . k4f65) (lcm . k4f64) (integer? . k4f63) (integer-valued? . k4f62) (integer->char . k4f61) (infinite? . k4f60) (inexact? . k4f5f) (inexact . k4f5e) (imag-part . k4f5d) (gcd . k4f5c) (for-each . k4f5b) (floor . k4f5a) (finite? . k4f59) (expt . k4f58) (exp . k4f57) (exact? . k4f56) (exact-integer-sqrt . k4f55) (exact . k4f54) (even? . k4f53) (error . k4f52) (eqv? . k4f51) (equal? . k4f50) (eq? . k4f4f) (dynamic-wind . k4f4e) (div0-and-mod0 . k4f4d) (mod0 . k4f4c) (div0 . k4f4b) (div-and-mod . k4f4a) (mod . k4f49) (div . k4f48) (denominator . k4f47) (cos . k4f46) (cons . k4f45) (complex? . k4f44) (char? . k4f43) (char>? . k4f42) (char>=? . k4f41) (char=? . k4f40) (char<? . k4f3f) (char<=? . k4f3e) (char->integer . k4f3d) (ceiling . k4f3c) (call-with-values . k4f3b) (call/cc . k4f3a) (call-with-current-continuation . k4f39) (cddddr . k4f38) (cdddar . k4f37) (cddadr . k4f36) (cddaar . k4f35) (cdaddr . k4f34) (cdadar . k4f33) (cdaadr . k4f32) (cdaaar . k4f31) (cadddr . k4f30) (caddar . k4f2f) (cadadr . k4f2e) (cadaar . k4f2d) (caaddr . k4f2c) (caadar . k4f2b) (caaadr . k4f2a) (caaaar . k4f29) (cdddr . k4f28) (cddar . k4f27) (cdadr . k4f26) (cdaar . k4f25) (caddr . k4f24) (cadar . k4f23) (caadr . k4f22) (caaar . k4f21) (cddr . k4f20) (cdar . k4f1f) (cadr . k4f1e) (caar . k4f1d) (cdr . k4f1c) (car . k4f1b) (boolean? . k4f1a) (boolean=? . k4f19) (atan . k4f18) (assertion-violation . k4f17) (asin . k4f16) (apply . k4f15) (append . k4f14) (angle . k4f13) (acos . k4f12) (abs . k4f11) (/ . k4f10) (* . k4f0f) (- . k4f0e) (+ . k4f0d) (>= . k4f0c) (> . k4f0b) (= . k4f0a) (<= . k4f09) (< . k4f08) (&no-nans . k4f06) (&no-infinities . k4f05) (&i/o-encoding . k4f04) (&i/o-decoding . k4f03) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9) (&undefined . k4ef8) (&syntax . k4ef7) (&lexical . k4ef6) (&implementation-restriction . k4ef5) (&non-continuable . k4ef4) (&who . k4ef3) (&irritants . k4ef2) (&assertion . k4ef1) (&violation . k4ef0) (&error . k4eef) (&serious . k4eee) (&warning . k4eed) (&message . k4eec) (&condition . k4eeb) (define-condition-type . k4eea) (define-enumeration . k4ee9) (define-record-type . k4ee8) (parent-rtd . k4ee7) (nongenerative . k4ee6) (opaque . k4ee5) (sealed . k4ee4) (protocol . k4ee3) (parent . k4ee2) (immutable . k4ee1) (mutable . k4ee0) (fields . k4edf) (error-handling-mode . k4ede) (file-options . k4edd) (buffer-mode . k4edc) (eol-style . k4edb) (guard . k4eda) (unsyntax-splicing . k4ed7) (unsyntax . k4ed6) (unquote-splicing . k4ed5) (unquote . k4ed4) (_ . k4ed3) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (assert . k4ecf) (endianness . k4ece) (do . k4ecb) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (let*-values . k4ec7) (let-values . k4ec6) (identifier-syntax . k4ec5) (with-syntax . k4ec4) (quasisyntax . k4ec3) (quasiquote . k4ec2) (syntax-rules . k4ec1) (record-constructor-descriptor . k4ebe) (record-type-descriptor . k4ebd) (case . k4ebc) (unless . k4eba) (when . k4eb9) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec* . k4eb5) (letrec . k4eb4) (case-lambda . k4eb2) (lambda . k4eb1) (syntax . k4eb0) (syntax-case . k4eaf) (quote . k4eae) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (begin . k4ea8) (define-syntax . k4ea6) (define . k4ea5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . k2f8d) (quotient . k508b) (null-environment . k2f8b) (remainder . k508a) (modulo . k5089) (inexact->exact . k5088) (force . k5087) (exact->inexact . k5086) (make-promise . k5085) (delay . k4ecd)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518e '(rnrs control) '(6) '() '() '() '((do . k4ecb) (unless . k4eba) (when . k4eb9) (case-lambda . k4eb2)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k518f '(rnrs eval) '(6) '() '() '() '((eval . k2f91) (environment . k2f89)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5190 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . k5081) (set-car! . k5080)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5191 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . k5083) (string-set! . k5082)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5192 '(rnrs programs) '(6) '() '() '() '((exit . k5084) (command-line . k4d7f)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5193 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . k2cf5) (identifier? . k2fb3) (generate-temporaries . k2f9f) (free-identifier=? . k2fa1) (syntax->datum . k2fb7) (datum->syntax . k2fb5) (bound-identifier=? . k2fa3) (syntax-violation . k2fb1) (unsyntax-splicing . k4ed7) (unsyntax . k4ed6) (_ . k4ed3) (... . k4ed0) (with-syntax . k4ec4) (quasisyntax . k4ec3) (syntax . k4eb0) (syntax-case . k4eaf)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5194 '(rnrs files) '(6) '() '() '() '((delete-file . k50f4) (file-exists? . k50f3) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5195 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . k50f2) (vector-sort . k50f1) (list-sort . k50f0)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5196 '(rnrs base) '(6) '() '() '() '((zero? . k4fa9) (vector? . k4fa8) (vector-set! . k4fa7) (vector-ref . k4fa6) (vector-map . k4fa5) (vector-length . k4fa4) (vector-for-each . k4fa3) (vector-fill! . k4fa2) (vector->list . k4fa1) (vector . k4fa0) (values . k4f9f) (truncate . k4f9e) (tan . k4f9d) (symbol? . k4f9c) (symbol=? . k4f9b) (symbol->string . k4f9a) (substring . k4f99) (string? . k4f98) (string>? . k4f97) (string>=? . k4f96) (string=? . k4f95) (string<? . k4f94) (string<=? . k4f93) (string-ref . k4f92) (string-length . k4f91) (string-for-each . k4f90) (string-copy . k4f8f) (string-append . k4f8e) (string->symbol . k4f8d) (string->number . k4f8c) (string->list . k4f8b) (string . k4f8a) (sqrt . k4f89) (sin . k4f88) (round . k4f87) (reverse . k4f86) (real? . k4f85) (real-valued? . k4f84) (real-part . k4f83) (rationalize . k4f82) (rational? . k4f81) (rational-valued? . k4f80) (procedure? . k4f7f) (positive? . k4f7e) (pair? . k4f7d) (odd? . k4f7c) (numerator . k4f7b) (number? . k4f7a) (number->string . k4f79) (null? . k4f78) (not . k4f77) (negative? . k4f76) (nan? . k4f75) (min . k4f74) (max . k4f73) (map . k4f72) (make-vector . k4f71) (make-string . k4f70) (make-rectangular . k4f6f) (make-polar . k4f6e) (magnitude . k4f6d) (log . k4f6c) (list? . k4f6b) (list-tail . k4f6a) (list-ref . k4f69) (list->vector . k4f68) (list->string . k4f67) (list . k4f66) (length . k4f65) (lcm . k4f64) (integer? . k4f63) (integer-valued? . k4f62) (integer->char . k4f61) (infinite? . k4f60) (inexact? . k4f5f) (inexact . k4f5e) (imag-part . k4f5d) (gcd . k4f5c) (for-each . k4f5b) (floor . k4f5a) (finite? . k4f59) (expt . k4f58) (exp . k4f57) (exact? . k4f56) (exact-integer-sqrt . k4f55) (exact . k4f54) (even? . k4f53) (error . k4f52) (eqv? . k4f51) (equal? . k4f50) (eq? . k4f4f) (dynamic-wind . k4f4e) (div0-and-mod0 . k4f4d) (mod0 . k4f4c) (div0 . k4f4b) (div-and-mod . k4f4a) (mod . k4f49) (div . k4f48) (denominator . k4f47) (cos . k4f46) (cons . k4f45) (complex? . k4f44) (char? . k4f43) (char>? . k4f42) (char>=? . k4f41) (char=? . k4f40) (char<? . k4f3f) (char<=? . k4f3e) (char->integer . k4f3d) (ceiling . k4f3c) (call-with-values . k4f3b) (call/cc . k4f3a) (call-with-current-continuation . k4f39) (cddddr . k4f38) (cdddar . k4f37) (cddadr . k4f36) (cddaar . k4f35) (cdaddr . k4f34) (cdadar . k4f33) (cdaadr . k4f32) (cdaaar . k4f31) (cadddr . k4f30) (caddar . k4f2f) (cadadr . k4f2e) (cadaar . k4f2d) (caaddr . k4f2c) (caadar . k4f2b) (caaadr . k4f2a) (caaaar . k4f29) (cdddr . k4f28) (cddar . k4f27) (cdadr . k4f26) (cdaar . k4f25) (caddr . k4f24) (cadar . k4f23) (caadr . k4f22) (caaar . k4f21) (cddr . k4f20) (cdar . k4f1f) (cadr . k4f1e) (caar . k4f1d) (cdr . k4f1c) (car . k4f1b) (boolean? . k4f1a) (boolean=? . k4f19) (atan . k4f18) (assertion-violation . k4f17) (asin . k4f16) (apply . k4f15) (append . k4f14) (angle . k4f13) (acos . k4f12) (abs . k4f11) (/ . k4f10) (* . k4f0f) (- . k4f0e) (+ . k4f0d) (>= . k4f0c) (> . k4f0b) (= . k4f0a) (<= . k4f09) (< . k4f08) (unquote-splicing . k4ed5) (unquote . k4ed4) (_ . k4ed3) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (assert . k4ecf) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (let*-values . k4ec7) (let-values . k4ec6) (identifier-syntax . k4ec5) (quasiquote . k4ec2) (syntax-rules . k4ec1) (case . k4ebc) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec* . k4eb5) (letrec . k4eb4) (lambda . k4eb1) (quote . k4eae) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (begin . k4ea8) (define-syntax . k4ea6) (define . k4ea5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5197 '(rnrs lists) '(6) '() '() '() '((remove . k507f) (remv . k507e) (remp . k507d) (remq . k507c) (partition . k507b) (memv . k507a) (memq . k5079) (memp . k5078) (member . k5077) (exists . k5076) (for-all . k5075) (fold-right . k5074) (fold-left . k5073) (find . k5072) (filter . k5071) (cons* . k5070) (assv . k506f) (assq . k506e) (assp . k506d) (assoc . k506c)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5198 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . k50da) (call-with-input-file . k50d9) (write-char . k50d8) (write . k50d7) (with-output-to-file . k50d6) (with-input-from-file . k50d5) (read-char . k50d4) (read . k50d3) (peek-char . k50d2) (open-output-file . k50d1) (open-input-file . k50d0) (newline . k50cf) (display . k50ce) (close-output-port . k50cd) (close-input-port . k50cc) (eof-object? . k50cb) (eof-object . k50ca) (current-error-port . k50c9) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k5199 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . k509b) (utf32->string . k5050) (utf16->string . k504f) (utf8->string . k504e) (uint-list->bytevector . k504d) (u8-list->bytevector . k504c) (string->utf8 . k504b) (string->utf32 . k504a) (string->utf16 . k5049) (sint-list->bytevector . k5048) (native-endianness . k5047) (bytevector? . k5046) (bytevector=? . k5045) (bytevector-uint-set! . k5044) (bytevector-uint-ref . k5043) (bytevector-u8-set! . k5042) (bytevector-u8-ref . k5041) (bytevector-u64-set! . k5040) (bytevector-u64-ref . k503f) (bytevector-u64-native-set! . k503e) (bytevector-u64-native-ref . k503d) (bytevector-u32-set! . k503c) (bytevector-u32-ref . k503b) (bytevector-u32-native-set! . k503a) (bytevector-u32-native-ref . k5039) (bytevector-u16-set! . k5038) (bytevector-u16-ref . k5037) (bytevector-u16-native-set! . k5036) (bytevector-u16-native-ref . k5035) (bytevector-sint-set! . k5034) (bytevector-sint-ref . k5033) (bytevector-s8-set! . k5032) (bytevector-s8-ref . k5031) (bytevector-s64-set! . k5030) (bytevector-s64-ref . k502f) (bytevector-s64-native-set! . k502e) (bytevector-s64-native-ref . k502d) (bytevector-s32-set! . k502c) (bytevector-s32-ref . k502b) (bytevector-s32-native-set! . k502a) (bytevector-s32-native-ref . k5029) (bytevector-s16-set! . k5028) (bytevector-s16-ref . k5027) (bytevector-s16-native-set! . k5026) (bytevector-s16-native-ref . k5025) (bytevector-length . k5024) (bytevector-ieee-single-ref . k5023) (bytevector-ieee-single-set! . k5022) (bytevector-ieee-single-native-set! . k5021) (bytevector-ieee-single-native-ref . k5020) (bytevector-ieee-double-set! . k501f) (bytevector-ieee-double-ref . k501e) (bytevector-ieee-double-native-set! . k501d) (bytevector-ieee-double-native-ref . k501c) (bytevector-fill! . k501b) (bytevector-copy! . k501a) (bytevector-copy . k5019) (bytevector->uint-list . k5018) (bytevector->u8-list . k5017) (bytevector->sint-list . k5016) (endianness . k4ece)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519a '(rnrs unicode) '(6) '() '() '() '((string-upcase . k5122) (string-titlecase . k5121) (string-normalize-nfkd . k5120) (string-normalize-nfkc . k511f) (string-normalize-nfd . k511e) (string-normalize-nfc . k511d) (string-foldcase . k511c) (string-downcase . k511b) (string-ci>? . k511a) (string-ci>=? . k5119) (string-ci=? . k5118) (string-ci<? . k5117) (string-ci<=? . k5116) (char-whitespace? . k5115) (char-upper-case? . k5114) (char-title-case? . k5113) (char-numeric? . k5112) (char-lower-case? . k5111) (char-general-category . k5110) (char-upcase . k510f) (char-titlecase . k510e) (char-foldcase . k510d) (char-downcase . k510c) (char-ci>? . k510b) (char-ci>=? . k510a) (char-ci=? . k5109) (char-ci<? . k5108) (char-ci<=? . k5107) (char-alphabetic? . k5106)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519b '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . k5065) (raise-continuable . k5064) (raise . k5063) (guard . k4eda) (else . k4ed2) (=> . k4ed1)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519c '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . k4fba) (bitwise-reverse-bit-field . k4fb9) (bitwise-length . k4fb8) (bitwise-if . k4fb7) (bitwise-first-bit-set . k4fb6) (bitwise-copy-bit-field . k4fb5) (bitwise-copy-bit . k4fb4) (bitwise-bit-set? . k4fb3) (bitwise-bit-field . k4fb2) (bitwise-bit-count . k4fb1) (bitwise-xor . k4fb0) (bitwise-ior . k4faf) (bitwise-and . k4fae) (bitwise-not . k4fad) (bitwise-arithmetic-shift-right . k4fac) (bitwise-arithmetic-shift-left . k4fab) (bitwise-arithmetic-shift . k4faa)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519d '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . k4fe7) (fxxor . k4fe6) (fxrotate-bit-field . k4fe5) (fxreverse-bit-field . k4fe4) (fxpositive? . k4fe3) (fxodd? . k4fe2) (fxnot . k4fe1) (fxnegative? . k4fe0) (fxmod0 . k4fdf) (fxmod . k4fde) (fxmin . k4fdd) (fxmax . k4fdc) (fxlength . k4fdb) (fxior . k4fda) (fxif . k4fd9) (fxfirst-bit-set . k4fd8) (fxeven? . k4fd7) (fxdiv0-and-mod0 . k4fd6) (fxdiv0 . k4fd5) (fxdiv-and-mod . k4fd4) (fxdiv . k4fd3) (fxcopy-bit-field . k4fd2) (fxcopy-bit . k4fd1) (fxbit-set? . k4fd0) (fxbit-field . k4fcf) (fxbit-count . k4fce) (fxarithmetic-shift-right . k4fcd) (fxarithmetic-shift-left . k4fcc) (fxarithmetic-shift . k4fcb) (fxand . k4fca) (fx>? . k4fc9) (fx>=? . k4fc8) (fx=? . k4fc7) (fx<? . k4fc6) (fx<=? . k4fc5) (fx-/carry . k4fc4) (fx- . k4fc3) (fx+/carry . k4fc2) (fx+ . k4fc1) (fx*/carry . k4fc0) (fx* . k4fbf) (greatest-fixnum . k4fbe) (least-fixnum . k4fbd) (fixnum-width . k4fbc) (fixnum? . k4fbb)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519e '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . k4c74) (no-infinities-violation? . k4c5f) (make-no-nans-violation . k4c72) (make-no-infinities-violation . k4c5d) (real->flonum . k5015) (flzero? . k5014) (fltruncate . k5013) (fltan . k5012) (flsqrt . k5011) (flsin . k5010) (flround . k500f) (flpositive? . k500e) (flonum? . k500d) (flodd? . k500c) (flnumerator . k500b) (flnegative? . k500a) (flnan? . k5009) (flmod0 . k5008) (flmod . k5007) (flmin . k5006) (flmax . k5005) (fllog . k5004) (flinteger? . k5003) (flinfinite? . k5002) (flfloor . k5001) (flfinite? . k5000) (flexpt . k4fff) (flexp . k4ffe) (fleven? . k4ffd) (fldiv0-and-mod0 . k4ffc) (fldiv0 . k4ffb) (fldiv-and-mod . k4ffa) (fldiv . k4ff9) (fldenominator . k4ff8) (flcos . k4ff7) (flceiling . k4ff6) (flatan . k4ff5) (flasin . k4ff4) (flacos . k4ff3) (flabs . k4ff2) (fl>? . k4ff1) (fl>=? . k4ff0) (fl=? . k4fef) (fl<? . k4fee) (fl<=? . k4fed) (fl/ . k4fec) (fl- . k4feb) (fl+ . k4fea) (fl* . k4fe9) (fixnum->flonum . k4fe8) (&no-nans . k4f06) (&no-infinities . k4f05)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k519f '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . k50ef) (string-ci-hash . k50ee) (string-hash . k50ed) (equal-hash . k50ec) (hashtable-equivalence-function . k50eb) (make-hashtable . k50ea) (hashtable-hash-function . k50e9) (make-eqv-hashtable . k50e8) (make-eq-hashtable . k50e7) (hashtable? . k50e6) (hashtable-update! . k50e5) (hashtable-size . k50e4) (hashtable-set! . k50e3) (hashtable-ref . k50e2) (hashtable-mutable? . k50e1) (hashtable-keys . k50e0) (hashtable-entries . k50df) (hashtable-delete! . k50de) (hashtable-copy . k50dd) (hashtable-contains? . k50dc) (hashtable-clear! . k50db)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . k50cb) (eof-object . k50ca) (current-error-port . k50c9) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (utf-8-codec . k50c4) (utf-16-codec . k50c3) (transcoder-error-handling-mode . k50c2) (transcoder-eol-style . k50c1) (transcoder-codec . k50c0) (transcoded-port . k50bf) (textual-port? . k50be) (string->bytevector . k50bd) (standard-output-port . k50bc) (standard-input-port . k50bb) (standard-error-port . k50ba) (set-port-position! . k50b9) (put-u8 . k50b8) (put-string . k50b7) (put-datum . k50b6) (put-char . k50b5) (put-bytevector . k50b4) (port? . k50b3) (port-transcoder . k50b2) (port-position . k50b1) (port-has-set-port-position!? . k50b0) (port-has-port-position? . k50af) (port-eof? . k50ae) (output-port-buffer-mode . k50ad) (open-string-output-port . k50ac) (open-string-input-port . k50ab) (open-file-output-port . k50aa) (open-file-input/output-port . k50a9) (open-file-input-port . k50a8) (open-bytevector-output-port . k50a7) (open-bytevector-input-port . k50a6) (native-transcoder . k50a5) (native-eol-style . k50a4) (make-transcoder . k50a3) (latin-1-codec . k50a2) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (make-i/o-encoding-error . k4c44) (make-i/o-decoding-error . k4c2d) (make-custom-textual-output-port . k50a1) (make-custom-textual-input/output-port . k50a0) (make-custom-textual-input-port . k509f) (make-custom-binary-output-port . k509e) (make-custom-binary-input/output-port . k509d) (make-custom-binary-input-port . k509c) (lookahead-u8 . k509a) (lookahead-char . k5099) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (i/o-encoding-error? . k4c48) (i/o-encoding-error-char . k4c4a) (i/o-decoding-error? . k4c2f) (get-u8 . k5098) (get-string-n! . k5097) (get-string-n . k5096) (get-string-all . k5095) (get-line . k5094) (get-datum . k5093) (get-char . k5092) (get-bytevector-some . k5091) (get-bytevector-n! . k5090) (get-bytevector-n . k508f) (get-bytevector-all . k508e) (flush-output-port . k508d) (close-port . k508c) (call-with-string-output-port . k506b) (call-with-port . k506a) (call-with-bytevector-output-port . k5069) (bytevector->string . k5068) (buffer-mode? . k5067) (binary-port? . k5066) (&i/o-encoding . k4f04) (&i/o-decoding . k4f03) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9) (error-handling-mode . k4ede) (file-options . k4edd) (buffer-mode . k4edc) (eol-style . k4edb)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . k5062) (enum-set=? . k5061) (enum-set-universe . k5060) (enum-set-union . k505f) (enum-set-subset? . k505e) (enum-set-projection . k505d) (enum-set-member? . k505c) (enum-set-intersection . k505b) (enum-set-indexer . k505a) (enum-set-difference . k5059) (enum-set-constructor . k5058) (enum-set-complement . k5057) (enum-set->list . k5056) (define-enumeration . k4ee9)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . k4abf) (warning? . k4a37) (violation? . k4a76) (undefined-violation? . k4b36) (syntax-violation? . k4b1d) (syntax-violation-subform . k4b21) (syntax-violation-form . k4b1f) (syntax-violation . k2fb1) (simple-conditions . k5055) (serious-condition? . k4a4c) (non-continuable-violation? . k4ad6) (message-condition? . k4a20) (make-who-condition . k4abb) (make-warning . k4a35) (make-violation . k4a74) (make-undefined-violation . k4b34) (make-syntax-violation . k4b17) (make-serious-condition . k4a4a) (make-non-continuable-violation . k4ad4) (make-message-condition . k4a1c) (make-lexical-violation . k4afe) (make-irritants-condition . k4aa0) (make-implementation-restriction-violation . k4ae9) (make-error . k4a5f) (make-assertion-violation . k4a89) (lexical-violation? . k4b00) (irritants-condition? . k4aa4) (implementation-restriction-violation? . k4aeb) (error? . k4a61) (condition-who . k4ac1) (condition-predicate . k5054) (condition-message . k4a22) (condition-irritants . k4aa6) (condition-accessor . k5053) (condition . k5052) (assertion-violation? . k4a8b) (condition? . k5051) (&undefined . k4ef8) (&syntax . k4ef7) (&lexical . k4ef6) (&implementation-restriction . k4ef5) (&non-continuable . k4ef4) (&who . k4ef3) (&irritants . k4ef2) (&assertion . k4ef1) (&violation . k4ef0) (&error . k4eef) (&serious . k4eee) (&warning . k4eed) (&message . k4eec) (&condition . k4eeb) (define-condition-type . k4eea)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a3 '(rnrs records inspection) '(6) '() '() '() '((record? . k50fe) (record-type-uid . k50fd) (record-type-sealed? . k50fc) (record-type-parent . k50fb) (record-type-opaque? . k50fa) (record-type-name . k50f9) (record-type-generative? . k50f8) (record-type-field-names . k50f7) (record-rtd . k50f6) (record-field-mutable? . k50f5)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . k5105) (record-predicate . k5104) (record-mutator . k5103) (record-constructor . k5102) (record-accessor . k5101) (make-record-type-descriptor . k5100) (make-record-constructor-descriptor . k50ff)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . k4ee8) (parent-rtd . k4ee7) (nongenerative . k4ee6) (opaque . k4ee5) (sealed . k4ee4) (protocol . k4ee3) (parent . k4ee2) (immutable . k4ee1) (mutable . k4ee0) (fields . k4edf) (record-constructor-descriptor . k4ebe) (record-type-descriptor . k4ebd)) '() values values '#f '#f '#t '#f) (k2ae0@k297f@install-library 'k51a6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . k4c78) (&no-nans-rtd . k4c76) (&no-infinities-rcd . k4c63) (&no-infinities-rtd . k4c61) (&i/o-encoding-rcd . k4c4e) (&i/o-encoding-rtd . k4c4c) (&i/o-decoding-rcd . k4c33) (&i/o-decoding-rtd . k4c31) (&i/o-port-rcd . k4c1e) (&i/o-port-rtd . k4c1c) (&i/o-file-does-not-exist-rcd . k4c03) (&i/o-file-does-not-exist-rtd . k4c01) (&i/o-file-already-exists-rcd . k4bee) (&i/o-file-already-exists-rtd . k4bec) (&i/o-file-is-read-only-rcd . k4bd9) (&i/o-file-is-read-only-rtd . k4bd7) (&i/o-file-protection-rcd . k4bc4) (&i/o-file-protection-rtd . k4bc2) (&i/o-filename-rcd . k4baf) (&i/o-filename-rtd . k4bad) (&i/o-invalid-position-rcd . k4b94) (&i/o-invalid-position-rtd . k4b92) (&i/o-write-rcd . k4b79) (&i/o-write-rtd . k4b77) (&i/o-read-rcd . k4b64) (&i/o-read-rtd . k4b62) (&i/o-rcd . k4b4f) (&i/o-rtd . k4b4d) (&undefined-rcd . k4b3a) (&undefined-rtd . k4b38) (&syntax-rcd . k4b25) (&syntax-rtd . k4b23) (&lexical-rcd . k4b04) (&lexical-rtd . k4b02) (&implementation-restriction-rcd . k4aef) (&implementation-restriction-rtd . k4aed) (&non-continuable-rcd . k4ada) (&non-continuable-rtd . k4ad8) (&who-rcd . k4ac5) (&who-rtd . k4ac3) (&irritants-rcd . k4aaa) (&irritants-rtd . k4aa8) (&assertion-rcd . k4a8f) (&assertion-rtd . k4a8d) (&violation-rcd . k4a7a) (&violation-rtd . k4a78) (&error-rcd . k4a65) (&error-rtd . k4a63) (&serious-rcd . k4a50) (&serious-rtd . k4a4e) (&warning-rcd . k4a3b) (&warning-rtd . k4a39) (&message-rcd . k4a26) (&message-rtd . k4a24) (&condition-rcd . k49c7) (&condition-rtd . k49c5) (syntax-error . k2fad) (syntax-dispatch . k2ec8) (pretty-print . k5186) (eval-core . k5185) (set-symbol-value! . k5184) (symbol-value . k5183) (gensym . k5182) (void . k5181) (load . k4d85) (interaction-environment . k2fbd) (char-ready? . k5180) (regexp? . k517f) (read-line . k517e) (ungensym . k517d) (alist->eq-hash-table . k517c) (assoc-ref . k517b) (print . k517a) (format . k5179) (host-os . k5178) (library-path . k295e) (standard-library-path . k5177) (file-newer? . k5176) (stat-mtime . k5175) (write-to-file . k5174) (file->list . k5173) (file->string . k5172) (digit->integer . k5171) (call-with-string-input-port . k5170) (call-with-string-io . k516f) (string-split . k516e) (bytevector-for-each . k516d) (string->regexp . k516c) (rxmatch . k516b) (regexp-replace-all . k516a) (hashtable-for-each . k5169) (call-process . k5168) (local-tz-offset . k5167) (microseconds . k5166) (readdir . k5165) (set-current-directory! . k5164) (expand-path . k5163) (current-directory . k5162) (%spawn . k5161) (%waitpid . k5160) (%ffi-supported? . k515f) (%ffi-pointer-ref . k515e) (%ffi-pointer->string . k515d) (%ffi-call->string-or-zero . k515c) (%ffi-call->double . k515b) (%ffi-call->void* . k515a) (%ffi-call->void . k5159) (%ffi-call->int . k5158) (%ffi-lookup . k5157) (%ffi-open . k5156) (%fork . k5155) (%pipe . k5154) (p . k5153) (open-output-string . k5152) (get-output-string . k5151) (get-environment-variables . k5150) (get-environment-variable . k514f) (get-timeofday . k514e) (get-command-line . k514d) (sys-display . k514c) (whereis . k514b) (register . k514a) (vm-join! . k5149) (vm-set-value! . k5148) (vm? . k5147) (main-vm? . k5146) (vm-eval . k5145) (vm-self . k5144) (vm-start! . k5143) (make-vm . k5142) (mutex-try-lock! . k5141) (mutex-unlock! . k5140) (mutex-lock! . k513f) (mutex? . k513e) (make-mutex . k513d) (condition-variable-notify-all! . k513c) (condition-variable-notify! . k513b) (condition-variable-wait! . k513a) (make-condition-variable . k5139) (mosh-executable-path . k5138) (make-file-options . k5137) (source-info . k5136) (make-compiler-instruction . k5135) (make-instruction . k5134) (set-source-info! . k5133) (bignum? . k5132) (fast-equal? . k5131) (fasl-read . k5130) (fasl-write . k512f) (time-usage . k512e) (os-constant . k512d) (make-parameter . k2791) (socket-port . k512c) (socket-shutdown . k512b) (socket-close . k512a) (socket-send . k5129) (socket-recv! . k5128) (socket-recv . k5127) (make-server-socket . k5126) (make-client-socket . k5125) (socket-accept . k5124) (socket? . k5123) (string-upcase . k5122) (string-titlecase . k5121) (string-normalize-nfkd . k5120) (string-normalize-nfkc . k511f) (string-normalize-nfd . k511e) (string-normalize-nfc . k511d) (string-foldcase . k511c) (string-downcase . k511b) (string-ci>? . k511a) (string-ci>=? . k5119) (string-ci=? . k5118) (string-ci<? . k5117) (string-ci<=? . k5116) (char-whitespace? . k5115) (char-upper-case? . k5114) (char-title-case? . k5113) (char-numeric? . k5112) (char-lower-case? . k5111) (char-general-category . k5110) (char-upcase . k510f) (char-titlecase . k510e) (char-foldcase . k510d) (char-downcase . k510c) (char-ci>? . k510b) (char-ci>=? . k510a) (char-ci=? . k5109) (char-ci<? . k5108) (char-ci<=? . k5107) (char-alphabetic? . k5106) (make-variable-transformer . k2cf5) (identifier? . k2fb3) (generate-temporaries . k2f9f) (free-identifier=? . k2fa1) (syntax->datum . k2fb7) (datum->syntax . k2fb5) (bound-identifier=? . k2fa3) (record-type-descriptor? . k5105) (record-predicate . k5104) (record-mutator . k5103) (record-constructor . k5102) (record-accessor . k5101) (make-record-type-descriptor . k5100) (make-record-constructor-descriptor . k50ff) (record? . k50fe) (record-type-uid . k50fd) (record-type-sealed? . k50fc) (record-type-parent . k50fb) (record-type-opaque? . k50fa) (record-type-name . k50f9) (record-type-generative? . k50f8) (record-type-field-names . k50f7) (record-rtd . k50f6) (record-field-mutable? . k50f5) (delete-file . k50f4) (file-exists? . k50f3) (vector-sort! . k50f2) (vector-sort . k50f1) (list-sort . k50f0) (symbol-hash . k50ef) (string-ci-hash . k50ee) (string-hash . k50ed) (equal-hash . k50ec) (hashtable-equivalence-function . k50eb) (make-hashtable . k50ea) (hashtable-hash-function . k50e9) (make-eqv-hashtable . k50e8) (make-eq-hashtable . k50e7) (hashtable? . k50e6) (hashtable-update! . k50e5) (hashtable-size . k50e4) (hashtable-set! . k50e3) (hashtable-ref . k50e2) (hashtable-mutable? . k50e1) (hashtable-keys . k50e0) (hashtable-entries . k50df) (hashtable-delete! . k50de) (hashtable-copy . k50dd) (hashtable-contains? . k50dc) (hashtable-clear! . k50db) (call-with-output-file . k50da) (call-with-input-file . k50d9) (write-char . k50d8) (write . k50d7) (with-output-to-file . k50d6) (with-input-from-file . k50d5) (read-char . k50d4) (read . k50d3) (peek-char . k50d2) (open-output-file . k50d1) (open-input-file . k50d0) (newline . k50cf) (display . k50ce) (close-output-port . k50cd) (close-input-port . k50cc) (eof-object? . k50cb) (eof-object . k50ca) (current-error-port . k50c9) (current-output-port . k50c8) (current-input-port . k50c7) (output-port? . k50c6) (input-port? . k50c5) (utf-8-codec . k50c4) (utf-16-codec . k50c3) (transcoder-error-handling-mode . k50c2) (transcoder-eol-style . k50c1) (transcoder-codec . k50c0) (transcoded-port . k50bf) (textual-port? . k50be) (string->bytevector . k50bd) (standard-output-port . k50bc) (standard-input-port . k50bb) (standard-error-port . k50ba) (set-port-position! . k50b9) (put-u8 . k50b8) (put-string . k50b7) (put-datum . k50b6) (put-char . k50b5) (put-bytevector . k50b4) (port? . k50b3) (port-transcoder . k50b2) (port-position . k50b1) (port-has-set-port-position!? . k50b0) (port-has-port-position? . k50af) (port-eof? . k50ae) (output-port-buffer-mode . k50ad) (open-string-output-port . k50ac) (open-string-input-port . k50ab) (open-file-output-port . k50aa) (open-file-input/output-port . k50a9) (open-file-input-port . k50a8) (open-bytevector-output-port . k50a7) (open-bytevector-input-port . k50a6) (native-transcoder . k50a5) (native-eol-style . k50a4) (make-transcoder . k50a3) (latin-1-codec . k50a2) (make-i/o-write-error . k4b73) (make-i/o-read-error . k4b5e) (make-i/o-port-error . k4c14) (make-i/o-invalid-position-error . k4b8a) (make-i/o-filename-error . k4ba5) (make-i/o-file-protection-error . k4bbe) (make-i/o-file-is-read-only-error . k4bd3) (make-i/o-file-does-not-exist-error . k4bfd) (make-i/o-file-already-exists-error . k4be8) (make-i/o-error . k4b49) (make-i/o-encoding-error . k4c44) (make-i/o-decoding-error . k4c2d) (make-custom-textual-output-port . k50a1) (make-custom-textual-input/output-port . k50a0) (make-custom-textual-input-port . k509f) (make-custom-binary-output-port . k509e) (make-custom-binary-input/output-port . k509d) (make-custom-binary-input-port . k509c) (make-bytevector . k509b) (lookahead-u8 . k509a) (lookahead-char . k5099) (i/o-write-error? . k4b75) (i/o-read-error? . k4b60) (i/o-port-error? . k4c18) (i/o-invalid-position-error? . k4b8e) (i/o-filename-error? . k4ba9) (i/o-file-protection-error? . k4bc0) (i/o-file-is-read-only-error? . k4bd5) (i/o-file-does-not-exist-error? . k4bff) (i/o-file-already-exists-error? . k4bea) (i/o-error? . k4b4b) (i/o-error-position . k4b90) (i/o-error-port . k4c1a) (i/o-error-filename . k4bab) (i/o-encoding-error? . k4c48) (i/o-encoding-error-char . k4c4a) (i/o-decoding-error? . k4c2f) (get-u8 . k5098) (get-string-n! . k5097) (get-string-n . k5096) (get-string-all . k5095) (get-line . k5094) (get-datum . k5093) (get-char . k5092) (get-bytevector-some . k5091) (get-bytevector-n! . k5090) (get-bytevector-n . k508f) (get-bytevector-all . k508e) (flush-output-port . k508d) (close-port . k508c) (scheme-report-environment . k2f8d) (quotient . k508b) (null-environment . k2f8b) (remainder . k508a) (modulo . k5089) (inexact->exact . k5088) (force . k5087) (exact->inexact . k5086) (make-promise . k5085) (exit . k5084) (command-line . k4d7f) (string-fill! . k5083) (string-set! . k5082) (set-cdr! . k5081) (set-car! . k5080) (remove . k507f) (remv . k507e) (remp . k507d) (remq . k507c) (partition . k507b) (memv . k507a) (memq . k5079) (memp . k5078) (member . k5077) (exists . k5076) (for-all . k5075) (fold-right . k5074) (fold-left . k5073) (find . k5072) (filter . k5071) (cons* . k5070) (assv . k506f) (assq . k506e) (assp . k506d) (assoc . k506c) (call-with-string-output-port . k506b) (call-with-port . k506a) (call-with-bytevector-output-port . k5069) (bytevector->string . k5068) (buffer-mode? . k5067) (binary-port? . k5066) (with-exception-handler . k5065) (raise-continuable . k5064) (raise . k5063) (eval . k2f91) (environment . k2f89) (make-enumeration . k5062) (enum-set=? . k5061) (enum-set-universe . k5060) (enum-set-union . k505f) (enum-set-subset? . k505e) (enum-set-projection . k505d) (enum-set-member? . k505c) (enum-set-intersection . k505b) (enum-set-indexer . k505a) (enum-set-difference . k5059) (enum-set-constructor . k5058) (enum-set-complement . k5057) (enum-set->list . k5056) (who-condition? . k4abf) (warning? . k4a37) (violation? . k4a76) (undefined-violation? . k4b36) (syntax-violation? . k4b1d) (syntax-violation-subform . k4b21) (syntax-violation-form . k4b1f) (syntax-violation . k2fb1) (simple-conditions . k5055) (serious-condition? . k4a4c) (non-continuable-violation? . k4ad6) (message-condition? . k4a20) (make-who-condition . k4abb) (make-warning . k4a35) (make-violation . k4a74) (make-undefined-violation . k4b34) (make-syntax-violation . k4b17) (make-serious-condition . k4a4a) (make-non-continuable-violation . k4ad4) (make-message-condition . k4a1c) (make-lexical-violation . k4afe) (make-irritants-condition . k4aa0) (make-implementation-restriction-violation . k4ae9) (make-error . k4a5f) (make-assertion-violation . k4a89) (lexical-violation? . k4b00) (irritants-condition? . k4aa4) (implementation-restriction-violation? . k4aeb) (error? . k4a61) (condition-who . k4ac1) (condition-predicate . k5054) (condition-message . k4a22) (condition-irritants . k4aa6) (condition-accessor . k5053) (condition . k5052) (assertion-violation? . k4a8b) (condition? . k5051) (utf32->string . k5050) (utf16->string . k504f) (utf8->string . k504e) (uint-list->bytevector . k504d) (u8-list->bytevector . k504c) (string->utf8 . k504b) (string->utf32 . k504a) (string->utf16 . k5049) (sint-list->bytevector . k5048) (native-endianness . k5047) (bytevector? . k5046) (bytevector=? . k5045) (bytevector-uint-set! . k5044) (bytevector-uint-ref . k5043) (bytevector-u8-set! . k5042) (bytevector-u8-ref . k5041) (bytevector-u64-set! . k5040) (bytevector-u64-ref . k503f) (bytevector-u64-native-set! . k503e) (bytevector-u64-native-ref . k503d) (bytevector-u32-set! . k503c) (bytevector-u32-ref . k503b) (bytevector-u32-native-set! . k503a) (bytevector-u32-native-ref . k5039) (bytevector-u16-set! . k5038) (bytevector-u16-ref . k5037) (bytevector-u16-native-set! . k5036) (bytevector-u16-native-ref . k5035) (bytevector-sint-set! . k5034) (bytevector-sint-ref . k5033) (bytevector-s8-set! . k5032) (bytevector-s8-ref . k5031) (bytevector-s64-set! . k5030) (bytevector-s64-ref . k502f) (bytevector-s64-native-set! . k502e) (bytevector-s64-native-ref . k502d) (bytevector-s32-set! . k502c) (bytevector-s32-ref . k502b) (bytevector-s32-native-set! . k502a) (bytevector-s32-native-ref . k5029) (bytevector-s16-set! . k5028) (bytevector-s16-ref . k5027) (bytevector-s16-native-set! . k5026) (bytevector-s16-native-ref . k5025) (bytevector-length . k5024) (bytevector-ieee-single-ref . k5023) (bytevector-ieee-single-set! . k5022) (bytevector-ieee-single-native-set! . k5021) (bytevector-ieee-single-native-ref . k5020) (bytevector-ieee-double-set! . k501f) (bytevector-ieee-double-ref . k501e) (bytevector-ieee-double-native-set! . k501d) (bytevector-ieee-double-native-ref . k501c) (bytevector-fill! . k501b) (bytevector-copy! . k501a) (bytevector-copy . k5019) (bytevector->uint-list . k5018) (bytevector->u8-list . k5017) (bytevector->sint-list . k5016) (no-nans-violation? . k4c74) (no-infinities-violation? . k4c5f) (make-no-nans-violation . k4c72) (make-no-infinities-violation . k4c5d) (real->flonum . k5015) (flzero? . k5014) (fltruncate . k5013) (fltan . k5012) (flsqrt . k5011) (flsin . k5010) (flround . k500f) (flpositive? . k500e) (flonum? . k500d) (flodd? . k500c) (flnumerator . k500b) (flnegative? . k500a) (flnan? . k5009) (flmod0 . k5008) (flmod . k5007) (flmin . k5006) (flmax . k5005) (fllog . k5004) (flinteger? . k5003) (flinfinite? . k5002) (flfloor . k5001) (flfinite? . k5000) (flexpt . k4fff) (flexp . k4ffe) (fleven? . k4ffd) (fldiv0-and-mod0 . k4ffc) (fldiv0 . k4ffb) (fldiv-and-mod . k4ffa) (fldiv . k4ff9) (fldenominator . k4ff8) (flcos . k4ff7) (flceiling . k4ff6) (flatan . k4ff5) (flasin . k4ff4) (flacos . k4ff3) (flabs . k4ff2) (fl>? . k4ff1) (fl>=? . k4ff0) (fl=? . k4fef) (fl<? . k4fee) (fl<=? . k4fed) (fl/ . k4fec) (fl- . k4feb) (fl+ . k4fea) (fl* . k4fe9) (fixnum->flonum . k4fe8) (fxzero? . k4fe7) (fxxor . k4fe6) (fxrotate-bit-field . k4fe5) (fxreverse-bit-field . k4fe4) (fxpositive? . k4fe3) (fxodd? . k4fe2) (fxnot . k4fe1) (fxnegative? . k4fe0) (fxmod0 . k4fdf) (fxmod . k4fde) (fxmin . k4fdd) (fxmax . k4fdc) (fxlength . k4fdb) (fxior . k4fda) (fxif . k4fd9) (fxfirst-bit-set . k4fd8) (fxeven? . k4fd7) (fxdiv0-and-mod0 . k4fd6) (fxdiv0 . k4fd5) (fxdiv-and-mod . k4fd4) (fxdiv . k4fd3) (fxcopy-bit-field . k4fd2) (fxcopy-bit . k4fd1) (fxbit-set? . k4fd0) (fxbit-field . k4fcf) (fxbit-count . k4fce) (fxarithmetic-shift-right . k4fcd) (fxarithmetic-shift-left . k4fcc) (fxarithmetic-shift . k4fcb) (fxand . k4fca) (fx>? . k4fc9) (fx>=? . k4fc8) (fx=? . k4fc7) (fx<? . k4fc6) (fx<=? . k4fc5) (fx-/carry . k4fc4) (fx- . k4fc3) (fx+/carry . k4fc2) (fx+ . k4fc1) (fx*/carry . k4fc0) (fx* . k4fbf) (greatest-fixnum . k4fbe) (least-fixnum . k4fbd) (fixnum-width . k4fbc) (fixnum? . k4fbb) (bitwise-rotate-bit-field . k4fba) (bitwise-reverse-bit-field . k4fb9) (bitwise-length . k4fb8) (bitwise-if . k4fb7) (bitwise-first-bit-set . k4fb6) (bitwise-copy-bit-field . k4fb5) (bitwise-copy-bit . k4fb4) (bitwise-bit-set? . k4fb3) (bitwise-bit-field . k4fb2) (bitwise-bit-count . k4fb1) (bitwise-xor . k4fb0) (bitwise-ior . k4faf) (bitwise-and . k4fae) (bitwise-not . k4fad) (bitwise-arithmetic-shift-right . k4fac) (bitwise-arithmetic-shift-left . k4fab) (bitwise-arithmetic-shift . k4faa) (zero? . k4fa9) (vector? . k4fa8) (vector-set! . k4fa7) (vector-ref . k4fa6) (vector-map . k4fa5) (vector-length . k4fa4) (vector-for-each . k4fa3) (vector-fill! . k4fa2) (vector->list . k4fa1) (vector . k4fa0) (values . k4f9f) (truncate . k4f9e) (tan . k4f9d) (symbol? . k4f9c) (symbol=? . k4f9b) (symbol->string . k4f9a) (substring . k4f99) (string? . k4f98) (string>? . k4f97) (string>=? . k4f96) (string=? . k4f95) (string<? . k4f94) (string<=? . k4f93) (string-ref . k4f92) (string-length . k4f91) (string-for-each . k4f90) (string-copy . k4f8f) (string-append . k4f8e) (string->symbol . k4f8d) (string->number . k4f8c) (string->list . k4f8b) (string . k4f8a) (sqrt . k4f89) (sin . k4f88) (round . k4f87) (reverse . k4f86) (real? . k4f85) (real-valued? . k4f84) (real-part . k4f83) (rationalize . k4f82) (rational? . k4f81) (rational-valued? . k4f80) (procedure? . k4f7f) (positive? . k4f7e) (pair? . k4f7d) (odd? . k4f7c) (numerator . k4f7b) (number? . k4f7a) (number->string . k4f79) (null? . k4f78) (not . k4f77) (negative? . k4f76) (nan? . k4f75) (min . k4f74) (max . k4f73) (map . k4f72) (make-vector . k4f71) (make-string . k4f70) (make-rectangular . k4f6f) (make-polar . k4f6e) (magnitude . k4f6d) (log . k4f6c) (list? . k4f6b) (list-tail . k4f6a) (list-ref . k4f69) (list->vector . k4f68) (list->string . k4f67) (list . k4f66) (length . k4f65) (lcm . k4f64) (integer? . k4f63) (integer-valued? . k4f62) (integer->char . k4f61) (infinite? . k4f60) (inexact? . k4f5f) (inexact . k4f5e) (imag-part . k4f5d) (gcd . k4f5c) (for-each . k4f5b) (floor . k4f5a) (finite? . k4f59) (expt . k4f58) (exp . k4f57) (exact? . k4f56) (exact-integer-sqrt . k4f55) (exact . k4f54) (even? . k4f53) (error . k4f52) (eqv? . k4f51) (equal? . k4f50) (eq? . k4f4f) (dynamic-wind . k4f4e) (div0-and-mod0 . k4f4d) (mod0 . k4f4c) (div0 . k4f4b) (div-and-mod . k4f4a) (mod . k4f49) (div . k4f48) (denominator . k4f47) (cos . k4f46) (cons . k4f45) (complex? . k4f44) (char? . k4f43) (char>? . k4f42) (char>=? . k4f41) (char=? . k4f40) (char<? . k4f3f) (char<=? . k4f3e) (char->integer . k4f3d) (ceiling . k4f3c) (call-with-values . k4f3b) (call/cc . k4f3a) (call-with-current-continuation . k4f39) (cddddr . k4f38) (cdddar . k4f37) (cddadr . k4f36) (cddaar . k4f35) (cdaddr . k4f34) (cdadar . k4f33) (cdaadr . k4f32) (cdaaar . k4f31) (cadddr . k4f30) (caddar . k4f2f) (cadadr . k4f2e) (cadaar . k4f2d) (caaddr . k4f2c) (caadar . k4f2b) (caaadr . k4f2a) (caaaar . k4f29) (cdddr . k4f28) (cddar . k4f27) (cdadr . k4f26) (cdaar . k4f25) (caddr . k4f24) (cadar . k4f23) (caadr . k4f22) (caaar . k4f21) (cddr . k4f20) (cdar . k4f1f) (cadr . k4f1e) (caar . k4f1d) (cdr . k4f1c) (car . k4f1b) (boolean? . k4f1a) (boolean=? . k4f19) (atan . k4f18) (assertion-violation . k4f17) (assertion-error . k2fab) (asin . k4f16) (apply . k4f15) (append . k4f14) (angle . k4f13) (acos . k4f12) (abs . k4f11) (/ . k4f10) (* . k4f0f) (- . k4f0e) (+ . k4f0d) (>= . k4f0c) (> . k4f0b) (= . k4f0a) (<= . k4f09) (< . k4f08) (library . k4f07) (&no-nans . k4f06) (&no-infinities . k4f05) (&i/o-encoding . k4f04) (&i/o-decoding . k4f03) (&i/o-port . k4f02) (&i/o-file-does-not-exist . k4f01) (&i/o-file-already-exists . k4f00) (&i/o-file-is-read-only . k4eff) (&i/o-file-protection . k4efe) (&i/o-filename . k4efd) (&i/o-invalid-position . k4efc) (&i/o-write . k4efb) (&i/o-read . k4efa) (&i/o . k4ef9) (&undefined . k4ef8) (&syntax . k4ef7) (&lexical . k4ef6) (&implementation-restriction . k4ef5) (&non-continuable . k4ef4) (&who . k4ef3) (&irritants . k4ef2) (&assertion . k4ef1) (&violation . k4ef0) (&error . k4eef) (&serious . k4eee) (&warning . k4eed) (&message . k4eec) (&condition . k4eeb) (define-condition-type . k4eea) (define-enumeration . k4ee9) (define-record-type . k4ee8) (parent-rtd . k4ee7) (nongenerative . k4ee6) (opaque . k4ee5) (sealed . k4ee4) (protocol . k4ee3) (parent . k4ee2) (immutable . k4ee1) (mutable . k4ee0) (fields . k4edf) (error-handling-mode . k4ede) (file-options . k4edd) (buffer-mode . k4edc) (eol-style . k4edb) (guard . k4eda) (trace-define . k4ed9) (trace-lambda . k4ed8) (unsyntax-splicing . k4ed7) (unsyntax . k4ed6) (unquote-splicing . k4ed5) (unquote . k4ed4) (_ . k4ed3) (else . k4ed2) (=> . k4ed1) (... . k4ed0) (assert . k4ecf) (endianness . k4ece) (delay . k4ecd) (time . k4ecc) (do . k4ecb) (cond . k4eca) (let* . k4ec9) (let . k4ec8) (let*-values . k4ec7) (let-values . k4ec6) (identifier-syntax . k4ec5) (with-syntax . k4ec4) (quasisyntax . k4ec3) (quasiquote . k4ec2) (syntax-rules . k4ec1) (include . k4ec0) (define-struct . k4ebf) (record-constructor-descriptor . k4ebe) (record-type-descriptor . k4ebd) (case . k4ebc) (parameterize . k4ebb) (unless . k4eba) (when . k4eb9) (or . k4eb8) (and . k4eb7) (if . k4eb6) (letrec* . k4eb5) (letrec . k4eb4) (type-descriptor . k4eb3) (case-lambda . k4eb2) (lambda . k4eb1) (syntax . k4eb0) (syntax-case . k4eaf) (quote . k4eae) (foreign-call . k4ead) (letrec-syntax . k4eac) (let-syntax . k4eab) (set! . k4eaa) (import . k4ea9) (begin . k4ea8) (module . k4ea7) (define-syntax . k4ea6) (define . k4ea5)) '((k4c78 core-prim . &no-nans-rcd) (k4c76 core-prim . &no-nans-rtd) (k4c63 core-prim . &no-infinities-rcd) (k4c61 core-prim . &no-infinities-rtd) (k4c4e core-prim . &i/o-encoding-rcd) (k4c4c core-prim . &i/o-encoding-rtd) (k4c33 core-prim . &i/o-decoding-rcd) (k4c31 core-prim . &i/o-decoding-rtd) (k4c1e core-prim . &i/o-port-rcd) (k4c1c core-prim . &i/o-port-rtd) (k4c03 core-prim . &i/o-file-does-not-exist-rcd) (k4c01 core-prim . &i/o-file-does-not-exist-rtd) (k4bee core-prim . &i/o-file-already-exists-rcd) (k4bec core-prim . &i/o-file-already-exists-rtd) (k4bd9 core-prim . &i/o-file-is-read-only-rcd) (k4bd7 core-prim . &i/o-file-is-read-only-rtd) (k4bc4 core-prim . &i/o-file-protection-rcd) (k4bc2 core-prim . &i/o-file-protection-rtd) (k4baf core-prim . &i/o-filename-rcd) (k4bad core-prim . &i/o-filename-rtd) (k4b94 core-prim . &i/o-invalid-position-rcd) (k4b92 core-prim . &i/o-invalid-position-rtd) (k4b79 core-prim . &i/o-write-rcd) (k4b77 core-prim . &i/o-write-rtd) (k4b64 core-prim . &i/o-read-rcd) (k4b62 core-prim . &i/o-read-rtd) (k4b4f core-prim . &i/o-rcd) (k4b4d core-prim . &i/o-rtd) (k4b3a core-prim . &undefined-rcd) (k4b38 core-prim . &undefined-rtd) (k4b25 core-prim . &syntax-rcd) (k4b23 core-prim . &syntax-rtd) (k4b04 core-prim . &lexical-rcd) (k4b02 core-prim . &lexical-rtd) (k4aef core-prim . &implementation-restriction-rcd) (k4aed core-prim . &implementation-restriction-rtd) (k4ada core-prim . &non-continuable-rcd) (k4ad8 core-prim . &non-continuable-rtd) (k4ac5 core-prim . &who-rcd) (k4ac3 core-prim . &who-rtd) (k4aaa core-prim . &irritants-rcd) (k4aa8 core-prim . &irritants-rtd) (k4a8f core-prim . &assertion-rcd) (k4a8d core-prim . &assertion-rtd) (k4a7a core-prim . &violation-rcd) (k4a78 core-prim . &violation-rtd) (k4a65 core-prim . &error-rcd) (k4a63 core-prim . &error-rtd) (k4a50 core-prim . &serious-rcd) (k4a4e core-prim . &serious-rtd) (k4a3b core-prim . &warning-rcd) (k4a39 core-prim . &warning-rtd) (k4a26 core-prim . &message-rcd) (k4a24 core-prim . &message-rtd) (k49c7 core-prim . &condition-rcd) (k49c5 core-prim . &condition-rtd) (k2fad core-prim . syntax-error) (k2ec8 core-prim . syntax-dispatch) (k5186 core-prim . pretty-print) (k5185 core-prim . eval-core) (k5184 core-prim . set-symbol-value!) (k5183 core-prim . symbol-value) (k5182 core-prim . gensym) (k5181 core-prim . void) (k4d85 core-prim . load) (k2fbd core-prim . interaction-environment) (k5180 core-prim . char-ready?) (k517f core-prim . regexp?) (k517e core-prim . read-line) (k517d core-prim . ungensym) (k517c core-prim . alist->eq-hash-table) (k517b core-prim . assoc-ref) (k517a core-prim . print) (k5179 core-prim . format) (k5178 core-prim . host-os) (k295e core-prim . library-path) (k5177 core-prim . standard-library-path) (k5176 core-prim . file-newer?) (k5175 core-prim . stat-mtime) (k5174 core-prim . write-to-file) (k5173 core-prim . file->list) (k5172 core-prim . file->string) (k5171 core-prim . digit->integer) (k5170 core-prim . call-with-string-input-port) (k516f core-prim . call-with-string-io) (k516e core-prim . string-split) (k516d core-prim . bytevector-for-each) (k516c core-prim . string->regexp) (k516b core-prim . rxmatch) (k516a core-prim . regexp-replace-all) (k5169 core-prim . hashtable-for-each) (k5168 core-prim . call-process) (k5167 core-prim . local-tz-offset) (k5166 core-prim . microseconds) (k5165 core-prim . readdir) (k5164 core-prim . set-current-directory!) (k5163 core-prim . expand-path) (k5162 core-prim . current-directory) (k5161 core-prim . %spawn) (k5160 core-prim . %waitpid) (k515f core-prim . %ffi-supported?) (k515e core-prim . %ffi-pointer-ref) (k515d core-prim . %ffi-pointer->string) (k515c core-prim . %ffi-call->string-or-zero) (k515b core-prim . %ffi-call->double) (k515a core-prim . %ffi-call->void*) (k5159 core-prim . %ffi-call->void) (k5158 core-prim . %ffi-call->int) (k5157 core-prim . %ffi-lookup) (k5156 core-prim . %ffi-open) (k5155 core-prim . %fork) (k5154 core-prim . %pipe) (k5153 core-prim . p) (k5152 core-prim . open-output-string) (k5151 core-prim . get-output-string) (k5150 core-prim . get-environment-variables) (k514f core-prim . get-environment-variable) (k514e core-prim . get-timeofday) (k514d core-prim . get-command-line) (k514c core-prim . sys-display) (k514b core-prim . whereis) (k514a core-prim . register) (k5149 core-prim . vm-join!) (k5148 core-prim . vm-set-value!) (k5147 core-prim . vm?) (k5146 core-prim . main-vm?) (k5145 core-prim . vm-eval) (k5144 core-prim . vm-self) (k5143 core-prim . vm-start!) (k5142 core-prim . make-vm) (k5141 core-prim . mutex-try-lock!) (k5140 core-prim . mutex-unlock!) (k513f core-prim . mutex-lock!) (k513e core-prim . mutex?) (k513d core-prim . make-mutex) (k513c core-prim . condition-variable-notify-all!) (k513b core-prim . condition-variable-notify!) (k513a core-prim . condition-variable-wait!) (k5139 core-prim . make-condition-variable) (k5138 core-prim . mosh-executable-path) (k5137 core-prim . make-file-options) (k5136 core-prim . source-info) (k5135 core-prim . make-compiler-instruction) (k5134 core-prim . make-instruction) (k5133 core-prim . set-source-info!) (k5132 core-prim . bignum?) (k5131 core-prim . fast-equal?) (k5130 core-prim . fasl-read) (k512f core-prim . fasl-write) (k512e core-prim . time-usage) (k512d core-prim . os-constant) (k2791 core-prim . make-parameter) (k512c core-prim . socket-port) (k512b core-prim . socket-shutdown) (k512a core-prim . socket-close) (k5129 core-prim . socket-send) (k5128 core-prim . socket-recv!) (k5127 core-prim . socket-recv) (k5126 core-prim . make-server-socket) (k5125 core-prim . make-client-socket) (k5124 core-prim . socket-accept) (k5123 core-prim . socket?) (k5122 core-prim . string-upcase) (k5121 core-prim . string-titlecase) (k5120 core-prim . string-normalize-nfkd) (k511f core-prim . string-normalize-nfkc) (k511e core-prim . string-normalize-nfd) (k511d core-prim . string-normalize-nfc) (k511c core-prim . string-foldcase) (k511b core-prim . string-downcase) (k511a core-prim . string-ci>?) (k5119 core-prim . string-ci>=?) (k5118 core-prim . string-ci=?) (k5117 core-prim . string-ci<?) (k5116 core-prim . string-ci<=?) (k5115 core-prim . char-whitespace?) (k5114 core-prim . char-upper-case?) (k5113 core-prim . char-title-case?) (k5112 core-prim . char-numeric?) (k5111 core-prim . char-lower-case?) (k5110 core-prim . char-general-category) (k510f core-prim . char-upcase) (k510e core-prim . char-titlecase) (k510d core-prim . char-foldcase) (k510c core-prim . char-downcase) (k510b core-prim . char-ci>?) (k510a core-prim . char-ci>=?) (k5109 core-prim . char-ci=?) (k5108 core-prim . char-ci<?) (k5107 core-prim . char-ci<=?) (k5106 core-prim . char-alphabetic?) (k2cf5 core-prim . make-variable-transformer) (k2fb3 core-prim . identifier?) (k2f9f core-prim . generate-temporaries) (k2fa1 core-prim . free-identifier=?) (k2fb7 core-prim . syntax->datum) (k2fb5 core-prim . datum->syntax) (k2fa3 core-prim . bound-identifier=?) (k5105 core-prim . record-type-descriptor?) (k5104 core-prim . record-predicate) (k5103 core-prim . record-mutator) (k5102 core-prim . record-constructor) (k5101 core-prim . record-accessor) (k5100 core-prim . make-record-type-descriptor) (k50ff core-prim . make-record-constructor-descriptor) (k50fe core-prim . record?) (k50fd core-prim . record-type-uid) (k50fc core-prim . record-type-sealed?) (k50fb core-prim . record-type-parent) (k50fa core-prim . record-type-opaque?) (k50f9 core-prim . record-type-name) (k50f8 core-prim . record-type-generative?) (k50f7 core-prim . record-type-field-names) (k50f6 core-prim . record-rtd) (k50f5 core-prim . record-field-mutable?) (k50f4 core-prim . delete-file) (k50f3 core-prim . file-exists?) (k50f2 core-prim . vector-sort!) (k50f1 core-prim . vector-sort) (k50f0 core-prim . list-sort) (k50ef core-prim . symbol-hash) (k50ee core-prim . string-ci-hash) (k50ed core-prim . string-hash) (k50ec core-prim . equal-hash) (k50eb core-prim . hashtable-equivalence-function) (k50ea core-prim . make-hashtable) (k50e9 core-prim . hashtable-hash-function) (k50e8 core-prim . make-eqv-hashtable) (k50e7 core-prim . make-eq-hashtable) (k50e6 core-prim . hashtable?) (k50e5 core-prim . hashtable-update!) (k50e4 core-prim . hashtable-size) (k50e3 core-prim . hashtable-set!) (k50e2 core-prim . hashtable-ref) (k50e1 core-prim . hashtable-mutable?) (k50e0 core-prim . hashtable-keys) (k50df core-prim . hashtable-entries) (k50de core-prim . hashtable-delete!) (k50dd core-prim . hashtable-copy) (k50dc core-prim . hashtable-contains?) (k50db core-prim . hashtable-clear!) (k50da core-prim . call-with-output-file) (k50d9 core-prim . call-with-input-file) (k50d8 core-prim . write-char) (k50d7 core-prim . write) (k50d6 core-prim . with-output-to-file) (k50d5 core-prim . with-input-from-file) (k50d4 core-prim . read-char) (k50d3 core-prim . read) (k50d2 core-prim . peek-char) (k50d1 core-prim . open-output-file) (k50d0 core-prim . open-input-file) (k50cf core-prim . newline) (k50ce core-prim . display) (k50cd core-prim . close-output-port) (k50cc core-prim . close-input-port) (k50cb core-prim . eof-object?) (k50ca core-prim . eof-object) (k50c9 core-prim . current-error-port) (k50c8 core-prim . current-output-port) (k50c7 core-prim . current-input-port) (k50c6 core-prim . output-port?) (k50c5 core-prim . input-port?) (k50c4 core-prim . utf-8-codec) (k50c3 core-prim . utf-16-codec) (k50c2 core-prim . transcoder-error-handling-mode) (k50c1 core-prim . transcoder-eol-style) (k50c0 core-prim . transcoder-codec) (k50bf core-prim . transcoded-port) (k50be core-prim . textual-port?) (k50bd core-prim . string->bytevector) (k50bc core-prim . standard-output-port) (k50bb core-prim . standard-input-port) (k50ba core-prim . standard-error-port) (k50b9 core-prim . set-port-position!) (k50b8 core-prim . put-u8) (k50b7 core-prim . put-string) (k50b6 core-prim . put-datum) (k50b5 core-prim . put-char) (k50b4 core-prim . put-bytevector) (k50b3 core-prim . port?) (k50b2 core-prim . port-transcoder) (k50b1 core-prim . port-position) (k50b0 core-prim . port-has-set-port-position!?) (k50af core-prim . port-has-port-position?) (k50ae core-prim . port-eof?) (k50ad core-prim . output-port-buffer-mode) (k50ac core-prim . open-string-output-port) (k50ab core-prim . open-string-input-port) (k50aa core-prim . open-file-output-port) (k50a9 core-prim . open-file-input/output-port) (k50a8 core-prim . open-file-input-port) (k50a7 core-prim . open-bytevector-output-port) (k50a6 core-prim . open-bytevector-input-port) (k50a5 core-prim . native-transcoder) (k50a4 core-prim . native-eol-style) (k50a3 core-prim . make-transcoder) (k50a2 core-prim . latin-1-codec) (k4b73 core-prim . make-i/o-write-error) (k4b5e core-prim . make-i/o-read-error) (k4c14 core-prim . make-i/o-port-error) (k4b8a core-prim . make-i/o-invalid-position-error) (k4ba5 core-prim . make-i/o-filename-error) (k4bbe core-prim . make-i/o-file-protection-error) (k4bd3 core-prim . make-i/o-file-is-read-only-error) (k4bfd core-prim . make-i/o-file-does-not-exist-error) (k4be8 core-prim . make-i/o-file-already-exists-error) (k4b49 core-prim . make-i/o-error) (k4c44 core-prim . make-i/o-encoding-error) (k4c2d core-prim . make-i/o-decoding-error) (k50a1 core-prim . make-custom-textual-output-port) (k50a0 core-prim . make-custom-textual-input/output-port) (k509f core-prim . make-custom-textual-input-port) (k509e core-prim . make-custom-binary-output-port) (k509d core-prim . make-custom-binary-input/output-port) (k509c core-prim . make-custom-binary-input-port) (k509b core-prim . make-bytevector) (k509a core-prim . lookahead-u8) (k5099 core-prim . lookahead-char) (k4b75 core-prim . i/o-write-error?) (k4b60 core-prim . i/o-read-error?) (k4c18 core-prim . i/o-port-error?) (k4b8e core-prim . i/o-invalid-position-error?) (k4ba9 core-prim . i/o-filename-error?) (k4bc0 core-prim . i/o-file-protection-error?) (k4bd5 core-prim . i/o-file-is-read-only-error?) (k4bff core-prim . i/o-file-does-not-exist-error?) (k4bea core-prim . i/o-file-already-exists-error?) (k4b4b core-prim . i/o-error?) (k4b90 core-prim . i/o-error-position) (k4c1a core-prim . i/o-error-port) (k4bab core-prim . i/o-error-filename) (k4c48 core-prim . i/o-encoding-error?) (k4c4a core-prim . i/o-encoding-error-char) (k4c2f core-prim . i/o-decoding-error?) (k5098 core-prim . get-u8) (k5097 core-prim . get-string-n!) (k5096 core-prim . get-string-n) (k5095 core-prim . get-string-all) (k5094 core-prim . get-line) (k5093 core-prim . get-datum) (k5092 core-prim . get-char) (k5091 core-prim . get-bytevector-some) (k5090 core-prim . get-bytevector-n!) (k508f core-prim . get-bytevector-n) (k508e core-prim . get-bytevector-all) (k508d core-prim . flush-output-port) (k508c core-prim . close-port) (k2f8d core-prim . scheme-report-environment) (k508b core-prim . quotient) (k2f8b core-prim . null-environment) (k508a core-prim . remainder) (k5089 core-prim . modulo) (k5088 core-prim . inexact->exact) (k5087 core-prim . force) (k5086 core-prim . exact->inexact) (k5085 core-prim . make-promise) (k5084 core-prim . exit) (k4d7f core-prim . command-line) (k5083 core-prim . string-fill!) (k5082 core-prim . string-set!) (k5081 core-prim . set-cdr!) (k5080 core-prim . set-car!) (k507f core-prim . remove) (k507e core-prim . remv) (k507d core-prim . remp) (k507c core-prim . remq) (k507b core-prim . partition) (k507a core-prim . memv) (k5079 core-prim . memq) (k5078 core-prim . memp) (k5077 core-prim . member) (k5076 core-prim . exists) (k5075 core-prim . for-all) (k5074 core-prim . fold-right) (k5073 core-prim . fold-left) (k5072 core-prim . find) (k5071 core-prim . filter) (k5070 core-prim . cons*) (k506f core-prim . assv) (k506e core-prim . assq) (k506d core-prim . assp) (k506c core-prim . assoc) (k506b core-prim . call-with-string-output-port) (k506a core-prim . call-with-port) (k5069 core-prim . call-with-bytevector-output-port) (k5068 core-prim . bytevector->string) (k5067 core-prim . buffer-mode?) (k5066 core-prim . binary-port?) (k5065 core-prim . with-exception-handler) (k5064 core-prim . raise-continuable) (k5063 core-prim . raise) (k2f91 core-prim . eval) (k2f89 core-prim . environment) (k5062 core-prim . make-enumeration) (k5061 core-prim . enum-set=?) (k5060 core-prim . enum-set-universe) (k505f core-prim . enum-set-union) (k505e core-prim . enum-set-subset?) (k505d core-prim . enum-set-projection) (k505c core-prim . enum-set-member?) (k505b core-prim . enum-set-intersection) (k505a core-prim . enum-set-indexer) (k5059 core-prim . enum-set-difference) (k5058 core-prim . enum-set-constructor) (k5057 core-prim . enum-set-complement) (k5056 core-prim . enum-set->list) (k4abf core-prim . who-condition?) (k4a37 core-prim . warning?) (k4a76 core-prim . violation?) (k4b36 core-prim . undefined-violation?) (k4b1d core-prim . syntax-violation?) (k4b21 core-prim . syntax-violation-subform) (k4b1f core-prim . syntax-violation-form) (k2fb1 core-prim . syntax-violation) (k5055 core-prim . simple-conditions) (k4a4c core-prim . serious-condition?) (k4ad6 core-prim . non-continuable-violation?) (k4a20 core-prim . message-condition?) (k4abb core-prim . make-who-condition) (k4a35 core-prim . make-warning) (k4a74 core-prim . make-violation) (k4b34 core-prim . make-undefined-violation) (k4b17 core-prim . make-syntax-violation) (k4a4a core-prim . make-serious-condition) (k4ad4 core-prim . make-non-continuable-violation) (k4a1c core-prim . make-message-condition) (k4afe core-prim . make-lexical-violation) (k4aa0 core-prim . make-irritants-condition) (k4ae9 core-prim . make-implementation-restriction-violation) (k4a5f core-prim . make-error) (k4a89 core-prim . make-assertion-violation) (k4b00 core-prim . lexical-violation?) (k4aa4 core-prim . irritants-condition?) (k4aeb core-prim . implementation-restriction-violation?) (k4a61 core-prim . error?) (k4ac1 core-prim . condition-who) (k5054 core-prim . condition-predicate) (k4a22 core-prim . condition-message) (k4aa6 core-prim . condition-irritants) (k5053 core-prim . condition-accessor) (k5052 core-prim . condition) (k4a8b core-prim . assertion-violation?) (k5051 core-prim . condition?) (k5050 core-prim . utf32->string) (k504f core-prim . utf16->string) (k504e core-prim . utf8->string) (k504d core-prim . uint-list->bytevector) (k504c core-prim . u8-list->bytevector) (k504b core-prim . string->utf8) (k504a core-prim . string->utf32) (k5049 core-prim . string->utf16) (k5048 core-prim . sint-list->bytevector) (k5047 core-prim . native-endianness) (k5046 core-prim . bytevector?) (k5045 core-prim . bytevector=?) (k5044 core-prim . bytevector-uint-set!) (k5043 core-prim . bytevector-uint-ref) (k5042 core-prim . bytevector-u8-set!) (k5041 core-prim . bytevector-u8-ref) (k5040 core-prim . bytevector-u64-set!) (k503f core-prim . bytevector-u64-ref) (k503e core-prim . bytevector-u64-native-set!) (k503d core-prim . bytevector-u64-native-ref) (k503c core-prim . bytevector-u32-set!) (k503b core-prim . bytevector-u32-ref) (k503a core-prim . bytevector-u32-native-set!) (k5039 core-prim . bytevector-u32-native-ref) (k5038 core-prim . bytevector-u16-set!) (k5037 core-prim . bytevector-u16-ref) (k5036 core-prim . bytevector-u16-native-set!) (k5035 core-prim . bytevector-u16-native-ref) (k5034 core-prim . bytevector-sint-set!) (k5033 core-prim . bytevector-sint-ref) (k5032 core-prim . bytevector-s8-set!) (k5031 core-prim . bytevector-s8-ref) (k5030 core-prim . bytevector-s64-set!) (k502f core-prim . bytevector-s64-ref) (k502e core-prim . bytevector-s64-native-set!) (k502d core-prim . bytevector-s64-native-ref) (k502c core-prim . bytevector-s32-set!) (k502b core-prim . bytevector-s32-ref) (k502a core-prim . bytevector-s32-native-set!) (k5029 core-prim . bytevector-s32-native-ref) (k5028 core-prim . bytevector-s16-set!) (k5027 core-prim . bytevector-s16-ref) (k5026 core-prim . bytevector-s16-native-set!) (k5025 core-prim . bytevector-s16-native-ref) (k5024 core-prim . bytevector-length) (k5023 core-prim . bytevector-ieee-single-ref) (k5022 core-prim . bytevector-ieee-single-set!) (k5021 core-prim . bytevector-ieee-single-native-set!) (k5020 core-prim . bytevector-ieee-single-native-ref) (k501f core-prim . bytevector-ieee-double-set!) (k501e core-prim . bytevector-ieee-double-ref) (k501d core-prim . bytevector-ieee-double-native-set!) (k501c core-prim . bytevector-ieee-double-native-ref) (k501b core-prim . bytevector-fill!) (k501a core-prim . bytevector-copy!) (k5019 core-prim . bytevector-copy) (k5018 core-prim . bytevector->uint-list) (k5017 core-prim . bytevector->u8-list) (k5016 core-prim . bytevector->sint-list) (k4c74 core-prim . no-nans-violation?) (k4c5f core-prim . no-infinities-violation?) (k4c72 core-prim . make-no-nans-violation) (k4c5d core-prim . make-no-infinities-violation) (k5015 core-prim . real->flonum) (k5014 core-prim . flzero?) (k5013 core-prim . fltruncate) (k5012 core-prim . fltan) (k5011 core-prim . flsqrt) (k5010 core-prim . flsin) (k500f core-prim . flround) (k500e core-prim . flpositive?) (k500d core-prim . flonum?) (k500c core-prim . flodd?) (k500b core-prim . flnumerator) (k500a core-prim . flnegative?) (k5009 core-prim . flnan?) (k5008 core-prim . flmod0) (k5007 core-prim . flmod) (k5006 core-prim . flmin) (k5005 core-prim . flmax) (k5004 core-prim . fllog) (k5003 core-prim . flinteger?) (k5002 core-prim . flinfinite?) (k5001 core-prim . flfloor) (k5000 core-prim . flfinite?) (k4fff core-prim . flexpt) (k4ffe core-prim . flexp) (k4ffd core-prim . fleven?) (k4ffc core-prim . fldiv0-and-mod0) (k4ffb core-prim . fldiv0) (k4ffa core-prim . fldiv-and-mod) (k4ff9 core-prim . fldiv) (k4ff8 core-prim . fldenominator) (k4ff7 core-prim . flcos) (k4ff6 core-prim . flceiling) (k4ff5 core-prim . flatan) (k4ff4 core-prim . flasin) (k4ff3 core-prim . flacos) (k4ff2 core-prim . flabs) (k4ff1 core-prim . fl>?) (k4ff0 core-prim . fl>=?) (k4fef core-prim . fl=?) (k4fee core-prim . fl<?) (k4fed core-prim . fl<=?) (k4fec core-prim . fl/) (k4feb core-prim . fl-) (k4fea core-prim . fl+) (k4fe9 core-prim . fl*) (k4fe8 core-prim . fixnum->flonum) (k4fe7 core-prim . fxzero?) (k4fe6 core-prim . fxxor) (k4fe5 core-prim . fxrotate-bit-field) (k4fe4 core-prim . fxreverse-bit-field) (k4fe3 core-prim . fxpositive?) (k4fe2 core-prim . fxodd?) (k4fe1 core-prim . fxnot) (k4fe0 core-prim . fxnegative?) (k4fdf core-prim . fxmod0) (k4fde core-prim . fxmod) (k4fdd core-prim . fxmin) (k4fdc core-prim . fxmax) (k4fdb core-prim . fxlength) (k4fda core-prim . fxior) (k4fd9 core-prim . fxif) (k4fd8 core-prim . fxfirst-bit-set) (k4fd7 core-prim . fxeven?) (k4fd6 core-prim . fxdiv0-and-mod0) (k4fd5 core-prim . fxdiv0) (k4fd4 core-prim . fxdiv-and-mod) (k4fd3 core-prim . fxdiv) (k4fd2 core-prim . fxcopy-bit-field) (k4fd1 core-prim . fxcopy-bit) (k4fd0 core-prim . fxbit-set?) (k4fcf core-prim . fxbit-field) (k4fce core-prim . fxbit-count) (k4fcd core-prim . fxarithmetic-shift-right) (k4fcc core-prim . fxarithmetic-shift-left) (k4fcb core-prim . fxarithmetic-shift) (k4fca core-prim . fxand) (k4fc9 core-prim . fx>?) (k4fc8 core-prim . fx>=?) (k4fc7 core-prim . fx=?) (k4fc6 core-prim . fx<?) (k4fc5 core-prim . fx<=?) (k4fc4 core-prim . fx-/carry) (k4fc3 core-prim . fx-) (k4fc2 core-prim . fx+/carry) (k4fc1 core-prim . fx+) (k4fc0 core-prim . fx*/carry) (k4fbf core-prim . fx*) (k4fbe core-prim . greatest-fixnum) (k4fbd core-prim . least-fixnum) (k4fbc core-prim . fixnum-width) (k4fbb core-prim . fixnum?) (k4fba core-prim . bitwise-rotate-bit-field) (k4fb9 core-prim . bitwise-reverse-bit-field) (k4fb8 core-prim . bitwise-length) (k4fb7 core-prim . bitwise-if) (k4fb6 core-prim . bitwise-first-bit-set) (k4fb5 core-prim . bitwise-copy-bit-field) (k4fb4 core-prim . bitwise-copy-bit) (k4fb3 core-prim . bitwise-bit-set?) (k4fb2 core-prim . bitwise-bit-field) (k4fb1 core-prim . bitwise-bit-count) (k4fb0 core-prim . bitwise-xor) (k4faf core-prim . bitwise-ior) (k4fae core-prim . bitwise-and) (k4fad core-prim . bitwise-not) (k4fac core-prim . bitwise-arithmetic-shift-right) (k4fab core-prim . bitwise-arithmetic-shift-left) (k4faa core-prim . bitwise-arithmetic-shift) (k4fa9 core-prim . zero?) (k4fa8 core-prim . vector?) (k4fa7 core-prim . vector-set!) (k4fa6 core-prim . vector-ref) (k4fa5 core-prim . vector-map) (k4fa4 core-prim . vector-length) (k4fa3 core-prim . vector-for-each) (k4fa2 core-prim . vector-fill!) (k4fa1 core-prim . vector->list) (k4fa0 core-prim . vector) (k4f9f core-prim . values) (k4f9e core-prim . truncate) (k4f9d core-prim . tan) (k4f9c core-prim . symbol?) (k4f9b core-prim . symbol=?) (k4f9a core-prim . symbol->string) (k4f99 core-prim . substring) (k4f98 core-prim . string?) (k4f97 core-prim . string>?) (k4f96 core-prim . string>=?) (k4f95 core-prim . string=?) (k4f94 core-prim . string<?) (k4f93 core-prim . string<=?) (k4f92 core-prim . string-ref) (k4f91 core-prim . string-length) (k4f90 core-prim . string-for-each) (k4f8f core-prim . string-copy) (k4f8e core-prim . string-append) (k4f8d core-prim . string->symbol) (k4f8c core-prim . string->number) (k4f8b core-prim . string->list) (k4f8a core-prim . string) (k4f89 core-prim . sqrt) (k4f88 core-prim . sin) (k4f87 core-prim . round) (k4f86 core-prim . reverse) (k4f85 core-prim . real?) (k4f84 core-prim . real-valued?) (k4f83 core-prim . real-part) (k4f82 core-prim . rationalize) (k4f81 core-prim . rational?) (k4f80 core-prim . rational-valued?) (k4f7f core-prim . procedure?) (k4f7e core-prim . positive?) (k4f7d core-prim . pair?) (k4f7c core-prim . odd?) (k4f7b core-prim . numerator) (k4f7a core-prim . number?) (k4f79 core-prim . number->string) (k4f78 core-prim . null?) (k4f77 core-prim . not) (k4f76 core-prim . negative?) (k4f75 core-prim . nan?) (k4f74 core-prim . min) (k4f73 core-prim . max) (k4f72 core-prim . map) (k4f71 core-prim . make-vector) (k4f70 core-prim . make-string) (k4f6f core-prim . make-rectangular) (k4f6e core-prim . make-polar) (k4f6d core-prim . magnitude) (k4f6c core-prim . log) (k4f6b core-prim . list?) (k4f6a core-prim . list-tail) (k4f69 core-prim . list-ref) (k4f68 core-prim . list->vector) (k4f67 core-prim . list->string) (k4f66 core-prim . list) (k4f65 core-prim . length) (k4f64 core-prim . lcm) (k4f63 core-prim . integer?) (k4f62 core-prim . integer-valued?) (k4f61 core-prim . integer->char) (k4f60 core-prim . infinite?) (k4f5f core-prim . inexact?) (k4f5e core-prim . inexact) (k4f5d core-prim . imag-part) (k4f5c core-prim . gcd) (k4f5b core-prim . for-each) (k4f5a core-prim . floor) (k4f59 core-prim . finite?) (k4f58 core-prim . expt) (k4f57 core-prim . exp) (k4f56 core-prim . exact?) (k4f55 core-prim . exact-integer-sqrt) (k4f54 core-prim . exact) (k4f53 core-prim . even?) (k4f52 core-prim . error) (k4f51 core-prim . eqv?) (k4f50 core-prim . equal?) (k4f4f core-prim . eq?) (k4f4e core-prim . dynamic-wind) (k4f4d core-prim . div0-and-mod0) (k4f4c core-prim . mod0) (k4f4b core-prim . div0) (k4f4a core-prim . div-and-mod) (k4f49 core-prim . mod) (k4f48 core-prim . div) (k4f47 core-prim . denominator) (k4f46 core-prim . cos) (k4f45 core-prim . cons) (k4f44 core-prim . complex?) (k4f43 core-prim . char?) (k4f42 core-prim . char>?) (k4f41 core-prim . char>=?) (k4f40 core-prim . char=?) (k4f3f core-prim . char<?) (k4f3e core-prim . char<=?) (k4f3d core-prim . char->integer) (k4f3c core-prim . ceiling) (k4f3b core-prim . call-with-values) (k4f3a core-prim . call/cc) (k4f39 core-prim . call-with-current-continuation) (k4f38 core-prim . cddddr) (k4f37 core-prim . cdddar) (k4f36 core-prim . cddadr) (k4f35 core-prim . cddaar) (k4f34 core-prim . cdaddr) (k4f33 core-prim . cdadar) (k4f32 core-prim . cdaadr) (k4f31 core-prim . cdaaar) (k4f30 core-prim . cadddr) (k4f2f core-prim . caddar) (k4f2e core-prim . cadadr) (k4f2d core-prim . cadaar) (k4f2c core-prim . caaddr) (k4f2b core-prim . caadar) (k4f2a core-prim . caaadr) (k4f29 core-prim . caaaar) (k4f28 core-prim . cdddr) (k4f27 core-prim . cddar) (k4f26 core-prim . cdadr) (k4f25 core-prim . cdaar) (k4f24 core-prim . caddr) (k4f23 core-prim . cadar) (k4f22 core-prim . caadr) (k4f21 core-prim . caaar) (k4f20 core-prim . cddr) (k4f1f core-prim . cdar) (k4f1e core-prim . cadr) (k4f1d core-prim . caar) (k4f1c core-prim . cdr) (k4f1b core-prim . car) (k4f1a core-prim . boolean?) (k4f19 core-prim . boolean=?) (k4f18 core-prim . atan) (k4f17 core-prim . assertion-violation) (k2fab core-prim . assertion-error) (k4f16 core-prim . asin) (k4f15 core-prim . apply) (k4f14 core-prim . append) (k4f13 core-prim . angle) (k4f12 core-prim . acos) (k4f11 core-prim . abs) (k4f10 core-prim . /) (k4f0f core-prim . *) (k4f0e core-prim . -) (k4f0d core-prim . +) (k4f0c core-prim . >=) (k4f0b core-prim . >) (k4f0a core-prim . =) (k4f09 core-prim . <=) (k4f08 core-prim . <) (k4f07 core-prim . library) (k4f06 $core-rtd &no-nans-rtd &no-nans-rcd) (k4f05 $core-rtd &no-infinities-rtd &no-infinities-rcd) (k4f04 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (k4f03 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (k4f02 $core-rtd &i/o-port-rtd &i/o-port-rcd) (k4f01 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (k4f00 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (k4eff $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (k4efe $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (k4efd $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (k4efc $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (k4efb $core-rtd &i/o-write-rtd &i/o-write-rcd) (k4efa $core-rtd &i/o-read-rtd &i/o-read-rcd) (k4ef9 $core-rtd &i/o-rtd &i/o-rcd) (k4ef8 $core-rtd &undefined-rtd &undefined-rcd) (k4ef7 $core-rtd &syntax-rtd &syntax-rcd) (k4ef6 $core-rtd &lexical-rtd &lexical-rcd) (k4ef5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (k4ef4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (k4ef3 $core-rtd &who-rtd &who-rcd) (k4ef2 $core-rtd &irritants-rtd &irritants-rcd) (k4ef1 $core-rtd &assertion-rtd &assertion-rcd) (k4ef0 $core-rtd &violation-rtd &violation-rcd) (k4eef $core-rtd &error-rtd &error-rcd) (k4eee $core-rtd &serious-rtd &serious-rcd) (k4eed $core-rtd &warning-rtd &warning-rcd) (k4eec $core-rtd &message-rtd &message-rcd) (k4eeb $core-rtd &condition-rtd &condition-rcd) (k4eea macro . define-condition-type) (k4ee9 macro . define-enumeration) (k4ee8 macro . define-record-type) (k4ee7 macro . parent-rtd) (k4ee6 macro . nongenerative) (k4ee5 macro . opaque) (k4ee4 macro . sealed) (k4ee3 macro . protocol) (k4ee2 macro . parent) (k4ee1 macro . immutable) (k4ee0 macro . mutable) (k4edf macro . fields) (k4ede macro . error-handling-mode) (k4edd macro . file-options) (k4edc macro . buffer-mode) (k4edb macro . eol-style) (k4eda macro . guard) (k4ed9 macro . trace-define) (k4ed8 macro . trace-lambda) (k4ed7 macro . unsyntax-splicing) (k4ed6 macro . unsyntax) (k4ed5 macro . unquote-splicing) (k4ed4 macro . unquote) (k4ed3 macro . _) (k4ed2 macro . else) (k4ed1 macro . =>) (k4ed0 macro . ...) (k4ecf macro . assert) (k4ece macro . endianness) (k4ecd macro . delay) (k4ecc macro . time) (k4ecb macro . do) (k4eca macro . cond) (k4ec9 macro . let*) (k4ec8 macro . let) (k4ec7 macro . let*-values) (k4ec6 macro . let-values) (k4ec5 macro . identifier-syntax) (k4ec4 macro . with-syntax) (k4ec3 macro . quasisyntax) (k4ec2 macro . quasiquote) (k4ec1 macro . syntax-rules) (k4ec0 macro . include) (k4ebf macro . define-struct) (k4ebe core-macro . record-constructor-descriptor) (k4ebd core-macro . record-type-descriptor) (k4ebc macro . case) (k4ebb macro . parameterize) (k4eba macro . unless) (k4eb9 macro . when) (k4eb8 core-macro . or) (k4eb7 core-macro . and) (k4eb6 core-macro . if) (k4eb5 core-macro . letrec*) (k4eb4 core-macro . letrec) (k4eb3 core-macro . type-descriptor) (k4eb2 core-macro . case-lambda) (k4eb1 core-macro . lambda) (k4eb0 core-macro . syntax) (k4eaf core-macro . syntax-case) (k4eae core-macro . quote) (k4ead core-macro . foreign-call) (k4eac letrec-syntax) (k4eab let-syntax) (k4eaa set!) (k4ea9 import) (k4ea8 begin) (k4ea7 module) (k4ea6 define-syntax) (k4ea5 define)) values values '#f '#f '#f '#f) (k2ae0@k297f@install-library 'k51a7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . k5186) (eval-core . k5185) (set-symbol-value! . k5184) (symbol-value . k5183) (gensym . k5182) (void . k5181)) '() values values '#f '#f '#f '#f) (k2ae0@k297f@install-library 'k51a8 '(mosh) '() '() '() '() '((set-symbol-value! . k5184) (symbol-value . k5183) (regexp? . k517f) (read-line . k517e) (ungensym . k517d) (alist->eq-hash-table . k517c) (assoc-ref . k517b) (print . k517a) (format . k5179) (host-os . k5178) (library-path . k295e) (standard-library-path . k5177) (file-newer? . k5176) (stat-mtime . k5175) (write-to-file . k5174) (file->list . k5173) (file->string . k5172) (digit->integer . k5171) (call-with-string-input-port . k5170) (call-with-string-io . k516f) (string-split . k516e) (bytevector-for-each . k516d) (string->regexp . k516c) (rxmatch . k516b) (regexp-replace-all . k516a) (hashtable-for-each . k5169) (readdir . k5165) (set-current-directory! . k5164) (expand-path . k5163) (current-directory . k5162) (p . k5153) (get-timeofday . k514e) (get-command-line . k514d) (sys-display . k514c) (whereis . k514b) (register . k514a) (vm-join! . k5149) (vm-set-value! . k5148) (vm? . k5147) (main-vm? . k5146) (vm-eval . k5145) (vm-self . k5144) (vm-start! . k5143) (make-vm . k5142) (mutex-try-lock! . k5141) (mutex-unlock! . k5140) (mutex-lock! . k513f) (mutex? . k513e) (make-mutex . k513d) (condition-variable-notify-all! . k513c) (condition-variable-notify! . k513b) (condition-variable-wait! . k513a) (make-condition-variable . k5139) (mosh-executable-path . k5138) (make-file-options . k5137) (source-info . k5136) (make-compiler-instruction . k5135) (make-instruction . k5134) (set-source-info! . k5133) (bignum? . k5132) (fast-equal? . k5131) (fasl-read . k5130) (fasl-write . k512f) (time-usage . k512e) (os-constant . k512d) (time . k4ecc) (include . k4ec0)) '() values values '#f '#f '#f '#f) (k2ae0@k297f@install-library 'k51a9 '(system) '() '() '() '() '((call-process . k5168) (local-tz-offset . k5167) (microseconds . k5166) (expand-path . k5163) (%spawn . k5161) (%waitpid . k5160) (%ffi-supported? . k515f) (%ffi-pointer-ref . k515e) (%ffi-pointer->string . k515d) (%ffi-call->string-or-zero . k515c) (%ffi-call->double . k515b) (%ffi-call->void* . k515a) (%ffi-call->void . k5159) (%ffi-call->int . k5158) (%ffi-lookup . k5157) (%ffi-open . k5156) (%fork . k5155) (%pipe . k5154) (open-output-string . k5152) (get-output-string . k5151) (get-environment-variables . k5150) (get-environment-variable . k514f) (make-parameter . k2791) (socket-port . k512c) (socket-shutdown . k512b) (socket-close . k512a) (socket-send . k5129) (socket-recv! . k5128) (socket-recv . k5127) (make-server-socket . k5126) (make-client-socket . k5125) (socket-accept . k5124) (socket? . k5123) (parameterize . k4ebb)) '() values values '#f '#f '#f '#f))
((lambda (k4d6e@add-library-path! k4d70@parse-and-add-library-path k4d72@for-each-with-index k4d74@rpad k4d76@condition-printer k4d78@record->field-alist k4d7a@map-with-index k4d7c@repl k4d7e@trace-printer k4d80@command-line k4d82@local-library-path k4d84@load/args k4d86@load k4d88@ironscheme-build k4d8a@eval-top-level k4d8c@compile-system-libraries k4d8e@compile k4d90@compile->closure k4d92@pre-compile-r6rs-file k4d94@load-r6rs-top-level k4d96@load-r6rs-top-level-sexp) (begin (set! k4d6e@add-library-path! (lambda (k4db9@path) (k2ad0@k295f@library-path (append (k2ad0@k295f@library-path) (list k4db9@path))))) (set! k4d70@parse-and-add-library-path (lambda (k4dbb@paths k4dbc@message) ((lambda (k4dbf@t) (if k4dbf@t ((lambda (k4dc1@paths) (for-each (lambda (k4dc3@path) (if (file-exists? k4dc3@path) (k4d6e@add-library-path! (expand-path k4dc3@path)) (format (current-error-port) k4dbc@message k4dc3@path))) (string-split k4dc1@paths '#\:))) k4dbf@t) (void))) k4dbb@paths))) (set! k4d72@for-each-with-index (lambda (k4dc5@proc k4dc6@lst) (letrec ((k4dc9@loop (lambda (k4dcb@i k4dcc@lst) (if (null? k4dcc@lst) (if '#f '#f (void)) (begin (k4dc5@proc k4dcb@i (car k4dcc@lst)) (k4dc9@loop (+ k4dcb@i '1) (cdr k4dcc@lst))))))) (k4dc9@loop '1 k4dc6@lst)))) (set! k4d74@rpad (lambda (k4dcf@str k4dd0@pad k4dd1@n) ((lambda (k4dd5@rest) ((letrec ((k4dd7@loop (lambda (k4dd9@rest k4dda@ret) (if (<= k4dd9@rest '0) k4dda@ret (k4dd7@loop (- k4dd9@rest '1) (string-append k4dda@ret k4dd0@pad)))))) k4dd7@loop) k4dd5@rest (format '"~a" k4dcf@str))) (- k4dd1@n (string-length (format '"~a" k4dcf@str)))))) (set! k4d76@condition-printer (lambda (k4ddd@e k4dde@port) ((lambda (k4de2@max-condition-len) (begin (set! k4de2@max-condition-len (apply max (map (lambda (k4df3@c) (string-length (symbol->string (record-type-name (record-rtd k4df3@c))))) (simple-conditions k4ddd@e)))) (begin (display '" Condition components:\n" k4dde@port) (k4d72@for-each-with-index (lambda (k4de3@i k4de4@x) ((lambda (k4de7@rtd k4de8@fields-alist) (begin (format k4dde@port '" ~d. ~a" k4de3@i (k4d74@rpad (symbol->string (record-type-name k4de7@rtd)) '" " k4de2@max-condition-len)) (if (null? k4de8@fields-alist) (newline k4dde@port) (void)) ((letrec ((k4deb@loop (lambda (k4ded@first k4dee@fields-alist) (if (null? k4dee@fields-alist) '() ((lambda (k4df1@field) (begin (if (not k4ded@first) (display (k4d74@rpad '"" '" " (+ '4 k4de2@max-condition-len)) k4dde@port) (void)) (display '"       " k4dde@port) (display (car k4df1@field) k4dde@port) (display '": " k4dde@port) (write (cdr k4df1@field) k4dde@port) (newline k4dde@port) (k4deb@loop '#f (cdr k4dee@fields-alist)))) (car k4dee@fields-alist)))))) k4deb@loop) '#t k4de8@fields-alist))) (record-rtd k4de4@x) (k4d78@record->field-alist k4de4@x))) (simple-conditions k4ddd@e))))) '#f))) (set! k4d78@record->field-alist (lambda (k4df5@r) ((lambda (k4df8@ref) (begin (set! k4df8@ref (lambda (k4e03@rtd k4e04@i k4e05@x) ((lambda (k4e09@val) (if (symbol? k4e09@val) (ungensym k4e09@val) k4e09@val)) ((record-accessor k4e03@rtd k4e04@i) k4e05@x)))) ((letrec ((k4df9@loop (lambda (k4dfb@ret k4dfc@rtd) (if k4dfc@rtd (k4df9@loop (append k4dfb@ret (k4d7a@map-with-index (lambda (k4dff@i k4e00@field) (cons k4e00@field (k4df8@ref k4dfc@rtd k4dff@i k4df5@r))) (vector->list (record-type-field-names k4dfc@rtd)))) (record-type-parent k4dfc@rtd)) k4dfb@ret)))) k4df9@loop) '() (record-rtd k4df5@r)))) '#f))) (set! k4d7a@map-with-index (lambda (k4e0b@proc k4e0c@lst) ((letrec ((k4e0f@loop (lambda (k4e11@i k4e12@lst k4e13@ret) (if (null? k4e12@lst) (reverse k4e13@ret) (k4e0f@loop (+ k4e11@i '1) (cdr k4e12@lst) (cons (k4e0b@proc k4e11@i (car k4e12@lst)) k4e13@ret)))))) k4e0f@loop) '0 k4e0c@lst '()))) (set! k4d7c@repl (lambda k4e17@x ((lambda (k4e1a@rec) (begin (set! k4e1a@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (k4e1d@k4e1b) (lambda () (with-exception-handler (lambda (k4e1f@e) ((call/cc (lambda (k4e21@k4e1c) (k4e1d@k4e1b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? k4e1f@e) (k4d76@condition-printer k4e1f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" k4e1f@e))) (k4e21@k4e1c (lambda () (raise-continuable k4e1f@e)))))))))) (lambda () ((letrec ((k4e23@loop (lambda (k4e25@line k4e26@accum) ((lambda (k4e2a@parentheses-ok? k4e2c@eval-string-print) (begin (set! k4e2a@parentheses-ok? (lambda (k4e31@text) ((letrec ((k4e33@loop (lambda (k4e35@chars k4e36@p0 k4e37@p1) (if (null? k4e35@chars) (= '0 k4e36@p0 k4e37@p1) ((lambda (k4e3b@t) (if (memv k4e3b@t '(#\()) (k4e33@loop (cdr k4e35@chars) (+ k4e36@p0 '1) k4e37@p1) (if (memv k4e3b@t '(#\))) (k4e33@loop (cdr k4e35@chars) (- k4e36@p0 '1) k4e37@p1) (if (memv k4e3b@t '(#\[)) (k4e33@loop (cdr k4e35@chars) k4e36@p0 (+ k4e37@p1 '1)) (if (memv k4e3b@t '(#\])) (k4e33@loop (cdr k4e35@chars) k4e36@p0 (- k4e37@p1 '1)) (k4e33@loop (cdr k4e35@chars) k4e36@p0 k4e37@p1)))))) (car k4e35@chars)))))) k4e33@loop) (string->list k4e31@text) '0 '0))) (set! k4e2c@eval-string-print (lambda (k4e2f@text) (if (not (or (string=? '"\n" k4e2f@text) (= '0 (string-length k4e2f@text)))) (write (k4d8a@eval-top-level (call-with-port (open-string-input-port k4e2f@text) read))) (void)))) (if (eof-object? k4e25@line) (begin (k4e2c@eval-string-print k4e26@accum) (exit)) ((lambda (k4e2d@current) (if (k4e2a@parentheses-ok? k4e2d@current) (k4e2c@eval-string-print k4e2d@current) (k4e23@loop (get-line (current-input-port)) k4e2d@current))) (string-append k4e26@accum k4e25@line))))) '#f '#f)))) k4e23@loop) (get-line (current-input-port)) '""))))))) (newline) (k4e1a@rec)))) (k4e1a@rec))) '#f))) (set! k4d7e@trace-printer (k2868@k2792@make-parameter write)) (set! k4d80@command-line (k2868@k2792@make-parameter (get-command-line))) (set! k4d82@local-library-path (lambda (k4e3d@filename) (k2ad0@k295f@library-path))) (set! k4d84@load/args (lambda (k4e3f@filename . k4e41@args) (begin (apply k4d94@load-r6rs-top-level k4e3f@filename 'load k4e41@args) (void)))) (set! k4d86@load (lambda (k4e43@filename) (begin (apply k4d94@load-r6rs-top-level k4e43@filename 'load (k4d80@command-line)) (void)))) (set! k4d88@ironscheme-build (lambda () (k4d86@load '"ironscheme-buildscript.ss"))) (set! k4d8a@eval-top-level (lambda (k4e45@x) (k499a@k2f92@eval k4e45@x (k49b0@k2fbe@interaction-environment)))) (set! k4d8c@compile-system-libraries (lambda () (k4d8a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! k4d8e@compile (lambda (k4e47@filename) (k4d94@load-r6rs-top-level k4e47@filename 'compile))) (set! k4d90@compile->closure (lambda (k4e49@filename) (k4d94@load-r6rs-top-level k4e49@filename 'closure))) (set! k4d92@pre-compile-r6rs-file (lambda (k4e4b@filename) (k4d94@load-r6rs-top-level k4e4b@filename 'compile))) (set! k4d94@load-r6rs-top-level (lambda (k4e4d@filename k4e4e@how . k4e51@args) ((lambda (k4e57@k4e54 k4e58@k4e56) ((lambda (k4e5b@swap) (dynamic-wind k4e5b@swap (lambda () ((lambda (k4e5d@x*) ((lambda (k4e5f@t) (if (memv k4e5f@t '(closure)) (k49af@k2fbc@pre-compile-r6rs-top-level k4e5d@x*) (if (memv k4e5f@t '(load)) ((lambda (k4e65@k4e62 k4e66@k4e64) ((lambda (k4e69@swap) (dynamic-wind k4e69@swap (lambda () ((k49ae@k2fba@compile-r6rs-top-level k4e5d@x*))) k4e69@swap)) (lambda () ((lambda (k4e6b@t) (begin (k4e65@k4e62 k4e66@k4e64) (set! k4e66@k4e64 k4e6b@t))) (k4e65@k4e62))))) k4d80@command-line (cons k4e4d@filename (car k4e51@args))) (if (memv k4e5f@t '(compile)) (begin (k49ae@k2fba@compile-r6rs-top-level k4e5d@x*) (k2ad4@k2967@serialize-all k2863@k2788@serialize-library k28bd@k2876@compile-core-expr)) (if '#f '#f (void)))))) k4e4e@how)) (with-input-from-file k4e4d@filename (lambda () ((letrec ((k4e6d@f (lambda () ((lambda (k4e6f@x) (if (eof-object? k4e6f@x) '() (cons k4e6f@x (k4e6d@f)))) (k285b@k2778@read-annotated))))) k4e6d@f)))))) k4e5b@swap)) (lambda () ((lambda (k4e71@t) (begin (k4e57@k4e54 k4e58@k4e56) (set! k4e58@k4e56 k4e71@t))) (k4e57@k4e54))))) k2ad0@k295f@library-path (k4d82@local-library-path k4e4d@filename)))) (set! k4d96@load-r6rs-top-level-sexp (lambda (k4e73@import-spec k4e74@thunk) ((lambda (k4e7b@k4e78 k4e7c@k4e7a) ((lambda (k4e7f@swap) (dynamic-wind k4e7f@swap (lambda () ((lambda (k4e85@k4e82 k4e86@k4e84) ((lambda (k4e89@swap) (dynamic-wind k4e89@swap (lambda () ((k49ae@k2fba@compile-r6rs-top-level (list (cons 'import k4e73@import-spec) (list k4e74@thunk))))) k4e89@swap)) (lambda () ((lambda (k4e8b@t) (begin (k4e85@k4e82 k4e86@k4e84) (set! k4e86@k4e84 k4e8b@t))) (k4e85@k4e82))))) k4d80@command-line '())) k4e7f@swap)) (lambda () ((lambda (k4e8d@t) (begin (k4e7b@k4e78 k4e7c@k4e7a) (set! k4e7c@k4e7a k4e8d@t))) (k4e7b@k4e78))))) k2ad0@k295f@library-path (k4d82@local-library-path '"")))) (begin (set! k4ea3@k4d96@load-r6rs-top-level-sexp k4d96@load-r6rs-top-level-sexp) (set! k4ea2@k4d94@load-r6rs-top-level k4d94@load-r6rs-top-level) (set! k4ea1@k4d92@pre-compile-r6rs-file k4d92@pre-compile-r6rs-file) (set! k4ea0@k4d90@compile->closure k4d90@compile->closure) (set! k4e9f@k4d8e@compile k4d8e@compile) (set! k4e9e@k4d8c@compile-system-libraries k4d8c@compile-system-libraries) (set! k4e9d@k4d8a@eval-top-level k4d8a@eval-top-level) (set! k4e9c@k4d88@ironscheme-build k4d88@ironscheme-build) (set! k4e9b@k4d86@load k4d86@load) (set! k4e9a@k4d84@load/args k4d84@load/args) (set! k4e99@k4d82@local-library-path k4d82@local-library-path) (set! k4e98@k4d80@command-line k4d80@command-line) (set! k4e97@k4d7e@trace-printer k4d7e@trace-printer) (set! k4e96@k4d7c@repl k4d7c@repl) (set! k4e95@k4d7a@map-with-index k4d7a@map-with-index) (set! k4e94@k4d78@record->field-alist k4d78@record->field-alist) (set! k4e93@k4d76@condition-printer k4d76@condition-printer) (set! k4e92@k4d74@rpad k4d74@rpad) (set! k4e91@k4d72@for-each-with-index k4d72@for-each-with-index) (set! k4e90@k4d70@parse-and-add-library-path k4d70@parse-and-add-library-path) (set! k4e8f@k4d6e@add-library-path! k4d6e@add-library-path!) (k2ad5@k2969@current-precompiled-library-loader k2864@k278a@load-serialized-library) (set-symbol-value! 'load k4d86@load) (set-symbol-value! 'pre-compile-r6rs-file k4d92@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs k4d8a@eval-top-level) (set-symbol-value! 'int-env-syms k4991@k2f80@interaction-environment-symbols) (set-symbol-value! 'expanded2core k28bc@k2874@expanded->core) (set-symbol-value! 'trace-printer k4d7e@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (k4d97@c) (condition (k4ccb@k4ad5@make-non-continuable-violation) (k4cc1@k4abc@make-who-condition 'raise) (k4c85@k4a1d@make-message-condition '"returned from non-continuable exception") (k4cb7@k4aa1@make-irritants-condition (list k4d97@c))))) (k4d70@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (k4d70@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (k4d6e@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (k4d6e@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (k4d6e@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (k4d99@prefix) (k2ad1@k2961@library-extensions (k4d99@prefix '".mosh" (k2ad1@k2961@library-extensions)))) (lambda (k4d9b@ext k4d9c@ls) (append (map (lambda (k4d9f@x) (string-append k4d9b@ext k4d9f@x)) k4d9c@ls) k4d9c@ls))) ((lambda (k4da1@args k4da2@port) ((lambda (k4da6@ref) (begin (set! k4da6@ref (lambda (k4db1@rtd k4db2@i k4db3@x) ((lambda (k4db7@val) (if (symbol? k4db7@val) (ungensym k4db7@val) k4db7@val)) ((record-accessor k4db1@rtd k4db2@i) k4db3@x)))) (with-exception-handler (lambda (k4da7@c) (if (condition? k4da7@c) (k4d76@condition-printer k4da7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" k4da7@c))) (lambda () (if ((call/cc (lambda (k4dab@k4da9) (lambda () (with-exception-handler (lambda (k4dad@c) ((call/cc (lambda (k4daf@k4daa) (k4dab@k4da9 (lambda () (if '#t '#f (k4daf@k4daa (lambda () (raise-continuable k4dad@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (k4d96@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? k4da1@args) (k4d7c@repl) (k4d94@load-r6rs-top-level (car k4da1@args) 'load (cdr k4da1@args)))))))) '#f)) (k4d80@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
