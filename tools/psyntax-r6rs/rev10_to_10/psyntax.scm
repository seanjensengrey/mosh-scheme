;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! jk584@library-file-path->cache-path (unspecified)) (set! jk586@read-annotated (unspecified)) (set! jk588@annotation-stripped (unspecified)) (set! jk58a@annotation? (unspecified)) (set! jk58c@annotation-source (unspecified)) (set! jk58e@annotation-expression (unspecified)) (set! jk590@scm->fasl (unspecified)) (set! jk592@fasl-save (unspecified)) (set! jk594@fasl-load (unspecified)) (set! jk596@serialize-library (unspecified)) (set! jk598@load-serialized-library (unspecified)) (set! jk59a@make-record-printer (unspecified)) (set! jk59c@compile-core (unspecified)) (set! jk59e@read-library-source-file (unspecified)) (set! jk5a0@make-parameter (unspecified)) (set! jk5a2@mosh-cache-dir (unspecified)) (set! jk638@file-options-spec (unspecified)) (set! jk584@library-file-path->cache-path (lambda (jk639@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jk63f@jk63c jk640@jk63e) (let ((jk643@extract jk640@jk63e) (jk644@p jk63f@jk63c)) (let ((jk648@display-hex '#f)) (begin (set! jk648@display-hex (lambda (jk651@n) (if (<= '0 jk651@n '9) (display jk651@n jk644@p) (display (integer->char (+ (char->integer '#\a) (- jk651@n '10))) jk644@p)))) (begin (let jk64b@f ((jk649@ls (string-split jk639@x '#\/))) (if (not (null? jk649@ls)) (begin (display '"_" jk644@p) (for-each (lambda (jk64d@c) (if (or (char<=? '#\a jk64d@c '#\z) (char<=? '#\A jk64d@c '#\Z) (char<=? '#\0 jk64d@c '#\9) (memv jk64d@c '(#\- #\. #\_ #\~))) (display jk64d@c jk644@p) (begin (display '"%" jk644@p) (let ((jk64f@n (char->integer jk64d@c))) (begin (jk648@display-hex (quotient jk64f@n '16)) (jk648@display-hex (remainder jk64f@n '16))))))) (string->list (car jk649@ls))) (jk64b@f (cdr jk649@ls))) (void))) (jk643@extract))))))))) (set! jk6b3@jk584@library-file-path->cache-path jk584@library-file-path->cache-path) (set! jk586@read-annotated read) (set! jk6b4@jk586@read-annotated jk586@read-annotated) (set! jk588@annotation-stripped (lambda (jk653@x) (jk58e@annotation-expression jk653@x))) (set! jk6b5@jk588@annotation-stripped jk588@annotation-stripped) (set! jk58a@annotation? (lambda (jk655@x) (source-info jk655@x))) (set! jk6b6@jk58a@annotation? jk58a@annotation?) (set! jk58c@annotation-source (lambda (jk657@x) (source-info jk657@x))) (set! jk6b7@jk58c@annotation-source jk58c@annotation-source) (set! jk58e@annotation-expression (lambda (jk659@x) (if (pair? jk659@x) (cons (car jk659@x) (cdr jk659@x)) (display '"line:46\n")))) (set! jk6b8@jk58e@annotation-expression jk58e@annotation-expression) (set! jk590@scm->fasl (lambda (jk65b@filename) (string-append (jk5a2@mosh-cache-dir) '"/" (jk584@library-file-path->cache-path jk65b@filename) '".mosh-fasl"))) (set! jk6b9@jk590@scm->fasl jk590@scm->fasl) (set! jk592@fasl-save (lambda (jk65d@filename jk65e@obj) (call-with-port (open-file-output-port jk65d@filename) (lambda (jk661@port) ((symbol-value 'fasl-write!) jk65e@obj jk661@port))))) (set! jk6ba@jk592@fasl-save jk592@fasl-save) (set! jk594@fasl-load (lambda (jk663@filename) (call-with-port (open-file-input-port jk663@filename) (symbol-value 'fasl-read!)))) (set! jk6bb@jk594@fasl-load jk594@fasl-load) (set! jk596@serialize-library (lambda (jk665@filename jk666@obj) (begin (let ((jk669@expanded2core (symbol-value 'expanded2core))) (let ((jk66b@compile (symbol-value 'compile-w/o-halt))) (let ((jk66d@code jk666@obj)) (let ((jk66f@pivot (cddddr (cddddr jk66d@code)))) (let ((jk671@visit (jk66b@compile (jk669@expanded2core (car jk66f@pivot))))) (begin (set-car! jk66f@pivot jk671@visit) (let ((jk673@pivot (cdr jk66f@pivot))) (let ((jk675@invoke (jk66b@compile (jk669@expanded2core (car jk673@pivot))))) (set-car! jk673@pivot jk675@invoke))))))))) (let ((jk677@fasl-file (jk590@scm->fasl jk665@filename))) (begin (if (file-exists? jk677@fasl-file) (delete-file jk677@fasl-file) (void)) ((call/cc (lambda (jk67b@jk679) (lambda () (with-exception-handler (lambda (jk67d@c) ((call/cc (lambda (jk67f@jk67a) (jk67b@jk679 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " jk665@filename) (if (file-exists? jk677@fasl-file) (delete-file jk677@fasl-file) (void)) '#f) (jk67f@jk67a (lambda () (raise-continuable jk67d@c)))))))))) (lambda () (jk592@fasl-save jk677@fasl-file jk666@obj)))))))))))) (set! jk6bc@jk596@serialize-library jk596@serialize-library) (set! jk598@load-serialized-library (lambda (jk681@filename jk682@obj) (and (jk5a2@mosh-cache-dir) (let ((jk685@fasl-file (jk590@scm->fasl jk681@filename))) (if (and (file-exists? jk685@fasl-file) ((symbol-value 'file-newer?) jk685@fasl-file jk681@filename)) (let ((jk687@expanded2core (symbol-value 'expanded2core))) (let ((jk689@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((jk68b@code (jk594@fasl-load jk685@fasl-file))) (let ((jk68d@pivot (cddddr (cddddr jk68b@code)))) (let ((jk68f@visit (car jk68d@pivot))) (let ((jk691@visit-proc (lambda () (jk689@eval-compiled-core jk68f@visit)))) (begin (set-car! jk68d@pivot jk691@visit-proc) (let ((jk693@pivot (cdr jk68d@pivot))) (let ((jk695@invoke (car jk693@pivot))) (begin (set-car! jk693@pivot (lambda () (jk689@eval-compiled-core jk695@invoke))) (apply jk682@obj jk68b@code))))))))))) '#f))))) (set! jk6bd@jk598@load-serialized-library jk598@load-serialized-library) (set! jk59a@make-record-printer (lambda (jk697@name jk698@printer) (lambda jk69b@x (begin (display '"record printer") (for-each display jk69b@x))))) (set! jk6be@jk59a@make-record-printer jk59a@make-record-printer) (set! jk59c@compile-core (lambda jk69d@x (apply error 'comile-core '"not implementated" jk69d@x))) (set! jk6bf@jk59c@compile-core jk59c@compile-core) (set! jk59e@read-library-source-file (lambda (jk69f@file-name) (with-input-from-file jk69f@file-name jk586@read-annotated))) (set! jk6c0@jk59e@read-library-source-file jk59e@read-library-source-file) (set! jk5a0@make-parameter (lambda jk6af (let ((jk6b0 (length jk6af))) (if (= jk6b0 '1) (apply (lambda (jk6a1@x) (jk5a0@make-parameter jk6a1@x (lambda (jk6a3@x) jk6a3@x))) jk6af) (if (= jk6b0 '2) (apply (lambda (jk6a5@x jk6a6@fender) (let ((jk6a9@x (jk6a6@fender jk6a5@x))) (lambda jk6ad (let ((jk6ae (length jk6ad))) (if (= jk6ae '0) (apply (lambda () jk6a9@x) jk6ad) (if (= jk6ae '1) (apply (lambda (jk6ab@v) (set! jk6a9@x (jk6a6@fender jk6ab@v))) jk6ad) (error 'apply '"invalid arg count"))))))) jk6af) (error 'apply '"invalid arg count")))))) (set! jk6c1@jk5a0@make-parameter jk5a0@make-parameter) (set! jk5a2@mosh-cache-dir (jk5a0@make-parameter '#f)) (set! jk6c2@jk5a2@mosh-cache-dir jk5a2@mosh-cache-dir) (set! jk638@file-options-spec (lambda (jk6b1@x) jk6b1@x)) (set! jk6c3@jk638@file-options-spec jk638@file-options-spec) (void))
(begin (set! jk6c9@current-primitive-locations (unspecified)) (set! jk6cb@mutable? (unspecified)) (set! jk6cd@rewriter (unspecified)) (set! jk6cf@expanded->core (unspecified)) (set! jk6d1@compile-core-expr (unspecified)) (set! jk6d3@pretty-print (unspecified)) (set! jk6d5@compile-core-expr-to-port (unspecified)) (set! jk6c9@current-primitive-locations (jk6c1@jk5a0@make-parameter (lambda (jk6d6@x) '#f) (lambda (jk6d8@p) jk6d8@p))) (set! jk714@jk6c9@current-primitive-locations jk6c9@current-primitive-locations) (set! jk6cb@mutable? (lambda (jk6da@x) (or (pair? jk6da@x) (vector? jk6da@x) (hashtable? jk6da@x)))) (set! jk715@jk6cb@mutable? jk6cb@mutable?) (set! jk6cd@rewriter (lambda (jk6dc@quote-hack?) (let ((jk6df@f '#f)) (begin (set! jk6df@f (lambda (jk6e0@x) (if (pair? jk6e0@x) (let ((jk6e2@t (car jk6e0@x))) (if (memv jk6e2@t '(quote)) (if (and jk6dc@quote-hack? (jk6cb@mutable? (cadr jk6e0@x))) (let ((jk6e4@g (gensym))) (begin (set-symbol-value! jk6e4@g (cadr jk6e0@x)) jk6e4@g)) jk6e0@x) (if (memv jk6e2@t '(case-lambda)) (cons 'case-lambda (map (lambda (jk6e6@x) (cons (car jk6e6@x) (map jk6df@f (cdr jk6e6@x)))) (cdr jk6e0@x))) (if (memv jk6e2@t '(lambda)) (cons* 'lambda (cadr jk6e0@x) (map jk6df@f (cddr jk6e0@x))) (if (memv jk6e2@t '(letrec)) (let ((jk6e8@bindings (cadr jk6e0@x)) (jk6e9@body* (cddr jk6e0@x))) (let ((jk6ec@lhs* (map car jk6e8@bindings)) (jk6ed@rhs* (map cadr jk6e8@bindings))) (cons* 'letrec (map list jk6ec@lhs* (map jk6df@f jk6ed@rhs*)) (map jk6df@f jk6e9@body*)))) (if (memv jk6e2@t '(letrec*)) (let ((jk6f0@bindings (cadr jk6e0@x)) (jk6f1@body* (cddr jk6e0@x))) (let ((jk6f4@lhs* (map car jk6f0@bindings)) (jk6f5@rhs* (map cadr jk6f0@bindings))) (cons* 'letrec* (map list jk6f4@lhs* (map jk6df@f jk6f5@rhs*)) (map jk6df@f jk6f1@body*)))) (if (memv jk6e2@t '(library-letrec*)) (let ((jk6f8@name (cadr jk6e0@x)) (jk6f9@x (cdr jk6e0@x))) (let ((jk6fc@bindings (cadr jk6f9@x)) (jk6fd@body* (cddr jk6f9@x))) (let ((jk700@lhs* (map car jk6fc@bindings)) (jk701@lhs** (map cadr jk6fc@bindings)) (jk702@rhs* (map caddr jk6fc@bindings))) (cons* 'library-letrec* jk6f8@name (map list jk700@lhs* jk701@lhs** (map jk6df@f jk702@rhs*)) (map jk6df@f jk6fd@body*))))) (if (memv jk6e2@t '(begin)) (cons 'begin (map jk6df@f (cdr jk6e0@x))) (if (memv jk6e2@t '(set!)) (list 'set! (cadr jk6e0@x) (jk6df@f (caddr jk6e0@x))) (if (memv jk6e2@t '(primitive)) (let ((jk706@op (cadr jk6e0@x))) (let ((jk708@t ((jk6c9@current-primitive-locations) jk706@op))) (if jk708@t ((lambda (jk70a@loc) jk70a@loc) jk708@t) jk706@op))) (if (memv jk6e2@t '(define)) jk6e0@x (if (list? jk6e0@x) (map jk6df@f jk6e0@x) (error 'rewrite '"invalid form ~s ~s" jk6e0@x (list? jk6e0@x)))))))))))))) jk6e0@x))) jk6df@f)))) (set! jk716@jk6cd@rewriter jk6cd@rewriter) (set! jk6cf@expanded->core (lambda (jk70c@x) ((jk6cd@rewriter '#f) jk70c@x))) (set! jk717@jk6cf@expanded->core jk6cf@expanded->core) (set! jk6d1@compile-core-expr (lambda (jk70e@x) ((jk6cd@rewriter '#f) jk70e@x))) (set! jk718@jk6d1@compile-core-expr jk6d1@compile-core-expr) (set! jk6d3@pretty-print write) (set! jk719@jk6d3@pretty-print jk6d3@pretty-print) (set! jk6d5@compile-core-expr-to-port (lambda (jk710@x jk711@p) (jk6d3@pretty-print ((jk6cd@rewriter '#f) jk710@x) jk711@p))) (set! jk71a@jk6d5@compile-core-expr-to-port jk6d5@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! jk769@make-collection (unspecified)) (set! jk76b@current-library-collection (unspecified)) (set! jk76d@rp (unspecified)) (set! jk777@library? (unspecified)) (set! jk779@library-id (unspecified)) (set! jk77b@set-library-id! (unspecified)) (set! jk77d@library-name (unspecified)) (set! jk77f@set-library-name! (unspecified)) (set! jk781@library-version (unspecified)) (set! jk783@set-library-version! (unspecified)) (set! jk785@library-imp* (unspecified)) (set! jk787@set-library-imp*! (unspecified)) (set! jk789@library-vis* (unspecified)) (set! jk78b@set-library-vis*! (unspecified)) (set! jk78d@library-inv* (unspecified)) (set! jk78f@set-library-inv*! (unspecified)) (set! jk791@library-subst (unspecified)) (set! jk793@set-library-subst! (unspecified)) (set! jk795@library-env (unspecified)) (set! jk797@set-library-env! (unspecified)) (set! jk799@library-visit-state (unspecified)) (set! jk79b@set-library-visit-state! (unspecified)) (set! jk79d@library-invoke-state (unspecified)) (set! jk79f@set-library-invoke-state! (unspecified)) (set! jk7a1@library-visit-code (unspecified)) (set! jk7a3@set-library-visit-code! (unspecified)) (set! jk7a5@library-invoke-code (unspecified)) (set! jk7a7@set-library-invoke-code! (unspecified)) (set! jk7a9@library-visible? (unspecified)) (set! jk7ab@set-library-visible?! (unspecified)) (set! jk7ad@library-source-file-name (unspecified)) (set! jk7af@set-library-source-file-name! (unspecified)) (set! jk7b1@dummy (unspecified)) (set! jk7b3@find-dependencies (unspecified)) (set! jk7b5@find-library-by (unspecified)) (set! jk7b7@library-path (unspecified)) (set! jk7b9@library-extensions (unspecified)) (set! jk7bb@library-name->file-name (unspecified)) (set! jk7bd@file-locator (unspecified)) (set! jk7bf@serialize-all (unspecified)) (set! jk7c1@current-precompiled-library-loader (unspecified)) (set! jk7c3@try-load-from-file (unspecified)) (set! jk7c5@library-loader (unspecified)) (set! jk7c7@current-library-expander (unspecified)) (set! jk7c9@external-pending-libraries (unspecified)) (set! jk7cb@find-external-library (unspecified)) (set! jk7cd@find-library-by-name (unspecified)) (set! jk7cf@library-exists? (unspecified)) (set! jk7d1@find-library-by-spec/die (unspecified)) (set! jk7d3@label->binding-table (unspecified)) (set! jk7d5@install-library-record (unspecified)) (set! jk7d7@install-library (unspecified)) (set! jk7d9@imported-label->binding (unspecified)) (set! jk7db@invoke-library (unspecified)) (set! jk7dd@visit-library (unspecified)) (set! jk7df@invoke-library-by-spec (unspecified)) (set! jk7e1@installed-libraries (unspecified)) (set! jk7e3@library-spec (unspecified)) (set! jk769@make-collection (lambda () (let ((jk7e4@set '())) (let ((jk7e7@set-cons '#f)) (begin (set! jk7e7@set-cons (lambda (jk7ec@x jk7ed@ls) (if (memq jk7ec@x jk7ed@ls) jk7ed@ls (cons jk7ec@x jk7ed@ls)))) (lambda jk7ea (let ((jk7eb (length jk7ea))) (if (= jk7eb '0) (apply (lambda () jk7e4@set) jk7ea) (if (= jk7eb '1) (apply (lambda (jk7e8@x) (set! jk7e4@set (jk7e7@set-cons jk7e8@x jk7e4@set))) jk7ea) (error 'apply '"invalid arg count")))))))))) (set! jk958@jk769@make-collection jk769@make-collection) (set! jk76b@current-library-collection (jk6c1@jk5a0@make-parameter (jk769@make-collection) (lambda (jk7f0@x) (begin (if (not (procedure? jk7f0@x)) (assertion-violation 'current-library-collection '"not a procedure" jk7f0@x) (void)) jk7f0@x)))) (set! jk959@jk76b@current-library-collection jk76b@current-library-collection) (set! jk76d@rp (jk6be@jk59a@make-record-printer 'library (lambda (jk7f2@x jk7f3@p jk7f4@wr) (begin (if (not (jk777@library? jk7f2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (jk781@library-version jk7f2@x)) (jk77d@library-name jk7f2@x) (append (jk77d@library-name jk7f2@x) (list (jk781@library-version jk7f2@x))))) jk7f3@p))))) (set! jk95a@jk76d@rp jk76d@rp) (set! jk777@library? (lambda (jk7f8@x) (and (simple-struct? jk7f8@x) (eq? (simple-struct-name jk7f8@x) 'library)))) (set! jk95b@jk777@library? jk777@library?) (set! jk779@library-id (lambda (jk7fa@x) (simple-struct-ref jk7fa@x '0))) (set! jk95c@jk779@library-id jk779@library-id) (set! jk77b@set-library-id! (lambda (jk7fc@x jk7fd@val) (simple-struct-set! jk7fc@x '0 jk7fd@val))) (set! jk95d@jk77b@set-library-id! jk77b@set-library-id!) (set! jk77d@library-name (lambda (jk800@x) (simple-struct-ref jk800@x '1))) (set! jk95e@jk77d@library-name jk77d@library-name) (set! jk77f@set-library-name! (lambda (jk802@x jk803@val) (simple-struct-set! jk802@x '1 jk803@val))) (set! jk95f@jk77f@set-library-name! jk77f@set-library-name!) (set! jk781@library-version (lambda (jk806@x) (simple-struct-ref jk806@x '2))) (set! jk960@jk781@library-version jk781@library-version) (set! jk783@set-library-version! (lambda (jk808@x jk809@val) (simple-struct-set! jk808@x '2 jk809@val))) (set! jk961@jk783@set-library-version! jk783@set-library-version!) (set! jk785@library-imp* (lambda (jk80c@x) (simple-struct-ref jk80c@x '3))) (set! jk962@jk785@library-imp* jk785@library-imp*) (set! jk787@set-library-imp*! (lambda (jk80e@x jk80f@val) (simple-struct-set! jk80e@x '3 jk80f@val))) (set! jk963@jk787@set-library-imp*! jk787@set-library-imp*!) (set! jk789@library-vis* (lambda (jk812@x) (simple-struct-ref jk812@x '4))) (set! jk964@jk789@library-vis* jk789@library-vis*) (set! jk78b@set-library-vis*! (lambda (jk814@x jk815@val) (simple-struct-set! jk814@x '4 jk815@val))) (set! jk965@jk78b@set-library-vis*! jk78b@set-library-vis*!) (set! jk78d@library-inv* (lambda (jk818@x) (simple-struct-ref jk818@x '5))) (set! jk966@jk78d@library-inv* jk78d@library-inv*) (set! jk78f@set-library-inv*! (lambda (jk81a@x jk81b@val) (simple-struct-set! jk81a@x '5 jk81b@val))) (set! jk967@jk78f@set-library-inv*! jk78f@set-library-inv*!) (set! jk791@library-subst (lambda (jk81e@x) (simple-struct-ref jk81e@x '6))) (set! jk968@jk791@library-subst jk791@library-subst) (set! jk793@set-library-subst! (lambda (jk820@x jk821@val) (simple-struct-set! jk820@x '6 jk821@val))) (set! jk969@jk793@set-library-subst! jk793@set-library-subst!) (set! jk795@library-env (lambda (jk824@x) (simple-struct-ref jk824@x '7))) (set! jk96a@jk795@library-env jk795@library-env) (set! jk797@set-library-env! (lambda (jk826@x jk827@val) (simple-struct-set! jk826@x '7 jk827@val))) (set! jk96b@jk797@set-library-env! jk797@set-library-env!) (set! jk799@library-visit-state (lambda (jk82a@x) (simple-struct-ref jk82a@x '8))) (set! jk96c@jk799@library-visit-state jk799@library-visit-state) (set! jk79b@set-library-visit-state! (lambda (jk82c@x jk82d@val) (simple-struct-set! jk82c@x '8 jk82d@val))) (set! jk96d@jk79b@set-library-visit-state! jk79b@set-library-visit-state!) (set! jk79d@library-invoke-state (lambda (jk830@x) (simple-struct-ref jk830@x '9))) (set! jk96e@jk79d@library-invoke-state jk79d@library-invoke-state) (set! jk79f@set-library-invoke-state! (lambda (jk832@x jk833@val) (simple-struct-set! jk832@x '9 jk833@val))) (set! jk96f@jk79f@set-library-invoke-state! jk79f@set-library-invoke-state!) (set! jk7a1@library-visit-code (lambda (jk836@x) (simple-struct-ref jk836@x '10))) (set! jk970@jk7a1@library-visit-code jk7a1@library-visit-code) (set! jk7a3@set-library-visit-code! (lambda (jk838@x jk839@val) (simple-struct-set! jk838@x '10 jk839@val))) (set! jk971@jk7a3@set-library-visit-code! jk7a3@set-library-visit-code!) (set! jk7a5@library-invoke-code (lambda (jk83c@x) (simple-struct-ref jk83c@x '11))) (set! jk972@jk7a5@library-invoke-code jk7a5@library-invoke-code) (set! jk7a7@set-library-invoke-code! (lambda (jk83e@x jk83f@val) (simple-struct-set! jk83e@x '11 jk83f@val))) (set! jk973@jk7a7@set-library-invoke-code! jk7a7@set-library-invoke-code!) (set! jk7a9@library-visible? (lambda (jk842@x) (simple-struct-ref jk842@x '12))) (set! jk974@jk7a9@library-visible? jk7a9@library-visible?) (set! jk7ab@set-library-visible?! (lambda (jk844@x jk845@val) (simple-struct-set! jk844@x '12 jk845@val))) (set! jk975@jk7ab@set-library-visible?! jk7ab@set-library-visible?!) (set! jk7ad@library-source-file-name (lambda (jk848@x) (simple-struct-ref jk848@x '13))) (set! jk976@jk7ad@library-source-file-name jk7ad@library-source-file-name) (set! jk7af@set-library-source-file-name! (lambda (jk84a@x jk84b@val) (simple-struct-set! jk84a@x '13 jk84b@val))) (set! jk977@jk7af@set-library-source-file-name! jk7af@set-library-source-file-name!) (set! jk7b1@dummy '3) (set! jk978@jk7b1@dummy jk7b1@dummy) (set! jk7b3@find-dependencies (lambda (jk84e@ls) (if (null? jk84e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! jk979@jk7b3@find-dependencies jk7b3@find-dependencies) (set! jk7b5@find-library-by (lambda (jk850@pred) (let jk854@f ((jk852@ls ((jk76b@current-library-collection)))) (if (null? jk852@ls) '#f (if (jk850@pred (car jk852@ls)) (car jk852@ls) (jk854@f (cdr jk852@ls))))))) (set! jk97a@jk7b5@find-library-by jk7b5@find-library-by) (set! jk7b7@library-path (jk6c1@jk5a0@make-parameter '(".") (lambda (jk856@x) (if (and (list? jk856@x) (for-all string? jk856@x)) (map (lambda (jk858@x) jk858@x) jk856@x) (assertion-violation 'library-path '"not a list of strings" jk856@x))))) (set! jk97b@jk7b7@library-path jk7b7@library-path) (set! jk7b9@library-extensions (jk6c1@jk5a0@make-parameter '(".sls" ".ss" ".scm") (lambda (jk85a@x) (if (and (list? jk85a@x) (for-all string? jk85a@x)) (map (lambda (jk85c@x) jk85c@x) jk85a@x) (assertion-violation 'library-extensions '"not a list of strings" jk85a@x))))) (set! jk97c@jk7b9@library-extensions jk7b9@library-extensions) (set! jk7bb@library-name->file-name (lambda (jk85e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jk864@jk861 jk865@jk863) (let ((jk868@extract jk865@jk863) (jk869@p jk864@jk861)) (let ((jk86d@display-hex '#f)) (begin (set! jk86d@display-hex (lambda (jk876@n) (if (<= '0 jk876@n '9) (display jk876@n jk869@p) (display (integer->char (+ (char->integer '#\a) (- jk876@n '10))) jk869@p)))) (begin (let jk870@f ((jk86e@ls jk85e@x)) (if (not (null? jk86e@ls)) (begin (display '"/" jk869@p) (for-each (lambda (jk872@c) (if (or (char<=? '#\a jk872@c '#\z) (char<=? '#\A jk872@c '#\Z) (char<=? '#\0 jk872@c '#\9) (memv jk872@c '(#\- #\. #\_ #\~))) (display jk872@c jk869@p) (begin (display '"%" jk869@p) (let ((jk874@n (char->integer jk872@c))) (begin (jk86d@display-hex (quotient jk874@n '16)) (jk86d@display-hex (remainder jk874@n '16))))))) (string->list (symbol->string (car jk86e@ls)))) (jk870@f (cdr jk86e@ls))) (void))) (jk868@extract))))))))) (set! jk97d@jk7bb@library-name->file-name jk7bb@library-name->file-name) (set! jk7bd@file-locator (jk6c1@jk5a0@make-parameter (lambda (jk878@x) (let ((jk87a@str (jk7bb@library-name->file-name jk878@x))) (let jk882@f ((jk87c@ls (jk7b7@library-path)) (jk87d@exts (jk7b9@library-extensions)) (jk87e@failed-list '())) (if (null? jk87c@ls) (let ((jk88c@jk887 '#f) (jk88e@jk889 '#f) (jk890@jk888 '#f) (jk893@jk886 '#f) (jk895@make-library-resolution-condition '#f) (jk897@jk884 '#f) (jk899@jk885 '#f) (jk89b@library-resolution-condition? '#f) (jk89d@condition-library '#f) (jk89f@condition-files '#f)) (begin (set! jk88c@jk887 (make-record-type-descriptor '&library-resolution jk2b93@jk28da@&condition-rtd 'jk88a '#f '#f '#((immutable library) (immutable files)))) (set! jk88e@jk889 '#f) (set! jk890@jk888 (make-record-constructor-descriptor jk88c@jk887 jk2b94@jk28dc@&condition-rcd jk88e@jk889)) (set! jk893@jk886 (record-predicate jk88c@jk887)) (set! jk895@make-library-resolution-condition (record-constructor jk890@jk888)) (set! jk897@jk884 (record-accessor jk88c@jk887 '0)) (set! jk899@jk885 (record-accessor jk88c@jk887 '1)) (set! jk89b@library-resolution-condition? (condition-predicate jk88c@jk887)) (set! jk89d@condition-library (condition-accessor jk88c@jk887 jk897@jk884)) (set! jk89f@condition-files (condition-accessor jk88c@jk887 jk899@jk885)) (raise (condition (jk2bb3@jk2974@make-error) (jk2bd5@jk29d0@make-who-condition 'expander) (jk2b99@jk2931@make-message-condition '"cannot locate library in library-path") (jk895@make-library-resolution-condition jk878@x (reverse jk87e@failed-list)))))) (if (null? jk87d@exts) (jk882@f (cdr jk87c@ls) (jk7b9@library-extensions) jk87e@failed-list) (let ((jk8a0@name (string-append (car jk87c@ls) jk87a@str (car jk87d@exts)))) (if (file-exists? jk8a0@name) jk8a0@name (jk882@f jk87c@ls (cdr jk87d@exts) (cons jk8a0@name jk87e@failed-list))))))))) (lambda (jk8a2@f) (if (procedure? jk8a2@f) jk8a2@f (assertion-violation 'file-locator '"not a procedure" jk8a2@f))))) (set! jk97e@jk7bd@file-locator jk7bd@file-locator) (set! jk7bf@serialize-all (lambda (jk8a4@serialize jk8a5@compile) (let ((jk8a9@library-desc '#f)) (begin (set! jk8a9@library-desc (lambda (jk8ac@x) (list (jk779@library-id jk8ac@x) (jk77d@library-name jk8ac@x)))) (for-each (lambda (jk8aa@x) (if (jk7ad@library-source-file-name jk8aa@x) (jk8a4@serialize (jk7ad@library-source-file-name jk8aa@x) (list (jk779@library-id jk8aa@x) (jk77d@library-name jk8aa@x) (jk781@library-version jk8aa@x) (map jk8a9@library-desc (jk785@library-imp* jk8aa@x)) (map jk8a9@library-desc (jk789@library-vis* jk8aa@x)) (map jk8a9@library-desc (jk78d@library-inv* jk8aa@x)) (jk791@library-subst jk8aa@x) (jk795@library-env jk8aa@x) (jk8a5@compile (jk7a1@library-visit-code jk8aa@x)) (jk8a5@compile (jk7a5@library-invoke-code jk8aa@x)) (jk7a9@library-visible? jk8aa@x))) (void))) ((jk76b@current-library-collection))))))) (set! jk97f@jk7bf@serialize-all jk7bf@serialize-all) (set! jk7c1@current-precompiled-library-loader (jk6c1@jk5a0@make-parameter (lambda (jk8ae@filename jk8af@sk) '#f))) (set! jk980@jk7c1@current-precompiled-library-loader jk7c1@current-precompiled-library-loader) (set! jk7c3@try-load-from-file (lambda (jk8b2@filename) ((jk7c1@current-precompiled-library-loader) jk8b2@filename (lambda jk8d8 (let ((jk8d9 (length jk8d8))) (if (= jk8d9 '11) (apply (lambda (jk8b4@id jk8b5@name jk8b6@ver jk8b7@imp* jk8b8@vis* jk8b9@inv* jk8ba@exp-subst jk8bb@exp-env jk8bc@visit-proc jk8bd@invoke-proc jk8be@visible?) (let jk8cc@f ((jk8ca@deps (append jk8b7@imp* jk8b8@vis* jk8b9@inv*))) (if (null? jk8ca@deps) (begin (jk7d7@install-library jk8b4@id jk8b5@name jk8b6@ver jk8b7@imp* jk8b8@vis* jk8b9@inv* jk8ba@exp-subst jk8bb@exp-env jk8bc@visit-proc jk8bd@invoke-proc '#f '#f jk8be@visible? '#f) '#t) (let ((jk8ce@d (car jk8ca@deps))) (let ((jk8d0@label (car jk8ce@d)) (jk8d1@dname (cadr jk8ce@d))) (let ((jk8d4@l (jk7cd@find-library-by-name jk8d1@dname))) (if (and (jk777@library? jk8d4@l) (eq? jk8d0@label (jk779@library-id jk8d4@l))) (jk8cc@f (cdr jk8ca@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" jk8b5@name jk8d1@dname jk8b2@filename jk8d4@l jk8d0@label (jk779@library-id jk8d4@l)) '#f)))))))) jk8d8) (if (>= jk8d9 '0) (apply (lambda jk8d6@others '#f) jk8d8) (error 'apply '"invalid arg count")))))))) (set! jk981@jk7c3@try-load-from-file jk7c3@try-load-from-file) (set! jk7c5@library-loader (jk6c1@jk5a0@make-parameter (lambda (jk8da@x) (let ((jk8dc@file-name ((jk7bd@file-locator) jk8da@x))) (if (not jk8dc@file-name) (assertion-violation '#f '"cannot file library" jk8da@x) (or (jk7c3@try-load-from-file jk8dc@file-name) ((jk7c7@current-library-expander) (jk6c0@jk59e@read-library-source-file jk8dc@file-name) jk8dc@file-name (lambda (jk8de@name) (if (not (fast-equal? jk8de@name jk8da@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (jk8e4@jk8e1 jk8e5@jk8e3) (let ((jk8e8@e jk8e5@jk8e3) (jk8e9@p jk8e4@jk8e1)) (begin (display '"expected to find library " jk8e9@p) (write jk8da@x jk8e9@p) (display '" in file " jk8e9@p) (display jk8dc@file-name jk8e9@p) (display '", found " jk8e9@p) (write jk8de@name jk8e9@p) (display '" instead" jk8e9@p) (jk8e8@e)))))) (void)))))))) (lambda (jk8ec@f) (if (procedure? jk8ec@f) jk8ec@f (assertion-violation 'library-locator '"not a procedure" jk8ec@f))))) (set! jk982@jk7c5@library-loader jk7c5@library-loader) (set! jk7c7@current-library-expander (jk6c1@jk5a0@make-parameter (lambda (jk8ee@x) (assertion-violation 'library-expander '"not initialized")) (lambda (jk8f0@f) (if (procedure? jk8f0@f) jk8f0@f (assertion-violation 'library-expander '"not a procedure" jk8f0@f))))) (set! jk983@jk7c7@current-library-expander jk7c7@current-library-expander) (set! jk7c9@external-pending-libraries (jk6c1@jk5a0@make-parameter '())) (set! jk984@jk7c9@external-pending-libraries jk7c9@external-pending-libraries) (set! jk7cb@find-external-library (lambda (jk8f2@name) (begin (if (member jk8f2@name (jk7c9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" jk8f2@name) (void)) (let ((jk8f8@jk8f5 jk7c9@external-pending-libraries) (jk8f9@jk8f7 (cons jk8f2@name (jk7c9@external-pending-libraries)))) (let ((jk8fc@swap (lambda () (let ((jk8fe@t (jk8f8@jk8f5))) (begin (jk8f8@jk8f5 jk8f9@jk8f7) (set! jk8f9@jk8f7 jk8fe@t)))))) (dynamic-wind jk8fc@swap (lambda () (begin ((jk7c5@library-loader) jk8f2@name) (or (jk7b5@find-library-by (lambda (jk900@x) (fast-equal? (jk77d@library-name jk900@x) jk8f2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" jk8f2@name)))) jk8fc@swap)))))) (set! jk985@jk7cb@find-external-library jk7cb@find-external-library) (set! jk7cd@find-library-by-name (lambda (jk902@name) (or (jk7b5@find-library-by (lambda (jk904@x) (fast-equal? (jk77d@library-name jk904@x) jk902@name))) (jk7cb@find-external-library jk902@name)))) (set! jk986@jk7cd@find-library-by-name jk7cd@find-library-by-name) (set! jk7cf@library-exists? (lambda (jk906@name) (and (jk7b5@find-library-by (lambda (jk908@x) (fast-equal? (jk77d@library-name jk908@x) jk906@name))) '#t))) (set! jk987@jk7cf@library-exists? jk7cf@library-exists?) (set! jk7d1@find-library-by-spec/die (lambda (jk90a@spec) (let ((jk90c@id (car jk90a@spec))) (or (jk7b5@find-library-by (lambda (jk90e@x) (eq? jk90c@id (jk779@library-id jk90e@x)))) (assertion-violation '#f '"cannot find library with required spec" jk90a@spec))))) (set! jk988@jk7d1@find-library-by-spec/die jk7d1@find-library-by-spec/die) (set! jk7d3@label->binding-table (make-eq-hashtable)) (set! jk989@jk7d3@label->binding-table jk7d3@label->binding-table) (set! jk7d5@install-library-record (lambda (jk910@lib) (begin (let ((jk912@exp-env (jk795@library-env jk910@lib))) (for-each (lambda (jk914@x) (let ((jk916@label (car jk914@x)) (jk917@binding (cdr jk914@x))) (let ((jk91a@binding (let ((jk91c@t (car jk917@binding))) (if (memv jk91c@t '(global)) (cons 'global (cons jk910@lib (cdr jk917@binding))) (if (memv jk91c@t '(global-macro)) (cons 'global-macro (cons jk910@lib (cdr jk917@binding))) (if (memv jk91c@t '(global-macro!)) (cons 'global-macro! (cons jk910@lib (cdr jk917@binding))) jk917@binding)))))) (begin (if (hashtable-ref jk7d3@label->binding-table jk916@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" jk916@label (hashtable-ref jk7d3@label->binding-table jk916@label '#f) jk91a@binding) (exit)) (void)) (hashtable-set! jk7d3@label->binding-table jk916@label jk91a@binding))))) jk912@exp-env)) ((jk76b@current-library-collection) jk910@lib)))) (set! jk98a@jk7d5@install-library-record jk7d5@install-library-record) (set! jk7d7@install-library (lambda (jk91e@id jk91f@name jk920@ver jk921@imp* jk922@vis* jk923@inv* jk924@exp-subst jk925@exp-env jk926@visit-proc jk927@invoke-proc jk928@visit-code jk929@invoke-code jk92a@visible? jk92b@source-file-name) (let ((jk93a@imp-lib* (map jk7d1@find-library-by-spec/die jk921@imp*)) (jk93b@vis-lib* (map jk7d1@find-library-by-spec/die jk922@vis*)) (jk93c@inv-lib* (map jk7d1@find-library-by-spec/die jk923@inv*))) (begin (if (not (and (symbol? jk91e@id) (list? jk91f@name) (list? jk920@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" jk91e@id jk91f@name jk920@ver) (void)) (if (jk7cf@library-exists? jk91f@name) (assertion-violation 'install-library '"library is already installed" jk91f@name) (void)) (let ((jk940@lib (make-simple-struct 'library '15 (list jk91e@id jk91f@name jk920@ver jk93a@imp-lib* jk93b@vis-lib* jk93c@inv-lib* jk924@exp-subst jk925@exp-env jk926@visit-proc jk927@invoke-proc jk928@visit-code jk929@invoke-code jk92a@visible? jk92b@source-file-name)))) (jk7d5@install-library-record jk940@lib)))))) (set! jk98b@jk7d7@install-library jk7d7@install-library) (set! jk7d9@imported-label->binding (lambda (jk942@lab) (hashtable-ref jk7d3@label->binding-table jk942@lab '#f))) (set! jk98c@jk7d9@imported-label->binding jk7d9@imported-label->binding) (set! jk7db@invoke-library (lambda (jk944@lib) (let ((jk946@invoke (jk79d@library-invoke-state jk944@lib))) (if (procedure? jk946@invoke) (begin (jk79f@set-library-invoke-state! jk944@lib (lambda () (assertion-violation 'invoke '"circularity detected" jk944@lib))) (for-each jk7db@invoke-library (jk78d@library-inv* jk944@lib)) (jk79f@set-library-invoke-state! jk944@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" jk944@lib))) (jk946@invoke) (jk79f@set-library-invoke-state! jk944@lib '#t)) (void))))) (set! jk98d@jk7db@invoke-library jk7db@invoke-library) (set! jk7dd@visit-library (lambda (jk948@lib) (let ((jk94a@visit (jk799@library-visit-state jk948@lib))) (if (procedure? jk94a@visit) (begin (jk79b@set-library-visit-state! jk948@lib (lambda () (assertion-violation 'visit '"circularity detected" jk948@lib))) (for-each jk7db@invoke-library (jk789@library-vis* jk948@lib)) (jk79b@set-library-visit-state! jk948@lib (lambda () (assertion-violation 'invoke '"first visit did not return" jk948@lib))) (jk94a@visit) (jk79b@set-library-visit-state! jk948@lib '#t)) (void))))) (set! jk98e@jk7dd@visit-library jk7dd@visit-library) (set! jk7df@invoke-library-by-spec (lambda (jk94c@spec) (jk7db@invoke-library (jk7d1@find-library-by-spec/die jk94c@spec)))) (set! jk98f@jk7df@invoke-library-by-spec jk7df@invoke-library-by-spec) (set! jk7e1@installed-libraries (lambda jk954 (let ((jk955 (length jk954))) (if (= jk955 '1) (apply (lambda (jk94e@all?) (let jk952@f ((jk950@ls ((jk76b@current-library-collection)))) (if (null? jk950@ls) '() (if (or jk94e@all? (jk7a9@library-visible? (car jk950@ls))) (cons (car jk950@ls) (jk952@f (cdr jk950@ls))) (jk952@f (cdr jk950@ls)))))) jk954) (if (= jk955 '0) (apply (lambda () (jk7e1@installed-libraries '#f)) jk954) (error 'apply '"invalid arg count")))))) (set! jk990@jk7e1@installed-libraries jk7e1@installed-libraries) (set! jk7e3@library-spec (lambda (jk956@x) (begin (if (not (jk777@library? jk956@x)) (assertion-violation 'library-spec '"not a library" jk956@x) (void)) (list (jk779@library-id jk956@x) (jk77d@library-name jk956@x) (jk781@library-version jk956@x))))) (set! jk991@jk7e3@library-spec jk7e3@library-spec) (void))
(begin (set! jk995@build-global-define (unspecified)) (set! jka06@build-lambda (unspecified)) (set! jka08@build-case-lambda (unspecified)) (set! jka36@build-sequence (unspecified)) (set! jka38@build-void (unspecified)) (set! jka3a@build-letrec (unspecified)) (set! jka3c@build-let (unspecified)) (set! jka3e@build-named-let (unspecified)) (set! jka40@build-letrec* (unspecified)) (set! jka42@build-library-letrec* (unspecified)) (set! jka44@build-receive (unspecified)) (set! jk995@build-global-define (lambda (jka45@x) (jka38@build-void))) (set! jkad9@jk995@build-global-define jk995@build-global-define) (set! jka06@build-lambda (lambda (jka47@ae jka48@vars jka49@exp) (list 'lambda jka48@vars jka49@exp))) (set! jkada@jka06@build-lambda jka06@build-lambda) (set! jka08@build-case-lambda (lambda (jka4d@ae jka4e@vars* jka4f@exp*) (let ((jka54@build-error '#f) (jka56@build-pred '#f) (jka58@build-apply '#f) (jka5a@expand-case-lambda '#f)) (begin (set! jka54@build-error (lambda (jka8b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! jka56@build-pred (lambda (jka73@ae jka74@n jka75@vars) (call-with-values (lambda () (let jka81@f ((jka7d@vars jka75@vars) (jka7e@count '0)) (if (pair? jka7d@vars) (jka81@f (cdr jka7d@vars) (+ jka7e@count '1)) (if (null? jka7d@vars) (values jka7e@count '=) (values jka7e@count '>=))))) (lambda (jka83@jka7a jka84@jka7c) (let ((jka87@pred jka84@jka7c) (jka88@count jka83@jka7a)) (list (list 'primitive jka87@pred) jka74@n (list 'quote jka88@count))))))) (set! jka58@build-apply (lambda (jka6b@ae jka6c@g jka6d@vars jka6e@exp) (list '(primitive apply) (jka06@build-lambda jka6b@ae jka6d@vars jka6e@exp) jka6c@g))) (set! jka5a@expand-case-lambda (lambda (jka5b@ae jka5c@vars jka5d@exp*) (let ((jka61@g (gensym)) (jka62@n (gensym))) (list 'lambda jka61@g (jka3c@build-let jka5b@ae (list jka62@n) (list (list '(primitive length) jka61@g)) (let jka69@f ((jka65@vars* jka4e@vars*) (jka66@exp* jka5d@exp*)) (if (null? jka65@vars*) (jka54@build-error jka5b@ae) (list 'if (jka56@build-pred jka5b@ae jka62@n (car jka65@vars*)) (jka58@build-apply jka5b@ae jka61@g (car jka65@vars*) (car jka66@exp*)) (jka69@f (cdr jka65@vars*) (cdr jka66@exp*)))))))))) (if (= (length jka4f@exp*) '1) (jka06@build-lambda jka4d@ae (car jka4e@vars*) (car jka4f@exp*)) (jka5a@expand-case-lambda jka4d@ae jka4e@vars* jka4f@exp*)))))) (set! jkadb@jka08@build-case-lambda jka08@build-case-lambda) (set! jka36@build-sequence (lambda (jka8d@ae jka8e@exps) (let jka93@loop ((jka91@exps jka8e@exps)) (if (null? (cdr jka91@exps)) (car jka91@exps) (if (equal? (car jka91@exps) (jka38@build-void)) (jka93@loop (cdr jka91@exps)) (cons 'begin jka91@exps)))))) (set! jkadc@jka36@build-sequence jka36@build-sequence) (set! jka38@build-void (lambda () '((primitive void)))) (set! jkadd@jka38@build-void jka38@build-void) (set! jka3a@build-letrec (lambda (jka95@ae jka96@vars jka97@val-exps jka98@body-exp) (if (null? jka96@vars) jka98@body-exp (list 'letrec (map list jka96@vars jka97@val-exps) jka98@body-exp)))) (set! jkade@jka3a@build-letrec jka3a@build-letrec) (set! jka3c@build-let (lambda (jka9d@ae jka9e@vars jka9f@val-exps jkaa0@body-exp) (if (null? jka9e@vars) jkaa0@body-exp (list 'let (map list jka9e@vars jka9f@val-exps) jkaa0@body-exp)))) (set! jkadf@jka3c@build-let jka3c@build-let) (set! jka3e@build-named-let (lambda (jkaa5@ae jkaa6@name jkaa7@vars jkaa8@val-exps jkaa9@body-exp) (list 'let jkaa6@name (map list jkaa7@vars jkaa8@val-exps) jkaa9@body-exp))) (set! jkae0@jka3e@build-named-let jka3e@build-named-let) (set! jka40@build-letrec* (lambda (jkaaf@ae jkab0@vars jkab1@val-exps jkab2@body-exp) (if (null? jkab0@vars) jkab2@body-exp (jka3c@build-let jkaaf@ae jkab0@vars (map (lambda (jkab7@x) (list 'quote '#f)) jkab0@vars) (jka36@build-sequence jkaaf@ae (append (map (lambda (jkab9@lhs jkaba@rhs) (list 'set! jkab9@lhs jkaba@rhs)) jkab0@vars jkab1@val-exps) (list jkab2@body-exp))))))) (set! jkae1@jka40@build-letrec* jka40@build-letrec*) (set! jka42@build-library-letrec* (lambda (jkabd@ae jkabe@name jkabf@vars jkac0@locs jkac1@val-exps jkac2@body-exp) (cons 'begin (append (map (lambda (jkac9@var) (cons 'set! (cons jkac9@var '((unspecified))))) jkabf@vars) (append (apply append (map (lambda (jkacb@var jkacc@loc jkacd@val-exp) (list (list 'set! jkacb@var jkacd@val-exp) (list 'set! jkacc@loc jkacb@var))) jkabf@vars jkac0@locs jkac1@val-exps)) (list jkac2@body-exp)))))) (set! jkae2@jka42@build-library-letrec* jka42@build-library-letrec*) (set! jka44@build-receive (lambda (jkad1@ae jkad2@vars jkad3@producer jkad4@body*) (begin (display '"************** in ") (cons 'receive (cons jkad2@vars (cons jkad3@producer jkad4@body*)))))) (set! jkae3@jka44@build-receive jka44@build-receive) (void))
(begin (set! jkaf2@file-options-macro (unspecified)) (set! jkaf4@set-cons (unspecified)) (set! jkaf6@set-union (unspecified)) (set! jkafb@top-mark* (unspecified)) (set! jkafd@top-marked? (unspecified)) (set! jkaff@gen-lexical (unspecified)) (set! jkb01@gen-global (unspecified)) (set! jkb03@gen-label (unspecified)) (set! jkb05@gen-top-level-label (unspecified)) (set! jkb07@gen-define-label+loc (unspecified)) (set! jkb09@gen-define-label (unspecified)) (set! jkb13@rib? (unspecified)) (set! jkb15@rib-sym* (unspecified)) (set! jkb17@set-rib-sym*! (unspecified)) (set! jkb19@rib-mark** (unspecified)) (set! jkb1b@set-rib-mark**! (unspecified)) (set! jkb1d@rib-label* (unspecified)) (set! jkb1f@set-rib-label*! (unspecified)) (set! jkb21@rib-sealed/freq (unspecified)) (set! jkb23@set-rib-sealed/freq! (unspecified)) (set! jkb25@rib-cache (unspecified)) (set! jkb27@set-rib-cache! (unspecified)) (set! jkb29@dummy (unspecified)) (set! jkb2b@make-empty-rib (unspecified)) (set! jkb2d@extend-rib! (unspecified)) (set! jkb2f@extend-rib/nc! (unspecified)) (set! jkb31@make-rib-map (unspecified)) (set! jkb33@seal-rib! (unspecified)) (set! jkb35@unseal-rib! (unspecified)) (set! jkb37@make-full-rib (unspecified)) (set! jkb39@rp (unspecified)) (set! jkb43@stx? (unspecified)) (set! jkb45@stx-expr (unspecified)) (set! jkb47@set-stx-expr! (unspecified)) (set! jkb49@stx-mark* (unspecified)) (set! jkb4b@set-stx-mark*! (unspecified)) (set! jkb4d@stx-subst* (unspecified)) (set! jkb4f@set-stx-subst*! (unspecified)) (set! jkb51@stx-ae* (unspecified)) (set! jkb53@set-stx-ae*! (unspecified)) (set! jkb55@dummy (unspecified)) (set! jkb57@datum->stx (unspecified)) (set! jkb59@gen-mark (unspecified)) (set! jkb5b@anti-mark (unspecified)) (set! jkb5d@anti-mark? (unspecified)) (set! jkb5f@mkstx (unspecified)) (set! jkb61@add-mark (unspecified)) (set! jkb63@add-subst (unspecified)) (set! jkb65@syntax-kind? (unspecified)) (set! jkb67@syntax-vector->list (unspecified)) (set! jkb69@syntax-pair? (unspecified)) (set! jkb6b@syntax-vector? (unspecified)) (set! jkb6d@syntax-null? (unspecified)) (set! jkb6f@syntax-list? (unspecified)) (set! jkb71@syntax-car (unspecified)) (set! jkb73@syntax-cdr (unspecified)) (set! jkb75@syntax->list (unspecified)) (set! jkb77@id? (unspecified)) (set! jkb79@id->sym (unspecified)) (set! jkb7b@bound-id=? (unspecified)) (set! jkb7d@free-id=? (unspecified)) (set! jkb7f@valid-bound-ids? (unspecified)) (set! jkb81@distinct-bound-ids? (unspecified)) (set! jkb83@bound-id-member? (unspecified)) (set! jkb85@self-evaluating? (unspecified)) (set! jkb87@strip-annotations (unspecified)) (set! jkb89@strip (unspecified)) (set! jkb8b@stx->datum (unspecified)) (set! jkb8d@id->label (unspecified)) (set! jkb8f@label->binding (unspecified)) (set! jkb91@make-binding (unspecified)) (set! jkb93@binding-type (unspecified)) (set! jkb95@binding-value (unspecified)) (set! jkb97@raise-unbound-error (unspecified)) (set! jkb99@syntax-type (unspecified)) (set! jkba7@sanitize-binding (unspecified)) (set! jkba9@make-variable-transformer (unspecified)) (set! jkbab@variable-transformer? (unspecified)) (set! jkbad@variable-transformer-procedure (unspecified)) (set! jkbaf@make-eval-transformer (unspecified)) (set! jkd00@parse-define (unspecified)) (set! jkd02@parse-define-syntax (unspecified)) (set! jkd04@scheme-stx-hashtable (unspecified)) (set! jkd06@scheme-stx (unspecified)) (set! jkd08@lexical-var (unspecified)) (set! jkd0a@lexical-mutable? (unspecified)) (set! jkd0c@set-lexical-mutable! (unspecified)) (set! jkd0e@add-lexical (unspecified)) (set! jkd10@add-lexicals (unspecified)) (set! jkd12@letrec-helper (unspecified)) (set! jkd14@let-transformer (unspecified)) (set! jkd16@letrec-transformer (unspecified)) (set! jkd18@letrec*-transformer (unspecified)) (set! jkd1a@fluid-let-syntax-transformer (unspecified)) (set! jkd1c@type-descriptor-transformer (unspecified)) (set! jkd1e@record-type-descriptor-transformer (unspecified)) (set! jkd20@record-constructor-descriptor-transformer (unspecified)) (set! jkd22@when-macro (unspecified)) (set! jkd24@unless-macro (unspecified)) (set! jkd26@if-transformer (unspecified)) (set! jkd28@and-transformer (unspecified)) (set! jkd2a@or-transformer (unspecified)) (set! jkd2c@case-macro (unspecified)) (set! jkd2e@quote-transformer (unspecified)) (set! jkd30@case-lambda-transformer (unspecified)) (set! jkd32@lambda-transformer (unspecified)) (set! jkd34@bless (unspecified)) (set! jkd36@with-syntax-macro (unspecified)) (set! jkd38@invalid-fmls-error (unspecified)) (set! jkd3a@let-macro (unspecified)) (set! jkd3c@let-values-macro (unspecified)) (set! jkd3e@let*-values-macro (unspecified)) (set! jkd40@trace-lambda-macro (unspecified)) (set! jkd42@trace-define-macro (unspecified)) (set! jkd44@trace-define-syntax-macro (unspecified)) (set! jkd46@trace-let/rec-syntax (unspecified)) (set! jkd48@trace-let-syntax-macro (unspecified)) (set! jkd4a@trace-letrec-syntax-macro (unspecified)) (set! jkd4c@guard-macro (unspecified)) (set! jkd4e@define-enumeration-macro (unspecified)) (set! jkd50@time-macro (unspecified)) (set! jkd52@delay-macro (unspecified)) (set! jkd54@assert-macro (unspecified)) (set! jkd56@endianness-macro (unspecified)) (set! jkd58@identifier-syntax-macro (unspecified)) (set! jkd5a@do-macro (unspecified)) (set! jkd5c@let*-macro (unspecified)) (set! jkd5e@or-macro (unspecified)) (set! jkd60@and-macro (unspecified)) (set! jkd62@cond-macro (unspecified)) (set! jkd64@do-include (unspecified)) (set! jkd66@include-macro (unspecified)) (set! jkd68@include-into-macro (unspecified)) (set! jkd6a@syntax-rules-macro (unspecified)) (set! jkd6c@quasiquote-macro (unspecified)) (set! jkd6e@quasisyntax-macro (unspecified)) (set! jkd70@define-struct-macro (unspecified)) (set! jkd72@define-record-type-macro (unspecified)) (set! jkd74@define-condition-type-macro (unspecified)) (set! jkd76@incorrect-usage-macro (unspecified)) (set! jkd78@parameterize-macro (unspecified)) (set! jkd7a@foreign-call-transformer (unspecified)) (set! jkd7c@convert-pattern (unspecified)) (set! jkd7e@syntax-dispatch (unspecified)) (set! jkd80@ellipsis? (unspecified)) (set! jkd82@underscore? (unspecified)) (set! jkd84@verify-literals (unspecified)) (set! jkd86@syntax-case-transformer (unspecified)) (set! jkd88@ellipsis-map (unspecified)) (set! jkd8a@syntax-transformer (unspecified)) (set! jkd8c@core-macro-transformer (unspecified)) (set! jkd8e@symbol-macro (unspecified)) (set! jkd90@macro-transformer (unspecified)) (set! jkd92@local-macro-transformer (unspecified)) (set! jkd94@do-macro-call (unspecified)) (set! jkd96@chi-macro (unspecified)) (set! jkd98@chi-local-macro (unspecified)) (set! jkd9a@chi-global-macro (unspecified)) (set! jkd9c@chi-expr* (unspecified)) (set! jkd9e@chi-application (unspecified)) (set! jkda0@chi-expr (unspecified)) (set! jkda2@chi-set! (unspecified)) (set! jkda4@verify-formals (unspecified)) (set! jkda6@chi-lambda-clause (unspecified)) (set! jkda8@chi-lambda-clause* (unspecified)) (set! jkdaa@chi-defun (unspecified)) (set! jkdac@chi-rhs (unspecified)) (set! jkdae@expand-interaction-rhs*/init* (unspecified)) (set! jkdb0@chi-rhs* (unspecified)) (set! jkdb2@find-bound=? (unspecified)) (set! jkdb4@find-dups (unspecified)) (set! jkdb6@chi-internal (unspecified)) (set! jkdb8@parse-module (unspecified)) (set! jkdc2@module-interface? (unspecified)) (set! jkdc4@module-interface-first-mark (unspecified)) (set! jkdc6@set-module-interface-first-mark! (unspecified)) (set! jkdc8@module-interface-exp-id-vec (unspecified)) (set! jkdca@set-module-interface-exp-id-vec! (unspecified)) (set! jkdcc@module-interface-exp-lab-vec (unspecified)) (set! jkdce@set-module-interface-exp-lab-vec! (unspecified)) (set! jkdd0@dummy (unspecified)) (set! jkdd2@module-interface-exp-id* (unspecified)) (set! jkdd4@chi-internal-module (unspecified)) (set! jkdd6@chi-body* (unspecified)) (set! jkdd8@expand-transformer (unspecified)) (set! jkdda@parse-exports (unspecified)) (set! jkddc@parse-library-name (unspecified)) (set! jkdde@parse-library (unspecified)) (set! jkde0@parse-import-spec* (unspecified)) (set! jkde2@make-top-rib (unspecified)) (set! jkde4@make-collector (unspecified)) (set! jkde6@inv-collector (unspecified)) (set! jkde8@vis-collector (unspecified)) (set! jkdea@imp-collector (unspecified)) (set! jkdec@chi-library-internal (unspecified)) (set! jkdee@chi-interaction-expr (unspecified)) (set! jkdf0@library-body-expander (unspecified)) (set! jkdf2@core-library-expander (unspecified)) (set! jkdf4@parse-top-level-program (unspecified)) (set! jkdf6@top-level-expander (unspecified)) (set! jkdf8@rp (unspecified)) (set! jke02@env? (unspecified)) (set! jke04@env-names (unspecified)) (set! jke06@set-env-names! (unspecified)) (set! jke08@env-labels (unspecified)) (set! jke0a@set-env-labels! (unspecified)) (set! jke0c@env-itc (unspecified)) (set! jke0e@set-env-itc! (unspecified)) (set! jke10@dummy (unspecified)) (set! jke12@rp (unspecified)) (set! jke1c@interaction-env? (unspecified)) (set! jke1e@interaction-env-rib (unspecified)) (set! jke20@set-interaction-env-rib! (unspecified)) (set! jke22@interaction-env-r (unspecified)) (set! jke24@set-interaction-env-r! (unspecified)) (set! jke26@interaction-env-locs (unspecified)) (set! jke28@set-interaction-env-locs! (unspecified)) (set! jke2a@dummy (unspecified)) (set! jke2c@interaction-environment-symbols (unspecified)) (set! jke2e@environment-bindings (unspecified)) (set! jke30@parse-binding (unspecified)) (set! jke32@environment? (unspecified)) (set! jke34@environment-symbols (unspecified)) (set! jke36@environment (unspecified)) (set! jke38@null-environment (unspecified)) (set! jke3a@scheme-report-environment (unspecified)) (set! jke3c@expand (unspecified)) (set! jke3e@eval (unspecified)) (set! jke40@library-expander (unspecified)) (set! jke42@boot-library-expand (unspecified)) (set! jke44@rev-map-append (unspecified)) (set! jke46@build-exports (unspecified)) (set! jke48@make-export-subst (unspecified)) (set! jke4a@make-export-env/macros (unspecified)) (set! jke4c@generate-temporaries (unspecified)) (set! jke4e@free-identifier=? (unspecified)) (set! jke50@bound-identifier=? (unspecified)) (set! jke52@make-source-condition (unspecified)) (set! jke54@extract-position-condition (unspecified)) (set! jke56@expression-position (unspecified)) (set! jke58@assertion-error (unspecified)) (set! jke5a@syntax-error (unspecified)) (set! jke5c@syntax-violation* (unspecified)) (set! jke5e@syntax-violation (unspecified)) (set! jke60@identifier? (unspecified)) (set! jke62@datum->syntax (unspecified)) (set! jke64@syntax->datum (unspecified)) (set! jke66@ungensym-all (unspecified)) (set! jke68@compile-r6rs-top-level (unspecified)) (set! jke6a@pre-compile-r6rs-top-level (unspecified)) (set! jke6c@interaction-environment (unspecified)) (set! jke6e@top-level-context (unspecified)) (set! jkaf2@file-options-macro (lambda (jke6f@x) (let ((jke72@valid-option? '#f)) (begin (set! jke72@valid-option? (lambda (jke7b@x) (and (jkb77@id? jke7b@x) (memq (jkb79@id->sym jke7b@x) '(no-fail no-create no-truncate))))) (let ((jke73@t jke6f@x)) (let ((jke75@ls/false (jkd7e@syntax-dispatch jke73@t '(_ . each-any)))) (if (and jke75@ls/false (apply (lambda (jke77@opt*) (for-all jke72@valid-option? jke77@opt*)) jke75@ls/false)) (apply (lambda (jke79@opt*) (jkd34@bless (list 'make-file-options (list 'quote jke79@opt*)))) jke75@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jke73@t)))))))) (set! jk27c5@jkaf2@file-options-macro jkaf2@file-options-macro) (set! jkaf4@set-cons (lambda (jke7d@x jke7e@ls) (if (memq jke7d@x jke7e@ls) jke7e@ls (cons jke7d@x jke7e@ls)))) (set! jk27c6@jkaf4@set-cons jkaf4@set-cons) (set! jkaf6@set-union (lambda (jke81@ls1 jke82@ls2) (if (null? jke81@ls1) jke82@ls2 (if (memq (car jke81@ls1) jke82@ls2) (jkaf6@set-union (cdr jke81@ls1) jke82@ls2) (cons (car jke81@ls1) (jkaf6@set-union (cdr jke81@ls1) jke82@ls2)))))) (set! jk27c7@jkaf6@set-union jkaf6@set-union) (set! jkafb@top-mark* '(top)) (set! jk27c8@jkafb@top-mark* jkafb@top-mark*) (set! jkafd@top-marked? (lambda (jke85@m*) (memq 'top jke85@m*))) (set! jk27c9@jkafd@top-marked? jkafd@top-marked?) (set! jkaff@gen-lexical (lambda (jke87@sym) (if (symbol? jke87@sym) (gensym jke87@sym) (if (jkb43@stx? jke87@sym) (jkaff@gen-lexical (jkb79@id->sym jke87@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" jke87@sym))))) (set! jk27ca@jkaff@gen-lexical jkaff@gen-lexical) (set! jkb01@gen-global (lambda (jke89@x) (jkaff@gen-lexical jke89@x))) (set! jk27cb@jkb01@gen-global jkb01@gen-global) (set! jkb03@gen-label (lambda (jke8b@_) (gensym))) (set! jk27cc@jkb03@gen-label jkb03@gen-label) (set! jkb05@gen-top-level-label (lambda (jke8d@id jke8e@rib) (let ((jke92@find '#f)) (begin (set! jke92@find (lambda (jke9d@sym jke9e@mark* jke9f@sym* jkea0@mark** jkea1@label*) (and (pair? jke9f@sym*) (if (and (eq? jke9d@sym (car jke9f@sym*)) (same-marks? jke9e@mark* (car jkea0@mark**))) (car jkea1@label*) (jke92@find jke9d@sym jke9e@mark* (cdr jke9f@sym*) (cdr jkea0@mark**) (cdr jkea1@label*)))))) (let ((jke93@sym (jkb79@id->sym jke8d@id)) (jke94@mark* (jkb49@stx-mark* jke8d@id))) (let ((jke97@sym* (jkb15@rib-sym* jke8e@rib))) (let ((jke99@t (and (memq jke93@sym (jkb15@rib-sym* jke8e@rib)) (jke92@find jke93@sym jke94@mark* jke97@sym* (jkb19@rib-mark** jke8e@rib) (jkb1d@rib-label* jke8e@rib))))) (if jke99@t ((lambda (jke9b@label) (if (jk98c@jk7d9@imported-label->binding jke9b@label) (gensym) jke9b@label)) jke99@t) (gensym))))))))) (set! jk27cd@jkb05@gen-top-level-label jkb05@gen-top-level-label) (set! jkb07@gen-define-label+loc (lambda (jkea7@id jkea8@rib) (let ((jkeab@t (jke6e@top-level-context))) (if jkeab@t ((lambda (jkead@env) (let ((jkeaf@label (jkb05@gen-top-level-label jkea7@id jkea8@rib)) (jkeb0@locs (jke26@interaction-env-locs jkead@env))) (values jkeaf@label (let ((jkeb3@t (assq jkeaf@label jkeb0@locs))) (if jkeb3@t (cdr jkeb3@t) (let ((jkeb5@loc (jkaff@gen-lexical jkea7@id))) (begin (jke28@set-interaction-env-locs! jkead@env (cons (cons jkeaf@label jkeb5@loc) jkeb0@locs)) jkeb5@loc))))))) jkeab@t) (values (gensym) (jkaff@gen-lexical jkea7@id)))))) (set! jk27ce@jkb07@gen-define-label+loc jkb07@gen-define-label+loc) (set! jkb09@gen-define-label (lambda (jkeb7@id jkeb8@rib) (if (jke6e@top-level-context) (jkb05@gen-top-level-label jkeb7@id jkeb8@rib) (gensym)))) (set! jk27cf@jkb09@gen-define-label jkb09@gen-define-label) (set! jkb13@rib? (lambda (jkebb@x) (and (simple-struct? jkebb@x) (eq? (simple-struct-name jkebb@x) 'rib)))) (set! jk27d0@jkb13@rib? jkb13@rib?) (set! jkb15@rib-sym* (lambda (jkebd@x) (simple-struct-ref jkebd@x '0))) (set! jk27d1@jkb15@rib-sym* jkb15@rib-sym*) (set! jkb17@set-rib-sym*! (lambda (jkebf@x jkec0@val) (simple-struct-set! jkebf@x '0 jkec0@val))) (set! jk27d2@jkb17@set-rib-sym*! jkb17@set-rib-sym*!) (set! jkb19@rib-mark** (lambda (jkec3@x) (simple-struct-ref jkec3@x '1))) (set! jk27d3@jkb19@rib-mark** jkb19@rib-mark**) (set! jkb1b@set-rib-mark**! (lambda (jkec5@x jkec6@val) (simple-struct-set! jkec5@x '1 jkec6@val))) (set! jk27d4@jkb1b@set-rib-mark**! jkb1b@set-rib-mark**!) (set! jkb1d@rib-label* (lambda (jkec9@x) (simple-struct-ref jkec9@x '2))) (set! jk27d5@jkb1d@rib-label* jkb1d@rib-label*) (set! jkb1f@set-rib-label*! (lambda (jkecb@x jkecc@val) (simple-struct-set! jkecb@x '2 jkecc@val))) (set! jk27d6@jkb1f@set-rib-label*! jkb1f@set-rib-label*!) (set! jkb21@rib-sealed/freq (lambda (jkecf@x) (simple-struct-ref jkecf@x '3))) (set! jk27d7@jkb21@rib-sealed/freq jkb21@rib-sealed/freq) (set! jkb23@set-rib-sealed/freq! (lambda (jked1@x jked2@val) (simple-struct-set! jked1@x '3 jked2@val))) (set! jk27d8@jkb23@set-rib-sealed/freq! jkb23@set-rib-sealed/freq!) (set! jkb25@rib-cache (lambda (jked5@x) (simple-struct-ref jked5@x '4))) (set! jk27d9@jkb25@rib-cache jkb25@rib-cache) (set! jkb27@set-rib-cache! (lambda (jked7@x jked8@val) (simple-struct-set! jked7@x '4 jked8@val))) (set! jk27da@jkb27@set-rib-cache! jkb27@set-rib-cache!) (set! jkb29@dummy '3) (set! jk27db@jkb29@dummy jkb29@dummy) (set! jkb2b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jk27dc@jkb2b@make-empty-rib jkb2b@make-empty-rib) (set! jkb2d@extend-rib! (lambda (jkedb@rib jkedc@id jkedd@label) (let ((jkee2@find '#f)) (begin (set! jkee2@find (lambda (jkeef@sym jkef0@mark* jkef1@sym* jkef2@mark** jkef3@label*) (and (pair? jkef1@sym*) (if (and (eq? jkeef@sym (car jkef1@sym*)) (same-marks? jkef0@mark* (car jkef2@mark**))) jkef3@label* (jkee2@find jkeef@sym jkef0@mark* (cdr jkef1@sym*) (cdr jkef2@mark**) (cdr jkef3@label*)))))) (begin (if (jkb21@rib-sealed/freq jkedb@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jkedb@rib) (void)) (let ((jkee3@sym (jkb79@id->sym jkedc@id)) (jkee4@mark* (jkb49@stx-mark* jkedc@id))) (let ((jkee7@sym* (jkb15@rib-sym* jkedb@rib))) (let ((jkee9@t (and (memq jkee3@sym (jkb15@rib-sym* jkedb@rib)) (jkee2@find jkee3@sym jkee4@mark* jkee7@sym* (jkb19@rib-mark** jkedb@rib) (jkb1d@rib-label* jkedb@rib))))) (if jkee9@t ((lambda (jkeeb@p) (if (not (eq? jkedd@label (car jkeeb@p))) (if (jke6e@top-level-context) (set-car! jkeeb@p jkedd@label) (jke5e@syntax-violation '#f '"multiple definitions of identifier" jkedc@id)) (void))) jkee9@t) (begin (if (jkb25@rib-cache jkedb@rib) (hashtable-update! (jkb25@rib-cache jkedb@rib) jkee3@sym (lambda (jkeed@e) (cons (cons jkee4@mark* jkedd@label) jkeed@e)) '()) (void)) (jkb17@set-rib-sym*! jkedb@rib (cons jkee3@sym jkee7@sym*)) (jkb1b@set-rib-mark**! jkedb@rib (cons jkee4@mark* (jkb19@rib-mark** jkedb@rib))) (jkb1f@set-rib-label*! jkedb@rib (cons jkedd@label (jkb1d@rib-label* jkedb@rib))))))))))))) (set! jk27dd@jkb2d@extend-rib! jkb2d@extend-rib!) (set! jkb2f@extend-rib/nc! (lambda (jkef9@rib jkefa@id jkefb@label) (let ((jkeff@sym (jkb79@id->sym jkefa@id)) (jkf00@mark* (jkb49@stx-mark* jkefa@id))) (let ((jkf03@sym* (jkb15@rib-sym* jkef9@rib))) (begin (if (jkb25@rib-cache jkef9@rib) (hashtable-update! (jkb25@rib-cache jkef9@rib) jkeff@sym (lambda (jkf05@e) (cons (cons jkf00@mark* jkefb@label) jkf05@e)) '()) (void)) (jkb17@set-rib-sym*! jkef9@rib (cons jkeff@sym jkf03@sym*)) (jkb1b@set-rib-mark**! jkef9@rib (cons jkf00@mark* (jkb19@rib-mark** jkef9@rib))) (jkb1f@set-rib-label*! jkef9@rib (cons jkefb@label (jkb1d@rib-label* jkef9@rib)))))))) (set! jk27de@jkb2f@extend-rib/nc! jkb2f@extend-rib/nc!) (set! jkb31@make-rib-map (lambda (jkf07@sym*) (let ((jkf09@ht (make-eq-hashtable))) (let jkf0f@f ((jkf0b@i '0) (jkf0c@sym* jkf07@sym*)) (if (null? jkf0c@sym*) jkf09@ht (begin (hashtable-update! jkf09@ht (car jkf0c@sym*) (lambda (jkf11@x) (cons jkf0b@i jkf11@x)) '()) (jkf0f@f (+ jkf0b@i '1) (cdr jkf0c@sym*)))))))) (set! jk27df@jkb31@make-rib-map jkb31@make-rib-map) (set! jkb33@seal-rib! (lambda (jkf13@rib) (let ((jkf15@sym* (jkb15@rib-sym* jkf13@rib))) (if (not (null? jkf15@sym*)) (begin (jkb17@set-rib-sym*! jkf13@rib (list->vector jkf15@sym*)) (jkb1b@set-rib-mark**! jkf13@rib (list->vector (jkb19@rib-mark** jkf13@rib))) (jkb1f@set-rib-label*! jkf13@rib (list->vector (jkb1d@rib-label* jkf13@rib))) (jkb23@set-rib-sealed/freq! jkf13@rib (jkb31@make-rib-map jkf15@sym*))) (void))))) (set! jk27e0@jkb33@seal-rib! jkb33@seal-rib!) (set! jkb35@unseal-rib! (lambda (jkf17@rib) (if (jkb21@rib-sealed/freq jkf17@rib) (begin (jkb23@set-rib-sealed/freq! jkf17@rib '#f) (jkb17@set-rib-sym*! jkf17@rib (vector->list (jkb15@rib-sym* jkf17@rib))) (jkb1b@set-rib-mark**! jkf17@rib (vector->list (jkb19@rib-mark** jkf17@rib))) (jkb1f@set-rib-label*! jkf17@rib (vector->list (jkb1d@rib-label* jkf17@rib)))) (void)))) (set! jk27e1@jkb35@unseal-rib! jkb35@unseal-rib!) (set! jkb37@make-full-rib (lambda (jkf19@id* jkf1a@label*) (let ((jkf1d@r (make-simple-struct 'rib '6 (list (map jkb79@id->sym jkf19@id*) (map jkb49@stx-mark* jkf19@id*) jkf1a@label* '#f '#f)))) (begin (jkb33@seal-rib! jkf1d@r) jkf1d@r)))) (set! jk27e2@jkb37@make-full-rib jkb37@make-full-rib) (set! jkb39@rp (jk6be@jk59a@make-record-printer 'stx (lambda (jkf1f@x jkf20@p jkf21@wr) (begin (display '"#<syntax " jkf20@p) (write (jkb8b@stx->datum jkf1f@x) jkf20@p) (let ((jkf25@expr (jkb45@stx-expr jkf1f@x))) (if (jk6b6@jk58a@annotation? jkf25@expr) (let ((jkf27@src (jk6b7@jk58c@annotation-source jkf25@expr))) (if (pair? jkf27@src) (begin (display '" [" jkf20@p) (display (cdr jkf27@src) jkf20@p) (display '" of " jkf20@p) (display (car jkf27@src) jkf20@p) (display '"]" jkf20@p)) (void))) (void))) (display '">" jkf20@p))))) (set! jk27e3@jkb39@rp jkb39@rp) (set! jkb43@stx? (lambda (jkf29@x) (and (simple-struct? jkf29@x) (eq? (simple-struct-name jkf29@x) 'stx)))) (set! jk27e4@jkb43@stx? jkb43@stx?) (set! jkb45@stx-expr (lambda (jkf2b@x) (simple-struct-ref jkf2b@x '0))) (set! jk27e5@jkb45@stx-expr jkb45@stx-expr) (set! jkb47@set-stx-expr! (lambda (jkf2d@x jkf2e@val) (simple-struct-set! jkf2d@x '0 jkf2e@val))) (set! jk27e6@jkb47@set-stx-expr! jkb47@set-stx-expr!) (set! jkb49@stx-mark* (lambda (jkf31@x) (simple-struct-ref jkf31@x '1))) (set! jk27e7@jkb49@stx-mark* jkb49@stx-mark*) (set! jkb4b@set-stx-mark*! (lambda (jkf33@x jkf34@val) (simple-struct-set! jkf33@x '1 jkf34@val))) (set! jk27e8@jkb4b@set-stx-mark*! jkb4b@set-stx-mark*!) (set! jkb4d@stx-subst* (lambda (jkf37@x) (simple-struct-ref jkf37@x '2))) (set! jk27e9@jkb4d@stx-subst* jkb4d@stx-subst*) (set! jkb4f@set-stx-subst*! (lambda (jkf39@x jkf3a@val) (simple-struct-set! jkf39@x '2 jkf3a@val))) (set! jk27ea@jkb4f@set-stx-subst*! jkb4f@set-stx-subst*!) (set! jkb51@stx-ae* (lambda (jkf3d@x) (simple-struct-ref jkf3d@x '3))) (set! jk27eb@jkb51@stx-ae* jkb51@stx-ae*) (set! jkb53@set-stx-ae*! (lambda (jkf3f@x jkf40@val) (simple-struct-set! jkf3f@x '3 jkf40@val))) (set! jk27ec@jkb53@set-stx-ae*! jkb53@set-stx-ae*!) (set! jkb55@dummy '3) (set! jk27ed@jkb55@dummy jkb55@dummy) (set! jkb57@datum->stx (lambda (jkf43@id jkf44@datum) (make-simple-struct 'stx '5 (list jkf44@datum (jkb49@stx-mark* jkf43@id) (jkb4d@stx-subst* jkf43@id) (jkb51@stx-ae* jkf43@id))))) (set! jk27ee@jkb57@datum->stx jkb57@datum->stx) (set! jkb59@gen-mark (lambda () (string '#\m))) (set! jk27ef@jkb59@gen-mark jkb59@gen-mark) (set! jkb5b@anti-mark '#f) (set! jk27f0@jkb5b@anti-mark jkb5b@anti-mark) (set! jkb5d@anti-mark? not) (set! jk27f1@jkb5d@anti-mark? jkb5d@anti-mark?) (set! jkb5f@mkstx (lambda (jkf47@e jkf48@m* jkf49@s* jkf4a@ae*) (if (and (jkb43@stx? jkf47@e) (not (jkafd@top-marked? jkf48@m*))) (call-with-values (lambda () (join-wraps jkf48@m* jkf49@s* jkf4a@ae* jkf47@e)) (lambda (jkf55@jkf50 jkf56@jkf52 jkf57@jkf54) (let ((jkf5b@ae* jkf57@jkf54) (jkf5c@s* jkf56@jkf52) (jkf5d@m* jkf55@jkf50)) (make-simple-struct 'stx '5 (list (jkb45@stx-expr jkf47@e) jkf5d@m* jkf5c@s* jkf5b@ae*))))) (make-simple-struct 'stx '5 (list jkf47@e jkf48@m* jkf49@s* jkf4a@ae*))))) (set! jk27f2@jkb5f@mkstx jkb5f@mkstx) (set! jkb61@add-mark (lambda (jkf61@m jkf62@e jkf63@ae) (jkb5f@mkstx jkf62@e (list jkf61@m) '(shift) (list jkf63@ae)))) (set! jk27f3@jkb61@add-mark jkb61@add-mark) (set! jkb63@add-subst (lambda (jkf67@subst jkf68@e) (jkb5f@mkstx jkf68@e '() (list jkf67@subst) '()))) (set! jk27f4@jkb63@add-subst jkb63@add-subst) (set! jkb65@syntax-kind? (lambda (jkf6b@x jkf6c@p?) (if (jkb43@stx? jkf6b@x) (jkb65@syntax-kind? (jkb45@stx-expr jkf6b@x) jkf6c@p?) (if (jk6b6@jk58a@annotation? jkf6b@x) (jkb65@syntax-kind? (jk6b8@jk58e@annotation-expression jkf6b@x) jkf6c@p?) (jkf6c@p? jkf6b@x))))) (set! jk27f5@jkb65@syntax-kind? jkb65@syntax-kind?) (set! jkb67@syntax-vector->list (lambda (jkf6f@x) (if (jkb43@stx? jkf6f@x) (let ((jkf71@ls (jkb67@syntax-vector->list (jkb45@stx-expr jkf6f@x))) (jkf72@m* (jkb49@stx-mark* jkf6f@x)) (jkf73@s* (jkb4d@stx-subst* jkf6f@x)) (jkf74@ae* (jkb51@stx-ae* jkf6f@x))) (map (lambda (jkf79@x) (jkb5f@mkstx jkf79@x jkf72@m* jkf73@s* jkf74@ae*)) jkf71@ls)) (if (jk6b6@jk58a@annotation? jkf6f@x) (jkb67@syntax-vector->list (jk6b8@jk58e@annotation-expression jkf6f@x)) (if (vector? jkf6f@x) (vector->list jkf6f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jkf6f@x)))))) (set! jk27f6@jkb67@syntax-vector->list jkb67@syntax-vector->list) (set! jkb69@syntax-pair? (lambda (jkf7b@x) (jkb65@syntax-kind? jkf7b@x pair?))) (set! jk27f7@jkb69@syntax-pair? jkb69@syntax-pair?) (set! jkb6b@syntax-vector? (lambda (jkf7d@x) (jkb65@syntax-kind? jkf7d@x vector?))) (set! jk27f8@jkb6b@syntax-vector? jkb6b@syntax-vector?) (set! jkb6d@syntax-null? (lambda (jkf7f@x) (jkb65@syntax-kind? jkf7f@x null?))) (set! jk27f9@jkb6d@syntax-null? jkb6d@syntax-null?) (set! jkb6f@syntax-list? (lambda (jkf81@x) (or (jkb6d@syntax-null? jkf81@x) (and (jkb69@syntax-pair? jkf81@x) (jkb6f@syntax-list? (jkb73@syntax-cdr jkf81@x)))))) (set! jk27fa@jkb6f@syntax-list? jkb6f@syntax-list?) (set! jkb71@syntax-car (lambda (jkf83@x) (if (jkb43@stx? jkf83@x) (jkb5f@mkstx (jkb71@syntax-car (jkb45@stx-expr jkf83@x)) (jkb49@stx-mark* jkf83@x) (jkb4d@stx-subst* jkf83@x) (jkb51@stx-ae* jkf83@x)) (if (jk6b6@jk58a@annotation? jkf83@x) (jkb71@syntax-car (jk6b8@jk58e@annotation-expression jkf83@x)) (if (pair? jkf83@x) (car jkf83@x) (assertion-violation 'syntax-car '"BUG: not a pair" jkf83@x)))))) (set! jk27fb@jkb71@syntax-car jkb71@syntax-car) (set! jkb73@syntax-cdr (lambda (jkf85@x) (if (jkb43@stx? jkf85@x) (jkb5f@mkstx (jkb73@syntax-cdr (jkb45@stx-expr jkf85@x)) (jkb49@stx-mark* jkf85@x) (jkb4d@stx-subst* jkf85@x) (jkb51@stx-ae* jkf85@x)) (if (jk6b6@jk58a@annotation? jkf85@x) (jkb73@syntax-cdr (jk6b8@jk58e@annotation-expression jkf85@x)) (if (pair? jkf85@x) (cdr jkf85@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jkf85@x)))))) (set! jk27fc@jkb73@syntax-cdr jkb73@syntax-cdr) (set! jkb75@syntax->list (lambda (jkf87@x) (if (jkb69@syntax-pair? jkf87@x) (cons (jkb71@syntax-car jkf87@x) (jkb75@syntax->list (jkb73@syntax-cdr jkf87@x))) (if (jkb6d@syntax-null? jkf87@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jkf87@x))))) (set! jk27fd@jkb75@syntax->list jkb75@syntax->list) (set! jkb77@id? (lambda (jkf89@x) (and (jkb43@stx? jkf89@x) (symbol? (jkb45@stx-expr jkf89@x))))) (set! jk27fe@jkb77@id? jkb77@id?) (set! jkb79@id->sym (lambda (jkf8b@x) (jkb45@stx-expr jkf8b@x))) (set! jk27ff@jkb79@id->sym jkb79@id->sym) (set! jkb7b@bound-id=? (lambda (jkf8d@x jkf8e@y) (and (eq? (jkb79@id->sym jkf8d@x) (jkb79@id->sym jkf8e@y)) (same-marks? (jkb49@stx-mark* jkf8d@x) (jkb49@stx-mark* jkf8e@y))))) (set! jk2800@jkb7b@bound-id=? jkb7b@bound-id=?) (set! jkb7d@free-id=? (lambda (jkf91@i jkf92@j) (let ((jkf95@t0 (id->real-label jkf91@i)) (jkf96@t1 (id->real-label jkf92@j))) (if (or jkf95@t0 jkf96@t1) (eq? jkf95@t0 jkf96@t1) (eq? (jkb79@id->sym jkf91@i) (jkb79@id->sym jkf92@j)))))) (set! jk2801@jkb7d@free-id=? jkb7d@free-id=?) (set! jkb7f@valid-bound-ids? (lambda (jkf99@id*) (and (for-all jkb77@id? jkf99@id*) (jkb81@distinct-bound-ids? jkf99@id*)))) (set! jk2802@jkb7f@valid-bound-ids? jkb7f@valid-bound-ids?) (set! jkb81@distinct-bound-ids? (lambda (jkf9b@id*) (or (null? jkf9b@id*) (and (not (jkb83@bound-id-member? (car jkf9b@id*) (cdr jkf9b@id*))) (jkb81@distinct-bound-ids? (cdr jkf9b@id*)))))) (set! jk2803@jkb81@distinct-bound-ids? jkb81@distinct-bound-ids?) (set! jkb83@bound-id-member? (lambda (jkf9d@id jkf9e@id*) (and (pair? jkf9e@id*) (or (jkb7b@bound-id=? jkf9d@id (car jkf9e@id*)) (jkb83@bound-id-member? jkf9d@id (cdr jkf9e@id*)))))) (set! jk2804@jkb83@bound-id-member? jkb83@bound-id-member?) (set! jkb85@self-evaluating? (lambda (jkfa1@x) (or (number? jkfa1@x) (string? jkfa1@x) (char? jkfa1@x) (boolean? jkfa1@x) (regexp? jkfa1@x) (bytevector? jkfa1@x)))) (set! jk2805@jkb85@self-evaluating? jkb85@self-evaluating?) (set! jkb87@strip-annotations (lambda (jkfa3@x) (if (pair? jkfa3@x) (cons (jkb87@strip-annotations (car jkfa3@x)) (jkb87@strip-annotations (cdr jkfa3@x))) (if (vector? jkfa3@x) (vector-map jkb87@strip-annotations jkfa3@x) (if (jk6b6@jk58a@annotation? jkfa3@x) (jk6b5@jk588@annotation-stripped jkfa3@x) jkfa3@x))))) (set! jk2806@jkb87@strip-annotations jkb87@strip-annotations) (set! jkb89@strip (lambda (jkfa5@x jkfa6@m*) (if (jkafd@top-marked? jkfa6@m*) (if (or (jk6b6@jk58a@annotation? jkfa5@x) (and (pair? jkfa5@x) (jk6b6@jk58a@annotation? (car jkfa5@x))) (and (vector? jkfa5@x) (> (vector-length jkfa5@x) '0) (jk6b6@jk58a@annotation? (vector-ref jkfa5@x '0)))) (jkb87@strip-annotations jkfa5@x) jkfa5@x) (let jkfab@f ((jkfa9@x jkfa5@x)) (if (jkb43@stx? jkfa9@x) (jkb89@strip (jkb45@stx-expr jkfa9@x) (jkb49@stx-mark* jkfa9@x)) (if (jk6b6@jk58a@annotation? jkfa9@x) (jk6b5@jk588@annotation-stripped jkfa9@x) (if (pair? jkfa9@x) (let ((jkfad@a (jkfab@f (car jkfa9@x))) (jkfae@d (jkfab@f (cdr jkfa9@x)))) (if (and (eq? jkfad@a (car jkfa9@x)) (eq? jkfae@d (cdr jkfa9@x))) jkfa9@x (cons jkfad@a jkfae@d))) (if (vector? jkfa9@x) (let ((jkfb1@old (vector->list jkfa9@x))) (let ((jkfb3@new (map jkfab@f jkfb1@old))) (if (for-all eq? jkfb1@old jkfb3@new) jkfa9@x (list->vector jkfb3@new)))) jkfa9@x)))))))) (set! jk2807@jkb89@strip jkb89@strip) (set! jkb8b@stx->datum (lambda (jkfb5@x) (jkb89@strip jkfb5@x '()))) (set! jk2808@jkb8b@stx->datum jkb8b@stx->datum) (set! jkb8d@id->label (lambda (jkfb7@id) (or (id->real-label jkfb7@id) (let ((jkfb9@t (jke6e@top-level-context))) (if jkfb9@t ((lambda (jkfbb@env) (let ((jkfbd@rib (jke1e@interaction-env-rib jkfbb@env))) (call-with-values (lambda () (jkb07@gen-define-label+loc jkfb7@id jkfbd@rib)) (lambda (jkfc3@jkfc0 jkfc4@jkfc2) (let ((jkfc7@loc_ jkfc4@jkfc2) (jkfc8@lab jkfc3@jkfc0)) (begin (jkb2d@extend-rib! jkfbd@rib jkfb7@id jkfc8@lab) jkfc8@lab)))))) jkfb9@t) '#f))))) (set! jk2809@jkb8d@id->label jkb8d@id->label) (set! jkb8f@label->binding (lambda (jkfcb@x jkfcc@r) (let ((jkfcf@t (jk98c@jk7d9@imported-label->binding jkfcb@x))) (if jkfcf@t ((lambda (jkfd1@b) (if (and (pair? jkfd1@b) (eq? (car jkfd1@b) '$core-rtd)) (cons '$rtd (map jkd34@bless (cdr jkfd1@b))) (if (and (pair? jkfd1@b) (eq? (car jkfd1@b) 'global-rtd)) (let ((jkfd3@lib (cadr jkfd1@b)) (jkfd4@loc (cddr jkfd1@b))) (cons '$rtd (symbol-value jkfd4@loc))) jkfd1@b))) jkfcf@t) (let ((jkfd7@t (assq jkfcb@x jkfcc@r))) (if jkfd7@t (cdr jkfd7@t) (let ((jkfd9@t (jke6e@top-level-context))) (if jkfd9@t ((lambda (jkfdb@env) (let ((jkfdd@t (assq jkfcb@x (jke26@interaction-env-locs jkfdb@env)))) (if jkfdd@t ((lambda (jkfdf@p) (cons* 'lexical (cdr jkfdf@p) '#f)) jkfdd@t) '(displaced-lexical . #f)))) jkfd9@t) '(displaced-lexical . #f))))))))) (set! jk280a@jkb8f@label->binding jkb8f@label->binding) (set! jkb91@make-binding cons) (set! jk280b@jkb91@make-binding jkb91@make-binding) (set! jkb93@binding-type car) (set! jk280c@jkb93@binding-type jkb93@binding-type) (set! jkb95@binding-value cdr) (set! jk280d@jkb95@binding-value jkb95@binding-value) (set! jkb97@raise-unbound-error (lambda (jkfe1@id) (jke5c@syntax-violation* '#f '"unbound identifier" jkfe1@id (jk2c03@jk2a49@make-undefined-violation)))) (set! jk280e@jkb97@raise-unbound-error jkb97@raise-unbound-error) (set! jkb99@syntax-type (lambda (jkfe3@e jkfe4@r) (if (jkb77@id? jkfe3@e) (let ((jkfe7@id jkfe3@e)) (let ((jkfe9@label (jkb8d@id->label jkfe7@id))) (let ((jkfeb@b (jkb8f@label->binding jkfe9@label jkfe4@r))) (let ((jkfed@type (jkb93@binding-type jkfeb@b))) (begin (if (not jkfe9@label) (jkb97@raise-unbound-error jkfe7@id) (void)) (let ((jkfef@t jkfed@type)) (if (memv jkfef@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jkfed@type (jkb95@binding-value jkfeb@b) jkfe7@id) (values 'other '#f '#f)))))))) (if (jkb69@syntax-pair? jkfe3@e) (let ((jkff1@id (jkb71@syntax-car jkfe3@e))) (if (jkb77@id? jkff1@id) (let ((jkff3@label (jkb8d@id->label jkff1@id))) (let ((jkff5@b (jkb8f@label->binding jkff3@label jkfe4@r))) (let ((jkff7@type (jkb93@binding-type jkff5@b))) (begin (if (not jkff3@label) (jkb97@raise-unbound-error jkff1@id) (void)) (let ((jkff9@t jkff7@type)) (if (memv jkff9@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jkff7@type (jkb95@binding-value jkff5@b) jkff1@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((jkffb@d (jkb8b@stx->datum jkfe3@e))) (if (jkb85@self-evaluating? jkffb@d) (values 'constant jkffb@d '#f) (values 'other '#f '#f))))))) (set! jk280f@jkb99@syntax-type jkb99@syntax-type) (set! jkba7@sanitize-binding (lambda (jkffd@x jkffe@src) (if (procedure? jkffd@x) (cons* 'local-macro jkffd@x jkffe@src) (if (and (pair? jkffd@x) (eq? (car jkffd@x) 'macro!) (procedure? (cdr jkffd@x))) (cons* 'local-macro! (cdr jkffd@x) jkffe@src) (if (and (pair? jkffd@x) (eq? (car jkffd@x) '$rtd)) jkffd@x (assertion-violation 'expand '"invalid transformer" jkffd@x)))))) (set! jk2810@jkba7@sanitize-binding jkba7@sanitize-binding) (set! jkba9@make-variable-transformer (lambda (jk1001@x) (if (procedure? jk1001@x) (cons 'macro! jk1001@x) (assertion-violation 'make-variable-transformer '"not a procedure" jk1001@x)))) (set! jk2811@jkba9@make-variable-transformer jkba9@make-variable-transformer) (set! jkbab@variable-transformer? (lambda (jk1003@x) (and (pair? jk1003@x) (eq? (car jk1003@x) 'macro!) (procedure? (cdr jk1003@x))))) (set! jk2812@jkbab@variable-transformer? jkbab@variable-transformer?) (set! jkbad@variable-transformer-procedure (lambda (jk1005@x) (if (jkbab@variable-transformer? jk1005@x) (cdr jk1005@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jk1005@x)))) (set! jk2813@jkbad@variable-transformer-procedure jkbad@variable-transformer-procedure) (set! jkbaf@make-eval-transformer (lambda (jk1007@x) (jkba7@sanitize-binding (eval-core (jk717@jk6cf@expanded->core jk1007@x)) jk1007@x))) (set! jk2814@jkbaf@make-eval-transformer jkbaf@make-eval-transformer) (set! jkd00@parse-define (lambda (jk1009@x) (let ((jk100b@t jk1009@x)) (let ((jk100d@ls/false (jkd7e@syntax-dispatch jk100b@t '(_ (any . any) any . each-any)))) (if (and jk100d@ls/false (apply (lambda (jk100f@id jk1010@fmls jk1011@b jk1012@b*) (jkb77@id? jk100f@id)) jk100d@ls/false)) (apply (lambda (jk1017@id jk1018@fmls jk1019@b jk101a@b*) (begin (jkda4@verify-formals jk1018@fmls jk1009@x) (values jk1017@id (cons 'defun (cons jk1018@fmls (cons jk1019@b jk101a@b*)))))) jk100d@ls/false) (let ((jk101f@t jk100b@t)) (let ((jk1021@ls/false (jkd7e@syntax-dispatch jk101f@t '(_ any any)))) (if (and jk1021@ls/false (apply (lambda (jk1023@id jk1024@val) (jkb77@id? jk1023@id)) jk1021@ls/false)) (apply (lambda (jk1027@id jk1028@val) (values jk1027@id (cons 'expr jk1028@val))) jk1021@ls/false) (let ((jk102b@t jk101f@t)) (let ((jk102d@ls/false (jkd7e@syntax-dispatch jk102b@t '(_ any)))) (if (and jk102d@ls/false (apply (lambda (jk102f@id) (jkb77@id? jk102f@id)) jk102d@ls/false)) (apply (lambda (jk1031@id) (values jk1031@id (cons 'expr (jkd34@bless '(void))))) jk102d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk102b@t)))))))))))) (set! jk2815@jkd00@parse-define jkd00@parse-define) (set! jkd02@parse-define-syntax (lambda (jk1033@x) (let ((jk1035@t jk1033@x)) (let ((jk1037@ls/false (jkd7e@syntax-dispatch jk1035@t '(_ any any)))) (if (and jk1037@ls/false (apply (lambda (jk1039@id jk103a@val) (jkb77@id? jk1039@id)) jk1037@ls/false)) (apply (lambda (jk103d@id jk103e@val) (values jk103d@id jk103e@val)) jk1037@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1035@t)))))) (set! jk2816@jkd02@parse-define-syntax jkd02@parse-define-syntax) (set! jkd04@scheme-stx-hashtable (make-eq-hashtable)) (set! jk2817@jkd04@scheme-stx-hashtable jkd04@scheme-stx-hashtable) (set! jkd06@scheme-stx (lambda (jk1041@sym) (or (hashtable-ref jkd04@scheme-stx-hashtable jk1041@sym '#f) (let ((jk1043@subst (jk968@jk791@library-subst (jk986@jk7cd@find-library-by-name '(psyntax system $all))))) (let ((jk1045@stx (make-simple-struct 'stx '5 (list jk1041@sym jkafb@top-mark* '() '())))) (let ((jk1047@stx (let ((jk1049@t (assq jk1041@sym jk1043@subst))) (if jk1049@t ((lambda (jk104b@x) (let ((jk104d@name (car jk104b@x)) (jk104e@label (cdr jk104b@x))) (jkb63@add-subst (make-simple-struct 'rib '6 (list (list jk104d@name) (list jkafb@top-mark*) (list jk104e@label) '#f '#f)) jk1045@stx))) jk1049@t) jk1045@stx)))) (begin (hashtable-set! jkd04@scheme-stx-hashtable jk1041@sym jk1047@stx) jk1047@stx))))))) (set! jk2818@jkd06@scheme-stx jkd06@scheme-stx) (set! jkd08@lexical-var car) (set! jk2819@jkd08@lexical-var jkd08@lexical-var) (set! jkd0a@lexical-mutable? cdr) (set! jk281a@jkd0a@lexical-mutable? jkd0a@lexical-mutable?) (set! jkd0c@set-lexical-mutable! set-cdr!) (set! jk281b@jkd0c@set-lexical-mutable! jkd0c@set-lexical-mutable!) (set! jkd0e@add-lexical (lambda (jk1051@lab jk1052@lex jk1053@r) (cons (cons* jk1051@lab 'lexical jk1052@lex '#f) jk1053@r))) (set! jk281c@jkd0e@add-lexical jkd0e@add-lexical) (set! jkd10@add-lexicals (lambda (jk1057@lab* jk1058@lex* jk1059@r) (if (null? jk1057@lab*) jk1059@r (jkd10@add-lexicals (cdr jk1057@lab*) (cdr jk1058@lex*) (jkd0e@add-lexical (car jk1057@lab*) (car jk1058@lex*) jk1059@r))))) (set! jk281d@jkd10@add-lexicals jkd10@add-lexicals) (set! jkd12@letrec-helper (lambda (jk105d@e jk105e@r jk105f@mr jk1060@build) (let ((jk1065@t jk105d@e)) (let ((jk1067@ls/false (jkd7e@syntax-dispatch jk1065@t '(_ #(each (any any)) any . each-any)))) (if jk1067@ls/false (apply (lambda (jk1069@lhs* jk106a@rhs* jk106b@b jk106c@b*) (if (not (jkb7f@valid-bound-ids? jk1069@lhs*)) (jkd38@invalid-fmls-error jk105d@e jk1069@lhs*) (let ((jk1071@lex* (map jkaff@gen-lexical jk1069@lhs*)) (jk1072@lab* (map jkb03@gen-label jk1069@lhs*))) (let ((jk1075@rib (jkb37@make-full-rib jk1069@lhs* jk1072@lab*)) (jk1076@r (jkd10@add-lexicals jk1072@lab* jk1071@lex* jk105e@r))) (let ((jk1079@body (jkdb6@chi-internal (jkb63@add-subst jk1075@rib (cons jk106b@b jk106c@b*)) jk1076@r jk105f@mr)) (jk107a@rhs* (jkd9c@chi-expr* (map (lambda (jk107d@x) (jkb63@add-subst jk1075@rib jk107d@x)) jk106a@rhs*) jk1076@r jk105f@mr))) (jk1060@build '#f jk1071@lex* jk107a@rhs* jk1079@body)))))) jk1067@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1065@t)))))) (set! jk281e@jkd12@letrec-helper jkd12@letrec-helper) (set! jkd14@let-transformer (lambda (jk107f@e jk1080@r jk1081@mr) (let ((jk1085@t jk107f@e)) (let ((jk1087@ls/false (jkd7e@syntax-dispatch jk1085@t '(_ #(each (any any)) any . each-any)))) (if jk1087@ls/false (apply (lambda (jk1089@lhs* jk108a@rhs* jk108b@b jk108c@b*) (if (not (jkb7f@valid-bound-ids? jk1089@lhs*)) (jkd38@invalid-fmls-error jk107f@e jk1089@lhs*) (let ((jk1091@lex* (map jkaff@gen-lexical jk1089@lhs*)) (jk1092@lab* (map jkb03@gen-label jk1089@lhs*)) (jk1093@rhs* (jkd9c@chi-expr* jk108a@rhs* jk1080@r jk1081@mr))) (let ((jk1097@rib (jkb37@make-full-rib jk1089@lhs* jk1092@lab*)) (jk1098@r (jkd10@add-lexicals jk1092@lab* jk1091@lex* jk1080@r))) (let ((jk109b@body (jkdb6@chi-internal (jkb63@add-subst jk1097@rib (cons jk108b@b jk108c@b*)) jk1098@r jk1081@mr))) (jkadf@jka3c@build-let '#f jk1091@lex* jk1093@rhs* jk109b@body)))))) jk1087@ls/false) (let ((jk109d@t jk1085@t)) (let ((jk109f@ls/false (jkd7e@syntax-dispatch jk109d@t '(_ any #(each (any any)) any . each-any)))) (if jk109f@ls/false (apply (lambda (jk10a1@loop jk10a2@lhs* jk10a3@rhs* jk10a4@b jk10a5@b*) (if (not (jkb7f@valid-bound-ids? jk10a2@lhs*)) (jkd38@invalid-fmls-error jk107f@e jk10a2@lhs*) (let ((jk10ab@lex* (map jkaff@gen-lexical jk10a2@lhs*)) (jk10ac@lab* (map jkb03@gen-label jk10a2@lhs*)) (jk10ad@rhs* (jkd9c@chi-expr* jk10a3@rhs* jk1080@r jk1081@mr)) (jk10ae@loop-lex (jkaff@gen-lexical jk10a1@loop)) (jk10af@loop-lab (jkb03@gen-label jk10a1@loop))) (let ((jk10b5@loop-rib (jkb37@make-full-rib (list jk10a1@loop) (list jk10af@loop-lab))) (jk10b6@rib (jkb37@make-full-rib jk10a2@lhs* jk10ac@lab*)) (jk10b7@r (jkd10@add-lexicals (cons jk10af@loop-lab jk10ac@lab*) (cons jk10ae@loop-lex jk10ab@lex*) jk1080@r))) (let ((jk10bb@body (jkdb6@chi-internal (jkb63@add-subst jk10b5@loop-rib (jkb63@add-subst jk10b6@rib (cons jk10a4@b jk10a5@b*))) jk10b7@r jk1081@mr))) (jkae0@jka3e@build-named-let '#f jk10ae@loop-lex jk10ab@lex* jk10ad@rhs* jk10bb@body)))))) jk109f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk109d@t))))))))) (set! jk281f@jkd14@let-transformer jkd14@let-transformer) (set! jkd16@letrec-transformer (lambda (jk10bd@e jk10be@r jk10bf@mr) (jkd12@letrec-helper jk10bd@e jk10be@r jk10bf@mr jkade@jka3a@build-letrec))) (set! jk2820@jkd16@letrec-transformer jkd16@letrec-transformer) (set! jkd18@letrec*-transformer (lambda (jk10c3@e jk10c4@r jk10c5@mr) (jkd12@letrec-helper jk10c3@e jk10c4@r jk10c5@mr jkae1@jka40@build-letrec*))) (set! jk2821@jkd18@letrec*-transformer jkd18@letrec*-transformer) (set! jkd1a@fluid-let-syntax-transformer (lambda (jk10c9@e jk10ca@r jk10cb@mr) (let ((jk10d0@lookup '#f)) (begin (set! jk10d0@lookup (lambda (jk10e3@x) (or (jkb8d@id->label jk10e3@x) (jke5e@syntax-violation '#f '"unbound identifier" jk10c9@e jk10e3@x)))) (let ((jk10d1@t jk10c9@e)) (let ((jk10d3@ls/false (jkd7e@syntax-dispatch jk10d1@t '(_ #(each (any any)) any . each-any)))) (if jk10d3@ls/false (apply (lambda (jk10d5@lhs* jk10d6@rhs* jk10d7@b jk10d8@b*) (if (not (jkb7f@valid-bound-ids? jk10d5@lhs*)) (jkd38@invalid-fmls-error jk10c9@e jk10d5@lhs*) (let ((jk10dd@lab* (map jk10d0@lookup jk10d5@lhs*)) (jk10de@rhs* (map (lambda (jk10e1@x) (jkbaf@make-eval-transformer (jkdd8@expand-transformer jk10e1@x jk10cb@mr))) jk10d6@rhs*))) (jkdb6@chi-internal (cons jk10d7@b jk10d8@b*) (append (map cons jk10dd@lab* jk10de@rhs*) jk10ca@r) (append (map cons jk10dd@lab* jk10de@rhs*) jk10cb@mr))))) jk10d3@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk10d1@t)))))))) (set! jk2822@jkd1a@fluid-let-syntax-transformer jkd1a@fluid-let-syntax-transformer) (set! jkd1c@type-descriptor-transformer (lambda (jk10e5@e jk10e6@r jk10e7@mr) (let ((jk10eb@t jk10e5@e)) (let ((jk10ed@ls/false (jkd7e@syntax-dispatch jk10eb@t '(_ any)))) (if (and jk10ed@ls/false (apply (lambda (jk10ef@id) (jkb77@id? jk10ef@id)) jk10ed@ls/false)) (apply (lambda (jk10f1@id) (let ((jk10f3@lab (jkb8d@id->label jk10f1@id))) (let ((jk10f5@b (jkb8f@label->binding jk10f3@lab jk10e6@r))) (let ((jk10f7@type (jkb93@binding-type jk10f5@b))) (begin (if (not jk10f3@lab) (jkb97@raise-unbound-error jk10f1@id) (void)) (if (not (and (eq? jk10f7@type '$rtd) (not (list? (jkb95@binding-value jk10f5@b))))) (jke5e@syntax-violation '#f '"not a record type" jk10e5@e) (void)) (list 'quote (jkb95@binding-value jk10f5@b))))))) jk10ed@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk10eb@t)))))) (set! jk2823@jkd1c@type-descriptor-transformer jkd1c@type-descriptor-transformer) (set! jkd1e@record-type-descriptor-transformer (lambda (jk10f9@e jk10fa@r jk10fb@mr) (let ((jk10ff@t jk10f9@e)) (let ((jk1101@ls/false (jkd7e@syntax-dispatch jk10ff@t '(_ any)))) (if (and jk1101@ls/false (apply (lambda (jk1103@id) (jkb77@id? jk1103@id)) jk1101@ls/false)) (apply (lambda (jk1105@id) (let ((jk1107@lab (jkb8d@id->label jk1105@id))) (let ((jk1109@b (jkb8f@label->binding jk1107@lab jk10fa@r))) (let ((jk110b@type (jkb93@binding-type jk1109@b))) (begin (if (not jk1107@lab) (jkb97@raise-unbound-error jk1105@id) (void)) (if (not (and (eq? jk110b@type '$rtd) (list? (jkb95@binding-value jk1109@b)))) (jke5e@syntax-violation '#f '"not a record type" jk10f9@e) (void)) (jkda0@chi-expr (car (jkb95@binding-value jk1109@b)) jk10fa@r jk10fb@mr)))))) jk1101@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk10ff@t)))))) (set! jk2824@jkd1e@record-type-descriptor-transformer jkd1e@record-type-descriptor-transformer) (set! jkd20@record-constructor-descriptor-transformer (lambda (jk110d@e jk110e@r jk110f@mr) (let ((jk1113@t jk110d@e)) (let ((jk1115@ls/false (jkd7e@syntax-dispatch jk1113@t '(_ any)))) (if (and jk1115@ls/false (apply (lambda (jk1117@id) (jkb77@id? jk1117@id)) jk1115@ls/false)) (apply (lambda (jk1119@id) (let ((jk111b@lab (jkb8d@id->label jk1119@id))) (let ((jk111d@b (jkb8f@label->binding jk111b@lab jk110e@r))) (let ((jk111f@type (jkb93@binding-type jk111d@b))) (begin (if (not jk111b@lab) (jkb97@raise-unbound-error jk1119@id) (void)) (if (not (and (eq? jk111f@type '$rtd) (list? (jkb95@binding-value jk111d@b)))) (jke5e@syntax-violation '#f '"invalid type" jk110d@e) (void)) (jkda0@chi-expr (cadr (jkb95@binding-value jk111d@b)) jk110e@r jk110f@mr)))))) jk1115@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1113@t)))))) (set! jk2825@jkd20@record-constructor-descriptor-transformer jkd20@record-constructor-descriptor-transformer) (set! jkd22@when-macro (lambda (jk1121@e) (let ((jk1123@t jk1121@e)) (let ((jk1125@ls/false (jkd7e@syntax-dispatch jk1123@t '(_ any any . each-any)))) (if jk1125@ls/false (apply (lambda (jk1127@test jk1128@e jk1129@e*) (jkd34@bless (list 'if jk1127@test (cons 'begin (cons jk1128@e jk1129@e*))))) jk1125@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1123@t)))))) (set! jk2826@jkd22@when-macro jkd22@when-macro) (set! jkd24@unless-macro (lambda (jk112d@e) (let ((jk112f@t jk112d@e)) (let ((jk1131@ls/false (jkd7e@syntax-dispatch jk112f@t '(_ any any . each-any)))) (if jk1131@ls/false (apply (lambda (jk1133@test jk1134@e jk1135@e*) (jkd34@bless (list 'if (list 'not jk1133@test) (cons 'begin (cons jk1134@e jk1135@e*))))) jk1131@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk112f@t)))))) (set! jk2827@jkd24@unless-macro jkd24@unless-macro) (set! jkd26@if-transformer (lambda (jk1139@e jk113a@r jk113b@mr) (let ((jk113f@t jk1139@e)) (let ((jk1141@ls/false (jkd7e@syntax-dispatch jk113f@t '(_ any any any)))) (if jk1141@ls/false (apply (lambda (jk1143@e0 jk1144@e1 jk1145@e2) (list 'if (jkda0@chi-expr jk1143@e0 jk113a@r jk113b@mr) (jkda0@chi-expr jk1144@e1 jk113a@r jk113b@mr) (jkda0@chi-expr jk1145@e2 jk113a@r jk113b@mr))) jk1141@ls/false) (let ((jk1149@t jk113f@t)) (let ((jk114b@ls/false (jkd7e@syntax-dispatch jk1149@t '(_ any any)))) (if jk114b@ls/false (apply (lambda (jk114d@e0 jk114e@e1) (list 'if (jkda0@chi-expr jk114d@e0 jk113a@r jk113b@mr) (jkda0@chi-expr jk114e@e1 jk113a@r jk113b@mr) (jkadd@jka38@build-void))) jk114b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1149@t))))))))) (set! jk2828@jkd26@if-transformer jkd26@if-transformer) (set! jkd28@and-transformer (lambda (jk1151@e jk1152@r jk1153@mr) (let ((jk1157@t jk1151@e)) (let ((jk1159@ls/false (jkd7e@syntax-dispatch jk1157@t '(_ . each-any)))) (if jk1159@ls/false (apply (lambda (jk115b@e*) (cons 'and (jkd9c@chi-expr* jk115b@e* jk1152@r jk1153@mr))) jk1159@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1157@t)))))) (set! jk2829@jkd28@and-transformer jkd28@and-transformer) (set! jkd2a@or-transformer (lambda (jk115d@e jk115e@r jk115f@mr) (let ((jk1163@t jk115d@e)) (let ((jk1165@ls/false (jkd7e@syntax-dispatch jk1163@t '(_ . each-any)))) (if jk1165@ls/false (apply (lambda (jk1167@e*) (cons 'or (jkd9c@chi-expr* jk1167@e* jk115e@r jk115f@mr))) jk1165@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1163@t)))))) (set! jk282a@jkd2a@or-transformer jkd2a@or-transformer) (set! jkd2c@case-macro (lambda (jk1169@e) (let ((jk116c@build-last '#f) (jk116e@build-one '#f)) (begin (set! jk116c@build-last (lambda (jk1193@cls) (let ((jk1195@t jk1193@cls)) (let ((jk1197@ls/false (jkd7e@syntax-dispatch jk1195@t '(#(scheme-id else) any . each-any)))) (if jk1197@ls/false (apply (lambda (jk1199@e jk119a@e*) (cons 'begin (cons jk1199@e jk119a@e*))) jk1197@ls/false) (let ((jk119d@t jk1195@t)) (let ((jk119f@ls/false (jkd7e@syntax-dispatch jk119d@t '_))) (if jk119f@ls/false (apply (lambda () (jk116e@build-one jk1193@cls '(if #f #f))) jk119f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk119d@t))))))))) (set! jk116e@build-one (lambda (jk1185@cls jk1186@k) (let ((jk1189@t jk1185@cls)) (let ((jk118b@ls/false (jkd7e@syntax-dispatch jk1189@t '(each-any any . each-any)))) (if jk118b@ls/false (apply (lambda (jk118d@d* jk118e@e jk118f@e*) (list 'if (list 'memv 't (list 'quote jk118d@d*)) (cons 'begin (cons jk118e@e jk118f@e*)) jk1186@k)) jk118b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1189@t)))))) (let ((jk116f@t jk1169@e)) (let ((jk1171@ls/false (jkd7e@syntax-dispatch jk116f@t '(_ any)))) (if jk1171@ls/false (apply (lambda (jk1173@expr) (jkd34@bless (cons 'let (cons (list (list 't jk1173@expr)) '((if #f #f)))))) jk1171@ls/false) (let ((jk1175@t jk116f@t)) (let ((jk1177@ls/false (jkd7e@syntax-dispatch jk1175@t '(_ any any . each-any)))) (if jk1177@ls/false (apply (lambda (jk1179@expr jk117a@cls jk117b@cls*) (jkd34@bless (list 'let (list (list 't jk1179@expr)) (let jk1183@f ((jk117f@cls jk117a@cls) (jk1180@cls* jk117b@cls*)) (if (null? jk1180@cls*) (jk116c@build-last jk117f@cls) (jk116e@build-one jk117f@cls (jk1183@f (car jk1180@cls*) (cdr jk1180@cls*)))))))) jk1177@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1175@t))))))))))) (set! jk282b@jkd2c@case-macro jkd2c@case-macro) (set! jkd2e@quote-transformer (lambda (jk11a1@e jk11a2@r jk11a3@mr) (let ((jk11a7@t jk11a1@e)) (let ((jk11a9@ls/false (jkd7e@syntax-dispatch jk11a7@t '(_ any)))) (if jk11a9@ls/false (apply (lambda (jk11ab@datum) (list 'quote (jkb8b@stx->datum jk11ab@datum))) jk11a9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk11a7@t)))))) (set! jk282c@jkd2e@quote-transformer jkd2e@quote-transformer) (set! jkd30@case-lambda-transformer (lambda (jk11ad@e jk11ae@r jk11af@mr) (let ((jk11b3@t jk11ad@e)) (let ((jk11b5@ls/false (jkd7e@syntax-dispatch jk11b3@t '(_ . #(each (any any . each-any)))))) (if jk11b5@ls/false (apply (lambda (jk11b7@fmls* jk11b8@b* jk11b9@b**) (call-with-values (lambda () (jkda8@chi-lambda-clause* jk11ad@e jk11b7@fmls* (map cons jk11b8@b* jk11b9@b**) jk11ae@r jk11af@mr)) (lambda (jk11c1@jk11be jk11c2@jk11c0) (let ((jk11c5@body* jk11c2@jk11c0) (jk11c6@fmls* jk11c1@jk11be)) (jkadb@jka08@build-case-lambda '#f jk11c6@fmls* jk11c5@body*))))) jk11b5@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk11b3@t)))))) (set! jk282d@jkd30@case-lambda-transformer jkd30@case-lambda-transformer) (set! jkd32@lambda-transformer (lambda (jk11c9@e jk11ca@r jk11cb@mr) (let ((jk11cf@t jk11c9@e)) (let ((jk11d1@ls/false (jkd7e@syntax-dispatch jk11cf@t '(_ any any . each-any)))) (if jk11d1@ls/false (apply (lambda (jk11d3@fmls jk11d4@b jk11d5@b*) (call-with-values (lambda () (jkda6@chi-lambda-clause jk11c9@e jk11d3@fmls (cons jk11d4@b jk11d5@b*) jk11ca@r jk11cb@mr)) (lambda (jk11dd@jk11da jk11de@jk11dc) (let ((jk11e1@body jk11de@jk11dc) (jk11e2@fmls jk11dd@jk11da)) (jkada@jka06@build-lambda '#f jk11e2@fmls jk11e1@body))))) jk11d1@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk11cf@t)))))) (set! jk282e@jkd32@lambda-transformer jkd32@lambda-transformer) (set! jkd34@bless (lambda (jk11e5@x) (jkb5f@mkstx (let jk11e9@f ((jk11e7@x jk11e5@x)) (if (jkb43@stx? jk11e7@x) jk11e7@x (if (pair? jk11e7@x) (cons (jk11e9@f (car jk11e7@x)) (jk11e9@f (cdr jk11e7@x))) (if (symbol? jk11e7@x) (jkd06@scheme-stx jk11e7@x) (if (vector? jk11e7@x) (vector-map jk11e9@f jk11e7@x) jk11e7@x))))) '() '() '()))) (set! jk282f@jkd34@bless jkd34@bless) (set! jkd36@with-syntax-macro (lambda (jk11eb@e) (let ((jk11ed@t jk11eb@e)) (let ((jk11ef@ls/false (jkd7e@syntax-dispatch jk11ed@t '(_ #(each (any any)) any . each-any)))) (if jk11ef@ls/false (apply (lambda (jk11f1@pat* jk11f2@expr* jk11f3@b jk11f4@b*) (let ((jk11f9@idn* (let jk11fd@f ((jk11fb@pat* jk11f1@pat*)) (if (null? jk11fb@pat*) '() (call-with-values (lambda () (jkd7c@convert-pattern (car jk11fb@pat*) '())) (lambda (jk1203@jk1200 jk1204@jk1202) (let ((jk1207@idn* jk1204@jk1202) (jk1208@pat jk1203@jk1200)) (append jk1207@idn* (jk11fd@f (cdr jk11fb@pat*)))))))))) (begin (jkda4@verify-formals (map car jk11f9@idn*) jk11eb@e) (let ((jk120b@t* (jke4c@generate-temporaries jk11f2@expr*))) (jkd34@bless (list 'let (map list jk120b@t* jk11f2@expr*) (let jk1211@f ((jk120d@pat* jk11f1@pat*) (jk120e@t* jk120b@t*)) (if (null? jk120d@pat*) (cons 'begin (cons '#f (cons jk11f3@b jk11f4@b*))) (list 'syntax-case (car jk120e@t*) '() (list (car jk120d@pat*) (jk1211@f (cdr jk120d@pat*) (cdr jk120e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car jk120d@pat*)) (car jk120e@t*)))))))))))) jk11ef@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk11ed@t)))))) (set! jk2830@jkd36@with-syntax-macro jkd36@with-syntax-macro) (set! jkd38@invalid-fmls-error (lambda (jk1213@stx jk1214@fmls) (let ((jk1217@t jk1214@fmls)) (let ((jk1219@ls/false (jkd7e@syntax-dispatch jk1217@t '#(each+ any () any)))) (if jk1219@ls/false (apply (lambda (jk121b@id* jk121c@last) (let jk1221@f ((jk121f@id* (if (jkb77@id? jk121c@last) (cons jk121c@last jk121b@id*) (if (jkb6d@syntax-null? jk121c@last) jk121b@id* (jke5e@syntax-violation '#f '"not an identifier" jk1213@stx jk121c@last))))) (if (null? jk121f@id*) (values) (if (not (jkb77@id? (car jk121f@id*))) (jke5e@syntax-violation '#f '"not an identifier" jk1213@stx (car jk121f@id*)) (begin (jk1221@f (cdr jk121f@id*)) (if (jkb83@bound-id-member? (car jk121f@id*) (cdr jk121f@id*)) (jke5e@syntax-violation '#f '"duplicate binding" jk1213@stx (car jk121f@id*)) (void))))))) jk1219@ls/false) (let ((jk1223@t jk1217@t)) (let ((jk1225@ls/false (jkd7e@syntax-dispatch jk1223@t '_))) (if jk1225@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"malformed binding form" jk1213@stx jk1214@fmls)) jk1225@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1223@t))))))))) (set! jk2831@jkd38@invalid-fmls-error jkd38@invalid-fmls-error) (set! jkd3a@let-macro (lambda (jk1227@stx) (let ((jk1229@t jk1227@stx)) (let ((jk122b@ls/false (jkd7e@syntax-dispatch jk1229@t '(_ #(each (any any)) any . each-any)))) (if jk122b@ls/false (apply (lambda (jk122d@lhs* jk122e@rhs* jk122f@b jk1230@b*) (if (jkb7f@valid-bound-ids? jk122d@lhs*) (jkd34@bless (cons (cons 'lambda (cons jk122d@lhs* (cons jk122f@b jk1230@b*))) jk122e@rhs*)) (jkd38@invalid-fmls-error jk1227@stx jk122d@lhs*))) jk122b@ls/false) (let ((jk1235@t jk1229@t)) (let ((jk1237@ls/false (jkd7e@syntax-dispatch jk1235@t '(_ any #(each (any any)) any . each-any)))) (if (and jk1237@ls/false (apply (lambda (jk1239@f jk123a@lhs* jk123b@rhs* jk123c@b jk123d@b*) (jkb77@id? jk1239@f)) jk1237@ls/false)) (apply (lambda (jk1243@f jk1244@lhs* jk1245@rhs* jk1246@b jk1247@b*) (if (jkb7f@valid-bound-ids? jk1244@lhs*) (jkd34@bless (cons (list 'letrec (list (list jk1243@f (cons 'lambda (cons jk1244@lhs* (cons jk1246@b jk1247@b*))))) jk1243@f) jk1245@rhs*)) (jkd38@invalid-fmls-error jk1227@stx jk1244@lhs*))) jk1237@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1235@t))))))))) (set! jk2832@jkd3a@let-macro jkd3a@let-macro) (set! jkd3c@let-values-macro (lambda (jk124d@stx) (let ((jk1250@rename '#f) (jk1252@rename* '#f)) (begin (set! jk1250@rename (lambda (jk12b5@x jk12b6@old* jk12b7@new*) (begin (if (not (jkb77@id? jk12b5@x)) (jke5e@syntax-violation '#f '"not an indentifier" jk124d@stx jk12b5@x) (void)) (if (jkb83@bound-id-member? jk12b5@x jk12b6@old*) (jke5e@syntax-violation '#f '"duplicate binding" jk124d@stx jk12b5@x) (void)) (let ((jk12bb@y (gensym (jke64@syntax->datum jk12b5@x)))) (values jk12bb@y (cons jk12b5@x jk12b6@old*) (cons jk12bb@y jk12b7@new*)))))) (set! jk1252@rename* (lambda (jk12a3@x* jk12a4@old* jk12a5@new*) (if (null? jk12a3@x*) (values '() jk12a4@old* jk12a5@new*) (call-with-values (lambda () (jk1250@rename (car jk12a3@x*) jk12a4@old* jk12a5@new*)) (lambda (jk12a9@x jk12aa@old* jk12ab@new*) (call-with-values (lambda () (jk1252@rename* (cdr jk12a3@x*) jk12aa@old* jk12ab@new*)) (lambda (jk12af@x* jk12b0@old* jk12b1@new*) (values (cons jk12a9@x jk12af@x*) jk12b0@old* jk12b1@new*)))))))) (let ((jk1253@t jk124d@stx)) (let ((jk1255@ls/false (jkd7e@syntax-dispatch jk1253@t '(_ () any . each-any)))) (if jk1255@ls/false (apply (lambda (jk1257@b jk1258@b*) (cons* (jkd34@bless 'let) '() jk1257@b jk1258@b*)) jk1255@ls/false) (let ((jk125b@t jk1253@t)) (let ((jk125d@ls/false (jkd7e@syntax-dispatch jk125b@t '(_ #(each (any any)) any . each-any)))) (if jk125d@ls/false (apply (lambda (jk125f@lhs* jk1260@rhs* jk1261@b jk1262@b*) (jkd34@bless (let jk126f@f ((jk1267@lhs* jk125f@lhs*) (jk1268@rhs* jk1260@rhs*) (jk1269@old* '()) (jk126a@new* '())) (if (null? jk1267@lhs*) (cons 'let (cons (map list jk1269@old* jk126a@new*) (cons jk1261@b jk1262@b*))) (let ((jk1271@t (car jk1267@lhs*))) (let ((jk1273@ls/false (jkd7e@syntax-dispatch jk1271@t 'each-any))) (if jk1273@ls/false (apply (lambda (jk1275@x*) (call-with-values (lambda () (jk1252@rename* jk1275@x* jk1269@old* jk126a@new*)) (lambda (jk127d@jk1278 jk127e@jk127a jk127f@jk127c) (let ((jk1283@new* jk127f@jk127c) (jk1284@old* jk127e@jk127a) (jk1285@y* jk127d@jk1278)) (list 'call-with-values (list 'lambda '() (car jk1268@rhs*)) (list 'lambda jk1285@y* (jk126f@f (cdr jk1267@lhs*) (cdr jk1268@rhs*) jk1284@old* jk1283@new*))))))) jk1273@ls/false) (let ((jk1289@t jk1271@t)) (let ((jk128b@ls/false (jkd7e@syntax-dispatch jk1289@t '#(each+ any () any)))) (if jk128b@ls/false (apply (lambda (jk128d@x* jk128e@x) (call-with-values (lambda () (jk1250@rename jk128e@x jk1269@old* jk126a@new*)) (lambda (jk1291@y jk1292@old* jk1293@new*) (call-with-values (lambda () (jk1252@rename* jk128d@x* jk1292@old* jk1293@new*)) (lambda (jk1297@y* jk1298@old* jk1299@new*) (list 'call-with-values (list 'lambda '() (car jk1268@rhs*)) (list 'lambda (append jk1297@y* jk1291@y) (jk126f@f (cdr jk1267@lhs*) (cdr jk1268@rhs*) jk1298@old* jk1299@new*)))))))) jk128b@ls/false) (let ((jk129d@t jk1289@t)) (let ((jk129f@ls/false (jkd7e@syntax-dispatch jk129d@t 'any))) (if jk129f@ls/false (apply (lambda (jk12a1@others) (jke5e@syntax-violation '#f '"malformed bindings" jk124d@stx jk12a1@others)) jk129f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk129d@t)))))))))))))) jk125d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk125b@t))))))))))) (set! jk2833@jkd3c@let-values-macro jkd3c@let-values-macro) (set! jkd3e@let*-values-macro (lambda (jk12bd@stx) (let ((jk12c0@check '#f)) (begin (set! jk12c0@check (lambda (jk12ef@x*) (if (not (null? jk12ef@x*)) (let ((jk12f1@x (car jk12ef@x*))) (begin (if (not (jkb77@id? jk12f1@x)) (jke5e@syntax-violation '#f '"not an identifier" jk12bd@stx jk12f1@x) (void)) (jk12c0@check (cdr jk12ef@x*)) (if (jkb83@bound-id-member? jk12f1@x (cdr jk12ef@x*)) (jke5e@syntax-violation '#f '"duplicate identifier" jk12bd@stx jk12f1@x) (void)))) (void)))) (let ((jk12c1@t jk12bd@stx)) (let ((jk12c3@ls/false (jkd7e@syntax-dispatch jk12c1@t '(_ () any . each-any)))) (if jk12c3@ls/false (apply (lambda (jk12c5@b jk12c6@b*) (cons* (jkd34@bless 'let) '() jk12c5@b jk12c6@b*)) jk12c3@ls/false) (let ((jk12c9@t jk12c1@t)) (let ((jk12cb@ls/false (jkd7e@syntax-dispatch jk12c9@t '(_ #(each (any any)) any . each-any)))) (if jk12cb@ls/false (apply (lambda (jk12cd@lhs* jk12ce@rhs* jk12cf@b jk12d0@b*) (jkd34@bless (let jk12d9@f ((jk12d5@lhs* jk12cd@lhs*) (jk12d6@rhs* jk12ce@rhs*)) (if (null? jk12d5@lhs*) (cons 'begin (cons jk12cf@b jk12d0@b*)) (let ((jk12db@t (car jk12d5@lhs*))) (let ((jk12dd@ls/false (jkd7e@syntax-dispatch jk12db@t 'each-any))) (if jk12dd@ls/false (apply (lambda (jk12df@x*) (begin (jk12c0@check jk12df@x*) (list 'call-with-values (list 'lambda '() (car jk12d6@rhs*)) (list 'lambda jk12df@x* (jk12d9@f (cdr jk12d5@lhs*) (cdr jk12d6@rhs*)))))) jk12dd@ls/false) (let ((jk12e1@t jk12db@t)) (let ((jk12e3@ls/false (jkd7e@syntax-dispatch jk12e1@t '#(each+ any () any)))) (if jk12e3@ls/false (apply (lambda (jk12e5@x* jk12e6@x) (begin (jk12c0@check (cons jk12e6@x jk12e5@x*)) (list 'call-with-values (list 'lambda '() (car jk12d6@rhs*)) (list 'lambda (append jk12e5@x* jk12e6@x) (jk12d9@f (cdr jk12d5@lhs*) (cdr jk12d6@rhs*)))))) jk12e3@ls/false) (let ((jk12e9@t jk12e1@t)) (let ((jk12eb@ls/false (jkd7e@syntax-dispatch jk12e9@t 'any))) (if jk12eb@ls/false (apply (lambda (jk12ed@others) (jke5e@syntax-violation '#f '"malformed bindings" jk12bd@stx jk12ed@others)) jk12eb@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk12e9@t)))))))))))))) jk12cb@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk12c9@t))))))))))) (set! jk2834@jkd3e@let*-values-macro jkd3e@let*-values-macro) (set! jkd40@trace-lambda-macro (lambda (jk12f3@stx) (let ((jk12f5@t jk12f3@stx)) (let ((jk12f7@ls/false (jkd7e@syntax-dispatch jk12f5@t '(_ any each-any any . each-any)))) (if jk12f7@ls/false (apply (lambda (jk12f9@who jk12fa@fmls jk12fb@b jk12fc@b*) (if (jkb7f@valid-bound-ids? jk12fa@fmls) (jkd34@bless (list 'make-traced-procedure (list 'quote jk12f9@who) (cons 'lambda (cons jk12fa@fmls (cons jk12fb@b jk12fc@b*))))) (jkd38@invalid-fmls-error jk12f3@stx jk12fa@fmls))) jk12f7@ls/false) (let ((jk1301@t jk12f5@t)) (let ((jk1303@ls/false (jkd7e@syntax-dispatch jk1301@t '(_ any #(each+ any () any) any . each-any)))) (if jk1303@ls/false (apply (lambda (jk1305@who jk1306@fmls jk1307@last jk1308@b jk1309@b*) (if (jkb7f@valid-bound-ids? (cons jk1307@last jk1306@fmls)) (jkd34@bless (list 'make-traced-procedure (list 'quote jk1305@who) (cons 'lambda (cons (append jk1306@fmls jk1307@last) (cons jk1308@b jk1309@b*))))) (jkd38@invalid-fmls-error jk12f3@stx (append jk1306@fmls jk1307@last)))) jk1303@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1301@t))))))))) (set! jk2835@jkd40@trace-lambda-macro jkd40@trace-lambda-macro) (set! jkd42@trace-define-macro (lambda (jk130f@stx) (let ((jk1311@t jk130f@stx)) (let ((jk1313@ls/false (jkd7e@syntax-dispatch jk1311@t '(_ (any . each-any) any . each-any)))) (if jk1313@ls/false (apply (lambda (jk1315@who jk1316@fmls jk1317@b jk1318@b*) (if (jkb7f@valid-bound-ids? jk1316@fmls) (jkd34@bless (list 'define jk1315@who (list 'make-traced-procedure (list 'quote jk1315@who) (cons 'lambda (cons jk1316@fmls (cons jk1317@b jk1318@b*)))))) (jkd38@invalid-fmls-error jk130f@stx jk1316@fmls))) jk1313@ls/false) (let ((jk131d@t jk1311@t)) (let ((jk131f@ls/false (jkd7e@syntax-dispatch jk131d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if jk131f@ls/false (apply (lambda (jk1321@who jk1322@fmls jk1323@last jk1324@b jk1325@b*) (if (jkb7f@valid-bound-ids? (cons jk1323@last jk1322@fmls)) (jkd34@bless (list 'define jk1321@who (list 'make-traced-procedure (list 'quote jk1321@who) (cons 'lambda (cons (append jk1322@fmls jk1323@last) (cons jk1324@b jk1325@b*)))))) (jkd38@invalid-fmls-error jk130f@stx (append jk1322@fmls jk1323@last)))) jk131f@ls/false) (let ((jk132b@t jk131d@t)) (let ((jk132d@ls/false (jkd7e@syntax-dispatch jk132b@t '(_ any any)))) (if jk132d@ls/false (apply (lambda (jk132f@who jk1330@expr) (if (jkb77@id? jk132f@who) (jkd34@bless (list 'define jk132f@who (list 'let (list (list 'v jk1330@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote jk132f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (jke5e@syntax-violation '#f '"invalid name" jk130f@stx))) jk132d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk132b@t)))))))))))) (set! jk2836@jkd42@trace-define-macro jkd42@trace-define-macro) (set! jkd44@trace-define-syntax-macro (lambda (jk1333@stx) (let ((jk1335@t jk1333@stx)) (let ((jk1337@ls/false (jkd7e@syntax-dispatch jk1335@t '(_ any any)))) (if jk1337@ls/false (apply (lambda (jk1339@who jk133a@expr) (if (jkb77@id? jk1339@who) (jkd34@bless (list 'define-syntax jk1339@who (list 'make-traced-macro (list 'quote jk1339@who) jk133a@expr))) (jke5e@syntax-violation '#f '"invalid name" jk1333@stx))) jk1337@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1335@t)))))) (set! jk2837@jkd44@trace-define-syntax-macro jkd44@trace-define-syntax-macro) (set! jkd46@trace-let/rec-syntax (lambda (jk133d@who) (lambda (jk133f@stx) (let ((jk1341@t jk133f@stx)) (let ((jk1343@ls/false (jkd7e@syntax-dispatch jk1341@t '(_ #(each (any any)) any . each-any)))) (if jk1343@ls/false (apply (lambda (jk1345@lhs* jk1346@rhs* jk1347@b jk1348@b*) (if (jkb7f@valid-bound-ids? jk1345@lhs*) (let ((jk134d@rhs* (map (lambda (jk134f@lhs jk1350@rhs) (list 'make-traced-macro (list 'quote jk134f@lhs) jk1350@rhs)) jk1345@lhs* jk1346@rhs*))) (jkd34@bless (cons jk133d@who (cons (map list jk1345@lhs* jk134d@rhs*) (cons jk1347@b jk1348@b*))))) (jkd38@invalid-fmls-error jk133f@stx jk1345@lhs*))) jk1343@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1341@t))))))) (set! jk2838@jkd46@trace-let/rec-syntax jkd46@trace-let/rec-syntax) (set! jkd48@trace-let-syntax-macro (jkd46@trace-let/rec-syntax 'let-syntax)) (set! jk2839@jkd48@trace-let-syntax-macro jkd48@trace-let-syntax-macro) (set! jkd4a@trace-letrec-syntax-macro (jkd46@trace-let/rec-syntax 'letrec-syntax)) (set! jk283a@jkd4a@trace-letrec-syntax-macro jkd4a@trace-letrec-syntax-macro) (set! jkd4c@guard-macro (lambda (jk1353@x) (let ((jk1356@gen-clauses '#f)) (begin (set! jk1356@gen-clauses (lambda (jk136d@con jk136e@outerk jk136f@clause*) (let ((jk1374@f '#f) (jk1376@f* '#f)) (begin (set! jk1374@f (lambda (jk13ad@x jk13ae@k) (let ((jk13b1@t jk13ad@x)) (let ((jk13b3@ls/false (jkd7e@syntax-dispatch jk13b1@t '(any #(scheme-id =>) any)))) (if jk13b3@ls/false (apply (lambda (jk13b5@e jk13b6@p) (let ((jk13b9@t (gensym))) (list 'let (list (list jk13b9@t jk13b5@e)) (list 'if jk13b9@t (list jk13b6@p jk13b9@t) jk13ae@k)))) jk13b3@ls/false) (let ((jk13bb@t jk13b1@t)) (let ((jk13bd@ls/false (jkd7e@syntax-dispatch jk13bb@t '(any)))) (if jk13bd@ls/false (apply (lambda (jk13bf@e) (let ((jk13c1@t (gensym))) (list 'let (list (list jk13c1@t jk13bf@e)) (list 'if jk13c1@t jk13c1@t jk13ae@k)))) jk13bd@ls/false) (let ((jk13c3@t jk13bb@t)) (let ((jk13c5@ls/false (jkd7e@syntax-dispatch jk13c3@t '(any any . each-any)))) (if jk13c5@ls/false (apply (lambda (jk13c7@e jk13c8@v jk13c9@v*) (list 'if jk13c7@e (cons 'begin (cons jk13c8@v jk13c9@v*)) jk13ae@k)) jk13c5@ls/false) (let ((jk13cd@t jk13c3@t)) (let ((jk13cf@ls/false (jkd7e@syntax-dispatch jk13cd@t '_))) (if jk13cf@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid guard clause" jk13ad@x)) jk13cf@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk13cd@t))))))))))))))) (set! jk1376@f* (lambda (jk1383@x*) (let ((jk1385@t jk1383@x*)) (let ((jk1387@ls/false (jkd7e@syntax-dispatch jk1385@t '()))) (if jk1387@ls/false (apply (lambda () (let ((jk1389@g (gensym))) (values (list jk1389@g (list 'lambda '() (list 'raise-continuable jk136d@con))) jk1389@g))) jk1387@ls/false) (let ((jk138b@t jk1385@t)) (let ((jk138d@ls/false (jkd7e@syntax-dispatch jk138b@t '((#(scheme-id else) any . each-any))))) (if jk138d@ls/false (apply (lambda (jk138f@e jk1390@e*) (values (cons 'begin (cons jk138f@e jk1390@e*)) '#f)) jk138d@ls/false) (let ((jk1393@t jk138b@t)) (let ((jk1395@ls/false (jkd7e@syntax-dispatch jk1393@t '(any . any)))) (if jk1395@ls/false (apply (lambda (jk1397@cls jk1398@cls*) (call-with-values (lambda () (jk1376@f* jk1398@cls*)) (lambda (jk139f@jk139c jk13a0@jk139e) (let ((jk13a3@g jk13a0@jk139e) (jk13a4@e jk139f@jk139c)) (values (jk1374@f jk1397@cls jk13a4@e) jk13a3@g))))) jk1395@ls/false) (let ((jk13a7@t jk1393@t)) (let ((jk13a9@ls/false (jkd7e@syntax-dispatch jk13a7@t 'any))) (if jk13a9@ls/false (apply (lambda (jk13ab@others) (jke5e@syntax-violation '#f '"invalid guard clause" jk13ab@others)) jk13a9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk13a7@t))))))))))))))) (call-with-values (lambda () (jk1376@f* jk136f@clause*)) (lambda (jk137b@jk1378 jk137c@jk137a) (let ((jk137f@raisek jk137c@jk137a) (jk1380@code jk137b@jk1378)) (if jk137f@raisek (list (list 'call/cc (list 'lambda (list jk137f@raisek) (list jk136e@outerk (list 'lambda '() jk1380@code))))) (list jk136e@outerk (list 'lambda '() jk1380@code)))))))))) (let ((jk1357@t jk1353@x)) (let ((jk1359@ls/false (jkd7e@syntax-dispatch jk1357@t '(_ (any . each-any) any . each-any)))) (if (and jk1359@ls/false (apply (lambda (jk135b@con jk135c@clause* jk135d@b jk135e@b*) (jkb77@id? jk135b@con)) jk1359@ls/false)) (apply (lambda (jk1363@con jk1364@clause* jk1365@b jk1366@b*) (let ((jk136b@outerk (gensym))) (jkd34@bless (list (list 'call/cc (list 'lambda (list jk136b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list jk1363@con) (jk1356@gen-clauses jk1363@con jk136b@outerk jk1364@clause*)) (cons 'lambda (cons '() (cons jk1365@b jk1366@b*))))))))))) jk1359@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1357@t)))))))) (set! jk283b@jkd4c@guard-macro jkd4c@guard-macro) (set! jkd4e@define-enumeration-macro (lambda (jk13d1@stx) (let ((jk13d4@set? '#f) (jk13d6@remove-dups '#f)) (begin (set! jk13d4@set? (lambda (jk13ed@x) (or (null? jk13ed@x) (and (not (memq (car jk13ed@x) (cdr jk13ed@x))) (jk13d4@set? (cdr jk13ed@x)))))) (set! jk13d6@remove-dups (lambda (jk13eb@ls) (if (null? jk13eb@ls) '() (cons (car jk13eb@ls) (jk13d6@remove-dups (remq (car jk13eb@ls) (cdr jk13eb@ls))))))) (let ((jk13d7@t jk13d1@stx)) (let ((jk13d9@ls/false (jkd7e@syntax-dispatch jk13d7@t '(_ any each-any any)))) (if (and jk13d9@ls/false (apply (lambda (jk13db@name jk13dc@id* jk13dd@maker) (and (jkb77@id? jk13db@name) (jkb77@id? jk13dd@maker) (for-all jkb77@id? jk13dc@id*))) jk13d9@ls/false)) (apply (lambda (jk13e1@name jk13e2@id* jk13e3@maker) (let ((jk13e7@name* (jk13d6@remove-dups (jke64@syntax->datum jk13e2@id*))) (jk13e8@mk (gensym))) (jkd34@bless (list 'begin (list 'define jk13e8@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote jk13e7@name*)))) (list 'define-syntax jk13e1@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote jk13e7@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote jk13e1@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax jk13e3@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote jk13e3@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote jk13e7@name*)) (cons 'syntax-violation (cons (list 'quote jk13e3@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons jk13e8@mk '('(n* ...))))))))))))) jk13d9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk13d7@t)))))))) (set! jk283c@jkd4e@define-enumeration-macro jkd4e@define-enumeration-macro) (set! jkd50@time-macro (lambda (jk13ef@stx) (let ((jk13f1@t jk13ef@stx)) (let ((jk13f3@ls/false (jkd7e@syntax-dispatch jk13f1@t '(_ any)))) (if jk13f3@ls/false (apply (lambda (jk13f5@expr) (jkd34@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() jk13f5@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) jk13f3@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk13f1@t)))))) (set! jk283d@jkd50@time-macro jkd50@time-macro) (set! jkd52@delay-macro (lambda (jk13f7@stx) (let ((jk13f9@t jk13f7@stx)) (let ((jk13fb@ls/false (jkd7e@syntax-dispatch jk13f9@t '(_ any)))) (if jk13fb@ls/false (apply (lambda (jk13fd@expr) (jkd34@bless (list 'make-promise (list 'lambda '() jk13fd@expr)))) jk13fb@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk13f9@t)))))) (set! jk283e@jkd52@delay-macro jkd52@delay-macro) (set! jkd54@assert-macro (lambda (jk13ff@stx) (let ((jk1401@t jk13ff@stx)) (let ((jk1403@ls/false (jkd7e@syntax-dispatch jk1401@t '(_ any)))) (if jk1403@ls/false (apply (lambda (jk1405@expr) (let ((jk1407@pos (or (jke56@expression-position jk13ff@stx) (jke56@expression-position jk1405@expr)))) (jkd34@bless (list 'unless jk1405@expr (list 'assertion-error (list 'quote jk1405@expr) (list 'quote jk1407@pos)))))) jk1403@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1401@t)))))) (set! jk283f@jkd54@assert-macro jkd54@assert-macro) (set! jkd56@endianness-macro (lambda (jk1409@stx) (let ((jk140b@t jk1409@stx)) (let ((jk140d@ls/false (jkd7e@syntax-dispatch jk140b@t '(_ any)))) (if jk140d@ls/false (apply (lambda (jk140f@e) (let ((jk1411@t (jke64@syntax->datum jk140f@e))) (if (memv jk1411@t '(little)) (jkd34@bless ''little) (if (memv jk1411@t '(big)) (jkd34@bless ''big) (jke5e@syntax-violation '#f '"endianness must be big or little" jk1409@stx))))) jk140d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk140b@t)))))) (set! jk2840@jkd56@endianness-macro jkd56@endianness-macro) (set! jkd58@identifier-syntax-macro (lambda (jk1413@stx) (let ((jk1415@t jk1413@stx)) (let ((jk1417@ls/false (jkd7e@syntax-dispatch jk1415@t '(_ any)))) (if jk1417@ls/false (apply (lambda (jk1419@expr) (jkd34@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax jk1419@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax jk1419@expr) '((syntax (e* ...)))))))))) jk1417@ls/false) (let ((jk141b@t jk1415@t)) (let ((jk141d@ls/false (jkd7e@syntax-dispatch jk141b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and jk141d@ls/false (apply (lambda (jk141f@id1 jk1420@expr1 jk1421@id2 jk1422@expr2 jk1423@expr3) (and (jkb77@id? jk141f@id1) (jkb77@id? jk1421@id2) (jkb77@id? jk1422@expr2))) jk141d@ls/false)) (apply (lambda (jk1429@id1 jk142a@expr1 jk142b@id2 jk142c@expr2 jk142d@expr3) (jkd34@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax jk142a@expr1)) (list (list 'set! 'id jk142c@expr2) (list 'syntax jk142d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons jk142a@expr1 '(e* ...))))))))) jk141d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk141b@t))))))))) (set! jk2841@jkd58@identifier-syntax-macro jkd58@identifier-syntax-macro) (set! jkd5a@do-macro (lambda (jk1433@stx) (let ((jk1436@bind '#f)) (begin (set! jk1436@bind (lambda (jk144d@x) (let ((jk144f@t jk144d@x)) (let ((jk1451@ls/false (jkd7e@syntax-dispatch jk144f@t '(any any)))) (if jk1451@ls/false (apply (lambda (jk1453@x jk1454@init) (list jk1453@x jk1454@init jk1453@x)) jk1451@ls/false) (let ((jk1457@t jk144f@t)) (let ((jk1459@ls/false (jkd7e@syntax-dispatch jk1457@t '(any any any)))) (if jk1459@ls/false (apply (lambda (jk145b@x jk145c@init jk145d@step) (list jk145b@x jk145c@init jk145d@step)) jk1459@ls/false) (let ((jk1461@t jk1457@t)) (let ((jk1463@ls/false (jkd7e@syntax-dispatch jk1461@t '_))) (if jk1463@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid binding" jk1433@stx)) jk1463@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1461@t)))))))))))) (let ((jk1437@t jk1433@stx)) (let ((jk1439@ls/false (jkd7e@syntax-dispatch jk1437@t '(_ each-any (any . each-any) . each-any)))) (if jk1439@ls/false (apply (lambda (jk143b@binding* jk143c@test jk143d@expr* jk143e@command*) (let ((jk1443@t (map jk1436@bind jk143b@binding*))) (let ((jk1445@ls/false (jkd7e@syntax-dispatch jk1443@t '#(each (any any any))))) (if jk1445@ls/false (apply (lambda (jk1447@x* jk1448@init* jk1449@step*) (if (jkb7f@valid-bound-ids? jk1447@x*) (jkd34@bless (list 'letrec (list (list 'loop (list 'lambda jk1447@x* (list 'if jk143c@test (cons 'begin (cons '(if #f #f) jk143d@expr*)) (cons 'begin (append jk143e@command* (list (cons 'loop jk1449@step*)))))))) (cons 'loop jk1448@init*))) (jke5e@syntax-violation '#f '"invalid bindings" jk1433@stx))) jk1445@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1443@t))))) jk1439@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1437@t)))))))) (set! jk2842@jkd5a@do-macro jkd5a@do-macro) (set! jkd5c@let*-macro (lambda (jk1465@stx) (let ((jk1467@t jk1465@stx)) (let ((jk1469@ls/false (jkd7e@syntax-dispatch jk1467@t '(_ #(each (any any)) any . each-any)))) (if (and jk1469@ls/false (apply (lambda (jk146b@lhs* jk146c@rhs* jk146d@b jk146e@b*) (for-all jkb77@id? jk146b@lhs*)) jk1469@ls/false)) (apply (lambda (jk1473@lhs* jk1474@rhs* jk1475@b jk1476@b*) (jkd34@bless (let jk147d@f ((jk147b@x* (map list jk1473@lhs* jk1474@rhs*))) (if (null? jk147b@x*) (cons 'let (cons '() (cons jk1475@b jk1476@b*))) (list 'let (list (car jk147b@x*)) (jk147d@f (cdr jk147b@x*))))))) jk1469@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1467@t)))))) (set! jk2843@jkd5c@let*-macro jkd5c@let*-macro) (set! jkd5e@or-macro (lambda (jk147f@stx) (let ((jk1481@t jk147f@stx)) (let ((jk1483@ls/false (jkd7e@syntax-dispatch jk1481@t '(_)))) (if jk1483@ls/false (apply (lambda () '#f) jk1483@ls/false) (let ((jk1485@t jk1481@t)) (let ((jk1487@ls/false (jkd7e@syntax-dispatch jk1485@t '(_ any . each-any)))) (if jk1487@ls/false (apply (lambda (jk1489@e jk148a@e*) (jkd34@bless (let jk1491@f ((jk148d@e jk1489@e) (jk148e@e* jk148a@e*)) (if (null? jk148e@e*) (list 'begin '#f jk148d@e) (list 'let (list (list 't jk148d@e)) (list 'if 't 't (jk1491@f (car jk148e@e*) (cdr jk148e@e*)))))))) jk1487@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1485@t))))))))) (set! jk2844@jkd5e@or-macro jkd5e@or-macro) (set! jkd60@and-macro (lambda (jk1493@stx) (let ((jk1495@t jk1493@stx)) (let ((jk1497@ls/false (jkd7e@syntax-dispatch jk1495@t '(_)))) (if jk1497@ls/false (apply (lambda () '#t) jk1497@ls/false) (let ((jk1499@t jk1495@t)) (let ((jk149b@ls/false (jkd7e@syntax-dispatch jk1499@t '(_ any . each-any)))) (if jk149b@ls/false (apply (lambda (jk149d@e jk149e@e*) (jkd34@bless (let jk14a5@f ((jk14a1@e jk149d@e) (jk14a2@e* jk149e@e*)) (if (null? jk14a2@e*) (list 'begin '#f jk14a1@e) (cons 'if (cons jk14a1@e (cons (jk14a5@f (car jk14a2@e*) (cdr jk14a2@e*)) '(#f)))))))) jk149b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1499@t))))))))) (set! jk2845@jkd60@and-macro jkd60@and-macro) (set! jkd62@cond-macro (lambda (jk14a7@stx) (let ((jk14a9@t jk14a7@stx)) (let ((jk14ab@ls/false (jkd7e@syntax-dispatch jk14a9@t '(_ any . each-any)))) (if jk14ab@ls/false (apply (lambda (jk14ad@cls jk14ae@cls*) (jkd34@bless (let jk14b5@f ((jk14b1@cls jk14ad@cls) (jk14b2@cls* jk14ae@cls*)) (if (null? jk14b2@cls*) (let ((jk14b7@t jk14b1@cls)) (let ((jk14b9@ls/false (jkd7e@syntax-dispatch jk14b7@t '(#(scheme-id else) any . each-any)))) (if jk14b9@ls/false (apply (lambda (jk14bb@e jk14bc@e*) (cons 'begin (cons jk14bb@e jk14bc@e*))) jk14b9@ls/false) (let ((jk14bf@t jk14b7@t)) (let ((jk14c1@ls/false (jkd7e@syntax-dispatch jk14bf@t '(any #(scheme-id =>) any)))) (if jk14c1@ls/false (apply (lambda (jk14c3@e jk14c4@p) (list 'let (list (list 't jk14c3@e)) (list 'if 't (cons jk14c4@p '(t))))) jk14c1@ls/false) (let ((jk14c7@t jk14bf@t)) (let ((jk14c9@ls/false (jkd7e@syntax-dispatch jk14c7@t '(any)))) (if jk14c9@ls/false (apply (lambda (jk14cb@e) (cons 'or (cons jk14cb@e '((if #f #f))))) jk14c9@ls/false) (let ((jk14cd@t jk14c7@t)) (let ((jk14cf@ls/false (jkd7e@syntax-dispatch jk14cd@t '(any . each-any)))) (if jk14cf@ls/false (apply (lambda (jk14d1@e jk14d2@e*) (list 'if jk14d1@e (cons 'begin jk14d2@e*))) jk14cf@ls/false) (let ((jk14d5@t jk14cd@t)) (let ((jk14d7@ls/false (jkd7e@syntax-dispatch jk14d5@t '_))) (if jk14d7@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid last clause" jk14a7@stx)) jk14d7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk14d5@t)))))))))))))))) (let ((jk14d9@t jk14b1@cls)) (let ((jk14db@ls/false (jkd7e@syntax-dispatch jk14d9@t '(#(scheme-id else) any . each-any)))) (if jk14db@ls/false (apply (lambda (jk14dd@e jk14de@e*) (jke5e@syntax-violation '#f '"incorrect position of keyword else" jk14a7@stx)) jk14db@ls/false) (let ((jk14e1@t jk14d9@t)) (let ((jk14e3@ls/false (jkd7e@syntax-dispatch jk14e1@t '(any #(scheme-id =>) any)))) (if jk14e3@ls/false (apply (lambda (jk14e5@e jk14e6@p) (list 'let (list (list 't jk14e5@e)) (list 'if 't (cons jk14e6@p '(t)) (jk14b5@f (car jk14b2@cls*) (cdr jk14b2@cls*))))) jk14e3@ls/false) (let ((jk14e9@t jk14e1@t)) (let ((jk14eb@ls/false (jkd7e@syntax-dispatch jk14e9@t '(any)))) (if jk14eb@ls/false (apply (lambda (jk14ed@e) (list 'or jk14ed@e (jk14b5@f (car jk14b2@cls*) (cdr jk14b2@cls*)))) jk14eb@ls/false) (let ((jk14ef@t jk14e9@t)) (let ((jk14f1@ls/false (jkd7e@syntax-dispatch jk14ef@t '(any . each-any)))) (if jk14f1@ls/false (apply (lambda (jk14f3@e jk14f4@e*) (list 'if jk14f3@e (cons 'begin jk14f4@e*) (jk14b5@f (car jk14b2@cls*) (cdr jk14b2@cls*)))) jk14f1@ls/false) (let ((jk14f7@t jk14ef@t)) (let ((jk14f9@ls/false (jkd7e@syntax-dispatch jk14f7@t '_))) (if jk14f9@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid last clause" jk14a7@stx)) jk14f9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk14f7@t)))))))))))))))))))) jk14ab@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk14a9@t)))))) (set! jk2846@jkd62@cond-macro jkd62@cond-macro) (set! jkd64@do-include (lambda (jk14fb@stx jk14fc@id jk14fd@filename) (let ((jk1501@filename (jkb8b@stx->datum jk14fd@filename))) (begin (if (not (and (string? jk1501@filename) (jkb77@id? jk14fc@id))) (jke5e@syntax-violation '#f '"invalid syntax" jk14fb@stx) (void)) (cons (jkd34@bless 'begin) (with-input-from-file jk1501@filename (lambda () (let jk1505@f ((jk1503@ls '())) (let ((jk1507@x (jk6b4@jk586@read-annotated))) (if (eof-object? jk1507@x) (reverse jk1503@ls) (jk1505@f (cons (jkb57@datum->stx jk14fc@id jk1507@x) jk1503@ls)))))))))))) (set! jk2847@jkd64@do-include jkd64@do-include) (set! jkd66@include-macro (lambda (jk1509@e) (let ((jk150b@t jk1509@e)) (let ((jk150d@ls/false (jkd7e@syntax-dispatch jk150b@t '(any any)))) (if jk150d@ls/false (apply (lambda (jk150f@id jk1510@filename) (jkd64@do-include jk1509@e jk150f@id jk1510@filename)) jk150d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk150b@t)))))) (set! jk2848@jkd66@include-macro jkd66@include-macro) (set! jkd68@include-into-macro (lambda (jk1513@e) (let ((jk1515@t jk1513@e)) (let ((jk1517@ls/false (jkd7e@syntax-dispatch jk1515@t '(_ any any)))) (if jk1517@ls/false (apply (lambda (jk1519@id jk151a@filename) (jkd64@do-include jk1513@e jk1519@id jk151a@filename)) jk1517@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1515@t)))))) (set! jk2849@jkd68@include-into-macro jkd68@include-into-macro) (set! jkd6a@syntax-rules-macro (lambda (jk151d@e) (let ((jk151f@t jk151d@e)) (let ((jk1521@ls/false (jkd7e@syntax-dispatch jk151f@t '(_ each-any . #(each (any any)))))) (if jk1521@ls/false (apply (lambda (jk1523@lits jk1524@pat* jk1525@tmp*) (begin (jkd84@verify-literals jk1523@lits jk151d@e) (jkd34@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons jk1523@lits (map (lambda (jk1529@pat jk152a@tmp) (let ((jk152d@t jk1529@pat)) (let ((jk152f@ls/false (jkd7e@syntax-dispatch jk152d@t '(_ . any)))) (if jk152f@ls/false (apply (lambda (jk1531@rest) (list (cons 'g jk1531@rest) (list 'syntax jk152a@tmp))) jk152f@ls/false) (let ((jk1533@t jk152d@t)) (let ((jk1535@ls/false (jkd7e@syntax-dispatch jk1533@t '_))) (if jk1535@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid syntax-rules pattern" jk151d@e jk1529@pat)) jk1535@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1533@t)))))))) jk1524@pat* jk1525@tmp*)))))))) jk1521@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk151f@t)))))) (set! jk284a@jkd6a@syntax-rules-macro jkd6a@syntax-rules-macro) (set! jkd6c@quasiquote-macro (let ((jk1538@datum '#f) (jk1554@quasicons* '#f) (jk1556@quasicons '#f) (jk1558@quasiappend '#f) (jk155a@quasivector '#f) (jk155c@vquasi '#f) (jk155e@quasi '#f)) (begin (set! jk1538@datum (lambda (jk1639@x) (list (jkd06@scheme-stx 'quote) (jkb5f@mkstx jk1639@x '() '() '())))) (set! jk1554@quasicons* (lambda (jk1631@x jk1632@y) (let jk1637@f ((jk1635@x jk1631@x)) (if (null? jk1635@x) jk1632@y (jk1556@quasicons (car jk1635@x) (jk1637@f (cdr jk1635@x))))))) (set! jk1556@quasicons (lambda (jk160b@x jk160c@y) (let ((jk160f@t jk160c@y)) (let ((jk1611@ls/false (jkd7e@syntax-dispatch jk160f@t '(#(scheme-id quote) any)))) (if jk1611@ls/false (apply (lambda (jk1613@dy) (let ((jk1615@t jk160b@x)) (let ((jk1617@ls/false (jkd7e@syntax-dispatch jk1615@t '(#(scheme-id quote) any)))) (if jk1617@ls/false (apply (lambda (jk1619@dx) (list (jkd06@scheme-stx 'quote) (cons jk1619@dx jk1613@dy))) jk1617@ls/false) (let ((jk161b@t jk1615@t)) (let ((jk161d@ls/false (jkd7e@syntax-dispatch jk161b@t '_))) (if jk161d@ls/false (apply (lambda () (let ((jk161f@t jk1613@dy)) (let ((jk1621@ls/false (jkd7e@syntax-dispatch jk161f@t '()))) (if jk1621@ls/false (apply (lambda () (list (jkd06@scheme-stx 'list) jk160b@x)) jk1621@ls/false) (let ((jk1623@t jk161f@t)) (let ((jk1625@ls/false (jkd7e@syntax-dispatch jk1623@t '_))) (if jk1625@ls/false (apply (lambda () (list (jkd06@scheme-stx 'cons) jk160b@x jk160c@y)) jk1625@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1623@t)))))))) jk161d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk161b@t)))))))) jk1611@ls/false) (let ((jk1627@t jk160f@t)) (let ((jk1629@ls/false (jkd7e@syntax-dispatch jk1627@t '(#(scheme-id list) . each-any)))) (if jk1629@ls/false (apply (lambda (jk162b@stuff) (cons* (jkd06@scheme-stx 'list) jk160b@x jk162b@stuff)) jk1629@ls/false) (let ((jk162d@t jk1627@t)) (let ((jk162f@ls/false (jkd7e@syntax-dispatch jk162d@t '_))) (if jk162f@ls/false (apply (lambda () (list (jkd06@scheme-stx 'cons) jk160b@x jk160c@y)) jk162f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk162d@t)))))))))))) (set! jk1558@quasiappend (lambda (jk15f1@x jk15f2@y) (let ((jk15f5@ls (let jk15f9@f ((jk15f7@x jk15f1@x)) (if (null? jk15f7@x) (let ((jk15fb@t jk15f2@y)) (let ((jk15fd@ls/false (jkd7e@syntax-dispatch jk15fb@t '(#(scheme-id quote) ())))) (if jk15fd@ls/false (apply (lambda () '()) jk15fd@ls/false) (let ((jk15ff@t jk15fb@t)) (let ((jk1601@ls/false (jkd7e@syntax-dispatch jk15ff@t '_))) (if jk1601@ls/false (apply (lambda () (list jk15f2@y)) jk1601@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk15ff@t))))))) (let ((jk1603@t (car jk15f7@x))) (let ((jk1605@ls/false (jkd7e@syntax-dispatch jk1603@t '(#(scheme-id quote) ())))) (if jk1605@ls/false (apply (lambda () (jk15f9@f (cdr jk15f7@x))) jk1605@ls/false) (let ((jk1607@t jk1603@t)) (let ((jk1609@ls/false (jkd7e@syntax-dispatch jk1607@t '_))) (if jk1609@ls/false (apply (lambda () (cons (car jk15f7@x) (jk15f9@f (cdr jk15f7@x)))) jk1609@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1607@t))))))))))) (if (null? jk15f5@ls) (list (jkd06@scheme-stx 'quote) '()) (if (null? (cdr jk15f5@ls)) (car jk15f5@ls) (cons* (jkd06@scheme-stx 'append) jk15f5@ls)))))) (set! jk155a@quasivector (lambda (jk15bf@x) (let ((jk15c1@pat-x jk15bf@x)) (let ((jk15c3@t jk15c1@pat-x)) (let ((jk15c5@ls/false (jkd7e@syntax-dispatch jk15c3@t '(#(scheme-id quote) each-any)))) (if jk15c5@ls/false (apply (lambda (jk15c7@x*) (list (jkd06@scheme-stx 'quote) (list->vector jk15c7@x*))) jk15c5@ls/false) (let ((jk15c9@t jk15c3@t)) (let ((jk15cb@ls/false (jkd7e@syntax-dispatch jk15c9@t '_))) (if jk15cb@ls/false (apply (lambda () (let jk15d3@f ((jk15cd@x jk15bf@x) (jk15ce@k (lambda (jk15d1@ls) (cons* (jkd06@scheme-stx 'vector) jk15d1@ls)))) (let ((jk15d5@t jk15cd@x)) (let ((jk15d7@ls/false (jkd7e@syntax-dispatch jk15d5@t '(#(scheme-id quote) each-any)))) (if jk15d7@ls/false (apply (lambda (jk15d9@x*) (jk15ce@k (map (lambda (jk15db@x) (list (jkd06@scheme-stx 'quote) jk15db@x)) jk15d9@x*))) jk15d7@ls/false) (let ((jk15dd@t jk15d5@t)) (let ((jk15df@ls/false (jkd7e@syntax-dispatch jk15dd@t '(#(scheme-id list) . each-any)))) (if jk15df@ls/false (apply (lambda (jk15e1@x*) (jk15ce@k jk15e1@x*)) jk15df@ls/false) (let ((jk15e3@t jk15dd@t)) (let ((jk15e5@ls/false (jkd7e@syntax-dispatch jk15e3@t '(#(scheme-id cons) any any)))) (if jk15e5@ls/false (apply (lambda (jk15e7@x jk15e8@y) (jk15d3@f jk15e8@y (lambda (jk15eb@ls) (jk15ce@k (cons jk15e7@x jk15eb@ls))))) jk15e5@ls/false) (let ((jk15ed@t jk15e3@t)) (let ((jk15ef@ls/false (jkd7e@syntax-dispatch jk15ed@t '_))) (if jk15ef@ls/false (apply (lambda () (list (jkd06@scheme-stx 'list->vector) jk15c1@pat-x)) jk15ef@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk15ed@t))))))))))))))) jk15cb@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk15c9@t)))))))))) (set! jk155c@vquasi (lambda (jk159d@p jk159e@lev) (let ((jk15a1@t jk159d@p)) (let ((jk15a3@ls/false (jkd7e@syntax-dispatch jk15a1@t '(any . any)))) (if jk15a3@ls/false (apply (lambda (jk15a5@p jk15a6@q) (let ((jk15a9@t jk15a5@p)) (let ((jk15ab@ls/false (jkd7e@syntax-dispatch jk15a9@t '(#(scheme-id unquote) . each-any)))) (if jk15ab@ls/false (apply (lambda (jk15ad@p) (if (= jk159e@lev '0) (jk1554@quasicons* jk15ad@p (jk155c@vquasi jk15a6@q jk159e@lev)) (jk1556@quasicons (jk1556@quasicons (jk1538@datum 'unquote) (jk155e@quasi jk15ad@p (- jk159e@lev '1))) (jk155c@vquasi jk15a6@q jk159e@lev)))) jk15ab@ls/false) (let ((jk15af@t jk15a9@t)) (let ((jk15b1@ls/false (jkd7e@syntax-dispatch jk15af@t '(#(scheme-id unquote-splicing) . each-any)))) (if jk15b1@ls/false (apply (lambda (jk15b3@p) (if (= jk159e@lev '0) (jk1558@quasiappend jk15b3@p (jk155c@vquasi jk15a6@q jk159e@lev)) (jk1556@quasicons (jk1556@quasicons (jk1538@datum 'unquote-splicing) (jk155e@quasi jk15b3@p (- jk159e@lev '1))) (jk155c@vquasi jk15a6@q jk159e@lev)))) jk15b1@ls/false) (let ((jk15b5@t jk15af@t)) (let ((jk15b7@ls/false (jkd7e@syntax-dispatch jk15b5@t 'any))) (if jk15b7@ls/false (apply (lambda (jk15b9@p) (jk1556@quasicons (jk155e@quasi jk15b9@p jk159e@lev) (jk155c@vquasi jk15a6@q jk159e@lev))) jk15b7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk15b5@t))))))))))) jk15a3@ls/false) (let ((jk15bb@t jk15a1@t)) (let ((jk15bd@ls/false (jkd7e@syntax-dispatch jk15bb@t '()))) (if jk15bd@ls/false (apply (lambda () (list (jkd06@scheme-stx 'quote) '())) jk15bd@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk15bb@t))))))))) (set! jk155e@quasi (lambda (jk1567@p jk1568@lev) (let ((jk156b@t jk1567@p)) (let ((jk156d@ls/false (jkd7e@syntax-dispatch jk156b@t '(#(scheme-id unquote) any)))) (if jk156d@ls/false (apply (lambda (jk156f@p) (if (= jk1568@lev '0) jk156f@p (jk1556@quasicons (jk1538@datum 'unquote) (jk155e@quasi (list jk156f@p) (- jk1568@lev '1))))) jk156d@ls/false) (let ((jk1571@t jk156b@t)) (let ((jk1573@ls/false (jkd7e@syntax-dispatch jk1571@t '((#(scheme-id unquote) . each-any) . any)))) (if jk1573@ls/false (apply (lambda (jk1575@p jk1576@q) (if (= jk1568@lev '0) (jk1554@quasicons* jk1575@p (jk155e@quasi jk1576@q jk1568@lev)) (jk1556@quasicons (jk1556@quasicons (jk1538@datum 'unquote) (jk155e@quasi jk1575@p (- jk1568@lev '1))) (jk155e@quasi jk1576@q jk1568@lev)))) jk1573@ls/false) (let ((jk1579@t jk1571@t)) (let ((jk157b@ls/false (jkd7e@syntax-dispatch jk1579@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if jk157b@ls/false (apply (lambda (jk157d@p jk157e@q) (if (= jk1568@lev '0) (jk1558@quasiappend jk157d@p (jk155e@quasi jk157e@q jk1568@lev)) (jk1556@quasicons (jk1556@quasicons (jk1538@datum 'unquote-splicing) (jk155e@quasi jk157d@p (- jk1568@lev '1))) (jk155e@quasi jk157e@q jk1568@lev)))) jk157b@ls/false) (let ((jk1581@t jk1579@t)) (let ((jk1583@ls/false (jkd7e@syntax-dispatch jk1581@t '(#(scheme-id quasiquote) any)))) (if jk1583@ls/false (apply (lambda (jk1585@p) (jk1556@quasicons (jk1538@datum 'quasiquote) (jk155e@quasi (list jk1585@p) (+ jk1568@lev '1)))) jk1583@ls/false) (let ((jk1587@t jk1581@t)) (let ((jk1589@ls/false (jkd7e@syntax-dispatch jk1587@t '(any . any)))) (if jk1589@ls/false (apply (lambda (jk158b@p jk158c@q) (jk1556@quasicons (jk155e@quasi jk158b@p jk1568@lev) (jk155e@quasi jk158c@q jk1568@lev))) jk1589@ls/false) (let ((jk158f@t jk1587@t)) (let ((jk1591@ls/false (jkd7e@syntax-dispatch jk158f@t '#(vector each-any)))) (if (and jk1591@ls/false (apply (lambda (jk1593@x) (not (jkb43@stx? jk1593@x))) jk1591@ls/false)) (apply (lambda (jk1595@x) (jk155a@quasivector (jk155c@vquasi jk1595@x jk1568@lev))) jk1591@ls/false) (let ((jk1597@t jk158f@t)) (let ((jk1599@ls/false (jkd7e@syntax-dispatch jk1597@t 'any))) (if jk1599@ls/false (apply (lambda (jk159b@p) (list (jkd06@scheme-stx 'quote) jk159b@p)) jk1599@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1597@t)))))))))))))))))))))))) (lambda (jk155f@x) (let ((jk1561@t jk155f@x)) (let ((jk1563@ls/false (jkd7e@syntax-dispatch jk1561@t '(_ any)))) (if jk1563@ls/false (apply (lambda (jk1565@e) (jk155e@quasi jk1565@e '0)) jk1563@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1561@t)))))))) (set! jk284b@jkd6c@quasiquote-macro jkd6c@quasiquote-macro) (set! jkd6e@quasisyntax-macro (let ((jk163c@quasi '#f)) (begin (set! jk163c@quasi (lambda (jk1657@p jk1658@lev) (let ((jk165b@t jk1657@p)) (let ((jk165d@ls/false (jkd7e@syntax-dispatch jk165b@t '(#(scheme-id unsyntax) any)))) (if jk165d@ls/false (apply (lambda (jk165f@p) (if (= jk1658@lev '0) (let ((jk1661@g (gensym))) (values (list jk1661@g) (list jk165f@p) jk1661@g)) (call-with-values (lambda () (jk163c@quasi jk165f@p (- jk1658@lev '1))) (lambda (jk1669@jk1664 jk166a@jk1666 jk166b@jk1668) (let ((jk166f@p jk166b@jk1668) (jk1670@rhs* jk166a@jk1666) (jk1671@lhs* jk1669@jk1664)) (values jk1671@lhs* jk1670@rhs* (list 'unsyntax jk166f@p))))))) jk165d@ls/false) (let ((jk1675@t jk165b@t)) (let ((jk1677@ls/false (jkd7e@syntax-dispatch jk1675@t '#(scheme-id unsyntax)))) (if (and jk1677@ls/false (apply (lambda () (= jk1658@lev '0)) jk1677@ls/false)) (apply (lambda () (jke5e@syntax-violation '#f '"incorrect use of unsyntax" jk1657@p)) jk1677@ls/false) (let ((jk1679@t jk1675@t)) (let ((jk167b@ls/false (jkd7e@syntax-dispatch jk1679@t '((#(scheme-id unsyntax) . each-any) . any)))) (if jk167b@ls/false (apply (lambda (jk167d@p* jk167e@q) (call-with-values (lambda () (jk163c@quasi jk167e@q jk1658@lev)) (lambda (jk1687@jk1682 jk1688@jk1684 jk1689@jk1686) (let ((jk168d@q jk1689@jk1686) (jk168e@rhs* jk1688@jk1684) (jk168f@lhs* jk1687@jk1682)) (if (= jk1658@lev '0) (let ((jk1693@g* (map (lambda (jk1695@x) (gensym)) jk167d@p*))) (values (append jk1693@g* jk168f@lhs*) (append jk167d@p* jk168e@rhs*) (append jk1693@g* jk168d@q))) (call-with-values (lambda () (jk163c@quasi jk167d@p* (- jk1658@lev '1))) (lambda (jk169d@jk1698 jk169e@jk169a jk169f@jk169c) (let ((jk16a3@p* jk169f@jk169c) (jk16a4@rhs2* jk169e@jk169a) (jk16a5@lhs2* jk169d@jk1698)) (values (append jk16a5@lhs2* jk168f@lhs*) (append jk16a4@rhs2* jk168e@rhs*) (cons (cons 'unsyntax jk16a3@p*) jk168d@q)))))))))) jk167b@ls/false) (let ((jk16a9@t jk1679@t)) (let ((jk16ab@ls/false (jkd7e@syntax-dispatch jk16a9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if jk16ab@ls/false (apply (lambda (jk16ad@p* jk16ae@q) (call-with-values (lambda () (jk163c@quasi jk16ae@q jk1658@lev)) (lambda (jk16b7@jk16b2 jk16b8@jk16b4 jk16b9@jk16b6) (let ((jk16bd@q jk16b9@jk16b6) (jk16be@rhs* jk16b8@jk16b4) (jk16bf@lhs* jk16b7@jk16b2)) (if (= jk1658@lev '0) (let ((jk16c3@g* (map (lambda (jk16c5@x) (gensym)) jk16ad@p*))) (values (append (map (lambda (jk16c7@g) (cons jk16c7@g '(...))) jk16c3@g*) jk16bf@lhs*) (append jk16ad@p* jk16be@rhs*) (append (apply append (map (lambda (jk16c9@g) (cons jk16c9@g '(...))) jk16c3@g*)) jk16bd@q))) (call-with-values (lambda () (jk163c@quasi jk16ad@p* (- jk1658@lev '1))) (lambda (jk16d1@jk16cc jk16d2@jk16ce jk16d3@jk16d0) (let ((jk16d7@p* jk16d3@jk16d0) (jk16d8@rhs2* jk16d2@jk16ce) (jk16d9@lhs2* jk16d1@jk16cc)) (values (append jk16d9@lhs2* jk16bf@lhs*) (append jk16d8@rhs2* jk16be@rhs*) (cons (cons 'unsyntax-splicing jk16d7@p*) jk16bd@q)))))))))) jk16ab@ls/false) (let ((jk16dd@t jk16a9@t)) (let ((jk16df@ls/false (jkd7e@syntax-dispatch jk16dd@t '#(scheme-id unsyntax-splicing)))) (if (and jk16df@ls/false (apply (lambda () (= jk1658@lev '0)) jk16df@ls/false)) (apply (lambda () (jke5e@syntax-violation '#f '"incorrect use of unsyntax-splicing" jk1657@p)) jk16df@ls/false) (let ((jk16e1@t jk16dd@t)) (let ((jk16e3@ls/false (jkd7e@syntax-dispatch jk16e1@t '(#(scheme-id quasisyntax) any)))) (if jk16e3@ls/false (apply (lambda (jk16e5@p) (call-with-values (lambda () (jk163c@quasi jk16e5@p (+ jk1658@lev '1))) (lambda (jk16ed@jk16e8 jk16ee@jk16ea jk16ef@jk16ec) (let ((jk16f3@p jk16ef@jk16ec) (jk16f4@rhs* jk16ee@jk16ea) (jk16f5@lhs* jk16ed@jk16e8)) (values jk16f5@lhs* jk16f4@rhs* (list 'quasisyntax jk16f3@p)))))) jk16e3@ls/false) (let ((jk16f9@t jk16e1@t)) (let ((jk16fb@ls/false (jkd7e@syntax-dispatch jk16f9@t '(any . any)))) (if jk16fb@ls/false (apply (lambda (jk16fd@p jk16fe@q) (call-with-values (lambda () (jk163c@quasi jk16fd@p jk1658@lev)) (lambda (jk170d@jk1702 jk170e@jk1704 jk170f@jk1706) (call-with-values (lambda () (jk163c@quasi jk16fe@q jk1658@lev)) (lambda (jk1713@jk1708 jk1714@jk170a jk1715@jk170c) (let ((jk1719@q jk1715@jk170c) (jk171a@rhs2* jk1714@jk170a) (jk171b@lhs2* jk1713@jk1708) (jk171c@p jk170f@jk1706) (jk171d@rhs* jk170e@jk1704) (jk171e@lhs* jk170d@jk1702)) (values (append jk171b@lhs2* jk171e@lhs*) (append jk171a@rhs2* jk171d@rhs*) (cons jk171c@p jk1719@q)))))))) jk16fb@ls/false) (let ((jk1725@t jk16f9@t)) (let ((jk1727@ls/false (jkd7e@syntax-dispatch jk1725@t '#(vector each-any)))) (if jk1727@ls/false (apply (lambda (jk1729@x*) (call-with-values (lambda () (jk163c@quasi jk1729@x* jk1658@lev)) (lambda (jk1731@jk172c jk1732@jk172e jk1733@jk1730) (let ((jk1737@x* jk1733@jk1730) (jk1738@rhs* jk1732@jk172e) (jk1739@lhs* jk1731@jk172c)) (values jk1739@lhs* jk1738@rhs* (list->vector jk1737@x*)))))) jk1727@ls/false) (let ((jk173d@t jk1725@t)) (let ((jk173f@ls/false (jkd7e@syntax-dispatch jk173d@t '_))) (if jk173f@ls/false (apply (lambda () (values '() '() jk1657@p)) jk173f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk173d@t)))))))))))))))))))))))))))))) (lambda (jk163d@x) (let ((jk163f@t jk163d@x)) (let ((jk1641@ls/false (jkd7e@syntax-dispatch jk163f@t '(_ any)))) (if jk1641@ls/false (apply (lambda (jk1643@e) (call-with-values (lambda () (jk163c@quasi jk1643@e '0)) (lambda (jk164b@jk1646 jk164c@jk1648 jk164d@jk164a) (let ((jk1651@v jk164d@jk164a) (jk1652@rhs* jk164c@jk1648) (jk1653@lhs* jk164b@jk1646)) (jkd34@bless (list 'syntax-case (cons 'list jk1652@rhs*) '() (list jk1653@lhs* (list 'syntax jk1651@v)))))))) jk1641@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk163f@t)))))))) (set! jk284c@jkd6e@quasisyntax-macro jkd6e@quasisyntax-macro) (set! jkd70@define-struct-macro (lambda (jk1741@stx) (jke5e@syntax-violation '#f '"define-struct not supported" jk1741@stx))) (set! jk284d@jkd70@define-struct-macro jkd70@define-struct-macro) (set! jkd72@define-record-type-macro (lambda (jk1743@x) (let ((jk1746@id '#f) (jk1748@get-record-name '#f) (jk174a@get-record-constructor-name '#f) (jk174c@get-record-predicate-name '#f) (jk174e@get-clause '#f) (jk1750@foo-rtd-code '#f) (jk1752@parent-rtd-code '#f) (jk1754@parent-rcd-code '#f) (jk1756@foo-rcd-code '#f) (jk1758@get-protocol-code '#f) (jk175a@get-fields '#f) (jk175c@get-mutator-indices '#f) (jk175e@get-mutators '#f) (jk1760@get-accessors '#f) (jk1762@enumerate '#f) (jk1764@do-define-record '#f) (jk1766@verify-clauses '#f)) (begin (set! jk1746@id (lambda (jk1939@ctxt . jk193b@str*) (jke62@datum->syntax jk1939@ctxt (string->symbol (apply string-append (map (lambda (jk193d@x) (if (symbol? jk193d@x) (symbol->string jk193d@x) (if (string? jk193d@x) jk193d@x (assertion-violation 'define-record-type '"BUG")))) jk193b@str*)))))) (set! jk1748@get-record-name (lambda (jk1927@spec) (let ((jk1929@t jk1927@spec)) (let ((jk192b@ls/false (jkd7e@syntax-dispatch jk1929@t '(any any any)))) (if jk192b@ls/false (apply (lambda (jk192d@foo jk192e@make-foo jk192f@foo?) jk192d@foo) jk192b@ls/false) (let ((jk1933@t jk1929@t)) (let ((jk1935@ls/false (jkd7e@syntax-dispatch jk1933@t 'any))) (if jk1935@ls/false (apply (lambda (jk1937@foo) jk1937@foo) jk1935@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1933@t))))))))) (set! jk174a@get-record-constructor-name (lambda (jk1913@spec) (let ((jk1915@t jk1913@spec)) (let ((jk1917@ls/false (jkd7e@syntax-dispatch jk1915@t '(any any any)))) (if jk1917@ls/false (apply (lambda (jk1919@foo jk191a@make-foo jk191b@foo?) jk191a@make-foo) jk1917@ls/false) (let ((jk191f@t jk1915@t)) (let ((jk1921@ls/false (jkd7e@syntax-dispatch jk191f@t 'any))) (if (and jk1921@ls/false (apply (lambda (jk1923@foo) (jkb77@id? jk1923@foo)) jk1921@ls/false)) (apply (lambda (jk1925@foo) (jk1746@id jk1925@foo '"make-" (jkb8b@stx->datum jk1925@foo))) jk1921@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk191f@t))))))))) (set! jk174c@get-record-predicate-name (lambda (jk18ff@spec) (let ((jk1901@t jk18ff@spec)) (let ((jk1903@ls/false (jkd7e@syntax-dispatch jk1901@t '(any any any)))) (if jk1903@ls/false (apply (lambda (jk1905@foo jk1906@make-foo jk1907@foo?) jk1907@foo?) jk1903@ls/false) (let ((jk190b@t jk1901@t)) (let ((jk190d@ls/false (jkd7e@syntax-dispatch jk190b@t 'any))) (if (and jk190d@ls/false (apply (lambda (jk190f@foo) (jkb77@id? jk190f@foo)) jk190d@ls/false)) (apply (lambda (jk1911@foo) (jk1746@id jk1911@foo (jkb8b@stx->datum jk1911@foo) '"?")) jk190d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk190b@t))))))))) (set! jk174e@get-clause (lambda (jk18ed@id jk18ee@ls) (let ((jk18f1@t jk18ee@ls)) (let ((jk18f3@ls/false (jkd7e@syntax-dispatch jk18f1@t '()))) (if jk18f3@ls/false (apply (lambda () '#f) jk18f3@ls/false) (let ((jk18f5@t jk18f1@t)) (let ((jk18f7@ls/false (jkd7e@syntax-dispatch jk18f5@t '((any . any) . any)))) (if jk18f7@ls/false (apply (lambda (jk18f9@x jk18fa@rest jk18fb@ls) (if (jkb7d@free-id=? (jkd34@bless jk18ed@id) jk18f9@x) (cons jk18f9@x jk18fa@rest) (jk174e@get-clause jk18ed@id jk18fb@ls))) jk18f7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18f5@t))))))))) (set! jk1750@foo-rtd-code (lambda (jk189b@name jk189c@clause* jk189d@parent-rtd-code) (let ((jk18a2@convert-field-spec* '#f)) (begin (set! jk18a2@convert-field-spec* (lambda (jk18d3@ls) (list->vector (map (lambda (jk18d5@x) (let ((jk18d7@t jk18d5@x)) (let ((jk18d9@ls/false (jkd7e@syntax-dispatch jk18d7@t '(#(scheme-id mutable) any . any)))) (if jk18d9@ls/false (apply (lambda (jk18db@name jk18dc@rest) (list 'mutable jk18db@name)) jk18d9@ls/false) (let ((jk18df@t jk18d7@t)) (let ((jk18e1@ls/false (jkd7e@syntax-dispatch jk18df@t '(#(scheme-id immutable) any . any)))) (if jk18e1@ls/false (apply (lambda (jk18e3@name jk18e4@rest) (list 'immutable jk18e3@name)) jk18e1@ls/false) (let ((jk18e7@t jk18df@t)) (let ((jk18e9@ls/false (jkd7e@syntax-dispatch jk18e7@t 'any))) (if jk18e9@ls/false (apply (lambda (jk18eb@name) (list 'immutable jk18eb@name)) jk18e9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18e7@t))))))))))) jk18d3@ls)))) (let ((jk18a3@uid-code (let ((jk18ab@t (jk174e@get-clause 'nongenerative jk189c@clause*))) (let ((jk18ad@ls/false (jkd7e@syntax-dispatch jk18ab@t '(_)))) (if jk18ad@ls/false (apply (lambda () (list 'quote (gensym))) jk18ad@ls/false) (let ((jk18af@t jk18ab@t)) (let ((jk18b1@ls/false (jkd7e@syntax-dispatch jk18af@t '(_ any)))) (if jk18b1@ls/false (apply (lambda (jk18b3@uid) (list 'quote jk18b3@uid)) jk18b1@ls/false) (let ((jk18b5@t jk18af@t)) (let ((jk18b7@ls/false (jkd7e@syntax-dispatch jk18b5@t '_))) (if jk18b7@ls/false (apply (lambda () '#f) jk18b7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18b5@t))))))))))) (jk18a4@sealed? (let ((jk18b9@t (jk174e@get-clause 'sealed jk189c@clause*))) (let ((jk18bb@ls/false (jkd7e@syntax-dispatch jk18b9@t '(_ #(atom #t))))) (if jk18bb@ls/false (apply (lambda () '#t) jk18bb@ls/false) (let ((jk18bd@t jk18b9@t)) (let ((jk18bf@ls/false (jkd7e@syntax-dispatch jk18bd@t '_))) (if jk18bf@ls/false (apply (lambda () '#f) jk18bf@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18bd@t)))))))) (jk18a5@opaque? (let ((jk18c1@t (jk174e@get-clause 'opaque jk189c@clause*))) (let ((jk18c3@ls/false (jkd7e@syntax-dispatch jk18c1@t '(_ #(atom #t))))) (if jk18c3@ls/false (apply (lambda () '#t) jk18c3@ls/false) (let ((jk18c5@t jk18c1@t)) (let ((jk18c7@ls/false (jkd7e@syntax-dispatch jk18c5@t '_))) (if jk18c7@ls/false (apply (lambda () '#f) jk18c7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18c5@t)))))))) (jk18a6@fields (let ((jk18c9@t (jk174e@get-clause 'fields jk189c@clause*))) (let ((jk18cb@ls/false (jkd7e@syntax-dispatch jk18c9@t '(_ . each-any)))) (if jk18cb@ls/false (apply (lambda (jk18cd@field-spec*) (list 'quote (jk18a2@convert-field-spec* jk18cd@field-spec*))) jk18cb@ls/false) (let ((jk18cf@t jk18c9@t)) (let ((jk18d1@ls/false (jkd7e@syntax-dispatch jk18cf@t '_))) (if jk18d1@ls/false (apply (lambda () ''#()) jk18d1@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk18cf@t))))))))) (jkd34@bless (list 'make-record-type-descriptor (list 'quote jk189b@name) jk189d@parent-rtd-code jk18a3@uid-code jk18a4@sealed? jk18a5@opaque? jk18a6@fields))))))) (set! jk1752@parent-rtd-code (lambda (jk1883@clause*) (let ((jk1885@t (jk174e@get-clause 'parent jk1883@clause*))) (let ((jk1887@ls/false (jkd7e@syntax-dispatch jk1885@t '(_ any)))) (if jk1887@ls/false (apply (lambda (jk1889@name) (list 'record-type-descriptor jk1889@name)) jk1887@ls/false) (let ((jk188b@t jk1885@t)) (let ((jk188d@ls/false (jkd7e@syntax-dispatch jk188b@t '#(atom #f)))) (if jk188d@ls/false (apply (lambda () (let ((jk188f@t (jk174e@get-clause 'parent-rtd jk1883@clause*))) (let ((jk1891@ls/false (jkd7e@syntax-dispatch jk188f@t '(_ any any)))) (if jk1891@ls/false (apply (lambda (jk1893@rtd jk1894@rcd) jk1893@rtd) jk1891@ls/false) (let ((jk1897@t jk188f@t)) (let ((jk1899@ls/false (jkd7e@syntax-dispatch jk1897@t '#(atom #f)))) (if jk1899@ls/false (apply (lambda () '#f) jk1899@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1897@t)))))))) jk188d@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk188b@t))))))))) (set! jk1754@parent-rcd-code (lambda (jk186b@clause*) (let ((jk186d@t (jk174e@get-clause 'parent jk186b@clause*))) (let ((jk186f@ls/false (jkd7e@syntax-dispatch jk186d@t '(_ any)))) (if jk186f@ls/false (apply (lambda (jk1871@name) (list 'record-constructor-descriptor jk1871@name)) jk186f@ls/false) (let ((jk1873@t jk186d@t)) (let ((jk1875@ls/false (jkd7e@syntax-dispatch jk1873@t '#(atom #f)))) (if jk1875@ls/false (apply (lambda () (let ((jk1877@t (jk174e@get-clause 'parent-rtd jk186b@clause*))) (let ((jk1879@ls/false (jkd7e@syntax-dispatch jk1877@t '(_ any any)))) (if jk1879@ls/false (apply (lambda (jk187b@rtd jk187c@rcd) jk187c@rcd) jk1879@ls/false) (let ((jk187f@t jk1877@t)) (let ((jk1881@ls/false (jkd7e@syntax-dispatch jk187f@t '#(atom #f)))) (if jk1881@ls/false (apply (lambda () '#f) jk1881@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk187f@t)))))))) jk1875@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1873@t))))))))) (set! jk1756@foo-rcd-code (lambda (jk1863@clause* jk1864@foo-rtd jk1865@protocol jk1866@parent-rcd-code) (list 'make-record-constructor-descriptor jk1864@foo-rtd jk1866@parent-rcd-code jk1865@protocol))) (set! jk1758@get-protocol-code (lambda (jk1857@clause*) (let ((jk1859@t (jk174e@get-clause 'protocol jk1857@clause*))) (let ((jk185b@ls/false (jkd7e@syntax-dispatch jk1859@t '(_ any)))) (if jk185b@ls/false (apply (lambda (jk185d@expr) jk185d@expr) jk185b@ls/false) (let ((jk185f@t jk1859@t)) (let ((jk1861@ls/false (jkd7e@syntax-dispatch jk185f@t '_))) (if jk1861@ls/false (apply (lambda () '#f) jk1861@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk185f@t))))))))) (set! jk175a@get-fields (lambda (jk1845@clause*) (let ((jk1847@t jk1845@clause*)) (let ((jk1849@ls/false (jkd7e@syntax-dispatch jk1847@t '()))) (if jk1849@ls/false (apply (lambda () '()) jk1849@ls/false) (let ((jk184b@t jk1847@t)) (let ((jk184d@ls/false (jkd7e@syntax-dispatch jk184b@t '((#(scheme-id fields) . each-any) . _)))) (if jk184d@ls/false (apply (lambda (jk184f@f*) jk184f@f*) jk184d@ls/false) (let ((jk1851@t jk184b@t)) (let ((jk1853@ls/false (jkd7e@syntax-dispatch jk1851@t '(_ . any)))) (if jk1853@ls/false (apply (lambda (jk1855@rest) (jk175a@get-fields jk1855@rest)) jk1853@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1851@t)))))))))))) (set! jk175c@get-mutator-indices (lambda (jk182d@fields) (let jk1833@f ((jk182f@fields jk182d@fields) (jk1830@i '0)) (let ((jk1835@t jk182f@fields)) (let ((jk1837@ls/false (jkd7e@syntax-dispatch jk1835@t '()))) (if jk1837@ls/false (apply (lambda () '()) jk1837@ls/false) (let ((jk1839@t jk1835@t)) (let ((jk183b@ls/false (jkd7e@syntax-dispatch jk1839@t '((#(scheme-id mutable) . _) . any)))) (if jk183b@ls/false (apply (lambda (jk183d@rest) (cons jk1830@i (jk1833@f jk183d@rest (+ jk1830@i '1)))) jk183b@ls/false) (let ((jk183f@t jk1839@t)) (let ((jk1841@ls/false (jkd7e@syntax-dispatch jk183f@t '(_ . any)))) (if jk1841@ls/false (apply (lambda (jk1843@rest) (jk1833@f jk1843@rest (+ jk1830@i '1))) jk1841@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk183f@t))))))))))))) (set! jk175e@get-mutators (lambda (jk1803@foo jk1804@fields) (let ((jk1808@gen-name '#f)) (begin (set! jk1808@gen-name (lambda (jk182b@x) (jke62@datum->syntax jk1803@foo (string->symbol (string-append (symbol->string (jke64@syntax->datum jk1803@foo)) '"-" (symbol->string (jke64@syntax->datum jk182b@x)) '"-set!"))))) (let jk180b@f ((jk1809@fields jk1804@fields)) (let ((jk180d@t jk1809@fields)) (let ((jk180f@ls/false (jkd7e@syntax-dispatch jk180d@t '()))) (if jk180f@ls/false (apply (lambda () '()) jk180f@ls/false) (let ((jk1811@t jk180d@t)) (let ((jk1813@ls/false (jkd7e@syntax-dispatch jk1811@t '((#(scheme-id mutable) any any any) . any)))) (if jk1813@ls/false (apply (lambda (jk1815@name jk1816@accessor jk1817@mutator jk1818@rest) (cons jk1817@mutator (jk180b@f jk1818@rest))) jk1813@ls/false) (let ((jk181d@t jk1811@t)) (let ((jk181f@ls/false (jkd7e@syntax-dispatch jk181d@t '((#(scheme-id mutable) any) . any)))) (if jk181f@ls/false (apply (lambda (jk1821@name jk1822@rest) (cons (jk1808@gen-name jk1821@name) (jk180b@f jk1822@rest))) jk181f@ls/false) (let ((jk1825@t jk181d@t)) (let ((jk1827@ls/false (jkd7e@syntax-dispatch jk1825@t '(_ . any)))) (if jk1827@ls/false (apply (lambda (jk1829@rest) (jk180b@f jk1829@rest)) jk1827@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1825@t)))))))))))))))))) (set! jk1760@get-accessors (lambda (jk17bf@foo jk17c0@fields) (let ((jk17c4@gen-name '#f)) (begin (set! jk17c4@gen-name (lambda (jk1801@x) (jke62@datum->syntax jk17bf@foo (string->symbol (string-append (symbol->string (jke64@syntax->datum jk17bf@foo)) '"-" (symbol->string (jke64@syntax->datum jk1801@x))))))) (map (lambda (jk17c5@field) (let ((jk17c7@t jk17c5@field)) (let ((jk17c9@ls/false (jkd7e@syntax-dispatch jk17c7@t '(#(scheme-id mutable) any any any)))) (if (and jk17c9@ls/false (apply (lambda (jk17cb@name jk17cc@accessor jk17cd@mutator) (jkb77@id? jk17cc@accessor)) jk17c9@ls/false)) (apply (lambda (jk17d1@name jk17d2@accessor jk17d3@mutator) jk17d2@accessor) jk17c9@ls/false) (let ((jk17d7@t jk17c7@t)) (let ((jk17d9@ls/false (jkd7e@syntax-dispatch jk17d7@t '(#(scheme-id immutable) any any)))) (if (and jk17d9@ls/false (apply (lambda (jk17db@name jk17dc@accessor) (jkb77@id? jk17dc@accessor)) jk17d9@ls/false)) (apply (lambda (jk17df@name jk17e0@accessor) jk17e0@accessor) jk17d9@ls/false) (let ((jk17e3@t jk17d7@t)) (let ((jk17e5@ls/false (jkd7e@syntax-dispatch jk17e3@t '(#(scheme-id mutable) any)))) (if (and jk17e5@ls/false (apply (lambda (jk17e7@name) (jkb77@id? jk17e7@name)) jk17e5@ls/false)) (apply (lambda (jk17e9@name) (jk17c4@gen-name jk17e9@name)) jk17e5@ls/false) (let ((jk17eb@t jk17e3@t)) (let ((jk17ed@ls/false (jkd7e@syntax-dispatch jk17eb@t '(#(scheme-id immutable) any)))) (if (and jk17ed@ls/false (apply (lambda (jk17ef@name) (jkb77@id? jk17ef@name)) jk17ed@ls/false)) (apply (lambda (jk17f1@name) (jk17c4@gen-name jk17f1@name)) jk17ed@ls/false) (let ((jk17f3@t jk17eb@t)) (let ((jk17f5@ls/false (jkd7e@syntax-dispatch jk17f3@t 'any))) (if (and jk17f5@ls/false (apply (lambda (jk17f7@name) (jkb77@id? jk17f7@name)) jk17f5@ls/false)) (apply (lambda (jk17f9@name) (jk17c4@gen-name jk17f9@name)) jk17f5@ls/false) (let ((jk17fb@t jk17f3@t)) (let ((jk17fd@ls/false (jkd7e@syntax-dispatch jk17fb@t 'any))) (if jk17fd@ls/false (apply (lambda (jk17ff@others) (jke5e@syntax-violation '#f '"invalid field spec" jk17c5@field)) jk17fd@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk17fb@t)))))))))))))))))))) jk17c0@fields))))) (set! jk1762@enumerate (lambda (jk17b7@ls) (let jk17bd@f ((jk17b9@ls jk17b7@ls) (jk17ba@i '0)) (if (null? jk17b9@ls) '() (cons jk17ba@i (jk17bd@f (cdr jk17b9@ls) (+ jk17ba@i '1))))))) (set! jk1764@do-define-record (lambda (jk178f@namespec jk1790@clause*) (let ((jk1793@foo (jk1748@get-record-name jk178f@namespec))) (let ((jk1795@foo-rtd (gensym))) (let ((jk1797@foo-rcd (gensym))) (let ((jk1799@protocol (gensym))) (let ((jk179b@make-foo (jk174a@get-record-constructor-name jk178f@namespec))) (let ((jk179d@fields (jk175a@get-fields jk1790@clause*))) (let ((jk179f@idx* (jk1762@enumerate jk179d@fields))) (let ((jk17a1@foo-x* (jk1760@get-accessors jk1793@foo jk179d@fields))) (let ((jk17a3@set-foo-x!* (jk175e@get-mutators jk1793@foo jk179d@fields))) (let ((jk17a5@set-foo-idx* (jk175c@get-mutator-indices jk179d@fields))) (let ((jk17a7@foo? (jk174c@get-record-predicate-name jk178f@namespec))) (let ((jk17a9@foo-rtd-code (jk1750@foo-rtd-code jk1793@foo jk1790@clause* (jk1752@parent-rtd-code jk1790@clause*)))) (let ((jk17ab@foo-rcd-code (jk1756@foo-rcd-code jk1790@clause* jk1795@foo-rtd jk1799@protocol (jk1754@parent-rcd-code jk1790@clause*)))) (let ((jk17ad@protocol-code (jk1758@get-protocol-code jk1790@clause*))) (jkd34@bless (cons 'begin (cons (list 'define jk1795@foo-rtd jk17a9@foo-rtd-code) (cons (list 'define jk1799@protocol jk17ad@protocol-code) (cons (list 'define jk1797@foo-rcd jk17ab@foo-rcd-code) (cons (list 'define-syntax jk1793@foo (list 'list ''$rtd (list 'syntax jk1795@foo-rtd) (list 'syntax jk1797@foo-rcd))) (cons (list 'define jk17a7@foo? (list 'record-predicate jk1795@foo-rtd)) (cons (list 'define jk179b@make-foo (list 'record-constructor jk1797@foo-rcd)) (append (map (lambda (jk17af@foo-x jk17b0@idx) (list 'define jk17af@foo-x (list 'record-accessor jk1795@foo-rtd jk17b0@idx))) jk17a1@foo-x* jk179f@idx*) (map (lambda (jk17b3@set-foo-x! jk17b4@idx) (list 'define jk17b3@set-foo-x! (list 'record-mutator jk1795@foo-rtd jk17b4@idx))) jk17a3@set-foo-x!* jk17a5@set-foo-idx*)))))))))))))))))))))))))) (set! jk1766@verify-clauses (lambda (jk176f@x jk1770@cls*) (let ((jk1774@valid-kwds '#f) (jk1776@free-id-member? '#f)) (begin (set! jk1774@valid-kwds (map jkd34@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! jk1776@free-id-member? (lambda (jk178b@x jk178c@ls) (and (pair? jk178c@ls) (or (jkb7d@free-id=? jk178b@x (car jk178c@ls)) (jk1776@free-id-member? jk178b@x (cdr jk178c@ls)))))) (let jk177b@f ((jk1777@cls* jk1770@cls*) (jk1778@seen* '())) (if (not (null? jk1777@cls*)) (let ((jk177d@t (car jk1777@cls*))) (let ((jk177f@ls/false (jkd7e@syntax-dispatch jk177d@t '(any . any)))) (if jk177f@ls/false (apply (lambda (jk1781@kwd jk1782@rest) (if (or (not (jkb77@id? jk1781@kwd)) (not (jk1776@free-id-member? jk1781@kwd jk1774@valid-kwds))) (jke5e@syntax-violation '#f '"not a valid define-record-type keyword" jk1781@kwd) (if (jkb83@bound-id-member? jk1781@kwd jk1778@seen*) (jke5e@syntax-violation '#f '"duplicate use of keyword " jk176f@x jk1781@kwd) (jk177b@f (cdr jk1777@cls*) (cons jk1781@kwd jk1778@seen*))))) jk177f@ls/false) (let ((jk1785@t jk177d@t)) (let ((jk1787@ls/false (jkd7e@syntax-dispatch jk1785@t 'any))) (if jk1787@ls/false (apply (lambda (jk1789@cls) (jke5e@syntax-violation '#f '"malformed define-record-type clause" jk1789@cls)) jk1787@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1785@t))))))) (void))))))) (let ((jk1767@t jk1743@x)) (let ((jk1769@ls/false (jkd7e@syntax-dispatch jk1767@t '(_ any . each-any)))) (if jk1769@ls/false (apply (lambda (jk176b@namespec jk176c@clause*) (begin (jk1766@verify-clauses jk1743@x jk176c@clause*) (jk1764@do-define-record jk176b@namespec jk176c@clause*))) jk1769@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1767@t)))))))) (set! jk284e@jkd72@define-record-type-macro jkd72@define-record-type-macro) (set! jkd74@define-condition-type-macro (lambda (jk193f@x) (let ((jk1942@mkname '#f)) (begin (set! jk1942@mkname (lambda (jk196f@name jk1970@suffix) (jke62@datum->syntax jk196f@name (string->symbol (string-append (symbol->string (jke64@syntax->datum jk196f@name)) jk1970@suffix))))) (let ((jk1943@t jk193f@x)) (let ((jk1945@ls/false (jkd7e@syntax-dispatch jk1943@t '(any any any any any . #(each (any any)))))) (if (and jk1945@ls/false (apply (lambda (jk1947@ctxt jk1948@name jk1949@super jk194a@constructor jk194b@predicate jk194c@field* jk194d@accessor*) (and (jkb77@id? jk1948@name) (jkb77@id? jk1949@super) (jkb77@id? jk194a@constructor) (jkb77@id? jk194b@predicate) (for-all jkb77@id? jk194c@field*) (for-all jkb77@id? jk194d@accessor*))) jk1945@ls/false)) (apply (lambda (jk1955@ctxt jk1956@name jk1957@super jk1958@constructor jk1959@predicate jk195a@field* jk195b@accessor*) (let ((jk1963@aux-accessor* (map (lambda (jk1965@x) (gensym)) jk195b@accessor*))) (jkd34@bless (cons 'begin (cons (cons 'define-record-type (cons (list jk1956@name jk1958@constructor (gensym)) (cons (list 'parent jk1957@super) (cons (cons 'fields (map (lambda (jk1967@field jk1968@aux) (list 'immutable jk1967@field jk1968@aux)) jk195a@field* jk1963@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define jk1959@predicate (list 'condition-predicate (list 'record-type-descriptor jk1956@name))) (map (lambda (jk196b@accessor jk196c@aux) (list 'define jk196b@accessor (list 'condition-accessor (list 'record-type-descriptor jk1956@name) jk196c@aux))) jk195b@accessor* jk1963@aux-accessor*))))))) jk1945@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1943@t)))))))) (set! jk284f@jkd74@define-condition-type-macro jkd74@define-condition-type-macro) (set! jkd76@incorrect-usage-macro (lambda (jk1973@e) (jke5e@syntax-violation '#f '"incorrect usage of auxiliary keyword" jk1973@e))) (set! jk2850@jkd76@incorrect-usage-macro jkd76@incorrect-usage-macro) (set! jkd78@parameterize-macro (lambda (jk1975@e) (let ((jk1977@t jk1975@e)) (let ((jk1979@ls/false (jkd7e@syntax-dispatch jk1977@t '(_ () any . each-any)))) (if jk1979@ls/false (apply (lambda (jk197b@b jk197c@b*) (jkd34@bless (cons 'let (cons '() (cons jk197b@b jk197c@b*))))) jk1979@ls/false) (let ((jk197f@t jk1977@t)) (let ((jk1981@ls/false (jkd7e@syntax-dispatch jk197f@t '(_ #(each (any any)) any . each-any)))) (if jk1981@ls/false (apply (lambda (jk1983@olhs* jk1984@orhs* jk1985@b jk1986@b*) (let ((jk198b@lhs* (jke4c@generate-temporaries jk1983@olhs*)) (jk198c@rhs* (jke4c@generate-temporaries jk1984@orhs*))) (jkd34@bless (cons (list 'lambda (append jk198b@lhs* jk198c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (jk198f@lhs jk1990@rhs) (list 'let (list (list 't (list jk198f@lhs))) (list jk198f@lhs jk1990@rhs) (cons 'set! (cons jk1990@rhs '(t))))) jk198b@lhs* jk198c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons jk1985@b jk1986@b*))) '(swap)))))) (append jk1983@olhs* jk1984@orhs*))))) jk1981@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk197f@t))))))))) (set! jk2851@jkd78@parameterize-macro jkd78@parameterize-macro) (set! jkd7a@foreign-call-transformer (lambda (jk1993@e jk1994@r jk1995@mr) (let ((jk1999@t jk1993@e)) (let ((jk199b@ls/false (jkd7e@syntax-dispatch jk1999@t '(_ any . each-any)))) (if jk199b@ls/false (apply (lambda (jk199d@name jk199e@arg*) (cons 'foreign-call (cons (jkda0@chi-expr jk199d@name jk1994@r jk1995@mr) (jkd9c@chi-expr* jk199e@arg* jk1994@r jk1995@mr)))) jk199b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1999@t)))))) (set! jk2852@jkd7a@foreign-call-transformer jkd7a@foreign-call-transformer) (set! jkd7c@convert-pattern (lambda (jk19a1@pattern jk19a2@keys) (let ((jk19a6@cvt* '#f) (jk19a8@cvt '#f)) (begin (set! jk19a6@cvt* (lambda (jk1a45@p* jk1a46@n jk1a47@ids) (if (null? jk1a45@p*) (values '() jk1a47@ids) (call-with-values (lambda () (jk19a6@cvt* (cdr jk1a45@p*) jk1a46@n jk1a47@ids)) (lambda (jk1a4f@jk1a4c jk1a50@jk1a4e) (let ((jk1a53@ids jk1a50@jk1a4e) (jk1a54@y jk1a4f@jk1a4c)) (call-with-values (lambda () (jk19a8@cvt (car jk1a45@p*) jk1a46@n jk1a53@ids)) (lambda (jk1a5b@jk1a58 jk1a5c@jk1a5a) (let ((jk1a5f@ids jk1a5c@jk1a5a) (jk1a60@x jk1a5b@jk1a58)) (values (cons jk1a60@x jk1a54@y) jk1a5f@ids)))))))))) (set! jk19a8@cvt (lambda (jk19a9@p jk19aa@n jk19ab@ids) (let ((jk19af@t jk19a9@p)) (let ((jk19b1@ls/false (jkd7e@syntax-dispatch jk19af@t 'any))) (if (and jk19b1@ls/false (apply (lambda (jk19b3@id) (jkb77@id? jk19b3@id)) jk19b1@ls/false)) (apply (lambda (jk19b5@id) (if (jkb83@bound-id-member? jk19a9@p jk19a2@keys) (values (vector 'free-id jk19a9@p) jk19ab@ids) (if (jkb7d@free-id=? jk19a9@p (jkd06@scheme-stx '_)) (values '_ jk19ab@ids) (values 'any (cons (cons jk19a9@p jk19aa@n) jk19ab@ids))))) jk19b1@ls/false) (let ((jk19b7@t jk19af@t)) (let ((jk19b9@ls/false (jkd7e@syntax-dispatch jk19b7@t '(any any)))) (if (and jk19b9@ls/false (apply (lambda (jk19bb@p jk19bc@dots) (jkd80@ellipsis? jk19bc@dots)) jk19b9@ls/false)) (apply (lambda (jk19bf@p jk19c0@dots) (call-with-values (lambda () (jk19a8@cvt jk19bf@p (+ jk19aa@n '1) jk19ab@ids)) (lambda (jk19c7@jk19c4 jk19c8@jk19c6) (let ((jk19cb@ids jk19c8@jk19c6) (jk19cc@p jk19c7@jk19c4)) (values (if (eq? jk19cc@p 'any) 'each-any (vector 'each jk19cc@p)) jk19cb@ids))))) jk19b9@ls/false) (let ((jk19cf@t jk19b7@t)) (let ((jk19d1@ls/false (jkd7e@syntax-dispatch jk19cf@t '(any any . #(each+ any () any))))) (if (and jk19d1@ls/false (apply (lambda (jk19d3@x jk19d4@dots jk19d5@ys jk19d6@z) (jkd80@ellipsis? jk19d4@dots)) jk19d1@ls/false)) (apply (lambda (jk19db@x jk19dc@dots jk19dd@ys jk19de@z) (call-with-values (lambda () (jk19a8@cvt jk19de@z jk19aa@n jk19ab@ids)) (lambda (jk19e7@jk19e4 jk19e8@jk19e6) (let ((jk19eb@ids jk19e8@jk19e6) (jk19ec@z jk19e7@jk19e4)) (call-with-values (lambda () (jk19a6@cvt* jk19dd@ys jk19aa@n jk19eb@ids)) (lambda (jk19f3@jk19f0 jk19f4@jk19f2) (let ((jk19f7@ids jk19f4@jk19f2) (jk19f8@ys jk19f3@jk19f0)) (call-with-values (lambda () (jk19a8@cvt jk19db@x (+ jk19aa@n '1) jk19f7@ids)) (lambda (jk19ff@jk19fc jk1a00@jk19fe) (let ((jk1a03@ids jk1a00@jk19fe) (jk1a04@x jk19ff@jk19fc)) (values (vector 'each+ jk1a04@x (reverse jk19f8@ys) jk19ec@z) jk1a03@ids))))))))))) jk19d1@ls/false) (let ((jk1a07@t jk19cf@t)) (let ((jk1a09@ls/false (jkd7e@syntax-dispatch jk1a07@t '(any . any)))) (if jk1a09@ls/false (apply (lambda (jk1a0b@x jk1a0c@y) (call-with-values (lambda () (jk19a8@cvt jk1a0c@y jk19aa@n jk19ab@ids)) (lambda (jk1a13@jk1a10 jk1a14@jk1a12) (let ((jk1a17@ids jk1a14@jk1a12) (jk1a18@y jk1a13@jk1a10)) (call-with-values (lambda () (jk19a8@cvt jk1a0b@x jk19aa@n jk1a17@ids)) (lambda (jk1a1f@jk1a1c jk1a20@jk1a1e) (let ((jk1a23@ids jk1a20@jk1a1e) (jk1a24@x jk1a1f@jk1a1c)) (values (cons jk1a24@x jk1a18@y) jk1a23@ids)))))))) jk1a09@ls/false) (let ((jk1a27@t jk1a07@t)) (let ((jk1a29@ls/false (jkd7e@syntax-dispatch jk1a27@t '()))) (if jk1a29@ls/false (apply (lambda () (values '() jk19ab@ids)) jk1a29@ls/false) (let ((jk1a2b@t jk1a27@t)) (let ((jk1a2d@ls/false (jkd7e@syntax-dispatch jk1a2b@t '#(vector each-any)))) (if (and jk1a2d@ls/false (apply (lambda (jk1a2f@p) (not (jkb43@stx? jk1a2f@p))) jk1a2d@ls/false)) (apply (lambda (jk1a31@p) (call-with-values (lambda () (jk19a8@cvt jk1a31@p jk19aa@n jk19ab@ids)) (lambda (jk1a37@jk1a34 jk1a38@jk1a36) (let ((jk1a3b@ids jk1a38@jk1a36) (jk1a3c@p jk1a37@jk1a34)) (values (vector 'vector jk1a3c@p) jk1a3b@ids))))) jk1a2d@ls/false) (let ((jk1a3f@t jk1a2b@t)) (let ((jk1a41@ls/false (jkd7e@syntax-dispatch jk1a3f@t 'any))) (if jk1a41@ls/false (apply (lambda (jk1a43@datum) (values (vector 'atom (jkb8b@stx->datum jk1a43@datum)) jk19ab@ids)) jk1a41@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1a3f@t)))))))))))))))))))))))) (jk19a8@cvt jk19a1@pattern '0 '()))))) (set! jk2853@jkd7c@convert-pattern jkd7c@convert-pattern) (set! jkd7e@syntax-dispatch (let ((jk1a64@stx^ '#f) (jk1a66@match-each '#f) (jk1a68@match-each+ '#f) (jk1a6a@match-each-any '#f) (jk1a6c@match-empty '#f) (jk1a6e@combine '#f) (jk1a70@match* '#f) (jk1a72@match '#f)) (begin (set! jk1a64@stx^ (lambda (jk1b3f@e jk1b40@m* jk1b41@s* jk1b42@ae*) (if (and (null? jk1b40@m*) (null? jk1b41@s*) (null? jk1b42@ae*)) jk1b3f@e (jkb5f@mkstx jk1b3f@e jk1b40@m* jk1b41@s* jk1b42@ae*)))) (set! jk1a66@match-each (lambda (jk1b1f@e jk1b20@p jk1b21@m* jk1b22@s* jk1b23@ae*) (if (pair? jk1b1f@e) (let ((jk1b29@first (jk1a72@match (car jk1b1f@e) jk1b20@p jk1b21@m* jk1b22@s* jk1b23@ae* '()))) (and jk1b29@first (let ((jk1b2b@rest (jk1a66@match-each (cdr jk1b1f@e) jk1b20@p jk1b21@m* jk1b22@s* jk1b23@ae*))) (and jk1b2b@rest (cons jk1b29@first jk1b2b@rest))))) (if (null? jk1b1f@e) '() (if (jkb43@stx? jk1b1f@e) (and (not (jkafd@top-marked? jk1b21@m*)) (call-with-values (lambda () (join-wraps jk1b21@m* jk1b22@s* jk1b23@ae* jk1b1f@e)) (lambda (jk1b33@jk1b2e jk1b34@jk1b30 jk1b35@jk1b32) (let ((jk1b39@ae* jk1b35@jk1b32) (jk1b3a@s* jk1b34@jk1b30) (jk1b3b@m* jk1b33@jk1b2e)) (jk1a66@match-each (jkb45@stx-expr jk1b1f@e) jk1b20@p jk1b3b@m* jk1b3a@s* jk1b39@ae*))))) (if (jk6b6@jk58a@annotation? jk1b1f@e) (jk1a66@match-each (jk6b8@jk58e@annotation-expression jk1b1f@e) jk1b20@p jk1b21@m* jk1b22@s* jk1b23@ae*) '#f)))))) (set! jk1a68@match-each+ (lambda (jk1adf@e jk1ae0@x-pat jk1ae1@y-pat jk1ae2@z-pat jk1ae3@m* jk1ae4@s* jk1ae5@ae* jk1ae6@r) (let jk1af7@f ((jk1aef@e jk1adf@e) (jk1af0@m* jk1ae3@m*) (jk1af1@s* jk1ae4@s*) (jk1af2@ae* jk1ae5@ae*)) (if (pair? jk1aef@e) (call-with-values (lambda () (jk1af7@f (cdr jk1aef@e) jk1af0@m* jk1af1@s* jk1af2@ae*)) (lambda (jk1aff@jk1afa jk1b00@jk1afc jk1b01@jk1afe) (let ((jk1b05@r jk1b01@jk1afe) (jk1b06@y-pat jk1b00@jk1afc) (jk1b07@xr* jk1aff@jk1afa)) (if jk1b05@r (if (null? jk1b06@y-pat) (let ((jk1b0b@xr (jk1a72@match (car jk1aef@e) jk1ae0@x-pat jk1af0@m* jk1af1@s* jk1af2@ae* '()))) (if jk1b0b@xr (values (cons jk1b0b@xr jk1b07@xr*) jk1b06@y-pat jk1b05@r) (values '#f '#f '#f))) (values '() (cdr jk1b06@y-pat) (jk1a72@match (car jk1aef@e) (car jk1b06@y-pat) jk1af0@m* jk1af1@s* jk1af2@ae* jk1b05@r))) (values '#f '#f '#f))))) (if (jkb43@stx? jk1aef@e) (if (jkafd@top-marked? jk1af0@m*) (values '() jk1ae1@y-pat (jk1a72@match jk1aef@e jk1ae2@z-pat jk1af0@m* jk1af1@s* jk1af2@ae* jk1ae6@r)) (call-with-values (lambda () (join-wraps jk1af0@m* jk1af1@s* jk1af2@ae* jk1aef@e)) (lambda (jk1b13@jk1b0e jk1b14@jk1b10 jk1b15@jk1b12) (let ((jk1b19@ae* jk1b15@jk1b12) (jk1b1a@s* jk1b14@jk1b10) (jk1b1b@m* jk1b13@jk1b0e)) (jk1af7@f (jkb45@stx-expr jk1aef@e) jk1b1b@m* jk1b1a@s* jk1b19@ae*))))) (if (jk6b6@jk58a@annotation? jk1aef@e) (jk1af7@f (jk6b8@jk58e@annotation-expression jk1aef@e) jk1af0@m* jk1af1@s* jk1af2@ae*) (values '() jk1ae1@y-pat (jk1a72@match jk1aef@e jk1ae2@z-pat jk1af0@m* jk1af1@s* jk1af2@ae* jk1ae6@r)))))))) (set! jk1a6a@match-each-any (lambda (jk1ac3@e jk1ac4@m* jk1ac5@s* jk1ac6@ae*) (if (pair? jk1ac3@e) (let ((jk1acb@l (jk1a6a@match-each-any (cdr jk1ac3@e) jk1ac4@m* jk1ac5@s* jk1ac6@ae*))) (and jk1acb@l (cons (jk1a64@stx^ (car jk1ac3@e) jk1ac4@m* jk1ac5@s* jk1ac6@ae*) jk1acb@l))) (if (null? jk1ac3@e) '() (if (jkb43@stx? jk1ac3@e) (and (not (jkafd@top-marked? jk1ac4@m*)) (call-with-values (lambda () (join-wraps jk1ac4@m* jk1ac5@s* jk1ac6@ae* jk1ac3@e)) (lambda (jk1ad3@jk1ace jk1ad4@jk1ad0 jk1ad5@jk1ad2) (let ((jk1ad9@ae* jk1ad5@jk1ad2) (jk1ada@s* jk1ad4@jk1ad0) (jk1adb@m* jk1ad3@jk1ace)) (jk1a6a@match-each-any (jkb45@stx-expr jk1ac3@e) jk1adb@m* jk1ada@s* jk1ad9@ae*))))) (if (jk6b6@jk58a@annotation? jk1ac3@e) (jk1a6a@match-each-any (jk6b8@jk58e@annotation-expression jk1ac3@e) jk1ac4@m* jk1ac5@s* jk1ac6@ae*) '#f)))))) (set! jk1a6c@match-empty (lambda (jk1abd@p jk1abe@r) (if (null? jk1abd@p) jk1abe@r (if (eq? jk1abd@p '_) jk1abe@r (if (eq? jk1abd@p 'any) (cons '() jk1abe@r) (if (pair? jk1abd@p) (jk1a6c@match-empty (car jk1abd@p) (jk1a6c@match-empty (cdr jk1abd@p) jk1abe@r)) (if (eq? jk1abd@p 'each-any) (cons '() jk1abe@r) (let ((jk1ac1@t (vector-ref jk1abd@p '0))) (if (memv jk1ac1@t '(each)) (jk1a6c@match-empty (vector-ref jk1abd@p '1) jk1abe@r) (if (memv jk1ac1@t '(each+)) (jk1a6c@match-empty (vector-ref jk1abd@p '1) (jk1a6c@match-empty (reverse (vector-ref jk1abd@p '2)) (jk1a6c@match-empty (vector-ref jk1abd@p '3) jk1abe@r))) (if (memv jk1ac1@t '(free-id atom)) jk1abe@r (if (memv jk1ac1@t '(scheme-id atom)) jk1abe@r (if (memv jk1ac1@t '(vector)) (jk1a6c@match-empty (vector-ref jk1abd@p '1) jk1abe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" jk1abd@p)))))))))))))) (set! jk1a6e@combine (lambda (jk1ab9@r* jk1aba@r) (if (null? (car jk1ab9@r*)) jk1aba@r (cons (map car jk1ab9@r*) (jk1a6e@combine (map cdr jk1ab9@r*) jk1aba@r))))) (set! jk1a70@match* (lambda (jk1a95@e jk1a96@p jk1a97@m* jk1a98@s* jk1a99@ae* jk1a9a@r) (if (null? jk1a96@p) (and (null? jk1a95@e) jk1a9a@r) (if (pair? jk1a96@p) (and (pair? jk1a95@e) (jk1a72@match (car jk1a95@e) (car jk1a96@p) jk1a97@m* jk1a98@s* jk1a99@ae* (jk1a72@match (cdr jk1a95@e) (cdr jk1a96@p) jk1a97@m* jk1a98@s* jk1a99@ae* jk1a9a@r))) (if (eq? jk1a96@p 'each-any) (let ((jk1aa1@l (jk1a6a@match-each-any jk1a95@e jk1a97@m* jk1a98@s* jk1a99@ae*))) (and jk1aa1@l (cons jk1aa1@l jk1a9a@r))) (let ((jk1aa3@t (vector-ref jk1a96@p '0))) (if (memv jk1aa3@t '(each)) (if (null? jk1a95@e) (jk1a6c@match-empty (vector-ref jk1a96@p '1) jk1a9a@r) (let ((jk1aa5@r* (jk1a66@match-each jk1a95@e (vector-ref jk1a96@p '1) jk1a97@m* jk1a98@s* jk1a99@ae*))) (and jk1aa5@r* (jk1a6e@combine jk1aa5@r* jk1a9a@r)))) (if (memv jk1aa3@t '(free-id)) (and (symbol? jk1a95@e) (jkafd@top-marked? jk1a97@m*) (jkb7d@free-id=? (jk1a64@stx^ jk1a95@e jk1a97@m* jk1a98@s* jk1a99@ae*) (vector-ref jk1a96@p '1)) jk1a9a@r) (if (memv jk1aa3@t '(scheme-id)) (and (symbol? jk1a95@e) (jkafd@top-marked? jk1a97@m*) (jkb7d@free-id=? (jk1a64@stx^ jk1a95@e jk1a97@m* jk1a98@s* jk1a99@ae*) (jkd06@scheme-stx (vector-ref jk1a96@p '1))) jk1a9a@r) (if (memv jk1aa3@t '(each+)) (call-with-values (lambda () (jk1a68@match-each+ jk1a95@e (vector-ref jk1a96@p '1) (vector-ref jk1a96@p '2) (vector-ref jk1a96@p '3) jk1a97@m* jk1a98@s* jk1a99@ae* jk1a9a@r)) (lambda (jk1aad@jk1aa8 jk1aae@jk1aaa jk1aaf@jk1aac) (let ((jk1ab3@r jk1aaf@jk1aac) (jk1ab4@y-pat jk1aae@jk1aaa) (jk1ab5@xr* jk1aad@jk1aa8)) (and jk1ab3@r (null? jk1ab4@y-pat) (if (null? jk1ab5@xr*) (jk1a6c@match-empty (vector-ref jk1a96@p '1) jk1ab3@r) (jk1a6e@combine jk1ab5@xr* jk1ab3@r)))))) (if (memv jk1aa3@t '(atom)) (and (fast-equal? (vector-ref jk1a96@p '1) (jkb89@strip jk1a95@e jk1a97@m*)) jk1a9a@r) (if (memv jk1aa3@t '(vector)) (and (vector? jk1a95@e) (jk1a72@match (vector->list jk1a95@e) (vector-ref jk1a96@p '1) jk1a97@m* jk1a98@s* jk1a99@ae* jk1a9a@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" jk1a96@p))))))))))))) (set! jk1a72@match (lambda (jk1a77@e jk1a78@p jk1a79@m* jk1a7a@s* jk1a7b@ae* jk1a7c@r) (if (not jk1a7c@r) '#f (if (eq? jk1a78@p '_) jk1a7c@r (if (eq? jk1a78@p 'any) (cons (jk1a64@stx^ jk1a77@e jk1a79@m* jk1a7a@s* jk1a7b@ae*) jk1a7c@r) (if (jkb43@stx? jk1a77@e) (and (not (jkafd@top-marked? jk1a79@m*)) (call-with-values (lambda () (join-wraps jk1a79@m* jk1a7a@s* jk1a7b@ae* jk1a77@e)) (lambda (jk1a89@jk1a84 jk1a8a@jk1a86 jk1a8b@jk1a88) (let ((jk1a8f@ae* jk1a8b@jk1a88) (jk1a90@s* jk1a8a@jk1a86) (jk1a91@m* jk1a89@jk1a84)) (jk1a72@match (jkb45@stx-expr jk1a77@e) jk1a78@p jk1a91@m* jk1a90@s* jk1a8f@ae* jk1a7c@r))))) (if (jk6b6@jk58a@annotation? jk1a77@e) (jk1a72@match (jk6b8@jk58e@annotation-expression jk1a77@e) jk1a78@p jk1a79@m* jk1a7a@s* jk1a7b@ae* jk1a7c@r) (jk1a70@match* jk1a77@e jk1a78@p jk1a79@m* jk1a7a@s* jk1a7b@ae* jk1a7c@r)))))))) (lambda (jk1a73@e jk1a74@p) (jk1a72@match jk1a73@e jk1a74@p '() '() '() '()))))) (set! jk2854@jkd7e@syntax-dispatch jkd7e@syntax-dispatch) (set! jkd80@ellipsis? (lambda (jk1b47@x) (and (jkb77@id? jk1b47@x) (jkb7d@free-id=? jk1b47@x (jkd06@scheme-stx '...))))) (set! jk2855@jkd80@ellipsis? jkd80@ellipsis?) (set! jkd82@underscore? (lambda (jk1b49@x) (and (jkb77@id? jk1b49@x) (jkb7d@free-id=? jk1b49@x (jkd06@scheme-stx '_))))) (set! jk2856@jkd82@underscore? jkd82@underscore?) (set! jkd84@verify-literals (lambda (jk1b4b@lits jk1b4c@expr) (for-each (lambda (jk1b4f@x) (if (or (not (jkb77@id? jk1b4f@x)) (jkd80@ellipsis? jk1b4f@x) (jkd82@underscore? jk1b4f@x)) (jke5e@syntax-violation '#f '"invalid literal" jk1b4c@expr jk1b4f@x) (void))) jk1b4b@lits))) (set! jk2857@jkd84@verify-literals jkd84@verify-literals) (set! jkd86@syntax-case-transformer (let ((jk1b52@build-dispatch-call '#f) (jk1b54@invalid-ids-error '#f) (jk1b56@gen-clause '#f) (jk1b58@gen-syntax-case '#f)) (begin (set! jk1b52@build-dispatch-call (lambda (jk1bc3@pvars jk1bc4@expr jk1bc5@y jk1bc6@r jk1bc7@mr) (let ((jk1bcd@ids (map car jk1bc3@pvars)) (jk1bce@levels (map cdr jk1bc3@pvars))) (let ((jk1bd1@labels (map jkb03@gen-label jk1bcd@ids)) (jk1bd2@new-vars (map jkaff@gen-lexical jk1bcd@ids))) (let ((jk1bd5@body (jkda0@chi-expr (jkb63@add-subst (jkb37@make-full-rib jk1bcd@ids jk1bd1@labels) jk1bc4@expr) (append (map (lambda (jk1bd7@label jk1bd8@var jk1bd9@level) (cons jk1bd7@label (jkb91@make-binding 'syntax (cons jk1bd8@var jk1bd9@level)))) jk1bd1@labels jk1bd2@new-vars (map cdr jk1bc3@pvars)) jk1bc6@r) jk1bc7@mr))) (list '(primitive apply) (jkada@jka06@build-lambda '#f jk1bd2@new-vars jk1bd5@body) jk1bc5@y)))))) (set! jk1b54@invalid-ids-error (lambda (jk1bb7@id* jk1bb8@e jk1bb9@class) (let jk1bc1@find ((jk1bbd@id* jk1bb7@id*) (jk1bbe@ok* '())) (if (null? jk1bbd@id*) (jke5e@syntax-violation '#f '"invalid syntax" jk1bb8@e) (if (jkb77@id? (car jk1bbd@id*)) (if (jkb83@bound-id-member? (car jk1bbd@id*) jk1bbe@ok*) (jke5a@syntax-error (car jk1bbd@id*) '"duplicate " jk1bb9@class) (jk1bc1@find (cdr jk1bbd@id*) (cons (car jk1bbd@id*) jk1bbe@ok*))) (jke5a@syntax-error (car jk1bbd@id*) '"invalid " jk1bb9@class)))))) (set! jk1b56@gen-clause (lambda (jk1b8f@x jk1b90@keys jk1b91@clauses jk1b92@r jk1b93@mr jk1b94@pat jk1b95@fender jk1b96@expr) (call-with-values (lambda () (jkd7c@convert-pattern jk1b94@pat jk1b90@keys)) (lambda (jk1ba3@jk1ba0 jk1ba4@jk1ba2) (let ((jk1ba7@pvars jk1ba4@jk1ba2) (jk1ba8@p jk1ba3@jk1ba0)) (if (not (jkb81@distinct-bound-ids? (map car jk1ba7@pvars))) (jk1b54@invalid-ids-error (map car jk1ba7@pvars) jk1b94@pat '"pattern variable") (if (not (for-all (lambda (jk1bab@x) (not (jkd80@ellipsis? (car jk1bab@x)))) jk1ba7@pvars)) (jke5e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" jk1b94@pat) (let ((jk1bad@y (jkaff@gen-lexical 'tmp))) (let ((jk1baf@test (if (eq? jk1b95@fender '#t) jk1bad@y (let ((jk1bb1@call (jk1b52@build-dispatch-call jk1ba7@pvars jk1b95@fender jk1bad@y jk1b92@r jk1b93@mr))) (list 'if jk1bad@y jk1bb1@call (list 'quote '#f)))))) (let ((jk1bb3@conseq (jk1b52@build-dispatch-call jk1ba7@pvars jk1b96@expr jk1bad@y jk1b92@r jk1b93@mr))) (let ((jk1bb5@altern (jk1b58@gen-syntax-case jk1b8f@x jk1b90@keys jk1b91@clauses jk1b92@r jk1b93@mr))) (list (jkada@jka06@build-lambda '#f (list jk1bad@y) (list 'if jk1baf@test jk1bb3@conseq jk1bb5@altern)) (list '(primitive syntax-dispatch) jk1b8f@x (list 'quote jk1ba8@p)))))))))))))) (set! jk1b58@gen-syntax-case (lambda (jk1b6d@x jk1b6e@keys jk1b6f@clauses jk1b70@r jk1b71@mr) (if (null? jk1b6f@clauses) (list '(primitive syntax-error) jk1b6d@x) (let ((jk1b77@t (car jk1b6f@clauses))) (let ((jk1b79@ls/false (jkd7e@syntax-dispatch jk1b77@t '(any any)))) (if jk1b79@ls/false (apply (lambda (jk1b7b@pat jk1b7c@expr) (if (and (jkb77@id? jk1b7b@pat) (not (jkb83@bound-id-member? jk1b7b@pat jk1b6e@keys)) (not (jkd80@ellipsis? jk1b7b@pat))) (if (jkb7d@free-id=? jk1b7b@pat (jkd06@scheme-stx '_)) (jkda0@chi-expr jk1b7c@expr jk1b70@r jk1b71@mr) (let ((jk1b7f@lab (jkb03@gen-label jk1b7b@pat)) (jk1b80@lex (jkaff@gen-lexical jk1b7b@pat))) (let ((jk1b83@body (jkda0@chi-expr (jkb63@add-subst (jkb37@make-full-rib (list jk1b7b@pat) (list jk1b7f@lab)) jk1b7c@expr) (cons (cons jk1b7f@lab (jkb91@make-binding 'syntax (cons jk1b80@lex '0))) jk1b70@r) jk1b71@mr))) (list (jkada@jka06@build-lambda '#f (list jk1b80@lex) jk1b83@body) jk1b6d@x)))) (jk1b56@gen-clause jk1b6d@x jk1b6e@keys (cdr jk1b6f@clauses) jk1b70@r jk1b71@mr jk1b7b@pat '#t jk1b7c@expr))) jk1b79@ls/false) (let ((jk1b85@t jk1b77@t)) (let ((jk1b87@ls/false (jkd7e@syntax-dispatch jk1b85@t '(any any any)))) (if jk1b87@ls/false (apply (lambda (jk1b89@pat jk1b8a@fender jk1b8b@expr) (jk1b56@gen-clause jk1b6d@x jk1b6e@keys (cdr jk1b6f@clauses) jk1b70@r jk1b71@mr jk1b89@pat jk1b8a@fender jk1b8b@expr)) jk1b87@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1b85@t)))))))))) (lambda (jk1b59@e jk1b5a@r jk1b5b@mr) (let ((jk1b5f@t jk1b59@e)) (let ((jk1b61@ls/false (jkd7e@syntax-dispatch jk1b5f@t '(_ any each-any . each-any)))) (if jk1b61@ls/false (apply (lambda (jk1b63@expr jk1b64@keys jk1b65@clauses) (begin (jkd84@verify-literals jk1b64@keys jk1b59@e) (let ((jk1b69@x (jkaff@gen-lexical 'tmp))) (let ((jk1b6b@body (jk1b58@gen-syntax-case jk1b69@x jk1b64@keys jk1b65@clauses jk1b5a@r jk1b5b@mr))) (list (jkada@jka06@build-lambda '#f (list jk1b69@x) jk1b6b@body) (jkda0@chi-expr jk1b63@expr jk1b5a@r jk1b5b@mr)))))) jk1b61@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1b5f@t)))))))) (set! jk2858@jkd86@syntax-case-transformer jkd86@syntax-case-transformer) (set! jkd88@ellipsis-map (lambda (jk1bdd@proc jk1bde@ls . jk1be1@ls*) (let ((jk1be4@who '#f)) (begin (set! jk1be4@who '...) (begin (if (not (list? jk1bde@ls)) (assertion-violation jk1be4@who '"not a list" jk1bde@ls) (void)) (if (not (null? jk1be1@ls*)) (let ((jk1be5@n (length jk1bde@ls))) (for-each (lambda (jk1be7@x) (begin (if (not (list? jk1be7@x)) (assertion-violation jk1be4@who '"not a list" jk1be7@x) (void)) (if (not (= (length jk1be7@x) jk1be5@n)) (assertion-violation jk1be4@who '"length mismatch" jk1bde@ls jk1be7@x) (void)))) jk1be1@ls*)) (void)) (apply map jk1bdd@proc jk1bde@ls jk1be1@ls*)))))) (set! jk2859@jkd88@ellipsis-map jkd88@ellipsis-map) (set! jkd8a@syntax-transformer (let ((jk1bea@gen-syntax '#f) (jk1bec@gen-ref '#f) (jk1bee@gen-append '#f) (jk1bf0@gen-mappend '#f) (jk1bf2@gen-map '#f) (jk1bf4@gen-cons '#f) (jk1bf6@gen-vector '#f) (jk1bf8@regen '#f)) (begin (set! jk1bea@gen-syntax (lambda (jk1c61@src jk1c62@e jk1c63@r jk1c64@maps jk1c65@ellipsis? jk1c66@vec?) (let ((jk1c6d@t jk1c62@e)) (let ((jk1c6f@ls/false (jkd7e@syntax-dispatch jk1c6d@t 'any))) (if (and jk1c6f@ls/false (apply (lambda (jk1c71@dots) (jk1c65@ellipsis? jk1c71@dots)) jk1c6f@ls/false)) (apply (lambda (jk1c73@dots) (jke5e@syntax-violation '#f '"misplaced ellipsis in syntax form" jk1c61@src)) jk1c6f@ls/false) (let ((jk1c75@t jk1c6d@t)) (let ((jk1c77@ls/false (jkd7e@syntax-dispatch jk1c75@t 'any))) (if (and jk1c77@ls/false (apply (lambda (jk1c79@id) (jkb77@id? jk1c79@id)) jk1c77@ls/false)) (apply (lambda (jk1c7b@id) (let ((jk1c7d@label (jkb8d@id->label jk1c62@e))) (let ((jk1c7f@b (jkb8f@label->binding jk1c7d@label jk1c63@r))) (if (eq? (jkb93@binding-type jk1c7f@b) 'syntax) (call-with-values (lambda () (let ((jk1c85@var.lev (jkb95@binding-value jk1c7f@b))) (jk1bec@gen-ref jk1c61@src (car jk1c85@var.lev) (cdr jk1c85@var.lev) jk1c64@maps))) (lambda (jk1c87@jk1c82 jk1c88@jk1c84) (let ((jk1c8b@maps jk1c88@jk1c84) (jk1c8c@var jk1c87@jk1c82)) (values (list 'ref jk1c8c@var) jk1c8b@maps)))) (values (list 'quote jk1c62@e) jk1c64@maps))))) jk1c77@ls/false) (let ((jk1c8f@t jk1c75@t)) (let ((jk1c91@ls/false (jkd7e@syntax-dispatch jk1c8f@t '(any any)))) (if (and jk1c91@ls/false (apply (lambda (jk1c93@dots jk1c94@e) (jk1c65@ellipsis? jk1c93@dots)) jk1c91@ls/false)) (apply (lambda (jk1c97@dots jk1c98@e) (if jk1c66@vec? (jke5e@syntax-violation '#f '"misplaced ellipsis in syntax form" jk1c61@src) (jk1bea@gen-syntax jk1c61@src jk1c98@e jk1c63@r jk1c64@maps (lambda (jk1c9b@x) '#f) '#f))) jk1c91@ls/false) (let ((jk1c9d@t jk1c8f@t)) (let ((jk1c9f@ls/false (jkd7e@syntax-dispatch jk1c9d@t '(any any . any)))) (if (and jk1c9f@ls/false (apply (lambda (jk1ca1@x jk1ca2@dots jk1ca3@y) (jk1c65@ellipsis? jk1ca2@dots)) jk1c9f@ls/false)) (apply (lambda (jk1ca7@x jk1ca8@dots jk1ca9@y) (let jk1cbf@f ((jk1cad@y jk1ca9@y) (jk1cae@k (lambda (jk1cb1@maps) (call-with-values (lambda () (jk1bea@gen-syntax jk1c61@src jk1ca7@x jk1c63@r (cons '() jk1cb1@maps) jk1c65@ellipsis? '#f)) (lambda (jk1cb7@jk1cb4 jk1cb8@jk1cb6) (let ((jk1cbb@maps jk1cb8@jk1cb6) (jk1cbc@x jk1cb7@jk1cb4)) (if (null? (car jk1cbb@maps)) (jke5e@syntax-violation '#f '"extra ellipsis in syntax form" jk1c61@src) (values (jk1bf2@gen-map jk1cbc@x (car jk1cbb@maps)) (cdr jk1cbb@maps))))))))) (let ((jk1cc1@t jk1cad@y)) (let ((jk1cc3@ls/false (jkd7e@syntax-dispatch jk1cc1@t '()))) (if jk1cc3@ls/false (apply (lambda () (jk1cae@k jk1c64@maps)) jk1cc3@ls/false) (let ((jk1cc5@t jk1cc1@t)) (let ((jk1cc7@ls/false (jkd7e@syntax-dispatch jk1cc5@t '(any . any)))) (if (and jk1cc7@ls/false (apply (lambda (jk1cc9@dots jk1cca@y) (jk1c65@ellipsis? jk1cc9@dots)) jk1cc7@ls/false)) (apply (lambda (jk1ccd@dots jk1cce@y) (jk1cbf@f jk1cce@y (lambda (jk1cd1@maps) (call-with-values (lambda () (jk1cae@k (cons '() jk1cd1@maps))) (lambda (jk1cd7@jk1cd4 jk1cd8@jk1cd6) (let ((jk1cdb@maps jk1cd8@jk1cd6) (jk1cdc@x jk1cd7@jk1cd4)) (if (null? (car jk1cdb@maps)) (jke5e@syntax-violation '#f '"extra ellipsis in syntax form" jk1c61@src) (values (jk1bf0@gen-mappend jk1cdc@x (car jk1cdb@maps)) (cdr jk1cdb@maps))))))))) jk1cc7@ls/false) (let ((jk1cdf@t jk1cc5@t)) (let ((jk1ce1@ls/false (jkd7e@syntax-dispatch jk1cdf@t '_))) (if jk1ce1@ls/false (apply (lambda () (call-with-values (lambda () (jk1bea@gen-syntax jk1c61@src jk1cad@y jk1c63@r jk1c64@maps jk1c65@ellipsis? jk1c66@vec?)) (lambda (jk1ce7@jk1ce4 jk1ce8@jk1ce6) (let ((jk1ceb@maps jk1ce8@jk1ce6) (jk1cec@y jk1ce7@jk1ce4)) (call-with-values (lambda () (jk1cae@k jk1ceb@maps)) (lambda (jk1cf3@jk1cf0 jk1cf4@jk1cf2) (let ((jk1cf7@maps jk1cf4@jk1cf2) (jk1cf8@x jk1cf3@jk1cf0)) (values (jk1bee@gen-append jk1cf8@x jk1cec@y) jk1cf7@maps)))))))) jk1ce1@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1cdf@t)))))))))))) jk1c9f@ls/false) (let ((jk1cfb@t jk1c9d@t)) (let ((jk1cfd@ls/false (jkd7e@syntax-dispatch jk1cfb@t '(any . any)))) (if jk1cfd@ls/false (apply (lambda (jk1cff@x jk1d00@y) (call-with-values (lambda () (jk1bea@gen-syntax jk1c61@src jk1cff@x jk1c63@r jk1c64@maps jk1c65@ellipsis? '#f)) (lambda (jk1d07@jk1d04 jk1d08@jk1d06) (let ((jk1d0b@maps jk1d08@jk1d06) (jk1d0c@xnew jk1d07@jk1d04)) (call-with-values (lambda () (jk1bea@gen-syntax jk1c61@src jk1d00@y jk1c63@r jk1d0b@maps jk1c65@ellipsis? jk1c66@vec?)) (lambda (jk1d13@jk1d10 jk1d14@jk1d12) (let ((jk1d17@maps jk1d14@jk1d12) (jk1d18@ynew jk1d13@jk1d10)) (values (jk1bf4@gen-cons jk1c62@e jk1cff@x jk1d00@y jk1d0c@xnew jk1d18@ynew) jk1d17@maps)))))))) jk1cfd@ls/false) (let ((jk1d1b@t jk1cfb@t)) (let ((jk1d1d@ls/false (jkd7e@syntax-dispatch jk1d1b@t '#(vector each-any)))) (if jk1d1d@ls/false (apply (lambda (jk1d1f@ls) (call-with-values (lambda () (jk1bea@gen-syntax jk1c61@src jk1d1f@ls jk1c63@r jk1c64@maps jk1c65@ellipsis? '#t)) (lambda (jk1d25@jk1d22 jk1d26@jk1d24) (let ((jk1d29@maps jk1d26@jk1d24) (jk1d2a@lsnew jk1d25@jk1d22)) (values (jk1bf6@gen-vector jk1c62@e jk1d1f@ls jk1d2a@lsnew) jk1d29@maps))))) jk1d1d@ls/false) (let ((jk1d2d@t jk1d1b@t)) (let ((jk1d2f@ls/false (jkd7e@syntax-dispatch jk1d2d@t '_))) (if jk1d2f@ls/false (apply (lambda () (values (list 'quote jk1c62@e) jk1c64@maps)) jk1d2f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1d2d@t)))))))))))))))))))))))) (set! jk1bec@gen-ref (lambda (jk1c47@src jk1c48@var jk1c49@level jk1c4a@maps) (if (= jk1c49@level '0) (values jk1c48@var jk1c4a@maps) (if (null? jk1c4a@maps) (jke5e@syntax-violation '#f '"missing ellipsis in syntax form" jk1c47@src) (call-with-values (lambda () (jk1bec@gen-ref jk1c47@src jk1c48@var (- jk1c49@level '1) (cdr jk1c4a@maps))) (lambda (jk1c53@jk1c50 jk1c54@jk1c52) (let ((jk1c57@outer-maps jk1c54@jk1c52) (jk1c58@outer-var jk1c53@jk1c50)) (let ((jk1c5b@t (assq jk1c58@outer-var (car jk1c4a@maps)))) (if jk1c5b@t ((lambda (jk1c5d@b) (values (cdr jk1c5d@b) jk1c4a@maps)) jk1c5b@t) (let ((jk1c5f@inner-var (jkaff@gen-lexical 'tmp))) (values jk1c5f@inner-var (cons (cons (cons jk1c58@outer-var jk1c5f@inner-var) (car jk1c4a@maps)) jk1c57@outer-maps)))))))))))) (set! jk1bee@gen-append (lambda (jk1c43@x jk1c44@y) (if (fast-equal? jk1c44@y ''()) jk1c43@x (list 'append jk1c43@x jk1c44@y)))) (set! jk1bf0@gen-mappend (lambda (jk1c3f@e jk1c40@map-env) (list 'apply '(primitive append) (jk1bf2@gen-map jk1c3f@e jk1c40@map-env)))) (set! jk1bf2@gen-map (lambda (jk1c2d@e jk1c2e@map-env) (let ((jk1c31@formals (map cdr jk1c2e@map-env)) (jk1c32@actuals (map (lambda (jk1c35@x) (list 'ref (car jk1c35@x))) jk1c2e@map-env))) (if (eq? (car jk1c2d@e) 'ref) (car jk1c32@actuals) (if (for-all (lambda (jk1c37@x) (and (eq? (car jk1c37@x) 'ref) (memq (cadr jk1c37@x) jk1c31@formals))) (cdr jk1c2d@e)) (let ((jk1c39@args (map (let ((jk1c3b@r (map cons jk1c31@formals jk1c32@actuals))) (lambda (jk1c3d@x) (cdr (assq (cadr jk1c3d@x) jk1c3b@r)))) (cdr jk1c2d@e)))) (cons 'map (cons (list 'primitive (car jk1c2d@e)) jk1c39@args))) (cons* 'map (list 'lambda jk1c31@formals jk1c2d@e) jk1c32@actuals)))))) (set! jk1bf4@gen-cons (lambda (jk1c1d@e jk1c1e@x jk1c1f@y jk1c20@xnew jk1c21@ynew) (let ((jk1c27@t (car jk1c21@ynew))) (if (memv jk1c27@t '(quote)) (if (eq? (car jk1c20@xnew) 'quote) (let ((jk1c29@xnew (cadr jk1c20@xnew)) (jk1c2a@ynew (cadr jk1c21@ynew))) (if (and (eq? jk1c29@xnew jk1c1e@x) (eq? jk1c2a@ynew jk1c1f@y)) (list 'quote jk1c1d@e) (list 'quote (cons jk1c29@xnew jk1c2a@ynew)))) (if (null? (cadr jk1c21@ynew)) (list 'list jk1c20@xnew) (list 'cons jk1c20@xnew jk1c21@ynew))) (if (memv jk1c27@t '(list)) (cons 'list (cons jk1c20@xnew (cdr jk1c21@ynew))) (list 'cons jk1c20@xnew jk1c21@ynew)))))) (set! jk1bf6@gen-vector (lambda (jk1c17@e jk1c18@ls jk1c19@lsnew) (if (eq? (car jk1c19@lsnew) 'quote) (if (eq? (cadr jk1c19@lsnew) jk1c18@ls) (list 'quote jk1c17@e) (list 'quote (list->vector (cadr jk1c19@lsnew)))) (if (eq? (car jk1c19@lsnew) 'list) (cons 'vector (cdr jk1c19@lsnew)) (list 'list->vector jk1c19@lsnew))))) (set! jk1bf8@regen (lambda (jk1c11@x) (let ((jk1c13@t (car jk1c11@x))) (if (memv jk1c13@t '(ref)) (cadr jk1c11@x) (if (memv jk1c13@t '(primitive)) (list 'primitive (cadr jk1c11@x)) (if (memv jk1c13@t '(quote)) (list 'quote (cadr jk1c11@x)) (if (memv jk1c13@t '(lambda)) (jkada@jka06@build-lambda '#f (cadr jk1c11@x) (jk1bf8@regen (caddr jk1c11@x))) (if (memv jk1c13@t '(map)) (let ((jk1c15@ls (map jk1bf8@regen (cdr jk1c11@x)))) (cons '(primitive ellipsis-map) jk1c15@ls)) (cons (list 'primitive (car jk1c11@x)) (map jk1bf8@regen (cdr jk1c11@x))))))))))) (lambda (jk1bf9@e jk1bfa@r jk1bfb@mr) (let ((jk1bff@t jk1bf9@e)) (let ((jk1c01@ls/false (jkd7e@syntax-dispatch jk1bff@t '(_ any)))) (if jk1c01@ls/false (apply (lambda (jk1c03@x) (call-with-values (lambda () (jk1bea@gen-syntax jk1bf9@e jk1c03@x jk1bfa@r '() jkd80@ellipsis? '#f)) (lambda (jk1c09@jk1c06 jk1c0a@jk1c08) (let ((jk1c0d@maps jk1c0a@jk1c08) (jk1c0e@e jk1c09@jk1c06)) (jk1bf8@regen jk1c0e@e))))) jk1c01@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1bff@t)))))))) (set! jk285a@jkd8a@syntax-transformer jkd8a@syntax-transformer) (set! jkd8c@core-macro-transformer (lambda (jk1d31@name) (let ((jk1d33@t jk1d31@name)) (if (memv jk1d33@t '(quote)) jkd2e@quote-transformer (if (memv jk1d33@t '(lambda)) jkd32@lambda-transformer (if (memv jk1d33@t '(case-lambda)) jkd30@case-lambda-transformer (if (memv jk1d33@t '(letrec)) jkd16@letrec-transformer (if (memv jk1d33@t '(letrec*)) jkd18@letrec*-transformer (if (memv jk1d33@t '(let)) jkd14@let-transformer (if (memv jk1d33@t '(if)) jkd26@if-transformer (if (memv jk1d33@t '(and)) jkd28@and-transformer (if (memv jk1d33@t '(or)) jkd2a@or-transformer (if (memv jk1d33@t '(foreign-call)) jkd7a@foreign-call-transformer (if (memv jk1d33@t '(syntax-case)) jkd86@syntax-case-transformer (if (memv jk1d33@t '(syntax)) jkd8a@syntax-transformer (if (memv jk1d33@t '(type-descriptor)) jkd1c@type-descriptor-transformer (if (memv jk1d33@t '(record-type-descriptor)) jkd1e@record-type-descriptor-transformer (if (memv jk1d33@t '(record-constructor-descriptor)) jkd20@record-constructor-descriptor-transformer (if (memv jk1d33@t '(fluid-let-syntax)) jkd1a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" jk1d31@name)))))))))))))))))))) (set! jk285b@jkd8c@core-macro-transformer jkd8c@core-macro-transformer) (set! jkd8e@symbol-macro (lambda (jk1d35@x jk1d36@set) (let ((jk1d39@t jk1d35@x)) (let ((jk1d3b@ls/false (jkd7e@syntax-dispatch jk1d39@t '(_ any)))) (if (and jk1d3b@ls/false (apply (lambda (jk1d3d@name) (and (jkb77@id? jk1d3d@name) (memq (jkb79@id->sym jk1d3d@name) jk1d36@set))) jk1d3b@ls/false)) (apply (lambda (jk1d3f@name) (jkd34@bless (list 'quote jk1d3f@name))) jk1d3b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1d39@t)))))) (set! jk285c@jkd8e@symbol-macro jkd8e@symbol-macro) (set! jkd90@macro-transformer (lambda (jk1d41@x) (if (procedure? jk1d41@x) jk1d41@x (if (symbol? jk1d41@x) (let ((jk1d43@t jk1d41@x)) (if (memv jk1d43@t '(define-record-type)) jkd72@define-record-type-macro (if (memv jk1d43@t '(define-struct)) jkd70@define-struct-macro (if (memv jk1d43@t '(include)) jkd66@include-macro (if (memv jk1d43@t '(cond)) jkd62@cond-macro (if (memv jk1d43@t '(let)) jkd3a@let-macro (if (memv jk1d43@t '(do)) jkd5a@do-macro (if (memv jk1d43@t '(or)) jkd5e@or-macro (if (memv jk1d43@t '(and)) jkd60@and-macro (if (memv jk1d43@t '(let*)) jkd5c@let*-macro (if (memv jk1d43@t '(let-values)) jkd3c@let-values-macro (if (memv jk1d43@t '(let*-values)) jkd3e@let*-values-macro (if (memv jk1d43@t '(syntax-rules)) jkd6a@syntax-rules-macro (if (memv jk1d43@t '(quasiquote)) jkd6c@quasiquote-macro (if (memv jk1d43@t '(quasisyntax)) jkd6e@quasisyntax-macro (if (memv jk1d43@t '(with-syntax)) jkd36@with-syntax-macro (if (memv jk1d43@t '(when)) jkd22@when-macro (if (memv jk1d43@t '(unless)) jkd24@unless-macro (if (memv jk1d43@t '(case)) jkd2c@case-macro (if (memv jk1d43@t '(identifier-syntax)) jkd58@identifier-syntax-macro (if (memv jk1d43@t '(time)) jkd50@time-macro (if (memv jk1d43@t '(delay)) jkd52@delay-macro (if (memv jk1d43@t '(assert)) jkd54@assert-macro (if (memv jk1d43@t '(endianness)) jkd56@endianness-macro (if (memv jk1d43@t '(guard)) jkd4c@guard-macro (if (memv jk1d43@t '(define-enumeration)) jkd4e@define-enumeration-macro (if (memv jk1d43@t '(trace-lambda)) jkd40@trace-lambda-macro (if (memv jk1d43@t '(trace-define)) jkd42@trace-define-macro (if (memv jk1d43@t '(trace-define-syntax)) jkd44@trace-define-syntax-macro (if (memv jk1d43@t '(trace-let-syntax)) jkd48@trace-let-syntax-macro (if (memv jk1d43@t '(trace-letrec-syntax)) jkd4a@trace-letrec-syntax-macro (if (memv jk1d43@t '(define-condition-type)) jkd74@define-condition-type-macro (if (memv jk1d43@t '(parameterize)) jkd78@parameterize-macro (if (memv jk1d43@t '(include-into)) jkd68@include-into-macro (if (memv jk1d43@t '(eol-style)) (lambda (jk1d45@x) (jkd8e@symbol-macro jk1d45@x '(none lf cr crlf nel crnel ls))) (if (memv jk1d43@t '(error-handling-mode)) (lambda (jk1d47@x) (jkd8e@symbol-macro jk1d47@x '(ignore raise replace))) (if (memv jk1d43@t '(buffer-mode)) (lambda (jk1d49@x) (jkd8e@symbol-macro jk1d49@x '(none line block))) (if (memv jk1d43@t '(file-options)) jkaf2@file-options-macro (if (memv jk1d43@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jkd76@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" jk1d41@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" jk1d41@x))))) (set! jk285d@jkd90@macro-transformer jkd90@macro-transformer) (set! jkd92@local-macro-transformer (lambda (jk1d4b@x) (car jk1d4b@x))) (set! jk285e@jkd92@local-macro-transformer jkd92@local-macro-transformer) (set! jkd94@do-macro-call (lambda (jk1d4d@transformer jk1d4e@expr) (let ((jk1d51@out (jk1d4d@transformer (jkb61@add-mark jkb5b@anti-mark jk1d4e@expr '#f)))) (begin (let jk1d55@f ((jk1d53@x jk1d51@out)) (if (not (jkb43@stx? jk1d53@x)) (if (pair? jk1d53@x) (begin (jk1d55@f (car jk1d53@x)) (jk1d55@f (cdr jk1d53@x))) (if (vector? jk1d53@x) (vector-for-each jk1d55@f jk1d53@x) (if (symbol? jk1d53@x) (jke5e@syntax-violation '#f '"raw symbol encountered in output of macro" jk1d4e@expr jk1d53@x) (void)))) (void))) (jkb61@add-mark (jkb59@gen-mark) jk1d51@out jk1d4e@expr))))) (set! jk285f@jkd94@do-macro-call jkd94@do-macro-call) (set! jkd96@chi-macro (lambda (jk1d57@p jk1d58@e) (jkd94@do-macro-call (jkd90@macro-transformer jk1d57@p) jk1d58@e))) (set! jk2860@jkd96@chi-macro jkd96@chi-macro) (set! jkd98@chi-local-macro (lambda (jk1d5b@p jk1d5c@e) (jkd94@do-macro-call (jkd92@local-macro-transformer jk1d5b@p) jk1d5c@e))) (set! jk2861@jkd98@chi-local-macro jkd98@chi-local-macro) (set! jkd9a@chi-global-macro (lambda (jk1d5f@p jk1d60@e) (let ((jk1d63@lib (car jk1d5f@p)) (jk1d64@loc (cdr jk1d5f@p))) (begin (jk98e@jk7dd@visit-library jk1d63@lib) (let ((jk1d67@x (symbol-value jk1d64@loc))) (let ((jk1d69@transformer (if (procedure? jk1d67@x) jk1d67@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" jk1d67@x)))) (jkd94@do-macro-call jk1d69@transformer jk1d60@e))))))) (set! jk2862@jkd9a@chi-global-macro jkd9a@chi-global-macro) (set! jkd9c@chi-expr* (lambda (jk1d6b@e* jk1d6c@r jk1d6d@mr) (if (null? jk1d6b@e*) '() (let ((jk1d71@e (jkda0@chi-expr (car jk1d6b@e*) jk1d6c@r jk1d6d@mr))) (cons jk1d71@e (jkd9c@chi-expr* (cdr jk1d6b@e*) jk1d6c@r jk1d6d@mr)))))) (set! jk2863@jkd9c@chi-expr* jkd9c@chi-expr*) (set! jkd9e@chi-application (lambda (jk1d73@e jk1d74@r jk1d75@mr) (let ((jk1d79@t jk1d73@e)) (let ((jk1d7b@ls/false (jkd7e@syntax-dispatch jk1d79@t '(any . each-any)))) (if jk1d7b@ls/false (apply (lambda (jk1d7d@rator jk1d7e@rands) (let ((jk1d81@rator (jkda0@chi-expr jk1d7d@rator jk1d74@r jk1d75@mr))) (cons jk1d81@rator (jkd9c@chi-expr* jk1d7e@rands jk1d74@r jk1d75@mr)))) jk1d7b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1d79@t)))))) (set! jk2864@jkd9e@chi-application jkd9e@chi-application) (set! jkda0@chi-expr (lambda (jk1d83@e jk1d84@r jk1d85@mr) (call-with-values (lambda () (jkb99@syntax-type jk1d83@e jk1d84@r)) (lambda (jk1d8f@jk1d8a jk1d90@jk1d8c jk1d91@jk1d8e) (let ((jk1d95@kwd jk1d91@jk1d8e) (jk1d96@value jk1d90@jk1d8c) (jk1d97@type jk1d8f@jk1d8a)) (let ((jk1d9b@t jk1d97@type)) (if (memv jk1d9b@t '(core-macro)) (let ((jk1d9d@transformer (jkd8c@core-macro-transformer jk1d96@value))) (jk1d9d@transformer jk1d83@e jk1d84@r jk1d85@mr)) (if (memv jk1d9b@t '(global)) (let ((jk1d9f@lib (car jk1d96@value))) (let ((jk1da1@loc (cdr jk1d96@value))) (begin ((jkde6@inv-collector) jk1d9f@lib) jk1da1@loc))) (if (memv jk1d9b@t '(core-prim)) (let ((jk1da3@name jk1d96@value)) (list 'primitive jk1da3@name)) (if (memv jk1d9b@t '(call)) (jkd9e@chi-application jk1d83@e jk1d84@r jk1d85@mr) (if (memv jk1d9b@t '(lexical)) (let ((jk1da5@lex (jkd08@lexical-var jk1d96@value))) jk1da5@lex) (if (memv jk1d9b@t '(global-macro global-macro!)) (jkda0@chi-expr (jkd9a@chi-global-macro jk1d96@value jk1d83@e) jk1d84@r jk1d85@mr) (if (memv jk1d9b@t '(local-macro local-macro!)) (jkda0@chi-expr (jkd98@chi-local-macro jk1d96@value jk1d83@e) jk1d84@r jk1d85@mr) (if (memv jk1d9b@t '(macro macro!)) (jkda0@chi-expr (jkd96@chi-macro jk1d96@value jk1d83@e) jk1d84@r jk1d85@mr) (if (memv jk1d9b@t '(constant)) (let ((jk1da7@datum jk1d96@value)) (list 'quote jk1da7@datum)) (if (memv jk1d9b@t '(set!)) (jkda2@chi-set! jk1d83@e jk1d84@r jk1d85@mr) (if (memv jk1d9b@t '(begin)) (let ((jk1da9@t jk1d83@e)) (let ((jk1dab@ls/false (jkd7e@syntax-dispatch jk1da9@t '(_ any . each-any)))) (if jk1dab@ls/false (apply (lambda (jk1dad@x jk1dae@x*) (jkadc@jka36@build-sequence '#f (jkd9c@chi-expr* (cons jk1dad@x jk1dae@x*) jk1d84@r jk1d85@mr))) jk1dab@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1da9@t)))) (if (memv jk1d9b@t '(let-syntax letrec-syntax)) (let ((jk1db1@t jk1d83@e)) (let ((jk1db3@ls/false (jkd7e@syntax-dispatch jk1db1@t '(_ #(each (any any)) any . each-any)))) (if (and jk1db3@ls/false (apply (lambda (jk1db5@xlhs* jk1db6@xrhs* jk1db7@xbody jk1db8@xbody*) (if (not (jkb7f@valid-bound-ids? jk1db5@xlhs*)) (jke5e@syntax-violation '#f '"invalid identifiers" jk1d83@e) (void))) jk1db3@ls/false)) (apply (lambda (jk1dbd@xlhs* jk1dbe@xrhs* jk1dbf@xbody jk1dc0@xbody*) (let ((jk1dc5@xlab* (map jkb03@gen-label jk1dbd@xlhs*))) (let ((jk1dc7@xrib (jkb37@make-full-rib jk1dbd@xlhs* jk1dc5@xlab*))) (let ((jk1dc9@xb* (map (lambda (jk1dcb@x) (jkbaf@make-eval-transformer (jkdd8@expand-transformer (if (eq? jk1d97@type 'let-syntax) jk1dcb@x (jkb63@add-subst jk1dc7@xrib jk1dcb@x)) jk1d85@mr))) jk1dbe@xrhs*))) (jkadc@jka36@build-sequence '#f (jkd9c@chi-expr* (map (lambda (jk1dcd@x) (jkb63@add-subst jk1dc7@xrib jk1dcd@x)) (cons jk1dbf@xbody jk1dc0@xbody*)) (append (map cons jk1dc5@xlab* jk1dc9@xb*) jk1d84@r) (append (map cons jk1dc5@xlab* jk1dc9@xb*) jk1d85@mr))))))) jk1db3@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1db1@t)))) (if (memv jk1d9b@t '(displaced-lexical)) (jke5e@syntax-violation '#f '"identifier out of context" jk1d83@e) (if (memv jk1d9b@t '(syntax)) (jke5e@syntax-violation '#f '"reference to pattern variable outside a syntax form" jk1d83@e) (if (memv jk1d9b@t '(define define-syntax module import library)) (jke5e@syntax-violation '#f (string-append (let ((jk1dcf@t jk1d97@type)) (if (memv jk1dcf@t '(define)) '"a definition" (if (memv jk1dcf@t '(define-syntax)) '"a define-syntax" (if (memv jk1dcf@t '(module)) '"a module definition" (if (memv jk1dcf@t '(library)) '"a library definition" (if (memv jk1dcf@t '(import)) '"an import declaration" (if (memv jk1dcf@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") jk1d83@e) (if (memv jk1d9b@t '(mutable)) (jke5e@syntax-violation '#f '"attempt to reference an unexportable variable" jk1d83@e) (jke5e@syntax-violation '#f '"invalid expression" jk1d83@e))))))))))))))))))))))) (set! jk2865@jkda0@chi-expr jkda0@chi-expr) (set! jkda2@chi-set! (lambda (jk1dd1@e jk1dd2@r jk1dd3@mr) (let ((jk1dd7@t jk1dd1@e)) (let ((jk1dd9@ls/false (jkd7e@syntax-dispatch jk1dd7@t '(_ any any)))) (if (and jk1dd9@ls/false (apply (lambda (jk1ddb@x jk1ddc@v) (jkb77@id? jk1ddb@x)) jk1dd9@ls/false)) (apply (lambda (jk1ddf@x jk1de0@v) (call-with-values (lambda () (jkb99@syntax-type jk1ddf@x jk1dd2@r)) (lambda (jk1de9@jk1de4 jk1dea@jk1de6 jk1deb@jk1de8) (let ((jk1def@kwd jk1deb@jk1de8) (jk1df0@value jk1dea@jk1de6) (jk1df1@type jk1de9@jk1de4)) (let ((jk1df5@t jk1df1@type)) (if (memv jk1df5@t '(lexical)) (begin (jkd0c@set-lexical-mutable! jk1df0@value '#t) (list 'set! (jkd08@lexical-var jk1df0@value) (jkda0@chi-expr jk1de0@v jk1dd2@r jk1dd3@mr))) (if (memv jk1df5@t '(core-prim)) (jke5e@syntax-violation '#f '"cannot modify imported core primitive" jk1dd1@e) (if (memv jk1df5@t '(global)) (jke5e@syntax-violation '#f '"attempt to modify imported binding" jk1dd1@e) (if (memv jk1df5@t '(global-macro!)) (jkda0@chi-expr (jkd9a@chi-global-macro jk1df0@value jk1dd1@e) jk1dd2@r jk1dd3@mr) (if (memv jk1df5@t '(local-macro!)) (jkda0@chi-expr (jkd98@chi-local-macro jk1df0@value jk1dd1@e) jk1dd2@r jk1dd3@mr) (if (memv jk1df5@t '(mutable)) (jke5e@syntax-violation '#f '"attempt to assign to an unexportable variable" jk1dd1@e) (jke5e@syntax-violation '#f '"invalid syntax" jk1dd1@e)))))))))))) jk1dd9@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1dd7@t)))))) (set! jk2866@jkda2@chi-set! jkda2@chi-set!) (set! jkda4@verify-formals (lambda (jk1df7@fmls jk1df8@stx) (let ((jk1dfb@t jk1df7@fmls)) (let ((jk1dfd@ls/false (jkd7e@syntax-dispatch jk1dfb@t 'each-any))) (if jk1dfd@ls/false (apply (lambda (jk1dff@x*) (if (not (jkb7f@valid-bound-ids? jk1dff@x*)) (jkd38@invalid-fmls-error jk1df8@stx jk1df7@fmls) (void))) jk1dfd@ls/false) (let ((jk1e01@t jk1dfb@t)) (let ((jk1e03@ls/false (jkd7e@syntax-dispatch jk1e01@t '#(each+ any () any)))) (if jk1e03@ls/false (apply (lambda (jk1e05@x* jk1e06@x) (if (not (jkb7f@valid-bound-ids? (cons jk1e06@x jk1e05@x*))) (jkd38@invalid-fmls-error jk1df8@stx jk1df7@fmls) (void))) jk1e03@ls/false) (let ((jk1e09@t jk1e01@t)) (let ((jk1e0b@ls/false (jkd7e@syntax-dispatch jk1e09@t '_))) (if jk1e0b@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid syntax" jk1df8@stx)) jk1e0b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1e09@t)))))))))))) (set! jk2867@jkda4@verify-formals jkda4@verify-formals) (set! jkda6@chi-lambda-clause (lambda (jk1e0d@stx jk1e0e@fmls jk1e0f@body* jk1e10@r jk1e11@mr) (let ((jk1e17@t jk1e0e@fmls)) (let ((jk1e19@ls/false (jkd7e@syntax-dispatch jk1e17@t 'each-any))) (if jk1e19@ls/false (apply (lambda (jk1e1b@x*) (begin (jkda4@verify-formals jk1e0e@fmls jk1e0d@stx) (let ((jk1e1d@lex* (map jkaff@gen-lexical jk1e1b@x*)) (jk1e1e@lab* (map jkb03@gen-label jk1e1b@x*))) (values jk1e1d@lex* (jkdb6@chi-internal (jkb63@add-subst (jkb37@make-full-rib jk1e1b@x* jk1e1e@lab*) jk1e0f@body*) (jkd10@add-lexicals jk1e1e@lab* jk1e1d@lex* jk1e10@r) jk1e11@mr))))) jk1e19@ls/false) (let ((jk1e21@t jk1e17@t)) (let ((jk1e23@ls/false (jkd7e@syntax-dispatch jk1e21@t '#(each+ any () any)))) (if jk1e23@ls/false (apply (lambda (jk1e25@x* jk1e26@x) (begin (jkda4@verify-formals jk1e0e@fmls jk1e0d@stx) (let ((jk1e29@lex* (map jkaff@gen-lexical jk1e25@x*)) (jk1e2a@lab* (map jkb03@gen-label jk1e25@x*)) (jk1e2b@lex (jkaff@gen-lexical jk1e26@x)) (jk1e2c@lab (jkb03@gen-label jk1e26@x))) (values (append jk1e29@lex* jk1e2b@lex) (jkdb6@chi-internal (jkb63@add-subst (jkb37@make-full-rib (cons jk1e26@x jk1e25@x*) (cons jk1e2c@lab jk1e2a@lab*)) jk1e0f@body*) (jkd10@add-lexicals (cons jk1e2c@lab jk1e2a@lab*) (cons jk1e2b@lex jk1e29@lex*) jk1e10@r) jk1e11@mr))))) jk1e23@ls/false) (let ((jk1e31@t jk1e21@t)) (let ((jk1e33@ls/false (jkd7e@syntax-dispatch jk1e31@t '_))) (if jk1e33@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid syntax" jk1e0e@fmls)) jk1e33@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1e31@t)))))))))))) (set! jk2868@jkda6@chi-lambda-clause jkda6@chi-lambda-clause) (set! jkda8@chi-lambda-clause* (lambda (jk1e35@stx jk1e36@fmls* jk1e37@body** jk1e38@r jk1e39@mr) (if (null? jk1e36@fmls*) (values '() '()) (call-with-values (lambda () (jkda6@chi-lambda-clause jk1e35@stx (car jk1e36@fmls*) (car jk1e37@body**) jk1e38@r jk1e39@mr)) (lambda (jk1e43@jk1e40 jk1e44@jk1e42) (let ((jk1e47@b jk1e44@jk1e42) (jk1e48@a jk1e43@jk1e40)) (call-with-values (lambda () (jkda8@chi-lambda-clause* jk1e35@stx (cdr jk1e36@fmls*) (cdr jk1e37@body**) jk1e38@r jk1e39@mr)) (lambda (jk1e4f@jk1e4c jk1e50@jk1e4e) (let ((jk1e53@b* jk1e50@jk1e4e) (jk1e54@a* jk1e4f@jk1e4c)) (values (cons jk1e48@a jk1e54@a*) (cons jk1e47@b jk1e53@b*))))))))))) (set! jk2869@jkda8@chi-lambda-clause* jkda8@chi-lambda-clause*) (set! jkdaa@chi-defun (lambda (jk1e57@x jk1e58@r jk1e59@mr) (let ((jk1e5d@fmls (car jk1e57@x)) (jk1e5e@body* (cdr jk1e57@x))) (call-with-values (lambda () (jkda6@chi-lambda-clause jk1e5d@fmls jk1e5d@fmls jk1e5e@body* jk1e58@r jk1e59@mr)) (lambda (jk1e65@jk1e62 jk1e66@jk1e64) (let ((jk1e69@body jk1e66@jk1e64) (jk1e6a@fmls jk1e65@jk1e62)) (jkada@jka06@build-lambda '#f jk1e6a@fmls jk1e69@body))))))) (set! jk286a@jkdaa@chi-defun jkdaa@chi-defun) (set! jkdac@chi-rhs (lambda (jk1e6d@rhs jk1e6e@r jk1e6f@mr) (let ((jk1e73@t (car jk1e6d@rhs))) (if (memv jk1e73@t '(defun)) (jkdaa@chi-defun (cdr jk1e6d@rhs) jk1e6e@r jk1e6f@mr) (if (memv jk1e73@t '(expr)) (let ((jk1e75@expr (cdr jk1e6d@rhs))) (jkda0@chi-expr jk1e75@expr jk1e6e@r jk1e6f@mr)) (if (memv jk1e73@t '(top-expr)) (let ((jk1e77@expr (cdr jk1e6d@rhs))) (jkadc@jka36@build-sequence '#f (list (jkda0@chi-expr jk1e77@expr jk1e6e@r jk1e6f@mr) (jkadd@jka38@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" jk1e6d@rhs))))))) (set! jk286b@jkdac@chi-rhs jkdac@chi-rhs) (set! jkdae@expand-interaction-rhs*/init* (lambda (jk1e79@lhs* jk1e7a@rhs* jk1e7b@init* jk1e7c@r jk1e7d@mr) (let jk1e87@f ((jk1e83@lhs* jk1e79@lhs*) (jk1e84@rhs* jk1e7a@rhs*)) (if (null? jk1e83@lhs*) (map (lambda (jk1e89@x) (jkda0@chi-expr jk1e89@x jk1e7c@r jk1e7d@mr)) jk1e7b@init*) (let ((jk1e8b@lhs (car jk1e83@lhs*)) (jk1e8c@rhs (car jk1e84@rhs*))) (let ((jk1e8f@t (car jk1e8c@rhs))) (if (memv jk1e8f@t '(defun)) (let ((jk1e91@rhs (jkdaa@chi-defun (cdr jk1e8c@rhs) jk1e7c@r jk1e7d@mr))) (cons (list 'set! jk1e8b@lhs jk1e91@rhs) (jk1e87@f (cdr jk1e83@lhs*) (cdr jk1e84@rhs*)))) (if (memv jk1e8f@t '(expr)) (let ((jk1e93@rhs (jkda0@chi-expr (cdr jk1e8c@rhs) jk1e7c@r jk1e7d@mr))) (cons (list 'set! jk1e8b@lhs jk1e93@rhs) (jk1e87@f (cdr jk1e83@lhs*) (cdr jk1e84@rhs*)))) (if (memv jk1e8f@t '(top-expr)) (let ((jk1e95@e (jkda0@chi-expr (cdr jk1e8c@rhs) jk1e7c@r jk1e7d@mr))) (cons jk1e95@e (jk1e87@f (cdr jk1e83@lhs*) (cdr jk1e84@rhs*)))) (error 'expand-interaction '"invallid" jk1e8c@rhs)))))))))) (set! jk286c@jkdae@expand-interaction-rhs*/init* jkdae@expand-interaction-rhs*/init*) (set! jkdb0@chi-rhs* (lambda (jk1e97@rhs* jk1e98@r jk1e99@mr) (let jk1e9f@f ((jk1e9d@ls jk1e97@rhs*)) (if (null? jk1e9d@ls) '() (let ((jk1ea1@a (jkdac@chi-rhs (car jk1e9d@ls) jk1e98@r jk1e99@mr))) (cons jk1ea1@a (jk1e9f@f (cdr jk1e9d@ls)))))))) (set! jk286d@jkdb0@chi-rhs* jkdb0@chi-rhs*) (set! jkdb2@find-bound=? (lambda (jk1ea3@x jk1ea4@lhs* jk1ea5@rhs*) (if (null? jk1ea4@lhs*) '#f (if (jkb7b@bound-id=? jk1ea3@x (car jk1ea4@lhs*)) (car jk1ea5@rhs*) (jkdb2@find-bound=? jk1ea3@x (cdr jk1ea4@lhs*) (cdr jk1ea5@rhs*)))))) (set! jk286e@jkdb2@find-bound=? jkdb2@find-bound=?) (set! jkdb4@find-dups (lambda (jk1ea9@ls) (let jk1eaf@f ((jk1eab@ls jk1ea9@ls) (jk1eac@dups '())) (if (null? jk1eab@ls) jk1eac@dups (let ((jk1eb1@t (jkdb2@find-bound=? (car jk1eab@ls) (cdr jk1eab@ls) (cdr jk1eab@ls)))) (if jk1eb1@t ((lambda (jk1eb3@x) (jk1eaf@f (cdr jk1eab@ls) (cons (list (car jk1eab@ls) jk1eb3@x) jk1eac@dups))) jk1eb1@t) (jk1eaf@f (cdr jk1eab@ls) jk1eac@dups))))))) (set! jk286f@jkdb4@find-dups jkdb4@find-dups) (set! jkdb6@chi-internal (lambda (jk1eb5@e* jk1eb6@r jk1eb7@mr) (let ((jk1ebb@rib (jkb2b@make-empty-rib))) (call-with-values (lambda () (jkdd6@chi-body* (map (lambda (jk1ecd@x) (jkb63@add-subst jk1ebb@rib jk1ecd@x)) (jkb75@syntax->list jk1eb5@e*)) jk1eb6@r jk1eb7@mr '() '() '() '() '() jk1ebb@rib '#f)) (lambda (jk1ecf@jk1ebe jk1ed0@jk1ec0 jk1ed1@jk1ec2 jk1ed2@jk1ec4 jk1ed3@jk1ec6 jk1ed4@jk1ec8 jk1ed5@jk1eca jk1ed6@jk1ecc) (let ((jk1edf@_exp* jk1ed6@jk1ecc) (jk1ee0@kwd* jk1ed5@jk1eca) (jk1ee1@mod** jk1ed4@jk1ec8) (jk1ee2@rhs* jk1ed3@jk1ec6) (jk1ee3@lex* jk1ed2@jk1ec4) (jk1ee4@mr jk1ed1@jk1ec2) (jk1ee5@r jk1ed0@jk1ec0) (jk1ee6@e* jk1ecf@jk1ebe)) (begin (if (null? jk1ee6@e*) (jke5e@syntax-violation '#f '"no expression in body" jk1ee6@e*) (void)) (let ((jk1eef@init* (jkd9c@chi-expr* (append (apply append (reverse jk1ee1@mod**)) jk1ee6@e*) jk1ee5@r jk1ee4@mr))) (let ((jk1ef1@rhs* (jkdb0@chi-rhs* jk1ee2@rhs* jk1ee5@r jk1ee4@mr))) (jkae1@jka40@build-letrec* '#f (reverse jk1ee3@lex*) (reverse jk1ef1@rhs*) (jkadc@jka36@build-sequence '#f jk1eef@init*))))))))))) (set! jk2870@jkdb6@chi-internal jkdb6@chi-internal) (set! jkdb8@parse-module (lambda (jk1ef3@e) (let ((jk1ef5@t jk1ef3@e)) (let ((jk1ef7@ls/false (jkd7e@syntax-dispatch jk1ef5@t '(_ each-any . each-any)))) (if jk1ef7@ls/false (apply (lambda (jk1ef9@export* jk1efa@b*) (begin (if (not (for-all jkb77@id? jk1ef9@export*)) (jke5e@syntax-violation '#f '"module exports must be identifiers" jk1ef3@e) (void)) (values '#f (list->vector jk1ef9@export*) jk1efa@b*))) jk1ef7@ls/false) (let ((jk1efd@t jk1ef5@t)) (let ((jk1eff@ls/false (jkd7e@syntax-dispatch jk1efd@t '(_ any each-any . each-any)))) (if jk1eff@ls/false (apply (lambda (jk1f01@name jk1f02@export* jk1f03@b*) (begin (if (not (jkb77@id? jk1f01@name)) (jke5e@syntax-violation '#f '"module name must be an identifier" jk1ef3@e) (void)) (if (not (for-all jkb77@id? jk1f02@export*)) (jke5e@syntax-violation '#f '"module exports must be identifiers" jk1ef3@e) (void)) (values jk1f01@name (list->vector jk1f02@export*) jk1f03@b*))) jk1eff@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1efd@t))))))))) (set! jk2871@jkdb8@parse-module jkdb8@parse-module) (set! jkdc2@module-interface? (lambda (jk1f07@x) (and (simple-struct? jk1f07@x) (eq? (simple-struct-name jk1f07@x) 'module-interface)))) (set! jk2872@jkdc2@module-interface? jkdc2@module-interface?) (set! jkdc4@module-interface-first-mark (lambda (jk1f09@x) (simple-struct-ref jk1f09@x '0))) (set! jk2873@jkdc4@module-interface-first-mark jkdc4@module-interface-first-mark) (set! jkdc6@set-module-interface-first-mark! (lambda (jk1f0b@x jk1f0c@val) (simple-struct-set! jk1f0b@x '0 jk1f0c@val))) (set! jk2874@jkdc6@set-module-interface-first-mark! jkdc6@set-module-interface-first-mark!) (set! jkdc8@module-interface-exp-id-vec (lambda (jk1f0f@x) (simple-struct-ref jk1f0f@x '1))) (set! jk2875@jkdc8@module-interface-exp-id-vec jkdc8@module-interface-exp-id-vec) (set! jkdca@set-module-interface-exp-id-vec! (lambda (jk1f11@x jk1f12@val) (simple-struct-set! jk1f11@x '1 jk1f12@val))) (set! jk2876@jkdca@set-module-interface-exp-id-vec! jkdca@set-module-interface-exp-id-vec!) (set! jkdcc@module-interface-exp-lab-vec (lambda (jk1f15@x) (simple-struct-ref jk1f15@x '2))) (set! jk2877@jkdcc@module-interface-exp-lab-vec jkdcc@module-interface-exp-lab-vec) (set! jkdce@set-module-interface-exp-lab-vec! (lambda (jk1f17@x jk1f18@val) (simple-struct-set! jk1f17@x '2 jk1f18@val))) (set! jk2878@jkdce@set-module-interface-exp-lab-vec! jkdce@set-module-interface-exp-lab-vec!) (set! jkdd0@dummy '3) (set! jk2879@jkdd0@dummy jkdd0@dummy) (set! jkdd2@module-interface-exp-id* (lambda (jk1f1b@iface jk1f1c@id) (let ((jk1f20@diff-marks '#f)) (begin (set! jk1f20@diff-marks (lambda (jk1f27@ls jk1f28@x) (begin (if (null? jk1f27@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((jk1f2b@a (car jk1f27@ls))) (if (eq? jk1f2b@a jk1f28@x) '() (cons jk1f2b@a (jk1f20@diff-marks (cdr jk1f27@ls) jk1f28@x))))))) (let ((jk1f21@diff (jk1f20@diff-marks (jkb49@stx-mark* jk1f1c@id) (jkdc4@module-interface-first-mark jk1f1b@iface))) (jk1f22@id-vec (jkdc8@module-interface-exp-id-vec jk1f1b@iface))) (if (null? jk1f21@diff) jk1f22@id-vec (vector-map (lambda (jk1f25@x) (make-simple-struct 'stx '5 (list (jkb45@stx-expr jk1f25@x) (append jk1f21@diff (jkb49@stx-mark* jk1f25@x)) '() '()))) jk1f22@id-vec))))))) (set! jk287a@jkdd2@module-interface-exp-id* jkdd2@module-interface-exp-id*) (set! jkdd4@chi-internal-module (lambda (jk1f2d@e jk1f2e@r jk1f2f@mr jk1f30@lex* jk1f31@rhs* jk1f32@mod** jk1f33@kwd*) (call-with-values (lambda () (jkdb8@parse-module jk1f2d@e)) (lambda (jk1f41@jk1f3c jk1f42@jk1f3e jk1f43@jk1f40) (let ((jk1f47@e* jk1f43@jk1f40) (jk1f48@exp-id* jk1f42@jk1f3e) (jk1f49@name jk1f41@jk1f3c)) (let ((jk1f4d@rib (jkb2b@make-empty-rib))) (let ((jk1f4f@e* (map (lambda (jk1f51@x) (jkb63@add-subst jk1f4d@rib jk1f51@x)) (jkb75@syntax->list jk1f47@e*)))) (call-with-values (lambda () (jkdd6@chi-body* jk1f4f@e* jk1f2e@r jk1f2f@mr jk1f30@lex* jk1f31@rhs* jk1f32@mod** jk1f33@kwd* '() jk1f4d@rib '#f)) (lambda (jk1f63@jk1f54 jk1f64@jk1f56 jk1f65@jk1f58 jk1f66@jk1f5a jk1f67@jk1f5c jk1f68@jk1f5e jk1f69@jk1f60 jk1f6a@jk1f62) (let ((jk1f73@_exp* jk1f6a@jk1f62) (jk1f74@kwd* jk1f69@jk1f60) (jk1f75@mod** jk1f68@jk1f5e) (jk1f76@rhs* jk1f67@jk1f5c) (jk1f77@lex* jk1f66@jk1f5a) (jk1f78@mr jk1f65@jk1f58) (jk1f79@r jk1f64@jk1f56) (jk1f7a@e* jk1f63@jk1f54)) (let ((jk1f83@exp-lab* (vector-map (lambda (jk1f87@x) (or (jkb8d@id->label (make-simple-struct 'stx '5 (list (jkb79@id->sym jk1f87@x) (jkb49@stx-mark* jk1f87@x) (list jk1f4d@rib) '()))) (jke5e@syntax-violation '#f '"cannot find module export" jk1f87@x))) jk1f48@exp-id*)) (jk1f84@mod** (cons jk1f7a@e* jk1f75@mod**))) (if (not jk1f49@name) (values jk1f77@lex* jk1f76@rhs* jk1f48@exp-id* jk1f83@exp-lab* jk1f79@r jk1f78@mr jk1f84@mod** jk1f74@kwd*) (let ((jk1f89@lab (jkb03@gen-label 'module)) (jk1f8a@iface (make-simple-struct 'module-interface '4 (list (car (jkb49@stx-mark* jk1f49@name)) (vector-map (lambda (jk1f8d@x) (make-simple-struct 'stx '5 (list (jkb45@stx-expr jk1f8d@x) (jkb49@stx-mark* jk1f8d@x) '() '()))) jk1f48@exp-id*) jk1f83@exp-lab*)))) (values jk1f77@lex* jk1f76@rhs* (vector jk1f49@name) (vector jk1f89@lab) (cons (cons jk1f89@lab (cons '$module jk1f8a@iface)) jk1f79@r) (cons (cons jk1f89@lab (cons '$module jk1f8a@iface)) jk1f78@mr) jk1f84@mod** jk1f74@kwd*)))))))))))))) (set! jk287b@jkdd4@chi-internal-module jkdd4@chi-internal-module) (set! jkdd6@chi-body* (lambda (jk1f8f@e* jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1f95@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?) (if (null? jk1f8f@e*) (values jk1f8f@e* jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1f95@kwd* jk1f96@exp*) (let ((jk1fa3@e (car jk1f8f@e*))) (call-with-values (lambda () (jkb99@syntax-type jk1fa3@e jk1f90@r)) (lambda (jk1fab@jk1fa6 jk1fac@jk1fa8 jk1fad@jk1faa) (let ((jk1fb1@kwd jk1fad@jk1faa) (jk1fb2@value jk1fac@jk1fa8) (jk1fb3@type jk1fab@jk1fa6)) (let ((jk1fb7@kwd* (if (jkb77@id? jk1fb1@kwd) (cons jk1fb1@kwd jk1f95@kwd*) jk1f95@kwd*))) (let ((jk1fb9@t jk1fb3@type)) (if (memv jk1fb9@t '(define)) (call-with-values (lambda () (jkd00@parse-define jk1fa3@e)) (lambda (jk1fbf@jk1fbc jk1fc0@jk1fbe) (let ((jk1fc3@rhs jk1fc0@jk1fbe) (jk1fc4@id jk1fbf@jk1fbc)) (begin (if (jkb83@bound-id-member? jk1fc4@id jk1fb7@kwd*) (jke5e@syntax-violation '#f '"cannot redefine keyword" jk1fa3@e) (void)) (call-with-values (lambda () (jkb07@gen-define-label+loc jk1fc4@id jk1f97@rib)) (lambda (jk1fcb@jk1fc8 jk1fcc@jk1fca) (let ((jk1fcf@lex jk1fcc@jk1fca) (jk1fd0@lab jk1fcb@jk1fc8)) (begin (jkb2d@extend-rib! jk1f97@rib jk1fc4@id jk1fd0@lab) (jkdd6@chi-body* (cdr jk1f8f@e*) (jkd0e@add-lexical jk1fd0@lab jk1fcf@lex jk1f90@r) jk1f91@mr (cons jk1fcf@lex jk1f92@lex*) (cons jk1fc3@rhs jk1f93@rhs*) jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?))))))))) (if (memv jk1fb9@t '(define-syntax)) (call-with-values (lambda () (jkd02@parse-define-syntax jk1fa3@e)) (lambda (jk1fd7@jk1fd4 jk1fd8@jk1fd6) (let ((jk1fdb@rhs jk1fd8@jk1fd6) (jk1fdc@id jk1fd7@jk1fd4)) (begin (if (jkb83@bound-id-member? jk1fdc@id jk1fb7@kwd*) (jke5e@syntax-violation '#f '"cannot redefine keyword" jk1fa3@e) (void)) (let ((jk1fdf@lab (jkb09@gen-define-label jk1fdc@id jk1f97@rib)) (jk1fe0@expanded-rhs (jkdd8@expand-transformer jk1fdb@rhs jk1f91@mr))) (begin (jkb2d@extend-rib! jk1f97@rib jk1fdc@id jk1fdf@lab) (let ((jk1fe3@b (jkbaf@make-eval-transformer jk1fe0@expanded-rhs))) (jkdd6@chi-body* (cdr jk1f8f@e*) (cons (cons jk1fdf@lab jk1fe3@b) jk1f90@r) (cons (cons jk1fdf@lab jk1fe3@b) jk1f91@mr) jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?)))))))) (if (memv jk1fb9@t '(let-syntax letrec-syntax)) (let ((jk1fe5@t jk1fa3@e)) (let ((jk1fe7@ls/false (jkd7e@syntax-dispatch jk1fe5@t '(_ #(each (any any)) . each-any)))) (if (and jk1fe7@ls/false (apply (lambda (jk1fe9@xlhs* jk1fea@xrhs* jk1feb@xbody*) (if (not (jkb7f@valid-bound-ids? jk1fe9@xlhs*)) (jke5e@syntax-violation '#f '"invalid identifiers" jk1fa3@e) (void))) jk1fe7@ls/false)) (apply (lambda (jk1fef@xlhs* jk1ff0@xrhs* jk1ff1@xbody*) (let ((jk1ff5@xlab* (map jkb03@gen-label jk1fef@xlhs*))) (let ((jk1ff7@xrib (jkb37@make-full-rib jk1fef@xlhs* jk1ff5@xlab*))) (let ((jk1ff9@xb* (map (lambda (jk1ffb@x) (jkbaf@make-eval-transformer (jkdd8@expand-transformer (if (eq? jk1fb3@type 'let-syntax) jk1ffb@x (jkb63@add-subst jk1ff7@xrib jk1ffb@x)) jk1f91@mr))) jk1ff0@xrhs*))) (jkdd6@chi-body* (append (map (lambda (jk1ffd@x) (jkb63@add-subst jk1ff7@xrib jk1ffd@x)) jk1ff1@xbody*) (cdr jk1f8f@e*)) (append (map cons jk1ff5@xlab* jk1ff9@xb*) jk1f90@r) (append (map cons jk1ff5@xlab* jk1ff9@xb*) jk1f91@mr) jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?))))) jk1fe7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1fe5@t)))) (if (memv jk1fb9@t '(begin)) (let ((jk1fff@t jk1fa3@e)) (let ((jk2001@ls/false (jkd7e@syntax-dispatch jk1fff@t '(_ . each-any)))) (if jk2001@ls/false (apply (lambda (jk2003@x*) (jkdd6@chi-body* (append jk2003@x* (cdr jk1f8f@e*)) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?)) jk2001@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk1fff@t)))) (if (memv jk1fb9@t '(global-macro global-macro!)) (jkdd6@chi-body* (cons (jkb63@add-subst jk1f97@rib (jkd9a@chi-global-macro jk1fb2@value jk1fa3@e)) (cdr jk1f8f@e*)) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?) (if (memv jk1fb9@t '(local-macro local-macro!)) (jkdd6@chi-body* (cons (jkb63@add-subst jk1f97@rib (jkd98@chi-local-macro jk1fb2@value jk1fa3@e)) (cdr jk1f8f@e*)) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?) (if (memv jk1fb9@t '(macro macro!)) (jkdd6@chi-body* (cons (jkb63@add-subst jk1f97@rib (jkd96@chi-macro jk1fb2@value jk1fa3@e)) (cdr jk1f8f@e*)) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?) (if (memv jk1fb9@t '(module)) (call-with-values (lambda () (jkdd4@chi-internal-module jk1fa3@e jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd*)) (lambda (jk2015@jk2006 jk2016@jk2008 jk2017@jk200a jk2018@jk200c jk2019@jk200e jk201a@jk2010 jk201b@jk2012 jk201c@jk2014) (let ((jk2025@kwd* jk201c@jk2014) (jk2026@mod** jk201b@jk2012) (jk2027@mr jk201a@jk2010) (jk2028@r jk2019@jk200e) (jk2029@m-exp-lab* jk2018@jk200c) (jk202a@m-exp-id* jk2017@jk200a) (jk202b@rhs* jk2016@jk2008) (jk202c@lex* jk2015@jk2006)) (begin (vector-for-each (lambda (jk2035@id jk2036@lab) (jkb2d@extend-rib! jk1f97@rib jk2035@id jk2036@lab)) jk202a@m-exp-id* jk2029@m-exp-lab*) (jkdd6@chi-body* (cdr jk1f8f@e*) jk2028@r jk2027@mr jk202c@lex* jk202b@rhs* jk2026@mod** jk2025@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?))))) (if (memv jk1fb9@t '(library)) (begin (jke40@library-expander (jkb8b@stx->datum jk1fa3@e)) (jkdd6@chi-body* (cdr jk1f8f@e*) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?)) (if (memv jk1fb9@t '(export)) (let ((jk2039@t jk1fa3@e)) (let ((jk203b@ls/false (jkd7e@syntax-dispatch jk2039@t '(_ . each-any)))) (if jk203b@ls/false (apply (lambda (jk203d@exp-decl*) (jkdd6@chi-body* (cdr jk1f8f@e*) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* (append jk203d@exp-decl* jk1f96@exp*) jk1f97@rib jk1f98@top?)) jk203b@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2039@t)))) (if (memv jk1fb9@t '(import)) (let ((jk2040@module-import? '#f) (jk2042@module-import '#f) (jk2044@library-import '#f)) (begin (set! jk2040@module-import? (lambda (jk2093@e) (let ((jk2095@t jk2093@e)) (let ((jk2097@ls/false (jkd7e@syntax-dispatch jk2095@t '(_ any)))) (if (and jk2097@ls/false (apply (lambda (jk2099@id) (jkb77@id? jk2099@id)) jk2097@ls/false)) (apply (lambda (jk209b@id) '#t) jk2097@ls/false) (let ((jk209d@t jk2095@t)) (let ((jk209f@ls/false (jkd7e@syntax-dispatch jk209d@t '(_ . each-any)))) (if jk209f@ls/false (apply (lambda (jk20a1@imp*) '#f) jk209f@ls/false) (let ((jk20a3@t jk209d@t)) (let ((jk20a5@ls/false (jkd7e@syntax-dispatch jk20a3@t '_))) (if jk20a5@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"malformed import form" jk2093@e)) jk20a5@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk20a3@t)))))))))))) (set! jk2042@module-import (lambda (jk2071@e jk2072@r) (let ((jk2075@t jk2071@e)) (let ((jk2077@ls/false (jkd7e@syntax-dispatch jk2075@t '(_ any)))) (if (and jk2077@ls/false (apply (lambda (jk2079@id) (jkb77@id? jk2079@id)) jk2077@ls/false)) (apply (lambda (jk207b@id) (call-with-values (lambda () (jkb99@syntax-type jk207b@id jk2072@r)) (lambda (jk2083@jk207e jk2084@jk2080 jk2085@jk2082) (let ((jk2089@kwd jk2085@jk2082) (jk208a@value jk2084@jk2080) (jk208b@type jk2083@jk207e)) (let ((jk208f@t jk208b@type)) (if (memv jk208f@t '($module)) (let ((jk2091@iface jk208a@value)) (values (jkdd2@module-interface-exp-id* jk2091@iface jk207b@id) (jkdcc@module-interface-exp-lab-vec jk2091@iface))) (jke5e@syntax-violation '#f '"invalid import" jk2071@e))))))) jk2077@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2075@t)))))) (set! jk2044@library-import (lambda (jk2055@e) (let ((jk2057@t jk2055@e)) (let ((jk2059@ls/false (jkd7e@syntax-dispatch jk2057@t '(any . each-any)))) (if jk2059@ls/false (apply (lambda (jk205b@ctxt jk205c@imp*) (call-with-values (lambda () (jkde0@parse-import-spec* (jke64@syntax->datum jk205c@imp*))) (lambda (jk2063@jk2060 jk2064@jk2062) (let ((jk2067@subst-labels jk2064@jk2062) (jk2068@subst-names jk2063@jk2060)) (values (vector-map (lambda (jk206b@name) (jkb57@datum->stx jk205b@ctxt jk206b@name)) jk2068@subst-names) jk2067@subst-labels))))) jk2059@ls/false) (let ((jk206d@t jk2057@t)) (let ((jk206f@ls/false (jkd7e@syntax-dispatch jk206d@t '_))) (if jk206f@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid import form" jk2055@e)) jk206f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk206d@t))))))))) (begin (call-with-values (lambda () (if (jk2040@module-import? jk1fa3@e) (jk2042@module-import jk1fa3@e jk1f90@r) (jk2044@library-import jk1fa3@e))) (lambda (jk2049@jk2046 jk204a@jk2048) (let ((jk204d@lab* jk204a@jk2048) (jk204e@id* jk2049@jk2046)) (vector-for-each (lambda (jk2051@id jk2052@lab) (jkb2d@extend-rib! jk1f97@rib jk2051@id jk2052@lab)) jk204e@id* jk204d@lab*)))) (jkdd6@chi-body* (cdr jk1f8f@e*) jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?)))) (if jk1f98@top? (jkdd6@chi-body* (cdr jk1f8f@e*) jk1f90@r jk1f91@mr (cons (jkaff@gen-lexical 'dummy) jk1f92@lex*) (cons (cons 'top-expr jk1fa3@e) jk1f93@rhs*) jk1f94@mod** jk1fb7@kwd* jk1f96@exp* jk1f97@rib jk1f98@top?) (values jk1f8f@e* jk1f90@r jk1f91@mr jk1f92@lex* jk1f93@rhs* jk1f94@mod** jk1fb7@kwd* jk1f96@exp*)))))))))))))))))))))) (set! jk287c@jkdd6@chi-body* jkdd6@chi-body*) (set! jkdd8@expand-transformer (lambda (jk20a7@expr jk20a8@r) (let ((jk20ab@rtc (jkde4@make-collector))) (let ((jk20ad@expanded-rhs (let ((jk20b7@jk20b0 jkde6@inv-collector) (jk20b8@jk20b2 jkde8@vis-collector) (jk20b9@jk20b4 jk20ab@rtc) (jk20ba@jk20b6 (lambda (jk20bf@x) (values)))) (let ((jk20c1@swap (lambda () (begin (let ((jk20c3@t (jk20b7@jk20b0))) (begin (jk20b7@jk20b0 jk20b9@jk20b4) (set! jk20b9@jk20b4 jk20c3@t))) (let ((jk20c5@t (jk20b8@jk20b2))) (begin (jk20b8@jk20b2 jk20ba@jk20b6) (set! jk20ba@jk20b6 jk20c5@t))))))) (dynamic-wind jk20c1@swap (lambda () (jkda0@chi-expr jk20a7@expr jk20a8@r jk20a8@r)) jk20c1@swap))))) (begin (for-each (let ((jk20c7@mark-visit (jkde8@vis-collector))) (lambda (jk20c9@x) (begin (jk98d@jk7db@invoke-library jk20c9@x) (jk20c7@mark-visit jk20c9@x)))) (jk20ab@rtc)) jk20ad@expanded-rhs))))) (set! jk287d@jkdd8@expand-transformer jkdd8@expand-transformer) (set! jkdda@parse-exports (lambda (jk20cb@exp*) (let jk20d3@f ((jk20cd@exp* jk20cb@exp*) (jk20ce@int* '()) (jk20cf@ext* '())) (if (null? jk20cd@exp*) (begin (if (not (jkb7f@valid-bound-ids? jk20cf@ext*)) (jke5e@syntax-violation 'export '"invalid exports" (jkdb4@find-dups jk20cf@ext*)) (void)) (values (map jke64@syntax->datum jk20cf@ext*) jk20ce@int*)) (let ((jk20d5@t (car jk20cd@exp*))) (let ((jk20d7@ls/false (jkd7e@syntax-dispatch jk20d5@t '(any . #(each (any any)))))) (if jk20d7@ls/false (apply (lambda (jk20d9@rename jk20da@i* jk20db@e*) (begin (if (not (and (eq? (jke64@syntax->datum jk20d9@rename) 'rename) (for-all jkb77@id? jk20da@i*) (for-all jkb77@id? jk20db@e*))) (jke5e@syntax-violation 'export '"invalid export specifier" (car jk20cd@exp*)) (void)) (jk20d3@f (cdr jk20cd@exp*) (append jk20da@i* jk20ce@int*) (append jk20db@e* jk20cf@ext*)))) jk20d7@ls/false) (let ((jk20df@t jk20d5@t)) (let ((jk20e1@ls/false (jkd7e@syntax-dispatch jk20df@t 'any))) (if jk20e1@ls/false (apply (lambda (jk20e3@ie) (begin (if (not (jkb77@id? jk20e3@ie)) (jke5e@syntax-violation 'export '"invalid export" jk20e3@ie) (void)) (jk20d3@f (cdr jk20cd@exp*) (cons jk20e3@ie jk20ce@int*) (cons jk20e3@ie jk20cf@ext*)))) jk20e1@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk20df@t))))))))))) (set! jk287e@jkdda@parse-exports jkdda@parse-exports) (set! jkddc@parse-library-name (lambda (jk20e5@spec) (let ((jk20e8@parse '#f)) (begin (set! jk20e8@parse (lambda (jk20f5@x) (let ((jk20f7@t jk20f5@x)) (let ((jk20f9@ls/false (jkd7e@syntax-dispatch jk20f7@t '(each-any)))) (if (and jk20f9@ls/false (apply (lambda (jk20fb@v*) (for-all (lambda (jk20fd@x) (let ((jk20ff@x (jke64@syntax->datum jk20fd@x))) (and (integer? jk20ff@x) (exact? jk20ff@x)))) jk20fb@v*)) jk20f9@ls/false)) (apply (lambda (jk2101@v*) (values '() (map jke64@syntax->datum jk2101@v*))) jk20f9@ls/false) (let ((jk2103@t jk20f7@t)) (let ((jk2105@ls/false (jkd7e@syntax-dispatch jk2103@t '(any . any)))) (if (and jk2105@ls/false (apply (lambda (jk2107@x jk2108@rest) (symbol? (jke64@syntax->datum jk2107@x))) jk2105@ls/false)) (apply (lambda (jk210b@x jk210c@rest) (call-with-values (lambda () (jk20e8@parse jk210c@rest)) (lambda (jk2113@jk2110 jk2114@jk2112) (let ((jk2117@v* jk2114@jk2112) (jk2118@x* jk2113@jk2110)) (values (cons (jke64@syntax->datum jk210b@x) jk2118@x*) jk2117@v*))))) jk2105@ls/false) (let ((jk211b@t jk2103@t)) (let ((jk211d@ls/false (jkd7e@syntax-dispatch jk211b@t '()))) (if jk211d@ls/false (apply (lambda () (values '() '())) jk211d@ls/false) (let ((jk211f@t jk211b@t)) (let ((jk2121@ls/false (jkd7e@syntax-dispatch jk211f@t '_))) (if jk2121@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid library name" jk20e5@spec)) jk2121@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk211f@t))))))))))))))) (call-with-values (lambda () (jk20e8@parse jk20e5@spec)) (lambda (jk20ed@jk20ea jk20ee@jk20ec) (let ((jk20f1@ver* jk20ee@jk20ec) (jk20f2@name* jk20ed@jk20ea)) (begin (if (null? jk20f2@name*) (jke5e@syntax-violation '#f '"empty library name" jk20e5@spec) (void)) (values jk20f2@name* jk20f1@ver*))))))))) (set! jk287f@jkddc@parse-library-name jkddc@parse-library-name) (set! jkdde@parse-library (lambda (jk2123@e) (let ((jk2125@t jk2123@e)) (let ((jk2127@ls/false (jkd7e@syntax-dispatch jk2125@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and jk2127@ls/false (apply (lambda (jk2129@library jk212a@name* jk212b@export jk212c@exp* jk212d@import jk212e@imp* jk212f@b*) (and (eq? (jke64@syntax->datum jk212b@export) 'export) (eq? (jke64@syntax->datum jk212d@import) 'import) (eq? (jke64@syntax->datum jk2129@library) 'library))) jk2127@ls/false)) (apply (lambda (jk2137@library jk2138@name* jk2139@export jk213a@exp* jk213b@import jk213c@imp* jk213d@b*) (values jk2138@name* jk213a@exp* jk213c@imp* jk213d@b*)) jk2127@ls/false) (let ((jk2145@t jk2125@t)) (let ((jk2147@ls/false (jkd7e@syntax-dispatch jk2145@t '_))) (if jk2147@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"malformed library" jk2123@e)) jk2147@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2145@t))))))))) (set! jk2880@jkdde@parse-library jkdde@parse-library) (set! jkde0@parse-import-spec* (let ((jk214a@idsyn? '#f) (jk214c@dup-error '#f) (jk214e@merge-substs '#f) (jk2150@exclude* '#f) (jk2152@find* '#f) (jk2154@rem* '#f) (jk2156@remove-dups '#f) (jk2158@parse-library-name '#f) (jk215a@import-library '#f) (jk215c@get-import '#f) (jk215e@add-imports! '#f)) (begin (set! jk214a@idsyn? (lambda (jk2353@x) (symbol? (jke64@syntax->datum jk2353@x)))) (set! jk214c@dup-error (lambda (jk2351@name) (jke5e@syntax-violation 'import '"two imports with different bindings" jk2351@name))) (set! jk214e@merge-substs (lambda (jk233f@s jk2340@subst) (let ((jk2344@insert-to-subst '#f)) (begin (set! jk2344@insert-to-subst (lambda (jk2345@a jk2346@subst) (let ((jk2349@name (car jk2345@a)) (jk234a@label (cdr jk2345@a))) (let ((jk234d@t (assq jk2349@name jk2346@subst))) (if jk234d@t ((lambda (jk234f@x) (if (eq? (cdr jk234f@x) jk234a@label) jk2346@subst (jk214c@dup-error jk2349@name))) jk234d@t) (cons jk2345@a jk2346@subst)))))) (if (null? jk233f@s) jk2340@subst (jk2344@insert-to-subst (car jk233f@s) (jk214e@merge-substs (cdr jk233f@s) jk2340@subst))))))) (set! jk2150@exclude* (lambda (jk230f@sym* jk2310@subst) (let ((jk2314@exclude '#f)) (begin (set! jk2314@exclude (lambda (jk232d@sym jk232e@subst) (if (null? jk232e@subst) (jke5e@syntax-violation 'import '"cannot rename unbound identifier" jk232d@sym) (if (eq? jk232d@sym (caar jk232e@subst)) (values (cdar jk232e@subst) (cdr jk232e@subst)) (let ((jk2331@a (car jk232e@subst))) (call-with-values (lambda () (jk2314@exclude jk232d@sym (cdr jk232e@subst))) (lambda (jk2337@jk2334 jk2338@jk2336) (let ((jk233b@subst jk2338@jk2336) (jk233c@old jk2337@jk2334)) (values jk233c@old (cons jk2331@a jk233b@subst)))))))))) (if (null? jk230f@sym*) (values '() jk2310@subst) (call-with-values (lambda () (jk2314@exclude (car jk230f@sym*) jk2310@subst)) (lambda (jk2319@jk2316 jk231a@jk2318) (let ((jk231d@subst jk231a@jk2318) (jk231e@old jk2319@jk2316)) (call-with-values (lambda () (jk2150@exclude* (cdr jk230f@sym*) jk231d@subst)) (lambda (jk2325@jk2322 jk2326@jk2324) (let ((jk2329@subst jk2326@jk2324) (jk232a@old* jk2325@jk2322)) (values (cons jk231e@old jk232a@old*) jk2329@subst)))))))))))) (set! jk2152@find* (lambda (jk2307@sym* jk2308@subst) (map (lambda (jk230b@x) (let ((jk230d@t (assq jk230b@x jk2308@subst))) (if jk230d@t (cdr jk230d@t) (jke5e@syntax-violation 'import '"cannot find identifier" jk230b@x)))) jk2307@sym*))) (set! jk2154@rem* (lambda (jk22ff@sym* jk2300@subst) (let jk2305@f ((jk2303@subst jk2300@subst)) (if (null? jk2303@subst) '() (if (memq (caar jk2303@subst) jk22ff@sym*) (jk2305@f (cdr jk2303@subst)) (cons (car jk2303@subst) (jk2305@f (cdr jk2303@subst)))))))) (set! jk2156@remove-dups (lambda (jk22fd@ls) (if (null? jk22fd@ls) '() (if (memq (car jk22fd@ls) (cdr jk22fd@ls)) (jk2156@remove-dups (cdr jk22fd@ls)) (cons (car jk22fd@ls) (jk2156@remove-dups (cdr jk22fd@ls))))))) (set! jk2158@parse-library-name (lambda (jk2215@spec) (let ((jk2218@subversion? '#f) (jk221a@subversion-pred '#f) (jk221c@version-pred '#f)) (begin (set! jk2218@subversion? (lambda (jk22f9@x) (let ((jk22fb@x (jke64@syntax->datum jk22f9@x))) (and (integer? jk22fb@x) (exact? jk22fb@x) (>= jk22fb@x '0))))) (set! jk221a@subversion-pred (lambda (jk2299@x*) (let ((jk229b@t jk2299@x*)) (let ((jk229d@ls/false (jkd7e@syntax-dispatch jk229b@t 'any))) (if (and jk229d@ls/false (apply (lambda (jk229f@n) (jk2218@subversion? jk229f@n)) jk229d@ls/false)) (apply (lambda (jk22a1@n) (lambda (jk22a3@x) (= jk22a3@x (jke64@syntax->datum jk22a1@n)))) jk229d@ls/false) (let ((jk22a5@t jk229b@t)) (let ((jk22a7@ls/false (jkd7e@syntax-dispatch jk22a5@t '(any . each-any)))) (if (and jk22a7@ls/false (apply (lambda (jk22a9@p? jk22aa@sub*) (eq? (jke64@syntax->datum jk22a9@p?) 'and)) jk22a7@ls/false)) (apply (lambda (jk22ad@p? jk22ae@sub*) (let ((jk22b1@p* (map jk221a@subversion-pred jk22ae@sub*))) (lambda (jk22b3@x) (for-all (lambda (jk22b5@p) (jk22b5@p jk22b3@x)) jk22b1@p*)))) jk22a7@ls/false) (let ((jk22b7@t jk22a5@t)) (let ((jk22b9@ls/false (jkd7e@syntax-dispatch jk22b7@t '(any . each-any)))) (if (and jk22b9@ls/false (apply (lambda (jk22bb@p? jk22bc@sub*) (eq? (jke64@syntax->datum jk22bb@p?) 'or)) jk22b9@ls/false)) (apply (lambda (jk22bf@p? jk22c0@sub*) (let ((jk22c3@p* (map jk221a@subversion-pred jk22c0@sub*))) (lambda (jk22c5@x) (exists (lambda (jk22c7@p) (jk22c7@p jk22c5@x)) jk22c3@p*)))) jk22b9@ls/false) (let ((jk22c9@t jk22b7@t)) (let ((jk22cb@ls/false (jkd7e@syntax-dispatch jk22c9@t '(any any)))) (if (and jk22cb@ls/false (apply (lambda (jk22cd@p? jk22ce@sub) (eq? (jke64@syntax->datum jk22cd@p?) 'not)) jk22cb@ls/false)) (apply (lambda (jk22d1@p? jk22d2@sub) (let ((jk22d5@p (jk221a@subversion-pred jk22d2@sub))) (lambda (jk22d7@x) (not (jk22d5@p jk22d7@x))))) jk22cb@ls/false) (let ((jk22d9@t jk22c9@t)) (let ((jk22db@ls/false (jkd7e@syntax-dispatch jk22d9@t '(any any)))) (if (and jk22db@ls/false (apply (lambda (jk22dd@p? jk22de@n) (and (eq? (jke64@syntax->datum jk22dd@p?) '<=) (jk2218@subversion? jk22de@n))) jk22db@ls/false)) (apply (lambda (jk22e1@p? jk22e2@n) (lambda (jk22e5@x) (<= jk22e5@x (jke64@syntax->datum jk22e2@n)))) jk22db@ls/false) (let ((jk22e7@t jk22d9@t)) (let ((jk22e9@ls/false (jkd7e@syntax-dispatch jk22e7@t '(any any)))) (if (and jk22e9@ls/false (apply (lambda (jk22eb@p? jk22ec@n) (and (eq? (jke64@syntax->datum jk22eb@p?) '>=) (jk2218@subversion? jk22ec@n))) jk22e9@ls/false)) (apply (lambda (jk22ef@p? jk22f0@n) (lambda (jk22f3@x) (>= jk22f3@x (jke64@syntax->datum jk22f0@n)))) jk22e9@ls/false) (let ((jk22f5@t jk22e7@t)) (let ((jk22f7@ls/false (jkd7e@syntax-dispatch jk22f5@t '_))) (if jk22f7@ls/false (apply (lambda () (jke5e@syntax-violation 'import '"invalid sub-version spec" jk2215@spec jk2299@x*)) jk22f7@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk22f5@t)))))))))))))))))))))))) (set! jk221c@version-pred (lambda (jk2249@x*) (let ((jk224b@t jk2249@x*)) (let ((jk224d@ls/false (jkd7e@syntax-dispatch jk224b@t '()))) (if jk224d@ls/false (apply (lambda () (lambda (jk224f@x) '#t)) jk224d@ls/false) (let ((jk2251@t jk224b@t)) (let ((jk2253@ls/false (jkd7e@syntax-dispatch jk2251@t '(any . each-any)))) (if (and jk2253@ls/false (apply (lambda (jk2255@c jk2256@ver*) (eq? (jke64@syntax->datum jk2255@c) 'and)) jk2253@ls/false)) (apply (lambda (jk2259@c jk225a@ver*) (let ((jk225d@p* (map jk221c@version-pred jk225a@ver*))) (lambda (jk225f@x) (for-all (lambda (jk2261@p) (jk2261@p jk225f@x)) jk225d@p*)))) jk2253@ls/false) (let ((jk2263@t jk2251@t)) (let ((jk2265@ls/false (jkd7e@syntax-dispatch jk2263@t '(any . each-any)))) (if (and jk2265@ls/false (apply (lambda (jk2267@c jk2268@ver*) (eq? (jke64@syntax->datum jk2267@c) 'or)) jk2265@ls/false)) (apply (lambda (jk226b@c jk226c@ver*) (let ((jk226f@p* (map jk221c@version-pred jk226c@ver*))) (lambda (jk2271@x) (exists (lambda (jk2273@p) (jk2273@p jk2271@x)) jk226f@p*)))) jk2265@ls/false) (let ((jk2275@t jk2263@t)) (let ((jk2277@ls/false (jkd7e@syntax-dispatch jk2275@t '(any any)))) (if (and jk2277@ls/false (apply (lambda (jk2279@c jk227a@ver) (eq? (jke64@syntax->datum jk2279@c) 'not)) jk2277@ls/false)) (apply (lambda (jk227d@c jk227e@ver) (let ((jk2281@p (jk221c@version-pred jk227e@ver))) (lambda (jk2283@x) (not (jk2281@p jk2283@x))))) jk2277@ls/false) (let ((jk2285@t jk2275@t)) (let ((jk2287@ls/false (jkd7e@syntax-dispatch jk2285@t 'each-any))) (if jk2287@ls/false (apply (lambda (jk2289@sub*) (let ((jk228b@p* (map jk221a@subversion-pred jk2289@sub*))) (lambda (jk228d@x) (let jk2293@f ((jk228f@p* jk228b@p*) (jk2290@x jk228d@x)) (if (null? jk228f@p*) '#t (if (null? jk2290@x) '#f (and ((car jk228f@p*) (car jk2290@x)) (jk2293@f (cdr jk228f@p*) (cdr jk2290@x))))))))) jk2287@ls/false) (let ((jk2295@t jk2285@t)) (let ((jk2297@ls/false (jkd7e@syntax-dispatch jk2295@t '_))) (if jk2297@ls/false (apply (lambda () (jke5e@syntax-violation 'import '"invalid version spec" jk2215@spec jk2249@x*)) jk2297@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2295@t))))))))))))))))))))) (let jk221f@f ((jk221d@x jk2215@spec)) (let ((jk2221@t jk221d@x)) (let ((jk2223@ls/false (jkd7e@syntax-dispatch jk2221@t '(each-any)))) (if jk2223@ls/false (apply (lambda (jk2225@version-spec*) (values '() (jk221c@version-pred jk2225@version-spec*))) jk2223@ls/false) (let ((jk2227@t jk2221@t)) (let ((jk2229@ls/false (jkd7e@syntax-dispatch jk2227@t '(any . any)))) (if (and jk2229@ls/false (apply (lambda (jk222b@x jk222c@x*) (jk214a@idsyn? jk222b@x)) jk2229@ls/false)) (apply (lambda (jk222f@x jk2230@x*) (call-with-values (lambda () (jk221f@f jk2230@x*)) (lambda (jk2237@jk2234 jk2238@jk2236) (let ((jk223b@pred jk2238@jk2236) (jk223c@name jk2237@jk2234)) (values (cons (jke64@syntax->datum jk222f@x) jk223c@name) jk223b@pred))))) jk2229@ls/false) (let ((jk223f@t jk2227@t)) (let ((jk2241@ls/false (jkd7e@syntax-dispatch jk223f@t '()))) (if jk2241@ls/false (apply (lambda () (values '() (lambda (jk2243@x) '#t))) jk2241@ls/false) (let ((jk2245@t jk223f@t)) (let ((jk2247@ls/false (jkd7e@syntax-dispatch jk2245@t '_))) (if jk2247@ls/false (apply (lambda () (jke5e@syntax-violation '#f '"invalid import spec" jk2215@spec)) jk2247@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2245@t)))))))))))))))))) (set! jk215a@import-library (lambda (jk2205@spec*) (call-with-values (lambda () (jk2158@parse-library-name jk2205@spec*)) (lambda (jk220b@jk2208 jk220c@jk220a) (let ((jk220f@pred jk220c@jk220a) (jk2210@name jk220b@jk2208)) (begin (if (null? jk2210@name) (jke5e@syntax-violation 'import '"empty library name" jk2205@spec*) (void)) (let ((jk2213@lib (jk986@jk7cd@find-library-by-name jk2210@name))) (begin (if (not jk2213@lib) (jke5e@syntax-violation 'import '"cannot find library with required name" jk2210@name) (void)) (if (not (jk220f@pred (jk960@jk781@library-version jk2213@lib))) (jke5e@syntax-violation 'import '"library does not satisfy version specification" jk2205@spec* jk2213@lib) (void)) ((jkdea@imp-collector) jk2213@lib) (jk968@jk791@library-subst jk2213@lib))))))))) (set! jk215c@get-import (lambda (jk2177@spec) (let ((jk2179@t jk2177@spec)) (let ((jk217b@ls/false (jkd7e@syntax-dispatch jk2179@t '(any . each-any)))) (if (and jk217b@ls/false (apply (lambda (jk217d@x jk217e@x*) (not (memq (jke64@syntax->datum jk217d@x) '(for rename except only prefix library)))) jk217b@ls/false)) (apply (lambda (jk2181@x jk2182@x*) (jk215a@import-library (cons jk2181@x jk2182@x*))) jk217b@ls/false) (let ((jk2185@t jk2179@t)) (let ((jk2187@ls/false (jkd7e@syntax-dispatch jk2185@t '(any any . #(each (any any)))))) (if (and jk2187@ls/false (apply (lambda (jk2189@rename jk218a@isp jk218b@old* jk218c@new*) (and (eq? (jke64@syntax->datum jk2189@rename) 'rename) (for-all jk214a@idsyn? jk218b@old*) (for-all jk214a@idsyn? jk218c@new*))) jk2187@ls/false)) (apply (lambda (jk2191@rename jk2192@isp jk2193@old* jk2194@new*) (let ((jk2199@subst (jk215c@get-import jk2192@isp)) (jk219a@old* (map jke64@syntax->datum jk2193@old*)) (jk219b@new* (map jke64@syntax->datum jk2194@new*))) (let ((jk219f@old-label* (jk2152@find* jk219a@old* jk2199@subst))) (let ((jk21a1@subst (jk2154@rem* jk219a@old* jk2199@subst))) (jk214e@merge-substs (map cons jk219b@new* jk219f@old-label*) jk21a1@subst))))) jk2187@ls/false) (let ((jk21a3@t jk2185@t)) (let ((jk21a5@ls/false (jkd7e@syntax-dispatch jk21a3@t '(any any . each-any)))) (if (and jk21a5@ls/false (apply (lambda (jk21a7@except jk21a8@isp jk21a9@sym*) (and (eq? (jke64@syntax->datum jk21a7@except) 'except) (for-all jk214a@idsyn? jk21a9@sym*))) jk21a5@ls/false)) (apply (lambda (jk21ad@except jk21ae@isp jk21af@sym*) (let ((jk21b3@subst (jk215c@get-import jk21ae@isp))) (jk2154@rem* (map jke64@syntax->datum jk21af@sym*) jk21b3@subst))) jk21a5@ls/false) (let ((jk21b5@t jk21a3@t)) (let ((jk21b7@ls/false (jkd7e@syntax-dispatch jk21b5@t '(any any . each-any)))) (if (and jk21b7@ls/false (apply (lambda (jk21b9@only jk21ba@isp jk21bb@sym*) (and (eq? (jke64@syntax->datum jk21b9@only) 'only) (for-all jk214a@idsyn? jk21bb@sym*))) jk21b7@ls/false)) (apply (lambda (jk21bf@only jk21c0@isp jk21c1@sym*) (let ((jk21c5@subst (jk215c@get-import jk21c0@isp)) (jk21c6@sym* (map jke64@syntax->datum jk21c1@sym*))) (let ((jk21c9@sym* (jk2156@remove-dups jk21c6@sym*))) (let ((jk21cb@lab* (jk2152@find* jk21c9@sym* jk21c5@subst))) (map cons jk21c9@sym* jk21cb@lab*))))) jk21b7@ls/false) (let ((jk21cd@t jk21b5@t)) (let ((jk21cf@ls/false (jkd7e@syntax-dispatch jk21cd@t '(any any any)))) (if (and jk21cf@ls/false (apply (lambda (jk21d1@prefix jk21d2@isp jk21d3@p) (and (eq? (jke64@syntax->datum jk21d1@prefix) 'prefix) (jk214a@idsyn? jk21d3@p))) jk21cf@ls/false)) (apply (lambda (jk21d7@prefix jk21d8@isp jk21d9@p) (let ((jk21dd@subst (jk215c@get-import jk21d8@isp)) (jk21de@prefix (symbol->string (jke64@syntax->datum jk21d9@p)))) (map (lambda (jk21e1@x) (cons (string->symbol (string-append jk21de@prefix (symbol->string (car jk21e1@x)))) (cdr jk21e1@x))) jk21dd@subst))) jk21cf@ls/false) (let ((jk21e3@t jk21cd@t)) (let ((jk21e5@ls/false (jkd7e@syntax-dispatch jk21e3@t '(any each-any)))) (if (and jk21e5@ls/false (apply (lambda (jk21e7@library jk21e8@spec*) (eq? (jke64@syntax->datum jk21e7@library) 'library)) jk21e5@ls/false)) (apply (lambda (jk21eb@library jk21ec@spec*) (jk215a@import-library jk21ec@spec*)) jk21e5@ls/false) (let ((jk21ef@t jk21e3@t)) (let ((jk21f1@ls/false (jkd7e@syntax-dispatch jk21ef@t '(any any . any)))) (if (and jk21f1@ls/false (apply (lambda (jk21f3@for jk21f4@isp jk21f5@rest) (eq? (jke64@syntax->datum jk21f3@for) 'for)) jk21f1@ls/false)) (apply (lambda (jk21f9@for jk21fa@isp jk21fb@rest) (jk215c@get-import jk21fa@isp)) jk21f1@ls/false) (let ((jk21ff@t jk21ef@t)) (let ((jk2201@ls/false (jkd7e@syntax-dispatch jk21ff@t 'any))) (if jk2201@ls/false (apply (lambda (jk2203@spec) (jke5e@syntax-violation 'import '"invalid import spec" jk2203@spec)) jk2201@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk21ff@t))))))))))))))))))))))))))) (set! jk215e@add-imports! (lambda (jk2167@imp jk2168@h) (let ((jk216b@subst (jk215c@get-import jk2167@imp))) (for-each (lambda (jk216d@x) (let ((jk216f@name (car jk216d@x)) (jk2170@label (cdr jk216d@x))) (let ((jk2173@t (hashtable-ref jk2168@h jk216f@name '#f))) (if jk2173@t ((lambda (jk2175@l) (if (not (eq? jk2175@l jk2170@label)) (jk214c@dup-error jk216f@name) (void))) jk2173@t) (hashtable-set! jk2168@h jk216f@name jk2170@label))))) jk216b@subst)))) (lambda (jk215f@imp*) (let jk2165@f ((jk2161@imp* jk215f@imp*) (jk2162@h (make-eq-hashtable))) (if (null? jk2161@imp*) (hashtable-entries jk2162@h) (begin (jk215e@add-imports! (car jk2161@imp*) jk2162@h) (jk2165@f (cdr jk2161@imp*) jk2162@h)))))))) (set! jk2881@jkde0@parse-import-spec* jkde0@parse-import-spec*) (set! jkde2@make-top-rib (lambda (jk2355@names jk2356@labels) (let ((jk2359@rib (jkb2b@make-empty-rib))) (begin (vector-for-each (lambda (jk235b@name jk235c@label) (begin (if (not (symbol? jk235b@name)) (error 'make-top-rib '"BUG: not a symbol" jk235b@name) (void)) (jkb2f@extend-rib/nc! jk2359@rib (make-simple-struct 'stx '5 (list jk235b@name jkafb@top-mark* '() '())) jk235c@label))) jk2355@names jk2356@labels) jk2359@rib)))) (set! jk2882@jkde2@make-top-rib jkde2@make-top-rib) (set! jkde4@make-collector (lambda () (let ((jk235f@ls '())) (lambda jk2363 (let ((jk2364 (length jk2363))) (if (= jk2364 '0) (apply (lambda () jk235f@ls) jk2363) (if (= jk2364 '1) (apply (lambda (jk2361@x) (set! jk235f@ls (jkaf4@set-cons jk2361@x jk235f@ls))) jk2363) (error 'apply '"invalid arg count")))))))) (set! jk2883@jkde4@make-collector jkde4@make-collector) (set! jkde6@inv-collector (jk6c1@jk5a0@make-parameter (lambda jk2365@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (jk2367@x) (begin (if (not (procedure? jk2367@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" jk2367@x) (void)) jk2367@x)))) (set! jk2884@jkde6@inv-collector jkde6@inv-collector) (set! jkde8@vis-collector (jk6c1@jk5a0@make-parameter (lambda jk2369@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (jk236b@x) (begin (if (not (procedure? jk236b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" jk236b@x) (void)) jk236b@x)))) (set! jk2885@jkde8@vis-collector jkde8@vis-collector) (set! jkdea@imp-collector (jk6c1@jk5a0@make-parameter (lambda jk236d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (jk236f@x) (begin (if (not (procedure? jk236f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" jk236f@x) (void)) jk236f@x)))) (set! jk2886@jkdea@imp-collector jkdea@imp-collector) (set! jkdec@chi-library-internal (lambda (jk2371@e* jk2372@rib jk2373@top?) (call-with-values (lambda () (jkdd6@chi-body* jk2371@e* '() '() '() '() '() '() '() jk2372@rib jk2373@top?)) (lambda (jk2387@jk2378 jk2388@jk237a jk2389@jk237c jk238a@jk237e jk238b@jk2380 jk238c@jk2382 jk238d@jk2384 jk238e@jk2386) (let ((jk2397@exp* jk238e@jk2386) (jk2398@_kwd* jk238d@jk2384) (jk2399@mod** jk238c@jk2382) (jk239a@rhs* jk238b@jk2380) (jk239b@lex* jk238a@jk237e) (jk239c@mr jk2389@jk237c) (jk239d@r jk2388@jk237a) (jk239e@e* jk2387@jk2378)) (values (append (apply append (reverse jk2399@mod**)) jk239e@e*) jk239d@r jk239c@mr (reverse jk239b@lex*) (reverse jk239a@rhs*) jk2397@exp*)))))) (set! jk2887@jkdec@chi-library-internal jkdec@chi-library-internal) (set! jkdee@chi-interaction-expr (lambda (jk23a7@e jk23a8@rib jk23a9@r) (call-with-values (lambda () (jkdd6@chi-body* (list jk23a7@e) jk23a9@r jk23a9@r '() '() '() '() '() jk23a8@rib '#t)) (lambda (jk23bd@jk23ae jk23be@jk23b0 jk23bf@jk23b2 jk23c0@jk23b4 jk23c1@jk23b6 jk23c2@jk23b8 jk23c3@jk23ba jk23c4@jk23bc) (let ((jk23cd@_exp* jk23c4@jk23bc) (jk23ce@_kwd* jk23c3@jk23ba) (jk23cf@mod** jk23c2@jk23b8) (jk23d0@rhs* jk23c1@jk23b6) (jk23d1@lex* jk23c0@jk23b4) (jk23d2@mr jk23bf@jk23b2) (jk23d3@r jk23be@jk23b0) (jk23d4@e* jk23bd@jk23ae)) (let ((jk23dd@e* (jkdae@expand-interaction-rhs*/init* (reverse jk23d1@lex*) (reverse jk23d0@rhs*) (append (apply append (reverse jk23cf@mod**)) jk23d4@e*) jk23d3@r jk23d2@mr))) (let ((jk23df@e (if (null? jk23dd@e*) (jkadd@jka38@build-void) (if (null? (cdr jk23dd@e*)) (car jk23dd@e*) (jkadc@jka36@build-sequence '#f jk23dd@e*))))) (values jk23df@e jk23d3@r)))))))) (set! jk2888@jkdee@chi-interaction-expr jkdee@chi-interaction-expr) (set! jkdf0@library-body-expander (lambda (jk23e1@name jk23e2@main-exp* jk23e3@imp* jk23e4@b* jk23e5@top?) (let ((jk23ec@itc '#f)) (begin (set! jk23ec@itc (jkde4@make-collector)) (let ((jk23f5@jk23ee jkdea@imp-collector) (jk23f6@jk23f0 jke6e@top-level-context) (jk23f7@jk23f2 jk23ec@itc) (jk23f8@jk23f4 '#f)) (let ((jk23fd@swap (lambda () (begin (let ((jk23ff@t (jk23f5@jk23ee))) (begin (jk23f5@jk23ee jk23f7@jk23f2) (set! jk23f7@jk23f2 jk23ff@t))) (let ((jk2401@t (jk23f6@jk23f0))) (begin (jk23f6@jk23f0 jk23f8@jk23f4) (set! jk23f8@jk23f4 jk2401@t))))))) (dynamic-wind jk23fd@swap (lambda () (call-with-values (lambda () (jkde0@parse-import-spec* jk23e3@imp*)) (lambda (jk2407@jk2404 jk2408@jk2406) (let ((jk240b@subst-labels jk2408@jk2406) (jk240c@subst-names jk2407@jk2404)) (let ((jk240f@rib (jkde2@make-top-rib jk240c@subst-names jk240b@subst-labels))) (let ((jk2412@wrap '#f)) (begin (set! jk2412@wrap (lambda (jk248d@x) (make-simple-struct 'stx '5 (list jk248d@x jkafb@top-mark* (list jk240f@rib) '())))) (let ((jk2413@b* (map jk2412@wrap jk23e4@b*)) (jk2414@main-exp* (map jk2412@wrap jk23e2@main-exp*)) (jk2415@rtc (jkde4@make-collector)) (jk2416@vtc (jkde4@make-collector))) (let ((jk2423@jk241c jkde6@inv-collector) (jk2424@jk241e jkde8@vis-collector) (jk2425@jk2420 jk2415@rtc) (jk2426@jk2422 jk2416@vtc)) (let ((jk242b@swap (lambda () (begin (let ((jk242d@t (jk2423@jk241c))) (begin (jk2423@jk241c jk2425@jk2420) (set! jk2425@jk2420 jk242d@t))) (let ((jk242f@t (jk2424@jk241e))) (begin (jk2424@jk241e jk2426@jk2422) (set! jk2426@jk2422 jk242f@t))))))) (dynamic-wind jk242b@swap (lambda () (call-with-values (lambda () (jkdec@chi-library-internal jk2413@b* jk240f@rib jk23e5@top?)) (lambda (jk243d@jk2432 jk243e@jk2434 jk243f@jk2436 jk2440@jk2438 jk2441@jk243a jk2442@jk243c) (let ((jk2449@internal-exp* jk2442@jk243c) (jk244a@rhs* jk2441@jk243a) (jk244b@lex* jk2440@jk2438) (jk244c@mr jk243f@jk2436) (jk244d@r jk243e@jk2434) (jk244e@init* jk243d@jk2432)) (call-with-values (lambda () (jkdda@parse-exports (append jk2414@main-exp* jk2449@internal-exp*))) (lambda (jk2459@jk2456 jk245a@jk2458) (let ((jk245d@exp-id* jk245a@jk2458) (jk245e@exp-name* jk2459@jk2456)) (begin (jkb33@seal-rib! jk240f@rib) (let ((jk2461@init* (jkd9c@chi-expr* jk244e@init* jk244d@r jk244c@mr))) (let ((jk2463@rhs* (jkdb0@chi-rhs* jk244a@rhs* jk244d@r jk244c@mr))) (begin (jkb35@unseal-rib! jk240f@rib) (let ((jk2465@loc* (map jkb01@gen-global jk244b@lex*)) (jk2466@export-subst (jke48@make-export-subst jk245e@exp-name* jk245d@exp-id*))) (let ((jk246a@errstr '#f)) (begin (set! jk246a@errstr '"attempt to export mutated variable") (call-with-values (lambda () (jke4a@make-export-env/macros jk244b@lex* jk2465@loc* jk244d@r)) (lambda (jk2471@jk246c jk2472@jk246e jk2473@jk2470) (let ((jk2477@macro* jk2473@jk2470) (jk2478@global* jk2472@jk246e) (jk2479@export-env jk2471@jk246c)) (begin (for-each (lambda (jk247d@s) (let ((jk247f@name (car jk247d@s)) (jk2480@label (cdr jk247d@s))) (let ((jk2483@p (assq jk2480@label jk2479@export-env))) (if jk2483@p (let ((jk2485@b (cdr jk2483@p))) (let ((jk2487@type (car jk2485@b))) (if (eq? jk2487@type 'mutable) (jke5e@syntax-violation 'export jk246a@errstr jk247f@name) (void)))) (void))))) jk2466@export-subst) (let ((jk2489@invoke-body (jkae2@jka42@build-library-letrec* '#f jk23e1@name jk244b@lex* jk2465@loc* jk2463@rhs* (if (null? jk2461@init*) (jkadd@jka38@build-void) (jkadc@jka36@build-sequence '#f jk2461@init*)))) (jk248a@invoke-definitions (map jkad9@jk995@build-global-define (map cdr jk2478@global*)))) (values (jk23ec@itc) (jk2415@rtc) (jk2416@vtc) (jkadc@jka36@build-sequence '#f (append jk248a@invoke-definitions (list jk2489@invoke-body))) jk2477@macro* jk2466@export-subst jk2479@export-env)))))))))))))))))))) jk242b@swap))))))))))) jk23fd@swap))))))) (set! jk2889@jkdf0@library-body-expander jkdf0@library-body-expander) (set! jkdf2@core-library-expander (lambda (jk248f@e jk2490@verify-name) (call-with-values (lambda () (jkdde@parse-library jk248f@e)) (lambda (jk249b@jk2494 jk249c@jk2496 jk249d@jk2498 jk249e@jk249a) (let ((jk24a3@b* jk249e@jk249a) (jk24a4@imp* jk249d@jk2498) (jk24a5@exp* jk249c@jk2496) (jk24a6@name* jk249b@jk2494)) (call-with-values (lambda () (jkddc@parse-library-name jk24a6@name*)) (lambda (jk24af@jk24ac jk24b0@jk24ae) (let ((jk24b3@ver jk24b0@jk24ae) (jk24b4@name jk24af@jk24ac)) (begin (jk2490@verify-name jk24b4@name) (call-with-values (lambda () (jkdf0@library-body-expander jk24b4@name jk24a5@exp* jk24a4@imp* jk24a3@b* '#f)) (lambda (jk24c5@jk24b8 jk24c6@jk24ba jk24c7@jk24bc jk24c8@jk24be jk24c9@jk24c0 jk24ca@jk24c2 jk24cb@jk24c4) (let ((jk24d3@export-env jk24cb@jk24c4) (jk24d4@export-subst jk24ca@jk24c2) (jk24d5@visit-code jk24c9@jk24c0) (jk24d6@invoke-code jk24c8@jk24be) (jk24d7@visit-req* jk24c7@jk24bc) (jk24d8@invoke-req* jk24c6@jk24ba) (jk24d9@imp* jk24c5@jk24b8)) (values jk24b4@name jk24b3@ver jk24d9@imp* jk24d8@invoke-req* jk24d7@visit-req* jk24d6@invoke-code jk24d5@visit-code jk24d4@export-subst jk24d3@export-env))))))))))))) (set! jk288a@jkdf2@core-library-expander jkdf2@core-library-expander) (set! jkdf4@parse-top-level-program (lambda (jk24e1@e*) (let ((jk24e3@t jk24e1@e*)) (let ((jk24e5@ls/false (jkd7e@syntax-dispatch jk24e3@t '((any . each-any) . each-any)))) (if (and jk24e5@ls/false (apply (lambda (jk24e7@import jk24e8@imp* jk24e9@b*) (eq? (jke64@syntax->datum jk24e7@import) 'import)) jk24e5@ls/false)) (apply (lambda (jk24ed@import jk24ee@imp* jk24ef@b*) (values jk24ee@imp* jk24ef@b*)) jk24e5@ls/false) (let ((jk24f3@t jk24e3@t)) (let ((jk24f5@ls/false (jkd7e@syntax-dispatch jk24f3@t '((any . any) . any)))) (if (and jk24f5@ls/false (apply (lambda (jk24f7@import jk24f8@x jk24f9@y) (eq? (jke64@syntax->datum jk24f7@import) 'import)) jk24f5@ls/false)) (apply (lambda (jk24fd@import jk24fe@x jk24ff@y) (jke5e@syntax-violation 'expander '"invalid syntax of top-level program" (jkb71@syntax-car jk24e1@e*))) jk24f5@ls/false) (let ((jk2503@t jk24f3@t)) (let ((jk2505@ls/false (jkd7e@syntax-dispatch jk2503@t '_))) (if jk2505@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) jk2505@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2503@t)))))))))))) (set! jk288b@jkdf4@parse-top-level-program jkdf4@parse-top-level-program) (set! jkdf6@top-level-expander (lambda (jk2507@e*) (call-with-values (lambda () (jkdf4@parse-top-level-program jk2507@e*)) (lambda (jk250d@jk250a jk250e@jk250c) (let ((jk2511@b* jk250e@jk250c) (jk2512@imp* jk250d@jk250a)) (call-with-values (lambda () (jkdf0@library-body-expander '() '() jk2512@imp* jk2511@b* '#t)) (lambda (jk2523@jk2516 jk2524@jk2518 jk2525@jk251a jk2526@jk251c jk2527@jk251e jk2528@jk2520 jk2529@jk2522) (let ((jk2531@export-env jk2529@jk2522) (jk2532@export-subst jk2528@jk2520) (jk2533@visit-code jk2527@jk251e) (jk2534@invoke-code jk2526@jk251c) (jk2535@visit-req* jk2525@jk251a) (jk2536@invoke-req* jk2524@jk2518) (jk2537@imp* jk2523@jk2516)) (values jk2536@invoke-req* jk2534@invoke-code))))))))) (set! jk288c@jkdf6@top-level-expander jkdf6@top-level-expander) (set! jkdf8@rp (jk6be@jk59a@make-record-printer 'env (lambda (jk253f@x jk2540@p jk2541@wr) (display '"#<environment>" jk2540@p)))) (set! jk288d@jkdf8@rp jkdf8@rp) (set! jke02@env? (lambda (jk2545@x) (and (simple-struct? jk2545@x) (eq? (simple-struct-name jk2545@x) 'env)))) (set! jk288e@jke02@env? jke02@env?) (set! jke04@env-names (lambda (jk2547@x) (simple-struct-ref jk2547@x '0))) (set! jk288f@jke04@env-names jke04@env-names) (set! jke06@set-env-names! (lambda (jk2549@x jk254a@val) (simple-struct-set! jk2549@x '0 jk254a@val))) (set! jk2890@jke06@set-env-names! jke06@set-env-names!) (set! jke08@env-labels (lambda (jk254d@x) (simple-struct-ref jk254d@x '1))) (set! jk2891@jke08@env-labels jke08@env-labels) (set! jke0a@set-env-labels! (lambda (jk254f@x jk2550@val) (simple-struct-set! jk254f@x '1 jk2550@val))) (set! jk2892@jke0a@set-env-labels! jke0a@set-env-labels!) (set! jke0c@env-itc (lambda (jk2553@x) (simple-struct-ref jk2553@x '2))) (set! jk2893@jke0c@env-itc jke0c@env-itc) (set! jke0e@set-env-itc! (lambda (jk2555@x jk2556@val) (simple-struct-set! jk2555@x '2 jk2556@val))) (set! jk2894@jke0e@set-env-itc! jke0e@set-env-itc!) (set! jke10@dummy '3) (set! jk2895@jke10@dummy jke10@dummy) (set! jke12@rp (jk6be@jk59a@make-record-printer 'interaction-env (lambda (jk2559@x jk255a@p jk255b@wr) (display '"#<environment>" jk255a@p)))) (set! jk2896@jke12@rp jke12@rp) (set! jke1c@interaction-env? (lambda (jk255f@x) (and (simple-struct? jk255f@x) (eq? (simple-struct-name jk255f@x) 'interaction-env)))) (set! jk2897@jke1c@interaction-env? jke1c@interaction-env?) (set! jke1e@interaction-env-rib (lambda (jk2561@x) (simple-struct-ref jk2561@x '0))) (set! jk2898@jke1e@interaction-env-rib jke1e@interaction-env-rib) (set! jke20@set-interaction-env-rib! (lambda (jk2563@x jk2564@val) (simple-struct-set! jk2563@x '0 jk2564@val))) (set! jk2899@jke20@set-interaction-env-rib! jke20@set-interaction-env-rib!) (set! jke22@interaction-env-r (lambda (jk2567@x) (simple-struct-ref jk2567@x '1))) (set! jk289a@jke22@interaction-env-r jke22@interaction-env-r) (set! jke24@set-interaction-env-r! (lambda (jk2569@x jk256a@val) (simple-struct-set! jk2569@x '1 jk256a@val))) (set! jk289b@jke24@set-interaction-env-r! jke24@set-interaction-env-r!) (set! jke26@interaction-env-locs (lambda (jk256d@x) (simple-struct-ref jk256d@x '2))) (set! jk289c@jke26@interaction-env-locs jke26@interaction-env-locs) (set! jke28@set-interaction-env-locs! (lambda (jk256f@x jk2570@val) (simple-struct-set! jk256f@x '2 jk2570@val))) (set! jk289d@jke28@set-interaction-env-locs! jke28@set-interaction-env-locs!) (set! jke2a@dummy '3) (set! jk289e@jke2a@dummy jke2a@dummy) (set! jke2c@interaction-environment-symbols (lambda () (jke34@environment-symbols (jke6c@interaction-environment)))) (set! jk289f@jke2c@interaction-environment-symbols jke2c@interaction-environment-symbols) (set! jke2e@environment-bindings (lambda (jk2573@e) (vector->list (vector-map (lambda (jk2575@name jk2576@label) (jke30@parse-binding (cons jk2575@name (jk98c@jk7d9@imported-label->binding jk2576@label)))) (jke04@env-names jk2573@e) (jke08@env-labels jk2573@e))))) (set! jk28a0@jke2e@environment-bindings jke2e@environment-bindings) (set! jke30@parse-binding (lambda (jk2579@b) (cons (car jk2579@b) (let ((jk257b@t (cadr jk2579@b))) (if (memv jk257b@t '(core-prim global)) 'procedure (if (memv jk257b@t '(core-macro macro global-macro)) 'syntax (if (memv jk257b@t '($core-rtd)) 'record (if (eq? (car jk2579@b) (cadr jk2579@b)) 'syntax 'unknown)))))))) (set! jk28a1@jke30@parse-binding jke30@parse-binding) (set! jke32@environment? (lambda (jk257d@x) (or (jke02@env? jk257d@x) (jke1c@interaction-env? jk257d@x)))) (set! jk28a2@jke32@environment? jke32@environment?) (set! jke34@environment-symbols (lambda (jk257f@x) (if (jke02@env? jk257f@x) (vector->list (jke04@env-names jk257f@x)) (if (jke1c@interaction-env? jk257f@x) (map values (jkb15@rib-sym* (jke1e@interaction-env-rib jk257f@x))) (assertion-violation 'environment-symbols '"not an environment" jk257f@x))))) (set! jk28a3@jke34@environment-symbols jke34@environment-symbols) (set! jke36@environment (lambda jk2581@imp* (let ((jk2583@itc (jkde4@make-collector))) (let ((jk2589@jk2586 jkdea@imp-collector) (jk258a@jk2588 jk2583@itc)) (let ((jk258d@swap (lambda () (let ((jk258f@t (jk2589@jk2586))) (begin (jk2589@jk2586 jk258a@jk2588) (set! jk258a@jk2588 jk258f@t)))))) (dynamic-wind jk258d@swap (lambda () (call-with-values (lambda () (jkde0@parse-import-spec* jk2581@imp*)) (lambda (jk2595@jk2592 jk2596@jk2594) (let ((jk2599@subst-labels jk2596@jk2594) (jk259a@subst-names jk2595@jk2592)) (make-simple-struct 'env '4 (list jk259a@subst-names jk2599@subst-labels jk2583@itc)))))) jk258d@swap)))))) (set! jk28a4@jke36@environment jke36@environment) (set! jke38@null-environment (lambda (jk259d@n) (begin (if (not (eqv? jk259d@n '5)) (assertion-violation 'null-environment '"not 5" jk259d@n) (void)) (jke36@environment '(psyntax null-environment-5))))) (set! jk28a5@jke38@null-environment jke38@null-environment) (set! jke3a@scheme-report-environment (lambda (jk259f@n) (begin (if (not (eqv? jk259f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" jk259f@n) (void)) (jke36@environment '(psyntax scheme-report-environment-5))))) (set! jk28a6@jke3a@scheme-report-environment jke3a@scheme-report-environment) (set! jke3c@expand (lambda (jk25a1@x jk25a2@env) (if (jke02@env? jk25a2@env) (let ((jk25a5@rib (jkde2@make-top-rib (jke04@env-names jk25a2@env) (jke08@env-labels jk25a2@env)))) (let ((jk25a7@x (make-simple-struct 'stx '5 (list jk25a1@x jkafb@top-mark* (list jk25a5@rib) '()))) (jk25a8@itc (jke0c@env-itc jk25a2@env)) (jk25a9@rtc (jkde4@make-collector)) (jk25aa@vtc (jkde4@make-collector))) (let ((jk25af@x (let ((jk25c1@jk25b2 jke6e@top-level-context) (jk25c2@jk25b4 jkde6@inv-collector) (jk25c3@jk25b6 jkde8@vis-collector) (jk25c4@jk25b8 jkdea@imp-collector) (jk25c5@jk25ba '#f) (jk25c6@jk25bc jk25a9@rtc) (jk25c7@jk25be jk25aa@vtc) (jk25c8@jk25c0 jk25a8@itc)) (let ((jk25d1@swap (lambda () (begin (let ((jk25d3@t (jk25c1@jk25b2))) (begin (jk25c1@jk25b2 jk25c5@jk25ba) (set! jk25c5@jk25ba jk25d3@t))) (let ((jk25d5@t (jk25c2@jk25b4))) (begin (jk25c2@jk25b4 jk25c6@jk25bc) (set! jk25c6@jk25bc jk25d5@t))) (let ((jk25d7@t (jk25c3@jk25b6))) (begin (jk25c3@jk25b6 jk25c7@jk25be) (set! jk25c7@jk25be jk25d7@t))) (let ((jk25d9@t (jk25c4@jk25b8))) (begin (jk25c4@jk25b8 jk25c8@jk25c0) (set! jk25c8@jk25c0 jk25d9@t))))))) (dynamic-wind jk25d1@swap (lambda () (jkda0@chi-expr jk25a7@x '() '())) jk25d1@swap))))) (begin (jkb33@seal-rib! jk25a5@rib) (values jk25af@x (jk25a9@rtc)))))) (if (jke1c@interaction-env? jk25a2@env) (let ((jk25db@rib (jke1e@interaction-env-rib jk25a2@env)) (jk25dc@r (jke22@interaction-env-r jk25a2@env)) (jk25dd@rtc (jkde4@make-collector))) (let ((jk25e1@x (make-simple-struct 'stx '5 (list jk25a1@x jkafb@top-mark* (list jk25db@rib) '())))) (call-with-values (lambda () (let ((jk25f7@jk25e8 jke6e@top-level-context) (jk25f8@jk25ea jkde6@inv-collector) (jk25f9@jk25ec jkde8@vis-collector) (jk25fa@jk25ee jkdea@imp-collector) (jk25fb@jk25f0 jk25a2@env) (jk25fc@jk25f2 jk25dd@rtc) (jk25fd@jk25f4 (jkde4@make-collector)) (jk25fe@jk25f6 (jkde4@make-collector))) (let ((jk2607@swap (lambda () (begin (let ((jk2609@t (jk25f7@jk25e8))) (begin (jk25f7@jk25e8 jk25fb@jk25f0) (set! jk25fb@jk25f0 jk2609@t))) (let ((jk260b@t (jk25f8@jk25ea))) (begin (jk25f8@jk25ea jk25fc@jk25f2) (set! jk25fc@jk25f2 jk260b@t))) (let ((jk260d@t (jk25f9@jk25ec))) (begin (jk25f9@jk25ec jk25fd@jk25f4) (set! jk25fd@jk25f4 jk260d@t))) (let ((jk260f@t (jk25fa@jk25ee))) (begin (jk25fa@jk25ee jk25fe@jk25f6) (set! jk25fe@jk25f6 jk260f@t))))))) (dynamic-wind jk2607@swap (lambda () (jkdee@chi-interaction-expr jk25e1@x jk25db@rib jk25dc@r)) jk2607@swap)))) (lambda (jk2611@jk25e4 jk2612@jk25e6) (let ((jk2615@r^ jk2612@jk25e6) (jk2616@e jk2611@jk25e4)) (begin (jke24@set-interaction-env-r! jk25a2@env jk2615@r^) (values jk2616@e (jk25dd@rtc)))))))) (assertion-violation 'expand '"not an environment" jk25a2@env))))) (set! jk28a7@jke3c@expand jke3c@expand) (set! jke3e@eval (lambda (jk2619@x jk261a@env) (begin (if (not (jke32@environment? jk261a@env)) (error 'eval '"not an environment" jk261a@env) (void)) (call-with-values (lambda () (jke3c@expand jk2619@x jk261a@env)) (lambda (jk2621@jk261e jk2622@jk2620) (let ((jk2625@invoke-req* jk2622@jk2620) (jk2626@x jk2621@jk261e)) (begin (for-each jk98d@jk7db@invoke-library jk2625@invoke-req*) (eval-core (jk717@jk6cf@expanded->core jk2626@x))))))))) (set! jk28a8@jke3e@eval jke3e@eval) (set! jke40@library-expander (lambda jk2697 (let ((jk2698 (length jk2697))) (if (= jk2698 '3) (apply (lambda (jk2629@x jk262a@filename jk262b@verify-name) (let ((jk2630@build-visit-code '#f) (jk2632@visit! '#f)) (begin (set! jk2630@build-visit-code (lambda (jk2685@macro*) (if (null? jk2685@macro*) (jkadd@jka38@build-void) (jkadc@jka36@build-sequence '#f (map (lambda (jk2687@x) (let ((jk2689@loc (car jk2687@x)) (jk268a@src (cddr jk2687@x))) (list 'set! jk2689@loc jk268a@src))) jk2685@macro*))))) (set! jk2632@visit! (lambda (jk267d@macro*) (for-each (lambda (jk267f@x) (let ((jk2681@loc (car jk267f@x)) (jk2682@proc (cadr jk267f@x))) (set-symbol-value! jk2681@loc jk2682@proc))) jk267d@macro*))) (call-with-values (lambda () (jkdf2@core-library-expander jk2629@x jk262b@verify-name)) (lambda (jk2645@jk2634 jk2646@jk2636 jk2647@jk2638 jk2648@jk263a jk2649@jk263c jk264a@jk263e jk264b@jk2640 jk264c@jk2642 jk264d@jk2644) (let ((jk2657@export-env jk264d@jk2644) (jk2658@export-subst jk264c@jk2642) (jk2659@macro* jk264b@jk2640) (jk265a@invoke-code jk264a@jk263e) (jk265b@vis* jk2649@jk263c) (jk265c@inv* jk2648@jk263a) (jk265d@imp* jk2647@jk2638) (jk265e@ver jk2646@jk2636) (jk265f@name jk2645@jk2634)) (let ((jk2669@id (gensym)) (jk266a@name jk265f@name) (jk266b@ver jk265e@ver) (jk266c@imp* (map jk991@jk7e3@library-spec jk265d@imp*)) (jk266d@vis* (map jk991@jk7e3@library-spec jk265b@vis*)) (jk266e@inv* (map jk991@jk7e3@library-spec jk265c@inv*)) (jk266f@visit-proc (lambda () (jk2632@visit! jk2659@macro*))) (jk2670@invoke-proc (lambda () (eval-core (jk717@jk6cf@expanded->core jk265a@invoke-code)))) (jk2671@visit-code (jk2630@build-visit-code jk2659@macro*)) (jk2672@invoke-code jk265a@invoke-code)) (begin (jk98b@jk7d7@install-library jk2669@id jk266a@name jk266b@ver jk266c@imp* jk266d@vis* jk266e@inv* jk2658@export-subst jk2657@export-env jk266f@visit-proc jk2670@invoke-proc jk2671@visit-code jk2672@invoke-code '#t jk262a@filename) (values jk2669@id jk266a@name jk266b@ver jk266c@imp* jk266d@vis* jk266e@inv* jk2672@invoke-code jk2671@visit-code jk2658@export-subst jk2657@export-env))))))))) jk2697) (if (= jk2698 '2) (apply (lambda (jk268d@x jk268e@filename) (jke40@library-expander jk268d@x jk268e@filename (lambda (jk2691@x) (values)))) jk2697) (if (= jk2698 '1) (apply (lambda (jk2693@x) (jke40@library-expander jk2693@x '#f (lambda (jk2695@x) (values)))) jk2697) (error 'apply '"invalid arg count"))))))) (set! jk28a9@jke40@library-expander jke40@library-expander) (set! jke42@boot-library-expand (lambda (jk2699@x) (call-with-values (lambda () (jke40@library-expander jk2699@x)) (lambda (jk26af@jk269c jk26b0@jk269e jk26b1@jk26a0 jk26b2@jk26a2 jk26b3@jk26a4 jk26b4@jk26a6 jk26b5@jk26a8 jk26b6@jk26aa jk26b7@jk26ac jk26b8@jk26ae) (let ((jk26c3@export-env jk26b8@jk26ae) (jk26c4@export-subst jk26b7@jk26ac) (jk26c5@visit-code jk26b6@jk26aa) (jk26c6@invoke-code jk26b5@jk26a8) (jk26c7@inv* jk26b4@jk26a6) (jk26c8@vis* jk26b3@jk26a4) (jk26c9@imp* jk26b2@jk26a2) (jk26ca@ver jk26b1@jk26a0) (jk26cb@name jk26b0@jk269e) (jk26cc@id jk26af@jk269c)) (values jk26cb@name jk26c6@invoke-code jk26c4@export-subst jk26c3@export-env)))))) (set! jk28aa@jke42@boot-library-expand jke42@boot-library-expand) (set! jke44@rev-map-append (lambda (jk26d7@f jk26d8@ls jk26d9@ac) (if (null? jk26d8@ls) jk26d9@ac (jke44@rev-map-append jk26d7@f (cdr jk26d8@ls) (cons (jk26d7@f (car jk26d8@ls)) jk26d9@ac))))) (set! jk28ab@jke44@rev-map-append jke44@rev-map-append) (set! jke46@build-exports (lambda (jk26dd@lex*+loc* jk26de@init*) (jkadc@jka36@build-sequence '#f (cons (jkadd@jka38@build-void) (jke44@rev-map-append (lambda (jk26e1@x) (list 'set! (cdr jk26e1@x) (car jk26e1@x))) jk26dd@lex*+loc* jk26de@init*))))) (set! jk28ac@jke46@build-exports jke46@build-exports) (set! jke48@make-export-subst (lambda (jk26e3@name* jk26e4@id*) (map (lambda (jk26e7@name jk26e8@id) (let ((jk26eb@label (jkb8d@id->label jk26e8@id))) (begin (if (not jk26eb@label) (jke5e@syntax-violation '#f '"cannot export unbound identifier" jk26e8@id) (void)) (cons jk26e7@name jk26eb@label)))) jk26e3@name* jk26e4@id*))) (set! jk28ad@jke48@make-export-subst jke48@make-export-subst) (set! jke4a@make-export-env/macros (lambda (jk26ed@lex* jk26ee@loc* jk26ef@r) (let ((jk26f4@lookup '#f)) (begin (set! jk26f4@lookup (lambda (jk2711@x) (let jk2719@f ((jk2713@x jk2711@x) (jk2714@lex* jk26ed@lex*) (jk2715@loc* jk26ee@loc*)) (if (pair? jk2714@lex*) (if (eq? jk2713@x (car jk2714@lex*)) (car jk2715@loc*) (jk2719@f jk2713@x (cdr jk2714@lex*) (cdr jk2715@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let jk26fd@f ((jk26f5@r jk26ef@r) (jk26f6@env '()) (jk26f7@global* '()) (jk26f8@macro* '())) (if (null? jk26f5@r) (values jk26f6@env jk26f7@global* jk26f8@macro*) (let ((jk26ff@x (car jk26f5@r))) (let ((jk2701@label (car jk26ff@x)) (jk2702@b (cdr jk26ff@x))) (let ((jk2705@t (jkb93@binding-type jk2702@b))) (if (memv jk2705@t '(lexical)) (let ((jk2707@v (jkb95@binding-value jk2702@b))) (let ((jk2709@loc (jk26f4@lookup (jkd08@lexical-var jk2707@v))) (jk270a@type (if (jkd0a@lexical-mutable? jk2707@v) 'mutable 'global))) (jk26fd@f (cdr jk26f5@r) (cons (cons* jk2701@label jk270a@type jk2709@loc) jk26f6@env) (cons (cons (jkd08@lexical-var jk2707@v) jk2709@loc) jk26f7@global*) jk26f8@macro*))) (if (memv jk2705@t '(local-macro)) (let ((jk270d@loc (gensym))) (jk26fd@f (cdr jk26f5@r) (cons (cons* jk2701@label 'global-macro jk270d@loc) jk26f6@env) jk26f7@global* (cons (cons jk270d@loc (jkb95@binding-value jk2702@b)) jk26f8@macro*))) (if (memv jk2705@t '(local-macro!)) (let ((jk270f@loc (gensym))) (jk26fd@f (cdr jk26f5@r) (cons (cons* jk2701@label 'global-macro! jk270f@loc) jk26f6@env) jk26f7@global* (cons (cons jk270f@loc (jkb95@binding-value jk2702@b)) jk26f8@macro*))) (if (memv jk2705@t '($rtd $module)) (jk26fd@f (cdr jk26f5@r) (cons jk26ff@x jk26f6@env) jk26f7@global* jk26f8@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jkb93@binding-type jk2702@b) (jkb95@binding-value jk2702@b))))))))))))))) (set! jk28ae@jke4a@make-export-env/macros jke4a@make-export-env/macros) (set! jke4c@generate-temporaries (lambda (jk271b@ls) (let ((jk271d@t jk271b@ls)) (let ((jk271f@ls/false (jkd7e@syntax-dispatch jk271d@t 'each-any))) (if jk271f@ls/false (apply (lambda (jk2721@ls) (map (lambda (jk2723@x) (make-simple-struct 'stx '5 (list (let ((jk2725@x (jke64@syntax->datum jk2723@x))) (if (or (symbol? jk2725@x) (string? jk2725@x)) (gensym jk2725@x) (gensym 't))) jkafb@top-mark* '() '()))) jk2721@ls)) jk271f@ls/false) (let ((jk2727@t jk271d@t)) (let ((jk2729@ls/false (jkd7e@syntax-dispatch jk2727@t '_))) (if jk2729@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) jk2729@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk2727@t))))))))) (set! jk28af@jke4c@generate-temporaries jke4c@generate-temporaries) (set! jke4e@free-identifier=? (lambda (jk272b@x jk272c@y) (if (jkb77@id? jk272b@x) (if (jkb77@id? jk272c@y) (jkb7d@free-id=? jk272b@x jk272c@y) (assertion-violation 'free-identifier=? '"not an identifier" jk272c@y)) (assertion-violation 'free-identifier=? '"not an identifier" jk272b@x)))) (set! jk28b0@jke4e@free-identifier=? jke4e@free-identifier=?) (set! jke50@bound-identifier=? (lambda (jk272f@x jk2730@y) (if (jkb77@id? jk272f@x) (if (jkb77@id? jk2730@y) (jkb7b@bound-id=? jk272f@x jk2730@y) (assertion-violation 'bound-identifier=? '"not an identifier" jk2730@y)) (assertion-violation 'bound-identifier=? '"not an identifier" jk272f@x)))) (set! jk28b1@jke50@bound-identifier=? jke50@bound-identifier=?) (set! jke52@make-source-condition (lambda (jk2733@x) (let ((jk273d@jk2738 '#f) (jk273f@jk273a '#f) (jk2741@jk2739 '#f) (jk2744@jk2737 '#f) (jk2746@make-source-condition '#f) (jk2748@jk2735 '#f) (jk274a@jk2736 '#f) (jk274c@source-condition? '#f) (jk274e@source-filename '#f) (jk2750@source-character '#f)) (begin (set! jk273d@jk2738 (make-record-type-descriptor '&source-information jk2b93@jk28da@&condition-rtd 'jk273b '#f '#f '#((immutable file-name) (immutable character)))) (set! jk273f@jk273a '#f) (set! jk2741@jk2739 (make-record-constructor-descriptor jk273d@jk2738 jk2b94@jk28dc@&condition-rcd jk273f@jk273a)) (set! jk2744@jk2737 (record-predicate jk273d@jk2738)) (set! jk2746@make-source-condition (record-constructor jk2741@jk2739)) (set! jk2748@jk2735 (record-accessor jk273d@jk2738 '0)) (set! jk274a@jk2736 (record-accessor jk273d@jk2738 '1)) (set! jk274c@source-condition? (condition-predicate jk273d@jk2738)) (set! jk274e@source-filename (condition-accessor jk273d@jk2738 jk2748@jk2735)) (set! jk2750@source-character (condition-accessor jk273d@jk2738 jk274a@jk2736)) (if (pair? jk2733@x) (jk2746@make-source-condition (car jk2733@x) (cdr jk2733@x)) (condition)))))) (set! jk28b2@jke52@make-source-condition jke52@make-source-condition) (set! jke54@extract-position-condition (lambda (jk2751@x) (jke52@make-source-condition (jke56@expression-position jk2751@x)))) (set! jk28b3@jke54@extract-position-condition jke54@extract-position-condition) (set! jke56@expression-position (lambda (jk2753@x) (and (jkb43@stx? jk2753@x) (let ((jk2755@x (jkb45@stx-expr jk2753@x))) (and (jk6b6@jk58a@annotation? jk2755@x) (jk6b7@jk58c@annotation-source jk2755@x)))))) (set! jk28b4@jke56@expression-position jke56@expression-position) (set! jke58@assertion-error (lambda (jk2757@expr jk2758@pos) (raise (condition (jk2bc3@jk299e@make-assertion-violation) (jk2bd5@jk29d0@make-who-condition 'assert) (jk2b99@jk2931@make-message-condition '"assertion failed") (jk2bcb@jk29b5@make-irritants-condition (list jk2757@expr)) (jke52@make-source-condition jk2758@pos))))) (set! jk28b5@jke58@assertion-error jke58@assertion-error) (set! jke5a@syntax-error (lambda (jk275b@x . jk275d@args) (begin (if (not (for-all string? jk275d@args)) (assertion-violation 'syntax-error '"invalid argument" jk275d@args) (void)) (raise (condition (jk2b99@jk2931@make-message-condition (if (null? jk275d@args) '"invalid syntax" (apply string-append jk275d@args))) (jk2bf7@jk2a2c@make-syntax-violation (jke64@syntax->datum jk275b@x) '#f) (jke54@extract-position-condition jk275b@x)))))) (set! jk28b6@jke5a@syntax-error jke5a@syntax-error) (set! jke5c@syntax-violation* (lambda (jk275f@who jk2760@msg jk2761@form jk2762@condition-object) (begin (if (not (string? jk2760@msg)) (assertion-violation 'syntax-violation '"message is not a string" jk2760@msg) (void)) (let ((jk2767@who (if (or (string? jk275f@who) (symbol? jk275f@who)) jk275f@who (if (not jk275f@who) (let ((jk2769@t jk2761@form)) (let ((jk276b@ls/false (jkd7e@syntax-dispatch jk2769@t 'any))) (if (and jk276b@ls/false (apply (lambda (jk276d@id) (jkb77@id? jk276d@id)) jk276b@ls/false)) (apply (lambda (jk276f@id) (jke64@syntax->datum jk276f@id)) jk276b@ls/false) (let ((jk2771@t jk2769@t)) (let ((jk2773@ls/false (jkd7e@syntax-dispatch jk2771@t '(any . any)))) (if (and jk2773@ls/false (apply (lambda (jk2775@id jk2776@rest) (jkb77@id? jk2775@id)) jk2773@ls/false)) (apply (lambda (jk2779@id jk277a@rest) (jke64@syntax->datum jk2779@id)) jk2773@ls/false) (let ((jk277d@t jk2771@t)) (let ((jk277f@ls/false (jkd7e@syntax-dispatch jk277d@t '_))) (if jk277f@ls/false (apply (lambda () '#f) jk277f@ls/false) (jke5e@syntax-violation '#f '"invalid syntax" jk277d@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" jk275f@who))))) (raise (condition (if jk2767@who (jk2bd5@jk29d0@make-who-condition jk2767@who) (condition)) (jk2b99@jk2931@make-message-condition jk2760@msg) jk2762@condition-object (jke54@extract-position-condition jk2761@form))))))) (set! jk28b7@jke5c@syntax-violation* jke5c@syntax-violation*) (set! jke5e@syntax-violation (lambda jk278f (let ((jk2790 (length jk278f))) (if (= jk2790 '3) (apply (lambda (jk2781@who jk2782@msg jk2783@form) (jke5e@syntax-violation jk2781@who jk2782@msg jk2783@form '#f)) jk278f) (if (= jk2790 '4) (apply (lambda (jk2787@who jk2788@msg jk2789@form jk278a@subform) (jke5c@syntax-violation* jk2787@who jk2788@msg jk2789@form (jk2bf7@jk2a2c@make-syntax-violation (jke64@syntax->datum jk2789@form) (jke64@syntax->datum jk278a@subform)))) jk278f) (error 'apply '"invalid arg count")))))) (set! jk28b8@jke5e@syntax-violation jke5e@syntax-violation) (set! jke60@identifier? (lambda (jk2791@x) (jkb77@id? jk2791@x))) (set! jk28b9@jke60@identifier? jke60@identifier?) (set! jke62@datum->syntax (lambda (jk2793@id jk2794@datum) (if (jkb77@id? jk2793@id) (jkb57@datum->stx jk2793@id jk2794@datum) (assertion-violation 'datum->syntax '"not an identifier" jk2793@id)))) (set! jk28ba@jke62@datum->syntax jke62@datum->syntax) (set! jke64@syntax->datum (lambda (jk2797@x) (jkb8b@stx->datum jk2797@x))) (set! jk28bb@jke64@syntax->datum jke64@syntax->datum) (set! jke66@ungensym-all (lambda (jk2799@code) (if (pair? jk2799@code) (cons (jke66@ungensym-all (car jk2799@code)) (jke66@ungensym-all (cdr jk2799@code))) (if (symbol? jk2799@code) (ungensym jk2799@code) jk2799@code)))) (set! jk28bc@jke66@ungensym-all jke66@ungensym-all) (set! jke68@compile-r6rs-top-level (lambda (jk279b@x*) (call-with-values (lambda () (jkdf6@top-level-expander jk279b@x*)) (lambda (jk27a1@jk279e jk27a2@jk27a0) (let ((jk27a5@invoke-code jk27a2@jk27a0) (jk27a6@lib* jk27a1@jk279e)) (lambda () (begin (for-each jk98d@jk7db@invoke-library jk27a6@lib*) (let ((jk27a9@expanded (jk717@jk6cf@expanded->core jk27a5@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (jke66@ungensym-all jk27a9@expanded)) (void)) (eval-core jk27a9@expanded)))))))))) (set! jk28bd@jke68@compile-r6rs-top-level jke68@compile-r6rs-top-level) (set! jke6a@pre-compile-r6rs-top-level (lambda (jk27ab@x*) (call-with-values (lambda () (jkdf6@top-level-expander jk27ab@x*)) (lambda (jk27b1@jk27ae jk27b2@jk27b0) (let ((jk27b5@invoke-code jk27b2@jk27b0) (jk27b6@lib* jk27b1@jk27ae)) (begin (for-each jk98d@jk7db@invoke-library jk27b6@lib*) (jk6bf@jk59c@compile-core (jk717@jk6cf@expanded->core jk27b5@invoke-code)))))))) (set! jk28be@jke6a@pre-compile-r6rs-top-level jke6a@pre-compile-r6rs-top-level) (set! jke6c@interaction-environment (let ((jk27b9@the-env '#f)) (lambda () (or jk27b9@the-env (let ((jk27bb@lib (jk986@jk7cd@find-library-by-name '(mosh interaction))) (jk27bc@rib (jkb2b@make-empty-rib))) (begin (let ((jk27bf@subst (jk968@jk791@library-subst jk27bb@lib))) (begin (jkb17@set-rib-sym*! jk27bc@rib (map car jk27bf@subst)) (jkb1b@set-rib-mark**! jk27bc@rib (map (lambda (jk27c1@x) jkafb@top-mark*) jk27bf@subst)) (jkb1f@set-rib-label*! jk27bc@rib (map cdr jk27bf@subst)))) (let ((jk27c3@env (make-simple-struct 'interaction-env '4 (list jk27bc@rib '() '())))) (begin (set! jk27b9@the-env jk27c3@env) jk27c3@env)))))))) (set! jk28bf@jke6c@interaction-environment jke6c@interaction-environment) (set! jke6e@top-level-context (jk6c1@jk5a0@make-parameter '#f)) (set! jk28c0@jke6e@top-level-context jke6e@top-level-context) (jk983@jk7c7@current-library-expander jke40@library-expander))
(begin (set! jk28cf@jk28ca (unspecified)) (set! jk28d1@jk28cc (unspecified)) (set! jk28d3@jk28cb (unspecified)) (set! jk28d6@&condition? (unspecified)) (set! jk28d8@make-&condition (unspecified)) (set! jk28da@&condition-rtd (unspecified)) (set! jk28dc@&condition-rcd (unspecified)) (set! jk2928@jk2923 (unspecified)) (set! jk292a@jk2925 (unspecified)) (set! jk292c@jk2924 (unspecified)) (set! jk292f@p? (unspecified)) (set! jk2931@make-message-condition (unspecified)) (set! jk2933@jk2922 (unspecified)) (set! jk2935@message-condition? (unspecified)) (set! jk2937@condition-message (unspecified)) (set! jk2939@&message-rtd (unspecified)) (set! jk293b@&message-rcd (unspecified)) (set! jk2941@jk293c (unspecified)) (set! jk2943@jk293e (unspecified)) (set! jk2945@jk293d (unspecified)) (set! jk2948@p? (unspecified)) (set! jk294a@make-warning (unspecified)) (set! jk294c@warning? (unspecified)) (set! jk294e@&warning-rtd (unspecified)) (set! jk2950@&warning-rcd (unspecified)) (set! jk2956@jk2951 (unspecified)) (set! jk2958@jk2953 (unspecified)) (set! jk295a@jk2952 (unspecified)) (set! jk295d@p? (unspecified)) (set! jk295f@make-serious-condition (unspecified)) (set! jk2961@serious-condition? (unspecified)) (set! jk2963@&serious-rtd (unspecified)) (set! jk2965@&serious-rcd (unspecified)) (set! jk296b@jk2966 (unspecified)) (set! jk296d@jk2968 (unspecified)) (set! jk296f@jk2967 (unspecified)) (set! jk2972@p? (unspecified)) (set! jk2974@make-error (unspecified)) (set! jk2976@error? (unspecified)) (set! jk2978@&error-rtd (unspecified)) (set! jk297a@&error-rcd (unspecified)) (set! jk2980@jk297b (unspecified)) (set! jk2982@jk297d (unspecified)) (set! jk2984@jk297c (unspecified)) (set! jk2987@p? (unspecified)) (set! jk2989@make-violation (unspecified)) (set! jk298b@violation? (unspecified)) (set! jk298d@&violation-rtd (unspecified)) (set! jk298f@&violation-rcd (unspecified)) (set! jk2995@jk2990 (unspecified)) (set! jk2997@jk2992 (unspecified)) (set! jk2999@jk2991 (unspecified)) (set! jk299c@p? (unspecified)) (set! jk299e@make-assertion-violation (unspecified)) (set! jk29a0@assertion-violation? (unspecified)) (set! jk29a2@&assertion-rtd (unspecified)) (set! jk29a4@&assertion-rcd (unspecified)) (set! jk29ac@jk29a7 (unspecified)) (set! jk29ae@jk29a9 (unspecified)) (set! jk29b0@jk29a8 (unspecified)) (set! jk29b3@p? (unspecified)) (set! jk29b5@make-irritants-condition (unspecified)) (set! jk29b7@jk29a6 (unspecified)) (set! jk29b9@irritants-condition? (unspecified)) (set! jk29bb@condition-irritants (unspecified)) (set! jk29bd@&irritants-rtd (unspecified)) (set! jk29bf@&irritants-rcd (unspecified)) (set! jk29c7@jk29c2 (unspecified)) (set! jk29c9@jk29c4 (unspecified)) (set! jk29cb@jk29c3 (unspecified)) (set! jk29ce@p? (unspecified)) (set! jk29d0@make-who-condition (unspecified)) (set! jk29d2@jk29c1 (unspecified)) (set! jk29d4@who-condition? (unspecified)) (set! jk29d6@condition-who (unspecified)) (set! jk29d8@&who-rtd (unspecified)) (set! jk29da@&who-rcd (unspecified)) (set! jk29e0@jk29db (unspecified)) (set! jk29e2@jk29dd (unspecified)) (set! jk29e4@jk29dc (unspecified)) (set! jk29e7@p? (unspecified)) (set! jk29e9@make-non-continuable-violation (unspecified)) (set! jk29eb@non-continuable-violation? (unspecified)) (set! jk29ed@&non-continuable-rtd (unspecified)) (set! jk29ef@&non-continuable-rcd (unspecified)) (set! jk29f5@jk29f0 (unspecified)) (set! jk29f7@jk29f2 (unspecified)) (set! jk29f9@jk29f1 (unspecified)) (set! jk29fc@p? (unspecified)) (set! jk29fe@make-implementation-restriction-violation (unspecified)) (set! jk2a00@implementation-restriction-violation? (unspecified)) (set! jk2a02@&implementation-restriction-rtd (unspecified)) (set! jk2a04@&implementation-restriction-rcd (unspecified)) (set! jk2a0a@jk2a05 (unspecified)) (set! jk2a0c@jk2a07 (unspecified)) (set! jk2a0e@jk2a06 (unspecified)) (set! jk2a11@p? (unspecified)) (set! jk2a13@make-lexical-violation (unspecified)) (set! jk2a15@lexical-violation? (unspecified)) (set! jk2a17@&lexical-rtd (unspecified)) (set! jk2a19@&lexical-rcd (unspecified)) (set! jk2a23@jk2a1e (unspecified)) (set! jk2a25@jk2a20 (unspecified)) (set! jk2a27@jk2a1f (unspecified)) (set! jk2a2a@p? (unspecified)) (set! jk2a2c@make-syntax-violation (unspecified)) (set! jk2a2e@jk2a1b (unspecified)) (set! jk2a30@jk2a1d (unspecified)) (set! jk2a32@syntax-violation? (unspecified)) (set! jk2a34@syntax-violation-form (unspecified)) (set! jk2a36@syntax-violation-subform (unspecified)) (set! jk2a38@&syntax-rtd (unspecified)) (set! jk2a3a@&syntax-rcd (unspecified)) (set! jk2a40@jk2a3b (unspecified)) (set! jk2a42@jk2a3d (unspecified)) (set! jk2a44@jk2a3c (unspecified)) (set! jk2a47@p? (unspecified)) (set! jk2a49@make-undefined-violation (unspecified)) (set! jk2a4b@undefined-violation? (unspecified)) (set! jk2a4d@&undefined-rtd (unspecified)) (set! jk2a4f@&undefined-rcd (unspecified)) (set! jk2a55@jk2a50 (unspecified)) (set! jk2a57@jk2a52 (unspecified)) (set! jk2a59@jk2a51 (unspecified)) (set! jk2a5c@p? (unspecified)) (set! jk2a5e@make-i/o-error (unspecified)) (set! jk2a60@i/o-error? (unspecified)) (set! jk2a62@&i/o-rtd (unspecified)) (set! jk2a64@&i/o-rcd (unspecified)) (set! jk2a6a@jk2a65 (unspecified)) (set! jk2a6c@jk2a67 (unspecified)) (set! jk2a6e@jk2a66 (unspecified)) (set! jk2a71@p? (unspecified)) (set! jk2a73@make-i/o-read-error (unspecified)) (set! jk2a75@i/o-read-error? (unspecified)) (set! jk2a77@&i/o-read-rtd (unspecified)) (set! jk2a79@&i/o-read-rcd (unspecified)) (set! jk2a7f@jk2a7a (unspecified)) (set! jk2a81@jk2a7c (unspecified)) (set! jk2a83@jk2a7b (unspecified)) (set! jk2a86@p? (unspecified)) (set! jk2a88@make-i/o-write-error (unspecified)) (set! jk2a8a@i/o-write-error? (unspecified)) (set! jk2a8c@&i/o-write-rtd (unspecified)) (set! jk2a8e@&i/o-write-rcd (unspecified)) (set! jk2a96@jk2a91 (unspecified)) (set! jk2a98@jk2a93 (unspecified)) (set! jk2a9a@jk2a92 (unspecified)) (set! jk2a9d@p? (unspecified)) (set! jk2a9f@make-i/o-invalid-position-error (unspecified)) (set! jk2aa1@jk2a90 (unspecified)) (set! jk2aa3@i/o-invalid-position-error? (unspecified)) (set! jk2aa5@i/o-error-position (unspecified)) (set! jk2aa7@&i/o-invalid-position-rtd (unspecified)) (set! jk2aa9@&i/o-invalid-position-rcd (unspecified)) (set! jk2ab1@jk2aac (unspecified)) (set! jk2ab3@jk2aae (unspecified)) (set! jk2ab5@jk2aad (unspecified)) (set! jk2ab8@p? (unspecified)) (set! jk2aba@make-i/o-filename-error (unspecified)) (set! jk2abc@jk2aab (unspecified)) (set! jk2abe@i/o-filename-error? (unspecified)) (set! jk2ac0@i/o-error-filename (unspecified)) (set! jk2ac2@&i/o-filename-rtd (unspecified)) (set! jk2ac4@&i/o-filename-rcd (unspecified)) (set! jk2aca@jk2ac5 (unspecified)) (set! jk2acc@jk2ac7 (unspecified)) (set! jk2ace@jk2ac6 (unspecified)) (set! jk2ad1@p? (unspecified)) (set! jk2ad3@make-i/o-file-protection-error (unspecified)) (set! jk2ad5@i/o-file-protection-error? (unspecified)) (set! jk2ad7@&i/o-file-protection-rtd (unspecified)) (set! jk2ad9@&i/o-file-protection-rcd (unspecified)) (set! jk2adf@jk2ada (unspecified)) (set! jk2ae1@jk2adc (unspecified)) (set! jk2ae3@jk2adb (unspecified)) (set! jk2ae6@p? (unspecified)) (set! jk2ae8@make-i/o-file-is-read-only-error (unspecified)) (set! jk2aea@i/o-file-is-read-only-error? (unspecified)) (set! jk2aec@&i/o-file-is-read-only-rtd (unspecified)) (set! jk2aee@&i/o-file-is-read-only-rcd (unspecified)) (set! jk2af4@jk2aef (unspecified)) (set! jk2af6@jk2af1 (unspecified)) (set! jk2af8@jk2af0 (unspecified)) (set! jk2afb@p? (unspecified)) (set! jk2afd@make-i/o-file-already-exists-error (unspecified)) (set! jk2aff@i/o-file-already-exists-error? (unspecified)) (set! jk2b01@&i/o-file-already-exists-rtd (unspecified)) (set! jk2b03@&i/o-file-already-exists-rcd (unspecified)) (set! jk2b09@jk2b04 (unspecified)) (set! jk2b0b@jk2b06 (unspecified)) (set! jk2b0d@jk2b05 (unspecified)) (set! jk2b10@p? (unspecified)) (set! jk2b12@make-i/o-file-does-not-exist-error (unspecified)) (set! jk2b14@i/o-file-does-not-exist-error? (unspecified)) (set! jk2b16@&i/o-file-does-not-exist-rtd (unspecified)) (set! jk2b18@&i/o-file-does-not-exist-rcd (unspecified)) (set! jk2b20@jk2b1b (unspecified)) (set! jk2b22@jk2b1d (unspecified)) (set! jk2b24@jk2b1c (unspecified)) (set! jk2b27@p? (unspecified)) (set! jk2b29@make-i/o-port-error (unspecified)) (set! jk2b2b@jk2b1a (unspecified)) (set! jk2b2d@i/o-port-error? (unspecified)) (set! jk2b2f@i/o-error-port (unspecified)) (set! jk2b31@&i/o-port-rtd (unspecified)) (set! jk2b33@&i/o-port-rcd (unspecified)) (set! jk2b39@jk2b34 (unspecified)) (set! jk2b3b@jk2b36 (unspecified)) (set! jk2b3d@jk2b35 (unspecified)) (set! jk2b40@p? (unspecified)) (set! jk2b42@make-i/o-decoding-error (unspecified)) (set! jk2b44@i/o-decoding-error? (unspecified)) (set! jk2b46@&i/o-decoding-rtd (unspecified)) (set! jk2b48@&i/o-decoding-rcd (unspecified)) (set! jk2b50@jk2b4b (unspecified)) (set! jk2b52@jk2b4d (unspecified)) (set! jk2b54@jk2b4c (unspecified)) (set! jk2b57@p? (unspecified)) (set! jk2b59@make-i/o-encoding-error (unspecified)) (set! jk2b5b@jk2b4a (unspecified)) (set! jk2b5d@i/o-encoding-error? (unspecified)) (set! jk2b5f@i/o-encoding-error-char (unspecified)) (set! jk2b61@&i/o-encoding-rtd (unspecified)) (set! jk2b63@&i/o-encoding-rcd (unspecified)) (set! jk2b69@jk2b64 (unspecified)) (set! jk2b6b@jk2b66 (unspecified)) (set! jk2b6d@jk2b65 (unspecified)) (set! jk2b70@p? (unspecified)) (set! jk2b72@make-no-infinities-violation (unspecified)) (set! jk2b74@no-infinities-violation? (unspecified)) (set! jk2b76@&no-infinities-rtd (unspecified)) (set! jk2b78@&no-infinities-rcd (unspecified)) (set! jk2b7e@jk2b79 (unspecified)) (set! jk2b80@jk2b7b (unspecified)) (set! jk2b82@jk2b7a (unspecified)) (set! jk2b85@p? (unspecified)) (set! jk2b87@make-no-nans-violation (unspecified)) (set! jk2b89@no-nans-violation? (unspecified)) (set! jk2b8b@&no-nans-rtd (unspecified)) (set! jk2b8d@&no-nans-rcd (unspecified)) (set! jk28cf@jk28ca (make-record-type-descriptor '&condition '#f 'jk28cd '#f '#f '#())) (set! jk2b8e@jk28cf@jk28ca jk28cf@jk28ca) (set! jk28d1@jk28cc '#f) (set! jk2b8f@jk28d1@jk28cc jk28d1@jk28cc) (set! jk28d3@jk28cb (make-record-constructor-descriptor jk28cf@jk28ca '#f jk28d1@jk28cc)) (set! jk2b90@jk28d3@jk28cb jk28d3@jk28cb) (set! jk28d6@&condition? (record-predicate jk28cf@jk28ca)) (set! jk2b91@jk28d6@&condition? jk28d6@&condition?) (set! jk28d8@make-&condition (record-constructor jk28d3@jk28cb)) (set! jk2b92@jk28d8@make-&condition jk28d8@make-&condition) (set! jk28da@&condition-rtd jk28cf@jk28ca) (set! jk2b93@jk28da@&condition-rtd jk28da@&condition-rtd) (set! jk28dc@&condition-rcd jk28d3@jk28cb) (set! jk2b94@jk28dc@&condition-rcd jk28dc@&condition-rcd) (set! jk2928@jk2923 (make-record-type-descriptor '&message jk28cf@jk28ca 'jk2926 '#f '#f '#((immutable message)))) (set! jk2b95@jk2928@jk2923 jk2928@jk2923) (set! jk292a@jk2925 '#f) (set! jk2b96@jk292a@jk2925 jk292a@jk2925) (set! jk292c@jk2924 (make-record-constructor-descriptor jk2928@jk2923 jk28d3@jk28cb jk292a@jk2925)) (set! jk2b97@jk292c@jk2924 jk292c@jk2924) (set! jk292f@p? (record-predicate jk2928@jk2923)) (set! jk2b98@jk292f@p? jk292f@p?) (set! jk2931@make-message-condition (record-constructor jk292c@jk2924)) (set! jk2b99@jk2931@make-message-condition jk2931@make-message-condition) (set! jk2933@jk2922 (record-accessor jk2928@jk2923 '0)) (set! jk2b9a@jk2933@jk2922 jk2933@jk2922) (set! jk2935@message-condition? (condition-predicate jk2928@jk2923)) (set! jk2b9b@jk2935@message-condition? jk2935@message-condition?) (set! jk2937@condition-message (condition-accessor jk2928@jk2923 jk2933@jk2922)) (set! jk2b9c@jk2937@condition-message jk2937@condition-message) (set! jk2939@&message-rtd jk2928@jk2923) (set! jk2b9d@jk2939@&message-rtd jk2939@&message-rtd) (set! jk293b@&message-rcd jk292c@jk2924) (set! jk2b9e@jk293b@&message-rcd jk293b@&message-rcd) (set! jk2941@jk293c (make-record-type-descriptor '&warning jk28cf@jk28ca 'jk293f '#f '#f '#())) (set! jk2b9f@jk2941@jk293c jk2941@jk293c) (set! jk2943@jk293e '#f) (set! jk2ba0@jk2943@jk293e jk2943@jk293e) (set! jk2945@jk293d (make-record-constructor-descriptor jk2941@jk293c jk28d3@jk28cb jk2943@jk293e)) (set! jk2ba1@jk2945@jk293d jk2945@jk293d) (set! jk2948@p? (record-predicate jk2941@jk293c)) (set! jk2ba2@jk2948@p? jk2948@p?) (set! jk294a@make-warning (record-constructor jk2945@jk293d)) (set! jk2ba3@jk294a@make-warning jk294a@make-warning) (set! jk294c@warning? (condition-predicate jk2941@jk293c)) (set! jk2ba4@jk294c@warning? jk294c@warning?) (set! jk294e@&warning-rtd jk2941@jk293c) (set! jk2ba5@jk294e@&warning-rtd jk294e@&warning-rtd) (set! jk2950@&warning-rcd jk2945@jk293d) (set! jk2ba6@jk2950@&warning-rcd jk2950@&warning-rcd) (set! jk2956@jk2951 (make-record-type-descriptor '&serious jk28cf@jk28ca 'jk2954 '#f '#f '#())) (set! jk2ba7@jk2956@jk2951 jk2956@jk2951) (set! jk2958@jk2953 '#f) (set! jk2ba8@jk2958@jk2953 jk2958@jk2953) (set! jk295a@jk2952 (make-record-constructor-descriptor jk2956@jk2951 jk28d3@jk28cb jk2958@jk2953)) (set! jk2ba9@jk295a@jk2952 jk295a@jk2952) (set! jk295d@p? (record-predicate jk2956@jk2951)) (set! jk2baa@jk295d@p? jk295d@p?) (set! jk295f@make-serious-condition (record-constructor jk295a@jk2952)) (set! jk2bab@jk295f@make-serious-condition jk295f@make-serious-condition) (set! jk2961@serious-condition? (condition-predicate jk2956@jk2951)) (set! jk2bac@jk2961@serious-condition? jk2961@serious-condition?) (set! jk2963@&serious-rtd jk2956@jk2951) (set! jk2bad@jk2963@&serious-rtd jk2963@&serious-rtd) (set! jk2965@&serious-rcd jk295a@jk2952) (set! jk2bae@jk2965@&serious-rcd jk2965@&serious-rcd) (set! jk296b@jk2966 (make-record-type-descriptor '&error jk2956@jk2951 'jk2969 '#f '#f '#())) (set! jk2baf@jk296b@jk2966 jk296b@jk2966) (set! jk296d@jk2968 '#f) (set! jk2bb0@jk296d@jk2968 jk296d@jk2968) (set! jk296f@jk2967 (make-record-constructor-descriptor jk296b@jk2966 jk295a@jk2952 jk296d@jk2968)) (set! jk2bb1@jk296f@jk2967 jk296f@jk2967) (set! jk2972@p? (record-predicate jk296b@jk2966)) (set! jk2bb2@jk2972@p? jk2972@p?) (set! jk2974@make-error (record-constructor jk296f@jk2967)) (set! jk2bb3@jk2974@make-error jk2974@make-error) (set! jk2976@error? (condition-predicate jk296b@jk2966)) (set! jk2bb4@jk2976@error? jk2976@error?) (set! jk2978@&error-rtd jk296b@jk2966) (set! jk2bb5@jk2978@&error-rtd jk2978@&error-rtd) (set! jk297a@&error-rcd jk296f@jk2967) (set! jk2bb6@jk297a@&error-rcd jk297a@&error-rcd) (set! jk2980@jk297b (make-record-type-descriptor '&violation jk2956@jk2951 'jk297e '#f '#f '#())) (set! jk2bb7@jk2980@jk297b jk2980@jk297b) (set! jk2982@jk297d '#f) (set! jk2bb8@jk2982@jk297d jk2982@jk297d) (set! jk2984@jk297c (make-record-constructor-descriptor jk2980@jk297b jk295a@jk2952 jk2982@jk297d)) (set! jk2bb9@jk2984@jk297c jk2984@jk297c) (set! jk2987@p? (record-predicate jk2980@jk297b)) (set! jk2bba@jk2987@p? jk2987@p?) (set! jk2989@make-violation (record-constructor jk2984@jk297c)) (set! jk2bbb@jk2989@make-violation jk2989@make-violation) (set! jk298b@violation? (condition-predicate jk2980@jk297b)) (set! jk2bbc@jk298b@violation? jk298b@violation?) (set! jk298d@&violation-rtd jk2980@jk297b) (set! jk2bbd@jk298d@&violation-rtd jk298d@&violation-rtd) (set! jk298f@&violation-rcd jk2984@jk297c) (set! jk2bbe@jk298f@&violation-rcd jk298f@&violation-rcd) (set! jk2995@jk2990 (make-record-type-descriptor '&assertion jk2980@jk297b 'jk2993 '#f '#f '#())) (set! jk2bbf@jk2995@jk2990 jk2995@jk2990) (set! jk2997@jk2992 '#f) (set! jk2bc0@jk2997@jk2992 jk2997@jk2992) (set! jk2999@jk2991 (make-record-constructor-descriptor jk2995@jk2990 jk2984@jk297c jk2997@jk2992)) (set! jk2bc1@jk2999@jk2991 jk2999@jk2991) (set! jk299c@p? (record-predicate jk2995@jk2990)) (set! jk2bc2@jk299c@p? jk299c@p?) (set! jk299e@make-assertion-violation (record-constructor jk2999@jk2991)) (set! jk2bc3@jk299e@make-assertion-violation jk299e@make-assertion-violation) (set! jk29a0@assertion-violation? (condition-predicate jk2995@jk2990)) (set! jk2bc4@jk29a0@assertion-violation? jk29a0@assertion-violation?) (set! jk29a2@&assertion-rtd jk2995@jk2990) (set! jk2bc5@jk29a2@&assertion-rtd jk29a2@&assertion-rtd) (set! jk29a4@&assertion-rcd jk2999@jk2991) (set! jk2bc6@jk29a4@&assertion-rcd jk29a4@&assertion-rcd) (set! jk29ac@jk29a7 (make-record-type-descriptor '&irritants jk28cf@jk28ca 'jk29aa '#f '#f '#((immutable irritants)))) (set! jk2bc7@jk29ac@jk29a7 jk29ac@jk29a7) (set! jk29ae@jk29a9 '#f) (set! jk2bc8@jk29ae@jk29a9 jk29ae@jk29a9) (set! jk29b0@jk29a8 (make-record-constructor-descriptor jk29ac@jk29a7 jk28d3@jk28cb jk29ae@jk29a9)) (set! jk2bc9@jk29b0@jk29a8 jk29b0@jk29a8) (set! jk29b3@p? (record-predicate jk29ac@jk29a7)) (set! jk2bca@jk29b3@p? jk29b3@p?) (set! jk29b5@make-irritants-condition (record-constructor jk29b0@jk29a8)) (set! jk2bcb@jk29b5@make-irritants-condition jk29b5@make-irritants-condition) (set! jk29b7@jk29a6 (record-accessor jk29ac@jk29a7 '0)) (set! jk2bcc@jk29b7@jk29a6 jk29b7@jk29a6) (set! jk29b9@irritants-condition? (condition-predicate jk29ac@jk29a7)) (set! jk2bcd@jk29b9@irritants-condition? jk29b9@irritants-condition?) (set! jk29bb@condition-irritants (condition-accessor jk29ac@jk29a7 jk29b7@jk29a6)) (set! jk2bce@jk29bb@condition-irritants jk29bb@condition-irritants) (set! jk29bd@&irritants-rtd jk29ac@jk29a7) (set! jk2bcf@jk29bd@&irritants-rtd jk29bd@&irritants-rtd) (set! jk29bf@&irritants-rcd jk29b0@jk29a8) (set! jk2bd0@jk29bf@&irritants-rcd jk29bf@&irritants-rcd) (set! jk29c7@jk29c2 (make-record-type-descriptor '&who jk28cf@jk28ca 'jk29c5 '#f '#f '#((immutable who)))) (set! jk2bd1@jk29c7@jk29c2 jk29c7@jk29c2) (set! jk29c9@jk29c4 '#f) (set! jk2bd2@jk29c9@jk29c4 jk29c9@jk29c4) (set! jk29cb@jk29c3 (make-record-constructor-descriptor jk29c7@jk29c2 jk28d3@jk28cb jk29c9@jk29c4)) (set! jk2bd3@jk29cb@jk29c3 jk29cb@jk29c3) (set! jk29ce@p? (record-predicate jk29c7@jk29c2)) (set! jk2bd4@jk29ce@p? jk29ce@p?) (set! jk29d0@make-who-condition (record-constructor jk29cb@jk29c3)) (set! jk2bd5@jk29d0@make-who-condition jk29d0@make-who-condition) (set! jk29d2@jk29c1 (record-accessor jk29c7@jk29c2 '0)) (set! jk2bd6@jk29d2@jk29c1 jk29d2@jk29c1) (set! jk29d4@who-condition? (condition-predicate jk29c7@jk29c2)) (set! jk2bd7@jk29d4@who-condition? jk29d4@who-condition?) (set! jk29d6@condition-who (condition-accessor jk29c7@jk29c2 jk29d2@jk29c1)) (set! jk2bd8@jk29d6@condition-who jk29d6@condition-who) (set! jk29d8@&who-rtd jk29c7@jk29c2) (set! jk2bd9@jk29d8@&who-rtd jk29d8@&who-rtd) (set! jk29da@&who-rcd jk29cb@jk29c3) (set! jk2bda@jk29da@&who-rcd jk29da@&who-rcd) (set! jk29e0@jk29db (make-record-type-descriptor '&non-continuable jk2980@jk297b 'jk29de '#f '#f '#())) (set! jk2bdb@jk29e0@jk29db jk29e0@jk29db) (set! jk29e2@jk29dd '#f) (set! jk2bdc@jk29e2@jk29dd jk29e2@jk29dd) (set! jk29e4@jk29dc (make-record-constructor-descriptor jk29e0@jk29db jk2984@jk297c jk29e2@jk29dd)) (set! jk2bdd@jk29e4@jk29dc jk29e4@jk29dc) (set! jk29e7@p? (record-predicate jk29e0@jk29db)) (set! jk2bde@jk29e7@p? jk29e7@p?) (set! jk29e9@make-non-continuable-violation (record-constructor jk29e4@jk29dc)) (set! jk2bdf@jk29e9@make-non-continuable-violation jk29e9@make-non-continuable-violation) (set! jk29eb@non-continuable-violation? (condition-predicate jk29e0@jk29db)) (set! jk2be0@jk29eb@non-continuable-violation? jk29eb@non-continuable-violation?) (set! jk29ed@&non-continuable-rtd jk29e0@jk29db) (set! jk2be1@jk29ed@&non-continuable-rtd jk29ed@&non-continuable-rtd) (set! jk29ef@&non-continuable-rcd jk29e4@jk29dc) (set! jk2be2@jk29ef@&non-continuable-rcd jk29ef@&non-continuable-rcd) (set! jk29f5@jk29f0 (make-record-type-descriptor '&implementation-restriction jk2980@jk297b 'jk29f3 '#f '#f '#())) (set! jk2be3@jk29f5@jk29f0 jk29f5@jk29f0) (set! jk29f7@jk29f2 '#f) (set! jk2be4@jk29f7@jk29f2 jk29f7@jk29f2) (set! jk29f9@jk29f1 (make-record-constructor-descriptor jk29f5@jk29f0 jk2984@jk297c jk29f7@jk29f2)) (set! jk2be5@jk29f9@jk29f1 jk29f9@jk29f1) (set! jk29fc@p? (record-predicate jk29f5@jk29f0)) (set! jk2be6@jk29fc@p? jk29fc@p?) (set! jk29fe@make-implementation-restriction-violation (record-constructor jk29f9@jk29f1)) (set! jk2be7@jk29fe@make-implementation-restriction-violation jk29fe@make-implementation-restriction-violation) (set! jk2a00@implementation-restriction-violation? (condition-predicate jk29f5@jk29f0)) (set! jk2be8@jk2a00@implementation-restriction-violation? jk2a00@implementation-restriction-violation?) (set! jk2a02@&implementation-restriction-rtd jk29f5@jk29f0) (set! jk2be9@jk2a02@&implementation-restriction-rtd jk2a02@&implementation-restriction-rtd) (set! jk2a04@&implementation-restriction-rcd jk29f9@jk29f1) (set! jk2bea@jk2a04@&implementation-restriction-rcd jk2a04@&implementation-restriction-rcd) (set! jk2a0a@jk2a05 (make-record-type-descriptor '&lexical jk2980@jk297b 'jk2a08 '#f '#f '#())) (set! jk2beb@jk2a0a@jk2a05 jk2a0a@jk2a05) (set! jk2a0c@jk2a07 '#f) (set! jk2bec@jk2a0c@jk2a07 jk2a0c@jk2a07) (set! jk2a0e@jk2a06 (make-record-constructor-descriptor jk2a0a@jk2a05 jk2984@jk297c jk2a0c@jk2a07)) (set! jk2bed@jk2a0e@jk2a06 jk2a0e@jk2a06) (set! jk2a11@p? (record-predicate jk2a0a@jk2a05)) (set! jk2bee@jk2a11@p? jk2a11@p?) (set! jk2a13@make-lexical-violation (record-constructor jk2a0e@jk2a06)) (set! jk2bef@jk2a13@make-lexical-violation jk2a13@make-lexical-violation) (set! jk2a15@lexical-violation? (condition-predicate jk2a0a@jk2a05)) (set! jk2bf0@jk2a15@lexical-violation? jk2a15@lexical-violation?) (set! jk2a17@&lexical-rtd jk2a0a@jk2a05) (set! jk2bf1@jk2a17@&lexical-rtd jk2a17@&lexical-rtd) (set! jk2a19@&lexical-rcd jk2a0e@jk2a06) (set! jk2bf2@jk2a19@&lexical-rcd jk2a19@&lexical-rcd) (set! jk2a23@jk2a1e (make-record-type-descriptor '&syntax jk2980@jk297b 'jk2a21 '#f '#f '#((immutable form) (immutable subform)))) (set! jk2bf3@jk2a23@jk2a1e jk2a23@jk2a1e) (set! jk2a25@jk2a20 '#f) (set! jk2bf4@jk2a25@jk2a20 jk2a25@jk2a20) (set! jk2a27@jk2a1f (make-record-constructor-descriptor jk2a23@jk2a1e jk2984@jk297c jk2a25@jk2a20)) (set! jk2bf5@jk2a27@jk2a1f jk2a27@jk2a1f) (set! jk2a2a@p? (record-predicate jk2a23@jk2a1e)) (set! jk2bf6@jk2a2a@p? jk2a2a@p?) (set! jk2a2c@make-syntax-violation (record-constructor jk2a27@jk2a1f)) (set! jk2bf7@jk2a2c@make-syntax-violation jk2a2c@make-syntax-violation) (set! jk2a2e@jk2a1b (record-accessor jk2a23@jk2a1e '0)) (set! jk2bf8@jk2a2e@jk2a1b jk2a2e@jk2a1b) (set! jk2a30@jk2a1d (record-accessor jk2a23@jk2a1e '1)) (set! jk2bf9@jk2a30@jk2a1d jk2a30@jk2a1d) (set! jk2a32@syntax-violation? (condition-predicate jk2a23@jk2a1e)) (set! jk2bfa@jk2a32@syntax-violation? jk2a32@syntax-violation?) (set! jk2a34@syntax-violation-form (condition-accessor jk2a23@jk2a1e jk2a2e@jk2a1b)) (set! jk2bfb@jk2a34@syntax-violation-form jk2a34@syntax-violation-form) (set! jk2a36@syntax-violation-subform (condition-accessor jk2a23@jk2a1e jk2a30@jk2a1d)) (set! jk2bfc@jk2a36@syntax-violation-subform jk2a36@syntax-violation-subform) (set! jk2a38@&syntax-rtd jk2a23@jk2a1e) (set! jk2bfd@jk2a38@&syntax-rtd jk2a38@&syntax-rtd) (set! jk2a3a@&syntax-rcd jk2a27@jk2a1f) (set! jk2bfe@jk2a3a@&syntax-rcd jk2a3a@&syntax-rcd) (set! jk2a40@jk2a3b (make-record-type-descriptor '&undefined jk2980@jk297b 'jk2a3e '#f '#f '#())) (set! jk2bff@jk2a40@jk2a3b jk2a40@jk2a3b) (set! jk2a42@jk2a3d '#f) (set! jk2c00@jk2a42@jk2a3d jk2a42@jk2a3d) (set! jk2a44@jk2a3c (make-record-constructor-descriptor jk2a40@jk2a3b jk2984@jk297c jk2a42@jk2a3d)) (set! jk2c01@jk2a44@jk2a3c jk2a44@jk2a3c) (set! jk2a47@p? (record-predicate jk2a40@jk2a3b)) (set! jk2c02@jk2a47@p? jk2a47@p?) (set! jk2a49@make-undefined-violation (record-constructor jk2a44@jk2a3c)) (set! jk2c03@jk2a49@make-undefined-violation jk2a49@make-undefined-violation) (set! jk2a4b@undefined-violation? (condition-predicate jk2a40@jk2a3b)) (set! jk2c04@jk2a4b@undefined-violation? jk2a4b@undefined-violation?) (set! jk2a4d@&undefined-rtd jk2a40@jk2a3b) (set! jk2c05@jk2a4d@&undefined-rtd jk2a4d@&undefined-rtd) (set! jk2a4f@&undefined-rcd jk2a44@jk2a3c) (set! jk2c06@jk2a4f@&undefined-rcd jk2a4f@&undefined-rcd) (set! jk2a55@jk2a50 (make-record-type-descriptor '&i/o jk296b@jk2966 'jk2a53 '#f '#f '#())) (set! jk2c07@jk2a55@jk2a50 jk2a55@jk2a50) (set! jk2a57@jk2a52 '#f) (set! jk2c08@jk2a57@jk2a52 jk2a57@jk2a52) (set! jk2a59@jk2a51 (make-record-constructor-descriptor jk2a55@jk2a50 jk296f@jk2967 jk2a57@jk2a52)) (set! jk2c09@jk2a59@jk2a51 jk2a59@jk2a51) (set! jk2a5c@p? (record-predicate jk2a55@jk2a50)) (set! jk2c0a@jk2a5c@p? jk2a5c@p?) (set! jk2a5e@make-i/o-error (record-constructor jk2a59@jk2a51)) (set! jk2c0b@jk2a5e@make-i/o-error jk2a5e@make-i/o-error) (set! jk2a60@i/o-error? (condition-predicate jk2a55@jk2a50)) (set! jk2c0c@jk2a60@i/o-error? jk2a60@i/o-error?) (set! jk2a62@&i/o-rtd jk2a55@jk2a50) (set! jk2c0d@jk2a62@&i/o-rtd jk2a62@&i/o-rtd) (set! jk2a64@&i/o-rcd jk2a59@jk2a51) (set! jk2c0e@jk2a64@&i/o-rcd jk2a64@&i/o-rcd) (set! jk2a6a@jk2a65 (make-record-type-descriptor '&i/o-read jk2a55@jk2a50 'jk2a68 '#f '#f '#())) (set! jk2c0f@jk2a6a@jk2a65 jk2a6a@jk2a65) (set! jk2a6c@jk2a67 '#f) (set! jk2c10@jk2a6c@jk2a67 jk2a6c@jk2a67) (set! jk2a6e@jk2a66 (make-record-constructor-descriptor jk2a6a@jk2a65 jk2a59@jk2a51 jk2a6c@jk2a67)) (set! jk2c11@jk2a6e@jk2a66 jk2a6e@jk2a66) (set! jk2a71@p? (record-predicate jk2a6a@jk2a65)) (set! jk2c12@jk2a71@p? jk2a71@p?) (set! jk2a73@make-i/o-read-error (record-constructor jk2a6e@jk2a66)) (set! jk2c13@jk2a73@make-i/o-read-error jk2a73@make-i/o-read-error) (set! jk2a75@i/o-read-error? (condition-predicate jk2a6a@jk2a65)) (set! jk2c14@jk2a75@i/o-read-error? jk2a75@i/o-read-error?) (set! jk2a77@&i/o-read-rtd jk2a6a@jk2a65) (set! jk2c15@jk2a77@&i/o-read-rtd jk2a77@&i/o-read-rtd) (set! jk2a79@&i/o-read-rcd jk2a6e@jk2a66) (set! jk2c16@jk2a79@&i/o-read-rcd jk2a79@&i/o-read-rcd) (set! jk2a7f@jk2a7a (make-record-type-descriptor '&i/o-write jk2a55@jk2a50 'jk2a7d '#f '#f '#())) (set! jk2c17@jk2a7f@jk2a7a jk2a7f@jk2a7a) (set! jk2a81@jk2a7c '#f) (set! jk2c18@jk2a81@jk2a7c jk2a81@jk2a7c) (set! jk2a83@jk2a7b (make-record-constructor-descriptor jk2a7f@jk2a7a jk2a59@jk2a51 jk2a81@jk2a7c)) (set! jk2c19@jk2a83@jk2a7b jk2a83@jk2a7b) (set! jk2a86@p? (record-predicate jk2a7f@jk2a7a)) (set! jk2c1a@jk2a86@p? jk2a86@p?) (set! jk2a88@make-i/o-write-error (record-constructor jk2a83@jk2a7b)) (set! jk2c1b@jk2a88@make-i/o-write-error jk2a88@make-i/o-write-error) (set! jk2a8a@i/o-write-error? (condition-predicate jk2a7f@jk2a7a)) (set! jk2c1c@jk2a8a@i/o-write-error? jk2a8a@i/o-write-error?) (set! jk2a8c@&i/o-write-rtd jk2a7f@jk2a7a) (set! jk2c1d@jk2a8c@&i/o-write-rtd jk2a8c@&i/o-write-rtd) (set! jk2a8e@&i/o-write-rcd jk2a83@jk2a7b) (set! jk2c1e@jk2a8e@&i/o-write-rcd jk2a8e@&i/o-write-rcd) (set! jk2a96@jk2a91 (make-record-type-descriptor '&i/o-invalid-position jk2a55@jk2a50 'jk2a94 '#f '#f '#((immutable position)))) (set! jk2c1f@jk2a96@jk2a91 jk2a96@jk2a91) (set! jk2a98@jk2a93 '#f) (set! jk2c20@jk2a98@jk2a93 jk2a98@jk2a93) (set! jk2a9a@jk2a92 (make-record-constructor-descriptor jk2a96@jk2a91 jk2a59@jk2a51 jk2a98@jk2a93)) (set! jk2c21@jk2a9a@jk2a92 jk2a9a@jk2a92) (set! jk2a9d@p? (record-predicate jk2a96@jk2a91)) (set! jk2c22@jk2a9d@p? jk2a9d@p?) (set! jk2a9f@make-i/o-invalid-position-error (record-constructor jk2a9a@jk2a92)) (set! jk2c23@jk2a9f@make-i/o-invalid-position-error jk2a9f@make-i/o-invalid-position-error) (set! jk2aa1@jk2a90 (record-accessor jk2a96@jk2a91 '0)) (set! jk2c24@jk2aa1@jk2a90 jk2aa1@jk2a90) (set! jk2aa3@i/o-invalid-position-error? (condition-predicate jk2a96@jk2a91)) (set! jk2c25@jk2aa3@i/o-invalid-position-error? jk2aa3@i/o-invalid-position-error?) (set! jk2aa5@i/o-error-position (condition-accessor jk2a96@jk2a91 jk2aa1@jk2a90)) (set! jk2c26@jk2aa5@i/o-error-position jk2aa5@i/o-error-position) (set! jk2aa7@&i/o-invalid-position-rtd jk2a96@jk2a91) (set! jk2c27@jk2aa7@&i/o-invalid-position-rtd jk2aa7@&i/o-invalid-position-rtd) (set! jk2aa9@&i/o-invalid-position-rcd jk2a9a@jk2a92) (set! jk2c28@jk2aa9@&i/o-invalid-position-rcd jk2aa9@&i/o-invalid-position-rcd) (set! jk2ab1@jk2aac (make-record-type-descriptor '&i/o-filename jk2a55@jk2a50 'jk2aaf '#f '#f '#((immutable filename)))) (set! jk2c29@jk2ab1@jk2aac jk2ab1@jk2aac) (set! jk2ab3@jk2aae '#f) (set! jk2c2a@jk2ab3@jk2aae jk2ab3@jk2aae) (set! jk2ab5@jk2aad (make-record-constructor-descriptor jk2ab1@jk2aac jk2a59@jk2a51 jk2ab3@jk2aae)) (set! jk2c2b@jk2ab5@jk2aad jk2ab5@jk2aad) (set! jk2ab8@p? (record-predicate jk2ab1@jk2aac)) (set! jk2c2c@jk2ab8@p? jk2ab8@p?) (set! jk2aba@make-i/o-filename-error (record-constructor jk2ab5@jk2aad)) (set! jk2c2d@jk2aba@make-i/o-filename-error jk2aba@make-i/o-filename-error) (set! jk2abc@jk2aab (record-accessor jk2ab1@jk2aac '0)) (set! jk2c2e@jk2abc@jk2aab jk2abc@jk2aab) (set! jk2abe@i/o-filename-error? (condition-predicate jk2ab1@jk2aac)) (set! jk2c2f@jk2abe@i/o-filename-error? jk2abe@i/o-filename-error?) (set! jk2ac0@i/o-error-filename (condition-accessor jk2ab1@jk2aac jk2abc@jk2aab)) (set! jk2c30@jk2ac0@i/o-error-filename jk2ac0@i/o-error-filename) (set! jk2ac2@&i/o-filename-rtd jk2ab1@jk2aac) (set! jk2c31@jk2ac2@&i/o-filename-rtd jk2ac2@&i/o-filename-rtd) (set! jk2ac4@&i/o-filename-rcd jk2ab5@jk2aad) (set! jk2c32@jk2ac4@&i/o-filename-rcd jk2ac4@&i/o-filename-rcd) (set! jk2aca@jk2ac5 (make-record-type-descriptor '&i/o-file-protection jk2ab1@jk2aac 'jk2ac8 '#f '#f '#())) (set! jk2c33@jk2aca@jk2ac5 jk2aca@jk2ac5) (set! jk2acc@jk2ac7 '#f) (set! jk2c34@jk2acc@jk2ac7 jk2acc@jk2ac7) (set! jk2ace@jk2ac6 (make-record-constructor-descriptor jk2aca@jk2ac5 jk2ab5@jk2aad jk2acc@jk2ac7)) (set! jk2c35@jk2ace@jk2ac6 jk2ace@jk2ac6) (set! jk2ad1@p? (record-predicate jk2aca@jk2ac5)) (set! jk2c36@jk2ad1@p? jk2ad1@p?) (set! jk2ad3@make-i/o-file-protection-error (record-constructor jk2ace@jk2ac6)) (set! jk2c37@jk2ad3@make-i/o-file-protection-error jk2ad3@make-i/o-file-protection-error) (set! jk2ad5@i/o-file-protection-error? (condition-predicate jk2aca@jk2ac5)) (set! jk2c38@jk2ad5@i/o-file-protection-error? jk2ad5@i/o-file-protection-error?) (set! jk2ad7@&i/o-file-protection-rtd jk2aca@jk2ac5) (set! jk2c39@jk2ad7@&i/o-file-protection-rtd jk2ad7@&i/o-file-protection-rtd) (set! jk2ad9@&i/o-file-protection-rcd jk2ace@jk2ac6) (set! jk2c3a@jk2ad9@&i/o-file-protection-rcd jk2ad9@&i/o-file-protection-rcd) (set! jk2adf@jk2ada (make-record-type-descriptor '&i/o-file-is-read-only jk2aca@jk2ac5 'jk2add '#f '#f '#())) (set! jk2c3b@jk2adf@jk2ada jk2adf@jk2ada) (set! jk2ae1@jk2adc '#f) (set! jk2c3c@jk2ae1@jk2adc jk2ae1@jk2adc) (set! jk2ae3@jk2adb (make-record-constructor-descriptor jk2adf@jk2ada jk2ace@jk2ac6 jk2ae1@jk2adc)) (set! jk2c3d@jk2ae3@jk2adb jk2ae3@jk2adb) (set! jk2ae6@p? (record-predicate jk2adf@jk2ada)) (set! jk2c3e@jk2ae6@p? jk2ae6@p?) (set! jk2ae8@make-i/o-file-is-read-only-error (record-constructor jk2ae3@jk2adb)) (set! jk2c3f@jk2ae8@make-i/o-file-is-read-only-error jk2ae8@make-i/o-file-is-read-only-error) (set! jk2aea@i/o-file-is-read-only-error? (condition-predicate jk2adf@jk2ada)) (set! jk2c40@jk2aea@i/o-file-is-read-only-error? jk2aea@i/o-file-is-read-only-error?) (set! jk2aec@&i/o-file-is-read-only-rtd jk2adf@jk2ada) (set! jk2c41@jk2aec@&i/o-file-is-read-only-rtd jk2aec@&i/o-file-is-read-only-rtd) (set! jk2aee@&i/o-file-is-read-only-rcd jk2ae3@jk2adb) (set! jk2c42@jk2aee@&i/o-file-is-read-only-rcd jk2aee@&i/o-file-is-read-only-rcd) (set! jk2af4@jk2aef (make-record-type-descriptor '&i/o-file-already-exists jk2ab1@jk2aac 'jk2af2 '#f '#f '#())) (set! jk2c43@jk2af4@jk2aef jk2af4@jk2aef) (set! jk2af6@jk2af1 '#f) (set! jk2c44@jk2af6@jk2af1 jk2af6@jk2af1) (set! jk2af8@jk2af0 (make-record-constructor-descriptor jk2af4@jk2aef jk2ab5@jk2aad jk2af6@jk2af1)) (set! jk2c45@jk2af8@jk2af0 jk2af8@jk2af0) (set! jk2afb@p? (record-predicate jk2af4@jk2aef)) (set! jk2c46@jk2afb@p? jk2afb@p?) (set! jk2afd@make-i/o-file-already-exists-error (record-constructor jk2af8@jk2af0)) (set! jk2c47@jk2afd@make-i/o-file-already-exists-error jk2afd@make-i/o-file-already-exists-error) (set! jk2aff@i/o-file-already-exists-error? (condition-predicate jk2af4@jk2aef)) (set! jk2c48@jk2aff@i/o-file-already-exists-error? jk2aff@i/o-file-already-exists-error?) (set! jk2b01@&i/o-file-already-exists-rtd jk2af4@jk2aef) (set! jk2c49@jk2b01@&i/o-file-already-exists-rtd jk2b01@&i/o-file-already-exists-rtd) (set! jk2b03@&i/o-file-already-exists-rcd jk2af8@jk2af0) (set! jk2c4a@jk2b03@&i/o-file-already-exists-rcd jk2b03@&i/o-file-already-exists-rcd) (set! jk2b09@jk2b04 (make-record-type-descriptor '&i/o-file-does-not-exist jk2ab1@jk2aac 'jk2b07 '#f '#f '#())) (set! jk2c4b@jk2b09@jk2b04 jk2b09@jk2b04) (set! jk2b0b@jk2b06 '#f) (set! jk2c4c@jk2b0b@jk2b06 jk2b0b@jk2b06) (set! jk2b0d@jk2b05 (make-record-constructor-descriptor jk2b09@jk2b04 jk2ab5@jk2aad jk2b0b@jk2b06)) (set! jk2c4d@jk2b0d@jk2b05 jk2b0d@jk2b05) (set! jk2b10@p? (record-predicate jk2b09@jk2b04)) (set! jk2c4e@jk2b10@p? jk2b10@p?) (set! jk2b12@make-i/o-file-does-not-exist-error (record-constructor jk2b0d@jk2b05)) (set! jk2c4f@jk2b12@make-i/o-file-does-not-exist-error jk2b12@make-i/o-file-does-not-exist-error) (set! jk2b14@i/o-file-does-not-exist-error? (condition-predicate jk2b09@jk2b04)) (set! jk2c50@jk2b14@i/o-file-does-not-exist-error? jk2b14@i/o-file-does-not-exist-error?) (set! jk2b16@&i/o-file-does-not-exist-rtd jk2b09@jk2b04) (set! jk2c51@jk2b16@&i/o-file-does-not-exist-rtd jk2b16@&i/o-file-does-not-exist-rtd) (set! jk2b18@&i/o-file-does-not-exist-rcd jk2b0d@jk2b05) (set! jk2c52@jk2b18@&i/o-file-does-not-exist-rcd jk2b18@&i/o-file-does-not-exist-rcd) (set! jk2b20@jk2b1b (make-record-type-descriptor '&i/o-port jk2a55@jk2a50 'jk2b1e '#f '#f '#((immutable port)))) (set! jk2c53@jk2b20@jk2b1b jk2b20@jk2b1b) (set! jk2b22@jk2b1d '#f) (set! jk2c54@jk2b22@jk2b1d jk2b22@jk2b1d) (set! jk2b24@jk2b1c (make-record-constructor-descriptor jk2b20@jk2b1b jk2a59@jk2a51 jk2b22@jk2b1d)) (set! jk2c55@jk2b24@jk2b1c jk2b24@jk2b1c) (set! jk2b27@p? (record-predicate jk2b20@jk2b1b)) (set! jk2c56@jk2b27@p? jk2b27@p?) (set! jk2b29@make-i/o-port-error (record-constructor jk2b24@jk2b1c)) (set! jk2c57@jk2b29@make-i/o-port-error jk2b29@make-i/o-port-error) (set! jk2b2b@jk2b1a (record-accessor jk2b20@jk2b1b '0)) (set! jk2c58@jk2b2b@jk2b1a jk2b2b@jk2b1a) (set! jk2b2d@i/o-port-error? (condition-predicate jk2b20@jk2b1b)) (set! jk2c59@jk2b2d@i/o-port-error? jk2b2d@i/o-port-error?) (set! jk2b2f@i/o-error-port (condition-accessor jk2b20@jk2b1b jk2b2b@jk2b1a)) (set! jk2c5a@jk2b2f@i/o-error-port jk2b2f@i/o-error-port) (set! jk2b31@&i/o-port-rtd jk2b20@jk2b1b) (set! jk2c5b@jk2b31@&i/o-port-rtd jk2b31@&i/o-port-rtd) (set! jk2b33@&i/o-port-rcd jk2b24@jk2b1c) (set! jk2c5c@jk2b33@&i/o-port-rcd jk2b33@&i/o-port-rcd) (set! jk2b39@jk2b34 (make-record-type-descriptor '&i/o-decoding jk2b20@jk2b1b 'jk2b37 '#f '#f '#())) (set! jk2c5d@jk2b39@jk2b34 jk2b39@jk2b34) (set! jk2b3b@jk2b36 '#f) (set! jk2c5e@jk2b3b@jk2b36 jk2b3b@jk2b36) (set! jk2b3d@jk2b35 (make-record-constructor-descriptor jk2b39@jk2b34 jk2b24@jk2b1c jk2b3b@jk2b36)) (set! jk2c5f@jk2b3d@jk2b35 jk2b3d@jk2b35) (set! jk2b40@p? (record-predicate jk2b39@jk2b34)) (set! jk2c60@jk2b40@p? jk2b40@p?) (set! jk2b42@make-i/o-decoding-error (record-constructor jk2b3d@jk2b35)) (set! jk2c61@jk2b42@make-i/o-decoding-error jk2b42@make-i/o-decoding-error) (set! jk2b44@i/o-decoding-error? (condition-predicate jk2b39@jk2b34)) (set! jk2c62@jk2b44@i/o-decoding-error? jk2b44@i/o-decoding-error?) (set! jk2b46@&i/o-decoding-rtd jk2b39@jk2b34) (set! jk2c63@jk2b46@&i/o-decoding-rtd jk2b46@&i/o-decoding-rtd) (set! jk2b48@&i/o-decoding-rcd jk2b3d@jk2b35) (set! jk2c64@jk2b48@&i/o-decoding-rcd jk2b48@&i/o-decoding-rcd) (set! jk2b50@jk2b4b (make-record-type-descriptor '&i/o-encoding jk2b20@jk2b1b 'jk2b4e '#f '#f '#((immutable char)))) (set! jk2c65@jk2b50@jk2b4b jk2b50@jk2b4b) (set! jk2b52@jk2b4d '#f) (set! jk2c66@jk2b52@jk2b4d jk2b52@jk2b4d) (set! jk2b54@jk2b4c (make-record-constructor-descriptor jk2b50@jk2b4b jk2b24@jk2b1c jk2b52@jk2b4d)) (set! jk2c67@jk2b54@jk2b4c jk2b54@jk2b4c) (set! jk2b57@p? (record-predicate jk2b50@jk2b4b)) (set! jk2c68@jk2b57@p? jk2b57@p?) (set! jk2b59@make-i/o-encoding-error (record-constructor jk2b54@jk2b4c)) (set! jk2c69@jk2b59@make-i/o-encoding-error jk2b59@make-i/o-encoding-error) (set! jk2b5b@jk2b4a (record-accessor jk2b50@jk2b4b '0)) (set! jk2c6a@jk2b5b@jk2b4a jk2b5b@jk2b4a) (set! jk2b5d@i/o-encoding-error? (condition-predicate jk2b50@jk2b4b)) (set! jk2c6b@jk2b5d@i/o-encoding-error? jk2b5d@i/o-encoding-error?) (set! jk2b5f@i/o-encoding-error-char (condition-accessor jk2b50@jk2b4b jk2b5b@jk2b4a)) (set! jk2c6c@jk2b5f@i/o-encoding-error-char jk2b5f@i/o-encoding-error-char) (set! jk2b61@&i/o-encoding-rtd jk2b50@jk2b4b) (set! jk2c6d@jk2b61@&i/o-encoding-rtd jk2b61@&i/o-encoding-rtd) (set! jk2b63@&i/o-encoding-rcd jk2b54@jk2b4c) (set! jk2c6e@jk2b63@&i/o-encoding-rcd jk2b63@&i/o-encoding-rcd) (set! jk2b69@jk2b64 (make-record-type-descriptor '&no-infinities jk29f5@jk29f0 'jk2b67 '#f '#f '#())) (set! jk2c6f@jk2b69@jk2b64 jk2b69@jk2b64) (set! jk2b6b@jk2b66 '#f) (set! jk2c70@jk2b6b@jk2b66 jk2b6b@jk2b66) (set! jk2b6d@jk2b65 (make-record-constructor-descriptor jk2b69@jk2b64 jk29f9@jk29f1 jk2b6b@jk2b66)) (set! jk2c71@jk2b6d@jk2b65 jk2b6d@jk2b65) (set! jk2b70@p? (record-predicate jk2b69@jk2b64)) (set! jk2c72@jk2b70@p? jk2b70@p?) (set! jk2b72@make-no-infinities-violation (record-constructor jk2b6d@jk2b65)) (set! jk2c73@jk2b72@make-no-infinities-violation jk2b72@make-no-infinities-violation) (set! jk2b74@no-infinities-violation? (condition-predicate jk2b69@jk2b64)) (set! jk2c74@jk2b74@no-infinities-violation? jk2b74@no-infinities-violation?) (set! jk2b76@&no-infinities-rtd jk2b69@jk2b64) (set! jk2c75@jk2b76@&no-infinities-rtd jk2b76@&no-infinities-rtd) (set! jk2b78@&no-infinities-rcd jk2b6d@jk2b65) (set! jk2c76@jk2b78@&no-infinities-rcd jk2b78@&no-infinities-rcd) (set! jk2b7e@jk2b79 (make-record-type-descriptor '&no-nans jk29f5@jk29f0 'jk2b7c '#f '#f '#())) (set! jk2c77@jk2b7e@jk2b79 jk2b7e@jk2b79) (set! jk2b80@jk2b7b '#f) (set! jk2c78@jk2b80@jk2b7b jk2b80@jk2b7b) (set! jk2b82@jk2b7a (make-record-constructor-descriptor jk2b7e@jk2b79 jk29f9@jk29f1 jk2b80@jk2b7b)) (set! jk2c79@jk2b82@jk2b7a jk2b82@jk2b7a) (set! jk2b85@p? (record-predicate jk2b7e@jk2b79)) (set! jk2c7a@jk2b85@p? jk2b85@p?) (set! jk2b87@make-no-nans-violation (record-constructor jk2b82@jk2b7a)) (set! jk2c7b@jk2b87@make-no-nans-violation jk2b87@make-no-nans-violation) (set! jk2b89@no-nans-violation? (condition-predicate jk2b7e@jk2b79)) (set! jk2c7c@jk2b89@no-nans-violation? jk2b89@no-nans-violation?) (set! jk2b8b@&no-nans-rtd jk2b7e@jk2b79) (set! jk2c7d@jk2b8b@&no-nans-rtd jk2b8b@&no-nans-rtd) (set! jk2b8d@&no-nans-rcd jk2b82@jk2b7a) (set! jk2c7e@jk2b8d@&no-nans-rcd jk2b8d@&no-nans-rcd) (void))
(begin (begin (jk714@jk6c9@current-primitive-locations (lambda (jk314e@x) (let ((jk3150@t (assq jk314e@x '((&no-nans-rcd . jk2c7e@jk2b8d@&no-nans-rcd) (&no-nans-rtd . jk2c7d@jk2b8b@&no-nans-rtd) (&no-infinities-rcd . jk2c76@jk2b78@&no-infinities-rcd) (&no-infinities-rtd . jk2c75@jk2b76@&no-infinities-rtd) (&i/o-encoding-rcd . jk2c6e@jk2b63@&i/o-encoding-rcd) (&i/o-encoding-rtd . jk2c6d@jk2b61@&i/o-encoding-rtd) (&i/o-decoding-rcd . jk2c64@jk2b48@&i/o-decoding-rcd) (&i/o-decoding-rtd . jk2c63@jk2b46@&i/o-decoding-rtd) (&i/o-port-rcd . jk2c5c@jk2b33@&i/o-port-rcd) (&i/o-port-rtd . jk2c5b@jk2b31@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . jk2c52@jk2b18@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . jk2c51@jk2b16@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . jk2c4a@jk2b03@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . jk2c49@jk2b01@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . jk2c42@jk2aee@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . jk2c41@jk2aec@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . jk2c3a@jk2ad9@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . jk2c39@jk2ad7@&i/o-file-protection-rtd) (&i/o-filename-rcd . jk2c32@jk2ac4@&i/o-filename-rcd) (&i/o-filename-rtd . jk2c31@jk2ac2@&i/o-filename-rtd) (&i/o-invalid-position-rcd . jk2c28@jk2aa9@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . jk2c27@jk2aa7@&i/o-invalid-position-rtd) (&i/o-write-rcd . jk2c1e@jk2a8e@&i/o-write-rcd) (&i/o-write-rtd . jk2c1d@jk2a8c@&i/o-write-rtd) (&i/o-read-rcd . jk2c16@jk2a79@&i/o-read-rcd) (&i/o-read-rtd . jk2c15@jk2a77@&i/o-read-rtd) (&i/o-rcd . jk2c0e@jk2a64@&i/o-rcd) (&i/o-rtd . jk2c0d@jk2a62@&i/o-rtd) (&undefined-rcd . jk2c06@jk2a4f@&undefined-rcd) (&undefined-rtd . jk2c05@jk2a4d@&undefined-rtd) (&syntax-rcd . jk2bfe@jk2a3a@&syntax-rcd) (&syntax-rtd . jk2bfd@jk2a38@&syntax-rtd) (&lexical-rcd . jk2bf2@jk2a19@&lexical-rcd) (&lexical-rtd . jk2bf1@jk2a17@&lexical-rtd) (&implementation-restriction-rcd . jk2bea@jk2a04@&implementation-restriction-rcd) (&implementation-restriction-rtd . jk2be9@jk2a02@&implementation-restriction-rtd) (&non-continuable-rcd . jk2be2@jk29ef@&non-continuable-rcd) (&non-continuable-rtd . jk2be1@jk29ed@&non-continuable-rtd) (&who-rcd . jk2bda@jk29da@&who-rcd) (&who-rtd . jk2bd9@jk29d8@&who-rtd) (&irritants-rcd . jk2bd0@jk29bf@&irritants-rcd) (&irritants-rtd . jk2bcf@jk29bd@&irritants-rtd) (&assertion-rcd . jk2bc6@jk29a4@&assertion-rcd) (&assertion-rtd . jk2bc5@jk29a2@&assertion-rtd) (&violation-rcd . jk2bbe@jk298f@&violation-rcd) (&violation-rtd . jk2bbd@jk298d@&violation-rtd) (&error-rcd . jk2bb6@jk297a@&error-rcd) (&error-rtd . jk2bb5@jk2978@&error-rtd) (&serious-rcd . jk2bae@jk2965@&serious-rcd) (&serious-rtd . jk2bad@jk2963@&serious-rtd) (&warning-rcd . jk2ba6@jk2950@&warning-rcd) (&warning-rtd . jk2ba5@jk294e@&warning-rtd) (&message-rcd . jk2b9e@jk293b@&message-rcd) (&message-rtd . jk2b9d@jk2939@&message-rtd) (&condition-rcd . jk2b94@jk28dc@&condition-rcd) (&condition-rtd . jk2b93@jk28da@&condition-rtd) (syntax-error . jk28b6@jke5a@syntax-error) (syntax-dispatch . jk2854@jkd7e@syntax-dispatch) (load . jk2df3@jk2c9e@load) (interaction-environment . jk28bf@jke6c@interaction-environment) (library-path . jk97b@jk7b7@library-path) (mosh-cache-dir . jk6c2@jk5a2@mosh-cache-dir) (make-parameter . jk6c1@jk5a0@make-parameter) (make-variable-transformer . jk2811@jkba9@make-variable-transformer) (identifier? . jk28b9@jke60@identifier?) (generate-temporaries . jk28af@jke4c@generate-temporaries) (free-identifier=? . jk28b0@jke4e@free-identifier=?) (syntax->datum . jk28bb@jke64@syntax->datum) (datum->syntax . jk28ba@jke62@datum->syntax) (bound-identifier=? . jk28b1@jke50@bound-identifier=?) (make-i/o-write-error . jk2c1b@jk2a88@make-i/o-write-error) (make-i/o-read-error . jk2c13@jk2a73@make-i/o-read-error) (make-i/o-port-error . jk2c57@jk2b29@make-i/o-port-error) (make-i/o-invalid-position-error . jk2c23@jk2a9f@make-i/o-invalid-position-error) (make-i/o-filename-error . jk2c2d@jk2aba@make-i/o-filename-error) (make-i/o-file-protection-error . jk2c37@jk2ad3@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . jk2c3f@jk2ae8@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . jk2c4f@jk2b12@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . jk2c47@jk2afd@make-i/o-file-already-exists-error) (make-i/o-error . jk2c0b@jk2a5e@make-i/o-error) (make-i/o-encoding-error . jk2c69@jk2b59@make-i/o-encoding-error) (make-i/o-decoding-error . jk2c61@jk2b42@make-i/o-decoding-error) (i/o-write-error? . jk2c1c@jk2a8a@i/o-write-error?) (i/o-read-error? . jk2c14@jk2a75@i/o-read-error?) (i/o-port-error? . jk2c59@jk2b2d@i/o-port-error?) (i/o-invalid-position-error? . jk2c25@jk2aa3@i/o-invalid-position-error?) (i/o-filename-error? . jk2c2f@jk2abe@i/o-filename-error?) (i/o-file-protection-error? . jk2c38@jk2ad5@i/o-file-protection-error?) (i/o-file-is-read-only-error? . jk2c40@jk2aea@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . jk2c50@jk2b14@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . jk2c48@jk2aff@i/o-file-already-exists-error?) (i/o-error? . jk2c0c@jk2a60@i/o-error?) (i/o-error-position . jk2c26@jk2aa5@i/o-error-position) (i/o-error-port . jk2c5a@jk2b2f@i/o-error-port) (i/o-error-filename . jk2c30@jk2ac0@i/o-error-filename) (i/o-encoding-error? . jk2c6b@jk2b5d@i/o-encoding-error?) (i/o-encoding-error-char . jk2c6c@jk2b5f@i/o-encoding-error-char) (i/o-decoding-error? . jk2c62@jk2b44@i/o-decoding-error?) (scheme-report-environment . jk28a6@jke3a@scheme-report-environment) (null-environment . jk28a5@jke38@null-environment) (command-line . jk2df0@jk2c98@command-line) (eval . jk28a8@jke3e@eval) (environment . jk28a4@jke36@environment) (who-condition? . jk2bd7@jk29d4@who-condition?) (warning? . jk2ba4@jk294c@warning?) (violation? . jk2bbc@jk298b@violation?) (undefined-violation? . jk2c04@jk2a4b@undefined-violation?) (syntax-violation? . jk2bfa@jk2a32@syntax-violation?) (syntax-violation-subform . jk2bfc@jk2a36@syntax-violation-subform) (syntax-violation-form . jk2bfb@jk2a34@syntax-violation-form) (syntax-violation . jk28b8@jke5e@syntax-violation) (serious-condition? . jk2bac@jk2961@serious-condition?) (non-continuable-violation? . jk2be0@jk29eb@non-continuable-violation?) (message-condition? . jk2b9b@jk2935@message-condition?) (make-who-condition . jk2bd5@jk29d0@make-who-condition) (make-warning . jk2ba3@jk294a@make-warning) (make-violation . jk2bbb@jk2989@make-violation) (make-undefined-violation . jk2c03@jk2a49@make-undefined-violation) (make-syntax-violation . jk2bf7@jk2a2c@make-syntax-violation) (make-serious-condition . jk2bab@jk295f@make-serious-condition) (make-non-continuable-violation . jk2bdf@jk29e9@make-non-continuable-violation) (make-message-condition . jk2b99@jk2931@make-message-condition) (make-lexical-violation . jk2bef@jk2a13@make-lexical-violation) (make-irritants-condition . jk2bcb@jk29b5@make-irritants-condition) (make-implementation-restriction-violation . jk2be7@jk29fe@make-implementation-restriction-violation) (make-error . jk2bb3@jk2974@make-error) (make-assertion-violation . jk2bc3@jk299e@make-assertion-violation) (lexical-violation? . jk2bf0@jk2a15@lexical-violation?) (irritants-condition? . jk2bcd@jk29b9@irritants-condition?) (implementation-restriction-violation? . jk2be8@jk2a00@implementation-restriction-violation?) (error? . jk2bb4@jk2976@error?) (condition-who . jk2bd8@jk29d6@condition-who) (condition-message . jk2b9c@jk2937@condition-message) (condition-irritants . jk2bce@jk29bb@condition-irritants) (assertion-violation? . jk2bc4@jk29a0@assertion-violation?) (no-nans-violation? . jk2c7c@jk2b89@no-nans-violation?) (no-infinities-violation? . jk2c74@jk2b74@no-infinities-violation?) (make-no-nans-violation . jk2c7b@jk2b87@make-no-nans-violation) (make-no-infinities-violation . jk2c73@jk2b72@make-no-infinities-violation) (assertion-error . jk28b5@jke58@assertion-error))))) (if jk3150@t (cdr jk3150@t) '#f)))) (jk98b@jk7d7@install-library 'jk312b '(mosh interaction) '() '() '() '() '((regexp? . jk3123) (alist->eq-hash-table . jk311f) (format . jk311c) (string-split . jk3111) (call-process . jk310b) (set-current-directory! . jk3107) (expand-path . jk3106) (current-directory . jk3105) (%spawn . jk3104) (%waitpid . jk3103) (simple-struct-name . jk3102) (simple-struct-set! . jk3101) (simple-struct-ref . jk3100) (make-simple-struct . jk30ff) (simple-struct? . jk30fe) (pointer-ref-c-int64 . jk30fd) (pointer-ref-c-int32 . jk30fc) (pointer-ref-c-int16 . jk30fb) (pointer-ref-c-int8 . jk30fa) (pointer-ref-c-uint64 . jk30f9) (pointer-ref-c-uint32 . jk30f8) (pointer-ref-c-uint16 . jk30f7) (pointer-ref-c-uint8 . jk30f6) (pointer-set-c-uint64! . jk30f5) (pointer-set-c-uint32! . jk30f4) (pointer-set-c-uint16! . jk30f3) (pointer-set-c-uint8! . jk30f2) (pointer-set-c-int64! . jk30f1) (pointer-set-c-int32! . jk30f0) (pointer-set-c-int16! . jk30ef) (pointer-set-c-int8! . jk30ee) (pointer-set-c-pointer! . jk30ed) (pointer-set-c-double! . jk30ec) (pointer-set-c-float! . jk30eb) (pointer-set-c-long-long! . jk30ea) (pointer-set-c-long! . jk30e9) (pointer-set-c-int! . jk30e8) (pointer-set-c-short! . jk30e7) (pointer-set-c-char! . jk30e6) (pointer-ref-c-pointer . jk30e5) (pointer-ref-c-double . jk30e4) (pointer-ref-c-float . jk30e3) (pointer-ref-c-unsigned-long-long . jk30e2) (pointer-ref-c-signed-long-long . jk30e1) (pointer-ref-c-unsigned-long . jk30e0) (pointer-ref-c-signed-long . jk30df) (pointer-ref-c-unsigned-int . jk30de) (pointer-ref-c-signed-int . jk30dd) (pointer-ref-c-unsigned-short . jk30dc) (pointer-ref-c-signed-short . jk30db) (pointer-ref-c-unsigned-char . jk30da) (pointer-ref-c-signed-char . jk30d9) (pointer->integer . jk30d8) (integer->pointer . jk30d7) (pointer? . jk30d6) (shared-errno . jk30d5) (%ffi-supported? . jk30ce) (%ffi-pointer->string . jk30cd) (%ffi-call->string-or-zero . jk30cc) (%ffi-call->double . jk30cb) (%ffi-call->void* . jk30ca) (%ffi-call->void . jk30c9) (%ffi-call->char . jk30c8) (%ffi-call->int . jk30c7) (%ffi-lookup . jk30c6) (%ffi-open . jk30c5) (%fork . jk30c4) (%pipe . jk30c3) (p . jk30c2) (whereis . jk30a6) (register . jk30a5) (vm-join! . jk30a4) (vm-set-value! . jk30a3) (vm? . jk30a2) (main-vm? . jk30a1) (vm-eval . jk30a0) (vm-self . jk309f) (vm-start! . jk309e) (make-vm . jk309d) (mutex-try-lock! . jk309c) (mutex-unlock! . jk309b) (mutex-lock! . jk309a) (mutex? . jk3099) (make-mutex . jk3098) (condition-variable-notify-all! . jk3097) (condition-variable-notify! . jk3096) (condition-variable-wait! . jk3095) (make-condition-variable . jk3094) (string-upcase . jk307c) (string-titlecase . jk307b) (string-normalize-nfkd . jk307a) (string-normalize-nfkc . jk3079) (string-normalize-nfd . jk3078) (string-normalize-nfc . jk3077) (string-foldcase . jk3076) (string-downcase . jk3075) (string-ci>? . jk3074) (string-ci>=? . jk3073) (string-ci=? . jk3072) (string-ci<? . jk3071) (string-ci<=? . jk3070) (char-whitespace? . jk306f) (char-upper-case? . jk306e) (char-title-case? . jk306d) (char-numeric? . jk306c) (char-lower-case? . jk306b) (char-general-category . jk306a) (char-upcase . jk3069) (char-titlecase . jk3068) (char-foldcase . jk3067) (char-downcase . jk3066) (char-ci>? . jk3065) (char-ci>=? . jk3064) (char-ci=? . jk3063) (char-ci<? . jk3062) (char-ci<=? . jk3061) (char-alphabetic? . jk3060) (make-variable-transformer . jkba8) (identifier? . jke5f) (generate-temporaries . jke4b) (free-identifier=? . jke4d) (syntax->datum . jke63) (datum->syntax . jke61) (bound-identifier=? . jke4f) (record-type-descriptor? . jk305f) (record-predicate . jk305e) (record-mutator . jk305d) (record-constructor . jk305c) (record-accessor . jk305b) (make-record-type-descriptor . jk305a) (make-record-constructor-descriptor . jk3059) (record? . jk3058) (record-type-uid . jk3057) (record-type-sealed? . jk3056) (record-type-parent . jk3055) (record-type-opaque? . jk3054) (record-type-name . jk3053) (record-type-generative? . jk3052) (record-type-field-names . jk3051) (record-rtd . jk3050) (record-field-mutable? . jk304f) (delete-file . jk304e) (file-exists? . jk304d) (vector-sort! . jk304c) (vector-sort . jk304b) (list-sort . jk304a) (symbol-hash . jk3049) (string-ci-hash . jk3048) (string-hash . jk3047) (equal-hash . jk3046) (hashtable-equivalence-function . jk3045) (make-hashtable . jk3044) (hashtable-hash-function . jk3043) (make-eqv-hashtable . jk3042) (make-eq-hashtable . jk3041) (hashtable? . jk3040) (hashtable-update! . jk303f) (hashtable-size . jk303e) (hashtable-set! . jk303d) (hashtable-ref . jk303c) (hashtable-mutable? . jk303b) (hashtable-keys . jk303a) (hashtable-entries . jk3039) (hashtable-delete! . jk3038) (hashtable-copy . jk3037) (hashtable-contains? . jk3036) (hashtable-clear! . jk3035) (call-with-output-file . jk3034) (call-with-input-file . jk3033) (write-char . jk3032) (write . jk3031) (with-output-to-file . jk3030) (with-input-from-file . jk302f) (read-char . jk302e) (read . jk302d) (peek-char . jk302c) (open-output-file . jk302b) (open-input-file . jk302a) (newline . jk3029) (display . jk3028) (close-output-port . jk3027) (close-input-port . jk3026) (eof-object? . jk3025) (eof-object . jk3024) (current-error-port . jk3023) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (utf-8-codec . jk301e) (utf-16-codec . jk301d) (transcoder-error-handling-mode . jk301c) (transcoder-eol-style . jk301b) (transcoder-codec . jk301a) (transcoded-port . jk3019) (textual-port? . jk3018) (string->bytevector . jk3017) (standard-output-port . jk3016) (standard-input-port . jk3015) (standard-error-port . jk3014) (set-port-position! . jk3013) (put-u8 . jk3012) (put-string . jk3011) (put-datum . jk3010) (put-char . jk300f) (put-bytevector . jk300e) (port? . jk300d) (port-transcoder . jk300c) (port-position . jk300b) (port-has-set-port-position!? . jk300a) (port-has-port-position? . jk3009) (port-eof? . jk3008) (output-port-buffer-mode . jk3007) (open-string-output-port . jk3006) (open-string-input-port . jk3005) (open-file-output-port . jk3004) (open-file-input/output-port . jk3003) (open-file-input-port . jk3002) (open-bytevector-output-port . jk3001) (open-bytevector-input-port . jk3000) (native-transcoder . jk2fff) (native-eol-style . jk2ffe) (make-transcoder . jk2ffd) (latin-1-codec . jk2ffc) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (make-i/o-encoding-error . jk2b58) (make-i/o-decoding-error . jk2b41) (make-custom-textual-output-port . jk2ffb) (make-custom-textual-input/output-port . jk2ffa) (make-custom-textual-input-port . jk2ff9) (make-custom-binary-output-port . jk2ff8) (make-custom-binary-input/output-port . jk2ff7) (make-custom-binary-input-port . jk2ff6) (make-bytevector . jk2ff5) (lookahead-u8 . jk2ff4) (lookahead-char . jk2ff3) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (i/o-encoding-error? . jk2b5c) (i/o-encoding-error-char . jk2b5e) (i/o-decoding-error? . jk2b43) (get-u8 . jk2ff2) (get-string-n! . jk2ff1) (get-string-n . jk2ff0) (get-string-all . jk2fef) (get-line . jk2fee) (get-datum . jk2fed) (get-char . jk2fec) (get-bytevector-some . jk2feb) (get-bytevector-n! . jk2fea) (get-bytevector-n . jk2fe9) (get-bytevector-all . jk2fe8) (flush-output-port . jk2fe7) (close-port . jk2fe6) (exit . jk2fde) (command-line . jk2c97) (string-fill! . jk2fdd) (string-set! . jk2fdc) (set-cdr! . jk2fdb) (set-car! . jk2fda) (remove . jk2fd9) (remv . jk2fd8) (remp . jk2fd7) (remq . jk2fd6) (partition . jk2fd5) (memv . jk2fd4) (memq . jk2fd3) (memp . jk2fd2) (member . jk2fd1) (exists . jk2fd0) (for-all . jk2fcf) (fold-right . jk2fce) (fold-left . jk2fcd) (find . jk2fcc) (filter . jk2fcb) (cons* . jk2fca) (assv . jk2fc9) (assq . jk2fc8) (assp . jk2fc7) (assoc . jk2fc6) (call-with-string-output-port . jk2fc5) (call-with-port . jk2fc4) (call-with-bytevector-output-port . jk2fc3) (bytevector->string . jk2fc2) (buffer-mode? . jk2fc1) (binary-port? . jk2fc0) (with-exception-handler . jk2fbf) (raise-continuable . jk2fbe) (raise . jk2fbd) (eval . jke3d) (environment . jke35) (make-enumeration . jk2fbc) (enum-set=? . jk2fbb) (enum-set-universe . jk2fba) (enum-set-union . jk2fb9) (enum-set-subset? . jk2fb8) (enum-set-projection . jk2fb7) (enum-set-member? . jk2fb6) (enum-set-intersection . jk2fb5) (enum-set-indexer . jk2fb4) (enum-set-difference . jk2fb3) (enum-set-constructor . jk2fb2) (enum-set-complement . jk2fb1) (enum-set->list . jk2fb0) (who-condition? . jk29d3) (warning? . jk294b) (violation? . jk298a) (undefined-violation? . jk2a4a) (syntax-violation? . jk2a31) (syntax-violation-subform . jk2a35) (syntax-violation-form . jk2a33) (syntax-violation . jke5d) (simple-conditions . jk2faf) (serious-condition? . jk2960) (non-continuable-violation? . jk29ea) (message-condition? . jk2934) (make-who-condition . jk29cf) (make-warning . jk2949) (make-violation . jk2988) (make-undefined-violation . jk2a48) (make-syntax-violation . jk2a2b) (make-serious-condition . jk295e) (make-non-continuable-violation . jk29e8) (make-message-condition . jk2930) (make-lexical-violation . jk2a12) (make-irritants-condition . jk29b4) (make-implementation-restriction-violation . jk29fd) (make-error . jk2973) (make-assertion-violation . jk299d) (lexical-violation? . jk2a14) (irritants-condition? . jk29b8) (implementation-restriction-violation? . jk29ff) (error? . jk2975) (condition-who . jk29d5) (condition-predicate . jk2fae) (condition-message . jk2936) (condition-irritants . jk29ba) (condition-accessor . jk2fad) (condition . jk2fac) (assertion-violation? . jk299f) (condition? . jk2fab) (utf32->string . jk2faa) (utf16->string . jk2fa9) (utf8->string . jk2fa8) (uint-list->bytevector . jk2fa7) (u8-list->bytevector . jk2fa6) (string->utf8 . jk2fa5) (string->utf32 . jk2fa4) (string->utf16 . jk2fa3) (sint-list->bytevector . jk2fa2) (native-endianness . jk2fa1) (bytevector? . jk2fa0) (bytevector=? . jk2f9f) (bytevector-uint-set! . jk2f9e) (bytevector-uint-ref . jk2f9d) (bytevector-u8-set! . jk2f9c) (bytevector-u8-ref . jk2f9b) (bytevector-u64-set! . jk2f9a) (bytevector-u64-ref . jk2f99) (bytevector-u64-native-set! . jk2f98) (bytevector-u64-native-ref . jk2f97) (bytevector-u32-set! . jk2f96) (bytevector-u32-ref . jk2f95) (bytevector-u32-native-set! . jk2f94) (bytevector-u32-native-ref . jk2f93) (bytevector-u16-set! . jk2f92) (bytevector-u16-ref . jk2f91) (bytevector-u16-native-set! . jk2f90) (bytevector-u16-native-ref . jk2f8f) (bytevector-sint-set! . jk2f8e) (bytevector-sint-ref . jk2f8d) (bytevector-s8-set! . jk2f8c) (bytevector-s8-ref . jk2f8b) (bytevector-s64-set! . jk2f8a) (bytevector-s64-ref . jk2f89) (bytevector-s64-native-set! . jk2f88) (bytevector-s64-native-ref . jk2f87) (bytevector-s32-set! . jk2f86) (bytevector-s32-ref . jk2f85) (bytevector-s32-native-set! . jk2f84) (bytevector-s32-native-ref . jk2f83) (bytevector-s16-set! . jk2f82) (bytevector-s16-ref . jk2f81) (bytevector-s16-native-set! . jk2f80) (bytevector-s16-native-ref . jk2f7f) (bytevector-length . jk2f7e) (bytevector-ieee-single-ref . jk2f7d) (bytevector-ieee-single-set! . jk2f7c) (bytevector-ieee-single-native-set! . jk2f7b) (bytevector-ieee-single-native-ref . jk2f7a) (bytevector-ieee-double-set! . jk2f79) (bytevector-ieee-double-ref . jk2f78) (bytevector-ieee-double-native-set! . jk2f77) (bytevector-ieee-double-native-ref . jk2f76) (bytevector-fill! . jk2f75) (bytevector-copy! . jk2f74) (bytevector-copy . jk2f73) (bytevector->uint-list . jk2f72) (bytevector->u8-list . jk2f71) (bytevector->sint-list . jk2f70) (no-nans-violation? . jk2b88) (no-infinities-violation? . jk2b73) (make-no-nans-violation . jk2b86) (make-no-infinities-violation . jk2b71) (real->flonum . jk2f6f) (flzero? . jk2f6e) (fltruncate . jk2f6d) (fltan . jk2f6c) (flsqrt . jk2f6b) (flsin . jk2f6a) (flround . jk2f69) (flpositive? . jk2f68) (flonum? . jk2f67) (flodd? . jk2f66) (flnumerator . jk2f65) (flnegative? . jk2f64) (flnan? . jk2f63) (flmod0 . jk2f62) (flmod . jk2f61) (flmin . jk2f60) (flmax . jk2f5f) (fllog . jk2f5e) (flinteger? . jk2f5d) (flinfinite? . jk2f5c) (flfloor . jk2f5b) (flfinite? . jk2f5a) (flexpt . jk2f59) (flexp . jk2f58) (fleven? . jk2f57) (fldiv0-and-mod0 . jk2f56) (fldiv0 . jk2f55) (fldiv-and-mod . jk2f54) (fldiv . jk2f53) (fldenominator . jk2f52) (flcos . jk2f51) (flceiling . jk2f50) (flatan . jk2f4f) (flasin . jk2f4e) (flacos . jk2f4d) (flabs . jk2f4c) (fl>? . jk2f4b) (fl>=? . jk2f4a) (fl=? . jk2f49) (fl<? . jk2f48) (fl<=? . jk2f47) (fl/ . jk2f46) (fl- . jk2f45) (fl+ . jk2f44) (fl* . jk2f43) (fixnum->flonum . jk2f42) (fxzero? . jk2f41) (fxxor . jk2f40) (fxrotate-bit-field . jk2f3f) (fxreverse-bit-field . jk2f3e) (fxpositive? . jk2f3d) (fxodd? . jk2f3c) (fxnot . jk2f3b) (fxnegative? . jk2f3a) (fxmod0 . jk2f39) (fxmod . jk2f38) (fxmin . jk2f37) (fxmax . jk2f36) (fxlength . jk2f35) (fxior . jk2f34) (fxif . jk2f33) (fxfirst-bit-set . jk2f32) (fxeven? . jk2f31) (fxdiv0-and-mod0 . jk2f30) (fxdiv0 . jk2f2f) (fxdiv-and-mod . jk2f2e) (fxdiv . jk2f2d) (fxcopy-bit-field . jk2f2c) (fxcopy-bit . jk2f2b) (fxbit-set? . jk2f2a) (fxbit-field . jk2f29) (fxbit-count . jk2f28) (fxarithmetic-shift-right . jk2f27) (fxarithmetic-shift-left . jk2f26) (fxarithmetic-shift . jk2f25) (fxand . jk2f24) (fx>? . jk2f23) (fx>=? . jk2f22) (fx=? . jk2f21) (fx<? . jk2f20) (fx<=? . jk2f1f) (fx-/carry . jk2f1e) (fx- . jk2f1d) (fx+/carry . jk2f1c) (fx+ . jk2f1b) (fx*/carry . jk2f1a) (fx* . jk2f19) (greatest-fixnum . jk2f18) (least-fixnum . jk2f17) (fixnum-width . jk2f16) (fixnum? . jk2f15) (bitwise-rotate-bit-field . jk2f14) (bitwise-reverse-bit-field . jk2f13) (bitwise-length . jk2f12) (bitwise-if . jk2f11) (bitwise-first-bit-set . jk2f10) (bitwise-copy-bit-field . jk2f0f) (bitwise-copy-bit . jk2f0e) (bitwise-bit-set? . jk2f0d) (bitwise-bit-field . jk2f0c) (bitwise-bit-count . jk2f0b) (bitwise-xor . jk2f0a) (bitwise-ior . jk2f09) (bitwise-and . jk2f08) (bitwise-not . jk2f07) (bitwise-arithmetic-shift-right . jk2f06) (bitwise-arithmetic-shift-left . jk2f05) (bitwise-arithmetic-shift . jk2f04) (zero? . jk2f03) (vector? . jk2f02) (vector-set! . jk2f01) (vector-ref . jk2f00) (vector-map . jk2eff) (vector-length . jk2efe) (vector-for-each . jk2efd) (vector-fill! . jk2efc) (vector->list . jk2efb) (vector . jk2efa) (values . jk2ef9) (truncate . jk2ef8) (tan . jk2ef7) (symbol? . jk2ef6) (symbol=? . jk2ef5) (symbol->string . jk2ef4) (substring . jk2ef3) (string? . jk2ef2) (string>? . jk2ef1) (string>=? . jk2ef0) (string=? . jk2eef) (string<? . jk2eee) (string<=? . jk2eed) (string-ref . jk2eec) (string-length . jk2eeb) (string-for-each . jk2eea) (string-copy . jk2ee9) (string-append . jk2ee8) (string->symbol . jk2ee7) (string->number . jk2ee6) (string->list . jk2ee5) (string . jk2ee4) (sqrt . jk2ee3) (sin . jk2ee2) (round . jk2ee1) (reverse . jk2ee0) (real? . jk2edf) (real-valued? . jk2ede) (real-part . jk2edd) (rationalize . jk2edc) (rational? . jk2edb) (rational-valued? . jk2eda) (procedure? . jk2ed9) (positive? . jk2ed8) (pair? . jk2ed7) (odd? . jk2ed6) (numerator . jk2ed5) (number? . jk2ed4) (number->string . jk2ed3) (null? . jk2ed2) (not . jk2ed1) (negative? . jk2ed0) (nan? . jk2ecf) (min . jk2ece) (max . jk2ecd) (map . jk2ecc) (make-vector . jk2ecb) (make-string . jk2eca) (make-rectangular . jk2ec9) (make-polar . jk2ec8) (magnitude . jk2ec7) (log . jk2ec6) (list? . jk2ec5) (list-tail . jk2ec4) (list-ref . jk2ec3) (list->vector . jk2ec2) (list->string . jk2ec1) (list . jk2ec0) (length . jk2ebf) (lcm . jk2ebe) (integer? . jk2ebd) (integer-valued? . jk2ebc) (integer->char . jk2ebb) (infinite? . jk2eba) (inexact? . jk2eb9) (inexact . jk2eb8) (imag-part . jk2eb7) (gcd . jk2eb6) (for-each . jk2eb5) (floor . jk2eb4) (finite? . jk2eb3) (expt . jk2eb2) (exp . jk2eb1) (exact? . jk2eb0) (exact-integer-sqrt . jk2eaf) (exact . jk2eae) (even? . jk2ead) (error . jk2eac) (eqv? . jk2eab) (equal? . jk2eaa) (eq? . jk2ea9) (dynamic-wind . jk2ea8) (div0-and-mod0 . jk2ea7) (mod0 . jk2ea6) (div0 . jk2ea5) (div-and-mod . jk2ea4) (mod . jk2ea3) (div . jk2ea2) (denominator . jk2ea1) (cos . jk2ea0) (cons . jk2e9f) (complex? . jk2e9e) (char? . jk2e9d) (char>? . jk2e9c) (char>=? . jk2e9b) (char=? . jk2e9a) (char<? . jk2e99) (char<=? . jk2e98) (char->integer . jk2e97) (ceiling . jk2e96) (call-with-values . jk2e95) (call/cc . jk2e94) (call-with-current-continuation . jk2e93) (cddddr . jk2e92) (cdddar . jk2e91) (cddadr . jk2e90) (cddaar . jk2e8f) (cdaddr . jk2e8e) (cdadar . jk2e8d) (cdaadr . jk2e8c) (cdaaar . jk2e8b) (cadddr . jk2e8a) (caddar . jk2e89) (cadadr . jk2e88) (cadaar . jk2e87) (caaddr . jk2e86) (caadar . jk2e85) (caaadr . jk2e84) (caaaar . jk2e83) (cdddr . jk2e82) (cddar . jk2e81) (cdadr . jk2e80) (cdaar . jk2e7f) (caddr . jk2e7e) (cadar . jk2e7d) (caadr . jk2e7c) (caaar . jk2e7b) (cddr . jk2e7a) (cdar . jk2e79) (cadr . jk2e78) (caar . jk2e77) (cdr . jk2e76) (car . jk2e75) (boolean? . jk2e74) (boolean=? . jk2e73) (atan . jk2e72) (assertion-violation . jk2e71) (asin . jk2e70) (apply . jk2e6f) (append . jk2e6e) (angle . jk2e6d) (acos . jk2e6c) (abs . jk2e6b) (/ . jk2e6a) (* . jk2e69) (- . jk2e68) (+ . jk2e67) (>= . jk2e66) (> . jk2e65) (= . jk2e64) (<= . jk2e63) (< . jk2e62) (library . jk2e61) (&no-nans . jk2e60) (&no-infinities . jk2e5f) (&i/o-encoding . jk2e5e) (&i/o-decoding . jk2e5d) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53) (&undefined . jk2e52) (&syntax . jk2e51) (&lexical . jk2e50) (&implementation-restriction . jk2e4f) (&non-continuable . jk2e4e) (&who . jk2e4d) (&irritants . jk2e4c) (&assertion . jk2e4b) (&violation . jk2e4a) (&error . jk2e49) (&serious . jk2e48) (&warning . jk2e47) (&message . jk2e46) (&condition . jk2e45) (define-condition-type . jk2e44) (define-enumeration . jk2e43) (define-record-type . jk2e42) (parent-rtd . jk2e41) (nongenerative . jk2e40) (opaque . jk2e3f) (sealed . jk2e3e) (protocol . jk2e3d) (parent . jk2e3c) (immutable . jk2e3b) (mutable . jk2e3a) (fields . jk2e39) (error-handling-mode . jk2e38) (file-options . jk2e37) (buffer-mode . jk2e36) (eol-style . jk2e35) (guard . jk2e34) (unsyntax-splicing . jk2e31) (unsyntax . jk2e30) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (_ . jk2e2d) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (assert . jk2e29) (endianness . jk2e28) (time . jk2e26) (do . jk2e25) (cond . jk2e24) (let* . jk2e23) (let*-values . jk2e22) (let-values . jk2e21) (identifier-syntax . jk2e20) (with-syntax . jk2e1f) (quasisyntax . jk2e1e) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (include . jk2e1b) (record-constructor-descriptor . jk2e19) (record-type-descriptor . jk2e18) (case . jk2e17) (unless . jk2e15) (when . jk2e14) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec* . jk2e0f) (letrec . jk2e0e) (case-lambda . jk2e0c) (lambda . jk2e0b) (syntax . jk2e0a) (syntax-case . jk2e09) (quote . jk2e08) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (import . jk2e03) (begin . jk2e02) (define-syntax . jk2e00) (define . jk2dff)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk312c '(psyntax null-environment-5) '() '() '() '() '((make-promise . jk2fdf) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (_ . jk2e2d) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (delay . jk2e27) (do . jk2e25) (cond . jk2e24) (let* . jk2e23) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (case . jk2e17) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec . jk2e0e) (lambda . jk2e0b) (quote . jk2e08) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (begin . jk2e02) (define-syntax . jk2e00) (define . jk2dff)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk312d '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . jk3074) (string-ci>=? . jk3073) (string-ci=? . jk3072) (string-ci<? . jk3071) (string-ci<=? . jk3070) (char-whitespace? . jk306f) (char-upper-case? . jk306e) (char-numeric? . jk306c) (char-lower-case? . jk306b) (char-upcase . jk3069) (char-downcase . jk3066) (char-ci>? . jk3065) (char-ci>=? . jk3064) (char-ci=? . jk3063) (char-ci<? . jk3062) (char-ci<=? . jk3061) (char-alphabetic? . jk3060) (call-with-output-file . jk3034) (call-with-input-file . jk3033) (write-char . jk3032) (write . jk3031) (with-output-to-file . jk3030) (with-input-from-file . jk302f) (read-char . jk302e) (read . jk302d) (peek-char . jk302c) (open-output-file . jk302b) (open-input-file . jk302a) (newline . jk3029) (display . jk3028) (close-output-port . jk3027) (close-input-port . jk3026) (eof-object . jk3024) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (scheme-report-environment . jke39) (quotient . jk2fe5) (null-environment . jke37) (remainder . jk2fe4) (modulo . jk2fe3) (inexact->exact . jk2fe2) (force . jk2fe1) (exact->inexact . jk2fe0) (make-promise . jk2fdf) (string-fill! . jk2fdd) (string-set! . jk2fdc) (set-cdr! . jk2fdb) (set-car! . jk2fda) (memv . jk2fd4) (memq . jk2fd3) (member . jk2fd1) (assv . jk2fc9) (assq . jk2fc8) (assoc . jk2fc6) (eval . jke3d) (zero? . jk2f03) (vector? . jk2f02) (vector-set! . jk2f01) (vector-ref . jk2f00) (vector-length . jk2efe) (vector-fill! . jk2efc) (vector->list . jk2efb) (vector . jk2efa) (values . jk2ef9) (truncate . jk2ef8) (tan . jk2ef7) (symbol? . jk2ef6) (symbol->string . jk2ef4) (substring . jk2ef3) (string? . jk2ef2) (string>? . jk2ef1) (string>=? . jk2ef0) (string=? . jk2eef) (string<? . jk2eee) (string<=? . jk2eed) (string-ref . jk2eec) (string-length . jk2eeb) (string-copy . jk2ee9) (string-append . jk2ee8) (string->symbol . jk2ee7) (string->number . jk2ee6) (string->list . jk2ee5) (string . jk2ee4) (sqrt . jk2ee3) (sin . jk2ee2) (round . jk2ee1) (reverse . jk2ee0) (real? . jk2edf) (real-part . jk2edd) (rationalize . jk2edc) (rational? . jk2edb) (procedure? . jk2ed9) (positive? . jk2ed8) (pair? . jk2ed7) (odd? . jk2ed6) (numerator . jk2ed5) (number? . jk2ed4) (number->string . jk2ed3) (not . jk2ed1) (negative? . jk2ed0) (min . jk2ece) (max . jk2ecd) (map . jk2ecc) (make-vector . jk2ecb) (make-string . jk2eca) (make-rectangular . jk2ec9) (make-polar . jk2ec8) (magnitude . jk2ec7) (log . jk2ec6) (list? . jk2ec5) (list-tail . jk2ec4) (list-ref . jk2ec3) (list->vector . jk2ec2) (list->string . jk2ec1) (list . jk2ec0) (length . jk2ebf) (lcm . jk2ebe) (integer? . jk2ebd) (integer->char . jk2ebb) (inexact? . jk2eb9) (imag-part . jk2eb7) (gcd . jk2eb6) (for-each . jk2eb5) (floor . jk2eb4) (expt . jk2eb2) (exp . jk2eb1) (exact? . jk2eb0) (even? . jk2ead) (eqv? . jk2eab) (equal? . jk2eaa) (eq? . jk2ea9) (dynamic-wind . jk2ea8) (denominator . jk2ea1) (cos . jk2ea0) (cons . jk2e9f) (complex? . jk2e9e) (char? . jk2e9d) (char>? . jk2e9c) (char>=? . jk2e9b) (char=? . jk2e9a) (char<? . jk2e99) (char<=? . jk2e98) (char->integer . jk2e97) (ceiling . jk2e96) (call-with-values . jk2e95) (call-with-current-continuation . jk2e93) (cddddr . jk2e92) (cdddar . jk2e91) (cddadr . jk2e90) (cddaar . jk2e8f) (cdaddr . jk2e8e) (cdadar . jk2e8d) (cdaadr . jk2e8c) (cdaaar . jk2e8b) (cadddr . jk2e8a) (caddar . jk2e89) (cadadr . jk2e88) (cadaar . jk2e87) (caaddr . jk2e86) (caadar . jk2e85) (caaadr . jk2e84) (caaaar . jk2e83) (cdddr . jk2e82) (cddar . jk2e81) (cdadr . jk2e80) (cdaar . jk2e7f) (caddr . jk2e7e) (cadar . jk2e7d) (caadr . jk2e7c) (caaar . jk2e7b) (cddr . jk2e7a) (cdar . jk2e79) (cadr . jk2e78) (caar . jk2e77) (cdr . jk2e76) (car . jk2e75) (boolean? . jk2e74) (atan . jk2e72) (asin . jk2e70) (apply . jk2e6f) (append . jk2e6e) (angle . jk2e6d) (acos . jk2e6c) (abs . jk2e6b) (/ . jk2e6a) (* . jk2e69) (- . jk2e68) (+ . jk2e67) (>= . jk2e66) (> . jk2e65) (= . jk2e64) (<= . jk2e63) (< . jk2e62) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (delay . jk2e27) (do . jk2e25) (cond . jk2e24) (let* . jk2e23) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (case . jk2e17) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec . jk2e0e) (lambda . jk2e0b) (quote . jk2e08) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (begin . jk2e02) (define-syntax . jk2e00) (define . jk2dff)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk312e '(psyntax modules) '() '() '() '() '((module . jk2e01)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk312f '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3130 '(rnrs) '(6) '() '() '() '((regexp? . jk3123) (string-upcase . jk307c) (string-titlecase . jk307b) (string-normalize-nfkd . jk307a) (string-normalize-nfkc . jk3079) (string-normalize-nfd . jk3078) (string-normalize-nfc . jk3077) (string-foldcase . jk3076) (string-downcase . jk3075) (string-ci>? . jk3074) (string-ci>=? . jk3073) (string-ci=? . jk3072) (string-ci<? . jk3071) (string-ci<=? . jk3070) (char-whitespace? . jk306f) (char-upper-case? . jk306e) (char-title-case? . jk306d) (char-numeric? . jk306c) (char-lower-case? . jk306b) (char-general-category . jk306a) (char-upcase . jk3069) (char-titlecase . jk3068) (char-foldcase . jk3067) (char-downcase . jk3066) (char-ci>? . jk3065) (char-ci>=? . jk3064) (char-ci=? . jk3063) (char-ci<? . jk3062) (char-ci<=? . jk3061) (char-alphabetic? . jk3060) (make-variable-transformer . jkba8) (identifier? . jke5f) (generate-temporaries . jke4b) (free-identifier=? . jke4d) (syntax->datum . jke63) (datum->syntax . jke61) (bound-identifier=? . jke4f) (record-type-descriptor? . jk305f) (record-predicate . jk305e) (record-mutator . jk305d) (record-constructor . jk305c) (record-accessor . jk305b) (make-record-type-descriptor . jk305a) (make-record-constructor-descriptor . jk3059) (record? . jk3058) (record-type-uid . jk3057) (record-type-sealed? . jk3056) (record-type-parent . jk3055) (record-type-opaque? . jk3054) (record-type-name . jk3053) (record-type-generative? . jk3052) (record-type-field-names . jk3051) (record-rtd . jk3050) (record-field-mutable? . jk304f) (delete-file . jk304e) (file-exists? . jk304d) (vector-sort! . jk304c) (vector-sort . jk304b) (list-sort . jk304a) (symbol-hash . jk3049) (string-ci-hash . jk3048) (string-hash . jk3047) (equal-hash . jk3046) (hashtable-equivalence-function . jk3045) (make-hashtable . jk3044) (hashtable-hash-function . jk3043) (make-eqv-hashtable . jk3042) (make-eq-hashtable . jk3041) (hashtable? . jk3040) (hashtable-update! . jk303f) (hashtable-size . jk303e) (hashtable-set! . jk303d) (hashtable-ref . jk303c) (hashtable-mutable? . jk303b) (hashtable-keys . jk303a) (hashtable-entries . jk3039) (hashtable-delete! . jk3038) (hashtable-copy . jk3037) (hashtable-contains? . jk3036) (hashtable-clear! . jk3035) (call-with-output-file . jk3034) (call-with-input-file . jk3033) (write-char . jk3032) (write . jk3031) (with-output-to-file . jk3030) (with-input-from-file . jk302f) (read-char . jk302e) (read . jk302d) (peek-char . jk302c) (open-output-file . jk302b) (open-input-file . jk302a) (newline . jk3029) (display . jk3028) (close-output-port . jk3027) (close-input-port . jk3026) (eof-object? . jk3025) (eof-object . jk3024) (current-error-port . jk3023) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (utf-8-codec . jk301e) (utf-16-codec . jk301d) (transcoder-error-handling-mode . jk301c) (transcoder-eol-style . jk301b) (transcoder-codec . jk301a) (transcoded-port . jk3019) (textual-port? . jk3018) (string->bytevector . jk3017) (standard-output-port . jk3016) (standard-input-port . jk3015) (standard-error-port . jk3014) (set-port-position! . jk3013) (put-u8 . jk3012) (put-string . jk3011) (put-datum . jk3010) (put-char . jk300f) (put-bytevector . jk300e) (port? . jk300d) (port-transcoder . jk300c) (port-position . jk300b) (port-has-set-port-position!? . jk300a) (port-has-port-position? . jk3009) (port-eof? . jk3008) (output-port-buffer-mode . jk3007) (open-string-output-port . jk3006) (open-string-input-port . jk3005) (open-file-output-port . jk3004) (open-file-input/output-port . jk3003) (open-file-input-port . jk3002) (open-bytevector-output-port . jk3001) (open-bytevector-input-port . jk3000) (native-transcoder . jk2fff) (native-eol-style . jk2ffe) (make-transcoder . jk2ffd) (latin-1-codec . jk2ffc) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (make-i/o-encoding-error . jk2b58) (make-i/o-decoding-error . jk2b41) (make-custom-textual-output-port . jk2ffb) (make-custom-textual-input/output-port . jk2ffa) (make-custom-textual-input-port . jk2ff9) (make-custom-binary-output-port . jk2ff8) (make-custom-binary-input/output-port . jk2ff7) (make-custom-binary-input-port . jk2ff6) (make-bytevector . jk2ff5) (lookahead-u8 . jk2ff4) (lookahead-char . jk2ff3) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (i/o-encoding-error? . jk2b5c) (i/o-encoding-error-char . jk2b5e) (i/o-decoding-error? . jk2b43) (get-u8 . jk2ff2) (get-string-n! . jk2ff1) (get-string-n . jk2ff0) (get-string-all . jk2fef) (get-line . jk2fee) (get-datum . jk2fed) (get-char . jk2fec) (get-bytevector-some . jk2feb) (get-bytevector-n! . jk2fea) (get-bytevector-n . jk2fe9) (get-bytevector-all . jk2fe8) (flush-output-port . jk2fe7) (close-port . jk2fe6) (exit . jk2fde) (command-line . jk2c97) (remove . jk2fd9) (remv . jk2fd8) (remp . jk2fd7) (remq . jk2fd6) (partition . jk2fd5) (memv . jk2fd4) (memq . jk2fd3) (memp . jk2fd2) (member . jk2fd1) (exists . jk2fd0) (for-all . jk2fcf) (fold-right . jk2fce) (fold-left . jk2fcd) (find . jk2fcc) (filter . jk2fcb) (cons* . jk2fca) (assv . jk2fc9) (assq . jk2fc8) (assp . jk2fc7) (assoc . jk2fc6) (call-with-string-output-port . jk2fc5) (call-with-port . jk2fc4) (call-with-bytevector-output-port . jk2fc3) (bytevector->string . jk2fc2) (buffer-mode? . jk2fc1) (binary-port? . jk2fc0) (with-exception-handler . jk2fbf) (raise-continuable . jk2fbe) (raise . jk2fbd) (make-enumeration . jk2fbc) (enum-set=? . jk2fbb) (enum-set-universe . jk2fba) (enum-set-union . jk2fb9) (enum-set-subset? . jk2fb8) (enum-set-projection . jk2fb7) (enum-set-member? . jk2fb6) (enum-set-intersection . jk2fb5) (enum-set-indexer . jk2fb4) (enum-set-difference . jk2fb3) (enum-set-constructor . jk2fb2) (enum-set-complement . jk2fb1) (enum-set->list . jk2fb0) (who-condition? . jk29d3) (warning? . jk294b) (violation? . jk298a) (undefined-violation? . jk2a4a) (syntax-violation? . jk2a31) (syntax-violation-subform . jk2a35) (syntax-violation-form . jk2a33) (syntax-violation . jke5d) (simple-conditions . jk2faf) (serious-condition? . jk2960) (non-continuable-violation? . jk29ea) (message-condition? . jk2934) (make-who-condition . jk29cf) (make-warning . jk2949) (make-violation . jk2988) (make-undefined-violation . jk2a48) (make-syntax-violation . jk2a2b) (make-serious-condition . jk295e) (make-non-continuable-violation . jk29e8) (make-message-condition . jk2930) (make-lexical-violation . jk2a12) (make-irritants-condition . jk29b4) (make-implementation-restriction-violation . jk29fd) (make-error . jk2973) (make-assertion-violation . jk299d) (lexical-violation? . jk2a14) (irritants-condition? . jk29b8) (implementation-restriction-violation? . jk29ff) (error? . jk2975) (condition-who . jk29d5) (condition-predicate . jk2fae) (condition-message . jk2936) (condition-irritants . jk29ba) (condition-accessor . jk2fad) (condition . jk2fac) (assertion-violation? . jk299f) (condition? . jk2fab) (utf32->string . jk2faa) (utf16->string . jk2fa9) (utf8->string . jk2fa8) (uint-list->bytevector . jk2fa7) (u8-list->bytevector . jk2fa6) (string->utf8 . jk2fa5) (string->utf32 . jk2fa4) (string->utf16 . jk2fa3) (sint-list->bytevector . jk2fa2) (native-endianness . jk2fa1) (bytevector? . jk2fa0) (bytevector=? . jk2f9f) (bytevector-uint-set! . jk2f9e) (bytevector-uint-ref . jk2f9d) (bytevector-u8-set! . jk2f9c) (bytevector-u8-ref . jk2f9b) (bytevector-u64-set! . jk2f9a) (bytevector-u64-ref . jk2f99) (bytevector-u64-native-set! . jk2f98) (bytevector-u64-native-ref . jk2f97) (bytevector-u32-set! . jk2f96) (bytevector-u32-ref . jk2f95) (bytevector-u32-native-set! . jk2f94) (bytevector-u32-native-ref . jk2f93) (bytevector-u16-set! . jk2f92) (bytevector-u16-ref . jk2f91) (bytevector-u16-native-set! . jk2f90) (bytevector-u16-native-ref . jk2f8f) (bytevector-sint-set! . jk2f8e) (bytevector-sint-ref . jk2f8d) (bytevector-s8-set! . jk2f8c) (bytevector-s8-ref . jk2f8b) (bytevector-s64-set! . jk2f8a) (bytevector-s64-ref . jk2f89) (bytevector-s64-native-set! . jk2f88) (bytevector-s64-native-ref . jk2f87) (bytevector-s32-set! . jk2f86) (bytevector-s32-ref . jk2f85) (bytevector-s32-native-set! . jk2f84) (bytevector-s32-native-ref . jk2f83) (bytevector-s16-set! . jk2f82) (bytevector-s16-ref . jk2f81) (bytevector-s16-native-set! . jk2f80) (bytevector-s16-native-ref . jk2f7f) (bytevector-length . jk2f7e) (bytevector-ieee-single-ref . jk2f7d) (bytevector-ieee-single-set! . jk2f7c) (bytevector-ieee-single-native-set! . jk2f7b) (bytevector-ieee-single-native-ref . jk2f7a) (bytevector-ieee-double-set! . jk2f79) (bytevector-ieee-double-ref . jk2f78) (bytevector-ieee-double-native-set! . jk2f77) (bytevector-ieee-double-native-ref . jk2f76) (bytevector-fill! . jk2f75) (bytevector-copy! . jk2f74) (bytevector-copy . jk2f73) (bytevector->uint-list . jk2f72) (bytevector->u8-list . jk2f71) (bytevector->sint-list . jk2f70) (no-nans-violation? . jk2b88) (no-infinities-violation? . jk2b73) (make-no-nans-violation . jk2b86) (make-no-infinities-violation . jk2b71) (real->flonum . jk2f6f) (flzero? . jk2f6e) (fltruncate . jk2f6d) (fltan . jk2f6c) (flsqrt . jk2f6b) (flsin . jk2f6a) (flround . jk2f69) (flpositive? . jk2f68) (flonum? . jk2f67) (flodd? . jk2f66) (flnumerator . jk2f65) (flnegative? . jk2f64) (flnan? . jk2f63) (flmod0 . jk2f62) (flmod . jk2f61) (flmin . jk2f60) (flmax . jk2f5f) (fllog . jk2f5e) (flinteger? . jk2f5d) (flinfinite? . jk2f5c) (flfloor . jk2f5b) (flfinite? . jk2f5a) (flexpt . jk2f59) (flexp . jk2f58) (fleven? . jk2f57) (fldiv0-and-mod0 . jk2f56) (fldiv0 . jk2f55) (fldiv-and-mod . jk2f54) (fldiv . jk2f53) (fldenominator . jk2f52) (flcos . jk2f51) (flceiling . jk2f50) (flatan . jk2f4f) (flasin . jk2f4e) (flacos . jk2f4d) (flabs . jk2f4c) (fl>? . jk2f4b) (fl>=? . jk2f4a) (fl=? . jk2f49) (fl<? . jk2f48) (fl<=? . jk2f47) (fl/ . jk2f46) (fl- . jk2f45) (fl+ . jk2f44) (fl* . jk2f43) (fixnum->flonum . jk2f42) (fxzero? . jk2f41) (fxxor . jk2f40) (fxrotate-bit-field . jk2f3f) (fxreverse-bit-field . jk2f3e) (fxpositive? . jk2f3d) (fxodd? . jk2f3c) (fxnot . jk2f3b) (fxnegative? . jk2f3a) (fxmod0 . jk2f39) (fxmod . jk2f38) (fxmin . jk2f37) (fxmax . jk2f36) (fxlength . jk2f35) (fxior . jk2f34) (fxif . jk2f33) (fxfirst-bit-set . jk2f32) (fxeven? . jk2f31) (fxdiv0-and-mod0 . jk2f30) (fxdiv0 . jk2f2f) (fxdiv-and-mod . jk2f2e) (fxdiv . jk2f2d) (fxcopy-bit-field . jk2f2c) (fxcopy-bit . jk2f2b) (fxbit-set? . jk2f2a) (fxbit-field . jk2f29) (fxbit-count . jk2f28) (fxarithmetic-shift-right . jk2f27) (fxarithmetic-shift-left . jk2f26) (fxarithmetic-shift . jk2f25) (fxand . jk2f24) (fx>? . jk2f23) (fx>=? . jk2f22) (fx=? . jk2f21) (fx<? . jk2f20) (fx<=? . jk2f1f) (fx-/carry . jk2f1e) (fx- . jk2f1d) (fx+/carry . jk2f1c) (fx+ . jk2f1b) (fx*/carry . jk2f1a) (fx* . jk2f19) (greatest-fixnum . jk2f18) (least-fixnum . jk2f17) (fixnum-width . jk2f16) (fixnum? . jk2f15) (bitwise-rotate-bit-field . jk2f14) (bitwise-reverse-bit-field . jk2f13) (bitwise-length . jk2f12) (bitwise-if . jk2f11) (bitwise-first-bit-set . jk2f10) (bitwise-copy-bit-field . jk2f0f) (bitwise-copy-bit . jk2f0e) (bitwise-bit-set? . jk2f0d) (bitwise-bit-field . jk2f0c) (bitwise-bit-count . jk2f0b) (bitwise-xor . jk2f0a) (bitwise-ior . jk2f09) (bitwise-and . jk2f08) (bitwise-not . jk2f07) (bitwise-arithmetic-shift-right . jk2f06) (bitwise-arithmetic-shift-left . jk2f05) (bitwise-arithmetic-shift . jk2f04) (zero? . jk2f03) (vector? . jk2f02) (vector-set! . jk2f01) (vector-ref . jk2f00) (vector-map . jk2eff) (vector-length . jk2efe) (vector-for-each . jk2efd) (vector-fill! . jk2efc) (vector->list . jk2efb) (vector . jk2efa) (values . jk2ef9) (truncate . jk2ef8) (tan . jk2ef7) (symbol? . jk2ef6) (symbol=? . jk2ef5) (symbol->string . jk2ef4) (substring . jk2ef3) (string? . jk2ef2) (string>? . jk2ef1) (string>=? . jk2ef0) (string=? . jk2eef) (string<? . jk2eee) (string<=? . jk2eed) (string-ref . jk2eec) (string-length . jk2eeb) (string-for-each . jk2eea) (string-copy . jk2ee9) (string-append . jk2ee8) (string->symbol . jk2ee7) (string->number . jk2ee6) (string->list . jk2ee5) (string . jk2ee4) (sqrt . jk2ee3) (sin . jk2ee2) (round . jk2ee1) (reverse . jk2ee0) (real? . jk2edf) (real-valued? . jk2ede) (real-part . jk2edd) (rationalize . jk2edc) (rational? . jk2edb) (rational-valued? . jk2eda) (procedure? . jk2ed9) (positive? . jk2ed8) (pair? . jk2ed7) (odd? . jk2ed6) (numerator . jk2ed5) (number? . jk2ed4) (number->string . jk2ed3) (null? . jk2ed2) (not . jk2ed1) (negative? . jk2ed0) (nan? . jk2ecf) (min . jk2ece) (max . jk2ecd) (map . jk2ecc) (make-vector . jk2ecb) (make-string . jk2eca) (make-rectangular . jk2ec9) (make-polar . jk2ec8) (magnitude . jk2ec7) (log . jk2ec6) (list? . jk2ec5) (list-tail . jk2ec4) (list-ref . jk2ec3) (list->vector . jk2ec2) (list->string . jk2ec1) (list . jk2ec0) (length . jk2ebf) (lcm . jk2ebe) (integer? . jk2ebd) (integer-valued? . jk2ebc) (integer->char . jk2ebb) (infinite? . jk2eba) (inexact? . jk2eb9) (inexact . jk2eb8) (imag-part . jk2eb7) (gcd . jk2eb6) (for-each . jk2eb5) (floor . jk2eb4) (finite? . jk2eb3) (expt . jk2eb2) (exp . jk2eb1) (exact? . jk2eb0) (exact-integer-sqrt . jk2eaf) (exact . jk2eae) (even? . jk2ead) (error . jk2eac) (eqv? . jk2eab) (equal? . jk2eaa) (eq? . jk2ea9) (dynamic-wind . jk2ea8) (div0-and-mod0 . jk2ea7) (mod0 . jk2ea6) (div0 . jk2ea5) (div-and-mod . jk2ea4) (mod . jk2ea3) (div . jk2ea2) (denominator . jk2ea1) (cos . jk2ea0) (cons . jk2e9f) (complex? . jk2e9e) (char? . jk2e9d) (char>? . jk2e9c) (char>=? . jk2e9b) (char=? . jk2e9a) (char<? . jk2e99) (char<=? . jk2e98) (char->integer . jk2e97) (ceiling . jk2e96) (call-with-values . jk2e95) (call/cc . jk2e94) (call-with-current-continuation . jk2e93) (cddddr . jk2e92) (cdddar . jk2e91) (cddadr . jk2e90) (cddaar . jk2e8f) (cdaddr . jk2e8e) (cdadar . jk2e8d) (cdaadr . jk2e8c) (cdaaar . jk2e8b) (cadddr . jk2e8a) (caddar . jk2e89) (cadadr . jk2e88) (cadaar . jk2e87) (caaddr . jk2e86) (caadar . jk2e85) (caaadr . jk2e84) (caaaar . jk2e83) (cdddr . jk2e82) (cddar . jk2e81) (cdadr . jk2e80) (cdaar . jk2e7f) (caddr . jk2e7e) (cadar . jk2e7d) (caadr . jk2e7c) (caaar . jk2e7b) (cddr . jk2e7a) (cdar . jk2e79) (cadr . jk2e78) (caar . jk2e77) (cdr . jk2e76) (car . jk2e75) (boolean? . jk2e74) (boolean=? . jk2e73) (atan . jk2e72) (assertion-violation . jk2e71) (asin . jk2e70) (apply . jk2e6f) (append . jk2e6e) (angle . jk2e6d) (acos . jk2e6c) (abs . jk2e6b) (/ . jk2e6a) (* . jk2e69) (- . jk2e68) (+ . jk2e67) (>= . jk2e66) (> . jk2e65) (= . jk2e64) (<= . jk2e63) (< . jk2e62) (&no-nans . jk2e60) (&no-infinities . jk2e5f) (&i/o-encoding . jk2e5e) (&i/o-decoding . jk2e5d) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53) (&undefined . jk2e52) (&syntax . jk2e51) (&lexical . jk2e50) (&implementation-restriction . jk2e4f) (&non-continuable . jk2e4e) (&who . jk2e4d) (&irritants . jk2e4c) (&assertion . jk2e4b) (&violation . jk2e4a) (&error . jk2e49) (&serious . jk2e48) (&warning . jk2e47) (&message . jk2e46) (&condition . jk2e45) (define-condition-type . jk2e44) (define-enumeration . jk2e43) (define-record-type . jk2e42) (parent-rtd . jk2e41) (nongenerative . jk2e40) (opaque . jk2e3f) (sealed . jk2e3e) (protocol . jk2e3d) (parent . jk2e3c) (immutable . jk2e3b) (mutable . jk2e3a) (fields . jk2e39) (error-handling-mode . jk2e38) (file-options . jk2e37) (buffer-mode . jk2e36) (eol-style . jk2e35) (guard . jk2e34) (unsyntax-splicing . jk2e31) (unsyntax . jk2e30) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (_ . jk2e2d) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (assert . jk2e29) (endianness . jk2e28) (do . jk2e25) (cond . jk2e24) (let* . jk2e23) (let*-values . jk2e22) (let-values . jk2e21) (identifier-syntax . jk2e20) (with-syntax . jk2e1f) (quasisyntax . jk2e1e) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (record-constructor-descriptor . jk2e19) (record-type-descriptor . jk2e18) (case . jk2e17) (unless . jk2e15) (when . jk2e14) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec* . jk2e0f) (letrec . jk2e0e) (case-lambda . jk2e0c) (lambda . jk2e0b) (syntax . jk2e0a) (syntax-case . jk2e09) (quote . jk2e08) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (begin . jk2e02) (define-syntax . jk2e00) (define . jk2dff)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3131 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . jke39) (quotient . jk2fe5) (null-environment . jke37) (remainder . jk2fe4) (modulo . jk2fe3) (inexact->exact . jk2fe2) (force . jk2fe1) (exact->inexact . jk2fe0) (make-promise . jk2fdf) (delay . jk2e27)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3132 '(rnrs control) '(6) '() '() '() '((do . jk2e25) (unless . jk2e15) (when . jk2e14) (case-lambda . jk2e0c)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3133 '(rnrs eval) '(6) '() '() '() '((eval . jke3d) (environment . jke35)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3134 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . jk2fdb) (set-car! . jk2fda)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3135 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . jk2fdd) (string-set! . jk2fdc)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3136 '(rnrs programs) '(6) '() '() '() '((exit . jk2fde) (command-line . jk2c97)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3137 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jkba8) (identifier? . jke5f) (generate-temporaries . jke4b) (free-identifier=? . jke4d) (syntax->datum . jke63) (datum->syntax . jke61) (bound-identifier=? . jke4f) (syntax-violation . jke5d) (unsyntax-splicing . jk2e31) (unsyntax . jk2e30) (_ . jk2e2d) (... . jk2e2a) (with-syntax . jk2e1f) (quasisyntax . jk2e1e) (syntax . jk2e0a) (syntax-case . jk2e09)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3138 '(rnrs files) '(6) '() '() '() '((delete-file . jk304e) (file-exists? . jk304d) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3139 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . jk304c) (vector-sort . jk304b) (list-sort . jk304a)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313a '(rnrs base) '(6) '() '() '() '((zero? . jk2f03) (vector? . jk2f02) (vector-set! . jk2f01) (vector-ref . jk2f00) (vector-map . jk2eff) (vector-length . jk2efe) (vector-for-each . jk2efd) (vector-fill! . jk2efc) (vector->list . jk2efb) (vector . jk2efa) (values . jk2ef9) (truncate . jk2ef8) (tan . jk2ef7) (symbol? . jk2ef6) (symbol=? . jk2ef5) (symbol->string . jk2ef4) (substring . jk2ef3) (string? . jk2ef2) (string>? . jk2ef1) (string>=? . jk2ef0) (string=? . jk2eef) (string<? . jk2eee) (string<=? . jk2eed) (string-ref . jk2eec) (string-length . jk2eeb) (string-for-each . jk2eea) (string-copy . jk2ee9) (string-append . jk2ee8) (string->symbol . jk2ee7) (string->number . jk2ee6) (string->list . jk2ee5) (string . jk2ee4) (sqrt . jk2ee3) (sin . jk2ee2) (round . jk2ee1) (reverse . jk2ee0) (real? . jk2edf) (real-valued? . jk2ede) (real-part . jk2edd) (rationalize . jk2edc) (rational? . jk2edb) (rational-valued? . jk2eda) (procedure? . jk2ed9) (positive? . jk2ed8) (pair? . jk2ed7) (odd? . jk2ed6) (numerator . jk2ed5) (number? . jk2ed4) (number->string . jk2ed3) (null? . jk2ed2) (not . jk2ed1) (negative? . jk2ed0) (nan? . jk2ecf) (min . jk2ece) (max . jk2ecd) (map . jk2ecc) (make-vector . jk2ecb) (make-string . jk2eca) (make-rectangular . jk2ec9) (make-polar . jk2ec8) (magnitude . jk2ec7) (log . jk2ec6) (list? . jk2ec5) (list-tail . jk2ec4) (list-ref . jk2ec3) (list->vector . jk2ec2) (list->string . jk2ec1) (list . jk2ec0) (length . jk2ebf) (lcm . jk2ebe) (integer? . jk2ebd) (integer-valued? . jk2ebc) (integer->char . jk2ebb) (infinite? . jk2eba) (inexact? . jk2eb9) (inexact . jk2eb8) (imag-part . jk2eb7) (gcd . jk2eb6) (for-each . jk2eb5) (floor . jk2eb4) (finite? . jk2eb3) (expt . jk2eb2) (exp . jk2eb1) (exact? . jk2eb0) (exact-integer-sqrt . jk2eaf) (exact . jk2eae) (even? . jk2ead) (error . jk2eac) (eqv? . jk2eab) (equal? . jk2eaa) (eq? . jk2ea9) (dynamic-wind . jk2ea8) (div0-and-mod0 . jk2ea7) (mod0 . jk2ea6) (div0 . jk2ea5) (div-and-mod . jk2ea4) (mod . jk2ea3) (div . jk2ea2) (denominator . jk2ea1) (cos . jk2ea0) (cons . jk2e9f) (complex? . jk2e9e) (char? . jk2e9d) (char>? . jk2e9c) (char>=? . jk2e9b) (char=? . jk2e9a) (char<? . jk2e99) (char<=? . jk2e98) (char->integer . jk2e97) (ceiling . jk2e96) (call-with-values . jk2e95) (call/cc . jk2e94) (call-with-current-continuation . jk2e93) (cddddr . jk2e92) (cdddar . jk2e91) (cddadr . jk2e90) (cddaar . jk2e8f) (cdaddr . jk2e8e) (cdadar . jk2e8d) (cdaadr . jk2e8c) (cdaaar . jk2e8b) (cadddr . jk2e8a) (caddar . jk2e89) (cadadr . jk2e88) (cadaar . jk2e87) (caaddr . jk2e86) (caadar . jk2e85) (caaadr . jk2e84) (caaaar . jk2e83) (cdddr . jk2e82) (cddar . jk2e81) (cdadr . jk2e80) (cdaar . jk2e7f) (caddr . jk2e7e) (cadar . jk2e7d) (caadr . jk2e7c) (caaar . jk2e7b) (cddr . jk2e7a) (cdar . jk2e79) (cadr . jk2e78) (caar . jk2e77) (cdr . jk2e76) (car . jk2e75) (boolean? . jk2e74) (boolean=? . jk2e73) (atan . jk2e72) (assertion-violation . jk2e71) (asin . jk2e70) (apply . jk2e6f) (append . jk2e6e) (angle . jk2e6d) (acos . jk2e6c) (abs . jk2e6b) (/ . jk2e6a) (* . jk2e69) (- . jk2e68) (+ . jk2e67) (>= . jk2e66) (> . jk2e65) (= . jk2e64) (<= . jk2e63) (< . jk2e62) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (_ . jk2e2d) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (assert . jk2e29) (cond . jk2e24) (let* . jk2e23) (let*-values . jk2e22) (let-values . jk2e21) (identifier-syntax . jk2e20) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (case . jk2e17) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec* . jk2e0f) (letrec . jk2e0e) (lambda . jk2e0b) (quote . jk2e08) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (begin . jk2e02) (define-syntax . jk2e00) (define . jk2dff)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313b '(rnrs lists) '(6) '() '() '() '((remove . jk2fd9) (remv . jk2fd8) (remp . jk2fd7) (remq . jk2fd6) (partition . jk2fd5) (memv . jk2fd4) (memq . jk2fd3) (memp . jk2fd2) (member . jk2fd1) (exists . jk2fd0) (for-all . jk2fcf) (fold-right . jk2fce) (fold-left . jk2fcd) (find . jk2fcc) (filter . jk2fcb) (cons* . jk2fca) (assv . jk2fc9) (assq . jk2fc8) (assp . jk2fc7) (assoc . jk2fc6)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313c '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . jk3034) (call-with-input-file . jk3033) (write-char . jk3032) (write . jk3031) (with-output-to-file . jk3030) (with-input-from-file . jk302f) (read-char . jk302e) (read . jk302d) (peek-char . jk302c) (open-output-file . jk302b) (open-input-file . jk302a) (newline . jk3029) (display . jk3028) (close-output-port . jk3027) (close-input-port . jk3026) (eof-object? . jk3025) (eof-object . jk3024) (current-error-port . jk3023) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313d '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . jk2ff5) (utf32->string . jk2faa) (utf16->string . jk2fa9) (utf8->string . jk2fa8) (uint-list->bytevector . jk2fa7) (u8-list->bytevector . jk2fa6) (string->utf8 . jk2fa5) (string->utf32 . jk2fa4) (string->utf16 . jk2fa3) (sint-list->bytevector . jk2fa2) (native-endianness . jk2fa1) (bytevector? . jk2fa0) (bytevector=? . jk2f9f) (bytevector-uint-set! . jk2f9e) (bytevector-uint-ref . jk2f9d) (bytevector-u8-set! . jk2f9c) (bytevector-u8-ref . jk2f9b) (bytevector-u64-set! . jk2f9a) (bytevector-u64-ref . jk2f99) (bytevector-u64-native-set! . jk2f98) (bytevector-u64-native-ref . jk2f97) (bytevector-u32-set! . jk2f96) (bytevector-u32-ref . jk2f95) (bytevector-u32-native-set! . jk2f94) (bytevector-u32-native-ref . jk2f93) (bytevector-u16-set! . jk2f92) (bytevector-u16-ref . jk2f91) (bytevector-u16-native-set! . jk2f90) (bytevector-u16-native-ref . jk2f8f) (bytevector-sint-set! . jk2f8e) (bytevector-sint-ref . jk2f8d) (bytevector-s8-set! . jk2f8c) (bytevector-s8-ref . jk2f8b) (bytevector-s64-set! . jk2f8a) (bytevector-s64-ref . jk2f89) (bytevector-s64-native-set! . jk2f88) (bytevector-s64-native-ref . jk2f87) (bytevector-s32-set! . jk2f86) (bytevector-s32-ref . jk2f85) (bytevector-s32-native-set! . jk2f84) (bytevector-s32-native-ref . jk2f83) (bytevector-s16-set! . jk2f82) (bytevector-s16-ref . jk2f81) (bytevector-s16-native-set! . jk2f80) (bytevector-s16-native-ref . jk2f7f) (bytevector-length . jk2f7e) (bytevector-ieee-single-ref . jk2f7d) (bytevector-ieee-single-set! . jk2f7c) (bytevector-ieee-single-native-set! . jk2f7b) (bytevector-ieee-single-native-ref . jk2f7a) (bytevector-ieee-double-set! . jk2f79) (bytevector-ieee-double-ref . jk2f78) (bytevector-ieee-double-native-set! . jk2f77) (bytevector-ieee-double-native-ref . jk2f76) (bytevector-fill! . jk2f75) (bytevector-copy! . jk2f74) (bytevector-copy . jk2f73) (bytevector->uint-list . jk2f72) (bytevector->u8-list . jk2f71) (bytevector->sint-list . jk2f70) (endianness . jk2e28)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313e '(rnrs unicode) '(6) '() '() '() '((string-upcase . jk307c) (string-titlecase . jk307b) (string-normalize-nfkd . jk307a) (string-normalize-nfkc . jk3079) (string-normalize-nfd . jk3078) (string-normalize-nfc . jk3077) (string-foldcase . jk3076) (string-downcase . jk3075) (string-ci>? . jk3074) (string-ci>=? . jk3073) (string-ci=? . jk3072) (string-ci<? . jk3071) (string-ci<=? . jk3070) (char-whitespace? . jk306f) (char-upper-case? . jk306e) (char-title-case? . jk306d) (char-numeric? . jk306c) (char-lower-case? . jk306b) (char-general-category . jk306a) (char-upcase . jk3069) (char-titlecase . jk3068) (char-foldcase . jk3067) (char-downcase . jk3066) (char-ci>? . jk3065) (char-ci>=? . jk3064) (char-ci=? . jk3063) (char-ci<? . jk3062) (char-ci<=? . jk3061) (char-alphabetic? . jk3060)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk313f '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . jk2fbf) (raise-continuable . jk2fbe) (raise . jk2fbd) (guard . jk2e34) (else . jk2e2c) (=> . jk2e2b)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3140 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . jk2f14) (bitwise-reverse-bit-field . jk2f13) (bitwise-length . jk2f12) (bitwise-if . jk2f11) (bitwise-first-bit-set . jk2f10) (bitwise-copy-bit-field . jk2f0f) (bitwise-copy-bit . jk2f0e) (bitwise-bit-set? . jk2f0d) (bitwise-bit-field . jk2f0c) (bitwise-bit-count . jk2f0b) (bitwise-xor . jk2f0a) (bitwise-ior . jk2f09) (bitwise-and . jk2f08) (bitwise-not . jk2f07) (bitwise-arithmetic-shift-right . jk2f06) (bitwise-arithmetic-shift-left . jk2f05) (bitwise-arithmetic-shift . jk2f04)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3141 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . jk2f41) (fxxor . jk2f40) (fxrotate-bit-field . jk2f3f) (fxreverse-bit-field . jk2f3e) (fxpositive? . jk2f3d) (fxodd? . jk2f3c) (fxnot . jk2f3b) (fxnegative? . jk2f3a) (fxmod0 . jk2f39) (fxmod . jk2f38) (fxmin . jk2f37) (fxmax . jk2f36) (fxlength . jk2f35) (fxior . jk2f34) (fxif . jk2f33) (fxfirst-bit-set . jk2f32) (fxeven? . jk2f31) (fxdiv0-and-mod0 . jk2f30) (fxdiv0 . jk2f2f) (fxdiv-and-mod . jk2f2e) (fxdiv . jk2f2d) (fxcopy-bit-field . jk2f2c) (fxcopy-bit . jk2f2b) (fxbit-set? . jk2f2a) (fxbit-field . jk2f29) (fxbit-count . jk2f28) (fxarithmetic-shift-right . jk2f27) (fxarithmetic-shift-left . jk2f26) (fxarithmetic-shift . jk2f25) (fxand . jk2f24) (fx>? . jk2f23) (fx>=? . jk2f22) (fx=? . jk2f21) (fx<? . jk2f20) (fx<=? . jk2f1f) (fx-/carry . jk2f1e) (fx- . jk2f1d) (fx+/carry . jk2f1c) (fx+ . jk2f1b) (fx*/carry . jk2f1a) (fx* . jk2f19) (greatest-fixnum . jk2f18) (least-fixnum . jk2f17) (fixnum-width . jk2f16) (fixnum? . jk2f15)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3142 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . jk2b88) (no-infinities-violation? . jk2b73) (make-no-nans-violation . jk2b86) (make-no-infinities-violation . jk2b71) (real->flonum . jk2f6f) (flzero? . jk2f6e) (fltruncate . jk2f6d) (fltan . jk2f6c) (flsqrt . jk2f6b) (flsin . jk2f6a) (flround . jk2f69) (flpositive? . jk2f68) (flonum? . jk2f67) (flodd? . jk2f66) (flnumerator . jk2f65) (flnegative? . jk2f64) (flnan? . jk2f63) (flmod0 . jk2f62) (flmod . jk2f61) (flmin . jk2f60) (flmax . jk2f5f) (fllog . jk2f5e) (flinteger? . jk2f5d) (flinfinite? . jk2f5c) (flfloor . jk2f5b) (flfinite? . jk2f5a) (flexpt . jk2f59) (flexp . jk2f58) (fleven? . jk2f57) (fldiv0-and-mod0 . jk2f56) (fldiv0 . jk2f55) (fldiv-and-mod . jk2f54) (fldiv . jk2f53) (fldenominator . jk2f52) (flcos . jk2f51) (flceiling . jk2f50) (flatan . jk2f4f) (flasin . jk2f4e) (flacos . jk2f4d) (flabs . jk2f4c) (fl>? . jk2f4b) (fl>=? . jk2f4a) (fl=? . jk2f49) (fl<? . jk2f48) (fl<=? . jk2f47) (fl/ . jk2f46) (fl- . jk2f45) (fl+ . jk2f44) (fl* . jk2f43) (fixnum->flonum . jk2f42) (&no-nans . jk2e60) (&no-infinities . jk2e5f)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3143 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . jk3049) (string-ci-hash . jk3048) (string-hash . jk3047) (equal-hash . jk3046) (hashtable-equivalence-function . jk3045) (make-hashtable . jk3044) (hashtable-hash-function . jk3043) (make-eqv-hashtable . jk3042) (make-eq-hashtable . jk3041) (hashtable? . jk3040) (hashtable-update! . jk303f) (hashtable-size . jk303e) (hashtable-set! . jk303d) (hashtable-ref . jk303c) (hashtable-mutable? . jk303b) (hashtable-keys . jk303a) (hashtable-entries . jk3039) (hashtable-delete! . jk3038) (hashtable-copy . jk3037) (hashtable-contains? . jk3036) (hashtable-clear! . jk3035)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3144 '(rnrs io ports) '(6) '() '() '() '((eof-object? . jk3025) (eof-object . jk3024) (current-error-port . jk3023) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (utf-8-codec . jk301e) (utf-16-codec . jk301d) (transcoder-error-handling-mode . jk301c) (transcoder-eol-style . jk301b) (transcoder-codec . jk301a) (transcoded-port . jk3019) (textual-port? . jk3018) (string->bytevector . jk3017) (standard-output-port . jk3016) (standard-input-port . jk3015) (standard-error-port . jk3014) (set-port-position! . jk3013) (put-u8 . jk3012) (put-string . jk3011) (put-datum . jk3010) (put-char . jk300f) (put-bytevector . jk300e) (port? . jk300d) (port-transcoder . jk300c) (port-position . jk300b) (port-has-set-port-position!? . jk300a) (port-has-port-position? . jk3009) (port-eof? . jk3008) (output-port-buffer-mode . jk3007) (open-string-output-port . jk3006) (open-string-input-port . jk3005) (open-file-output-port . jk3004) (open-file-input/output-port . jk3003) (open-file-input-port . jk3002) (open-bytevector-output-port . jk3001) (open-bytevector-input-port . jk3000) (native-transcoder . jk2fff) (native-eol-style . jk2ffe) (make-transcoder . jk2ffd) (latin-1-codec . jk2ffc) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (make-i/o-encoding-error . jk2b58) (make-i/o-decoding-error . jk2b41) (make-custom-textual-output-port . jk2ffb) (make-custom-textual-input/output-port . jk2ffa) (make-custom-textual-input-port . jk2ff9) (make-custom-binary-output-port . jk2ff8) (make-custom-binary-input/output-port . jk2ff7) (make-custom-binary-input-port . jk2ff6) (lookahead-u8 . jk2ff4) (lookahead-char . jk2ff3) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (i/o-encoding-error? . jk2b5c) (i/o-encoding-error-char . jk2b5e) (i/o-decoding-error? . jk2b43) (get-u8 . jk2ff2) (get-string-n! . jk2ff1) (get-string-n . jk2ff0) (get-string-all . jk2fef) (get-line . jk2fee) (get-datum . jk2fed) (get-char . jk2fec) (get-bytevector-some . jk2feb) (get-bytevector-n! . jk2fea) (get-bytevector-n . jk2fe9) (get-bytevector-all . jk2fe8) (flush-output-port . jk2fe7) (close-port . jk2fe6) (call-with-string-output-port . jk2fc5) (call-with-port . jk2fc4) (call-with-bytevector-output-port . jk2fc3) (bytevector->string . jk2fc2) (buffer-mode? . jk2fc1) (binary-port? . jk2fc0) (&i/o-encoding . jk2e5e) (&i/o-decoding . jk2e5d) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53) (error-handling-mode . jk2e38) (file-options . jk2e37) (buffer-mode . jk2e36) (eol-style . jk2e35)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3145 '(rnrs enums) '(6) '() '() '() '((make-enumeration . jk2fbc) (enum-set=? . jk2fbb) (enum-set-universe . jk2fba) (enum-set-union . jk2fb9) (enum-set-subset? . jk2fb8) (enum-set-projection . jk2fb7) (enum-set-member? . jk2fb6) (enum-set-intersection . jk2fb5) (enum-set-indexer . jk2fb4) (enum-set-difference . jk2fb3) (enum-set-constructor . jk2fb2) (enum-set-complement . jk2fb1) (enum-set->list . jk2fb0) (define-enumeration . jk2e43)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3146 '(rnrs conditions) '(6) '() '() '() '((who-condition? . jk29d3) (warning? . jk294b) (violation? . jk298a) (undefined-violation? . jk2a4a) (syntax-violation? . jk2a31) (syntax-violation-subform . jk2a35) (syntax-violation-form . jk2a33) (syntax-violation . jke5d) (simple-conditions . jk2faf) (serious-condition? . jk2960) (non-continuable-violation? . jk29ea) (message-condition? . jk2934) (make-who-condition . jk29cf) (make-warning . jk2949) (make-violation . jk2988) (make-undefined-violation . jk2a48) (make-syntax-violation . jk2a2b) (make-serious-condition . jk295e) (make-non-continuable-violation . jk29e8) (make-message-condition . jk2930) (make-lexical-violation . jk2a12) (make-irritants-condition . jk29b4) (make-implementation-restriction-violation . jk29fd) (make-error . jk2973) (make-assertion-violation . jk299d) (lexical-violation? . jk2a14) (irritants-condition? . jk29b8) (implementation-restriction-violation? . jk29ff) (error? . jk2975) (condition-who . jk29d5) (condition-predicate . jk2fae) (condition-message . jk2936) (condition-irritants . jk29ba) (condition-accessor . jk2fad) (condition . jk2fac) (assertion-violation? . jk299f) (condition? . jk2fab) (&undefined . jk2e52) (&syntax . jk2e51) (&lexical . jk2e50) (&implementation-restriction . jk2e4f) (&non-continuable . jk2e4e) (&who . jk2e4d) (&irritants . jk2e4c) (&assertion . jk2e4b) (&violation . jk2e4a) (&error . jk2e49) (&serious . jk2e48) (&warning . jk2e47) (&message . jk2e46) (&condition . jk2e45) (define-condition-type . jk2e44)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3147 '(rnrs records inspection) '(6) '() '() '() '((record? . jk3058) (record-type-uid . jk3057) (record-type-sealed? . jk3056) (record-type-parent . jk3055) (record-type-opaque? . jk3054) (record-type-name . jk3053) (record-type-generative? . jk3052) (record-type-field-names . jk3051) (record-rtd . jk3050) (record-field-mutable? . jk304f)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3148 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . jk305f) (record-predicate . jk305e) (record-mutator . jk305d) (record-constructor . jk305c) (record-accessor . jk305b) (make-record-type-descriptor . jk305a) (make-record-constructor-descriptor . jk3059)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk3149 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . jk2e42) (parent-rtd . jk2e41) (nongenerative . jk2e40) (opaque . jk2e3f) (sealed . jk2e3e) (protocol . jk2e3d) (parent . jk2e3c) (immutable . jk2e3b) (mutable . jk2e3a) (fields . jk2e39) (record-constructor-descriptor . jk2e19) (record-type-descriptor . jk2e18)) '() values values '#f '#f '#t '#f) (jk98b@jk7d7@install-library 'jk314a '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . jk2b8c) (&no-nans-rtd . jk2b8a) (&no-infinities-rcd . jk2b77) (&no-infinities-rtd . jk2b75) (&i/o-encoding-rcd . jk2b62) (&i/o-encoding-rtd . jk2b60) (&i/o-decoding-rcd . jk2b47) (&i/o-decoding-rtd . jk2b45) (&i/o-port-rcd . jk2b32) (&i/o-port-rtd . jk2b30) (&i/o-file-does-not-exist-rcd . jk2b17) (&i/o-file-does-not-exist-rtd . jk2b15) (&i/o-file-already-exists-rcd . jk2b02) (&i/o-file-already-exists-rtd . jk2b00) (&i/o-file-is-read-only-rcd . jk2aed) (&i/o-file-is-read-only-rtd . jk2aeb) (&i/o-file-protection-rcd . jk2ad8) (&i/o-file-protection-rtd . jk2ad6) (&i/o-filename-rcd . jk2ac3) (&i/o-filename-rtd . jk2ac1) (&i/o-invalid-position-rcd . jk2aa8) (&i/o-invalid-position-rtd . jk2aa6) (&i/o-write-rcd . jk2a8d) (&i/o-write-rtd . jk2a8b) (&i/o-read-rcd . jk2a78) (&i/o-read-rtd . jk2a76) (&i/o-rcd . jk2a63) (&i/o-rtd . jk2a61) (&undefined-rcd . jk2a4e) (&undefined-rtd . jk2a4c) (&syntax-rcd . jk2a39) (&syntax-rtd . jk2a37) (&lexical-rcd . jk2a18) (&lexical-rtd . jk2a16) (&implementation-restriction-rcd . jk2a03) (&implementation-restriction-rtd . jk2a01) (&non-continuable-rcd . jk29ee) (&non-continuable-rtd . jk29ec) (&who-rcd . jk29d9) (&who-rtd . jk29d7) (&irritants-rcd . jk29be) (&irritants-rtd . jk29bc) (&assertion-rcd . jk29a3) (&assertion-rtd . jk29a1) (&violation-rcd . jk298e) (&violation-rtd . jk298c) (&error-rcd . jk2979) (&error-rtd . jk2977) (&serious-rcd . jk2964) (&serious-rtd . jk2962) (&warning-rcd . jk294f) (&warning-rtd . jk294d) (&message-rcd . jk293a) (&message-rtd . jk2938) (&condition-rcd . jk28db) (&condition-rtd . jk28d9) (syntax-error . jke59) (syntax-dispatch . jkd7d) (pretty-print . jk312a) (eval-core . jk3129) (set-symbol-value! . jk3128) (symbol-value . jk3127) (gensym . jk3126) (void . jk3125) (load . jk2c9d) (interaction-environment . jke6b) (char-ready? . jk3124) (regexp? . jk3123) (read-line . jk3122) (gensym-prefix-set! . jk3121) (ungensym . jk3120) (alist->eq-hash-table . jk311f) (assoc-ref . jk311e) (print . jk311d) (format . jk311c) (host-os . jk311b) (library-path . jk7b6) (standard-library-path . jk311a) (file-newer? . jk3119) (stat-mtime . jk3118) (write-to-file . jk3117) (file->list . jk3116) (file->string . jk3115) (digit->integer . jk3114) (call-with-string-input-port . jk3113) (call-with-string-io . jk3112) (string-split . jk3111) (bytevector-for-each . jk3110) (string->regexp . jk310f) (rxmatch . jk310e) (regexp-replace-all . jk310d) (hashtable-for-each . jk310c) (mosh-cache-dir . jk5a1) (call-process . jk310b) (local-tz-offset . jk310a) (microseconds . jk3109) (directory-list . jk3108) (set-current-directory! . jk3107) (expand-path . jk3106) (current-directory . jk3105) (%spawn . jk3104) (%waitpid . jk3103) (simple-struct-name . jk3102) (simple-struct-set! . jk3101) (simple-struct-ref . jk3100) (make-simple-struct . jk30ff) (simple-struct? . jk30fe) (pointer-ref-c-int64 . jk30fd) (pointer-ref-c-int32 . jk30fc) (pointer-ref-c-int16 . jk30fb) (pointer-ref-c-int8 . jk30fa) (pointer-ref-c-uint64 . jk30f9) (pointer-ref-c-uint32 . jk30f8) (pointer-ref-c-uint16 . jk30f7) (pointer-ref-c-uint8 . jk30f6) (pointer-set-c-uint64! . jk30f5) (pointer-set-c-uint32! . jk30f4) (pointer-set-c-uint16! . jk30f3) (pointer-set-c-uint8! . jk30f2) (pointer-set-c-int64! . jk30f1) (pointer-set-c-int32! . jk30f0) (pointer-set-c-int16! . jk30ef) (pointer-set-c-int8! . jk30ee) (pointer-set-c-pointer! . jk30ed) (pointer-set-c-double! . jk30ec) (pointer-set-c-float! . jk30eb) (pointer-set-c-long-long! . jk30ea) (pointer-set-c-long! . jk30e9) (pointer-set-c-int! . jk30e8) (pointer-set-c-short! . jk30e7) (pointer-set-c-char! . jk30e6) (pointer-ref-c-pointer . jk30e5) (pointer-ref-c-double . jk30e4) (pointer-ref-c-float . jk30e3) (pointer-ref-c-unsigned-long-long . jk30e2) (pointer-ref-c-signed-long-long . jk30e1) (pointer-ref-c-unsigned-long . jk30e0) (pointer-ref-c-signed-long . jk30df) (pointer-ref-c-unsigned-int . jk30de) (pointer-ref-c-signed-int . jk30dd) (pointer-ref-c-unsigned-short . jk30dc) (pointer-ref-c-signed-short . jk30db) (pointer-ref-c-unsigned-char . jk30da) (pointer-ref-c-signed-char . jk30d9) (pointer->integer . jk30d8) (integer->pointer . jk30d7) (pointer? . jk30d6) (shared-errno . jk30d5) (get-c-address . jk30d4) (u8-list->c-procedure . jk30d3) (%ffi-free-c-callback-trampoline . jk30d2) (%ffi-make-c-callback-trampoline . jk30d1) (%ffi-free . jk30d0) (%ffi-malloc . jk30cf) (%ffi-supported? . jk30ce) (%ffi-pointer->string . jk30cd) (%ffi-call->string-or-zero . jk30cc) (%ffi-call->double . jk30cb) (%ffi-call->void* . jk30ca) (%ffi-call->void . jk30c9) (%ffi-call->char . jk30c8) (%ffi-call->int . jk30c7) (%ffi-lookup . jk30c6) (%ffi-open . jk30c5) (%fork . jk30c4) (%pipe . jk30c3) (p . jk30c2) (open-output-string . jk30c1) (get-output-string . jk30c0) (file-stat-ctime . jk30bf) (file-stat-atime . jk30be) (file-stat-mtime . jk30bd) (file-size-in-bytes . jk30bc) (file-writable? . jk30bb) (file-executable? . jk30ba) (file-readable? . jk30b9) (file-regular? . jk30b8) (file-symbolic-link? . jk30b7) (file-directory? . jk30b6) (create-symbolic-link . jk30b5) (rename-file . jk30b4) (delete-directory . jk30b3) (create-directory . jk30b2) (create-mosh-cache-dir . jk30b1) (get-environment-variables . jk30b0) (current-exception-handler . jk30af) (get-environment-variable . jk30ae) (join-wraps . jk30ad) (id->real-label . jk30ac) (same-marks? . jk30ab) (same-marks*? . jk30aa) (get-timeofday . jk30a9) (get-command-line . jk30a8) (sys-display . jk30a7) (whereis . jk30a6) (register . jk30a5) (vm-join! . jk30a4) (vm-set-value! . jk30a3) (vm? . jk30a2) (main-vm? . jk30a1) (vm-eval . jk30a0) (vm-self . jk309f) (vm-start! . jk309e) (make-vm . jk309d) (mutex-try-lock! . jk309c) (mutex-unlock! . jk309b) (mutex-lock! . jk309a) (mutex? . jk3099) (make-mutex . jk3098) (condition-variable-notify-all! . jk3097) (condition-variable-notify! . jk3096) (condition-variable-wait! . jk3095) (make-condition-variable . jk3094) (mosh-executable-path . jk3093) (make-file-options . jk3092) (source-info . jk3091) (make-compiler-instruction . jk3090) (make-instruction . jk308f) (set-source-info! . jk308e) (bignum? . jk308d) (fast-equal? . jk308c) (fasl-read . jk308b) (fasl-write . jk308a) (time-usage . jk3089) (os-constant . jk3088) (disasm . jk3087) (make-parameter . jk59f) (socket-port . jk3086) (socket-shutdown . jk3085) (socket-close . jk3084) (socket-send . jk3083) (socket-recv! . jk3082) (socket-recv . jk3081) (make-server-socket . jk3080) (make-client-socket . jk307f) (socket-accept . jk307e) (socket? . jk307d) (string-upcase . jk307c) (string-titlecase . jk307b) (string-normalize-nfkd . jk307a) (string-normalize-nfkc . jk3079) (string-normalize-nfd . jk3078) (string-normalize-nfc . jk3077) (string-foldcase . jk3076) (string-downcase . jk3075) (string-ci>? . jk3074) (string-ci>=? . jk3073) (string-ci=? . jk3072) (string-ci<? . jk3071) (string-ci<=? . jk3070) (char-whitespace? . jk306f) (char-upper-case? . jk306e) (char-title-case? . jk306d) (char-numeric? . jk306c) (char-lower-case? . jk306b) (char-general-category . jk306a) (char-upcase . jk3069) (char-titlecase . jk3068) (char-foldcase . jk3067) (char-downcase . jk3066) (char-ci>? . jk3065) (char-ci>=? . jk3064) (char-ci=? . jk3063) (char-ci<? . jk3062) (char-ci<=? . jk3061) (char-alphabetic? . jk3060) (make-variable-transformer . jkba8) (identifier? . jke5f) (generate-temporaries . jke4b) (free-identifier=? . jke4d) (syntax->datum . jke63) (datum->syntax . jke61) (bound-identifier=? . jke4f) (record-type-descriptor? . jk305f) (record-predicate . jk305e) (record-mutator . jk305d) (record-constructor . jk305c) (record-accessor . jk305b) (make-record-type-descriptor . jk305a) (make-record-constructor-descriptor . jk3059) (record? . jk3058) (record-type-uid . jk3057) (record-type-sealed? . jk3056) (record-type-parent . jk3055) (record-type-opaque? . jk3054) (record-type-name . jk3053) (record-type-generative? . jk3052) (record-type-field-names . jk3051) (record-rtd . jk3050) (record-field-mutable? . jk304f) (delete-file . jk304e) (file-exists? . jk304d) (vector-sort! . jk304c) (vector-sort . jk304b) (list-sort . jk304a) (symbol-hash . jk3049) (string-ci-hash . jk3048) (string-hash . jk3047) (equal-hash . jk3046) (hashtable-equivalence-function . jk3045) (make-hashtable . jk3044) (hashtable-hash-function . jk3043) (make-eqv-hashtable . jk3042) (make-eq-hashtable . jk3041) (hashtable? . jk3040) (hashtable-update! . jk303f) (hashtable-size . jk303e) (hashtable-set! . jk303d) (hashtable-ref . jk303c) (hashtable-mutable? . jk303b) (hashtable-keys . jk303a) (hashtable-entries . jk3039) (hashtable-delete! . jk3038) (hashtable-copy . jk3037) (hashtable-contains? . jk3036) (hashtable-clear! . jk3035) (call-with-output-file . jk3034) (call-with-input-file . jk3033) (write-char . jk3032) (write . jk3031) (with-output-to-file . jk3030) (with-input-from-file . jk302f) (read-char . jk302e) (read . jk302d) (peek-char . jk302c) (open-output-file . jk302b) (open-input-file . jk302a) (newline . jk3029) (display . jk3028) (close-output-port . jk3027) (close-input-port . jk3026) (eof-object? . jk3025) (eof-object . jk3024) (current-error-port . jk3023) (current-output-port . jk3022) (current-input-port . jk3021) (output-port? . jk3020) (input-port? . jk301f) (utf-8-codec . jk301e) (utf-16-codec . jk301d) (transcoder-error-handling-mode . jk301c) (transcoder-eol-style . jk301b) (transcoder-codec . jk301a) (transcoded-port . jk3019) (textual-port? . jk3018) (string->bytevector . jk3017) (standard-output-port . jk3016) (standard-input-port . jk3015) (standard-error-port . jk3014) (set-port-position! . jk3013) (put-u8 . jk3012) (put-string . jk3011) (put-datum . jk3010) (put-char . jk300f) (put-bytevector . jk300e) (port? . jk300d) (port-transcoder . jk300c) (port-position . jk300b) (port-has-set-port-position!? . jk300a) (port-has-port-position? . jk3009) (port-eof? . jk3008) (output-port-buffer-mode . jk3007) (open-string-output-port . jk3006) (open-string-input-port . jk3005) (open-file-output-port . jk3004) (open-file-input/output-port . jk3003) (open-file-input-port . jk3002) (open-bytevector-output-port . jk3001) (open-bytevector-input-port . jk3000) (native-transcoder . jk2fff) (native-eol-style . jk2ffe) (make-transcoder . jk2ffd) (latin-1-codec . jk2ffc) (make-i/o-write-error . jk2a87) (make-i/o-read-error . jk2a72) (make-i/o-port-error . jk2b28) (make-i/o-invalid-position-error . jk2a9e) (make-i/o-filename-error . jk2ab9) (make-i/o-file-protection-error . jk2ad2) (make-i/o-file-is-read-only-error . jk2ae7) (make-i/o-file-does-not-exist-error . jk2b11) (make-i/o-file-already-exists-error . jk2afc) (make-i/o-error . jk2a5d) (make-i/o-encoding-error . jk2b58) (make-i/o-decoding-error . jk2b41) (make-custom-textual-output-port . jk2ffb) (make-custom-textual-input/output-port . jk2ffa) (make-custom-textual-input-port . jk2ff9) (make-custom-binary-output-port . jk2ff8) (make-custom-binary-input/output-port . jk2ff7) (make-custom-binary-input-port . jk2ff6) (make-bytevector . jk2ff5) (lookahead-u8 . jk2ff4) (lookahead-char . jk2ff3) (i/o-write-error? . jk2a89) (i/o-read-error? . jk2a74) (i/o-port-error? . jk2b2c) (i/o-invalid-position-error? . jk2aa2) (i/o-filename-error? . jk2abd) (i/o-file-protection-error? . jk2ad4) (i/o-file-is-read-only-error? . jk2ae9) (i/o-file-does-not-exist-error? . jk2b13) (i/o-file-already-exists-error? . jk2afe) (i/o-error? . jk2a5f) (i/o-error-position . jk2aa4) (i/o-error-port . jk2b2e) (i/o-error-filename . jk2abf) (i/o-encoding-error? . jk2b5c) (i/o-encoding-error-char . jk2b5e) (i/o-decoding-error? . jk2b43) (get-u8 . jk2ff2) (get-string-n! . jk2ff1) (get-string-n . jk2ff0) (get-string-all . jk2fef) (get-line . jk2fee) (get-datum . jk2fed) (get-char . jk2fec) (get-bytevector-some . jk2feb) (get-bytevector-n! . jk2fea) (get-bytevector-n . jk2fe9) (get-bytevector-all . jk2fe8) (flush-output-port . jk2fe7) (close-port . jk2fe6) (scheme-report-environment . jke39) (quotient . jk2fe5) (null-environment . jke37) (remainder . jk2fe4) (modulo . jk2fe3) (inexact->exact . jk2fe2) (force . jk2fe1) (exact->inexact . jk2fe0) (make-promise . jk2fdf) (exit . jk2fde) (command-line . jk2c97) (string-fill! . jk2fdd) (string-set! . jk2fdc) (set-cdr! . jk2fdb) (set-car! . jk2fda) (remove . jk2fd9) (remv . jk2fd8) (remp . jk2fd7) (remq . jk2fd6) (partition . jk2fd5) (memv . jk2fd4) (memq . jk2fd3) (memp . jk2fd2) (member . jk2fd1) (exists . jk2fd0) (for-all . jk2fcf) (fold-right . jk2fce) (fold-left . jk2fcd) (find . jk2fcc) (filter . jk2fcb) (cons* . jk2fca) (assv . jk2fc9) (assq . jk2fc8) (assp . jk2fc7) (assoc . jk2fc6) (call-with-string-output-port . jk2fc5) (call-with-port . jk2fc4) (call-with-bytevector-output-port . jk2fc3) (bytevector->string . jk2fc2) (buffer-mode? . jk2fc1) (binary-port? . jk2fc0) (with-exception-handler . jk2fbf) (raise-continuable . jk2fbe) (raise . jk2fbd) (eval . jke3d) (environment . jke35) (make-enumeration . jk2fbc) (enum-set=? . jk2fbb) (enum-set-universe . jk2fba) (enum-set-union . jk2fb9) (enum-set-subset? . jk2fb8) (enum-set-projection . jk2fb7) (enum-set-member? . jk2fb6) (enum-set-intersection . jk2fb5) (enum-set-indexer . jk2fb4) (enum-set-difference . jk2fb3) (enum-set-constructor . jk2fb2) (enum-set-complement . jk2fb1) (enum-set->list . jk2fb0) (who-condition? . jk29d3) (warning? . jk294b) (violation? . jk298a) (undefined-violation? . jk2a4a) (syntax-violation? . jk2a31) (syntax-violation-subform . jk2a35) (syntax-violation-form . jk2a33) (syntax-violation . jke5d) (simple-conditions . jk2faf) (serious-condition? . jk2960) (non-continuable-violation? . jk29ea) (message-condition? . jk2934) (make-who-condition . jk29cf) (make-warning . jk2949) (make-violation . jk2988) (make-undefined-violation . jk2a48) (make-syntax-violation . jk2a2b) (make-serious-condition . jk295e) (make-non-continuable-violation . jk29e8) (make-message-condition . jk2930) (make-lexical-violation . jk2a12) (make-irritants-condition . jk29b4) (make-implementation-restriction-violation . jk29fd) (make-error . jk2973) (make-assertion-violation . jk299d) (lexical-violation? . jk2a14) (irritants-condition? . jk29b8) (implementation-restriction-violation? . jk29ff) (error? . jk2975) (condition-who . jk29d5) (condition-predicate . jk2fae) (condition-message . jk2936) (condition-irritants . jk29ba) (condition-accessor . jk2fad) (condition . jk2fac) (assertion-violation? . jk299f) (condition? . jk2fab) (utf32->string . jk2faa) (utf16->string . jk2fa9) (utf8->string . jk2fa8) (uint-list->bytevector . jk2fa7) (u8-list->bytevector . jk2fa6) (string->utf8 . jk2fa5) (string->utf32 . jk2fa4) (string->utf16 . jk2fa3) (sint-list->bytevector . jk2fa2) (native-endianness . jk2fa1) (bytevector? . jk2fa0) (bytevector=? . jk2f9f) (bytevector-uint-set! . jk2f9e) (bytevector-uint-ref . jk2f9d) (bytevector-u8-set! . jk2f9c) (bytevector-u8-ref . jk2f9b) (bytevector-u64-set! . jk2f9a) (bytevector-u64-ref . jk2f99) (bytevector-u64-native-set! . jk2f98) (bytevector-u64-native-ref . jk2f97) (bytevector-u32-set! . jk2f96) (bytevector-u32-ref . jk2f95) (bytevector-u32-native-set! . jk2f94) (bytevector-u32-native-ref . jk2f93) (bytevector-u16-set! . jk2f92) (bytevector-u16-ref . jk2f91) (bytevector-u16-native-set! . jk2f90) (bytevector-u16-native-ref . jk2f8f) (bytevector-sint-set! . jk2f8e) (bytevector-sint-ref . jk2f8d) (bytevector-s8-set! . jk2f8c) (bytevector-s8-ref . jk2f8b) (bytevector-s64-set! . jk2f8a) (bytevector-s64-ref . jk2f89) (bytevector-s64-native-set! . jk2f88) (bytevector-s64-native-ref . jk2f87) (bytevector-s32-set! . jk2f86) (bytevector-s32-ref . jk2f85) (bytevector-s32-native-set! . jk2f84) (bytevector-s32-native-ref . jk2f83) (bytevector-s16-set! . jk2f82) (bytevector-s16-ref . jk2f81) (bytevector-s16-native-set! . jk2f80) (bytevector-s16-native-ref . jk2f7f) (bytevector-length . jk2f7e) (bytevector-ieee-single-ref . jk2f7d) (bytevector-ieee-single-set! . jk2f7c) (bytevector-ieee-single-native-set! . jk2f7b) (bytevector-ieee-single-native-ref . jk2f7a) (bytevector-ieee-double-set! . jk2f79) (bytevector-ieee-double-ref . jk2f78) (bytevector-ieee-double-native-set! . jk2f77) (bytevector-ieee-double-native-ref . jk2f76) (bytevector-fill! . jk2f75) (bytevector-copy! . jk2f74) (bytevector-copy . jk2f73) (bytevector->uint-list . jk2f72) (bytevector->u8-list . jk2f71) (bytevector->sint-list . jk2f70) (no-nans-violation? . jk2b88) (no-infinities-violation? . jk2b73) (make-no-nans-violation . jk2b86) (make-no-infinities-violation . jk2b71) (real->flonum . jk2f6f) (flzero? . jk2f6e) (fltruncate . jk2f6d) (fltan . jk2f6c) (flsqrt . jk2f6b) (flsin . jk2f6a) (flround . jk2f69) (flpositive? . jk2f68) (flonum? . jk2f67) (flodd? . jk2f66) (flnumerator . jk2f65) (flnegative? . jk2f64) (flnan? . jk2f63) (flmod0 . jk2f62) (flmod . jk2f61) (flmin . jk2f60) (flmax . jk2f5f) (fllog . jk2f5e) (flinteger? . jk2f5d) (flinfinite? . jk2f5c) (flfloor . jk2f5b) (flfinite? . jk2f5a) (flexpt . jk2f59) (flexp . jk2f58) (fleven? . jk2f57) (fldiv0-and-mod0 . jk2f56) (fldiv0 . jk2f55) (fldiv-and-mod . jk2f54) (fldiv . jk2f53) (fldenominator . jk2f52) (flcos . jk2f51) (flceiling . jk2f50) (flatan . jk2f4f) (flasin . jk2f4e) (flacos . jk2f4d) (flabs . jk2f4c) (fl>? . jk2f4b) (fl>=? . jk2f4a) (fl=? . jk2f49) (fl<? . jk2f48) (fl<=? . jk2f47) (fl/ . jk2f46) (fl- . jk2f45) (fl+ . jk2f44) (fl* . jk2f43) (fixnum->flonum . jk2f42) (fxzero? . jk2f41) (fxxor . jk2f40) (fxrotate-bit-field . jk2f3f) (fxreverse-bit-field . jk2f3e) (fxpositive? . jk2f3d) (fxodd? . jk2f3c) (fxnot . jk2f3b) (fxnegative? . jk2f3a) (fxmod0 . jk2f39) (fxmod . jk2f38) (fxmin . jk2f37) (fxmax . jk2f36) (fxlength . jk2f35) (fxior . jk2f34) (fxif . jk2f33) (fxfirst-bit-set . jk2f32) (fxeven? . jk2f31) (fxdiv0-and-mod0 . jk2f30) (fxdiv0 . jk2f2f) (fxdiv-and-mod . jk2f2e) (fxdiv . jk2f2d) (fxcopy-bit-field . jk2f2c) (fxcopy-bit . jk2f2b) (fxbit-set? . jk2f2a) (fxbit-field . jk2f29) (fxbit-count . jk2f28) (fxarithmetic-shift-right . jk2f27) (fxarithmetic-shift-left . jk2f26) (fxarithmetic-shift . jk2f25) (fxand . jk2f24) (fx>? . jk2f23) (fx>=? . jk2f22) (fx=? . jk2f21) (fx<? . jk2f20) (fx<=? . jk2f1f) (fx-/carry . jk2f1e) (fx- . jk2f1d) (fx+/carry . jk2f1c) (fx+ . jk2f1b) (fx*/carry . jk2f1a) (fx* . jk2f19) (greatest-fixnum . jk2f18) (least-fixnum . jk2f17) (fixnum-width . jk2f16) (fixnum? . jk2f15) (bitwise-rotate-bit-field . jk2f14) (bitwise-reverse-bit-field . jk2f13) (bitwise-length . jk2f12) (bitwise-if . jk2f11) (bitwise-first-bit-set . jk2f10) (bitwise-copy-bit-field . jk2f0f) (bitwise-copy-bit . jk2f0e) (bitwise-bit-set? . jk2f0d) (bitwise-bit-field . jk2f0c) (bitwise-bit-count . jk2f0b) (bitwise-xor . jk2f0a) (bitwise-ior . jk2f09) (bitwise-and . jk2f08) (bitwise-not . jk2f07) (bitwise-arithmetic-shift-right . jk2f06) (bitwise-arithmetic-shift-left . jk2f05) (bitwise-arithmetic-shift . jk2f04) (zero? . jk2f03) (vector? . jk2f02) (vector-set! . jk2f01) (vector-ref . jk2f00) (vector-map . jk2eff) (vector-length . jk2efe) (vector-for-each . jk2efd) (vector-fill! . jk2efc) (vector->list . jk2efb) (vector . jk2efa) (values . jk2ef9) (truncate . jk2ef8) (tan . jk2ef7) (symbol? . jk2ef6) (symbol=? . jk2ef5) (symbol->string . jk2ef4) (substring . jk2ef3) (string? . jk2ef2) (string>? . jk2ef1) (string>=? . jk2ef0) (string=? . jk2eef) (string<? . jk2eee) (string<=? . jk2eed) (string-ref . jk2eec) (string-length . jk2eeb) (string-for-each . jk2eea) (string-copy . jk2ee9) (string-append . jk2ee8) (string->symbol . jk2ee7) (string->number . jk2ee6) (string->list . jk2ee5) (string . jk2ee4) (sqrt . jk2ee3) (sin . jk2ee2) (round . jk2ee1) (reverse . jk2ee0) (real? . jk2edf) (real-valued? . jk2ede) (real-part . jk2edd) (rationalize . jk2edc) (rational? . jk2edb) (rational-valued? . jk2eda) (procedure? . jk2ed9) (positive? . jk2ed8) (pair? . jk2ed7) (odd? . jk2ed6) (numerator . jk2ed5) (number? . jk2ed4) (number->string . jk2ed3) (null? . jk2ed2) (not . jk2ed1) (negative? . jk2ed0) (nan? . jk2ecf) (min . jk2ece) (max . jk2ecd) (map . jk2ecc) (make-vector . jk2ecb) (make-string . jk2eca) (make-rectangular . jk2ec9) (make-polar . jk2ec8) (magnitude . jk2ec7) (log . jk2ec6) (list? . jk2ec5) (list-tail . jk2ec4) (list-ref . jk2ec3) (list->vector . jk2ec2) (list->string . jk2ec1) (list . jk2ec0) (length . jk2ebf) (lcm . jk2ebe) (integer? . jk2ebd) (integer-valued? . jk2ebc) (integer->char . jk2ebb) (infinite? . jk2eba) (inexact? . jk2eb9) (inexact . jk2eb8) (imag-part . jk2eb7) (gcd . jk2eb6) (for-each . jk2eb5) (floor . jk2eb4) (finite? . jk2eb3) (expt . jk2eb2) (exp . jk2eb1) (exact? . jk2eb0) (exact-integer-sqrt . jk2eaf) (exact . jk2eae) (even? . jk2ead) (error . jk2eac) (eqv? . jk2eab) (equal? . jk2eaa) (eq? . jk2ea9) (dynamic-wind . jk2ea8) (div0-and-mod0 . jk2ea7) (mod0 . jk2ea6) (div0 . jk2ea5) (div-and-mod . jk2ea4) (mod . jk2ea3) (div . jk2ea2) (denominator . jk2ea1) (cos . jk2ea0) (cons . jk2e9f) (complex? . jk2e9e) (char? . jk2e9d) (char>? . jk2e9c) (char>=? . jk2e9b) (char=? . jk2e9a) (char<? . jk2e99) (char<=? . jk2e98) (char->integer . jk2e97) (ceiling . jk2e96) (call-with-values . jk2e95) (call/cc . jk2e94) (call-with-current-continuation . jk2e93) (cddddr . jk2e92) (cdddar . jk2e91) (cddadr . jk2e90) (cddaar . jk2e8f) (cdaddr . jk2e8e) (cdadar . jk2e8d) (cdaadr . jk2e8c) (cdaaar . jk2e8b) (cadddr . jk2e8a) (caddar . jk2e89) (cadadr . jk2e88) (cadaar . jk2e87) (caaddr . jk2e86) (caadar . jk2e85) (caaadr . jk2e84) (caaaar . jk2e83) (cdddr . jk2e82) (cddar . jk2e81) (cdadr . jk2e80) (cdaar . jk2e7f) (caddr . jk2e7e) (cadar . jk2e7d) (caadr . jk2e7c) (caaar . jk2e7b) (cddr . jk2e7a) (cdar . jk2e79) (cadr . jk2e78) (caar . jk2e77) (cdr . jk2e76) (car . jk2e75) (boolean? . jk2e74) (boolean=? . jk2e73) (atan . jk2e72) (assertion-violation . jk2e71) (assertion-error . jke57) (asin . jk2e70) (apply . jk2e6f) (append . jk2e6e) (angle . jk2e6d) (acos . jk2e6c) (abs . jk2e6b) (/ . jk2e6a) (* . jk2e69) (- . jk2e68) (+ . jk2e67) (>= . jk2e66) (> . jk2e65) (= . jk2e64) (<= . jk2e63) (< . jk2e62) (library . jk2e61) (&no-nans . jk2e60) (&no-infinities . jk2e5f) (&i/o-encoding . jk2e5e) (&i/o-decoding . jk2e5d) (&i/o-port . jk2e5c) (&i/o-file-does-not-exist . jk2e5b) (&i/o-file-already-exists . jk2e5a) (&i/o-file-is-read-only . jk2e59) (&i/o-file-protection . jk2e58) (&i/o-filename . jk2e57) (&i/o-invalid-position . jk2e56) (&i/o-write . jk2e55) (&i/o-read . jk2e54) (&i/o . jk2e53) (&undefined . jk2e52) (&syntax . jk2e51) (&lexical . jk2e50) (&implementation-restriction . jk2e4f) (&non-continuable . jk2e4e) (&who . jk2e4d) (&irritants . jk2e4c) (&assertion . jk2e4b) (&violation . jk2e4a) (&error . jk2e49) (&serious . jk2e48) (&warning . jk2e47) (&message . jk2e46) (&condition . jk2e45) (define-condition-type . jk2e44) (define-enumeration . jk2e43) (define-record-type . jk2e42) (parent-rtd . jk2e41) (nongenerative . jk2e40) (opaque . jk2e3f) (sealed . jk2e3e) (protocol . jk2e3d) (parent . jk2e3c) (immutable . jk2e3b) (mutable . jk2e3a) (fields . jk2e39) (error-handling-mode . jk2e38) (file-options . jk2e37) (buffer-mode . jk2e36) (eol-style . jk2e35) (guard . jk2e34) (trace-define . jk2e33) (trace-lambda . jk2e32) (unsyntax-splicing . jk2e31) (unsyntax . jk2e30) (unquote-splicing . jk2e2f) (unquote . jk2e2e) (_ . jk2e2d) (else . jk2e2c) (=> . jk2e2b) (... . jk2e2a) (assert . jk2e29) (endianness . jk2e28) (delay . jk2e27) (time . jk2e26) (do . jk2e25) (cond . jk2e24) (let* . jk2e23) (let*-values . jk2e22) (let-values . jk2e21) (identifier-syntax . jk2e20) (with-syntax . jk2e1f) (quasisyntax . jk2e1e) (quasiquote . jk2e1d) (syntax-rules . jk2e1c) (include . jk2e1b) (define-struct . jk2e1a) (record-constructor-descriptor . jk2e19) (record-type-descriptor . jk2e18) (case . jk2e17) (parameterize . jk2e16) (unless . jk2e15) (when . jk2e14) (or . jk2e13) (and . jk2e12) (if . jk2e11) (let . jk2e10) (letrec* . jk2e0f) (letrec . jk2e0e) (type-descriptor . jk2e0d) (case-lambda . jk2e0c) (lambda . jk2e0b) (syntax . jk2e0a) (syntax-case . jk2e09) (quote . jk2e08) (foreign-call . jk2e07) (letrec-syntax . jk2e06) (let-syntax . jk2e05) (set! . jk2e04) (import . jk2e03) (begin . jk2e02) (module . jk2e01) (define-syntax . jk2e00) (define . jk2dff)) '((jk2b8c core-prim . &no-nans-rcd) (jk2b8a core-prim . &no-nans-rtd) (jk2b77 core-prim . &no-infinities-rcd) (jk2b75 core-prim . &no-infinities-rtd) (jk2b62 core-prim . &i/o-encoding-rcd) (jk2b60 core-prim . &i/o-encoding-rtd) (jk2b47 core-prim . &i/o-decoding-rcd) (jk2b45 core-prim . &i/o-decoding-rtd) (jk2b32 core-prim . &i/o-port-rcd) (jk2b30 core-prim . &i/o-port-rtd) (jk2b17 core-prim . &i/o-file-does-not-exist-rcd) (jk2b15 core-prim . &i/o-file-does-not-exist-rtd) (jk2b02 core-prim . &i/o-file-already-exists-rcd) (jk2b00 core-prim . &i/o-file-already-exists-rtd) (jk2aed core-prim . &i/o-file-is-read-only-rcd) (jk2aeb core-prim . &i/o-file-is-read-only-rtd) (jk2ad8 core-prim . &i/o-file-protection-rcd) (jk2ad6 core-prim . &i/o-file-protection-rtd) (jk2ac3 core-prim . &i/o-filename-rcd) (jk2ac1 core-prim . &i/o-filename-rtd) (jk2aa8 core-prim . &i/o-invalid-position-rcd) (jk2aa6 core-prim . &i/o-invalid-position-rtd) (jk2a8d core-prim . &i/o-write-rcd) (jk2a8b core-prim . &i/o-write-rtd) (jk2a78 core-prim . &i/o-read-rcd) (jk2a76 core-prim . &i/o-read-rtd) (jk2a63 core-prim . &i/o-rcd) (jk2a61 core-prim . &i/o-rtd) (jk2a4e core-prim . &undefined-rcd) (jk2a4c core-prim . &undefined-rtd) (jk2a39 core-prim . &syntax-rcd) (jk2a37 core-prim . &syntax-rtd) (jk2a18 core-prim . &lexical-rcd) (jk2a16 core-prim . &lexical-rtd) (jk2a03 core-prim . &implementation-restriction-rcd) (jk2a01 core-prim . &implementation-restriction-rtd) (jk29ee core-prim . &non-continuable-rcd) (jk29ec core-prim . &non-continuable-rtd) (jk29d9 core-prim . &who-rcd) (jk29d7 core-prim . &who-rtd) (jk29be core-prim . &irritants-rcd) (jk29bc core-prim . &irritants-rtd) (jk29a3 core-prim . &assertion-rcd) (jk29a1 core-prim . &assertion-rtd) (jk298e core-prim . &violation-rcd) (jk298c core-prim . &violation-rtd) (jk2979 core-prim . &error-rcd) (jk2977 core-prim . &error-rtd) (jk2964 core-prim . &serious-rcd) (jk2962 core-prim . &serious-rtd) (jk294f core-prim . &warning-rcd) (jk294d core-prim . &warning-rtd) (jk293a core-prim . &message-rcd) (jk2938 core-prim . &message-rtd) (jk28db core-prim . &condition-rcd) (jk28d9 core-prim . &condition-rtd) (jke59 core-prim . syntax-error) (jkd7d core-prim . syntax-dispatch) (jk312a core-prim . pretty-print) (jk3129 core-prim . eval-core) (jk3128 core-prim . set-symbol-value!) (jk3127 core-prim . symbol-value) (jk3126 core-prim . gensym) (jk3125 core-prim . void) (jk2c9d core-prim . load) (jke6b core-prim . interaction-environment) (jk3124 core-prim . char-ready?) (jk3123 core-prim . regexp?) (jk3122 core-prim . read-line) (jk3121 core-prim . gensym-prefix-set!) (jk3120 core-prim . ungensym) (jk311f core-prim . alist->eq-hash-table) (jk311e core-prim . assoc-ref) (jk311d core-prim . print) (jk311c core-prim . format) (jk311b core-prim . host-os) (jk7b6 core-prim . library-path) (jk311a core-prim . standard-library-path) (jk3119 core-prim . file-newer?) (jk3118 core-prim . stat-mtime) (jk3117 core-prim . write-to-file) (jk3116 core-prim . file->list) (jk3115 core-prim . file->string) (jk3114 core-prim . digit->integer) (jk3113 core-prim . call-with-string-input-port) (jk3112 core-prim . call-with-string-io) (jk3111 core-prim . string-split) (jk3110 core-prim . bytevector-for-each) (jk310f core-prim . string->regexp) (jk310e core-prim . rxmatch) (jk310d core-prim . regexp-replace-all) (jk310c core-prim . hashtable-for-each) (jk5a1 core-prim . mosh-cache-dir) (jk310b core-prim . call-process) (jk310a core-prim . local-tz-offset) (jk3109 core-prim . microseconds) (jk3108 core-prim . directory-list) (jk3107 core-prim . set-current-directory!) (jk3106 core-prim . expand-path) (jk3105 core-prim . current-directory) (jk3104 core-prim . %spawn) (jk3103 core-prim . %waitpid) (jk3102 core-prim . simple-struct-name) (jk3101 core-prim . simple-struct-set!) (jk3100 core-prim . simple-struct-ref) (jk30ff core-prim . make-simple-struct) (jk30fe core-prim . simple-struct?) (jk30fd core-prim . pointer-ref-c-int64) (jk30fc core-prim . pointer-ref-c-int32) (jk30fb core-prim . pointer-ref-c-int16) (jk30fa core-prim . pointer-ref-c-int8) (jk30f9 core-prim . pointer-ref-c-uint64) (jk30f8 core-prim . pointer-ref-c-uint32) (jk30f7 core-prim . pointer-ref-c-uint16) (jk30f6 core-prim . pointer-ref-c-uint8) (jk30f5 core-prim . pointer-set-c-uint64!) (jk30f4 core-prim . pointer-set-c-uint32!) (jk30f3 core-prim . pointer-set-c-uint16!) (jk30f2 core-prim . pointer-set-c-uint8!) (jk30f1 core-prim . pointer-set-c-int64!) (jk30f0 core-prim . pointer-set-c-int32!) (jk30ef core-prim . pointer-set-c-int16!) (jk30ee core-prim . pointer-set-c-int8!) (jk30ed core-prim . pointer-set-c-pointer!) (jk30ec core-prim . pointer-set-c-double!) (jk30eb core-prim . pointer-set-c-float!) (jk30ea core-prim . pointer-set-c-long-long!) (jk30e9 core-prim . pointer-set-c-long!) (jk30e8 core-prim . pointer-set-c-int!) (jk30e7 core-prim . pointer-set-c-short!) (jk30e6 core-prim . pointer-set-c-char!) (jk30e5 core-prim . pointer-ref-c-pointer) (jk30e4 core-prim . pointer-ref-c-double) (jk30e3 core-prim . pointer-ref-c-float) (jk30e2 core-prim . pointer-ref-c-unsigned-long-long) (jk30e1 core-prim . pointer-ref-c-signed-long-long) (jk30e0 core-prim . pointer-ref-c-unsigned-long) (jk30df core-prim . pointer-ref-c-signed-long) (jk30de core-prim . pointer-ref-c-unsigned-int) (jk30dd core-prim . pointer-ref-c-signed-int) (jk30dc core-prim . pointer-ref-c-unsigned-short) (jk30db core-prim . pointer-ref-c-signed-short) (jk30da core-prim . pointer-ref-c-unsigned-char) (jk30d9 core-prim . pointer-ref-c-signed-char) (jk30d8 core-prim . pointer->integer) (jk30d7 core-prim . integer->pointer) (jk30d6 core-prim . pointer?) (jk30d5 core-prim . shared-errno) (jk30d4 core-prim . get-c-address) (jk30d3 core-prim . u8-list->c-procedure) (jk30d2 core-prim . %ffi-free-c-callback-trampoline) (jk30d1 core-prim . %ffi-make-c-callback-trampoline) (jk30d0 core-prim . %ffi-free) (jk30cf core-prim . %ffi-malloc) (jk30ce core-prim . %ffi-supported?) (jk30cd core-prim . %ffi-pointer->string) (jk30cc core-prim . %ffi-call->string-or-zero) (jk30cb core-prim . %ffi-call->double) (jk30ca core-prim . %ffi-call->void*) (jk30c9 core-prim . %ffi-call->void) (jk30c8 core-prim . %ffi-call->char) (jk30c7 core-prim . %ffi-call->int) (jk30c6 core-prim . %ffi-lookup) (jk30c5 core-prim . %ffi-open) (jk30c4 core-prim . %fork) (jk30c3 core-prim . %pipe) (jk30c2 core-prim . p) (jk30c1 core-prim . open-output-string) (jk30c0 core-prim . get-output-string) (jk30bf core-prim . file-stat-ctime) (jk30be core-prim . file-stat-atime) (jk30bd core-prim . file-stat-mtime) (jk30bc core-prim . file-size-in-bytes) (jk30bb core-prim . file-writable?) (jk30ba core-prim . file-executable?) (jk30b9 core-prim . file-readable?) (jk30b8 core-prim . file-regular?) (jk30b7 core-prim . file-symbolic-link?) (jk30b6 core-prim . file-directory?) (jk30b5 core-prim . create-symbolic-link) (jk30b4 core-prim . rename-file) (jk30b3 core-prim . delete-directory) (jk30b2 core-prim . create-directory) (jk30b1 core-prim . create-mosh-cache-dir) (jk30b0 core-prim . get-environment-variables) (jk30af core-prim . current-exception-handler) (jk30ae core-prim . get-environment-variable) (jk30ad core-prim . join-wraps) (jk30ac core-prim . id->real-label) (jk30ab core-prim . same-marks?) (jk30aa core-prim . same-marks*?) (jk30a9 core-prim . get-timeofday) (jk30a8 core-prim . get-command-line) (jk30a7 core-prim . sys-display) (jk30a6 core-prim . whereis) (jk30a5 core-prim . register) (jk30a4 core-prim . vm-join!) (jk30a3 core-prim . vm-set-value!) (jk30a2 core-prim . vm?) (jk30a1 core-prim . main-vm?) (jk30a0 core-prim . vm-eval) (jk309f core-prim . vm-self) (jk309e core-prim . vm-start!) (jk309d core-prim . make-vm) (jk309c core-prim . mutex-try-lock!) (jk309b core-prim . mutex-unlock!) (jk309a core-prim . mutex-lock!) (jk3099 core-prim . mutex?) (jk3098 core-prim . make-mutex) (jk3097 core-prim . condition-variable-notify-all!) (jk3096 core-prim . condition-variable-notify!) (jk3095 core-prim . condition-variable-wait!) (jk3094 core-prim . make-condition-variable) (jk3093 core-prim . mosh-executable-path) (jk3092 core-prim . make-file-options) (jk3091 core-prim . source-info) (jk3090 core-prim . make-compiler-instruction) (jk308f core-prim . make-instruction) (jk308e core-prim . set-source-info!) (jk308d core-prim . bignum?) (jk308c core-prim . fast-equal?) (jk308b core-prim . fasl-read) (jk308a core-prim . fasl-write) (jk3089 core-prim . time-usage) (jk3088 core-prim . os-constant) (jk3087 core-prim . disasm) (jk59f core-prim . make-parameter) (jk3086 core-prim . socket-port) (jk3085 core-prim . socket-shutdown) (jk3084 core-prim . socket-close) (jk3083 core-prim . socket-send) (jk3082 core-prim . socket-recv!) (jk3081 core-prim . socket-recv) (jk3080 core-prim . make-server-socket) (jk307f core-prim . make-client-socket) (jk307e core-prim . socket-accept) (jk307d core-prim . socket?) (jk307c core-prim . string-upcase) (jk307b core-prim . string-titlecase) (jk307a core-prim . string-normalize-nfkd) (jk3079 core-prim . string-normalize-nfkc) (jk3078 core-prim . string-normalize-nfd) (jk3077 core-prim . string-normalize-nfc) (jk3076 core-prim . string-foldcase) (jk3075 core-prim . string-downcase) (jk3074 core-prim . string-ci>?) (jk3073 core-prim . string-ci>=?) (jk3072 core-prim . string-ci=?) (jk3071 core-prim . string-ci<?) (jk3070 core-prim . string-ci<=?) (jk306f core-prim . char-whitespace?) (jk306e core-prim . char-upper-case?) (jk306d core-prim . char-title-case?) (jk306c core-prim . char-numeric?) (jk306b core-prim . char-lower-case?) (jk306a core-prim . char-general-category) (jk3069 core-prim . char-upcase) (jk3068 core-prim . char-titlecase) (jk3067 core-prim . char-foldcase) (jk3066 core-prim . char-downcase) (jk3065 core-prim . char-ci>?) (jk3064 core-prim . char-ci>=?) (jk3063 core-prim . char-ci=?) (jk3062 core-prim . char-ci<?) (jk3061 core-prim . char-ci<=?) (jk3060 core-prim . char-alphabetic?) (jkba8 core-prim . make-variable-transformer) (jke5f core-prim . identifier?) (jke4b core-prim . generate-temporaries) (jke4d core-prim . free-identifier=?) (jke63 core-prim . syntax->datum) (jke61 core-prim . datum->syntax) (jke4f core-prim . bound-identifier=?) (jk305f core-prim . record-type-descriptor?) (jk305e core-prim . record-predicate) (jk305d core-prim . record-mutator) (jk305c core-prim . record-constructor) (jk305b core-prim . record-accessor) (jk305a core-prim . make-record-type-descriptor) (jk3059 core-prim . make-record-constructor-descriptor) (jk3058 core-prim . record?) (jk3057 core-prim . record-type-uid) (jk3056 core-prim . record-type-sealed?) (jk3055 core-prim . record-type-parent) (jk3054 core-prim . record-type-opaque?) (jk3053 core-prim . record-type-name) (jk3052 core-prim . record-type-generative?) (jk3051 core-prim . record-type-field-names) (jk3050 core-prim . record-rtd) (jk304f core-prim . record-field-mutable?) (jk304e core-prim . delete-file) (jk304d core-prim . file-exists?) (jk304c core-prim . vector-sort!) (jk304b core-prim . vector-sort) (jk304a core-prim . list-sort) (jk3049 core-prim . symbol-hash) (jk3048 core-prim . string-ci-hash) (jk3047 core-prim . string-hash) (jk3046 core-prim . equal-hash) (jk3045 core-prim . hashtable-equivalence-function) (jk3044 core-prim . make-hashtable) (jk3043 core-prim . hashtable-hash-function) (jk3042 core-prim . make-eqv-hashtable) (jk3041 core-prim . make-eq-hashtable) (jk3040 core-prim . hashtable?) (jk303f core-prim . hashtable-update!) (jk303e core-prim . hashtable-size) (jk303d core-prim . hashtable-set!) (jk303c core-prim . hashtable-ref) (jk303b core-prim . hashtable-mutable?) (jk303a core-prim . hashtable-keys) (jk3039 core-prim . hashtable-entries) (jk3038 core-prim . hashtable-delete!) (jk3037 core-prim . hashtable-copy) (jk3036 core-prim . hashtable-contains?) (jk3035 core-prim . hashtable-clear!) (jk3034 core-prim . call-with-output-file) (jk3033 core-prim . call-with-input-file) (jk3032 core-prim . write-char) (jk3031 core-prim . write) (jk3030 core-prim . with-output-to-file) (jk302f core-prim . with-input-from-file) (jk302e core-prim . read-char) (jk302d core-prim . read) (jk302c core-prim . peek-char) (jk302b core-prim . open-output-file) (jk302a core-prim . open-input-file) (jk3029 core-prim . newline) (jk3028 core-prim . display) (jk3027 core-prim . close-output-port) (jk3026 core-prim . close-input-port) (jk3025 core-prim . eof-object?) (jk3024 core-prim . eof-object) (jk3023 core-prim . current-error-port) (jk3022 core-prim . current-output-port) (jk3021 core-prim . current-input-port) (jk3020 core-prim . output-port?) (jk301f core-prim . input-port?) (jk301e core-prim . utf-8-codec) (jk301d core-prim . utf-16-codec) (jk301c core-prim . transcoder-error-handling-mode) (jk301b core-prim . transcoder-eol-style) (jk301a core-prim . transcoder-codec) (jk3019 core-prim . transcoded-port) (jk3018 core-prim . textual-port?) (jk3017 core-prim . string->bytevector) (jk3016 core-prim . standard-output-port) (jk3015 core-prim . standard-input-port) (jk3014 core-prim . standard-error-port) (jk3013 core-prim . set-port-position!) (jk3012 core-prim . put-u8) (jk3011 core-prim . put-string) (jk3010 core-prim . put-datum) (jk300f core-prim . put-char) (jk300e core-prim . put-bytevector) (jk300d core-prim . port?) (jk300c core-prim . port-transcoder) (jk300b core-prim . port-position) (jk300a core-prim . port-has-set-port-position!?) (jk3009 core-prim . port-has-port-position?) (jk3008 core-prim . port-eof?) (jk3007 core-prim . output-port-buffer-mode) (jk3006 core-prim . open-string-output-port) (jk3005 core-prim . open-string-input-port) (jk3004 core-prim . open-file-output-port) (jk3003 core-prim . open-file-input/output-port) (jk3002 core-prim . open-file-input-port) (jk3001 core-prim . open-bytevector-output-port) (jk3000 core-prim . open-bytevector-input-port) (jk2fff core-prim . native-transcoder) (jk2ffe core-prim . native-eol-style) (jk2ffd core-prim . make-transcoder) (jk2ffc core-prim . latin-1-codec) (jk2a87 core-prim . make-i/o-write-error) (jk2a72 core-prim . make-i/o-read-error) (jk2b28 core-prim . make-i/o-port-error) (jk2a9e core-prim . make-i/o-invalid-position-error) (jk2ab9 core-prim . make-i/o-filename-error) (jk2ad2 core-prim . make-i/o-file-protection-error) (jk2ae7 core-prim . make-i/o-file-is-read-only-error) (jk2b11 core-prim . make-i/o-file-does-not-exist-error) (jk2afc core-prim . make-i/o-file-already-exists-error) (jk2a5d core-prim . make-i/o-error) (jk2b58 core-prim . make-i/o-encoding-error) (jk2b41 core-prim . make-i/o-decoding-error) (jk2ffb core-prim . make-custom-textual-output-port) (jk2ffa core-prim . make-custom-textual-input/output-port) (jk2ff9 core-prim . make-custom-textual-input-port) (jk2ff8 core-prim . make-custom-binary-output-port) (jk2ff7 core-prim . make-custom-binary-input/output-port) (jk2ff6 core-prim . make-custom-binary-input-port) (jk2ff5 core-prim . make-bytevector) (jk2ff4 core-prim . lookahead-u8) (jk2ff3 core-prim . lookahead-char) (jk2a89 core-prim . i/o-write-error?) (jk2a74 core-prim . i/o-read-error?) (jk2b2c core-prim . i/o-port-error?) (jk2aa2 core-prim . i/o-invalid-position-error?) (jk2abd core-prim . i/o-filename-error?) (jk2ad4 core-prim . i/o-file-protection-error?) (jk2ae9 core-prim . i/o-file-is-read-only-error?) (jk2b13 core-prim . i/o-file-does-not-exist-error?) (jk2afe core-prim . i/o-file-already-exists-error?) (jk2a5f core-prim . i/o-error?) (jk2aa4 core-prim . i/o-error-position) (jk2b2e core-prim . i/o-error-port) (jk2abf core-prim . i/o-error-filename) (jk2b5c core-prim . i/o-encoding-error?) (jk2b5e core-prim . i/o-encoding-error-char) (jk2b43 core-prim . i/o-decoding-error?) (jk2ff2 core-prim . get-u8) (jk2ff1 core-prim . get-string-n!) (jk2ff0 core-prim . get-string-n) (jk2fef core-prim . get-string-all) (jk2fee core-prim . get-line) (jk2fed core-prim . get-datum) (jk2fec core-prim . get-char) (jk2feb core-prim . get-bytevector-some) (jk2fea core-prim . get-bytevector-n!) (jk2fe9 core-prim . get-bytevector-n) (jk2fe8 core-prim . get-bytevector-all) (jk2fe7 core-prim . flush-output-port) (jk2fe6 core-prim . close-port) (jke39 core-prim . scheme-report-environment) (jk2fe5 core-prim . quotient) (jke37 core-prim . null-environment) (jk2fe4 core-prim . remainder) (jk2fe3 core-prim . modulo) (jk2fe2 core-prim . inexact->exact) (jk2fe1 core-prim . force) (jk2fe0 core-prim . exact->inexact) (jk2fdf core-prim . make-promise) (jk2fde core-prim . exit) (jk2c97 core-prim . command-line) (jk2fdd core-prim . string-fill!) (jk2fdc core-prim . string-set!) (jk2fdb core-prim . set-cdr!) (jk2fda core-prim . set-car!) (jk2fd9 core-prim . remove) (jk2fd8 core-prim . remv) (jk2fd7 core-prim . remp) (jk2fd6 core-prim . remq) (jk2fd5 core-prim . partition) (jk2fd4 core-prim . memv) (jk2fd3 core-prim . memq) (jk2fd2 core-prim . memp) (jk2fd1 core-prim . member) (jk2fd0 core-prim . exists) (jk2fcf core-prim . for-all) (jk2fce core-prim . fold-right) (jk2fcd core-prim . fold-left) (jk2fcc core-prim . find) (jk2fcb core-prim . filter) (jk2fca core-prim . cons*) (jk2fc9 core-prim . assv) (jk2fc8 core-prim . assq) (jk2fc7 core-prim . assp) (jk2fc6 core-prim . assoc) (jk2fc5 core-prim . call-with-string-output-port) (jk2fc4 core-prim . call-with-port) (jk2fc3 core-prim . call-with-bytevector-output-port) (jk2fc2 core-prim . bytevector->string) (jk2fc1 core-prim . buffer-mode?) (jk2fc0 core-prim . binary-port?) (jk2fbf core-prim . with-exception-handler) (jk2fbe core-prim . raise-continuable) (jk2fbd core-prim . raise) (jke3d core-prim . eval) (jke35 core-prim . environment) (jk2fbc core-prim . make-enumeration) (jk2fbb core-prim . enum-set=?) (jk2fba core-prim . enum-set-universe) (jk2fb9 core-prim . enum-set-union) (jk2fb8 core-prim . enum-set-subset?) (jk2fb7 core-prim . enum-set-projection) (jk2fb6 core-prim . enum-set-member?) (jk2fb5 core-prim . enum-set-intersection) (jk2fb4 core-prim . enum-set-indexer) (jk2fb3 core-prim . enum-set-difference) (jk2fb2 core-prim . enum-set-constructor) (jk2fb1 core-prim . enum-set-complement) (jk2fb0 core-prim . enum-set->list) (jk29d3 core-prim . who-condition?) (jk294b core-prim . warning?) (jk298a core-prim . violation?) (jk2a4a core-prim . undefined-violation?) (jk2a31 core-prim . syntax-violation?) (jk2a35 core-prim . syntax-violation-subform) (jk2a33 core-prim . syntax-violation-form) (jke5d core-prim . syntax-violation) (jk2faf core-prim . simple-conditions) (jk2960 core-prim . serious-condition?) (jk29ea core-prim . non-continuable-violation?) (jk2934 core-prim . message-condition?) (jk29cf core-prim . make-who-condition) (jk2949 core-prim . make-warning) (jk2988 core-prim . make-violation) (jk2a48 core-prim . make-undefined-violation) (jk2a2b core-prim . make-syntax-violation) (jk295e core-prim . make-serious-condition) (jk29e8 core-prim . make-non-continuable-violation) (jk2930 core-prim . make-message-condition) (jk2a12 core-prim . make-lexical-violation) (jk29b4 core-prim . make-irritants-condition) (jk29fd core-prim . make-implementation-restriction-violation) (jk2973 core-prim . make-error) (jk299d core-prim . make-assertion-violation) (jk2a14 core-prim . lexical-violation?) (jk29b8 core-prim . irritants-condition?) (jk29ff core-prim . implementation-restriction-violation?) (jk2975 core-prim . error?) (jk29d5 core-prim . condition-who) (jk2fae core-prim . condition-predicate) (jk2936 core-prim . condition-message) (jk29ba core-prim . condition-irritants) (jk2fad core-prim . condition-accessor) (jk2fac core-prim . condition) (jk299f core-prim . assertion-violation?) (jk2fab core-prim . condition?) (jk2faa core-prim . utf32->string) (jk2fa9 core-prim . utf16->string) (jk2fa8 core-prim . utf8->string) (jk2fa7 core-prim . uint-list->bytevector) (jk2fa6 core-prim . u8-list->bytevector) (jk2fa5 core-prim . string->utf8) (jk2fa4 core-prim . string->utf32) (jk2fa3 core-prim . string->utf16) (jk2fa2 core-prim . sint-list->bytevector) (jk2fa1 core-prim . native-endianness) (jk2fa0 core-prim . bytevector?) (jk2f9f core-prim . bytevector=?) (jk2f9e core-prim . bytevector-uint-set!) (jk2f9d core-prim . bytevector-uint-ref) (jk2f9c core-prim . bytevector-u8-set!) (jk2f9b core-prim . bytevector-u8-ref) (jk2f9a core-prim . bytevector-u64-set!) (jk2f99 core-prim . bytevector-u64-ref) (jk2f98 core-prim . bytevector-u64-native-set!) (jk2f97 core-prim . bytevector-u64-native-ref) (jk2f96 core-prim . bytevector-u32-set!) (jk2f95 core-prim . bytevector-u32-ref) (jk2f94 core-prim . bytevector-u32-native-set!) (jk2f93 core-prim . bytevector-u32-native-ref) (jk2f92 core-prim . bytevector-u16-set!) (jk2f91 core-prim . bytevector-u16-ref) (jk2f90 core-prim . bytevector-u16-native-set!) (jk2f8f core-prim . bytevector-u16-native-ref) (jk2f8e core-prim . bytevector-sint-set!) (jk2f8d core-prim . bytevector-sint-ref) (jk2f8c core-prim . bytevector-s8-set!) (jk2f8b core-prim . bytevector-s8-ref) (jk2f8a core-prim . bytevector-s64-set!) (jk2f89 core-prim . bytevector-s64-ref) (jk2f88 core-prim . bytevector-s64-native-set!) (jk2f87 core-prim . bytevector-s64-native-ref) (jk2f86 core-prim . bytevector-s32-set!) (jk2f85 core-prim . bytevector-s32-ref) (jk2f84 core-prim . bytevector-s32-native-set!) (jk2f83 core-prim . bytevector-s32-native-ref) (jk2f82 core-prim . bytevector-s16-set!) (jk2f81 core-prim . bytevector-s16-ref) (jk2f80 core-prim . bytevector-s16-native-set!) (jk2f7f core-prim . bytevector-s16-native-ref) (jk2f7e core-prim . bytevector-length) (jk2f7d core-prim . bytevector-ieee-single-ref) (jk2f7c core-prim . bytevector-ieee-single-set!) (jk2f7b core-prim . bytevector-ieee-single-native-set!) (jk2f7a core-prim . bytevector-ieee-single-native-ref) (jk2f79 core-prim . bytevector-ieee-double-set!) (jk2f78 core-prim . bytevector-ieee-double-ref) (jk2f77 core-prim . bytevector-ieee-double-native-set!) (jk2f76 core-prim . bytevector-ieee-double-native-ref) (jk2f75 core-prim . bytevector-fill!) (jk2f74 core-prim . bytevector-copy!) (jk2f73 core-prim . bytevector-copy) (jk2f72 core-prim . bytevector->uint-list) (jk2f71 core-prim . bytevector->u8-list) (jk2f70 core-prim . bytevector->sint-list) (jk2b88 core-prim . no-nans-violation?) (jk2b73 core-prim . no-infinities-violation?) (jk2b86 core-prim . make-no-nans-violation) (jk2b71 core-prim . make-no-infinities-violation) (jk2f6f core-prim . real->flonum) (jk2f6e core-prim . flzero?) (jk2f6d core-prim . fltruncate) (jk2f6c core-prim . fltan) (jk2f6b core-prim . flsqrt) (jk2f6a core-prim . flsin) (jk2f69 core-prim . flround) (jk2f68 core-prim . flpositive?) (jk2f67 core-prim . flonum?) (jk2f66 core-prim . flodd?) (jk2f65 core-prim . flnumerator) (jk2f64 core-prim . flnegative?) (jk2f63 core-prim . flnan?) (jk2f62 core-prim . flmod0) (jk2f61 core-prim . flmod) (jk2f60 core-prim . flmin) (jk2f5f core-prim . flmax) (jk2f5e core-prim . fllog) (jk2f5d core-prim . flinteger?) (jk2f5c core-prim . flinfinite?) (jk2f5b core-prim . flfloor) (jk2f5a core-prim . flfinite?) (jk2f59 core-prim . flexpt) (jk2f58 core-prim . flexp) (jk2f57 core-prim . fleven?) (jk2f56 core-prim . fldiv0-and-mod0) (jk2f55 core-prim . fldiv0) (jk2f54 core-prim . fldiv-and-mod) (jk2f53 core-prim . fldiv) (jk2f52 core-prim . fldenominator) (jk2f51 core-prim . flcos) (jk2f50 core-prim . flceiling) (jk2f4f core-prim . flatan) (jk2f4e core-prim . flasin) (jk2f4d core-prim . flacos) (jk2f4c core-prim . flabs) (jk2f4b core-prim . fl>?) (jk2f4a core-prim . fl>=?) (jk2f49 core-prim . fl=?) (jk2f48 core-prim . fl<?) (jk2f47 core-prim . fl<=?) (jk2f46 core-prim . fl/) (jk2f45 core-prim . fl-) (jk2f44 core-prim . fl+) (jk2f43 core-prim . fl*) (jk2f42 core-prim . fixnum->flonum) (jk2f41 core-prim . fxzero?) (jk2f40 core-prim . fxxor) (jk2f3f core-prim . fxrotate-bit-field) (jk2f3e core-prim . fxreverse-bit-field) (jk2f3d core-prim . fxpositive?) (jk2f3c core-prim . fxodd?) (jk2f3b core-prim . fxnot) (jk2f3a core-prim . fxnegative?) (jk2f39 core-prim . fxmod0) (jk2f38 core-prim . fxmod) (jk2f37 core-prim . fxmin) (jk2f36 core-prim . fxmax) (jk2f35 core-prim . fxlength) (jk2f34 core-prim . fxior) (jk2f33 core-prim . fxif) (jk2f32 core-prim . fxfirst-bit-set) (jk2f31 core-prim . fxeven?) (jk2f30 core-prim . fxdiv0-and-mod0) (jk2f2f core-prim . fxdiv0) (jk2f2e core-prim . fxdiv-and-mod) (jk2f2d core-prim . fxdiv) (jk2f2c core-prim . fxcopy-bit-field) (jk2f2b core-prim . fxcopy-bit) (jk2f2a core-prim . fxbit-set?) (jk2f29 core-prim . fxbit-field) (jk2f28 core-prim . fxbit-count) (jk2f27 core-prim . fxarithmetic-shift-right) (jk2f26 core-prim . fxarithmetic-shift-left) (jk2f25 core-prim . fxarithmetic-shift) (jk2f24 core-prim . fxand) (jk2f23 core-prim . fx>?) (jk2f22 core-prim . fx>=?) (jk2f21 core-prim . fx=?) (jk2f20 core-prim . fx<?) (jk2f1f core-prim . fx<=?) (jk2f1e core-prim . fx-/carry) (jk2f1d core-prim . fx-) (jk2f1c core-prim . fx+/carry) (jk2f1b core-prim . fx+) (jk2f1a core-prim . fx*/carry) (jk2f19 core-prim . fx*) (jk2f18 core-prim . greatest-fixnum) (jk2f17 core-prim . least-fixnum) (jk2f16 core-prim . fixnum-width) (jk2f15 core-prim . fixnum?) (jk2f14 core-prim . bitwise-rotate-bit-field) (jk2f13 core-prim . bitwise-reverse-bit-field) (jk2f12 core-prim . bitwise-length) (jk2f11 core-prim . bitwise-if) (jk2f10 core-prim . bitwise-first-bit-set) (jk2f0f core-prim . bitwise-copy-bit-field) (jk2f0e core-prim . bitwise-copy-bit) (jk2f0d core-prim . bitwise-bit-set?) (jk2f0c core-prim . bitwise-bit-field) (jk2f0b core-prim . bitwise-bit-count) (jk2f0a core-prim . bitwise-xor) (jk2f09 core-prim . bitwise-ior) (jk2f08 core-prim . bitwise-and) (jk2f07 core-prim . bitwise-not) (jk2f06 core-prim . bitwise-arithmetic-shift-right) (jk2f05 core-prim . bitwise-arithmetic-shift-left) (jk2f04 core-prim . bitwise-arithmetic-shift) (jk2f03 core-prim . zero?) (jk2f02 core-prim . vector?) (jk2f01 core-prim . vector-set!) (jk2f00 core-prim . vector-ref) (jk2eff core-prim . vector-map) (jk2efe core-prim . vector-length) (jk2efd core-prim . vector-for-each) (jk2efc core-prim . vector-fill!) (jk2efb core-prim . vector->list) (jk2efa core-prim . vector) (jk2ef9 core-prim . values) (jk2ef8 core-prim . truncate) (jk2ef7 core-prim . tan) (jk2ef6 core-prim . symbol?) (jk2ef5 core-prim . symbol=?) (jk2ef4 core-prim . symbol->string) (jk2ef3 core-prim . substring) (jk2ef2 core-prim . string?) (jk2ef1 core-prim . string>?) (jk2ef0 core-prim . string>=?) (jk2eef core-prim . string=?) (jk2eee core-prim . string<?) (jk2eed core-prim . string<=?) (jk2eec core-prim . string-ref) (jk2eeb core-prim . string-length) (jk2eea core-prim . string-for-each) (jk2ee9 core-prim . string-copy) (jk2ee8 core-prim . string-append) (jk2ee7 core-prim . string->symbol) (jk2ee6 core-prim . string->number) (jk2ee5 core-prim . string->list) (jk2ee4 core-prim . string) (jk2ee3 core-prim . sqrt) (jk2ee2 core-prim . sin) (jk2ee1 core-prim . round) (jk2ee0 core-prim . reverse) (jk2edf core-prim . real?) (jk2ede core-prim . real-valued?) (jk2edd core-prim . real-part) (jk2edc core-prim . rationalize) (jk2edb core-prim . rational?) (jk2eda core-prim . rational-valued?) (jk2ed9 core-prim . procedure?) (jk2ed8 core-prim . positive?) (jk2ed7 core-prim . pair?) (jk2ed6 core-prim . odd?) (jk2ed5 core-prim . numerator) (jk2ed4 core-prim . number?) (jk2ed3 core-prim . number->string) (jk2ed2 core-prim . null?) (jk2ed1 core-prim . not) (jk2ed0 core-prim . negative?) (jk2ecf core-prim . nan?) (jk2ece core-prim . min) (jk2ecd core-prim . max) (jk2ecc core-prim . map) (jk2ecb core-prim . make-vector) (jk2eca core-prim . make-string) (jk2ec9 core-prim . make-rectangular) (jk2ec8 core-prim . make-polar) (jk2ec7 core-prim . magnitude) (jk2ec6 core-prim . log) (jk2ec5 core-prim . list?) (jk2ec4 core-prim . list-tail) (jk2ec3 core-prim . list-ref) (jk2ec2 core-prim . list->vector) (jk2ec1 core-prim . list->string) (jk2ec0 core-prim . list) (jk2ebf core-prim . length) (jk2ebe core-prim . lcm) (jk2ebd core-prim . integer?) (jk2ebc core-prim . integer-valued?) (jk2ebb core-prim . integer->char) (jk2eba core-prim . infinite?) (jk2eb9 core-prim . inexact?) (jk2eb8 core-prim . inexact) (jk2eb7 core-prim . imag-part) (jk2eb6 core-prim . gcd) (jk2eb5 core-prim . for-each) (jk2eb4 core-prim . floor) (jk2eb3 core-prim . finite?) (jk2eb2 core-prim . expt) (jk2eb1 core-prim . exp) (jk2eb0 core-prim . exact?) (jk2eaf core-prim . exact-integer-sqrt) (jk2eae core-prim . exact) (jk2ead core-prim . even?) (jk2eac core-prim . error) (jk2eab core-prim . eqv?) (jk2eaa core-prim . equal?) (jk2ea9 core-prim . eq?) (jk2ea8 core-prim . dynamic-wind) (jk2ea7 core-prim . div0-and-mod0) (jk2ea6 core-prim . mod0) (jk2ea5 core-prim . div0) (jk2ea4 core-prim . div-and-mod) (jk2ea3 core-prim . mod) (jk2ea2 core-prim . div) (jk2ea1 core-prim . denominator) (jk2ea0 core-prim . cos) (jk2e9f core-prim . cons) (jk2e9e core-prim . complex?) (jk2e9d core-prim . char?) (jk2e9c core-prim . char>?) (jk2e9b core-prim . char>=?) (jk2e9a core-prim . char=?) (jk2e99 core-prim . char<?) (jk2e98 core-prim . char<=?) (jk2e97 core-prim . char->integer) (jk2e96 core-prim . ceiling) (jk2e95 core-prim . call-with-values) (jk2e94 core-prim . call/cc) (jk2e93 core-prim . call-with-current-continuation) (jk2e92 core-prim . cddddr) (jk2e91 core-prim . cdddar) (jk2e90 core-prim . cddadr) (jk2e8f core-prim . cddaar) (jk2e8e core-prim . cdaddr) (jk2e8d core-prim . cdadar) (jk2e8c core-prim . cdaadr) (jk2e8b core-prim . cdaaar) (jk2e8a core-prim . cadddr) (jk2e89 core-prim . caddar) (jk2e88 core-prim . cadadr) (jk2e87 core-prim . cadaar) (jk2e86 core-prim . caaddr) (jk2e85 core-prim . caadar) (jk2e84 core-prim . caaadr) (jk2e83 core-prim . caaaar) (jk2e82 core-prim . cdddr) (jk2e81 core-prim . cddar) (jk2e80 core-prim . cdadr) (jk2e7f core-prim . cdaar) (jk2e7e core-prim . caddr) (jk2e7d core-prim . cadar) (jk2e7c core-prim . caadr) (jk2e7b core-prim . caaar) (jk2e7a core-prim . cddr) (jk2e79 core-prim . cdar) (jk2e78 core-prim . cadr) (jk2e77 core-prim . caar) (jk2e76 core-prim . cdr) (jk2e75 core-prim . car) (jk2e74 core-prim . boolean?) (jk2e73 core-prim . boolean=?) (jk2e72 core-prim . atan) (jk2e71 core-prim . assertion-violation) (jke57 core-prim . assertion-error) (jk2e70 core-prim . asin) (jk2e6f core-prim . apply) (jk2e6e core-prim . append) (jk2e6d core-prim . angle) (jk2e6c core-prim . acos) (jk2e6b core-prim . abs) (jk2e6a core-prim . /) (jk2e69 core-prim . *) (jk2e68 core-prim . -) (jk2e67 core-prim . +) (jk2e66 core-prim . >=) (jk2e65 core-prim . >) (jk2e64 core-prim . =) (jk2e63 core-prim . <=) (jk2e62 core-prim . <) (jk2e61 core-prim . library) (jk2e60 $core-rtd &no-nans-rtd &no-nans-rcd) (jk2e5f $core-rtd &no-infinities-rtd &no-infinities-rcd) (jk2e5e $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (jk2e5d $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (jk2e5c $core-rtd &i/o-port-rtd &i/o-port-rcd) (jk2e5b $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (jk2e5a $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (jk2e59 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (jk2e58 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (jk2e57 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (jk2e56 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (jk2e55 $core-rtd &i/o-write-rtd &i/o-write-rcd) (jk2e54 $core-rtd &i/o-read-rtd &i/o-read-rcd) (jk2e53 $core-rtd &i/o-rtd &i/o-rcd) (jk2e52 $core-rtd &undefined-rtd &undefined-rcd) (jk2e51 $core-rtd &syntax-rtd &syntax-rcd) (jk2e50 $core-rtd &lexical-rtd &lexical-rcd) (jk2e4f $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (jk2e4e $core-rtd &non-continuable-rtd &non-continuable-rcd) (jk2e4d $core-rtd &who-rtd &who-rcd) (jk2e4c $core-rtd &irritants-rtd &irritants-rcd) (jk2e4b $core-rtd &assertion-rtd &assertion-rcd) (jk2e4a $core-rtd &violation-rtd &violation-rcd) (jk2e49 $core-rtd &error-rtd &error-rcd) (jk2e48 $core-rtd &serious-rtd &serious-rcd) (jk2e47 $core-rtd &warning-rtd &warning-rcd) (jk2e46 $core-rtd &message-rtd &message-rcd) (jk2e45 $core-rtd &condition-rtd &condition-rcd) (jk2e44 macro . define-condition-type) (jk2e43 macro . define-enumeration) (jk2e42 macro . define-record-type) (jk2e41 macro . parent-rtd) (jk2e40 macro . nongenerative) (jk2e3f macro . opaque) (jk2e3e macro . sealed) (jk2e3d macro . protocol) (jk2e3c macro . parent) (jk2e3b macro . immutable) (jk2e3a macro . mutable) (jk2e39 macro . fields) (jk2e38 macro . error-handling-mode) (jk2e37 macro . file-options) (jk2e36 macro . buffer-mode) (jk2e35 macro . eol-style) (jk2e34 macro . guard) (jk2e33 macro . trace-define) (jk2e32 macro . trace-lambda) (jk2e31 macro . unsyntax-splicing) (jk2e30 macro . unsyntax) (jk2e2f macro . unquote-splicing) (jk2e2e macro . unquote) (jk2e2d macro . _) (jk2e2c macro . else) (jk2e2b macro . =>) (jk2e2a macro . ...) (jk2e29 macro . assert) (jk2e28 macro . endianness) (jk2e27 macro . delay) (jk2e26 macro . time) (jk2e25 macro . do) (jk2e24 macro . cond) (jk2e23 macro . let*) (jk2e22 macro . let*-values) (jk2e21 macro . let-values) (jk2e20 macro . identifier-syntax) (jk2e1f macro . with-syntax) (jk2e1e macro . quasisyntax) (jk2e1d macro . quasiquote) (jk2e1c macro . syntax-rules) (jk2e1b macro . include) (jk2e1a macro . define-struct) (jk2e19 core-macro . record-constructor-descriptor) (jk2e18 core-macro . record-type-descriptor) (jk2e17 macro . case) (jk2e16 macro . parameterize) (jk2e15 macro . unless) (jk2e14 macro . when) (jk2e13 core-macro . or) (jk2e12 core-macro . and) (jk2e11 core-macro . if) (jk2e10 core-macro . let) (jk2e0f core-macro . letrec*) (jk2e0e core-macro . letrec) (jk2e0d core-macro . type-descriptor) (jk2e0c core-macro . case-lambda) (jk2e0b core-macro . lambda) (jk2e0a core-macro . syntax) (jk2e09 core-macro . syntax-case) (jk2e08 core-macro . quote) (jk2e07 core-macro . foreign-call) (jk2e06 letrec-syntax) (jk2e05 let-syntax) (jk2e04 set!) (jk2e03 import) (jk2e02 begin) (jk2e01 module) (jk2e00 define-syntax) (jk2dff define)) values values '#f '#f '#f '#f) (jk98b@jk7d7@install-library 'jk314b '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . jk312a) (eval-core . jk3129) (set-symbol-value! . jk3128) (symbol-value . jk3127) (gensym . jk3126) (void . jk3125)) '() values values '#f '#f '#f '#f) (jk98b@jk7d7@install-library 'jk314c '(mosh) '() '() '() '() '((set-symbol-value! . jk3128) (symbol-value . jk3127) (gensym . jk3126) (regexp? . jk3123) (read-line . jk3122) (ungensym . jk3120) (alist->eq-hash-table . jk311f) (assoc-ref . jk311e) (print . jk311d) (format . jk311c) (host-os . jk311b) (library-path . jk7b6) (standard-library-path . jk311a) (file-newer? . jk3119) (stat-mtime . jk3118) (digit->integer . jk3114) (call-with-string-input-port . jk3113) (call-with-string-io . jk3112) (string-split . jk3111) (bytevector-for-each . jk3110) (string->regexp . jk310f) (rxmatch . jk310e) (regexp-replace-all . jk310d) (hashtable-for-each . jk310c) (set-current-directory! . jk3107) (expand-path . jk3106) (current-directory . jk3105) (p . jk30c2) (get-timeofday . jk30a9) (get-command-line . jk30a8) (sys-display . jk30a7) (whereis . jk30a6) (register . jk30a5) (vm-join! . jk30a4) (vm-set-value! . jk30a3) (vm? . jk30a2) (main-vm? . jk30a1) (vm-eval . jk30a0) (vm-self . jk309f) (vm-start! . jk309e) (make-vm . jk309d) (mutex-try-lock! . jk309c) (mutex-unlock! . jk309b) (mutex-lock! . jk309a) (mutex? . jk3099) (make-mutex . jk3098) (condition-variable-notify-all! . jk3097) (condition-variable-notify! . jk3096) (condition-variable-wait! . jk3095) (make-condition-variable . jk3094) (mosh-executable-path . jk3093) (make-file-options . jk3092) (source-info . jk3091) (make-compiler-instruction . jk3090) (make-instruction . jk308f) (set-source-info! . jk308e) (bignum? . jk308d) (fast-equal? . jk308c) (fasl-read . jk308b) (fasl-write . jk308a) (time-usage . jk3089) (os-constant . jk3088) (time . jk2e26) (include . jk2e1b)) '() values values '#f '#f '#f '#f) (jk98b@jk7d7@install-library 'jk314d '(system) '() '() '() '() '((gensym-prefix-set! . jk3121) (write-to-file . jk3117) (file->list . jk3116) (file->string . jk3115) (mosh-cache-dir . jk5a1) (call-process . jk310b) (local-tz-offset . jk310a) (microseconds . jk3109) (directory-list . jk3108) (expand-path . jk3106) (%spawn . jk3104) (%waitpid . jk3103) (simple-struct-name . jk3102) (simple-struct-set! . jk3101) (simple-struct-ref . jk3100) (make-simple-struct . jk30ff) (simple-struct? . jk30fe) (pointer-ref-c-int64 . jk30fd) (pointer-ref-c-int32 . jk30fc) (pointer-ref-c-int16 . jk30fb) (pointer-ref-c-int8 . jk30fa) (pointer-ref-c-uint64 . jk30f9) (pointer-ref-c-uint32 . jk30f8) (pointer-ref-c-uint16 . jk30f7) (pointer-ref-c-uint8 . jk30f6) (pointer-set-c-uint64! . jk30f5) (pointer-set-c-uint32! . jk30f4) (pointer-set-c-uint16! . jk30f3) (pointer-set-c-uint8! . jk30f2) (pointer-set-c-int64! . jk30f1) (pointer-set-c-int32! . jk30f0) (pointer-set-c-int16! . jk30ef) (pointer-set-c-int8! . jk30ee) (pointer-set-c-pointer! . jk30ed) (pointer-set-c-double! . jk30ec) (pointer-set-c-float! . jk30eb) (pointer-set-c-long-long! . jk30ea) (pointer-set-c-long! . jk30e9) (pointer-set-c-int! . jk30e8) (pointer-set-c-short! . jk30e7) (pointer-set-c-char! . jk30e6) (pointer-ref-c-pointer . jk30e5) (pointer-ref-c-double . jk30e4) (pointer-ref-c-float . jk30e3) (pointer-ref-c-unsigned-long-long . jk30e2) (pointer-ref-c-signed-long-long . jk30e1) (pointer-ref-c-unsigned-long . jk30e0) (pointer-ref-c-signed-long . jk30df) (pointer-ref-c-unsigned-int . jk30de) (pointer-ref-c-signed-int . jk30dd) (pointer-ref-c-unsigned-short . jk30dc) (pointer-ref-c-signed-short . jk30db) (pointer-ref-c-unsigned-char . jk30da) (pointer-ref-c-signed-char . jk30d9) (pointer->integer . jk30d8) (integer->pointer . jk30d7) (pointer? . jk30d6) (shared-errno . jk30d5) (get-c-address . jk30d4) (u8-list->c-procedure . jk30d3) (%ffi-free-c-callback-trampoline . jk30d2) (%ffi-make-c-callback-trampoline . jk30d1) (%ffi-free . jk30d0) (%ffi-malloc . jk30cf) (%ffi-supported? . jk30ce) (%ffi-pointer->string . jk30cd) (%ffi-call->string-or-zero . jk30cc) (%ffi-call->double . jk30cb) (%ffi-call->void* . jk30ca) (%ffi-call->void . jk30c9) (%ffi-call->char . jk30c8) (%ffi-call->int . jk30c7) (%ffi-lookup . jk30c6) (%ffi-open . jk30c5) (%fork . jk30c4) (%pipe . jk30c3) (open-output-string . jk30c1) (get-output-string . jk30c0) (file-stat-ctime . jk30bf) (file-stat-atime . jk30be) (file-stat-mtime . jk30bd) (file-size-in-bytes . jk30bc) (file-writable? . jk30bb) (file-executable? . jk30ba) (file-readable? . jk30b9) (file-regular? . jk30b8) (file-symbolic-link? . jk30b7) (file-directory? . jk30b6) (create-symbolic-link . jk30b5) (rename-file . jk30b4) (delete-directory . jk30b3) (create-directory . jk30b2) (create-mosh-cache-dir . jk30b1) (get-environment-variables . jk30b0) (current-exception-handler . jk30af) (get-environment-variable . jk30ae) (join-wraps . jk30ad) (id->real-label . jk30ac) (same-marks? . jk30ab) (same-marks*? . jk30aa) (disasm . jk3087) (make-parameter . jk59f) (socket-port . jk3086) (socket-shutdown . jk3085) (socket-close . jk3084) (socket-send . jk3083) (socket-recv! . jk3082) (socket-recv . jk3081) (make-server-socket . jk3080) (make-client-socket . jk307f) (socket-accept . jk307e) (socket? . jk307d) (parameterize . jk2e16)) '() values values '#f '#f '#f '#f)))
(begin (set! jk2c82@ref (unspecified)) (set! jk2c84@x* (unspecified)) (set! jk2c86@add-library-path! (unspecified)) (set! jk2c88@parse-and-add-library-path (unspecified)) (set! jk2c8a@for-each-with-index (unspecified)) (set! jk2c8c@rpad (unspecified)) (set! jk2c8e@condition-printer (unspecified)) (set! jk2c90@record->field-alist (unspecified)) (set! jk2c92@map-with-index (unspecified)) (set! jk2c94@repl (unspecified)) (set! jk2c96@trace-printer (unspecified)) (set! jk2c98@command-line (unspecified)) (set! jk2c9a@local-library-path (unspecified)) (set! jk2c9c@load/args (unspecified)) (set! jk2c9e@load (unspecified)) (set! jk2ca0@ironscheme-build (unspecified)) (set! jk2ca2@eval-top-level (unspecified)) (set! jk2ca4@compile-system-libraries (unspecified)) (set! jk2ca6@compile (unspecified)) (set! jk2ca8@compile->closure (unspecified)) (set! jk2caa@pre-compile-r6rs-file (unspecified)) (set! jk2cac@load-r6rs-top-level (unspecified)) (set! jk2cae@load-r6rs-top-level-sexp (unspecified)) (set! jk2cb0@prefix-inc (unspecified)) (set! jk2cb2@prefix-inc! (unspecified)) (set! jk2c82@ref (lambda (jk2ced@rtd jk2cee@i jk2cef@x) (let ((jk2cf3@val ((record-accessor jk2ced@rtd jk2cee@i) jk2cef@x))) (if (symbol? jk2cf3@val) (ungensym jk2cf3@val) jk2cf3@val)))) (set! jk2de5@jk2c82@ref jk2c82@ref) (set! jk2c84@x* '()) (set! jk2de6@jk2c84@x* jk2c84@x*) (set! jk2c86@add-library-path! (lambda (jk2cf5@path) (jk97b@jk7b7@library-path (append (jk97b@jk7b7@library-path) (list jk2cf5@path))))) (set! jk2de7@jk2c86@add-library-path! jk2c86@add-library-path!) (set! jk2c88@parse-and-add-library-path (lambda (jk2cf7@paths jk2cf8@message) (let ((jk2cfc@separator '#f)) (begin (set! jk2cfc@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((jk2cfd@t jk2cf7@paths)) (if jk2cfd@t ((lambda (jk2cff@paths) (for-each (lambda (jk2d01@path) (if (file-exists? jk2d01@path) (jk2c86@add-library-path! (expand-path jk2d01@path)) (format (current-error-port) jk2cf8@message jk2d01@path))) (string-split jk2cff@paths jk2cfc@separator))) jk2cfd@t) (void))))))) (set! jk2de8@jk2c88@parse-and-add-library-path jk2c88@parse-and-add-library-path) (set! jk2c8a@for-each-with-index (lambda (jk2d03@proc jk2d04@lst) (letrec ((jk2d07@loop (lambda (jk2d09@i jk2d0a@lst) (if (null? jk2d0a@lst) (if '#f '#f (void)) (begin (jk2d03@proc jk2d09@i (car jk2d0a@lst)) (jk2d07@loop (+ jk2d09@i '1) (cdr jk2d0a@lst))))))) (jk2d07@loop '1 jk2d04@lst)))) (set! jk2de9@jk2c8a@for-each-with-index jk2c8a@for-each-with-index) (set! jk2c8c@rpad (lambda (jk2d0d@str jk2d0e@pad jk2d0f@n) (let ((jk2d13@rest (- jk2d0f@n (string-length (format '"~a" jk2d0d@str))))) (let jk2d19@loop ((jk2d15@rest jk2d13@rest) (jk2d16@ret (format '"~a" jk2d0d@str))) (if (<= jk2d15@rest '0) jk2d16@ret (jk2d19@loop (- jk2d15@rest '1) (string-append jk2d16@ret jk2d0e@pad))))))) (set! jk2dea@jk2c8c@rpad jk2c8c@rpad) (set! jk2c8e@condition-printer (lambda (jk2d1b@e jk2d1c@port) (let ((jk2d20@max-condition-len '#f)) (begin (set! jk2d20@max-condition-len (apply max (map (lambda (jk2d31@c) (string-length (symbol->string (record-type-name (record-rtd jk2d31@c))))) (simple-conditions jk2d1b@e)))) (begin (display '" Condition components:\n" jk2d1c@port) (jk2c8a@for-each-with-index (lambda (jk2d21@i jk2d22@x) (let ((jk2d25@rtd (record-rtd jk2d22@x)) (jk2d26@fields-alist (jk2c90@record->field-alist jk2d22@x))) (begin (format jk2d1c@port '" ~d. ~a" jk2d21@i (jk2c8c@rpad (symbol->string (record-type-name jk2d25@rtd)) '" " jk2d20@max-condition-len)) (if (null? jk2d26@fields-alist) (newline jk2d1c@port) (void)) (let jk2d2d@loop ((jk2d29@first '#t) (jk2d2a@fields-alist jk2d26@fields-alist)) (if (null? jk2d2a@fields-alist) '() (let ((jk2d2f@field (car jk2d2a@fields-alist))) (begin (if (not jk2d29@first) (display (jk2c8c@rpad '"" '" " (+ '4 jk2d20@max-condition-len)) jk2d1c@port) (void)) (display '"       " jk2d1c@port) (display (car jk2d2f@field) jk2d1c@port) (display '": " jk2d1c@port) (write (cdr jk2d2f@field) jk2d1c@port) (newline jk2d1c@port) (jk2d2d@loop '#f (cdr jk2d2a@fields-alist))))))))) (simple-conditions jk2d1b@e))))))) (set! jk2deb@jk2c8e@condition-printer jk2c8e@condition-printer) (set! jk2c90@record->field-alist (lambda (jk2d33@r) (let ((jk2d36@ref '#f)) (begin (set! jk2d36@ref (lambda (jk2d41@rtd jk2d42@i jk2d43@x) (let ((jk2d47@val ((record-accessor jk2d41@rtd jk2d42@i) jk2d43@x))) (if (symbol? jk2d47@val) (ungensym jk2d47@val) jk2d47@val)))) (let jk2d3b@loop ((jk2d37@ret '()) (jk2d38@rtd (record-rtd jk2d33@r))) (if jk2d38@rtd (jk2d3b@loop (append jk2d37@ret (jk2c92@map-with-index (lambda (jk2d3d@i jk2d3e@field) (cons jk2d3e@field (jk2d36@ref jk2d38@rtd jk2d3d@i jk2d33@r))) (vector->list (record-type-field-names jk2d38@rtd)))) (record-type-parent jk2d38@rtd)) jk2d37@ret)))))) (set! jk2dec@jk2c90@record->field-alist jk2c90@record->field-alist) (set! jk2c92@map-with-index (lambda (jk2d49@proc jk2d4a@lst) (let jk2d53@loop ((jk2d4d@i '0) (jk2d4e@lst jk2d4a@lst) (jk2d4f@ret '())) (if (null? jk2d4e@lst) (reverse jk2d4f@ret) (jk2d53@loop (+ jk2d4d@i '1) (cdr jk2d4e@lst) (cons (jk2d49@proc jk2d4d@i (car jk2d4e@lst)) jk2d4f@ret)))))) (set! jk2ded@jk2c92@map-with-index jk2c92@map-with-index) (set! jk2c94@repl (lambda jk2d55@x (let ((jk2d58@rec '#f)) (begin (set! jk2d58@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (jk2d5b@jk2d59) (lambda () (with-exception-handler (lambda (jk2d5d@e) ((call/cc (lambda (jk2d5f@jk2d5a) (jk2d5b@jk2d59 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? jk2d5d@e) (jk2c8e@condition-printer jk2d5d@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" jk2d5d@e))) (jk2d5f@jk2d5a (lambda () (raise-continuable jk2d5d@e)))))))))) (lambda () (let jk2d65@loop ((jk2d61@line (get-line (current-input-port))) (jk2d62@accum '"")) (let ((jk2d68@parentheses-ok? '#f) (jk2d6a@eval-string-print '#f)) (begin (set! jk2d68@parentheses-ok? (lambda (jk2d6f@text) (let jk2d77@loop ((jk2d71@chars (string->list jk2d6f@text)) (jk2d72@p0 '0) (jk2d73@p1 '0)) (if (null? jk2d71@chars) (= '0 jk2d72@p0 jk2d73@p1) (let ((jk2d79@t (car jk2d71@chars))) (if (memv jk2d79@t '(#\()) (jk2d77@loop (cdr jk2d71@chars) (+ jk2d72@p0 '1) jk2d73@p1) (if (memv jk2d79@t '(#\))) (jk2d77@loop (cdr jk2d71@chars) (- jk2d72@p0 '1) jk2d73@p1) (if (memv jk2d79@t '(#\[)) (jk2d77@loop (cdr jk2d71@chars) jk2d72@p0 (+ jk2d73@p1 '1)) (if (memv jk2d79@t '(#\])) (jk2d77@loop (cdr jk2d71@chars) jk2d72@p0 (- jk2d73@p1 '1)) (jk2d77@loop (cdr jk2d71@chars) jk2d72@p0 jk2d73@p1)))))))))) (set! jk2d6a@eval-string-print (lambda (jk2d6d@text) (if (not (or (string=? '"\n" jk2d6d@text) (= '0 (string-length jk2d6d@text)))) (write (jk2ca2@eval-top-level (call-with-port (open-string-input-port jk2d6d@text) read))) (void)))) (if (eof-object? jk2d61@line) (begin (jk2d6a@eval-string-print jk2d62@accum) (exit)) (let ((jk2d6b@current (string-append jk2d62@accum jk2d61@line))) (if (jk2d68@parentheses-ok? jk2d6b@current) (jk2d6a@eval-string-print jk2d6b@current) (jk2d65@loop (get-line (current-input-port)) jk2d6b@current))))))))))))) (newline) (jk2d58@rec)))) (jk2d58@rec))))) (set! jk2dee@jk2c94@repl jk2c94@repl) (set! jk2c96@trace-printer (jk6c1@jk5a0@make-parameter write)) (set! jk2def@jk2c96@trace-printer jk2c96@trace-printer) (set! jk2c98@command-line (jk6c1@jk5a0@make-parameter (get-command-line))) (set! jk2df0@jk2c98@command-line jk2c98@command-line) (set! jk2c9a@local-library-path (lambda (jk2d7b@filename) (jk97b@jk7b7@library-path))) (set! jk2df1@jk2c9a@local-library-path jk2c9a@local-library-path) (set! jk2c9c@load/args (lambda (jk2d7d@filename . jk2d7f@args) (begin (apply jk2cac@load-r6rs-top-level jk2d7d@filename 'load jk2d7f@args) (void)))) (set! jk2df2@jk2c9c@load/args jk2c9c@load/args) (set! jk2c9e@load (lambda (jk2d81@filename) (begin (apply jk2cac@load-r6rs-top-level jk2d81@filename 'load (jk2c98@command-line)) (void)))) (set! jk2df3@jk2c9e@load jk2c9e@load) (set! jk2ca0@ironscheme-build (lambda () (jk2c9e@load '"ironscheme-buildscript.ss"))) (set! jk2df4@jk2ca0@ironscheme-build jk2ca0@ironscheme-build) (set! jk2ca2@eval-top-level (lambda (jk2d83@x) (jk28a8@jke3e@eval jk2d83@x (jk28bf@jke6c@interaction-environment)))) (set! jk2df5@jk2ca2@eval-top-level jk2ca2@eval-top-level) (set! jk2ca4@compile-system-libraries (lambda () (jk2ca2@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! jk2df6@jk2ca4@compile-system-libraries jk2ca4@compile-system-libraries) (set! jk2ca6@compile (lambda (jk2d85@filename) (jk2cac@load-r6rs-top-level jk2d85@filename 'compile))) (set! jk2df7@jk2ca6@compile jk2ca6@compile) (set! jk2ca8@compile->closure (lambda (jk2d87@filename) (jk2cac@load-r6rs-top-level jk2d87@filename 'closure))) (set! jk2df8@jk2ca8@compile->closure jk2ca8@compile->closure) (set! jk2caa@pre-compile-r6rs-file (lambda (jk2d89@filename) (jk2cac@load-r6rs-top-level jk2d89@filename 'compile))) (set! jk2df9@jk2caa@pre-compile-r6rs-file jk2caa@pre-compile-r6rs-file) (set! jk2cac@load-r6rs-top-level (lambda (jk2d8b@filename jk2d8c@how . jk2d8f@args) (begin (jk97b@jk7b7@library-path (jk2c9a@local-library-path jk2d8b@filename)) (let ((jk2d91@x* (with-input-from-file jk2d8b@filename (lambda () (let jk2d93@f () (let ((jk2d95@x (jk6b4@jk586@read-annotated))) (if (eof-object? jk2d95@x) '() (cons jk2d95@x (jk2d93@f))))))))) (let ((jk2d97@t jk2d8c@how)) (if (memv jk2d97@t '(closure)) (jk28be@jke6a@pre-compile-r6rs-top-level jk2d91@x*) (if (memv jk2d97@t '(load)) (begin (jk2c98@command-line (cons jk2d8b@filename (car jk2d8f@args))) (jk6c2@jk5a2@mosh-cache-dir (create-mosh-cache-dir)) (if (jk6c2@jk5a2@mosh-cache-dir) (gensym-prefix-set! (jk2cb2@prefix-inc! (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jk2d99@file) ((call/cc (lambda (jk2d9d@jk2d9b) (lambda () (with-exception-handler (lambda (jk2d9f@c) ((call/cc (lambda (jk2da1@jk2d9c) (jk2d9d@jk2d9b (lambda () (if '#t '#t (jk2da1@jk2d9c (lambda () (raise-continuable jk2d9f@c)))))))))) (lambda () (delete-file (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/" jk2d99@file))))))))) (directory-list (jk6c2@jk5a2@mosh-cache-dir))) (void)) (let ((jk2da3@compiled (jk28bd@jke68@compile-r6rs-top-level jk2d91@x*))) (begin (if (and (jk6c2@jk5a2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jk97f@jk7bf@serialize-all jk6bc@jk596@serialize-library jk718@jk6d1@compile-core-expr) (void)) (jk2da3@compiled)))) (if (memv jk2d97@t '(compile)) (begin (jk28bd@jke68@compile-r6rs-top-level jk2d91@x*) (jk97f@jk7bf@serialize-all jk6bc@jk596@serialize-library jk718@jk6d1@compile-core-expr)) (if '#f '#f (void)))))))))) (set! jk2dfa@jk2cac@load-r6rs-top-level jk2cac@load-r6rs-top-level) (set! jk2cae@load-r6rs-top-level-sexp (lambda (jk2da5@import-spec jk2da6@thunk) (let ((jk2db1@jk2daa jk97b@jk7b7@library-path) (jk2db2@jk2dac jk6c2@jk5a2@mosh-cache-dir) (jk2db3@jk2dae (jk2c9a@local-library-path '"")) (jk2db4@jk2db0 (create-mosh-cache-dir))) (let ((jk2db9@swap (lambda () (begin (let ((jk2dbb@t (jk2db1@jk2daa))) (begin (jk2db1@jk2daa jk2db3@jk2dae) (set! jk2db3@jk2dae jk2dbb@t))) (let ((jk2dbd@t (jk2db2@jk2dac))) (begin (jk2db2@jk2dac jk2db4@jk2db0) (set! jk2db4@jk2db0 jk2dbd@t))))))) (dynamic-wind jk2db9@swap (lambda () (begin (if (jk6c2@jk5a2@mosh-cache-dir) (gensym-prefix-set! (jk2cb2@prefix-inc! (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((jk2dc3@jk2dc0 jk2c98@command-line) (jk2dc4@jk2dc2 '())) (let ((jk2dc7@swap (lambda () (let ((jk2dc9@t (jk2dc3@jk2dc0))) (begin (jk2dc3@jk2dc0 jk2dc4@jk2dc2) (set! jk2dc4@jk2dc2 jk2dc9@t)))))) (dynamic-wind jk2dc7@swap (lambda () ((jk28bd@jke68@compile-r6rs-top-level (list (cons 'import jk2da5@import-spec) (list jk2da6@thunk))))) jk2dc7@swap))))) jk2db9@swap))))) (set! jk2dfb@jk2cae@load-r6rs-top-level-sexp jk2cae@load-r6rs-top-level-sexp) (set! jk2cb0@prefix-inc (lambda (jk2dcb@prefix-string) (let ((jk2dcd@prefix (symbol->string jk2dcb@prefix-string))) (let ((jk2dcf@len (string-length jk2dcd@prefix))) (let jk2dd7@loop ((jk2dd1@i (- jk2dcf@len '1)) (jk2dd2@carry? '#t) (jk2dd3@accum '())) (if (< jk2dd1@i '0) (string->symbol (list->string (if jk2dd2@carry? (cons '#\a jk2dd3@accum) jk2dd3@accum))) (if jk2dd2@carry? (let ((jk2dd9@next-integer (+ '1 (char->integer (string-ref jk2dcd@prefix jk2dd1@i))))) (if (= jk2dd9@next-integer '123) (jk2dd7@loop (- jk2dd1@i '1) '#f (cons '#\A jk2dd3@accum)) (if (= jk2dd9@next-integer '91) (jk2dd7@loop (- jk2dd1@i '1) '#t (cons '#\a jk2dd3@accum)) (jk2dd7@loop (- jk2dd1@i '1) '#f (cons (integer->char jk2dd9@next-integer) jk2dd3@accum))))) (jk2dd7@loop (- jk2dd1@i '1) '#f (cons (string-ref jk2dcd@prefix jk2dd1@i) jk2dd3@accum))))))))) (set! jk2dfc@jk2cb0@prefix-inc jk2cb0@prefix-inc) (set! jk2cb2@prefix-inc! (lambda (jk2ddb@file) (begin (if (not (file-exists? jk2ddb@file)) (call-with-output-file jk2ddb@file (lambda (jk2ddd@port) (write 'd jk2ddd@port))) (void)) (let ((jk2ddf@prefix (call-with-input-file jk2ddb@file read))) (let ((jk2de1@next-prefix (jk2cb0@prefix-inc jk2ddf@prefix))) (begin (call-with-port (open-file-output-port jk2ddb@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (jk2de3@port) (write jk2de1@next-prefix jk2de3@port))) jk2ddf@prefix)))))) (set! jk2dfd@jk2cb2@prefix-inc! jk2cb2@prefix-inc!) (begin (jk980@jk7c1@current-precompiled-library-loader jk6bd@jk598@load-serialized-library) (set-symbol-value! 'load jk2c9e@load) (set-symbol-value! 'pre-compile-r6rs-file jk2caa@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs jk2ca2@eval-top-level) (set-symbol-value! 'int-env-syms jk289f@jke2c@interaction-environment-symbols) (set-symbol-value! 'expanded2core jk717@jk6cf@expanded->core) (set-symbol-value! 'trace-printer jk2c96@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (jk2cb3@c) (condition (jk2bdf@jk29e9@make-non-continuable-violation) (jk2bd5@jk29d0@make-who-condition 'raise) (jk2b99@jk2931@make-message-condition '"returned from non-continuable exception") (jk2bcb@jk29b5@make-irritants-condition (list jk2cb3@c))))) (jk2c88@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (jk2c88@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (jk2c86@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (jk2c86@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (jk2c86@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((jk2cb5@prefix (lambda (jk2cb7@ext jk2cb8@ls) (append (map (lambda (jk2cbb@x) (string-append jk2cb7@ext jk2cbb@x)) jk2cb8@ls) jk2cb8@ls)))) (jk97c@jk7b9@library-extensions (jk2cb5@prefix '".mosh" (jk97c@jk7b9@library-extensions)))) (current-exception-handler (lambda (jk2cbd@c) (if (condition? jk2cbd@c) (jk2c8e@condition-printer jk2cbd@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" jk2cbd@c)))) (if ((call/cc (lambda (jk2cc1@jk2cbf) (lambda () (with-exception-handler (lambda (jk2cc3@c) ((call/cc (lambda (jk2cc5@jk2cc0) (jk2cc1@jk2cbf (lambda () (if '#t '#f (jk2cc5@jk2cc0 (lambda () (raise-continuable jk2cc3@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (jk2cae@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (jk2c98@command-line)) (let ((jk2ccf@jk2cc8 jk2c98@command-line) (jk2cd0@jk2cca jk6c2@jk5a2@mosh-cache-dir) (jk2cd1@jk2ccc '()) (jk2cd2@jk2cce (create-mosh-cache-dir))) (let ((jk2cd7@swap (lambda () (begin (let ((jk2cd9@t (jk2ccf@jk2cc8))) (begin (jk2ccf@jk2cc8 jk2cd1@jk2ccc) (set! jk2cd1@jk2ccc jk2cd9@t))) (let ((jk2cdb@t (jk2cd0@jk2cca))) (begin (jk2cd0@jk2cca jk2cd2@jk2cce) (set! jk2cd2@jk2cce jk2cdb@t))))))) (dynamic-wind jk2cd7@swap (lambda () (begin (if (jk6c2@jk5a2@mosh-cache-dir) (gensym-prefix-set! (jk2cb2@prefix-inc! (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (jk2c94@repl))) jk2cd7@swap))) (begin (jk97b@jk7b7@library-path (jk2c9a@local-library-path (car (jk2c98@command-line)))) (set! jk2c84@x* (with-input-from-file (car (jk2c98@command-line)) (lambda () (let jk2cdd@f () (let ((jk2cdf@x (jk6b4@jk586@read-annotated))) (if (eof-object? jk2cdf@x) '() (cons jk2cdf@x (jk2cdd@f)))))))) (jk2c98@command-line (cons (car (jk2c98@command-line)) (cdr (jk2c98@command-line)))) (jk6c2@jk5a2@mosh-cache-dir (create-mosh-cache-dir)) (if (jk6c2@jk5a2@mosh-cache-dir) (gensym-prefix-set! (jk2cb2@prefix-inc! (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jk2ce1@file) ((call/cc (lambda (jk2ce5@jk2ce3) (lambda () (with-exception-handler (lambda (jk2ce7@c) ((call/cc (lambda (jk2ce9@jk2ce4) (jk2ce5@jk2ce3 (lambda () (if '#t '#t (jk2ce9@jk2ce4 (lambda () (raise-continuable jk2ce7@c)))))))))) (lambda () (delete-file (string-append (jk6c2@jk5a2@mosh-cache-dir) '"/" jk2ce1@file))))))))) (directory-list (jk6c2@jk5a2@mosh-cache-dir))) (void)) (let ((jk2ceb@compiled (jk28bd@jke68@compile-r6rs-top-level jk2c84@x*))) (begin (if (and (jk6c2@jk5a2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jk97f@jk7bf@serialize-all jk6bc@jk596@serialize-library jk718@jk6d1@compile-core-expr) (void)) (jk2ceb@compiled))))))))
