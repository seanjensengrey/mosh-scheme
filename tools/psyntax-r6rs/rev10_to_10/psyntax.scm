;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (y2765@read-annotated y2767@annotation-stripped y2769@annotation? y276b@annotation-source y276d@annotation-expression y276f@scm->fasl y2771@fasl-save y2773@fasl-load y2775@serialize-library y2777@load-serialized-library y2779@make-record-printer y277b@compile-core y277d@read-library-source-file y277f@make-parameter y27e7@file-options-spec) (begin (set! y2765@read-annotated read) (set! y2767@annotation-stripped (lambda (y27e8@x) (y276d@annotation-expression y27e8@x))) (set! y2769@annotation? (lambda (y27ea@x) (source-info y27ea@x))) (set! y276b@annotation-source (lambda (y27ec@x) (source-info y27ec@x))) (set! y276d@annotation-expression (lambda (y27ee@x) (if (pair? y27ee@x) (cons (car y27ee@x) (cdr y27ee@x)) (display '"line:46\n")))) (set! y276f@scm->fasl (lambda (y27f0@filename) (string-append y27f0@filename '".fasl"))) (set! y2771@fasl-save (lambda (y27f2@filename y27f3@obj) (call-with-port (open-file-output-port y27f2@filename) (lambda (y27f6@port) ((symbol-value 'fasl-write!) y27f3@obj y27f6@port))))) (set! y2773@fasl-load (lambda (y27f8@filename) (call-with-port (open-file-input-port y27f8@filename) (symbol-value 'fasl-read!)))) (set! y2775@serialize-library (lambda (y27fa@filename y27fb@obj) (begin (format '#t '"serialize-library ~a\n..." y27fa@filename) ((lambda (y27fe@expanded2core) ((lambda (y2800@compile) ((lambda (y2802@code) ((lambda (y2804@pivot) ((lambda (y2806@visit) ((lambda () (begin (set-car! y2804@pivot y2806@visit) ((lambda (y2808@pivot) ((lambda (y280a@invoke) ((lambda () (set-car! y2808@pivot y280a@invoke)))) (y2800@compile (y27fe@expanded2core (car y2808@pivot))))) (cdr y2804@pivot)))))) (y2800@compile (y27fe@expanded2core (car y2804@pivot))))) (cddddr (cddddr y2802@code)))) y27fb@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (y280c@fasl-file) (begin (if (file-exists? y280c@fasl-file) (delete-file y280c@fasl-file) (void)) ((call/cc (lambda (y2810@y280e) (lambda () (with-exception-handler (lambda (y2812@c) ((call/cc (lambda (y2814@y280f) (y2810@y280e (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " y27fa@filename) (if (file-exists? y280c@fasl-file) (delete-file y280c@fasl-file) (void)) '#f) (y2814@y280f (lambda () (raise-continuable y2812@c)))))))))) (lambda () (begin (y2771@fasl-save y280c@fasl-file y27fb@obj) (display '"OK\n")))))))))) (y276f@scm->fasl y27fa@filename))))) (set! y2777@load-serialized-library (lambda (y2816@filename y2817@obj) ((lambda (y281a@fasl-file) (if (and (file-exists? y281a@fasl-file) ((symbol-value 'file-newer?) y281a@fasl-file y2816@filename)) ((lambda (y281c@expanded2core) ((lambda (y281e@eval-compiled-core) ((lambda (y2820@code) ((lambda (y2822@pivot) ((lambda (y2824@visit) ((lambda (y2826@visit-proc) ((lambda () (begin (set-car! y2822@pivot y2826@visit-proc) ((lambda (y2828@pivot) ((lambda (y282a@invoke) ((lambda () (begin (set-car! y2828@pivot (lambda () (y281e@eval-compiled-core y282a@invoke))) (apply y2817@obj y2820@code))))) (car y2828@pivot))) (cdr y2822@pivot)) '#t)))) (lambda () (y281e@eval-compiled-core y2824@visit)))) (car y2822@pivot))) (cddddr (cddddr y2820@code)))) (y2773@fasl-load y281a@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (y276f@scm->fasl y2816@filename)))) (set! y2779@make-record-printer (lambda (y282c@name y282d@printer) (lambda y2830@x (begin (display '"record printer") (for-each display y2830@x))))) (set! y277b@compile-core (lambda y2832@x (apply error 'comile-core '"not implementated" y2832@x))) (set! y277d@read-library-source-file (lambda (y2834@file-name) (with-input-from-file y2834@file-name y2765@read-annotated))) (set! y277f@make-parameter (lambda y2844 ((lambda (y2845) (if (= y2845 '1) (apply (lambda (y2836@x) (y277f@make-parameter y2836@x (lambda (y2838@x) y2838@x))) y2844) (if (= y2845 '2) (apply (lambda (y283a@x y283b@fender) ((lambda (y283e@x) (lambda y2842 ((lambda (y2843) (if (= y2843 '0) (apply (lambda () y283e@x) y2842) (if (= y2843 '1) (apply (lambda (y2840@v) (set! y283e@x (y283b@fender y2840@v))) y2842) (error 'apply '"invalid arg count")))) (length y2842)))) (y283b@fender y283a@x))) y2844) (error 'apply '"invalid arg count")))) (length y2844)))) (set! y27e7@file-options-spec (lambda (y2846@x) y2846@x)) (begin (set! y2856@y27e7@file-options-spec y27e7@file-options-spec) (set! y2855@y277f@make-parameter y277f@make-parameter) (set! y2854@y277d@read-library-source-file y277d@read-library-source-file) (set! y2853@y277b@compile-core y277b@compile-core) (set! y2852@y2779@make-record-printer y2779@make-record-printer) (set! y2851@y2777@load-serialized-library y2777@load-serialized-library) (set! y2850@y2775@serialize-library y2775@serialize-library) (set! y284f@y2773@fasl-load y2773@fasl-load) (set! y284e@y2771@fasl-save y2771@fasl-save) (set! y284d@y276f@scm->fasl y276f@scm->fasl) (set! y284c@y276d@annotation-expression y276d@annotation-expression) (set! y284b@y276b@annotation-source y276b@annotation-source) (set! y284a@y2769@annotation? y2769@annotation?) (set! y2849@y2767@annotation-stripped y2767@annotation-stripped) (set! y2848@y2765@read-annotated y2765@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y285b@current-primitive-locations y285d@mutable? y285f@rewriter y2861@expanded->core y2863@compile-core-expr y2865@pretty-print y2867@compile-core-expr-to-port) (begin (set! y285b@current-primitive-locations (y2855@y277f@make-parameter (lambda (y2868@x) '#f) (lambda (y286a@p) y286a@p))) (set! y285d@mutable? (lambda (y286c@x) (or (pair? y286c@x) (vector? y286c@x) (hashtable? y286c@x)))) (set! y285f@rewriter (lambda (y286e@quote-hack?) ((lambda (y2871@f) (begin (set! y2871@f (lambda (y2872@x) (if (pair? y2872@x) ((lambda (y2874@t) (if (memv y2874@t '(quote)) (if (and y286e@quote-hack? (y285d@mutable? (cadr y2872@x))) ((lambda (y2876@g) (begin (set-symbol-value! y2876@g (cadr y2872@x)) y2876@g)) (gensym)) y2872@x) (if (memv y2874@t '(case-lambda)) (cons 'case-lambda (map (lambda (y2878@x) (cons (car y2878@x) (map y2871@f (cdr y2878@x)))) (cdr y2872@x))) (if (memv y2874@t '(lambda)) (cons* 'lambda (cadr y2872@x) (map y2871@f (cddr y2872@x))) (if (memv y2874@t '(letrec)) ((lambda (y287a@bindings y287b@body*) ((lambda (y287e@lhs* y287f@rhs*) (cons* 'letrec (map list y287e@lhs* (map y2871@f y287f@rhs*)) (map y2871@f y287b@body*))) (map car y287a@bindings) (map cadr y287a@bindings))) (cadr y2872@x) (cddr y2872@x)) (if (memv y2874@t '(letrec*)) ((lambda (y2882@bindings y2883@body*) ((lambda (y2886@lhs* y2887@rhs*) (cons* 'letrec* (map list y2886@lhs* (map y2871@f y2887@rhs*)) (map y2871@f y2883@body*))) (map car y2882@bindings) (map cadr y2882@bindings))) (cadr y2872@x) (cddr y2872@x)) (if (memv y2874@t '(library-letrec*)) ((lambda (y288a@name y288b@x) ((lambda (y288e@bindings y288f@body*) ((lambda (y2892@lhs* y2893@lhs** y2894@rhs*) (cons* 'library-letrec* y288a@name (map list y2892@lhs* y2893@lhs** (map y2871@f y2894@rhs*)) (map y2871@f y288f@body*))) (map car y288e@bindings) (map cadr y288e@bindings) (map caddr y288e@bindings))) (cadr y288b@x) (cddr y288b@x))) (cadr y2872@x) (cdr y2872@x)) (if (memv y2874@t '(begin)) (cons 'begin (map y2871@f (cdr y2872@x))) (if (memv y2874@t '(set!)) (list 'set! (cadr y2872@x) (y2871@f (caddr y2872@x))) (if (memv y2874@t '(primitive)) ((lambda (y2898@op) ((lambda (y289a@t) (if y289a@t ((lambda (y289c@loc) y289c@loc) y289a@t) y2898@op)) ((y285b@current-primitive-locations) y2898@op))) (cadr y2872@x)) (if (memv y2874@t '(define)) y2872@x (if (list? y2872@x) (map y2871@f y2872@x) (error 'rewrite '"invalid form ~s ~s" y2872@x (list? y2872@x)))))))))))))) (car y2872@x)) y2872@x))) y2871@f)) '#f))) (set! y2861@expanded->core (lambda (y289e@x) ((y285f@rewriter '#f) y289e@x))) (set! y2863@compile-core-expr (lambda (y28a0@x) ((y285f@rewriter '#f) y28a0@x))) (set! y2865@pretty-print write) (set! y2867@compile-core-expr-to-port (lambda (y28a2@x y28a3@p) (y2865@pretty-print ((y285f@rewriter '#f) y28a2@x) y28a3@p))) (begin (set! y28ac@y2867@compile-core-expr-to-port y2867@compile-core-expr-to-port) (set! y28ab@y2865@pretty-print y2865@pretty-print) (set! y28aa@y2863@compile-core-expr y2863@compile-core-expr) (set! y28a9@y2861@expanded->core y2861@expanded->core) (set! y28a8@y285f@rewriter y285f@rewriter) (set! y28a7@y285d@mutable? y285d@mutable?) (set! y28a6@y285b@current-primitive-locations y285b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (y28fb@make-collection y28fd@current-library-collection y2903@y28fe y2905@y2900 y2907@y28ff y290a@library? y290c@make-library y290e@library-id y2910@library-name y2912@library-version y2914@library-imp* y2916@library-vis* y2918@library-inv* y291a@library-subst y291c@library-env y291e@library-visit-state y2920@library-invoke-state y2922@library-visit-code y2924@library-invoke-code y2926@library-visible? y2928@library-source-file-name y292a@set-library-id! y292c@set-library-name! y292e@set-library-version! y2930@set-library-imp*! y2932@set-library-vis*! y2934@set-library-inv*! y2936@set-library-subst! y2938@set-library-env! y293a@set-library-visit-state! y293c@set-library-invoke-state! y293e@set-library-visit-code! y2940@set-library-invoke-code! y2942@set-library-visible?! y2944@set-library-source-file-name! y2946@rp y2948@find-dependencies y294a@find-library-by y294c@library-path y294e@library-extensions y2950@library-name->file-name y2952@file-locator y2954@serialize-all y2956@current-precompiled-library-loader y2958@try-load-from-file y295a@library-loader y295c@current-library-expander y295e@external-pending-libraries y2960@find-external-library y2962@find-library-by-name y2964@library-exists? y2966@find-library-by-spec/die y2968@label->binding-table y296a@install-library-record y296c@install-library y296e@imported-label->binding y2970@invoke-library y2972@visit-library y2974@invoke-library-by-spec y2976@installed-libraries y2978@library-spec) (begin (set! y28fb@make-collection (lambda () ((lambda (y2979@set) ((lambda (y297c@set-cons) (begin (set! y297c@set-cons (lambda (y2981@x y2982@ls) (if (memq y2981@x y2982@ls) y2982@ls (cons y2981@x y2982@ls)))) (lambda y297f ((lambda (y2980) (if (= y2980 '0) (apply (lambda () y2979@set) y297f) (if (= y2980 '1) (apply (lambda (y297d@x) (set! y2979@set (y297c@set-cons y297d@x y2979@set))) y297f) (error 'apply '"invalid arg count")))) (length y297f))))) '#f)) '()))) (set! y28fd@current-library-collection (y2855@y277f@make-parameter (y28fb@make-collection) (lambda (y2985@x) (begin (if (not (procedure? y2985@x)) (assertion-violation 'current-library-collection '"not a procedure" y2985@x) (void)) y2985@x)))) (set! y2903@y28fe (make-record-type-descriptor 'library '#f 'y2901 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! y2905@y2900 '#f) (set! y2907@y28ff (make-record-constructor-descriptor y2903@y28fe '#f y2905@y2900)) (set! y290a@library? (record-predicate y2903@y28fe)) (set! y290c@make-library (record-constructor y2907@y28ff)) (set! y290e@library-id (record-accessor y2903@y28fe '0)) (set! y2910@library-name (record-accessor y2903@y28fe '1)) (set! y2912@library-version (record-accessor y2903@y28fe '2)) (set! y2914@library-imp* (record-accessor y2903@y28fe '3)) (set! y2916@library-vis* (record-accessor y2903@y28fe '4)) (set! y2918@library-inv* (record-accessor y2903@y28fe '5)) (set! y291a@library-subst (record-accessor y2903@y28fe '6)) (set! y291c@library-env (record-accessor y2903@y28fe '7)) (set! y291e@library-visit-state (record-accessor y2903@y28fe '8)) (set! y2920@library-invoke-state (record-accessor y2903@y28fe '9)) (set! y2922@library-visit-code (record-accessor y2903@y28fe '10)) (set! y2924@library-invoke-code (record-accessor y2903@y28fe '11)) (set! y2926@library-visible? (record-accessor y2903@y28fe '12)) (set! y2928@library-source-file-name (record-accessor y2903@y28fe '13)) (set! y292a@set-library-id! (record-mutator y2903@y28fe '0)) (set! y292c@set-library-name! (record-mutator y2903@y28fe '1)) (set! y292e@set-library-version! (record-mutator y2903@y28fe '2)) (set! y2930@set-library-imp*! (record-mutator y2903@y28fe '3)) (set! y2932@set-library-vis*! (record-mutator y2903@y28fe '4)) (set! y2934@set-library-inv*! (record-mutator y2903@y28fe '5)) (set! y2936@set-library-subst! (record-mutator y2903@y28fe '6)) (set! y2938@set-library-env! (record-mutator y2903@y28fe '7)) (set! y293a@set-library-visit-state! (record-mutator y2903@y28fe '8)) (set! y293c@set-library-invoke-state! (record-mutator y2903@y28fe '9)) (set! y293e@set-library-visit-code! (record-mutator y2903@y28fe '10)) (set! y2940@set-library-invoke-code! (record-mutator y2903@y28fe '11)) (set! y2942@set-library-visible?! (record-mutator y2903@y28fe '12)) (set! y2944@set-library-source-file-name! (record-mutator y2903@y28fe '13)) (set! y2946@rp (y2852@y2779@make-record-printer 'library (lambda (y2987@x y2988@p y2989@wr) (begin (if (not (y290a@library? y2987@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (y2912@library-version y2987@x)) (y2910@library-name y2987@x) (append (y2910@library-name y2987@x) (list (y2912@library-version y2987@x))))) y2988@p))))) (set! y2948@find-dependencies (lambda (y298d@ls) (if (null? y298d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! y294a@find-library-by (lambda (y298f@pred) ((letrec ((y2991@f (lambda (y2993@ls) (if (null? y2993@ls) '#f (if (y298f@pred (car y2993@ls)) (car y2993@ls) (y2991@f (cdr y2993@ls))))))) y2991@f) ((y28fd@current-library-collection))))) (set! y294c@library-path (y2855@y277f@make-parameter '(".") (lambda (y2995@x) (if (and (list? y2995@x) (for-all string? y2995@x)) (map (lambda (y2997@x) y2997@x) y2995@x) (assertion-violation 'library-path '"not a list of strings" y2995@x))))) (set! y294e@library-extensions (y2855@y277f@make-parameter '(".sls" ".ss" ".scm") (lambda (y2999@x) (if (and (list? y2999@x) (for-all string? y2999@x)) (map (lambda (y299b@x) y299b@x) y2999@x) (assertion-violation 'library-extensions '"not a list of strings" y2999@x))))) (set! y2950@library-name->file-name (lambda (y299d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (y29a3@y29a0 y29a4@y29a2) ((lambda (y29a7@extract y29a8@p) ((lambda (y29ac@display-hex) (begin (set! y29ac@display-hex (lambda (y29b5@n) (if (<= '0 y29b5@n '9) (display y29b5@n y29a8@p) (display (integer->char (+ (char->integer '#\a) (- y29b5@n '10))) y29a8@p)))) (begin ((letrec ((y29ad@f (lambda (y29af@ls) (if (not (null? y29af@ls)) (begin (display '"/" y29a8@p) (for-each (lambda (y29b1@c) (if (or (char<=? '#\a y29b1@c '#\z) (char<=? '#\A y29b1@c '#\Z) (char<=? '#\0 y29b1@c '#\9) (memv y29b1@c '(#\- #\. #\_ #\~))) (display y29b1@c y29a8@p) (begin (display '"%" y29a8@p) ((lambda (y29b3@n) (begin (y29ac@display-hex (quotient y29b3@n '16)) (y29ac@display-hex (remainder y29b3@n '16)))) (char->integer y29b1@c))))) (string->list (symbol->string (car y29af@ls)))) (y29ad@f (cdr y29af@ls))) (void))))) y29ad@f) y299d@x) (y29a7@extract)))) '#f)) y29a4@y29a2 y29a3@y29a0))))) (set! y2952@file-locator (y2855@y277f@make-parameter (lambda (y29b7@x) ((lambda (y29b9@str) ((letrec ((y29bb@f (lambda (y29bd@ls y29be@exts y29bf@failed-list) (if (null? y29bd@ls) ((lambda () ((lambda (y29cb@y29c6 y29cd@y29c8 y29cf@y29c7 y29d2@y29c5 y29d4@make-library-resolution-condition y29d6@y29c3 y29d8@y29c4 y29da@library-resolution-condition? y29dc@condition-library y29de@condition-files) (begin (set! y29cb@y29c6 (make-record-type-descriptor '&library-resolution y4c6c@y49b3@&condition-rtd 'y29c9 '#f '#f '#((immutable library) (immutable files)))) (set! y29cd@y29c8 '#f) (set! y29cf@y29c7 (make-record-constructor-descriptor y29cb@y29c6 y4c6d@y49b5@&condition-rcd y29cd@y29c8)) (set! y29d2@y29c5 (record-predicate y29cb@y29c6)) (set! y29d4@make-library-resolution-condition (record-constructor y29cf@y29c7)) (set! y29d6@y29c3 (record-accessor y29cb@y29c6 '0)) (set! y29d8@y29c4 (record-accessor y29cb@y29c6 '1)) (set! y29da@library-resolution-condition? (condition-predicate y29cb@y29c6)) (set! y29dc@condition-library (condition-accessor y29cb@y29c6 y29d6@y29c3)) (set! y29de@condition-files (condition-accessor y29cb@y29c6 y29d8@y29c4)) (raise (condition (y4c8c@y4a4d@make-error) (y4cae@y4aa9@make-who-condition 'expander) (y4c72@y4a0a@make-message-condition '"cannot locate library in library-path") (y29d4@make-library-resolution-condition y29b7@x (reverse y29bf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? y29be@exts) (y29bb@f (cdr y29bd@ls) (y294e@library-extensions) y29bf@failed-list) ((lambda (y29df@name) (if (file-exists? y29df@name) y29df@name (y29bb@f y29bd@ls (cdr y29be@exts) (cons y29df@name y29bf@failed-list)))) (string-append (car y29bd@ls) y29b9@str (car y29be@exts)))))))) y29bb@f) (y294c@library-path) (y294e@library-extensions) '())) (y2950@library-name->file-name y29b7@x))) (lambda (y29e1@f) (if (procedure? y29e1@f) y29e1@f (assertion-violation 'file-locator '"not a procedure" y29e1@f))))) (set! y2954@serialize-all (lambda (y29e3@serialize y29e4@compile) ((lambda (y29e8@library-desc) (begin (set! y29e8@library-desc (lambda (y29eb@x) (list (y290e@library-id y29eb@x) (y2910@library-name y29eb@x)))) (for-each (lambda (y29e9@x) (if (y2928@library-source-file-name y29e9@x) (y29e3@serialize (y2928@library-source-file-name y29e9@x) (list (y290e@library-id y29e9@x) (y2910@library-name y29e9@x) (y2912@library-version y29e9@x) (map y29e8@library-desc (y2914@library-imp* y29e9@x)) (map y29e8@library-desc (y2916@library-vis* y29e9@x)) (map y29e8@library-desc (y2918@library-inv* y29e9@x)) (y291a@library-subst y29e9@x) (y291c@library-env y29e9@x) (y29e4@compile (y2922@library-visit-code y29e9@x)) (y29e4@compile (y2924@library-invoke-code y29e9@x)) (y2926@library-visible? y29e9@x))) (void))) ((y28fd@current-library-collection))))) '#f))) (set! y2956@current-precompiled-library-loader (y2855@y277f@make-parameter (lambda (y29ed@filename y29ee@sk) '#f))) (set! y2958@try-load-from-file (lambda (y29f1@filename) ((y2956@current-precompiled-library-loader) y29f1@filename (lambda y2a17 ((lambda (y2a18) (if (= y2a18 '11) (apply (lambda (y29f3@id y29f4@name y29f5@ver y29f6@imp* y29f7@vis* y29f8@inv* y29f9@exp-subst y29fa@exp-env y29fb@visit-proc y29fc@invoke-proc y29fd@visible?) ((letrec ((y2a09@f (lambda (y2a0b@deps) (if (null? y2a0b@deps) (begin (y296c@install-library y29f3@id y29f4@name y29f5@ver y29f6@imp* y29f7@vis* y29f8@inv* y29f9@exp-subst y29fa@exp-env y29fb@visit-proc y29fc@invoke-proc '#f '#f y29fd@visible? '#f) '#t) ((lambda (y2a0d@d) ((lambda (y2a0f@label y2a10@dname) ((lambda (y2a13@l) (if (and (y290a@library? y2a13@l) (eq? y2a0f@label (y290e@library-id y2a13@l))) (y2a09@f (cdr y2a0b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" y29f4@name y2a10@dname y29f1@filename y2a13@l y2a0f@label (y290e@library-id y2a13@l)) '#f))) (y2962@find-library-by-name y2a10@dname))) (car y2a0d@d) (cadr y2a0d@d))) (car y2a0b@deps)))))) y2a09@f) (append y29f6@imp* y29f7@vis* y29f8@inv*))) y2a17) (if (>= y2a18 '0) (apply (lambda y2a15@others '#f) y2a17) (error 'apply '"invalid arg count")))) (length y2a17)))))) (set! y295a@library-loader (y2855@y277f@make-parameter (lambda (y2a19@x) ((lambda (y2a1b@file-name) (if (not y2a1b@file-name) (assertion-violation '#f '"cannot file library" y2a19@x) (or (y2958@try-load-from-file y2a1b@file-name) ((y295c@current-library-expander) (y2854@y277d@read-library-source-file y2a1b@file-name) y2a1b@file-name (lambda (y2a1d@name) (if (not (fast-equal? y2a1d@name y2a19@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (y2a23@y2a20 y2a24@y2a22) ((lambda (y2a27@e y2a28@p) (begin (display '"expected to find library " y2a28@p) (write y2a19@x y2a28@p) (display '" in file " y2a28@p) (display y2a1b@file-name y2a28@p) (display '", found " y2a28@p) (write y2a1d@name y2a28@p) (display '" instead" y2a28@p) (y2a27@e))) y2a24@y2a22 y2a23@y2a20)))) (void))))))) ((y2952@file-locator) y2a19@x))) (lambda (y2a2b@f) (if (procedure? y2a2b@f) y2a2b@f (assertion-violation 'library-locator '"not a procedure" y2a2b@f))))) (set! y295c@current-library-expander (y2855@y277f@make-parameter (lambda (y2a2d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (y2a2f@f) (if (procedure? y2a2f@f) y2a2f@f (assertion-violation 'library-expander '"not a procedure" y2a2f@f))))) (set! y295e@external-pending-libraries (y2855@y277f@make-parameter '())) (set! y2960@find-external-library (lambda (y2a31@name) (begin (if (member y2a31@name (y295e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" y2a31@name) (void)) ((lambda (y2a37@y2a34 y2a38@y2a36) ((lambda (y2a3b@swap) (dynamic-wind y2a3b@swap (lambda () (begin ((y295a@library-loader) y2a31@name) (or (y294a@find-library-by (lambda (y2a3d@x) (fast-equal? (y2910@library-name y2a3d@x) y2a31@name))) (assertion-violation '#f '"handling external library did not yield the correct library" y2a31@name)))) y2a3b@swap)) (lambda () ((lambda (y2a3f@t) (begin (y2a37@y2a34 y2a38@y2a36) (set! y2a38@y2a36 y2a3f@t))) (y2a37@y2a34))))) y295e@external-pending-libraries (cons y2a31@name (y295e@external-pending-libraries)))))) (set! y2962@find-library-by-name (lambda (y2a41@name) (or (y294a@find-library-by (lambda (y2a43@x) (fast-equal? (y2910@library-name y2a43@x) y2a41@name))) (y2960@find-external-library y2a41@name)))) (set! y2964@library-exists? (lambda (y2a45@name) (and (y294a@find-library-by (lambda (y2a47@x) (fast-equal? (y2910@library-name y2a47@x) y2a45@name))) '#t))) (set! y2966@find-library-by-spec/die (lambda (y2a49@spec) ((lambda (y2a4b@id) (or (y294a@find-library-by (lambda (y2a4d@x) (eq? y2a4b@id (y290e@library-id y2a4d@x)))) (assertion-violation '#f '"cannot find library with required spec" y2a49@spec))) (car y2a49@spec)))) (set! y2968@label->binding-table (make-eq-hashtable)) (set! y296a@install-library-record (lambda (y2a4f@lib) (begin ((lambda (y2a51@exp-env) (for-each (lambda (y2a53@x) ((lambda (y2a55@label y2a56@binding) ((lambda (y2a59@binding) (begin (if (hashtable-ref y2968@label->binding-table y2a55@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" y2a55@label (hashtable-ref y2968@label->binding-table y2a55@label '#f) y2a59@binding) (exit)) (void)) (hashtable-set! y2968@label->binding-table y2a55@label y2a59@binding))) ((lambda (y2a5b@t) (if (memv y2a5b@t '(global)) (cons 'global (cons y2a4f@lib (cdr y2a56@binding))) (if (memv y2a5b@t '(global-macro)) (cons 'global-macro (cons y2a4f@lib (cdr y2a56@binding))) (if (memv y2a5b@t '(global-macro!)) (cons 'global-macro! (cons y2a4f@lib (cdr y2a56@binding))) y2a56@binding)))) (car y2a56@binding)))) (car y2a53@x) (cdr y2a53@x))) y2a51@exp-env)) (y291c@library-env y2a4f@lib)) ((y28fd@current-library-collection) y2a4f@lib)))) (set! y296c@install-library (lambda (y2a5d@id y2a5e@name y2a5f@ver y2a60@imp* y2a61@vis* y2a62@inv* y2a63@exp-subst y2a64@exp-env y2a65@visit-proc y2a66@invoke-proc y2a67@visit-code y2a68@invoke-code y2a69@visible? y2a6a@source-file-name) ((lambda (y2a79@imp-lib* y2a7a@vis-lib* y2a7b@inv-lib*) (begin (if (not (and (symbol? y2a5d@id) (list? y2a5e@name) (list? y2a5f@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" y2a5d@id y2a5e@name y2a5f@ver) (void)) (if (y2964@library-exists? y2a5e@name) (assertion-violation 'install-library '"library is already installed" y2a5e@name) (void)) ((lambda (y2a7f@lib) (y296a@install-library-record y2a7f@lib)) (y290c@make-library y2a5d@id y2a5e@name y2a5f@ver y2a79@imp-lib* y2a7a@vis-lib* y2a7b@inv-lib* y2a63@exp-subst y2a64@exp-env y2a65@visit-proc y2a66@invoke-proc y2a67@visit-code y2a68@invoke-code y2a69@visible? y2a6a@source-file-name)))) (map y2966@find-library-by-spec/die y2a60@imp*) (map y2966@find-library-by-spec/die y2a61@vis*) (map y2966@find-library-by-spec/die y2a62@inv*)))) (set! y296e@imported-label->binding (lambda (y2a81@lab) (hashtable-ref y2968@label->binding-table y2a81@lab '#f))) (set! y2970@invoke-library (lambda (y2a83@lib) ((lambda (y2a85@invoke) (if (procedure? y2a85@invoke) (begin (y293c@set-library-invoke-state! y2a83@lib (lambda () (assertion-violation 'invoke '"circularity detected" y2a83@lib))) (for-each y2970@invoke-library (y2918@library-inv* y2a83@lib)) (y293c@set-library-invoke-state! y2a83@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" y2a83@lib))) (y2a85@invoke) (y293c@set-library-invoke-state! y2a83@lib '#t)) (void))) (y2920@library-invoke-state y2a83@lib)))) (set! y2972@visit-library (lambda (y2a87@lib) ((lambda (y2a89@visit) (if (procedure? y2a89@visit) (begin (y293a@set-library-visit-state! y2a87@lib (lambda () (assertion-violation 'visit '"circularity detected" y2a87@lib))) (for-each y2970@invoke-library (y2916@library-vis* y2a87@lib)) (y293a@set-library-visit-state! y2a87@lib (lambda () (assertion-violation 'invoke '"first visit did not return" y2a87@lib))) (y2a89@visit) (y293a@set-library-visit-state! y2a87@lib '#t)) (void))) (y291e@library-visit-state y2a87@lib)))) (set! y2974@invoke-library-by-spec (lambda (y2a8b@spec) (y2970@invoke-library (y2966@find-library-by-spec/die y2a8b@spec)))) (set! y2976@installed-libraries (lambda y2a93 ((lambda (y2a94) (if (= y2a94 '1) (apply (lambda (y2a8d@all?) ((letrec ((y2a8f@f (lambda (y2a91@ls) (if (null? y2a91@ls) '() (if (or y2a8d@all? (y2926@library-visible? (car y2a91@ls))) (cons (car y2a91@ls) (y2a8f@f (cdr y2a91@ls))) (y2a8f@f (cdr y2a91@ls))))))) y2a8f@f) ((y28fd@current-library-collection)))) y2a93) (if (= y2a94 '0) (apply (lambda () (y2976@installed-libraries '#f)) y2a93) (error 'apply '"invalid arg count")))) (length y2a93)))) (set! y2978@library-spec (lambda (y2a95@x) (begin (if (not (y290a@library? y2a95@x)) (assertion-violation 'library-spec '"not a library" y2a95@x) (void)) (list (y290e@library-id y2a95@x) (y2910@library-name y2a95@x) (y2912@library-version y2a95@x))))) (begin (set! y2ad3@y2978@library-spec y2978@library-spec) (set! y2ad2@y2976@installed-libraries y2976@installed-libraries) (set! y2ad1@y2974@invoke-library-by-spec y2974@invoke-library-by-spec) (set! y2ad0@y2972@visit-library y2972@visit-library) (set! y2acf@y2970@invoke-library y2970@invoke-library) (set! y2ace@y296e@imported-label->binding y296e@imported-label->binding) (set! y2acd@y296c@install-library y296c@install-library) (set! y2acc@y296a@install-library-record y296a@install-library-record) (set! y2acb@y2968@label->binding-table y2968@label->binding-table) (set! y2aca@y2966@find-library-by-spec/die y2966@find-library-by-spec/die) (set! y2ac9@y2964@library-exists? y2964@library-exists?) (set! y2ac8@y2962@find-library-by-name y2962@find-library-by-name) (set! y2ac7@y2960@find-external-library y2960@find-external-library) (set! y2ac6@y295e@external-pending-libraries y295e@external-pending-libraries) (set! y2ac5@y295c@current-library-expander y295c@current-library-expander) (set! y2ac4@y295a@library-loader y295a@library-loader) (set! y2ac3@y2958@try-load-from-file y2958@try-load-from-file) (set! y2ac2@y2956@current-precompiled-library-loader y2956@current-precompiled-library-loader) (set! y2ac1@y2954@serialize-all y2954@serialize-all) (set! y2ac0@y2952@file-locator y2952@file-locator) (set! y2abf@y2950@library-name->file-name y2950@library-name->file-name) (set! y2abe@y294e@library-extensions y294e@library-extensions) (set! y2abd@y294c@library-path y294c@library-path) (set! y2abc@y294a@find-library-by y294a@find-library-by) (set! y2abb@y2948@find-dependencies y2948@find-dependencies) (set! y2aba@y2946@rp y2946@rp) (set! y2ab9@y2944@set-library-source-file-name! y2944@set-library-source-file-name!) (set! y2ab8@y2942@set-library-visible?! y2942@set-library-visible?!) (set! y2ab7@y2940@set-library-invoke-code! y2940@set-library-invoke-code!) (set! y2ab6@y293e@set-library-visit-code! y293e@set-library-visit-code!) (set! y2ab5@y293c@set-library-invoke-state! y293c@set-library-invoke-state!) (set! y2ab4@y293a@set-library-visit-state! y293a@set-library-visit-state!) (set! y2ab3@y2938@set-library-env! y2938@set-library-env!) (set! y2ab2@y2936@set-library-subst! y2936@set-library-subst!) (set! y2ab1@y2934@set-library-inv*! y2934@set-library-inv*!) (set! y2ab0@y2932@set-library-vis*! y2932@set-library-vis*!) (set! y2aaf@y2930@set-library-imp*! y2930@set-library-imp*!) (set! y2aae@y292e@set-library-version! y292e@set-library-version!) (set! y2aad@y292c@set-library-name! y292c@set-library-name!) (set! y2aac@y292a@set-library-id! y292a@set-library-id!) (set! y2aab@y2928@library-source-file-name y2928@library-source-file-name) (set! y2aaa@y2926@library-visible? y2926@library-visible?) (set! y2aa9@y2924@library-invoke-code y2924@library-invoke-code) (set! y2aa8@y2922@library-visit-code y2922@library-visit-code) (set! y2aa7@y2920@library-invoke-state y2920@library-invoke-state) (set! y2aa6@y291e@library-visit-state y291e@library-visit-state) (set! y2aa5@y291c@library-env y291c@library-env) (set! y2aa4@y291a@library-subst y291a@library-subst) (set! y2aa3@y2918@library-inv* y2918@library-inv*) (set! y2aa2@y2916@library-vis* y2916@library-vis*) (set! y2aa1@y2914@library-imp* y2914@library-imp*) (set! y2aa0@y2912@library-version y2912@library-version) (set! y2a9f@y2910@library-name y2910@library-name) (set! y2a9e@y290e@library-id y290e@library-id) (set! y2a9d@y290c@make-library y290c@make-library) (set! y2a9c@y290a@library? y290a@library?) (set! y2a9b@y2907@y28ff y2907@y28ff) (set! y2a9a@y2905@y2900 y2905@y2900) (set! y2a99@y2903@y28fe y2903@y28fe) (set! y2a98@y28fd@current-library-collection y28fd@current-library-collection) (set! y2a97@y28fb@make-collection y28fb@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y2ad6@build-global-define y2b47@build-lambda y2b49@build-case-lambda y2b4b@build-let y2b79@build-sequence y2b7b@build-void y2b7d@build-letrec y2b7f@build-letrec* y2b81@build-library-letrec* y2b83@build-receive) (begin (set! y2ad6@build-global-define (lambda (y2b84@x) (y2b7b@build-void))) (set! y2b47@build-lambda (lambda (y2b86@ae y2b87@vars y2b88@exp) (list 'lambda y2b87@vars y2b88@exp))) (set! y2b49@build-case-lambda (lambda (y2b8c@ae y2b8d@vars* y2b8e@exp*) ((lambda (y2b93@build-error y2b95@build-pred y2b97@build-apply y2b99@expand-case-lambda) (begin (set! y2b93@build-error (lambda (y2bca@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! y2b95@build-pred (lambda (y2bb2@ae y2bb3@n y2bb4@vars) (call-with-values (lambda () ((letrec ((y2bbc@f (lambda (y2bbe@vars y2bbf@count) (if (pair? y2bbe@vars) (y2bbc@f (cdr y2bbe@vars) (+ y2bbf@count '1)) (if (null? y2bbe@vars) (values y2bbf@count '=) (values y2bbf@count '>=)))))) y2bbc@f) y2bb4@vars '0)) (lambda (y2bc2@y2bb9 y2bc3@y2bbb) ((lambda (y2bc6@pred y2bc7@count) (list (list 'primitive y2bc6@pred) y2bb3@n (list 'quote y2bc7@count))) y2bc3@y2bbb y2bc2@y2bb9))))) (set! y2b97@build-apply (lambda (y2baa@ae y2bab@g y2bac@vars y2bad@exp) (list '(primitive apply) (y2b47@build-lambda y2baa@ae y2bac@vars y2bad@exp) y2bab@g))) (set! y2b99@expand-case-lambda (lambda (y2b9a@ae y2b9b@vars y2b9c@exp*) ((lambda (y2ba0@g y2ba1@n) (list 'lambda y2ba0@g (y2b4b@build-let y2b9a@ae (list y2ba1@n) (list (list '(primitive length) y2ba0@g)) ((letrec ((y2ba4@f (lambda (y2ba6@vars* y2ba7@exp*) (if (null? y2ba6@vars*) (y2b93@build-error y2b9a@ae) (list 'if (y2b95@build-pred y2b9a@ae y2ba1@n (car y2ba6@vars*)) (y2b97@build-apply y2b9a@ae y2ba0@g (car y2ba6@vars*) (car y2ba7@exp*)) (y2ba4@f (cdr y2ba6@vars*) (cdr y2ba7@exp*))))))) y2ba4@f) y2b8d@vars* y2b9c@exp*)))) (gensym) (gensym)))) (if (= (length y2b8e@exp*) '1) (y2b47@build-lambda y2b8c@ae (car y2b8d@vars*) (car y2b8e@exp*)) (y2b99@expand-case-lambda y2b8c@ae y2b8d@vars* y2b8e@exp*)))) '#f '#f '#f '#f))) (set! y2b4b@build-let (lambda (y2bcc@ae y2bcd@lhs* y2bce@rhs* y2bcf@body) (cons (y2b47@build-lambda y2bcc@ae y2bcd@lhs* y2bcf@body) y2bce@rhs*))) (set! y2b79@build-sequence (lambda (y2bd4@ae y2bd5@exps) ((letrec ((y2bd8@loop (lambda (y2bda@exps) (if (null? (cdr y2bda@exps)) (car y2bda@exps) (if (equal? (car y2bda@exps) (y2b7b@build-void)) (y2bd8@loop (cdr y2bda@exps)) (cons 'begin y2bda@exps)))))) y2bd8@loop) y2bd5@exps))) (set! y2b7b@build-void (lambda () '((primitive void)))) (set! y2b7d@build-letrec (lambda (y2bdc@ae y2bdd@vars y2bde@val-exps y2bdf@body-exp) (if (null? y2bdd@vars) y2bdf@body-exp (list 'letrec (map list y2bdd@vars y2bde@val-exps) y2bdf@body-exp)))) (set! y2b7f@build-letrec* (lambda (y2be4@ae y2be5@vars y2be6@val-exps y2be7@body-exp) (if (null? y2be5@vars) y2be7@body-exp (y2b4b@build-let y2be4@ae y2be5@vars (map (lambda (y2bec@x) (list 'quote '#f)) y2be5@vars) (y2b79@build-sequence y2be4@ae (append (map (lambda (y2bee@lhs y2bef@rhs) (list 'set! y2bee@lhs y2bef@rhs)) y2be5@vars y2be6@val-exps) (list y2be7@body-exp))))))) (set! y2b81@build-library-letrec* (lambda (y2bf2@ae y2bf3@name y2bf4@vars y2bf5@locs y2bf6@val-exps y2bf7@body-exp) (list 'library-letrec* y2bf3@name (map list y2bf4@vars y2bf5@locs y2bf6@val-exps) y2bf7@body-exp))) (set! y2b83@build-receive (lambda (y2bfe@ae y2bff@vars y2c00@producer y2c01@body*) (begin (display '"************** in ") (cons 'receive (cons y2bff@vars (cons y2c00@producer y2c01@body*)))))) (begin (set! y2c0f@y2b83@build-receive y2b83@build-receive) (set! y2c0e@y2b81@build-library-letrec* y2b81@build-library-letrec*) (set! y2c0d@y2b7f@build-letrec* y2b7f@build-letrec*) (set! y2c0c@y2b7d@build-letrec y2b7d@build-letrec) (set! y2c0b@y2b7b@build-void y2b7b@build-void) (set! y2c0a@y2b79@build-sequence y2b79@build-sequence) (set! y2c09@y2b4b@build-let y2b4b@build-let) (set! y2c08@y2b49@build-case-lambda y2b49@build-case-lambda) (set! y2c07@y2b47@build-lambda y2b47@build-lambda) (set! y2c06@y2ad6@build-global-define y2ad6@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y2c1e@file-options-macro y2c20@set-cons y2c22@set-union y2c27@top-mark* y2c29@top-marked? y2c2b@gen-lexical y2c2d@gen-global y2c2f@gen-label y2c31@gen-top-level-label y2c33@gen-define-label+loc y2c35@gen-define-label y2c3b@y2c36 y2c3d@y2c38 y2c3f@y2c37 y2c42@rib? y2c44@make-rib y2c46@rib-sym* y2c48@rib-mark** y2c4a@rib-label* y2c4c@rib-sealed/freq y2c4e@rib-cache y2c50@set-rib-sym*! y2c52@set-rib-mark**! y2c54@set-rib-label*! y2c56@set-rib-sealed/freq! y2c58@set-rib-cache! y2c5a@make-empty-rib y2c5c@extend-rib! y2c5e@extend-rib/nc! y2c60@make-rib-map y2c62@seal-rib! y2c64@unseal-rib! y2c66@make-full-rib y2c6c@y2c67 y2c6e@y2c69 y2c70@y2c68 y2c73@stx? y2c75@make-stx y2c77@stx-expr y2c79@stx-mark* y2c7b@stx-subst* y2c7d@stx-ae* y2c7f@set-stx-expr! y2c81@set-stx-mark*! y2c83@set-stx-subst*! y2c85@set-stx-ae*! y2c87@rp y2c89@datum->stx y2c8b@gen-mark y2c8d@anti-mark y2c8f@anti-mark? y2c91@join-wraps y2c93@mkstx y2c95@add-mark y2c97@add-subst y2c99@syntax-kind? y2c9b@syntax-vector->list y2c9d@syntax-pair? y2c9f@syntax-vector? y2ca1@syntax-null? y2ca3@syntax-list? y2ca5@syntax-car y2ca7@syntax-cdr y2ca9@syntax->list y2cab@id? y2cad@id->sym y2caf@same-marks? y2cb1@bound-id=? y2cb3@free-id=? y2cb5@valid-bound-ids? y2cb7@distinct-bound-ids? y2cb9@bound-id-member? y2cbb@self-evaluating? y2cbd@strip-annotations y2cbf@strip y2cc1@stx->datum y2cc3@same-marks*? y2cc5@id->label y2cc7@id->real-label y2cc9@label->binding y2ccb@make-binding y2ccd@binding-type y2ccf@binding-value y2cd1@raise-unbound-error y2cd3@syntax-type y2ce1@sanitize-binding y2ce3@make-variable-transformer y2ce5@variable-transformer? y2ce7@variable-transformer-procedure y2ce9@make-eval-transformer y2e3a@parse-define y2e3c@parse-define-syntax y2e3e@scheme-stx-hashtable y2e40@scheme-stx y2e42@lexical-var y2e44@lexical-mutable? y2e46@set-lexical-mutable! y2e48@add-lexical y2e4a@add-lexicals y2e4c@letrec-helper y2e4e@letrec-transformer y2e50@letrec*-transformer y2e52@fluid-let-syntax-transformer y2e54@type-descriptor-transformer y2e56@record-type-descriptor-transformer y2e58@record-constructor-descriptor-transformer y2e5a@when-macro y2e5c@unless-macro y2e5e@if-transformer y2e60@and-transformer y2e62@or-transformer y2e64@case-macro y2e66@quote-transformer y2e68@case-lambda-transformer y2e6a@lambda-transformer y2e6c@bless y2e6e@with-syntax-macro y2e70@invalid-fmls-error y2e72@let-macro y2e74@let-values-macro y2e76@let*-values-macro y2e78@trace-lambda-macro y2e7a@trace-define-macro y2e7c@trace-define-syntax-macro y2e7e@trace-let/rec-syntax y2e80@trace-let-syntax-macro y2e82@trace-letrec-syntax-macro y2e84@guard-macro y2e86@define-enumeration-macro y2e88@time-macro y2e8a@delay-macro y2e8c@assert-macro y2e8e@endianness-macro y2e90@identifier-syntax-macro y2e92@do-macro y2e94@let*-macro y2e96@or-macro y2e98@and-macro y2e9a@cond-macro y2e9c@do-include y2e9e@include-macro y2ea0@include-into-macro y2ea2@syntax-rules-macro y2ea4@quasiquote-macro y2ea6@quasisyntax-macro y2ea8@define-struct-macro y2eaa@define-record-type-macro y2eac@define-condition-type-macro y2eae@incorrect-usage-macro y2eb0@parameterize-macro y2eb2@foreign-call-transformer y2eb4@convert-pattern y2eb6@syntax-dispatch y2eb8@ellipsis? y2eba@underscore? y2ebc@verify-literals y2ebe@syntax-case-transformer y2ec0@ellipsis-map y2ec2@syntax-transformer y2ec4@core-macro-transformer y2ec6@symbol-macro y2ec8@macro-transformer y2eca@local-macro-transformer y2ecc@do-macro-call y2ece@chi-macro y2ed0@chi-local-macro y2ed2@chi-global-macro y2ed4@chi-expr* y2ed6@chi-application y2ed8@chi-expr y2eda@chi-set! y2edc@verify-formals y2ede@chi-lambda-clause y2ee0@chi-lambda-clause* y2ee2@chi-defun y2ee4@chi-rhs y2ee6@expand-interaction-rhs*/init* y2ee8@chi-rhs* y2eea@find-bound=? y2eec@find-dups y2eee@chi-internal y2ef0@parse-module y2ef6@y2ef1 y2ef8@y2ef3 y2efa@y2ef2 y2efd@module-interface? y2eff@make-module-interface y2f01@module-interface-first-mark y2f03@module-interface-exp-id-vec y2f05@module-interface-exp-lab-vec y2f07@set-module-interface-first-mark! y2f09@set-module-interface-exp-id-vec! y2f0b@set-module-interface-exp-lab-vec! y2f0d@module-interface-exp-id* y2f0f@chi-internal-module y2f11@chi-body* y2f13@expand-transformer y2f15@parse-exports y2f17@parse-library-name y2f19@parse-library y2f1b@parse-import-spec* y2f1d@make-top-rib y2f1f@make-collector y2f21@inv-collector y2f23@vis-collector y2f25@imp-collector y2f27@chi-library-internal y2f29@chi-interaction-expr y2f2b@library-body-expander y2f2d@core-library-expander y2f2f@parse-top-level-program y2f31@top-level-expander y2f37@y2f32 y2f39@y2f34 y2f3b@y2f33 y2f3e@env? y2f40@make-env y2f42@env-names y2f44@env-labels y2f46@env-itc y2f48@set-env-names! y2f4a@set-env-labels! y2f4c@set-env-itc! y2f4e@rp y2f54@y2f4f y2f56@y2f51 y2f58@y2f50 y2f5b@interaction-env? y2f5d@make-interaction-env y2f5f@interaction-env-rib y2f61@interaction-env-r y2f63@interaction-env-locs y2f65@set-interaction-env-rib! y2f67@set-interaction-env-r! y2f69@set-interaction-env-locs! y2f6b@rp y2f6d@interaction-environment-symbols y2f6f@environment-bindings y2f71@parse-binding y2f73@environment? y2f75@environment-symbols y2f77@environment y2f79@null-environment y2f7b@scheme-report-environment y2f7d@expand y2f7f@eval y2f81@library-expander y2f83@boot-library-expand y2f85@rev-map-append y2f87@build-exports y2f89@make-export-subst y2f8b@make-export-env/macros y2f8d@generate-temporaries y2f8f@free-identifier=? y2f91@bound-identifier=? y2f93@make-source-condition y2f95@extract-position-condition y2f97@expression-position y2f99@assertion-error y2f9b@syntax-error y2f9d@syntax-violation* y2f9f@syntax-violation y2fa1@identifier? y2fa3@datum->syntax y2fa5@syntax->datum y2fa7@compile-r6rs-top-level y2fa9@pre-compile-r6rs-top-level y2fab@interaction-environment y2fad@top-level-context) (begin (set! y2c1e@file-options-macro (lambda (y2fae@x) ((lambda (y2fb1@valid-option?) (begin (set! y2fb1@valid-option? (lambda (y2fba@x) (and (y2cab@id? y2fba@x) (memq (y2cad@id->sym y2fba@x) '(no-fail no-create no-truncate))))) ((lambda (y2fb2@t) ((lambda (y2fb4@ls/false) (if (and y2fb4@ls/false (apply (lambda (y2fb6@opt*) (for-all y2fb1@valid-option? y2fb6@opt*)) y2fb4@ls/false)) (apply (lambda (y2fb8@opt*) (y2e6c@bless (list 'make-file-options (list 'quote y2fb8@opt*)))) y2fb4@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y2fb2@t))) (y2eb6@syntax-dispatch y2fb2@t '(_ . each-any)))) y2fae@x))) '#f))) (set! y2c20@set-cons (lambda (y2fbc@x y2fbd@ls) (if (memq y2fbc@x y2fbd@ls) y2fbd@ls (cons y2fbc@x y2fbd@ls)))) (set! y2c22@set-union (lambda (y2fc0@ls1 y2fc1@ls2) (if (null? y2fc0@ls1) y2fc1@ls2 (if (memq (car y2fc0@ls1) y2fc1@ls2) (y2c22@set-union (cdr y2fc0@ls1) y2fc1@ls2) (cons (car y2fc0@ls1) (y2c22@set-union (cdr y2fc0@ls1) y2fc1@ls2)))))) (set! y2c27@top-mark* '(top)) (set! y2c29@top-marked? (lambda (y2fc4@m*) (memq 'top y2fc4@m*))) (set! y2c2b@gen-lexical (lambda (y2fc6@sym) (if (symbol? y2fc6@sym) (gensym y2fc6@sym) (if (y2c73@stx? y2fc6@sym) (y2c2b@gen-lexical (y2cad@id->sym y2fc6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" y2fc6@sym))))) (set! y2c2d@gen-global (lambda (y2fc8@x) (y2c2b@gen-lexical y2fc8@x))) (set! y2c2f@gen-label (lambda (y2fca@_) (gensym))) (set! y2c31@gen-top-level-label (lambda (y2fcc@id y2fcd@rib) ((lambda (y2fd1@find) (begin (set! y2fd1@find (lambda (y2fdc@sym y2fdd@mark* y2fde@sym* y2fdf@mark** y2fe0@label*) (and (pair? y2fde@sym*) (if (and (eq? y2fdc@sym (car y2fde@sym*)) (y2caf@same-marks? y2fdd@mark* (car y2fdf@mark**))) (car y2fe0@label*) (y2fd1@find y2fdc@sym y2fdd@mark* (cdr y2fde@sym*) (cdr y2fdf@mark**) (cdr y2fe0@label*)))))) ((lambda (y2fd2@sym y2fd3@mark*) ((lambda (y2fd6@sym*) ((lambda (y2fd8@t) (if y2fd8@t ((lambda (y2fda@label) (if (y2ace@y296e@imported-label->binding y2fda@label) (gensym) y2fda@label)) y2fd8@t) (gensym))) (and (memq y2fd2@sym (y2c46@rib-sym* y2fcd@rib)) (y2fd1@find y2fd2@sym y2fd3@mark* y2fd6@sym* (y2c48@rib-mark** y2fcd@rib) (y2c4a@rib-label* y2fcd@rib))))) (y2c46@rib-sym* y2fcd@rib))) (y2cad@id->sym y2fcc@id) (y2c79@stx-mark* y2fcc@id)))) '#f))) (set! y2c33@gen-define-label+loc (lambda (y2fe6@id y2fe7@rib) ((lambda (y2fea@t) (if y2fea@t ((lambda (y2fec@env) ((lambda (y2fee@label y2fef@locs) (values y2fee@label ((lambda (y2ff2@t) (if y2ff2@t (cdr y2ff2@t) ((lambda (y2ff4@loc) (begin (y2f69@set-interaction-env-locs! y2fec@env (cons (cons y2fee@label y2ff4@loc) y2fef@locs)) y2ff4@loc)) (y2c2b@gen-lexical y2fe6@id)))) (assq y2fee@label y2fef@locs)))) (y2c31@gen-top-level-label y2fe6@id y2fe7@rib) (y2f63@interaction-env-locs y2fec@env))) y2fea@t) (values (gensym) (y2c2b@gen-lexical y2fe6@id)))) (y2fad@top-level-context)))) (set! y2c35@gen-define-label (lambda (y2ff6@id y2ff7@rib) (if (y2fad@top-level-context) (y2c31@gen-top-level-label y2ff6@id y2ff7@rib) (gensym)))) (set! y2c3b@y2c36 (make-record-type-descriptor 'rib '#f 'y2c39 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! y2c3d@y2c38 '#f) (set! y2c3f@y2c37 (make-record-constructor-descriptor y2c3b@y2c36 '#f y2c3d@y2c38)) (set! y2c42@rib? (record-predicate y2c3b@y2c36)) (set! y2c44@make-rib (record-constructor y2c3f@y2c37)) (set! y2c46@rib-sym* (record-accessor y2c3b@y2c36 '0)) (set! y2c48@rib-mark** (record-accessor y2c3b@y2c36 '1)) (set! y2c4a@rib-label* (record-accessor y2c3b@y2c36 '2)) (set! y2c4c@rib-sealed/freq (record-accessor y2c3b@y2c36 '3)) (set! y2c4e@rib-cache (record-accessor y2c3b@y2c36 '4)) (set! y2c50@set-rib-sym*! (record-mutator y2c3b@y2c36 '0)) (set! y2c52@set-rib-mark**! (record-mutator y2c3b@y2c36 '1)) (set! y2c54@set-rib-label*! (record-mutator y2c3b@y2c36 '2)) (set! y2c56@set-rib-sealed/freq! (record-mutator y2c3b@y2c36 '3)) (set! y2c58@set-rib-cache! (record-mutator y2c3b@y2c36 '4)) (set! y2c5a@make-empty-rib (lambda () (y2c44@make-rib '() '() '() '#f '#f))) (set! y2c5c@extend-rib! (lambda (y2ffa@rib y2ffb@id y2ffc@label) ((lambda (y3001@find) (begin (set! y3001@find (lambda (y300e@sym y300f@mark* y3010@sym* y3011@mark** y3012@label*) (and (pair? y3010@sym*) (if (and (eq? y300e@sym (car y3010@sym*)) (y2caf@same-marks? y300f@mark* (car y3011@mark**))) y3012@label* (y3001@find y300e@sym y300f@mark* (cdr y3010@sym*) (cdr y3011@mark**) (cdr y3012@label*)))))) (begin (if (y2c4c@rib-sealed/freq y2ffa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" y2ffa@rib) (void)) ((lambda (y3002@sym y3003@mark*) ((lambda (y3006@sym*) ((lambda (y3008@t) (if y3008@t ((lambda (y300a@p) (if (not (eq? y2ffc@label (car y300a@p))) (if (y2fad@top-level-context) (set-car! y300a@p y2ffc@label) (y2f9f@syntax-violation '#f '"multiple definitions of identifier" y2ffb@id)) (void))) y3008@t) (begin (if (y2c4e@rib-cache y2ffa@rib) (hashtable-update! (y2c4e@rib-cache y2ffa@rib) y3002@sym (lambda (y300c@e) (cons (cons y3003@mark* y2ffc@label) y300c@e)) '()) (void)) (y2c50@set-rib-sym*! y2ffa@rib (cons y3002@sym y3006@sym*)) (y2c52@set-rib-mark**! y2ffa@rib (cons y3003@mark* (y2c48@rib-mark** y2ffa@rib))) (y2c54@set-rib-label*! y2ffa@rib (cons y2ffc@label (y2c4a@rib-label* y2ffa@rib)))))) (and (memq y3002@sym (y2c46@rib-sym* y2ffa@rib)) (y3001@find y3002@sym y3003@mark* y3006@sym* (y2c48@rib-mark** y2ffa@rib) (y2c4a@rib-label* y2ffa@rib))))) (y2c46@rib-sym* y2ffa@rib))) (y2cad@id->sym y2ffb@id) (y2c79@stx-mark* y2ffb@id))))) '#f))) (set! y2c5e@extend-rib/nc! (lambda (y3018@rib y3019@id y301a@label) ((lambda (y301e@sym y301f@mark*) ((lambda (y3022@sym*) (begin (if (y2c4e@rib-cache y3018@rib) (hashtable-update! (y2c4e@rib-cache y3018@rib) y301e@sym (lambda (y3024@e) (cons (cons y301f@mark* y301a@label) y3024@e)) '()) (void)) (y2c50@set-rib-sym*! y3018@rib (cons y301e@sym y3022@sym*)) (y2c52@set-rib-mark**! y3018@rib (cons y301f@mark* (y2c48@rib-mark** y3018@rib))) (y2c54@set-rib-label*! y3018@rib (cons y301a@label (y2c4a@rib-label* y3018@rib))))) (y2c46@rib-sym* y3018@rib))) (y2cad@id->sym y3019@id) (y2c79@stx-mark* y3019@id)))) (set! y2c60@make-rib-map (lambda (y3026@sym*) ((lambda (y3028@ht) ((letrec ((y302a@f (lambda (y302c@i y302d@sym*) (if (null? y302d@sym*) y3028@ht (begin (hashtable-update! y3028@ht (car y302d@sym*) (lambda (y3030@x) (cons y302c@i y3030@x)) '()) (y302a@f (+ y302c@i '1) (cdr y302d@sym*))))))) y302a@f) '0 y3026@sym*)) (make-eq-hashtable)))) (set! y2c62@seal-rib! (lambda (y3032@rib) ((lambda (y3034@sym*) (if (not (null? y3034@sym*)) (begin (y2c50@set-rib-sym*! y3032@rib (list->vector y3034@sym*)) (y2c52@set-rib-mark**! y3032@rib (list->vector (y2c48@rib-mark** y3032@rib))) (y2c54@set-rib-label*! y3032@rib (list->vector (y2c4a@rib-label* y3032@rib))) (y2c56@set-rib-sealed/freq! y3032@rib (y2c60@make-rib-map y3034@sym*))) (void))) (y2c46@rib-sym* y3032@rib)))) (set! y2c64@unseal-rib! (lambda (y3036@rib) (if (y2c4c@rib-sealed/freq y3036@rib) (begin (y2c56@set-rib-sealed/freq! y3036@rib '#f) (y2c50@set-rib-sym*! y3036@rib (vector->list (y2c46@rib-sym* y3036@rib))) (y2c52@set-rib-mark**! y3036@rib (vector->list (y2c48@rib-mark** y3036@rib))) (y2c54@set-rib-label*! y3036@rib (vector->list (y2c4a@rib-label* y3036@rib)))) (void)))) (set! y2c66@make-full-rib (lambda (y3038@id* y3039@label*) ((lambda (y303c@r) (begin (y2c62@seal-rib! y303c@r) y303c@r)) (y2c44@make-rib (map y2cad@id->sym y3038@id*) (map y2c79@stx-mark* y3038@id*) y3039@label* '#f '#f)))) (set! y2c6c@y2c67 (make-record-type-descriptor 'stx '#f 'y2c6a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! y2c6e@y2c69 '#f) (set! y2c70@y2c68 (make-record-constructor-descriptor y2c6c@y2c67 '#f y2c6e@y2c69)) (set! y2c73@stx? (record-predicate y2c6c@y2c67)) (set! y2c75@make-stx (record-constructor y2c70@y2c68)) (set! y2c77@stx-expr (record-accessor y2c6c@y2c67 '0)) (set! y2c79@stx-mark* (record-accessor y2c6c@y2c67 '1)) (set! y2c7b@stx-subst* (record-accessor y2c6c@y2c67 '2)) (set! y2c7d@stx-ae* (record-accessor y2c6c@y2c67 '3)) (set! y2c7f@set-stx-expr! (record-mutator y2c6c@y2c67 '0)) (set! y2c81@set-stx-mark*! (record-mutator y2c6c@y2c67 '1)) (set! y2c83@set-stx-subst*! (record-mutator y2c6c@y2c67 '2)) (set! y2c85@set-stx-ae*! (record-mutator y2c6c@y2c67 '3)) (set! y2c87@rp (y2852@y2779@make-record-printer 'stx (lambda (y303e@x y303f@p y3040@wr) (begin (display '"#<syntax " y303f@p) (write (y2cc1@stx->datum y303e@x) y303f@p) ((lambda (y3044@expr) (if (y284a@y2769@annotation? y3044@expr) ((lambda (y3046@src) (if (pair? y3046@src) (begin (display '" [" y303f@p) (display (cdr y3046@src) y303f@p) (display '" of " y303f@p) (display (car y3046@src) y303f@p) (display '"]" y303f@p)) (void))) (y284b@y276b@annotation-source y3044@expr)) (void))) (y2c77@stx-expr y303e@x)) (display '">" y303f@p))))) (set! y2c89@datum->stx (lambda (y3048@id y3049@datum) (y2c75@make-stx y3049@datum (y2c79@stx-mark* y3048@id) (y2c7b@stx-subst* y3048@id) (y2c7d@stx-ae* y3048@id)))) (set! y2c8b@gen-mark (lambda () (string '#\m))) (set! y2c8d@anti-mark '#f) (set! y2c8f@anti-mark? not) (set! y2c91@join-wraps (lambda (y304c@m1* y304d@s1* y304e@ae1* y304f@e) ((lambda (y3055@cancel) (begin (set! y3055@cancel (lambda (y305c@ls1 y305d@ls2) ((letrec ((y3060@f (lambda (y3062@x y3063@ls1) (if (null? y3063@ls1) (cdr y305d@ls2) (cons y3062@x (y3060@f (car y3063@ls1) (cdr y3063@ls1))))))) y3060@f) (car y305c@ls1) (cdr y305c@ls1)))) ((lambda (y3056@m2* y3057@s2* y3058@ae2*) (if (and (not (null? y304c@m1*)) (not (null? y3056@m2*)) (y2c8f@anti-mark? (car y3056@m2*))) (values (y3055@cancel y304c@m1* y3056@m2*) (y3055@cancel y304d@s1* y3057@s2*) (y3055@cancel y304e@ae1* y3058@ae2*)) (values (append y304c@m1* y3056@m2*) (append y304d@s1* y3057@s2*) (append y304e@ae1* y3058@ae2*)))) (y2c79@stx-mark* y304f@e) (y2c7b@stx-subst* y304f@e) (y2c7d@stx-ae* y304f@e)))) '#f))) (set! y2c93@mkstx (lambda (y3066@e y3067@m* y3068@s* y3069@ae*) (if (and (y2c73@stx? y3066@e) (not (y2c29@top-marked? y3067@m*))) (call-with-values (lambda () (y2c91@join-wraps y3067@m* y3068@s* y3069@ae* y3066@e)) (lambda (y3074@y306f y3075@y3071 y3076@y3073) ((lambda (y307a@ae* y307b@s* y307c@m*) (y2c75@make-stx (y2c77@stx-expr y3066@e) y307c@m* y307b@s* y307a@ae*)) y3076@y3073 y3075@y3071 y3074@y306f))) (y2c75@make-stx y3066@e y3067@m* y3068@s* y3069@ae*)))) (set! y2c95@add-mark (lambda (y3080@m y3081@e y3082@ae) (y2c93@mkstx y3081@e (list y3080@m) '(shift) (list y3082@ae)))) (set! y2c97@add-subst (lambda (y3086@subst y3087@e) (y2c93@mkstx y3087@e '() (list y3086@subst) '()))) (set! y2c99@syntax-kind? (lambda (y308a@x y308b@p?) (if (y2c73@stx? y308a@x) (y2c99@syntax-kind? (y2c77@stx-expr y308a@x) y308b@p?) (if (y284a@y2769@annotation? y308a@x) (y2c99@syntax-kind? (y284c@y276d@annotation-expression y308a@x) y308b@p?) (y308b@p? y308a@x))))) (set! y2c9b@syntax-vector->list (lambda (y308e@x) (if (y2c73@stx? y308e@x) ((lambda (y3090@ls y3091@m* y3092@s* y3093@ae*) (map (lambda (y3098@x) (y2c93@mkstx y3098@x y3091@m* y3092@s* y3093@ae*)) y3090@ls)) (y2c9b@syntax-vector->list (y2c77@stx-expr y308e@x)) (y2c79@stx-mark* y308e@x) (y2c7b@stx-subst* y308e@x) (y2c7d@stx-ae* y308e@x)) (if (y284a@y2769@annotation? y308e@x) (y2c9b@syntax-vector->list (y284c@y276d@annotation-expression y308e@x)) (if (vector? y308e@x) (vector->list y308e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" y308e@x)))))) (set! y2c9d@syntax-pair? (lambda (y309a@x) (y2c99@syntax-kind? y309a@x pair?))) (set! y2c9f@syntax-vector? (lambda (y309c@x) (y2c99@syntax-kind? y309c@x vector?))) (set! y2ca1@syntax-null? (lambda (y309e@x) (y2c99@syntax-kind? y309e@x null?))) (set! y2ca3@syntax-list? (lambda (y30a0@x) (or (y2ca1@syntax-null? y30a0@x) (and (y2c9d@syntax-pair? y30a0@x) (y2ca3@syntax-list? (y2ca7@syntax-cdr y30a0@x)))))) (set! y2ca5@syntax-car (lambda (y30a2@x) (if (y2c73@stx? y30a2@x) (y2c93@mkstx (y2ca5@syntax-car (y2c77@stx-expr y30a2@x)) (y2c79@stx-mark* y30a2@x) (y2c7b@stx-subst* y30a2@x) (y2c7d@stx-ae* y30a2@x)) (if (y284a@y2769@annotation? y30a2@x) (y2ca5@syntax-car (y284c@y276d@annotation-expression y30a2@x)) (if (pair? y30a2@x) (car y30a2@x) (assertion-violation 'syntax-car '"BUG: not a pair" y30a2@x)))))) (set! y2ca7@syntax-cdr (lambda (y30a4@x) (if (y2c73@stx? y30a4@x) (y2c93@mkstx (y2ca7@syntax-cdr (y2c77@stx-expr y30a4@x)) (y2c79@stx-mark* y30a4@x) (y2c7b@stx-subst* y30a4@x) (y2c7d@stx-ae* y30a4@x)) (if (y284a@y2769@annotation? y30a4@x) (y2ca7@syntax-cdr (y284c@y276d@annotation-expression y30a4@x)) (if (pair? y30a4@x) (cdr y30a4@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" y30a4@x)))))) (set! y2ca9@syntax->list (lambda (y30a6@x) (if (y2c9d@syntax-pair? y30a6@x) (cons (y2ca5@syntax-car y30a6@x) (y2ca9@syntax->list (y2ca7@syntax-cdr y30a6@x))) (if (y2ca1@syntax-null? y30a6@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" y30a6@x))))) (set! y2cab@id? (lambda (y30a8@x) (and (y2c73@stx? y30a8@x) ((lambda (y30aa@expr) (symbol? (if (y284a@y2769@annotation? y30aa@expr) (y2849@y2767@annotation-stripped y30aa@expr) y30aa@expr))) (y2c77@stx-expr y30a8@x))))) (set! y2cad@id->sym (lambda (y30ac@x) (begin (if (not (y2c73@stx? y30ac@x)) (error 'id->sym '"BUG in ikarus: not an id" y30ac@x) (void)) ((lambda (y30ae@expr) ((lambda (y30b0@sym) (if (symbol? y30b0@sym) y30b0@sym (error 'id->sym '"BUG in ikarus: not an id" y30ac@x))) (if (y284a@y2769@annotation? y30ae@expr) (y2849@y2767@annotation-stripped y30ae@expr) y30ae@expr))) (y2c77@stx-expr y30ac@x))))) (set! y2caf@same-marks? (lambda (y30b2@x y30b3@y) (or (and (null? y30b2@x) (null? y30b3@y)) (and (pair? y30b2@x) (pair? y30b3@y) (eq? (car y30b2@x) (car y30b3@y)) (y2caf@same-marks? (cdr y30b2@x) (cdr y30b3@y)))))) (set! y2cb1@bound-id=? (lambda (y30b6@x y30b7@y) (and (eq? (y2cad@id->sym y30b6@x) (y2cad@id->sym y30b7@y)) (y2caf@same-marks? (y2c79@stx-mark* y30b6@x) (y2c79@stx-mark* y30b7@y))))) (set! y2cb3@free-id=? (lambda (y30ba@i y30bb@j) ((lambda (y30be@t0 y30bf@t1) (if (or y30be@t0 y30bf@t1) (eq? y30be@t0 y30bf@t1) (eq? (y2cad@id->sym y30ba@i) (y2cad@id->sym y30bb@j)))) (y2cc7@id->real-label y30ba@i) (y2cc7@id->real-label y30bb@j)))) (set! y2cb5@valid-bound-ids? (lambda (y30c2@id*) (and (for-all y2cab@id? y30c2@id*) (y2cb7@distinct-bound-ids? y30c2@id*)))) (set! y2cb7@distinct-bound-ids? (lambda (y30c4@id*) (or (null? y30c4@id*) (and (not (y2cb9@bound-id-member? (car y30c4@id*) (cdr y30c4@id*))) (y2cb7@distinct-bound-ids? (cdr y30c4@id*)))))) (set! y2cb9@bound-id-member? (lambda (y30c6@id y30c7@id*) (and (pair? y30c7@id*) (or (y2cb1@bound-id=? y30c6@id (car y30c7@id*)) (y2cb9@bound-id-member? y30c6@id (cdr y30c7@id*)))))) (set! y2cbb@self-evaluating? (lambda (y30ca@x) (or (number? y30ca@x) (string? y30ca@x) (char? y30ca@x) (boolean? y30ca@x) (regexp? y30ca@x) (bytevector? y30ca@x)))) (set! y2cbd@strip-annotations (lambda (y30cc@x) (if (pair? y30cc@x) (cons (y2cbd@strip-annotations (car y30cc@x)) (y2cbd@strip-annotations (cdr y30cc@x))) (if (vector? y30cc@x) (vector-map y2cbd@strip-annotations y30cc@x) (if (y284a@y2769@annotation? y30cc@x) (y2849@y2767@annotation-stripped y30cc@x) y30cc@x))))) (set! y2cbf@strip (lambda (y30ce@x y30cf@m*) (if (y2c29@top-marked? y30cf@m*) (if (or (y284a@y2769@annotation? y30ce@x) (and (pair? y30ce@x) (y284a@y2769@annotation? (car y30ce@x))) (and (vector? y30ce@x) (> (vector-length y30ce@x) '0) (y284a@y2769@annotation? (vector-ref y30ce@x '0)))) (y2cbd@strip-annotations y30ce@x) y30ce@x) ((letrec ((y30d2@f (lambda (y30d4@x) (if (y2c73@stx? y30d4@x) (y2cbf@strip (y2c77@stx-expr y30d4@x) (y2c79@stx-mark* y30d4@x)) (if (y284a@y2769@annotation? y30d4@x) (y2849@y2767@annotation-stripped y30d4@x) (if (pair? y30d4@x) ((lambda (y30d6@a y30d7@d) (if (and (eq? y30d6@a (car y30d4@x)) (eq? y30d7@d (cdr y30d4@x))) y30d4@x (cons y30d6@a y30d7@d))) (y30d2@f (car y30d4@x)) (y30d2@f (cdr y30d4@x))) (if (vector? y30d4@x) ((lambda (y30da@old) ((lambda (y30dc@new) (if (for-all eq? y30da@old y30dc@new) y30d4@x (list->vector y30dc@new))) (map y30d2@f y30da@old))) (vector->list y30d4@x)) y30d4@x))))))) y30d2@f) y30ce@x)))) (set! y2cc1@stx->datum (lambda (y30de@x) (y2cbf@strip y30de@x '()))) (set! y2cc3@same-marks*? (lambda (y30e0@mark* y30e1@mark** y30e2@si) (if (null? y30e2@si) '#f (if (y2caf@same-marks? y30e0@mark* (vector-ref y30e1@mark** (car y30e2@si))) (car y30e2@si) (y2cc3@same-marks*? y30e0@mark* y30e1@mark** (cdr y30e2@si)))))) (set! y2cc5@id->label (lambda (y30e6@id) (or (y2cc7@id->real-label y30e6@id) ((lambda (y30e8@t) (if y30e8@t ((lambda (y30ea@env) ((lambda (y30ec@rib) (call-with-values (lambda () (y2c33@gen-define-label+loc y30e6@id y30ec@rib)) (lambda (y30f2@y30ef y30f3@y30f1) ((lambda (y30f6@loc_ y30f7@lab) (begin (y2c5c@extend-rib! y30ec@rib y30e6@id y30f7@lab) y30f7@lab)) y30f3@y30f1 y30f2@y30ef)))) (y2f5f@interaction-env-rib y30ea@env))) y30e8@t) '#f)) (y2fad@top-level-context))))) (set! y2cc7@id->real-label (lambda (y30fa@id) ((lambda (y30fc@sym) ((letrec ((y30fe@search (lambda (y3100@subst* y3101@mark*) (if (null? y3100@subst*) '#f (if (eq? (car y3100@subst*) 'shift) (y30fe@search (cdr y3100@subst*) (cdr y3101@mark*)) ((lambda (y3104@rib) ((lambda (y3106@t) (if y3106@t ((lambda (y3108@ht) ((lambda (y310a@si) ((lambda (y310c@i) (if y310c@i (vector-ref (y2c4a@rib-label* y3104@rib) y310c@i) (y30fe@search (cdr y3100@subst*) y3101@mark*))) (and y310a@si (y2cc3@same-marks*? y3101@mark* (y2c48@rib-mark** y3104@rib) (reverse y310a@si))))) (hashtable-ref y3108@ht y30fc@sym '#f))) y3106@t) ((letrec ((y310e@f (lambda (y3110@sym* y3111@mark** y3112@label*) (if (null? y3110@sym*) (y30fe@search (cdr y3100@subst*) y3101@mark*) (if (and (eq? (car y3110@sym*) y30fc@sym) (y2caf@same-marks? (car y3111@mark**) y3101@mark*)) (car y3112@label*) (y310e@f (cdr y3110@sym*) (cdr y3111@mark**) (cdr y3112@label*))))))) y310e@f) (y2c46@rib-sym* y3104@rib) (y2c48@rib-mark** y3104@rib) (y2c4a@rib-label* y3104@rib)))) (y2c4c@rib-sealed/freq y3104@rib))) (car y3100@subst*))))))) y30fe@search) (y2c7b@stx-subst* y30fa@id) (y2c79@stx-mark* y30fa@id))) (y2cad@id->sym y30fa@id)))) (set! y2cc9@label->binding (lambda (y3116@x y3117@r) ((lambda (y311a@t) (if y311a@t ((lambda (y311c@b) (if (and (pair? y311c@b) (eq? (car y311c@b) '$core-rtd)) (cons '$rtd (map y2e6c@bless (cdr y311c@b))) (if (and (pair? y311c@b) (eq? (car y311c@b) 'global-rtd)) ((lambda (y311e@lib y311f@loc) (cons '$rtd (symbol-value y311f@loc))) (cadr y311c@b) (cddr y311c@b)) y311c@b))) y311a@t) ((lambda (y3122@t) (if y3122@t (cdr y3122@t) ((lambda (y3124@t) (if y3124@t ((lambda (y3126@env) ((lambda (y3128@t) (if y3128@t ((lambda (y312a@p) (cons* 'lexical (cdr y312a@p) '#f)) y3128@t) '(displaced-lexical . #f))) (assq y3116@x (y2f63@interaction-env-locs y3126@env)))) y3124@t) '(displaced-lexical . #f))) (y2fad@top-level-context)))) (assq y3116@x y3117@r)))) (y2ace@y296e@imported-label->binding y3116@x)))) (set! y2ccb@make-binding cons) (set! y2ccd@binding-type car) (set! y2ccf@binding-value cdr) (set! y2cd1@raise-unbound-error (lambda (y312c@id) (y2f9d@syntax-violation* '#f '"unbound identifier" y312c@id (y4cdc@y4b22@make-undefined-violation)))) (set! y2cd3@syntax-type (lambda (y312e@e y312f@r) (if (y2cab@id? y312e@e) ((lambda (y3132@id) ((lambda (y3134@label) ((lambda (y3136@b) ((lambda (y3138@type) ((lambda () (begin (if (not y3134@label) (y2cd1@raise-unbound-error y3132@id) (void)) ((lambda (y313a@t) (if (memv y313a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values y3138@type (y2ccf@binding-value y3136@b) y3132@id) (values 'other '#f '#f))) y3138@type))))) (y2ccd@binding-type y3136@b))) (y2cc9@label->binding y3134@label y312f@r))) (y2cc5@id->label y3132@id))) y312e@e) (if (y2c9d@syntax-pair? y312e@e) ((lambda (y313c@id) (if (y2cab@id? y313c@id) ((lambda (y313e@label) ((lambda (y3140@b) ((lambda (y3142@type) ((lambda () (begin (if (not y313e@label) (y2cd1@raise-unbound-error y313c@id) (void)) ((lambda (y3144@t) (if (memv y3144@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values y3142@type (y2ccf@binding-value y3140@b) y313c@id) (values 'call '#f '#f))) y3142@type))))) (y2ccd@binding-type y3140@b))) (y2cc9@label->binding y313e@label y312f@r))) (y2cc5@id->label y313c@id)) (values 'call '#f '#f))) (y2ca5@syntax-car y312e@e)) ((lambda (y3146@d) (if (y2cbb@self-evaluating? y3146@d) (values 'constant y3146@d '#f) (values 'other '#f '#f))) (y2cc1@stx->datum y312e@e)))))) (set! y2ce1@sanitize-binding (lambda (y3148@x y3149@src) (if (procedure? y3148@x) (cons* 'local-macro y3148@x y3149@src) (if (and (pair? y3148@x) (eq? (car y3148@x) 'macro!) (procedure? (cdr y3148@x))) (cons* 'local-macro! (cdr y3148@x) y3149@src) (if (and (pair? y3148@x) (eq? (car y3148@x) '$rtd)) y3148@x (assertion-violation 'expand '"invalid transformer" y3148@x)))))) (set! y2ce3@make-variable-transformer (lambda (y314c@x) (if (procedure? y314c@x) (cons 'macro! y314c@x) (assertion-violation 'make-variable-transformer '"not a procedure" y314c@x)))) (set! y2ce5@variable-transformer? (lambda (y314e@x) (and (pair? y314e@x) (eq? (car y314e@x) 'macro!) (procedure? (cdr y314e@x))))) (set! y2ce7@variable-transformer-procedure (lambda (y3150@x) (if (y2ce5@variable-transformer? y3150@x) (cdr y3150@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" y3150@x)))) (set! y2ce9@make-eval-transformer (lambda (y3152@x) (y2ce1@sanitize-binding (eval-core (y28a9@y2861@expanded->core y3152@x)) y3152@x))) (set! y2e3a@parse-define (lambda (y3154@x) ((lambda (y3156@t) ((lambda (y3158@ls/false) (if (and y3158@ls/false (apply (lambda (y315a@id y315b@fmls y315c@b y315d@b*) (y2cab@id? y315a@id)) y3158@ls/false)) (apply (lambda (y3162@id y3163@fmls y3164@b y3165@b*) (begin (y2edc@verify-formals y3163@fmls y3154@x) (values y3162@id (cons 'defun (cons y3163@fmls (cons y3164@b y3165@b*)))))) y3158@ls/false) ((lambda (y316a@t) ((lambda (y316c@ls/false) (if (and y316c@ls/false (apply (lambda (y316e@id y316f@val) (y2cab@id? y316e@id)) y316c@ls/false)) (apply (lambda (y3172@id y3173@val) (values y3172@id (cons 'expr y3173@val))) y316c@ls/false) ((lambda (y3176@t) ((lambda (y3178@ls/false) (if (and y3178@ls/false (apply (lambda (y317a@id) (y2cab@id? y317a@id)) y3178@ls/false)) (apply (lambda (y317c@id) (values y317c@id (cons 'expr (y2e6c@bless '(void))))) y3178@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3176@t))) (y2eb6@syntax-dispatch y3176@t '(_ any)))) y316a@t))) (y2eb6@syntax-dispatch y316a@t '(_ any any)))) y3156@t))) (y2eb6@syntax-dispatch y3156@t '(_ (any . any) any . each-any)))) y3154@x))) (set! y2e3c@parse-define-syntax (lambda (y317e@x) ((lambda (y3180@t) ((lambda (y3182@ls/false) (if (and y3182@ls/false (apply (lambda (y3184@id y3185@val) (y2cab@id? y3184@id)) y3182@ls/false)) (apply (lambda (y3188@id y3189@val) (values y3188@id y3189@val)) y3182@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3180@t))) (y2eb6@syntax-dispatch y3180@t '(_ any any)))) y317e@x))) (set! y2e3e@scheme-stx-hashtable (make-eq-hashtable)) (set! y2e40@scheme-stx (lambda (y318c@sym) (or (hashtable-ref y2e3e@scheme-stx-hashtable y318c@sym '#f) ((lambda (y318e@subst) ((lambda (y3190@stx) ((lambda (y3192@stx) ((lambda () (begin (hashtable-set! y2e3e@scheme-stx-hashtable y318c@sym y3192@stx) y3192@stx)))) ((lambda (y3194@t) (if y3194@t ((lambda (y3196@x) ((lambda (y3198@name y3199@label) (y2c97@add-subst (y2c44@make-rib (list y3198@name) (list y2c27@top-mark*) (list y3199@label) '#f '#f) y3190@stx)) (car y3196@x) (cdr y3196@x))) y3194@t) y3190@stx)) (assq y318c@sym y318e@subst)))) (y2c75@make-stx y318c@sym y2c27@top-mark* '() '()))) (y2aa4@y291a@library-subst (y2ac8@y2962@find-library-by-name '(psyntax system $all))))))) (set! y2e42@lexical-var car) (set! y2e44@lexical-mutable? cdr) (set! y2e46@set-lexical-mutable! set-cdr!) (set! y2e48@add-lexical (lambda (y319c@lab y319d@lex y319e@r) (cons (cons* y319c@lab 'lexical y319d@lex '#f) y319e@r))) (set! y2e4a@add-lexicals (lambda (y31a2@lab* y31a3@lex* y31a4@r) (if (null? y31a2@lab*) y31a4@r (y2e4a@add-lexicals (cdr y31a2@lab*) (cdr y31a3@lex*) (y2e48@add-lexical (car y31a2@lab*) (car y31a3@lex*) y31a4@r))))) (set! y2e4c@letrec-helper (lambda (y31a8@e y31a9@r y31aa@mr y31ab@build) ((lambda (y31b0@t) ((lambda (y31b2@ls/false) (if y31b2@ls/false (apply (lambda (y31b4@lhs* y31b5@rhs* y31b6@b y31b7@b*) (if (not (y2cb5@valid-bound-ids? y31b4@lhs*)) (y2e70@invalid-fmls-error y31a8@e y31b4@lhs*) ((lambda (y31bc@lex* y31bd@lab*) ((lambda (y31c0@rib y31c1@r) ((lambda (y31c4@body y31c5@rhs*) (y31ab@build '#f y31bc@lex* y31c5@rhs* y31c4@body)) (y2eee@chi-internal (y2c97@add-subst y31c0@rib (cons y31b6@b y31b7@b*)) y31c1@r y31aa@mr) (y2ed4@chi-expr* (map (lambda (y31c8@x) (y2c97@add-subst y31c0@rib y31c8@x)) y31b5@rhs*) y31c1@r y31aa@mr))) (y2c66@make-full-rib y31b4@lhs* y31bd@lab*) (y2e4a@add-lexicals y31bd@lab* y31bc@lex* y31a9@r))) (map y2c2b@gen-lexical y31b4@lhs*) (map y2c2f@gen-label y31b4@lhs*)))) y31b2@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y31b0@t))) (y2eb6@syntax-dispatch y31b0@t '(_ #(each (any any)) any . each-any)))) y31a8@e))) (set! y2e4e@letrec-transformer (lambda (y31ca@e y31cb@r y31cc@mr) (y2e4c@letrec-helper y31ca@e y31cb@r y31cc@mr y2c0c@y2b7d@build-letrec))) (set! y2e50@letrec*-transformer (lambda (y31d0@e y31d1@r y31d2@mr) (y2e4c@letrec-helper y31d0@e y31d1@r y31d2@mr y2c0d@y2b7f@build-letrec*))) (set! y2e52@fluid-let-syntax-transformer (lambda (y31d6@e y31d7@r y31d8@mr) ((lambda (y31dd@lookup) (begin (set! y31dd@lookup (lambda (y31f0@x) (or (y2cc5@id->label y31f0@x) (y2f9f@syntax-violation '#f '"unbound identifier" y31d6@e y31f0@x)))) ((lambda (y31de@t) ((lambda (y31e0@ls/false) (if y31e0@ls/false (apply (lambda (y31e2@lhs* y31e3@rhs* y31e4@b y31e5@b*) (if (not (y2cb5@valid-bound-ids? y31e2@lhs*)) (y2e70@invalid-fmls-error y31d6@e y31e2@lhs*) ((lambda (y31ea@lab* y31eb@rhs*) (y2eee@chi-internal (cons y31e4@b y31e5@b*) (append (map cons y31ea@lab* y31eb@rhs*) y31d7@r) (append (map cons y31ea@lab* y31eb@rhs*) y31d8@mr))) (map y31dd@lookup y31e2@lhs*) (map (lambda (y31ee@x) (y2ce9@make-eval-transformer (y2f13@expand-transformer y31ee@x y31d8@mr))) y31e3@rhs*)))) y31e0@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y31de@t))) (y2eb6@syntax-dispatch y31de@t '(_ #(each (any any)) any . each-any)))) y31d6@e))) '#f))) (set! y2e54@type-descriptor-transformer (lambda (y31f2@e y31f3@r y31f4@mr) ((lambda (y31f8@t) ((lambda (y31fa@ls/false) (if (and y31fa@ls/false (apply (lambda (y31fc@id) (y2cab@id? y31fc@id)) y31fa@ls/false)) (apply (lambda (y31fe@id) ((lambda (y3200@lab) ((lambda (y3202@b) ((lambda (y3204@type) ((lambda () (begin (if (not y3200@lab) (y2cd1@raise-unbound-error y31fe@id) (void)) (if (not (and (eq? y3204@type '$rtd) (not (list? (y2ccf@binding-value y3202@b))))) (y2f9f@syntax-violation '#f '"not a record type" y31f2@e) (void)) (list 'quote (y2ccf@binding-value y3202@b)))))) (y2ccd@binding-type y3202@b))) (y2cc9@label->binding y3200@lab y31f3@r))) (y2cc5@id->label y31fe@id))) y31fa@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y31f8@t))) (y2eb6@syntax-dispatch y31f8@t '(_ any)))) y31f2@e))) (set! y2e56@record-type-descriptor-transformer (lambda (y3206@e y3207@r y3208@mr) ((lambda (y320c@t) ((lambda (y320e@ls/false) (if (and y320e@ls/false (apply (lambda (y3210@id) (y2cab@id? y3210@id)) y320e@ls/false)) (apply (lambda (y3212@id) ((lambda (y3214@lab) ((lambda (y3216@b) ((lambda (y3218@type) ((lambda () (begin (if (not y3214@lab) (y2cd1@raise-unbound-error y3212@id) (void)) (if (not (and (eq? y3218@type '$rtd) (list? (y2ccf@binding-value y3216@b)))) (y2f9f@syntax-violation '#f '"not a record type" y3206@e) (void)) (y2ed8@chi-expr (car (y2ccf@binding-value y3216@b)) y3207@r y3208@mr))))) (y2ccd@binding-type y3216@b))) (y2cc9@label->binding y3214@lab y3207@r))) (y2cc5@id->label y3212@id))) y320e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y320c@t))) (y2eb6@syntax-dispatch y320c@t '(_ any)))) y3206@e))) (set! y2e58@record-constructor-descriptor-transformer (lambda (y321a@e y321b@r y321c@mr) ((lambda (y3220@t) ((lambda (y3222@ls/false) (if (and y3222@ls/false (apply (lambda (y3224@id) (y2cab@id? y3224@id)) y3222@ls/false)) (apply (lambda (y3226@id) ((lambda (y3228@lab) ((lambda (y322a@b) ((lambda (y322c@type) ((lambda () (begin (if (not y3228@lab) (y2cd1@raise-unbound-error y3226@id) (void)) (if (not (and (eq? y322c@type '$rtd) (list? (y2ccf@binding-value y322a@b)))) (y2f9f@syntax-violation '#f '"invalid type" y321a@e) (void)) (y2ed8@chi-expr (cadr (y2ccf@binding-value y322a@b)) y321b@r y321c@mr))))) (y2ccd@binding-type y322a@b))) (y2cc9@label->binding y3228@lab y321b@r))) (y2cc5@id->label y3226@id))) y3222@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3220@t))) (y2eb6@syntax-dispatch y3220@t '(_ any)))) y321a@e))) (set! y2e5a@when-macro (lambda (y322e@e) ((lambda (y3230@t) ((lambda (y3232@ls/false) (if y3232@ls/false (apply (lambda (y3234@test y3235@e y3236@e*) (y2e6c@bless (list 'if y3234@test (cons 'begin (cons y3235@e y3236@e*))))) y3232@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3230@t))) (y2eb6@syntax-dispatch y3230@t '(_ any any . each-any)))) y322e@e))) (set! y2e5c@unless-macro (lambda (y323a@e) ((lambda (y323c@t) ((lambda (y323e@ls/false) (if y323e@ls/false (apply (lambda (y3240@test y3241@e y3242@e*) (y2e6c@bless (list 'if (list 'not y3240@test) (cons 'begin (cons y3241@e y3242@e*))))) y323e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y323c@t))) (y2eb6@syntax-dispatch y323c@t '(_ any any . each-any)))) y323a@e))) (set! y2e5e@if-transformer (lambda (y3246@e y3247@r y3248@mr) ((lambda (y324c@t) ((lambda (y324e@ls/false) (if y324e@ls/false (apply (lambda (y3250@e0 y3251@e1 y3252@e2) (list 'if (y2ed8@chi-expr y3250@e0 y3247@r y3248@mr) (y2ed8@chi-expr y3251@e1 y3247@r y3248@mr) (y2ed8@chi-expr y3252@e2 y3247@r y3248@mr))) y324e@ls/false) ((lambda (y3256@t) ((lambda (y3258@ls/false) (if y3258@ls/false (apply (lambda (y325a@e0 y325b@e1) (list 'if (y2ed8@chi-expr y325a@e0 y3247@r y3248@mr) (y2ed8@chi-expr y325b@e1 y3247@r y3248@mr) (y2c0b@y2b7b@build-void))) y3258@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3256@t))) (y2eb6@syntax-dispatch y3256@t '(_ any any)))) y324c@t))) (y2eb6@syntax-dispatch y324c@t '(_ any any any)))) y3246@e))) (set! y2e60@and-transformer (lambda (y325e@e y325f@r y3260@mr) ((lambda (y3264@t) ((lambda (y3266@ls/false) (if y3266@ls/false (apply (lambda (y3268@e*) (cons 'and (y2ed4@chi-expr* y3268@e* y325f@r y3260@mr))) y3266@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3264@t))) (y2eb6@syntax-dispatch y3264@t '(_ . each-any)))) y325e@e))) (set! y2e62@or-transformer (lambda (y326a@e y326b@r y326c@mr) ((lambda (y3270@t) ((lambda (y3272@ls/false) (if y3272@ls/false (apply (lambda (y3274@e*) (cons 'or (y2ed4@chi-expr* y3274@e* y326b@r y326c@mr))) y3272@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3270@t))) (y2eb6@syntax-dispatch y3270@t '(_ . each-any)))) y326a@e))) (set! y2e64@case-macro (lambda (y3276@e) ((lambda (y3279@build-last y327b@build-one) (begin (set! y3279@build-last (lambda (y32a0@cls) ((lambda (y32a2@t) ((lambda (y32a4@ls/false) (if y32a4@ls/false (apply (lambda (y32a6@e y32a7@e*) (cons 'begin (cons y32a6@e y32a7@e*))) y32a4@ls/false) ((lambda (y32aa@t) ((lambda (y32ac@ls/false) (if y32ac@ls/false (apply (lambda () (y327b@build-one y32a0@cls '(if #f #f))) y32ac@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y32aa@t))) (y2eb6@syntax-dispatch y32aa@t '_))) y32a2@t))) (y2eb6@syntax-dispatch y32a2@t '(#(scheme-id else) any . each-any)))) y32a0@cls))) (set! y327b@build-one (lambda (y3292@cls y3293@k) ((lambda (y3296@t) ((lambda (y3298@ls/false) (if y3298@ls/false (apply (lambda (y329a@d* y329b@e y329c@e*) (list 'if (list 'memv 't (list 'quote y329a@d*)) (cons 'begin (cons y329b@e y329c@e*)) y3293@k)) y3298@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3296@t))) (y2eb6@syntax-dispatch y3296@t '(each-any any . each-any)))) y3292@cls))) ((lambda (y327c@t) ((lambda (y327e@ls/false) (if y327e@ls/false (apply (lambda (y3280@expr) (y2e6c@bless (cons 'let (cons (list (list 't y3280@expr)) '((if #f #f)))))) y327e@ls/false) ((lambda (y3282@t) ((lambda (y3284@ls/false) (if y3284@ls/false (apply (lambda (y3286@expr y3287@cls y3288@cls*) (y2e6c@bless (list 'let (list (list 't y3286@expr)) ((letrec ((y328c@f (lambda (y328e@cls y328f@cls*) (if (null? y328f@cls*) (y3279@build-last y328e@cls) (y327b@build-one y328e@cls (y328c@f (car y328f@cls*) (cdr y328f@cls*))))))) y328c@f) y3287@cls y3288@cls*)))) y3284@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3282@t))) (y2eb6@syntax-dispatch y3282@t '(_ any any . each-any)))) y327c@t))) (y2eb6@syntax-dispatch y327c@t '(_ any)))) y3276@e))) '#f '#f))) (set! y2e66@quote-transformer (lambda (y32ae@e y32af@r y32b0@mr) ((lambda (y32b4@t) ((lambda (y32b6@ls/false) (if y32b6@ls/false (apply (lambda (y32b8@datum) (list 'quote (y2cc1@stx->datum y32b8@datum))) y32b6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y32b4@t))) (y2eb6@syntax-dispatch y32b4@t '(_ any)))) y32ae@e))) (set! y2e68@case-lambda-transformer (lambda (y32ba@e y32bb@r y32bc@mr) ((lambda (y32c0@t) ((lambda (y32c2@ls/false) (if y32c2@ls/false (apply (lambda (y32c4@fmls* y32c5@b* y32c6@b**) (call-with-values (lambda () (y2ee0@chi-lambda-clause* y32ba@e y32c4@fmls* (map cons y32c5@b* y32c6@b**) y32bb@r y32bc@mr)) (lambda (y32ce@y32cb y32cf@y32cd) ((lambda (y32d2@body* y32d3@fmls*) (y2c08@y2b49@build-case-lambda '#f y32d3@fmls* y32d2@body*)) y32cf@y32cd y32ce@y32cb)))) y32c2@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y32c0@t))) (y2eb6@syntax-dispatch y32c0@t '(_ . #(each (any any . each-any)))))) y32ba@e))) (set! y2e6a@lambda-transformer (lambda (y32d6@e y32d7@r y32d8@mr) ((lambda (y32dc@t) ((lambda (y32de@ls/false) (if y32de@ls/false (apply (lambda (y32e0@fmls y32e1@b y32e2@b*) (call-with-values (lambda () (y2ede@chi-lambda-clause y32d6@e y32e0@fmls (cons y32e1@b y32e2@b*) y32d7@r y32d8@mr)) (lambda (y32ea@y32e7 y32eb@y32e9) ((lambda (y32ee@body y32ef@fmls) (y2c07@y2b47@build-lambda '#f y32ef@fmls y32ee@body)) y32eb@y32e9 y32ea@y32e7)))) y32de@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y32dc@t))) (y2eb6@syntax-dispatch y32dc@t '(_ any any . each-any)))) y32d6@e))) (set! y2e6c@bless (lambda (y32f2@x) (y2c93@mkstx ((letrec ((y32f4@f (lambda (y32f6@x) (if (y2c73@stx? y32f6@x) y32f6@x (if (pair? y32f6@x) (cons (y32f4@f (car y32f6@x)) (y32f4@f (cdr y32f6@x))) (if (symbol? y32f6@x) (y2e40@scheme-stx y32f6@x) (if (vector? y32f6@x) (vector-map y32f4@f y32f6@x) y32f6@x))))))) y32f4@f) y32f2@x) '() '() '()))) (set! y2e6e@with-syntax-macro (lambda (y32f8@e) ((lambda (y32fa@t) ((lambda (y32fc@ls/false) (if y32fc@ls/false (apply (lambda (y32fe@pat* y32ff@expr* y3300@b y3301@b*) ((lambda (y3306@idn*) (begin (y2edc@verify-formals (map car y3306@idn*) y32f8@e) ((lambda (y3308@t*) (y2e6c@bless (list 'let (map list y3308@t* y32ff@expr*) ((letrec ((y330a@f (lambda (y330c@pat* y330d@t*) (if (null? y330c@pat*) (cons 'begin (cons '#f (cons y3300@b y3301@b*))) (list 'syntax-case (car y330d@t*) '() (list (car y330c@pat*) (y330a@f (cdr y330c@pat*) (cdr y330d@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car y330c@pat*)) (car y330d@t*)))))))) y330a@f) y32fe@pat* y3308@t*)))) (y2f8d@generate-temporaries y32ff@expr*)))) ((letrec ((y3310@f (lambda (y3312@pat*) (if (null? y3312@pat*) '() (call-with-values (lambda () (y2eb4@convert-pattern (car y3312@pat*) '())) (lambda (y3318@y3315 y3319@y3317) ((lambda (y331c@idn* y331d@pat) (append y331c@idn* (y3310@f (cdr y3312@pat*)))) y3319@y3317 y3318@y3315))))))) y3310@f) y32fe@pat*))) y32fc@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y32fa@t))) (y2eb6@syntax-dispatch y32fa@t '(_ #(each (any any)) any . each-any)))) y32f8@e))) (set! y2e70@invalid-fmls-error (lambda (y3320@stx y3321@fmls) ((lambda (y3324@t) ((lambda (y3326@ls/false) (if y3326@ls/false (apply (lambda (y3328@id* y3329@last) ((letrec ((y332c@f (lambda (y332e@id*) (if (null? y332e@id*) (values) (if (not (y2cab@id? (car y332e@id*))) (y2f9f@syntax-violation '#f '"not an identifier" y3320@stx (car y332e@id*)) (begin (y332c@f (cdr y332e@id*)) (if (y2cb9@bound-id-member? (car y332e@id*) (cdr y332e@id*)) (y2f9f@syntax-violation '#f '"duplicate binding" y3320@stx (car y332e@id*)) (void)))))))) y332c@f) (if (y2cab@id? y3329@last) (cons y3329@last y3328@id*) (if (y2ca1@syntax-null? y3329@last) y3328@id* (y2f9f@syntax-violation '#f '"not an identifier" y3320@stx y3329@last))))) y3326@ls/false) ((lambda (y3330@t) ((lambda (y3332@ls/false) (if y3332@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"malformed binding form" y3320@stx y3321@fmls)) y3332@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3330@t))) (y2eb6@syntax-dispatch y3330@t '_))) y3324@t))) (y2eb6@syntax-dispatch y3324@t '#(each+ any () any)))) y3321@fmls))) (set! y2e72@let-macro (lambda (y3334@stx) ((lambda (y3336@t) ((lambda (y3338@ls/false) (if y3338@ls/false (apply (lambda (y333a@lhs* y333b@rhs* y333c@b y333d@b*) (if (y2cb5@valid-bound-ids? y333a@lhs*) (y2e6c@bless (cons (cons 'lambda (cons y333a@lhs* (cons y333c@b y333d@b*))) y333b@rhs*)) (y2e70@invalid-fmls-error y3334@stx y333a@lhs*))) y3338@ls/false) ((lambda (y3342@t) ((lambda (y3344@ls/false) (if (and y3344@ls/false (apply (lambda (y3346@f y3347@lhs* y3348@rhs* y3349@b y334a@b*) (y2cab@id? y3346@f)) y3344@ls/false)) (apply (lambda (y3350@f y3351@lhs* y3352@rhs* y3353@b y3354@b*) (if (y2cb5@valid-bound-ids? y3351@lhs*) (y2e6c@bless (cons (list 'letrec (list (list y3350@f (cons 'lambda (cons y3351@lhs* (cons y3353@b y3354@b*))))) y3350@f) y3352@rhs*)) (y2e70@invalid-fmls-error y3334@stx y3351@lhs*))) y3344@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3342@t))) (y2eb6@syntax-dispatch y3342@t '(_ any #(each (any any)) any . each-any)))) y3336@t))) (y2eb6@syntax-dispatch y3336@t '(_ #(each (any any)) any . each-any)))) y3334@stx))) (set! y2e74@let-values-macro (lambda (y335a@stx) ((lambda (y335d@rename y335f@rename*) (begin (set! y335d@rename (lambda (y33c2@x y33c3@old* y33c4@new*) (begin (if (not (y2cab@id? y33c2@x)) (y2f9f@syntax-violation '#f '"not an indentifier" y335a@stx y33c2@x) (void)) (if (y2cb9@bound-id-member? y33c2@x y33c3@old*) (y2f9f@syntax-violation '#f '"duplicate binding" y335a@stx y33c2@x) (void)) ((lambda (y33c8@y) (values y33c8@y (cons y33c2@x y33c3@old*) (cons y33c8@y y33c4@new*))) (gensym (y2fa5@syntax->datum y33c2@x)))))) (set! y335f@rename* (lambda (y33b0@x* y33b1@old* y33b2@new*) (if (null? y33b0@x*) (values '() y33b1@old* y33b2@new*) (call-with-values (lambda () (y335d@rename (car y33b0@x*) y33b1@old* y33b2@new*)) (lambda (y33b6@x y33b7@old* y33b8@new*) (call-with-values (lambda () (y335f@rename* (cdr y33b0@x*) y33b7@old* y33b8@new*)) (lambda (y33bc@x* y33bd@old* y33be@new*) (values (cons y33b6@x y33bc@x*) y33bd@old* y33be@new*)))))))) ((lambda (y3360@t) ((lambda (y3362@ls/false) (if y3362@ls/false (apply (lambda (y3364@b y3365@b*) (cons* (y2e6c@bless 'let) '() y3364@b y3365@b*)) y3362@ls/false) ((lambda (y3368@t) ((lambda (y336a@ls/false) (if y336a@ls/false (apply (lambda (y336c@lhs* y336d@rhs* y336e@b y336f@b*) (y2e6c@bless ((letrec ((y3374@f (lambda (y3376@lhs* y3377@rhs* y3378@old* y3379@new*) (if (null? y3376@lhs*) (cons 'let (cons (map list y3378@old* y3379@new*) (cons y336e@b y336f@b*))) ((lambda (y337e@t) ((lambda (y3380@ls/false) (if y3380@ls/false (apply (lambda (y3382@x*) (call-with-values (lambda () (y335f@rename* y3382@x* y3378@old* y3379@new*)) (lambda (y338a@y3385 y338b@y3387 y338c@y3389) ((lambda (y3390@new* y3391@old* y3392@y*) (list 'call-with-values (list 'lambda '() (car y3377@rhs*)) (list 'lambda y3392@y* (y3374@f (cdr y3376@lhs*) (cdr y3377@rhs*) y3391@old* y3390@new*)))) y338c@y3389 y338b@y3387 y338a@y3385)))) y3380@ls/false) ((lambda (y3396@t) ((lambda (y3398@ls/false) (if y3398@ls/false (apply (lambda (y339a@x* y339b@x) (call-with-values (lambda () (y335d@rename y339b@x y3378@old* y3379@new*)) (lambda (y339e@y y339f@old* y33a0@new*) (call-with-values (lambda () (y335f@rename* y339a@x* y339f@old* y33a0@new*)) (lambda (y33a4@y* y33a5@old* y33a6@new*) (list 'call-with-values (list 'lambda '() (car y3377@rhs*)) (list 'lambda (append y33a4@y* y339e@y) (y3374@f (cdr y3376@lhs*) (cdr y3377@rhs*) y33a5@old* y33a6@new*)))))))) y3398@ls/false) ((lambda (y33aa@t) ((lambda (y33ac@ls/false) (if y33ac@ls/false (apply (lambda (y33ae@others) (y2f9f@syntax-violation '#f '"malformed bindings" y335a@stx y33ae@others)) y33ac@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y33aa@t))) (y2eb6@syntax-dispatch y33aa@t 'any))) y3396@t))) (y2eb6@syntax-dispatch y3396@t '#(each+ any () any)))) y337e@t))) (y2eb6@syntax-dispatch y337e@t 'each-any))) (car y3376@lhs*)))))) y3374@f) y336c@lhs* y336d@rhs* '() '()))) y336a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3368@t))) (y2eb6@syntax-dispatch y3368@t '(_ #(each (any any)) any . each-any)))) y3360@t))) (y2eb6@syntax-dispatch y3360@t '(_ () any . each-any)))) y335a@stx))) '#f '#f))) (set! y2e76@let*-values-macro (lambda (y33ca@stx) ((lambda (y33cd@check) (begin (set! y33cd@check (lambda (y33fc@x*) (if (not (null? y33fc@x*)) ((lambda (y33fe@x) (begin (if (not (y2cab@id? y33fe@x)) (y2f9f@syntax-violation '#f '"not an identifier" y33ca@stx y33fe@x) (void)) (y33cd@check (cdr y33fc@x*)) (if (y2cb9@bound-id-member? y33fe@x (cdr y33fc@x*)) (y2f9f@syntax-violation '#f '"duplicate identifier" y33ca@stx y33fe@x) (void)))) (car y33fc@x*)) (void)))) ((lambda (y33ce@t) ((lambda (y33d0@ls/false) (if y33d0@ls/false (apply (lambda (y33d2@b y33d3@b*) (cons* (y2e6c@bless 'let) '() y33d2@b y33d3@b*)) y33d0@ls/false) ((lambda (y33d6@t) ((lambda (y33d8@ls/false) (if y33d8@ls/false (apply (lambda (y33da@lhs* y33db@rhs* y33dc@b y33dd@b*) (y2e6c@bless ((letrec ((y33e2@f (lambda (y33e4@lhs* y33e5@rhs*) (if (null? y33e4@lhs*) (cons 'begin (cons y33dc@b y33dd@b*)) ((lambda (y33e8@t) ((lambda (y33ea@ls/false) (if y33ea@ls/false (apply (lambda (y33ec@x*) (begin (y33cd@check y33ec@x*) (list 'call-with-values (list 'lambda '() (car y33e5@rhs*)) (list 'lambda y33ec@x* (y33e2@f (cdr y33e4@lhs*) (cdr y33e5@rhs*)))))) y33ea@ls/false) ((lambda (y33ee@t) ((lambda (y33f0@ls/false) (if y33f0@ls/false (apply (lambda (y33f2@x* y33f3@x) (begin (y33cd@check (cons y33f3@x y33f2@x*)) (list 'call-with-values (list 'lambda '() (car y33e5@rhs*)) (list 'lambda (append y33f2@x* y33f3@x) (y33e2@f (cdr y33e4@lhs*) (cdr y33e5@rhs*)))))) y33f0@ls/false) ((lambda (y33f6@t) ((lambda (y33f8@ls/false) (if y33f8@ls/false (apply (lambda (y33fa@others) (y2f9f@syntax-violation '#f '"malformed bindings" y33ca@stx y33fa@others)) y33f8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y33f6@t))) (y2eb6@syntax-dispatch y33f6@t 'any))) y33ee@t))) (y2eb6@syntax-dispatch y33ee@t '#(each+ any () any)))) y33e8@t))) (y2eb6@syntax-dispatch y33e8@t 'each-any))) (car y33e4@lhs*)))))) y33e2@f) y33da@lhs* y33db@rhs*))) y33d8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y33d6@t))) (y2eb6@syntax-dispatch y33d6@t '(_ #(each (any any)) any . each-any)))) y33ce@t))) (y2eb6@syntax-dispatch y33ce@t '(_ () any . each-any)))) y33ca@stx))) '#f))) (set! y2e78@trace-lambda-macro (lambda (y3400@stx) ((lambda (y3402@t) ((lambda (y3404@ls/false) (if y3404@ls/false (apply (lambda (y3406@who y3407@fmls y3408@b y3409@b*) (if (y2cb5@valid-bound-ids? y3407@fmls) (y2e6c@bless (list 'make-traced-procedure (list 'quote y3406@who) (cons 'lambda (cons y3407@fmls (cons y3408@b y3409@b*))))) (y2e70@invalid-fmls-error y3400@stx y3407@fmls))) y3404@ls/false) ((lambda (y340e@t) ((lambda (y3410@ls/false) (if y3410@ls/false (apply (lambda (y3412@who y3413@fmls y3414@last y3415@b y3416@b*) (if (y2cb5@valid-bound-ids? (cons y3414@last y3413@fmls)) (y2e6c@bless (list 'make-traced-procedure (list 'quote y3412@who) (cons 'lambda (cons (append y3413@fmls y3414@last) (cons y3415@b y3416@b*))))) (y2e70@invalid-fmls-error y3400@stx (append y3413@fmls y3414@last)))) y3410@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y340e@t))) (y2eb6@syntax-dispatch y340e@t '(_ any #(each+ any () any) any . each-any)))) y3402@t))) (y2eb6@syntax-dispatch y3402@t '(_ any each-any any . each-any)))) y3400@stx))) (set! y2e7a@trace-define-macro (lambda (y341c@stx) ((lambda (y341e@t) ((lambda (y3420@ls/false) (if y3420@ls/false (apply (lambda (y3422@who y3423@fmls y3424@b y3425@b*) (if (y2cb5@valid-bound-ids? y3423@fmls) (y2e6c@bless (list 'define y3422@who (list 'make-traced-procedure (list 'quote y3422@who) (cons 'lambda (cons y3423@fmls (cons y3424@b y3425@b*)))))) (y2e70@invalid-fmls-error y341c@stx y3423@fmls))) y3420@ls/false) ((lambda (y342a@t) ((lambda (y342c@ls/false) (if y342c@ls/false (apply (lambda (y342e@who y342f@fmls y3430@last y3431@b y3432@b*) (if (y2cb5@valid-bound-ids? (cons y3430@last y342f@fmls)) (y2e6c@bless (list 'define y342e@who (list 'make-traced-procedure (list 'quote y342e@who) (cons 'lambda (cons (append y342f@fmls y3430@last) (cons y3431@b y3432@b*)))))) (y2e70@invalid-fmls-error y341c@stx (append y342f@fmls y3430@last)))) y342c@ls/false) ((lambda (y3438@t) ((lambda (y343a@ls/false) (if y343a@ls/false (apply (lambda (y343c@who y343d@expr) (if (y2cab@id? y343c@who) (y2e6c@bless (list 'define y343c@who (list 'let (list (list 'v y343d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote y343c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (y2f9f@syntax-violation '#f '"invalid name" y341c@stx))) y343a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3438@t))) (y2eb6@syntax-dispatch y3438@t '(_ any any)))) y342a@t))) (y2eb6@syntax-dispatch y342a@t '(_ (any . #(each+ any () any)) any . each-any)))) y341e@t))) (y2eb6@syntax-dispatch y341e@t '(_ (any . each-any) any . each-any)))) y341c@stx))) (set! y2e7c@trace-define-syntax-macro (lambda (y3440@stx) ((lambda (y3442@t) ((lambda (y3444@ls/false) (if y3444@ls/false (apply (lambda (y3446@who y3447@expr) (if (y2cab@id? y3446@who) (y2e6c@bless (list 'define-syntax y3446@who (list 'make-traced-macro (list 'quote y3446@who) y3447@expr))) (y2f9f@syntax-violation '#f '"invalid name" y3440@stx))) y3444@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3442@t))) (y2eb6@syntax-dispatch y3442@t '(_ any any)))) y3440@stx))) (set! y2e7e@trace-let/rec-syntax (lambda (y344a@who) (lambda (y344c@stx) ((lambda (y344e@t) ((lambda (y3450@ls/false) (if y3450@ls/false (apply (lambda (y3452@lhs* y3453@rhs* y3454@b y3455@b*) (if (y2cb5@valid-bound-ids? y3452@lhs*) ((lambda (y345a@rhs*) (y2e6c@bless (cons y344a@who (cons (map list y3452@lhs* y345a@rhs*) (cons y3454@b y3455@b*))))) (map (lambda (y345c@lhs y345d@rhs) (list 'make-traced-macro (list 'quote y345c@lhs) y345d@rhs)) y3452@lhs* y3453@rhs*)) (y2e70@invalid-fmls-error y344c@stx y3452@lhs*))) y3450@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y344e@t))) (y2eb6@syntax-dispatch y344e@t '(_ #(each (any any)) any . each-any)))) y344c@stx)))) (set! y2e80@trace-let-syntax-macro (y2e7e@trace-let/rec-syntax 'let-syntax)) (set! y2e82@trace-letrec-syntax-macro (y2e7e@trace-let/rec-syntax 'letrec-syntax)) (set! y2e84@guard-macro (lambda (y3460@x) ((lambda (y3463@gen-clauses) (begin (set! y3463@gen-clauses (lambda (y347a@con y347b@outerk y347c@clause*) ((lambda (y3481@f y3483@f*) (begin (set! y3481@f (lambda (y34ba@x y34bb@k) ((lambda (y34be@t) ((lambda (y34c0@ls/false) (if y34c0@ls/false (apply (lambda (y34c2@e y34c3@p) ((lambda (y34c6@t) (list 'let (list (list y34c6@t y34c2@e)) (list 'if y34c6@t (list y34c3@p y34c6@t) y34bb@k))) (gensym))) y34c0@ls/false) ((lambda (y34c8@t) ((lambda (y34ca@ls/false) (if y34ca@ls/false (apply (lambda (y34cc@e) ((lambda (y34ce@t) (list 'let (list (list y34ce@t y34cc@e)) (list 'if y34ce@t y34ce@t y34bb@k))) (gensym))) y34ca@ls/false) ((lambda (y34d0@t) ((lambda (y34d2@ls/false) (if y34d2@ls/false (apply (lambda (y34d4@e y34d5@v y34d6@v*) (list 'if y34d4@e (cons 'begin (cons y34d5@v y34d6@v*)) y34bb@k)) y34d2@ls/false) ((lambda (y34da@t) ((lambda (y34dc@ls/false) (if y34dc@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid guard clause" y34ba@x)) y34dc@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y34da@t))) (y2eb6@syntax-dispatch y34da@t '_))) y34d0@t))) (y2eb6@syntax-dispatch y34d0@t '(any any . each-any)))) y34c8@t))) (y2eb6@syntax-dispatch y34c8@t '(any)))) y34be@t))) (y2eb6@syntax-dispatch y34be@t '(any #(scheme-id =>) any)))) y34ba@x))) (set! y3483@f* (lambda (y3490@x*) ((lambda (y3492@t) ((lambda (y3494@ls/false) (if y3494@ls/false (apply (lambda () ((lambda (y3496@g) (values (list y3496@g (list 'lambda '() (list 'raise-continuable y347a@con))) y3496@g)) (gensym))) y3494@ls/false) ((lambda (y3498@t) ((lambda (y349a@ls/false) (if y349a@ls/false (apply (lambda (y349c@e y349d@e*) (values (cons 'begin (cons y349c@e y349d@e*)) '#f)) y349a@ls/false) ((lambda (y34a0@t) ((lambda (y34a2@ls/false) (if y34a2@ls/false (apply (lambda (y34a4@cls y34a5@cls*) (call-with-values (lambda () (y3483@f* y34a5@cls*)) (lambda (y34ac@y34a9 y34ad@y34ab) ((lambda (y34b0@g y34b1@e) (values (y3481@f y34a4@cls y34b1@e) y34b0@g)) y34ad@y34ab y34ac@y34a9)))) y34a2@ls/false) ((lambda (y34b4@t) ((lambda (y34b6@ls/false) (if y34b6@ls/false (apply (lambda (y34b8@others) (y2f9f@syntax-violation '#f '"invalid guard clause" y34b8@others)) y34b6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y34b4@t))) (y2eb6@syntax-dispatch y34b4@t 'any))) y34a0@t))) (y2eb6@syntax-dispatch y34a0@t '(any . any)))) y3498@t))) (y2eb6@syntax-dispatch y3498@t '((#(scheme-id else) any . each-any))))) y3492@t))) (y2eb6@syntax-dispatch y3492@t '()))) y3490@x*))) (call-with-values (lambda () (y3483@f* y347c@clause*)) (lambda (y3488@y3485 y3489@y3487) ((lambda (y348c@raisek y348d@code) (if y348c@raisek (list (list 'call/cc (list 'lambda (list y348c@raisek) (list y347b@outerk (list 'lambda '() y348d@code))))) (list y347b@outerk (list 'lambda '() y348d@code)))) y3489@y3487 y3488@y3485))))) '#f '#f))) ((lambda (y3464@t) ((lambda (y3466@ls/false) (if (and y3466@ls/false (apply (lambda (y3468@con y3469@clause* y346a@b y346b@b*) (y2cab@id? y3468@con)) y3466@ls/false)) (apply (lambda (y3470@con y3471@clause* y3472@b y3473@b*) ((lambda (y3478@outerk) (y2e6c@bless (list (list 'call/cc (list 'lambda (list y3478@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list y3470@con) (y3463@gen-clauses y3470@con y3478@outerk y3471@clause*)) (cons 'lambda (cons '() (cons y3472@b y3473@b*)))))))))) (gensym))) y3466@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3464@t))) (y2eb6@syntax-dispatch y3464@t '(_ (any . each-any) any . each-any)))) y3460@x))) '#f))) (set! y2e86@define-enumeration-macro (lambda (y34de@stx) ((lambda (y34e1@set? y34e3@remove-dups) (begin (set! y34e1@set? (lambda (y34fa@x) (or (null? y34fa@x) (and (not (memq (car y34fa@x) (cdr y34fa@x))) (y34e1@set? (cdr y34fa@x)))))) (set! y34e3@remove-dups (lambda (y34f8@ls) (if (null? y34f8@ls) '() (cons (car y34f8@ls) (y34e3@remove-dups (remq (car y34f8@ls) (cdr y34f8@ls))))))) ((lambda (y34e4@t) ((lambda (y34e6@ls/false) (if (and y34e6@ls/false (apply (lambda (y34e8@name y34e9@id* y34ea@maker) (and (y2cab@id? y34e8@name) (y2cab@id? y34ea@maker) (for-all y2cab@id? y34e9@id*))) y34e6@ls/false)) (apply (lambda (y34ee@name y34ef@id* y34f0@maker) ((lambda (y34f4@name* y34f5@mk) (y2e6c@bless (list 'begin (list 'define y34f5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote y34f4@name*)))) (list 'define-syntax y34ee@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote y34f4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote y34ee@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax y34f0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote y34f0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote y34f4@name*)) (cons 'syntax-violation (cons (list 'quote y34f0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons y34f5@mk '('(n* ...)))))))))))) (y34e3@remove-dups (y2fa5@syntax->datum y34ef@id*)) (gensym))) y34e6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y34e4@t))) (y2eb6@syntax-dispatch y34e4@t '(_ any each-any any)))) y34de@stx))) '#f '#f))) (set! y2e88@time-macro (lambda (y34fc@stx) ((lambda (y34fe@t) ((lambda (y3500@ls/false) (if y3500@ls/false (apply (lambda (y3502@expr) (y2e6c@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() y3502@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) y3500@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y34fe@t))) (y2eb6@syntax-dispatch y34fe@t '(_ any)))) y34fc@stx))) (set! y2e8a@delay-macro (lambda (y3504@stx) ((lambda (y3506@t) ((lambda (y3508@ls/false) (if y3508@ls/false (apply (lambda (y350a@expr) (y2e6c@bless (list 'make-promise (list 'lambda '() y350a@expr)))) y3508@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3506@t))) (y2eb6@syntax-dispatch y3506@t '(_ any)))) y3504@stx))) (set! y2e8c@assert-macro (lambda (y350c@stx) ((lambda (y350e@t) ((lambda (y3510@ls/false) (if y3510@ls/false (apply (lambda (y3512@expr) ((lambda (y3514@pos) (y2e6c@bless (list 'unless y3512@expr (list 'assertion-error (list 'quote y3512@expr) (list 'quote y3514@pos))))) (or (y2f97@expression-position y350c@stx) (y2f97@expression-position y3512@expr)))) y3510@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y350e@t))) (y2eb6@syntax-dispatch y350e@t '(_ any)))) y350c@stx))) (set! y2e8e@endianness-macro (lambda (y3516@stx) ((lambda (y3518@t) ((lambda (y351a@ls/false) (if y351a@ls/false (apply (lambda (y351c@e) ((lambda (y351e@t) (if (memv y351e@t '(little)) (y2e6c@bless ''little) (if (memv y351e@t '(big)) (y2e6c@bless ''big) (y2f9f@syntax-violation '#f '"endianness must be big or little" y3516@stx)))) (y2fa5@syntax->datum y351c@e))) y351a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3518@t))) (y2eb6@syntax-dispatch y3518@t '(_ any)))) y3516@stx))) (set! y2e90@identifier-syntax-macro (lambda (y3520@stx) ((lambda (y3522@t) ((lambda (y3524@ls/false) (if y3524@ls/false (apply (lambda (y3526@expr) (y2e6c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax y3526@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax y3526@expr) '((syntax (e* ...)))))))))) y3524@ls/false) ((lambda (y3528@t) ((lambda (y352a@ls/false) (if (and y352a@ls/false (apply (lambda (y352c@id1 y352d@expr1 y352e@id2 y352f@expr2 y3530@expr3) (and (y2cab@id? y352c@id1) (y2cab@id? y352e@id2) (y2cab@id? y352f@expr2))) y352a@ls/false)) (apply (lambda (y3536@id1 y3537@expr1 y3538@id2 y3539@expr2 y353a@expr3) (y2e6c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax y3537@expr1)) (list (list 'set! 'id y3539@expr2) (list 'syntax y353a@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons y3537@expr1 '(e* ...))))))))) y352a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3528@t))) (y2eb6@syntax-dispatch y3528@t '(_ (any any) ((#(scheme-id set!) any any) any))))) y3522@t))) (y2eb6@syntax-dispatch y3522@t '(_ any)))) y3520@stx))) (set! y2e92@do-macro (lambda (y3540@stx) ((lambda (y3543@bind) (begin (set! y3543@bind (lambda (y355a@x) ((lambda (y355c@t) ((lambda (y355e@ls/false) (if y355e@ls/false (apply (lambda (y3560@x y3561@init) (list y3560@x y3561@init y3560@x)) y355e@ls/false) ((lambda (y3564@t) ((lambda (y3566@ls/false) (if y3566@ls/false (apply (lambda (y3568@x y3569@init y356a@step) (list y3568@x y3569@init y356a@step)) y3566@ls/false) ((lambda (y356e@t) ((lambda (y3570@ls/false) (if y3570@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid binding" y3540@stx)) y3570@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y356e@t))) (y2eb6@syntax-dispatch y356e@t '_))) y3564@t))) (y2eb6@syntax-dispatch y3564@t '(any any any)))) y355c@t))) (y2eb6@syntax-dispatch y355c@t '(any any)))) y355a@x))) ((lambda (y3544@t) ((lambda (y3546@ls/false) (if y3546@ls/false (apply (lambda (y3548@binding* y3549@test y354a@expr* y354b@command*) ((lambda (y3550@t) ((lambda (y3552@ls/false) (if y3552@ls/false (apply (lambda (y3554@x* y3555@init* y3556@step*) (if (y2cb5@valid-bound-ids? y3554@x*) (y2e6c@bless (list 'letrec (list (list 'loop (list 'lambda y3554@x* (list 'if y3549@test (cons 'begin (cons '(if #f #f) y354a@expr*)) (cons 'begin (append y354b@command* (list (cons 'loop y3556@step*)))))))) (cons 'loop y3555@init*))) (y2f9f@syntax-violation '#f '"invalid bindings" y3540@stx))) y3552@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3550@t))) (y2eb6@syntax-dispatch y3550@t '#(each (any any any))))) (map y3543@bind y3548@binding*))) y3546@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3544@t))) (y2eb6@syntax-dispatch y3544@t '(_ each-any (any . each-any) . each-any)))) y3540@stx))) '#f))) (set! y2e94@let*-macro (lambda (y3572@stx) ((lambda (y3574@t) ((lambda (y3576@ls/false) (if (and y3576@ls/false (apply (lambda (y3578@lhs* y3579@rhs* y357a@b y357b@b*) (for-all y2cab@id? y3578@lhs*)) y3576@ls/false)) (apply (lambda (y3580@lhs* y3581@rhs* y3582@b y3583@b*) (y2e6c@bless ((letrec ((y3588@f (lambda (y358a@x*) (if (null? y358a@x*) (cons 'let (cons '() (cons y3582@b y3583@b*))) (list 'let (list (car y358a@x*)) (y3588@f (cdr y358a@x*))))))) y3588@f) (map list y3580@lhs* y3581@rhs*)))) y3576@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3574@t))) (y2eb6@syntax-dispatch y3574@t '(_ #(each (any any)) any . each-any)))) y3572@stx))) (set! y2e96@or-macro (lambda (y358c@stx) ((lambda (y358e@t) ((lambda (y3590@ls/false) (if y3590@ls/false (apply (lambda () '#f) y3590@ls/false) ((lambda (y3592@t) ((lambda (y3594@ls/false) (if y3594@ls/false (apply (lambda (y3596@e y3597@e*) (y2e6c@bless ((letrec ((y359a@f (lambda (y359c@e y359d@e*) (if (null? y359d@e*) (list 'begin '#f y359c@e) (list 'let (list (list 't y359c@e)) (list 'if 't 't (y359a@f (car y359d@e*) (cdr y359d@e*)))))))) y359a@f) y3596@e y3597@e*))) y3594@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3592@t))) (y2eb6@syntax-dispatch y3592@t '(_ any . each-any)))) y358e@t))) (y2eb6@syntax-dispatch y358e@t '(_)))) y358c@stx))) (set! y2e98@and-macro (lambda (y35a0@stx) ((lambda (y35a2@t) ((lambda (y35a4@ls/false) (if y35a4@ls/false (apply (lambda () '#t) y35a4@ls/false) ((lambda (y35a6@t) ((lambda (y35a8@ls/false) (if y35a8@ls/false (apply (lambda (y35aa@e y35ab@e*) (y2e6c@bless ((letrec ((y35ae@f (lambda (y35b0@e y35b1@e*) (if (null? y35b1@e*) (list 'begin '#f y35b0@e) (cons 'if (cons y35b0@e (cons (y35ae@f (car y35b1@e*) (cdr y35b1@e*)) '(#f)))))))) y35ae@f) y35aa@e y35ab@e*))) y35a8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y35a6@t))) (y2eb6@syntax-dispatch y35a6@t '(_ any . each-any)))) y35a2@t))) (y2eb6@syntax-dispatch y35a2@t '(_)))) y35a0@stx))) (set! y2e9a@cond-macro (lambda (y35b4@stx) ((lambda (y35b6@t) ((lambda (y35b8@ls/false) (if y35b8@ls/false (apply (lambda (y35ba@cls y35bb@cls*) (y2e6c@bless ((letrec ((y35be@f (lambda (y35c0@cls y35c1@cls*) (if (null? y35c1@cls*) ((lambda (y35c4@t) ((lambda (y35c6@ls/false) (if y35c6@ls/false (apply (lambda (y35c8@e y35c9@e*) (cons 'begin (cons y35c8@e y35c9@e*))) y35c6@ls/false) ((lambda (y35cc@t) ((lambda (y35ce@ls/false) (if y35ce@ls/false (apply (lambda (y35d0@e y35d1@p) (list 'let (list (list 't y35d0@e)) (list 'if 't (cons y35d1@p '(t))))) y35ce@ls/false) ((lambda (y35d4@t) ((lambda (y35d6@ls/false) (if y35d6@ls/false (apply (lambda (y35d8@e) (cons 'or (cons y35d8@e '((if #f #f))))) y35d6@ls/false) ((lambda (y35da@t) ((lambda (y35dc@ls/false) (if y35dc@ls/false (apply (lambda (y35de@e y35df@e*) (list 'if y35de@e (cons 'begin y35df@e*))) y35dc@ls/false) ((lambda (y35e2@t) ((lambda (y35e4@ls/false) (if y35e4@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid last clause" y35b4@stx)) y35e4@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y35e2@t))) (y2eb6@syntax-dispatch y35e2@t '_))) y35da@t))) (y2eb6@syntax-dispatch y35da@t '(any . each-any)))) y35d4@t))) (y2eb6@syntax-dispatch y35d4@t '(any)))) y35cc@t))) (y2eb6@syntax-dispatch y35cc@t '(any #(scheme-id =>) any)))) y35c4@t))) (y2eb6@syntax-dispatch y35c4@t '(#(scheme-id else) any . each-any)))) y35c0@cls) ((lambda (y35e6@t) ((lambda (y35e8@ls/false) (if y35e8@ls/false (apply (lambda (y35ea@e y35eb@e*) (y2f9f@syntax-violation '#f '"incorrect position of keyword else" y35b4@stx)) y35e8@ls/false) ((lambda (y35ee@t) ((lambda (y35f0@ls/false) (if y35f0@ls/false (apply (lambda (y35f2@e y35f3@p) (list 'let (list (list 't y35f2@e)) (list 'if 't (cons y35f3@p '(t)) (y35be@f (car y35c1@cls*) (cdr y35c1@cls*))))) y35f0@ls/false) ((lambda (y35f6@t) ((lambda (y35f8@ls/false) (if y35f8@ls/false (apply (lambda (y35fa@e) (list 'or y35fa@e (y35be@f (car y35c1@cls*) (cdr y35c1@cls*)))) y35f8@ls/false) ((lambda (y35fc@t) ((lambda (y35fe@ls/false) (if y35fe@ls/false (apply (lambda (y3600@e y3601@e*) (list 'if y3600@e (cons 'begin y3601@e*) (y35be@f (car y35c1@cls*) (cdr y35c1@cls*)))) y35fe@ls/false) ((lambda (y3604@t) ((lambda (y3606@ls/false) (if y3606@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid last clause" y35b4@stx)) y3606@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3604@t))) (y2eb6@syntax-dispatch y3604@t '_))) y35fc@t))) (y2eb6@syntax-dispatch y35fc@t '(any . each-any)))) y35f6@t))) (y2eb6@syntax-dispatch y35f6@t '(any)))) y35ee@t))) (y2eb6@syntax-dispatch y35ee@t '(any #(scheme-id =>) any)))) y35e6@t))) (y2eb6@syntax-dispatch y35e6@t '(#(scheme-id else) any . each-any)))) y35c0@cls))))) y35be@f) y35ba@cls y35bb@cls*))) y35b8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y35b6@t))) (y2eb6@syntax-dispatch y35b6@t '(_ any . each-any)))) y35b4@stx))) (set! y2e9c@do-include (lambda (y3608@stx y3609@id y360a@filename) ((lambda (y360e@filename) (begin (if (not (and (string? y360e@filename) (y2cab@id? y3609@id))) (y2f9f@syntax-violation '#f '"invalid syntax" y3608@stx) (void)) (cons (y2e6c@bless 'begin) (with-input-from-file y360e@filename (lambda () ((letrec ((y3610@f (lambda (y3612@ls) ((lambda (y3614@x) (if (eof-object? y3614@x) (reverse y3612@ls) (y3610@f (cons (y2c89@datum->stx y3609@id y3614@x) y3612@ls)))) (y2848@y2765@read-annotated))))) y3610@f) '())))))) (y2cc1@stx->datum y360a@filename)))) (set! y2e9e@include-macro (lambda (y3616@e) ((lambda (y3618@t) ((lambda (y361a@ls/false) (if y361a@ls/false (apply (lambda (y361c@id y361d@filename) (y2e9c@do-include y3616@e y361c@id y361d@filename)) y361a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3618@t))) (y2eb6@syntax-dispatch y3618@t '(any any)))) y3616@e))) (set! y2ea0@include-into-macro (lambda (y3620@e) ((lambda (y3622@t) ((lambda (y3624@ls/false) (if y3624@ls/false (apply (lambda (y3626@id y3627@filename) (y2e9c@do-include y3620@e y3626@id y3627@filename)) y3624@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3622@t))) (y2eb6@syntax-dispatch y3622@t '(_ any any)))) y3620@e))) (set! y2ea2@syntax-rules-macro (lambda (y362a@e) ((lambda (y362c@t) ((lambda (y362e@ls/false) (if y362e@ls/false (apply (lambda (y3630@lits y3631@pat* y3632@tmp*) (begin (y2ebc@verify-literals y3630@lits y362a@e) (y2e6c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons y3630@lits (map (lambda (y3636@pat y3637@tmp) ((lambda (y363a@t) ((lambda (y363c@ls/false) (if y363c@ls/false (apply (lambda (y363e@rest) (list (cons 'g y363e@rest) (list 'syntax y3637@tmp))) y363c@ls/false) ((lambda (y3640@t) ((lambda (y3642@ls/false) (if y3642@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid syntax-rules pattern" y362a@e y3636@pat)) y3642@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3640@t))) (y2eb6@syntax-dispatch y3640@t '_))) y363a@t))) (y2eb6@syntax-dispatch y363a@t '(_ . any)))) y3636@pat)) y3631@pat* y3632@tmp*)))))))) y362e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y362c@t))) (y2eb6@syntax-dispatch y362c@t '(_ each-any . #(each (any any)))))) y362a@e))) (set! y2ea4@quasiquote-macro ((lambda () ((lambda (y3645@datum y3661@quasicons* y3663@quasicons y3665@quasiappend y3667@quasivector y3669@vquasi y366b@quasi) (begin (set! y3645@datum (lambda (y3746@x) (list (y2e40@scheme-stx 'quote) (y2c93@mkstx y3746@x '() '() '())))) (set! y3661@quasicons* (lambda (y373e@x y373f@y) ((letrec ((y3742@f (lambda (y3744@x) (if (null? y3744@x) y373f@y (y3663@quasicons (car y3744@x) (y3742@f (cdr y3744@x))))))) y3742@f) y373e@x))) (set! y3663@quasicons (lambda (y3718@x y3719@y) ((lambda (y371c@t) ((lambda (y371e@ls/false) (if y371e@ls/false (apply (lambda (y3720@dy) ((lambda (y3722@t) ((lambda (y3724@ls/false) (if y3724@ls/false (apply (lambda (y3726@dx) (list (y2e40@scheme-stx 'quote) (cons y3726@dx y3720@dy))) y3724@ls/false) ((lambda (y3728@t) ((lambda (y372a@ls/false) (if y372a@ls/false (apply (lambda () ((lambda (y372c@t) ((lambda (y372e@ls/false) (if y372e@ls/false (apply (lambda () (list (y2e40@scheme-stx 'list) y3718@x)) y372e@ls/false) ((lambda (y3730@t) ((lambda (y3732@ls/false) (if y3732@ls/false (apply (lambda () (list (y2e40@scheme-stx 'cons) y3718@x y3719@y)) y3732@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3730@t))) (y2eb6@syntax-dispatch y3730@t '_))) y372c@t))) (y2eb6@syntax-dispatch y372c@t '()))) y3720@dy)) y372a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3728@t))) (y2eb6@syntax-dispatch y3728@t '_))) y3722@t))) (y2eb6@syntax-dispatch y3722@t '(#(scheme-id quote) any)))) y3718@x)) y371e@ls/false) ((lambda (y3734@t) ((lambda (y3736@ls/false) (if y3736@ls/false (apply (lambda (y3738@stuff) (cons* (y2e40@scheme-stx 'list) y3718@x y3738@stuff)) y3736@ls/false) ((lambda (y373a@t) ((lambda (y373c@ls/false) (if y373c@ls/false (apply (lambda () (list (y2e40@scheme-stx 'cons) y3718@x y3719@y)) y373c@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y373a@t))) (y2eb6@syntax-dispatch y373a@t '_))) y3734@t))) (y2eb6@syntax-dispatch y3734@t '(#(scheme-id list) . each-any)))) y371c@t))) (y2eb6@syntax-dispatch y371c@t '(#(scheme-id quote) any)))) y3719@y))) (set! y3665@quasiappend (lambda (y36fe@x y36ff@y) ((lambda (y3702@ls) (if (null? y3702@ls) (list (y2e40@scheme-stx 'quote) '()) (if (null? (cdr y3702@ls)) (car y3702@ls) (cons* (y2e40@scheme-stx 'append) y3702@ls)))) ((letrec ((y3704@f (lambda (y3706@x) (if (null? y3706@x) ((lambda (y3708@t) ((lambda (y370a@ls/false) (if y370a@ls/false (apply (lambda () '()) y370a@ls/false) ((lambda (y370c@t) ((lambda (y370e@ls/false) (if y370e@ls/false (apply (lambda () (list y36ff@y)) y370e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y370c@t))) (y2eb6@syntax-dispatch y370c@t '_))) y3708@t))) (y2eb6@syntax-dispatch y3708@t '(#(scheme-id quote) ())))) y36ff@y) ((lambda (y3710@t) ((lambda (y3712@ls/false) (if y3712@ls/false (apply (lambda () (y3704@f (cdr y3706@x))) y3712@ls/false) ((lambda (y3714@t) ((lambda (y3716@ls/false) (if y3716@ls/false (apply (lambda () (cons (car y3706@x) (y3704@f (cdr y3706@x)))) y3716@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3714@t))) (y2eb6@syntax-dispatch y3714@t '_))) y3710@t))) (y2eb6@syntax-dispatch y3710@t '(#(scheme-id quote) ())))) (car y3706@x)))))) y3704@f) y36fe@x)))) (set! y3667@quasivector (lambda (y36cc@x) ((lambda (y36ce@pat-x) ((lambda (y36d0@t) ((lambda (y36d2@ls/false) (if y36d2@ls/false (apply (lambda (y36d4@x*) (list (y2e40@scheme-stx 'quote) (list->vector y36d4@x*))) y36d2@ls/false) ((lambda (y36d6@t) ((lambda (y36d8@ls/false) (if y36d8@ls/false (apply (lambda () ((letrec ((y36da@f (lambda (y36dc@x y36dd@k) ((lambda (y36e0@t) ((lambda (y36e2@ls/false) (if y36e2@ls/false (apply (lambda (y36e4@x*) (y36dd@k (map (lambda (y36e6@x) (list (y2e40@scheme-stx 'quote) y36e6@x)) y36e4@x*))) y36e2@ls/false) ((lambda (y36e8@t) ((lambda (y36ea@ls/false) (if y36ea@ls/false (apply (lambda (y36ec@x*) (y36dd@k y36ec@x*)) y36ea@ls/false) ((lambda (y36ee@t) ((lambda (y36f0@ls/false) (if y36f0@ls/false (apply (lambda (y36f2@x y36f3@y) (y36da@f y36f3@y (lambda (y36f6@ls) (y36dd@k (cons y36f2@x y36f6@ls))))) y36f0@ls/false) ((lambda (y36f8@t) ((lambda (y36fa@ls/false) (if y36fa@ls/false (apply (lambda () (list (y2e40@scheme-stx 'list->vector) y36ce@pat-x)) y36fa@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y36f8@t))) (y2eb6@syntax-dispatch y36f8@t '_))) y36ee@t))) (y2eb6@syntax-dispatch y36ee@t '(#(scheme-id cons) any any)))) y36e8@t))) (y2eb6@syntax-dispatch y36e8@t '(#(scheme-id list) . each-any)))) y36e0@t))) (y2eb6@syntax-dispatch y36e0@t '(#(scheme-id quote) each-any)))) y36dc@x)))) y36da@f) y36cc@x (lambda (y36fc@ls) (cons* (y2e40@scheme-stx 'vector) y36fc@ls)))) y36d8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y36d6@t))) (y2eb6@syntax-dispatch y36d6@t '_))) y36d0@t))) (y2eb6@syntax-dispatch y36d0@t '(#(scheme-id quote) each-any)))) y36ce@pat-x)) y36cc@x))) (set! y3669@vquasi (lambda (y36aa@p y36ab@lev) ((lambda (y36ae@t) ((lambda (y36b0@ls/false) (if y36b0@ls/false (apply (lambda (y36b2@p y36b3@q) ((lambda (y36b6@t) ((lambda (y36b8@ls/false) (if y36b8@ls/false (apply (lambda (y36ba@p) (if (= y36ab@lev '0) (y3661@quasicons* y36ba@p (y3669@vquasi y36b3@q y36ab@lev)) (y3663@quasicons (y3663@quasicons (y3645@datum 'unquote) (y366b@quasi y36ba@p (- y36ab@lev '1))) (y3669@vquasi y36b3@q y36ab@lev)))) y36b8@ls/false) ((lambda (y36bc@t) ((lambda (y36be@ls/false) (if y36be@ls/false (apply (lambda (y36c0@p) (if (= y36ab@lev '0) (y3665@quasiappend y36c0@p (y3669@vquasi y36b3@q y36ab@lev)) (y3663@quasicons (y3663@quasicons (y3645@datum 'unquote-splicing) (y366b@quasi y36c0@p (- y36ab@lev '1))) (y3669@vquasi y36b3@q y36ab@lev)))) y36be@ls/false) ((lambda (y36c2@t) ((lambda (y36c4@ls/false) (if y36c4@ls/false (apply (lambda (y36c6@p) (y3663@quasicons (y366b@quasi y36c6@p y36ab@lev) (y3669@vquasi y36b3@q y36ab@lev))) y36c4@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y36c2@t))) (y2eb6@syntax-dispatch y36c2@t 'any))) y36bc@t))) (y2eb6@syntax-dispatch y36bc@t '(#(scheme-id unquote-splicing) . each-any)))) y36b6@t))) (y2eb6@syntax-dispatch y36b6@t '(#(scheme-id unquote) . each-any)))) y36b2@p)) y36b0@ls/false) ((lambda (y36c8@t) ((lambda (y36ca@ls/false) (if y36ca@ls/false (apply (lambda () (list (y2e40@scheme-stx 'quote) '())) y36ca@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y36c8@t))) (y2eb6@syntax-dispatch y36c8@t '()))) y36ae@t))) (y2eb6@syntax-dispatch y36ae@t '(any . any)))) y36aa@p))) (set! y366b@quasi (lambda (y3674@p y3675@lev) ((lambda (y3678@t) ((lambda (y367a@ls/false) (if y367a@ls/false (apply (lambda (y367c@p) (if (= y3675@lev '0) y367c@p (y3663@quasicons (y3645@datum 'unquote) (y366b@quasi (list y367c@p) (- y3675@lev '1))))) y367a@ls/false) ((lambda (y367e@t) ((lambda (y3680@ls/false) (if y3680@ls/false (apply (lambda (y3682@p y3683@q) (if (= y3675@lev '0) (y3661@quasicons* y3682@p (y366b@quasi y3683@q y3675@lev)) (y3663@quasicons (y3663@quasicons (y3645@datum 'unquote) (y366b@quasi y3682@p (- y3675@lev '1))) (y366b@quasi y3683@q y3675@lev)))) y3680@ls/false) ((lambda (y3686@t) ((lambda (y3688@ls/false) (if y3688@ls/false (apply (lambda (y368a@p y368b@q) (if (= y3675@lev '0) (y3665@quasiappend y368a@p (y366b@quasi y368b@q y3675@lev)) (y3663@quasicons (y3663@quasicons (y3645@datum 'unquote-splicing) (y366b@quasi y368a@p (- y3675@lev '1))) (y366b@quasi y368b@q y3675@lev)))) y3688@ls/false) ((lambda (y368e@t) ((lambda (y3690@ls/false) (if y3690@ls/false (apply (lambda (y3692@p) (y3663@quasicons (y3645@datum 'quasiquote) (y366b@quasi (list y3692@p) (+ y3675@lev '1)))) y3690@ls/false) ((lambda (y3694@t) ((lambda (y3696@ls/false) (if y3696@ls/false (apply (lambda (y3698@p y3699@q) (y3663@quasicons (y366b@quasi y3698@p y3675@lev) (y366b@quasi y3699@q y3675@lev))) y3696@ls/false) ((lambda (y369c@t) ((lambda (y369e@ls/false) (if (and y369e@ls/false (apply (lambda (y36a0@x) (not (y2c73@stx? y36a0@x))) y369e@ls/false)) (apply (lambda (y36a2@x) (y3667@quasivector (y3669@vquasi y36a2@x y3675@lev))) y369e@ls/false) ((lambda (y36a4@t) ((lambda (y36a6@ls/false) (if y36a6@ls/false (apply (lambda (y36a8@p) (list (y2e40@scheme-stx 'quote) y36a8@p)) y36a6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y36a4@t))) (y2eb6@syntax-dispatch y36a4@t 'any))) y369c@t))) (y2eb6@syntax-dispatch y369c@t '#(vector each-any)))) y3694@t))) (y2eb6@syntax-dispatch y3694@t '(any . any)))) y368e@t))) (y2eb6@syntax-dispatch y368e@t '(#(scheme-id quasiquote) any)))) y3686@t))) (y2eb6@syntax-dispatch y3686@t '((#(scheme-id unquote-splicing) . each-any) . any)))) y367e@t))) (y2eb6@syntax-dispatch y367e@t '((#(scheme-id unquote) . each-any) . any)))) y3678@t))) (y2eb6@syntax-dispatch y3678@t '(#(scheme-id unquote) any)))) y3674@p))) (lambda (y366c@x) ((lambda (y366e@t) ((lambda (y3670@ls/false) (if y3670@ls/false (apply (lambda (y3672@e) (y366b@quasi y3672@e '0)) y3670@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y366e@t))) (y2eb6@syntax-dispatch y366e@t '(_ any)))) y366c@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! y2ea6@quasisyntax-macro ((lambda () ((lambda (y3749@quasi) (begin (set! y3749@quasi (lambda (y3764@p y3765@lev) ((lambda (y3768@t) ((lambda (y376a@ls/false) (if y376a@ls/false (apply (lambda (y376c@p) (if (= y3765@lev '0) ((lambda (y376e@g) (values (list y376e@g) (list y376c@p) y376e@g)) (gensym)) (call-with-values (lambda () (y3749@quasi y376c@p (- y3765@lev '1))) (lambda (y3776@y3771 y3777@y3773 y3778@y3775) ((lambda (y377c@p y377d@rhs* y377e@lhs*) (values y377e@lhs* y377d@rhs* (list 'unsyntax y377c@p))) y3778@y3775 y3777@y3773 y3776@y3771))))) y376a@ls/false) ((lambda (y3782@t) ((lambda (y3784@ls/false) (if (and y3784@ls/false (apply (lambda () (= y3765@lev '0)) y3784@ls/false)) (apply (lambda () (y2f9f@syntax-violation '#f '"incorrect use of unsyntax" y3764@p)) y3784@ls/false) ((lambda (y3786@t) ((lambda (y3788@ls/false) (if y3788@ls/false (apply (lambda (y378a@p* y378b@q) (call-with-values (lambda () (y3749@quasi y378b@q y3765@lev)) (lambda (y3794@y378f y3795@y3791 y3796@y3793) ((lambda (y379a@q y379b@rhs* y379c@lhs*) (if (= y3765@lev '0) ((lambda (y37a0@g*) (values (append y37a0@g* y379c@lhs*) (append y378a@p* y379b@rhs*) (append y37a0@g* y379a@q))) (map (lambda (y37a2@x) (gensym)) y378a@p*)) (call-with-values (lambda () (y3749@quasi y378a@p* (- y3765@lev '1))) (lambda (y37aa@y37a5 y37ab@y37a7 y37ac@y37a9) ((lambda (y37b0@p* y37b1@rhs2* y37b2@lhs2*) (values (append y37b2@lhs2* y379c@lhs*) (append y37b1@rhs2* y379b@rhs*) (cons (cons 'unsyntax y37b0@p*) y379a@q))) y37ac@y37a9 y37ab@y37a7 y37aa@y37a5))))) y3796@y3793 y3795@y3791 y3794@y378f)))) y3788@ls/false) ((lambda (y37b6@t) ((lambda (y37b8@ls/false) (if y37b8@ls/false (apply (lambda (y37ba@p* y37bb@q) (call-with-values (lambda () (y3749@quasi y37bb@q y3765@lev)) (lambda (y37c4@y37bf y37c5@y37c1 y37c6@y37c3) ((lambda (y37ca@q y37cb@rhs* y37cc@lhs*) (if (= y3765@lev '0) ((lambda (y37d0@g*) (values (append (map (lambda (y37d2@g) (cons y37d2@g '(...))) y37d0@g*) y37cc@lhs*) (append y37ba@p* y37cb@rhs*) (append (apply append (map (lambda (y37d4@g) (cons y37d4@g '(...))) y37d0@g*)) y37ca@q))) (map (lambda (y37d6@x) (gensym)) y37ba@p*)) (call-with-values (lambda () (y3749@quasi y37ba@p* (- y3765@lev '1))) (lambda (y37de@y37d9 y37df@y37db y37e0@y37dd) ((lambda (y37e4@p* y37e5@rhs2* y37e6@lhs2*) (values (append y37e6@lhs2* y37cc@lhs*) (append y37e5@rhs2* y37cb@rhs*) (cons (cons 'unsyntax-splicing y37e4@p*) y37ca@q))) y37e0@y37dd y37df@y37db y37de@y37d9))))) y37c6@y37c3 y37c5@y37c1 y37c4@y37bf)))) y37b8@ls/false) ((lambda (y37ea@t) ((lambda (y37ec@ls/false) (if (and y37ec@ls/false (apply (lambda () (= y3765@lev '0)) y37ec@ls/false)) (apply (lambda () (y2f9f@syntax-violation '#f '"incorrect use of unsyntax-splicing" y3764@p)) y37ec@ls/false) ((lambda (y37ee@t) ((lambda (y37f0@ls/false) (if y37f0@ls/false (apply (lambda (y37f2@p) (call-with-values (lambda () (y3749@quasi y37f2@p (+ y3765@lev '1))) (lambda (y37fa@y37f5 y37fb@y37f7 y37fc@y37f9) ((lambda (y3800@p y3801@rhs* y3802@lhs*) (values y3802@lhs* y3801@rhs* (list 'quasisyntax y3800@p))) y37fc@y37f9 y37fb@y37f7 y37fa@y37f5)))) y37f0@ls/false) ((lambda (y3806@t) ((lambda (y3808@ls/false) (if y3808@ls/false (apply (lambda (y380a@p y380b@q) (call-with-values (lambda () (y3749@quasi y380a@p y3765@lev)) (lambda (y381a@y380f y381b@y3811 y381c@y3813) (call-with-values (lambda () (y3749@quasi y380b@q y3765@lev)) (lambda (y3820@y3815 y3821@y3817 y3822@y3819) ((lambda (y3826@q y3827@rhs2* y3828@lhs2* y3829@p y382a@rhs* y382b@lhs*) (values (append y3828@lhs2* y382b@lhs*) (append y3827@rhs2* y382a@rhs*) (cons y3829@p y3826@q))) y3822@y3819 y3821@y3817 y3820@y3815 y381c@y3813 y381b@y3811 y381a@y380f)))))) y3808@ls/false) ((lambda (y3832@t) ((lambda (y3834@ls/false) (if y3834@ls/false (apply (lambda (y3836@x*) (call-with-values (lambda () (y3749@quasi y3836@x* y3765@lev)) (lambda (y383e@y3839 y383f@y383b y3840@y383d) ((lambda (y3844@x* y3845@rhs* y3846@lhs*) (values y3846@lhs* y3845@rhs* (list->vector y3844@x*))) y3840@y383d y383f@y383b y383e@y3839)))) y3834@ls/false) ((lambda (y384a@t) ((lambda (y384c@ls/false) (if y384c@ls/false (apply (lambda () (values '() '() y3764@p)) y384c@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y384a@t))) (y2eb6@syntax-dispatch y384a@t '_))) y3832@t))) (y2eb6@syntax-dispatch y3832@t '#(vector each-any)))) y3806@t))) (y2eb6@syntax-dispatch y3806@t '(any . any)))) y37ee@t))) (y2eb6@syntax-dispatch y37ee@t '(#(scheme-id quasisyntax) any)))) y37ea@t))) (y2eb6@syntax-dispatch y37ea@t '#(scheme-id unsyntax-splicing)))) y37b6@t))) (y2eb6@syntax-dispatch y37b6@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) y3786@t))) (y2eb6@syntax-dispatch y3786@t '((#(scheme-id unsyntax) . each-any) . any)))) y3782@t))) (y2eb6@syntax-dispatch y3782@t '#(scheme-id unsyntax)))) y3768@t))) (y2eb6@syntax-dispatch y3768@t '(#(scheme-id unsyntax) any)))) y3764@p))) (lambda (y374a@x) ((lambda (y374c@t) ((lambda (y374e@ls/false) (if y374e@ls/false (apply (lambda (y3750@e) (call-with-values (lambda () (y3749@quasi y3750@e '0)) (lambda (y3758@y3753 y3759@y3755 y375a@y3757) ((lambda (y375e@v y375f@rhs* y3760@lhs*) (y2e6c@bless (list 'syntax-case (cons 'list y375f@rhs*) '() (list y3760@lhs* (list 'syntax y375e@v))))) y375a@y3757 y3759@y3755 y3758@y3753)))) y374e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y374c@t))) (y2eb6@syntax-dispatch y374c@t '(_ any)))) y374a@x)))) '#f)))) (set! y2ea8@define-struct-macro (lambda (y384e@stx) (y2f9f@syntax-violation '#f '"define-struct not supported" y384e@stx))) (set! y2eaa@define-record-type-macro (lambda (y3850@x) ((lambda (y3853@id y3855@get-record-name y3857@get-record-constructor-name y3859@get-record-predicate-name y385b@get-clause y385d@foo-rtd-code y385f@parent-rtd-code y3861@parent-rcd-code y3863@foo-rcd-code y3865@get-protocol-code y3867@get-fields y3869@get-mutator-indices y386b@get-mutators y386d@get-accessors y386f@enumerate y3871@do-define-record y3873@verify-clauses) (begin (set! y3853@id (lambda (y3a46@ctxt . y3a48@str*) (y2fa3@datum->syntax y3a46@ctxt (string->symbol (apply string-append (map (lambda (y3a4a@x) (if (symbol? y3a4a@x) (symbol->string y3a4a@x) (if (string? y3a4a@x) y3a4a@x (assertion-violation 'define-record-type '"BUG")))) y3a48@str*)))))) (set! y3855@get-record-name (lambda (y3a34@spec) ((lambda (y3a36@t) ((lambda (y3a38@ls/false) (if y3a38@ls/false (apply (lambda (y3a3a@foo y3a3b@make-foo y3a3c@foo?) y3a3a@foo) y3a38@ls/false) ((lambda (y3a40@t) ((lambda (y3a42@ls/false) (if y3a42@ls/false (apply (lambda (y3a44@foo) y3a44@foo) y3a42@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a40@t))) (y2eb6@syntax-dispatch y3a40@t 'any))) y3a36@t))) (y2eb6@syntax-dispatch y3a36@t '(any any any)))) y3a34@spec))) (set! y3857@get-record-constructor-name (lambda (y3a20@spec) ((lambda (y3a22@t) ((lambda (y3a24@ls/false) (if y3a24@ls/false (apply (lambda (y3a26@foo y3a27@make-foo y3a28@foo?) y3a27@make-foo) y3a24@ls/false) ((lambda (y3a2c@t) ((lambda (y3a2e@ls/false) (if (and y3a2e@ls/false (apply (lambda (y3a30@foo) (y2cab@id? y3a30@foo)) y3a2e@ls/false)) (apply (lambda (y3a32@foo) (y3853@id y3a32@foo '"make-" (y2cc1@stx->datum y3a32@foo))) y3a2e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a2c@t))) (y2eb6@syntax-dispatch y3a2c@t 'any))) y3a22@t))) (y2eb6@syntax-dispatch y3a22@t '(any any any)))) y3a20@spec))) (set! y3859@get-record-predicate-name (lambda (y3a0c@spec) ((lambda (y3a0e@t) ((lambda (y3a10@ls/false) (if y3a10@ls/false (apply (lambda (y3a12@foo y3a13@make-foo y3a14@foo?) y3a14@foo?) y3a10@ls/false) ((lambda (y3a18@t) ((lambda (y3a1a@ls/false) (if (and y3a1a@ls/false (apply (lambda (y3a1c@foo) (y2cab@id? y3a1c@foo)) y3a1a@ls/false)) (apply (lambda (y3a1e@foo) (y3853@id y3a1e@foo (y2cc1@stx->datum y3a1e@foo) '"?")) y3a1a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a18@t))) (y2eb6@syntax-dispatch y3a18@t 'any))) y3a0e@t))) (y2eb6@syntax-dispatch y3a0e@t '(any any any)))) y3a0c@spec))) (set! y385b@get-clause (lambda (y39fa@id y39fb@ls) ((lambda (y39fe@t) ((lambda (y3a00@ls/false) (if y3a00@ls/false (apply (lambda () '#f) y3a00@ls/false) ((lambda (y3a02@t) ((lambda (y3a04@ls/false) (if y3a04@ls/false (apply (lambda (y3a06@x y3a07@rest y3a08@ls) (if (y2cb3@free-id=? (y2e6c@bless y39fa@id) y3a06@x) (cons y3a06@x y3a07@rest) (y385b@get-clause y39fa@id y3a08@ls))) y3a04@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a02@t))) (y2eb6@syntax-dispatch y3a02@t '((any . any) . any)))) y39fe@t))) (y2eb6@syntax-dispatch y39fe@t '()))) y39fb@ls))) (set! y385d@foo-rtd-code (lambda (y39a8@name y39a9@clause* y39aa@parent-rtd-code) ((lambda (y39af@convert-field-spec*) (begin (set! y39af@convert-field-spec* (lambda (y39e0@ls) (list->vector (map (lambda (y39e2@x) ((lambda (y39e4@t) ((lambda (y39e6@ls/false) (if y39e6@ls/false (apply (lambda (y39e8@name y39e9@rest) (list 'mutable y39e8@name)) y39e6@ls/false) ((lambda (y39ec@t) ((lambda (y39ee@ls/false) (if y39ee@ls/false (apply (lambda (y39f0@name y39f1@rest) (list 'immutable y39f0@name)) y39ee@ls/false) ((lambda (y39f4@t) ((lambda (y39f6@ls/false) (if y39f6@ls/false (apply (lambda (y39f8@name) (list 'immutable y39f8@name)) y39f6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39f4@t))) (y2eb6@syntax-dispatch y39f4@t 'any))) y39ec@t))) (y2eb6@syntax-dispatch y39ec@t '(#(scheme-id immutable) any . any)))) y39e4@t))) (y2eb6@syntax-dispatch y39e4@t '(#(scheme-id mutable) any . any)))) y39e2@x)) y39e0@ls)))) ((lambda (y39b0@uid-code y39b1@sealed? y39b2@opaque? y39b3@fields) (y2e6c@bless (list 'make-record-type-descriptor (list 'quote y39a8@name) y39aa@parent-rtd-code y39b0@uid-code y39b1@sealed? y39b2@opaque? y39b3@fields))) ((lambda (y39b8@t) ((lambda (y39ba@ls/false) (if y39ba@ls/false (apply (lambda () (list 'quote (gensym))) y39ba@ls/false) ((lambda (y39bc@t) ((lambda (y39be@ls/false) (if y39be@ls/false (apply (lambda (y39c0@uid) (list 'quote y39c0@uid)) y39be@ls/false) ((lambda (y39c2@t) ((lambda (y39c4@ls/false) (if y39c4@ls/false (apply (lambda () '#f) y39c4@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39c2@t))) (y2eb6@syntax-dispatch y39c2@t '_))) y39bc@t))) (y2eb6@syntax-dispatch y39bc@t '(_ any)))) y39b8@t))) (y2eb6@syntax-dispatch y39b8@t '(_)))) (y385b@get-clause 'nongenerative y39a9@clause*)) ((lambda (y39c6@t) ((lambda (y39c8@ls/false) (if y39c8@ls/false (apply (lambda () '#t) y39c8@ls/false) ((lambda (y39ca@t) ((lambda (y39cc@ls/false) (if y39cc@ls/false (apply (lambda () '#f) y39cc@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39ca@t))) (y2eb6@syntax-dispatch y39ca@t '_))) y39c6@t))) (y2eb6@syntax-dispatch y39c6@t '(_ #(atom #t))))) (y385b@get-clause 'sealed y39a9@clause*)) ((lambda (y39ce@t) ((lambda (y39d0@ls/false) (if y39d0@ls/false (apply (lambda () '#t) y39d0@ls/false) ((lambda (y39d2@t) ((lambda (y39d4@ls/false) (if y39d4@ls/false (apply (lambda () '#f) y39d4@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39d2@t))) (y2eb6@syntax-dispatch y39d2@t '_))) y39ce@t))) (y2eb6@syntax-dispatch y39ce@t '(_ #(atom #t))))) (y385b@get-clause 'opaque y39a9@clause*)) ((lambda (y39d6@t) ((lambda (y39d8@ls/false) (if y39d8@ls/false (apply (lambda (y39da@field-spec*) (list 'quote (y39af@convert-field-spec* y39da@field-spec*))) y39d8@ls/false) ((lambda (y39dc@t) ((lambda (y39de@ls/false) (if y39de@ls/false (apply (lambda () ''#()) y39de@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39dc@t))) (y2eb6@syntax-dispatch y39dc@t '_))) y39d6@t))) (y2eb6@syntax-dispatch y39d6@t '(_ . each-any)))) (y385b@get-clause 'fields y39a9@clause*))))) '#f))) (set! y385f@parent-rtd-code (lambda (y3990@clause*) ((lambda (y3992@t) ((lambda (y3994@ls/false) (if y3994@ls/false (apply (lambda (y3996@name) (list 'record-type-descriptor y3996@name)) y3994@ls/false) ((lambda (y3998@t) ((lambda (y399a@ls/false) (if y399a@ls/false (apply (lambda () ((lambda (y399c@t) ((lambda (y399e@ls/false) (if y399e@ls/false (apply (lambda (y39a0@rtd y39a1@rcd) y39a0@rtd) y399e@ls/false) ((lambda (y39a4@t) ((lambda (y39a6@ls/false) (if y39a6@ls/false (apply (lambda () '#f) y39a6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y39a4@t))) (y2eb6@syntax-dispatch y39a4@t '#(atom #f)))) y399c@t))) (y2eb6@syntax-dispatch y399c@t '(_ any any)))) (y385b@get-clause 'parent-rtd y3990@clause*))) y399a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3998@t))) (y2eb6@syntax-dispatch y3998@t '#(atom #f)))) y3992@t))) (y2eb6@syntax-dispatch y3992@t '(_ any)))) (y385b@get-clause 'parent y3990@clause*)))) (set! y3861@parent-rcd-code (lambda (y3978@clause*) ((lambda (y397a@t) ((lambda (y397c@ls/false) (if y397c@ls/false (apply (lambda (y397e@name) (list 'record-constructor-descriptor y397e@name)) y397c@ls/false) ((lambda (y3980@t) ((lambda (y3982@ls/false) (if y3982@ls/false (apply (lambda () ((lambda (y3984@t) ((lambda (y3986@ls/false) (if y3986@ls/false (apply (lambda (y3988@rtd y3989@rcd) y3989@rcd) y3986@ls/false) ((lambda (y398c@t) ((lambda (y398e@ls/false) (if y398e@ls/false (apply (lambda () '#f) y398e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y398c@t))) (y2eb6@syntax-dispatch y398c@t '#(atom #f)))) y3984@t))) (y2eb6@syntax-dispatch y3984@t '(_ any any)))) (y385b@get-clause 'parent-rtd y3978@clause*))) y3982@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3980@t))) (y2eb6@syntax-dispatch y3980@t '#(atom #f)))) y397a@t))) (y2eb6@syntax-dispatch y397a@t '(_ any)))) (y385b@get-clause 'parent y3978@clause*)))) (set! y3863@foo-rcd-code (lambda (y3970@clause* y3971@foo-rtd y3972@protocol y3973@parent-rcd-code) (list 'make-record-constructor-descriptor y3971@foo-rtd y3973@parent-rcd-code y3972@protocol))) (set! y3865@get-protocol-code (lambda (y3964@clause*) ((lambda (y3966@t) ((lambda (y3968@ls/false) (if y3968@ls/false (apply (lambda (y396a@expr) y396a@expr) y3968@ls/false) ((lambda (y396c@t) ((lambda (y396e@ls/false) (if y396e@ls/false (apply (lambda () '#f) y396e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y396c@t))) (y2eb6@syntax-dispatch y396c@t '_))) y3966@t))) (y2eb6@syntax-dispatch y3966@t '(_ any)))) (y385b@get-clause 'protocol y3964@clause*)))) (set! y3867@get-fields (lambda (y3952@clause*) ((lambda (y3954@t) ((lambda (y3956@ls/false) (if y3956@ls/false (apply (lambda () '()) y3956@ls/false) ((lambda (y3958@t) ((lambda (y395a@ls/false) (if y395a@ls/false (apply (lambda (y395c@f*) y395c@f*) y395a@ls/false) ((lambda (y395e@t) ((lambda (y3960@ls/false) (if y3960@ls/false (apply (lambda (y3962@rest) (y3867@get-fields y3962@rest)) y3960@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y395e@t))) (y2eb6@syntax-dispatch y395e@t '(_ . any)))) y3958@t))) (y2eb6@syntax-dispatch y3958@t '((#(scheme-id fields) . each-any) . _)))) y3954@t))) (y2eb6@syntax-dispatch y3954@t '()))) y3952@clause*))) (set! y3869@get-mutator-indices (lambda (y393a@fields) ((letrec ((y393c@f (lambda (y393e@fields y393f@i) ((lambda (y3942@t) ((lambda (y3944@ls/false) (if y3944@ls/false (apply (lambda () '()) y3944@ls/false) ((lambda (y3946@t) ((lambda (y3948@ls/false) (if y3948@ls/false (apply (lambda (y394a@rest) (cons y393f@i (y393c@f y394a@rest (+ y393f@i '1)))) y3948@ls/false) ((lambda (y394c@t) ((lambda (y394e@ls/false) (if y394e@ls/false (apply (lambda (y3950@rest) (y393c@f y3950@rest (+ y393f@i '1))) y394e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y394c@t))) (y2eb6@syntax-dispatch y394c@t '(_ . any)))) y3946@t))) (y2eb6@syntax-dispatch y3946@t '((#(scheme-id mutable) . _) . any)))) y3942@t))) (y2eb6@syntax-dispatch y3942@t '()))) y393e@fields)))) y393c@f) y393a@fields '0))) (set! y386b@get-mutators (lambda (y3910@foo y3911@fields) ((lambda (y3915@gen-name) (begin (set! y3915@gen-name (lambda (y3938@x) (y2fa3@datum->syntax y3910@foo (string->symbol (string-append (symbol->string (y2fa5@syntax->datum y3910@foo)) '"-" (symbol->string (y2fa5@syntax->datum y3938@x)) '"-set!"))))) ((letrec ((y3916@f (lambda (y3918@fields) ((lambda (y391a@t) ((lambda (y391c@ls/false) (if y391c@ls/false (apply (lambda () '()) y391c@ls/false) ((lambda (y391e@t) ((lambda (y3920@ls/false) (if y3920@ls/false (apply (lambda (y3922@name y3923@accessor y3924@mutator y3925@rest) (cons y3924@mutator (y3916@f y3925@rest))) y3920@ls/false) ((lambda (y392a@t) ((lambda (y392c@ls/false) (if y392c@ls/false (apply (lambda (y392e@name y392f@rest) (cons (y3915@gen-name y392e@name) (y3916@f y392f@rest))) y392c@ls/false) ((lambda (y3932@t) ((lambda (y3934@ls/false) (if y3934@ls/false (apply (lambda (y3936@rest) (y3916@f y3936@rest)) y3934@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3932@t))) (y2eb6@syntax-dispatch y3932@t '(_ . any)))) y392a@t))) (y2eb6@syntax-dispatch y392a@t '((#(scheme-id mutable) any) . any)))) y391e@t))) (y2eb6@syntax-dispatch y391e@t '((#(scheme-id mutable) any any any) . any)))) y391a@t))) (y2eb6@syntax-dispatch y391a@t '()))) y3918@fields)))) y3916@f) y3911@fields))) '#f))) (set! y386d@get-accessors (lambda (y38cc@foo y38cd@fields) ((lambda (y38d1@gen-name) (begin (set! y38d1@gen-name (lambda (y390e@x) (y2fa3@datum->syntax y38cc@foo (string->symbol (string-append (symbol->string (y2fa5@syntax->datum y38cc@foo)) '"-" (symbol->string (y2fa5@syntax->datum y390e@x))))))) (map (lambda (y38d2@field) ((lambda (y38d4@t) ((lambda (y38d6@ls/false) (if (and y38d6@ls/false (apply (lambda (y38d8@name y38d9@accessor y38da@mutator) (y2cab@id? y38d9@accessor)) y38d6@ls/false)) (apply (lambda (y38de@name y38df@accessor y38e0@mutator) y38df@accessor) y38d6@ls/false) ((lambda (y38e4@t) ((lambda (y38e6@ls/false) (if (and y38e6@ls/false (apply (lambda (y38e8@name y38e9@accessor) (y2cab@id? y38e9@accessor)) y38e6@ls/false)) (apply (lambda (y38ec@name y38ed@accessor) y38ed@accessor) y38e6@ls/false) ((lambda (y38f0@t) ((lambda (y38f2@ls/false) (if (and y38f2@ls/false (apply (lambda (y38f4@name) (y2cab@id? y38f4@name)) y38f2@ls/false)) (apply (lambda (y38f6@name) (y38d1@gen-name y38f6@name)) y38f2@ls/false) ((lambda (y38f8@t) ((lambda (y38fa@ls/false) (if (and y38fa@ls/false (apply (lambda (y38fc@name) (y2cab@id? y38fc@name)) y38fa@ls/false)) (apply (lambda (y38fe@name) (y38d1@gen-name y38fe@name)) y38fa@ls/false) ((lambda (y3900@t) ((lambda (y3902@ls/false) (if (and y3902@ls/false (apply (lambda (y3904@name) (y2cab@id? y3904@name)) y3902@ls/false)) (apply (lambda (y3906@name) (y38d1@gen-name y3906@name)) y3902@ls/false) ((lambda (y3908@t) ((lambda (y390a@ls/false) (if y390a@ls/false (apply (lambda (y390c@others) (y2f9f@syntax-violation '#f '"invalid field spec" y38d2@field)) y390a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3908@t))) (y2eb6@syntax-dispatch y3908@t 'any))) y3900@t))) (y2eb6@syntax-dispatch y3900@t 'any))) y38f8@t))) (y2eb6@syntax-dispatch y38f8@t '(#(scheme-id immutable) any)))) y38f0@t))) (y2eb6@syntax-dispatch y38f0@t '(#(scheme-id mutable) any)))) y38e4@t))) (y2eb6@syntax-dispatch y38e4@t '(#(scheme-id immutable) any any)))) y38d4@t))) (y2eb6@syntax-dispatch y38d4@t '(#(scheme-id mutable) any any any)))) y38d2@field)) y38cd@fields))) '#f))) (set! y386f@enumerate (lambda (y38c4@ls) ((letrec ((y38c6@f (lambda (y38c8@ls y38c9@i) (if (null? y38c8@ls) '() (cons y38c9@i (y38c6@f (cdr y38c8@ls) (+ y38c9@i '1))))))) y38c6@f) y38c4@ls '0))) (set! y3871@do-define-record (lambda (y389c@namespec y389d@clause*) ((lambda (y38a0@foo) ((lambda (y38a2@foo-rtd) ((lambda (y38a4@foo-rcd) ((lambda (y38a6@protocol) ((lambda (y38a8@make-foo) ((lambda (y38aa@fields) ((lambda (y38ac@idx*) ((lambda (y38ae@foo-x*) ((lambda (y38b0@set-foo-x!*) ((lambda (y38b2@set-foo-idx*) ((lambda (y38b4@foo?) ((lambda (y38b6@foo-rtd-code) ((lambda (y38b8@foo-rcd-code) ((lambda (y38ba@protocol-code) ((lambda () (y2e6c@bless (cons 'begin (cons (list 'define y38a2@foo-rtd y38b6@foo-rtd-code) (cons (list 'define y38a6@protocol y38ba@protocol-code) (cons (list 'define y38a4@foo-rcd y38b8@foo-rcd-code) (cons (list 'define-syntax y38a0@foo (list 'list ''$rtd (list 'syntax y38a2@foo-rtd) (list 'syntax y38a4@foo-rcd))) (cons (list 'define y38b4@foo? (list 'record-predicate y38a2@foo-rtd)) (cons (list 'define y38a8@make-foo (list 'record-constructor y38a4@foo-rcd)) (append (map (lambda (y38bc@foo-x y38bd@idx) (list 'define y38bc@foo-x (list 'record-accessor y38a2@foo-rtd y38bd@idx))) y38ae@foo-x* y38ac@idx*) (map (lambda (y38c0@set-foo-x! y38c1@idx) (list 'define y38c0@set-foo-x! (list 'record-mutator y38a2@foo-rtd y38c1@idx))) y38b0@set-foo-x!* y38b2@set-foo-idx*))))))))))))) (y3865@get-protocol-code y389d@clause*))) (y3863@foo-rcd-code y389d@clause* y38a2@foo-rtd y38a6@protocol (y3861@parent-rcd-code y389d@clause*)))) (y385d@foo-rtd-code y38a0@foo y389d@clause* (y385f@parent-rtd-code y389d@clause*)))) (y3859@get-record-predicate-name y389c@namespec))) (y3869@get-mutator-indices y38aa@fields))) (y386b@get-mutators y38a0@foo y38aa@fields))) (y386d@get-accessors y38a0@foo y38aa@fields))) (y386f@enumerate y38aa@fields))) (y3867@get-fields y389d@clause*))) (y3857@get-record-constructor-name y389c@namespec))) (gensym))) (gensym))) (gensym))) (y3855@get-record-name y389c@namespec)))) (set! y3873@verify-clauses (lambda (y387c@x y387d@cls*) ((lambda (y3881@valid-kwds y3883@free-id-member?) (begin (set! y3881@valid-kwds (map y2e6c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! y3883@free-id-member? (lambda (y3898@x y3899@ls) (and (pair? y3899@ls) (or (y2cb3@free-id=? y3898@x (car y3899@ls)) (y3883@free-id-member? y3898@x (cdr y3899@ls)))))) ((letrec ((y3884@f (lambda (y3886@cls* y3887@seen*) (if (not (null? y3886@cls*)) ((lambda (y388a@t) ((lambda (y388c@ls/false) (if y388c@ls/false (apply (lambda (y388e@kwd y388f@rest) (if (or (not (y2cab@id? y388e@kwd)) (not (y3883@free-id-member? y388e@kwd y3881@valid-kwds))) (y2f9f@syntax-violation '#f '"not a valid define-record-type keyword" y388e@kwd) (if (y2cb9@bound-id-member? y388e@kwd y3887@seen*) (y2f9f@syntax-violation '#f '"duplicate use of keyword " y387c@x y388e@kwd) (y3884@f (cdr y3886@cls*) (cons y388e@kwd y3887@seen*))))) y388c@ls/false) ((lambda (y3892@t) ((lambda (y3894@ls/false) (if y3894@ls/false (apply (lambda (y3896@cls) (y2f9f@syntax-violation '#f '"malformed define-record-type clause" y3896@cls)) y3894@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3892@t))) (y2eb6@syntax-dispatch y3892@t 'any))) y388a@t))) (y2eb6@syntax-dispatch y388a@t '(any . any)))) (car y3886@cls*)) (void))))) y3884@f) y387d@cls* '()))) '#f '#f))) ((lambda (y3874@t) ((lambda (y3876@ls/false) (if y3876@ls/false (apply (lambda (y3878@namespec y3879@clause*) (begin (y3873@verify-clauses y3850@x y3879@clause*) (y3871@do-define-record y3878@namespec y3879@clause*))) y3876@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3874@t))) (y2eb6@syntax-dispatch y3874@t '(_ any . each-any)))) y3850@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! y2eac@define-condition-type-macro (lambda (y3a4c@x) ((lambda (y3a4f@mkname) (begin (set! y3a4f@mkname (lambda (y3a7c@name y3a7d@suffix) (y2fa3@datum->syntax y3a7c@name (string->symbol (string-append (symbol->string (y2fa5@syntax->datum y3a7c@name)) y3a7d@suffix))))) ((lambda (y3a50@t) ((lambda (y3a52@ls/false) (if (and y3a52@ls/false (apply (lambda (y3a54@ctxt y3a55@name y3a56@super y3a57@constructor y3a58@predicate y3a59@field* y3a5a@accessor*) (and (y2cab@id? y3a55@name) (y2cab@id? y3a56@super) (y2cab@id? y3a57@constructor) (y2cab@id? y3a58@predicate) (for-all y2cab@id? y3a59@field*) (for-all y2cab@id? y3a5a@accessor*))) y3a52@ls/false)) (apply (lambda (y3a62@ctxt y3a63@name y3a64@super y3a65@constructor y3a66@predicate y3a67@field* y3a68@accessor*) ((lambda (y3a70@aux-accessor*) (y2e6c@bless (cons 'begin (cons (cons 'define-record-type (cons (list y3a63@name y3a65@constructor (gensym)) (cons (list 'parent y3a64@super) (cons (cons 'fields (map (lambda (y3a72@field y3a73@aux) (list 'immutable y3a72@field y3a73@aux)) y3a67@field* y3a70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define y3a66@predicate (list 'condition-predicate (list 'record-type-descriptor y3a63@name))) (map (lambda (y3a76@accessor y3a77@aux) (list 'define y3a76@accessor (list 'condition-accessor (list 'record-type-descriptor y3a63@name) y3a77@aux))) y3a68@accessor* y3a70@aux-accessor*)))))) (map (lambda (y3a7a@x) (gensym)) y3a68@accessor*))) y3a52@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a50@t))) (y2eb6@syntax-dispatch y3a50@t '(any any any any any . #(each (any any)))))) y3a4c@x))) '#f))) (set! y2eae@incorrect-usage-macro (lambda (y3a80@e) (y2f9f@syntax-violation '#f '"incorrect usage of auxiliary keyword" y3a80@e))) (set! y2eb0@parameterize-macro (lambda (y3a82@e) ((lambda (y3a84@t) ((lambda (y3a86@ls/false) (if y3a86@ls/false (apply (lambda (y3a88@b y3a89@b*) (y2e6c@bless (cons 'let (cons '() (cons y3a88@b y3a89@b*))))) y3a86@ls/false) ((lambda (y3a8c@t) ((lambda (y3a8e@ls/false) (if y3a8e@ls/false (apply (lambda (y3a90@olhs* y3a91@orhs* y3a92@b y3a93@b*) ((lambda (y3a98@lhs* y3a99@rhs*) (y2e6c@bless (cons (list 'lambda (append y3a98@lhs* y3a99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (y3a9c@lhs y3a9d@rhs) (list 'let (list (list 't (list y3a9c@lhs))) (list y3a9c@lhs y3a9d@rhs) (cons 'set! (cons y3a9d@rhs '(t))))) y3a98@lhs* y3a99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons y3a92@b y3a93@b*))) '(swap)))))) (append y3a90@olhs* y3a91@orhs*)))) (y2f8d@generate-temporaries y3a90@olhs*) (y2f8d@generate-temporaries y3a91@orhs*))) y3a8e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3a8c@t))) (y2eb6@syntax-dispatch y3a8c@t '(_ #(each (any any)) any . each-any)))) y3a84@t))) (y2eb6@syntax-dispatch y3a84@t '(_ () any . each-any)))) y3a82@e))) (set! y2eb2@foreign-call-transformer (lambda (y3aa0@e y3aa1@r y3aa2@mr) ((lambda (y3aa6@t) ((lambda (y3aa8@ls/false) (if y3aa8@ls/false (apply (lambda (y3aaa@name y3aab@arg*) (cons 'foreign-call (cons (y2ed8@chi-expr y3aaa@name y3aa1@r y3aa2@mr) (y2ed4@chi-expr* y3aab@arg* y3aa1@r y3aa2@mr)))) y3aa8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3aa6@t))) (y2eb6@syntax-dispatch y3aa6@t '(_ any . each-any)))) y3aa0@e))) (set! y2eb4@convert-pattern (lambda (y3aae@pattern y3aaf@keys) ((lambda (y3ab3@cvt* y3ab5@cvt) (begin (set! y3ab3@cvt* (lambda (y3b52@p* y3b53@n y3b54@ids) (if (null? y3b52@p*) (values '() y3b54@ids) (call-with-values (lambda () (y3ab3@cvt* (cdr y3b52@p*) y3b53@n y3b54@ids)) (lambda (y3b5c@y3b59 y3b5d@y3b5b) ((lambda (y3b60@ids y3b61@y) (call-with-values (lambda () (y3ab5@cvt (car y3b52@p*) y3b53@n y3b60@ids)) (lambda (y3b68@y3b65 y3b69@y3b67) ((lambda (y3b6c@ids y3b6d@x) (values (cons y3b6d@x y3b61@y) y3b6c@ids)) y3b69@y3b67 y3b68@y3b65)))) y3b5d@y3b5b y3b5c@y3b59)))))) (set! y3ab5@cvt (lambda (y3ab6@p y3ab7@n y3ab8@ids) ((lambda (y3abc@t) ((lambda (y3abe@ls/false) (if (and y3abe@ls/false (apply (lambda (y3ac0@id) (y2cab@id? y3ac0@id)) y3abe@ls/false)) (apply (lambda (y3ac2@id) (if (y2cb9@bound-id-member? y3ab6@p y3aaf@keys) (values (vector 'free-id y3ab6@p) y3ab8@ids) (if (y2cb3@free-id=? y3ab6@p (y2e40@scheme-stx '_)) (values '_ y3ab8@ids) (values 'any (cons (cons y3ab6@p y3ab7@n) y3ab8@ids))))) y3abe@ls/false) ((lambda (y3ac4@t) ((lambda (y3ac6@ls/false) (if (and y3ac6@ls/false (apply (lambda (y3ac8@p y3ac9@dots) (y2eb8@ellipsis? y3ac9@dots)) y3ac6@ls/false)) (apply (lambda (y3acc@p y3acd@dots) (call-with-values (lambda () (y3ab5@cvt y3acc@p (+ y3ab7@n '1) y3ab8@ids)) (lambda (y3ad4@y3ad1 y3ad5@y3ad3) ((lambda (y3ad8@ids y3ad9@p) (values (if (eq? y3ad9@p 'any) 'each-any (vector 'each y3ad9@p)) y3ad8@ids)) y3ad5@y3ad3 y3ad4@y3ad1)))) y3ac6@ls/false) ((lambda (y3adc@t) ((lambda (y3ade@ls/false) (if (and y3ade@ls/false (apply (lambda (y3ae0@x y3ae1@dots y3ae2@ys y3ae3@z) (y2eb8@ellipsis? y3ae1@dots)) y3ade@ls/false)) (apply (lambda (y3ae8@x y3ae9@dots y3aea@ys y3aeb@z) (call-with-values (lambda () (y3ab5@cvt y3aeb@z y3ab7@n y3ab8@ids)) (lambda (y3af4@y3af1 y3af5@y3af3) ((lambda (y3af8@ids y3af9@z) (call-with-values (lambda () (y3ab3@cvt* y3aea@ys y3ab7@n y3af8@ids)) (lambda (y3b00@y3afd y3b01@y3aff) ((lambda (y3b04@ids y3b05@ys) (call-with-values (lambda () (y3ab5@cvt y3ae8@x (+ y3ab7@n '1) y3b04@ids)) (lambda (y3b0c@y3b09 y3b0d@y3b0b) ((lambda (y3b10@ids y3b11@x) (values (vector 'each+ y3b11@x (reverse y3b05@ys) y3af9@z) y3b10@ids)) y3b0d@y3b0b y3b0c@y3b09)))) y3b01@y3aff y3b00@y3afd)))) y3af5@y3af3 y3af4@y3af1)))) y3ade@ls/false) ((lambda (y3b14@t) ((lambda (y3b16@ls/false) (if y3b16@ls/false (apply (lambda (y3b18@x y3b19@y) (call-with-values (lambda () (y3ab5@cvt y3b19@y y3ab7@n y3ab8@ids)) (lambda (y3b20@y3b1d y3b21@y3b1f) ((lambda (y3b24@ids y3b25@y) (call-with-values (lambda () (y3ab5@cvt y3b18@x y3ab7@n y3b24@ids)) (lambda (y3b2c@y3b29 y3b2d@y3b2b) ((lambda (y3b30@ids y3b31@x) (values (cons y3b31@x y3b25@y) y3b30@ids)) y3b2d@y3b2b y3b2c@y3b29)))) y3b21@y3b1f y3b20@y3b1d)))) y3b16@ls/false) ((lambda (y3b34@t) ((lambda (y3b36@ls/false) (if y3b36@ls/false (apply (lambda () (values '() y3ab8@ids)) y3b36@ls/false) ((lambda (y3b38@t) ((lambda (y3b3a@ls/false) (if (and y3b3a@ls/false (apply (lambda (y3b3c@p) (not (y2c73@stx? y3b3c@p))) y3b3a@ls/false)) (apply (lambda (y3b3e@p) (call-with-values (lambda () (y3ab5@cvt y3b3e@p y3ab7@n y3ab8@ids)) (lambda (y3b44@y3b41 y3b45@y3b43) ((lambda (y3b48@ids y3b49@p) (values (vector 'vector y3b49@p) y3b48@ids)) y3b45@y3b43 y3b44@y3b41)))) y3b3a@ls/false) ((lambda (y3b4c@t) ((lambda (y3b4e@ls/false) (if y3b4e@ls/false (apply (lambda (y3b50@datum) (values (vector 'atom (y2cc1@stx->datum y3b50@datum)) y3ab8@ids)) y3b4e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3b4c@t))) (y2eb6@syntax-dispatch y3b4c@t 'any))) y3b38@t))) (y2eb6@syntax-dispatch y3b38@t '#(vector each-any)))) y3b34@t))) (y2eb6@syntax-dispatch y3b34@t '()))) y3b14@t))) (y2eb6@syntax-dispatch y3b14@t '(any . any)))) y3adc@t))) (y2eb6@syntax-dispatch y3adc@t '(any any . #(each+ any () any))))) y3ac4@t))) (y2eb6@syntax-dispatch y3ac4@t '(any any)))) y3abc@t))) (y2eb6@syntax-dispatch y3abc@t 'any))) y3ab6@p))) (y3ab5@cvt y3aae@pattern '0 '()))) '#f '#f))) (set! y2eb6@syntax-dispatch ((lambda () ((lambda (y3b71@stx^ y3b73@match-each y3b75@match-each+ y3b77@match-each-any y3b79@match-empty y3b7b@combine y3b7d@match* y3b7f@match) (begin (set! y3b71@stx^ (lambda (y3c4c@e y3c4d@m* y3c4e@s* y3c4f@ae*) (if (and (null? y3c4d@m*) (null? y3c4e@s*) (null? y3c4f@ae*)) y3c4c@e (y2c93@mkstx y3c4c@e y3c4d@m* y3c4e@s* y3c4f@ae*)))) (set! y3b73@match-each (lambda (y3c2c@e y3c2d@p y3c2e@m* y3c2f@s* y3c30@ae*) (if (pair? y3c2c@e) ((lambda (y3c36@first) (and y3c36@first ((lambda (y3c38@rest) (and y3c38@rest (cons y3c36@first y3c38@rest))) (y3b73@match-each (cdr y3c2c@e) y3c2d@p y3c2e@m* y3c2f@s* y3c30@ae*)))) (y3b7f@match (car y3c2c@e) y3c2d@p y3c2e@m* y3c2f@s* y3c30@ae* '())) (if (null? y3c2c@e) '() (if (y2c73@stx? y3c2c@e) (and (not (y2c29@top-marked? y3c2e@m*)) (call-with-values (lambda () (y2c91@join-wraps y3c2e@m* y3c2f@s* y3c30@ae* y3c2c@e)) (lambda (y3c40@y3c3b y3c41@y3c3d y3c42@y3c3f) ((lambda (y3c46@ae* y3c47@s* y3c48@m*) (y3b73@match-each (y2c77@stx-expr y3c2c@e) y3c2d@p y3c48@m* y3c47@s* y3c46@ae*)) y3c42@y3c3f y3c41@y3c3d y3c40@y3c3b)))) (if (y284a@y2769@annotation? y3c2c@e) (y3b73@match-each (y284c@y276d@annotation-expression y3c2c@e) y3c2d@p y3c2e@m* y3c2f@s* y3c30@ae*) '#f)))))) (set! y3b75@match-each+ (lambda (y3bec@e y3bed@x-pat y3bee@y-pat y3bef@z-pat y3bf0@m* y3bf1@s* y3bf2@ae* y3bf3@r) ((letrec ((y3bfc@f (lambda (y3bfe@e y3bff@m* y3c00@s* y3c01@ae*) (if (pair? y3bfe@e) (call-with-values (lambda () (y3bfc@f (cdr y3bfe@e) y3bff@m* y3c00@s* y3c01@ae*)) (lambda (y3c0c@y3c07 y3c0d@y3c09 y3c0e@y3c0b) ((lambda (y3c12@r y3c13@y-pat y3c14@xr*) (if y3c12@r (if (null? y3c13@y-pat) ((lambda (y3c18@xr) (if y3c18@xr (values (cons y3c18@xr y3c14@xr*) y3c13@y-pat y3c12@r) (values '#f '#f '#f))) (y3b7f@match (car y3bfe@e) y3bed@x-pat y3bff@m* y3c00@s* y3c01@ae* '())) (values '() (cdr y3c13@y-pat) (y3b7f@match (car y3bfe@e) (car y3c13@y-pat) y3bff@m* y3c00@s* y3c01@ae* y3c12@r))) (values '#f '#f '#f))) y3c0e@y3c0b y3c0d@y3c09 y3c0c@y3c07))) (if (y2c73@stx? y3bfe@e) (if (y2c29@top-marked? y3bff@m*) (values '() y3bee@y-pat (y3b7f@match y3bfe@e y3bef@z-pat y3bff@m* y3c00@s* y3c01@ae* y3bf3@r)) (call-with-values (lambda () (y2c91@join-wraps y3bff@m* y3c00@s* y3c01@ae* y3bfe@e)) (lambda (y3c20@y3c1b y3c21@y3c1d y3c22@y3c1f) ((lambda (y3c26@ae* y3c27@s* y3c28@m*) (y3bfc@f (y2c77@stx-expr y3bfe@e) y3c28@m* y3c27@s* y3c26@ae*)) y3c22@y3c1f y3c21@y3c1d y3c20@y3c1b)))) (if (y284a@y2769@annotation? y3bfe@e) (y3bfc@f (y284c@y276d@annotation-expression y3bfe@e) y3bff@m* y3c00@s* y3c01@ae*) (values '() y3bee@y-pat (y3b7f@match y3bfe@e y3bef@z-pat y3bff@m* y3c00@s* y3c01@ae* y3bf3@r)))))))) y3bfc@f) y3bec@e y3bf0@m* y3bf1@s* y3bf2@ae*))) (set! y3b77@match-each-any (lambda (y3bd0@e y3bd1@m* y3bd2@s* y3bd3@ae*) (if (pair? y3bd0@e) ((lambda (y3bd8@l) (and y3bd8@l (cons (y3b71@stx^ (car y3bd0@e) y3bd1@m* y3bd2@s* y3bd3@ae*) y3bd8@l))) (y3b77@match-each-any (cdr y3bd0@e) y3bd1@m* y3bd2@s* y3bd3@ae*)) (if (null? y3bd0@e) '() (if (y2c73@stx? y3bd0@e) (and (not (y2c29@top-marked? y3bd1@m*)) (call-with-values (lambda () (y2c91@join-wraps y3bd1@m* y3bd2@s* y3bd3@ae* y3bd0@e)) (lambda (y3be0@y3bdb y3be1@y3bdd y3be2@y3bdf) ((lambda (y3be6@ae* y3be7@s* y3be8@m*) (y3b77@match-each-any (y2c77@stx-expr y3bd0@e) y3be8@m* y3be7@s* y3be6@ae*)) y3be2@y3bdf y3be1@y3bdd y3be0@y3bdb)))) (if (y284a@y2769@annotation? y3bd0@e) (y3b77@match-each-any (y284c@y276d@annotation-expression y3bd0@e) y3bd1@m* y3bd2@s* y3bd3@ae*) '#f)))))) (set! y3b79@match-empty (lambda (y3bca@p y3bcb@r) (if (null? y3bca@p) y3bcb@r (if (eq? y3bca@p '_) y3bcb@r (if (eq? y3bca@p 'any) (cons '() y3bcb@r) (if (pair? y3bca@p) (y3b79@match-empty (car y3bca@p) (y3b79@match-empty (cdr y3bca@p) y3bcb@r)) (if (eq? y3bca@p 'each-any) (cons '() y3bcb@r) ((lambda (y3bce@t) (if (memv y3bce@t '(each)) (y3b79@match-empty (vector-ref y3bca@p '1) y3bcb@r) (if (memv y3bce@t '(each+)) (y3b79@match-empty (vector-ref y3bca@p '1) (y3b79@match-empty (reverse (vector-ref y3bca@p '2)) (y3b79@match-empty (vector-ref y3bca@p '3) y3bcb@r))) (if (memv y3bce@t '(free-id atom)) y3bcb@r (if (memv y3bce@t '(scheme-id atom)) y3bcb@r (if (memv y3bce@t '(vector)) (y3b79@match-empty (vector-ref y3bca@p '1) y3bcb@r) (assertion-violation 'syntax-dispatch '"invalid pattern" y3bca@p))))))) (vector-ref y3bca@p '0))))))))) (set! y3b7b@combine (lambda (y3bc6@r* y3bc7@r) (if (null? (car y3bc6@r*)) y3bc7@r (cons (map car y3bc6@r*) (y3b7b@combine (map cdr y3bc6@r*) y3bc7@r))))) (set! y3b7d@match* (lambda (y3ba2@e y3ba3@p y3ba4@m* y3ba5@s* y3ba6@ae* y3ba7@r) (if (null? y3ba3@p) (and (null? y3ba2@e) y3ba7@r) (if (pair? y3ba3@p) (and (pair? y3ba2@e) (y3b7f@match (car y3ba2@e) (car y3ba3@p) y3ba4@m* y3ba5@s* y3ba6@ae* (y3b7f@match (cdr y3ba2@e) (cdr y3ba3@p) y3ba4@m* y3ba5@s* y3ba6@ae* y3ba7@r))) (if (eq? y3ba3@p 'each-any) ((lambda (y3bae@l) (and y3bae@l (cons y3bae@l y3ba7@r))) (y3b77@match-each-any y3ba2@e y3ba4@m* y3ba5@s* y3ba6@ae*)) ((lambda (y3bb0@t) (if (memv y3bb0@t '(each)) (if (null? y3ba2@e) (y3b79@match-empty (vector-ref y3ba3@p '1) y3ba7@r) ((lambda (y3bb2@r*) (and y3bb2@r* (y3b7b@combine y3bb2@r* y3ba7@r))) (y3b73@match-each y3ba2@e (vector-ref y3ba3@p '1) y3ba4@m* y3ba5@s* y3ba6@ae*))) (if (memv y3bb0@t '(free-id)) (and (symbol? y3ba2@e) (y2c29@top-marked? y3ba4@m*) (y2cb3@free-id=? (y3b71@stx^ y3ba2@e y3ba4@m* y3ba5@s* y3ba6@ae*) (vector-ref y3ba3@p '1)) y3ba7@r) (if (memv y3bb0@t '(scheme-id)) (and (symbol? y3ba2@e) (y2c29@top-marked? y3ba4@m*) (y2cb3@free-id=? (y3b71@stx^ y3ba2@e y3ba4@m* y3ba5@s* y3ba6@ae*) (y2e40@scheme-stx (vector-ref y3ba3@p '1))) y3ba7@r) (if (memv y3bb0@t '(each+)) (call-with-values (lambda () (y3b75@match-each+ y3ba2@e (vector-ref y3ba3@p '1) (vector-ref y3ba3@p '2) (vector-ref y3ba3@p '3) y3ba4@m* y3ba5@s* y3ba6@ae* y3ba7@r)) (lambda (y3bba@y3bb5 y3bbb@y3bb7 y3bbc@y3bb9) ((lambda (y3bc0@r y3bc1@y-pat y3bc2@xr*) (and y3bc0@r (null? y3bc1@y-pat) (if (null? y3bc2@xr*) (y3b79@match-empty (vector-ref y3ba3@p '1) y3bc0@r) (y3b7b@combine y3bc2@xr* y3bc0@r)))) y3bbc@y3bb9 y3bbb@y3bb7 y3bba@y3bb5))) (if (memv y3bb0@t '(atom)) (and (fast-equal? (vector-ref y3ba3@p '1) (y2cbf@strip y3ba2@e y3ba4@m*)) y3ba7@r) (if (memv y3bb0@t '(vector)) (and (vector? y3ba2@e) (y3b7f@match (vector->list y3ba2@e) (vector-ref y3ba3@p '1) y3ba4@m* y3ba5@s* y3ba6@ae* y3ba7@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" y3ba3@p)))))))) (vector-ref y3ba3@p '0))))))) (set! y3b7f@match (lambda (y3b84@e y3b85@p y3b86@m* y3b87@s* y3b88@ae* y3b89@r) (if (not y3b89@r) '#f (if (eq? y3b85@p '_) y3b89@r (if (eq? y3b85@p 'any) (cons (y3b71@stx^ y3b84@e y3b86@m* y3b87@s* y3b88@ae*) y3b89@r) (if (y2c73@stx? y3b84@e) (and (not (y2c29@top-marked? y3b86@m*)) (call-with-values (lambda () (y2c91@join-wraps y3b86@m* y3b87@s* y3b88@ae* y3b84@e)) (lambda (y3b96@y3b91 y3b97@y3b93 y3b98@y3b95) ((lambda (y3b9c@ae* y3b9d@s* y3b9e@m*) (y3b7f@match (y2c77@stx-expr y3b84@e) y3b85@p y3b9e@m* y3b9d@s* y3b9c@ae* y3b89@r)) y3b98@y3b95 y3b97@y3b93 y3b96@y3b91)))) (if (y284a@y2769@annotation? y3b84@e) (y3b7f@match (y284c@y276d@annotation-expression y3b84@e) y3b85@p y3b86@m* y3b87@s* y3b88@ae* y3b89@r) (y3b7d@match* y3b84@e y3b85@p y3b86@m* y3b87@s* y3b88@ae* y3b89@r)))))))) (lambda (y3b80@e y3b81@p) (y3b7f@match y3b80@e y3b81@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2eb8@ellipsis? (lambda (y3c54@x) (and (y2cab@id? y3c54@x) (y2cb3@free-id=? y3c54@x (y2e40@scheme-stx '...))))) (set! y2eba@underscore? (lambda (y3c56@x) (and (y2cab@id? y3c56@x) (y2cb3@free-id=? y3c56@x (y2e40@scheme-stx '_))))) (set! y2ebc@verify-literals (lambda (y3c58@lits y3c59@expr) (for-each (lambda (y3c5c@x) (if (or (not (y2cab@id? y3c5c@x)) (y2eb8@ellipsis? y3c5c@x) (y2eba@underscore? y3c5c@x)) (y2f9f@syntax-violation '#f '"invalid literal" y3c59@expr y3c5c@x) (void))) y3c58@lits))) (set! y2ebe@syntax-case-transformer ((lambda () ((lambda (y3c5f@build-dispatch-call y3c61@invalid-ids-error y3c63@gen-clause y3c65@gen-syntax-case) (begin (set! y3c5f@build-dispatch-call (lambda (y3cd0@pvars y3cd1@expr y3cd2@y y3cd3@r y3cd4@mr) ((lambda (y3cda@ids y3cdb@levels) ((lambda (y3cde@labels y3cdf@new-vars) ((lambda (y3ce2@body) (list '(primitive apply) (y2c07@y2b47@build-lambda '#f y3cdf@new-vars y3ce2@body) y3cd2@y)) (y2ed8@chi-expr (y2c97@add-subst (y2c66@make-full-rib y3cda@ids y3cde@labels) y3cd1@expr) (append (map (lambda (y3ce4@label y3ce5@var y3ce6@level) (cons y3ce4@label (y2ccb@make-binding 'syntax (cons y3ce5@var y3ce6@level)))) y3cde@labels y3cdf@new-vars (map cdr y3cd0@pvars)) y3cd3@r) y3cd4@mr))) (map y2c2f@gen-label y3cda@ids) (map y2c2b@gen-lexical y3cda@ids))) (map car y3cd0@pvars) (map cdr y3cd0@pvars)))) (set! y3c61@invalid-ids-error (lambda (y3cc4@id* y3cc5@e y3cc6@class) ((letrec ((y3cca@find (lambda (y3ccc@id* y3ccd@ok*) (if (null? y3ccc@id*) (y2f9f@syntax-violation '#f '"invalid syntax" y3cc5@e) (if (y2cab@id? (car y3ccc@id*)) (if (y2cb9@bound-id-member? (car y3ccc@id*) y3ccd@ok*) (y2f9b@syntax-error (car y3ccc@id*) '"duplicate " y3cc6@class) (y3cca@find (cdr y3ccc@id*) (cons (car y3ccc@id*) y3ccd@ok*))) (y2f9b@syntax-error (car y3ccc@id*) '"invalid " y3cc6@class)))))) y3cca@find) y3cc4@id* '()))) (set! y3c63@gen-clause (lambda (y3c9c@x y3c9d@keys y3c9e@clauses y3c9f@r y3ca0@mr y3ca1@pat y3ca2@fender y3ca3@expr) (call-with-values (lambda () (y2eb4@convert-pattern y3ca1@pat y3c9d@keys)) (lambda (y3cb0@y3cad y3cb1@y3caf) ((lambda (y3cb4@pvars y3cb5@p) (if (not (y2cb7@distinct-bound-ids? (map car y3cb4@pvars))) (y3c61@invalid-ids-error (map car y3cb4@pvars) y3ca1@pat '"pattern variable") (if (not (for-all (lambda (y3cb8@x) (not (y2eb8@ellipsis? (car y3cb8@x)))) y3cb4@pvars)) (y2f9f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" y3ca1@pat) ((lambda (y3cba@y) ((lambda (y3cbc@test) ((lambda (y3cbe@conseq) ((lambda (y3cc0@altern) (list (y2c07@y2b47@build-lambda '#f (list y3cba@y) (list 'if y3cbc@test y3cbe@conseq y3cc0@altern)) (list '(primitive syntax-dispatch) y3c9c@x (list 'quote y3cb5@p)))) (y3c65@gen-syntax-case y3c9c@x y3c9d@keys y3c9e@clauses y3c9f@r y3ca0@mr))) (y3c5f@build-dispatch-call y3cb4@pvars y3ca3@expr y3cba@y y3c9f@r y3ca0@mr))) (if (eq? y3ca2@fender '#t) y3cba@y ((lambda (y3cc2@call) (list 'if y3cba@y y3cc2@call (list 'quote '#f))) (y3c5f@build-dispatch-call y3cb4@pvars y3ca2@fender y3cba@y y3c9f@r y3ca0@mr))))) (y2c2b@gen-lexical 'tmp))))) y3cb1@y3caf y3cb0@y3cad))))) (set! y3c65@gen-syntax-case (lambda (y3c7a@x y3c7b@keys y3c7c@clauses y3c7d@r y3c7e@mr) (if (null? y3c7c@clauses) (list '(primitive syntax-error) y3c7a@x) ((lambda (y3c84@t) ((lambda (y3c86@ls/false) (if y3c86@ls/false (apply (lambda (y3c88@pat y3c89@expr) (if (and (y2cab@id? y3c88@pat) (not (y2cb9@bound-id-member? y3c88@pat y3c7b@keys)) (not (y2eb8@ellipsis? y3c88@pat))) (if (y2cb3@free-id=? y3c88@pat (y2e40@scheme-stx '_)) (y2ed8@chi-expr y3c89@expr y3c7d@r y3c7e@mr) ((lambda (y3c8c@lab y3c8d@lex) ((lambda (y3c90@body) (list (y2c07@y2b47@build-lambda '#f (list y3c8d@lex) y3c90@body) y3c7a@x)) (y2ed8@chi-expr (y2c97@add-subst (y2c66@make-full-rib (list y3c88@pat) (list y3c8c@lab)) y3c89@expr) (cons (cons y3c8c@lab (y2ccb@make-binding 'syntax (cons y3c8d@lex '0))) y3c7d@r) y3c7e@mr))) (y2c2f@gen-label y3c88@pat) (y2c2b@gen-lexical y3c88@pat))) (y3c63@gen-clause y3c7a@x y3c7b@keys (cdr y3c7c@clauses) y3c7d@r y3c7e@mr y3c88@pat '#t y3c89@expr))) y3c86@ls/false) ((lambda (y3c92@t) ((lambda (y3c94@ls/false) (if y3c94@ls/false (apply (lambda (y3c96@pat y3c97@fender y3c98@expr) (y3c63@gen-clause y3c7a@x y3c7b@keys (cdr y3c7c@clauses) y3c7d@r y3c7e@mr y3c96@pat y3c97@fender y3c98@expr)) y3c94@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3c92@t))) (y2eb6@syntax-dispatch y3c92@t '(any any any)))) y3c84@t))) (y2eb6@syntax-dispatch y3c84@t '(any any)))) (car y3c7c@clauses))))) (lambda (y3c66@e y3c67@r y3c68@mr) ((lambda (y3c6c@t) ((lambda (y3c6e@ls/false) (if y3c6e@ls/false (apply (lambda (y3c70@expr y3c71@keys y3c72@clauses) (begin (y2ebc@verify-literals y3c71@keys y3c66@e) ((lambda (y3c76@x) ((lambda (y3c78@body) (list (y2c07@y2b47@build-lambda '#f (list y3c76@x) y3c78@body) (y2ed8@chi-expr y3c70@expr y3c67@r y3c68@mr))) (y3c65@gen-syntax-case y3c76@x y3c71@keys y3c72@clauses y3c67@r y3c68@mr))) (y2c2b@gen-lexical 'tmp)))) y3c6e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3c6c@t))) (y2eb6@syntax-dispatch y3c6c@t '(_ any each-any . each-any)))) y3c66@e)))) '#f '#f '#f '#f)))) (set! y2ec0@ellipsis-map (lambda (y3cea@proc y3ceb@ls . y3cee@ls*) ((lambda (y3cf1@who) (begin (set! y3cf1@who '...) (begin (if (not (list? y3ceb@ls)) (assertion-violation y3cf1@who '"not a list" y3ceb@ls) (void)) (if (not (null? y3cee@ls*)) ((lambda (y3cf2@n) (for-each (lambda (y3cf4@x) (begin (if (not (list? y3cf4@x)) (assertion-violation y3cf1@who '"not a list" y3cf4@x) (void)) (if (not (= (length y3cf4@x) y3cf2@n)) (assertion-violation y3cf1@who '"length mismatch" y3ceb@ls y3cf4@x) (void)))) y3cee@ls*)) (length y3ceb@ls)) (void)) (apply map y3cea@proc y3ceb@ls y3cee@ls*)))) '#f))) (set! y2ec2@syntax-transformer ((lambda () ((lambda (y3cf7@gen-syntax y3cf9@gen-ref y3cfb@gen-append y3cfd@gen-mappend y3cff@gen-map y3d01@gen-cons y3d03@gen-vector y3d05@regen) (begin (set! y3cf7@gen-syntax (lambda (y3d6e@src y3d6f@e y3d70@r y3d71@maps y3d72@ellipsis? y3d73@vec?) ((lambda (y3d7a@t) ((lambda (y3d7c@ls/false) (if (and y3d7c@ls/false (apply (lambda (y3d7e@dots) (y3d72@ellipsis? y3d7e@dots)) y3d7c@ls/false)) (apply (lambda (y3d80@dots) (y2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" y3d6e@src)) y3d7c@ls/false) ((lambda (y3d82@t) ((lambda (y3d84@ls/false) (if (and y3d84@ls/false (apply (lambda (y3d86@id) (y2cab@id? y3d86@id)) y3d84@ls/false)) (apply (lambda (y3d88@id) ((lambda (y3d8a@label) ((lambda (y3d8c@b) ((lambda () (if (eq? (y2ccd@binding-type y3d8c@b) 'syntax) (call-with-values (lambda () ((lambda (y3d92@var.lev) (y3cf9@gen-ref y3d6e@src (car y3d92@var.lev) (cdr y3d92@var.lev) y3d71@maps)) (y2ccf@binding-value y3d8c@b))) (lambda (y3d94@y3d8f y3d95@y3d91) ((lambda (y3d98@maps y3d99@var) (values (list 'ref y3d99@var) y3d98@maps)) y3d95@y3d91 y3d94@y3d8f))) (values (list 'quote y3d6f@e) y3d71@maps))))) (y2cc9@label->binding y3d8a@label y3d70@r))) (y2cc5@id->label y3d6f@e))) y3d84@ls/false) ((lambda (y3d9c@t) ((lambda (y3d9e@ls/false) (if (and y3d9e@ls/false (apply (lambda (y3da0@dots y3da1@e) (y3d72@ellipsis? y3da0@dots)) y3d9e@ls/false)) (apply (lambda (y3da4@dots y3da5@e) (if y3d73@vec? (y2f9f@syntax-violation '#f '"misplaced ellipsis in syntax form" y3d6e@src) (y3cf7@gen-syntax y3d6e@src y3da5@e y3d70@r y3d71@maps (lambda (y3da8@x) '#f) '#f))) y3d9e@ls/false) ((lambda (y3daa@t) ((lambda (y3dac@ls/false) (if (and y3dac@ls/false (apply (lambda (y3dae@x y3daf@dots y3db0@y) (y3d72@ellipsis? y3daf@dots)) y3dac@ls/false)) (apply (lambda (y3db4@x y3db5@dots y3db6@y) ((letrec ((y3dba@f (lambda (y3dbc@y y3dbd@k) ((lambda (y3dc0@t) ((lambda (y3dc2@ls/false) (if y3dc2@ls/false (apply (lambda () (y3dbd@k y3d71@maps)) y3dc2@ls/false) ((lambda (y3dc4@t) ((lambda (y3dc6@ls/false) (if (and y3dc6@ls/false (apply (lambda (y3dc8@dots y3dc9@y) (y3d72@ellipsis? y3dc8@dots)) y3dc6@ls/false)) (apply (lambda (y3dcc@dots y3dcd@y) (y3dba@f y3dcd@y (lambda (y3dd0@maps) (call-with-values (lambda () (y3dbd@k (cons '() y3dd0@maps))) (lambda (y3dd6@y3dd3 y3dd7@y3dd5) ((lambda (y3dda@maps y3ddb@x) (if (null? (car y3dda@maps)) (y2f9f@syntax-violation '#f '"extra ellipsis in syntax form" y3d6e@src) (values (y3cfd@gen-mappend y3ddb@x (car y3dda@maps)) (cdr y3dda@maps)))) y3dd7@y3dd5 y3dd6@y3dd3)))))) y3dc6@ls/false) ((lambda (y3dde@t) ((lambda (y3de0@ls/false) (if y3de0@ls/false (apply (lambda () (call-with-values (lambda () (y3cf7@gen-syntax y3d6e@src y3dbc@y y3d70@r y3d71@maps y3d72@ellipsis? y3d73@vec?)) (lambda (y3de6@y3de3 y3de7@y3de5) ((lambda (y3dea@maps y3deb@y) (call-with-values (lambda () (y3dbd@k y3dea@maps)) (lambda (y3df2@y3def y3df3@y3df1) ((lambda (y3df6@maps y3df7@x) (values (y3cfb@gen-append y3df7@x y3deb@y) y3df6@maps)) y3df3@y3df1 y3df2@y3def)))) y3de7@y3de5 y3de6@y3de3)))) y3de0@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3dde@t))) (y2eb6@syntax-dispatch y3dde@t '_))) y3dc4@t))) (y2eb6@syntax-dispatch y3dc4@t '(any . any)))) y3dc0@t))) (y2eb6@syntax-dispatch y3dc0@t '()))) y3dbc@y)))) y3dba@f) y3db6@y (lambda (y3dfa@maps) (call-with-values (lambda () (y3cf7@gen-syntax y3d6e@src y3db4@x y3d70@r (cons '() y3dfa@maps) y3d72@ellipsis? '#f)) (lambda (y3e00@y3dfd y3e01@y3dff) ((lambda (y3e04@maps y3e05@x) (if (null? (car y3e04@maps)) (y2f9f@syntax-violation '#f '"extra ellipsis in syntax form" y3d6e@src) (values (y3cff@gen-map y3e05@x (car y3e04@maps)) (cdr y3e04@maps)))) y3e01@y3dff y3e00@y3dfd)))))) y3dac@ls/false) ((lambda (y3e08@t) ((lambda (y3e0a@ls/false) (if y3e0a@ls/false (apply (lambda (y3e0c@x y3e0d@y) (call-with-values (lambda () (y3cf7@gen-syntax y3d6e@src y3e0c@x y3d70@r y3d71@maps y3d72@ellipsis? '#f)) (lambda (y3e14@y3e11 y3e15@y3e13) ((lambda (y3e18@maps y3e19@xnew) (call-with-values (lambda () (y3cf7@gen-syntax y3d6e@src y3e0d@y y3d70@r y3e18@maps y3d72@ellipsis? y3d73@vec?)) (lambda (y3e20@y3e1d y3e21@y3e1f) ((lambda (y3e24@maps y3e25@ynew) (values (y3d01@gen-cons y3d6f@e y3e0c@x y3e0d@y y3e19@xnew y3e25@ynew) y3e24@maps)) y3e21@y3e1f y3e20@y3e1d)))) y3e15@y3e13 y3e14@y3e11)))) y3e0a@ls/false) ((lambda (y3e28@t) ((lambda (y3e2a@ls/false) (if y3e2a@ls/false (apply (lambda (y3e2c@ls) (call-with-values (lambda () (y3cf7@gen-syntax y3d6e@src y3e2c@ls y3d70@r y3d71@maps y3d72@ellipsis? '#t)) (lambda (y3e32@y3e2f y3e33@y3e31) ((lambda (y3e36@maps y3e37@lsnew) (values (y3d03@gen-vector y3d6f@e y3e2c@ls y3e37@lsnew) y3e36@maps)) y3e33@y3e31 y3e32@y3e2f)))) y3e2a@ls/false) ((lambda (y3e3a@t) ((lambda (y3e3c@ls/false) (if y3e3c@ls/false (apply (lambda () (values (list 'quote y3d6f@e) y3d71@maps)) y3e3c@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3e3a@t))) (y2eb6@syntax-dispatch y3e3a@t '_))) y3e28@t))) (y2eb6@syntax-dispatch y3e28@t '#(vector each-any)))) y3e08@t))) (y2eb6@syntax-dispatch y3e08@t '(any . any)))) y3daa@t))) (y2eb6@syntax-dispatch y3daa@t '(any any . any)))) y3d9c@t))) (y2eb6@syntax-dispatch y3d9c@t '(any any)))) y3d82@t))) (y2eb6@syntax-dispatch y3d82@t 'any))) y3d7a@t))) (y2eb6@syntax-dispatch y3d7a@t 'any))) y3d6f@e))) (set! y3cf9@gen-ref (lambda (y3d54@src y3d55@var y3d56@level y3d57@maps) (if (= y3d56@level '0) (values y3d55@var y3d57@maps) (if (null? y3d57@maps) (y2f9f@syntax-violation '#f '"missing ellipsis in syntax form" y3d54@src) (call-with-values (lambda () (y3cf9@gen-ref y3d54@src y3d55@var (- y3d56@level '1) (cdr y3d57@maps))) (lambda (y3d60@y3d5d y3d61@y3d5f) ((lambda (y3d64@outer-maps y3d65@outer-var) ((lambda (y3d68@t) (if y3d68@t ((lambda (y3d6a@b) (values (cdr y3d6a@b) y3d57@maps)) y3d68@t) ((lambda (y3d6c@inner-var) (values y3d6c@inner-var (cons (cons (cons y3d65@outer-var y3d6c@inner-var) (car y3d57@maps)) y3d64@outer-maps))) (y2c2b@gen-lexical 'tmp)))) (assq y3d65@outer-var (car y3d57@maps)))) y3d61@y3d5f y3d60@y3d5d))))))) (set! y3cfb@gen-append (lambda (y3d50@x y3d51@y) (if (fast-equal? y3d51@y ''()) y3d50@x (list 'append y3d50@x y3d51@y)))) (set! y3cfd@gen-mappend (lambda (y3d4c@e y3d4d@map-env) (list 'apply '(primitive append) (y3cff@gen-map y3d4c@e y3d4d@map-env)))) (set! y3cff@gen-map (lambda (y3d3a@e y3d3b@map-env) ((lambda (y3d3e@formals y3d3f@actuals) (if (eq? (car y3d3a@e) 'ref) (car y3d3f@actuals) (if (for-all (lambda (y3d42@x) (and (eq? (car y3d42@x) 'ref) (memq (cadr y3d42@x) y3d3e@formals))) (cdr y3d3a@e)) ((lambda (y3d44@args) (cons 'map (cons (list 'primitive (car y3d3a@e)) y3d44@args))) (map ((lambda (y3d46@r) (lambda (y3d48@x) (cdr (assq (cadr y3d48@x) y3d46@r)))) (map cons y3d3e@formals y3d3f@actuals)) (cdr y3d3a@e))) (cons* 'map (list 'lambda y3d3e@formals y3d3a@e) y3d3f@actuals)))) (map cdr y3d3b@map-env) (map (lambda (y3d4a@x) (list 'ref (car y3d4a@x))) y3d3b@map-env)))) (set! y3d01@gen-cons (lambda (y3d2a@e y3d2b@x y3d2c@y y3d2d@xnew y3d2e@ynew) ((lambda (y3d34@t) (if (memv y3d34@t '(quote)) (if (eq? (car y3d2d@xnew) 'quote) ((lambda (y3d36@xnew y3d37@ynew) (if (and (eq? y3d36@xnew y3d2b@x) (eq? y3d37@ynew y3d2c@y)) (list 'quote y3d2a@e) (list 'quote (cons y3d36@xnew y3d37@ynew)))) (cadr y3d2d@xnew) (cadr y3d2e@ynew)) (if (null? (cadr y3d2e@ynew)) (list 'list y3d2d@xnew) (list 'cons y3d2d@xnew y3d2e@ynew))) (if (memv y3d34@t '(list)) (cons 'list (cons y3d2d@xnew (cdr y3d2e@ynew))) (list 'cons y3d2d@xnew y3d2e@ynew)))) (car y3d2e@ynew)))) (set! y3d03@gen-vector (lambda (y3d24@e y3d25@ls y3d26@lsnew) (if (eq? (car y3d26@lsnew) 'quote) (if (eq? (cadr y3d26@lsnew) y3d25@ls) (list 'quote y3d24@e) (list 'quote (list->vector (cadr y3d26@lsnew)))) (if (eq? (car y3d26@lsnew) 'list) (cons 'vector (cdr y3d26@lsnew)) (list 'list->vector y3d26@lsnew))))) (set! y3d05@regen (lambda (y3d1e@x) ((lambda (y3d20@t) (if (memv y3d20@t '(ref)) (cadr y3d1e@x) (if (memv y3d20@t '(primitive)) (list 'primitive (cadr y3d1e@x)) (if (memv y3d20@t '(quote)) (list 'quote (cadr y3d1e@x)) (if (memv y3d20@t '(lambda)) (y2c07@y2b47@build-lambda '#f (cadr y3d1e@x) (y3d05@regen (caddr y3d1e@x))) (if (memv y3d20@t '(map)) ((lambda (y3d22@ls) (cons '(primitive ellipsis-map) y3d22@ls)) (map y3d05@regen (cdr y3d1e@x))) (cons (list 'primitive (car y3d1e@x)) (map y3d05@regen (cdr y3d1e@x))))))))) (car y3d1e@x)))) (lambda (y3d06@e y3d07@r y3d08@mr) ((lambda (y3d0c@t) ((lambda (y3d0e@ls/false) (if y3d0e@ls/false (apply (lambda (y3d10@x) (call-with-values (lambda () (y3cf7@gen-syntax y3d06@e y3d10@x y3d07@r '() y2eb8@ellipsis? '#f)) (lambda (y3d16@y3d13 y3d17@y3d15) ((lambda (y3d1a@maps y3d1b@e) (y3d05@regen y3d1b@e)) y3d17@y3d15 y3d16@y3d13)))) y3d0e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3d0c@t))) (y2eb6@syntax-dispatch y3d0c@t '(_ any)))) y3d06@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2ec4@core-macro-transformer (lambda (y3e3e@name) ((lambda (y3e40@t) (if (memv y3e40@t '(quote)) y2e66@quote-transformer (if (memv y3e40@t '(lambda)) y2e6a@lambda-transformer (if (memv y3e40@t '(case-lambda)) y2e68@case-lambda-transformer (if (memv y3e40@t '(letrec)) y2e4e@letrec-transformer (if (memv y3e40@t '(letrec*)) y2e50@letrec*-transformer (if (memv y3e40@t '(if)) y2e5e@if-transformer (if (memv y3e40@t '(and)) y2e60@and-transformer (if (memv y3e40@t '(or)) y2e62@or-transformer (if (memv y3e40@t '(foreign-call)) y2eb2@foreign-call-transformer (if (memv y3e40@t '(syntax-case)) y2ebe@syntax-case-transformer (if (memv y3e40@t '(syntax)) y2ec2@syntax-transformer (if (memv y3e40@t '(type-descriptor)) y2e54@type-descriptor-transformer (if (memv y3e40@t '(record-type-descriptor)) y2e56@record-type-descriptor-transformer (if (memv y3e40@t '(record-constructor-descriptor)) y2e58@record-constructor-descriptor-transformer (if (memv y3e40@t '(fluid-let-syntax)) y2e52@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" y3e3e@name))))))))))))))))) y3e3e@name))) (set! y2ec6@symbol-macro (lambda (y3e42@x y3e43@set) ((lambda (y3e46@t) ((lambda (y3e48@ls/false) (if (and y3e48@ls/false (apply (lambda (y3e4a@name) (and (y2cab@id? y3e4a@name) (memq (y2cad@id->sym y3e4a@name) y3e43@set))) y3e48@ls/false)) (apply (lambda (y3e4c@name) (y2e6c@bless (list 'quote y3e4c@name))) y3e48@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3e46@t))) (y2eb6@syntax-dispatch y3e46@t '(_ any)))) y3e42@x))) (set! y2ec8@macro-transformer (lambda (y3e4e@x) (if (procedure? y3e4e@x) y3e4e@x (if (symbol? y3e4e@x) ((lambda (y3e50@t) (if (memv y3e50@t '(define-record-type)) y2eaa@define-record-type-macro (if (memv y3e50@t '(define-struct)) y2ea8@define-struct-macro (if (memv y3e50@t '(include)) y2e9e@include-macro (if (memv y3e50@t '(cond)) y2e9a@cond-macro (if (memv y3e50@t '(let)) y2e72@let-macro (if (memv y3e50@t '(do)) y2e92@do-macro (if (memv y3e50@t '(or)) y2e96@or-macro (if (memv y3e50@t '(and)) y2e98@and-macro (if (memv y3e50@t '(let*)) y2e94@let*-macro (if (memv y3e50@t '(let-values)) y2e74@let-values-macro (if (memv y3e50@t '(let*-values)) y2e76@let*-values-macro (if (memv y3e50@t '(syntax-rules)) y2ea2@syntax-rules-macro (if (memv y3e50@t '(quasiquote)) y2ea4@quasiquote-macro (if (memv y3e50@t '(quasisyntax)) y2ea6@quasisyntax-macro (if (memv y3e50@t '(with-syntax)) y2e6e@with-syntax-macro (if (memv y3e50@t '(when)) y2e5a@when-macro (if (memv y3e50@t '(unless)) y2e5c@unless-macro (if (memv y3e50@t '(case)) y2e64@case-macro (if (memv y3e50@t '(identifier-syntax)) y2e90@identifier-syntax-macro (if (memv y3e50@t '(time)) y2e88@time-macro (if (memv y3e50@t '(delay)) y2e8a@delay-macro (if (memv y3e50@t '(assert)) y2e8c@assert-macro (if (memv y3e50@t '(endianness)) y2e8e@endianness-macro (if (memv y3e50@t '(guard)) y2e84@guard-macro (if (memv y3e50@t '(define-enumeration)) y2e86@define-enumeration-macro (if (memv y3e50@t '(trace-lambda)) y2e78@trace-lambda-macro (if (memv y3e50@t '(trace-define)) y2e7a@trace-define-macro (if (memv y3e50@t '(trace-define-syntax)) y2e7c@trace-define-syntax-macro (if (memv y3e50@t '(trace-let-syntax)) y2e80@trace-let-syntax-macro (if (memv y3e50@t '(trace-letrec-syntax)) y2e82@trace-letrec-syntax-macro (if (memv y3e50@t '(define-condition-type)) y2eac@define-condition-type-macro (if (memv y3e50@t '(parameterize)) y2eb0@parameterize-macro (if (memv y3e50@t '(include-into)) y2ea0@include-into-macro (if (memv y3e50@t '(eol-style)) (lambda (y3e52@x) (y2ec6@symbol-macro y3e52@x '(none lf cr crlf nel crnel ls))) (if (memv y3e50@t '(error-handling-mode)) (lambda (y3e54@x) (y2ec6@symbol-macro y3e54@x '(ignore raise replace))) (if (memv y3e50@t '(buffer-mode)) (lambda (y3e56@x) (y2ec6@symbol-macro y3e56@x '(none line block))) (if (memv y3e50@t '(file-options)) y2c1e@file-options-macro (if (memv y3e50@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) y2eae@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" y3e4e@x)))))))))))))))))))))))))))))))))))))))) y3e4e@x) (error 'core-macro-transformer '"BUG: invalid macro" y3e4e@x))))) (set! y2eca@local-macro-transformer (lambda (y3e58@x) (car y3e58@x))) (set! y2ecc@do-macro-call (lambda (y3e5a@transformer y3e5b@expr) ((lambda (y3e5e@out) (begin ((letrec ((y3e60@f (lambda (y3e62@x) (if (not (y2c73@stx? y3e62@x)) (if (pair? y3e62@x) (begin (y3e60@f (car y3e62@x)) (y3e60@f (cdr y3e62@x))) (if (vector? y3e62@x) (vector-for-each y3e60@f y3e62@x) (if (symbol? y3e62@x) (y2f9f@syntax-violation '#f '"raw symbol encountered in output of macro" y3e5b@expr y3e62@x) (void)))) (void))))) y3e60@f) y3e5e@out) (y2c95@add-mark (y2c8b@gen-mark) y3e5e@out y3e5b@expr))) (y3e5a@transformer (y2c95@add-mark y2c8d@anti-mark y3e5b@expr '#f))))) (set! y2ece@chi-macro (lambda (y3e64@p y3e65@e) (y2ecc@do-macro-call (y2ec8@macro-transformer y3e64@p) y3e65@e))) (set! y2ed0@chi-local-macro (lambda (y3e68@p y3e69@e) (y2ecc@do-macro-call (y2eca@local-macro-transformer y3e68@p) y3e69@e))) (set! y2ed2@chi-global-macro (lambda (y3e6c@p y3e6d@e) ((lambda (y3e70@lib y3e71@loc) (begin (y2ad0@y2972@visit-library y3e70@lib) ((lambda (y3e74@x) ((lambda (y3e76@transformer) (y2ecc@do-macro-call y3e76@transformer y3e6d@e)) (if (procedure? y3e74@x) y3e74@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" y3e74@x)))) (symbol-value y3e71@loc)))) (car y3e6c@p) (cdr y3e6c@p)))) (set! y2ed4@chi-expr* (lambda (y3e78@e* y3e79@r y3e7a@mr) (if (null? y3e78@e*) '() ((lambda (y3e7e@e) (cons y3e7e@e (y2ed4@chi-expr* (cdr y3e78@e*) y3e79@r y3e7a@mr))) (y2ed8@chi-expr (car y3e78@e*) y3e79@r y3e7a@mr))))) (set! y2ed6@chi-application (lambda (y3e80@e y3e81@r y3e82@mr) ((lambda (y3e86@t) ((lambda (y3e88@ls/false) (if y3e88@ls/false (apply (lambda (y3e8a@rator y3e8b@rands) ((lambda (y3e8e@rator) (cons y3e8e@rator (y2ed4@chi-expr* y3e8b@rands y3e81@r y3e82@mr))) (y2ed8@chi-expr y3e8a@rator y3e81@r y3e82@mr))) y3e88@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3e86@t))) (y2eb6@syntax-dispatch y3e86@t '(any . each-any)))) y3e80@e))) (set! y2ed8@chi-expr (lambda (y3e90@e y3e91@r y3e92@mr) (call-with-values (lambda () (y2cd3@syntax-type y3e90@e y3e91@r)) (lambda (y3e9c@y3e97 y3e9d@y3e99 y3e9e@y3e9b) ((lambda (y3ea2@kwd y3ea3@value y3ea4@type) ((lambda (y3ea8@t) (if (memv y3ea8@t '(core-macro)) ((lambda (y3eaa@transformer) (y3eaa@transformer y3e90@e y3e91@r y3e92@mr)) (y2ec4@core-macro-transformer y3ea3@value)) (if (memv y3ea8@t '(global)) ((lambda (y3eac@lib) ((lambda (y3eae@loc) ((lambda () (begin ((y2f21@inv-collector) y3eac@lib) y3eae@loc)))) (cdr y3ea3@value))) (car y3ea3@value)) (if (memv y3ea8@t '(core-prim)) ((lambda (y3eb0@name) (list 'primitive y3eb0@name)) y3ea3@value) (if (memv y3ea8@t '(call)) (y2ed6@chi-application y3e90@e y3e91@r y3e92@mr) (if (memv y3ea8@t '(lexical)) ((lambda (y3eb2@lex) y3eb2@lex) (y2e42@lexical-var y3ea3@value)) (if (memv y3ea8@t '(global-macro global-macro!)) (y2ed8@chi-expr (y2ed2@chi-global-macro y3ea3@value y3e90@e) y3e91@r y3e92@mr) (if (memv y3ea8@t '(local-macro local-macro!)) (y2ed8@chi-expr (y2ed0@chi-local-macro y3ea3@value y3e90@e) y3e91@r y3e92@mr) (if (memv y3ea8@t '(macro macro!)) (y2ed8@chi-expr (y2ece@chi-macro y3ea3@value y3e90@e) y3e91@r y3e92@mr) (if (memv y3ea8@t '(constant)) ((lambda (y3eb4@datum) (list 'quote y3eb4@datum)) y3ea3@value) (if (memv y3ea8@t '(set!)) (y2eda@chi-set! y3e90@e y3e91@r y3e92@mr) (if (memv y3ea8@t '(begin)) ((lambda (y3eb6@t) ((lambda (y3eb8@ls/false) (if y3eb8@ls/false (apply (lambda (y3eba@x y3ebb@x*) (y2c0a@y2b79@build-sequence '#f (y2ed4@chi-expr* (cons y3eba@x y3ebb@x*) y3e91@r y3e92@mr))) y3eb8@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3eb6@t))) (y2eb6@syntax-dispatch y3eb6@t '(_ any . each-any)))) y3e90@e) (if (memv y3ea8@t '(let-syntax letrec-syntax)) ((lambda (y3ebe@t) ((lambda (y3ec0@ls/false) (if (and y3ec0@ls/false (apply (lambda (y3ec2@xlhs* y3ec3@xrhs* y3ec4@xbody y3ec5@xbody*) (if (not (y2cb5@valid-bound-ids? y3ec2@xlhs*)) (y2f9f@syntax-violation '#f '"invalid identifiers" y3e90@e) (void))) y3ec0@ls/false)) (apply (lambda (y3eca@xlhs* y3ecb@xrhs* y3ecc@xbody y3ecd@xbody*) ((lambda (y3ed2@xlab*) ((lambda (y3ed4@xrib) ((lambda (y3ed6@xb*) ((lambda () (y2c0a@y2b79@build-sequence '#f (y2ed4@chi-expr* (map (lambda (y3ed8@x) (y2c97@add-subst y3ed4@xrib y3ed8@x)) (cons y3ecc@xbody y3ecd@xbody*)) (append (map cons y3ed2@xlab* y3ed6@xb*) y3e91@r) (append (map cons y3ed2@xlab* y3ed6@xb*) y3e92@mr)))))) (map (lambda (y3eda@x) (y2ce9@make-eval-transformer (y2f13@expand-transformer (if (eq? y3ea4@type 'let-syntax) y3eda@x (y2c97@add-subst y3ed4@xrib y3eda@x)) y3e92@mr))) y3ecb@xrhs*))) (y2c66@make-full-rib y3eca@xlhs* y3ed2@xlab*))) (map y2c2f@gen-label y3eca@xlhs*))) y3ec0@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3ebe@t))) (y2eb6@syntax-dispatch y3ebe@t '(_ #(each (any any)) any . each-any)))) y3e90@e) (if (memv y3ea8@t '(displaced-lexical)) (y2f9f@syntax-violation '#f '"identifier out of context" y3e90@e) (if (memv y3ea8@t '(syntax)) (y2f9f@syntax-violation '#f '"reference to pattern variable outside a syntax form" y3e90@e) (if (memv y3ea8@t '(define define-syntax module import library)) (y2f9f@syntax-violation '#f (string-append ((lambda (y3edc@t) (if (memv y3edc@t '(define)) '"a definition" (if (memv y3edc@t '(define-syntax)) '"a define-syntax" (if (memv y3edc@t '(module)) '"a module definition" (if (memv y3edc@t '(library)) '"a library definition" (if (memv y3edc@t '(import)) '"an import declaration" (if (memv y3edc@t '(export)) '"an export declaration" '"a non-expression"))))))) y3ea4@type) '" was found where an expression was expected") y3e90@e) (if (memv y3ea8@t '(mutable)) (y2f9f@syntax-violation '#f '"attempt to reference an unexportable variable" y3e90@e) (y2f9f@syntax-violation '#f '"invalid expression" y3e90@e)))))))))))))))))) y3ea4@type)) y3e9e@y3e9b y3e9d@y3e99 y3e9c@y3e97))))) (set! y2eda@chi-set! (lambda (y3ede@e y3edf@r y3ee0@mr) ((lambda (y3ee4@t) ((lambda (y3ee6@ls/false) (if (and y3ee6@ls/false (apply (lambda (y3ee8@x y3ee9@v) (y2cab@id? y3ee8@x)) y3ee6@ls/false)) (apply (lambda (y3eec@x y3eed@v) (call-with-values (lambda () (y2cd3@syntax-type y3eec@x y3edf@r)) (lambda (y3ef6@y3ef1 y3ef7@y3ef3 y3ef8@y3ef5) ((lambda (y3efc@kwd y3efd@value y3efe@type) ((lambda (y3f02@t) (if (memv y3f02@t '(lexical)) (begin (y2e46@set-lexical-mutable! y3efd@value '#t) (list 'set! (y2e42@lexical-var y3efd@value) (y2ed8@chi-expr y3eed@v y3edf@r y3ee0@mr))) (if (memv y3f02@t '(core-prim)) (y2f9f@syntax-violation '#f '"cannot modify imported core primitive" y3ede@e) (if (memv y3f02@t '(global)) (y2f9f@syntax-violation '#f '"attempt to modify imported binding" y3ede@e) (if (memv y3f02@t '(global-macro!)) (y2ed8@chi-expr (y2ed2@chi-global-macro y3efd@value y3ede@e) y3edf@r y3ee0@mr) (if (memv y3f02@t '(local-macro!)) (y2ed8@chi-expr (y2ed0@chi-local-macro y3efd@value y3ede@e) y3edf@r y3ee0@mr) (if (memv y3f02@t '(mutable)) (y2f9f@syntax-violation '#f '"attempt to assign to an unexportable variable" y3ede@e) (y2f9f@syntax-violation '#f '"invalid syntax" y3ede@e)))))))) y3efe@type)) y3ef8@y3ef5 y3ef7@y3ef3 y3ef6@y3ef1)))) y3ee6@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3ee4@t))) (y2eb6@syntax-dispatch y3ee4@t '(_ any any)))) y3ede@e))) (set! y2edc@verify-formals (lambda (y3f04@fmls y3f05@stx) ((lambda (y3f08@t) ((lambda (y3f0a@ls/false) (if y3f0a@ls/false (apply (lambda (y3f0c@x*) (if (not (y2cb5@valid-bound-ids? y3f0c@x*)) (y2e70@invalid-fmls-error y3f05@stx y3f04@fmls) (void))) y3f0a@ls/false) ((lambda (y3f0e@t) ((lambda (y3f10@ls/false) (if y3f10@ls/false (apply (lambda (y3f12@x* y3f13@x) (if (not (y2cb5@valid-bound-ids? (cons y3f13@x y3f12@x*))) (y2e70@invalid-fmls-error y3f05@stx y3f04@fmls) (void))) y3f10@ls/false) ((lambda (y3f16@t) ((lambda (y3f18@ls/false) (if y3f18@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid syntax" y3f05@stx)) y3f18@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3f16@t))) (y2eb6@syntax-dispatch y3f16@t '_))) y3f0e@t))) (y2eb6@syntax-dispatch y3f0e@t '#(each+ any () any)))) y3f08@t))) (y2eb6@syntax-dispatch y3f08@t 'each-any))) y3f04@fmls))) (set! y2ede@chi-lambda-clause (lambda (y3f1a@stx y3f1b@fmls y3f1c@body* y3f1d@r y3f1e@mr) ((lambda (y3f24@t) ((lambda (y3f26@ls/false) (if y3f26@ls/false (apply (lambda (y3f28@x*) (begin (y2edc@verify-formals y3f1b@fmls y3f1a@stx) ((lambda (y3f2a@lex* y3f2b@lab*) (values y3f2a@lex* (y2eee@chi-internal (y2c97@add-subst (y2c66@make-full-rib y3f28@x* y3f2b@lab*) y3f1c@body*) (y2e4a@add-lexicals y3f2b@lab* y3f2a@lex* y3f1d@r) y3f1e@mr))) (map y2c2b@gen-lexical y3f28@x*) (map y2c2f@gen-label y3f28@x*)))) y3f26@ls/false) ((lambda (y3f2e@t) ((lambda (y3f30@ls/false) (if y3f30@ls/false (apply (lambda (y3f32@x* y3f33@x) (begin (y2edc@verify-formals y3f1b@fmls y3f1a@stx) ((lambda (y3f36@lex* y3f37@lab* y3f38@lex y3f39@lab) (values (append y3f36@lex* y3f38@lex) (y2eee@chi-internal (y2c97@add-subst (y2c66@make-full-rib (cons y3f33@x y3f32@x*) (cons y3f39@lab y3f37@lab*)) y3f1c@body*) (y2e4a@add-lexicals (cons y3f39@lab y3f37@lab*) (cons y3f38@lex y3f36@lex*) y3f1d@r) y3f1e@mr))) (map y2c2b@gen-lexical y3f32@x*) (map y2c2f@gen-label y3f32@x*) (y2c2b@gen-lexical y3f33@x) (y2c2f@gen-label y3f33@x)))) y3f30@ls/false) ((lambda (y3f3e@t) ((lambda (y3f40@ls/false) (if y3f40@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid syntax" y3f1b@fmls)) y3f40@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y3f3e@t))) (y2eb6@syntax-dispatch y3f3e@t '_))) y3f2e@t))) (y2eb6@syntax-dispatch y3f2e@t '#(each+ any () any)))) y3f24@t))) (y2eb6@syntax-dispatch y3f24@t 'each-any))) y3f1b@fmls))) (set! y2ee0@chi-lambda-clause* (lambda (y3f42@stx y3f43@fmls* y3f44@body** y3f45@r y3f46@mr) (if (null? y3f43@fmls*) (values '() '()) (call-with-values (lambda () (y2ede@chi-lambda-clause y3f42@stx (car y3f43@fmls*) (car y3f44@body**) y3f45@r y3f46@mr)) (lambda (y3f50@y3f4d y3f51@y3f4f) ((lambda (y3f54@b y3f55@a) (call-with-values (lambda () (y2ee0@chi-lambda-clause* y3f42@stx (cdr y3f43@fmls*) (cdr y3f44@body**) y3f45@r y3f46@mr)) (lambda (y3f5c@y3f59 y3f5d@y3f5b) ((lambda (y3f60@b* y3f61@a*) (values (cons y3f55@a y3f61@a*) (cons y3f54@b y3f60@b*))) y3f5d@y3f5b y3f5c@y3f59)))) y3f51@y3f4f y3f50@y3f4d)))))) (set! y2ee2@chi-defun (lambda (y3f64@x y3f65@r y3f66@mr) ((lambda (y3f6a@fmls y3f6b@body*) (call-with-values (lambda () (y2ede@chi-lambda-clause y3f6a@fmls y3f6a@fmls y3f6b@body* y3f65@r y3f66@mr)) (lambda (y3f72@y3f6f y3f73@y3f71) ((lambda (y3f76@body y3f77@fmls) (y2c07@y2b47@build-lambda '#f y3f77@fmls y3f76@body)) y3f73@y3f71 y3f72@y3f6f)))) (car y3f64@x) (cdr y3f64@x)))) (set! y2ee4@chi-rhs (lambda (y3f7a@rhs y3f7b@r y3f7c@mr) ((lambda (y3f80@t) (if (memv y3f80@t '(defun)) (y2ee2@chi-defun (cdr y3f7a@rhs) y3f7b@r y3f7c@mr) (if (memv y3f80@t '(expr)) ((lambda (y3f82@expr) (y2ed8@chi-expr y3f82@expr y3f7b@r y3f7c@mr)) (cdr y3f7a@rhs)) (if (memv y3f80@t '(top-expr)) ((lambda (y3f84@expr) (y2c0a@y2b79@build-sequence '#f (list (y2ed8@chi-expr y3f84@expr y3f7b@r y3f7c@mr) (y2c0b@y2b7b@build-void)))) (cdr y3f7a@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" y3f7a@rhs))))) (car y3f7a@rhs)))) (set! y2ee6@expand-interaction-rhs*/init* (lambda (y3f86@lhs* y3f87@rhs* y3f88@init* y3f89@r y3f8a@mr) ((letrec ((y3f90@f (lambda (y3f92@lhs* y3f93@rhs*) (if (null? y3f92@lhs*) (map (lambda (y3f96@x) (y2ed8@chi-expr y3f96@x y3f89@r y3f8a@mr)) y3f88@init*) ((lambda (y3f98@lhs y3f99@rhs) ((lambda (y3f9c@t) (if (memv y3f9c@t '(defun)) ((lambda (y3f9e@rhs) (cons (list 'set! y3f98@lhs y3f9e@rhs) (y3f90@f (cdr y3f92@lhs*) (cdr y3f93@rhs*)))) (y2ee2@chi-defun (cdr y3f99@rhs) y3f89@r y3f8a@mr)) (if (memv y3f9c@t '(expr)) ((lambda (y3fa0@rhs) (cons (list 'set! y3f98@lhs y3fa0@rhs) (y3f90@f (cdr y3f92@lhs*) (cdr y3f93@rhs*)))) (y2ed8@chi-expr (cdr y3f99@rhs) y3f89@r y3f8a@mr)) (if (memv y3f9c@t '(top-expr)) ((lambda (y3fa2@e) (cons y3fa2@e (y3f90@f (cdr y3f92@lhs*) (cdr y3f93@rhs*)))) (y2ed8@chi-expr (cdr y3f99@rhs) y3f89@r y3f8a@mr)) (error 'expand-interaction '"invallid" y3f99@rhs))))) (car y3f99@rhs))) (car y3f92@lhs*) (car y3f93@rhs*)))))) y3f90@f) y3f86@lhs* y3f87@rhs*))) (set! y2ee8@chi-rhs* (lambda (y3fa4@rhs* y3fa5@r y3fa6@mr) ((letrec ((y3faa@f (lambda (y3fac@ls) (if (null? y3fac@ls) '() ((lambda (y3fae@a) (cons y3fae@a (y3faa@f (cdr y3fac@ls)))) (y2ee4@chi-rhs (car y3fac@ls) y3fa5@r y3fa6@mr)))))) y3faa@f) y3fa4@rhs*))) (set! y2eea@find-bound=? (lambda (y3fb0@x y3fb1@lhs* y3fb2@rhs*) (if (null? y3fb1@lhs*) '#f (if (y2cb1@bound-id=? y3fb0@x (car y3fb1@lhs*)) (car y3fb2@rhs*) (y2eea@find-bound=? y3fb0@x (cdr y3fb1@lhs*) (cdr y3fb2@rhs*)))))) (set! y2eec@find-dups (lambda (y3fb6@ls) ((letrec ((y3fb8@f (lambda (y3fba@ls y3fbb@dups) (if (null? y3fba@ls) y3fbb@dups ((lambda (y3fbe@t) (if y3fbe@t ((lambda (y3fc0@x) (y3fb8@f (cdr y3fba@ls) (cons (list (car y3fba@ls) y3fc0@x) y3fbb@dups))) y3fbe@t) (y3fb8@f (cdr y3fba@ls) y3fbb@dups))) (y2eea@find-bound=? (car y3fba@ls) (cdr y3fba@ls) (cdr y3fba@ls))))))) y3fb8@f) y3fb6@ls '()))) (set! y2eee@chi-internal (lambda (y3fc2@e* y3fc3@r y3fc4@mr) ((lambda (y3fc8@rib) (call-with-values (lambda () (y2f11@chi-body* (map (lambda (y3fda@x) (y2c97@add-subst y3fc8@rib y3fda@x)) (y2ca9@syntax->list y3fc2@e*)) y3fc3@r y3fc4@mr '() '() '() '() '() y3fc8@rib '#f)) (lambda (y3fdc@y3fcb y3fdd@y3fcd y3fde@y3fcf y3fdf@y3fd1 y3fe0@y3fd3 y3fe1@y3fd5 y3fe2@y3fd7 y3fe3@y3fd9) ((lambda (y3fec@_exp* y3fed@kwd* y3fee@mod** y3fef@rhs* y3ff0@lex* y3ff1@mr y3ff2@r y3ff3@e*) (begin (if (null? y3ff3@e*) (y2f9f@syntax-violation '#f '"no expression in body" y3ff3@e*) (void)) ((lambda (y3ffc@init*) ((lambda (y3ffe@rhs*) ((lambda () (y2c0d@y2b7f@build-letrec* '#f (reverse y3ff0@lex*) (reverse y3ffe@rhs*) (y2c0a@y2b79@build-sequence '#f y3ffc@init*))))) (y2ee8@chi-rhs* y3fef@rhs* y3ff2@r y3ff1@mr))) (y2ed4@chi-expr* (append (apply append (reverse y3fee@mod**)) y3ff3@e*) y3ff2@r y3ff1@mr)))) y3fe3@y3fd9 y3fe2@y3fd7 y3fe1@y3fd5 y3fe0@y3fd3 y3fdf@y3fd1 y3fde@y3fcf y3fdd@y3fcd y3fdc@y3fcb)))) (y2c5a@make-empty-rib)))) (set! y2ef0@parse-module (lambda (y4000@e) ((lambda (y4002@t) ((lambda (y4004@ls/false) (if y4004@ls/false (apply (lambda (y4006@export* y4007@b*) (begin (if (not (for-all y2cab@id? y4006@export*)) (y2f9f@syntax-violation '#f '"module exports must be identifiers" y4000@e) (void)) (values '#f (list->vector y4006@export*) y4007@b*))) y4004@ls/false) ((lambda (y400a@t) ((lambda (y400c@ls/false) (if y400c@ls/false (apply (lambda (y400e@name y400f@export* y4010@b*) (begin (if (not (y2cab@id? y400e@name)) (y2f9f@syntax-violation '#f '"module name must be an identifier" y4000@e) (void)) (if (not (for-all y2cab@id? y400f@export*)) (y2f9f@syntax-violation '#f '"module exports must be identifiers" y4000@e) (void)) (values y400e@name (list->vector y400f@export*) y4010@b*))) y400c@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y400a@t))) (y2eb6@syntax-dispatch y400a@t '(_ any each-any . each-any)))) y4002@t))) (y2eb6@syntax-dispatch y4002@t '(_ each-any . each-any)))) y4000@e))) (set! y2ef6@y2ef1 (make-record-type-descriptor 'module-interface '#f 'y2ef4 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! y2ef8@y2ef3 '#f) (set! y2efa@y2ef2 (make-record-constructor-descriptor y2ef6@y2ef1 '#f y2ef8@y2ef3)) (set! y2efd@module-interface? (record-predicate y2ef6@y2ef1)) (set! y2eff@make-module-interface (record-constructor y2efa@y2ef2)) (set! y2f01@module-interface-first-mark (record-accessor y2ef6@y2ef1 '0)) (set! y2f03@module-interface-exp-id-vec (record-accessor y2ef6@y2ef1 '1)) (set! y2f05@module-interface-exp-lab-vec (record-accessor y2ef6@y2ef1 '2)) (set! y2f07@set-module-interface-first-mark! (record-mutator y2ef6@y2ef1 '0)) (set! y2f09@set-module-interface-exp-id-vec! (record-mutator y2ef6@y2ef1 '1)) (set! y2f0b@set-module-interface-exp-lab-vec! (record-mutator y2ef6@y2ef1 '2)) (set! y2f0d@module-interface-exp-id* (lambda (y4014@iface y4015@id) ((lambda (y4019@diff-marks) (begin (set! y4019@diff-marks (lambda (y4020@ls y4021@x) (begin (if (null? y4020@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (y4024@a) (if (eq? y4024@a y4021@x) '() (cons y4024@a (y4019@diff-marks (cdr y4020@ls) y4021@x)))) (car y4020@ls))))) ((lambda (y401a@diff y401b@id-vec) (if (null? y401a@diff) y401b@id-vec (vector-map (lambda (y401e@x) (y2c75@make-stx (y2c77@stx-expr y401e@x) (append y401a@diff (y2c79@stx-mark* y401e@x)) '() '())) y401b@id-vec))) (y4019@diff-marks (y2c79@stx-mark* y4015@id) (y2f01@module-interface-first-mark y4014@iface)) (y2f03@module-interface-exp-id-vec y4014@iface)))) '#f))) (set! y2f0f@chi-internal-module (lambda (y4026@e y4027@r y4028@mr y4029@lex* y402a@rhs* y402b@mod** y402c@kwd*) (call-with-values (lambda () (y2ef0@parse-module y4026@e)) (lambda (y403a@y4035 y403b@y4037 y403c@y4039) ((lambda (y4040@e* y4041@exp-id* y4042@name) ((lambda (y4046@rib) ((lambda (y4048@e*) ((lambda () (call-with-values (lambda () (y2f11@chi-body* y4048@e* y4027@r y4028@mr y4029@lex* y402a@rhs* y402b@mod** y402c@kwd* '() y4046@rib '#f)) (lambda (y405a@y404b y405b@y404d y405c@y404f y405d@y4051 y405e@y4053 y405f@y4055 y4060@y4057 y4061@y4059) ((lambda (y406a@_exp* y406b@kwd* y406c@mod** y406d@rhs* y406e@lex* y406f@mr y4070@r y4071@e*) ((lambda (y407a@exp-lab* y407b@mod**) (if (not y4042@name) (values y406e@lex* y406d@rhs* y4041@exp-id* y407a@exp-lab* y4070@r y406f@mr y407b@mod** y406b@kwd*) ((lambda (y407e@lab y407f@iface) (values y406e@lex* y406d@rhs* (vector y4042@name) (vector y407e@lab) (cons (cons y407e@lab (cons '$module y407f@iface)) y4070@r) (cons (cons y407e@lab (cons '$module y407f@iface)) y406f@mr) y407b@mod** y406b@kwd*)) (y2c2f@gen-label 'module) (y2eff@make-module-interface (car (y2c79@stx-mark* y4042@name)) (vector-map (lambda (y4082@x) (y2c75@make-stx (y2c77@stx-expr y4082@x) (y2c79@stx-mark* y4082@x) '() '())) y4041@exp-id*) y407a@exp-lab*)))) (vector-map (lambda (y4084@x) (or (y2cc5@id->label (y2c75@make-stx (y2cad@id->sym y4084@x) (y2c79@stx-mark* y4084@x) (list y4046@rib) '())) (y2f9f@syntax-violation '#f '"cannot find module export" y4084@x))) y4041@exp-id*) (cons y4071@e* y406c@mod**))) y4061@y4059 y4060@y4057 y405f@y4055 y405e@y4053 y405d@y4051 y405c@y404f y405b@y404d y405a@y404b)))))) (map (lambda (y4086@x) (y2c97@add-subst y4046@rib y4086@x)) (y2ca9@syntax->list y4040@e*)))) (y2c5a@make-empty-rib))) y403c@y4039 y403b@y4037 y403a@y4035))))) (set! y2f11@chi-body* (lambda (y4088@e* y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y408e@kwd* y408f@exp* y4090@rib y4091@top?) (if (null? y4088@e*) (values y4088@e* y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y408e@kwd* y408f@exp*) ((lambda (y409c@e) (call-with-values (lambda () (y2cd3@syntax-type y409c@e y4089@r)) (lambda (y40a4@y409f y40a5@y40a1 y40a6@y40a3) ((lambda (y40aa@kwd y40ab@value y40ac@type) ((lambda (y40b0@kwd*) ((lambda (y40b2@t) (if (memv y40b2@t '(define)) (call-with-values (lambda () (y2e3a@parse-define y409c@e)) (lambda (y40b8@y40b5 y40b9@y40b7) ((lambda (y40bc@rhs y40bd@id) (begin (if (y2cb9@bound-id-member? y40bd@id y40b0@kwd*) (y2f9f@syntax-violation '#f '"cannot redefine keyword" y409c@e) (void)) (call-with-values (lambda () (y2c33@gen-define-label+loc y40bd@id y4090@rib)) (lambda (y40c4@y40c1 y40c5@y40c3) ((lambda (y40c8@lex y40c9@lab) (begin (y2c5c@extend-rib! y4090@rib y40bd@id y40c9@lab) (y2f11@chi-body* (cdr y4088@e*) (y2e48@add-lexical y40c9@lab y40c8@lex y4089@r) y408a@mr (cons y40c8@lex y408b@lex*) (cons y40bc@rhs y408c@rhs*) y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?))) y40c5@y40c3 y40c4@y40c1))))) y40b9@y40b7 y40b8@y40b5))) (if (memv y40b2@t '(define-syntax)) (call-with-values (lambda () (y2e3c@parse-define-syntax y409c@e)) (lambda (y40d0@y40cd y40d1@y40cf) ((lambda (y40d4@rhs y40d5@id) (begin (if (y2cb9@bound-id-member? y40d5@id y40b0@kwd*) (y2f9f@syntax-violation '#f '"cannot redefine keyword" y409c@e) (void)) ((lambda (y40d8@lab y40d9@expanded-rhs) (begin (y2c5c@extend-rib! y4090@rib y40d5@id y40d8@lab) ((lambda (y40dc@b) (y2f11@chi-body* (cdr y4088@e*) (cons (cons y40d8@lab y40dc@b) y4089@r) (cons (cons y40d8@lab y40dc@b) y408a@mr) y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?)) (y2ce9@make-eval-transformer y40d9@expanded-rhs)))) (y2c35@gen-define-label y40d5@id y4090@rib) (y2f13@expand-transformer y40d4@rhs y408a@mr)))) y40d1@y40cf y40d0@y40cd))) (if (memv y40b2@t '(let-syntax letrec-syntax)) ((lambda (y40de@t) ((lambda (y40e0@ls/false) (if (and y40e0@ls/false (apply (lambda (y40e2@xlhs* y40e3@xrhs* y40e4@xbody*) (if (not (y2cb5@valid-bound-ids? y40e2@xlhs*)) (y2f9f@syntax-violation '#f '"invalid identifiers" y409c@e) (void))) y40e0@ls/false)) (apply (lambda (y40e8@xlhs* y40e9@xrhs* y40ea@xbody*) ((lambda (y40ee@xlab*) ((lambda (y40f0@xrib) ((lambda (y40f2@xb*) ((lambda () (y2f11@chi-body* (append (map (lambda (y40f4@x) (y2c97@add-subst y40f0@xrib y40f4@x)) y40ea@xbody*) (cdr y4088@e*)) (append (map cons y40ee@xlab* y40f2@xb*) y4089@r) (append (map cons y40ee@xlab* y40f2@xb*) y408a@mr) y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?)))) (map (lambda (y40f6@x) (y2ce9@make-eval-transformer (y2f13@expand-transformer (if (eq? y40ac@type 'let-syntax) y40f6@x (y2c97@add-subst y40f0@xrib y40f6@x)) y408a@mr))) y40e9@xrhs*))) (y2c66@make-full-rib y40e8@xlhs* y40ee@xlab*))) (map y2c2f@gen-label y40e8@xlhs*))) y40e0@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y40de@t))) (y2eb6@syntax-dispatch y40de@t '(_ #(each (any any)) . each-any)))) y409c@e) (if (memv y40b2@t '(begin)) ((lambda (y40f8@t) ((lambda (y40fa@ls/false) (if y40fa@ls/false (apply (lambda (y40fc@x*) (y2f11@chi-body* (append y40fc@x* (cdr y4088@e*)) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?)) y40fa@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y40f8@t))) (y2eb6@syntax-dispatch y40f8@t '(_ . each-any)))) y409c@e) (if (memv y40b2@t '(global-macro global-macro!)) (y2f11@chi-body* (cons (y2c97@add-subst y4090@rib (y2ed2@chi-global-macro y40ab@value y409c@e)) (cdr y4088@e*)) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?) (if (memv y40b2@t '(local-macro local-macro!)) (y2f11@chi-body* (cons (y2c97@add-subst y4090@rib (y2ed0@chi-local-macro y40ab@value y409c@e)) (cdr y4088@e*)) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?) (if (memv y40b2@t '(macro macro!)) (y2f11@chi-body* (cons (y2c97@add-subst y4090@rib (y2ece@chi-macro y40ab@value y409c@e)) (cdr y4088@e*)) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?) (if (memv y40b2@t '(module)) (call-with-values (lambda () (y2f0f@chi-internal-module y409c@e y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd*)) (lambda (y410e@y40ff y410f@y4101 y4110@y4103 y4111@y4105 y4112@y4107 y4113@y4109 y4114@y410b y4115@y410d) ((lambda (y411e@kwd* y411f@mod** y4120@mr y4121@r y4122@m-exp-lab* y4123@m-exp-id* y4124@rhs* y4125@lex*) (begin (vector-for-each (lambda (y412e@id y412f@lab) (y2c5c@extend-rib! y4090@rib y412e@id y412f@lab)) y4123@m-exp-id* y4122@m-exp-lab*) (y2f11@chi-body* (cdr y4088@e*) y4121@r y4120@mr y4125@lex* y4124@rhs* y411f@mod** y411e@kwd* y408f@exp* y4090@rib y4091@top?))) y4115@y410d y4114@y410b y4113@y4109 y4112@y4107 y4111@y4105 y4110@y4103 y410f@y4101 y410e@y40ff))) (if (memv y40b2@t '(library)) (begin (y2f81@library-expander (y2cc1@stx->datum y409c@e)) (y2f11@chi-body* (cdr y4088@e*) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?)) (if (memv y40b2@t '(export)) ((lambda (y4132@t) ((lambda (y4134@ls/false) (if y4134@ls/false (apply (lambda (y4136@exp-decl*) (y2f11@chi-body* (cdr y4088@e*) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* (append y4136@exp-decl* y408f@exp*) y4090@rib y4091@top?)) y4134@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y4132@t))) (y2eb6@syntax-dispatch y4132@t '(_ . each-any)))) y409c@e) (if (memv y40b2@t '(import)) ((lambda () ((lambda (y4139@module-import? y413b@module-import y413d@library-import) (begin (set! y4139@module-import? (lambda (y418c@e) ((lambda (y418e@t) ((lambda (y4190@ls/false) (if (and y4190@ls/false (apply (lambda (y4192@id) (y2cab@id? y4192@id)) y4190@ls/false)) (apply (lambda (y4194@id) '#t) y4190@ls/false) ((lambda (y4196@t) ((lambda (y4198@ls/false) (if y4198@ls/false (apply (lambda (y419a@imp*) '#f) y4198@ls/false) ((lambda (y419c@t) ((lambda (y419e@ls/false) (if y419e@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"malformed import form" y418c@e)) y419e@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y419c@t))) (y2eb6@syntax-dispatch y419c@t '_))) y4196@t))) (y2eb6@syntax-dispatch y4196@t '(_ . each-any)))) y418e@t))) (y2eb6@syntax-dispatch y418e@t '(_ any)))) y418c@e))) (set! y413b@module-import (lambda (y416a@e y416b@r) ((lambda (y416e@t) ((lambda (y4170@ls/false) (if (and y4170@ls/false (apply (lambda (y4172@id) (y2cab@id? y4172@id)) y4170@ls/false)) (apply (lambda (y4174@id) (call-with-values (lambda () (y2cd3@syntax-type y4174@id y416b@r)) (lambda (y417c@y4177 y417d@y4179 y417e@y417b) ((lambda (y4182@kwd y4183@value y4184@type) ((lambda (y4188@t) (if (memv y4188@t '($module)) ((lambda (y418a@iface) (values (y2f0d@module-interface-exp-id* y418a@iface y4174@id) (y2f05@module-interface-exp-lab-vec y418a@iface))) y4183@value) (y2f9f@syntax-violation '#f '"invalid import" y416a@e))) y4184@type)) y417e@y417b y417d@y4179 y417c@y4177)))) y4170@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y416e@t))) (y2eb6@syntax-dispatch y416e@t '(_ any)))) y416a@e))) (set! y413d@library-import (lambda (y414e@e) ((lambda (y4150@t) ((lambda (y4152@ls/false) (if y4152@ls/false (apply (lambda (y4154@ctxt y4155@imp*) (call-with-values (lambda () (y2f1b@parse-import-spec* (y2fa5@syntax->datum y4155@imp*))) (lambda (y415c@y4159 y415d@y415b) ((lambda (y4160@subst-labels y4161@subst-names) (values (vector-map (lambda (y4164@name) (y2c89@datum->stx y4154@ctxt y4164@name)) y4161@subst-names) y4160@subst-labels)) y415d@y415b y415c@y4159)))) y4152@ls/false) ((lambda (y4166@t) ((lambda (y4168@ls/false) (if y4168@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid import form" y414e@e)) y4168@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y4166@t))) (y2eb6@syntax-dispatch y4166@t '_))) y4150@t))) (y2eb6@syntax-dispatch y4150@t '(any . each-any)))) y414e@e))) (begin (call-with-values (lambda () (if (y4139@module-import? y409c@e) (y413b@module-import y409c@e y4089@r) (y413d@library-import y409c@e))) (lambda (y4142@y413f y4143@y4141) ((lambda (y4146@lab* y4147@id*) (vector-for-each (lambda (y414a@id y414b@lab) (y2c5c@extend-rib! y4090@rib y414a@id y414b@lab)) y4147@id* y4146@lab*)) y4143@y4141 y4142@y413f))) (y2f11@chi-body* (cdr y4088@e*) y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?)))) '#f '#f '#f))) (if y4091@top? (y2f11@chi-body* (cdr y4088@e*) y4089@r y408a@mr (cons (y2c2b@gen-lexical 'dummy) y408b@lex*) (cons (cons 'top-expr y409c@e) y408c@rhs*) y408d@mod** y40b0@kwd* y408f@exp* y4090@rib y4091@top?) (values y4088@e* y4089@r y408a@mr y408b@lex* y408c@rhs* y408d@mod** y40b0@kwd* y408f@exp*)))))))))))))) y40ac@type)) (if (y2cab@id? y40aa@kwd) (cons y40aa@kwd y408e@kwd*) y408e@kwd*))) y40a6@y40a3 y40a5@y40a1 y40a4@y409f)))) (car y4088@e*))))) (set! y2f13@expand-transformer (lambda (y41a0@expr y41a1@r) ((lambda (y41a4@rtc) ((lambda (y41a6@expanded-rhs) (begin (for-each ((lambda (y41a8@mark-visit) (lambda (y41aa@x) (begin (y2acf@y2970@invoke-library y41aa@x) (y41a8@mark-visit y41aa@x)))) (y2f23@vis-collector)) (y41a4@rtc)) y41a6@expanded-rhs)) ((lambda (y41b4@y41ad y41b5@y41af y41b6@y41b1 y41b7@y41b3) ((lambda (y41bc@swap) (dynamic-wind y41bc@swap (lambda () (y2ed8@chi-expr y41a0@expr y41a1@r y41a1@r)) y41bc@swap)) (lambda () (begin ((lambda (y41be@t) (begin (y41b4@y41ad y41b6@y41b1) (set! y41b6@y41b1 y41be@t))) (y41b4@y41ad)) ((lambda (y41c0@t) (begin (y41b5@y41af y41b7@y41b3) (set! y41b7@y41b3 y41c0@t))) (y41b5@y41af)))))) y2f21@inv-collector y2f23@vis-collector y41a4@rtc (lambda (y41c2@x) (values))))) (y2f1f@make-collector)))) (set! y2f15@parse-exports (lambda (y41c4@exp*) ((letrec ((y41c6@f (lambda (y41c8@exp* y41c9@int* y41ca@ext*) (if (null? y41c8@exp*) (begin (if (not (y2cb5@valid-bound-ids? y41ca@ext*)) (y2f9f@syntax-violation 'export '"invalid exports" (y2eec@find-dups y41ca@ext*)) (void)) (values (map y2fa5@syntax->datum y41ca@ext*) y41c9@int*)) ((lambda (y41ce@t) ((lambda (y41d0@ls/false) (if y41d0@ls/false (apply (lambda (y41d2@rename y41d3@i* y41d4@e*) (begin (if (not (and (eq? (y2fa5@syntax->datum y41d2@rename) 'rename) (for-all y2cab@id? y41d3@i*) (for-all y2cab@id? y41d4@e*))) (y2f9f@syntax-violation 'export '"invalid export specifier" (car y41c8@exp*)) (void)) (y41c6@f (cdr y41c8@exp*) (append y41d3@i* y41c9@int*) (append y41d4@e* y41ca@ext*)))) y41d0@ls/false) ((lambda (y41d8@t) ((lambda (y41da@ls/false) (if y41da@ls/false (apply (lambda (y41dc@ie) (begin (if (not (y2cab@id? y41dc@ie)) (y2f9f@syntax-violation 'export '"invalid export" y41dc@ie) (void)) (y41c6@f (cdr y41c8@exp*) (cons y41dc@ie y41c9@int*) (cons y41dc@ie y41ca@ext*)))) y41da@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y41d8@t))) (y2eb6@syntax-dispatch y41d8@t 'any))) y41ce@t))) (y2eb6@syntax-dispatch y41ce@t '(any . #(each (any any)))))) (car y41c8@exp*)))))) y41c6@f) y41c4@exp* '() '()))) (set! y2f17@parse-library-name (lambda (y41de@spec) ((lambda (y41e1@parse) (begin (set! y41e1@parse (lambda (y41ee@x) ((lambda (y41f0@t) ((lambda (y41f2@ls/false) (if (and y41f2@ls/false (apply (lambda (y41f4@v*) (for-all (lambda (y41f6@x) ((lambda (y41f8@x) (and (integer? y41f8@x) (exact? y41f8@x))) (y2fa5@syntax->datum y41f6@x))) y41f4@v*)) y41f2@ls/false)) (apply (lambda (y41fa@v*) (values '() (map y2fa5@syntax->datum y41fa@v*))) y41f2@ls/false) ((lambda (y41fc@t) ((lambda (y41fe@ls/false) (if (and y41fe@ls/false (apply (lambda (y4200@x y4201@rest) (symbol? (y2fa5@syntax->datum y4200@x))) y41fe@ls/false)) (apply (lambda (y4204@x y4205@rest) (call-with-values (lambda () (y41e1@parse y4205@rest)) (lambda (y420c@y4209 y420d@y420b) ((lambda (y4210@v* y4211@x*) (values (cons (y2fa5@syntax->datum y4204@x) y4211@x*) y4210@v*)) y420d@y420b y420c@y4209)))) y41fe@ls/false) ((lambda (y4214@t) ((lambda (y4216@ls/false) (if y4216@ls/false (apply (lambda () (values '() '())) y4216@ls/false) ((lambda (y4218@t) ((lambda (y421a@ls/false) (if y421a@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid library name" y41de@spec)) y421a@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y4218@t))) (y2eb6@syntax-dispatch y4218@t '_))) y4214@t))) (y2eb6@syntax-dispatch y4214@t '()))) y41fc@t))) (y2eb6@syntax-dispatch y41fc@t '(any . any)))) y41f0@t))) (y2eb6@syntax-dispatch y41f0@t '(each-any)))) y41ee@x))) (call-with-values (lambda () (y41e1@parse y41de@spec)) (lambda (y41e6@y41e3 y41e7@y41e5) ((lambda (y41ea@ver* y41eb@name*) (begin (if (null? y41eb@name*) (y2f9f@syntax-violation '#f '"empty library name" y41de@spec) (void)) (values y41eb@name* y41ea@ver*))) y41e7@y41e5 y41e6@y41e3))))) '#f))) (set! y2f19@parse-library (lambda (y421c@e) ((lambda (y421e@t) ((lambda (y4220@ls/false) (if (and y4220@ls/false (apply (lambda (y4222@library y4223@name* y4224@export y4225@exp* y4226@import y4227@imp* y4228@b*) (and (eq? (y2fa5@syntax->datum y4224@export) 'export) (eq? (y2fa5@syntax->datum y4226@import) 'import) (eq? (y2fa5@syntax->datum y4222@library) 'library))) y4220@ls/false)) (apply (lambda (y4230@library y4231@name* y4232@export y4233@exp* y4234@import y4235@imp* y4236@b*) (values y4231@name* y4233@exp* y4235@imp* y4236@b*)) y4220@ls/false) ((lambda (y423e@t) ((lambda (y4240@ls/false) (if y4240@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"malformed library" y421c@e)) y4240@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y423e@t))) (y2eb6@syntax-dispatch y423e@t '_))) y421e@t))) (y2eb6@syntax-dispatch y421e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) y421c@e))) (set! y2f1b@parse-import-spec* ((lambda () ((lambda (y4243@idsyn? y4245@dup-error y4247@merge-substs y4249@exclude* y424b@find* y424d@rem* y424f@remove-dups y4251@parse-library-name y4253@import-library y4255@get-import y4257@add-imports!) (begin (set! y4243@idsyn? (lambda (y444c@x) (symbol? (y2fa5@syntax->datum y444c@x)))) (set! y4245@dup-error (lambda (y444a@name) (y2f9f@syntax-violation 'import '"two imports with different bindings" y444a@name))) (set! y4247@merge-substs (lambda (y4438@s y4439@subst) ((lambda (y443d@insert-to-subst) (begin (set! y443d@insert-to-subst (lambda (y443e@a y443f@subst) ((lambda (y4442@name y4443@label) ((lambda (y4446@t) (if y4446@t ((lambda (y4448@x) (if (eq? (cdr y4448@x) y4443@label) y443f@subst (y4245@dup-error y4442@name))) y4446@t) (cons y443e@a y443f@subst))) (assq y4442@name y443f@subst))) (car y443e@a) (cdr y443e@a)))) (if (null? y4438@s) y4439@subst (y443d@insert-to-subst (car y4438@s) (y4247@merge-substs (cdr y4438@s) y4439@subst))))) '#f))) (set! y4249@exclude* (lambda (y4408@sym* y4409@subst) ((lambda (y440d@exclude) (begin (set! y440d@exclude (lambda (y4426@sym y4427@subst) (if (null? y4427@subst) (y2f9f@syntax-violation 'import '"cannot rename unbound identifier" y4426@sym) (if (eq? y4426@sym (caar y4427@subst)) (values (cdar y4427@subst) (cdr y4427@subst)) ((lambda (y442a@a) (call-with-values (lambda () (y440d@exclude y4426@sym (cdr y4427@subst))) (lambda (y4430@y442d y4431@y442f) ((lambda (y4434@subst y4435@old) (values y4435@old (cons y442a@a y4434@subst))) y4431@y442f y4430@y442d)))) (car y4427@subst)))))) (if (null? y4408@sym*) (values '() y4409@subst) (call-with-values (lambda () (y440d@exclude (car y4408@sym*) y4409@subst)) (lambda (y4412@y440f y4413@y4411) ((lambda (y4416@subst y4417@old) (call-with-values (lambda () (y4249@exclude* (cdr y4408@sym*) y4416@subst)) (lambda (y441e@y441b y441f@y441d) ((lambda (y4422@subst y4423@old*) (values (cons y4417@old y4423@old*) y4422@subst)) y441f@y441d y441e@y441b)))) y4413@y4411 y4412@y440f)))))) '#f))) (set! y424b@find* (lambda (y4400@sym* y4401@subst) (map (lambda (y4404@x) ((lambda (y4406@t) (if y4406@t (cdr y4406@t) (y2f9f@syntax-violation 'import '"cannot find identifier" y4404@x))) (assq y4404@x y4401@subst))) y4400@sym*))) (set! y424d@rem* (lambda (y43f8@sym* y43f9@subst) ((letrec ((y43fc@f (lambda (y43fe@subst) (if (null? y43fe@subst) '() (if (memq (caar y43fe@subst) y43f8@sym*) (y43fc@f (cdr y43fe@subst)) (cons (car y43fe@subst) (y43fc@f (cdr y43fe@subst)))))))) y43fc@f) y43f9@subst))) (set! y424f@remove-dups (lambda (y43f6@ls) (if (null? y43f6@ls) '() (if (memq (car y43f6@ls) (cdr y43f6@ls)) (y424f@remove-dups (cdr y43f6@ls)) (cons (car y43f6@ls) (y424f@remove-dups (cdr y43f6@ls))))))) (set! y4251@parse-library-name (lambda (y430e@spec) ((lambda (y4311@subversion? y4313@subversion-pred y4315@version-pred) (begin (set! y4311@subversion? (lambda (y43f2@x) ((lambda (y43f4@x) (and (integer? y43f4@x) (exact? y43f4@x) (>= y43f4@x '0))) (y2fa5@syntax->datum y43f2@x)))) (set! y4313@subversion-pred (lambda (y4392@x*) ((lambda (y4394@t) ((lambda (y4396@ls/false) (if (and y4396@ls/false (apply (lambda (y4398@n) (y4311@subversion? y4398@n)) y4396@ls/false)) (apply (lambda (y439a@n) (lambda (y439c@x) (= y439c@x (y2fa5@syntax->datum y439a@n)))) y4396@ls/false) ((lambda (y439e@t) ((lambda (y43a0@ls/false) (if (and y43a0@ls/false (apply (lambda (y43a2@p? y43a3@sub*) (eq? (y2fa5@syntax->datum y43a2@p?) 'and)) y43a0@ls/false)) (apply (lambda (y43a6@p? y43a7@sub*) ((lambda (y43aa@p*) (lambda (y43ac@x) (for-all (lambda (y43ae@p) (y43ae@p y43ac@x)) y43aa@p*))) (map y4313@subversion-pred y43a7@sub*))) y43a0@ls/false) ((lambda (y43b0@t) ((lambda (y43b2@ls/false) (if (and y43b2@ls/false (apply (lambda (y43b4@p? y43b5@sub*) (eq? (y2fa5@syntax->datum y43b4@p?) 'or)) y43b2@ls/false)) (apply (lambda (y43b8@p? y43b9@sub*) ((lambda (y43bc@p*) (lambda (y43be@x) (exists (lambda (y43c0@p) (y43c0@p y43be@x)) y43bc@p*))) (map y4313@subversion-pred y43b9@sub*))) y43b2@ls/false) ((lambda (y43c2@t) ((lambda (y43c4@ls/false) (if (and y43c4@ls/false (apply (lambda (y43c6@p? y43c7@sub) (eq? (y2fa5@syntax->datum y43c6@p?) 'not)) y43c4@ls/false)) (apply (lambda (y43ca@p? y43cb@sub) ((lambda (y43ce@p) (lambda (y43d0@x) (not (y43ce@p y43d0@x)))) (y4313@subversion-pred y43cb@sub))) y43c4@ls/false) ((lambda (y43d2@t) ((lambda (y43d4@ls/false) (if (and y43d4@ls/false (apply (lambda (y43d6@p? y43d7@n) (and (eq? (y2fa5@syntax->datum y43d6@p?) '<=) (y4311@subversion? y43d7@n))) y43d4@ls/false)) (apply (lambda (y43da@p? y43db@n) (lambda (y43de@x) (<= y43de@x (y2fa5@syntax->datum y43db@n)))) y43d4@ls/false) ((lambda (y43e0@t) ((lambda (y43e2@ls/false) (if (and y43e2@ls/false (apply (lambda (y43e4@p? y43e5@n) (and (eq? (y2fa5@syntax->datum y43e4@p?) '>=) (y4311@subversion? y43e5@n))) y43e2@ls/false)) (apply (lambda (y43e8@p? y43e9@n) (lambda (y43ec@x) (>= y43ec@x (y2fa5@syntax->datum y43e9@n)))) y43e2@ls/false) ((lambda (y43ee@t) ((lambda (y43f0@ls/false) (if y43f0@ls/false (apply (lambda () (y2f9f@syntax-violation 'import '"invalid sub-version spec" y430e@spec y4392@x*)) y43f0@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y43ee@t))) (y2eb6@syntax-dispatch y43ee@t '_))) y43e0@t))) (y2eb6@syntax-dispatch y43e0@t '(any any)))) y43d2@t))) (y2eb6@syntax-dispatch y43d2@t '(any any)))) y43c2@t))) (y2eb6@syntax-dispatch y43c2@t '(any any)))) y43b0@t))) (y2eb6@syntax-dispatch y43b0@t '(any . each-any)))) y439e@t))) (y2eb6@syntax-dispatch y439e@t '(any . each-any)))) y4394@t))) (y2eb6@syntax-dispatch y4394@t 'any))) y4392@x*))) (set! y4315@version-pred (lambda (y4342@x*) ((lambda (y4344@t) ((lambda (y4346@ls/false) (if y4346@ls/false (apply (lambda () (lambda (y4348@x) '#t)) y4346@ls/false) ((lambda (y434a@t) ((lambda (y434c@ls/false) (if (and y434c@ls/false (apply (lambda (y434e@c y434f@ver*) (eq? (y2fa5@syntax->datum y434e@c) 'and)) y434c@ls/false)) (apply (lambda (y4352@c y4353@ver*) ((lambda (y4356@p*) (lambda (y4358@x) (for-all (lambda (y435a@p) (y435a@p y4358@x)) y4356@p*))) (map y4315@version-pred y4353@ver*))) y434c@ls/false) ((lambda (y435c@t) ((lambda (y435e@ls/false) (if (and y435e@ls/false (apply (lambda (y4360@c y4361@ver*) (eq? (y2fa5@syntax->datum y4360@c) 'or)) y435e@ls/false)) (apply (lambda (y4364@c y4365@ver*) ((lambda (y4368@p*) (lambda (y436a@x) (exists (lambda (y436c@p) (y436c@p y436a@x)) y4368@p*))) (map y4315@version-pred y4365@ver*))) y435e@ls/false) ((lambda (y436e@t) ((lambda (y4370@ls/false) (if (and y4370@ls/false (apply (lambda (y4372@c y4373@ver) (eq? (y2fa5@syntax->datum y4372@c) 'not)) y4370@ls/false)) (apply (lambda (y4376@c y4377@ver) ((lambda (y437a@p) (lambda (y437c@x) (not (y437a@p y437c@x)))) (y4315@version-pred y4377@ver))) y4370@ls/false) ((lambda (y437e@t) ((lambda (y4380@ls/false) (if y4380@ls/false (apply (lambda (y4382@sub*) ((lambda (y4384@p*) (lambda (y4386@x) ((letrec ((y4388@f (lambda (y438a@p* y438b@x) (if (null? y438a@p*) '#t (if (null? y438b@x) '#f (and ((car y438a@p*) (car y438b@x)) (y4388@f (cdr y438a@p*) (cdr y438b@x)))))))) y4388@f) y4384@p* y4386@x))) (map y4313@subversion-pred y4382@sub*))) y4380@ls/false) ((lambda (y438e@t) ((lambda (y4390@ls/false) (if y4390@ls/false (apply (lambda () (y2f9f@syntax-violation 'import '"invalid version spec" y430e@spec y4342@x*)) y4390@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y438e@t))) (y2eb6@syntax-dispatch y438e@t '_))) y437e@t))) (y2eb6@syntax-dispatch y437e@t 'each-any))) y436e@t))) (y2eb6@syntax-dispatch y436e@t '(any any)))) y435c@t))) (y2eb6@syntax-dispatch y435c@t '(any . each-any)))) y434a@t))) (y2eb6@syntax-dispatch y434a@t '(any . each-any)))) y4344@t))) (y2eb6@syntax-dispatch y4344@t '()))) y4342@x*))) ((letrec ((y4316@f (lambda (y4318@x) ((lambda (y431a@t) ((lambda (y431c@ls/false) (if y431c@ls/false (apply (lambda (y431e@version-spec*) (values '() (y4315@version-pred y431e@version-spec*))) y431c@ls/false) ((lambda (y4320@t) ((lambda (y4322@ls/false) (if (and y4322@ls/false (apply (lambda (y4324@x y4325@x*) (y4243@idsyn? y4324@x)) y4322@ls/false)) (apply (lambda (y4328@x y4329@x*) (call-with-values (lambda () (y4316@f y4329@x*)) (lambda (y4330@y432d y4331@y432f) ((lambda (y4334@pred y4335@name) (values (cons (y2fa5@syntax->datum y4328@x) y4335@name) y4334@pred)) y4331@y432f y4330@y432d)))) y4322@ls/false) ((lambda (y4338@t) ((lambda (y433a@ls/false) (if y433a@ls/false (apply (lambda () (values '() (lambda (y433c@x) '#t))) y433a@ls/false) ((lambda (y433e@t) ((lambda (y4340@ls/false) (if y4340@ls/false (apply (lambda () (y2f9f@syntax-violation '#f '"invalid import spec" y430e@spec)) y4340@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y433e@t))) (y2eb6@syntax-dispatch y433e@t '_))) y4338@t))) (y2eb6@syntax-dispatch y4338@t '()))) y4320@t))) (y2eb6@syntax-dispatch y4320@t '(any . any)))) y431a@t))) (y2eb6@syntax-dispatch y431a@t '(each-any)))) y4318@x)))) y4316@f) y430e@spec))) '#f '#f '#f))) (set! y4253@import-library (lambda (y42fe@spec*) (call-with-values (lambda () (y4251@parse-library-name y42fe@spec*)) (lambda (y4304@y4301 y4305@y4303) ((lambda (y4308@pred y4309@name) (begin (if (null? y4309@name) (y2f9f@syntax-violation 'import '"empty library name" y42fe@spec*) (void)) ((lambda (y430c@lib) (begin (if (not y430c@lib) (y2f9f@syntax-violation 'import '"cannot find library with required name" y4309@name) (void)) (if (not (y4308@pred (y2aa0@y2912@library-version y430c@lib))) (y2f9f@syntax-violation 'import '"library does not satisfy version specification" y42fe@spec* y430c@lib) (void)) ((y2f25@imp-collector) y430c@lib) (y2aa4@y291a@library-subst y430c@lib))) (y2ac8@y2962@find-library-by-name y4309@name)))) y4305@y4303 y4304@y4301))))) (set! y4255@get-import (lambda (y4270@spec) ((lambda (y4272@t) ((lambda (y4274@ls/false) (if (and y4274@ls/false (apply (lambda (y4276@x y4277@x*) (not (memq (y2fa5@syntax->datum y4276@x) '(for rename except only prefix library)))) y4274@ls/false)) (apply (lambda (y427a@x y427b@x*) (y4253@import-library (cons y427a@x y427b@x*))) y4274@ls/false) ((lambda (y427e@t) ((lambda (y4280@ls/false) (if (and y4280@ls/false (apply (lambda (y4282@rename y4283@isp y4284@old* y4285@new*) (and (eq? (y2fa5@syntax->datum y4282@rename) 'rename) (for-all y4243@idsyn? y4284@old*) (for-all y4243@idsyn? y4285@new*))) y4280@ls/false)) (apply (lambda (y428a@rename y428b@isp y428c@old* y428d@new*) ((lambda (y4292@subst y4293@old* y4294@new*) ((lambda (y4298@old-label*) ((lambda (y429a@subst) (y4247@merge-substs (map cons y4294@new* y4298@old-label*) y429a@subst)) (y424d@rem* y4293@old* y4292@subst))) (y424b@find* y4293@old* y4292@subst))) (y4255@get-import y428b@isp) (map y2fa5@syntax->datum y428c@old*) (map y2fa5@syntax->datum y428d@new*))) y4280@ls/false) ((lambda (y429c@t) ((lambda (y429e@ls/false) (if (and y429e@ls/false (apply (lambda (y42a0@except y42a1@isp y42a2@sym*) (and (eq? (y2fa5@syntax->datum y42a0@except) 'except) (for-all y4243@idsyn? y42a2@sym*))) y429e@ls/false)) (apply (lambda (y42a6@except y42a7@isp y42a8@sym*) ((lambda (y42ac@subst) (y424d@rem* (map y2fa5@syntax->datum y42a8@sym*) y42ac@subst)) (y4255@get-import y42a7@isp))) y429e@ls/false) ((lambda (y42ae@t) ((lambda (y42b0@ls/false) (if (and y42b0@ls/false (apply (lambda (y42b2@only y42b3@isp y42b4@sym*) (and (eq? (y2fa5@syntax->datum y42b2@only) 'only) (for-all y4243@idsyn? y42b4@sym*))) y42b0@ls/false)) (apply (lambda (y42b8@only y42b9@isp y42ba@sym*) ((lambda (y42be@subst y42bf@sym*) ((lambda (y42c2@sym*) ((lambda (y42c4@lab*) (map cons y42c2@sym* y42c4@lab*)) (y424b@find* y42c2@sym* y42be@subst))) (y424f@remove-dups y42bf@sym*))) (y4255@get-import y42b9@isp) (map y2fa5@syntax->datum y42ba@sym*))) y42b0@ls/false) ((lambda (y42c6@t) ((lambda (y42c8@ls/false) (if (and y42c8@ls/false (apply (lambda (y42ca@prefix y42cb@isp y42cc@p) (and (eq? (y2fa5@syntax->datum y42ca@prefix) 'prefix) (y4243@idsyn? y42cc@p))) y42c8@ls/false)) (apply (lambda (y42d0@prefix y42d1@isp y42d2@p) ((lambda (y42d6@subst y42d7@prefix) (map (lambda (y42da@x) (cons (string->symbol (string-append y42d7@prefix (symbol->string (car y42da@x)))) (cdr y42da@x))) y42d6@subst)) (y4255@get-import y42d1@isp) (symbol->string (y2fa5@syntax->datum y42d2@p)))) y42c8@ls/false) ((lambda (y42dc@t) ((lambda (y42de@ls/false) (if (and y42de@ls/false (apply (lambda (y42e0@library y42e1@spec*) (eq? (y2fa5@syntax->datum y42e0@library) 'library)) y42de@ls/false)) (apply (lambda (y42e4@library y42e5@spec*) (y4253@import-library y42e5@spec*)) y42de@ls/false) ((lambda (y42e8@t) ((lambda (y42ea@ls/false) (if (and y42ea@ls/false (apply (lambda (y42ec@for y42ed@isp y42ee@rest) (eq? (y2fa5@syntax->datum y42ec@for) 'for)) y42ea@ls/false)) (apply (lambda (y42f2@for y42f3@isp y42f4@rest) (y4255@get-import y42f3@isp)) y42ea@ls/false) ((lambda (y42f8@t) ((lambda (y42fa@ls/false) (if y42fa@ls/false (apply (lambda (y42fc@spec) (y2f9f@syntax-violation 'import '"invalid import spec" y42fc@spec)) y42fa@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y42f8@t))) (y2eb6@syntax-dispatch y42f8@t 'any))) y42e8@t))) (y2eb6@syntax-dispatch y42e8@t '(any any . any)))) y42dc@t))) (y2eb6@syntax-dispatch y42dc@t '(any each-any)))) y42c6@t))) (y2eb6@syntax-dispatch y42c6@t '(any any any)))) y42ae@t))) (y2eb6@syntax-dispatch y42ae@t '(any any . each-any)))) y429c@t))) (y2eb6@syntax-dispatch y429c@t '(any any . each-any)))) y427e@t))) (y2eb6@syntax-dispatch y427e@t '(any any . #(each (any any)))))) y4272@t))) (y2eb6@syntax-dispatch y4272@t '(any . each-any)))) y4270@spec))) (set! y4257@add-imports! (lambda (y4260@imp y4261@h) ((lambda (y4264@subst) (for-each (lambda (y4266@x) ((lambda (y4268@name y4269@label) ((lambda (y426c@t) (if y426c@t ((lambda (y426e@l) (if (not (eq? y426e@l y4269@label)) (y4245@dup-error y4268@name) (void))) y426c@t) (hashtable-set! y4261@h y4268@name y4269@label))) (hashtable-ref y4261@h y4268@name '#f))) (car y4266@x) (cdr y4266@x))) y4264@subst)) (y4255@get-import y4260@imp)))) (lambda (y4258@imp*) ((letrec ((y425a@f (lambda (y425c@imp* y425d@h) (if (null? y425c@imp*) (hashtable-entries y425d@h) (begin (y4257@add-imports! (car y425c@imp*) y425d@h) (y425a@f (cdr y425c@imp*) y425d@h)))))) y425a@f) y4258@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! y2f1d@make-top-rib (lambda (y444e@names y444f@labels) ((lambda (y4452@rib) (begin (vector-for-each (lambda (y4454@name y4455@label) (begin (if (not (symbol? y4454@name)) (error 'make-top-rib '"BUG: not a symbol" y4454@name) (void)) (y2c5e@extend-rib/nc! y4452@rib (y2c75@make-stx y4454@name y2c27@top-mark* '() '()) y4455@label))) y444e@names y444f@labels) y4452@rib)) (y2c5a@make-empty-rib)))) (set! y2f1f@make-collector (lambda () ((lambda (y4458@ls) (lambda y445c ((lambda (y445d) (if (= y445d '0) (apply (lambda () y4458@ls) y445c) (if (= y445d '1) (apply (lambda (y445a@x) (set! y4458@ls (y2c20@set-cons y445a@x y4458@ls))) y445c) (error 'apply '"invalid arg count")))) (length y445c)))) '()))) (set! y2f21@inv-collector (y2855@y277f@make-parameter (lambda y445e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (y4460@x) (begin (if (not (procedure? y4460@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" y4460@x) (void)) y4460@x)))) (set! y2f23@vis-collector (y2855@y277f@make-parameter (lambda y4462@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (y4464@x) (begin (if (not (procedure? y4464@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" y4464@x) (void)) y4464@x)))) (set! y2f25@imp-collector (y2855@y277f@make-parameter (lambda y4466@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (y4468@x) (begin (if (not (procedure? y4468@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" y4468@x) (void)) y4468@x)))) (set! y2f27@chi-library-internal (lambda (y446a@e* y446b@rib y446c@top?) (call-with-values (lambda () (y2f11@chi-body* y446a@e* '() '() '() '() '() '() '() y446b@rib y446c@top?)) (lambda (y4480@y4471 y4481@y4473 y4482@y4475 y4483@y4477 y4484@y4479 y4485@y447b y4486@y447d y4487@y447f) ((lambda (y4490@exp* y4491@_kwd* y4492@mod** y4493@rhs* y4494@lex* y4495@mr y4496@r y4497@e*) (values (append (apply append (reverse y4492@mod**)) y4497@e*) y4496@r y4495@mr (reverse y4494@lex*) (reverse y4493@rhs*) y4490@exp*)) y4487@y447f y4486@y447d y4485@y447b y4484@y4479 y4483@y4477 y4482@y4475 y4481@y4473 y4480@y4471))))) (set! y2f29@chi-interaction-expr (lambda (y44a0@e y44a1@rib y44a2@r) (call-with-values (lambda () (y2f11@chi-body* (list y44a0@e) y44a2@r y44a2@r '() '() '() '() '() y44a1@rib '#t)) (lambda (y44b6@y44a7 y44b7@y44a9 y44b8@y44ab y44b9@y44ad y44ba@y44af y44bb@y44b1 y44bc@y44b3 y44bd@y44b5) ((lambda (y44c6@_exp* y44c7@_kwd* y44c8@mod** y44c9@rhs* y44ca@lex* y44cb@mr y44cc@r y44cd@e*) ((lambda (y44d6@e*) ((lambda (y44d8@e) (values y44d8@e y44cc@r)) (if (null? y44d6@e*) (y2c0b@y2b7b@build-void) (if (null? (cdr y44d6@e*)) (car y44d6@e*) (y2c0a@y2b79@build-sequence '#f y44d6@e*))))) (y2ee6@expand-interaction-rhs*/init* (reverse y44ca@lex*) (reverse y44c9@rhs*) (append (apply append (reverse y44c8@mod**)) y44cd@e*) y44cc@r y44cb@mr))) y44bd@y44b5 y44bc@y44b3 y44bb@y44b1 y44ba@y44af y44b9@y44ad y44b8@y44ab y44b7@y44a9 y44b6@y44a7))))) (set! y2f2b@library-body-expander (lambda (y44da@name y44db@main-exp* y44dc@imp* y44dd@b* y44de@top?) ((lambda (y44e5@itc) (begin (set! y44e5@itc (y2f1f@make-collector)) ((lambda (y44ee@y44e7 y44ef@y44e9 y44f0@y44eb y44f1@y44ed) ((lambda (y44f6@swap) (dynamic-wind y44f6@swap (lambda () (call-with-values (lambda () (y2f1b@parse-import-spec* y44dc@imp*)) (lambda (y44fc@y44f9 y44fd@y44fb) ((lambda (y4500@subst-labels y4501@subst-names) ((lambda (y4504@rib) ((lambda (y4507@wrap) (begin (set! y4507@wrap (lambda (y4582@x) (y2c75@make-stx y4582@x y2c27@top-mark* (list y4504@rib) '()))) ((lambda (y4508@b* y4509@main-exp* y450a@rtc y450b@vtc) ((lambda (y4518@y4511 y4519@y4513 y451a@y4515 y451b@y4517) ((lambda (y4520@swap) (dynamic-wind y4520@swap (lambda () (call-with-values (lambda () (y2f27@chi-library-internal y4508@b* y4504@rib y44de@top?)) (lambda (y452e@y4523 y452f@y4525 y4530@y4527 y4531@y4529 y4532@y452b y4533@y452d) ((lambda (y453a@internal-exp* y453b@rhs* y453c@lex* y453d@mr y453e@r y453f@init*) (call-with-values (lambda () (y2f15@parse-exports (append y4509@main-exp* y453a@internal-exp*))) (lambda (y454a@y4547 y454b@y4549) ((lambda (y454e@exp-id* y454f@exp-name*) (begin (y2c62@seal-rib! y4504@rib) ((lambda (y4552@init*) ((lambda (y4554@rhs*) ((lambda () (begin (y2c64@unseal-rib! y4504@rib) ((lambda (y4556@loc* y4557@export-subst) ((lambda (y455b@errstr) (begin (set! y455b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (y2f8b@make-export-env/macros y453c@lex* y4556@loc* y453e@r)) (lambda (y4562@y455d y4563@y455f y4564@y4561) ((lambda (y4568@macro* y4569@global* y456a@export-env) (begin (for-each (lambda (y456e@s) ((lambda (y4570@name y4571@label) ((lambda (y4574@p) (if y4574@p ((lambda (y4576@b) ((lambda (y4578@type) (if (eq? y4578@type 'mutable) (y2f9f@syntax-violation 'export y455b@errstr y4570@name) (void))) (car y4576@b))) (cdr y4574@p)) (void))) (assq y4571@label y456a@export-env))) (car y456e@s) (cdr y456e@s))) y4557@export-subst) ((lambda (y457a@invoke-body y457b@invoke-definitions) (values (y44e5@itc) (y450a@rtc) (y450b@vtc) (y2c0a@y2b79@build-sequence '#f (append y457b@invoke-definitions (list y457a@invoke-body))) y4568@macro* y4557@export-subst y456a@export-env)) (y2c0d@y2b7f@build-letrec* '#f y453c@lex* y4554@rhs* (y2f87@build-exports y4569@global* y4552@init*)) (map y2c06@y2ad6@build-global-define (map cdr y4569@global*))))) y4564@y4561 y4563@y455f y4562@y455d))))) '#f)) (map y2c2d@gen-global y453c@lex*) (y2f89@make-export-subst y454f@exp-name* y454e@exp-id*)))))) (y2ee8@chi-rhs* y453b@rhs* y453e@r y453d@mr))) (y2ed4@chi-expr* y453f@init* y453e@r y453d@mr)))) y454b@y4549 y454a@y4547)))) y4533@y452d y4532@y452b y4531@y4529 y4530@y4527 y452f@y4525 y452e@y4523)))) y4520@swap)) (lambda () (begin ((lambda (y457e@t) (begin (y4518@y4511 y451a@y4515) (set! y451a@y4515 y457e@t))) (y4518@y4511)) ((lambda (y4580@t) (begin (y4519@y4513 y451b@y4517) (set! y451b@y4517 y4580@t))) (y4519@y4513)))))) y2f21@inv-collector y2f23@vis-collector y450a@rtc y450b@vtc)) (map y4507@wrap y44dd@b*) (map y4507@wrap y44db@main-exp*) (y2f1f@make-collector) (y2f1f@make-collector)))) '#f)) (y2f1d@make-top-rib y4501@subst-names y4500@subst-labels))) y44fd@y44fb y44fc@y44f9)))) y44f6@swap)) (lambda () (begin ((lambda (y4584@t) (begin (y44ee@y44e7 y44f0@y44eb) (set! y44f0@y44eb y4584@t))) (y44ee@y44e7)) ((lambda (y4586@t) (begin (y44ef@y44e9 y44f1@y44ed) (set! y44f1@y44ed y4586@t))) (y44ef@y44e9)))))) y2f25@imp-collector y2fad@top-level-context y44e5@itc '#f))) '#f))) (set! y2f2d@core-library-expander (lambda (y4588@e y4589@verify-name) (call-with-values (lambda () (y2f19@parse-library y4588@e)) (lambda (y4594@y458d y4595@y458f y4596@y4591 y4597@y4593) ((lambda (y459c@b* y459d@imp* y459e@exp* y459f@name*) (call-with-values (lambda () (y2f17@parse-library-name y459f@name*)) (lambda (y45a8@y45a5 y45a9@y45a7) ((lambda (y45ac@ver y45ad@name) (begin (y4589@verify-name y45ad@name) (call-with-values (lambda () (y2f2b@library-body-expander y45ad@name y459e@exp* y459d@imp* y459c@b* '#f)) (lambda (y45be@y45b1 y45bf@y45b3 y45c0@y45b5 y45c1@y45b7 y45c2@y45b9 y45c3@y45bb y45c4@y45bd) ((lambda (y45cc@export-env y45cd@export-subst y45ce@visit-code y45cf@invoke-code y45d0@visit-req* y45d1@invoke-req* y45d2@imp*) (values y45ad@name y45ac@ver y45d2@imp* y45d1@invoke-req* y45d0@visit-req* y45cf@invoke-code y45ce@visit-code y45cd@export-subst y45cc@export-env)) y45c4@y45bd y45c3@y45bb y45c2@y45b9 y45c1@y45b7 y45c0@y45b5 y45bf@y45b3 y45be@y45b1))))) y45a9@y45a7 y45a8@y45a5)))) y4597@y4593 y4596@y4591 y4595@y458f y4594@y458d))))) (set! y2f2f@parse-top-level-program (lambda (y45da@e*) ((lambda (y45dc@t) ((lambda (y45de@ls/false) (if (and y45de@ls/false (apply (lambda (y45e0@import y45e1@imp* y45e2@b*) (eq? (y2fa5@syntax->datum y45e0@import) 'import)) y45de@ls/false)) (apply (lambda (y45e6@import y45e7@imp* y45e8@b*) (values y45e7@imp* y45e8@b*)) y45de@ls/false) ((lambda (y45ec@t) ((lambda (y45ee@ls/false) (if (and y45ee@ls/false (apply (lambda (y45f0@import y45f1@x y45f2@y) (eq? (y2fa5@syntax->datum y45f0@import) 'import)) y45ee@ls/false)) (apply (lambda (y45f6@import y45f7@x y45f8@y) (y2f9f@syntax-violation 'expander '"invalid syntax of top-level program" (y2ca5@syntax-car y45da@e*))) y45ee@ls/false) ((lambda (y45fc@t) ((lambda (y45fe@ls/false) (if y45fe@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) y45fe@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y45fc@t))) (y2eb6@syntax-dispatch y45fc@t '_))) y45ec@t))) (y2eb6@syntax-dispatch y45ec@t '((any . any) . any)))) y45dc@t))) (y2eb6@syntax-dispatch y45dc@t '((any . each-any) . each-any)))) y45da@e*))) (set! y2f31@top-level-expander (lambda (y4600@e*) (call-with-values (lambda () (y2f2f@parse-top-level-program y4600@e*)) (lambda (y4606@y4603 y4607@y4605) ((lambda (y460a@b* y460b@imp*) (call-with-values (lambda () (y2f2b@library-body-expander '() '() y460b@imp* y460a@b* '#t)) (lambda (y461c@y460f y461d@y4611 y461e@y4613 y461f@y4615 y4620@y4617 y4621@y4619 y4622@y461b) ((lambda (y462a@export-env y462b@export-subst y462c@visit-code y462d@invoke-code y462e@visit-req* y462f@invoke-req* y4630@imp*) (values y462f@invoke-req* y462d@invoke-code)) y4622@y461b y4621@y4619 y4620@y4617 y461f@y4615 y461e@y4613 y461d@y4611 y461c@y460f)))) y4607@y4605 y4606@y4603))))) (set! y2f37@y2f32 (make-record-type-descriptor 'env '#f 'y2f35 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! y2f39@y2f34 '#f) (set! y2f3b@y2f33 (make-record-constructor-descriptor y2f37@y2f32 '#f y2f39@y2f34)) (set! y2f3e@env? (record-predicate y2f37@y2f32)) (set! y2f40@make-env (record-constructor y2f3b@y2f33)) (set! y2f42@env-names (record-accessor y2f37@y2f32 '0)) (set! y2f44@env-labels (record-accessor y2f37@y2f32 '1)) (set! y2f46@env-itc (record-accessor y2f37@y2f32 '2)) (set! y2f48@set-env-names! (record-mutator y2f37@y2f32 '0)) (set! y2f4a@set-env-labels! (record-mutator y2f37@y2f32 '1)) (set! y2f4c@set-env-itc! (record-mutator y2f37@y2f32 '2)) (set! y2f4e@rp (y2852@y2779@make-record-printer 'env (lambda (y4638@x y4639@p y463a@wr) (display '"#<environment>" y4639@p)))) (set! y2f54@y2f4f (make-record-type-descriptor 'interaction-env '#f 'y2f52 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! y2f56@y2f51 '#f) (set! y2f58@y2f50 (make-record-constructor-descriptor y2f54@y2f4f '#f y2f56@y2f51)) (set! y2f5b@interaction-env? (record-predicate y2f54@y2f4f)) (set! y2f5d@make-interaction-env (record-constructor y2f58@y2f50)) (set! y2f5f@interaction-env-rib (record-accessor y2f54@y2f4f '0)) (set! y2f61@interaction-env-r (record-accessor y2f54@y2f4f '1)) (set! y2f63@interaction-env-locs (record-accessor y2f54@y2f4f '2)) (set! y2f65@set-interaction-env-rib! (record-mutator y2f54@y2f4f '0)) (set! y2f67@set-interaction-env-r! (record-mutator y2f54@y2f4f '1)) (set! y2f69@set-interaction-env-locs! (record-mutator y2f54@y2f4f '2)) (set! y2f6b@rp (y2852@y2779@make-record-printer 'interaction-env (lambda (y463e@x y463f@p y4640@wr) (display '"#<environment>" y463f@p)))) (set! y2f6d@interaction-environment-symbols (lambda () (y2f75@environment-symbols (y2fab@interaction-environment)))) (set! y2f6f@environment-bindings (lambda (y4644@e) (vector->list (vector-map (lambda (y4646@name y4647@label) (y2f71@parse-binding (cons y4646@name (y2ace@y296e@imported-label->binding y4647@label)))) (y2f42@env-names y4644@e) (y2f44@env-labels y4644@e))))) (set! y2f71@parse-binding (lambda (y464a@b) (cons (car y464a@b) ((lambda (y464c@t) (if (memv y464c@t '(core-prim global)) 'procedure (if (memv y464c@t '(core-macro macro global-macro)) 'syntax (if (memv y464c@t '($core-rtd)) 'record (if (eq? (car y464a@b) (cadr y464a@b)) 'syntax 'unknown))))) (cadr y464a@b))))) (set! y2f73@environment? (lambda (y464e@x) (or (y2f3e@env? y464e@x) (y2f5b@interaction-env? y464e@x)))) (set! y2f75@environment-symbols (lambda (y4650@x) (if (y2f3e@env? y4650@x) (vector->list (y2f42@env-names y4650@x)) (if (y2f5b@interaction-env? y4650@x) (map values (y2c46@rib-sym* (y2f5f@interaction-env-rib y4650@x))) (assertion-violation 'environment-symbols '"not an environment" y4650@x))))) (set! y2f77@environment (lambda y4652@imp* ((lambda (y4654@itc) ((lambda (y465a@y4657 y465b@y4659) ((lambda (y465e@swap) (dynamic-wind y465e@swap (lambda () (call-with-values (lambda () (y2f1b@parse-import-spec* y4652@imp*)) (lambda (y4664@y4661 y4665@y4663) ((lambda (y4668@subst-labels y4669@subst-names) (y2f40@make-env y4669@subst-names y4668@subst-labels y4654@itc)) y4665@y4663 y4664@y4661)))) y465e@swap)) (lambda () ((lambda (y466c@t) (begin (y465a@y4657 y465b@y4659) (set! y465b@y4659 y466c@t))) (y465a@y4657))))) y2f25@imp-collector y4654@itc)) (y2f1f@make-collector)))) (set! y2f79@null-environment (lambda (y466e@n) (begin (if (not (eqv? y466e@n '5)) (assertion-violation 'null-environment '"not 5" y466e@n) (void)) (y2f77@environment '(psyntax null-environment-5))))) (set! y2f7b@scheme-report-environment (lambda (y4670@n) (begin (if (not (eqv? y4670@n '5)) (assertion-violation 'scheme-report-environment '"not 5" y4670@n) (void)) (y2f77@environment '(psyntax scheme-report-environment-5))))) (set! y2f7d@expand (lambda (y4672@x y4673@env) (if (y2f3e@env? y4673@env) ((lambda (y4676@rib) ((lambda (y4678@x y4679@itc y467a@rtc y467b@vtc) ((lambda (y4680@x) (begin (y2c62@seal-rib! y4676@rib) (values y4680@x (y467a@rtc)))) ((lambda (y4692@y4683 y4693@y4685 y4694@y4687 y4695@y4689 y4696@y468b y4697@y468d y4698@y468f y4699@y4691) ((lambda (y46a2@swap) (dynamic-wind y46a2@swap (lambda () (y2ed8@chi-expr y4678@x '() '())) y46a2@swap)) (lambda () (begin ((lambda (y46a4@t) (begin (y4692@y4683 y4696@y468b) (set! y4696@y468b y46a4@t))) (y4692@y4683)) ((lambda (y46a6@t) (begin (y4693@y4685 y4697@y468d) (set! y4697@y468d y46a6@t))) (y4693@y4685)) ((lambda (y46a8@t) (begin (y4694@y4687 y4698@y468f) (set! y4698@y468f y46a8@t))) (y4694@y4687)) ((lambda (y46aa@t) (begin (y4695@y4689 y4699@y4691) (set! y4699@y4691 y46aa@t))) (y4695@y4689)))))) y2fad@top-level-context y2f21@inv-collector y2f23@vis-collector y2f25@imp-collector '#f y467a@rtc y467b@vtc y4679@itc))) (y2c75@make-stx y4672@x y2c27@top-mark* (list y4676@rib) '()) (y2f46@env-itc y4673@env) (y2f1f@make-collector) (y2f1f@make-collector))) (y2f1d@make-top-rib (y2f42@env-names y4673@env) (y2f44@env-labels y4673@env))) (if (y2f5b@interaction-env? y4673@env) ((lambda (y46ac@rib y46ad@r y46ae@rtc) ((lambda (y46b2@x) (call-with-values (lambda () ((lambda (y46c8@y46b9 y46c9@y46bb y46ca@y46bd y46cb@y46bf y46cc@y46c1 y46cd@y46c3 y46ce@y46c5 y46cf@y46c7) ((lambda (y46d8@swap) (dynamic-wind y46d8@swap (lambda () (y2f29@chi-interaction-expr y46b2@x y46ac@rib y46ad@r)) y46d8@swap)) (lambda () (begin ((lambda (y46da@t) (begin (y46c8@y46b9 y46cc@y46c1) (set! y46cc@y46c1 y46da@t))) (y46c8@y46b9)) ((lambda (y46dc@t) (begin (y46c9@y46bb y46cd@y46c3) (set! y46cd@y46c3 y46dc@t))) (y46c9@y46bb)) ((lambda (y46de@t) (begin (y46ca@y46bd y46ce@y46c5) (set! y46ce@y46c5 y46de@t))) (y46ca@y46bd)) ((lambda (y46e0@t) (begin (y46cb@y46bf y46cf@y46c7) (set! y46cf@y46c7 y46e0@t))) (y46cb@y46bf)))))) y2fad@top-level-context y2f21@inv-collector y2f23@vis-collector y2f25@imp-collector y4673@env y46ae@rtc (y2f1f@make-collector) (y2f1f@make-collector))) (lambda (y46e2@y46b5 y46e3@y46b7) ((lambda (y46e6@r^ y46e7@e) (begin (y2f67@set-interaction-env-r! y4673@env y46e6@r^) (values y46e7@e (y46ae@rtc)))) y46e3@y46b7 y46e2@y46b5)))) (y2c75@make-stx y4672@x y2c27@top-mark* (list y46ac@rib) '()))) (y2f5f@interaction-env-rib y4673@env) (y2f61@interaction-env-r y4673@env) (y2f1f@make-collector)) (assertion-violation 'expand '"not an environment" y4673@env))))) (set! y2f7f@eval (lambda (y46ea@x y46eb@env) (begin (if (not (y2f73@environment? y46eb@env)) (error 'eval '"not an environment" y46eb@env) (void)) (call-with-values (lambda () (y2f7d@expand y46ea@x y46eb@env)) (lambda (y46f2@y46ef y46f3@y46f1) ((lambda (y46f6@invoke-req* y46f7@x) (begin (for-each y2acf@y2970@invoke-library y46f6@invoke-req*) (eval-core (y28a9@y2861@expanded->core y46f7@x)))) y46f3@y46f1 y46f2@y46ef)))))) (set! y2f81@library-expander (lambda y4768 ((lambda (y4769) (if (= y4769 '3) (apply (lambda (y46fa@x y46fb@filename y46fc@verify-name) ((lambda (y4701@build-visit-code y4703@visit!) (begin (set! y4701@build-visit-code (lambda (y4756@macro*) (if (null? y4756@macro*) (y2c0b@y2b7b@build-void) (y2c0a@y2b79@build-sequence '#f (map (lambda (y4758@x) ((lambda (y475a@loc y475b@src) (list 'set! y475a@loc y475b@src)) (car y4758@x) (cddr y4758@x))) y4756@macro*))))) (set! y4703@visit! (lambda (y474e@macro*) (for-each (lambda (y4750@x) ((lambda (y4752@loc y4753@proc) (set-symbol-value! y4752@loc y4753@proc)) (car y4750@x) (cadr y4750@x))) y474e@macro*))) (call-with-values (lambda () (y2f2d@core-library-expander y46fa@x y46fc@verify-name)) (lambda (y4716@y4705 y4717@y4707 y4718@y4709 y4719@y470b y471a@y470d y471b@y470f y471c@y4711 y471d@y4713 y471e@y4715) ((lambda (y4728@export-env y4729@export-subst y472a@macro* y472b@invoke-code y472c@vis* y472d@inv* y472e@imp* y472f@ver y4730@name) ((lambda (y473a@id y473b@name y473c@ver y473d@imp* y473e@vis* y473f@inv* y4740@visit-proc y4741@invoke-proc y4742@visit-code y4743@invoke-code) (begin (y2acd@y296c@install-library y473a@id y473b@name y473c@ver y473d@imp* y473e@vis* y473f@inv* y4729@export-subst y4728@export-env y4740@visit-proc y4741@invoke-proc y4742@visit-code y4743@invoke-code '#t y46fb@filename) (values y473a@id y473b@name y473c@ver y473d@imp* y473e@vis* y473f@inv* y4743@invoke-code y4742@visit-code y4729@export-subst y4728@export-env))) (gensym) y4730@name y472f@ver (map y2ad3@y2978@library-spec y472e@imp*) (map y2ad3@y2978@library-spec y472c@vis*) (map y2ad3@y2978@library-spec y472d@inv*) (lambda () (y4703@visit! y472a@macro*)) (lambda () (eval-core (y28a9@y2861@expanded->core y472b@invoke-code))) (y4701@build-visit-code y472a@macro*) y472b@invoke-code)) y471e@y4715 y471d@y4713 y471c@y4711 y471b@y470f y471a@y470d y4719@y470b y4718@y4709 y4717@y4707 y4716@y4705))))) '#f '#f)) y4768) (if (= y4769 '2) (apply (lambda (y475e@x y475f@filename) (y2f81@library-expander y475e@x y475f@filename (lambda (y4762@x) (values)))) y4768) (if (= y4769 '1) (apply (lambda (y4764@x) (y2f81@library-expander y4764@x '#f (lambda (y4766@x) (values)))) y4768) (error 'apply '"invalid arg count"))))) (length y4768)))) (set! y2f83@boot-library-expand (lambda (y476a@x) (call-with-values (lambda () (y2f81@library-expander y476a@x)) (lambda (y4780@y476d y4781@y476f y4782@y4771 y4783@y4773 y4784@y4775 y4785@y4777 y4786@y4779 y4787@y477b y4788@y477d y4789@y477f) ((lambda (y4794@export-env y4795@export-subst y4796@visit-code y4797@invoke-code y4798@inv* y4799@vis* y479a@imp* y479b@ver y479c@name y479d@id) (values y479c@name y4797@invoke-code y4795@export-subst y4794@export-env)) y4789@y477f y4788@y477d y4787@y477b y4786@y4779 y4785@y4777 y4784@y4775 y4783@y4773 y4782@y4771 y4781@y476f y4780@y476d))))) (set! y2f85@rev-map-append (lambda (y47a8@f y47a9@ls y47aa@ac) (if (null? y47a9@ls) y47aa@ac (y2f85@rev-map-append y47a8@f (cdr y47a9@ls) (cons (y47a8@f (car y47a9@ls)) y47aa@ac))))) (set! y2f87@build-exports (lambda (y47ae@lex*+loc* y47af@init*) (y2c0a@y2b79@build-sequence '#f (cons (y2c0b@y2b7b@build-void) (y2f85@rev-map-append (lambda (y47b2@x) (list 'set! (cdr y47b2@x) (car y47b2@x))) y47ae@lex*+loc* y47af@init*))))) (set! y2f89@make-export-subst (lambda (y47b4@name* y47b5@id*) (map (lambda (y47b8@name y47b9@id) ((lambda (y47bc@label) (begin (if (not y47bc@label) (y2f9f@syntax-violation '#f '"cannot export unbound identifier" y47b9@id) (void)) (cons y47b8@name y47bc@label))) (y2cc5@id->label y47b9@id))) y47b4@name* y47b5@id*))) (set! y2f8b@make-export-env/macros (lambda (y47be@lex* y47bf@loc* y47c0@r) ((lambda (y47c5@lookup) (begin (set! y47c5@lookup (lambda (y47e2@x) ((letrec ((y47e4@f (lambda (y47e6@x y47e7@lex* y47e8@loc*) (if (pair? y47e7@lex*) (if (eq? y47e6@x (car y47e7@lex*)) (car y47e8@loc*) (y47e4@f y47e6@x (cdr y47e7@lex*) (cdr y47e8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) y47e4@f) y47e2@x y47be@lex* y47bf@loc*))) ((letrec ((y47c6@f (lambda (y47c8@r y47c9@env y47ca@global* y47cb@macro*) (if (null? y47c8@r) (values y47c9@env y47ca@global* y47cb@macro*) ((lambda (y47d0@x) ((lambda (y47d2@label y47d3@b) ((lambda (y47d6@t) (if (memv y47d6@t '(lexical)) ((lambda (y47d8@v) ((lambda (y47da@loc y47db@type) (y47c6@f (cdr y47c8@r) (cons (cons* y47d2@label y47db@type y47da@loc) y47c9@env) (cons (cons (y2e42@lexical-var y47d8@v) y47da@loc) y47ca@global*) y47cb@macro*)) (y47c5@lookup (y2e42@lexical-var y47d8@v)) (if (y2e44@lexical-mutable? y47d8@v) 'mutable 'global))) (y2ccf@binding-value y47d3@b)) (if (memv y47d6@t '(local-macro)) ((lambda (y47de@loc) (y47c6@f (cdr y47c8@r) (cons (cons* y47d2@label 'global-macro y47de@loc) y47c9@env) y47ca@global* (cons (cons y47de@loc (y2ccf@binding-value y47d3@b)) y47cb@macro*))) (gensym)) (if (memv y47d6@t '(local-macro!)) ((lambda (y47e0@loc) (y47c6@f (cdr y47c8@r) (cons (cons* y47d2@label 'global-macro! y47e0@loc) y47c9@env) y47ca@global* (cons (cons y47e0@loc (y2ccf@binding-value y47d3@b)) y47cb@macro*))) (gensym)) (if (memv y47d6@t '($rtd $module)) (y47c6@f (cdr y47c8@r) (cons y47d0@x y47c9@env) y47ca@global* y47cb@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (y2ccd@binding-type y47d3@b) (y2ccf@binding-value y47d3@b))))))) (y2ccd@binding-type y47d3@b))) (car y47d0@x) (cdr y47d0@x))) (car y47c8@r)))))) y47c6@f) y47c0@r '() '() '()))) '#f))) (set! y2f8d@generate-temporaries (lambda (y47ec@ls) ((lambda (y47ee@t) ((lambda (y47f0@ls/false) (if y47f0@ls/false (apply (lambda (y47f2@ls) (map (lambda (y47f4@x) (y2c75@make-stx ((lambda (y47f6@x) (if (or (symbol? y47f6@x) (string? y47f6@x)) (gensym y47f6@x) (gensym 't))) (y2fa5@syntax->datum y47f4@x)) y2c27@top-mark* '() '())) y47f2@ls)) y47f0@ls/false) ((lambda (y47f8@t) ((lambda (y47fa@ls/false) (if y47fa@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) y47fa@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y47f8@t))) (y2eb6@syntax-dispatch y47f8@t '_))) y47ee@t))) (y2eb6@syntax-dispatch y47ee@t 'each-any))) y47ec@ls))) (set! y2f8f@free-identifier=? (lambda (y47fc@x y47fd@y) (if (y2cab@id? y47fc@x) (if (y2cab@id? y47fd@y) (y2cb3@free-id=? y47fc@x y47fd@y) (assertion-violation 'free-identifier=? '"not an identifier" y47fd@y)) (assertion-violation 'free-identifier=? '"not an identifier" y47fc@x)))) (set! y2f91@bound-identifier=? (lambda (y4800@x y4801@y) (if (y2cab@id? y4800@x) (if (y2cab@id? y4801@y) (y2cb1@bound-id=? y4800@x y4801@y) (assertion-violation 'bound-identifier=? '"not an identifier" y4801@y)) (assertion-violation 'bound-identifier=? '"not an identifier" y4800@x)))) (set! y2f93@make-source-condition (lambda (y4804@x) ((lambda (y480e@y4809 y4810@y480b y4812@y480a y4815@y4808 y4817@make-source-condition y4819@y4806 y481b@y4807 y481d@source-condition? y481f@source-filename y4821@source-character) (begin (set! y480e@y4809 (make-record-type-descriptor '&source-information y4c6c@y49b3@&condition-rtd 'y480c '#f '#f '#((immutable file-name) (immutable character)))) (set! y4810@y480b '#f) (set! y4812@y480a (make-record-constructor-descriptor y480e@y4809 y4c6d@y49b5@&condition-rcd y4810@y480b)) (set! y4815@y4808 (record-predicate y480e@y4809)) (set! y4817@make-source-condition (record-constructor y4812@y480a)) (set! y4819@y4806 (record-accessor y480e@y4809 '0)) (set! y481b@y4807 (record-accessor y480e@y4809 '1)) (set! y481d@source-condition? (condition-predicate y480e@y4809)) (set! y481f@source-filename (condition-accessor y480e@y4809 y4819@y4806)) (set! y4821@source-character (condition-accessor y480e@y4809 y481b@y4807)) (if (pair? y4804@x) (y4817@make-source-condition (car y4804@x) (cdr y4804@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! y2f95@extract-position-condition (lambda (y4822@x) (y2f93@make-source-condition (y2f97@expression-position y4822@x)))) (set! y2f97@expression-position (lambda (y4824@x) (and (y2c73@stx? y4824@x) ((lambda (y4826@x) (and (y284a@y2769@annotation? y4826@x) (y284b@y276b@annotation-source y4826@x))) (y2c77@stx-expr y4824@x))))) (set! y2f99@assertion-error (lambda (y4828@expr y4829@pos) (raise (condition (y4c9c@y4a77@make-assertion-violation) (y4cae@y4aa9@make-who-condition 'assert) (y4c72@y4a0a@make-message-condition '"assertion failed") (y4ca4@y4a8e@make-irritants-condition (list y4828@expr)) (y2f93@make-source-condition y4829@pos))))) (set! y2f9b@syntax-error (lambda (y482c@x . y482e@args) (begin (if (not (for-all string? y482e@args)) (assertion-violation 'syntax-error '"invalid argument" y482e@args) (void)) (raise (condition (y4c72@y4a0a@make-message-condition (if (null? y482e@args) '"invalid syntax" (apply string-append y482e@args))) (y4cd0@y4b05@make-syntax-violation (y2fa5@syntax->datum y482c@x) '#f) (y2f95@extract-position-condition y482c@x)))))) (set! y2f9d@syntax-violation* (lambda (y4830@who y4831@msg y4832@form y4833@condition-object) (begin (if (not (string? y4831@msg)) (assertion-violation 'syntax-violation '"message is not a string" y4831@msg) (void)) ((lambda (y4838@who) (raise (condition (if y4838@who (y4cae@y4aa9@make-who-condition y4838@who) (condition)) (y4c72@y4a0a@make-message-condition y4831@msg) y4833@condition-object (y2f95@extract-position-condition y4832@form)))) (if (or (string? y4830@who) (symbol? y4830@who)) y4830@who (if (not y4830@who) ((lambda (y483a@t) ((lambda (y483c@ls/false) (if (and y483c@ls/false (apply (lambda (y483e@id) (y2cab@id? y483e@id)) y483c@ls/false)) (apply (lambda (y4840@id) (y2fa5@syntax->datum y4840@id)) y483c@ls/false) ((lambda (y4842@t) ((lambda (y4844@ls/false) (if (and y4844@ls/false (apply (lambda (y4846@id y4847@rest) (y2cab@id? y4846@id)) y4844@ls/false)) (apply (lambda (y484a@id y484b@rest) (y2fa5@syntax->datum y484a@id)) y4844@ls/false) ((lambda (y484e@t) ((lambda (y4850@ls/false) (if y4850@ls/false (apply (lambda () '#f) y4850@ls/false) (y2f9f@syntax-violation '#f '"invalid syntax" y484e@t))) (y2eb6@syntax-dispatch y484e@t '_))) y4842@t))) (y2eb6@syntax-dispatch y4842@t '(any . any)))) y483a@t))) (y2eb6@syntax-dispatch y483a@t 'any))) y4832@form) (assertion-violation 'syntax-violation '"invalid who argument" y4830@who))))))) (set! y2f9f@syntax-violation (lambda y4860 ((lambda (y4861) (if (= y4861 '3) (apply (lambda (y4852@who y4853@msg y4854@form) (y2f9f@syntax-violation y4852@who y4853@msg y4854@form '#f)) y4860) (if (= y4861 '4) (apply (lambda (y4858@who y4859@msg y485a@form y485b@subform) (y2f9d@syntax-violation* y4858@who y4859@msg y485a@form (y4cd0@y4b05@make-syntax-violation (y2fa5@syntax->datum y485a@form) (y2fa5@syntax->datum y485b@subform)))) y4860) (error 'apply '"invalid arg count")))) (length y4860)))) (set! y2fa1@identifier? (lambda (y4862@x) (y2cab@id? y4862@x))) (set! y2fa3@datum->syntax (lambda (y4864@id y4865@datum) (if (y2cab@id? y4864@id) (y2c89@datum->stx y4864@id y4865@datum) (assertion-violation 'datum->syntax '"not an identifier" y4864@id)))) (set! y2fa5@syntax->datum (lambda (y4868@x) (y2cc1@stx->datum y4868@x))) (set! y2fa7@compile-r6rs-top-level (lambda (y486a@x*) (call-with-values (lambda () (y2f31@top-level-expander y486a@x*)) (lambda (y4870@y486d y4871@y486f) ((lambda (y4874@invoke-code y4875@lib*) (lambda () (begin (for-each y2acf@y2970@invoke-library y4875@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (y28a9@y2861@expanded->core y4874@invoke-code)) (void)) (eval-core (y28a9@y2861@expanded->core y4874@invoke-code))))) y4871@y486f y4870@y486d))))) (set! y2fa9@pre-compile-r6rs-top-level (lambda (y4878@x*) (call-with-values (lambda () (y2f31@top-level-expander y4878@x*)) (lambda (y487e@y487b y487f@y487d) ((lambda (y4882@invoke-code y4883@lib*) (begin (for-each y2acf@y2970@invoke-library y4883@lib*) (y2853@y277b@compile-core (y28a9@y2861@expanded->core y4882@invoke-code)))) y487f@y487d y487e@y487b))))) (set! y2fab@interaction-environment ((lambda (y4886@the-env) (lambda () (or y4886@the-env ((lambda (y4888@lib y4889@rib) (begin ((lambda (y488c@subst) (begin (y2c50@set-rib-sym*! y4889@rib (map car y488c@subst)) (y2c52@set-rib-mark**! y4889@rib (map (lambda (y488e@x) y2c27@top-mark*) y488c@subst)) (y2c54@set-rib-label*! y4889@rib (map cdr y488c@subst)))) (y2aa4@y291a@library-subst y4888@lib)) ((lambda (y4890@env) (begin (set! y4886@the-env y4890@env) y4890@env)) (y2f5d@make-interaction-env y4889@rib '() '())))) (y2ac8@y2962@find-library-by-name '(mosh interaction)) (y2c5a@make-empty-rib))))) '#f)) (set! y2fad@top-level-context (y2855@y277f@make-parameter '#f)) (begin (set! y499e@y2fad@top-level-context y2fad@top-level-context) (set! y499d@y2fab@interaction-environment y2fab@interaction-environment) (set! y499c@y2fa9@pre-compile-r6rs-top-level y2fa9@pre-compile-r6rs-top-level) (set! y499b@y2fa7@compile-r6rs-top-level y2fa7@compile-r6rs-top-level) (set! y499a@y2fa5@syntax->datum y2fa5@syntax->datum) (set! y4999@y2fa3@datum->syntax y2fa3@datum->syntax) (set! y4998@y2fa1@identifier? y2fa1@identifier?) (set! y4997@y2f9f@syntax-violation y2f9f@syntax-violation) (set! y4996@y2f9d@syntax-violation* y2f9d@syntax-violation*) (set! y4995@y2f9b@syntax-error y2f9b@syntax-error) (set! y4994@y2f99@assertion-error y2f99@assertion-error) (set! y4993@y2f97@expression-position y2f97@expression-position) (set! y4992@y2f95@extract-position-condition y2f95@extract-position-condition) (set! y4991@y2f93@make-source-condition y2f93@make-source-condition) (set! y4990@y2f91@bound-identifier=? y2f91@bound-identifier=?) (set! y498f@y2f8f@free-identifier=? y2f8f@free-identifier=?) (set! y498e@y2f8d@generate-temporaries y2f8d@generate-temporaries) (set! y498d@y2f8b@make-export-env/macros y2f8b@make-export-env/macros) (set! y498c@y2f89@make-export-subst y2f89@make-export-subst) (set! y498b@y2f87@build-exports y2f87@build-exports) (set! y498a@y2f85@rev-map-append y2f85@rev-map-append) (set! y4989@y2f83@boot-library-expand y2f83@boot-library-expand) (set! y4988@y2f81@library-expander y2f81@library-expander) (set! y4987@y2f7f@eval y2f7f@eval) (set! y4986@y2f7d@expand y2f7d@expand) (set! y4985@y2f7b@scheme-report-environment y2f7b@scheme-report-environment) (set! y4984@y2f79@null-environment y2f79@null-environment) (set! y4983@y2f77@environment y2f77@environment) (set! y4982@y2f75@environment-symbols y2f75@environment-symbols) (set! y4981@y2f73@environment? y2f73@environment?) (set! y4980@y2f71@parse-binding y2f71@parse-binding) (set! y497f@y2f6f@environment-bindings y2f6f@environment-bindings) (set! y497e@y2f6d@interaction-environment-symbols y2f6d@interaction-environment-symbols) (set! y497d@y2f6b@rp y2f6b@rp) (set! y497c@y2f69@set-interaction-env-locs! y2f69@set-interaction-env-locs!) (set! y497b@y2f67@set-interaction-env-r! y2f67@set-interaction-env-r!) (set! y497a@y2f65@set-interaction-env-rib! y2f65@set-interaction-env-rib!) (set! y4979@y2f63@interaction-env-locs y2f63@interaction-env-locs) (set! y4978@y2f61@interaction-env-r y2f61@interaction-env-r) (set! y4977@y2f5f@interaction-env-rib y2f5f@interaction-env-rib) (set! y4976@y2f5d@make-interaction-env y2f5d@make-interaction-env) (set! y4975@y2f5b@interaction-env? y2f5b@interaction-env?) (set! y4974@y2f58@y2f50 y2f58@y2f50) (set! y4973@y2f56@y2f51 y2f56@y2f51) (set! y4972@y2f54@y2f4f y2f54@y2f4f) (set! y4971@y2f4e@rp y2f4e@rp) (set! y4970@y2f4c@set-env-itc! y2f4c@set-env-itc!) (set! y496f@y2f4a@set-env-labels! y2f4a@set-env-labels!) (set! y496e@y2f48@set-env-names! y2f48@set-env-names!) (set! y496d@y2f46@env-itc y2f46@env-itc) (set! y496c@y2f44@env-labels y2f44@env-labels) (set! y496b@y2f42@env-names y2f42@env-names) (set! y496a@y2f40@make-env y2f40@make-env) (set! y4969@y2f3e@env? y2f3e@env?) (set! y4968@y2f3b@y2f33 y2f3b@y2f33) (set! y4967@y2f39@y2f34 y2f39@y2f34) (set! y4966@y2f37@y2f32 y2f37@y2f32) (set! y4965@y2f31@top-level-expander y2f31@top-level-expander) (set! y4964@y2f2f@parse-top-level-program y2f2f@parse-top-level-program) (set! y4963@y2f2d@core-library-expander y2f2d@core-library-expander) (set! y4962@y2f2b@library-body-expander y2f2b@library-body-expander) (set! y4961@y2f29@chi-interaction-expr y2f29@chi-interaction-expr) (set! y4960@y2f27@chi-library-internal y2f27@chi-library-internal) (set! y495f@y2f25@imp-collector y2f25@imp-collector) (set! y495e@y2f23@vis-collector y2f23@vis-collector) (set! y495d@y2f21@inv-collector y2f21@inv-collector) (set! y495c@y2f1f@make-collector y2f1f@make-collector) (set! y495b@y2f1d@make-top-rib y2f1d@make-top-rib) (set! y495a@y2f1b@parse-import-spec* y2f1b@parse-import-spec*) (set! y4959@y2f19@parse-library y2f19@parse-library) (set! y4958@y2f17@parse-library-name y2f17@parse-library-name) (set! y4957@y2f15@parse-exports y2f15@parse-exports) (set! y4956@y2f13@expand-transformer y2f13@expand-transformer) (set! y4955@y2f11@chi-body* y2f11@chi-body*) (set! y4954@y2f0f@chi-internal-module y2f0f@chi-internal-module) (set! y4953@y2f0d@module-interface-exp-id* y2f0d@module-interface-exp-id*) (set! y4952@y2f0b@set-module-interface-exp-lab-vec! y2f0b@set-module-interface-exp-lab-vec!) (set! y4951@y2f09@set-module-interface-exp-id-vec! y2f09@set-module-interface-exp-id-vec!) (set! y4950@y2f07@set-module-interface-first-mark! y2f07@set-module-interface-first-mark!) (set! y494f@y2f05@module-interface-exp-lab-vec y2f05@module-interface-exp-lab-vec) (set! y494e@y2f03@module-interface-exp-id-vec y2f03@module-interface-exp-id-vec) (set! y494d@y2f01@module-interface-first-mark y2f01@module-interface-first-mark) (set! y494c@y2eff@make-module-interface y2eff@make-module-interface) (set! y494b@y2efd@module-interface? y2efd@module-interface?) (set! y494a@y2efa@y2ef2 y2efa@y2ef2) (set! y4949@y2ef8@y2ef3 y2ef8@y2ef3) (set! y4948@y2ef6@y2ef1 y2ef6@y2ef1) (set! y4947@y2ef0@parse-module y2ef0@parse-module) (set! y4946@y2eee@chi-internal y2eee@chi-internal) (set! y4945@y2eec@find-dups y2eec@find-dups) (set! y4944@y2eea@find-bound=? y2eea@find-bound=?) (set! y4943@y2ee8@chi-rhs* y2ee8@chi-rhs*) (set! y4942@y2ee6@expand-interaction-rhs*/init* y2ee6@expand-interaction-rhs*/init*) (set! y4941@y2ee4@chi-rhs y2ee4@chi-rhs) (set! y4940@y2ee2@chi-defun y2ee2@chi-defun) (set! y493f@y2ee0@chi-lambda-clause* y2ee0@chi-lambda-clause*) (set! y493e@y2ede@chi-lambda-clause y2ede@chi-lambda-clause) (set! y493d@y2edc@verify-formals y2edc@verify-formals) (set! y493c@y2eda@chi-set! y2eda@chi-set!) (set! y493b@y2ed8@chi-expr y2ed8@chi-expr) (set! y493a@y2ed6@chi-application y2ed6@chi-application) (set! y4939@y2ed4@chi-expr* y2ed4@chi-expr*) (set! y4938@y2ed2@chi-global-macro y2ed2@chi-global-macro) (set! y4937@y2ed0@chi-local-macro y2ed0@chi-local-macro) (set! y4936@y2ece@chi-macro y2ece@chi-macro) (set! y4935@y2ecc@do-macro-call y2ecc@do-macro-call) (set! y4934@y2eca@local-macro-transformer y2eca@local-macro-transformer) (set! y4933@y2ec8@macro-transformer y2ec8@macro-transformer) (set! y4932@y2ec6@symbol-macro y2ec6@symbol-macro) (set! y4931@y2ec4@core-macro-transformer y2ec4@core-macro-transformer) (set! y4930@y2ec2@syntax-transformer y2ec2@syntax-transformer) (set! y492f@y2ec0@ellipsis-map y2ec0@ellipsis-map) (set! y492e@y2ebe@syntax-case-transformer y2ebe@syntax-case-transformer) (set! y492d@y2ebc@verify-literals y2ebc@verify-literals) (set! y492c@y2eba@underscore? y2eba@underscore?) (set! y492b@y2eb8@ellipsis? y2eb8@ellipsis?) (set! y492a@y2eb6@syntax-dispatch y2eb6@syntax-dispatch) (set! y4929@y2eb4@convert-pattern y2eb4@convert-pattern) (set! y4928@y2eb2@foreign-call-transformer y2eb2@foreign-call-transformer) (set! y4927@y2eb0@parameterize-macro y2eb0@parameterize-macro) (set! y4926@y2eae@incorrect-usage-macro y2eae@incorrect-usage-macro) (set! y4925@y2eac@define-condition-type-macro y2eac@define-condition-type-macro) (set! y4924@y2eaa@define-record-type-macro y2eaa@define-record-type-macro) (set! y4923@y2ea8@define-struct-macro y2ea8@define-struct-macro) (set! y4922@y2ea6@quasisyntax-macro y2ea6@quasisyntax-macro) (set! y4921@y2ea4@quasiquote-macro y2ea4@quasiquote-macro) (set! y4920@y2ea2@syntax-rules-macro y2ea2@syntax-rules-macro) (set! y491f@y2ea0@include-into-macro y2ea0@include-into-macro) (set! y491e@y2e9e@include-macro y2e9e@include-macro) (set! y491d@y2e9c@do-include y2e9c@do-include) (set! y491c@y2e9a@cond-macro y2e9a@cond-macro) (set! y491b@y2e98@and-macro y2e98@and-macro) (set! y491a@y2e96@or-macro y2e96@or-macro) (set! y4919@y2e94@let*-macro y2e94@let*-macro) (set! y4918@y2e92@do-macro y2e92@do-macro) (set! y4917@y2e90@identifier-syntax-macro y2e90@identifier-syntax-macro) (set! y4916@y2e8e@endianness-macro y2e8e@endianness-macro) (set! y4915@y2e8c@assert-macro y2e8c@assert-macro) (set! y4914@y2e8a@delay-macro y2e8a@delay-macro) (set! y4913@y2e88@time-macro y2e88@time-macro) (set! y4912@y2e86@define-enumeration-macro y2e86@define-enumeration-macro) (set! y4911@y2e84@guard-macro y2e84@guard-macro) (set! y4910@y2e82@trace-letrec-syntax-macro y2e82@trace-letrec-syntax-macro) (set! y490f@y2e80@trace-let-syntax-macro y2e80@trace-let-syntax-macro) (set! y490e@y2e7e@trace-let/rec-syntax y2e7e@trace-let/rec-syntax) (set! y490d@y2e7c@trace-define-syntax-macro y2e7c@trace-define-syntax-macro) (set! y490c@y2e7a@trace-define-macro y2e7a@trace-define-macro) (set! y490b@y2e78@trace-lambda-macro y2e78@trace-lambda-macro) (set! y490a@y2e76@let*-values-macro y2e76@let*-values-macro) (set! y4909@y2e74@let-values-macro y2e74@let-values-macro) (set! y4908@y2e72@let-macro y2e72@let-macro) (set! y4907@y2e70@invalid-fmls-error y2e70@invalid-fmls-error) (set! y4906@y2e6e@with-syntax-macro y2e6e@with-syntax-macro) (set! y4905@y2e6c@bless y2e6c@bless) (set! y4904@y2e6a@lambda-transformer y2e6a@lambda-transformer) (set! y4903@y2e68@case-lambda-transformer y2e68@case-lambda-transformer) (set! y4902@y2e66@quote-transformer y2e66@quote-transformer) (set! y4901@y2e64@case-macro y2e64@case-macro) (set! y4900@y2e62@or-transformer y2e62@or-transformer) (set! y48ff@y2e60@and-transformer y2e60@and-transformer) (set! y48fe@y2e5e@if-transformer y2e5e@if-transformer) (set! y48fd@y2e5c@unless-macro y2e5c@unless-macro) (set! y48fc@y2e5a@when-macro y2e5a@when-macro) (set! y48fb@y2e58@record-constructor-descriptor-transformer y2e58@record-constructor-descriptor-transformer) (set! y48fa@y2e56@record-type-descriptor-transformer y2e56@record-type-descriptor-transformer) (set! y48f9@y2e54@type-descriptor-transformer y2e54@type-descriptor-transformer) (set! y48f8@y2e52@fluid-let-syntax-transformer y2e52@fluid-let-syntax-transformer) (set! y48f7@y2e50@letrec*-transformer y2e50@letrec*-transformer) (set! y48f6@y2e4e@letrec-transformer y2e4e@letrec-transformer) (set! y48f5@y2e4c@letrec-helper y2e4c@letrec-helper) (set! y48f4@y2e4a@add-lexicals y2e4a@add-lexicals) (set! y48f3@y2e48@add-lexical y2e48@add-lexical) (set! y48f2@y2e46@set-lexical-mutable! y2e46@set-lexical-mutable!) (set! y48f1@y2e44@lexical-mutable? y2e44@lexical-mutable?) (set! y48f0@y2e42@lexical-var y2e42@lexical-var) (set! y48ef@y2e40@scheme-stx y2e40@scheme-stx) (set! y48ee@y2e3e@scheme-stx-hashtable y2e3e@scheme-stx-hashtable) (set! y48ed@y2e3c@parse-define-syntax y2e3c@parse-define-syntax) (set! y48ec@y2e3a@parse-define y2e3a@parse-define) (set! y48eb@y2ce9@make-eval-transformer y2ce9@make-eval-transformer) (set! y48ea@y2ce7@variable-transformer-procedure y2ce7@variable-transformer-procedure) (set! y48e9@y2ce5@variable-transformer? y2ce5@variable-transformer?) (set! y48e8@y2ce3@make-variable-transformer y2ce3@make-variable-transformer) (set! y48e7@y2ce1@sanitize-binding y2ce1@sanitize-binding) (set! y48e6@y2cd3@syntax-type y2cd3@syntax-type) (set! y48e5@y2cd1@raise-unbound-error y2cd1@raise-unbound-error) (set! y48e4@y2ccf@binding-value y2ccf@binding-value) (set! y48e3@y2ccd@binding-type y2ccd@binding-type) (set! y48e2@y2ccb@make-binding y2ccb@make-binding) (set! y48e1@y2cc9@label->binding y2cc9@label->binding) (set! y48e0@y2cc7@id->real-label y2cc7@id->real-label) (set! y48df@y2cc5@id->label y2cc5@id->label) (set! y48de@y2cc3@same-marks*? y2cc3@same-marks*?) (set! y48dd@y2cc1@stx->datum y2cc1@stx->datum) (set! y48dc@y2cbf@strip y2cbf@strip) (set! y48db@y2cbd@strip-annotations y2cbd@strip-annotations) (set! y48da@y2cbb@self-evaluating? y2cbb@self-evaluating?) (set! y48d9@y2cb9@bound-id-member? y2cb9@bound-id-member?) (set! y48d8@y2cb7@distinct-bound-ids? y2cb7@distinct-bound-ids?) (set! y48d7@y2cb5@valid-bound-ids? y2cb5@valid-bound-ids?) (set! y48d6@y2cb3@free-id=? y2cb3@free-id=?) (set! y48d5@y2cb1@bound-id=? y2cb1@bound-id=?) (set! y48d4@y2caf@same-marks? y2caf@same-marks?) (set! y48d3@y2cad@id->sym y2cad@id->sym) (set! y48d2@y2cab@id? y2cab@id?) (set! y48d1@y2ca9@syntax->list y2ca9@syntax->list) (set! y48d0@y2ca7@syntax-cdr y2ca7@syntax-cdr) (set! y48cf@y2ca5@syntax-car y2ca5@syntax-car) (set! y48ce@y2ca3@syntax-list? y2ca3@syntax-list?) (set! y48cd@y2ca1@syntax-null? y2ca1@syntax-null?) (set! y48cc@y2c9f@syntax-vector? y2c9f@syntax-vector?) (set! y48cb@y2c9d@syntax-pair? y2c9d@syntax-pair?) (set! y48ca@y2c9b@syntax-vector->list y2c9b@syntax-vector->list) (set! y48c9@y2c99@syntax-kind? y2c99@syntax-kind?) (set! y48c8@y2c97@add-subst y2c97@add-subst) (set! y48c7@y2c95@add-mark y2c95@add-mark) (set! y48c6@y2c93@mkstx y2c93@mkstx) (set! y48c5@y2c91@join-wraps y2c91@join-wraps) (set! y48c4@y2c8f@anti-mark? y2c8f@anti-mark?) (set! y48c3@y2c8d@anti-mark y2c8d@anti-mark) (set! y48c2@y2c8b@gen-mark y2c8b@gen-mark) (set! y48c1@y2c89@datum->stx y2c89@datum->stx) (set! y48c0@y2c87@rp y2c87@rp) (set! y48bf@y2c85@set-stx-ae*! y2c85@set-stx-ae*!) (set! y48be@y2c83@set-stx-subst*! y2c83@set-stx-subst*!) (set! y48bd@y2c81@set-stx-mark*! y2c81@set-stx-mark*!) (set! y48bc@y2c7f@set-stx-expr! y2c7f@set-stx-expr!) (set! y48bb@y2c7d@stx-ae* y2c7d@stx-ae*) (set! y48ba@y2c7b@stx-subst* y2c7b@stx-subst*) (set! y48b9@y2c79@stx-mark* y2c79@stx-mark*) (set! y48b8@y2c77@stx-expr y2c77@stx-expr) (set! y48b7@y2c75@make-stx y2c75@make-stx) (set! y48b6@y2c73@stx? y2c73@stx?) (set! y48b5@y2c70@y2c68 y2c70@y2c68) (set! y48b4@y2c6e@y2c69 y2c6e@y2c69) (set! y48b3@y2c6c@y2c67 y2c6c@y2c67) (set! y48b2@y2c66@make-full-rib y2c66@make-full-rib) (set! y48b1@y2c64@unseal-rib! y2c64@unseal-rib!) (set! y48b0@y2c62@seal-rib! y2c62@seal-rib!) (set! y48af@y2c60@make-rib-map y2c60@make-rib-map) (set! y48ae@y2c5e@extend-rib/nc! y2c5e@extend-rib/nc!) (set! y48ad@y2c5c@extend-rib! y2c5c@extend-rib!) (set! y48ac@y2c5a@make-empty-rib y2c5a@make-empty-rib) (set! y48ab@y2c58@set-rib-cache! y2c58@set-rib-cache!) (set! y48aa@y2c56@set-rib-sealed/freq! y2c56@set-rib-sealed/freq!) (set! y48a9@y2c54@set-rib-label*! y2c54@set-rib-label*!) (set! y48a8@y2c52@set-rib-mark**! y2c52@set-rib-mark**!) (set! y48a7@y2c50@set-rib-sym*! y2c50@set-rib-sym*!) (set! y48a6@y2c4e@rib-cache y2c4e@rib-cache) (set! y48a5@y2c4c@rib-sealed/freq y2c4c@rib-sealed/freq) (set! y48a4@y2c4a@rib-label* y2c4a@rib-label*) (set! y48a3@y2c48@rib-mark** y2c48@rib-mark**) (set! y48a2@y2c46@rib-sym* y2c46@rib-sym*) (set! y48a1@y2c44@make-rib y2c44@make-rib) (set! y48a0@y2c42@rib? y2c42@rib?) (set! y489f@y2c3f@y2c37 y2c3f@y2c37) (set! y489e@y2c3d@y2c38 y2c3d@y2c38) (set! y489d@y2c3b@y2c36 y2c3b@y2c36) (set! y489c@y2c35@gen-define-label y2c35@gen-define-label) (set! y489b@y2c33@gen-define-label+loc y2c33@gen-define-label+loc) (set! y489a@y2c31@gen-top-level-label y2c31@gen-top-level-label) (set! y4899@y2c2f@gen-label y2c2f@gen-label) (set! y4898@y2c2d@gen-global y2c2d@gen-global) (set! y4897@y2c2b@gen-lexical y2c2b@gen-lexical) (set! y4896@y2c29@top-marked? y2c29@top-marked?) (set! y4895@y2c27@top-mark* y2c27@top-mark*) (set! y4894@y2c22@set-union y2c22@set-union) (set! y4893@y2c20@set-cons y2c20@set-cons) (set! y4892@y2c1e@file-options-macro y2c1e@file-options-macro) (y2ac5@y295c@current-library-expander y2f81@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (y49a8@y49a3 y49aa@y49a5 y49ac@y49a4 y49af@&condition? y49b1@make-&condition y49b3@&condition-rtd y49b5@&condition-rcd y4a01@y49fc y4a03@y49fe y4a05@y49fd y4a08@p? y4a0a@make-message-condition y4a0c@y49fb y4a0e@message-condition? y4a10@condition-message y4a12@&message-rtd y4a14@&message-rcd y4a1a@y4a15 y4a1c@y4a17 y4a1e@y4a16 y4a21@p? y4a23@make-warning y4a25@warning? y4a27@&warning-rtd y4a29@&warning-rcd y4a2f@y4a2a y4a31@y4a2c y4a33@y4a2b y4a36@p? y4a38@make-serious-condition y4a3a@serious-condition? y4a3c@&serious-rtd y4a3e@&serious-rcd y4a44@y4a3f y4a46@y4a41 y4a48@y4a40 y4a4b@p? y4a4d@make-error y4a4f@error? y4a51@&error-rtd y4a53@&error-rcd y4a59@y4a54 y4a5b@y4a56 y4a5d@y4a55 y4a60@p? y4a62@make-violation y4a64@violation? y4a66@&violation-rtd y4a68@&violation-rcd y4a6e@y4a69 y4a70@y4a6b y4a72@y4a6a y4a75@p? y4a77@make-assertion-violation y4a79@assertion-violation? y4a7b@&assertion-rtd y4a7d@&assertion-rcd y4a85@y4a80 y4a87@y4a82 y4a89@y4a81 y4a8c@p? y4a8e@make-irritants-condition y4a90@y4a7f y4a92@irritants-condition? y4a94@condition-irritants y4a96@&irritants-rtd y4a98@&irritants-rcd y4aa0@y4a9b y4aa2@y4a9d y4aa4@y4a9c y4aa7@p? y4aa9@make-who-condition y4aab@y4a9a y4aad@who-condition? y4aaf@condition-who y4ab1@&who-rtd y4ab3@&who-rcd y4ab9@y4ab4 y4abb@y4ab6 y4abd@y4ab5 y4ac0@p? y4ac2@make-non-continuable-violation y4ac4@non-continuable-violation? y4ac6@&non-continuable-rtd y4ac8@&non-continuable-rcd y4ace@y4ac9 y4ad0@y4acb y4ad2@y4aca y4ad5@p? y4ad7@make-implementation-restriction-violation y4ad9@implementation-restriction-violation? y4adb@&implementation-restriction-rtd y4add@&implementation-restriction-rcd y4ae3@y4ade y4ae5@y4ae0 y4ae7@y4adf y4aea@p? y4aec@make-lexical-violation y4aee@lexical-violation? y4af0@&lexical-rtd y4af2@&lexical-rcd y4afc@y4af7 y4afe@y4af9 y4b00@y4af8 y4b03@p? y4b05@make-syntax-violation y4b07@y4af4 y4b09@y4af6 y4b0b@syntax-violation? y4b0d@syntax-violation-form y4b0f@syntax-violation-subform y4b11@&syntax-rtd y4b13@&syntax-rcd y4b19@y4b14 y4b1b@y4b16 y4b1d@y4b15 y4b20@p? y4b22@make-undefined-violation y4b24@undefined-violation? y4b26@&undefined-rtd y4b28@&undefined-rcd y4b2e@y4b29 y4b30@y4b2b y4b32@y4b2a y4b35@p? y4b37@make-i/o-error y4b39@i/o-error? y4b3b@&i/o-rtd y4b3d@&i/o-rcd y4b43@y4b3e y4b45@y4b40 y4b47@y4b3f y4b4a@p? y4b4c@make-i/o-read-error y4b4e@i/o-read-error? y4b50@&i/o-read-rtd y4b52@&i/o-read-rcd y4b58@y4b53 y4b5a@y4b55 y4b5c@y4b54 y4b5f@p? y4b61@make-i/o-write-error y4b63@i/o-write-error? y4b65@&i/o-write-rtd y4b67@&i/o-write-rcd y4b6f@y4b6a y4b71@y4b6c y4b73@y4b6b y4b76@p? y4b78@make-i/o-invalid-position-error y4b7a@y4b69 y4b7c@i/o-invalid-position-error? y4b7e@i/o-error-position y4b80@&i/o-invalid-position-rtd y4b82@&i/o-invalid-position-rcd y4b8a@y4b85 y4b8c@y4b87 y4b8e@y4b86 y4b91@p? y4b93@make-i/o-filename-error y4b95@y4b84 y4b97@i/o-filename-error? y4b99@i/o-error-filename y4b9b@&i/o-filename-rtd y4b9d@&i/o-filename-rcd y4ba3@y4b9e y4ba5@y4ba0 y4ba7@y4b9f y4baa@p? y4bac@make-i/o-file-protection-error y4bae@i/o-file-protection-error? y4bb0@&i/o-file-protection-rtd y4bb2@&i/o-file-protection-rcd y4bb8@y4bb3 y4bba@y4bb5 y4bbc@y4bb4 y4bbf@p? y4bc1@make-i/o-file-is-read-only-error y4bc3@i/o-file-is-read-only-error? y4bc5@&i/o-file-is-read-only-rtd y4bc7@&i/o-file-is-read-only-rcd y4bcd@y4bc8 y4bcf@y4bca y4bd1@y4bc9 y4bd4@p? y4bd6@make-i/o-file-already-exists-error y4bd8@i/o-file-already-exists-error? y4bda@&i/o-file-already-exists-rtd y4bdc@&i/o-file-already-exists-rcd y4be2@y4bdd y4be4@y4bdf y4be6@y4bde y4be9@p? y4beb@make-i/o-file-does-not-exist-error y4bed@i/o-file-does-not-exist-error? y4bef@&i/o-file-does-not-exist-rtd y4bf1@&i/o-file-does-not-exist-rcd y4bf9@y4bf4 y4bfb@y4bf6 y4bfd@y4bf5 y4c00@p? y4c02@make-i/o-port-error y4c04@y4bf3 y4c06@i/o-port-error? y4c08@i/o-error-port y4c0a@&i/o-port-rtd y4c0c@&i/o-port-rcd y4c12@y4c0d y4c14@y4c0f y4c16@y4c0e y4c19@p? y4c1b@make-i/o-decoding-error y4c1d@i/o-decoding-error? y4c1f@&i/o-decoding-rtd y4c21@&i/o-decoding-rcd y4c29@y4c24 y4c2b@y4c26 y4c2d@y4c25 y4c30@p? y4c32@make-i/o-encoding-error y4c34@y4c23 y4c36@i/o-encoding-error? y4c38@i/o-encoding-error-char y4c3a@&i/o-encoding-rtd y4c3c@&i/o-encoding-rcd y4c42@y4c3d y4c44@y4c3f y4c46@y4c3e y4c49@p? y4c4b@make-no-infinities-violation y4c4d@no-infinities-violation? y4c4f@&no-infinities-rtd y4c51@&no-infinities-rcd y4c57@y4c52 y4c59@y4c54 y4c5b@y4c53 y4c5e@p? y4c60@make-no-nans-violation y4c62@no-nans-violation? y4c64@&no-nans-rtd y4c66@&no-nans-rcd) (begin (set! y49a8@y49a3 (make-record-type-descriptor '&condition '#f 'y49a6 '#f '#f '#())) (set! y49aa@y49a5 '#f) (set! y49ac@y49a4 (make-record-constructor-descriptor y49a8@y49a3 '#f y49aa@y49a5)) (set! y49af@&condition? (record-predicate y49a8@y49a3)) (set! y49b1@make-&condition (record-constructor y49ac@y49a4)) (set! y49b3@&condition-rtd y49a8@y49a3) (set! y49b5@&condition-rcd y49ac@y49a4) (set! y4a01@y49fc (make-record-type-descriptor '&message y49a8@y49a3 'y49ff '#f '#f '#((immutable message)))) (set! y4a03@y49fe '#f) (set! y4a05@y49fd (make-record-constructor-descriptor y4a01@y49fc y49ac@y49a4 y4a03@y49fe)) (set! y4a08@p? (record-predicate y4a01@y49fc)) (set! y4a0a@make-message-condition (record-constructor y4a05@y49fd)) (set! y4a0c@y49fb (record-accessor y4a01@y49fc '0)) (set! y4a0e@message-condition? (condition-predicate y4a01@y49fc)) (set! y4a10@condition-message (condition-accessor y4a01@y49fc y4a0c@y49fb)) (set! y4a12@&message-rtd y4a01@y49fc) (set! y4a14@&message-rcd y4a05@y49fd) (set! y4a1a@y4a15 (make-record-type-descriptor '&warning y49a8@y49a3 'y4a18 '#f '#f '#())) (set! y4a1c@y4a17 '#f) (set! y4a1e@y4a16 (make-record-constructor-descriptor y4a1a@y4a15 y49ac@y49a4 y4a1c@y4a17)) (set! y4a21@p? (record-predicate y4a1a@y4a15)) (set! y4a23@make-warning (record-constructor y4a1e@y4a16)) (set! y4a25@warning? (condition-predicate y4a1a@y4a15)) (set! y4a27@&warning-rtd y4a1a@y4a15) (set! y4a29@&warning-rcd y4a1e@y4a16) (set! y4a2f@y4a2a (make-record-type-descriptor '&serious y49a8@y49a3 'y4a2d '#f '#f '#())) (set! y4a31@y4a2c '#f) (set! y4a33@y4a2b (make-record-constructor-descriptor y4a2f@y4a2a y49ac@y49a4 y4a31@y4a2c)) (set! y4a36@p? (record-predicate y4a2f@y4a2a)) (set! y4a38@make-serious-condition (record-constructor y4a33@y4a2b)) (set! y4a3a@serious-condition? (condition-predicate y4a2f@y4a2a)) (set! y4a3c@&serious-rtd y4a2f@y4a2a) (set! y4a3e@&serious-rcd y4a33@y4a2b) (set! y4a44@y4a3f (make-record-type-descriptor '&error y4a2f@y4a2a 'y4a42 '#f '#f '#())) (set! y4a46@y4a41 '#f) (set! y4a48@y4a40 (make-record-constructor-descriptor y4a44@y4a3f y4a33@y4a2b y4a46@y4a41)) (set! y4a4b@p? (record-predicate y4a44@y4a3f)) (set! y4a4d@make-error (record-constructor y4a48@y4a40)) (set! y4a4f@error? (condition-predicate y4a44@y4a3f)) (set! y4a51@&error-rtd y4a44@y4a3f) (set! y4a53@&error-rcd y4a48@y4a40) (set! y4a59@y4a54 (make-record-type-descriptor '&violation y4a2f@y4a2a 'y4a57 '#f '#f '#())) (set! y4a5b@y4a56 '#f) (set! y4a5d@y4a55 (make-record-constructor-descriptor y4a59@y4a54 y4a33@y4a2b y4a5b@y4a56)) (set! y4a60@p? (record-predicate y4a59@y4a54)) (set! y4a62@make-violation (record-constructor y4a5d@y4a55)) (set! y4a64@violation? (condition-predicate y4a59@y4a54)) (set! y4a66@&violation-rtd y4a59@y4a54) (set! y4a68@&violation-rcd y4a5d@y4a55) (set! y4a6e@y4a69 (make-record-type-descriptor '&assertion y4a59@y4a54 'y4a6c '#f '#f '#())) (set! y4a70@y4a6b '#f) (set! y4a72@y4a6a (make-record-constructor-descriptor y4a6e@y4a69 y4a5d@y4a55 y4a70@y4a6b)) (set! y4a75@p? (record-predicate y4a6e@y4a69)) (set! y4a77@make-assertion-violation (record-constructor y4a72@y4a6a)) (set! y4a79@assertion-violation? (condition-predicate y4a6e@y4a69)) (set! y4a7b@&assertion-rtd y4a6e@y4a69) (set! y4a7d@&assertion-rcd y4a72@y4a6a) (set! y4a85@y4a80 (make-record-type-descriptor '&irritants y49a8@y49a3 'y4a83 '#f '#f '#((immutable irritants)))) (set! y4a87@y4a82 '#f) (set! y4a89@y4a81 (make-record-constructor-descriptor y4a85@y4a80 y49ac@y49a4 y4a87@y4a82)) (set! y4a8c@p? (record-predicate y4a85@y4a80)) (set! y4a8e@make-irritants-condition (record-constructor y4a89@y4a81)) (set! y4a90@y4a7f (record-accessor y4a85@y4a80 '0)) (set! y4a92@irritants-condition? (condition-predicate y4a85@y4a80)) (set! y4a94@condition-irritants (condition-accessor y4a85@y4a80 y4a90@y4a7f)) (set! y4a96@&irritants-rtd y4a85@y4a80) (set! y4a98@&irritants-rcd y4a89@y4a81) (set! y4aa0@y4a9b (make-record-type-descriptor '&who y49a8@y49a3 'y4a9e '#f '#f '#((immutable who)))) (set! y4aa2@y4a9d '#f) (set! y4aa4@y4a9c (make-record-constructor-descriptor y4aa0@y4a9b y49ac@y49a4 y4aa2@y4a9d)) (set! y4aa7@p? (record-predicate y4aa0@y4a9b)) (set! y4aa9@make-who-condition (record-constructor y4aa4@y4a9c)) (set! y4aab@y4a9a (record-accessor y4aa0@y4a9b '0)) (set! y4aad@who-condition? (condition-predicate y4aa0@y4a9b)) (set! y4aaf@condition-who (condition-accessor y4aa0@y4a9b y4aab@y4a9a)) (set! y4ab1@&who-rtd y4aa0@y4a9b) (set! y4ab3@&who-rcd y4aa4@y4a9c) (set! y4ab9@y4ab4 (make-record-type-descriptor '&non-continuable y4a59@y4a54 'y4ab7 '#f '#f '#())) (set! y4abb@y4ab6 '#f) (set! y4abd@y4ab5 (make-record-constructor-descriptor y4ab9@y4ab4 y4a5d@y4a55 y4abb@y4ab6)) (set! y4ac0@p? (record-predicate y4ab9@y4ab4)) (set! y4ac2@make-non-continuable-violation (record-constructor y4abd@y4ab5)) (set! y4ac4@non-continuable-violation? (condition-predicate y4ab9@y4ab4)) (set! y4ac6@&non-continuable-rtd y4ab9@y4ab4) (set! y4ac8@&non-continuable-rcd y4abd@y4ab5) (set! y4ace@y4ac9 (make-record-type-descriptor '&implementation-restriction y4a59@y4a54 'y4acc '#f '#f '#())) (set! y4ad0@y4acb '#f) (set! y4ad2@y4aca (make-record-constructor-descriptor y4ace@y4ac9 y4a5d@y4a55 y4ad0@y4acb)) (set! y4ad5@p? (record-predicate y4ace@y4ac9)) (set! y4ad7@make-implementation-restriction-violation (record-constructor y4ad2@y4aca)) (set! y4ad9@implementation-restriction-violation? (condition-predicate y4ace@y4ac9)) (set! y4adb@&implementation-restriction-rtd y4ace@y4ac9) (set! y4add@&implementation-restriction-rcd y4ad2@y4aca) (set! y4ae3@y4ade (make-record-type-descriptor '&lexical y4a59@y4a54 'y4ae1 '#f '#f '#())) (set! y4ae5@y4ae0 '#f) (set! y4ae7@y4adf (make-record-constructor-descriptor y4ae3@y4ade y4a5d@y4a55 y4ae5@y4ae0)) (set! y4aea@p? (record-predicate y4ae3@y4ade)) (set! y4aec@make-lexical-violation (record-constructor y4ae7@y4adf)) (set! y4aee@lexical-violation? (condition-predicate y4ae3@y4ade)) (set! y4af0@&lexical-rtd y4ae3@y4ade) (set! y4af2@&lexical-rcd y4ae7@y4adf) (set! y4afc@y4af7 (make-record-type-descriptor '&syntax y4a59@y4a54 'y4afa '#f '#f '#((immutable form) (immutable subform)))) (set! y4afe@y4af9 '#f) (set! y4b00@y4af8 (make-record-constructor-descriptor y4afc@y4af7 y4a5d@y4a55 y4afe@y4af9)) (set! y4b03@p? (record-predicate y4afc@y4af7)) (set! y4b05@make-syntax-violation (record-constructor y4b00@y4af8)) (set! y4b07@y4af4 (record-accessor y4afc@y4af7 '0)) (set! y4b09@y4af6 (record-accessor y4afc@y4af7 '1)) (set! y4b0b@syntax-violation? (condition-predicate y4afc@y4af7)) (set! y4b0d@syntax-violation-form (condition-accessor y4afc@y4af7 y4b07@y4af4)) (set! y4b0f@syntax-violation-subform (condition-accessor y4afc@y4af7 y4b09@y4af6)) (set! y4b11@&syntax-rtd y4afc@y4af7) (set! y4b13@&syntax-rcd y4b00@y4af8) (set! y4b19@y4b14 (make-record-type-descriptor '&undefined y4a59@y4a54 'y4b17 '#f '#f '#())) (set! y4b1b@y4b16 '#f) (set! y4b1d@y4b15 (make-record-constructor-descriptor y4b19@y4b14 y4a5d@y4a55 y4b1b@y4b16)) (set! y4b20@p? (record-predicate y4b19@y4b14)) (set! y4b22@make-undefined-violation (record-constructor y4b1d@y4b15)) (set! y4b24@undefined-violation? (condition-predicate y4b19@y4b14)) (set! y4b26@&undefined-rtd y4b19@y4b14) (set! y4b28@&undefined-rcd y4b1d@y4b15) (set! y4b2e@y4b29 (make-record-type-descriptor '&i/o y4a44@y4a3f 'y4b2c '#f '#f '#())) (set! y4b30@y4b2b '#f) (set! y4b32@y4b2a (make-record-constructor-descriptor y4b2e@y4b29 y4a48@y4a40 y4b30@y4b2b)) (set! y4b35@p? (record-predicate y4b2e@y4b29)) (set! y4b37@make-i/o-error (record-constructor y4b32@y4b2a)) (set! y4b39@i/o-error? (condition-predicate y4b2e@y4b29)) (set! y4b3b@&i/o-rtd y4b2e@y4b29) (set! y4b3d@&i/o-rcd y4b32@y4b2a) (set! y4b43@y4b3e (make-record-type-descriptor '&i/o-read y4b2e@y4b29 'y4b41 '#f '#f '#())) (set! y4b45@y4b40 '#f) (set! y4b47@y4b3f (make-record-constructor-descriptor y4b43@y4b3e y4b32@y4b2a y4b45@y4b40)) (set! y4b4a@p? (record-predicate y4b43@y4b3e)) (set! y4b4c@make-i/o-read-error (record-constructor y4b47@y4b3f)) (set! y4b4e@i/o-read-error? (condition-predicate y4b43@y4b3e)) (set! y4b50@&i/o-read-rtd y4b43@y4b3e) (set! y4b52@&i/o-read-rcd y4b47@y4b3f) (set! y4b58@y4b53 (make-record-type-descriptor '&i/o-write y4b2e@y4b29 'y4b56 '#f '#f '#())) (set! y4b5a@y4b55 '#f) (set! y4b5c@y4b54 (make-record-constructor-descriptor y4b58@y4b53 y4b32@y4b2a y4b5a@y4b55)) (set! y4b5f@p? (record-predicate y4b58@y4b53)) (set! y4b61@make-i/o-write-error (record-constructor y4b5c@y4b54)) (set! y4b63@i/o-write-error? (condition-predicate y4b58@y4b53)) (set! y4b65@&i/o-write-rtd y4b58@y4b53) (set! y4b67@&i/o-write-rcd y4b5c@y4b54) (set! y4b6f@y4b6a (make-record-type-descriptor '&i/o-invalid-position y4b2e@y4b29 'y4b6d '#f '#f '#((immutable position)))) (set! y4b71@y4b6c '#f) (set! y4b73@y4b6b (make-record-constructor-descriptor y4b6f@y4b6a y4b32@y4b2a y4b71@y4b6c)) (set! y4b76@p? (record-predicate y4b6f@y4b6a)) (set! y4b78@make-i/o-invalid-position-error (record-constructor y4b73@y4b6b)) (set! y4b7a@y4b69 (record-accessor y4b6f@y4b6a '0)) (set! y4b7c@i/o-invalid-position-error? (condition-predicate y4b6f@y4b6a)) (set! y4b7e@i/o-error-position (condition-accessor y4b6f@y4b6a y4b7a@y4b69)) (set! y4b80@&i/o-invalid-position-rtd y4b6f@y4b6a) (set! y4b82@&i/o-invalid-position-rcd y4b73@y4b6b) (set! y4b8a@y4b85 (make-record-type-descriptor '&i/o-filename y4b2e@y4b29 'y4b88 '#f '#f '#((immutable filename)))) (set! y4b8c@y4b87 '#f) (set! y4b8e@y4b86 (make-record-constructor-descriptor y4b8a@y4b85 y4b32@y4b2a y4b8c@y4b87)) (set! y4b91@p? (record-predicate y4b8a@y4b85)) (set! y4b93@make-i/o-filename-error (record-constructor y4b8e@y4b86)) (set! y4b95@y4b84 (record-accessor y4b8a@y4b85 '0)) (set! y4b97@i/o-filename-error? (condition-predicate y4b8a@y4b85)) (set! y4b99@i/o-error-filename (condition-accessor y4b8a@y4b85 y4b95@y4b84)) (set! y4b9b@&i/o-filename-rtd y4b8a@y4b85) (set! y4b9d@&i/o-filename-rcd y4b8e@y4b86) (set! y4ba3@y4b9e (make-record-type-descriptor '&i/o-file-protection y4b8a@y4b85 'y4ba1 '#f '#f '#())) (set! y4ba5@y4ba0 '#f) (set! y4ba7@y4b9f (make-record-constructor-descriptor y4ba3@y4b9e y4b8e@y4b86 y4ba5@y4ba0)) (set! y4baa@p? (record-predicate y4ba3@y4b9e)) (set! y4bac@make-i/o-file-protection-error (record-constructor y4ba7@y4b9f)) (set! y4bae@i/o-file-protection-error? (condition-predicate y4ba3@y4b9e)) (set! y4bb0@&i/o-file-protection-rtd y4ba3@y4b9e) (set! y4bb2@&i/o-file-protection-rcd y4ba7@y4b9f) (set! y4bb8@y4bb3 (make-record-type-descriptor '&i/o-file-is-read-only y4ba3@y4b9e 'y4bb6 '#f '#f '#())) (set! y4bba@y4bb5 '#f) (set! y4bbc@y4bb4 (make-record-constructor-descriptor y4bb8@y4bb3 y4ba7@y4b9f y4bba@y4bb5)) (set! y4bbf@p? (record-predicate y4bb8@y4bb3)) (set! y4bc1@make-i/o-file-is-read-only-error (record-constructor y4bbc@y4bb4)) (set! y4bc3@i/o-file-is-read-only-error? (condition-predicate y4bb8@y4bb3)) (set! y4bc5@&i/o-file-is-read-only-rtd y4bb8@y4bb3) (set! y4bc7@&i/o-file-is-read-only-rcd y4bbc@y4bb4) (set! y4bcd@y4bc8 (make-record-type-descriptor '&i/o-file-already-exists y4b8a@y4b85 'y4bcb '#f '#f '#())) (set! y4bcf@y4bca '#f) (set! y4bd1@y4bc9 (make-record-constructor-descriptor y4bcd@y4bc8 y4b8e@y4b86 y4bcf@y4bca)) (set! y4bd4@p? (record-predicate y4bcd@y4bc8)) (set! y4bd6@make-i/o-file-already-exists-error (record-constructor y4bd1@y4bc9)) (set! y4bd8@i/o-file-already-exists-error? (condition-predicate y4bcd@y4bc8)) (set! y4bda@&i/o-file-already-exists-rtd y4bcd@y4bc8) (set! y4bdc@&i/o-file-already-exists-rcd y4bd1@y4bc9) (set! y4be2@y4bdd (make-record-type-descriptor '&i/o-file-does-not-exist y4b8a@y4b85 'y4be0 '#f '#f '#())) (set! y4be4@y4bdf '#f) (set! y4be6@y4bde (make-record-constructor-descriptor y4be2@y4bdd y4b8e@y4b86 y4be4@y4bdf)) (set! y4be9@p? (record-predicate y4be2@y4bdd)) (set! y4beb@make-i/o-file-does-not-exist-error (record-constructor y4be6@y4bde)) (set! y4bed@i/o-file-does-not-exist-error? (condition-predicate y4be2@y4bdd)) (set! y4bef@&i/o-file-does-not-exist-rtd y4be2@y4bdd) (set! y4bf1@&i/o-file-does-not-exist-rcd y4be6@y4bde) (set! y4bf9@y4bf4 (make-record-type-descriptor '&i/o-port y4b2e@y4b29 'y4bf7 '#f '#f '#((immutable port)))) (set! y4bfb@y4bf6 '#f) (set! y4bfd@y4bf5 (make-record-constructor-descriptor y4bf9@y4bf4 y4b32@y4b2a y4bfb@y4bf6)) (set! y4c00@p? (record-predicate y4bf9@y4bf4)) (set! y4c02@make-i/o-port-error (record-constructor y4bfd@y4bf5)) (set! y4c04@y4bf3 (record-accessor y4bf9@y4bf4 '0)) (set! y4c06@i/o-port-error? (condition-predicate y4bf9@y4bf4)) (set! y4c08@i/o-error-port (condition-accessor y4bf9@y4bf4 y4c04@y4bf3)) (set! y4c0a@&i/o-port-rtd y4bf9@y4bf4) (set! y4c0c@&i/o-port-rcd y4bfd@y4bf5) (set! y4c12@y4c0d (make-record-type-descriptor '&i/o-decoding y4bf9@y4bf4 'y4c10 '#f '#f '#())) (set! y4c14@y4c0f '#f) (set! y4c16@y4c0e (make-record-constructor-descriptor y4c12@y4c0d y4bfd@y4bf5 y4c14@y4c0f)) (set! y4c19@p? (record-predicate y4c12@y4c0d)) (set! y4c1b@make-i/o-decoding-error (record-constructor y4c16@y4c0e)) (set! y4c1d@i/o-decoding-error? (condition-predicate y4c12@y4c0d)) (set! y4c1f@&i/o-decoding-rtd y4c12@y4c0d) (set! y4c21@&i/o-decoding-rcd y4c16@y4c0e) (set! y4c29@y4c24 (make-record-type-descriptor '&i/o-encoding y4bf9@y4bf4 'y4c27 '#f '#f '#((immutable char)))) (set! y4c2b@y4c26 '#f) (set! y4c2d@y4c25 (make-record-constructor-descriptor y4c29@y4c24 y4bfd@y4bf5 y4c2b@y4c26)) (set! y4c30@p? (record-predicate y4c29@y4c24)) (set! y4c32@make-i/o-encoding-error (record-constructor y4c2d@y4c25)) (set! y4c34@y4c23 (record-accessor y4c29@y4c24 '0)) (set! y4c36@i/o-encoding-error? (condition-predicate y4c29@y4c24)) (set! y4c38@i/o-encoding-error-char (condition-accessor y4c29@y4c24 y4c34@y4c23)) (set! y4c3a@&i/o-encoding-rtd y4c29@y4c24) (set! y4c3c@&i/o-encoding-rcd y4c2d@y4c25) (set! y4c42@y4c3d (make-record-type-descriptor '&no-infinities y4ace@y4ac9 'y4c40 '#f '#f '#())) (set! y4c44@y4c3f '#f) (set! y4c46@y4c3e (make-record-constructor-descriptor y4c42@y4c3d y4ad2@y4aca y4c44@y4c3f)) (set! y4c49@p? (record-predicate y4c42@y4c3d)) (set! y4c4b@make-no-infinities-violation (record-constructor y4c46@y4c3e)) (set! y4c4d@no-infinities-violation? (condition-predicate y4c42@y4c3d)) (set! y4c4f@&no-infinities-rtd y4c42@y4c3d) (set! y4c51@&no-infinities-rcd y4c46@y4c3e) (set! y4c57@y4c52 (make-record-type-descriptor '&no-nans y4ace@y4ac9 'y4c55 '#f '#f '#())) (set! y4c59@y4c54 '#f) (set! y4c5b@y4c53 (make-record-constructor-descriptor y4c57@y4c52 y4ad2@y4aca y4c59@y4c54)) (set! y4c5e@p? (record-predicate y4c57@y4c52)) (set! y4c60@make-no-nans-violation (record-constructor y4c5b@y4c53)) (set! y4c62@no-nans-violation? (condition-predicate y4c57@y4c52)) (set! y4c64@&no-nans-rtd y4c57@y4c52) (set! y4c66@&no-nans-rcd y4c5b@y4c53) (begin (set! y4d57@y4c66@&no-nans-rcd y4c66@&no-nans-rcd) (set! y4d56@y4c64@&no-nans-rtd y4c64@&no-nans-rtd) (set! y4d55@y4c62@no-nans-violation? y4c62@no-nans-violation?) (set! y4d54@y4c60@make-no-nans-violation y4c60@make-no-nans-violation) (set! y4d53@y4c5e@p? y4c5e@p?) (set! y4d52@y4c5b@y4c53 y4c5b@y4c53) (set! y4d51@y4c59@y4c54 y4c59@y4c54) (set! y4d50@y4c57@y4c52 y4c57@y4c52) (set! y4d4f@y4c51@&no-infinities-rcd y4c51@&no-infinities-rcd) (set! y4d4e@y4c4f@&no-infinities-rtd y4c4f@&no-infinities-rtd) (set! y4d4d@y4c4d@no-infinities-violation? y4c4d@no-infinities-violation?) (set! y4d4c@y4c4b@make-no-infinities-violation y4c4b@make-no-infinities-violation) (set! y4d4b@y4c49@p? y4c49@p?) (set! y4d4a@y4c46@y4c3e y4c46@y4c3e) (set! y4d49@y4c44@y4c3f y4c44@y4c3f) (set! y4d48@y4c42@y4c3d y4c42@y4c3d) (set! y4d47@y4c3c@&i/o-encoding-rcd y4c3c@&i/o-encoding-rcd) (set! y4d46@y4c3a@&i/o-encoding-rtd y4c3a@&i/o-encoding-rtd) (set! y4d45@y4c38@i/o-encoding-error-char y4c38@i/o-encoding-error-char) (set! y4d44@y4c36@i/o-encoding-error? y4c36@i/o-encoding-error?) (set! y4d43@y4c34@y4c23 y4c34@y4c23) (set! y4d42@y4c32@make-i/o-encoding-error y4c32@make-i/o-encoding-error) (set! y4d41@y4c30@p? y4c30@p?) (set! y4d40@y4c2d@y4c25 y4c2d@y4c25) (set! y4d3f@y4c2b@y4c26 y4c2b@y4c26) (set! y4d3e@y4c29@y4c24 y4c29@y4c24) (set! y4d3d@y4c21@&i/o-decoding-rcd y4c21@&i/o-decoding-rcd) (set! y4d3c@y4c1f@&i/o-decoding-rtd y4c1f@&i/o-decoding-rtd) (set! y4d3b@y4c1d@i/o-decoding-error? y4c1d@i/o-decoding-error?) (set! y4d3a@y4c1b@make-i/o-decoding-error y4c1b@make-i/o-decoding-error) (set! y4d39@y4c19@p? y4c19@p?) (set! y4d38@y4c16@y4c0e y4c16@y4c0e) (set! y4d37@y4c14@y4c0f y4c14@y4c0f) (set! y4d36@y4c12@y4c0d y4c12@y4c0d) (set! y4d35@y4c0c@&i/o-port-rcd y4c0c@&i/o-port-rcd) (set! y4d34@y4c0a@&i/o-port-rtd y4c0a@&i/o-port-rtd) (set! y4d33@y4c08@i/o-error-port y4c08@i/o-error-port) (set! y4d32@y4c06@i/o-port-error? y4c06@i/o-port-error?) (set! y4d31@y4c04@y4bf3 y4c04@y4bf3) (set! y4d30@y4c02@make-i/o-port-error y4c02@make-i/o-port-error) (set! y4d2f@y4c00@p? y4c00@p?) (set! y4d2e@y4bfd@y4bf5 y4bfd@y4bf5) (set! y4d2d@y4bfb@y4bf6 y4bfb@y4bf6) (set! y4d2c@y4bf9@y4bf4 y4bf9@y4bf4) (set! y4d2b@y4bf1@&i/o-file-does-not-exist-rcd y4bf1@&i/o-file-does-not-exist-rcd) (set! y4d2a@y4bef@&i/o-file-does-not-exist-rtd y4bef@&i/o-file-does-not-exist-rtd) (set! y4d29@y4bed@i/o-file-does-not-exist-error? y4bed@i/o-file-does-not-exist-error?) (set! y4d28@y4beb@make-i/o-file-does-not-exist-error y4beb@make-i/o-file-does-not-exist-error) (set! y4d27@y4be9@p? y4be9@p?) (set! y4d26@y4be6@y4bde y4be6@y4bde) (set! y4d25@y4be4@y4bdf y4be4@y4bdf) (set! y4d24@y4be2@y4bdd y4be2@y4bdd) (set! y4d23@y4bdc@&i/o-file-already-exists-rcd y4bdc@&i/o-file-already-exists-rcd) (set! y4d22@y4bda@&i/o-file-already-exists-rtd y4bda@&i/o-file-already-exists-rtd) (set! y4d21@y4bd8@i/o-file-already-exists-error? y4bd8@i/o-file-already-exists-error?) (set! y4d20@y4bd6@make-i/o-file-already-exists-error y4bd6@make-i/o-file-already-exists-error) (set! y4d1f@y4bd4@p? y4bd4@p?) (set! y4d1e@y4bd1@y4bc9 y4bd1@y4bc9) (set! y4d1d@y4bcf@y4bca y4bcf@y4bca) (set! y4d1c@y4bcd@y4bc8 y4bcd@y4bc8) (set! y4d1b@y4bc7@&i/o-file-is-read-only-rcd y4bc7@&i/o-file-is-read-only-rcd) (set! y4d1a@y4bc5@&i/o-file-is-read-only-rtd y4bc5@&i/o-file-is-read-only-rtd) (set! y4d19@y4bc3@i/o-file-is-read-only-error? y4bc3@i/o-file-is-read-only-error?) (set! y4d18@y4bc1@make-i/o-file-is-read-only-error y4bc1@make-i/o-file-is-read-only-error) (set! y4d17@y4bbf@p? y4bbf@p?) (set! y4d16@y4bbc@y4bb4 y4bbc@y4bb4) (set! y4d15@y4bba@y4bb5 y4bba@y4bb5) (set! y4d14@y4bb8@y4bb3 y4bb8@y4bb3) (set! y4d13@y4bb2@&i/o-file-protection-rcd y4bb2@&i/o-file-protection-rcd) (set! y4d12@y4bb0@&i/o-file-protection-rtd y4bb0@&i/o-file-protection-rtd) (set! y4d11@y4bae@i/o-file-protection-error? y4bae@i/o-file-protection-error?) (set! y4d10@y4bac@make-i/o-file-protection-error y4bac@make-i/o-file-protection-error) (set! y4d0f@y4baa@p? y4baa@p?) (set! y4d0e@y4ba7@y4b9f y4ba7@y4b9f) (set! y4d0d@y4ba5@y4ba0 y4ba5@y4ba0) (set! y4d0c@y4ba3@y4b9e y4ba3@y4b9e) (set! y4d0b@y4b9d@&i/o-filename-rcd y4b9d@&i/o-filename-rcd) (set! y4d0a@y4b9b@&i/o-filename-rtd y4b9b@&i/o-filename-rtd) (set! y4d09@y4b99@i/o-error-filename y4b99@i/o-error-filename) (set! y4d08@y4b97@i/o-filename-error? y4b97@i/o-filename-error?) (set! y4d07@y4b95@y4b84 y4b95@y4b84) (set! y4d06@y4b93@make-i/o-filename-error y4b93@make-i/o-filename-error) (set! y4d05@y4b91@p? y4b91@p?) (set! y4d04@y4b8e@y4b86 y4b8e@y4b86) (set! y4d03@y4b8c@y4b87 y4b8c@y4b87) (set! y4d02@y4b8a@y4b85 y4b8a@y4b85) (set! y4d01@y4b82@&i/o-invalid-position-rcd y4b82@&i/o-invalid-position-rcd) (set! y4d00@y4b80@&i/o-invalid-position-rtd y4b80@&i/o-invalid-position-rtd) (set! y4cff@y4b7e@i/o-error-position y4b7e@i/o-error-position) (set! y4cfe@y4b7c@i/o-invalid-position-error? y4b7c@i/o-invalid-position-error?) (set! y4cfd@y4b7a@y4b69 y4b7a@y4b69) (set! y4cfc@y4b78@make-i/o-invalid-position-error y4b78@make-i/o-invalid-position-error) (set! y4cfb@y4b76@p? y4b76@p?) (set! y4cfa@y4b73@y4b6b y4b73@y4b6b) (set! y4cf9@y4b71@y4b6c y4b71@y4b6c) (set! y4cf8@y4b6f@y4b6a y4b6f@y4b6a) (set! y4cf7@y4b67@&i/o-write-rcd y4b67@&i/o-write-rcd) (set! y4cf6@y4b65@&i/o-write-rtd y4b65@&i/o-write-rtd) (set! y4cf5@y4b63@i/o-write-error? y4b63@i/o-write-error?) (set! y4cf4@y4b61@make-i/o-write-error y4b61@make-i/o-write-error) (set! y4cf3@y4b5f@p? y4b5f@p?) (set! y4cf2@y4b5c@y4b54 y4b5c@y4b54) (set! y4cf1@y4b5a@y4b55 y4b5a@y4b55) (set! y4cf0@y4b58@y4b53 y4b58@y4b53) (set! y4cef@y4b52@&i/o-read-rcd y4b52@&i/o-read-rcd) (set! y4cee@y4b50@&i/o-read-rtd y4b50@&i/o-read-rtd) (set! y4ced@y4b4e@i/o-read-error? y4b4e@i/o-read-error?) (set! y4cec@y4b4c@make-i/o-read-error y4b4c@make-i/o-read-error) (set! y4ceb@y4b4a@p? y4b4a@p?) (set! y4cea@y4b47@y4b3f y4b47@y4b3f) (set! y4ce9@y4b45@y4b40 y4b45@y4b40) (set! y4ce8@y4b43@y4b3e y4b43@y4b3e) (set! y4ce7@y4b3d@&i/o-rcd y4b3d@&i/o-rcd) (set! y4ce6@y4b3b@&i/o-rtd y4b3b@&i/o-rtd) (set! y4ce5@y4b39@i/o-error? y4b39@i/o-error?) (set! y4ce4@y4b37@make-i/o-error y4b37@make-i/o-error) (set! y4ce3@y4b35@p? y4b35@p?) (set! y4ce2@y4b32@y4b2a y4b32@y4b2a) (set! y4ce1@y4b30@y4b2b y4b30@y4b2b) (set! y4ce0@y4b2e@y4b29 y4b2e@y4b29) (set! y4cdf@y4b28@&undefined-rcd y4b28@&undefined-rcd) (set! y4cde@y4b26@&undefined-rtd y4b26@&undefined-rtd) (set! y4cdd@y4b24@undefined-violation? y4b24@undefined-violation?) (set! y4cdc@y4b22@make-undefined-violation y4b22@make-undefined-violation) (set! y4cdb@y4b20@p? y4b20@p?) (set! y4cda@y4b1d@y4b15 y4b1d@y4b15) (set! y4cd9@y4b1b@y4b16 y4b1b@y4b16) (set! y4cd8@y4b19@y4b14 y4b19@y4b14) (set! y4cd7@y4b13@&syntax-rcd y4b13@&syntax-rcd) (set! y4cd6@y4b11@&syntax-rtd y4b11@&syntax-rtd) (set! y4cd5@y4b0f@syntax-violation-subform y4b0f@syntax-violation-subform) (set! y4cd4@y4b0d@syntax-violation-form y4b0d@syntax-violation-form) (set! y4cd3@y4b0b@syntax-violation? y4b0b@syntax-violation?) (set! y4cd2@y4b09@y4af6 y4b09@y4af6) (set! y4cd1@y4b07@y4af4 y4b07@y4af4) (set! y4cd0@y4b05@make-syntax-violation y4b05@make-syntax-violation) (set! y4ccf@y4b03@p? y4b03@p?) (set! y4cce@y4b00@y4af8 y4b00@y4af8) (set! y4ccd@y4afe@y4af9 y4afe@y4af9) (set! y4ccc@y4afc@y4af7 y4afc@y4af7) (set! y4ccb@y4af2@&lexical-rcd y4af2@&lexical-rcd) (set! y4cca@y4af0@&lexical-rtd y4af0@&lexical-rtd) (set! y4cc9@y4aee@lexical-violation? y4aee@lexical-violation?) (set! y4cc8@y4aec@make-lexical-violation y4aec@make-lexical-violation) (set! y4cc7@y4aea@p? y4aea@p?) (set! y4cc6@y4ae7@y4adf y4ae7@y4adf) (set! y4cc5@y4ae5@y4ae0 y4ae5@y4ae0) (set! y4cc4@y4ae3@y4ade y4ae3@y4ade) (set! y4cc3@y4add@&implementation-restriction-rcd y4add@&implementation-restriction-rcd) (set! y4cc2@y4adb@&implementation-restriction-rtd y4adb@&implementation-restriction-rtd) (set! y4cc1@y4ad9@implementation-restriction-violation? y4ad9@implementation-restriction-violation?) (set! y4cc0@y4ad7@make-implementation-restriction-violation y4ad7@make-implementation-restriction-violation) (set! y4cbf@y4ad5@p? y4ad5@p?) (set! y4cbe@y4ad2@y4aca y4ad2@y4aca) (set! y4cbd@y4ad0@y4acb y4ad0@y4acb) (set! y4cbc@y4ace@y4ac9 y4ace@y4ac9) (set! y4cbb@y4ac8@&non-continuable-rcd y4ac8@&non-continuable-rcd) (set! y4cba@y4ac6@&non-continuable-rtd y4ac6@&non-continuable-rtd) (set! y4cb9@y4ac4@non-continuable-violation? y4ac4@non-continuable-violation?) (set! y4cb8@y4ac2@make-non-continuable-violation y4ac2@make-non-continuable-violation) (set! y4cb7@y4ac0@p? y4ac0@p?) (set! y4cb6@y4abd@y4ab5 y4abd@y4ab5) (set! y4cb5@y4abb@y4ab6 y4abb@y4ab6) (set! y4cb4@y4ab9@y4ab4 y4ab9@y4ab4) (set! y4cb3@y4ab3@&who-rcd y4ab3@&who-rcd) (set! y4cb2@y4ab1@&who-rtd y4ab1@&who-rtd) (set! y4cb1@y4aaf@condition-who y4aaf@condition-who) (set! y4cb0@y4aad@who-condition? y4aad@who-condition?) (set! y4caf@y4aab@y4a9a y4aab@y4a9a) (set! y4cae@y4aa9@make-who-condition y4aa9@make-who-condition) (set! y4cad@y4aa7@p? y4aa7@p?) (set! y4cac@y4aa4@y4a9c y4aa4@y4a9c) (set! y4cab@y4aa2@y4a9d y4aa2@y4a9d) (set! y4caa@y4aa0@y4a9b y4aa0@y4a9b) (set! y4ca9@y4a98@&irritants-rcd y4a98@&irritants-rcd) (set! y4ca8@y4a96@&irritants-rtd y4a96@&irritants-rtd) (set! y4ca7@y4a94@condition-irritants y4a94@condition-irritants) (set! y4ca6@y4a92@irritants-condition? y4a92@irritants-condition?) (set! y4ca5@y4a90@y4a7f y4a90@y4a7f) (set! y4ca4@y4a8e@make-irritants-condition y4a8e@make-irritants-condition) (set! y4ca3@y4a8c@p? y4a8c@p?) (set! y4ca2@y4a89@y4a81 y4a89@y4a81) (set! y4ca1@y4a87@y4a82 y4a87@y4a82) (set! y4ca0@y4a85@y4a80 y4a85@y4a80) (set! y4c9f@y4a7d@&assertion-rcd y4a7d@&assertion-rcd) (set! y4c9e@y4a7b@&assertion-rtd y4a7b@&assertion-rtd) (set! y4c9d@y4a79@assertion-violation? y4a79@assertion-violation?) (set! y4c9c@y4a77@make-assertion-violation y4a77@make-assertion-violation) (set! y4c9b@y4a75@p? y4a75@p?) (set! y4c9a@y4a72@y4a6a y4a72@y4a6a) (set! y4c99@y4a70@y4a6b y4a70@y4a6b) (set! y4c98@y4a6e@y4a69 y4a6e@y4a69) (set! y4c97@y4a68@&violation-rcd y4a68@&violation-rcd) (set! y4c96@y4a66@&violation-rtd y4a66@&violation-rtd) (set! y4c95@y4a64@violation? y4a64@violation?) (set! y4c94@y4a62@make-violation y4a62@make-violation) (set! y4c93@y4a60@p? y4a60@p?) (set! y4c92@y4a5d@y4a55 y4a5d@y4a55) (set! y4c91@y4a5b@y4a56 y4a5b@y4a56) (set! y4c90@y4a59@y4a54 y4a59@y4a54) (set! y4c8f@y4a53@&error-rcd y4a53@&error-rcd) (set! y4c8e@y4a51@&error-rtd y4a51@&error-rtd) (set! y4c8d@y4a4f@error? y4a4f@error?) (set! y4c8c@y4a4d@make-error y4a4d@make-error) (set! y4c8b@y4a4b@p? y4a4b@p?) (set! y4c8a@y4a48@y4a40 y4a48@y4a40) (set! y4c89@y4a46@y4a41 y4a46@y4a41) (set! y4c88@y4a44@y4a3f y4a44@y4a3f) (set! y4c87@y4a3e@&serious-rcd y4a3e@&serious-rcd) (set! y4c86@y4a3c@&serious-rtd y4a3c@&serious-rtd) (set! y4c85@y4a3a@serious-condition? y4a3a@serious-condition?) (set! y4c84@y4a38@make-serious-condition y4a38@make-serious-condition) (set! y4c83@y4a36@p? y4a36@p?) (set! y4c82@y4a33@y4a2b y4a33@y4a2b) (set! y4c81@y4a31@y4a2c y4a31@y4a2c) (set! y4c80@y4a2f@y4a2a y4a2f@y4a2a) (set! y4c7f@y4a29@&warning-rcd y4a29@&warning-rcd) (set! y4c7e@y4a27@&warning-rtd y4a27@&warning-rtd) (set! y4c7d@y4a25@warning? y4a25@warning?) (set! y4c7c@y4a23@make-warning y4a23@make-warning) (set! y4c7b@y4a21@p? y4a21@p?) (set! y4c7a@y4a1e@y4a16 y4a1e@y4a16) (set! y4c79@y4a1c@y4a17 y4a1c@y4a17) (set! y4c78@y4a1a@y4a15 y4a1a@y4a15) (set! y4c77@y4a14@&message-rcd y4a14@&message-rcd) (set! y4c76@y4a12@&message-rtd y4a12@&message-rtd) (set! y4c75@y4a10@condition-message y4a10@condition-message) (set! y4c74@y4a0e@message-condition? y4a0e@message-condition?) (set! y4c73@y4a0c@y49fb y4a0c@y49fb) (set! y4c72@y4a0a@make-message-condition y4a0a@make-message-condition) (set! y4c71@y4a08@p? y4a08@p?) (set! y4c70@y4a05@y49fd y4a05@y49fd) (set! y4c6f@y4a03@y49fe y4a03@y49fe) (set! y4c6e@y4a01@y49fc y4a01@y49fc) (set! y4c6d@y49b5@&condition-rcd y49b5@&condition-rcd) (set! y4c6c@y49b3@&condition-rtd y49b3@&condition-rtd) (set! y4c6b@y49b1@make-&condition y49b1@make-&condition) (set! y4c6a@y49af@&condition? y49af@&condition?) (set! y4c69@y49ac@y49a4 y49ac@y49a4) (set! y4c68@y49aa@y49a5 y49aa@y49a5) (set! y4c67@y49a8@y49a3 y49a8@y49a3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (y28a6@y285b@current-primitive-locations (lambda (y515d@x) ((lambda (y515f@t) (if y515f@t (cdr y515f@t) '#f)) (assq y515d@x '((&no-nans-rcd . y4d57@y4c66@&no-nans-rcd) (&no-nans-rtd . y4d56@y4c64@&no-nans-rtd) (&no-infinities-rcd . y4d4f@y4c51@&no-infinities-rcd) (&no-infinities-rtd . y4d4e@y4c4f@&no-infinities-rtd) (&i/o-encoding-rcd . y4d47@y4c3c@&i/o-encoding-rcd) (&i/o-encoding-rtd . y4d46@y4c3a@&i/o-encoding-rtd) (&i/o-decoding-rcd . y4d3d@y4c21@&i/o-decoding-rcd) (&i/o-decoding-rtd . y4d3c@y4c1f@&i/o-decoding-rtd) (&i/o-port-rcd . y4d35@y4c0c@&i/o-port-rcd) (&i/o-port-rtd . y4d34@y4c0a@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . y4d2b@y4bf1@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . y4d2a@y4bef@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . y4d23@y4bdc@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . y4d22@y4bda@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . y4d1b@y4bc7@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . y4d1a@y4bc5@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . y4d13@y4bb2@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . y4d12@y4bb0@&i/o-file-protection-rtd) (&i/o-filename-rcd . y4d0b@y4b9d@&i/o-filename-rcd) (&i/o-filename-rtd . y4d0a@y4b9b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . y4d01@y4b82@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . y4d00@y4b80@&i/o-invalid-position-rtd) (&i/o-write-rcd . y4cf7@y4b67@&i/o-write-rcd) (&i/o-write-rtd . y4cf6@y4b65@&i/o-write-rtd) (&i/o-read-rcd . y4cef@y4b52@&i/o-read-rcd) (&i/o-read-rtd . y4cee@y4b50@&i/o-read-rtd) (&i/o-rcd . y4ce7@y4b3d@&i/o-rcd) (&i/o-rtd . y4ce6@y4b3b@&i/o-rtd) (&undefined-rcd . y4cdf@y4b28@&undefined-rcd) (&undefined-rtd . y4cde@y4b26@&undefined-rtd) (&syntax-rcd . y4cd7@y4b13@&syntax-rcd) (&syntax-rtd . y4cd6@y4b11@&syntax-rtd) (&lexical-rcd . y4ccb@y4af2@&lexical-rcd) (&lexical-rtd . y4cca@y4af0@&lexical-rtd) (&implementation-restriction-rcd . y4cc3@y4add@&implementation-restriction-rcd) (&implementation-restriction-rtd . y4cc2@y4adb@&implementation-restriction-rtd) (&non-continuable-rcd . y4cbb@y4ac8@&non-continuable-rcd) (&non-continuable-rtd . y4cba@y4ac6@&non-continuable-rtd) (&who-rcd . y4cb3@y4ab3@&who-rcd) (&who-rtd . y4cb2@y4ab1@&who-rtd) (&irritants-rcd . y4ca9@y4a98@&irritants-rcd) (&irritants-rtd . y4ca8@y4a96@&irritants-rtd) (&assertion-rcd . y4c9f@y4a7d@&assertion-rcd) (&assertion-rtd . y4c9e@y4a7b@&assertion-rtd) (&violation-rcd . y4c97@y4a68@&violation-rcd) (&violation-rtd . y4c96@y4a66@&violation-rtd) (&error-rcd . y4c8f@y4a53@&error-rcd) (&error-rtd . y4c8e@y4a51@&error-rtd) (&serious-rcd . y4c87@y4a3e@&serious-rcd) (&serious-rtd . y4c86@y4a3c@&serious-rtd) (&warning-rcd . y4c7f@y4a29@&warning-rcd) (&warning-rtd . y4c7e@y4a27@&warning-rtd) (&message-rcd . y4c77@y4a14@&message-rcd) (&message-rtd . y4c76@y4a12@&message-rtd) (&condition-rcd . y4c6d@y49b5@&condition-rcd) (&condition-rtd . y4c6c@y49b3@&condition-rtd) (syntax-error . y4995@y2f9b@syntax-error) (syntax-dispatch . y492a@y2eb6@syntax-dispatch) (load . y4e62@y4d73@load) (interaction-environment . y499d@y2fab@interaction-environment) (library-path . y2abd@y294c@library-path) (make-parameter . y2855@y277f@make-parameter) (make-variable-transformer . y48e8@y2ce3@make-variable-transformer) (identifier? . y4998@y2fa1@identifier?) (generate-temporaries . y498e@y2f8d@generate-temporaries) (free-identifier=? . y498f@y2f8f@free-identifier=?) (syntax->datum . y499a@y2fa5@syntax->datum) (datum->syntax . y4999@y2fa3@datum->syntax) (bound-identifier=? . y4990@y2f91@bound-identifier=?) (make-i/o-write-error . y4cf4@y4b61@make-i/o-write-error) (make-i/o-read-error . y4cec@y4b4c@make-i/o-read-error) (make-i/o-port-error . y4d30@y4c02@make-i/o-port-error) (make-i/o-invalid-position-error . y4cfc@y4b78@make-i/o-invalid-position-error) (make-i/o-filename-error . y4d06@y4b93@make-i/o-filename-error) (make-i/o-file-protection-error . y4d10@y4bac@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . y4d18@y4bc1@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . y4d28@y4beb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . y4d20@y4bd6@make-i/o-file-already-exists-error) (make-i/o-error . y4ce4@y4b37@make-i/o-error) (make-i/o-encoding-error . y4d42@y4c32@make-i/o-encoding-error) (make-i/o-decoding-error . y4d3a@y4c1b@make-i/o-decoding-error) (i/o-write-error? . y4cf5@y4b63@i/o-write-error?) (i/o-read-error? . y4ced@y4b4e@i/o-read-error?) (i/o-port-error? . y4d32@y4c06@i/o-port-error?) (i/o-invalid-position-error? . y4cfe@y4b7c@i/o-invalid-position-error?) (i/o-filename-error? . y4d08@y4b97@i/o-filename-error?) (i/o-file-protection-error? . y4d11@y4bae@i/o-file-protection-error?) (i/o-file-is-read-only-error? . y4d19@y4bc3@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . y4d29@y4bed@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . y4d21@y4bd8@i/o-file-already-exists-error?) (i/o-error? . y4ce5@y4b39@i/o-error?) (i/o-error-position . y4cff@y4b7e@i/o-error-position) (i/o-error-port . y4d33@y4c08@i/o-error-port) (i/o-error-filename . y4d09@y4b99@i/o-error-filename) (i/o-encoding-error? . y4d44@y4c36@i/o-encoding-error?) (i/o-encoding-error-char . y4d45@y4c38@i/o-encoding-error-char) (i/o-decoding-error? . y4d3b@y4c1d@i/o-decoding-error?) (scheme-report-environment . y4985@y2f7b@scheme-report-environment) (null-environment . y4984@y2f79@null-environment) (command-line . y4e5f@y4d6d@command-line) (eval . y4987@y2f7f@eval) (environment . y4983@y2f77@environment) (who-condition? . y4cb0@y4aad@who-condition?) (warning? . y4c7d@y4a25@warning?) (violation? . y4c95@y4a64@violation?) (undefined-violation? . y4cdd@y4b24@undefined-violation?) (syntax-violation? . y4cd3@y4b0b@syntax-violation?) (syntax-violation-subform . y4cd5@y4b0f@syntax-violation-subform) (syntax-violation-form . y4cd4@y4b0d@syntax-violation-form) (syntax-violation . y4997@y2f9f@syntax-violation) (serious-condition? . y4c85@y4a3a@serious-condition?) (non-continuable-violation? . y4cb9@y4ac4@non-continuable-violation?) (message-condition? . y4c74@y4a0e@message-condition?) (make-who-condition . y4cae@y4aa9@make-who-condition) (make-warning . y4c7c@y4a23@make-warning) (make-violation . y4c94@y4a62@make-violation) (make-undefined-violation . y4cdc@y4b22@make-undefined-violation) (make-syntax-violation . y4cd0@y4b05@make-syntax-violation) (make-serious-condition . y4c84@y4a38@make-serious-condition) (make-non-continuable-violation . y4cb8@y4ac2@make-non-continuable-violation) (make-message-condition . y4c72@y4a0a@make-message-condition) (make-lexical-violation . y4cc8@y4aec@make-lexical-violation) (make-irritants-condition . y4ca4@y4a8e@make-irritants-condition) (make-implementation-restriction-violation . y4cc0@y4ad7@make-implementation-restriction-violation) (make-error . y4c8c@y4a4d@make-error) (make-assertion-violation . y4c9c@y4a77@make-assertion-violation) (lexical-violation? . y4cc9@y4aee@lexical-violation?) (irritants-condition? . y4ca6@y4a92@irritants-condition?) (implementation-restriction-violation? . y4cc1@y4ad9@implementation-restriction-violation?) (error? . y4c8d@y4a4f@error?) (condition-who . y4cb1@y4aaf@condition-who) (condition-message . y4c75@y4a10@condition-message) (condition-irritants . y4ca7@y4a94@condition-irritants) (assertion-violation? . y4c9d@y4a79@assertion-violation?) (no-nans-violation? . y4d55@y4c62@no-nans-violation?) (no-infinities-violation? . y4d4d@y4c4d@no-infinities-violation?) (make-no-nans-violation . y4d54@y4c60@make-no-nans-violation) (make-no-infinities-violation . y4d4c@y4c4b@make-no-infinities-violation) (assertion-error . y4994@y2f99@assertion-error)))))) (y2acd@y296c@install-library 'y513a '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . y512f) (format . y512c) (string-split . y5121) (call-process . y511b) (set-current-directory! . y5117) (expand-path . y5116) (current-directory . y5115) (%spawn . y5114) (%waitpid . y5113) (%ffi-supported? . y5112) (%ffi-pointer-ref . y5111) (%ffi-pointer->string . y5110) (%ffi-call->string-or-zero . y510f) (%ffi-call->double . y510e) (%ffi-call->void* . y510d) (%ffi-call->void . y510c) (%ffi-call->int . y510b) (%ffi-lookup . y510a) (%ffi-open . y5109) (%fork . y5108) (%pipe . y5107) (p . y5106) (string-upcase . y50e8) (string-titlecase . y50e7) (string-normalize-nfkd . y50e6) (string-normalize-nfkc . y50e5) (string-normalize-nfd . y50e4) (string-normalize-nfc . y50e3) (string-foldcase . y50e2) (string-downcase . y50e1) (string-ci>? . y50e0) (string-ci>=? . y50df) (string-ci=? . y50de) (string-ci<? . y50dd) (string-ci<=? . y50dc) (char-whitespace? . y50db) (char-upper-case? . y50da) (char-title-case? . y50d9) (char-numeric? . y50d8) (char-lower-case? . y50d7) (char-general-category . y50d6) (char-upcase . y50d5) (char-titlecase . y50d4) (char-foldcase . y50d3) (char-downcase . y50d2) (char-ci>? . y50d1) (char-ci>=? . y50d0) (char-ci=? . y50cf) (char-ci<? . y50ce) (char-ci<=? . y50cd) (char-alphabetic? . y50cc) (make-variable-transformer . y2ce2) (identifier? . y2fa0) (generate-temporaries . y2f8c) (free-identifier=? . y2f8e) (syntax->datum . y2fa4) (datum->syntax . y2fa2) (bound-identifier=? . y2f90) (record-type-descriptor? . y50cb) (record-predicate . y50ca) (record-mutator . y50c9) (record-constructor . y50c8) (record-accessor . y50c7) (make-record-type-descriptor . y50c6) (make-record-constructor-descriptor . y50c5) (record? . y50c4) (record-type-uid . y50c3) (record-type-sealed? . y50c2) (record-type-parent . y50c1) (record-type-opaque? . y50c0) (record-type-name . y50bf) (record-type-generative? . y50be) (record-type-field-names . y50bd) (record-rtd . y50bc) (record-field-mutable? . y50bb) (delete-file . y50ba) (file-exists? . y50b9) (vector-sort! . y50b8) (vector-sort . y50b7) (list-sort . y50b6) (symbol-hash . y50b5) (string-ci-hash . y50b4) (string-hash . y50b3) (equal-hash . y50b2) (hashtable-equivalence-function . y50b1) (make-hashtable . y50b0) (hashtable-hash-function . y50af) (make-eqv-hashtable . y50ae) (make-eq-hashtable . y50ad) (hashtable? . y50ac) (hashtable-update! . y50ab) (hashtable-size . y50aa) (hashtable-set! . y50a9) (hashtable-ref . y50a8) (hashtable-mutable? . y50a7) (hashtable-keys . y50a6) (hashtable-entries . y50a5) (hashtable-delete! . y50a4) (hashtable-copy . y50a3) (hashtable-contains? . y50a2) (hashtable-clear! . y50a1) (call-with-output-file . y50a0) (call-with-input-file . y509f) (write-char . y509e) (write . y509d) (with-output-to-file . y509c) (with-input-from-file . y509b) (read-char . y509a) (read . y5099) (peek-char . y5098) (open-output-file . y5097) (open-input-file . y5096) (newline . y5095) (display . y5094) (close-output-port . y5093) (close-input-port . y5092) (eof-object? . y5091) (eof-object . y5090) (current-error-port . y508f) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (utf-8-codec . y508a) (utf-16-codec . y5089) (transcoder-error-handling-mode . y5088) (transcoder-eol-style . y5087) (transcoder-codec . y5086) (transcoded-port . y5085) (textual-port? . y5084) (string->bytevector . y5083) (standard-output-port . y5082) (standard-input-port . y5081) (standard-error-port . y5080) (set-port-position! . y507f) (put-u8 . y507e) (put-string . y507d) (put-datum . y507c) (put-char . y507b) (put-bytevector . y507a) (port? . y5079) (port-transcoder . y5078) (port-position . y5077) (port-has-set-port-position!? . y5076) (port-has-port-position? . y5075) (port-eof? . y5074) (output-port-buffer-mode . y5073) (open-string-output-port . y5072) (open-string-input-port . y5071) (open-file-output-port . y5070) (open-file-input/output-port . y506f) (open-file-input-port . y506e) (open-bytevector-output-port . y506d) (open-bytevector-input-port . y506c) (native-transcoder . y506b) (native-eol-style . y506a) (make-transcoder . y5069) (latin-1-codec . y5068) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (make-i/o-encoding-error . y4c31) (make-i/o-decoding-error . y4c1a) (make-custom-textual-output-port . y5067) (make-custom-textual-input/output-port . y5066) (make-custom-textual-input-port . y5065) (make-custom-binary-output-port . y5064) (make-custom-binary-input/output-port . y5063) (make-custom-binary-input-port . y5062) (make-bytevector . y5061) (lookahead-u8 . y5060) (lookahead-char . y505f) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (i/o-encoding-error? . y4c35) (i/o-encoding-error-char . y4c37) (i/o-decoding-error? . y4c1c) (get-u8 . y505e) (get-string-n! . y505d) (get-string-n . y505c) (get-string-all . y505b) (get-line . y505a) (get-datum . y5059) (get-char . y5058) (get-bytevector-some . y5057) (get-bytevector-n! . y5056) (get-bytevector-n . y5055) (get-bytevector-all . y5054) (flush-output-port . y5053) (close-port . y5052) (exit . y504a) (command-line . y4d6c) (string-fill! . y5049) (string-set! . y5048) (set-cdr! . y5047) (set-car! . y5046) (remove . y5045) (remv . y5044) (remp . y5043) (remq . y5042) (partition . y5041) (memv . y5040) (memq . y503f) (memp . y503e) (member . y503d) (exists . y503c) (for-all . y503b) (fold-right . y503a) (fold-left . y5039) (find . y5038) (filter . y5037) (cons* . y5036) (assv . y5035) (assq . y5034) (assp . y5033) (assoc . y5032) (call-with-string-output-port . y5031) (call-with-port . y5030) (call-with-bytevector-output-port . y502f) (bytevector->string . y502e) (buffer-mode? . y502d) (binary-port? . y502c) (with-exception-handler . y502b) (raise-continuable . y502a) (raise . y5029) (eval . y2f7e) (environment . y2f76) (make-enumeration . y5028) (enum-set=? . y5027) (enum-set-universe . y5026) (enum-set-union . y5025) (enum-set-subset? . y5024) (enum-set-projection . y5023) (enum-set-member? . y5022) (enum-set-intersection . y5021) (enum-set-indexer . y5020) (enum-set-difference . y501f) (enum-set-constructor . y501e) (enum-set-complement . y501d) (enum-set->list . y501c) (who-condition? . y4aac) (warning? . y4a24) (violation? . y4a63) (undefined-violation? . y4b23) (syntax-violation? . y4b0a) (syntax-violation-subform . y4b0e) (syntax-violation-form . y4b0c) (syntax-violation . y2f9e) (simple-conditions . y501b) (serious-condition? . y4a39) (non-continuable-violation? . y4ac3) (message-condition? . y4a0d) (make-who-condition . y4aa8) (make-warning . y4a22) (make-violation . y4a61) (make-undefined-violation . y4b21) (make-syntax-violation . y4b04) (make-serious-condition . y4a37) (make-non-continuable-violation . y4ac1) (make-message-condition . y4a09) (make-lexical-violation . y4aeb) (make-irritants-condition . y4a8d) (make-implementation-restriction-violation . y4ad6) (make-error . y4a4c) (make-assertion-violation . y4a76) (lexical-violation? . y4aed) (irritants-condition? . y4a91) (implementation-restriction-violation? . y4ad8) (error? . y4a4e) (condition-who . y4aae) (condition-predicate . y501a) (condition-message . y4a0f) (condition-irritants . y4a93) (condition-accessor . y5019) (condition . y5018) (assertion-violation? . y4a78) (condition? . y5017) (utf32->string . y5016) (utf16->string . y5015) (utf8->string . y5014) (uint-list->bytevector . y5013) (u8-list->bytevector . y5012) (string->utf8 . y5011) (string->utf32 . y5010) (string->utf16 . y500f) (sint-list->bytevector . y500e) (native-endianness . y500d) (bytevector? . y500c) (bytevector=? . y500b) (bytevector-uint-set! . y500a) (bytevector-uint-ref . y5009) (bytevector-u8-set! . y5008) (bytevector-u8-ref . y5007) (bytevector-u64-set! . y5006) (bytevector-u64-ref . y5005) (bytevector-u64-native-set! . y5004) (bytevector-u64-native-ref . y5003) (bytevector-u32-set! . y5002) (bytevector-u32-ref . y5001) (bytevector-u32-native-set! . y5000) (bytevector-u32-native-ref . y4fff) (bytevector-u16-set! . y4ffe) (bytevector-u16-ref . y4ffd) (bytevector-u16-native-set! . y4ffc) (bytevector-u16-native-ref . y4ffb) (bytevector-sint-set! . y4ffa) (bytevector-sint-ref . y4ff9) (bytevector-s8-set! . y4ff8) (bytevector-s8-ref . y4ff7) (bytevector-s64-set! . y4ff6) (bytevector-s64-ref . y4ff5) (bytevector-s64-native-set! . y4ff4) (bytevector-s64-native-ref . y4ff3) (bytevector-s32-set! . y4ff2) (bytevector-s32-ref . y4ff1) (bytevector-s32-native-set! . y4ff0) (bytevector-s32-native-ref . y4fef) (bytevector-s16-set! . y4fee) (bytevector-s16-ref . y4fed) (bytevector-s16-native-set! . y4fec) (bytevector-s16-native-ref . y4feb) (bytevector-length . y4fea) (bytevector-ieee-single-ref . y4fe9) (bytevector-ieee-single-set! . y4fe8) (bytevector-ieee-single-native-set! . y4fe7) (bytevector-ieee-single-native-ref . y4fe6) (bytevector-ieee-double-set! . y4fe5) (bytevector-ieee-double-ref . y4fe4) (bytevector-ieee-double-native-set! . y4fe3) (bytevector-ieee-double-native-ref . y4fe2) (bytevector-fill! . y4fe1) (bytevector-copy! . y4fe0) (bytevector-copy . y4fdf) (bytevector->uint-list . y4fde) (bytevector->u8-list . y4fdd) (bytevector->sint-list . y4fdc) (no-nans-violation? . y4c61) (no-infinities-violation? . y4c4c) (make-no-nans-violation . y4c5f) (make-no-infinities-violation . y4c4a) (real->flonum . y4fdb) (flzero? . y4fda) (fltruncate . y4fd9) (fltan . y4fd8) (flsqrt . y4fd7) (flsin . y4fd6) (flround . y4fd5) (flpositive? . y4fd4) (flonum? . y4fd3) (flodd? . y4fd2) (flnumerator . y4fd1) (flnegative? . y4fd0) (flnan? . y4fcf) (flmod0 . y4fce) (flmod . y4fcd) (flmin . y4fcc) (flmax . y4fcb) (fllog . y4fca) (flinteger? . y4fc9) (flinfinite? . y4fc8) (flfloor . y4fc7) (flfinite? . y4fc6) (flexpt . y4fc5) (flexp . y4fc4) (fleven? . y4fc3) (fldiv0-and-mod0 . y4fc2) (fldiv0 . y4fc1) (fldiv-and-mod . y4fc0) (fldiv . y4fbf) (fldenominator . y4fbe) (flcos . y4fbd) (flceiling . y4fbc) (flatan . y4fbb) (flasin . y4fba) (flacos . y4fb9) (flabs . y4fb8) (fl>? . y4fb7) (fl>=? . y4fb6) (fl=? . y4fb5) (fl<? . y4fb4) (fl<=? . y4fb3) (fl/ . y4fb2) (fl- . y4fb1) (fl+ . y4fb0) (fl* . y4faf) (fixnum->flonum . y4fae) (fxzero? . y4fad) (fxxor . y4fac) (fxrotate-bit-field . y4fab) (fxreverse-bit-field . y4faa) (fxpositive? . y4fa9) (fxodd? . y4fa8) (fxnot . y4fa7) (fxnegative? . y4fa6) (fxmod0 . y4fa5) (fxmod . y4fa4) (fxmin . y4fa3) (fxmax . y4fa2) (fxlength . y4fa1) (fxior . y4fa0) (fxif . y4f9f) (fxfirst-bit-set . y4f9e) (fxeven? . y4f9d) (fxdiv0-and-mod0 . y4f9c) (fxdiv0 . y4f9b) (fxdiv-and-mod . y4f9a) (fxdiv . y4f99) (fxcopy-bit-field . y4f98) (fxcopy-bit . y4f97) (fxbit-set? . y4f96) (fxbit-field . y4f95) (fxbit-count . y4f94) (fxarithmetic-shift-right . y4f93) (fxarithmetic-shift-left . y4f92) (fxarithmetic-shift . y4f91) (fxand . y4f90) (fx>? . y4f8f) (fx>=? . y4f8e) (fx=? . y4f8d) (fx<? . y4f8c) (fx<=? . y4f8b) (fx-/carry . y4f8a) (fx- . y4f89) (fx+/carry . y4f88) (fx+ . y4f87) (fx*/carry . y4f86) (fx* . y4f85) (greatest-fixnum . y4f84) (least-fixnum . y4f83) (fixnum-width . y4f82) (fixnum? . y4f81) (bitwise-rotate-bit-field . y4f80) (bitwise-reverse-bit-field . y4f7f) (bitwise-length . y4f7e) (bitwise-if . y4f7d) (bitwise-first-bit-set . y4f7c) (bitwise-copy-bit-field . y4f7b) (bitwise-copy-bit . y4f7a) (bitwise-bit-set? . y4f79) (bitwise-bit-field . y4f78) (bitwise-bit-count . y4f77) (bitwise-xor . y4f76) (bitwise-ior . y4f75) (bitwise-and . y4f74) (bitwise-not . y4f73) (bitwise-arithmetic-shift-right . y4f72) (bitwise-arithmetic-shift-left . y4f71) (bitwise-arithmetic-shift . y4f70) (zero? . y4f6f) (vector? . y4f6e) (vector-set! . y4f6d) (vector-ref . y4f6c) (vector-map . y4f6b) (vector-length . y4f6a) (vector-for-each . y4f69) (vector-fill! . y4f68) (vector->list . y4f67) (vector . y4f66) (values . y4f65) (truncate . y4f64) (tan . y4f63) (symbol? . y4f62) (symbol=? . y4f61) (symbol->string . y4f60) (substring . y4f5f) (string? . y4f5e) (string>? . y4f5d) (string>=? . y4f5c) (string=? . y4f5b) (string<? . y4f5a) (string<=? . y4f59) (string-ref . y4f58) (string-length . y4f57) (string-for-each . y4f56) (string-copy . y4f55) (string-append . y4f54) (string->symbol . y4f53) (string->number . y4f52) (string->list . y4f51) (string . y4f50) (sqrt . y4f4f) (sin . y4f4e) (round . y4f4d) (reverse . y4f4c) (real? . y4f4b) (real-valued? . y4f4a) (real-part . y4f49) (rationalize . y4f48) (rational? . y4f47) (rational-valued? . y4f46) (procedure? . y4f45) (positive? . y4f44) (pair? . y4f43) (odd? . y4f42) (numerator . y4f41) (number? . y4f40) (number->string . y4f3f) (null? . y4f3e) (not . y4f3d) (negative? . y4f3c) (nan? . y4f3b) (min . y4f3a) (max . y4f39) (map . y4f38) (make-vector . y4f37) (make-string . y4f36) (make-rectangular . y4f35) (make-polar . y4f34) (magnitude . y4f33) (log . y4f32) (list? . y4f31) (list-tail . y4f30) (list-ref . y4f2f) (list->vector . y4f2e) (list->string . y4f2d) (list . y4f2c) (length . y4f2b) (lcm . y4f2a) (integer? . y4f29) (integer-valued? . y4f28) (integer->char . y4f27) (infinite? . y4f26) (inexact? . y4f25) (inexact . y4f24) (imag-part . y4f23) (gcd . y4f22) (for-each . y4f21) (floor . y4f20) (finite? . y4f1f) (expt . y4f1e) (exp . y4f1d) (exact? . y4f1c) (exact-integer-sqrt . y4f1b) (exact . y4f1a) (even? . y4f19) (error . y4f18) (eqv? . y4f17) (equal? . y4f16) (eq? . y4f15) (dynamic-wind . y4f14) (div0-and-mod0 . y4f13) (mod0 . y4f12) (div0 . y4f11) (div-and-mod . y4f10) (mod . y4f0f) (div . y4f0e) (denominator . y4f0d) (cos . y4f0c) (cons . y4f0b) (complex? . y4f0a) (char? . y4f09) (char>? . y4f08) (char>=? . y4f07) (char=? . y4f06) (char<? . y4f05) (char<=? . y4f04) (char->integer . y4f03) (ceiling . y4f02) (call-with-values . y4f01) (call/cc . y4f00) (call-with-current-continuation . y4eff) (cddddr . y4efe) (cdddar . y4efd) (cddadr . y4efc) (cddaar . y4efb) (cdaddr . y4efa) (cdadar . y4ef9) (cdaadr . y4ef8) (cdaaar . y4ef7) (cadddr . y4ef6) (caddar . y4ef5) (cadadr . y4ef4) (cadaar . y4ef3) (caaddr . y4ef2) (caadar . y4ef1) (caaadr . y4ef0) (caaaar . y4eef) (cdddr . y4eee) (cddar . y4eed) (cdadr . y4eec) (cdaar . y4eeb) (caddr . y4eea) (cadar . y4ee9) (caadr . y4ee8) (caaar . y4ee7) (cddr . y4ee6) (cdar . y4ee5) (cadr . y4ee4) (caar . y4ee3) (cdr . y4ee2) (car . y4ee1) (boolean? . y4ee0) (boolean=? . y4edf) (atan . y4ede) (assertion-violation . y4edd) (asin . y4edc) (apply . y4edb) (append . y4eda) (angle . y4ed9) (acos . y4ed8) (abs . y4ed7) (/ . y4ed6) (* . y4ed5) (- . y4ed4) (+ . y4ed3) (>= . y4ed2) (> . y4ed1) (= . y4ed0) (<= . y4ecf) (< . y4ece) (library . y4ecd) (&no-nans . y4ecc) (&no-infinities . y4ecb) (&i/o-encoding . y4eca) (&i/o-decoding . y4ec9) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf) (&undefined . y4ebe) (&syntax . y4ebd) (&lexical . y4ebc) (&implementation-restriction . y4ebb) (&non-continuable . y4eba) (&who . y4eb9) (&irritants . y4eb8) (&assertion . y4eb7) (&violation . y4eb6) (&error . y4eb5) (&serious . y4eb4) (&warning . y4eb3) (&message . y4eb2) (&condition . y4eb1) (define-condition-type . y4eb0) (define-enumeration . y4eaf) (define-record-type . y4eae) (parent-rtd . y4ead) (nongenerative . y4eac) (opaque . y4eab) (sealed . y4eaa) (protocol . y4ea9) (parent . y4ea8) (immutable . y4ea7) (mutable . y4ea6) (fields . y4ea5) (error-handling-mode . y4ea4) (file-options . y4ea3) (buffer-mode . y4ea2) (eol-style . y4ea1) (guard . y4ea0) (unsyntax-splicing . y4e9d) (unsyntax . y4e9c) (unquote-splicing . y4e9b) (unquote . y4e9a) (_ . y4e99) (else . y4e98) (=> . y4e97) (... . y4e96) (assert . y4e95) (endianness . y4e94) (do . y4e91) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (let*-values . y4e8d) (let-values . y4e8c) (identifier-syntax . y4e8b) (with-syntax . y4e8a) (quasisyntax . y4e89) (quasiquote . y4e88) (syntax-rules . y4e87) (include . y4e86) (record-constructor-descriptor . y4e84) (record-type-descriptor . y4e83) (case . y4e82) (unless . y4e80) (when . y4e7f) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec* . y4e7b) (letrec . y4e7a) (case-lambda . y4e78) (lambda . y4e77) (syntax . y4e76) (syntax-case . y4e75) (quote . y4e74) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (import . y4e6f) (begin . y4e6e) (define-syntax . y4e6c) (define . y4e6b)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y513b '(psyntax null-environment-5) '() '() '() '() '((make-promise . y504b) (unquote-splicing . y4e9b) (unquote . y4e9a) (_ . y4e99) (else . y4e98) (=> . y4e97) (... . y4e96) (delay . y4e93) (do . y4e91) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (quasiquote . y4e88) (syntax-rules . y4e87) (case . y4e82) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec . y4e7a) (lambda . y4e77) (quote . y4e74) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (begin . y4e6e) (define-syntax . y4e6c) (define . y4e6b)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y513c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . y50e0) (string-ci>=? . y50df) (string-ci=? . y50de) (string-ci<? . y50dd) (string-ci<=? . y50dc) (char-whitespace? . y50db) (char-upper-case? . y50da) (char-numeric? . y50d8) (char-lower-case? . y50d7) (char-upcase . y50d5) (char-downcase . y50d2) (char-ci>? . y50d1) (char-ci>=? . y50d0) (char-ci=? . y50cf) (char-ci<? . y50ce) (char-ci<=? . y50cd) (char-alphabetic? . y50cc) (call-with-output-file . y50a0) (call-with-input-file . y509f) (write-char . y509e) (write . y509d) (with-output-to-file . y509c) (with-input-from-file . y509b) (read-char . y509a) (read . y5099) (peek-char . y5098) (open-output-file . y5097) (open-input-file . y5096) (newline . y5095) (display . y5094) (close-output-port . y5093) (close-input-port . y5092) (eof-object . y5090) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (scheme-report-environment . y2f7a) (quotient . y5051) (null-environment . y2f78) (remainder . y5050) (modulo . y504f) (inexact->exact . y504e) (force . y504d) (exact->inexact . y504c) (make-promise . y504b) (string-fill! . y5049) (string-set! . y5048) (set-cdr! . y5047) (set-car! . y5046) (memv . y5040) (memq . y503f) (member . y503d) (assv . y5035) (assq . y5034) (assoc . y5032) (eval . y2f7e) (zero? . y4f6f) (vector? . y4f6e) (vector-set! . y4f6d) (vector-ref . y4f6c) (vector-length . y4f6a) (vector-fill! . y4f68) (vector->list . y4f67) (vector . y4f66) (values . y4f65) (truncate . y4f64) (tan . y4f63) (symbol? . y4f62) (symbol->string . y4f60) (substring . y4f5f) (string? . y4f5e) (string>? . y4f5d) (string>=? . y4f5c) (string=? . y4f5b) (string<? . y4f5a) (string<=? . y4f59) (string-ref . y4f58) (string-length . y4f57) (string-copy . y4f55) (string-append . y4f54) (string->symbol . y4f53) (string->number . y4f52) (string->list . y4f51) (string . y4f50) (sqrt . y4f4f) (sin . y4f4e) (round . y4f4d) (reverse . y4f4c) (real? . y4f4b) (real-part . y4f49) (rationalize . y4f48) (rational? . y4f47) (procedure? . y4f45) (positive? . y4f44) (pair? . y4f43) (odd? . y4f42) (numerator . y4f41) (number? . y4f40) (number->string . y4f3f) (not . y4f3d) (negative? . y4f3c) (min . y4f3a) (max . y4f39) (map . y4f38) (make-vector . y4f37) (make-string . y4f36) (make-rectangular . y4f35) (make-polar . y4f34) (magnitude . y4f33) (log . y4f32) (list? . y4f31) (list-tail . y4f30) (list-ref . y4f2f) (list->vector . y4f2e) (list->string . y4f2d) (list . y4f2c) (length . y4f2b) (lcm . y4f2a) (integer? . y4f29) (integer->char . y4f27) (inexact? . y4f25) (imag-part . y4f23) (gcd . y4f22) (for-each . y4f21) (floor . y4f20) (expt . y4f1e) (exp . y4f1d) (exact? . y4f1c) (even? . y4f19) (eqv? . y4f17) (equal? . y4f16) (eq? . y4f15) (dynamic-wind . y4f14) (denominator . y4f0d) (cos . y4f0c) (cons . y4f0b) (complex? . y4f0a) (char? . y4f09) (char>? . y4f08) (char>=? . y4f07) (char=? . y4f06) (char<? . y4f05) (char<=? . y4f04) (char->integer . y4f03) (ceiling . y4f02) (call-with-values . y4f01) (call-with-current-continuation . y4eff) (cddddr . y4efe) (cdddar . y4efd) (cddadr . y4efc) (cddaar . y4efb) (cdaddr . y4efa) (cdadar . y4ef9) (cdaadr . y4ef8) (cdaaar . y4ef7) (cadddr . y4ef6) (caddar . y4ef5) (cadadr . y4ef4) (cadaar . y4ef3) (caaddr . y4ef2) (caadar . y4ef1) (caaadr . y4ef0) (caaaar . y4eef) (cdddr . y4eee) (cddar . y4eed) (cdadr . y4eec) (cdaar . y4eeb) (caddr . y4eea) (cadar . y4ee9) (caadr . y4ee8) (caaar . y4ee7) (cddr . y4ee6) (cdar . y4ee5) (cadr . y4ee4) (caar . y4ee3) (cdr . y4ee2) (car . y4ee1) (boolean? . y4ee0) (atan . y4ede) (asin . y4edc) (apply . y4edb) (append . y4eda) (angle . y4ed9) (acos . y4ed8) (abs . y4ed7) (/ . y4ed6) (* . y4ed5) (- . y4ed4) (+ . y4ed3) (>= . y4ed2) (> . y4ed1) (= . y4ed0) (<= . y4ecf) (< . y4ece) (unquote-splicing . y4e9b) (unquote . y4e9a) (else . y4e98) (=> . y4e97) (... . y4e96) (delay . y4e93) (do . y4e91) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (quasiquote . y4e88) (syntax-rules . y4e87) (case . y4e82) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec . y4e7a) (lambda . y4e77) (quote . y4e74) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (begin . y4e6e) (define-syntax . y4e6c) (define . y4e6b)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y513d '(psyntax modules) '() '() '() '() '((module . y4e6d)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y513e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y513f '(rnrs) '(6) '() '() '() '((regexp? . y5132) (string-upcase . y50e8) (string-titlecase . y50e7) (string-normalize-nfkd . y50e6) (string-normalize-nfkc . y50e5) (string-normalize-nfd . y50e4) (string-normalize-nfc . y50e3) (string-foldcase . y50e2) (string-downcase . y50e1) (string-ci>? . y50e0) (string-ci>=? . y50df) (string-ci=? . y50de) (string-ci<? . y50dd) (string-ci<=? . y50dc) (char-whitespace? . y50db) (char-upper-case? . y50da) (char-title-case? . y50d9) (char-numeric? . y50d8) (char-lower-case? . y50d7) (char-general-category . y50d6) (char-upcase . y50d5) (char-titlecase . y50d4) (char-foldcase . y50d3) (char-downcase . y50d2) (char-ci>? . y50d1) (char-ci>=? . y50d0) (char-ci=? . y50cf) (char-ci<? . y50ce) (char-ci<=? . y50cd) (char-alphabetic? . y50cc) (make-variable-transformer . y2ce2) (identifier? . y2fa0) (generate-temporaries . y2f8c) (free-identifier=? . y2f8e) (syntax->datum . y2fa4) (datum->syntax . y2fa2) (bound-identifier=? . y2f90) (record-type-descriptor? . y50cb) (record-predicate . y50ca) (record-mutator . y50c9) (record-constructor . y50c8) (record-accessor . y50c7) (make-record-type-descriptor . y50c6) (make-record-constructor-descriptor . y50c5) (record? . y50c4) (record-type-uid . y50c3) (record-type-sealed? . y50c2) (record-type-parent . y50c1) (record-type-opaque? . y50c0) (record-type-name . y50bf) (record-type-generative? . y50be) (record-type-field-names . y50bd) (record-rtd . y50bc) (record-field-mutable? . y50bb) (delete-file . y50ba) (file-exists? . y50b9) (vector-sort! . y50b8) (vector-sort . y50b7) (list-sort . y50b6) (symbol-hash . y50b5) (string-ci-hash . y50b4) (string-hash . y50b3) (equal-hash . y50b2) (hashtable-equivalence-function . y50b1) (make-hashtable . y50b0) (hashtable-hash-function . y50af) (make-eqv-hashtable . y50ae) (make-eq-hashtable . y50ad) (hashtable? . y50ac) (hashtable-update! . y50ab) (hashtable-size . y50aa) (hashtable-set! . y50a9) (hashtable-ref . y50a8) (hashtable-mutable? . y50a7) (hashtable-keys . y50a6) (hashtable-entries . y50a5) (hashtable-delete! . y50a4) (hashtable-copy . y50a3) (hashtable-contains? . y50a2) (hashtable-clear! . y50a1) (call-with-output-file . y50a0) (call-with-input-file . y509f) (write-char . y509e) (write . y509d) (with-output-to-file . y509c) (with-input-from-file . y509b) (read-char . y509a) (read . y5099) (peek-char . y5098) (open-output-file . y5097) (open-input-file . y5096) (newline . y5095) (display . y5094) (close-output-port . y5093) (close-input-port . y5092) (eof-object? . y5091) (eof-object . y5090) (current-error-port . y508f) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (utf-8-codec . y508a) (utf-16-codec . y5089) (transcoder-error-handling-mode . y5088) (transcoder-eol-style . y5087) (transcoder-codec . y5086) (transcoded-port . y5085) (textual-port? . y5084) (string->bytevector . y5083) (standard-output-port . y5082) (standard-input-port . y5081) (standard-error-port . y5080) (set-port-position! . y507f) (put-u8 . y507e) (put-string . y507d) (put-datum . y507c) (put-char . y507b) (put-bytevector . y507a) (port? . y5079) (port-transcoder . y5078) (port-position . y5077) (port-has-set-port-position!? . y5076) (port-has-port-position? . y5075) (port-eof? . y5074) (output-port-buffer-mode . y5073) (open-string-output-port . y5072) (open-string-input-port . y5071) (open-file-output-port . y5070) (open-file-input/output-port . y506f) (open-file-input-port . y506e) (open-bytevector-output-port . y506d) (open-bytevector-input-port . y506c) (native-transcoder . y506b) (native-eol-style . y506a) (make-transcoder . y5069) (latin-1-codec . y5068) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (make-i/o-encoding-error . y4c31) (make-i/o-decoding-error . y4c1a) (make-custom-textual-output-port . y5067) (make-custom-textual-input/output-port . y5066) (make-custom-textual-input-port . y5065) (make-custom-binary-output-port . y5064) (make-custom-binary-input/output-port . y5063) (make-custom-binary-input-port . y5062) (make-bytevector . y5061) (lookahead-u8 . y5060) (lookahead-char . y505f) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (i/o-encoding-error? . y4c35) (i/o-encoding-error-char . y4c37) (i/o-decoding-error? . y4c1c) (get-u8 . y505e) (get-string-n! . y505d) (get-string-n . y505c) (get-string-all . y505b) (get-line . y505a) (get-datum . y5059) (get-char . y5058) (get-bytevector-some . y5057) (get-bytevector-n! . y5056) (get-bytevector-n . y5055) (get-bytevector-all . y5054) (flush-output-port . y5053) (close-port . y5052) (exit . y504a) (command-line . y4d6c) (remove . y5045) (remv . y5044) (remp . y5043) (remq . y5042) (partition . y5041) (memv . y5040) (memq . y503f) (memp . y503e) (member . y503d) (exists . y503c) (for-all . y503b) (fold-right . y503a) (fold-left . y5039) (find . y5038) (filter . y5037) (cons* . y5036) (assv . y5035) (assq . y5034) (assp . y5033) (assoc . y5032) (call-with-string-output-port . y5031) (call-with-port . y5030) (call-with-bytevector-output-port . y502f) (bytevector->string . y502e) (buffer-mode? . y502d) (binary-port? . y502c) (with-exception-handler . y502b) (raise-continuable . y502a) (raise . y5029) (make-enumeration . y5028) (enum-set=? . y5027) (enum-set-universe . y5026) (enum-set-union . y5025) (enum-set-subset? . y5024) (enum-set-projection . y5023) (enum-set-member? . y5022) (enum-set-intersection . y5021) (enum-set-indexer . y5020) (enum-set-difference . y501f) (enum-set-constructor . y501e) (enum-set-complement . y501d) (enum-set->list . y501c) (who-condition? . y4aac) (warning? . y4a24) (violation? . y4a63) (undefined-violation? . y4b23) (syntax-violation? . y4b0a) (syntax-violation-subform . y4b0e) (syntax-violation-form . y4b0c) (syntax-violation . y2f9e) (simple-conditions . y501b) (serious-condition? . y4a39) (non-continuable-violation? . y4ac3) (message-condition? . y4a0d) (make-who-condition . y4aa8) (make-warning . y4a22) (make-violation . y4a61) (make-undefined-violation . y4b21) (make-syntax-violation . y4b04) (make-serious-condition . y4a37) (make-non-continuable-violation . y4ac1) (make-message-condition . y4a09) (make-lexical-violation . y4aeb) (make-irritants-condition . y4a8d) (make-implementation-restriction-violation . y4ad6) (make-error . y4a4c) (make-assertion-violation . y4a76) (lexical-violation? . y4aed) (irritants-condition? . y4a91) (implementation-restriction-violation? . y4ad8) (error? . y4a4e) (condition-who . y4aae) (condition-predicate . y501a) (condition-message . y4a0f) (condition-irritants . y4a93) (condition-accessor . y5019) (condition . y5018) (assertion-violation? . y4a78) (condition? . y5017) (utf32->string . y5016) (utf16->string . y5015) (utf8->string . y5014) (uint-list->bytevector . y5013) (u8-list->bytevector . y5012) (string->utf8 . y5011) (string->utf32 . y5010) (string->utf16 . y500f) (sint-list->bytevector . y500e) (native-endianness . y500d) (bytevector? . y500c) (bytevector=? . y500b) (bytevector-uint-set! . y500a) (bytevector-uint-ref . y5009) (bytevector-u8-set! . y5008) (bytevector-u8-ref . y5007) (bytevector-u64-set! . y5006) (bytevector-u64-ref . y5005) (bytevector-u64-native-set! . y5004) (bytevector-u64-native-ref . y5003) (bytevector-u32-set! . y5002) (bytevector-u32-ref . y5001) (bytevector-u32-native-set! . y5000) (bytevector-u32-native-ref . y4fff) (bytevector-u16-set! . y4ffe) (bytevector-u16-ref . y4ffd) (bytevector-u16-native-set! . y4ffc) (bytevector-u16-native-ref . y4ffb) (bytevector-sint-set! . y4ffa) (bytevector-sint-ref . y4ff9) (bytevector-s8-set! . y4ff8) (bytevector-s8-ref . y4ff7) (bytevector-s64-set! . y4ff6) (bytevector-s64-ref . y4ff5) (bytevector-s64-native-set! . y4ff4) (bytevector-s64-native-ref . y4ff3) (bytevector-s32-set! . y4ff2) (bytevector-s32-ref . y4ff1) (bytevector-s32-native-set! . y4ff0) (bytevector-s32-native-ref . y4fef) (bytevector-s16-set! . y4fee) (bytevector-s16-ref . y4fed) (bytevector-s16-native-set! . y4fec) (bytevector-s16-native-ref . y4feb) (bytevector-length . y4fea) (bytevector-ieee-single-ref . y4fe9) (bytevector-ieee-single-set! . y4fe8) (bytevector-ieee-single-native-set! . y4fe7) (bytevector-ieee-single-native-ref . y4fe6) (bytevector-ieee-double-set! . y4fe5) (bytevector-ieee-double-ref . y4fe4) (bytevector-ieee-double-native-set! . y4fe3) (bytevector-ieee-double-native-ref . y4fe2) (bytevector-fill! . y4fe1) (bytevector-copy! . y4fe0) (bytevector-copy . y4fdf) (bytevector->uint-list . y4fde) (bytevector->u8-list . y4fdd) (bytevector->sint-list . y4fdc) (no-nans-violation? . y4c61) (no-infinities-violation? . y4c4c) (make-no-nans-violation . y4c5f) (make-no-infinities-violation . y4c4a) (real->flonum . y4fdb) (flzero? . y4fda) (fltruncate . y4fd9) (fltan . y4fd8) (flsqrt . y4fd7) (flsin . y4fd6) (flround . y4fd5) (flpositive? . y4fd4) (flonum? . y4fd3) (flodd? . y4fd2) (flnumerator . y4fd1) (flnegative? . y4fd0) (flnan? . y4fcf) (flmod0 . y4fce) (flmod . y4fcd) (flmin . y4fcc) (flmax . y4fcb) (fllog . y4fca) (flinteger? . y4fc9) (flinfinite? . y4fc8) (flfloor . y4fc7) (flfinite? . y4fc6) (flexpt . y4fc5) (flexp . y4fc4) (fleven? . y4fc3) (fldiv0-and-mod0 . y4fc2) (fldiv0 . y4fc1) (fldiv-and-mod . y4fc0) (fldiv . y4fbf) (fldenominator . y4fbe) (flcos . y4fbd) (flceiling . y4fbc) (flatan . y4fbb) (flasin . y4fba) (flacos . y4fb9) (flabs . y4fb8) (fl>? . y4fb7) (fl>=? . y4fb6) (fl=? . y4fb5) (fl<? . y4fb4) (fl<=? . y4fb3) (fl/ . y4fb2) (fl- . y4fb1) (fl+ . y4fb0) (fl* . y4faf) (fixnum->flonum . y4fae) (fxzero? . y4fad) (fxxor . y4fac) (fxrotate-bit-field . y4fab) (fxreverse-bit-field . y4faa) (fxpositive? . y4fa9) (fxodd? . y4fa8) (fxnot . y4fa7) (fxnegative? . y4fa6) (fxmod0 . y4fa5) (fxmod . y4fa4) (fxmin . y4fa3) (fxmax . y4fa2) (fxlength . y4fa1) (fxior . y4fa0) (fxif . y4f9f) (fxfirst-bit-set . y4f9e) (fxeven? . y4f9d) (fxdiv0-and-mod0 . y4f9c) (fxdiv0 . y4f9b) (fxdiv-and-mod . y4f9a) (fxdiv . y4f99) (fxcopy-bit-field . y4f98) (fxcopy-bit . y4f97) (fxbit-set? . y4f96) (fxbit-field . y4f95) (fxbit-count . y4f94) (fxarithmetic-shift-right . y4f93) (fxarithmetic-shift-left . y4f92) (fxarithmetic-shift . y4f91) (fxand . y4f90) (fx>? . y4f8f) (fx>=? . y4f8e) (fx=? . y4f8d) (fx<? . y4f8c) (fx<=? . y4f8b) (fx-/carry . y4f8a) (fx- . y4f89) (fx+/carry . y4f88) (fx+ . y4f87) (fx*/carry . y4f86) (fx* . y4f85) (greatest-fixnum . y4f84) (least-fixnum . y4f83) (fixnum-width . y4f82) (fixnum? . y4f81) (bitwise-rotate-bit-field . y4f80) (bitwise-reverse-bit-field . y4f7f) (bitwise-length . y4f7e) (bitwise-if . y4f7d) (bitwise-first-bit-set . y4f7c) (bitwise-copy-bit-field . y4f7b) (bitwise-copy-bit . y4f7a) (bitwise-bit-set? . y4f79) (bitwise-bit-field . y4f78) (bitwise-bit-count . y4f77) (bitwise-xor . y4f76) (bitwise-ior . y4f75) (bitwise-and . y4f74) (bitwise-not . y4f73) (bitwise-arithmetic-shift-right . y4f72) (bitwise-arithmetic-shift-left . y4f71) (bitwise-arithmetic-shift . y4f70) (zero? . y4f6f) (vector? . y4f6e) (vector-set! . y4f6d) (vector-ref . y4f6c) (vector-map . y4f6b) (vector-length . y4f6a) (vector-for-each . y4f69) (vector-fill! . y4f68) (vector->list . y4f67) (vector . y4f66) (values . y4f65) (truncate . y4f64) (tan . y4f63) (symbol? . y4f62) (symbol=? . y4f61) (symbol->string . y4f60) (substring . y4f5f) (string? . y4f5e) (string>? . y4f5d) (string>=? . y4f5c) (string=? . y4f5b) (string<? . y4f5a) (string<=? . y4f59) (string-ref . y4f58) (string-length . y4f57) (string-for-each . y4f56) (string-copy . y4f55) (string-append . y4f54) (string->symbol . y4f53) (string->number . y4f52) (string->list . y4f51) (string . y4f50) (sqrt . y4f4f) (sin . y4f4e) (round . y4f4d) (reverse . y4f4c) (real? . y4f4b) (real-valued? . y4f4a) (real-part . y4f49) (rationalize . y4f48) (rational? . y4f47) (rational-valued? . y4f46) (procedure? . y4f45) (positive? . y4f44) (pair? . y4f43) (odd? . y4f42) (numerator . y4f41) (number? . y4f40) (number->string . y4f3f) (null? . y4f3e) (not . y4f3d) (negative? . y4f3c) (nan? . y4f3b) (min . y4f3a) (max . y4f39) (map . y4f38) (make-vector . y4f37) (make-string . y4f36) (make-rectangular . y4f35) (make-polar . y4f34) (magnitude . y4f33) (log . y4f32) (list? . y4f31) (list-tail . y4f30) (list-ref . y4f2f) (list->vector . y4f2e) (list->string . y4f2d) (list . y4f2c) (length . y4f2b) (lcm . y4f2a) (integer? . y4f29) (integer-valued? . y4f28) (integer->char . y4f27) (infinite? . y4f26) (inexact? . y4f25) (inexact . y4f24) (imag-part . y4f23) (gcd . y4f22) (for-each . y4f21) (floor . y4f20) (finite? . y4f1f) (expt . y4f1e) (exp . y4f1d) (exact? . y4f1c) (exact-integer-sqrt . y4f1b) (exact . y4f1a) (even? . y4f19) (error . y4f18) (eqv? . y4f17) (equal? . y4f16) (eq? . y4f15) (dynamic-wind . y4f14) (div0-and-mod0 . y4f13) (mod0 . y4f12) (div0 . y4f11) (div-and-mod . y4f10) (mod . y4f0f) (div . y4f0e) (denominator . y4f0d) (cos . y4f0c) (cons . y4f0b) (complex? . y4f0a) (char? . y4f09) (char>? . y4f08) (char>=? . y4f07) (char=? . y4f06) (char<? . y4f05) (char<=? . y4f04) (char->integer . y4f03) (ceiling . y4f02) (call-with-values . y4f01) (call/cc . y4f00) (call-with-current-continuation . y4eff) (cddddr . y4efe) (cdddar . y4efd) (cddadr . y4efc) (cddaar . y4efb) (cdaddr . y4efa) (cdadar . y4ef9) (cdaadr . y4ef8) (cdaaar . y4ef7) (cadddr . y4ef6) (caddar . y4ef5) (cadadr . y4ef4) (cadaar . y4ef3) (caaddr . y4ef2) (caadar . y4ef1) (caaadr . y4ef0) (caaaar . y4eef) (cdddr . y4eee) (cddar . y4eed) (cdadr . y4eec) (cdaar . y4eeb) (caddr . y4eea) (cadar . y4ee9) (caadr . y4ee8) (caaar . y4ee7) (cddr . y4ee6) (cdar . y4ee5) (cadr . y4ee4) (caar . y4ee3) (cdr . y4ee2) (car . y4ee1) (boolean? . y4ee0) (boolean=? . y4edf) (atan . y4ede) (assertion-violation . y4edd) (asin . y4edc) (apply . y4edb) (append . y4eda) (angle . y4ed9) (acos . y4ed8) (abs . y4ed7) (/ . y4ed6) (* . y4ed5) (- . y4ed4) (+ . y4ed3) (>= . y4ed2) (> . y4ed1) (= . y4ed0) (<= . y4ecf) (< . y4ece) (&no-nans . y4ecc) (&no-infinities . y4ecb) (&i/o-encoding . y4eca) (&i/o-decoding . y4ec9) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf) (&undefined . y4ebe) (&syntax . y4ebd) (&lexical . y4ebc) (&implementation-restriction . y4ebb) (&non-continuable . y4eba) (&who . y4eb9) (&irritants . y4eb8) (&assertion . y4eb7) (&violation . y4eb6) (&error . y4eb5) (&serious . y4eb4) (&warning . y4eb3) (&message . y4eb2) (&condition . y4eb1) (define-condition-type . y4eb0) (define-enumeration . y4eaf) (define-record-type . y4eae) (parent-rtd . y4ead) (nongenerative . y4eac) (opaque . y4eab) (sealed . y4eaa) (protocol . y4ea9) (parent . y4ea8) (immutable . y4ea7) (mutable . y4ea6) (fields . y4ea5) (error-handling-mode . y4ea4) (file-options . y4ea3) (buffer-mode . y4ea2) (eol-style . y4ea1) (guard . y4ea0) (unsyntax-splicing . y4e9d) (unsyntax . y4e9c) (unquote-splicing . y4e9b) (unquote . y4e9a) (_ . y4e99) (else . y4e98) (=> . y4e97) (... . y4e96) (assert . y4e95) (endianness . y4e94) (do . y4e91) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (let*-values . y4e8d) (let-values . y4e8c) (identifier-syntax . y4e8b) (with-syntax . y4e8a) (quasisyntax . y4e89) (quasiquote . y4e88) (syntax-rules . y4e87) (record-constructor-descriptor . y4e84) (record-type-descriptor . y4e83) (case . y4e82) (unless . y4e80) (when . y4e7f) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec* . y4e7b) (letrec . y4e7a) (case-lambda . y4e78) (lambda . y4e77) (syntax . y4e76) (syntax-case . y4e75) (quote . y4e74) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (begin . y4e6e) (define-syntax . y4e6c) (define . y4e6b)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5140 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . y2f7a) (quotient . y5051) (null-environment . y2f78) (remainder . y5050) (modulo . y504f) (inexact->exact . y504e) (force . y504d) (exact->inexact . y504c) (make-promise . y504b) (delay . y4e93)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5141 '(rnrs control) '(6) '() '() '() '((do . y4e91) (unless . y4e80) (when . y4e7f) (case-lambda . y4e78)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5142 '(rnrs eval) '(6) '() '() '() '((eval . y2f7e) (environment . y2f76)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5143 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . y5047) (set-car! . y5046)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5144 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . y5049) (string-set! . y5048)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5145 '(rnrs programs) '(6) '() '() '() '((exit . y504a) (command-line . y4d6c)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5146 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . y2ce2) (identifier? . y2fa0) (generate-temporaries . y2f8c) (free-identifier=? . y2f8e) (syntax->datum . y2fa4) (datum->syntax . y2fa2) (bound-identifier=? . y2f90) (syntax-violation . y2f9e) (unsyntax-splicing . y4e9d) (unsyntax . y4e9c) (_ . y4e99) (... . y4e96) (with-syntax . y4e8a) (quasisyntax . y4e89) (syntax . y4e76) (syntax-case . y4e75)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5147 '(rnrs files) '(6) '() '() '() '((delete-file . y50ba) (file-exists? . y50b9) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5148 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . y50b8) (vector-sort . y50b7) (list-sort . y50b6)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5149 '(rnrs base) '(6) '() '() '() '((zero? . y4f6f) (vector? . y4f6e) (vector-set! . y4f6d) (vector-ref . y4f6c) (vector-map . y4f6b) (vector-length . y4f6a) (vector-for-each . y4f69) (vector-fill! . y4f68) (vector->list . y4f67) (vector . y4f66) (values . y4f65) (truncate . y4f64) (tan . y4f63) (symbol? . y4f62) (symbol=? . y4f61) (symbol->string . y4f60) (substring . y4f5f) (string? . y4f5e) (string>? . y4f5d) (string>=? . y4f5c) (string=? . y4f5b) (string<? . y4f5a) (string<=? . y4f59) (string-ref . y4f58) (string-length . y4f57) (string-for-each . y4f56) (string-copy . y4f55) (string-append . y4f54) (string->symbol . y4f53) (string->number . y4f52) (string->list . y4f51) (string . y4f50) (sqrt . y4f4f) (sin . y4f4e) (round . y4f4d) (reverse . y4f4c) (real? . y4f4b) (real-valued? . y4f4a) (real-part . y4f49) (rationalize . y4f48) (rational? . y4f47) (rational-valued? . y4f46) (procedure? . y4f45) (positive? . y4f44) (pair? . y4f43) (odd? . y4f42) (numerator . y4f41) (number? . y4f40) (number->string . y4f3f) (null? . y4f3e) (not . y4f3d) (negative? . y4f3c) (nan? . y4f3b) (min . y4f3a) (max . y4f39) (map . y4f38) (make-vector . y4f37) (make-string . y4f36) (make-rectangular . y4f35) (make-polar . y4f34) (magnitude . y4f33) (log . y4f32) (list? . y4f31) (list-tail . y4f30) (list-ref . y4f2f) (list->vector . y4f2e) (list->string . y4f2d) (list . y4f2c) (length . y4f2b) (lcm . y4f2a) (integer? . y4f29) (integer-valued? . y4f28) (integer->char . y4f27) (infinite? . y4f26) (inexact? . y4f25) (inexact . y4f24) (imag-part . y4f23) (gcd . y4f22) (for-each . y4f21) (floor . y4f20) (finite? . y4f1f) (expt . y4f1e) (exp . y4f1d) (exact? . y4f1c) (exact-integer-sqrt . y4f1b) (exact . y4f1a) (even? . y4f19) (error . y4f18) (eqv? . y4f17) (equal? . y4f16) (eq? . y4f15) (dynamic-wind . y4f14) (div0-and-mod0 . y4f13) (mod0 . y4f12) (div0 . y4f11) (div-and-mod . y4f10) (mod . y4f0f) (div . y4f0e) (denominator . y4f0d) (cos . y4f0c) (cons . y4f0b) (complex? . y4f0a) (char? . y4f09) (char>? . y4f08) (char>=? . y4f07) (char=? . y4f06) (char<? . y4f05) (char<=? . y4f04) (char->integer . y4f03) (ceiling . y4f02) (call-with-values . y4f01) (call/cc . y4f00) (call-with-current-continuation . y4eff) (cddddr . y4efe) (cdddar . y4efd) (cddadr . y4efc) (cddaar . y4efb) (cdaddr . y4efa) (cdadar . y4ef9) (cdaadr . y4ef8) (cdaaar . y4ef7) (cadddr . y4ef6) (caddar . y4ef5) (cadadr . y4ef4) (cadaar . y4ef3) (caaddr . y4ef2) (caadar . y4ef1) (caaadr . y4ef0) (caaaar . y4eef) (cdddr . y4eee) (cddar . y4eed) (cdadr . y4eec) (cdaar . y4eeb) (caddr . y4eea) (cadar . y4ee9) (caadr . y4ee8) (caaar . y4ee7) (cddr . y4ee6) (cdar . y4ee5) (cadr . y4ee4) (caar . y4ee3) (cdr . y4ee2) (car . y4ee1) (boolean? . y4ee0) (boolean=? . y4edf) (atan . y4ede) (assertion-violation . y4edd) (asin . y4edc) (apply . y4edb) (append . y4eda) (angle . y4ed9) (acos . y4ed8) (abs . y4ed7) (/ . y4ed6) (* . y4ed5) (- . y4ed4) (+ . y4ed3) (>= . y4ed2) (> . y4ed1) (= . y4ed0) (<= . y4ecf) (< . y4ece) (unquote-splicing . y4e9b) (unquote . y4e9a) (_ . y4e99) (else . y4e98) (=> . y4e97) (... . y4e96) (assert . y4e95) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (let*-values . y4e8d) (let-values . y4e8c) (identifier-syntax . y4e8b) (quasiquote . y4e88) (syntax-rules . y4e87) (case . y4e82) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec* . y4e7b) (letrec . y4e7a) (lambda . y4e77) (quote . y4e74) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (begin . y4e6e) (define-syntax . y4e6c) (define . y4e6b)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514a '(rnrs lists) '(6) '() '() '() '((remove . y5045) (remv . y5044) (remp . y5043) (remq . y5042) (partition . y5041) (memv . y5040) (memq . y503f) (memp . y503e) (member . y503d) (exists . y503c) (for-all . y503b) (fold-right . y503a) (fold-left . y5039) (find . y5038) (filter . y5037) (cons* . y5036) (assv . y5035) (assq . y5034) (assp . y5033) (assoc . y5032)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . y50a0) (call-with-input-file . y509f) (write-char . y509e) (write . y509d) (with-output-to-file . y509c) (with-input-from-file . y509b) (read-char . y509a) (read . y5099) (peek-char . y5098) (open-output-file . y5097) (open-input-file . y5096) (newline . y5095) (display . y5094) (close-output-port . y5093) (close-input-port . y5092) (eof-object? . y5091) (eof-object . y5090) (current-error-port . y508f) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . y5061) (utf32->string . y5016) (utf16->string . y5015) (utf8->string . y5014) (uint-list->bytevector . y5013) (u8-list->bytevector . y5012) (string->utf8 . y5011) (string->utf32 . y5010) (string->utf16 . y500f) (sint-list->bytevector . y500e) (native-endianness . y500d) (bytevector? . y500c) (bytevector=? . y500b) (bytevector-uint-set! . y500a) (bytevector-uint-ref . y5009) (bytevector-u8-set! . y5008) (bytevector-u8-ref . y5007) (bytevector-u64-set! . y5006) (bytevector-u64-ref . y5005) (bytevector-u64-native-set! . y5004) (bytevector-u64-native-ref . y5003) (bytevector-u32-set! . y5002) (bytevector-u32-ref . y5001) (bytevector-u32-native-set! . y5000) (bytevector-u32-native-ref . y4fff) (bytevector-u16-set! . y4ffe) (bytevector-u16-ref . y4ffd) (bytevector-u16-native-set! . y4ffc) (bytevector-u16-native-ref . y4ffb) (bytevector-sint-set! . y4ffa) (bytevector-sint-ref . y4ff9) (bytevector-s8-set! . y4ff8) (bytevector-s8-ref . y4ff7) (bytevector-s64-set! . y4ff6) (bytevector-s64-ref . y4ff5) (bytevector-s64-native-set! . y4ff4) (bytevector-s64-native-ref . y4ff3) (bytevector-s32-set! . y4ff2) (bytevector-s32-ref . y4ff1) (bytevector-s32-native-set! . y4ff0) (bytevector-s32-native-ref . y4fef) (bytevector-s16-set! . y4fee) (bytevector-s16-ref . y4fed) (bytevector-s16-native-set! . y4fec) (bytevector-s16-native-ref . y4feb) (bytevector-length . y4fea) (bytevector-ieee-single-ref . y4fe9) (bytevector-ieee-single-set! . y4fe8) (bytevector-ieee-single-native-set! . y4fe7) (bytevector-ieee-single-native-ref . y4fe6) (bytevector-ieee-double-set! . y4fe5) (bytevector-ieee-double-ref . y4fe4) (bytevector-ieee-double-native-set! . y4fe3) (bytevector-ieee-double-native-ref . y4fe2) (bytevector-fill! . y4fe1) (bytevector-copy! . y4fe0) (bytevector-copy . y4fdf) (bytevector->uint-list . y4fde) (bytevector->u8-list . y4fdd) (bytevector->sint-list . y4fdc) (endianness . y4e94)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514d '(rnrs unicode) '(6) '() '() '() '((string-upcase . y50e8) (string-titlecase . y50e7) (string-normalize-nfkd . y50e6) (string-normalize-nfkc . y50e5) (string-normalize-nfd . y50e4) (string-normalize-nfc . y50e3) (string-foldcase . y50e2) (string-downcase . y50e1) (string-ci>? . y50e0) (string-ci>=? . y50df) (string-ci=? . y50de) (string-ci<? . y50dd) (string-ci<=? . y50dc) (char-whitespace? . y50db) (char-upper-case? . y50da) (char-title-case? . y50d9) (char-numeric? . y50d8) (char-lower-case? . y50d7) (char-general-category . y50d6) (char-upcase . y50d5) (char-titlecase . y50d4) (char-foldcase . y50d3) (char-downcase . y50d2) (char-ci>? . y50d1) (char-ci>=? . y50d0) (char-ci=? . y50cf) (char-ci<? . y50ce) (char-ci<=? . y50cd) (char-alphabetic? . y50cc)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . y502b) (raise-continuable . y502a) (raise . y5029) (guard . y4ea0) (else . y4e98) (=> . y4e97)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y514f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . y4f80) (bitwise-reverse-bit-field . y4f7f) (bitwise-length . y4f7e) (bitwise-if . y4f7d) (bitwise-first-bit-set . y4f7c) (bitwise-copy-bit-field . y4f7b) (bitwise-copy-bit . y4f7a) (bitwise-bit-set? . y4f79) (bitwise-bit-field . y4f78) (bitwise-bit-count . y4f77) (bitwise-xor . y4f76) (bitwise-ior . y4f75) (bitwise-and . y4f74) (bitwise-not . y4f73) (bitwise-arithmetic-shift-right . y4f72) (bitwise-arithmetic-shift-left . y4f71) (bitwise-arithmetic-shift . y4f70)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5150 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . y4fad) (fxxor . y4fac) (fxrotate-bit-field . y4fab) (fxreverse-bit-field . y4faa) (fxpositive? . y4fa9) (fxodd? . y4fa8) (fxnot . y4fa7) (fxnegative? . y4fa6) (fxmod0 . y4fa5) (fxmod . y4fa4) (fxmin . y4fa3) (fxmax . y4fa2) (fxlength . y4fa1) (fxior . y4fa0) (fxif . y4f9f) (fxfirst-bit-set . y4f9e) (fxeven? . y4f9d) (fxdiv0-and-mod0 . y4f9c) (fxdiv0 . y4f9b) (fxdiv-and-mod . y4f9a) (fxdiv . y4f99) (fxcopy-bit-field . y4f98) (fxcopy-bit . y4f97) (fxbit-set? . y4f96) (fxbit-field . y4f95) (fxbit-count . y4f94) (fxarithmetic-shift-right . y4f93) (fxarithmetic-shift-left . y4f92) (fxarithmetic-shift . y4f91) (fxand . y4f90) (fx>? . y4f8f) (fx>=? . y4f8e) (fx=? . y4f8d) (fx<? . y4f8c) (fx<=? . y4f8b) (fx-/carry . y4f8a) (fx- . y4f89) (fx+/carry . y4f88) (fx+ . y4f87) (fx*/carry . y4f86) (fx* . y4f85) (greatest-fixnum . y4f84) (least-fixnum . y4f83) (fixnum-width . y4f82) (fixnum? . y4f81)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5151 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . y4c61) (no-infinities-violation? . y4c4c) (make-no-nans-violation . y4c5f) (make-no-infinities-violation . y4c4a) (real->flonum . y4fdb) (flzero? . y4fda) (fltruncate . y4fd9) (fltan . y4fd8) (flsqrt . y4fd7) (flsin . y4fd6) (flround . y4fd5) (flpositive? . y4fd4) (flonum? . y4fd3) (flodd? . y4fd2) (flnumerator . y4fd1) (flnegative? . y4fd0) (flnan? . y4fcf) (flmod0 . y4fce) (flmod . y4fcd) (flmin . y4fcc) (flmax . y4fcb) (fllog . y4fca) (flinteger? . y4fc9) (flinfinite? . y4fc8) (flfloor . y4fc7) (flfinite? . y4fc6) (flexpt . y4fc5) (flexp . y4fc4) (fleven? . y4fc3) (fldiv0-and-mod0 . y4fc2) (fldiv0 . y4fc1) (fldiv-and-mod . y4fc0) (fldiv . y4fbf) (fldenominator . y4fbe) (flcos . y4fbd) (flceiling . y4fbc) (flatan . y4fbb) (flasin . y4fba) (flacos . y4fb9) (flabs . y4fb8) (fl>? . y4fb7) (fl>=? . y4fb6) (fl=? . y4fb5) (fl<? . y4fb4) (fl<=? . y4fb3) (fl/ . y4fb2) (fl- . y4fb1) (fl+ . y4fb0) (fl* . y4faf) (fixnum->flonum . y4fae) (&no-nans . y4ecc) (&no-infinities . y4ecb)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5152 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . y50b5) (string-ci-hash . y50b4) (string-hash . y50b3) (equal-hash . y50b2) (hashtable-equivalence-function . y50b1) (make-hashtable . y50b0) (hashtable-hash-function . y50af) (make-eqv-hashtable . y50ae) (make-eq-hashtable . y50ad) (hashtable? . y50ac) (hashtable-update! . y50ab) (hashtable-size . y50aa) (hashtable-set! . y50a9) (hashtable-ref . y50a8) (hashtable-mutable? . y50a7) (hashtable-keys . y50a6) (hashtable-entries . y50a5) (hashtable-delete! . y50a4) (hashtable-copy . y50a3) (hashtable-contains? . y50a2) (hashtable-clear! . y50a1)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5153 '(rnrs io ports) '(6) '() '() '() '((eof-object? . y5091) (eof-object . y5090) (current-error-port . y508f) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (utf-8-codec . y508a) (utf-16-codec . y5089) (transcoder-error-handling-mode . y5088) (transcoder-eol-style . y5087) (transcoder-codec . y5086) (transcoded-port . y5085) (textual-port? . y5084) (string->bytevector . y5083) (standard-output-port . y5082) (standard-input-port . y5081) (standard-error-port . y5080) (set-port-position! . y507f) (put-u8 . y507e) (put-string . y507d) (put-datum . y507c) (put-char . y507b) (put-bytevector . y507a) (port? . y5079) (port-transcoder . y5078) (port-position . y5077) (port-has-set-port-position!? . y5076) (port-has-port-position? . y5075) (port-eof? . y5074) (output-port-buffer-mode . y5073) (open-string-output-port . y5072) (open-string-input-port . y5071) (open-file-output-port . y5070) (open-file-input/output-port . y506f) (open-file-input-port . y506e) (open-bytevector-output-port . y506d) (open-bytevector-input-port . y506c) (native-transcoder . y506b) (native-eol-style . y506a) (make-transcoder . y5069) (latin-1-codec . y5068) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (make-i/o-encoding-error . y4c31) (make-i/o-decoding-error . y4c1a) (make-custom-textual-output-port . y5067) (make-custom-textual-input/output-port . y5066) (make-custom-textual-input-port . y5065) (make-custom-binary-output-port . y5064) (make-custom-binary-input/output-port . y5063) (make-custom-binary-input-port . y5062) (lookahead-u8 . y5060) (lookahead-char . y505f) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (i/o-encoding-error? . y4c35) (i/o-encoding-error-char . y4c37) (i/o-decoding-error? . y4c1c) (get-u8 . y505e) (get-string-n! . y505d) (get-string-n . y505c) (get-string-all . y505b) (get-line . y505a) (get-datum . y5059) (get-char . y5058) (get-bytevector-some . y5057) (get-bytevector-n! . y5056) (get-bytevector-n . y5055) (get-bytevector-all . y5054) (flush-output-port . y5053) (close-port . y5052) (call-with-string-output-port . y5031) (call-with-port . y5030) (call-with-bytevector-output-port . y502f) (bytevector->string . y502e) (buffer-mode? . y502d) (binary-port? . y502c) (&i/o-encoding . y4eca) (&i/o-decoding . y4ec9) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf) (error-handling-mode . y4ea4) (file-options . y4ea3) (buffer-mode . y4ea2) (eol-style . y4ea1)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5154 '(rnrs enums) '(6) '() '() '() '((make-enumeration . y5028) (enum-set=? . y5027) (enum-set-universe . y5026) (enum-set-union . y5025) (enum-set-subset? . y5024) (enum-set-projection . y5023) (enum-set-member? . y5022) (enum-set-intersection . y5021) (enum-set-indexer . y5020) (enum-set-difference . y501f) (enum-set-constructor . y501e) (enum-set-complement . y501d) (enum-set->list . y501c) (define-enumeration . y4eaf)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5155 '(rnrs conditions) '(6) '() '() '() '((who-condition? . y4aac) (warning? . y4a24) (violation? . y4a63) (undefined-violation? . y4b23) (syntax-violation? . y4b0a) (syntax-violation-subform . y4b0e) (syntax-violation-form . y4b0c) (syntax-violation . y2f9e) (simple-conditions . y501b) (serious-condition? . y4a39) (non-continuable-violation? . y4ac3) (message-condition? . y4a0d) (make-who-condition . y4aa8) (make-warning . y4a22) (make-violation . y4a61) (make-undefined-violation . y4b21) (make-syntax-violation . y4b04) (make-serious-condition . y4a37) (make-non-continuable-violation . y4ac1) (make-message-condition . y4a09) (make-lexical-violation . y4aeb) (make-irritants-condition . y4a8d) (make-implementation-restriction-violation . y4ad6) (make-error . y4a4c) (make-assertion-violation . y4a76) (lexical-violation? . y4aed) (irritants-condition? . y4a91) (implementation-restriction-violation? . y4ad8) (error? . y4a4e) (condition-who . y4aae) (condition-predicate . y501a) (condition-message . y4a0f) (condition-irritants . y4a93) (condition-accessor . y5019) (condition . y5018) (assertion-violation? . y4a78) (condition? . y5017) (&undefined . y4ebe) (&syntax . y4ebd) (&lexical . y4ebc) (&implementation-restriction . y4ebb) (&non-continuable . y4eba) (&who . y4eb9) (&irritants . y4eb8) (&assertion . y4eb7) (&violation . y4eb6) (&error . y4eb5) (&serious . y4eb4) (&warning . y4eb3) (&message . y4eb2) (&condition . y4eb1) (define-condition-type . y4eb0)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5156 '(rnrs records inspection) '(6) '() '() '() '((record? . y50c4) (record-type-uid . y50c3) (record-type-sealed? . y50c2) (record-type-parent . y50c1) (record-type-opaque? . y50c0) (record-type-name . y50bf) (record-type-generative? . y50be) (record-type-field-names . y50bd) (record-rtd . y50bc) (record-field-mutable? . y50bb)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5157 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . y50cb) (record-predicate . y50ca) (record-mutator . y50c9) (record-constructor . y50c8) (record-accessor . y50c7) (make-record-type-descriptor . y50c6) (make-record-constructor-descriptor . y50c5)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5158 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . y4eae) (parent-rtd . y4ead) (nongenerative . y4eac) (opaque . y4eab) (sealed . y4eaa) (protocol . y4ea9) (parent . y4ea8) (immutable . y4ea7) (mutable . y4ea6) (fields . y4ea5) (record-constructor-descriptor . y4e84) (record-type-descriptor . y4e83)) '() values values '#f '#f '#t '#f) (y2acd@y296c@install-library 'y5159 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . y4c65) (&no-nans-rtd . y4c63) (&no-infinities-rcd . y4c50) (&no-infinities-rtd . y4c4e) (&i/o-encoding-rcd . y4c3b) (&i/o-encoding-rtd . y4c39) (&i/o-decoding-rcd . y4c20) (&i/o-decoding-rtd . y4c1e) (&i/o-port-rcd . y4c0b) (&i/o-port-rtd . y4c09) (&i/o-file-does-not-exist-rcd . y4bf0) (&i/o-file-does-not-exist-rtd . y4bee) (&i/o-file-already-exists-rcd . y4bdb) (&i/o-file-already-exists-rtd . y4bd9) (&i/o-file-is-read-only-rcd . y4bc6) (&i/o-file-is-read-only-rtd . y4bc4) (&i/o-file-protection-rcd . y4bb1) (&i/o-file-protection-rtd . y4baf) (&i/o-filename-rcd . y4b9c) (&i/o-filename-rtd . y4b9a) (&i/o-invalid-position-rcd . y4b81) (&i/o-invalid-position-rtd . y4b7f) (&i/o-write-rcd . y4b66) (&i/o-write-rtd . y4b64) (&i/o-read-rcd . y4b51) (&i/o-read-rtd . y4b4f) (&i/o-rcd . y4b3c) (&i/o-rtd . y4b3a) (&undefined-rcd . y4b27) (&undefined-rtd . y4b25) (&syntax-rcd . y4b12) (&syntax-rtd . y4b10) (&lexical-rcd . y4af1) (&lexical-rtd . y4aef) (&implementation-restriction-rcd . y4adc) (&implementation-restriction-rtd . y4ada) (&non-continuable-rcd . y4ac7) (&non-continuable-rtd . y4ac5) (&who-rcd . y4ab2) (&who-rtd . y4ab0) (&irritants-rcd . y4a97) (&irritants-rtd . y4a95) (&assertion-rcd . y4a7c) (&assertion-rtd . y4a7a) (&violation-rcd . y4a67) (&violation-rtd . y4a65) (&error-rcd . y4a52) (&error-rtd . y4a50) (&serious-rcd . y4a3d) (&serious-rtd . y4a3b) (&warning-rcd . y4a28) (&warning-rtd . y4a26) (&message-rcd . y4a13) (&message-rtd . y4a11) (&condition-rcd . y49b4) (&condition-rtd . y49b2) (syntax-error . y2f9a) (syntax-dispatch . y2eb5) (pretty-print . y5139) (eval-core . y5138) (set-symbol-value! . y5137) (symbol-value . y5136) (gensym . y5135) (void . y5134) (load . y4d72) (interaction-environment . y2faa) (char-ready? . y5133) (regexp? . y5132) (read-line . y5131) (ungensym . y5130) (alist->eq-hash-table . y512f) (assoc-ref . y512e) (print . y512d) (format . y512c) (host-os . y512b) (library-path . y294b) (standard-library-path . y512a) (file-newer? . y5129) (stat-mtime . y5128) (write-to-file . y5127) (file->list . y5126) (file->string . y5125) (digit->integer . y5124) (call-with-string-input-port . y5123) (call-with-string-io . y5122) (string-split . y5121) (bytevector-for-each . y5120) (string->regexp . y511f) (rxmatch . y511e) (regexp-replace-all . y511d) (hashtable-for-each . y511c) (call-process . y511b) (local-tz-offset . y511a) (microseconds . y5119) (readdir . y5118) (set-current-directory! . y5117) (expand-path . y5116) (current-directory . y5115) (%spawn . y5114) (%waitpid . y5113) (%ffi-supported? . y5112) (%ffi-pointer-ref . y5111) (%ffi-pointer->string . y5110) (%ffi-call->string-or-zero . y510f) (%ffi-call->double . y510e) (%ffi-call->void* . y510d) (%ffi-call->void . y510c) (%ffi-call->int . y510b) (%ffi-lookup . y510a) (%ffi-open . y5109) (%fork . y5108) (%pipe . y5107) (p . y5106) (open-output-string . y5105) (get-output-string . y5104) (get-environment-variables . y5103) (get-environment-variable . y5102) (get-timeofday . y5101) (get-command-line . y5100) (sys-display . y50ff) (mosh-executable-path . y50fe) (make-file-options . y50fd) (source-info . y50fc) (make-compiler-instruction . y50fb) (make-instruction . y50fa) (set-source-info! . y50f9) (bignum? . y50f8) (fast-equal? . y50f7) (fasl-read . y50f6) (fasl-write . y50f5) (time-usage . y50f4) (os-constant . y50f3) (make-parameter . y277e) (socket-port . y50f2) (socket-shutdown . y50f1) (socket-close . y50f0) (socket-send . y50ef) (socket-recv! . y50ee) (socket-recv . y50ed) (make-server-socket . y50ec) (make-client-socket . y50eb) (socket-accept . y50ea) (socket? . y50e9) (string-upcase . y50e8) (string-titlecase . y50e7) (string-normalize-nfkd . y50e6) (string-normalize-nfkc . y50e5) (string-normalize-nfd . y50e4) (string-normalize-nfc . y50e3) (string-foldcase . y50e2) (string-downcase . y50e1) (string-ci>? . y50e0) (string-ci>=? . y50df) (string-ci=? . y50de) (string-ci<? . y50dd) (string-ci<=? . y50dc) (char-whitespace? . y50db) (char-upper-case? . y50da) (char-title-case? . y50d9) (char-numeric? . y50d8) (char-lower-case? . y50d7) (char-general-category . y50d6) (char-upcase . y50d5) (char-titlecase . y50d4) (char-foldcase . y50d3) (char-downcase . y50d2) (char-ci>? . y50d1) (char-ci>=? . y50d0) (char-ci=? . y50cf) (char-ci<? . y50ce) (char-ci<=? . y50cd) (char-alphabetic? . y50cc) (make-variable-transformer . y2ce2) (identifier? . y2fa0) (generate-temporaries . y2f8c) (free-identifier=? . y2f8e) (syntax->datum . y2fa4) (datum->syntax . y2fa2) (bound-identifier=? . y2f90) (record-type-descriptor? . y50cb) (record-predicate . y50ca) (record-mutator . y50c9) (record-constructor . y50c8) (record-accessor . y50c7) (make-record-type-descriptor . y50c6) (make-record-constructor-descriptor . y50c5) (record? . y50c4) (record-type-uid . y50c3) (record-type-sealed? . y50c2) (record-type-parent . y50c1) (record-type-opaque? . y50c0) (record-type-name . y50bf) (record-type-generative? . y50be) (record-type-field-names . y50bd) (record-rtd . y50bc) (record-field-mutable? . y50bb) (delete-file . y50ba) (file-exists? . y50b9) (vector-sort! . y50b8) (vector-sort . y50b7) (list-sort . y50b6) (symbol-hash . y50b5) (string-ci-hash . y50b4) (string-hash . y50b3) (equal-hash . y50b2) (hashtable-equivalence-function . y50b1) (make-hashtable . y50b0) (hashtable-hash-function . y50af) (make-eqv-hashtable . y50ae) (make-eq-hashtable . y50ad) (hashtable? . y50ac) (hashtable-update! . y50ab) (hashtable-size . y50aa) (hashtable-set! . y50a9) (hashtable-ref . y50a8) (hashtable-mutable? . y50a7) (hashtable-keys . y50a6) (hashtable-entries . y50a5) (hashtable-delete! . y50a4) (hashtable-copy . y50a3) (hashtable-contains? . y50a2) (hashtable-clear! . y50a1) (call-with-output-file . y50a0) (call-with-input-file . y509f) (write-char . y509e) (write . y509d) (with-output-to-file . y509c) (with-input-from-file . y509b) (read-char . y509a) (read . y5099) (peek-char . y5098) (open-output-file . y5097) (open-input-file . y5096) (newline . y5095) (display . y5094) (close-output-port . y5093) (close-input-port . y5092) (eof-object? . y5091) (eof-object . y5090) (current-error-port . y508f) (current-output-port . y508e) (current-input-port . y508d) (output-port? . y508c) (input-port? . y508b) (utf-8-codec . y508a) (utf-16-codec . y5089) (transcoder-error-handling-mode . y5088) (transcoder-eol-style . y5087) (transcoder-codec . y5086) (transcoded-port . y5085) (textual-port? . y5084) (string->bytevector . y5083) (standard-output-port . y5082) (standard-input-port . y5081) (standard-error-port . y5080) (set-port-position! . y507f) (put-u8 . y507e) (put-string . y507d) (put-datum . y507c) (put-char . y507b) (put-bytevector . y507a) (port? . y5079) (port-transcoder . y5078) (port-position . y5077) (port-has-set-port-position!? . y5076) (port-has-port-position? . y5075) (port-eof? . y5074) (output-port-buffer-mode . y5073) (open-string-output-port . y5072) (open-string-input-port . y5071) (open-file-output-port . y5070) (open-file-input/output-port . y506f) (open-file-input-port . y506e) (open-bytevector-output-port . y506d) (open-bytevector-input-port . y506c) (native-transcoder . y506b) (native-eol-style . y506a) (make-transcoder . y5069) (latin-1-codec . y5068) (make-i/o-write-error . y4b60) (make-i/o-read-error . y4b4b) (make-i/o-port-error . y4c01) (make-i/o-invalid-position-error . y4b77) (make-i/o-filename-error . y4b92) (make-i/o-file-protection-error . y4bab) (make-i/o-file-is-read-only-error . y4bc0) (make-i/o-file-does-not-exist-error . y4bea) (make-i/o-file-already-exists-error . y4bd5) (make-i/o-error . y4b36) (make-i/o-encoding-error . y4c31) (make-i/o-decoding-error . y4c1a) (make-custom-textual-output-port . y5067) (make-custom-textual-input/output-port . y5066) (make-custom-textual-input-port . y5065) (make-custom-binary-output-port . y5064) (make-custom-binary-input/output-port . y5063) (make-custom-binary-input-port . y5062) (make-bytevector . y5061) (lookahead-u8 . y5060) (lookahead-char . y505f) (i/o-write-error? . y4b62) (i/o-read-error? . y4b4d) (i/o-port-error? . y4c05) (i/o-invalid-position-error? . y4b7b) (i/o-filename-error? . y4b96) (i/o-file-protection-error? . y4bad) (i/o-file-is-read-only-error? . y4bc2) (i/o-file-does-not-exist-error? . y4bec) (i/o-file-already-exists-error? . y4bd7) (i/o-error? . y4b38) (i/o-error-position . y4b7d) (i/o-error-port . y4c07) (i/o-error-filename . y4b98) (i/o-encoding-error? . y4c35) (i/o-encoding-error-char . y4c37) (i/o-decoding-error? . y4c1c) (get-u8 . y505e) (get-string-n! . y505d) (get-string-n . y505c) (get-string-all . y505b) (get-line . y505a) (get-datum . y5059) (get-char . y5058) (get-bytevector-some . y5057) (get-bytevector-n! . y5056) (get-bytevector-n . y5055) (get-bytevector-all . y5054) (flush-output-port . y5053) (close-port . y5052) (scheme-report-environment . y2f7a) (quotient . y5051) (null-environment . y2f78) (remainder . y5050) (modulo . y504f) (inexact->exact . y504e) (force . y504d) (exact->inexact . y504c) (make-promise . y504b) (exit . y504a) (command-line . y4d6c) (string-fill! . y5049) (string-set! . y5048) (set-cdr! . y5047) (set-car! . y5046) (remove . y5045) (remv . y5044) (remp . y5043) (remq . y5042) (partition . y5041) (memv . y5040) (memq . y503f) (memp . y503e) (member . y503d) (exists . y503c) (for-all . y503b) (fold-right . y503a) (fold-left . y5039) (find . y5038) (filter . y5037) (cons* . y5036) (assv . y5035) (assq . y5034) (assp . y5033) (assoc . y5032) (call-with-string-output-port . y5031) (call-with-port . y5030) (call-with-bytevector-output-port . y502f) (bytevector->string . y502e) (buffer-mode? . y502d) (binary-port? . y502c) (with-exception-handler . y502b) (raise-continuable . y502a) (raise . y5029) (eval . y2f7e) (environment . y2f76) (make-enumeration . y5028) (enum-set=? . y5027) (enum-set-universe . y5026) (enum-set-union . y5025) (enum-set-subset? . y5024) (enum-set-projection . y5023) (enum-set-member? . y5022) (enum-set-intersection . y5021) (enum-set-indexer . y5020) (enum-set-difference . y501f) (enum-set-constructor . y501e) (enum-set-complement . y501d) (enum-set->list . y501c) (who-condition? . y4aac) (warning? . y4a24) (violation? . y4a63) (undefined-violation? . y4b23) (syntax-violation? . y4b0a) (syntax-violation-subform . y4b0e) (syntax-violation-form . y4b0c) (syntax-violation . y2f9e) (simple-conditions . y501b) (serious-condition? . y4a39) (non-continuable-violation? . y4ac3) (message-condition? . y4a0d) (make-who-condition . y4aa8) (make-warning . y4a22) (make-violation . y4a61) (make-undefined-violation . y4b21) (make-syntax-violation . y4b04) (make-serious-condition . y4a37) (make-non-continuable-violation . y4ac1) (make-message-condition . y4a09) (make-lexical-violation . y4aeb) (make-irritants-condition . y4a8d) (make-implementation-restriction-violation . y4ad6) (make-error . y4a4c) (make-assertion-violation . y4a76) (lexical-violation? . y4aed) (irritants-condition? . y4a91) (implementation-restriction-violation? . y4ad8) (error? . y4a4e) (condition-who . y4aae) (condition-predicate . y501a) (condition-message . y4a0f) (condition-irritants . y4a93) (condition-accessor . y5019) (condition . y5018) (assertion-violation? . y4a78) (condition? . y5017) (utf32->string . y5016) (utf16->string . y5015) (utf8->string . y5014) (uint-list->bytevector . y5013) (u8-list->bytevector . y5012) (string->utf8 . y5011) (string->utf32 . y5010) (string->utf16 . y500f) (sint-list->bytevector . y500e) (native-endianness . y500d) (bytevector? . y500c) (bytevector=? . y500b) (bytevector-uint-set! . y500a) (bytevector-uint-ref . y5009) (bytevector-u8-set! . y5008) (bytevector-u8-ref . y5007) (bytevector-u64-set! . y5006) (bytevector-u64-ref . y5005) (bytevector-u64-native-set! . y5004) (bytevector-u64-native-ref . y5003) (bytevector-u32-set! . y5002) (bytevector-u32-ref . y5001) (bytevector-u32-native-set! . y5000) (bytevector-u32-native-ref . y4fff) (bytevector-u16-set! . y4ffe) (bytevector-u16-ref . y4ffd) (bytevector-u16-native-set! . y4ffc) (bytevector-u16-native-ref . y4ffb) (bytevector-sint-set! . y4ffa) (bytevector-sint-ref . y4ff9) (bytevector-s8-set! . y4ff8) (bytevector-s8-ref . y4ff7) (bytevector-s64-set! . y4ff6) (bytevector-s64-ref . y4ff5) (bytevector-s64-native-set! . y4ff4) (bytevector-s64-native-ref . y4ff3) (bytevector-s32-set! . y4ff2) (bytevector-s32-ref . y4ff1) (bytevector-s32-native-set! . y4ff0) (bytevector-s32-native-ref . y4fef) (bytevector-s16-set! . y4fee) (bytevector-s16-ref . y4fed) (bytevector-s16-native-set! . y4fec) (bytevector-s16-native-ref . y4feb) (bytevector-length . y4fea) (bytevector-ieee-single-ref . y4fe9) (bytevector-ieee-single-set! . y4fe8) (bytevector-ieee-single-native-set! . y4fe7) (bytevector-ieee-single-native-ref . y4fe6) (bytevector-ieee-double-set! . y4fe5) (bytevector-ieee-double-ref . y4fe4) (bytevector-ieee-double-native-set! . y4fe3) (bytevector-ieee-double-native-ref . y4fe2) (bytevector-fill! . y4fe1) (bytevector-copy! . y4fe0) (bytevector-copy . y4fdf) (bytevector->uint-list . y4fde) (bytevector->u8-list . y4fdd) (bytevector->sint-list . y4fdc) (no-nans-violation? . y4c61) (no-infinities-violation? . y4c4c) (make-no-nans-violation . y4c5f) (make-no-infinities-violation . y4c4a) (real->flonum . y4fdb) (flzero? . y4fda) (fltruncate . y4fd9) (fltan . y4fd8) (flsqrt . y4fd7) (flsin . y4fd6) (flround . y4fd5) (flpositive? . y4fd4) (flonum? . y4fd3) (flodd? . y4fd2) (flnumerator . y4fd1) (flnegative? . y4fd0) (flnan? . y4fcf) (flmod0 . y4fce) (flmod . y4fcd) (flmin . y4fcc) (flmax . y4fcb) (fllog . y4fca) (flinteger? . y4fc9) (flinfinite? . y4fc8) (flfloor . y4fc7) (flfinite? . y4fc6) (flexpt . y4fc5) (flexp . y4fc4) (fleven? . y4fc3) (fldiv0-and-mod0 . y4fc2) (fldiv0 . y4fc1) (fldiv-and-mod . y4fc0) (fldiv . y4fbf) (fldenominator . y4fbe) (flcos . y4fbd) (flceiling . y4fbc) (flatan . y4fbb) (flasin . y4fba) (flacos . y4fb9) (flabs . y4fb8) (fl>? . y4fb7) (fl>=? . y4fb6) (fl=? . y4fb5) (fl<? . y4fb4) (fl<=? . y4fb3) (fl/ . y4fb2) (fl- . y4fb1) (fl+ . y4fb0) (fl* . y4faf) (fixnum->flonum . y4fae) (fxzero? . y4fad) (fxxor . y4fac) (fxrotate-bit-field . y4fab) (fxreverse-bit-field . y4faa) (fxpositive? . y4fa9) (fxodd? . y4fa8) (fxnot . y4fa7) (fxnegative? . y4fa6) (fxmod0 . y4fa5) (fxmod . y4fa4) (fxmin . y4fa3) (fxmax . y4fa2) (fxlength . y4fa1) (fxior . y4fa0) (fxif . y4f9f) (fxfirst-bit-set . y4f9e) (fxeven? . y4f9d) (fxdiv0-and-mod0 . y4f9c) (fxdiv0 . y4f9b) (fxdiv-and-mod . y4f9a) (fxdiv . y4f99) (fxcopy-bit-field . y4f98) (fxcopy-bit . y4f97) (fxbit-set? . y4f96) (fxbit-field . y4f95) (fxbit-count . y4f94) (fxarithmetic-shift-right . y4f93) (fxarithmetic-shift-left . y4f92) (fxarithmetic-shift . y4f91) (fxand . y4f90) (fx>? . y4f8f) (fx>=? . y4f8e) (fx=? . y4f8d) (fx<? . y4f8c) (fx<=? . y4f8b) (fx-/carry . y4f8a) (fx- . y4f89) (fx+/carry . y4f88) (fx+ . y4f87) (fx*/carry . y4f86) (fx* . y4f85) (greatest-fixnum . y4f84) (least-fixnum . y4f83) (fixnum-width . y4f82) (fixnum? . y4f81) (bitwise-rotate-bit-field . y4f80) (bitwise-reverse-bit-field . y4f7f) (bitwise-length . y4f7e) (bitwise-if . y4f7d) (bitwise-first-bit-set . y4f7c) (bitwise-copy-bit-field . y4f7b) (bitwise-copy-bit . y4f7a) (bitwise-bit-set? . y4f79) (bitwise-bit-field . y4f78) (bitwise-bit-count . y4f77) (bitwise-xor . y4f76) (bitwise-ior . y4f75) (bitwise-and . y4f74) (bitwise-not . y4f73) (bitwise-arithmetic-shift-right . y4f72) (bitwise-arithmetic-shift-left . y4f71) (bitwise-arithmetic-shift . y4f70) (zero? . y4f6f) (vector? . y4f6e) (vector-set! . y4f6d) (vector-ref . y4f6c) (vector-map . y4f6b) (vector-length . y4f6a) (vector-for-each . y4f69) (vector-fill! . y4f68) (vector->list . y4f67) (vector . y4f66) (values . y4f65) (truncate . y4f64) (tan . y4f63) (symbol? . y4f62) (symbol=? . y4f61) (symbol->string . y4f60) (substring . y4f5f) (string? . y4f5e) (string>? . y4f5d) (string>=? . y4f5c) (string=? . y4f5b) (string<? . y4f5a) (string<=? . y4f59) (string-ref . y4f58) (string-length . y4f57) (string-for-each . y4f56) (string-copy . y4f55) (string-append . y4f54) (string->symbol . y4f53) (string->number . y4f52) (string->list . y4f51) (string . y4f50) (sqrt . y4f4f) (sin . y4f4e) (round . y4f4d) (reverse . y4f4c) (real? . y4f4b) (real-valued? . y4f4a) (real-part . y4f49) (rationalize . y4f48) (rational? . y4f47) (rational-valued? . y4f46) (procedure? . y4f45) (positive? . y4f44) (pair? . y4f43) (odd? . y4f42) (numerator . y4f41) (number? . y4f40) (number->string . y4f3f) (null? . y4f3e) (not . y4f3d) (negative? . y4f3c) (nan? . y4f3b) (min . y4f3a) (max . y4f39) (map . y4f38) (make-vector . y4f37) (make-string . y4f36) (make-rectangular . y4f35) (make-polar . y4f34) (magnitude . y4f33) (log . y4f32) (list? . y4f31) (list-tail . y4f30) (list-ref . y4f2f) (list->vector . y4f2e) (list->string . y4f2d) (list . y4f2c) (length . y4f2b) (lcm . y4f2a) (integer? . y4f29) (integer-valued? . y4f28) (integer->char . y4f27) (infinite? . y4f26) (inexact? . y4f25) (inexact . y4f24) (imag-part . y4f23) (gcd . y4f22) (for-each . y4f21) (floor . y4f20) (finite? . y4f1f) (expt . y4f1e) (exp . y4f1d) (exact? . y4f1c) (exact-integer-sqrt . y4f1b) (exact . y4f1a) (even? . y4f19) (error . y4f18) (eqv? . y4f17) (equal? . y4f16) (eq? . y4f15) (dynamic-wind . y4f14) (div0-and-mod0 . y4f13) (mod0 . y4f12) (div0 . y4f11) (div-and-mod . y4f10) (mod . y4f0f) (div . y4f0e) (denominator . y4f0d) (cos . y4f0c) (cons . y4f0b) (complex? . y4f0a) (char? . y4f09) (char>? . y4f08) (char>=? . y4f07) (char=? . y4f06) (char<? . y4f05) (char<=? . y4f04) (char->integer . y4f03) (ceiling . y4f02) (call-with-values . y4f01) (call/cc . y4f00) (call-with-current-continuation . y4eff) (cddddr . y4efe) (cdddar . y4efd) (cddadr . y4efc) (cddaar . y4efb) (cdaddr . y4efa) (cdadar . y4ef9) (cdaadr . y4ef8) (cdaaar . y4ef7) (cadddr . y4ef6) (caddar . y4ef5) (cadadr . y4ef4) (cadaar . y4ef3) (caaddr . y4ef2) (caadar . y4ef1) (caaadr . y4ef0) (caaaar . y4eef) (cdddr . y4eee) (cddar . y4eed) (cdadr . y4eec) (cdaar . y4eeb) (caddr . y4eea) (cadar . y4ee9) (caadr . y4ee8) (caaar . y4ee7) (cddr . y4ee6) (cdar . y4ee5) (cadr . y4ee4) (caar . y4ee3) (cdr . y4ee2) (car . y4ee1) (boolean? . y4ee0) (boolean=? . y4edf) (atan . y4ede) (assertion-violation . y4edd) (assertion-error . y2f98) (asin . y4edc) (apply . y4edb) (append . y4eda) (angle . y4ed9) (acos . y4ed8) (abs . y4ed7) (/ . y4ed6) (* . y4ed5) (- . y4ed4) (+ . y4ed3) (>= . y4ed2) (> . y4ed1) (= . y4ed0) (<= . y4ecf) (< . y4ece) (library . y4ecd) (&no-nans . y4ecc) (&no-infinities . y4ecb) (&i/o-encoding . y4eca) (&i/o-decoding . y4ec9) (&i/o-port . y4ec8) (&i/o-file-does-not-exist . y4ec7) (&i/o-file-already-exists . y4ec6) (&i/o-file-is-read-only . y4ec5) (&i/o-file-protection . y4ec4) (&i/o-filename . y4ec3) (&i/o-invalid-position . y4ec2) (&i/o-write . y4ec1) (&i/o-read . y4ec0) (&i/o . y4ebf) (&undefined . y4ebe) (&syntax . y4ebd) (&lexical . y4ebc) (&implementation-restriction . y4ebb) (&non-continuable . y4eba) (&who . y4eb9) (&irritants . y4eb8) (&assertion . y4eb7) (&violation . y4eb6) (&error . y4eb5) (&serious . y4eb4) (&warning . y4eb3) (&message . y4eb2) (&condition . y4eb1) (define-condition-type . y4eb0) (define-enumeration . y4eaf) (define-record-type . y4eae) (parent-rtd . y4ead) (nongenerative . y4eac) (opaque . y4eab) (sealed . y4eaa) (protocol . y4ea9) (parent . y4ea8) (immutable . y4ea7) (mutable . y4ea6) (fields . y4ea5) (error-handling-mode . y4ea4) (file-options . y4ea3) (buffer-mode . y4ea2) (eol-style . y4ea1) (guard . y4ea0) (trace-define . y4e9f) (trace-lambda . y4e9e) (unsyntax-splicing . y4e9d) (unsyntax . y4e9c) (unquote-splicing . y4e9b) (unquote . y4e9a) (_ . y4e99) (else . y4e98) (=> . y4e97) (... . y4e96) (assert . y4e95) (endianness . y4e94) (delay . y4e93) (time . y4e92) (do . y4e91) (cond . y4e90) (let* . y4e8f) (let . y4e8e) (let*-values . y4e8d) (let-values . y4e8c) (identifier-syntax . y4e8b) (with-syntax . y4e8a) (quasisyntax . y4e89) (quasiquote . y4e88) (syntax-rules . y4e87) (include . y4e86) (define-struct . y4e85) (record-constructor-descriptor . y4e84) (record-type-descriptor . y4e83) (case . y4e82) (parameterize . y4e81) (unless . y4e80) (when . y4e7f) (or . y4e7e) (and . y4e7d) (if . y4e7c) (letrec* . y4e7b) (letrec . y4e7a) (type-descriptor . y4e79) (case-lambda . y4e78) (lambda . y4e77) (syntax . y4e76) (syntax-case . y4e75) (quote . y4e74) (foreign-call . y4e73) (letrec-syntax . y4e72) (let-syntax . y4e71) (set! . y4e70) (import . y4e6f) (begin . y4e6e) (module . y4e6d) (define-syntax . y4e6c) (define . y4e6b)) '((y4c65 core-prim . &no-nans-rcd) (y4c63 core-prim . &no-nans-rtd) (y4c50 core-prim . &no-infinities-rcd) (y4c4e core-prim . &no-infinities-rtd) (y4c3b core-prim . &i/o-encoding-rcd) (y4c39 core-prim . &i/o-encoding-rtd) (y4c20 core-prim . &i/o-decoding-rcd) (y4c1e core-prim . &i/o-decoding-rtd) (y4c0b core-prim . &i/o-port-rcd) (y4c09 core-prim . &i/o-port-rtd) (y4bf0 core-prim . &i/o-file-does-not-exist-rcd) (y4bee core-prim . &i/o-file-does-not-exist-rtd) (y4bdb core-prim . &i/o-file-already-exists-rcd) (y4bd9 core-prim . &i/o-file-already-exists-rtd) (y4bc6 core-prim . &i/o-file-is-read-only-rcd) (y4bc4 core-prim . &i/o-file-is-read-only-rtd) (y4bb1 core-prim . &i/o-file-protection-rcd) (y4baf core-prim . &i/o-file-protection-rtd) (y4b9c core-prim . &i/o-filename-rcd) (y4b9a core-prim . &i/o-filename-rtd) (y4b81 core-prim . &i/o-invalid-position-rcd) (y4b7f core-prim . &i/o-invalid-position-rtd) (y4b66 core-prim . &i/o-write-rcd) (y4b64 core-prim . &i/o-write-rtd) (y4b51 core-prim . &i/o-read-rcd) (y4b4f core-prim . &i/o-read-rtd) (y4b3c core-prim . &i/o-rcd) (y4b3a core-prim . &i/o-rtd) (y4b27 core-prim . &undefined-rcd) (y4b25 core-prim . &undefined-rtd) (y4b12 core-prim . &syntax-rcd) (y4b10 core-prim . &syntax-rtd) (y4af1 core-prim . &lexical-rcd) (y4aef core-prim . &lexical-rtd) (y4adc core-prim . &implementation-restriction-rcd) (y4ada core-prim . &implementation-restriction-rtd) (y4ac7 core-prim . &non-continuable-rcd) (y4ac5 core-prim . &non-continuable-rtd) (y4ab2 core-prim . &who-rcd) (y4ab0 core-prim . &who-rtd) (y4a97 core-prim . &irritants-rcd) (y4a95 core-prim . &irritants-rtd) (y4a7c core-prim . &assertion-rcd) (y4a7a core-prim . &assertion-rtd) (y4a67 core-prim . &violation-rcd) (y4a65 core-prim . &violation-rtd) (y4a52 core-prim . &error-rcd) (y4a50 core-prim . &error-rtd) (y4a3d core-prim . &serious-rcd) (y4a3b core-prim . &serious-rtd) (y4a28 core-prim . &warning-rcd) (y4a26 core-prim . &warning-rtd) (y4a13 core-prim . &message-rcd) (y4a11 core-prim . &message-rtd) (y49b4 core-prim . &condition-rcd) (y49b2 core-prim . &condition-rtd) (y2f9a core-prim . syntax-error) (y2eb5 core-prim . syntax-dispatch) (y5139 core-prim . pretty-print) (y5138 core-prim . eval-core) (y5137 core-prim . set-symbol-value!) (y5136 core-prim . symbol-value) (y5135 core-prim . gensym) (y5134 core-prim . void) (y4d72 core-prim . load) (y2faa core-prim . interaction-environment) (y5133 core-prim . char-ready?) (y5132 core-prim . regexp?) (y5131 core-prim . read-line) (y5130 core-prim . ungensym) (y512f core-prim . alist->eq-hash-table) (y512e core-prim . assoc-ref) (y512d core-prim . print) (y512c core-prim . format) (y512b core-prim . host-os) (y294b core-prim . library-path) (y512a core-prim . standard-library-path) (y5129 core-prim . file-newer?) (y5128 core-prim . stat-mtime) (y5127 core-prim . write-to-file) (y5126 core-prim . file->list) (y5125 core-prim . file->string) (y5124 core-prim . digit->integer) (y5123 core-prim . call-with-string-input-port) (y5122 core-prim . call-with-string-io) (y5121 core-prim . string-split) (y5120 core-prim . bytevector-for-each) (y511f core-prim . string->regexp) (y511e core-prim . rxmatch) (y511d core-prim . regexp-replace-all) (y511c core-prim . hashtable-for-each) (y511b core-prim . call-process) (y511a core-prim . local-tz-offset) (y5119 core-prim . microseconds) (y5118 core-prim . readdir) (y5117 core-prim . set-current-directory!) (y5116 core-prim . expand-path) (y5115 core-prim . current-directory) (y5114 core-prim . %spawn) (y5113 core-prim . %waitpid) (y5112 core-prim . %ffi-supported?) (y5111 core-prim . %ffi-pointer-ref) (y5110 core-prim . %ffi-pointer->string) (y510f core-prim . %ffi-call->string-or-zero) (y510e core-prim . %ffi-call->double) (y510d core-prim . %ffi-call->void*) (y510c core-prim . %ffi-call->void) (y510b core-prim . %ffi-call->int) (y510a core-prim . %ffi-lookup) (y5109 core-prim . %ffi-open) (y5108 core-prim . %fork) (y5107 core-prim . %pipe) (y5106 core-prim . p) (y5105 core-prim . open-output-string) (y5104 core-prim . get-output-string) (y5103 core-prim . get-environment-variables) (y5102 core-prim . get-environment-variable) (y5101 core-prim . get-timeofday) (y5100 core-prim . get-command-line) (y50ff core-prim . sys-display) (y50fe core-prim . mosh-executable-path) (y50fd core-prim . make-file-options) (y50fc core-prim . source-info) (y50fb core-prim . make-compiler-instruction) (y50fa core-prim . make-instruction) (y50f9 core-prim . set-source-info!) (y50f8 core-prim . bignum?) (y50f7 core-prim . fast-equal?) (y50f6 core-prim . fasl-read) (y50f5 core-prim . fasl-write) (y50f4 core-prim . time-usage) (y50f3 core-prim . os-constant) (y277e core-prim . make-parameter) (y50f2 core-prim . socket-port) (y50f1 core-prim . socket-shutdown) (y50f0 core-prim . socket-close) (y50ef core-prim . socket-send) (y50ee core-prim . socket-recv!) (y50ed core-prim . socket-recv) (y50ec core-prim . make-server-socket) (y50eb core-prim . make-client-socket) (y50ea core-prim . socket-accept) (y50e9 core-prim . socket?) (y50e8 core-prim . string-upcase) (y50e7 core-prim . string-titlecase) (y50e6 core-prim . string-normalize-nfkd) (y50e5 core-prim . string-normalize-nfkc) (y50e4 core-prim . string-normalize-nfd) (y50e3 core-prim . string-normalize-nfc) (y50e2 core-prim . string-foldcase) (y50e1 core-prim . string-downcase) (y50e0 core-prim . string-ci>?) (y50df core-prim . string-ci>=?) (y50de core-prim . string-ci=?) (y50dd core-prim . string-ci<?) (y50dc core-prim . string-ci<=?) (y50db core-prim . char-whitespace?) (y50da core-prim . char-upper-case?) (y50d9 core-prim . char-title-case?) (y50d8 core-prim . char-numeric?) (y50d7 core-prim . char-lower-case?) (y50d6 core-prim . char-general-category) (y50d5 core-prim . char-upcase) (y50d4 core-prim . char-titlecase) (y50d3 core-prim . char-foldcase) (y50d2 core-prim . char-downcase) (y50d1 core-prim . char-ci>?) (y50d0 core-prim . char-ci>=?) (y50cf core-prim . char-ci=?) (y50ce core-prim . char-ci<?) (y50cd core-prim . char-ci<=?) (y50cc core-prim . char-alphabetic?) (y2ce2 core-prim . make-variable-transformer) (y2fa0 core-prim . identifier?) (y2f8c core-prim . generate-temporaries) (y2f8e core-prim . free-identifier=?) (y2fa4 core-prim . syntax->datum) (y2fa2 core-prim . datum->syntax) (y2f90 core-prim . bound-identifier=?) (y50cb core-prim . record-type-descriptor?) (y50ca core-prim . record-predicate) (y50c9 core-prim . record-mutator) (y50c8 core-prim . record-constructor) (y50c7 core-prim . record-accessor) (y50c6 core-prim . make-record-type-descriptor) (y50c5 core-prim . make-record-constructor-descriptor) (y50c4 core-prim . record?) (y50c3 core-prim . record-type-uid) (y50c2 core-prim . record-type-sealed?) (y50c1 core-prim . record-type-parent) (y50c0 core-prim . record-type-opaque?) (y50bf core-prim . record-type-name) (y50be core-prim . record-type-generative?) (y50bd core-prim . record-type-field-names) (y50bc core-prim . record-rtd) (y50bb core-prim . record-field-mutable?) (y50ba core-prim . delete-file) (y50b9 core-prim . file-exists?) (y50b8 core-prim . vector-sort!) (y50b7 core-prim . vector-sort) (y50b6 core-prim . list-sort) (y50b5 core-prim . symbol-hash) (y50b4 core-prim . string-ci-hash) (y50b3 core-prim . string-hash) (y50b2 core-prim . equal-hash) (y50b1 core-prim . hashtable-equivalence-function) (y50b0 core-prim . make-hashtable) (y50af core-prim . hashtable-hash-function) (y50ae core-prim . make-eqv-hashtable) (y50ad core-prim . make-eq-hashtable) (y50ac core-prim . hashtable?) (y50ab core-prim . hashtable-update!) (y50aa core-prim . hashtable-size) (y50a9 core-prim . hashtable-set!) (y50a8 core-prim . hashtable-ref) (y50a7 core-prim . hashtable-mutable?) (y50a6 core-prim . hashtable-keys) (y50a5 core-prim . hashtable-entries) (y50a4 core-prim . hashtable-delete!) (y50a3 core-prim . hashtable-copy) (y50a2 core-prim . hashtable-contains?) (y50a1 core-prim . hashtable-clear!) (y50a0 core-prim . call-with-output-file) (y509f core-prim . call-with-input-file) (y509e core-prim . write-char) (y509d core-prim . write) (y509c core-prim . with-output-to-file) (y509b core-prim . with-input-from-file) (y509a core-prim . read-char) (y5099 core-prim . read) (y5098 core-prim . peek-char) (y5097 core-prim . open-output-file) (y5096 core-prim . open-input-file) (y5095 core-prim . newline) (y5094 core-prim . display) (y5093 core-prim . close-output-port) (y5092 core-prim . close-input-port) (y5091 core-prim . eof-object?) (y5090 core-prim . eof-object) (y508f core-prim . current-error-port) (y508e core-prim . current-output-port) (y508d core-prim . current-input-port) (y508c core-prim . output-port?) (y508b core-prim . input-port?) (y508a core-prim . utf-8-codec) (y5089 core-prim . utf-16-codec) (y5088 core-prim . transcoder-error-handling-mode) (y5087 core-prim . transcoder-eol-style) (y5086 core-prim . transcoder-codec) (y5085 core-prim . transcoded-port) (y5084 core-prim . textual-port?) (y5083 core-prim . string->bytevector) (y5082 core-prim . standard-output-port) (y5081 core-prim . standard-input-port) (y5080 core-prim . standard-error-port) (y507f core-prim . set-port-position!) (y507e core-prim . put-u8) (y507d core-prim . put-string) (y507c core-prim . put-datum) (y507b core-prim . put-char) (y507a core-prim . put-bytevector) (y5079 core-prim . port?) (y5078 core-prim . port-transcoder) (y5077 core-prim . port-position) (y5076 core-prim . port-has-set-port-position!?) (y5075 core-prim . port-has-port-position?) (y5074 core-prim . port-eof?) (y5073 core-prim . output-port-buffer-mode) (y5072 core-prim . open-string-output-port) (y5071 core-prim . open-string-input-port) (y5070 core-prim . open-file-output-port) (y506f core-prim . open-file-input/output-port) (y506e core-prim . open-file-input-port) (y506d core-prim . open-bytevector-output-port) (y506c core-prim . open-bytevector-input-port) (y506b core-prim . native-transcoder) (y506a core-prim . native-eol-style) (y5069 core-prim . make-transcoder) (y5068 core-prim . latin-1-codec) (y4b60 core-prim . make-i/o-write-error) (y4b4b core-prim . make-i/o-read-error) (y4c01 core-prim . make-i/o-port-error) (y4b77 core-prim . make-i/o-invalid-position-error) (y4b92 core-prim . make-i/o-filename-error) (y4bab core-prim . make-i/o-file-protection-error) (y4bc0 core-prim . make-i/o-file-is-read-only-error) (y4bea core-prim . make-i/o-file-does-not-exist-error) (y4bd5 core-prim . make-i/o-file-already-exists-error) (y4b36 core-prim . make-i/o-error) (y4c31 core-prim . make-i/o-encoding-error) (y4c1a core-prim . make-i/o-decoding-error) (y5067 core-prim . make-custom-textual-output-port) (y5066 core-prim . make-custom-textual-input/output-port) (y5065 core-prim . make-custom-textual-input-port) (y5064 core-prim . make-custom-binary-output-port) (y5063 core-prim . make-custom-binary-input/output-port) (y5062 core-prim . make-custom-binary-input-port) (y5061 core-prim . make-bytevector) (y5060 core-prim . lookahead-u8) (y505f core-prim . lookahead-char) (y4b62 core-prim . i/o-write-error?) (y4b4d core-prim . i/o-read-error?) (y4c05 core-prim . i/o-port-error?) (y4b7b core-prim . i/o-invalid-position-error?) (y4b96 core-prim . i/o-filename-error?) (y4bad core-prim . i/o-file-protection-error?) (y4bc2 core-prim . i/o-file-is-read-only-error?) (y4bec core-prim . i/o-file-does-not-exist-error?) (y4bd7 core-prim . i/o-file-already-exists-error?) (y4b38 core-prim . i/o-error?) (y4b7d core-prim . i/o-error-position) (y4c07 core-prim . i/o-error-port) (y4b98 core-prim . i/o-error-filename) (y4c35 core-prim . i/o-encoding-error?) (y4c37 core-prim . i/o-encoding-error-char) (y4c1c core-prim . i/o-decoding-error?) (y505e core-prim . get-u8) (y505d core-prim . get-string-n!) (y505c core-prim . get-string-n) (y505b core-prim . get-string-all) (y505a core-prim . get-line) (y5059 core-prim . get-datum) (y5058 core-prim . get-char) (y5057 core-prim . get-bytevector-some) (y5056 core-prim . get-bytevector-n!) (y5055 core-prim . get-bytevector-n) (y5054 core-prim . get-bytevector-all) (y5053 core-prim . flush-output-port) (y5052 core-prim . close-port) (y2f7a core-prim . scheme-report-environment) (y5051 core-prim . quotient) (y2f78 core-prim . null-environment) (y5050 core-prim . remainder) (y504f core-prim . modulo) (y504e core-prim . inexact->exact) (y504d core-prim . force) (y504c core-prim . exact->inexact) (y504b core-prim . make-promise) (y504a core-prim . exit) (y4d6c core-prim . command-line) (y5049 core-prim . string-fill!) (y5048 core-prim . string-set!) (y5047 core-prim . set-cdr!) (y5046 core-prim . set-car!) (y5045 core-prim . remove) (y5044 core-prim . remv) (y5043 core-prim . remp) (y5042 core-prim . remq) (y5041 core-prim . partition) (y5040 core-prim . memv) (y503f core-prim . memq) (y503e core-prim . memp) (y503d core-prim . member) (y503c core-prim . exists) (y503b core-prim . for-all) (y503a core-prim . fold-right) (y5039 core-prim . fold-left) (y5038 core-prim . find) (y5037 core-prim . filter) (y5036 core-prim . cons*) (y5035 core-prim . assv) (y5034 core-prim . assq) (y5033 core-prim . assp) (y5032 core-prim . assoc) (y5031 core-prim . call-with-string-output-port) (y5030 core-prim . call-with-port) (y502f core-prim . call-with-bytevector-output-port) (y502e core-prim . bytevector->string) (y502d core-prim . buffer-mode?) (y502c core-prim . binary-port?) (y502b core-prim . with-exception-handler) (y502a core-prim . raise-continuable) (y5029 core-prim . raise) (y2f7e core-prim . eval) (y2f76 core-prim . environment) (y5028 core-prim . make-enumeration) (y5027 core-prim . enum-set=?) (y5026 core-prim . enum-set-universe) (y5025 core-prim . enum-set-union) (y5024 core-prim . enum-set-subset?) (y5023 core-prim . enum-set-projection) (y5022 core-prim . enum-set-member?) (y5021 core-prim . enum-set-intersection) (y5020 core-prim . enum-set-indexer) (y501f core-prim . enum-set-difference) (y501e core-prim . enum-set-constructor) (y501d core-prim . enum-set-complement) (y501c core-prim . enum-set->list) (y4aac core-prim . who-condition?) (y4a24 core-prim . warning?) (y4a63 core-prim . violation?) (y4b23 core-prim . undefined-violation?) (y4b0a core-prim . syntax-violation?) (y4b0e core-prim . syntax-violation-subform) (y4b0c core-prim . syntax-violation-form) (y2f9e core-prim . syntax-violation) (y501b core-prim . simple-conditions) (y4a39 core-prim . serious-condition?) (y4ac3 core-prim . non-continuable-violation?) (y4a0d core-prim . message-condition?) (y4aa8 core-prim . make-who-condition) (y4a22 core-prim . make-warning) (y4a61 core-prim . make-violation) (y4b21 core-prim . make-undefined-violation) (y4b04 core-prim . make-syntax-violation) (y4a37 core-prim . make-serious-condition) (y4ac1 core-prim . make-non-continuable-violation) (y4a09 core-prim . make-message-condition) (y4aeb core-prim . make-lexical-violation) (y4a8d core-prim . make-irritants-condition) (y4ad6 core-prim . make-implementation-restriction-violation) (y4a4c core-prim . make-error) (y4a76 core-prim . make-assertion-violation) (y4aed core-prim . lexical-violation?) (y4a91 core-prim . irritants-condition?) (y4ad8 core-prim . implementation-restriction-violation?) (y4a4e core-prim . error?) (y4aae core-prim . condition-who) (y501a core-prim . condition-predicate) (y4a0f core-prim . condition-message) (y4a93 core-prim . condition-irritants) (y5019 core-prim . condition-accessor) (y5018 core-prim . condition) (y4a78 core-prim . assertion-violation?) (y5017 core-prim . condition?) (y5016 core-prim . utf32->string) (y5015 core-prim . utf16->string) (y5014 core-prim . utf8->string) (y5013 core-prim . uint-list->bytevector) (y5012 core-prim . u8-list->bytevector) (y5011 core-prim . string->utf8) (y5010 core-prim . string->utf32) (y500f core-prim . string->utf16) (y500e core-prim . sint-list->bytevector) (y500d core-prim . native-endianness) (y500c core-prim . bytevector?) (y500b core-prim . bytevector=?) (y500a core-prim . bytevector-uint-set!) (y5009 core-prim . bytevector-uint-ref) (y5008 core-prim . bytevector-u8-set!) (y5007 core-prim . bytevector-u8-ref) (y5006 core-prim . bytevector-u64-set!) (y5005 core-prim . bytevector-u64-ref) (y5004 core-prim . bytevector-u64-native-set!) (y5003 core-prim . bytevector-u64-native-ref) (y5002 core-prim . bytevector-u32-set!) (y5001 core-prim . bytevector-u32-ref) (y5000 core-prim . bytevector-u32-native-set!) (y4fff core-prim . bytevector-u32-native-ref) (y4ffe core-prim . bytevector-u16-set!) (y4ffd core-prim . bytevector-u16-ref) (y4ffc core-prim . bytevector-u16-native-set!) (y4ffb core-prim . bytevector-u16-native-ref) (y4ffa core-prim . bytevector-sint-set!) (y4ff9 core-prim . bytevector-sint-ref) (y4ff8 core-prim . bytevector-s8-set!) (y4ff7 core-prim . bytevector-s8-ref) (y4ff6 core-prim . bytevector-s64-set!) (y4ff5 core-prim . bytevector-s64-ref) (y4ff4 core-prim . bytevector-s64-native-set!) (y4ff3 core-prim . bytevector-s64-native-ref) (y4ff2 core-prim . bytevector-s32-set!) (y4ff1 core-prim . bytevector-s32-ref) (y4ff0 core-prim . bytevector-s32-native-set!) (y4fef core-prim . bytevector-s32-native-ref) (y4fee core-prim . bytevector-s16-set!) (y4fed core-prim . bytevector-s16-ref) (y4fec core-prim . bytevector-s16-native-set!) (y4feb core-prim . bytevector-s16-native-ref) (y4fea core-prim . bytevector-length) (y4fe9 core-prim . bytevector-ieee-single-ref) (y4fe8 core-prim . bytevector-ieee-single-set!) (y4fe7 core-prim . bytevector-ieee-single-native-set!) (y4fe6 core-prim . bytevector-ieee-single-native-ref) (y4fe5 core-prim . bytevector-ieee-double-set!) (y4fe4 core-prim . bytevector-ieee-double-ref) (y4fe3 core-prim . bytevector-ieee-double-native-set!) (y4fe2 core-prim . bytevector-ieee-double-native-ref) (y4fe1 core-prim . bytevector-fill!) (y4fe0 core-prim . bytevector-copy!) (y4fdf core-prim . bytevector-copy) (y4fde core-prim . bytevector->uint-list) (y4fdd core-prim . bytevector->u8-list) (y4fdc core-prim . bytevector->sint-list) (y4c61 core-prim . no-nans-violation?) (y4c4c core-prim . no-infinities-violation?) (y4c5f core-prim . make-no-nans-violation) (y4c4a core-prim . make-no-infinities-violation) (y4fdb core-prim . real->flonum) (y4fda core-prim . flzero?) (y4fd9 core-prim . fltruncate) (y4fd8 core-prim . fltan) (y4fd7 core-prim . flsqrt) (y4fd6 core-prim . flsin) (y4fd5 core-prim . flround) (y4fd4 core-prim . flpositive?) (y4fd3 core-prim . flonum?) (y4fd2 core-prim . flodd?) (y4fd1 core-prim . flnumerator) (y4fd0 core-prim . flnegative?) (y4fcf core-prim . flnan?) (y4fce core-prim . flmod0) (y4fcd core-prim . flmod) (y4fcc core-prim . flmin) (y4fcb core-prim . flmax) (y4fca core-prim . fllog) (y4fc9 core-prim . flinteger?) (y4fc8 core-prim . flinfinite?) (y4fc7 core-prim . flfloor) (y4fc6 core-prim . flfinite?) (y4fc5 core-prim . flexpt) (y4fc4 core-prim . flexp) (y4fc3 core-prim . fleven?) (y4fc2 core-prim . fldiv0-and-mod0) (y4fc1 core-prim . fldiv0) (y4fc0 core-prim . fldiv-and-mod) (y4fbf core-prim . fldiv) (y4fbe core-prim . fldenominator) (y4fbd core-prim . flcos) (y4fbc core-prim . flceiling) (y4fbb core-prim . flatan) (y4fba core-prim . flasin) (y4fb9 core-prim . flacos) (y4fb8 core-prim . flabs) (y4fb7 core-prim . fl>?) (y4fb6 core-prim . fl>=?) (y4fb5 core-prim . fl=?) (y4fb4 core-prim . fl<?) (y4fb3 core-prim . fl<=?) (y4fb2 core-prim . fl/) (y4fb1 core-prim . fl-) (y4fb0 core-prim . fl+) (y4faf core-prim . fl*) (y4fae core-prim . fixnum->flonum) (y4fad core-prim . fxzero?) (y4fac core-prim . fxxor) (y4fab core-prim . fxrotate-bit-field) (y4faa core-prim . fxreverse-bit-field) (y4fa9 core-prim . fxpositive?) (y4fa8 core-prim . fxodd?) (y4fa7 core-prim . fxnot) (y4fa6 core-prim . fxnegative?) (y4fa5 core-prim . fxmod0) (y4fa4 core-prim . fxmod) (y4fa3 core-prim . fxmin) (y4fa2 core-prim . fxmax) (y4fa1 core-prim . fxlength) (y4fa0 core-prim . fxior) (y4f9f core-prim . fxif) (y4f9e core-prim . fxfirst-bit-set) (y4f9d core-prim . fxeven?) (y4f9c core-prim . fxdiv0-and-mod0) (y4f9b core-prim . fxdiv0) (y4f9a core-prim . fxdiv-and-mod) (y4f99 core-prim . fxdiv) (y4f98 core-prim . fxcopy-bit-field) (y4f97 core-prim . fxcopy-bit) (y4f96 core-prim . fxbit-set?) (y4f95 core-prim . fxbit-field) (y4f94 core-prim . fxbit-count) (y4f93 core-prim . fxarithmetic-shift-right) (y4f92 core-prim . fxarithmetic-shift-left) (y4f91 core-prim . fxarithmetic-shift) (y4f90 core-prim . fxand) (y4f8f core-prim . fx>?) (y4f8e core-prim . fx>=?) (y4f8d core-prim . fx=?) (y4f8c core-prim . fx<?) (y4f8b core-prim . fx<=?) (y4f8a core-prim . fx-/carry) (y4f89 core-prim . fx-) (y4f88 core-prim . fx+/carry) (y4f87 core-prim . fx+) (y4f86 core-prim . fx*/carry) (y4f85 core-prim . fx*) (y4f84 core-prim . greatest-fixnum) (y4f83 core-prim . least-fixnum) (y4f82 core-prim . fixnum-width) (y4f81 core-prim . fixnum?) (y4f80 core-prim . bitwise-rotate-bit-field) (y4f7f core-prim . bitwise-reverse-bit-field) (y4f7e core-prim . bitwise-length) (y4f7d core-prim . bitwise-if) (y4f7c core-prim . bitwise-first-bit-set) (y4f7b core-prim . bitwise-copy-bit-field) (y4f7a core-prim . bitwise-copy-bit) (y4f79 core-prim . bitwise-bit-set?) (y4f78 core-prim . bitwise-bit-field) (y4f77 core-prim . bitwise-bit-count) (y4f76 core-prim . bitwise-xor) (y4f75 core-prim . bitwise-ior) (y4f74 core-prim . bitwise-and) (y4f73 core-prim . bitwise-not) (y4f72 core-prim . bitwise-arithmetic-shift-right) (y4f71 core-prim . bitwise-arithmetic-shift-left) (y4f70 core-prim . bitwise-arithmetic-shift) (y4f6f core-prim . zero?) (y4f6e core-prim . vector?) (y4f6d core-prim . vector-set!) (y4f6c core-prim . vector-ref) (y4f6b core-prim . vector-map) (y4f6a core-prim . vector-length) (y4f69 core-prim . vector-for-each) (y4f68 core-prim . vector-fill!) (y4f67 core-prim . vector->list) (y4f66 core-prim . vector) (y4f65 core-prim . values) (y4f64 core-prim . truncate) (y4f63 core-prim . tan) (y4f62 core-prim . symbol?) (y4f61 core-prim . symbol=?) (y4f60 core-prim . symbol->string) (y4f5f core-prim . substring) (y4f5e core-prim . string?) (y4f5d core-prim . string>?) (y4f5c core-prim . string>=?) (y4f5b core-prim . string=?) (y4f5a core-prim . string<?) (y4f59 core-prim . string<=?) (y4f58 core-prim . string-ref) (y4f57 core-prim . string-length) (y4f56 core-prim . string-for-each) (y4f55 core-prim . string-copy) (y4f54 core-prim . string-append) (y4f53 core-prim . string->symbol) (y4f52 core-prim . string->number) (y4f51 core-prim . string->list) (y4f50 core-prim . string) (y4f4f core-prim . sqrt) (y4f4e core-prim . sin) (y4f4d core-prim . round) (y4f4c core-prim . reverse) (y4f4b core-prim . real?) (y4f4a core-prim . real-valued?) (y4f49 core-prim . real-part) (y4f48 core-prim . rationalize) (y4f47 core-prim . rational?) (y4f46 core-prim . rational-valued?) (y4f45 core-prim . procedure?) (y4f44 core-prim . positive?) (y4f43 core-prim . pair?) (y4f42 core-prim . odd?) (y4f41 core-prim . numerator) (y4f40 core-prim . number?) (y4f3f core-prim . number->string) (y4f3e core-prim . null?) (y4f3d core-prim . not) (y4f3c core-prim . negative?) (y4f3b core-prim . nan?) (y4f3a core-prim . min) (y4f39 core-prim . max) (y4f38 core-prim . map) (y4f37 core-prim . make-vector) (y4f36 core-prim . make-string) (y4f35 core-prim . make-rectangular) (y4f34 core-prim . make-polar) (y4f33 core-prim . magnitude) (y4f32 core-prim . log) (y4f31 core-prim . list?) (y4f30 core-prim . list-tail) (y4f2f core-prim . list-ref) (y4f2e core-prim . list->vector) (y4f2d core-prim . list->string) (y4f2c core-prim . list) (y4f2b core-prim . length) (y4f2a core-prim . lcm) (y4f29 core-prim . integer?) (y4f28 core-prim . integer-valued?) (y4f27 core-prim . integer->char) (y4f26 core-prim . infinite?) (y4f25 core-prim . inexact?) (y4f24 core-prim . inexact) (y4f23 core-prim . imag-part) (y4f22 core-prim . gcd) (y4f21 core-prim . for-each) (y4f20 core-prim . floor) (y4f1f core-prim . finite?) (y4f1e core-prim . expt) (y4f1d core-prim . exp) (y4f1c core-prim . exact?) (y4f1b core-prim . exact-integer-sqrt) (y4f1a core-prim . exact) (y4f19 core-prim . even?) (y4f18 core-prim . error) (y4f17 core-prim . eqv?) (y4f16 core-prim . equal?) (y4f15 core-prim . eq?) (y4f14 core-prim . dynamic-wind) (y4f13 core-prim . div0-and-mod0) (y4f12 core-prim . mod0) (y4f11 core-prim . div0) (y4f10 core-prim . div-and-mod) (y4f0f core-prim . mod) (y4f0e core-prim . div) (y4f0d core-prim . denominator) (y4f0c core-prim . cos) (y4f0b core-prim . cons) (y4f0a core-prim . complex?) (y4f09 core-prim . char?) (y4f08 core-prim . char>?) (y4f07 core-prim . char>=?) (y4f06 core-prim . char=?) (y4f05 core-prim . char<?) (y4f04 core-prim . char<=?) (y4f03 core-prim . char->integer) (y4f02 core-prim . ceiling) (y4f01 core-prim . call-with-values) (y4f00 core-prim . call/cc) (y4eff core-prim . call-with-current-continuation) (y4efe core-prim . cddddr) (y4efd core-prim . cdddar) (y4efc core-prim . cddadr) (y4efb core-prim . cddaar) (y4efa core-prim . cdaddr) (y4ef9 core-prim . cdadar) (y4ef8 core-prim . cdaadr) (y4ef7 core-prim . cdaaar) (y4ef6 core-prim . cadddr) (y4ef5 core-prim . caddar) (y4ef4 core-prim . cadadr) (y4ef3 core-prim . cadaar) (y4ef2 core-prim . caaddr) (y4ef1 core-prim . caadar) (y4ef0 core-prim . caaadr) (y4eef core-prim . caaaar) (y4eee core-prim . cdddr) (y4eed core-prim . cddar) (y4eec core-prim . cdadr) (y4eeb core-prim . cdaar) (y4eea core-prim . caddr) (y4ee9 core-prim . cadar) (y4ee8 core-prim . caadr) (y4ee7 core-prim . caaar) (y4ee6 core-prim . cddr) (y4ee5 core-prim . cdar) (y4ee4 core-prim . cadr) (y4ee3 core-prim . caar) (y4ee2 core-prim . cdr) (y4ee1 core-prim . car) (y4ee0 core-prim . boolean?) (y4edf core-prim . boolean=?) (y4ede core-prim . atan) (y4edd core-prim . assertion-violation) (y2f98 core-prim . assertion-error) (y4edc core-prim . asin) (y4edb core-prim . apply) (y4eda core-prim . append) (y4ed9 core-prim . angle) (y4ed8 core-prim . acos) (y4ed7 core-prim . abs) (y4ed6 core-prim . /) (y4ed5 core-prim . *) (y4ed4 core-prim . -) (y4ed3 core-prim . +) (y4ed2 core-prim . >=) (y4ed1 core-prim . >) (y4ed0 core-prim . =) (y4ecf core-prim . <=) (y4ece core-prim . <) (y4ecd core-prim . library) (y4ecc $core-rtd &no-nans-rtd &no-nans-rcd) (y4ecb $core-rtd &no-infinities-rtd &no-infinities-rcd) (y4eca $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (y4ec9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (y4ec8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (y4ec7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (y4ec6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (y4ec5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (y4ec4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (y4ec3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (y4ec2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (y4ec1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (y4ec0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (y4ebf $core-rtd &i/o-rtd &i/o-rcd) (y4ebe $core-rtd &undefined-rtd &undefined-rcd) (y4ebd $core-rtd &syntax-rtd &syntax-rcd) (y4ebc $core-rtd &lexical-rtd &lexical-rcd) (y4ebb $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (y4eba $core-rtd &non-continuable-rtd &non-continuable-rcd) (y4eb9 $core-rtd &who-rtd &who-rcd) (y4eb8 $core-rtd &irritants-rtd &irritants-rcd) (y4eb7 $core-rtd &assertion-rtd &assertion-rcd) (y4eb6 $core-rtd &violation-rtd &violation-rcd) (y4eb5 $core-rtd &error-rtd &error-rcd) (y4eb4 $core-rtd &serious-rtd &serious-rcd) (y4eb3 $core-rtd &warning-rtd &warning-rcd) (y4eb2 $core-rtd &message-rtd &message-rcd) (y4eb1 $core-rtd &condition-rtd &condition-rcd) (y4eb0 macro . define-condition-type) (y4eaf macro . define-enumeration) (y4eae macro . define-record-type) (y4ead macro . parent-rtd) (y4eac macro . nongenerative) (y4eab macro . opaque) (y4eaa macro . sealed) (y4ea9 macro . protocol) (y4ea8 macro . parent) (y4ea7 macro . immutable) (y4ea6 macro . mutable) (y4ea5 macro . fields) (y4ea4 macro . error-handling-mode) (y4ea3 macro . file-options) (y4ea2 macro . buffer-mode) (y4ea1 macro . eol-style) (y4ea0 macro . guard) (y4e9f macro . trace-define) (y4e9e macro . trace-lambda) (y4e9d macro . unsyntax-splicing) (y4e9c macro . unsyntax) (y4e9b macro . unquote-splicing) (y4e9a macro . unquote) (y4e99 macro . _) (y4e98 macro . else) (y4e97 macro . =>) (y4e96 macro . ...) (y4e95 macro . assert) (y4e94 macro . endianness) (y4e93 macro . delay) (y4e92 macro . time) (y4e91 macro . do) (y4e90 macro . cond) (y4e8f macro . let*) (y4e8e macro . let) (y4e8d macro . let*-values) (y4e8c macro . let-values) (y4e8b macro . identifier-syntax) (y4e8a macro . with-syntax) (y4e89 macro . quasisyntax) (y4e88 macro . quasiquote) (y4e87 macro . syntax-rules) (y4e86 macro . include) (y4e85 macro . define-struct) (y4e84 core-macro . record-constructor-descriptor) (y4e83 core-macro . record-type-descriptor) (y4e82 macro . case) (y4e81 macro . parameterize) (y4e80 macro . unless) (y4e7f macro . when) (y4e7e core-macro . or) (y4e7d core-macro . and) (y4e7c core-macro . if) (y4e7b core-macro . letrec*) (y4e7a core-macro . letrec) (y4e79 core-macro . type-descriptor) (y4e78 core-macro . case-lambda) (y4e77 core-macro . lambda) (y4e76 core-macro . syntax) (y4e75 core-macro . syntax-case) (y4e74 core-macro . quote) (y4e73 core-macro . foreign-call) (y4e72 letrec-syntax) (y4e71 let-syntax) (y4e70 set!) (y4e6f import) (y4e6e begin) (y4e6d module) (y4e6c define-syntax) (y4e6b define)) values values '#f '#f '#f '#f) (y2acd@y296c@install-library 'y515a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . y5139) (eval-core . y5138) (set-symbol-value! . y5137) (symbol-value . y5136) (gensym . y5135) (void . y5134)) '() values values '#f '#f '#f '#f) (y2acd@y296c@install-library 'y515b '(mosh) '() '() '() '() '((set-symbol-value! . y5137) (symbol-value . y5136) (read-line . y5131) (ungensym . y5130) (alist->eq-hash-table . y512f) (assoc-ref . y512e) (print . y512d) (format . y512c) (host-os . y512b) (library-path . y294b) (standard-library-path . y512a) (file-newer? . y5129) (stat-mtime . y5128) (write-to-file . y5127) (file->list . y5126) (file->string . y5125) (digit->integer . y5124) (call-with-string-input-port . y5123) (call-with-string-io . y5122) (string-split . y5121) (bytevector-for-each . y5120) (string->regexp . y511f) (rxmatch . y511e) (regexp-replace-all . y511d) (hashtable-for-each . y511c) (readdir . y5118) (set-current-directory! . y5117) (expand-path . y5116) (current-directory . y5115) (p . y5106) (get-timeofday . y5101) (get-command-line . y5100) (sys-display . y50ff) (mosh-executable-path . y50fe) (make-file-options . y50fd) (source-info . y50fc) (make-compiler-instruction . y50fb) (make-instruction . y50fa) (set-source-info! . y50f9) (bignum? . y50f8) (fast-equal? . y50f7) (fasl-read . y50f6) (fasl-write . y50f5) (time-usage . y50f4) (os-constant . y50f3) (time . y4e92) (include . y4e86)) '() values values '#f '#f '#f '#f) (y2acd@y296c@install-library 'y515c '(system) '() '() '() '() '((call-process . y511b) (local-tz-offset . y511a) (microseconds . y5119) (expand-path . y5116) (%spawn . y5114) (%waitpid . y5113) (%ffi-supported? . y5112) (%ffi-pointer-ref . y5111) (%ffi-pointer->string . y5110) (%ffi-call->string-or-zero . y510f) (%ffi-call->double . y510e) (%ffi-call->void* . y510d) (%ffi-call->void . y510c) (%ffi-call->int . y510b) (%ffi-lookup . y510a) (%ffi-open . y5109) (%fork . y5108) (%pipe . y5107) (open-output-string . y5105) (get-output-string . y5104) (get-environment-variables . y5103) (get-environment-variable . y5102) (make-parameter . y277e) (socket-port . y50f2) (socket-shutdown . y50f1) (socket-close . y50f0) (socket-send . y50ef) (socket-recv! . y50ee) (socket-recv . y50ed) (make-server-socket . y50ec) (make-client-socket . y50eb) (socket-accept . y50ea) (socket? . y50e9) (parameterize . y4e81)) '() values values '#f '#f '#f '#f))
((lambda (y4d5b@add-library-path! y4d5d@parse-and-add-library-path y4d5f@for-each-with-index y4d61@rpad y4d63@condition-printer y4d65@record->field-alist y4d67@map-with-index y4d69@repl y4d6b@trace-printer y4d6d@command-line y4d6f@local-library-path y4d71@load/args y4d73@load y4d75@ironscheme-build y4d77@eval-top-level y4d79@compile-system-libraries y4d7b@compile y4d7d@compile->closure y4d7f@pre-compile-r6rs-file y4d81@load-r6rs-top-level) (begin (set! y4d5b@add-library-path! (lambda (y4d9c@path) (y2abd@y294c@library-path (append (y2abd@y294c@library-path) (list y4d9c@path))))) (set! y4d5d@parse-and-add-library-path (lambda (y4d9e@paths y4d9f@message) ((lambda (y4da2@t) (if y4da2@t ((lambda (y4da4@paths) (for-each (lambda (y4da6@path) (if (file-exists? y4da6@path) (y4d5b@add-library-path! (expand-path y4da6@path)) (format (current-error-port) y4d9f@message y4da6@path))) (reverse (string-split y4da4@paths '#\:)))) y4da2@t) (void))) y4d9e@paths))) (set! y4d5f@for-each-with-index (lambda (y4da8@proc y4da9@lst) (letrec ((y4dac@loop (lambda (y4dae@i y4daf@lst) (if (null? y4daf@lst) (if '#f '#f (void)) (begin (y4da8@proc y4dae@i (car y4daf@lst)) (y4dac@loop (+ y4dae@i '1) (cdr y4daf@lst))))))) (y4dac@loop '1 y4da9@lst)))) (set! y4d61@rpad (lambda (y4db2@str y4db3@pad y4db4@n) ((lambda (y4db8@rest) ((letrec ((y4dba@loop (lambda (y4dbc@rest y4dbd@ret) (if (<= y4dbc@rest '0) y4dbd@ret (y4dba@loop (- y4dbc@rest '1) (string-append y4dbd@ret y4db3@pad)))))) y4dba@loop) y4db8@rest (format '"~a" y4db2@str))) (- y4db4@n (string-length (format '"~a" y4db2@str)))))) (set! y4d63@condition-printer (lambda (y4dc0@e y4dc1@port) ((lambda (y4dc5@max-condition-len) (begin (set! y4dc5@max-condition-len (apply max (map (lambda (y4dd6@c) (string-length (symbol->string (record-type-name (record-rtd y4dd6@c))))) (simple-conditions y4dc0@e)))) (begin (display '" Condition components:\n" y4dc1@port) (y4d5f@for-each-with-index (lambda (y4dc6@i y4dc7@x) ((lambda (y4dca@rtd y4dcb@fields-alist) (begin (format y4dc1@port '" ~d. ~a" y4dc6@i (y4d61@rpad (symbol->string (record-type-name y4dca@rtd)) '" " y4dc5@max-condition-len)) (if (null? y4dcb@fields-alist) (newline y4dc1@port) (void)) ((letrec ((y4dce@loop (lambda (y4dd0@first y4dd1@fields-alist) (if (null? y4dd1@fields-alist) '() ((lambda (y4dd4@field) (begin (if (not y4dd0@first) (display (y4d61@rpad '"" '" " (+ '4 y4dc5@max-condition-len)) y4dc1@port) (void)) (display '"       " y4dc1@port) (display (car y4dd4@field) y4dc1@port) (display '": " y4dc1@port) (write (cdr y4dd4@field) y4dc1@port) (newline y4dc1@port) (y4dce@loop '#f (cdr y4dd1@fields-alist)))) (car y4dd1@fields-alist)))))) y4dce@loop) '#t y4dcb@fields-alist))) (record-rtd y4dc7@x) (y4d65@record->field-alist y4dc7@x))) (simple-conditions y4dc0@e))))) '#f))) (set! y4d65@record->field-alist (lambda (y4dd8@r) ((lambda (y4ddb@ref) (begin (set! y4ddb@ref (lambda (y4de6@rtd y4de7@i y4de8@x) ((lambda (y4dec@val) (if (symbol? y4dec@val) (ungensym y4dec@val) y4dec@val)) ((record-accessor y4de6@rtd y4de7@i) y4de8@x)))) ((letrec ((y4ddc@loop (lambda (y4dde@ret y4ddf@rtd) (if y4ddf@rtd (y4ddc@loop (append y4dde@ret (y4d67@map-with-index (lambda (y4de2@i y4de3@field) (cons y4de3@field (y4ddb@ref y4ddf@rtd y4de2@i y4dd8@r))) (vector->list (record-type-field-names y4ddf@rtd)))) (record-type-parent y4ddf@rtd)) y4dde@ret)))) y4ddc@loop) '() (record-rtd y4dd8@r)))) '#f))) (set! y4d67@map-with-index (lambda (y4dee@proc y4def@lst) ((letrec ((y4df2@loop (lambda (y4df4@i y4df5@lst y4df6@ret) (if (null? y4df5@lst) (reverse y4df6@ret) (y4df2@loop (+ y4df4@i '1) (cdr y4df5@lst) (cons (y4dee@proc y4df4@i (car y4df5@lst)) y4df6@ret)))))) y4df2@loop) '0 y4def@lst '()))) (set! y4d69@repl (lambda y4dfa@x ((lambda (y4dfd@rec) (begin (set! y4dfd@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (y4e00@y4dfe) (lambda () (with-exception-handler (lambda (y4e02@e) ((call/cc (lambda (y4e04@y4dff) (y4e00@y4dfe (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? y4e02@e) (y4d63@condition-printer y4e02@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" y4e02@e))) (y4e04@y4dff (lambda () (raise-continuable y4e02@e)))))))))) (lambda () ((letrec ((y4e06@loop (lambda (y4e08@line y4e09@accum) ((lambda (y4e0d@parentheses-ok? y4e0f@eval-string-print) (begin (set! y4e0d@parentheses-ok? (lambda (y4e14@text) ((letrec ((y4e16@loop (lambda (y4e18@chars y4e19@p0 y4e1a@p1) (if (null? y4e18@chars) (= '0 y4e19@p0 y4e1a@p1) ((lambda (y4e1e@t) (if (memv y4e1e@t '(#\()) (y4e16@loop (cdr y4e18@chars) (+ y4e19@p0 '1) y4e1a@p1) (if (memv y4e1e@t '(#\))) (y4e16@loop (cdr y4e18@chars) (- y4e19@p0 '1) y4e1a@p1) (if (memv y4e1e@t '(#\[)) (y4e16@loop (cdr y4e18@chars) y4e19@p0 (+ y4e1a@p1 '1)) (if (memv y4e1e@t '(#\])) (y4e16@loop (cdr y4e18@chars) y4e19@p0 (- y4e1a@p1 '1)) (y4e16@loop (cdr y4e18@chars) y4e19@p0 y4e1a@p1)))))) (car y4e18@chars)))))) y4e16@loop) (string->list y4e14@text) '0 '0))) (set! y4e0f@eval-string-print (lambda (y4e12@text) (if (not (or (string=? '"\n" y4e12@text) (= '0 (string-length y4e12@text)))) (write (y4d77@eval-top-level (call-with-port (open-string-input-port y4e12@text) read))) (void)))) (if (eof-object? y4e08@line) (begin (y4e0f@eval-string-print y4e09@accum) (exit)) ((lambda (y4e10@current) (if (y4e0d@parentheses-ok? y4e10@current) (y4e0f@eval-string-print y4e10@current) (y4e06@loop (get-line (current-input-port)) y4e10@current))) (string-append y4e09@accum y4e08@line))))) '#f '#f)))) y4e06@loop) (get-line (current-input-port)) '""))))))) (newline) (y4dfd@rec)))) (y4dfd@rec))) '#f))) (set! y4d6b@trace-printer (y2855@y277f@make-parameter write)) (set! y4d6d@command-line (y2855@y277f@make-parameter (get-command-line))) (set! y4d6f@local-library-path (lambda (y4e20@filename) (cons (expand-path '".") (y2abd@y294c@library-path)))) (set! y4d71@load/args (lambda (y4e22@filename . y4e24@args) (begin (apply y4d81@load-r6rs-top-level y4e22@filename 'load y4e24@args) (void)))) (set! y4d73@load (lambda (y4e26@filename) (begin (apply y4d81@load-r6rs-top-level y4e26@filename 'load (y4d6d@command-line)) (void)))) (set! y4d75@ironscheme-build (lambda () (y4d73@load '"ironscheme-buildscript.ss"))) (set! y4d77@eval-top-level (lambda (y4e28@x) (y4987@y2f7f@eval y4e28@x (y499d@y2fab@interaction-environment)))) (set! y4d79@compile-system-libraries (lambda () (y4d77@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! y4d7b@compile (lambda (y4e2a@filename) (y4d81@load-r6rs-top-level y4e2a@filename 'compile))) (set! y4d7d@compile->closure (lambda (y4e2c@filename) (y4d81@load-r6rs-top-level y4e2c@filename 'closure))) (set! y4d7f@pre-compile-r6rs-file (lambda (y4e2e@filename) (y4d81@load-r6rs-top-level y4e2e@filename 'compile))) (set! y4d81@load-r6rs-top-level (lambda (y4e30@filename y4e31@how . y4e34@args) ((lambda (y4e3a@y4e37 y4e3b@y4e39) ((lambda (y4e3e@swap) (dynamic-wind y4e3e@swap (lambda () ((lambda (y4e40@x*) ((lambda (y4e42@t) (if (memv y4e42@t '(closure)) (y499c@y2fa9@pre-compile-r6rs-top-level y4e40@x*) (if (memv y4e42@t '(load)) ((lambda (y4e48@y4e45 y4e49@y4e47) ((lambda (y4e4c@swap) (dynamic-wind y4e4c@swap (lambda () ((y499b@y2fa7@compile-r6rs-top-level y4e40@x*))) y4e4c@swap)) (lambda () ((lambda (y4e4e@t) (begin (y4e48@y4e45 y4e49@y4e47) (set! y4e49@y4e47 y4e4e@t))) (y4e48@y4e45))))) y4d6d@command-line (cons y4e30@filename (car y4e34@args))) (if (memv y4e42@t '(compile)) (begin (y499b@y2fa7@compile-r6rs-top-level y4e40@x*) (y2ac1@y2954@serialize-all y2850@y2775@serialize-library y28aa@y2863@compile-core-expr)) (if '#f '#f (void)))))) y4e31@how)) (with-input-from-file y4e30@filename (lambda () ((letrec ((y4e50@f (lambda () ((lambda (y4e52@x) (if (eof-object? y4e52@x) '() (cons y4e52@x (y4e50@f)))) (y2848@y2765@read-annotated))))) y4e50@f)))))) y4e3e@swap)) (lambda () ((lambda (y4e54@t) (begin (y4e3a@y4e37 y4e3b@y4e39) (set! y4e3b@y4e39 y4e54@t))) (y4e3a@y4e37))))) y2abd@y294c@library-path (y4d6f@local-library-path y4e30@filename)))) (begin (set! y4e69@y4d81@load-r6rs-top-level y4d81@load-r6rs-top-level) (set! y4e68@y4d7f@pre-compile-r6rs-file y4d7f@pre-compile-r6rs-file) (set! y4e67@y4d7d@compile->closure y4d7d@compile->closure) (set! y4e66@y4d7b@compile y4d7b@compile) (set! y4e65@y4d79@compile-system-libraries y4d79@compile-system-libraries) (set! y4e64@y4d77@eval-top-level y4d77@eval-top-level) (set! y4e63@y4d75@ironscheme-build y4d75@ironscheme-build) (set! y4e62@y4d73@load y4d73@load) (set! y4e61@y4d71@load/args y4d71@load/args) (set! y4e60@y4d6f@local-library-path y4d6f@local-library-path) (set! y4e5f@y4d6d@command-line y4d6d@command-line) (set! y4e5e@y4d6b@trace-printer y4d6b@trace-printer) (set! y4e5d@y4d69@repl y4d69@repl) (set! y4e5c@y4d67@map-with-index y4d67@map-with-index) (set! y4e5b@y4d65@record->field-alist y4d65@record->field-alist) (set! y4e5a@y4d63@condition-printer y4d63@condition-printer) (set! y4e59@y4d61@rpad y4d61@rpad) (set! y4e58@y4d5f@for-each-with-index y4d5f@for-each-with-index) (set! y4e57@y4d5d@parse-and-add-library-path y4d5d@parse-and-add-library-path) (set! y4e56@y4d5b@add-library-path! y4d5b@add-library-path!) (y2ac2@y2956@current-precompiled-library-loader y2851@y2777@load-serialized-library) (set-symbol-value! 'load y4d73@load) (set-symbol-value! 'pre-compile-r6rs-file y4d7f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs y4d77@eval-top-level) (set-symbol-value! 'int-env-syms y497e@y2f6d@interaction-environment-symbols) (set-symbol-value! 'expanded2core y28a9@y2861@expanded->core) (set-symbol-value! 'trace-printer y4d6b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (y4d82@c) (condition (y4cb8@y4ac2@make-non-continuable-violation) (y4cae@y4aa9@make-who-condition 'raise) (y4c72@y4a0a@make-message-condition '"returned from non-continuable exception") (y4ca4@y4a8e@make-irritants-condition (list y4d82@c))))) (y4d5d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (y4d5d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (y4d5b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (y4d5b@add-library-path! (string-append (current-directory) '"/lib"))) (y4d5b@add-library-path! (string-append (standard-library-path) '"/lib")) ((lambda (y4d84@prefix) (y2abe@y294e@library-extensions (y4d84@prefix '".mosh" (y2abe@y294e@library-extensions)))) (lambda (y4d86@ext y4d87@ls) (append (map (lambda (y4d8a@x) (string-append y4d86@ext y4d8a@x)) y4d87@ls) y4d87@ls))) ((lambda (y4d8c@args y4d8d@port) ((lambda (y4d91@ref) (begin (set! y4d91@ref (lambda (y4d94@rtd y4d95@i y4d96@x) ((lambda (y4d9a@val) (if (symbol? y4d9a@val) (ungensym y4d9a@val) y4d9a@val)) ((record-accessor y4d94@rtd y4d95@i) y4d96@x)))) (with-exception-handler (lambda (y4d92@c) (if (condition? y4d92@c) (y4d63@condition-printer y4d92@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" y4d92@c))) (lambda () (if (null? y4d8c@args) (y4d69@repl) (y4d81@load-r6rs-top-level (car y4d8c@args) 'load (cdr y4d8c@args))))))) '#f)) (y4d6d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
