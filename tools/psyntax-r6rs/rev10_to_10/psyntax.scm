;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! uI582@library-file-path->cache-path (unspecified)) (set! uI584@read-annotated (unspecified)) (set! uI586@annotation-stripped (unspecified)) (set! uI588@annotation? (unspecified)) (set! uI58a@annotation-source (unspecified)) (set! uI58c@annotation-expression (unspecified)) (set! uI58e@scm->fasl (unspecified)) (set! uI590@fasl-save (unspecified)) (set! uI592@fasl-load (unspecified)) (set! uI594@serialize-library (unspecified)) (set! uI596@load-serialized-library (unspecified)) (set! uI598@make-record-printer (unspecified)) (set! uI59a@compile-core (unspecified)) (set! uI59c@read-library-source-file (unspecified)) (set! uI59e@make-parameter (unspecified)) (set! uI5a0@mosh-cache-dir (unspecified)) (set! uI636@file-options-spec (unspecified)) (set! uI582@library-file-path->cache-path (lambda (uI637@x) (call-with-values (lambda () (open-string-output-port)) (lambda (uI63d@uI63a uI63e@uI63c) (let ((uI641@extract uI63e@uI63c) (uI642@p uI63d@uI63a)) (let ((uI646@display-hex '#f)) (begin (set! uI646@display-hex (lambda (uI64f@n) (if (<= '0 uI64f@n '9) (display uI64f@n uI642@p) (display (integer->char (+ (char->integer '#\a) (- uI64f@n '10))) uI642@p)))) (begin (let uI649@f ((uI647@ls (string-split uI637@x '#\/))) (if (not (null? uI647@ls)) (begin (display '"_" uI642@p) (for-each (lambda (uI64b@c) (if (or (char<=? '#\a uI64b@c '#\z) (char<=? '#\A uI64b@c '#\Z) (char<=? '#\0 uI64b@c '#\9) (memv uI64b@c '(#\- #\. #\_ #\~))) (display uI64b@c uI642@p) (begin (display '"%" uI642@p) (let ((uI64d@n (char->integer uI64b@c))) (begin (uI646@display-hex (quotient uI64d@n '16)) (uI646@display-hex (remainder uI64d@n '16))))))) (string->list (car uI647@ls))) (uI649@f (cdr uI647@ls))) (void))) (uI641@extract))))))))) (set! uI6b1@uI582@library-file-path->cache-path uI582@library-file-path->cache-path) (set! uI584@read-annotated read) (set! uI6b2@uI584@read-annotated uI584@read-annotated) (set! uI586@annotation-stripped (lambda (uI651@x) (uI58c@annotation-expression uI651@x))) (set! uI6b3@uI586@annotation-stripped uI586@annotation-stripped) (set! uI588@annotation? (lambda (uI653@x) (source-info uI653@x))) (set! uI6b4@uI588@annotation? uI588@annotation?) (set! uI58a@annotation-source (lambda (uI655@x) (source-info uI655@x))) (set! uI6b5@uI58a@annotation-source uI58a@annotation-source) (set! uI58c@annotation-expression (lambda (uI657@x) (if (pair? uI657@x) (cons (car uI657@x) (cdr uI657@x)) (display '"line:46\n")))) (set! uI6b6@uI58c@annotation-expression uI58c@annotation-expression) (set! uI58e@scm->fasl (lambda (uI659@filename) (string-append (uI5a0@mosh-cache-dir) '"/" (uI582@library-file-path->cache-path uI659@filename) '".mosh-fasl"))) (set! uI6b7@uI58e@scm->fasl uI58e@scm->fasl) (set! uI590@fasl-save (lambda (uI65b@filename uI65c@obj) (call-with-port (open-file-output-port uI65b@filename) (lambda (uI65f@port) ((symbol-value 'fasl-write!) uI65c@obj uI65f@port))))) (set! uI6b8@uI590@fasl-save uI590@fasl-save) (set! uI592@fasl-load (lambda (uI661@filename) (call-with-port (open-file-input-port uI661@filename) (symbol-value 'fasl-read!)))) (set! uI6b9@uI592@fasl-load uI592@fasl-load) (set! uI594@serialize-library (lambda (uI663@filename uI664@obj) (begin (let ((uI667@expanded2core (symbol-value 'expanded2core))) (let ((uI669@compile (symbol-value 'compile-w/o-halt))) (let ((uI66b@code uI664@obj)) (let ((uI66d@pivot (cddddr (cddddr uI66b@code)))) (let ((uI66f@visit (uI669@compile (uI667@expanded2core (car uI66d@pivot))))) (begin (set-car! uI66d@pivot uI66f@visit) (let ((uI671@pivot (cdr uI66d@pivot))) (let ((uI673@invoke (uI669@compile (uI667@expanded2core (car uI671@pivot))))) (set-car! uI671@pivot uI673@invoke))))))))) (let ((uI675@fasl-file (uI58e@scm->fasl uI663@filename))) (begin (if (file-exists? uI675@fasl-file) (delete-file uI675@fasl-file) (void)) ((call/cc (lambda (uI679@uI677) (lambda () (with-exception-handler (lambda (uI67b@c) ((call/cc (lambda (uI67d@uI678) (uI679@uI677 (lambda () (if '#t (begin (format (current-error-port) '"Warning:serialize-library failed " uI663@filename) (if (file-exists? uI675@fasl-file) (delete-file uI675@fasl-file) (void)) '#f) (uI67d@uI678 (lambda () (raise-continuable uI67b@c)))))))))) (lambda () (uI590@fasl-save uI675@fasl-file uI664@obj)))))))))))) (set! uI6ba@uI594@serialize-library uI594@serialize-library) (set! uI596@load-serialized-library (lambda (uI67f@filename uI680@obj) (and (uI5a0@mosh-cache-dir) (let ((uI683@fasl-file (uI58e@scm->fasl uI67f@filename))) (if (and (file-exists? uI683@fasl-file) ((symbol-value 'file-newer?) uI683@fasl-file uI67f@filename)) (let ((uI685@expanded2core (symbol-value 'expanded2core))) (let ((uI687@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((uI689@code (uI592@fasl-load uI683@fasl-file))) (let ((uI68b@pivot (cddddr (cddddr uI689@code)))) (let ((uI68d@visit (car uI68b@pivot))) (let ((uI68f@visit-proc (lambda () (uI687@eval-compiled-core uI68d@visit)))) (begin (set-car! uI68b@pivot uI68f@visit-proc) (let ((uI691@pivot (cdr uI68b@pivot))) (let ((uI693@invoke (car uI691@pivot))) (begin (set-car! uI691@pivot (lambda () (uI687@eval-compiled-core uI693@invoke))) (apply uI680@obj uI689@code))))))))))) '#f))))) (set! uI6bb@uI596@load-serialized-library uI596@load-serialized-library) (set! uI598@make-record-printer (lambda (uI695@name uI696@printer) (lambda uI699@x (begin (display '"record printer") (for-each display uI699@x))))) (set! uI6bc@uI598@make-record-printer uI598@make-record-printer) (set! uI59a@compile-core (lambda uI69b@x (apply error 'comile-core '"not implementated" uI69b@x))) (set! uI6bd@uI59a@compile-core uI59a@compile-core) (set! uI59c@read-library-source-file (lambda (uI69d@file-name) (with-input-from-file uI69d@file-name uI584@read-annotated))) (set! uI6be@uI59c@read-library-source-file uI59c@read-library-source-file) (set! uI59e@make-parameter (lambda uI6ad (let ((uI6ae (length uI6ad))) (if (= uI6ae '1) (apply (lambda (uI69f@x) (uI59e@make-parameter uI69f@x (lambda (uI6a1@x) uI6a1@x))) uI6ad) (if (= uI6ae '2) (apply (lambda (uI6a3@x uI6a4@fender) (let ((uI6a7@x (uI6a4@fender uI6a3@x))) (lambda uI6ab (let ((uI6ac (length uI6ab))) (if (= uI6ac '0) (apply (lambda () uI6a7@x) uI6ab) (if (= uI6ac '1) (apply (lambda (uI6a9@v) (set! uI6a7@x (uI6a4@fender uI6a9@v))) uI6ab) (error 'apply '"invalid arg count"))))))) uI6ad) (error 'apply '"invalid arg count")))))) (set! uI6bf@uI59e@make-parameter uI59e@make-parameter) (set! uI5a0@mosh-cache-dir (uI59e@make-parameter '#f)) (set! uI6c0@uI5a0@mosh-cache-dir uI5a0@mosh-cache-dir) (set! uI636@file-options-spec (lambda (uI6af@x) uI6af@x)) (set! uI6c1@uI636@file-options-spec uI636@file-options-spec) (void))
(begin (set! uI6c7@current-primitive-locations (unspecified)) (set! uI6c9@mutable? (unspecified)) (set! uI6cb@rewriter (unspecified)) (set! uI6cd@expanded->core (unspecified)) (set! uI6cf@compile-core-expr (unspecified)) (set! uI6d1@pretty-print (unspecified)) (set! uI6d3@compile-core-expr-to-port (unspecified)) (set! uI6c7@current-primitive-locations (uI6bf@uI59e@make-parameter (lambda (uI6d4@x) '#f) (lambda (uI6d6@p) uI6d6@p))) (set! uI712@uI6c7@current-primitive-locations uI6c7@current-primitive-locations) (set! uI6c9@mutable? (lambda (uI6d8@x) (or (pair? uI6d8@x) (vector? uI6d8@x) (hashtable? uI6d8@x)))) (set! uI713@uI6c9@mutable? uI6c9@mutable?) (set! uI6cb@rewriter (lambda (uI6da@quote-hack?) (let ((uI6dd@f '#f)) (begin (set! uI6dd@f (lambda (uI6de@x) (if (pair? uI6de@x) (let ((uI6e0@t (car uI6de@x))) (if (memv uI6e0@t '(quote)) (if (and uI6da@quote-hack? (uI6c9@mutable? (cadr uI6de@x))) (let ((uI6e2@g (gensym))) (begin (set-symbol-value! uI6e2@g (cadr uI6de@x)) uI6e2@g)) uI6de@x) (if (memv uI6e0@t '(case-lambda)) (cons 'case-lambda (map (lambda (uI6e4@x) (cons (car uI6e4@x) (map uI6dd@f (cdr uI6e4@x)))) (cdr uI6de@x))) (if (memv uI6e0@t '(lambda)) (cons* 'lambda (cadr uI6de@x) (map uI6dd@f (cddr uI6de@x))) (if (memv uI6e0@t '(letrec)) (let ((uI6e6@bindings (cadr uI6de@x)) (uI6e7@body* (cddr uI6de@x))) (let ((uI6ea@lhs* (map car uI6e6@bindings)) (uI6eb@rhs* (map cadr uI6e6@bindings))) (cons* 'letrec (map list uI6ea@lhs* (map uI6dd@f uI6eb@rhs*)) (map uI6dd@f uI6e7@body*)))) (if (memv uI6e0@t '(letrec*)) (let ((uI6ee@bindings (cadr uI6de@x)) (uI6ef@body* (cddr uI6de@x))) (let ((uI6f2@lhs* (map car uI6ee@bindings)) (uI6f3@rhs* (map cadr uI6ee@bindings))) (cons* 'letrec* (map list uI6f2@lhs* (map uI6dd@f uI6f3@rhs*)) (map uI6dd@f uI6ef@body*)))) (if (memv uI6e0@t '(library-letrec*)) (let ((uI6f6@name (cadr uI6de@x)) (uI6f7@x (cdr uI6de@x))) (let ((uI6fa@bindings (cadr uI6f7@x)) (uI6fb@body* (cddr uI6f7@x))) (let ((uI6fe@lhs* (map car uI6fa@bindings)) (uI6ff@lhs** (map cadr uI6fa@bindings)) (uI700@rhs* (map caddr uI6fa@bindings))) (cons* 'library-letrec* uI6f6@name (map list uI6fe@lhs* uI6ff@lhs** (map uI6dd@f uI700@rhs*)) (map uI6dd@f uI6fb@body*))))) (if (memv uI6e0@t '(begin)) (cons 'begin (map uI6dd@f (cdr uI6de@x))) (if (memv uI6e0@t '(set!)) (list 'set! (cadr uI6de@x) (uI6dd@f (caddr uI6de@x))) (if (memv uI6e0@t '(primitive)) (let ((uI704@op (cadr uI6de@x))) (let ((uI706@t ((uI6c7@current-primitive-locations) uI704@op))) (if uI706@t ((lambda (uI708@loc) uI708@loc) uI706@t) uI704@op))) (if (memv uI6e0@t '(define)) uI6de@x (if (list? uI6de@x) (map uI6dd@f uI6de@x) (error 'rewrite '"invalid form ~s ~s" uI6de@x (list? uI6de@x)))))))))))))) uI6de@x))) uI6dd@f)))) (set! uI714@uI6cb@rewriter uI6cb@rewriter) (set! uI6cd@expanded->core (lambda (uI70a@x) ((uI6cb@rewriter '#f) uI70a@x))) (set! uI715@uI6cd@expanded->core uI6cd@expanded->core) (set! uI6cf@compile-core-expr (lambda (uI70c@x) ((uI6cb@rewriter '#f) uI70c@x))) (set! uI716@uI6cf@compile-core-expr uI6cf@compile-core-expr) (set! uI6d1@pretty-print write) (set! uI717@uI6d1@pretty-print uI6d1@pretty-print) (set! uI6d3@compile-core-expr-to-port (lambda (uI70e@x uI70f@p) (uI6d1@pretty-print ((uI6cb@rewriter '#f) uI70e@x) uI70f@p))) (set! uI718@uI6d3@compile-core-expr-to-port uI6d3@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! uI767@make-collection (unspecified)) (set! uI769@current-library-collection (unspecified)) (set! uI76b@rp (unspecified)) (set! uI775@library? (unspecified)) (set! uI777@library-id (unspecified)) (set! uI779@set-library-id! (unspecified)) (set! uI77b@library-name (unspecified)) (set! uI77d@set-library-name! (unspecified)) (set! uI77f@library-version (unspecified)) (set! uI781@set-library-version! (unspecified)) (set! uI783@library-imp* (unspecified)) (set! uI785@set-library-imp*! (unspecified)) (set! uI787@library-vis* (unspecified)) (set! uI789@set-library-vis*! (unspecified)) (set! uI78b@library-inv* (unspecified)) (set! uI78d@set-library-inv*! (unspecified)) (set! uI78f@library-subst (unspecified)) (set! uI791@set-library-subst! (unspecified)) (set! uI793@library-env (unspecified)) (set! uI795@set-library-env! (unspecified)) (set! uI797@library-visit-state (unspecified)) (set! uI799@set-library-visit-state! (unspecified)) (set! uI79b@library-invoke-state (unspecified)) (set! uI79d@set-library-invoke-state! (unspecified)) (set! uI79f@library-visit-code (unspecified)) (set! uI7a1@set-library-visit-code! (unspecified)) (set! uI7a3@library-invoke-code (unspecified)) (set! uI7a5@set-library-invoke-code! (unspecified)) (set! uI7a7@library-visible? (unspecified)) (set! uI7a9@set-library-visible?! (unspecified)) (set! uI7ab@library-source-file-name (unspecified)) (set! uI7ad@set-library-source-file-name! (unspecified)) (set! uI7af@dummy (unspecified)) (set! uI7b1@find-dependencies (unspecified)) (set! uI7b3@find-library-by (unspecified)) (set! uI7b5@library-path (unspecified)) (set! uI7b7@library-extensions (unspecified)) (set! uI7b9@library-name->file-name (unspecified)) (set! uI7bb@file-locator (unspecified)) (set! uI7bd@serialize-all (unspecified)) (set! uI7bf@current-precompiled-library-loader (unspecified)) (set! uI7c1@try-load-from-file (unspecified)) (set! uI7c3@library-loader (unspecified)) (set! uI7c5@current-library-expander (unspecified)) (set! uI7c7@external-pending-libraries (unspecified)) (set! uI7c9@find-external-library (unspecified)) (set! uI7cb@find-library-by-name (unspecified)) (set! uI7cd@library-exists? (unspecified)) (set! uI7cf@find-library-by-spec/die (unspecified)) (set! uI7d1@label->binding-table (unspecified)) (set! uI7d3@install-library-record (unspecified)) (set! uI7d5@install-library (unspecified)) (set! uI7d7@imported-label->binding (unspecified)) (set! uI7d9@invoke-library (unspecified)) (set! uI7db@visit-library (unspecified)) (set! uI7dd@invoke-library-by-spec (unspecified)) (set! uI7df@installed-libraries (unspecified)) (set! uI7e1@library-spec (unspecified)) (set! uI767@make-collection (lambda () (let ((uI7e2@set '())) (let ((uI7e5@set-cons '#f)) (begin (set! uI7e5@set-cons (lambda (uI7ea@x uI7eb@ls) (if (memq uI7ea@x uI7eb@ls) uI7eb@ls (cons uI7ea@x uI7eb@ls)))) (lambda uI7e8 (let ((uI7e9 (length uI7e8))) (if (= uI7e9 '0) (apply (lambda () uI7e2@set) uI7e8) (if (= uI7e9 '1) (apply (lambda (uI7e6@x) (set! uI7e2@set (uI7e5@set-cons uI7e6@x uI7e2@set))) uI7e8) (error 'apply '"invalid arg count")))))))))) (set! uI956@uI767@make-collection uI767@make-collection) (set! uI769@current-library-collection (uI6bf@uI59e@make-parameter (uI767@make-collection) (lambda (uI7ee@x) (begin (if (not (procedure? uI7ee@x)) (assertion-violation 'current-library-collection '"not a procedure" uI7ee@x) (void)) uI7ee@x)))) (set! uI957@uI769@current-library-collection uI769@current-library-collection) (set! uI76b@rp (uI6bc@uI598@make-record-printer 'library (lambda (uI7f0@x uI7f1@p uI7f2@wr) (begin (if (not (uI775@library? uI7f0@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (uI77f@library-version uI7f0@x)) (uI77b@library-name uI7f0@x) (append (uI77b@library-name uI7f0@x) (list (uI77f@library-version uI7f0@x))))) uI7f1@p))))) (set! uI958@uI76b@rp uI76b@rp) (set! uI775@library? (lambda (uI7f6@x) (and (simple-struct? uI7f6@x) (eq? (simple-struct-name uI7f6@x) 'library)))) (set! uI959@uI775@library? uI775@library?) (set! uI777@library-id (lambda (uI7f8@x) (simple-struct-ref uI7f8@x '0))) (set! uI95a@uI777@library-id uI777@library-id) (set! uI779@set-library-id! (lambda (uI7fa@x uI7fb@val) (simple-struct-set! uI7fa@x '0 uI7fb@val))) (set! uI95b@uI779@set-library-id! uI779@set-library-id!) (set! uI77b@library-name (lambda (uI7fe@x) (simple-struct-ref uI7fe@x '1))) (set! uI95c@uI77b@library-name uI77b@library-name) (set! uI77d@set-library-name! (lambda (uI800@x uI801@val) (simple-struct-set! uI800@x '1 uI801@val))) (set! uI95d@uI77d@set-library-name! uI77d@set-library-name!) (set! uI77f@library-version (lambda (uI804@x) (simple-struct-ref uI804@x '2))) (set! uI95e@uI77f@library-version uI77f@library-version) (set! uI781@set-library-version! (lambda (uI806@x uI807@val) (simple-struct-set! uI806@x '2 uI807@val))) (set! uI95f@uI781@set-library-version! uI781@set-library-version!) (set! uI783@library-imp* (lambda (uI80a@x) (simple-struct-ref uI80a@x '3))) (set! uI960@uI783@library-imp* uI783@library-imp*) (set! uI785@set-library-imp*! (lambda (uI80c@x uI80d@val) (simple-struct-set! uI80c@x '3 uI80d@val))) (set! uI961@uI785@set-library-imp*! uI785@set-library-imp*!) (set! uI787@library-vis* (lambda (uI810@x) (simple-struct-ref uI810@x '4))) (set! uI962@uI787@library-vis* uI787@library-vis*) (set! uI789@set-library-vis*! (lambda (uI812@x uI813@val) (simple-struct-set! uI812@x '4 uI813@val))) (set! uI963@uI789@set-library-vis*! uI789@set-library-vis*!) (set! uI78b@library-inv* (lambda (uI816@x) (simple-struct-ref uI816@x '5))) (set! uI964@uI78b@library-inv* uI78b@library-inv*) (set! uI78d@set-library-inv*! (lambda (uI818@x uI819@val) (simple-struct-set! uI818@x '5 uI819@val))) (set! uI965@uI78d@set-library-inv*! uI78d@set-library-inv*!) (set! uI78f@library-subst (lambda (uI81c@x) (simple-struct-ref uI81c@x '6))) (set! uI966@uI78f@library-subst uI78f@library-subst) (set! uI791@set-library-subst! (lambda (uI81e@x uI81f@val) (simple-struct-set! uI81e@x '6 uI81f@val))) (set! uI967@uI791@set-library-subst! uI791@set-library-subst!) (set! uI793@library-env (lambda (uI822@x) (simple-struct-ref uI822@x '7))) (set! uI968@uI793@library-env uI793@library-env) (set! uI795@set-library-env! (lambda (uI824@x uI825@val) (simple-struct-set! uI824@x '7 uI825@val))) (set! uI969@uI795@set-library-env! uI795@set-library-env!) (set! uI797@library-visit-state (lambda (uI828@x) (simple-struct-ref uI828@x '8))) (set! uI96a@uI797@library-visit-state uI797@library-visit-state) (set! uI799@set-library-visit-state! (lambda (uI82a@x uI82b@val) (simple-struct-set! uI82a@x '8 uI82b@val))) (set! uI96b@uI799@set-library-visit-state! uI799@set-library-visit-state!) (set! uI79b@library-invoke-state (lambda (uI82e@x) (simple-struct-ref uI82e@x '9))) (set! uI96c@uI79b@library-invoke-state uI79b@library-invoke-state) (set! uI79d@set-library-invoke-state! (lambda (uI830@x uI831@val) (simple-struct-set! uI830@x '9 uI831@val))) (set! uI96d@uI79d@set-library-invoke-state! uI79d@set-library-invoke-state!) (set! uI79f@library-visit-code (lambda (uI834@x) (simple-struct-ref uI834@x '10))) (set! uI96e@uI79f@library-visit-code uI79f@library-visit-code) (set! uI7a1@set-library-visit-code! (lambda (uI836@x uI837@val) (simple-struct-set! uI836@x '10 uI837@val))) (set! uI96f@uI7a1@set-library-visit-code! uI7a1@set-library-visit-code!) (set! uI7a3@library-invoke-code (lambda (uI83a@x) (simple-struct-ref uI83a@x '11))) (set! uI970@uI7a3@library-invoke-code uI7a3@library-invoke-code) (set! uI7a5@set-library-invoke-code! (lambda (uI83c@x uI83d@val) (simple-struct-set! uI83c@x '11 uI83d@val))) (set! uI971@uI7a5@set-library-invoke-code! uI7a5@set-library-invoke-code!) (set! uI7a7@library-visible? (lambda (uI840@x) (simple-struct-ref uI840@x '12))) (set! uI972@uI7a7@library-visible? uI7a7@library-visible?) (set! uI7a9@set-library-visible?! (lambda (uI842@x uI843@val) (simple-struct-set! uI842@x '12 uI843@val))) (set! uI973@uI7a9@set-library-visible?! uI7a9@set-library-visible?!) (set! uI7ab@library-source-file-name (lambda (uI846@x) (simple-struct-ref uI846@x '13))) (set! uI974@uI7ab@library-source-file-name uI7ab@library-source-file-name) (set! uI7ad@set-library-source-file-name! (lambda (uI848@x uI849@val) (simple-struct-set! uI848@x '13 uI849@val))) (set! uI975@uI7ad@set-library-source-file-name! uI7ad@set-library-source-file-name!) (set! uI7af@dummy '3) (set! uI976@uI7af@dummy uI7af@dummy) (set! uI7b1@find-dependencies (lambda (uI84c@ls) (if (null? uI84c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! uI977@uI7b1@find-dependencies uI7b1@find-dependencies) (set! uI7b3@find-library-by (lambda (uI84e@pred) (let uI852@f ((uI850@ls ((uI769@current-library-collection)))) (if (null? uI850@ls) '#f (if (uI84e@pred (car uI850@ls)) (car uI850@ls) (uI852@f (cdr uI850@ls))))))) (set! uI978@uI7b3@find-library-by uI7b3@find-library-by) (set! uI7b5@library-path (uI6bf@uI59e@make-parameter '(".") (lambda (uI854@x) (if (and (list? uI854@x) (for-all string? uI854@x)) (map (lambda (uI856@x) uI856@x) uI854@x) (assertion-violation 'library-path '"not a list of strings" uI854@x))))) (set! uI979@uI7b5@library-path uI7b5@library-path) (set! uI7b7@library-extensions (uI6bf@uI59e@make-parameter '(".sls" ".ss" ".scm") (lambda (uI858@x) (if (and (list? uI858@x) (for-all string? uI858@x)) (map (lambda (uI85a@x) uI85a@x) uI858@x) (assertion-violation 'library-extensions '"not a list of strings" uI858@x))))) (set! uI97a@uI7b7@library-extensions uI7b7@library-extensions) (set! uI7b9@library-name->file-name (lambda (uI85c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (uI862@uI85f uI863@uI861) (let ((uI866@extract uI863@uI861) (uI867@p uI862@uI85f)) (let ((uI86b@display-hex '#f)) (begin (set! uI86b@display-hex (lambda (uI874@n) (if (<= '0 uI874@n '9) (display uI874@n uI867@p) (display (integer->char (+ (char->integer '#\a) (- uI874@n '10))) uI867@p)))) (begin (let uI86e@f ((uI86c@ls uI85c@x)) (if (not (null? uI86c@ls)) (begin (display '"/" uI867@p) (for-each (lambda (uI870@c) (if (or (char<=? '#\a uI870@c '#\z) (char<=? '#\A uI870@c '#\Z) (char<=? '#\0 uI870@c '#\9) (memv uI870@c '(#\- #\. #\_ #\~))) (display uI870@c uI867@p) (begin (display '"%" uI867@p) (let ((uI872@n (char->integer uI870@c))) (begin (uI86b@display-hex (quotient uI872@n '16)) (uI86b@display-hex (remainder uI872@n '16))))))) (string->list (symbol->string (car uI86c@ls)))) (uI86e@f (cdr uI86c@ls))) (void))) (uI866@extract))))))))) (set! uI97b@uI7b9@library-name->file-name uI7b9@library-name->file-name) (set! uI7bb@file-locator (uI6bf@uI59e@make-parameter (lambda (uI876@x) (let ((uI878@str (uI7b9@library-name->file-name uI876@x))) (let uI880@f ((uI87a@ls (uI7b5@library-path)) (uI87b@exts (uI7b7@library-extensions)) (uI87c@failed-list '())) (if (null? uI87a@ls) (let ((uI88a@uI885 '#f) (uI88c@uI887 '#f) (uI88e@uI886 '#f) (uI891@uI884 '#f) (uI893@make-library-resolution-condition '#f) (uI895@uI882 '#f) (uI897@uI883 '#f) (uI899@library-resolution-condition? '#f) (uI89b@condition-library '#f) (uI89d@condition-files '#f)) (begin (set! uI88a@uI885 (make-record-type-descriptor '&library-resolution uI2b91@uI28d8@&condition-rtd 'uI888 '#f '#f '#((immutable library) (immutable files)))) (set! uI88c@uI887 '#f) (set! uI88e@uI886 (make-record-constructor-descriptor uI88a@uI885 uI2b92@uI28da@&condition-rcd uI88c@uI887)) (set! uI891@uI884 (record-predicate uI88a@uI885)) (set! uI893@make-library-resolution-condition (record-constructor uI88e@uI886)) (set! uI895@uI882 (record-accessor uI88a@uI885 '0)) (set! uI897@uI883 (record-accessor uI88a@uI885 '1)) (set! uI899@library-resolution-condition? (condition-predicate uI88a@uI885)) (set! uI89b@condition-library (condition-accessor uI88a@uI885 uI895@uI882)) (set! uI89d@condition-files (condition-accessor uI88a@uI885 uI897@uI883)) (raise (condition (uI2bb1@uI2972@make-error) (uI2bd3@uI29ce@make-who-condition 'expander) (uI2b97@uI292f@make-message-condition '"cannot locate library in library-path") (uI893@make-library-resolution-condition uI876@x (reverse uI87c@failed-list)))))) (if (null? uI87b@exts) (uI880@f (cdr uI87a@ls) (uI7b7@library-extensions) uI87c@failed-list) (let ((uI89e@name (string-append (car uI87a@ls) uI878@str (car uI87b@exts)))) (if (file-exists? uI89e@name) uI89e@name (uI880@f uI87a@ls (cdr uI87b@exts) (cons uI89e@name uI87c@failed-list))))))))) (lambda (uI8a0@f) (if (procedure? uI8a0@f) uI8a0@f (assertion-violation 'file-locator '"not a procedure" uI8a0@f))))) (set! uI97c@uI7bb@file-locator uI7bb@file-locator) (set! uI7bd@serialize-all (lambda (uI8a2@serialize uI8a3@compile) (let ((uI8a7@library-desc '#f)) (begin (set! uI8a7@library-desc (lambda (uI8aa@x) (list (uI777@library-id uI8aa@x) (uI77b@library-name uI8aa@x)))) (for-each (lambda (uI8a8@x) (if (uI7ab@library-source-file-name uI8a8@x) (uI8a2@serialize (uI7ab@library-source-file-name uI8a8@x) (list (uI777@library-id uI8a8@x) (uI77b@library-name uI8a8@x) (uI77f@library-version uI8a8@x) (map uI8a7@library-desc (uI783@library-imp* uI8a8@x)) (map uI8a7@library-desc (uI787@library-vis* uI8a8@x)) (map uI8a7@library-desc (uI78b@library-inv* uI8a8@x)) (uI78f@library-subst uI8a8@x) (uI793@library-env uI8a8@x) (uI8a3@compile (uI79f@library-visit-code uI8a8@x)) (uI8a3@compile (uI7a3@library-invoke-code uI8a8@x)) (uI7a7@library-visible? uI8a8@x))) (void))) ((uI769@current-library-collection))))))) (set! uI97d@uI7bd@serialize-all uI7bd@serialize-all) (set! uI7bf@current-precompiled-library-loader (uI6bf@uI59e@make-parameter (lambda (uI8ac@filename uI8ad@sk) '#f))) (set! uI97e@uI7bf@current-precompiled-library-loader uI7bf@current-precompiled-library-loader) (set! uI7c1@try-load-from-file (lambda (uI8b0@filename) ((uI7bf@current-precompiled-library-loader) uI8b0@filename (lambda uI8d6 (let ((uI8d7 (length uI8d6))) (if (= uI8d7 '11) (apply (lambda (uI8b2@id uI8b3@name uI8b4@ver uI8b5@imp* uI8b6@vis* uI8b7@inv* uI8b8@exp-subst uI8b9@exp-env uI8ba@visit-proc uI8bb@invoke-proc uI8bc@visible?) (let uI8ca@f ((uI8c8@deps (append uI8b5@imp* uI8b6@vis* uI8b7@inv*))) (if (null? uI8c8@deps) (begin (uI7d5@install-library uI8b2@id uI8b3@name uI8b4@ver uI8b5@imp* uI8b6@vis* uI8b7@inv* uI8b8@exp-subst uI8b9@exp-env uI8ba@visit-proc uI8bb@invoke-proc '#f '#f uI8bc@visible? '#f) '#t) (let ((uI8cc@d (car uI8c8@deps))) (let ((uI8ce@label (car uI8cc@d)) (uI8cf@dname (cadr uI8cc@d))) (let ((uI8d2@l (uI7cb@find-library-by-name uI8cf@dname))) (if (and (uI775@library? uI8d2@l) (eq? uI8ce@label (uI777@library-id uI8d2@l))) (uI8ca@f (cdr uI8c8@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" uI8b3@name uI8cf@dname uI8b0@filename uI8d2@l uI8ce@label (uI777@library-id uI8d2@l)) '#f)))))))) uI8d6) (if (>= uI8d7 '0) (apply (lambda uI8d4@others '#f) uI8d6) (error 'apply '"invalid arg count")))))))) (set! uI97f@uI7c1@try-load-from-file uI7c1@try-load-from-file) (set! uI7c3@library-loader (uI6bf@uI59e@make-parameter (lambda (uI8d8@x) (let ((uI8da@file-name ((uI7bb@file-locator) uI8d8@x))) (if (not uI8da@file-name) (assertion-violation '#f '"cannot file library" uI8d8@x) (or (uI7c1@try-load-from-file uI8da@file-name) ((uI7c5@current-library-expander) (uI6be@uI59c@read-library-source-file uI8da@file-name) uI8da@file-name (lambda (uI8dc@name) (if (not (fast-equal? uI8dc@name uI8d8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (uI8e2@uI8df uI8e3@uI8e1) (let ((uI8e6@e uI8e3@uI8e1) (uI8e7@p uI8e2@uI8df)) (begin (display '"expected to find library " uI8e7@p) (write uI8d8@x uI8e7@p) (display '" in file " uI8e7@p) (display uI8da@file-name uI8e7@p) (display '", found " uI8e7@p) (write uI8dc@name uI8e7@p) (display '" instead" uI8e7@p) (uI8e6@e)))))) (void)))))))) (lambda (uI8ea@f) (if (procedure? uI8ea@f) uI8ea@f (assertion-violation 'library-locator '"not a procedure" uI8ea@f))))) (set! uI980@uI7c3@library-loader uI7c3@library-loader) (set! uI7c5@current-library-expander (uI6bf@uI59e@make-parameter (lambda (uI8ec@x) (assertion-violation 'library-expander '"not initialized")) (lambda (uI8ee@f) (if (procedure? uI8ee@f) uI8ee@f (assertion-violation 'library-expander '"not a procedure" uI8ee@f))))) (set! uI981@uI7c5@current-library-expander uI7c5@current-library-expander) (set! uI7c7@external-pending-libraries (uI6bf@uI59e@make-parameter '())) (set! uI982@uI7c7@external-pending-libraries uI7c7@external-pending-libraries) (set! uI7c9@find-external-library (lambda (uI8f0@name) (begin (if (member uI8f0@name (uI7c7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" uI8f0@name) (void)) (let ((uI8f6@uI8f3 uI7c7@external-pending-libraries) (uI8f7@uI8f5 (cons uI8f0@name (uI7c7@external-pending-libraries)))) (let ((uI8fa@swap (lambda () (let ((uI8fc@t (uI8f6@uI8f3))) (begin (uI8f6@uI8f3 uI8f7@uI8f5) (set! uI8f7@uI8f5 uI8fc@t)))))) (dynamic-wind uI8fa@swap (lambda () (begin ((uI7c3@library-loader) uI8f0@name) (or (uI7b3@find-library-by (lambda (uI8fe@x) (fast-equal? (uI77b@library-name uI8fe@x) uI8f0@name))) (assertion-violation '#f '"handling external library did not yield the correct library" uI8f0@name)))) uI8fa@swap)))))) (set! uI983@uI7c9@find-external-library uI7c9@find-external-library) (set! uI7cb@find-library-by-name (lambda (uI900@name) (or (uI7b3@find-library-by (lambda (uI902@x) (fast-equal? (uI77b@library-name uI902@x) uI900@name))) (uI7c9@find-external-library uI900@name)))) (set! uI984@uI7cb@find-library-by-name uI7cb@find-library-by-name) (set! uI7cd@library-exists? (lambda (uI904@name) (and (uI7b3@find-library-by (lambda (uI906@x) (fast-equal? (uI77b@library-name uI906@x) uI904@name))) '#t))) (set! uI985@uI7cd@library-exists? uI7cd@library-exists?) (set! uI7cf@find-library-by-spec/die (lambda (uI908@spec) (let ((uI90a@id (car uI908@spec))) (or (uI7b3@find-library-by (lambda (uI90c@x) (eq? uI90a@id (uI777@library-id uI90c@x)))) (assertion-violation '#f '"cannot find library with required spec" uI908@spec))))) (set! uI986@uI7cf@find-library-by-spec/die uI7cf@find-library-by-spec/die) (set! uI7d1@label->binding-table (make-eq-hashtable)) (set! uI987@uI7d1@label->binding-table uI7d1@label->binding-table) (set! uI7d3@install-library-record (lambda (uI90e@lib) (begin (let ((uI910@exp-env (uI793@library-env uI90e@lib))) (for-each (lambda (uI912@x) (let ((uI914@label (car uI912@x)) (uI915@binding (cdr uI912@x))) (let ((uI918@binding (let ((uI91a@t (car uI915@binding))) (if (memv uI91a@t '(global)) (cons 'global (cons uI90e@lib (cdr uI915@binding))) (if (memv uI91a@t '(global-macro)) (cons 'global-macro (cons uI90e@lib (cdr uI915@binding))) (if (memv uI91a@t '(global-macro!)) (cons 'global-macro! (cons uI90e@lib (cdr uI915@binding))) uI915@binding)))))) (begin (if (hashtable-ref uI7d1@label->binding-table uI914@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" uI914@label (hashtable-ref uI7d1@label->binding-table uI914@label '#f) uI918@binding) (exit)) (void)) (hashtable-set! uI7d1@label->binding-table uI914@label uI918@binding))))) uI910@exp-env)) ((uI769@current-library-collection) uI90e@lib)))) (set! uI988@uI7d3@install-library-record uI7d3@install-library-record) (set! uI7d5@install-library (lambda (uI91c@id uI91d@name uI91e@ver uI91f@imp* uI920@vis* uI921@inv* uI922@exp-subst uI923@exp-env uI924@visit-proc uI925@invoke-proc uI926@visit-code uI927@invoke-code uI928@visible? uI929@source-file-name) (let ((uI938@imp-lib* (map uI7cf@find-library-by-spec/die uI91f@imp*)) (uI939@vis-lib* (map uI7cf@find-library-by-spec/die uI920@vis*)) (uI93a@inv-lib* (map uI7cf@find-library-by-spec/die uI921@inv*))) (begin (if (not (and (symbol? uI91c@id) (list? uI91d@name) (list? uI91e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" uI91c@id uI91d@name uI91e@ver) (void)) (if (uI7cd@library-exists? uI91d@name) (assertion-violation 'install-library '"library is already installed" uI91d@name) (void)) (let ((uI93e@lib (make-simple-struct 'library '15 (list uI91c@id uI91d@name uI91e@ver uI938@imp-lib* uI939@vis-lib* uI93a@inv-lib* uI922@exp-subst uI923@exp-env uI924@visit-proc uI925@invoke-proc uI926@visit-code uI927@invoke-code uI928@visible? uI929@source-file-name)))) (uI7d3@install-library-record uI93e@lib)))))) (set! uI989@uI7d5@install-library uI7d5@install-library) (set! uI7d7@imported-label->binding (lambda (uI940@lab) (hashtable-ref uI7d1@label->binding-table uI940@lab '#f))) (set! uI98a@uI7d7@imported-label->binding uI7d7@imported-label->binding) (set! uI7d9@invoke-library (lambda (uI942@lib) (let ((uI944@invoke (uI79b@library-invoke-state uI942@lib))) (if (procedure? uI944@invoke) (begin (uI79d@set-library-invoke-state! uI942@lib (lambda () (assertion-violation 'invoke '"circularity detected" uI942@lib))) (for-each uI7d9@invoke-library (uI78b@library-inv* uI942@lib)) (uI79d@set-library-invoke-state! uI942@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" uI942@lib))) (uI944@invoke) (uI79d@set-library-invoke-state! uI942@lib '#t)) (void))))) (set! uI98b@uI7d9@invoke-library uI7d9@invoke-library) (set! uI7db@visit-library (lambda (uI946@lib) (let ((uI948@visit (uI797@library-visit-state uI946@lib))) (if (procedure? uI948@visit) (begin (uI799@set-library-visit-state! uI946@lib (lambda () (assertion-violation 'visit '"circularity detected" uI946@lib))) (for-each uI7d9@invoke-library (uI787@library-vis* uI946@lib)) (uI799@set-library-visit-state! uI946@lib (lambda () (assertion-violation 'invoke '"first visit did not return" uI946@lib))) (uI948@visit) (uI799@set-library-visit-state! uI946@lib '#t)) (void))))) (set! uI98c@uI7db@visit-library uI7db@visit-library) (set! uI7dd@invoke-library-by-spec (lambda (uI94a@spec) (uI7d9@invoke-library (uI7cf@find-library-by-spec/die uI94a@spec)))) (set! uI98d@uI7dd@invoke-library-by-spec uI7dd@invoke-library-by-spec) (set! uI7df@installed-libraries (lambda uI952 (let ((uI953 (length uI952))) (if (= uI953 '1) (apply (lambda (uI94c@all?) (let uI950@f ((uI94e@ls ((uI769@current-library-collection)))) (if (null? uI94e@ls) '() (if (or uI94c@all? (uI7a7@library-visible? (car uI94e@ls))) (cons (car uI94e@ls) (uI950@f (cdr uI94e@ls))) (uI950@f (cdr uI94e@ls)))))) uI952) (if (= uI953 '0) (apply (lambda () (uI7df@installed-libraries '#f)) uI952) (error 'apply '"invalid arg count")))))) (set! uI98e@uI7df@installed-libraries uI7df@installed-libraries) (set! uI7e1@library-spec (lambda (uI954@x) (begin (if (not (uI775@library? uI954@x)) (assertion-violation 'library-spec '"not a library" uI954@x) (void)) (list (uI777@library-id uI954@x) (uI77b@library-name uI954@x) (uI77f@library-version uI954@x))))) (set! uI98f@uI7e1@library-spec uI7e1@library-spec) (void))
(begin (set! uI993@build-global-define (unspecified)) (set! uIa04@build-lambda (unspecified)) (set! uIa06@build-case-lambda (unspecified)) (set! uIa34@build-sequence (unspecified)) (set! uIa36@build-void (unspecified)) (set! uIa38@build-letrec (unspecified)) (set! uIa3a@build-let (unspecified)) (set! uIa3c@build-named-let (unspecified)) (set! uIa3e@build-letrec* (unspecified)) (set! uIa40@build-library-letrec* (unspecified)) (set! uIa42@build-receive (unspecified)) (set! uI993@build-global-define (lambda (uIa43@x) (uIa36@build-void))) (set! uIad7@uI993@build-global-define uI993@build-global-define) (set! uIa04@build-lambda (lambda (uIa45@ae uIa46@vars uIa47@exp) (list 'lambda uIa46@vars uIa47@exp))) (set! uIad8@uIa04@build-lambda uIa04@build-lambda) (set! uIa06@build-case-lambda (lambda (uIa4b@ae uIa4c@vars* uIa4d@exp*) (let ((uIa52@build-error '#f) (uIa54@build-pred '#f) (uIa56@build-apply '#f) (uIa58@expand-case-lambda '#f)) (begin (set! uIa52@build-error (lambda (uIa89@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! uIa54@build-pred (lambda (uIa71@ae uIa72@n uIa73@vars) (call-with-values (lambda () (let uIa7f@f ((uIa7b@vars uIa73@vars) (uIa7c@count '0)) (if (pair? uIa7b@vars) (uIa7f@f (cdr uIa7b@vars) (+ uIa7c@count '1)) (if (null? uIa7b@vars) (values uIa7c@count '=) (values uIa7c@count '>=))))) (lambda (uIa81@uIa78 uIa82@uIa7a) (let ((uIa85@pred uIa82@uIa7a) (uIa86@count uIa81@uIa78)) (list (list 'primitive uIa85@pred) uIa72@n (list 'quote uIa86@count))))))) (set! uIa56@build-apply (lambda (uIa69@ae uIa6a@g uIa6b@vars uIa6c@exp) (list '(primitive apply) (uIa04@build-lambda uIa69@ae uIa6b@vars uIa6c@exp) uIa6a@g))) (set! uIa58@expand-case-lambda (lambda (uIa59@ae uIa5a@vars uIa5b@exp*) (let ((uIa5f@g (gensym)) (uIa60@n (gensym))) (list 'lambda uIa5f@g (uIa3a@build-let uIa59@ae (list uIa60@n) (list (list '(primitive length) uIa5f@g)) (let uIa67@f ((uIa63@vars* uIa4c@vars*) (uIa64@exp* uIa5b@exp*)) (if (null? uIa63@vars*) (uIa52@build-error uIa59@ae) (list 'if (uIa54@build-pred uIa59@ae uIa60@n (car uIa63@vars*)) (uIa56@build-apply uIa59@ae uIa5f@g (car uIa63@vars*) (car uIa64@exp*)) (uIa67@f (cdr uIa63@vars*) (cdr uIa64@exp*)))))))))) (if (= (length uIa4d@exp*) '1) (uIa04@build-lambda uIa4b@ae (car uIa4c@vars*) (car uIa4d@exp*)) (uIa58@expand-case-lambda uIa4b@ae uIa4c@vars* uIa4d@exp*)))))) (set! uIad9@uIa06@build-case-lambda uIa06@build-case-lambda) (set! uIa34@build-sequence (lambda (uIa8b@ae uIa8c@exps) (let uIa91@loop ((uIa8f@exps uIa8c@exps)) (if (null? (cdr uIa8f@exps)) (car uIa8f@exps) (if (equal? (car uIa8f@exps) (uIa36@build-void)) (uIa91@loop (cdr uIa8f@exps)) (cons 'begin uIa8f@exps)))))) (set! uIada@uIa34@build-sequence uIa34@build-sequence) (set! uIa36@build-void (lambda () '((primitive void)))) (set! uIadb@uIa36@build-void uIa36@build-void) (set! uIa38@build-letrec (lambda (uIa93@ae uIa94@vars uIa95@val-exps uIa96@body-exp) (if (null? uIa94@vars) uIa96@body-exp (list 'letrec (map list uIa94@vars uIa95@val-exps) uIa96@body-exp)))) (set! uIadc@uIa38@build-letrec uIa38@build-letrec) (set! uIa3a@build-let (lambda (uIa9b@ae uIa9c@vars uIa9d@val-exps uIa9e@body-exp) (if (null? uIa9c@vars) uIa9e@body-exp (list 'let (map list uIa9c@vars uIa9d@val-exps) uIa9e@body-exp)))) (set! uIadd@uIa3a@build-let uIa3a@build-let) (set! uIa3c@build-named-let (lambda (uIaa3@ae uIaa4@name uIaa5@vars uIaa6@val-exps uIaa7@body-exp) (list 'let uIaa4@name (map list uIaa5@vars uIaa6@val-exps) uIaa7@body-exp))) (set! uIade@uIa3c@build-named-let uIa3c@build-named-let) (set! uIa3e@build-letrec* (lambda (uIaad@ae uIaae@vars uIaaf@val-exps uIab0@body-exp) (if (null? uIaae@vars) uIab0@body-exp (uIa3a@build-let uIaad@ae uIaae@vars (map (lambda (uIab5@x) (list 'quote '#f)) uIaae@vars) (uIa34@build-sequence uIaad@ae (append (map (lambda (uIab7@lhs uIab8@rhs) (list 'set! uIab7@lhs uIab8@rhs)) uIaae@vars uIaaf@val-exps) (list uIab0@body-exp))))))) (set! uIadf@uIa3e@build-letrec* uIa3e@build-letrec*) (set! uIa40@build-library-letrec* (lambda (uIabb@ae uIabc@name uIabd@vars uIabe@locs uIabf@val-exps uIac0@body-exp) (cons 'begin (append (map (lambda (uIac7@var) (cons 'set! (cons uIac7@var '((unspecified))))) uIabd@vars) (append (apply append (map (lambda (uIac9@var uIaca@loc uIacb@val-exp) (list (list 'set! uIac9@var uIacb@val-exp) (list 'set! uIaca@loc uIac9@var))) uIabd@vars uIabe@locs uIabf@val-exps)) (list uIac0@body-exp)))))) (set! uIae0@uIa40@build-library-letrec* uIa40@build-library-letrec*) (set! uIa42@build-receive (lambda (uIacf@ae uIad0@vars uIad1@producer uIad2@body*) (begin (display '"************** in ") (cons 'receive (cons uIad0@vars (cons uIad1@producer uIad2@body*)))))) (set! uIae1@uIa42@build-receive uIa42@build-receive) (void))
(begin (set! uIaf0@file-options-macro (unspecified)) (set! uIaf2@set-cons (unspecified)) (set! uIaf4@set-union (unspecified)) (set! uIaf9@top-mark* (unspecified)) (set! uIafb@top-marked? (unspecified)) (set! uIafd@gen-lexical (unspecified)) (set! uIaff@gen-global (unspecified)) (set! uIb01@gen-label (unspecified)) (set! uIb03@gen-top-level-label (unspecified)) (set! uIb05@gen-define-label+loc (unspecified)) (set! uIb07@gen-define-label (unspecified)) (set! uIb11@rib? (unspecified)) (set! uIb13@rib-sym* (unspecified)) (set! uIb15@set-rib-sym*! (unspecified)) (set! uIb17@rib-mark** (unspecified)) (set! uIb19@set-rib-mark**! (unspecified)) (set! uIb1b@rib-label* (unspecified)) (set! uIb1d@set-rib-label*! (unspecified)) (set! uIb1f@rib-sealed/freq (unspecified)) (set! uIb21@set-rib-sealed/freq! (unspecified)) (set! uIb23@rib-cache (unspecified)) (set! uIb25@set-rib-cache! (unspecified)) (set! uIb27@dummy (unspecified)) (set! uIb29@make-empty-rib (unspecified)) (set! uIb2b@extend-rib! (unspecified)) (set! uIb2d@extend-rib/nc! (unspecified)) (set! uIb2f@make-rib-map (unspecified)) (set! uIb31@seal-rib! (unspecified)) (set! uIb33@unseal-rib! (unspecified)) (set! uIb35@make-full-rib (unspecified)) (set! uIb37@rp (unspecified)) (set! uIb41@stx? (unspecified)) (set! uIb43@stx-expr (unspecified)) (set! uIb45@set-stx-expr! (unspecified)) (set! uIb47@stx-mark* (unspecified)) (set! uIb49@set-stx-mark*! (unspecified)) (set! uIb4b@stx-subst* (unspecified)) (set! uIb4d@set-stx-subst*! (unspecified)) (set! uIb4f@stx-ae* (unspecified)) (set! uIb51@set-stx-ae*! (unspecified)) (set! uIb53@dummy (unspecified)) (set! uIb55@datum->stx (unspecified)) (set! uIb57@gen-mark (unspecified)) (set! uIb59@anti-mark (unspecified)) (set! uIb5b@anti-mark? (unspecified)) (set! uIb5d@mkstx (unspecified)) (set! uIb5f@add-mark (unspecified)) (set! uIb61@add-subst (unspecified)) (set! uIb63@syntax-kind? (unspecified)) (set! uIb65@syntax-vector->list (unspecified)) (set! uIb67@syntax-pair? (unspecified)) (set! uIb69@syntax-vector? (unspecified)) (set! uIb6b@syntax-null? (unspecified)) (set! uIb6d@syntax-list? (unspecified)) (set! uIb6f@syntax-car (unspecified)) (set! uIb71@syntax-cdr (unspecified)) (set! uIb73@syntax->list (unspecified)) (set! uIb75@id? (unspecified)) (set! uIb77@id->sym (unspecified)) (set! uIb79@bound-id=? (unspecified)) (set! uIb7b@free-id=? (unspecified)) (set! uIb7d@valid-bound-ids? (unspecified)) (set! uIb7f@distinct-bound-ids? (unspecified)) (set! uIb81@bound-id-member? (unspecified)) (set! uIb83@self-evaluating? (unspecified)) (set! uIb85@strip-annotations (unspecified)) (set! uIb87@strip (unspecified)) (set! uIb89@stx->datum (unspecified)) (set! uIb8b@id->label (unspecified)) (set! uIb8d@label->binding (unspecified)) (set! uIb8f@make-binding (unspecified)) (set! uIb91@binding-type (unspecified)) (set! uIb93@binding-value (unspecified)) (set! uIb95@raise-unbound-error (unspecified)) (set! uIb97@syntax-type (unspecified)) (set! uIba5@sanitize-binding (unspecified)) (set! uIba7@make-variable-transformer (unspecified)) (set! uIba9@variable-transformer? (unspecified)) (set! uIbab@variable-transformer-procedure (unspecified)) (set! uIbad@make-eval-transformer (unspecified)) (set! uIcfe@parse-define (unspecified)) (set! uId00@parse-define-syntax (unspecified)) (set! uId02@scheme-stx-hashtable (unspecified)) (set! uId04@scheme-stx (unspecified)) (set! uId06@lexical-var (unspecified)) (set! uId08@lexical-mutable? (unspecified)) (set! uId0a@set-lexical-mutable! (unspecified)) (set! uId0c@add-lexical (unspecified)) (set! uId0e@add-lexicals (unspecified)) (set! uId10@letrec-helper (unspecified)) (set! uId12@let-transformer (unspecified)) (set! uId14@letrec-transformer (unspecified)) (set! uId16@letrec*-transformer (unspecified)) (set! uId18@fluid-let-syntax-transformer (unspecified)) (set! uId1a@type-descriptor-transformer (unspecified)) (set! uId1c@record-type-descriptor-transformer (unspecified)) (set! uId1e@record-constructor-descriptor-transformer (unspecified)) (set! uId20@when-macro (unspecified)) (set! uId22@unless-macro (unspecified)) (set! uId24@if-transformer (unspecified)) (set! uId26@and-transformer (unspecified)) (set! uId28@or-transformer (unspecified)) (set! uId2a@case-macro (unspecified)) (set! uId2c@quote-transformer (unspecified)) (set! uId2e@case-lambda-transformer (unspecified)) (set! uId30@lambda-transformer (unspecified)) (set! uId32@bless (unspecified)) (set! uId34@with-syntax-macro (unspecified)) (set! uId36@invalid-fmls-error (unspecified)) (set! uId38@let-macro (unspecified)) (set! uId3a@let-values-macro (unspecified)) (set! uId3c@let*-values-macro (unspecified)) (set! uId3e@trace-lambda-macro (unspecified)) (set! uId40@trace-define-macro (unspecified)) (set! uId42@trace-define-syntax-macro (unspecified)) (set! uId44@trace-let/rec-syntax (unspecified)) (set! uId46@trace-let-syntax-macro (unspecified)) (set! uId48@trace-letrec-syntax-macro (unspecified)) (set! uId4a@guard-macro (unspecified)) (set! uId4c@define-enumeration-macro (unspecified)) (set! uId4e@time-macro (unspecified)) (set! uId50@delay-macro (unspecified)) (set! uId52@assert-macro (unspecified)) (set! uId54@endianness-macro (unspecified)) (set! uId56@identifier-syntax-macro (unspecified)) (set! uId58@do-macro (unspecified)) (set! uId5a@let*-macro (unspecified)) (set! uId5c@or-macro (unspecified)) (set! uId5e@and-macro (unspecified)) (set! uId60@cond-macro (unspecified)) (set! uId62@do-include (unspecified)) (set! uId64@include-macro (unspecified)) (set! uId66@include-into-macro (unspecified)) (set! uId68@syntax-rules-macro (unspecified)) (set! uId6a@quasiquote-macro (unspecified)) (set! uId6c@quasisyntax-macro (unspecified)) (set! uId6e@define-struct-macro (unspecified)) (set! uId70@define-record-type-macro (unspecified)) (set! uId72@define-condition-type-macro (unspecified)) (set! uId74@incorrect-usage-macro (unspecified)) (set! uId76@parameterize-macro (unspecified)) (set! uId78@foreign-call-transformer (unspecified)) (set! uId7a@convert-pattern (unspecified)) (set! uId7c@syntax-dispatch (unspecified)) (set! uId7e@ellipsis? (unspecified)) (set! uId80@underscore? (unspecified)) (set! uId82@verify-literals (unspecified)) (set! uId84@syntax-case-transformer (unspecified)) (set! uId86@ellipsis-map (unspecified)) (set! uId88@syntax-transformer (unspecified)) (set! uId8a@core-macro-transformer (unspecified)) (set! uId8c@symbol-macro (unspecified)) (set! uId8e@macro-transformer (unspecified)) (set! uId90@local-macro-transformer (unspecified)) (set! uId92@do-macro-call (unspecified)) (set! uId94@chi-macro (unspecified)) (set! uId96@chi-local-macro (unspecified)) (set! uId98@chi-global-macro (unspecified)) (set! uId9a@chi-expr* (unspecified)) (set! uId9c@chi-application (unspecified)) (set! uId9e@chi-expr (unspecified)) (set! uIda0@chi-set! (unspecified)) (set! uIda2@verify-formals (unspecified)) (set! uIda4@chi-lambda-clause (unspecified)) (set! uIda6@chi-lambda-clause* (unspecified)) (set! uIda8@chi-defun (unspecified)) (set! uIdaa@chi-rhs (unspecified)) (set! uIdac@expand-interaction-rhs*/init* (unspecified)) (set! uIdae@chi-rhs* (unspecified)) (set! uIdb0@find-bound=? (unspecified)) (set! uIdb2@find-dups (unspecified)) (set! uIdb4@chi-internal (unspecified)) (set! uIdb6@parse-module (unspecified)) (set! uIdc0@module-interface? (unspecified)) (set! uIdc2@module-interface-first-mark (unspecified)) (set! uIdc4@set-module-interface-first-mark! (unspecified)) (set! uIdc6@module-interface-exp-id-vec (unspecified)) (set! uIdc8@set-module-interface-exp-id-vec! (unspecified)) (set! uIdca@module-interface-exp-lab-vec (unspecified)) (set! uIdcc@set-module-interface-exp-lab-vec! (unspecified)) (set! uIdce@dummy (unspecified)) (set! uIdd0@module-interface-exp-id* (unspecified)) (set! uIdd2@chi-internal-module (unspecified)) (set! uIdd4@chi-body* (unspecified)) (set! uIdd6@expand-transformer (unspecified)) (set! uIdd8@parse-exports (unspecified)) (set! uIdda@parse-library-name (unspecified)) (set! uIddc@parse-library (unspecified)) (set! uIdde@parse-import-spec* (unspecified)) (set! uIde0@make-top-rib (unspecified)) (set! uIde2@make-collector (unspecified)) (set! uIde4@inv-collector (unspecified)) (set! uIde6@vis-collector (unspecified)) (set! uIde8@imp-collector (unspecified)) (set! uIdea@chi-library-internal (unspecified)) (set! uIdec@chi-interaction-expr (unspecified)) (set! uIdee@library-body-expander (unspecified)) (set! uIdf0@core-library-expander (unspecified)) (set! uIdf2@parse-top-level-program (unspecified)) (set! uIdf4@top-level-expander (unspecified)) (set! uIdf6@rp (unspecified)) (set! uIe00@env? (unspecified)) (set! uIe02@env-names (unspecified)) (set! uIe04@set-env-names! (unspecified)) (set! uIe06@env-labels (unspecified)) (set! uIe08@set-env-labels! (unspecified)) (set! uIe0a@env-itc (unspecified)) (set! uIe0c@set-env-itc! (unspecified)) (set! uIe0e@dummy (unspecified)) (set! uIe10@rp (unspecified)) (set! uIe1a@interaction-env? (unspecified)) (set! uIe1c@interaction-env-rib (unspecified)) (set! uIe1e@set-interaction-env-rib! (unspecified)) (set! uIe20@interaction-env-r (unspecified)) (set! uIe22@set-interaction-env-r! (unspecified)) (set! uIe24@interaction-env-locs (unspecified)) (set! uIe26@set-interaction-env-locs! (unspecified)) (set! uIe28@dummy (unspecified)) (set! uIe2a@interaction-environment-symbols (unspecified)) (set! uIe2c@environment-bindings (unspecified)) (set! uIe2e@parse-binding (unspecified)) (set! uIe30@environment? (unspecified)) (set! uIe32@environment-symbols (unspecified)) (set! uIe34@environment (unspecified)) (set! uIe36@null-environment (unspecified)) (set! uIe38@scheme-report-environment (unspecified)) (set! uIe3a@expand (unspecified)) (set! uIe3c@eval (unspecified)) (set! uIe3e@library-expander (unspecified)) (set! uIe40@boot-library-expand (unspecified)) (set! uIe42@rev-map-append (unspecified)) (set! uIe44@build-exports (unspecified)) (set! uIe46@make-export-subst (unspecified)) (set! uIe48@make-export-env/macros (unspecified)) (set! uIe4a@generate-temporaries (unspecified)) (set! uIe4c@free-identifier=? (unspecified)) (set! uIe4e@bound-identifier=? (unspecified)) (set! uIe50@make-source-condition (unspecified)) (set! uIe52@extract-position-condition (unspecified)) (set! uIe54@expression-position (unspecified)) (set! uIe56@assertion-error (unspecified)) (set! uIe58@syntax-error (unspecified)) (set! uIe5a@syntax-violation* (unspecified)) (set! uIe5c@syntax-violation (unspecified)) (set! uIe5e@identifier? (unspecified)) (set! uIe60@datum->syntax (unspecified)) (set! uIe62@syntax->datum (unspecified)) (set! uIe64@ungensym-all (unspecified)) (set! uIe66@compile-r6rs-top-level (unspecified)) (set! uIe68@pre-compile-r6rs-top-level (unspecified)) (set! uIe6a@interaction-environment (unspecified)) (set! uIe6c@top-level-context (unspecified)) (set! uIaf0@file-options-macro (lambda (uIe6d@x) (let ((uIe70@valid-option? '#f)) (begin (set! uIe70@valid-option? (lambda (uIe79@x) (and (uIb75@id? uIe79@x) (memq (uIb77@id->sym uIe79@x) '(no-fail no-create no-truncate))))) (let ((uIe71@t uIe6d@x)) (let ((uIe73@ls/false (uId7c@syntax-dispatch uIe71@t '(_ . each-any)))) (if (and uIe73@ls/false (apply (lambda (uIe75@opt*) (for-all uIe70@valid-option? uIe75@opt*)) uIe73@ls/false)) (apply (lambda (uIe77@opt*) (uId32@bless (list 'make-file-options (list 'quote uIe77@opt*)))) uIe73@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uIe71@t)))))))) (set! uI27c3@uIaf0@file-options-macro uIaf0@file-options-macro) (set! uIaf2@set-cons (lambda (uIe7b@x uIe7c@ls) (if (memq uIe7b@x uIe7c@ls) uIe7c@ls (cons uIe7b@x uIe7c@ls)))) (set! uI27c4@uIaf2@set-cons uIaf2@set-cons) (set! uIaf4@set-union (lambda (uIe7f@ls1 uIe80@ls2) (if (null? uIe7f@ls1) uIe80@ls2 (if (memq (car uIe7f@ls1) uIe80@ls2) (uIaf4@set-union (cdr uIe7f@ls1) uIe80@ls2) (cons (car uIe7f@ls1) (uIaf4@set-union (cdr uIe7f@ls1) uIe80@ls2)))))) (set! uI27c5@uIaf4@set-union uIaf4@set-union) (set! uIaf9@top-mark* '(top)) (set! uI27c6@uIaf9@top-mark* uIaf9@top-mark*) (set! uIafb@top-marked? (lambda (uIe83@m*) (memq 'top uIe83@m*))) (set! uI27c7@uIafb@top-marked? uIafb@top-marked?) (set! uIafd@gen-lexical (lambda (uIe85@sym) (if (symbol? uIe85@sym) (gensym uIe85@sym) (if (uIb41@stx? uIe85@sym) (uIafd@gen-lexical (uIb77@id->sym uIe85@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" uIe85@sym))))) (set! uI27c8@uIafd@gen-lexical uIafd@gen-lexical) (set! uIaff@gen-global (lambda (uIe87@x) (uIafd@gen-lexical uIe87@x))) (set! uI27c9@uIaff@gen-global uIaff@gen-global) (set! uIb01@gen-label (lambda (uIe89@_) (gensym))) (set! uI27ca@uIb01@gen-label uIb01@gen-label) (set! uIb03@gen-top-level-label (lambda (uIe8b@id uIe8c@rib) (let ((uIe90@find '#f)) (begin (set! uIe90@find (lambda (uIe9b@sym uIe9c@mark* uIe9d@sym* uIe9e@mark** uIe9f@label*) (and (pair? uIe9d@sym*) (if (and (eq? uIe9b@sym (car uIe9d@sym*)) (same-marks? uIe9c@mark* (car uIe9e@mark**))) (car uIe9f@label*) (uIe90@find uIe9b@sym uIe9c@mark* (cdr uIe9d@sym*) (cdr uIe9e@mark**) (cdr uIe9f@label*)))))) (let ((uIe91@sym (uIb77@id->sym uIe8b@id)) (uIe92@mark* (uIb47@stx-mark* uIe8b@id))) (let ((uIe95@sym* (uIb13@rib-sym* uIe8c@rib))) (let ((uIe97@t (and (memq uIe91@sym (uIb13@rib-sym* uIe8c@rib)) (uIe90@find uIe91@sym uIe92@mark* uIe95@sym* (uIb17@rib-mark** uIe8c@rib) (uIb1b@rib-label* uIe8c@rib))))) (if uIe97@t ((lambda (uIe99@label) (if (uI98a@uI7d7@imported-label->binding uIe99@label) (gensym) uIe99@label)) uIe97@t) (gensym))))))))) (set! uI27cb@uIb03@gen-top-level-label uIb03@gen-top-level-label) (set! uIb05@gen-define-label+loc (lambda (uIea5@id uIea6@rib) (let ((uIea9@t (uIe6c@top-level-context))) (if uIea9@t ((lambda (uIeab@env) (let ((uIead@label (uIb03@gen-top-level-label uIea5@id uIea6@rib)) (uIeae@locs (uIe24@interaction-env-locs uIeab@env))) (values uIead@label (let ((uIeb1@t (assq uIead@label uIeae@locs))) (if uIeb1@t (cdr uIeb1@t) (let ((uIeb3@loc (uIafd@gen-lexical uIea5@id))) (begin (uIe26@set-interaction-env-locs! uIeab@env (cons (cons uIead@label uIeb3@loc) uIeae@locs)) uIeb3@loc))))))) uIea9@t) (values (gensym) (uIafd@gen-lexical uIea5@id)))))) (set! uI27cc@uIb05@gen-define-label+loc uIb05@gen-define-label+loc) (set! uIb07@gen-define-label (lambda (uIeb5@id uIeb6@rib) (if (uIe6c@top-level-context) (uIb03@gen-top-level-label uIeb5@id uIeb6@rib) (gensym)))) (set! uI27cd@uIb07@gen-define-label uIb07@gen-define-label) (set! uIb11@rib? (lambda (uIeb9@x) (and (simple-struct? uIeb9@x) (eq? (simple-struct-name uIeb9@x) 'rib)))) (set! uI27ce@uIb11@rib? uIb11@rib?) (set! uIb13@rib-sym* (lambda (uIebb@x) (simple-struct-ref uIebb@x '0))) (set! uI27cf@uIb13@rib-sym* uIb13@rib-sym*) (set! uIb15@set-rib-sym*! (lambda (uIebd@x uIebe@val) (simple-struct-set! uIebd@x '0 uIebe@val))) (set! uI27d0@uIb15@set-rib-sym*! uIb15@set-rib-sym*!) (set! uIb17@rib-mark** (lambda (uIec1@x) (simple-struct-ref uIec1@x '1))) (set! uI27d1@uIb17@rib-mark** uIb17@rib-mark**) (set! uIb19@set-rib-mark**! (lambda (uIec3@x uIec4@val) (simple-struct-set! uIec3@x '1 uIec4@val))) (set! uI27d2@uIb19@set-rib-mark**! uIb19@set-rib-mark**!) (set! uIb1b@rib-label* (lambda (uIec7@x) (simple-struct-ref uIec7@x '2))) (set! uI27d3@uIb1b@rib-label* uIb1b@rib-label*) (set! uIb1d@set-rib-label*! (lambda (uIec9@x uIeca@val) (simple-struct-set! uIec9@x '2 uIeca@val))) (set! uI27d4@uIb1d@set-rib-label*! uIb1d@set-rib-label*!) (set! uIb1f@rib-sealed/freq (lambda (uIecd@x) (simple-struct-ref uIecd@x '3))) (set! uI27d5@uIb1f@rib-sealed/freq uIb1f@rib-sealed/freq) (set! uIb21@set-rib-sealed/freq! (lambda (uIecf@x uIed0@val) (simple-struct-set! uIecf@x '3 uIed0@val))) (set! uI27d6@uIb21@set-rib-sealed/freq! uIb21@set-rib-sealed/freq!) (set! uIb23@rib-cache (lambda (uIed3@x) (simple-struct-ref uIed3@x '4))) (set! uI27d7@uIb23@rib-cache uIb23@rib-cache) (set! uIb25@set-rib-cache! (lambda (uIed5@x uIed6@val) (simple-struct-set! uIed5@x '4 uIed6@val))) (set! uI27d8@uIb25@set-rib-cache! uIb25@set-rib-cache!) (set! uIb27@dummy '3) (set! uI27d9@uIb27@dummy uIb27@dummy) (set! uIb29@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! uI27da@uIb29@make-empty-rib uIb29@make-empty-rib) (set! uIb2b@extend-rib! (lambda (uIed9@rib uIeda@id uIedb@label) (let ((uIee0@find '#f)) (begin (set! uIee0@find (lambda (uIeed@sym uIeee@mark* uIeef@sym* uIef0@mark** uIef1@label*) (and (pair? uIeef@sym*) (if (and (eq? uIeed@sym (car uIeef@sym*)) (same-marks? uIeee@mark* (car uIef0@mark**))) uIef1@label* (uIee0@find uIeed@sym uIeee@mark* (cdr uIeef@sym*) (cdr uIef0@mark**) (cdr uIef1@label*)))))) (begin (if (uIb1f@rib-sealed/freq uIed9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" uIed9@rib) (void)) (let ((uIee1@sym (uIb77@id->sym uIeda@id)) (uIee2@mark* (uIb47@stx-mark* uIeda@id))) (let ((uIee5@sym* (uIb13@rib-sym* uIed9@rib))) (let ((uIee7@t (and (memq uIee1@sym (uIb13@rib-sym* uIed9@rib)) (uIee0@find uIee1@sym uIee2@mark* uIee5@sym* (uIb17@rib-mark** uIed9@rib) (uIb1b@rib-label* uIed9@rib))))) (if uIee7@t ((lambda (uIee9@p) (if (not (eq? uIedb@label (car uIee9@p))) (if (uIe6c@top-level-context) (set-car! uIee9@p uIedb@label) (uIe5c@syntax-violation '#f '"multiple definitions of identifier" uIeda@id)) (void))) uIee7@t) (begin (if (uIb23@rib-cache uIed9@rib) (hashtable-update! (uIb23@rib-cache uIed9@rib) uIee1@sym (lambda (uIeeb@e) (cons (cons uIee2@mark* uIedb@label) uIeeb@e)) '()) (void)) (uIb15@set-rib-sym*! uIed9@rib (cons uIee1@sym uIee5@sym*)) (uIb19@set-rib-mark**! uIed9@rib (cons uIee2@mark* (uIb17@rib-mark** uIed9@rib))) (uIb1d@set-rib-label*! uIed9@rib (cons uIedb@label (uIb1b@rib-label* uIed9@rib))))))))))))) (set! uI27db@uIb2b@extend-rib! uIb2b@extend-rib!) (set! uIb2d@extend-rib/nc! (lambda (uIef7@rib uIef8@id uIef9@label) (let ((uIefd@sym (uIb77@id->sym uIef8@id)) (uIefe@mark* (uIb47@stx-mark* uIef8@id))) (let ((uIf01@sym* (uIb13@rib-sym* uIef7@rib))) (begin (if (uIb23@rib-cache uIef7@rib) (hashtable-update! (uIb23@rib-cache uIef7@rib) uIefd@sym (lambda (uIf03@e) (cons (cons uIefe@mark* uIef9@label) uIf03@e)) '()) (void)) (uIb15@set-rib-sym*! uIef7@rib (cons uIefd@sym uIf01@sym*)) (uIb19@set-rib-mark**! uIef7@rib (cons uIefe@mark* (uIb17@rib-mark** uIef7@rib))) (uIb1d@set-rib-label*! uIef7@rib (cons uIef9@label (uIb1b@rib-label* uIef7@rib)))))))) (set! uI27dc@uIb2d@extend-rib/nc! uIb2d@extend-rib/nc!) (set! uIb2f@make-rib-map (lambda (uIf05@sym*) (let ((uIf07@ht (make-eq-hashtable))) (let uIf0d@f ((uIf09@i '0) (uIf0a@sym* uIf05@sym*)) (if (null? uIf0a@sym*) uIf07@ht (begin (hashtable-update! uIf07@ht (car uIf0a@sym*) (lambda (uIf0f@x) (cons uIf09@i uIf0f@x)) '()) (uIf0d@f (+ uIf09@i '1) (cdr uIf0a@sym*)))))))) (set! uI27dd@uIb2f@make-rib-map uIb2f@make-rib-map) (set! uIb31@seal-rib! (lambda (uIf11@rib) (let ((uIf13@sym* (uIb13@rib-sym* uIf11@rib))) (if (not (null? uIf13@sym*)) (begin (uIb15@set-rib-sym*! uIf11@rib (list->vector uIf13@sym*)) (uIb19@set-rib-mark**! uIf11@rib (list->vector (uIb17@rib-mark** uIf11@rib))) (uIb1d@set-rib-label*! uIf11@rib (list->vector (uIb1b@rib-label* uIf11@rib))) (uIb21@set-rib-sealed/freq! uIf11@rib (uIb2f@make-rib-map uIf13@sym*))) (void))))) (set! uI27de@uIb31@seal-rib! uIb31@seal-rib!) (set! uIb33@unseal-rib! (lambda (uIf15@rib) (if (uIb1f@rib-sealed/freq uIf15@rib) (begin (uIb21@set-rib-sealed/freq! uIf15@rib '#f) (uIb15@set-rib-sym*! uIf15@rib (vector->list (uIb13@rib-sym* uIf15@rib))) (uIb19@set-rib-mark**! uIf15@rib (vector->list (uIb17@rib-mark** uIf15@rib))) (uIb1d@set-rib-label*! uIf15@rib (vector->list (uIb1b@rib-label* uIf15@rib)))) (void)))) (set! uI27df@uIb33@unseal-rib! uIb33@unseal-rib!) (set! uIb35@make-full-rib (lambda (uIf17@id* uIf18@label*) (let ((uIf1b@r (make-simple-struct 'rib '6 (list (map uIb77@id->sym uIf17@id*) (map uIb47@stx-mark* uIf17@id*) uIf18@label* '#f '#f)))) (begin (uIb31@seal-rib! uIf1b@r) uIf1b@r)))) (set! uI27e0@uIb35@make-full-rib uIb35@make-full-rib) (set! uIb37@rp (uI6bc@uI598@make-record-printer 'stx (lambda (uIf1d@x uIf1e@p uIf1f@wr) (begin (display '"#<syntax " uIf1e@p) (write (uIb89@stx->datum uIf1d@x) uIf1e@p) (let ((uIf23@expr (uIb43@stx-expr uIf1d@x))) (if (uI6b4@uI588@annotation? uIf23@expr) (let ((uIf25@src (uI6b5@uI58a@annotation-source uIf23@expr))) (if (pair? uIf25@src) (begin (display '" [" uIf1e@p) (display (cdr uIf25@src) uIf1e@p) (display '" of " uIf1e@p) (display (car uIf25@src) uIf1e@p) (display '"]" uIf1e@p)) (void))) (void))) (display '">" uIf1e@p))))) (set! uI27e1@uIb37@rp uIb37@rp) (set! uIb41@stx? (lambda (uIf27@x) (and (simple-struct? uIf27@x) (eq? (simple-struct-name uIf27@x) 'stx)))) (set! uI27e2@uIb41@stx? uIb41@stx?) (set! uIb43@stx-expr (lambda (uIf29@x) (simple-struct-ref uIf29@x '0))) (set! uI27e3@uIb43@stx-expr uIb43@stx-expr) (set! uIb45@set-stx-expr! (lambda (uIf2b@x uIf2c@val) (simple-struct-set! uIf2b@x '0 uIf2c@val))) (set! uI27e4@uIb45@set-stx-expr! uIb45@set-stx-expr!) (set! uIb47@stx-mark* (lambda (uIf2f@x) (simple-struct-ref uIf2f@x '1))) (set! uI27e5@uIb47@stx-mark* uIb47@stx-mark*) (set! uIb49@set-stx-mark*! (lambda (uIf31@x uIf32@val) (simple-struct-set! uIf31@x '1 uIf32@val))) (set! uI27e6@uIb49@set-stx-mark*! uIb49@set-stx-mark*!) (set! uIb4b@stx-subst* (lambda (uIf35@x) (simple-struct-ref uIf35@x '2))) (set! uI27e7@uIb4b@stx-subst* uIb4b@stx-subst*) (set! uIb4d@set-stx-subst*! (lambda (uIf37@x uIf38@val) (simple-struct-set! uIf37@x '2 uIf38@val))) (set! uI27e8@uIb4d@set-stx-subst*! uIb4d@set-stx-subst*!) (set! uIb4f@stx-ae* (lambda (uIf3b@x) (simple-struct-ref uIf3b@x '3))) (set! uI27e9@uIb4f@stx-ae* uIb4f@stx-ae*) (set! uIb51@set-stx-ae*! (lambda (uIf3d@x uIf3e@val) (simple-struct-set! uIf3d@x '3 uIf3e@val))) (set! uI27ea@uIb51@set-stx-ae*! uIb51@set-stx-ae*!) (set! uIb53@dummy '3) (set! uI27eb@uIb53@dummy uIb53@dummy) (set! uIb55@datum->stx (lambda (uIf41@id uIf42@datum) (make-simple-struct 'stx '5 (list uIf42@datum (uIb47@stx-mark* uIf41@id) (uIb4b@stx-subst* uIf41@id) (uIb4f@stx-ae* uIf41@id))))) (set! uI27ec@uIb55@datum->stx uIb55@datum->stx) (set! uIb57@gen-mark (lambda () (string '#\m))) (set! uI27ed@uIb57@gen-mark uIb57@gen-mark) (set! uIb59@anti-mark '#f) (set! uI27ee@uIb59@anti-mark uIb59@anti-mark) (set! uIb5b@anti-mark? not) (set! uI27ef@uIb5b@anti-mark? uIb5b@anti-mark?) (set! uIb5d@mkstx (lambda (uIf45@e uIf46@m* uIf47@s* uIf48@ae*) (if (and (uIb41@stx? uIf45@e) (not (uIafb@top-marked? uIf46@m*))) (call-with-values (lambda () (join-wraps uIf46@m* uIf47@s* uIf48@ae* uIf45@e)) (lambda (uIf53@uIf4e uIf54@uIf50 uIf55@uIf52) (let ((uIf59@ae* uIf55@uIf52) (uIf5a@s* uIf54@uIf50) (uIf5b@m* uIf53@uIf4e)) (make-simple-struct 'stx '5 (list (uIb43@stx-expr uIf45@e) uIf5b@m* uIf5a@s* uIf59@ae*))))) (make-simple-struct 'stx '5 (list uIf45@e uIf46@m* uIf47@s* uIf48@ae*))))) (set! uI27f0@uIb5d@mkstx uIb5d@mkstx) (set! uIb5f@add-mark (lambda (uIf5f@m uIf60@e uIf61@ae) (uIb5d@mkstx uIf60@e (list uIf5f@m) '(shift) (list uIf61@ae)))) (set! uI27f1@uIb5f@add-mark uIb5f@add-mark) (set! uIb61@add-subst (lambda (uIf65@subst uIf66@e) (uIb5d@mkstx uIf66@e '() (list uIf65@subst) '()))) (set! uI27f2@uIb61@add-subst uIb61@add-subst) (set! uIb63@syntax-kind? (lambda (uIf69@x uIf6a@p?) (if (uIb41@stx? uIf69@x) (uIb63@syntax-kind? (uIb43@stx-expr uIf69@x) uIf6a@p?) (if (uI6b4@uI588@annotation? uIf69@x) (uIb63@syntax-kind? (uI6b6@uI58c@annotation-expression uIf69@x) uIf6a@p?) (uIf6a@p? uIf69@x))))) (set! uI27f3@uIb63@syntax-kind? uIb63@syntax-kind?) (set! uIb65@syntax-vector->list (lambda (uIf6d@x) (if (uIb41@stx? uIf6d@x) (let ((uIf6f@ls (uIb65@syntax-vector->list (uIb43@stx-expr uIf6d@x))) (uIf70@m* (uIb47@stx-mark* uIf6d@x)) (uIf71@s* (uIb4b@stx-subst* uIf6d@x)) (uIf72@ae* (uIb4f@stx-ae* uIf6d@x))) (map (lambda (uIf77@x) (uIb5d@mkstx uIf77@x uIf70@m* uIf71@s* uIf72@ae*)) uIf6f@ls)) (if (uI6b4@uI588@annotation? uIf6d@x) (uIb65@syntax-vector->list (uI6b6@uI58c@annotation-expression uIf6d@x)) (if (vector? uIf6d@x) (vector->list uIf6d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" uIf6d@x)))))) (set! uI27f4@uIb65@syntax-vector->list uIb65@syntax-vector->list) (set! uIb67@syntax-pair? (lambda (uIf79@x) (uIb63@syntax-kind? uIf79@x pair?))) (set! uI27f5@uIb67@syntax-pair? uIb67@syntax-pair?) (set! uIb69@syntax-vector? (lambda (uIf7b@x) (uIb63@syntax-kind? uIf7b@x vector?))) (set! uI27f6@uIb69@syntax-vector? uIb69@syntax-vector?) (set! uIb6b@syntax-null? (lambda (uIf7d@x) (uIb63@syntax-kind? uIf7d@x null?))) (set! uI27f7@uIb6b@syntax-null? uIb6b@syntax-null?) (set! uIb6d@syntax-list? (lambda (uIf7f@x) (or (uIb6b@syntax-null? uIf7f@x) (and (uIb67@syntax-pair? uIf7f@x) (uIb6d@syntax-list? (uIb71@syntax-cdr uIf7f@x)))))) (set! uI27f8@uIb6d@syntax-list? uIb6d@syntax-list?) (set! uIb6f@syntax-car (lambda (uIf81@x) (if (uIb41@stx? uIf81@x) (uIb5d@mkstx (uIb6f@syntax-car (uIb43@stx-expr uIf81@x)) (uIb47@stx-mark* uIf81@x) (uIb4b@stx-subst* uIf81@x) (uIb4f@stx-ae* uIf81@x)) (if (uI6b4@uI588@annotation? uIf81@x) (uIb6f@syntax-car (uI6b6@uI58c@annotation-expression uIf81@x)) (if (pair? uIf81@x) (car uIf81@x) (assertion-violation 'syntax-car '"BUG: not a pair" uIf81@x)))))) (set! uI27f9@uIb6f@syntax-car uIb6f@syntax-car) (set! uIb71@syntax-cdr (lambda (uIf83@x) (if (uIb41@stx? uIf83@x) (uIb5d@mkstx (uIb71@syntax-cdr (uIb43@stx-expr uIf83@x)) (uIb47@stx-mark* uIf83@x) (uIb4b@stx-subst* uIf83@x) (uIb4f@stx-ae* uIf83@x)) (if (uI6b4@uI588@annotation? uIf83@x) (uIb71@syntax-cdr (uI6b6@uI58c@annotation-expression uIf83@x)) (if (pair? uIf83@x) (cdr uIf83@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" uIf83@x)))))) (set! uI27fa@uIb71@syntax-cdr uIb71@syntax-cdr) (set! uIb73@syntax->list (lambda (uIf85@x) (if (uIb67@syntax-pair? uIf85@x) (cons (uIb6f@syntax-car uIf85@x) (uIb73@syntax->list (uIb71@syntax-cdr uIf85@x))) (if (uIb6b@syntax-null? uIf85@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" uIf85@x))))) (set! uI27fb@uIb73@syntax->list uIb73@syntax->list) (set! uIb75@id? (lambda (uIf87@x) (and (uIb41@stx? uIf87@x) (symbol? (uIb43@stx-expr uIf87@x))))) (set! uI27fc@uIb75@id? uIb75@id?) (set! uIb77@id->sym (lambda (uIf89@x) (uIb43@stx-expr uIf89@x))) (set! uI27fd@uIb77@id->sym uIb77@id->sym) (set! uIb79@bound-id=? (lambda (uIf8b@x uIf8c@y) (and (eq? (uIb77@id->sym uIf8b@x) (uIb77@id->sym uIf8c@y)) (same-marks? (uIb47@stx-mark* uIf8b@x) (uIb47@stx-mark* uIf8c@y))))) (set! uI27fe@uIb79@bound-id=? uIb79@bound-id=?) (set! uIb7b@free-id=? (lambda (uIf8f@i uIf90@j) (let ((uIf93@t0 (id->real-label uIf8f@i)) (uIf94@t1 (id->real-label uIf90@j))) (if (or uIf93@t0 uIf94@t1) (eq? uIf93@t0 uIf94@t1) (eq? (uIb77@id->sym uIf8f@i) (uIb77@id->sym uIf90@j)))))) (set! uI27ff@uIb7b@free-id=? uIb7b@free-id=?) (set! uIb7d@valid-bound-ids? (lambda (uIf97@id*) (and (for-all uIb75@id? uIf97@id*) (uIb7f@distinct-bound-ids? uIf97@id*)))) (set! uI2800@uIb7d@valid-bound-ids? uIb7d@valid-bound-ids?) (set! uIb7f@distinct-bound-ids? (lambda (uIf99@id*) (or (null? uIf99@id*) (and (not (uIb81@bound-id-member? (car uIf99@id*) (cdr uIf99@id*))) (uIb7f@distinct-bound-ids? (cdr uIf99@id*)))))) (set! uI2801@uIb7f@distinct-bound-ids? uIb7f@distinct-bound-ids?) (set! uIb81@bound-id-member? (lambda (uIf9b@id uIf9c@id*) (and (pair? uIf9c@id*) (or (uIb79@bound-id=? uIf9b@id (car uIf9c@id*)) (uIb81@bound-id-member? uIf9b@id (cdr uIf9c@id*)))))) (set! uI2802@uIb81@bound-id-member? uIb81@bound-id-member?) (set! uIb83@self-evaluating? (lambda (uIf9f@x) (or (number? uIf9f@x) (string? uIf9f@x) (char? uIf9f@x) (boolean? uIf9f@x) (regexp? uIf9f@x) (bytevector? uIf9f@x)))) (set! uI2803@uIb83@self-evaluating? uIb83@self-evaluating?) (set! uIb85@strip-annotations (lambda (uIfa1@x) (if (pair? uIfa1@x) (cons (uIb85@strip-annotations (car uIfa1@x)) (uIb85@strip-annotations (cdr uIfa1@x))) (if (vector? uIfa1@x) (vector-map uIb85@strip-annotations uIfa1@x) (if (uI6b4@uI588@annotation? uIfa1@x) (uI6b3@uI586@annotation-stripped uIfa1@x) uIfa1@x))))) (set! uI2804@uIb85@strip-annotations uIb85@strip-annotations) (set! uIb87@strip (lambda (uIfa3@x uIfa4@m*) (if (uIafb@top-marked? uIfa4@m*) (if (or (uI6b4@uI588@annotation? uIfa3@x) (and (pair? uIfa3@x) (uI6b4@uI588@annotation? (car uIfa3@x))) (and (vector? uIfa3@x) (> (vector-length uIfa3@x) '0) (uI6b4@uI588@annotation? (vector-ref uIfa3@x '0)))) (uIb85@strip-annotations uIfa3@x) uIfa3@x) (let uIfa9@f ((uIfa7@x uIfa3@x)) (if (uIb41@stx? uIfa7@x) (uIb87@strip (uIb43@stx-expr uIfa7@x) (uIb47@stx-mark* uIfa7@x)) (if (uI6b4@uI588@annotation? uIfa7@x) (uI6b3@uI586@annotation-stripped uIfa7@x) (if (pair? uIfa7@x) (let ((uIfab@a (uIfa9@f (car uIfa7@x))) (uIfac@d (uIfa9@f (cdr uIfa7@x)))) (if (and (eq? uIfab@a (car uIfa7@x)) (eq? uIfac@d (cdr uIfa7@x))) uIfa7@x (cons uIfab@a uIfac@d))) (if (vector? uIfa7@x) (let ((uIfaf@old (vector->list uIfa7@x))) (let ((uIfb1@new (map uIfa9@f uIfaf@old))) (if (for-all eq? uIfaf@old uIfb1@new) uIfa7@x (list->vector uIfb1@new)))) uIfa7@x)))))))) (set! uI2805@uIb87@strip uIb87@strip) (set! uIb89@stx->datum (lambda (uIfb3@x) (uIb87@strip uIfb3@x '()))) (set! uI2806@uIb89@stx->datum uIb89@stx->datum) (set! uIb8b@id->label (lambda (uIfb5@id) (or (id->real-label uIfb5@id) (let ((uIfb7@t (uIe6c@top-level-context))) (if uIfb7@t ((lambda (uIfb9@env) (let ((uIfbb@rib (uIe1c@interaction-env-rib uIfb9@env))) (call-with-values (lambda () (uIb05@gen-define-label+loc uIfb5@id uIfbb@rib)) (lambda (uIfc1@uIfbe uIfc2@uIfc0) (let ((uIfc5@loc_ uIfc2@uIfc0) (uIfc6@lab uIfc1@uIfbe)) (begin (uIb2b@extend-rib! uIfbb@rib uIfb5@id uIfc6@lab) uIfc6@lab)))))) uIfb7@t) '#f))))) (set! uI2807@uIb8b@id->label uIb8b@id->label) (set! uIb8d@label->binding (lambda (uIfc9@x uIfca@r) (let ((uIfcd@t (uI98a@uI7d7@imported-label->binding uIfc9@x))) (if uIfcd@t ((lambda (uIfcf@b) (if (and (pair? uIfcf@b) (eq? (car uIfcf@b) '$core-rtd)) (cons '$rtd (map uId32@bless (cdr uIfcf@b))) (if (and (pair? uIfcf@b) (eq? (car uIfcf@b) 'global-rtd)) (let ((uIfd1@lib (cadr uIfcf@b)) (uIfd2@loc (cddr uIfcf@b))) (cons '$rtd (symbol-value uIfd2@loc))) uIfcf@b))) uIfcd@t) (let ((uIfd5@t (assq uIfc9@x uIfca@r))) (if uIfd5@t (cdr uIfd5@t) (let ((uIfd7@t (uIe6c@top-level-context))) (if uIfd7@t ((lambda (uIfd9@env) (let ((uIfdb@t (assq uIfc9@x (uIe24@interaction-env-locs uIfd9@env)))) (if uIfdb@t ((lambda (uIfdd@p) (cons* 'lexical (cdr uIfdd@p) '#f)) uIfdb@t) '(displaced-lexical . #f)))) uIfd7@t) '(displaced-lexical . #f))))))))) (set! uI2808@uIb8d@label->binding uIb8d@label->binding) (set! uIb8f@make-binding cons) (set! uI2809@uIb8f@make-binding uIb8f@make-binding) (set! uIb91@binding-type car) (set! uI280a@uIb91@binding-type uIb91@binding-type) (set! uIb93@binding-value cdr) (set! uI280b@uIb93@binding-value uIb93@binding-value) (set! uIb95@raise-unbound-error (lambda (uIfdf@id) (uIe5a@syntax-violation* '#f '"unbound identifier" uIfdf@id (uI2c01@uI2a47@make-undefined-violation)))) (set! uI280c@uIb95@raise-unbound-error uIb95@raise-unbound-error) (set! uIb97@syntax-type (lambda (uIfe1@e uIfe2@r) (if (uIb75@id? uIfe1@e) (let ((uIfe5@id uIfe1@e)) (let ((uIfe7@label (uIb8b@id->label uIfe5@id))) (let ((uIfe9@b (uIb8d@label->binding uIfe7@label uIfe2@r))) (let ((uIfeb@type (uIb91@binding-type uIfe9@b))) (begin (if (not uIfe7@label) (uIb95@raise-unbound-error uIfe5@id) (void)) (let ((uIfed@t uIfeb@type)) (if (memv uIfed@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values uIfeb@type (uIb93@binding-value uIfe9@b) uIfe5@id) (values 'other '#f '#f)))))))) (if (uIb67@syntax-pair? uIfe1@e) (let ((uIfef@id (uIb6f@syntax-car uIfe1@e))) (if (uIb75@id? uIfef@id) (let ((uIff1@label (uIb8b@id->label uIfef@id))) (let ((uIff3@b (uIb8d@label->binding uIff1@label uIfe2@r))) (let ((uIff5@type (uIb91@binding-type uIff3@b))) (begin (if (not uIff1@label) (uIb95@raise-unbound-error uIfef@id) (void)) (let ((uIff7@t uIff5@type)) (if (memv uIff7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values uIff5@type (uIb93@binding-value uIff3@b) uIfef@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((uIff9@d (uIb89@stx->datum uIfe1@e))) (if (uIb83@self-evaluating? uIff9@d) (values 'constant uIff9@d '#f) (values 'other '#f '#f))))))) (set! uI280d@uIb97@syntax-type uIb97@syntax-type) (set! uIba5@sanitize-binding (lambda (uIffb@x uIffc@src) (if (procedure? uIffb@x) (cons* 'local-macro uIffb@x uIffc@src) (if (and (pair? uIffb@x) (eq? (car uIffb@x) 'macro!) (procedure? (cdr uIffb@x))) (cons* 'local-macro! (cdr uIffb@x) uIffc@src) (if (and (pair? uIffb@x) (eq? (car uIffb@x) '$rtd)) uIffb@x (assertion-violation 'expand '"invalid transformer" uIffb@x)))))) (set! uI280e@uIba5@sanitize-binding uIba5@sanitize-binding) (set! uIba7@make-variable-transformer (lambda (uIfff@x) (if (procedure? uIfff@x) (cons 'macro! uIfff@x) (assertion-violation 'make-variable-transformer '"not a procedure" uIfff@x)))) (set! uI280f@uIba7@make-variable-transformer uIba7@make-variable-transformer) (set! uIba9@variable-transformer? (lambda (uI1001@x) (and (pair? uI1001@x) (eq? (car uI1001@x) 'macro!) (procedure? (cdr uI1001@x))))) (set! uI2810@uIba9@variable-transformer? uIba9@variable-transformer?) (set! uIbab@variable-transformer-procedure (lambda (uI1003@x) (if (uIba9@variable-transformer? uI1003@x) (cdr uI1003@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" uI1003@x)))) (set! uI2811@uIbab@variable-transformer-procedure uIbab@variable-transformer-procedure) (set! uIbad@make-eval-transformer (lambda (uI1005@x) (uIba5@sanitize-binding (eval-core (uI715@uI6cd@expanded->core uI1005@x)) uI1005@x))) (set! uI2812@uIbad@make-eval-transformer uIbad@make-eval-transformer) (set! uIcfe@parse-define (lambda (uI1007@x) (let ((uI1009@t uI1007@x)) (let ((uI100b@ls/false (uId7c@syntax-dispatch uI1009@t '(_ (any . any) any . each-any)))) (if (and uI100b@ls/false (apply (lambda (uI100d@id uI100e@fmls uI100f@b uI1010@b*) (uIb75@id? uI100d@id)) uI100b@ls/false)) (apply (lambda (uI1015@id uI1016@fmls uI1017@b uI1018@b*) (begin (uIda2@verify-formals uI1016@fmls uI1007@x) (values uI1015@id (cons 'defun (cons uI1016@fmls (cons uI1017@b uI1018@b*)))))) uI100b@ls/false) (let ((uI101d@t uI1009@t)) (let ((uI101f@ls/false (uId7c@syntax-dispatch uI101d@t '(_ any any)))) (if (and uI101f@ls/false (apply (lambda (uI1021@id uI1022@val) (uIb75@id? uI1021@id)) uI101f@ls/false)) (apply (lambda (uI1025@id uI1026@val) (values uI1025@id (cons 'expr uI1026@val))) uI101f@ls/false) (let ((uI1029@t uI101d@t)) (let ((uI102b@ls/false (uId7c@syntax-dispatch uI1029@t '(_ any)))) (if (and uI102b@ls/false (apply (lambda (uI102d@id) (uIb75@id? uI102d@id)) uI102b@ls/false)) (apply (lambda (uI102f@id) (values uI102f@id (cons 'expr (uId32@bless '(void))))) uI102b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1029@t)))))))))))) (set! uI2813@uIcfe@parse-define uIcfe@parse-define) (set! uId00@parse-define-syntax (lambda (uI1031@x) (let ((uI1033@t uI1031@x)) (let ((uI1035@ls/false (uId7c@syntax-dispatch uI1033@t '(_ any any)))) (if (and uI1035@ls/false (apply (lambda (uI1037@id uI1038@val) (uIb75@id? uI1037@id)) uI1035@ls/false)) (apply (lambda (uI103b@id uI103c@val) (values uI103b@id uI103c@val)) uI1035@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1033@t)))))) (set! uI2814@uId00@parse-define-syntax uId00@parse-define-syntax) (set! uId02@scheme-stx-hashtable (make-eq-hashtable)) (set! uI2815@uId02@scheme-stx-hashtable uId02@scheme-stx-hashtable) (set! uId04@scheme-stx (lambda (uI103f@sym) (or (hashtable-ref uId02@scheme-stx-hashtable uI103f@sym '#f) (let ((uI1041@subst (uI966@uI78f@library-subst (uI984@uI7cb@find-library-by-name '(psyntax system $all))))) (let ((uI1043@stx (make-simple-struct 'stx '5 (list uI103f@sym uIaf9@top-mark* '() '())))) (let ((uI1045@stx (let ((uI1047@t (assq uI103f@sym uI1041@subst))) (if uI1047@t ((lambda (uI1049@x) (let ((uI104b@name (car uI1049@x)) (uI104c@label (cdr uI1049@x))) (uIb61@add-subst (make-simple-struct 'rib '6 (list (list uI104b@name) (list uIaf9@top-mark*) (list uI104c@label) '#f '#f)) uI1043@stx))) uI1047@t) uI1043@stx)))) (begin (hashtable-set! uId02@scheme-stx-hashtable uI103f@sym uI1045@stx) uI1045@stx))))))) (set! uI2816@uId04@scheme-stx uId04@scheme-stx) (set! uId06@lexical-var car) (set! uI2817@uId06@lexical-var uId06@lexical-var) (set! uId08@lexical-mutable? cdr) (set! uI2818@uId08@lexical-mutable? uId08@lexical-mutable?) (set! uId0a@set-lexical-mutable! set-cdr!) (set! uI2819@uId0a@set-lexical-mutable! uId0a@set-lexical-mutable!) (set! uId0c@add-lexical (lambda (uI104f@lab uI1050@lex uI1051@r) (cons (cons* uI104f@lab 'lexical uI1050@lex '#f) uI1051@r))) (set! uI281a@uId0c@add-lexical uId0c@add-lexical) (set! uId0e@add-lexicals (lambda (uI1055@lab* uI1056@lex* uI1057@r) (if (null? uI1055@lab*) uI1057@r (uId0e@add-lexicals (cdr uI1055@lab*) (cdr uI1056@lex*) (uId0c@add-lexical (car uI1055@lab*) (car uI1056@lex*) uI1057@r))))) (set! uI281b@uId0e@add-lexicals uId0e@add-lexicals) (set! uId10@letrec-helper (lambda (uI105b@e uI105c@r uI105d@mr uI105e@build) (let ((uI1063@t uI105b@e)) (let ((uI1065@ls/false (uId7c@syntax-dispatch uI1063@t '(_ #(each (any any)) any . each-any)))) (if uI1065@ls/false (apply (lambda (uI1067@lhs* uI1068@rhs* uI1069@b uI106a@b*) (if (not (uIb7d@valid-bound-ids? uI1067@lhs*)) (uId36@invalid-fmls-error uI105b@e uI1067@lhs*) (let ((uI106f@lex* (map uIafd@gen-lexical uI1067@lhs*)) (uI1070@lab* (map uIb01@gen-label uI1067@lhs*))) (let ((uI1073@rib (uIb35@make-full-rib uI1067@lhs* uI1070@lab*)) (uI1074@r (uId0e@add-lexicals uI1070@lab* uI106f@lex* uI105c@r))) (let ((uI1077@body (uIdb4@chi-internal (uIb61@add-subst uI1073@rib (cons uI1069@b uI106a@b*)) uI1074@r uI105d@mr)) (uI1078@rhs* (uId9a@chi-expr* (map (lambda (uI107b@x) (uIb61@add-subst uI1073@rib uI107b@x)) uI1068@rhs*) uI1074@r uI105d@mr))) (uI105e@build '#f uI106f@lex* uI1078@rhs* uI1077@body)))))) uI1065@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1063@t)))))) (set! uI281c@uId10@letrec-helper uId10@letrec-helper) (set! uId12@let-transformer (lambda (uI107d@e uI107e@r uI107f@mr) (let ((uI1083@t uI107d@e)) (let ((uI1085@ls/false (uId7c@syntax-dispatch uI1083@t '(_ #(each (any any)) any . each-any)))) (if uI1085@ls/false (apply (lambda (uI1087@lhs* uI1088@rhs* uI1089@b uI108a@b*) (if (not (uIb7d@valid-bound-ids? uI1087@lhs*)) (uId36@invalid-fmls-error uI107d@e uI1087@lhs*) (let ((uI108f@lex* (map uIafd@gen-lexical uI1087@lhs*)) (uI1090@lab* (map uIb01@gen-label uI1087@lhs*)) (uI1091@rhs* (uId9a@chi-expr* uI1088@rhs* uI107e@r uI107f@mr))) (let ((uI1095@rib (uIb35@make-full-rib uI1087@lhs* uI1090@lab*)) (uI1096@r (uId0e@add-lexicals uI1090@lab* uI108f@lex* uI107e@r))) (let ((uI1099@body (uIdb4@chi-internal (uIb61@add-subst uI1095@rib (cons uI1089@b uI108a@b*)) uI1096@r uI107f@mr))) (uIadd@uIa3a@build-let '#f uI108f@lex* uI1091@rhs* uI1099@body)))))) uI1085@ls/false) (let ((uI109b@t uI1083@t)) (let ((uI109d@ls/false (uId7c@syntax-dispatch uI109b@t '(_ any #(each (any any)) any . each-any)))) (if uI109d@ls/false (apply (lambda (uI109f@loop uI10a0@lhs* uI10a1@rhs* uI10a2@b uI10a3@b*) (if (not (uIb7d@valid-bound-ids? uI10a0@lhs*)) (uId36@invalid-fmls-error uI107d@e uI10a0@lhs*) (let ((uI10a9@lex* (map uIafd@gen-lexical uI10a0@lhs*)) (uI10aa@lab* (map uIb01@gen-label uI10a0@lhs*)) (uI10ab@rhs* (uId9a@chi-expr* uI10a1@rhs* uI107e@r uI107f@mr)) (uI10ac@loop-lex (uIafd@gen-lexical uI109f@loop)) (uI10ad@loop-lab (uIb01@gen-label uI109f@loop))) (let ((uI10b3@loop-rib (uIb35@make-full-rib (list uI109f@loop) (list uI10ad@loop-lab))) (uI10b4@rib (uIb35@make-full-rib uI10a0@lhs* uI10aa@lab*)) (uI10b5@r (uId0e@add-lexicals (cons uI10ad@loop-lab uI10aa@lab*) (cons uI10ac@loop-lex uI10a9@lex*) uI107e@r))) (let ((uI10b9@body (uIdb4@chi-internal (uIb61@add-subst uI10b3@loop-rib (uIb61@add-subst uI10b4@rib (cons uI10a2@b uI10a3@b*))) uI10b5@r uI107f@mr))) (uIade@uIa3c@build-named-let '#f uI10ac@loop-lex uI10a9@lex* uI10ab@rhs* uI10b9@body)))))) uI109d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI109b@t))))))))) (set! uI281d@uId12@let-transformer uId12@let-transformer) (set! uId14@letrec-transformer (lambda (uI10bb@e uI10bc@r uI10bd@mr) (uId10@letrec-helper uI10bb@e uI10bc@r uI10bd@mr uIadc@uIa38@build-letrec))) (set! uI281e@uId14@letrec-transformer uId14@letrec-transformer) (set! uId16@letrec*-transformer (lambda (uI10c1@e uI10c2@r uI10c3@mr) (uId10@letrec-helper uI10c1@e uI10c2@r uI10c3@mr uIadf@uIa3e@build-letrec*))) (set! uI281f@uId16@letrec*-transformer uId16@letrec*-transformer) (set! uId18@fluid-let-syntax-transformer (lambda (uI10c7@e uI10c8@r uI10c9@mr) (let ((uI10ce@lookup '#f)) (begin (set! uI10ce@lookup (lambda (uI10e1@x) (or (uIb8b@id->label uI10e1@x) (uIe5c@syntax-violation '#f '"unbound identifier" uI10c7@e uI10e1@x)))) (let ((uI10cf@t uI10c7@e)) (let ((uI10d1@ls/false (uId7c@syntax-dispatch uI10cf@t '(_ #(each (any any)) any . each-any)))) (if uI10d1@ls/false (apply (lambda (uI10d3@lhs* uI10d4@rhs* uI10d5@b uI10d6@b*) (if (not (uIb7d@valid-bound-ids? uI10d3@lhs*)) (uId36@invalid-fmls-error uI10c7@e uI10d3@lhs*) (let ((uI10db@lab* (map uI10ce@lookup uI10d3@lhs*)) (uI10dc@rhs* (map (lambda (uI10df@x) (uIbad@make-eval-transformer (uIdd6@expand-transformer uI10df@x uI10c9@mr))) uI10d4@rhs*))) (uIdb4@chi-internal (cons uI10d5@b uI10d6@b*) (append (map cons uI10db@lab* uI10dc@rhs*) uI10c8@r) (append (map cons uI10db@lab* uI10dc@rhs*) uI10c9@mr))))) uI10d1@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI10cf@t)))))))) (set! uI2820@uId18@fluid-let-syntax-transformer uId18@fluid-let-syntax-transformer) (set! uId1a@type-descriptor-transformer (lambda (uI10e3@e uI10e4@r uI10e5@mr) (let ((uI10e9@t uI10e3@e)) (let ((uI10eb@ls/false (uId7c@syntax-dispatch uI10e9@t '(_ any)))) (if (and uI10eb@ls/false (apply (lambda (uI10ed@id) (uIb75@id? uI10ed@id)) uI10eb@ls/false)) (apply (lambda (uI10ef@id) (let ((uI10f1@lab (uIb8b@id->label uI10ef@id))) (let ((uI10f3@b (uIb8d@label->binding uI10f1@lab uI10e4@r))) (let ((uI10f5@type (uIb91@binding-type uI10f3@b))) (begin (if (not uI10f1@lab) (uIb95@raise-unbound-error uI10ef@id) (void)) (if (not (and (eq? uI10f5@type '$rtd) (not (list? (uIb93@binding-value uI10f3@b))))) (uIe5c@syntax-violation '#f '"not a record type" uI10e3@e) (void)) (list 'quote (uIb93@binding-value uI10f3@b))))))) uI10eb@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI10e9@t)))))) (set! uI2821@uId1a@type-descriptor-transformer uId1a@type-descriptor-transformer) (set! uId1c@record-type-descriptor-transformer (lambda (uI10f7@e uI10f8@r uI10f9@mr) (let ((uI10fd@t uI10f7@e)) (let ((uI10ff@ls/false (uId7c@syntax-dispatch uI10fd@t '(_ any)))) (if (and uI10ff@ls/false (apply (lambda (uI1101@id) (uIb75@id? uI1101@id)) uI10ff@ls/false)) (apply (lambda (uI1103@id) (let ((uI1105@lab (uIb8b@id->label uI1103@id))) (let ((uI1107@b (uIb8d@label->binding uI1105@lab uI10f8@r))) (let ((uI1109@type (uIb91@binding-type uI1107@b))) (begin (if (not uI1105@lab) (uIb95@raise-unbound-error uI1103@id) (void)) (if (not (and (eq? uI1109@type '$rtd) (list? (uIb93@binding-value uI1107@b)))) (uIe5c@syntax-violation '#f '"not a record type" uI10f7@e) (void)) (uId9e@chi-expr (car (uIb93@binding-value uI1107@b)) uI10f8@r uI10f9@mr)))))) uI10ff@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI10fd@t)))))) (set! uI2822@uId1c@record-type-descriptor-transformer uId1c@record-type-descriptor-transformer) (set! uId1e@record-constructor-descriptor-transformer (lambda (uI110b@e uI110c@r uI110d@mr) (let ((uI1111@t uI110b@e)) (let ((uI1113@ls/false (uId7c@syntax-dispatch uI1111@t '(_ any)))) (if (and uI1113@ls/false (apply (lambda (uI1115@id) (uIb75@id? uI1115@id)) uI1113@ls/false)) (apply (lambda (uI1117@id) (let ((uI1119@lab (uIb8b@id->label uI1117@id))) (let ((uI111b@b (uIb8d@label->binding uI1119@lab uI110c@r))) (let ((uI111d@type (uIb91@binding-type uI111b@b))) (begin (if (not uI1119@lab) (uIb95@raise-unbound-error uI1117@id) (void)) (if (not (and (eq? uI111d@type '$rtd) (list? (uIb93@binding-value uI111b@b)))) (uIe5c@syntax-violation '#f '"invalid type" uI110b@e) (void)) (uId9e@chi-expr (cadr (uIb93@binding-value uI111b@b)) uI110c@r uI110d@mr)))))) uI1113@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1111@t)))))) (set! uI2823@uId1e@record-constructor-descriptor-transformer uId1e@record-constructor-descriptor-transformer) (set! uId20@when-macro (lambda (uI111f@e) (let ((uI1121@t uI111f@e)) (let ((uI1123@ls/false (uId7c@syntax-dispatch uI1121@t '(_ any any . each-any)))) (if uI1123@ls/false (apply (lambda (uI1125@test uI1126@e uI1127@e*) (uId32@bless (list 'if uI1125@test (cons 'begin (cons uI1126@e uI1127@e*))))) uI1123@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1121@t)))))) (set! uI2824@uId20@when-macro uId20@when-macro) (set! uId22@unless-macro (lambda (uI112b@e) (let ((uI112d@t uI112b@e)) (let ((uI112f@ls/false (uId7c@syntax-dispatch uI112d@t '(_ any any . each-any)))) (if uI112f@ls/false (apply (lambda (uI1131@test uI1132@e uI1133@e*) (uId32@bless (list 'if (list 'not uI1131@test) (cons 'begin (cons uI1132@e uI1133@e*))))) uI112f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI112d@t)))))) (set! uI2825@uId22@unless-macro uId22@unless-macro) (set! uId24@if-transformer (lambda (uI1137@e uI1138@r uI1139@mr) (let ((uI113d@t uI1137@e)) (let ((uI113f@ls/false (uId7c@syntax-dispatch uI113d@t '(_ any any any)))) (if uI113f@ls/false (apply (lambda (uI1141@e0 uI1142@e1 uI1143@e2) (list 'if (uId9e@chi-expr uI1141@e0 uI1138@r uI1139@mr) (uId9e@chi-expr uI1142@e1 uI1138@r uI1139@mr) (uId9e@chi-expr uI1143@e2 uI1138@r uI1139@mr))) uI113f@ls/false) (let ((uI1147@t uI113d@t)) (let ((uI1149@ls/false (uId7c@syntax-dispatch uI1147@t '(_ any any)))) (if uI1149@ls/false (apply (lambda (uI114b@e0 uI114c@e1) (list 'if (uId9e@chi-expr uI114b@e0 uI1138@r uI1139@mr) (uId9e@chi-expr uI114c@e1 uI1138@r uI1139@mr) (uIadb@uIa36@build-void))) uI1149@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1147@t))))))))) (set! uI2826@uId24@if-transformer uId24@if-transformer) (set! uId26@and-transformer (lambda (uI114f@e uI1150@r uI1151@mr) (let ((uI1155@t uI114f@e)) (let ((uI1157@ls/false (uId7c@syntax-dispatch uI1155@t '(_ . each-any)))) (if uI1157@ls/false (apply (lambda (uI1159@e*) (cons 'and (uId9a@chi-expr* uI1159@e* uI1150@r uI1151@mr))) uI1157@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1155@t)))))) (set! uI2827@uId26@and-transformer uId26@and-transformer) (set! uId28@or-transformer (lambda (uI115b@e uI115c@r uI115d@mr) (let ((uI1161@t uI115b@e)) (let ((uI1163@ls/false (uId7c@syntax-dispatch uI1161@t '(_ . each-any)))) (if uI1163@ls/false (apply (lambda (uI1165@e*) (cons 'or (uId9a@chi-expr* uI1165@e* uI115c@r uI115d@mr))) uI1163@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1161@t)))))) (set! uI2828@uId28@or-transformer uId28@or-transformer) (set! uId2a@case-macro (lambda (uI1167@e) (let ((uI116a@build-last '#f) (uI116c@build-one '#f)) (begin (set! uI116a@build-last (lambda (uI1191@cls) (let ((uI1193@t uI1191@cls)) (let ((uI1195@ls/false (uId7c@syntax-dispatch uI1193@t '(#(scheme-id else) any . each-any)))) (if uI1195@ls/false (apply (lambda (uI1197@e uI1198@e*) (cons 'begin (cons uI1197@e uI1198@e*))) uI1195@ls/false) (let ((uI119b@t uI1193@t)) (let ((uI119d@ls/false (uId7c@syntax-dispatch uI119b@t '_))) (if uI119d@ls/false (apply (lambda () (uI116c@build-one uI1191@cls '(if #f #f))) uI119d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI119b@t))))))))) (set! uI116c@build-one (lambda (uI1183@cls uI1184@k) (let ((uI1187@t uI1183@cls)) (let ((uI1189@ls/false (uId7c@syntax-dispatch uI1187@t '(each-any any . each-any)))) (if uI1189@ls/false (apply (lambda (uI118b@d* uI118c@e uI118d@e*) (list 'if (list 'memv 't (list 'quote uI118b@d*)) (cons 'begin (cons uI118c@e uI118d@e*)) uI1184@k)) uI1189@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1187@t)))))) (let ((uI116d@t uI1167@e)) (let ((uI116f@ls/false (uId7c@syntax-dispatch uI116d@t '(_ any)))) (if uI116f@ls/false (apply (lambda (uI1171@expr) (uId32@bless (cons 'let (cons (list (list 't uI1171@expr)) '((if #f #f)))))) uI116f@ls/false) (let ((uI1173@t uI116d@t)) (let ((uI1175@ls/false (uId7c@syntax-dispatch uI1173@t '(_ any any . each-any)))) (if uI1175@ls/false (apply (lambda (uI1177@expr uI1178@cls uI1179@cls*) (uId32@bless (list 'let (list (list 't uI1177@expr)) (let uI1181@f ((uI117d@cls uI1178@cls) (uI117e@cls* uI1179@cls*)) (if (null? uI117e@cls*) (uI116a@build-last uI117d@cls) (uI116c@build-one uI117d@cls (uI1181@f (car uI117e@cls*) (cdr uI117e@cls*)))))))) uI1175@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1173@t))))))))))) (set! uI2829@uId2a@case-macro uId2a@case-macro) (set! uId2c@quote-transformer (lambda (uI119f@e uI11a0@r uI11a1@mr) (let ((uI11a5@t uI119f@e)) (let ((uI11a7@ls/false (uId7c@syntax-dispatch uI11a5@t '(_ any)))) (if uI11a7@ls/false (apply (lambda (uI11a9@datum) (list 'quote (uIb89@stx->datum uI11a9@datum))) uI11a7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI11a5@t)))))) (set! uI282a@uId2c@quote-transformer uId2c@quote-transformer) (set! uId2e@case-lambda-transformer (lambda (uI11ab@e uI11ac@r uI11ad@mr) (let ((uI11b1@t uI11ab@e)) (let ((uI11b3@ls/false (uId7c@syntax-dispatch uI11b1@t '(_ . #(each (any any . each-any)))))) (if uI11b3@ls/false (apply (lambda (uI11b5@fmls* uI11b6@b* uI11b7@b**) (call-with-values (lambda () (uIda6@chi-lambda-clause* uI11ab@e uI11b5@fmls* (map cons uI11b6@b* uI11b7@b**) uI11ac@r uI11ad@mr)) (lambda (uI11bf@uI11bc uI11c0@uI11be) (let ((uI11c3@body* uI11c0@uI11be) (uI11c4@fmls* uI11bf@uI11bc)) (uIad9@uIa06@build-case-lambda '#f uI11c4@fmls* uI11c3@body*))))) uI11b3@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI11b1@t)))))) (set! uI282b@uId2e@case-lambda-transformer uId2e@case-lambda-transformer) (set! uId30@lambda-transformer (lambda (uI11c7@e uI11c8@r uI11c9@mr) (let ((uI11cd@t uI11c7@e)) (let ((uI11cf@ls/false (uId7c@syntax-dispatch uI11cd@t '(_ any any . each-any)))) (if uI11cf@ls/false (apply (lambda (uI11d1@fmls uI11d2@b uI11d3@b*) (call-with-values (lambda () (uIda4@chi-lambda-clause uI11c7@e uI11d1@fmls (cons uI11d2@b uI11d3@b*) uI11c8@r uI11c9@mr)) (lambda (uI11db@uI11d8 uI11dc@uI11da) (let ((uI11df@body uI11dc@uI11da) (uI11e0@fmls uI11db@uI11d8)) (uIad8@uIa04@build-lambda '#f uI11e0@fmls uI11df@body))))) uI11cf@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI11cd@t)))))) (set! uI282c@uId30@lambda-transformer uId30@lambda-transformer) (set! uId32@bless (lambda (uI11e3@x) (uIb5d@mkstx (let uI11e7@f ((uI11e5@x uI11e3@x)) (if (uIb41@stx? uI11e5@x) uI11e5@x (if (pair? uI11e5@x) (cons (uI11e7@f (car uI11e5@x)) (uI11e7@f (cdr uI11e5@x))) (if (symbol? uI11e5@x) (uId04@scheme-stx uI11e5@x) (if (vector? uI11e5@x) (vector-map uI11e7@f uI11e5@x) uI11e5@x))))) '() '() '()))) (set! uI282d@uId32@bless uId32@bless) (set! uId34@with-syntax-macro (lambda (uI11e9@e) (let ((uI11eb@t uI11e9@e)) (let ((uI11ed@ls/false (uId7c@syntax-dispatch uI11eb@t '(_ #(each (any any)) any . each-any)))) (if uI11ed@ls/false (apply (lambda (uI11ef@pat* uI11f0@expr* uI11f1@b uI11f2@b*) (let ((uI11f7@idn* (let uI11fb@f ((uI11f9@pat* uI11ef@pat*)) (if (null? uI11f9@pat*) '() (call-with-values (lambda () (uId7a@convert-pattern (car uI11f9@pat*) '())) (lambda (uI1201@uI11fe uI1202@uI1200) (let ((uI1205@idn* uI1202@uI1200) (uI1206@pat uI1201@uI11fe)) (append uI1205@idn* (uI11fb@f (cdr uI11f9@pat*)))))))))) (begin (uIda2@verify-formals (map car uI11f7@idn*) uI11e9@e) (let ((uI1209@t* (uIe4a@generate-temporaries uI11f0@expr*))) (uId32@bless (list 'let (map list uI1209@t* uI11f0@expr*) (let uI120f@f ((uI120b@pat* uI11ef@pat*) (uI120c@t* uI1209@t*)) (if (null? uI120b@pat*) (cons 'begin (cons '#f (cons uI11f1@b uI11f2@b*))) (list 'syntax-case (car uI120c@t*) '() (list (car uI120b@pat*) (uI120f@f (cdr uI120b@pat*) (cdr uI120c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car uI120b@pat*)) (car uI120c@t*)))))))))))) uI11ed@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI11eb@t)))))) (set! uI282e@uId34@with-syntax-macro uId34@with-syntax-macro) (set! uId36@invalid-fmls-error (lambda (uI1211@stx uI1212@fmls) (let ((uI1215@t uI1212@fmls)) (let ((uI1217@ls/false (uId7c@syntax-dispatch uI1215@t '#(each+ any () any)))) (if uI1217@ls/false (apply (lambda (uI1219@id* uI121a@last) (let uI121f@f ((uI121d@id* (if (uIb75@id? uI121a@last) (cons uI121a@last uI1219@id*) (if (uIb6b@syntax-null? uI121a@last) uI1219@id* (uIe5c@syntax-violation '#f '"not an identifier" uI1211@stx uI121a@last))))) (if (null? uI121d@id*) (values) (if (not (uIb75@id? (car uI121d@id*))) (uIe5c@syntax-violation '#f '"not an identifier" uI1211@stx (car uI121d@id*)) (begin (uI121f@f (cdr uI121d@id*)) (if (uIb81@bound-id-member? (car uI121d@id*) (cdr uI121d@id*)) (uIe5c@syntax-violation '#f '"duplicate binding" uI1211@stx (car uI121d@id*)) (void))))))) uI1217@ls/false) (let ((uI1221@t uI1215@t)) (let ((uI1223@ls/false (uId7c@syntax-dispatch uI1221@t '_))) (if uI1223@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"malformed binding form" uI1211@stx uI1212@fmls)) uI1223@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1221@t))))))))) (set! uI282f@uId36@invalid-fmls-error uId36@invalid-fmls-error) (set! uId38@let-macro (lambda (uI1225@stx) (let ((uI1227@t uI1225@stx)) (let ((uI1229@ls/false (uId7c@syntax-dispatch uI1227@t '(_ #(each (any any)) any . each-any)))) (if uI1229@ls/false (apply (lambda (uI122b@lhs* uI122c@rhs* uI122d@b uI122e@b*) (if (uIb7d@valid-bound-ids? uI122b@lhs*) (uId32@bless (cons (cons 'lambda (cons uI122b@lhs* (cons uI122d@b uI122e@b*))) uI122c@rhs*)) (uId36@invalid-fmls-error uI1225@stx uI122b@lhs*))) uI1229@ls/false) (let ((uI1233@t uI1227@t)) (let ((uI1235@ls/false (uId7c@syntax-dispatch uI1233@t '(_ any #(each (any any)) any . each-any)))) (if (and uI1235@ls/false (apply (lambda (uI1237@f uI1238@lhs* uI1239@rhs* uI123a@b uI123b@b*) (uIb75@id? uI1237@f)) uI1235@ls/false)) (apply (lambda (uI1241@f uI1242@lhs* uI1243@rhs* uI1244@b uI1245@b*) (if (uIb7d@valid-bound-ids? uI1242@lhs*) (uId32@bless (cons (list 'letrec (list (list uI1241@f (cons 'lambda (cons uI1242@lhs* (cons uI1244@b uI1245@b*))))) uI1241@f) uI1243@rhs*)) (uId36@invalid-fmls-error uI1225@stx uI1242@lhs*))) uI1235@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1233@t))))))))) (set! uI2830@uId38@let-macro uId38@let-macro) (set! uId3a@let-values-macro (lambda (uI124b@stx) (let ((uI124e@rename '#f) (uI1250@rename* '#f)) (begin (set! uI124e@rename (lambda (uI12b3@x uI12b4@old* uI12b5@new*) (begin (if (not (uIb75@id? uI12b3@x)) (uIe5c@syntax-violation '#f '"not an indentifier" uI124b@stx uI12b3@x) (void)) (if (uIb81@bound-id-member? uI12b3@x uI12b4@old*) (uIe5c@syntax-violation '#f '"duplicate binding" uI124b@stx uI12b3@x) (void)) (let ((uI12b9@y (gensym (uIe62@syntax->datum uI12b3@x)))) (values uI12b9@y (cons uI12b3@x uI12b4@old*) (cons uI12b9@y uI12b5@new*)))))) (set! uI1250@rename* (lambda (uI12a1@x* uI12a2@old* uI12a3@new*) (if (null? uI12a1@x*) (values '() uI12a2@old* uI12a3@new*) (call-with-values (lambda () (uI124e@rename (car uI12a1@x*) uI12a2@old* uI12a3@new*)) (lambda (uI12a7@x uI12a8@old* uI12a9@new*) (call-with-values (lambda () (uI1250@rename* (cdr uI12a1@x*) uI12a8@old* uI12a9@new*)) (lambda (uI12ad@x* uI12ae@old* uI12af@new*) (values (cons uI12a7@x uI12ad@x*) uI12ae@old* uI12af@new*)))))))) (let ((uI1251@t uI124b@stx)) (let ((uI1253@ls/false (uId7c@syntax-dispatch uI1251@t '(_ () any . each-any)))) (if uI1253@ls/false (apply (lambda (uI1255@b uI1256@b*) (cons* (uId32@bless 'let) '() uI1255@b uI1256@b*)) uI1253@ls/false) (let ((uI1259@t uI1251@t)) (let ((uI125b@ls/false (uId7c@syntax-dispatch uI1259@t '(_ #(each (any any)) any . each-any)))) (if uI125b@ls/false (apply (lambda (uI125d@lhs* uI125e@rhs* uI125f@b uI1260@b*) (uId32@bless (let uI126d@f ((uI1265@lhs* uI125d@lhs*) (uI1266@rhs* uI125e@rhs*) (uI1267@old* '()) (uI1268@new* '())) (if (null? uI1265@lhs*) (cons 'let (cons (map list uI1267@old* uI1268@new*) (cons uI125f@b uI1260@b*))) (let ((uI126f@t (car uI1265@lhs*))) (let ((uI1271@ls/false (uId7c@syntax-dispatch uI126f@t 'each-any))) (if uI1271@ls/false (apply (lambda (uI1273@x*) (call-with-values (lambda () (uI1250@rename* uI1273@x* uI1267@old* uI1268@new*)) (lambda (uI127b@uI1276 uI127c@uI1278 uI127d@uI127a) (let ((uI1281@new* uI127d@uI127a) (uI1282@old* uI127c@uI1278) (uI1283@y* uI127b@uI1276)) (list 'call-with-values (list 'lambda '() (car uI1266@rhs*)) (list 'lambda uI1283@y* (uI126d@f (cdr uI1265@lhs*) (cdr uI1266@rhs*) uI1282@old* uI1281@new*))))))) uI1271@ls/false) (let ((uI1287@t uI126f@t)) (let ((uI1289@ls/false (uId7c@syntax-dispatch uI1287@t '#(each+ any () any)))) (if uI1289@ls/false (apply (lambda (uI128b@x* uI128c@x) (call-with-values (lambda () (uI124e@rename uI128c@x uI1267@old* uI1268@new*)) (lambda (uI128f@y uI1290@old* uI1291@new*) (call-with-values (lambda () (uI1250@rename* uI128b@x* uI1290@old* uI1291@new*)) (lambda (uI1295@y* uI1296@old* uI1297@new*) (list 'call-with-values (list 'lambda '() (car uI1266@rhs*)) (list 'lambda (append uI1295@y* uI128f@y) (uI126d@f (cdr uI1265@lhs*) (cdr uI1266@rhs*) uI1296@old* uI1297@new*)))))))) uI1289@ls/false) (let ((uI129b@t uI1287@t)) (let ((uI129d@ls/false (uId7c@syntax-dispatch uI129b@t 'any))) (if uI129d@ls/false (apply (lambda (uI129f@others) (uIe5c@syntax-violation '#f '"malformed bindings" uI124b@stx uI129f@others)) uI129d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI129b@t)))))))))))))) uI125b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1259@t))))))))))) (set! uI2831@uId3a@let-values-macro uId3a@let-values-macro) (set! uId3c@let*-values-macro (lambda (uI12bb@stx) (let ((uI12be@check '#f)) (begin (set! uI12be@check (lambda (uI12ed@x*) (if (not (null? uI12ed@x*)) (let ((uI12ef@x (car uI12ed@x*))) (begin (if (not (uIb75@id? uI12ef@x)) (uIe5c@syntax-violation '#f '"not an identifier" uI12bb@stx uI12ef@x) (void)) (uI12be@check (cdr uI12ed@x*)) (if (uIb81@bound-id-member? uI12ef@x (cdr uI12ed@x*)) (uIe5c@syntax-violation '#f '"duplicate identifier" uI12bb@stx uI12ef@x) (void)))) (void)))) (let ((uI12bf@t uI12bb@stx)) (let ((uI12c1@ls/false (uId7c@syntax-dispatch uI12bf@t '(_ () any . each-any)))) (if uI12c1@ls/false (apply (lambda (uI12c3@b uI12c4@b*) (cons* (uId32@bless 'let) '() uI12c3@b uI12c4@b*)) uI12c1@ls/false) (let ((uI12c7@t uI12bf@t)) (let ((uI12c9@ls/false (uId7c@syntax-dispatch uI12c7@t '(_ #(each (any any)) any . each-any)))) (if uI12c9@ls/false (apply (lambda (uI12cb@lhs* uI12cc@rhs* uI12cd@b uI12ce@b*) (uId32@bless (let uI12d7@f ((uI12d3@lhs* uI12cb@lhs*) (uI12d4@rhs* uI12cc@rhs*)) (if (null? uI12d3@lhs*) (cons 'begin (cons uI12cd@b uI12ce@b*)) (let ((uI12d9@t (car uI12d3@lhs*))) (let ((uI12db@ls/false (uId7c@syntax-dispatch uI12d9@t 'each-any))) (if uI12db@ls/false (apply (lambda (uI12dd@x*) (begin (uI12be@check uI12dd@x*) (list 'call-with-values (list 'lambda '() (car uI12d4@rhs*)) (list 'lambda uI12dd@x* (uI12d7@f (cdr uI12d3@lhs*) (cdr uI12d4@rhs*)))))) uI12db@ls/false) (let ((uI12df@t uI12d9@t)) (let ((uI12e1@ls/false (uId7c@syntax-dispatch uI12df@t '#(each+ any () any)))) (if uI12e1@ls/false (apply (lambda (uI12e3@x* uI12e4@x) (begin (uI12be@check (cons uI12e4@x uI12e3@x*)) (list 'call-with-values (list 'lambda '() (car uI12d4@rhs*)) (list 'lambda (append uI12e3@x* uI12e4@x) (uI12d7@f (cdr uI12d3@lhs*) (cdr uI12d4@rhs*)))))) uI12e1@ls/false) (let ((uI12e7@t uI12df@t)) (let ((uI12e9@ls/false (uId7c@syntax-dispatch uI12e7@t 'any))) (if uI12e9@ls/false (apply (lambda (uI12eb@others) (uIe5c@syntax-violation '#f '"malformed bindings" uI12bb@stx uI12eb@others)) uI12e9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI12e7@t)))))))))))))) uI12c9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI12c7@t))))))))))) (set! uI2832@uId3c@let*-values-macro uId3c@let*-values-macro) (set! uId3e@trace-lambda-macro (lambda (uI12f1@stx) (let ((uI12f3@t uI12f1@stx)) (let ((uI12f5@ls/false (uId7c@syntax-dispatch uI12f3@t '(_ any each-any any . each-any)))) (if uI12f5@ls/false (apply (lambda (uI12f7@who uI12f8@fmls uI12f9@b uI12fa@b*) (if (uIb7d@valid-bound-ids? uI12f8@fmls) (uId32@bless (list 'make-traced-procedure (list 'quote uI12f7@who) (cons 'lambda (cons uI12f8@fmls (cons uI12f9@b uI12fa@b*))))) (uId36@invalid-fmls-error uI12f1@stx uI12f8@fmls))) uI12f5@ls/false) (let ((uI12ff@t uI12f3@t)) (let ((uI1301@ls/false (uId7c@syntax-dispatch uI12ff@t '(_ any #(each+ any () any) any . each-any)))) (if uI1301@ls/false (apply (lambda (uI1303@who uI1304@fmls uI1305@last uI1306@b uI1307@b*) (if (uIb7d@valid-bound-ids? (cons uI1305@last uI1304@fmls)) (uId32@bless (list 'make-traced-procedure (list 'quote uI1303@who) (cons 'lambda (cons (append uI1304@fmls uI1305@last) (cons uI1306@b uI1307@b*))))) (uId36@invalid-fmls-error uI12f1@stx (append uI1304@fmls uI1305@last)))) uI1301@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI12ff@t))))))))) (set! uI2833@uId3e@trace-lambda-macro uId3e@trace-lambda-macro) (set! uId40@trace-define-macro (lambda (uI130d@stx) (let ((uI130f@t uI130d@stx)) (let ((uI1311@ls/false (uId7c@syntax-dispatch uI130f@t '(_ (any . each-any) any . each-any)))) (if uI1311@ls/false (apply (lambda (uI1313@who uI1314@fmls uI1315@b uI1316@b*) (if (uIb7d@valid-bound-ids? uI1314@fmls) (uId32@bless (list 'define uI1313@who (list 'make-traced-procedure (list 'quote uI1313@who) (cons 'lambda (cons uI1314@fmls (cons uI1315@b uI1316@b*)))))) (uId36@invalid-fmls-error uI130d@stx uI1314@fmls))) uI1311@ls/false) (let ((uI131b@t uI130f@t)) (let ((uI131d@ls/false (uId7c@syntax-dispatch uI131b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if uI131d@ls/false (apply (lambda (uI131f@who uI1320@fmls uI1321@last uI1322@b uI1323@b*) (if (uIb7d@valid-bound-ids? (cons uI1321@last uI1320@fmls)) (uId32@bless (list 'define uI131f@who (list 'make-traced-procedure (list 'quote uI131f@who) (cons 'lambda (cons (append uI1320@fmls uI1321@last) (cons uI1322@b uI1323@b*)))))) (uId36@invalid-fmls-error uI130d@stx (append uI1320@fmls uI1321@last)))) uI131d@ls/false) (let ((uI1329@t uI131b@t)) (let ((uI132b@ls/false (uId7c@syntax-dispatch uI1329@t '(_ any any)))) (if uI132b@ls/false (apply (lambda (uI132d@who uI132e@expr) (if (uIb75@id? uI132d@who) (uId32@bless (list 'define uI132d@who (list 'let (list (list 'v uI132e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote uI132d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (uIe5c@syntax-violation '#f '"invalid name" uI130d@stx))) uI132b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1329@t)))))))))))) (set! uI2834@uId40@trace-define-macro uId40@trace-define-macro) (set! uId42@trace-define-syntax-macro (lambda (uI1331@stx) (let ((uI1333@t uI1331@stx)) (let ((uI1335@ls/false (uId7c@syntax-dispatch uI1333@t '(_ any any)))) (if uI1335@ls/false (apply (lambda (uI1337@who uI1338@expr) (if (uIb75@id? uI1337@who) (uId32@bless (list 'define-syntax uI1337@who (list 'make-traced-macro (list 'quote uI1337@who) uI1338@expr))) (uIe5c@syntax-violation '#f '"invalid name" uI1331@stx))) uI1335@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1333@t)))))) (set! uI2835@uId42@trace-define-syntax-macro uId42@trace-define-syntax-macro) (set! uId44@trace-let/rec-syntax (lambda (uI133b@who) (lambda (uI133d@stx) (let ((uI133f@t uI133d@stx)) (let ((uI1341@ls/false (uId7c@syntax-dispatch uI133f@t '(_ #(each (any any)) any . each-any)))) (if uI1341@ls/false (apply (lambda (uI1343@lhs* uI1344@rhs* uI1345@b uI1346@b*) (if (uIb7d@valid-bound-ids? uI1343@lhs*) (let ((uI134b@rhs* (map (lambda (uI134d@lhs uI134e@rhs) (list 'make-traced-macro (list 'quote uI134d@lhs) uI134e@rhs)) uI1343@lhs* uI1344@rhs*))) (uId32@bless (cons uI133b@who (cons (map list uI1343@lhs* uI134b@rhs*) (cons uI1345@b uI1346@b*))))) (uId36@invalid-fmls-error uI133d@stx uI1343@lhs*))) uI1341@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI133f@t))))))) (set! uI2836@uId44@trace-let/rec-syntax uId44@trace-let/rec-syntax) (set! uId46@trace-let-syntax-macro (uId44@trace-let/rec-syntax 'let-syntax)) (set! uI2837@uId46@trace-let-syntax-macro uId46@trace-let-syntax-macro) (set! uId48@trace-letrec-syntax-macro (uId44@trace-let/rec-syntax 'letrec-syntax)) (set! uI2838@uId48@trace-letrec-syntax-macro uId48@trace-letrec-syntax-macro) (set! uId4a@guard-macro (lambda (uI1351@x) (let ((uI1354@gen-clauses '#f)) (begin (set! uI1354@gen-clauses (lambda (uI136b@con uI136c@outerk uI136d@clause*) (let ((uI1372@f '#f) (uI1374@f* '#f)) (begin (set! uI1372@f (lambda (uI13ab@x uI13ac@k) (let ((uI13af@t uI13ab@x)) (let ((uI13b1@ls/false (uId7c@syntax-dispatch uI13af@t '(any #(scheme-id =>) any)))) (if uI13b1@ls/false (apply (lambda (uI13b3@e uI13b4@p) (let ((uI13b7@t (gensym))) (list 'let (list (list uI13b7@t uI13b3@e)) (list 'if uI13b7@t (list uI13b4@p uI13b7@t) uI13ac@k)))) uI13b1@ls/false) (let ((uI13b9@t uI13af@t)) (let ((uI13bb@ls/false (uId7c@syntax-dispatch uI13b9@t '(any)))) (if uI13bb@ls/false (apply (lambda (uI13bd@e) (let ((uI13bf@t (gensym))) (list 'let (list (list uI13bf@t uI13bd@e)) (list 'if uI13bf@t uI13bf@t uI13ac@k)))) uI13bb@ls/false) (let ((uI13c1@t uI13b9@t)) (let ((uI13c3@ls/false (uId7c@syntax-dispatch uI13c1@t '(any any . each-any)))) (if uI13c3@ls/false (apply (lambda (uI13c5@e uI13c6@v uI13c7@v*) (list 'if uI13c5@e (cons 'begin (cons uI13c6@v uI13c7@v*)) uI13ac@k)) uI13c3@ls/false) (let ((uI13cb@t uI13c1@t)) (let ((uI13cd@ls/false (uId7c@syntax-dispatch uI13cb@t '_))) (if uI13cd@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid guard clause" uI13ab@x)) uI13cd@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13cb@t))))))))))))))) (set! uI1374@f* (lambda (uI1381@x*) (let ((uI1383@t uI1381@x*)) (let ((uI1385@ls/false (uId7c@syntax-dispatch uI1383@t '()))) (if uI1385@ls/false (apply (lambda () (let ((uI1387@g (gensym))) (values (list uI1387@g (list 'lambda '() (list 'raise-continuable uI136b@con))) uI1387@g))) uI1385@ls/false) (let ((uI1389@t uI1383@t)) (let ((uI138b@ls/false (uId7c@syntax-dispatch uI1389@t '((#(scheme-id else) any . each-any))))) (if uI138b@ls/false (apply (lambda (uI138d@e uI138e@e*) (values (cons 'begin (cons uI138d@e uI138e@e*)) '#f)) uI138b@ls/false) (let ((uI1391@t uI1389@t)) (let ((uI1393@ls/false (uId7c@syntax-dispatch uI1391@t '(any . any)))) (if uI1393@ls/false (apply (lambda (uI1395@cls uI1396@cls*) (call-with-values (lambda () (uI1374@f* uI1396@cls*)) (lambda (uI139d@uI139a uI139e@uI139c) (let ((uI13a1@g uI139e@uI139c) (uI13a2@e uI139d@uI139a)) (values (uI1372@f uI1395@cls uI13a2@e) uI13a1@g))))) uI1393@ls/false) (let ((uI13a5@t uI1391@t)) (let ((uI13a7@ls/false (uId7c@syntax-dispatch uI13a5@t 'any))) (if uI13a7@ls/false (apply (lambda (uI13a9@others) (uIe5c@syntax-violation '#f '"invalid guard clause" uI13a9@others)) uI13a7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13a5@t))))))))))))))) (call-with-values (lambda () (uI1374@f* uI136d@clause*)) (lambda (uI1379@uI1376 uI137a@uI1378) (let ((uI137d@raisek uI137a@uI1378) (uI137e@code uI1379@uI1376)) (if uI137d@raisek (list (list 'call/cc (list 'lambda (list uI137d@raisek) (list uI136c@outerk (list 'lambda '() uI137e@code))))) (list uI136c@outerk (list 'lambda '() uI137e@code)))))))))) (let ((uI1355@t uI1351@x)) (let ((uI1357@ls/false (uId7c@syntax-dispatch uI1355@t '(_ (any . each-any) any . each-any)))) (if (and uI1357@ls/false (apply (lambda (uI1359@con uI135a@clause* uI135b@b uI135c@b*) (uIb75@id? uI1359@con)) uI1357@ls/false)) (apply (lambda (uI1361@con uI1362@clause* uI1363@b uI1364@b*) (let ((uI1369@outerk (gensym))) (uId32@bless (list (list 'call/cc (list 'lambda (list uI1369@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list uI1361@con) (uI1354@gen-clauses uI1361@con uI1369@outerk uI1362@clause*)) (cons 'lambda (cons '() (cons uI1363@b uI1364@b*))))))))))) uI1357@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1355@t)))))))) (set! uI2839@uId4a@guard-macro uId4a@guard-macro) (set! uId4c@define-enumeration-macro (lambda (uI13cf@stx) (let ((uI13d2@set? '#f) (uI13d4@remove-dups '#f)) (begin (set! uI13d2@set? (lambda (uI13eb@x) (or (null? uI13eb@x) (and (not (memq (car uI13eb@x) (cdr uI13eb@x))) (uI13d2@set? (cdr uI13eb@x)))))) (set! uI13d4@remove-dups (lambda (uI13e9@ls) (if (null? uI13e9@ls) '() (cons (car uI13e9@ls) (uI13d4@remove-dups (remq (car uI13e9@ls) (cdr uI13e9@ls))))))) (let ((uI13d5@t uI13cf@stx)) (let ((uI13d7@ls/false (uId7c@syntax-dispatch uI13d5@t '(_ any each-any any)))) (if (and uI13d7@ls/false (apply (lambda (uI13d9@name uI13da@id* uI13db@maker) (and (uIb75@id? uI13d9@name) (uIb75@id? uI13db@maker) (for-all uIb75@id? uI13da@id*))) uI13d7@ls/false)) (apply (lambda (uI13df@name uI13e0@id* uI13e1@maker) (let ((uI13e5@name* (uI13d4@remove-dups (uIe62@syntax->datum uI13e0@id*))) (uI13e6@mk (gensym))) (uId32@bless (list 'begin (list 'define uI13e6@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote uI13e5@name*)))) (list 'define-syntax uI13df@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote uI13e5@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote uI13df@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax uI13e1@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote uI13e1@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote uI13e5@name*)) (cons 'syntax-violation (cons (list 'quote uI13e1@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons uI13e6@mk '('(n* ...))))))))))))) uI13d7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13d5@t)))))))) (set! uI283a@uId4c@define-enumeration-macro uId4c@define-enumeration-macro) (set! uId4e@time-macro (lambda (uI13ed@stx) (let ((uI13ef@t uI13ed@stx)) (let ((uI13f1@ls/false (uId7c@syntax-dispatch uI13ef@t '(_ any)))) (if uI13f1@ls/false (apply (lambda (uI13f3@expr) (uId32@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() uI13f3@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) uI13f1@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13ef@t)))))) (set! uI283b@uId4e@time-macro uId4e@time-macro) (set! uId50@delay-macro (lambda (uI13f5@stx) (let ((uI13f7@t uI13f5@stx)) (let ((uI13f9@ls/false (uId7c@syntax-dispatch uI13f7@t '(_ any)))) (if uI13f9@ls/false (apply (lambda (uI13fb@expr) (uId32@bless (list 'make-promise (list 'lambda '() uI13fb@expr)))) uI13f9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13f7@t)))))) (set! uI283c@uId50@delay-macro uId50@delay-macro) (set! uId52@assert-macro (lambda (uI13fd@stx) (let ((uI13ff@t uI13fd@stx)) (let ((uI1401@ls/false (uId7c@syntax-dispatch uI13ff@t '(_ any)))) (if uI1401@ls/false (apply (lambda (uI1403@expr) (let ((uI1405@pos (or (uIe54@expression-position uI13fd@stx) (uIe54@expression-position uI1403@expr)))) (uId32@bless (list 'unless uI1403@expr (list 'assertion-error (list 'quote uI1403@expr) (list 'quote uI1405@pos)))))) uI1401@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI13ff@t)))))) (set! uI283d@uId52@assert-macro uId52@assert-macro) (set! uId54@endianness-macro (lambda (uI1407@stx) (let ((uI1409@t uI1407@stx)) (let ((uI140b@ls/false (uId7c@syntax-dispatch uI1409@t '(_ any)))) (if uI140b@ls/false (apply (lambda (uI140d@e) (let ((uI140f@t (uIe62@syntax->datum uI140d@e))) (if (memv uI140f@t '(little)) (uId32@bless ''little) (if (memv uI140f@t '(big)) (uId32@bless ''big) (uIe5c@syntax-violation '#f '"endianness must be big or little" uI1407@stx))))) uI140b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1409@t)))))) (set! uI283e@uId54@endianness-macro uId54@endianness-macro) (set! uId56@identifier-syntax-macro (lambda (uI1411@stx) (let ((uI1413@t uI1411@stx)) (let ((uI1415@ls/false (uId7c@syntax-dispatch uI1413@t '(_ any)))) (if uI1415@ls/false (apply (lambda (uI1417@expr) (uId32@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax uI1417@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax uI1417@expr) '((syntax (e* ...)))))))))) uI1415@ls/false) (let ((uI1419@t uI1413@t)) (let ((uI141b@ls/false (uId7c@syntax-dispatch uI1419@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and uI141b@ls/false (apply (lambda (uI141d@id1 uI141e@expr1 uI141f@id2 uI1420@expr2 uI1421@expr3) (and (uIb75@id? uI141d@id1) (uIb75@id? uI141f@id2) (uIb75@id? uI1420@expr2))) uI141b@ls/false)) (apply (lambda (uI1427@id1 uI1428@expr1 uI1429@id2 uI142a@expr2 uI142b@expr3) (uId32@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax uI1428@expr1)) (list (list 'set! 'id uI142a@expr2) (list 'syntax uI142b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons uI1428@expr1 '(e* ...))))))))) uI141b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1419@t))))))))) (set! uI283f@uId56@identifier-syntax-macro uId56@identifier-syntax-macro) (set! uId58@do-macro (lambda (uI1431@stx) (let ((uI1434@bind '#f)) (begin (set! uI1434@bind (lambda (uI144b@x) (let ((uI144d@t uI144b@x)) (let ((uI144f@ls/false (uId7c@syntax-dispatch uI144d@t '(any any)))) (if uI144f@ls/false (apply (lambda (uI1451@x uI1452@init) (list uI1451@x uI1452@init uI1451@x)) uI144f@ls/false) (let ((uI1455@t uI144d@t)) (let ((uI1457@ls/false (uId7c@syntax-dispatch uI1455@t '(any any any)))) (if uI1457@ls/false (apply (lambda (uI1459@x uI145a@init uI145b@step) (list uI1459@x uI145a@init uI145b@step)) uI1457@ls/false) (let ((uI145f@t uI1455@t)) (let ((uI1461@ls/false (uId7c@syntax-dispatch uI145f@t '_))) (if uI1461@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid binding" uI1431@stx)) uI1461@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI145f@t)))))))))))) (let ((uI1435@t uI1431@stx)) (let ((uI1437@ls/false (uId7c@syntax-dispatch uI1435@t '(_ each-any (any . each-any) . each-any)))) (if uI1437@ls/false (apply (lambda (uI1439@binding* uI143a@test uI143b@expr* uI143c@command*) (let ((uI1441@t (map uI1434@bind uI1439@binding*))) (let ((uI1443@ls/false (uId7c@syntax-dispatch uI1441@t '#(each (any any any))))) (if uI1443@ls/false (apply (lambda (uI1445@x* uI1446@init* uI1447@step*) (if (uIb7d@valid-bound-ids? uI1445@x*) (uId32@bless (list 'letrec (list (list 'loop (list 'lambda uI1445@x* (list 'if uI143a@test (cons 'begin (cons '(if #f #f) uI143b@expr*)) (cons 'begin (append uI143c@command* (list (cons 'loop uI1447@step*)))))))) (cons 'loop uI1446@init*))) (uIe5c@syntax-violation '#f '"invalid bindings" uI1431@stx))) uI1443@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1441@t))))) uI1437@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1435@t)))))))) (set! uI2840@uId58@do-macro uId58@do-macro) (set! uId5a@let*-macro (lambda (uI1463@stx) (let ((uI1465@t uI1463@stx)) (let ((uI1467@ls/false (uId7c@syntax-dispatch uI1465@t '(_ #(each (any any)) any . each-any)))) (if (and uI1467@ls/false (apply (lambda (uI1469@lhs* uI146a@rhs* uI146b@b uI146c@b*) (for-all uIb75@id? uI1469@lhs*)) uI1467@ls/false)) (apply (lambda (uI1471@lhs* uI1472@rhs* uI1473@b uI1474@b*) (uId32@bless (let uI147b@f ((uI1479@x* (map list uI1471@lhs* uI1472@rhs*))) (if (null? uI1479@x*) (cons 'let (cons '() (cons uI1473@b uI1474@b*))) (list 'let (list (car uI1479@x*)) (uI147b@f (cdr uI1479@x*))))))) uI1467@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1465@t)))))) (set! uI2841@uId5a@let*-macro uId5a@let*-macro) (set! uId5c@or-macro (lambda (uI147d@stx) (let ((uI147f@t uI147d@stx)) (let ((uI1481@ls/false (uId7c@syntax-dispatch uI147f@t '(_)))) (if uI1481@ls/false (apply (lambda () '#f) uI1481@ls/false) (let ((uI1483@t uI147f@t)) (let ((uI1485@ls/false (uId7c@syntax-dispatch uI1483@t '(_ any . each-any)))) (if uI1485@ls/false (apply (lambda (uI1487@e uI1488@e*) (uId32@bless (let uI148f@f ((uI148b@e uI1487@e) (uI148c@e* uI1488@e*)) (if (null? uI148c@e*) (list 'begin '#f uI148b@e) (list 'let (list (list 't uI148b@e)) (list 'if 't 't (uI148f@f (car uI148c@e*) (cdr uI148c@e*)))))))) uI1485@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1483@t))))))))) (set! uI2842@uId5c@or-macro uId5c@or-macro) (set! uId5e@and-macro (lambda (uI1491@stx) (let ((uI1493@t uI1491@stx)) (let ((uI1495@ls/false (uId7c@syntax-dispatch uI1493@t '(_)))) (if uI1495@ls/false (apply (lambda () '#t) uI1495@ls/false) (let ((uI1497@t uI1493@t)) (let ((uI1499@ls/false (uId7c@syntax-dispatch uI1497@t '(_ any . each-any)))) (if uI1499@ls/false (apply (lambda (uI149b@e uI149c@e*) (uId32@bless (let uI14a3@f ((uI149f@e uI149b@e) (uI14a0@e* uI149c@e*)) (if (null? uI14a0@e*) (list 'begin '#f uI149f@e) (cons 'if (cons uI149f@e (cons (uI14a3@f (car uI14a0@e*) (cdr uI14a0@e*)) '(#f)))))))) uI1499@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1497@t))))))))) (set! uI2843@uId5e@and-macro uId5e@and-macro) (set! uId60@cond-macro (lambda (uI14a5@stx) (let ((uI14a7@t uI14a5@stx)) (let ((uI14a9@ls/false (uId7c@syntax-dispatch uI14a7@t '(_ any . each-any)))) (if uI14a9@ls/false (apply (lambda (uI14ab@cls uI14ac@cls*) (uId32@bless (let uI14b3@f ((uI14af@cls uI14ab@cls) (uI14b0@cls* uI14ac@cls*)) (if (null? uI14b0@cls*) (let ((uI14b5@t uI14af@cls)) (let ((uI14b7@ls/false (uId7c@syntax-dispatch uI14b5@t '(#(scheme-id else) any . each-any)))) (if uI14b7@ls/false (apply (lambda (uI14b9@e uI14ba@e*) (cons 'begin (cons uI14b9@e uI14ba@e*))) uI14b7@ls/false) (let ((uI14bd@t uI14b5@t)) (let ((uI14bf@ls/false (uId7c@syntax-dispatch uI14bd@t '(any #(scheme-id =>) any)))) (if uI14bf@ls/false (apply (lambda (uI14c1@e uI14c2@p) (list 'let (list (list 't uI14c1@e)) (list 'if 't (cons uI14c2@p '(t))))) uI14bf@ls/false) (let ((uI14c5@t uI14bd@t)) (let ((uI14c7@ls/false (uId7c@syntax-dispatch uI14c5@t '(any)))) (if uI14c7@ls/false (apply (lambda (uI14c9@e) (cons 'or (cons uI14c9@e '((if #f #f))))) uI14c7@ls/false) (let ((uI14cb@t uI14c5@t)) (let ((uI14cd@ls/false (uId7c@syntax-dispatch uI14cb@t '(any . each-any)))) (if uI14cd@ls/false (apply (lambda (uI14cf@e uI14d0@e*) (list 'if uI14cf@e (cons 'begin uI14d0@e*))) uI14cd@ls/false) (let ((uI14d3@t uI14cb@t)) (let ((uI14d5@ls/false (uId7c@syntax-dispatch uI14d3@t '_))) (if uI14d5@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid last clause" uI14a5@stx)) uI14d5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI14d3@t)))))))))))))))) (let ((uI14d7@t uI14af@cls)) (let ((uI14d9@ls/false (uId7c@syntax-dispatch uI14d7@t '(#(scheme-id else) any . each-any)))) (if uI14d9@ls/false (apply (lambda (uI14db@e uI14dc@e*) (uIe5c@syntax-violation '#f '"incorrect position of keyword else" uI14a5@stx)) uI14d9@ls/false) (let ((uI14df@t uI14d7@t)) (let ((uI14e1@ls/false (uId7c@syntax-dispatch uI14df@t '(any #(scheme-id =>) any)))) (if uI14e1@ls/false (apply (lambda (uI14e3@e uI14e4@p) (list 'let (list (list 't uI14e3@e)) (list 'if 't (cons uI14e4@p '(t)) (uI14b3@f (car uI14b0@cls*) (cdr uI14b0@cls*))))) uI14e1@ls/false) (let ((uI14e7@t uI14df@t)) (let ((uI14e9@ls/false (uId7c@syntax-dispatch uI14e7@t '(any)))) (if uI14e9@ls/false (apply (lambda (uI14eb@e) (list 'or uI14eb@e (uI14b3@f (car uI14b0@cls*) (cdr uI14b0@cls*)))) uI14e9@ls/false) (let ((uI14ed@t uI14e7@t)) (let ((uI14ef@ls/false (uId7c@syntax-dispatch uI14ed@t '(any . each-any)))) (if uI14ef@ls/false (apply (lambda (uI14f1@e uI14f2@e*) (list 'if uI14f1@e (cons 'begin uI14f2@e*) (uI14b3@f (car uI14b0@cls*) (cdr uI14b0@cls*)))) uI14ef@ls/false) (let ((uI14f5@t uI14ed@t)) (let ((uI14f7@ls/false (uId7c@syntax-dispatch uI14f5@t '_))) (if uI14f7@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid last clause" uI14a5@stx)) uI14f7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI14f5@t)))))))))))))))))))) uI14a9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI14a7@t)))))) (set! uI2844@uId60@cond-macro uId60@cond-macro) (set! uId62@do-include (lambda (uI14f9@stx uI14fa@id uI14fb@filename) (let ((uI14ff@filename (uIb89@stx->datum uI14fb@filename))) (begin (if (not (and (string? uI14ff@filename) (uIb75@id? uI14fa@id))) (uIe5c@syntax-violation '#f '"invalid syntax" uI14f9@stx) (void)) (cons (uId32@bless 'begin) (with-input-from-file uI14ff@filename (lambda () (let uI1503@f ((uI1501@ls '())) (let ((uI1505@x (uI6b2@uI584@read-annotated))) (if (eof-object? uI1505@x) (reverse uI1501@ls) (uI1503@f (cons (uIb55@datum->stx uI14fa@id uI1505@x) uI1501@ls)))))))))))) (set! uI2845@uId62@do-include uId62@do-include) (set! uId64@include-macro (lambda (uI1507@e) (let ((uI1509@t uI1507@e)) (let ((uI150b@ls/false (uId7c@syntax-dispatch uI1509@t '(any any)))) (if uI150b@ls/false (apply (lambda (uI150d@id uI150e@filename) (uId62@do-include uI1507@e uI150d@id uI150e@filename)) uI150b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1509@t)))))) (set! uI2846@uId64@include-macro uId64@include-macro) (set! uId66@include-into-macro (lambda (uI1511@e) (let ((uI1513@t uI1511@e)) (let ((uI1515@ls/false (uId7c@syntax-dispatch uI1513@t '(_ any any)))) (if uI1515@ls/false (apply (lambda (uI1517@id uI1518@filename) (uId62@do-include uI1511@e uI1517@id uI1518@filename)) uI1515@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1513@t)))))) (set! uI2847@uId66@include-into-macro uId66@include-into-macro) (set! uId68@syntax-rules-macro (lambda (uI151b@e) (let ((uI151d@t uI151b@e)) (let ((uI151f@ls/false (uId7c@syntax-dispatch uI151d@t '(_ each-any . #(each (any any)))))) (if uI151f@ls/false (apply (lambda (uI1521@lits uI1522@pat* uI1523@tmp*) (begin (uId82@verify-literals uI1521@lits uI151b@e) (uId32@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons uI1521@lits (map (lambda (uI1527@pat uI1528@tmp) (let ((uI152b@t uI1527@pat)) (let ((uI152d@ls/false (uId7c@syntax-dispatch uI152b@t '(_ . any)))) (if uI152d@ls/false (apply (lambda (uI152f@rest) (list (cons 'g uI152f@rest) (list 'syntax uI1528@tmp))) uI152d@ls/false) (let ((uI1531@t uI152b@t)) (let ((uI1533@ls/false (uId7c@syntax-dispatch uI1531@t '_))) (if uI1533@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid syntax-rules pattern" uI151b@e uI1527@pat)) uI1533@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1531@t)))))))) uI1522@pat* uI1523@tmp*)))))))) uI151f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI151d@t)))))) (set! uI2848@uId68@syntax-rules-macro uId68@syntax-rules-macro) (set! uId6a@quasiquote-macro (let ((uI1536@datum '#f) (uI1552@quasicons* '#f) (uI1554@quasicons '#f) (uI1556@quasiappend '#f) (uI1558@quasivector '#f) (uI155a@vquasi '#f) (uI155c@quasi '#f)) (begin (set! uI1536@datum (lambda (uI1637@x) (list (uId04@scheme-stx 'quote) (uIb5d@mkstx uI1637@x '() '() '())))) (set! uI1552@quasicons* (lambda (uI162f@x uI1630@y) (let uI1635@f ((uI1633@x uI162f@x)) (if (null? uI1633@x) uI1630@y (uI1554@quasicons (car uI1633@x) (uI1635@f (cdr uI1633@x))))))) (set! uI1554@quasicons (lambda (uI1609@x uI160a@y) (let ((uI160d@t uI160a@y)) (let ((uI160f@ls/false (uId7c@syntax-dispatch uI160d@t '(#(scheme-id quote) any)))) (if uI160f@ls/false (apply (lambda (uI1611@dy) (let ((uI1613@t uI1609@x)) (let ((uI1615@ls/false (uId7c@syntax-dispatch uI1613@t '(#(scheme-id quote) any)))) (if uI1615@ls/false (apply (lambda (uI1617@dx) (list (uId04@scheme-stx 'quote) (cons uI1617@dx uI1611@dy))) uI1615@ls/false) (let ((uI1619@t uI1613@t)) (let ((uI161b@ls/false (uId7c@syntax-dispatch uI1619@t '_))) (if uI161b@ls/false (apply (lambda () (let ((uI161d@t uI1611@dy)) (let ((uI161f@ls/false (uId7c@syntax-dispatch uI161d@t '()))) (if uI161f@ls/false (apply (lambda () (list (uId04@scheme-stx 'list) uI1609@x)) uI161f@ls/false) (let ((uI1621@t uI161d@t)) (let ((uI1623@ls/false (uId7c@syntax-dispatch uI1621@t '_))) (if uI1623@ls/false (apply (lambda () (list (uId04@scheme-stx 'cons) uI1609@x uI160a@y)) uI1623@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1621@t)))))))) uI161b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1619@t)))))))) uI160f@ls/false) (let ((uI1625@t uI160d@t)) (let ((uI1627@ls/false (uId7c@syntax-dispatch uI1625@t '(#(scheme-id list) . each-any)))) (if uI1627@ls/false (apply (lambda (uI1629@stuff) (cons* (uId04@scheme-stx 'list) uI1609@x uI1629@stuff)) uI1627@ls/false) (let ((uI162b@t uI1625@t)) (let ((uI162d@ls/false (uId7c@syntax-dispatch uI162b@t '_))) (if uI162d@ls/false (apply (lambda () (list (uId04@scheme-stx 'cons) uI1609@x uI160a@y)) uI162d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI162b@t)))))))))))) (set! uI1556@quasiappend (lambda (uI15ef@x uI15f0@y) (let ((uI15f3@ls (let uI15f7@f ((uI15f5@x uI15ef@x)) (if (null? uI15f5@x) (let ((uI15f9@t uI15f0@y)) (let ((uI15fb@ls/false (uId7c@syntax-dispatch uI15f9@t '(#(scheme-id quote) ())))) (if uI15fb@ls/false (apply (lambda () '()) uI15fb@ls/false) (let ((uI15fd@t uI15f9@t)) (let ((uI15ff@ls/false (uId7c@syntax-dispatch uI15fd@t '_))) (if uI15ff@ls/false (apply (lambda () (list uI15f0@y)) uI15ff@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI15fd@t))))))) (let ((uI1601@t (car uI15f5@x))) (let ((uI1603@ls/false (uId7c@syntax-dispatch uI1601@t '(#(scheme-id quote) ())))) (if uI1603@ls/false (apply (lambda () (uI15f7@f (cdr uI15f5@x))) uI1603@ls/false) (let ((uI1605@t uI1601@t)) (let ((uI1607@ls/false (uId7c@syntax-dispatch uI1605@t '_))) (if uI1607@ls/false (apply (lambda () (cons (car uI15f5@x) (uI15f7@f (cdr uI15f5@x)))) uI1607@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1605@t))))))))))) (if (null? uI15f3@ls) (list (uId04@scheme-stx 'quote) '()) (if (null? (cdr uI15f3@ls)) (car uI15f3@ls) (cons* (uId04@scheme-stx 'append) uI15f3@ls)))))) (set! uI1558@quasivector (lambda (uI15bd@x) (let ((uI15bf@pat-x uI15bd@x)) (let ((uI15c1@t uI15bf@pat-x)) (let ((uI15c3@ls/false (uId7c@syntax-dispatch uI15c1@t '(#(scheme-id quote) each-any)))) (if uI15c3@ls/false (apply (lambda (uI15c5@x*) (list (uId04@scheme-stx 'quote) (list->vector uI15c5@x*))) uI15c3@ls/false) (let ((uI15c7@t uI15c1@t)) (let ((uI15c9@ls/false (uId7c@syntax-dispatch uI15c7@t '_))) (if uI15c9@ls/false (apply (lambda () (let uI15d1@f ((uI15cb@x uI15bd@x) (uI15cc@k (lambda (uI15cf@ls) (cons* (uId04@scheme-stx 'vector) uI15cf@ls)))) (let ((uI15d3@t uI15cb@x)) (let ((uI15d5@ls/false (uId7c@syntax-dispatch uI15d3@t '(#(scheme-id quote) each-any)))) (if uI15d5@ls/false (apply (lambda (uI15d7@x*) (uI15cc@k (map (lambda (uI15d9@x) (list (uId04@scheme-stx 'quote) uI15d9@x)) uI15d7@x*))) uI15d5@ls/false) (let ((uI15db@t uI15d3@t)) (let ((uI15dd@ls/false (uId7c@syntax-dispatch uI15db@t '(#(scheme-id list) . each-any)))) (if uI15dd@ls/false (apply (lambda (uI15df@x*) (uI15cc@k uI15df@x*)) uI15dd@ls/false) (let ((uI15e1@t uI15db@t)) (let ((uI15e3@ls/false (uId7c@syntax-dispatch uI15e1@t '(#(scheme-id cons) any any)))) (if uI15e3@ls/false (apply (lambda (uI15e5@x uI15e6@y) (uI15d1@f uI15e6@y (lambda (uI15e9@ls) (uI15cc@k (cons uI15e5@x uI15e9@ls))))) uI15e3@ls/false) (let ((uI15eb@t uI15e1@t)) (let ((uI15ed@ls/false (uId7c@syntax-dispatch uI15eb@t '_))) (if uI15ed@ls/false (apply (lambda () (list (uId04@scheme-stx 'list->vector) uI15bf@pat-x)) uI15ed@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI15eb@t))))))))))))))) uI15c9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI15c7@t)))))))))) (set! uI155a@vquasi (lambda (uI159b@p uI159c@lev) (let ((uI159f@t uI159b@p)) (let ((uI15a1@ls/false (uId7c@syntax-dispatch uI159f@t '(any . any)))) (if uI15a1@ls/false (apply (lambda (uI15a3@p uI15a4@q) (let ((uI15a7@t uI15a3@p)) (let ((uI15a9@ls/false (uId7c@syntax-dispatch uI15a7@t '(#(scheme-id unquote) . each-any)))) (if uI15a9@ls/false (apply (lambda (uI15ab@p) (if (= uI159c@lev '0) (uI1552@quasicons* uI15ab@p (uI155a@vquasi uI15a4@q uI159c@lev)) (uI1554@quasicons (uI1554@quasicons (uI1536@datum 'unquote) (uI155c@quasi uI15ab@p (- uI159c@lev '1))) (uI155a@vquasi uI15a4@q uI159c@lev)))) uI15a9@ls/false) (let ((uI15ad@t uI15a7@t)) (let ((uI15af@ls/false (uId7c@syntax-dispatch uI15ad@t '(#(scheme-id unquote-splicing) . each-any)))) (if uI15af@ls/false (apply (lambda (uI15b1@p) (if (= uI159c@lev '0) (uI1556@quasiappend uI15b1@p (uI155a@vquasi uI15a4@q uI159c@lev)) (uI1554@quasicons (uI1554@quasicons (uI1536@datum 'unquote-splicing) (uI155c@quasi uI15b1@p (- uI159c@lev '1))) (uI155a@vquasi uI15a4@q uI159c@lev)))) uI15af@ls/false) (let ((uI15b3@t uI15ad@t)) (let ((uI15b5@ls/false (uId7c@syntax-dispatch uI15b3@t 'any))) (if uI15b5@ls/false (apply (lambda (uI15b7@p) (uI1554@quasicons (uI155c@quasi uI15b7@p uI159c@lev) (uI155a@vquasi uI15a4@q uI159c@lev))) uI15b5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI15b3@t))))))))))) uI15a1@ls/false) (let ((uI15b9@t uI159f@t)) (let ((uI15bb@ls/false (uId7c@syntax-dispatch uI15b9@t '()))) (if uI15bb@ls/false (apply (lambda () (list (uId04@scheme-stx 'quote) '())) uI15bb@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI15b9@t))))))))) (set! uI155c@quasi (lambda (uI1565@p uI1566@lev) (let ((uI1569@t uI1565@p)) (let ((uI156b@ls/false (uId7c@syntax-dispatch uI1569@t '(#(scheme-id unquote) any)))) (if uI156b@ls/false (apply (lambda (uI156d@p) (if (= uI1566@lev '0) uI156d@p (uI1554@quasicons (uI1536@datum 'unquote) (uI155c@quasi (list uI156d@p) (- uI1566@lev '1))))) uI156b@ls/false) (let ((uI156f@t uI1569@t)) (let ((uI1571@ls/false (uId7c@syntax-dispatch uI156f@t '((#(scheme-id unquote) . each-any) . any)))) (if uI1571@ls/false (apply (lambda (uI1573@p uI1574@q) (if (= uI1566@lev '0) (uI1552@quasicons* uI1573@p (uI155c@quasi uI1574@q uI1566@lev)) (uI1554@quasicons (uI1554@quasicons (uI1536@datum 'unquote) (uI155c@quasi uI1573@p (- uI1566@lev '1))) (uI155c@quasi uI1574@q uI1566@lev)))) uI1571@ls/false) (let ((uI1577@t uI156f@t)) (let ((uI1579@ls/false (uId7c@syntax-dispatch uI1577@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if uI1579@ls/false (apply (lambda (uI157b@p uI157c@q) (if (= uI1566@lev '0) (uI1556@quasiappend uI157b@p (uI155c@quasi uI157c@q uI1566@lev)) (uI1554@quasicons (uI1554@quasicons (uI1536@datum 'unquote-splicing) (uI155c@quasi uI157b@p (- uI1566@lev '1))) (uI155c@quasi uI157c@q uI1566@lev)))) uI1579@ls/false) (let ((uI157f@t uI1577@t)) (let ((uI1581@ls/false (uId7c@syntax-dispatch uI157f@t '(#(scheme-id quasiquote) any)))) (if uI1581@ls/false (apply (lambda (uI1583@p) (uI1554@quasicons (uI1536@datum 'quasiquote) (uI155c@quasi (list uI1583@p) (+ uI1566@lev '1)))) uI1581@ls/false) (let ((uI1585@t uI157f@t)) (let ((uI1587@ls/false (uId7c@syntax-dispatch uI1585@t '(any . any)))) (if uI1587@ls/false (apply (lambda (uI1589@p uI158a@q) (uI1554@quasicons (uI155c@quasi uI1589@p uI1566@lev) (uI155c@quasi uI158a@q uI1566@lev))) uI1587@ls/false) (let ((uI158d@t uI1585@t)) (let ((uI158f@ls/false (uId7c@syntax-dispatch uI158d@t '#(vector each-any)))) (if (and uI158f@ls/false (apply (lambda (uI1591@x) (not (uIb41@stx? uI1591@x))) uI158f@ls/false)) (apply (lambda (uI1593@x) (uI1558@quasivector (uI155a@vquasi uI1593@x uI1566@lev))) uI158f@ls/false) (let ((uI1595@t uI158d@t)) (let ((uI1597@ls/false (uId7c@syntax-dispatch uI1595@t 'any))) (if uI1597@ls/false (apply (lambda (uI1599@p) (list (uId04@scheme-stx 'quote) uI1599@p)) uI1597@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1595@t)))))))))))))))))))))))) (lambda (uI155d@x) (let ((uI155f@t uI155d@x)) (let ((uI1561@ls/false (uId7c@syntax-dispatch uI155f@t '(_ any)))) (if uI1561@ls/false (apply (lambda (uI1563@e) (uI155c@quasi uI1563@e '0)) uI1561@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI155f@t)))))))) (set! uI2849@uId6a@quasiquote-macro uId6a@quasiquote-macro) (set! uId6c@quasisyntax-macro (let ((uI163a@quasi '#f)) (begin (set! uI163a@quasi (lambda (uI1655@p uI1656@lev) (let ((uI1659@t uI1655@p)) (let ((uI165b@ls/false (uId7c@syntax-dispatch uI1659@t '(#(scheme-id unsyntax) any)))) (if uI165b@ls/false (apply (lambda (uI165d@p) (if (= uI1656@lev '0) (let ((uI165f@g (gensym))) (values (list uI165f@g) (list uI165d@p) uI165f@g)) (call-with-values (lambda () (uI163a@quasi uI165d@p (- uI1656@lev '1))) (lambda (uI1667@uI1662 uI1668@uI1664 uI1669@uI1666) (let ((uI166d@p uI1669@uI1666) (uI166e@rhs* uI1668@uI1664) (uI166f@lhs* uI1667@uI1662)) (values uI166f@lhs* uI166e@rhs* (list 'unsyntax uI166d@p))))))) uI165b@ls/false) (let ((uI1673@t uI1659@t)) (let ((uI1675@ls/false (uId7c@syntax-dispatch uI1673@t '#(scheme-id unsyntax)))) (if (and uI1675@ls/false (apply (lambda () (= uI1656@lev '0)) uI1675@ls/false)) (apply (lambda () (uIe5c@syntax-violation '#f '"incorrect use of unsyntax" uI1655@p)) uI1675@ls/false) (let ((uI1677@t uI1673@t)) (let ((uI1679@ls/false (uId7c@syntax-dispatch uI1677@t '((#(scheme-id unsyntax) . each-any) . any)))) (if uI1679@ls/false (apply (lambda (uI167b@p* uI167c@q) (call-with-values (lambda () (uI163a@quasi uI167c@q uI1656@lev)) (lambda (uI1685@uI1680 uI1686@uI1682 uI1687@uI1684) (let ((uI168b@q uI1687@uI1684) (uI168c@rhs* uI1686@uI1682) (uI168d@lhs* uI1685@uI1680)) (if (= uI1656@lev '0) (let ((uI1691@g* (map (lambda (uI1693@x) (gensym)) uI167b@p*))) (values (append uI1691@g* uI168d@lhs*) (append uI167b@p* uI168c@rhs*) (append uI1691@g* uI168b@q))) (call-with-values (lambda () (uI163a@quasi uI167b@p* (- uI1656@lev '1))) (lambda (uI169b@uI1696 uI169c@uI1698 uI169d@uI169a) (let ((uI16a1@p* uI169d@uI169a) (uI16a2@rhs2* uI169c@uI1698) (uI16a3@lhs2* uI169b@uI1696)) (values (append uI16a3@lhs2* uI168d@lhs*) (append uI16a2@rhs2* uI168c@rhs*) (cons (cons 'unsyntax uI16a1@p*) uI168b@q)))))))))) uI1679@ls/false) (let ((uI16a7@t uI1677@t)) (let ((uI16a9@ls/false (uId7c@syntax-dispatch uI16a7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if uI16a9@ls/false (apply (lambda (uI16ab@p* uI16ac@q) (call-with-values (lambda () (uI163a@quasi uI16ac@q uI1656@lev)) (lambda (uI16b5@uI16b0 uI16b6@uI16b2 uI16b7@uI16b4) (let ((uI16bb@q uI16b7@uI16b4) (uI16bc@rhs* uI16b6@uI16b2) (uI16bd@lhs* uI16b5@uI16b0)) (if (= uI1656@lev '0) (let ((uI16c1@g* (map (lambda (uI16c3@x) (gensym)) uI16ab@p*))) (values (append (map (lambda (uI16c5@g) (cons uI16c5@g '(...))) uI16c1@g*) uI16bd@lhs*) (append uI16ab@p* uI16bc@rhs*) (append (apply append (map (lambda (uI16c7@g) (cons uI16c7@g '(...))) uI16c1@g*)) uI16bb@q))) (call-with-values (lambda () (uI163a@quasi uI16ab@p* (- uI1656@lev '1))) (lambda (uI16cf@uI16ca uI16d0@uI16cc uI16d1@uI16ce) (let ((uI16d5@p* uI16d1@uI16ce) (uI16d6@rhs2* uI16d0@uI16cc) (uI16d7@lhs2* uI16cf@uI16ca)) (values (append uI16d7@lhs2* uI16bd@lhs*) (append uI16d6@rhs2* uI16bc@rhs*) (cons (cons 'unsyntax-splicing uI16d5@p*) uI16bb@q)))))))))) uI16a9@ls/false) (let ((uI16db@t uI16a7@t)) (let ((uI16dd@ls/false (uId7c@syntax-dispatch uI16db@t '#(scheme-id unsyntax-splicing)))) (if (and uI16dd@ls/false (apply (lambda () (= uI1656@lev '0)) uI16dd@ls/false)) (apply (lambda () (uIe5c@syntax-violation '#f '"incorrect use of unsyntax-splicing" uI1655@p)) uI16dd@ls/false) (let ((uI16df@t uI16db@t)) (let ((uI16e1@ls/false (uId7c@syntax-dispatch uI16df@t '(#(scheme-id quasisyntax) any)))) (if uI16e1@ls/false (apply (lambda (uI16e3@p) (call-with-values (lambda () (uI163a@quasi uI16e3@p (+ uI1656@lev '1))) (lambda (uI16eb@uI16e6 uI16ec@uI16e8 uI16ed@uI16ea) (let ((uI16f1@p uI16ed@uI16ea) (uI16f2@rhs* uI16ec@uI16e8) (uI16f3@lhs* uI16eb@uI16e6)) (values uI16f3@lhs* uI16f2@rhs* (list 'quasisyntax uI16f1@p)))))) uI16e1@ls/false) (let ((uI16f7@t uI16df@t)) (let ((uI16f9@ls/false (uId7c@syntax-dispatch uI16f7@t '(any . any)))) (if uI16f9@ls/false (apply (lambda (uI16fb@p uI16fc@q) (call-with-values (lambda () (uI163a@quasi uI16fb@p uI1656@lev)) (lambda (uI170b@uI1700 uI170c@uI1702 uI170d@uI1704) (call-with-values (lambda () (uI163a@quasi uI16fc@q uI1656@lev)) (lambda (uI1711@uI1706 uI1712@uI1708 uI1713@uI170a) (let ((uI1717@q uI1713@uI170a) (uI1718@rhs2* uI1712@uI1708) (uI1719@lhs2* uI1711@uI1706) (uI171a@p uI170d@uI1704) (uI171b@rhs* uI170c@uI1702) (uI171c@lhs* uI170b@uI1700)) (values (append uI1719@lhs2* uI171c@lhs*) (append uI1718@rhs2* uI171b@rhs*) (cons uI171a@p uI1717@q)))))))) uI16f9@ls/false) (let ((uI1723@t uI16f7@t)) (let ((uI1725@ls/false (uId7c@syntax-dispatch uI1723@t '#(vector each-any)))) (if uI1725@ls/false (apply (lambda (uI1727@x*) (call-with-values (lambda () (uI163a@quasi uI1727@x* uI1656@lev)) (lambda (uI172f@uI172a uI1730@uI172c uI1731@uI172e) (let ((uI1735@x* uI1731@uI172e) (uI1736@rhs* uI1730@uI172c) (uI1737@lhs* uI172f@uI172a)) (values uI1737@lhs* uI1736@rhs* (list->vector uI1735@x*)))))) uI1725@ls/false) (let ((uI173b@t uI1723@t)) (let ((uI173d@ls/false (uId7c@syntax-dispatch uI173b@t '_))) (if uI173d@ls/false (apply (lambda () (values '() '() uI1655@p)) uI173d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI173b@t)))))))))))))))))))))))))))))) (lambda (uI163b@x) (let ((uI163d@t uI163b@x)) (let ((uI163f@ls/false (uId7c@syntax-dispatch uI163d@t '(_ any)))) (if uI163f@ls/false (apply (lambda (uI1641@e) (call-with-values (lambda () (uI163a@quasi uI1641@e '0)) (lambda (uI1649@uI1644 uI164a@uI1646 uI164b@uI1648) (let ((uI164f@v uI164b@uI1648) (uI1650@rhs* uI164a@uI1646) (uI1651@lhs* uI1649@uI1644)) (uId32@bless (list 'syntax-case (cons 'list uI1650@rhs*) '() (list uI1651@lhs* (list 'syntax uI164f@v)))))))) uI163f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI163d@t)))))))) (set! uI284a@uId6c@quasisyntax-macro uId6c@quasisyntax-macro) (set! uId6e@define-struct-macro (lambda (uI173f@stx) (uIe5c@syntax-violation '#f '"define-struct not supported" uI173f@stx))) (set! uI284b@uId6e@define-struct-macro uId6e@define-struct-macro) (set! uId70@define-record-type-macro (lambda (uI1741@x) (let ((uI1744@id '#f) (uI1746@get-record-name '#f) (uI1748@get-record-constructor-name '#f) (uI174a@get-record-predicate-name '#f) (uI174c@get-clause '#f) (uI174e@foo-rtd-code '#f) (uI1750@parent-rtd-code '#f) (uI1752@parent-rcd-code '#f) (uI1754@foo-rcd-code '#f) (uI1756@get-protocol-code '#f) (uI1758@get-fields '#f) (uI175a@get-mutator-indices '#f) (uI175c@get-mutators '#f) (uI175e@get-accessors '#f) (uI1760@enumerate '#f) (uI1762@do-define-record '#f) (uI1764@verify-clauses '#f)) (begin (set! uI1744@id (lambda (uI1937@ctxt . uI1939@str*) (uIe60@datum->syntax uI1937@ctxt (string->symbol (apply string-append (map (lambda (uI193b@x) (if (symbol? uI193b@x) (symbol->string uI193b@x) (if (string? uI193b@x) uI193b@x (assertion-violation 'define-record-type '"BUG")))) uI1939@str*)))))) (set! uI1746@get-record-name (lambda (uI1925@spec) (let ((uI1927@t uI1925@spec)) (let ((uI1929@ls/false (uId7c@syntax-dispatch uI1927@t '(any any any)))) (if uI1929@ls/false (apply (lambda (uI192b@foo uI192c@make-foo uI192d@foo?) uI192b@foo) uI1929@ls/false) (let ((uI1931@t uI1927@t)) (let ((uI1933@ls/false (uId7c@syntax-dispatch uI1931@t 'any))) (if uI1933@ls/false (apply (lambda (uI1935@foo) uI1935@foo) uI1933@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1931@t))))))))) (set! uI1748@get-record-constructor-name (lambda (uI1911@spec) (let ((uI1913@t uI1911@spec)) (let ((uI1915@ls/false (uId7c@syntax-dispatch uI1913@t '(any any any)))) (if uI1915@ls/false (apply (lambda (uI1917@foo uI1918@make-foo uI1919@foo?) uI1918@make-foo) uI1915@ls/false) (let ((uI191d@t uI1913@t)) (let ((uI191f@ls/false (uId7c@syntax-dispatch uI191d@t 'any))) (if (and uI191f@ls/false (apply (lambda (uI1921@foo) (uIb75@id? uI1921@foo)) uI191f@ls/false)) (apply (lambda (uI1923@foo) (uI1744@id uI1923@foo '"make-" (uIb89@stx->datum uI1923@foo))) uI191f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI191d@t))))))))) (set! uI174a@get-record-predicate-name (lambda (uI18fd@spec) (let ((uI18ff@t uI18fd@spec)) (let ((uI1901@ls/false (uId7c@syntax-dispatch uI18ff@t '(any any any)))) (if uI1901@ls/false (apply (lambda (uI1903@foo uI1904@make-foo uI1905@foo?) uI1905@foo?) uI1901@ls/false) (let ((uI1909@t uI18ff@t)) (let ((uI190b@ls/false (uId7c@syntax-dispatch uI1909@t 'any))) (if (and uI190b@ls/false (apply (lambda (uI190d@foo) (uIb75@id? uI190d@foo)) uI190b@ls/false)) (apply (lambda (uI190f@foo) (uI1744@id uI190f@foo (uIb89@stx->datum uI190f@foo) '"?")) uI190b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1909@t))))))))) (set! uI174c@get-clause (lambda (uI18eb@id uI18ec@ls) (let ((uI18ef@t uI18ec@ls)) (let ((uI18f1@ls/false (uId7c@syntax-dispatch uI18ef@t '()))) (if uI18f1@ls/false (apply (lambda () '#f) uI18f1@ls/false) (let ((uI18f3@t uI18ef@t)) (let ((uI18f5@ls/false (uId7c@syntax-dispatch uI18f3@t '((any . any) . any)))) (if uI18f5@ls/false (apply (lambda (uI18f7@x uI18f8@rest uI18f9@ls) (if (uIb7b@free-id=? (uId32@bless uI18eb@id) uI18f7@x) (cons uI18f7@x uI18f8@rest) (uI174c@get-clause uI18eb@id uI18f9@ls))) uI18f5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18f3@t))))))))) (set! uI174e@foo-rtd-code (lambda (uI1899@name uI189a@clause* uI189b@parent-rtd-code) (let ((uI18a0@convert-field-spec* '#f)) (begin (set! uI18a0@convert-field-spec* (lambda (uI18d1@ls) (list->vector (map (lambda (uI18d3@x) (let ((uI18d5@t uI18d3@x)) (let ((uI18d7@ls/false (uId7c@syntax-dispatch uI18d5@t '(#(scheme-id mutable) any . any)))) (if uI18d7@ls/false (apply (lambda (uI18d9@name uI18da@rest) (list 'mutable uI18d9@name)) uI18d7@ls/false) (let ((uI18dd@t uI18d5@t)) (let ((uI18df@ls/false (uId7c@syntax-dispatch uI18dd@t '(#(scheme-id immutable) any . any)))) (if uI18df@ls/false (apply (lambda (uI18e1@name uI18e2@rest) (list 'immutable uI18e1@name)) uI18df@ls/false) (let ((uI18e5@t uI18dd@t)) (let ((uI18e7@ls/false (uId7c@syntax-dispatch uI18e5@t 'any))) (if uI18e7@ls/false (apply (lambda (uI18e9@name) (list 'immutable uI18e9@name)) uI18e7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18e5@t))))))))))) uI18d1@ls)))) (let ((uI18a1@uid-code (let ((uI18a9@t (uI174c@get-clause 'nongenerative uI189a@clause*))) (let ((uI18ab@ls/false (uId7c@syntax-dispatch uI18a9@t '(_)))) (if uI18ab@ls/false (apply (lambda () (list 'quote (gensym))) uI18ab@ls/false) (let ((uI18ad@t uI18a9@t)) (let ((uI18af@ls/false (uId7c@syntax-dispatch uI18ad@t '(_ any)))) (if uI18af@ls/false (apply (lambda (uI18b1@uid) (list 'quote uI18b1@uid)) uI18af@ls/false) (let ((uI18b3@t uI18ad@t)) (let ((uI18b5@ls/false (uId7c@syntax-dispatch uI18b3@t '_))) (if uI18b5@ls/false (apply (lambda () '#f) uI18b5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18b3@t))))))))))) (uI18a2@sealed? (let ((uI18b7@t (uI174c@get-clause 'sealed uI189a@clause*))) (let ((uI18b9@ls/false (uId7c@syntax-dispatch uI18b7@t '(_ #(atom #t))))) (if uI18b9@ls/false (apply (lambda () '#t) uI18b9@ls/false) (let ((uI18bb@t uI18b7@t)) (let ((uI18bd@ls/false (uId7c@syntax-dispatch uI18bb@t '_))) (if uI18bd@ls/false (apply (lambda () '#f) uI18bd@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18bb@t)))))))) (uI18a3@opaque? (let ((uI18bf@t (uI174c@get-clause 'opaque uI189a@clause*))) (let ((uI18c1@ls/false (uId7c@syntax-dispatch uI18bf@t '(_ #(atom #t))))) (if uI18c1@ls/false (apply (lambda () '#t) uI18c1@ls/false) (let ((uI18c3@t uI18bf@t)) (let ((uI18c5@ls/false (uId7c@syntax-dispatch uI18c3@t '_))) (if uI18c5@ls/false (apply (lambda () '#f) uI18c5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18c3@t)))))))) (uI18a4@fields (let ((uI18c7@t (uI174c@get-clause 'fields uI189a@clause*))) (let ((uI18c9@ls/false (uId7c@syntax-dispatch uI18c7@t '(_ . each-any)))) (if uI18c9@ls/false (apply (lambda (uI18cb@field-spec*) (list 'quote (uI18a0@convert-field-spec* uI18cb@field-spec*))) uI18c9@ls/false) (let ((uI18cd@t uI18c7@t)) (let ((uI18cf@ls/false (uId7c@syntax-dispatch uI18cd@t '_))) (if uI18cf@ls/false (apply (lambda () ''#()) uI18cf@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI18cd@t))))))))) (uId32@bless (list 'make-record-type-descriptor (list 'quote uI1899@name) uI189b@parent-rtd-code uI18a1@uid-code uI18a2@sealed? uI18a3@opaque? uI18a4@fields))))))) (set! uI1750@parent-rtd-code (lambda (uI1881@clause*) (let ((uI1883@t (uI174c@get-clause 'parent uI1881@clause*))) (let ((uI1885@ls/false (uId7c@syntax-dispatch uI1883@t '(_ any)))) (if uI1885@ls/false (apply (lambda (uI1887@name) (list 'record-type-descriptor uI1887@name)) uI1885@ls/false) (let ((uI1889@t uI1883@t)) (let ((uI188b@ls/false (uId7c@syntax-dispatch uI1889@t '#(atom #f)))) (if uI188b@ls/false (apply (lambda () (let ((uI188d@t (uI174c@get-clause 'parent-rtd uI1881@clause*))) (let ((uI188f@ls/false (uId7c@syntax-dispatch uI188d@t '(_ any any)))) (if uI188f@ls/false (apply (lambda (uI1891@rtd uI1892@rcd) uI1891@rtd) uI188f@ls/false) (let ((uI1895@t uI188d@t)) (let ((uI1897@ls/false (uId7c@syntax-dispatch uI1895@t '#(atom #f)))) (if uI1897@ls/false (apply (lambda () '#f) uI1897@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1895@t)))))))) uI188b@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1889@t))))))))) (set! uI1752@parent-rcd-code (lambda (uI1869@clause*) (let ((uI186b@t (uI174c@get-clause 'parent uI1869@clause*))) (let ((uI186d@ls/false (uId7c@syntax-dispatch uI186b@t '(_ any)))) (if uI186d@ls/false (apply (lambda (uI186f@name) (list 'record-constructor-descriptor uI186f@name)) uI186d@ls/false) (let ((uI1871@t uI186b@t)) (let ((uI1873@ls/false (uId7c@syntax-dispatch uI1871@t '#(atom #f)))) (if uI1873@ls/false (apply (lambda () (let ((uI1875@t (uI174c@get-clause 'parent-rtd uI1869@clause*))) (let ((uI1877@ls/false (uId7c@syntax-dispatch uI1875@t '(_ any any)))) (if uI1877@ls/false (apply (lambda (uI1879@rtd uI187a@rcd) uI187a@rcd) uI1877@ls/false) (let ((uI187d@t uI1875@t)) (let ((uI187f@ls/false (uId7c@syntax-dispatch uI187d@t '#(atom #f)))) (if uI187f@ls/false (apply (lambda () '#f) uI187f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI187d@t)))))))) uI1873@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1871@t))))))))) (set! uI1754@foo-rcd-code (lambda (uI1861@clause* uI1862@foo-rtd uI1863@protocol uI1864@parent-rcd-code) (list 'make-record-constructor-descriptor uI1862@foo-rtd uI1864@parent-rcd-code uI1863@protocol))) (set! uI1756@get-protocol-code (lambda (uI1855@clause*) (let ((uI1857@t (uI174c@get-clause 'protocol uI1855@clause*))) (let ((uI1859@ls/false (uId7c@syntax-dispatch uI1857@t '(_ any)))) (if uI1859@ls/false (apply (lambda (uI185b@expr) uI185b@expr) uI1859@ls/false) (let ((uI185d@t uI1857@t)) (let ((uI185f@ls/false (uId7c@syntax-dispatch uI185d@t '_))) (if uI185f@ls/false (apply (lambda () '#f) uI185f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI185d@t))))))))) (set! uI1758@get-fields (lambda (uI1843@clause*) (let ((uI1845@t uI1843@clause*)) (let ((uI1847@ls/false (uId7c@syntax-dispatch uI1845@t '()))) (if uI1847@ls/false (apply (lambda () '()) uI1847@ls/false) (let ((uI1849@t uI1845@t)) (let ((uI184b@ls/false (uId7c@syntax-dispatch uI1849@t '((#(scheme-id fields) . each-any) . _)))) (if uI184b@ls/false (apply (lambda (uI184d@f*) uI184d@f*) uI184b@ls/false) (let ((uI184f@t uI1849@t)) (let ((uI1851@ls/false (uId7c@syntax-dispatch uI184f@t '(_ . any)))) (if uI1851@ls/false (apply (lambda (uI1853@rest) (uI1758@get-fields uI1853@rest)) uI1851@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI184f@t)))))))))))) (set! uI175a@get-mutator-indices (lambda (uI182b@fields) (let uI1831@f ((uI182d@fields uI182b@fields) (uI182e@i '0)) (let ((uI1833@t uI182d@fields)) (let ((uI1835@ls/false (uId7c@syntax-dispatch uI1833@t '()))) (if uI1835@ls/false (apply (lambda () '()) uI1835@ls/false) (let ((uI1837@t uI1833@t)) (let ((uI1839@ls/false (uId7c@syntax-dispatch uI1837@t '((#(scheme-id mutable) . _) . any)))) (if uI1839@ls/false (apply (lambda (uI183b@rest) (cons uI182e@i (uI1831@f uI183b@rest (+ uI182e@i '1)))) uI1839@ls/false) (let ((uI183d@t uI1837@t)) (let ((uI183f@ls/false (uId7c@syntax-dispatch uI183d@t '(_ . any)))) (if uI183f@ls/false (apply (lambda (uI1841@rest) (uI1831@f uI1841@rest (+ uI182e@i '1))) uI183f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI183d@t))))))))))))) (set! uI175c@get-mutators (lambda (uI1801@foo uI1802@fields) (let ((uI1806@gen-name '#f)) (begin (set! uI1806@gen-name (lambda (uI1829@x) (uIe60@datum->syntax uI1801@foo (string->symbol (string-append (symbol->string (uIe62@syntax->datum uI1801@foo)) '"-" (symbol->string (uIe62@syntax->datum uI1829@x)) '"-set!"))))) (let uI1809@f ((uI1807@fields uI1802@fields)) (let ((uI180b@t uI1807@fields)) (let ((uI180d@ls/false (uId7c@syntax-dispatch uI180b@t '()))) (if uI180d@ls/false (apply (lambda () '()) uI180d@ls/false) (let ((uI180f@t uI180b@t)) (let ((uI1811@ls/false (uId7c@syntax-dispatch uI180f@t '((#(scheme-id mutable) any any any) . any)))) (if uI1811@ls/false (apply (lambda (uI1813@name uI1814@accessor uI1815@mutator uI1816@rest) (cons uI1815@mutator (uI1809@f uI1816@rest))) uI1811@ls/false) (let ((uI181b@t uI180f@t)) (let ((uI181d@ls/false (uId7c@syntax-dispatch uI181b@t '((#(scheme-id mutable) any) . any)))) (if uI181d@ls/false (apply (lambda (uI181f@name uI1820@rest) (cons (uI1806@gen-name uI181f@name) (uI1809@f uI1820@rest))) uI181d@ls/false) (let ((uI1823@t uI181b@t)) (let ((uI1825@ls/false (uId7c@syntax-dispatch uI1823@t '(_ . any)))) (if uI1825@ls/false (apply (lambda (uI1827@rest) (uI1809@f uI1827@rest)) uI1825@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1823@t)))))))))))))))))) (set! uI175e@get-accessors (lambda (uI17bd@foo uI17be@fields) (let ((uI17c2@gen-name '#f)) (begin (set! uI17c2@gen-name (lambda (uI17ff@x) (uIe60@datum->syntax uI17bd@foo (string->symbol (string-append (symbol->string (uIe62@syntax->datum uI17bd@foo)) '"-" (symbol->string (uIe62@syntax->datum uI17ff@x))))))) (map (lambda (uI17c3@field) (let ((uI17c5@t uI17c3@field)) (let ((uI17c7@ls/false (uId7c@syntax-dispatch uI17c5@t '(#(scheme-id mutable) any any any)))) (if (and uI17c7@ls/false (apply (lambda (uI17c9@name uI17ca@accessor uI17cb@mutator) (uIb75@id? uI17ca@accessor)) uI17c7@ls/false)) (apply (lambda (uI17cf@name uI17d0@accessor uI17d1@mutator) uI17d0@accessor) uI17c7@ls/false) (let ((uI17d5@t uI17c5@t)) (let ((uI17d7@ls/false (uId7c@syntax-dispatch uI17d5@t '(#(scheme-id immutable) any any)))) (if (and uI17d7@ls/false (apply (lambda (uI17d9@name uI17da@accessor) (uIb75@id? uI17da@accessor)) uI17d7@ls/false)) (apply (lambda (uI17dd@name uI17de@accessor) uI17de@accessor) uI17d7@ls/false) (let ((uI17e1@t uI17d5@t)) (let ((uI17e3@ls/false (uId7c@syntax-dispatch uI17e1@t '(#(scheme-id mutable) any)))) (if (and uI17e3@ls/false (apply (lambda (uI17e5@name) (uIb75@id? uI17e5@name)) uI17e3@ls/false)) (apply (lambda (uI17e7@name) (uI17c2@gen-name uI17e7@name)) uI17e3@ls/false) (let ((uI17e9@t uI17e1@t)) (let ((uI17eb@ls/false (uId7c@syntax-dispatch uI17e9@t '(#(scheme-id immutable) any)))) (if (and uI17eb@ls/false (apply (lambda (uI17ed@name) (uIb75@id? uI17ed@name)) uI17eb@ls/false)) (apply (lambda (uI17ef@name) (uI17c2@gen-name uI17ef@name)) uI17eb@ls/false) (let ((uI17f1@t uI17e9@t)) (let ((uI17f3@ls/false (uId7c@syntax-dispatch uI17f1@t 'any))) (if (and uI17f3@ls/false (apply (lambda (uI17f5@name) (uIb75@id? uI17f5@name)) uI17f3@ls/false)) (apply (lambda (uI17f7@name) (uI17c2@gen-name uI17f7@name)) uI17f3@ls/false) (let ((uI17f9@t uI17f1@t)) (let ((uI17fb@ls/false (uId7c@syntax-dispatch uI17f9@t 'any))) (if uI17fb@ls/false (apply (lambda (uI17fd@others) (uIe5c@syntax-violation '#f '"invalid field spec" uI17c3@field)) uI17fb@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI17f9@t)))))))))))))))))))) uI17be@fields))))) (set! uI1760@enumerate (lambda (uI17b5@ls) (let uI17bb@f ((uI17b7@ls uI17b5@ls) (uI17b8@i '0)) (if (null? uI17b7@ls) '() (cons uI17b8@i (uI17bb@f (cdr uI17b7@ls) (+ uI17b8@i '1))))))) (set! uI1762@do-define-record (lambda (uI178d@namespec uI178e@clause*) (let ((uI1791@foo (uI1746@get-record-name uI178d@namespec))) (let ((uI1793@foo-rtd (gensym))) (let ((uI1795@foo-rcd (gensym))) (let ((uI1797@protocol (gensym))) (let ((uI1799@make-foo (uI1748@get-record-constructor-name uI178d@namespec))) (let ((uI179b@fields (uI1758@get-fields uI178e@clause*))) (let ((uI179d@idx* (uI1760@enumerate uI179b@fields))) (let ((uI179f@foo-x* (uI175e@get-accessors uI1791@foo uI179b@fields))) (let ((uI17a1@set-foo-x!* (uI175c@get-mutators uI1791@foo uI179b@fields))) (let ((uI17a3@set-foo-idx* (uI175a@get-mutator-indices uI179b@fields))) (let ((uI17a5@foo? (uI174a@get-record-predicate-name uI178d@namespec))) (let ((uI17a7@foo-rtd-code (uI174e@foo-rtd-code uI1791@foo uI178e@clause* (uI1750@parent-rtd-code uI178e@clause*)))) (let ((uI17a9@foo-rcd-code (uI1754@foo-rcd-code uI178e@clause* uI1793@foo-rtd uI1797@protocol (uI1752@parent-rcd-code uI178e@clause*)))) (let ((uI17ab@protocol-code (uI1756@get-protocol-code uI178e@clause*))) (uId32@bless (cons 'begin (cons (list 'define uI1793@foo-rtd uI17a7@foo-rtd-code) (cons (list 'define uI1797@protocol uI17ab@protocol-code) (cons (list 'define uI1795@foo-rcd uI17a9@foo-rcd-code) (cons (list 'define-syntax uI1791@foo (list 'list ''$rtd (list 'syntax uI1793@foo-rtd) (list 'syntax uI1795@foo-rcd))) (cons (list 'define uI17a5@foo? (list 'record-predicate uI1793@foo-rtd)) (cons (list 'define uI1799@make-foo (list 'record-constructor uI1795@foo-rcd)) (append (map (lambda (uI17ad@foo-x uI17ae@idx) (list 'define uI17ad@foo-x (list 'record-accessor uI1793@foo-rtd uI17ae@idx))) uI179f@foo-x* uI179d@idx*) (map (lambda (uI17b1@set-foo-x! uI17b2@idx) (list 'define uI17b1@set-foo-x! (list 'record-mutator uI1793@foo-rtd uI17b2@idx))) uI17a1@set-foo-x!* uI17a3@set-foo-idx*)))))))))))))))))))))))))) (set! uI1764@verify-clauses (lambda (uI176d@x uI176e@cls*) (let ((uI1772@valid-kwds '#f) (uI1774@free-id-member? '#f)) (begin (set! uI1772@valid-kwds (map uId32@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! uI1774@free-id-member? (lambda (uI1789@x uI178a@ls) (and (pair? uI178a@ls) (or (uIb7b@free-id=? uI1789@x (car uI178a@ls)) (uI1774@free-id-member? uI1789@x (cdr uI178a@ls)))))) (let uI1779@f ((uI1775@cls* uI176e@cls*) (uI1776@seen* '())) (if (not (null? uI1775@cls*)) (let ((uI177b@t (car uI1775@cls*))) (let ((uI177d@ls/false (uId7c@syntax-dispatch uI177b@t '(any . any)))) (if uI177d@ls/false (apply (lambda (uI177f@kwd uI1780@rest) (if (or (not (uIb75@id? uI177f@kwd)) (not (uI1774@free-id-member? uI177f@kwd uI1772@valid-kwds))) (uIe5c@syntax-violation '#f '"not a valid define-record-type keyword" uI177f@kwd) (if (uIb81@bound-id-member? uI177f@kwd uI1776@seen*) (uIe5c@syntax-violation '#f '"duplicate use of keyword " uI176d@x uI177f@kwd) (uI1779@f (cdr uI1775@cls*) (cons uI177f@kwd uI1776@seen*))))) uI177d@ls/false) (let ((uI1783@t uI177b@t)) (let ((uI1785@ls/false (uId7c@syntax-dispatch uI1783@t 'any))) (if uI1785@ls/false (apply (lambda (uI1787@cls) (uIe5c@syntax-violation '#f '"malformed define-record-type clause" uI1787@cls)) uI1785@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1783@t))))))) (void))))))) (let ((uI1765@t uI1741@x)) (let ((uI1767@ls/false (uId7c@syntax-dispatch uI1765@t '(_ any . each-any)))) (if uI1767@ls/false (apply (lambda (uI1769@namespec uI176a@clause*) (begin (uI1764@verify-clauses uI1741@x uI176a@clause*) (uI1762@do-define-record uI1769@namespec uI176a@clause*))) uI1767@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1765@t)))))))) (set! uI284c@uId70@define-record-type-macro uId70@define-record-type-macro) (set! uId72@define-condition-type-macro (lambda (uI193d@x) (let ((uI1940@mkname '#f)) (begin (set! uI1940@mkname (lambda (uI196d@name uI196e@suffix) (uIe60@datum->syntax uI196d@name (string->symbol (string-append (symbol->string (uIe62@syntax->datum uI196d@name)) uI196e@suffix))))) (let ((uI1941@t uI193d@x)) (let ((uI1943@ls/false (uId7c@syntax-dispatch uI1941@t '(any any any any any . #(each (any any)))))) (if (and uI1943@ls/false (apply (lambda (uI1945@ctxt uI1946@name uI1947@super uI1948@constructor uI1949@predicate uI194a@field* uI194b@accessor*) (and (uIb75@id? uI1946@name) (uIb75@id? uI1947@super) (uIb75@id? uI1948@constructor) (uIb75@id? uI1949@predicate) (for-all uIb75@id? uI194a@field*) (for-all uIb75@id? uI194b@accessor*))) uI1943@ls/false)) (apply (lambda (uI1953@ctxt uI1954@name uI1955@super uI1956@constructor uI1957@predicate uI1958@field* uI1959@accessor*) (let ((uI1961@aux-accessor* (map (lambda (uI1963@x) (gensym)) uI1959@accessor*))) (uId32@bless (cons 'begin (cons (cons 'define-record-type (cons (list uI1954@name uI1956@constructor (gensym)) (cons (list 'parent uI1955@super) (cons (cons 'fields (map (lambda (uI1965@field uI1966@aux) (list 'immutable uI1965@field uI1966@aux)) uI1958@field* uI1961@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define uI1957@predicate (list 'condition-predicate (list 'record-type-descriptor uI1954@name))) (map (lambda (uI1969@accessor uI196a@aux) (list 'define uI1969@accessor (list 'condition-accessor (list 'record-type-descriptor uI1954@name) uI196a@aux))) uI1959@accessor* uI1961@aux-accessor*))))))) uI1943@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1941@t)))))))) (set! uI284d@uId72@define-condition-type-macro uId72@define-condition-type-macro) (set! uId74@incorrect-usage-macro (lambda (uI1971@e) (uIe5c@syntax-violation '#f '"incorrect usage of auxiliary keyword" uI1971@e))) (set! uI284e@uId74@incorrect-usage-macro uId74@incorrect-usage-macro) (set! uId76@parameterize-macro (lambda (uI1973@e) (let ((uI1975@t uI1973@e)) (let ((uI1977@ls/false (uId7c@syntax-dispatch uI1975@t '(_ () any . each-any)))) (if uI1977@ls/false (apply (lambda (uI1979@b uI197a@b*) (uId32@bless (cons 'let (cons '() (cons uI1979@b uI197a@b*))))) uI1977@ls/false) (let ((uI197d@t uI1975@t)) (let ((uI197f@ls/false (uId7c@syntax-dispatch uI197d@t '(_ #(each (any any)) any . each-any)))) (if uI197f@ls/false (apply (lambda (uI1981@olhs* uI1982@orhs* uI1983@b uI1984@b*) (let ((uI1989@lhs* (uIe4a@generate-temporaries uI1981@olhs*)) (uI198a@rhs* (uIe4a@generate-temporaries uI1982@orhs*))) (uId32@bless (cons (list 'lambda (append uI1989@lhs* uI198a@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (uI198d@lhs uI198e@rhs) (list 'let (list (list 't (list uI198d@lhs))) (list uI198d@lhs uI198e@rhs) (cons 'set! (cons uI198e@rhs '(t))))) uI1989@lhs* uI198a@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons uI1983@b uI1984@b*))) '(swap)))))) (append uI1981@olhs* uI1982@orhs*))))) uI197f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI197d@t))))))))) (set! uI284f@uId76@parameterize-macro uId76@parameterize-macro) (set! uId78@foreign-call-transformer (lambda (uI1991@e uI1992@r uI1993@mr) (let ((uI1997@t uI1991@e)) (let ((uI1999@ls/false (uId7c@syntax-dispatch uI1997@t '(_ any . each-any)))) (if uI1999@ls/false (apply (lambda (uI199b@name uI199c@arg*) (cons 'foreign-call (cons (uId9e@chi-expr uI199b@name uI1992@r uI1993@mr) (uId9a@chi-expr* uI199c@arg* uI1992@r uI1993@mr)))) uI1999@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1997@t)))))) (set! uI2850@uId78@foreign-call-transformer uId78@foreign-call-transformer) (set! uId7a@convert-pattern (lambda (uI199f@pattern uI19a0@keys) (let ((uI19a4@cvt* '#f) (uI19a6@cvt '#f)) (begin (set! uI19a4@cvt* (lambda (uI1a43@p* uI1a44@n uI1a45@ids) (if (null? uI1a43@p*) (values '() uI1a45@ids) (call-with-values (lambda () (uI19a4@cvt* (cdr uI1a43@p*) uI1a44@n uI1a45@ids)) (lambda (uI1a4d@uI1a4a uI1a4e@uI1a4c) (let ((uI1a51@ids uI1a4e@uI1a4c) (uI1a52@y uI1a4d@uI1a4a)) (call-with-values (lambda () (uI19a6@cvt (car uI1a43@p*) uI1a44@n uI1a51@ids)) (lambda (uI1a59@uI1a56 uI1a5a@uI1a58) (let ((uI1a5d@ids uI1a5a@uI1a58) (uI1a5e@x uI1a59@uI1a56)) (values (cons uI1a5e@x uI1a52@y) uI1a5d@ids)))))))))) (set! uI19a6@cvt (lambda (uI19a7@p uI19a8@n uI19a9@ids) (let ((uI19ad@t uI19a7@p)) (let ((uI19af@ls/false (uId7c@syntax-dispatch uI19ad@t 'any))) (if (and uI19af@ls/false (apply (lambda (uI19b1@id) (uIb75@id? uI19b1@id)) uI19af@ls/false)) (apply (lambda (uI19b3@id) (if (uIb81@bound-id-member? uI19a7@p uI19a0@keys) (values (vector 'free-id uI19a7@p) uI19a9@ids) (if (uIb7b@free-id=? uI19a7@p (uId04@scheme-stx '_)) (values '_ uI19a9@ids) (values 'any (cons (cons uI19a7@p uI19a8@n) uI19a9@ids))))) uI19af@ls/false) (let ((uI19b5@t uI19ad@t)) (let ((uI19b7@ls/false (uId7c@syntax-dispatch uI19b5@t '(any any)))) (if (and uI19b7@ls/false (apply (lambda (uI19b9@p uI19ba@dots) (uId7e@ellipsis? uI19ba@dots)) uI19b7@ls/false)) (apply (lambda (uI19bd@p uI19be@dots) (call-with-values (lambda () (uI19a6@cvt uI19bd@p (+ uI19a8@n '1) uI19a9@ids)) (lambda (uI19c5@uI19c2 uI19c6@uI19c4) (let ((uI19c9@ids uI19c6@uI19c4) (uI19ca@p uI19c5@uI19c2)) (values (if (eq? uI19ca@p 'any) 'each-any (vector 'each uI19ca@p)) uI19c9@ids))))) uI19b7@ls/false) (let ((uI19cd@t uI19b5@t)) (let ((uI19cf@ls/false (uId7c@syntax-dispatch uI19cd@t '(any any . #(each+ any () any))))) (if (and uI19cf@ls/false (apply (lambda (uI19d1@x uI19d2@dots uI19d3@ys uI19d4@z) (uId7e@ellipsis? uI19d2@dots)) uI19cf@ls/false)) (apply (lambda (uI19d9@x uI19da@dots uI19db@ys uI19dc@z) (call-with-values (lambda () (uI19a6@cvt uI19dc@z uI19a8@n uI19a9@ids)) (lambda (uI19e5@uI19e2 uI19e6@uI19e4) (let ((uI19e9@ids uI19e6@uI19e4) (uI19ea@z uI19e5@uI19e2)) (call-with-values (lambda () (uI19a4@cvt* uI19db@ys uI19a8@n uI19e9@ids)) (lambda (uI19f1@uI19ee uI19f2@uI19f0) (let ((uI19f5@ids uI19f2@uI19f0) (uI19f6@ys uI19f1@uI19ee)) (call-with-values (lambda () (uI19a6@cvt uI19d9@x (+ uI19a8@n '1) uI19f5@ids)) (lambda (uI19fd@uI19fa uI19fe@uI19fc) (let ((uI1a01@ids uI19fe@uI19fc) (uI1a02@x uI19fd@uI19fa)) (values (vector 'each+ uI1a02@x (reverse uI19f6@ys) uI19ea@z) uI1a01@ids))))))))))) uI19cf@ls/false) (let ((uI1a05@t uI19cd@t)) (let ((uI1a07@ls/false (uId7c@syntax-dispatch uI1a05@t '(any . any)))) (if uI1a07@ls/false (apply (lambda (uI1a09@x uI1a0a@y) (call-with-values (lambda () (uI19a6@cvt uI1a0a@y uI19a8@n uI19a9@ids)) (lambda (uI1a11@uI1a0e uI1a12@uI1a10) (let ((uI1a15@ids uI1a12@uI1a10) (uI1a16@y uI1a11@uI1a0e)) (call-with-values (lambda () (uI19a6@cvt uI1a09@x uI19a8@n uI1a15@ids)) (lambda (uI1a1d@uI1a1a uI1a1e@uI1a1c) (let ((uI1a21@ids uI1a1e@uI1a1c) (uI1a22@x uI1a1d@uI1a1a)) (values (cons uI1a22@x uI1a16@y) uI1a21@ids)))))))) uI1a07@ls/false) (let ((uI1a25@t uI1a05@t)) (let ((uI1a27@ls/false (uId7c@syntax-dispatch uI1a25@t '()))) (if uI1a27@ls/false (apply (lambda () (values '() uI19a9@ids)) uI1a27@ls/false) (let ((uI1a29@t uI1a25@t)) (let ((uI1a2b@ls/false (uId7c@syntax-dispatch uI1a29@t '#(vector each-any)))) (if (and uI1a2b@ls/false (apply (lambda (uI1a2d@p) (not (uIb41@stx? uI1a2d@p))) uI1a2b@ls/false)) (apply (lambda (uI1a2f@p) (call-with-values (lambda () (uI19a6@cvt uI1a2f@p uI19a8@n uI19a9@ids)) (lambda (uI1a35@uI1a32 uI1a36@uI1a34) (let ((uI1a39@ids uI1a36@uI1a34) (uI1a3a@p uI1a35@uI1a32)) (values (vector 'vector uI1a3a@p) uI1a39@ids))))) uI1a2b@ls/false) (let ((uI1a3d@t uI1a29@t)) (let ((uI1a3f@ls/false (uId7c@syntax-dispatch uI1a3d@t 'any))) (if uI1a3f@ls/false (apply (lambda (uI1a41@datum) (values (vector 'atom (uIb89@stx->datum uI1a41@datum)) uI19a9@ids)) uI1a3f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1a3d@t)))))))))))))))))))))))) (uI19a6@cvt uI199f@pattern '0 '()))))) (set! uI2851@uId7a@convert-pattern uId7a@convert-pattern) (set! uId7c@syntax-dispatch (let ((uI1a62@stx^ '#f) (uI1a64@match-each '#f) (uI1a66@match-each+ '#f) (uI1a68@match-each-any '#f) (uI1a6a@match-empty '#f) (uI1a6c@combine '#f) (uI1a6e@match* '#f) (uI1a70@match '#f)) (begin (set! uI1a62@stx^ (lambda (uI1b3d@e uI1b3e@m* uI1b3f@s* uI1b40@ae*) (if (and (null? uI1b3e@m*) (null? uI1b3f@s*) (null? uI1b40@ae*)) uI1b3d@e (uIb5d@mkstx uI1b3d@e uI1b3e@m* uI1b3f@s* uI1b40@ae*)))) (set! uI1a64@match-each (lambda (uI1b1d@e uI1b1e@p uI1b1f@m* uI1b20@s* uI1b21@ae*) (if (pair? uI1b1d@e) (let ((uI1b27@first (uI1a70@match (car uI1b1d@e) uI1b1e@p uI1b1f@m* uI1b20@s* uI1b21@ae* '()))) (and uI1b27@first (let ((uI1b29@rest (uI1a64@match-each (cdr uI1b1d@e) uI1b1e@p uI1b1f@m* uI1b20@s* uI1b21@ae*))) (and uI1b29@rest (cons uI1b27@first uI1b29@rest))))) (if (null? uI1b1d@e) '() (if (uIb41@stx? uI1b1d@e) (and (not (uIafb@top-marked? uI1b1f@m*)) (call-with-values (lambda () (join-wraps uI1b1f@m* uI1b20@s* uI1b21@ae* uI1b1d@e)) (lambda (uI1b31@uI1b2c uI1b32@uI1b2e uI1b33@uI1b30) (let ((uI1b37@ae* uI1b33@uI1b30) (uI1b38@s* uI1b32@uI1b2e) (uI1b39@m* uI1b31@uI1b2c)) (uI1a64@match-each (uIb43@stx-expr uI1b1d@e) uI1b1e@p uI1b39@m* uI1b38@s* uI1b37@ae*))))) (if (uI6b4@uI588@annotation? uI1b1d@e) (uI1a64@match-each (uI6b6@uI58c@annotation-expression uI1b1d@e) uI1b1e@p uI1b1f@m* uI1b20@s* uI1b21@ae*) '#f)))))) (set! uI1a66@match-each+ (lambda (uI1add@e uI1ade@x-pat uI1adf@y-pat uI1ae0@z-pat uI1ae1@m* uI1ae2@s* uI1ae3@ae* uI1ae4@r) (let uI1af5@f ((uI1aed@e uI1add@e) (uI1aee@m* uI1ae1@m*) (uI1aef@s* uI1ae2@s*) (uI1af0@ae* uI1ae3@ae*)) (if (pair? uI1aed@e) (call-with-values (lambda () (uI1af5@f (cdr uI1aed@e) uI1aee@m* uI1aef@s* uI1af0@ae*)) (lambda (uI1afd@uI1af8 uI1afe@uI1afa uI1aff@uI1afc) (let ((uI1b03@r uI1aff@uI1afc) (uI1b04@y-pat uI1afe@uI1afa) (uI1b05@xr* uI1afd@uI1af8)) (if uI1b03@r (if (null? uI1b04@y-pat) (let ((uI1b09@xr (uI1a70@match (car uI1aed@e) uI1ade@x-pat uI1aee@m* uI1aef@s* uI1af0@ae* '()))) (if uI1b09@xr (values (cons uI1b09@xr uI1b05@xr*) uI1b04@y-pat uI1b03@r) (values '#f '#f '#f))) (values '() (cdr uI1b04@y-pat) (uI1a70@match (car uI1aed@e) (car uI1b04@y-pat) uI1aee@m* uI1aef@s* uI1af0@ae* uI1b03@r))) (values '#f '#f '#f))))) (if (uIb41@stx? uI1aed@e) (if (uIafb@top-marked? uI1aee@m*) (values '() uI1adf@y-pat (uI1a70@match uI1aed@e uI1ae0@z-pat uI1aee@m* uI1aef@s* uI1af0@ae* uI1ae4@r)) (call-with-values (lambda () (join-wraps uI1aee@m* uI1aef@s* uI1af0@ae* uI1aed@e)) (lambda (uI1b11@uI1b0c uI1b12@uI1b0e uI1b13@uI1b10) (let ((uI1b17@ae* uI1b13@uI1b10) (uI1b18@s* uI1b12@uI1b0e) (uI1b19@m* uI1b11@uI1b0c)) (uI1af5@f (uIb43@stx-expr uI1aed@e) uI1b19@m* uI1b18@s* uI1b17@ae*))))) (if (uI6b4@uI588@annotation? uI1aed@e) (uI1af5@f (uI6b6@uI58c@annotation-expression uI1aed@e) uI1aee@m* uI1aef@s* uI1af0@ae*) (values '() uI1adf@y-pat (uI1a70@match uI1aed@e uI1ae0@z-pat uI1aee@m* uI1aef@s* uI1af0@ae* uI1ae4@r)))))))) (set! uI1a68@match-each-any (lambda (uI1ac1@e uI1ac2@m* uI1ac3@s* uI1ac4@ae*) (if (pair? uI1ac1@e) (let ((uI1ac9@l (uI1a68@match-each-any (cdr uI1ac1@e) uI1ac2@m* uI1ac3@s* uI1ac4@ae*))) (and uI1ac9@l (cons (uI1a62@stx^ (car uI1ac1@e) uI1ac2@m* uI1ac3@s* uI1ac4@ae*) uI1ac9@l))) (if (null? uI1ac1@e) '() (if (uIb41@stx? uI1ac1@e) (and (not (uIafb@top-marked? uI1ac2@m*)) (call-with-values (lambda () (join-wraps uI1ac2@m* uI1ac3@s* uI1ac4@ae* uI1ac1@e)) (lambda (uI1ad1@uI1acc uI1ad2@uI1ace uI1ad3@uI1ad0) (let ((uI1ad7@ae* uI1ad3@uI1ad0) (uI1ad8@s* uI1ad2@uI1ace) (uI1ad9@m* uI1ad1@uI1acc)) (uI1a68@match-each-any (uIb43@stx-expr uI1ac1@e) uI1ad9@m* uI1ad8@s* uI1ad7@ae*))))) (if (uI6b4@uI588@annotation? uI1ac1@e) (uI1a68@match-each-any (uI6b6@uI58c@annotation-expression uI1ac1@e) uI1ac2@m* uI1ac3@s* uI1ac4@ae*) '#f)))))) (set! uI1a6a@match-empty (lambda (uI1abb@p uI1abc@r) (if (null? uI1abb@p) uI1abc@r (if (eq? uI1abb@p '_) uI1abc@r (if (eq? uI1abb@p 'any) (cons '() uI1abc@r) (if (pair? uI1abb@p) (uI1a6a@match-empty (car uI1abb@p) (uI1a6a@match-empty (cdr uI1abb@p) uI1abc@r)) (if (eq? uI1abb@p 'each-any) (cons '() uI1abc@r) (let ((uI1abf@t (vector-ref uI1abb@p '0))) (if (memv uI1abf@t '(each)) (uI1a6a@match-empty (vector-ref uI1abb@p '1) uI1abc@r) (if (memv uI1abf@t '(each+)) (uI1a6a@match-empty (vector-ref uI1abb@p '1) (uI1a6a@match-empty (reverse (vector-ref uI1abb@p '2)) (uI1a6a@match-empty (vector-ref uI1abb@p '3) uI1abc@r))) (if (memv uI1abf@t '(free-id atom)) uI1abc@r (if (memv uI1abf@t '(scheme-id atom)) uI1abc@r (if (memv uI1abf@t '(vector)) (uI1a6a@match-empty (vector-ref uI1abb@p '1) uI1abc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" uI1abb@p)))))))))))))) (set! uI1a6c@combine (lambda (uI1ab7@r* uI1ab8@r) (if (null? (car uI1ab7@r*)) uI1ab8@r (cons (map car uI1ab7@r*) (uI1a6c@combine (map cdr uI1ab7@r*) uI1ab8@r))))) (set! uI1a6e@match* (lambda (uI1a93@e uI1a94@p uI1a95@m* uI1a96@s* uI1a97@ae* uI1a98@r) (if (null? uI1a94@p) (and (null? uI1a93@e) uI1a98@r) (if (pair? uI1a94@p) (and (pair? uI1a93@e) (uI1a70@match (car uI1a93@e) (car uI1a94@p) uI1a95@m* uI1a96@s* uI1a97@ae* (uI1a70@match (cdr uI1a93@e) (cdr uI1a94@p) uI1a95@m* uI1a96@s* uI1a97@ae* uI1a98@r))) (if (eq? uI1a94@p 'each-any) (let ((uI1a9f@l (uI1a68@match-each-any uI1a93@e uI1a95@m* uI1a96@s* uI1a97@ae*))) (and uI1a9f@l (cons uI1a9f@l uI1a98@r))) (let ((uI1aa1@t (vector-ref uI1a94@p '0))) (if (memv uI1aa1@t '(each)) (if (null? uI1a93@e) (uI1a6a@match-empty (vector-ref uI1a94@p '1) uI1a98@r) (let ((uI1aa3@r* (uI1a64@match-each uI1a93@e (vector-ref uI1a94@p '1) uI1a95@m* uI1a96@s* uI1a97@ae*))) (and uI1aa3@r* (uI1a6c@combine uI1aa3@r* uI1a98@r)))) (if (memv uI1aa1@t '(free-id)) (and (symbol? uI1a93@e) (uIafb@top-marked? uI1a95@m*) (uIb7b@free-id=? (uI1a62@stx^ uI1a93@e uI1a95@m* uI1a96@s* uI1a97@ae*) (vector-ref uI1a94@p '1)) uI1a98@r) (if (memv uI1aa1@t '(scheme-id)) (and (symbol? uI1a93@e) (uIafb@top-marked? uI1a95@m*) (uIb7b@free-id=? (uI1a62@stx^ uI1a93@e uI1a95@m* uI1a96@s* uI1a97@ae*) (uId04@scheme-stx (vector-ref uI1a94@p '1))) uI1a98@r) (if (memv uI1aa1@t '(each+)) (call-with-values (lambda () (uI1a66@match-each+ uI1a93@e (vector-ref uI1a94@p '1) (vector-ref uI1a94@p '2) (vector-ref uI1a94@p '3) uI1a95@m* uI1a96@s* uI1a97@ae* uI1a98@r)) (lambda (uI1aab@uI1aa6 uI1aac@uI1aa8 uI1aad@uI1aaa) (let ((uI1ab1@r uI1aad@uI1aaa) (uI1ab2@y-pat uI1aac@uI1aa8) (uI1ab3@xr* uI1aab@uI1aa6)) (and uI1ab1@r (null? uI1ab2@y-pat) (if (null? uI1ab3@xr*) (uI1a6a@match-empty (vector-ref uI1a94@p '1) uI1ab1@r) (uI1a6c@combine uI1ab3@xr* uI1ab1@r)))))) (if (memv uI1aa1@t '(atom)) (and (fast-equal? (vector-ref uI1a94@p '1) (uIb87@strip uI1a93@e uI1a95@m*)) uI1a98@r) (if (memv uI1aa1@t '(vector)) (and (vector? uI1a93@e) (uI1a70@match (vector->list uI1a93@e) (vector-ref uI1a94@p '1) uI1a95@m* uI1a96@s* uI1a97@ae* uI1a98@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" uI1a94@p))))))))))))) (set! uI1a70@match (lambda (uI1a75@e uI1a76@p uI1a77@m* uI1a78@s* uI1a79@ae* uI1a7a@r) (if (not uI1a7a@r) '#f (if (eq? uI1a76@p '_) uI1a7a@r (if (eq? uI1a76@p 'any) (cons (uI1a62@stx^ uI1a75@e uI1a77@m* uI1a78@s* uI1a79@ae*) uI1a7a@r) (if (uIb41@stx? uI1a75@e) (and (not (uIafb@top-marked? uI1a77@m*)) (call-with-values (lambda () (join-wraps uI1a77@m* uI1a78@s* uI1a79@ae* uI1a75@e)) (lambda (uI1a87@uI1a82 uI1a88@uI1a84 uI1a89@uI1a86) (let ((uI1a8d@ae* uI1a89@uI1a86) (uI1a8e@s* uI1a88@uI1a84) (uI1a8f@m* uI1a87@uI1a82)) (uI1a70@match (uIb43@stx-expr uI1a75@e) uI1a76@p uI1a8f@m* uI1a8e@s* uI1a8d@ae* uI1a7a@r))))) (if (uI6b4@uI588@annotation? uI1a75@e) (uI1a70@match (uI6b6@uI58c@annotation-expression uI1a75@e) uI1a76@p uI1a77@m* uI1a78@s* uI1a79@ae* uI1a7a@r) (uI1a6e@match* uI1a75@e uI1a76@p uI1a77@m* uI1a78@s* uI1a79@ae* uI1a7a@r)))))))) (lambda (uI1a71@e uI1a72@p) (uI1a70@match uI1a71@e uI1a72@p '() '() '() '()))))) (set! uI2852@uId7c@syntax-dispatch uId7c@syntax-dispatch) (set! uId7e@ellipsis? (lambda (uI1b45@x) (and (uIb75@id? uI1b45@x) (uIb7b@free-id=? uI1b45@x (uId04@scheme-stx '...))))) (set! uI2853@uId7e@ellipsis? uId7e@ellipsis?) (set! uId80@underscore? (lambda (uI1b47@x) (and (uIb75@id? uI1b47@x) (uIb7b@free-id=? uI1b47@x (uId04@scheme-stx '_))))) (set! uI2854@uId80@underscore? uId80@underscore?) (set! uId82@verify-literals (lambda (uI1b49@lits uI1b4a@expr) (for-each (lambda (uI1b4d@x) (if (or (not (uIb75@id? uI1b4d@x)) (uId7e@ellipsis? uI1b4d@x) (uId80@underscore? uI1b4d@x)) (uIe5c@syntax-violation '#f '"invalid literal" uI1b4a@expr uI1b4d@x) (void))) uI1b49@lits))) (set! uI2855@uId82@verify-literals uId82@verify-literals) (set! uId84@syntax-case-transformer (let ((uI1b50@build-dispatch-call '#f) (uI1b52@invalid-ids-error '#f) (uI1b54@gen-clause '#f) (uI1b56@gen-syntax-case '#f)) (begin (set! uI1b50@build-dispatch-call (lambda (uI1bc1@pvars uI1bc2@expr uI1bc3@y uI1bc4@r uI1bc5@mr) (let ((uI1bcb@ids (map car uI1bc1@pvars)) (uI1bcc@levels (map cdr uI1bc1@pvars))) (let ((uI1bcf@labels (map uIb01@gen-label uI1bcb@ids)) (uI1bd0@new-vars (map uIafd@gen-lexical uI1bcb@ids))) (let ((uI1bd3@body (uId9e@chi-expr (uIb61@add-subst (uIb35@make-full-rib uI1bcb@ids uI1bcf@labels) uI1bc2@expr) (append (map (lambda (uI1bd5@label uI1bd6@var uI1bd7@level) (cons uI1bd5@label (uIb8f@make-binding 'syntax (cons uI1bd6@var uI1bd7@level)))) uI1bcf@labels uI1bd0@new-vars (map cdr uI1bc1@pvars)) uI1bc4@r) uI1bc5@mr))) (list '(primitive apply) (uIad8@uIa04@build-lambda '#f uI1bd0@new-vars uI1bd3@body) uI1bc3@y)))))) (set! uI1b52@invalid-ids-error (lambda (uI1bb5@id* uI1bb6@e uI1bb7@class) (let uI1bbf@find ((uI1bbb@id* uI1bb5@id*) (uI1bbc@ok* '())) (if (null? uI1bbb@id*) (uIe5c@syntax-violation '#f '"invalid syntax" uI1bb6@e) (if (uIb75@id? (car uI1bbb@id*)) (if (uIb81@bound-id-member? (car uI1bbb@id*) uI1bbc@ok*) (uIe58@syntax-error (car uI1bbb@id*) '"duplicate " uI1bb7@class) (uI1bbf@find (cdr uI1bbb@id*) (cons (car uI1bbb@id*) uI1bbc@ok*))) (uIe58@syntax-error (car uI1bbb@id*) '"invalid " uI1bb7@class)))))) (set! uI1b54@gen-clause (lambda (uI1b8d@x uI1b8e@keys uI1b8f@clauses uI1b90@r uI1b91@mr uI1b92@pat uI1b93@fender uI1b94@expr) (call-with-values (lambda () (uId7a@convert-pattern uI1b92@pat uI1b8e@keys)) (lambda (uI1ba1@uI1b9e uI1ba2@uI1ba0) (let ((uI1ba5@pvars uI1ba2@uI1ba0) (uI1ba6@p uI1ba1@uI1b9e)) (if (not (uIb7f@distinct-bound-ids? (map car uI1ba5@pvars))) (uI1b52@invalid-ids-error (map car uI1ba5@pvars) uI1b92@pat '"pattern variable") (if (not (for-all (lambda (uI1ba9@x) (not (uId7e@ellipsis? (car uI1ba9@x)))) uI1ba5@pvars)) (uIe5c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" uI1b92@pat) (let ((uI1bab@y (uIafd@gen-lexical 'tmp))) (let ((uI1bad@test (if (eq? uI1b93@fender '#t) uI1bab@y (let ((uI1baf@call (uI1b50@build-dispatch-call uI1ba5@pvars uI1b93@fender uI1bab@y uI1b90@r uI1b91@mr))) (list 'if uI1bab@y uI1baf@call (list 'quote '#f)))))) (let ((uI1bb1@conseq (uI1b50@build-dispatch-call uI1ba5@pvars uI1b94@expr uI1bab@y uI1b90@r uI1b91@mr))) (let ((uI1bb3@altern (uI1b56@gen-syntax-case uI1b8d@x uI1b8e@keys uI1b8f@clauses uI1b90@r uI1b91@mr))) (list (uIad8@uIa04@build-lambda '#f (list uI1bab@y) (list 'if uI1bad@test uI1bb1@conseq uI1bb3@altern)) (list '(primitive syntax-dispatch) uI1b8d@x (list 'quote uI1ba6@p)))))))))))))) (set! uI1b56@gen-syntax-case (lambda (uI1b6b@x uI1b6c@keys uI1b6d@clauses uI1b6e@r uI1b6f@mr) (if (null? uI1b6d@clauses) (list '(primitive syntax-error) uI1b6b@x) (let ((uI1b75@t (car uI1b6d@clauses))) (let ((uI1b77@ls/false (uId7c@syntax-dispatch uI1b75@t '(any any)))) (if uI1b77@ls/false (apply (lambda (uI1b79@pat uI1b7a@expr) (if (and (uIb75@id? uI1b79@pat) (not (uIb81@bound-id-member? uI1b79@pat uI1b6c@keys)) (not (uId7e@ellipsis? uI1b79@pat))) (if (uIb7b@free-id=? uI1b79@pat (uId04@scheme-stx '_)) (uId9e@chi-expr uI1b7a@expr uI1b6e@r uI1b6f@mr) (let ((uI1b7d@lab (uIb01@gen-label uI1b79@pat)) (uI1b7e@lex (uIafd@gen-lexical uI1b79@pat))) (let ((uI1b81@body (uId9e@chi-expr (uIb61@add-subst (uIb35@make-full-rib (list uI1b79@pat) (list uI1b7d@lab)) uI1b7a@expr) (cons (cons uI1b7d@lab (uIb8f@make-binding 'syntax (cons uI1b7e@lex '0))) uI1b6e@r) uI1b6f@mr))) (list (uIad8@uIa04@build-lambda '#f (list uI1b7e@lex) uI1b81@body) uI1b6b@x)))) (uI1b54@gen-clause uI1b6b@x uI1b6c@keys (cdr uI1b6d@clauses) uI1b6e@r uI1b6f@mr uI1b79@pat '#t uI1b7a@expr))) uI1b77@ls/false) (let ((uI1b83@t uI1b75@t)) (let ((uI1b85@ls/false (uId7c@syntax-dispatch uI1b83@t '(any any any)))) (if uI1b85@ls/false (apply (lambda (uI1b87@pat uI1b88@fender uI1b89@expr) (uI1b54@gen-clause uI1b6b@x uI1b6c@keys (cdr uI1b6d@clauses) uI1b6e@r uI1b6f@mr uI1b87@pat uI1b88@fender uI1b89@expr)) uI1b85@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1b83@t)))))))))) (lambda (uI1b57@e uI1b58@r uI1b59@mr) (let ((uI1b5d@t uI1b57@e)) (let ((uI1b5f@ls/false (uId7c@syntax-dispatch uI1b5d@t '(_ any each-any . each-any)))) (if uI1b5f@ls/false (apply (lambda (uI1b61@expr uI1b62@keys uI1b63@clauses) (begin (uId82@verify-literals uI1b62@keys uI1b57@e) (let ((uI1b67@x (uIafd@gen-lexical 'tmp))) (let ((uI1b69@body (uI1b56@gen-syntax-case uI1b67@x uI1b62@keys uI1b63@clauses uI1b58@r uI1b59@mr))) (list (uIad8@uIa04@build-lambda '#f (list uI1b67@x) uI1b69@body) (uId9e@chi-expr uI1b61@expr uI1b58@r uI1b59@mr)))))) uI1b5f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1b5d@t)))))))) (set! uI2856@uId84@syntax-case-transformer uId84@syntax-case-transformer) (set! uId86@ellipsis-map (lambda (uI1bdb@proc uI1bdc@ls . uI1bdf@ls*) (let ((uI1be2@who '#f)) (begin (set! uI1be2@who '...) (begin (if (not (list? uI1bdc@ls)) (assertion-violation uI1be2@who '"not a list" uI1bdc@ls) (void)) (if (not (null? uI1bdf@ls*)) (let ((uI1be3@n (length uI1bdc@ls))) (for-each (lambda (uI1be5@x) (begin (if (not (list? uI1be5@x)) (assertion-violation uI1be2@who '"not a list" uI1be5@x) (void)) (if (not (= (length uI1be5@x) uI1be3@n)) (assertion-violation uI1be2@who '"length mismatch" uI1bdc@ls uI1be5@x) (void)))) uI1bdf@ls*)) (void)) (apply map uI1bdb@proc uI1bdc@ls uI1bdf@ls*)))))) (set! uI2857@uId86@ellipsis-map uId86@ellipsis-map) (set! uId88@syntax-transformer (let ((uI1be8@gen-syntax '#f) (uI1bea@gen-ref '#f) (uI1bec@gen-append '#f) (uI1bee@gen-mappend '#f) (uI1bf0@gen-map '#f) (uI1bf2@gen-cons '#f) (uI1bf4@gen-vector '#f) (uI1bf6@regen '#f)) (begin (set! uI1be8@gen-syntax (lambda (uI1c5f@src uI1c60@e uI1c61@r uI1c62@maps uI1c63@ellipsis? uI1c64@vec?) (let ((uI1c6b@t uI1c60@e)) (let ((uI1c6d@ls/false (uId7c@syntax-dispatch uI1c6b@t 'any))) (if (and uI1c6d@ls/false (apply (lambda (uI1c6f@dots) (uI1c63@ellipsis? uI1c6f@dots)) uI1c6d@ls/false)) (apply (lambda (uI1c71@dots) (uIe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" uI1c5f@src)) uI1c6d@ls/false) (let ((uI1c73@t uI1c6b@t)) (let ((uI1c75@ls/false (uId7c@syntax-dispatch uI1c73@t 'any))) (if (and uI1c75@ls/false (apply (lambda (uI1c77@id) (uIb75@id? uI1c77@id)) uI1c75@ls/false)) (apply (lambda (uI1c79@id) (let ((uI1c7b@label (uIb8b@id->label uI1c60@e))) (let ((uI1c7d@b (uIb8d@label->binding uI1c7b@label uI1c61@r))) (if (eq? (uIb91@binding-type uI1c7d@b) 'syntax) (call-with-values (lambda () (let ((uI1c83@var.lev (uIb93@binding-value uI1c7d@b))) (uI1bea@gen-ref uI1c5f@src (car uI1c83@var.lev) (cdr uI1c83@var.lev) uI1c62@maps))) (lambda (uI1c85@uI1c80 uI1c86@uI1c82) (let ((uI1c89@maps uI1c86@uI1c82) (uI1c8a@var uI1c85@uI1c80)) (values (list 'ref uI1c8a@var) uI1c89@maps)))) (values (list 'quote uI1c60@e) uI1c62@maps))))) uI1c75@ls/false) (let ((uI1c8d@t uI1c73@t)) (let ((uI1c8f@ls/false (uId7c@syntax-dispatch uI1c8d@t '(any any)))) (if (and uI1c8f@ls/false (apply (lambda (uI1c91@dots uI1c92@e) (uI1c63@ellipsis? uI1c91@dots)) uI1c8f@ls/false)) (apply (lambda (uI1c95@dots uI1c96@e) (if uI1c64@vec? (uIe5c@syntax-violation '#f '"misplaced ellipsis in syntax form" uI1c5f@src) (uI1be8@gen-syntax uI1c5f@src uI1c96@e uI1c61@r uI1c62@maps (lambda (uI1c99@x) '#f) '#f))) uI1c8f@ls/false) (let ((uI1c9b@t uI1c8d@t)) (let ((uI1c9d@ls/false (uId7c@syntax-dispatch uI1c9b@t '(any any . any)))) (if (and uI1c9d@ls/false (apply (lambda (uI1c9f@x uI1ca0@dots uI1ca1@y) (uI1c63@ellipsis? uI1ca0@dots)) uI1c9d@ls/false)) (apply (lambda (uI1ca5@x uI1ca6@dots uI1ca7@y) (let uI1cbd@f ((uI1cab@y uI1ca7@y) (uI1cac@k (lambda (uI1caf@maps) (call-with-values (lambda () (uI1be8@gen-syntax uI1c5f@src uI1ca5@x uI1c61@r (cons '() uI1caf@maps) uI1c63@ellipsis? '#f)) (lambda (uI1cb5@uI1cb2 uI1cb6@uI1cb4) (let ((uI1cb9@maps uI1cb6@uI1cb4) (uI1cba@x uI1cb5@uI1cb2)) (if (null? (car uI1cb9@maps)) (uIe5c@syntax-violation '#f '"extra ellipsis in syntax form" uI1c5f@src) (values (uI1bf0@gen-map uI1cba@x (car uI1cb9@maps)) (cdr uI1cb9@maps))))))))) (let ((uI1cbf@t uI1cab@y)) (let ((uI1cc1@ls/false (uId7c@syntax-dispatch uI1cbf@t '()))) (if uI1cc1@ls/false (apply (lambda () (uI1cac@k uI1c62@maps)) uI1cc1@ls/false) (let ((uI1cc3@t uI1cbf@t)) (let ((uI1cc5@ls/false (uId7c@syntax-dispatch uI1cc3@t '(any . any)))) (if (and uI1cc5@ls/false (apply (lambda (uI1cc7@dots uI1cc8@y) (uI1c63@ellipsis? uI1cc7@dots)) uI1cc5@ls/false)) (apply (lambda (uI1ccb@dots uI1ccc@y) (uI1cbd@f uI1ccc@y (lambda (uI1ccf@maps) (call-with-values (lambda () (uI1cac@k (cons '() uI1ccf@maps))) (lambda (uI1cd5@uI1cd2 uI1cd6@uI1cd4) (let ((uI1cd9@maps uI1cd6@uI1cd4) (uI1cda@x uI1cd5@uI1cd2)) (if (null? (car uI1cd9@maps)) (uIe5c@syntax-violation '#f '"extra ellipsis in syntax form" uI1c5f@src) (values (uI1bee@gen-mappend uI1cda@x (car uI1cd9@maps)) (cdr uI1cd9@maps))))))))) uI1cc5@ls/false) (let ((uI1cdd@t uI1cc3@t)) (let ((uI1cdf@ls/false (uId7c@syntax-dispatch uI1cdd@t '_))) (if uI1cdf@ls/false (apply (lambda () (call-with-values (lambda () (uI1be8@gen-syntax uI1c5f@src uI1cab@y uI1c61@r uI1c62@maps uI1c63@ellipsis? uI1c64@vec?)) (lambda (uI1ce5@uI1ce2 uI1ce6@uI1ce4) (let ((uI1ce9@maps uI1ce6@uI1ce4) (uI1cea@y uI1ce5@uI1ce2)) (call-with-values (lambda () (uI1cac@k uI1ce9@maps)) (lambda (uI1cf1@uI1cee uI1cf2@uI1cf0) (let ((uI1cf5@maps uI1cf2@uI1cf0) (uI1cf6@x uI1cf1@uI1cee)) (values (uI1bec@gen-append uI1cf6@x uI1cea@y) uI1cf5@maps)))))))) uI1cdf@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1cdd@t)))))))))))) uI1c9d@ls/false) (let ((uI1cf9@t uI1c9b@t)) (let ((uI1cfb@ls/false (uId7c@syntax-dispatch uI1cf9@t '(any . any)))) (if uI1cfb@ls/false (apply (lambda (uI1cfd@x uI1cfe@y) (call-with-values (lambda () (uI1be8@gen-syntax uI1c5f@src uI1cfd@x uI1c61@r uI1c62@maps uI1c63@ellipsis? '#f)) (lambda (uI1d05@uI1d02 uI1d06@uI1d04) (let ((uI1d09@maps uI1d06@uI1d04) (uI1d0a@xnew uI1d05@uI1d02)) (call-with-values (lambda () (uI1be8@gen-syntax uI1c5f@src uI1cfe@y uI1c61@r uI1d09@maps uI1c63@ellipsis? uI1c64@vec?)) (lambda (uI1d11@uI1d0e uI1d12@uI1d10) (let ((uI1d15@maps uI1d12@uI1d10) (uI1d16@ynew uI1d11@uI1d0e)) (values (uI1bf2@gen-cons uI1c60@e uI1cfd@x uI1cfe@y uI1d0a@xnew uI1d16@ynew) uI1d15@maps)))))))) uI1cfb@ls/false) (let ((uI1d19@t uI1cf9@t)) (let ((uI1d1b@ls/false (uId7c@syntax-dispatch uI1d19@t '#(vector each-any)))) (if uI1d1b@ls/false (apply (lambda (uI1d1d@ls) (call-with-values (lambda () (uI1be8@gen-syntax uI1c5f@src uI1d1d@ls uI1c61@r uI1c62@maps uI1c63@ellipsis? '#t)) (lambda (uI1d23@uI1d20 uI1d24@uI1d22) (let ((uI1d27@maps uI1d24@uI1d22) (uI1d28@lsnew uI1d23@uI1d20)) (values (uI1bf4@gen-vector uI1c60@e uI1d1d@ls uI1d28@lsnew) uI1d27@maps))))) uI1d1b@ls/false) (let ((uI1d2b@t uI1d19@t)) (let ((uI1d2d@ls/false (uId7c@syntax-dispatch uI1d2b@t '_))) (if uI1d2d@ls/false (apply (lambda () (values (list 'quote uI1c60@e) uI1c62@maps)) uI1d2d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1d2b@t)))))))))))))))))))))))) (set! uI1bea@gen-ref (lambda (uI1c45@src uI1c46@var uI1c47@level uI1c48@maps) (if (= uI1c47@level '0) (values uI1c46@var uI1c48@maps) (if (null? uI1c48@maps) (uIe5c@syntax-violation '#f '"missing ellipsis in syntax form" uI1c45@src) (call-with-values (lambda () (uI1bea@gen-ref uI1c45@src uI1c46@var (- uI1c47@level '1) (cdr uI1c48@maps))) (lambda (uI1c51@uI1c4e uI1c52@uI1c50) (let ((uI1c55@outer-maps uI1c52@uI1c50) (uI1c56@outer-var uI1c51@uI1c4e)) (let ((uI1c59@t (assq uI1c56@outer-var (car uI1c48@maps)))) (if uI1c59@t ((lambda (uI1c5b@b) (values (cdr uI1c5b@b) uI1c48@maps)) uI1c59@t) (let ((uI1c5d@inner-var (uIafd@gen-lexical 'tmp))) (values uI1c5d@inner-var (cons (cons (cons uI1c56@outer-var uI1c5d@inner-var) (car uI1c48@maps)) uI1c55@outer-maps)))))))))))) (set! uI1bec@gen-append (lambda (uI1c41@x uI1c42@y) (if (fast-equal? uI1c42@y ''()) uI1c41@x (list 'append uI1c41@x uI1c42@y)))) (set! uI1bee@gen-mappend (lambda (uI1c3d@e uI1c3e@map-env) (list 'apply '(primitive append) (uI1bf0@gen-map uI1c3d@e uI1c3e@map-env)))) (set! uI1bf0@gen-map (lambda (uI1c2b@e uI1c2c@map-env) (let ((uI1c2f@formals (map cdr uI1c2c@map-env)) (uI1c30@actuals (map (lambda (uI1c33@x) (list 'ref (car uI1c33@x))) uI1c2c@map-env))) (if (eq? (car uI1c2b@e) 'ref) (car uI1c30@actuals) (if (for-all (lambda (uI1c35@x) (and (eq? (car uI1c35@x) 'ref) (memq (cadr uI1c35@x) uI1c2f@formals))) (cdr uI1c2b@e)) (let ((uI1c37@args (map (let ((uI1c39@r (map cons uI1c2f@formals uI1c30@actuals))) (lambda (uI1c3b@x) (cdr (assq (cadr uI1c3b@x) uI1c39@r)))) (cdr uI1c2b@e)))) (cons 'map (cons (list 'primitive (car uI1c2b@e)) uI1c37@args))) (cons* 'map (list 'lambda uI1c2f@formals uI1c2b@e) uI1c30@actuals)))))) (set! uI1bf2@gen-cons (lambda (uI1c1b@e uI1c1c@x uI1c1d@y uI1c1e@xnew uI1c1f@ynew) (let ((uI1c25@t (car uI1c1f@ynew))) (if (memv uI1c25@t '(quote)) (if (eq? (car uI1c1e@xnew) 'quote) (let ((uI1c27@xnew (cadr uI1c1e@xnew)) (uI1c28@ynew (cadr uI1c1f@ynew))) (if (and (eq? uI1c27@xnew uI1c1c@x) (eq? uI1c28@ynew uI1c1d@y)) (list 'quote uI1c1b@e) (list 'quote (cons uI1c27@xnew uI1c28@ynew)))) (if (null? (cadr uI1c1f@ynew)) (list 'list uI1c1e@xnew) (list 'cons uI1c1e@xnew uI1c1f@ynew))) (if (memv uI1c25@t '(list)) (cons 'list (cons uI1c1e@xnew (cdr uI1c1f@ynew))) (list 'cons uI1c1e@xnew uI1c1f@ynew)))))) (set! uI1bf4@gen-vector (lambda (uI1c15@e uI1c16@ls uI1c17@lsnew) (if (eq? (car uI1c17@lsnew) 'quote) (if (eq? (cadr uI1c17@lsnew) uI1c16@ls) (list 'quote uI1c15@e) (list 'quote (list->vector (cadr uI1c17@lsnew)))) (if (eq? (car uI1c17@lsnew) 'list) (cons 'vector (cdr uI1c17@lsnew)) (list 'list->vector uI1c17@lsnew))))) (set! uI1bf6@regen (lambda (uI1c0f@x) (let ((uI1c11@t (car uI1c0f@x))) (if (memv uI1c11@t '(ref)) (cadr uI1c0f@x) (if (memv uI1c11@t '(primitive)) (list 'primitive (cadr uI1c0f@x)) (if (memv uI1c11@t '(quote)) (list 'quote (cadr uI1c0f@x)) (if (memv uI1c11@t '(lambda)) (uIad8@uIa04@build-lambda '#f (cadr uI1c0f@x) (uI1bf6@regen (caddr uI1c0f@x))) (if (memv uI1c11@t '(map)) (let ((uI1c13@ls (map uI1bf6@regen (cdr uI1c0f@x)))) (cons '(primitive ellipsis-map) uI1c13@ls)) (cons (list 'primitive (car uI1c0f@x)) (map uI1bf6@regen (cdr uI1c0f@x))))))))))) (lambda (uI1bf7@e uI1bf8@r uI1bf9@mr) (let ((uI1bfd@t uI1bf7@e)) (let ((uI1bff@ls/false (uId7c@syntax-dispatch uI1bfd@t '(_ any)))) (if uI1bff@ls/false (apply (lambda (uI1c01@x) (call-with-values (lambda () (uI1be8@gen-syntax uI1bf7@e uI1c01@x uI1bf8@r '() uId7e@ellipsis? '#f)) (lambda (uI1c07@uI1c04 uI1c08@uI1c06) (let ((uI1c0b@maps uI1c08@uI1c06) (uI1c0c@e uI1c07@uI1c04)) (uI1bf6@regen uI1c0c@e))))) uI1bff@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1bfd@t)))))))) (set! uI2858@uId88@syntax-transformer uId88@syntax-transformer) (set! uId8a@core-macro-transformer (lambda (uI1d2f@name) (let ((uI1d31@t uI1d2f@name)) (if (memv uI1d31@t '(quote)) uId2c@quote-transformer (if (memv uI1d31@t '(lambda)) uId30@lambda-transformer (if (memv uI1d31@t '(case-lambda)) uId2e@case-lambda-transformer (if (memv uI1d31@t '(letrec)) uId14@letrec-transformer (if (memv uI1d31@t '(letrec*)) uId16@letrec*-transformer (if (memv uI1d31@t '(let)) uId12@let-transformer (if (memv uI1d31@t '(if)) uId24@if-transformer (if (memv uI1d31@t '(and)) uId26@and-transformer (if (memv uI1d31@t '(or)) uId28@or-transformer (if (memv uI1d31@t '(foreign-call)) uId78@foreign-call-transformer (if (memv uI1d31@t '(syntax-case)) uId84@syntax-case-transformer (if (memv uI1d31@t '(syntax)) uId88@syntax-transformer (if (memv uI1d31@t '(type-descriptor)) uId1a@type-descriptor-transformer (if (memv uI1d31@t '(record-type-descriptor)) uId1c@record-type-descriptor-transformer (if (memv uI1d31@t '(record-constructor-descriptor)) uId1e@record-constructor-descriptor-transformer (if (memv uI1d31@t '(fluid-let-syntax)) uId18@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" uI1d2f@name)))))))))))))))))))) (set! uI2859@uId8a@core-macro-transformer uId8a@core-macro-transformer) (set! uId8c@symbol-macro (lambda (uI1d33@x uI1d34@set) (let ((uI1d37@t uI1d33@x)) (let ((uI1d39@ls/false (uId7c@syntax-dispatch uI1d37@t '(_ any)))) (if (and uI1d39@ls/false (apply (lambda (uI1d3b@name) (and (uIb75@id? uI1d3b@name) (memq (uIb77@id->sym uI1d3b@name) uI1d34@set))) uI1d39@ls/false)) (apply (lambda (uI1d3d@name) (uId32@bless (list 'quote uI1d3d@name))) uI1d39@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1d37@t)))))) (set! uI285a@uId8c@symbol-macro uId8c@symbol-macro) (set! uId8e@macro-transformer (lambda (uI1d3f@x) (if (procedure? uI1d3f@x) uI1d3f@x (if (symbol? uI1d3f@x) (let ((uI1d41@t uI1d3f@x)) (if (memv uI1d41@t '(define-record-type)) uId70@define-record-type-macro (if (memv uI1d41@t '(define-struct)) uId6e@define-struct-macro (if (memv uI1d41@t '(include)) uId64@include-macro (if (memv uI1d41@t '(cond)) uId60@cond-macro (if (memv uI1d41@t '(let)) uId38@let-macro (if (memv uI1d41@t '(do)) uId58@do-macro (if (memv uI1d41@t '(or)) uId5c@or-macro (if (memv uI1d41@t '(and)) uId5e@and-macro (if (memv uI1d41@t '(let*)) uId5a@let*-macro (if (memv uI1d41@t '(let-values)) uId3a@let-values-macro (if (memv uI1d41@t '(let*-values)) uId3c@let*-values-macro (if (memv uI1d41@t '(syntax-rules)) uId68@syntax-rules-macro (if (memv uI1d41@t '(quasiquote)) uId6a@quasiquote-macro (if (memv uI1d41@t '(quasisyntax)) uId6c@quasisyntax-macro (if (memv uI1d41@t '(with-syntax)) uId34@with-syntax-macro (if (memv uI1d41@t '(when)) uId20@when-macro (if (memv uI1d41@t '(unless)) uId22@unless-macro (if (memv uI1d41@t '(case)) uId2a@case-macro (if (memv uI1d41@t '(identifier-syntax)) uId56@identifier-syntax-macro (if (memv uI1d41@t '(time)) uId4e@time-macro (if (memv uI1d41@t '(delay)) uId50@delay-macro (if (memv uI1d41@t '(assert)) uId52@assert-macro (if (memv uI1d41@t '(endianness)) uId54@endianness-macro (if (memv uI1d41@t '(guard)) uId4a@guard-macro (if (memv uI1d41@t '(define-enumeration)) uId4c@define-enumeration-macro (if (memv uI1d41@t '(trace-lambda)) uId3e@trace-lambda-macro (if (memv uI1d41@t '(trace-define)) uId40@trace-define-macro (if (memv uI1d41@t '(trace-define-syntax)) uId42@trace-define-syntax-macro (if (memv uI1d41@t '(trace-let-syntax)) uId46@trace-let-syntax-macro (if (memv uI1d41@t '(trace-letrec-syntax)) uId48@trace-letrec-syntax-macro (if (memv uI1d41@t '(define-condition-type)) uId72@define-condition-type-macro (if (memv uI1d41@t '(parameterize)) uId76@parameterize-macro (if (memv uI1d41@t '(include-into)) uId66@include-into-macro (if (memv uI1d41@t '(eol-style)) (lambda (uI1d43@x) (uId8c@symbol-macro uI1d43@x '(none lf cr crlf nel crnel ls))) (if (memv uI1d41@t '(error-handling-mode)) (lambda (uI1d45@x) (uId8c@symbol-macro uI1d45@x '(ignore raise replace))) (if (memv uI1d41@t '(buffer-mode)) (lambda (uI1d47@x) (uId8c@symbol-macro uI1d47@x '(none line block))) (if (memv uI1d41@t '(file-options)) uIaf0@file-options-macro (if (memv uI1d41@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) uId74@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" uI1d3f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" uI1d3f@x))))) (set! uI285b@uId8e@macro-transformer uId8e@macro-transformer) (set! uId90@local-macro-transformer (lambda (uI1d49@x) (car uI1d49@x))) (set! uI285c@uId90@local-macro-transformer uId90@local-macro-transformer) (set! uId92@do-macro-call (lambda (uI1d4b@transformer uI1d4c@expr) (let ((uI1d4f@out (uI1d4b@transformer (uIb5f@add-mark uIb59@anti-mark uI1d4c@expr '#f)))) (begin (let uI1d53@f ((uI1d51@x uI1d4f@out)) (if (not (uIb41@stx? uI1d51@x)) (if (pair? uI1d51@x) (begin (uI1d53@f (car uI1d51@x)) (uI1d53@f (cdr uI1d51@x))) (if (vector? uI1d51@x) (vector-for-each uI1d53@f uI1d51@x) (if (symbol? uI1d51@x) (uIe5c@syntax-violation '#f '"raw symbol encountered in output of macro" uI1d4c@expr uI1d51@x) (void)))) (void))) (uIb5f@add-mark (uIb57@gen-mark) uI1d4f@out uI1d4c@expr))))) (set! uI285d@uId92@do-macro-call uId92@do-macro-call) (set! uId94@chi-macro (lambda (uI1d55@p uI1d56@e) (uId92@do-macro-call (uId8e@macro-transformer uI1d55@p) uI1d56@e))) (set! uI285e@uId94@chi-macro uId94@chi-macro) (set! uId96@chi-local-macro (lambda (uI1d59@p uI1d5a@e) (uId92@do-macro-call (uId90@local-macro-transformer uI1d59@p) uI1d5a@e))) (set! uI285f@uId96@chi-local-macro uId96@chi-local-macro) (set! uId98@chi-global-macro (lambda (uI1d5d@p uI1d5e@e) (let ((uI1d61@lib (car uI1d5d@p)) (uI1d62@loc (cdr uI1d5d@p))) (begin (uI98c@uI7db@visit-library uI1d61@lib) (let ((uI1d65@x (symbol-value uI1d62@loc))) (let ((uI1d67@transformer (if (procedure? uI1d65@x) uI1d65@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" uI1d65@x)))) (uId92@do-macro-call uI1d67@transformer uI1d5e@e))))))) (set! uI2860@uId98@chi-global-macro uId98@chi-global-macro) (set! uId9a@chi-expr* (lambda (uI1d69@e* uI1d6a@r uI1d6b@mr) (if (null? uI1d69@e*) '() (let ((uI1d6f@e (uId9e@chi-expr (car uI1d69@e*) uI1d6a@r uI1d6b@mr))) (cons uI1d6f@e (uId9a@chi-expr* (cdr uI1d69@e*) uI1d6a@r uI1d6b@mr)))))) (set! uI2861@uId9a@chi-expr* uId9a@chi-expr*) (set! uId9c@chi-application (lambda (uI1d71@e uI1d72@r uI1d73@mr) (let ((uI1d77@t uI1d71@e)) (let ((uI1d79@ls/false (uId7c@syntax-dispatch uI1d77@t '(any . each-any)))) (if uI1d79@ls/false (apply (lambda (uI1d7b@rator uI1d7c@rands) (let ((uI1d7f@rator (uId9e@chi-expr uI1d7b@rator uI1d72@r uI1d73@mr))) (cons uI1d7f@rator (uId9a@chi-expr* uI1d7c@rands uI1d72@r uI1d73@mr)))) uI1d79@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1d77@t)))))) (set! uI2862@uId9c@chi-application uId9c@chi-application) (set! uId9e@chi-expr (lambda (uI1d81@e uI1d82@r uI1d83@mr) (call-with-values (lambda () (uIb97@syntax-type uI1d81@e uI1d82@r)) (lambda (uI1d8d@uI1d88 uI1d8e@uI1d8a uI1d8f@uI1d8c) (let ((uI1d93@kwd uI1d8f@uI1d8c) (uI1d94@value uI1d8e@uI1d8a) (uI1d95@type uI1d8d@uI1d88)) (let ((uI1d99@t uI1d95@type)) (if (memv uI1d99@t '(core-macro)) (let ((uI1d9b@transformer (uId8a@core-macro-transformer uI1d94@value))) (uI1d9b@transformer uI1d81@e uI1d82@r uI1d83@mr)) (if (memv uI1d99@t '(global)) (let ((uI1d9d@lib (car uI1d94@value))) (let ((uI1d9f@loc (cdr uI1d94@value))) (begin ((uIde4@inv-collector) uI1d9d@lib) uI1d9f@loc))) (if (memv uI1d99@t '(core-prim)) (let ((uI1da1@name uI1d94@value)) (list 'primitive uI1da1@name)) (if (memv uI1d99@t '(call)) (uId9c@chi-application uI1d81@e uI1d82@r uI1d83@mr) (if (memv uI1d99@t '(lexical)) (let ((uI1da3@lex (uId06@lexical-var uI1d94@value))) uI1da3@lex) (if (memv uI1d99@t '(global-macro global-macro!)) (uId9e@chi-expr (uId98@chi-global-macro uI1d94@value uI1d81@e) uI1d82@r uI1d83@mr) (if (memv uI1d99@t '(local-macro local-macro!)) (uId9e@chi-expr (uId96@chi-local-macro uI1d94@value uI1d81@e) uI1d82@r uI1d83@mr) (if (memv uI1d99@t '(macro macro!)) (uId9e@chi-expr (uId94@chi-macro uI1d94@value uI1d81@e) uI1d82@r uI1d83@mr) (if (memv uI1d99@t '(constant)) (let ((uI1da5@datum uI1d94@value)) (list 'quote uI1da5@datum)) (if (memv uI1d99@t '(set!)) (uIda0@chi-set! uI1d81@e uI1d82@r uI1d83@mr) (if (memv uI1d99@t '(begin)) (let ((uI1da7@t uI1d81@e)) (let ((uI1da9@ls/false (uId7c@syntax-dispatch uI1da7@t '(_ any . each-any)))) (if uI1da9@ls/false (apply (lambda (uI1dab@x uI1dac@x*) (uIada@uIa34@build-sequence '#f (uId9a@chi-expr* (cons uI1dab@x uI1dac@x*) uI1d82@r uI1d83@mr))) uI1da9@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1da7@t)))) (if (memv uI1d99@t '(let-syntax letrec-syntax)) (let ((uI1daf@t uI1d81@e)) (let ((uI1db1@ls/false (uId7c@syntax-dispatch uI1daf@t '(_ #(each (any any)) any . each-any)))) (if (and uI1db1@ls/false (apply (lambda (uI1db3@xlhs* uI1db4@xrhs* uI1db5@xbody uI1db6@xbody*) (if (not (uIb7d@valid-bound-ids? uI1db3@xlhs*)) (uIe5c@syntax-violation '#f '"invalid identifiers" uI1d81@e) (void))) uI1db1@ls/false)) (apply (lambda (uI1dbb@xlhs* uI1dbc@xrhs* uI1dbd@xbody uI1dbe@xbody*) (let ((uI1dc3@xlab* (map uIb01@gen-label uI1dbb@xlhs*))) (let ((uI1dc5@xrib (uIb35@make-full-rib uI1dbb@xlhs* uI1dc3@xlab*))) (let ((uI1dc7@xb* (map (lambda (uI1dc9@x) (uIbad@make-eval-transformer (uIdd6@expand-transformer (if (eq? uI1d95@type 'let-syntax) uI1dc9@x (uIb61@add-subst uI1dc5@xrib uI1dc9@x)) uI1d83@mr))) uI1dbc@xrhs*))) (uIada@uIa34@build-sequence '#f (uId9a@chi-expr* (map (lambda (uI1dcb@x) (uIb61@add-subst uI1dc5@xrib uI1dcb@x)) (cons uI1dbd@xbody uI1dbe@xbody*)) (append (map cons uI1dc3@xlab* uI1dc7@xb*) uI1d82@r) (append (map cons uI1dc3@xlab* uI1dc7@xb*) uI1d83@mr))))))) uI1db1@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1daf@t)))) (if (memv uI1d99@t '(displaced-lexical)) (uIe5c@syntax-violation '#f '"identifier out of context" uI1d81@e) (if (memv uI1d99@t '(syntax)) (uIe5c@syntax-violation '#f '"reference to pattern variable outside a syntax form" uI1d81@e) (if (memv uI1d99@t '(define define-syntax module import library)) (uIe5c@syntax-violation '#f (string-append (let ((uI1dcd@t uI1d95@type)) (if (memv uI1dcd@t '(define)) '"a definition" (if (memv uI1dcd@t '(define-syntax)) '"a define-syntax" (if (memv uI1dcd@t '(module)) '"a module definition" (if (memv uI1dcd@t '(library)) '"a library definition" (if (memv uI1dcd@t '(import)) '"an import declaration" (if (memv uI1dcd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") uI1d81@e) (if (memv uI1d99@t '(mutable)) (uIe5c@syntax-violation '#f '"attempt to reference an unexportable variable" uI1d81@e) (uIe5c@syntax-violation '#f '"invalid expression" uI1d81@e))))))))))))))))))))))) (set! uI2863@uId9e@chi-expr uId9e@chi-expr) (set! uIda0@chi-set! (lambda (uI1dcf@e uI1dd0@r uI1dd1@mr) (let ((uI1dd5@t uI1dcf@e)) (let ((uI1dd7@ls/false (uId7c@syntax-dispatch uI1dd5@t '(_ any any)))) (if (and uI1dd7@ls/false (apply (lambda (uI1dd9@x uI1dda@v) (uIb75@id? uI1dd9@x)) uI1dd7@ls/false)) (apply (lambda (uI1ddd@x uI1dde@v) (call-with-values (lambda () (uIb97@syntax-type uI1ddd@x uI1dd0@r)) (lambda (uI1de7@uI1de2 uI1de8@uI1de4 uI1de9@uI1de6) (let ((uI1ded@kwd uI1de9@uI1de6) (uI1dee@value uI1de8@uI1de4) (uI1def@type uI1de7@uI1de2)) (let ((uI1df3@t uI1def@type)) (if (memv uI1df3@t '(lexical)) (begin (uId0a@set-lexical-mutable! uI1dee@value '#t) (list 'set! (uId06@lexical-var uI1dee@value) (uId9e@chi-expr uI1dde@v uI1dd0@r uI1dd1@mr))) (if (memv uI1df3@t '(core-prim)) (uIe5c@syntax-violation '#f '"cannot modify imported core primitive" uI1dcf@e) (if (memv uI1df3@t '(global)) (uIe5c@syntax-violation '#f '"attempt to modify imported binding" uI1dcf@e) (if (memv uI1df3@t '(global-macro!)) (uId9e@chi-expr (uId98@chi-global-macro uI1dee@value uI1dcf@e) uI1dd0@r uI1dd1@mr) (if (memv uI1df3@t '(local-macro!)) (uId9e@chi-expr (uId96@chi-local-macro uI1dee@value uI1dcf@e) uI1dd0@r uI1dd1@mr) (if (memv uI1df3@t '(mutable)) (uIe5c@syntax-violation '#f '"attempt to assign to an unexportable variable" uI1dcf@e) (uIe5c@syntax-violation '#f '"invalid syntax" uI1dcf@e)))))))))))) uI1dd7@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1dd5@t)))))) (set! uI2864@uIda0@chi-set! uIda0@chi-set!) (set! uIda2@verify-formals (lambda (uI1df5@fmls uI1df6@stx) (let ((uI1df9@t uI1df5@fmls)) (let ((uI1dfb@ls/false (uId7c@syntax-dispatch uI1df9@t 'each-any))) (if uI1dfb@ls/false (apply (lambda (uI1dfd@x*) (if (not (uIb7d@valid-bound-ids? uI1dfd@x*)) (uId36@invalid-fmls-error uI1df6@stx uI1df5@fmls) (void))) uI1dfb@ls/false) (let ((uI1dff@t uI1df9@t)) (let ((uI1e01@ls/false (uId7c@syntax-dispatch uI1dff@t '#(each+ any () any)))) (if uI1e01@ls/false (apply (lambda (uI1e03@x* uI1e04@x) (if (not (uIb7d@valid-bound-ids? (cons uI1e04@x uI1e03@x*))) (uId36@invalid-fmls-error uI1df6@stx uI1df5@fmls) (void))) uI1e01@ls/false) (let ((uI1e07@t uI1dff@t)) (let ((uI1e09@ls/false (uId7c@syntax-dispatch uI1e07@t '_))) (if uI1e09@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid syntax" uI1df6@stx)) uI1e09@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1e07@t)))))))))))) (set! uI2865@uIda2@verify-formals uIda2@verify-formals) (set! uIda4@chi-lambda-clause (lambda (uI1e0b@stx uI1e0c@fmls uI1e0d@body* uI1e0e@r uI1e0f@mr) (let ((uI1e15@t uI1e0c@fmls)) (let ((uI1e17@ls/false (uId7c@syntax-dispatch uI1e15@t 'each-any))) (if uI1e17@ls/false (apply (lambda (uI1e19@x*) (begin (uIda2@verify-formals uI1e0c@fmls uI1e0b@stx) (let ((uI1e1b@lex* (map uIafd@gen-lexical uI1e19@x*)) (uI1e1c@lab* (map uIb01@gen-label uI1e19@x*))) (values uI1e1b@lex* (uIdb4@chi-internal (uIb61@add-subst (uIb35@make-full-rib uI1e19@x* uI1e1c@lab*) uI1e0d@body*) (uId0e@add-lexicals uI1e1c@lab* uI1e1b@lex* uI1e0e@r) uI1e0f@mr))))) uI1e17@ls/false) (let ((uI1e1f@t uI1e15@t)) (let ((uI1e21@ls/false (uId7c@syntax-dispatch uI1e1f@t '#(each+ any () any)))) (if uI1e21@ls/false (apply (lambda (uI1e23@x* uI1e24@x) (begin (uIda2@verify-formals uI1e0c@fmls uI1e0b@stx) (let ((uI1e27@lex* (map uIafd@gen-lexical uI1e23@x*)) (uI1e28@lab* (map uIb01@gen-label uI1e23@x*)) (uI1e29@lex (uIafd@gen-lexical uI1e24@x)) (uI1e2a@lab (uIb01@gen-label uI1e24@x))) (values (append uI1e27@lex* uI1e29@lex) (uIdb4@chi-internal (uIb61@add-subst (uIb35@make-full-rib (cons uI1e24@x uI1e23@x*) (cons uI1e2a@lab uI1e28@lab*)) uI1e0d@body*) (uId0e@add-lexicals (cons uI1e2a@lab uI1e28@lab*) (cons uI1e29@lex uI1e27@lex*) uI1e0e@r) uI1e0f@mr))))) uI1e21@ls/false) (let ((uI1e2f@t uI1e1f@t)) (let ((uI1e31@ls/false (uId7c@syntax-dispatch uI1e2f@t '_))) (if uI1e31@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid syntax" uI1e0c@fmls)) uI1e31@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1e2f@t)))))))))))) (set! uI2866@uIda4@chi-lambda-clause uIda4@chi-lambda-clause) (set! uIda6@chi-lambda-clause* (lambda (uI1e33@stx uI1e34@fmls* uI1e35@body** uI1e36@r uI1e37@mr) (if (null? uI1e34@fmls*) (values '() '()) (call-with-values (lambda () (uIda4@chi-lambda-clause uI1e33@stx (car uI1e34@fmls*) (car uI1e35@body**) uI1e36@r uI1e37@mr)) (lambda (uI1e41@uI1e3e uI1e42@uI1e40) (let ((uI1e45@b uI1e42@uI1e40) (uI1e46@a uI1e41@uI1e3e)) (call-with-values (lambda () (uIda6@chi-lambda-clause* uI1e33@stx (cdr uI1e34@fmls*) (cdr uI1e35@body**) uI1e36@r uI1e37@mr)) (lambda (uI1e4d@uI1e4a uI1e4e@uI1e4c) (let ((uI1e51@b* uI1e4e@uI1e4c) (uI1e52@a* uI1e4d@uI1e4a)) (values (cons uI1e46@a uI1e52@a*) (cons uI1e45@b uI1e51@b*))))))))))) (set! uI2867@uIda6@chi-lambda-clause* uIda6@chi-lambda-clause*) (set! uIda8@chi-defun (lambda (uI1e55@x uI1e56@r uI1e57@mr) (let ((uI1e5b@fmls (car uI1e55@x)) (uI1e5c@body* (cdr uI1e55@x))) (call-with-values (lambda () (uIda4@chi-lambda-clause uI1e5b@fmls uI1e5b@fmls uI1e5c@body* uI1e56@r uI1e57@mr)) (lambda (uI1e63@uI1e60 uI1e64@uI1e62) (let ((uI1e67@body uI1e64@uI1e62) (uI1e68@fmls uI1e63@uI1e60)) (uIad8@uIa04@build-lambda '#f uI1e68@fmls uI1e67@body))))))) (set! uI2868@uIda8@chi-defun uIda8@chi-defun) (set! uIdaa@chi-rhs (lambda (uI1e6b@rhs uI1e6c@r uI1e6d@mr) (let ((uI1e71@t (car uI1e6b@rhs))) (if (memv uI1e71@t '(defun)) (uIda8@chi-defun (cdr uI1e6b@rhs) uI1e6c@r uI1e6d@mr) (if (memv uI1e71@t '(expr)) (let ((uI1e73@expr (cdr uI1e6b@rhs))) (uId9e@chi-expr uI1e73@expr uI1e6c@r uI1e6d@mr)) (if (memv uI1e71@t '(top-expr)) (let ((uI1e75@expr (cdr uI1e6b@rhs))) (uIada@uIa34@build-sequence '#f (list (uId9e@chi-expr uI1e75@expr uI1e6c@r uI1e6d@mr) (uIadb@uIa36@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" uI1e6b@rhs))))))) (set! uI2869@uIdaa@chi-rhs uIdaa@chi-rhs) (set! uIdac@expand-interaction-rhs*/init* (lambda (uI1e77@lhs* uI1e78@rhs* uI1e79@init* uI1e7a@r uI1e7b@mr) (let uI1e85@f ((uI1e81@lhs* uI1e77@lhs*) (uI1e82@rhs* uI1e78@rhs*)) (if (null? uI1e81@lhs*) (map (lambda (uI1e87@x) (uId9e@chi-expr uI1e87@x uI1e7a@r uI1e7b@mr)) uI1e79@init*) (let ((uI1e89@lhs (car uI1e81@lhs*)) (uI1e8a@rhs (car uI1e82@rhs*))) (let ((uI1e8d@t (car uI1e8a@rhs))) (if (memv uI1e8d@t '(defun)) (let ((uI1e8f@rhs (uIda8@chi-defun (cdr uI1e8a@rhs) uI1e7a@r uI1e7b@mr))) (cons (list 'set! uI1e89@lhs uI1e8f@rhs) (uI1e85@f (cdr uI1e81@lhs*) (cdr uI1e82@rhs*)))) (if (memv uI1e8d@t '(expr)) (let ((uI1e91@rhs (uId9e@chi-expr (cdr uI1e8a@rhs) uI1e7a@r uI1e7b@mr))) (cons (list 'set! uI1e89@lhs uI1e91@rhs) (uI1e85@f (cdr uI1e81@lhs*) (cdr uI1e82@rhs*)))) (if (memv uI1e8d@t '(top-expr)) (let ((uI1e93@e (uId9e@chi-expr (cdr uI1e8a@rhs) uI1e7a@r uI1e7b@mr))) (cons uI1e93@e (uI1e85@f (cdr uI1e81@lhs*) (cdr uI1e82@rhs*)))) (error 'expand-interaction '"invallid" uI1e8a@rhs)))))))))) (set! uI286a@uIdac@expand-interaction-rhs*/init* uIdac@expand-interaction-rhs*/init*) (set! uIdae@chi-rhs* (lambda (uI1e95@rhs* uI1e96@r uI1e97@mr) (let uI1e9d@f ((uI1e9b@ls uI1e95@rhs*)) (if (null? uI1e9b@ls) '() (let ((uI1e9f@a (uIdaa@chi-rhs (car uI1e9b@ls) uI1e96@r uI1e97@mr))) (cons uI1e9f@a (uI1e9d@f (cdr uI1e9b@ls)))))))) (set! uI286b@uIdae@chi-rhs* uIdae@chi-rhs*) (set! uIdb0@find-bound=? (lambda (uI1ea1@x uI1ea2@lhs* uI1ea3@rhs*) (if (null? uI1ea2@lhs*) '#f (if (uIb79@bound-id=? uI1ea1@x (car uI1ea2@lhs*)) (car uI1ea3@rhs*) (uIdb0@find-bound=? uI1ea1@x (cdr uI1ea2@lhs*) (cdr uI1ea3@rhs*)))))) (set! uI286c@uIdb0@find-bound=? uIdb0@find-bound=?) (set! uIdb2@find-dups (lambda (uI1ea7@ls) (let uI1ead@f ((uI1ea9@ls uI1ea7@ls) (uI1eaa@dups '())) (if (null? uI1ea9@ls) uI1eaa@dups (let ((uI1eaf@t (uIdb0@find-bound=? (car uI1ea9@ls) (cdr uI1ea9@ls) (cdr uI1ea9@ls)))) (if uI1eaf@t ((lambda (uI1eb1@x) (uI1ead@f (cdr uI1ea9@ls) (cons (list (car uI1ea9@ls) uI1eb1@x) uI1eaa@dups))) uI1eaf@t) (uI1ead@f (cdr uI1ea9@ls) uI1eaa@dups))))))) (set! uI286d@uIdb2@find-dups uIdb2@find-dups) (set! uIdb4@chi-internal (lambda (uI1eb3@e* uI1eb4@r uI1eb5@mr) (let ((uI1eb9@rib (uIb29@make-empty-rib))) (call-with-values (lambda () (uIdd4@chi-body* (map (lambda (uI1ecb@x) (uIb61@add-subst uI1eb9@rib uI1ecb@x)) (uIb73@syntax->list uI1eb3@e*)) uI1eb4@r uI1eb5@mr '() '() '() '() '() uI1eb9@rib '#f)) (lambda (uI1ecd@uI1ebc uI1ece@uI1ebe uI1ecf@uI1ec0 uI1ed0@uI1ec2 uI1ed1@uI1ec4 uI1ed2@uI1ec6 uI1ed3@uI1ec8 uI1ed4@uI1eca) (let ((uI1edd@_exp* uI1ed4@uI1eca) (uI1ede@kwd* uI1ed3@uI1ec8) (uI1edf@mod** uI1ed2@uI1ec6) (uI1ee0@rhs* uI1ed1@uI1ec4) (uI1ee1@lex* uI1ed0@uI1ec2) (uI1ee2@mr uI1ecf@uI1ec0) (uI1ee3@r uI1ece@uI1ebe) (uI1ee4@e* uI1ecd@uI1ebc)) (begin (if (null? uI1ee4@e*) (uIe5c@syntax-violation '#f '"no expression in body" uI1ee4@e*) (void)) (let ((uI1eed@init* (uId9a@chi-expr* (append (apply append (reverse uI1edf@mod**)) uI1ee4@e*) uI1ee3@r uI1ee2@mr))) (let ((uI1eef@rhs* (uIdae@chi-rhs* uI1ee0@rhs* uI1ee3@r uI1ee2@mr))) (uIadf@uIa3e@build-letrec* '#f (reverse uI1ee1@lex*) (reverse uI1eef@rhs*) (uIada@uIa34@build-sequence '#f uI1eed@init*))))))))))) (set! uI286e@uIdb4@chi-internal uIdb4@chi-internal) (set! uIdb6@parse-module (lambda (uI1ef1@e) (let ((uI1ef3@t uI1ef1@e)) (let ((uI1ef5@ls/false (uId7c@syntax-dispatch uI1ef3@t '(_ each-any . each-any)))) (if uI1ef5@ls/false (apply (lambda (uI1ef7@export* uI1ef8@b*) (begin (if (not (for-all uIb75@id? uI1ef7@export*)) (uIe5c@syntax-violation '#f '"module exports must be identifiers" uI1ef1@e) (void)) (values '#f (list->vector uI1ef7@export*) uI1ef8@b*))) uI1ef5@ls/false) (let ((uI1efb@t uI1ef3@t)) (let ((uI1efd@ls/false (uId7c@syntax-dispatch uI1efb@t '(_ any each-any . each-any)))) (if uI1efd@ls/false (apply (lambda (uI1eff@name uI1f00@export* uI1f01@b*) (begin (if (not (uIb75@id? uI1eff@name)) (uIe5c@syntax-violation '#f '"module name must be an identifier" uI1ef1@e) (void)) (if (not (for-all uIb75@id? uI1f00@export*)) (uIe5c@syntax-violation '#f '"module exports must be identifiers" uI1ef1@e) (void)) (values uI1eff@name (list->vector uI1f00@export*) uI1f01@b*))) uI1efd@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1efb@t))))))))) (set! uI286f@uIdb6@parse-module uIdb6@parse-module) (set! uIdc0@module-interface? (lambda (uI1f05@x) (and (simple-struct? uI1f05@x) (eq? (simple-struct-name uI1f05@x) 'module-interface)))) (set! uI2870@uIdc0@module-interface? uIdc0@module-interface?) (set! uIdc2@module-interface-first-mark (lambda (uI1f07@x) (simple-struct-ref uI1f07@x '0))) (set! uI2871@uIdc2@module-interface-first-mark uIdc2@module-interface-first-mark) (set! uIdc4@set-module-interface-first-mark! (lambda (uI1f09@x uI1f0a@val) (simple-struct-set! uI1f09@x '0 uI1f0a@val))) (set! uI2872@uIdc4@set-module-interface-first-mark! uIdc4@set-module-interface-first-mark!) (set! uIdc6@module-interface-exp-id-vec (lambda (uI1f0d@x) (simple-struct-ref uI1f0d@x '1))) (set! uI2873@uIdc6@module-interface-exp-id-vec uIdc6@module-interface-exp-id-vec) (set! uIdc8@set-module-interface-exp-id-vec! (lambda (uI1f0f@x uI1f10@val) (simple-struct-set! uI1f0f@x '1 uI1f10@val))) (set! uI2874@uIdc8@set-module-interface-exp-id-vec! uIdc8@set-module-interface-exp-id-vec!) (set! uIdca@module-interface-exp-lab-vec (lambda (uI1f13@x) (simple-struct-ref uI1f13@x '2))) (set! uI2875@uIdca@module-interface-exp-lab-vec uIdca@module-interface-exp-lab-vec) (set! uIdcc@set-module-interface-exp-lab-vec! (lambda (uI1f15@x uI1f16@val) (simple-struct-set! uI1f15@x '2 uI1f16@val))) (set! uI2876@uIdcc@set-module-interface-exp-lab-vec! uIdcc@set-module-interface-exp-lab-vec!) (set! uIdce@dummy '3) (set! uI2877@uIdce@dummy uIdce@dummy) (set! uIdd0@module-interface-exp-id* (lambda (uI1f19@iface uI1f1a@id) (let ((uI1f1e@diff-marks '#f)) (begin (set! uI1f1e@diff-marks (lambda (uI1f25@ls uI1f26@x) (begin (if (null? uI1f25@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((uI1f29@a (car uI1f25@ls))) (if (eq? uI1f29@a uI1f26@x) '() (cons uI1f29@a (uI1f1e@diff-marks (cdr uI1f25@ls) uI1f26@x))))))) (let ((uI1f1f@diff (uI1f1e@diff-marks (uIb47@stx-mark* uI1f1a@id) (uIdc2@module-interface-first-mark uI1f19@iface))) (uI1f20@id-vec (uIdc6@module-interface-exp-id-vec uI1f19@iface))) (if (null? uI1f1f@diff) uI1f20@id-vec (vector-map (lambda (uI1f23@x) (make-simple-struct 'stx '5 (list (uIb43@stx-expr uI1f23@x) (append uI1f1f@diff (uIb47@stx-mark* uI1f23@x)) '() '()))) uI1f20@id-vec))))))) (set! uI2878@uIdd0@module-interface-exp-id* uIdd0@module-interface-exp-id*) (set! uIdd2@chi-internal-module (lambda (uI1f2b@e uI1f2c@r uI1f2d@mr uI1f2e@lex* uI1f2f@rhs* uI1f30@mod** uI1f31@kwd*) (call-with-values (lambda () (uIdb6@parse-module uI1f2b@e)) (lambda (uI1f3f@uI1f3a uI1f40@uI1f3c uI1f41@uI1f3e) (let ((uI1f45@e* uI1f41@uI1f3e) (uI1f46@exp-id* uI1f40@uI1f3c) (uI1f47@name uI1f3f@uI1f3a)) (let ((uI1f4b@rib (uIb29@make-empty-rib))) (let ((uI1f4d@e* (map (lambda (uI1f4f@x) (uIb61@add-subst uI1f4b@rib uI1f4f@x)) (uIb73@syntax->list uI1f45@e*)))) (call-with-values (lambda () (uIdd4@chi-body* uI1f4d@e* uI1f2c@r uI1f2d@mr uI1f2e@lex* uI1f2f@rhs* uI1f30@mod** uI1f31@kwd* '() uI1f4b@rib '#f)) (lambda (uI1f61@uI1f52 uI1f62@uI1f54 uI1f63@uI1f56 uI1f64@uI1f58 uI1f65@uI1f5a uI1f66@uI1f5c uI1f67@uI1f5e uI1f68@uI1f60) (let ((uI1f71@_exp* uI1f68@uI1f60) (uI1f72@kwd* uI1f67@uI1f5e) (uI1f73@mod** uI1f66@uI1f5c) (uI1f74@rhs* uI1f65@uI1f5a) (uI1f75@lex* uI1f64@uI1f58) (uI1f76@mr uI1f63@uI1f56) (uI1f77@r uI1f62@uI1f54) (uI1f78@e* uI1f61@uI1f52)) (let ((uI1f81@exp-lab* (vector-map (lambda (uI1f85@x) (or (uIb8b@id->label (make-simple-struct 'stx '5 (list (uIb77@id->sym uI1f85@x) (uIb47@stx-mark* uI1f85@x) (list uI1f4b@rib) '()))) (uIe5c@syntax-violation '#f '"cannot find module export" uI1f85@x))) uI1f46@exp-id*)) (uI1f82@mod** (cons uI1f78@e* uI1f73@mod**))) (if (not uI1f47@name) (values uI1f75@lex* uI1f74@rhs* uI1f46@exp-id* uI1f81@exp-lab* uI1f77@r uI1f76@mr uI1f82@mod** uI1f72@kwd*) (let ((uI1f87@lab (uIb01@gen-label 'module)) (uI1f88@iface (make-simple-struct 'module-interface '4 (list (car (uIb47@stx-mark* uI1f47@name)) (vector-map (lambda (uI1f8b@x) (make-simple-struct 'stx '5 (list (uIb43@stx-expr uI1f8b@x) (uIb47@stx-mark* uI1f8b@x) '() '()))) uI1f46@exp-id*) uI1f81@exp-lab*)))) (values uI1f75@lex* uI1f74@rhs* (vector uI1f47@name) (vector uI1f87@lab) (cons (cons uI1f87@lab (cons '$module uI1f88@iface)) uI1f77@r) (cons (cons uI1f87@lab (cons '$module uI1f88@iface)) uI1f76@mr) uI1f82@mod** uI1f72@kwd*)))))))))))))) (set! uI2879@uIdd2@chi-internal-module uIdd2@chi-internal-module) (set! uIdd4@chi-body* (lambda (uI1f8d@e* uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1f93@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?) (if (null? uI1f8d@e*) (values uI1f8d@e* uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1f93@kwd* uI1f94@exp*) (let ((uI1fa1@e (car uI1f8d@e*))) (call-with-values (lambda () (uIb97@syntax-type uI1fa1@e uI1f8e@r)) (lambda (uI1fa9@uI1fa4 uI1faa@uI1fa6 uI1fab@uI1fa8) (let ((uI1faf@kwd uI1fab@uI1fa8) (uI1fb0@value uI1faa@uI1fa6) (uI1fb1@type uI1fa9@uI1fa4)) (let ((uI1fb5@kwd* (if (uIb75@id? uI1faf@kwd) (cons uI1faf@kwd uI1f93@kwd*) uI1f93@kwd*))) (let ((uI1fb7@t uI1fb1@type)) (if (memv uI1fb7@t '(define)) (call-with-values (lambda () (uIcfe@parse-define uI1fa1@e)) (lambda (uI1fbd@uI1fba uI1fbe@uI1fbc) (let ((uI1fc1@rhs uI1fbe@uI1fbc) (uI1fc2@id uI1fbd@uI1fba)) (begin (if (uIb81@bound-id-member? uI1fc2@id uI1fb5@kwd*) (uIe5c@syntax-violation '#f '"cannot redefine keyword" uI1fa1@e) (void)) (call-with-values (lambda () (uIb05@gen-define-label+loc uI1fc2@id uI1f95@rib)) (lambda (uI1fc9@uI1fc6 uI1fca@uI1fc8) (let ((uI1fcd@lex uI1fca@uI1fc8) (uI1fce@lab uI1fc9@uI1fc6)) (begin (uIb2b@extend-rib! uI1f95@rib uI1fc2@id uI1fce@lab) (uIdd4@chi-body* (cdr uI1f8d@e*) (uId0c@add-lexical uI1fce@lab uI1fcd@lex uI1f8e@r) uI1f8f@mr (cons uI1fcd@lex uI1f90@lex*) (cons uI1fc1@rhs uI1f91@rhs*) uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?))))))))) (if (memv uI1fb7@t '(define-syntax)) (call-with-values (lambda () (uId00@parse-define-syntax uI1fa1@e)) (lambda (uI1fd5@uI1fd2 uI1fd6@uI1fd4) (let ((uI1fd9@rhs uI1fd6@uI1fd4) (uI1fda@id uI1fd5@uI1fd2)) (begin (if (uIb81@bound-id-member? uI1fda@id uI1fb5@kwd*) (uIe5c@syntax-violation '#f '"cannot redefine keyword" uI1fa1@e) (void)) (let ((uI1fdd@lab (uIb07@gen-define-label uI1fda@id uI1f95@rib)) (uI1fde@expanded-rhs (uIdd6@expand-transformer uI1fd9@rhs uI1f8f@mr))) (begin (uIb2b@extend-rib! uI1f95@rib uI1fda@id uI1fdd@lab) (let ((uI1fe1@b (uIbad@make-eval-transformer uI1fde@expanded-rhs))) (uIdd4@chi-body* (cdr uI1f8d@e*) (cons (cons uI1fdd@lab uI1fe1@b) uI1f8e@r) (cons (cons uI1fdd@lab uI1fe1@b) uI1f8f@mr) uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?)))))))) (if (memv uI1fb7@t '(let-syntax letrec-syntax)) (let ((uI1fe3@t uI1fa1@e)) (let ((uI1fe5@ls/false (uId7c@syntax-dispatch uI1fe3@t '(_ #(each (any any)) . each-any)))) (if (and uI1fe5@ls/false (apply (lambda (uI1fe7@xlhs* uI1fe8@xrhs* uI1fe9@xbody*) (if (not (uIb7d@valid-bound-ids? uI1fe7@xlhs*)) (uIe5c@syntax-violation '#f '"invalid identifiers" uI1fa1@e) (void))) uI1fe5@ls/false)) (apply (lambda (uI1fed@xlhs* uI1fee@xrhs* uI1fef@xbody*) (let ((uI1ff3@xlab* (map uIb01@gen-label uI1fed@xlhs*))) (let ((uI1ff5@xrib (uIb35@make-full-rib uI1fed@xlhs* uI1ff3@xlab*))) (let ((uI1ff7@xb* (map (lambda (uI1ff9@x) (uIbad@make-eval-transformer (uIdd6@expand-transformer (if (eq? uI1fb1@type 'let-syntax) uI1ff9@x (uIb61@add-subst uI1ff5@xrib uI1ff9@x)) uI1f8f@mr))) uI1fee@xrhs*))) (uIdd4@chi-body* (append (map (lambda (uI1ffb@x) (uIb61@add-subst uI1ff5@xrib uI1ffb@x)) uI1fef@xbody*) (cdr uI1f8d@e*)) (append (map cons uI1ff3@xlab* uI1ff7@xb*) uI1f8e@r) (append (map cons uI1ff3@xlab* uI1ff7@xb*) uI1f8f@mr) uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?))))) uI1fe5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1fe3@t)))) (if (memv uI1fb7@t '(begin)) (let ((uI1ffd@t uI1fa1@e)) (let ((uI1fff@ls/false (uId7c@syntax-dispatch uI1ffd@t '(_ . each-any)))) (if uI1fff@ls/false (apply (lambda (uI2001@x*) (uIdd4@chi-body* (append uI2001@x* (cdr uI1f8d@e*)) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?)) uI1fff@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI1ffd@t)))) (if (memv uI1fb7@t '(global-macro global-macro!)) (uIdd4@chi-body* (cons (uIb61@add-subst uI1f95@rib (uId98@chi-global-macro uI1fb0@value uI1fa1@e)) (cdr uI1f8d@e*)) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?) (if (memv uI1fb7@t '(local-macro local-macro!)) (uIdd4@chi-body* (cons (uIb61@add-subst uI1f95@rib (uId96@chi-local-macro uI1fb0@value uI1fa1@e)) (cdr uI1f8d@e*)) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?) (if (memv uI1fb7@t '(macro macro!)) (uIdd4@chi-body* (cons (uIb61@add-subst uI1f95@rib (uId94@chi-macro uI1fb0@value uI1fa1@e)) (cdr uI1f8d@e*)) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?) (if (memv uI1fb7@t '(module)) (call-with-values (lambda () (uIdd2@chi-internal-module uI1fa1@e uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd*)) (lambda (uI2013@uI2004 uI2014@uI2006 uI2015@uI2008 uI2016@uI200a uI2017@uI200c uI2018@uI200e uI2019@uI2010 uI201a@uI2012) (let ((uI2023@kwd* uI201a@uI2012) (uI2024@mod** uI2019@uI2010) (uI2025@mr uI2018@uI200e) (uI2026@r uI2017@uI200c) (uI2027@m-exp-lab* uI2016@uI200a) (uI2028@m-exp-id* uI2015@uI2008) (uI2029@rhs* uI2014@uI2006) (uI202a@lex* uI2013@uI2004)) (begin (vector-for-each (lambda (uI2033@id uI2034@lab) (uIb2b@extend-rib! uI1f95@rib uI2033@id uI2034@lab)) uI2028@m-exp-id* uI2027@m-exp-lab*) (uIdd4@chi-body* (cdr uI1f8d@e*) uI2026@r uI2025@mr uI202a@lex* uI2029@rhs* uI2024@mod** uI2023@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?))))) (if (memv uI1fb7@t '(library)) (begin (uIe3e@library-expander (uIb89@stx->datum uI1fa1@e)) (uIdd4@chi-body* (cdr uI1f8d@e*) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?)) (if (memv uI1fb7@t '(export)) (let ((uI2037@t uI1fa1@e)) (let ((uI2039@ls/false (uId7c@syntax-dispatch uI2037@t '(_ . each-any)))) (if uI2039@ls/false (apply (lambda (uI203b@exp-decl*) (uIdd4@chi-body* (cdr uI1f8d@e*) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* (append uI203b@exp-decl* uI1f94@exp*) uI1f95@rib uI1f96@top?)) uI2039@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2037@t)))) (if (memv uI1fb7@t '(import)) (let ((uI203e@module-import? '#f) (uI2040@module-import '#f) (uI2042@library-import '#f)) (begin (set! uI203e@module-import? (lambda (uI2091@e) (let ((uI2093@t uI2091@e)) (let ((uI2095@ls/false (uId7c@syntax-dispatch uI2093@t '(_ any)))) (if (and uI2095@ls/false (apply (lambda (uI2097@id) (uIb75@id? uI2097@id)) uI2095@ls/false)) (apply (lambda (uI2099@id) '#t) uI2095@ls/false) (let ((uI209b@t uI2093@t)) (let ((uI209d@ls/false (uId7c@syntax-dispatch uI209b@t '(_ . each-any)))) (if uI209d@ls/false (apply (lambda (uI209f@imp*) '#f) uI209d@ls/false) (let ((uI20a1@t uI209b@t)) (let ((uI20a3@ls/false (uId7c@syntax-dispatch uI20a1@t '_))) (if uI20a3@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"malformed import form" uI2091@e)) uI20a3@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI20a1@t)))))))))))) (set! uI2040@module-import (lambda (uI206f@e uI2070@r) (let ((uI2073@t uI206f@e)) (let ((uI2075@ls/false (uId7c@syntax-dispatch uI2073@t '(_ any)))) (if (and uI2075@ls/false (apply (lambda (uI2077@id) (uIb75@id? uI2077@id)) uI2075@ls/false)) (apply (lambda (uI2079@id) (call-with-values (lambda () (uIb97@syntax-type uI2079@id uI2070@r)) (lambda (uI2081@uI207c uI2082@uI207e uI2083@uI2080) (let ((uI2087@kwd uI2083@uI2080) (uI2088@value uI2082@uI207e) (uI2089@type uI2081@uI207c)) (let ((uI208d@t uI2089@type)) (if (memv uI208d@t '($module)) (let ((uI208f@iface uI2088@value)) (values (uIdd0@module-interface-exp-id* uI208f@iface uI2079@id) (uIdca@module-interface-exp-lab-vec uI208f@iface))) (uIe5c@syntax-violation '#f '"invalid import" uI206f@e))))))) uI2075@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2073@t)))))) (set! uI2042@library-import (lambda (uI2053@e) (let ((uI2055@t uI2053@e)) (let ((uI2057@ls/false (uId7c@syntax-dispatch uI2055@t '(any . each-any)))) (if uI2057@ls/false (apply (lambda (uI2059@ctxt uI205a@imp*) (call-with-values (lambda () (uIdde@parse-import-spec* (uIe62@syntax->datum uI205a@imp*))) (lambda (uI2061@uI205e uI2062@uI2060) (let ((uI2065@subst-labels uI2062@uI2060) (uI2066@subst-names uI2061@uI205e)) (values (vector-map (lambda (uI2069@name) (uIb55@datum->stx uI2059@ctxt uI2069@name)) uI2066@subst-names) uI2065@subst-labels))))) uI2057@ls/false) (let ((uI206b@t uI2055@t)) (let ((uI206d@ls/false (uId7c@syntax-dispatch uI206b@t '_))) (if uI206d@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid import form" uI2053@e)) uI206d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI206b@t))))))))) (begin (call-with-values (lambda () (if (uI203e@module-import? uI1fa1@e) (uI2040@module-import uI1fa1@e uI1f8e@r) (uI2042@library-import uI1fa1@e))) (lambda (uI2047@uI2044 uI2048@uI2046) (let ((uI204b@lab* uI2048@uI2046) (uI204c@id* uI2047@uI2044)) (vector-for-each (lambda (uI204f@id uI2050@lab) (uIb2b@extend-rib! uI1f95@rib uI204f@id uI2050@lab)) uI204c@id* uI204b@lab*)))) (uIdd4@chi-body* (cdr uI1f8d@e*) uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?)))) (if uI1f96@top? (uIdd4@chi-body* (cdr uI1f8d@e*) uI1f8e@r uI1f8f@mr (cons (uIafd@gen-lexical 'dummy) uI1f90@lex*) (cons (cons 'top-expr uI1fa1@e) uI1f91@rhs*) uI1f92@mod** uI1fb5@kwd* uI1f94@exp* uI1f95@rib uI1f96@top?) (values uI1f8d@e* uI1f8e@r uI1f8f@mr uI1f90@lex* uI1f91@rhs* uI1f92@mod** uI1fb5@kwd* uI1f94@exp*)))))))))))))))))))))) (set! uI287a@uIdd4@chi-body* uIdd4@chi-body*) (set! uIdd6@expand-transformer (lambda (uI20a5@expr uI20a6@r) (let ((uI20a9@rtc (uIde2@make-collector))) (let ((uI20ab@expanded-rhs (let ((uI20b5@uI20ae uIde4@inv-collector) (uI20b6@uI20b0 uIde6@vis-collector) (uI20b7@uI20b2 uI20a9@rtc) (uI20b8@uI20b4 (lambda (uI20bd@x) (values)))) (let ((uI20bf@swap (lambda () (begin (let ((uI20c1@t (uI20b5@uI20ae))) (begin (uI20b5@uI20ae uI20b7@uI20b2) (set! uI20b7@uI20b2 uI20c1@t))) (let ((uI20c3@t (uI20b6@uI20b0))) (begin (uI20b6@uI20b0 uI20b8@uI20b4) (set! uI20b8@uI20b4 uI20c3@t))))))) (dynamic-wind uI20bf@swap (lambda () (uId9e@chi-expr uI20a5@expr uI20a6@r uI20a6@r)) uI20bf@swap))))) (begin (for-each (let ((uI20c5@mark-visit (uIde6@vis-collector))) (lambda (uI20c7@x) (begin (uI98b@uI7d9@invoke-library uI20c7@x) (uI20c5@mark-visit uI20c7@x)))) (uI20a9@rtc)) uI20ab@expanded-rhs))))) (set! uI287b@uIdd6@expand-transformer uIdd6@expand-transformer) (set! uIdd8@parse-exports (lambda (uI20c9@exp*) (let uI20d1@f ((uI20cb@exp* uI20c9@exp*) (uI20cc@int* '()) (uI20cd@ext* '())) (if (null? uI20cb@exp*) (begin (if (not (uIb7d@valid-bound-ids? uI20cd@ext*)) (uIe5c@syntax-violation 'export '"invalid exports" (uIdb2@find-dups uI20cd@ext*)) (void)) (values (map uIe62@syntax->datum uI20cd@ext*) uI20cc@int*)) (let ((uI20d3@t (car uI20cb@exp*))) (let ((uI20d5@ls/false (uId7c@syntax-dispatch uI20d3@t '(any . #(each (any any)))))) (if uI20d5@ls/false (apply (lambda (uI20d7@rename uI20d8@i* uI20d9@e*) (begin (if (not (and (eq? (uIe62@syntax->datum uI20d7@rename) 'rename) (for-all uIb75@id? uI20d8@i*) (for-all uIb75@id? uI20d9@e*))) (uIe5c@syntax-violation 'export '"invalid export specifier" (car uI20cb@exp*)) (void)) (uI20d1@f (cdr uI20cb@exp*) (append uI20d8@i* uI20cc@int*) (append uI20d9@e* uI20cd@ext*)))) uI20d5@ls/false) (let ((uI20dd@t uI20d3@t)) (let ((uI20df@ls/false (uId7c@syntax-dispatch uI20dd@t 'any))) (if uI20df@ls/false (apply (lambda (uI20e1@ie) (begin (if (not (uIb75@id? uI20e1@ie)) (uIe5c@syntax-violation 'export '"invalid export" uI20e1@ie) (void)) (uI20d1@f (cdr uI20cb@exp*) (cons uI20e1@ie uI20cc@int*) (cons uI20e1@ie uI20cd@ext*)))) uI20df@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI20dd@t))))))))))) (set! uI287c@uIdd8@parse-exports uIdd8@parse-exports) (set! uIdda@parse-library-name (lambda (uI20e3@spec) (let ((uI20e6@parse '#f)) (begin (set! uI20e6@parse (lambda (uI20f3@x) (let ((uI20f5@t uI20f3@x)) (let ((uI20f7@ls/false (uId7c@syntax-dispatch uI20f5@t '(each-any)))) (if (and uI20f7@ls/false (apply (lambda (uI20f9@v*) (for-all (lambda (uI20fb@x) (let ((uI20fd@x (uIe62@syntax->datum uI20fb@x))) (and (integer? uI20fd@x) (exact? uI20fd@x)))) uI20f9@v*)) uI20f7@ls/false)) (apply (lambda (uI20ff@v*) (values '() (map uIe62@syntax->datum uI20ff@v*))) uI20f7@ls/false) (let ((uI2101@t uI20f5@t)) (let ((uI2103@ls/false (uId7c@syntax-dispatch uI2101@t '(any . any)))) (if (and uI2103@ls/false (apply (lambda (uI2105@x uI2106@rest) (symbol? (uIe62@syntax->datum uI2105@x))) uI2103@ls/false)) (apply (lambda (uI2109@x uI210a@rest) (call-with-values (lambda () (uI20e6@parse uI210a@rest)) (lambda (uI2111@uI210e uI2112@uI2110) (let ((uI2115@v* uI2112@uI2110) (uI2116@x* uI2111@uI210e)) (values (cons (uIe62@syntax->datum uI2109@x) uI2116@x*) uI2115@v*))))) uI2103@ls/false) (let ((uI2119@t uI2101@t)) (let ((uI211b@ls/false (uId7c@syntax-dispatch uI2119@t '()))) (if uI211b@ls/false (apply (lambda () (values '() '())) uI211b@ls/false) (let ((uI211d@t uI2119@t)) (let ((uI211f@ls/false (uId7c@syntax-dispatch uI211d@t '_))) (if uI211f@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid library name" uI20e3@spec)) uI211f@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI211d@t))))))))))))))) (call-with-values (lambda () (uI20e6@parse uI20e3@spec)) (lambda (uI20eb@uI20e8 uI20ec@uI20ea) (let ((uI20ef@ver* uI20ec@uI20ea) (uI20f0@name* uI20eb@uI20e8)) (begin (if (null? uI20f0@name*) (uIe5c@syntax-violation '#f '"empty library name" uI20e3@spec) (void)) (values uI20f0@name* uI20ef@ver*))))))))) (set! uI287d@uIdda@parse-library-name uIdda@parse-library-name) (set! uIddc@parse-library (lambda (uI2121@e) (let ((uI2123@t uI2121@e)) (let ((uI2125@ls/false (uId7c@syntax-dispatch uI2123@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and uI2125@ls/false (apply (lambda (uI2127@library uI2128@name* uI2129@export uI212a@exp* uI212b@import uI212c@imp* uI212d@b*) (and (eq? (uIe62@syntax->datum uI2129@export) 'export) (eq? (uIe62@syntax->datum uI212b@import) 'import) (eq? (uIe62@syntax->datum uI2127@library) 'library))) uI2125@ls/false)) (apply (lambda (uI2135@library uI2136@name* uI2137@export uI2138@exp* uI2139@import uI213a@imp* uI213b@b*) (values uI2136@name* uI2138@exp* uI213a@imp* uI213b@b*)) uI2125@ls/false) (let ((uI2143@t uI2123@t)) (let ((uI2145@ls/false (uId7c@syntax-dispatch uI2143@t '_))) (if uI2145@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"malformed library" uI2121@e)) uI2145@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2143@t))))))))) (set! uI287e@uIddc@parse-library uIddc@parse-library) (set! uIdde@parse-import-spec* (let ((uI2148@idsyn? '#f) (uI214a@dup-error '#f) (uI214c@merge-substs '#f) (uI214e@exclude* '#f) (uI2150@find* '#f) (uI2152@rem* '#f) (uI2154@remove-dups '#f) (uI2156@parse-library-name '#f) (uI2158@import-library '#f) (uI215a@get-import '#f) (uI215c@add-imports! '#f)) (begin (set! uI2148@idsyn? (lambda (uI2351@x) (symbol? (uIe62@syntax->datum uI2351@x)))) (set! uI214a@dup-error (lambda (uI234f@name) (uIe5c@syntax-violation 'import '"two imports with different bindings" uI234f@name))) (set! uI214c@merge-substs (lambda (uI233d@s uI233e@subst) (let ((uI2342@insert-to-subst '#f)) (begin (set! uI2342@insert-to-subst (lambda (uI2343@a uI2344@subst) (let ((uI2347@name (car uI2343@a)) (uI2348@label (cdr uI2343@a))) (let ((uI234b@t (assq uI2347@name uI2344@subst))) (if uI234b@t ((lambda (uI234d@x) (if (eq? (cdr uI234d@x) uI2348@label) uI2344@subst (uI214a@dup-error uI2347@name))) uI234b@t) (cons uI2343@a uI2344@subst)))))) (if (null? uI233d@s) uI233e@subst (uI2342@insert-to-subst (car uI233d@s) (uI214c@merge-substs (cdr uI233d@s) uI233e@subst))))))) (set! uI214e@exclude* (lambda (uI230d@sym* uI230e@subst) (let ((uI2312@exclude '#f)) (begin (set! uI2312@exclude (lambda (uI232b@sym uI232c@subst) (if (null? uI232c@subst) (uIe5c@syntax-violation 'import '"cannot rename unbound identifier" uI232b@sym) (if (eq? uI232b@sym (caar uI232c@subst)) (values (cdar uI232c@subst) (cdr uI232c@subst)) (let ((uI232f@a (car uI232c@subst))) (call-with-values (lambda () (uI2312@exclude uI232b@sym (cdr uI232c@subst))) (lambda (uI2335@uI2332 uI2336@uI2334) (let ((uI2339@subst uI2336@uI2334) (uI233a@old uI2335@uI2332)) (values uI233a@old (cons uI232f@a uI2339@subst)))))))))) (if (null? uI230d@sym*) (values '() uI230e@subst) (call-with-values (lambda () (uI2312@exclude (car uI230d@sym*) uI230e@subst)) (lambda (uI2317@uI2314 uI2318@uI2316) (let ((uI231b@subst uI2318@uI2316) (uI231c@old uI2317@uI2314)) (call-with-values (lambda () (uI214e@exclude* (cdr uI230d@sym*) uI231b@subst)) (lambda (uI2323@uI2320 uI2324@uI2322) (let ((uI2327@subst uI2324@uI2322) (uI2328@old* uI2323@uI2320)) (values (cons uI231c@old uI2328@old*) uI2327@subst)))))))))))) (set! uI2150@find* (lambda (uI2305@sym* uI2306@subst) (map (lambda (uI2309@x) (let ((uI230b@t (assq uI2309@x uI2306@subst))) (if uI230b@t (cdr uI230b@t) (uIe5c@syntax-violation 'import '"cannot find identifier" uI2309@x)))) uI2305@sym*))) (set! uI2152@rem* (lambda (uI22fd@sym* uI22fe@subst) (let uI2303@f ((uI2301@subst uI22fe@subst)) (if (null? uI2301@subst) '() (if (memq (caar uI2301@subst) uI22fd@sym*) (uI2303@f (cdr uI2301@subst)) (cons (car uI2301@subst) (uI2303@f (cdr uI2301@subst)))))))) (set! uI2154@remove-dups (lambda (uI22fb@ls) (if (null? uI22fb@ls) '() (if (memq (car uI22fb@ls) (cdr uI22fb@ls)) (uI2154@remove-dups (cdr uI22fb@ls)) (cons (car uI22fb@ls) (uI2154@remove-dups (cdr uI22fb@ls))))))) (set! uI2156@parse-library-name (lambda (uI2213@spec) (let ((uI2216@subversion? '#f) (uI2218@subversion-pred '#f) (uI221a@version-pred '#f)) (begin (set! uI2216@subversion? (lambda (uI22f7@x) (let ((uI22f9@x (uIe62@syntax->datum uI22f7@x))) (and (integer? uI22f9@x) (exact? uI22f9@x) (>= uI22f9@x '0))))) (set! uI2218@subversion-pred (lambda (uI2297@x*) (let ((uI2299@t uI2297@x*)) (let ((uI229b@ls/false (uId7c@syntax-dispatch uI2299@t 'any))) (if (and uI229b@ls/false (apply (lambda (uI229d@n) (uI2216@subversion? uI229d@n)) uI229b@ls/false)) (apply (lambda (uI229f@n) (lambda (uI22a1@x) (= uI22a1@x (uIe62@syntax->datum uI229f@n)))) uI229b@ls/false) (let ((uI22a3@t uI2299@t)) (let ((uI22a5@ls/false (uId7c@syntax-dispatch uI22a3@t '(any . each-any)))) (if (and uI22a5@ls/false (apply (lambda (uI22a7@p? uI22a8@sub*) (eq? (uIe62@syntax->datum uI22a7@p?) 'and)) uI22a5@ls/false)) (apply (lambda (uI22ab@p? uI22ac@sub*) (let ((uI22af@p* (map uI2218@subversion-pred uI22ac@sub*))) (lambda (uI22b1@x) (for-all (lambda (uI22b3@p) (uI22b3@p uI22b1@x)) uI22af@p*)))) uI22a5@ls/false) (let ((uI22b5@t uI22a3@t)) (let ((uI22b7@ls/false (uId7c@syntax-dispatch uI22b5@t '(any . each-any)))) (if (and uI22b7@ls/false (apply (lambda (uI22b9@p? uI22ba@sub*) (eq? (uIe62@syntax->datum uI22b9@p?) 'or)) uI22b7@ls/false)) (apply (lambda (uI22bd@p? uI22be@sub*) (let ((uI22c1@p* (map uI2218@subversion-pred uI22be@sub*))) (lambda (uI22c3@x) (exists (lambda (uI22c5@p) (uI22c5@p uI22c3@x)) uI22c1@p*)))) uI22b7@ls/false) (let ((uI22c7@t uI22b5@t)) (let ((uI22c9@ls/false (uId7c@syntax-dispatch uI22c7@t '(any any)))) (if (and uI22c9@ls/false (apply (lambda (uI22cb@p? uI22cc@sub) (eq? (uIe62@syntax->datum uI22cb@p?) 'not)) uI22c9@ls/false)) (apply (lambda (uI22cf@p? uI22d0@sub) (let ((uI22d3@p (uI2218@subversion-pred uI22d0@sub))) (lambda (uI22d5@x) (not (uI22d3@p uI22d5@x))))) uI22c9@ls/false) (let ((uI22d7@t uI22c7@t)) (let ((uI22d9@ls/false (uId7c@syntax-dispatch uI22d7@t '(any any)))) (if (and uI22d9@ls/false (apply (lambda (uI22db@p? uI22dc@n) (and (eq? (uIe62@syntax->datum uI22db@p?) '<=) (uI2216@subversion? uI22dc@n))) uI22d9@ls/false)) (apply (lambda (uI22df@p? uI22e0@n) (lambda (uI22e3@x) (<= uI22e3@x (uIe62@syntax->datum uI22e0@n)))) uI22d9@ls/false) (let ((uI22e5@t uI22d7@t)) (let ((uI22e7@ls/false (uId7c@syntax-dispatch uI22e5@t '(any any)))) (if (and uI22e7@ls/false (apply (lambda (uI22e9@p? uI22ea@n) (and (eq? (uIe62@syntax->datum uI22e9@p?) '>=) (uI2216@subversion? uI22ea@n))) uI22e7@ls/false)) (apply (lambda (uI22ed@p? uI22ee@n) (lambda (uI22f1@x) (>= uI22f1@x (uIe62@syntax->datum uI22ee@n)))) uI22e7@ls/false) (let ((uI22f3@t uI22e5@t)) (let ((uI22f5@ls/false (uId7c@syntax-dispatch uI22f3@t '_))) (if uI22f5@ls/false (apply (lambda () (uIe5c@syntax-violation 'import '"invalid sub-version spec" uI2213@spec uI2297@x*)) uI22f5@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI22f3@t)))))))))))))))))))))))) (set! uI221a@version-pred (lambda (uI2247@x*) (let ((uI2249@t uI2247@x*)) (let ((uI224b@ls/false (uId7c@syntax-dispatch uI2249@t '()))) (if uI224b@ls/false (apply (lambda () (lambda (uI224d@x) '#t)) uI224b@ls/false) (let ((uI224f@t uI2249@t)) (let ((uI2251@ls/false (uId7c@syntax-dispatch uI224f@t '(any . each-any)))) (if (and uI2251@ls/false (apply (lambda (uI2253@c uI2254@ver*) (eq? (uIe62@syntax->datum uI2253@c) 'and)) uI2251@ls/false)) (apply (lambda (uI2257@c uI2258@ver*) (let ((uI225b@p* (map uI221a@version-pred uI2258@ver*))) (lambda (uI225d@x) (for-all (lambda (uI225f@p) (uI225f@p uI225d@x)) uI225b@p*)))) uI2251@ls/false) (let ((uI2261@t uI224f@t)) (let ((uI2263@ls/false (uId7c@syntax-dispatch uI2261@t '(any . each-any)))) (if (and uI2263@ls/false (apply (lambda (uI2265@c uI2266@ver*) (eq? (uIe62@syntax->datum uI2265@c) 'or)) uI2263@ls/false)) (apply (lambda (uI2269@c uI226a@ver*) (let ((uI226d@p* (map uI221a@version-pred uI226a@ver*))) (lambda (uI226f@x) (exists (lambda (uI2271@p) (uI2271@p uI226f@x)) uI226d@p*)))) uI2263@ls/false) (let ((uI2273@t uI2261@t)) (let ((uI2275@ls/false (uId7c@syntax-dispatch uI2273@t '(any any)))) (if (and uI2275@ls/false (apply (lambda (uI2277@c uI2278@ver) (eq? (uIe62@syntax->datum uI2277@c) 'not)) uI2275@ls/false)) (apply (lambda (uI227b@c uI227c@ver) (let ((uI227f@p (uI221a@version-pred uI227c@ver))) (lambda (uI2281@x) (not (uI227f@p uI2281@x))))) uI2275@ls/false) (let ((uI2283@t uI2273@t)) (let ((uI2285@ls/false (uId7c@syntax-dispatch uI2283@t 'each-any))) (if uI2285@ls/false (apply (lambda (uI2287@sub*) (let ((uI2289@p* (map uI2218@subversion-pred uI2287@sub*))) (lambda (uI228b@x) (let uI2291@f ((uI228d@p* uI2289@p*) (uI228e@x uI228b@x)) (if (null? uI228d@p*) '#t (if (null? uI228e@x) '#f (and ((car uI228d@p*) (car uI228e@x)) (uI2291@f (cdr uI228d@p*) (cdr uI228e@x))))))))) uI2285@ls/false) (let ((uI2293@t uI2283@t)) (let ((uI2295@ls/false (uId7c@syntax-dispatch uI2293@t '_))) (if uI2295@ls/false (apply (lambda () (uIe5c@syntax-violation 'import '"invalid version spec" uI2213@spec uI2247@x*)) uI2295@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2293@t))))))))))))))))))))) (let uI221d@f ((uI221b@x uI2213@spec)) (let ((uI221f@t uI221b@x)) (let ((uI2221@ls/false (uId7c@syntax-dispatch uI221f@t '(each-any)))) (if uI2221@ls/false (apply (lambda (uI2223@version-spec*) (values '() (uI221a@version-pred uI2223@version-spec*))) uI2221@ls/false) (let ((uI2225@t uI221f@t)) (let ((uI2227@ls/false (uId7c@syntax-dispatch uI2225@t '(any . any)))) (if (and uI2227@ls/false (apply (lambda (uI2229@x uI222a@x*) (uI2148@idsyn? uI2229@x)) uI2227@ls/false)) (apply (lambda (uI222d@x uI222e@x*) (call-with-values (lambda () (uI221d@f uI222e@x*)) (lambda (uI2235@uI2232 uI2236@uI2234) (let ((uI2239@pred uI2236@uI2234) (uI223a@name uI2235@uI2232)) (values (cons (uIe62@syntax->datum uI222d@x) uI223a@name) uI2239@pred))))) uI2227@ls/false) (let ((uI223d@t uI2225@t)) (let ((uI223f@ls/false (uId7c@syntax-dispatch uI223d@t '()))) (if uI223f@ls/false (apply (lambda () (values '() (lambda (uI2241@x) '#t))) uI223f@ls/false) (let ((uI2243@t uI223d@t)) (let ((uI2245@ls/false (uId7c@syntax-dispatch uI2243@t '_))) (if uI2245@ls/false (apply (lambda () (uIe5c@syntax-violation '#f '"invalid import spec" uI2213@spec)) uI2245@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2243@t)))))))))))))))))) (set! uI2158@import-library (lambda (uI2203@spec*) (call-with-values (lambda () (uI2156@parse-library-name uI2203@spec*)) (lambda (uI2209@uI2206 uI220a@uI2208) (let ((uI220d@pred uI220a@uI2208) (uI220e@name uI2209@uI2206)) (begin (if (null? uI220e@name) (uIe5c@syntax-violation 'import '"empty library name" uI2203@spec*) (void)) (let ((uI2211@lib (uI984@uI7cb@find-library-by-name uI220e@name))) (begin (if (not uI2211@lib) (uIe5c@syntax-violation 'import '"cannot find library with required name" uI220e@name) (void)) (if (not (uI220d@pred (uI95e@uI77f@library-version uI2211@lib))) (uIe5c@syntax-violation 'import '"library does not satisfy version specification" uI2203@spec* uI2211@lib) (void)) ((uIde8@imp-collector) uI2211@lib) (uI966@uI78f@library-subst uI2211@lib))))))))) (set! uI215a@get-import (lambda (uI2175@spec) (let ((uI2177@t uI2175@spec)) (let ((uI2179@ls/false (uId7c@syntax-dispatch uI2177@t '(any . each-any)))) (if (and uI2179@ls/false (apply (lambda (uI217b@x uI217c@x*) (not (memq (uIe62@syntax->datum uI217b@x) '(for rename except only prefix library)))) uI2179@ls/false)) (apply (lambda (uI217f@x uI2180@x*) (uI2158@import-library (cons uI217f@x uI2180@x*))) uI2179@ls/false) (let ((uI2183@t uI2177@t)) (let ((uI2185@ls/false (uId7c@syntax-dispatch uI2183@t '(any any . #(each (any any)))))) (if (and uI2185@ls/false (apply (lambda (uI2187@rename uI2188@isp uI2189@old* uI218a@new*) (and (eq? (uIe62@syntax->datum uI2187@rename) 'rename) (for-all uI2148@idsyn? uI2189@old*) (for-all uI2148@idsyn? uI218a@new*))) uI2185@ls/false)) (apply (lambda (uI218f@rename uI2190@isp uI2191@old* uI2192@new*) (let ((uI2197@subst (uI215a@get-import uI2190@isp)) (uI2198@old* (map uIe62@syntax->datum uI2191@old*)) (uI2199@new* (map uIe62@syntax->datum uI2192@new*))) (let ((uI219d@old-label* (uI2150@find* uI2198@old* uI2197@subst))) (let ((uI219f@subst (uI2152@rem* uI2198@old* uI2197@subst))) (uI214c@merge-substs (map cons uI2199@new* uI219d@old-label*) uI219f@subst))))) uI2185@ls/false) (let ((uI21a1@t uI2183@t)) (let ((uI21a3@ls/false (uId7c@syntax-dispatch uI21a1@t '(any any . each-any)))) (if (and uI21a3@ls/false (apply (lambda (uI21a5@except uI21a6@isp uI21a7@sym*) (and (eq? (uIe62@syntax->datum uI21a5@except) 'except) (for-all uI2148@idsyn? uI21a7@sym*))) uI21a3@ls/false)) (apply (lambda (uI21ab@except uI21ac@isp uI21ad@sym*) (let ((uI21b1@subst (uI215a@get-import uI21ac@isp))) (uI2152@rem* (map uIe62@syntax->datum uI21ad@sym*) uI21b1@subst))) uI21a3@ls/false) (let ((uI21b3@t uI21a1@t)) (let ((uI21b5@ls/false (uId7c@syntax-dispatch uI21b3@t '(any any . each-any)))) (if (and uI21b5@ls/false (apply (lambda (uI21b7@only uI21b8@isp uI21b9@sym*) (and (eq? (uIe62@syntax->datum uI21b7@only) 'only) (for-all uI2148@idsyn? uI21b9@sym*))) uI21b5@ls/false)) (apply (lambda (uI21bd@only uI21be@isp uI21bf@sym*) (let ((uI21c3@subst (uI215a@get-import uI21be@isp)) (uI21c4@sym* (map uIe62@syntax->datum uI21bf@sym*))) (let ((uI21c7@sym* (uI2154@remove-dups uI21c4@sym*))) (let ((uI21c9@lab* (uI2150@find* uI21c7@sym* uI21c3@subst))) (map cons uI21c7@sym* uI21c9@lab*))))) uI21b5@ls/false) (let ((uI21cb@t uI21b3@t)) (let ((uI21cd@ls/false (uId7c@syntax-dispatch uI21cb@t '(any any any)))) (if (and uI21cd@ls/false (apply (lambda (uI21cf@prefix uI21d0@isp uI21d1@p) (and (eq? (uIe62@syntax->datum uI21cf@prefix) 'prefix) (uI2148@idsyn? uI21d1@p))) uI21cd@ls/false)) (apply (lambda (uI21d5@prefix uI21d6@isp uI21d7@p) (let ((uI21db@subst (uI215a@get-import uI21d6@isp)) (uI21dc@prefix (symbol->string (uIe62@syntax->datum uI21d7@p)))) (map (lambda (uI21df@x) (cons (string->symbol (string-append uI21dc@prefix (symbol->string (car uI21df@x)))) (cdr uI21df@x))) uI21db@subst))) uI21cd@ls/false) (let ((uI21e1@t uI21cb@t)) (let ((uI21e3@ls/false (uId7c@syntax-dispatch uI21e1@t '(any each-any)))) (if (and uI21e3@ls/false (apply (lambda (uI21e5@library uI21e6@spec*) (eq? (uIe62@syntax->datum uI21e5@library) 'library)) uI21e3@ls/false)) (apply (lambda (uI21e9@library uI21ea@spec*) (uI2158@import-library uI21ea@spec*)) uI21e3@ls/false) (let ((uI21ed@t uI21e1@t)) (let ((uI21ef@ls/false (uId7c@syntax-dispatch uI21ed@t '(any any . any)))) (if (and uI21ef@ls/false (apply (lambda (uI21f1@for uI21f2@isp uI21f3@rest) (eq? (uIe62@syntax->datum uI21f1@for) 'for)) uI21ef@ls/false)) (apply (lambda (uI21f7@for uI21f8@isp uI21f9@rest) (uI215a@get-import uI21f8@isp)) uI21ef@ls/false) (let ((uI21fd@t uI21ed@t)) (let ((uI21ff@ls/false (uId7c@syntax-dispatch uI21fd@t 'any))) (if uI21ff@ls/false (apply (lambda (uI2201@spec) (uIe5c@syntax-violation 'import '"invalid import spec" uI2201@spec)) uI21ff@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI21fd@t))))))))))))))))))))))))))) (set! uI215c@add-imports! (lambda (uI2165@imp uI2166@h) (let ((uI2169@subst (uI215a@get-import uI2165@imp))) (for-each (lambda (uI216b@x) (let ((uI216d@name (car uI216b@x)) (uI216e@label (cdr uI216b@x))) (let ((uI2171@t (hashtable-ref uI2166@h uI216d@name '#f))) (if uI2171@t ((lambda (uI2173@l) (if (not (eq? uI2173@l uI216e@label)) (uI214a@dup-error uI216d@name) (void))) uI2171@t) (hashtable-set! uI2166@h uI216d@name uI216e@label))))) uI2169@subst)))) (lambda (uI215d@imp*) (let uI2163@f ((uI215f@imp* uI215d@imp*) (uI2160@h (make-eq-hashtable))) (if (null? uI215f@imp*) (hashtable-entries uI2160@h) (begin (uI215c@add-imports! (car uI215f@imp*) uI2160@h) (uI2163@f (cdr uI215f@imp*) uI2160@h)))))))) (set! uI287f@uIdde@parse-import-spec* uIdde@parse-import-spec*) (set! uIde0@make-top-rib (lambda (uI2353@names uI2354@labels) (let ((uI2357@rib (uIb29@make-empty-rib))) (begin (vector-for-each (lambda (uI2359@name uI235a@label) (begin (if (not (symbol? uI2359@name)) (error 'make-top-rib '"BUG: not a symbol" uI2359@name) (void)) (uIb2d@extend-rib/nc! uI2357@rib (make-simple-struct 'stx '5 (list uI2359@name uIaf9@top-mark* '() '())) uI235a@label))) uI2353@names uI2354@labels) uI2357@rib)))) (set! uI2880@uIde0@make-top-rib uIde0@make-top-rib) (set! uIde2@make-collector (lambda () (let ((uI235d@ls '())) (lambda uI2361 (let ((uI2362 (length uI2361))) (if (= uI2362 '0) (apply (lambda () uI235d@ls) uI2361) (if (= uI2362 '1) (apply (lambda (uI235f@x) (set! uI235d@ls (uIaf2@set-cons uI235f@x uI235d@ls))) uI2361) (error 'apply '"invalid arg count")))))))) (set! uI2881@uIde2@make-collector uIde2@make-collector) (set! uIde4@inv-collector (uI6bf@uI59e@make-parameter (lambda uI2363@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (uI2365@x) (begin (if (not (procedure? uI2365@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" uI2365@x) (void)) uI2365@x)))) (set! uI2882@uIde4@inv-collector uIde4@inv-collector) (set! uIde6@vis-collector (uI6bf@uI59e@make-parameter (lambda uI2367@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (uI2369@x) (begin (if (not (procedure? uI2369@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" uI2369@x) (void)) uI2369@x)))) (set! uI2883@uIde6@vis-collector uIde6@vis-collector) (set! uIde8@imp-collector (uI6bf@uI59e@make-parameter (lambda uI236b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (uI236d@x) (begin (if (not (procedure? uI236d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" uI236d@x) (void)) uI236d@x)))) (set! uI2884@uIde8@imp-collector uIde8@imp-collector) (set! uIdea@chi-library-internal (lambda (uI236f@e* uI2370@rib uI2371@top?) (call-with-values (lambda () (uIdd4@chi-body* uI236f@e* '() '() '() '() '() '() '() uI2370@rib uI2371@top?)) (lambda (uI2385@uI2376 uI2386@uI2378 uI2387@uI237a uI2388@uI237c uI2389@uI237e uI238a@uI2380 uI238b@uI2382 uI238c@uI2384) (let ((uI2395@exp* uI238c@uI2384) (uI2396@_kwd* uI238b@uI2382) (uI2397@mod** uI238a@uI2380) (uI2398@rhs* uI2389@uI237e) (uI2399@lex* uI2388@uI237c) (uI239a@mr uI2387@uI237a) (uI239b@r uI2386@uI2378) (uI239c@e* uI2385@uI2376)) (values (append (apply append (reverse uI2397@mod**)) uI239c@e*) uI239b@r uI239a@mr (reverse uI2399@lex*) (reverse uI2398@rhs*) uI2395@exp*)))))) (set! uI2885@uIdea@chi-library-internal uIdea@chi-library-internal) (set! uIdec@chi-interaction-expr (lambda (uI23a5@e uI23a6@rib uI23a7@r) (call-with-values (lambda () (uIdd4@chi-body* (list uI23a5@e) uI23a7@r uI23a7@r '() '() '() '() '() uI23a6@rib '#t)) (lambda (uI23bb@uI23ac uI23bc@uI23ae uI23bd@uI23b0 uI23be@uI23b2 uI23bf@uI23b4 uI23c0@uI23b6 uI23c1@uI23b8 uI23c2@uI23ba) (let ((uI23cb@_exp* uI23c2@uI23ba) (uI23cc@_kwd* uI23c1@uI23b8) (uI23cd@mod** uI23c0@uI23b6) (uI23ce@rhs* uI23bf@uI23b4) (uI23cf@lex* uI23be@uI23b2) (uI23d0@mr uI23bd@uI23b0) (uI23d1@r uI23bc@uI23ae) (uI23d2@e* uI23bb@uI23ac)) (let ((uI23db@e* (uIdac@expand-interaction-rhs*/init* (reverse uI23cf@lex*) (reverse uI23ce@rhs*) (append (apply append (reverse uI23cd@mod**)) uI23d2@e*) uI23d1@r uI23d0@mr))) (let ((uI23dd@e (if (null? uI23db@e*) (uIadb@uIa36@build-void) (if (null? (cdr uI23db@e*)) (car uI23db@e*) (uIada@uIa34@build-sequence '#f uI23db@e*))))) (values uI23dd@e uI23d1@r)))))))) (set! uI2886@uIdec@chi-interaction-expr uIdec@chi-interaction-expr) (set! uIdee@library-body-expander (lambda (uI23df@name uI23e0@main-exp* uI23e1@imp* uI23e2@b* uI23e3@top?) (let ((uI23ea@itc '#f)) (begin (set! uI23ea@itc (uIde2@make-collector)) (let ((uI23f3@uI23ec uIde8@imp-collector) (uI23f4@uI23ee uIe6c@top-level-context) (uI23f5@uI23f0 uI23ea@itc) (uI23f6@uI23f2 '#f)) (let ((uI23fb@swap (lambda () (begin (let ((uI23fd@t (uI23f3@uI23ec))) (begin (uI23f3@uI23ec uI23f5@uI23f0) (set! uI23f5@uI23f0 uI23fd@t))) (let ((uI23ff@t (uI23f4@uI23ee))) (begin (uI23f4@uI23ee uI23f6@uI23f2) (set! uI23f6@uI23f2 uI23ff@t))))))) (dynamic-wind uI23fb@swap (lambda () (call-with-values (lambda () (uIdde@parse-import-spec* uI23e1@imp*)) (lambda (uI2405@uI2402 uI2406@uI2404) (let ((uI2409@subst-labels uI2406@uI2404) (uI240a@subst-names uI2405@uI2402)) (let ((uI240d@rib (uIde0@make-top-rib uI240a@subst-names uI2409@subst-labels))) (let ((uI2410@wrap '#f)) (begin (set! uI2410@wrap (lambda (uI248b@x) (make-simple-struct 'stx '5 (list uI248b@x uIaf9@top-mark* (list uI240d@rib) '())))) (let ((uI2411@b* (map uI2410@wrap uI23e2@b*)) (uI2412@main-exp* (map uI2410@wrap uI23e0@main-exp*)) (uI2413@rtc (uIde2@make-collector)) (uI2414@vtc (uIde2@make-collector))) (let ((uI2421@uI241a uIde4@inv-collector) (uI2422@uI241c uIde6@vis-collector) (uI2423@uI241e uI2413@rtc) (uI2424@uI2420 uI2414@vtc)) (let ((uI2429@swap (lambda () (begin (let ((uI242b@t (uI2421@uI241a))) (begin (uI2421@uI241a uI2423@uI241e) (set! uI2423@uI241e uI242b@t))) (let ((uI242d@t (uI2422@uI241c))) (begin (uI2422@uI241c uI2424@uI2420) (set! uI2424@uI2420 uI242d@t))))))) (dynamic-wind uI2429@swap (lambda () (call-with-values (lambda () (uIdea@chi-library-internal uI2411@b* uI240d@rib uI23e3@top?)) (lambda (uI243b@uI2430 uI243c@uI2432 uI243d@uI2434 uI243e@uI2436 uI243f@uI2438 uI2440@uI243a) (let ((uI2447@internal-exp* uI2440@uI243a) (uI2448@rhs* uI243f@uI2438) (uI2449@lex* uI243e@uI2436) (uI244a@mr uI243d@uI2434) (uI244b@r uI243c@uI2432) (uI244c@init* uI243b@uI2430)) (call-with-values (lambda () (uIdd8@parse-exports (append uI2412@main-exp* uI2447@internal-exp*))) (lambda (uI2457@uI2454 uI2458@uI2456) (let ((uI245b@exp-id* uI2458@uI2456) (uI245c@exp-name* uI2457@uI2454)) (begin (uIb31@seal-rib! uI240d@rib) (let ((uI245f@init* (uId9a@chi-expr* uI244c@init* uI244b@r uI244a@mr))) (let ((uI2461@rhs* (uIdae@chi-rhs* uI2448@rhs* uI244b@r uI244a@mr))) (begin (uIb33@unseal-rib! uI240d@rib) (let ((uI2463@loc* (map uIaff@gen-global uI2449@lex*)) (uI2464@export-subst (uIe46@make-export-subst uI245c@exp-name* uI245b@exp-id*))) (let ((uI2468@errstr '#f)) (begin (set! uI2468@errstr '"attempt to export mutated variable") (call-with-values (lambda () (uIe48@make-export-env/macros uI2449@lex* uI2463@loc* uI244b@r)) (lambda (uI246f@uI246a uI2470@uI246c uI2471@uI246e) (let ((uI2475@macro* uI2471@uI246e) (uI2476@global* uI2470@uI246c) (uI2477@export-env uI246f@uI246a)) (begin (for-each (lambda (uI247b@s) (let ((uI247d@name (car uI247b@s)) (uI247e@label (cdr uI247b@s))) (let ((uI2481@p (assq uI247e@label uI2477@export-env))) (if uI2481@p (let ((uI2483@b (cdr uI2481@p))) (let ((uI2485@type (car uI2483@b))) (if (eq? uI2485@type 'mutable) (uIe5c@syntax-violation 'export uI2468@errstr uI247d@name) (void)))) (void))))) uI2464@export-subst) (let ((uI2487@invoke-body (uIae0@uIa40@build-library-letrec* '#f uI23df@name uI2449@lex* uI2463@loc* uI2461@rhs* (if (null? uI245f@init*) (uIadb@uIa36@build-void) (uIada@uIa34@build-sequence '#f uI245f@init*)))) (uI2488@invoke-definitions (map uIad7@uI993@build-global-define (map cdr uI2476@global*)))) (values (uI23ea@itc) (uI2413@rtc) (uI2414@vtc) (uIada@uIa34@build-sequence '#f (append uI2488@invoke-definitions (list uI2487@invoke-body))) uI2475@macro* uI2464@export-subst uI2477@export-env)))))))))))))))))))) uI2429@swap))))))))))) uI23fb@swap))))))) (set! uI2887@uIdee@library-body-expander uIdee@library-body-expander) (set! uIdf0@core-library-expander (lambda (uI248d@e uI248e@verify-name) (call-with-values (lambda () (uIddc@parse-library uI248d@e)) (lambda (uI2499@uI2492 uI249a@uI2494 uI249b@uI2496 uI249c@uI2498) (let ((uI24a1@b* uI249c@uI2498) (uI24a2@imp* uI249b@uI2496) (uI24a3@exp* uI249a@uI2494) (uI24a4@name* uI2499@uI2492)) (call-with-values (lambda () (uIdda@parse-library-name uI24a4@name*)) (lambda (uI24ad@uI24aa uI24ae@uI24ac) (let ((uI24b1@ver uI24ae@uI24ac) (uI24b2@name uI24ad@uI24aa)) (begin (uI248e@verify-name uI24b2@name) (call-with-values (lambda () (uIdee@library-body-expander uI24b2@name uI24a3@exp* uI24a2@imp* uI24a1@b* '#f)) (lambda (uI24c3@uI24b6 uI24c4@uI24b8 uI24c5@uI24ba uI24c6@uI24bc uI24c7@uI24be uI24c8@uI24c0 uI24c9@uI24c2) (let ((uI24d1@export-env uI24c9@uI24c2) (uI24d2@export-subst uI24c8@uI24c0) (uI24d3@visit-code uI24c7@uI24be) (uI24d4@invoke-code uI24c6@uI24bc) (uI24d5@visit-req* uI24c5@uI24ba) (uI24d6@invoke-req* uI24c4@uI24b8) (uI24d7@imp* uI24c3@uI24b6)) (values uI24b2@name uI24b1@ver uI24d7@imp* uI24d6@invoke-req* uI24d5@visit-req* uI24d4@invoke-code uI24d3@visit-code uI24d2@export-subst uI24d1@export-env))))))))))))) (set! uI2888@uIdf0@core-library-expander uIdf0@core-library-expander) (set! uIdf2@parse-top-level-program (lambda (uI24df@e*) (let ((uI24e1@t uI24df@e*)) (let ((uI24e3@ls/false (uId7c@syntax-dispatch uI24e1@t '((any . each-any) . each-any)))) (if (and uI24e3@ls/false (apply (lambda (uI24e5@import uI24e6@imp* uI24e7@b*) (eq? (uIe62@syntax->datum uI24e5@import) 'import)) uI24e3@ls/false)) (apply (lambda (uI24eb@import uI24ec@imp* uI24ed@b*) (values uI24ec@imp* uI24ed@b*)) uI24e3@ls/false) (let ((uI24f1@t uI24e1@t)) (let ((uI24f3@ls/false (uId7c@syntax-dispatch uI24f1@t '((any . any) . any)))) (if (and uI24f3@ls/false (apply (lambda (uI24f5@import uI24f6@x uI24f7@y) (eq? (uIe62@syntax->datum uI24f5@import) 'import)) uI24f3@ls/false)) (apply (lambda (uI24fb@import uI24fc@x uI24fd@y) (uIe5c@syntax-violation 'expander '"invalid syntax of top-level program" (uIb6f@syntax-car uI24df@e*))) uI24f3@ls/false) (let ((uI2501@t uI24f1@t)) (let ((uI2503@ls/false (uId7c@syntax-dispatch uI2501@t '_))) (if uI2503@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) uI2503@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2501@t)))))))))))) (set! uI2889@uIdf2@parse-top-level-program uIdf2@parse-top-level-program) (set! uIdf4@top-level-expander (lambda (uI2505@e*) (call-with-values (lambda () (uIdf2@parse-top-level-program uI2505@e*)) (lambda (uI250b@uI2508 uI250c@uI250a) (let ((uI250f@b* uI250c@uI250a) (uI2510@imp* uI250b@uI2508)) (call-with-values (lambda () (uIdee@library-body-expander '() '() uI2510@imp* uI250f@b* '#t)) (lambda (uI2521@uI2514 uI2522@uI2516 uI2523@uI2518 uI2524@uI251a uI2525@uI251c uI2526@uI251e uI2527@uI2520) (let ((uI252f@export-env uI2527@uI2520) (uI2530@export-subst uI2526@uI251e) (uI2531@visit-code uI2525@uI251c) (uI2532@invoke-code uI2524@uI251a) (uI2533@visit-req* uI2523@uI2518) (uI2534@invoke-req* uI2522@uI2516) (uI2535@imp* uI2521@uI2514)) (values uI2534@invoke-req* uI2532@invoke-code))))))))) (set! uI288a@uIdf4@top-level-expander uIdf4@top-level-expander) (set! uIdf6@rp (uI6bc@uI598@make-record-printer 'env (lambda (uI253d@x uI253e@p uI253f@wr) (display '"#<environment>" uI253e@p)))) (set! uI288b@uIdf6@rp uIdf6@rp) (set! uIe00@env? (lambda (uI2543@x) (and (simple-struct? uI2543@x) (eq? (simple-struct-name uI2543@x) 'env)))) (set! uI288c@uIe00@env? uIe00@env?) (set! uIe02@env-names (lambda (uI2545@x) (simple-struct-ref uI2545@x '0))) (set! uI288d@uIe02@env-names uIe02@env-names) (set! uIe04@set-env-names! (lambda (uI2547@x uI2548@val) (simple-struct-set! uI2547@x '0 uI2548@val))) (set! uI288e@uIe04@set-env-names! uIe04@set-env-names!) (set! uIe06@env-labels (lambda (uI254b@x) (simple-struct-ref uI254b@x '1))) (set! uI288f@uIe06@env-labels uIe06@env-labels) (set! uIe08@set-env-labels! (lambda (uI254d@x uI254e@val) (simple-struct-set! uI254d@x '1 uI254e@val))) (set! uI2890@uIe08@set-env-labels! uIe08@set-env-labels!) (set! uIe0a@env-itc (lambda (uI2551@x) (simple-struct-ref uI2551@x '2))) (set! uI2891@uIe0a@env-itc uIe0a@env-itc) (set! uIe0c@set-env-itc! (lambda (uI2553@x uI2554@val) (simple-struct-set! uI2553@x '2 uI2554@val))) (set! uI2892@uIe0c@set-env-itc! uIe0c@set-env-itc!) (set! uIe0e@dummy '3) (set! uI2893@uIe0e@dummy uIe0e@dummy) (set! uIe10@rp (uI6bc@uI598@make-record-printer 'interaction-env (lambda (uI2557@x uI2558@p uI2559@wr) (display '"#<environment>" uI2558@p)))) (set! uI2894@uIe10@rp uIe10@rp) (set! uIe1a@interaction-env? (lambda (uI255d@x) (and (simple-struct? uI255d@x) (eq? (simple-struct-name uI255d@x) 'interaction-env)))) (set! uI2895@uIe1a@interaction-env? uIe1a@interaction-env?) (set! uIe1c@interaction-env-rib (lambda (uI255f@x) (simple-struct-ref uI255f@x '0))) (set! uI2896@uIe1c@interaction-env-rib uIe1c@interaction-env-rib) (set! uIe1e@set-interaction-env-rib! (lambda (uI2561@x uI2562@val) (simple-struct-set! uI2561@x '0 uI2562@val))) (set! uI2897@uIe1e@set-interaction-env-rib! uIe1e@set-interaction-env-rib!) (set! uIe20@interaction-env-r (lambda (uI2565@x) (simple-struct-ref uI2565@x '1))) (set! uI2898@uIe20@interaction-env-r uIe20@interaction-env-r) (set! uIe22@set-interaction-env-r! (lambda (uI2567@x uI2568@val) (simple-struct-set! uI2567@x '1 uI2568@val))) (set! uI2899@uIe22@set-interaction-env-r! uIe22@set-interaction-env-r!) (set! uIe24@interaction-env-locs (lambda (uI256b@x) (simple-struct-ref uI256b@x '2))) (set! uI289a@uIe24@interaction-env-locs uIe24@interaction-env-locs) (set! uIe26@set-interaction-env-locs! (lambda (uI256d@x uI256e@val) (simple-struct-set! uI256d@x '2 uI256e@val))) (set! uI289b@uIe26@set-interaction-env-locs! uIe26@set-interaction-env-locs!) (set! uIe28@dummy '3) (set! uI289c@uIe28@dummy uIe28@dummy) (set! uIe2a@interaction-environment-symbols (lambda () (uIe32@environment-symbols (uIe6a@interaction-environment)))) (set! uI289d@uIe2a@interaction-environment-symbols uIe2a@interaction-environment-symbols) (set! uIe2c@environment-bindings (lambda (uI2571@e) (vector->list (vector-map (lambda (uI2573@name uI2574@label) (uIe2e@parse-binding (cons uI2573@name (uI98a@uI7d7@imported-label->binding uI2574@label)))) (uIe02@env-names uI2571@e) (uIe06@env-labels uI2571@e))))) (set! uI289e@uIe2c@environment-bindings uIe2c@environment-bindings) (set! uIe2e@parse-binding (lambda (uI2577@b) (cons (car uI2577@b) (let ((uI2579@t (cadr uI2577@b))) (if (memv uI2579@t '(core-prim global)) 'procedure (if (memv uI2579@t '(core-macro macro global-macro)) 'syntax (if (memv uI2579@t '($core-rtd)) 'record (if (eq? (car uI2577@b) (cadr uI2577@b)) 'syntax 'unknown)))))))) (set! uI289f@uIe2e@parse-binding uIe2e@parse-binding) (set! uIe30@environment? (lambda (uI257b@x) (or (uIe00@env? uI257b@x) (uIe1a@interaction-env? uI257b@x)))) (set! uI28a0@uIe30@environment? uIe30@environment?) (set! uIe32@environment-symbols (lambda (uI257d@x) (if (uIe00@env? uI257d@x) (vector->list (uIe02@env-names uI257d@x)) (if (uIe1a@interaction-env? uI257d@x) (map values (uIb13@rib-sym* (uIe1c@interaction-env-rib uI257d@x))) (assertion-violation 'environment-symbols '"not an environment" uI257d@x))))) (set! uI28a1@uIe32@environment-symbols uIe32@environment-symbols) (set! uIe34@environment (lambda uI257f@imp* (let ((uI2581@itc (uIde2@make-collector))) (let ((uI2587@uI2584 uIde8@imp-collector) (uI2588@uI2586 uI2581@itc)) (let ((uI258b@swap (lambda () (let ((uI258d@t (uI2587@uI2584))) (begin (uI2587@uI2584 uI2588@uI2586) (set! uI2588@uI2586 uI258d@t)))))) (dynamic-wind uI258b@swap (lambda () (call-with-values (lambda () (uIdde@parse-import-spec* uI257f@imp*)) (lambda (uI2593@uI2590 uI2594@uI2592) (let ((uI2597@subst-labels uI2594@uI2592) (uI2598@subst-names uI2593@uI2590)) (make-simple-struct 'env '4 (list uI2598@subst-names uI2597@subst-labels uI2581@itc)))))) uI258b@swap)))))) (set! uI28a2@uIe34@environment uIe34@environment) (set! uIe36@null-environment (lambda (uI259b@n) (begin (if (not (eqv? uI259b@n '5)) (assertion-violation 'null-environment '"not 5" uI259b@n) (void)) (uIe34@environment '(psyntax null-environment-5))))) (set! uI28a3@uIe36@null-environment uIe36@null-environment) (set! uIe38@scheme-report-environment (lambda (uI259d@n) (begin (if (not (eqv? uI259d@n '5)) (assertion-violation 'scheme-report-environment '"not 5" uI259d@n) (void)) (uIe34@environment '(psyntax scheme-report-environment-5))))) (set! uI28a4@uIe38@scheme-report-environment uIe38@scheme-report-environment) (set! uIe3a@expand (lambda (uI259f@x uI25a0@env) (if (uIe00@env? uI25a0@env) (let ((uI25a3@rib (uIde0@make-top-rib (uIe02@env-names uI25a0@env) (uIe06@env-labels uI25a0@env)))) (let ((uI25a5@x (make-simple-struct 'stx '5 (list uI259f@x uIaf9@top-mark* (list uI25a3@rib) '()))) (uI25a6@itc (uIe0a@env-itc uI25a0@env)) (uI25a7@rtc (uIde2@make-collector)) (uI25a8@vtc (uIde2@make-collector))) (let ((uI25ad@x (let ((uI25bf@uI25b0 uIe6c@top-level-context) (uI25c0@uI25b2 uIde4@inv-collector) (uI25c1@uI25b4 uIde6@vis-collector) (uI25c2@uI25b6 uIde8@imp-collector) (uI25c3@uI25b8 '#f) (uI25c4@uI25ba uI25a7@rtc) (uI25c5@uI25bc uI25a8@vtc) (uI25c6@uI25be uI25a6@itc)) (let ((uI25cf@swap (lambda () (begin (let ((uI25d1@t (uI25bf@uI25b0))) (begin (uI25bf@uI25b0 uI25c3@uI25b8) (set! uI25c3@uI25b8 uI25d1@t))) (let ((uI25d3@t (uI25c0@uI25b2))) (begin (uI25c0@uI25b2 uI25c4@uI25ba) (set! uI25c4@uI25ba uI25d3@t))) (let ((uI25d5@t (uI25c1@uI25b4))) (begin (uI25c1@uI25b4 uI25c5@uI25bc) (set! uI25c5@uI25bc uI25d5@t))) (let ((uI25d7@t (uI25c2@uI25b6))) (begin (uI25c2@uI25b6 uI25c6@uI25be) (set! uI25c6@uI25be uI25d7@t))))))) (dynamic-wind uI25cf@swap (lambda () (uId9e@chi-expr uI25a5@x '() '())) uI25cf@swap))))) (begin (uIb31@seal-rib! uI25a3@rib) (values uI25ad@x (uI25a7@rtc)))))) (if (uIe1a@interaction-env? uI25a0@env) (let ((uI25d9@rib (uIe1c@interaction-env-rib uI25a0@env)) (uI25da@r (uIe20@interaction-env-r uI25a0@env)) (uI25db@rtc (uIde2@make-collector))) (let ((uI25df@x (make-simple-struct 'stx '5 (list uI259f@x uIaf9@top-mark* (list uI25d9@rib) '())))) (call-with-values (lambda () (let ((uI25f5@uI25e6 uIe6c@top-level-context) (uI25f6@uI25e8 uIde4@inv-collector) (uI25f7@uI25ea uIde6@vis-collector) (uI25f8@uI25ec uIde8@imp-collector) (uI25f9@uI25ee uI25a0@env) (uI25fa@uI25f0 uI25db@rtc) (uI25fb@uI25f2 (uIde2@make-collector)) (uI25fc@uI25f4 (uIde2@make-collector))) (let ((uI2605@swap (lambda () (begin (let ((uI2607@t (uI25f5@uI25e6))) (begin (uI25f5@uI25e6 uI25f9@uI25ee) (set! uI25f9@uI25ee uI2607@t))) (let ((uI2609@t (uI25f6@uI25e8))) (begin (uI25f6@uI25e8 uI25fa@uI25f0) (set! uI25fa@uI25f0 uI2609@t))) (let ((uI260b@t (uI25f7@uI25ea))) (begin (uI25f7@uI25ea uI25fb@uI25f2) (set! uI25fb@uI25f2 uI260b@t))) (let ((uI260d@t (uI25f8@uI25ec))) (begin (uI25f8@uI25ec uI25fc@uI25f4) (set! uI25fc@uI25f4 uI260d@t))))))) (dynamic-wind uI2605@swap (lambda () (uIdec@chi-interaction-expr uI25df@x uI25d9@rib uI25da@r)) uI2605@swap)))) (lambda (uI260f@uI25e2 uI2610@uI25e4) (let ((uI2613@r^ uI2610@uI25e4) (uI2614@e uI260f@uI25e2)) (begin (uIe22@set-interaction-env-r! uI25a0@env uI2613@r^) (values uI2614@e (uI25db@rtc)))))))) (assertion-violation 'expand '"not an environment" uI25a0@env))))) (set! uI28a5@uIe3a@expand uIe3a@expand) (set! uIe3c@eval (lambda (uI2617@x uI2618@env) (begin (if (not (uIe30@environment? uI2618@env)) (error 'eval '"not an environment" uI2618@env) (void)) (call-with-values (lambda () (uIe3a@expand uI2617@x uI2618@env)) (lambda (uI261f@uI261c uI2620@uI261e) (let ((uI2623@invoke-req* uI2620@uI261e) (uI2624@x uI261f@uI261c)) (begin (for-each uI98b@uI7d9@invoke-library uI2623@invoke-req*) (eval-core (uI715@uI6cd@expanded->core uI2624@x))))))))) (set! uI28a6@uIe3c@eval uIe3c@eval) (set! uIe3e@library-expander (lambda uI2695 (let ((uI2696 (length uI2695))) (if (= uI2696 '3) (apply (lambda (uI2627@x uI2628@filename uI2629@verify-name) (let ((uI262e@build-visit-code '#f) (uI2630@visit! '#f)) (begin (set! uI262e@build-visit-code (lambda (uI2683@macro*) (if (null? uI2683@macro*) (uIadb@uIa36@build-void) (uIada@uIa34@build-sequence '#f (map (lambda (uI2685@x) (let ((uI2687@loc (car uI2685@x)) (uI2688@src (cddr uI2685@x))) (list 'set! uI2687@loc uI2688@src))) uI2683@macro*))))) (set! uI2630@visit! (lambda (uI267b@macro*) (for-each (lambda (uI267d@x) (let ((uI267f@loc (car uI267d@x)) (uI2680@proc (cadr uI267d@x))) (set-symbol-value! uI267f@loc uI2680@proc))) uI267b@macro*))) (call-with-values (lambda () (uIdf0@core-library-expander uI2627@x uI2629@verify-name)) (lambda (uI2643@uI2632 uI2644@uI2634 uI2645@uI2636 uI2646@uI2638 uI2647@uI263a uI2648@uI263c uI2649@uI263e uI264a@uI2640 uI264b@uI2642) (let ((uI2655@export-env uI264b@uI2642) (uI2656@export-subst uI264a@uI2640) (uI2657@macro* uI2649@uI263e) (uI2658@invoke-code uI2648@uI263c) (uI2659@vis* uI2647@uI263a) (uI265a@inv* uI2646@uI2638) (uI265b@imp* uI2645@uI2636) (uI265c@ver uI2644@uI2634) (uI265d@name uI2643@uI2632)) (let ((uI2667@id (gensym)) (uI2668@name uI265d@name) (uI2669@ver uI265c@ver) (uI266a@imp* (map uI98f@uI7e1@library-spec uI265b@imp*)) (uI266b@vis* (map uI98f@uI7e1@library-spec uI2659@vis*)) (uI266c@inv* (map uI98f@uI7e1@library-spec uI265a@inv*)) (uI266d@visit-proc (lambda () (uI2630@visit! uI2657@macro*))) (uI266e@invoke-proc (lambda () (eval-core (uI715@uI6cd@expanded->core uI2658@invoke-code)))) (uI266f@visit-code (uI262e@build-visit-code uI2657@macro*)) (uI2670@invoke-code uI2658@invoke-code)) (begin (uI989@uI7d5@install-library uI2667@id uI2668@name uI2669@ver uI266a@imp* uI266b@vis* uI266c@inv* uI2656@export-subst uI2655@export-env uI266d@visit-proc uI266e@invoke-proc uI266f@visit-code uI2670@invoke-code '#t uI2628@filename) (values uI2667@id uI2668@name uI2669@ver uI266a@imp* uI266b@vis* uI266c@inv* uI2670@invoke-code uI266f@visit-code uI2656@export-subst uI2655@export-env))))))))) uI2695) (if (= uI2696 '2) (apply (lambda (uI268b@x uI268c@filename) (uIe3e@library-expander uI268b@x uI268c@filename (lambda (uI268f@x) (values)))) uI2695) (if (= uI2696 '1) (apply (lambda (uI2691@x) (uIe3e@library-expander uI2691@x '#f (lambda (uI2693@x) (values)))) uI2695) (error 'apply '"invalid arg count"))))))) (set! uI28a7@uIe3e@library-expander uIe3e@library-expander) (set! uIe40@boot-library-expand (lambda (uI2697@x) (call-with-values (lambda () (uIe3e@library-expander uI2697@x)) (lambda (uI26ad@uI269a uI26ae@uI269c uI26af@uI269e uI26b0@uI26a0 uI26b1@uI26a2 uI26b2@uI26a4 uI26b3@uI26a6 uI26b4@uI26a8 uI26b5@uI26aa uI26b6@uI26ac) (let ((uI26c1@export-env uI26b6@uI26ac) (uI26c2@export-subst uI26b5@uI26aa) (uI26c3@visit-code uI26b4@uI26a8) (uI26c4@invoke-code uI26b3@uI26a6) (uI26c5@inv* uI26b2@uI26a4) (uI26c6@vis* uI26b1@uI26a2) (uI26c7@imp* uI26b0@uI26a0) (uI26c8@ver uI26af@uI269e) (uI26c9@name uI26ae@uI269c) (uI26ca@id uI26ad@uI269a)) (values uI26c9@name uI26c4@invoke-code uI26c2@export-subst uI26c1@export-env)))))) (set! uI28a8@uIe40@boot-library-expand uIe40@boot-library-expand) (set! uIe42@rev-map-append (lambda (uI26d5@f uI26d6@ls uI26d7@ac) (if (null? uI26d6@ls) uI26d7@ac (uIe42@rev-map-append uI26d5@f (cdr uI26d6@ls) (cons (uI26d5@f (car uI26d6@ls)) uI26d7@ac))))) (set! uI28a9@uIe42@rev-map-append uIe42@rev-map-append) (set! uIe44@build-exports (lambda (uI26db@lex*+loc* uI26dc@init*) (uIada@uIa34@build-sequence '#f (cons (uIadb@uIa36@build-void) (uIe42@rev-map-append (lambda (uI26df@x) (list 'set! (cdr uI26df@x) (car uI26df@x))) uI26db@lex*+loc* uI26dc@init*))))) (set! uI28aa@uIe44@build-exports uIe44@build-exports) (set! uIe46@make-export-subst (lambda (uI26e1@name* uI26e2@id*) (map (lambda (uI26e5@name uI26e6@id) (let ((uI26e9@label (uIb8b@id->label uI26e6@id))) (begin (if (not uI26e9@label) (uIe5c@syntax-violation '#f '"cannot export unbound identifier" uI26e6@id) (void)) (cons uI26e5@name uI26e9@label)))) uI26e1@name* uI26e2@id*))) (set! uI28ab@uIe46@make-export-subst uIe46@make-export-subst) (set! uIe48@make-export-env/macros (lambda (uI26eb@lex* uI26ec@loc* uI26ed@r) (let ((uI26f2@lookup '#f)) (begin (set! uI26f2@lookup (lambda (uI270f@x) (let uI2717@f ((uI2711@x uI270f@x) (uI2712@lex* uI26eb@lex*) (uI2713@loc* uI26ec@loc*)) (if (pair? uI2712@lex*) (if (eq? uI2711@x (car uI2712@lex*)) (car uI2713@loc*) (uI2717@f uI2711@x (cdr uI2712@lex*) (cdr uI2713@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let uI26fb@f ((uI26f3@r uI26ed@r) (uI26f4@env '()) (uI26f5@global* '()) (uI26f6@macro* '())) (if (null? uI26f3@r) (values uI26f4@env uI26f5@global* uI26f6@macro*) (let ((uI26fd@x (car uI26f3@r))) (let ((uI26ff@label (car uI26fd@x)) (uI2700@b (cdr uI26fd@x))) (let ((uI2703@t (uIb91@binding-type uI2700@b))) (if (memv uI2703@t '(lexical)) (let ((uI2705@v (uIb93@binding-value uI2700@b))) (let ((uI2707@loc (uI26f2@lookup (uId06@lexical-var uI2705@v))) (uI2708@type (if (uId08@lexical-mutable? uI2705@v) 'mutable 'global))) (uI26fb@f (cdr uI26f3@r) (cons (cons* uI26ff@label uI2708@type uI2707@loc) uI26f4@env) (cons (cons (uId06@lexical-var uI2705@v) uI2707@loc) uI26f5@global*) uI26f6@macro*))) (if (memv uI2703@t '(local-macro)) (let ((uI270b@loc (gensym))) (uI26fb@f (cdr uI26f3@r) (cons (cons* uI26ff@label 'global-macro uI270b@loc) uI26f4@env) uI26f5@global* (cons (cons uI270b@loc (uIb93@binding-value uI2700@b)) uI26f6@macro*))) (if (memv uI2703@t '(local-macro!)) (let ((uI270d@loc (gensym))) (uI26fb@f (cdr uI26f3@r) (cons (cons* uI26ff@label 'global-macro! uI270d@loc) uI26f4@env) uI26f5@global* (cons (cons uI270d@loc (uIb93@binding-value uI2700@b)) uI26f6@macro*))) (if (memv uI2703@t '($rtd $module)) (uI26fb@f (cdr uI26f3@r) (cons uI26fd@x uI26f4@env) uI26f5@global* uI26f6@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (uIb91@binding-type uI2700@b) (uIb93@binding-value uI2700@b))))))))))))))) (set! uI28ac@uIe48@make-export-env/macros uIe48@make-export-env/macros) (set! uIe4a@generate-temporaries (lambda (uI2719@ls) (let ((uI271b@t uI2719@ls)) (let ((uI271d@ls/false (uId7c@syntax-dispatch uI271b@t 'each-any))) (if uI271d@ls/false (apply (lambda (uI271f@ls) (map (lambda (uI2721@x) (make-simple-struct 'stx '5 (list (let ((uI2723@x (uIe62@syntax->datum uI2721@x))) (if (or (symbol? uI2723@x) (string? uI2723@x)) (gensym uI2723@x) (gensym 't))) uIaf9@top-mark* '() '()))) uI271f@ls)) uI271d@ls/false) (let ((uI2725@t uI271b@t)) (let ((uI2727@ls/false (uId7c@syntax-dispatch uI2725@t '_))) (if uI2727@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) uI2727@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI2725@t))))))))) (set! uI28ad@uIe4a@generate-temporaries uIe4a@generate-temporaries) (set! uIe4c@free-identifier=? (lambda (uI2729@x uI272a@y) (if (uIb75@id? uI2729@x) (if (uIb75@id? uI272a@y) (uIb7b@free-id=? uI2729@x uI272a@y) (assertion-violation 'free-identifier=? '"not an identifier" uI272a@y)) (assertion-violation 'free-identifier=? '"not an identifier" uI2729@x)))) (set! uI28ae@uIe4c@free-identifier=? uIe4c@free-identifier=?) (set! uIe4e@bound-identifier=? (lambda (uI272d@x uI272e@y) (if (uIb75@id? uI272d@x) (if (uIb75@id? uI272e@y) (uIb79@bound-id=? uI272d@x uI272e@y) (assertion-violation 'bound-identifier=? '"not an identifier" uI272e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" uI272d@x)))) (set! uI28af@uIe4e@bound-identifier=? uIe4e@bound-identifier=?) (set! uIe50@make-source-condition (lambda (uI2731@x) (let ((uI273b@uI2736 '#f) (uI273d@uI2738 '#f) (uI273f@uI2737 '#f) (uI2742@uI2735 '#f) (uI2744@make-source-condition '#f) (uI2746@uI2733 '#f) (uI2748@uI2734 '#f) (uI274a@source-condition? '#f) (uI274c@source-filename '#f) (uI274e@source-character '#f)) (begin (set! uI273b@uI2736 (make-record-type-descriptor '&source-information uI2b91@uI28d8@&condition-rtd 'uI2739 '#f '#f '#((immutable file-name) (immutable character)))) (set! uI273d@uI2738 '#f) (set! uI273f@uI2737 (make-record-constructor-descriptor uI273b@uI2736 uI2b92@uI28da@&condition-rcd uI273d@uI2738)) (set! uI2742@uI2735 (record-predicate uI273b@uI2736)) (set! uI2744@make-source-condition (record-constructor uI273f@uI2737)) (set! uI2746@uI2733 (record-accessor uI273b@uI2736 '0)) (set! uI2748@uI2734 (record-accessor uI273b@uI2736 '1)) (set! uI274a@source-condition? (condition-predicate uI273b@uI2736)) (set! uI274c@source-filename (condition-accessor uI273b@uI2736 uI2746@uI2733)) (set! uI274e@source-character (condition-accessor uI273b@uI2736 uI2748@uI2734)) (if (pair? uI2731@x) (uI2744@make-source-condition (car uI2731@x) (cdr uI2731@x)) (condition)))))) (set! uI28b0@uIe50@make-source-condition uIe50@make-source-condition) (set! uIe52@extract-position-condition (lambda (uI274f@x) (uIe50@make-source-condition (uIe54@expression-position uI274f@x)))) (set! uI28b1@uIe52@extract-position-condition uIe52@extract-position-condition) (set! uIe54@expression-position (lambda (uI2751@x) (and (uIb41@stx? uI2751@x) (let ((uI2753@x (uIb43@stx-expr uI2751@x))) (and (uI6b4@uI588@annotation? uI2753@x) (uI6b5@uI58a@annotation-source uI2753@x)))))) (set! uI28b2@uIe54@expression-position uIe54@expression-position) (set! uIe56@assertion-error (lambda (uI2755@expr uI2756@pos) (raise (condition (uI2bc1@uI299c@make-assertion-violation) (uI2bd3@uI29ce@make-who-condition 'assert) (uI2b97@uI292f@make-message-condition '"assertion failed") (uI2bc9@uI29b3@make-irritants-condition (list uI2755@expr)) (uIe50@make-source-condition uI2756@pos))))) (set! uI28b3@uIe56@assertion-error uIe56@assertion-error) (set! uIe58@syntax-error (lambda (uI2759@x . uI275b@args) (begin (if (not (for-all string? uI275b@args)) (assertion-violation 'syntax-error '"invalid argument" uI275b@args) (void)) (raise (condition (uI2b97@uI292f@make-message-condition (if (null? uI275b@args) '"invalid syntax" (apply string-append uI275b@args))) (uI2bf5@uI2a2a@make-syntax-violation (uIe62@syntax->datum uI2759@x) '#f) (uIe52@extract-position-condition uI2759@x)))))) (set! uI28b4@uIe58@syntax-error uIe58@syntax-error) (set! uIe5a@syntax-violation* (lambda (uI275d@who uI275e@msg uI275f@form uI2760@condition-object) (begin (if (not (string? uI275e@msg)) (assertion-violation 'syntax-violation '"message is not a string" uI275e@msg) (void)) (let ((uI2765@who (if (or (string? uI275d@who) (symbol? uI275d@who)) uI275d@who (if (not uI275d@who) (let ((uI2767@t uI275f@form)) (let ((uI2769@ls/false (uId7c@syntax-dispatch uI2767@t 'any))) (if (and uI2769@ls/false (apply (lambda (uI276b@id) (uIb75@id? uI276b@id)) uI2769@ls/false)) (apply (lambda (uI276d@id) (uIe62@syntax->datum uI276d@id)) uI2769@ls/false) (let ((uI276f@t uI2767@t)) (let ((uI2771@ls/false (uId7c@syntax-dispatch uI276f@t '(any . any)))) (if (and uI2771@ls/false (apply (lambda (uI2773@id uI2774@rest) (uIb75@id? uI2773@id)) uI2771@ls/false)) (apply (lambda (uI2777@id uI2778@rest) (uIe62@syntax->datum uI2777@id)) uI2771@ls/false) (let ((uI277b@t uI276f@t)) (let ((uI277d@ls/false (uId7c@syntax-dispatch uI277b@t '_))) (if uI277d@ls/false (apply (lambda () '#f) uI277d@ls/false) (uIe5c@syntax-violation '#f '"invalid syntax" uI277b@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" uI275d@who))))) (raise (condition (if uI2765@who (uI2bd3@uI29ce@make-who-condition uI2765@who) (condition)) (uI2b97@uI292f@make-message-condition uI275e@msg) uI2760@condition-object (uIe52@extract-position-condition uI275f@form))))))) (set! uI28b5@uIe5a@syntax-violation* uIe5a@syntax-violation*) (set! uIe5c@syntax-violation (lambda uI278d (let ((uI278e (length uI278d))) (if (= uI278e '3) (apply (lambda (uI277f@who uI2780@msg uI2781@form) (uIe5c@syntax-violation uI277f@who uI2780@msg uI2781@form '#f)) uI278d) (if (= uI278e '4) (apply (lambda (uI2785@who uI2786@msg uI2787@form uI2788@subform) (uIe5a@syntax-violation* uI2785@who uI2786@msg uI2787@form (uI2bf5@uI2a2a@make-syntax-violation (uIe62@syntax->datum uI2787@form) (uIe62@syntax->datum uI2788@subform)))) uI278d) (error 'apply '"invalid arg count")))))) (set! uI28b6@uIe5c@syntax-violation uIe5c@syntax-violation) (set! uIe5e@identifier? (lambda (uI278f@x) (uIb75@id? uI278f@x))) (set! uI28b7@uIe5e@identifier? uIe5e@identifier?) (set! uIe60@datum->syntax (lambda (uI2791@id uI2792@datum) (if (uIb75@id? uI2791@id) (uIb55@datum->stx uI2791@id uI2792@datum) (assertion-violation 'datum->syntax '"not an identifier" uI2791@id)))) (set! uI28b8@uIe60@datum->syntax uIe60@datum->syntax) (set! uIe62@syntax->datum (lambda (uI2795@x) (uIb89@stx->datum uI2795@x))) (set! uI28b9@uIe62@syntax->datum uIe62@syntax->datum) (set! uIe64@ungensym-all (lambda (uI2797@code) (if (pair? uI2797@code) (cons (uIe64@ungensym-all (car uI2797@code)) (uIe64@ungensym-all (cdr uI2797@code))) (if (symbol? uI2797@code) (ungensym uI2797@code) uI2797@code)))) (set! uI28ba@uIe64@ungensym-all uIe64@ungensym-all) (set! uIe66@compile-r6rs-top-level (lambda (uI2799@x*) (call-with-values (lambda () (uIdf4@top-level-expander uI2799@x*)) (lambda (uI279f@uI279c uI27a0@uI279e) (let ((uI27a3@invoke-code uI27a0@uI279e) (uI27a4@lib* uI279f@uI279c)) (lambda () (begin (for-each uI98b@uI7d9@invoke-library uI27a4@lib*) (let ((uI27a7@expanded (uI715@uI6cd@expanded->core uI27a3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (uIe64@ungensym-all uI27a7@expanded)) (void)) (eval-core uI27a7@expanded)))))))))) (set! uI28bb@uIe66@compile-r6rs-top-level uIe66@compile-r6rs-top-level) (set! uIe68@pre-compile-r6rs-top-level (lambda (uI27a9@x*) (call-with-values (lambda () (uIdf4@top-level-expander uI27a9@x*)) (lambda (uI27af@uI27ac uI27b0@uI27ae) (let ((uI27b3@invoke-code uI27b0@uI27ae) (uI27b4@lib* uI27af@uI27ac)) (begin (for-each uI98b@uI7d9@invoke-library uI27b4@lib*) (uI6bd@uI59a@compile-core (uI715@uI6cd@expanded->core uI27b3@invoke-code)))))))) (set! uI28bc@uIe68@pre-compile-r6rs-top-level uIe68@pre-compile-r6rs-top-level) (set! uIe6a@interaction-environment (let ((uI27b7@the-env '#f)) (lambda () (or uI27b7@the-env (let ((uI27b9@lib (uI984@uI7cb@find-library-by-name '(mosh interaction))) (uI27ba@rib (uIb29@make-empty-rib))) (begin (let ((uI27bd@subst (uI966@uI78f@library-subst uI27b9@lib))) (begin (uIb15@set-rib-sym*! uI27ba@rib (map car uI27bd@subst)) (uIb19@set-rib-mark**! uI27ba@rib (map (lambda (uI27bf@x) uIaf9@top-mark*) uI27bd@subst)) (uIb1d@set-rib-label*! uI27ba@rib (map cdr uI27bd@subst)))) (let ((uI27c1@env (make-simple-struct 'interaction-env '4 (list uI27ba@rib '() '())))) (begin (set! uI27b7@the-env uI27c1@env) uI27c1@env)))))))) (set! uI28bd@uIe6a@interaction-environment uIe6a@interaction-environment) (set! uIe6c@top-level-context (uI6bf@uI59e@make-parameter '#f)) (set! uI28be@uIe6c@top-level-context uIe6c@top-level-context) (uI981@uI7c5@current-library-expander uIe3e@library-expander))
(begin (set! uI28cd@uI28c8 (unspecified)) (set! uI28cf@uI28ca (unspecified)) (set! uI28d1@uI28c9 (unspecified)) (set! uI28d4@&condition? (unspecified)) (set! uI28d6@make-&condition (unspecified)) (set! uI28d8@&condition-rtd (unspecified)) (set! uI28da@&condition-rcd (unspecified)) (set! uI2926@uI2921 (unspecified)) (set! uI2928@uI2923 (unspecified)) (set! uI292a@uI2922 (unspecified)) (set! uI292d@p? (unspecified)) (set! uI292f@make-message-condition (unspecified)) (set! uI2931@uI2920 (unspecified)) (set! uI2933@message-condition? (unspecified)) (set! uI2935@condition-message (unspecified)) (set! uI2937@&message-rtd (unspecified)) (set! uI2939@&message-rcd (unspecified)) (set! uI293f@uI293a (unspecified)) (set! uI2941@uI293c (unspecified)) (set! uI2943@uI293b (unspecified)) (set! uI2946@p? (unspecified)) (set! uI2948@make-warning (unspecified)) (set! uI294a@warning? (unspecified)) (set! uI294c@&warning-rtd (unspecified)) (set! uI294e@&warning-rcd (unspecified)) (set! uI2954@uI294f (unspecified)) (set! uI2956@uI2951 (unspecified)) (set! uI2958@uI2950 (unspecified)) (set! uI295b@p? (unspecified)) (set! uI295d@make-serious-condition (unspecified)) (set! uI295f@serious-condition? (unspecified)) (set! uI2961@&serious-rtd (unspecified)) (set! uI2963@&serious-rcd (unspecified)) (set! uI2969@uI2964 (unspecified)) (set! uI296b@uI2966 (unspecified)) (set! uI296d@uI2965 (unspecified)) (set! uI2970@p? (unspecified)) (set! uI2972@make-error (unspecified)) (set! uI2974@error? (unspecified)) (set! uI2976@&error-rtd (unspecified)) (set! uI2978@&error-rcd (unspecified)) (set! uI297e@uI2979 (unspecified)) (set! uI2980@uI297b (unspecified)) (set! uI2982@uI297a (unspecified)) (set! uI2985@p? (unspecified)) (set! uI2987@make-violation (unspecified)) (set! uI2989@violation? (unspecified)) (set! uI298b@&violation-rtd (unspecified)) (set! uI298d@&violation-rcd (unspecified)) (set! uI2993@uI298e (unspecified)) (set! uI2995@uI2990 (unspecified)) (set! uI2997@uI298f (unspecified)) (set! uI299a@p? (unspecified)) (set! uI299c@make-assertion-violation (unspecified)) (set! uI299e@assertion-violation? (unspecified)) (set! uI29a0@&assertion-rtd (unspecified)) (set! uI29a2@&assertion-rcd (unspecified)) (set! uI29aa@uI29a5 (unspecified)) (set! uI29ac@uI29a7 (unspecified)) (set! uI29ae@uI29a6 (unspecified)) (set! uI29b1@p? (unspecified)) (set! uI29b3@make-irritants-condition (unspecified)) (set! uI29b5@uI29a4 (unspecified)) (set! uI29b7@irritants-condition? (unspecified)) (set! uI29b9@condition-irritants (unspecified)) (set! uI29bb@&irritants-rtd (unspecified)) (set! uI29bd@&irritants-rcd (unspecified)) (set! uI29c5@uI29c0 (unspecified)) (set! uI29c7@uI29c2 (unspecified)) (set! uI29c9@uI29c1 (unspecified)) (set! uI29cc@p? (unspecified)) (set! uI29ce@make-who-condition (unspecified)) (set! uI29d0@uI29bf (unspecified)) (set! uI29d2@who-condition? (unspecified)) (set! uI29d4@condition-who (unspecified)) (set! uI29d6@&who-rtd (unspecified)) (set! uI29d8@&who-rcd (unspecified)) (set! uI29de@uI29d9 (unspecified)) (set! uI29e0@uI29db (unspecified)) (set! uI29e2@uI29da (unspecified)) (set! uI29e5@p? (unspecified)) (set! uI29e7@make-non-continuable-violation (unspecified)) (set! uI29e9@non-continuable-violation? (unspecified)) (set! uI29eb@&non-continuable-rtd (unspecified)) (set! uI29ed@&non-continuable-rcd (unspecified)) (set! uI29f3@uI29ee (unspecified)) (set! uI29f5@uI29f0 (unspecified)) (set! uI29f7@uI29ef (unspecified)) (set! uI29fa@p? (unspecified)) (set! uI29fc@make-implementation-restriction-violation (unspecified)) (set! uI29fe@implementation-restriction-violation? (unspecified)) (set! uI2a00@&implementation-restriction-rtd (unspecified)) (set! uI2a02@&implementation-restriction-rcd (unspecified)) (set! uI2a08@uI2a03 (unspecified)) (set! uI2a0a@uI2a05 (unspecified)) (set! uI2a0c@uI2a04 (unspecified)) (set! uI2a0f@p? (unspecified)) (set! uI2a11@make-lexical-violation (unspecified)) (set! uI2a13@lexical-violation? (unspecified)) (set! uI2a15@&lexical-rtd (unspecified)) (set! uI2a17@&lexical-rcd (unspecified)) (set! uI2a21@uI2a1c (unspecified)) (set! uI2a23@uI2a1e (unspecified)) (set! uI2a25@uI2a1d (unspecified)) (set! uI2a28@p? (unspecified)) (set! uI2a2a@make-syntax-violation (unspecified)) (set! uI2a2c@uI2a19 (unspecified)) (set! uI2a2e@uI2a1b (unspecified)) (set! uI2a30@syntax-violation? (unspecified)) (set! uI2a32@syntax-violation-form (unspecified)) (set! uI2a34@syntax-violation-subform (unspecified)) (set! uI2a36@&syntax-rtd (unspecified)) (set! uI2a38@&syntax-rcd (unspecified)) (set! uI2a3e@uI2a39 (unspecified)) (set! uI2a40@uI2a3b (unspecified)) (set! uI2a42@uI2a3a (unspecified)) (set! uI2a45@p? (unspecified)) (set! uI2a47@make-undefined-violation (unspecified)) (set! uI2a49@undefined-violation? (unspecified)) (set! uI2a4b@&undefined-rtd (unspecified)) (set! uI2a4d@&undefined-rcd (unspecified)) (set! uI2a53@uI2a4e (unspecified)) (set! uI2a55@uI2a50 (unspecified)) (set! uI2a57@uI2a4f (unspecified)) (set! uI2a5a@p? (unspecified)) (set! uI2a5c@make-i/o-error (unspecified)) (set! uI2a5e@i/o-error? (unspecified)) (set! uI2a60@&i/o-rtd (unspecified)) (set! uI2a62@&i/o-rcd (unspecified)) (set! uI2a68@uI2a63 (unspecified)) (set! uI2a6a@uI2a65 (unspecified)) (set! uI2a6c@uI2a64 (unspecified)) (set! uI2a6f@p? (unspecified)) (set! uI2a71@make-i/o-read-error (unspecified)) (set! uI2a73@i/o-read-error? (unspecified)) (set! uI2a75@&i/o-read-rtd (unspecified)) (set! uI2a77@&i/o-read-rcd (unspecified)) (set! uI2a7d@uI2a78 (unspecified)) (set! uI2a7f@uI2a7a (unspecified)) (set! uI2a81@uI2a79 (unspecified)) (set! uI2a84@p? (unspecified)) (set! uI2a86@make-i/o-write-error (unspecified)) (set! uI2a88@i/o-write-error? (unspecified)) (set! uI2a8a@&i/o-write-rtd (unspecified)) (set! uI2a8c@&i/o-write-rcd (unspecified)) (set! uI2a94@uI2a8f (unspecified)) (set! uI2a96@uI2a91 (unspecified)) (set! uI2a98@uI2a90 (unspecified)) (set! uI2a9b@p? (unspecified)) (set! uI2a9d@make-i/o-invalid-position-error (unspecified)) (set! uI2a9f@uI2a8e (unspecified)) (set! uI2aa1@i/o-invalid-position-error? (unspecified)) (set! uI2aa3@i/o-error-position (unspecified)) (set! uI2aa5@&i/o-invalid-position-rtd (unspecified)) (set! uI2aa7@&i/o-invalid-position-rcd (unspecified)) (set! uI2aaf@uI2aaa (unspecified)) (set! uI2ab1@uI2aac (unspecified)) (set! uI2ab3@uI2aab (unspecified)) (set! uI2ab6@p? (unspecified)) (set! uI2ab8@make-i/o-filename-error (unspecified)) (set! uI2aba@uI2aa9 (unspecified)) (set! uI2abc@i/o-filename-error? (unspecified)) (set! uI2abe@i/o-error-filename (unspecified)) (set! uI2ac0@&i/o-filename-rtd (unspecified)) (set! uI2ac2@&i/o-filename-rcd (unspecified)) (set! uI2ac8@uI2ac3 (unspecified)) (set! uI2aca@uI2ac5 (unspecified)) (set! uI2acc@uI2ac4 (unspecified)) (set! uI2acf@p? (unspecified)) (set! uI2ad1@make-i/o-file-protection-error (unspecified)) (set! uI2ad3@i/o-file-protection-error? (unspecified)) (set! uI2ad5@&i/o-file-protection-rtd (unspecified)) (set! uI2ad7@&i/o-file-protection-rcd (unspecified)) (set! uI2add@uI2ad8 (unspecified)) (set! uI2adf@uI2ada (unspecified)) (set! uI2ae1@uI2ad9 (unspecified)) (set! uI2ae4@p? (unspecified)) (set! uI2ae6@make-i/o-file-is-read-only-error (unspecified)) (set! uI2ae8@i/o-file-is-read-only-error? (unspecified)) (set! uI2aea@&i/o-file-is-read-only-rtd (unspecified)) (set! uI2aec@&i/o-file-is-read-only-rcd (unspecified)) (set! uI2af2@uI2aed (unspecified)) (set! uI2af4@uI2aef (unspecified)) (set! uI2af6@uI2aee (unspecified)) (set! uI2af9@p? (unspecified)) (set! uI2afb@make-i/o-file-already-exists-error (unspecified)) (set! uI2afd@i/o-file-already-exists-error? (unspecified)) (set! uI2aff@&i/o-file-already-exists-rtd (unspecified)) (set! uI2b01@&i/o-file-already-exists-rcd (unspecified)) (set! uI2b07@uI2b02 (unspecified)) (set! uI2b09@uI2b04 (unspecified)) (set! uI2b0b@uI2b03 (unspecified)) (set! uI2b0e@p? (unspecified)) (set! uI2b10@make-i/o-file-does-not-exist-error (unspecified)) (set! uI2b12@i/o-file-does-not-exist-error? (unspecified)) (set! uI2b14@&i/o-file-does-not-exist-rtd (unspecified)) (set! uI2b16@&i/o-file-does-not-exist-rcd (unspecified)) (set! uI2b1e@uI2b19 (unspecified)) (set! uI2b20@uI2b1b (unspecified)) (set! uI2b22@uI2b1a (unspecified)) (set! uI2b25@p? (unspecified)) (set! uI2b27@make-i/o-port-error (unspecified)) (set! uI2b29@uI2b18 (unspecified)) (set! uI2b2b@i/o-port-error? (unspecified)) (set! uI2b2d@i/o-error-port (unspecified)) (set! uI2b2f@&i/o-port-rtd (unspecified)) (set! uI2b31@&i/o-port-rcd (unspecified)) (set! uI2b37@uI2b32 (unspecified)) (set! uI2b39@uI2b34 (unspecified)) (set! uI2b3b@uI2b33 (unspecified)) (set! uI2b3e@p? (unspecified)) (set! uI2b40@make-i/o-decoding-error (unspecified)) (set! uI2b42@i/o-decoding-error? (unspecified)) (set! uI2b44@&i/o-decoding-rtd (unspecified)) (set! uI2b46@&i/o-decoding-rcd (unspecified)) (set! uI2b4e@uI2b49 (unspecified)) (set! uI2b50@uI2b4b (unspecified)) (set! uI2b52@uI2b4a (unspecified)) (set! uI2b55@p? (unspecified)) (set! uI2b57@make-i/o-encoding-error (unspecified)) (set! uI2b59@uI2b48 (unspecified)) (set! uI2b5b@i/o-encoding-error? (unspecified)) (set! uI2b5d@i/o-encoding-error-char (unspecified)) (set! uI2b5f@&i/o-encoding-rtd (unspecified)) (set! uI2b61@&i/o-encoding-rcd (unspecified)) (set! uI2b67@uI2b62 (unspecified)) (set! uI2b69@uI2b64 (unspecified)) (set! uI2b6b@uI2b63 (unspecified)) (set! uI2b6e@p? (unspecified)) (set! uI2b70@make-no-infinities-violation (unspecified)) (set! uI2b72@no-infinities-violation? (unspecified)) (set! uI2b74@&no-infinities-rtd (unspecified)) (set! uI2b76@&no-infinities-rcd (unspecified)) (set! uI2b7c@uI2b77 (unspecified)) (set! uI2b7e@uI2b79 (unspecified)) (set! uI2b80@uI2b78 (unspecified)) (set! uI2b83@p? (unspecified)) (set! uI2b85@make-no-nans-violation (unspecified)) (set! uI2b87@no-nans-violation? (unspecified)) (set! uI2b89@&no-nans-rtd (unspecified)) (set! uI2b8b@&no-nans-rcd (unspecified)) (set! uI28cd@uI28c8 (make-record-type-descriptor '&condition '#f 'uI28cb '#f '#f '#())) (set! uI2b8c@uI28cd@uI28c8 uI28cd@uI28c8) (set! uI28cf@uI28ca '#f) (set! uI2b8d@uI28cf@uI28ca uI28cf@uI28ca) (set! uI28d1@uI28c9 (make-record-constructor-descriptor uI28cd@uI28c8 '#f uI28cf@uI28ca)) (set! uI2b8e@uI28d1@uI28c9 uI28d1@uI28c9) (set! uI28d4@&condition? (record-predicate uI28cd@uI28c8)) (set! uI2b8f@uI28d4@&condition? uI28d4@&condition?) (set! uI28d6@make-&condition (record-constructor uI28d1@uI28c9)) (set! uI2b90@uI28d6@make-&condition uI28d6@make-&condition) (set! uI28d8@&condition-rtd uI28cd@uI28c8) (set! uI2b91@uI28d8@&condition-rtd uI28d8@&condition-rtd) (set! uI28da@&condition-rcd uI28d1@uI28c9) (set! uI2b92@uI28da@&condition-rcd uI28da@&condition-rcd) (set! uI2926@uI2921 (make-record-type-descriptor '&message uI28cd@uI28c8 'uI2924 '#f '#f '#((immutable message)))) (set! uI2b93@uI2926@uI2921 uI2926@uI2921) (set! uI2928@uI2923 '#f) (set! uI2b94@uI2928@uI2923 uI2928@uI2923) (set! uI292a@uI2922 (make-record-constructor-descriptor uI2926@uI2921 uI28d1@uI28c9 uI2928@uI2923)) (set! uI2b95@uI292a@uI2922 uI292a@uI2922) (set! uI292d@p? (record-predicate uI2926@uI2921)) (set! uI2b96@uI292d@p? uI292d@p?) (set! uI292f@make-message-condition (record-constructor uI292a@uI2922)) (set! uI2b97@uI292f@make-message-condition uI292f@make-message-condition) (set! uI2931@uI2920 (record-accessor uI2926@uI2921 '0)) (set! uI2b98@uI2931@uI2920 uI2931@uI2920) (set! uI2933@message-condition? (condition-predicate uI2926@uI2921)) (set! uI2b99@uI2933@message-condition? uI2933@message-condition?) (set! uI2935@condition-message (condition-accessor uI2926@uI2921 uI2931@uI2920)) (set! uI2b9a@uI2935@condition-message uI2935@condition-message) (set! uI2937@&message-rtd uI2926@uI2921) (set! uI2b9b@uI2937@&message-rtd uI2937@&message-rtd) (set! uI2939@&message-rcd uI292a@uI2922) (set! uI2b9c@uI2939@&message-rcd uI2939@&message-rcd) (set! uI293f@uI293a (make-record-type-descriptor '&warning uI28cd@uI28c8 'uI293d '#f '#f '#())) (set! uI2b9d@uI293f@uI293a uI293f@uI293a) (set! uI2941@uI293c '#f) (set! uI2b9e@uI2941@uI293c uI2941@uI293c) (set! uI2943@uI293b (make-record-constructor-descriptor uI293f@uI293a uI28d1@uI28c9 uI2941@uI293c)) (set! uI2b9f@uI2943@uI293b uI2943@uI293b) (set! uI2946@p? (record-predicate uI293f@uI293a)) (set! uI2ba0@uI2946@p? uI2946@p?) (set! uI2948@make-warning (record-constructor uI2943@uI293b)) (set! uI2ba1@uI2948@make-warning uI2948@make-warning) (set! uI294a@warning? (condition-predicate uI293f@uI293a)) (set! uI2ba2@uI294a@warning? uI294a@warning?) (set! uI294c@&warning-rtd uI293f@uI293a) (set! uI2ba3@uI294c@&warning-rtd uI294c@&warning-rtd) (set! uI294e@&warning-rcd uI2943@uI293b) (set! uI2ba4@uI294e@&warning-rcd uI294e@&warning-rcd) (set! uI2954@uI294f (make-record-type-descriptor '&serious uI28cd@uI28c8 'uI2952 '#f '#f '#())) (set! uI2ba5@uI2954@uI294f uI2954@uI294f) (set! uI2956@uI2951 '#f) (set! uI2ba6@uI2956@uI2951 uI2956@uI2951) (set! uI2958@uI2950 (make-record-constructor-descriptor uI2954@uI294f uI28d1@uI28c9 uI2956@uI2951)) (set! uI2ba7@uI2958@uI2950 uI2958@uI2950) (set! uI295b@p? (record-predicate uI2954@uI294f)) (set! uI2ba8@uI295b@p? uI295b@p?) (set! uI295d@make-serious-condition (record-constructor uI2958@uI2950)) (set! uI2ba9@uI295d@make-serious-condition uI295d@make-serious-condition) (set! uI295f@serious-condition? (condition-predicate uI2954@uI294f)) (set! uI2baa@uI295f@serious-condition? uI295f@serious-condition?) (set! uI2961@&serious-rtd uI2954@uI294f) (set! uI2bab@uI2961@&serious-rtd uI2961@&serious-rtd) (set! uI2963@&serious-rcd uI2958@uI2950) (set! uI2bac@uI2963@&serious-rcd uI2963@&serious-rcd) (set! uI2969@uI2964 (make-record-type-descriptor '&error uI2954@uI294f 'uI2967 '#f '#f '#())) (set! uI2bad@uI2969@uI2964 uI2969@uI2964) (set! uI296b@uI2966 '#f) (set! uI2bae@uI296b@uI2966 uI296b@uI2966) (set! uI296d@uI2965 (make-record-constructor-descriptor uI2969@uI2964 uI2958@uI2950 uI296b@uI2966)) (set! uI2baf@uI296d@uI2965 uI296d@uI2965) (set! uI2970@p? (record-predicate uI2969@uI2964)) (set! uI2bb0@uI2970@p? uI2970@p?) (set! uI2972@make-error (record-constructor uI296d@uI2965)) (set! uI2bb1@uI2972@make-error uI2972@make-error) (set! uI2974@error? (condition-predicate uI2969@uI2964)) (set! uI2bb2@uI2974@error? uI2974@error?) (set! uI2976@&error-rtd uI2969@uI2964) (set! uI2bb3@uI2976@&error-rtd uI2976@&error-rtd) (set! uI2978@&error-rcd uI296d@uI2965) (set! uI2bb4@uI2978@&error-rcd uI2978@&error-rcd) (set! uI297e@uI2979 (make-record-type-descriptor '&violation uI2954@uI294f 'uI297c '#f '#f '#())) (set! uI2bb5@uI297e@uI2979 uI297e@uI2979) (set! uI2980@uI297b '#f) (set! uI2bb6@uI2980@uI297b uI2980@uI297b) (set! uI2982@uI297a (make-record-constructor-descriptor uI297e@uI2979 uI2958@uI2950 uI2980@uI297b)) (set! uI2bb7@uI2982@uI297a uI2982@uI297a) (set! uI2985@p? (record-predicate uI297e@uI2979)) (set! uI2bb8@uI2985@p? uI2985@p?) (set! uI2987@make-violation (record-constructor uI2982@uI297a)) (set! uI2bb9@uI2987@make-violation uI2987@make-violation) (set! uI2989@violation? (condition-predicate uI297e@uI2979)) (set! uI2bba@uI2989@violation? uI2989@violation?) (set! uI298b@&violation-rtd uI297e@uI2979) (set! uI2bbb@uI298b@&violation-rtd uI298b@&violation-rtd) (set! uI298d@&violation-rcd uI2982@uI297a) (set! uI2bbc@uI298d@&violation-rcd uI298d@&violation-rcd) (set! uI2993@uI298e (make-record-type-descriptor '&assertion uI297e@uI2979 'uI2991 '#f '#f '#())) (set! uI2bbd@uI2993@uI298e uI2993@uI298e) (set! uI2995@uI2990 '#f) (set! uI2bbe@uI2995@uI2990 uI2995@uI2990) (set! uI2997@uI298f (make-record-constructor-descriptor uI2993@uI298e uI2982@uI297a uI2995@uI2990)) (set! uI2bbf@uI2997@uI298f uI2997@uI298f) (set! uI299a@p? (record-predicate uI2993@uI298e)) (set! uI2bc0@uI299a@p? uI299a@p?) (set! uI299c@make-assertion-violation (record-constructor uI2997@uI298f)) (set! uI2bc1@uI299c@make-assertion-violation uI299c@make-assertion-violation) (set! uI299e@assertion-violation? (condition-predicate uI2993@uI298e)) (set! uI2bc2@uI299e@assertion-violation? uI299e@assertion-violation?) (set! uI29a0@&assertion-rtd uI2993@uI298e) (set! uI2bc3@uI29a0@&assertion-rtd uI29a0@&assertion-rtd) (set! uI29a2@&assertion-rcd uI2997@uI298f) (set! uI2bc4@uI29a2@&assertion-rcd uI29a2@&assertion-rcd) (set! uI29aa@uI29a5 (make-record-type-descriptor '&irritants uI28cd@uI28c8 'uI29a8 '#f '#f '#((immutable irritants)))) (set! uI2bc5@uI29aa@uI29a5 uI29aa@uI29a5) (set! uI29ac@uI29a7 '#f) (set! uI2bc6@uI29ac@uI29a7 uI29ac@uI29a7) (set! uI29ae@uI29a6 (make-record-constructor-descriptor uI29aa@uI29a5 uI28d1@uI28c9 uI29ac@uI29a7)) (set! uI2bc7@uI29ae@uI29a6 uI29ae@uI29a6) (set! uI29b1@p? (record-predicate uI29aa@uI29a5)) (set! uI2bc8@uI29b1@p? uI29b1@p?) (set! uI29b3@make-irritants-condition (record-constructor uI29ae@uI29a6)) (set! uI2bc9@uI29b3@make-irritants-condition uI29b3@make-irritants-condition) (set! uI29b5@uI29a4 (record-accessor uI29aa@uI29a5 '0)) (set! uI2bca@uI29b5@uI29a4 uI29b5@uI29a4) (set! uI29b7@irritants-condition? (condition-predicate uI29aa@uI29a5)) (set! uI2bcb@uI29b7@irritants-condition? uI29b7@irritants-condition?) (set! uI29b9@condition-irritants (condition-accessor uI29aa@uI29a5 uI29b5@uI29a4)) (set! uI2bcc@uI29b9@condition-irritants uI29b9@condition-irritants) (set! uI29bb@&irritants-rtd uI29aa@uI29a5) (set! uI2bcd@uI29bb@&irritants-rtd uI29bb@&irritants-rtd) (set! uI29bd@&irritants-rcd uI29ae@uI29a6) (set! uI2bce@uI29bd@&irritants-rcd uI29bd@&irritants-rcd) (set! uI29c5@uI29c0 (make-record-type-descriptor '&who uI28cd@uI28c8 'uI29c3 '#f '#f '#((immutable who)))) (set! uI2bcf@uI29c5@uI29c0 uI29c5@uI29c0) (set! uI29c7@uI29c2 '#f) (set! uI2bd0@uI29c7@uI29c2 uI29c7@uI29c2) (set! uI29c9@uI29c1 (make-record-constructor-descriptor uI29c5@uI29c0 uI28d1@uI28c9 uI29c7@uI29c2)) (set! uI2bd1@uI29c9@uI29c1 uI29c9@uI29c1) (set! uI29cc@p? (record-predicate uI29c5@uI29c0)) (set! uI2bd2@uI29cc@p? uI29cc@p?) (set! uI29ce@make-who-condition (record-constructor uI29c9@uI29c1)) (set! uI2bd3@uI29ce@make-who-condition uI29ce@make-who-condition) (set! uI29d0@uI29bf (record-accessor uI29c5@uI29c0 '0)) (set! uI2bd4@uI29d0@uI29bf uI29d0@uI29bf) (set! uI29d2@who-condition? (condition-predicate uI29c5@uI29c0)) (set! uI2bd5@uI29d2@who-condition? uI29d2@who-condition?) (set! uI29d4@condition-who (condition-accessor uI29c5@uI29c0 uI29d0@uI29bf)) (set! uI2bd6@uI29d4@condition-who uI29d4@condition-who) (set! uI29d6@&who-rtd uI29c5@uI29c0) (set! uI2bd7@uI29d6@&who-rtd uI29d6@&who-rtd) (set! uI29d8@&who-rcd uI29c9@uI29c1) (set! uI2bd8@uI29d8@&who-rcd uI29d8@&who-rcd) (set! uI29de@uI29d9 (make-record-type-descriptor '&non-continuable uI297e@uI2979 'uI29dc '#f '#f '#())) (set! uI2bd9@uI29de@uI29d9 uI29de@uI29d9) (set! uI29e0@uI29db '#f) (set! uI2bda@uI29e0@uI29db uI29e0@uI29db) (set! uI29e2@uI29da (make-record-constructor-descriptor uI29de@uI29d9 uI2982@uI297a uI29e0@uI29db)) (set! uI2bdb@uI29e2@uI29da uI29e2@uI29da) (set! uI29e5@p? (record-predicate uI29de@uI29d9)) (set! uI2bdc@uI29e5@p? uI29e5@p?) (set! uI29e7@make-non-continuable-violation (record-constructor uI29e2@uI29da)) (set! uI2bdd@uI29e7@make-non-continuable-violation uI29e7@make-non-continuable-violation) (set! uI29e9@non-continuable-violation? (condition-predicate uI29de@uI29d9)) (set! uI2bde@uI29e9@non-continuable-violation? uI29e9@non-continuable-violation?) (set! uI29eb@&non-continuable-rtd uI29de@uI29d9) (set! uI2bdf@uI29eb@&non-continuable-rtd uI29eb@&non-continuable-rtd) (set! uI29ed@&non-continuable-rcd uI29e2@uI29da) (set! uI2be0@uI29ed@&non-continuable-rcd uI29ed@&non-continuable-rcd) (set! uI29f3@uI29ee (make-record-type-descriptor '&implementation-restriction uI297e@uI2979 'uI29f1 '#f '#f '#())) (set! uI2be1@uI29f3@uI29ee uI29f3@uI29ee) (set! uI29f5@uI29f0 '#f) (set! uI2be2@uI29f5@uI29f0 uI29f5@uI29f0) (set! uI29f7@uI29ef (make-record-constructor-descriptor uI29f3@uI29ee uI2982@uI297a uI29f5@uI29f0)) (set! uI2be3@uI29f7@uI29ef uI29f7@uI29ef) (set! uI29fa@p? (record-predicate uI29f3@uI29ee)) (set! uI2be4@uI29fa@p? uI29fa@p?) (set! uI29fc@make-implementation-restriction-violation (record-constructor uI29f7@uI29ef)) (set! uI2be5@uI29fc@make-implementation-restriction-violation uI29fc@make-implementation-restriction-violation) (set! uI29fe@implementation-restriction-violation? (condition-predicate uI29f3@uI29ee)) (set! uI2be6@uI29fe@implementation-restriction-violation? uI29fe@implementation-restriction-violation?) (set! uI2a00@&implementation-restriction-rtd uI29f3@uI29ee) (set! uI2be7@uI2a00@&implementation-restriction-rtd uI2a00@&implementation-restriction-rtd) (set! uI2a02@&implementation-restriction-rcd uI29f7@uI29ef) (set! uI2be8@uI2a02@&implementation-restriction-rcd uI2a02@&implementation-restriction-rcd) (set! uI2a08@uI2a03 (make-record-type-descriptor '&lexical uI297e@uI2979 'uI2a06 '#f '#f '#())) (set! uI2be9@uI2a08@uI2a03 uI2a08@uI2a03) (set! uI2a0a@uI2a05 '#f) (set! uI2bea@uI2a0a@uI2a05 uI2a0a@uI2a05) (set! uI2a0c@uI2a04 (make-record-constructor-descriptor uI2a08@uI2a03 uI2982@uI297a uI2a0a@uI2a05)) (set! uI2beb@uI2a0c@uI2a04 uI2a0c@uI2a04) (set! uI2a0f@p? (record-predicate uI2a08@uI2a03)) (set! uI2bec@uI2a0f@p? uI2a0f@p?) (set! uI2a11@make-lexical-violation (record-constructor uI2a0c@uI2a04)) (set! uI2bed@uI2a11@make-lexical-violation uI2a11@make-lexical-violation) (set! uI2a13@lexical-violation? (condition-predicate uI2a08@uI2a03)) (set! uI2bee@uI2a13@lexical-violation? uI2a13@lexical-violation?) (set! uI2a15@&lexical-rtd uI2a08@uI2a03) (set! uI2bef@uI2a15@&lexical-rtd uI2a15@&lexical-rtd) (set! uI2a17@&lexical-rcd uI2a0c@uI2a04) (set! uI2bf0@uI2a17@&lexical-rcd uI2a17@&lexical-rcd) (set! uI2a21@uI2a1c (make-record-type-descriptor '&syntax uI297e@uI2979 'uI2a1f '#f '#f '#((immutable form) (immutable subform)))) (set! uI2bf1@uI2a21@uI2a1c uI2a21@uI2a1c) (set! uI2a23@uI2a1e '#f) (set! uI2bf2@uI2a23@uI2a1e uI2a23@uI2a1e) (set! uI2a25@uI2a1d (make-record-constructor-descriptor uI2a21@uI2a1c uI2982@uI297a uI2a23@uI2a1e)) (set! uI2bf3@uI2a25@uI2a1d uI2a25@uI2a1d) (set! uI2a28@p? (record-predicate uI2a21@uI2a1c)) (set! uI2bf4@uI2a28@p? uI2a28@p?) (set! uI2a2a@make-syntax-violation (record-constructor uI2a25@uI2a1d)) (set! uI2bf5@uI2a2a@make-syntax-violation uI2a2a@make-syntax-violation) (set! uI2a2c@uI2a19 (record-accessor uI2a21@uI2a1c '0)) (set! uI2bf6@uI2a2c@uI2a19 uI2a2c@uI2a19) (set! uI2a2e@uI2a1b (record-accessor uI2a21@uI2a1c '1)) (set! uI2bf7@uI2a2e@uI2a1b uI2a2e@uI2a1b) (set! uI2a30@syntax-violation? (condition-predicate uI2a21@uI2a1c)) (set! uI2bf8@uI2a30@syntax-violation? uI2a30@syntax-violation?) (set! uI2a32@syntax-violation-form (condition-accessor uI2a21@uI2a1c uI2a2c@uI2a19)) (set! uI2bf9@uI2a32@syntax-violation-form uI2a32@syntax-violation-form) (set! uI2a34@syntax-violation-subform (condition-accessor uI2a21@uI2a1c uI2a2e@uI2a1b)) (set! uI2bfa@uI2a34@syntax-violation-subform uI2a34@syntax-violation-subform) (set! uI2a36@&syntax-rtd uI2a21@uI2a1c) (set! uI2bfb@uI2a36@&syntax-rtd uI2a36@&syntax-rtd) (set! uI2a38@&syntax-rcd uI2a25@uI2a1d) (set! uI2bfc@uI2a38@&syntax-rcd uI2a38@&syntax-rcd) (set! uI2a3e@uI2a39 (make-record-type-descriptor '&undefined uI297e@uI2979 'uI2a3c '#f '#f '#())) (set! uI2bfd@uI2a3e@uI2a39 uI2a3e@uI2a39) (set! uI2a40@uI2a3b '#f) (set! uI2bfe@uI2a40@uI2a3b uI2a40@uI2a3b) (set! uI2a42@uI2a3a (make-record-constructor-descriptor uI2a3e@uI2a39 uI2982@uI297a uI2a40@uI2a3b)) (set! uI2bff@uI2a42@uI2a3a uI2a42@uI2a3a) (set! uI2a45@p? (record-predicate uI2a3e@uI2a39)) (set! uI2c00@uI2a45@p? uI2a45@p?) (set! uI2a47@make-undefined-violation (record-constructor uI2a42@uI2a3a)) (set! uI2c01@uI2a47@make-undefined-violation uI2a47@make-undefined-violation) (set! uI2a49@undefined-violation? (condition-predicate uI2a3e@uI2a39)) (set! uI2c02@uI2a49@undefined-violation? uI2a49@undefined-violation?) (set! uI2a4b@&undefined-rtd uI2a3e@uI2a39) (set! uI2c03@uI2a4b@&undefined-rtd uI2a4b@&undefined-rtd) (set! uI2a4d@&undefined-rcd uI2a42@uI2a3a) (set! uI2c04@uI2a4d@&undefined-rcd uI2a4d@&undefined-rcd) (set! uI2a53@uI2a4e (make-record-type-descriptor '&i/o uI2969@uI2964 'uI2a51 '#f '#f '#())) (set! uI2c05@uI2a53@uI2a4e uI2a53@uI2a4e) (set! uI2a55@uI2a50 '#f) (set! uI2c06@uI2a55@uI2a50 uI2a55@uI2a50) (set! uI2a57@uI2a4f (make-record-constructor-descriptor uI2a53@uI2a4e uI296d@uI2965 uI2a55@uI2a50)) (set! uI2c07@uI2a57@uI2a4f uI2a57@uI2a4f) (set! uI2a5a@p? (record-predicate uI2a53@uI2a4e)) (set! uI2c08@uI2a5a@p? uI2a5a@p?) (set! uI2a5c@make-i/o-error (record-constructor uI2a57@uI2a4f)) (set! uI2c09@uI2a5c@make-i/o-error uI2a5c@make-i/o-error) (set! uI2a5e@i/o-error? (condition-predicate uI2a53@uI2a4e)) (set! uI2c0a@uI2a5e@i/o-error? uI2a5e@i/o-error?) (set! uI2a60@&i/o-rtd uI2a53@uI2a4e) (set! uI2c0b@uI2a60@&i/o-rtd uI2a60@&i/o-rtd) (set! uI2a62@&i/o-rcd uI2a57@uI2a4f) (set! uI2c0c@uI2a62@&i/o-rcd uI2a62@&i/o-rcd) (set! uI2a68@uI2a63 (make-record-type-descriptor '&i/o-read uI2a53@uI2a4e 'uI2a66 '#f '#f '#())) (set! uI2c0d@uI2a68@uI2a63 uI2a68@uI2a63) (set! uI2a6a@uI2a65 '#f) (set! uI2c0e@uI2a6a@uI2a65 uI2a6a@uI2a65) (set! uI2a6c@uI2a64 (make-record-constructor-descriptor uI2a68@uI2a63 uI2a57@uI2a4f uI2a6a@uI2a65)) (set! uI2c0f@uI2a6c@uI2a64 uI2a6c@uI2a64) (set! uI2a6f@p? (record-predicate uI2a68@uI2a63)) (set! uI2c10@uI2a6f@p? uI2a6f@p?) (set! uI2a71@make-i/o-read-error (record-constructor uI2a6c@uI2a64)) (set! uI2c11@uI2a71@make-i/o-read-error uI2a71@make-i/o-read-error) (set! uI2a73@i/o-read-error? (condition-predicate uI2a68@uI2a63)) (set! uI2c12@uI2a73@i/o-read-error? uI2a73@i/o-read-error?) (set! uI2a75@&i/o-read-rtd uI2a68@uI2a63) (set! uI2c13@uI2a75@&i/o-read-rtd uI2a75@&i/o-read-rtd) (set! uI2a77@&i/o-read-rcd uI2a6c@uI2a64) (set! uI2c14@uI2a77@&i/o-read-rcd uI2a77@&i/o-read-rcd) (set! uI2a7d@uI2a78 (make-record-type-descriptor '&i/o-write uI2a53@uI2a4e 'uI2a7b '#f '#f '#())) (set! uI2c15@uI2a7d@uI2a78 uI2a7d@uI2a78) (set! uI2a7f@uI2a7a '#f) (set! uI2c16@uI2a7f@uI2a7a uI2a7f@uI2a7a) (set! uI2a81@uI2a79 (make-record-constructor-descriptor uI2a7d@uI2a78 uI2a57@uI2a4f uI2a7f@uI2a7a)) (set! uI2c17@uI2a81@uI2a79 uI2a81@uI2a79) (set! uI2a84@p? (record-predicate uI2a7d@uI2a78)) (set! uI2c18@uI2a84@p? uI2a84@p?) (set! uI2a86@make-i/o-write-error (record-constructor uI2a81@uI2a79)) (set! uI2c19@uI2a86@make-i/o-write-error uI2a86@make-i/o-write-error) (set! uI2a88@i/o-write-error? (condition-predicate uI2a7d@uI2a78)) (set! uI2c1a@uI2a88@i/o-write-error? uI2a88@i/o-write-error?) (set! uI2a8a@&i/o-write-rtd uI2a7d@uI2a78) (set! uI2c1b@uI2a8a@&i/o-write-rtd uI2a8a@&i/o-write-rtd) (set! uI2a8c@&i/o-write-rcd uI2a81@uI2a79) (set! uI2c1c@uI2a8c@&i/o-write-rcd uI2a8c@&i/o-write-rcd) (set! uI2a94@uI2a8f (make-record-type-descriptor '&i/o-invalid-position uI2a53@uI2a4e 'uI2a92 '#f '#f '#((immutable position)))) (set! uI2c1d@uI2a94@uI2a8f uI2a94@uI2a8f) (set! uI2a96@uI2a91 '#f) (set! uI2c1e@uI2a96@uI2a91 uI2a96@uI2a91) (set! uI2a98@uI2a90 (make-record-constructor-descriptor uI2a94@uI2a8f uI2a57@uI2a4f uI2a96@uI2a91)) (set! uI2c1f@uI2a98@uI2a90 uI2a98@uI2a90) (set! uI2a9b@p? (record-predicate uI2a94@uI2a8f)) (set! uI2c20@uI2a9b@p? uI2a9b@p?) (set! uI2a9d@make-i/o-invalid-position-error (record-constructor uI2a98@uI2a90)) (set! uI2c21@uI2a9d@make-i/o-invalid-position-error uI2a9d@make-i/o-invalid-position-error) (set! uI2a9f@uI2a8e (record-accessor uI2a94@uI2a8f '0)) (set! uI2c22@uI2a9f@uI2a8e uI2a9f@uI2a8e) (set! uI2aa1@i/o-invalid-position-error? (condition-predicate uI2a94@uI2a8f)) (set! uI2c23@uI2aa1@i/o-invalid-position-error? uI2aa1@i/o-invalid-position-error?) (set! uI2aa3@i/o-error-position (condition-accessor uI2a94@uI2a8f uI2a9f@uI2a8e)) (set! uI2c24@uI2aa3@i/o-error-position uI2aa3@i/o-error-position) (set! uI2aa5@&i/o-invalid-position-rtd uI2a94@uI2a8f) (set! uI2c25@uI2aa5@&i/o-invalid-position-rtd uI2aa5@&i/o-invalid-position-rtd) (set! uI2aa7@&i/o-invalid-position-rcd uI2a98@uI2a90) (set! uI2c26@uI2aa7@&i/o-invalid-position-rcd uI2aa7@&i/o-invalid-position-rcd) (set! uI2aaf@uI2aaa (make-record-type-descriptor '&i/o-filename uI2a53@uI2a4e 'uI2aad '#f '#f '#((immutable filename)))) (set! uI2c27@uI2aaf@uI2aaa uI2aaf@uI2aaa) (set! uI2ab1@uI2aac '#f) (set! uI2c28@uI2ab1@uI2aac uI2ab1@uI2aac) (set! uI2ab3@uI2aab (make-record-constructor-descriptor uI2aaf@uI2aaa uI2a57@uI2a4f uI2ab1@uI2aac)) (set! uI2c29@uI2ab3@uI2aab uI2ab3@uI2aab) (set! uI2ab6@p? (record-predicate uI2aaf@uI2aaa)) (set! uI2c2a@uI2ab6@p? uI2ab6@p?) (set! uI2ab8@make-i/o-filename-error (record-constructor uI2ab3@uI2aab)) (set! uI2c2b@uI2ab8@make-i/o-filename-error uI2ab8@make-i/o-filename-error) (set! uI2aba@uI2aa9 (record-accessor uI2aaf@uI2aaa '0)) (set! uI2c2c@uI2aba@uI2aa9 uI2aba@uI2aa9) (set! uI2abc@i/o-filename-error? (condition-predicate uI2aaf@uI2aaa)) (set! uI2c2d@uI2abc@i/o-filename-error? uI2abc@i/o-filename-error?) (set! uI2abe@i/o-error-filename (condition-accessor uI2aaf@uI2aaa uI2aba@uI2aa9)) (set! uI2c2e@uI2abe@i/o-error-filename uI2abe@i/o-error-filename) (set! uI2ac0@&i/o-filename-rtd uI2aaf@uI2aaa) (set! uI2c2f@uI2ac0@&i/o-filename-rtd uI2ac0@&i/o-filename-rtd) (set! uI2ac2@&i/o-filename-rcd uI2ab3@uI2aab) (set! uI2c30@uI2ac2@&i/o-filename-rcd uI2ac2@&i/o-filename-rcd) (set! uI2ac8@uI2ac3 (make-record-type-descriptor '&i/o-file-protection uI2aaf@uI2aaa 'uI2ac6 '#f '#f '#())) (set! uI2c31@uI2ac8@uI2ac3 uI2ac8@uI2ac3) (set! uI2aca@uI2ac5 '#f) (set! uI2c32@uI2aca@uI2ac5 uI2aca@uI2ac5) (set! uI2acc@uI2ac4 (make-record-constructor-descriptor uI2ac8@uI2ac3 uI2ab3@uI2aab uI2aca@uI2ac5)) (set! uI2c33@uI2acc@uI2ac4 uI2acc@uI2ac4) (set! uI2acf@p? (record-predicate uI2ac8@uI2ac3)) (set! uI2c34@uI2acf@p? uI2acf@p?) (set! uI2ad1@make-i/o-file-protection-error (record-constructor uI2acc@uI2ac4)) (set! uI2c35@uI2ad1@make-i/o-file-protection-error uI2ad1@make-i/o-file-protection-error) (set! uI2ad3@i/o-file-protection-error? (condition-predicate uI2ac8@uI2ac3)) (set! uI2c36@uI2ad3@i/o-file-protection-error? uI2ad3@i/o-file-protection-error?) (set! uI2ad5@&i/o-file-protection-rtd uI2ac8@uI2ac3) (set! uI2c37@uI2ad5@&i/o-file-protection-rtd uI2ad5@&i/o-file-protection-rtd) (set! uI2ad7@&i/o-file-protection-rcd uI2acc@uI2ac4) (set! uI2c38@uI2ad7@&i/o-file-protection-rcd uI2ad7@&i/o-file-protection-rcd) (set! uI2add@uI2ad8 (make-record-type-descriptor '&i/o-file-is-read-only uI2ac8@uI2ac3 'uI2adb '#f '#f '#())) (set! uI2c39@uI2add@uI2ad8 uI2add@uI2ad8) (set! uI2adf@uI2ada '#f) (set! uI2c3a@uI2adf@uI2ada uI2adf@uI2ada) (set! uI2ae1@uI2ad9 (make-record-constructor-descriptor uI2add@uI2ad8 uI2acc@uI2ac4 uI2adf@uI2ada)) (set! uI2c3b@uI2ae1@uI2ad9 uI2ae1@uI2ad9) (set! uI2ae4@p? (record-predicate uI2add@uI2ad8)) (set! uI2c3c@uI2ae4@p? uI2ae4@p?) (set! uI2ae6@make-i/o-file-is-read-only-error (record-constructor uI2ae1@uI2ad9)) (set! uI2c3d@uI2ae6@make-i/o-file-is-read-only-error uI2ae6@make-i/o-file-is-read-only-error) (set! uI2ae8@i/o-file-is-read-only-error? (condition-predicate uI2add@uI2ad8)) (set! uI2c3e@uI2ae8@i/o-file-is-read-only-error? uI2ae8@i/o-file-is-read-only-error?) (set! uI2aea@&i/o-file-is-read-only-rtd uI2add@uI2ad8) (set! uI2c3f@uI2aea@&i/o-file-is-read-only-rtd uI2aea@&i/o-file-is-read-only-rtd) (set! uI2aec@&i/o-file-is-read-only-rcd uI2ae1@uI2ad9) (set! uI2c40@uI2aec@&i/o-file-is-read-only-rcd uI2aec@&i/o-file-is-read-only-rcd) (set! uI2af2@uI2aed (make-record-type-descriptor '&i/o-file-already-exists uI2aaf@uI2aaa 'uI2af0 '#f '#f '#())) (set! uI2c41@uI2af2@uI2aed uI2af2@uI2aed) (set! uI2af4@uI2aef '#f) (set! uI2c42@uI2af4@uI2aef uI2af4@uI2aef) (set! uI2af6@uI2aee (make-record-constructor-descriptor uI2af2@uI2aed uI2ab3@uI2aab uI2af4@uI2aef)) (set! uI2c43@uI2af6@uI2aee uI2af6@uI2aee) (set! uI2af9@p? (record-predicate uI2af2@uI2aed)) (set! uI2c44@uI2af9@p? uI2af9@p?) (set! uI2afb@make-i/o-file-already-exists-error (record-constructor uI2af6@uI2aee)) (set! uI2c45@uI2afb@make-i/o-file-already-exists-error uI2afb@make-i/o-file-already-exists-error) (set! uI2afd@i/o-file-already-exists-error? (condition-predicate uI2af2@uI2aed)) (set! uI2c46@uI2afd@i/o-file-already-exists-error? uI2afd@i/o-file-already-exists-error?) (set! uI2aff@&i/o-file-already-exists-rtd uI2af2@uI2aed) (set! uI2c47@uI2aff@&i/o-file-already-exists-rtd uI2aff@&i/o-file-already-exists-rtd) (set! uI2b01@&i/o-file-already-exists-rcd uI2af6@uI2aee) (set! uI2c48@uI2b01@&i/o-file-already-exists-rcd uI2b01@&i/o-file-already-exists-rcd) (set! uI2b07@uI2b02 (make-record-type-descriptor '&i/o-file-does-not-exist uI2aaf@uI2aaa 'uI2b05 '#f '#f '#())) (set! uI2c49@uI2b07@uI2b02 uI2b07@uI2b02) (set! uI2b09@uI2b04 '#f) (set! uI2c4a@uI2b09@uI2b04 uI2b09@uI2b04) (set! uI2b0b@uI2b03 (make-record-constructor-descriptor uI2b07@uI2b02 uI2ab3@uI2aab uI2b09@uI2b04)) (set! uI2c4b@uI2b0b@uI2b03 uI2b0b@uI2b03) (set! uI2b0e@p? (record-predicate uI2b07@uI2b02)) (set! uI2c4c@uI2b0e@p? uI2b0e@p?) (set! uI2b10@make-i/o-file-does-not-exist-error (record-constructor uI2b0b@uI2b03)) (set! uI2c4d@uI2b10@make-i/o-file-does-not-exist-error uI2b10@make-i/o-file-does-not-exist-error) (set! uI2b12@i/o-file-does-not-exist-error? (condition-predicate uI2b07@uI2b02)) (set! uI2c4e@uI2b12@i/o-file-does-not-exist-error? uI2b12@i/o-file-does-not-exist-error?) (set! uI2b14@&i/o-file-does-not-exist-rtd uI2b07@uI2b02) (set! uI2c4f@uI2b14@&i/o-file-does-not-exist-rtd uI2b14@&i/o-file-does-not-exist-rtd) (set! uI2b16@&i/o-file-does-not-exist-rcd uI2b0b@uI2b03) (set! uI2c50@uI2b16@&i/o-file-does-not-exist-rcd uI2b16@&i/o-file-does-not-exist-rcd) (set! uI2b1e@uI2b19 (make-record-type-descriptor '&i/o-port uI2a53@uI2a4e 'uI2b1c '#f '#f '#((immutable port)))) (set! uI2c51@uI2b1e@uI2b19 uI2b1e@uI2b19) (set! uI2b20@uI2b1b '#f) (set! uI2c52@uI2b20@uI2b1b uI2b20@uI2b1b) (set! uI2b22@uI2b1a (make-record-constructor-descriptor uI2b1e@uI2b19 uI2a57@uI2a4f uI2b20@uI2b1b)) (set! uI2c53@uI2b22@uI2b1a uI2b22@uI2b1a) (set! uI2b25@p? (record-predicate uI2b1e@uI2b19)) (set! uI2c54@uI2b25@p? uI2b25@p?) (set! uI2b27@make-i/o-port-error (record-constructor uI2b22@uI2b1a)) (set! uI2c55@uI2b27@make-i/o-port-error uI2b27@make-i/o-port-error) (set! uI2b29@uI2b18 (record-accessor uI2b1e@uI2b19 '0)) (set! uI2c56@uI2b29@uI2b18 uI2b29@uI2b18) (set! uI2b2b@i/o-port-error? (condition-predicate uI2b1e@uI2b19)) (set! uI2c57@uI2b2b@i/o-port-error? uI2b2b@i/o-port-error?) (set! uI2b2d@i/o-error-port (condition-accessor uI2b1e@uI2b19 uI2b29@uI2b18)) (set! uI2c58@uI2b2d@i/o-error-port uI2b2d@i/o-error-port) (set! uI2b2f@&i/o-port-rtd uI2b1e@uI2b19) (set! uI2c59@uI2b2f@&i/o-port-rtd uI2b2f@&i/o-port-rtd) (set! uI2b31@&i/o-port-rcd uI2b22@uI2b1a) (set! uI2c5a@uI2b31@&i/o-port-rcd uI2b31@&i/o-port-rcd) (set! uI2b37@uI2b32 (make-record-type-descriptor '&i/o-decoding uI2b1e@uI2b19 'uI2b35 '#f '#f '#())) (set! uI2c5b@uI2b37@uI2b32 uI2b37@uI2b32) (set! uI2b39@uI2b34 '#f) (set! uI2c5c@uI2b39@uI2b34 uI2b39@uI2b34) (set! uI2b3b@uI2b33 (make-record-constructor-descriptor uI2b37@uI2b32 uI2b22@uI2b1a uI2b39@uI2b34)) (set! uI2c5d@uI2b3b@uI2b33 uI2b3b@uI2b33) (set! uI2b3e@p? (record-predicate uI2b37@uI2b32)) (set! uI2c5e@uI2b3e@p? uI2b3e@p?) (set! uI2b40@make-i/o-decoding-error (record-constructor uI2b3b@uI2b33)) (set! uI2c5f@uI2b40@make-i/o-decoding-error uI2b40@make-i/o-decoding-error) (set! uI2b42@i/o-decoding-error? (condition-predicate uI2b37@uI2b32)) (set! uI2c60@uI2b42@i/o-decoding-error? uI2b42@i/o-decoding-error?) (set! uI2b44@&i/o-decoding-rtd uI2b37@uI2b32) (set! uI2c61@uI2b44@&i/o-decoding-rtd uI2b44@&i/o-decoding-rtd) (set! uI2b46@&i/o-decoding-rcd uI2b3b@uI2b33) (set! uI2c62@uI2b46@&i/o-decoding-rcd uI2b46@&i/o-decoding-rcd) (set! uI2b4e@uI2b49 (make-record-type-descriptor '&i/o-encoding uI2b1e@uI2b19 'uI2b4c '#f '#f '#((immutable char)))) (set! uI2c63@uI2b4e@uI2b49 uI2b4e@uI2b49) (set! uI2b50@uI2b4b '#f) (set! uI2c64@uI2b50@uI2b4b uI2b50@uI2b4b) (set! uI2b52@uI2b4a (make-record-constructor-descriptor uI2b4e@uI2b49 uI2b22@uI2b1a uI2b50@uI2b4b)) (set! uI2c65@uI2b52@uI2b4a uI2b52@uI2b4a) (set! uI2b55@p? (record-predicate uI2b4e@uI2b49)) (set! uI2c66@uI2b55@p? uI2b55@p?) (set! uI2b57@make-i/o-encoding-error (record-constructor uI2b52@uI2b4a)) (set! uI2c67@uI2b57@make-i/o-encoding-error uI2b57@make-i/o-encoding-error) (set! uI2b59@uI2b48 (record-accessor uI2b4e@uI2b49 '0)) (set! uI2c68@uI2b59@uI2b48 uI2b59@uI2b48) (set! uI2b5b@i/o-encoding-error? (condition-predicate uI2b4e@uI2b49)) (set! uI2c69@uI2b5b@i/o-encoding-error? uI2b5b@i/o-encoding-error?) (set! uI2b5d@i/o-encoding-error-char (condition-accessor uI2b4e@uI2b49 uI2b59@uI2b48)) (set! uI2c6a@uI2b5d@i/o-encoding-error-char uI2b5d@i/o-encoding-error-char) (set! uI2b5f@&i/o-encoding-rtd uI2b4e@uI2b49) (set! uI2c6b@uI2b5f@&i/o-encoding-rtd uI2b5f@&i/o-encoding-rtd) (set! uI2b61@&i/o-encoding-rcd uI2b52@uI2b4a) (set! uI2c6c@uI2b61@&i/o-encoding-rcd uI2b61@&i/o-encoding-rcd) (set! uI2b67@uI2b62 (make-record-type-descriptor '&no-infinities uI29f3@uI29ee 'uI2b65 '#f '#f '#())) (set! uI2c6d@uI2b67@uI2b62 uI2b67@uI2b62) (set! uI2b69@uI2b64 '#f) (set! uI2c6e@uI2b69@uI2b64 uI2b69@uI2b64) (set! uI2b6b@uI2b63 (make-record-constructor-descriptor uI2b67@uI2b62 uI29f7@uI29ef uI2b69@uI2b64)) (set! uI2c6f@uI2b6b@uI2b63 uI2b6b@uI2b63) (set! uI2b6e@p? (record-predicate uI2b67@uI2b62)) (set! uI2c70@uI2b6e@p? uI2b6e@p?) (set! uI2b70@make-no-infinities-violation (record-constructor uI2b6b@uI2b63)) (set! uI2c71@uI2b70@make-no-infinities-violation uI2b70@make-no-infinities-violation) (set! uI2b72@no-infinities-violation? (condition-predicate uI2b67@uI2b62)) (set! uI2c72@uI2b72@no-infinities-violation? uI2b72@no-infinities-violation?) (set! uI2b74@&no-infinities-rtd uI2b67@uI2b62) (set! uI2c73@uI2b74@&no-infinities-rtd uI2b74@&no-infinities-rtd) (set! uI2b76@&no-infinities-rcd uI2b6b@uI2b63) (set! uI2c74@uI2b76@&no-infinities-rcd uI2b76@&no-infinities-rcd) (set! uI2b7c@uI2b77 (make-record-type-descriptor '&no-nans uI29f3@uI29ee 'uI2b7a '#f '#f '#())) (set! uI2c75@uI2b7c@uI2b77 uI2b7c@uI2b77) (set! uI2b7e@uI2b79 '#f) (set! uI2c76@uI2b7e@uI2b79 uI2b7e@uI2b79) (set! uI2b80@uI2b78 (make-record-constructor-descriptor uI2b7c@uI2b77 uI29f7@uI29ef uI2b7e@uI2b79)) (set! uI2c77@uI2b80@uI2b78 uI2b80@uI2b78) (set! uI2b83@p? (record-predicate uI2b7c@uI2b77)) (set! uI2c78@uI2b83@p? uI2b83@p?) (set! uI2b85@make-no-nans-violation (record-constructor uI2b80@uI2b78)) (set! uI2c79@uI2b85@make-no-nans-violation uI2b85@make-no-nans-violation) (set! uI2b87@no-nans-violation? (condition-predicate uI2b7c@uI2b77)) (set! uI2c7a@uI2b87@no-nans-violation? uI2b87@no-nans-violation?) (set! uI2b89@&no-nans-rtd uI2b7c@uI2b77) (set! uI2c7b@uI2b89@&no-nans-rtd uI2b89@&no-nans-rtd) (set! uI2b8b@&no-nans-rcd uI2b80@uI2b78) (set! uI2c7c@uI2b8b@&no-nans-rcd uI2b8b@&no-nans-rcd) (void))
(begin (begin (uI712@uI6c7@current-primitive-locations (lambda (uI314a@x) (let ((uI314c@t (assq uI314a@x '((&no-nans-rcd . uI2c7c@uI2b8b@&no-nans-rcd) (&no-nans-rtd . uI2c7b@uI2b89@&no-nans-rtd) (&no-infinities-rcd . uI2c74@uI2b76@&no-infinities-rcd) (&no-infinities-rtd . uI2c73@uI2b74@&no-infinities-rtd) (&i/o-encoding-rcd . uI2c6c@uI2b61@&i/o-encoding-rcd) (&i/o-encoding-rtd . uI2c6b@uI2b5f@&i/o-encoding-rtd) (&i/o-decoding-rcd . uI2c62@uI2b46@&i/o-decoding-rcd) (&i/o-decoding-rtd . uI2c61@uI2b44@&i/o-decoding-rtd) (&i/o-port-rcd . uI2c5a@uI2b31@&i/o-port-rcd) (&i/o-port-rtd . uI2c59@uI2b2f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . uI2c50@uI2b16@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . uI2c4f@uI2b14@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . uI2c48@uI2b01@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . uI2c47@uI2aff@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . uI2c40@uI2aec@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . uI2c3f@uI2aea@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . uI2c38@uI2ad7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . uI2c37@uI2ad5@&i/o-file-protection-rtd) (&i/o-filename-rcd . uI2c30@uI2ac2@&i/o-filename-rcd) (&i/o-filename-rtd . uI2c2f@uI2ac0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . uI2c26@uI2aa7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . uI2c25@uI2aa5@&i/o-invalid-position-rtd) (&i/o-write-rcd . uI2c1c@uI2a8c@&i/o-write-rcd) (&i/o-write-rtd . uI2c1b@uI2a8a@&i/o-write-rtd) (&i/o-read-rcd . uI2c14@uI2a77@&i/o-read-rcd) (&i/o-read-rtd . uI2c13@uI2a75@&i/o-read-rtd) (&i/o-rcd . uI2c0c@uI2a62@&i/o-rcd) (&i/o-rtd . uI2c0b@uI2a60@&i/o-rtd) (&undefined-rcd . uI2c04@uI2a4d@&undefined-rcd) (&undefined-rtd . uI2c03@uI2a4b@&undefined-rtd) (&syntax-rcd . uI2bfc@uI2a38@&syntax-rcd) (&syntax-rtd . uI2bfb@uI2a36@&syntax-rtd) (&lexical-rcd . uI2bf0@uI2a17@&lexical-rcd) (&lexical-rtd . uI2bef@uI2a15@&lexical-rtd) (&implementation-restriction-rcd . uI2be8@uI2a02@&implementation-restriction-rcd) (&implementation-restriction-rtd . uI2be7@uI2a00@&implementation-restriction-rtd) (&non-continuable-rcd . uI2be0@uI29ed@&non-continuable-rcd) (&non-continuable-rtd . uI2bdf@uI29eb@&non-continuable-rtd) (&who-rcd . uI2bd8@uI29d8@&who-rcd) (&who-rtd . uI2bd7@uI29d6@&who-rtd) (&irritants-rcd . uI2bce@uI29bd@&irritants-rcd) (&irritants-rtd . uI2bcd@uI29bb@&irritants-rtd) (&assertion-rcd . uI2bc4@uI29a2@&assertion-rcd) (&assertion-rtd . uI2bc3@uI29a0@&assertion-rtd) (&violation-rcd . uI2bbc@uI298d@&violation-rcd) (&violation-rtd . uI2bbb@uI298b@&violation-rtd) (&error-rcd . uI2bb4@uI2978@&error-rcd) (&error-rtd . uI2bb3@uI2976@&error-rtd) (&serious-rcd . uI2bac@uI2963@&serious-rcd) (&serious-rtd . uI2bab@uI2961@&serious-rtd) (&warning-rcd . uI2ba4@uI294e@&warning-rcd) (&warning-rtd . uI2ba3@uI294c@&warning-rtd) (&message-rcd . uI2b9c@uI2939@&message-rcd) (&message-rtd . uI2b9b@uI2937@&message-rtd) (&condition-rcd . uI2b92@uI28da@&condition-rcd) (&condition-rtd . uI2b91@uI28d8@&condition-rtd) (syntax-error . uI28b4@uIe58@syntax-error) (syntax-dispatch . uI2852@uId7c@syntax-dispatch) (load . uI2df1@uI2c9c@load) (interaction-environment . uI28bd@uIe6a@interaction-environment) (library-path . uI979@uI7b5@library-path) (mosh-cache-dir . uI6c0@uI5a0@mosh-cache-dir) (make-parameter . uI6bf@uI59e@make-parameter) (make-variable-transformer . uI280f@uIba7@make-variable-transformer) (identifier? . uI28b7@uIe5e@identifier?) (generate-temporaries . uI28ad@uIe4a@generate-temporaries) (free-identifier=? . uI28ae@uIe4c@free-identifier=?) (syntax->datum . uI28b9@uIe62@syntax->datum) (datum->syntax . uI28b8@uIe60@datum->syntax) (bound-identifier=? . uI28af@uIe4e@bound-identifier=?) (make-i/o-write-error . uI2c19@uI2a86@make-i/o-write-error) (make-i/o-read-error . uI2c11@uI2a71@make-i/o-read-error) (make-i/o-port-error . uI2c55@uI2b27@make-i/o-port-error) (make-i/o-invalid-position-error . uI2c21@uI2a9d@make-i/o-invalid-position-error) (make-i/o-filename-error . uI2c2b@uI2ab8@make-i/o-filename-error) (make-i/o-file-protection-error . uI2c35@uI2ad1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . uI2c3d@uI2ae6@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . uI2c4d@uI2b10@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . uI2c45@uI2afb@make-i/o-file-already-exists-error) (make-i/o-error . uI2c09@uI2a5c@make-i/o-error) (make-i/o-encoding-error . uI2c67@uI2b57@make-i/o-encoding-error) (make-i/o-decoding-error . uI2c5f@uI2b40@make-i/o-decoding-error) (i/o-write-error? . uI2c1a@uI2a88@i/o-write-error?) (i/o-read-error? . uI2c12@uI2a73@i/o-read-error?) (i/o-port-error? . uI2c57@uI2b2b@i/o-port-error?) (i/o-invalid-position-error? . uI2c23@uI2aa1@i/o-invalid-position-error?) (i/o-filename-error? . uI2c2d@uI2abc@i/o-filename-error?) (i/o-file-protection-error? . uI2c36@uI2ad3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . uI2c3e@uI2ae8@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . uI2c4e@uI2b12@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . uI2c46@uI2afd@i/o-file-already-exists-error?) (i/o-error? . uI2c0a@uI2a5e@i/o-error?) (i/o-error-position . uI2c24@uI2aa3@i/o-error-position) (i/o-error-port . uI2c58@uI2b2d@i/o-error-port) (i/o-error-filename . uI2c2e@uI2abe@i/o-error-filename) (i/o-encoding-error? . uI2c69@uI2b5b@i/o-encoding-error?) (i/o-encoding-error-char . uI2c6a@uI2b5d@i/o-encoding-error-char) (i/o-decoding-error? . uI2c60@uI2b42@i/o-decoding-error?) (scheme-report-environment . uI28a4@uIe38@scheme-report-environment) (null-environment . uI28a3@uIe36@null-environment) (command-line . uI2dee@uI2c96@command-line) (eval . uI28a6@uIe3c@eval) (environment . uI28a2@uIe34@environment) (who-condition? . uI2bd5@uI29d2@who-condition?) (warning? . uI2ba2@uI294a@warning?) (violation? . uI2bba@uI2989@violation?) (undefined-violation? . uI2c02@uI2a49@undefined-violation?) (syntax-violation? . uI2bf8@uI2a30@syntax-violation?) (syntax-violation-subform . uI2bfa@uI2a34@syntax-violation-subform) (syntax-violation-form . uI2bf9@uI2a32@syntax-violation-form) (syntax-violation . uI28b6@uIe5c@syntax-violation) (serious-condition? . uI2baa@uI295f@serious-condition?) (non-continuable-violation? . uI2bde@uI29e9@non-continuable-violation?) (message-condition? . uI2b99@uI2933@message-condition?) (make-who-condition . uI2bd3@uI29ce@make-who-condition) (make-warning . uI2ba1@uI2948@make-warning) (make-violation . uI2bb9@uI2987@make-violation) (make-undefined-violation . uI2c01@uI2a47@make-undefined-violation) (make-syntax-violation . uI2bf5@uI2a2a@make-syntax-violation) (make-serious-condition . uI2ba9@uI295d@make-serious-condition) (make-non-continuable-violation . uI2bdd@uI29e7@make-non-continuable-violation) (make-message-condition . uI2b97@uI292f@make-message-condition) (make-lexical-violation . uI2bed@uI2a11@make-lexical-violation) (make-irritants-condition . uI2bc9@uI29b3@make-irritants-condition) (make-implementation-restriction-violation . uI2be5@uI29fc@make-implementation-restriction-violation) (make-error . uI2bb1@uI2972@make-error) (make-assertion-violation . uI2bc1@uI299c@make-assertion-violation) (lexical-violation? . uI2bee@uI2a13@lexical-violation?) (irritants-condition? . uI2bcb@uI29b7@irritants-condition?) (implementation-restriction-violation? . uI2be6@uI29fe@implementation-restriction-violation?) (error? . uI2bb2@uI2974@error?) (condition-who . uI2bd6@uI29d4@condition-who) (condition-message . uI2b9a@uI2935@condition-message) (condition-irritants . uI2bcc@uI29b9@condition-irritants) (assertion-violation? . uI2bc2@uI299e@assertion-violation?) (no-nans-violation? . uI2c7a@uI2b87@no-nans-violation?) (no-infinities-violation? . uI2c72@uI2b72@no-infinities-violation?) (make-no-nans-violation . uI2c79@uI2b85@make-no-nans-violation) (make-no-infinities-violation . uI2c71@uI2b70@make-no-infinities-violation) (assertion-error . uI28b3@uIe56@assertion-error))))) (if uI314c@t (cdr uI314c@t) '#f)))) (uI989@uI7d5@install-library 'uI3127 '(mosh interaction) '() '() '() '() '((regexp? . uI311f) (alist->eq-hash-table . uI311b) (format . uI3118) (string-split . uI310d) (call-process . uI3107) (set-current-directory! . uI3103) (expand-path . uI3102) (current-directory . uI3101) (%spawn . uI3100) (%waitpid . uI30ff) (simple-struct-name . uI30fe) (simple-struct-set! . uI30fd) (simple-struct-ref . uI30fc) (make-simple-struct . uI30fb) (simple-struct? . uI30fa) (pointer-ref-c-int64 . uI30f9) (pointer-ref-c-int32 . uI30f8) (pointer-ref-c-int16 . uI30f7) (pointer-ref-c-int8 . uI30f6) (pointer-ref-c-uint64 . uI30f5) (pointer-ref-c-uint32 . uI30f4) (pointer-ref-c-uint16 . uI30f3) (pointer-ref-c-uint8 . uI30f2) (pointer-set-c-uint64! . uI30f1) (pointer-set-c-uint32! . uI30f0) (pointer-set-c-uint16! . uI30ef) (pointer-set-c-uint8! . uI30ee) (pointer-set-c-int64! . uI30ed) (pointer-set-c-int32! . uI30ec) (pointer-set-c-int16! . uI30eb) (pointer-set-c-int8! . uI30ea) (pointer-set-c-pointer! . uI30e9) (pointer-set-c-double! . uI30e8) (pointer-set-c-float! . uI30e7) (pointer-set-c-long-long! . uI30e6) (pointer-set-c-long! . uI30e5) (pointer-set-c-int! . uI30e4) (pointer-set-c-short! . uI30e3) (pointer-set-c-char! . uI30e2) (pointer-ref-c-pointer . uI30e1) (pointer-ref-c-double . uI30e0) (pointer-ref-c-float . uI30df) (pointer-ref-c-unsigned-long-long . uI30de) (pointer-ref-c-signed-long-long . uI30dd) (pointer-ref-c-unsigned-long . uI30dc) (pointer-ref-c-signed-long . uI30db) (pointer-ref-c-unsigned-int . uI30da) (pointer-ref-c-signed-int . uI30d9) (pointer-ref-c-unsigned-short . uI30d8) (pointer-ref-c-signed-short . uI30d7) (pointer-ref-c-unsigned-char . uI30d6) (pointer-ref-c-signed-char . uI30d5) (pointer->integer . uI30d4) (integer->pointer . uI30d3) (pointer? . uI30d2) (shared-errno . uI30d1) (%ffi-supported? . uI30cc) (%ffi-pointer->string . uI30cb) (%ffi-call->string-or-zero . uI30ca) (%ffi-call->double . uI30c9) (%ffi-call->void* . uI30c8) (%ffi-call->void . uI30c7) (%ffi-call->char . uI30c6) (%ffi-call->int . uI30c5) (%ffi-lookup . uI30c4) (%ffi-open . uI30c3) (%fork . uI30c2) (%pipe . uI30c1) (p . uI30c0) (whereis . uI30a4) (register . uI30a3) (vm-join! . uI30a2) (vm-set-value! . uI30a1) (vm? . uI30a0) (main-vm? . uI309f) (vm-eval . uI309e) (vm-self . uI309d) (vm-start! . uI309c) (make-vm . uI309b) (mutex-try-lock! . uI309a) (mutex-unlock! . uI3099) (mutex-lock! . uI3098) (mutex? . uI3097) (make-mutex . uI3096) (condition-variable-notify-all! . uI3095) (condition-variable-notify! . uI3094) (condition-variable-wait! . uI3093) (make-condition-variable . uI3092) (string-upcase . uI307a) (string-titlecase . uI3079) (string-normalize-nfkd . uI3078) (string-normalize-nfkc . uI3077) (string-normalize-nfd . uI3076) (string-normalize-nfc . uI3075) (string-foldcase . uI3074) (string-downcase . uI3073) (string-ci>? . uI3072) (string-ci>=? . uI3071) (string-ci=? . uI3070) (string-ci<? . uI306f) (string-ci<=? . uI306e) (char-whitespace? . uI306d) (char-upper-case? . uI306c) (char-title-case? . uI306b) (char-numeric? . uI306a) (char-lower-case? . uI3069) (char-general-category . uI3068) (char-upcase . uI3067) (char-titlecase . uI3066) (char-foldcase . uI3065) (char-downcase . uI3064) (char-ci>? . uI3063) (char-ci>=? . uI3062) (char-ci=? . uI3061) (char-ci<? . uI3060) (char-ci<=? . uI305f) (char-alphabetic? . uI305e) (make-variable-transformer . uIba6) (identifier? . uIe5d) (generate-temporaries . uIe49) (free-identifier=? . uIe4b) (syntax->datum . uIe61) (datum->syntax . uIe5f) (bound-identifier=? . uIe4d) (record-type-descriptor? . uI305d) (record-predicate . uI305c) (record-mutator . uI305b) (record-constructor . uI305a) (record-accessor . uI3059) (make-record-type-descriptor . uI3058) (make-record-constructor-descriptor . uI3057) (record? . uI3056) (record-type-uid . uI3055) (record-type-sealed? . uI3054) (record-type-parent . uI3053) (record-type-opaque? . uI3052) (record-type-name . uI3051) (record-type-generative? . uI3050) (record-type-field-names . uI304f) (record-rtd . uI304e) (record-field-mutable? . uI304d) (delete-file . uI304c) (file-exists? . uI304b) (vector-sort! . uI304a) (vector-sort . uI3049) (list-sort . uI3048) (symbol-hash . uI3047) (string-ci-hash . uI3046) (string-hash . uI3045) (equal-hash . uI3044) (hashtable-equivalence-function . uI3043) (make-hashtable . uI3042) (hashtable-hash-function . uI3041) (make-eqv-hashtable . uI3040) (make-eq-hashtable . uI303f) (hashtable? . uI303e) (hashtable-update! . uI303d) (hashtable-size . uI303c) (hashtable-set! . uI303b) (hashtable-ref . uI303a) (hashtable-mutable? . uI3039) (hashtable-keys . uI3038) (hashtable-entries . uI3037) (hashtable-delete! . uI3036) (hashtable-copy . uI3035) (hashtable-contains? . uI3034) (hashtable-clear! . uI3033) (call-with-output-file . uI3032) (call-with-input-file . uI3031) (write-char . uI3030) (write . uI302f) (with-output-to-file . uI302e) (with-input-from-file . uI302d) (read-char . uI302c) (read . uI302b) (peek-char . uI302a) (open-output-file . uI3029) (open-input-file . uI3028) (newline . uI3027) (display . uI3026) (close-output-port . uI3025) (close-input-port . uI3024) (eof-object? . uI3023) (eof-object . uI3022) (current-error-port . uI3021) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (utf-8-codec . uI301c) (utf-16-codec . uI301b) (transcoder-error-handling-mode . uI301a) (transcoder-eol-style . uI3019) (transcoder-codec . uI3018) (transcoded-port . uI3017) (textual-port? . uI3016) (string->bytevector . uI3015) (standard-output-port . uI3014) (standard-input-port . uI3013) (standard-error-port . uI3012) (set-port-position! . uI3011) (put-u8 . uI3010) (put-string . uI300f) (put-datum . uI300e) (put-char . uI300d) (put-bytevector . uI300c) (port? . uI300b) (port-transcoder . uI300a) (port-position . uI3009) (port-has-set-port-position!? . uI3008) (port-has-port-position? . uI3007) (port-eof? . uI3006) (output-port-buffer-mode . uI3005) (open-string-output-port . uI3004) (open-string-input-port . uI3003) (open-file-output-port . uI3002) (open-file-input/output-port . uI3001) (open-file-input-port . uI3000) (open-bytevector-output-port . uI2fff) (open-bytevector-input-port . uI2ffe) (native-transcoder . uI2ffd) (native-eol-style . uI2ffc) (make-transcoder . uI2ffb) (latin-1-codec . uI2ffa) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (make-i/o-encoding-error . uI2b56) (make-i/o-decoding-error . uI2b3f) (make-custom-textual-output-port . uI2ff9) (make-custom-textual-input/output-port . uI2ff8) (make-custom-textual-input-port . uI2ff7) (make-custom-binary-output-port . uI2ff6) (make-custom-binary-input/output-port . uI2ff5) (make-custom-binary-input-port . uI2ff4) (make-bytevector . uI2ff3) (lookahead-u8 . uI2ff2) (lookahead-char . uI2ff1) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (i/o-encoding-error? . uI2b5a) (i/o-encoding-error-char . uI2b5c) (i/o-decoding-error? . uI2b41) (get-u8 . uI2ff0) (get-string-n! . uI2fef) (get-string-n . uI2fee) (get-string-all . uI2fed) (get-line . uI2fec) (get-datum . uI2feb) (get-char . uI2fea) (get-bytevector-some . uI2fe9) (get-bytevector-n! . uI2fe8) (get-bytevector-n . uI2fe7) (get-bytevector-all . uI2fe6) (flush-output-port . uI2fe5) (close-port . uI2fe4) (exit . uI2fdc) (command-line . uI2c95) (string-fill! . uI2fdb) (string-set! . uI2fda) (set-cdr! . uI2fd9) (set-car! . uI2fd8) (remove . uI2fd7) (remv . uI2fd6) (remp . uI2fd5) (remq . uI2fd4) (partition . uI2fd3) (memv . uI2fd2) (memq . uI2fd1) (memp . uI2fd0) (member . uI2fcf) (exists . uI2fce) (for-all . uI2fcd) (fold-right . uI2fcc) (fold-left . uI2fcb) (find . uI2fca) (filter . uI2fc9) (cons* . uI2fc8) (assv . uI2fc7) (assq . uI2fc6) (assp . uI2fc5) (assoc . uI2fc4) (call-with-string-output-port . uI2fc3) (call-with-port . uI2fc2) (call-with-bytevector-output-port . uI2fc1) (bytevector->string . uI2fc0) (buffer-mode? . uI2fbf) (binary-port? . uI2fbe) (with-exception-handler . uI2fbd) (raise-continuable . uI2fbc) (raise . uI2fbb) (eval . uIe3b) (environment . uIe33) (make-enumeration . uI2fba) (enum-set=? . uI2fb9) (enum-set-universe . uI2fb8) (enum-set-union . uI2fb7) (enum-set-subset? . uI2fb6) (enum-set-projection . uI2fb5) (enum-set-member? . uI2fb4) (enum-set-intersection . uI2fb3) (enum-set-indexer . uI2fb2) (enum-set-difference . uI2fb1) (enum-set-constructor . uI2fb0) (enum-set-complement . uI2faf) (enum-set->list . uI2fae) (who-condition? . uI29d1) (warning? . uI2949) (violation? . uI2988) (undefined-violation? . uI2a48) (syntax-violation? . uI2a2f) (syntax-violation-subform . uI2a33) (syntax-violation-form . uI2a31) (syntax-violation . uIe5b) (simple-conditions . uI2fad) (serious-condition? . uI295e) (non-continuable-violation? . uI29e8) (message-condition? . uI2932) (make-who-condition . uI29cd) (make-warning . uI2947) (make-violation . uI2986) (make-undefined-violation . uI2a46) (make-syntax-violation . uI2a29) (make-serious-condition . uI295c) (make-non-continuable-violation . uI29e6) (make-message-condition . uI292e) (make-lexical-violation . uI2a10) (make-irritants-condition . uI29b2) (make-implementation-restriction-violation . uI29fb) (make-error . uI2971) (make-assertion-violation . uI299b) (lexical-violation? . uI2a12) (irritants-condition? . uI29b6) (implementation-restriction-violation? . uI29fd) (error? . uI2973) (condition-who . uI29d3) (condition-predicate . uI2fac) (condition-message . uI2934) (condition-irritants . uI29b8) (condition-accessor . uI2fab) (condition . uI2faa) (assertion-violation? . uI299d) (condition? . uI2fa9) (utf32->string . uI2fa8) (utf16->string . uI2fa7) (utf8->string . uI2fa6) (uint-list->bytevector . uI2fa5) (u8-list->bytevector . uI2fa4) (string->utf8 . uI2fa3) (string->utf32 . uI2fa2) (string->utf16 . uI2fa1) (sint-list->bytevector . uI2fa0) (native-endianness . uI2f9f) (bytevector? . uI2f9e) (bytevector=? . uI2f9d) (bytevector-uint-set! . uI2f9c) (bytevector-uint-ref . uI2f9b) (bytevector-u8-set! . uI2f9a) (bytevector-u8-ref . uI2f99) (bytevector-u64-set! . uI2f98) (bytevector-u64-ref . uI2f97) (bytevector-u64-native-set! . uI2f96) (bytevector-u64-native-ref . uI2f95) (bytevector-u32-set! . uI2f94) (bytevector-u32-ref . uI2f93) (bytevector-u32-native-set! . uI2f92) (bytevector-u32-native-ref . uI2f91) (bytevector-u16-set! . uI2f90) (bytevector-u16-ref . uI2f8f) (bytevector-u16-native-set! . uI2f8e) (bytevector-u16-native-ref . uI2f8d) (bytevector-sint-set! . uI2f8c) (bytevector-sint-ref . uI2f8b) (bytevector-s8-set! . uI2f8a) (bytevector-s8-ref . uI2f89) (bytevector-s64-set! . uI2f88) (bytevector-s64-ref . uI2f87) (bytevector-s64-native-set! . uI2f86) (bytevector-s64-native-ref . uI2f85) (bytevector-s32-set! . uI2f84) (bytevector-s32-ref . uI2f83) (bytevector-s32-native-set! . uI2f82) (bytevector-s32-native-ref . uI2f81) (bytevector-s16-set! . uI2f80) (bytevector-s16-ref . uI2f7f) (bytevector-s16-native-set! . uI2f7e) (bytevector-s16-native-ref . uI2f7d) (bytevector-length . uI2f7c) (bytevector-ieee-single-ref . uI2f7b) (bytevector-ieee-single-set! . uI2f7a) (bytevector-ieee-single-native-set! . uI2f79) (bytevector-ieee-single-native-ref . uI2f78) (bytevector-ieee-double-set! . uI2f77) (bytevector-ieee-double-ref . uI2f76) (bytevector-ieee-double-native-set! . uI2f75) (bytevector-ieee-double-native-ref . uI2f74) (bytevector-fill! . uI2f73) (bytevector-copy! . uI2f72) (bytevector-copy . uI2f71) (bytevector->uint-list . uI2f70) (bytevector->u8-list . uI2f6f) (bytevector->sint-list . uI2f6e) (no-nans-violation? . uI2b86) (no-infinities-violation? . uI2b71) (make-no-nans-violation . uI2b84) (make-no-infinities-violation . uI2b6f) (real->flonum . uI2f6d) (flzero? . uI2f6c) (fltruncate . uI2f6b) (fltan . uI2f6a) (flsqrt . uI2f69) (flsin . uI2f68) (flround . uI2f67) (flpositive? . uI2f66) (flonum? . uI2f65) (flodd? . uI2f64) (flnumerator . uI2f63) (flnegative? . uI2f62) (flnan? . uI2f61) (flmod0 . uI2f60) (flmod . uI2f5f) (flmin . uI2f5e) (flmax . uI2f5d) (fllog . uI2f5c) (flinteger? . uI2f5b) (flinfinite? . uI2f5a) (flfloor . uI2f59) (flfinite? . uI2f58) (flexpt . uI2f57) (flexp . uI2f56) (fleven? . uI2f55) (fldiv0-and-mod0 . uI2f54) (fldiv0 . uI2f53) (fldiv-and-mod . uI2f52) (fldiv . uI2f51) (fldenominator . uI2f50) (flcos . uI2f4f) (flceiling . uI2f4e) (flatan . uI2f4d) (flasin . uI2f4c) (flacos . uI2f4b) (flabs . uI2f4a) (fl>? . uI2f49) (fl>=? . uI2f48) (fl=? . uI2f47) (fl<? . uI2f46) (fl<=? . uI2f45) (fl/ . uI2f44) (fl- . uI2f43) (fl+ . uI2f42) (fl* . uI2f41) (fixnum->flonum . uI2f40) (fxzero? . uI2f3f) (fxxor . uI2f3e) (fxrotate-bit-field . uI2f3d) (fxreverse-bit-field . uI2f3c) (fxpositive? . uI2f3b) (fxodd? . uI2f3a) (fxnot . uI2f39) (fxnegative? . uI2f38) (fxmod0 . uI2f37) (fxmod . uI2f36) (fxmin . uI2f35) (fxmax . uI2f34) (fxlength . uI2f33) (fxior . uI2f32) (fxif . uI2f31) (fxfirst-bit-set . uI2f30) (fxeven? . uI2f2f) (fxdiv0-and-mod0 . uI2f2e) (fxdiv0 . uI2f2d) (fxdiv-and-mod . uI2f2c) (fxdiv . uI2f2b) (fxcopy-bit-field . uI2f2a) (fxcopy-bit . uI2f29) (fxbit-set? . uI2f28) (fxbit-field . uI2f27) (fxbit-count . uI2f26) (fxarithmetic-shift-right . uI2f25) (fxarithmetic-shift-left . uI2f24) (fxarithmetic-shift . uI2f23) (fxand . uI2f22) (fx>? . uI2f21) (fx>=? . uI2f20) (fx=? . uI2f1f) (fx<? . uI2f1e) (fx<=? . uI2f1d) (fx-/carry . uI2f1c) (fx- . uI2f1b) (fx+/carry . uI2f1a) (fx+ . uI2f19) (fx*/carry . uI2f18) (fx* . uI2f17) (greatest-fixnum . uI2f16) (least-fixnum . uI2f15) (fixnum-width . uI2f14) (fixnum? . uI2f13) (bitwise-rotate-bit-field . uI2f12) (bitwise-reverse-bit-field . uI2f11) (bitwise-length . uI2f10) (bitwise-if . uI2f0f) (bitwise-first-bit-set . uI2f0e) (bitwise-copy-bit-field . uI2f0d) (bitwise-copy-bit . uI2f0c) (bitwise-bit-set? . uI2f0b) (bitwise-bit-field . uI2f0a) (bitwise-bit-count . uI2f09) (bitwise-xor . uI2f08) (bitwise-ior . uI2f07) (bitwise-and . uI2f06) (bitwise-not . uI2f05) (bitwise-arithmetic-shift-right . uI2f04) (bitwise-arithmetic-shift-left . uI2f03) (bitwise-arithmetic-shift . uI2f02) (zero? . uI2f01) (vector? . uI2f00) (vector-set! . uI2eff) (vector-ref . uI2efe) (vector-map . uI2efd) (vector-length . uI2efc) (vector-for-each . uI2efb) (vector-fill! . uI2efa) (vector->list . uI2ef9) (vector . uI2ef8) (values . uI2ef7) (truncate . uI2ef6) (tan . uI2ef5) (symbol? . uI2ef4) (symbol=? . uI2ef3) (symbol->string . uI2ef2) (substring . uI2ef1) (string? . uI2ef0) (string>? . uI2eef) (string>=? . uI2eee) (string=? . uI2eed) (string<? . uI2eec) (string<=? . uI2eeb) (string-ref . uI2eea) (string-length . uI2ee9) (string-for-each . uI2ee8) (string-copy . uI2ee7) (string-append . uI2ee6) (string->symbol . uI2ee5) (string->number . uI2ee4) (string->list . uI2ee3) (string . uI2ee2) (sqrt . uI2ee1) (sin . uI2ee0) (round . uI2edf) (reverse . uI2ede) (real? . uI2edd) (real-valued? . uI2edc) (real-part . uI2edb) (rationalize . uI2eda) (rational? . uI2ed9) (rational-valued? . uI2ed8) (procedure? . uI2ed7) (positive? . uI2ed6) (pair? . uI2ed5) (odd? . uI2ed4) (numerator . uI2ed3) (number? . uI2ed2) (number->string . uI2ed1) (null? . uI2ed0) (not . uI2ecf) (negative? . uI2ece) (nan? . uI2ecd) (min . uI2ecc) (max . uI2ecb) (map . uI2eca) (make-vector . uI2ec9) (make-string . uI2ec8) (make-rectangular . uI2ec7) (make-polar . uI2ec6) (magnitude . uI2ec5) (log . uI2ec4) (list? . uI2ec3) (list-tail . uI2ec2) (list-ref . uI2ec1) (list->vector . uI2ec0) (list->string . uI2ebf) (list . uI2ebe) (length . uI2ebd) (lcm . uI2ebc) (integer? . uI2ebb) (integer-valued? . uI2eba) (integer->char . uI2eb9) (infinite? . uI2eb8) (inexact? . uI2eb7) (inexact . uI2eb6) (imag-part . uI2eb5) (gcd . uI2eb4) (for-each . uI2eb3) (floor . uI2eb2) (finite? . uI2eb1) (expt . uI2eb0) (exp . uI2eaf) (exact? . uI2eae) (exact-integer-sqrt . uI2ead) (exact . uI2eac) (even? . uI2eab) (error . uI2eaa) (eqv? . uI2ea9) (equal? . uI2ea8) (eq? . uI2ea7) (dynamic-wind . uI2ea6) (div0-and-mod0 . uI2ea5) (mod0 . uI2ea4) (div0 . uI2ea3) (div-and-mod . uI2ea2) (mod . uI2ea1) (div . uI2ea0) (denominator . uI2e9f) (cos . uI2e9e) (cons . uI2e9d) (complex? . uI2e9c) (char? . uI2e9b) (char>? . uI2e9a) (char>=? . uI2e99) (char=? . uI2e98) (char<? . uI2e97) (char<=? . uI2e96) (char->integer . uI2e95) (ceiling . uI2e94) (call-with-values . uI2e93) (call/cc . uI2e92) (call-with-current-continuation . uI2e91) (cddddr . uI2e90) (cdddar . uI2e8f) (cddadr . uI2e8e) (cddaar . uI2e8d) (cdaddr . uI2e8c) (cdadar . uI2e8b) (cdaadr . uI2e8a) (cdaaar . uI2e89) (cadddr . uI2e88) (caddar . uI2e87) (cadadr . uI2e86) (cadaar . uI2e85) (caaddr . uI2e84) (caadar . uI2e83) (caaadr . uI2e82) (caaaar . uI2e81) (cdddr . uI2e80) (cddar . uI2e7f) (cdadr . uI2e7e) (cdaar . uI2e7d) (caddr . uI2e7c) (cadar . uI2e7b) (caadr . uI2e7a) (caaar . uI2e79) (cddr . uI2e78) (cdar . uI2e77) (cadr . uI2e76) (caar . uI2e75) (cdr . uI2e74) (car . uI2e73) (boolean? . uI2e72) (boolean=? . uI2e71) (atan . uI2e70) (assertion-violation . uI2e6f) (asin . uI2e6e) (apply . uI2e6d) (append . uI2e6c) (angle . uI2e6b) (acos . uI2e6a) (abs . uI2e69) (/ . uI2e68) (* . uI2e67) (- . uI2e66) (+ . uI2e65) (>= . uI2e64) (> . uI2e63) (= . uI2e62) (<= . uI2e61) (< . uI2e60) (library . uI2e5f) (&no-nans . uI2e5e) (&no-infinities . uI2e5d) (&i/o-encoding . uI2e5c) (&i/o-decoding . uI2e5b) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51) (&undefined . uI2e50) (&syntax . uI2e4f) (&lexical . uI2e4e) (&implementation-restriction . uI2e4d) (&non-continuable . uI2e4c) (&who . uI2e4b) (&irritants . uI2e4a) (&assertion . uI2e49) (&violation . uI2e48) (&error . uI2e47) (&serious . uI2e46) (&warning . uI2e45) (&message . uI2e44) (&condition . uI2e43) (define-condition-type . uI2e42) (define-enumeration . uI2e41) (define-record-type . uI2e40) (parent-rtd . uI2e3f) (nongenerative . uI2e3e) (opaque . uI2e3d) (sealed . uI2e3c) (protocol . uI2e3b) (parent . uI2e3a) (immutable . uI2e39) (mutable . uI2e38) (fields . uI2e37) (error-handling-mode . uI2e36) (file-options . uI2e35) (buffer-mode . uI2e34) (eol-style . uI2e33) (guard . uI2e32) (unsyntax-splicing . uI2e2f) (unsyntax . uI2e2e) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (_ . uI2e2b) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (assert . uI2e27) (endianness . uI2e26) (time . uI2e24) (do . uI2e23) (cond . uI2e22) (let* . uI2e21) (let*-values . uI2e20) (let-values . uI2e1f) (identifier-syntax . uI2e1e) (with-syntax . uI2e1d) (quasisyntax . uI2e1c) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (include . uI2e19) (record-constructor-descriptor . uI2e17) (record-type-descriptor . uI2e16) (case . uI2e15) (unless . uI2e13) (when . uI2e12) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec* . uI2e0d) (letrec . uI2e0c) (case-lambda . uI2e0a) (lambda . uI2e09) (syntax . uI2e08) (syntax-case . uI2e07) (quote . uI2e06) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (import . uI2e01) (begin . uI2e00) (define-syntax . uI2dfe) (define . uI2dfd)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3128 '(psyntax null-environment-5) '() '() '() '() '((make-promise . uI2fdd) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (_ . uI2e2b) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (delay . uI2e25) (do . uI2e23) (cond . uI2e22) (let* . uI2e21) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (case . uI2e15) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec . uI2e0c) (lambda . uI2e09) (quote . uI2e06) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (begin . uI2e00) (define-syntax . uI2dfe) (define . uI2dfd)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3129 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . uI3072) (string-ci>=? . uI3071) (string-ci=? . uI3070) (string-ci<? . uI306f) (string-ci<=? . uI306e) (char-whitespace? . uI306d) (char-upper-case? . uI306c) (char-numeric? . uI306a) (char-lower-case? . uI3069) (char-upcase . uI3067) (char-downcase . uI3064) (char-ci>? . uI3063) (char-ci>=? . uI3062) (char-ci=? . uI3061) (char-ci<? . uI3060) (char-ci<=? . uI305f) (char-alphabetic? . uI305e) (call-with-output-file . uI3032) (call-with-input-file . uI3031) (write-char . uI3030) (write . uI302f) (with-output-to-file . uI302e) (with-input-from-file . uI302d) (read-char . uI302c) (read . uI302b) (peek-char . uI302a) (open-output-file . uI3029) (open-input-file . uI3028) (newline . uI3027) (display . uI3026) (close-output-port . uI3025) (close-input-port . uI3024) (eof-object . uI3022) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (scheme-report-environment . uIe37) (quotient . uI2fe3) (null-environment . uIe35) (remainder . uI2fe2) (modulo . uI2fe1) (inexact->exact . uI2fe0) (force . uI2fdf) (exact->inexact . uI2fde) (make-promise . uI2fdd) (string-fill! . uI2fdb) (string-set! . uI2fda) (set-cdr! . uI2fd9) (set-car! . uI2fd8) (memv . uI2fd2) (memq . uI2fd1) (member . uI2fcf) (assv . uI2fc7) (assq . uI2fc6) (assoc . uI2fc4) (eval . uIe3b) (zero? . uI2f01) (vector? . uI2f00) (vector-set! . uI2eff) (vector-ref . uI2efe) (vector-length . uI2efc) (vector-fill! . uI2efa) (vector->list . uI2ef9) (vector . uI2ef8) (values . uI2ef7) (truncate . uI2ef6) (tan . uI2ef5) (symbol? . uI2ef4) (symbol->string . uI2ef2) (substring . uI2ef1) (string? . uI2ef0) (string>? . uI2eef) (string>=? . uI2eee) (string=? . uI2eed) (string<? . uI2eec) (string<=? . uI2eeb) (string-ref . uI2eea) (string-length . uI2ee9) (string-copy . uI2ee7) (string-append . uI2ee6) (string->symbol . uI2ee5) (string->number . uI2ee4) (string->list . uI2ee3) (string . uI2ee2) (sqrt . uI2ee1) (sin . uI2ee0) (round . uI2edf) (reverse . uI2ede) (real? . uI2edd) (real-part . uI2edb) (rationalize . uI2eda) (rational? . uI2ed9) (procedure? . uI2ed7) (positive? . uI2ed6) (pair? . uI2ed5) (odd? . uI2ed4) (numerator . uI2ed3) (number? . uI2ed2) (number->string . uI2ed1) (not . uI2ecf) (negative? . uI2ece) (min . uI2ecc) (max . uI2ecb) (map . uI2eca) (make-vector . uI2ec9) (make-string . uI2ec8) (make-rectangular . uI2ec7) (make-polar . uI2ec6) (magnitude . uI2ec5) (log . uI2ec4) (list? . uI2ec3) (list-tail . uI2ec2) (list-ref . uI2ec1) (list->vector . uI2ec0) (list->string . uI2ebf) (list . uI2ebe) (length . uI2ebd) (lcm . uI2ebc) (integer? . uI2ebb) (integer->char . uI2eb9) (inexact? . uI2eb7) (imag-part . uI2eb5) (gcd . uI2eb4) (for-each . uI2eb3) (floor . uI2eb2) (expt . uI2eb0) (exp . uI2eaf) (exact? . uI2eae) (even? . uI2eab) (eqv? . uI2ea9) (equal? . uI2ea8) (eq? . uI2ea7) (dynamic-wind . uI2ea6) (denominator . uI2e9f) (cos . uI2e9e) (cons . uI2e9d) (complex? . uI2e9c) (char? . uI2e9b) (char>? . uI2e9a) (char>=? . uI2e99) (char=? . uI2e98) (char<? . uI2e97) (char<=? . uI2e96) (char->integer . uI2e95) (ceiling . uI2e94) (call-with-values . uI2e93) (call-with-current-continuation . uI2e91) (cddddr . uI2e90) (cdddar . uI2e8f) (cddadr . uI2e8e) (cddaar . uI2e8d) (cdaddr . uI2e8c) (cdadar . uI2e8b) (cdaadr . uI2e8a) (cdaaar . uI2e89) (cadddr . uI2e88) (caddar . uI2e87) (cadadr . uI2e86) (cadaar . uI2e85) (caaddr . uI2e84) (caadar . uI2e83) (caaadr . uI2e82) (caaaar . uI2e81) (cdddr . uI2e80) (cddar . uI2e7f) (cdadr . uI2e7e) (cdaar . uI2e7d) (caddr . uI2e7c) (cadar . uI2e7b) (caadr . uI2e7a) (caaar . uI2e79) (cddr . uI2e78) (cdar . uI2e77) (cadr . uI2e76) (caar . uI2e75) (cdr . uI2e74) (car . uI2e73) (boolean? . uI2e72) (atan . uI2e70) (asin . uI2e6e) (apply . uI2e6d) (append . uI2e6c) (angle . uI2e6b) (acos . uI2e6a) (abs . uI2e69) (/ . uI2e68) (* . uI2e67) (- . uI2e66) (+ . uI2e65) (>= . uI2e64) (> . uI2e63) (= . uI2e62) (<= . uI2e61) (< . uI2e60) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (delay . uI2e25) (do . uI2e23) (cond . uI2e22) (let* . uI2e21) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (case . uI2e15) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec . uI2e0c) (lambda . uI2e09) (quote . uI2e06) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (begin . uI2e00) (define-syntax . uI2dfe) (define . uI2dfd)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312a '(psyntax modules) '() '() '() '() '((module . uI2dff)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312c '(rnrs) '(6) '() '() '() '((regexp? . uI311f) (string-upcase . uI307a) (string-titlecase . uI3079) (string-normalize-nfkd . uI3078) (string-normalize-nfkc . uI3077) (string-normalize-nfd . uI3076) (string-normalize-nfc . uI3075) (string-foldcase . uI3074) (string-downcase . uI3073) (string-ci>? . uI3072) (string-ci>=? . uI3071) (string-ci=? . uI3070) (string-ci<? . uI306f) (string-ci<=? . uI306e) (char-whitespace? . uI306d) (char-upper-case? . uI306c) (char-title-case? . uI306b) (char-numeric? . uI306a) (char-lower-case? . uI3069) (char-general-category . uI3068) (char-upcase . uI3067) (char-titlecase . uI3066) (char-foldcase . uI3065) (char-downcase . uI3064) (char-ci>? . uI3063) (char-ci>=? . uI3062) (char-ci=? . uI3061) (char-ci<? . uI3060) (char-ci<=? . uI305f) (char-alphabetic? . uI305e) (make-variable-transformer . uIba6) (identifier? . uIe5d) (generate-temporaries . uIe49) (free-identifier=? . uIe4b) (syntax->datum . uIe61) (datum->syntax . uIe5f) (bound-identifier=? . uIe4d) (record-type-descriptor? . uI305d) (record-predicate . uI305c) (record-mutator . uI305b) (record-constructor . uI305a) (record-accessor . uI3059) (make-record-type-descriptor . uI3058) (make-record-constructor-descriptor . uI3057) (record? . uI3056) (record-type-uid . uI3055) (record-type-sealed? . uI3054) (record-type-parent . uI3053) (record-type-opaque? . uI3052) (record-type-name . uI3051) (record-type-generative? . uI3050) (record-type-field-names . uI304f) (record-rtd . uI304e) (record-field-mutable? . uI304d) (delete-file . uI304c) (file-exists? . uI304b) (vector-sort! . uI304a) (vector-sort . uI3049) (list-sort . uI3048) (symbol-hash . uI3047) (string-ci-hash . uI3046) (string-hash . uI3045) (equal-hash . uI3044) (hashtable-equivalence-function . uI3043) (make-hashtable . uI3042) (hashtable-hash-function . uI3041) (make-eqv-hashtable . uI3040) (make-eq-hashtable . uI303f) (hashtable? . uI303e) (hashtable-update! . uI303d) (hashtable-size . uI303c) (hashtable-set! . uI303b) (hashtable-ref . uI303a) (hashtable-mutable? . uI3039) (hashtable-keys . uI3038) (hashtable-entries . uI3037) (hashtable-delete! . uI3036) (hashtable-copy . uI3035) (hashtable-contains? . uI3034) (hashtable-clear! . uI3033) (call-with-output-file . uI3032) (call-with-input-file . uI3031) (write-char . uI3030) (write . uI302f) (with-output-to-file . uI302e) (with-input-from-file . uI302d) (read-char . uI302c) (read . uI302b) (peek-char . uI302a) (open-output-file . uI3029) (open-input-file . uI3028) (newline . uI3027) (display . uI3026) (close-output-port . uI3025) (close-input-port . uI3024) (eof-object? . uI3023) (eof-object . uI3022) (current-error-port . uI3021) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (utf-8-codec . uI301c) (utf-16-codec . uI301b) (transcoder-error-handling-mode . uI301a) (transcoder-eol-style . uI3019) (transcoder-codec . uI3018) (transcoded-port . uI3017) (textual-port? . uI3016) (string->bytevector . uI3015) (standard-output-port . uI3014) (standard-input-port . uI3013) (standard-error-port . uI3012) (set-port-position! . uI3011) (put-u8 . uI3010) (put-string . uI300f) (put-datum . uI300e) (put-char . uI300d) (put-bytevector . uI300c) (port? . uI300b) (port-transcoder . uI300a) (port-position . uI3009) (port-has-set-port-position!? . uI3008) (port-has-port-position? . uI3007) (port-eof? . uI3006) (output-port-buffer-mode . uI3005) (open-string-output-port . uI3004) (open-string-input-port . uI3003) (open-file-output-port . uI3002) (open-file-input/output-port . uI3001) (open-file-input-port . uI3000) (open-bytevector-output-port . uI2fff) (open-bytevector-input-port . uI2ffe) (native-transcoder . uI2ffd) (native-eol-style . uI2ffc) (make-transcoder . uI2ffb) (latin-1-codec . uI2ffa) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (make-i/o-encoding-error . uI2b56) (make-i/o-decoding-error . uI2b3f) (make-custom-textual-output-port . uI2ff9) (make-custom-textual-input/output-port . uI2ff8) (make-custom-textual-input-port . uI2ff7) (make-custom-binary-output-port . uI2ff6) (make-custom-binary-input/output-port . uI2ff5) (make-custom-binary-input-port . uI2ff4) (make-bytevector . uI2ff3) (lookahead-u8 . uI2ff2) (lookahead-char . uI2ff1) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (i/o-encoding-error? . uI2b5a) (i/o-encoding-error-char . uI2b5c) (i/o-decoding-error? . uI2b41) (get-u8 . uI2ff0) (get-string-n! . uI2fef) (get-string-n . uI2fee) (get-string-all . uI2fed) (get-line . uI2fec) (get-datum . uI2feb) (get-char . uI2fea) (get-bytevector-some . uI2fe9) (get-bytevector-n! . uI2fe8) (get-bytevector-n . uI2fe7) (get-bytevector-all . uI2fe6) (flush-output-port . uI2fe5) (close-port . uI2fe4) (exit . uI2fdc) (command-line . uI2c95) (remove . uI2fd7) (remv . uI2fd6) (remp . uI2fd5) (remq . uI2fd4) (partition . uI2fd3) (memv . uI2fd2) (memq . uI2fd1) (memp . uI2fd0) (member . uI2fcf) (exists . uI2fce) (for-all . uI2fcd) (fold-right . uI2fcc) (fold-left . uI2fcb) (find . uI2fca) (filter . uI2fc9) (cons* . uI2fc8) (assv . uI2fc7) (assq . uI2fc6) (assp . uI2fc5) (assoc . uI2fc4) (call-with-string-output-port . uI2fc3) (call-with-port . uI2fc2) (call-with-bytevector-output-port . uI2fc1) (bytevector->string . uI2fc0) (buffer-mode? . uI2fbf) (binary-port? . uI2fbe) (with-exception-handler . uI2fbd) (raise-continuable . uI2fbc) (raise . uI2fbb) (make-enumeration . uI2fba) (enum-set=? . uI2fb9) (enum-set-universe . uI2fb8) (enum-set-union . uI2fb7) (enum-set-subset? . uI2fb6) (enum-set-projection . uI2fb5) (enum-set-member? . uI2fb4) (enum-set-intersection . uI2fb3) (enum-set-indexer . uI2fb2) (enum-set-difference . uI2fb1) (enum-set-constructor . uI2fb0) (enum-set-complement . uI2faf) (enum-set->list . uI2fae) (who-condition? . uI29d1) (warning? . uI2949) (violation? . uI2988) (undefined-violation? . uI2a48) (syntax-violation? . uI2a2f) (syntax-violation-subform . uI2a33) (syntax-violation-form . uI2a31) (syntax-violation . uIe5b) (simple-conditions . uI2fad) (serious-condition? . uI295e) (non-continuable-violation? . uI29e8) (message-condition? . uI2932) (make-who-condition . uI29cd) (make-warning . uI2947) (make-violation . uI2986) (make-undefined-violation . uI2a46) (make-syntax-violation . uI2a29) (make-serious-condition . uI295c) (make-non-continuable-violation . uI29e6) (make-message-condition . uI292e) (make-lexical-violation . uI2a10) (make-irritants-condition . uI29b2) (make-implementation-restriction-violation . uI29fb) (make-error . uI2971) (make-assertion-violation . uI299b) (lexical-violation? . uI2a12) (irritants-condition? . uI29b6) (implementation-restriction-violation? . uI29fd) (error? . uI2973) (condition-who . uI29d3) (condition-predicate . uI2fac) (condition-message . uI2934) (condition-irritants . uI29b8) (condition-accessor . uI2fab) (condition . uI2faa) (assertion-violation? . uI299d) (condition? . uI2fa9) (utf32->string . uI2fa8) (utf16->string . uI2fa7) (utf8->string . uI2fa6) (uint-list->bytevector . uI2fa5) (u8-list->bytevector . uI2fa4) (string->utf8 . uI2fa3) (string->utf32 . uI2fa2) (string->utf16 . uI2fa1) (sint-list->bytevector . uI2fa0) (native-endianness . uI2f9f) (bytevector? . uI2f9e) (bytevector=? . uI2f9d) (bytevector-uint-set! . uI2f9c) (bytevector-uint-ref . uI2f9b) (bytevector-u8-set! . uI2f9a) (bytevector-u8-ref . uI2f99) (bytevector-u64-set! . uI2f98) (bytevector-u64-ref . uI2f97) (bytevector-u64-native-set! . uI2f96) (bytevector-u64-native-ref . uI2f95) (bytevector-u32-set! . uI2f94) (bytevector-u32-ref . uI2f93) (bytevector-u32-native-set! . uI2f92) (bytevector-u32-native-ref . uI2f91) (bytevector-u16-set! . uI2f90) (bytevector-u16-ref . uI2f8f) (bytevector-u16-native-set! . uI2f8e) (bytevector-u16-native-ref . uI2f8d) (bytevector-sint-set! . uI2f8c) (bytevector-sint-ref . uI2f8b) (bytevector-s8-set! . uI2f8a) (bytevector-s8-ref . uI2f89) (bytevector-s64-set! . uI2f88) (bytevector-s64-ref . uI2f87) (bytevector-s64-native-set! . uI2f86) (bytevector-s64-native-ref . uI2f85) (bytevector-s32-set! . uI2f84) (bytevector-s32-ref . uI2f83) (bytevector-s32-native-set! . uI2f82) (bytevector-s32-native-ref . uI2f81) (bytevector-s16-set! . uI2f80) (bytevector-s16-ref . uI2f7f) (bytevector-s16-native-set! . uI2f7e) (bytevector-s16-native-ref . uI2f7d) (bytevector-length . uI2f7c) (bytevector-ieee-single-ref . uI2f7b) (bytevector-ieee-single-set! . uI2f7a) (bytevector-ieee-single-native-set! . uI2f79) (bytevector-ieee-single-native-ref . uI2f78) (bytevector-ieee-double-set! . uI2f77) (bytevector-ieee-double-ref . uI2f76) (bytevector-ieee-double-native-set! . uI2f75) (bytevector-ieee-double-native-ref . uI2f74) (bytevector-fill! . uI2f73) (bytevector-copy! . uI2f72) (bytevector-copy . uI2f71) (bytevector->uint-list . uI2f70) (bytevector->u8-list . uI2f6f) (bytevector->sint-list . uI2f6e) (no-nans-violation? . uI2b86) (no-infinities-violation? . uI2b71) (make-no-nans-violation . uI2b84) (make-no-infinities-violation . uI2b6f) (real->flonum . uI2f6d) (flzero? . uI2f6c) (fltruncate . uI2f6b) (fltan . uI2f6a) (flsqrt . uI2f69) (flsin . uI2f68) (flround . uI2f67) (flpositive? . uI2f66) (flonum? . uI2f65) (flodd? . uI2f64) (flnumerator . uI2f63) (flnegative? . uI2f62) (flnan? . uI2f61) (flmod0 . uI2f60) (flmod . uI2f5f) (flmin . uI2f5e) (flmax . uI2f5d) (fllog . uI2f5c) (flinteger? . uI2f5b) (flinfinite? . uI2f5a) (flfloor . uI2f59) (flfinite? . uI2f58) (flexpt . uI2f57) (flexp . uI2f56) (fleven? . uI2f55) (fldiv0-and-mod0 . uI2f54) (fldiv0 . uI2f53) (fldiv-and-mod . uI2f52) (fldiv . uI2f51) (fldenominator . uI2f50) (flcos . uI2f4f) (flceiling . uI2f4e) (flatan . uI2f4d) (flasin . uI2f4c) (flacos . uI2f4b) (flabs . uI2f4a) (fl>? . uI2f49) (fl>=? . uI2f48) (fl=? . uI2f47) (fl<? . uI2f46) (fl<=? . uI2f45) (fl/ . uI2f44) (fl- . uI2f43) (fl+ . uI2f42) (fl* . uI2f41) (fixnum->flonum . uI2f40) (fxzero? . uI2f3f) (fxxor . uI2f3e) (fxrotate-bit-field . uI2f3d) (fxreverse-bit-field . uI2f3c) (fxpositive? . uI2f3b) (fxodd? . uI2f3a) (fxnot . uI2f39) (fxnegative? . uI2f38) (fxmod0 . uI2f37) (fxmod . uI2f36) (fxmin . uI2f35) (fxmax . uI2f34) (fxlength . uI2f33) (fxior . uI2f32) (fxif . uI2f31) (fxfirst-bit-set . uI2f30) (fxeven? . uI2f2f) (fxdiv0-and-mod0 . uI2f2e) (fxdiv0 . uI2f2d) (fxdiv-and-mod . uI2f2c) (fxdiv . uI2f2b) (fxcopy-bit-field . uI2f2a) (fxcopy-bit . uI2f29) (fxbit-set? . uI2f28) (fxbit-field . uI2f27) (fxbit-count . uI2f26) (fxarithmetic-shift-right . uI2f25) (fxarithmetic-shift-left . uI2f24) (fxarithmetic-shift . uI2f23) (fxand . uI2f22) (fx>? . uI2f21) (fx>=? . uI2f20) (fx=? . uI2f1f) (fx<? . uI2f1e) (fx<=? . uI2f1d) (fx-/carry . uI2f1c) (fx- . uI2f1b) (fx+/carry . uI2f1a) (fx+ . uI2f19) (fx*/carry . uI2f18) (fx* . uI2f17) (greatest-fixnum . uI2f16) (least-fixnum . uI2f15) (fixnum-width . uI2f14) (fixnum? . uI2f13) (bitwise-rotate-bit-field . uI2f12) (bitwise-reverse-bit-field . uI2f11) (bitwise-length . uI2f10) (bitwise-if . uI2f0f) (bitwise-first-bit-set . uI2f0e) (bitwise-copy-bit-field . uI2f0d) (bitwise-copy-bit . uI2f0c) (bitwise-bit-set? . uI2f0b) (bitwise-bit-field . uI2f0a) (bitwise-bit-count . uI2f09) (bitwise-xor . uI2f08) (bitwise-ior . uI2f07) (bitwise-and . uI2f06) (bitwise-not . uI2f05) (bitwise-arithmetic-shift-right . uI2f04) (bitwise-arithmetic-shift-left . uI2f03) (bitwise-arithmetic-shift . uI2f02) (zero? . uI2f01) (vector? . uI2f00) (vector-set! . uI2eff) (vector-ref . uI2efe) (vector-map . uI2efd) (vector-length . uI2efc) (vector-for-each . uI2efb) (vector-fill! . uI2efa) (vector->list . uI2ef9) (vector . uI2ef8) (values . uI2ef7) (truncate . uI2ef6) (tan . uI2ef5) (symbol? . uI2ef4) (symbol=? . uI2ef3) (symbol->string . uI2ef2) (substring . uI2ef1) (string? . uI2ef0) (string>? . uI2eef) (string>=? . uI2eee) (string=? . uI2eed) (string<? . uI2eec) (string<=? . uI2eeb) (string-ref . uI2eea) (string-length . uI2ee9) (string-for-each . uI2ee8) (string-copy . uI2ee7) (string-append . uI2ee6) (string->symbol . uI2ee5) (string->number . uI2ee4) (string->list . uI2ee3) (string . uI2ee2) (sqrt . uI2ee1) (sin . uI2ee0) (round . uI2edf) (reverse . uI2ede) (real? . uI2edd) (real-valued? . uI2edc) (real-part . uI2edb) (rationalize . uI2eda) (rational? . uI2ed9) (rational-valued? . uI2ed8) (procedure? . uI2ed7) (positive? . uI2ed6) (pair? . uI2ed5) (odd? . uI2ed4) (numerator . uI2ed3) (number? . uI2ed2) (number->string . uI2ed1) (null? . uI2ed0) (not . uI2ecf) (negative? . uI2ece) (nan? . uI2ecd) (min . uI2ecc) (max . uI2ecb) (map . uI2eca) (make-vector . uI2ec9) (make-string . uI2ec8) (make-rectangular . uI2ec7) (make-polar . uI2ec6) (magnitude . uI2ec5) (log . uI2ec4) (list? . uI2ec3) (list-tail . uI2ec2) (list-ref . uI2ec1) (list->vector . uI2ec0) (list->string . uI2ebf) (list . uI2ebe) (length . uI2ebd) (lcm . uI2ebc) (integer? . uI2ebb) (integer-valued? . uI2eba) (integer->char . uI2eb9) (infinite? . uI2eb8) (inexact? . uI2eb7) (inexact . uI2eb6) (imag-part . uI2eb5) (gcd . uI2eb4) (for-each . uI2eb3) (floor . uI2eb2) (finite? . uI2eb1) (expt . uI2eb0) (exp . uI2eaf) (exact? . uI2eae) (exact-integer-sqrt . uI2ead) (exact . uI2eac) (even? . uI2eab) (error . uI2eaa) (eqv? . uI2ea9) (equal? . uI2ea8) (eq? . uI2ea7) (dynamic-wind . uI2ea6) (div0-and-mod0 . uI2ea5) (mod0 . uI2ea4) (div0 . uI2ea3) (div-and-mod . uI2ea2) (mod . uI2ea1) (div . uI2ea0) (denominator . uI2e9f) (cos . uI2e9e) (cons . uI2e9d) (complex? . uI2e9c) (char? . uI2e9b) (char>? . uI2e9a) (char>=? . uI2e99) (char=? . uI2e98) (char<? . uI2e97) (char<=? . uI2e96) (char->integer . uI2e95) (ceiling . uI2e94) (call-with-values . uI2e93) (call/cc . uI2e92) (call-with-current-continuation . uI2e91) (cddddr . uI2e90) (cdddar . uI2e8f) (cddadr . uI2e8e) (cddaar . uI2e8d) (cdaddr . uI2e8c) (cdadar . uI2e8b) (cdaadr . uI2e8a) (cdaaar . uI2e89) (cadddr . uI2e88) (caddar . uI2e87) (cadadr . uI2e86) (cadaar . uI2e85) (caaddr . uI2e84) (caadar . uI2e83) (caaadr . uI2e82) (caaaar . uI2e81) (cdddr . uI2e80) (cddar . uI2e7f) (cdadr . uI2e7e) (cdaar . uI2e7d) (caddr . uI2e7c) (cadar . uI2e7b) (caadr . uI2e7a) (caaar . uI2e79) (cddr . uI2e78) (cdar . uI2e77) (cadr . uI2e76) (caar . uI2e75) (cdr . uI2e74) (car . uI2e73) (boolean? . uI2e72) (boolean=? . uI2e71) (atan . uI2e70) (assertion-violation . uI2e6f) (asin . uI2e6e) (apply . uI2e6d) (append . uI2e6c) (angle . uI2e6b) (acos . uI2e6a) (abs . uI2e69) (/ . uI2e68) (* . uI2e67) (- . uI2e66) (+ . uI2e65) (>= . uI2e64) (> . uI2e63) (= . uI2e62) (<= . uI2e61) (< . uI2e60) (&no-nans . uI2e5e) (&no-infinities . uI2e5d) (&i/o-encoding . uI2e5c) (&i/o-decoding . uI2e5b) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51) (&undefined . uI2e50) (&syntax . uI2e4f) (&lexical . uI2e4e) (&implementation-restriction . uI2e4d) (&non-continuable . uI2e4c) (&who . uI2e4b) (&irritants . uI2e4a) (&assertion . uI2e49) (&violation . uI2e48) (&error . uI2e47) (&serious . uI2e46) (&warning . uI2e45) (&message . uI2e44) (&condition . uI2e43) (define-condition-type . uI2e42) (define-enumeration . uI2e41) (define-record-type . uI2e40) (parent-rtd . uI2e3f) (nongenerative . uI2e3e) (opaque . uI2e3d) (sealed . uI2e3c) (protocol . uI2e3b) (parent . uI2e3a) (immutable . uI2e39) (mutable . uI2e38) (fields . uI2e37) (error-handling-mode . uI2e36) (file-options . uI2e35) (buffer-mode . uI2e34) (eol-style . uI2e33) (guard . uI2e32) (unsyntax-splicing . uI2e2f) (unsyntax . uI2e2e) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (_ . uI2e2b) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (assert . uI2e27) (endianness . uI2e26) (do . uI2e23) (cond . uI2e22) (let* . uI2e21) (let*-values . uI2e20) (let-values . uI2e1f) (identifier-syntax . uI2e1e) (with-syntax . uI2e1d) (quasisyntax . uI2e1c) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (record-constructor-descriptor . uI2e17) (record-type-descriptor . uI2e16) (case . uI2e15) (unless . uI2e13) (when . uI2e12) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec* . uI2e0d) (letrec . uI2e0c) (case-lambda . uI2e0a) (lambda . uI2e09) (syntax . uI2e08) (syntax-case . uI2e07) (quote . uI2e06) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (begin . uI2e00) (define-syntax . uI2dfe) (define . uI2dfd)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . uIe37) (quotient . uI2fe3) (null-environment . uIe35) (remainder . uI2fe2) (modulo . uI2fe1) (inexact->exact . uI2fe0) (force . uI2fdf) (exact->inexact . uI2fde) (make-promise . uI2fdd) (delay . uI2e25)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312e '(rnrs control) '(6) '() '() '() '((do . uI2e23) (unless . uI2e13) (when . uI2e12) (case-lambda . uI2e0a)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI312f '(rnrs eval) '(6) '() '() '() '((eval . uIe3b) (environment . uIe33)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3130 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . uI2fd9) (set-car! . uI2fd8)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3131 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . uI2fdb) (string-set! . uI2fda)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3132 '(rnrs programs) '(6) '() '() '() '((exit . uI2fdc) (command-line . uI2c95)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3133 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . uIba6) (identifier? . uIe5d) (generate-temporaries . uIe49) (free-identifier=? . uIe4b) (syntax->datum . uIe61) (datum->syntax . uIe5f) (bound-identifier=? . uIe4d) (syntax-violation . uIe5b) (unsyntax-splicing . uI2e2f) (unsyntax . uI2e2e) (_ . uI2e2b) (... . uI2e28) (with-syntax . uI2e1d) (quasisyntax . uI2e1c) (syntax . uI2e08) (syntax-case . uI2e07)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3134 '(rnrs files) '(6) '() '() '() '((delete-file . uI304c) (file-exists? . uI304b) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3135 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . uI304a) (vector-sort . uI3049) (list-sort . uI3048)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3136 '(rnrs base) '(6) '() '() '() '((zero? . uI2f01) (vector? . uI2f00) (vector-set! . uI2eff) (vector-ref . uI2efe) (vector-map . uI2efd) (vector-length . uI2efc) (vector-for-each . uI2efb) (vector-fill! . uI2efa) (vector->list . uI2ef9) (vector . uI2ef8) (values . uI2ef7) (truncate . uI2ef6) (tan . uI2ef5) (symbol? . uI2ef4) (symbol=? . uI2ef3) (symbol->string . uI2ef2) (substring . uI2ef1) (string? . uI2ef0) (string>? . uI2eef) (string>=? . uI2eee) (string=? . uI2eed) (string<? . uI2eec) (string<=? . uI2eeb) (string-ref . uI2eea) (string-length . uI2ee9) (string-for-each . uI2ee8) (string-copy . uI2ee7) (string-append . uI2ee6) (string->symbol . uI2ee5) (string->number . uI2ee4) (string->list . uI2ee3) (string . uI2ee2) (sqrt . uI2ee1) (sin . uI2ee0) (round . uI2edf) (reverse . uI2ede) (real? . uI2edd) (real-valued? . uI2edc) (real-part . uI2edb) (rationalize . uI2eda) (rational? . uI2ed9) (rational-valued? . uI2ed8) (procedure? . uI2ed7) (positive? . uI2ed6) (pair? . uI2ed5) (odd? . uI2ed4) (numerator . uI2ed3) (number? . uI2ed2) (number->string . uI2ed1) (null? . uI2ed0) (not . uI2ecf) (negative? . uI2ece) (nan? . uI2ecd) (min . uI2ecc) (max . uI2ecb) (map . uI2eca) (make-vector . uI2ec9) (make-string . uI2ec8) (make-rectangular . uI2ec7) (make-polar . uI2ec6) (magnitude . uI2ec5) (log . uI2ec4) (list? . uI2ec3) (list-tail . uI2ec2) (list-ref . uI2ec1) (list->vector . uI2ec0) (list->string . uI2ebf) (list . uI2ebe) (length . uI2ebd) (lcm . uI2ebc) (integer? . uI2ebb) (integer-valued? . uI2eba) (integer->char . uI2eb9) (infinite? . uI2eb8) (inexact? . uI2eb7) (inexact . uI2eb6) (imag-part . uI2eb5) (gcd . uI2eb4) (for-each . uI2eb3) (floor . uI2eb2) (finite? . uI2eb1) (expt . uI2eb0) (exp . uI2eaf) (exact? . uI2eae) (exact-integer-sqrt . uI2ead) (exact . uI2eac) (even? . uI2eab) (error . uI2eaa) (eqv? . uI2ea9) (equal? . uI2ea8) (eq? . uI2ea7) (dynamic-wind . uI2ea6) (div0-and-mod0 . uI2ea5) (mod0 . uI2ea4) (div0 . uI2ea3) (div-and-mod . uI2ea2) (mod . uI2ea1) (div . uI2ea0) (denominator . uI2e9f) (cos . uI2e9e) (cons . uI2e9d) (complex? . uI2e9c) (char? . uI2e9b) (char>? . uI2e9a) (char>=? . uI2e99) (char=? . uI2e98) (char<? . uI2e97) (char<=? . uI2e96) (char->integer . uI2e95) (ceiling . uI2e94) (call-with-values . uI2e93) (call/cc . uI2e92) (call-with-current-continuation . uI2e91) (cddddr . uI2e90) (cdddar . uI2e8f) (cddadr . uI2e8e) (cddaar . uI2e8d) (cdaddr . uI2e8c) (cdadar . uI2e8b) (cdaadr . uI2e8a) (cdaaar . uI2e89) (cadddr . uI2e88) (caddar . uI2e87) (cadadr . uI2e86) (cadaar . uI2e85) (caaddr . uI2e84) (caadar . uI2e83) (caaadr . uI2e82) (caaaar . uI2e81) (cdddr . uI2e80) (cddar . uI2e7f) (cdadr . uI2e7e) (cdaar . uI2e7d) (caddr . uI2e7c) (cadar . uI2e7b) (caadr . uI2e7a) (caaar . uI2e79) (cddr . uI2e78) (cdar . uI2e77) (cadr . uI2e76) (caar . uI2e75) (cdr . uI2e74) (car . uI2e73) (boolean? . uI2e72) (boolean=? . uI2e71) (atan . uI2e70) (assertion-violation . uI2e6f) (asin . uI2e6e) (apply . uI2e6d) (append . uI2e6c) (angle . uI2e6b) (acos . uI2e6a) (abs . uI2e69) (/ . uI2e68) (* . uI2e67) (- . uI2e66) (+ . uI2e65) (>= . uI2e64) (> . uI2e63) (= . uI2e62) (<= . uI2e61) (< . uI2e60) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (_ . uI2e2b) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (assert . uI2e27) (cond . uI2e22) (let* . uI2e21) (let*-values . uI2e20) (let-values . uI2e1f) (identifier-syntax . uI2e1e) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (case . uI2e15) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec* . uI2e0d) (letrec . uI2e0c) (lambda . uI2e09) (quote . uI2e06) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (begin . uI2e00) (define-syntax . uI2dfe) (define . uI2dfd)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3137 '(rnrs lists) '(6) '() '() '() '((remove . uI2fd7) (remv . uI2fd6) (remp . uI2fd5) (remq . uI2fd4) (partition . uI2fd3) (memv . uI2fd2) (memq . uI2fd1) (memp . uI2fd0) (member . uI2fcf) (exists . uI2fce) (for-all . uI2fcd) (fold-right . uI2fcc) (fold-left . uI2fcb) (find . uI2fca) (filter . uI2fc9) (cons* . uI2fc8) (assv . uI2fc7) (assq . uI2fc6) (assp . uI2fc5) (assoc . uI2fc4)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3138 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . uI3032) (call-with-input-file . uI3031) (write-char . uI3030) (write . uI302f) (with-output-to-file . uI302e) (with-input-from-file . uI302d) (read-char . uI302c) (read . uI302b) (peek-char . uI302a) (open-output-file . uI3029) (open-input-file . uI3028) (newline . uI3027) (display . uI3026) (close-output-port . uI3025) (close-input-port . uI3024) (eof-object? . uI3023) (eof-object . uI3022) (current-error-port . uI3021) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3139 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . uI2ff3) (utf32->string . uI2fa8) (utf16->string . uI2fa7) (utf8->string . uI2fa6) (uint-list->bytevector . uI2fa5) (u8-list->bytevector . uI2fa4) (string->utf8 . uI2fa3) (string->utf32 . uI2fa2) (string->utf16 . uI2fa1) (sint-list->bytevector . uI2fa0) (native-endianness . uI2f9f) (bytevector? . uI2f9e) (bytevector=? . uI2f9d) (bytevector-uint-set! . uI2f9c) (bytevector-uint-ref . uI2f9b) (bytevector-u8-set! . uI2f9a) (bytevector-u8-ref . uI2f99) (bytevector-u64-set! . uI2f98) (bytevector-u64-ref . uI2f97) (bytevector-u64-native-set! . uI2f96) (bytevector-u64-native-ref . uI2f95) (bytevector-u32-set! . uI2f94) (bytevector-u32-ref . uI2f93) (bytevector-u32-native-set! . uI2f92) (bytevector-u32-native-ref . uI2f91) (bytevector-u16-set! . uI2f90) (bytevector-u16-ref . uI2f8f) (bytevector-u16-native-set! . uI2f8e) (bytevector-u16-native-ref . uI2f8d) (bytevector-sint-set! . uI2f8c) (bytevector-sint-ref . uI2f8b) (bytevector-s8-set! . uI2f8a) (bytevector-s8-ref . uI2f89) (bytevector-s64-set! . uI2f88) (bytevector-s64-ref . uI2f87) (bytevector-s64-native-set! . uI2f86) (bytevector-s64-native-ref . uI2f85) (bytevector-s32-set! . uI2f84) (bytevector-s32-ref . uI2f83) (bytevector-s32-native-set! . uI2f82) (bytevector-s32-native-ref . uI2f81) (bytevector-s16-set! . uI2f80) (bytevector-s16-ref . uI2f7f) (bytevector-s16-native-set! . uI2f7e) (bytevector-s16-native-ref . uI2f7d) (bytevector-length . uI2f7c) (bytevector-ieee-single-ref . uI2f7b) (bytevector-ieee-single-set! . uI2f7a) (bytevector-ieee-single-native-set! . uI2f79) (bytevector-ieee-single-native-ref . uI2f78) (bytevector-ieee-double-set! . uI2f77) (bytevector-ieee-double-ref . uI2f76) (bytevector-ieee-double-native-set! . uI2f75) (bytevector-ieee-double-native-ref . uI2f74) (bytevector-fill! . uI2f73) (bytevector-copy! . uI2f72) (bytevector-copy . uI2f71) (bytevector->uint-list . uI2f70) (bytevector->u8-list . uI2f6f) (bytevector->sint-list . uI2f6e) (endianness . uI2e26)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313a '(rnrs unicode) '(6) '() '() '() '((string-upcase . uI307a) (string-titlecase . uI3079) (string-normalize-nfkd . uI3078) (string-normalize-nfkc . uI3077) (string-normalize-nfd . uI3076) (string-normalize-nfc . uI3075) (string-foldcase . uI3074) (string-downcase . uI3073) (string-ci>? . uI3072) (string-ci>=? . uI3071) (string-ci=? . uI3070) (string-ci<? . uI306f) (string-ci<=? . uI306e) (char-whitespace? . uI306d) (char-upper-case? . uI306c) (char-title-case? . uI306b) (char-numeric? . uI306a) (char-lower-case? . uI3069) (char-general-category . uI3068) (char-upcase . uI3067) (char-titlecase . uI3066) (char-foldcase . uI3065) (char-downcase . uI3064) (char-ci>? . uI3063) (char-ci>=? . uI3062) (char-ci=? . uI3061) (char-ci<? . uI3060) (char-ci<=? . uI305f) (char-alphabetic? . uI305e)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313b '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . uI2fbd) (raise-continuable . uI2fbc) (raise . uI2fbb) (guard . uI2e32) (else . uI2e2a) (=> . uI2e29)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313c '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . uI2f12) (bitwise-reverse-bit-field . uI2f11) (bitwise-length . uI2f10) (bitwise-if . uI2f0f) (bitwise-first-bit-set . uI2f0e) (bitwise-copy-bit-field . uI2f0d) (bitwise-copy-bit . uI2f0c) (bitwise-bit-set? . uI2f0b) (bitwise-bit-field . uI2f0a) (bitwise-bit-count . uI2f09) (bitwise-xor . uI2f08) (bitwise-ior . uI2f07) (bitwise-and . uI2f06) (bitwise-not . uI2f05) (bitwise-arithmetic-shift-right . uI2f04) (bitwise-arithmetic-shift-left . uI2f03) (bitwise-arithmetic-shift . uI2f02)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313d '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . uI2f3f) (fxxor . uI2f3e) (fxrotate-bit-field . uI2f3d) (fxreverse-bit-field . uI2f3c) (fxpositive? . uI2f3b) (fxodd? . uI2f3a) (fxnot . uI2f39) (fxnegative? . uI2f38) (fxmod0 . uI2f37) (fxmod . uI2f36) (fxmin . uI2f35) (fxmax . uI2f34) (fxlength . uI2f33) (fxior . uI2f32) (fxif . uI2f31) (fxfirst-bit-set . uI2f30) (fxeven? . uI2f2f) (fxdiv0-and-mod0 . uI2f2e) (fxdiv0 . uI2f2d) (fxdiv-and-mod . uI2f2c) (fxdiv . uI2f2b) (fxcopy-bit-field . uI2f2a) (fxcopy-bit . uI2f29) (fxbit-set? . uI2f28) (fxbit-field . uI2f27) (fxbit-count . uI2f26) (fxarithmetic-shift-right . uI2f25) (fxarithmetic-shift-left . uI2f24) (fxarithmetic-shift . uI2f23) (fxand . uI2f22) (fx>? . uI2f21) (fx>=? . uI2f20) (fx=? . uI2f1f) (fx<? . uI2f1e) (fx<=? . uI2f1d) (fx-/carry . uI2f1c) (fx- . uI2f1b) (fx+/carry . uI2f1a) (fx+ . uI2f19) (fx*/carry . uI2f18) (fx* . uI2f17) (greatest-fixnum . uI2f16) (least-fixnum . uI2f15) (fixnum-width . uI2f14) (fixnum? . uI2f13)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313e '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . uI2b86) (no-infinities-violation? . uI2b71) (make-no-nans-violation . uI2b84) (make-no-infinities-violation . uI2b6f) (real->flonum . uI2f6d) (flzero? . uI2f6c) (fltruncate . uI2f6b) (fltan . uI2f6a) (flsqrt . uI2f69) (flsin . uI2f68) (flround . uI2f67) (flpositive? . uI2f66) (flonum? . uI2f65) (flodd? . uI2f64) (flnumerator . uI2f63) (flnegative? . uI2f62) (flnan? . uI2f61) (flmod0 . uI2f60) (flmod . uI2f5f) (flmin . uI2f5e) (flmax . uI2f5d) (fllog . uI2f5c) (flinteger? . uI2f5b) (flinfinite? . uI2f5a) (flfloor . uI2f59) (flfinite? . uI2f58) (flexpt . uI2f57) (flexp . uI2f56) (fleven? . uI2f55) (fldiv0-and-mod0 . uI2f54) (fldiv0 . uI2f53) (fldiv-and-mod . uI2f52) (fldiv . uI2f51) (fldenominator . uI2f50) (flcos . uI2f4f) (flceiling . uI2f4e) (flatan . uI2f4d) (flasin . uI2f4c) (flacos . uI2f4b) (flabs . uI2f4a) (fl>? . uI2f49) (fl>=? . uI2f48) (fl=? . uI2f47) (fl<? . uI2f46) (fl<=? . uI2f45) (fl/ . uI2f44) (fl- . uI2f43) (fl+ . uI2f42) (fl* . uI2f41) (fixnum->flonum . uI2f40) (&no-nans . uI2e5e) (&no-infinities . uI2e5d)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI313f '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . uI3047) (string-ci-hash . uI3046) (string-hash . uI3045) (equal-hash . uI3044) (hashtable-equivalence-function . uI3043) (make-hashtable . uI3042) (hashtable-hash-function . uI3041) (make-eqv-hashtable . uI3040) (make-eq-hashtable . uI303f) (hashtable? . uI303e) (hashtable-update! . uI303d) (hashtable-size . uI303c) (hashtable-set! . uI303b) (hashtable-ref . uI303a) (hashtable-mutable? . uI3039) (hashtable-keys . uI3038) (hashtable-entries . uI3037) (hashtable-delete! . uI3036) (hashtable-copy . uI3035) (hashtable-contains? . uI3034) (hashtable-clear! . uI3033)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3140 '(rnrs io ports) '(6) '() '() '() '((eof-object? . uI3023) (eof-object . uI3022) (current-error-port . uI3021) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (utf-8-codec . uI301c) (utf-16-codec . uI301b) (transcoder-error-handling-mode . uI301a) (transcoder-eol-style . uI3019) (transcoder-codec . uI3018) (transcoded-port . uI3017) (textual-port? . uI3016) (string->bytevector . uI3015) (standard-output-port . uI3014) (standard-input-port . uI3013) (standard-error-port . uI3012) (set-port-position! . uI3011) (put-u8 . uI3010) (put-string . uI300f) (put-datum . uI300e) (put-char . uI300d) (put-bytevector . uI300c) (port? . uI300b) (port-transcoder . uI300a) (port-position . uI3009) (port-has-set-port-position!? . uI3008) (port-has-port-position? . uI3007) (port-eof? . uI3006) (output-port-buffer-mode . uI3005) (open-string-output-port . uI3004) (open-string-input-port . uI3003) (open-file-output-port . uI3002) (open-file-input/output-port . uI3001) (open-file-input-port . uI3000) (open-bytevector-output-port . uI2fff) (open-bytevector-input-port . uI2ffe) (native-transcoder . uI2ffd) (native-eol-style . uI2ffc) (make-transcoder . uI2ffb) (latin-1-codec . uI2ffa) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (make-i/o-encoding-error . uI2b56) (make-i/o-decoding-error . uI2b3f) (make-custom-textual-output-port . uI2ff9) (make-custom-textual-input/output-port . uI2ff8) (make-custom-textual-input-port . uI2ff7) (make-custom-binary-output-port . uI2ff6) (make-custom-binary-input/output-port . uI2ff5) (make-custom-binary-input-port . uI2ff4) (lookahead-u8 . uI2ff2) (lookahead-char . uI2ff1) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (i/o-encoding-error? . uI2b5a) (i/o-encoding-error-char . uI2b5c) (i/o-decoding-error? . uI2b41) (get-u8 . uI2ff0) (get-string-n! . uI2fef) (get-string-n . uI2fee) (get-string-all . uI2fed) (get-line . uI2fec) (get-datum . uI2feb) (get-char . uI2fea) (get-bytevector-some . uI2fe9) (get-bytevector-n! . uI2fe8) (get-bytevector-n . uI2fe7) (get-bytevector-all . uI2fe6) (flush-output-port . uI2fe5) (close-port . uI2fe4) (call-with-string-output-port . uI2fc3) (call-with-port . uI2fc2) (call-with-bytevector-output-port . uI2fc1) (bytevector->string . uI2fc0) (buffer-mode? . uI2fbf) (binary-port? . uI2fbe) (&i/o-encoding . uI2e5c) (&i/o-decoding . uI2e5b) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51) (error-handling-mode . uI2e36) (file-options . uI2e35) (buffer-mode . uI2e34) (eol-style . uI2e33)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3141 '(rnrs enums) '(6) '() '() '() '((make-enumeration . uI2fba) (enum-set=? . uI2fb9) (enum-set-universe . uI2fb8) (enum-set-union . uI2fb7) (enum-set-subset? . uI2fb6) (enum-set-projection . uI2fb5) (enum-set-member? . uI2fb4) (enum-set-intersection . uI2fb3) (enum-set-indexer . uI2fb2) (enum-set-difference . uI2fb1) (enum-set-constructor . uI2fb0) (enum-set-complement . uI2faf) (enum-set->list . uI2fae) (define-enumeration . uI2e41)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3142 '(rnrs conditions) '(6) '() '() '() '((who-condition? . uI29d1) (warning? . uI2949) (violation? . uI2988) (undefined-violation? . uI2a48) (syntax-violation? . uI2a2f) (syntax-violation-subform . uI2a33) (syntax-violation-form . uI2a31) (syntax-violation . uIe5b) (simple-conditions . uI2fad) (serious-condition? . uI295e) (non-continuable-violation? . uI29e8) (message-condition? . uI2932) (make-who-condition . uI29cd) (make-warning . uI2947) (make-violation . uI2986) (make-undefined-violation . uI2a46) (make-syntax-violation . uI2a29) (make-serious-condition . uI295c) (make-non-continuable-violation . uI29e6) (make-message-condition . uI292e) (make-lexical-violation . uI2a10) (make-irritants-condition . uI29b2) (make-implementation-restriction-violation . uI29fb) (make-error . uI2971) (make-assertion-violation . uI299b) (lexical-violation? . uI2a12) (irritants-condition? . uI29b6) (implementation-restriction-violation? . uI29fd) (error? . uI2973) (condition-who . uI29d3) (condition-predicate . uI2fac) (condition-message . uI2934) (condition-irritants . uI29b8) (condition-accessor . uI2fab) (condition . uI2faa) (assertion-violation? . uI299d) (condition? . uI2fa9) (&undefined . uI2e50) (&syntax . uI2e4f) (&lexical . uI2e4e) (&implementation-restriction . uI2e4d) (&non-continuable . uI2e4c) (&who . uI2e4b) (&irritants . uI2e4a) (&assertion . uI2e49) (&violation . uI2e48) (&error . uI2e47) (&serious . uI2e46) (&warning . uI2e45) (&message . uI2e44) (&condition . uI2e43) (define-condition-type . uI2e42)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3143 '(rnrs records inspection) '(6) '() '() '() '((record? . uI3056) (record-type-uid . uI3055) (record-type-sealed? . uI3054) (record-type-parent . uI3053) (record-type-opaque? . uI3052) (record-type-name . uI3051) (record-type-generative? . uI3050) (record-type-field-names . uI304f) (record-rtd . uI304e) (record-field-mutable? . uI304d)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3144 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . uI305d) (record-predicate . uI305c) (record-mutator . uI305b) (record-constructor . uI305a) (record-accessor . uI3059) (make-record-type-descriptor . uI3058) (make-record-constructor-descriptor . uI3057)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3145 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . uI2e40) (parent-rtd . uI2e3f) (nongenerative . uI2e3e) (opaque . uI2e3d) (sealed . uI2e3c) (protocol . uI2e3b) (parent . uI2e3a) (immutable . uI2e39) (mutable . uI2e38) (fields . uI2e37) (record-constructor-descriptor . uI2e17) (record-type-descriptor . uI2e16)) '() values values '#f '#f '#t '#f) (uI989@uI7d5@install-library 'uI3146 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . uI2b8a) (&no-nans-rtd . uI2b88) (&no-infinities-rcd . uI2b75) (&no-infinities-rtd . uI2b73) (&i/o-encoding-rcd . uI2b60) (&i/o-encoding-rtd . uI2b5e) (&i/o-decoding-rcd . uI2b45) (&i/o-decoding-rtd . uI2b43) (&i/o-port-rcd . uI2b30) (&i/o-port-rtd . uI2b2e) (&i/o-file-does-not-exist-rcd . uI2b15) (&i/o-file-does-not-exist-rtd . uI2b13) (&i/o-file-already-exists-rcd . uI2b00) (&i/o-file-already-exists-rtd . uI2afe) (&i/o-file-is-read-only-rcd . uI2aeb) (&i/o-file-is-read-only-rtd . uI2ae9) (&i/o-file-protection-rcd . uI2ad6) (&i/o-file-protection-rtd . uI2ad4) (&i/o-filename-rcd . uI2ac1) (&i/o-filename-rtd . uI2abf) (&i/o-invalid-position-rcd . uI2aa6) (&i/o-invalid-position-rtd . uI2aa4) (&i/o-write-rcd . uI2a8b) (&i/o-write-rtd . uI2a89) (&i/o-read-rcd . uI2a76) (&i/o-read-rtd . uI2a74) (&i/o-rcd . uI2a61) (&i/o-rtd . uI2a5f) (&undefined-rcd . uI2a4c) (&undefined-rtd . uI2a4a) (&syntax-rcd . uI2a37) (&syntax-rtd . uI2a35) (&lexical-rcd . uI2a16) (&lexical-rtd . uI2a14) (&implementation-restriction-rcd . uI2a01) (&implementation-restriction-rtd . uI29ff) (&non-continuable-rcd . uI29ec) (&non-continuable-rtd . uI29ea) (&who-rcd . uI29d7) (&who-rtd . uI29d5) (&irritants-rcd . uI29bc) (&irritants-rtd . uI29ba) (&assertion-rcd . uI29a1) (&assertion-rtd . uI299f) (&violation-rcd . uI298c) (&violation-rtd . uI298a) (&error-rcd . uI2977) (&error-rtd . uI2975) (&serious-rcd . uI2962) (&serious-rtd . uI2960) (&warning-rcd . uI294d) (&warning-rtd . uI294b) (&message-rcd . uI2938) (&message-rtd . uI2936) (&condition-rcd . uI28d9) (&condition-rtd . uI28d7) (syntax-error . uIe57) (syntax-dispatch . uId7b) (pretty-print . uI3126) (eval-core . uI3125) (set-symbol-value! . uI3124) (symbol-value . uI3123) (gensym . uI3122) (void . uI3121) (load . uI2c9b) (interaction-environment . uIe69) (char-ready? . uI3120) (regexp? . uI311f) (read-line . uI311e) (gensym-prefix-set! . uI311d) (ungensym . uI311c) (alist->eq-hash-table . uI311b) (assoc-ref . uI311a) (print . uI3119) (format . uI3118) (host-os . uI3117) (library-path . uI7b4) (standard-library-path . uI3116) (file-newer? . uI3115) (stat-mtime . uI3114) (write-to-file . uI3113) (file->list . uI3112) (file->string . uI3111) (digit->integer . uI3110) (call-with-string-input-port . uI310f) (call-with-string-io . uI310e) (string-split . uI310d) (bytevector-for-each . uI310c) (string->regexp . uI310b) (rxmatch . uI310a) (regexp-replace-all . uI3109) (hashtable-for-each . uI3108) (mosh-cache-dir . uI59f) (call-process . uI3107) (local-tz-offset . uI3106) (microseconds . uI3105) (directory-list . uI3104) (set-current-directory! . uI3103) (expand-path . uI3102) (current-directory . uI3101) (%spawn . uI3100) (%waitpid . uI30ff) (simple-struct-name . uI30fe) (simple-struct-set! . uI30fd) (simple-struct-ref . uI30fc) (make-simple-struct . uI30fb) (simple-struct? . uI30fa) (pointer-ref-c-int64 . uI30f9) (pointer-ref-c-int32 . uI30f8) (pointer-ref-c-int16 . uI30f7) (pointer-ref-c-int8 . uI30f6) (pointer-ref-c-uint64 . uI30f5) (pointer-ref-c-uint32 . uI30f4) (pointer-ref-c-uint16 . uI30f3) (pointer-ref-c-uint8 . uI30f2) (pointer-set-c-uint64! . uI30f1) (pointer-set-c-uint32! . uI30f0) (pointer-set-c-uint16! . uI30ef) (pointer-set-c-uint8! . uI30ee) (pointer-set-c-int64! . uI30ed) (pointer-set-c-int32! . uI30ec) (pointer-set-c-int16! . uI30eb) (pointer-set-c-int8! . uI30ea) (pointer-set-c-pointer! . uI30e9) (pointer-set-c-double! . uI30e8) (pointer-set-c-float! . uI30e7) (pointer-set-c-long-long! . uI30e6) (pointer-set-c-long! . uI30e5) (pointer-set-c-int! . uI30e4) (pointer-set-c-short! . uI30e3) (pointer-set-c-char! . uI30e2) (pointer-ref-c-pointer . uI30e1) (pointer-ref-c-double . uI30e0) (pointer-ref-c-float . uI30df) (pointer-ref-c-unsigned-long-long . uI30de) (pointer-ref-c-signed-long-long . uI30dd) (pointer-ref-c-unsigned-long . uI30dc) (pointer-ref-c-signed-long . uI30db) (pointer-ref-c-unsigned-int . uI30da) (pointer-ref-c-signed-int . uI30d9) (pointer-ref-c-unsigned-short . uI30d8) (pointer-ref-c-signed-short . uI30d7) (pointer-ref-c-unsigned-char . uI30d6) (pointer-ref-c-signed-char . uI30d5) (pointer->integer . uI30d4) (integer->pointer . uI30d3) (pointer? . uI30d2) (shared-errno . uI30d1) (%ffi-free-c-callback-trampoline . uI30d0) (%ffi-make-c-callback-trampoline . uI30cf) (%ffi-free . uI30ce) (%ffi-malloc . uI30cd) (%ffi-supported? . uI30cc) (%ffi-pointer->string . uI30cb) (%ffi-call->string-or-zero . uI30ca) (%ffi-call->double . uI30c9) (%ffi-call->void* . uI30c8) (%ffi-call->void . uI30c7) (%ffi-call->char . uI30c6) (%ffi-call->int . uI30c5) (%ffi-lookup . uI30c4) (%ffi-open . uI30c3) (%fork . uI30c2) (%pipe . uI30c1) (p . uI30c0) (open-output-string . uI30bf) (get-output-string . uI30be) (file-stat-ctime . uI30bd) (file-stat-atime . uI30bc) (file-stat-mtime . uI30bb) (file-size-in-bytes . uI30ba) (file-writable? . uI30b9) (file-executable? . uI30b8) (file-readable? . uI30b7) (file-regular? . uI30b6) (file-symbolic-link? . uI30b5) (file-directory? . uI30b4) (create-symbolic-link . uI30b3) (rename-file . uI30b2) (delete-directory . uI30b1) (create-directory . uI30b0) (create-mosh-cache-dir . uI30af) (get-environment-variables . uI30ae) (current-exception-handler . uI30ad) (get-environment-variable . uI30ac) (join-wraps . uI30ab) (id->real-label . uI30aa) (same-marks? . uI30a9) (same-marks*? . uI30a8) (get-timeofday . uI30a7) (get-command-line . uI30a6) (sys-display . uI30a5) (whereis . uI30a4) (register . uI30a3) (vm-join! . uI30a2) (vm-set-value! . uI30a1) (vm? . uI30a0) (main-vm? . uI309f) (vm-eval . uI309e) (vm-self . uI309d) (vm-start! . uI309c) (make-vm . uI309b) (mutex-try-lock! . uI309a) (mutex-unlock! . uI3099) (mutex-lock! . uI3098) (mutex? . uI3097) (make-mutex . uI3096) (condition-variable-notify-all! . uI3095) (condition-variable-notify! . uI3094) (condition-variable-wait! . uI3093) (make-condition-variable . uI3092) (mosh-executable-path . uI3091) (make-file-options . uI3090) (source-info . uI308f) (make-compiler-instruction . uI308e) (make-instruction . uI308d) (set-source-info! . uI308c) (bignum? . uI308b) (fast-equal? . uI308a) (fasl-read . uI3089) (fasl-write . uI3088) (time-usage . uI3087) (os-constant . uI3086) (disasm . uI3085) (make-parameter . uI59d) (socket-port . uI3084) (socket-shutdown . uI3083) (socket-close . uI3082) (socket-send . uI3081) (socket-recv! . uI3080) (socket-recv . uI307f) (make-server-socket . uI307e) (make-client-socket . uI307d) (socket-accept . uI307c) (socket? . uI307b) (string-upcase . uI307a) (string-titlecase . uI3079) (string-normalize-nfkd . uI3078) (string-normalize-nfkc . uI3077) (string-normalize-nfd . uI3076) (string-normalize-nfc . uI3075) (string-foldcase . uI3074) (string-downcase . uI3073) (string-ci>? . uI3072) (string-ci>=? . uI3071) (string-ci=? . uI3070) (string-ci<? . uI306f) (string-ci<=? . uI306e) (char-whitespace? . uI306d) (char-upper-case? . uI306c) (char-title-case? . uI306b) (char-numeric? . uI306a) (char-lower-case? . uI3069) (char-general-category . uI3068) (char-upcase . uI3067) (char-titlecase . uI3066) (char-foldcase . uI3065) (char-downcase . uI3064) (char-ci>? . uI3063) (char-ci>=? . uI3062) (char-ci=? . uI3061) (char-ci<? . uI3060) (char-ci<=? . uI305f) (char-alphabetic? . uI305e) (make-variable-transformer . uIba6) (identifier? . uIe5d) (generate-temporaries . uIe49) (free-identifier=? . uIe4b) (syntax->datum . uIe61) (datum->syntax . uIe5f) (bound-identifier=? . uIe4d) (record-type-descriptor? . uI305d) (record-predicate . uI305c) (record-mutator . uI305b) (record-constructor . uI305a) (record-accessor . uI3059) (make-record-type-descriptor . uI3058) (make-record-constructor-descriptor . uI3057) (record? . uI3056) (record-type-uid . uI3055) (record-type-sealed? . uI3054) (record-type-parent . uI3053) (record-type-opaque? . uI3052) (record-type-name . uI3051) (record-type-generative? . uI3050) (record-type-field-names . uI304f) (record-rtd . uI304e) (record-field-mutable? . uI304d) (delete-file . uI304c) (file-exists? . uI304b) (vector-sort! . uI304a) (vector-sort . uI3049) (list-sort . uI3048) (symbol-hash . uI3047) (string-ci-hash . uI3046) (string-hash . uI3045) (equal-hash . uI3044) (hashtable-equivalence-function . uI3043) (make-hashtable . uI3042) (hashtable-hash-function . uI3041) (make-eqv-hashtable . uI3040) (make-eq-hashtable . uI303f) (hashtable? . uI303e) (hashtable-update! . uI303d) (hashtable-size . uI303c) (hashtable-set! . uI303b) (hashtable-ref . uI303a) (hashtable-mutable? . uI3039) (hashtable-keys . uI3038) (hashtable-entries . uI3037) (hashtable-delete! . uI3036) (hashtable-copy . uI3035) (hashtable-contains? . uI3034) (hashtable-clear! . uI3033) (call-with-output-file . uI3032) (call-with-input-file . uI3031) (write-char . uI3030) (write . uI302f) (with-output-to-file . uI302e) (with-input-from-file . uI302d) (read-char . uI302c) (read . uI302b) (peek-char . uI302a) (open-output-file . uI3029) (open-input-file . uI3028) (newline . uI3027) (display . uI3026) (close-output-port . uI3025) (close-input-port . uI3024) (eof-object? . uI3023) (eof-object . uI3022) (current-error-port . uI3021) (current-output-port . uI3020) (current-input-port . uI301f) (output-port? . uI301e) (input-port? . uI301d) (utf-8-codec . uI301c) (utf-16-codec . uI301b) (transcoder-error-handling-mode . uI301a) (transcoder-eol-style . uI3019) (transcoder-codec . uI3018) (transcoded-port . uI3017) (textual-port? . uI3016) (string->bytevector . uI3015) (standard-output-port . uI3014) (standard-input-port . uI3013) (standard-error-port . uI3012) (set-port-position! . uI3011) (put-u8 . uI3010) (put-string . uI300f) (put-datum . uI300e) (put-char . uI300d) (put-bytevector . uI300c) (port? . uI300b) (port-transcoder . uI300a) (port-position . uI3009) (port-has-set-port-position!? . uI3008) (port-has-port-position? . uI3007) (port-eof? . uI3006) (output-port-buffer-mode . uI3005) (open-string-output-port . uI3004) (open-string-input-port . uI3003) (open-file-output-port . uI3002) (open-file-input/output-port . uI3001) (open-file-input-port . uI3000) (open-bytevector-output-port . uI2fff) (open-bytevector-input-port . uI2ffe) (native-transcoder . uI2ffd) (native-eol-style . uI2ffc) (make-transcoder . uI2ffb) (latin-1-codec . uI2ffa) (make-i/o-write-error . uI2a85) (make-i/o-read-error . uI2a70) (make-i/o-port-error . uI2b26) (make-i/o-invalid-position-error . uI2a9c) (make-i/o-filename-error . uI2ab7) (make-i/o-file-protection-error . uI2ad0) (make-i/o-file-is-read-only-error . uI2ae5) (make-i/o-file-does-not-exist-error . uI2b0f) (make-i/o-file-already-exists-error . uI2afa) (make-i/o-error . uI2a5b) (make-i/o-encoding-error . uI2b56) (make-i/o-decoding-error . uI2b3f) (make-custom-textual-output-port . uI2ff9) (make-custom-textual-input/output-port . uI2ff8) (make-custom-textual-input-port . uI2ff7) (make-custom-binary-output-port . uI2ff6) (make-custom-binary-input/output-port . uI2ff5) (make-custom-binary-input-port . uI2ff4) (make-bytevector . uI2ff3) (lookahead-u8 . uI2ff2) (lookahead-char . uI2ff1) (i/o-write-error? . uI2a87) (i/o-read-error? . uI2a72) (i/o-port-error? . uI2b2a) (i/o-invalid-position-error? . uI2aa0) (i/o-filename-error? . uI2abb) (i/o-file-protection-error? . uI2ad2) (i/o-file-is-read-only-error? . uI2ae7) (i/o-file-does-not-exist-error? . uI2b11) (i/o-file-already-exists-error? . uI2afc) (i/o-error? . uI2a5d) (i/o-error-position . uI2aa2) (i/o-error-port . uI2b2c) (i/o-error-filename . uI2abd) (i/o-encoding-error? . uI2b5a) (i/o-encoding-error-char . uI2b5c) (i/o-decoding-error? . uI2b41) (get-u8 . uI2ff0) (get-string-n! . uI2fef) (get-string-n . uI2fee) (get-string-all . uI2fed) (get-line . uI2fec) (get-datum . uI2feb) (get-char . uI2fea) (get-bytevector-some . uI2fe9) (get-bytevector-n! . uI2fe8) (get-bytevector-n . uI2fe7) (get-bytevector-all . uI2fe6) (flush-output-port . uI2fe5) (close-port . uI2fe4) (scheme-report-environment . uIe37) (quotient . uI2fe3) (null-environment . uIe35) (remainder . uI2fe2) (modulo . uI2fe1) (inexact->exact . uI2fe0) (force . uI2fdf) (exact->inexact . uI2fde) (make-promise . uI2fdd) (exit . uI2fdc) (command-line . uI2c95) (string-fill! . uI2fdb) (string-set! . uI2fda) (set-cdr! . uI2fd9) (set-car! . uI2fd8) (remove . uI2fd7) (remv . uI2fd6) (remp . uI2fd5) (remq . uI2fd4) (partition . uI2fd3) (memv . uI2fd2) (memq . uI2fd1) (memp . uI2fd0) (member . uI2fcf) (exists . uI2fce) (for-all . uI2fcd) (fold-right . uI2fcc) (fold-left . uI2fcb) (find . uI2fca) (filter . uI2fc9) (cons* . uI2fc8) (assv . uI2fc7) (assq . uI2fc6) (assp . uI2fc5) (assoc . uI2fc4) (call-with-string-output-port . uI2fc3) (call-with-port . uI2fc2) (call-with-bytevector-output-port . uI2fc1) (bytevector->string . uI2fc0) (buffer-mode? . uI2fbf) (binary-port? . uI2fbe) (with-exception-handler . uI2fbd) (raise-continuable . uI2fbc) (raise . uI2fbb) (eval . uIe3b) (environment . uIe33) (make-enumeration . uI2fba) (enum-set=? . uI2fb9) (enum-set-universe . uI2fb8) (enum-set-union . uI2fb7) (enum-set-subset? . uI2fb6) (enum-set-projection . uI2fb5) (enum-set-member? . uI2fb4) (enum-set-intersection . uI2fb3) (enum-set-indexer . uI2fb2) (enum-set-difference . uI2fb1) (enum-set-constructor . uI2fb0) (enum-set-complement . uI2faf) (enum-set->list . uI2fae) (who-condition? . uI29d1) (warning? . uI2949) (violation? . uI2988) (undefined-violation? . uI2a48) (syntax-violation? . uI2a2f) (syntax-violation-subform . uI2a33) (syntax-violation-form . uI2a31) (syntax-violation . uIe5b) (simple-conditions . uI2fad) (serious-condition? . uI295e) (non-continuable-violation? . uI29e8) (message-condition? . uI2932) (make-who-condition . uI29cd) (make-warning . uI2947) (make-violation . uI2986) (make-undefined-violation . uI2a46) (make-syntax-violation . uI2a29) (make-serious-condition . uI295c) (make-non-continuable-violation . uI29e6) (make-message-condition . uI292e) (make-lexical-violation . uI2a10) (make-irritants-condition . uI29b2) (make-implementation-restriction-violation . uI29fb) (make-error . uI2971) (make-assertion-violation . uI299b) (lexical-violation? . uI2a12) (irritants-condition? . uI29b6) (implementation-restriction-violation? . uI29fd) (error? . uI2973) (condition-who . uI29d3) (condition-predicate . uI2fac) (condition-message . uI2934) (condition-irritants . uI29b8) (condition-accessor . uI2fab) (condition . uI2faa) (assertion-violation? . uI299d) (condition? . uI2fa9) (utf32->string . uI2fa8) (utf16->string . uI2fa7) (utf8->string . uI2fa6) (uint-list->bytevector . uI2fa5) (u8-list->bytevector . uI2fa4) (string->utf8 . uI2fa3) (string->utf32 . uI2fa2) (string->utf16 . uI2fa1) (sint-list->bytevector . uI2fa0) (native-endianness . uI2f9f) (bytevector? . uI2f9e) (bytevector=? . uI2f9d) (bytevector-uint-set! . uI2f9c) (bytevector-uint-ref . uI2f9b) (bytevector-u8-set! . uI2f9a) (bytevector-u8-ref . uI2f99) (bytevector-u64-set! . uI2f98) (bytevector-u64-ref . uI2f97) (bytevector-u64-native-set! . uI2f96) (bytevector-u64-native-ref . uI2f95) (bytevector-u32-set! . uI2f94) (bytevector-u32-ref . uI2f93) (bytevector-u32-native-set! . uI2f92) (bytevector-u32-native-ref . uI2f91) (bytevector-u16-set! . uI2f90) (bytevector-u16-ref . uI2f8f) (bytevector-u16-native-set! . uI2f8e) (bytevector-u16-native-ref . uI2f8d) (bytevector-sint-set! . uI2f8c) (bytevector-sint-ref . uI2f8b) (bytevector-s8-set! . uI2f8a) (bytevector-s8-ref . uI2f89) (bytevector-s64-set! . uI2f88) (bytevector-s64-ref . uI2f87) (bytevector-s64-native-set! . uI2f86) (bytevector-s64-native-ref . uI2f85) (bytevector-s32-set! . uI2f84) (bytevector-s32-ref . uI2f83) (bytevector-s32-native-set! . uI2f82) (bytevector-s32-native-ref . uI2f81) (bytevector-s16-set! . uI2f80) (bytevector-s16-ref . uI2f7f) (bytevector-s16-native-set! . uI2f7e) (bytevector-s16-native-ref . uI2f7d) (bytevector-length . uI2f7c) (bytevector-ieee-single-ref . uI2f7b) (bytevector-ieee-single-set! . uI2f7a) (bytevector-ieee-single-native-set! . uI2f79) (bytevector-ieee-single-native-ref . uI2f78) (bytevector-ieee-double-set! . uI2f77) (bytevector-ieee-double-ref . uI2f76) (bytevector-ieee-double-native-set! . uI2f75) (bytevector-ieee-double-native-ref . uI2f74) (bytevector-fill! . uI2f73) (bytevector-copy! . uI2f72) (bytevector-copy . uI2f71) (bytevector->uint-list . uI2f70) (bytevector->u8-list . uI2f6f) (bytevector->sint-list . uI2f6e) (no-nans-violation? . uI2b86) (no-infinities-violation? . uI2b71) (make-no-nans-violation . uI2b84) (make-no-infinities-violation . uI2b6f) (real->flonum . uI2f6d) (flzero? . uI2f6c) (fltruncate . uI2f6b) (fltan . uI2f6a) (flsqrt . uI2f69) (flsin . uI2f68) (flround . uI2f67) (flpositive? . uI2f66) (flonum? . uI2f65) (flodd? . uI2f64) (flnumerator . uI2f63) (flnegative? . uI2f62) (flnan? . uI2f61) (flmod0 . uI2f60) (flmod . uI2f5f) (flmin . uI2f5e) (flmax . uI2f5d) (fllog . uI2f5c) (flinteger? . uI2f5b) (flinfinite? . uI2f5a) (flfloor . uI2f59) (flfinite? . uI2f58) (flexpt . uI2f57) (flexp . uI2f56) (fleven? . uI2f55) (fldiv0-and-mod0 . uI2f54) (fldiv0 . uI2f53) (fldiv-and-mod . uI2f52) (fldiv . uI2f51) (fldenominator . uI2f50) (flcos . uI2f4f) (flceiling . uI2f4e) (flatan . uI2f4d) (flasin . uI2f4c) (flacos . uI2f4b) (flabs . uI2f4a) (fl>? . uI2f49) (fl>=? . uI2f48) (fl=? . uI2f47) (fl<? . uI2f46) (fl<=? . uI2f45) (fl/ . uI2f44) (fl- . uI2f43) (fl+ . uI2f42) (fl* . uI2f41) (fixnum->flonum . uI2f40) (fxzero? . uI2f3f) (fxxor . uI2f3e) (fxrotate-bit-field . uI2f3d) (fxreverse-bit-field . uI2f3c) (fxpositive? . uI2f3b) (fxodd? . uI2f3a) (fxnot . uI2f39) (fxnegative? . uI2f38) (fxmod0 . uI2f37) (fxmod . uI2f36) (fxmin . uI2f35) (fxmax . uI2f34) (fxlength . uI2f33) (fxior . uI2f32) (fxif . uI2f31) (fxfirst-bit-set . uI2f30) (fxeven? . uI2f2f) (fxdiv0-and-mod0 . uI2f2e) (fxdiv0 . uI2f2d) (fxdiv-and-mod . uI2f2c) (fxdiv . uI2f2b) (fxcopy-bit-field . uI2f2a) (fxcopy-bit . uI2f29) (fxbit-set? . uI2f28) (fxbit-field . uI2f27) (fxbit-count . uI2f26) (fxarithmetic-shift-right . uI2f25) (fxarithmetic-shift-left . uI2f24) (fxarithmetic-shift . uI2f23) (fxand . uI2f22) (fx>? . uI2f21) (fx>=? . uI2f20) (fx=? . uI2f1f) (fx<? . uI2f1e) (fx<=? . uI2f1d) (fx-/carry . uI2f1c) (fx- . uI2f1b) (fx+/carry . uI2f1a) (fx+ . uI2f19) (fx*/carry . uI2f18) (fx* . uI2f17) (greatest-fixnum . uI2f16) (least-fixnum . uI2f15) (fixnum-width . uI2f14) (fixnum? . uI2f13) (bitwise-rotate-bit-field . uI2f12) (bitwise-reverse-bit-field . uI2f11) (bitwise-length . uI2f10) (bitwise-if . uI2f0f) (bitwise-first-bit-set . uI2f0e) (bitwise-copy-bit-field . uI2f0d) (bitwise-copy-bit . uI2f0c) (bitwise-bit-set? . uI2f0b) (bitwise-bit-field . uI2f0a) (bitwise-bit-count . uI2f09) (bitwise-xor . uI2f08) (bitwise-ior . uI2f07) (bitwise-and . uI2f06) (bitwise-not . uI2f05) (bitwise-arithmetic-shift-right . uI2f04) (bitwise-arithmetic-shift-left . uI2f03) (bitwise-arithmetic-shift . uI2f02) (zero? . uI2f01) (vector? . uI2f00) (vector-set! . uI2eff) (vector-ref . uI2efe) (vector-map . uI2efd) (vector-length . uI2efc) (vector-for-each . uI2efb) (vector-fill! . uI2efa) (vector->list . uI2ef9) (vector . uI2ef8) (values . uI2ef7) (truncate . uI2ef6) (tan . uI2ef5) (symbol? . uI2ef4) (symbol=? . uI2ef3) (symbol->string . uI2ef2) (substring . uI2ef1) (string? . uI2ef0) (string>? . uI2eef) (string>=? . uI2eee) (string=? . uI2eed) (string<? . uI2eec) (string<=? . uI2eeb) (string-ref . uI2eea) (string-length . uI2ee9) (string-for-each . uI2ee8) (string-copy . uI2ee7) (string-append . uI2ee6) (string->symbol . uI2ee5) (string->number . uI2ee4) (string->list . uI2ee3) (string . uI2ee2) (sqrt . uI2ee1) (sin . uI2ee0) (round . uI2edf) (reverse . uI2ede) (real? . uI2edd) (real-valued? . uI2edc) (real-part . uI2edb) (rationalize . uI2eda) (rational? . uI2ed9) (rational-valued? . uI2ed8) (procedure? . uI2ed7) (positive? . uI2ed6) (pair? . uI2ed5) (odd? . uI2ed4) (numerator . uI2ed3) (number? . uI2ed2) (number->string . uI2ed1) (null? . uI2ed0) (not . uI2ecf) (negative? . uI2ece) (nan? . uI2ecd) (min . uI2ecc) (max . uI2ecb) (map . uI2eca) (make-vector . uI2ec9) (make-string . uI2ec8) (make-rectangular . uI2ec7) (make-polar . uI2ec6) (magnitude . uI2ec5) (log . uI2ec4) (list? . uI2ec3) (list-tail . uI2ec2) (list-ref . uI2ec1) (list->vector . uI2ec0) (list->string . uI2ebf) (list . uI2ebe) (length . uI2ebd) (lcm . uI2ebc) (integer? . uI2ebb) (integer-valued? . uI2eba) (integer->char . uI2eb9) (infinite? . uI2eb8) (inexact? . uI2eb7) (inexact . uI2eb6) (imag-part . uI2eb5) (gcd . uI2eb4) (for-each . uI2eb3) (floor . uI2eb2) (finite? . uI2eb1) (expt . uI2eb0) (exp . uI2eaf) (exact? . uI2eae) (exact-integer-sqrt . uI2ead) (exact . uI2eac) (even? . uI2eab) (error . uI2eaa) (eqv? . uI2ea9) (equal? . uI2ea8) (eq? . uI2ea7) (dynamic-wind . uI2ea6) (div0-and-mod0 . uI2ea5) (mod0 . uI2ea4) (div0 . uI2ea3) (div-and-mod . uI2ea2) (mod . uI2ea1) (div . uI2ea0) (denominator . uI2e9f) (cos . uI2e9e) (cons . uI2e9d) (complex? . uI2e9c) (char? . uI2e9b) (char>? . uI2e9a) (char>=? . uI2e99) (char=? . uI2e98) (char<? . uI2e97) (char<=? . uI2e96) (char->integer . uI2e95) (ceiling . uI2e94) (call-with-values . uI2e93) (call/cc . uI2e92) (call-with-current-continuation . uI2e91) (cddddr . uI2e90) (cdddar . uI2e8f) (cddadr . uI2e8e) (cddaar . uI2e8d) (cdaddr . uI2e8c) (cdadar . uI2e8b) (cdaadr . uI2e8a) (cdaaar . uI2e89) (cadddr . uI2e88) (caddar . uI2e87) (cadadr . uI2e86) (cadaar . uI2e85) (caaddr . uI2e84) (caadar . uI2e83) (caaadr . uI2e82) (caaaar . uI2e81) (cdddr . uI2e80) (cddar . uI2e7f) (cdadr . uI2e7e) (cdaar . uI2e7d) (caddr . uI2e7c) (cadar . uI2e7b) (caadr . uI2e7a) (caaar . uI2e79) (cddr . uI2e78) (cdar . uI2e77) (cadr . uI2e76) (caar . uI2e75) (cdr . uI2e74) (car . uI2e73) (boolean? . uI2e72) (boolean=? . uI2e71) (atan . uI2e70) (assertion-violation . uI2e6f) (assertion-error . uIe55) (asin . uI2e6e) (apply . uI2e6d) (append . uI2e6c) (angle . uI2e6b) (acos . uI2e6a) (abs . uI2e69) (/ . uI2e68) (* . uI2e67) (- . uI2e66) (+ . uI2e65) (>= . uI2e64) (> . uI2e63) (= . uI2e62) (<= . uI2e61) (< . uI2e60) (library . uI2e5f) (&no-nans . uI2e5e) (&no-infinities . uI2e5d) (&i/o-encoding . uI2e5c) (&i/o-decoding . uI2e5b) (&i/o-port . uI2e5a) (&i/o-file-does-not-exist . uI2e59) (&i/o-file-already-exists . uI2e58) (&i/o-file-is-read-only . uI2e57) (&i/o-file-protection . uI2e56) (&i/o-filename . uI2e55) (&i/o-invalid-position . uI2e54) (&i/o-write . uI2e53) (&i/o-read . uI2e52) (&i/o . uI2e51) (&undefined . uI2e50) (&syntax . uI2e4f) (&lexical . uI2e4e) (&implementation-restriction . uI2e4d) (&non-continuable . uI2e4c) (&who . uI2e4b) (&irritants . uI2e4a) (&assertion . uI2e49) (&violation . uI2e48) (&error . uI2e47) (&serious . uI2e46) (&warning . uI2e45) (&message . uI2e44) (&condition . uI2e43) (define-condition-type . uI2e42) (define-enumeration . uI2e41) (define-record-type . uI2e40) (parent-rtd . uI2e3f) (nongenerative . uI2e3e) (opaque . uI2e3d) (sealed . uI2e3c) (protocol . uI2e3b) (parent . uI2e3a) (immutable . uI2e39) (mutable . uI2e38) (fields . uI2e37) (error-handling-mode . uI2e36) (file-options . uI2e35) (buffer-mode . uI2e34) (eol-style . uI2e33) (guard . uI2e32) (trace-define . uI2e31) (trace-lambda . uI2e30) (unsyntax-splicing . uI2e2f) (unsyntax . uI2e2e) (unquote-splicing . uI2e2d) (unquote . uI2e2c) (_ . uI2e2b) (else . uI2e2a) (=> . uI2e29) (... . uI2e28) (assert . uI2e27) (endianness . uI2e26) (delay . uI2e25) (time . uI2e24) (do . uI2e23) (cond . uI2e22) (let* . uI2e21) (let*-values . uI2e20) (let-values . uI2e1f) (identifier-syntax . uI2e1e) (with-syntax . uI2e1d) (quasisyntax . uI2e1c) (quasiquote . uI2e1b) (syntax-rules . uI2e1a) (include . uI2e19) (define-struct . uI2e18) (record-constructor-descriptor . uI2e17) (record-type-descriptor . uI2e16) (case . uI2e15) (parameterize . uI2e14) (unless . uI2e13) (when . uI2e12) (or . uI2e11) (and . uI2e10) (if . uI2e0f) (let . uI2e0e) (letrec* . uI2e0d) (letrec . uI2e0c) (type-descriptor . uI2e0b) (case-lambda . uI2e0a) (lambda . uI2e09) (syntax . uI2e08) (syntax-case . uI2e07) (quote . uI2e06) (foreign-call . uI2e05) (letrec-syntax . uI2e04) (let-syntax . uI2e03) (set! . uI2e02) (import . uI2e01) (begin . uI2e00) (module . uI2dff) (define-syntax . uI2dfe) (define . uI2dfd)) '((uI2b8a core-prim . &no-nans-rcd) (uI2b88 core-prim . &no-nans-rtd) (uI2b75 core-prim . &no-infinities-rcd) (uI2b73 core-prim . &no-infinities-rtd) (uI2b60 core-prim . &i/o-encoding-rcd) (uI2b5e core-prim . &i/o-encoding-rtd) (uI2b45 core-prim . &i/o-decoding-rcd) (uI2b43 core-prim . &i/o-decoding-rtd) (uI2b30 core-prim . &i/o-port-rcd) (uI2b2e core-prim . &i/o-port-rtd) (uI2b15 core-prim . &i/o-file-does-not-exist-rcd) (uI2b13 core-prim . &i/o-file-does-not-exist-rtd) (uI2b00 core-prim . &i/o-file-already-exists-rcd) (uI2afe core-prim . &i/o-file-already-exists-rtd) (uI2aeb core-prim . &i/o-file-is-read-only-rcd) (uI2ae9 core-prim . &i/o-file-is-read-only-rtd) (uI2ad6 core-prim . &i/o-file-protection-rcd) (uI2ad4 core-prim . &i/o-file-protection-rtd) (uI2ac1 core-prim . &i/o-filename-rcd) (uI2abf core-prim . &i/o-filename-rtd) (uI2aa6 core-prim . &i/o-invalid-position-rcd) (uI2aa4 core-prim . &i/o-invalid-position-rtd) (uI2a8b core-prim . &i/o-write-rcd) (uI2a89 core-prim . &i/o-write-rtd) (uI2a76 core-prim . &i/o-read-rcd) (uI2a74 core-prim . &i/o-read-rtd) (uI2a61 core-prim . &i/o-rcd) (uI2a5f core-prim . &i/o-rtd) (uI2a4c core-prim . &undefined-rcd) (uI2a4a core-prim . &undefined-rtd) (uI2a37 core-prim . &syntax-rcd) (uI2a35 core-prim . &syntax-rtd) (uI2a16 core-prim . &lexical-rcd) (uI2a14 core-prim . &lexical-rtd) (uI2a01 core-prim . &implementation-restriction-rcd) (uI29ff core-prim . &implementation-restriction-rtd) (uI29ec core-prim . &non-continuable-rcd) (uI29ea core-prim . &non-continuable-rtd) (uI29d7 core-prim . &who-rcd) (uI29d5 core-prim . &who-rtd) (uI29bc core-prim . &irritants-rcd) (uI29ba core-prim . &irritants-rtd) (uI29a1 core-prim . &assertion-rcd) (uI299f core-prim . &assertion-rtd) (uI298c core-prim . &violation-rcd) (uI298a core-prim . &violation-rtd) (uI2977 core-prim . &error-rcd) (uI2975 core-prim . &error-rtd) (uI2962 core-prim . &serious-rcd) (uI2960 core-prim . &serious-rtd) (uI294d core-prim . &warning-rcd) (uI294b core-prim . &warning-rtd) (uI2938 core-prim . &message-rcd) (uI2936 core-prim . &message-rtd) (uI28d9 core-prim . &condition-rcd) (uI28d7 core-prim . &condition-rtd) (uIe57 core-prim . syntax-error) (uId7b core-prim . syntax-dispatch) (uI3126 core-prim . pretty-print) (uI3125 core-prim . eval-core) (uI3124 core-prim . set-symbol-value!) (uI3123 core-prim . symbol-value) (uI3122 core-prim . gensym) (uI3121 core-prim . void) (uI2c9b core-prim . load) (uIe69 core-prim . interaction-environment) (uI3120 core-prim . char-ready?) (uI311f core-prim . regexp?) (uI311e core-prim . read-line) (uI311d core-prim . gensym-prefix-set!) (uI311c core-prim . ungensym) (uI311b core-prim . alist->eq-hash-table) (uI311a core-prim . assoc-ref) (uI3119 core-prim . print) (uI3118 core-prim . format) (uI3117 core-prim . host-os) (uI7b4 core-prim . library-path) (uI3116 core-prim . standard-library-path) (uI3115 core-prim . file-newer?) (uI3114 core-prim . stat-mtime) (uI3113 core-prim . write-to-file) (uI3112 core-prim . file->list) (uI3111 core-prim . file->string) (uI3110 core-prim . digit->integer) (uI310f core-prim . call-with-string-input-port) (uI310e core-prim . call-with-string-io) (uI310d core-prim . string-split) (uI310c core-prim . bytevector-for-each) (uI310b core-prim . string->regexp) (uI310a core-prim . rxmatch) (uI3109 core-prim . regexp-replace-all) (uI3108 core-prim . hashtable-for-each) (uI59f core-prim . mosh-cache-dir) (uI3107 core-prim . call-process) (uI3106 core-prim . local-tz-offset) (uI3105 core-prim . microseconds) (uI3104 core-prim . directory-list) (uI3103 core-prim . set-current-directory!) (uI3102 core-prim . expand-path) (uI3101 core-prim . current-directory) (uI3100 core-prim . %spawn) (uI30ff core-prim . %waitpid) (uI30fe core-prim . simple-struct-name) (uI30fd core-prim . simple-struct-set!) (uI30fc core-prim . simple-struct-ref) (uI30fb core-prim . make-simple-struct) (uI30fa core-prim . simple-struct?) (uI30f9 core-prim . pointer-ref-c-int64) (uI30f8 core-prim . pointer-ref-c-int32) (uI30f7 core-prim . pointer-ref-c-int16) (uI30f6 core-prim . pointer-ref-c-int8) (uI30f5 core-prim . pointer-ref-c-uint64) (uI30f4 core-prim . pointer-ref-c-uint32) (uI30f3 core-prim . pointer-ref-c-uint16) (uI30f2 core-prim . pointer-ref-c-uint8) (uI30f1 core-prim . pointer-set-c-uint64!) (uI30f0 core-prim . pointer-set-c-uint32!) (uI30ef core-prim . pointer-set-c-uint16!) (uI30ee core-prim . pointer-set-c-uint8!) (uI30ed core-prim . pointer-set-c-int64!) (uI30ec core-prim . pointer-set-c-int32!) (uI30eb core-prim . pointer-set-c-int16!) (uI30ea core-prim . pointer-set-c-int8!) (uI30e9 core-prim . pointer-set-c-pointer!) (uI30e8 core-prim . pointer-set-c-double!) (uI30e7 core-prim . pointer-set-c-float!) (uI30e6 core-prim . pointer-set-c-long-long!) (uI30e5 core-prim . pointer-set-c-long!) (uI30e4 core-prim . pointer-set-c-int!) (uI30e3 core-prim . pointer-set-c-short!) (uI30e2 core-prim . pointer-set-c-char!) (uI30e1 core-prim . pointer-ref-c-pointer) (uI30e0 core-prim . pointer-ref-c-double) (uI30df core-prim . pointer-ref-c-float) (uI30de core-prim . pointer-ref-c-unsigned-long-long) (uI30dd core-prim . pointer-ref-c-signed-long-long) (uI30dc core-prim . pointer-ref-c-unsigned-long) (uI30db core-prim . pointer-ref-c-signed-long) (uI30da core-prim . pointer-ref-c-unsigned-int) (uI30d9 core-prim . pointer-ref-c-signed-int) (uI30d8 core-prim . pointer-ref-c-unsigned-short) (uI30d7 core-prim . pointer-ref-c-signed-short) (uI30d6 core-prim . pointer-ref-c-unsigned-char) (uI30d5 core-prim . pointer-ref-c-signed-char) (uI30d4 core-prim . pointer->integer) (uI30d3 core-prim . integer->pointer) (uI30d2 core-prim . pointer?) (uI30d1 core-prim . shared-errno) (uI30d0 core-prim . %ffi-free-c-callback-trampoline) (uI30cf core-prim . %ffi-make-c-callback-trampoline) (uI30ce core-prim . %ffi-free) (uI30cd core-prim . %ffi-malloc) (uI30cc core-prim . %ffi-supported?) (uI30cb core-prim . %ffi-pointer->string) (uI30ca core-prim . %ffi-call->string-or-zero) (uI30c9 core-prim . %ffi-call->double) (uI30c8 core-prim . %ffi-call->void*) (uI30c7 core-prim . %ffi-call->void) (uI30c6 core-prim . %ffi-call->char) (uI30c5 core-prim . %ffi-call->int) (uI30c4 core-prim . %ffi-lookup) (uI30c3 core-prim . %ffi-open) (uI30c2 core-prim . %fork) (uI30c1 core-prim . %pipe) (uI30c0 core-prim . p) (uI30bf core-prim . open-output-string) (uI30be core-prim . get-output-string) (uI30bd core-prim . file-stat-ctime) (uI30bc core-prim . file-stat-atime) (uI30bb core-prim . file-stat-mtime) (uI30ba core-prim . file-size-in-bytes) (uI30b9 core-prim . file-writable?) (uI30b8 core-prim . file-executable?) (uI30b7 core-prim . file-readable?) (uI30b6 core-prim . file-regular?) (uI30b5 core-prim . file-symbolic-link?) (uI30b4 core-prim . file-directory?) (uI30b3 core-prim . create-symbolic-link) (uI30b2 core-prim . rename-file) (uI30b1 core-prim . delete-directory) (uI30b0 core-prim . create-directory) (uI30af core-prim . create-mosh-cache-dir) (uI30ae core-prim . get-environment-variables) (uI30ad core-prim . current-exception-handler) (uI30ac core-prim . get-environment-variable) (uI30ab core-prim . join-wraps) (uI30aa core-prim . id->real-label) (uI30a9 core-prim . same-marks?) (uI30a8 core-prim . same-marks*?) (uI30a7 core-prim . get-timeofday) (uI30a6 core-prim . get-command-line) (uI30a5 core-prim . sys-display) (uI30a4 core-prim . whereis) (uI30a3 core-prim . register) (uI30a2 core-prim . vm-join!) (uI30a1 core-prim . vm-set-value!) (uI30a0 core-prim . vm?) (uI309f core-prim . main-vm?) (uI309e core-prim . vm-eval) (uI309d core-prim . vm-self) (uI309c core-prim . vm-start!) (uI309b core-prim . make-vm) (uI309a core-prim . mutex-try-lock!) (uI3099 core-prim . mutex-unlock!) (uI3098 core-prim . mutex-lock!) (uI3097 core-prim . mutex?) (uI3096 core-prim . make-mutex) (uI3095 core-prim . condition-variable-notify-all!) (uI3094 core-prim . condition-variable-notify!) (uI3093 core-prim . condition-variable-wait!) (uI3092 core-prim . make-condition-variable) (uI3091 core-prim . mosh-executable-path) (uI3090 core-prim . make-file-options) (uI308f core-prim . source-info) (uI308e core-prim . make-compiler-instruction) (uI308d core-prim . make-instruction) (uI308c core-prim . set-source-info!) (uI308b core-prim . bignum?) (uI308a core-prim . fast-equal?) (uI3089 core-prim . fasl-read) (uI3088 core-prim . fasl-write) (uI3087 core-prim . time-usage) (uI3086 core-prim . os-constant) (uI3085 core-prim . disasm) (uI59d core-prim . make-parameter) (uI3084 core-prim . socket-port) (uI3083 core-prim . socket-shutdown) (uI3082 core-prim . socket-close) (uI3081 core-prim . socket-send) (uI3080 core-prim . socket-recv!) (uI307f core-prim . socket-recv) (uI307e core-prim . make-server-socket) (uI307d core-prim . make-client-socket) (uI307c core-prim . socket-accept) (uI307b core-prim . socket?) (uI307a core-prim . string-upcase) (uI3079 core-prim . string-titlecase) (uI3078 core-prim . string-normalize-nfkd) (uI3077 core-prim . string-normalize-nfkc) (uI3076 core-prim . string-normalize-nfd) (uI3075 core-prim . string-normalize-nfc) (uI3074 core-prim . string-foldcase) (uI3073 core-prim . string-downcase) (uI3072 core-prim . string-ci>?) (uI3071 core-prim . string-ci>=?) (uI3070 core-prim . string-ci=?) (uI306f core-prim . string-ci<?) (uI306e core-prim . string-ci<=?) (uI306d core-prim . char-whitespace?) (uI306c core-prim . char-upper-case?) (uI306b core-prim . char-title-case?) (uI306a core-prim . char-numeric?) (uI3069 core-prim . char-lower-case?) (uI3068 core-prim . char-general-category) (uI3067 core-prim . char-upcase) (uI3066 core-prim . char-titlecase) (uI3065 core-prim . char-foldcase) (uI3064 core-prim . char-downcase) (uI3063 core-prim . char-ci>?) (uI3062 core-prim . char-ci>=?) (uI3061 core-prim . char-ci=?) (uI3060 core-prim . char-ci<?) (uI305f core-prim . char-ci<=?) (uI305e core-prim . char-alphabetic?) (uIba6 core-prim . make-variable-transformer) (uIe5d core-prim . identifier?) (uIe49 core-prim . generate-temporaries) (uIe4b core-prim . free-identifier=?) (uIe61 core-prim . syntax->datum) (uIe5f core-prim . datum->syntax) (uIe4d core-prim . bound-identifier=?) (uI305d core-prim . record-type-descriptor?) (uI305c core-prim . record-predicate) (uI305b core-prim . record-mutator) (uI305a core-prim . record-constructor) (uI3059 core-prim . record-accessor) (uI3058 core-prim . make-record-type-descriptor) (uI3057 core-prim . make-record-constructor-descriptor) (uI3056 core-prim . record?) (uI3055 core-prim . record-type-uid) (uI3054 core-prim . record-type-sealed?) (uI3053 core-prim . record-type-parent) (uI3052 core-prim . record-type-opaque?) (uI3051 core-prim . record-type-name) (uI3050 core-prim . record-type-generative?) (uI304f core-prim . record-type-field-names) (uI304e core-prim . record-rtd) (uI304d core-prim . record-field-mutable?) (uI304c core-prim . delete-file) (uI304b core-prim . file-exists?) (uI304a core-prim . vector-sort!) (uI3049 core-prim . vector-sort) (uI3048 core-prim . list-sort) (uI3047 core-prim . symbol-hash) (uI3046 core-prim . string-ci-hash) (uI3045 core-prim . string-hash) (uI3044 core-prim . equal-hash) (uI3043 core-prim . hashtable-equivalence-function) (uI3042 core-prim . make-hashtable) (uI3041 core-prim . hashtable-hash-function) (uI3040 core-prim . make-eqv-hashtable) (uI303f core-prim . make-eq-hashtable) (uI303e core-prim . hashtable?) (uI303d core-prim . hashtable-update!) (uI303c core-prim . hashtable-size) (uI303b core-prim . hashtable-set!) (uI303a core-prim . hashtable-ref) (uI3039 core-prim . hashtable-mutable?) (uI3038 core-prim . hashtable-keys) (uI3037 core-prim . hashtable-entries) (uI3036 core-prim . hashtable-delete!) (uI3035 core-prim . hashtable-copy) (uI3034 core-prim . hashtable-contains?) (uI3033 core-prim . hashtable-clear!) (uI3032 core-prim . call-with-output-file) (uI3031 core-prim . call-with-input-file) (uI3030 core-prim . write-char) (uI302f core-prim . write) (uI302e core-prim . with-output-to-file) (uI302d core-prim . with-input-from-file) (uI302c core-prim . read-char) (uI302b core-prim . read) (uI302a core-prim . peek-char) (uI3029 core-prim . open-output-file) (uI3028 core-prim . open-input-file) (uI3027 core-prim . newline) (uI3026 core-prim . display) (uI3025 core-prim . close-output-port) (uI3024 core-prim . close-input-port) (uI3023 core-prim . eof-object?) (uI3022 core-prim . eof-object) (uI3021 core-prim . current-error-port) (uI3020 core-prim . current-output-port) (uI301f core-prim . current-input-port) (uI301e core-prim . output-port?) (uI301d core-prim . input-port?) (uI301c core-prim . utf-8-codec) (uI301b core-prim . utf-16-codec) (uI301a core-prim . transcoder-error-handling-mode) (uI3019 core-prim . transcoder-eol-style) (uI3018 core-prim . transcoder-codec) (uI3017 core-prim . transcoded-port) (uI3016 core-prim . textual-port?) (uI3015 core-prim . string->bytevector) (uI3014 core-prim . standard-output-port) (uI3013 core-prim . standard-input-port) (uI3012 core-prim . standard-error-port) (uI3011 core-prim . set-port-position!) (uI3010 core-prim . put-u8) (uI300f core-prim . put-string) (uI300e core-prim . put-datum) (uI300d core-prim . put-char) (uI300c core-prim . put-bytevector) (uI300b core-prim . port?) (uI300a core-prim . port-transcoder) (uI3009 core-prim . port-position) (uI3008 core-prim . port-has-set-port-position!?) (uI3007 core-prim . port-has-port-position?) (uI3006 core-prim . port-eof?) (uI3005 core-prim . output-port-buffer-mode) (uI3004 core-prim . open-string-output-port) (uI3003 core-prim . open-string-input-port) (uI3002 core-prim . open-file-output-port) (uI3001 core-prim . open-file-input/output-port) (uI3000 core-prim . open-file-input-port) (uI2fff core-prim . open-bytevector-output-port) (uI2ffe core-prim . open-bytevector-input-port) (uI2ffd core-prim . native-transcoder) (uI2ffc core-prim . native-eol-style) (uI2ffb core-prim . make-transcoder) (uI2ffa core-prim . latin-1-codec) (uI2a85 core-prim . make-i/o-write-error) (uI2a70 core-prim . make-i/o-read-error) (uI2b26 core-prim . make-i/o-port-error) (uI2a9c core-prim . make-i/o-invalid-position-error) (uI2ab7 core-prim . make-i/o-filename-error) (uI2ad0 core-prim . make-i/o-file-protection-error) (uI2ae5 core-prim . make-i/o-file-is-read-only-error) (uI2b0f core-prim . make-i/o-file-does-not-exist-error) (uI2afa core-prim . make-i/o-file-already-exists-error) (uI2a5b core-prim . make-i/o-error) (uI2b56 core-prim . make-i/o-encoding-error) (uI2b3f core-prim . make-i/o-decoding-error) (uI2ff9 core-prim . make-custom-textual-output-port) (uI2ff8 core-prim . make-custom-textual-input/output-port) (uI2ff7 core-prim . make-custom-textual-input-port) (uI2ff6 core-prim . make-custom-binary-output-port) (uI2ff5 core-prim . make-custom-binary-input/output-port) (uI2ff4 core-prim . make-custom-binary-input-port) (uI2ff3 core-prim . make-bytevector) (uI2ff2 core-prim . lookahead-u8) (uI2ff1 core-prim . lookahead-char) (uI2a87 core-prim . i/o-write-error?) (uI2a72 core-prim . i/o-read-error?) (uI2b2a core-prim . i/o-port-error?) (uI2aa0 core-prim . i/o-invalid-position-error?) (uI2abb core-prim . i/o-filename-error?) (uI2ad2 core-prim . i/o-file-protection-error?) (uI2ae7 core-prim . i/o-file-is-read-only-error?) (uI2b11 core-prim . i/o-file-does-not-exist-error?) (uI2afc core-prim . i/o-file-already-exists-error?) (uI2a5d core-prim . i/o-error?) (uI2aa2 core-prim . i/o-error-position) (uI2b2c core-prim . i/o-error-port) (uI2abd core-prim . i/o-error-filename) (uI2b5a core-prim . i/o-encoding-error?) (uI2b5c core-prim . i/o-encoding-error-char) (uI2b41 core-prim . i/o-decoding-error?) (uI2ff0 core-prim . get-u8) (uI2fef core-prim . get-string-n!) (uI2fee core-prim . get-string-n) (uI2fed core-prim . get-string-all) (uI2fec core-prim . get-line) (uI2feb core-prim . get-datum) (uI2fea core-prim . get-char) (uI2fe9 core-prim . get-bytevector-some) (uI2fe8 core-prim . get-bytevector-n!) (uI2fe7 core-prim . get-bytevector-n) (uI2fe6 core-prim . get-bytevector-all) (uI2fe5 core-prim . flush-output-port) (uI2fe4 core-prim . close-port) (uIe37 core-prim . scheme-report-environment) (uI2fe3 core-prim . quotient) (uIe35 core-prim . null-environment) (uI2fe2 core-prim . remainder) (uI2fe1 core-prim . modulo) (uI2fe0 core-prim . inexact->exact) (uI2fdf core-prim . force) (uI2fde core-prim . exact->inexact) (uI2fdd core-prim . make-promise) (uI2fdc core-prim . exit) (uI2c95 core-prim . command-line) (uI2fdb core-prim . string-fill!) (uI2fda core-prim . string-set!) (uI2fd9 core-prim . set-cdr!) (uI2fd8 core-prim . set-car!) (uI2fd7 core-prim . remove) (uI2fd6 core-prim . remv) (uI2fd5 core-prim . remp) (uI2fd4 core-prim . remq) (uI2fd3 core-prim . partition) (uI2fd2 core-prim . memv) (uI2fd1 core-prim . memq) (uI2fd0 core-prim . memp) (uI2fcf core-prim . member) (uI2fce core-prim . exists) (uI2fcd core-prim . for-all) (uI2fcc core-prim . fold-right) (uI2fcb core-prim . fold-left) (uI2fca core-prim . find) (uI2fc9 core-prim . filter) (uI2fc8 core-prim . cons*) (uI2fc7 core-prim . assv) (uI2fc6 core-prim . assq) (uI2fc5 core-prim . assp) (uI2fc4 core-prim . assoc) (uI2fc3 core-prim . call-with-string-output-port) (uI2fc2 core-prim . call-with-port) (uI2fc1 core-prim . call-with-bytevector-output-port) (uI2fc0 core-prim . bytevector->string) (uI2fbf core-prim . buffer-mode?) (uI2fbe core-prim . binary-port?) (uI2fbd core-prim . with-exception-handler) (uI2fbc core-prim . raise-continuable) (uI2fbb core-prim . raise) (uIe3b core-prim . eval) (uIe33 core-prim . environment) (uI2fba core-prim . make-enumeration) (uI2fb9 core-prim . enum-set=?) (uI2fb8 core-prim . enum-set-universe) (uI2fb7 core-prim . enum-set-union) (uI2fb6 core-prim . enum-set-subset?) (uI2fb5 core-prim . enum-set-projection) (uI2fb4 core-prim . enum-set-member?) (uI2fb3 core-prim . enum-set-intersection) (uI2fb2 core-prim . enum-set-indexer) (uI2fb1 core-prim . enum-set-difference) (uI2fb0 core-prim . enum-set-constructor) (uI2faf core-prim . enum-set-complement) (uI2fae core-prim . enum-set->list) (uI29d1 core-prim . who-condition?) (uI2949 core-prim . warning?) (uI2988 core-prim . violation?) (uI2a48 core-prim . undefined-violation?) (uI2a2f core-prim . syntax-violation?) (uI2a33 core-prim . syntax-violation-subform) (uI2a31 core-prim . syntax-violation-form) (uIe5b core-prim . syntax-violation) (uI2fad core-prim . simple-conditions) (uI295e core-prim . serious-condition?) (uI29e8 core-prim . non-continuable-violation?) (uI2932 core-prim . message-condition?) (uI29cd core-prim . make-who-condition) (uI2947 core-prim . make-warning) (uI2986 core-prim . make-violation) (uI2a46 core-prim . make-undefined-violation) (uI2a29 core-prim . make-syntax-violation) (uI295c core-prim . make-serious-condition) (uI29e6 core-prim . make-non-continuable-violation) (uI292e core-prim . make-message-condition) (uI2a10 core-prim . make-lexical-violation) (uI29b2 core-prim . make-irritants-condition) (uI29fb core-prim . make-implementation-restriction-violation) (uI2971 core-prim . make-error) (uI299b core-prim . make-assertion-violation) (uI2a12 core-prim . lexical-violation?) (uI29b6 core-prim . irritants-condition?) (uI29fd core-prim . implementation-restriction-violation?) (uI2973 core-prim . error?) (uI29d3 core-prim . condition-who) (uI2fac core-prim . condition-predicate) (uI2934 core-prim . condition-message) (uI29b8 core-prim . condition-irritants) (uI2fab core-prim . condition-accessor) (uI2faa core-prim . condition) (uI299d core-prim . assertion-violation?) (uI2fa9 core-prim . condition?) (uI2fa8 core-prim . utf32->string) (uI2fa7 core-prim . utf16->string) (uI2fa6 core-prim . utf8->string) (uI2fa5 core-prim . uint-list->bytevector) (uI2fa4 core-prim . u8-list->bytevector) (uI2fa3 core-prim . string->utf8) (uI2fa2 core-prim . string->utf32) (uI2fa1 core-prim . string->utf16) (uI2fa0 core-prim . sint-list->bytevector) (uI2f9f core-prim . native-endianness) (uI2f9e core-prim . bytevector?) (uI2f9d core-prim . bytevector=?) (uI2f9c core-prim . bytevector-uint-set!) (uI2f9b core-prim . bytevector-uint-ref) (uI2f9a core-prim . bytevector-u8-set!) (uI2f99 core-prim . bytevector-u8-ref) (uI2f98 core-prim . bytevector-u64-set!) (uI2f97 core-prim . bytevector-u64-ref) (uI2f96 core-prim . bytevector-u64-native-set!) (uI2f95 core-prim . bytevector-u64-native-ref) (uI2f94 core-prim . bytevector-u32-set!) (uI2f93 core-prim . bytevector-u32-ref) (uI2f92 core-prim . bytevector-u32-native-set!) (uI2f91 core-prim . bytevector-u32-native-ref) (uI2f90 core-prim . bytevector-u16-set!) (uI2f8f core-prim . bytevector-u16-ref) (uI2f8e core-prim . bytevector-u16-native-set!) (uI2f8d core-prim . bytevector-u16-native-ref) (uI2f8c core-prim . bytevector-sint-set!) (uI2f8b core-prim . bytevector-sint-ref) (uI2f8a core-prim . bytevector-s8-set!) (uI2f89 core-prim . bytevector-s8-ref) (uI2f88 core-prim . bytevector-s64-set!) (uI2f87 core-prim . bytevector-s64-ref) (uI2f86 core-prim . bytevector-s64-native-set!) (uI2f85 core-prim . bytevector-s64-native-ref) (uI2f84 core-prim . bytevector-s32-set!) (uI2f83 core-prim . bytevector-s32-ref) (uI2f82 core-prim . bytevector-s32-native-set!) (uI2f81 core-prim . bytevector-s32-native-ref) (uI2f80 core-prim . bytevector-s16-set!) (uI2f7f core-prim . bytevector-s16-ref) (uI2f7e core-prim . bytevector-s16-native-set!) (uI2f7d core-prim . bytevector-s16-native-ref) (uI2f7c core-prim . bytevector-length) (uI2f7b core-prim . bytevector-ieee-single-ref) (uI2f7a core-prim . bytevector-ieee-single-set!) (uI2f79 core-prim . bytevector-ieee-single-native-set!) (uI2f78 core-prim . bytevector-ieee-single-native-ref) (uI2f77 core-prim . bytevector-ieee-double-set!) (uI2f76 core-prim . bytevector-ieee-double-ref) (uI2f75 core-prim . bytevector-ieee-double-native-set!) (uI2f74 core-prim . bytevector-ieee-double-native-ref) (uI2f73 core-prim . bytevector-fill!) (uI2f72 core-prim . bytevector-copy!) (uI2f71 core-prim . bytevector-copy) (uI2f70 core-prim . bytevector->uint-list) (uI2f6f core-prim . bytevector->u8-list) (uI2f6e core-prim . bytevector->sint-list) (uI2b86 core-prim . no-nans-violation?) (uI2b71 core-prim . no-infinities-violation?) (uI2b84 core-prim . make-no-nans-violation) (uI2b6f core-prim . make-no-infinities-violation) (uI2f6d core-prim . real->flonum) (uI2f6c core-prim . flzero?) (uI2f6b core-prim . fltruncate) (uI2f6a core-prim . fltan) (uI2f69 core-prim . flsqrt) (uI2f68 core-prim . flsin) (uI2f67 core-prim . flround) (uI2f66 core-prim . flpositive?) (uI2f65 core-prim . flonum?) (uI2f64 core-prim . flodd?) (uI2f63 core-prim . flnumerator) (uI2f62 core-prim . flnegative?) (uI2f61 core-prim . flnan?) (uI2f60 core-prim . flmod0) (uI2f5f core-prim . flmod) (uI2f5e core-prim . flmin) (uI2f5d core-prim . flmax) (uI2f5c core-prim . fllog) (uI2f5b core-prim . flinteger?) (uI2f5a core-prim . flinfinite?) (uI2f59 core-prim . flfloor) (uI2f58 core-prim . flfinite?) (uI2f57 core-prim . flexpt) (uI2f56 core-prim . flexp) (uI2f55 core-prim . fleven?) (uI2f54 core-prim . fldiv0-and-mod0) (uI2f53 core-prim . fldiv0) (uI2f52 core-prim . fldiv-and-mod) (uI2f51 core-prim . fldiv) (uI2f50 core-prim . fldenominator) (uI2f4f core-prim . flcos) (uI2f4e core-prim . flceiling) (uI2f4d core-prim . flatan) (uI2f4c core-prim . flasin) (uI2f4b core-prim . flacos) (uI2f4a core-prim . flabs) (uI2f49 core-prim . fl>?) (uI2f48 core-prim . fl>=?) (uI2f47 core-prim . fl=?) (uI2f46 core-prim . fl<?) (uI2f45 core-prim . fl<=?) (uI2f44 core-prim . fl/) (uI2f43 core-prim . fl-) (uI2f42 core-prim . fl+) (uI2f41 core-prim . fl*) (uI2f40 core-prim . fixnum->flonum) (uI2f3f core-prim . fxzero?) (uI2f3e core-prim . fxxor) (uI2f3d core-prim . fxrotate-bit-field) (uI2f3c core-prim . fxreverse-bit-field) (uI2f3b core-prim . fxpositive?) (uI2f3a core-prim . fxodd?) (uI2f39 core-prim . fxnot) (uI2f38 core-prim . fxnegative?) (uI2f37 core-prim . fxmod0) (uI2f36 core-prim . fxmod) (uI2f35 core-prim . fxmin) (uI2f34 core-prim . fxmax) (uI2f33 core-prim . fxlength) (uI2f32 core-prim . fxior) (uI2f31 core-prim . fxif) (uI2f30 core-prim . fxfirst-bit-set) (uI2f2f core-prim . fxeven?) (uI2f2e core-prim . fxdiv0-and-mod0) (uI2f2d core-prim . fxdiv0) (uI2f2c core-prim . fxdiv-and-mod) (uI2f2b core-prim . fxdiv) (uI2f2a core-prim . fxcopy-bit-field) (uI2f29 core-prim . fxcopy-bit) (uI2f28 core-prim . fxbit-set?) (uI2f27 core-prim . fxbit-field) (uI2f26 core-prim . fxbit-count) (uI2f25 core-prim . fxarithmetic-shift-right) (uI2f24 core-prim . fxarithmetic-shift-left) (uI2f23 core-prim . fxarithmetic-shift) (uI2f22 core-prim . fxand) (uI2f21 core-prim . fx>?) (uI2f20 core-prim . fx>=?) (uI2f1f core-prim . fx=?) (uI2f1e core-prim . fx<?) (uI2f1d core-prim . fx<=?) (uI2f1c core-prim . fx-/carry) (uI2f1b core-prim . fx-) (uI2f1a core-prim . fx+/carry) (uI2f19 core-prim . fx+) (uI2f18 core-prim . fx*/carry) (uI2f17 core-prim . fx*) (uI2f16 core-prim . greatest-fixnum) (uI2f15 core-prim . least-fixnum) (uI2f14 core-prim . fixnum-width) (uI2f13 core-prim . fixnum?) (uI2f12 core-prim . bitwise-rotate-bit-field) (uI2f11 core-prim . bitwise-reverse-bit-field) (uI2f10 core-prim . bitwise-length) (uI2f0f core-prim . bitwise-if) (uI2f0e core-prim . bitwise-first-bit-set) (uI2f0d core-prim . bitwise-copy-bit-field) (uI2f0c core-prim . bitwise-copy-bit) (uI2f0b core-prim . bitwise-bit-set?) (uI2f0a core-prim . bitwise-bit-field) (uI2f09 core-prim . bitwise-bit-count) (uI2f08 core-prim . bitwise-xor) (uI2f07 core-prim . bitwise-ior) (uI2f06 core-prim . bitwise-and) (uI2f05 core-prim . bitwise-not) (uI2f04 core-prim . bitwise-arithmetic-shift-right) (uI2f03 core-prim . bitwise-arithmetic-shift-left) (uI2f02 core-prim . bitwise-arithmetic-shift) (uI2f01 core-prim . zero?) (uI2f00 core-prim . vector?) (uI2eff core-prim . vector-set!) (uI2efe core-prim . vector-ref) (uI2efd core-prim . vector-map) (uI2efc core-prim . vector-length) (uI2efb core-prim . vector-for-each) (uI2efa core-prim . vector-fill!) (uI2ef9 core-prim . vector->list) (uI2ef8 core-prim . vector) (uI2ef7 core-prim . values) (uI2ef6 core-prim . truncate) (uI2ef5 core-prim . tan) (uI2ef4 core-prim . symbol?) (uI2ef3 core-prim . symbol=?) (uI2ef2 core-prim . symbol->string) (uI2ef1 core-prim . substring) (uI2ef0 core-prim . string?) (uI2eef core-prim . string>?) (uI2eee core-prim . string>=?) (uI2eed core-prim . string=?) (uI2eec core-prim . string<?) (uI2eeb core-prim . string<=?) (uI2eea core-prim . string-ref) (uI2ee9 core-prim . string-length) (uI2ee8 core-prim . string-for-each) (uI2ee7 core-prim . string-copy) (uI2ee6 core-prim . string-append) (uI2ee5 core-prim . string->symbol) (uI2ee4 core-prim . string->number) (uI2ee3 core-prim . string->list) (uI2ee2 core-prim . string) (uI2ee1 core-prim . sqrt) (uI2ee0 core-prim . sin) (uI2edf core-prim . round) (uI2ede core-prim . reverse) (uI2edd core-prim . real?) (uI2edc core-prim . real-valued?) (uI2edb core-prim . real-part) (uI2eda core-prim . rationalize) (uI2ed9 core-prim . rational?) (uI2ed8 core-prim . rational-valued?) (uI2ed7 core-prim . procedure?) (uI2ed6 core-prim . positive?) (uI2ed5 core-prim . pair?) (uI2ed4 core-prim . odd?) (uI2ed3 core-prim . numerator) (uI2ed2 core-prim . number?) (uI2ed1 core-prim . number->string) (uI2ed0 core-prim . null?) (uI2ecf core-prim . not) (uI2ece core-prim . negative?) (uI2ecd core-prim . nan?) (uI2ecc core-prim . min) (uI2ecb core-prim . max) (uI2eca core-prim . map) (uI2ec9 core-prim . make-vector) (uI2ec8 core-prim . make-string) (uI2ec7 core-prim . make-rectangular) (uI2ec6 core-prim . make-polar) (uI2ec5 core-prim . magnitude) (uI2ec4 core-prim . log) (uI2ec3 core-prim . list?) (uI2ec2 core-prim . list-tail) (uI2ec1 core-prim . list-ref) (uI2ec0 core-prim . list->vector) (uI2ebf core-prim . list->string) (uI2ebe core-prim . list) (uI2ebd core-prim . length) (uI2ebc core-prim . lcm) (uI2ebb core-prim . integer?) (uI2eba core-prim . integer-valued?) (uI2eb9 core-prim . integer->char) (uI2eb8 core-prim . infinite?) (uI2eb7 core-prim . inexact?) (uI2eb6 core-prim . inexact) (uI2eb5 core-prim . imag-part) (uI2eb4 core-prim . gcd) (uI2eb3 core-prim . for-each) (uI2eb2 core-prim . floor) (uI2eb1 core-prim . finite?) (uI2eb0 core-prim . expt) (uI2eaf core-prim . exp) (uI2eae core-prim . exact?) (uI2ead core-prim . exact-integer-sqrt) (uI2eac core-prim . exact) (uI2eab core-prim . even?) (uI2eaa core-prim . error) (uI2ea9 core-prim . eqv?) (uI2ea8 core-prim . equal?) (uI2ea7 core-prim . eq?) (uI2ea6 core-prim . dynamic-wind) (uI2ea5 core-prim . div0-and-mod0) (uI2ea4 core-prim . mod0) (uI2ea3 core-prim . div0) (uI2ea2 core-prim . div-and-mod) (uI2ea1 core-prim . mod) (uI2ea0 core-prim . div) (uI2e9f core-prim . denominator) (uI2e9e core-prim . cos) (uI2e9d core-prim . cons) (uI2e9c core-prim . complex?) (uI2e9b core-prim . char?) (uI2e9a core-prim . char>?) (uI2e99 core-prim . char>=?) (uI2e98 core-prim . char=?) (uI2e97 core-prim . char<?) (uI2e96 core-prim . char<=?) (uI2e95 core-prim . char->integer) (uI2e94 core-prim . ceiling) (uI2e93 core-prim . call-with-values) (uI2e92 core-prim . call/cc) (uI2e91 core-prim . call-with-current-continuation) (uI2e90 core-prim . cddddr) (uI2e8f core-prim . cdddar) (uI2e8e core-prim . cddadr) (uI2e8d core-prim . cddaar) (uI2e8c core-prim . cdaddr) (uI2e8b core-prim . cdadar) (uI2e8a core-prim . cdaadr) (uI2e89 core-prim . cdaaar) (uI2e88 core-prim . cadddr) (uI2e87 core-prim . caddar) (uI2e86 core-prim . cadadr) (uI2e85 core-prim . cadaar) (uI2e84 core-prim . caaddr) (uI2e83 core-prim . caadar) (uI2e82 core-prim . caaadr) (uI2e81 core-prim . caaaar) (uI2e80 core-prim . cdddr) (uI2e7f core-prim . cddar) (uI2e7e core-prim . cdadr) (uI2e7d core-prim . cdaar) (uI2e7c core-prim . caddr) (uI2e7b core-prim . cadar) (uI2e7a core-prim . caadr) (uI2e79 core-prim . caaar) (uI2e78 core-prim . cddr) (uI2e77 core-prim . cdar) (uI2e76 core-prim . cadr) (uI2e75 core-prim . caar) (uI2e74 core-prim . cdr) (uI2e73 core-prim . car) (uI2e72 core-prim . boolean?) (uI2e71 core-prim . boolean=?) (uI2e70 core-prim . atan) (uI2e6f core-prim . assertion-violation) (uIe55 core-prim . assertion-error) (uI2e6e core-prim . asin) (uI2e6d core-prim . apply) (uI2e6c core-prim . append) (uI2e6b core-prim . angle) (uI2e6a core-prim . acos) (uI2e69 core-prim . abs) (uI2e68 core-prim . /) (uI2e67 core-prim . *) (uI2e66 core-prim . -) (uI2e65 core-prim . +) (uI2e64 core-prim . >=) (uI2e63 core-prim . >) (uI2e62 core-prim . =) (uI2e61 core-prim . <=) (uI2e60 core-prim . <) (uI2e5f core-prim . library) (uI2e5e $core-rtd &no-nans-rtd &no-nans-rcd) (uI2e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (uI2e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (uI2e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (uI2e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (uI2e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (uI2e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (uI2e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (uI2e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (uI2e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (uI2e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (uI2e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (uI2e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (uI2e51 $core-rtd &i/o-rtd &i/o-rcd) (uI2e50 $core-rtd &undefined-rtd &undefined-rcd) (uI2e4f $core-rtd &syntax-rtd &syntax-rcd) (uI2e4e $core-rtd &lexical-rtd &lexical-rcd) (uI2e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (uI2e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (uI2e4b $core-rtd &who-rtd &who-rcd) (uI2e4a $core-rtd &irritants-rtd &irritants-rcd) (uI2e49 $core-rtd &assertion-rtd &assertion-rcd) (uI2e48 $core-rtd &violation-rtd &violation-rcd) (uI2e47 $core-rtd &error-rtd &error-rcd) (uI2e46 $core-rtd &serious-rtd &serious-rcd) (uI2e45 $core-rtd &warning-rtd &warning-rcd) (uI2e44 $core-rtd &message-rtd &message-rcd) (uI2e43 $core-rtd &condition-rtd &condition-rcd) (uI2e42 macro . define-condition-type) (uI2e41 macro . define-enumeration) (uI2e40 macro . define-record-type) (uI2e3f macro . parent-rtd) (uI2e3e macro . nongenerative) (uI2e3d macro . opaque) (uI2e3c macro . sealed) (uI2e3b macro . protocol) (uI2e3a macro . parent) (uI2e39 macro . immutable) (uI2e38 macro . mutable) (uI2e37 macro . fields) (uI2e36 macro . error-handling-mode) (uI2e35 macro . file-options) (uI2e34 macro . buffer-mode) (uI2e33 macro . eol-style) (uI2e32 macro . guard) (uI2e31 macro . trace-define) (uI2e30 macro . trace-lambda) (uI2e2f macro . unsyntax-splicing) (uI2e2e macro . unsyntax) (uI2e2d macro . unquote-splicing) (uI2e2c macro . unquote) (uI2e2b macro . _) (uI2e2a macro . else) (uI2e29 macro . =>) (uI2e28 macro . ...) (uI2e27 macro . assert) (uI2e26 macro . endianness) (uI2e25 macro . delay) (uI2e24 macro . time) (uI2e23 macro . do) (uI2e22 macro . cond) (uI2e21 macro . let*) (uI2e20 macro . let*-values) (uI2e1f macro . let-values) (uI2e1e macro . identifier-syntax) (uI2e1d macro . with-syntax) (uI2e1c macro . quasisyntax) (uI2e1b macro . quasiquote) (uI2e1a macro . syntax-rules) (uI2e19 macro . include) (uI2e18 macro . define-struct) (uI2e17 core-macro . record-constructor-descriptor) (uI2e16 core-macro . record-type-descriptor) (uI2e15 macro . case) (uI2e14 macro . parameterize) (uI2e13 macro . unless) (uI2e12 macro . when) (uI2e11 core-macro . or) (uI2e10 core-macro . and) (uI2e0f core-macro . if) (uI2e0e core-macro . let) (uI2e0d core-macro . letrec*) (uI2e0c core-macro . letrec) (uI2e0b core-macro . type-descriptor) (uI2e0a core-macro . case-lambda) (uI2e09 core-macro . lambda) (uI2e08 core-macro . syntax) (uI2e07 core-macro . syntax-case) (uI2e06 core-macro . quote) (uI2e05 core-macro . foreign-call) (uI2e04 letrec-syntax) (uI2e03 let-syntax) (uI2e02 set!) (uI2e01 import) (uI2e00 begin) (uI2dff module) (uI2dfe define-syntax) (uI2dfd define)) values values '#f '#f '#f '#f) (uI989@uI7d5@install-library 'uI3147 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . uI3126) (eval-core . uI3125) (set-symbol-value! . uI3124) (symbol-value . uI3123) (gensym . uI3122) (void . uI3121)) '() values values '#f '#f '#f '#f) (uI989@uI7d5@install-library 'uI3148 '(mosh) '() '() '() '() '((set-symbol-value! . uI3124) (symbol-value . uI3123) (regexp? . uI311f) (read-line . uI311e) (ungensym . uI311c) (alist->eq-hash-table . uI311b) (assoc-ref . uI311a) (print . uI3119) (format . uI3118) (host-os . uI3117) (library-path . uI7b4) (standard-library-path . uI3116) (file-newer? . uI3115) (stat-mtime . uI3114) (digit->integer . uI3110) (call-with-string-input-port . uI310f) (call-with-string-io . uI310e) (string-split . uI310d) (bytevector-for-each . uI310c) (string->regexp . uI310b) (rxmatch . uI310a) (regexp-replace-all . uI3109) (hashtable-for-each . uI3108) (set-current-directory! . uI3103) (expand-path . uI3102) (current-directory . uI3101) (p . uI30c0) (get-timeofday . uI30a7) (get-command-line . uI30a6) (sys-display . uI30a5) (whereis . uI30a4) (register . uI30a3) (vm-join! . uI30a2) (vm-set-value! . uI30a1) (vm? . uI30a0) (main-vm? . uI309f) (vm-eval . uI309e) (vm-self . uI309d) (vm-start! . uI309c) (make-vm . uI309b) (mutex-try-lock! . uI309a) (mutex-unlock! . uI3099) (mutex-lock! . uI3098) (mutex? . uI3097) (make-mutex . uI3096) (condition-variable-notify-all! . uI3095) (condition-variable-notify! . uI3094) (condition-variable-wait! . uI3093) (make-condition-variable . uI3092) (mosh-executable-path . uI3091) (make-file-options . uI3090) (source-info . uI308f) (make-compiler-instruction . uI308e) (make-instruction . uI308d) (set-source-info! . uI308c) (bignum? . uI308b) (fast-equal? . uI308a) (fasl-read . uI3089) (fasl-write . uI3088) (time-usage . uI3087) (os-constant . uI3086) (time . uI2e24) (include . uI2e19)) '() values values '#f '#f '#f '#f) (uI989@uI7d5@install-library 'uI3149 '(system) '() '() '() '() '((gensym-prefix-set! . uI311d) (write-to-file . uI3113) (file->list . uI3112) (file->string . uI3111) (mosh-cache-dir . uI59f) (call-process . uI3107) (local-tz-offset . uI3106) (microseconds . uI3105) (directory-list . uI3104) (expand-path . uI3102) (%spawn . uI3100) (%waitpid . uI30ff) (simple-struct-name . uI30fe) (simple-struct-set! . uI30fd) (simple-struct-ref . uI30fc) (make-simple-struct . uI30fb) (simple-struct? . uI30fa) (pointer-ref-c-int64 . uI30f9) (pointer-ref-c-int32 . uI30f8) (pointer-ref-c-int16 . uI30f7) (pointer-ref-c-int8 . uI30f6) (pointer-ref-c-uint64 . uI30f5) (pointer-ref-c-uint32 . uI30f4) (pointer-ref-c-uint16 . uI30f3) (pointer-ref-c-uint8 . uI30f2) (pointer-set-c-uint64! . uI30f1) (pointer-set-c-uint32! . uI30f0) (pointer-set-c-uint16! . uI30ef) (pointer-set-c-uint8! . uI30ee) (pointer-set-c-int64! . uI30ed) (pointer-set-c-int32! . uI30ec) (pointer-set-c-int16! . uI30eb) (pointer-set-c-int8! . uI30ea) (pointer-set-c-pointer! . uI30e9) (pointer-set-c-double! . uI30e8) (pointer-set-c-float! . uI30e7) (pointer-set-c-long-long! . uI30e6) (pointer-set-c-long! . uI30e5) (pointer-set-c-int! . uI30e4) (pointer-set-c-short! . uI30e3) (pointer-set-c-char! . uI30e2) (pointer-ref-c-pointer . uI30e1) (pointer-ref-c-double . uI30e0) (pointer-ref-c-float . uI30df) (pointer-ref-c-unsigned-long-long . uI30de) (pointer-ref-c-signed-long-long . uI30dd) (pointer-ref-c-unsigned-long . uI30dc) (pointer-ref-c-signed-long . uI30db) (pointer-ref-c-unsigned-int . uI30da) (pointer-ref-c-signed-int . uI30d9) (pointer-ref-c-unsigned-short . uI30d8) (pointer-ref-c-signed-short . uI30d7) (pointer-ref-c-unsigned-char . uI30d6) (pointer-ref-c-signed-char . uI30d5) (pointer->integer . uI30d4) (integer->pointer . uI30d3) (pointer? . uI30d2) (shared-errno . uI30d1) (%ffi-free-c-callback-trampoline . uI30d0) (%ffi-make-c-callback-trampoline . uI30cf) (%ffi-free . uI30ce) (%ffi-malloc . uI30cd) (%ffi-supported? . uI30cc) (%ffi-pointer->string . uI30cb) (%ffi-call->string-or-zero . uI30ca) (%ffi-call->double . uI30c9) (%ffi-call->void* . uI30c8) (%ffi-call->void . uI30c7) (%ffi-call->char . uI30c6) (%ffi-call->int . uI30c5) (%ffi-lookup . uI30c4) (%ffi-open . uI30c3) (%fork . uI30c2) (%pipe . uI30c1) (open-output-string . uI30bf) (get-output-string . uI30be) (file-stat-ctime . uI30bd) (file-stat-atime . uI30bc) (file-stat-mtime . uI30bb) (file-size-in-bytes . uI30ba) (file-writable? . uI30b9) (file-executable? . uI30b8) (file-readable? . uI30b7) (file-regular? . uI30b6) (file-symbolic-link? . uI30b5) (file-directory? . uI30b4) (create-symbolic-link . uI30b3) (rename-file . uI30b2) (delete-directory . uI30b1) (create-directory . uI30b0) (create-mosh-cache-dir . uI30af) (get-environment-variables . uI30ae) (current-exception-handler . uI30ad) (get-environment-variable . uI30ac) (join-wraps . uI30ab) (id->real-label . uI30aa) (same-marks? . uI30a9) (same-marks*? . uI30a8) (disasm . uI3085) (make-parameter . uI59d) (socket-port . uI3084) (socket-shutdown . uI3083) (socket-close . uI3082) (socket-send . uI3081) (socket-recv! . uI3080) (socket-recv . uI307f) (make-server-socket . uI307e) (make-client-socket . uI307d) (socket-accept . uI307c) (socket? . uI307b) (parameterize . uI2e14)) '() values values '#f '#f '#f '#f)))
(begin (set! uI2c80@ref (unspecified)) (set! uI2c82@x* (unspecified)) (set! uI2c84@add-library-path! (unspecified)) (set! uI2c86@parse-and-add-library-path (unspecified)) (set! uI2c88@for-each-with-index (unspecified)) (set! uI2c8a@rpad (unspecified)) (set! uI2c8c@condition-printer (unspecified)) (set! uI2c8e@record->field-alist (unspecified)) (set! uI2c90@map-with-index (unspecified)) (set! uI2c92@repl (unspecified)) (set! uI2c94@trace-printer (unspecified)) (set! uI2c96@command-line (unspecified)) (set! uI2c98@local-library-path (unspecified)) (set! uI2c9a@load/args (unspecified)) (set! uI2c9c@load (unspecified)) (set! uI2c9e@ironscheme-build (unspecified)) (set! uI2ca0@eval-top-level (unspecified)) (set! uI2ca2@compile-system-libraries (unspecified)) (set! uI2ca4@compile (unspecified)) (set! uI2ca6@compile->closure (unspecified)) (set! uI2ca8@pre-compile-r6rs-file (unspecified)) (set! uI2caa@load-r6rs-top-level (unspecified)) (set! uI2cac@load-r6rs-top-level-sexp (unspecified)) (set! uI2cae@prefix-inc (unspecified)) (set! uI2cb0@prefix-inc! (unspecified)) (set! uI2c80@ref (lambda (uI2ceb@rtd uI2cec@i uI2ced@x) (let ((uI2cf1@val ((record-accessor uI2ceb@rtd uI2cec@i) uI2ced@x))) (if (symbol? uI2cf1@val) (ungensym uI2cf1@val) uI2cf1@val)))) (set! uI2de3@uI2c80@ref uI2c80@ref) (set! uI2c82@x* '()) (set! uI2de4@uI2c82@x* uI2c82@x*) (set! uI2c84@add-library-path! (lambda (uI2cf3@path) (uI979@uI7b5@library-path (append (uI979@uI7b5@library-path) (list uI2cf3@path))))) (set! uI2de5@uI2c84@add-library-path! uI2c84@add-library-path!) (set! uI2c86@parse-and-add-library-path (lambda (uI2cf5@paths uI2cf6@message) (let ((uI2cfa@separator '#f)) (begin (set! uI2cfa@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((uI2cfb@t uI2cf5@paths)) (if uI2cfb@t ((lambda (uI2cfd@paths) (for-each (lambda (uI2cff@path) (if (file-exists? uI2cff@path) (uI2c84@add-library-path! (expand-path uI2cff@path)) (format (current-error-port) uI2cf6@message uI2cff@path))) (string-split uI2cfd@paths uI2cfa@separator))) uI2cfb@t) (void))))))) (set! uI2de6@uI2c86@parse-and-add-library-path uI2c86@parse-and-add-library-path) (set! uI2c88@for-each-with-index (lambda (uI2d01@proc uI2d02@lst) (letrec ((uI2d05@loop (lambda (uI2d07@i uI2d08@lst) (if (null? uI2d08@lst) (if '#f '#f (void)) (begin (uI2d01@proc uI2d07@i (car uI2d08@lst)) (uI2d05@loop (+ uI2d07@i '1) (cdr uI2d08@lst))))))) (uI2d05@loop '1 uI2d02@lst)))) (set! uI2de7@uI2c88@for-each-with-index uI2c88@for-each-with-index) (set! uI2c8a@rpad (lambda (uI2d0b@str uI2d0c@pad uI2d0d@n) (let ((uI2d11@rest (- uI2d0d@n (string-length (format '"~a" uI2d0b@str))))) (let uI2d17@loop ((uI2d13@rest uI2d11@rest) (uI2d14@ret (format '"~a" uI2d0b@str))) (if (<= uI2d13@rest '0) uI2d14@ret (uI2d17@loop (- uI2d13@rest '1) (string-append uI2d14@ret uI2d0c@pad))))))) (set! uI2de8@uI2c8a@rpad uI2c8a@rpad) (set! uI2c8c@condition-printer (lambda (uI2d19@e uI2d1a@port) (let ((uI2d1e@max-condition-len '#f)) (begin (set! uI2d1e@max-condition-len (apply max (map (lambda (uI2d2f@c) (string-length (symbol->string (record-type-name (record-rtd uI2d2f@c))))) (simple-conditions uI2d19@e)))) (begin (display '" Condition components:\n" uI2d1a@port) (uI2c88@for-each-with-index (lambda (uI2d1f@i uI2d20@x) (let ((uI2d23@rtd (record-rtd uI2d20@x)) (uI2d24@fields-alist (uI2c8e@record->field-alist uI2d20@x))) (begin (format uI2d1a@port '" ~d. ~a" uI2d1f@i (uI2c8a@rpad (symbol->string (record-type-name uI2d23@rtd)) '" " uI2d1e@max-condition-len)) (if (null? uI2d24@fields-alist) (newline uI2d1a@port) (void)) (let uI2d2b@loop ((uI2d27@first '#t) (uI2d28@fields-alist uI2d24@fields-alist)) (if (null? uI2d28@fields-alist) '() (let ((uI2d2d@field (car uI2d28@fields-alist))) (begin (if (not uI2d27@first) (display (uI2c8a@rpad '"" '" " (+ '4 uI2d1e@max-condition-len)) uI2d1a@port) (void)) (display '"       " uI2d1a@port) (display (car uI2d2d@field) uI2d1a@port) (display '": " uI2d1a@port) (write (cdr uI2d2d@field) uI2d1a@port) (newline uI2d1a@port) (uI2d2b@loop '#f (cdr uI2d28@fields-alist))))))))) (simple-conditions uI2d19@e))))))) (set! uI2de9@uI2c8c@condition-printer uI2c8c@condition-printer) (set! uI2c8e@record->field-alist (lambda (uI2d31@r) (let ((uI2d34@ref '#f)) (begin (set! uI2d34@ref (lambda (uI2d3f@rtd uI2d40@i uI2d41@x) (let ((uI2d45@val ((record-accessor uI2d3f@rtd uI2d40@i) uI2d41@x))) (if (symbol? uI2d45@val) (ungensym uI2d45@val) uI2d45@val)))) (let uI2d39@loop ((uI2d35@ret '()) (uI2d36@rtd (record-rtd uI2d31@r))) (if uI2d36@rtd (uI2d39@loop (append uI2d35@ret (uI2c90@map-with-index (lambda (uI2d3b@i uI2d3c@field) (cons uI2d3c@field (uI2d34@ref uI2d36@rtd uI2d3b@i uI2d31@r))) (vector->list (record-type-field-names uI2d36@rtd)))) (record-type-parent uI2d36@rtd)) uI2d35@ret)))))) (set! uI2dea@uI2c8e@record->field-alist uI2c8e@record->field-alist) (set! uI2c90@map-with-index (lambda (uI2d47@proc uI2d48@lst) (let uI2d51@loop ((uI2d4b@i '0) (uI2d4c@lst uI2d48@lst) (uI2d4d@ret '())) (if (null? uI2d4c@lst) (reverse uI2d4d@ret) (uI2d51@loop (+ uI2d4b@i '1) (cdr uI2d4c@lst) (cons (uI2d47@proc uI2d4b@i (car uI2d4c@lst)) uI2d4d@ret)))))) (set! uI2deb@uI2c90@map-with-index uI2c90@map-with-index) (set! uI2c92@repl (lambda uI2d53@x (let ((uI2d56@rec '#f)) (begin (set! uI2d56@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (uI2d59@uI2d57) (lambda () (with-exception-handler (lambda (uI2d5b@e) ((call/cc (lambda (uI2d5d@uI2d58) (uI2d59@uI2d57 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? uI2d5b@e) (uI2c8c@condition-printer uI2d5b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" uI2d5b@e))) (uI2d5d@uI2d58 (lambda () (raise-continuable uI2d5b@e)))))))))) (lambda () (let uI2d63@loop ((uI2d5f@line (get-line (current-input-port))) (uI2d60@accum '"")) (let ((uI2d66@parentheses-ok? '#f) (uI2d68@eval-string-print '#f)) (begin (set! uI2d66@parentheses-ok? (lambda (uI2d6d@text) (let uI2d75@loop ((uI2d6f@chars (string->list uI2d6d@text)) (uI2d70@p0 '0) (uI2d71@p1 '0)) (if (null? uI2d6f@chars) (= '0 uI2d70@p0 uI2d71@p1) (let ((uI2d77@t (car uI2d6f@chars))) (if (memv uI2d77@t '(#\()) (uI2d75@loop (cdr uI2d6f@chars) (+ uI2d70@p0 '1) uI2d71@p1) (if (memv uI2d77@t '(#\))) (uI2d75@loop (cdr uI2d6f@chars) (- uI2d70@p0 '1) uI2d71@p1) (if (memv uI2d77@t '(#\[)) (uI2d75@loop (cdr uI2d6f@chars) uI2d70@p0 (+ uI2d71@p1 '1)) (if (memv uI2d77@t '(#\])) (uI2d75@loop (cdr uI2d6f@chars) uI2d70@p0 (- uI2d71@p1 '1)) (uI2d75@loop (cdr uI2d6f@chars) uI2d70@p0 uI2d71@p1)))))))))) (set! uI2d68@eval-string-print (lambda (uI2d6b@text) (if (not (or (string=? '"\n" uI2d6b@text) (= '0 (string-length uI2d6b@text)))) (write (uI2ca0@eval-top-level (call-with-port (open-string-input-port uI2d6b@text) read))) (void)))) (if (eof-object? uI2d5f@line) (begin (uI2d68@eval-string-print uI2d60@accum) (exit)) (let ((uI2d69@current (string-append uI2d60@accum uI2d5f@line))) (if (uI2d66@parentheses-ok? uI2d69@current) (uI2d68@eval-string-print uI2d69@current) (uI2d63@loop (get-line (current-input-port)) uI2d69@current))))))))))))) (newline) (uI2d56@rec)))) (uI2d56@rec))))) (set! uI2dec@uI2c92@repl uI2c92@repl) (set! uI2c94@trace-printer (uI6bf@uI59e@make-parameter write)) (set! uI2ded@uI2c94@trace-printer uI2c94@trace-printer) (set! uI2c96@command-line (uI6bf@uI59e@make-parameter (get-command-line))) (set! uI2dee@uI2c96@command-line uI2c96@command-line) (set! uI2c98@local-library-path (lambda (uI2d79@filename) (uI979@uI7b5@library-path))) (set! uI2def@uI2c98@local-library-path uI2c98@local-library-path) (set! uI2c9a@load/args (lambda (uI2d7b@filename . uI2d7d@args) (begin (apply uI2caa@load-r6rs-top-level uI2d7b@filename 'load uI2d7d@args) (void)))) (set! uI2df0@uI2c9a@load/args uI2c9a@load/args) (set! uI2c9c@load (lambda (uI2d7f@filename) (begin (apply uI2caa@load-r6rs-top-level uI2d7f@filename 'load (uI2c96@command-line)) (void)))) (set! uI2df1@uI2c9c@load uI2c9c@load) (set! uI2c9e@ironscheme-build (lambda () (uI2c9c@load '"ironscheme-buildscript.ss"))) (set! uI2df2@uI2c9e@ironscheme-build uI2c9e@ironscheme-build) (set! uI2ca0@eval-top-level (lambda (uI2d81@x) (uI28a6@uIe3c@eval uI2d81@x (uI28bd@uIe6a@interaction-environment)))) (set! uI2df3@uI2ca0@eval-top-level uI2ca0@eval-top-level) (set! uI2ca2@compile-system-libraries (lambda () (uI2ca0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! uI2df4@uI2ca2@compile-system-libraries uI2ca2@compile-system-libraries) (set! uI2ca4@compile (lambda (uI2d83@filename) (uI2caa@load-r6rs-top-level uI2d83@filename 'compile))) (set! uI2df5@uI2ca4@compile uI2ca4@compile) (set! uI2ca6@compile->closure (lambda (uI2d85@filename) (uI2caa@load-r6rs-top-level uI2d85@filename 'closure))) (set! uI2df6@uI2ca6@compile->closure uI2ca6@compile->closure) (set! uI2ca8@pre-compile-r6rs-file (lambda (uI2d87@filename) (uI2caa@load-r6rs-top-level uI2d87@filename 'compile))) (set! uI2df7@uI2ca8@pre-compile-r6rs-file uI2ca8@pre-compile-r6rs-file) (set! uI2caa@load-r6rs-top-level (lambda (uI2d89@filename uI2d8a@how . uI2d8d@args) (begin (uI979@uI7b5@library-path (uI2c98@local-library-path uI2d89@filename)) (let ((uI2d8f@x* (with-input-from-file uI2d89@filename (lambda () (let uI2d91@f () (let ((uI2d93@x (uI6b2@uI584@read-annotated))) (if (eof-object? uI2d93@x) '() (cons uI2d93@x (uI2d91@f))))))))) (let ((uI2d95@t uI2d8a@how)) (if (memv uI2d95@t '(closure)) (uI28bc@uIe68@pre-compile-r6rs-top-level uI2d8f@x*) (if (memv uI2d95@t '(load)) (begin (uI2c96@command-line (cons uI2d89@filename (car uI2d8d@args))) (uI6c0@uI5a0@mosh-cache-dir (create-mosh-cache-dir)) (if (uI6c0@uI5a0@mosh-cache-dir) (gensym-prefix-set! (uI2cb0@prefix-inc! (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (uI2d97@file) ((call/cc (lambda (uI2d9b@uI2d99) (lambda () (with-exception-handler (lambda (uI2d9d@c) ((call/cc (lambda (uI2d9f@uI2d9a) (uI2d9b@uI2d99 (lambda () (if '#t '#t (uI2d9f@uI2d9a (lambda () (raise-continuable uI2d9d@c)))))))))) (lambda () (delete-file (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/" uI2d97@file))))))))) (directory-list (uI6c0@uI5a0@mosh-cache-dir))) (void)) (let ((uI2da1@compiled (uI28bb@uIe66@compile-r6rs-top-level uI2d8f@x*))) (begin (if (and (uI6c0@uI5a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (uI97d@uI7bd@serialize-all uI6ba@uI594@serialize-library uI716@uI6cf@compile-core-expr) (void)) (uI2da1@compiled)))) (if (memv uI2d95@t '(compile)) (begin (uI28bb@uIe66@compile-r6rs-top-level uI2d8f@x*) (uI97d@uI7bd@serialize-all uI6ba@uI594@serialize-library uI716@uI6cf@compile-core-expr)) (if '#f '#f (void)))))))))) (set! uI2df8@uI2caa@load-r6rs-top-level uI2caa@load-r6rs-top-level) (set! uI2cac@load-r6rs-top-level-sexp (lambda (uI2da3@import-spec uI2da4@thunk) (let ((uI2daf@uI2da8 uI979@uI7b5@library-path) (uI2db0@uI2daa uI6c0@uI5a0@mosh-cache-dir) (uI2db1@uI2dac (uI2c98@local-library-path '"")) (uI2db2@uI2dae (create-mosh-cache-dir))) (let ((uI2db7@swap (lambda () (begin (let ((uI2db9@t (uI2daf@uI2da8))) (begin (uI2daf@uI2da8 uI2db1@uI2dac) (set! uI2db1@uI2dac uI2db9@t))) (let ((uI2dbb@t (uI2db0@uI2daa))) (begin (uI2db0@uI2daa uI2db2@uI2dae) (set! uI2db2@uI2dae uI2dbb@t))))))) (dynamic-wind uI2db7@swap (lambda () (begin (if (uI6c0@uI5a0@mosh-cache-dir) (gensym-prefix-set! (uI2cb0@prefix-inc! (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((uI2dc1@uI2dbe uI2c96@command-line) (uI2dc2@uI2dc0 '())) (let ((uI2dc5@swap (lambda () (let ((uI2dc7@t (uI2dc1@uI2dbe))) (begin (uI2dc1@uI2dbe uI2dc2@uI2dc0) (set! uI2dc2@uI2dc0 uI2dc7@t)))))) (dynamic-wind uI2dc5@swap (lambda () ((uI28bb@uIe66@compile-r6rs-top-level (list (cons 'import uI2da3@import-spec) (list uI2da4@thunk))))) uI2dc5@swap))))) uI2db7@swap))))) (set! uI2df9@uI2cac@load-r6rs-top-level-sexp uI2cac@load-r6rs-top-level-sexp) (set! uI2cae@prefix-inc (lambda (uI2dc9@prefix-string) (let ((uI2dcb@prefix (symbol->string uI2dc9@prefix-string))) (let ((uI2dcd@len (string-length uI2dcb@prefix))) (let uI2dd5@loop ((uI2dcf@i (- uI2dcd@len '1)) (uI2dd0@carry? '#t) (uI2dd1@accum '())) (if (< uI2dcf@i '0) (string->symbol (list->string (if uI2dd0@carry? (cons '#\a uI2dd1@accum) uI2dd1@accum))) (if uI2dd0@carry? (let ((uI2dd7@next-integer (+ '1 (char->integer (string-ref uI2dcb@prefix uI2dcf@i))))) (if (= uI2dd7@next-integer '123) (uI2dd5@loop (- uI2dcf@i '1) '#f (cons '#\A uI2dd1@accum)) (if (= uI2dd7@next-integer '91) (uI2dd5@loop (- uI2dcf@i '1) '#t (cons '#\a uI2dd1@accum)) (uI2dd5@loop (- uI2dcf@i '1) '#f (cons (integer->char uI2dd7@next-integer) uI2dd1@accum))))) (uI2dd5@loop (- uI2dcf@i '1) '#f (cons (string-ref uI2dcb@prefix uI2dcf@i) uI2dd1@accum))))))))) (set! uI2dfa@uI2cae@prefix-inc uI2cae@prefix-inc) (set! uI2cb0@prefix-inc! (lambda (uI2dd9@file) (begin (if (not (file-exists? uI2dd9@file)) (call-with-output-file uI2dd9@file (lambda (uI2ddb@port) (write 'd uI2ddb@port))) (void)) (let ((uI2ddd@prefix (call-with-input-file uI2dd9@file read))) (let ((uI2ddf@next-prefix (uI2cae@prefix-inc uI2ddd@prefix))) (begin (call-with-port (open-file-output-port uI2dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (uI2de1@port) (write uI2ddf@next-prefix uI2de1@port))) uI2ddd@prefix)))))) (set! uI2dfb@uI2cb0@prefix-inc! uI2cb0@prefix-inc!) (begin (uI97e@uI7bf@current-precompiled-library-loader uI6bb@uI596@load-serialized-library) (set-symbol-value! 'load uI2c9c@load) (set-symbol-value! 'pre-compile-r6rs-file uI2ca8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs uI2ca0@eval-top-level) (set-symbol-value! 'int-env-syms uI289d@uIe2a@interaction-environment-symbols) (set-symbol-value! 'expanded2core uI715@uI6cd@expanded->core) (set-symbol-value! 'trace-printer uI2c94@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (uI2cb1@c) (condition (uI2bdd@uI29e7@make-non-continuable-violation) (uI2bd3@uI29ce@make-who-condition 'raise) (uI2b97@uI292f@make-message-condition '"returned from non-continuable exception") (uI2bc9@uI29b3@make-irritants-condition (list uI2cb1@c))))) (uI2c86@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (uI2c86@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (uI2c84@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (uI2c84@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (uI2c84@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((uI2cb3@prefix (lambda (uI2cb5@ext uI2cb6@ls) (append (map (lambda (uI2cb9@x) (string-append uI2cb5@ext uI2cb9@x)) uI2cb6@ls) uI2cb6@ls)))) (uI97a@uI7b7@library-extensions (uI2cb3@prefix '".mosh" (uI97a@uI7b7@library-extensions)))) (current-exception-handler (lambda (uI2cbb@c) (if (condition? uI2cbb@c) (uI2c8c@condition-printer uI2cbb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" uI2cbb@c)))) (if ((call/cc (lambda (uI2cbf@uI2cbd) (lambda () (with-exception-handler (lambda (uI2cc1@c) ((call/cc (lambda (uI2cc3@uI2cbe) (uI2cbf@uI2cbd (lambda () (if '#t '#f (uI2cc3@uI2cbe (lambda () (raise-continuable uI2cc1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (uI2cac@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (uI2c96@command-line)) (let ((uI2ccd@uI2cc6 uI2c96@command-line) (uI2cce@uI2cc8 uI6c0@uI5a0@mosh-cache-dir) (uI2ccf@uI2cca '()) (uI2cd0@uI2ccc (create-mosh-cache-dir))) (let ((uI2cd5@swap (lambda () (begin (let ((uI2cd7@t (uI2ccd@uI2cc6))) (begin (uI2ccd@uI2cc6 uI2ccf@uI2cca) (set! uI2ccf@uI2cca uI2cd7@t))) (let ((uI2cd9@t (uI2cce@uI2cc8))) (begin (uI2cce@uI2cc8 uI2cd0@uI2ccc) (set! uI2cd0@uI2ccc uI2cd9@t))))))) (dynamic-wind uI2cd5@swap (lambda () (begin (if (uI6c0@uI5a0@mosh-cache-dir) (gensym-prefix-set! (uI2cb0@prefix-inc! (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (uI2c92@repl))) uI2cd5@swap))) (begin (uI979@uI7b5@library-path (uI2c98@local-library-path (car (uI2c96@command-line)))) (set! uI2c82@x* (with-input-from-file (car (uI2c96@command-line)) (lambda () (let uI2cdb@f () (let ((uI2cdd@x (uI6b2@uI584@read-annotated))) (if (eof-object? uI2cdd@x) '() (cons uI2cdd@x (uI2cdb@f)))))))) (uI2c96@command-line (cons (car (uI2c96@command-line)) (cdr (uI2c96@command-line)))) (uI6c0@uI5a0@mosh-cache-dir (create-mosh-cache-dir)) (if (uI6c0@uI5a0@mosh-cache-dir) (gensym-prefix-set! (uI2cb0@prefix-inc! (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (uI2cdf@file) ((call/cc (lambda (uI2ce3@uI2ce1) (lambda () (with-exception-handler (lambda (uI2ce5@c) ((call/cc (lambda (uI2ce7@uI2ce2) (uI2ce3@uI2ce1 (lambda () (if '#t '#t (uI2ce7@uI2ce2 (lambda () (raise-continuable uI2ce5@c)))))))))) (lambda () (delete-file (string-append (uI6c0@uI5a0@mosh-cache-dir) '"/" uI2cdf@file))))))))) (directory-list (uI6c0@uI5a0@mosh-cache-dir))) (void)) (let ((uI2ce9@compiled (uI28bb@uIe66@compile-r6rs-top-level uI2c82@x*))) (begin (if (and (uI6c0@uI5a0@mosh-cache-dir) (not (symbol-value '%disable-acc))) (uI97d@uI7bd@serialize-all uI6ba@uI594@serialize-library uI716@uI6cf@compile-core-expr) (void)) (uI2ce9@compiled))))))))
