;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (r2788@read-annotated r278a@annotation-stripped r278c@annotation? r278e@annotation-source r2790@annotation-expression r2792@scm->fasl r2794@fasl-save r2796@fasl-load r2798@serialize-library r279a@load-serialized-library r279c@make-record-printer r279e@compile-core r27a0@read-library-source-file r27a2@make-parameter r280a@file-options-spec) (begin (set! r2788@read-annotated read) (set! r278a@annotation-stripped (lambda (r280b@x) (r2790@annotation-expression r280b@x))) (set! r278c@annotation? (lambda (r280d@x) (source-info r280d@x))) (set! r278e@annotation-source (lambda (r280f@x) (source-info r280f@x))) (set! r2790@annotation-expression (lambda (r2811@x) (if (pair? r2811@x) (cons (car r2811@x) (cdr r2811@x)) (display '"line:46\n")))) (set! r2792@scm->fasl (lambda (r2813@filename) (string-append r2813@filename '".mosh-fasl"))) (set! r2794@fasl-save (lambda (r2815@filename r2816@obj) (call-with-port (open-file-output-port r2815@filename) (lambda (r2819@port) ((symbol-value 'fasl-write!) r2816@obj r2819@port))))) (set! r2796@fasl-load (lambda (r281b@filename) (call-with-port (open-file-input-port r281b@filename) (symbol-value 'fasl-read!)))) (set! r2798@serialize-library (lambda (r281d@filename r281e@obj) (begin (format '#t '"serialize-library ~a\n..." r281d@filename) ((lambda (r2821@expanded2core) ((lambda (r2823@compile) ((lambda (r2825@code) ((lambda (r2827@pivot) ((lambda (r2829@visit) ((lambda () (begin (set-car! r2827@pivot r2829@visit) ((lambda (r282b@pivot) ((lambda (r282d@invoke) ((lambda () (set-car! r282b@pivot r282d@invoke)))) (r2823@compile (r2821@expanded2core (car r282b@pivot))))) (cdr r2827@pivot)))))) (r2823@compile (r2821@expanded2core (car r2827@pivot))))) (cddddr (cddddr r2825@code)))) r281e@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (r282f@fasl-file) (begin (if (file-exists? r282f@fasl-file) (delete-file r282f@fasl-file) (void)) ((call/cc (lambda (r2833@r2831) (lambda () (with-exception-handler (lambda (r2835@c) ((call/cc (lambda (r2837@r2832) (r2833@r2831 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " r281d@filename) (if (file-exists? r282f@fasl-file) (delete-file r282f@fasl-file) (void)) '#f) (r2837@r2832 (lambda () (raise-continuable r2835@c)))))))))) (lambda () (begin (r2794@fasl-save r282f@fasl-file r281e@obj) (display '"OK\n")))))))))) (r2792@scm->fasl r281d@filename))))) (set! r279a@load-serialized-library (lambda (r2839@filename r283a@obj) ((lambda (r283d@fasl-file) (if (and (file-exists? r283d@fasl-file) ((symbol-value 'file-newer?) r283d@fasl-file r2839@filename)) ((lambda (r283f@expanded2core) ((lambda (r2841@eval-compiled-core) ((lambda (r2843@code) ((lambda (r2845@pivot) ((lambda (r2847@visit) ((lambda (r2849@visit-proc) ((lambda () (begin (set-car! r2845@pivot r2849@visit-proc) ((lambda (r284b@pivot) ((lambda (r284d@invoke) ((lambda () (begin (set-car! r284b@pivot (lambda () (r2841@eval-compiled-core r284d@invoke))) (apply r283a@obj r2843@code))))) (car r284b@pivot))) (cdr r2845@pivot)) '#t)))) (lambda () (r2841@eval-compiled-core r2847@visit)))) (car r2845@pivot))) (cddddr (cddddr r2843@code)))) (r2796@fasl-load r283d@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (r2792@scm->fasl r2839@filename)))) (set! r279c@make-record-printer (lambda (r284f@name r2850@printer) (lambda r2853@x (begin (display '"record printer") (for-each display r2853@x))))) (set! r279e@compile-core (lambda r2855@x (apply error 'comile-core '"not implementated" r2855@x))) (set! r27a0@read-library-source-file (lambda (r2857@file-name) (with-input-from-file r2857@file-name r2788@read-annotated))) (set! r27a2@make-parameter (lambda r2867 ((lambda (r2868) (if (= r2868 '1) (apply (lambda (r2859@x) (r27a2@make-parameter r2859@x (lambda (r285b@x) r285b@x))) r2867) (if (= r2868 '2) (apply (lambda (r285d@x r285e@fender) ((lambda (r2861@x) (lambda r2865 ((lambda (r2866) (if (= r2866 '0) (apply (lambda () r2861@x) r2865) (if (= r2866 '1) (apply (lambda (r2863@v) (set! r2861@x (r285e@fender r2863@v))) r2865) (error 'apply '"invalid arg count")))) (length r2865)))) (r285e@fender r285d@x))) r2867) (error 'apply '"invalid arg count")))) (length r2867)))) (set! r280a@file-options-spec (lambda (r2869@x) r2869@x)) (begin (set! r2879@r280a@file-options-spec r280a@file-options-spec) (set! r2878@r27a2@make-parameter r27a2@make-parameter) (set! r2877@r27a0@read-library-source-file r27a0@read-library-source-file) (set! r2876@r279e@compile-core r279e@compile-core) (set! r2875@r279c@make-record-printer r279c@make-record-printer) (set! r2874@r279a@load-serialized-library r279a@load-serialized-library) (set! r2873@r2798@serialize-library r2798@serialize-library) (set! r2872@r2796@fasl-load r2796@fasl-load) (set! r2871@r2794@fasl-save r2794@fasl-save) (set! r2870@r2792@scm->fasl r2792@scm->fasl) (set! r286f@r2790@annotation-expression r2790@annotation-expression) (set! r286e@r278e@annotation-source r278e@annotation-source) (set! r286d@r278c@annotation? r278c@annotation?) (set! r286c@r278a@annotation-stripped r278a@annotation-stripped) (set! r286b@r2788@read-annotated r2788@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r287e@current-primitive-locations r2880@mutable? r2882@rewriter r2884@expanded->core r2886@compile-core-expr r2888@pretty-print r288a@compile-core-expr-to-port) (begin (set! r287e@current-primitive-locations (r2878@r27a2@make-parameter (lambda (r288b@x) '#f) (lambda (r288d@p) r288d@p))) (set! r2880@mutable? (lambda (r288f@x) (or (pair? r288f@x) (vector? r288f@x) (hashtable? r288f@x)))) (set! r2882@rewriter (lambda (r2891@quote-hack?) ((lambda (r2894@f) (begin (set! r2894@f (lambda (r2895@x) (if (pair? r2895@x) ((lambda (r2897@t) (if (memv r2897@t '(quote)) (if (and r2891@quote-hack? (r2880@mutable? (cadr r2895@x))) ((lambda (r2899@g) (begin (set-symbol-value! r2899@g (cadr r2895@x)) r2899@g)) (gensym)) r2895@x) (if (memv r2897@t '(case-lambda)) (cons 'case-lambda (map (lambda (r289b@x) (cons (car r289b@x) (map r2894@f (cdr r289b@x)))) (cdr r2895@x))) (if (memv r2897@t '(lambda)) (cons* 'lambda (cadr r2895@x) (map r2894@f (cddr r2895@x))) (if (memv r2897@t '(letrec)) ((lambda (r289d@bindings r289e@body*) ((lambda (r28a1@lhs* r28a2@rhs*) (cons* 'letrec (map list r28a1@lhs* (map r2894@f r28a2@rhs*)) (map r2894@f r289e@body*))) (map car r289d@bindings) (map cadr r289d@bindings))) (cadr r2895@x) (cddr r2895@x)) (if (memv r2897@t '(letrec*)) ((lambda (r28a5@bindings r28a6@body*) ((lambda (r28a9@lhs* r28aa@rhs*) (cons* 'letrec* (map list r28a9@lhs* (map r2894@f r28aa@rhs*)) (map r2894@f r28a6@body*))) (map car r28a5@bindings) (map cadr r28a5@bindings))) (cadr r2895@x) (cddr r2895@x)) (if (memv r2897@t '(library-letrec*)) ((lambda (r28ad@name r28ae@x) ((lambda (r28b1@bindings r28b2@body*) ((lambda (r28b5@lhs* r28b6@lhs** r28b7@rhs*) (cons* 'library-letrec* r28ad@name (map list r28b5@lhs* r28b6@lhs** (map r2894@f r28b7@rhs*)) (map r2894@f r28b2@body*))) (map car r28b1@bindings) (map cadr r28b1@bindings) (map caddr r28b1@bindings))) (cadr r28ae@x) (cddr r28ae@x))) (cadr r2895@x) (cdr r2895@x)) (if (memv r2897@t '(begin)) (cons 'begin (map r2894@f (cdr r2895@x))) (if (memv r2897@t '(set!)) (list 'set! (cadr r2895@x) (r2894@f (caddr r2895@x))) (if (memv r2897@t '(primitive)) ((lambda (r28bb@op) ((lambda (r28bd@t) (if r28bd@t ((lambda (r28bf@loc) r28bf@loc) r28bd@t) r28bb@op)) ((r287e@current-primitive-locations) r28bb@op))) (cadr r2895@x)) (if (memv r2897@t '(define)) r2895@x (if (list? r2895@x) (map r2894@f r2895@x) (error 'rewrite '"invalid form ~s ~s" r2895@x (list? r2895@x)))))))))))))) (car r2895@x)) r2895@x))) r2894@f)) '#f))) (set! r2884@expanded->core (lambda (r28c1@x) ((r2882@rewriter '#f) r28c1@x))) (set! r2886@compile-core-expr (lambda (r28c3@x) ((r2882@rewriter '#f) r28c3@x))) (set! r2888@pretty-print write) (set! r288a@compile-core-expr-to-port (lambda (r28c5@x r28c6@p) (r2888@pretty-print ((r2882@rewriter '#f) r28c5@x) r28c6@p))) (begin (set! r28cf@r288a@compile-core-expr-to-port r288a@compile-core-expr-to-port) (set! r28ce@r2888@pretty-print r2888@pretty-print) (set! r28cd@r2886@compile-core-expr r2886@compile-core-expr) (set! r28cc@r2884@expanded->core r2884@expanded->core) (set! r28cb@r2882@rewriter r2882@rewriter) (set! r28ca@r2880@mutable? r2880@mutable?) (set! r28c9@r287e@current-primitive-locations r287e@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (r291e@make-collection r2920@current-library-collection r2926@r2921 r2928@r2923 r292a@r2922 r292d@library? r292f@make-library r2931@library-id r2933@library-name r2935@library-version r2937@library-imp* r2939@library-vis* r293b@library-inv* r293d@library-subst r293f@library-env r2941@library-visit-state r2943@library-invoke-state r2945@library-visit-code r2947@library-invoke-code r2949@library-visible? r294b@library-source-file-name r294d@set-library-id! r294f@set-library-name! r2951@set-library-version! r2953@set-library-imp*! r2955@set-library-vis*! r2957@set-library-inv*! r2959@set-library-subst! r295b@set-library-env! r295d@set-library-visit-state! r295f@set-library-invoke-state! r2961@set-library-visit-code! r2963@set-library-invoke-code! r2965@set-library-visible?! r2967@set-library-source-file-name! r2969@rp r296b@find-dependencies r296d@find-library-by r296f@library-path r2971@library-extensions r2973@library-name->file-name r2975@file-locator r2977@serialize-all r2979@current-precompiled-library-loader r297b@try-load-from-file r297d@library-loader r297f@current-library-expander r2981@external-pending-libraries r2983@find-external-library r2985@find-library-by-name r2987@library-exists? r2989@find-library-by-spec/die r298b@label->binding-table r298d@install-library-record r298f@install-library r2991@imported-label->binding r2993@invoke-library r2995@visit-library r2997@invoke-library-by-spec r2999@installed-libraries r299b@library-spec) (begin (set! r291e@make-collection (lambda () ((lambda (r299c@set) ((lambda (r299f@set-cons) (begin (set! r299f@set-cons (lambda (r29a4@x r29a5@ls) (if (memq r29a4@x r29a5@ls) r29a5@ls (cons r29a4@x r29a5@ls)))) (lambda r29a2 ((lambda (r29a3) (if (= r29a3 '0) (apply (lambda () r299c@set) r29a2) (if (= r29a3 '1) (apply (lambda (r29a0@x) (set! r299c@set (r299f@set-cons r29a0@x r299c@set))) r29a2) (error 'apply '"invalid arg count")))) (length r29a2))))) '#f)) '()))) (set! r2920@current-library-collection (r2878@r27a2@make-parameter (r291e@make-collection) (lambda (r29a8@x) (begin (if (not (procedure? r29a8@x)) (assertion-violation 'current-library-collection '"not a procedure" r29a8@x) (void)) r29a8@x)))) (set! r2926@r2921 (make-record-type-descriptor 'library '#f 'r2924 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! r2928@r2923 '#f) (set! r292a@r2922 (make-record-constructor-descriptor r2926@r2921 '#f r2928@r2923)) (set! r292d@library? (record-predicate r2926@r2921)) (set! r292f@make-library (record-constructor r292a@r2922)) (set! r2931@library-id (record-accessor r2926@r2921 '0)) (set! r2933@library-name (record-accessor r2926@r2921 '1)) (set! r2935@library-version (record-accessor r2926@r2921 '2)) (set! r2937@library-imp* (record-accessor r2926@r2921 '3)) (set! r2939@library-vis* (record-accessor r2926@r2921 '4)) (set! r293b@library-inv* (record-accessor r2926@r2921 '5)) (set! r293d@library-subst (record-accessor r2926@r2921 '6)) (set! r293f@library-env (record-accessor r2926@r2921 '7)) (set! r2941@library-visit-state (record-accessor r2926@r2921 '8)) (set! r2943@library-invoke-state (record-accessor r2926@r2921 '9)) (set! r2945@library-visit-code (record-accessor r2926@r2921 '10)) (set! r2947@library-invoke-code (record-accessor r2926@r2921 '11)) (set! r2949@library-visible? (record-accessor r2926@r2921 '12)) (set! r294b@library-source-file-name (record-accessor r2926@r2921 '13)) (set! r294d@set-library-id! (record-mutator r2926@r2921 '0)) (set! r294f@set-library-name! (record-mutator r2926@r2921 '1)) (set! r2951@set-library-version! (record-mutator r2926@r2921 '2)) (set! r2953@set-library-imp*! (record-mutator r2926@r2921 '3)) (set! r2955@set-library-vis*! (record-mutator r2926@r2921 '4)) (set! r2957@set-library-inv*! (record-mutator r2926@r2921 '5)) (set! r2959@set-library-subst! (record-mutator r2926@r2921 '6)) (set! r295b@set-library-env! (record-mutator r2926@r2921 '7)) (set! r295d@set-library-visit-state! (record-mutator r2926@r2921 '8)) (set! r295f@set-library-invoke-state! (record-mutator r2926@r2921 '9)) (set! r2961@set-library-visit-code! (record-mutator r2926@r2921 '10)) (set! r2963@set-library-invoke-code! (record-mutator r2926@r2921 '11)) (set! r2965@set-library-visible?! (record-mutator r2926@r2921 '12)) (set! r2967@set-library-source-file-name! (record-mutator r2926@r2921 '13)) (set! r2969@rp (r2875@r279c@make-record-printer 'library (lambda (r29aa@x r29ab@p r29ac@wr) (begin (if (not (r292d@library? r29aa@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (r2935@library-version r29aa@x)) (r2933@library-name r29aa@x) (append (r2933@library-name r29aa@x) (list (r2935@library-version r29aa@x))))) r29ab@p))))) (set! r296b@find-dependencies (lambda (r29b0@ls) (if (null? r29b0@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! r296d@find-library-by (lambda (r29b2@pred) ((letrec ((r29b4@f (lambda (r29b6@ls) (if (null? r29b6@ls) '#f (if (r29b2@pred (car r29b6@ls)) (car r29b6@ls) (r29b4@f (cdr r29b6@ls))))))) r29b4@f) ((r2920@current-library-collection))))) (set! r296f@library-path (r2878@r27a2@make-parameter '(".") (lambda (r29b8@x) (if (and (list? r29b8@x) (for-all string? r29b8@x)) (map (lambda (r29ba@x) r29ba@x) r29b8@x) (assertion-violation 'library-path '"not a list of strings" r29b8@x))))) (set! r2971@library-extensions (r2878@r27a2@make-parameter '(".sls" ".ss" ".scm") (lambda (r29bc@x) (if (and (list? r29bc@x) (for-all string? r29bc@x)) (map (lambda (r29be@x) r29be@x) r29bc@x) (assertion-violation 'library-extensions '"not a list of strings" r29bc@x))))) (set! r2973@library-name->file-name (lambda (r29c0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r29c6@r29c3 r29c7@r29c5) ((lambda (r29ca@extract r29cb@p) ((lambda (r29cf@display-hex) (begin (set! r29cf@display-hex (lambda (r29d8@n) (if (<= '0 r29d8@n '9) (display r29d8@n r29cb@p) (display (integer->char (+ (char->integer '#\a) (- r29d8@n '10))) r29cb@p)))) (begin ((letrec ((r29d0@f (lambda (r29d2@ls) (if (not (null? r29d2@ls)) (begin (display '"/" r29cb@p) (for-each (lambda (r29d4@c) (if (or (char<=? '#\a r29d4@c '#\z) (char<=? '#\A r29d4@c '#\Z) (char<=? '#\0 r29d4@c '#\9) (memv r29d4@c '(#\- #\. #\_ #\~))) (display r29d4@c r29cb@p) (begin (display '"%" r29cb@p) ((lambda (r29d6@n) (begin (r29cf@display-hex (quotient r29d6@n '16)) (r29cf@display-hex (remainder r29d6@n '16)))) (char->integer r29d4@c))))) (string->list (symbol->string (car r29d2@ls)))) (r29d0@f (cdr r29d2@ls))) (void))))) r29d0@f) r29c0@x) (r29ca@extract)))) '#f)) r29c7@r29c5 r29c6@r29c3))))) (set! r2975@file-locator (r2878@r27a2@make-parameter (lambda (r29da@x) ((lambda (r29dc@str) ((letrec ((r29de@f (lambda (r29e0@ls r29e1@exts r29e2@failed-list) (if (null? r29e0@ls) ((lambda () ((lambda (r29ee@r29e9 r29f0@r29eb r29f2@r29ea r29f5@r29e8 r29f7@make-library-resolution-condition r29f9@r29e6 r29fb@r29e7 r29fd@library-resolution-condition? r29ff@condition-library r2a01@condition-files) (begin (set! r29ee@r29e9 (make-record-type-descriptor '&library-resolution r4c8f@r49d6@&condition-rtd 'r29ec '#f '#f '#((immutable library) (immutable files)))) (set! r29f0@r29eb '#f) (set! r29f2@r29ea (make-record-constructor-descriptor r29ee@r29e9 r4c90@r49d8@&condition-rcd r29f0@r29eb)) (set! r29f5@r29e8 (record-predicate r29ee@r29e9)) (set! r29f7@make-library-resolution-condition (record-constructor r29f2@r29ea)) (set! r29f9@r29e6 (record-accessor r29ee@r29e9 '0)) (set! r29fb@r29e7 (record-accessor r29ee@r29e9 '1)) (set! r29fd@library-resolution-condition? (condition-predicate r29ee@r29e9)) (set! r29ff@condition-library (condition-accessor r29ee@r29e9 r29f9@r29e6)) (set! r2a01@condition-files (condition-accessor r29ee@r29e9 r29fb@r29e7)) (raise (condition (r4caf@r4a70@make-error) (r4cd1@r4acc@make-who-condition 'expander) (r4c95@r4a2d@make-message-condition '"cannot locate library in library-path") (r29f7@make-library-resolution-condition r29da@x (reverse r29e2@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? r29e1@exts) (r29de@f (cdr r29e0@ls) (r2971@library-extensions) r29e2@failed-list) ((lambda (r2a02@name) (if (file-exists? r2a02@name) r2a02@name (r29de@f r29e0@ls (cdr r29e1@exts) (cons r2a02@name r29e2@failed-list)))) (string-append (car r29e0@ls) r29dc@str (car r29e1@exts)))))))) r29de@f) (r296f@library-path) (r2971@library-extensions) '())) (r2973@library-name->file-name r29da@x))) (lambda (r2a04@f) (if (procedure? r2a04@f) r2a04@f (assertion-violation 'file-locator '"not a procedure" r2a04@f))))) (set! r2977@serialize-all (lambda (r2a06@serialize r2a07@compile) ((lambda (r2a0b@library-desc) (begin (set! r2a0b@library-desc (lambda (r2a0e@x) (list (r2931@library-id r2a0e@x) (r2933@library-name r2a0e@x)))) (for-each (lambda (r2a0c@x) (if (r294b@library-source-file-name r2a0c@x) (r2a06@serialize (r294b@library-source-file-name r2a0c@x) (list (r2931@library-id r2a0c@x) (r2933@library-name r2a0c@x) (r2935@library-version r2a0c@x) (map r2a0b@library-desc (r2937@library-imp* r2a0c@x)) (map r2a0b@library-desc (r2939@library-vis* r2a0c@x)) (map r2a0b@library-desc (r293b@library-inv* r2a0c@x)) (r293d@library-subst r2a0c@x) (r293f@library-env r2a0c@x) (r2a07@compile (r2945@library-visit-code r2a0c@x)) (r2a07@compile (r2947@library-invoke-code r2a0c@x)) (r2949@library-visible? r2a0c@x))) (void))) ((r2920@current-library-collection))))) '#f))) (set! r2979@current-precompiled-library-loader (r2878@r27a2@make-parameter (lambda (r2a10@filename r2a11@sk) '#f))) (set! r297b@try-load-from-file (lambda (r2a14@filename) ((r2979@current-precompiled-library-loader) r2a14@filename (lambda r2a3a ((lambda (r2a3b) (if (= r2a3b '11) (apply (lambda (r2a16@id r2a17@name r2a18@ver r2a19@imp* r2a1a@vis* r2a1b@inv* r2a1c@exp-subst r2a1d@exp-env r2a1e@visit-proc r2a1f@invoke-proc r2a20@visible?) ((letrec ((r2a2c@f (lambda (r2a2e@deps) (if (null? r2a2e@deps) (begin (r298f@install-library r2a16@id r2a17@name r2a18@ver r2a19@imp* r2a1a@vis* r2a1b@inv* r2a1c@exp-subst r2a1d@exp-env r2a1e@visit-proc r2a1f@invoke-proc '#f '#f r2a20@visible? '#f) '#t) ((lambda (r2a30@d) ((lambda (r2a32@label r2a33@dname) ((lambda (r2a36@l) (if (and (r292d@library? r2a36@l) (eq? r2a32@label (r2931@library-id r2a36@l))) (r2a2c@f (cdr r2a2e@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" r2a17@name r2a33@dname r2a14@filename r2a36@l r2a32@label (r2931@library-id r2a36@l)) '#f))) (r2985@find-library-by-name r2a33@dname))) (car r2a30@d) (cadr r2a30@d))) (car r2a2e@deps)))))) r2a2c@f) (append r2a19@imp* r2a1a@vis* r2a1b@inv*))) r2a3a) (if (>= r2a3b '0) (apply (lambda r2a38@others '#f) r2a3a) (error 'apply '"invalid arg count")))) (length r2a3a)))))) (set! r297d@library-loader (r2878@r27a2@make-parameter (lambda (r2a3c@x) ((lambda (r2a3e@file-name) (if (not r2a3e@file-name) (assertion-violation '#f '"cannot file library" r2a3c@x) (or (r297b@try-load-from-file r2a3e@file-name) ((r297f@current-library-expander) (r2877@r27a0@read-library-source-file r2a3e@file-name) r2a3e@file-name (lambda (r2a40@name) (if (not (fast-equal? r2a40@name r2a3c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (r2a46@r2a43 r2a47@r2a45) ((lambda (r2a4a@e r2a4b@p) (begin (display '"expected to find library " r2a4b@p) (write r2a3c@x r2a4b@p) (display '" in file " r2a4b@p) (display r2a3e@file-name r2a4b@p) (display '", found " r2a4b@p) (write r2a40@name r2a4b@p) (display '" instead" r2a4b@p) (r2a4a@e))) r2a47@r2a45 r2a46@r2a43)))) (void))))))) ((r2975@file-locator) r2a3c@x))) (lambda (r2a4e@f) (if (procedure? r2a4e@f) r2a4e@f (assertion-violation 'library-locator '"not a procedure" r2a4e@f))))) (set! r297f@current-library-expander (r2878@r27a2@make-parameter (lambda (r2a50@x) (assertion-violation 'library-expander '"not initialized")) (lambda (r2a52@f) (if (procedure? r2a52@f) r2a52@f (assertion-violation 'library-expander '"not a procedure" r2a52@f))))) (set! r2981@external-pending-libraries (r2878@r27a2@make-parameter '())) (set! r2983@find-external-library (lambda (r2a54@name) (begin (if (member r2a54@name (r2981@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" r2a54@name) (void)) ((lambda (r2a5a@r2a57 r2a5b@r2a59) ((lambda (r2a5e@swap) (dynamic-wind r2a5e@swap (lambda () (begin ((r297d@library-loader) r2a54@name) (or (r296d@find-library-by (lambda (r2a60@x) (fast-equal? (r2933@library-name r2a60@x) r2a54@name))) (assertion-violation '#f '"handling external library did not yield the correct library" r2a54@name)))) r2a5e@swap)) (lambda () ((lambda (r2a62@t) (begin (r2a5a@r2a57 r2a5b@r2a59) (set! r2a5b@r2a59 r2a62@t))) (r2a5a@r2a57))))) r2981@external-pending-libraries (cons r2a54@name (r2981@external-pending-libraries)))))) (set! r2985@find-library-by-name (lambda (r2a64@name) (or (r296d@find-library-by (lambda (r2a66@x) (fast-equal? (r2933@library-name r2a66@x) r2a64@name))) (r2983@find-external-library r2a64@name)))) (set! r2987@library-exists? (lambda (r2a68@name) (and (r296d@find-library-by (lambda (r2a6a@x) (fast-equal? (r2933@library-name r2a6a@x) r2a68@name))) '#t))) (set! r2989@find-library-by-spec/die (lambda (r2a6c@spec) ((lambda (r2a6e@id) (or (r296d@find-library-by (lambda (r2a70@x) (eq? r2a6e@id (r2931@library-id r2a70@x)))) (assertion-violation '#f '"cannot find library with required spec" r2a6c@spec))) (car r2a6c@spec)))) (set! r298b@label->binding-table (make-eq-hashtable)) (set! r298d@install-library-record (lambda (r2a72@lib) (begin ((lambda (r2a74@exp-env) (for-each (lambda (r2a76@x) ((lambda (r2a78@label r2a79@binding) ((lambda (r2a7c@binding) (begin (if (hashtable-ref r298b@label->binding-table r2a78@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" r2a78@label (hashtable-ref r298b@label->binding-table r2a78@label '#f) r2a7c@binding) (exit)) (void)) (hashtable-set! r298b@label->binding-table r2a78@label r2a7c@binding))) ((lambda (r2a7e@t) (if (memv r2a7e@t '(global)) (cons 'global (cons r2a72@lib (cdr r2a79@binding))) (if (memv r2a7e@t '(global-macro)) (cons 'global-macro (cons r2a72@lib (cdr r2a79@binding))) (if (memv r2a7e@t '(global-macro!)) (cons 'global-macro! (cons r2a72@lib (cdr r2a79@binding))) r2a79@binding)))) (car r2a79@binding)))) (car r2a76@x) (cdr r2a76@x))) r2a74@exp-env)) (r293f@library-env r2a72@lib)) ((r2920@current-library-collection) r2a72@lib)))) (set! r298f@install-library (lambda (r2a80@id r2a81@name r2a82@ver r2a83@imp* r2a84@vis* r2a85@inv* r2a86@exp-subst r2a87@exp-env r2a88@visit-proc r2a89@invoke-proc r2a8a@visit-code r2a8b@invoke-code r2a8c@visible? r2a8d@source-file-name) ((lambda (r2a9c@imp-lib* r2a9d@vis-lib* r2a9e@inv-lib*) (begin (if (not (and (symbol? r2a80@id) (list? r2a81@name) (list? r2a82@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" r2a80@id r2a81@name r2a82@ver) (void)) (if (r2987@library-exists? r2a81@name) (assertion-violation 'install-library '"library is already installed" r2a81@name) (void)) ((lambda (r2aa2@lib) (r298d@install-library-record r2aa2@lib)) (r292f@make-library r2a80@id r2a81@name r2a82@ver r2a9c@imp-lib* r2a9d@vis-lib* r2a9e@inv-lib* r2a86@exp-subst r2a87@exp-env r2a88@visit-proc r2a89@invoke-proc r2a8a@visit-code r2a8b@invoke-code r2a8c@visible? r2a8d@source-file-name)))) (map r2989@find-library-by-spec/die r2a83@imp*) (map r2989@find-library-by-spec/die r2a84@vis*) (map r2989@find-library-by-spec/die r2a85@inv*)))) (set! r2991@imported-label->binding (lambda (r2aa4@lab) (hashtable-ref r298b@label->binding-table r2aa4@lab '#f))) (set! r2993@invoke-library (lambda (r2aa6@lib) ((lambda (r2aa8@invoke) (if (procedure? r2aa8@invoke) (begin (r295f@set-library-invoke-state! r2aa6@lib (lambda () (assertion-violation 'invoke '"circularity detected" r2aa6@lib))) (for-each r2993@invoke-library (r293b@library-inv* r2aa6@lib)) (r295f@set-library-invoke-state! r2aa6@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" r2aa6@lib))) (r2aa8@invoke) (r295f@set-library-invoke-state! r2aa6@lib '#t)) (void))) (r2943@library-invoke-state r2aa6@lib)))) (set! r2995@visit-library (lambda (r2aaa@lib) ((lambda (r2aac@visit) (if (procedure? r2aac@visit) (begin (r295d@set-library-visit-state! r2aaa@lib (lambda () (assertion-violation 'visit '"circularity detected" r2aaa@lib))) (for-each r2993@invoke-library (r2939@library-vis* r2aaa@lib)) (r295d@set-library-visit-state! r2aaa@lib (lambda () (assertion-violation 'invoke '"first visit did not return" r2aaa@lib))) (r2aac@visit) (r295d@set-library-visit-state! r2aaa@lib '#t)) (void))) (r2941@library-visit-state r2aaa@lib)))) (set! r2997@invoke-library-by-spec (lambda (r2aae@spec) (r2993@invoke-library (r2989@find-library-by-spec/die r2aae@spec)))) (set! r2999@installed-libraries (lambda r2ab6 ((lambda (r2ab7) (if (= r2ab7 '1) (apply (lambda (r2ab0@all?) ((letrec ((r2ab2@f (lambda (r2ab4@ls) (if (null? r2ab4@ls) '() (if (or r2ab0@all? (r2949@library-visible? (car r2ab4@ls))) (cons (car r2ab4@ls) (r2ab2@f (cdr r2ab4@ls))) (r2ab2@f (cdr r2ab4@ls))))))) r2ab2@f) ((r2920@current-library-collection)))) r2ab6) (if (= r2ab7 '0) (apply (lambda () (r2999@installed-libraries '#f)) r2ab6) (error 'apply '"invalid arg count")))) (length r2ab6)))) (set! r299b@library-spec (lambda (r2ab8@x) (begin (if (not (r292d@library? r2ab8@x)) (assertion-violation 'library-spec '"not a library" r2ab8@x) (void)) (list (r2931@library-id r2ab8@x) (r2933@library-name r2ab8@x) (r2935@library-version r2ab8@x))))) (begin (set! r2af6@r299b@library-spec r299b@library-spec) (set! r2af5@r2999@installed-libraries r2999@installed-libraries) (set! r2af4@r2997@invoke-library-by-spec r2997@invoke-library-by-spec) (set! r2af3@r2995@visit-library r2995@visit-library) (set! r2af2@r2993@invoke-library r2993@invoke-library) (set! r2af1@r2991@imported-label->binding r2991@imported-label->binding) (set! r2af0@r298f@install-library r298f@install-library) (set! r2aef@r298d@install-library-record r298d@install-library-record) (set! r2aee@r298b@label->binding-table r298b@label->binding-table) (set! r2aed@r2989@find-library-by-spec/die r2989@find-library-by-spec/die) (set! r2aec@r2987@library-exists? r2987@library-exists?) (set! r2aeb@r2985@find-library-by-name r2985@find-library-by-name) (set! r2aea@r2983@find-external-library r2983@find-external-library) (set! r2ae9@r2981@external-pending-libraries r2981@external-pending-libraries) (set! r2ae8@r297f@current-library-expander r297f@current-library-expander) (set! r2ae7@r297d@library-loader r297d@library-loader) (set! r2ae6@r297b@try-load-from-file r297b@try-load-from-file) (set! r2ae5@r2979@current-precompiled-library-loader r2979@current-precompiled-library-loader) (set! r2ae4@r2977@serialize-all r2977@serialize-all) (set! r2ae3@r2975@file-locator r2975@file-locator) (set! r2ae2@r2973@library-name->file-name r2973@library-name->file-name) (set! r2ae1@r2971@library-extensions r2971@library-extensions) (set! r2ae0@r296f@library-path r296f@library-path) (set! r2adf@r296d@find-library-by r296d@find-library-by) (set! r2ade@r296b@find-dependencies r296b@find-dependencies) (set! r2add@r2969@rp r2969@rp) (set! r2adc@r2967@set-library-source-file-name! r2967@set-library-source-file-name!) (set! r2adb@r2965@set-library-visible?! r2965@set-library-visible?!) (set! r2ada@r2963@set-library-invoke-code! r2963@set-library-invoke-code!) (set! r2ad9@r2961@set-library-visit-code! r2961@set-library-visit-code!) (set! r2ad8@r295f@set-library-invoke-state! r295f@set-library-invoke-state!) (set! r2ad7@r295d@set-library-visit-state! r295d@set-library-visit-state!) (set! r2ad6@r295b@set-library-env! r295b@set-library-env!) (set! r2ad5@r2959@set-library-subst! r2959@set-library-subst!) (set! r2ad4@r2957@set-library-inv*! r2957@set-library-inv*!) (set! r2ad3@r2955@set-library-vis*! r2955@set-library-vis*!) (set! r2ad2@r2953@set-library-imp*! r2953@set-library-imp*!) (set! r2ad1@r2951@set-library-version! r2951@set-library-version!) (set! r2ad0@r294f@set-library-name! r294f@set-library-name!) (set! r2acf@r294d@set-library-id! r294d@set-library-id!) (set! r2ace@r294b@library-source-file-name r294b@library-source-file-name) (set! r2acd@r2949@library-visible? r2949@library-visible?) (set! r2acc@r2947@library-invoke-code r2947@library-invoke-code) (set! r2acb@r2945@library-visit-code r2945@library-visit-code) (set! r2aca@r2943@library-invoke-state r2943@library-invoke-state) (set! r2ac9@r2941@library-visit-state r2941@library-visit-state) (set! r2ac8@r293f@library-env r293f@library-env) (set! r2ac7@r293d@library-subst r293d@library-subst) (set! r2ac6@r293b@library-inv* r293b@library-inv*) (set! r2ac5@r2939@library-vis* r2939@library-vis*) (set! r2ac4@r2937@library-imp* r2937@library-imp*) (set! r2ac3@r2935@library-version r2935@library-version) (set! r2ac2@r2933@library-name r2933@library-name) (set! r2ac1@r2931@library-id r2931@library-id) (set! r2ac0@r292f@make-library r292f@make-library) (set! r2abf@r292d@library? r292d@library?) (set! r2abe@r292a@r2922 r292a@r2922) (set! r2abd@r2928@r2923 r2928@r2923) (set! r2abc@r2926@r2921 r2926@r2921) (set! r2abb@r2920@current-library-collection r2920@current-library-collection) (set! r2aba@r291e@make-collection r291e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2af9@build-global-define r2b6a@build-lambda r2b6c@build-case-lambda r2b6e@build-let r2b9c@build-sequence r2b9e@build-void r2ba0@build-letrec r2ba2@build-letrec* r2ba4@build-library-letrec* r2ba6@build-receive) (begin (set! r2af9@build-global-define (lambda (r2ba7@x) (r2b9e@build-void))) (set! r2b6a@build-lambda (lambda (r2ba9@ae r2baa@vars r2bab@exp) (list 'lambda r2baa@vars r2bab@exp))) (set! r2b6c@build-case-lambda (lambda (r2baf@ae r2bb0@vars* r2bb1@exp*) ((lambda (r2bb6@build-error r2bb8@build-pred r2bba@build-apply r2bbc@expand-case-lambda) (begin (set! r2bb6@build-error (lambda (r2bed@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! r2bb8@build-pred (lambda (r2bd5@ae r2bd6@n r2bd7@vars) (call-with-values (lambda () ((letrec ((r2bdf@f (lambda (r2be1@vars r2be2@count) (if (pair? r2be1@vars) (r2bdf@f (cdr r2be1@vars) (+ r2be2@count '1)) (if (null? r2be1@vars) (values r2be2@count '=) (values r2be2@count '>=)))))) r2bdf@f) r2bd7@vars '0)) (lambda (r2be5@r2bdc r2be6@r2bde) ((lambda (r2be9@pred r2bea@count) (list (list 'primitive r2be9@pred) r2bd6@n (list 'quote r2bea@count))) r2be6@r2bde r2be5@r2bdc))))) (set! r2bba@build-apply (lambda (r2bcd@ae r2bce@g r2bcf@vars r2bd0@exp) (list '(primitive apply) (r2b6a@build-lambda r2bcd@ae r2bcf@vars r2bd0@exp) r2bce@g))) (set! r2bbc@expand-case-lambda (lambda (r2bbd@ae r2bbe@vars r2bbf@exp*) ((lambda (r2bc3@g r2bc4@n) (list 'lambda r2bc3@g (r2b6e@build-let r2bbd@ae (list r2bc4@n) (list (list '(primitive length) r2bc3@g)) ((letrec ((r2bc7@f (lambda (r2bc9@vars* r2bca@exp*) (if (null? r2bc9@vars*) (r2bb6@build-error r2bbd@ae) (list 'if (r2bb8@build-pred r2bbd@ae r2bc4@n (car r2bc9@vars*)) (r2bba@build-apply r2bbd@ae r2bc3@g (car r2bc9@vars*) (car r2bca@exp*)) (r2bc7@f (cdr r2bc9@vars*) (cdr r2bca@exp*))))))) r2bc7@f) r2bb0@vars* r2bbf@exp*)))) (gensym) (gensym)))) (if (= (length r2bb1@exp*) '1) (r2b6a@build-lambda r2baf@ae (car r2bb0@vars*) (car r2bb1@exp*)) (r2bbc@expand-case-lambda r2baf@ae r2bb0@vars* r2bb1@exp*)))) '#f '#f '#f '#f))) (set! r2b6e@build-let (lambda (r2bef@ae r2bf0@lhs* r2bf1@rhs* r2bf2@body) (cons (r2b6a@build-lambda r2bef@ae r2bf0@lhs* r2bf2@body) r2bf1@rhs*))) (set! r2b9c@build-sequence (lambda (r2bf7@ae r2bf8@exps) ((letrec ((r2bfb@loop (lambda (r2bfd@exps) (if (null? (cdr r2bfd@exps)) (car r2bfd@exps) (if (equal? (car r2bfd@exps) (r2b9e@build-void)) (r2bfb@loop (cdr r2bfd@exps)) (cons 'begin r2bfd@exps)))))) r2bfb@loop) r2bf8@exps))) (set! r2b9e@build-void (lambda () '((primitive void)))) (set! r2ba0@build-letrec (lambda (r2bff@ae r2c00@vars r2c01@val-exps r2c02@body-exp) (if (null? r2c00@vars) r2c02@body-exp (list 'letrec (map list r2c00@vars r2c01@val-exps) r2c02@body-exp)))) (set! r2ba2@build-letrec* (lambda (r2c07@ae r2c08@vars r2c09@val-exps r2c0a@body-exp) (if (null? r2c08@vars) r2c0a@body-exp (r2b6e@build-let r2c07@ae r2c08@vars (map (lambda (r2c0f@x) (list 'quote '#f)) r2c08@vars) (r2b9c@build-sequence r2c07@ae (append (map (lambda (r2c11@lhs r2c12@rhs) (list 'set! r2c11@lhs r2c12@rhs)) r2c08@vars r2c09@val-exps) (list r2c0a@body-exp))))))) (set! r2ba4@build-library-letrec* (lambda (r2c15@ae r2c16@name r2c17@vars r2c18@locs r2c19@val-exps r2c1a@body-exp) (list 'library-letrec* r2c16@name (map list r2c17@vars r2c18@locs r2c19@val-exps) r2c1a@body-exp))) (set! r2ba6@build-receive (lambda (r2c21@ae r2c22@vars r2c23@producer r2c24@body*) (begin (display '"************** in ") (cons 'receive (cons r2c22@vars (cons r2c23@producer r2c24@body*)))))) (begin (set! r2c32@r2ba6@build-receive r2ba6@build-receive) (set! r2c31@r2ba4@build-library-letrec* r2ba4@build-library-letrec*) (set! r2c30@r2ba2@build-letrec* r2ba2@build-letrec*) (set! r2c2f@r2ba0@build-letrec r2ba0@build-letrec) (set! r2c2e@r2b9e@build-void r2b9e@build-void) (set! r2c2d@r2b9c@build-sequence r2b9c@build-sequence) (set! r2c2c@r2b6e@build-let r2b6e@build-let) (set! r2c2b@r2b6c@build-case-lambda r2b6c@build-case-lambda) (set! r2c2a@r2b6a@build-lambda r2b6a@build-lambda) (set! r2c29@r2af9@build-global-define r2af9@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r2c41@file-options-macro r2c43@set-cons r2c45@set-union r2c4a@top-mark* r2c4c@top-marked? r2c4e@gen-lexical r2c50@gen-global r2c52@gen-label r2c54@gen-top-level-label r2c56@gen-define-label+loc r2c58@gen-define-label r2c5e@r2c59 r2c60@r2c5b r2c62@r2c5a r2c65@rib? r2c67@make-rib r2c69@rib-sym* r2c6b@rib-mark** r2c6d@rib-label* r2c6f@rib-sealed/freq r2c71@rib-cache r2c73@set-rib-sym*! r2c75@set-rib-mark**! r2c77@set-rib-label*! r2c79@set-rib-sealed/freq! r2c7b@set-rib-cache! r2c7d@make-empty-rib r2c7f@extend-rib! r2c81@extend-rib/nc! r2c83@make-rib-map r2c85@seal-rib! r2c87@unseal-rib! r2c89@make-full-rib r2c8f@r2c8a r2c91@r2c8c r2c93@r2c8b r2c96@stx? r2c98@make-stx r2c9a@stx-expr r2c9c@stx-mark* r2c9e@stx-subst* r2ca0@stx-ae* r2ca2@set-stx-expr! r2ca4@set-stx-mark*! r2ca6@set-stx-subst*! r2ca8@set-stx-ae*! r2caa@rp r2cac@datum->stx r2cae@gen-mark r2cb0@anti-mark r2cb2@anti-mark? r2cb4@join-wraps r2cb6@mkstx r2cb8@add-mark r2cba@add-subst r2cbc@syntax-kind? r2cbe@syntax-vector->list r2cc0@syntax-pair? r2cc2@syntax-vector? r2cc4@syntax-null? r2cc6@syntax-list? r2cc8@syntax-car r2cca@syntax-cdr r2ccc@syntax->list r2cce@id? r2cd0@id->sym r2cd2@same-marks? r2cd4@bound-id=? r2cd6@free-id=? r2cd8@valid-bound-ids? r2cda@distinct-bound-ids? r2cdc@bound-id-member? r2cde@self-evaluating? r2ce0@strip-annotations r2ce2@strip r2ce4@stx->datum r2ce6@same-marks*? r2ce8@id->label r2cea@id->real-label r2cec@label->binding r2cee@make-binding r2cf0@binding-type r2cf2@binding-value r2cf4@raise-unbound-error r2cf6@syntax-type r2d04@sanitize-binding r2d06@make-variable-transformer r2d08@variable-transformer? r2d0a@variable-transformer-procedure r2d0c@make-eval-transformer r2e5d@parse-define r2e5f@parse-define-syntax r2e61@scheme-stx-hashtable r2e63@scheme-stx r2e65@lexical-var r2e67@lexical-mutable? r2e69@set-lexical-mutable! r2e6b@add-lexical r2e6d@add-lexicals r2e6f@letrec-helper r2e71@letrec-transformer r2e73@letrec*-transformer r2e75@fluid-let-syntax-transformer r2e77@type-descriptor-transformer r2e79@record-type-descriptor-transformer r2e7b@record-constructor-descriptor-transformer r2e7d@when-macro r2e7f@unless-macro r2e81@if-transformer r2e83@and-transformer r2e85@or-transformer r2e87@case-macro r2e89@quote-transformer r2e8b@case-lambda-transformer r2e8d@lambda-transformer r2e8f@bless r2e91@with-syntax-macro r2e93@invalid-fmls-error r2e95@let-macro r2e97@let-values-macro r2e99@let*-values-macro r2e9b@trace-lambda-macro r2e9d@trace-define-macro r2e9f@trace-define-syntax-macro r2ea1@trace-let/rec-syntax r2ea3@trace-let-syntax-macro r2ea5@trace-letrec-syntax-macro r2ea7@guard-macro r2ea9@define-enumeration-macro r2eab@time-macro r2ead@delay-macro r2eaf@assert-macro r2eb1@endianness-macro r2eb3@identifier-syntax-macro r2eb5@do-macro r2eb7@let*-macro r2eb9@or-macro r2ebb@and-macro r2ebd@cond-macro r2ebf@do-include r2ec1@include-macro r2ec3@include-into-macro r2ec5@syntax-rules-macro r2ec7@quasiquote-macro r2ec9@quasisyntax-macro r2ecb@define-struct-macro r2ecd@define-record-type-macro r2ecf@define-condition-type-macro r2ed1@incorrect-usage-macro r2ed3@parameterize-macro r2ed5@foreign-call-transformer r2ed7@convert-pattern r2ed9@syntax-dispatch r2edb@ellipsis? r2edd@underscore? r2edf@verify-literals r2ee1@syntax-case-transformer r2ee3@ellipsis-map r2ee5@syntax-transformer r2ee7@core-macro-transformer r2ee9@symbol-macro r2eeb@macro-transformer r2eed@local-macro-transformer r2eef@do-macro-call r2ef1@chi-macro r2ef3@chi-local-macro r2ef5@chi-global-macro r2ef7@chi-expr* r2ef9@chi-application r2efb@chi-expr r2efd@chi-set! r2eff@verify-formals r2f01@chi-lambda-clause r2f03@chi-lambda-clause* r2f05@chi-defun r2f07@chi-rhs r2f09@expand-interaction-rhs*/init* r2f0b@chi-rhs* r2f0d@find-bound=? r2f0f@find-dups r2f11@chi-internal r2f13@parse-module r2f19@r2f14 r2f1b@r2f16 r2f1d@r2f15 r2f20@module-interface? r2f22@make-module-interface r2f24@module-interface-first-mark r2f26@module-interface-exp-id-vec r2f28@module-interface-exp-lab-vec r2f2a@set-module-interface-first-mark! r2f2c@set-module-interface-exp-id-vec! r2f2e@set-module-interface-exp-lab-vec! r2f30@module-interface-exp-id* r2f32@chi-internal-module r2f34@chi-body* r2f36@expand-transformer r2f38@parse-exports r2f3a@parse-library-name r2f3c@parse-library r2f3e@parse-import-spec* r2f40@make-top-rib r2f42@make-collector r2f44@inv-collector r2f46@vis-collector r2f48@imp-collector r2f4a@chi-library-internal r2f4c@chi-interaction-expr r2f4e@library-body-expander r2f50@core-library-expander r2f52@parse-top-level-program r2f54@top-level-expander r2f5a@r2f55 r2f5c@r2f57 r2f5e@r2f56 r2f61@env? r2f63@make-env r2f65@env-names r2f67@env-labels r2f69@env-itc r2f6b@set-env-names! r2f6d@set-env-labels! r2f6f@set-env-itc! r2f71@rp r2f77@r2f72 r2f79@r2f74 r2f7b@r2f73 r2f7e@interaction-env? r2f80@make-interaction-env r2f82@interaction-env-rib r2f84@interaction-env-r r2f86@interaction-env-locs r2f88@set-interaction-env-rib! r2f8a@set-interaction-env-r! r2f8c@set-interaction-env-locs! r2f8e@rp r2f90@interaction-environment-symbols r2f92@environment-bindings r2f94@parse-binding r2f96@environment? r2f98@environment-symbols r2f9a@environment r2f9c@null-environment r2f9e@scheme-report-environment r2fa0@expand r2fa2@eval r2fa4@library-expander r2fa6@boot-library-expand r2fa8@rev-map-append r2faa@build-exports r2fac@make-export-subst r2fae@make-export-env/macros r2fb0@generate-temporaries r2fb2@free-identifier=? r2fb4@bound-identifier=? r2fb6@make-source-condition r2fb8@extract-position-condition r2fba@expression-position r2fbc@assertion-error r2fbe@syntax-error r2fc0@syntax-violation* r2fc2@syntax-violation r2fc4@identifier? r2fc6@datum->syntax r2fc8@syntax->datum r2fca@compile-r6rs-top-level r2fcc@pre-compile-r6rs-top-level r2fce@interaction-environment r2fd0@top-level-context) (begin (set! r2c41@file-options-macro (lambda (r2fd1@x) ((lambda (r2fd4@valid-option?) (begin (set! r2fd4@valid-option? (lambda (r2fdd@x) (and (r2cce@id? r2fdd@x) (memq (r2cd0@id->sym r2fdd@x) '(no-fail no-create no-truncate))))) ((lambda (r2fd5@t) ((lambda (r2fd7@ls/false) (if (and r2fd7@ls/false (apply (lambda (r2fd9@opt*) (for-all r2fd4@valid-option? r2fd9@opt*)) r2fd7@ls/false)) (apply (lambda (r2fdb@opt*) (r2e8f@bless (list 'make-file-options (list 'quote r2fdb@opt*)))) r2fd7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r2fd5@t))) (r2ed9@syntax-dispatch r2fd5@t '(_ . each-any)))) r2fd1@x))) '#f))) (set! r2c43@set-cons (lambda (r2fdf@x r2fe0@ls) (if (memq r2fdf@x r2fe0@ls) r2fe0@ls (cons r2fdf@x r2fe0@ls)))) (set! r2c45@set-union (lambda (r2fe3@ls1 r2fe4@ls2) (if (null? r2fe3@ls1) r2fe4@ls2 (if (memq (car r2fe3@ls1) r2fe4@ls2) (r2c45@set-union (cdr r2fe3@ls1) r2fe4@ls2) (cons (car r2fe3@ls1) (r2c45@set-union (cdr r2fe3@ls1) r2fe4@ls2)))))) (set! r2c4a@top-mark* '(top)) (set! r2c4c@top-marked? (lambda (r2fe7@m*) (memq 'top r2fe7@m*))) (set! r2c4e@gen-lexical (lambda (r2fe9@sym) (if (symbol? r2fe9@sym) (gensym r2fe9@sym) (if (r2c96@stx? r2fe9@sym) (r2c4e@gen-lexical (r2cd0@id->sym r2fe9@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" r2fe9@sym))))) (set! r2c50@gen-global (lambda (r2feb@x) (r2c4e@gen-lexical r2feb@x))) (set! r2c52@gen-label (lambda (r2fed@_) (gensym))) (set! r2c54@gen-top-level-label (lambda (r2fef@id r2ff0@rib) ((lambda (r2ff4@find) (begin (set! r2ff4@find (lambda (r2fff@sym r3000@mark* r3001@sym* r3002@mark** r3003@label*) (and (pair? r3001@sym*) (if (and (eq? r2fff@sym (car r3001@sym*)) (r2cd2@same-marks? r3000@mark* (car r3002@mark**))) (car r3003@label*) (r2ff4@find r2fff@sym r3000@mark* (cdr r3001@sym*) (cdr r3002@mark**) (cdr r3003@label*)))))) ((lambda (r2ff5@sym r2ff6@mark*) ((lambda (r2ff9@sym*) ((lambda (r2ffb@t) (if r2ffb@t ((lambda (r2ffd@label) (if (r2af1@r2991@imported-label->binding r2ffd@label) (gensym) r2ffd@label)) r2ffb@t) (gensym))) (and (memq r2ff5@sym (r2c69@rib-sym* r2ff0@rib)) (r2ff4@find r2ff5@sym r2ff6@mark* r2ff9@sym* (r2c6b@rib-mark** r2ff0@rib) (r2c6d@rib-label* r2ff0@rib))))) (r2c69@rib-sym* r2ff0@rib))) (r2cd0@id->sym r2fef@id) (r2c9c@stx-mark* r2fef@id)))) '#f))) (set! r2c56@gen-define-label+loc (lambda (r3009@id r300a@rib) ((lambda (r300d@t) (if r300d@t ((lambda (r300f@env) ((lambda (r3011@label r3012@locs) (values r3011@label ((lambda (r3015@t) (if r3015@t (cdr r3015@t) ((lambda (r3017@loc) (begin (r2f8c@set-interaction-env-locs! r300f@env (cons (cons r3011@label r3017@loc) r3012@locs)) r3017@loc)) (r2c4e@gen-lexical r3009@id)))) (assq r3011@label r3012@locs)))) (r2c54@gen-top-level-label r3009@id r300a@rib) (r2f86@interaction-env-locs r300f@env))) r300d@t) (values (gensym) (r2c4e@gen-lexical r3009@id)))) (r2fd0@top-level-context)))) (set! r2c58@gen-define-label (lambda (r3019@id r301a@rib) (if (r2fd0@top-level-context) (r2c54@gen-top-level-label r3019@id r301a@rib) (gensym)))) (set! r2c5e@r2c59 (make-record-type-descriptor 'rib '#f 'r2c5c '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! r2c60@r2c5b '#f) (set! r2c62@r2c5a (make-record-constructor-descriptor r2c5e@r2c59 '#f r2c60@r2c5b)) (set! r2c65@rib? (record-predicate r2c5e@r2c59)) (set! r2c67@make-rib (record-constructor r2c62@r2c5a)) (set! r2c69@rib-sym* (record-accessor r2c5e@r2c59 '0)) (set! r2c6b@rib-mark** (record-accessor r2c5e@r2c59 '1)) (set! r2c6d@rib-label* (record-accessor r2c5e@r2c59 '2)) (set! r2c6f@rib-sealed/freq (record-accessor r2c5e@r2c59 '3)) (set! r2c71@rib-cache (record-accessor r2c5e@r2c59 '4)) (set! r2c73@set-rib-sym*! (record-mutator r2c5e@r2c59 '0)) (set! r2c75@set-rib-mark**! (record-mutator r2c5e@r2c59 '1)) (set! r2c77@set-rib-label*! (record-mutator r2c5e@r2c59 '2)) (set! r2c79@set-rib-sealed/freq! (record-mutator r2c5e@r2c59 '3)) (set! r2c7b@set-rib-cache! (record-mutator r2c5e@r2c59 '4)) (set! r2c7d@make-empty-rib (lambda () (r2c67@make-rib '() '() '() '#f '#f))) (set! r2c7f@extend-rib! (lambda (r301d@rib r301e@id r301f@label) ((lambda (r3024@find) (begin (set! r3024@find (lambda (r3031@sym r3032@mark* r3033@sym* r3034@mark** r3035@label*) (and (pair? r3033@sym*) (if (and (eq? r3031@sym (car r3033@sym*)) (r2cd2@same-marks? r3032@mark* (car r3034@mark**))) r3035@label* (r3024@find r3031@sym r3032@mark* (cdr r3033@sym*) (cdr r3034@mark**) (cdr r3035@label*)))))) (begin (if (r2c6f@rib-sealed/freq r301d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" r301d@rib) (void)) ((lambda (r3025@sym r3026@mark*) ((lambda (r3029@sym*) ((lambda (r302b@t) (if r302b@t ((lambda (r302d@p) (if (not (eq? r301f@label (car r302d@p))) (if (r2fd0@top-level-context) (set-car! r302d@p r301f@label) (r2fc2@syntax-violation '#f '"multiple definitions of identifier" r301e@id)) (void))) r302b@t) (begin (if (r2c71@rib-cache r301d@rib) (hashtable-update! (r2c71@rib-cache r301d@rib) r3025@sym (lambda (r302f@e) (cons (cons r3026@mark* r301f@label) r302f@e)) '()) (void)) (r2c73@set-rib-sym*! r301d@rib (cons r3025@sym r3029@sym*)) (r2c75@set-rib-mark**! r301d@rib (cons r3026@mark* (r2c6b@rib-mark** r301d@rib))) (r2c77@set-rib-label*! r301d@rib (cons r301f@label (r2c6d@rib-label* r301d@rib)))))) (and (memq r3025@sym (r2c69@rib-sym* r301d@rib)) (r3024@find r3025@sym r3026@mark* r3029@sym* (r2c6b@rib-mark** r301d@rib) (r2c6d@rib-label* r301d@rib))))) (r2c69@rib-sym* r301d@rib))) (r2cd0@id->sym r301e@id) (r2c9c@stx-mark* r301e@id))))) '#f))) (set! r2c81@extend-rib/nc! (lambda (r303b@rib r303c@id r303d@label) ((lambda (r3041@sym r3042@mark*) ((lambda (r3045@sym*) (begin (if (r2c71@rib-cache r303b@rib) (hashtable-update! (r2c71@rib-cache r303b@rib) r3041@sym (lambda (r3047@e) (cons (cons r3042@mark* r303d@label) r3047@e)) '()) (void)) (r2c73@set-rib-sym*! r303b@rib (cons r3041@sym r3045@sym*)) (r2c75@set-rib-mark**! r303b@rib (cons r3042@mark* (r2c6b@rib-mark** r303b@rib))) (r2c77@set-rib-label*! r303b@rib (cons r303d@label (r2c6d@rib-label* r303b@rib))))) (r2c69@rib-sym* r303b@rib))) (r2cd0@id->sym r303c@id) (r2c9c@stx-mark* r303c@id)))) (set! r2c83@make-rib-map (lambda (r3049@sym*) ((lambda (r304b@ht) ((letrec ((r304d@f (lambda (r304f@i r3050@sym*) (if (null? r3050@sym*) r304b@ht (begin (hashtable-update! r304b@ht (car r3050@sym*) (lambda (r3053@x) (cons r304f@i r3053@x)) '()) (r304d@f (+ r304f@i '1) (cdr r3050@sym*))))))) r304d@f) '0 r3049@sym*)) (make-eq-hashtable)))) (set! r2c85@seal-rib! (lambda (r3055@rib) ((lambda (r3057@sym*) (if (not (null? r3057@sym*)) (begin (r2c73@set-rib-sym*! r3055@rib (list->vector r3057@sym*)) (r2c75@set-rib-mark**! r3055@rib (list->vector (r2c6b@rib-mark** r3055@rib))) (r2c77@set-rib-label*! r3055@rib (list->vector (r2c6d@rib-label* r3055@rib))) (r2c79@set-rib-sealed/freq! r3055@rib (r2c83@make-rib-map r3057@sym*))) (void))) (r2c69@rib-sym* r3055@rib)))) (set! r2c87@unseal-rib! (lambda (r3059@rib) (if (r2c6f@rib-sealed/freq r3059@rib) (begin (r2c79@set-rib-sealed/freq! r3059@rib '#f) (r2c73@set-rib-sym*! r3059@rib (vector->list (r2c69@rib-sym* r3059@rib))) (r2c75@set-rib-mark**! r3059@rib (vector->list (r2c6b@rib-mark** r3059@rib))) (r2c77@set-rib-label*! r3059@rib (vector->list (r2c6d@rib-label* r3059@rib)))) (void)))) (set! r2c89@make-full-rib (lambda (r305b@id* r305c@label*) ((lambda (r305f@r) (begin (r2c85@seal-rib! r305f@r) r305f@r)) (r2c67@make-rib (map r2cd0@id->sym r305b@id*) (map r2c9c@stx-mark* r305b@id*) r305c@label* '#f '#f)))) (set! r2c8f@r2c8a (make-record-type-descriptor 'stx '#f 'r2c8d '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! r2c91@r2c8c '#f) (set! r2c93@r2c8b (make-record-constructor-descriptor r2c8f@r2c8a '#f r2c91@r2c8c)) (set! r2c96@stx? (record-predicate r2c8f@r2c8a)) (set! r2c98@make-stx (record-constructor r2c93@r2c8b)) (set! r2c9a@stx-expr (record-accessor r2c8f@r2c8a '0)) (set! r2c9c@stx-mark* (record-accessor r2c8f@r2c8a '1)) (set! r2c9e@stx-subst* (record-accessor r2c8f@r2c8a '2)) (set! r2ca0@stx-ae* (record-accessor r2c8f@r2c8a '3)) (set! r2ca2@set-stx-expr! (record-mutator r2c8f@r2c8a '0)) (set! r2ca4@set-stx-mark*! (record-mutator r2c8f@r2c8a '1)) (set! r2ca6@set-stx-subst*! (record-mutator r2c8f@r2c8a '2)) (set! r2ca8@set-stx-ae*! (record-mutator r2c8f@r2c8a '3)) (set! r2caa@rp (r2875@r279c@make-record-printer 'stx (lambda (r3061@x r3062@p r3063@wr) (begin (display '"#<syntax " r3062@p) (write (r2ce4@stx->datum r3061@x) r3062@p) ((lambda (r3067@expr) (if (r286d@r278c@annotation? r3067@expr) ((lambda (r3069@src) (if (pair? r3069@src) (begin (display '" [" r3062@p) (display (cdr r3069@src) r3062@p) (display '" of " r3062@p) (display (car r3069@src) r3062@p) (display '"]" r3062@p)) (void))) (r286e@r278e@annotation-source r3067@expr)) (void))) (r2c9a@stx-expr r3061@x)) (display '">" r3062@p))))) (set! r2cac@datum->stx (lambda (r306b@id r306c@datum) (r2c98@make-stx r306c@datum (r2c9c@stx-mark* r306b@id) (r2c9e@stx-subst* r306b@id) (r2ca0@stx-ae* r306b@id)))) (set! r2cae@gen-mark (lambda () (string '#\m))) (set! r2cb0@anti-mark '#f) (set! r2cb2@anti-mark? not) (set! r2cb4@join-wraps (lambda (r306f@m1* r3070@s1* r3071@ae1* r3072@e) ((lambda (r3078@cancel) (begin (set! r3078@cancel (lambda (r307f@ls1 r3080@ls2) ((letrec ((r3083@f (lambda (r3085@x r3086@ls1) (if (null? r3086@ls1) (cdr r3080@ls2) (cons r3085@x (r3083@f (car r3086@ls1) (cdr r3086@ls1))))))) r3083@f) (car r307f@ls1) (cdr r307f@ls1)))) ((lambda (r3079@m2* r307a@s2* r307b@ae2*) (if (and (not (null? r306f@m1*)) (not (null? r3079@m2*)) (r2cb2@anti-mark? (car r3079@m2*))) (values (r3078@cancel r306f@m1* r3079@m2*) (r3078@cancel r3070@s1* r307a@s2*) (r3078@cancel r3071@ae1* r307b@ae2*)) (values (append r306f@m1* r3079@m2*) (append r3070@s1* r307a@s2*) (append r3071@ae1* r307b@ae2*)))) (r2c9c@stx-mark* r3072@e) (r2c9e@stx-subst* r3072@e) (r2ca0@stx-ae* r3072@e)))) '#f))) (set! r2cb6@mkstx (lambda (r3089@e r308a@m* r308b@s* r308c@ae*) (if (and (r2c96@stx? r3089@e) (not (r2c4c@top-marked? r308a@m*))) (call-with-values (lambda () (r2cb4@join-wraps r308a@m* r308b@s* r308c@ae* r3089@e)) (lambda (r3097@r3092 r3098@r3094 r3099@r3096) ((lambda (r309d@ae* r309e@s* r309f@m*) (r2c98@make-stx (r2c9a@stx-expr r3089@e) r309f@m* r309e@s* r309d@ae*)) r3099@r3096 r3098@r3094 r3097@r3092))) (r2c98@make-stx r3089@e r308a@m* r308b@s* r308c@ae*)))) (set! r2cb8@add-mark (lambda (r30a3@m r30a4@e r30a5@ae) (r2cb6@mkstx r30a4@e (list r30a3@m) '(shift) (list r30a5@ae)))) (set! r2cba@add-subst (lambda (r30a9@subst r30aa@e) (r2cb6@mkstx r30aa@e '() (list r30a9@subst) '()))) (set! r2cbc@syntax-kind? (lambda (r30ad@x r30ae@p?) (if (r2c96@stx? r30ad@x) (r2cbc@syntax-kind? (r2c9a@stx-expr r30ad@x) r30ae@p?) (if (r286d@r278c@annotation? r30ad@x) (r2cbc@syntax-kind? (r286f@r2790@annotation-expression r30ad@x) r30ae@p?) (r30ae@p? r30ad@x))))) (set! r2cbe@syntax-vector->list (lambda (r30b1@x) (if (r2c96@stx? r30b1@x) ((lambda (r30b3@ls r30b4@m* r30b5@s* r30b6@ae*) (map (lambda (r30bb@x) (r2cb6@mkstx r30bb@x r30b4@m* r30b5@s* r30b6@ae*)) r30b3@ls)) (r2cbe@syntax-vector->list (r2c9a@stx-expr r30b1@x)) (r2c9c@stx-mark* r30b1@x) (r2c9e@stx-subst* r30b1@x) (r2ca0@stx-ae* r30b1@x)) (if (r286d@r278c@annotation? r30b1@x) (r2cbe@syntax-vector->list (r286f@r2790@annotation-expression r30b1@x)) (if (vector? r30b1@x) (vector->list r30b1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" r30b1@x)))))) (set! r2cc0@syntax-pair? (lambda (r30bd@x) (r2cbc@syntax-kind? r30bd@x pair?))) (set! r2cc2@syntax-vector? (lambda (r30bf@x) (r2cbc@syntax-kind? r30bf@x vector?))) (set! r2cc4@syntax-null? (lambda (r30c1@x) (r2cbc@syntax-kind? r30c1@x null?))) (set! r2cc6@syntax-list? (lambda (r30c3@x) (or (r2cc4@syntax-null? r30c3@x) (and (r2cc0@syntax-pair? r30c3@x) (r2cc6@syntax-list? (r2cca@syntax-cdr r30c3@x)))))) (set! r2cc8@syntax-car (lambda (r30c5@x) (if (r2c96@stx? r30c5@x) (r2cb6@mkstx (r2cc8@syntax-car (r2c9a@stx-expr r30c5@x)) (r2c9c@stx-mark* r30c5@x) (r2c9e@stx-subst* r30c5@x) (r2ca0@stx-ae* r30c5@x)) (if (r286d@r278c@annotation? r30c5@x) (r2cc8@syntax-car (r286f@r2790@annotation-expression r30c5@x)) (if (pair? r30c5@x) (car r30c5@x) (assertion-violation 'syntax-car '"BUG: not a pair" r30c5@x)))))) (set! r2cca@syntax-cdr (lambda (r30c7@x) (if (r2c96@stx? r30c7@x) (r2cb6@mkstx (r2cca@syntax-cdr (r2c9a@stx-expr r30c7@x)) (r2c9c@stx-mark* r30c7@x) (r2c9e@stx-subst* r30c7@x) (r2ca0@stx-ae* r30c7@x)) (if (r286d@r278c@annotation? r30c7@x) (r2cca@syntax-cdr (r286f@r2790@annotation-expression r30c7@x)) (if (pair? r30c7@x) (cdr r30c7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" r30c7@x)))))) (set! r2ccc@syntax->list (lambda (r30c9@x) (if (r2cc0@syntax-pair? r30c9@x) (cons (r2cc8@syntax-car r30c9@x) (r2ccc@syntax->list (r2cca@syntax-cdr r30c9@x))) (if (r2cc4@syntax-null? r30c9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" r30c9@x))))) (set! r2cce@id? (lambda (r30cb@x) (and (r2c96@stx? r30cb@x) ((lambda (r30cd@expr) (symbol? (if (r286d@r278c@annotation? r30cd@expr) (r286c@r278a@annotation-stripped r30cd@expr) r30cd@expr))) (r2c9a@stx-expr r30cb@x))))) (set! r2cd0@id->sym (lambda (r30cf@x) (begin (if (not (r2c96@stx? r30cf@x)) (error 'id->sym '"BUG in ikarus: not an id" r30cf@x) (void)) ((lambda (r30d1@expr) ((lambda (r30d3@sym) (if (symbol? r30d3@sym) r30d3@sym (error 'id->sym '"BUG in ikarus: not an id" r30cf@x))) (if (r286d@r278c@annotation? r30d1@expr) (r286c@r278a@annotation-stripped r30d1@expr) r30d1@expr))) (r2c9a@stx-expr r30cf@x))))) (set! r2cd2@same-marks? (lambda (r30d5@x r30d6@y) (or (and (null? r30d5@x) (null? r30d6@y)) (and (pair? r30d5@x) (pair? r30d6@y) (eq? (car r30d5@x) (car r30d6@y)) (r2cd2@same-marks? (cdr r30d5@x) (cdr r30d6@y)))))) (set! r2cd4@bound-id=? (lambda (r30d9@x r30da@y) (and (eq? (r2cd0@id->sym r30d9@x) (r2cd0@id->sym r30da@y)) (r2cd2@same-marks? (r2c9c@stx-mark* r30d9@x) (r2c9c@stx-mark* r30da@y))))) (set! r2cd6@free-id=? (lambda (r30dd@i r30de@j) ((lambda (r30e1@t0 r30e2@t1) (if (or r30e1@t0 r30e2@t1) (eq? r30e1@t0 r30e2@t1) (eq? (r2cd0@id->sym r30dd@i) (r2cd0@id->sym r30de@j)))) (r2cea@id->real-label r30dd@i) (r2cea@id->real-label r30de@j)))) (set! r2cd8@valid-bound-ids? (lambda (r30e5@id*) (and (for-all r2cce@id? r30e5@id*) (r2cda@distinct-bound-ids? r30e5@id*)))) (set! r2cda@distinct-bound-ids? (lambda (r30e7@id*) (or (null? r30e7@id*) (and (not (r2cdc@bound-id-member? (car r30e7@id*) (cdr r30e7@id*))) (r2cda@distinct-bound-ids? (cdr r30e7@id*)))))) (set! r2cdc@bound-id-member? (lambda (r30e9@id r30ea@id*) (and (pair? r30ea@id*) (or (r2cd4@bound-id=? r30e9@id (car r30ea@id*)) (r2cdc@bound-id-member? r30e9@id (cdr r30ea@id*)))))) (set! r2cde@self-evaluating? (lambda (r30ed@x) (or (number? r30ed@x) (string? r30ed@x) (char? r30ed@x) (boolean? r30ed@x) (regexp? r30ed@x) (bytevector? r30ed@x)))) (set! r2ce0@strip-annotations (lambda (r30ef@x) (if (pair? r30ef@x) (cons (r2ce0@strip-annotations (car r30ef@x)) (r2ce0@strip-annotations (cdr r30ef@x))) (if (vector? r30ef@x) (vector-map r2ce0@strip-annotations r30ef@x) (if (r286d@r278c@annotation? r30ef@x) (r286c@r278a@annotation-stripped r30ef@x) r30ef@x))))) (set! r2ce2@strip (lambda (r30f1@x r30f2@m*) (if (r2c4c@top-marked? r30f2@m*) (if (or (r286d@r278c@annotation? r30f1@x) (and (pair? r30f1@x) (r286d@r278c@annotation? (car r30f1@x))) (and (vector? r30f1@x) (> (vector-length r30f1@x) '0) (r286d@r278c@annotation? (vector-ref r30f1@x '0)))) (r2ce0@strip-annotations r30f1@x) r30f1@x) ((letrec ((r30f5@f (lambda (r30f7@x) (if (r2c96@stx? r30f7@x) (r2ce2@strip (r2c9a@stx-expr r30f7@x) (r2c9c@stx-mark* r30f7@x)) (if (r286d@r278c@annotation? r30f7@x) (r286c@r278a@annotation-stripped r30f7@x) (if (pair? r30f7@x) ((lambda (r30f9@a r30fa@d) (if (and (eq? r30f9@a (car r30f7@x)) (eq? r30fa@d (cdr r30f7@x))) r30f7@x (cons r30f9@a r30fa@d))) (r30f5@f (car r30f7@x)) (r30f5@f (cdr r30f7@x))) (if (vector? r30f7@x) ((lambda (r30fd@old) ((lambda (r30ff@new) (if (for-all eq? r30fd@old r30ff@new) r30f7@x (list->vector r30ff@new))) (map r30f5@f r30fd@old))) (vector->list r30f7@x)) r30f7@x))))))) r30f5@f) r30f1@x)))) (set! r2ce4@stx->datum (lambda (r3101@x) (r2ce2@strip r3101@x '()))) (set! r2ce6@same-marks*? (lambda (r3103@mark* r3104@mark** r3105@si) (if (null? r3105@si) '#f (if (r2cd2@same-marks? r3103@mark* (vector-ref r3104@mark** (car r3105@si))) (car r3105@si) (r2ce6@same-marks*? r3103@mark* r3104@mark** (cdr r3105@si)))))) (set! r2ce8@id->label (lambda (r3109@id) (or (r2cea@id->real-label r3109@id) ((lambda (r310b@t) (if r310b@t ((lambda (r310d@env) ((lambda (r310f@rib) (call-with-values (lambda () (r2c56@gen-define-label+loc r3109@id r310f@rib)) (lambda (r3115@r3112 r3116@r3114) ((lambda (r3119@loc_ r311a@lab) (begin (r2c7f@extend-rib! r310f@rib r3109@id r311a@lab) r311a@lab)) r3116@r3114 r3115@r3112)))) (r2f82@interaction-env-rib r310d@env))) r310b@t) '#f)) (r2fd0@top-level-context))))) (set! r2cea@id->real-label (lambda (r311d@id) ((lambda (r311f@sym) ((letrec ((r3121@search (lambda (r3123@subst* r3124@mark*) (if (null? r3123@subst*) '#f (if (eq? (car r3123@subst*) 'shift) (r3121@search (cdr r3123@subst*) (cdr r3124@mark*)) ((lambda (r3127@rib) ((lambda (r3129@t) (if r3129@t ((lambda (r312b@ht) ((lambda (r312d@si) ((lambda (r312f@i) (if r312f@i (vector-ref (r2c6d@rib-label* r3127@rib) r312f@i) (r3121@search (cdr r3123@subst*) r3124@mark*))) (and r312d@si (r2ce6@same-marks*? r3124@mark* (r2c6b@rib-mark** r3127@rib) (reverse r312d@si))))) (hashtable-ref r312b@ht r311f@sym '#f))) r3129@t) ((letrec ((r3131@f (lambda (r3133@sym* r3134@mark** r3135@label*) (if (null? r3133@sym*) (r3121@search (cdr r3123@subst*) r3124@mark*) (if (and (eq? (car r3133@sym*) r311f@sym) (r2cd2@same-marks? (car r3134@mark**) r3124@mark*)) (car r3135@label*) (r3131@f (cdr r3133@sym*) (cdr r3134@mark**) (cdr r3135@label*))))))) r3131@f) (r2c69@rib-sym* r3127@rib) (r2c6b@rib-mark** r3127@rib) (r2c6d@rib-label* r3127@rib)))) (r2c6f@rib-sealed/freq r3127@rib))) (car r3123@subst*))))))) r3121@search) (r2c9e@stx-subst* r311d@id) (r2c9c@stx-mark* r311d@id))) (r2cd0@id->sym r311d@id)))) (set! r2cec@label->binding (lambda (r3139@x r313a@r) ((lambda (r313d@t) (if r313d@t ((lambda (r313f@b) (if (and (pair? r313f@b) (eq? (car r313f@b) '$core-rtd)) (cons '$rtd (map r2e8f@bless (cdr r313f@b))) (if (and (pair? r313f@b) (eq? (car r313f@b) 'global-rtd)) ((lambda (r3141@lib r3142@loc) (cons '$rtd (symbol-value r3142@loc))) (cadr r313f@b) (cddr r313f@b)) r313f@b))) r313d@t) ((lambda (r3145@t) (if r3145@t (cdr r3145@t) ((lambda (r3147@t) (if r3147@t ((lambda (r3149@env) ((lambda (r314b@t) (if r314b@t ((lambda (r314d@p) (cons* 'lexical (cdr r314d@p) '#f)) r314b@t) '(displaced-lexical . #f))) (assq r3139@x (r2f86@interaction-env-locs r3149@env)))) r3147@t) '(displaced-lexical . #f))) (r2fd0@top-level-context)))) (assq r3139@x r313a@r)))) (r2af1@r2991@imported-label->binding r3139@x)))) (set! r2cee@make-binding cons) (set! r2cf0@binding-type car) (set! r2cf2@binding-value cdr) (set! r2cf4@raise-unbound-error (lambda (r314f@id) (r2fc0@syntax-violation* '#f '"unbound identifier" r314f@id (r4cff@r4b45@make-undefined-violation)))) (set! r2cf6@syntax-type (lambda (r3151@e r3152@r) (if (r2cce@id? r3151@e) ((lambda (r3155@id) ((lambda (r3157@label) ((lambda (r3159@b) ((lambda (r315b@type) ((lambda () (begin (if (not r3157@label) (r2cf4@raise-unbound-error r3155@id) (void)) ((lambda (r315d@t) (if (memv r315d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values r315b@type (r2cf2@binding-value r3159@b) r3155@id) (values 'other '#f '#f))) r315b@type))))) (r2cf0@binding-type r3159@b))) (r2cec@label->binding r3157@label r3152@r))) (r2ce8@id->label r3155@id))) r3151@e) (if (r2cc0@syntax-pair? r3151@e) ((lambda (r315f@id) (if (r2cce@id? r315f@id) ((lambda (r3161@label) ((lambda (r3163@b) ((lambda (r3165@type) ((lambda () (begin (if (not r3161@label) (r2cf4@raise-unbound-error r315f@id) (void)) ((lambda (r3167@t) (if (memv r3167@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values r3165@type (r2cf2@binding-value r3163@b) r315f@id) (values 'call '#f '#f))) r3165@type))))) (r2cf0@binding-type r3163@b))) (r2cec@label->binding r3161@label r3152@r))) (r2ce8@id->label r315f@id)) (values 'call '#f '#f))) (r2cc8@syntax-car r3151@e)) ((lambda (r3169@d) (if (r2cde@self-evaluating? r3169@d) (values 'constant r3169@d '#f) (values 'other '#f '#f))) (r2ce4@stx->datum r3151@e)))))) (set! r2d04@sanitize-binding (lambda (r316b@x r316c@src) (if (procedure? r316b@x) (cons* 'local-macro r316b@x r316c@src) (if (and (pair? r316b@x) (eq? (car r316b@x) 'macro!) (procedure? (cdr r316b@x))) (cons* 'local-macro! (cdr r316b@x) r316c@src) (if (and (pair? r316b@x) (eq? (car r316b@x) '$rtd)) r316b@x (assertion-violation 'expand '"invalid transformer" r316b@x)))))) (set! r2d06@make-variable-transformer (lambda (r316f@x) (if (procedure? r316f@x) (cons 'macro! r316f@x) (assertion-violation 'make-variable-transformer '"not a procedure" r316f@x)))) (set! r2d08@variable-transformer? (lambda (r3171@x) (and (pair? r3171@x) (eq? (car r3171@x) 'macro!) (procedure? (cdr r3171@x))))) (set! r2d0a@variable-transformer-procedure (lambda (r3173@x) (if (r2d08@variable-transformer? r3173@x) (cdr r3173@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" r3173@x)))) (set! r2d0c@make-eval-transformer (lambda (r3175@x) (r2d04@sanitize-binding (eval-core (r28cc@r2884@expanded->core r3175@x)) r3175@x))) (set! r2e5d@parse-define (lambda (r3177@x) ((lambda (r3179@t) ((lambda (r317b@ls/false) (if (and r317b@ls/false (apply (lambda (r317d@id r317e@fmls r317f@b r3180@b*) (r2cce@id? r317d@id)) r317b@ls/false)) (apply (lambda (r3185@id r3186@fmls r3187@b r3188@b*) (begin (r2eff@verify-formals r3186@fmls r3177@x) (values r3185@id (cons 'defun (cons r3186@fmls (cons r3187@b r3188@b*)))))) r317b@ls/false) ((lambda (r318d@t) ((lambda (r318f@ls/false) (if (and r318f@ls/false (apply (lambda (r3191@id r3192@val) (r2cce@id? r3191@id)) r318f@ls/false)) (apply (lambda (r3195@id r3196@val) (values r3195@id (cons 'expr r3196@val))) r318f@ls/false) ((lambda (r3199@t) ((lambda (r319b@ls/false) (if (and r319b@ls/false (apply (lambda (r319d@id) (r2cce@id? r319d@id)) r319b@ls/false)) (apply (lambda (r319f@id) (values r319f@id (cons 'expr (r2e8f@bless '(void))))) r319b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3199@t))) (r2ed9@syntax-dispatch r3199@t '(_ any)))) r318d@t))) (r2ed9@syntax-dispatch r318d@t '(_ any any)))) r3179@t))) (r2ed9@syntax-dispatch r3179@t '(_ (any . any) any . each-any)))) r3177@x))) (set! r2e5f@parse-define-syntax (lambda (r31a1@x) ((lambda (r31a3@t) ((lambda (r31a5@ls/false) (if (and r31a5@ls/false (apply (lambda (r31a7@id r31a8@val) (r2cce@id? r31a7@id)) r31a5@ls/false)) (apply (lambda (r31ab@id r31ac@val) (values r31ab@id r31ac@val)) r31a5@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r31a3@t))) (r2ed9@syntax-dispatch r31a3@t '(_ any any)))) r31a1@x))) (set! r2e61@scheme-stx-hashtable (make-eq-hashtable)) (set! r2e63@scheme-stx (lambda (r31af@sym) (or (hashtable-ref r2e61@scheme-stx-hashtable r31af@sym '#f) ((lambda (r31b1@subst) ((lambda (r31b3@stx) ((lambda (r31b5@stx) ((lambda () (begin (hashtable-set! r2e61@scheme-stx-hashtable r31af@sym r31b5@stx) r31b5@stx)))) ((lambda (r31b7@t) (if r31b7@t ((lambda (r31b9@x) ((lambda (r31bb@name r31bc@label) (r2cba@add-subst (r2c67@make-rib (list r31bb@name) (list r2c4a@top-mark*) (list r31bc@label) '#f '#f) r31b3@stx)) (car r31b9@x) (cdr r31b9@x))) r31b7@t) r31b3@stx)) (assq r31af@sym r31b1@subst)))) (r2c98@make-stx r31af@sym r2c4a@top-mark* '() '()))) (r2ac7@r293d@library-subst (r2aeb@r2985@find-library-by-name '(psyntax system $all))))))) (set! r2e65@lexical-var car) (set! r2e67@lexical-mutable? cdr) (set! r2e69@set-lexical-mutable! set-cdr!) (set! r2e6b@add-lexical (lambda (r31bf@lab r31c0@lex r31c1@r) (cons (cons* r31bf@lab 'lexical r31c0@lex '#f) r31c1@r))) (set! r2e6d@add-lexicals (lambda (r31c5@lab* r31c6@lex* r31c7@r) (if (null? r31c5@lab*) r31c7@r (r2e6d@add-lexicals (cdr r31c5@lab*) (cdr r31c6@lex*) (r2e6b@add-lexical (car r31c5@lab*) (car r31c6@lex*) r31c7@r))))) (set! r2e6f@letrec-helper (lambda (r31cb@e r31cc@r r31cd@mr r31ce@build) ((lambda (r31d3@t) ((lambda (r31d5@ls/false) (if r31d5@ls/false (apply (lambda (r31d7@lhs* r31d8@rhs* r31d9@b r31da@b*) (if (not (r2cd8@valid-bound-ids? r31d7@lhs*)) (r2e93@invalid-fmls-error r31cb@e r31d7@lhs*) ((lambda (r31df@lex* r31e0@lab*) ((lambda (r31e3@rib r31e4@r) ((lambda (r31e7@body r31e8@rhs*) (r31ce@build '#f r31df@lex* r31e8@rhs* r31e7@body)) (r2f11@chi-internal (r2cba@add-subst r31e3@rib (cons r31d9@b r31da@b*)) r31e4@r r31cd@mr) (r2ef7@chi-expr* (map (lambda (r31eb@x) (r2cba@add-subst r31e3@rib r31eb@x)) r31d8@rhs*) r31e4@r r31cd@mr))) (r2c89@make-full-rib r31d7@lhs* r31e0@lab*) (r2e6d@add-lexicals r31e0@lab* r31df@lex* r31cc@r))) (map r2c4e@gen-lexical r31d7@lhs*) (map r2c52@gen-label r31d7@lhs*)))) r31d5@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r31d3@t))) (r2ed9@syntax-dispatch r31d3@t '(_ #(each (any any)) any . each-any)))) r31cb@e))) (set! r2e71@letrec-transformer (lambda (r31ed@e r31ee@r r31ef@mr) (r2e6f@letrec-helper r31ed@e r31ee@r r31ef@mr r2c2f@r2ba0@build-letrec))) (set! r2e73@letrec*-transformer (lambda (r31f3@e r31f4@r r31f5@mr) (r2e6f@letrec-helper r31f3@e r31f4@r r31f5@mr r2c30@r2ba2@build-letrec*))) (set! r2e75@fluid-let-syntax-transformer (lambda (r31f9@e r31fa@r r31fb@mr) ((lambda (r3200@lookup) (begin (set! r3200@lookup (lambda (r3213@x) (or (r2ce8@id->label r3213@x) (r2fc2@syntax-violation '#f '"unbound identifier" r31f9@e r3213@x)))) ((lambda (r3201@t) ((lambda (r3203@ls/false) (if r3203@ls/false (apply (lambda (r3205@lhs* r3206@rhs* r3207@b r3208@b*) (if (not (r2cd8@valid-bound-ids? r3205@lhs*)) (r2e93@invalid-fmls-error r31f9@e r3205@lhs*) ((lambda (r320d@lab* r320e@rhs*) (r2f11@chi-internal (cons r3207@b r3208@b*) (append (map cons r320d@lab* r320e@rhs*) r31fa@r) (append (map cons r320d@lab* r320e@rhs*) r31fb@mr))) (map r3200@lookup r3205@lhs*) (map (lambda (r3211@x) (r2d0c@make-eval-transformer (r2f36@expand-transformer r3211@x r31fb@mr))) r3206@rhs*)))) r3203@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3201@t))) (r2ed9@syntax-dispatch r3201@t '(_ #(each (any any)) any . each-any)))) r31f9@e))) '#f))) (set! r2e77@type-descriptor-transformer (lambda (r3215@e r3216@r r3217@mr) ((lambda (r321b@t) ((lambda (r321d@ls/false) (if (and r321d@ls/false (apply (lambda (r321f@id) (r2cce@id? r321f@id)) r321d@ls/false)) (apply (lambda (r3221@id) ((lambda (r3223@lab) ((lambda (r3225@b) ((lambda (r3227@type) ((lambda () (begin (if (not r3223@lab) (r2cf4@raise-unbound-error r3221@id) (void)) (if (not (and (eq? r3227@type '$rtd) (not (list? (r2cf2@binding-value r3225@b))))) (r2fc2@syntax-violation '#f '"not a record type" r3215@e) (void)) (list 'quote (r2cf2@binding-value r3225@b)))))) (r2cf0@binding-type r3225@b))) (r2cec@label->binding r3223@lab r3216@r))) (r2ce8@id->label r3221@id))) r321d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r321b@t))) (r2ed9@syntax-dispatch r321b@t '(_ any)))) r3215@e))) (set! r2e79@record-type-descriptor-transformer (lambda (r3229@e r322a@r r322b@mr) ((lambda (r322f@t) ((lambda (r3231@ls/false) (if (and r3231@ls/false (apply (lambda (r3233@id) (r2cce@id? r3233@id)) r3231@ls/false)) (apply (lambda (r3235@id) ((lambda (r3237@lab) ((lambda (r3239@b) ((lambda (r323b@type) ((lambda () (begin (if (not r3237@lab) (r2cf4@raise-unbound-error r3235@id) (void)) (if (not (and (eq? r323b@type '$rtd) (list? (r2cf2@binding-value r3239@b)))) (r2fc2@syntax-violation '#f '"not a record type" r3229@e) (void)) (r2efb@chi-expr (car (r2cf2@binding-value r3239@b)) r322a@r r322b@mr))))) (r2cf0@binding-type r3239@b))) (r2cec@label->binding r3237@lab r322a@r))) (r2ce8@id->label r3235@id))) r3231@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r322f@t))) (r2ed9@syntax-dispatch r322f@t '(_ any)))) r3229@e))) (set! r2e7b@record-constructor-descriptor-transformer (lambda (r323d@e r323e@r r323f@mr) ((lambda (r3243@t) ((lambda (r3245@ls/false) (if (and r3245@ls/false (apply (lambda (r3247@id) (r2cce@id? r3247@id)) r3245@ls/false)) (apply (lambda (r3249@id) ((lambda (r324b@lab) ((lambda (r324d@b) ((lambda (r324f@type) ((lambda () (begin (if (not r324b@lab) (r2cf4@raise-unbound-error r3249@id) (void)) (if (not (and (eq? r324f@type '$rtd) (list? (r2cf2@binding-value r324d@b)))) (r2fc2@syntax-violation '#f '"invalid type" r323d@e) (void)) (r2efb@chi-expr (cadr (r2cf2@binding-value r324d@b)) r323e@r r323f@mr))))) (r2cf0@binding-type r324d@b))) (r2cec@label->binding r324b@lab r323e@r))) (r2ce8@id->label r3249@id))) r3245@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3243@t))) (r2ed9@syntax-dispatch r3243@t '(_ any)))) r323d@e))) (set! r2e7d@when-macro (lambda (r3251@e) ((lambda (r3253@t) ((lambda (r3255@ls/false) (if r3255@ls/false (apply (lambda (r3257@test r3258@e r3259@e*) (r2e8f@bless (list 'if r3257@test (cons 'begin (cons r3258@e r3259@e*))))) r3255@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3253@t))) (r2ed9@syntax-dispatch r3253@t '(_ any any . each-any)))) r3251@e))) (set! r2e7f@unless-macro (lambda (r325d@e) ((lambda (r325f@t) ((lambda (r3261@ls/false) (if r3261@ls/false (apply (lambda (r3263@test r3264@e r3265@e*) (r2e8f@bless (list 'if (list 'not r3263@test) (cons 'begin (cons r3264@e r3265@e*))))) r3261@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r325f@t))) (r2ed9@syntax-dispatch r325f@t '(_ any any . each-any)))) r325d@e))) (set! r2e81@if-transformer (lambda (r3269@e r326a@r r326b@mr) ((lambda (r326f@t) ((lambda (r3271@ls/false) (if r3271@ls/false (apply (lambda (r3273@e0 r3274@e1 r3275@e2) (list 'if (r2efb@chi-expr r3273@e0 r326a@r r326b@mr) (r2efb@chi-expr r3274@e1 r326a@r r326b@mr) (r2efb@chi-expr r3275@e2 r326a@r r326b@mr))) r3271@ls/false) ((lambda (r3279@t) ((lambda (r327b@ls/false) (if r327b@ls/false (apply (lambda (r327d@e0 r327e@e1) (list 'if (r2efb@chi-expr r327d@e0 r326a@r r326b@mr) (r2efb@chi-expr r327e@e1 r326a@r r326b@mr) (r2c2e@r2b9e@build-void))) r327b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3279@t))) (r2ed9@syntax-dispatch r3279@t '(_ any any)))) r326f@t))) (r2ed9@syntax-dispatch r326f@t '(_ any any any)))) r3269@e))) (set! r2e83@and-transformer (lambda (r3281@e r3282@r r3283@mr) ((lambda (r3287@t) ((lambda (r3289@ls/false) (if r3289@ls/false (apply (lambda (r328b@e*) (cons 'and (r2ef7@chi-expr* r328b@e* r3282@r r3283@mr))) r3289@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3287@t))) (r2ed9@syntax-dispatch r3287@t '(_ . each-any)))) r3281@e))) (set! r2e85@or-transformer (lambda (r328d@e r328e@r r328f@mr) ((lambda (r3293@t) ((lambda (r3295@ls/false) (if r3295@ls/false (apply (lambda (r3297@e*) (cons 'or (r2ef7@chi-expr* r3297@e* r328e@r r328f@mr))) r3295@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3293@t))) (r2ed9@syntax-dispatch r3293@t '(_ . each-any)))) r328d@e))) (set! r2e87@case-macro (lambda (r3299@e) ((lambda (r329c@build-last r329e@build-one) (begin (set! r329c@build-last (lambda (r32c3@cls) ((lambda (r32c5@t) ((lambda (r32c7@ls/false) (if r32c7@ls/false (apply (lambda (r32c9@e r32ca@e*) (cons 'begin (cons r32c9@e r32ca@e*))) r32c7@ls/false) ((lambda (r32cd@t) ((lambda (r32cf@ls/false) (if r32cf@ls/false (apply (lambda () (r329e@build-one r32c3@cls '(if #f #f))) r32cf@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32cd@t))) (r2ed9@syntax-dispatch r32cd@t '_))) r32c5@t))) (r2ed9@syntax-dispatch r32c5@t '(#(scheme-id else) any . each-any)))) r32c3@cls))) (set! r329e@build-one (lambda (r32b5@cls r32b6@k) ((lambda (r32b9@t) ((lambda (r32bb@ls/false) (if r32bb@ls/false (apply (lambda (r32bd@d* r32be@e r32bf@e*) (list 'if (list 'memv 't (list 'quote r32bd@d*)) (cons 'begin (cons r32be@e r32bf@e*)) r32b6@k)) r32bb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32b9@t))) (r2ed9@syntax-dispatch r32b9@t '(each-any any . each-any)))) r32b5@cls))) ((lambda (r329f@t) ((lambda (r32a1@ls/false) (if r32a1@ls/false (apply (lambda (r32a3@expr) (r2e8f@bless (cons 'let (cons (list (list 't r32a3@expr)) '((if #f #f)))))) r32a1@ls/false) ((lambda (r32a5@t) ((lambda (r32a7@ls/false) (if r32a7@ls/false (apply (lambda (r32a9@expr r32aa@cls r32ab@cls*) (r2e8f@bless (list 'let (list (list 't r32a9@expr)) ((letrec ((r32af@f (lambda (r32b1@cls r32b2@cls*) (if (null? r32b2@cls*) (r329c@build-last r32b1@cls) (r329e@build-one r32b1@cls (r32af@f (car r32b2@cls*) (cdr r32b2@cls*))))))) r32af@f) r32aa@cls r32ab@cls*)))) r32a7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32a5@t))) (r2ed9@syntax-dispatch r32a5@t '(_ any any . each-any)))) r329f@t))) (r2ed9@syntax-dispatch r329f@t '(_ any)))) r3299@e))) '#f '#f))) (set! r2e89@quote-transformer (lambda (r32d1@e r32d2@r r32d3@mr) ((lambda (r32d7@t) ((lambda (r32d9@ls/false) (if r32d9@ls/false (apply (lambda (r32db@datum) (list 'quote (r2ce4@stx->datum r32db@datum))) r32d9@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32d7@t))) (r2ed9@syntax-dispatch r32d7@t '(_ any)))) r32d1@e))) (set! r2e8b@case-lambda-transformer (lambda (r32dd@e r32de@r r32df@mr) ((lambda (r32e3@t) ((lambda (r32e5@ls/false) (if r32e5@ls/false (apply (lambda (r32e7@fmls* r32e8@b* r32e9@b**) (call-with-values (lambda () (r2f03@chi-lambda-clause* r32dd@e r32e7@fmls* (map cons r32e8@b* r32e9@b**) r32de@r r32df@mr)) (lambda (r32f1@r32ee r32f2@r32f0) ((lambda (r32f5@body* r32f6@fmls*) (r2c2b@r2b6c@build-case-lambda '#f r32f6@fmls* r32f5@body*)) r32f2@r32f0 r32f1@r32ee)))) r32e5@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32e3@t))) (r2ed9@syntax-dispatch r32e3@t '(_ . #(each (any any . each-any)))))) r32dd@e))) (set! r2e8d@lambda-transformer (lambda (r32f9@e r32fa@r r32fb@mr) ((lambda (r32ff@t) ((lambda (r3301@ls/false) (if r3301@ls/false (apply (lambda (r3303@fmls r3304@b r3305@b*) (call-with-values (lambda () (r2f01@chi-lambda-clause r32f9@e r3303@fmls (cons r3304@b r3305@b*) r32fa@r r32fb@mr)) (lambda (r330d@r330a r330e@r330c) ((lambda (r3311@body r3312@fmls) (r2c2a@r2b6a@build-lambda '#f r3312@fmls r3311@body)) r330e@r330c r330d@r330a)))) r3301@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r32ff@t))) (r2ed9@syntax-dispatch r32ff@t '(_ any any . each-any)))) r32f9@e))) (set! r2e8f@bless (lambda (r3315@x) (r2cb6@mkstx ((letrec ((r3317@f (lambda (r3319@x) (if (r2c96@stx? r3319@x) r3319@x (if (pair? r3319@x) (cons (r3317@f (car r3319@x)) (r3317@f (cdr r3319@x))) (if (symbol? r3319@x) (r2e63@scheme-stx r3319@x) (if (vector? r3319@x) (vector-map r3317@f r3319@x) r3319@x))))))) r3317@f) r3315@x) '() '() '()))) (set! r2e91@with-syntax-macro (lambda (r331b@e) ((lambda (r331d@t) ((lambda (r331f@ls/false) (if r331f@ls/false (apply (lambda (r3321@pat* r3322@expr* r3323@b r3324@b*) ((lambda (r3329@idn*) (begin (r2eff@verify-formals (map car r3329@idn*) r331b@e) ((lambda (r332b@t*) (r2e8f@bless (list 'let (map list r332b@t* r3322@expr*) ((letrec ((r332d@f (lambda (r332f@pat* r3330@t*) (if (null? r332f@pat*) (cons 'begin (cons '#f (cons r3323@b r3324@b*))) (list 'syntax-case (car r3330@t*) '() (list (car r332f@pat*) (r332d@f (cdr r332f@pat*) (cdr r3330@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car r332f@pat*)) (car r3330@t*)))))))) r332d@f) r3321@pat* r332b@t*)))) (r2fb0@generate-temporaries r3322@expr*)))) ((letrec ((r3333@f (lambda (r3335@pat*) (if (null? r3335@pat*) '() (call-with-values (lambda () (r2ed7@convert-pattern (car r3335@pat*) '())) (lambda (r333b@r3338 r333c@r333a) ((lambda (r333f@idn* r3340@pat) (append r333f@idn* (r3333@f (cdr r3335@pat*)))) r333c@r333a r333b@r3338))))))) r3333@f) r3321@pat*))) r331f@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r331d@t))) (r2ed9@syntax-dispatch r331d@t '(_ #(each (any any)) any . each-any)))) r331b@e))) (set! r2e93@invalid-fmls-error (lambda (r3343@stx r3344@fmls) ((lambda (r3347@t) ((lambda (r3349@ls/false) (if r3349@ls/false (apply (lambda (r334b@id* r334c@last) ((letrec ((r334f@f (lambda (r3351@id*) (if (null? r3351@id*) (values) (if (not (r2cce@id? (car r3351@id*))) (r2fc2@syntax-violation '#f '"not an identifier" r3343@stx (car r3351@id*)) (begin (r334f@f (cdr r3351@id*)) (if (r2cdc@bound-id-member? (car r3351@id*) (cdr r3351@id*)) (r2fc2@syntax-violation '#f '"duplicate binding" r3343@stx (car r3351@id*)) (void)))))))) r334f@f) (if (r2cce@id? r334c@last) (cons r334c@last r334b@id*) (if (r2cc4@syntax-null? r334c@last) r334b@id* (r2fc2@syntax-violation '#f '"not an identifier" r3343@stx r334c@last))))) r3349@ls/false) ((lambda (r3353@t) ((lambda (r3355@ls/false) (if r3355@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"malformed binding form" r3343@stx r3344@fmls)) r3355@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3353@t))) (r2ed9@syntax-dispatch r3353@t '_))) r3347@t))) (r2ed9@syntax-dispatch r3347@t '#(each+ any () any)))) r3344@fmls))) (set! r2e95@let-macro (lambda (r3357@stx) ((lambda (r3359@t) ((lambda (r335b@ls/false) (if r335b@ls/false (apply (lambda (r335d@lhs* r335e@rhs* r335f@b r3360@b*) (if (r2cd8@valid-bound-ids? r335d@lhs*) (r2e8f@bless (cons (cons 'lambda (cons r335d@lhs* (cons r335f@b r3360@b*))) r335e@rhs*)) (r2e93@invalid-fmls-error r3357@stx r335d@lhs*))) r335b@ls/false) ((lambda (r3365@t) ((lambda (r3367@ls/false) (if (and r3367@ls/false (apply (lambda (r3369@f r336a@lhs* r336b@rhs* r336c@b r336d@b*) (r2cce@id? r3369@f)) r3367@ls/false)) (apply (lambda (r3373@f r3374@lhs* r3375@rhs* r3376@b r3377@b*) (if (r2cd8@valid-bound-ids? r3374@lhs*) (r2e8f@bless (cons (list 'letrec (list (list r3373@f (cons 'lambda (cons r3374@lhs* (cons r3376@b r3377@b*))))) r3373@f) r3375@rhs*)) (r2e93@invalid-fmls-error r3357@stx r3374@lhs*))) r3367@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3365@t))) (r2ed9@syntax-dispatch r3365@t '(_ any #(each (any any)) any . each-any)))) r3359@t))) (r2ed9@syntax-dispatch r3359@t '(_ #(each (any any)) any . each-any)))) r3357@stx))) (set! r2e97@let-values-macro (lambda (r337d@stx) ((lambda (r3380@rename r3382@rename*) (begin (set! r3380@rename (lambda (r33e5@x r33e6@old* r33e7@new*) (begin (if (not (r2cce@id? r33e5@x)) (r2fc2@syntax-violation '#f '"not an indentifier" r337d@stx r33e5@x) (void)) (if (r2cdc@bound-id-member? r33e5@x r33e6@old*) (r2fc2@syntax-violation '#f '"duplicate binding" r337d@stx r33e5@x) (void)) ((lambda (r33eb@y) (values r33eb@y (cons r33e5@x r33e6@old*) (cons r33eb@y r33e7@new*))) (gensym (r2fc8@syntax->datum r33e5@x)))))) (set! r3382@rename* (lambda (r33d3@x* r33d4@old* r33d5@new*) (if (null? r33d3@x*) (values '() r33d4@old* r33d5@new*) (call-with-values (lambda () (r3380@rename (car r33d3@x*) r33d4@old* r33d5@new*)) (lambda (r33d9@x r33da@old* r33db@new*) (call-with-values (lambda () (r3382@rename* (cdr r33d3@x*) r33da@old* r33db@new*)) (lambda (r33df@x* r33e0@old* r33e1@new*) (values (cons r33d9@x r33df@x*) r33e0@old* r33e1@new*)))))))) ((lambda (r3383@t) ((lambda (r3385@ls/false) (if r3385@ls/false (apply (lambda (r3387@b r3388@b*) (cons* (r2e8f@bless 'let) '() r3387@b r3388@b*)) r3385@ls/false) ((lambda (r338b@t) ((lambda (r338d@ls/false) (if r338d@ls/false (apply (lambda (r338f@lhs* r3390@rhs* r3391@b r3392@b*) (r2e8f@bless ((letrec ((r3397@f (lambda (r3399@lhs* r339a@rhs* r339b@old* r339c@new*) (if (null? r3399@lhs*) (cons 'let (cons (map list r339b@old* r339c@new*) (cons r3391@b r3392@b*))) ((lambda (r33a1@t) ((lambda (r33a3@ls/false) (if r33a3@ls/false (apply (lambda (r33a5@x*) (call-with-values (lambda () (r3382@rename* r33a5@x* r339b@old* r339c@new*)) (lambda (r33ad@r33a8 r33ae@r33aa r33af@r33ac) ((lambda (r33b3@new* r33b4@old* r33b5@y*) (list 'call-with-values (list 'lambda '() (car r339a@rhs*)) (list 'lambda r33b5@y* (r3397@f (cdr r3399@lhs*) (cdr r339a@rhs*) r33b4@old* r33b3@new*)))) r33af@r33ac r33ae@r33aa r33ad@r33a8)))) r33a3@ls/false) ((lambda (r33b9@t) ((lambda (r33bb@ls/false) (if r33bb@ls/false (apply (lambda (r33bd@x* r33be@x) (call-with-values (lambda () (r3380@rename r33be@x r339b@old* r339c@new*)) (lambda (r33c1@y r33c2@old* r33c3@new*) (call-with-values (lambda () (r3382@rename* r33bd@x* r33c2@old* r33c3@new*)) (lambda (r33c7@y* r33c8@old* r33c9@new*) (list 'call-with-values (list 'lambda '() (car r339a@rhs*)) (list 'lambda (append r33c7@y* r33c1@y) (r3397@f (cdr r3399@lhs*) (cdr r339a@rhs*) r33c8@old* r33c9@new*)))))))) r33bb@ls/false) ((lambda (r33cd@t) ((lambda (r33cf@ls/false) (if r33cf@ls/false (apply (lambda (r33d1@others) (r2fc2@syntax-violation '#f '"malformed bindings" r337d@stx r33d1@others)) r33cf@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r33cd@t))) (r2ed9@syntax-dispatch r33cd@t 'any))) r33b9@t))) (r2ed9@syntax-dispatch r33b9@t '#(each+ any () any)))) r33a1@t))) (r2ed9@syntax-dispatch r33a1@t 'each-any))) (car r3399@lhs*)))))) r3397@f) r338f@lhs* r3390@rhs* '() '()))) r338d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r338b@t))) (r2ed9@syntax-dispatch r338b@t '(_ #(each (any any)) any . each-any)))) r3383@t))) (r2ed9@syntax-dispatch r3383@t '(_ () any . each-any)))) r337d@stx))) '#f '#f))) (set! r2e99@let*-values-macro (lambda (r33ed@stx) ((lambda (r33f0@check) (begin (set! r33f0@check (lambda (r341f@x*) (if (not (null? r341f@x*)) ((lambda (r3421@x) (begin (if (not (r2cce@id? r3421@x)) (r2fc2@syntax-violation '#f '"not an identifier" r33ed@stx r3421@x) (void)) (r33f0@check (cdr r341f@x*)) (if (r2cdc@bound-id-member? r3421@x (cdr r341f@x*)) (r2fc2@syntax-violation '#f '"duplicate identifier" r33ed@stx r3421@x) (void)))) (car r341f@x*)) (void)))) ((lambda (r33f1@t) ((lambda (r33f3@ls/false) (if r33f3@ls/false (apply (lambda (r33f5@b r33f6@b*) (cons* (r2e8f@bless 'let) '() r33f5@b r33f6@b*)) r33f3@ls/false) ((lambda (r33f9@t) ((lambda (r33fb@ls/false) (if r33fb@ls/false (apply (lambda (r33fd@lhs* r33fe@rhs* r33ff@b r3400@b*) (r2e8f@bless ((letrec ((r3405@f (lambda (r3407@lhs* r3408@rhs*) (if (null? r3407@lhs*) (cons 'begin (cons r33ff@b r3400@b*)) ((lambda (r340b@t) ((lambda (r340d@ls/false) (if r340d@ls/false (apply (lambda (r340f@x*) (begin (r33f0@check r340f@x*) (list 'call-with-values (list 'lambda '() (car r3408@rhs*)) (list 'lambda r340f@x* (r3405@f (cdr r3407@lhs*) (cdr r3408@rhs*)))))) r340d@ls/false) ((lambda (r3411@t) ((lambda (r3413@ls/false) (if r3413@ls/false (apply (lambda (r3415@x* r3416@x) (begin (r33f0@check (cons r3416@x r3415@x*)) (list 'call-with-values (list 'lambda '() (car r3408@rhs*)) (list 'lambda (append r3415@x* r3416@x) (r3405@f (cdr r3407@lhs*) (cdr r3408@rhs*)))))) r3413@ls/false) ((lambda (r3419@t) ((lambda (r341b@ls/false) (if r341b@ls/false (apply (lambda (r341d@others) (r2fc2@syntax-violation '#f '"malformed bindings" r33ed@stx r341d@others)) r341b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3419@t))) (r2ed9@syntax-dispatch r3419@t 'any))) r3411@t))) (r2ed9@syntax-dispatch r3411@t '#(each+ any () any)))) r340b@t))) (r2ed9@syntax-dispatch r340b@t 'each-any))) (car r3407@lhs*)))))) r3405@f) r33fd@lhs* r33fe@rhs*))) r33fb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r33f9@t))) (r2ed9@syntax-dispatch r33f9@t '(_ #(each (any any)) any . each-any)))) r33f1@t))) (r2ed9@syntax-dispatch r33f1@t '(_ () any . each-any)))) r33ed@stx))) '#f))) (set! r2e9b@trace-lambda-macro (lambda (r3423@stx) ((lambda (r3425@t) ((lambda (r3427@ls/false) (if r3427@ls/false (apply (lambda (r3429@who r342a@fmls r342b@b r342c@b*) (if (r2cd8@valid-bound-ids? r342a@fmls) (r2e8f@bless (list 'make-traced-procedure (list 'quote r3429@who) (cons 'lambda (cons r342a@fmls (cons r342b@b r342c@b*))))) (r2e93@invalid-fmls-error r3423@stx r342a@fmls))) r3427@ls/false) ((lambda (r3431@t) ((lambda (r3433@ls/false) (if r3433@ls/false (apply (lambda (r3435@who r3436@fmls r3437@last r3438@b r3439@b*) (if (r2cd8@valid-bound-ids? (cons r3437@last r3436@fmls)) (r2e8f@bless (list 'make-traced-procedure (list 'quote r3435@who) (cons 'lambda (cons (append r3436@fmls r3437@last) (cons r3438@b r3439@b*))))) (r2e93@invalid-fmls-error r3423@stx (append r3436@fmls r3437@last)))) r3433@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3431@t))) (r2ed9@syntax-dispatch r3431@t '(_ any #(each+ any () any) any . each-any)))) r3425@t))) (r2ed9@syntax-dispatch r3425@t '(_ any each-any any . each-any)))) r3423@stx))) (set! r2e9d@trace-define-macro (lambda (r343f@stx) ((lambda (r3441@t) ((lambda (r3443@ls/false) (if r3443@ls/false (apply (lambda (r3445@who r3446@fmls r3447@b r3448@b*) (if (r2cd8@valid-bound-ids? r3446@fmls) (r2e8f@bless (list 'define r3445@who (list 'make-traced-procedure (list 'quote r3445@who) (cons 'lambda (cons r3446@fmls (cons r3447@b r3448@b*)))))) (r2e93@invalid-fmls-error r343f@stx r3446@fmls))) r3443@ls/false) ((lambda (r344d@t) ((lambda (r344f@ls/false) (if r344f@ls/false (apply (lambda (r3451@who r3452@fmls r3453@last r3454@b r3455@b*) (if (r2cd8@valid-bound-ids? (cons r3453@last r3452@fmls)) (r2e8f@bless (list 'define r3451@who (list 'make-traced-procedure (list 'quote r3451@who) (cons 'lambda (cons (append r3452@fmls r3453@last) (cons r3454@b r3455@b*)))))) (r2e93@invalid-fmls-error r343f@stx (append r3452@fmls r3453@last)))) r344f@ls/false) ((lambda (r345b@t) ((lambda (r345d@ls/false) (if r345d@ls/false (apply (lambda (r345f@who r3460@expr) (if (r2cce@id? r345f@who) (r2e8f@bless (list 'define r345f@who (list 'let (list (list 'v r3460@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote r345f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (r2fc2@syntax-violation '#f '"invalid name" r343f@stx))) r345d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r345b@t))) (r2ed9@syntax-dispatch r345b@t '(_ any any)))) r344d@t))) (r2ed9@syntax-dispatch r344d@t '(_ (any . #(each+ any () any)) any . each-any)))) r3441@t))) (r2ed9@syntax-dispatch r3441@t '(_ (any . each-any) any . each-any)))) r343f@stx))) (set! r2e9f@trace-define-syntax-macro (lambda (r3463@stx) ((lambda (r3465@t) ((lambda (r3467@ls/false) (if r3467@ls/false (apply (lambda (r3469@who r346a@expr) (if (r2cce@id? r3469@who) (r2e8f@bless (list 'define-syntax r3469@who (list 'make-traced-macro (list 'quote r3469@who) r346a@expr))) (r2fc2@syntax-violation '#f '"invalid name" r3463@stx))) r3467@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3465@t))) (r2ed9@syntax-dispatch r3465@t '(_ any any)))) r3463@stx))) (set! r2ea1@trace-let/rec-syntax (lambda (r346d@who) (lambda (r346f@stx) ((lambda (r3471@t) ((lambda (r3473@ls/false) (if r3473@ls/false (apply (lambda (r3475@lhs* r3476@rhs* r3477@b r3478@b*) (if (r2cd8@valid-bound-ids? r3475@lhs*) ((lambda (r347d@rhs*) (r2e8f@bless (cons r346d@who (cons (map list r3475@lhs* r347d@rhs*) (cons r3477@b r3478@b*))))) (map (lambda (r347f@lhs r3480@rhs) (list 'make-traced-macro (list 'quote r347f@lhs) r3480@rhs)) r3475@lhs* r3476@rhs*)) (r2e93@invalid-fmls-error r346f@stx r3475@lhs*))) r3473@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3471@t))) (r2ed9@syntax-dispatch r3471@t '(_ #(each (any any)) any . each-any)))) r346f@stx)))) (set! r2ea3@trace-let-syntax-macro (r2ea1@trace-let/rec-syntax 'let-syntax)) (set! r2ea5@trace-letrec-syntax-macro (r2ea1@trace-let/rec-syntax 'letrec-syntax)) (set! r2ea7@guard-macro (lambda (r3483@x) ((lambda (r3486@gen-clauses) (begin (set! r3486@gen-clauses (lambda (r349d@con r349e@outerk r349f@clause*) ((lambda (r34a4@f r34a6@f*) (begin (set! r34a4@f (lambda (r34dd@x r34de@k) ((lambda (r34e1@t) ((lambda (r34e3@ls/false) (if r34e3@ls/false (apply (lambda (r34e5@e r34e6@p) ((lambda (r34e9@t) (list 'let (list (list r34e9@t r34e5@e)) (list 'if r34e9@t (list r34e6@p r34e9@t) r34de@k))) (gensym))) r34e3@ls/false) ((lambda (r34eb@t) ((lambda (r34ed@ls/false) (if r34ed@ls/false (apply (lambda (r34ef@e) ((lambda (r34f1@t) (list 'let (list (list r34f1@t r34ef@e)) (list 'if r34f1@t r34f1@t r34de@k))) (gensym))) r34ed@ls/false) ((lambda (r34f3@t) ((lambda (r34f5@ls/false) (if r34f5@ls/false (apply (lambda (r34f7@e r34f8@v r34f9@v*) (list 'if r34f7@e (cons 'begin (cons r34f8@v r34f9@v*)) r34de@k)) r34f5@ls/false) ((lambda (r34fd@t) ((lambda (r34ff@ls/false) (if r34ff@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid guard clause" r34dd@x)) r34ff@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r34fd@t))) (r2ed9@syntax-dispatch r34fd@t '_))) r34f3@t))) (r2ed9@syntax-dispatch r34f3@t '(any any . each-any)))) r34eb@t))) (r2ed9@syntax-dispatch r34eb@t '(any)))) r34e1@t))) (r2ed9@syntax-dispatch r34e1@t '(any #(scheme-id =>) any)))) r34dd@x))) (set! r34a6@f* (lambda (r34b3@x*) ((lambda (r34b5@t) ((lambda (r34b7@ls/false) (if r34b7@ls/false (apply (lambda () ((lambda (r34b9@g) (values (list r34b9@g (list 'lambda '() (list 'raise-continuable r349d@con))) r34b9@g)) (gensym))) r34b7@ls/false) ((lambda (r34bb@t) ((lambda (r34bd@ls/false) (if r34bd@ls/false (apply (lambda (r34bf@e r34c0@e*) (values (cons 'begin (cons r34bf@e r34c0@e*)) '#f)) r34bd@ls/false) ((lambda (r34c3@t) ((lambda (r34c5@ls/false) (if r34c5@ls/false (apply (lambda (r34c7@cls r34c8@cls*) (call-with-values (lambda () (r34a6@f* r34c8@cls*)) (lambda (r34cf@r34cc r34d0@r34ce) ((lambda (r34d3@g r34d4@e) (values (r34a4@f r34c7@cls r34d4@e) r34d3@g)) r34d0@r34ce r34cf@r34cc)))) r34c5@ls/false) ((lambda (r34d7@t) ((lambda (r34d9@ls/false) (if r34d9@ls/false (apply (lambda (r34db@others) (r2fc2@syntax-violation '#f '"invalid guard clause" r34db@others)) r34d9@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r34d7@t))) (r2ed9@syntax-dispatch r34d7@t 'any))) r34c3@t))) (r2ed9@syntax-dispatch r34c3@t '(any . any)))) r34bb@t))) (r2ed9@syntax-dispatch r34bb@t '((#(scheme-id else) any . each-any))))) r34b5@t))) (r2ed9@syntax-dispatch r34b5@t '()))) r34b3@x*))) (call-with-values (lambda () (r34a6@f* r349f@clause*)) (lambda (r34ab@r34a8 r34ac@r34aa) ((lambda (r34af@raisek r34b0@code) (if r34af@raisek (list (list 'call/cc (list 'lambda (list r34af@raisek) (list r349e@outerk (list 'lambda '() r34b0@code))))) (list r349e@outerk (list 'lambda '() r34b0@code)))) r34ac@r34aa r34ab@r34a8))))) '#f '#f))) ((lambda (r3487@t) ((lambda (r3489@ls/false) (if (and r3489@ls/false (apply (lambda (r348b@con r348c@clause* r348d@b r348e@b*) (r2cce@id? r348b@con)) r3489@ls/false)) (apply (lambda (r3493@con r3494@clause* r3495@b r3496@b*) ((lambda (r349b@outerk) (r2e8f@bless (list (list 'call/cc (list 'lambda (list r349b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list r3493@con) (r3486@gen-clauses r3493@con r349b@outerk r3494@clause*)) (cons 'lambda (cons '() (cons r3495@b r3496@b*)))))))))) (gensym))) r3489@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3487@t))) (r2ed9@syntax-dispatch r3487@t '(_ (any . each-any) any . each-any)))) r3483@x))) '#f))) (set! r2ea9@define-enumeration-macro (lambda (r3501@stx) ((lambda (r3504@set? r3506@remove-dups) (begin (set! r3504@set? (lambda (r351d@x) (or (null? r351d@x) (and (not (memq (car r351d@x) (cdr r351d@x))) (r3504@set? (cdr r351d@x)))))) (set! r3506@remove-dups (lambda (r351b@ls) (if (null? r351b@ls) '() (cons (car r351b@ls) (r3506@remove-dups (remq (car r351b@ls) (cdr r351b@ls))))))) ((lambda (r3507@t) ((lambda (r3509@ls/false) (if (and r3509@ls/false (apply (lambda (r350b@name r350c@id* r350d@maker) (and (r2cce@id? r350b@name) (r2cce@id? r350d@maker) (for-all r2cce@id? r350c@id*))) r3509@ls/false)) (apply (lambda (r3511@name r3512@id* r3513@maker) ((lambda (r3517@name* r3518@mk) (r2e8f@bless (list 'begin (list 'define r3518@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote r3517@name*)))) (list 'define-syntax r3511@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote r3517@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote r3511@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax r3513@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote r3513@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote r3517@name*)) (cons 'syntax-violation (cons (list 'quote r3513@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons r3518@mk '('(n* ...)))))))))))) (r3506@remove-dups (r2fc8@syntax->datum r3512@id*)) (gensym))) r3509@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3507@t))) (r2ed9@syntax-dispatch r3507@t '(_ any each-any any)))) r3501@stx))) '#f '#f))) (set! r2eab@time-macro (lambda (r351f@stx) ((lambda (r3521@t) ((lambda (r3523@ls/false) (if r3523@ls/false (apply (lambda (r3525@expr) (r2e8f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() r3525@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) r3523@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3521@t))) (r2ed9@syntax-dispatch r3521@t '(_ any)))) r351f@stx))) (set! r2ead@delay-macro (lambda (r3527@stx) ((lambda (r3529@t) ((lambda (r352b@ls/false) (if r352b@ls/false (apply (lambda (r352d@expr) (r2e8f@bless (list 'make-promise (list 'lambda '() r352d@expr)))) r352b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3529@t))) (r2ed9@syntax-dispatch r3529@t '(_ any)))) r3527@stx))) (set! r2eaf@assert-macro (lambda (r352f@stx) ((lambda (r3531@t) ((lambda (r3533@ls/false) (if r3533@ls/false (apply (lambda (r3535@expr) ((lambda (r3537@pos) (r2e8f@bless (list 'unless r3535@expr (list 'assertion-error (list 'quote r3535@expr) (list 'quote r3537@pos))))) (or (r2fba@expression-position r352f@stx) (r2fba@expression-position r3535@expr)))) r3533@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3531@t))) (r2ed9@syntax-dispatch r3531@t '(_ any)))) r352f@stx))) (set! r2eb1@endianness-macro (lambda (r3539@stx) ((lambda (r353b@t) ((lambda (r353d@ls/false) (if r353d@ls/false (apply (lambda (r353f@e) ((lambda (r3541@t) (if (memv r3541@t '(little)) (r2e8f@bless ''little) (if (memv r3541@t '(big)) (r2e8f@bless ''big) (r2fc2@syntax-violation '#f '"endianness must be big or little" r3539@stx)))) (r2fc8@syntax->datum r353f@e))) r353d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r353b@t))) (r2ed9@syntax-dispatch r353b@t '(_ any)))) r3539@stx))) (set! r2eb3@identifier-syntax-macro (lambda (r3543@stx) ((lambda (r3545@t) ((lambda (r3547@ls/false) (if r3547@ls/false (apply (lambda (r3549@expr) (r2e8f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax r3549@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax r3549@expr) '((syntax (e* ...)))))))))) r3547@ls/false) ((lambda (r354b@t) ((lambda (r354d@ls/false) (if (and r354d@ls/false (apply (lambda (r354f@id1 r3550@expr1 r3551@id2 r3552@expr2 r3553@expr3) (and (r2cce@id? r354f@id1) (r2cce@id? r3551@id2) (r2cce@id? r3552@expr2))) r354d@ls/false)) (apply (lambda (r3559@id1 r355a@expr1 r355b@id2 r355c@expr2 r355d@expr3) (r2e8f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax r355a@expr1)) (list (list 'set! 'id r355c@expr2) (list 'syntax r355d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons r355a@expr1 '(e* ...))))))))) r354d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r354b@t))) (r2ed9@syntax-dispatch r354b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) r3545@t))) (r2ed9@syntax-dispatch r3545@t '(_ any)))) r3543@stx))) (set! r2eb5@do-macro (lambda (r3563@stx) ((lambda (r3566@bind) (begin (set! r3566@bind (lambda (r357d@x) ((lambda (r357f@t) ((lambda (r3581@ls/false) (if r3581@ls/false (apply (lambda (r3583@x r3584@init) (list r3583@x r3584@init r3583@x)) r3581@ls/false) ((lambda (r3587@t) ((lambda (r3589@ls/false) (if r3589@ls/false (apply (lambda (r358b@x r358c@init r358d@step) (list r358b@x r358c@init r358d@step)) r3589@ls/false) ((lambda (r3591@t) ((lambda (r3593@ls/false) (if r3593@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid binding" r3563@stx)) r3593@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3591@t))) (r2ed9@syntax-dispatch r3591@t '_))) r3587@t))) (r2ed9@syntax-dispatch r3587@t '(any any any)))) r357f@t))) (r2ed9@syntax-dispatch r357f@t '(any any)))) r357d@x))) ((lambda (r3567@t) ((lambda (r3569@ls/false) (if r3569@ls/false (apply (lambda (r356b@binding* r356c@test r356d@expr* r356e@command*) ((lambda (r3573@t) ((lambda (r3575@ls/false) (if r3575@ls/false (apply (lambda (r3577@x* r3578@init* r3579@step*) (if (r2cd8@valid-bound-ids? r3577@x*) (r2e8f@bless (list 'letrec (list (list 'loop (list 'lambda r3577@x* (list 'if r356c@test (cons 'begin (cons '(if #f #f) r356d@expr*)) (cons 'begin (append r356e@command* (list (cons 'loop r3579@step*)))))))) (cons 'loop r3578@init*))) (r2fc2@syntax-violation '#f '"invalid bindings" r3563@stx))) r3575@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3573@t))) (r2ed9@syntax-dispatch r3573@t '#(each (any any any))))) (map r3566@bind r356b@binding*))) r3569@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3567@t))) (r2ed9@syntax-dispatch r3567@t '(_ each-any (any . each-any) . each-any)))) r3563@stx))) '#f))) (set! r2eb7@let*-macro (lambda (r3595@stx) ((lambda (r3597@t) ((lambda (r3599@ls/false) (if (and r3599@ls/false (apply (lambda (r359b@lhs* r359c@rhs* r359d@b r359e@b*) (for-all r2cce@id? r359b@lhs*)) r3599@ls/false)) (apply (lambda (r35a3@lhs* r35a4@rhs* r35a5@b r35a6@b*) (r2e8f@bless ((letrec ((r35ab@f (lambda (r35ad@x*) (if (null? r35ad@x*) (cons 'let (cons '() (cons r35a5@b r35a6@b*))) (list 'let (list (car r35ad@x*)) (r35ab@f (cdr r35ad@x*))))))) r35ab@f) (map list r35a3@lhs* r35a4@rhs*)))) r3599@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3597@t))) (r2ed9@syntax-dispatch r3597@t '(_ #(each (any any)) any . each-any)))) r3595@stx))) (set! r2eb9@or-macro (lambda (r35af@stx) ((lambda (r35b1@t) ((lambda (r35b3@ls/false) (if r35b3@ls/false (apply (lambda () '#f) r35b3@ls/false) ((lambda (r35b5@t) ((lambda (r35b7@ls/false) (if r35b7@ls/false (apply (lambda (r35b9@e r35ba@e*) (r2e8f@bless ((letrec ((r35bd@f (lambda (r35bf@e r35c0@e*) (if (null? r35c0@e*) (list 'begin '#f r35bf@e) (list 'let (list (list 't r35bf@e)) (list 'if 't 't (r35bd@f (car r35c0@e*) (cdr r35c0@e*)))))))) r35bd@f) r35b9@e r35ba@e*))) r35b7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r35b5@t))) (r2ed9@syntax-dispatch r35b5@t '(_ any . each-any)))) r35b1@t))) (r2ed9@syntax-dispatch r35b1@t '(_)))) r35af@stx))) (set! r2ebb@and-macro (lambda (r35c3@stx) ((lambda (r35c5@t) ((lambda (r35c7@ls/false) (if r35c7@ls/false (apply (lambda () '#t) r35c7@ls/false) ((lambda (r35c9@t) ((lambda (r35cb@ls/false) (if r35cb@ls/false (apply (lambda (r35cd@e r35ce@e*) (r2e8f@bless ((letrec ((r35d1@f (lambda (r35d3@e r35d4@e*) (if (null? r35d4@e*) (list 'begin '#f r35d3@e) (cons 'if (cons r35d3@e (cons (r35d1@f (car r35d4@e*) (cdr r35d4@e*)) '(#f)))))))) r35d1@f) r35cd@e r35ce@e*))) r35cb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r35c9@t))) (r2ed9@syntax-dispatch r35c9@t '(_ any . each-any)))) r35c5@t))) (r2ed9@syntax-dispatch r35c5@t '(_)))) r35c3@stx))) (set! r2ebd@cond-macro (lambda (r35d7@stx) ((lambda (r35d9@t) ((lambda (r35db@ls/false) (if r35db@ls/false (apply (lambda (r35dd@cls r35de@cls*) (r2e8f@bless ((letrec ((r35e1@f (lambda (r35e3@cls r35e4@cls*) (if (null? r35e4@cls*) ((lambda (r35e7@t) ((lambda (r35e9@ls/false) (if r35e9@ls/false (apply (lambda (r35eb@e r35ec@e*) (cons 'begin (cons r35eb@e r35ec@e*))) r35e9@ls/false) ((lambda (r35ef@t) ((lambda (r35f1@ls/false) (if r35f1@ls/false (apply (lambda (r35f3@e r35f4@p) (list 'let (list (list 't r35f3@e)) (list 'if 't (cons r35f4@p '(t))))) r35f1@ls/false) ((lambda (r35f7@t) ((lambda (r35f9@ls/false) (if r35f9@ls/false (apply (lambda (r35fb@e) (cons 'or (cons r35fb@e '((if #f #f))))) r35f9@ls/false) ((lambda (r35fd@t) ((lambda (r35ff@ls/false) (if r35ff@ls/false (apply (lambda (r3601@e r3602@e*) (list 'if r3601@e (cons 'begin r3602@e*))) r35ff@ls/false) ((lambda (r3605@t) ((lambda (r3607@ls/false) (if r3607@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid last clause" r35d7@stx)) r3607@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3605@t))) (r2ed9@syntax-dispatch r3605@t '_))) r35fd@t))) (r2ed9@syntax-dispatch r35fd@t '(any . each-any)))) r35f7@t))) (r2ed9@syntax-dispatch r35f7@t '(any)))) r35ef@t))) (r2ed9@syntax-dispatch r35ef@t '(any #(scheme-id =>) any)))) r35e7@t))) (r2ed9@syntax-dispatch r35e7@t '(#(scheme-id else) any . each-any)))) r35e3@cls) ((lambda (r3609@t) ((lambda (r360b@ls/false) (if r360b@ls/false (apply (lambda (r360d@e r360e@e*) (r2fc2@syntax-violation '#f '"incorrect position of keyword else" r35d7@stx)) r360b@ls/false) ((lambda (r3611@t) ((lambda (r3613@ls/false) (if r3613@ls/false (apply (lambda (r3615@e r3616@p) (list 'let (list (list 't r3615@e)) (list 'if 't (cons r3616@p '(t)) (r35e1@f (car r35e4@cls*) (cdr r35e4@cls*))))) r3613@ls/false) ((lambda (r3619@t) ((lambda (r361b@ls/false) (if r361b@ls/false (apply (lambda (r361d@e) (list 'or r361d@e (r35e1@f (car r35e4@cls*) (cdr r35e4@cls*)))) r361b@ls/false) ((lambda (r361f@t) ((lambda (r3621@ls/false) (if r3621@ls/false (apply (lambda (r3623@e r3624@e*) (list 'if r3623@e (cons 'begin r3624@e*) (r35e1@f (car r35e4@cls*) (cdr r35e4@cls*)))) r3621@ls/false) ((lambda (r3627@t) ((lambda (r3629@ls/false) (if r3629@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid last clause" r35d7@stx)) r3629@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3627@t))) (r2ed9@syntax-dispatch r3627@t '_))) r361f@t))) (r2ed9@syntax-dispatch r361f@t '(any . each-any)))) r3619@t))) (r2ed9@syntax-dispatch r3619@t '(any)))) r3611@t))) (r2ed9@syntax-dispatch r3611@t '(any #(scheme-id =>) any)))) r3609@t))) (r2ed9@syntax-dispatch r3609@t '(#(scheme-id else) any . each-any)))) r35e3@cls))))) r35e1@f) r35dd@cls r35de@cls*))) r35db@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r35d9@t))) (r2ed9@syntax-dispatch r35d9@t '(_ any . each-any)))) r35d7@stx))) (set! r2ebf@do-include (lambda (r362b@stx r362c@id r362d@filename) ((lambda (r3631@filename) (begin (if (not (and (string? r3631@filename) (r2cce@id? r362c@id))) (r2fc2@syntax-violation '#f '"invalid syntax" r362b@stx) (void)) (cons (r2e8f@bless 'begin) (with-input-from-file r3631@filename (lambda () ((letrec ((r3633@f (lambda (r3635@ls) ((lambda (r3637@x) (if (eof-object? r3637@x) (reverse r3635@ls) (r3633@f (cons (r2cac@datum->stx r362c@id r3637@x) r3635@ls)))) (r286b@r2788@read-annotated))))) r3633@f) '())))))) (r2ce4@stx->datum r362d@filename)))) (set! r2ec1@include-macro (lambda (r3639@e) ((lambda (r363b@t) ((lambda (r363d@ls/false) (if r363d@ls/false (apply (lambda (r363f@id r3640@filename) (r2ebf@do-include r3639@e r363f@id r3640@filename)) r363d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r363b@t))) (r2ed9@syntax-dispatch r363b@t '(any any)))) r3639@e))) (set! r2ec3@include-into-macro (lambda (r3643@e) ((lambda (r3645@t) ((lambda (r3647@ls/false) (if r3647@ls/false (apply (lambda (r3649@id r364a@filename) (r2ebf@do-include r3643@e r3649@id r364a@filename)) r3647@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3645@t))) (r2ed9@syntax-dispatch r3645@t '(_ any any)))) r3643@e))) (set! r2ec5@syntax-rules-macro (lambda (r364d@e) ((lambda (r364f@t) ((lambda (r3651@ls/false) (if r3651@ls/false (apply (lambda (r3653@lits r3654@pat* r3655@tmp*) (begin (r2edf@verify-literals r3653@lits r364d@e) (r2e8f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons r3653@lits (map (lambda (r3659@pat r365a@tmp) ((lambda (r365d@t) ((lambda (r365f@ls/false) (if r365f@ls/false (apply (lambda (r3661@rest) (list (cons 'g r3661@rest) (list 'syntax r365a@tmp))) r365f@ls/false) ((lambda (r3663@t) ((lambda (r3665@ls/false) (if r3665@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid syntax-rules pattern" r364d@e r3659@pat)) r3665@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3663@t))) (r2ed9@syntax-dispatch r3663@t '_))) r365d@t))) (r2ed9@syntax-dispatch r365d@t '(_ . any)))) r3659@pat)) r3654@pat* r3655@tmp*)))))))) r3651@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r364f@t))) (r2ed9@syntax-dispatch r364f@t '(_ each-any . #(each (any any)))))) r364d@e))) (set! r2ec7@quasiquote-macro ((lambda () ((lambda (r3668@datum r3684@quasicons* r3686@quasicons r3688@quasiappend r368a@quasivector r368c@vquasi r368e@quasi) (begin (set! r3668@datum (lambda (r3769@x) (list (r2e63@scheme-stx 'quote) (r2cb6@mkstx r3769@x '() '() '())))) (set! r3684@quasicons* (lambda (r3761@x r3762@y) ((letrec ((r3765@f (lambda (r3767@x) (if (null? r3767@x) r3762@y (r3686@quasicons (car r3767@x) (r3765@f (cdr r3767@x))))))) r3765@f) r3761@x))) (set! r3686@quasicons (lambda (r373b@x r373c@y) ((lambda (r373f@t) ((lambda (r3741@ls/false) (if r3741@ls/false (apply (lambda (r3743@dy) ((lambda (r3745@t) ((lambda (r3747@ls/false) (if r3747@ls/false (apply (lambda (r3749@dx) (list (r2e63@scheme-stx 'quote) (cons r3749@dx r3743@dy))) r3747@ls/false) ((lambda (r374b@t) ((lambda (r374d@ls/false) (if r374d@ls/false (apply (lambda () ((lambda (r374f@t) ((lambda (r3751@ls/false) (if r3751@ls/false (apply (lambda () (list (r2e63@scheme-stx 'list) r373b@x)) r3751@ls/false) ((lambda (r3753@t) ((lambda (r3755@ls/false) (if r3755@ls/false (apply (lambda () (list (r2e63@scheme-stx 'cons) r373b@x r373c@y)) r3755@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3753@t))) (r2ed9@syntax-dispatch r3753@t '_))) r374f@t))) (r2ed9@syntax-dispatch r374f@t '()))) r3743@dy)) r374d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r374b@t))) (r2ed9@syntax-dispatch r374b@t '_))) r3745@t))) (r2ed9@syntax-dispatch r3745@t '(#(scheme-id quote) any)))) r373b@x)) r3741@ls/false) ((lambda (r3757@t) ((lambda (r3759@ls/false) (if r3759@ls/false (apply (lambda (r375b@stuff) (cons* (r2e63@scheme-stx 'list) r373b@x r375b@stuff)) r3759@ls/false) ((lambda (r375d@t) ((lambda (r375f@ls/false) (if r375f@ls/false (apply (lambda () (list (r2e63@scheme-stx 'cons) r373b@x r373c@y)) r375f@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r375d@t))) (r2ed9@syntax-dispatch r375d@t '_))) r3757@t))) (r2ed9@syntax-dispatch r3757@t '(#(scheme-id list) . each-any)))) r373f@t))) (r2ed9@syntax-dispatch r373f@t '(#(scheme-id quote) any)))) r373c@y))) (set! r3688@quasiappend (lambda (r3721@x r3722@y) ((lambda (r3725@ls) (if (null? r3725@ls) (list (r2e63@scheme-stx 'quote) '()) (if (null? (cdr r3725@ls)) (car r3725@ls) (cons* (r2e63@scheme-stx 'append) r3725@ls)))) ((letrec ((r3727@f (lambda (r3729@x) (if (null? r3729@x) ((lambda (r372b@t) ((lambda (r372d@ls/false) (if r372d@ls/false (apply (lambda () '()) r372d@ls/false) ((lambda (r372f@t) ((lambda (r3731@ls/false) (if r3731@ls/false (apply (lambda () (list r3722@y)) r3731@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r372f@t))) (r2ed9@syntax-dispatch r372f@t '_))) r372b@t))) (r2ed9@syntax-dispatch r372b@t '(#(scheme-id quote) ())))) r3722@y) ((lambda (r3733@t) ((lambda (r3735@ls/false) (if r3735@ls/false (apply (lambda () (r3727@f (cdr r3729@x))) r3735@ls/false) ((lambda (r3737@t) ((lambda (r3739@ls/false) (if r3739@ls/false (apply (lambda () (cons (car r3729@x) (r3727@f (cdr r3729@x)))) r3739@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3737@t))) (r2ed9@syntax-dispatch r3737@t '_))) r3733@t))) (r2ed9@syntax-dispatch r3733@t '(#(scheme-id quote) ())))) (car r3729@x)))))) r3727@f) r3721@x)))) (set! r368a@quasivector (lambda (r36ef@x) ((lambda (r36f1@pat-x) ((lambda (r36f3@t) ((lambda (r36f5@ls/false) (if r36f5@ls/false (apply (lambda (r36f7@x*) (list (r2e63@scheme-stx 'quote) (list->vector r36f7@x*))) r36f5@ls/false) ((lambda (r36f9@t) ((lambda (r36fb@ls/false) (if r36fb@ls/false (apply (lambda () ((letrec ((r36fd@f (lambda (r36ff@x r3700@k) ((lambda (r3703@t) ((lambda (r3705@ls/false) (if r3705@ls/false (apply (lambda (r3707@x*) (r3700@k (map (lambda (r3709@x) (list (r2e63@scheme-stx 'quote) r3709@x)) r3707@x*))) r3705@ls/false) ((lambda (r370b@t) ((lambda (r370d@ls/false) (if r370d@ls/false (apply (lambda (r370f@x*) (r3700@k r370f@x*)) r370d@ls/false) ((lambda (r3711@t) ((lambda (r3713@ls/false) (if r3713@ls/false (apply (lambda (r3715@x r3716@y) (r36fd@f r3716@y (lambda (r3719@ls) (r3700@k (cons r3715@x r3719@ls))))) r3713@ls/false) ((lambda (r371b@t) ((lambda (r371d@ls/false) (if r371d@ls/false (apply (lambda () (list (r2e63@scheme-stx 'list->vector) r36f1@pat-x)) r371d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r371b@t))) (r2ed9@syntax-dispatch r371b@t '_))) r3711@t))) (r2ed9@syntax-dispatch r3711@t '(#(scheme-id cons) any any)))) r370b@t))) (r2ed9@syntax-dispatch r370b@t '(#(scheme-id list) . each-any)))) r3703@t))) (r2ed9@syntax-dispatch r3703@t '(#(scheme-id quote) each-any)))) r36ff@x)))) r36fd@f) r36ef@x (lambda (r371f@ls) (cons* (r2e63@scheme-stx 'vector) r371f@ls)))) r36fb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r36f9@t))) (r2ed9@syntax-dispatch r36f9@t '_))) r36f3@t))) (r2ed9@syntax-dispatch r36f3@t '(#(scheme-id quote) each-any)))) r36f1@pat-x)) r36ef@x))) (set! r368c@vquasi (lambda (r36cd@p r36ce@lev) ((lambda (r36d1@t) ((lambda (r36d3@ls/false) (if r36d3@ls/false (apply (lambda (r36d5@p r36d6@q) ((lambda (r36d9@t) ((lambda (r36db@ls/false) (if r36db@ls/false (apply (lambda (r36dd@p) (if (= r36ce@lev '0) (r3684@quasicons* r36dd@p (r368c@vquasi r36d6@q r36ce@lev)) (r3686@quasicons (r3686@quasicons (r3668@datum 'unquote) (r368e@quasi r36dd@p (- r36ce@lev '1))) (r368c@vquasi r36d6@q r36ce@lev)))) r36db@ls/false) ((lambda (r36df@t) ((lambda (r36e1@ls/false) (if r36e1@ls/false (apply (lambda (r36e3@p) (if (= r36ce@lev '0) (r3688@quasiappend r36e3@p (r368c@vquasi r36d6@q r36ce@lev)) (r3686@quasicons (r3686@quasicons (r3668@datum 'unquote-splicing) (r368e@quasi r36e3@p (- r36ce@lev '1))) (r368c@vquasi r36d6@q r36ce@lev)))) r36e1@ls/false) ((lambda (r36e5@t) ((lambda (r36e7@ls/false) (if r36e7@ls/false (apply (lambda (r36e9@p) (r3686@quasicons (r368e@quasi r36e9@p r36ce@lev) (r368c@vquasi r36d6@q r36ce@lev))) r36e7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r36e5@t))) (r2ed9@syntax-dispatch r36e5@t 'any))) r36df@t))) (r2ed9@syntax-dispatch r36df@t '(#(scheme-id unquote-splicing) . each-any)))) r36d9@t))) (r2ed9@syntax-dispatch r36d9@t '(#(scheme-id unquote) . each-any)))) r36d5@p)) r36d3@ls/false) ((lambda (r36eb@t) ((lambda (r36ed@ls/false) (if r36ed@ls/false (apply (lambda () (list (r2e63@scheme-stx 'quote) '())) r36ed@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r36eb@t))) (r2ed9@syntax-dispatch r36eb@t '()))) r36d1@t))) (r2ed9@syntax-dispatch r36d1@t '(any . any)))) r36cd@p))) (set! r368e@quasi (lambda (r3697@p r3698@lev) ((lambda (r369b@t) ((lambda (r369d@ls/false) (if r369d@ls/false (apply (lambda (r369f@p) (if (= r3698@lev '0) r369f@p (r3686@quasicons (r3668@datum 'unquote) (r368e@quasi (list r369f@p) (- r3698@lev '1))))) r369d@ls/false) ((lambda (r36a1@t) ((lambda (r36a3@ls/false) (if r36a3@ls/false (apply (lambda (r36a5@p r36a6@q) (if (= r3698@lev '0) (r3684@quasicons* r36a5@p (r368e@quasi r36a6@q r3698@lev)) (r3686@quasicons (r3686@quasicons (r3668@datum 'unquote) (r368e@quasi r36a5@p (- r3698@lev '1))) (r368e@quasi r36a6@q r3698@lev)))) r36a3@ls/false) ((lambda (r36a9@t) ((lambda (r36ab@ls/false) (if r36ab@ls/false (apply (lambda (r36ad@p r36ae@q) (if (= r3698@lev '0) (r3688@quasiappend r36ad@p (r368e@quasi r36ae@q r3698@lev)) (r3686@quasicons (r3686@quasicons (r3668@datum 'unquote-splicing) (r368e@quasi r36ad@p (- r3698@lev '1))) (r368e@quasi r36ae@q r3698@lev)))) r36ab@ls/false) ((lambda (r36b1@t) ((lambda (r36b3@ls/false) (if r36b3@ls/false (apply (lambda (r36b5@p) (r3686@quasicons (r3668@datum 'quasiquote) (r368e@quasi (list r36b5@p) (+ r3698@lev '1)))) r36b3@ls/false) ((lambda (r36b7@t) ((lambda (r36b9@ls/false) (if r36b9@ls/false (apply (lambda (r36bb@p r36bc@q) (r3686@quasicons (r368e@quasi r36bb@p r3698@lev) (r368e@quasi r36bc@q r3698@lev))) r36b9@ls/false) ((lambda (r36bf@t) ((lambda (r36c1@ls/false) (if (and r36c1@ls/false (apply (lambda (r36c3@x) (not (r2c96@stx? r36c3@x))) r36c1@ls/false)) (apply (lambda (r36c5@x) (r368a@quasivector (r368c@vquasi r36c5@x r3698@lev))) r36c1@ls/false) ((lambda (r36c7@t) ((lambda (r36c9@ls/false) (if r36c9@ls/false (apply (lambda (r36cb@p) (list (r2e63@scheme-stx 'quote) r36cb@p)) r36c9@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r36c7@t))) (r2ed9@syntax-dispatch r36c7@t 'any))) r36bf@t))) (r2ed9@syntax-dispatch r36bf@t '#(vector each-any)))) r36b7@t))) (r2ed9@syntax-dispatch r36b7@t '(any . any)))) r36b1@t))) (r2ed9@syntax-dispatch r36b1@t '(#(scheme-id quasiquote) any)))) r36a9@t))) (r2ed9@syntax-dispatch r36a9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) r36a1@t))) (r2ed9@syntax-dispatch r36a1@t '((#(scheme-id unquote) . each-any) . any)))) r369b@t))) (r2ed9@syntax-dispatch r369b@t '(#(scheme-id unquote) any)))) r3697@p))) (lambda (r368f@x) ((lambda (r3691@t) ((lambda (r3693@ls/false) (if r3693@ls/false (apply (lambda (r3695@e) (r368e@quasi r3695@e '0)) r3693@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3691@t))) (r2ed9@syntax-dispatch r3691@t '(_ any)))) r368f@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! r2ec9@quasisyntax-macro ((lambda () ((lambda (r376c@quasi) (begin (set! r376c@quasi (lambda (r3787@p r3788@lev) ((lambda (r378b@t) ((lambda (r378d@ls/false) (if r378d@ls/false (apply (lambda (r378f@p) (if (= r3788@lev '0) ((lambda (r3791@g) (values (list r3791@g) (list r378f@p) r3791@g)) (gensym)) (call-with-values (lambda () (r376c@quasi r378f@p (- r3788@lev '1))) (lambda (r3799@r3794 r379a@r3796 r379b@r3798) ((lambda (r379f@p r37a0@rhs* r37a1@lhs*) (values r37a1@lhs* r37a0@rhs* (list 'unsyntax r379f@p))) r379b@r3798 r379a@r3796 r3799@r3794))))) r378d@ls/false) ((lambda (r37a5@t) ((lambda (r37a7@ls/false) (if (and r37a7@ls/false (apply (lambda () (= r3788@lev '0)) r37a7@ls/false)) (apply (lambda () (r2fc2@syntax-violation '#f '"incorrect use of unsyntax" r3787@p)) r37a7@ls/false) ((lambda (r37a9@t) ((lambda (r37ab@ls/false) (if r37ab@ls/false (apply (lambda (r37ad@p* r37ae@q) (call-with-values (lambda () (r376c@quasi r37ae@q r3788@lev)) (lambda (r37b7@r37b2 r37b8@r37b4 r37b9@r37b6) ((lambda (r37bd@q r37be@rhs* r37bf@lhs*) (if (= r3788@lev '0) ((lambda (r37c3@g*) (values (append r37c3@g* r37bf@lhs*) (append r37ad@p* r37be@rhs*) (append r37c3@g* r37bd@q))) (map (lambda (r37c5@x) (gensym)) r37ad@p*)) (call-with-values (lambda () (r376c@quasi r37ad@p* (- r3788@lev '1))) (lambda (r37cd@r37c8 r37ce@r37ca r37cf@r37cc) ((lambda (r37d3@p* r37d4@rhs2* r37d5@lhs2*) (values (append r37d5@lhs2* r37bf@lhs*) (append r37d4@rhs2* r37be@rhs*) (cons (cons 'unsyntax r37d3@p*) r37bd@q))) r37cf@r37cc r37ce@r37ca r37cd@r37c8))))) r37b9@r37b6 r37b8@r37b4 r37b7@r37b2)))) r37ab@ls/false) ((lambda (r37d9@t) ((lambda (r37db@ls/false) (if r37db@ls/false (apply (lambda (r37dd@p* r37de@q) (call-with-values (lambda () (r376c@quasi r37de@q r3788@lev)) (lambda (r37e7@r37e2 r37e8@r37e4 r37e9@r37e6) ((lambda (r37ed@q r37ee@rhs* r37ef@lhs*) (if (= r3788@lev '0) ((lambda (r37f3@g*) (values (append (map (lambda (r37f5@g) (cons r37f5@g '(...))) r37f3@g*) r37ef@lhs*) (append r37dd@p* r37ee@rhs*) (append (apply append (map (lambda (r37f7@g) (cons r37f7@g '(...))) r37f3@g*)) r37ed@q))) (map (lambda (r37f9@x) (gensym)) r37dd@p*)) (call-with-values (lambda () (r376c@quasi r37dd@p* (- r3788@lev '1))) (lambda (r3801@r37fc r3802@r37fe r3803@r3800) ((lambda (r3807@p* r3808@rhs2* r3809@lhs2*) (values (append r3809@lhs2* r37ef@lhs*) (append r3808@rhs2* r37ee@rhs*) (cons (cons 'unsyntax-splicing r3807@p*) r37ed@q))) r3803@r3800 r3802@r37fe r3801@r37fc))))) r37e9@r37e6 r37e8@r37e4 r37e7@r37e2)))) r37db@ls/false) ((lambda (r380d@t) ((lambda (r380f@ls/false) (if (and r380f@ls/false (apply (lambda () (= r3788@lev '0)) r380f@ls/false)) (apply (lambda () (r2fc2@syntax-violation '#f '"incorrect use of unsyntax-splicing" r3787@p)) r380f@ls/false) ((lambda (r3811@t) ((lambda (r3813@ls/false) (if r3813@ls/false (apply (lambda (r3815@p) (call-with-values (lambda () (r376c@quasi r3815@p (+ r3788@lev '1))) (lambda (r381d@r3818 r381e@r381a r381f@r381c) ((lambda (r3823@p r3824@rhs* r3825@lhs*) (values r3825@lhs* r3824@rhs* (list 'quasisyntax r3823@p))) r381f@r381c r381e@r381a r381d@r3818)))) r3813@ls/false) ((lambda (r3829@t) ((lambda (r382b@ls/false) (if r382b@ls/false (apply (lambda (r382d@p r382e@q) (call-with-values (lambda () (r376c@quasi r382d@p r3788@lev)) (lambda (r383d@r3832 r383e@r3834 r383f@r3836) (call-with-values (lambda () (r376c@quasi r382e@q r3788@lev)) (lambda (r3843@r3838 r3844@r383a r3845@r383c) ((lambda (r3849@q r384a@rhs2* r384b@lhs2* r384c@p r384d@rhs* r384e@lhs*) (values (append r384b@lhs2* r384e@lhs*) (append r384a@rhs2* r384d@rhs*) (cons r384c@p r3849@q))) r3845@r383c r3844@r383a r3843@r3838 r383f@r3836 r383e@r3834 r383d@r3832)))))) r382b@ls/false) ((lambda (r3855@t) ((lambda (r3857@ls/false) (if r3857@ls/false (apply (lambda (r3859@x*) (call-with-values (lambda () (r376c@quasi r3859@x* r3788@lev)) (lambda (r3861@r385c r3862@r385e r3863@r3860) ((lambda (r3867@x* r3868@rhs* r3869@lhs*) (values r3869@lhs* r3868@rhs* (list->vector r3867@x*))) r3863@r3860 r3862@r385e r3861@r385c)))) r3857@ls/false) ((lambda (r386d@t) ((lambda (r386f@ls/false) (if r386f@ls/false (apply (lambda () (values '() '() r3787@p)) r386f@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r386d@t))) (r2ed9@syntax-dispatch r386d@t '_))) r3855@t))) (r2ed9@syntax-dispatch r3855@t '#(vector each-any)))) r3829@t))) (r2ed9@syntax-dispatch r3829@t '(any . any)))) r3811@t))) (r2ed9@syntax-dispatch r3811@t '(#(scheme-id quasisyntax) any)))) r380d@t))) (r2ed9@syntax-dispatch r380d@t '#(scheme-id unsyntax-splicing)))) r37d9@t))) (r2ed9@syntax-dispatch r37d9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) r37a9@t))) (r2ed9@syntax-dispatch r37a9@t '((#(scheme-id unsyntax) . each-any) . any)))) r37a5@t))) (r2ed9@syntax-dispatch r37a5@t '#(scheme-id unsyntax)))) r378b@t))) (r2ed9@syntax-dispatch r378b@t '(#(scheme-id unsyntax) any)))) r3787@p))) (lambda (r376d@x) ((lambda (r376f@t) ((lambda (r3771@ls/false) (if r3771@ls/false (apply (lambda (r3773@e) (call-with-values (lambda () (r376c@quasi r3773@e '0)) (lambda (r377b@r3776 r377c@r3778 r377d@r377a) ((lambda (r3781@v r3782@rhs* r3783@lhs*) (r2e8f@bless (list 'syntax-case (cons 'list r3782@rhs*) '() (list r3783@lhs* (list 'syntax r3781@v))))) r377d@r377a r377c@r3778 r377b@r3776)))) r3771@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r376f@t))) (r2ed9@syntax-dispatch r376f@t '(_ any)))) r376d@x)))) '#f)))) (set! r2ecb@define-struct-macro (lambda (r3871@stx) (r2fc2@syntax-violation '#f '"define-struct not supported" r3871@stx))) (set! r2ecd@define-record-type-macro (lambda (r3873@x) ((lambda (r3876@id r3878@get-record-name r387a@get-record-constructor-name r387c@get-record-predicate-name r387e@get-clause r3880@foo-rtd-code r3882@parent-rtd-code r3884@parent-rcd-code r3886@foo-rcd-code r3888@get-protocol-code r388a@get-fields r388c@get-mutator-indices r388e@get-mutators r3890@get-accessors r3892@enumerate r3894@do-define-record r3896@verify-clauses) (begin (set! r3876@id (lambda (r3a69@ctxt . r3a6b@str*) (r2fc6@datum->syntax r3a69@ctxt (string->symbol (apply string-append (map (lambda (r3a6d@x) (if (symbol? r3a6d@x) (symbol->string r3a6d@x) (if (string? r3a6d@x) r3a6d@x (assertion-violation 'define-record-type '"BUG")))) r3a6b@str*)))))) (set! r3878@get-record-name (lambda (r3a57@spec) ((lambda (r3a59@t) ((lambda (r3a5b@ls/false) (if r3a5b@ls/false (apply (lambda (r3a5d@foo r3a5e@make-foo r3a5f@foo?) r3a5d@foo) r3a5b@ls/false) ((lambda (r3a63@t) ((lambda (r3a65@ls/false) (if r3a65@ls/false (apply (lambda (r3a67@foo) r3a67@foo) r3a65@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a63@t))) (r2ed9@syntax-dispatch r3a63@t 'any))) r3a59@t))) (r2ed9@syntax-dispatch r3a59@t '(any any any)))) r3a57@spec))) (set! r387a@get-record-constructor-name (lambda (r3a43@spec) ((lambda (r3a45@t) ((lambda (r3a47@ls/false) (if r3a47@ls/false (apply (lambda (r3a49@foo r3a4a@make-foo r3a4b@foo?) r3a4a@make-foo) r3a47@ls/false) ((lambda (r3a4f@t) ((lambda (r3a51@ls/false) (if (and r3a51@ls/false (apply (lambda (r3a53@foo) (r2cce@id? r3a53@foo)) r3a51@ls/false)) (apply (lambda (r3a55@foo) (r3876@id r3a55@foo '"make-" (r2ce4@stx->datum r3a55@foo))) r3a51@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a4f@t))) (r2ed9@syntax-dispatch r3a4f@t 'any))) r3a45@t))) (r2ed9@syntax-dispatch r3a45@t '(any any any)))) r3a43@spec))) (set! r387c@get-record-predicate-name (lambda (r3a2f@spec) ((lambda (r3a31@t) ((lambda (r3a33@ls/false) (if r3a33@ls/false (apply (lambda (r3a35@foo r3a36@make-foo r3a37@foo?) r3a37@foo?) r3a33@ls/false) ((lambda (r3a3b@t) ((lambda (r3a3d@ls/false) (if (and r3a3d@ls/false (apply (lambda (r3a3f@foo) (r2cce@id? r3a3f@foo)) r3a3d@ls/false)) (apply (lambda (r3a41@foo) (r3876@id r3a41@foo (r2ce4@stx->datum r3a41@foo) '"?")) r3a3d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a3b@t))) (r2ed9@syntax-dispatch r3a3b@t 'any))) r3a31@t))) (r2ed9@syntax-dispatch r3a31@t '(any any any)))) r3a2f@spec))) (set! r387e@get-clause (lambda (r3a1d@id r3a1e@ls) ((lambda (r3a21@t) ((lambda (r3a23@ls/false) (if r3a23@ls/false (apply (lambda () '#f) r3a23@ls/false) ((lambda (r3a25@t) ((lambda (r3a27@ls/false) (if r3a27@ls/false (apply (lambda (r3a29@x r3a2a@rest r3a2b@ls) (if (r2cd6@free-id=? (r2e8f@bless r3a1d@id) r3a29@x) (cons r3a29@x r3a2a@rest) (r387e@get-clause r3a1d@id r3a2b@ls))) r3a27@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a25@t))) (r2ed9@syntax-dispatch r3a25@t '((any . any) . any)))) r3a21@t))) (r2ed9@syntax-dispatch r3a21@t '()))) r3a1e@ls))) (set! r3880@foo-rtd-code (lambda (r39cb@name r39cc@clause* r39cd@parent-rtd-code) ((lambda (r39d2@convert-field-spec*) (begin (set! r39d2@convert-field-spec* (lambda (r3a03@ls) (list->vector (map (lambda (r3a05@x) ((lambda (r3a07@t) ((lambda (r3a09@ls/false) (if r3a09@ls/false (apply (lambda (r3a0b@name r3a0c@rest) (list 'mutable r3a0b@name)) r3a09@ls/false) ((lambda (r3a0f@t) ((lambda (r3a11@ls/false) (if r3a11@ls/false (apply (lambda (r3a13@name r3a14@rest) (list 'immutable r3a13@name)) r3a11@ls/false) ((lambda (r3a17@t) ((lambda (r3a19@ls/false) (if r3a19@ls/false (apply (lambda (r3a1b@name) (list 'immutable r3a1b@name)) r3a19@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a17@t))) (r2ed9@syntax-dispatch r3a17@t 'any))) r3a0f@t))) (r2ed9@syntax-dispatch r3a0f@t '(#(scheme-id immutable) any . any)))) r3a07@t))) (r2ed9@syntax-dispatch r3a07@t '(#(scheme-id mutable) any . any)))) r3a05@x)) r3a03@ls)))) ((lambda (r39d3@uid-code r39d4@sealed? r39d5@opaque? r39d6@fields) (r2e8f@bless (list 'make-record-type-descriptor (list 'quote r39cb@name) r39cd@parent-rtd-code r39d3@uid-code r39d4@sealed? r39d5@opaque? r39d6@fields))) ((lambda (r39db@t) ((lambda (r39dd@ls/false) (if r39dd@ls/false (apply (lambda () (list 'quote (gensym))) r39dd@ls/false) ((lambda (r39df@t) ((lambda (r39e1@ls/false) (if r39e1@ls/false (apply (lambda (r39e3@uid) (list 'quote r39e3@uid)) r39e1@ls/false) ((lambda (r39e5@t) ((lambda (r39e7@ls/false) (if r39e7@ls/false (apply (lambda () '#f) r39e7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39e5@t))) (r2ed9@syntax-dispatch r39e5@t '_))) r39df@t))) (r2ed9@syntax-dispatch r39df@t '(_ any)))) r39db@t))) (r2ed9@syntax-dispatch r39db@t '(_)))) (r387e@get-clause 'nongenerative r39cc@clause*)) ((lambda (r39e9@t) ((lambda (r39eb@ls/false) (if r39eb@ls/false (apply (lambda () '#t) r39eb@ls/false) ((lambda (r39ed@t) ((lambda (r39ef@ls/false) (if r39ef@ls/false (apply (lambda () '#f) r39ef@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39ed@t))) (r2ed9@syntax-dispatch r39ed@t '_))) r39e9@t))) (r2ed9@syntax-dispatch r39e9@t '(_ #(atom #t))))) (r387e@get-clause 'sealed r39cc@clause*)) ((lambda (r39f1@t) ((lambda (r39f3@ls/false) (if r39f3@ls/false (apply (lambda () '#t) r39f3@ls/false) ((lambda (r39f5@t) ((lambda (r39f7@ls/false) (if r39f7@ls/false (apply (lambda () '#f) r39f7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39f5@t))) (r2ed9@syntax-dispatch r39f5@t '_))) r39f1@t))) (r2ed9@syntax-dispatch r39f1@t '(_ #(atom #t))))) (r387e@get-clause 'opaque r39cc@clause*)) ((lambda (r39f9@t) ((lambda (r39fb@ls/false) (if r39fb@ls/false (apply (lambda (r39fd@field-spec*) (list 'quote (r39d2@convert-field-spec* r39fd@field-spec*))) r39fb@ls/false) ((lambda (r39ff@t) ((lambda (r3a01@ls/false) (if r3a01@ls/false (apply (lambda () ''#()) r3a01@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39ff@t))) (r2ed9@syntax-dispatch r39ff@t '_))) r39f9@t))) (r2ed9@syntax-dispatch r39f9@t '(_ . each-any)))) (r387e@get-clause 'fields r39cc@clause*))))) '#f))) (set! r3882@parent-rtd-code (lambda (r39b3@clause*) ((lambda (r39b5@t) ((lambda (r39b7@ls/false) (if r39b7@ls/false (apply (lambda (r39b9@name) (list 'record-type-descriptor r39b9@name)) r39b7@ls/false) ((lambda (r39bb@t) ((lambda (r39bd@ls/false) (if r39bd@ls/false (apply (lambda () ((lambda (r39bf@t) ((lambda (r39c1@ls/false) (if r39c1@ls/false (apply (lambda (r39c3@rtd r39c4@rcd) r39c3@rtd) r39c1@ls/false) ((lambda (r39c7@t) ((lambda (r39c9@ls/false) (if r39c9@ls/false (apply (lambda () '#f) r39c9@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39c7@t))) (r2ed9@syntax-dispatch r39c7@t '#(atom #f)))) r39bf@t))) (r2ed9@syntax-dispatch r39bf@t '(_ any any)))) (r387e@get-clause 'parent-rtd r39b3@clause*))) r39bd@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39bb@t))) (r2ed9@syntax-dispatch r39bb@t '#(atom #f)))) r39b5@t))) (r2ed9@syntax-dispatch r39b5@t '(_ any)))) (r387e@get-clause 'parent r39b3@clause*)))) (set! r3884@parent-rcd-code (lambda (r399b@clause*) ((lambda (r399d@t) ((lambda (r399f@ls/false) (if r399f@ls/false (apply (lambda (r39a1@name) (list 'record-constructor-descriptor r39a1@name)) r399f@ls/false) ((lambda (r39a3@t) ((lambda (r39a5@ls/false) (if r39a5@ls/false (apply (lambda () ((lambda (r39a7@t) ((lambda (r39a9@ls/false) (if r39a9@ls/false (apply (lambda (r39ab@rtd r39ac@rcd) r39ac@rcd) r39a9@ls/false) ((lambda (r39af@t) ((lambda (r39b1@ls/false) (if r39b1@ls/false (apply (lambda () '#f) r39b1@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39af@t))) (r2ed9@syntax-dispatch r39af@t '#(atom #f)))) r39a7@t))) (r2ed9@syntax-dispatch r39a7@t '(_ any any)))) (r387e@get-clause 'parent-rtd r399b@clause*))) r39a5@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r39a3@t))) (r2ed9@syntax-dispatch r39a3@t '#(atom #f)))) r399d@t))) (r2ed9@syntax-dispatch r399d@t '(_ any)))) (r387e@get-clause 'parent r399b@clause*)))) (set! r3886@foo-rcd-code (lambda (r3993@clause* r3994@foo-rtd r3995@protocol r3996@parent-rcd-code) (list 'make-record-constructor-descriptor r3994@foo-rtd r3996@parent-rcd-code r3995@protocol))) (set! r3888@get-protocol-code (lambda (r3987@clause*) ((lambda (r3989@t) ((lambda (r398b@ls/false) (if r398b@ls/false (apply (lambda (r398d@expr) r398d@expr) r398b@ls/false) ((lambda (r398f@t) ((lambda (r3991@ls/false) (if r3991@ls/false (apply (lambda () '#f) r3991@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r398f@t))) (r2ed9@syntax-dispatch r398f@t '_))) r3989@t))) (r2ed9@syntax-dispatch r3989@t '(_ any)))) (r387e@get-clause 'protocol r3987@clause*)))) (set! r388a@get-fields (lambda (r3975@clause*) ((lambda (r3977@t) ((lambda (r3979@ls/false) (if r3979@ls/false (apply (lambda () '()) r3979@ls/false) ((lambda (r397b@t) ((lambda (r397d@ls/false) (if r397d@ls/false (apply (lambda (r397f@f*) r397f@f*) r397d@ls/false) ((lambda (r3981@t) ((lambda (r3983@ls/false) (if r3983@ls/false (apply (lambda (r3985@rest) (r388a@get-fields r3985@rest)) r3983@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3981@t))) (r2ed9@syntax-dispatch r3981@t '(_ . any)))) r397b@t))) (r2ed9@syntax-dispatch r397b@t '((#(scheme-id fields) . each-any) . _)))) r3977@t))) (r2ed9@syntax-dispatch r3977@t '()))) r3975@clause*))) (set! r388c@get-mutator-indices (lambda (r395d@fields) ((letrec ((r395f@f (lambda (r3961@fields r3962@i) ((lambda (r3965@t) ((lambda (r3967@ls/false) (if r3967@ls/false (apply (lambda () '()) r3967@ls/false) ((lambda (r3969@t) ((lambda (r396b@ls/false) (if r396b@ls/false (apply (lambda (r396d@rest) (cons r3962@i (r395f@f r396d@rest (+ r3962@i '1)))) r396b@ls/false) ((lambda (r396f@t) ((lambda (r3971@ls/false) (if r3971@ls/false (apply (lambda (r3973@rest) (r395f@f r3973@rest (+ r3962@i '1))) r3971@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r396f@t))) (r2ed9@syntax-dispatch r396f@t '(_ . any)))) r3969@t))) (r2ed9@syntax-dispatch r3969@t '((#(scheme-id mutable) . _) . any)))) r3965@t))) (r2ed9@syntax-dispatch r3965@t '()))) r3961@fields)))) r395f@f) r395d@fields '0))) (set! r388e@get-mutators (lambda (r3933@foo r3934@fields) ((lambda (r3938@gen-name) (begin (set! r3938@gen-name (lambda (r395b@x) (r2fc6@datum->syntax r3933@foo (string->symbol (string-append (symbol->string (r2fc8@syntax->datum r3933@foo)) '"-" (symbol->string (r2fc8@syntax->datum r395b@x)) '"-set!"))))) ((letrec ((r3939@f (lambda (r393b@fields) ((lambda (r393d@t) ((lambda (r393f@ls/false) (if r393f@ls/false (apply (lambda () '()) r393f@ls/false) ((lambda (r3941@t) ((lambda (r3943@ls/false) (if r3943@ls/false (apply (lambda (r3945@name r3946@accessor r3947@mutator r3948@rest) (cons r3947@mutator (r3939@f r3948@rest))) r3943@ls/false) ((lambda (r394d@t) ((lambda (r394f@ls/false) (if r394f@ls/false (apply (lambda (r3951@name r3952@rest) (cons (r3938@gen-name r3951@name) (r3939@f r3952@rest))) r394f@ls/false) ((lambda (r3955@t) ((lambda (r3957@ls/false) (if r3957@ls/false (apply (lambda (r3959@rest) (r3939@f r3959@rest)) r3957@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3955@t))) (r2ed9@syntax-dispatch r3955@t '(_ . any)))) r394d@t))) (r2ed9@syntax-dispatch r394d@t '((#(scheme-id mutable) any) . any)))) r3941@t))) (r2ed9@syntax-dispatch r3941@t '((#(scheme-id mutable) any any any) . any)))) r393d@t))) (r2ed9@syntax-dispatch r393d@t '()))) r393b@fields)))) r3939@f) r3934@fields))) '#f))) (set! r3890@get-accessors (lambda (r38ef@foo r38f0@fields) ((lambda (r38f4@gen-name) (begin (set! r38f4@gen-name (lambda (r3931@x) (r2fc6@datum->syntax r38ef@foo (string->symbol (string-append (symbol->string (r2fc8@syntax->datum r38ef@foo)) '"-" (symbol->string (r2fc8@syntax->datum r3931@x))))))) (map (lambda (r38f5@field) ((lambda (r38f7@t) ((lambda (r38f9@ls/false) (if (and r38f9@ls/false (apply (lambda (r38fb@name r38fc@accessor r38fd@mutator) (r2cce@id? r38fc@accessor)) r38f9@ls/false)) (apply (lambda (r3901@name r3902@accessor r3903@mutator) r3902@accessor) r38f9@ls/false) ((lambda (r3907@t) ((lambda (r3909@ls/false) (if (and r3909@ls/false (apply (lambda (r390b@name r390c@accessor) (r2cce@id? r390c@accessor)) r3909@ls/false)) (apply (lambda (r390f@name r3910@accessor) r3910@accessor) r3909@ls/false) ((lambda (r3913@t) ((lambda (r3915@ls/false) (if (and r3915@ls/false (apply (lambda (r3917@name) (r2cce@id? r3917@name)) r3915@ls/false)) (apply (lambda (r3919@name) (r38f4@gen-name r3919@name)) r3915@ls/false) ((lambda (r391b@t) ((lambda (r391d@ls/false) (if (and r391d@ls/false (apply (lambda (r391f@name) (r2cce@id? r391f@name)) r391d@ls/false)) (apply (lambda (r3921@name) (r38f4@gen-name r3921@name)) r391d@ls/false) ((lambda (r3923@t) ((lambda (r3925@ls/false) (if (and r3925@ls/false (apply (lambda (r3927@name) (r2cce@id? r3927@name)) r3925@ls/false)) (apply (lambda (r3929@name) (r38f4@gen-name r3929@name)) r3925@ls/false) ((lambda (r392b@t) ((lambda (r392d@ls/false) (if r392d@ls/false (apply (lambda (r392f@others) (r2fc2@syntax-violation '#f '"invalid field spec" r38f5@field)) r392d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r392b@t))) (r2ed9@syntax-dispatch r392b@t 'any))) r3923@t))) (r2ed9@syntax-dispatch r3923@t 'any))) r391b@t))) (r2ed9@syntax-dispatch r391b@t '(#(scheme-id immutable) any)))) r3913@t))) (r2ed9@syntax-dispatch r3913@t '(#(scheme-id mutable) any)))) r3907@t))) (r2ed9@syntax-dispatch r3907@t '(#(scheme-id immutable) any any)))) r38f7@t))) (r2ed9@syntax-dispatch r38f7@t '(#(scheme-id mutable) any any any)))) r38f5@field)) r38f0@fields))) '#f))) (set! r3892@enumerate (lambda (r38e7@ls) ((letrec ((r38e9@f (lambda (r38eb@ls r38ec@i) (if (null? r38eb@ls) '() (cons r38ec@i (r38e9@f (cdr r38eb@ls) (+ r38ec@i '1))))))) r38e9@f) r38e7@ls '0))) (set! r3894@do-define-record (lambda (r38bf@namespec r38c0@clause*) ((lambda (r38c3@foo) ((lambda (r38c5@foo-rtd) ((lambda (r38c7@foo-rcd) ((lambda (r38c9@protocol) ((lambda (r38cb@make-foo) ((lambda (r38cd@fields) ((lambda (r38cf@idx*) ((lambda (r38d1@foo-x*) ((lambda (r38d3@set-foo-x!*) ((lambda (r38d5@set-foo-idx*) ((lambda (r38d7@foo?) ((lambda (r38d9@foo-rtd-code) ((lambda (r38db@foo-rcd-code) ((lambda (r38dd@protocol-code) ((lambda () (r2e8f@bless (cons 'begin (cons (list 'define r38c5@foo-rtd r38d9@foo-rtd-code) (cons (list 'define r38c9@protocol r38dd@protocol-code) (cons (list 'define r38c7@foo-rcd r38db@foo-rcd-code) (cons (list 'define-syntax r38c3@foo (list 'list ''$rtd (list 'syntax r38c5@foo-rtd) (list 'syntax r38c7@foo-rcd))) (cons (list 'define r38d7@foo? (list 'record-predicate r38c5@foo-rtd)) (cons (list 'define r38cb@make-foo (list 'record-constructor r38c7@foo-rcd)) (append (map (lambda (r38df@foo-x r38e0@idx) (list 'define r38df@foo-x (list 'record-accessor r38c5@foo-rtd r38e0@idx))) r38d1@foo-x* r38cf@idx*) (map (lambda (r38e3@set-foo-x! r38e4@idx) (list 'define r38e3@set-foo-x! (list 'record-mutator r38c5@foo-rtd r38e4@idx))) r38d3@set-foo-x!* r38d5@set-foo-idx*))))))))))))) (r3888@get-protocol-code r38c0@clause*))) (r3886@foo-rcd-code r38c0@clause* r38c5@foo-rtd r38c9@protocol (r3884@parent-rcd-code r38c0@clause*)))) (r3880@foo-rtd-code r38c3@foo r38c0@clause* (r3882@parent-rtd-code r38c0@clause*)))) (r387c@get-record-predicate-name r38bf@namespec))) (r388c@get-mutator-indices r38cd@fields))) (r388e@get-mutators r38c3@foo r38cd@fields))) (r3890@get-accessors r38c3@foo r38cd@fields))) (r3892@enumerate r38cd@fields))) (r388a@get-fields r38c0@clause*))) (r387a@get-record-constructor-name r38bf@namespec))) (gensym))) (gensym))) (gensym))) (r3878@get-record-name r38bf@namespec)))) (set! r3896@verify-clauses (lambda (r389f@x r38a0@cls*) ((lambda (r38a4@valid-kwds r38a6@free-id-member?) (begin (set! r38a4@valid-kwds (map r2e8f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! r38a6@free-id-member? (lambda (r38bb@x r38bc@ls) (and (pair? r38bc@ls) (or (r2cd6@free-id=? r38bb@x (car r38bc@ls)) (r38a6@free-id-member? r38bb@x (cdr r38bc@ls)))))) ((letrec ((r38a7@f (lambda (r38a9@cls* r38aa@seen*) (if (not (null? r38a9@cls*)) ((lambda (r38ad@t) ((lambda (r38af@ls/false) (if r38af@ls/false (apply (lambda (r38b1@kwd r38b2@rest) (if (or (not (r2cce@id? r38b1@kwd)) (not (r38a6@free-id-member? r38b1@kwd r38a4@valid-kwds))) (r2fc2@syntax-violation '#f '"not a valid define-record-type keyword" r38b1@kwd) (if (r2cdc@bound-id-member? r38b1@kwd r38aa@seen*) (r2fc2@syntax-violation '#f '"duplicate use of keyword " r389f@x r38b1@kwd) (r38a7@f (cdr r38a9@cls*) (cons r38b1@kwd r38aa@seen*))))) r38af@ls/false) ((lambda (r38b5@t) ((lambda (r38b7@ls/false) (if r38b7@ls/false (apply (lambda (r38b9@cls) (r2fc2@syntax-violation '#f '"malformed define-record-type clause" r38b9@cls)) r38b7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r38b5@t))) (r2ed9@syntax-dispatch r38b5@t 'any))) r38ad@t))) (r2ed9@syntax-dispatch r38ad@t '(any . any)))) (car r38a9@cls*)) (void))))) r38a7@f) r38a0@cls* '()))) '#f '#f))) ((lambda (r3897@t) ((lambda (r3899@ls/false) (if r3899@ls/false (apply (lambda (r389b@namespec r389c@clause*) (begin (r3896@verify-clauses r3873@x r389c@clause*) (r3894@do-define-record r389b@namespec r389c@clause*))) r3899@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3897@t))) (r2ed9@syntax-dispatch r3897@t '(_ any . each-any)))) r3873@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2ecf@define-condition-type-macro (lambda (r3a6f@x) ((lambda (r3a72@mkname) (begin (set! r3a72@mkname (lambda (r3a9f@name r3aa0@suffix) (r2fc6@datum->syntax r3a9f@name (string->symbol (string-append (symbol->string (r2fc8@syntax->datum r3a9f@name)) r3aa0@suffix))))) ((lambda (r3a73@t) ((lambda (r3a75@ls/false) (if (and r3a75@ls/false (apply (lambda (r3a77@ctxt r3a78@name r3a79@super r3a7a@constructor r3a7b@predicate r3a7c@field* r3a7d@accessor*) (and (r2cce@id? r3a78@name) (r2cce@id? r3a79@super) (r2cce@id? r3a7a@constructor) (r2cce@id? r3a7b@predicate) (for-all r2cce@id? r3a7c@field*) (for-all r2cce@id? r3a7d@accessor*))) r3a75@ls/false)) (apply (lambda (r3a85@ctxt r3a86@name r3a87@super r3a88@constructor r3a89@predicate r3a8a@field* r3a8b@accessor*) ((lambda (r3a93@aux-accessor*) (r2e8f@bless (cons 'begin (cons (cons 'define-record-type (cons (list r3a86@name r3a88@constructor (gensym)) (cons (list 'parent r3a87@super) (cons (cons 'fields (map (lambda (r3a95@field r3a96@aux) (list 'immutable r3a95@field r3a96@aux)) r3a8a@field* r3a93@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define r3a89@predicate (list 'condition-predicate (list 'record-type-descriptor r3a86@name))) (map (lambda (r3a99@accessor r3a9a@aux) (list 'define r3a99@accessor (list 'condition-accessor (list 'record-type-descriptor r3a86@name) r3a9a@aux))) r3a8b@accessor* r3a93@aux-accessor*)))))) (map (lambda (r3a9d@x) (gensym)) r3a8b@accessor*))) r3a75@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3a73@t))) (r2ed9@syntax-dispatch r3a73@t '(any any any any any . #(each (any any)))))) r3a6f@x))) '#f))) (set! r2ed1@incorrect-usage-macro (lambda (r3aa3@e) (r2fc2@syntax-violation '#f '"incorrect usage of auxiliary keyword" r3aa3@e))) (set! r2ed3@parameterize-macro (lambda (r3aa5@e) ((lambda (r3aa7@t) ((lambda (r3aa9@ls/false) (if r3aa9@ls/false (apply (lambda (r3aab@b r3aac@b*) (r2e8f@bless (cons 'let (cons '() (cons r3aab@b r3aac@b*))))) r3aa9@ls/false) ((lambda (r3aaf@t) ((lambda (r3ab1@ls/false) (if r3ab1@ls/false (apply (lambda (r3ab3@olhs* r3ab4@orhs* r3ab5@b r3ab6@b*) ((lambda (r3abb@lhs* r3abc@rhs*) (r2e8f@bless (cons (list 'lambda (append r3abb@lhs* r3abc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (r3abf@lhs r3ac0@rhs) (list 'let (list (list 't (list r3abf@lhs))) (list r3abf@lhs r3ac0@rhs) (cons 'set! (cons r3ac0@rhs '(t))))) r3abb@lhs* r3abc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons r3ab5@b r3ab6@b*))) '(swap)))))) (append r3ab3@olhs* r3ab4@orhs*)))) (r2fb0@generate-temporaries r3ab3@olhs*) (r2fb0@generate-temporaries r3ab4@orhs*))) r3ab1@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3aaf@t))) (r2ed9@syntax-dispatch r3aaf@t '(_ #(each (any any)) any . each-any)))) r3aa7@t))) (r2ed9@syntax-dispatch r3aa7@t '(_ () any . each-any)))) r3aa5@e))) (set! r2ed5@foreign-call-transformer (lambda (r3ac3@e r3ac4@r r3ac5@mr) ((lambda (r3ac9@t) ((lambda (r3acb@ls/false) (if r3acb@ls/false (apply (lambda (r3acd@name r3ace@arg*) (cons 'foreign-call (cons (r2efb@chi-expr r3acd@name r3ac4@r r3ac5@mr) (r2ef7@chi-expr* r3ace@arg* r3ac4@r r3ac5@mr)))) r3acb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3ac9@t))) (r2ed9@syntax-dispatch r3ac9@t '(_ any . each-any)))) r3ac3@e))) (set! r2ed7@convert-pattern (lambda (r3ad1@pattern r3ad2@keys) ((lambda (r3ad6@cvt* r3ad8@cvt) (begin (set! r3ad6@cvt* (lambda (r3b75@p* r3b76@n r3b77@ids) (if (null? r3b75@p*) (values '() r3b77@ids) (call-with-values (lambda () (r3ad6@cvt* (cdr r3b75@p*) r3b76@n r3b77@ids)) (lambda (r3b7f@r3b7c r3b80@r3b7e) ((lambda (r3b83@ids r3b84@y) (call-with-values (lambda () (r3ad8@cvt (car r3b75@p*) r3b76@n r3b83@ids)) (lambda (r3b8b@r3b88 r3b8c@r3b8a) ((lambda (r3b8f@ids r3b90@x) (values (cons r3b90@x r3b84@y) r3b8f@ids)) r3b8c@r3b8a r3b8b@r3b88)))) r3b80@r3b7e r3b7f@r3b7c)))))) (set! r3ad8@cvt (lambda (r3ad9@p r3ada@n r3adb@ids) ((lambda (r3adf@t) ((lambda (r3ae1@ls/false) (if (and r3ae1@ls/false (apply (lambda (r3ae3@id) (r2cce@id? r3ae3@id)) r3ae1@ls/false)) (apply (lambda (r3ae5@id) (if (r2cdc@bound-id-member? r3ad9@p r3ad2@keys) (values (vector 'free-id r3ad9@p) r3adb@ids) (if (r2cd6@free-id=? r3ad9@p (r2e63@scheme-stx '_)) (values '_ r3adb@ids) (values 'any (cons (cons r3ad9@p r3ada@n) r3adb@ids))))) r3ae1@ls/false) ((lambda (r3ae7@t) ((lambda (r3ae9@ls/false) (if (and r3ae9@ls/false (apply (lambda (r3aeb@p r3aec@dots) (r2edb@ellipsis? r3aec@dots)) r3ae9@ls/false)) (apply (lambda (r3aef@p r3af0@dots) (call-with-values (lambda () (r3ad8@cvt r3aef@p (+ r3ada@n '1) r3adb@ids)) (lambda (r3af7@r3af4 r3af8@r3af6) ((lambda (r3afb@ids r3afc@p) (values (if (eq? r3afc@p 'any) 'each-any (vector 'each r3afc@p)) r3afb@ids)) r3af8@r3af6 r3af7@r3af4)))) r3ae9@ls/false) ((lambda (r3aff@t) ((lambda (r3b01@ls/false) (if (and r3b01@ls/false (apply (lambda (r3b03@x r3b04@dots r3b05@ys r3b06@z) (r2edb@ellipsis? r3b04@dots)) r3b01@ls/false)) (apply (lambda (r3b0b@x r3b0c@dots r3b0d@ys r3b0e@z) (call-with-values (lambda () (r3ad8@cvt r3b0e@z r3ada@n r3adb@ids)) (lambda (r3b17@r3b14 r3b18@r3b16) ((lambda (r3b1b@ids r3b1c@z) (call-with-values (lambda () (r3ad6@cvt* r3b0d@ys r3ada@n r3b1b@ids)) (lambda (r3b23@r3b20 r3b24@r3b22) ((lambda (r3b27@ids r3b28@ys) (call-with-values (lambda () (r3ad8@cvt r3b0b@x (+ r3ada@n '1) r3b27@ids)) (lambda (r3b2f@r3b2c r3b30@r3b2e) ((lambda (r3b33@ids r3b34@x) (values (vector 'each+ r3b34@x (reverse r3b28@ys) r3b1c@z) r3b33@ids)) r3b30@r3b2e r3b2f@r3b2c)))) r3b24@r3b22 r3b23@r3b20)))) r3b18@r3b16 r3b17@r3b14)))) r3b01@ls/false) ((lambda (r3b37@t) ((lambda (r3b39@ls/false) (if r3b39@ls/false (apply (lambda (r3b3b@x r3b3c@y) (call-with-values (lambda () (r3ad8@cvt r3b3c@y r3ada@n r3adb@ids)) (lambda (r3b43@r3b40 r3b44@r3b42) ((lambda (r3b47@ids r3b48@y) (call-with-values (lambda () (r3ad8@cvt r3b3b@x r3ada@n r3b47@ids)) (lambda (r3b4f@r3b4c r3b50@r3b4e) ((lambda (r3b53@ids r3b54@x) (values (cons r3b54@x r3b48@y) r3b53@ids)) r3b50@r3b4e r3b4f@r3b4c)))) r3b44@r3b42 r3b43@r3b40)))) r3b39@ls/false) ((lambda (r3b57@t) ((lambda (r3b59@ls/false) (if r3b59@ls/false (apply (lambda () (values '() r3adb@ids)) r3b59@ls/false) ((lambda (r3b5b@t) ((lambda (r3b5d@ls/false) (if (and r3b5d@ls/false (apply (lambda (r3b5f@p) (not (r2c96@stx? r3b5f@p))) r3b5d@ls/false)) (apply (lambda (r3b61@p) (call-with-values (lambda () (r3ad8@cvt r3b61@p r3ada@n r3adb@ids)) (lambda (r3b67@r3b64 r3b68@r3b66) ((lambda (r3b6b@ids r3b6c@p) (values (vector 'vector r3b6c@p) r3b6b@ids)) r3b68@r3b66 r3b67@r3b64)))) r3b5d@ls/false) ((lambda (r3b6f@t) ((lambda (r3b71@ls/false) (if r3b71@ls/false (apply (lambda (r3b73@datum) (values (vector 'atom (r2ce4@stx->datum r3b73@datum)) r3adb@ids)) r3b71@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3b6f@t))) (r2ed9@syntax-dispatch r3b6f@t 'any))) r3b5b@t))) (r2ed9@syntax-dispatch r3b5b@t '#(vector each-any)))) r3b57@t))) (r2ed9@syntax-dispatch r3b57@t '()))) r3b37@t))) (r2ed9@syntax-dispatch r3b37@t '(any . any)))) r3aff@t))) (r2ed9@syntax-dispatch r3aff@t '(any any . #(each+ any () any))))) r3ae7@t))) (r2ed9@syntax-dispatch r3ae7@t '(any any)))) r3adf@t))) (r2ed9@syntax-dispatch r3adf@t 'any))) r3ad9@p))) (r3ad8@cvt r3ad1@pattern '0 '()))) '#f '#f))) (set! r2ed9@syntax-dispatch ((lambda () ((lambda (r3b94@stx^ r3b96@match-each r3b98@match-each+ r3b9a@match-each-any r3b9c@match-empty r3b9e@combine r3ba0@match* r3ba2@match) (begin (set! r3b94@stx^ (lambda (r3c6f@e r3c70@m* r3c71@s* r3c72@ae*) (if (and (null? r3c70@m*) (null? r3c71@s*) (null? r3c72@ae*)) r3c6f@e (r2cb6@mkstx r3c6f@e r3c70@m* r3c71@s* r3c72@ae*)))) (set! r3b96@match-each (lambda (r3c4f@e r3c50@p r3c51@m* r3c52@s* r3c53@ae*) (if (pair? r3c4f@e) ((lambda (r3c59@first) (and r3c59@first ((lambda (r3c5b@rest) (and r3c5b@rest (cons r3c59@first r3c5b@rest))) (r3b96@match-each (cdr r3c4f@e) r3c50@p r3c51@m* r3c52@s* r3c53@ae*)))) (r3ba2@match (car r3c4f@e) r3c50@p r3c51@m* r3c52@s* r3c53@ae* '())) (if (null? r3c4f@e) '() (if (r2c96@stx? r3c4f@e) (and (not (r2c4c@top-marked? r3c51@m*)) (call-with-values (lambda () (r2cb4@join-wraps r3c51@m* r3c52@s* r3c53@ae* r3c4f@e)) (lambda (r3c63@r3c5e r3c64@r3c60 r3c65@r3c62) ((lambda (r3c69@ae* r3c6a@s* r3c6b@m*) (r3b96@match-each (r2c9a@stx-expr r3c4f@e) r3c50@p r3c6b@m* r3c6a@s* r3c69@ae*)) r3c65@r3c62 r3c64@r3c60 r3c63@r3c5e)))) (if (r286d@r278c@annotation? r3c4f@e) (r3b96@match-each (r286f@r2790@annotation-expression r3c4f@e) r3c50@p r3c51@m* r3c52@s* r3c53@ae*) '#f)))))) (set! r3b98@match-each+ (lambda (r3c0f@e r3c10@x-pat r3c11@y-pat r3c12@z-pat r3c13@m* r3c14@s* r3c15@ae* r3c16@r) ((letrec ((r3c1f@f (lambda (r3c21@e r3c22@m* r3c23@s* r3c24@ae*) (if (pair? r3c21@e) (call-with-values (lambda () (r3c1f@f (cdr r3c21@e) r3c22@m* r3c23@s* r3c24@ae*)) (lambda (r3c2f@r3c2a r3c30@r3c2c r3c31@r3c2e) ((lambda (r3c35@r r3c36@y-pat r3c37@xr*) (if r3c35@r (if (null? r3c36@y-pat) ((lambda (r3c3b@xr) (if r3c3b@xr (values (cons r3c3b@xr r3c37@xr*) r3c36@y-pat r3c35@r) (values '#f '#f '#f))) (r3ba2@match (car r3c21@e) r3c10@x-pat r3c22@m* r3c23@s* r3c24@ae* '())) (values '() (cdr r3c36@y-pat) (r3ba2@match (car r3c21@e) (car r3c36@y-pat) r3c22@m* r3c23@s* r3c24@ae* r3c35@r))) (values '#f '#f '#f))) r3c31@r3c2e r3c30@r3c2c r3c2f@r3c2a))) (if (r2c96@stx? r3c21@e) (if (r2c4c@top-marked? r3c22@m*) (values '() r3c11@y-pat (r3ba2@match r3c21@e r3c12@z-pat r3c22@m* r3c23@s* r3c24@ae* r3c16@r)) (call-with-values (lambda () (r2cb4@join-wraps r3c22@m* r3c23@s* r3c24@ae* r3c21@e)) (lambda (r3c43@r3c3e r3c44@r3c40 r3c45@r3c42) ((lambda (r3c49@ae* r3c4a@s* r3c4b@m*) (r3c1f@f (r2c9a@stx-expr r3c21@e) r3c4b@m* r3c4a@s* r3c49@ae*)) r3c45@r3c42 r3c44@r3c40 r3c43@r3c3e)))) (if (r286d@r278c@annotation? r3c21@e) (r3c1f@f (r286f@r2790@annotation-expression r3c21@e) r3c22@m* r3c23@s* r3c24@ae*) (values '() r3c11@y-pat (r3ba2@match r3c21@e r3c12@z-pat r3c22@m* r3c23@s* r3c24@ae* r3c16@r)))))))) r3c1f@f) r3c0f@e r3c13@m* r3c14@s* r3c15@ae*))) (set! r3b9a@match-each-any (lambda (r3bf3@e r3bf4@m* r3bf5@s* r3bf6@ae*) (if (pair? r3bf3@e) ((lambda (r3bfb@l) (and r3bfb@l (cons (r3b94@stx^ (car r3bf3@e) r3bf4@m* r3bf5@s* r3bf6@ae*) r3bfb@l))) (r3b9a@match-each-any (cdr r3bf3@e) r3bf4@m* r3bf5@s* r3bf6@ae*)) (if (null? r3bf3@e) '() (if (r2c96@stx? r3bf3@e) (and (not (r2c4c@top-marked? r3bf4@m*)) (call-with-values (lambda () (r2cb4@join-wraps r3bf4@m* r3bf5@s* r3bf6@ae* r3bf3@e)) (lambda (r3c03@r3bfe r3c04@r3c00 r3c05@r3c02) ((lambda (r3c09@ae* r3c0a@s* r3c0b@m*) (r3b9a@match-each-any (r2c9a@stx-expr r3bf3@e) r3c0b@m* r3c0a@s* r3c09@ae*)) r3c05@r3c02 r3c04@r3c00 r3c03@r3bfe)))) (if (r286d@r278c@annotation? r3bf3@e) (r3b9a@match-each-any (r286f@r2790@annotation-expression r3bf3@e) r3bf4@m* r3bf5@s* r3bf6@ae*) '#f)))))) (set! r3b9c@match-empty (lambda (r3bed@p r3bee@r) (if (null? r3bed@p) r3bee@r (if (eq? r3bed@p '_) r3bee@r (if (eq? r3bed@p 'any) (cons '() r3bee@r) (if (pair? r3bed@p) (r3b9c@match-empty (car r3bed@p) (r3b9c@match-empty (cdr r3bed@p) r3bee@r)) (if (eq? r3bed@p 'each-any) (cons '() r3bee@r) ((lambda (r3bf1@t) (if (memv r3bf1@t '(each)) (r3b9c@match-empty (vector-ref r3bed@p '1) r3bee@r) (if (memv r3bf1@t '(each+)) (r3b9c@match-empty (vector-ref r3bed@p '1) (r3b9c@match-empty (reverse (vector-ref r3bed@p '2)) (r3b9c@match-empty (vector-ref r3bed@p '3) r3bee@r))) (if (memv r3bf1@t '(free-id atom)) r3bee@r (if (memv r3bf1@t '(scheme-id atom)) r3bee@r (if (memv r3bf1@t '(vector)) (r3b9c@match-empty (vector-ref r3bed@p '1) r3bee@r) (assertion-violation 'syntax-dispatch '"invalid pattern" r3bed@p))))))) (vector-ref r3bed@p '0))))))))) (set! r3b9e@combine (lambda (r3be9@r* r3bea@r) (if (null? (car r3be9@r*)) r3bea@r (cons (map car r3be9@r*) (r3b9e@combine (map cdr r3be9@r*) r3bea@r))))) (set! r3ba0@match* (lambda (r3bc5@e r3bc6@p r3bc7@m* r3bc8@s* r3bc9@ae* r3bca@r) (if (null? r3bc6@p) (and (null? r3bc5@e) r3bca@r) (if (pair? r3bc6@p) (and (pair? r3bc5@e) (r3ba2@match (car r3bc5@e) (car r3bc6@p) r3bc7@m* r3bc8@s* r3bc9@ae* (r3ba2@match (cdr r3bc5@e) (cdr r3bc6@p) r3bc7@m* r3bc8@s* r3bc9@ae* r3bca@r))) (if (eq? r3bc6@p 'each-any) ((lambda (r3bd1@l) (and r3bd1@l (cons r3bd1@l r3bca@r))) (r3b9a@match-each-any r3bc5@e r3bc7@m* r3bc8@s* r3bc9@ae*)) ((lambda (r3bd3@t) (if (memv r3bd3@t '(each)) (if (null? r3bc5@e) (r3b9c@match-empty (vector-ref r3bc6@p '1) r3bca@r) ((lambda (r3bd5@r*) (and r3bd5@r* (r3b9e@combine r3bd5@r* r3bca@r))) (r3b96@match-each r3bc5@e (vector-ref r3bc6@p '1) r3bc7@m* r3bc8@s* r3bc9@ae*))) (if (memv r3bd3@t '(free-id)) (and (symbol? r3bc5@e) (r2c4c@top-marked? r3bc7@m*) (r2cd6@free-id=? (r3b94@stx^ r3bc5@e r3bc7@m* r3bc8@s* r3bc9@ae*) (vector-ref r3bc6@p '1)) r3bca@r) (if (memv r3bd3@t '(scheme-id)) (and (symbol? r3bc5@e) (r2c4c@top-marked? r3bc7@m*) (r2cd6@free-id=? (r3b94@stx^ r3bc5@e r3bc7@m* r3bc8@s* r3bc9@ae*) (r2e63@scheme-stx (vector-ref r3bc6@p '1))) r3bca@r) (if (memv r3bd3@t '(each+)) (call-with-values (lambda () (r3b98@match-each+ r3bc5@e (vector-ref r3bc6@p '1) (vector-ref r3bc6@p '2) (vector-ref r3bc6@p '3) r3bc7@m* r3bc8@s* r3bc9@ae* r3bca@r)) (lambda (r3bdd@r3bd8 r3bde@r3bda r3bdf@r3bdc) ((lambda (r3be3@r r3be4@y-pat r3be5@xr*) (and r3be3@r (null? r3be4@y-pat) (if (null? r3be5@xr*) (r3b9c@match-empty (vector-ref r3bc6@p '1) r3be3@r) (r3b9e@combine r3be5@xr* r3be3@r)))) r3bdf@r3bdc r3bde@r3bda r3bdd@r3bd8))) (if (memv r3bd3@t '(atom)) (and (fast-equal? (vector-ref r3bc6@p '1) (r2ce2@strip r3bc5@e r3bc7@m*)) r3bca@r) (if (memv r3bd3@t '(vector)) (and (vector? r3bc5@e) (r3ba2@match (vector->list r3bc5@e) (vector-ref r3bc6@p '1) r3bc7@m* r3bc8@s* r3bc9@ae* r3bca@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" r3bc6@p)))))))) (vector-ref r3bc6@p '0))))))) (set! r3ba2@match (lambda (r3ba7@e r3ba8@p r3ba9@m* r3baa@s* r3bab@ae* r3bac@r) (if (not r3bac@r) '#f (if (eq? r3ba8@p '_) r3bac@r (if (eq? r3ba8@p 'any) (cons (r3b94@stx^ r3ba7@e r3ba9@m* r3baa@s* r3bab@ae*) r3bac@r) (if (r2c96@stx? r3ba7@e) (and (not (r2c4c@top-marked? r3ba9@m*)) (call-with-values (lambda () (r2cb4@join-wraps r3ba9@m* r3baa@s* r3bab@ae* r3ba7@e)) (lambda (r3bb9@r3bb4 r3bba@r3bb6 r3bbb@r3bb8) ((lambda (r3bbf@ae* r3bc0@s* r3bc1@m*) (r3ba2@match (r2c9a@stx-expr r3ba7@e) r3ba8@p r3bc1@m* r3bc0@s* r3bbf@ae* r3bac@r)) r3bbb@r3bb8 r3bba@r3bb6 r3bb9@r3bb4)))) (if (r286d@r278c@annotation? r3ba7@e) (r3ba2@match (r286f@r2790@annotation-expression r3ba7@e) r3ba8@p r3ba9@m* r3baa@s* r3bab@ae* r3bac@r) (r3ba0@match* r3ba7@e r3ba8@p r3ba9@m* r3baa@s* r3bab@ae* r3bac@r)))))))) (lambda (r3ba3@e r3ba4@p) (r3ba2@match r3ba3@e r3ba4@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2edb@ellipsis? (lambda (r3c77@x) (and (r2cce@id? r3c77@x) (r2cd6@free-id=? r3c77@x (r2e63@scheme-stx '...))))) (set! r2edd@underscore? (lambda (r3c79@x) (and (r2cce@id? r3c79@x) (r2cd6@free-id=? r3c79@x (r2e63@scheme-stx '_))))) (set! r2edf@verify-literals (lambda (r3c7b@lits r3c7c@expr) (for-each (lambda (r3c7f@x) (if (or (not (r2cce@id? r3c7f@x)) (r2edb@ellipsis? r3c7f@x) (r2edd@underscore? r3c7f@x)) (r2fc2@syntax-violation '#f '"invalid literal" r3c7c@expr r3c7f@x) (void))) r3c7b@lits))) (set! r2ee1@syntax-case-transformer ((lambda () ((lambda (r3c82@build-dispatch-call r3c84@invalid-ids-error r3c86@gen-clause r3c88@gen-syntax-case) (begin (set! r3c82@build-dispatch-call (lambda (r3cf3@pvars r3cf4@expr r3cf5@y r3cf6@r r3cf7@mr) ((lambda (r3cfd@ids r3cfe@levels) ((lambda (r3d01@labels r3d02@new-vars) ((lambda (r3d05@body) (list '(primitive apply) (r2c2a@r2b6a@build-lambda '#f r3d02@new-vars r3d05@body) r3cf5@y)) (r2efb@chi-expr (r2cba@add-subst (r2c89@make-full-rib r3cfd@ids r3d01@labels) r3cf4@expr) (append (map (lambda (r3d07@label r3d08@var r3d09@level) (cons r3d07@label (r2cee@make-binding 'syntax (cons r3d08@var r3d09@level)))) r3d01@labels r3d02@new-vars (map cdr r3cf3@pvars)) r3cf6@r) r3cf7@mr))) (map r2c52@gen-label r3cfd@ids) (map r2c4e@gen-lexical r3cfd@ids))) (map car r3cf3@pvars) (map cdr r3cf3@pvars)))) (set! r3c84@invalid-ids-error (lambda (r3ce7@id* r3ce8@e r3ce9@class) ((letrec ((r3ced@find (lambda (r3cef@id* r3cf0@ok*) (if (null? r3cef@id*) (r2fc2@syntax-violation '#f '"invalid syntax" r3ce8@e) (if (r2cce@id? (car r3cef@id*)) (if (r2cdc@bound-id-member? (car r3cef@id*) r3cf0@ok*) (r2fbe@syntax-error (car r3cef@id*) '"duplicate " r3ce9@class) (r3ced@find (cdr r3cef@id*) (cons (car r3cef@id*) r3cf0@ok*))) (r2fbe@syntax-error (car r3cef@id*) '"invalid " r3ce9@class)))))) r3ced@find) r3ce7@id* '()))) (set! r3c86@gen-clause (lambda (r3cbf@x r3cc0@keys r3cc1@clauses r3cc2@r r3cc3@mr r3cc4@pat r3cc5@fender r3cc6@expr) (call-with-values (lambda () (r2ed7@convert-pattern r3cc4@pat r3cc0@keys)) (lambda (r3cd3@r3cd0 r3cd4@r3cd2) ((lambda (r3cd7@pvars r3cd8@p) (if (not (r2cda@distinct-bound-ids? (map car r3cd7@pvars))) (r3c84@invalid-ids-error (map car r3cd7@pvars) r3cc4@pat '"pattern variable") (if (not (for-all (lambda (r3cdb@x) (not (r2edb@ellipsis? (car r3cdb@x)))) r3cd7@pvars)) (r2fc2@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" r3cc4@pat) ((lambda (r3cdd@y) ((lambda (r3cdf@test) ((lambda (r3ce1@conseq) ((lambda (r3ce3@altern) (list (r2c2a@r2b6a@build-lambda '#f (list r3cdd@y) (list 'if r3cdf@test r3ce1@conseq r3ce3@altern)) (list '(primitive syntax-dispatch) r3cbf@x (list 'quote r3cd8@p)))) (r3c88@gen-syntax-case r3cbf@x r3cc0@keys r3cc1@clauses r3cc2@r r3cc3@mr))) (r3c82@build-dispatch-call r3cd7@pvars r3cc6@expr r3cdd@y r3cc2@r r3cc3@mr))) (if (eq? r3cc5@fender '#t) r3cdd@y ((lambda (r3ce5@call) (list 'if r3cdd@y r3ce5@call (list 'quote '#f))) (r3c82@build-dispatch-call r3cd7@pvars r3cc5@fender r3cdd@y r3cc2@r r3cc3@mr))))) (r2c4e@gen-lexical 'tmp))))) r3cd4@r3cd2 r3cd3@r3cd0))))) (set! r3c88@gen-syntax-case (lambda (r3c9d@x r3c9e@keys r3c9f@clauses r3ca0@r r3ca1@mr) (if (null? r3c9f@clauses) (list '(primitive syntax-error) r3c9d@x) ((lambda (r3ca7@t) ((lambda (r3ca9@ls/false) (if r3ca9@ls/false (apply (lambda (r3cab@pat r3cac@expr) (if (and (r2cce@id? r3cab@pat) (not (r2cdc@bound-id-member? r3cab@pat r3c9e@keys)) (not (r2edb@ellipsis? r3cab@pat))) (if (r2cd6@free-id=? r3cab@pat (r2e63@scheme-stx '_)) (r2efb@chi-expr r3cac@expr r3ca0@r r3ca1@mr) ((lambda (r3caf@lab r3cb0@lex) ((lambda (r3cb3@body) (list (r2c2a@r2b6a@build-lambda '#f (list r3cb0@lex) r3cb3@body) r3c9d@x)) (r2efb@chi-expr (r2cba@add-subst (r2c89@make-full-rib (list r3cab@pat) (list r3caf@lab)) r3cac@expr) (cons (cons r3caf@lab (r2cee@make-binding 'syntax (cons r3cb0@lex '0))) r3ca0@r) r3ca1@mr))) (r2c52@gen-label r3cab@pat) (r2c4e@gen-lexical r3cab@pat))) (r3c86@gen-clause r3c9d@x r3c9e@keys (cdr r3c9f@clauses) r3ca0@r r3ca1@mr r3cab@pat '#t r3cac@expr))) r3ca9@ls/false) ((lambda (r3cb5@t) ((lambda (r3cb7@ls/false) (if r3cb7@ls/false (apply (lambda (r3cb9@pat r3cba@fender r3cbb@expr) (r3c86@gen-clause r3c9d@x r3c9e@keys (cdr r3c9f@clauses) r3ca0@r r3ca1@mr r3cb9@pat r3cba@fender r3cbb@expr)) r3cb7@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3cb5@t))) (r2ed9@syntax-dispatch r3cb5@t '(any any any)))) r3ca7@t))) (r2ed9@syntax-dispatch r3ca7@t '(any any)))) (car r3c9f@clauses))))) (lambda (r3c89@e r3c8a@r r3c8b@mr) ((lambda (r3c8f@t) ((lambda (r3c91@ls/false) (if r3c91@ls/false (apply (lambda (r3c93@expr r3c94@keys r3c95@clauses) (begin (r2edf@verify-literals r3c94@keys r3c89@e) ((lambda (r3c99@x) ((lambda (r3c9b@body) (list (r2c2a@r2b6a@build-lambda '#f (list r3c99@x) r3c9b@body) (r2efb@chi-expr r3c93@expr r3c8a@r r3c8b@mr))) (r3c88@gen-syntax-case r3c99@x r3c94@keys r3c95@clauses r3c8a@r r3c8b@mr))) (r2c4e@gen-lexical 'tmp)))) r3c91@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3c8f@t))) (r2ed9@syntax-dispatch r3c8f@t '(_ any each-any . each-any)))) r3c89@e)))) '#f '#f '#f '#f)))) (set! r2ee3@ellipsis-map (lambda (r3d0d@proc r3d0e@ls . r3d11@ls*) ((lambda (r3d14@who) (begin (set! r3d14@who '...) (begin (if (not (list? r3d0e@ls)) (assertion-violation r3d14@who '"not a list" r3d0e@ls) (void)) (if (not (null? r3d11@ls*)) ((lambda (r3d15@n) (for-each (lambda (r3d17@x) (begin (if (not (list? r3d17@x)) (assertion-violation r3d14@who '"not a list" r3d17@x) (void)) (if (not (= (length r3d17@x) r3d15@n)) (assertion-violation r3d14@who '"length mismatch" r3d0e@ls r3d17@x) (void)))) r3d11@ls*)) (length r3d0e@ls)) (void)) (apply map r3d0d@proc r3d0e@ls r3d11@ls*)))) '#f))) (set! r2ee5@syntax-transformer ((lambda () ((lambda (r3d1a@gen-syntax r3d1c@gen-ref r3d1e@gen-append r3d20@gen-mappend r3d22@gen-map r3d24@gen-cons r3d26@gen-vector r3d28@regen) (begin (set! r3d1a@gen-syntax (lambda (r3d91@src r3d92@e r3d93@r r3d94@maps r3d95@ellipsis? r3d96@vec?) ((lambda (r3d9d@t) ((lambda (r3d9f@ls/false) (if (and r3d9f@ls/false (apply (lambda (r3da1@dots) (r3d95@ellipsis? r3da1@dots)) r3d9f@ls/false)) (apply (lambda (r3da3@dots) (r2fc2@syntax-violation '#f '"misplaced ellipsis in syntax form" r3d91@src)) r3d9f@ls/false) ((lambda (r3da5@t) ((lambda (r3da7@ls/false) (if (and r3da7@ls/false (apply (lambda (r3da9@id) (r2cce@id? r3da9@id)) r3da7@ls/false)) (apply (lambda (r3dab@id) ((lambda (r3dad@label) ((lambda (r3daf@b) ((lambda () (if (eq? (r2cf0@binding-type r3daf@b) 'syntax) (call-with-values (lambda () ((lambda (r3db5@var.lev) (r3d1c@gen-ref r3d91@src (car r3db5@var.lev) (cdr r3db5@var.lev) r3d94@maps)) (r2cf2@binding-value r3daf@b))) (lambda (r3db7@r3db2 r3db8@r3db4) ((lambda (r3dbb@maps r3dbc@var) (values (list 'ref r3dbc@var) r3dbb@maps)) r3db8@r3db4 r3db7@r3db2))) (values (list 'quote r3d92@e) r3d94@maps))))) (r2cec@label->binding r3dad@label r3d93@r))) (r2ce8@id->label r3d92@e))) r3da7@ls/false) ((lambda (r3dbf@t) ((lambda (r3dc1@ls/false) (if (and r3dc1@ls/false (apply (lambda (r3dc3@dots r3dc4@e) (r3d95@ellipsis? r3dc3@dots)) r3dc1@ls/false)) (apply (lambda (r3dc7@dots r3dc8@e) (if r3d96@vec? (r2fc2@syntax-violation '#f '"misplaced ellipsis in syntax form" r3d91@src) (r3d1a@gen-syntax r3d91@src r3dc8@e r3d93@r r3d94@maps (lambda (r3dcb@x) '#f) '#f))) r3dc1@ls/false) ((lambda (r3dcd@t) ((lambda (r3dcf@ls/false) (if (and r3dcf@ls/false (apply (lambda (r3dd1@x r3dd2@dots r3dd3@y) (r3d95@ellipsis? r3dd2@dots)) r3dcf@ls/false)) (apply (lambda (r3dd7@x r3dd8@dots r3dd9@y) ((letrec ((r3ddd@f (lambda (r3ddf@y r3de0@k) ((lambda (r3de3@t) ((lambda (r3de5@ls/false) (if r3de5@ls/false (apply (lambda () (r3de0@k r3d94@maps)) r3de5@ls/false) ((lambda (r3de7@t) ((lambda (r3de9@ls/false) (if (and r3de9@ls/false (apply (lambda (r3deb@dots r3dec@y) (r3d95@ellipsis? r3deb@dots)) r3de9@ls/false)) (apply (lambda (r3def@dots r3df0@y) (r3ddd@f r3df0@y (lambda (r3df3@maps) (call-with-values (lambda () (r3de0@k (cons '() r3df3@maps))) (lambda (r3df9@r3df6 r3dfa@r3df8) ((lambda (r3dfd@maps r3dfe@x) (if (null? (car r3dfd@maps)) (r2fc2@syntax-violation '#f '"extra ellipsis in syntax form" r3d91@src) (values (r3d20@gen-mappend r3dfe@x (car r3dfd@maps)) (cdr r3dfd@maps)))) r3dfa@r3df8 r3df9@r3df6)))))) r3de9@ls/false) ((lambda (r3e01@t) ((lambda (r3e03@ls/false) (if r3e03@ls/false (apply (lambda () (call-with-values (lambda () (r3d1a@gen-syntax r3d91@src r3ddf@y r3d93@r r3d94@maps r3d95@ellipsis? r3d96@vec?)) (lambda (r3e09@r3e06 r3e0a@r3e08) ((lambda (r3e0d@maps r3e0e@y) (call-with-values (lambda () (r3de0@k r3e0d@maps)) (lambda (r3e15@r3e12 r3e16@r3e14) ((lambda (r3e19@maps r3e1a@x) (values (r3d1e@gen-append r3e1a@x r3e0e@y) r3e19@maps)) r3e16@r3e14 r3e15@r3e12)))) r3e0a@r3e08 r3e09@r3e06)))) r3e03@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3e01@t))) (r2ed9@syntax-dispatch r3e01@t '_))) r3de7@t))) (r2ed9@syntax-dispatch r3de7@t '(any . any)))) r3de3@t))) (r2ed9@syntax-dispatch r3de3@t '()))) r3ddf@y)))) r3ddd@f) r3dd9@y (lambda (r3e1d@maps) (call-with-values (lambda () (r3d1a@gen-syntax r3d91@src r3dd7@x r3d93@r (cons '() r3e1d@maps) r3d95@ellipsis? '#f)) (lambda (r3e23@r3e20 r3e24@r3e22) ((lambda (r3e27@maps r3e28@x) (if (null? (car r3e27@maps)) (r2fc2@syntax-violation '#f '"extra ellipsis in syntax form" r3d91@src) (values (r3d22@gen-map r3e28@x (car r3e27@maps)) (cdr r3e27@maps)))) r3e24@r3e22 r3e23@r3e20)))))) r3dcf@ls/false) ((lambda (r3e2b@t) ((lambda (r3e2d@ls/false) (if r3e2d@ls/false (apply (lambda (r3e2f@x r3e30@y) (call-with-values (lambda () (r3d1a@gen-syntax r3d91@src r3e2f@x r3d93@r r3d94@maps r3d95@ellipsis? '#f)) (lambda (r3e37@r3e34 r3e38@r3e36) ((lambda (r3e3b@maps r3e3c@xnew) (call-with-values (lambda () (r3d1a@gen-syntax r3d91@src r3e30@y r3d93@r r3e3b@maps r3d95@ellipsis? r3d96@vec?)) (lambda (r3e43@r3e40 r3e44@r3e42) ((lambda (r3e47@maps r3e48@ynew) (values (r3d24@gen-cons r3d92@e r3e2f@x r3e30@y r3e3c@xnew r3e48@ynew) r3e47@maps)) r3e44@r3e42 r3e43@r3e40)))) r3e38@r3e36 r3e37@r3e34)))) r3e2d@ls/false) ((lambda (r3e4b@t) ((lambda (r3e4d@ls/false) (if r3e4d@ls/false (apply (lambda (r3e4f@ls) (call-with-values (lambda () (r3d1a@gen-syntax r3d91@src r3e4f@ls r3d93@r r3d94@maps r3d95@ellipsis? '#t)) (lambda (r3e55@r3e52 r3e56@r3e54) ((lambda (r3e59@maps r3e5a@lsnew) (values (r3d26@gen-vector r3d92@e r3e4f@ls r3e5a@lsnew) r3e59@maps)) r3e56@r3e54 r3e55@r3e52)))) r3e4d@ls/false) ((lambda (r3e5d@t) ((lambda (r3e5f@ls/false) (if r3e5f@ls/false (apply (lambda () (values (list 'quote r3d92@e) r3d94@maps)) r3e5f@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3e5d@t))) (r2ed9@syntax-dispatch r3e5d@t '_))) r3e4b@t))) (r2ed9@syntax-dispatch r3e4b@t '#(vector each-any)))) r3e2b@t))) (r2ed9@syntax-dispatch r3e2b@t '(any . any)))) r3dcd@t))) (r2ed9@syntax-dispatch r3dcd@t '(any any . any)))) r3dbf@t))) (r2ed9@syntax-dispatch r3dbf@t '(any any)))) r3da5@t))) (r2ed9@syntax-dispatch r3da5@t 'any))) r3d9d@t))) (r2ed9@syntax-dispatch r3d9d@t 'any))) r3d92@e))) (set! r3d1c@gen-ref (lambda (r3d77@src r3d78@var r3d79@level r3d7a@maps) (if (= r3d79@level '0) (values r3d78@var r3d7a@maps) (if (null? r3d7a@maps) (r2fc2@syntax-violation '#f '"missing ellipsis in syntax form" r3d77@src) (call-with-values (lambda () (r3d1c@gen-ref r3d77@src r3d78@var (- r3d79@level '1) (cdr r3d7a@maps))) (lambda (r3d83@r3d80 r3d84@r3d82) ((lambda (r3d87@outer-maps r3d88@outer-var) ((lambda (r3d8b@t) (if r3d8b@t ((lambda (r3d8d@b) (values (cdr r3d8d@b) r3d7a@maps)) r3d8b@t) ((lambda (r3d8f@inner-var) (values r3d8f@inner-var (cons (cons (cons r3d88@outer-var r3d8f@inner-var) (car r3d7a@maps)) r3d87@outer-maps))) (r2c4e@gen-lexical 'tmp)))) (assq r3d88@outer-var (car r3d7a@maps)))) r3d84@r3d82 r3d83@r3d80))))))) (set! r3d1e@gen-append (lambda (r3d73@x r3d74@y) (if (fast-equal? r3d74@y ''()) r3d73@x (list 'append r3d73@x r3d74@y)))) (set! r3d20@gen-mappend (lambda (r3d6f@e r3d70@map-env) (list 'apply '(primitive append) (r3d22@gen-map r3d6f@e r3d70@map-env)))) (set! r3d22@gen-map (lambda (r3d5d@e r3d5e@map-env) ((lambda (r3d61@formals r3d62@actuals) (if (eq? (car r3d5d@e) 'ref) (car r3d62@actuals) (if (for-all (lambda (r3d65@x) (and (eq? (car r3d65@x) 'ref) (memq (cadr r3d65@x) r3d61@formals))) (cdr r3d5d@e)) ((lambda (r3d67@args) (cons 'map (cons (list 'primitive (car r3d5d@e)) r3d67@args))) (map ((lambda (r3d69@r) (lambda (r3d6b@x) (cdr (assq (cadr r3d6b@x) r3d69@r)))) (map cons r3d61@formals r3d62@actuals)) (cdr r3d5d@e))) (cons* 'map (list 'lambda r3d61@formals r3d5d@e) r3d62@actuals)))) (map cdr r3d5e@map-env) (map (lambda (r3d6d@x) (list 'ref (car r3d6d@x))) r3d5e@map-env)))) (set! r3d24@gen-cons (lambda (r3d4d@e r3d4e@x r3d4f@y r3d50@xnew r3d51@ynew) ((lambda (r3d57@t) (if (memv r3d57@t '(quote)) (if (eq? (car r3d50@xnew) 'quote) ((lambda (r3d59@xnew r3d5a@ynew) (if (and (eq? r3d59@xnew r3d4e@x) (eq? r3d5a@ynew r3d4f@y)) (list 'quote r3d4d@e) (list 'quote (cons r3d59@xnew r3d5a@ynew)))) (cadr r3d50@xnew) (cadr r3d51@ynew)) (if (null? (cadr r3d51@ynew)) (list 'list r3d50@xnew) (list 'cons r3d50@xnew r3d51@ynew))) (if (memv r3d57@t '(list)) (cons 'list (cons r3d50@xnew (cdr r3d51@ynew))) (list 'cons r3d50@xnew r3d51@ynew)))) (car r3d51@ynew)))) (set! r3d26@gen-vector (lambda (r3d47@e r3d48@ls r3d49@lsnew) (if (eq? (car r3d49@lsnew) 'quote) (if (eq? (cadr r3d49@lsnew) r3d48@ls) (list 'quote r3d47@e) (list 'quote (list->vector (cadr r3d49@lsnew)))) (if (eq? (car r3d49@lsnew) 'list) (cons 'vector (cdr r3d49@lsnew)) (list 'list->vector r3d49@lsnew))))) (set! r3d28@regen (lambda (r3d41@x) ((lambda (r3d43@t) (if (memv r3d43@t '(ref)) (cadr r3d41@x) (if (memv r3d43@t '(primitive)) (list 'primitive (cadr r3d41@x)) (if (memv r3d43@t '(quote)) (list 'quote (cadr r3d41@x)) (if (memv r3d43@t '(lambda)) (r2c2a@r2b6a@build-lambda '#f (cadr r3d41@x) (r3d28@regen (caddr r3d41@x))) (if (memv r3d43@t '(map)) ((lambda (r3d45@ls) (cons '(primitive ellipsis-map) r3d45@ls)) (map r3d28@regen (cdr r3d41@x))) (cons (list 'primitive (car r3d41@x)) (map r3d28@regen (cdr r3d41@x))))))))) (car r3d41@x)))) (lambda (r3d29@e r3d2a@r r3d2b@mr) ((lambda (r3d2f@t) ((lambda (r3d31@ls/false) (if r3d31@ls/false (apply (lambda (r3d33@x) (call-with-values (lambda () (r3d1a@gen-syntax r3d29@e r3d33@x r3d2a@r '() r2edb@ellipsis? '#f)) (lambda (r3d39@r3d36 r3d3a@r3d38) ((lambda (r3d3d@maps r3d3e@e) (r3d28@regen r3d3e@e)) r3d3a@r3d38 r3d39@r3d36)))) r3d31@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3d2f@t))) (r2ed9@syntax-dispatch r3d2f@t '(_ any)))) r3d29@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2ee7@core-macro-transformer (lambda (r3e61@name) ((lambda (r3e63@t) (if (memv r3e63@t '(quote)) r2e89@quote-transformer (if (memv r3e63@t '(lambda)) r2e8d@lambda-transformer (if (memv r3e63@t '(case-lambda)) r2e8b@case-lambda-transformer (if (memv r3e63@t '(letrec)) r2e71@letrec-transformer (if (memv r3e63@t '(letrec*)) r2e73@letrec*-transformer (if (memv r3e63@t '(if)) r2e81@if-transformer (if (memv r3e63@t '(and)) r2e83@and-transformer (if (memv r3e63@t '(or)) r2e85@or-transformer (if (memv r3e63@t '(foreign-call)) r2ed5@foreign-call-transformer (if (memv r3e63@t '(syntax-case)) r2ee1@syntax-case-transformer (if (memv r3e63@t '(syntax)) r2ee5@syntax-transformer (if (memv r3e63@t '(type-descriptor)) r2e77@type-descriptor-transformer (if (memv r3e63@t '(record-type-descriptor)) r2e79@record-type-descriptor-transformer (if (memv r3e63@t '(record-constructor-descriptor)) r2e7b@record-constructor-descriptor-transformer (if (memv r3e63@t '(fluid-let-syntax)) r2e75@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" r3e61@name))))))))))))))))) r3e61@name))) (set! r2ee9@symbol-macro (lambda (r3e65@x r3e66@set) ((lambda (r3e69@t) ((lambda (r3e6b@ls/false) (if (and r3e6b@ls/false (apply (lambda (r3e6d@name) (and (r2cce@id? r3e6d@name) (memq (r2cd0@id->sym r3e6d@name) r3e66@set))) r3e6b@ls/false)) (apply (lambda (r3e6f@name) (r2e8f@bless (list 'quote r3e6f@name))) r3e6b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3e69@t))) (r2ed9@syntax-dispatch r3e69@t '(_ any)))) r3e65@x))) (set! r2eeb@macro-transformer (lambda (r3e71@x) (if (procedure? r3e71@x) r3e71@x (if (symbol? r3e71@x) ((lambda (r3e73@t) (if (memv r3e73@t '(define-record-type)) r2ecd@define-record-type-macro (if (memv r3e73@t '(define-struct)) r2ecb@define-struct-macro (if (memv r3e73@t '(include)) r2ec1@include-macro (if (memv r3e73@t '(cond)) r2ebd@cond-macro (if (memv r3e73@t '(let)) r2e95@let-macro (if (memv r3e73@t '(do)) r2eb5@do-macro (if (memv r3e73@t '(or)) r2eb9@or-macro (if (memv r3e73@t '(and)) r2ebb@and-macro (if (memv r3e73@t '(let*)) r2eb7@let*-macro (if (memv r3e73@t '(let-values)) r2e97@let-values-macro (if (memv r3e73@t '(let*-values)) r2e99@let*-values-macro (if (memv r3e73@t '(syntax-rules)) r2ec5@syntax-rules-macro (if (memv r3e73@t '(quasiquote)) r2ec7@quasiquote-macro (if (memv r3e73@t '(quasisyntax)) r2ec9@quasisyntax-macro (if (memv r3e73@t '(with-syntax)) r2e91@with-syntax-macro (if (memv r3e73@t '(when)) r2e7d@when-macro (if (memv r3e73@t '(unless)) r2e7f@unless-macro (if (memv r3e73@t '(case)) r2e87@case-macro (if (memv r3e73@t '(identifier-syntax)) r2eb3@identifier-syntax-macro (if (memv r3e73@t '(time)) r2eab@time-macro (if (memv r3e73@t '(delay)) r2ead@delay-macro (if (memv r3e73@t '(assert)) r2eaf@assert-macro (if (memv r3e73@t '(endianness)) r2eb1@endianness-macro (if (memv r3e73@t '(guard)) r2ea7@guard-macro (if (memv r3e73@t '(define-enumeration)) r2ea9@define-enumeration-macro (if (memv r3e73@t '(trace-lambda)) r2e9b@trace-lambda-macro (if (memv r3e73@t '(trace-define)) r2e9d@trace-define-macro (if (memv r3e73@t '(trace-define-syntax)) r2e9f@trace-define-syntax-macro (if (memv r3e73@t '(trace-let-syntax)) r2ea3@trace-let-syntax-macro (if (memv r3e73@t '(trace-letrec-syntax)) r2ea5@trace-letrec-syntax-macro (if (memv r3e73@t '(define-condition-type)) r2ecf@define-condition-type-macro (if (memv r3e73@t '(parameterize)) r2ed3@parameterize-macro (if (memv r3e73@t '(include-into)) r2ec3@include-into-macro (if (memv r3e73@t '(eol-style)) (lambda (r3e75@x) (r2ee9@symbol-macro r3e75@x '(none lf cr crlf nel crnel ls))) (if (memv r3e73@t '(error-handling-mode)) (lambda (r3e77@x) (r2ee9@symbol-macro r3e77@x '(ignore raise replace))) (if (memv r3e73@t '(buffer-mode)) (lambda (r3e79@x) (r2ee9@symbol-macro r3e79@x '(none line block))) (if (memv r3e73@t '(file-options)) r2c41@file-options-macro (if (memv r3e73@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) r2ed1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" r3e71@x)))))))))))))))))))))))))))))))))))))))) r3e71@x) (error 'core-macro-transformer '"BUG: invalid macro" r3e71@x))))) (set! r2eed@local-macro-transformer (lambda (r3e7b@x) (car r3e7b@x))) (set! r2eef@do-macro-call (lambda (r3e7d@transformer r3e7e@expr) ((lambda (r3e81@out) (begin ((letrec ((r3e83@f (lambda (r3e85@x) (if (not (r2c96@stx? r3e85@x)) (if (pair? r3e85@x) (begin (r3e83@f (car r3e85@x)) (r3e83@f (cdr r3e85@x))) (if (vector? r3e85@x) (vector-for-each r3e83@f r3e85@x) (if (symbol? r3e85@x) (r2fc2@syntax-violation '#f '"raw symbol encountered in output of macro" r3e7e@expr r3e85@x) (void)))) (void))))) r3e83@f) r3e81@out) (r2cb8@add-mark (r2cae@gen-mark) r3e81@out r3e7e@expr))) (r3e7d@transformer (r2cb8@add-mark r2cb0@anti-mark r3e7e@expr '#f))))) (set! r2ef1@chi-macro (lambda (r3e87@p r3e88@e) (r2eef@do-macro-call (r2eeb@macro-transformer r3e87@p) r3e88@e))) (set! r2ef3@chi-local-macro (lambda (r3e8b@p r3e8c@e) (r2eef@do-macro-call (r2eed@local-macro-transformer r3e8b@p) r3e8c@e))) (set! r2ef5@chi-global-macro (lambda (r3e8f@p r3e90@e) ((lambda (r3e93@lib r3e94@loc) (begin (r2af3@r2995@visit-library r3e93@lib) ((lambda (r3e97@x) ((lambda (r3e99@transformer) (r2eef@do-macro-call r3e99@transformer r3e90@e)) (if (procedure? r3e97@x) r3e97@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" r3e97@x)))) (symbol-value r3e94@loc)))) (car r3e8f@p) (cdr r3e8f@p)))) (set! r2ef7@chi-expr* (lambda (r3e9b@e* r3e9c@r r3e9d@mr) (if (null? r3e9b@e*) '() ((lambda (r3ea1@e) (cons r3ea1@e (r2ef7@chi-expr* (cdr r3e9b@e*) r3e9c@r r3e9d@mr))) (r2efb@chi-expr (car r3e9b@e*) r3e9c@r r3e9d@mr))))) (set! r2ef9@chi-application (lambda (r3ea3@e r3ea4@r r3ea5@mr) ((lambda (r3ea9@t) ((lambda (r3eab@ls/false) (if r3eab@ls/false (apply (lambda (r3ead@rator r3eae@rands) ((lambda (r3eb1@rator) (cons r3eb1@rator (r2ef7@chi-expr* r3eae@rands r3ea4@r r3ea5@mr))) (r2efb@chi-expr r3ead@rator r3ea4@r r3ea5@mr))) r3eab@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3ea9@t))) (r2ed9@syntax-dispatch r3ea9@t '(any . each-any)))) r3ea3@e))) (set! r2efb@chi-expr (lambda (r3eb3@e r3eb4@r r3eb5@mr) (call-with-values (lambda () (r2cf6@syntax-type r3eb3@e r3eb4@r)) (lambda (r3ebf@r3eba r3ec0@r3ebc r3ec1@r3ebe) ((lambda (r3ec5@kwd r3ec6@value r3ec7@type) ((lambda (r3ecb@t) (if (memv r3ecb@t '(core-macro)) ((lambda (r3ecd@transformer) (r3ecd@transformer r3eb3@e r3eb4@r r3eb5@mr)) (r2ee7@core-macro-transformer r3ec6@value)) (if (memv r3ecb@t '(global)) ((lambda (r3ecf@lib) ((lambda (r3ed1@loc) ((lambda () (begin ((r2f44@inv-collector) r3ecf@lib) r3ed1@loc)))) (cdr r3ec6@value))) (car r3ec6@value)) (if (memv r3ecb@t '(core-prim)) ((lambda (r3ed3@name) (list 'primitive r3ed3@name)) r3ec6@value) (if (memv r3ecb@t '(call)) (r2ef9@chi-application r3eb3@e r3eb4@r r3eb5@mr) (if (memv r3ecb@t '(lexical)) ((lambda (r3ed5@lex) r3ed5@lex) (r2e65@lexical-var r3ec6@value)) (if (memv r3ecb@t '(global-macro global-macro!)) (r2efb@chi-expr (r2ef5@chi-global-macro r3ec6@value r3eb3@e) r3eb4@r r3eb5@mr) (if (memv r3ecb@t '(local-macro local-macro!)) (r2efb@chi-expr (r2ef3@chi-local-macro r3ec6@value r3eb3@e) r3eb4@r r3eb5@mr) (if (memv r3ecb@t '(macro macro!)) (r2efb@chi-expr (r2ef1@chi-macro r3ec6@value r3eb3@e) r3eb4@r r3eb5@mr) (if (memv r3ecb@t '(constant)) ((lambda (r3ed7@datum) (list 'quote r3ed7@datum)) r3ec6@value) (if (memv r3ecb@t '(set!)) (r2efd@chi-set! r3eb3@e r3eb4@r r3eb5@mr) (if (memv r3ecb@t '(begin)) ((lambda (r3ed9@t) ((lambda (r3edb@ls/false) (if r3edb@ls/false (apply (lambda (r3edd@x r3ede@x*) (r2c2d@r2b9c@build-sequence '#f (r2ef7@chi-expr* (cons r3edd@x r3ede@x*) r3eb4@r r3eb5@mr))) r3edb@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3ed9@t))) (r2ed9@syntax-dispatch r3ed9@t '(_ any . each-any)))) r3eb3@e) (if (memv r3ecb@t '(let-syntax letrec-syntax)) ((lambda (r3ee1@t) ((lambda (r3ee3@ls/false) (if (and r3ee3@ls/false (apply (lambda (r3ee5@xlhs* r3ee6@xrhs* r3ee7@xbody r3ee8@xbody*) (if (not (r2cd8@valid-bound-ids? r3ee5@xlhs*)) (r2fc2@syntax-violation '#f '"invalid identifiers" r3eb3@e) (void))) r3ee3@ls/false)) (apply (lambda (r3eed@xlhs* r3eee@xrhs* r3eef@xbody r3ef0@xbody*) ((lambda (r3ef5@xlab*) ((lambda (r3ef7@xrib) ((lambda (r3ef9@xb*) ((lambda () (r2c2d@r2b9c@build-sequence '#f (r2ef7@chi-expr* (map (lambda (r3efb@x) (r2cba@add-subst r3ef7@xrib r3efb@x)) (cons r3eef@xbody r3ef0@xbody*)) (append (map cons r3ef5@xlab* r3ef9@xb*) r3eb4@r) (append (map cons r3ef5@xlab* r3ef9@xb*) r3eb5@mr)))))) (map (lambda (r3efd@x) (r2d0c@make-eval-transformer (r2f36@expand-transformer (if (eq? r3ec7@type 'let-syntax) r3efd@x (r2cba@add-subst r3ef7@xrib r3efd@x)) r3eb5@mr))) r3eee@xrhs*))) (r2c89@make-full-rib r3eed@xlhs* r3ef5@xlab*))) (map r2c52@gen-label r3eed@xlhs*))) r3ee3@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3ee1@t))) (r2ed9@syntax-dispatch r3ee1@t '(_ #(each (any any)) any . each-any)))) r3eb3@e) (if (memv r3ecb@t '(displaced-lexical)) (r2fc2@syntax-violation '#f '"identifier out of context" r3eb3@e) (if (memv r3ecb@t '(syntax)) (r2fc2@syntax-violation '#f '"reference to pattern variable outside a syntax form" r3eb3@e) (if (memv r3ecb@t '(define define-syntax module import library)) (r2fc2@syntax-violation '#f (string-append ((lambda (r3eff@t) (if (memv r3eff@t '(define)) '"a definition" (if (memv r3eff@t '(define-syntax)) '"a define-syntax" (if (memv r3eff@t '(module)) '"a module definition" (if (memv r3eff@t '(library)) '"a library definition" (if (memv r3eff@t '(import)) '"an import declaration" (if (memv r3eff@t '(export)) '"an export declaration" '"a non-expression"))))))) r3ec7@type) '" was found where an expression was expected") r3eb3@e) (if (memv r3ecb@t '(mutable)) (r2fc2@syntax-violation '#f '"attempt to reference an unexportable variable" r3eb3@e) (r2fc2@syntax-violation '#f '"invalid expression" r3eb3@e)))))))))))))))))) r3ec7@type)) r3ec1@r3ebe r3ec0@r3ebc r3ebf@r3eba))))) (set! r2efd@chi-set! (lambda (r3f01@e r3f02@r r3f03@mr) ((lambda (r3f07@t) ((lambda (r3f09@ls/false) (if (and r3f09@ls/false (apply (lambda (r3f0b@x r3f0c@v) (r2cce@id? r3f0b@x)) r3f09@ls/false)) (apply (lambda (r3f0f@x r3f10@v) (call-with-values (lambda () (r2cf6@syntax-type r3f0f@x r3f02@r)) (lambda (r3f19@r3f14 r3f1a@r3f16 r3f1b@r3f18) ((lambda (r3f1f@kwd r3f20@value r3f21@type) ((lambda (r3f25@t) (if (memv r3f25@t '(lexical)) (begin (r2e69@set-lexical-mutable! r3f20@value '#t) (list 'set! (r2e65@lexical-var r3f20@value) (r2efb@chi-expr r3f10@v r3f02@r r3f03@mr))) (if (memv r3f25@t '(core-prim)) (r2fc2@syntax-violation '#f '"cannot modify imported core primitive" r3f01@e) (if (memv r3f25@t '(global)) (r2fc2@syntax-violation '#f '"attempt to modify imported binding" r3f01@e) (if (memv r3f25@t '(global-macro!)) (r2efb@chi-expr (r2ef5@chi-global-macro r3f20@value r3f01@e) r3f02@r r3f03@mr) (if (memv r3f25@t '(local-macro!)) (r2efb@chi-expr (r2ef3@chi-local-macro r3f20@value r3f01@e) r3f02@r r3f03@mr) (if (memv r3f25@t '(mutable)) (r2fc2@syntax-violation '#f '"attempt to assign to an unexportable variable" r3f01@e) (r2fc2@syntax-violation '#f '"invalid syntax" r3f01@e)))))))) r3f21@type)) r3f1b@r3f18 r3f1a@r3f16 r3f19@r3f14)))) r3f09@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3f07@t))) (r2ed9@syntax-dispatch r3f07@t '(_ any any)))) r3f01@e))) (set! r2eff@verify-formals (lambda (r3f27@fmls r3f28@stx) ((lambda (r3f2b@t) ((lambda (r3f2d@ls/false) (if r3f2d@ls/false (apply (lambda (r3f2f@x*) (if (not (r2cd8@valid-bound-ids? r3f2f@x*)) (r2e93@invalid-fmls-error r3f28@stx r3f27@fmls) (void))) r3f2d@ls/false) ((lambda (r3f31@t) ((lambda (r3f33@ls/false) (if r3f33@ls/false (apply (lambda (r3f35@x* r3f36@x) (if (not (r2cd8@valid-bound-ids? (cons r3f36@x r3f35@x*))) (r2e93@invalid-fmls-error r3f28@stx r3f27@fmls) (void))) r3f33@ls/false) ((lambda (r3f39@t) ((lambda (r3f3b@ls/false) (if r3f3b@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid syntax" r3f28@stx)) r3f3b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3f39@t))) (r2ed9@syntax-dispatch r3f39@t '_))) r3f31@t))) (r2ed9@syntax-dispatch r3f31@t '#(each+ any () any)))) r3f2b@t))) (r2ed9@syntax-dispatch r3f2b@t 'each-any))) r3f27@fmls))) (set! r2f01@chi-lambda-clause (lambda (r3f3d@stx r3f3e@fmls r3f3f@body* r3f40@r r3f41@mr) ((lambda (r3f47@t) ((lambda (r3f49@ls/false) (if r3f49@ls/false (apply (lambda (r3f4b@x*) (begin (r2eff@verify-formals r3f3e@fmls r3f3d@stx) ((lambda (r3f4d@lex* r3f4e@lab*) (values r3f4d@lex* (r2f11@chi-internal (r2cba@add-subst (r2c89@make-full-rib r3f4b@x* r3f4e@lab*) r3f3f@body*) (r2e6d@add-lexicals r3f4e@lab* r3f4d@lex* r3f40@r) r3f41@mr))) (map r2c4e@gen-lexical r3f4b@x*) (map r2c52@gen-label r3f4b@x*)))) r3f49@ls/false) ((lambda (r3f51@t) ((lambda (r3f53@ls/false) (if r3f53@ls/false (apply (lambda (r3f55@x* r3f56@x) (begin (r2eff@verify-formals r3f3e@fmls r3f3d@stx) ((lambda (r3f59@lex* r3f5a@lab* r3f5b@lex r3f5c@lab) (values (append r3f59@lex* r3f5b@lex) (r2f11@chi-internal (r2cba@add-subst (r2c89@make-full-rib (cons r3f56@x r3f55@x*) (cons r3f5c@lab r3f5a@lab*)) r3f3f@body*) (r2e6d@add-lexicals (cons r3f5c@lab r3f5a@lab*) (cons r3f5b@lex r3f59@lex*) r3f40@r) r3f41@mr))) (map r2c4e@gen-lexical r3f55@x*) (map r2c52@gen-label r3f55@x*) (r2c4e@gen-lexical r3f56@x) (r2c52@gen-label r3f56@x)))) r3f53@ls/false) ((lambda (r3f61@t) ((lambda (r3f63@ls/false) (if r3f63@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid syntax" r3f3e@fmls)) r3f63@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r3f61@t))) (r2ed9@syntax-dispatch r3f61@t '_))) r3f51@t))) (r2ed9@syntax-dispatch r3f51@t '#(each+ any () any)))) r3f47@t))) (r2ed9@syntax-dispatch r3f47@t 'each-any))) r3f3e@fmls))) (set! r2f03@chi-lambda-clause* (lambda (r3f65@stx r3f66@fmls* r3f67@body** r3f68@r r3f69@mr) (if (null? r3f66@fmls*) (values '() '()) (call-with-values (lambda () (r2f01@chi-lambda-clause r3f65@stx (car r3f66@fmls*) (car r3f67@body**) r3f68@r r3f69@mr)) (lambda (r3f73@r3f70 r3f74@r3f72) ((lambda (r3f77@b r3f78@a) (call-with-values (lambda () (r2f03@chi-lambda-clause* r3f65@stx (cdr r3f66@fmls*) (cdr r3f67@body**) r3f68@r r3f69@mr)) (lambda (r3f7f@r3f7c r3f80@r3f7e) ((lambda (r3f83@b* r3f84@a*) (values (cons r3f78@a r3f84@a*) (cons r3f77@b r3f83@b*))) r3f80@r3f7e r3f7f@r3f7c)))) r3f74@r3f72 r3f73@r3f70)))))) (set! r2f05@chi-defun (lambda (r3f87@x r3f88@r r3f89@mr) ((lambda (r3f8d@fmls r3f8e@body*) (call-with-values (lambda () (r2f01@chi-lambda-clause r3f8d@fmls r3f8d@fmls r3f8e@body* r3f88@r r3f89@mr)) (lambda (r3f95@r3f92 r3f96@r3f94) ((lambda (r3f99@body r3f9a@fmls) (r2c2a@r2b6a@build-lambda '#f r3f9a@fmls r3f99@body)) r3f96@r3f94 r3f95@r3f92)))) (car r3f87@x) (cdr r3f87@x)))) (set! r2f07@chi-rhs (lambda (r3f9d@rhs r3f9e@r r3f9f@mr) ((lambda (r3fa3@t) (if (memv r3fa3@t '(defun)) (r2f05@chi-defun (cdr r3f9d@rhs) r3f9e@r r3f9f@mr) (if (memv r3fa3@t '(expr)) ((lambda (r3fa5@expr) (r2efb@chi-expr r3fa5@expr r3f9e@r r3f9f@mr)) (cdr r3f9d@rhs)) (if (memv r3fa3@t '(top-expr)) ((lambda (r3fa7@expr) (r2c2d@r2b9c@build-sequence '#f (list (r2efb@chi-expr r3fa7@expr r3f9e@r r3f9f@mr) (r2c2e@r2b9e@build-void)))) (cdr r3f9d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" r3f9d@rhs))))) (car r3f9d@rhs)))) (set! r2f09@expand-interaction-rhs*/init* (lambda (r3fa9@lhs* r3faa@rhs* r3fab@init* r3fac@r r3fad@mr) ((letrec ((r3fb3@f (lambda (r3fb5@lhs* r3fb6@rhs*) (if (null? r3fb5@lhs*) (map (lambda (r3fb9@x) (r2efb@chi-expr r3fb9@x r3fac@r r3fad@mr)) r3fab@init*) ((lambda (r3fbb@lhs r3fbc@rhs) ((lambda (r3fbf@t) (if (memv r3fbf@t '(defun)) ((lambda (r3fc1@rhs) (cons (list 'set! r3fbb@lhs r3fc1@rhs) (r3fb3@f (cdr r3fb5@lhs*) (cdr r3fb6@rhs*)))) (r2f05@chi-defun (cdr r3fbc@rhs) r3fac@r r3fad@mr)) (if (memv r3fbf@t '(expr)) ((lambda (r3fc3@rhs) (cons (list 'set! r3fbb@lhs r3fc3@rhs) (r3fb3@f (cdr r3fb5@lhs*) (cdr r3fb6@rhs*)))) (r2efb@chi-expr (cdr r3fbc@rhs) r3fac@r r3fad@mr)) (if (memv r3fbf@t '(top-expr)) ((lambda (r3fc5@e) (cons r3fc5@e (r3fb3@f (cdr r3fb5@lhs*) (cdr r3fb6@rhs*)))) (r2efb@chi-expr (cdr r3fbc@rhs) r3fac@r r3fad@mr)) (error 'expand-interaction '"invallid" r3fbc@rhs))))) (car r3fbc@rhs))) (car r3fb5@lhs*) (car r3fb6@rhs*)))))) r3fb3@f) r3fa9@lhs* r3faa@rhs*))) (set! r2f0b@chi-rhs* (lambda (r3fc7@rhs* r3fc8@r r3fc9@mr) ((letrec ((r3fcd@f (lambda (r3fcf@ls) (if (null? r3fcf@ls) '() ((lambda (r3fd1@a) (cons r3fd1@a (r3fcd@f (cdr r3fcf@ls)))) (r2f07@chi-rhs (car r3fcf@ls) r3fc8@r r3fc9@mr)))))) r3fcd@f) r3fc7@rhs*))) (set! r2f0d@find-bound=? (lambda (r3fd3@x r3fd4@lhs* r3fd5@rhs*) (if (null? r3fd4@lhs*) '#f (if (r2cd4@bound-id=? r3fd3@x (car r3fd4@lhs*)) (car r3fd5@rhs*) (r2f0d@find-bound=? r3fd3@x (cdr r3fd4@lhs*) (cdr r3fd5@rhs*)))))) (set! r2f0f@find-dups (lambda (r3fd9@ls) ((letrec ((r3fdb@f (lambda (r3fdd@ls r3fde@dups) (if (null? r3fdd@ls) r3fde@dups ((lambda (r3fe1@t) (if r3fe1@t ((lambda (r3fe3@x) (r3fdb@f (cdr r3fdd@ls) (cons (list (car r3fdd@ls) r3fe3@x) r3fde@dups))) r3fe1@t) (r3fdb@f (cdr r3fdd@ls) r3fde@dups))) (r2f0d@find-bound=? (car r3fdd@ls) (cdr r3fdd@ls) (cdr r3fdd@ls))))))) r3fdb@f) r3fd9@ls '()))) (set! r2f11@chi-internal (lambda (r3fe5@e* r3fe6@r r3fe7@mr) ((lambda (r3feb@rib) (call-with-values (lambda () (r2f34@chi-body* (map (lambda (r3ffd@x) (r2cba@add-subst r3feb@rib r3ffd@x)) (r2ccc@syntax->list r3fe5@e*)) r3fe6@r r3fe7@mr '() '() '() '() '() r3feb@rib '#f)) (lambda (r3fff@r3fee r4000@r3ff0 r4001@r3ff2 r4002@r3ff4 r4003@r3ff6 r4004@r3ff8 r4005@r3ffa r4006@r3ffc) ((lambda (r400f@_exp* r4010@kwd* r4011@mod** r4012@rhs* r4013@lex* r4014@mr r4015@r r4016@e*) (begin (if (null? r4016@e*) (r2fc2@syntax-violation '#f '"no expression in body" r4016@e*) (void)) ((lambda (r401f@init*) ((lambda (r4021@rhs*) ((lambda () (r2c30@r2ba2@build-letrec* '#f (reverse r4013@lex*) (reverse r4021@rhs*) (r2c2d@r2b9c@build-sequence '#f r401f@init*))))) (r2f0b@chi-rhs* r4012@rhs* r4015@r r4014@mr))) (r2ef7@chi-expr* (append (apply append (reverse r4011@mod**)) r4016@e*) r4015@r r4014@mr)))) r4006@r3ffc r4005@r3ffa r4004@r3ff8 r4003@r3ff6 r4002@r3ff4 r4001@r3ff2 r4000@r3ff0 r3fff@r3fee)))) (r2c7d@make-empty-rib)))) (set! r2f13@parse-module (lambda (r4023@e) ((lambda (r4025@t) ((lambda (r4027@ls/false) (if r4027@ls/false (apply (lambda (r4029@export* r402a@b*) (begin (if (not (for-all r2cce@id? r4029@export*)) (r2fc2@syntax-violation '#f '"module exports must be identifiers" r4023@e) (void)) (values '#f (list->vector r4029@export*) r402a@b*))) r4027@ls/false) ((lambda (r402d@t) ((lambda (r402f@ls/false) (if r402f@ls/false (apply (lambda (r4031@name r4032@export* r4033@b*) (begin (if (not (r2cce@id? r4031@name)) (r2fc2@syntax-violation '#f '"module name must be an identifier" r4023@e) (void)) (if (not (for-all r2cce@id? r4032@export*)) (r2fc2@syntax-violation '#f '"module exports must be identifiers" r4023@e) (void)) (values r4031@name (list->vector r4032@export*) r4033@b*))) r402f@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r402d@t))) (r2ed9@syntax-dispatch r402d@t '(_ any each-any . each-any)))) r4025@t))) (r2ed9@syntax-dispatch r4025@t '(_ each-any . each-any)))) r4023@e))) (set! r2f19@r2f14 (make-record-type-descriptor 'module-interface '#f 'r2f17 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! r2f1b@r2f16 '#f) (set! r2f1d@r2f15 (make-record-constructor-descriptor r2f19@r2f14 '#f r2f1b@r2f16)) (set! r2f20@module-interface? (record-predicate r2f19@r2f14)) (set! r2f22@make-module-interface (record-constructor r2f1d@r2f15)) (set! r2f24@module-interface-first-mark (record-accessor r2f19@r2f14 '0)) (set! r2f26@module-interface-exp-id-vec (record-accessor r2f19@r2f14 '1)) (set! r2f28@module-interface-exp-lab-vec (record-accessor r2f19@r2f14 '2)) (set! r2f2a@set-module-interface-first-mark! (record-mutator r2f19@r2f14 '0)) (set! r2f2c@set-module-interface-exp-id-vec! (record-mutator r2f19@r2f14 '1)) (set! r2f2e@set-module-interface-exp-lab-vec! (record-mutator r2f19@r2f14 '2)) (set! r2f30@module-interface-exp-id* (lambda (r4037@iface r4038@id) ((lambda (r403c@diff-marks) (begin (set! r403c@diff-marks (lambda (r4043@ls r4044@x) (begin (if (null? r4043@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (r4047@a) (if (eq? r4047@a r4044@x) '() (cons r4047@a (r403c@diff-marks (cdr r4043@ls) r4044@x)))) (car r4043@ls))))) ((lambda (r403d@diff r403e@id-vec) (if (null? r403d@diff) r403e@id-vec (vector-map (lambda (r4041@x) (r2c98@make-stx (r2c9a@stx-expr r4041@x) (append r403d@diff (r2c9c@stx-mark* r4041@x)) '() '())) r403e@id-vec))) (r403c@diff-marks (r2c9c@stx-mark* r4038@id) (r2f24@module-interface-first-mark r4037@iface)) (r2f26@module-interface-exp-id-vec r4037@iface)))) '#f))) (set! r2f32@chi-internal-module (lambda (r4049@e r404a@r r404b@mr r404c@lex* r404d@rhs* r404e@mod** r404f@kwd*) (call-with-values (lambda () (r2f13@parse-module r4049@e)) (lambda (r405d@r4058 r405e@r405a r405f@r405c) ((lambda (r4063@e* r4064@exp-id* r4065@name) ((lambda (r4069@rib) ((lambda (r406b@e*) ((lambda () (call-with-values (lambda () (r2f34@chi-body* r406b@e* r404a@r r404b@mr r404c@lex* r404d@rhs* r404e@mod** r404f@kwd* '() r4069@rib '#f)) (lambda (r407d@r406e r407e@r4070 r407f@r4072 r4080@r4074 r4081@r4076 r4082@r4078 r4083@r407a r4084@r407c) ((lambda (r408d@_exp* r408e@kwd* r408f@mod** r4090@rhs* r4091@lex* r4092@mr r4093@r r4094@e*) ((lambda (r409d@exp-lab* r409e@mod**) (if (not r4065@name) (values r4091@lex* r4090@rhs* r4064@exp-id* r409d@exp-lab* r4093@r r4092@mr r409e@mod** r408e@kwd*) ((lambda (r40a1@lab r40a2@iface) (values r4091@lex* r4090@rhs* (vector r4065@name) (vector r40a1@lab) (cons (cons r40a1@lab (cons '$module r40a2@iface)) r4093@r) (cons (cons r40a1@lab (cons '$module r40a2@iface)) r4092@mr) r409e@mod** r408e@kwd*)) (r2c52@gen-label 'module) (r2f22@make-module-interface (car (r2c9c@stx-mark* r4065@name)) (vector-map (lambda (r40a5@x) (r2c98@make-stx (r2c9a@stx-expr r40a5@x) (r2c9c@stx-mark* r40a5@x) '() '())) r4064@exp-id*) r409d@exp-lab*)))) (vector-map (lambda (r40a7@x) (or (r2ce8@id->label (r2c98@make-stx (r2cd0@id->sym r40a7@x) (r2c9c@stx-mark* r40a7@x) (list r4069@rib) '())) (r2fc2@syntax-violation '#f '"cannot find module export" r40a7@x))) r4064@exp-id*) (cons r4094@e* r408f@mod**))) r4084@r407c r4083@r407a r4082@r4078 r4081@r4076 r4080@r4074 r407f@r4072 r407e@r4070 r407d@r406e)))))) (map (lambda (r40a9@x) (r2cba@add-subst r4069@rib r40a9@x)) (r2ccc@syntax->list r4063@e*)))) (r2c7d@make-empty-rib))) r405f@r405c r405e@r405a r405d@r4058))))) (set! r2f34@chi-body* (lambda (r40ab@e* r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40b1@kwd* r40b2@exp* r40b3@rib r40b4@top?) (if (null? r40ab@e*) (values r40ab@e* r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40b1@kwd* r40b2@exp*) ((lambda (r40bf@e) (call-with-values (lambda () (r2cf6@syntax-type r40bf@e r40ac@r)) (lambda (r40c7@r40c2 r40c8@r40c4 r40c9@r40c6) ((lambda (r40cd@kwd r40ce@value r40cf@type) ((lambda (r40d3@kwd*) ((lambda (r40d5@t) (if (memv r40d5@t '(define)) (call-with-values (lambda () (r2e5d@parse-define r40bf@e)) (lambda (r40db@r40d8 r40dc@r40da) ((lambda (r40df@rhs r40e0@id) (begin (if (r2cdc@bound-id-member? r40e0@id r40d3@kwd*) (r2fc2@syntax-violation '#f '"cannot redefine keyword" r40bf@e) (void)) (call-with-values (lambda () (r2c56@gen-define-label+loc r40e0@id r40b3@rib)) (lambda (r40e7@r40e4 r40e8@r40e6) ((lambda (r40eb@lex r40ec@lab) (begin (r2c7f@extend-rib! r40b3@rib r40e0@id r40ec@lab) (r2f34@chi-body* (cdr r40ab@e*) (r2e6b@add-lexical r40ec@lab r40eb@lex r40ac@r) r40ad@mr (cons r40eb@lex r40ae@lex*) (cons r40df@rhs r40af@rhs*) r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?))) r40e8@r40e6 r40e7@r40e4))))) r40dc@r40da r40db@r40d8))) (if (memv r40d5@t '(define-syntax)) (call-with-values (lambda () (r2e5f@parse-define-syntax r40bf@e)) (lambda (r40f3@r40f0 r40f4@r40f2) ((lambda (r40f7@rhs r40f8@id) (begin (if (r2cdc@bound-id-member? r40f8@id r40d3@kwd*) (r2fc2@syntax-violation '#f '"cannot redefine keyword" r40bf@e) (void)) ((lambda (r40fb@lab r40fc@expanded-rhs) (begin (r2c7f@extend-rib! r40b3@rib r40f8@id r40fb@lab) ((lambda (r40ff@b) (r2f34@chi-body* (cdr r40ab@e*) (cons (cons r40fb@lab r40ff@b) r40ac@r) (cons (cons r40fb@lab r40ff@b) r40ad@mr) r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?)) (r2d0c@make-eval-transformer r40fc@expanded-rhs)))) (r2c58@gen-define-label r40f8@id r40b3@rib) (r2f36@expand-transformer r40f7@rhs r40ad@mr)))) r40f4@r40f2 r40f3@r40f0))) (if (memv r40d5@t '(let-syntax letrec-syntax)) ((lambda (r4101@t) ((lambda (r4103@ls/false) (if (and r4103@ls/false (apply (lambda (r4105@xlhs* r4106@xrhs* r4107@xbody*) (if (not (r2cd8@valid-bound-ids? r4105@xlhs*)) (r2fc2@syntax-violation '#f '"invalid identifiers" r40bf@e) (void))) r4103@ls/false)) (apply (lambda (r410b@xlhs* r410c@xrhs* r410d@xbody*) ((lambda (r4111@xlab*) ((lambda (r4113@xrib) ((lambda (r4115@xb*) ((lambda () (r2f34@chi-body* (append (map (lambda (r4117@x) (r2cba@add-subst r4113@xrib r4117@x)) r410d@xbody*) (cdr r40ab@e*)) (append (map cons r4111@xlab* r4115@xb*) r40ac@r) (append (map cons r4111@xlab* r4115@xb*) r40ad@mr) r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?)))) (map (lambda (r4119@x) (r2d0c@make-eval-transformer (r2f36@expand-transformer (if (eq? r40cf@type 'let-syntax) r4119@x (r2cba@add-subst r4113@xrib r4119@x)) r40ad@mr))) r410c@xrhs*))) (r2c89@make-full-rib r410b@xlhs* r4111@xlab*))) (map r2c52@gen-label r410b@xlhs*))) r4103@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4101@t))) (r2ed9@syntax-dispatch r4101@t '(_ #(each (any any)) . each-any)))) r40bf@e) (if (memv r40d5@t '(begin)) ((lambda (r411b@t) ((lambda (r411d@ls/false) (if r411d@ls/false (apply (lambda (r411f@x*) (r2f34@chi-body* (append r411f@x* (cdr r40ab@e*)) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?)) r411d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r411b@t))) (r2ed9@syntax-dispatch r411b@t '(_ . each-any)))) r40bf@e) (if (memv r40d5@t '(global-macro global-macro!)) (r2f34@chi-body* (cons (r2cba@add-subst r40b3@rib (r2ef5@chi-global-macro r40ce@value r40bf@e)) (cdr r40ab@e*)) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?) (if (memv r40d5@t '(local-macro local-macro!)) (r2f34@chi-body* (cons (r2cba@add-subst r40b3@rib (r2ef3@chi-local-macro r40ce@value r40bf@e)) (cdr r40ab@e*)) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?) (if (memv r40d5@t '(macro macro!)) (r2f34@chi-body* (cons (r2cba@add-subst r40b3@rib (r2ef1@chi-macro r40ce@value r40bf@e)) (cdr r40ab@e*)) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?) (if (memv r40d5@t '(module)) (call-with-values (lambda () (r2f32@chi-internal-module r40bf@e r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd*)) (lambda (r4131@r4122 r4132@r4124 r4133@r4126 r4134@r4128 r4135@r412a r4136@r412c r4137@r412e r4138@r4130) ((lambda (r4141@kwd* r4142@mod** r4143@mr r4144@r r4145@m-exp-lab* r4146@m-exp-id* r4147@rhs* r4148@lex*) (begin (vector-for-each (lambda (r4151@id r4152@lab) (r2c7f@extend-rib! r40b3@rib r4151@id r4152@lab)) r4146@m-exp-id* r4145@m-exp-lab*) (r2f34@chi-body* (cdr r40ab@e*) r4144@r r4143@mr r4148@lex* r4147@rhs* r4142@mod** r4141@kwd* r40b2@exp* r40b3@rib r40b4@top?))) r4138@r4130 r4137@r412e r4136@r412c r4135@r412a r4134@r4128 r4133@r4126 r4132@r4124 r4131@r4122))) (if (memv r40d5@t '(library)) (begin (r2fa4@library-expander (r2ce4@stx->datum r40bf@e)) (r2f34@chi-body* (cdr r40ab@e*) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?)) (if (memv r40d5@t '(export)) ((lambda (r4155@t) ((lambda (r4157@ls/false) (if r4157@ls/false (apply (lambda (r4159@exp-decl*) (r2f34@chi-body* (cdr r40ab@e*) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* (append r4159@exp-decl* r40b2@exp*) r40b3@rib r40b4@top?)) r4157@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4155@t))) (r2ed9@syntax-dispatch r4155@t '(_ . each-any)))) r40bf@e) (if (memv r40d5@t '(import)) ((lambda () ((lambda (r415c@module-import? r415e@module-import r4160@library-import) (begin (set! r415c@module-import? (lambda (r41af@e) ((lambda (r41b1@t) ((lambda (r41b3@ls/false) (if (and r41b3@ls/false (apply (lambda (r41b5@id) (r2cce@id? r41b5@id)) r41b3@ls/false)) (apply (lambda (r41b7@id) '#t) r41b3@ls/false) ((lambda (r41b9@t) ((lambda (r41bb@ls/false) (if r41bb@ls/false (apply (lambda (r41bd@imp*) '#f) r41bb@ls/false) ((lambda (r41bf@t) ((lambda (r41c1@ls/false) (if r41c1@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"malformed import form" r41af@e)) r41c1@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r41bf@t))) (r2ed9@syntax-dispatch r41bf@t '_))) r41b9@t))) (r2ed9@syntax-dispatch r41b9@t '(_ . each-any)))) r41b1@t))) (r2ed9@syntax-dispatch r41b1@t '(_ any)))) r41af@e))) (set! r415e@module-import (lambda (r418d@e r418e@r) ((lambda (r4191@t) ((lambda (r4193@ls/false) (if (and r4193@ls/false (apply (lambda (r4195@id) (r2cce@id? r4195@id)) r4193@ls/false)) (apply (lambda (r4197@id) (call-with-values (lambda () (r2cf6@syntax-type r4197@id r418e@r)) (lambda (r419f@r419a r41a0@r419c r41a1@r419e) ((lambda (r41a5@kwd r41a6@value r41a7@type) ((lambda (r41ab@t) (if (memv r41ab@t '($module)) ((lambda (r41ad@iface) (values (r2f30@module-interface-exp-id* r41ad@iface r4197@id) (r2f28@module-interface-exp-lab-vec r41ad@iface))) r41a6@value) (r2fc2@syntax-violation '#f '"invalid import" r418d@e))) r41a7@type)) r41a1@r419e r41a0@r419c r419f@r419a)))) r4193@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4191@t))) (r2ed9@syntax-dispatch r4191@t '(_ any)))) r418d@e))) (set! r4160@library-import (lambda (r4171@e) ((lambda (r4173@t) ((lambda (r4175@ls/false) (if r4175@ls/false (apply (lambda (r4177@ctxt r4178@imp*) (call-with-values (lambda () (r2f3e@parse-import-spec* (r2fc8@syntax->datum r4178@imp*))) (lambda (r417f@r417c r4180@r417e) ((lambda (r4183@subst-labels r4184@subst-names) (values (vector-map (lambda (r4187@name) (r2cac@datum->stx r4177@ctxt r4187@name)) r4184@subst-names) r4183@subst-labels)) r4180@r417e r417f@r417c)))) r4175@ls/false) ((lambda (r4189@t) ((lambda (r418b@ls/false) (if r418b@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid import form" r4171@e)) r418b@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4189@t))) (r2ed9@syntax-dispatch r4189@t '_))) r4173@t))) (r2ed9@syntax-dispatch r4173@t '(any . each-any)))) r4171@e))) (begin (call-with-values (lambda () (if (r415c@module-import? r40bf@e) (r415e@module-import r40bf@e r40ac@r) (r4160@library-import r40bf@e))) (lambda (r4165@r4162 r4166@r4164) ((lambda (r4169@lab* r416a@id*) (vector-for-each (lambda (r416d@id r416e@lab) (r2c7f@extend-rib! r40b3@rib r416d@id r416e@lab)) r416a@id* r4169@lab*)) r4166@r4164 r4165@r4162))) (r2f34@chi-body* (cdr r40ab@e*) r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?)))) '#f '#f '#f))) (if r40b4@top? (r2f34@chi-body* (cdr r40ab@e*) r40ac@r r40ad@mr (cons (r2c4e@gen-lexical 'dummy) r40ae@lex*) (cons (cons 'top-expr r40bf@e) r40af@rhs*) r40b0@mod** r40d3@kwd* r40b2@exp* r40b3@rib r40b4@top?) (values r40ab@e* r40ac@r r40ad@mr r40ae@lex* r40af@rhs* r40b0@mod** r40d3@kwd* r40b2@exp*)))))))))))))) r40cf@type)) (if (r2cce@id? r40cd@kwd) (cons r40cd@kwd r40b1@kwd*) r40b1@kwd*))) r40c9@r40c6 r40c8@r40c4 r40c7@r40c2)))) (car r40ab@e*))))) (set! r2f36@expand-transformer (lambda (r41c3@expr r41c4@r) ((lambda (r41c7@rtc) ((lambda (r41c9@expanded-rhs) (begin (for-each ((lambda (r41cb@mark-visit) (lambda (r41cd@x) (begin (r2af2@r2993@invoke-library r41cd@x) (r41cb@mark-visit r41cd@x)))) (r2f46@vis-collector)) (r41c7@rtc)) r41c9@expanded-rhs)) ((lambda (r41d7@r41d0 r41d8@r41d2 r41d9@r41d4 r41da@r41d6) ((lambda (r41df@swap) (dynamic-wind r41df@swap (lambda () (r2efb@chi-expr r41c3@expr r41c4@r r41c4@r)) r41df@swap)) (lambda () (begin ((lambda (r41e1@t) (begin (r41d7@r41d0 r41d9@r41d4) (set! r41d9@r41d4 r41e1@t))) (r41d7@r41d0)) ((lambda (r41e3@t) (begin (r41d8@r41d2 r41da@r41d6) (set! r41da@r41d6 r41e3@t))) (r41d8@r41d2)))))) r2f44@inv-collector r2f46@vis-collector r41c7@rtc (lambda (r41e5@x) (values))))) (r2f42@make-collector)))) (set! r2f38@parse-exports (lambda (r41e7@exp*) ((letrec ((r41e9@f (lambda (r41eb@exp* r41ec@int* r41ed@ext*) (if (null? r41eb@exp*) (begin (if (not (r2cd8@valid-bound-ids? r41ed@ext*)) (r2fc2@syntax-violation 'export '"invalid exports" (r2f0f@find-dups r41ed@ext*)) (void)) (values (map r2fc8@syntax->datum r41ed@ext*) r41ec@int*)) ((lambda (r41f1@t) ((lambda (r41f3@ls/false) (if r41f3@ls/false (apply (lambda (r41f5@rename r41f6@i* r41f7@e*) (begin (if (not (and (eq? (r2fc8@syntax->datum r41f5@rename) 'rename) (for-all r2cce@id? r41f6@i*) (for-all r2cce@id? r41f7@e*))) (r2fc2@syntax-violation 'export '"invalid export specifier" (car r41eb@exp*)) (void)) (r41e9@f (cdr r41eb@exp*) (append r41f6@i* r41ec@int*) (append r41f7@e* r41ed@ext*)))) r41f3@ls/false) ((lambda (r41fb@t) ((lambda (r41fd@ls/false) (if r41fd@ls/false (apply (lambda (r41ff@ie) (begin (if (not (r2cce@id? r41ff@ie)) (r2fc2@syntax-violation 'export '"invalid export" r41ff@ie) (void)) (r41e9@f (cdr r41eb@exp*) (cons r41ff@ie r41ec@int*) (cons r41ff@ie r41ed@ext*)))) r41fd@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r41fb@t))) (r2ed9@syntax-dispatch r41fb@t 'any))) r41f1@t))) (r2ed9@syntax-dispatch r41f1@t '(any . #(each (any any)))))) (car r41eb@exp*)))))) r41e9@f) r41e7@exp* '() '()))) (set! r2f3a@parse-library-name (lambda (r4201@spec) ((lambda (r4204@parse) (begin (set! r4204@parse (lambda (r4211@x) ((lambda (r4213@t) ((lambda (r4215@ls/false) (if (and r4215@ls/false (apply (lambda (r4217@v*) (for-all (lambda (r4219@x) ((lambda (r421b@x) (and (integer? r421b@x) (exact? r421b@x))) (r2fc8@syntax->datum r4219@x))) r4217@v*)) r4215@ls/false)) (apply (lambda (r421d@v*) (values '() (map r2fc8@syntax->datum r421d@v*))) r4215@ls/false) ((lambda (r421f@t) ((lambda (r4221@ls/false) (if (and r4221@ls/false (apply (lambda (r4223@x r4224@rest) (symbol? (r2fc8@syntax->datum r4223@x))) r4221@ls/false)) (apply (lambda (r4227@x r4228@rest) (call-with-values (lambda () (r4204@parse r4228@rest)) (lambda (r422f@r422c r4230@r422e) ((lambda (r4233@v* r4234@x*) (values (cons (r2fc8@syntax->datum r4227@x) r4234@x*) r4233@v*)) r4230@r422e r422f@r422c)))) r4221@ls/false) ((lambda (r4237@t) ((lambda (r4239@ls/false) (if r4239@ls/false (apply (lambda () (values '() '())) r4239@ls/false) ((lambda (r423b@t) ((lambda (r423d@ls/false) (if r423d@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid library name" r4201@spec)) r423d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r423b@t))) (r2ed9@syntax-dispatch r423b@t '_))) r4237@t))) (r2ed9@syntax-dispatch r4237@t '()))) r421f@t))) (r2ed9@syntax-dispatch r421f@t '(any . any)))) r4213@t))) (r2ed9@syntax-dispatch r4213@t '(each-any)))) r4211@x))) (call-with-values (lambda () (r4204@parse r4201@spec)) (lambda (r4209@r4206 r420a@r4208) ((lambda (r420d@ver* r420e@name*) (begin (if (null? r420e@name*) (r2fc2@syntax-violation '#f '"empty library name" r4201@spec) (void)) (values r420e@name* r420d@ver*))) r420a@r4208 r4209@r4206))))) '#f))) (set! r2f3c@parse-library (lambda (r423f@e) ((lambda (r4241@t) ((lambda (r4243@ls/false) (if (and r4243@ls/false (apply (lambda (r4245@library r4246@name* r4247@export r4248@exp* r4249@import r424a@imp* r424b@b*) (and (eq? (r2fc8@syntax->datum r4247@export) 'export) (eq? (r2fc8@syntax->datum r4249@import) 'import) (eq? (r2fc8@syntax->datum r4245@library) 'library))) r4243@ls/false)) (apply (lambda (r4253@library r4254@name* r4255@export r4256@exp* r4257@import r4258@imp* r4259@b*) (values r4254@name* r4256@exp* r4258@imp* r4259@b*)) r4243@ls/false) ((lambda (r4261@t) ((lambda (r4263@ls/false) (if r4263@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"malformed library" r423f@e)) r4263@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4261@t))) (r2ed9@syntax-dispatch r4261@t '_))) r4241@t))) (r2ed9@syntax-dispatch r4241@t '(any each-any (any . each-any) (any . each-any) . each-any)))) r423f@e))) (set! r2f3e@parse-import-spec* ((lambda () ((lambda (r4266@idsyn? r4268@dup-error r426a@merge-substs r426c@exclude* r426e@find* r4270@rem* r4272@remove-dups r4274@parse-library-name r4276@import-library r4278@get-import r427a@add-imports!) (begin (set! r4266@idsyn? (lambda (r446f@x) (symbol? (r2fc8@syntax->datum r446f@x)))) (set! r4268@dup-error (lambda (r446d@name) (r2fc2@syntax-violation 'import '"two imports with different bindings" r446d@name))) (set! r426a@merge-substs (lambda (r445b@s r445c@subst) ((lambda (r4460@insert-to-subst) (begin (set! r4460@insert-to-subst (lambda (r4461@a r4462@subst) ((lambda (r4465@name r4466@label) ((lambda (r4469@t) (if r4469@t ((lambda (r446b@x) (if (eq? (cdr r446b@x) r4466@label) r4462@subst (r4268@dup-error r4465@name))) r4469@t) (cons r4461@a r4462@subst))) (assq r4465@name r4462@subst))) (car r4461@a) (cdr r4461@a)))) (if (null? r445b@s) r445c@subst (r4460@insert-to-subst (car r445b@s) (r426a@merge-substs (cdr r445b@s) r445c@subst))))) '#f))) (set! r426c@exclude* (lambda (r442b@sym* r442c@subst) ((lambda (r4430@exclude) (begin (set! r4430@exclude (lambda (r4449@sym r444a@subst) (if (null? r444a@subst) (r2fc2@syntax-violation 'import '"cannot rename unbound identifier" r4449@sym) (if (eq? r4449@sym (caar r444a@subst)) (values (cdar r444a@subst) (cdr r444a@subst)) ((lambda (r444d@a) (call-with-values (lambda () (r4430@exclude r4449@sym (cdr r444a@subst))) (lambda (r4453@r4450 r4454@r4452) ((lambda (r4457@subst r4458@old) (values r4458@old (cons r444d@a r4457@subst))) r4454@r4452 r4453@r4450)))) (car r444a@subst)))))) (if (null? r442b@sym*) (values '() r442c@subst) (call-with-values (lambda () (r4430@exclude (car r442b@sym*) r442c@subst)) (lambda (r4435@r4432 r4436@r4434) ((lambda (r4439@subst r443a@old) (call-with-values (lambda () (r426c@exclude* (cdr r442b@sym*) r4439@subst)) (lambda (r4441@r443e r4442@r4440) ((lambda (r4445@subst r4446@old*) (values (cons r443a@old r4446@old*) r4445@subst)) r4442@r4440 r4441@r443e)))) r4436@r4434 r4435@r4432)))))) '#f))) (set! r426e@find* (lambda (r4423@sym* r4424@subst) (map (lambda (r4427@x) ((lambda (r4429@t) (if r4429@t (cdr r4429@t) (r2fc2@syntax-violation 'import '"cannot find identifier" r4427@x))) (assq r4427@x r4424@subst))) r4423@sym*))) (set! r4270@rem* (lambda (r441b@sym* r441c@subst) ((letrec ((r441f@f (lambda (r4421@subst) (if (null? r4421@subst) '() (if (memq (caar r4421@subst) r441b@sym*) (r441f@f (cdr r4421@subst)) (cons (car r4421@subst) (r441f@f (cdr r4421@subst)))))))) r441f@f) r441c@subst))) (set! r4272@remove-dups (lambda (r4419@ls) (if (null? r4419@ls) '() (if (memq (car r4419@ls) (cdr r4419@ls)) (r4272@remove-dups (cdr r4419@ls)) (cons (car r4419@ls) (r4272@remove-dups (cdr r4419@ls))))))) (set! r4274@parse-library-name (lambda (r4331@spec) ((lambda (r4334@subversion? r4336@subversion-pred r4338@version-pred) (begin (set! r4334@subversion? (lambda (r4415@x) ((lambda (r4417@x) (and (integer? r4417@x) (exact? r4417@x) (>= r4417@x '0))) (r2fc8@syntax->datum r4415@x)))) (set! r4336@subversion-pred (lambda (r43b5@x*) ((lambda (r43b7@t) ((lambda (r43b9@ls/false) (if (and r43b9@ls/false (apply (lambda (r43bb@n) (r4334@subversion? r43bb@n)) r43b9@ls/false)) (apply (lambda (r43bd@n) (lambda (r43bf@x) (= r43bf@x (r2fc8@syntax->datum r43bd@n)))) r43b9@ls/false) ((lambda (r43c1@t) ((lambda (r43c3@ls/false) (if (and r43c3@ls/false (apply (lambda (r43c5@p? r43c6@sub*) (eq? (r2fc8@syntax->datum r43c5@p?) 'and)) r43c3@ls/false)) (apply (lambda (r43c9@p? r43ca@sub*) ((lambda (r43cd@p*) (lambda (r43cf@x) (for-all (lambda (r43d1@p) (r43d1@p r43cf@x)) r43cd@p*))) (map r4336@subversion-pred r43ca@sub*))) r43c3@ls/false) ((lambda (r43d3@t) ((lambda (r43d5@ls/false) (if (and r43d5@ls/false (apply (lambda (r43d7@p? r43d8@sub*) (eq? (r2fc8@syntax->datum r43d7@p?) 'or)) r43d5@ls/false)) (apply (lambda (r43db@p? r43dc@sub*) ((lambda (r43df@p*) (lambda (r43e1@x) (exists (lambda (r43e3@p) (r43e3@p r43e1@x)) r43df@p*))) (map r4336@subversion-pred r43dc@sub*))) r43d5@ls/false) ((lambda (r43e5@t) ((lambda (r43e7@ls/false) (if (and r43e7@ls/false (apply (lambda (r43e9@p? r43ea@sub) (eq? (r2fc8@syntax->datum r43e9@p?) 'not)) r43e7@ls/false)) (apply (lambda (r43ed@p? r43ee@sub) ((lambda (r43f1@p) (lambda (r43f3@x) (not (r43f1@p r43f3@x)))) (r4336@subversion-pred r43ee@sub))) r43e7@ls/false) ((lambda (r43f5@t) ((lambda (r43f7@ls/false) (if (and r43f7@ls/false (apply (lambda (r43f9@p? r43fa@n) (and (eq? (r2fc8@syntax->datum r43f9@p?) '<=) (r4334@subversion? r43fa@n))) r43f7@ls/false)) (apply (lambda (r43fd@p? r43fe@n) (lambda (r4401@x) (<= r4401@x (r2fc8@syntax->datum r43fe@n)))) r43f7@ls/false) ((lambda (r4403@t) ((lambda (r4405@ls/false) (if (and r4405@ls/false (apply (lambda (r4407@p? r4408@n) (and (eq? (r2fc8@syntax->datum r4407@p?) '>=) (r4334@subversion? r4408@n))) r4405@ls/false)) (apply (lambda (r440b@p? r440c@n) (lambda (r440f@x) (>= r440f@x (r2fc8@syntax->datum r440c@n)))) r4405@ls/false) ((lambda (r4411@t) ((lambda (r4413@ls/false) (if r4413@ls/false (apply (lambda () (r2fc2@syntax-violation 'import '"invalid sub-version spec" r4331@spec r43b5@x*)) r4413@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4411@t))) (r2ed9@syntax-dispatch r4411@t '_))) r4403@t))) (r2ed9@syntax-dispatch r4403@t '(any any)))) r43f5@t))) (r2ed9@syntax-dispatch r43f5@t '(any any)))) r43e5@t))) (r2ed9@syntax-dispatch r43e5@t '(any any)))) r43d3@t))) (r2ed9@syntax-dispatch r43d3@t '(any . each-any)))) r43c1@t))) (r2ed9@syntax-dispatch r43c1@t '(any . each-any)))) r43b7@t))) (r2ed9@syntax-dispatch r43b7@t 'any))) r43b5@x*))) (set! r4338@version-pred (lambda (r4365@x*) ((lambda (r4367@t) ((lambda (r4369@ls/false) (if r4369@ls/false (apply (lambda () (lambda (r436b@x) '#t)) r4369@ls/false) ((lambda (r436d@t) ((lambda (r436f@ls/false) (if (and r436f@ls/false (apply (lambda (r4371@c r4372@ver*) (eq? (r2fc8@syntax->datum r4371@c) 'and)) r436f@ls/false)) (apply (lambda (r4375@c r4376@ver*) ((lambda (r4379@p*) (lambda (r437b@x) (for-all (lambda (r437d@p) (r437d@p r437b@x)) r4379@p*))) (map r4338@version-pred r4376@ver*))) r436f@ls/false) ((lambda (r437f@t) ((lambda (r4381@ls/false) (if (and r4381@ls/false (apply (lambda (r4383@c r4384@ver*) (eq? (r2fc8@syntax->datum r4383@c) 'or)) r4381@ls/false)) (apply (lambda (r4387@c r4388@ver*) ((lambda (r438b@p*) (lambda (r438d@x) (exists (lambda (r438f@p) (r438f@p r438d@x)) r438b@p*))) (map r4338@version-pred r4388@ver*))) r4381@ls/false) ((lambda (r4391@t) ((lambda (r4393@ls/false) (if (and r4393@ls/false (apply (lambda (r4395@c r4396@ver) (eq? (r2fc8@syntax->datum r4395@c) 'not)) r4393@ls/false)) (apply (lambda (r4399@c r439a@ver) ((lambda (r439d@p) (lambda (r439f@x) (not (r439d@p r439f@x)))) (r4338@version-pred r439a@ver))) r4393@ls/false) ((lambda (r43a1@t) ((lambda (r43a3@ls/false) (if r43a3@ls/false (apply (lambda (r43a5@sub*) ((lambda (r43a7@p*) (lambda (r43a9@x) ((letrec ((r43ab@f (lambda (r43ad@p* r43ae@x) (if (null? r43ad@p*) '#t (if (null? r43ae@x) '#f (and ((car r43ad@p*) (car r43ae@x)) (r43ab@f (cdr r43ad@p*) (cdr r43ae@x)))))))) r43ab@f) r43a7@p* r43a9@x))) (map r4336@subversion-pred r43a5@sub*))) r43a3@ls/false) ((lambda (r43b1@t) ((lambda (r43b3@ls/false) (if r43b3@ls/false (apply (lambda () (r2fc2@syntax-violation 'import '"invalid version spec" r4331@spec r4365@x*)) r43b3@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r43b1@t))) (r2ed9@syntax-dispatch r43b1@t '_))) r43a1@t))) (r2ed9@syntax-dispatch r43a1@t 'each-any))) r4391@t))) (r2ed9@syntax-dispatch r4391@t '(any any)))) r437f@t))) (r2ed9@syntax-dispatch r437f@t '(any . each-any)))) r436d@t))) (r2ed9@syntax-dispatch r436d@t '(any . each-any)))) r4367@t))) (r2ed9@syntax-dispatch r4367@t '()))) r4365@x*))) ((letrec ((r4339@f (lambda (r433b@x) ((lambda (r433d@t) ((lambda (r433f@ls/false) (if r433f@ls/false (apply (lambda (r4341@version-spec*) (values '() (r4338@version-pred r4341@version-spec*))) r433f@ls/false) ((lambda (r4343@t) ((lambda (r4345@ls/false) (if (and r4345@ls/false (apply (lambda (r4347@x r4348@x*) (r4266@idsyn? r4347@x)) r4345@ls/false)) (apply (lambda (r434b@x r434c@x*) (call-with-values (lambda () (r4339@f r434c@x*)) (lambda (r4353@r4350 r4354@r4352) ((lambda (r4357@pred r4358@name) (values (cons (r2fc8@syntax->datum r434b@x) r4358@name) r4357@pred)) r4354@r4352 r4353@r4350)))) r4345@ls/false) ((lambda (r435b@t) ((lambda (r435d@ls/false) (if r435d@ls/false (apply (lambda () (values '() (lambda (r435f@x) '#t))) r435d@ls/false) ((lambda (r4361@t) ((lambda (r4363@ls/false) (if r4363@ls/false (apply (lambda () (r2fc2@syntax-violation '#f '"invalid import spec" r4331@spec)) r4363@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4361@t))) (r2ed9@syntax-dispatch r4361@t '_))) r435b@t))) (r2ed9@syntax-dispatch r435b@t '()))) r4343@t))) (r2ed9@syntax-dispatch r4343@t '(any . any)))) r433d@t))) (r2ed9@syntax-dispatch r433d@t '(each-any)))) r433b@x)))) r4339@f) r4331@spec))) '#f '#f '#f))) (set! r4276@import-library (lambda (r4321@spec*) (call-with-values (lambda () (r4274@parse-library-name r4321@spec*)) (lambda (r4327@r4324 r4328@r4326) ((lambda (r432b@pred r432c@name) (begin (if (null? r432c@name) (r2fc2@syntax-violation 'import '"empty library name" r4321@spec*) (void)) ((lambda (r432f@lib) (begin (if (not r432f@lib) (r2fc2@syntax-violation 'import '"cannot find library with required name" r432c@name) (void)) (if (not (r432b@pred (r2ac3@r2935@library-version r432f@lib))) (r2fc2@syntax-violation 'import '"library does not satisfy version specification" r4321@spec* r432f@lib) (void)) ((r2f48@imp-collector) r432f@lib) (r2ac7@r293d@library-subst r432f@lib))) (r2aeb@r2985@find-library-by-name r432c@name)))) r4328@r4326 r4327@r4324))))) (set! r4278@get-import (lambda (r4293@spec) ((lambda (r4295@t) ((lambda (r4297@ls/false) (if (and r4297@ls/false (apply (lambda (r4299@x r429a@x*) (not (memq (r2fc8@syntax->datum r4299@x) '(for rename except only prefix library)))) r4297@ls/false)) (apply (lambda (r429d@x r429e@x*) (r4276@import-library (cons r429d@x r429e@x*))) r4297@ls/false) ((lambda (r42a1@t) ((lambda (r42a3@ls/false) (if (and r42a3@ls/false (apply (lambda (r42a5@rename r42a6@isp r42a7@old* r42a8@new*) (and (eq? (r2fc8@syntax->datum r42a5@rename) 'rename) (for-all r4266@idsyn? r42a7@old*) (for-all r4266@idsyn? r42a8@new*))) r42a3@ls/false)) (apply (lambda (r42ad@rename r42ae@isp r42af@old* r42b0@new*) ((lambda (r42b5@subst r42b6@old* r42b7@new*) ((lambda (r42bb@old-label*) ((lambda (r42bd@subst) (r426a@merge-substs (map cons r42b7@new* r42bb@old-label*) r42bd@subst)) (r4270@rem* r42b6@old* r42b5@subst))) (r426e@find* r42b6@old* r42b5@subst))) (r4278@get-import r42ae@isp) (map r2fc8@syntax->datum r42af@old*) (map r2fc8@syntax->datum r42b0@new*))) r42a3@ls/false) ((lambda (r42bf@t) ((lambda (r42c1@ls/false) (if (and r42c1@ls/false (apply (lambda (r42c3@except r42c4@isp r42c5@sym*) (and (eq? (r2fc8@syntax->datum r42c3@except) 'except) (for-all r4266@idsyn? r42c5@sym*))) r42c1@ls/false)) (apply (lambda (r42c9@except r42ca@isp r42cb@sym*) ((lambda (r42cf@subst) (r4270@rem* (map r2fc8@syntax->datum r42cb@sym*) r42cf@subst)) (r4278@get-import r42ca@isp))) r42c1@ls/false) ((lambda (r42d1@t) ((lambda (r42d3@ls/false) (if (and r42d3@ls/false (apply (lambda (r42d5@only r42d6@isp r42d7@sym*) (and (eq? (r2fc8@syntax->datum r42d5@only) 'only) (for-all r4266@idsyn? r42d7@sym*))) r42d3@ls/false)) (apply (lambda (r42db@only r42dc@isp r42dd@sym*) ((lambda (r42e1@subst r42e2@sym*) ((lambda (r42e5@sym*) ((lambda (r42e7@lab*) (map cons r42e5@sym* r42e7@lab*)) (r426e@find* r42e5@sym* r42e1@subst))) (r4272@remove-dups r42e2@sym*))) (r4278@get-import r42dc@isp) (map r2fc8@syntax->datum r42dd@sym*))) r42d3@ls/false) ((lambda (r42e9@t) ((lambda (r42eb@ls/false) (if (and r42eb@ls/false (apply (lambda (r42ed@prefix r42ee@isp r42ef@p) (and (eq? (r2fc8@syntax->datum r42ed@prefix) 'prefix) (r4266@idsyn? r42ef@p))) r42eb@ls/false)) (apply (lambda (r42f3@prefix r42f4@isp r42f5@p) ((lambda (r42f9@subst r42fa@prefix) (map (lambda (r42fd@x) (cons (string->symbol (string-append r42fa@prefix (symbol->string (car r42fd@x)))) (cdr r42fd@x))) r42f9@subst)) (r4278@get-import r42f4@isp) (symbol->string (r2fc8@syntax->datum r42f5@p)))) r42eb@ls/false) ((lambda (r42ff@t) ((lambda (r4301@ls/false) (if (and r4301@ls/false (apply (lambda (r4303@library r4304@spec*) (eq? (r2fc8@syntax->datum r4303@library) 'library)) r4301@ls/false)) (apply (lambda (r4307@library r4308@spec*) (r4276@import-library r4308@spec*)) r4301@ls/false) ((lambda (r430b@t) ((lambda (r430d@ls/false) (if (and r430d@ls/false (apply (lambda (r430f@for r4310@isp r4311@rest) (eq? (r2fc8@syntax->datum r430f@for) 'for)) r430d@ls/false)) (apply (lambda (r4315@for r4316@isp r4317@rest) (r4278@get-import r4316@isp)) r430d@ls/false) ((lambda (r431b@t) ((lambda (r431d@ls/false) (if r431d@ls/false (apply (lambda (r431f@spec) (r2fc2@syntax-violation 'import '"invalid import spec" r431f@spec)) r431d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r431b@t))) (r2ed9@syntax-dispatch r431b@t 'any))) r430b@t))) (r2ed9@syntax-dispatch r430b@t '(any any . any)))) r42ff@t))) (r2ed9@syntax-dispatch r42ff@t '(any each-any)))) r42e9@t))) (r2ed9@syntax-dispatch r42e9@t '(any any any)))) r42d1@t))) (r2ed9@syntax-dispatch r42d1@t '(any any . each-any)))) r42bf@t))) (r2ed9@syntax-dispatch r42bf@t '(any any . each-any)))) r42a1@t))) (r2ed9@syntax-dispatch r42a1@t '(any any . #(each (any any)))))) r4295@t))) (r2ed9@syntax-dispatch r4295@t '(any . each-any)))) r4293@spec))) (set! r427a@add-imports! (lambda (r4283@imp r4284@h) ((lambda (r4287@subst) (for-each (lambda (r4289@x) ((lambda (r428b@name r428c@label) ((lambda (r428f@t) (if r428f@t ((lambda (r4291@l) (if (not (eq? r4291@l r428c@label)) (r4268@dup-error r428b@name) (void))) r428f@t) (hashtable-set! r4284@h r428b@name r428c@label))) (hashtable-ref r4284@h r428b@name '#f))) (car r4289@x) (cdr r4289@x))) r4287@subst)) (r4278@get-import r4283@imp)))) (lambda (r427b@imp*) ((letrec ((r427d@f (lambda (r427f@imp* r4280@h) (if (null? r427f@imp*) (hashtable-entries r4280@h) (begin (r427a@add-imports! (car r427f@imp*) r4280@h) (r427d@f (cdr r427f@imp*) r4280@h)))))) r427d@f) r427b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! r2f40@make-top-rib (lambda (r4471@names r4472@labels) ((lambda (r4475@rib) (begin (vector-for-each (lambda (r4477@name r4478@label) (begin (if (not (symbol? r4477@name)) (error 'make-top-rib '"BUG: not a symbol" r4477@name) (void)) (r2c81@extend-rib/nc! r4475@rib (r2c98@make-stx r4477@name r2c4a@top-mark* '() '()) r4478@label))) r4471@names r4472@labels) r4475@rib)) (r2c7d@make-empty-rib)))) (set! r2f42@make-collector (lambda () ((lambda (r447b@ls) (lambda r447f ((lambda (r4480) (if (= r4480 '0) (apply (lambda () r447b@ls) r447f) (if (= r4480 '1) (apply (lambda (r447d@x) (set! r447b@ls (r2c43@set-cons r447d@x r447b@ls))) r447f) (error 'apply '"invalid arg count")))) (length r447f)))) '()))) (set! r2f44@inv-collector (r2878@r27a2@make-parameter (lambda r4481@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (r4483@x) (begin (if (not (procedure? r4483@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" r4483@x) (void)) r4483@x)))) (set! r2f46@vis-collector (r2878@r27a2@make-parameter (lambda r4485@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (r4487@x) (begin (if (not (procedure? r4487@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" r4487@x) (void)) r4487@x)))) (set! r2f48@imp-collector (r2878@r27a2@make-parameter (lambda r4489@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (r448b@x) (begin (if (not (procedure? r448b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" r448b@x) (void)) r448b@x)))) (set! r2f4a@chi-library-internal (lambda (r448d@e* r448e@rib r448f@top?) (call-with-values (lambda () (r2f34@chi-body* r448d@e* '() '() '() '() '() '() '() r448e@rib r448f@top?)) (lambda (r44a3@r4494 r44a4@r4496 r44a5@r4498 r44a6@r449a r44a7@r449c r44a8@r449e r44a9@r44a0 r44aa@r44a2) ((lambda (r44b3@exp* r44b4@_kwd* r44b5@mod** r44b6@rhs* r44b7@lex* r44b8@mr r44b9@r r44ba@e*) (values (append (apply append (reverse r44b5@mod**)) r44ba@e*) r44b9@r r44b8@mr (reverse r44b7@lex*) (reverse r44b6@rhs*) r44b3@exp*)) r44aa@r44a2 r44a9@r44a0 r44a8@r449e r44a7@r449c r44a6@r449a r44a5@r4498 r44a4@r4496 r44a3@r4494))))) (set! r2f4c@chi-interaction-expr (lambda (r44c3@e r44c4@rib r44c5@r) (call-with-values (lambda () (r2f34@chi-body* (list r44c3@e) r44c5@r r44c5@r '() '() '() '() '() r44c4@rib '#t)) (lambda (r44d9@r44ca r44da@r44cc r44db@r44ce r44dc@r44d0 r44dd@r44d2 r44de@r44d4 r44df@r44d6 r44e0@r44d8) ((lambda (r44e9@_exp* r44ea@_kwd* r44eb@mod** r44ec@rhs* r44ed@lex* r44ee@mr r44ef@r r44f0@e*) ((lambda (r44f9@e*) ((lambda (r44fb@e) (values r44fb@e r44ef@r)) (if (null? r44f9@e*) (r2c2e@r2b9e@build-void) (if (null? (cdr r44f9@e*)) (car r44f9@e*) (r2c2d@r2b9c@build-sequence '#f r44f9@e*))))) (r2f09@expand-interaction-rhs*/init* (reverse r44ed@lex*) (reverse r44ec@rhs*) (append (apply append (reverse r44eb@mod**)) r44f0@e*) r44ef@r r44ee@mr))) r44e0@r44d8 r44df@r44d6 r44de@r44d4 r44dd@r44d2 r44dc@r44d0 r44db@r44ce r44da@r44cc r44d9@r44ca))))) (set! r2f4e@library-body-expander (lambda (r44fd@name r44fe@main-exp* r44ff@imp* r4500@b* r4501@top?) ((lambda (r4508@itc) (begin (set! r4508@itc (r2f42@make-collector)) ((lambda (r4511@r450a r4512@r450c r4513@r450e r4514@r4510) ((lambda (r4519@swap) (dynamic-wind r4519@swap (lambda () (call-with-values (lambda () (r2f3e@parse-import-spec* r44ff@imp*)) (lambda (r451f@r451c r4520@r451e) ((lambda (r4523@subst-labels r4524@subst-names) ((lambda (r4527@rib) ((lambda (r452a@wrap) (begin (set! r452a@wrap (lambda (r45a5@x) (r2c98@make-stx r45a5@x r2c4a@top-mark* (list r4527@rib) '()))) ((lambda (r452b@b* r452c@main-exp* r452d@rtc r452e@vtc) ((lambda (r453b@r4534 r453c@r4536 r453d@r4538 r453e@r453a) ((lambda (r4543@swap) (dynamic-wind r4543@swap (lambda () (call-with-values (lambda () (r2f4a@chi-library-internal r452b@b* r4527@rib r4501@top?)) (lambda (r4551@r4546 r4552@r4548 r4553@r454a r4554@r454c r4555@r454e r4556@r4550) ((lambda (r455d@internal-exp* r455e@rhs* r455f@lex* r4560@mr r4561@r r4562@init*) (call-with-values (lambda () (r2f38@parse-exports (append r452c@main-exp* r455d@internal-exp*))) (lambda (r456d@r456a r456e@r456c) ((lambda (r4571@exp-id* r4572@exp-name*) (begin (r2c85@seal-rib! r4527@rib) ((lambda (r4575@init*) ((lambda (r4577@rhs*) ((lambda () (begin (r2c87@unseal-rib! r4527@rib) ((lambda (r4579@loc* r457a@export-subst) ((lambda (r457e@errstr) (begin (set! r457e@errstr '"attempt to export mutated variable") (call-with-values (lambda () (r2fae@make-export-env/macros r455f@lex* r4579@loc* r4561@r)) (lambda (r4585@r4580 r4586@r4582 r4587@r4584) ((lambda (r458b@macro* r458c@global* r458d@export-env) (begin (for-each (lambda (r4591@s) ((lambda (r4593@name r4594@label) ((lambda (r4597@p) (if r4597@p ((lambda (r4599@b) ((lambda (r459b@type) (if (eq? r459b@type 'mutable) (r2fc2@syntax-violation 'export r457e@errstr r4593@name) (void))) (car r4599@b))) (cdr r4597@p)) (void))) (assq r4594@label r458d@export-env))) (car r4591@s) (cdr r4591@s))) r457a@export-subst) ((lambda (r459d@invoke-body r459e@invoke-definitions) (values (r4508@itc) (r452d@rtc) (r452e@vtc) (r2c2d@r2b9c@build-sequence '#f (append r459e@invoke-definitions (list r459d@invoke-body))) r458b@macro* r457a@export-subst r458d@export-env)) (r2c30@r2ba2@build-letrec* '#f r455f@lex* r4577@rhs* (r2faa@build-exports r458c@global* r4575@init*)) (map r2c29@r2af9@build-global-define (map cdr r458c@global*))))) r4587@r4584 r4586@r4582 r4585@r4580))))) '#f)) (map r2c50@gen-global r455f@lex*) (r2fac@make-export-subst r4572@exp-name* r4571@exp-id*)))))) (r2f0b@chi-rhs* r455e@rhs* r4561@r r4560@mr))) (r2ef7@chi-expr* r4562@init* r4561@r r4560@mr)))) r456e@r456c r456d@r456a)))) r4556@r4550 r4555@r454e r4554@r454c r4553@r454a r4552@r4548 r4551@r4546)))) r4543@swap)) (lambda () (begin ((lambda (r45a1@t) (begin (r453b@r4534 r453d@r4538) (set! r453d@r4538 r45a1@t))) (r453b@r4534)) ((lambda (r45a3@t) (begin (r453c@r4536 r453e@r453a) (set! r453e@r453a r45a3@t))) (r453c@r4536)))))) r2f44@inv-collector r2f46@vis-collector r452d@rtc r452e@vtc)) (map r452a@wrap r4500@b*) (map r452a@wrap r44fe@main-exp*) (r2f42@make-collector) (r2f42@make-collector)))) '#f)) (r2f40@make-top-rib r4524@subst-names r4523@subst-labels))) r4520@r451e r451f@r451c)))) r4519@swap)) (lambda () (begin ((lambda (r45a7@t) (begin (r4511@r450a r4513@r450e) (set! r4513@r450e r45a7@t))) (r4511@r450a)) ((lambda (r45a9@t) (begin (r4512@r450c r4514@r4510) (set! r4514@r4510 r45a9@t))) (r4512@r450c)))))) r2f48@imp-collector r2fd0@top-level-context r4508@itc '#f))) '#f))) (set! r2f50@core-library-expander (lambda (r45ab@e r45ac@verify-name) (call-with-values (lambda () (r2f3c@parse-library r45ab@e)) (lambda (r45b7@r45b0 r45b8@r45b2 r45b9@r45b4 r45ba@r45b6) ((lambda (r45bf@b* r45c0@imp* r45c1@exp* r45c2@name*) (call-with-values (lambda () (r2f3a@parse-library-name r45c2@name*)) (lambda (r45cb@r45c8 r45cc@r45ca) ((lambda (r45cf@ver r45d0@name) (begin (r45ac@verify-name r45d0@name) (call-with-values (lambda () (r2f4e@library-body-expander r45d0@name r45c1@exp* r45c0@imp* r45bf@b* '#f)) (lambda (r45e1@r45d4 r45e2@r45d6 r45e3@r45d8 r45e4@r45da r45e5@r45dc r45e6@r45de r45e7@r45e0) ((lambda (r45ef@export-env r45f0@export-subst r45f1@visit-code r45f2@invoke-code r45f3@visit-req* r45f4@invoke-req* r45f5@imp*) (values r45d0@name r45cf@ver r45f5@imp* r45f4@invoke-req* r45f3@visit-req* r45f2@invoke-code r45f1@visit-code r45f0@export-subst r45ef@export-env)) r45e7@r45e0 r45e6@r45de r45e5@r45dc r45e4@r45da r45e3@r45d8 r45e2@r45d6 r45e1@r45d4))))) r45cc@r45ca r45cb@r45c8)))) r45ba@r45b6 r45b9@r45b4 r45b8@r45b2 r45b7@r45b0))))) (set! r2f52@parse-top-level-program (lambda (r45fd@e*) ((lambda (r45ff@t) ((lambda (r4601@ls/false) (if (and r4601@ls/false (apply (lambda (r4603@import r4604@imp* r4605@b*) (eq? (r2fc8@syntax->datum r4603@import) 'import)) r4601@ls/false)) (apply (lambda (r4609@import r460a@imp* r460b@b*) (values r460a@imp* r460b@b*)) r4601@ls/false) ((lambda (r460f@t) ((lambda (r4611@ls/false) (if (and r4611@ls/false (apply (lambda (r4613@import r4614@x r4615@y) (eq? (r2fc8@syntax->datum r4613@import) 'import)) r4611@ls/false)) (apply (lambda (r4619@import r461a@x r461b@y) (r2fc2@syntax-violation 'expander '"invalid syntax of top-level program" (r2cc8@syntax-car r45fd@e*))) r4611@ls/false) ((lambda (r461f@t) ((lambda (r4621@ls/false) (if r4621@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) r4621@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r461f@t))) (r2ed9@syntax-dispatch r461f@t '_))) r460f@t))) (r2ed9@syntax-dispatch r460f@t '((any . any) . any)))) r45ff@t))) (r2ed9@syntax-dispatch r45ff@t '((any . each-any) . each-any)))) r45fd@e*))) (set! r2f54@top-level-expander (lambda (r4623@e*) (call-with-values (lambda () (r2f52@parse-top-level-program r4623@e*)) (lambda (r4629@r4626 r462a@r4628) ((lambda (r462d@b* r462e@imp*) (call-with-values (lambda () (r2f4e@library-body-expander '() '() r462e@imp* r462d@b* '#t)) (lambda (r463f@r4632 r4640@r4634 r4641@r4636 r4642@r4638 r4643@r463a r4644@r463c r4645@r463e) ((lambda (r464d@export-env r464e@export-subst r464f@visit-code r4650@invoke-code r4651@visit-req* r4652@invoke-req* r4653@imp*) (values r4652@invoke-req* r4650@invoke-code)) r4645@r463e r4644@r463c r4643@r463a r4642@r4638 r4641@r4636 r4640@r4634 r463f@r4632)))) r462a@r4628 r4629@r4626))))) (set! r2f5a@r2f55 (make-record-type-descriptor 'env '#f 'r2f58 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! r2f5c@r2f57 '#f) (set! r2f5e@r2f56 (make-record-constructor-descriptor r2f5a@r2f55 '#f r2f5c@r2f57)) (set! r2f61@env? (record-predicate r2f5a@r2f55)) (set! r2f63@make-env (record-constructor r2f5e@r2f56)) (set! r2f65@env-names (record-accessor r2f5a@r2f55 '0)) (set! r2f67@env-labels (record-accessor r2f5a@r2f55 '1)) (set! r2f69@env-itc (record-accessor r2f5a@r2f55 '2)) (set! r2f6b@set-env-names! (record-mutator r2f5a@r2f55 '0)) (set! r2f6d@set-env-labels! (record-mutator r2f5a@r2f55 '1)) (set! r2f6f@set-env-itc! (record-mutator r2f5a@r2f55 '2)) (set! r2f71@rp (r2875@r279c@make-record-printer 'env (lambda (r465b@x r465c@p r465d@wr) (display '"#<environment>" r465c@p)))) (set! r2f77@r2f72 (make-record-type-descriptor 'interaction-env '#f 'r2f75 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! r2f79@r2f74 '#f) (set! r2f7b@r2f73 (make-record-constructor-descriptor r2f77@r2f72 '#f r2f79@r2f74)) (set! r2f7e@interaction-env? (record-predicate r2f77@r2f72)) (set! r2f80@make-interaction-env (record-constructor r2f7b@r2f73)) (set! r2f82@interaction-env-rib (record-accessor r2f77@r2f72 '0)) (set! r2f84@interaction-env-r (record-accessor r2f77@r2f72 '1)) (set! r2f86@interaction-env-locs (record-accessor r2f77@r2f72 '2)) (set! r2f88@set-interaction-env-rib! (record-mutator r2f77@r2f72 '0)) (set! r2f8a@set-interaction-env-r! (record-mutator r2f77@r2f72 '1)) (set! r2f8c@set-interaction-env-locs! (record-mutator r2f77@r2f72 '2)) (set! r2f8e@rp (r2875@r279c@make-record-printer 'interaction-env (lambda (r4661@x r4662@p r4663@wr) (display '"#<environment>" r4662@p)))) (set! r2f90@interaction-environment-symbols (lambda () (r2f98@environment-symbols (r2fce@interaction-environment)))) (set! r2f92@environment-bindings (lambda (r4667@e) (vector->list (vector-map (lambda (r4669@name r466a@label) (r2f94@parse-binding (cons r4669@name (r2af1@r2991@imported-label->binding r466a@label)))) (r2f65@env-names r4667@e) (r2f67@env-labels r4667@e))))) (set! r2f94@parse-binding (lambda (r466d@b) (cons (car r466d@b) ((lambda (r466f@t) (if (memv r466f@t '(core-prim global)) 'procedure (if (memv r466f@t '(core-macro macro global-macro)) 'syntax (if (memv r466f@t '($core-rtd)) 'record (if (eq? (car r466d@b) (cadr r466d@b)) 'syntax 'unknown))))) (cadr r466d@b))))) (set! r2f96@environment? (lambda (r4671@x) (or (r2f61@env? r4671@x) (r2f7e@interaction-env? r4671@x)))) (set! r2f98@environment-symbols (lambda (r4673@x) (if (r2f61@env? r4673@x) (vector->list (r2f65@env-names r4673@x)) (if (r2f7e@interaction-env? r4673@x) (map values (r2c69@rib-sym* (r2f82@interaction-env-rib r4673@x))) (assertion-violation 'environment-symbols '"not an environment" r4673@x))))) (set! r2f9a@environment (lambda r4675@imp* ((lambda (r4677@itc) ((lambda (r467d@r467a r467e@r467c) ((lambda (r4681@swap) (dynamic-wind r4681@swap (lambda () (call-with-values (lambda () (r2f3e@parse-import-spec* r4675@imp*)) (lambda (r4687@r4684 r4688@r4686) ((lambda (r468b@subst-labels r468c@subst-names) (r2f63@make-env r468c@subst-names r468b@subst-labels r4677@itc)) r4688@r4686 r4687@r4684)))) r4681@swap)) (lambda () ((lambda (r468f@t) (begin (r467d@r467a r467e@r467c) (set! r467e@r467c r468f@t))) (r467d@r467a))))) r2f48@imp-collector r4677@itc)) (r2f42@make-collector)))) (set! r2f9c@null-environment (lambda (r4691@n) (begin (if (not (eqv? r4691@n '5)) (assertion-violation 'null-environment '"not 5" r4691@n) (void)) (r2f9a@environment '(psyntax null-environment-5))))) (set! r2f9e@scheme-report-environment (lambda (r4693@n) (begin (if (not (eqv? r4693@n '5)) (assertion-violation 'scheme-report-environment '"not 5" r4693@n) (void)) (r2f9a@environment '(psyntax scheme-report-environment-5))))) (set! r2fa0@expand (lambda (r4695@x r4696@env) (if (r2f61@env? r4696@env) ((lambda (r4699@rib) ((lambda (r469b@x r469c@itc r469d@rtc r469e@vtc) ((lambda (r46a3@x) (begin (r2c85@seal-rib! r4699@rib) (values r46a3@x (r469d@rtc)))) ((lambda (r46b5@r46a6 r46b6@r46a8 r46b7@r46aa r46b8@r46ac r46b9@r46ae r46ba@r46b0 r46bb@r46b2 r46bc@r46b4) ((lambda (r46c5@swap) (dynamic-wind r46c5@swap (lambda () (r2efb@chi-expr r469b@x '() '())) r46c5@swap)) (lambda () (begin ((lambda (r46c7@t) (begin (r46b5@r46a6 r46b9@r46ae) (set! r46b9@r46ae r46c7@t))) (r46b5@r46a6)) ((lambda (r46c9@t) (begin (r46b6@r46a8 r46ba@r46b0) (set! r46ba@r46b0 r46c9@t))) (r46b6@r46a8)) ((lambda (r46cb@t) (begin (r46b7@r46aa r46bb@r46b2) (set! r46bb@r46b2 r46cb@t))) (r46b7@r46aa)) ((lambda (r46cd@t) (begin (r46b8@r46ac r46bc@r46b4) (set! r46bc@r46b4 r46cd@t))) (r46b8@r46ac)))))) r2fd0@top-level-context r2f44@inv-collector r2f46@vis-collector r2f48@imp-collector '#f r469d@rtc r469e@vtc r469c@itc))) (r2c98@make-stx r4695@x r2c4a@top-mark* (list r4699@rib) '()) (r2f69@env-itc r4696@env) (r2f42@make-collector) (r2f42@make-collector))) (r2f40@make-top-rib (r2f65@env-names r4696@env) (r2f67@env-labels r4696@env))) (if (r2f7e@interaction-env? r4696@env) ((lambda (r46cf@rib r46d0@r r46d1@rtc) ((lambda (r46d5@x) (call-with-values (lambda () ((lambda (r46eb@r46dc r46ec@r46de r46ed@r46e0 r46ee@r46e2 r46ef@r46e4 r46f0@r46e6 r46f1@r46e8 r46f2@r46ea) ((lambda (r46fb@swap) (dynamic-wind r46fb@swap (lambda () (r2f4c@chi-interaction-expr r46d5@x r46cf@rib r46d0@r)) r46fb@swap)) (lambda () (begin ((lambda (r46fd@t) (begin (r46eb@r46dc r46ef@r46e4) (set! r46ef@r46e4 r46fd@t))) (r46eb@r46dc)) ((lambda (r46ff@t) (begin (r46ec@r46de r46f0@r46e6) (set! r46f0@r46e6 r46ff@t))) (r46ec@r46de)) ((lambda (r4701@t) (begin (r46ed@r46e0 r46f1@r46e8) (set! r46f1@r46e8 r4701@t))) (r46ed@r46e0)) ((lambda (r4703@t) (begin (r46ee@r46e2 r46f2@r46ea) (set! r46f2@r46ea r4703@t))) (r46ee@r46e2)))))) r2fd0@top-level-context r2f44@inv-collector r2f46@vis-collector r2f48@imp-collector r4696@env r46d1@rtc (r2f42@make-collector) (r2f42@make-collector))) (lambda (r4705@r46d8 r4706@r46da) ((lambda (r4709@r^ r470a@e) (begin (r2f8a@set-interaction-env-r! r4696@env r4709@r^) (values r470a@e (r46d1@rtc)))) r4706@r46da r4705@r46d8)))) (r2c98@make-stx r4695@x r2c4a@top-mark* (list r46cf@rib) '()))) (r2f82@interaction-env-rib r4696@env) (r2f84@interaction-env-r r4696@env) (r2f42@make-collector)) (assertion-violation 'expand '"not an environment" r4696@env))))) (set! r2fa2@eval (lambda (r470d@x r470e@env) (begin (if (not (r2f96@environment? r470e@env)) (error 'eval '"not an environment" r470e@env) (void)) (call-with-values (lambda () (r2fa0@expand r470d@x r470e@env)) (lambda (r4715@r4712 r4716@r4714) ((lambda (r4719@invoke-req* r471a@x) (begin (for-each r2af2@r2993@invoke-library r4719@invoke-req*) (eval-core (r28cc@r2884@expanded->core r471a@x)))) r4716@r4714 r4715@r4712)))))) (set! r2fa4@library-expander (lambda r478b ((lambda (r478c) (if (= r478c '3) (apply (lambda (r471d@x r471e@filename r471f@verify-name) ((lambda (r4724@build-visit-code r4726@visit!) (begin (set! r4724@build-visit-code (lambda (r4779@macro*) (if (null? r4779@macro*) (r2c2e@r2b9e@build-void) (r2c2d@r2b9c@build-sequence '#f (map (lambda (r477b@x) ((lambda (r477d@loc r477e@src) (list 'set! r477d@loc r477e@src)) (car r477b@x) (cddr r477b@x))) r4779@macro*))))) (set! r4726@visit! (lambda (r4771@macro*) (for-each (lambda (r4773@x) ((lambda (r4775@loc r4776@proc) (set-symbol-value! r4775@loc r4776@proc)) (car r4773@x) (cadr r4773@x))) r4771@macro*))) (call-with-values (lambda () (r2f50@core-library-expander r471d@x r471f@verify-name)) (lambda (r4739@r4728 r473a@r472a r473b@r472c r473c@r472e r473d@r4730 r473e@r4732 r473f@r4734 r4740@r4736 r4741@r4738) ((lambda (r474b@export-env r474c@export-subst r474d@macro* r474e@invoke-code r474f@vis* r4750@inv* r4751@imp* r4752@ver r4753@name) ((lambda (r475d@id r475e@name r475f@ver r4760@imp* r4761@vis* r4762@inv* r4763@visit-proc r4764@invoke-proc r4765@visit-code r4766@invoke-code) (begin (r2af0@r298f@install-library r475d@id r475e@name r475f@ver r4760@imp* r4761@vis* r4762@inv* r474c@export-subst r474b@export-env r4763@visit-proc r4764@invoke-proc r4765@visit-code r4766@invoke-code '#t r471e@filename) (values r475d@id r475e@name r475f@ver r4760@imp* r4761@vis* r4762@inv* r4766@invoke-code r4765@visit-code r474c@export-subst r474b@export-env))) (gensym) r4753@name r4752@ver (map r2af6@r299b@library-spec r4751@imp*) (map r2af6@r299b@library-spec r474f@vis*) (map r2af6@r299b@library-spec r4750@inv*) (lambda () (r4726@visit! r474d@macro*)) (lambda () (eval-core (r28cc@r2884@expanded->core r474e@invoke-code))) (r4724@build-visit-code r474d@macro*) r474e@invoke-code)) r4741@r4738 r4740@r4736 r473f@r4734 r473e@r4732 r473d@r4730 r473c@r472e r473b@r472c r473a@r472a r4739@r4728))))) '#f '#f)) r478b) (if (= r478c '2) (apply (lambda (r4781@x r4782@filename) (r2fa4@library-expander r4781@x r4782@filename (lambda (r4785@x) (values)))) r478b) (if (= r478c '1) (apply (lambda (r4787@x) (r2fa4@library-expander r4787@x '#f (lambda (r4789@x) (values)))) r478b) (error 'apply '"invalid arg count"))))) (length r478b)))) (set! r2fa6@boot-library-expand (lambda (r478d@x) (call-with-values (lambda () (r2fa4@library-expander r478d@x)) (lambda (r47a3@r4790 r47a4@r4792 r47a5@r4794 r47a6@r4796 r47a7@r4798 r47a8@r479a r47a9@r479c r47aa@r479e r47ab@r47a0 r47ac@r47a2) ((lambda (r47b7@export-env r47b8@export-subst r47b9@visit-code r47ba@invoke-code r47bb@inv* r47bc@vis* r47bd@imp* r47be@ver r47bf@name r47c0@id) (values r47bf@name r47ba@invoke-code r47b8@export-subst r47b7@export-env)) r47ac@r47a2 r47ab@r47a0 r47aa@r479e r47a9@r479c r47a8@r479a r47a7@r4798 r47a6@r4796 r47a5@r4794 r47a4@r4792 r47a3@r4790))))) (set! r2fa8@rev-map-append (lambda (r47cb@f r47cc@ls r47cd@ac) (if (null? r47cc@ls) r47cd@ac (r2fa8@rev-map-append r47cb@f (cdr r47cc@ls) (cons (r47cb@f (car r47cc@ls)) r47cd@ac))))) (set! r2faa@build-exports (lambda (r47d1@lex*+loc* r47d2@init*) (r2c2d@r2b9c@build-sequence '#f (cons (r2c2e@r2b9e@build-void) (r2fa8@rev-map-append (lambda (r47d5@x) (list 'set! (cdr r47d5@x) (car r47d5@x))) r47d1@lex*+loc* r47d2@init*))))) (set! r2fac@make-export-subst (lambda (r47d7@name* r47d8@id*) (map (lambda (r47db@name r47dc@id) ((lambda (r47df@label) (begin (if (not r47df@label) (r2fc2@syntax-violation '#f '"cannot export unbound identifier" r47dc@id) (void)) (cons r47db@name r47df@label))) (r2ce8@id->label r47dc@id))) r47d7@name* r47d8@id*))) (set! r2fae@make-export-env/macros (lambda (r47e1@lex* r47e2@loc* r47e3@r) ((lambda (r47e8@lookup) (begin (set! r47e8@lookup (lambda (r4805@x) ((letrec ((r4807@f (lambda (r4809@x r480a@lex* r480b@loc*) (if (pair? r480a@lex*) (if (eq? r4809@x (car r480a@lex*)) (car r480b@loc*) (r4807@f r4809@x (cdr r480a@lex*) (cdr r480b@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) r4807@f) r4805@x r47e1@lex* r47e2@loc*))) ((letrec ((r47e9@f (lambda (r47eb@r r47ec@env r47ed@global* r47ee@macro*) (if (null? r47eb@r) (values r47ec@env r47ed@global* r47ee@macro*) ((lambda (r47f3@x) ((lambda (r47f5@label r47f6@b) ((lambda (r47f9@t) (if (memv r47f9@t '(lexical)) ((lambda (r47fb@v) ((lambda (r47fd@loc r47fe@type) (r47e9@f (cdr r47eb@r) (cons (cons* r47f5@label r47fe@type r47fd@loc) r47ec@env) (cons (cons (r2e65@lexical-var r47fb@v) r47fd@loc) r47ed@global*) r47ee@macro*)) (r47e8@lookup (r2e65@lexical-var r47fb@v)) (if (r2e67@lexical-mutable? r47fb@v) 'mutable 'global))) (r2cf2@binding-value r47f6@b)) (if (memv r47f9@t '(local-macro)) ((lambda (r4801@loc) (r47e9@f (cdr r47eb@r) (cons (cons* r47f5@label 'global-macro r4801@loc) r47ec@env) r47ed@global* (cons (cons r4801@loc (r2cf2@binding-value r47f6@b)) r47ee@macro*))) (gensym)) (if (memv r47f9@t '(local-macro!)) ((lambda (r4803@loc) (r47e9@f (cdr r47eb@r) (cons (cons* r47f5@label 'global-macro! r4803@loc) r47ec@env) r47ed@global* (cons (cons r4803@loc (r2cf2@binding-value r47f6@b)) r47ee@macro*))) (gensym)) (if (memv r47f9@t '($rtd $module)) (r47e9@f (cdr r47eb@r) (cons r47f3@x r47ec@env) r47ed@global* r47ee@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (r2cf0@binding-type r47f6@b) (r2cf2@binding-value r47f6@b))))))) (r2cf0@binding-type r47f6@b))) (car r47f3@x) (cdr r47f3@x))) (car r47eb@r)))))) r47e9@f) r47e3@r '() '() '()))) '#f))) (set! r2fb0@generate-temporaries (lambda (r480f@ls) ((lambda (r4811@t) ((lambda (r4813@ls/false) (if r4813@ls/false (apply (lambda (r4815@ls) (map (lambda (r4817@x) (r2c98@make-stx ((lambda (r4819@x) (if (or (symbol? r4819@x) (string? r4819@x)) (gensym r4819@x) (gensym 't))) (r2fc8@syntax->datum r4817@x)) r2c4a@top-mark* '() '())) r4815@ls)) r4813@ls/false) ((lambda (r481b@t) ((lambda (r481d@ls/false) (if r481d@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) r481d@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r481b@t))) (r2ed9@syntax-dispatch r481b@t '_))) r4811@t))) (r2ed9@syntax-dispatch r4811@t 'each-any))) r480f@ls))) (set! r2fb2@free-identifier=? (lambda (r481f@x r4820@y) (if (r2cce@id? r481f@x) (if (r2cce@id? r4820@y) (r2cd6@free-id=? r481f@x r4820@y) (assertion-violation 'free-identifier=? '"not an identifier" r4820@y)) (assertion-violation 'free-identifier=? '"not an identifier" r481f@x)))) (set! r2fb4@bound-identifier=? (lambda (r4823@x r4824@y) (if (r2cce@id? r4823@x) (if (r2cce@id? r4824@y) (r2cd4@bound-id=? r4823@x r4824@y) (assertion-violation 'bound-identifier=? '"not an identifier" r4824@y)) (assertion-violation 'bound-identifier=? '"not an identifier" r4823@x)))) (set! r2fb6@make-source-condition (lambda (r4827@x) ((lambda (r4831@r482c r4833@r482e r4835@r482d r4838@r482b r483a@make-source-condition r483c@r4829 r483e@r482a r4840@source-condition? r4842@source-filename r4844@source-character) (begin (set! r4831@r482c (make-record-type-descriptor '&source-information r4c8f@r49d6@&condition-rtd 'r482f '#f '#f '#((immutable file-name) (immutable character)))) (set! r4833@r482e '#f) (set! r4835@r482d (make-record-constructor-descriptor r4831@r482c r4c90@r49d8@&condition-rcd r4833@r482e)) (set! r4838@r482b (record-predicate r4831@r482c)) (set! r483a@make-source-condition (record-constructor r4835@r482d)) (set! r483c@r4829 (record-accessor r4831@r482c '0)) (set! r483e@r482a (record-accessor r4831@r482c '1)) (set! r4840@source-condition? (condition-predicate r4831@r482c)) (set! r4842@source-filename (condition-accessor r4831@r482c r483c@r4829)) (set! r4844@source-character (condition-accessor r4831@r482c r483e@r482a)) (if (pair? r4827@x) (r483a@make-source-condition (car r4827@x) (cdr r4827@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! r2fb8@extract-position-condition (lambda (r4845@x) (r2fb6@make-source-condition (r2fba@expression-position r4845@x)))) (set! r2fba@expression-position (lambda (r4847@x) (and (r2c96@stx? r4847@x) ((lambda (r4849@x) (and (r286d@r278c@annotation? r4849@x) (r286e@r278e@annotation-source r4849@x))) (r2c9a@stx-expr r4847@x))))) (set! r2fbc@assertion-error (lambda (r484b@expr r484c@pos) (raise (condition (r4cbf@r4a9a@make-assertion-violation) (r4cd1@r4acc@make-who-condition 'assert) (r4c95@r4a2d@make-message-condition '"assertion failed") (r4cc7@r4ab1@make-irritants-condition (list r484b@expr)) (r2fb6@make-source-condition r484c@pos))))) (set! r2fbe@syntax-error (lambda (r484f@x . r4851@args) (begin (if (not (for-all string? r4851@args)) (assertion-violation 'syntax-error '"invalid argument" r4851@args) (void)) (raise (condition (r4c95@r4a2d@make-message-condition (if (null? r4851@args) '"invalid syntax" (apply string-append r4851@args))) (r4cf3@r4b28@make-syntax-violation (r2fc8@syntax->datum r484f@x) '#f) (r2fb8@extract-position-condition r484f@x)))))) (set! r2fc0@syntax-violation* (lambda (r4853@who r4854@msg r4855@form r4856@condition-object) (begin (if (not (string? r4854@msg)) (assertion-violation 'syntax-violation '"message is not a string" r4854@msg) (void)) ((lambda (r485b@who) (raise (condition (if r485b@who (r4cd1@r4acc@make-who-condition r485b@who) (condition)) (r4c95@r4a2d@make-message-condition r4854@msg) r4856@condition-object (r2fb8@extract-position-condition r4855@form)))) (if (or (string? r4853@who) (symbol? r4853@who)) r4853@who (if (not r4853@who) ((lambda (r485d@t) ((lambda (r485f@ls/false) (if (and r485f@ls/false (apply (lambda (r4861@id) (r2cce@id? r4861@id)) r485f@ls/false)) (apply (lambda (r4863@id) (r2fc8@syntax->datum r4863@id)) r485f@ls/false) ((lambda (r4865@t) ((lambda (r4867@ls/false) (if (and r4867@ls/false (apply (lambda (r4869@id r486a@rest) (r2cce@id? r4869@id)) r4867@ls/false)) (apply (lambda (r486d@id r486e@rest) (r2fc8@syntax->datum r486d@id)) r4867@ls/false) ((lambda (r4871@t) ((lambda (r4873@ls/false) (if r4873@ls/false (apply (lambda () '#f) r4873@ls/false) (r2fc2@syntax-violation '#f '"invalid syntax" r4871@t))) (r2ed9@syntax-dispatch r4871@t '_))) r4865@t))) (r2ed9@syntax-dispatch r4865@t '(any . any)))) r485d@t))) (r2ed9@syntax-dispatch r485d@t 'any))) r4855@form) (assertion-violation 'syntax-violation '"invalid who argument" r4853@who))))))) (set! r2fc2@syntax-violation (lambda r4883 ((lambda (r4884) (if (= r4884 '3) (apply (lambda (r4875@who r4876@msg r4877@form) (r2fc2@syntax-violation r4875@who r4876@msg r4877@form '#f)) r4883) (if (= r4884 '4) (apply (lambda (r487b@who r487c@msg r487d@form r487e@subform) (r2fc0@syntax-violation* r487b@who r487c@msg r487d@form (r4cf3@r4b28@make-syntax-violation (r2fc8@syntax->datum r487d@form) (r2fc8@syntax->datum r487e@subform)))) r4883) (error 'apply '"invalid arg count")))) (length r4883)))) (set! r2fc4@identifier? (lambda (r4885@x) (r2cce@id? r4885@x))) (set! r2fc6@datum->syntax (lambda (r4887@id r4888@datum) (if (r2cce@id? r4887@id) (r2cac@datum->stx r4887@id r4888@datum) (assertion-violation 'datum->syntax '"not an identifier" r4887@id)))) (set! r2fc8@syntax->datum (lambda (r488b@x) (r2ce4@stx->datum r488b@x))) (set! r2fca@compile-r6rs-top-level (lambda (r488d@x*) (call-with-values (lambda () (r2f54@top-level-expander r488d@x*)) (lambda (r4893@r4890 r4894@r4892) ((lambda (r4897@invoke-code r4898@lib*) (lambda () (begin (for-each r2af2@r2993@invoke-library r4898@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (r28cc@r2884@expanded->core r4897@invoke-code)) (void)) (eval-core (r28cc@r2884@expanded->core r4897@invoke-code))))) r4894@r4892 r4893@r4890))))) (set! r2fcc@pre-compile-r6rs-top-level (lambda (r489b@x*) (call-with-values (lambda () (r2f54@top-level-expander r489b@x*)) (lambda (r48a1@r489e r48a2@r48a0) ((lambda (r48a5@invoke-code r48a6@lib*) (begin (for-each r2af2@r2993@invoke-library r48a6@lib*) (r2876@r279e@compile-core (r28cc@r2884@expanded->core r48a5@invoke-code)))) r48a2@r48a0 r48a1@r489e))))) (set! r2fce@interaction-environment ((lambda (r48a9@the-env) (lambda () (or r48a9@the-env ((lambda (r48ab@lib r48ac@rib) (begin ((lambda (r48af@subst) (begin (r2c73@set-rib-sym*! r48ac@rib (map car r48af@subst)) (r2c75@set-rib-mark**! r48ac@rib (map (lambda (r48b1@x) r2c4a@top-mark*) r48af@subst)) (r2c77@set-rib-label*! r48ac@rib (map cdr r48af@subst)))) (r2ac7@r293d@library-subst r48ab@lib)) ((lambda (r48b3@env) (begin (set! r48a9@the-env r48b3@env) r48b3@env)) (r2f80@make-interaction-env r48ac@rib '() '())))) (r2aeb@r2985@find-library-by-name '(mosh interaction)) (r2c7d@make-empty-rib))))) '#f)) (set! r2fd0@top-level-context (r2878@r27a2@make-parameter '#f)) (begin (set! r49c1@r2fd0@top-level-context r2fd0@top-level-context) (set! r49c0@r2fce@interaction-environment r2fce@interaction-environment) (set! r49bf@r2fcc@pre-compile-r6rs-top-level r2fcc@pre-compile-r6rs-top-level) (set! r49be@r2fca@compile-r6rs-top-level r2fca@compile-r6rs-top-level) (set! r49bd@r2fc8@syntax->datum r2fc8@syntax->datum) (set! r49bc@r2fc6@datum->syntax r2fc6@datum->syntax) (set! r49bb@r2fc4@identifier? r2fc4@identifier?) (set! r49ba@r2fc2@syntax-violation r2fc2@syntax-violation) (set! r49b9@r2fc0@syntax-violation* r2fc0@syntax-violation*) (set! r49b8@r2fbe@syntax-error r2fbe@syntax-error) (set! r49b7@r2fbc@assertion-error r2fbc@assertion-error) (set! r49b6@r2fba@expression-position r2fba@expression-position) (set! r49b5@r2fb8@extract-position-condition r2fb8@extract-position-condition) (set! r49b4@r2fb6@make-source-condition r2fb6@make-source-condition) (set! r49b3@r2fb4@bound-identifier=? r2fb4@bound-identifier=?) (set! r49b2@r2fb2@free-identifier=? r2fb2@free-identifier=?) (set! r49b1@r2fb0@generate-temporaries r2fb0@generate-temporaries) (set! r49b0@r2fae@make-export-env/macros r2fae@make-export-env/macros) (set! r49af@r2fac@make-export-subst r2fac@make-export-subst) (set! r49ae@r2faa@build-exports r2faa@build-exports) (set! r49ad@r2fa8@rev-map-append r2fa8@rev-map-append) (set! r49ac@r2fa6@boot-library-expand r2fa6@boot-library-expand) (set! r49ab@r2fa4@library-expander r2fa4@library-expander) (set! r49aa@r2fa2@eval r2fa2@eval) (set! r49a9@r2fa0@expand r2fa0@expand) (set! r49a8@r2f9e@scheme-report-environment r2f9e@scheme-report-environment) (set! r49a7@r2f9c@null-environment r2f9c@null-environment) (set! r49a6@r2f9a@environment r2f9a@environment) (set! r49a5@r2f98@environment-symbols r2f98@environment-symbols) (set! r49a4@r2f96@environment? r2f96@environment?) (set! r49a3@r2f94@parse-binding r2f94@parse-binding) (set! r49a2@r2f92@environment-bindings r2f92@environment-bindings) (set! r49a1@r2f90@interaction-environment-symbols r2f90@interaction-environment-symbols) (set! r49a0@r2f8e@rp r2f8e@rp) (set! r499f@r2f8c@set-interaction-env-locs! r2f8c@set-interaction-env-locs!) (set! r499e@r2f8a@set-interaction-env-r! r2f8a@set-interaction-env-r!) (set! r499d@r2f88@set-interaction-env-rib! r2f88@set-interaction-env-rib!) (set! r499c@r2f86@interaction-env-locs r2f86@interaction-env-locs) (set! r499b@r2f84@interaction-env-r r2f84@interaction-env-r) (set! r499a@r2f82@interaction-env-rib r2f82@interaction-env-rib) (set! r4999@r2f80@make-interaction-env r2f80@make-interaction-env) (set! r4998@r2f7e@interaction-env? r2f7e@interaction-env?) (set! r4997@r2f7b@r2f73 r2f7b@r2f73) (set! r4996@r2f79@r2f74 r2f79@r2f74) (set! r4995@r2f77@r2f72 r2f77@r2f72) (set! r4994@r2f71@rp r2f71@rp) (set! r4993@r2f6f@set-env-itc! r2f6f@set-env-itc!) (set! r4992@r2f6d@set-env-labels! r2f6d@set-env-labels!) (set! r4991@r2f6b@set-env-names! r2f6b@set-env-names!) (set! r4990@r2f69@env-itc r2f69@env-itc) (set! r498f@r2f67@env-labels r2f67@env-labels) (set! r498e@r2f65@env-names r2f65@env-names) (set! r498d@r2f63@make-env r2f63@make-env) (set! r498c@r2f61@env? r2f61@env?) (set! r498b@r2f5e@r2f56 r2f5e@r2f56) (set! r498a@r2f5c@r2f57 r2f5c@r2f57) (set! r4989@r2f5a@r2f55 r2f5a@r2f55) (set! r4988@r2f54@top-level-expander r2f54@top-level-expander) (set! r4987@r2f52@parse-top-level-program r2f52@parse-top-level-program) (set! r4986@r2f50@core-library-expander r2f50@core-library-expander) (set! r4985@r2f4e@library-body-expander r2f4e@library-body-expander) (set! r4984@r2f4c@chi-interaction-expr r2f4c@chi-interaction-expr) (set! r4983@r2f4a@chi-library-internal r2f4a@chi-library-internal) (set! r4982@r2f48@imp-collector r2f48@imp-collector) (set! r4981@r2f46@vis-collector r2f46@vis-collector) (set! r4980@r2f44@inv-collector r2f44@inv-collector) (set! r497f@r2f42@make-collector r2f42@make-collector) (set! r497e@r2f40@make-top-rib r2f40@make-top-rib) (set! r497d@r2f3e@parse-import-spec* r2f3e@parse-import-spec*) (set! r497c@r2f3c@parse-library r2f3c@parse-library) (set! r497b@r2f3a@parse-library-name r2f3a@parse-library-name) (set! r497a@r2f38@parse-exports r2f38@parse-exports) (set! r4979@r2f36@expand-transformer r2f36@expand-transformer) (set! r4978@r2f34@chi-body* r2f34@chi-body*) (set! r4977@r2f32@chi-internal-module r2f32@chi-internal-module) (set! r4976@r2f30@module-interface-exp-id* r2f30@module-interface-exp-id*) (set! r4975@r2f2e@set-module-interface-exp-lab-vec! r2f2e@set-module-interface-exp-lab-vec!) (set! r4974@r2f2c@set-module-interface-exp-id-vec! r2f2c@set-module-interface-exp-id-vec!) (set! r4973@r2f2a@set-module-interface-first-mark! r2f2a@set-module-interface-first-mark!) (set! r4972@r2f28@module-interface-exp-lab-vec r2f28@module-interface-exp-lab-vec) (set! r4971@r2f26@module-interface-exp-id-vec r2f26@module-interface-exp-id-vec) (set! r4970@r2f24@module-interface-first-mark r2f24@module-interface-first-mark) (set! r496f@r2f22@make-module-interface r2f22@make-module-interface) (set! r496e@r2f20@module-interface? r2f20@module-interface?) (set! r496d@r2f1d@r2f15 r2f1d@r2f15) (set! r496c@r2f1b@r2f16 r2f1b@r2f16) (set! r496b@r2f19@r2f14 r2f19@r2f14) (set! r496a@r2f13@parse-module r2f13@parse-module) (set! r4969@r2f11@chi-internal r2f11@chi-internal) (set! r4968@r2f0f@find-dups r2f0f@find-dups) (set! r4967@r2f0d@find-bound=? r2f0d@find-bound=?) (set! r4966@r2f0b@chi-rhs* r2f0b@chi-rhs*) (set! r4965@r2f09@expand-interaction-rhs*/init* r2f09@expand-interaction-rhs*/init*) (set! r4964@r2f07@chi-rhs r2f07@chi-rhs) (set! r4963@r2f05@chi-defun r2f05@chi-defun) (set! r4962@r2f03@chi-lambda-clause* r2f03@chi-lambda-clause*) (set! r4961@r2f01@chi-lambda-clause r2f01@chi-lambda-clause) (set! r4960@r2eff@verify-formals r2eff@verify-formals) (set! r495f@r2efd@chi-set! r2efd@chi-set!) (set! r495e@r2efb@chi-expr r2efb@chi-expr) (set! r495d@r2ef9@chi-application r2ef9@chi-application) (set! r495c@r2ef7@chi-expr* r2ef7@chi-expr*) (set! r495b@r2ef5@chi-global-macro r2ef5@chi-global-macro) (set! r495a@r2ef3@chi-local-macro r2ef3@chi-local-macro) (set! r4959@r2ef1@chi-macro r2ef1@chi-macro) (set! r4958@r2eef@do-macro-call r2eef@do-macro-call) (set! r4957@r2eed@local-macro-transformer r2eed@local-macro-transformer) (set! r4956@r2eeb@macro-transformer r2eeb@macro-transformer) (set! r4955@r2ee9@symbol-macro r2ee9@symbol-macro) (set! r4954@r2ee7@core-macro-transformer r2ee7@core-macro-transformer) (set! r4953@r2ee5@syntax-transformer r2ee5@syntax-transformer) (set! r4952@r2ee3@ellipsis-map r2ee3@ellipsis-map) (set! r4951@r2ee1@syntax-case-transformer r2ee1@syntax-case-transformer) (set! r4950@r2edf@verify-literals r2edf@verify-literals) (set! r494f@r2edd@underscore? r2edd@underscore?) (set! r494e@r2edb@ellipsis? r2edb@ellipsis?) (set! r494d@r2ed9@syntax-dispatch r2ed9@syntax-dispatch) (set! r494c@r2ed7@convert-pattern r2ed7@convert-pattern) (set! r494b@r2ed5@foreign-call-transformer r2ed5@foreign-call-transformer) (set! r494a@r2ed3@parameterize-macro r2ed3@parameterize-macro) (set! r4949@r2ed1@incorrect-usage-macro r2ed1@incorrect-usage-macro) (set! r4948@r2ecf@define-condition-type-macro r2ecf@define-condition-type-macro) (set! r4947@r2ecd@define-record-type-macro r2ecd@define-record-type-macro) (set! r4946@r2ecb@define-struct-macro r2ecb@define-struct-macro) (set! r4945@r2ec9@quasisyntax-macro r2ec9@quasisyntax-macro) (set! r4944@r2ec7@quasiquote-macro r2ec7@quasiquote-macro) (set! r4943@r2ec5@syntax-rules-macro r2ec5@syntax-rules-macro) (set! r4942@r2ec3@include-into-macro r2ec3@include-into-macro) (set! r4941@r2ec1@include-macro r2ec1@include-macro) (set! r4940@r2ebf@do-include r2ebf@do-include) (set! r493f@r2ebd@cond-macro r2ebd@cond-macro) (set! r493e@r2ebb@and-macro r2ebb@and-macro) (set! r493d@r2eb9@or-macro r2eb9@or-macro) (set! r493c@r2eb7@let*-macro r2eb7@let*-macro) (set! r493b@r2eb5@do-macro r2eb5@do-macro) (set! r493a@r2eb3@identifier-syntax-macro r2eb3@identifier-syntax-macro) (set! r4939@r2eb1@endianness-macro r2eb1@endianness-macro) (set! r4938@r2eaf@assert-macro r2eaf@assert-macro) (set! r4937@r2ead@delay-macro r2ead@delay-macro) (set! r4936@r2eab@time-macro r2eab@time-macro) (set! r4935@r2ea9@define-enumeration-macro r2ea9@define-enumeration-macro) (set! r4934@r2ea7@guard-macro r2ea7@guard-macro) (set! r4933@r2ea5@trace-letrec-syntax-macro r2ea5@trace-letrec-syntax-macro) (set! r4932@r2ea3@trace-let-syntax-macro r2ea3@trace-let-syntax-macro) (set! r4931@r2ea1@trace-let/rec-syntax r2ea1@trace-let/rec-syntax) (set! r4930@r2e9f@trace-define-syntax-macro r2e9f@trace-define-syntax-macro) (set! r492f@r2e9d@trace-define-macro r2e9d@trace-define-macro) (set! r492e@r2e9b@trace-lambda-macro r2e9b@trace-lambda-macro) (set! r492d@r2e99@let*-values-macro r2e99@let*-values-macro) (set! r492c@r2e97@let-values-macro r2e97@let-values-macro) (set! r492b@r2e95@let-macro r2e95@let-macro) (set! r492a@r2e93@invalid-fmls-error r2e93@invalid-fmls-error) (set! r4929@r2e91@with-syntax-macro r2e91@with-syntax-macro) (set! r4928@r2e8f@bless r2e8f@bless) (set! r4927@r2e8d@lambda-transformer r2e8d@lambda-transformer) (set! r4926@r2e8b@case-lambda-transformer r2e8b@case-lambda-transformer) (set! r4925@r2e89@quote-transformer r2e89@quote-transformer) (set! r4924@r2e87@case-macro r2e87@case-macro) (set! r4923@r2e85@or-transformer r2e85@or-transformer) (set! r4922@r2e83@and-transformer r2e83@and-transformer) (set! r4921@r2e81@if-transformer r2e81@if-transformer) (set! r4920@r2e7f@unless-macro r2e7f@unless-macro) (set! r491f@r2e7d@when-macro r2e7d@when-macro) (set! r491e@r2e7b@record-constructor-descriptor-transformer r2e7b@record-constructor-descriptor-transformer) (set! r491d@r2e79@record-type-descriptor-transformer r2e79@record-type-descriptor-transformer) (set! r491c@r2e77@type-descriptor-transformer r2e77@type-descriptor-transformer) (set! r491b@r2e75@fluid-let-syntax-transformer r2e75@fluid-let-syntax-transformer) (set! r491a@r2e73@letrec*-transformer r2e73@letrec*-transformer) (set! r4919@r2e71@letrec-transformer r2e71@letrec-transformer) (set! r4918@r2e6f@letrec-helper r2e6f@letrec-helper) (set! r4917@r2e6d@add-lexicals r2e6d@add-lexicals) (set! r4916@r2e6b@add-lexical r2e6b@add-lexical) (set! r4915@r2e69@set-lexical-mutable! r2e69@set-lexical-mutable!) (set! r4914@r2e67@lexical-mutable? r2e67@lexical-mutable?) (set! r4913@r2e65@lexical-var r2e65@lexical-var) (set! r4912@r2e63@scheme-stx r2e63@scheme-stx) (set! r4911@r2e61@scheme-stx-hashtable r2e61@scheme-stx-hashtable) (set! r4910@r2e5f@parse-define-syntax r2e5f@parse-define-syntax) (set! r490f@r2e5d@parse-define r2e5d@parse-define) (set! r490e@r2d0c@make-eval-transformer r2d0c@make-eval-transformer) (set! r490d@r2d0a@variable-transformer-procedure r2d0a@variable-transformer-procedure) (set! r490c@r2d08@variable-transformer? r2d08@variable-transformer?) (set! r490b@r2d06@make-variable-transformer r2d06@make-variable-transformer) (set! r490a@r2d04@sanitize-binding r2d04@sanitize-binding) (set! r4909@r2cf6@syntax-type r2cf6@syntax-type) (set! r4908@r2cf4@raise-unbound-error r2cf4@raise-unbound-error) (set! r4907@r2cf2@binding-value r2cf2@binding-value) (set! r4906@r2cf0@binding-type r2cf0@binding-type) (set! r4905@r2cee@make-binding r2cee@make-binding) (set! r4904@r2cec@label->binding r2cec@label->binding) (set! r4903@r2cea@id->real-label r2cea@id->real-label) (set! r4902@r2ce8@id->label r2ce8@id->label) (set! r4901@r2ce6@same-marks*? r2ce6@same-marks*?) (set! r4900@r2ce4@stx->datum r2ce4@stx->datum) (set! r48ff@r2ce2@strip r2ce2@strip) (set! r48fe@r2ce0@strip-annotations r2ce0@strip-annotations) (set! r48fd@r2cde@self-evaluating? r2cde@self-evaluating?) (set! r48fc@r2cdc@bound-id-member? r2cdc@bound-id-member?) (set! r48fb@r2cda@distinct-bound-ids? r2cda@distinct-bound-ids?) (set! r48fa@r2cd8@valid-bound-ids? r2cd8@valid-bound-ids?) (set! r48f9@r2cd6@free-id=? r2cd6@free-id=?) (set! r48f8@r2cd4@bound-id=? r2cd4@bound-id=?) (set! r48f7@r2cd2@same-marks? r2cd2@same-marks?) (set! r48f6@r2cd0@id->sym r2cd0@id->sym) (set! r48f5@r2cce@id? r2cce@id?) (set! r48f4@r2ccc@syntax->list r2ccc@syntax->list) (set! r48f3@r2cca@syntax-cdr r2cca@syntax-cdr) (set! r48f2@r2cc8@syntax-car r2cc8@syntax-car) (set! r48f1@r2cc6@syntax-list? r2cc6@syntax-list?) (set! r48f0@r2cc4@syntax-null? r2cc4@syntax-null?) (set! r48ef@r2cc2@syntax-vector? r2cc2@syntax-vector?) (set! r48ee@r2cc0@syntax-pair? r2cc0@syntax-pair?) (set! r48ed@r2cbe@syntax-vector->list r2cbe@syntax-vector->list) (set! r48ec@r2cbc@syntax-kind? r2cbc@syntax-kind?) (set! r48eb@r2cba@add-subst r2cba@add-subst) (set! r48ea@r2cb8@add-mark r2cb8@add-mark) (set! r48e9@r2cb6@mkstx r2cb6@mkstx) (set! r48e8@r2cb4@join-wraps r2cb4@join-wraps) (set! r48e7@r2cb2@anti-mark? r2cb2@anti-mark?) (set! r48e6@r2cb0@anti-mark r2cb0@anti-mark) (set! r48e5@r2cae@gen-mark r2cae@gen-mark) (set! r48e4@r2cac@datum->stx r2cac@datum->stx) (set! r48e3@r2caa@rp r2caa@rp) (set! r48e2@r2ca8@set-stx-ae*! r2ca8@set-stx-ae*!) (set! r48e1@r2ca6@set-stx-subst*! r2ca6@set-stx-subst*!) (set! r48e0@r2ca4@set-stx-mark*! r2ca4@set-stx-mark*!) (set! r48df@r2ca2@set-stx-expr! r2ca2@set-stx-expr!) (set! r48de@r2ca0@stx-ae* r2ca0@stx-ae*) (set! r48dd@r2c9e@stx-subst* r2c9e@stx-subst*) (set! r48dc@r2c9c@stx-mark* r2c9c@stx-mark*) (set! r48db@r2c9a@stx-expr r2c9a@stx-expr) (set! r48da@r2c98@make-stx r2c98@make-stx) (set! r48d9@r2c96@stx? r2c96@stx?) (set! r48d8@r2c93@r2c8b r2c93@r2c8b) (set! r48d7@r2c91@r2c8c r2c91@r2c8c) (set! r48d6@r2c8f@r2c8a r2c8f@r2c8a) (set! r48d5@r2c89@make-full-rib r2c89@make-full-rib) (set! r48d4@r2c87@unseal-rib! r2c87@unseal-rib!) (set! r48d3@r2c85@seal-rib! r2c85@seal-rib!) (set! r48d2@r2c83@make-rib-map r2c83@make-rib-map) (set! r48d1@r2c81@extend-rib/nc! r2c81@extend-rib/nc!) (set! r48d0@r2c7f@extend-rib! r2c7f@extend-rib!) (set! r48cf@r2c7d@make-empty-rib r2c7d@make-empty-rib) (set! r48ce@r2c7b@set-rib-cache! r2c7b@set-rib-cache!) (set! r48cd@r2c79@set-rib-sealed/freq! r2c79@set-rib-sealed/freq!) (set! r48cc@r2c77@set-rib-label*! r2c77@set-rib-label*!) (set! r48cb@r2c75@set-rib-mark**! r2c75@set-rib-mark**!) (set! r48ca@r2c73@set-rib-sym*! r2c73@set-rib-sym*!) (set! r48c9@r2c71@rib-cache r2c71@rib-cache) (set! r48c8@r2c6f@rib-sealed/freq r2c6f@rib-sealed/freq) (set! r48c7@r2c6d@rib-label* r2c6d@rib-label*) (set! r48c6@r2c6b@rib-mark** r2c6b@rib-mark**) (set! r48c5@r2c69@rib-sym* r2c69@rib-sym*) (set! r48c4@r2c67@make-rib r2c67@make-rib) (set! r48c3@r2c65@rib? r2c65@rib?) (set! r48c2@r2c62@r2c5a r2c62@r2c5a) (set! r48c1@r2c60@r2c5b r2c60@r2c5b) (set! r48c0@r2c5e@r2c59 r2c5e@r2c59) (set! r48bf@r2c58@gen-define-label r2c58@gen-define-label) (set! r48be@r2c56@gen-define-label+loc r2c56@gen-define-label+loc) (set! r48bd@r2c54@gen-top-level-label r2c54@gen-top-level-label) (set! r48bc@r2c52@gen-label r2c52@gen-label) (set! r48bb@r2c50@gen-global r2c50@gen-global) (set! r48ba@r2c4e@gen-lexical r2c4e@gen-lexical) (set! r48b9@r2c4c@top-marked? r2c4c@top-marked?) (set! r48b8@r2c4a@top-mark* r2c4a@top-mark*) (set! r48b7@r2c45@set-union r2c45@set-union) (set! r48b6@r2c43@set-cons r2c43@set-cons) (set! r48b5@r2c41@file-options-macro r2c41@file-options-macro) (r2ae8@r297f@current-library-expander r2fa4@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (r49cb@r49c6 r49cd@r49c8 r49cf@r49c7 r49d2@&condition? r49d4@make-&condition r49d6@&condition-rtd r49d8@&condition-rcd r4a24@r4a1f r4a26@r4a21 r4a28@r4a20 r4a2b@p? r4a2d@make-message-condition r4a2f@r4a1e r4a31@message-condition? r4a33@condition-message r4a35@&message-rtd r4a37@&message-rcd r4a3d@r4a38 r4a3f@r4a3a r4a41@r4a39 r4a44@p? r4a46@make-warning r4a48@warning? r4a4a@&warning-rtd r4a4c@&warning-rcd r4a52@r4a4d r4a54@r4a4f r4a56@r4a4e r4a59@p? r4a5b@make-serious-condition r4a5d@serious-condition? r4a5f@&serious-rtd r4a61@&serious-rcd r4a67@r4a62 r4a69@r4a64 r4a6b@r4a63 r4a6e@p? r4a70@make-error r4a72@error? r4a74@&error-rtd r4a76@&error-rcd r4a7c@r4a77 r4a7e@r4a79 r4a80@r4a78 r4a83@p? r4a85@make-violation r4a87@violation? r4a89@&violation-rtd r4a8b@&violation-rcd r4a91@r4a8c r4a93@r4a8e r4a95@r4a8d r4a98@p? r4a9a@make-assertion-violation r4a9c@assertion-violation? r4a9e@&assertion-rtd r4aa0@&assertion-rcd r4aa8@r4aa3 r4aaa@r4aa5 r4aac@r4aa4 r4aaf@p? r4ab1@make-irritants-condition r4ab3@r4aa2 r4ab5@irritants-condition? r4ab7@condition-irritants r4ab9@&irritants-rtd r4abb@&irritants-rcd r4ac3@r4abe r4ac5@r4ac0 r4ac7@r4abf r4aca@p? r4acc@make-who-condition r4ace@r4abd r4ad0@who-condition? r4ad2@condition-who r4ad4@&who-rtd r4ad6@&who-rcd r4adc@r4ad7 r4ade@r4ad9 r4ae0@r4ad8 r4ae3@p? r4ae5@make-non-continuable-violation r4ae7@non-continuable-violation? r4ae9@&non-continuable-rtd r4aeb@&non-continuable-rcd r4af1@r4aec r4af3@r4aee r4af5@r4aed r4af8@p? r4afa@make-implementation-restriction-violation r4afc@implementation-restriction-violation? r4afe@&implementation-restriction-rtd r4b00@&implementation-restriction-rcd r4b06@r4b01 r4b08@r4b03 r4b0a@r4b02 r4b0d@p? r4b0f@make-lexical-violation r4b11@lexical-violation? r4b13@&lexical-rtd r4b15@&lexical-rcd r4b1f@r4b1a r4b21@r4b1c r4b23@r4b1b r4b26@p? r4b28@make-syntax-violation r4b2a@r4b17 r4b2c@r4b19 r4b2e@syntax-violation? r4b30@syntax-violation-form r4b32@syntax-violation-subform r4b34@&syntax-rtd r4b36@&syntax-rcd r4b3c@r4b37 r4b3e@r4b39 r4b40@r4b38 r4b43@p? r4b45@make-undefined-violation r4b47@undefined-violation? r4b49@&undefined-rtd r4b4b@&undefined-rcd r4b51@r4b4c r4b53@r4b4e r4b55@r4b4d r4b58@p? r4b5a@make-i/o-error r4b5c@i/o-error? r4b5e@&i/o-rtd r4b60@&i/o-rcd r4b66@r4b61 r4b68@r4b63 r4b6a@r4b62 r4b6d@p? r4b6f@make-i/o-read-error r4b71@i/o-read-error? r4b73@&i/o-read-rtd r4b75@&i/o-read-rcd r4b7b@r4b76 r4b7d@r4b78 r4b7f@r4b77 r4b82@p? r4b84@make-i/o-write-error r4b86@i/o-write-error? r4b88@&i/o-write-rtd r4b8a@&i/o-write-rcd r4b92@r4b8d r4b94@r4b8f r4b96@r4b8e r4b99@p? r4b9b@make-i/o-invalid-position-error r4b9d@r4b8c r4b9f@i/o-invalid-position-error? r4ba1@i/o-error-position r4ba3@&i/o-invalid-position-rtd r4ba5@&i/o-invalid-position-rcd r4bad@r4ba8 r4baf@r4baa r4bb1@r4ba9 r4bb4@p? r4bb6@make-i/o-filename-error r4bb8@r4ba7 r4bba@i/o-filename-error? r4bbc@i/o-error-filename r4bbe@&i/o-filename-rtd r4bc0@&i/o-filename-rcd r4bc6@r4bc1 r4bc8@r4bc3 r4bca@r4bc2 r4bcd@p? r4bcf@make-i/o-file-protection-error r4bd1@i/o-file-protection-error? r4bd3@&i/o-file-protection-rtd r4bd5@&i/o-file-protection-rcd r4bdb@r4bd6 r4bdd@r4bd8 r4bdf@r4bd7 r4be2@p? r4be4@make-i/o-file-is-read-only-error r4be6@i/o-file-is-read-only-error? r4be8@&i/o-file-is-read-only-rtd r4bea@&i/o-file-is-read-only-rcd r4bf0@r4beb r4bf2@r4bed r4bf4@r4bec r4bf7@p? r4bf9@make-i/o-file-already-exists-error r4bfb@i/o-file-already-exists-error? r4bfd@&i/o-file-already-exists-rtd r4bff@&i/o-file-already-exists-rcd r4c05@r4c00 r4c07@r4c02 r4c09@r4c01 r4c0c@p? r4c0e@make-i/o-file-does-not-exist-error r4c10@i/o-file-does-not-exist-error? r4c12@&i/o-file-does-not-exist-rtd r4c14@&i/o-file-does-not-exist-rcd r4c1c@r4c17 r4c1e@r4c19 r4c20@r4c18 r4c23@p? r4c25@make-i/o-port-error r4c27@r4c16 r4c29@i/o-port-error? r4c2b@i/o-error-port r4c2d@&i/o-port-rtd r4c2f@&i/o-port-rcd r4c35@r4c30 r4c37@r4c32 r4c39@r4c31 r4c3c@p? r4c3e@make-i/o-decoding-error r4c40@i/o-decoding-error? r4c42@&i/o-decoding-rtd r4c44@&i/o-decoding-rcd r4c4c@r4c47 r4c4e@r4c49 r4c50@r4c48 r4c53@p? r4c55@make-i/o-encoding-error r4c57@r4c46 r4c59@i/o-encoding-error? r4c5b@i/o-encoding-error-char r4c5d@&i/o-encoding-rtd r4c5f@&i/o-encoding-rcd r4c65@r4c60 r4c67@r4c62 r4c69@r4c61 r4c6c@p? r4c6e@make-no-infinities-violation r4c70@no-infinities-violation? r4c72@&no-infinities-rtd r4c74@&no-infinities-rcd r4c7a@r4c75 r4c7c@r4c77 r4c7e@r4c76 r4c81@p? r4c83@make-no-nans-violation r4c85@no-nans-violation? r4c87@&no-nans-rtd r4c89@&no-nans-rcd) (begin (set! r49cb@r49c6 (make-record-type-descriptor '&condition '#f 'r49c9 '#f '#f '#())) (set! r49cd@r49c8 '#f) (set! r49cf@r49c7 (make-record-constructor-descriptor r49cb@r49c6 '#f r49cd@r49c8)) (set! r49d2@&condition? (record-predicate r49cb@r49c6)) (set! r49d4@make-&condition (record-constructor r49cf@r49c7)) (set! r49d6@&condition-rtd r49cb@r49c6) (set! r49d8@&condition-rcd r49cf@r49c7) (set! r4a24@r4a1f (make-record-type-descriptor '&message r49cb@r49c6 'r4a22 '#f '#f '#((immutable message)))) (set! r4a26@r4a21 '#f) (set! r4a28@r4a20 (make-record-constructor-descriptor r4a24@r4a1f r49cf@r49c7 r4a26@r4a21)) (set! r4a2b@p? (record-predicate r4a24@r4a1f)) (set! r4a2d@make-message-condition (record-constructor r4a28@r4a20)) (set! r4a2f@r4a1e (record-accessor r4a24@r4a1f '0)) (set! r4a31@message-condition? (condition-predicate r4a24@r4a1f)) (set! r4a33@condition-message (condition-accessor r4a24@r4a1f r4a2f@r4a1e)) (set! r4a35@&message-rtd r4a24@r4a1f) (set! r4a37@&message-rcd r4a28@r4a20) (set! r4a3d@r4a38 (make-record-type-descriptor '&warning r49cb@r49c6 'r4a3b '#f '#f '#())) (set! r4a3f@r4a3a '#f) (set! r4a41@r4a39 (make-record-constructor-descriptor r4a3d@r4a38 r49cf@r49c7 r4a3f@r4a3a)) (set! r4a44@p? (record-predicate r4a3d@r4a38)) (set! r4a46@make-warning (record-constructor r4a41@r4a39)) (set! r4a48@warning? (condition-predicate r4a3d@r4a38)) (set! r4a4a@&warning-rtd r4a3d@r4a38) (set! r4a4c@&warning-rcd r4a41@r4a39) (set! r4a52@r4a4d (make-record-type-descriptor '&serious r49cb@r49c6 'r4a50 '#f '#f '#())) (set! r4a54@r4a4f '#f) (set! r4a56@r4a4e (make-record-constructor-descriptor r4a52@r4a4d r49cf@r49c7 r4a54@r4a4f)) (set! r4a59@p? (record-predicate r4a52@r4a4d)) (set! r4a5b@make-serious-condition (record-constructor r4a56@r4a4e)) (set! r4a5d@serious-condition? (condition-predicate r4a52@r4a4d)) (set! r4a5f@&serious-rtd r4a52@r4a4d) (set! r4a61@&serious-rcd r4a56@r4a4e) (set! r4a67@r4a62 (make-record-type-descriptor '&error r4a52@r4a4d 'r4a65 '#f '#f '#())) (set! r4a69@r4a64 '#f) (set! r4a6b@r4a63 (make-record-constructor-descriptor r4a67@r4a62 r4a56@r4a4e r4a69@r4a64)) (set! r4a6e@p? (record-predicate r4a67@r4a62)) (set! r4a70@make-error (record-constructor r4a6b@r4a63)) (set! r4a72@error? (condition-predicate r4a67@r4a62)) (set! r4a74@&error-rtd r4a67@r4a62) (set! r4a76@&error-rcd r4a6b@r4a63) (set! r4a7c@r4a77 (make-record-type-descriptor '&violation r4a52@r4a4d 'r4a7a '#f '#f '#())) (set! r4a7e@r4a79 '#f) (set! r4a80@r4a78 (make-record-constructor-descriptor r4a7c@r4a77 r4a56@r4a4e r4a7e@r4a79)) (set! r4a83@p? (record-predicate r4a7c@r4a77)) (set! r4a85@make-violation (record-constructor r4a80@r4a78)) (set! r4a87@violation? (condition-predicate r4a7c@r4a77)) (set! r4a89@&violation-rtd r4a7c@r4a77) (set! r4a8b@&violation-rcd r4a80@r4a78) (set! r4a91@r4a8c (make-record-type-descriptor '&assertion r4a7c@r4a77 'r4a8f '#f '#f '#())) (set! r4a93@r4a8e '#f) (set! r4a95@r4a8d (make-record-constructor-descriptor r4a91@r4a8c r4a80@r4a78 r4a93@r4a8e)) (set! r4a98@p? (record-predicate r4a91@r4a8c)) (set! r4a9a@make-assertion-violation (record-constructor r4a95@r4a8d)) (set! r4a9c@assertion-violation? (condition-predicate r4a91@r4a8c)) (set! r4a9e@&assertion-rtd r4a91@r4a8c) (set! r4aa0@&assertion-rcd r4a95@r4a8d) (set! r4aa8@r4aa3 (make-record-type-descriptor '&irritants r49cb@r49c6 'r4aa6 '#f '#f '#((immutable irritants)))) (set! r4aaa@r4aa5 '#f) (set! r4aac@r4aa4 (make-record-constructor-descriptor r4aa8@r4aa3 r49cf@r49c7 r4aaa@r4aa5)) (set! r4aaf@p? (record-predicate r4aa8@r4aa3)) (set! r4ab1@make-irritants-condition (record-constructor r4aac@r4aa4)) (set! r4ab3@r4aa2 (record-accessor r4aa8@r4aa3 '0)) (set! r4ab5@irritants-condition? (condition-predicate r4aa8@r4aa3)) (set! r4ab7@condition-irritants (condition-accessor r4aa8@r4aa3 r4ab3@r4aa2)) (set! r4ab9@&irritants-rtd r4aa8@r4aa3) (set! r4abb@&irritants-rcd r4aac@r4aa4) (set! r4ac3@r4abe (make-record-type-descriptor '&who r49cb@r49c6 'r4ac1 '#f '#f '#((immutable who)))) (set! r4ac5@r4ac0 '#f) (set! r4ac7@r4abf (make-record-constructor-descriptor r4ac3@r4abe r49cf@r49c7 r4ac5@r4ac0)) (set! r4aca@p? (record-predicate r4ac3@r4abe)) (set! r4acc@make-who-condition (record-constructor r4ac7@r4abf)) (set! r4ace@r4abd (record-accessor r4ac3@r4abe '0)) (set! r4ad0@who-condition? (condition-predicate r4ac3@r4abe)) (set! r4ad2@condition-who (condition-accessor r4ac3@r4abe r4ace@r4abd)) (set! r4ad4@&who-rtd r4ac3@r4abe) (set! r4ad6@&who-rcd r4ac7@r4abf) (set! r4adc@r4ad7 (make-record-type-descriptor '&non-continuable r4a7c@r4a77 'r4ada '#f '#f '#())) (set! r4ade@r4ad9 '#f) (set! r4ae0@r4ad8 (make-record-constructor-descriptor r4adc@r4ad7 r4a80@r4a78 r4ade@r4ad9)) (set! r4ae3@p? (record-predicate r4adc@r4ad7)) (set! r4ae5@make-non-continuable-violation (record-constructor r4ae0@r4ad8)) (set! r4ae7@non-continuable-violation? (condition-predicate r4adc@r4ad7)) (set! r4ae9@&non-continuable-rtd r4adc@r4ad7) (set! r4aeb@&non-continuable-rcd r4ae0@r4ad8) (set! r4af1@r4aec (make-record-type-descriptor '&implementation-restriction r4a7c@r4a77 'r4aef '#f '#f '#())) (set! r4af3@r4aee '#f) (set! r4af5@r4aed (make-record-constructor-descriptor r4af1@r4aec r4a80@r4a78 r4af3@r4aee)) (set! r4af8@p? (record-predicate r4af1@r4aec)) (set! r4afa@make-implementation-restriction-violation (record-constructor r4af5@r4aed)) (set! r4afc@implementation-restriction-violation? (condition-predicate r4af1@r4aec)) (set! r4afe@&implementation-restriction-rtd r4af1@r4aec) (set! r4b00@&implementation-restriction-rcd r4af5@r4aed) (set! r4b06@r4b01 (make-record-type-descriptor '&lexical r4a7c@r4a77 'r4b04 '#f '#f '#())) (set! r4b08@r4b03 '#f) (set! r4b0a@r4b02 (make-record-constructor-descriptor r4b06@r4b01 r4a80@r4a78 r4b08@r4b03)) (set! r4b0d@p? (record-predicate r4b06@r4b01)) (set! r4b0f@make-lexical-violation (record-constructor r4b0a@r4b02)) (set! r4b11@lexical-violation? (condition-predicate r4b06@r4b01)) (set! r4b13@&lexical-rtd r4b06@r4b01) (set! r4b15@&lexical-rcd r4b0a@r4b02) (set! r4b1f@r4b1a (make-record-type-descriptor '&syntax r4a7c@r4a77 'r4b1d '#f '#f '#((immutable form) (immutable subform)))) (set! r4b21@r4b1c '#f) (set! r4b23@r4b1b (make-record-constructor-descriptor r4b1f@r4b1a r4a80@r4a78 r4b21@r4b1c)) (set! r4b26@p? (record-predicate r4b1f@r4b1a)) (set! r4b28@make-syntax-violation (record-constructor r4b23@r4b1b)) (set! r4b2a@r4b17 (record-accessor r4b1f@r4b1a '0)) (set! r4b2c@r4b19 (record-accessor r4b1f@r4b1a '1)) (set! r4b2e@syntax-violation? (condition-predicate r4b1f@r4b1a)) (set! r4b30@syntax-violation-form (condition-accessor r4b1f@r4b1a r4b2a@r4b17)) (set! r4b32@syntax-violation-subform (condition-accessor r4b1f@r4b1a r4b2c@r4b19)) (set! r4b34@&syntax-rtd r4b1f@r4b1a) (set! r4b36@&syntax-rcd r4b23@r4b1b) (set! r4b3c@r4b37 (make-record-type-descriptor '&undefined r4a7c@r4a77 'r4b3a '#f '#f '#())) (set! r4b3e@r4b39 '#f) (set! r4b40@r4b38 (make-record-constructor-descriptor r4b3c@r4b37 r4a80@r4a78 r4b3e@r4b39)) (set! r4b43@p? (record-predicate r4b3c@r4b37)) (set! r4b45@make-undefined-violation (record-constructor r4b40@r4b38)) (set! r4b47@undefined-violation? (condition-predicate r4b3c@r4b37)) (set! r4b49@&undefined-rtd r4b3c@r4b37) (set! r4b4b@&undefined-rcd r4b40@r4b38) (set! r4b51@r4b4c (make-record-type-descriptor '&i/o r4a67@r4a62 'r4b4f '#f '#f '#())) (set! r4b53@r4b4e '#f) (set! r4b55@r4b4d (make-record-constructor-descriptor r4b51@r4b4c r4a6b@r4a63 r4b53@r4b4e)) (set! r4b58@p? (record-predicate r4b51@r4b4c)) (set! r4b5a@make-i/o-error (record-constructor r4b55@r4b4d)) (set! r4b5c@i/o-error? (condition-predicate r4b51@r4b4c)) (set! r4b5e@&i/o-rtd r4b51@r4b4c) (set! r4b60@&i/o-rcd r4b55@r4b4d) (set! r4b66@r4b61 (make-record-type-descriptor '&i/o-read r4b51@r4b4c 'r4b64 '#f '#f '#())) (set! r4b68@r4b63 '#f) (set! r4b6a@r4b62 (make-record-constructor-descriptor r4b66@r4b61 r4b55@r4b4d r4b68@r4b63)) (set! r4b6d@p? (record-predicate r4b66@r4b61)) (set! r4b6f@make-i/o-read-error (record-constructor r4b6a@r4b62)) (set! r4b71@i/o-read-error? (condition-predicate r4b66@r4b61)) (set! r4b73@&i/o-read-rtd r4b66@r4b61) (set! r4b75@&i/o-read-rcd r4b6a@r4b62) (set! r4b7b@r4b76 (make-record-type-descriptor '&i/o-write r4b51@r4b4c 'r4b79 '#f '#f '#())) (set! r4b7d@r4b78 '#f) (set! r4b7f@r4b77 (make-record-constructor-descriptor r4b7b@r4b76 r4b55@r4b4d r4b7d@r4b78)) (set! r4b82@p? (record-predicate r4b7b@r4b76)) (set! r4b84@make-i/o-write-error (record-constructor r4b7f@r4b77)) (set! r4b86@i/o-write-error? (condition-predicate r4b7b@r4b76)) (set! r4b88@&i/o-write-rtd r4b7b@r4b76) (set! r4b8a@&i/o-write-rcd r4b7f@r4b77) (set! r4b92@r4b8d (make-record-type-descriptor '&i/o-invalid-position r4b51@r4b4c 'r4b90 '#f '#f '#((immutable position)))) (set! r4b94@r4b8f '#f) (set! r4b96@r4b8e (make-record-constructor-descriptor r4b92@r4b8d r4b55@r4b4d r4b94@r4b8f)) (set! r4b99@p? (record-predicate r4b92@r4b8d)) (set! r4b9b@make-i/o-invalid-position-error (record-constructor r4b96@r4b8e)) (set! r4b9d@r4b8c (record-accessor r4b92@r4b8d '0)) (set! r4b9f@i/o-invalid-position-error? (condition-predicate r4b92@r4b8d)) (set! r4ba1@i/o-error-position (condition-accessor r4b92@r4b8d r4b9d@r4b8c)) (set! r4ba3@&i/o-invalid-position-rtd r4b92@r4b8d) (set! r4ba5@&i/o-invalid-position-rcd r4b96@r4b8e) (set! r4bad@r4ba8 (make-record-type-descriptor '&i/o-filename r4b51@r4b4c 'r4bab '#f '#f '#((immutable filename)))) (set! r4baf@r4baa '#f) (set! r4bb1@r4ba9 (make-record-constructor-descriptor r4bad@r4ba8 r4b55@r4b4d r4baf@r4baa)) (set! r4bb4@p? (record-predicate r4bad@r4ba8)) (set! r4bb6@make-i/o-filename-error (record-constructor r4bb1@r4ba9)) (set! r4bb8@r4ba7 (record-accessor r4bad@r4ba8 '0)) (set! r4bba@i/o-filename-error? (condition-predicate r4bad@r4ba8)) (set! r4bbc@i/o-error-filename (condition-accessor r4bad@r4ba8 r4bb8@r4ba7)) (set! r4bbe@&i/o-filename-rtd r4bad@r4ba8) (set! r4bc0@&i/o-filename-rcd r4bb1@r4ba9) (set! r4bc6@r4bc1 (make-record-type-descriptor '&i/o-file-protection r4bad@r4ba8 'r4bc4 '#f '#f '#())) (set! r4bc8@r4bc3 '#f) (set! r4bca@r4bc2 (make-record-constructor-descriptor r4bc6@r4bc1 r4bb1@r4ba9 r4bc8@r4bc3)) (set! r4bcd@p? (record-predicate r4bc6@r4bc1)) (set! r4bcf@make-i/o-file-protection-error (record-constructor r4bca@r4bc2)) (set! r4bd1@i/o-file-protection-error? (condition-predicate r4bc6@r4bc1)) (set! r4bd3@&i/o-file-protection-rtd r4bc6@r4bc1) (set! r4bd5@&i/o-file-protection-rcd r4bca@r4bc2) (set! r4bdb@r4bd6 (make-record-type-descriptor '&i/o-file-is-read-only r4bc6@r4bc1 'r4bd9 '#f '#f '#())) (set! r4bdd@r4bd8 '#f) (set! r4bdf@r4bd7 (make-record-constructor-descriptor r4bdb@r4bd6 r4bca@r4bc2 r4bdd@r4bd8)) (set! r4be2@p? (record-predicate r4bdb@r4bd6)) (set! r4be4@make-i/o-file-is-read-only-error (record-constructor r4bdf@r4bd7)) (set! r4be6@i/o-file-is-read-only-error? (condition-predicate r4bdb@r4bd6)) (set! r4be8@&i/o-file-is-read-only-rtd r4bdb@r4bd6) (set! r4bea@&i/o-file-is-read-only-rcd r4bdf@r4bd7) (set! r4bf0@r4beb (make-record-type-descriptor '&i/o-file-already-exists r4bad@r4ba8 'r4bee '#f '#f '#())) (set! r4bf2@r4bed '#f) (set! r4bf4@r4bec (make-record-constructor-descriptor r4bf0@r4beb r4bb1@r4ba9 r4bf2@r4bed)) (set! r4bf7@p? (record-predicate r4bf0@r4beb)) (set! r4bf9@make-i/o-file-already-exists-error (record-constructor r4bf4@r4bec)) (set! r4bfb@i/o-file-already-exists-error? (condition-predicate r4bf0@r4beb)) (set! r4bfd@&i/o-file-already-exists-rtd r4bf0@r4beb) (set! r4bff@&i/o-file-already-exists-rcd r4bf4@r4bec) (set! r4c05@r4c00 (make-record-type-descriptor '&i/o-file-does-not-exist r4bad@r4ba8 'r4c03 '#f '#f '#())) (set! r4c07@r4c02 '#f) (set! r4c09@r4c01 (make-record-constructor-descriptor r4c05@r4c00 r4bb1@r4ba9 r4c07@r4c02)) (set! r4c0c@p? (record-predicate r4c05@r4c00)) (set! r4c0e@make-i/o-file-does-not-exist-error (record-constructor r4c09@r4c01)) (set! r4c10@i/o-file-does-not-exist-error? (condition-predicate r4c05@r4c00)) (set! r4c12@&i/o-file-does-not-exist-rtd r4c05@r4c00) (set! r4c14@&i/o-file-does-not-exist-rcd r4c09@r4c01) (set! r4c1c@r4c17 (make-record-type-descriptor '&i/o-port r4b51@r4b4c 'r4c1a '#f '#f '#((immutable port)))) (set! r4c1e@r4c19 '#f) (set! r4c20@r4c18 (make-record-constructor-descriptor r4c1c@r4c17 r4b55@r4b4d r4c1e@r4c19)) (set! r4c23@p? (record-predicate r4c1c@r4c17)) (set! r4c25@make-i/o-port-error (record-constructor r4c20@r4c18)) (set! r4c27@r4c16 (record-accessor r4c1c@r4c17 '0)) (set! r4c29@i/o-port-error? (condition-predicate r4c1c@r4c17)) (set! r4c2b@i/o-error-port (condition-accessor r4c1c@r4c17 r4c27@r4c16)) (set! r4c2d@&i/o-port-rtd r4c1c@r4c17) (set! r4c2f@&i/o-port-rcd r4c20@r4c18) (set! r4c35@r4c30 (make-record-type-descriptor '&i/o-decoding r4c1c@r4c17 'r4c33 '#f '#f '#())) (set! r4c37@r4c32 '#f) (set! r4c39@r4c31 (make-record-constructor-descriptor r4c35@r4c30 r4c20@r4c18 r4c37@r4c32)) (set! r4c3c@p? (record-predicate r4c35@r4c30)) (set! r4c3e@make-i/o-decoding-error (record-constructor r4c39@r4c31)) (set! r4c40@i/o-decoding-error? (condition-predicate r4c35@r4c30)) (set! r4c42@&i/o-decoding-rtd r4c35@r4c30) (set! r4c44@&i/o-decoding-rcd r4c39@r4c31) (set! r4c4c@r4c47 (make-record-type-descriptor '&i/o-encoding r4c1c@r4c17 'r4c4a '#f '#f '#((immutable char)))) (set! r4c4e@r4c49 '#f) (set! r4c50@r4c48 (make-record-constructor-descriptor r4c4c@r4c47 r4c20@r4c18 r4c4e@r4c49)) (set! r4c53@p? (record-predicate r4c4c@r4c47)) (set! r4c55@make-i/o-encoding-error (record-constructor r4c50@r4c48)) (set! r4c57@r4c46 (record-accessor r4c4c@r4c47 '0)) (set! r4c59@i/o-encoding-error? (condition-predicate r4c4c@r4c47)) (set! r4c5b@i/o-encoding-error-char (condition-accessor r4c4c@r4c47 r4c57@r4c46)) (set! r4c5d@&i/o-encoding-rtd r4c4c@r4c47) (set! r4c5f@&i/o-encoding-rcd r4c50@r4c48) (set! r4c65@r4c60 (make-record-type-descriptor '&no-infinities r4af1@r4aec 'r4c63 '#f '#f '#())) (set! r4c67@r4c62 '#f) (set! r4c69@r4c61 (make-record-constructor-descriptor r4c65@r4c60 r4af5@r4aed r4c67@r4c62)) (set! r4c6c@p? (record-predicate r4c65@r4c60)) (set! r4c6e@make-no-infinities-violation (record-constructor r4c69@r4c61)) (set! r4c70@no-infinities-violation? (condition-predicate r4c65@r4c60)) (set! r4c72@&no-infinities-rtd r4c65@r4c60) (set! r4c74@&no-infinities-rcd r4c69@r4c61) (set! r4c7a@r4c75 (make-record-type-descriptor '&no-nans r4af1@r4aec 'r4c78 '#f '#f '#())) (set! r4c7c@r4c77 '#f) (set! r4c7e@r4c76 (make-record-constructor-descriptor r4c7a@r4c75 r4af5@r4aed r4c7c@r4c77)) (set! r4c81@p? (record-predicate r4c7a@r4c75)) (set! r4c83@make-no-nans-violation (record-constructor r4c7e@r4c76)) (set! r4c85@no-nans-violation? (condition-predicate r4c7a@r4c75)) (set! r4c87@&no-nans-rtd r4c7a@r4c75) (set! r4c89@&no-nans-rcd r4c7e@r4c76) (begin (set! r4d7a@r4c89@&no-nans-rcd r4c89@&no-nans-rcd) (set! r4d79@r4c87@&no-nans-rtd r4c87@&no-nans-rtd) (set! r4d78@r4c85@no-nans-violation? r4c85@no-nans-violation?) (set! r4d77@r4c83@make-no-nans-violation r4c83@make-no-nans-violation) (set! r4d76@r4c81@p? r4c81@p?) (set! r4d75@r4c7e@r4c76 r4c7e@r4c76) (set! r4d74@r4c7c@r4c77 r4c7c@r4c77) (set! r4d73@r4c7a@r4c75 r4c7a@r4c75) (set! r4d72@r4c74@&no-infinities-rcd r4c74@&no-infinities-rcd) (set! r4d71@r4c72@&no-infinities-rtd r4c72@&no-infinities-rtd) (set! r4d70@r4c70@no-infinities-violation? r4c70@no-infinities-violation?) (set! r4d6f@r4c6e@make-no-infinities-violation r4c6e@make-no-infinities-violation) (set! r4d6e@r4c6c@p? r4c6c@p?) (set! r4d6d@r4c69@r4c61 r4c69@r4c61) (set! r4d6c@r4c67@r4c62 r4c67@r4c62) (set! r4d6b@r4c65@r4c60 r4c65@r4c60) (set! r4d6a@r4c5f@&i/o-encoding-rcd r4c5f@&i/o-encoding-rcd) (set! r4d69@r4c5d@&i/o-encoding-rtd r4c5d@&i/o-encoding-rtd) (set! r4d68@r4c5b@i/o-encoding-error-char r4c5b@i/o-encoding-error-char) (set! r4d67@r4c59@i/o-encoding-error? r4c59@i/o-encoding-error?) (set! r4d66@r4c57@r4c46 r4c57@r4c46) (set! r4d65@r4c55@make-i/o-encoding-error r4c55@make-i/o-encoding-error) (set! r4d64@r4c53@p? r4c53@p?) (set! r4d63@r4c50@r4c48 r4c50@r4c48) (set! r4d62@r4c4e@r4c49 r4c4e@r4c49) (set! r4d61@r4c4c@r4c47 r4c4c@r4c47) (set! r4d60@r4c44@&i/o-decoding-rcd r4c44@&i/o-decoding-rcd) (set! r4d5f@r4c42@&i/o-decoding-rtd r4c42@&i/o-decoding-rtd) (set! r4d5e@r4c40@i/o-decoding-error? r4c40@i/o-decoding-error?) (set! r4d5d@r4c3e@make-i/o-decoding-error r4c3e@make-i/o-decoding-error) (set! r4d5c@r4c3c@p? r4c3c@p?) (set! r4d5b@r4c39@r4c31 r4c39@r4c31) (set! r4d5a@r4c37@r4c32 r4c37@r4c32) (set! r4d59@r4c35@r4c30 r4c35@r4c30) (set! r4d58@r4c2f@&i/o-port-rcd r4c2f@&i/o-port-rcd) (set! r4d57@r4c2d@&i/o-port-rtd r4c2d@&i/o-port-rtd) (set! r4d56@r4c2b@i/o-error-port r4c2b@i/o-error-port) (set! r4d55@r4c29@i/o-port-error? r4c29@i/o-port-error?) (set! r4d54@r4c27@r4c16 r4c27@r4c16) (set! r4d53@r4c25@make-i/o-port-error r4c25@make-i/o-port-error) (set! r4d52@r4c23@p? r4c23@p?) (set! r4d51@r4c20@r4c18 r4c20@r4c18) (set! r4d50@r4c1e@r4c19 r4c1e@r4c19) (set! r4d4f@r4c1c@r4c17 r4c1c@r4c17) (set! r4d4e@r4c14@&i/o-file-does-not-exist-rcd r4c14@&i/o-file-does-not-exist-rcd) (set! r4d4d@r4c12@&i/o-file-does-not-exist-rtd r4c12@&i/o-file-does-not-exist-rtd) (set! r4d4c@r4c10@i/o-file-does-not-exist-error? r4c10@i/o-file-does-not-exist-error?) (set! r4d4b@r4c0e@make-i/o-file-does-not-exist-error r4c0e@make-i/o-file-does-not-exist-error) (set! r4d4a@r4c0c@p? r4c0c@p?) (set! r4d49@r4c09@r4c01 r4c09@r4c01) (set! r4d48@r4c07@r4c02 r4c07@r4c02) (set! r4d47@r4c05@r4c00 r4c05@r4c00) (set! r4d46@r4bff@&i/o-file-already-exists-rcd r4bff@&i/o-file-already-exists-rcd) (set! r4d45@r4bfd@&i/o-file-already-exists-rtd r4bfd@&i/o-file-already-exists-rtd) (set! r4d44@r4bfb@i/o-file-already-exists-error? r4bfb@i/o-file-already-exists-error?) (set! r4d43@r4bf9@make-i/o-file-already-exists-error r4bf9@make-i/o-file-already-exists-error) (set! r4d42@r4bf7@p? r4bf7@p?) (set! r4d41@r4bf4@r4bec r4bf4@r4bec) (set! r4d40@r4bf2@r4bed r4bf2@r4bed) (set! r4d3f@r4bf0@r4beb r4bf0@r4beb) (set! r4d3e@r4bea@&i/o-file-is-read-only-rcd r4bea@&i/o-file-is-read-only-rcd) (set! r4d3d@r4be8@&i/o-file-is-read-only-rtd r4be8@&i/o-file-is-read-only-rtd) (set! r4d3c@r4be6@i/o-file-is-read-only-error? r4be6@i/o-file-is-read-only-error?) (set! r4d3b@r4be4@make-i/o-file-is-read-only-error r4be4@make-i/o-file-is-read-only-error) (set! r4d3a@r4be2@p? r4be2@p?) (set! r4d39@r4bdf@r4bd7 r4bdf@r4bd7) (set! r4d38@r4bdd@r4bd8 r4bdd@r4bd8) (set! r4d37@r4bdb@r4bd6 r4bdb@r4bd6) (set! r4d36@r4bd5@&i/o-file-protection-rcd r4bd5@&i/o-file-protection-rcd) (set! r4d35@r4bd3@&i/o-file-protection-rtd r4bd3@&i/o-file-protection-rtd) (set! r4d34@r4bd1@i/o-file-protection-error? r4bd1@i/o-file-protection-error?) (set! r4d33@r4bcf@make-i/o-file-protection-error r4bcf@make-i/o-file-protection-error) (set! r4d32@r4bcd@p? r4bcd@p?) (set! r4d31@r4bca@r4bc2 r4bca@r4bc2) (set! r4d30@r4bc8@r4bc3 r4bc8@r4bc3) (set! r4d2f@r4bc6@r4bc1 r4bc6@r4bc1) (set! r4d2e@r4bc0@&i/o-filename-rcd r4bc0@&i/o-filename-rcd) (set! r4d2d@r4bbe@&i/o-filename-rtd r4bbe@&i/o-filename-rtd) (set! r4d2c@r4bbc@i/o-error-filename r4bbc@i/o-error-filename) (set! r4d2b@r4bba@i/o-filename-error? r4bba@i/o-filename-error?) (set! r4d2a@r4bb8@r4ba7 r4bb8@r4ba7) (set! r4d29@r4bb6@make-i/o-filename-error r4bb6@make-i/o-filename-error) (set! r4d28@r4bb4@p? r4bb4@p?) (set! r4d27@r4bb1@r4ba9 r4bb1@r4ba9) (set! r4d26@r4baf@r4baa r4baf@r4baa) (set! r4d25@r4bad@r4ba8 r4bad@r4ba8) (set! r4d24@r4ba5@&i/o-invalid-position-rcd r4ba5@&i/o-invalid-position-rcd) (set! r4d23@r4ba3@&i/o-invalid-position-rtd r4ba3@&i/o-invalid-position-rtd) (set! r4d22@r4ba1@i/o-error-position r4ba1@i/o-error-position) (set! r4d21@r4b9f@i/o-invalid-position-error? r4b9f@i/o-invalid-position-error?) (set! r4d20@r4b9d@r4b8c r4b9d@r4b8c) (set! r4d1f@r4b9b@make-i/o-invalid-position-error r4b9b@make-i/o-invalid-position-error) (set! r4d1e@r4b99@p? r4b99@p?) (set! r4d1d@r4b96@r4b8e r4b96@r4b8e) (set! r4d1c@r4b94@r4b8f r4b94@r4b8f) (set! r4d1b@r4b92@r4b8d r4b92@r4b8d) (set! r4d1a@r4b8a@&i/o-write-rcd r4b8a@&i/o-write-rcd) (set! r4d19@r4b88@&i/o-write-rtd r4b88@&i/o-write-rtd) (set! r4d18@r4b86@i/o-write-error? r4b86@i/o-write-error?) (set! r4d17@r4b84@make-i/o-write-error r4b84@make-i/o-write-error) (set! r4d16@r4b82@p? r4b82@p?) (set! r4d15@r4b7f@r4b77 r4b7f@r4b77) (set! r4d14@r4b7d@r4b78 r4b7d@r4b78) (set! r4d13@r4b7b@r4b76 r4b7b@r4b76) (set! r4d12@r4b75@&i/o-read-rcd r4b75@&i/o-read-rcd) (set! r4d11@r4b73@&i/o-read-rtd r4b73@&i/o-read-rtd) (set! r4d10@r4b71@i/o-read-error? r4b71@i/o-read-error?) (set! r4d0f@r4b6f@make-i/o-read-error r4b6f@make-i/o-read-error) (set! r4d0e@r4b6d@p? r4b6d@p?) (set! r4d0d@r4b6a@r4b62 r4b6a@r4b62) (set! r4d0c@r4b68@r4b63 r4b68@r4b63) (set! r4d0b@r4b66@r4b61 r4b66@r4b61) (set! r4d0a@r4b60@&i/o-rcd r4b60@&i/o-rcd) (set! r4d09@r4b5e@&i/o-rtd r4b5e@&i/o-rtd) (set! r4d08@r4b5c@i/o-error? r4b5c@i/o-error?) (set! r4d07@r4b5a@make-i/o-error r4b5a@make-i/o-error) (set! r4d06@r4b58@p? r4b58@p?) (set! r4d05@r4b55@r4b4d r4b55@r4b4d) (set! r4d04@r4b53@r4b4e r4b53@r4b4e) (set! r4d03@r4b51@r4b4c r4b51@r4b4c) (set! r4d02@r4b4b@&undefined-rcd r4b4b@&undefined-rcd) (set! r4d01@r4b49@&undefined-rtd r4b49@&undefined-rtd) (set! r4d00@r4b47@undefined-violation? r4b47@undefined-violation?) (set! r4cff@r4b45@make-undefined-violation r4b45@make-undefined-violation) (set! r4cfe@r4b43@p? r4b43@p?) (set! r4cfd@r4b40@r4b38 r4b40@r4b38) (set! r4cfc@r4b3e@r4b39 r4b3e@r4b39) (set! r4cfb@r4b3c@r4b37 r4b3c@r4b37) (set! r4cfa@r4b36@&syntax-rcd r4b36@&syntax-rcd) (set! r4cf9@r4b34@&syntax-rtd r4b34@&syntax-rtd) (set! r4cf8@r4b32@syntax-violation-subform r4b32@syntax-violation-subform) (set! r4cf7@r4b30@syntax-violation-form r4b30@syntax-violation-form) (set! r4cf6@r4b2e@syntax-violation? r4b2e@syntax-violation?) (set! r4cf5@r4b2c@r4b19 r4b2c@r4b19) (set! r4cf4@r4b2a@r4b17 r4b2a@r4b17) (set! r4cf3@r4b28@make-syntax-violation r4b28@make-syntax-violation) (set! r4cf2@r4b26@p? r4b26@p?) (set! r4cf1@r4b23@r4b1b r4b23@r4b1b) (set! r4cf0@r4b21@r4b1c r4b21@r4b1c) (set! r4cef@r4b1f@r4b1a r4b1f@r4b1a) (set! r4cee@r4b15@&lexical-rcd r4b15@&lexical-rcd) (set! r4ced@r4b13@&lexical-rtd r4b13@&lexical-rtd) (set! r4cec@r4b11@lexical-violation? r4b11@lexical-violation?) (set! r4ceb@r4b0f@make-lexical-violation r4b0f@make-lexical-violation) (set! r4cea@r4b0d@p? r4b0d@p?) (set! r4ce9@r4b0a@r4b02 r4b0a@r4b02) (set! r4ce8@r4b08@r4b03 r4b08@r4b03) (set! r4ce7@r4b06@r4b01 r4b06@r4b01) (set! r4ce6@r4b00@&implementation-restriction-rcd r4b00@&implementation-restriction-rcd) (set! r4ce5@r4afe@&implementation-restriction-rtd r4afe@&implementation-restriction-rtd) (set! r4ce4@r4afc@implementation-restriction-violation? r4afc@implementation-restriction-violation?) (set! r4ce3@r4afa@make-implementation-restriction-violation r4afa@make-implementation-restriction-violation) (set! r4ce2@r4af8@p? r4af8@p?) (set! r4ce1@r4af5@r4aed r4af5@r4aed) (set! r4ce0@r4af3@r4aee r4af3@r4aee) (set! r4cdf@r4af1@r4aec r4af1@r4aec) (set! r4cde@r4aeb@&non-continuable-rcd r4aeb@&non-continuable-rcd) (set! r4cdd@r4ae9@&non-continuable-rtd r4ae9@&non-continuable-rtd) (set! r4cdc@r4ae7@non-continuable-violation? r4ae7@non-continuable-violation?) (set! r4cdb@r4ae5@make-non-continuable-violation r4ae5@make-non-continuable-violation) (set! r4cda@r4ae3@p? r4ae3@p?) (set! r4cd9@r4ae0@r4ad8 r4ae0@r4ad8) (set! r4cd8@r4ade@r4ad9 r4ade@r4ad9) (set! r4cd7@r4adc@r4ad7 r4adc@r4ad7) (set! r4cd6@r4ad6@&who-rcd r4ad6@&who-rcd) (set! r4cd5@r4ad4@&who-rtd r4ad4@&who-rtd) (set! r4cd4@r4ad2@condition-who r4ad2@condition-who) (set! r4cd3@r4ad0@who-condition? r4ad0@who-condition?) (set! r4cd2@r4ace@r4abd r4ace@r4abd) (set! r4cd1@r4acc@make-who-condition r4acc@make-who-condition) (set! r4cd0@r4aca@p? r4aca@p?) (set! r4ccf@r4ac7@r4abf r4ac7@r4abf) (set! r4cce@r4ac5@r4ac0 r4ac5@r4ac0) (set! r4ccd@r4ac3@r4abe r4ac3@r4abe) (set! r4ccc@r4abb@&irritants-rcd r4abb@&irritants-rcd) (set! r4ccb@r4ab9@&irritants-rtd r4ab9@&irritants-rtd) (set! r4cca@r4ab7@condition-irritants r4ab7@condition-irritants) (set! r4cc9@r4ab5@irritants-condition? r4ab5@irritants-condition?) (set! r4cc8@r4ab3@r4aa2 r4ab3@r4aa2) (set! r4cc7@r4ab1@make-irritants-condition r4ab1@make-irritants-condition) (set! r4cc6@r4aaf@p? r4aaf@p?) (set! r4cc5@r4aac@r4aa4 r4aac@r4aa4) (set! r4cc4@r4aaa@r4aa5 r4aaa@r4aa5) (set! r4cc3@r4aa8@r4aa3 r4aa8@r4aa3) (set! r4cc2@r4aa0@&assertion-rcd r4aa0@&assertion-rcd) (set! r4cc1@r4a9e@&assertion-rtd r4a9e@&assertion-rtd) (set! r4cc0@r4a9c@assertion-violation? r4a9c@assertion-violation?) (set! r4cbf@r4a9a@make-assertion-violation r4a9a@make-assertion-violation) (set! r4cbe@r4a98@p? r4a98@p?) (set! r4cbd@r4a95@r4a8d r4a95@r4a8d) (set! r4cbc@r4a93@r4a8e r4a93@r4a8e) (set! r4cbb@r4a91@r4a8c r4a91@r4a8c) (set! r4cba@r4a8b@&violation-rcd r4a8b@&violation-rcd) (set! r4cb9@r4a89@&violation-rtd r4a89@&violation-rtd) (set! r4cb8@r4a87@violation? r4a87@violation?) (set! r4cb7@r4a85@make-violation r4a85@make-violation) (set! r4cb6@r4a83@p? r4a83@p?) (set! r4cb5@r4a80@r4a78 r4a80@r4a78) (set! r4cb4@r4a7e@r4a79 r4a7e@r4a79) (set! r4cb3@r4a7c@r4a77 r4a7c@r4a77) (set! r4cb2@r4a76@&error-rcd r4a76@&error-rcd) (set! r4cb1@r4a74@&error-rtd r4a74@&error-rtd) (set! r4cb0@r4a72@error? r4a72@error?) (set! r4caf@r4a70@make-error r4a70@make-error) (set! r4cae@r4a6e@p? r4a6e@p?) (set! r4cad@r4a6b@r4a63 r4a6b@r4a63) (set! r4cac@r4a69@r4a64 r4a69@r4a64) (set! r4cab@r4a67@r4a62 r4a67@r4a62) (set! r4caa@r4a61@&serious-rcd r4a61@&serious-rcd) (set! r4ca9@r4a5f@&serious-rtd r4a5f@&serious-rtd) (set! r4ca8@r4a5d@serious-condition? r4a5d@serious-condition?) (set! r4ca7@r4a5b@make-serious-condition r4a5b@make-serious-condition) (set! r4ca6@r4a59@p? r4a59@p?) (set! r4ca5@r4a56@r4a4e r4a56@r4a4e) (set! r4ca4@r4a54@r4a4f r4a54@r4a4f) (set! r4ca3@r4a52@r4a4d r4a52@r4a4d) (set! r4ca2@r4a4c@&warning-rcd r4a4c@&warning-rcd) (set! r4ca1@r4a4a@&warning-rtd r4a4a@&warning-rtd) (set! r4ca0@r4a48@warning? r4a48@warning?) (set! r4c9f@r4a46@make-warning r4a46@make-warning) (set! r4c9e@r4a44@p? r4a44@p?) (set! r4c9d@r4a41@r4a39 r4a41@r4a39) (set! r4c9c@r4a3f@r4a3a r4a3f@r4a3a) (set! r4c9b@r4a3d@r4a38 r4a3d@r4a38) (set! r4c9a@r4a37@&message-rcd r4a37@&message-rcd) (set! r4c99@r4a35@&message-rtd r4a35@&message-rtd) (set! r4c98@r4a33@condition-message r4a33@condition-message) (set! r4c97@r4a31@message-condition? r4a31@message-condition?) (set! r4c96@r4a2f@r4a1e r4a2f@r4a1e) (set! r4c95@r4a2d@make-message-condition r4a2d@make-message-condition) (set! r4c94@r4a2b@p? r4a2b@p?) (set! r4c93@r4a28@r4a20 r4a28@r4a20) (set! r4c92@r4a26@r4a21 r4a26@r4a21) (set! r4c91@r4a24@r4a1f r4a24@r4a1f) (set! r4c90@r49d8@&condition-rcd r49d8@&condition-rcd) (set! r4c8f@r49d6@&condition-rtd r49d6@&condition-rtd) (set! r4c8e@r49d4@make-&condition r49d4@make-&condition) (set! r4c8d@r49d2@&condition? r49d2@&condition?) (set! r4c8c@r49cf@r49c7 r49cf@r49c7) (set! r4c8b@r49cd@r49c8 r49cd@r49c8) (set! r4c8a@r49cb@r49c6 r49cb@r49c6)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (r28c9@r287e@current-primitive-locations (lambda (r51ca@x) ((lambda (r51cc@t) (if r51cc@t (cdr r51cc@t) '#f)) (assq r51ca@x '((&no-nans-rcd . r4d7a@r4c89@&no-nans-rcd) (&no-nans-rtd . r4d79@r4c87@&no-nans-rtd) (&no-infinities-rcd . r4d72@r4c74@&no-infinities-rcd) (&no-infinities-rtd . r4d71@r4c72@&no-infinities-rtd) (&i/o-encoding-rcd . r4d6a@r4c5f@&i/o-encoding-rcd) (&i/o-encoding-rtd . r4d69@r4c5d@&i/o-encoding-rtd) (&i/o-decoding-rcd . r4d60@r4c44@&i/o-decoding-rcd) (&i/o-decoding-rtd . r4d5f@r4c42@&i/o-decoding-rtd) (&i/o-port-rcd . r4d58@r4c2f@&i/o-port-rcd) (&i/o-port-rtd . r4d57@r4c2d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . r4d4e@r4c14@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . r4d4d@r4c12@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . r4d46@r4bff@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . r4d45@r4bfd@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . r4d3e@r4bea@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . r4d3d@r4be8@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . r4d36@r4bd5@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . r4d35@r4bd3@&i/o-file-protection-rtd) (&i/o-filename-rcd . r4d2e@r4bc0@&i/o-filename-rcd) (&i/o-filename-rtd . r4d2d@r4bbe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . r4d24@r4ba5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . r4d23@r4ba3@&i/o-invalid-position-rtd) (&i/o-write-rcd . r4d1a@r4b8a@&i/o-write-rcd) (&i/o-write-rtd . r4d19@r4b88@&i/o-write-rtd) (&i/o-read-rcd . r4d12@r4b75@&i/o-read-rcd) (&i/o-read-rtd . r4d11@r4b73@&i/o-read-rtd) (&i/o-rcd . r4d0a@r4b60@&i/o-rcd) (&i/o-rtd . r4d09@r4b5e@&i/o-rtd) (&undefined-rcd . r4d02@r4b4b@&undefined-rcd) (&undefined-rtd . r4d01@r4b49@&undefined-rtd) (&syntax-rcd . r4cfa@r4b36@&syntax-rcd) (&syntax-rtd . r4cf9@r4b34@&syntax-rtd) (&lexical-rcd . r4cee@r4b15@&lexical-rcd) (&lexical-rtd . r4ced@r4b13@&lexical-rtd) (&implementation-restriction-rcd . r4ce6@r4b00@&implementation-restriction-rcd) (&implementation-restriction-rtd . r4ce5@r4afe@&implementation-restriction-rtd) (&non-continuable-rcd . r4cde@r4aeb@&non-continuable-rcd) (&non-continuable-rtd . r4cdd@r4ae9@&non-continuable-rtd) (&who-rcd . r4cd6@r4ad6@&who-rcd) (&who-rtd . r4cd5@r4ad4@&who-rtd) (&irritants-rcd . r4ccc@r4abb@&irritants-rcd) (&irritants-rtd . r4ccb@r4ab9@&irritants-rtd) (&assertion-rcd . r4cc2@r4aa0@&assertion-rcd) (&assertion-rtd . r4cc1@r4a9e@&assertion-rtd) (&violation-rcd . r4cba@r4a8b@&violation-rcd) (&violation-rtd . r4cb9@r4a89@&violation-rtd) (&error-rcd . r4cb2@r4a76@&error-rcd) (&error-rtd . r4cb1@r4a74@&error-rtd) (&serious-rcd . r4caa@r4a61@&serious-rcd) (&serious-rtd . r4ca9@r4a5f@&serious-rtd) (&warning-rcd . r4ca2@r4a4c@&warning-rcd) (&warning-rtd . r4ca1@r4a4a@&warning-rtd) (&message-rcd . r4c9a@r4a37@&message-rcd) (&message-rtd . r4c99@r4a35@&message-rtd) (&condition-rcd . r4c90@r49d8@&condition-rcd) (&condition-rtd . r4c8f@r49d6@&condition-rtd) (syntax-error . r49b8@r2fbe@syntax-error) (syntax-dispatch . r494d@r2ed9@syntax-dispatch) (load . r4eab@r4d96@load) (interaction-environment . r49c0@r2fce@interaction-environment) (library-path . r2ae0@r296f@library-path) (make-parameter . r2878@r27a2@make-parameter) (make-variable-transformer . r490b@r2d06@make-variable-transformer) (identifier? . r49bb@r2fc4@identifier?) (generate-temporaries . r49b1@r2fb0@generate-temporaries) (free-identifier=? . r49b2@r2fb2@free-identifier=?) (syntax->datum . r49bd@r2fc8@syntax->datum) (datum->syntax . r49bc@r2fc6@datum->syntax) (bound-identifier=? . r49b3@r2fb4@bound-identifier=?) (make-i/o-write-error . r4d17@r4b84@make-i/o-write-error) (make-i/o-read-error . r4d0f@r4b6f@make-i/o-read-error) (make-i/o-port-error . r4d53@r4c25@make-i/o-port-error) (make-i/o-invalid-position-error . r4d1f@r4b9b@make-i/o-invalid-position-error) (make-i/o-filename-error . r4d29@r4bb6@make-i/o-filename-error) (make-i/o-file-protection-error . r4d33@r4bcf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . r4d3b@r4be4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . r4d4b@r4c0e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . r4d43@r4bf9@make-i/o-file-already-exists-error) (make-i/o-error . r4d07@r4b5a@make-i/o-error) (make-i/o-encoding-error . r4d65@r4c55@make-i/o-encoding-error) (make-i/o-decoding-error . r4d5d@r4c3e@make-i/o-decoding-error) (i/o-write-error? . r4d18@r4b86@i/o-write-error?) (i/o-read-error? . r4d10@r4b71@i/o-read-error?) (i/o-port-error? . r4d55@r4c29@i/o-port-error?) (i/o-invalid-position-error? . r4d21@r4b9f@i/o-invalid-position-error?) (i/o-filename-error? . r4d2b@r4bba@i/o-filename-error?) (i/o-file-protection-error? . r4d34@r4bd1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . r4d3c@r4be6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . r4d4c@r4c10@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . r4d44@r4bfb@i/o-file-already-exists-error?) (i/o-error? . r4d08@r4b5c@i/o-error?) (i/o-error-position . r4d22@r4ba1@i/o-error-position) (i/o-error-port . r4d56@r4c2b@i/o-error-port) (i/o-error-filename . r4d2c@r4bbc@i/o-error-filename) (i/o-encoding-error? . r4d67@r4c59@i/o-encoding-error?) (i/o-encoding-error-char . r4d68@r4c5b@i/o-encoding-error-char) (i/o-decoding-error? . r4d5e@r4c40@i/o-decoding-error?) (scheme-report-environment . r49a8@r2f9e@scheme-report-environment) (null-environment . r49a7@r2f9c@null-environment) (command-line . r4ea8@r4d90@command-line) (eval . r49aa@r2fa2@eval) (environment . r49a6@r2f9a@environment) (who-condition? . r4cd3@r4ad0@who-condition?) (warning? . r4ca0@r4a48@warning?) (violation? . r4cb8@r4a87@violation?) (undefined-violation? . r4d00@r4b47@undefined-violation?) (syntax-violation? . r4cf6@r4b2e@syntax-violation?) (syntax-violation-subform . r4cf8@r4b32@syntax-violation-subform) (syntax-violation-form . r4cf7@r4b30@syntax-violation-form) (syntax-violation . r49ba@r2fc2@syntax-violation) (serious-condition? . r4ca8@r4a5d@serious-condition?) (non-continuable-violation? . r4cdc@r4ae7@non-continuable-violation?) (message-condition? . r4c97@r4a31@message-condition?) (make-who-condition . r4cd1@r4acc@make-who-condition) (make-warning . r4c9f@r4a46@make-warning) (make-violation . r4cb7@r4a85@make-violation) (make-undefined-violation . r4cff@r4b45@make-undefined-violation) (make-syntax-violation . r4cf3@r4b28@make-syntax-violation) (make-serious-condition . r4ca7@r4a5b@make-serious-condition) (make-non-continuable-violation . r4cdb@r4ae5@make-non-continuable-violation) (make-message-condition . r4c95@r4a2d@make-message-condition) (make-lexical-violation . r4ceb@r4b0f@make-lexical-violation) (make-irritants-condition . r4cc7@r4ab1@make-irritants-condition) (make-implementation-restriction-violation . r4ce3@r4afa@make-implementation-restriction-violation) (make-error . r4caf@r4a70@make-error) (make-assertion-violation . r4cbf@r4a9a@make-assertion-violation) (lexical-violation? . r4cec@r4b11@lexical-violation?) (irritants-condition? . r4cc9@r4ab5@irritants-condition?) (implementation-restriction-violation? . r4ce4@r4afc@implementation-restriction-violation?) (error? . r4cb0@r4a72@error?) (condition-who . r4cd4@r4ad2@condition-who) (condition-message . r4c98@r4a33@condition-message) (condition-irritants . r4cca@r4ab7@condition-irritants) (assertion-violation? . r4cc0@r4a9c@assertion-violation?) (no-nans-violation? . r4d78@r4c85@no-nans-violation?) (no-infinities-violation? . r4d70@r4c70@no-infinities-violation?) (make-no-nans-violation . r4d77@r4c83@make-no-nans-violation) (make-no-infinities-violation . r4d6f@r4c6e@make-no-infinities-violation) (assertion-error . r49b7@r2fbc@assertion-error)))))) (r2af0@r298f@install-library 'r51a7 '(mosh interaction) '() '() '() '() '((regexp? . r519f) (alist->eq-hash-table . r519c) (format . r5199) (string-split . r518e) (call-process . r5188) (set-current-directory! . r5184) (expand-path . r5183) (current-directory . r5182) (%spawn . r5181) (%waitpid . r5180) (pointer? . r517e) (%ffi-supported? . r517d) (%ffi-pointer-ref . r517c) (%ffi-pointer->string . r517b) (%ffi-call->string-or-zero . r517a) (%ffi-call->double . r5179) (%ffi-call->void* . r5178) (%ffi-call->void . r5177) (%ffi-call->int . r5176) (%ffi-lookup . r5175) (%ffi-open . r5174) (%fork . r5173) (%pipe . r5172) (p . r5171) (whereis . r515b) (register . r515a) (vm-join! . r5159) (vm-set-value! . r5158) (vm? . r5157) (main-vm? . r5156) (vm-eval . r5155) (vm-self . r5154) (vm-start! . r5153) (make-vm . r5152) (mutex-try-lock! . r5151) (mutex-unlock! . r5150) (mutex-lock! . r514f) (mutex? . r514e) (make-mutex . r514d) (condition-variable-notify-all! . r514c) (condition-variable-notify! . r514b) (condition-variable-wait! . r514a) (make-condition-variable . r5149) (string-upcase . r5132) (string-titlecase . r5131) (string-normalize-nfkd . r5130) (string-normalize-nfkc . r512f) (string-normalize-nfd . r512e) (string-normalize-nfc . r512d) (string-foldcase . r512c) (string-downcase . r512b) (string-ci>? . r512a) (string-ci>=? . r5129) (string-ci=? . r5128) (string-ci<? . r5127) (string-ci<=? . r5126) (char-whitespace? . r5125) (char-upper-case? . r5124) (char-title-case? . r5123) (char-numeric? . r5122) (char-lower-case? . r5121) (char-general-category . r5120) (char-upcase . r511f) (char-titlecase . r511e) (char-foldcase . r511d) (char-downcase . r511c) (char-ci>? . r511b) (char-ci>=? . r511a) (char-ci=? . r5119) (char-ci<? . r5118) (char-ci<=? . r5117) (char-alphabetic? . r5116) (make-variable-transformer . r2d05) (identifier? . r2fc3) (generate-temporaries . r2faf) (free-identifier=? . r2fb1) (syntax->datum . r2fc7) (datum->syntax . r2fc5) (bound-identifier=? . r2fb3) (record-type-descriptor? . r5115) (record-predicate . r5114) (record-mutator . r5113) (record-constructor . r5112) (record-accessor . r5111) (make-record-type-descriptor . r5110) (make-record-constructor-descriptor . r510f) (record? . r510e) (record-type-uid . r510d) (record-type-sealed? . r510c) (record-type-parent . r510b) (record-type-opaque? . r510a) (record-type-name . r5109) (record-type-generative? . r5108) (record-type-field-names . r5107) (record-rtd . r5106) (record-field-mutable? . r5105) (delete-file . r5104) (file-exists? . r5103) (vector-sort! . r5102) (vector-sort . r5101) (list-sort . r5100) (symbol-hash . r50ff) (string-ci-hash . r50fe) (string-hash . r50fd) (equal-hash . r50fc) (hashtable-equivalence-function . r50fb) (make-hashtable . r50fa) (hashtable-hash-function . r50f9) (make-eqv-hashtable . r50f8) (make-eq-hashtable . r50f7) (hashtable? . r50f6) (hashtable-update! . r50f5) (hashtable-size . r50f4) (hashtable-set! . r50f3) (hashtable-ref . r50f2) (hashtable-mutable? . r50f1) (hashtable-keys . r50f0) (hashtable-entries . r50ef) (hashtable-delete! . r50ee) (hashtable-copy . r50ed) (hashtable-contains? . r50ec) (hashtable-clear! . r50eb) (call-with-output-file . r50ea) (call-with-input-file . r50e9) (write-char . r50e8) (write . r50e7) (with-output-to-file . r50e6) (with-input-from-file . r50e5) (read-char . r50e4) (read . r50e3) (peek-char . r50e2) (open-output-file . r50e1) (open-input-file . r50e0) (newline . r50df) (display . r50de) (close-output-port . r50dd) (close-input-port . r50dc) (eof-object? . r50db) (eof-object . r50da) (current-error-port . r50d9) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (utf-8-codec . r50d4) (utf-16-codec . r50d3) (transcoder-error-handling-mode . r50d2) (transcoder-eol-style . r50d1) (transcoder-codec . r50d0) (transcoded-port . r50cf) (textual-port? . r50ce) (string->bytevector . r50cd) (standard-output-port . r50cc) (standard-input-port . r50cb) (standard-error-port . r50ca) (set-port-position! . r50c9) (put-u8 . r50c8) (put-string . r50c7) (put-datum . r50c6) (put-char . r50c5) (put-bytevector . r50c4) (port? . r50c3) (port-transcoder . r50c2) (port-position . r50c1) (port-has-set-port-position!? . r50c0) (port-has-port-position? . r50bf) (port-eof? . r50be) (output-port-buffer-mode . r50bd) (open-string-output-port . r50bc) (open-string-input-port . r50bb) (open-file-output-port . r50ba) (open-file-input/output-port . r50b9) (open-file-input-port . r50b8) (open-bytevector-output-port . r50b7) (open-bytevector-input-port . r50b6) (native-transcoder . r50b5) (native-eol-style . r50b4) (make-transcoder . r50b3) (latin-1-codec . r50b2) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (make-i/o-encoding-error . r4c54) (make-i/o-decoding-error . r4c3d) (make-custom-textual-output-port . r50b1) (make-custom-textual-input/output-port . r50b0) (make-custom-textual-input-port . r50af) (make-custom-binary-output-port . r50ae) (make-custom-binary-input/output-port . r50ad) (make-custom-binary-input-port . r50ac) (make-bytevector . r50ab) (lookahead-u8 . r50aa) (lookahead-char . r50a9) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (i/o-encoding-error? . r4c58) (i/o-encoding-error-char . r4c5a) (i/o-decoding-error? . r4c3f) (get-u8 . r50a8) (get-string-n! . r50a7) (get-string-n . r50a6) (get-string-all . r50a5) (get-line . r50a4) (get-datum . r50a3) (get-char . r50a2) (get-bytevector-some . r50a1) (get-bytevector-n! . r50a0) (get-bytevector-n . r509f) (get-bytevector-all . r509e) (flush-output-port . r509d) (close-port . r509c) (exit . r5094) (command-line . r4d8f) (string-fill! . r5093) (string-set! . r5092) (set-cdr! . r5091) (set-car! . r5090) (remove . r508f) (remv . r508e) (remp . r508d) (remq . r508c) (partition . r508b) (memv . r508a) (memq . r5089) (memp . r5088) (member . r5087) (exists . r5086) (for-all . r5085) (fold-right . r5084) (fold-left . r5083) (find . r5082) (filter . r5081) (cons* . r5080) (assv . r507f) (assq . r507e) (assp . r507d) (assoc . r507c) (call-with-string-output-port . r507b) (call-with-port . r507a) (call-with-bytevector-output-port . r5079) (bytevector->string . r5078) (buffer-mode? . r5077) (binary-port? . r5076) (with-exception-handler . r5075) (raise-continuable . r5074) (raise . r5073) (eval . r2fa1) (environment . r2f99) (make-enumeration . r5072) (enum-set=? . r5071) (enum-set-universe . r5070) (enum-set-union . r506f) (enum-set-subset? . r506e) (enum-set-projection . r506d) (enum-set-member? . r506c) (enum-set-intersection . r506b) (enum-set-indexer . r506a) (enum-set-difference . r5069) (enum-set-constructor . r5068) (enum-set-complement . r5067) (enum-set->list . r5066) (who-condition? . r4acf) (warning? . r4a47) (violation? . r4a86) (undefined-violation? . r4b46) (syntax-violation? . r4b2d) (syntax-violation-subform . r4b31) (syntax-violation-form . r4b2f) (syntax-violation . r2fc1) (simple-conditions . r5065) (serious-condition? . r4a5c) (non-continuable-violation? . r4ae6) (message-condition? . r4a30) (make-who-condition . r4acb) (make-warning . r4a45) (make-violation . r4a84) (make-undefined-violation . r4b44) (make-syntax-violation . r4b27) (make-serious-condition . r4a5a) (make-non-continuable-violation . r4ae4) (make-message-condition . r4a2c) (make-lexical-violation . r4b0e) (make-irritants-condition . r4ab0) (make-implementation-restriction-violation . r4af9) (make-error . r4a6f) (make-assertion-violation . r4a99) (lexical-violation? . r4b10) (irritants-condition? . r4ab4) (implementation-restriction-violation? . r4afb) (error? . r4a71) (condition-who . r4ad1) (condition-predicate . r5064) (condition-message . r4a32) (condition-irritants . r4ab6) (condition-accessor . r5063) (condition . r5062) (assertion-violation? . r4a9b) (condition? . r5061) (utf32->string . r5060) (utf16->string . r505f) (utf8->string . r505e) (uint-list->bytevector . r505d) (u8-list->bytevector . r505c) (string->utf8 . r505b) (string->utf32 . r505a) (string->utf16 . r5059) (sint-list->bytevector . r5058) (native-endianness . r5057) (bytevector? . r5056) (bytevector=? . r5055) (bytevector-uint-set! . r5054) (bytevector-uint-ref . r5053) (bytevector-u8-set! . r5052) (bytevector-u8-ref . r5051) (bytevector-u64-set! . r5050) (bytevector-u64-ref . r504f) (bytevector-u64-native-set! . r504e) (bytevector-u64-native-ref . r504d) (bytevector-u32-set! . r504c) (bytevector-u32-ref . r504b) (bytevector-u32-native-set! . r504a) (bytevector-u32-native-ref . r5049) (bytevector-u16-set! . r5048) (bytevector-u16-ref . r5047) (bytevector-u16-native-set! . r5046) (bytevector-u16-native-ref . r5045) (bytevector-sint-set! . r5044) (bytevector-sint-ref . r5043) (bytevector-s8-set! . r5042) (bytevector-s8-ref . r5041) (bytevector-s64-set! . r5040) (bytevector-s64-ref . r503f) (bytevector-s64-native-set! . r503e) (bytevector-s64-native-ref . r503d) (bytevector-s32-set! . r503c) (bytevector-s32-ref . r503b) (bytevector-s32-native-set! . r503a) (bytevector-s32-native-ref . r5039) (bytevector-s16-set! . r5038) (bytevector-s16-ref . r5037) (bytevector-s16-native-set! . r5036) (bytevector-s16-native-ref . r5035) (bytevector-length . r5034) (bytevector-ieee-single-ref . r5033) (bytevector-ieee-single-set! . r5032) (bytevector-ieee-single-native-set! . r5031) (bytevector-ieee-single-native-ref . r5030) (bytevector-ieee-double-set! . r502f) (bytevector-ieee-double-ref . r502e) (bytevector-ieee-double-native-set! . r502d) (bytevector-ieee-double-native-ref . r502c) (bytevector-fill! . r502b) (bytevector-copy! . r502a) (bytevector-copy . r5029) (bytevector->uint-list . r5028) (bytevector->u8-list . r5027) (bytevector->sint-list . r5026) (no-nans-violation? . r4c84) (no-infinities-violation? . r4c6f) (make-no-nans-violation . r4c82) (make-no-infinities-violation . r4c6d) (real->flonum . r5025) (flzero? . r5024) (fltruncate . r5023) (fltan . r5022) (flsqrt . r5021) (flsin . r5020) (flround . r501f) (flpositive? . r501e) (flonum? . r501d) (flodd? . r501c) (flnumerator . r501b) (flnegative? . r501a) (flnan? . r5019) (flmod0 . r5018) (flmod . r5017) (flmin . r5016) (flmax . r5015) (fllog . r5014) (flinteger? . r5013) (flinfinite? . r5012) (flfloor . r5011) (flfinite? . r5010) (flexpt . r500f) (flexp . r500e) (fleven? . r500d) (fldiv0-and-mod0 . r500c) (fldiv0 . r500b) (fldiv-and-mod . r500a) (fldiv . r5009) (fldenominator . r5008) (flcos . r5007) (flceiling . r5006) (flatan . r5005) (flasin . r5004) (flacos . r5003) (flabs . r5002) (fl>? . r5001) (fl>=? . r5000) (fl=? . r4fff) (fl<? . r4ffe) (fl<=? . r4ffd) (fl/ . r4ffc) (fl- . r4ffb) (fl+ . r4ffa) (fl* . r4ff9) (fixnum->flonum . r4ff8) (fxzero? . r4ff7) (fxxor . r4ff6) (fxrotate-bit-field . r4ff5) (fxreverse-bit-field . r4ff4) (fxpositive? . r4ff3) (fxodd? . r4ff2) (fxnot . r4ff1) (fxnegative? . r4ff0) (fxmod0 . r4fef) (fxmod . r4fee) (fxmin . r4fed) (fxmax . r4fec) (fxlength . r4feb) (fxior . r4fea) (fxif . r4fe9) (fxfirst-bit-set . r4fe8) (fxeven? . r4fe7) (fxdiv0-and-mod0 . r4fe6) (fxdiv0 . r4fe5) (fxdiv-and-mod . r4fe4) (fxdiv . r4fe3) (fxcopy-bit-field . r4fe2) (fxcopy-bit . r4fe1) (fxbit-set? . r4fe0) (fxbit-field . r4fdf) (fxbit-count . r4fde) (fxarithmetic-shift-right . r4fdd) (fxarithmetic-shift-left . r4fdc) (fxarithmetic-shift . r4fdb) (fxand . r4fda) (fx>? . r4fd9) (fx>=? . r4fd8) (fx=? . r4fd7) (fx<? . r4fd6) (fx<=? . r4fd5) (fx-/carry . r4fd4) (fx- . r4fd3) (fx+/carry . r4fd2) (fx+ . r4fd1) (fx*/carry . r4fd0) (fx* . r4fcf) (greatest-fixnum . r4fce) (least-fixnum . r4fcd) (fixnum-width . r4fcc) (fixnum? . r4fcb) (bitwise-rotate-bit-field . r4fca) (bitwise-reverse-bit-field . r4fc9) (bitwise-length . r4fc8) (bitwise-if . r4fc7) (bitwise-first-bit-set . r4fc6) (bitwise-copy-bit-field . r4fc5) (bitwise-copy-bit . r4fc4) (bitwise-bit-set? . r4fc3) (bitwise-bit-field . r4fc2) (bitwise-bit-count . r4fc1) (bitwise-xor . r4fc0) (bitwise-ior . r4fbf) (bitwise-and . r4fbe) (bitwise-not . r4fbd) (bitwise-arithmetic-shift-right . r4fbc) (bitwise-arithmetic-shift-left . r4fbb) (bitwise-arithmetic-shift . r4fba) (zero? . r4fb9) (vector? . r4fb8) (vector-set! . r4fb7) (vector-ref . r4fb6) (vector-map . r4fb5) (vector-length . r4fb4) (vector-for-each . r4fb3) (vector-fill! . r4fb2) (vector->list . r4fb1) (vector . r4fb0) (values . r4faf) (truncate . r4fae) (tan . r4fad) (symbol? . r4fac) (symbol=? . r4fab) (symbol->string . r4faa) (substring . r4fa9) (string? . r4fa8) (string>? . r4fa7) (string>=? . r4fa6) (string=? . r4fa5) (string<? . r4fa4) (string<=? . r4fa3) (string-ref . r4fa2) (string-length . r4fa1) (string-for-each . r4fa0) (string-copy . r4f9f) (string-append . r4f9e) (string->symbol . r4f9d) (string->number . r4f9c) (string->list . r4f9b) (string . r4f9a) (sqrt . r4f99) (sin . r4f98) (round . r4f97) (reverse . r4f96) (real? . r4f95) (real-valued? . r4f94) (real-part . r4f93) (rationalize . r4f92) (rational? . r4f91) (rational-valued? . r4f90) (procedure? . r4f8f) (positive? . r4f8e) (pair? . r4f8d) (odd? . r4f8c) (numerator . r4f8b) (number? . r4f8a) (number->string . r4f89) (null? . r4f88) (not . r4f87) (negative? . r4f86) (nan? . r4f85) (min . r4f84) (max . r4f83) (map . r4f82) (make-vector . r4f81) (make-string . r4f80) (make-rectangular . r4f7f) (make-polar . r4f7e) (magnitude . r4f7d) (log . r4f7c) (list? . r4f7b) (list-tail . r4f7a) (list-ref . r4f79) (list->vector . r4f78) (list->string . r4f77) (list . r4f76) (length . r4f75) (lcm . r4f74) (integer? . r4f73) (integer-valued? . r4f72) (integer->char . r4f71) (infinite? . r4f70) (inexact? . r4f6f) (inexact . r4f6e) (imag-part . r4f6d) (gcd . r4f6c) (for-each . r4f6b) (floor . r4f6a) (finite? . r4f69) (expt . r4f68) (exp . r4f67) (exact? . r4f66) (exact-integer-sqrt . r4f65) (exact . r4f64) (even? . r4f63) (error . r4f62) (eqv? . r4f61) (equal? . r4f60) (eq? . r4f5f) (dynamic-wind . r4f5e) (div0-and-mod0 . r4f5d) (mod0 . r4f5c) (div0 . r4f5b) (div-and-mod . r4f5a) (mod . r4f59) (div . r4f58) (denominator . r4f57) (cos . r4f56) (cons . r4f55) (complex? . r4f54) (char? . r4f53) (char>? . r4f52) (char>=? . r4f51) (char=? . r4f50) (char<? . r4f4f) (char<=? . r4f4e) (char->integer . r4f4d) (ceiling . r4f4c) (call-with-values . r4f4b) (call/cc . r4f4a) (call-with-current-continuation . r4f49) (cddddr . r4f48) (cdddar . r4f47) (cddadr . r4f46) (cddaar . r4f45) (cdaddr . r4f44) (cdadar . r4f43) (cdaadr . r4f42) (cdaaar . r4f41) (cadddr . r4f40) (caddar . r4f3f) (cadadr . r4f3e) (cadaar . r4f3d) (caaddr . r4f3c) (caadar . r4f3b) (caaadr . r4f3a) (caaaar . r4f39) (cdddr . r4f38) (cddar . r4f37) (cdadr . r4f36) (cdaar . r4f35) (caddr . r4f34) (cadar . r4f33) (caadr . r4f32) (caaar . r4f31) (cddr . r4f30) (cdar . r4f2f) (cadr . r4f2e) (caar . r4f2d) (cdr . r4f2c) (car . r4f2b) (boolean? . r4f2a) (boolean=? . r4f29) (atan . r4f28) (assertion-violation . r4f27) (asin . r4f26) (apply . r4f25) (append . r4f24) (angle . r4f23) (acos . r4f22) (abs . r4f21) (/ . r4f20) (* . r4f1f) (- . r4f1e) (+ . r4f1d) (>= . r4f1c) (> . r4f1b) (= . r4f1a) (<= . r4f19) (< . r4f18) (library . r4f17) (&no-nans . r4f16) (&no-infinities . r4f15) (&i/o-encoding . r4f14) (&i/o-decoding . r4f13) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09) (&undefined . r4f08) (&syntax . r4f07) (&lexical . r4f06) (&implementation-restriction . r4f05) (&non-continuable . r4f04) (&who . r4f03) (&irritants . r4f02) (&assertion . r4f01) (&violation . r4f00) (&error . r4eff) (&serious . r4efe) (&warning . r4efd) (&message . r4efc) (&condition . r4efb) (define-condition-type . r4efa) (define-enumeration . r4ef9) (define-record-type . r4ef8) (parent-rtd . r4ef7) (nongenerative . r4ef6) (opaque . r4ef5) (sealed . r4ef4) (protocol . r4ef3) (parent . r4ef2) (immutable . r4ef1) (mutable . r4ef0) (fields . r4eef) (error-handling-mode . r4eee) (file-options . r4eed) (buffer-mode . r4eec) (eol-style . r4eeb) (guard . r4eea) (unsyntax-splicing . r4ee7) (unsyntax . r4ee6) (unquote-splicing . r4ee5) (unquote . r4ee4) (_ . r4ee3) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (assert . r4edf) (endianness . r4ede) (time . r4edc) (do . r4edb) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (let*-values . r4ed7) (let-values . r4ed6) (identifier-syntax . r4ed5) (with-syntax . r4ed4) (quasisyntax . r4ed3) (quasiquote . r4ed2) (syntax-rules . r4ed1) (include . r4ed0) (record-constructor-descriptor . r4ece) (record-type-descriptor . r4ecd) (case . r4ecc) (unless . r4eca) (when . r4ec9) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec* . r4ec5) (letrec . r4ec4) (case-lambda . r4ec2) (lambda . r4ec1) (syntax . r4ec0) (syntax-case . r4ebf) (quote . r4ebe) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (import . r4eb9) (begin . r4eb8) (define-syntax . r4eb6) (define . r4eb5)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51a8 '(psyntax null-environment-5) '() '() '() '() '((make-promise . r5095) (unquote-splicing . r4ee5) (unquote . r4ee4) (_ . r4ee3) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (delay . r4edd) (do . r4edb) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (quasiquote . r4ed2) (syntax-rules . r4ed1) (case . r4ecc) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec . r4ec4) (lambda . r4ec1) (quote . r4ebe) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (begin . r4eb8) (define-syntax . r4eb6) (define . r4eb5)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51a9 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . r512a) (string-ci>=? . r5129) (string-ci=? . r5128) (string-ci<? . r5127) (string-ci<=? . r5126) (char-whitespace? . r5125) (char-upper-case? . r5124) (char-numeric? . r5122) (char-lower-case? . r5121) (char-upcase . r511f) (char-downcase . r511c) (char-ci>? . r511b) (char-ci>=? . r511a) (char-ci=? . r5119) (char-ci<? . r5118) (char-ci<=? . r5117) (char-alphabetic? . r5116) (call-with-output-file . r50ea) (call-with-input-file . r50e9) (write-char . r50e8) (write . r50e7) (with-output-to-file . r50e6) (with-input-from-file . r50e5) (read-char . r50e4) (read . r50e3) (peek-char . r50e2) (open-output-file . r50e1) (open-input-file . r50e0) (newline . r50df) (display . r50de) (close-output-port . r50dd) (close-input-port . r50dc) (eof-object . r50da) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (scheme-report-environment . r2f9d) (quotient . r509b) (null-environment . r2f9b) (remainder . r509a) (modulo . r5099) (inexact->exact . r5098) (force . r5097) (exact->inexact . r5096) (make-promise . r5095) (string-fill! . r5093) (string-set! . r5092) (set-cdr! . r5091) (set-car! . r5090) (memv . r508a) (memq . r5089) (member . r5087) (assv . r507f) (assq . r507e) (assoc . r507c) (eval . r2fa1) (zero? . r4fb9) (vector? . r4fb8) (vector-set! . r4fb7) (vector-ref . r4fb6) (vector-length . r4fb4) (vector-fill! . r4fb2) (vector->list . r4fb1) (vector . r4fb0) (values . r4faf) (truncate . r4fae) (tan . r4fad) (symbol? . r4fac) (symbol->string . r4faa) (substring . r4fa9) (string? . r4fa8) (string>? . r4fa7) (string>=? . r4fa6) (string=? . r4fa5) (string<? . r4fa4) (string<=? . r4fa3) (string-ref . r4fa2) (string-length . r4fa1) (string-copy . r4f9f) (string-append . r4f9e) (string->symbol . r4f9d) (string->number . r4f9c) (string->list . r4f9b) (string . r4f9a) (sqrt . r4f99) (sin . r4f98) (round . r4f97) (reverse . r4f96) (real? . r4f95) (real-part . r4f93) (rationalize . r4f92) (rational? . r4f91) (procedure? . r4f8f) (positive? . r4f8e) (pair? . r4f8d) (odd? . r4f8c) (numerator . r4f8b) (number? . r4f8a) (number->string . r4f89) (not . r4f87) (negative? . r4f86) (min . r4f84) (max . r4f83) (map . r4f82) (make-vector . r4f81) (make-string . r4f80) (make-rectangular . r4f7f) (make-polar . r4f7e) (magnitude . r4f7d) (log . r4f7c) (list? . r4f7b) (list-tail . r4f7a) (list-ref . r4f79) (list->vector . r4f78) (list->string . r4f77) (list . r4f76) (length . r4f75) (lcm . r4f74) (integer? . r4f73) (integer->char . r4f71) (inexact? . r4f6f) (imag-part . r4f6d) (gcd . r4f6c) (for-each . r4f6b) (floor . r4f6a) (expt . r4f68) (exp . r4f67) (exact? . r4f66) (even? . r4f63) (eqv? . r4f61) (equal? . r4f60) (eq? . r4f5f) (dynamic-wind . r4f5e) (denominator . r4f57) (cos . r4f56) (cons . r4f55) (complex? . r4f54) (char? . r4f53) (char>? . r4f52) (char>=? . r4f51) (char=? . r4f50) (char<? . r4f4f) (char<=? . r4f4e) (char->integer . r4f4d) (ceiling . r4f4c) (call-with-values . r4f4b) (call-with-current-continuation . r4f49) (cddddr . r4f48) (cdddar . r4f47) (cddadr . r4f46) (cddaar . r4f45) (cdaddr . r4f44) (cdadar . r4f43) (cdaadr . r4f42) (cdaaar . r4f41) (cadddr . r4f40) (caddar . r4f3f) (cadadr . r4f3e) (cadaar . r4f3d) (caaddr . r4f3c) (caadar . r4f3b) (caaadr . r4f3a) (caaaar . r4f39) (cdddr . r4f38) (cddar . r4f37) (cdadr . r4f36) (cdaar . r4f35) (caddr . r4f34) (cadar . r4f33) (caadr . r4f32) (caaar . r4f31) (cddr . r4f30) (cdar . r4f2f) (cadr . r4f2e) (caar . r4f2d) (cdr . r4f2c) (car . r4f2b) (boolean? . r4f2a) (atan . r4f28) (asin . r4f26) (apply . r4f25) (append . r4f24) (angle . r4f23) (acos . r4f22) (abs . r4f21) (/ . r4f20) (* . r4f1f) (- . r4f1e) (+ . r4f1d) (>= . r4f1c) (> . r4f1b) (= . r4f1a) (<= . r4f19) (< . r4f18) (unquote-splicing . r4ee5) (unquote . r4ee4) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (delay . r4edd) (do . r4edb) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (quasiquote . r4ed2) (syntax-rules . r4ed1) (case . r4ecc) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec . r4ec4) (lambda . r4ec1) (quote . r4ebe) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (begin . r4eb8) (define-syntax . r4eb6) (define . r4eb5)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51aa '(psyntax modules) '() '() '() '() '((module . r4eb7)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51ab '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51ac '(rnrs) '(6) '() '() '() '((regexp? . r519f) (string-upcase . r5132) (string-titlecase . r5131) (string-normalize-nfkd . r5130) (string-normalize-nfkc . r512f) (string-normalize-nfd . r512e) (string-normalize-nfc . r512d) (string-foldcase . r512c) (string-downcase . r512b) (string-ci>? . r512a) (string-ci>=? . r5129) (string-ci=? . r5128) (string-ci<? . r5127) (string-ci<=? . r5126) (char-whitespace? . r5125) (char-upper-case? . r5124) (char-title-case? . r5123) (char-numeric? . r5122) (char-lower-case? . r5121) (char-general-category . r5120) (char-upcase . r511f) (char-titlecase . r511e) (char-foldcase . r511d) (char-downcase . r511c) (char-ci>? . r511b) (char-ci>=? . r511a) (char-ci=? . r5119) (char-ci<? . r5118) (char-ci<=? . r5117) (char-alphabetic? . r5116) (make-variable-transformer . r2d05) (identifier? . r2fc3) (generate-temporaries . r2faf) (free-identifier=? . r2fb1) (syntax->datum . r2fc7) (datum->syntax . r2fc5) (bound-identifier=? . r2fb3) (record-type-descriptor? . r5115) (record-predicate . r5114) (record-mutator . r5113) (record-constructor . r5112) (record-accessor . r5111) (make-record-type-descriptor . r5110) (make-record-constructor-descriptor . r510f) (record? . r510e) (record-type-uid . r510d) (record-type-sealed? . r510c) (record-type-parent . r510b) (record-type-opaque? . r510a) (record-type-name . r5109) (record-type-generative? . r5108) (record-type-field-names . r5107) (record-rtd . r5106) (record-field-mutable? . r5105) (delete-file . r5104) (file-exists? . r5103) (vector-sort! . r5102) (vector-sort . r5101) (list-sort . r5100) (symbol-hash . r50ff) (string-ci-hash . r50fe) (string-hash . r50fd) (equal-hash . r50fc) (hashtable-equivalence-function . r50fb) (make-hashtable . r50fa) (hashtable-hash-function . r50f9) (make-eqv-hashtable . r50f8) (make-eq-hashtable . r50f7) (hashtable? . r50f6) (hashtable-update! . r50f5) (hashtable-size . r50f4) (hashtable-set! . r50f3) (hashtable-ref . r50f2) (hashtable-mutable? . r50f1) (hashtable-keys . r50f0) (hashtable-entries . r50ef) (hashtable-delete! . r50ee) (hashtable-copy . r50ed) (hashtable-contains? . r50ec) (hashtable-clear! . r50eb) (call-with-output-file . r50ea) (call-with-input-file . r50e9) (write-char . r50e8) (write . r50e7) (with-output-to-file . r50e6) (with-input-from-file . r50e5) (read-char . r50e4) (read . r50e3) (peek-char . r50e2) (open-output-file . r50e1) (open-input-file . r50e0) (newline . r50df) (display . r50de) (close-output-port . r50dd) (close-input-port . r50dc) (eof-object? . r50db) (eof-object . r50da) (current-error-port . r50d9) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (utf-8-codec . r50d4) (utf-16-codec . r50d3) (transcoder-error-handling-mode . r50d2) (transcoder-eol-style . r50d1) (transcoder-codec . r50d0) (transcoded-port . r50cf) (textual-port? . r50ce) (string->bytevector . r50cd) (standard-output-port . r50cc) (standard-input-port . r50cb) (standard-error-port . r50ca) (set-port-position! . r50c9) (put-u8 . r50c8) (put-string . r50c7) (put-datum . r50c6) (put-char . r50c5) (put-bytevector . r50c4) (port? . r50c3) (port-transcoder . r50c2) (port-position . r50c1) (port-has-set-port-position!? . r50c0) (port-has-port-position? . r50bf) (port-eof? . r50be) (output-port-buffer-mode . r50bd) (open-string-output-port . r50bc) (open-string-input-port . r50bb) (open-file-output-port . r50ba) (open-file-input/output-port . r50b9) (open-file-input-port . r50b8) (open-bytevector-output-port . r50b7) (open-bytevector-input-port . r50b6) (native-transcoder . r50b5) (native-eol-style . r50b4) (make-transcoder . r50b3) (latin-1-codec . r50b2) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (make-i/o-encoding-error . r4c54) (make-i/o-decoding-error . r4c3d) (make-custom-textual-output-port . r50b1) (make-custom-textual-input/output-port . r50b0) (make-custom-textual-input-port . r50af) (make-custom-binary-output-port . r50ae) (make-custom-binary-input/output-port . r50ad) (make-custom-binary-input-port . r50ac) (make-bytevector . r50ab) (lookahead-u8 . r50aa) (lookahead-char . r50a9) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (i/o-encoding-error? . r4c58) (i/o-encoding-error-char . r4c5a) (i/o-decoding-error? . r4c3f) (get-u8 . r50a8) (get-string-n! . r50a7) (get-string-n . r50a6) (get-string-all . r50a5) (get-line . r50a4) (get-datum . r50a3) (get-char . r50a2) (get-bytevector-some . r50a1) (get-bytevector-n! . r50a0) (get-bytevector-n . r509f) (get-bytevector-all . r509e) (flush-output-port . r509d) (close-port . r509c) (exit . r5094) (command-line . r4d8f) (remove . r508f) (remv . r508e) (remp . r508d) (remq . r508c) (partition . r508b) (memv . r508a) (memq . r5089) (memp . r5088) (member . r5087) (exists . r5086) (for-all . r5085) (fold-right . r5084) (fold-left . r5083) (find . r5082) (filter . r5081) (cons* . r5080) (assv . r507f) (assq . r507e) (assp . r507d) (assoc . r507c) (call-with-string-output-port . r507b) (call-with-port . r507a) (call-with-bytevector-output-port . r5079) (bytevector->string . r5078) (buffer-mode? . r5077) (binary-port? . r5076) (with-exception-handler . r5075) (raise-continuable . r5074) (raise . r5073) (make-enumeration . r5072) (enum-set=? . r5071) (enum-set-universe . r5070) (enum-set-union . r506f) (enum-set-subset? . r506e) (enum-set-projection . r506d) (enum-set-member? . r506c) (enum-set-intersection . r506b) (enum-set-indexer . r506a) (enum-set-difference . r5069) (enum-set-constructor . r5068) (enum-set-complement . r5067) (enum-set->list . r5066) (who-condition? . r4acf) (warning? . r4a47) (violation? . r4a86) (undefined-violation? . r4b46) (syntax-violation? . r4b2d) (syntax-violation-subform . r4b31) (syntax-violation-form . r4b2f) (syntax-violation . r2fc1) (simple-conditions . r5065) (serious-condition? . r4a5c) (non-continuable-violation? . r4ae6) (message-condition? . r4a30) (make-who-condition . r4acb) (make-warning . r4a45) (make-violation . r4a84) (make-undefined-violation . r4b44) (make-syntax-violation . r4b27) (make-serious-condition . r4a5a) (make-non-continuable-violation . r4ae4) (make-message-condition . r4a2c) (make-lexical-violation . r4b0e) (make-irritants-condition . r4ab0) (make-implementation-restriction-violation . r4af9) (make-error . r4a6f) (make-assertion-violation . r4a99) (lexical-violation? . r4b10) (irritants-condition? . r4ab4) (implementation-restriction-violation? . r4afb) (error? . r4a71) (condition-who . r4ad1) (condition-predicate . r5064) (condition-message . r4a32) (condition-irritants . r4ab6) (condition-accessor . r5063) (condition . r5062) (assertion-violation? . r4a9b) (condition? . r5061) (utf32->string . r5060) (utf16->string . r505f) (utf8->string . r505e) (uint-list->bytevector . r505d) (u8-list->bytevector . r505c) (string->utf8 . r505b) (string->utf32 . r505a) (string->utf16 . r5059) (sint-list->bytevector . r5058) (native-endianness . r5057) (bytevector? . r5056) (bytevector=? . r5055) (bytevector-uint-set! . r5054) (bytevector-uint-ref . r5053) (bytevector-u8-set! . r5052) (bytevector-u8-ref . r5051) (bytevector-u64-set! . r5050) (bytevector-u64-ref . r504f) (bytevector-u64-native-set! . r504e) (bytevector-u64-native-ref . r504d) (bytevector-u32-set! . r504c) (bytevector-u32-ref . r504b) (bytevector-u32-native-set! . r504a) (bytevector-u32-native-ref . r5049) (bytevector-u16-set! . r5048) (bytevector-u16-ref . r5047) (bytevector-u16-native-set! . r5046) (bytevector-u16-native-ref . r5045) (bytevector-sint-set! . r5044) (bytevector-sint-ref . r5043) (bytevector-s8-set! . r5042) (bytevector-s8-ref . r5041) (bytevector-s64-set! . r5040) (bytevector-s64-ref . r503f) (bytevector-s64-native-set! . r503e) (bytevector-s64-native-ref . r503d) (bytevector-s32-set! . r503c) (bytevector-s32-ref . r503b) (bytevector-s32-native-set! . r503a) (bytevector-s32-native-ref . r5039) (bytevector-s16-set! . r5038) (bytevector-s16-ref . r5037) (bytevector-s16-native-set! . r5036) (bytevector-s16-native-ref . r5035) (bytevector-length . r5034) (bytevector-ieee-single-ref . r5033) (bytevector-ieee-single-set! . r5032) (bytevector-ieee-single-native-set! . r5031) (bytevector-ieee-single-native-ref . r5030) (bytevector-ieee-double-set! . r502f) (bytevector-ieee-double-ref . r502e) (bytevector-ieee-double-native-set! . r502d) (bytevector-ieee-double-native-ref . r502c) (bytevector-fill! . r502b) (bytevector-copy! . r502a) (bytevector-copy . r5029) (bytevector->uint-list . r5028) (bytevector->u8-list . r5027) (bytevector->sint-list . r5026) (no-nans-violation? . r4c84) (no-infinities-violation? . r4c6f) (make-no-nans-violation . r4c82) (make-no-infinities-violation . r4c6d) (real->flonum . r5025) (flzero? . r5024) (fltruncate . r5023) (fltan . r5022) (flsqrt . r5021) (flsin . r5020) (flround . r501f) (flpositive? . r501e) (flonum? . r501d) (flodd? . r501c) (flnumerator . r501b) (flnegative? . r501a) (flnan? . r5019) (flmod0 . r5018) (flmod . r5017) (flmin . r5016) (flmax . r5015) (fllog . r5014) (flinteger? . r5013) (flinfinite? . r5012) (flfloor . r5011) (flfinite? . r5010) (flexpt . r500f) (flexp . r500e) (fleven? . r500d) (fldiv0-and-mod0 . r500c) (fldiv0 . r500b) (fldiv-and-mod . r500a) (fldiv . r5009) (fldenominator . r5008) (flcos . r5007) (flceiling . r5006) (flatan . r5005) (flasin . r5004) (flacos . r5003) (flabs . r5002) (fl>? . r5001) (fl>=? . r5000) (fl=? . r4fff) (fl<? . r4ffe) (fl<=? . r4ffd) (fl/ . r4ffc) (fl- . r4ffb) (fl+ . r4ffa) (fl* . r4ff9) (fixnum->flonum . r4ff8) (fxzero? . r4ff7) (fxxor . r4ff6) (fxrotate-bit-field . r4ff5) (fxreverse-bit-field . r4ff4) (fxpositive? . r4ff3) (fxodd? . r4ff2) (fxnot . r4ff1) (fxnegative? . r4ff0) (fxmod0 . r4fef) (fxmod . r4fee) (fxmin . r4fed) (fxmax . r4fec) (fxlength . r4feb) (fxior . r4fea) (fxif . r4fe9) (fxfirst-bit-set . r4fe8) (fxeven? . r4fe7) (fxdiv0-and-mod0 . r4fe6) (fxdiv0 . r4fe5) (fxdiv-and-mod . r4fe4) (fxdiv . r4fe3) (fxcopy-bit-field . r4fe2) (fxcopy-bit . r4fe1) (fxbit-set? . r4fe0) (fxbit-field . r4fdf) (fxbit-count . r4fde) (fxarithmetic-shift-right . r4fdd) (fxarithmetic-shift-left . r4fdc) (fxarithmetic-shift . r4fdb) (fxand . r4fda) (fx>? . r4fd9) (fx>=? . r4fd8) (fx=? . r4fd7) (fx<? . r4fd6) (fx<=? . r4fd5) (fx-/carry . r4fd4) (fx- . r4fd3) (fx+/carry . r4fd2) (fx+ . r4fd1) (fx*/carry . r4fd0) (fx* . r4fcf) (greatest-fixnum . r4fce) (least-fixnum . r4fcd) (fixnum-width . r4fcc) (fixnum? . r4fcb) (bitwise-rotate-bit-field . r4fca) (bitwise-reverse-bit-field . r4fc9) (bitwise-length . r4fc8) (bitwise-if . r4fc7) (bitwise-first-bit-set . r4fc6) (bitwise-copy-bit-field . r4fc5) (bitwise-copy-bit . r4fc4) (bitwise-bit-set? . r4fc3) (bitwise-bit-field . r4fc2) (bitwise-bit-count . r4fc1) (bitwise-xor . r4fc0) (bitwise-ior . r4fbf) (bitwise-and . r4fbe) (bitwise-not . r4fbd) (bitwise-arithmetic-shift-right . r4fbc) (bitwise-arithmetic-shift-left . r4fbb) (bitwise-arithmetic-shift . r4fba) (zero? . r4fb9) (vector? . r4fb8) (vector-set! . r4fb7) (vector-ref . r4fb6) (vector-map . r4fb5) (vector-length . r4fb4) (vector-for-each . r4fb3) (vector-fill! . r4fb2) (vector->list . r4fb1) (vector . r4fb0) (values . r4faf) (truncate . r4fae) (tan . r4fad) (symbol? . r4fac) (symbol=? . r4fab) (symbol->string . r4faa) (substring . r4fa9) (string? . r4fa8) (string>? . r4fa7) (string>=? . r4fa6) (string=? . r4fa5) (string<? . r4fa4) (string<=? . r4fa3) (string-ref . r4fa2) (string-length . r4fa1) (string-for-each . r4fa0) (string-copy . r4f9f) (string-append . r4f9e) (string->symbol . r4f9d) (string->number . r4f9c) (string->list . r4f9b) (string . r4f9a) (sqrt . r4f99) (sin . r4f98) (round . r4f97) (reverse . r4f96) (real? . r4f95) (real-valued? . r4f94) (real-part . r4f93) (rationalize . r4f92) (rational? . r4f91) (rational-valued? . r4f90) (procedure? . r4f8f) (positive? . r4f8e) (pair? . r4f8d) (odd? . r4f8c) (numerator . r4f8b) (number? . r4f8a) (number->string . r4f89) (null? . r4f88) (not . r4f87) (negative? . r4f86) (nan? . r4f85) (min . r4f84) (max . r4f83) (map . r4f82) (make-vector . r4f81) (make-string . r4f80) (make-rectangular . r4f7f) (make-polar . r4f7e) (magnitude . r4f7d) (log . r4f7c) (list? . r4f7b) (list-tail . r4f7a) (list-ref . r4f79) (list->vector . r4f78) (list->string . r4f77) (list . r4f76) (length . r4f75) (lcm . r4f74) (integer? . r4f73) (integer-valued? . r4f72) (integer->char . r4f71) (infinite? . r4f70) (inexact? . r4f6f) (inexact . r4f6e) (imag-part . r4f6d) (gcd . r4f6c) (for-each . r4f6b) (floor . r4f6a) (finite? . r4f69) (expt . r4f68) (exp . r4f67) (exact? . r4f66) (exact-integer-sqrt . r4f65) (exact . r4f64) (even? . r4f63) (error . r4f62) (eqv? . r4f61) (equal? . r4f60) (eq? . r4f5f) (dynamic-wind . r4f5e) (div0-and-mod0 . r4f5d) (mod0 . r4f5c) (div0 . r4f5b) (div-and-mod . r4f5a) (mod . r4f59) (div . r4f58) (denominator . r4f57) (cos . r4f56) (cons . r4f55) (complex? . r4f54) (char? . r4f53) (char>? . r4f52) (char>=? . r4f51) (char=? . r4f50) (char<? . r4f4f) (char<=? . r4f4e) (char->integer . r4f4d) (ceiling . r4f4c) (call-with-values . r4f4b) (call/cc . r4f4a) (call-with-current-continuation . r4f49) (cddddr . r4f48) (cdddar . r4f47) (cddadr . r4f46) (cddaar . r4f45) (cdaddr . r4f44) (cdadar . r4f43) (cdaadr . r4f42) (cdaaar . r4f41) (cadddr . r4f40) (caddar . r4f3f) (cadadr . r4f3e) (cadaar . r4f3d) (caaddr . r4f3c) (caadar . r4f3b) (caaadr . r4f3a) (caaaar . r4f39) (cdddr . r4f38) (cddar . r4f37) (cdadr . r4f36) (cdaar . r4f35) (caddr . r4f34) (cadar . r4f33) (caadr . r4f32) (caaar . r4f31) (cddr . r4f30) (cdar . r4f2f) (cadr . r4f2e) (caar . r4f2d) (cdr . r4f2c) (car . r4f2b) (boolean? . r4f2a) (boolean=? . r4f29) (atan . r4f28) (assertion-violation . r4f27) (asin . r4f26) (apply . r4f25) (append . r4f24) (angle . r4f23) (acos . r4f22) (abs . r4f21) (/ . r4f20) (* . r4f1f) (- . r4f1e) (+ . r4f1d) (>= . r4f1c) (> . r4f1b) (= . r4f1a) (<= . r4f19) (< . r4f18) (&no-nans . r4f16) (&no-infinities . r4f15) (&i/o-encoding . r4f14) (&i/o-decoding . r4f13) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09) (&undefined . r4f08) (&syntax . r4f07) (&lexical . r4f06) (&implementation-restriction . r4f05) (&non-continuable . r4f04) (&who . r4f03) (&irritants . r4f02) (&assertion . r4f01) (&violation . r4f00) (&error . r4eff) (&serious . r4efe) (&warning . r4efd) (&message . r4efc) (&condition . r4efb) (define-condition-type . r4efa) (define-enumeration . r4ef9) (define-record-type . r4ef8) (parent-rtd . r4ef7) (nongenerative . r4ef6) (opaque . r4ef5) (sealed . r4ef4) (protocol . r4ef3) (parent . r4ef2) (immutable . r4ef1) (mutable . r4ef0) (fields . r4eef) (error-handling-mode . r4eee) (file-options . r4eed) (buffer-mode . r4eec) (eol-style . r4eeb) (guard . r4eea) (unsyntax-splicing . r4ee7) (unsyntax . r4ee6) (unquote-splicing . r4ee5) (unquote . r4ee4) (_ . r4ee3) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (assert . r4edf) (endianness . r4ede) (do . r4edb) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (let*-values . r4ed7) (let-values . r4ed6) (identifier-syntax . r4ed5) (with-syntax . r4ed4) (quasisyntax . r4ed3) (quasiquote . r4ed2) (syntax-rules . r4ed1) (record-constructor-descriptor . r4ece) (record-type-descriptor . r4ecd) (case . r4ecc) (unless . r4eca) (when . r4ec9) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec* . r4ec5) (letrec . r4ec4) (case-lambda . r4ec2) (lambda . r4ec1) (syntax . r4ec0) (syntax-case . r4ebf) (quote . r4ebe) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (begin . r4eb8) (define-syntax . r4eb6) (define . r4eb5)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51ad '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . r2f9d) (quotient . r509b) (null-environment . r2f9b) (remainder . r509a) (modulo . r5099) (inexact->exact . r5098) (force . r5097) (exact->inexact . r5096) (make-promise . r5095) (delay . r4edd)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51ae '(rnrs control) '(6) '() '() '() '((do . r4edb) (unless . r4eca) (when . r4ec9) (case-lambda . r4ec2)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51af '(rnrs eval) '(6) '() '() '() '((eval . r2fa1) (environment . r2f99)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . r5091) (set-car! . r5090)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . r5093) (string-set! . r5092)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b2 '(rnrs programs) '(6) '() '() '() '((exit . r5094) (command-line . r4d8f)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . r2d05) (identifier? . r2fc3) (generate-temporaries . r2faf) (free-identifier=? . r2fb1) (syntax->datum . r2fc7) (datum->syntax . r2fc5) (bound-identifier=? . r2fb3) (syntax-violation . r2fc1) (unsyntax-splicing . r4ee7) (unsyntax . r4ee6) (_ . r4ee3) (... . r4ee0) (with-syntax . r4ed4) (quasisyntax . r4ed3) (syntax . r4ec0) (syntax-case . r4ebf)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b4 '(rnrs files) '(6) '() '() '() '((delete-file . r5104) (file-exists? . r5103) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . r5102) (vector-sort . r5101) (list-sort . r5100)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b6 '(rnrs base) '(6) '() '() '() '((zero? . r4fb9) (vector? . r4fb8) (vector-set! . r4fb7) (vector-ref . r4fb6) (vector-map . r4fb5) (vector-length . r4fb4) (vector-for-each . r4fb3) (vector-fill! . r4fb2) (vector->list . r4fb1) (vector . r4fb0) (values . r4faf) (truncate . r4fae) (tan . r4fad) (symbol? . r4fac) (symbol=? . r4fab) (symbol->string . r4faa) (substring . r4fa9) (string? . r4fa8) (string>? . r4fa7) (string>=? . r4fa6) (string=? . r4fa5) (string<? . r4fa4) (string<=? . r4fa3) (string-ref . r4fa2) (string-length . r4fa1) (string-for-each . r4fa0) (string-copy . r4f9f) (string-append . r4f9e) (string->symbol . r4f9d) (string->number . r4f9c) (string->list . r4f9b) (string . r4f9a) (sqrt . r4f99) (sin . r4f98) (round . r4f97) (reverse . r4f96) (real? . r4f95) (real-valued? . r4f94) (real-part . r4f93) (rationalize . r4f92) (rational? . r4f91) (rational-valued? . r4f90) (procedure? . r4f8f) (positive? . r4f8e) (pair? . r4f8d) (odd? . r4f8c) (numerator . r4f8b) (number? . r4f8a) (number->string . r4f89) (null? . r4f88) (not . r4f87) (negative? . r4f86) (nan? . r4f85) (min . r4f84) (max . r4f83) (map . r4f82) (make-vector . r4f81) (make-string . r4f80) (make-rectangular . r4f7f) (make-polar . r4f7e) (magnitude . r4f7d) (log . r4f7c) (list? . r4f7b) (list-tail . r4f7a) (list-ref . r4f79) (list->vector . r4f78) (list->string . r4f77) (list . r4f76) (length . r4f75) (lcm . r4f74) (integer? . r4f73) (integer-valued? . r4f72) (integer->char . r4f71) (infinite? . r4f70) (inexact? . r4f6f) (inexact . r4f6e) (imag-part . r4f6d) (gcd . r4f6c) (for-each . r4f6b) (floor . r4f6a) (finite? . r4f69) (expt . r4f68) (exp . r4f67) (exact? . r4f66) (exact-integer-sqrt . r4f65) (exact . r4f64) (even? . r4f63) (error . r4f62) (eqv? . r4f61) (equal? . r4f60) (eq? . r4f5f) (dynamic-wind . r4f5e) (div0-and-mod0 . r4f5d) (mod0 . r4f5c) (div0 . r4f5b) (div-and-mod . r4f5a) (mod . r4f59) (div . r4f58) (denominator . r4f57) (cos . r4f56) (cons . r4f55) (complex? . r4f54) (char? . r4f53) (char>? . r4f52) (char>=? . r4f51) (char=? . r4f50) (char<? . r4f4f) (char<=? . r4f4e) (char->integer . r4f4d) (ceiling . r4f4c) (call-with-values . r4f4b) (call/cc . r4f4a) (call-with-current-continuation . r4f49) (cddddr . r4f48) (cdddar . r4f47) (cddadr . r4f46) (cddaar . r4f45) (cdaddr . r4f44) (cdadar . r4f43) (cdaadr . r4f42) (cdaaar . r4f41) (cadddr . r4f40) (caddar . r4f3f) (cadadr . r4f3e) (cadaar . r4f3d) (caaddr . r4f3c) (caadar . r4f3b) (caaadr . r4f3a) (caaaar . r4f39) (cdddr . r4f38) (cddar . r4f37) (cdadr . r4f36) (cdaar . r4f35) (caddr . r4f34) (cadar . r4f33) (caadr . r4f32) (caaar . r4f31) (cddr . r4f30) (cdar . r4f2f) (cadr . r4f2e) (caar . r4f2d) (cdr . r4f2c) (car . r4f2b) (boolean? . r4f2a) (boolean=? . r4f29) (atan . r4f28) (assertion-violation . r4f27) (asin . r4f26) (apply . r4f25) (append . r4f24) (angle . r4f23) (acos . r4f22) (abs . r4f21) (/ . r4f20) (* . r4f1f) (- . r4f1e) (+ . r4f1d) (>= . r4f1c) (> . r4f1b) (= . r4f1a) (<= . r4f19) (< . r4f18) (unquote-splicing . r4ee5) (unquote . r4ee4) (_ . r4ee3) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (assert . r4edf) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (let*-values . r4ed7) (let-values . r4ed6) (identifier-syntax . r4ed5) (quasiquote . r4ed2) (syntax-rules . r4ed1) (case . r4ecc) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec* . r4ec5) (letrec . r4ec4) (lambda . r4ec1) (quote . r4ebe) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (begin . r4eb8) (define-syntax . r4eb6) (define . r4eb5)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b7 '(rnrs lists) '(6) '() '() '() '((remove . r508f) (remv . r508e) (remp . r508d) (remq . r508c) (partition . r508b) (memv . r508a) (memq . r5089) (memp . r5088) (member . r5087) (exists . r5086) (for-all . r5085) (fold-right . r5084) (fold-left . r5083) (find . r5082) (filter . r5081) (cons* . r5080) (assv . r507f) (assq . r507e) (assp . r507d) (assoc . r507c)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . r50ea) (call-with-input-file . r50e9) (write-char . r50e8) (write . r50e7) (with-output-to-file . r50e6) (with-input-from-file . r50e5) (read-char . r50e4) (read . r50e3) (peek-char . r50e2) (open-output-file . r50e1) (open-input-file . r50e0) (newline . r50df) (display . r50de) (close-output-port . r50dd) (close-input-port . r50dc) (eof-object? . r50db) (eof-object . r50da) (current-error-port . r50d9) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51b9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . r50ab) (utf32->string . r5060) (utf16->string . r505f) (utf8->string . r505e) (uint-list->bytevector . r505d) (u8-list->bytevector . r505c) (string->utf8 . r505b) (string->utf32 . r505a) (string->utf16 . r5059) (sint-list->bytevector . r5058) (native-endianness . r5057) (bytevector? . r5056) (bytevector=? . r5055) (bytevector-uint-set! . r5054) (bytevector-uint-ref . r5053) (bytevector-u8-set! . r5052) (bytevector-u8-ref . r5051) (bytevector-u64-set! . r5050) (bytevector-u64-ref . r504f) (bytevector-u64-native-set! . r504e) (bytevector-u64-native-ref . r504d) (bytevector-u32-set! . r504c) (bytevector-u32-ref . r504b) (bytevector-u32-native-set! . r504a) (bytevector-u32-native-ref . r5049) (bytevector-u16-set! . r5048) (bytevector-u16-ref . r5047) (bytevector-u16-native-set! . r5046) (bytevector-u16-native-ref . r5045) (bytevector-sint-set! . r5044) (bytevector-sint-ref . r5043) (bytevector-s8-set! . r5042) (bytevector-s8-ref . r5041) (bytevector-s64-set! . r5040) (bytevector-s64-ref . r503f) (bytevector-s64-native-set! . r503e) (bytevector-s64-native-ref . r503d) (bytevector-s32-set! . r503c) (bytevector-s32-ref . r503b) (bytevector-s32-native-set! . r503a) (bytevector-s32-native-ref . r5039) (bytevector-s16-set! . r5038) (bytevector-s16-ref . r5037) (bytevector-s16-native-set! . r5036) (bytevector-s16-native-ref . r5035) (bytevector-length . r5034) (bytevector-ieee-single-ref . r5033) (bytevector-ieee-single-set! . r5032) (bytevector-ieee-single-native-set! . r5031) (bytevector-ieee-single-native-ref . r5030) (bytevector-ieee-double-set! . r502f) (bytevector-ieee-double-ref . r502e) (bytevector-ieee-double-native-set! . r502d) (bytevector-ieee-double-native-ref . r502c) (bytevector-fill! . r502b) (bytevector-copy! . r502a) (bytevector-copy . r5029) (bytevector->uint-list . r5028) (bytevector->u8-list . r5027) (bytevector->sint-list . r5026) (endianness . r4ede)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51ba '(rnrs unicode) '(6) '() '() '() '((string-upcase . r5132) (string-titlecase . r5131) (string-normalize-nfkd . r5130) (string-normalize-nfkc . r512f) (string-normalize-nfd . r512e) (string-normalize-nfc . r512d) (string-foldcase . r512c) (string-downcase . r512b) (string-ci>? . r512a) (string-ci>=? . r5129) (string-ci=? . r5128) (string-ci<? . r5127) (string-ci<=? . r5126) (char-whitespace? . r5125) (char-upper-case? . r5124) (char-title-case? . r5123) (char-numeric? . r5122) (char-lower-case? . r5121) (char-general-category . r5120) (char-upcase . r511f) (char-titlecase . r511e) (char-foldcase . r511d) (char-downcase . r511c) (char-ci>? . r511b) (char-ci>=? . r511a) (char-ci=? . r5119) (char-ci<? . r5118) (char-ci<=? . r5117) (char-alphabetic? . r5116)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51bb '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . r5075) (raise-continuable . r5074) (raise . r5073) (guard . r4eea) (else . r4ee2) (=> . r4ee1)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51bc '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . r4fca) (bitwise-reverse-bit-field . r4fc9) (bitwise-length . r4fc8) (bitwise-if . r4fc7) (bitwise-first-bit-set . r4fc6) (bitwise-copy-bit-field . r4fc5) (bitwise-copy-bit . r4fc4) (bitwise-bit-set? . r4fc3) (bitwise-bit-field . r4fc2) (bitwise-bit-count . r4fc1) (bitwise-xor . r4fc0) (bitwise-ior . r4fbf) (bitwise-and . r4fbe) (bitwise-not . r4fbd) (bitwise-arithmetic-shift-right . r4fbc) (bitwise-arithmetic-shift-left . r4fbb) (bitwise-arithmetic-shift . r4fba)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51bd '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . r4ff7) (fxxor . r4ff6) (fxrotate-bit-field . r4ff5) (fxreverse-bit-field . r4ff4) (fxpositive? . r4ff3) (fxodd? . r4ff2) (fxnot . r4ff1) (fxnegative? . r4ff0) (fxmod0 . r4fef) (fxmod . r4fee) (fxmin . r4fed) (fxmax . r4fec) (fxlength . r4feb) (fxior . r4fea) (fxif . r4fe9) (fxfirst-bit-set . r4fe8) (fxeven? . r4fe7) (fxdiv0-and-mod0 . r4fe6) (fxdiv0 . r4fe5) (fxdiv-and-mod . r4fe4) (fxdiv . r4fe3) (fxcopy-bit-field . r4fe2) (fxcopy-bit . r4fe1) (fxbit-set? . r4fe0) (fxbit-field . r4fdf) (fxbit-count . r4fde) (fxarithmetic-shift-right . r4fdd) (fxarithmetic-shift-left . r4fdc) (fxarithmetic-shift . r4fdb) (fxand . r4fda) (fx>? . r4fd9) (fx>=? . r4fd8) (fx=? . r4fd7) (fx<? . r4fd6) (fx<=? . r4fd5) (fx-/carry . r4fd4) (fx- . r4fd3) (fx+/carry . r4fd2) (fx+ . r4fd1) (fx*/carry . r4fd0) (fx* . r4fcf) (greatest-fixnum . r4fce) (least-fixnum . r4fcd) (fixnum-width . r4fcc) (fixnum? . r4fcb)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51be '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . r4c84) (no-infinities-violation? . r4c6f) (make-no-nans-violation . r4c82) (make-no-infinities-violation . r4c6d) (real->flonum . r5025) (flzero? . r5024) (fltruncate . r5023) (fltan . r5022) (flsqrt . r5021) (flsin . r5020) (flround . r501f) (flpositive? . r501e) (flonum? . r501d) (flodd? . r501c) (flnumerator . r501b) (flnegative? . r501a) (flnan? . r5019) (flmod0 . r5018) (flmod . r5017) (flmin . r5016) (flmax . r5015) (fllog . r5014) (flinteger? . r5013) (flinfinite? . r5012) (flfloor . r5011) (flfinite? . r5010) (flexpt . r500f) (flexp . r500e) (fleven? . r500d) (fldiv0-and-mod0 . r500c) (fldiv0 . r500b) (fldiv-and-mod . r500a) (fldiv . r5009) (fldenominator . r5008) (flcos . r5007) (flceiling . r5006) (flatan . r5005) (flasin . r5004) (flacos . r5003) (flabs . r5002) (fl>? . r5001) (fl>=? . r5000) (fl=? . r4fff) (fl<? . r4ffe) (fl<=? . r4ffd) (fl/ . r4ffc) (fl- . r4ffb) (fl+ . r4ffa) (fl* . r4ff9) (fixnum->flonum . r4ff8) (&no-nans . r4f16) (&no-infinities . r4f15)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51bf '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . r50ff) (string-ci-hash . r50fe) (string-hash . r50fd) (equal-hash . r50fc) (hashtable-equivalence-function . r50fb) (make-hashtable . r50fa) (hashtable-hash-function . r50f9) (make-eqv-hashtable . r50f8) (make-eq-hashtable . r50f7) (hashtable? . r50f6) (hashtable-update! . r50f5) (hashtable-size . r50f4) (hashtable-set! . r50f3) (hashtable-ref . r50f2) (hashtable-mutable? . r50f1) (hashtable-keys . r50f0) (hashtable-entries . r50ef) (hashtable-delete! . r50ee) (hashtable-copy . r50ed) (hashtable-contains? . r50ec) (hashtable-clear! . r50eb)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . r50db) (eof-object . r50da) (current-error-port . r50d9) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (utf-8-codec . r50d4) (utf-16-codec . r50d3) (transcoder-error-handling-mode . r50d2) (transcoder-eol-style . r50d1) (transcoder-codec . r50d0) (transcoded-port . r50cf) (textual-port? . r50ce) (string->bytevector . r50cd) (standard-output-port . r50cc) (standard-input-port . r50cb) (standard-error-port . r50ca) (set-port-position! . r50c9) (put-u8 . r50c8) (put-string . r50c7) (put-datum . r50c6) (put-char . r50c5) (put-bytevector . r50c4) (port? . r50c3) (port-transcoder . r50c2) (port-position . r50c1) (port-has-set-port-position!? . r50c0) (port-has-port-position? . r50bf) (port-eof? . r50be) (output-port-buffer-mode . r50bd) (open-string-output-port . r50bc) (open-string-input-port . r50bb) (open-file-output-port . r50ba) (open-file-input/output-port . r50b9) (open-file-input-port . r50b8) (open-bytevector-output-port . r50b7) (open-bytevector-input-port . r50b6) (native-transcoder . r50b5) (native-eol-style . r50b4) (make-transcoder . r50b3) (latin-1-codec . r50b2) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (make-i/o-encoding-error . r4c54) (make-i/o-decoding-error . r4c3d) (make-custom-textual-output-port . r50b1) (make-custom-textual-input/output-port . r50b0) (make-custom-textual-input-port . r50af) (make-custom-binary-output-port . r50ae) (make-custom-binary-input/output-port . r50ad) (make-custom-binary-input-port . r50ac) (lookahead-u8 . r50aa) (lookahead-char . r50a9) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (i/o-encoding-error? . r4c58) (i/o-encoding-error-char . r4c5a) (i/o-decoding-error? . r4c3f) (get-u8 . r50a8) (get-string-n! . r50a7) (get-string-n . r50a6) (get-string-all . r50a5) (get-line . r50a4) (get-datum . r50a3) (get-char . r50a2) (get-bytevector-some . r50a1) (get-bytevector-n! . r50a0) (get-bytevector-n . r509f) (get-bytevector-all . r509e) (flush-output-port . r509d) (close-port . r509c) (call-with-string-output-port . r507b) (call-with-port . r507a) (call-with-bytevector-output-port . r5079) (bytevector->string . r5078) (buffer-mode? . r5077) (binary-port? . r5076) (&i/o-encoding . r4f14) (&i/o-decoding . r4f13) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09) (error-handling-mode . r4eee) (file-options . r4eed) (buffer-mode . r4eec) (eol-style . r4eeb)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . r5072) (enum-set=? . r5071) (enum-set-universe . r5070) (enum-set-union . r506f) (enum-set-subset? . r506e) (enum-set-projection . r506d) (enum-set-member? . r506c) (enum-set-intersection . r506b) (enum-set-indexer . r506a) (enum-set-difference . r5069) (enum-set-constructor . r5068) (enum-set-complement . r5067) (enum-set->list . r5066) (define-enumeration . r4ef9)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . r4acf) (warning? . r4a47) (violation? . r4a86) (undefined-violation? . r4b46) (syntax-violation? . r4b2d) (syntax-violation-subform . r4b31) (syntax-violation-form . r4b2f) (syntax-violation . r2fc1) (simple-conditions . r5065) (serious-condition? . r4a5c) (non-continuable-violation? . r4ae6) (message-condition? . r4a30) (make-who-condition . r4acb) (make-warning . r4a45) (make-violation . r4a84) (make-undefined-violation . r4b44) (make-syntax-violation . r4b27) (make-serious-condition . r4a5a) (make-non-continuable-violation . r4ae4) (make-message-condition . r4a2c) (make-lexical-violation . r4b0e) (make-irritants-condition . r4ab0) (make-implementation-restriction-violation . r4af9) (make-error . r4a6f) (make-assertion-violation . r4a99) (lexical-violation? . r4b10) (irritants-condition? . r4ab4) (implementation-restriction-violation? . r4afb) (error? . r4a71) (condition-who . r4ad1) (condition-predicate . r5064) (condition-message . r4a32) (condition-irritants . r4ab6) (condition-accessor . r5063) (condition . r5062) (assertion-violation? . r4a9b) (condition? . r5061) (&undefined . r4f08) (&syntax . r4f07) (&lexical . r4f06) (&implementation-restriction . r4f05) (&non-continuable . r4f04) (&who . r4f03) (&irritants . r4f02) (&assertion . r4f01) (&violation . r4f00) (&error . r4eff) (&serious . r4efe) (&warning . r4efd) (&message . r4efc) (&condition . r4efb) (define-condition-type . r4efa)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c3 '(rnrs records inspection) '(6) '() '() '() '((record? . r510e) (record-type-uid . r510d) (record-type-sealed? . r510c) (record-type-parent . r510b) (record-type-opaque? . r510a) (record-type-name . r5109) (record-type-generative? . r5108) (record-type-field-names . r5107) (record-rtd . r5106) (record-field-mutable? . r5105)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . r5115) (record-predicate . r5114) (record-mutator . r5113) (record-constructor . r5112) (record-accessor . r5111) (make-record-type-descriptor . r5110) (make-record-constructor-descriptor . r510f)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . r4ef8) (parent-rtd . r4ef7) (nongenerative . r4ef6) (opaque . r4ef5) (sealed . r4ef4) (protocol . r4ef3) (parent . r4ef2) (immutable . r4ef1) (mutable . r4ef0) (fields . r4eef) (record-constructor-descriptor . r4ece) (record-type-descriptor . r4ecd)) '() values values '#f '#f '#t '#f) (r2af0@r298f@install-library 'r51c6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . r4c88) (&no-nans-rtd . r4c86) (&no-infinities-rcd . r4c73) (&no-infinities-rtd . r4c71) (&i/o-encoding-rcd . r4c5e) (&i/o-encoding-rtd . r4c5c) (&i/o-decoding-rcd . r4c43) (&i/o-decoding-rtd . r4c41) (&i/o-port-rcd . r4c2e) (&i/o-port-rtd . r4c2c) (&i/o-file-does-not-exist-rcd . r4c13) (&i/o-file-does-not-exist-rtd . r4c11) (&i/o-file-already-exists-rcd . r4bfe) (&i/o-file-already-exists-rtd . r4bfc) (&i/o-file-is-read-only-rcd . r4be9) (&i/o-file-is-read-only-rtd . r4be7) (&i/o-file-protection-rcd . r4bd4) (&i/o-file-protection-rtd . r4bd2) (&i/o-filename-rcd . r4bbf) (&i/o-filename-rtd . r4bbd) (&i/o-invalid-position-rcd . r4ba4) (&i/o-invalid-position-rtd . r4ba2) (&i/o-write-rcd . r4b89) (&i/o-write-rtd . r4b87) (&i/o-read-rcd . r4b74) (&i/o-read-rtd . r4b72) (&i/o-rcd . r4b5f) (&i/o-rtd . r4b5d) (&undefined-rcd . r4b4a) (&undefined-rtd . r4b48) (&syntax-rcd . r4b35) (&syntax-rtd . r4b33) (&lexical-rcd . r4b14) (&lexical-rtd . r4b12) (&implementation-restriction-rcd . r4aff) (&implementation-restriction-rtd . r4afd) (&non-continuable-rcd . r4aea) (&non-continuable-rtd . r4ae8) (&who-rcd . r4ad5) (&who-rtd . r4ad3) (&irritants-rcd . r4aba) (&irritants-rtd . r4ab8) (&assertion-rcd . r4a9f) (&assertion-rtd . r4a9d) (&violation-rcd . r4a8a) (&violation-rtd . r4a88) (&error-rcd . r4a75) (&error-rtd . r4a73) (&serious-rcd . r4a60) (&serious-rtd . r4a5e) (&warning-rcd . r4a4b) (&warning-rtd . r4a49) (&message-rcd . r4a36) (&message-rtd . r4a34) (&condition-rcd . r49d7) (&condition-rtd . r49d5) (syntax-error . r2fbd) (syntax-dispatch . r2ed8) (pretty-print . r51a6) (eval-core . r51a5) (set-symbol-value! . r51a4) (symbol-value . r51a3) (gensym . r51a2) (void . r51a1) (load . r4d95) (interaction-environment . r2fcd) (char-ready? . r51a0) (regexp? . r519f) (read-line . r519e) (ungensym . r519d) (alist->eq-hash-table . r519c) (assoc-ref . r519b) (print . r519a) (format . r5199) (host-os . r5198) (library-path . r296e) (standard-library-path . r5197) (file-newer? . r5196) (stat-mtime . r5195) (write-to-file . r5194) (file->list . r5193) (file->string . r5192) (digit->integer . r5191) (call-with-string-input-port . r5190) (call-with-string-io . r518f) (string-split . r518e) (bytevector-for-each . r518d) (string->regexp . r518c) (rxmatch . r518b) (regexp-replace-all . r518a) (hashtable-for-each . r5189) (call-process . r5188) (local-tz-offset . r5187) (microseconds . r5186) (directory-list . r5185) (set-current-directory! . r5184) (expand-path . r5183) (current-directory . r5182) (%spawn . r5181) (%waitpid . r5180) (pointer->integer . r517f) (pointer? . r517e) (%ffi-supported? . r517d) (%ffi-pointer-ref . r517c) (%ffi-pointer->string . r517b) (%ffi-call->string-or-zero . r517a) (%ffi-call->double . r5179) (%ffi-call->void* . r5178) (%ffi-call->void . r5177) (%ffi-call->int . r5176) (%ffi-lookup . r5175) (%ffi-open . r5174) (%fork . r5173) (%pipe . r5172) (p . r5171) (open-output-string . r5170) (get-output-string . r516f) (file-stat-ctime . r516e) (file-stat-atime . r516d) (file-stat-mtime . r516c) (file-size-in-bytes . r516b) (file-writable? . r516a) (file-executable? . r5169) (file-readable? . r5168) (file-regular? . r5167) (file-symbolic-link? . r5166) (file-directory? . r5165) (create-symbolic-link . r5164) (rename-file . r5163) (delete-directory . r5162) (create-directory . r5161) (get-environment-variables . r5160) (get-environment-variable . r515f) (get-timeofday . r515e) (get-command-line . r515d) (sys-display . r515c) (whereis . r515b) (register . r515a) (vm-join! . r5159) (vm-set-value! . r5158) (vm? . r5157) (main-vm? . r5156) (vm-eval . r5155) (vm-self . r5154) (vm-start! . r5153) (make-vm . r5152) (mutex-try-lock! . r5151) (mutex-unlock! . r5150) (mutex-lock! . r514f) (mutex? . r514e) (make-mutex . r514d) (condition-variable-notify-all! . r514c) (condition-variable-notify! . r514b) (condition-variable-wait! . r514a) (make-condition-variable . r5149) (mosh-executable-path . r5148) (make-file-options . r5147) (source-info . r5146) (make-compiler-instruction . r5145) (make-instruction . r5144) (set-source-info! . r5143) (bignum? . r5142) (fast-equal? . r5141) (fasl-read . r5140) (fasl-write . r513f) (time-usage . r513e) (os-constant . r513d) (make-parameter . r27a1) (socket-port . r513c) (socket-shutdown . r513b) (socket-close . r513a) (socket-send . r5139) (socket-recv! . r5138) (socket-recv . r5137) (make-server-socket . r5136) (make-client-socket . r5135) (socket-accept . r5134) (socket? . r5133) (string-upcase . r5132) (string-titlecase . r5131) (string-normalize-nfkd . r5130) (string-normalize-nfkc . r512f) (string-normalize-nfd . r512e) (string-normalize-nfc . r512d) (string-foldcase . r512c) (string-downcase . r512b) (string-ci>? . r512a) (string-ci>=? . r5129) (string-ci=? . r5128) (string-ci<? . r5127) (string-ci<=? . r5126) (char-whitespace? . r5125) (char-upper-case? . r5124) (char-title-case? . r5123) (char-numeric? . r5122) (char-lower-case? . r5121) (char-general-category . r5120) (char-upcase . r511f) (char-titlecase . r511e) (char-foldcase . r511d) (char-downcase . r511c) (char-ci>? . r511b) (char-ci>=? . r511a) (char-ci=? . r5119) (char-ci<? . r5118) (char-ci<=? . r5117) (char-alphabetic? . r5116) (make-variable-transformer . r2d05) (identifier? . r2fc3) (generate-temporaries . r2faf) (free-identifier=? . r2fb1) (syntax->datum . r2fc7) (datum->syntax . r2fc5) (bound-identifier=? . r2fb3) (record-type-descriptor? . r5115) (record-predicate . r5114) (record-mutator . r5113) (record-constructor . r5112) (record-accessor . r5111) (make-record-type-descriptor . r5110) (make-record-constructor-descriptor . r510f) (record? . r510e) (record-type-uid . r510d) (record-type-sealed? . r510c) (record-type-parent . r510b) (record-type-opaque? . r510a) (record-type-name . r5109) (record-type-generative? . r5108) (record-type-field-names . r5107) (record-rtd . r5106) (record-field-mutable? . r5105) (delete-file . r5104) (file-exists? . r5103) (vector-sort! . r5102) (vector-sort . r5101) (list-sort . r5100) (symbol-hash . r50ff) (string-ci-hash . r50fe) (string-hash . r50fd) (equal-hash . r50fc) (hashtable-equivalence-function . r50fb) (make-hashtable . r50fa) (hashtable-hash-function . r50f9) (make-eqv-hashtable . r50f8) (make-eq-hashtable . r50f7) (hashtable? . r50f6) (hashtable-update! . r50f5) (hashtable-size . r50f4) (hashtable-set! . r50f3) (hashtable-ref . r50f2) (hashtable-mutable? . r50f1) (hashtable-keys . r50f0) (hashtable-entries . r50ef) (hashtable-delete! . r50ee) (hashtable-copy . r50ed) (hashtable-contains? . r50ec) (hashtable-clear! . r50eb) (call-with-output-file . r50ea) (call-with-input-file . r50e9) (write-char . r50e8) (write . r50e7) (with-output-to-file . r50e6) (with-input-from-file . r50e5) (read-char . r50e4) (read . r50e3) (peek-char . r50e2) (open-output-file . r50e1) (open-input-file . r50e0) (newline . r50df) (display . r50de) (close-output-port . r50dd) (close-input-port . r50dc) (eof-object? . r50db) (eof-object . r50da) (current-error-port . r50d9) (current-output-port . r50d8) (current-input-port . r50d7) (output-port? . r50d6) (input-port? . r50d5) (utf-8-codec . r50d4) (utf-16-codec . r50d3) (transcoder-error-handling-mode . r50d2) (transcoder-eol-style . r50d1) (transcoder-codec . r50d0) (transcoded-port . r50cf) (textual-port? . r50ce) (string->bytevector . r50cd) (standard-output-port . r50cc) (standard-input-port . r50cb) (standard-error-port . r50ca) (set-port-position! . r50c9) (put-u8 . r50c8) (put-string . r50c7) (put-datum . r50c6) (put-char . r50c5) (put-bytevector . r50c4) (port? . r50c3) (port-transcoder . r50c2) (port-position . r50c1) (port-has-set-port-position!? . r50c0) (port-has-port-position? . r50bf) (port-eof? . r50be) (output-port-buffer-mode . r50bd) (open-string-output-port . r50bc) (open-string-input-port . r50bb) (open-file-output-port . r50ba) (open-file-input/output-port . r50b9) (open-file-input-port . r50b8) (open-bytevector-output-port . r50b7) (open-bytevector-input-port . r50b6) (native-transcoder . r50b5) (native-eol-style . r50b4) (make-transcoder . r50b3) (latin-1-codec . r50b2) (make-i/o-write-error . r4b83) (make-i/o-read-error . r4b6e) (make-i/o-port-error . r4c24) (make-i/o-invalid-position-error . r4b9a) (make-i/o-filename-error . r4bb5) (make-i/o-file-protection-error . r4bce) (make-i/o-file-is-read-only-error . r4be3) (make-i/o-file-does-not-exist-error . r4c0d) (make-i/o-file-already-exists-error . r4bf8) (make-i/o-error . r4b59) (make-i/o-encoding-error . r4c54) (make-i/o-decoding-error . r4c3d) (make-custom-textual-output-port . r50b1) (make-custom-textual-input/output-port . r50b0) (make-custom-textual-input-port . r50af) (make-custom-binary-output-port . r50ae) (make-custom-binary-input/output-port . r50ad) (make-custom-binary-input-port . r50ac) (make-bytevector . r50ab) (lookahead-u8 . r50aa) (lookahead-char . r50a9) (i/o-write-error? . r4b85) (i/o-read-error? . r4b70) (i/o-port-error? . r4c28) (i/o-invalid-position-error? . r4b9e) (i/o-filename-error? . r4bb9) (i/o-file-protection-error? . r4bd0) (i/o-file-is-read-only-error? . r4be5) (i/o-file-does-not-exist-error? . r4c0f) (i/o-file-already-exists-error? . r4bfa) (i/o-error? . r4b5b) (i/o-error-position . r4ba0) (i/o-error-port . r4c2a) (i/o-error-filename . r4bbb) (i/o-encoding-error? . r4c58) (i/o-encoding-error-char . r4c5a) (i/o-decoding-error? . r4c3f) (get-u8 . r50a8) (get-string-n! . r50a7) (get-string-n . r50a6) (get-string-all . r50a5) (get-line . r50a4) (get-datum . r50a3) (get-char . r50a2) (get-bytevector-some . r50a1) (get-bytevector-n! . r50a0) (get-bytevector-n . r509f) (get-bytevector-all . r509e) (flush-output-port . r509d) (close-port . r509c) (scheme-report-environment . r2f9d) (quotient . r509b) (null-environment . r2f9b) (remainder . r509a) (modulo . r5099) (inexact->exact . r5098) (force . r5097) (exact->inexact . r5096) (make-promise . r5095) (exit . r5094) (command-line . r4d8f) (string-fill! . r5093) (string-set! . r5092) (set-cdr! . r5091) (set-car! . r5090) (remove . r508f) (remv . r508e) (remp . r508d) (remq . r508c) (partition . r508b) (memv . r508a) (memq . r5089) (memp . r5088) (member . r5087) (exists . r5086) (for-all . r5085) (fold-right . r5084) (fold-left . r5083) (find . r5082) (filter . r5081) (cons* . r5080) (assv . r507f) (assq . r507e) (assp . r507d) (assoc . r507c) (call-with-string-output-port . r507b) (call-with-port . r507a) (call-with-bytevector-output-port . r5079) (bytevector->string . r5078) (buffer-mode? . r5077) (binary-port? . r5076) (with-exception-handler . r5075) (raise-continuable . r5074) (raise . r5073) (eval . r2fa1) (environment . r2f99) (make-enumeration . r5072) (enum-set=? . r5071) (enum-set-universe . r5070) (enum-set-union . r506f) (enum-set-subset? . r506e) (enum-set-projection . r506d) (enum-set-member? . r506c) (enum-set-intersection . r506b) (enum-set-indexer . r506a) (enum-set-difference . r5069) (enum-set-constructor . r5068) (enum-set-complement . r5067) (enum-set->list . r5066) (who-condition? . r4acf) (warning? . r4a47) (violation? . r4a86) (undefined-violation? . r4b46) (syntax-violation? . r4b2d) (syntax-violation-subform . r4b31) (syntax-violation-form . r4b2f) (syntax-violation . r2fc1) (simple-conditions . r5065) (serious-condition? . r4a5c) (non-continuable-violation? . r4ae6) (message-condition? . r4a30) (make-who-condition . r4acb) (make-warning . r4a45) (make-violation . r4a84) (make-undefined-violation . r4b44) (make-syntax-violation . r4b27) (make-serious-condition . r4a5a) (make-non-continuable-violation . r4ae4) (make-message-condition . r4a2c) (make-lexical-violation . r4b0e) (make-irritants-condition . r4ab0) (make-implementation-restriction-violation . r4af9) (make-error . r4a6f) (make-assertion-violation . r4a99) (lexical-violation? . r4b10) (irritants-condition? . r4ab4) (implementation-restriction-violation? . r4afb) (error? . r4a71) (condition-who . r4ad1) (condition-predicate . r5064) (condition-message . r4a32) (condition-irritants . r4ab6) (condition-accessor . r5063) (condition . r5062) (assertion-violation? . r4a9b) (condition? . r5061) (utf32->string . r5060) (utf16->string . r505f) (utf8->string . r505e) (uint-list->bytevector . r505d) (u8-list->bytevector . r505c) (string->utf8 . r505b) (string->utf32 . r505a) (string->utf16 . r5059) (sint-list->bytevector . r5058) (native-endianness . r5057) (bytevector? . r5056) (bytevector=? . r5055) (bytevector-uint-set! . r5054) (bytevector-uint-ref . r5053) (bytevector-u8-set! . r5052) (bytevector-u8-ref . r5051) (bytevector-u64-set! . r5050) (bytevector-u64-ref . r504f) (bytevector-u64-native-set! . r504e) (bytevector-u64-native-ref . r504d) (bytevector-u32-set! . r504c) (bytevector-u32-ref . r504b) (bytevector-u32-native-set! . r504a) (bytevector-u32-native-ref . r5049) (bytevector-u16-set! . r5048) (bytevector-u16-ref . r5047) (bytevector-u16-native-set! . r5046) (bytevector-u16-native-ref . r5045) (bytevector-sint-set! . r5044) (bytevector-sint-ref . r5043) (bytevector-s8-set! . r5042) (bytevector-s8-ref . r5041) (bytevector-s64-set! . r5040) (bytevector-s64-ref . r503f) (bytevector-s64-native-set! . r503e) (bytevector-s64-native-ref . r503d) (bytevector-s32-set! . r503c) (bytevector-s32-ref . r503b) (bytevector-s32-native-set! . r503a) (bytevector-s32-native-ref . r5039) (bytevector-s16-set! . r5038) (bytevector-s16-ref . r5037) (bytevector-s16-native-set! . r5036) (bytevector-s16-native-ref . r5035) (bytevector-length . r5034) (bytevector-ieee-single-ref . r5033) (bytevector-ieee-single-set! . r5032) (bytevector-ieee-single-native-set! . r5031) (bytevector-ieee-single-native-ref . r5030) (bytevector-ieee-double-set! . r502f) (bytevector-ieee-double-ref . r502e) (bytevector-ieee-double-native-set! . r502d) (bytevector-ieee-double-native-ref . r502c) (bytevector-fill! . r502b) (bytevector-copy! . r502a) (bytevector-copy . r5029) (bytevector->uint-list . r5028) (bytevector->u8-list . r5027) (bytevector->sint-list . r5026) (no-nans-violation? . r4c84) (no-infinities-violation? . r4c6f) (make-no-nans-violation . r4c82) (make-no-infinities-violation . r4c6d) (real->flonum . r5025) (flzero? . r5024) (fltruncate . r5023) (fltan . r5022) (flsqrt . r5021) (flsin . r5020) (flround . r501f) (flpositive? . r501e) (flonum? . r501d) (flodd? . r501c) (flnumerator . r501b) (flnegative? . r501a) (flnan? . r5019) (flmod0 . r5018) (flmod . r5017) (flmin . r5016) (flmax . r5015) (fllog . r5014) (flinteger? . r5013) (flinfinite? . r5012) (flfloor . r5011) (flfinite? . r5010) (flexpt . r500f) (flexp . r500e) (fleven? . r500d) (fldiv0-and-mod0 . r500c) (fldiv0 . r500b) (fldiv-and-mod . r500a) (fldiv . r5009) (fldenominator . r5008) (flcos . r5007) (flceiling . r5006) (flatan . r5005) (flasin . r5004) (flacos . r5003) (flabs . r5002) (fl>? . r5001) (fl>=? . r5000) (fl=? . r4fff) (fl<? . r4ffe) (fl<=? . r4ffd) (fl/ . r4ffc) (fl- . r4ffb) (fl+ . r4ffa) (fl* . r4ff9) (fixnum->flonum . r4ff8) (fxzero? . r4ff7) (fxxor . r4ff6) (fxrotate-bit-field . r4ff5) (fxreverse-bit-field . r4ff4) (fxpositive? . r4ff3) (fxodd? . r4ff2) (fxnot . r4ff1) (fxnegative? . r4ff0) (fxmod0 . r4fef) (fxmod . r4fee) (fxmin . r4fed) (fxmax . r4fec) (fxlength . r4feb) (fxior . r4fea) (fxif . r4fe9) (fxfirst-bit-set . r4fe8) (fxeven? . r4fe7) (fxdiv0-and-mod0 . r4fe6) (fxdiv0 . r4fe5) (fxdiv-and-mod . r4fe4) (fxdiv . r4fe3) (fxcopy-bit-field . r4fe2) (fxcopy-bit . r4fe1) (fxbit-set? . r4fe0) (fxbit-field . r4fdf) (fxbit-count . r4fde) (fxarithmetic-shift-right . r4fdd) (fxarithmetic-shift-left . r4fdc) (fxarithmetic-shift . r4fdb) (fxand . r4fda) (fx>? . r4fd9) (fx>=? . r4fd8) (fx=? . r4fd7) (fx<? . r4fd6) (fx<=? . r4fd5) (fx-/carry . r4fd4) (fx- . r4fd3) (fx+/carry . r4fd2) (fx+ . r4fd1) (fx*/carry . r4fd0) (fx* . r4fcf) (greatest-fixnum . r4fce) (least-fixnum . r4fcd) (fixnum-width . r4fcc) (fixnum? . r4fcb) (bitwise-rotate-bit-field . r4fca) (bitwise-reverse-bit-field . r4fc9) (bitwise-length . r4fc8) (bitwise-if . r4fc7) (bitwise-first-bit-set . r4fc6) (bitwise-copy-bit-field . r4fc5) (bitwise-copy-bit . r4fc4) (bitwise-bit-set? . r4fc3) (bitwise-bit-field . r4fc2) (bitwise-bit-count . r4fc1) (bitwise-xor . r4fc0) (bitwise-ior . r4fbf) (bitwise-and . r4fbe) (bitwise-not . r4fbd) (bitwise-arithmetic-shift-right . r4fbc) (bitwise-arithmetic-shift-left . r4fbb) (bitwise-arithmetic-shift . r4fba) (zero? . r4fb9) (vector? . r4fb8) (vector-set! . r4fb7) (vector-ref . r4fb6) (vector-map . r4fb5) (vector-length . r4fb4) (vector-for-each . r4fb3) (vector-fill! . r4fb2) (vector->list . r4fb1) (vector . r4fb0) (values . r4faf) (truncate . r4fae) (tan . r4fad) (symbol? . r4fac) (symbol=? . r4fab) (symbol->string . r4faa) (substring . r4fa9) (string? . r4fa8) (string>? . r4fa7) (string>=? . r4fa6) (string=? . r4fa5) (string<? . r4fa4) (string<=? . r4fa3) (string-ref . r4fa2) (string-length . r4fa1) (string-for-each . r4fa0) (string-copy . r4f9f) (string-append . r4f9e) (string->symbol . r4f9d) (string->number . r4f9c) (string->list . r4f9b) (string . r4f9a) (sqrt . r4f99) (sin . r4f98) (round . r4f97) (reverse . r4f96) (real? . r4f95) (real-valued? . r4f94) (real-part . r4f93) (rationalize . r4f92) (rational? . r4f91) (rational-valued? . r4f90) (procedure? . r4f8f) (positive? . r4f8e) (pair? . r4f8d) (odd? . r4f8c) (numerator . r4f8b) (number? . r4f8a) (number->string . r4f89) (null? . r4f88) (not . r4f87) (negative? . r4f86) (nan? . r4f85) (min . r4f84) (max . r4f83) (map . r4f82) (make-vector . r4f81) (make-string . r4f80) (make-rectangular . r4f7f) (make-polar . r4f7e) (magnitude . r4f7d) (log . r4f7c) (list? . r4f7b) (list-tail . r4f7a) (list-ref . r4f79) (list->vector . r4f78) (list->string . r4f77) (list . r4f76) (length . r4f75) (lcm . r4f74) (integer? . r4f73) (integer-valued? . r4f72) (integer->char . r4f71) (infinite? . r4f70) (inexact? . r4f6f) (inexact . r4f6e) (imag-part . r4f6d) (gcd . r4f6c) (for-each . r4f6b) (floor . r4f6a) (finite? . r4f69) (expt . r4f68) (exp . r4f67) (exact? . r4f66) (exact-integer-sqrt . r4f65) (exact . r4f64) (even? . r4f63) (error . r4f62) (eqv? . r4f61) (equal? . r4f60) (eq? . r4f5f) (dynamic-wind . r4f5e) (div0-and-mod0 . r4f5d) (mod0 . r4f5c) (div0 . r4f5b) (div-and-mod . r4f5a) (mod . r4f59) (div . r4f58) (denominator . r4f57) (cos . r4f56) (cons . r4f55) (complex? . r4f54) (char? . r4f53) (char>? . r4f52) (char>=? . r4f51) (char=? . r4f50) (char<? . r4f4f) (char<=? . r4f4e) (char->integer . r4f4d) (ceiling . r4f4c) (call-with-values . r4f4b) (call/cc . r4f4a) (call-with-current-continuation . r4f49) (cddddr . r4f48) (cdddar . r4f47) (cddadr . r4f46) (cddaar . r4f45) (cdaddr . r4f44) (cdadar . r4f43) (cdaadr . r4f42) (cdaaar . r4f41) (cadddr . r4f40) (caddar . r4f3f) (cadadr . r4f3e) (cadaar . r4f3d) (caaddr . r4f3c) (caadar . r4f3b) (caaadr . r4f3a) (caaaar . r4f39) (cdddr . r4f38) (cddar . r4f37) (cdadr . r4f36) (cdaar . r4f35) (caddr . r4f34) (cadar . r4f33) (caadr . r4f32) (caaar . r4f31) (cddr . r4f30) (cdar . r4f2f) (cadr . r4f2e) (caar . r4f2d) (cdr . r4f2c) (car . r4f2b) (boolean? . r4f2a) (boolean=? . r4f29) (atan . r4f28) (assertion-violation . r4f27) (assertion-error . r2fbb) (asin . r4f26) (apply . r4f25) (append . r4f24) (angle . r4f23) (acos . r4f22) (abs . r4f21) (/ . r4f20) (* . r4f1f) (- . r4f1e) (+ . r4f1d) (>= . r4f1c) (> . r4f1b) (= . r4f1a) (<= . r4f19) (< . r4f18) (library . r4f17) (&no-nans . r4f16) (&no-infinities . r4f15) (&i/o-encoding . r4f14) (&i/o-decoding . r4f13) (&i/o-port . r4f12) (&i/o-file-does-not-exist . r4f11) (&i/o-file-already-exists . r4f10) (&i/o-file-is-read-only . r4f0f) (&i/o-file-protection . r4f0e) (&i/o-filename . r4f0d) (&i/o-invalid-position . r4f0c) (&i/o-write . r4f0b) (&i/o-read . r4f0a) (&i/o . r4f09) (&undefined . r4f08) (&syntax . r4f07) (&lexical . r4f06) (&implementation-restriction . r4f05) (&non-continuable . r4f04) (&who . r4f03) (&irritants . r4f02) (&assertion . r4f01) (&violation . r4f00) (&error . r4eff) (&serious . r4efe) (&warning . r4efd) (&message . r4efc) (&condition . r4efb) (define-condition-type . r4efa) (define-enumeration . r4ef9) (define-record-type . r4ef8) (parent-rtd . r4ef7) (nongenerative . r4ef6) (opaque . r4ef5) (sealed . r4ef4) (protocol . r4ef3) (parent . r4ef2) (immutable . r4ef1) (mutable . r4ef0) (fields . r4eef) (error-handling-mode . r4eee) (file-options . r4eed) (buffer-mode . r4eec) (eol-style . r4eeb) (guard . r4eea) (trace-define . r4ee9) (trace-lambda . r4ee8) (unsyntax-splicing . r4ee7) (unsyntax . r4ee6) (unquote-splicing . r4ee5) (unquote . r4ee4) (_ . r4ee3) (else . r4ee2) (=> . r4ee1) (... . r4ee0) (assert . r4edf) (endianness . r4ede) (delay . r4edd) (time . r4edc) (do . r4edb) (cond . r4eda) (let* . r4ed9) (let . r4ed8) (let*-values . r4ed7) (let-values . r4ed6) (identifier-syntax . r4ed5) (with-syntax . r4ed4) (quasisyntax . r4ed3) (quasiquote . r4ed2) (syntax-rules . r4ed1) (include . r4ed0) (define-struct . r4ecf) (record-constructor-descriptor . r4ece) (record-type-descriptor . r4ecd) (case . r4ecc) (parameterize . r4ecb) (unless . r4eca) (when . r4ec9) (or . r4ec8) (and . r4ec7) (if . r4ec6) (letrec* . r4ec5) (letrec . r4ec4) (type-descriptor . r4ec3) (case-lambda . r4ec2) (lambda . r4ec1) (syntax . r4ec0) (syntax-case . r4ebf) (quote . r4ebe) (foreign-call . r4ebd) (letrec-syntax . r4ebc) (let-syntax . r4ebb) (set! . r4eba) (import . r4eb9) (begin . r4eb8) (module . r4eb7) (define-syntax . r4eb6) (define . r4eb5)) '((r4c88 core-prim . &no-nans-rcd) (r4c86 core-prim . &no-nans-rtd) (r4c73 core-prim . &no-infinities-rcd) (r4c71 core-prim . &no-infinities-rtd) (r4c5e core-prim . &i/o-encoding-rcd) (r4c5c core-prim . &i/o-encoding-rtd) (r4c43 core-prim . &i/o-decoding-rcd) (r4c41 core-prim . &i/o-decoding-rtd) (r4c2e core-prim . &i/o-port-rcd) (r4c2c core-prim . &i/o-port-rtd) (r4c13 core-prim . &i/o-file-does-not-exist-rcd) (r4c11 core-prim . &i/o-file-does-not-exist-rtd) (r4bfe core-prim . &i/o-file-already-exists-rcd) (r4bfc core-prim . &i/o-file-already-exists-rtd) (r4be9 core-prim . &i/o-file-is-read-only-rcd) (r4be7 core-prim . &i/o-file-is-read-only-rtd) (r4bd4 core-prim . &i/o-file-protection-rcd) (r4bd2 core-prim . &i/o-file-protection-rtd) (r4bbf core-prim . &i/o-filename-rcd) (r4bbd core-prim . &i/o-filename-rtd) (r4ba4 core-prim . &i/o-invalid-position-rcd) (r4ba2 core-prim . &i/o-invalid-position-rtd) (r4b89 core-prim . &i/o-write-rcd) (r4b87 core-prim . &i/o-write-rtd) (r4b74 core-prim . &i/o-read-rcd) (r4b72 core-prim . &i/o-read-rtd) (r4b5f core-prim . &i/o-rcd) (r4b5d core-prim . &i/o-rtd) (r4b4a core-prim . &undefined-rcd) (r4b48 core-prim . &undefined-rtd) (r4b35 core-prim . &syntax-rcd) (r4b33 core-prim . &syntax-rtd) (r4b14 core-prim . &lexical-rcd) (r4b12 core-prim . &lexical-rtd) (r4aff core-prim . &implementation-restriction-rcd) (r4afd core-prim . &implementation-restriction-rtd) (r4aea core-prim . &non-continuable-rcd) (r4ae8 core-prim . &non-continuable-rtd) (r4ad5 core-prim . &who-rcd) (r4ad3 core-prim . &who-rtd) (r4aba core-prim . &irritants-rcd) (r4ab8 core-prim . &irritants-rtd) (r4a9f core-prim . &assertion-rcd) (r4a9d core-prim . &assertion-rtd) (r4a8a core-prim . &violation-rcd) (r4a88 core-prim . &violation-rtd) (r4a75 core-prim . &error-rcd) (r4a73 core-prim . &error-rtd) (r4a60 core-prim . &serious-rcd) (r4a5e core-prim . &serious-rtd) (r4a4b core-prim . &warning-rcd) (r4a49 core-prim . &warning-rtd) (r4a36 core-prim . &message-rcd) (r4a34 core-prim . &message-rtd) (r49d7 core-prim . &condition-rcd) (r49d5 core-prim . &condition-rtd) (r2fbd core-prim . syntax-error) (r2ed8 core-prim . syntax-dispatch) (r51a6 core-prim . pretty-print) (r51a5 core-prim . eval-core) (r51a4 core-prim . set-symbol-value!) (r51a3 core-prim . symbol-value) (r51a2 core-prim . gensym) (r51a1 core-prim . void) (r4d95 core-prim . load) (r2fcd core-prim . interaction-environment) (r51a0 core-prim . char-ready?) (r519f core-prim . regexp?) (r519e core-prim . read-line) (r519d core-prim . ungensym) (r519c core-prim . alist->eq-hash-table) (r519b core-prim . assoc-ref) (r519a core-prim . print) (r5199 core-prim . format) (r5198 core-prim . host-os) (r296e core-prim . library-path) (r5197 core-prim . standard-library-path) (r5196 core-prim . file-newer?) (r5195 core-prim . stat-mtime) (r5194 core-prim . write-to-file) (r5193 core-prim . file->list) (r5192 core-prim . file->string) (r5191 core-prim . digit->integer) (r5190 core-prim . call-with-string-input-port) (r518f core-prim . call-with-string-io) (r518e core-prim . string-split) (r518d core-prim . bytevector-for-each) (r518c core-prim . string->regexp) (r518b core-prim . rxmatch) (r518a core-prim . regexp-replace-all) (r5189 core-prim . hashtable-for-each) (r5188 core-prim . call-process) (r5187 core-prim . local-tz-offset) (r5186 core-prim . microseconds) (r5185 core-prim . directory-list) (r5184 core-prim . set-current-directory!) (r5183 core-prim . expand-path) (r5182 core-prim . current-directory) (r5181 core-prim . %spawn) (r5180 core-prim . %waitpid) (r517f core-prim . pointer->integer) (r517e core-prim . pointer?) (r517d core-prim . %ffi-supported?) (r517c core-prim . %ffi-pointer-ref) (r517b core-prim . %ffi-pointer->string) (r517a core-prim . %ffi-call->string-or-zero) (r5179 core-prim . %ffi-call->double) (r5178 core-prim . %ffi-call->void*) (r5177 core-prim . %ffi-call->void) (r5176 core-prim . %ffi-call->int) (r5175 core-prim . %ffi-lookup) (r5174 core-prim . %ffi-open) (r5173 core-prim . %fork) (r5172 core-prim . %pipe) (r5171 core-prim . p) (r5170 core-prim . open-output-string) (r516f core-prim . get-output-string) (r516e core-prim . file-stat-ctime) (r516d core-prim . file-stat-atime) (r516c core-prim . file-stat-mtime) (r516b core-prim . file-size-in-bytes) (r516a core-prim . file-writable?) (r5169 core-prim . file-executable?) (r5168 core-prim . file-readable?) (r5167 core-prim . file-regular?) (r5166 core-prim . file-symbolic-link?) (r5165 core-prim . file-directory?) (r5164 core-prim . create-symbolic-link) (r5163 core-prim . rename-file) (r5162 core-prim . delete-directory) (r5161 core-prim . create-directory) (r5160 core-prim . get-environment-variables) (r515f core-prim . get-environment-variable) (r515e core-prim . get-timeofday) (r515d core-prim . get-command-line) (r515c core-prim . sys-display) (r515b core-prim . whereis) (r515a core-prim . register) (r5159 core-prim . vm-join!) (r5158 core-prim . vm-set-value!) (r5157 core-prim . vm?) (r5156 core-prim . main-vm?) (r5155 core-prim . vm-eval) (r5154 core-prim . vm-self) (r5153 core-prim . vm-start!) (r5152 core-prim . make-vm) (r5151 core-prim . mutex-try-lock!) (r5150 core-prim . mutex-unlock!) (r514f core-prim . mutex-lock!) (r514e core-prim . mutex?) (r514d core-prim . make-mutex) (r514c core-prim . condition-variable-notify-all!) (r514b core-prim . condition-variable-notify!) (r514a core-prim . condition-variable-wait!) (r5149 core-prim . make-condition-variable) (r5148 core-prim . mosh-executable-path) (r5147 core-prim . make-file-options) (r5146 core-prim . source-info) (r5145 core-prim . make-compiler-instruction) (r5144 core-prim . make-instruction) (r5143 core-prim . set-source-info!) (r5142 core-prim . bignum?) (r5141 core-prim . fast-equal?) (r5140 core-prim . fasl-read) (r513f core-prim . fasl-write) (r513e core-prim . time-usage) (r513d core-prim . os-constant) (r27a1 core-prim . make-parameter) (r513c core-prim . socket-port) (r513b core-prim . socket-shutdown) (r513a core-prim . socket-close) (r5139 core-prim . socket-send) (r5138 core-prim . socket-recv!) (r5137 core-prim . socket-recv) (r5136 core-prim . make-server-socket) (r5135 core-prim . make-client-socket) (r5134 core-prim . socket-accept) (r5133 core-prim . socket?) (r5132 core-prim . string-upcase) (r5131 core-prim . string-titlecase) (r5130 core-prim . string-normalize-nfkd) (r512f core-prim . string-normalize-nfkc) (r512e core-prim . string-normalize-nfd) (r512d core-prim . string-normalize-nfc) (r512c core-prim . string-foldcase) (r512b core-prim . string-downcase) (r512a core-prim . string-ci>?) (r5129 core-prim . string-ci>=?) (r5128 core-prim . string-ci=?) (r5127 core-prim . string-ci<?) (r5126 core-prim . string-ci<=?) (r5125 core-prim . char-whitespace?) (r5124 core-prim . char-upper-case?) (r5123 core-prim . char-title-case?) (r5122 core-prim . char-numeric?) (r5121 core-prim . char-lower-case?) (r5120 core-prim . char-general-category) (r511f core-prim . char-upcase) (r511e core-prim . char-titlecase) (r511d core-prim . char-foldcase) (r511c core-prim . char-downcase) (r511b core-prim . char-ci>?) (r511a core-prim . char-ci>=?) (r5119 core-prim . char-ci=?) (r5118 core-prim . char-ci<?) (r5117 core-prim . char-ci<=?) (r5116 core-prim . char-alphabetic?) (r2d05 core-prim . make-variable-transformer) (r2fc3 core-prim . identifier?) (r2faf core-prim . generate-temporaries) (r2fb1 core-prim . free-identifier=?) (r2fc7 core-prim . syntax->datum) (r2fc5 core-prim . datum->syntax) (r2fb3 core-prim . bound-identifier=?) (r5115 core-prim . record-type-descriptor?) (r5114 core-prim . record-predicate) (r5113 core-prim . record-mutator) (r5112 core-prim . record-constructor) (r5111 core-prim . record-accessor) (r5110 core-prim . make-record-type-descriptor) (r510f core-prim . make-record-constructor-descriptor) (r510e core-prim . record?) (r510d core-prim . record-type-uid) (r510c core-prim . record-type-sealed?) (r510b core-prim . record-type-parent) (r510a core-prim . record-type-opaque?) (r5109 core-prim . record-type-name) (r5108 core-prim . record-type-generative?) (r5107 core-prim . record-type-field-names) (r5106 core-prim . record-rtd) (r5105 core-prim . record-field-mutable?) (r5104 core-prim . delete-file) (r5103 core-prim . file-exists?) (r5102 core-prim . vector-sort!) (r5101 core-prim . vector-sort) (r5100 core-prim . list-sort) (r50ff core-prim . symbol-hash) (r50fe core-prim . string-ci-hash) (r50fd core-prim . string-hash) (r50fc core-prim . equal-hash) (r50fb core-prim . hashtable-equivalence-function) (r50fa core-prim . make-hashtable) (r50f9 core-prim . hashtable-hash-function) (r50f8 core-prim . make-eqv-hashtable) (r50f7 core-prim . make-eq-hashtable) (r50f6 core-prim . hashtable?) (r50f5 core-prim . hashtable-update!) (r50f4 core-prim . hashtable-size) (r50f3 core-prim . hashtable-set!) (r50f2 core-prim . hashtable-ref) (r50f1 core-prim . hashtable-mutable?) (r50f0 core-prim . hashtable-keys) (r50ef core-prim . hashtable-entries) (r50ee core-prim . hashtable-delete!) (r50ed core-prim . hashtable-copy) (r50ec core-prim . hashtable-contains?) (r50eb core-prim . hashtable-clear!) (r50ea core-prim . call-with-output-file) (r50e9 core-prim . call-with-input-file) (r50e8 core-prim . write-char) (r50e7 core-prim . write) (r50e6 core-prim . with-output-to-file) (r50e5 core-prim . with-input-from-file) (r50e4 core-prim . read-char) (r50e3 core-prim . read) (r50e2 core-prim . peek-char) (r50e1 core-prim . open-output-file) (r50e0 core-prim . open-input-file) (r50df core-prim . newline) (r50de core-prim . display) (r50dd core-prim . close-output-port) (r50dc core-prim . close-input-port) (r50db core-prim . eof-object?) (r50da core-prim . eof-object) (r50d9 core-prim . current-error-port) (r50d8 core-prim . current-output-port) (r50d7 core-prim . current-input-port) (r50d6 core-prim . output-port?) (r50d5 core-prim . input-port?) (r50d4 core-prim . utf-8-codec) (r50d3 core-prim . utf-16-codec) (r50d2 core-prim . transcoder-error-handling-mode) (r50d1 core-prim . transcoder-eol-style) (r50d0 core-prim . transcoder-codec) (r50cf core-prim . transcoded-port) (r50ce core-prim . textual-port?) (r50cd core-prim . string->bytevector) (r50cc core-prim . standard-output-port) (r50cb core-prim . standard-input-port) (r50ca core-prim . standard-error-port) (r50c9 core-prim . set-port-position!) (r50c8 core-prim . put-u8) (r50c7 core-prim . put-string) (r50c6 core-prim . put-datum) (r50c5 core-prim . put-char) (r50c4 core-prim . put-bytevector) (r50c3 core-prim . port?) (r50c2 core-prim . port-transcoder) (r50c1 core-prim . port-position) (r50c0 core-prim . port-has-set-port-position!?) (r50bf core-prim . port-has-port-position?) (r50be core-prim . port-eof?) (r50bd core-prim . output-port-buffer-mode) (r50bc core-prim . open-string-output-port) (r50bb core-prim . open-string-input-port) (r50ba core-prim . open-file-output-port) (r50b9 core-prim . open-file-input/output-port) (r50b8 core-prim . open-file-input-port) (r50b7 core-prim . open-bytevector-output-port) (r50b6 core-prim . open-bytevector-input-port) (r50b5 core-prim . native-transcoder) (r50b4 core-prim . native-eol-style) (r50b3 core-prim . make-transcoder) (r50b2 core-prim . latin-1-codec) (r4b83 core-prim . make-i/o-write-error) (r4b6e core-prim . make-i/o-read-error) (r4c24 core-prim . make-i/o-port-error) (r4b9a core-prim . make-i/o-invalid-position-error) (r4bb5 core-prim . make-i/o-filename-error) (r4bce core-prim . make-i/o-file-protection-error) (r4be3 core-prim . make-i/o-file-is-read-only-error) (r4c0d core-prim . make-i/o-file-does-not-exist-error) (r4bf8 core-prim . make-i/o-file-already-exists-error) (r4b59 core-prim . make-i/o-error) (r4c54 core-prim . make-i/o-encoding-error) (r4c3d core-prim . make-i/o-decoding-error) (r50b1 core-prim . make-custom-textual-output-port) (r50b0 core-prim . make-custom-textual-input/output-port) (r50af core-prim . make-custom-textual-input-port) (r50ae core-prim . make-custom-binary-output-port) (r50ad core-prim . make-custom-binary-input/output-port) (r50ac core-prim . make-custom-binary-input-port) (r50ab core-prim . make-bytevector) (r50aa core-prim . lookahead-u8) (r50a9 core-prim . lookahead-char) (r4b85 core-prim . i/o-write-error?) (r4b70 core-prim . i/o-read-error?) (r4c28 core-prim . i/o-port-error?) (r4b9e core-prim . i/o-invalid-position-error?) (r4bb9 core-prim . i/o-filename-error?) (r4bd0 core-prim . i/o-file-protection-error?) (r4be5 core-prim . i/o-file-is-read-only-error?) (r4c0f core-prim . i/o-file-does-not-exist-error?) (r4bfa core-prim . i/o-file-already-exists-error?) (r4b5b core-prim . i/o-error?) (r4ba0 core-prim . i/o-error-position) (r4c2a core-prim . i/o-error-port) (r4bbb core-prim . i/o-error-filename) (r4c58 core-prim . i/o-encoding-error?) (r4c5a core-prim . i/o-encoding-error-char) (r4c3f core-prim . i/o-decoding-error?) (r50a8 core-prim . get-u8) (r50a7 core-prim . get-string-n!) (r50a6 core-prim . get-string-n) (r50a5 core-prim . get-string-all) (r50a4 core-prim . get-line) (r50a3 core-prim . get-datum) (r50a2 core-prim . get-char) (r50a1 core-prim . get-bytevector-some) (r50a0 core-prim . get-bytevector-n!) (r509f core-prim . get-bytevector-n) (r509e core-prim . get-bytevector-all) (r509d core-prim . flush-output-port) (r509c core-prim . close-port) (r2f9d core-prim . scheme-report-environment) (r509b core-prim . quotient) (r2f9b core-prim . null-environment) (r509a core-prim . remainder) (r5099 core-prim . modulo) (r5098 core-prim . inexact->exact) (r5097 core-prim . force) (r5096 core-prim . exact->inexact) (r5095 core-prim . make-promise) (r5094 core-prim . exit) (r4d8f core-prim . command-line) (r5093 core-prim . string-fill!) (r5092 core-prim . string-set!) (r5091 core-prim . set-cdr!) (r5090 core-prim . set-car!) (r508f core-prim . remove) (r508e core-prim . remv) (r508d core-prim . remp) (r508c core-prim . remq) (r508b core-prim . partition) (r508a core-prim . memv) (r5089 core-prim . memq) (r5088 core-prim . memp) (r5087 core-prim . member) (r5086 core-prim . exists) (r5085 core-prim . for-all) (r5084 core-prim . fold-right) (r5083 core-prim . fold-left) (r5082 core-prim . find) (r5081 core-prim . filter) (r5080 core-prim . cons*) (r507f core-prim . assv) (r507e core-prim . assq) (r507d core-prim . assp) (r507c core-prim . assoc) (r507b core-prim . call-with-string-output-port) (r507a core-prim . call-with-port) (r5079 core-prim . call-with-bytevector-output-port) (r5078 core-prim . bytevector->string) (r5077 core-prim . buffer-mode?) (r5076 core-prim . binary-port?) (r5075 core-prim . with-exception-handler) (r5074 core-prim . raise-continuable) (r5073 core-prim . raise) (r2fa1 core-prim . eval) (r2f99 core-prim . environment) (r5072 core-prim . make-enumeration) (r5071 core-prim . enum-set=?) (r5070 core-prim . enum-set-universe) (r506f core-prim . enum-set-union) (r506e core-prim . enum-set-subset?) (r506d core-prim . enum-set-projection) (r506c core-prim . enum-set-member?) (r506b core-prim . enum-set-intersection) (r506a core-prim . enum-set-indexer) (r5069 core-prim . enum-set-difference) (r5068 core-prim . enum-set-constructor) (r5067 core-prim . enum-set-complement) (r5066 core-prim . enum-set->list) (r4acf core-prim . who-condition?) (r4a47 core-prim . warning?) (r4a86 core-prim . violation?) (r4b46 core-prim . undefined-violation?) (r4b2d core-prim . syntax-violation?) (r4b31 core-prim . syntax-violation-subform) (r4b2f core-prim . syntax-violation-form) (r2fc1 core-prim . syntax-violation) (r5065 core-prim . simple-conditions) (r4a5c core-prim . serious-condition?) (r4ae6 core-prim . non-continuable-violation?) (r4a30 core-prim . message-condition?) (r4acb core-prim . make-who-condition) (r4a45 core-prim . make-warning) (r4a84 core-prim . make-violation) (r4b44 core-prim . make-undefined-violation) (r4b27 core-prim . make-syntax-violation) (r4a5a core-prim . make-serious-condition) (r4ae4 core-prim . make-non-continuable-violation) (r4a2c core-prim . make-message-condition) (r4b0e core-prim . make-lexical-violation) (r4ab0 core-prim . make-irritants-condition) (r4af9 core-prim . make-implementation-restriction-violation) (r4a6f core-prim . make-error) (r4a99 core-prim . make-assertion-violation) (r4b10 core-prim . lexical-violation?) (r4ab4 core-prim . irritants-condition?) (r4afb core-prim . implementation-restriction-violation?) (r4a71 core-prim . error?) (r4ad1 core-prim . condition-who) (r5064 core-prim . condition-predicate) (r4a32 core-prim . condition-message) (r4ab6 core-prim . condition-irritants) (r5063 core-prim . condition-accessor) (r5062 core-prim . condition) (r4a9b core-prim . assertion-violation?) (r5061 core-prim . condition?) (r5060 core-prim . utf32->string) (r505f core-prim . utf16->string) (r505e core-prim . utf8->string) (r505d core-prim . uint-list->bytevector) (r505c core-prim . u8-list->bytevector) (r505b core-prim . string->utf8) (r505a core-prim . string->utf32) (r5059 core-prim . string->utf16) (r5058 core-prim . sint-list->bytevector) (r5057 core-prim . native-endianness) (r5056 core-prim . bytevector?) (r5055 core-prim . bytevector=?) (r5054 core-prim . bytevector-uint-set!) (r5053 core-prim . bytevector-uint-ref) (r5052 core-prim . bytevector-u8-set!) (r5051 core-prim . bytevector-u8-ref) (r5050 core-prim . bytevector-u64-set!) (r504f core-prim . bytevector-u64-ref) (r504e core-prim . bytevector-u64-native-set!) (r504d core-prim . bytevector-u64-native-ref) (r504c core-prim . bytevector-u32-set!) (r504b core-prim . bytevector-u32-ref) (r504a core-prim . bytevector-u32-native-set!) (r5049 core-prim . bytevector-u32-native-ref) (r5048 core-prim . bytevector-u16-set!) (r5047 core-prim . bytevector-u16-ref) (r5046 core-prim . bytevector-u16-native-set!) (r5045 core-prim . bytevector-u16-native-ref) (r5044 core-prim . bytevector-sint-set!) (r5043 core-prim . bytevector-sint-ref) (r5042 core-prim . bytevector-s8-set!) (r5041 core-prim . bytevector-s8-ref) (r5040 core-prim . bytevector-s64-set!) (r503f core-prim . bytevector-s64-ref) (r503e core-prim . bytevector-s64-native-set!) (r503d core-prim . bytevector-s64-native-ref) (r503c core-prim . bytevector-s32-set!) (r503b core-prim . bytevector-s32-ref) (r503a core-prim . bytevector-s32-native-set!) (r5039 core-prim . bytevector-s32-native-ref) (r5038 core-prim . bytevector-s16-set!) (r5037 core-prim . bytevector-s16-ref) (r5036 core-prim . bytevector-s16-native-set!) (r5035 core-prim . bytevector-s16-native-ref) (r5034 core-prim . bytevector-length) (r5033 core-prim . bytevector-ieee-single-ref) (r5032 core-prim . bytevector-ieee-single-set!) (r5031 core-prim . bytevector-ieee-single-native-set!) (r5030 core-prim . bytevector-ieee-single-native-ref) (r502f core-prim . bytevector-ieee-double-set!) (r502e core-prim . bytevector-ieee-double-ref) (r502d core-prim . bytevector-ieee-double-native-set!) (r502c core-prim . bytevector-ieee-double-native-ref) (r502b core-prim . bytevector-fill!) (r502a core-prim . bytevector-copy!) (r5029 core-prim . bytevector-copy) (r5028 core-prim . bytevector->uint-list) (r5027 core-prim . bytevector->u8-list) (r5026 core-prim . bytevector->sint-list) (r4c84 core-prim . no-nans-violation?) (r4c6f core-prim . no-infinities-violation?) (r4c82 core-prim . make-no-nans-violation) (r4c6d core-prim . make-no-infinities-violation) (r5025 core-prim . real->flonum) (r5024 core-prim . flzero?) (r5023 core-prim . fltruncate) (r5022 core-prim . fltan) (r5021 core-prim . flsqrt) (r5020 core-prim . flsin) (r501f core-prim . flround) (r501e core-prim . flpositive?) (r501d core-prim . flonum?) (r501c core-prim . flodd?) (r501b core-prim . flnumerator) (r501a core-prim . flnegative?) (r5019 core-prim . flnan?) (r5018 core-prim . flmod0) (r5017 core-prim . flmod) (r5016 core-prim . flmin) (r5015 core-prim . flmax) (r5014 core-prim . fllog) (r5013 core-prim . flinteger?) (r5012 core-prim . flinfinite?) (r5011 core-prim . flfloor) (r5010 core-prim . flfinite?) (r500f core-prim . flexpt) (r500e core-prim . flexp) (r500d core-prim . fleven?) (r500c core-prim . fldiv0-and-mod0) (r500b core-prim . fldiv0) (r500a core-prim . fldiv-and-mod) (r5009 core-prim . fldiv) (r5008 core-prim . fldenominator) (r5007 core-prim . flcos) (r5006 core-prim . flceiling) (r5005 core-prim . flatan) (r5004 core-prim . flasin) (r5003 core-prim . flacos) (r5002 core-prim . flabs) (r5001 core-prim . fl>?) (r5000 core-prim . fl>=?) (r4fff core-prim . fl=?) (r4ffe core-prim . fl<?) (r4ffd core-prim . fl<=?) (r4ffc core-prim . fl/) (r4ffb core-prim . fl-) (r4ffa core-prim . fl+) (r4ff9 core-prim . fl*) (r4ff8 core-prim . fixnum->flonum) (r4ff7 core-prim . fxzero?) (r4ff6 core-prim . fxxor) (r4ff5 core-prim . fxrotate-bit-field) (r4ff4 core-prim . fxreverse-bit-field) (r4ff3 core-prim . fxpositive?) (r4ff2 core-prim . fxodd?) (r4ff1 core-prim . fxnot) (r4ff0 core-prim . fxnegative?) (r4fef core-prim . fxmod0) (r4fee core-prim . fxmod) (r4fed core-prim . fxmin) (r4fec core-prim . fxmax) (r4feb core-prim . fxlength) (r4fea core-prim . fxior) (r4fe9 core-prim . fxif) (r4fe8 core-prim . fxfirst-bit-set) (r4fe7 core-prim . fxeven?) (r4fe6 core-prim . fxdiv0-and-mod0) (r4fe5 core-prim . fxdiv0) (r4fe4 core-prim . fxdiv-and-mod) (r4fe3 core-prim . fxdiv) (r4fe2 core-prim . fxcopy-bit-field) (r4fe1 core-prim . fxcopy-bit) (r4fe0 core-prim . fxbit-set?) (r4fdf core-prim . fxbit-field) (r4fde core-prim . fxbit-count) (r4fdd core-prim . fxarithmetic-shift-right) (r4fdc core-prim . fxarithmetic-shift-left) (r4fdb core-prim . fxarithmetic-shift) (r4fda core-prim . fxand) (r4fd9 core-prim . fx>?) (r4fd8 core-prim . fx>=?) (r4fd7 core-prim . fx=?) (r4fd6 core-prim . fx<?) (r4fd5 core-prim . fx<=?) (r4fd4 core-prim . fx-/carry) (r4fd3 core-prim . fx-) (r4fd2 core-prim . fx+/carry) (r4fd1 core-prim . fx+) (r4fd0 core-prim . fx*/carry) (r4fcf core-prim . fx*) (r4fce core-prim . greatest-fixnum) (r4fcd core-prim . least-fixnum) (r4fcc core-prim . fixnum-width) (r4fcb core-prim . fixnum?) (r4fca core-prim . bitwise-rotate-bit-field) (r4fc9 core-prim . bitwise-reverse-bit-field) (r4fc8 core-prim . bitwise-length) (r4fc7 core-prim . bitwise-if) (r4fc6 core-prim . bitwise-first-bit-set) (r4fc5 core-prim . bitwise-copy-bit-field) (r4fc4 core-prim . bitwise-copy-bit) (r4fc3 core-prim . bitwise-bit-set?) (r4fc2 core-prim . bitwise-bit-field) (r4fc1 core-prim . bitwise-bit-count) (r4fc0 core-prim . bitwise-xor) (r4fbf core-prim . bitwise-ior) (r4fbe core-prim . bitwise-and) (r4fbd core-prim . bitwise-not) (r4fbc core-prim . bitwise-arithmetic-shift-right) (r4fbb core-prim . bitwise-arithmetic-shift-left) (r4fba core-prim . bitwise-arithmetic-shift) (r4fb9 core-prim . zero?) (r4fb8 core-prim . vector?) (r4fb7 core-prim . vector-set!) (r4fb6 core-prim . vector-ref) (r4fb5 core-prim . vector-map) (r4fb4 core-prim . vector-length) (r4fb3 core-prim . vector-for-each) (r4fb2 core-prim . vector-fill!) (r4fb1 core-prim . vector->list) (r4fb0 core-prim . vector) (r4faf core-prim . values) (r4fae core-prim . truncate) (r4fad core-prim . tan) (r4fac core-prim . symbol?) (r4fab core-prim . symbol=?) (r4faa core-prim . symbol->string) (r4fa9 core-prim . substring) (r4fa8 core-prim . string?) (r4fa7 core-prim . string>?) (r4fa6 core-prim . string>=?) (r4fa5 core-prim . string=?) (r4fa4 core-prim . string<?) (r4fa3 core-prim . string<=?) (r4fa2 core-prim . string-ref) (r4fa1 core-prim . string-length) (r4fa0 core-prim . string-for-each) (r4f9f core-prim . string-copy) (r4f9e core-prim . string-append) (r4f9d core-prim . string->symbol) (r4f9c core-prim . string->number) (r4f9b core-prim . string->list) (r4f9a core-prim . string) (r4f99 core-prim . sqrt) (r4f98 core-prim . sin) (r4f97 core-prim . round) (r4f96 core-prim . reverse) (r4f95 core-prim . real?) (r4f94 core-prim . real-valued?) (r4f93 core-prim . real-part) (r4f92 core-prim . rationalize) (r4f91 core-prim . rational?) (r4f90 core-prim . rational-valued?) (r4f8f core-prim . procedure?) (r4f8e core-prim . positive?) (r4f8d core-prim . pair?) (r4f8c core-prim . odd?) (r4f8b core-prim . numerator) (r4f8a core-prim . number?) (r4f89 core-prim . number->string) (r4f88 core-prim . null?) (r4f87 core-prim . not) (r4f86 core-prim . negative?) (r4f85 core-prim . nan?) (r4f84 core-prim . min) (r4f83 core-prim . max) (r4f82 core-prim . map) (r4f81 core-prim . make-vector) (r4f80 core-prim . make-string) (r4f7f core-prim . make-rectangular) (r4f7e core-prim . make-polar) (r4f7d core-prim . magnitude) (r4f7c core-prim . log) (r4f7b core-prim . list?) (r4f7a core-prim . list-tail) (r4f79 core-prim . list-ref) (r4f78 core-prim . list->vector) (r4f77 core-prim . list->string) (r4f76 core-prim . list) (r4f75 core-prim . length) (r4f74 core-prim . lcm) (r4f73 core-prim . integer?) (r4f72 core-prim . integer-valued?) (r4f71 core-prim . integer->char) (r4f70 core-prim . infinite?) (r4f6f core-prim . inexact?) (r4f6e core-prim . inexact) (r4f6d core-prim . imag-part) (r4f6c core-prim . gcd) (r4f6b core-prim . for-each) (r4f6a core-prim . floor) (r4f69 core-prim . finite?) (r4f68 core-prim . expt) (r4f67 core-prim . exp) (r4f66 core-prim . exact?) (r4f65 core-prim . exact-integer-sqrt) (r4f64 core-prim . exact) (r4f63 core-prim . even?) (r4f62 core-prim . error) (r4f61 core-prim . eqv?) (r4f60 core-prim . equal?) (r4f5f core-prim . eq?) (r4f5e core-prim . dynamic-wind) (r4f5d core-prim . div0-and-mod0) (r4f5c core-prim . mod0) (r4f5b core-prim . div0) (r4f5a core-prim . div-and-mod) (r4f59 core-prim . mod) (r4f58 core-prim . div) (r4f57 core-prim . denominator) (r4f56 core-prim . cos) (r4f55 core-prim . cons) (r4f54 core-prim . complex?) (r4f53 core-prim . char?) (r4f52 core-prim . char>?) (r4f51 core-prim . char>=?) (r4f50 core-prim . char=?) (r4f4f core-prim . char<?) (r4f4e core-prim . char<=?) (r4f4d core-prim . char->integer) (r4f4c core-prim . ceiling) (r4f4b core-prim . call-with-values) (r4f4a core-prim . call/cc) (r4f49 core-prim . call-with-current-continuation) (r4f48 core-prim . cddddr) (r4f47 core-prim . cdddar) (r4f46 core-prim . cddadr) (r4f45 core-prim . cddaar) (r4f44 core-prim . cdaddr) (r4f43 core-prim . cdadar) (r4f42 core-prim . cdaadr) (r4f41 core-prim . cdaaar) (r4f40 core-prim . cadddr) (r4f3f core-prim . caddar) (r4f3e core-prim . cadadr) (r4f3d core-prim . cadaar) (r4f3c core-prim . caaddr) (r4f3b core-prim . caadar) (r4f3a core-prim . caaadr) (r4f39 core-prim . caaaar) (r4f38 core-prim . cdddr) (r4f37 core-prim . cddar) (r4f36 core-prim . cdadr) (r4f35 core-prim . cdaar) (r4f34 core-prim . caddr) (r4f33 core-prim . cadar) (r4f32 core-prim . caadr) (r4f31 core-prim . caaar) (r4f30 core-prim . cddr) (r4f2f core-prim . cdar) (r4f2e core-prim . cadr) (r4f2d core-prim . caar) (r4f2c core-prim . cdr) (r4f2b core-prim . car) (r4f2a core-prim . boolean?) (r4f29 core-prim . boolean=?) (r4f28 core-prim . atan) (r4f27 core-prim . assertion-violation) (r2fbb core-prim . assertion-error) (r4f26 core-prim . asin) (r4f25 core-prim . apply) (r4f24 core-prim . append) (r4f23 core-prim . angle) (r4f22 core-prim . acos) (r4f21 core-prim . abs) (r4f20 core-prim . /) (r4f1f core-prim . *) (r4f1e core-prim . -) (r4f1d core-prim . +) (r4f1c core-prim . >=) (r4f1b core-prim . >) (r4f1a core-prim . =) (r4f19 core-prim . <=) (r4f18 core-prim . <) (r4f17 core-prim . library) (r4f16 $core-rtd &no-nans-rtd &no-nans-rcd) (r4f15 $core-rtd &no-infinities-rtd &no-infinities-rcd) (r4f14 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (r4f13 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (r4f12 $core-rtd &i/o-port-rtd &i/o-port-rcd) (r4f11 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (r4f10 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (r4f0f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (r4f0e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (r4f0d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (r4f0c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (r4f0b $core-rtd &i/o-write-rtd &i/o-write-rcd) (r4f0a $core-rtd &i/o-read-rtd &i/o-read-rcd) (r4f09 $core-rtd &i/o-rtd &i/o-rcd) (r4f08 $core-rtd &undefined-rtd &undefined-rcd) (r4f07 $core-rtd &syntax-rtd &syntax-rcd) (r4f06 $core-rtd &lexical-rtd &lexical-rcd) (r4f05 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (r4f04 $core-rtd &non-continuable-rtd &non-continuable-rcd) (r4f03 $core-rtd &who-rtd &who-rcd) (r4f02 $core-rtd &irritants-rtd &irritants-rcd) (r4f01 $core-rtd &assertion-rtd &assertion-rcd) (r4f00 $core-rtd &violation-rtd &violation-rcd) (r4eff $core-rtd &error-rtd &error-rcd) (r4efe $core-rtd &serious-rtd &serious-rcd) (r4efd $core-rtd &warning-rtd &warning-rcd) (r4efc $core-rtd &message-rtd &message-rcd) (r4efb $core-rtd &condition-rtd &condition-rcd) (r4efa macro . define-condition-type) (r4ef9 macro . define-enumeration) (r4ef8 macro . define-record-type) (r4ef7 macro . parent-rtd) (r4ef6 macro . nongenerative) (r4ef5 macro . opaque) (r4ef4 macro . sealed) (r4ef3 macro . protocol) (r4ef2 macro . parent) (r4ef1 macro . immutable) (r4ef0 macro . mutable) (r4eef macro . fields) (r4eee macro . error-handling-mode) (r4eed macro . file-options) (r4eec macro . buffer-mode) (r4eeb macro . eol-style) (r4eea macro . guard) (r4ee9 macro . trace-define) (r4ee8 macro . trace-lambda) (r4ee7 macro . unsyntax-splicing) (r4ee6 macro . unsyntax) (r4ee5 macro . unquote-splicing) (r4ee4 macro . unquote) (r4ee3 macro . _) (r4ee2 macro . else) (r4ee1 macro . =>) (r4ee0 macro . ...) (r4edf macro . assert) (r4ede macro . endianness) (r4edd macro . delay) (r4edc macro . time) (r4edb macro . do) (r4eda macro . cond) (r4ed9 macro . let*) (r4ed8 macro . let) (r4ed7 macro . let*-values) (r4ed6 macro . let-values) (r4ed5 macro . identifier-syntax) (r4ed4 macro . with-syntax) (r4ed3 macro . quasisyntax) (r4ed2 macro . quasiquote) (r4ed1 macro . syntax-rules) (r4ed0 macro . include) (r4ecf macro . define-struct) (r4ece core-macro . record-constructor-descriptor) (r4ecd core-macro . record-type-descriptor) (r4ecc macro . case) (r4ecb macro . parameterize) (r4eca macro . unless) (r4ec9 macro . when) (r4ec8 core-macro . or) (r4ec7 core-macro . and) (r4ec6 core-macro . if) (r4ec5 core-macro . letrec*) (r4ec4 core-macro . letrec) (r4ec3 core-macro . type-descriptor) (r4ec2 core-macro . case-lambda) (r4ec1 core-macro . lambda) (r4ec0 core-macro . syntax) (r4ebf core-macro . syntax-case) (r4ebe core-macro . quote) (r4ebd core-macro . foreign-call) (r4ebc letrec-syntax) (r4ebb let-syntax) (r4eba set!) (r4eb9 import) (r4eb8 begin) (r4eb7 module) (r4eb6 define-syntax) (r4eb5 define)) values values '#f '#f '#f '#f) (r2af0@r298f@install-library 'r51c7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . r51a6) (eval-core . r51a5) (set-symbol-value! . r51a4) (symbol-value . r51a3) (gensym . r51a2) (void . r51a1)) '() values values '#f '#f '#f '#f) (r2af0@r298f@install-library 'r51c8 '(mosh) '() '() '() '() '((set-symbol-value! . r51a4) (symbol-value . r51a3) (regexp? . r519f) (read-line . r519e) (ungensym . r519d) (alist->eq-hash-table . r519c) (assoc-ref . r519b) (print . r519a) (format . r5199) (host-os . r5198) (library-path . r296e) (standard-library-path . r5197) (file-newer? . r5196) (stat-mtime . r5195) (digit->integer . r5191) (call-with-string-input-port . r5190) (call-with-string-io . r518f) (string-split . r518e) (bytevector-for-each . r518d) (string->regexp . r518c) (rxmatch . r518b) (regexp-replace-all . r518a) (hashtable-for-each . r5189) (set-current-directory! . r5184) (expand-path . r5183) (current-directory . r5182) (p . r5171) (get-timeofday . r515e) (get-command-line . r515d) (sys-display . r515c) (whereis . r515b) (register . r515a) (vm-join! . r5159) (vm-set-value! . r5158) (vm? . r5157) (main-vm? . r5156) (vm-eval . r5155) (vm-self . r5154) (vm-start! . r5153) (make-vm . r5152) (mutex-try-lock! . r5151) (mutex-unlock! . r5150) (mutex-lock! . r514f) (mutex? . r514e) (make-mutex . r514d) (condition-variable-notify-all! . r514c) (condition-variable-notify! . r514b) (condition-variable-wait! . r514a) (make-condition-variable . r5149) (mosh-executable-path . r5148) (make-file-options . r5147) (source-info . r5146) (make-compiler-instruction . r5145) (make-instruction . r5144) (set-source-info! . r5143) (bignum? . r5142) (fast-equal? . r5141) (fasl-read . r5140) (fasl-write . r513f) (time-usage . r513e) (os-constant . r513d) (time . r4edc) (include . r4ed0)) '() values values '#f '#f '#f '#f) (r2af0@r298f@install-library 'r51c9 '(system) '() '() '() '() '((write-to-file . r5194) (file->list . r5193) (file->string . r5192) (call-process . r5188) (local-tz-offset . r5187) (microseconds . r5186) (directory-list . r5185) (expand-path . r5183) (%spawn . r5181) (%waitpid . r5180) (pointer->integer . r517f) (pointer? . r517e) (%ffi-supported? . r517d) (%ffi-pointer-ref . r517c) (%ffi-pointer->string . r517b) (%ffi-call->string-or-zero . r517a) (%ffi-call->double . r5179) (%ffi-call->void* . r5178) (%ffi-call->void . r5177) (%ffi-call->int . r5176) (%ffi-lookup . r5175) (%ffi-open . r5174) (%fork . r5173) (%pipe . r5172) (open-output-string . r5170) (get-output-string . r516f) (file-stat-ctime . r516e) (file-stat-atime . r516d) (file-stat-mtime . r516c) (file-size-in-bytes . r516b) (file-writable? . r516a) (file-executable? . r5169) (file-readable? . r5168) (file-regular? . r5167) (file-symbolic-link? . r5166) (file-directory? . r5165) (create-symbolic-link . r5164) (rename-file . r5163) (delete-directory . r5162) (create-directory . r5161) (get-environment-variables . r5160) (get-environment-variable . r515f) (make-parameter . r27a1) (socket-port . r513c) (socket-shutdown . r513b) (socket-close . r513a) (socket-send . r5139) (socket-recv! . r5138) (socket-recv . r5137) (make-server-socket . r5136) (make-client-socket . r5135) (socket-accept . r5134) (socket? . r5133) (parameterize . r4ecb)) '() values values '#f '#f '#f '#f))
((lambda (r4d7e@add-library-path! r4d80@parse-and-add-library-path r4d82@for-each-with-index r4d84@rpad r4d86@condition-printer r4d88@record->field-alist r4d8a@map-with-index r4d8c@repl r4d8e@trace-printer r4d90@command-line r4d92@local-library-path r4d94@load/args r4d96@load r4d98@ironscheme-build r4d9a@eval-top-level r4d9c@compile-system-libraries r4d9e@compile r4da0@compile->closure r4da2@pre-compile-r6rs-file r4da4@load-r6rs-top-level r4da6@load-r6rs-top-level-sexp) (begin (set! r4d7e@add-library-path! (lambda (r4dc9@path) (r2ae0@r296f@library-path (append (r2ae0@r296f@library-path) (list r4dc9@path))))) (set! r4d80@parse-and-add-library-path (lambda (r4dcb@paths r4dcc@message) ((lambda (r4dcf@t) (if r4dcf@t ((lambda (r4dd1@paths) (for-each (lambda (r4dd3@path) (if (file-exists? r4dd3@path) (r4d7e@add-library-path! (expand-path r4dd3@path)) (format (current-error-port) r4dcc@message r4dd3@path))) (string-split r4dd1@paths '#\:))) r4dcf@t) (void))) r4dcb@paths))) (set! r4d82@for-each-with-index (lambda (r4dd5@proc r4dd6@lst) (letrec ((r4dd9@loop (lambda (r4ddb@i r4ddc@lst) (if (null? r4ddc@lst) (if '#f '#f (void)) (begin (r4dd5@proc r4ddb@i (car r4ddc@lst)) (r4dd9@loop (+ r4ddb@i '1) (cdr r4ddc@lst))))))) (r4dd9@loop '1 r4dd6@lst)))) (set! r4d84@rpad (lambda (r4ddf@str r4de0@pad r4de1@n) ((lambda (r4de5@rest) ((letrec ((r4de7@loop (lambda (r4de9@rest r4dea@ret) (if (<= r4de9@rest '0) r4dea@ret (r4de7@loop (- r4de9@rest '1) (string-append r4dea@ret r4de0@pad)))))) r4de7@loop) r4de5@rest (format '"~a" r4ddf@str))) (- r4de1@n (string-length (format '"~a" r4ddf@str)))))) (set! r4d86@condition-printer (lambda (r4ded@e r4dee@port) ((lambda (r4df2@max-condition-len) (begin (set! r4df2@max-condition-len (apply max (map (lambda (r4e03@c) (string-length (symbol->string (record-type-name (record-rtd r4e03@c))))) (simple-conditions r4ded@e)))) (begin (display '" Condition components:\n" r4dee@port) (r4d82@for-each-with-index (lambda (r4df3@i r4df4@x) ((lambda (r4df7@rtd r4df8@fields-alist) (begin (format r4dee@port '" ~d. ~a" r4df3@i (r4d84@rpad (symbol->string (record-type-name r4df7@rtd)) '" " r4df2@max-condition-len)) (if (null? r4df8@fields-alist) (newline r4dee@port) (void)) ((letrec ((r4dfb@loop (lambda (r4dfd@first r4dfe@fields-alist) (if (null? r4dfe@fields-alist) '() ((lambda (r4e01@field) (begin (if (not r4dfd@first) (display (r4d84@rpad '"" '" " (+ '4 r4df2@max-condition-len)) r4dee@port) (void)) (display '"       " r4dee@port) (display (car r4e01@field) r4dee@port) (display '": " r4dee@port) (write (cdr r4e01@field) r4dee@port) (newline r4dee@port) (r4dfb@loop '#f (cdr r4dfe@fields-alist)))) (car r4dfe@fields-alist)))))) r4dfb@loop) '#t r4df8@fields-alist))) (record-rtd r4df4@x) (r4d88@record->field-alist r4df4@x))) (simple-conditions r4ded@e))))) '#f))) (set! r4d88@record->field-alist (lambda (r4e05@r) ((lambda (r4e08@ref) (begin (set! r4e08@ref (lambda (r4e13@rtd r4e14@i r4e15@x) ((lambda (r4e19@val) (if (symbol? r4e19@val) (ungensym r4e19@val) r4e19@val)) ((record-accessor r4e13@rtd r4e14@i) r4e15@x)))) ((letrec ((r4e09@loop (lambda (r4e0b@ret r4e0c@rtd) (if r4e0c@rtd (r4e09@loop (append r4e0b@ret (r4d8a@map-with-index (lambda (r4e0f@i r4e10@field) (cons r4e10@field (r4e08@ref r4e0c@rtd r4e0f@i r4e05@r))) (vector->list (record-type-field-names r4e0c@rtd)))) (record-type-parent r4e0c@rtd)) r4e0b@ret)))) r4e09@loop) '() (record-rtd r4e05@r)))) '#f))) (set! r4d8a@map-with-index (lambda (r4e1b@proc r4e1c@lst) ((letrec ((r4e1f@loop (lambda (r4e21@i r4e22@lst r4e23@ret) (if (null? r4e22@lst) (reverse r4e23@ret) (r4e1f@loop (+ r4e21@i '1) (cdr r4e22@lst) (cons (r4e1b@proc r4e21@i (car r4e22@lst)) r4e23@ret)))))) r4e1f@loop) '0 r4e1c@lst '()))) (set! r4d8c@repl (lambda r4e27@x ((lambda (r4e2a@rec) (begin (set! r4e2a@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (r4e2d@r4e2b) (lambda () (with-exception-handler (lambda (r4e2f@e) ((call/cc (lambda (r4e31@r4e2c) (r4e2d@r4e2b (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? r4e2f@e) (r4d86@condition-printer r4e2f@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" r4e2f@e))) (r4e31@r4e2c (lambda () (raise-continuable r4e2f@e)))))))))) (lambda () ((letrec ((r4e33@loop (lambda (r4e35@line r4e36@accum) ((lambda (r4e3a@parentheses-ok? r4e3c@eval-string-print) (begin (set! r4e3a@parentheses-ok? (lambda (r4e41@text) ((letrec ((r4e43@loop (lambda (r4e45@chars r4e46@p0 r4e47@p1) (if (null? r4e45@chars) (= '0 r4e46@p0 r4e47@p1) ((lambda (r4e4b@t) (if (memv r4e4b@t '(#\()) (r4e43@loop (cdr r4e45@chars) (+ r4e46@p0 '1) r4e47@p1) (if (memv r4e4b@t '(#\))) (r4e43@loop (cdr r4e45@chars) (- r4e46@p0 '1) r4e47@p1) (if (memv r4e4b@t '(#\[)) (r4e43@loop (cdr r4e45@chars) r4e46@p0 (+ r4e47@p1 '1)) (if (memv r4e4b@t '(#\])) (r4e43@loop (cdr r4e45@chars) r4e46@p0 (- r4e47@p1 '1)) (r4e43@loop (cdr r4e45@chars) r4e46@p0 r4e47@p1)))))) (car r4e45@chars)))))) r4e43@loop) (string->list r4e41@text) '0 '0))) (set! r4e3c@eval-string-print (lambda (r4e3f@text) (if (not (or (string=? '"\n" r4e3f@text) (= '0 (string-length r4e3f@text)))) (write (r4d9a@eval-top-level (call-with-port (open-string-input-port r4e3f@text) read))) (void)))) (if (eof-object? r4e35@line) (begin (r4e3c@eval-string-print r4e36@accum) (exit)) ((lambda (r4e3d@current) (if (r4e3a@parentheses-ok? r4e3d@current) (r4e3c@eval-string-print r4e3d@current) (r4e33@loop (get-line (current-input-port)) r4e3d@current))) (string-append r4e36@accum r4e35@line))))) '#f '#f)))) r4e33@loop) (get-line (current-input-port)) '""))))))) (newline) (r4e2a@rec)))) (r4e2a@rec))) '#f))) (set! r4d8e@trace-printer (r2878@r27a2@make-parameter write)) (set! r4d90@command-line (r2878@r27a2@make-parameter (get-command-line))) (set! r4d92@local-library-path (lambda (r4e4d@filename) (r2ae0@r296f@library-path))) (set! r4d94@load/args (lambda (r4e4f@filename . r4e51@args) (begin (apply r4da4@load-r6rs-top-level r4e4f@filename 'load r4e51@args) (void)))) (set! r4d96@load (lambda (r4e53@filename) (begin (apply r4da4@load-r6rs-top-level r4e53@filename 'load (r4d90@command-line)) (void)))) (set! r4d98@ironscheme-build (lambda () (r4d96@load '"ironscheme-buildscript.ss"))) (set! r4d9a@eval-top-level (lambda (r4e55@x) (r49aa@r2fa2@eval r4e55@x (r49c0@r2fce@interaction-environment)))) (set! r4d9c@compile-system-libraries (lambda () (r4d9a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! r4d9e@compile (lambda (r4e57@filename) (r4da4@load-r6rs-top-level r4e57@filename 'compile))) (set! r4da0@compile->closure (lambda (r4e59@filename) (r4da4@load-r6rs-top-level r4e59@filename 'closure))) (set! r4da2@pre-compile-r6rs-file (lambda (r4e5b@filename) (r4da4@load-r6rs-top-level r4e5b@filename 'compile))) (set! r4da4@load-r6rs-top-level (lambda (r4e5d@filename r4e5e@how . r4e61@args) ((lambda (r4e67@r4e64 r4e68@r4e66) ((lambda (r4e6b@swap) (dynamic-wind r4e6b@swap (lambda () ((lambda (r4e6d@x*) ((lambda (r4e6f@t) (if (memv r4e6f@t '(closure)) (r49bf@r2fcc@pre-compile-r6rs-top-level r4e6d@x*) (if (memv r4e6f@t '(load)) ((lambda (r4e75@r4e72 r4e76@r4e74) ((lambda (r4e79@swap) (dynamic-wind r4e79@swap (lambda () ((r49be@r2fca@compile-r6rs-top-level r4e6d@x*))) r4e79@swap)) (lambda () ((lambda (r4e7b@t) (begin (r4e75@r4e72 r4e76@r4e74) (set! r4e76@r4e74 r4e7b@t))) (r4e75@r4e72))))) r4d90@command-line (cons r4e5d@filename (car r4e61@args))) (if (memv r4e6f@t '(compile)) (begin (r49be@r2fca@compile-r6rs-top-level r4e6d@x*) (r2ae4@r2977@serialize-all r2873@r2798@serialize-library r28cd@r2886@compile-core-expr)) (if '#f '#f (void)))))) r4e5e@how)) (with-input-from-file r4e5d@filename (lambda () ((letrec ((r4e7d@f (lambda () ((lambda (r4e7f@x) (if (eof-object? r4e7f@x) '() (cons r4e7f@x (r4e7d@f)))) (r286b@r2788@read-annotated))))) r4e7d@f)))))) r4e6b@swap)) (lambda () ((lambda (r4e81@t) (begin (r4e67@r4e64 r4e68@r4e66) (set! r4e68@r4e66 r4e81@t))) (r4e67@r4e64))))) r2ae0@r296f@library-path (r4d92@local-library-path r4e5d@filename)))) (set! r4da6@load-r6rs-top-level-sexp (lambda (r4e83@import-spec r4e84@thunk) ((lambda (r4e8b@r4e88 r4e8c@r4e8a) ((lambda (r4e8f@swap) (dynamic-wind r4e8f@swap (lambda () ((lambda (r4e95@r4e92 r4e96@r4e94) ((lambda (r4e99@swap) (dynamic-wind r4e99@swap (lambda () ((r49be@r2fca@compile-r6rs-top-level (list (cons 'import r4e83@import-spec) (list r4e84@thunk))))) r4e99@swap)) (lambda () ((lambda (r4e9b@t) (begin (r4e95@r4e92 r4e96@r4e94) (set! r4e96@r4e94 r4e9b@t))) (r4e95@r4e92))))) r4d90@command-line '())) r4e8f@swap)) (lambda () ((lambda (r4e9d@t) (begin (r4e8b@r4e88 r4e8c@r4e8a) (set! r4e8c@r4e8a r4e9d@t))) (r4e8b@r4e88))))) r2ae0@r296f@library-path (r4d92@local-library-path '"")))) (begin (set! r4eb3@r4da6@load-r6rs-top-level-sexp r4da6@load-r6rs-top-level-sexp) (set! r4eb2@r4da4@load-r6rs-top-level r4da4@load-r6rs-top-level) (set! r4eb1@r4da2@pre-compile-r6rs-file r4da2@pre-compile-r6rs-file) (set! r4eb0@r4da0@compile->closure r4da0@compile->closure) (set! r4eaf@r4d9e@compile r4d9e@compile) (set! r4eae@r4d9c@compile-system-libraries r4d9c@compile-system-libraries) (set! r4ead@r4d9a@eval-top-level r4d9a@eval-top-level) (set! r4eac@r4d98@ironscheme-build r4d98@ironscheme-build) (set! r4eab@r4d96@load r4d96@load) (set! r4eaa@r4d94@load/args r4d94@load/args) (set! r4ea9@r4d92@local-library-path r4d92@local-library-path) (set! r4ea8@r4d90@command-line r4d90@command-line) (set! r4ea7@r4d8e@trace-printer r4d8e@trace-printer) (set! r4ea6@r4d8c@repl r4d8c@repl) (set! r4ea5@r4d8a@map-with-index r4d8a@map-with-index) (set! r4ea4@r4d88@record->field-alist r4d88@record->field-alist) (set! r4ea3@r4d86@condition-printer r4d86@condition-printer) (set! r4ea2@r4d84@rpad r4d84@rpad) (set! r4ea1@r4d82@for-each-with-index r4d82@for-each-with-index) (set! r4ea0@r4d80@parse-and-add-library-path r4d80@parse-and-add-library-path) (set! r4e9f@r4d7e@add-library-path! r4d7e@add-library-path!) (r2ae5@r2979@current-precompiled-library-loader r2874@r279a@load-serialized-library) (set-symbol-value! 'load r4d96@load) (set-symbol-value! 'pre-compile-r6rs-file r4da2@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs r4d9a@eval-top-level) (set-symbol-value! 'int-env-syms r49a1@r2f90@interaction-environment-symbols) (set-symbol-value! 'expanded2core r28cc@r2884@expanded->core) (set-symbol-value! 'trace-printer r4d8e@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (r4da7@c) (condition (r4cdb@r4ae5@make-non-continuable-violation) (r4cd1@r4acc@make-who-condition 'raise) (r4c95@r4a2d@make-message-condition '"returned from non-continuable exception") (r4cc7@r4ab1@make-irritants-condition (list r4da7@c))))) (r4d80@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (r4d80@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (r4d7e@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (r4d7e@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (r4d7e@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) ((lambda (r4da9@prefix) (r2ae1@r2971@library-extensions (r4da9@prefix '".mosh" (r2ae1@r2971@library-extensions)))) (lambda (r4dab@ext r4dac@ls) (append (map (lambda (r4daf@x) (string-append r4dab@ext r4daf@x)) r4dac@ls) r4dac@ls))) ((lambda (r4db1@args r4db2@port) ((lambda (r4db6@ref) (begin (set! r4db6@ref (lambda (r4dc1@rtd r4dc2@i r4dc3@x) ((lambda (r4dc7@val) (if (symbol? r4dc7@val) (ungensym r4dc7@val) r4dc7@val)) ((record-accessor r4dc1@rtd r4dc2@i) r4dc3@x)))) (with-exception-handler (lambda (r4db7@c) (if (condition? r4db7@c) (r4d86@condition-printer r4db7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" r4db7@c))) (lambda () (if ((call/cc (lambda (r4dbb@r4db9) (lambda () (with-exception-handler (lambda (r4dbd@c) ((call/cc (lambda (r4dbf@r4dba) (r4dbb@r4db9 (lambda () (if '#t '#f (r4dbf@r4dba (lambda () (raise-continuable r4dbd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (r4da6@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? r4db1@args) (r4d8c@repl) (r4da4@load-r6rs-top-level (car r4db1@args) 'load (cdr r4db1@args)))))))) '#f)) (r4d90@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
